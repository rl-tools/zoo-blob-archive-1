// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 217, 207, 62, 203, 102, 16, 62, 20, 8, 236, 188, 248, 145, 181, 62, 191, 104, 98, 63, 16, 26, 216, 62, 65, 42, 133, 191, 190, 70, 142, 63, 134, 52, 170, 62, 158, 124, 20, 190, 119, 240, 30, 62, 63, 129, 21, 63, 215, 149, 75, 190, 160, 214, 30, 190, 90, 95, 246, 190, 105, 36, 10, 190, 31, 117, 100, 63, 101, 245, 20, 63, 215, 36, 116, 190, 127, 209, 144, 190, 127, 252, 54, 191, 25, 232, 52, 63, 192, 160, 31, 191, 208, 232, 114, 190, 230, 74, 49, 62, 252, 205, 240, 62, 111, 96, 205, 62, 180, 39, 45, 63, 9, 30, 28, 191, 148, 72, 20, 190, 57, 194, 74, 63, 12, 217, 244, 190, 197, 241, 144, 62, 80, 83, 183, 190, 199, 10, 43, 191, 182, 105, 15, 190, 187, 30, 251, 62, 254, 176, 72, 63, 38, 19, 246, 62, 226, 47, 216, 62, 24, 145, 29, 63, 164, 81, 40, 190, 212, 87, 158, 62, 64, 195, 119, 191, 88, 172, 157, 62, 93, 82, 173, 62, 113, 220, 204, 63, 11, 211, 236, 62, 178, 29, 43, 191, 246, 222, 134, 63, 245, 211, 79, 62, 109, 222, 3, 63, 175, 34, 160, 63, 127, 126, 221, 62, 146, 38, 156, 190, 69, 200, 209, 62, 142, 233, 225, 185, 42, 72, 217, 62, 139, 195, 11, 62, 92, 23, 252, 62, 245, 8, 47, 62, 3, 44, 226, 190, 102, 248, 228, 61, 11, 41, 38, 62, 117, 143, 140, 191, 184, 176, 135, 190, 228, 18, 33, 63, 12, 62, 251, 61, 165, 30, 39, 63, 102, 247, 37, 63, 137, 146, 17, 190, 242, 148, 35, 190, 151, 63, 49, 191, 12, 136, 97, 191, 212, 105, 74, 190, 0, 147, 49, 191, 53, 210, 131, 62, 95, 113, 253, 189, 24, 137, 250, 62, 134, 54, 139, 191, 73, 116, 17, 190, 156, 47, 174, 190, 16, 63, 169, 190, 21, 239, 6, 191, 35, 123, 149, 59, 94, 210, 120, 189, 130, 245, 243, 190, 191, 228, 181, 62, 49, 39, 107, 63, 218, 234, 198, 62, 89, 85, 73, 190, 17, 228, 221, 191, 240, 246, 125, 190, 200, 231, 29, 62, 246, 30, 138, 190, 6, 43, 35, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 182, 33, 191, 206, 117, 95, 62, 188, 71, 2, 63, 254, 236, 220, 190, 39, 130, 153, 189, 150, 203, 215, 189, 142, 164, 33, 61, 206, 102, 42, 191, 81, 128, 208, 188, 121, 192, 115, 189, 13, 210, 76, 189, 128, 60, 18, 63, 180, 115, 71, 60, 107, 193, 164, 62, 17, 108, 192, 189, 105, 34, 146, 62, 43, 75, 16, 63, 166, 87, 18, 191, 166, 191, 199, 62, 181, 138, 36, 62, 215, 125, 63, 191, 37, 201, 33, 190, 3, 27, 28, 62, 111, 43, 8, 191, 153, 82, 49, 63, 111, 234, 176, 190, 129, 142, 186, 61, 146, 216, 187, 190, 15, 165, 143, 62, 154, 52, 13, 62, 170, 249, 187, 62, 72, 187, 1, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 107, 228, 61, 149, 56, 61, 190, 160, 141, 201, 61, 119, 178, 165, 191, 146, 6, 167, 190, 129, 74, 138, 191, 79, 84, 135, 188, 196, 15, 4, 191, 85, 70, 101, 191, 171, 248, 42, 191, 234, 20, 149, 190, 185, 60, 151, 189, 49, 48, 41, 63, 30, 38, 131, 62, 55, 27, 214, 190, 57, 61, 72, 62, 90, 199, 115, 62, 220, 14, 189, 62, 87, 212, 210, 61, 248, 191, 249, 62, 185, 178, 156, 60, 46, 136, 15, 191, 185, 166, 139, 190, 60, 16, 26, 191, 145, 214, 107, 62, 9, 156, 136, 62, 231, 228, 39, 191, 34, 101, 24, 191, 70, 40, 86, 62, 20, 220, 245, 61, 29, 3, 149, 62, 33, 197, 78, 62, 17, 1, 242, 189, 12, 140, 254, 188, 210, 221, 87, 190, 133, 112, 89, 61, 147, 54, 148, 62, 195, 7, 90, 61, 213, 147, 66, 190, 77, 226, 136, 191, 39, 156, 1, 62, 10, 241, 40, 62, 42, 57, 191, 62, 42, 78, 19, 191, 24, 23, 4, 190, 100, 144, 132, 62, 53, 3, 94, 62, 68, 53, 173, 188, 129, 6, 128, 189, 51, 120, 231, 190, 52, 219, 164, 189, 211, 182, 68, 62, 44, 131, 104, 62, 215, 85, 140, 191, 218, 209, 74, 62, 142, 11, 197, 59, 170, 148, 146, 190, 204, 219, 241, 190, 100, 119, 138, 61, 174, 255, 63, 189, 80, 236, 140, 187, 182, 39, 154, 62, 136, 211, 8, 191, 188, 124, 114, 189, 106, 230, 122, 61, 7, 5, 73, 61, 177, 241, 18, 62, 175, 120, 147, 62, 149, 5, 133, 62, 194, 52, 31, 62, 27, 189, 173, 189, 15, 137, 121, 62, 188, 55, 155, 62, 224, 30, 219, 62, 246, 50, 39, 62, 90, 133, 68, 61, 137, 87, 11, 191, 136, 230, 126, 189, 69, 8, 200, 62, 118, 106, 0, 191, 179, 12, 10, 62, 7, 244, 84, 191, 159, 220, 40, 62, 92, 143, 33, 191, 74, 72, 101, 190, 219, 21, 149, 190, 33, 53, 196, 62, 134, 252, 213, 62, 254, 127, 244, 61, 102, 174, 39, 62, 88, 36, 118, 190, 204, 83, 175, 62, 228, 23, 29, 189, 239, 2, 186, 190, 56, 69, 111, 190, 177, 223, 229, 190, 181, 213, 36, 62, 12, 222, 85, 191, 197, 167, 12, 62, 136, 205, 35, 191, 4, 187, 231, 60, 59, 117, 168, 191, 25, 211, 85, 62, 90, 39, 197, 190, 43, 147, 149, 191, 175, 191, 60, 189, 0, 226, 1, 191, 197, 143, 132, 62, 25, 0, 68, 190, 170, 202, 227, 61, 237, 161, 46, 191, 88, 83, 6, 190, 148, 151, 19, 186, 57, 201, 123, 189, 88, 80, 107, 60, 222, 177, 172, 189, 9, 11, 100, 190, 130, 71, 96, 190, 43, 50, 115, 190, 224, 150, 135, 191, 158, 9, 159, 61, 211, 249, 93, 62, 9, 90, 17, 62, 26, 19, 53, 190, 103, 189, 12, 189, 53, 226, 101, 190, 14, 228, 193, 62, 65, 16, 132, 61, 95, 47, 251, 189, 11, 4, 20, 190, 148, 214, 5, 190, 73, 141, 144, 189, 104, 69, 204, 189, 100, 238, 38, 190, 29, 57, 47, 190, 50, 55, 24, 190, 162, 236, 244, 189, 130, 242, 254, 188, 25, 43, 29, 190, 113, 248, 188, 189, 212, 169, 223, 189, 92, 103, 21, 62, 170, 233, 142, 189, 61, 52, 170, 189, 37, 231, 209, 61, 22, 149, 133, 61, 42, 246, 244, 189, 242, 191, 137, 60, 131, 127, 252, 61, 227, 242, 35, 189, 252, 184, 175, 61, 155, 222, 141, 189, 203, 254, 237, 187, 118, 132, 192, 189, 122, 157, 2, 62, 140, 151, 25, 190, 2, 106, 169, 189, 18, 47, 7, 190, 28, 212, 238, 61, 173, 134, 18, 190, 238, 0, 231, 59, 162, 244, 58, 189, 240, 110, 105, 191, 163, 187, 172, 189, 45, 176, 44, 190, 158, 210, 102, 190, 154, 99, 3, 190, 253, 241, 57, 61, 174, 75, 99, 189, 192, 71, 232, 62, 178, 178, 146, 62, 195, 205, 154, 62, 126, 155, 118, 190, 128, 162, 83, 62, 253, 141, 68, 189, 204, 212, 120, 189, 130, 241, 160, 191, 125, 112, 162, 191, 112, 50, 247, 189, 151, 17, 155, 189, 104, 90, 122, 61, 102, 123, 102, 190, 238, 183, 37, 60, 250, 41, 178, 189, 90, 76, 204, 61, 136, 236, 54, 191, 253, 235, 14, 63, 75, 70, 63, 190, 252, 7, 96, 61, 109, 167, 226, 61, 28, 150, 14, 62, 123, 0, 67, 62, 205, 100, 11, 190, 190, 105, 28, 62, 139, 76, 94, 60, 11, 228, 121, 62, 116, 84, 155, 61, 178, 146, 84, 62, 221, 80, 221, 189, 106, 111, 215, 62, 133, 82, 93, 61, 22, 70, 239, 62, 248, 132, 171, 62, 88, 243, 237, 189, 66, 251, 40, 190, 184, 100, 97, 190, 114, 76, 28, 62, 123, 133, 3, 189, 238, 116, 137, 61, 15, 49, 41, 189, 240, 152, 101, 61, 217, 112, 145, 188, 220, 68, 102, 61, 138, 170, 53, 60, 182, 45, 219, 61, 68, 185, 28, 63, 141, 31, 134, 190, 211, 146, 133, 190, 0, 197, 135, 62, 24, 52, 86, 62, 226, 128, 71, 190, 12, 87, 155, 188, 78, 127, 82, 189, 120, 129, 228, 188, 132, 163, 211, 189, 168, 30, 145, 191, 97, 10, 97, 62, 152, 53, 76, 191, 2, 99, 28, 58, 8, 225, 131, 191, 216, 185, 159, 61, 19, 25, 72, 191, 54, 67, 121, 191, 228, 231, 21, 190, 78, 178, 75, 190, 100, 177, 188, 189, 115, 146, 180, 62, 178, 242, 26, 62, 245, 95, 161, 190, 138, 110, 124, 191, 205, 28, 19, 62, 197, 103, 84, 62, 29, 236, 255, 62, 106, 224, 2, 62, 52, 59, 72, 189, 204, 174, 23, 191, 10, 148, 157, 190, 199, 238, 138, 190, 184, 23, 17, 62, 86, 174, 184, 189, 36, 35, 14, 191, 43, 106, 17, 189, 153, 65, 41, 190, 189, 93, 251, 60, 76, 177, 175, 62, 2, 199, 202, 190, 230, 80, 52, 188, 25, 201, 239, 189, 97, 114, 164, 62, 88, 94, 0, 62, 204, 192, 19, 190, 18, 219, 163, 59, 116, 206, 218, 190, 209, 19, 157, 61, 134, 79, 21, 60, 6, 25, 249, 61, 30, 164, 151, 62, 124, 117, 137, 60, 236, 149, 38, 191, 104, 147, 54, 191, 215, 35, 16, 63, 71, 220, 88, 191, 202, 0, 155, 189, 32, 193, 114, 190, 29, 19, 155, 61, 255, 213, 109, 190, 18, 32, 155, 190, 66, 216, 209, 61, 16, 255, 188, 189, 226, 53, 68, 190, 146, 58, 247, 189, 28, 215, 112, 190, 63, 45, 42, 62, 187, 246, 69, 190, 79, 87, 81, 190, 181, 32, 56, 190, 133, 242, 135, 62, 31, 13, 189, 189, 134, 10, 158, 188, 39, 145, 213, 189, 60, 121, 214, 190, 72, 103, 31, 191, 231, 195, 219, 189, 52, 85, 229, 190, 123, 217, 46, 62, 198, 183, 51, 191, 247, 158, 2, 61, 221, 76, 146, 190, 128, 185, 222, 190, 79, 137, 148, 60, 247, 79, 161, 62, 229, 173, 182, 61, 111, 21, 26, 191, 233, 30, 21, 62, 69, 46, 121, 62, 29, 168, 83, 62, 206, 98, 115, 189, 179, 195, 129, 62, 211, 245, 28, 190, 253, 181, 213, 190, 239, 226, 48, 61, 4, 168, 157, 191, 239, 166, 112, 62, 239, 184, 207, 61, 103, 87, 199, 190, 225, 219, 252, 188, 85, 96, 157, 62, 75, 252, 187, 62, 39, 93, 203, 62, 31, 3, 119, 189, 77, 60, 231, 61, 74, 247, 31, 190, 143, 255, 251, 189, 156, 30, 22, 191, 110, 101, 59, 190, 4, 113, 210, 190, 222, 36, 136, 62, 112, 93, 97, 190, 207, 18, 102, 190, 246, 177, 199, 61, 98, 84, 192, 61, 107, 96, 6, 188, 97, 145, 87, 190, 78, 234, 170, 61, 65, 16, 162, 190, 95, 217, 30, 62, 244, 200, 140, 189, 170, 178, 208, 190, 102, 74, 19, 61, 77, 100, 109, 189, 207, 14, 17, 62, 127, 98, 37, 189, 102, 54, 203, 190, 66, 190, 9, 191, 24, 10, 137, 190, 41, 157, 74, 190, 177, 20, 16, 62, 108, 139, 132, 190, 125, 49, 87, 62, 203, 169, 138, 62, 208, 135, 25, 62, 243, 149, 77, 191, 169, 76, 27, 189, 45, 249, 253, 188, 36, 17, 135, 62, 79, 95, 69, 62, 80, 73, 53, 190, 97, 217, 23, 62, 178, 199, 156, 191, 70, 141, 9, 59, 5, 18, 58, 61, 224, 223, 14, 63, 201, 115, 138, 61, 76, 35, 69, 62, 222, 157, 225, 60, 161, 161, 128, 191, 46, 33, 108, 62, 236, 249, 33, 62, 51, 186, 131, 62, 253, 79, 136, 60, 155, 201, 134, 61, 49, 118, 76, 190, 161, 251, 243, 190, 38, 167, 152, 191, 0, 229, 146, 61, 37, 117, 235, 189, 8, 122, 2, 61, 143, 228, 16, 61, 140, 215, 10, 62, 37, 170, 145, 190, 231, 200, 169, 191, 189, 21, 180, 61, 153, 78, 35, 189, 20, 109, 240, 61, 144, 33, 153, 189, 56, 66, 104, 190, 73, 162, 45, 62, 184, 49, 175, 190, 176, 59, 57, 190, 161, 9, 17, 189, 210, 210, 138, 190, 17, 204, 255, 61, 225, 128, 212, 190, 217, 69, 138, 189, 58, 8, 160, 190, 56, 12, 14, 190, 175, 15, 121, 191, 62, 47, 151, 60, 77, 66, 156, 190, 193, 90, 150, 61, 235, 112, 111, 62, 43, 57, 39, 191, 40, 100, 6, 62, 152, 139, 44, 191, 246, 181, 59, 190, 211, 235, 196, 189, 239, 129, 238, 190, 203, 38, 22, 189, 205, 130, 246, 61, 28, 167, 131, 62, 75, 4, 251, 189, 180, 171, 216, 190, 95, 231, 7, 191, 125, 45, 214, 190, 190, 148, 147, 191, 143, 125, 161, 190, 194, 56, 3, 190, 92, 251, 145, 190, 169, 89, 220, 190, 213, 137, 252, 61, 9, 233, 55, 59, 150, 235, 232, 61, 207, 89, 67, 62, 43, 110, 223, 61, 158, 221, 239, 60, 235, 199, 102, 62, 163, 103, 148, 62, 93, 133, 31, 62, 130, 97, 178, 190, 148, 87, 252, 189, 10, 158, 51, 62, 42, 239, 240, 190, 253, 103, 142, 191, 123, 140, 65, 191, 233, 124, 19, 191, 45, 46, 68, 62, 229, 196, 33, 189, 187, 204, 164, 190, 238, 36, 158, 62, 184, 222, 70, 63, 30, 233, 64, 62, 36, 191, 128, 190, 51, 248, 27, 60, 186, 154, 24, 190, 138, 23, 0, 62, 220, 116, 133, 60, 127, 180, 146, 62, 57, 9, 83, 62, 63, 158, 30, 190, 217, 180, 165, 61, 68, 99, 40, 190, 12, 163, 238, 61, 175, 112, 188, 60, 6, 84, 115, 189, 146, 209, 95, 61, 152, 216, 248, 189, 82, 70, 219, 189, 210, 187, 15, 189, 209, 10, 51, 190, 247, 121, 80, 189, 223, 59, 96, 189, 18, 176, 148, 188, 0, 147, 202, 61, 108, 210, 111, 188, 233, 35, 86, 189, 186, 38, 182, 189, 42, 78, 212, 187, 24, 3, 136, 189, 206, 41, 13, 62, 99, 172, 18, 190, 27, 167, 223, 188, 108, 105, 67, 189, 112, 179, 172, 189, 144, 229, 69, 190, 221, 238, 189, 188, 19, 30, 139, 61, 187, 40, 254, 189, 23, 121, 82, 189, 225, 110, 197, 189, 226, 117, 238, 189, 24, 54, 157, 189, 34, 110, 185, 189, 165, 45, 16, 189, 195, 56, 155, 189, 124, 63, 55, 61, 92, 77, 35, 61, 54, 167, 220, 189, 53, 162, 186, 189, 38, 61, 17, 190, 198, 28, 172, 189, 171, 32, 34, 190, 192, 13, 60, 189, 160, 141, 93, 61, 124, 144, 73, 190, 141, 231, 223, 189, 208, 167, 56, 190, 193, 78, 139, 61, 76, 77, 13, 62, 13, 96, 44, 190, 69, 80, 193, 61, 61, 206, 174, 61, 164, 99, 37, 190, 77, 4, 51, 60, 49, 212, 29, 62, 158, 251, 209, 61, 200, 167, 159, 61, 88, 249, 12, 61, 42, 245, 208, 60, 87, 233, 82, 190, 34, 162, 105, 61, 215, 233, 249, 189, 226, 206, 21, 190, 30, 243, 85, 61, 62, 114, 66, 189, 228, 50, 179, 59, 109, 238, 81, 62, 239, 13, 128, 190, 18, 86, 92, 188, 174, 57, 143, 190, 203, 249, 140, 188, 251, 211, 6, 61, 89, 164, 88, 61, 229, 149, 16, 63, 237, 222, 145, 62, 145, 128, 49, 190, 214, 119, 35, 189, 66, 248, 133, 62, 225, 116, 50, 61, 188, 83, 44, 62, 242, 242, 165, 190, 7, 98, 245, 61, 90, 86, 184, 61, 140, 169, 64, 190, 123, 145, 185, 61, 83, 169, 14, 62, 33, 127, 75, 190, 123, 2, 230, 61, 221, 247, 199, 188, 181, 104, 132, 62, 142, 158, 2, 190, 116, 66, 106, 190, 253, 231, 92, 62, 100, 155, 178, 188, 7, 101, 15, 190, 235, 247, 224, 61, 195, 25, 130, 191, 77, 113, 34, 189, 127, 95, 103, 191, 191, 9, 19, 189, 210, 248, 158, 191, 149, 152, 124, 61, 130, 4, 170, 190, 106, 178, 126, 191, 40, 16, 231, 190, 82, 12, 203, 190, 35, 78, 110, 187, 122, 211, 122, 61, 222, 60, 31, 61, 8, 170, 79, 191, 228, 139, 208, 190, 212, 62, 51, 62, 136, 151, 207, 61, 146, 100, 250, 60, 32, 232, 6, 187, 232, 65, 199, 61, 39, 245, 16, 189, 6, 0, 2, 191, 225, 151, 32, 191, 73, 58, 65, 62, 217, 66, 122, 59, 177, 129, 193, 189, 13, 9, 5, 190, 33, 233, 30, 62, 100, 28, 200, 189, 233, 251, 235, 61, 51, 69, 104, 188, 190, 97, 201, 57, 202, 180, 4, 62, 250, 108, 44, 190, 126, 32, 87, 61, 140, 252, 254, 190, 21, 214, 79, 62, 103, 83, 198, 190, 105, 14, 40, 191, 105, 218, 92, 62, 14, 140, 41, 61, 172, 213, 178, 62, 75, 19, 61, 190, 15, 109, 242, 61, 143, 85, 181, 60, 218, 203, 175, 62, 229, 233, 39, 190, 109, 80, 232, 189, 198, 102, 98, 61, 215, 44, 160, 190, 90, 158, 95, 60, 202, 76, 129, 62, 218, 201, 172, 62, 89, 0, 51, 61, 73, 126, 93, 62, 52, 54, 227, 190, 63, 125, 165, 190, 22, 159, 204, 62, 210, 23, 41, 191, 110, 16, 92, 190, 96, 60, 34, 62, 234, 41, 109, 60, 129, 177, 41, 62, 111, 219, 48, 190, 55, 49, 156, 188, 138, 91, 155, 190, 240, 14, 246, 61, 47, 79, 208, 62, 76, 12, 28, 190, 206, 215, 158, 62, 128, 49, 106, 190, 120, 37, 101, 189, 29, 252, 128, 190, 127, 111, 137, 62, 176, 127, 169, 191, 0, 220, 43, 62, 222, 196, 196, 61, 113, 78, 238, 187, 222, 73, 136, 62, 101, 59, 144, 190, 15, 81, 87, 62, 41, 198, 8, 190, 151, 31, 45, 61, 61, 11, 211, 62, 7, 167, 203, 61, 90, 176, 212, 61, 181, 52, 70, 190, 171, 98, 136, 191, 250, 94, 0, 191, 92, 89, 230, 190, 175, 208, 194, 190, 241, 211, 186, 61, 169, 244, 29, 62, 213, 3, 208, 190, 117, 125, 114, 62, 161, 155, 240, 61, 92, 130, 3, 190, 140, 184, 70, 189, 112, 65, 97, 61, 145, 13, 10, 187, 64, 134, 60, 62, 61, 111, 73, 61, 114, 236, 204, 61, 100, 229, 57, 62, 68, 147, 156, 62, 49, 237, 220, 62, 240, 212, 211, 61, 86, 137, 239, 190, 43, 180, 5, 62, 181, 162, 206, 62, 77, 128, 144, 190, 115, 14, 205, 190, 243, 181, 141, 191, 92, 203, 43, 62, 76, 216, 208, 189, 239, 132, 55, 61, 6, 111, 128, 190, 252, 172, 101, 61, 169, 99, 20, 62, 155, 89, 168, 60, 170, 6, 155, 60, 161, 135, 88, 62, 185, 215, 236, 61, 127, 240, 43, 62, 69, 217, 154, 61, 121, 33, 229, 60, 103, 134, 121, 190, 47, 43, 36, 62, 218, 138, 43, 61, 213, 113, 65, 190, 100, 141, 240, 189, 115, 62, 193, 189, 2, 26, 165, 59, 239, 204, 221, 189, 140, 193, 45, 62, 89, 202, 157, 61, 34, 173, 71, 61, 245, 122, 189, 60, 244, 231, 241, 189, 231, 117, 210, 61, 173, 122, 215, 188, 50, 0, 21, 189, 253, 99, 190, 189, 151, 24, 0, 61, 43, 200, 9, 188, 64, 176, 32, 190, 88, 99, 113, 61, 110, 147, 178, 61, 0, 249, 224, 61, 93, 246, 45, 190, 34, 122, 254, 61, 26, 19, 166, 189, 146, 23, 238, 189, 52, 255, 19, 190, 187, 119, 20, 190, 114, 126, 252, 189, 107, 16, 15, 190, 94, 93, 96, 189, 183, 86, 228, 187, 101, 205, 53, 188, 95, 96, 81, 190, 196, 76, 129, 191, 90, 241, 190, 190, 44, 182, 75, 189, 77, 106, 28, 191, 46, 228, 135, 62, 199, 136, 155, 191, 119, 139, 76, 188, 236, 37, 14, 62, 35, 74, 226, 187, 170, 123, 154, 61, 69, 199, 206, 61, 120, 214, 164, 62, 98, 9, 50, 191, 85, 13, 192, 61, 19, 217, 2, 190, 199, 79, 155, 190, 117, 5, 171, 61, 129, 140, 36, 62, 87, 208, 84, 190, 183, 95, 166, 191, 80, 193, 5, 62, 211, 190, 95, 190, 109, 15, 212, 190, 60, 228, 160, 61, 107, 237, 156, 188, 33, 135, 114, 190, 158, 85, 40, 60, 120, 123, 203, 61, 111, 63, 101, 188, 166, 112, 58, 191, 49, 200, 128, 61, 57, 233, 8, 186, 38, 12, 108, 61, 24, 65, 22, 189, 122, 3, 212, 61, 127, 216, 55, 62, 15, 0, 27, 62, 36, 184, 150, 189, 184, 250, 173, 60, 29, 49, 106, 62, 116, 221, 182, 62, 119, 204, 166, 62, 116, 133, 197, 190, 74, 17, 214, 60, 68, 210, 32, 62, 85, 62, 210, 187, 63, 171, 65, 61, 237, 136, 93, 191, 128, 78, 62, 189, 56, 36, 225, 189, 178, 5, 180, 188, 85, 252, 166, 190, 177, 227, 243, 60, 215, 24, 201, 60, 177, 11, 111, 62, 11, 163, 85, 62, 241, 86, 189, 62, 38, 20, 220, 61, 162, 89, 224, 61, 1, 151, 106, 189, 100, 56, 241, 59, 237, 160, 107, 189, 87, 100, 94, 189, 149, 42, 60, 60, 12, 186, 44, 62, 200, 94, 54, 62, 80, 4, 26, 190, 154, 164, 102, 62, 157, 202, 116, 190, 130, 105, 185, 190, 204, 141, 6, 62, 255, 200, 26, 190, 212, 148, 45, 189, 161, 100, 160, 62, 114, 88, 1, 61, 0, 153, 22, 189, 207, 166, 208, 61, 111, 174, 124, 62, 85, 115, 209, 187, 239, 35, 65, 60, 84, 166, 57, 62, 2, 242, 98, 190, 169, 96, 107, 190, 19, 53, 247, 189, 159, 19, 74, 61, 68, 5, 74, 62, 107, 108, 221, 62, 151, 112, 187, 61, 216, 252, 153, 62, 53, 147, 29, 191, 253, 47, 147, 190, 25, 75, 9, 62, 45, 56, 131, 62, 106, 214, 141, 190, 203, 18, 43, 189, 241, 94, 109, 189, 143, 180, 66, 191, 131, 250, 85, 190, 120, 142, 217, 189, 41, 22, 104, 190, 151, 138, 79, 62, 65, 49, 133, 191, 39, 187, 173, 188, 33, 58, 195, 62, 109, 232, 252, 61, 127, 248, 197, 190, 143, 245, 110, 61, 112, 90, 237, 61, 209, 213, 84, 191, 127, 244, 157, 61, 129, 210, 200, 190, 169, 230, 202, 190, 20, 36, 130, 61, 194, 75, 139, 62, 26, 23, 121, 190, 98, 41, 212, 191, 97, 229, 37, 186, 196, 158, 185, 188, 94, 72, 124, 191, 189, 50, 102, 190, 139, 247, 143, 61, 23, 244, 92, 190, 81, 141, 111, 62, 41, 17, 112, 61, 67, 241, 187, 190, 75, 114, 214, 190, 27, 0, 180, 61, 138, 18, 188, 191, 28, 241, 176, 62, 227, 229, 154, 191, 103, 116, 56, 189, 249, 188, 177, 191, 93, 15, 45, 62, 152, 181, 214, 61, 94, 29, 174, 191, 79, 176, 50, 62, 59, 1, 229, 189, 17, 8, 141, 62, 38, 158, 121, 190, 70, 108, 224, 190, 41, 188, 187, 189, 120, 2, 249, 191, 217, 240, 150, 61, 131, 43, 50, 60, 153, 203, 222, 189, 237, 143, 200, 62, 74, 6, 176, 61, 3, 11, 87, 61, 2, 229, 197, 190, 19, 176, 154, 190, 50, 154, 76, 62, 239, 169, 72, 62, 93, 12, 220, 60, 229, 18, 138, 190, 79, 82, 112, 60, 235, 221, 65, 191, 23, 175, 189, 62, 33, 192, 8, 190, 39, 134, 25, 190, 218, 192, 131, 189, 83, 103, 158, 189, 71, 178, 13, 190, 114, 124, 226, 61, 141, 161, 183, 60, 95, 222, 193, 189, 237, 177, 139, 186, 104, 234, 200, 61, 55, 83, 37, 62, 44, 124, 229, 189, 250, 185, 199, 189, 65, 61, 212, 61, 110, 9, 183, 189, 202, 68, 208, 188, 75, 9, 192, 188, 137, 252, 9, 189, 53, 0, 196, 61, 197, 144, 116, 188, 254, 94, 36, 61, 38, 53, 232, 189, 36, 9, 254, 60, 163, 20, 89, 60, 43, 134, 190, 189, 42, 79, 6, 190, 142, 110, 193, 188, 247, 73, 47, 190, 117, 131, 128, 189, 51, 103, 247, 186, 252, 202, 81, 61, 100, 224, 54, 60, 106, 11, 30, 190, 73, 169, 140, 189, 180, 181, 105, 188, 7, 203, 46, 61, 139, 5, 154, 61, 226, 135, 51, 190, 132, 51, 40, 190, 45, 52, 51, 190, 40, 216, 157, 189, 200, 220, 27, 61, 116, 66, 251, 61, 27, 64, 175, 60, 106, 38, 14, 190, 55, 231, 222, 61, 48, 121, 184, 187, 10, 155, 224, 61, 88, 145, 102, 61, 120, 232, 15, 190, 46, 239, 178, 61, 16, 206, 78, 190, 184, 202, 151, 189, 242, 190, 173, 189, 122, 12, 199, 189, 25, 103, 221, 189, 14, 28, 50, 61, 223, 253, 24, 61, 167, 251, 19, 190, 206, 90, 187, 60, 237, 211, 138, 61, 85, 9, 23, 62, 169, 186, 43, 190, 103, 89, 58, 190, 196, 8, 3, 189, 29, 225, 41, 62, 77, 44, 54, 59, 29, 70, 129, 190, 197, 65, 206, 58, 24, 26, 42, 62, 157, 17, 166, 188, 58, 107, 82, 61, 232, 203, 38, 191, 192, 68, 136, 189, 181, 125, 163, 62, 90, 28, 44, 62, 193, 22, 247, 190, 95, 77, 66, 62, 156, 118, 167, 62, 162, 197, 160, 60, 39, 81, 195, 61, 92, 208, 14, 190, 141, 37, 61, 190, 132, 240, 10, 62, 132, 84, 65, 62, 38, 112, 131, 61, 53, 181, 234, 191, 50, 19, 70, 62, 170, 102, 189, 61, 230, 131, 111, 191, 19, 223, 4, 191, 29, 5, 223, 61, 72, 155, 13, 189, 168, 37, 192, 189, 243, 85, 80, 62, 190, 144, 180, 190, 188, 166, 162, 61, 2, 231, 28, 62, 35, 243, 220, 190, 228, 109, 102, 61, 5, 53, 83, 190, 111, 67, 188, 189, 215, 98, 238, 188, 110, 52, 202, 61, 230, 141, 199, 191, 218, 116, 126, 190, 150, 157, 195, 189, 103, 99, 253, 189, 161, 222, 207, 189, 9, 252, 212, 188, 139, 254, 162, 61, 232, 253, 172, 190, 69, 227, 239, 60, 99, 63, 82, 189, 22, 147, 49, 191, 201, 79, 9, 62, 63, 178, 221, 189, 13, 159, 147, 61, 89, 150, 57, 191, 110, 136, 116, 190, 124, 114, 180, 188, 43, 86, 161, 188, 100, 55, 43, 61, 48, 210, 160, 62, 190, 128, 147, 188, 184, 237, 36, 62, 229, 84, 161, 62, 148, 191, 217, 190, 244, 228, 187, 189, 98, 99, 242, 61, 21, 101, 195, 60, 254, 210, 153, 61, 219, 188, 247, 60, 211, 42, 54, 188, 150, 171, 12, 190, 20, 25, 99, 191, 124, 2, 122, 63, 125, 158, 5, 190, 212, 91, 209, 62, 157, 137, 197, 62, 217, 27, 184, 62, 106, 2, 186, 190, 243, 155, 67, 190, 27, 227, 139, 61, 140, 72, 154, 190, 126, 74, 102, 189, 118, 226, 196, 190, 183, 212, 69, 62, 165, 97, 252, 185, 19, 16, 32, 190, 126, 187, 47, 191, 13, 211, 22, 62, 173, 18, 10, 190, 100, 60, 144, 62, 234, 251, 18, 63, 239, 228, 222, 62, 24, 1, 131, 189, 114, 221, 89, 191, 58, 98, 194, 186, 173, 33, 121, 62, 25, 180, 54, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 231, 72, 62, 177, 194, 38, 62, 252, 3, 216, 61, 34, 151, 150, 188, 236, 162, 239, 189, 144, 187, 233, 61, 13, 27, 105, 190, 32, 208, 146, 59, 57, 134, 158, 60, 83, 77, 235, 60, 210, 211, 109, 62, 42, 223, 20, 190, 210, 58, 24, 190, 43, 145, 142, 189, 30, 210, 22, 61, 199, 223, 241, 188, 182, 244, 172, 62, 46, 147, 54, 62, 12, 60, 87, 61, 88, 59, 115, 190, 10, 181, 195, 62, 206, 24, 224, 61, 107, 28, 89, 60, 180, 115, 0, 62, 247, 213, 112, 62, 37, 145, 6, 62, 119, 173, 34, 62, 202, 172, 54, 190, 229, 246, 211, 189, 56, 104, 131, 62, 121, 230, 174, 62, 5, 210, 11, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 249, 137, 191, 57, 96, 19, 190, 107, 217, 214, 62, 33, 126, 17, 191, 241, 208, 17, 61, 38, 146, 40, 63, 116, 86, 225, 189, 224, 214, 42, 191, 63, 198, 129, 191, 67, 25, 248, 190, 131, 228, 37, 190, 99, 228, 189, 62, 43, 101, 139, 63, 27, 172, 190, 62, 84, 228, 166, 60, 180, 177, 150, 189, 63, 160, 243, 60, 137, 108, 228, 190, 114, 197, 131, 190, 173, 74, 8, 191, 142, 41, 194, 62, 157, 140, 218, 189, 235, 112, 2, 191, 130, 179, 141, 62, 94, 247, 114, 62, 204, 57, 241, 190, 40, 114, 67, 191, 145, 148, 13, 190, 106, 196, 250, 189, 219, 93, 181, 190, 19, 17, 245, 189, 65, 149, 240, 62, 224, 234, 16, 63, 17, 68, 140, 190, 69, 144, 239, 188, 96, 8, 64, 189, 128, 74, 10, 190, 190, 184, 136, 189, 232, 154, 149, 62, 204, 68, 0, 62, 47, 62, 156, 187, 236, 179, 100, 62, 179, 199, 226, 190, 67, 181, 235, 61, 220, 136, 225, 61, 216, 159, 132, 62, 54, 217, 187, 61, 213, 11, 200, 61, 101, 71, 156, 190, 108, 204, 166, 190, 209, 206, 243, 189, 39, 155, 8, 63, 135, 94, 242, 189, 121, 207, 253, 60, 227, 247, 157, 190, 98, 120, 0, 190, 127, 224, 69, 190, 140, 161, 248, 190, 14, 12, 97, 58, 152, 64, 119, 189, 188, 230, 9, 62, 198, 160, 102, 190, 72, 9, 85, 191, 27, 229, 131, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 207, 5, 188, 79, 99, 64, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {93, 46, 22, 190, 249, 200, 193, 191, 204, 114, 153, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {145, 149, 203, 63, 41, 10, 96, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0074/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}