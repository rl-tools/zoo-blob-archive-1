// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 217, 207, 62, 203, 102, 16, 62, 20, 8, 236, 188, 241, 79, 140, 62, 83, 236, 226, 62, 99, 216, 41, 63, 102, 196, 69, 191, 163, 226, 208, 62, 75, 133, 207, 62, 132, 147, 178, 189, 146, 160, 13, 190, 5, 190, 61, 63, 189, 207, 89, 186, 79, 184, 196, 60, 145, 81, 19, 191, 18, 91, 70, 190, 211, 67, 118, 62, 246, 82, 52, 63, 155, 25, 63, 190, 91, 209, 204, 189, 106, 214, 70, 191, 149, 183, 208, 62, 189, 163, 12, 191, 178, 37, 144, 190, 19, 216, 50, 62, 168, 136, 25, 62, 99, 247, 36, 63, 253, 43, 26, 63, 179, 167, 228, 190, 53, 40, 245, 189, 42, 154, 173, 62, 59, 106, 49, 191, 197, 92, 140, 188, 68, 171, 140, 190, 253, 145, 196, 190, 124, 85, 69, 189, 220, 139, 253, 62, 113, 156, 242, 62, 10, 235, 5, 63, 89, 107, 165, 62, 254, 240, 15, 63, 29, 117, 129, 189, 165, 153, 16, 61, 203, 87, 82, 191, 162, 137, 187, 62, 72, 209, 22, 63, 62, 163, 101, 63, 133, 130, 249, 62, 214, 53, 46, 191, 206, 208, 17, 63, 30, 144, 248, 61, 40, 166, 223, 62, 137, 6, 60, 63, 100, 98, 197, 62, 128, 159, 13, 190, 173, 236, 210, 62, 59, 195, 234, 60, 150, 34, 229, 62, 211, 141, 9, 61, 56, 178, 0, 63, 97, 212, 150, 190, 51, 249, 123, 190, 202, 107, 31, 62, 223, 128, 94, 190, 226, 232, 96, 191, 16, 123, 44, 190, 188, 45, 170, 62, 159, 202, 203, 61, 174, 65, 90, 63, 69, 62, 173, 62, 122, 146, 210, 189, 24, 97, 241, 189, 233, 150, 20, 191, 106, 26, 248, 190, 62, 32, 48, 189, 79, 246, 57, 191, 63, 54, 77, 62, 52, 210, 58, 189, 122, 29, 24, 63, 29, 119, 76, 191, 84, 132, 251, 189, 98, 236, 147, 190, 136, 52, 9, 190, 4, 221, 8, 191, 205, 66, 6, 62, 15, 161, 100, 60, 196, 33, 38, 191, 218, 14, 55, 63, 140, 11, 204, 62, 156, 244, 170, 62, 143, 6, 229, 188, 159, 11, 181, 191, 223, 104, 252, 189, 236, 215, 128, 190, 40, 170, 129, 190, 190, 159, 35, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 182, 33, 191, 37, 165, 90, 62, 175, 218, 236, 62, 143, 124, 141, 190, 225, 96, 25, 189, 124, 72, 125, 190, 88, 200, 188, 61, 63, 60, 18, 191, 25, 161, 126, 61, 101, 240, 83, 60, 60, 81, 79, 189, 26, 210, 13, 63, 194, 11, 66, 61, 82, 237, 231, 62, 71, 224, 183, 190, 15, 44, 21, 63, 108, 92, 32, 63, 94, 86, 14, 191, 46, 150, 13, 63, 205, 29, 117, 62, 136, 143, 251, 190, 222, 168, 201, 190, 36, 86, 65, 62, 196, 184, 208, 190, 192, 72, 40, 63, 0, 253, 81, 190, 19, 189, 95, 62, 235, 174, 190, 190, 89, 159, 168, 62, 72, 144, 43, 63, 173, 152, 254, 62, 225, 171, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 107, 228, 61, 20, 126, 124, 190, 44, 89, 254, 61, 204, 124, 146, 191, 154, 192, 238, 190, 231, 9, 79, 191, 246, 99, 106, 189, 7, 186, 168, 190, 16, 160, 132, 191, 19, 45, 24, 191, 40, 33, 197, 190, 112, 59, 179, 188, 93, 156, 31, 63, 197, 56, 1, 62, 13, 49, 74, 191, 112, 243, 162, 61, 44, 19, 157, 61, 140, 99, 254, 62, 226, 69, 178, 188, 199, 25, 16, 63, 185, 178, 156, 60, 188, 62, 174, 190, 36, 176, 208, 190, 51, 22, 117, 190, 164, 56, 116, 62, 201, 155, 78, 62, 153, 180, 26, 191, 250, 76, 178, 190, 152, 49, 50, 62, 176, 53, 76, 61, 104, 148, 135, 62, 220, 92, 185, 187, 17, 1, 242, 189, 1, 62, 10, 189, 240, 118, 145, 189, 195, 74, 46, 61, 24, 204, 100, 62, 14, 93, 131, 61, 168, 25, 79, 190, 254, 6, 151, 189, 54, 143, 232, 61, 49, 114, 127, 62, 160, 23, 68, 62, 163, 212, 76, 190, 107, 58, 46, 190, 103, 219, 156, 61, 179, 63, 209, 61, 78, 67, 135, 189, 245, 225, 10, 62, 193, 127, 206, 190, 6, 52, 132, 188, 173, 76, 27, 62, 185, 45, 69, 61, 131, 234, 178, 189, 173, 1, 48, 62, 178, 200, 125, 190, 198, 172, 154, 186, 125, 150, 110, 190, 63, 31, 138, 62, 146, 145, 122, 189, 214, 105, 45, 188, 160, 62, 135, 62, 77, 204, 130, 190, 162, 235, 106, 189, 106, 230, 122, 61, 110, 87, 215, 61, 35, 84, 64, 62, 90, 185, 141, 62, 179, 95, 73, 62, 64, 34, 74, 62, 255, 208, 44, 190, 208, 202, 110, 188, 93, 242, 154, 62, 149, 155, 133, 62, 121, 153, 157, 189, 21, 84, 108, 189, 129, 110, 10, 191, 194, 82, 11, 189, 118, 61, 170, 62, 32, 201, 156, 190, 220, 187, 125, 62, 111, 147, 23, 191, 55, 24, 88, 62, 175, 150, 47, 191, 98, 57, 221, 189, 6, 3, 231, 190, 36, 82, 176, 62, 68, 73, 19, 62, 104, 125, 44, 61, 156, 74, 63, 62, 74, 157, 15, 191, 229, 88, 133, 62, 111, 32, 218, 189, 124, 34, 148, 190, 126, 112, 250, 190, 245, 242, 231, 190, 181, 213, 36, 62, 8, 70, 175, 190, 18, 44, 191, 61, 76, 109, 82, 191, 198, 208, 31, 61, 174, 189, 116, 191, 183, 138, 118, 62, 254, 173, 203, 190, 255, 225, 139, 191, 183, 144, 92, 189, 240, 239, 1, 191, 148, 40, 131, 62, 6, 74, 73, 190, 73, 86, 139, 62, 209, 102, 54, 191, 89, 224, 53, 190, 45, 183, 169, 188, 77, 245, 104, 189, 48, 103, 11, 62, 254, 133, 73, 188, 9, 11, 100, 190, 75, 155, 189, 190, 45, 38, 244, 190, 74, 186, 18, 191, 17, 58, 194, 60, 125, 45, 130, 62, 218, 73, 139, 61, 94, 7, 71, 190, 204, 228, 57, 60, 93, 178, 76, 190, 149, 113, 96, 62, 2, 247, 10, 60, 95, 47, 251, 189, 11, 4, 20, 190, 148, 214, 5, 190, 73, 141, 144, 189, 104, 69, 204, 189, 100, 238, 38, 190, 29, 57, 47, 190, 50, 55, 24, 190, 162, 236, 244, 189, 130, 242, 254, 188, 25, 43, 29, 190, 113, 248, 188, 189, 212, 169, 223, 189, 92, 103, 21, 62, 170, 233, 142, 189, 61, 52, 170, 189, 37, 231, 209, 61, 22, 149, 133, 61, 42, 246, 244, 189, 242, 191, 137, 60, 131, 127, 252, 61, 227, 242, 35, 189, 252, 184, 175, 61, 155, 222, 141, 189, 203, 254, 237, 187, 118, 132, 192, 189, 122, 157, 2, 62, 140, 151, 25, 190, 2, 106, 169, 189, 18, 47, 7, 190, 28, 212, 238, 61, 173, 134, 18, 190, 238, 0, 231, 59, 244, 254, 241, 57, 170, 3, 226, 190, 54, 236, 42, 188, 68, 43, 233, 189, 66, 183, 214, 60, 166, 145, 234, 189, 88, 241, 163, 61, 69, 188, 210, 60, 76, 18, 215, 62, 156, 114, 3, 62, 206, 18, 116, 62, 255, 138, 104, 190, 195, 99, 62, 62, 151, 139, 49, 190, 169, 117, 192, 61, 185, 166, 186, 190, 218, 241, 17, 190, 244, 184, 241, 189, 2, 229, 197, 189, 189, 112, 229, 61, 145, 2, 192, 189, 128, 189, 21, 61, 105, 245, 133, 190, 156, 90, 82, 189, 232, 62, 9, 190, 39, 51, 254, 62, 65, 79, 8, 190, 4, 190, 113, 61, 211, 41, 70, 62, 171, 88, 189, 61, 255, 6, 16, 62, 205, 100, 11, 190, 202, 70, 208, 61, 104, 201, 167, 189, 214, 231, 123, 62, 49, 3, 169, 61, 42, 109, 36, 62, 5, 18, 186, 189, 38, 95, 138, 62, 47, 143, 158, 60, 163, 181, 169, 62, 72, 26, 198, 62, 118, 187, 167, 60, 97, 201, 62, 190, 217, 97, 18, 190, 16, 104, 137, 62, 82, 15, 169, 189, 69, 179, 154, 189, 59, 21, 48, 190, 143, 241, 215, 60, 129, 45, 5, 188, 8, 58, 13, 61, 123, 14, 141, 189, 5, 254, 176, 61, 225, 43, 253, 62, 90, 83, 34, 189, 155, 37, 211, 190, 94, 133, 18, 62, 26, 235, 55, 62, 22, 12, 45, 190, 1, 248, 179, 189, 113, 81, 109, 61, 105, 48, 10, 61, 132, 163, 211, 189, 189, 23, 56, 191, 134, 52, 136, 62, 212, 195, 87, 191, 98, 237, 15, 61, 242, 33, 66, 191, 54, 227, 6, 62, 78, 196, 254, 59, 230, 217, 85, 191, 148, 254, 152, 61, 236, 194, 186, 190, 227, 70, 179, 189, 27, 135, 160, 62, 101, 232, 56, 62, 208, 119, 238, 190, 140, 239, 44, 191, 191, 141, 20, 62, 104, 223, 84, 62, 118, 117, 0, 63, 41, 137, 132, 57, 52, 59, 72, 189, 81, 242, 187, 190, 217, 8, 189, 190, 177, 124, 209, 189, 105, 84, 239, 61, 136, 40, 181, 189, 160, 222, 133, 190, 165, 23, 19, 60, 35, 50, 230, 189, 137, 113, 181, 60, 30, 1, 5, 62, 214, 203, 226, 190, 230, 80, 52, 188, 226, 226, 34, 61, 158, 108, 15, 62, 144, 85, 33, 62, 174, 168, 171, 60, 199, 134, 61, 61, 250, 73, 129, 190, 5, 161, 103, 62, 142, 11, 82, 61, 36, 106, 108, 61, 80, 75, 117, 62, 113, 104, 130, 188, 227, 235, 181, 190, 53, 149, 28, 191, 28, 48, 223, 62, 178, 105, 82, 190, 23, 234, 126, 190, 239, 16, 184, 189, 249, 107, 6, 189, 10, 229, 126, 190, 89, 181, 37, 190, 162, 23, 58, 62, 202, 58, 88, 189, 38, 150, 61, 62, 222, 79, 31, 190, 218, 74, 157, 190, 28, 130, 249, 61, 245, 136, 162, 61, 164, 144, 48, 189, 30, 206, 55, 190, 170, 46, 104, 62, 85, 225, 27, 189, 134, 10, 158, 188, 194, 156, 20, 190, 44, 12, 97, 190, 254, 67, 19, 191, 200, 24, 188, 189, 37, 41, 175, 190, 234, 196, 92, 62, 80, 232, 11, 191, 42, 229, 59, 190, 73, 97, 59, 190, 255, 32, 154, 190, 185, 214, 169, 60, 108, 169, 139, 62, 153, 53, 122, 62, 17, 240, 179, 190, 151, 42, 22, 61, 132, 37, 20, 62, 120, 40, 37, 61, 177, 21, 100, 61, 236, 12, 102, 62, 211, 245, 28, 190, 206, 246, 16, 191, 55, 145, 55, 190, 111, 167, 24, 191, 40, 21, 32, 62, 194, 162, 91, 61, 168, 250, 143, 190, 97, 32, 2, 189, 50, 54, 204, 62, 145, 76, 149, 62, 228, 105, 53, 62, 84, 78, 183, 188, 77, 60, 231, 61, 178, 188, 246, 61, 248, 163, 133, 189, 11, 222, 118, 190, 133, 180, 87, 190, 24, 202, 138, 190, 96, 11, 135, 62, 153, 165, 0, 190, 252, 137, 131, 59, 77, 25, 128, 189, 2, 230, 162, 189, 15, 63, 217, 60, 3, 240, 124, 189, 77, 143, 128, 61, 85, 237, 162, 190, 192, 131, 133, 62, 71, 151, 189, 187, 218, 181, 98, 190, 76, 29, 161, 61, 143, 62, 228, 59, 207, 14, 17, 62, 3, 77, 4, 189, 255, 145, 92, 190, 74, 87, 180, 190, 154, 57, 41, 190, 196, 243, 240, 189, 55, 2, 50, 59, 21, 135, 143, 190, 149, 0, 65, 62, 46, 141, 157, 62, 166, 230, 22, 62, 227, 240, 181, 60, 169, 76, 27, 189, 23, 134, 167, 189, 30, 186, 71, 62, 178, 119, 61, 62, 159, 209, 55, 190, 181, 110, 242, 61, 221, 146, 135, 191, 124, 13, 32, 62, 83, 87, 235, 60, 144, 23, 111, 62, 138, 36, 97, 62, 165, 70, 234, 61, 54, 6, 144, 58, 106, 33, 179, 190, 104, 108, 181, 62, 85, 22, 151, 61, 24, 4, 26, 62, 99, 41, 28, 189, 50, 117, 96, 60, 194, 121, 81, 190, 109, 47, 31, 190, 92, 84, 37, 191, 95, 53, 144, 61, 120, 103, 40, 190, 151, 210, 9, 62, 69, 149, 52, 62, 95, 64, 213, 189, 31, 113, 124, 190, 165, 240, 132, 191, 78, 203, 17, 61, 60, 94, 16, 190, 156, 17, 244, 61, 144, 33, 153, 189, 234, 238, 10, 190, 83, 40, 15, 62, 250, 42, 38, 189, 3, 58, 219, 189, 92, 224, 62, 60, 40, 222, 105, 190, 17, 204, 255, 61, 72, 190, 93, 189, 217, 69, 138, 189, 58, 8, 160, 190, 182, 187, 23, 190, 103, 164, 209, 190, 127, 126, 71, 188, 46, 55, 150, 190, 227, 107, 140, 61, 182, 150, 72, 62, 252, 55, 224, 190, 182, 30, 209, 61, 208, 163, 137, 190, 246, 181, 59, 190, 172, 199, 193, 189, 225, 166, 9, 190, 203, 38, 22, 189, 230, 142, 213, 61, 201, 72, 68, 62, 75, 4, 251, 189, 34, 87, 80, 190, 227, 188, 1, 191, 179, 155, 45, 190, 162, 21, 49, 191, 66, 87, 156, 190, 194, 56, 3, 190, 6, 36, 113, 190, 78, 234, 217, 190, 19, 157, 234, 189, 27, 175, 144, 61, 55, 28, 89, 60, 224, 30, 120, 62, 231, 82, 127, 61, 60, 210, 22, 190, 220, 118, 171, 61, 189, 130, 16, 190, 218, 96, 229, 61, 25, 52, 38, 190, 176, 109, 193, 189, 47, 94, 153, 188, 241, 44, 0, 60, 233, 201, 24, 191, 129, 132, 135, 189, 151, 83, 3, 191, 10, 127, 229, 60, 35, 48, 111, 61, 57, 3, 12, 190, 9, 119, 139, 61, 33, 72, 141, 62, 140, 204, 39, 62, 15, 173, 218, 189, 164, 105, 238, 189, 80, 101, 129, 189, 68, 166, 32, 62, 176, 216, 222, 61, 57, 155, 62, 62, 66, 86, 112, 189, 63, 158, 30, 190, 217, 180, 165, 61, 68, 99, 40, 190, 12, 163, 238, 61, 130, 130, 245, 60, 6, 84, 115, 189, 171, 135, 132, 61, 152, 216, 248, 189, 82, 70, 219, 189, 195, 50, 14, 189, 209, 10, 51, 190, 255, 204, 71, 189, 223, 59, 96, 189, 205, 58, 80, 188, 0, 147, 202, 61, 56, 223, 110, 188, 131, 152, 81, 189, 186, 38, 182, 189, 143, 185, 96, 187, 24, 3, 136, 189, 206, 41, 13, 62, 73, 161, 18, 190, 27, 167, 223, 188, 93, 97, 63, 189, 95, 203, 169, 189, 144, 229, 69, 190, 221, 238, 189, 188, 251, 165, 150, 61, 201, 209, 236, 189, 23, 121, 82, 189, 225, 110, 197, 189, 226, 117, 238, 189, 24, 54, 157, 189, 242, 75, 148, 189, 181, 194, 3, 189, 170, 128, 122, 189, 242, 9, 98, 61, 9, 109, 82, 61, 220, 148, 129, 189, 53, 162, 186, 189, 89, 58, 1, 190, 198, 28, 172, 189, 210, 141, 34, 190, 60, 9, 33, 189, 87, 138, 137, 61, 108, 211, 48, 190, 190, 173, 210, 189, 178, 188, 25, 190, 201, 182, 162, 61, 76, 77, 13, 62, 252, 225, 25, 190, 146, 138, 232, 61, 183, 30, 179, 61, 225, 80, 38, 190, 7, 22, 154, 60, 49, 212, 29, 62, 238, 147, 225, 61, 5, 111, 208, 61, 83, 253, 10, 61, 193, 114, 6, 61, 154, 33, 46, 190, 165, 156, 170, 61, 54, 251, 8, 190, 234, 202, 1, 190, 30, 243, 85, 61, 104, 58, 151, 189, 85, 90, 167, 59, 13, 93, 102, 62, 154, 131, 110, 60, 147, 56, 174, 188, 40, 50, 164, 189, 112, 84, 119, 189, 47, 46, 43, 61, 166, 81, 186, 61, 168, 27, 236, 62, 217, 150, 138, 62, 119, 190, 101, 190, 116, 119, 0, 190, 147, 170, 71, 62, 154, 157, 1, 188, 139, 160, 113, 62, 124, 204, 163, 190, 118, 245, 86, 62, 11, 152, 70, 61, 216, 14, 85, 190, 99, 43, 125, 61, 43, 173, 28, 62, 52, 184, 154, 190, 228, 116, 133, 60, 126, 94, 93, 62, 170, 118, 147, 62, 180, 147, 194, 61, 45, 155, 182, 189, 81, 6, 58, 62, 41, 120, 3, 190, 140, 85, 250, 189, 235, 247, 224, 61, 91, 133, 22, 191, 245, 9, 192, 189, 120, 131, 119, 191, 107, 39, 166, 188, 160, 242, 127, 191, 185, 230, 208, 61, 10, 64, 136, 190, 118, 63, 129, 191, 145, 140, 177, 190, 18, 119, 70, 190, 175, 104, 174, 60, 25, 159, 14, 62, 5, 126, 72, 62, 76, 201, 81, 191, 147, 176, 170, 190, 131, 69, 234, 61, 63, 154, 16, 62, 92, 143, 37, 62, 24, 150, 151, 185, 232, 65, 199, 61, 189, 197, 5, 190, 186, 54, 17, 191, 49, 94, 5, 190, 207, 103, 40, 62, 132, 84, 121, 61, 57, 204, 229, 189, 69, 85, 15, 190, 103, 93, 88, 62, 163, 19, 154, 189, 51, 120, 132, 60, 52, 174, 147, 188, 190, 97, 201, 57, 164, 123, 21, 62, 182, 169, 91, 189, 169, 27, 82, 61, 88, 3, 128, 190, 2, 200, 95, 62, 80, 157, 49, 190, 124, 76, 219, 190, 36, 133, 75, 62, 94, 178, 224, 189, 208, 224, 5, 61, 46, 127, 160, 61, 206, 246, 241, 61, 156, 125, 238, 60, 208, 97, 117, 62, 25, 147, 230, 189, 17, 228, 162, 61, 32, 46, 108, 61, 75, 86, 31, 190, 6, 241, 205, 188, 145, 27, 2, 60, 53, 102, 6, 63, 249, 244, 61, 59, 223, 143, 153, 188, 211, 194, 102, 189, 189, 27, 76, 190, 106, 109, 150, 62, 237, 87, 160, 190, 11, 239, 16, 190, 121, 122, 41, 62, 85, 11, 10, 62, 130, 165, 53, 62, 111, 219, 48, 190, 163, 244, 39, 189, 68, 233, 63, 190, 172, 108, 232, 60, 148, 35, 54, 62, 109, 133, 59, 190, 103, 116, 128, 61, 249, 89, 123, 189, 77, 175, 223, 189, 180, 85, 152, 190, 48, 91, 51, 190, 27, 187, 224, 190, 64, 53, 41, 62, 39, 84, 61, 62, 144, 140, 63, 190, 133, 87, 151, 62, 245, 22, 236, 189, 215, 95, 93, 62, 205, 156, 12, 60, 54, 135, 193, 59, 210, 181, 93, 189, 193, 125, 12, 62, 247, 154, 123, 61, 153, 190, 135, 189, 94, 50, 28, 191, 134, 147, 158, 190, 182, 87, 235, 190, 112, 67, 220, 189, 68, 94, 45, 190, 74, 202, 37, 62, 3, 76, 140, 190, 76, 106, 17, 62, 161, 155, 240, 61, 12, 103, 88, 189, 197, 145, 227, 61, 237, 107, 164, 61, 82, 198, 114, 186, 71, 217, 156, 62, 143, 14, 187, 60, 243, 31, 175, 61, 45, 147, 108, 62, 223, 129, 141, 62, 182, 220, 107, 62, 94, 39, 110, 61, 44, 21, 227, 190, 170, 135, 86, 61, 188, 144, 161, 62, 154, 132, 6, 190, 130, 51, 59, 189, 216, 42, 243, 190, 211, 213, 46, 62, 237, 143, 30, 190, 157, 129, 125, 189, 31, 215, 150, 189, 80, 227, 138, 61, 231, 72, 61, 190, 158, 44, 67, 189, 67, 5, 246, 61, 216, 188, 45, 62, 212, 161, 2, 62, 31, 171, 9, 62, 99, 34, 22, 62, 18, 180, 120, 60, 8, 220, 134, 190, 47, 43, 36, 62, 207, 130, 151, 61, 170, 190, 35, 190, 233, 249, 173, 189, 115, 62, 193, 189, 148, 168, 19, 61, 239, 204, 221, 189, 140, 193, 45, 62, 38, 24, 230, 61, 226, 68, 146, 61, 254, 252, 64, 61, 203, 19, 226, 189, 37, 237, 9, 62, 243, 69, 170, 187, 108, 163, 163, 188, 174, 154, 136, 189, 214, 53, 84, 61, 209, 240, 197, 60, 1, 201, 5, 190, 56, 87, 187, 61, 29, 82, 179, 61, 0, 249, 224, 61, 32, 183, 11, 190, 34, 122, 254, 61, 24, 215, 165, 189, 146, 23, 238, 189, 61, 255, 247, 189, 187, 119, 20, 190, 7, 33, 252, 189, 107, 178, 231, 189, 18, 208, 30, 189, 53, 47, 205, 60, 101, 205, 53, 188, 19, 42, 128, 189, 56, 38, 57, 190, 24, 39, 144, 189, 85, 134, 200, 189, 229, 67, 44, 190, 164, 200, 121, 62, 108, 152, 62, 190, 139, 152, 145, 61, 105, 33, 160, 60, 115, 242, 63, 190, 95, 160, 139, 61, 214, 133, 46, 62, 254, 240, 121, 62, 172, 185, 137, 190, 65, 160, 213, 61, 213, 224, 69, 61, 229, 105, 54, 60, 135, 94, 130, 61, 61, 246, 50, 62, 160, 162, 70, 190, 71, 73, 152, 190, 88, 139, 13, 62, 164, 14, 77, 190, 62, 150, 188, 189, 94, 22, 207, 188, 61, 42, 199, 189, 85, 179, 102, 190, 139, 122, 8, 189, 223, 8, 205, 61, 150, 154, 0, 62, 219, 254, 172, 189, 49, 200, 128, 61, 233, 133, 158, 61, 129, 59, 236, 61, 11, 172, 101, 188, 42, 242, 211, 61, 233, 251, 130, 62, 69, 165, 1, 62, 141, 214, 146, 189, 151, 172, 124, 61, 43, 10, 104, 62, 218, 147, 251, 61, 140, 134, 141, 62, 128, 70, 181, 190, 30, 42, 204, 189, 11, 154, 104, 61, 32, 150, 0, 62, 107, 91, 115, 62, 192, 142, 196, 190, 3, 13, 197, 189, 34, 20, 26, 190, 253, 42, 36, 187, 62, 3, 11, 190, 98, 197, 58, 61, 189, 214, 147, 190, 238, 148, 61, 62, 226, 12, 150, 62, 0, 235, 169, 62, 189, 99, 254, 61, 188, 123, 161, 61, 131, 124, 220, 58, 136, 169, 96, 184, 252, 125, 96, 189, 87, 100, 94, 189, 128, 151, 155, 188, 145, 143, 175, 61, 123, 254, 89, 62, 217, 144, 31, 62, 70, 147, 86, 62, 12, 16, 164, 189, 208, 215, 86, 190, 137, 178, 38, 62, 216, 175, 160, 188, 16, 76, 211, 61, 3, 87, 45, 62, 147, 1, 128, 60, 81, 76, 51, 190, 49, 184, 59, 62, 143, 158, 37, 62, 117, 116, 12, 190, 85, 193, 49, 189, 63, 208, 144, 60, 201, 156, 73, 190, 249, 60, 130, 188, 189, 90, 181, 189, 79, 228, 224, 61, 138, 96, 39, 188, 224, 91, 134, 62, 97, 182, 36, 62, 95, 193, 193, 62, 167, 39, 58, 190, 26, 203, 108, 190, 182, 4, 239, 61, 205, 12, 59, 62, 140, 88, 131, 190, 203, 18, 43, 189, 49, 17, 205, 61, 106, 107, 0, 190, 9, 18, 195, 189, 43, 117, 123, 190, 6, 197, 24, 189, 189, 188, 194, 61, 132, 118, 141, 189, 174, 133, 22, 61, 67, 106, 129, 62, 232, 233, 100, 61, 18, 188, 146, 190, 3, 245, 8, 62, 248, 230, 225, 61, 94, 47, 218, 190, 98, 98, 35, 62, 249, 251, 79, 189, 50, 214, 87, 190, 34, 79, 18, 62, 51, 155, 162, 62, 150, 143, 102, 190, 199, 161, 194, 189, 66, 224, 163, 60, 234, 132, 238, 189, 196, 165, 133, 190, 211, 179, 234, 190, 181, 156, 175, 60, 70, 230, 171, 190, 21, 204, 26, 62, 93, 148, 230, 61, 162, 201, 191, 189, 32, 62, 28, 190, 27, 0, 180, 61, 229, 76, 94, 191, 6, 118, 90, 62, 143, 59, 150, 191, 140, 105, 36, 189, 133, 125, 149, 191, 118, 96, 64, 62, 125, 211, 61, 189, 125, 130, 157, 191, 230, 46, 77, 61, 170, 123, 162, 189, 63, 114, 111, 62, 34, 106, 199, 189, 235, 119, 62, 190, 84, 208, 200, 190, 37, 226, 137, 191, 231, 157, 21, 62, 131, 43, 50, 60, 34, 254, 167, 61, 184, 167, 144, 61, 74, 6, 176, 61, 9, 14, 15, 190, 219, 217, 7, 191, 75, 2, 151, 61, 164, 183, 238, 61, 42, 27, 59, 62, 170, 233, 245, 189, 125, 66, 153, 190, 107, 67, 84, 61, 72, 144, 117, 191, 51, 225, 64, 62, 28, 166, 36, 190, 39, 134, 25, 190, 57, 118, 131, 189, 78, 76, 158, 189, 122, 164, 13, 190, 114, 124, 226, 61, 196, 32, 184, 60, 95, 222, 193, 189, 237, 177, 139, 186, 104, 33, 201, 61, 236, 85, 37, 62, 44, 124, 229, 189, 93, 183, 199, 189, 108, 128, 212, 61, 74, 221, 182, 189, 202, 68, 208, 188, 196, 103, 190, 188, 12, 204, 9, 189, 118, 34, 196, 61, 175, 136, 115, 188, 30, 219, 36, 61, 38, 53, 232, 189, 36, 9, 254, 60, 240, 142, 91, 60, 43, 134, 190, 189, 42, 79, 6, 190, 142, 110, 193, 188, 47, 71, 47, 190, 117, 131, 128, 189, 51, 103, 247, 186, 160, 129, 82, 61, 100, 224, 54, 60, 106, 11, 30, 190, 73, 169, 140, 189, 180, 181, 105, 188, 7, 203, 46, 61, 139, 5, 154, 61, 226, 135, 51, 190, 132, 51, 40, 190, 45, 52, 51, 190, 40, 216, 157, 189, 200, 220, 27, 61, 116, 66, 251, 61, 27, 64, 175, 60, 106, 38, 14, 190, 55, 231, 222, 61, 48, 121, 184, 187, 10, 155, 224, 61, 88, 145, 102, 61, 120, 232, 15, 190, 46, 239, 178, 61, 16, 206, 78, 190, 184, 202, 151, 189, 242, 190, 173, 189, 122, 12, 199, 189, 25, 103, 221, 189, 14, 28, 50, 61, 223, 253, 24, 61, 167, 251, 19, 190, 206, 90, 187, 60, 237, 211, 138, 61, 85, 9, 23, 62, 169, 186, 43, 190, 103, 89, 58, 190, 196, 8, 3, 189, 29, 225, 41, 62, 206, 48, 134, 61, 41, 92, 232, 188, 202, 0, 238, 187, 154, 254, 187, 61, 89, 137, 209, 60, 67, 85, 213, 187, 106, 48, 44, 189, 63, 239, 111, 189, 144, 187, 31, 62, 209, 165, 224, 189, 152, 193, 65, 190, 107, 169, 83, 62, 66, 45, 82, 62, 253, 244, 97, 189, 58, 4, 239, 61, 177, 125, 216, 61, 239, 178, 241, 189, 126, 157, 113, 62, 64, 22, 44, 62, 206, 70, 103, 190, 242, 190, 166, 190, 178, 171, 48, 62, 193, 11, 78, 60, 241, 202, 218, 190, 171, 77, 16, 191, 61, 3, 68, 61, 66, 179, 238, 57, 81, 203, 53, 190, 226, 238, 71, 62, 115, 29, 242, 189, 249, 25, 148, 61, 2, 231, 28, 62, 48, 20, 214, 189, 10, 29, 247, 187, 5, 21, 9, 190, 226, 172, 38, 190, 232, 165, 49, 190, 119, 55, 155, 61, 112, 181, 159, 190, 63, 173, 197, 188, 210, 207, 40, 190, 35, 223, 193, 189, 69, 210, 220, 189, 112, 53, 132, 60, 50, 80, 11, 189, 200, 89, 224, 188, 128, 67, 231, 61, 130, 205, 240, 188, 221, 199, 155, 190, 88, 193, 228, 60, 13, 223, 212, 189, 97, 203, 147, 61, 129, 148, 171, 61, 222, 118, 24, 190, 43, 189, 214, 190, 71, 12, 0, 61, 0, 89, 109, 189, 58, 162, 151, 62, 142, 78, 234, 189, 36, 230, 203, 61, 14, 138, 143, 62, 2, 141, 239, 188, 65, 112, 159, 61, 98, 99, 242, 61, 187, 6, 249, 61, 162, 151, 87, 62, 245, 102, 24, 62, 30, 118, 20, 190, 210, 200, 22, 61, 149, 37, 132, 191, 15, 62, 97, 62, 27, 8, 60, 189, 115, 230, 33, 62, 136, 109, 142, 62, 128, 241, 204, 61, 181, 233, 144, 190, 220, 64, 51, 190, 18, 42, 235, 61, 74, 1, 67, 190, 194, 227, 85, 60, 41, 5, 8, 61, 136, 71, 132, 62, 228, 176, 143, 59, 205, 26, 132, 60, 250, 100, 85, 191, 145, 16, 50, 62, 250, 151, 8, 62, 106, 132, 131, 61, 5, 59, 243, 62, 234, 130, 226, 61, 86, 78, 201, 59, 235, 199, 111, 191, 86, 236, 150, 61, 64, 253, 22, 190, 108, 148, 70, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 181, 173, 61, 207, 76, 54, 62, 125, 50, 195, 61, 145, 119, 71, 61, 236, 162, 239, 189, 181, 124, 99, 61, 184, 123, 67, 190, 225, 146, 147, 59, 237, 1, 11, 189, 31, 106, 161, 61, 164, 120, 124, 62, 214, 247, 203, 189, 16, 177, 29, 190, 62, 58, 43, 190, 189, 238, 36, 61, 225, 19, 153, 188, 255, 16, 157, 62, 251, 85, 145, 62, 226, 240, 154, 61, 36, 152, 18, 190, 20, 130, 166, 62, 205, 214, 8, 62, 90, 192, 131, 189, 91, 156, 55, 61, 204, 147, 26, 62, 180, 23, 37, 62, 254, 144, 99, 62, 72, 149, 54, 190, 229, 246, 211, 189, 142, 30, 113, 62, 116, 166, 152, 62, 50, 211, 31, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 51, 108, 191, 12, 36, 252, 57, 94, 246, 4, 63, 35, 252, 24, 191, 241, 208, 17, 61, 58, 165, 1, 63, 128, 190, 206, 189, 85, 94, 183, 190, 148, 166, 239, 190, 234, 21, 190, 190, 245, 136, 76, 190, 14, 193, 163, 62, 253, 184, 2, 63, 82, 212, 72, 62, 66, 255, 173, 60, 154, 145, 190, 189, 128, 19, 183, 61, 20, 114, 15, 191, 169, 135, 105, 190, 32, 58, 82, 190, 107, 197, 144, 62, 159, 76, 0, 190, 180, 95, 71, 190, 4, 240, 121, 62, 95, 0, 110, 62, 191, 146, 145, 190, 85, 22, 34, 191, 156, 148, 13, 190, 106, 196, 250, 189, 189, 151, 122, 190, 46, 10, 22, 189, 246, 64, 129, 62, 62, 161, 151, 62, 221, 78, 86, 190, 77, 138, 66, 62, 230, 251, 55, 190, 128, 74, 10, 190, 208, 52, 112, 189, 208, 144, 155, 62, 33, 49, 158, 62, 83, 30, 236, 62, 254, 155, 34, 62, 23, 160, 191, 190, 202, 166, 14, 62, 221, 205, 44, 60, 55, 97, 95, 61, 64, 174, 187, 61, 251, 249, 145, 61, 71, 133, 106, 190, 170, 197, 128, 190, 52, 69, 180, 188, 136, 66, 248, 62, 80, 233, 162, 189, 40, 84, 228, 60, 105, 95, 143, 189, 22, 97, 48, 190, 198, 51, 195, 189, 9, 151, 156, 190, 255, 124, 137, 189, 199, 64, 119, 189, 188, 230, 9, 62, 51, 240, 1, 190, 225, 95, 142, 190, 142, 128, 216, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 234, 37, 189, 218, 155, 125, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {209, 227, 12, 192, 223, 62, 125, 63, 50, 251, 218, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {22, 1, 125, 64, 222, 252, 110, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0074/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}