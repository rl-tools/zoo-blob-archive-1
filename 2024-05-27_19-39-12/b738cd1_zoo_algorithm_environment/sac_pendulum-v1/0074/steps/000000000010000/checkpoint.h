// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 217, 207, 62, 203, 102, 16, 62, 20, 8, 236, 188, 133, 36, 84, 62, 115, 235, 81, 63, 71, 90, 5, 63, 168, 174, 103, 191, 254, 71, 44, 63, 186, 46, 176, 62, 224, 250, 53, 189, 65, 20, 143, 189, 157, 192, 59, 63, 160, 139, 108, 189, 32, 70, 144, 59, 103, 1, 8, 191, 243, 151, 153, 190, 33, 141, 27, 63, 130, 195, 27, 63, 90, 158, 96, 190, 93, 202, 58, 190, 213, 180, 63, 191, 222, 69, 14, 63, 240, 17, 17, 191, 160, 20, 138, 190, 101, 12, 177, 61, 194, 116, 139, 62, 103, 221, 26, 63, 37, 110, 58, 63, 3, 42, 231, 190, 189, 195, 251, 189, 239, 223, 203, 62, 200, 96, 71, 191, 3, 159, 213, 61, 53, 82, 188, 190, 22, 77, 192, 190, 37, 108, 3, 190, 102, 230, 14, 63, 31, 37, 5, 63, 0, 202, 1, 63, 223, 53, 144, 62, 25, 252, 18, 63, 154, 210, 191, 189, 88, 91, 213, 189, 83, 75, 128, 191, 131, 50, 100, 62, 80, 7, 20, 63, 135, 82, 141, 63, 41, 43, 199, 62, 23, 75, 12, 191, 159, 91, 90, 63, 236, 217, 83, 62, 163, 134, 0, 63, 216, 70, 120, 63, 233, 162, 211, 62, 182, 249, 54, 190, 48, 96, 233, 62, 82, 255, 35, 59, 119, 231, 230, 62, 167, 209, 44, 61, 235, 137, 249, 62, 172, 216, 96, 190, 78, 172, 87, 190, 2, 105, 50, 62, 52, 90, 76, 189, 33, 156, 97, 191, 57, 93, 143, 190, 47, 153, 176, 62, 250, 72, 179, 60, 125, 210, 81, 63, 207, 254, 15, 63, 14, 121, 216, 188, 23, 224, 54, 190, 13, 195, 79, 191, 68, 185, 48, 191, 239, 92, 28, 190, 96, 115, 39, 191, 130, 194, 140, 62, 235, 190, 195, 189, 62, 147, 18, 63, 50, 245, 64, 191, 66, 102, 239, 189, 179, 177, 98, 190, 10, 98, 132, 190, 41, 135, 5, 191, 231, 11, 35, 62, 1, 240, 203, 189, 52, 64, 25, 191, 213, 159, 11, 63, 40, 205, 253, 62, 60, 240, 197, 62, 110, 112, 60, 190, 136, 127, 207, 191, 107, 174, 33, 190, 221, 127, 32, 190, 38, 164, 143, 190, 139, 65, 29, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 182, 33, 191, 113, 73, 164, 62, 246, 245, 237, 62, 232, 6, 105, 190, 65, 185, 191, 189, 96, 252, 231, 189, 169, 143, 11, 61, 207, 82, 47, 191, 157, 43, 33, 62, 149, 73, 52, 60, 134, 95, 214, 189, 97, 39, 18, 63, 110, 30, 203, 61, 124, 237, 179, 62, 43, 202, 140, 190, 39, 212, 39, 63, 211, 234, 243, 62, 73, 211, 34, 191, 210, 182, 8, 63, 185, 218, 80, 62, 146, 234, 41, 191, 140, 53, 150, 190, 75, 158, 7, 62, 122, 41, 3, 191, 137, 9, 23, 63, 25, 20, 120, 190, 79, 203, 94, 62, 231, 12, 212, 190, 146, 205, 150, 62, 34, 255, 223, 62, 163, 79, 216, 62, 67, 120, 58, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 107, 228, 61, 102, 81, 134, 190, 78, 220, 228, 61, 137, 2, 171, 191, 249, 148, 199, 190, 81, 11, 70, 191, 60, 55, 130, 188, 205, 31, 179, 190, 138, 158, 117, 191, 81, 196, 59, 191, 2, 155, 14, 190, 67, 118, 143, 60, 157, 194, 35, 63, 54, 57, 23, 62, 17, 165, 26, 191, 156, 230, 177, 61, 46, 146, 171, 61, 169, 77, 218, 62, 183, 144, 163, 59, 241, 167, 248, 62, 185, 178, 156, 60, 65, 225, 176, 190, 44, 2, 172, 190, 41, 16, 241, 190, 148, 180, 134, 62, 132, 86, 55, 62, 52, 132, 10, 191, 184, 136, 178, 190, 95, 44, 61, 62, 0, 67, 0, 61, 172, 189, 219, 62, 148, 2, 72, 189, 17, 1, 242, 189, 156, 117, 62, 189, 30, 241, 17, 190, 231, 240, 133, 61, 177, 123, 110, 62, 86, 31, 146, 61, 228, 88, 94, 190, 86, 216, 59, 191, 184, 79, 225, 61, 0, 211, 148, 62, 241, 211, 166, 62, 236, 165, 161, 190, 67, 37, 29, 190, 231, 72, 223, 61, 189, 178, 35, 62, 150, 93, 78, 189, 13, 134, 186, 187, 54, 17, 220, 190, 171, 180, 199, 189, 201, 70, 57, 62, 116, 134, 191, 61, 211, 140, 8, 190, 195, 39, 58, 62, 145, 0, 14, 190, 187, 163, 8, 190, 108, 67, 190, 190, 92, 193, 141, 62, 76, 29, 3, 190, 8, 252, 28, 61, 141, 196, 144, 62, 27, 198, 154, 190, 102, 175, 211, 188, 106, 230, 122, 61, 97, 38, 10, 62, 115, 206, 61, 62, 87, 219, 158, 62, 84, 166, 116, 62, 66, 166, 82, 62, 74, 41, 238, 189, 227, 68, 69, 62, 30, 238, 170, 62, 225, 0, 4, 63, 196, 221, 174, 61, 228, 209, 57, 60, 207, 24, 2, 191, 58, 223, 147, 188, 157, 61, 187, 62, 100, 139, 159, 190, 105, 209, 46, 62, 85, 22, 60, 191, 196, 0, 69, 62, 194, 16, 30, 191, 228, 112, 107, 190, 244, 94, 163, 190, 170, 251, 198, 62, 214, 116, 5, 63, 107, 95, 131, 61, 105, 231, 46, 62, 132, 160, 73, 190, 165, 183, 158, 62, 166, 214, 89, 189, 18, 239, 131, 190, 127, 162, 125, 190, 157, 224, 222, 190, 181, 213, 36, 62, 244, 146, 68, 191, 93, 171, 132, 61, 31, 36, 85, 191, 198, 26, 233, 60, 34, 63, 169, 191, 81, 189, 97, 62, 97, 35, 242, 190, 205, 177, 165, 191, 12, 44, 27, 190, 114, 183, 35, 191, 240, 41, 118, 62, 44, 130, 44, 190, 145, 210, 64, 62, 142, 223, 55, 191, 237, 57, 187, 189, 99, 242, 62, 188, 241, 53, 0, 189, 201, 196, 190, 61, 29, 99, 102, 61, 9, 11, 100, 190, 165, 49, 149, 190, 187, 246, 252, 190, 164, 46, 136, 191, 110, 238, 86, 61, 49, 43, 106, 62, 203, 236, 164, 59, 149, 239, 69, 190, 6, 248, 140, 188, 33, 238, 2, 190, 221, 1, 146, 62, 192, 81, 177, 60, 95, 47, 251, 189, 11, 4, 20, 190, 148, 214, 5, 190, 73, 141, 144, 189, 104, 69, 204, 189, 100, 238, 38, 190, 29, 57, 47, 190, 50, 55, 24, 190, 162, 236, 244, 189, 130, 242, 254, 188, 25, 43, 29, 190, 113, 248, 188, 189, 212, 169, 223, 189, 92, 103, 21, 62, 170, 233, 142, 189, 61, 52, 170, 189, 37, 231, 209, 61, 22, 149, 133, 61, 42, 246, 244, 189, 242, 191, 137, 60, 131, 127, 252, 61, 227, 242, 35, 189, 252, 184, 175, 61, 155, 222, 141, 189, 203, 254, 237, 187, 118, 132, 192, 189, 122, 157, 2, 62, 140, 151, 25, 190, 2, 106, 169, 189, 18, 47, 7, 190, 28, 212, 238, 61, 173, 134, 18, 190, 238, 0, 231, 59, 246, 8, 150, 60, 116, 114, 5, 191, 251, 196, 110, 60, 35, 93, 5, 190, 83, 234, 17, 189, 36, 152, 244, 189, 108, 66, 239, 61, 127, 124, 53, 61, 7, 25, 207, 62, 212, 73, 67, 62, 229, 248, 129, 62, 164, 247, 124, 190, 154, 50, 130, 62, 89, 183, 115, 188, 169, 133, 155, 60, 221, 123, 251, 190, 90, 170, 45, 191, 164, 148, 115, 189, 121, 0, 2, 190, 6, 240, 198, 62, 119, 93, 111, 190, 10, 205, 243, 60, 27, 24, 4, 58, 5, 220, 124, 61, 57, 114, 183, 190, 102, 146, 250, 62, 30, 13, 55, 190, 43, 140, 94, 61, 102, 101, 7, 62, 209, 24, 221, 61, 118, 46, 122, 62, 205, 100, 11, 190, 5, 191, 231, 61, 133, 230, 68, 189, 175, 202, 118, 62, 226, 149, 152, 61, 190, 206, 50, 62, 126, 181, 220, 189, 13, 35, 167, 62, 55, 250, 232, 60, 181, 252, 233, 62, 211, 207, 175, 62, 222, 247, 92, 189, 18, 67, 44, 190, 19, 113, 32, 190, 3, 13, 103, 62, 158, 252, 56, 189, 160, 131, 236, 188, 75, 141, 176, 189, 131, 237, 185, 59, 245, 234, 202, 59, 85, 81, 148, 61, 21, 202, 11, 187, 152, 219, 197, 61, 153, 245, 235, 62, 17, 110, 28, 190, 203, 40, 163, 190, 64, 101, 99, 62, 173, 40, 84, 62, 8, 230, 54, 190, 105, 178, 232, 188, 230, 204, 4, 189, 105, 255, 80, 60, 132, 163, 211, 189, 39, 50, 135, 191, 176, 236, 81, 62, 18, 101, 88, 191, 77, 45, 100, 187, 232, 186, 129, 191, 47, 151, 178, 61, 0, 84, 69, 190, 158, 113, 126, 191, 122, 242, 122, 188, 165, 141, 198, 190, 139, 68, 253, 189, 115, 146, 180, 62, 50, 2, 50, 62, 233, 179, 10, 191, 96, 4, 82, 191, 105, 83, 53, 62, 197, 103, 84, 62, 103, 195, 2, 63, 11, 216, 143, 189, 52, 59, 72, 189, 239, 240, 1, 191, 253, 213, 209, 190, 153, 152, 141, 190, 218, 47, 171, 61, 141, 187, 188, 189, 80, 191, 179, 190, 239, 72, 54, 189, 8, 69, 28, 190, 149, 248, 4, 61, 168, 115, 26, 62, 113, 212, 228, 190, 230, 80, 52, 188, 35, 35, 106, 187, 0, 107, 182, 62, 114, 14, 35, 62, 12, 4, 180, 189, 176, 12, 186, 61, 95, 34, 175, 190, 217, 232, 106, 62, 197, 240, 9, 61, 235, 86, 235, 61, 220, 159, 139, 62, 160, 199, 23, 59, 114, 185, 11, 191, 113, 135, 26, 191, 81, 65, 245, 62, 218, 212, 229, 190, 9, 27, 183, 188, 134, 223, 226, 189, 241, 167, 83, 61, 207, 28, 166, 190, 186, 130, 23, 190, 17, 206, 6, 62, 232, 108, 207, 189, 108, 77, 8, 189, 11, 204, 12, 190, 221, 93, 97, 190, 122, 58, 24, 62, 138, 12, 188, 189, 133, 125, 191, 189, 78, 134, 72, 190, 54, 12, 120, 62, 25, 101, 49, 189, 134, 10, 158, 188, 30, 128, 131, 190, 75, 196, 63, 190, 147, 132, 19, 191, 163, 99, 18, 190, 52, 248, 156, 190, 6, 174, 31, 62, 27, 184, 38, 191, 204, 17, 111, 190, 177, 121, 67, 190, 63, 125, 112, 190, 57, 89, 44, 61, 90, 86, 86, 62, 124, 106, 148, 61, 101, 229, 6, 191, 112, 176, 217, 60, 174, 88, 42, 62, 90, 200, 60, 190, 107, 245, 92, 189, 52, 65, 115, 62, 211, 245, 28, 190, 97, 241, 243, 190, 68, 95, 25, 190, 160, 100, 142, 191, 152, 108, 71, 62, 197, 224, 203, 61, 67, 54, 129, 190, 209, 62, 92, 189, 56, 4, 168, 62, 52, 96, 150, 62, 235, 245, 164, 62, 254, 242, 239, 188, 77, 60, 231, 61, 100, 242, 174, 189, 7, 206, 145, 189, 30, 241, 162, 190, 155, 116, 75, 190, 217, 176, 161, 190, 124, 44, 135, 62, 10, 142, 131, 190, 204, 52, 19, 190, 178, 122, 85, 60, 7, 215, 190, 60, 64, 104, 96, 61, 161, 164, 52, 190, 193, 36, 119, 61, 168, 186, 139, 190, 149, 115, 63, 62, 22, 41, 71, 189, 99, 166, 212, 190, 158, 4, 140, 61, 231, 73, 253, 188, 207, 14, 17, 62, 154, 33, 86, 188, 13, 95, 155, 190, 16, 40, 30, 191, 142, 217, 46, 190, 227, 154, 253, 189, 250, 71, 137, 61, 104, 140, 141, 190, 110, 114, 80, 62, 181, 118, 141, 62, 172, 95, 58, 62, 188, 4, 214, 59, 169, 76, 27, 189, 35, 149, 12, 190, 4, 24, 32, 62, 90, 80, 11, 62, 64, 65, 155, 190, 115, 224, 136, 61, 158, 10, 147, 191, 60, 213, 21, 62, 249, 237, 224, 188, 113, 28, 81, 62, 16, 193, 13, 62, 58, 177, 78, 62, 129, 117, 123, 189, 20, 250, 224, 190, 152, 154, 150, 62, 253, 184, 144, 60, 64, 155, 7, 62, 90, 217, 19, 190, 5, 229, 38, 189, 241, 126, 130, 190, 130, 209, 156, 190, 70, 27, 77, 191, 244, 247, 149, 60, 120, 103, 40, 190, 203, 244, 50, 62, 196, 39, 180, 61, 137, 252, 5, 189, 237, 4, 147, 190, 125, 190, 133, 191, 121, 200, 190, 188, 65, 67, 75, 61, 34, 83, 139, 61, 144, 33, 153, 189, 13, 77, 80, 190, 134, 128, 93, 62, 51, 127, 167, 190, 162, 144, 252, 189, 177, 189, 145, 189, 156, 107, 56, 190, 17, 204, 255, 61, 228, 104, 166, 190, 217, 69, 138, 189, 58, 8, 160, 190, 246, 227, 182, 189, 120, 202, 86, 191, 111, 56, 145, 61, 77, 66, 156, 190, 43, 186, 170, 61, 131, 194, 141, 62, 79, 175, 37, 191, 108, 60, 56, 62, 136, 245, 33, 191, 246, 181, 59, 190, 211, 235, 196, 189, 59, 223, 231, 190, 203, 38, 22, 189, 190, 2, 41, 62, 121, 30, 158, 62, 75, 4, 251, 189, 126, 197, 133, 190, 134, 24, 241, 190, 228, 28, 168, 190, 15, 11, 136, 191, 143, 125, 161, 190, 194, 56, 3, 190, 252, 91, 143, 190, 156, 53, 230, 190, 148, 135, 216, 61, 252, 99, 72, 61, 78, 103, 43, 62, 188, 219, 109, 62, 122, 55, 22, 62, 63, 133, 178, 60, 80, 179, 87, 62, 117, 135, 96, 62, 79, 174, 17, 62, 198, 53, 185, 190, 40, 15, 189, 189, 89, 219, 165, 61, 155, 186, 173, 190, 94, 243, 89, 191, 253, 207, 92, 190, 235, 39, 14, 191, 88, 237, 6, 62, 224, 127, 13, 189, 246, 65, 128, 190, 104, 59, 103, 62, 26, 82, 42, 63, 178, 246, 58, 62, 59, 37, 233, 189, 220, 76, 143, 60, 42, 50, 197, 189, 178, 167, 32, 62, 136, 196, 67, 61, 0, 200, 136, 62, 174, 223, 30, 62, 63, 158, 30, 190, 217, 180, 165, 61, 68, 99, 40, 190, 12, 163, 238, 61, 130, 130, 245, 60, 6, 84, 115, 189, 171, 135, 132, 61, 152, 216, 248, 189, 82, 70, 219, 189, 195, 50, 14, 189, 209, 10, 51, 190, 255, 204, 71, 189, 223, 59, 96, 189, 205, 58, 80, 188, 0, 147, 202, 61, 56, 223, 110, 188, 131, 152, 81, 189, 186, 38, 182, 189, 143, 185, 96, 187, 24, 3, 136, 189, 206, 41, 13, 62, 73, 161, 18, 190, 27, 167, 223, 188, 93, 97, 63, 189, 95, 203, 169, 189, 144, 229, 69, 190, 221, 238, 189, 188, 251, 165, 150, 61, 201, 209, 236, 189, 23, 121, 82, 189, 225, 110, 197, 189, 226, 117, 238, 189, 24, 54, 157, 189, 34, 110, 185, 189, 165, 45, 16, 189, 195, 56, 155, 189, 124, 63, 55, 61, 92, 77, 35, 61, 54, 167, 220, 189, 53, 162, 186, 189, 38, 61, 17, 190, 198, 28, 172, 189, 171, 32, 34, 190, 192, 13, 60, 189, 160, 141, 93, 61, 124, 144, 73, 190, 141, 231, 223, 189, 208, 167, 56, 190, 193, 78, 139, 61, 76, 77, 13, 62, 13, 96, 44, 190, 69, 80, 193, 61, 61, 206, 174, 61, 164, 99, 37, 190, 77, 4, 51, 60, 49, 212, 29, 62, 158, 251, 209, 61, 200, 167, 159, 61, 88, 249, 12, 61, 42, 245, 208, 60, 87, 233, 82, 190, 34, 162, 105, 61, 215, 233, 249, 189, 226, 206, 21, 190, 30, 243, 85, 61, 21, 133, 10, 189, 130, 252, 130, 60, 106, 212, 115, 62, 198, 245, 160, 189, 198, 224, 72, 58, 82, 119, 37, 190, 40, 48, 247, 60, 196, 25, 114, 61, 237, 33, 229, 61, 61, 39, 4, 63, 46, 47, 136, 62, 71, 174, 50, 190, 238, 78, 195, 189, 181, 90, 73, 62, 189, 6, 66, 61, 131, 19, 96, 62, 74, 55, 156, 190, 45, 56, 54, 62, 171, 41, 162, 61, 230, 18, 134, 190, 187, 227, 167, 61, 28, 213, 40, 62, 128, 162, 175, 189, 236, 85, 17, 61, 174, 52, 18, 60, 10, 13, 168, 62, 17, 0, 250, 187, 247, 218, 21, 190, 27, 148, 89, 62, 24, 140, 9, 189, 10, 25, 234, 189, 235, 247, 224, 61, 81, 155, 127, 191, 16, 141, 192, 189, 93, 28, 109, 191, 160, 139, 145, 185, 72, 127, 164, 191, 89, 246, 222, 61, 84, 144, 131, 190, 88, 182, 143, 191, 130, 91, 183, 190, 114, 86, 8, 191, 177, 220, 14, 186, 254, 49, 139, 61, 198, 88, 34, 62, 247, 50, 116, 191, 176, 228, 156, 190, 171, 9, 4, 62, 136, 151, 207, 61, 204, 241, 2, 62, 70, 218, 155, 186, 232, 65, 199, 61, 160, 250, 138, 189, 224, 164, 12, 191, 144, 167, 221, 190, 155, 185, 35, 62, 36, 17, 29, 61, 105, 221, 12, 190, 229, 236, 235, 189, 5, 90, 91, 62, 115, 188, 3, 189, 241, 173, 13, 61, 132, 100, 103, 188, 190, 97, 201, 57, 20, 135, 214, 61, 89, 43, 4, 190, 111, 228, 97, 61, 149, 134, 164, 190, 103, 38, 85, 62, 10, 232, 94, 190, 143, 234, 232, 190, 29, 40, 57, 62, 48, 162, 229, 61, 124, 13, 127, 62, 167, 157, 8, 189, 228, 110, 203, 61, 41, 153, 49, 189, 159, 6, 147, 62, 112, 254, 40, 190, 180, 3, 211, 189, 74, 234, 152, 61, 220, 224, 175, 190, 163, 8, 176, 188, 45, 248, 10, 62, 75, 40, 37, 63, 234, 254, 138, 186, 76, 83, 58, 62, 89, 166, 133, 190, 22, 186, 166, 190, 127, 22, 241, 62, 132, 23, 189, 190, 119, 150, 154, 189, 114, 28, 24, 62, 147, 115, 186, 61, 18, 173, 70, 62, 111, 219, 48, 190, 181, 137, 175, 188, 25, 196, 106, 190, 132, 4, 9, 62, 86, 85, 82, 62, 0, 141, 0, 190, 225, 108, 192, 61, 249, 89, 123, 189, 110, 33, 49, 189, 173, 188, 49, 190, 245, 92, 87, 62, 133, 23, 81, 191, 151, 62, 67, 62, 168, 231, 149, 189, 164, 234, 0, 58, 228, 190, 120, 62, 12, 95, 147, 190, 13, 247, 91, 62, 170, 158, 103, 190, 64, 156, 148, 61, 205, 177, 29, 62, 114, 231, 11, 62, 25, 115, 9, 62, 171, 8, 159, 189, 27, 73, 80, 191, 168, 147, 3, 191, 161, 79, 170, 190, 202, 4, 151, 189, 67, 229, 67, 190, 80, 129, 28, 62, 11, 194, 187, 190, 106, 163, 131, 62, 161, 155, 240, 61, 243, 26, 144, 189, 142, 192, 47, 61, 211, 207, 162, 61, 186, 116, 147, 60, 84, 217, 130, 62, 24, 201, 82, 61, 50, 167, 15, 62, 70, 42, 90, 62, 118, 55, 141, 62, 33, 93, 165, 62, 7, 117, 167, 61, 155, 173, 244, 190, 122, 167, 20, 62, 166, 205, 193, 62, 137, 1, 73, 190, 135, 192, 36, 190, 185, 85, 64, 191, 227, 140, 63, 62, 124, 74, 37, 190, 21, 196, 188, 187, 103, 235, 80, 190, 15, 92, 75, 61, 254, 107, 57, 62, 191, 108, 15, 60, 19, 196, 5, 61, 228, 131, 42, 62, 149, 72, 255, 61, 11, 89, 43, 62, 160, 206, 199, 61, 130, 191, 74, 61, 112, 45, 121, 190, 47, 43, 36, 62, 218, 138, 43, 61, 213, 113, 65, 190, 100, 141, 240, 189, 115, 62, 193, 189, 2, 26, 165, 59, 239, 204, 221, 189, 140, 193, 45, 62, 89, 202, 157, 61, 34, 173, 71, 61, 245, 122, 189, 60, 244, 231, 241, 189, 231, 117, 210, 61, 173, 122, 215, 188, 50, 0, 21, 189, 253, 99, 190, 189, 151, 24, 0, 61, 43, 200, 9, 188, 64, 176, 32, 190, 88, 99, 113, 61, 110, 147, 178, 61, 0, 249, 224, 61, 93, 246, 45, 190, 34, 122, 254, 61, 26, 19, 166, 189, 146, 23, 238, 189, 52, 255, 19, 190, 187, 119, 20, 190, 114, 126, 252, 189, 107, 16, 15, 190, 94, 93, 96, 189, 183, 86, 228, 187, 101, 205, 53, 188, 117, 2, 57, 190, 42, 95, 171, 190, 196, 14, 5, 190, 50, 244, 149, 189, 181, 161, 137, 190, 100, 234, 131, 62, 250, 109, 77, 191, 247, 119, 58, 187, 144, 16, 159, 61, 5, 134, 11, 60, 136, 5, 215, 61, 109, 79, 231, 61, 185, 160, 142, 62, 123, 69, 152, 190, 211, 82, 146, 61, 110, 57, 139, 188, 220, 89, 46, 190, 95, 81, 151, 61, 145, 150, 55, 62, 87, 208, 84, 190, 22, 255, 77, 191, 196, 14, 235, 61, 151, 170, 171, 190, 180, 65, 115, 190, 120, 15, 27, 62, 203, 137, 89, 189, 44, 180, 102, 190, 86, 67, 151, 186, 66, 16, 190, 61, 51, 115, 60, 61, 118, 56, 255, 189, 49, 200, 128, 61, 111, 71, 145, 61, 136, 50, 186, 61, 218, 23, 68, 189, 11, 79, 1, 62, 34, 98, 81, 62, 58, 120, 33, 62, 97, 206, 5, 189, 96, 230, 25, 61, 110, 124, 106, 62, 204, 158, 91, 62, 250, 159, 155, 62, 135, 194, 193, 190, 237, 147, 128, 61, 251, 196, 151, 61, 217, 99, 228, 61, 179, 72, 94, 62, 142, 5, 27, 191, 249, 167, 41, 58, 209, 83, 37, 190, 28, 176, 67, 189, 146, 196, 139, 190, 121, 16, 131, 60, 207, 52, 113, 61, 18, 149, 101, 62, 155, 231, 115, 62, 67, 9, 172, 62, 148, 126, 246, 61, 55, 89, 240, 61, 114, 187, 94, 188, 199, 168, 214, 60, 114, 62, 193, 189, 87, 100, 94, 189, 252, 220, 254, 60, 207, 118, 5, 62, 119, 51, 77, 62, 121, 13, 225, 60, 63, 41, 90, 62, 184, 81, 56, 190, 29, 251, 168, 190, 107, 120, 46, 62, 203, 159, 74, 190, 154, 254, 167, 188, 206, 105, 89, 62, 115, 204, 79, 61, 110, 80, 128, 189, 199, 130, 16, 62, 166, 26, 118, 62, 85, 37, 159, 59, 8, 128, 132, 188, 23, 39, 53, 62, 45, 252, 71, 190, 124, 81, 254, 189, 150, 197, 29, 190, 73, 64, 213, 61, 189, 99, 5, 62, 163, 231, 187, 62, 224, 249, 7, 62, 91, 160, 131, 62, 188, 65, 171, 190, 5, 34, 170, 190, 61, 119, 21, 62, 47, 123, 102, 62, 18, 190, 141, 190, 203, 18, 43, 189, 159, 49, 35, 60, 155, 122, 153, 190, 72, 235, 226, 189, 146, 202, 24, 190, 163, 147, 163, 189, 176, 36, 60, 62, 166, 32, 51, 191, 41, 159, 39, 188, 239, 134, 192, 62, 110, 198, 58, 62, 137, 108, 157, 190, 255, 136, 191, 61, 28, 100, 13, 62, 109, 48, 241, 190, 169, 163, 229, 61, 17, 208, 77, 190, 158, 169, 158, 190, 59, 143, 215, 61, 160, 156, 163, 62, 219, 213, 123, 190, 96, 77, 26, 191, 165, 67, 203, 59, 193, 99, 142, 189, 172, 54, 48, 191, 3, 6, 179, 190, 20, 216, 216, 61, 109, 253, 126, 190, 129, 205, 130, 62, 196, 117, 199, 61, 165, 101, 59, 190, 200, 147, 44, 190, 27, 0, 180, 61, 190, 191, 170, 191, 240, 201, 116, 62, 204, 22, 156, 191, 113, 240, 237, 188, 201, 41, 183, 191, 170, 134, 69, 62, 12, 189, 140, 59, 3, 81, 184, 191, 223, 169, 253, 61, 252, 137, 18, 190, 193, 86, 137, 62, 95, 148, 204, 189, 220, 141, 144, 190, 128, 174, 102, 190, 74, 41, 201, 191, 109, 16, 32, 62, 131, 43, 50, 60, 159, 74, 151, 60, 40, 89, 120, 62, 74, 6, 176, 61, 171, 185, 247, 188, 232, 99, 28, 191, 84, 172, 133, 190, 134, 203, 38, 62, 236, 0, 48, 62, 55, 198, 11, 189, 22, 223, 142, 190, 109, 203, 90, 61, 26, 58, 62, 191, 79, 228, 149, 62, 128, 16, 160, 189, 39, 134, 25, 190, 218, 192, 131, 189, 83, 103, 158, 189, 71, 178, 13, 190, 114, 124, 226, 61, 141, 161, 183, 60, 95, 222, 193, 189, 237, 177, 139, 186, 104, 234, 200, 61, 55, 83, 37, 62, 44, 124, 229, 189, 250, 185, 199, 189, 65, 61, 212, 61, 110, 9, 183, 189, 202, 68, 208, 188, 75, 9, 192, 188, 137, 252, 9, 189, 53, 0, 196, 61, 197, 144, 116, 188, 254, 94, 36, 61, 38, 53, 232, 189, 36, 9, 254, 60, 163, 20, 89, 60, 43, 134, 190, 189, 42, 79, 6, 190, 142, 110, 193, 188, 247, 73, 47, 190, 117, 131, 128, 189, 51, 103, 247, 186, 252, 202, 81, 61, 100, 224, 54, 60, 106, 11, 30, 190, 73, 169, 140, 189, 180, 181, 105, 188, 7, 203, 46, 61, 139, 5, 154, 61, 226, 135, 51, 190, 132, 51, 40, 190, 45, 52, 51, 190, 40, 216, 157, 189, 200, 220, 27, 61, 116, 66, 251, 61, 27, 64, 175, 60, 106, 38, 14, 190, 55, 231, 222, 61, 48, 121, 184, 187, 10, 155, 224, 61, 88, 145, 102, 61, 120, 232, 15, 190, 46, 239, 178, 61, 16, 206, 78, 190, 184, 202, 151, 189, 242, 190, 173, 189, 122, 12, 199, 189, 25, 103, 221, 189, 14, 28, 50, 61, 223, 253, 24, 61, 167, 251, 19, 190, 206, 90, 187, 60, 237, 211, 138, 61, 85, 9, 23, 62, 169, 186, 43, 190, 103, 89, 58, 190, 196, 8, 3, 189, 29, 225, 41, 62, 219, 179, 110, 187, 161, 195, 30, 190, 82, 13, 54, 188, 251, 137, 252, 61, 145, 236, 6, 59, 22, 118, 181, 60, 47, 102, 1, 191, 171, 38, 192, 189, 136, 170, 158, 62, 13, 35, 102, 61, 25, 63, 188, 190, 81, 31, 50, 62, 247, 250, 113, 62, 128, 121, 23, 189, 186, 148, 156, 61, 234, 102, 134, 189, 15, 56, 8, 190, 148, 7, 9, 62, 155, 168, 38, 62, 83, 197, 167, 189, 248, 129, 119, 191, 9, 67, 30, 62, 33, 220, 38, 60, 60, 130, 82, 191, 29, 52, 19, 191, 168, 130, 17, 62, 75, 255, 48, 188, 55, 13, 213, 189, 132, 69, 59, 62, 209, 112, 157, 190, 227, 219, 176, 61, 2, 231, 28, 62, 51, 4, 181, 190, 173, 124, 43, 61, 1, 105, 114, 190, 0, 46, 47, 190, 69, 199, 219, 189, 77, 114, 73, 61, 104, 94, 79, 191, 182, 2, 94, 190, 26, 20, 129, 189, 49, 93, 47, 190, 191, 61, 178, 189, 47, 31, 3, 190, 118, 8, 205, 60, 91, 120, 58, 190, 112, 184, 163, 61, 211, 22, 194, 188, 248, 3, 20, 191, 29, 232, 177, 61, 119, 219, 66, 190, 13, 159, 147, 61, 32, 93, 122, 190, 59, 186, 155, 190, 18, 0, 53, 190, 206, 109, 34, 61, 211, 208, 223, 60, 115, 7, 166, 62, 176, 61, 27, 190, 105, 48, 223, 61, 223, 133, 135, 62, 222, 66, 74, 190, 39, 33, 19, 188, 98, 99, 242, 61, 45, 32, 140, 61, 104, 210, 74, 62, 120, 215, 173, 61, 209, 61, 62, 61, 131, 22, 243, 188, 19, 187, 92, 191, 113, 20, 10, 63, 48, 20, 215, 189, 133, 38, 131, 62, 135, 221, 131, 62, 130, 231, 138, 62, 166, 188, 181, 190, 54, 63, 29, 190, 132, 243, 91, 61, 34, 54, 115, 190, 201, 119, 63, 61, 135, 151, 23, 190, 174, 32, 156, 62, 80, 163, 59, 189, 222, 154, 4, 190, 209, 239, 83, 191, 24, 176, 235, 61, 32, 136, 96, 61, 61, 121, 106, 62, 28, 171, 248, 62, 232, 205, 131, 62, 82, 198, 202, 58, 195, 94, 95, 191, 114, 118, 184, 60, 154, 129, 207, 61, 36, 132, 5, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 13, 245, 61, 70, 207, 37, 62, 232, 174, 19, 62, 254, 214, 142, 60, 236, 162, 239, 189, 108, 239, 179, 61, 153, 93, 80, 190, 179, 166, 88, 187, 39, 170, 110, 59, 129, 33, 36, 61, 0, 183, 136, 62, 35, 106, 16, 190, 67, 195, 205, 189, 241, 52, 0, 190, 189, 238, 36, 61, 199, 223, 241, 188, 61, 111, 167, 62, 1, 103, 129, 62, 147, 136, 51, 61, 228, 215, 128, 190, 176, 146, 182, 62, 206, 24, 224, 61, 201, 96, 129, 188, 41, 63, 243, 61, 82, 180, 81, 62, 151, 237, 52, 62, 112, 228, 115, 62, 202, 172, 54, 190, 229, 246, 211, 189, 46, 117, 90, 62, 107, 155, 170, 62, 77, 105, 89, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 124, 91, 191, 14, 142, 153, 189, 133, 246, 213, 62, 253, 86, 39, 191, 241, 208, 17, 61, 167, 131, 5, 63, 27, 135, 234, 189, 228, 120, 15, 191, 24, 163, 73, 191, 178, 162, 181, 190, 116, 114, 47, 190, 244, 41, 138, 62, 22, 53, 129, 63, 60, 206, 146, 62, 66, 255, 173, 60, 180, 177, 150, 189, 118, 40, 142, 61, 46, 154, 6, 191, 21, 175, 132, 190, 77, 47, 214, 190, 187, 13, 171, 62, 157, 140, 218, 189, 180, 202, 148, 190, 210, 9, 135, 62, 249, 194, 133, 62, 121, 254, 179, 190, 57, 128, 52, 191, 145, 148, 13, 190, 106, 196, 250, 189, 101, 74, 137, 190, 173, 170, 186, 189, 166, 203, 117, 62, 49, 232, 200, 62, 233, 99, 121, 190, 219, 82, 251, 61, 152, 22, 61, 190, 128, 74, 10, 190, 91, 127, 182, 189, 107, 156, 136, 62, 184, 233, 101, 62, 173, 119, 158, 62, 16, 160, 204, 61, 154, 40, 244, 190, 137, 179, 247, 61, 122, 240, 191, 188, 230, 160, 191, 61, 64, 174, 187, 61, 213, 11, 200, 61, 6, 172, 126, 190, 185, 52, 170, 190, 139, 103, 180, 189, 192, 45, 233, 62, 114, 178, 252, 189, 121, 207, 253, 60, 248, 163, 130, 190, 57, 211, 50, 190, 239, 40, 12, 190, 40, 53, 247, 190, 90, 230, 132, 189, 152, 64, 119, 189, 188, 230, 9, 62, 198, 246, 108, 190, 93, 213, 7, 191, 73, 8, 3, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 224, 136, 60, 143, 70, 6, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {249, 22, 79, 63, 45, 82, 161, 63, 102, 46, 5, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {242, 201, 25, 191, 188, 163, 63, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0074/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}