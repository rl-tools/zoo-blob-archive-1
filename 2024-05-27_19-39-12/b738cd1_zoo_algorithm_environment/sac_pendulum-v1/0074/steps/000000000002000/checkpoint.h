// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 3, 209, 62, 157, 163, 19, 62, 78, 77, 68, 189, 168, 9, 234, 61, 2, 238, 114, 61, 228, 95, 15, 63, 8, 167, 44, 191, 225, 247, 149, 62, 228, 190, 192, 62, 77, 98, 64, 190, 245, 155, 65, 191, 21, 218, 123, 62, 214, 44, 105, 62, 70, 127, 34, 62, 3, 41, 12, 191, 64, 26, 110, 190, 215, 238, 7, 191, 192, 114, 132, 62, 29, 109, 105, 190, 168, 176, 3, 63, 240, 117, 29, 191, 59, 136, 179, 62, 227, 224, 194, 190, 181, 235, 171, 190, 18, 38, 226, 61, 231, 42, 30, 191, 48, 80, 33, 62, 246, 154, 219, 62, 255, 214, 65, 190, 59, 66, 197, 189, 166, 211, 246, 61, 188, 112, 49, 191, 168, 57, 182, 186, 58, 241, 194, 189, 13, 255, 147, 190, 28, 96, 231, 189, 205, 227, 239, 62, 165, 80, 229, 59, 86, 115, 206, 62, 24, 116, 222, 61, 75, 96, 56, 63, 59, 198, 54, 189, 150, 106, 80, 190, 208, 232, 136, 191, 0, 96, 0, 62, 255, 247, 246, 62, 245, 158, 249, 62, 222, 104, 240, 62, 115, 113, 17, 191, 215, 172, 39, 63, 39, 216, 161, 62, 196, 93, 201, 61, 84, 85, 3, 62, 8, 194, 200, 62, 63, 123, 242, 189, 242, 158, 219, 62, 166, 74, 33, 62, 140, 158, 246, 62, 248, 207, 125, 190, 178, 160, 192, 62, 239, 7, 102, 189, 243, 102, 158, 190, 1, 68, 74, 62, 6, 179, 166, 190, 147, 155, 169, 190, 98, 40, 9, 190, 81, 196, 183, 61, 110, 147, 248, 190, 237, 179, 23, 63, 71, 93, 21, 62, 204, 27, 94, 190, 176, 108, 239, 189, 170, 60, 7, 191, 129, 36, 250, 190, 118, 250, 158, 190, 235, 24, 25, 191, 143, 93, 162, 189, 85, 44, 208, 189, 75, 228, 185, 62, 173, 68, 19, 191, 199, 169, 9, 190, 48, 39, 141, 60, 1, 233, 111, 61, 216, 160, 0, 191, 173, 14, 222, 60, 181, 182, 16, 63, 216, 223, 223, 190, 99, 108, 27, 63, 238, 14, 237, 61, 190, 148, 179, 62, 187, 29, 150, 61, 222, 137, 88, 191, 216, 212, 165, 190, 184, 60, 67, 190, 216, 95, 136, 190, 4, 125, 33, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 183, 32, 191, 26, 129, 178, 62, 246, 251, 30, 63, 213, 217, 158, 189, 82, 21, 136, 190, 138, 246, 243, 189, 104, 129, 37, 62, 159, 22, 230, 190, 169, 85, 63, 62, 229, 98, 135, 189, 146, 63, 94, 62, 32, 105, 0, 63, 218, 137, 22, 190, 171, 175, 222, 62, 115, 78, 160, 189, 147, 141, 224, 62, 38, 175, 36, 63, 165, 17, 22, 191, 71, 138, 2, 63, 212, 200, 246, 61, 36, 250, 0, 191, 181, 32, 223, 190, 199, 30, 244, 62, 79, 32, 98, 190, 191, 141, 25, 63, 136, 71, 18, 190, 126, 29, 178, 62, 48, 93, 20, 191, 61, 99, 226, 62, 1, 90, 28, 63, 246, 188, 232, 62, 151, 136, 44, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 107, 228, 61, 219, 115, 171, 189, 201, 63, 90, 62, 215, 118, 0, 191, 106, 217, 173, 190, 78, 185, 36, 190, 189, 115, 204, 189, 230, 122, 122, 190, 185, 14, 9, 191, 133, 246, 131, 190, 244, 176, 177, 190, 119, 108, 96, 60, 41, 203, 2, 62, 11, 146, 3, 62, 49, 64, 37, 191, 36, 204, 37, 61, 186, 142, 30, 62, 204, 241, 24, 189, 119, 239, 32, 61, 154, 54, 102, 62, 73, 227, 54, 61, 62, 58, 201, 189, 159, 153, 143, 190, 160, 91, 6, 190, 179, 192, 149, 62, 15, 8, 190, 62, 232, 121, 197, 190, 185, 179, 102, 190, 68, 226, 56, 62, 250, 192, 162, 60, 91, 180, 39, 189, 207, 104, 235, 189, 17, 1, 242, 189, 237, 138, 4, 189, 139, 166, 216, 189, 140, 150, 187, 61, 19, 131, 91, 62, 17, 251, 169, 61, 145, 238, 0, 190, 253, 99, 199, 61, 247, 47, 48, 62, 204, 16, 184, 61, 147, 7, 129, 62, 254, 125, 37, 190, 166, 218, 201, 189, 38, 209, 208, 60, 87, 121, 79, 62, 105, 200, 128, 189, 165, 52, 195, 61, 44, 175, 137, 190, 11, 242, 176, 189, 82, 253, 88, 62, 74, 255, 172, 60, 2, 43, 65, 62, 111, 151, 65, 62, 132, 210, 198, 189, 93, 41, 198, 61, 41, 199, 100, 190, 210, 3, 118, 62, 44, 118, 206, 60, 39, 161, 161, 187, 225, 108, 129, 62, 86, 109, 73, 190, 76, 132, 58, 189, 106, 230, 122, 61, 208, 200, 68, 61, 189, 204, 202, 61, 85, 122, 70, 62, 9, 78, 192, 61, 157, 90, 184, 61, 96, 138, 206, 189, 214, 24, 181, 189, 44, 104, 144, 62, 103, 100, 205, 188, 102, 131, 159, 61, 101, 94, 139, 60, 3, 169, 176, 190, 225, 142, 122, 189, 244, 65, 171, 62, 190, 126, 101, 190, 236, 215, 30, 62, 168, 200, 204, 190, 217, 33, 9, 62, 96, 203, 9, 191, 8, 47, 28, 190, 161, 139, 33, 190, 11, 251, 155, 62, 81, 191, 162, 61, 170, 76, 141, 61, 47, 79, 89, 61, 252, 211, 146, 190, 95, 146, 42, 62, 45, 117, 128, 189, 13, 134, 39, 190, 106, 177, 104, 61, 39, 66, 201, 190, 181, 213, 36, 62, 144, 61, 131, 61, 36, 16, 65, 62, 95, 125, 67, 190, 12, 47, 6, 61, 219, 75, 72, 190, 219, 167, 45, 62, 229, 100, 208, 190, 152, 44, 169, 190, 124, 94, 139, 189, 253, 246, 72, 190, 9, 131, 19, 62, 49, 92, 75, 190, 140, 208, 169, 62, 48, 246, 54, 191, 235, 57, 151, 60, 99, 42, 23, 61, 219, 157, 175, 189, 112, 233, 72, 62, 183, 185, 41, 60, 64, 80, 96, 190, 48, 113, 102, 190, 107, 225, 82, 190, 127, 137, 227, 190, 76, 135, 144, 189, 84, 164, 52, 62, 131, 208, 17, 62, 42, 17, 105, 190, 98, 201, 66, 189, 10, 163, 244, 189, 56, 110, 80, 188, 57, 14, 132, 188, 95, 47, 251, 189, 11, 4, 20, 190, 148, 214, 5, 190, 73, 141, 144, 189, 104, 69, 204, 189, 100, 238, 38, 190, 29, 57, 47, 190, 50, 55, 24, 190, 162, 236, 244, 189, 130, 242, 254, 188, 25, 43, 29, 190, 113, 248, 188, 189, 212, 169, 223, 189, 92, 103, 21, 62, 170, 233, 142, 189, 61, 52, 170, 189, 37, 231, 209, 61, 22, 149, 133, 61, 42, 246, 244, 189, 242, 191, 137, 60, 131, 127, 252, 61, 227, 242, 35, 189, 252, 184, 175, 61, 155, 222, 141, 189, 203, 254, 237, 187, 118, 132, 192, 189, 122, 157, 2, 62, 140, 151, 25, 190, 2, 106, 169, 189, 18, 47, 7, 190, 28, 212, 238, 61, 173, 134, 18, 190, 238, 0, 231, 59, 0, 214, 156, 60, 224, 177, 29, 189, 181, 84, 152, 60, 203, 1, 209, 189, 180, 48, 241, 60, 56, 26, 221, 189, 10, 238, 164, 187, 113, 184, 218, 189, 163, 39, 91, 61, 104, 121, 159, 189, 83, 196, 13, 62, 129, 248, 62, 190, 179, 237, 214, 61, 174, 126, 53, 189, 185, 187, 164, 61, 19, 135, 10, 190, 116, 50, 41, 188, 84, 105, 53, 188, 211, 190, 20, 190, 237, 178, 160, 61, 169, 87, 162, 61, 190, 150, 116, 61, 145, 176, 5, 190, 204, 214, 46, 189, 254, 176, 83, 188, 153, 154, 96, 62, 31, 39, 192, 61, 41, 32, 35, 189, 96, 254, 65, 61, 227, 82, 91, 189, 46, 194, 60, 61, 205, 100, 11, 190, 129, 88, 224, 61, 178, 84, 6, 190, 192, 204, 6, 62, 192, 182, 144, 61, 59, 115, 153, 61, 158, 188, 33, 189, 230, 123, 6, 62, 27, 37, 166, 189, 70, 179, 141, 62, 66, 9, 150, 62, 213, 9, 21, 61, 194, 152, 230, 189, 178, 143, 55, 190, 5, 87, 223, 61, 86, 106, 172, 188, 203, 202, 149, 189, 98, 166, 242, 189, 195, 101, 177, 60, 18, 114, 36, 61, 83, 97, 230, 61, 29, 198, 201, 189, 254, 244, 64, 61, 152, 28, 63, 62, 82, 24, 160, 188, 57, 248, 92, 190, 212, 70, 5, 62, 132, 36, 24, 62, 81, 34, 243, 189, 8, 190, 66, 189, 228, 192, 192, 61, 89, 198, 176, 61, 3, 112, 211, 189, 226, 219, 132, 190, 118, 175, 150, 62, 226, 124, 181, 190, 109, 243, 227, 61, 201, 235, 172, 189, 206, 233, 53, 62, 62, 33, 242, 61, 34, 199, 119, 190, 92, 9, 236, 58, 89, 218, 85, 190, 152, 144, 185, 189, 250, 92, 125, 189, 205, 133, 207, 61, 97, 53, 238, 190, 146, 85, 2, 191, 183, 76, 219, 61, 143, 66, 189, 61, 58, 243, 227, 62, 240, 191, 118, 189, 150, 136, 67, 189, 156, 115, 242, 189, 247, 171, 178, 188, 136, 241, 157, 61, 83, 179, 19, 62, 46, 72, 2, 60, 250, 143, 40, 190, 80, 227, 216, 61, 196, 143, 190, 189, 228, 170, 198, 189, 139, 40, 114, 61, 73, 43, 207, 190, 230, 80, 52, 188, 178, 249, 129, 61, 183, 173, 207, 61, 186, 89, 2, 61, 58, 47, 187, 61, 221, 41, 237, 188, 130, 253, 24, 190, 31, 242, 82, 62, 141, 138, 11, 189, 52, 86, 20, 62, 64, 181, 20, 62, 119, 162, 27, 189, 60, 126, 94, 190, 54, 225, 121, 190, 182, 151, 101, 62, 45, 110, 99, 189, 254, 13, 61, 190, 41, 234, 136, 61, 235, 177, 9, 61, 121, 39, 45, 190, 209, 210, 222, 189, 67, 52, 151, 61, 125, 39, 191, 189, 94, 63, 221, 60, 28, 161, 64, 190, 127, 45, 44, 190, 45, 217, 38, 62, 236, 155, 164, 61, 210, 195, 184, 61, 210, 222, 25, 189, 99, 82, 89, 62, 186, 191, 177, 58, 160, 84, 157, 188, 229, 18, 20, 188, 23, 140, 219, 189, 54, 233, 86, 190, 102, 61, 3, 190, 87, 101, 247, 60, 193, 215, 159, 61, 48, 6, 228, 190, 64, 65, 170, 60, 40, 62, 171, 190, 43, 148, 229, 190, 142, 165, 92, 189, 83, 139, 5, 61, 254, 151, 9, 62, 150, 226, 129, 190, 191, 174, 179, 186, 175, 45, 86, 62, 114, 218, 143, 189, 225, 67, 187, 61, 211, 96, 14, 60, 240, 159, 18, 190, 127, 128, 127, 190, 233, 205, 163, 189, 198, 139, 172, 190, 150, 66, 12, 62, 199, 89, 7, 62, 52, 77, 165, 190, 241, 160, 116, 189, 220, 17, 128, 62, 91, 222, 47, 62, 173, 43, 31, 190, 54, 200, 57, 188, 0, 112, 231, 61, 36, 97, 80, 62, 117, 46, 220, 188, 180, 61, 151, 189, 152, 27, 5, 190, 167, 223, 230, 189, 81, 245, 144, 62, 153, 58, 161, 61, 56, 199, 23, 62, 227, 239, 3, 62, 225, 67, 136, 59, 135, 140, 54, 60, 209, 183, 137, 189, 116, 141, 173, 61, 123, 156, 91, 190, 159, 92, 127, 62, 202, 130, 113, 186, 41, 155, 233, 189, 4, 14, 121, 61, 72, 98, 31, 187, 91, 84, 21, 62, 224, 85, 237, 189, 236, 92, 13, 190, 21, 237, 124, 189, 128, 171, 43, 190, 193, 124, 0, 190, 255, 129, 152, 61, 120, 220, 106, 190, 228, 111, 107, 62, 32, 52, 145, 62, 9, 120, 125, 61, 152, 206, 134, 61, 169, 76, 27, 189, 253, 179, 250, 189, 228, 189, 20, 62, 55, 207, 39, 62, 229, 143, 104, 190, 99, 178, 151, 61, 54, 50, 233, 190, 181, 222, 169, 189, 82, 151, 149, 60, 62, 241, 242, 60, 143, 240, 170, 62, 250, 95, 94, 62, 167, 249, 108, 61, 198, 90, 157, 190, 252, 102, 201, 62, 208, 57, 144, 61, 221, 5, 140, 61, 133, 231, 168, 187, 155, 19, 65, 189, 43, 98, 19, 190, 10, 132, 57, 190, 63, 81, 156, 60, 163, 155, 95, 61, 253, 163, 137, 190, 159, 35, 85, 62, 34, 75, 169, 60, 233, 210, 160, 188, 19, 100, 137, 190, 86, 52, 25, 191, 167, 59, 63, 61, 6, 201, 145, 62, 214, 135, 15, 62, 144, 33, 153, 189, 60, 113, 28, 190, 99, 192, 27, 61, 248, 217, 189, 188, 182, 208, 133, 61, 102, 97, 39, 189, 82, 110, 150, 61, 187, 14, 6, 62, 7, 27, 238, 188, 248, 129, 65, 189, 38, 110, 9, 190, 77, 78, 19, 190, 107, 182, 202, 189, 128, 120, 201, 188, 111, 48, 65, 190, 195, 43, 12, 62, 224, 53, 220, 61, 214, 92, 39, 190, 164, 225, 19, 61, 180, 65, 185, 61, 5, 200, 36, 59, 86, 90, 125, 188, 158, 168, 196, 189, 181, 99, 29, 189, 116, 207, 119, 61, 96, 69, 136, 59, 201, 241, 192, 187, 137, 63, 8, 190, 128, 92, 41, 190, 150, 173, 189, 188, 170, 97, 71, 190, 221, 74, 196, 187, 119, 73, 3, 190, 79, 133, 96, 190, 151, 162, 139, 190, 248, 178, 202, 189, 145, 200, 175, 61, 78, 243, 137, 61, 202, 10, 120, 62, 102, 167, 124, 59, 243, 5, 88, 190, 54, 255, 2, 189, 193, 226, 152, 190, 252, 212, 197, 61, 195, 248, 182, 189, 205, 181, 193, 188, 10, 83, 66, 61, 198, 224, 242, 61, 114, 232, 173, 190, 186, 32, 206, 187, 137, 41, 115, 190, 80, 20, 151, 60, 156, 232, 254, 61, 247, 234, 221, 189, 53, 218, 180, 61, 116, 37, 73, 62, 112, 189, 43, 62, 27, 82, 219, 189, 215, 166, 126, 190, 123, 166, 152, 188, 111, 153, 32, 62, 12, 154, 206, 61, 162, 71, 20, 62, 159, 136, 144, 188, 63, 158, 30, 190, 188, 110, 223, 61, 152, 50, 16, 190, 67, 39, 22, 62, 130, 130, 245, 60, 84, 113, 238, 188, 171, 135, 132, 61, 152, 216, 248, 189, 99, 38, 162, 189, 231, 27, 15, 189, 31, 89, 18, 190, 16, 209, 27, 189, 17, 212, 185, 188, 205, 58, 80, 188, 51, 207, 2, 62, 48, 155, 123, 60, 13, 109, 2, 189, 44, 112, 102, 189, 241, 210, 94, 60, 42, 168, 20, 189, 29, 239, 45, 62, 73, 161, 18, 190, 53, 95, 35, 59, 93, 97, 63, 189, 58, 136, 158, 189, 6, 180, 69, 190, 195, 238, 165, 188, 251, 165, 150, 61, 201, 209, 236, 189, 111, 59, 176, 188, 8, 12, 167, 189, 186, 63, 174, 189, 24, 54, 157, 189, 242, 75, 148, 189, 181, 194, 3, 189, 170, 128, 122, 189, 242, 9, 98, 61, 9, 109, 82, 61, 220, 148, 129, 189, 53, 162, 186, 189, 89, 58, 1, 190, 198, 28, 172, 189, 210, 141, 34, 190, 60, 9, 33, 189, 87, 138, 137, 61, 108, 211, 48, 190, 190, 173, 210, 189, 178, 188, 25, 190, 201, 182, 162, 61, 76, 77, 13, 62, 252, 225, 25, 190, 146, 138, 232, 61, 183, 30, 179, 61, 225, 80, 38, 190, 7, 22, 154, 60, 49, 212, 29, 62, 238, 147, 225, 61, 5, 111, 208, 61, 83, 253, 10, 61, 193, 114, 6, 61, 154, 33, 46, 190, 165, 156, 170, 61, 54, 251, 8, 190, 234, 202, 1, 190, 235, 206, 85, 61, 242, 136, 192, 189, 246, 150, 115, 189, 123, 231, 125, 62, 192, 74, 85, 61, 173, 24, 0, 189, 21, 178, 28, 189, 131, 74, 248, 60, 246, 251, 162, 61, 40, 222, 47, 61, 187, 104, 253, 62, 158, 213, 108, 62, 116, 165, 16, 190, 200, 217, 197, 189, 111, 27, 145, 62, 192, 223, 108, 60, 194, 13, 43, 62, 145, 216, 95, 190, 118, 242, 30, 62, 176, 208, 241, 61, 15, 42, 123, 190, 150, 102, 107, 61, 23, 117, 35, 62, 2, 37, 5, 190, 27, 148, 222, 187, 121, 154, 35, 61, 238, 89, 97, 62, 194, 130, 48, 62, 52, 213, 99, 189, 112, 163, 73, 62, 116, 205, 154, 189, 207, 7, 250, 189, 50, 99, 225, 61, 33, 111, 130, 190, 141, 142, 20, 59, 135, 213, 161, 190, 227, 58, 198, 60, 245, 117, 89, 190, 166, 6, 208, 61, 191, 77, 58, 190, 193, 36, 212, 190, 226, 89, 217, 189, 178, 85, 182, 61, 18, 26, 243, 60, 8, 5, 5, 62, 210, 180, 166, 62, 23, 160, 61, 191, 50, 119, 1, 190, 38, 241, 47, 62, 218, 167, 157, 61, 63, 117, 119, 62, 188, 237, 12, 62, 189, 156, 205, 61, 156, 235, 5, 190, 207, 104, 159, 190, 103, 125, 101, 60, 190, 101, 26, 62, 225, 235, 100, 61, 17, 193, 218, 61, 31, 142, 10, 190, 112, 43, 122, 62, 93, 196, 70, 62, 187, 163, 113, 188, 15, 108, 37, 189, 190, 97, 201, 57, 45, 227, 1, 62, 159, 109, 160, 189, 134, 157, 196, 59, 225, 230, 38, 188, 39, 5, 67, 62, 138, 18, 213, 189, 237, 57, 213, 189, 126, 177, 25, 62, 71, 159, 76, 61, 218, 177, 18, 190, 244, 244, 67, 60, 99, 166, 199, 61, 102, 82, 37, 190, 103, 201, 12, 62, 28, 106, 43, 190, 239, 146, 159, 61, 198, 42, 85, 61, 48, 147, 74, 190, 205, 245, 110, 189, 223, 200, 168, 61, 31, 58, 118, 61, 41, 105, 24, 189, 231, 209, 26, 62, 214, 204, 201, 189, 141, 224, 4, 59, 1, 114, 48, 62, 245, 106, 154, 189, 111, 83, 234, 189, 99, 64, 170, 61, 104, 132, 215, 189, 193, 242, 80, 62, 111, 219, 48, 190, 41, 47, 236, 189, 179, 198, 225, 189, 213, 53, 134, 61, 173, 125, 171, 61, 85, 232, 23, 190, 80, 163, 151, 188, 165, 139, 105, 187, 137, 127, 19, 190, 142, 105, 245, 61, 166, 110, 159, 189, 58, 101, 221, 61, 58, 49, 61, 189, 209, 86, 175, 61, 11, 156, 238, 189, 16, 253, 26, 62, 84, 74, 101, 189, 206, 12, 231, 189, 112, 87, 40, 60, 199, 120, 25, 190, 142, 82, 250, 61, 193, 125, 12, 62, 126, 213, 235, 58, 118, 137, 62, 189, 216, 135, 242, 189, 23, 156, 41, 62, 59, 175, 126, 189, 89, 172, 221, 189, 142, 196, 25, 190, 121, 194, 222, 187, 254, 214, 161, 189, 132, 121, 224, 61, 39, 107, 240, 61, 136, 96, 182, 189, 222, 205, 132, 60, 12, 19, 144, 61, 94, 166, 248, 185, 130, 195, 135, 62, 142, 1, 78, 61, 43, 153, 88, 61, 147, 69, 109, 62, 140, 59, 17, 62, 228, 35, 104, 62, 154, 0, 208, 60, 104, 32, 171, 190, 255, 145, 213, 61, 120, 165, 193, 62, 120, 180, 187, 189, 70, 10, 18, 190, 223, 59, 162, 190, 248, 71, 229, 61, 73, 175, 161, 189, 100, 144, 193, 189, 152, 111, 173, 188, 23, 245, 104, 61, 15, 142, 86, 190, 233, 85, 154, 189, 49, 122, 198, 188, 185, 31, 203, 61, 21, 164, 38, 62, 128, 227, 26, 62, 201, 160, 56, 62, 253, 227, 176, 61, 179, 94, 120, 190, 47, 43, 36, 62, 207, 130, 151, 61, 170, 190, 35, 190, 233, 249, 173, 189, 115, 62, 193, 189, 148, 168, 19, 61, 239, 204, 221, 189, 140, 193, 45, 62, 38, 24, 230, 61, 226, 68, 146, 61, 254, 252, 64, 61, 203, 19, 226, 189, 37, 237, 9, 62, 243, 69, 170, 187, 108, 163, 163, 188, 174, 154, 136, 189, 214, 53, 84, 61, 209, 240, 197, 60, 1, 201, 5, 190, 56, 87, 187, 61, 29, 82, 179, 61, 0, 249, 224, 61, 32, 183, 11, 190, 34, 122, 254, 61, 24, 215, 165, 189, 146, 23, 238, 189, 61, 255, 247, 189, 187, 119, 20, 190, 7, 33, 252, 189, 107, 178, 231, 189, 18, 208, 30, 189, 53, 47, 205, 60, 32, 180, 52, 188, 224, 217, 176, 188, 31, 189, 148, 189, 254, 75, 126, 61, 31, 186, 115, 189, 139, 4, 39, 188, 190, 231, 76, 62, 20, 122, 34, 189, 91, 53, 8, 62, 18, 194, 143, 188, 100, 169, 110, 190, 139, 161, 198, 61, 150, 218, 146, 61, 64, 106, 88, 62, 71, 199, 128, 190, 241, 85, 89, 61, 104, 137, 9, 62, 55, 250, 26, 187, 21, 89, 181, 61, 205, 117, 122, 61, 162, 152, 223, 189, 14, 21, 27, 190, 212, 240, 30, 62, 122, 31, 185, 188, 216, 76, 38, 188, 124, 11, 35, 61, 197, 181, 18, 190, 134, 131, 81, 190, 89, 207, 133, 189, 10, 90, 145, 187, 87, 214, 205, 187, 84, 77, 81, 189, 201, 159, 128, 61, 246, 64, 57, 61, 91, 190, 45, 61, 111, 218, 186, 188, 13, 32, 255, 61, 254, 18, 95, 62, 195, 155, 43, 62, 61, 242, 97, 189, 164, 97, 134, 61, 141, 8, 6, 62, 138, 218, 12, 62, 131, 205, 124, 62, 230, 216, 142, 190, 145, 9, 141, 189, 213, 186, 244, 61, 63, 63, 27, 62, 161, 156, 37, 62, 159, 253, 155, 190, 19, 156, 19, 190, 19, 174, 181, 189, 32, 66, 77, 189, 10, 118, 186, 189, 161, 247, 25, 61, 125, 5, 122, 190, 71, 180, 42, 62, 255, 221, 25, 62, 172, 119, 136, 62, 45, 132, 59, 62, 108, 65, 220, 61, 0, 103, 180, 60, 222, 48, 144, 61, 56, 209, 105, 189, 87, 100, 94, 189, 127, 85, 230, 189, 13, 74, 77, 188, 199, 228, 60, 62, 54, 34, 89, 62, 31, 229, 16, 62, 212, 254, 182, 60, 149, 21, 74, 190, 151, 132, 29, 62, 196, 26, 41, 190, 102, 10, 170, 61, 156, 0, 24, 62, 175, 169, 241, 60, 95, 137, 41, 190, 30, 131, 120, 62, 109, 162, 153, 61, 121, 98, 139, 190, 84, 149, 248, 188, 133, 34, 203, 189, 32, 145, 46, 190, 223, 15, 161, 189, 44, 10, 12, 189, 130, 235, 115, 61, 222, 204, 145, 61, 75, 231, 135, 62, 151, 127, 158, 61, 33, 113, 142, 62, 150, 212, 111, 189, 162, 91, 30, 190, 90, 55, 6, 61, 241, 252, 101, 62, 166, 247, 145, 190, 95, 193, 42, 189, 58, 0, 251, 61, 108, 82, 68, 189, 114, 41, 241, 60, 62, 126, 39, 190, 79, 166, 174, 61, 61, 96, 39, 62, 247, 254, 147, 61, 9, 236, 234, 61, 119, 80, 214, 61, 128, 140, 223, 188, 124, 172, 213, 189, 232, 241, 165, 61, 236, 229, 119, 61, 88, 226, 157, 190, 148, 111, 194, 61, 49, 53, 19, 61, 89, 163, 63, 190, 114, 147, 29, 62, 69, 89, 134, 62, 118, 150, 163, 189, 255, 12, 196, 61, 147, 194, 60, 61, 211, 175, 198, 188, 2, 79, 246, 60, 25, 250, 12, 190, 247, 219, 110, 189, 227, 9, 108, 190, 204, 108, 62, 62, 239, 198, 24, 60, 211, 140, 55, 190, 113, 12, 223, 189, 24, 98, 180, 61, 251, 232, 111, 190, 85, 34, 91, 62, 183, 103, 213, 190, 199, 187, 55, 188, 244, 237, 136, 190, 88, 102, 54, 62, 127, 232, 112, 189, 122, 71, 255, 190, 228, 15, 102, 189, 191, 61, 41, 189, 0, 23, 230, 61, 10, 163, 198, 189, 72, 153, 122, 188, 224, 198, 212, 190, 185, 46, 193, 190, 236, 45, 40, 62, 131, 43, 50, 60, 93, 237, 23, 62, 134, 232, 179, 189, 108, 174, 196, 61, 160, 7, 8, 190, 187, 110, 10, 190, 76, 131, 16, 62, 134, 207, 120, 60, 169, 120, 244, 61, 221, 244, 11, 190, 132, 92, 154, 190, 153, 78, 101, 61, 238, 104, 3, 191, 217, 133, 35, 61, 85, 36, 15, 190, 39, 134, 25, 190, 227, 238, 75, 189, 61, 8, 142, 189, 101, 97, 11, 190, 114, 124, 226, 61, 13, 111, 204, 60, 95, 222, 193, 189, 237, 177, 139, 186, 169, 222, 214, 61, 245, 163, 37, 62, 182, 109, 229, 189, 53, 71, 199, 189, 44, 241, 238, 61, 68, 138, 164, 189, 202, 68, 208, 188, 152, 221, 3, 187, 89, 221, 198, 188, 204, 110, 207, 61, 2, 55, 206, 187, 248, 22, 87, 61, 38, 53, 232, 189, 36, 9, 254, 60, 136, 204, 229, 60, 43, 134, 190, 189, 42, 79, 6, 190, 142, 110, 193, 188, 254, 246, 46, 190, 117, 131, 128, 189, 51, 103, 247, 186, 192, 188, 143, 61, 100, 224, 54, 60, 229, 69, 29, 190, 73, 169, 140, 189, 253, 67, 20, 60, 108, 98, 134, 61, 156, 96, 202, 61, 226, 135, 51, 190, 215, 181, 15, 190, 45, 52, 51, 190, 40, 216, 157, 189, 147, 11, 129, 61, 116, 66, 251, 61, 149, 86, 73, 61, 247, 81, 223, 189, 195, 93, 9, 62, 48, 121, 184, 187, 51, 128, 9, 62, 238, 250, 165, 61, 48, 131, 240, 189, 205, 240, 230, 61, 183, 233, 51, 190, 9, 212, 71, 189, 94, 235, 114, 189, 122, 12, 199, 189, 76, 254, 174, 189, 14, 28, 50, 61, 223, 253, 24, 61, 167, 251, 19, 190, 89, 86, 92, 61, 237, 211, 138, 61, 85, 9, 23, 62, 153, 99, 17, 190, 46, 192, 26, 190, 0, 101, 20, 188, 81, 246, 41, 62, 171, 200, 14, 61, 54, 191, 190, 189, 181, 119, 152, 60, 8, 66, 18, 62, 94, 201, 55, 61, 167, 173, 162, 61, 67, 6, 214, 58, 22, 143, 44, 189, 38, 47, 145, 61, 19, 154, 225, 189, 187, 159, 123, 189, 139, 93, 53, 62, 165, 229, 86, 189, 53, 53, 136, 188, 239, 246, 245, 59, 122, 240, 55, 60, 231, 6, 220, 189, 14, 36, 187, 61, 188, 108, 24, 62, 156, 69, 14, 190, 116, 116, 147, 60, 214, 8, 31, 62, 121, 203, 38, 187, 82, 211, 97, 190, 226, 40, 37, 190, 69, 36, 198, 61, 201, 212, 18, 62, 43, 152, 42, 190, 61, 1, 144, 61, 10, 36, 176, 189, 141, 235, 219, 61, 2, 231, 28, 62, 17, 129, 105, 189, 141, 194, 212, 60, 52, 127, 139, 187, 96, 122, 221, 189, 112, 217, 167, 189, 25, 71, 157, 61, 151, 109, 49, 61, 101, 204, 214, 61, 208, 180, 56, 61, 94, 146, 203, 60, 76, 244, 242, 189, 57, 162, 91, 61, 85, 43, 142, 189, 170, 66, 24, 62, 53, 97, 177, 61, 156, 11, 4, 189, 93, 77, 51, 190, 98, 87, 141, 188, 94, 140, 119, 189, 92, 78, 77, 61, 164, 233, 148, 189, 17, 88, 158, 189, 252, 51, 62, 62, 15, 227, 13, 61, 137, 173, 61, 190, 67, 140, 147, 62, 190, 48, 36, 189, 102, 152, 217, 61, 198, 196, 121, 62, 47, 6, 9, 60, 231, 113, 209, 61, 98, 99, 242, 61, 219, 123, 161, 61, 202, 197, 14, 62, 150, 95, 12, 62, 136, 166, 73, 190, 174, 132, 207, 58, 149, 209, 207, 190, 132, 114, 41, 60, 56, 218, 55, 189, 1, 252, 10, 190, 120, 47, 184, 62, 248, 92, 16, 62, 227, 172, 89, 190, 50, 244, 52, 190, 197, 164, 36, 62, 12, 46, 75, 190, 88, 166, 190, 189, 228, 227, 186, 61, 2, 164, 43, 62, 213, 181, 150, 61, 93, 40, 6, 188, 131, 49, 115, 189, 103, 212, 34, 62, 204, 242, 180, 61, 37, 174, 182, 61, 215, 66, 110, 62, 108, 22, 4, 62, 52, 129, 56, 59, 249, 234, 7, 191, 11, 64, 149, 61, 158, 90, 132, 62, 37, 191, 109, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 17, 239, 61, 161, 65, 206, 61, 44, 111, 5, 62, 79, 40, 7, 188, 236, 162, 239, 189, 1, 72, 194, 189, 55, 77, 33, 190, 98, 46, 70, 189, 65, 1, 68, 61, 104, 191, 210, 187, 82, 73, 59, 62, 38, 247, 245, 188, 176, 33, 25, 190, 95, 39, 45, 190, 113, 217, 102, 61, 225, 19, 153, 188, 151, 53, 106, 62, 216, 128, 178, 62, 233, 206, 100, 189, 81, 22, 63, 189, 145, 77, 138, 62, 205, 214, 8, 62, 31, 137, 241, 189, 42, 4, 231, 59, 93, 250, 204, 61, 157, 16, 247, 61, 39, 140, 35, 62, 0, 132, 44, 190, 251, 116, 154, 189, 132, 84, 166, 61, 55, 96, 80, 62, 51, 206, 251, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 92, 10, 191, 95, 36, 118, 60, 253, 192, 99, 62, 241, 15, 122, 190, 241, 208, 17, 61, 138, 187, 163, 61, 58, 61, 4, 190, 190, 169, 71, 190, 127, 100, 128, 190, 15, 36, 34, 190, 106, 232, 95, 190, 245, 159, 108, 62, 212, 12, 109, 61, 201, 70, 70, 62, 192, 134, 86, 60, 154, 145, 190, 189, 119, 71, 213, 61, 32, 125, 226, 190, 199, 151, 87, 190, 12, 97, 29, 62, 19, 86, 132, 62, 159, 76, 0, 190, 246, 135, 23, 190, 51, 188, 110, 62, 102, 26, 140, 62, 64, 35, 56, 190, 233, 184, 147, 190, 200, 8, 14, 190, 145, 60, 22, 190, 174, 151, 50, 190, 189, 200, 160, 188, 53, 44, 10, 62, 140, 226, 0, 62, 165, 29, 104, 190, 110, 225, 28, 62, 131, 92, 143, 190, 128, 74, 10, 190, 40, 94, 196, 187, 221, 115, 11, 62, 196, 151, 128, 62, 141, 218, 199, 61, 5, 196, 109, 61, 13, 196, 140, 190, 200, 20, 51, 61, 43, 205, 46, 189, 89, 150, 27, 61, 119, 132, 230, 61, 251, 249, 145, 61, 84, 237, 100, 190, 198, 145, 99, 190, 129, 190, 145, 189, 146, 234, 34, 62, 98, 227, 84, 190, 40, 84, 228, 60, 144, 227, 0, 190, 116, 74, 48, 190, 81, 32, 217, 189, 83, 140, 102, 190, 105, 158, 178, 60, 47, 12, 120, 189, 116, 125, 29, 62, 249, 217, 43, 189, 215, 210, 57, 190, 91, 5, 243, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 69, 31, 189, 71, 226, 133, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {51, 238, 191, 63, 183, 127, 29, 62, 28, 167, 74, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {66, 228, 19, 191, 193, 87, 196, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0074/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}