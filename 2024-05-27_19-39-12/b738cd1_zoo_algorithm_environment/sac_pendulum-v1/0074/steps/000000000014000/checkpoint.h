// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 217, 207, 62, 203, 102, 16, 62, 20, 8, 236, 188, 243, 212, 170, 62, 147, 66, 102, 63, 228, 207, 227, 62, 66, 129, 139, 191, 115, 58, 131, 63, 241, 41, 172, 62, 255, 111, 234, 60, 232, 174, 33, 62, 138, 75, 47, 63, 194, 80, 73, 190, 171, 224, 0, 190, 241, 248, 0, 191, 184, 86, 43, 190, 173, 149, 72, 63, 120, 169, 34, 63, 65, 58, 88, 190, 237, 246, 157, 190, 158, 60, 59, 191, 86, 5, 33, 63, 187, 235, 18, 191, 48, 182, 106, 190, 232, 173, 59, 62, 89, 81, 212, 62, 26, 90, 2, 63, 64, 161, 48, 63, 120, 210, 25, 191, 227, 16, 240, 189, 63, 247, 69, 63, 183, 143, 39, 191, 91, 33, 92, 62, 227, 211, 189, 190, 183, 164, 24, 191, 85, 36, 26, 190, 30, 21, 3, 63, 230, 44, 53, 63, 182, 124, 243, 62, 218, 8, 201, 62, 119, 252, 37, 63, 46, 35, 247, 189, 114, 29, 200, 188, 21, 171, 127, 191, 253, 63, 153, 62, 125, 220, 210, 62, 155, 14, 193, 63, 172, 27, 233, 62, 225, 46, 36, 191, 61, 31, 126, 63, 23, 130, 118, 62, 114, 173, 11, 63, 101, 104, 151, 63, 46, 163, 238, 62, 37, 220, 126, 190, 192, 61, 209, 62, 91, 43, 187, 186, 98, 229, 229, 62, 213, 65, 224, 61, 218, 188, 241, 62, 105, 178, 137, 61, 250, 189, 177, 190, 136, 184, 232, 61, 25, 248, 193, 188, 86, 242, 122, 191, 105, 60, 151, 190, 55, 100, 11, 63, 24, 89, 223, 61, 124, 157, 57, 63, 42, 137, 35, 63, 22, 160, 162, 189, 107, 162, 42, 190, 212, 74, 80, 191, 4, 215, 84, 191, 179, 43, 74, 190, 83, 247, 29, 191, 65, 31, 138, 62, 33, 124, 144, 189, 98, 205, 248, 62, 252, 191, 130, 191, 142, 21, 186, 189, 201, 168, 148, 190, 117, 57, 160, 190, 170, 191, 8, 191, 242, 24, 234, 61, 101, 122, 84, 189, 17, 76, 254, 190, 163, 122, 204, 62, 56, 170, 103, 63, 1, 238, 200, 62, 101, 27, 126, 190, 139, 117, 218, 191, 54, 46, 75, 190, 108, 199, 69, 62, 163, 162, 181, 190, 97, 76, 37, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 182, 33, 191, 245, 113, 95, 62, 166, 108, 9, 63, 226, 198, 158, 190, 223, 249, 135, 189, 160, 105, 10, 190, 216, 255, 156, 61, 216, 16, 56, 191, 135, 143, 147, 188, 207, 225, 56, 188, 192, 140, 89, 187, 217, 187, 16, 63, 36, 42, 142, 60, 51, 215, 167, 62, 133, 13, 108, 190, 91, 250, 184, 62, 112, 45, 22, 63, 48, 194, 15, 191, 69, 137, 238, 62, 144, 247, 52, 62, 59, 65, 62, 191, 211, 157, 133, 190, 81, 166, 196, 61, 57, 224, 6, 191, 206, 238, 18, 63, 133, 208, 194, 190, 218, 74, 6, 62, 104, 26, 182, 190, 42, 65, 173, 62, 185, 250, 68, 62, 128, 231, 194, 62, 11, 138, 1, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 107, 228, 61, 171, 126, 120, 190, 127, 58, 250, 61, 84, 206, 177, 191, 241, 154, 183, 190, 23, 153, 133, 191, 236, 158, 39, 189, 153, 201, 197, 190, 169, 251, 115, 191, 117, 185, 50, 191, 10, 155, 192, 190, 25, 2, 152, 189, 101, 229, 31, 63, 30, 9, 94, 62, 90, 234, 251, 190, 60, 135, 23, 62, 32, 37, 74, 62, 245, 70, 223, 62, 144, 30, 135, 61, 181, 96, 227, 62, 185, 178, 156, 60, 145, 239, 8, 191, 39, 150, 177, 190, 157, 55, 21, 191, 54, 172, 102, 62, 121, 121, 107, 62, 226, 33, 44, 191, 66, 138, 17, 191, 28, 194, 61, 62, 66, 109, 148, 61, 57, 251, 166, 62, 170, 196, 94, 60, 17, 1, 242, 189, 139, 216, 237, 188, 76, 183, 72, 190, 237, 131, 102, 61, 227, 92, 143, 62, 25, 155, 120, 61, 236, 122, 66, 190, 51, 105, 68, 191, 221, 200, 247, 61, 3, 199, 101, 62, 217, 129, 201, 62, 125, 201, 2, 191, 69, 120, 2, 190, 162, 122, 127, 62, 212, 48, 76, 62, 209, 255, 122, 188, 162, 20, 45, 189, 64, 205, 218, 190, 148, 107, 163, 189, 113, 98, 72, 62, 229, 135, 19, 62, 89, 36, 7, 191, 234, 177, 75, 62, 133, 20, 13, 61, 51, 110, 125, 190, 115, 202, 219, 190, 96, 74, 38, 62, 186, 197, 151, 189, 249, 118, 241, 60, 217, 1, 158, 62, 204, 68, 220, 190, 59, 142, 112, 189, 106, 230, 122, 61, 17, 135, 179, 61, 246, 191, 27, 62, 65, 164, 154, 62, 226, 250, 131, 62, 170, 183, 57, 62, 195, 53, 188, 189, 109, 147, 129, 62, 97, 168, 164, 62, 52, 8, 218, 62, 154, 28, 155, 61, 227, 179, 30, 60, 62, 169, 5, 191, 131, 88, 83, 189, 203, 5, 186, 62, 190, 179, 223, 190, 230, 221, 251, 61, 106, 239, 82, 191, 230, 123, 36, 62, 92, 136, 35, 191, 93, 54, 93, 190, 220, 28, 162, 190, 129, 243, 193, 62, 153, 218, 240, 62, 37, 122, 152, 61, 241, 252, 40, 62, 218, 248, 143, 190, 107, 136, 173, 62, 71, 170, 46, 189, 44, 55, 166, 190, 123, 108, 140, 190, 194, 62, 226, 190, 181, 213, 36, 62, 144, 206, 89, 191, 207, 148, 23, 62, 164, 77, 43, 191, 255, 235, 59, 61, 124, 65, 167, 191, 50, 113, 106, 62, 186, 74, 197, 190, 25, 226, 150, 191, 65, 204, 166, 189, 62, 21, 13, 191, 130, 87, 137, 62, 25, 0, 68, 190, 30, 85, 248, 61, 122, 133, 98, 191, 215, 78, 10, 190, 28, 137, 19, 61, 57, 201, 123, 189, 146, 120, 6, 61, 132, 69, 34, 190, 9, 11, 100, 190, 15, 102, 93, 190, 238, 231, 181, 190, 55, 232, 137, 191, 86, 212, 188, 61, 78, 244, 101, 62, 108, 215, 220, 61, 53, 74, 33, 190, 66, 186, 154, 188, 236, 191, 80, 190, 105, 32, 187, 62, 104, 17, 197, 186, 95, 47, 251, 189, 11, 4, 20, 190, 148, 214, 5, 190, 73, 141, 144, 189, 104, 69, 204, 189, 100, 238, 38, 190, 29, 57, 47, 190, 50, 55, 24, 190, 162, 236, 244, 189, 130, 242, 254, 188, 25, 43, 29, 190, 113, 248, 188, 189, 212, 169, 223, 189, 92, 103, 21, 62, 170, 233, 142, 189, 61, 52, 170, 189, 37, 231, 209, 61, 22, 149, 133, 61, 42, 246, 244, 189, 242, 191, 137, 60, 131, 127, 252, 61, 227, 242, 35, 189, 252, 184, 175, 61, 155, 222, 141, 189, 203, 254, 237, 187, 118, 132, 192, 189, 122, 157, 2, 62, 140, 151, 25, 190, 2, 106, 169, 189, 18, 47, 7, 190, 28, 212, 238, 61, 173, 134, 18, 190, 238, 0, 231, 59, 109, 71, 78, 188, 129, 161, 98, 191, 13, 47, 135, 187, 30, 219, 26, 190, 151, 180, 30, 190, 243, 32, 242, 189, 254, 52, 73, 60, 232, 2, 36, 185, 147, 175, 218, 62, 237, 255, 136, 62, 138, 220, 143, 62, 106, 156, 91, 190, 69, 73, 104, 62, 101, 158, 24, 188, 222, 229, 159, 188, 3, 177, 135, 191, 217, 83, 164, 191, 158, 221, 146, 189, 4, 183, 132, 189, 181, 241, 69, 62, 42, 50, 138, 190, 67, 195, 10, 61, 97, 229, 129, 189, 68, 58, 159, 61, 124, 146, 252, 190, 241, 192, 5, 63, 156, 105, 42, 190, 36, 195, 127, 61, 212, 243, 12, 62, 120, 121, 236, 61, 211, 120, 145, 62, 205, 100, 11, 190, 65, 162, 249, 61, 201, 237, 144, 188, 253, 134, 125, 62, 251, 222, 218, 61, 3, 31, 69, 62, 41, 245, 169, 189, 251, 24, 213, 62, 233, 231, 87, 61, 184, 91, 238, 62, 131, 31, 191, 62, 223, 29, 142, 189, 140, 57, 58, 190, 11, 71, 116, 190, 72, 35, 104, 62, 64, 78, 162, 189, 36, 44, 175, 60, 94, 58, 86, 189, 10, 146, 67, 188, 150, 148, 238, 187, 159, 50, 177, 61, 12, 98, 116, 61, 14, 188, 245, 61, 178, 241, 15, 63, 162, 102, 51, 190, 75, 121, 125, 190, 142, 90, 137, 62, 28, 101, 114, 62, 247, 131, 69, 190, 168, 45, 86, 189, 242, 136, 174, 188, 234, 253, 11, 188, 132, 163, 211, 189, 145, 101, 145, 191, 19, 66, 133, 62, 81, 110, 81, 191, 141, 156, 59, 60, 206, 206, 129, 191, 100, 86, 192, 61, 220, 5, 50, 191, 158, 252, 117, 191, 249, 223, 245, 189, 133, 15, 64, 190, 51, 209, 150, 189, 115, 146, 180, 62, 83, 124, 50, 62, 146, 117, 176, 190, 221, 139, 122, 191, 235, 62, 81, 62, 197, 103, 84, 62, 219, 139, 7, 63, 85, 153, 217, 61, 52, 59, 72, 189, 251, 102, 27, 191, 222, 83, 169, 190, 32, 250, 129, 190, 75, 111, 35, 62, 81, 245, 184, 189, 3, 172, 231, 190, 40, 108, 225, 188, 252, 179, 23, 190, 117, 242, 20, 61, 102, 83, 161, 62, 157, 133, 216, 190, 230, 80, 52, 188, 133, 8, 39, 190, 153, 56, 210, 62, 34, 189, 251, 61, 62, 11, 112, 190, 43, 95, 77, 61, 75, 39, 247, 190, 92, 224, 2, 62, 190, 64, 10, 189, 190, 82, 176, 61, 61, 11, 144, 62, 22, 189, 64, 189, 140, 144, 59, 191, 66, 122, 22, 191, 80, 227, 3, 63, 190, 45, 88, 191, 96, 233, 238, 59, 191, 33, 226, 189, 198, 234, 187, 61, 140, 237, 122, 190, 237, 69, 13, 190, 167, 197, 177, 60, 86, 86, 1, 190, 109, 134, 89, 189, 234, 234, 72, 190, 225, 148, 114, 190, 236, 79, 228, 61, 222, 164, 145, 190, 231, 227, 62, 190, 127, 129, 86, 190, 84, 217, 72, 62, 59, 131, 240, 189, 134, 10, 158, 188, 40, 154, 209, 189, 127, 168, 146, 190, 74, 151, 13, 191, 246, 176, 11, 190, 110, 225, 203, 190, 42, 10, 21, 62, 206, 49, 45, 191, 39, 43, 178, 60, 191, 22, 138, 190, 19, 172, 232, 190, 30, 155, 138, 188, 222, 22, 165, 62, 43, 171, 164, 61, 86, 123, 50, 191, 112, 157, 9, 62, 39, 234, 150, 62, 119, 129, 86, 62, 132, 8, 106, 189, 103, 8, 131, 62, 211, 245, 28, 190, 168, 244, 240, 190, 25, 138, 213, 60, 39, 170, 151, 191, 189, 115, 61, 62, 96, 121, 162, 61, 123, 146, 189, 190, 59, 131, 97, 189, 254, 249, 150, 62, 32, 23, 191, 62, 213, 109, 157, 62, 76, 28, 225, 60, 77, 60, 231, 61, 15, 87, 250, 189, 130, 26, 1, 190, 113, 21, 22, 191, 244, 80, 63, 190, 221, 195, 228, 190, 116, 135, 136, 62, 31, 193, 99, 190, 225, 163, 77, 190, 43, 118, 18, 62, 197, 25, 61, 62, 192, 94, 244, 60, 96, 18, 46, 190, 164, 159, 209, 61, 182, 206, 140, 190, 132, 184, 63, 62, 115, 253, 110, 189, 216, 239, 208, 190, 203, 212, 86, 61, 247, 32, 133, 60, 207, 14, 17, 62, 185, 104, 210, 188, 3, 179, 153, 190, 148, 224, 16, 191, 110, 238, 116, 190, 111, 61, 6, 190, 126, 121, 64, 62, 129, 215, 135, 190, 242, 60, 99, 62, 215, 1, 158, 62, 136, 41, 71, 62, 174, 12, 79, 191, 169, 76, 27, 189, 141, 250, 45, 189, 77, 106, 133, 62, 135, 107, 74, 62, 137, 62, 136, 190, 78, 43, 22, 62, 74, 57, 163, 191, 51, 165, 54, 62, 203, 92, 60, 61, 52, 43, 25, 63, 245, 185, 182, 61, 23, 203, 150, 62, 46, 196, 126, 60, 137, 9, 111, 191, 78, 37, 140, 62, 230, 123, 9, 62, 57, 147, 129, 62, 107, 174, 0, 189, 237, 139, 151, 61, 79, 223, 69, 190, 38, 21, 202, 190, 9, 134, 120, 191, 104, 192, 165, 61, 198, 63, 27, 190, 99, 99, 252, 61, 126, 204, 187, 61, 62, 116, 61, 62, 237, 4, 147, 190, 237, 239, 170, 191, 165, 43, 144, 61, 240, 44, 190, 61, 239, 177, 0, 62, 144, 33, 153, 189, 235, 218, 127, 190, 57, 86, 49, 62, 25, 57, 145, 190, 63, 55, 240, 189, 235, 90, 179, 189, 194, 16, 87, 190, 17, 204, 255, 61, 136, 98, 204, 190, 217, 69, 138, 189, 58, 8, 160, 190, 33, 212, 1, 190, 107, 136, 111, 191, 7, 146, 55, 61, 77, 66, 156, 190, 32, 243, 137, 61, 230, 93, 117, 62, 179, 38, 39, 191, 28, 53, 17, 62, 226, 37, 28, 191, 246, 181, 59, 190, 211, 235, 196, 189, 234, 229, 227, 190, 203, 38, 22, 189, 86, 52, 6, 62, 104, 149, 142, 62, 75, 4, 251, 189, 231, 129, 163, 190, 76, 127, 248, 190, 86, 208, 227, 190, 195, 104, 148, 191, 143, 125, 161, 190, 194, 56, 3, 190, 199, 1, 154, 190, 113, 126, 2, 191, 165, 214, 8, 62, 26, 160, 0, 61, 184, 202, 244, 61, 52, 68, 93, 62, 187, 174, 158, 61, 189, 208, 45, 61, 9, 202, 30, 62, 230, 194, 95, 62, 243, 252, 15, 62, 148, 241, 184, 190, 226, 157, 11, 190, 226, 53, 72, 62, 208, 179, 228, 190, 185, 236, 144, 191, 231, 7, 55, 191, 226, 157, 15, 191, 0, 220, 34, 62, 73, 195, 139, 189, 41, 184, 162, 190, 46, 179, 146, 62, 123, 112, 62, 63, 241, 183, 67, 62, 217, 5, 72, 190, 19, 238, 79, 189, 122, 0, 243, 189, 244, 175, 6, 62, 218, 146, 240, 59, 215, 12, 137, 62, 59, 49, 106, 62, 63, 158, 30, 190, 217, 180, 165, 61, 68, 99, 40, 190, 12, 163, 238, 61, 175, 112, 188, 60, 6, 84, 115, 189, 146, 209, 95, 61, 152, 216, 248, 189, 82, 70, 219, 189, 210, 187, 15, 189, 209, 10, 51, 190, 247, 121, 80, 189, 223, 59, 96, 189, 18, 176, 148, 188, 0, 147, 202, 61, 108, 210, 111, 188, 233, 35, 86, 189, 186, 38, 182, 189, 42, 78, 212, 187, 24, 3, 136, 189, 206, 41, 13, 62, 99, 172, 18, 190, 27, 167, 223, 188, 108, 105, 67, 189, 112, 179, 172, 189, 144, 229, 69, 190, 221, 238, 189, 188, 19, 30, 139, 61, 187, 40, 254, 189, 23, 121, 82, 189, 225, 110, 197, 189, 226, 117, 238, 189, 24, 54, 157, 189, 34, 110, 185, 189, 165, 45, 16, 189, 195, 56, 155, 189, 124, 63, 55, 61, 92, 77, 35, 61, 54, 167, 220, 189, 53, 162, 186, 189, 38, 61, 17, 190, 198, 28, 172, 189, 171, 32, 34, 190, 192, 13, 60, 189, 160, 141, 93, 61, 124, 144, 73, 190, 141, 231, 223, 189, 208, 167, 56, 190, 193, 78, 139, 61, 76, 77, 13, 62, 13, 96, 44, 190, 69, 80, 193, 61, 61, 206, 174, 61, 164, 99, 37, 190, 77, 4, 51, 60, 49, 212, 29, 62, 158, 251, 209, 61, 200, 167, 159, 61, 88, 249, 12, 61, 42, 245, 208, 60, 87, 233, 82, 190, 34, 162, 105, 61, 215, 233, 249, 189, 226, 206, 21, 190, 30, 243, 85, 61, 35, 96, 16, 189, 246, 157, 92, 60, 48, 223, 90, 62, 126, 239, 69, 190, 175, 61, 205, 59, 131, 52, 106, 190, 132, 42, 207, 60, 118, 6, 14, 61, 171, 204, 161, 61, 229, 178, 5, 63, 49, 180, 137, 62, 192, 121, 41, 190, 214, 18, 146, 189, 107, 234, 49, 62, 44, 98, 120, 61, 186, 240, 61, 62, 70, 137, 162, 190, 219, 33, 10, 62, 217, 30, 163, 61, 199, 71, 121, 190, 179, 113, 207, 61, 125, 129, 3, 62, 119, 220, 35, 190, 242, 190, 132, 61, 106, 40, 11, 189, 207, 43, 147, 62, 4, 29, 108, 189, 78, 13, 49, 190, 244, 242, 108, 62, 163, 19, 115, 188, 232, 13, 22, 190, 235, 247, 224, 61, 81, 130, 131, 191, 161, 27, 10, 189, 127, 95, 103, 191, 246, 178, 17, 189, 123, 100, 153, 191, 26, 102, 133, 61, 203, 23, 158, 190, 106, 178, 126, 191, 214, 162, 242, 190, 153, 208, 202, 190, 134, 90, 170, 188, 122, 211, 122, 61, 3, 110, 76, 61, 153, 151, 111, 191, 233, 55, 201, 190, 220, 134, 68, 62, 136, 151, 207, 61, 75, 239, 47, 61, 181, 145, 103, 185, 232, 65, 199, 61, 147, 112, 103, 189, 116, 114, 1, 191, 198, 17, 22, 191, 33, 129, 46, 62, 243, 232, 14, 61, 209, 135, 32, 190, 221, 227, 5, 190, 186, 111, 34, 62, 182, 142, 151, 189, 115, 192, 134, 61, 132, 100, 103, 188, 190, 97, 201, 57, 84, 150, 255, 61, 86, 171, 28, 190, 1, 211, 85, 61, 174, 64, 237, 190, 175, 113, 84, 62, 205, 132, 189, 190, 187, 81, 243, 190, 137, 19, 87, 62, 107, 3, 122, 61, 244, 122, 179, 62, 18, 31, 51, 190, 131, 208, 237, 61, 37, 49, 241, 59, 175, 213, 168, 62, 197, 47, 43, 190, 95, 34, 202, 189, 124, 120, 189, 61, 10, 151, 168, 190, 173, 196, 10, 60, 116, 57, 58, 62, 5, 52, 251, 62, 19, 12, 19, 61, 241, 115, 111, 62, 85, 7, 219, 190, 238, 119, 181, 190, 247, 180, 216, 62, 58, 0, 40, 191, 140, 99, 69, 190, 105, 240, 32, 62, 29, 250, 119, 60, 74, 229, 40, 62, 111, 219, 48, 190, 203, 198, 21, 188, 53, 74, 164, 190, 121, 207, 207, 61, 213, 153, 154, 62, 183, 113, 48, 190, 152, 84, 54, 62, 119, 229, 239, 189, 188, 171, 105, 189, 170, 254, 24, 190, 219, 11, 175, 62, 104, 5, 161, 191, 15, 12, 67, 62, 168, 30, 166, 61, 36, 255, 7, 188, 200, 226, 137, 62, 116, 164, 166, 190, 238, 25, 98, 62, 222, 43, 59, 190, 59, 200, 138, 61, 160, 227, 121, 62, 7, 167, 203, 61, 9, 239, 253, 61, 66, 228, 45, 190, 223, 134, 132, 191, 151, 217, 0, 191, 215, 243, 171, 190, 38, 29, 152, 190, 210, 124, 89, 61, 79, 217, 42, 62, 189, 22, 251, 190, 66, 45, 103, 62, 161, 155, 240, 61, 3, 102, 188, 189, 79, 116, 143, 189, 67, 40, 146, 61, 79, 109, 15, 58, 152, 193, 71, 62, 122, 185, 64, 61, 205, 51, 155, 61, 135, 76, 71, 62, 0, 85, 149, 62, 74, 29, 208, 62, 94, 219, 172, 61, 120, 109, 229, 190, 140, 82, 22, 62, 97, 52, 203, 62, 173, 186, 107, 190, 75, 177, 189, 190, 75, 36, 145, 191, 169, 93, 68, 62, 228, 122, 213, 189, 61, 56, 154, 59, 236, 44, 139, 190, 5, 153, 112, 61, 192, 95, 32, 62, 239, 4, 250, 186, 105, 51, 6, 61, 30, 237, 57, 62, 242, 239, 243, 61, 164, 236, 46, 62, 50, 172, 220, 61, 49, 17, 158, 60, 213, 7, 102, 190, 47, 43, 36, 62, 218, 138, 43, 61, 213, 113, 65, 190, 100, 141, 240, 189, 115, 62, 193, 189, 2, 26, 165, 59, 239, 204, 221, 189, 140, 193, 45, 62, 89, 202, 157, 61, 34, 173, 71, 61, 245, 122, 189, 60, 244, 231, 241, 189, 231, 117, 210, 61, 173, 122, 215, 188, 50, 0, 21, 189, 253, 99, 190, 189, 151, 24, 0, 61, 43, 200, 9, 188, 64, 176, 32, 190, 88, 99, 113, 61, 110, 147, 178, 61, 0, 249, 224, 61, 93, 246, 45, 190, 34, 122, 254, 61, 26, 19, 166, 189, 146, 23, 238, 189, 52, 255, 19, 190, 187, 119, 20, 190, 114, 126, 252, 189, 107, 16, 15, 190, 94, 93, 96, 189, 183, 86, 228, 187, 101, 205, 53, 188, 17, 248, 99, 190, 50, 21, 82, 191, 162, 87, 181, 190, 202, 188, 71, 189, 150, 162, 17, 191, 212, 180, 137, 62, 63, 142, 133, 191, 83, 125, 144, 188, 217, 132, 19, 62, 86, 249, 158, 59, 86, 19, 214, 61, 141, 254, 186, 61, 177, 243, 157, 62, 223, 153, 199, 190, 175, 22, 148, 61, 137, 6, 241, 189, 66, 104, 117, 190, 6, 76, 149, 61, 193, 141, 42, 62, 87, 208, 84, 190, 129, 250, 136, 191, 33, 16, 10, 62, 161, 171, 119, 190, 97, 78, 173, 190, 134, 187, 253, 61, 59, 2, 3, 59, 253, 143, 110, 190, 4, 69, 5, 60, 34, 17, 180, 61, 86, 191, 163, 61, 42, 112, 45, 191, 49, 200, 128, 61, 41, 131, 12, 61, 130, 158, 25, 61, 22, 137, 61, 189, 84, 172, 221, 61, 222, 234, 46, 62, 16, 246, 26, 62, 123, 241, 198, 189, 54, 144, 145, 60, 93, 41, 92, 62, 179, 47, 170, 62, 39, 135, 157, 62, 133, 96, 190, 190, 89, 96, 69, 61, 92, 195, 6, 62, 38, 96, 82, 61, 9, 244, 154, 61, 140, 77, 101, 191, 252, 152, 78, 188, 217, 108, 248, 189, 82, 64, 5, 189, 253, 52, 177, 190, 74, 61, 154, 60, 208, 37, 16, 61, 127, 129, 86, 62, 167, 89, 117, 62, 18, 124, 175, 62, 103, 133, 231, 61, 8, 97, 236, 61, 167, 208, 205, 188, 246, 6, 42, 58, 100, 8, 131, 189, 87, 100, 94, 189, 226, 185, 237, 60, 146, 86, 51, 62, 190, 202, 63, 62, 109, 72, 210, 189, 222, 152, 114, 62, 137, 154, 89, 190, 76, 166, 211, 190, 181, 219, 17, 62, 20, 125, 45, 190, 80, 74, 137, 189, 118, 227, 160, 62, 61, 109, 41, 61, 163, 220, 34, 189, 253, 156, 172, 61, 181, 71, 136, 62, 59, 122, 120, 60, 184, 232, 153, 188, 106, 212, 91, 62, 251, 208, 97, 190, 249, 126, 55, 190, 240, 216, 1, 190, 218, 84, 96, 61, 189, 124, 47, 62, 219, 68, 226, 62, 86, 60, 202, 61, 26, 132, 146, 62, 37, 162, 6, 191, 188, 41, 148, 190, 1, 230, 23, 62, 9, 183, 140, 62, 34, 118, 140, 190, 203, 18, 43, 189, 195, 46, 152, 189, 130, 51, 39, 191, 121, 226, 108, 190, 171, 226, 5, 190, 254, 242, 114, 190, 98, 232, 59, 62, 56, 126, 93, 191, 203, 51, 105, 189, 249, 67, 204, 62, 198, 160, 22, 62, 71, 64, 179, 190, 251, 219, 58, 61, 183, 158, 220, 61, 50, 210, 24, 191, 105, 51, 117, 61, 8, 182, 185, 190, 251, 39, 188, 190, 158, 141, 59, 61, 177, 128, 143, 62, 26, 23, 121, 190, 127, 251, 131, 191, 242, 122, 150, 59, 133, 142, 243, 188, 62, 202, 77, 191, 241, 199, 115, 190, 219, 56, 223, 61, 155, 177, 128, 190, 237, 125, 106, 62, 50, 93, 73, 61, 20, 126, 123, 190, 196, 129, 221, 190, 27, 0, 180, 61, 143, 158, 179, 191, 118, 196, 181, 62, 176, 167, 149, 191, 0, 223, 95, 189, 240, 250, 172, 191, 217, 149, 39, 62, 253, 238, 178, 61, 164, 0, 173, 191, 229, 168, 66, 62, 194, 15, 72, 189, 59, 14, 145, 62, 139, 124, 109, 190, 155, 197, 217, 190, 44, 190, 20, 190, 38, 134, 253, 191, 24, 56, 16, 62, 131, 43, 50, 60, 19, 7, 209, 189, 133, 77, 230, 62, 74, 6, 176, 61, 157, 12, 31, 61, 120, 61, 165, 190, 117, 57, 162, 190, 157, 188, 78, 62, 174, 112, 33, 62, 5, 165, 45, 61, 233, 124, 145, 190, 196, 10, 135, 60, 250, 88, 62, 191, 241, 166, 190, 62, 168, 177, 20, 190, 39, 134, 25, 190, 218, 192, 131, 189, 83, 103, 158, 189, 71, 178, 13, 190, 114, 124, 226, 61, 141, 161, 183, 60, 95, 222, 193, 189, 237, 177, 139, 186, 104, 234, 200, 61, 55, 83, 37, 62, 44, 124, 229, 189, 250, 185, 199, 189, 65, 61, 212, 61, 110, 9, 183, 189, 202, 68, 208, 188, 75, 9, 192, 188, 137, 252, 9, 189, 53, 0, 196, 61, 197, 144, 116, 188, 254, 94, 36, 61, 38, 53, 232, 189, 36, 9, 254, 60, 163, 20, 89, 60, 43, 134, 190, 189, 42, 79, 6, 190, 142, 110, 193, 188, 247, 73, 47, 190, 117, 131, 128, 189, 51, 103, 247, 186, 252, 202, 81, 61, 100, 224, 54, 60, 106, 11, 30, 190, 73, 169, 140, 189, 180, 181, 105, 188, 7, 203, 46, 61, 139, 5, 154, 61, 226, 135, 51, 190, 132, 51, 40, 190, 45, 52, 51, 190, 40, 216, 157, 189, 200, 220, 27, 61, 116, 66, 251, 61, 27, 64, 175, 60, 106, 38, 14, 190, 55, 231, 222, 61, 48, 121, 184, 187, 10, 155, 224, 61, 88, 145, 102, 61, 120, 232, 15, 190, 46, 239, 178, 61, 16, 206, 78, 190, 184, 202, 151, 189, 242, 190, 173, 189, 122, 12, 199, 189, 25, 103, 221, 189, 14, 28, 50, 61, 223, 253, 24, 61, 167, 251, 19, 190, 206, 90, 187, 60, 237, 211, 138, 61, 85, 9, 23, 62, 169, 186, 43, 190, 103, 89, 58, 190, 196, 8, 3, 189, 29, 225, 41, 62, 138, 239, 184, 59, 212, 125, 104, 190, 39, 145, 151, 59, 138, 172, 7, 62, 29, 173, 49, 188, 39, 13, 198, 60, 252, 250, 207, 190, 4, 96, 136, 189, 136, 227, 179, 62, 65, 128, 62, 62, 134, 105, 229, 190, 72, 188, 72, 62, 164, 227, 154, 62, 218, 4, 195, 60, 175, 251, 199, 61, 169, 22, 0, 190, 95, 159, 21, 190, 4, 162, 241, 61, 174, 187, 72, 62, 201, 183, 98, 188, 10, 195, 145, 191, 27, 18, 74, 62, 25, 158, 193, 61, 187, 212, 95, 191, 206, 135, 14, 191, 133, 215, 42, 62, 67, 154, 155, 189, 1, 24, 202, 189, 28, 53, 88, 62, 62, 16, 150, 190, 210, 119, 170, 61, 2, 231, 28, 62, 99, 156, 223, 190, 205, 116, 210, 60, 55, 71, 66, 190, 37, 159, 195, 189, 59, 154, 191, 189, 160, 139, 211, 61, 209, 147, 169, 191, 172, 234, 142, 190, 145, 156, 48, 189, 53, 219, 173, 189, 210, 114, 107, 189, 40, 155, 78, 189, 60, 89, 177, 61, 139, 154, 100, 190, 40, 21, 106, 61, 206, 2, 74, 189, 170, 226, 47, 191, 157, 145, 5, 62, 238, 185, 183, 189, 13, 159, 147, 61, 253, 226, 16, 191, 237, 147, 82, 190, 108, 179, 68, 189, 39, 128, 185, 60, 77, 203, 173, 61, 47, 21, 185, 62, 100, 221, 9, 189, 253, 186, 49, 62, 58, 108, 165, 62, 39, 85, 100, 190, 142, 245, 168, 189, 98, 99, 242, 61, 139, 185, 50, 61, 25, 46, 221, 61, 155, 59, 88, 61, 90, 136, 49, 189, 182, 71, 239, 189, 181, 120, 129, 191, 243, 105, 238, 62, 60, 53, 221, 189, 7, 166, 155, 62, 133, 188, 164, 62, 23, 221, 184, 62, 236, 108, 179, 190, 250, 240, 128, 190, 148, 166, 185, 61, 35, 73, 132, 190, 219, 116, 213, 188, 1, 112, 226, 190, 120, 44, 139, 62, 183, 53, 55, 188, 146, 156, 72, 190, 50, 99, 79, 191, 35, 254, 18, 62, 235, 10, 159, 190, 7, 247, 184, 62, 251, 55, 13, 63, 2, 62, 177, 62, 47, 95, 132, 61, 220, 139, 114, 191, 161, 57, 164, 60, 56, 253, 110, 62, 58, 151, 25, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 254, 25, 62, 120, 120, 58, 62, 9, 156, 173, 61, 141, 83, 130, 188, 236, 162, 239, 189, 224, 218, 225, 61, 105, 234, 101, 190, 86, 158, 10, 61, 183, 209, 128, 58, 178, 135, 70, 60, 247, 137, 145, 62, 219, 105, 201, 189, 84, 79, 14, 190, 210, 103, 255, 189, 30, 210, 22, 61, 199, 223, 241, 188, 45, 34, 163, 62, 253, 194, 46, 62, 213, 73, 69, 61, 80, 200, 89, 190, 179, 87, 194, 62, 206, 24, 224, 61, 131, 19, 24, 60, 174, 214, 1, 62, 4, 114, 110, 62, 245, 30, 14, 62, 164, 34, 79, 62, 202, 172, 54, 190, 229, 246, 211, 189, 234, 156, 132, 62, 184, 24, 191, 62, 119, 44, 189, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 30, 143, 191, 245, 74, 250, 189, 129, 115, 225, 62, 8, 44, 32, 191, 241, 208, 17, 61, 240, 111, 32, 63, 180, 104, 4, 190, 174, 91, 58, 191, 89, 186, 115, 191, 38, 8, 213, 190, 8, 46, 48, 190, 82, 19, 195, 62, 198, 132, 135, 63, 84, 251, 189, 62, 84, 228, 166, 60, 180, 177, 150, 189, 64, 242, 24, 61, 79, 129, 235, 190, 185, 99, 137, 190, 35, 55, 19, 191, 43, 32, 190, 62, 157, 140, 218, 189, 87, 170, 223, 190, 23, 80, 140, 62, 230, 21, 139, 62, 49, 177, 208, 190, 26, 196, 72, 191, 145, 148, 13, 190, 106, 196, 250, 189, 162, 148, 167, 190, 194, 78, 206, 189, 80, 186, 216, 62, 103, 44, 13, 63, 249, 159, 133, 190, 220, 130, 161, 60, 0, 202, 172, 189, 128, 74, 10, 190, 110, 46, 147, 189, 147, 74, 158, 62, 93, 5, 70, 62, 140, 78, 117, 62, 31, 180, 73, 62, 179, 111, 16, 191, 85, 125, 209, 61, 139, 168, 156, 61, 225, 89, 126, 62, 54, 217, 187, 61, 213, 11, 200, 61, 185, 15, 138, 190, 68, 126, 186, 190, 205, 8, 195, 189, 11, 187, 3, 63, 1, 201, 247, 189, 121, 207, 253, 60, 136, 47, 184, 190, 194, 244, 17, 190, 102, 222, 37, 190, 119, 159, 16, 191, 248, 8, 2, 61, 152, 64, 119, 189, 188, 230, 9, 62, 98, 22, 114, 190, 203, 202, 66, 191, 173, 3, 163, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 218, 230, 187, 137, 126, 39, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {15, 186, 43, 191, 243, 83, 195, 190, 83, 182, 65, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {78, 113, 48, 192, 107, 158, 87, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0074/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}