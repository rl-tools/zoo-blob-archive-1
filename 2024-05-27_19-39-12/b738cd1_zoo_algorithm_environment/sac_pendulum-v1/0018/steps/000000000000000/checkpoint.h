// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 182, 108, 186, 203, 172, 41, 190, 8, 116, 125, 62, 165, 224, 200, 190, 107, 216, 232, 62, 228, 141, 235, 62, 89, 56, 153, 62, 9, 102, 124, 190, 74, 26, 218, 62, 63, 124, 57, 62, 195, 35, 15, 191, 21, 203, 0, 191, 83, 33, 209, 190, 25, 87, 126, 190, 222, 249, 135, 190, 71, 105, 5, 191, 251, 241, 182, 190, 6, 209, 82, 62, 221, 91, 16, 191, 146, 57, 146, 62, 105, 163, 178, 189, 38, 188, 81, 190, 92, 25, 113, 190, 247, 130, 172, 188, 229, 143, 237, 62, 44, 136, 15, 63, 245, 207, 155, 190, 24, 150, 23, 190, 75, 237, 194, 62, 85, 125, 2, 63, 22, 47, 71, 62, 33, 77, 136, 62, 45, 54, 92, 190, 107, 171, 12, 190, 10, 125, 19, 191, 183, 240, 182, 62, 160, 40, 118, 190, 146, 238, 149, 61, 48, 35, 250, 190, 216, 160, 163, 190, 251, 192, 192, 62, 52, 220, 198, 190, 155, 103, 3, 191, 122, 12, 133, 190, 207, 126, 206, 190, 172, 56, 203, 61, 165, 1, 183, 62, 185, 149, 1, 191, 163, 81, 7, 190, 8, 7, 3, 191, 206, 98, 132, 62, 118, 145, 233, 189, 22, 43, 126, 60, 211, 4, 110, 190, 114, 139, 34, 190, 55, 135, 0, 191, 73, 212, 191, 62, 65, 126, 5, 63, 211, 179, 19, 189, 31, 79, 30, 62, 220, 151, 11, 190, 169, 185, 106, 190, 14, 236, 247, 190, 131, 94, 8, 63, 62, 85, 16, 63, 180, 53, 167, 62, 68, 91, 226, 62, 74, 224, 163, 189, 6, 65, 189, 62, 64, 26, 149, 62, 239, 240, 158, 190, 169, 15, 252, 190, 69, 118, 16, 63, 94, 106, 226, 190, 26, 12, 232, 62, 38, 211, 230, 62, 145, 53, 75, 189, 163, 41, 4, 190, 196, 175, 213, 62, 178, 86, 150, 190, 201, 95, 23, 62, 233, 148, 8, 189, 115, 211, 205, 190, 238, 250, 166, 190, 197, 173, 250, 62, 117, 2, 220, 62, 214, 110, 19, 63, 206, 77, 7, 191, 138, 250, 187, 61, 34, 253, 206, 188, 72, 53, 167, 190, 91, 244, 2, 191, 5, 173, 219, 62, 188, 8, 126, 188, 5, 55, 189, 62, 192, 225, 137, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 193, 19, 191, 123, 34, 223, 190, 68, 103, 240, 62, 47, 120, 170, 62, 117, 227, 148, 62, 18, 138, 255, 62, 184, 250, 249, 190, 27, 215, 238, 62, 182, 215, 15, 63, 176, 217, 13, 191, 81, 20, 101, 62, 244, 62, 15, 190, 61, 78, 188, 190, 140, 144, 167, 60, 2, 115, 151, 190, 255, 54, 184, 190, 31, 142, 145, 62, 25, 148, 17, 191, 119, 50, 139, 190, 152, 215, 223, 62, 145, 27, 135, 62, 45, 17, 122, 187, 194, 193, 16, 63, 160, 43, 72, 62, 181, 210, 194, 62, 129, 44, 172, 190, 101, 181, 248, 62, 240, 59, 204, 190, 1, 112, 47, 61, 130, 72, 9, 191, 28, 71, 135, 62, 76, 121, 73, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 251, 40, 190, 137, 120, 255, 61, 30, 148, 32, 189, 177, 4, 1, 62, 5, 81, 33, 62, 248, 125, 117, 189, 206, 235, 64, 189, 4, 4, 228, 186, 200, 124, 219, 61, 248, 175, 248, 189, 188, 37, 29, 190, 252, 124, 208, 189, 76, 108, 251, 189, 226, 103, 193, 60, 74, 255, 227, 61, 234, 91, 132, 61, 231, 3, 193, 61, 73, 227, 140, 61, 166, 195, 168, 61, 246, 69, 210, 61, 192, 2, 158, 189, 123, 58, 229, 61, 154, 49, 173, 189, 34, 168, 24, 189, 4, 226, 213, 61, 176, 55, 29, 190, 131, 33, 37, 62, 205, 232, 5, 189, 2, 186, 54, 189, 194, 56, 225, 61, 82, 242, 174, 189, 209, 83, 151, 61, 90, 52, 21, 189, 69, 248, 2, 62, 242, 167, 98, 60, 205, 77, 5, 190, 238, 144, 15, 190, 27, 168, 143, 61, 134, 52, 52, 190, 252, 73, 214, 61, 109, 224, 43, 187, 25, 1, 237, 61, 187, 245, 181, 61, 31, 106, 23, 190, 31, 236, 88, 189, 164, 209, 31, 62, 183, 20, 223, 61, 84, 71, 194, 60, 205, 138, 9, 62, 243, 111, 90, 61, 74, 33, 76, 61, 94, 178, 7, 61, 45, 86, 60, 189, 238, 32, 146, 61, 157, 238, 43, 189, 152, 137, 20, 190, 147, 64, 21, 62, 109, 227, 166, 189, 71, 191, 182, 61, 225, 11, 80, 189, 32, 92, 36, 62, 35, 224, 35, 61, 87, 251, 5, 189, 221, 6, 67, 60, 237, 169, 204, 61, 214, 130, 25, 190, 173, 10, 45, 190, 248, 42, 93, 189, 200, 25, 117, 61, 130, 52, 20, 190, 69, 234, 100, 189, 122, 49, 185, 61, 104, 140, 4, 190, 171, 245, 235, 189, 195, 168, 138, 186, 160, 49, 209, 189, 161, 149, 198, 61, 194, 111, 40, 62, 188, 179, 4, 62, 188, 172, 37, 62, 155, 25, 96, 61, 142, 173, 73, 189, 251, 55, 4, 62, 193, 125, 185, 59, 89, 196, 12, 61, 54, 80, 207, 189, 147, 157, 219, 188, 106, 126, 19, 190, 65, 192, 70, 189, 25, 69, 242, 61, 185, 225, 43, 62, 176, 125, 219, 61, 155, 54, 189, 189, 229, 93, 159, 60, 56, 29, 152, 189, 139, 155, 134, 61, 0, 25, 211, 61, 152, 41, 243, 188, 217, 175, 139, 188, 121, 144, 20, 62, 113, 235, 110, 189, 35, 142, 81, 61, 81, 239, 163, 60, 143, 177, 215, 61, 49, 150, 18, 190, 159, 7, 20, 188, 120, 160, 52, 62, 83, 173, 201, 61, 105, 253, 179, 61, 245, 74, 82, 189, 203, 178, 10, 62, 110, 121, 123, 189, 246, 146, 30, 62, 243, 48, 46, 190, 106, 241, 46, 62, 254, 129, 23, 62, 81, 132, 45, 62, 44, 136, 152, 61, 27, 237, 48, 190, 18, 249, 46, 190, 206, 62, 140, 61, 171, 62, 231, 61, 161, 182, 29, 190, 224, 30, 30, 62, 162, 54, 41, 62, 7, 236, 27, 62, 130, 206, 16, 62, 61, 233, 13, 62, 191, 185, 177, 61, 225, 162, 214, 61, 239, 139, 153, 60, 180, 110, 186, 59, 132, 54, 39, 62, 65, 36, 30, 190, 3, 62, 32, 190, 134, 154, 104, 60, 100, 182, 34, 189, 198, 15, 20, 190, 229, 205, 51, 190, 205, 92, 6, 189, 28, 91, 11, 190, 237, 140, 252, 189, 225, 164, 21, 189, 29, 150, 188, 61, 169, 112, 14, 62, 245, 86, 43, 190, 74, 89, 73, 189, 29, 59, 134, 61, 37, 91, 206, 189, 211, 122, 81, 61, 218, 103, 131, 61, 12, 113, 70, 61, 185, 161, 216, 60, 157, 41, 6, 61, 121, 122, 187, 60, 122, 11, 234, 188, 87, 176, 73, 189, 174, 221, 172, 61, 238, 228, 51, 62, 20, 21, 196, 61, 5, 117, 178, 188, 29, 20, 28, 62, 18, 208, 239, 189, 52, 110, 31, 190, 175, 190, 199, 189, 179, 150, 16, 190, 63, 129, 196, 189, 19, 145, 140, 189, 106, 241, 159, 61, 126, 73, 40, 190, 82, 209, 26, 190, 119, 226, 65, 189, 214, 75, 135, 189, 127, 118, 32, 190, 216, 23, 147, 189, 237, 142, 194, 189, 143, 63, 129, 187, 241, 177, 51, 62, 217, 217, 12, 60, 95, 166, 237, 189, 160, 32, 171, 189, 160, 96, 79, 189, 88, 191, 157, 61, 177, 237, 26, 190, 113, 227, 201, 189, 166, 126, 97, 189, 220, 225, 138, 188, 90, 91, 231, 60, 247, 50, 38, 190, 77, 133, 51, 190, 180, 138, 206, 60, 167, 169, 37, 190, 202, 219, 235, 189, 207, 200, 248, 61, 52, 72, 227, 189, 46, 86, 23, 62, 8, 154, 40, 190, 10, 56, 61, 188, 226, 53, 93, 187, 177, 205, 37, 190, 255, 1, 62, 189, 79, 15, 140, 189, 224, 152, 150, 187, 206, 238, 43, 190, 224, 250, 234, 61, 78, 21, 191, 61, 144, 87, 252, 61, 174, 186, 191, 61, 98, 195, 248, 61, 175, 229, 140, 61, 254, 6, 35, 62, 70, 95, 183, 61, 187, 116, 3, 62, 38, 83, 13, 190, 110, 192, 179, 61, 77, 224, 235, 61, 243, 113, 190, 60, 111, 63, 67, 61, 3, 197, 37, 59, 127, 89, 176, 61, 74, 108, 1, 62, 61, 228, 167, 61, 123, 116, 60, 60, 64, 64, 150, 189, 4, 7, 185, 61, 79, 91, 156, 189, 75, 254, 209, 189, 81, 52, 205, 189, 125, 181, 50, 189, 172, 93, 176, 188, 24, 64, 29, 190, 209, 248, 197, 188, 95, 19, 136, 61, 199, 39, 40, 190, 226, 8, 227, 189, 160, 169, 102, 61, 249, 97, 16, 60, 50, 228, 232, 188, 224, 98, 33, 190, 147, 206, 196, 188, 221, 148, 148, 188, 4, 158, 147, 189, 213, 31, 29, 190, 39, 126, 157, 189, 251, 141, 245, 61, 104, 66, 204, 189, 20, 13, 137, 189, 100, 193, 127, 189, 36, 72, 179, 189, 250, 193, 23, 190, 153, 30, 237, 188, 214, 104, 213, 59, 18, 88, 17, 190, 11, 55, 244, 189, 1, 111, 8, 62, 180, 180, 226, 189, 131, 101, 9, 190, 67, 217, 12, 190, 97, 55, 254, 61, 177, 110, 166, 189, 88, 223, 108, 189, 98, 185, 9, 189, 161, 144, 16, 190, 218, 188, 118, 189, 129, 145, 20, 62, 88, 7, 255, 59, 156, 200, 4, 188, 34, 50, 192, 189, 215, 183, 124, 189, 235, 70, 123, 58, 158, 5, 29, 190, 203, 2, 40, 190, 111, 91, 14, 62, 191, 112, 233, 189, 157, 239, 42, 62, 194, 45, 16, 62, 74, 7, 175, 61, 98, 71, 222, 189, 83, 207, 34, 190, 199, 183, 100, 189, 80, 167, 36, 190, 2, 29, 182, 61, 202, 177, 79, 61, 254, 15, 39, 62, 159, 173, 24, 190, 195, 187, 134, 61, 217, 126, 9, 62, 118, 115, 193, 187, 174, 83, 194, 188, 98, 40, 246, 61, 117, 213, 204, 189, 55, 246, 44, 62, 248, 16, 32, 62, 149, 95, 150, 189, 108, 179, 19, 190, 239, 148, 181, 61, 217, 218, 140, 189, 80, 158, 41, 190, 119, 59, 168, 189, 20, 70, 167, 60, 32, 113, 236, 189, 202, 93, 142, 189, 87, 239, 33, 62, 172, 117, 38, 190, 110, 118, 19, 62, 108, 35, 225, 189, 187, 29, 127, 61, 245, 157, 121, 189, 31, 166, 16, 187, 32, 182, 223, 60, 32, 130, 125, 61, 233, 216, 115, 61, 43, 58, 129, 60, 89, 90, 27, 189, 133, 1, 203, 58, 218, 52, 7, 190, 189, 225, 203, 61, 190, 122, 25, 62, 133, 28, 122, 59, 18, 132, 24, 62, 77, 111, 30, 190, 200, 220, 150, 188, 178, 41, 31, 190, 47, 20, 85, 61, 24, 207, 139, 188, 255, 147, 215, 189, 60, 176, 246, 60, 196, 214, 49, 190, 121, 90, 81, 61, 131, 120, 206, 189, 94, 99, 46, 62, 197, 77, 246, 189, 26, 165, 27, 189, 114, 51, 11, 190, 212, 158, 98, 189, 174, 113, 34, 189, 64, 177, 212, 189, 94, 220, 195, 60, 234, 250, 30, 190, 181, 161, 5, 190, 151, 113, 12, 62, 13, 131, 90, 189, 201, 205, 20, 187, 250, 171, 182, 60, 96, 182, 26, 60, 216, 91, 30, 189, 149, 199, 44, 61, 209, 138, 178, 61, 207, 39, 183, 61, 151, 122, 241, 61, 43, 226, 35, 61, 249, 81, 157, 185, 137, 185, 192, 61, 196, 131, 35, 62, 244, 193, 47, 189, 170, 73, 138, 61, 85, 134, 44, 189, 69, 196, 208, 189, 31, 43, 137, 61, 203, 20, 17, 189, 21, 28, 156, 61, 97, 19, 32, 190, 7, 167, 165, 189, 166, 96, 173, 188, 249, 91, 6, 189, 22, 135, 251, 189, 172, 16, 3, 190, 91, 52, 40, 190, 137, 172, 18, 62, 19, 142, 225, 60, 249, 136, 54, 189, 21, 183, 40, 190, 5, 163, 217, 189, 129, 32, 217, 61, 127, 93, 65, 189, 193, 85, 102, 189, 1, 52, 161, 189, 57, 21, 156, 61, 144, 23, 188, 188, 98, 181, 45, 190, 24, 210, 29, 189, 24, 230, 3, 62, 219, 192, 113, 61, 169, 250, 186, 189, 98, 98, 192, 60, 218, 35, 12, 62, 255, 133, 179, 189, 171, 83, 30, 188, 191, 198, 8, 190, 97, 90, 17, 62, 82, 134, 176, 189, 75, 211, 24, 190, 238, 113, 0, 62, 212, 9, 115, 189, 193, 56, 249, 61, 140, 246, 108, 189, 252, 177, 84, 189, 30, 222, 52, 190, 58, 247, 37, 190, 66, 155, 243, 61, 8, 123, 52, 62, 4, 97, 49, 62, 128, 12, 52, 190, 161, 127, 33, 190, 250, 173, 204, 189, 241, 51, 166, 60, 5, 21, 38, 62, 6, 148, 190, 60, 44, 40, 7, 189, 156, 34, 15, 62, 123, 176, 147, 189, 19, 49, 28, 189, 79, 52, 195, 61, 60, 106, 21, 59, 5, 109, 9, 62, 205, 151, 180, 189, 40, 96, 63, 61, 147, 4, 198, 60, 138, 187, 227, 60, 167, 102, 49, 190, 51, 12, 44, 62, 201, 228, 0, 59, 52, 255, 50, 62, 10, 182, 12, 190, 162, 115, 189, 189, 221, 74, 45, 190, 13, 79, 150, 61, 127, 121, 3, 189, 55, 20, 62, 61, 76, 131, 228, 59, 156, 139, 49, 190, 199, 236, 163, 189, 8, 133, 98, 60, 208, 131, 170, 61, 41, 192, 218, 188, 107, 148, 12, 190, 203, 49, 110, 189, 53, 207, 30, 190, 75, 166, 32, 190, 105, 240, 58, 61, 74, 141, 24, 190, 51, 220, 143, 60, 232, 113, 140, 189, 90, 98, 135, 60, 147, 30, 9, 190, 182, 233, 43, 62, 152, 155, 179, 189, 172, 122, 162, 59, 229, 52, 20, 61, 218, 198, 164, 60, 109, 223, 132, 61, 206, 56, 138, 61, 229, 47, 255, 61, 146, 249, 218, 61, 16, 82, 174, 189, 57, 140, 188, 189, 92, 192, 51, 190, 16, 222, 2, 62, 63, 205, 207, 61, 110, 132, 21, 62, 42, 2, 215, 60, 51, 217, 236, 189, 29, 200, 4, 62, 248, 202, 94, 61, 193, 156, 224, 189, 172, 255, 11, 62, 167, 50, 138, 61, 17, 17, 149, 189, 224, 178, 223, 188, 230, 186, 19, 189, 237, 135, 43, 62, 246, 3, 230, 59, 251, 55, 225, 189, 31, 23, 226, 61, 23, 6, 233, 188, 162, 19, 155, 189, 22, 58, 24, 62, 83, 8, 71, 189, 32, 149, 195, 60, 200, 202, 156, 188, 254, 132, 35, 62, 75, 118, 18, 61, 52, 91, 137, 189, 255, 33, 188, 189, 32, 102, 67, 61, 219, 84, 172, 189, 219, 20, 3, 189, 113, 138, 221, 189, 19, 112, 230, 189, 77, 89, 115, 61, 191, 168, 187, 61, 202, 102, 58, 189, 169, 32, 246, 189, 56, 156, 199, 187, 155, 60, 24, 62, 126, 72, 231, 61, 45, 128, 36, 62, 152, 190, 252, 189, 229, 110, 14, 62, 87, 111, 149, 61, 100, 225, 7, 190, 146, 123, 40, 187, 108, 170, 152, 189, 48, 199, 10, 62, 15, 238, 43, 190, 252, 114, 38, 62, 131, 140, 24, 61, 68, 244, 35, 62, 212, 11, 203, 61, 140, 251, 37, 60, 94, 77, 20, 190, 160, 1, 242, 61, 70, 53, 215, 188, 235, 144, 115, 61, 63, 212, 158, 189, 221, 156, 232, 61, 97, 201, 228, 61, 236, 186, 50, 190, 85, 255, 165, 189, 151, 127, 193, 188, 68, 225, 85, 61, 233, 43, 180, 61, 195, 68, 207, 60, 41, 33, 174, 189, 243, 64, 123, 61, 187, 109, 228, 57, 130, 234, 208, 189, 68, 42, 201, 189, 199, 101, 4, 190, 73, 120, 232, 189, 234, 85, 40, 57, 77, 114, 5, 190, 215, 45, 179, 187, 229, 99, 174, 60, 236, 161, 50, 188, 1, 155, 212, 189, 227, 231, 244, 60, 215, 222, 109, 61, 69, 207, 232, 189, 230, 64, 36, 61, 172, 199, 212, 61, 122, 236, 71, 188, 2, 131, 199, 188, 37, 29, 183, 61, 102, 171, 124, 189, 37, 198, 28, 190, 31, 204, 133, 60, 75, 119, 21, 62, 122, 46, 223, 189, 208, 219, 17, 190, 201, 166, 164, 189, 20, 227, 123, 61, 40, 79, 254, 61, 135, 91, 214, 188, 121, 161, 22, 61, 31, 140, 138, 61, 65, 32, 6, 189, 238, 91, 2, 62, 185, 71, 225, 189, 207, 155, 38, 189, 142, 21, 7, 62, 47, 91, 122, 60, 237, 85, 15, 62, 93, 243, 18, 61, 208, 9, 46, 62, 203, 196, 23, 62, 88, 163, 19, 190, 56, 149, 112, 61, 85, 97, 100, 61, 144, 212, 39, 190, 3, 231, 161, 189, 205, 145, 176, 187, 74, 185, 94, 189, 28, 228, 32, 61, 45, 87, 195, 61, 159, 31, 116, 61, 208, 59, 183, 189, 86, 181, 85, 189, 121, 37, 186, 189, 166, 27, 176, 61, 220, 234, 180, 189, 129, 17, 11, 190, 74, 71, 6, 186, 43, 151, 253, 189, 148, 118, 176, 189, 57, 37, 242, 58, 41, 232, 128, 189, 164, 235, 68, 189, 26, 79, 24, 190, 203, 165, 236, 61, 35, 107, 30, 188, 238, 6, 1, 62, 193, 65, 86, 189, 48, 129, 8, 62, 143, 39, 176, 187, 47, 80, 34, 62, 33, 63, 20, 61, 208, 120, 45, 190, 131, 214, 52, 189, 120, 137, 166, 61, 13, 28, 20, 190, 133, 149, 200, 61, 3, 141, 47, 189, 224, 228, 19, 190, 180, 193, 204, 61, 159, 67, 194, 189, 129, 212, 132, 189, 250, 18, 145, 189, 143, 166, 59, 61, 139, 110, 109, 189, 176, 136, 21, 62, 141, 161, 93, 189, 150, 164, 149, 189, 111, 253, 35, 190, 24, 5, 166, 60, 25, 228, 15, 62, 223, 237, 39, 189, 200, 253, 135, 60, 23, 218, 80, 61, 236, 87, 24, 189, 133, 222, 197, 188, 212, 26, 156, 189, 204, 142, 32, 190, 0, 94, 13, 62, 70, 109, 202, 189, 107, 94, 251, 61, 16, 80, 235, 189, 118, 21, 146, 59, 213, 191, 209, 188, 91, 128, 96, 189, 209, 245, 45, 62, 53, 164, 149, 189, 216, 96, 23, 190, 160, 109, 41, 190, 79, 255, 17, 190, 201, 32, 243, 61, 232, 157, 14, 62, 123, 95, 194, 189, 130, 67, 210, 61, 159, 211, 31, 190, 55, 154, 53, 189, 185, 176, 1, 62, 156, 90, 1, 190, 181, 28, 23, 188, 220, 238, 32, 190, 161, 196, 43, 188, 2, 112, 8, 190, 210, 137, 61, 61, 238, 139, 184, 189, 37, 69, 8, 62, 228, 254, 11, 61, 44, 68, 172, 189, 6, 207, 24, 62, 232, 20, 59, 189, 80, 225, 168, 189, 59, 49, 236, 59, 91, 39, 253, 189, 147, 30, 25, 189, 154, 74, 214, 188, 46, 148, 48, 62, 44, 115, 1, 62, 91, 10, 46, 62, 110, 185, 46, 190, 6, 200, 192, 189, 129, 21, 170, 61, 74, 64, 221, 188, 97, 224, 18, 61, 67, 203, 9, 190, 189, 239, 102, 61, 18, 196, 147, 61, 156, 62, 39, 189, 19, 179, 53, 187, 13, 166, 237, 61, 6, 9, 150, 61, 102, 117, 31, 190, 216, 189, 23, 62, 51, 127, 240, 61, 117, 25, 231, 61, 187, 76, 137, 61, 79, 237, 150, 188, 172, 107, 134, 61, 62, 167, 42, 61, 254, 18, 28, 190, 228, 185, 40, 190, 152, 118, 137, 61, 1, 33, 186, 189, 203, 160, 254, 189, 26, 89, 237, 189, 223, 179, 166, 189, 40, 219, 29, 190, 116, 93, 135, 189, 176, 241, 105, 188, 193, 71, 161, 61, 155, 205, 25, 190, 111, 85, 85, 188, 202, 144, 1, 60, 164, 121, 207, 188, 224, 193, 113, 60, 161, 172, 33, 62, 122, 77, 32, 62, 25, 18, 170, 189, 100, 154, 11, 62, 83, 91, 125, 189, 234, 248, 19, 190, 35, 149, 21, 189, 76, 184, 22, 188, 117, 222, 221, 189, 61, 64, 185, 60, 43, 219, 22, 187, 219, 19, 26, 190, 72, 54, 162, 61, 138, 125, 146, 61, 176, 22, 201, 61, 16, 79, 20, 190, 175, 75, 23, 60, 232, 242, 4, 188, 165, 232, 184, 61, 124, 154, 44, 60, 164, 200, 144, 189, 120, 75, 243, 61, 214, 206, 190, 61, 253, 214, 102, 188, 68, 108, 166, 61, 56, 83, 164, 188, 217, 137, 30, 62, 135, 93, 67, 189, 154, 190, 6, 190, 148, 92, 199, 189, 101, 132, 51, 62, 242, 221, 170, 189, 98, 42, 13, 189, 236, 50, 246, 189, 189, 190, 236, 61, 82, 62, 169, 61, 160, 97, 21, 62, 146, 106, 171, 189, 163, 173, 3, 190, 140, 175, 205, 60, 68, 34, 26, 190, 126, 237, 12, 190, 194, 219, 229, 189, 252, 24, 11, 190, 206, 146, 1, 190, 39, 212, 156, 189, 182, 205, 178, 189, 153, 128, 230, 189, 110, 1, 239, 189, 225, 39, 214, 61, 32, 20, 16, 189, 86, 147, 86, 189, 224, 4, 233, 189, 157, 58, 183, 61, 198, 206, 97, 60, 232, 147, 118, 61, 188, 95, 193, 189, 120, 132, 45, 62, 146, 215, 172, 61, 213, 216, 165, 188, 97, 148, 14, 190, 245, 110, 196, 186, 196, 216, 175, 189, 102, 110, 227, 61, 202, 85, 129, 60, 7, 79, 46, 190, 207, 246, 39, 60, 172, 176, 245, 61, 179, 200, 69, 189, 205, 26, 32, 190, 2, 229, 146, 61, 172, 137, 246, 189, 149, 28, 39, 62, 179, 235, 72, 189, 69, 71, 94, 61, 31, 104, 203, 189, 84, 211, 15, 190, 223, 230, 99, 61, 164, 83, 180, 187, 14, 61, 15, 62, 224, 217, 19, 190, 191, 185, 200, 61, 154, 108, 109, 61, 230, 152, 52, 62, 34, 28, 8, 189, 172, 169, 242, 61, 226, 12, 19, 190, 178, 54, 35, 62, 169, 62, 12, 189, 134, 235, 250, 61, 158, 109, 186, 61, 87, 119, 216, 61, 200, 179, 42, 190, 192, 110, 35, 62, 145, 113, 196, 60, 165, 230, 165, 188, 92, 37, 212, 61, 118, 163, 179, 61, 234, 248, 217, 189, 50, 194, 48, 190, 215, 219, 215, 61, 207, 59, 27, 62, 63, 3, 152, 61, 255, 58, 38, 62, 252, 148, 138, 188, 116, 112, 128, 189, 53, 65, 204, 189, 177, 217, 233, 188, 33, 185, 116, 187, 208, 80, 48, 62, 125, 250, 75, 61, 170, 248, 241, 61, 81, 240, 36, 190, 78, 211, 153, 59, 85, 179, 101, 61, 181, 154, 75, 189, 93, 2, 57, 59, 149, 4, 144, 61, 161, 4, 36, 189, 149, 181, 30, 62, 212, 230, 146, 189, 69, 5, 127, 61, 123, 172, 203, 189, 242, 118, 18, 62, 159, 5, 2, 62, 201, 84, 91, 60, 148, 9, 9, 62, 247, 139, 204, 189, 234, 67, 76, 61, 234, 68, 244, 189, 220, 9, 44, 61, 74, 120, 0, 190, 198, 208, 168, 59, 190, 133, 9, 189, 8, 46, 176, 189, 108, 219, 22, 190, 51, 76, 197, 189, 132, 80, 18, 62, 10, 155, 13, 62, 9, 97, 153, 189, 209, 128, 124, 189, 214, 24, 52, 62, 191, 104, 229, 189, 67, 26, 127, 60, 146, 41, 115, 61, 34, 135, 9, 61, 167, 184, 47, 61, 215, 41, 12, 62, 74, 250, 106, 189, 89, 148, 24, 189, 136, 98, 139, 61, 205, 210, 251, 61, 63, 164, 164, 61, 172, 48, 18, 190, 167, 0, 11, 62, 180, 70, 157, 188, 19, 90, 247, 61, 202, 114, 29, 62, 138, 54, 189, 61, 77, 19, 175, 188, 214, 137, 157, 60, 24, 13, 130, 61, 57, 189, 219, 189, 29, 190, 52, 190, 249, 250, 249, 61, 225, 148, 33, 62, 11, 94, 21, 62, 1, 208, 35, 61, 58, 138, 127, 61, 93, 129, 183, 189, 40, 102, 36, 190, 130, 74, 194, 60, 19, 180, 35, 62, 67, 156, 2, 190, 121, 143, 0, 190, 78, 78, 137, 189, 7, 141, 2, 189, 188, 90, 86, 189, 233, 212, 176, 61, 165, 196, 35, 190, 252, 223, 0, 62, 77, 195, 152, 189, 133, 3, 56, 61, 116, 201, 6, 190, 202, 238, 175, 189, 64, 221, 229, 61, 122, 58, 46, 190, 148, 255, 176, 189, 114, 221, 22, 190, 55, 86, 2, 62, 162, 123, 251, 189, 18, 77, 234, 189, 84, 79, 51, 62, 106, 53, 77, 61, 90, 122, 12, 190, 15, 139, 30, 190, 102, 40, 247, 188, 164, 128, 168, 189, 98, 171, 5, 190, 70, 208, 4, 190, 217, 223, 4, 62, 109, 159, 37, 62, 131, 129, 187, 189, 118, 72, 227, 189, 159, 220, 14, 62, 242, 186, 23, 61, 112, 142, 139, 188, 62, 40, 115, 61, 211, 5, 76, 60, 9, 228, 92, 188, 165, 50, 11, 61, 240, 16, 52, 190, 174, 88, 181, 189, 38, 149, 247, 189, 89, 119, 151, 61, 162, 139, 163, 189, 228, 237, 92, 189, 53, 123, 178, 188, 223, 150, 210, 61, 137, 120, 41, 61, 13, 211, 95, 189, 103, 156, 244, 61, 68, 23, 135, 189, 42, 246, 233, 61, 30, 176, 7, 190, 215, 224, 206, 188, 236, 245, 50, 190, 49, 95, 207, 60, 115, 191, 1, 62, 109, 1, 227, 61, 133, 8, 105, 61, 103, 28, 39, 190, 109, 124, 121, 61, 13, 237, 47, 62, 50, 4, 144, 60, 107, 192, 207, 189, 198, 216, 180, 189, 142, 33, 185, 61, 137, 246, 137, 61, 229, 220, 248, 61, 79, 42, 50, 190, 253, 159, 226, 186, 244, 85, 139, 189, 213, 199, 149, 189, 18, 108, 254, 61, 31, 195, 35, 190, 66, 32, 5, 190, 144, 152, 71, 189, 188, 172, 42, 190, 201, 9, 196, 189, 110, 97, 3, 190, 38, 150, 30, 189, 127, 82, 44, 62, 19, 171, 178, 189, 168, 190, 128, 189, 5, 230, 6, 190, 102, 33, 25, 190, 11, 48, 138, 61, 10, 25, 32, 190, 229, 230, 184, 189, 137, 10, 58, 61, 76, 132, 99, 61, 27, 127, 31, 190, 215, 246, 246, 189, 63, 70, 30, 190, 192, 68, 14, 62, 66, 180, 29, 190, 142, 219, 64, 189, 128, 27, 194, 189, 94, 125, 36, 62, 167, 172, 77, 61, 201, 91, 199, 59, 95, 117, 155, 61, 96, 187, 31, 62, 216, 192, 195, 61, 69, 170, 181, 189, 248, 86, 188, 61, 193, 95, 240, 189, 200, 141, 41, 190, 10, 24, 170, 189, 136, 229, 93, 189, 12, 246, 208, 189, 38, 143, 234, 189, 126, 117, 51, 190, 171, 185, 179, 188, 192, 77, 208, 60, 138, 139, 169, 189, 106, 232, 21, 190, 204, 196, 148, 189, 153, 184, 106, 189, 84, 236, 55, 189, 140, 122, 25, 62, 155, 134, 13, 188, 33, 215, 5, 62, 78, 252, 128, 61, 141, 199, 88, 188, 211, 60, 17, 60, 203, 145, 16, 62, 238, 42, 10, 62, 112, 245, 136, 61, 135, 246, 59, 60, 115, 123, 4, 62, 91, 22, 182, 61, 181, 153, 38, 190, 99, 121, 56, 189, 177, 23, 40, 60, 187, 145, 208, 189, 202, 254, 164, 189, 231, 115, 140, 61, 35, 7, 66, 61, 123, 43, 90, 189, 43, 220, 84, 188, 42, 177, 15, 62, 103, 149, 255, 189, 114, 148, 50, 62, 203, 107, 182, 61, 53, 235, 207, 61, 231, 243, 58, 61, 141, 25, 190, 189, 144, 227, 44, 62, 245, 16, 175, 60, 117, 165, 27, 189, 73, 248, 16, 190, 172, 176, 60, 60, 34, 28, 44, 62, 218, 166, 24, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 103, 182, 188, 143, 30, 34, 190, 21, 65, 73, 189, 207, 38, 38, 62, 57, 185, 48, 188, 42, 210, 11, 62, 12, 71, 18, 62, 98, 227, 28, 62, 99, 139, 150, 189, 67, 219, 0, 62, 4, 9, 202, 61, 177, 80, 191, 189, 117, 238, 251, 188, 104, 249, 83, 61, 241, 86, 208, 189, 150, 30, 90, 61, 233, 34, 1, 62, 247, 2, 5, 62, 211, 227, 180, 61, 19, 50, 18, 190, 149, 232, 240, 61, 3, 93, 146, 61, 51, 114, 254, 189, 8, 52, 92, 61, 31, 245, 25, 62, 94, 245, 32, 62, 220, 200, 169, 188, 222, 133, 69, 61, 66, 251, 154, 189, 17, 198, 110, 61, 132, 167, 47, 190, 190, 214, 216, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {132, 204, 173, 189, 28, 11, 92, 189, 154, 213, 158, 61, 5, 163, 143, 189, 14, 106, 110, 188, 134, 19, 183, 61, 58, 51, 51, 62, 39, 236, 130, 60, 207, 36, 195, 189, 90, 87, 16, 62, 218, 221, 156, 189, 163, 103, 55, 189, 133, 44, 31, 62, 92, 26, 4, 62, 116, 135, 0, 190, 224, 173, 191, 61, 188, 19, 132, 61, 50, 40, 201, 189, 148, 174, 128, 189, 153, 104, 246, 60, 99, 253, 38, 189, 141, 240, 147, 188, 79, 124, 45, 190, 141, 111, 174, 61, 42, 189, 191, 188, 56, 157, 1, 62, 84, 244, 23, 61, 188, 219, 33, 190, 113, 79, 172, 59, 69, 74, 15, 188, 214, 99, 181, 61, 33, 155, 255, 61, 32, 112, 48, 61, 221, 255, 213, 189, 46, 195, 196, 189, 78, 212, 121, 189, 224, 49, 42, 190, 63, 40, 68, 59, 128, 194, 206, 61, 192, 112, 164, 61, 78, 23, 212, 188, 12, 182, 185, 61, 134, 223, 250, 189, 253, 43, 117, 189, 107, 195, 22, 190, 249, 102, 231, 60, 94, 185, 141, 189, 193, 235, 0, 62, 23, 80, 221, 188, 65, 203, 185, 189, 254, 61, 25, 62, 251, 227, 10, 187, 118, 195, 183, 61, 187, 234, 33, 62, 101, 50, 214, 189, 221, 172, 83, 61, 241, 237, 244, 189, 88, 203, 149, 189, 230, 82, 63, 60, 95, 217, 40, 61, 142, 225, 5, 190, 53, 1, 138, 189, 224, 154, 225, 189, 177, 23, 250, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 251, 255, 61, 128, 88, 23, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {84, 72, 57, 191, 251, 146, 155, 62, 104, 5, 8, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {238, 149, 119, 62, 128, 68, 196, 187};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0018/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}