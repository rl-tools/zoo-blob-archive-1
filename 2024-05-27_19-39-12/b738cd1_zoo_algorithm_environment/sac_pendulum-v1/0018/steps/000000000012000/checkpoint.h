// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 170, 147, 62, 12, 246, 54, 191, 13, 23, 157, 62, 146, 123, 91, 63, 178, 80, 23, 62, 41, 232, 156, 62, 231, 66, 7, 63, 138, 71, 46, 63, 31, 247, 192, 62, 237, 175, 225, 62, 123, 0, 146, 191, 34, 175, 112, 190, 44, 172, 4, 191, 77, 38, 5, 191, 91, 231, 65, 59, 106, 34, 120, 191, 191, 249, 7, 191, 31, 14, 150, 189, 66, 5, 225, 190, 3, 214, 88, 191, 150, 232, 145, 189, 165, 109, 217, 190, 50, 175, 183, 189, 136, 222, 122, 60, 122, 196, 167, 62, 128, 12, 66, 63, 119, 94, 47, 191, 112, 19, 179, 59, 204, 145, 74, 63, 72, 53, 21, 63, 211, 99, 44, 62, 55, 193, 75, 62, 85, 61, 66, 191, 189, 225, 33, 61, 55, 69, 194, 191, 227, 147, 208, 62, 252, 149, 26, 190, 174, 194, 81, 62, 100, 90, 252, 190, 186, 36, 220, 190, 227, 145, 34, 62, 203, 21, 117, 191, 186, 80, 45, 191, 58, 181, 149, 191, 220, 192, 43, 190, 109, 157, 29, 190, 233, 162, 49, 63, 194, 230, 32, 191, 231, 29, 45, 191, 54, 239, 168, 62, 50, 28, 92, 62, 75, 244, 38, 63, 215, 11, 252, 189, 192, 13, 145, 190, 10, 213, 188, 190, 160, 203, 202, 188, 177, 60, 46, 63, 213, 197, 131, 63, 106, 14, 135, 61, 209, 174, 200, 61, 154, 55, 64, 62, 48, 236, 147, 191, 223, 183, 194, 190, 223, 237, 56, 63, 198, 33, 107, 63, 226, 25, 208, 62, 216, 103, 167, 62, 165, 96, 240, 61, 157, 144, 239, 62, 226, 180, 38, 63, 233, 202, 134, 191, 172, 151, 6, 191, 151, 122, 38, 63, 228, 87, 231, 190, 35, 181, 0, 63, 38, 8, 0, 63, 78, 215, 138, 191, 194, 168, 76, 190, 205, 183, 120, 62, 183, 230, 196, 62, 252, 23, 18, 62, 218, 85, 4, 191, 91, 46, 23, 191, 26, 231, 181, 190, 91, 15, 31, 63, 157, 90, 237, 62, 166, 139, 43, 63, 76, 48, 198, 190, 96, 177, 114, 190, 133, 78, 221, 188, 58, 108, 9, 191, 159, 61, 90, 62, 175, 33, 15, 63, 177, 19, 149, 59, 202, 133, 49, 63, 210, 59, 185, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 48, 200, 190, 85, 6, 151, 191, 103, 40, 230, 62, 95, 43, 141, 62, 132, 6, 232, 62, 85, 103, 157, 62, 165, 114, 32, 191, 202, 251, 249, 62, 126, 141, 27, 63, 24, 53, 230, 190, 86, 182, 157, 62, 128, 18, 36, 190, 229, 134, 55, 190, 148, 0, 24, 190, 172, 63, 31, 62, 201, 234, 45, 190, 175, 123, 191, 62, 89, 72, 140, 191, 4, 17, 228, 190, 133, 13, 82, 62, 9, 106, 250, 62, 247, 38, 2, 190, 223, 11, 228, 62, 91, 240, 183, 189, 132, 189, 205, 62, 68, 80, 21, 62, 32, 82, 210, 62, 246, 190, 220, 190, 108, 225, 142, 61, 117, 230, 44, 191, 140, 147, 52, 62, 19, 123, 116, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 44, 243, 61, 199, 149, 45, 63, 114, 169, 213, 189, 219, 125, 142, 190, 4, 37, 194, 62, 36, 213, 39, 62, 240, 132, 24, 191, 34, 214, 57, 62, 188, 145, 113, 62, 77, 193, 144, 60, 64, 76, 81, 190, 202, 162, 221, 190, 165, 55, 102, 190, 95, 211, 164, 62, 30, 189, 32, 62, 191, 52, 181, 189, 135, 220, 244, 61, 218, 200, 60, 191, 62, 64, 149, 190, 207, 197, 145, 62, 215, 14, 89, 190, 159, 14, 168, 62, 74, 209, 16, 190, 151, 195, 12, 191, 17, 9, 160, 62, 52, 158, 23, 191, 143, 38, 98, 62, 102, 164, 81, 190, 20, 157, 163, 62, 239, 188, 5, 190, 214, 1, 235, 189, 247, 210, 230, 62, 112, 57, 200, 189, 59, 153, 143, 62, 147, 129, 67, 188, 229, 116, 5, 190, 249, 30, 3, 189, 21, 111, 63, 62, 127, 146, 146, 190, 203, 185, 149, 62, 139, 239, 60, 62, 29, 206, 8, 61, 215, 110, 37, 62, 135, 111, 221, 190, 52, 255, 240, 189, 108, 112, 209, 62, 87, 216, 126, 62, 145, 127, 94, 190, 34, 218, 17, 60, 227, 247, 17, 191, 199, 213, 106, 190, 49, 121, 113, 62, 52, 189, 203, 61, 110, 69, 123, 62, 240, 18, 158, 189, 195, 76, 164, 190, 246, 128, 138, 62, 166, 115, 81, 190, 123, 102, 47, 62, 197, 0, 2, 190, 118, 92, 159, 62, 61, 216, 6, 190, 111, 25, 36, 190, 5, 101, 58, 62, 37, 50, 135, 60, 80, 250, 64, 191, 213, 165, 24, 190, 103, 113, 220, 61, 195, 115, 77, 60, 3, 107, 101, 189, 254, 116, 75, 189, 213, 179, 198, 61, 53, 180, 108, 189, 157, 35, 192, 190, 143, 146, 44, 190, 184, 138, 15, 62, 82, 197, 108, 62, 28, 68, 241, 61, 206, 191, 28, 61, 214, 100, 178, 61, 82, 248, 37, 62, 73, 16, 68, 189, 253, 14, 179, 62, 18, 99, 24, 188, 89, 40, 240, 190, 22, 145, 187, 190, 111, 162, 232, 61, 52, 103, 187, 190, 200, 91, 48, 189, 99, 42, 63, 63, 80, 241, 76, 62, 83, 86, 170, 62, 48, 182, 116, 190, 61, 240, 122, 189, 194, 16, 157, 61, 22, 143, 227, 190, 63, 172, 47, 61, 77, 144, 149, 62, 222, 169, 179, 60, 122, 203, 6, 62, 5, 98, 190, 189, 106, 18, 4, 62, 110, 235, 118, 191, 43, 232, 39, 62, 158, 198, 24, 190, 178, 22, 221, 189, 5, 34, 142, 61, 73, 66, 198, 61, 210, 151, 6, 191, 106, 209, 150, 190, 5, 78, 137, 62, 129, 89, 175, 190, 30, 50, 14, 62, 4, 121, 171, 190, 32, 66, 126, 61, 0, 18, 204, 62, 158, 74, 45, 62, 179, 96, 35, 62, 90, 182, 194, 189, 44, 26, 20, 190, 159, 218, 129, 62, 248, 24, 29, 190, 14, 53, 111, 189, 212, 185, 66, 191, 190, 78, 70, 62, 95, 168, 66, 62, 196, 164, 136, 61, 10, 12, 96, 62, 131, 223, 201, 189, 215, 241, 94, 62, 229, 205, 249, 61, 62, 41, 57, 190, 16, 219, 144, 189, 217, 214, 46, 61, 16, 226, 192, 189, 97, 71, 42, 62, 255, 28, 103, 62, 86, 212, 183, 190, 52, 180, 84, 189, 157, 206, 67, 190, 45, 249, 58, 189, 4, 139, 16, 190, 178, 87, 224, 191, 157, 205, 106, 62, 245, 89, 246, 61, 45, 118, 95, 191, 73, 181, 86, 190, 35, 117, 135, 62, 119, 223, 45, 191, 149, 143, 208, 61, 156, 173, 52, 62, 18, 251, 37, 189, 56, 103, 227, 61, 165, 173, 215, 61, 188, 115, 103, 62, 211, 251, 165, 191, 239, 209, 32, 189, 191, 253, 173, 61, 21, 176, 17, 62, 219, 71, 202, 62, 5, 117, 178, 188, 29, 20, 28, 62, 18, 208, 239, 189, 52, 110, 31, 190, 175, 190, 199, 189, 179, 150, 16, 190, 63, 129, 196, 189, 19, 145, 140, 189, 106, 241, 159, 61, 126, 73, 40, 190, 82, 209, 26, 190, 119, 226, 65, 189, 214, 75, 135, 189, 127, 118, 32, 190, 216, 23, 147, 189, 237, 142, 194, 189, 143, 63, 129, 187, 241, 177, 51, 62, 217, 217, 12, 60, 95, 166, 237, 189, 160, 32, 171, 189, 160, 96, 79, 189, 88, 191, 157, 61, 177, 237, 26, 190, 113, 227, 201, 189, 166, 126, 97, 189, 220, 225, 138, 188, 90, 91, 231, 60, 247, 50, 38, 190, 77, 133, 51, 190, 180, 138, 206, 60, 167, 169, 37, 190, 90, 10, 138, 189, 44, 36, 144, 190, 61, 163, 30, 190, 202, 244, 180, 62, 236, 133, 81, 189, 126, 189, 243, 60, 238, 7, 197, 62, 13, 225, 12, 190, 105, 213, 171, 190, 90, 144, 172, 189, 128, 204, 142, 190, 122, 148, 193, 189, 44, 97, 57, 190, 127, 206, 18, 191, 205, 209, 186, 189, 18, 238, 233, 189, 212, 236, 65, 62, 153, 144, 253, 59, 246, 60, 149, 62, 201, 34, 17, 190, 214, 170, 135, 189, 245, 155, 187, 190, 14, 176, 124, 61, 19, 36, 14, 62, 194, 37, 209, 189, 234, 205, 26, 63, 252, 249, 211, 189, 21, 102, 152, 62, 159, 70, 67, 61, 177, 159, 110, 189, 187, 225, 4, 62, 31, 100, 6, 191, 4, 7, 185, 61, 147, 176, 164, 189, 118, 195, 232, 189, 136, 225, 221, 189, 4, 232, 148, 189, 118, 189, 96, 189, 154, 251, 33, 190, 200, 92, 100, 189, 142, 126, 43, 61, 199, 39, 40, 190, 211, 138, 246, 189, 74, 81, 81, 61, 4, 80, 252, 59, 93, 207, 107, 189, 190, 141, 41, 190, 147, 206, 196, 188, 50, 60, 21, 189, 4, 158, 147, 189, 190, 25, 33, 190, 39, 48, 159, 189, 59, 211, 197, 61, 104, 66, 204, 189, 113, 30, 158, 189, 156, 210, 133, 189, 89, 59, 184, 189, 250, 193, 23, 190, 130, 22, 11, 189, 214, 104, 213, 59, 18, 88, 17, 190, 11, 55, 244, 189, 95, 136, 217, 61, 89, 155, 250, 189, 174, 53, 32, 61, 253, 65, 173, 187, 243, 229, 35, 62, 23, 52, 43, 190, 189, 238, 13, 61, 255, 196, 1, 62, 57, 243, 242, 61, 159, 184, 209, 60, 108, 118, 178, 62, 179, 196, 9, 190, 197, 20, 136, 61, 95, 131, 0, 190, 195, 168, 221, 189, 196, 245, 191, 62, 154, 50, 222, 188, 49, 86, 189, 190, 247, 133, 85, 190, 169, 227, 59, 191, 81, 250, 64, 190, 187, 47, 171, 62, 102, 226, 30, 62, 251, 210, 2, 62, 104, 128, 0, 190, 234, 194, 130, 190, 198, 213, 36, 61, 117, 199, 106, 190, 248, 73, 166, 61, 73, 184, 30, 62, 226, 98, 144, 61, 237, 193, 147, 189, 242, 116, 187, 189, 142, 85, 123, 62, 102, 222, 35, 190, 90, 51, 233, 190, 229, 214, 162, 189, 29, 254, 132, 62, 97, 225, 107, 62, 222, 4, 98, 60, 236, 246, 206, 62, 64, 248, 247, 61, 101, 192, 106, 191, 121, 224, 151, 190, 129, 16, 134, 191, 149, 214, 161, 61, 125, 225, 199, 189, 87, 223, 118, 191, 98, 79, 3, 62, 18, 9, 29, 190, 44, 97, 133, 62, 129, 115, 157, 190, 146, 108, 86, 62, 93, 196, 147, 190, 98, 227, 234, 190, 43, 255, 26, 190, 66, 46, 130, 61, 174, 205, 57, 191, 248, 101, 19, 190, 138, 197, 41, 63, 96, 133, 168, 60, 147, 114, 69, 63, 163, 34, 2, 189, 77, 88, 78, 189, 231, 18, 17, 62, 198, 165, 6, 191, 35, 178, 229, 190, 79, 96, 197, 188, 39, 210, 176, 190, 22, 17, 31, 189, 98, 215, 12, 62, 112, 174, 106, 62, 243, 134, 2, 62, 112, 171, 188, 188, 51, 104, 243, 61, 41, 234, 23, 191, 127, 147, 38, 62, 182, 222, 60, 191, 216, 70, 1, 190, 116, 222, 90, 189, 175, 18, 169, 62, 102, 103, 142, 190, 164, 93, 253, 190, 217, 62, 94, 191, 107, 52, 142, 191, 207, 134, 163, 61, 152, 245, 58, 62, 143, 214, 30, 62, 159, 168, 108, 190, 8, 82, 38, 190, 118, 56, 16, 62, 205, 219, 184, 190, 42, 163, 5, 62, 200, 234, 60, 189, 143, 220, 90, 62, 153, 92, 19, 62, 64, 181, 162, 190, 22, 166, 90, 62, 137, 185, 192, 61, 196, 131, 35, 62, 244, 193, 47, 189, 170, 73, 138, 61, 85, 134, 44, 189, 69, 196, 208, 189, 31, 43, 137, 61, 203, 20, 17, 189, 21, 28, 156, 61, 97, 19, 32, 190, 7, 167, 165, 189, 166, 96, 173, 188, 249, 91, 6, 189, 22, 135, 251, 189, 172, 16, 3, 190, 91, 52, 40, 190, 137, 172, 18, 62, 19, 142, 225, 60, 249, 136, 54, 189, 21, 183, 40, 190, 5, 163, 217, 189, 129, 32, 217, 61, 127, 93, 65, 189, 193, 85, 102, 189, 1, 52, 161, 189, 57, 21, 156, 61, 144, 23, 188, 188, 98, 181, 45, 190, 24, 210, 29, 189, 24, 230, 3, 62, 219, 192, 113, 61, 169, 250, 186, 189, 191, 188, 23, 190, 173, 80, 137, 61, 0, 111, 242, 189, 170, 73, 76, 62, 149, 86, 217, 189, 47, 238, 250, 188, 233, 159, 204, 190, 51, 208, 235, 189, 175, 21, 206, 62, 25, 95, 26, 190, 185, 70, 211, 62, 136, 182, 167, 190, 175, 180, 111, 188, 90, 187, 225, 60, 4, 201, 209, 190, 52, 92, 62, 62, 165, 226, 129, 62, 132, 41, 10, 63, 99, 249, 247, 190, 13, 52, 23, 189, 176, 243, 1, 61, 98, 160, 135, 189, 214, 225, 37, 61, 237, 117, 53, 62, 189, 28, 10, 190, 14, 246, 159, 62, 186, 225, 36, 189, 105, 178, 117, 189, 30, 252, 52, 189, 199, 104, 27, 189, 190, 251, 213, 189, 9, 30, 238, 61, 40, 96, 63, 61, 189, 101, 170, 60, 242, 145, 206, 60, 167, 102, 49, 190, 253, 91, 28, 62, 38, 249, 57, 188, 247, 0, 45, 62, 227, 36, 28, 190, 160, 226, 220, 189, 221, 74, 45, 190, 237, 191, 136, 61, 127, 121, 3, 189, 55, 20, 62, 61, 132, 196, 9, 188, 90, 102, 51, 190, 199, 236, 163, 189, 135, 220, 55, 60, 208, 131, 170, 61, 41, 192, 218, 188, 56, 224, 12, 190, 120, 244, 137, 189, 53, 207, 30, 190, 49, 12, 37, 190, 105, 240, 58, 61, 74, 141, 24, 190, 51, 220, 143, 60, 208, 32, 141, 189, 90, 98, 135, 60, 147, 30, 9, 190, 182, 233, 43, 62, 45, 133, 195, 189, 44, 105, 73, 187, 197, 11, 158, 61, 203, 182, 249, 62, 253, 29, 26, 61, 88, 111, 154, 61, 93, 45, 254, 61, 168, 137, 128, 59, 88, 55, 128, 191, 58, 121, 199, 189, 117, 58, 149, 190, 168, 166, 138, 61, 47, 221, 6, 62, 13, 118, 178, 62, 77, 14, 187, 190, 142, 68, 175, 190, 51, 184, 97, 62, 81, 110, 27, 190, 147, 80, 229, 189, 93, 26, 209, 61, 130, 138, 6, 62, 244, 251, 119, 59, 56, 17, 139, 62, 181, 222, 183, 189, 254, 224, 140, 62, 12, 124, 159, 62, 155, 48, 145, 59, 96, 3, 76, 190, 225, 70, 76, 188, 46, 118, 106, 191, 115, 149, 242, 61, 102, 174, 201, 61, 210, 251, 97, 61, 162, 210, 227, 190, 194, 113, 117, 61, 187, 165, 7, 190, 101, 157, 28, 62, 108, 253, 220, 190, 53, 105, 23, 191, 98, 34, 208, 190, 194, 70, 147, 190, 111, 175, 160, 190, 185, 186, 6, 189, 176, 15, 63, 62, 115, 102, 63, 189, 2, 202, 139, 190, 249, 178, 227, 189, 40, 30, 188, 61, 59, 65, 71, 191, 38, 141, 181, 187, 254, 46, 48, 62, 210, 66, 1, 190, 178, 22, 136, 187, 236, 62, 209, 62, 6, 191, 202, 191, 69, 214, 200, 62, 1, 119, 221, 187, 156, 67, 117, 191, 44, 69, 188, 189, 255, 147, 165, 190, 80, 100, 128, 62, 24, 239, 44, 62, 10, 112, 163, 62, 55, 2, 99, 59, 199, 252, 74, 190, 129, 166, 158, 62, 216, 177, 170, 190, 139, 167, 35, 62, 174, 23, 153, 59, 25, 26, 131, 62, 108, 82, 208, 61, 244, 220, 48, 190, 189, 225, 139, 190, 145, 137, 244, 61, 16, 57, 161, 62, 30, 84, 131, 62, 140, 40, 140, 62, 148, 233, 158, 190, 90, 123, 203, 188, 200, 49, 242, 61, 74, 67, 130, 190, 117, 132, 103, 190, 149, 14, 252, 188, 172, 176, 161, 190, 90, 92, 201, 190, 17, 72, 69, 62, 152, 33, 145, 61, 209, 78, 168, 61, 179, 43, 170, 189, 72, 3, 193, 187, 49, 223, 2, 189, 242, 150, 157, 61, 118, 4, 46, 61, 214, 164, 91, 190, 89, 142, 115, 189, 75, 4, 20, 190, 132, 211, 196, 190, 219, 46, 103, 62, 25, 100, 32, 190, 167, 67, 81, 61, 99, 74, 135, 61, 102, 79, 35, 62, 56, 45, 40, 190, 42, 60, 165, 188, 12, 111, 100, 62, 152, 141, 255, 61, 91, 100, 243, 61, 199, 47, 206, 189, 27, 138, 167, 60, 225, 172, 135, 61, 48, 145, 234, 189, 7, 176, 111, 61, 102, 150, 98, 62, 122, 157, 129, 190, 224, 203, 64, 61, 62, 87, 52, 191, 16, 188, 148, 61, 43, 86, 133, 62, 133, 91, 109, 62, 226, 172, 142, 62, 239, 161, 46, 189, 130, 172, 143, 61, 81, 212, 102, 62, 50, 49, 196, 190, 44, 245, 125, 61, 134, 104, 164, 189, 0, 164, 140, 57, 2, 76, 213, 61, 63, 45, 10, 61, 23, 226, 6, 61, 118, 14, 133, 62, 26, 102, 0, 190, 37, 35, 122, 191, 174, 121, 158, 62, 174, 243, 83, 62, 215, 46, 17, 191, 126, 214, 120, 62, 87, 199, 11, 190, 69, 63, 49, 190, 223, 233, 36, 187, 56, 190, 163, 189, 148, 43, 28, 63, 102, 93, 145, 189, 3, 81, 191, 61, 141, 71, 24, 62, 76, 191, 55, 62, 244, 216, 42, 190, 141, 173, 255, 62, 22, 3, 146, 62, 157, 195, 145, 190, 230, 74, 96, 62, 68, 217, 146, 191, 132, 140, 73, 190, 43, 234, 128, 62, 46, 174, 198, 60, 191, 25, 244, 62, 157, 27, 198, 190, 45, 165, 86, 60, 23, 247, 183, 190, 55, 153, 164, 61, 15, 12, 91, 188, 114, 232, 160, 190, 10, 104, 24, 59, 56, 221, 190, 189, 122, 186, 229, 61, 13, 223, 102, 189, 40, 7, 152, 189, 196, 34, 71, 190, 24, 5, 166, 60, 202, 92, 239, 61, 190, 137, 54, 189, 161, 1, 83, 188, 1, 71, 76, 61, 56, 16, 160, 189, 133, 222, 197, 188, 212, 26, 156, 189, 254, 209, 34, 190, 0, 94, 13, 62, 157, 50, 16, 190, 107, 94, 251, 61, 45, 126, 27, 190, 97, 137, 9, 189, 243, 201, 209, 188, 71, 188, 180, 189, 228, 246, 8, 62, 17, 39, 149, 189, 17, 54, 61, 190, 17, 154, 43, 190, 197, 159, 62, 190, 201, 32, 243, 61, 244, 178, 223, 61, 123, 95, 194, 189, 223, 93, 141, 61, 56, 168, 39, 190, 118, 125, 215, 62, 7, 99, 150, 61, 101, 4, 211, 190, 136, 245, 121, 190, 4, 169, 117, 62, 237, 102, 164, 62, 51, 47, 19, 60, 81, 134, 82, 62, 73, 33, 52, 61, 138, 79, 176, 61, 107, 195, 254, 189, 1, 141, 5, 191, 60, 170, 186, 189, 33, 84, 218, 62, 26, 42, 221, 62, 26, 89, 133, 190, 1, 245, 43, 191, 167, 75, 38, 191, 112, 142, 45, 191, 47, 190, 46, 62, 108, 54, 107, 62, 78, 105, 21, 63, 47, 210, 206, 190, 93, 110, 15, 191, 228, 7, 131, 62, 117, 158, 111, 190, 196, 205, 166, 189, 191, 119, 141, 190, 94, 117, 11, 63, 153, 145, 192, 189, 148, 52, 223, 190, 202, 225, 183, 62, 243, 247, 145, 62, 212, 146, 155, 191, 101, 226, 132, 60, 153, 110, 226, 62, 180, 166, 147, 61, 124, 174, 154, 190, 249, 68, 68, 60, 158, 5, 47, 60, 52, 240, 152, 60, 221, 119, 51, 59, 179, 9, 110, 190, 107, 80, 187, 189, 112, 153, 203, 189, 76, 226, 130, 190, 171, 252, 127, 190, 202, 127, 120, 190, 118, 4, 88, 190, 208, 167, 51, 62, 183, 64, 98, 190, 164, 3, 20, 62, 79, 15, 9, 62, 92, 124, 185, 190, 208, 48, 84, 62, 135, 52, 26, 62, 25, 207, 113, 62, 4, 235, 172, 62, 204, 63, 56, 62, 228, 65, 166, 61, 159, 226, 201, 188, 27, 100, 42, 62, 50, 131, 22, 190, 115, 51, 5, 191, 166, 253, 209, 189, 182, 71, 107, 189, 244, 127, 221, 189, 226, 237, 13, 60, 168, 81, 25, 189, 231, 165, 91, 190, 165, 128, 250, 61, 153, 178, 45, 60, 112, 7, 42, 61, 67, 172, 70, 190, 72, 167, 60, 189, 224, 80, 71, 189, 152, 53, 154, 61, 195, 124, 81, 189, 143, 243, 125, 189, 75, 253, 197, 61, 169, 110, 144, 61, 211, 33, 36, 61, 201, 67, 9, 61, 212, 82, 32, 59, 130, 103, 1, 62, 19, 32, 190, 188, 7, 225, 255, 189, 244, 65, 236, 189, 172, 177, 48, 62, 174, 201, 67, 190, 101, 230, 247, 188, 87, 125, 185, 189, 20, 233, 209, 61, 2, 117, 140, 62, 124, 251, 237, 61, 255, 230, 252, 189, 163, 173, 3, 190, 140, 175, 205, 60, 68, 34, 26, 190, 126, 237, 12, 190, 194, 219, 229, 189, 252, 24, 11, 190, 206, 146, 1, 190, 39, 212, 156, 189, 182, 205, 178, 189, 153, 128, 230, 189, 110, 1, 239, 189, 225, 39, 214, 61, 32, 20, 16, 189, 86, 147, 86, 189, 224, 4, 233, 189, 157, 58, 183, 61, 198, 206, 97, 60, 232, 147, 118, 61, 188, 95, 193, 189, 120, 132, 45, 62, 146, 215, 172, 61, 213, 216, 165, 188, 97, 148, 14, 190, 245, 110, 196, 186, 196, 216, 175, 189, 102, 110, 227, 61, 202, 85, 129, 60, 7, 79, 46, 190, 207, 246, 39, 60, 172, 176, 245, 61, 179, 200, 69, 189, 205, 26, 32, 190, 100, 111, 163, 189, 182, 101, 33, 189, 135, 80, 89, 62, 212, 180, 3, 189, 16, 62, 238, 188, 184, 243, 35, 61, 96, 195, 52, 62, 108, 104, 25, 62, 30, 0, 143, 59, 42, 216, 102, 61, 110, 203, 239, 189, 231, 9, 215, 60, 248, 27, 167, 188, 140, 47, 166, 61, 98, 159, 69, 62, 220, 54, 180, 189, 180, 127, 95, 190, 28, 61, 42, 191, 112, 68, 148, 189, 3, 40, 165, 62, 186, 186, 163, 61, 242, 41, 67, 62, 149, 115, 219, 189, 59, 118, 100, 62, 9, 190, 186, 61, 96, 142, 33, 190, 1, 211, 118, 62, 200, 123, 145, 189, 64, 63, 203, 189, 115, 160, 66, 190, 7, 249, 76, 61, 116, 159, 65, 61, 8, 194, 210, 60, 76, 121, 179, 62, 233, 224, 197, 189, 26, 159, 219, 190, 105, 222, 128, 191, 114, 143, 12, 191, 140, 117, 170, 187, 17, 102, 145, 190, 241, 3, 24, 190, 199, 51, 86, 62, 37, 219, 179, 190, 116, 245, 134, 190, 13, 145, 102, 61, 77, 240, 55, 189, 251, 230, 211, 60, 24, 48, 128, 61, 243, 60, 66, 190, 149, 181, 30, 62, 2, 31, 52, 190, 144, 212, 76, 61, 218, 127, 1, 190, 176, 39, 64, 62, 24, 111, 222, 188, 122, 36, 241, 188, 69, 169, 174, 188, 236, 167, 231, 190, 101, 248, 239, 189, 252, 53, 243, 189, 67, 131, 34, 61, 74, 120, 0, 190, 213, 97, 208, 189, 60, 221, 195, 189, 140, 43, 200, 190, 72, 130, 115, 191, 37, 137, 3, 189, 136, 152, 120, 62, 209, 125, 216, 61, 253, 109, 29, 190, 151, 162, 247, 62, 166, 92, 49, 62, 91, 6, 166, 190, 136, 1, 8, 190, 188, 8, 239, 189, 28, 163, 166, 61, 171, 132, 199, 61, 217, 32, 1, 191, 183, 29, 191, 190, 241, 96, 88, 189, 174, 185, 4, 62, 54, 18, 242, 62, 144, 1, 144, 62, 92, 225, 56, 190, 184, 105, 54, 190, 99, 74, 233, 189, 193, 51, 63, 62, 246, 137, 125, 62, 3, 143, 98, 189, 185, 144, 251, 62, 10, 91, 76, 61, 91, 247, 15, 63, 154, 228, 111, 190, 119, 127, 124, 190, 172, 255, 135, 62, 59, 217, 14, 191, 11, 94, 21, 62, 1, 208, 35, 61, 58, 138, 127, 61, 93, 129, 183, 189, 40, 102, 36, 190, 130, 74, 194, 60, 19, 180, 35, 62, 67, 156, 2, 190, 121, 143, 0, 190, 78, 78, 137, 189, 7, 141, 2, 189, 188, 90, 86, 189, 233, 212, 176, 61, 165, 196, 35, 190, 252, 223, 0, 62, 77, 195, 152, 189, 133, 3, 56, 61, 116, 201, 6, 190, 202, 238, 175, 189, 64, 221, 229, 61, 122, 58, 46, 190, 148, 255, 176, 189, 114, 221, 22, 190, 55, 86, 2, 62, 162, 123, 251, 189, 18, 77, 234, 189, 84, 79, 51, 62, 106, 53, 77, 61, 90, 122, 12, 190, 15, 139, 30, 190, 102, 40, 247, 188, 164, 128, 168, 189, 82, 19, 217, 190, 88, 46, 35, 191, 5, 45, 160, 62, 204, 116, 112, 62, 52, 172, 45, 190, 150, 254, 152, 61, 31, 253, 217, 62, 16, 63, 4, 62, 142, 143, 101, 190, 139, 223, 202, 187, 83, 16, 161, 190, 18, 210, 150, 60, 234, 155, 24, 62, 203, 187, 129, 191, 67, 134, 162, 189, 11, 127, 35, 191, 149, 109, 45, 62, 81, 36, 148, 190, 155, 232, 180, 61, 246, 206, 132, 61, 175, 223, 60, 190, 117, 37, 37, 62, 69, 153, 227, 61, 46, 52, 10, 62, 94, 70, 248, 189, 50, 71, 233, 62, 119, 20, 251, 60, 206, 203, 37, 63, 114, 101, 91, 190, 91, 59, 67, 189, 112, 74, 87, 62, 11, 177, 54, 191, 102, 44, 130, 190, 110, 84, 81, 191, 138, 28, 49, 62, 200, 31, 105, 62, 103, 45, 226, 60, 247, 165, 50, 59, 97, 175, 145, 62, 59, 71, 64, 62, 211, 111, 152, 190, 226, 128, 55, 61, 76, 73, 39, 191, 60, 10, 6, 62, 192, 98, 44, 61, 59, 220, 47, 191, 139, 162, 5, 62, 38, 100, 5, 191, 53, 186, 152, 188, 173, 136, 92, 190, 54, 214, 183, 61, 249, 138, 88, 190, 250, 76, 41, 191, 127, 44, 28, 189, 172, 57, 155, 62, 14, 184, 15, 191, 50, 118, 51, 190, 80, 55, 195, 62, 205, 214, 160, 189, 127, 212, 94, 63, 157, 57, 149, 190, 208, 75, 62, 190, 214, 208, 55, 62, 246, 182, 52, 191, 27, 127, 31, 190, 215, 246, 246, 189, 63, 70, 30, 190, 77, 2, 2, 62, 243, 132, 35, 190, 250, 93, 66, 189, 128, 27, 194, 189, 25, 168, 31, 62, 110, 209, 3, 61, 201, 91, 199, 59, 230, 191, 119, 61, 96, 187, 31, 62, 65, 31, 170, 61, 234, 122, 217, 189, 5, 10, 174, 61, 14, 105, 6, 190, 116, 167, 41, 190, 20, 64, 174, 189, 136, 229, 93, 189, 160, 52, 210, 189, 210, 228, 1, 190, 126, 117, 51, 190, 171, 185, 179, 188, 200, 203, 39, 60, 138, 139, 169, 189, 130, 64, 22, 190, 107, 169, 150, 189, 30, 15, 122, 189, 84, 236, 55, 189, 140, 122, 25, 62, 155, 134, 13, 188, 90, 126, 253, 61, 239, 229, 15, 190, 116, 61, 60, 191, 188, 21, 175, 61, 107, 68, 42, 62, 94, 60, 170, 61, 169, 177, 92, 60, 180, 249, 161, 62, 73, 150, 214, 61, 51, 194, 163, 190, 183, 212, 153, 190, 222, 187, 24, 191, 249, 242, 15, 60, 69, 175, 152, 189, 184, 223, 47, 191, 94, 216, 20, 190, 97, 139, 171, 190, 234, 251, 111, 61, 212, 151, 35, 189, 53, 190, 139, 62, 178, 22, 61, 190, 85, 192, 181, 190, 141, 58, 50, 189, 110, 108, 33, 62, 41, 66, 195, 189, 169, 36, 103, 190, 196, 170, 90, 63, 7, 32, 21, 62, 172, 120, 46, 63, 14, 68, 129, 190, 111, 151, 78, 190, 55, 4, 156, 62, 182, 188, 76, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 250, 224, 61, 239, 154, 114, 60, 61, 60, 171, 187, 64, 128, 136, 62, 46, 153, 124, 62, 42, 210, 11, 62, 239, 7, 194, 61, 72, 211, 241, 61, 36, 206, 154, 60, 192, 197, 0, 62, 36, 154, 146, 62, 177, 80, 191, 189, 14, 232, 190, 61, 62, 27, 30, 61, 63, 58, 33, 190, 143, 187, 3, 62, 77, 142, 211, 62, 230, 39, 145, 62, 169, 230, 18, 189, 69, 234, 63, 190, 67, 138, 66, 62, 71, 222, 13, 62, 199, 39, 50, 190, 8, 52, 92, 61, 164, 191, 186, 62, 45, 242, 29, 190, 0, 225, 45, 189, 222, 133, 69, 61, 168, 113, 255, 61, 221, 155, 88, 62, 109, 242, 54, 190, 39, 132, 238, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 5, 42, 191, 221, 190, 196, 190, 225, 119, 11, 63, 149, 226, 30, 190, 178, 110, 20, 191, 134, 19, 183, 61, 17, 254, 213, 62, 207, 109, 138, 188, 148, 98, 123, 190, 195, 58, 88, 63, 129, 163, 25, 191, 163, 103, 55, 189, 16, 41, 197, 62, 197, 57, 252, 61, 76, 118, 137, 190, 233, 153, 48, 63, 141, 70, 161, 62, 157, 163, 133, 189, 100, 222, 42, 191, 206, 169, 74, 188, 72, 163, 61, 191, 88, 68, 8, 63, 255, 73, 42, 190, 141, 111, 174, 61, 49, 204, 243, 188, 197, 233, 38, 63, 152, 162, 245, 62, 188, 219, 33, 190, 109, 137, 184, 62, 184, 99, 18, 63, 189, 46, 181, 61, 193, 94, 27, 63, 201, 106, 75, 62, 149, 127, 177, 189, 198, 25, 6, 189, 127, 73, 37, 190, 112, 99, 140, 190, 63, 40, 68, 59, 154, 70, 159, 62, 140, 114, 129, 61, 5, 71, 227, 188, 227, 146, 189, 61, 108, 84, 161, 190, 253, 43, 117, 189, 243, 26, 181, 61, 78, 245, 240, 60, 71, 150, 240, 60, 180, 213, 228, 62, 27, 0, 147, 190, 227, 221, 103, 190, 53, 36, 141, 62, 247, 183, 125, 61, 55, 192, 228, 62, 163, 169, 0, 190, 226, 100, 143, 189, 221, 172, 83, 61, 53, 230, 57, 190, 163, 215, 201, 62, 229, 71, 175, 62, 95, 217, 40, 61, 10, 213, 233, 190, 150, 210, 72, 189, 186, 117, 225, 189, 113, 215, 143, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 24, 233, 61, 46, 211, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {251, 75, 53, 191, 243, 72, 135, 63, 11, 70, 2, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {173, 56, 144, 191, 38, 139, 68, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0018/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}