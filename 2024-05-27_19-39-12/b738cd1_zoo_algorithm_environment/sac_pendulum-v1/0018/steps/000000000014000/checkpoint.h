// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 171, 93, 62, 239, 22, 52, 191, 117, 98, 155, 62, 135, 98, 107, 63, 59, 215, 13, 62, 45, 54, 157, 62, 139, 247, 3, 63, 209, 162, 79, 63, 82, 135, 203, 62, 49, 120, 223, 62, 93, 64, 152, 191, 187, 61, 114, 190, 139, 148, 4, 191, 40, 20, 16, 191, 228, 21, 172, 187, 217, 214, 123, 191, 220, 255, 19, 191, 200, 62, 214, 189, 79, 148, 204, 190, 53, 127, 84, 191, 117, 0, 199, 189, 86, 67, 221, 190, 52, 169, 59, 189, 245, 87, 119, 59, 81, 211, 157, 62, 53, 73, 82, 63, 215, 205, 40, 191, 158, 250, 253, 188, 87, 207, 88, 63, 90, 255, 19, 63, 134, 253, 1, 62, 143, 34, 67, 62, 191, 69, 68, 191, 19, 99, 14, 61, 250, 181, 204, 191, 37, 165, 195, 62, 87, 199, 20, 190, 90, 21, 40, 62, 43, 167, 249, 190, 91, 60, 158, 190, 177, 202, 218, 61, 60, 70, 118, 191, 87, 179, 43, 191, 11, 180, 152, 191, 20, 145, 69, 190, 220, 183, 15, 190, 245, 76, 46, 63, 161, 229, 30, 191, 249, 205, 29, 191, 53, 227, 186, 62, 211, 6, 73, 62, 30, 170, 48, 63, 219, 180, 23, 190, 228, 148, 148, 190, 141, 92, 167, 190, 222, 110, 50, 189, 77, 158, 45, 63, 130, 3, 130, 63, 78, 184, 241, 61, 128, 231, 195, 61, 77, 42, 28, 62, 57, 121, 151, 191, 161, 114, 189, 190, 246, 87, 55, 63, 45, 183, 113, 63, 28, 244, 224, 62, 61, 162, 153, 62, 121, 72, 253, 61, 103, 201, 243, 62, 185, 161, 37, 63, 111, 179, 143, 191, 210, 9, 6, 191, 11, 204, 37, 63, 231, 169, 197, 190, 110, 115, 254, 62, 247, 92, 0, 63, 245, 173, 142, 191, 162, 35, 94, 190, 184, 249, 107, 62, 181, 194, 14, 63, 160, 51, 30, 62, 155, 52, 21, 191, 64, 28, 31, 191, 72, 188, 191, 190, 148, 41, 30, 63, 225, 192, 11, 63, 132, 57, 41, 63, 76, 48, 198, 190, 96, 177, 114, 190, 133, 78, 221, 188, 253, 229, 233, 190, 237, 147, 98, 62, 79, 14, 13, 63, 206, 113, 41, 189, 35, 182, 55, 63, 176, 58, 180, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 188, 221, 190, 144, 72, 152, 191, 97, 8, 209, 62, 125, 109, 137, 62, 255, 128, 229, 62, 109, 69, 86, 62, 184, 115, 41, 191, 79, 139, 250, 62, 48, 157, 26, 63, 104, 12, 255, 190, 126, 24, 112, 62, 53, 168, 42, 190, 49, 161, 61, 190, 64, 98, 149, 189, 240, 155, 57, 62, 102, 187, 63, 190, 223, 165, 186, 62, 138, 96, 142, 191, 63, 117, 217, 190, 241, 40, 79, 62, 154, 125, 233, 62, 230, 33, 13, 190, 204, 123, 209, 62, 251, 205, 195, 189, 224, 44, 206, 62, 62, 208, 2, 62, 156, 160, 191, 62, 27, 152, 201, 190, 160, 146, 139, 61, 117, 230, 44, 191, 101, 120, 86, 62, 25, 172, 64, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 224, 221, 61, 104, 83, 51, 63, 7, 212, 166, 189, 90, 119, 147, 190, 35, 252, 192, 62, 168, 230, 33, 62, 148, 31, 250, 190, 93, 51, 65, 62, 244, 204, 127, 62, 221, 69, 161, 60, 176, 150, 79, 190, 193, 150, 224, 190, 12, 116, 104, 190, 128, 64, 161, 62, 149, 148, 38, 62, 174, 186, 176, 189, 203, 100, 239, 61, 201, 168, 112, 191, 197, 183, 149, 190, 188, 6, 152, 62, 104, 251, 108, 190, 93, 150, 180, 62, 216, 26, 1, 190, 88, 65, 16, 191, 135, 22, 162, 62, 98, 173, 26, 191, 137, 53, 122, 62, 53, 195, 86, 190, 21, 97, 169, 62, 239, 188, 5, 190, 13, 247, 236, 189, 24, 195, 232, 62, 244, 186, 210, 189, 215, 184, 106, 62, 13, 204, 90, 188, 196, 100, 30, 190, 10, 219, 235, 188, 149, 200, 63, 62, 102, 225, 146, 190, 86, 137, 149, 62, 107, 37, 52, 62, 224, 5, 194, 60, 150, 145, 28, 62, 11, 246, 222, 190, 10, 239, 235, 189, 179, 44, 208, 62, 7, 121, 132, 62, 184, 23, 89, 190, 240, 127, 251, 59, 15, 236, 29, 191, 159, 234, 122, 190, 18, 80, 95, 62, 75, 222, 132, 61, 165, 209, 126, 62, 128, 163, 155, 189, 57, 93, 179, 190, 254, 245, 133, 62, 42, 221, 108, 190, 169, 209, 40, 62, 97, 48, 245, 189, 62, 10, 158, 62, 61, 216, 6, 190, 151, 222, 38, 190, 104, 159, 62, 62, 222, 170, 192, 60, 168, 23, 132, 191, 202, 200, 12, 190, 55, 184, 12, 62, 153, 224, 217, 60, 200, 96, 57, 189, 147, 208, 62, 61, 19, 17, 204, 61, 124, 179, 0, 190, 167, 36, 207, 190, 224, 234, 90, 190, 73, 177, 26, 62, 103, 175, 47, 62, 151, 26, 214, 61, 185, 70, 39, 61, 221, 113, 33, 189, 53, 73, 18, 62, 74, 9, 225, 189, 198, 217, 175, 62, 187, 160, 106, 57, 166, 21, 228, 190, 181, 112, 195, 190, 162, 241, 245, 61, 166, 218, 210, 190, 17, 41, 0, 189, 11, 47, 70, 63, 35, 158, 86, 62, 148, 222, 205, 62, 231, 100, 106, 190, 61, 240, 122, 189, 246, 162, 147, 61, 93, 7, 6, 191, 103, 203, 92, 61, 222, 232, 156, 62, 182, 30, 244, 60, 160, 55, 15, 62, 169, 32, 180, 189, 115, 36, 248, 61, 79, 15, 134, 191, 186, 217, 31, 62, 156, 102, 3, 190, 213, 169, 230, 189, 26, 1, 191, 61, 163, 92, 217, 61, 22, 117, 250, 190, 72, 186, 108, 190, 128, 16, 176, 62, 151, 5, 137, 190, 183, 180, 10, 62, 252, 10, 181, 190, 14, 122, 101, 61, 138, 82, 208, 62, 9, 157, 45, 62, 54, 68, 48, 62, 54, 125, 183, 189, 131, 118, 12, 190, 109, 79, 130, 62, 193, 25, 21, 190, 52, 44, 84, 189, 214, 148, 115, 191, 119, 125, 70, 62, 95, 168, 66, 62, 177, 118, 137, 61, 113, 22, 147, 62, 215, 112, 156, 189, 120, 237, 59, 62, 223, 201, 11, 62, 164, 47, 64, 190, 103, 249, 123, 189, 246, 98, 7, 189, 16, 226, 192, 189, 30, 90, 41, 62, 182, 252, 96, 62, 249, 67, 189, 190, 219, 119, 135, 189, 123, 215, 42, 190, 1, 248, 81, 189, 96, 148, 30, 190, 188, 250, 229, 191, 59, 170, 110, 62, 41, 130, 229, 61, 62, 196, 132, 191, 17, 48, 98, 190, 159, 232, 135, 62, 184, 202, 52, 191, 107, 104, 233, 61, 131, 197, 73, 62, 6, 184, 136, 189, 69, 50, 251, 61, 18, 135, 199, 61, 36, 183, 112, 62, 69, 238, 171, 191, 6, 16, 215, 188, 191, 253, 173, 61, 191, 18, 22, 62, 64, 15, 206, 62, 5, 117, 178, 188, 29, 20, 28, 62, 18, 208, 239, 189, 52, 110, 31, 190, 175, 190, 199, 189, 179, 150, 16, 190, 63, 129, 196, 189, 19, 145, 140, 189, 106, 241, 159, 61, 126, 73, 40, 190, 82, 209, 26, 190, 119, 226, 65, 189, 214, 75, 135, 189, 127, 118, 32, 190, 216, 23, 147, 189, 237, 142, 194, 189, 143, 63, 129, 187, 241, 177, 51, 62, 217, 217, 12, 60, 95, 166, 237, 189, 160, 32, 171, 189, 160, 96, 79, 189, 88, 191, 157, 61, 177, 237, 26, 190, 113, 227, 201, 189, 166, 126, 97, 189, 220, 225, 138, 188, 90, 91, 231, 60, 247, 50, 38, 190, 77, 133, 51, 190, 180, 138, 206, 60, 167, 169, 37, 190, 253, 141, 154, 189, 212, 207, 196, 190, 176, 180, 20, 190, 216, 235, 198, 62, 158, 103, 112, 189, 68, 13, 136, 60, 27, 105, 4, 63, 242, 24, 32, 190, 91, 8, 187, 190, 93, 241, 216, 189, 22, 125, 166, 190, 49, 132, 198, 189, 249, 92, 137, 190, 116, 169, 53, 191, 51, 74, 49, 190, 153, 184, 92, 190, 99, 211, 33, 62, 153, 144, 253, 59, 123, 22, 141, 62, 116, 236, 241, 189, 225, 139, 56, 189, 229, 248, 200, 190, 28, 151, 126, 61, 64, 136, 222, 61, 54, 162, 192, 189, 130, 151, 35, 63, 153, 171, 194, 189, 226, 249, 222, 62, 255, 24, 58, 61, 177, 159, 110, 189, 0, 170, 229, 61, 111, 164, 37, 191, 4, 7, 185, 61, 147, 176, 164, 189, 118, 195, 232, 189, 136, 225, 221, 189, 4, 232, 148, 189, 118, 189, 96, 189, 154, 251, 33, 190, 200, 92, 100, 189, 142, 126, 43, 61, 199, 39, 40, 190, 211, 138, 246, 189, 74, 81, 81, 61, 4, 80, 252, 59, 93, 207, 107, 189, 190, 141, 41, 190, 147, 206, 196, 188, 50, 60, 21, 189, 4, 158, 147, 189, 190, 25, 33, 190, 39, 48, 159, 189, 59, 211, 197, 61, 104, 66, 204, 189, 113, 30, 158, 189, 156, 210, 133, 189, 89, 59, 184, 189, 250, 193, 23, 190, 130, 22, 11, 189, 214, 104, 213, 59, 18, 88, 17, 190, 11, 55, 244, 189, 95, 136, 217, 61, 89, 155, 250, 189, 200, 44, 202, 60, 143, 45, 173, 188, 157, 164, 35, 62, 147, 36, 72, 190, 95, 193, 91, 60, 32, 109, 230, 61, 172, 73, 239, 61, 115, 139, 36, 60, 232, 120, 173, 62, 154, 97, 229, 189, 75, 116, 102, 61, 52, 38, 18, 190, 79, 32, 222, 189, 173, 94, 189, 62, 85, 126, 124, 188, 92, 166, 187, 190, 37, 11, 84, 190, 20, 8, 71, 191, 19, 135, 80, 190, 57, 34, 161, 62, 226, 51, 0, 62, 241, 172, 16, 62, 152, 254, 255, 189, 40, 207, 145, 190, 123, 187, 239, 60, 132, 70, 133, 190, 158, 194, 154, 61, 60, 94, 34, 62, 38, 185, 145, 61, 237, 193, 147, 189, 217, 10, 176, 189, 96, 85, 126, 62, 63, 137, 37, 190, 66, 111, 30, 191, 91, 85, 168, 189, 194, 196, 167, 62, 22, 45, 103, 62, 95, 159, 7, 188, 164, 143, 179, 62, 71, 107, 217, 61, 166, 10, 105, 191, 173, 146, 166, 190, 41, 52, 130, 191, 55, 90, 156, 61, 157, 109, 231, 189, 20, 96, 116, 191, 0, 134, 239, 61, 151, 144, 42, 190, 87, 124, 111, 62, 129, 115, 157, 190, 12, 119, 69, 62, 208, 102, 130, 190, 88, 112, 201, 190, 88, 251, 38, 190, 200, 78, 118, 61, 0, 21, 94, 191, 175, 166, 13, 190, 23, 199, 58, 63, 84, 108, 158, 60, 114, 115, 70, 63, 244, 64, 8, 189, 77, 88, 78, 189, 20, 176, 0, 62, 60, 93, 11, 191, 201, 190, 237, 190, 217, 250, 186, 60, 96, 205, 173, 190, 177, 140, 33, 189, 21, 252, 160, 61, 60, 12, 35, 62, 162, 44, 1, 189, 253, 146, 50, 189, 39, 236, 1, 62, 115, 2, 57, 191, 87, 177, 41, 62, 235, 72, 41, 191, 8, 141, 2, 190, 82, 35, 122, 189, 1, 240, 137, 62, 146, 52, 139, 190, 107, 62, 10, 191, 100, 151, 119, 191, 69, 52, 142, 191, 207, 15, 181, 61, 250, 224, 54, 62, 165, 109, 32, 62, 251, 93, 87, 190, 64, 73, 42, 190, 82, 226, 39, 62, 46, 157, 186, 190, 102, 97, 9, 62, 196, 187, 184, 189, 130, 185, 98, 62, 153, 92, 19, 62, 4, 107, 167, 190, 152, 102, 94, 62, 137, 185, 192, 61, 196, 131, 35, 62, 244, 193, 47, 189, 170, 73, 138, 61, 85, 134, 44, 189, 69, 196, 208, 189, 31, 43, 137, 61, 203, 20, 17, 189, 21, 28, 156, 61, 97, 19, 32, 190, 7, 167, 165, 189, 166, 96, 173, 188, 249, 91, 6, 189, 22, 135, 251, 189, 172, 16, 3, 190, 91, 52, 40, 190, 137, 172, 18, 62, 19, 142, 225, 60, 249, 136, 54, 189, 21, 183, 40, 190, 5, 163, 217, 189, 129, 32, 217, 61, 127, 93, 65, 189, 193, 85, 102, 189, 1, 52, 161, 189, 57, 21, 156, 61, 144, 23, 188, 188, 98, 181, 45, 190, 24, 210, 29, 189, 24, 230, 3, 62, 219, 192, 113, 61, 169, 250, 186, 189, 243, 211, 47, 190, 173, 80, 137, 61, 239, 187, 241, 189, 75, 0, 88, 62, 196, 78, 189, 189, 236, 95, 55, 59, 189, 56, 187, 190, 101, 198, 222, 189, 235, 236, 204, 62, 191, 208, 145, 190, 146, 198, 209, 62, 219, 234, 176, 190, 78, 26, 168, 188, 83, 65, 215, 60, 164, 254, 219, 190, 10, 130, 51, 62, 160, 114, 116, 62, 33, 131, 20, 63, 148, 8, 240, 190, 7, 222, 217, 188, 85, 113, 37, 61, 141, 180, 166, 189, 152, 183, 9, 61, 22, 30, 61, 62, 68, 169, 9, 190, 123, 59, 167, 62, 207, 111, 21, 189, 13, 244, 106, 189, 93, 52, 56, 189, 199, 104, 27, 189, 215, 234, 20, 190, 159, 227, 217, 61, 40, 96, 63, 61, 189, 101, 170, 60, 242, 145, 206, 60, 167, 102, 49, 190, 253, 91, 28, 62, 38, 249, 57, 188, 247, 0, 45, 62, 227, 36, 28, 190, 160, 226, 220, 189, 221, 74, 45, 190, 237, 191, 136, 61, 127, 121, 3, 189, 55, 20, 62, 61, 132, 196, 9, 188, 90, 102, 51, 190, 199, 236, 163, 189, 135, 220, 55, 60, 208, 131, 170, 61, 41, 192, 218, 188, 56, 224, 12, 190, 120, 244, 137, 189, 53, 207, 30, 190, 49, 12, 37, 190, 105, 240, 58, 61, 74, 141, 24, 190, 51, 220, 143, 60, 208, 32, 141, 189, 90, 98, 135, 60, 147, 30, 9, 190, 182, 233, 43, 62, 45, 133, 195, 189, 44, 105, 73, 187, 40, 45, 171, 61, 44, 143, 1, 63, 220, 38, 156, 60, 70, 146, 167, 61, 246, 8, 23, 62, 54, 212, 218, 188, 173, 115, 149, 191, 115, 53, 205, 189, 140, 85, 152, 190, 199, 35, 123, 61, 136, 11, 9, 62, 150, 248, 187, 62, 29, 22, 202, 190, 140, 216, 137, 190, 23, 75, 133, 62, 129, 143, 84, 190, 180, 36, 230, 189, 93, 26, 209, 61, 201, 195, 4, 62, 230, 241, 161, 187, 229, 180, 138, 62, 145, 202, 217, 189, 108, 183, 136, 62, 25, 27, 166, 62, 72, 132, 54, 187, 205, 255, 67, 190, 22, 27, 1, 189, 14, 29, 150, 191, 61, 208, 207, 61, 102, 174, 201, 61, 54, 176, 94, 61, 189, 98, 228, 190, 111, 249, 120, 61, 132, 55, 143, 189, 57, 248, 34, 62, 6, 225, 26, 191, 17, 253, 32, 191, 50, 31, 216, 190, 194, 70, 147, 190, 238, 20, 176, 190, 110, 222, 72, 189, 86, 237, 83, 62, 220, 84, 158, 189, 128, 19, 145, 190, 208, 190, 39, 190, 78, 252, 36, 61, 103, 52, 101, 191, 119, 5, 13, 190, 75, 221, 45, 62, 210, 66, 1, 190, 74, 151, 180, 60, 47, 80, 213, 62, 29, 115, 216, 191, 33, 90, 210, 62, 14, 45, 144, 58, 36, 6, 117, 191, 39, 214, 160, 189, 10, 61, 250, 190, 37, 138, 128, 62, 24, 239, 44, 62, 134, 213, 171, 62, 55, 2, 99, 59, 73, 102, 68, 190, 163, 135, 106, 62, 118, 250, 159, 190, 180, 206, 4, 62, 32, 229, 70, 60, 166, 204, 141, 62, 41, 4, 184, 61, 76, 236, 32, 190, 199, 115, 137, 190, 211, 163, 8, 62, 57, 31, 160, 62, 246, 38, 111, 62, 148, 158, 140, 62, 17, 201, 168, 190, 162, 76, 191, 188, 35, 79, 0, 62, 103, 15, 136, 190, 232, 206, 110, 190, 252, 4, 133, 188, 178, 160, 153, 190, 0, 245, 161, 190, 77, 47, 79, 62, 235, 176, 181, 61, 243, 44, 166, 61, 5, 173, 159, 189, 130, 131, 33, 60, 131, 216, 208, 188, 184, 67, 205, 61, 9, 111, 68, 61, 23, 144, 85, 190, 0, 30, 27, 189, 75, 4, 20, 190, 188, 43, 179, 190, 168, 111, 89, 62, 150, 159, 20, 190, 126, 185, 115, 61, 117, 91, 128, 61, 117, 31, 45, 62, 104, 148, 45, 190, 246, 17, 161, 188, 146, 127, 38, 62, 222, 4, 233, 61, 22, 161, 245, 61, 48, 41, 223, 189, 97, 61, 245, 60, 215, 208, 131, 61, 236, 91, 193, 189, 153, 101, 161, 61, 50, 167, 137, 62, 156, 145, 116, 190, 209, 91, 18, 61, 230, 168, 61, 191, 23, 226, 128, 61, 205, 128, 123, 62, 208, 23, 118, 62, 164, 138, 147, 62, 74, 122, 25, 189, 29, 221, 160, 61, 116, 131, 101, 62, 169, 195, 193, 190, 138, 251, 70, 61, 181, 165, 150, 189, 75, 195, 8, 60, 2, 76, 213, 61, 146, 206, 253, 60, 83, 116, 6, 61, 29, 68, 191, 62, 143, 50, 0, 190, 53, 87, 160, 191, 167, 102, 159, 62, 137, 105, 108, 62, 255, 194, 27, 191, 244, 134, 96, 62, 203, 169, 19, 190, 56, 180, 69, 190, 113, 213, 174, 60, 187, 174, 193, 189, 83, 131, 63, 63, 26, 175, 165, 189, 246, 66, 159, 61, 217, 244, 28, 62, 121, 139, 53, 62, 251, 16, 3, 190, 109, 204, 14, 63, 189, 226, 160, 62, 133, 190, 171, 190, 24, 234, 92, 62, 173, 155, 166, 191, 44, 68, 31, 190, 221, 242, 121, 62, 51, 98, 21, 62, 64, 139, 245, 62, 8, 187, 32, 191, 30, 14, 18, 188, 107, 88, 233, 190, 55, 153, 164, 61, 81, 177, 28, 61, 7, 5, 166, 190, 10, 104, 24, 59, 56, 221, 190, 189, 122, 186, 229, 61, 13, 223, 102, 189, 40, 7, 152, 189, 196, 34, 71, 190, 24, 5, 166, 60, 202, 92, 239, 61, 190, 137, 54, 189, 161, 1, 83, 188, 1, 71, 76, 61, 56, 16, 160, 189, 133, 222, 197, 188, 212, 26, 156, 189, 254, 209, 34, 190, 0, 94, 13, 62, 157, 50, 16, 190, 107, 94, 251, 61, 45, 126, 27, 190, 97, 137, 9, 189, 243, 201, 209, 188, 71, 188, 180, 189, 228, 246, 8, 62, 17, 39, 149, 189, 17, 54, 61, 190, 17, 154, 43, 190, 197, 159, 62, 190, 201, 32, 243, 61, 244, 178, 223, 61, 123, 95, 194, 189, 223, 93, 141, 61, 56, 168, 39, 190, 248, 196, 178, 62, 1, 195, 157, 188, 97, 36, 207, 190, 234, 55, 132, 190, 146, 245, 133, 62, 149, 16, 178, 62, 128, 16, 15, 61, 212, 110, 69, 62, 233, 91, 43, 61, 198, 50, 161, 61, 238, 190, 4, 190, 78, 189, 23, 191, 94, 66, 199, 189, 206, 149, 213, 62, 42, 122, 248, 62, 217, 172, 136, 190, 38, 241, 43, 191, 163, 138, 51, 191, 183, 208, 57, 191, 226, 232, 40, 62, 65, 0, 92, 62, 233, 84, 24, 63, 102, 163, 207, 190, 118, 237, 18, 191, 23, 39, 117, 62, 13, 66, 128, 190, 250, 211, 147, 189, 118, 90, 137, 190, 242, 240, 9, 63, 153, 145, 192, 189, 254, 94, 234, 190, 122, 35, 180, 62, 155, 98, 140, 62, 159, 66, 199, 191, 64, 235, 43, 60, 35, 107, 217, 62, 76, 119, 131, 61, 72, 54, 150, 190, 17, 251, 181, 61, 63, 47, 240, 60, 144, 81, 159, 60, 203, 231, 122, 189, 214, 143, 122, 190, 207, 69, 214, 189, 7, 173, 178, 189, 81, 188, 133, 190, 176, 2, 160, 190, 121, 198, 86, 190, 213, 213, 96, 190, 82, 106, 157, 61, 36, 134, 112, 190, 35, 200, 13, 62, 34, 227, 243, 61, 30, 128, 198, 190, 19, 131, 71, 62, 84, 109, 252, 61, 157, 119, 103, 62, 220, 128, 163, 62, 181, 82, 56, 62, 217, 127, 184, 61, 72, 171, 6, 189, 27, 100, 42, 62, 79, 152, 41, 190, 157, 136, 247, 190, 166, 253, 209, 189, 182, 71, 107, 189, 244, 127, 221, 189, 226, 237, 13, 60, 168, 81, 25, 189, 231, 165, 91, 190, 165, 128, 250, 61, 153, 178, 45, 60, 112, 7, 42, 61, 67, 172, 70, 190, 72, 167, 60, 189, 224, 80, 71, 189, 152, 53, 154, 61, 195, 124, 81, 189, 143, 243, 125, 189, 75, 253, 197, 61, 169, 110, 144, 61, 211, 33, 36, 61, 201, 67, 9, 61, 212, 82, 32, 59, 130, 103, 1, 62, 19, 32, 190, 188, 7, 225, 255, 189, 244, 65, 236, 189, 172, 177, 48, 62, 174, 201, 67, 190, 101, 230, 247, 188, 87, 125, 185, 189, 20, 233, 209, 61, 2, 117, 140, 62, 124, 251, 237, 61, 255, 230, 252, 189, 163, 173, 3, 190, 140, 175, 205, 60, 68, 34, 26, 190, 126, 237, 12, 190, 194, 219, 229, 189, 252, 24, 11, 190, 206, 146, 1, 190, 39, 212, 156, 189, 182, 205, 178, 189, 153, 128, 230, 189, 110, 1, 239, 189, 225, 39, 214, 61, 32, 20, 16, 189, 86, 147, 86, 189, 224, 4, 233, 189, 157, 58, 183, 61, 198, 206, 97, 60, 232, 147, 118, 61, 188, 95, 193, 189, 120, 132, 45, 62, 146, 215, 172, 61, 213, 216, 165, 188, 97, 148, 14, 190, 245, 110, 196, 186, 196, 216, 175, 189, 102, 110, 227, 61, 202, 85, 129, 60, 7, 79, 46, 190, 207, 246, 39, 60, 172, 176, 245, 61, 179, 200, 69, 189, 205, 26, 32, 190, 148, 32, 143, 189, 77, 113, 6, 189, 46, 240, 82, 62, 55, 41, 169, 188, 189, 239, 34, 189, 90, 88, 47, 61, 19, 25, 238, 61, 143, 132, 10, 62, 77, 168, 31, 59, 212, 112, 66, 61, 161, 109, 222, 189, 75, 182, 147, 60, 62, 138, 195, 185, 61, 53, 210, 61, 128, 176, 113, 62, 161, 237, 154, 189, 64, 65, 108, 190, 205, 0, 49, 191, 38, 196, 168, 189, 119, 231, 153, 62, 71, 53, 187, 61, 86, 226, 74, 62, 79, 236, 215, 189, 115, 198, 109, 62, 244, 214, 175, 61, 149, 23, 27, 190, 254, 35, 100, 62, 164, 200, 131, 189, 85, 176, 185, 189, 115, 160, 66, 190, 169, 233, 61, 61, 141, 129, 50, 61, 8, 194, 210, 60, 76, 121, 179, 62, 233, 224, 197, 189, 26, 159, 219, 190, 105, 222, 128, 191, 114, 143, 12, 191, 140, 117, 170, 187, 17, 102, 145, 190, 241, 3, 24, 190, 199, 51, 86, 62, 37, 219, 179, 190, 116, 245, 134, 190, 13, 145, 102, 61, 77, 240, 55, 189, 251, 230, 211, 60, 24, 48, 128, 61, 243, 60, 66, 190, 149, 181, 30, 62, 2, 31, 52, 190, 144, 212, 76, 61, 218, 127, 1, 190, 176, 39, 64, 62, 24, 111, 222, 188, 122, 36, 241, 188, 69, 169, 174, 188, 236, 167, 231, 190, 101, 248, 239, 189, 252, 53, 243, 189, 67, 131, 34, 61, 74, 120, 0, 190, 213, 97, 208, 189, 60, 221, 195, 189, 88, 85, 205, 190, 222, 23, 136, 191, 220, 145, 203, 188, 135, 44, 139, 62, 198, 93, 199, 61, 220, 149, 48, 190, 127, 71, 16, 63, 39, 24, 48, 62, 230, 209, 163, 190, 41, 43, 20, 190, 152, 193, 242, 189, 10, 169, 154, 61, 69, 210, 222, 60, 53, 29, 30, 191, 202, 251, 236, 190, 234, 178, 251, 189, 28, 107, 240, 61, 54, 18, 242, 62, 113, 182, 136, 62, 151, 243, 40, 190, 154, 208, 30, 190, 159, 92, 7, 190, 155, 162, 61, 62, 1, 230, 122, 62, 76, 153, 87, 189, 66, 47, 5, 63, 8, 211, 121, 61, 143, 83, 35, 63, 118, 158, 115, 190, 119, 127, 124, 190, 128, 26, 131, 62, 93, 140, 16, 191, 11, 94, 21, 62, 1, 208, 35, 61, 58, 138, 127, 61, 93, 129, 183, 189, 40, 102, 36, 190, 130, 74, 194, 60, 19, 180, 35, 62, 67, 156, 2, 190, 121, 143, 0, 190, 78, 78, 137, 189, 7, 141, 2, 189, 188, 90, 86, 189, 233, 212, 176, 61, 165, 196, 35, 190, 252, 223, 0, 62, 77, 195, 152, 189, 133, 3, 56, 61, 116, 201, 6, 190, 202, 238, 175, 189, 64, 221, 229, 61, 122, 58, 46, 190, 148, 255, 176, 189, 114, 221, 22, 190, 55, 86, 2, 62, 162, 123, 251, 189, 18, 77, 234, 189, 84, 79, 51, 62, 106, 53, 77, 61, 90, 122, 12, 190, 15, 139, 30, 190, 102, 40, 247, 188, 164, 128, 168, 189, 20, 156, 220, 190, 97, 88, 41, 191, 142, 150, 165, 62, 55, 203, 100, 62, 58, 250, 57, 190, 3, 161, 1, 62, 35, 244, 17, 63, 235, 52, 249, 61, 128, 233, 113, 190, 6, 88, 114, 188, 251, 105, 171, 190, 140, 133, 140, 187, 199, 181, 173, 62, 15, 238, 124, 191, 125, 173, 140, 189, 227, 206, 61, 191, 0, 82, 31, 62, 81, 36, 148, 190, 42, 128, 166, 61, 32, 10, 145, 61, 248, 199, 66, 190, 197, 190, 51, 62, 72, 218, 233, 61, 96, 114, 224, 61, 178, 178, 238, 189, 194, 153, 226, 62, 219, 81, 43, 61, 241, 117, 97, 63, 44, 85, 76, 190, 91, 59, 67, 189, 94, 26, 79, 62, 252, 198, 91, 191, 172, 25, 130, 190, 84, 226, 119, 191, 186, 0, 41, 62, 55, 108, 147, 62, 209, 207, 11, 61, 138, 227, 37, 187, 59, 2, 101, 62, 8, 41, 65, 62, 197, 220, 126, 190, 162, 253, 155, 60, 117, 237, 44, 191, 17, 20, 7, 62, 118, 171, 105, 59, 117, 115, 54, 191, 244, 168, 18, 62, 9, 204, 5, 191, 127, 216, 9, 189, 173, 136, 92, 190, 117, 176, 149, 61, 217, 161, 76, 190, 112, 111, 23, 191, 101, 12, 104, 189, 194, 255, 151, 62, 218, 10, 50, 191, 160, 128, 51, 190, 37, 213, 224, 62, 236, 141, 167, 189, 154, 76, 84, 63, 118, 236, 152, 190, 208, 75, 62, 190, 253, 42, 42, 62, 3, 231, 39, 191, 27, 127, 31, 190, 215, 246, 246, 189, 63, 70, 30, 190, 77, 2, 2, 62, 243, 132, 35, 190, 250, 93, 66, 189, 128, 27, 194, 189, 25, 168, 31, 62, 110, 209, 3, 61, 201, 91, 199, 59, 230, 191, 119, 61, 96, 187, 31, 62, 65, 31, 170, 61, 234, 122, 217, 189, 5, 10, 174, 61, 14, 105, 6, 190, 116, 167, 41, 190, 20, 64, 174, 189, 136, 229, 93, 189, 160, 52, 210, 189, 210, 228, 1, 190, 126, 117, 51, 190, 171, 185, 179, 188, 200, 203, 39, 60, 138, 139, 169, 189, 130, 64, 22, 190, 107, 169, 150, 189, 30, 15, 122, 189, 84, 236, 55, 189, 140, 122, 25, 62, 155, 134, 13, 188, 90, 126, 253, 61, 95, 87, 21, 190, 169, 129, 100, 191, 173, 213, 173, 61, 75, 65, 81, 62, 30, 205, 195, 61, 97, 194, 159, 60, 205, 239, 217, 62, 24, 128, 239, 61, 170, 31, 129, 190, 41, 42, 159, 190, 124, 232, 210, 190, 10, 202, 4, 60, 54, 239, 175, 61, 103, 134, 12, 191, 229, 211, 12, 190, 95, 139, 199, 190, 171, 207, 113, 61, 212, 151, 35, 189, 114, 84, 135, 62, 205, 167, 66, 190, 240, 26, 154, 190, 67, 158, 125, 189, 201, 88, 28, 62, 53, 140, 145, 189, 55, 195, 105, 190, 55, 215, 99, 63, 155, 56, 25, 62, 255, 178, 94, 63, 187, 198, 130, 190, 111, 151, 78, 190, 139, 112, 154, 62, 224, 55, 60, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 32, 2, 62, 136, 40, 218, 59, 75, 162, 21, 60, 44, 9, 143, 62, 33, 46, 130, 62, 42, 210, 11, 62, 123, 31, 202, 61, 72, 211, 241, 61, 149, 207, 189, 59, 30, 116, 11, 62, 124, 35, 153, 62, 177, 80, 191, 189, 154, 165, 195, 61, 62, 27, 30, 61, 88, 30, 38, 190, 137, 252, 210, 61, 32, 190, 215, 62, 168, 73, 146, 62, 167, 29, 115, 189, 69, 234, 63, 190, 255, 47, 63, 62, 161, 43, 8, 62, 199, 39, 50, 190, 8, 52, 92, 61, 199, 137, 185, 62, 45, 242, 29, 190, 243, 34, 2, 189, 222, 133, 69, 61, 197, 44, 252, 61, 73, 22, 103, 62, 109, 242, 54, 190, 124, 143, 3, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 201, 53, 191, 138, 91, 188, 190, 115, 200, 37, 63, 208, 51, 35, 190, 146, 56, 28, 191, 134, 19, 183, 61, 63, 56, 214, 62, 207, 109, 138, 188, 189, 153, 106, 190, 52, 60, 93, 63, 77, 84, 15, 191, 163, 103, 55, 189, 157, 165, 195, 62, 197, 57, 252, 61, 90, 20, 139, 190, 72, 203, 58, 63, 26, 78, 160, 62, 28, 239, 102, 189, 76, 59, 73, 191, 206, 169, 74, 188, 230, 204, 48, 191, 240, 120, 6, 63, 255, 73, 42, 190, 141, 111, 174, 61, 195, 154, 184, 188, 197, 233, 38, 63, 150, 46, 239, 62, 188, 219, 33, 190, 250, 59, 180, 62, 22, 205, 19, 63, 189, 46, 181, 61, 88, 119, 38, 63, 119, 212, 91, 62, 117, 118, 247, 189, 248, 165, 92, 190, 186, 254, 37, 190, 181, 148, 122, 190, 63, 40, 68, 59, 26, 79, 0, 63, 140, 114, 129, 61, 38, 32, 217, 188, 162, 199, 74, 60, 80, 25, 166, 190, 253, 43, 117, 189, 86, 74, 148, 61, 78, 245, 240, 60, 38, 116, 75, 61, 159, 134, 236, 62, 200, 19, 148, 190, 0, 188, 109, 190, 58, 181, 68, 62, 247, 183, 125, 61, 218, 73, 14, 63, 195, 57, 26, 190, 226, 100, 143, 189, 221, 172, 83, 61, 218, 14, 57, 190, 163, 215, 201, 62, 154, 120, 3, 63, 95, 217, 40, 61, 68, 186, 235, 190, 105, 214, 157, 189, 186, 117, 225, 189, 30, 246, 114, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {174, 51, 232, 61, 89, 163, 157, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {210, 178, 148, 62, 73, 169, 190, 189, 98, 65, 210, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {134, 156, 137, 62, 193, 240, 166, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0018/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}