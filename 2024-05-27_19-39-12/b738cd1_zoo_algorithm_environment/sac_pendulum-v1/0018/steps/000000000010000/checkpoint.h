// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {126, 135, 149, 62, 193, 44, 44, 191, 167, 46, 166, 62, 221, 116, 253, 62, 128, 151, 145, 62, 76, 47, 155, 62, 169, 9, 7, 63, 106, 197, 24, 63, 3, 211, 171, 62, 214, 120, 228, 62, 218, 50, 143, 191, 93, 91, 84, 190, 243, 55, 6, 191, 80, 222, 212, 190, 97, 19, 46, 61, 197, 90, 115, 191, 224, 233, 13, 191, 38, 74, 8, 189, 196, 51, 242, 190, 127, 116, 96, 191, 233, 32, 120, 189, 185, 41, 212, 190, 254, 198, 190, 189, 27, 165, 166, 60, 113, 220, 155, 62, 68, 224, 42, 63, 16, 243, 62, 191, 169, 180, 155, 61, 134, 240, 48, 63, 15, 120, 22, 63, 29, 67, 246, 61, 158, 185, 116, 62, 229, 12, 68, 191, 15, 121, 198, 59, 66, 254, 187, 191, 216, 197, 230, 62, 0, 129, 54, 190, 143, 83, 74, 62, 40, 22, 1, 191, 185, 96, 17, 191, 2, 108, 110, 62, 187, 234, 111, 191, 109, 208, 53, 191, 52, 48, 137, 191, 124, 68, 29, 190, 53, 69, 25, 190, 57, 103, 38, 63, 4, 201, 34, 191, 247, 156, 17, 191, 187, 212, 131, 62, 49, 49, 131, 62, 111, 86, 27, 63, 48, 87, 72, 190, 129, 255, 144, 190, 108, 170, 160, 190, 207, 4, 221, 188, 173, 241, 47, 63, 42, 57, 131, 63, 193, 158, 149, 61, 63, 231, 210, 61, 98, 170, 184, 61, 121, 211, 135, 191, 115, 215, 204, 190, 93, 189, 61, 63, 49, 215, 89, 63, 137, 45, 202, 62, 121, 64, 177, 62, 55, 185, 226, 61, 89, 174, 244, 62, 35, 190, 36, 63, 65, 191, 130, 191, 174, 130, 5, 191, 54, 215, 44, 63, 99, 92, 242, 190, 50, 86, 1, 63, 56, 176, 253, 62, 77, 148, 134, 191, 170, 47, 52, 190, 111, 146, 142, 62, 187, 99, 137, 62, 129, 148, 250, 61, 63, 126, 228, 190, 48, 124, 24, 191, 108, 251, 175, 190, 213, 212, 42, 63, 47, 238, 203, 62, 91, 186, 42, 63, 76, 48, 198, 190, 96, 177, 114, 190, 133, 78, 221, 188, 84, 247, 3, 191, 37, 255, 86, 62, 17, 37, 18, 63, 180, 188, 133, 189, 47, 193, 35, 63, 196, 228, 189, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 111, 182, 190, 181, 74, 154, 191, 83, 121, 232, 62, 206, 82, 142, 62, 28, 179, 208, 62, 179, 186, 129, 62, 71, 115, 21, 191, 30, 204, 254, 62, 141, 131, 27, 63, 104, 82, 5, 191, 82, 75, 205, 62, 115, 228, 27, 190, 113, 77, 26, 190, 247, 146, 215, 189, 244, 132, 171, 61, 190, 25, 42, 190, 166, 118, 189, 62, 5, 131, 132, 191, 223, 103, 220, 190, 194, 246, 94, 62, 137, 86, 12, 63, 43, 148, 252, 189, 95, 160, 230, 62, 217, 166, 170, 189, 113, 43, 205, 62, 177, 23, 29, 62, 210, 234, 213, 62, 71, 110, 198, 190, 235, 207, 38, 61, 117, 230, 44, 191, 173, 7, 63, 62, 170, 43, 106, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 211, 218, 61, 127, 168, 4, 63, 181, 69, 243, 189, 128, 187, 107, 190, 20, 58, 181, 62, 76, 115, 29, 62, 200, 201, 16, 191, 120, 1, 22, 62, 74, 127, 97, 62, 228, 0, 27, 61, 43, 55, 91, 190, 19, 112, 228, 190, 107, 200, 110, 190, 241, 92, 161, 62, 7, 206, 59, 62, 227, 139, 215, 189, 73, 60, 240, 61, 178, 109, 249, 190, 63, 131, 148, 190, 154, 202, 140, 62, 119, 16, 60, 190, 102, 248, 177, 62, 145, 65, 29, 190, 48, 182, 2, 191, 211, 72, 160, 62, 236, 63, 11, 191, 6, 168, 73, 62, 29, 22, 67, 190, 224, 194, 164, 62, 239, 188, 5, 190, 23, 52, 246, 189, 247, 20, 219, 62, 239, 138, 217, 189, 102, 236, 93, 62, 52, 194, 100, 188, 144, 228, 232, 189, 207, 1, 146, 189, 244, 42, 53, 62, 158, 10, 128, 190, 108, 40, 133, 62, 47, 224, 63, 62, 86, 177, 89, 60, 225, 30, 41, 62, 49, 129, 223, 190, 196, 136, 237, 189, 184, 241, 210, 62, 56, 176, 140, 62, 132, 40, 94, 190, 225, 104, 80, 189, 171, 248, 238, 190, 47, 137, 143, 190, 151, 234, 132, 62, 230, 129, 244, 61, 96, 53, 130, 62, 55, 169, 183, 189, 228, 34, 155, 190, 211, 248, 142, 62, 186, 162, 65, 190, 19, 124, 47, 62, 63, 104, 209, 189, 20, 16, 155, 62, 61, 216, 6, 190, 247, 59, 97, 190, 20, 52, 59, 62, 157, 208, 98, 188, 84, 82, 8, 191, 149, 25, 10, 190, 127, 95, 169, 60, 180, 24, 152, 188, 4, 83, 157, 189, 244, 106, 33, 189, 250, 154, 174, 61, 134, 104, 19, 190, 251, 212, 179, 190, 118, 112, 128, 190, 22, 115, 249, 61, 149, 88, 53, 62, 130, 255, 169, 189, 45, 209, 38, 189, 110, 206, 90, 62, 178, 236, 54, 62, 73, 16, 68, 189, 119, 180, 183, 62, 185, 120, 31, 189, 226, 120, 242, 190, 136, 82, 183, 190, 53, 76, 236, 61, 142, 202, 114, 190, 209, 116, 111, 189, 163, 212, 41, 63, 231, 44, 89, 62, 36, 90, 11, 62, 25, 240, 123, 190, 61, 240, 122, 189, 132, 238, 176, 61, 196, 12, 193, 190, 67, 143, 23, 61, 196, 191, 45, 62, 105, 255, 174, 60, 52, 29, 44, 62, 101, 77, 249, 189, 237, 218, 75, 61, 218, 56, 132, 191, 124, 111, 24, 62, 213, 224, 24, 190, 54, 120, 169, 189, 20, 45, 156, 61, 222, 3, 189, 61, 15, 23, 11, 191, 137, 246, 160, 190, 57, 121, 41, 62, 112, 120, 191, 190, 75, 28, 12, 62, 255, 9, 160, 190, 73, 231, 133, 61, 89, 162, 200, 62, 251, 55, 54, 62, 50, 195, 42, 62, 207, 195, 203, 189, 23, 168, 252, 189, 139, 178, 128, 62, 5, 204, 239, 189, 232, 94, 102, 189, 203, 65, 67, 191, 80, 131, 76, 62, 95, 168, 66, 62, 88, 164, 140, 61, 154, 226, 108, 62, 51, 32, 160, 189, 67, 111, 47, 62, 117, 173, 228, 61, 20, 241, 47, 190, 162, 246, 254, 189, 141, 75, 154, 189, 16, 226, 192, 189, 129, 110, 233, 61, 148, 168, 102, 62, 181, 97, 161, 190, 166, 133, 39, 189, 176, 151, 36, 190, 188, 167, 35, 189, 73, 114, 4, 190, 241, 95, 186, 191, 72, 212, 98, 62, 26, 52, 210, 61, 181, 225, 47, 191, 122, 112, 48, 190, 88, 197, 130, 62, 18, 175, 43, 191, 158, 221, 242, 61, 228, 9, 39, 62, 2, 38, 185, 188, 37, 3, 222, 61, 5, 89, 237, 61, 82, 239, 83, 62, 4, 53, 142, 191, 8, 68, 1, 189, 191, 253, 173, 61, 205, 31, 25, 62, 183, 159, 199, 62, 5, 117, 178, 188, 29, 20, 28, 62, 18, 208, 239, 189, 52, 110, 31, 190, 175, 190, 199, 189, 179, 150, 16, 190, 63, 129, 196, 189, 19, 145, 140, 189, 106, 241, 159, 61, 126, 73, 40, 190, 82, 209, 26, 190, 119, 226, 65, 189, 214, 75, 135, 189, 127, 118, 32, 190, 216, 23, 147, 189, 237, 142, 194, 189, 143, 63, 129, 187, 241, 177, 51, 62, 217, 217, 12, 60, 95, 166, 237, 189, 160, 32, 171, 189, 160, 96, 79, 189, 88, 191, 157, 61, 177, 237, 26, 190, 113, 227, 201, 189, 166, 126, 97, 189, 220, 225, 138, 188, 90, 91, 231, 60, 247, 50, 38, 190, 77, 133, 51, 190, 180, 138, 206, 60, 167, 169, 37, 190, 128, 209, 246, 189, 81, 106, 41, 190, 5, 15, 235, 189, 148, 102, 137, 62, 129, 198, 165, 189, 137, 205, 88, 61, 90, 163, 232, 62, 252, 164, 244, 189, 0, 48, 153, 190, 173, 244, 174, 189, 72, 183, 150, 190, 29, 120, 16, 190, 58, 246, 33, 189, 111, 9, 227, 190, 255, 180, 8, 60, 69, 67, 27, 188, 248, 110, 88, 62, 138, 252, 23, 60, 188, 228, 142, 62, 196, 182, 216, 189, 100, 34, 189, 189, 178, 46, 152, 190, 177, 219, 142, 61, 156, 134, 222, 61, 167, 138, 244, 189, 151, 215, 3, 63, 98, 33, 98, 189, 186, 53, 168, 62, 0, 35, 97, 61, 177, 159, 110, 189, 57, 246, 1, 62, 156, 106, 231, 190, 4, 7, 185, 61, 147, 176, 164, 189, 118, 195, 232, 189, 136, 225, 221, 189, 4, 232, 148, 189, 118, 189, 96, 189, 154, 251, 33, 190, 200, 92, 100, 189, 142, 126, 43, 61, 199, 39, 40, 190, 211, 138, 246, 189, 74, 81, 81, 61, 4, 80, 252, 59, 93, 207, 107, 189, 190, 141, 41, 190, 147, 206, 196, 188, 50, 60, 21, 189, 4, 158, 147, 189, 190, 25, 33, 190, 39, 48, 159, 189, 59, 211, 197, 61, 104, 66, 204, 189, 113, 30, 158, 189, 156, 210, 133, 189, 89, 59, 184, 189, 250, 193, 23, 190, 130, 22, 11, 189, 214, 104, 213, 59, 18, 88, 17, 190, 11, 55, 244, 189, 95, 136, 217, 61, 89, 155, 250, 189, 45, 215, 169, 189, 137, 138, 162, 188, 78, 112, 39, 62, 27, 193, 44, 190, 150, 62, 234, 188, 161, 165, 219, 61, 243, 179, 13, 62, 249, 65, 49, 60, 49, 239, 180, 62, 87, 78, 134, 189, 127, 200, 147, 61, 100, 207, 119, 190, 224, 17, 214, 189, 190, 69, 194, 62, 189, 247, 72, 189, 74, 79, 188, 190, 74, 113, 48, 190, 42, 131, 33, 191, 239, 97, 46, 190, 79, 190, 171, 62, 161, 250, 38, 62, 174, 89, 11, 62, 148, 65, 17, 190, 27, 58, 116, 190, 205, 77, 204, 60, 3, 216, 108, 190, 15, 58, 169, 61, 149, 248, 55, 62, 194, 120, 107, 61, 237, 193, 147, 189, 192, 37, 193, 189, 225, 196, 126, 62, 213, 131, 50, 190, 58, 92, 168, 190, 148, 140, 142, 189, 129, 91, 27, 62, 170, 88, 107, 62, 219, 52, 144, 60, 44, 173, 206, 62, 251, 150, 18, 62, 243, 214, 92, 191, 71, 177, 155, 190, 142, 127, 136, 191, 51, 150, 149, 61, 2, 193, 164, 189, 155, 162, 128, 191, 144, 140, 5, 62, 157, 148, 44, 190, 179, 239, 141, 62, 129, 115, 157, 190, 127, 112, 79, 62, 253, 87, 142, 190, 238, 106, 241, 190, 206, 28, 44, 190, 21, 72, 134, 61, 36, 96, 245, 190, 18, 213, 30, 190, 174, 171, 15, 63, 123, 195, 36, 61, 107, 34, 37, 63, 196, 78, 59, 189, 77, 88, 78, 189, 174, 133, 19, 62, 19, 68, 194, 190, 182, 242, 15, 191, 223, 246, 196, 188, 84, 242, 169, 190, 202, 203, 125, 189, 194, 158, 238, 61, 248, 198, 120, 62, 133, 110, 59, 62, 209, 47, 160, 188, 135, 31, 241, 61, 150, 46, 237, 190, 253, 20, 32, 62, 160, 219, 93, 191, 88, 123, 255, 189, 11, 239, 76, 189, 140, 15, 154, 62, 100, 69, 139, 190, 82, 230, 220, 190, 208, 87, 49, 191, 43, 80, 136, 191, 225, 30, 162, 61, 122, 179, 35, 62, 214, 164, 52, 62, 203, 48, 116, 190, 45, 137, 59, 190, 27, 25, 4, 62, 5, 7, 197, 190, 121, 251, 11, 62, 51, 189, 145, 188, 90, 208, 92, 62, 153, 92, 19, 62, 7, 144, 151, 190, 144, 92, 108, 62, 137, 185, 192, 61, 196, 131, 35, 62, 244, 193, 47, 189, 170, 73, 138, 61, 85, 134, 44, 189, 69, 196, 208, 189, 31, 43, 137, 61, 203, 20, 17, 189, 21, 28, 156, 61, 97, 19, 32, 190, 7, 167, 165, 189, 166, 96, 173, 188, 249, 91, 6, 189, 22, 135, 251, 189, 172, 16, 3, 190, 91, 52, 40, 190, 137, 172, 18, 62, 19, 142, 225, 60, 249, 136, 54, 189, 21, 183, 40, 190, 5, 163, 217, 189, 129, 32, 217, 61, 127, 93, 65, 189, 193, 85, 102, 189, 1, 52, 161, 189, 57, 21, 156, 61, 144, 23, 188, 188, 98, 181, 45, 190, 24, 210, 29, 189, 24, 230, 3, 62, 219, 192, 113, 61, 169, 250, 186, 189, 101, 35, 4, 190, 173, 80, 137, 61, 211, 189, 237, 189, 180, 192, 74, 62, 111, 66, 172, 189, 29, 30, 7, 189, 108, 132, 218, 190, 151, 69, 184, 189, 122, 145, 208, 62, 204, 30, 158, 189, 39, 203, 212, 62, 179, 229, 143, 190, 4, 139, 74, 188, 119, 234, 223, 60, 234, 122, 197, 190, 104, 205, 66, 62, 42, 20, 157, 62, 37, 64, 224, 62, 194, 177, 209, 190, 193, 175, 77, 189, 212, 55, 238, 60, 148, 252, 106, 189, 10, 243, 82, 61, 209, 113, 51, 62, 23, 99, 16, 190, 230, 169, 158, 62, 219, 73, 19, 189, 192, 97, 167, 189, 138, 114, 13, 189, 199, 104, 27, 189, 162, 154, 56, 188, 227, 170, 248, 61, 40, 96, 63, 61, 189, 101, 170, 60, 242, 145, 206, 60, 167, 102, 49, 190, 253, 91, 28, 62, 38, 249, 57, 188, 247, 0, 45, 62, 227, 36, 28, 190, 160, 226, 220, 189, 221, 74, 45, 190, 237, 191, 136, 61, 127, 121, 3, 189, 55, 20, 62, 61, 132, 196, 9, 188, 90, 102, 51, 190, 199, 236, 163, 189, 135, 220, 55, 60, 208, 131, 170, 61, 41, 192, 218, 188, 56, 224, 12, 190, 120, 244, 137, 189, 53, 207, 30, 190, 49, 12, 37, 190, 105, 240, 58, 61, 74, 141, 24, 190, 51, 220, 143, 60, 208, 32, 141, 189, 90, 98, 135, 60, 147, 30, 9, 190, 182, 233, 43, 62, 45, 133, 195, 189, 44, 105, 73, 187, 32, 148, 120, 61, 151, 9, 176, 62, 103, 182, 106, 61, 181, 118, 184, 61, 23, 184, 192, 61, 161, 248, 72, 187, 44, 252, 91, 191, 173, 187, 212, 189, 68, 195, 142, 190, 192, 219, 197, 61, 8, 74, 17, 62, 15, 76, 168, 62, 194, 147, 201, 190, 123, 216, 200, 190, 126, 5, 73, 62, 43, 65, 159, 189, 116, 56, 219, 189, 80, 69, 211, 61, 111, 243, 8, 62, 221, 243, 236, 59, 29, 25, 141, 62, 211, 229, 100, 189, 10, 92, 143, 62, 170, 224, 158, 62, 222, 51, 242, 59, 31, 166, 64, 190, 99, 207, 165, 59, 236, 67, 52, 191, 98, 59, 12, 62, 102, 174, 201, 61, 16, 229, 107, 61, 188, 200, 192, 190, 139, 12, 226, 61, 149, 84, 129, 189, 131, 20, 242, 61, 78, 225, 204, 190, 230, 39, 1, 191, 65, 127, 185, 190, 194, 70, 147, 190, 172, 84, 157, 190, 153, 252, 169, 189, 3, 255, 18, 62, 206, 236, 65, 189, 249, 244, 104, 190, 188, 244, 11, 190, 86, 12, 114, 61, 36, 153, 180, 190, 167, 57, 186, 60, 24, 211, 11, 62, 210, 66, 1, 190, 223, 143, 143, 188, 255, 80, 215, 62, 216, 148, 172, 191, 188, 20, 172, 62, 91, 92, 137, 188, 180, 163, 94, 191, 92, 76, 176, 189, 21, 186, 147, 190, 223, 1, 93, 62, 24, 239, 44, 62, 206, 197, 150, 62, 55, 2, 99, 59, 135, 199, 87, 190, 11, 217, 149, 62, 21, 239, 186, 190, 163, 122, 132, 61, 148, 130, 209, 188, 97, 69, 122, 62, 243, 40, 63, 62, 142, 57, 4, 190, 23, 254, 138, 190, 198, 219, 48, 62, 155, 66, 168, 62, 145, 191, 159, 62, 227, 60, 146, 62, 194, 98, 136, 190, 120, 250, 161, 188, 190, 182, 250, 61, 145, 242, 81, 190, 214, 142, 91, 190, 210, 107, 254, 60, 187, 219, 201, 190, 147, 178, 230, 190, 110, 195, 34, 62, 243, 39, 143, 61, 91, 50, 70, 61, 156, 37, 236, 189, 77, 26, 31, 188, 126, 59, 156, 189, 178, 180, 123, 61, 96, 252, 222, 60, 67, 11, 110, 190, 47, 114, 229, 189, 75, 4, 20, 190, 193, 10, 171, 190, 62, 53, 128, 62, 241, 137, 22, 190, 200, 240, 245, 188, 35, 161, 154, 61, 23, 14, 72, 62, 114, 69, 36, 190, 114, 224, 149, 189, 71, 9, 101, 62, 156, 188, 11, 62, 147, 63, 250, 61, 71, 151, 158, 189, 236, 246, 162, 60, 120, 14, 165, 61, 86, 77, 5, 190, 150, 158, 59, 61, 147, 7, 25, 62, 124, 6, 134, 190, 59, 2, 95, 61, 147, 134, 50, 191, 216, 235, 158, 61, 81, 11, 135, 62, 203, 34, 102, 62, 6, 236, 141, 62, 238, 191, 68, 189, 64, 15, 126, 61, 242, 4, 95, 62, 44, 101, 175, 190, 98, 197, 163, 61, 86, 133, 174, 189, 243, 239, 62, 187, 2, 76, 213, 61, 197, 218, 41, 61, 70, 206, 79, 61, 217, 163, 132, 61, 26, 102, 0, 190, 160, 184, 37, 191, 118, 150, 129, 62, 9, 195, 1, 62, 18, 232, 9, 191, 70, 178, 138, 62, 112, 72, 17, 190, 141, 85, 69, 190, 103, 29, 18, 190, 6, 162, 202, 189, 208, 157, 234, 62, 71, 83, 145, 189, 37, 23, 191, 61, 186, 148, 254, 61, 183, 87, 56, 62, 34, 240, 36, 190, 57, 68, 245, 62, 32, 136, 8, 62, 107, 122, 102, 190, 223, 8, 63, 62, 171, 66, 107, 191, 212, 210, 55, 190, 207, 38, 92, 62, 13, 130, 154, 188, 240, 150, 212, 62, 21, 176, 91, 190, 112, 83, 97, 61, 216, 202, 160, 190, 55, 153, 164, 61, 148, 13, 188, 189, 4, 133, 163, 190, 10, 104, 24, 59, 56, 221, 190, 189, 122, 186, 229, 61, 13, 223, 102, 189, 40, 7, 152, 189, 196, 34, 71, 190, 24, 5, 166, 60, 202, 92, 239, 61, 190, 137, 54, 189, 161, 1, 83, 188, 1, 71, 76, 61, 56, 16, 160, 189, 133, 222, 197, 188, 212, 26, 156, 189, 254, 209, 34, 190, 0, 94, 13, 62, 157, 50, 16, 190, 107, 94, 251, 61, 45, 126, 27, 190, 97, 137, 9, 189, 243, 201, 209, 188, 71, 188, 180, 189, 228, 246, 8, 62, 17, 39, 149, 189, 17, 54, 61, 190, 17, 154, 43, 190, 197, 159, 62, 190, 201, 32, 243, 61, 244, 178, 223, 61, 123, 95, 194, 189, 223, 93, 141, 61, 56, 168, 39, 190, 158, 143, 156, 62, 226, 101, 151, 62, 14, 169, 209, 190, 127, 168, 114, 190, 130, 203, 106, 62, 42, 215, 165, 62, 0, 120, 71, 189, 101, 40, 124, 62, 176, 89, 66, 61, 225, 185, 201, 61, 195, 137, 1, 190, 208, 19, 21, 191, 201, 55, 176, 189, 254, 1, 221, 62, 8, 28, 192, 62, 242, 187, 129, 190, 252, 240, 3, 191, 4, 129, 250, 190, 50, 86, 46, 191, 61, 79, 60, 62, 14, 58, 117, 62, 71, 8, 21, 63, 83, 154, 202, 190, 8, 111, 12, 191, 168, 57, 142, 62, 144, 172, 104, 190, 24, 112, 173, 189, 226, 122, 141, 190, 140, 201, 10, 63, 153, 145, 192, 189, 89, 227, 189, 190, 209, 162, 186, 62, 48, 107, 142, 62, 53, 69, 69, 191, 55, 209, 85, 60, 11, 6, 234, 62, 236, 1, 181, 61, 65, 238, 137, 190, 146, 16, 33, 61, 30, 174, 243, 59, 149, 49, 160, 60, 179, 97, 27, 61, 53, 254, 92, 190, 58, 222, 198, 189, 159, 179, 146, 189, 233, 81, 91, 190, 88, 198, 35, 190, 182, 66, 131, 190, 70, 88, 103, 190, 224, 184, 2, 62, 253, 107, 102, 190, 175, 128, 13, 62, 223, 31, 50, 62, 62, 62, 171, 190, 59, 251, 81, 62, 81, 8, 59, 62, 78, 78, 106, 62, 226, 47, 180, 62, 29, 42, 48, 62, 200, 247, 11, 62, 174, 63, 194, 188, 27, 100, 42, 62, 144, 3, 26, 190, 54, 87, 14, 191, 166, 253, 209, 189, 182, 71, 107, 189, 244, 127, 221, 189, 226, 237, 13, 60, 168, 81, 25, 189, 231, 165, 91, 190, 165, 128, 250, 61, 153, 178, 45, 60, 112, 7, 42, 61, 67, 172, 70, 190, 72, 167, 60, 189, 224, 80, 71, 189, 152, 53, 154, 61, 195, 124, 81, 189, 143, 243, 125, 189, 75, 253, 197, 61, 169, 110, 144, 61, 211, 33, 36, 61, 201, 67, 9, 61, 212, 82, 32, 59, 130, 103, 1, 62, 19, 32, 190, 188, 7, 225, 255, 189, 244, 65, 236, 189, 172, 177, 48, 62, 174, 201, 67, 190, 101, 230, 247, 188, 87, 125, 185, 189, 20, 233, 209, 61, 2, 117, 140, 62, 124, 251, 237, 61, 255, 230, 252, 189, 163, 173, 3, 190, 140, 175, 205, 60, 68, 34, 26, 190, 126, 237, 12, 190, 194, 219, 229, 189, 252, 24, 11, 190, 206, 146, 1, 190, 39, 212, 156, 189, 182, 205, 178, 189, 153, 128, 230, 189, 110, 1, 239, 189, 225, 39, 214, 61, 32, 20, 16, 189, 86, 147, 86, 189, 224, 4, 233, 189, 157, 58, 183, 61, 198, 206, 97, 60, 232, 147, 118, 61, 188, 95, 193, 189, 120, 132, 45, 62, 146, 215, 172, 61, 213, 216, 165, 188, 97, 148, 14, 190, 245, 110, 196, 186, 196, 216, 175, 189, 102, 110, 227, 61, 202, 85, 129, 60, 7, 79, 46, 190, 207, 246, 39, 60, 172, 176, 245, 61, 179, 200, 69, 189, 205, 26, 32, 190, 110, 128, 129, 189, 80, 26, 206, 189, 111, 124, 100, 62, 83, 192, 118, 60, 95, 209, 90, 188, 127, 178, 73, 188, 235, 6, 49, 62, 69, 108, 47, 62, 166, 173, 66, 60, 82, 246, 158, 61, 181, 64, 235, 189, 73, 71, 79, 61, 119, 187, 23, 189, 239, 77, 138, 61, 3, 141, 0, 62, 247, 148, 196, 189, 245, 36, 86, 190, 93, 144, 47, 191, 113, 34, 137, 189, 243, 53, 168, 62, 99, 228, 154, 61, 121, 56, 60, 62, 47, 254, 225, 189, 216, 227, 93, 62, 108, 48, 171, 61, 171, 212, 211, 189, 153, 234, 135, 62, 198, 212, 168, 189, 113, 105, 214, 189, 115, 160, 66, 190, 62, 102, 119, 61, 24, 135, 144, 61, 8, 194, 210, 60, 76, 121, 179, 62, 233, 224, 197, 189, 26, 159, 219, 190, 105, 222, 128, 191, 114, 143, 12, 191, 140, 117, 170, 187, 17, 102, 145, 190, 241, 3, 24, 190, 199, 51, 86, 62, 37, 219, 179, 190, 116, 245, 134, 190, 13, 145, 102, 61, 77, 240, 55, 189, 251, 230, 211, 60, 24, 48, 128, 61, 243, 60, 66, 190, 149, 181, 30, 62, 2, 31, 52, 190, 144, 212, 76, 61, 218, 127, 1, 190, 176, 39, 64, 62, 24, 111, 222, 188, 122, 36, 241, 188, 69, 169, 174, 188, 236, 167, 231, 190, 101, 248, 239, 189, 252, 53, 243, 189, 67, 131, 34, 61, 74, 120, 0, 190, 213, 97, 208, 189, 60, 221, 195, 189, 198, 204, 211, 190, 59, 110, 82, 191, 39, 159, 132, 188, 222, 25, 109, 62, 28, 1, 173, 61, 114, 127, 14, 190, 142, 113, 4, 63, 196, 103, 52, 62, 63, 52, 134, 190, 170, 83, 43, 190, 151, 209, 169, 189, 237, 187, 130, 61, 178, 231, 65, 62, 236, 34, 217, 190, 127, 110, 164, 190, 16, 13, 58, 61, 112, 82, 247, 61, 75, 182, 250, 62, 15, 73, 133, 62, 87, 78, 23, 190, 72, 185, 41, 190, 123, 211, 209, 189, 98, 189, 65, 62, 161, 182, 141, 62, 16, 97, 120, 189, 195, 144, 245, 62, 155, 196, 147, 61, 245, 249, 19, 63, 207, 179, 121, 190, 119, 127, 124, 190, 233, 210, 124, 62, 199, 142, 187, 190, 11, 94, 21, 62, 1, 208, 35, 61, 58, 138, 127, 61, 93, 129, 183, 189, 40, 102, 36, 190, 130, 74, 194, 60, 19, 180, 35, 62, 67, 156, 2, 190, 121, 143, 0, 190, 78, 78, 137, 189, 7, 141, 2, 189, 188, 90, 86, 189, 233, 212, 176, 61, 165, 196, 35, 190, 252, 223, 0, 62, 77, 195, 152, 189, 133, 3, 56, 61, 116, 201, 6, 190, 202, 238, 175, 189, 64, 221, 229, 61, 122, 58, 46, 190, 148, 255, 176, 189, 114, 221, 22, 190, 55, 86, 2, 62, 162, 123, 251, 189, 18, 77, 234, 189, 84, 79, 51, 62, 106, 53, 77, 61, 90, 122, 12, 190, 15, 139, 30, 190, 102, 40, 247, 188, 164, 128, 168, 189, 200, 4, 206, 190, 202, 234, 4, 191, 67, 76, 146, 62, 19, 93, 109, 62, 205, 0, 24, 190, 209, 168, 211, 60, 3, 11, 146, 62, 241, 19, 20, 62, 195, 254, 111, 190, 71, 97, 169, 188, 85, 210, 160, 190, 225, 223, 67, 61, 98, 57, 231, 61, 154, 240, 120, 191, 222, 227, 13, 190, 141, 125, 210, 190, 111, 182, 53, 62, 81, 36, 148, 190, 47, 186, 180, 61, 137, 169, 21, 61, 57, 59, 61, 190, 29, 157, 207, 61, 89, 105, 202, 61, 37, 1, 17, 62, 10, 30, 14, 190, 51, 230, 234, 62, 118, 216, 158, 59, 179, 208, 246, 62, 49, 18, 121, 190, 91, 59, 67, 189, 12, 140, 93, 62, 142, 201, 1, 191, 246, 109, 105, 190, 38, 58, 34, 191, 189, 18, 40, 62, 248, 91, 115, 62, 1, 117, 83, 61, 75, 7, 65, 188, 207, 203, 118, 62, 24, 22, 80, 62, 173, 240, 78, 190, 245, 104, 11, 60, 198, 64, 30, 191, 95, 167, 36, 62, 211, 230, 46, 61, 184, 117, 58, 191, 118, 35, 126, 61, 253, 44, 170, 190, 171, 253, 227, 188, 173, 136, 92, 190, 93, 60, 174, 61, 105, 156, 53, 190, 22, 187, 24, 191, 124, 155, 196, 189, 117, 51, 158, 62, 48, 166, 210, 190, 73, 203, 39, 190, 154, 177, 207, 62, 72, 71, 167, 189, 199, 111, 55, 63, 60, 34, 157, 190, 208, 75, 62, 190, 62, 144, 51, 62, 168, 18, 16, 191, 27, 127, 31, 190, 215, 246, 246, 189, 63, 70, 30, 190, 77, 2, 2, 62, 243, 132, 35, 190, 250, 93, 66, 189, 128, 27, 194, 189, 25, 168, 31, 62, 110, 209, 3, 61, 201, 91, 199, 59, 230, 191, 119, 61, 96, 187, 31, 62, 65, 31, 170, 61, 234, 122, 217, 189, 5, 10, 174, 61, 14, 105, 6, 190, 116, 167, 41, 190, 20, 64, 174, 189, 136, 229, 93, 189, 160, 52, 210, 189, 210, 228, 1, 190, 126, 117, 51, 190, 171, 185, 179, 188, 200, 203, 39, 60, 138, 139, 169, 189, 130, 64, 22, 190, 107, 169, 150, 189, 30, 15, 122, 189, 84, 236, 55, 189, 140, 122, 25, 62, 155, 134, 13, 188, 90, 126, 253, 61, 123, 97, 2, 190, 222, 73, 15, 191, 251, 52, 176, 61, 32, 165, 205, 61, 236, 11, 204, 61, 151, 58, 21, 61, 143, 126, 169, 62, 59, 19, 0, 62, 69, 87, 120, 190, 188, 17, 161, 190, 245, 68, 43, 191, 82, 138, 224, 60, 169, 149, 169, 189, 9, 117, 82, 191, 145, 228, 25, 190, 204, 80, 21, 190, 99, 155, 137, 61, 212, 151, 35, 189, 185, 55, 142, 62, 205, 73, 54, 190, 184, 44, 196, 190, 11, 95, 141, 189, 96, 76, 41, 62, 10, 192, 3, 190, 35, 122, 99, 190, 178, 13, 75, 63, 55, 105, 25, 62, 57, 221, 4, 63, 85, 36, 134, 190, 111, 151, 78, 190, 234, 232, 159, 62, 28, 229, 33, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 51, 179, 61, 86, 133, 45, 60, 117, 83, 217, 188, 125, 110, 131, 62, 22, 38, 93, 62, 42, 210, 11, 62, 49, 48, 9, 62, 72, 211, 241, 61, 94, 148, 232, 59, 75, 57, 29, 62, 121, 163, 139, 62, 177, 80, 191, 189, 80, 35, 217, 61, 62, 27, 30, 61, 229, 195, 30, 190, 41, 126, 3, 62, 27, 1, 213, 62, 244, 145, 143, 62, 19, 15, 144, 189, 69, 234, 63, 190, 93, 57, 78, 62, 88, 250, 15, 62, 199, 39, 50, 190, 8, 52, 92, 61, 204, 247, 189, 62, 45, 242, 29, 190, 192, 24, 51, 188, 222, 133, 69, 61, 214, 9, 233, 61, 209, 154, 112, 62, 109, 242, 54, 190, 225, 114, 5, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 252, 20, 191, 56, 157, 209, 190, 95, 174, 225, 62, 114, 5, 33, 190, 162, 172, 0, 191, 134, 19, 183, 61, 155, 53, 160, 62, 207, 109, 138, 188, 66, 34, 134, 190, 149, 94, 82, 63, 104, 10, 29, 191, 163, 103, 55, 189, 69, 21, 201, 62, 197, 57, 252, 61, 62, 44, 135, 190, 252, 69, 18, 63, 102, 90, 167, 62, 189, 74, 144, 189, 77, 5, 248, 190, 206, 169, 74, 188, 35, 240, 61, 191, 209, 64, 7, 63, 255, 73, 42, 190, 141, 111, 174, 61, 240, 78, 9, 189, 197, 233, 38, 63, 119, 148, 208, 62, 188, 219, 33, 190, 20, 105, 177, 62, 172, 235, 9, 63, 189, 46, 181, 61, 132, 105, 25, 63, 190, 116, 59, 62, 141, 56, 212, 188, 160, 39, 50, 61, 75, 219, 26, 190, 236, 172, 163, 190, 63, 40, 68, 59, 38, 72, 37, 62, 140, 114, 129, 61, 17, 195, 169, 188, 19, 96, 41, 62, 105, 45, 187, 190, 253, 43, 117, 189, 153, 1, 158, 61, 78, 245, 240, 60, 220, 123, 156, 60, 128, 146, 214, 62, 102, 254, 157, 190, 9, 166, 102, 190, 243, 162, 166, 62, 247, 183, 125, 61, 136, 248, 193, 62, 228, 156, 38, 190, 226, 100, 143, 189, 221, 172, 83, 61, 87, 167, 71, 190, 163, 215, 201, 62, 253, 191, 66, 62, 95, 217, 40, 61, 113, 122, 235, 190, 35, 242, 130, 189, 186, 117, 225, 189, 127, 69, 138, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 229, 3, 62, 174, 33, 146, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {208, 82, 203, 63, 68, 1, 126, 62, 155, 235, 139, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {208, 228, 205, 62, 61, 90, 7, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0018/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}