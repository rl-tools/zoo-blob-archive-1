// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 59, 5, 62, 185, 24, 5, 190, 219, 81, 162, 62, 75, 190, 37, 190, 143, 47, 247, 62, 196, 27, 223, 62, 104, 22, 167, 62, 235, 105, 190, 60, 231, 161, 229, 62, 195, 113, 10, 62, 124, 36, 104, 191, 165, 170, 181, 190, 223, 81, 198, 190, 172, 129, 208, 190, 87, 227, 61, 190, 18, 220, 66, 191, 216, 219, 37, 60, 213, 210, 14, 62, 176, 52, 160, 190, 58, 114, 50, 190, 235, 232, 35, 190, 99, 165, 74, 190, 38, 128, 106, 190, 27, 202, 2, 189, 54, 140, 219, 62, 172, 188, 116, 63, 84, 170, 195, 190, 103, 184, 171, 189, 191, 203, 242, 62, 130, 236, 19, 63, 155, 114, 162, 62, 167, 115, 156, 62, 236, 21, 125, 190, 139, 222, 185, 190, 130, 241, 142, 191, 104, 4, 207, 62, 72, 104, 123, 188, 172, 78, 74, 189, 114, 142, 1, 191, 182, 3, 214, 190, 157, 55, 90, 63, 40, 140, 23, 191, 253, 248, 34, 191, 241, 191, 57, 191, 20, 68, 53, 190, 214, 80, 198, 62, 46, 44, 150, 62, 88, 50, 6, 191, 162, 36, 130, 190, 231, 117, 153, 190, 52, 188, 84, 62, 116, 78, 81, 61, 95, 157, 214, 189, 224, 115, 141, 190, 230, 141, 236, 190, 23, 93, 48, 191, 215, 67, 198, 62, 244, 102, 236, 62, 49, 57, 181, 62, 71, 247, 85, 62, 249, 217, 143, 189, 77, 8, 35, 191, 3, 60, 169, 190, 181, 161, 216, 62, 143, 138, 52, 63, 21, 82, 186, 62, 103, 14, 144, 62, 77, 16, 239, 190, 97, 202, 158, 62, 91, 70, 239, 62, 182, 40, 13, 191, 142, 163, 238, 190, 245, 55, 29, 63, 4, 185, 120, 190, 30, 133, 222, 62, 213, 95, 50, 63, 62, 120, 21, 190, 220, 14, 222, 189, 145, 1, 128, 62, 228, 148, 22, 62, 14, 1, 14, 62, 43, 11, 16, 190, 46, 15, 216, 190, 189, 111, 166, 190, 102, 32, 26, 63, 91, 144, 251, 62, 106, 186, 27, 63, 247, 115, 215, 190, 31, 207, 134, 190, 20, 190, 164, 189, 238, 36, 180, 190, 196, 231, 2, 191, 190, 123, 187, 62, 58, 92, 26, 190, 146, 33, 116, 63, 140, 212, 97, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 125, 249, 190, 105, 219, 22, 191, 72, 253, 7, 63, 119, 54, 247, 62, 98, 157, 157, 62, 102, 189, 2, 63, 227, 165, 46, 191, 180, 0, 15, 63, 231, 231, 60, 63, 199, 232, 10, 191, 42, 58, 185, 62, 77, 108, 207, 61, 51, 204, 193, 190, 106, 215, 87, 61, 87, 210, 149, 189, 212, 204, 19, 191, 244, 149, 236, 62, 71, 19, 57, 191, 197, 202, 1, 189, 113, 184, 5, 63, 205, 39, 206, 62, 168, 29, 101, 62, 231, 199, 25, 63, 216, 127, 52, 62, 71, 79, 235, 62, 35, 104, 111, 190, 14, 166, 28, 63, 145, 192, 216, 190, 123, 113, 139, 58, 175, 194, 35, 191, 45, 188, 186, 62, 228, 43, 109, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 150, 50, 190, 216, 50, 42, 62, 61, 183, 67, 189, 122, 105, 112, 60, 85, 221, 30, 62, 113, 117, 184, 59, 223, 57, 80, 190, 25, 39, 56, 61, 198, 208, 149, 62, 114, 152, 168, 189, 16, 179, 44, 190, 64, 70, 170, 190, 8, 60, 82, 190, 45, 120, 97, 62, 43, 241, 131, 61, 92, 196, 159, 189, 90, 109, 90, 61, 9, 226, 22, 190, 23, 190, 201, 189, 153, 230, 19, 62, 14, 240, 241, 189, 96, 19, 53, 62, 242, 196, 20, 190, 215, 102, 33, 190, 140, 85, 183, 61, 211, 28, 130, 190, 52, 30, 30, 62, 75, 101, 55, 190, 213, 251, 110, 60, 51, 162, 162, 58, 37, 211, 31, 190, 39, 102, 253, 62, 245, 160, 138, 189, 197, 11, 20, 62, 240, 25, 156, 60, 28, 13, 39, 190, 49, 97, 31, 190, 205, 215, 206, 61, 238, 170, 153, 190, 175, 30, 73, 62, 209, 184, 111, 62, 242, 152, 249, 61, 222, 45, 53, 62, 59, 162, 150, 190, 161, 81, 168, 189, 132, 158, 178, 62, 95, 243, 172, 60, 179, 2, 250, 189, 109, 136, 179, 61, 154, 207, 36, 190, 125, 185, 158, 189, 163, 118, 196, 61, 246, 1, 252, 188, 235, 57, 11, 62, 250, 39, 98, 189, 48, 109, 45, 190, 233, 184, 24, 62, 12, 71, 51, 190, 196, 47, 212, 61, 89, 232, 2, 190, 141, 55, 74, 62, 3, 7, 139, 58, 63, 142, 203, 189, 107, 5, 167, 62, 209, 20, 238, 188, 106, 204, 135, 190, 71, 223, 250, 189, 89, 90, 168, 59, 98, 167, 188, 61, 38, 239, 219, 187, 20, 123, 203, 189, 85, 235, 67, 62, 117, 220, 43, 190, 2, 3, 132, 190, 219, 22, 135, 61, 8, 200, 32, 62, 237, 223, 210, 61, 228, 150, 156, 61, 3, 65, 2, 62, 40, 79, 46, 62, 45, 233, 74, 62, 156, 17, 243, 189, 44, 87, 163, 62, 198, 164, 79, 61, 153, 164, 146, 61, 83, 184, 78, 190, 228, 106, 1, 62, 54, 170, 157, 189, 58, 159, 58, 61, 221, 195, 130, 62, 183, 8, 146, 62, 159, 96, 191, 61, 196, 189, 63, 190, 191, 114, 6, 190, 220, 194, 115, 61, 68, 1, 126, 190, 229, 63, 144, 61, 132, 170, 113, 188, 202, 167, 136, 60, 99, 189, 225, 61, 8, 216, 22, 190, 78, 177, 142, 60, 165, 220, 84, 61, 161, 117, 157, 61, 173, 160, 161, 189, 150, 84, 125, 187, 71, 241, 62, 62, 93, 158, 30, 61, 240, 196, 171, 61, 173, 178, 60, 189, 99, 69, 178, 61, 61, 208, 226, 189, 19, 91, 236, 61, 122, 136, 43, 190, 235, 206, 230, 61, 244, 175, 99, 62, 39, 246, 248, 61, 168, 76, 22, 62, 44, 160, 9, 190, 27, 81, 71, 190, 224, 234, 209, 61, 181, 211, 19, 187, 73, 202, 1, 190, 185, 7, 50, 62, 142, 12, 77, 62, 56, 38, 134, 62, 132, 182, 204, 61, 163, 154, 162, 62, 26, 252, 136, 61, 115, 52, 237, 61, 199, 41, 49, 61, 180, 147, 200, 189, 77, 211, 32, 61, 228, 46, 32, 190, 247, 40, 43, 190, 49, 10, 42, 61, 98, 240, 18, 62, 167, 170, 22, 190, 17, 59, 185, 189, 15, 185, 196, 189, 2, 148, 147, 190, 74, 188, 211, 189, 225, 190, 164, 190, 50, 9, 7, 189, 62, 94, 236, 61, 67, 164, 83, 190, 18, 157, 215, 189, 40, 131, 6, 62, 208, 94, 108, 190, 244, 165, 208, 61, 61, 128, 185, 61, 21, 133, 250, 186, 152, 116, 43, 61, 231, 209, 90, 188, 84, 158, 88, 61, 12, 171, 176, 189, 146, 103, 0, 189, 191, 253, 173, 61, 20, 203, 22, 62, 48, 40, 164, 62, 5, 117, 178, 188, 29, 20, 28, 62, 18, 208, 239, 189, 52, 110, 31, 190, 175, 190, 199, 189, 179, 150, 16, 190, 63, 129, 196, 189, 19, 145, 140, 189, 106, 241, 159, 61, 126, 73, 40, 190, 82, 209, 26, 190, 119, 226, 65, 189, 214, 75, 135, 189, 127, 118, 32, 190, 216, 23, 147, 189, 237, 142, 194, 189, 143, 63, 129, 187, 241, 177, 51, 62, 217, 217, 12, 60, 95, 166, 237, 189, 160, 32, 171, 189, 160, 96, 79, 189, 88, 191, 157, 61, 177, 237, 26, 190, 113, 227, 201, 189, 166, 126, 97, 189, 220, 225, 138, 188, 90, 91, 231, 60, 247, 50, 38, 190, 77, 133, 51, 190, 180, 138, 206, 60, 167, 169, 37, 190, 227, 120, 213, 189, 78, 164, 221, 61, 182, 176, 241, 189, 142, 50, 62, 62, 220, 134, 195, 189, 200, 209, 2, 61, 26, 126, 100, 189, 45, 58, 218, 189, 55, 24, 1, 190, 57, 219, 154, 189, 15, 171, 104, 187, 37, 194, 178, 189, 200, 22, 235, 61, 30, 224, 165, 60, 40, 208, 21, 62, 78, 125, 3, 62, 175, 221, 50, 62, 201, 151, 21, 61, 181, 28, 106, 62, 85, 160, 90, 61, 19, 68, 40, 62, 228, 116, 52, 190, 4, 222, 164, 61, 111, 21, 29, 62, 134, 206, 213, 186, 70, 23, 67, 62, 131, 254, 167, 59, 51, 120, 135, 61, 44, 197, 201, 61, 190, 160, 7, 190, 204, 214, 136, 61, 38, 80, 137, 190, 4, 7, 185, 61, 147, 176, 164, 189, 118, 195, 232, 189, 136, 225, 221, 189, 4, 232, 148, 189, 118, 189, 96, 189, 154, 251, 33, 190, 200, 92, 100, 189, 142, 126, 43, 61, 199, 39, 40, 190, 211, 138, 246, 189, 74, 81, 81, 61, 4, 80, 252, 59, 93, 207, 107, 189, 190, 141, 41, 190, 147, 206, 196, 188, 50, 60, 21, 189, 4, 158, 147, 189, 190, 25, 33, 190, 39, 48, 159, 189, 59, 211, 197, 61, 104, 66, 204, 189, 113, 30, 158, 189, 156, 210, 133, 189, 89, 59, 184, 189, 250, 193, 23, 190, 130, 22, 11, 189, 214, 104, 213, 59, 18, 88, 17, 190, 11, 55, 244, 189, 95, 136, 217, 61, 89, 155, 250, 189, 127, 113, 20, 190, 63, 7, 167, 189, 52, 217, 83, 62, 12, 255, 63, 190, 112, 195, 144, 189, 228, 70, 97, 61, 184, 255, 126, 190, 120, 0, 153, 61, 64, 117, 202, 62, 152, 70, 25, 61, 76, 132, 159, 61, 197, 165, 68, 190, 171, 245, 220, 189, 184, 104, 154, 62, 188, 137, 164, 190, 115, 229, 147, 190, 150, 199, 24, 62, 19, 184, 166, 190, 24, 251, 161, 61, 181, 208, 132, 62, 15, 155, 222, 60, 252, 41, 159, 60, 7, 130, 176, 189, 253, 4, 18, 190, 155, 196, 171, 189, 161, 4, 173, 189, 0, 113, 244, 61, 112, 68, 195, 60, 107, 80, 131, 189, 225, 128, 64, 61, 225, 229, 0, 62, 155, 166, 212, 62, 184, 34, 228, 189, 174, 199, 97, 61, 27, 134, 252, 189, 22, 24, 76, 62, 242, 2, 132, 62, 183, 83, 156, 60, 210, 188, 140, 190, 231, 189, 31, 62, 154, 131, 151, 190, 91, 73, 116, 190, 248, 44, 44, 190, 135, 50, 230, 61, 237, 29, 24, 190, 250, 165, 86, 190, 189, 73, 100, 62, 82, 136, 86, 190, 155, 201, 96, 62, 254, 196, 166, 190, 132, 135, 19, 62, 152, 241, 11, 190, 251, 216, 16, 61, 201, 20, 207, 189, 34, 137, 0, 61, 109, 38, 146, 61, 126, 90, 167, 189, 26, 24, 144, 61, 84, 96, 246, 187, 16, 59, 100, 190, 207, 36, 99, 188, 191, 101, 141, 189, 63, 55, 151, 61, 235, 119, 11, 190, 28, 107, 181, 190, 170, 48, 52, 58, 215, 90, 101, 189, 242, 131, 207, 59, 101, 251, 191, 188, 12, 225, 57, 61, 102, 239, 25, 61, 242, 217, 199, 189, 148, 202, 31, 62, 11, 104, 245, 189, 203, 112, 70, 62, 88, 6, 154, 190, 35, 180, 40, 189, 233, 49, 161, 189, 143, 93, 155, 189, 253, 85, 247, 189, 150, 223, 143, 189, 207, 16, 12, 189, 7, 206, 160, 190, 91, 125, 175, 187, 193, 96, 200, 61, 52, 199, 59, 61, 221, 181, 84, 61, 129, 108, 71, 188, 228, 252, 129, 61, 135, 129, 39, 190, 218, 236, 251, 61, 141, 13, 175, 61, 200, 203, 241, 61, 44, 75, 128, 62, 44, 149, 250, 60, 44, 215, 164, 62, 137, 185, 192, 61, 196, 131, 35, 62, 244, 193, 47, 189, 170, 73, 138, 61, 85, 134, 44, 189, 69, 196, 208, 189, 31, 43, 137, 61, 203, 20, 17, 189, 21, 28, 156, 61, 97, 19, 32, 190, 7, 167, 165, 189, 166, 96, 173, 188, 249, 91, 6, 189, 22, 135, 251, 189, 172, 16, 3, 190, 91, 52, 40, 190, 137, 172, 18, 62, 19, 142, 225, 60, 249, 136, 54, 189, 21, 183, 40, 190, 5, 163, 217, 189, 129, 32, 217, 61, 127, 93, 65, 189, 193, 85, 102, 189, 1, 52, 161, 189, 57, 21, 156, 61, 144, 23, 188, 188, 98, 181, 45, 190, 24, 210, 29, 189, 24, 230, 3, 62, 219, 192, 113, 61, 169, 250, 186, 189, 205, 179, 43, 60, 74, 229, 191, 61, 247, 123, 247, 189, 53, 6, 207, 61, 248, 246, 158, 189, 220, 53, 105, 61, 85, 150, 192, 189, 59, 217, 11, 190, 204, 85, 108, 62, 32, 71, 222, 189, 40, 119, 128, 62, 192, 198, 94, 189, 246, 238, 196, 188, 122, 220, 194, 189, 137, 216, 26, 190, 215, 247, 63, 62, 90, 210, 15, 62, 220, 87, 74, 62, 148, 19, 80, 190, 125, 42, 11, 190, 6, 98, 224, 185, 136, 46, 157, 188, 154, 81, 36, 62, 250, 204, 10, 62, 84, 72, 18, 189, 103, 14, 192, 62, 224, 112, 48, 189, 42, 177, 0, 188, 36, 209, 53, 61, 64, 228, 196, 189, 15, 219, 206, 61, 14, 232, 33, 190, 40, 96, 63, 61, 189, 101, 170, 60, 242, 145, 206, 60, 167, 102, 49, 190, 253, 91, 28, 62, 38, 249, 57, 188, 247, 0, 45, 62, 227, 36, 28, 190, 160, 226, 220, 189, 221, 74, 45, 190, 237, 191, 136, 61, 127, 121, 3, 189, 55, 20, 62, 61, 132, 196, 9, 188, 90, 102, 51, 190, 199, 236, 163, 189, 135, 220, 55, 60, 208, 131, 170, 61, 41, 192, 218, 188, 56, 224, 12, 190, 120, 244, 137, 189, 53, 207, 30, 190, 49, 12, 37, 190, 105, 240, 58, 61, 74, 141, 24, 190, 51, 220, 143, 60, 208, 32, 141, 189, 90, 98, 135, 60, 147, 30, 9, 190, 182, 233, 43, 62, 45, 133, 195, 189, 44, 105, 73, 187, 167, 139, 103, 60, 36, 55, 13, 61, 176, 27, 140, 61, 200, 5, 150, 61, 108, 133, 127, 61, 232, 44, 99, 61, 119, 74, 243, 188, 206, 85, 3, 190, 0, 160, 30, 190, 250, 217, 10, 62, 36, 184, 230, 61, 19, 177, 255, 61, 148, 211, 25, 61, 67, 31, 5, 190, 153, 169, 236, 61, 36, 207, 154, 61, 167, 126, 16, 190, 179, 131, 84, 62, 191, 238, 44, 61, 187, 50, 131, 189, 141, 177, 16, 189, 73, 156, 134, 188, 29, 94, 63, 62, 114, 79, 30, 60, 11, 127, 219, 189, 35, 154, 143, 61, 124, 24, 51, 189, 88, 155, 219, 188, 56, 89, 43, 62, 206, 3, 203, 61, 47, 141, 253, 59, 35, 182, 34, 61, 237, 188, 73, 62, 69, 157, 121, 61, 150, 81, 88, 189, 162, 86, 213, 189, 200, 31, 66, 186, 132, 56, 220, 189, 163, 76, 25, 189, 213, 237, 67, 190, 215, 196, 60, 190, 136, 208, 185, 61, 185, 69, 75, 60, 98, 50, 21, 189, 54, 113, 4, 190, 253, 217, 229, 188, 195, 147, 13, 62, 74, 121, 211, 61, 155, 253, 33, 62, 38, 117, 5, 190, 162, 46, 28, 62, 135, 234, 177, 61, 106, 25, 20, 190, 34, 143, 15, 61, 251, 16, 128, 189, 9, 237, 250, 61, 28, 151, 17, 190, 208, 122, 224, 61, 246, 13, 43, 61, 226, 22, 25, 62, 18, 186, 5, 62, 136, 245, 203, 59, 199, 62, 18, 190, 73, 153, 254, 61, 197, 222, 49, 189, 156, 13, 234, 58, 225, 32, 88, 190, 237, 251, 47, 62, 114, 65, 23, 62, 137, 145, 119, 190, 173, 52, 10, 190, 20, 167, 162, 60, 82, 103, 41, 62, 231, 138, 228, 59, 220, 186, 29, 62, 61, 128, 209, 60, 211, 181, 176, 61, 52, 170, 131, 61, 124, 100, 199, 189, 96, 103, 169, 189, 146, 252, 138, 190, 78, 122, 130, 190, 133, 192, 148, 60, 101, 41, 166, 189, 229, 248, 102, 61, 15, 219, 139, 61, 213, 87, 23, 187, 31, 1, 16, 189, 48, 37, 18, 61, 104, 231, 54, 62, 50, 25, 228, 189, 35, 174, 6, 189, 164, 141, 82, 61, 22, 213, 31, 190, 37, 144, 69, 190, 226, 237, 65, 60, 156, 225, 197, 189, 93, 151, 12, 190, 47, 253, 133, 61, 178, 26, 11, 62, 154, 218, 81, 190, 88, 106, 54, 190, 12, 35, 116, 189, 187, 93, 55, 61, 28, 190, 62, 62, 145, 18, 191, 188, 133, 225, 141, 61, 246, 90, 36, 61, 193, 224, 181, 188, 137, 170, 221, 61, 158, 83, 34, 190, 76, 27, 195, 189, 248, 221, 201, 61, 102, 54, 11, 188, 224, 180, 211, 61, 41, 132, 4, 62, 219, 10, 8, 62, 184, 182, 114, 62, 115, 183, 158, 189, 48, 145, 131, 61, 84, 252, 226, 61, 237, 94, 130, 190, 42, 32, 7, 189, 146, 27, 175, 60, 38, 46, 93, 188, 141, 45, 50, 62, 198, 204, 114, 61, 215, 113, 88, 62, 208, 59, 183, 189, 86, 181, 85, 189, 164, 181, 5, 190, 218, 214, 188, 61, 234, 186, 176, 189, 20, 158, 203, 190, 184, 102, 137, 61, 142, 179, 55, 190, 65, 2, 14, 190, 57, 37, 242, 58, 129, 174, 188, 189, 164, 235, 68, 189, 233, 78, 242, 189, 188, 55, 232, 61, 5, 10, 242, 60, 115, 146, 27, 62, 240, 140, 52, 190, 21, 221, 103, 62, 143, 39, 176, 187, 145, 220, 59, 61, 39, 148, 41, 61, 164, 210, 63, 190, 25, 53, 27, 190, 165, 181, 182, 61, 39, 153, 117, 190, 32, 103, 10, 61, 255, 88, 71, 190, 104, 195, 164, 189, 139, 148, 192, 61, 99, 104, 120, 61, 184, 68, 248, 189, 164, 255, 129, 190, 208, 84, 25, 61, 72, 126, 135, 189, 81, 95, 12, 62, 141, 161, 93, 189, 150, 164, 149, 189, 221, 64, 45, 190, 24, 5, 166, 60, 18, 212, 11, 62, 194, 94, 66, 189, 88, 176, 2, 60, 142, 101, 70, 61, 48, 237, 59, 189, 133, 222, 197, 188, 212, 26, 156, 189, 204, 142, 32, 190, 0, 94, 13, 62, 60, 166, 219, 189, 107, 94, 251, 61, 22, 175, 253, 189, 121, 58, 62, 187, 213, 191, 209, 188, 122, 74, 131, 189, 113, 238, 36, 62, 53, 164, 149, 189, 74, 200, 31, 190, 160, 109, 41, 190, 69, 196, 24, 190, 201, 32, 243, 61, 7, 247, 4, 62, 123, 95, 194, 189, 73, 214, 191, 61, 251, 93, 40, 190, 97, 218, 64, 189, 31, 96, 36, 62, 161, 128, 51, 190, 252, 189, 52, 190, 41, 172, 11, 61, 142, 109, 8, 62, 202, 2, 135, 190, 142, 237, 87, 62, 188, 24, 243, 61, 159, 83, 46, 62, 17, 56, 172, 189, 60, 41, 202, 190, 247, 125, 29, 189, 215, 142, 170, 62, 218, 9, 116, 187, 20, 196, 71, 190, 155, 101, 11, 190, 27, 236, 108, 190, 224, 180, 134, 190, 144, 76, 25, 62, 47, 197, 245, 61, 116, 238, 63, 62, 36, 178, 161, 190, 160, 137, 179, 190, 181, 134, 176, 60, 164, 60, 84, 190, 97, 194, 140, 186, 160, 2, 186, 190, 103, 91, 206, 61, 179, 94, 109, 60, 15, 136, 202, 189, 101, 51, 250, 62, 13, 166, 237, 61, 77, 175, 132, 61, 149, 247, 49, 190, 58, 139, 2, 62, 17, 88, 181, 61, 194, 18, 164, 59, 47, 15, 35, 61, 102, 129, 103, 189, 73, 231, 87, 61, 62, 167, 42, 61, 62, 171, 36, 190, 67, 190, 53, 190, 105, 9, 71, 61, 209, 143, 233, 189, 73, 116, 27, 190, 185, 27, 4, 190, 173, 43, 2, 190, 67, 206, 43, 190, 128, 108, 146, 189, 230, 113, 222, 188, 125, 191, 106, 61, 89, 222, 22, 190, 206, 178, 204, 60, 212, 211, 43, 188, 203, 112, 179, 188, 215, 184, 30, 61, 52, 166, 28, 62, 210, 131, 12, 62, 139, 253, 190, 189, 118, 254, 210, 61, 62, 187, 197, 189, 140, 205, 49, 190, 166, 253, 209, 189, 182, 71, 107, 189, 244, 127, 221, 189, 80, 155, 15, 60, 46, 227, 24, 189, 213, 163, 91, 190, 58, 8, 251, 61, 215, 19, 47, 60, 136, 110, 42, 61, 67, 172, 70, 190, 44, 50, 60, 189, 224, 80, 71, 189, 157, 119, 154, 61, 212, 219, 80, 189, 58, 151, 125, 189, 54, 55, 198, 61, 169, 110, 144, 61, 28, 200, 36, 61, 201, 67, 9, 61, 212, 82, 32, 59, 86, 129, 1, 62, 19, 32, 190, 188, 7, 225, 255, 189, 31, 10, 236, 189, 172, 177, 48, 62, 220, 196, 67, 190, 101, 230, 247, 188, 19, 32, 185, 189, 20, 233, 209, 61, 67, 169, 140, 62, 124, 251, 237, 61, 163, 204, 252, 189, 163, 173, 3, 190, 140, 175, 205, 60, 68, 34, 26, 190, 126, 237, 12, 190, 194, 219, 229, 189, 252, 24, 11, 190, 206, 146, 1, 190, 39, 212, 156, 189, 182, 205, 178, 189, 153, 128, 230, 189, 110, 1, 239, 189, 225, 39, 214, 61, 32, 20, 16, 189, 86, 147, 86, 189, 224, 4, 233, 189, 157, 58, 183, 61, 198, 206, 97, 60, 232, 147, 118, 61, 188, 95, 193, 189, 120, 132, 45, 62, 146, 215, 172, 61, 213, 216, 165, 188, 97, 148, 14, 190, 245, 110, 196, 186, 196, 216, 175, 189, 102, 110, 227, 61, 202, 85, 129, 60, 7, 79, 46, 190, 207, 246, 39, 60, 172, 176, 245, 61, 179, 200, 69, 189, 205, 26, 32, 190, 197, 151, 72, 61, 239, 176, 240, 189, 178, 108, 63, 62, 211, 42, 201, 188, 44, 181, 8, 188, 28, 4, 10, 190, 219, 212, 23, 190, 76, 234, 159, 61, 88, 23, 62, 61, 180, 167, 4, 62, 62, 172, 172, 189, 17, 193, 214, 61, 164, 206, 145, 61, 178, 91, 16, 62, 198, 105, 147, 189, 92, 241, 137, 61, 5, 43, 60, 190, 108, 71, 179, 61, 124, 46, 61, 189, 102, 188, 66, 62, 96, 42, 172, 61, 147, 51, 33, 62, 162, 138, 230, 189, 114, 217, 75, 62, 88, 109, 132, 61, 136, 20, 85, 189, 238, 0, 10, 62, 117, 2, 205, 61, 213, 212, 195, 189, 8, 249, 17, 190, 212, 192, 130, 61, 196, 238, 42, 62, 129, 8, 133, 61, 182, 13, 5, 62, 127, 4, 171, 189, 199, 246, 239, 189, 93, 192, 236, 189, 144, 57, 165, 189, 140, 117, 170, 187, 87, 40, 150, 61, 116, 225, 106, 189, 100, 111, 172, 61, 65, 57, 131, 190, 120, 137, 17, 189, 13, 145, 102, 61, 77, 240, 55, 189, 170, 98, 184, 60, 24, 48, 128, 61, 202, 196, 201, 189, 149, 181, 30, 62, 154, 245, 217, 189, 152, 6, 251, 188, 218, 127, 1, 190, 129, 197, 153, 61, 125, 193, 112, 61, 33, 199, 250, 188, 153, 217, 140, 61, 140, 217, 193, 189, 29, 26, 10, 189, 252, 53, 243, 189, 249, 253, 63, 188, 74, 120, 0, 190, 14, 236, 56, 189, 2, 109, 225, 189, 188, 252, 144, 190, 64, 1, 174, 190, 187, 192, 5, 190, 152, 99, 83, 62, 64, 141, 71, 62, 126, 105, 133, 189, 108, 137, 37, 190, 155, 110, 130, 62, 119, 7, 29, 190, 170, 0, 63, 190, 81, 156, 12, 62, 218, 238, 40, 62, 128, 5, 43, 61, 8, 212, 210, 60, 28, 178, 100, 189, 105, 230, 160, 188, 70, 92, 205, 61, 193, 214, 213, 60, 24, 35, 45, 62, 18, 226, 24, 190, 168, 157, 56, 62, 17, 255, 3, 190, 55, 220, 26, 62, 106, 32, 101, 62, 61, 133, 122, 61, 60, 182, 54, 62, 122, 254, 120, 61, 105, 203, 204, 60, 240, 13, 136, 190, 209, 29, 165, 190, 77, 153, 25, 62, 184, 43, 85, 190, 11, 94, 21, 62, 1, 208, 35, 61, 58, 138, 127, 61, 93, 129, 183, 189, 40, 102, 36, 190, 130, 74, 194, 60, 19, 180, 35, 62, 67, 156, 2, 190, 121, 143, 0, 190, 78, 78, 137, 189, 7, 141, 2, 189, 188, 90, 86, 189, 233, 212, 176, 61, 165, 196, 35, 190, 252, 223, 0, 62, 77, 195, 152, 189, 133, 3, 56, 61, 116, 201, 6, 190, 202, 238, 175, 189, 64, 221, 229, 61, 122, 58, 46, 190, 148, 255, 176, 189, 114, 221, 22, 190, 55, 86, 2, 62, 162, 123, 251, 189, 18, 77, 234, 189, 84, 79, 51, 62, 106, 53, 77, 61, 90, 122, 12, 190, 15, 139, 30, 190, 102, 40, 247, 188, 164, 128, 168, 189, 138, 24, 119, 190, 7, 30, 45, 190, 91, 3, 51, 62, 98, 152, 135, 62, 87, 62, 137, 189, 29, 196, 122, 189, 8, 44, 25, 61, 237, 110, 17, 62, 77, 192, 195, 189, 159, 109, 75, 188, 164, 84, 151, 61, 29, 110, 53, 62, 33, 121, 53, 61, 204, 194, 162, 190, 199, 80, 139, 189, 38, 204, 63, 190, 52, 7, 1, 62, 191, 158, 117, 190, 244, 32, 137, 61, 55, 117, 62, 61, 220, 81, 37, 62, 135, 156, 87, 61, 91, 141, 197, 61, 33, 161, 96, 62, 160, 159, 235, 186, 5, 221, 96, 62, 251, 181, 109, 189, 172, 254, 243, 58, 179, 74, 103, 190, 87, 48, 105, 189, 175, 120, 44, 62, 112, 129, 59, 190, 255, 105, 245, 189, 173, 48, 95, 190, 122, 210, 46, 61, 97, 48, 130, 62, 186, 162, 221, 61, 10, 226, 27, 189, 224, 114, 49, 190, 135, 203, 80, 62, 177, 76, 77, 189, 208, 117, 144, 60, 25, 151, 18, 190, 127, 0, 148, 62, 169, 135, 136, 189, 74, 77, 37, 190, 127, 214, 40, 62, 193, 139, 101, 190, 38, 45, 160, 189, 108, 214, 128, 190, 16, 168, 130, 61, 172, 2, 73, 190, 157, 135, 90, 189, 147, 64, 39, 190, 62, 121, 144, 62, 103, 124, 91, 188, 139, 158, 118, 189, 244, 164, 157, 189, 87, 92, 63, 190, 178, 96, 36, 60, 211, 2, 161, 190, 25, 172, 80, 190, 95, 200, 247, 61, 161, 14, 177, 190, 27, 127, 31, 190, 215, 246, 246, 189, 63, 70, 30, 190, 57, 44, 3, 62, 243, 132, 35, 190, 250, 93, 66, 189, 128, 27, 194, 189, 195, 217, 32, 62, 202, 190, 64, 61, 201, 91, 199, 59, 158, 251, 149, 61, 96, 187, 31, 62, 132, 211, 182, 61, 90, 140, 190, 189, 5, 10, 174, 61, 198, 11, 249, 189, 116, 167, 41, 190, 37, 41, 173, 189, 136, 229, 93, 189, 12, 246, 208, 189, 164, 255, 253, 189, 126, 117, 51, 190, 171, 185, 179, 188, 141, 118, 126, 60, 138, 139, 169, 189, 67, 7, 22, 190, 204, 196, 148, 189, 30, 15, 122, 189, 84, 236, 55, 189, 140, 122, 25, 62, 155, 134, 13, 188, 33, 215, 5, 62, 19, 149, 73, 189, 68, 137, 244, 189, 203, 224, 3, 189, 192, 166, 41, 62, 24, 165, 61, 62, 104, 61, 181, 61, 107, 19, 116, 189, 160, 162, 27, 62, 243, 77, 244, 188, 63, 180, 141, 190, 139, 106, 142, 189, 125, 243, 169, 61, 186, 28, 6, 190, 57, 191, 90, 190, 44, 127, 170, 61, 150, 200, 126, 61, 160, 33, 164, 187, 40, 65, 77, 189, 249, 181, 77, 62, 139, 50, 77, 190, 170, 57, 67, 62, 196, 244, 150, 189, 147, 246, 134, 61, 103, 53, 134, 61, 143, 79, 56, 190, 72, 46, 175, 62, 125, 163, 84, 60, 206, 105, 157, 189, 114, 163, 139, 190, 245, 159, 90, 190, 201, 27, 92, 62, 185, 169, 188, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 119, 140, 61, 54, 177, 231, 188, 217, 163, 115, 61, 135, 89, 64, 62, 96, 235, 142, 61, 42, 210, 11, 62, 45, 124, 33, 62, 72, 211, 241, 61, 125, 60, 195, 61, 166, 82, 20, 62, 58, 39, 94, 62, 177, 80, 191, 189, 70, 249, 44, 60, 62, 27, 30, 61, 48, 168, 244, 189, 24, 249, 45, 188, 79, 170, 69, 62, 68, 183, 48, 62, 108, 161, 37, 188, 70, 188, 26, 190, 5, 26, 130, 62, 73, 111, 30, 61, 1, 27, 50, 190, 8, 52, 92, 61, 222, 247, 92, 62, 75, 219, 83, 61, 175, 28, 87, 61, 222, 133, 69, 61, 29, 205, 27, 61, 147, 237, 32, 62, 201, 195, 51, 190, 5, 1, 186, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 173, 157, 190, 6, 48, 116, 190, 197, 14, 55, 62, 125, 220, 136, 189, 60, 2, 48, 190, 134, 19, 183, 61, 55, 75, 90, 62, 207, 109, 138, 188, 65, 121, 156, 190, 12, 226, 187, 62, 26, 176, 80, 190, 163, 103, 55, 189, 110, 175, 132, 62, 197, 57, 252, 61, 205, 14, 2, 190, 189, 13, 191, 61, 217, 23, 86, 62, 215, 64, 195, 189, 105, 166, 30, 190, 234, 201, 239, 60, 160, 85, 158, 190, 100, 248, 135, 61, 177, 73, 42, 190, 141, 111, 174, 61, 192, 113, 53, 189, 182, 208, 154, 61, 6, 3, 13, 62, 188, 219, 33, 190, 102, 192, 29, 62, 169, 26, 123, 62, 247, 55, 181, 61, 51, 68, 140, 62, 219, 136, 1, 62, 109, 76, 122, 189, 195, 141, 33, 189, 194, 173, 139, 189, 2, 18, 97, 190, 63, 40, 68, 59, 147, 3, 110, 61, 140, 114, 129, 61, 36, 66, 99, 189, 83, 210, 172, 61, 187, 153, 71, 190, 253, 43, 117, 189, 186, 173, 251, 189, 78, 245, 240, 60, 123, 36, 230, 188, 95, 66, 10, 62, 88, 103, 74, 190, 195, 198, 27, 190, 243, 78, 63, 62, 95, 78, 182, 59, 157, 77, 129, 62, 251, 27, 235, 61, 232, 106, 143, 189, 221, 172, 83, 61, 251, 161, 11, 190, 214, 218, 40, 189, 223, 91, 99, 188, 95, 217, 40, 61, 158, 62, 180, 190, 62, 238, 34, 190, 231, 127, 225, 189, 252, 253, 206, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 53, 233, 61, 226, 198, 130, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {190, 79, 15, 191, 101, 196, 42, 62, 115, 51, 186, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {194, 80, 74, 191, 105, 192, 28, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0018/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}