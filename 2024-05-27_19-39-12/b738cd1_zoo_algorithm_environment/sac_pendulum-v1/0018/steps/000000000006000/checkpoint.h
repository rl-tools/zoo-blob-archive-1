// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 192, 126, 60, 187, 2, 12, 191, 217, 62, 186, 62, 108, 153, 154, 62, 32, 156, 25, 63, 71, 61, 176, 62, 90, 23, 11, 63, 11, 22, 211, 62, 242, 69, 169, 62, 218, 10, 2, 63, 167, 103, 106, 191, 244, 190, 42, 190, 21, 103, 25, 191, 84, 240, 34, 190, 98, 111, 55, 61, 123, 28, 121, 191, 65, 161, 153, 190, 168, 203, 109, 188, 205, 110, 200, 190, 254, 81, 74, 191, 211, 48, 133, 189, 204, 142, 147, 190, 96, 244, 238, 189, 58, 17, 69, 60, 45, 28, 154, 62, 67, 147, 48, 63, 242, 118, 74, 191, 113, 50, 85, 188, 112, 113, 35, 63, 71, 43, 27, 63, 132, 118, 173, 186, 192, 94, 111, 62, 116, 43, 75, 191, 40, 239, 204, 189, 88, 36, 188, 191, 232, 247, 7, 63, 0, 229, 157, 190, 153, 151, 78, 62, 147, 241, 6, 191, 19, 169, 6, 191, 86, 55, 171, 62, 122, 239, 110, 191, 156, 58, 36, 191, 199, 202, 131, 191, 44, 9, 151, 189, 108, 165, 0, 190, 86, 143, 30, 63, 101, 201, 38, 191, 215, 211, 135, 190, 170, 249, 26, 62, 229, 161, 153, 62, 6, 47, 30, 62, 137, 128, 11, 190, 217, 12, 148, 190, 210, 161, 146, 190, 180, 19, 17, 190, 143, 179, 52, 63, 221, 153, 102, 63, 200, 115, 13, 61, 50, 56, 234, 61, 87, 235, 109, 190, 69, 96, 135, 191, 48, 73, 193, 190, 201, 27, 65, 63, 179, 7, 60, 63, 230, 227, 187, 62, 107, 100, 212, 62, 184, 163, 90, 61, 24, 171, 3, 63, 244, 227, 24, 63, 61, 78, 87, 191, 90, 141, 250, 190, 191, 66, 60, 63, 239, 255, 6, 191, 170, 38, 239, 62, 144, 149, 30, 63, 243, 96, 87, 191, 95, 69, 40, 190, 3, 2, 123, 62, 83, 209, 32, 62, 140, 86, 5, 62, 116, 218, 191, 190, 102, 143, 255, 190, 105, 222, 156, 190, 15, 210, 43, 63, 126, 38, 184, 62, 117, 167, 41, 63, 76, 48, 198, 190, 96, 177, 114, 190, 133, 78, 221, 188, 214, 186, 146, 190, 95, 151, 239, 61, 57, 105, 26, 63, 0, 34, 68, 61, 108, 176, 36, 63, 172, 192, 185, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {108, 241, 197, 190, 189, 45, 114, 191, 21, 223, 6, 63, 168, 246, 171, 62, 168, 132, 250, 62, 46, 162, 228, 62, 122, 174, 31, 191, 103, 250, 29, 63, 254, 106, 58, 63, 58, 2, 29, 191, 19, 229, 2, 63, 10, 21, 145, 189, 208, 144, 123, 190, 73, 120, 114, 60, 242, 144, 0, 62, 59, 37, 20, 190, 132, 145, 196, 62, 82, 124, 94, 191, 239, 252, 160, 190, 0, 30, 157, 62, 162, 232, 240, 62, 127, 86, 103, 189, 247, 100, 245, 62, 95, 236, 203, 61, 23, 91, 221, 62, 57, 91, 32, 62, 21, 48, 5, 63, 23, 115, 8, 191, 186, 88, 7, 189, 117, 230, 44, 191, 117, 228, 78, 62, 134, 167, 106, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 161, 134, 60, 209, 3, 170, 62, 52, 190, 22, 190, 7, 53, 2, 189, 105, 250, 176, 62, 225, 103, 54, 62, 185, 168, 160, 190, 99, 231, 17, 62, 161, 232, 115, 62, 248, 164, 224, 61, 214, 3, 85, 190, 15, 65, 9, 191, 145, 13, 152, 190, 196, 22, 140, 62, 163, 5, 148, 62, 149, 6, 36, 190, 52, 172, 10, 62, 161, 142, 107, 190, 6, 26, 170, 190, 176, 244, 129, 62, 159, 130, 118, 185, 21, 52, 181, 62, 120, 254, 99, 190, 166, 170, 174, 190, 16, 246, 140, 62, 99, 34, 160, 190, 36, 184, 54, 62, 171, 221, 134, 190, 105, 149, 143, 62, 239, 188, 5, 190, 3, 193, 37, 190, 135, 40, 197, 62, 141, 247, 181, 189, 87, 148, 32, 62, 156, 144, 249, 188, 62, 95, 245, 189, 68, 82, 149, 189, 172, 44, 25, 62, 21, 111, 224, 190, 35, 169, 126, 62, 187, 25, 78, 62, 166, 221, 243, 61, 159, 229, 43, 62, 49, 167, 219, 190, 71, 200, 10, 190, 100, 184, 208, 62, 188, 110, 79, 62, 91, 96, 101, 190, 49, 14, 240, 60, 123, 136, 137, 190, 132, 76, 137, 190, 89, 219, 127, 62, 44, 174, 44, 62, 170, 190, 130, 62, 226, 239, 255, 189, 117, 132, 122, 190, 1, 242, 121, 62, 147, 216, 54, 190, 152, 71, 7, 62, 78, 70, 35, 190, 24, 125, 152, 62, 61, 216, 6, 190, 152, 193, 87, 190, 79, 41, 67, 62, 201, 178, 221, 189, 201, 129, 203, 190, 218, 199, 123, 189, 95, 181, 199, 189, 113, 143, 103, 59, 88, 97, 241, 59, 37, 255, 187, 60, 126, 128, 29, 62, 122, 153, 234, 190, 244, 80, 153, 190, 180, 98, 239, 190, 210, 176, 130, 61, 149, 88, 53, 62, 123, 0, 164, 190, 213, 193, 33, 190, 170, 136, 91, 62, 6, 28, 115, 62, 73, 16, 68, 189, 157, 109, 184, 62, 115, 88, 150, 59, 243, 71, 184, 190, 223, 147, 132, 190, 32, 52, 20, 62, 253, 171, 241, 189, 10, 207, 158, 189, 5, 206, 12, 63, 241, 239, 146, 62, 114, 116, 77, 62, 127, 17, 109, 190, 61, 240, 122, 189, 175, 110, 240, 61, 90, 197, 236, 190, 6, 91, 246, 60, 154, 14, 107, 189, 244, 96, 227, 58, 215, 54, 37, 62, 70, 135, 182, 189, 253, 242, 168, 61, 150, 132, 250, 190, 11, 40, 14, 62, 185, 41, 150, 190, 61, 184, 149, 189, 105, 192, 68, 189, 37, 115, 171, 61, 60, 27, 140, 190, 216, 189, 92, 190, 121, 247, 137, 62, 220, 208, 1, 191, 140, 115, 244, 61, 99, 82, 160, 190, 241, 78, 49, 61, 119, 197, 162, 62, 165, 241, 102, 62, 99, 9, 28, 62, 81, 8, 254, 189, 235, 66, 188, 190, 142, 89, 110, 62, 32, 77, 50, 190, 124, 184, 203, 189, 61, 26, 26, 190, 252, 10, 75, 62, 95, 168, 66, 62, 122, 236, 75, 61, 136, 14, 21, 61, 222, 109, 123, 189, 177, 194, 234, 59, 135, 243, 30, 61, 3, 51, 242, 189, 228, 243, 57, 190, 189, 231, 229, 189, 247, 40, 43, 190, 244, 114, 122, 60, 106, 108, 34, 62, 0, 138, 127, 190, 232, 85, 215, 189, 157, 15, 57, 190, 70, 145, 227, 189, 112, 28, 52, 190, 209, 51, 56, 191, 161, 110, 248, 61, 133, 242, 88, 61, 229, 7, 145, 190, 208, 144, 53, 190, 173, 200, 78, 62, 228, 178, 207, 190, 236, 70, 180, 61, 227, 215, 180, 61, 130, 190, 23, 62, 163, 115, 142, 61, 121, 80, 97, 62, 45, 13, 216, 61, 89, 117, 172, 190, 151, 28, 147, 189, 191, 253, 173, 61, 72, 66, 199, 61, 197, 71, 141, 62, 5, 117, 178, 188, 29, 20, 28, 62, 18, 208, 239, 189, 52, 110, 31, 190, 175, 190, 199, 189, 179, 150, 16, 190, 63, 129, 196, 189, 19, 145, 140, 189, 106, 241, 159, 61, 126, 73, 40, 190, 82, 209, 26, 190, 119, 226, 65, 189, 214, 75, 135, 189, 127, 118, 32, 190, 216, 23, 147, 189, 237, 142, 194, 189, 143, 63, 129, 187, 241, 177, 51, 62, 217, 217, 12, 60, 95, 166, 237, 189, 160, 32, 171, 189, 160, 96, 79, 189, 88, 191, 157, 61, 177, 237, 26, 190, 113, 227, 201, 189, 166, 126, 97, 189, 220, 225, 138, 188, 90, 91, 231, 60, 247, 50, 38, 190, 77, 133, 51, 190, 180, 138, 206, 60, 167, 169, 37, 190, 230, 102, 22, 190, 152, 58, 83, 61, 211, 209, 182, 189, 230, 181, 20, 62, 240, 20, 247, 189, 32, 68, 151, 61, 221, 88, 140, 62, 205, 216, 230, 189, 4, 236, 172, 190, 41, 142, 178, 189, 68, 230, 148, 190, 57, 213, 46, 190, 241, 188, 16, 62, 3, 212, 129, 190, 239, 249, 84, 188, 182, 143, 193, 61, 228, 164, 88, 62, 28, 221, 228, 59, 121, 19, 136, 62, 152, 22, 205, 187, 42, 18, 172, 189, 225, 180, 115, 190, 240, 141, 169, 61, 127, 50, 82, 62, 203, 126, 251, 189, 231, 138, 218, 62, 35, 225, 148, 188, 49, 124, 109, 62, 4, 20, 117, 61, 177, 159, 110, 189, 35, 236, 249, 61, 160, 87, 200, 190, 4, 7, 185, 61, 147, 176, 164, 189, 118, 195, 232, 189, 136, 225, 221, 189, 4, 232, 148, 189, 118, 189, 96, 189, 154, 251, 33, 190, 200, 92, 100, 189, 142, 126, 43, 61, 199, 39, 40, 190, 211, 138, 246, 189, 74, 81, 81, 61, 4, 80, 252, 59, 93, 207, 107, 189, 190, 141, 41, 190, 147, 206, 196, 188, 50, 60, 21, 189, 4, 158, 147, 189, 190, 25, 33, 190, 39, 48, 159, 189, 59, 211, 197, 61, 104, 66, 204, 189, 113, 30, 158, 189, 156, 210, 133, 189, 89, 59, 184, 189, 250, 193, 23, 190, 130, 22, 11, 189, 214, 104, 213, 59, 18, 88, 17, 190, 11, 55, 244, 189, 95, 136, 217, 61, 89, 155, 250, 189, 173, 149, 223, 189, 241, 64, 23, 189, 28, 3, 42, 62, 52, 251, 30, 190, 51, 133, 205, 189, 61, 212, 120, 188, 52, 176, 170, 190, 238, 81, 171, 60, 136, 72, 186, 62, 131, 75, 151, 61, 141, 72, 138, 61, 68, 198, 166, 190, 175, 21, 1, 190, 29, 17, 190, 62, 117, 229, 115, 190, 237, 172, 191, 190, 183, 119, 72, 61, 165, 161, 216, 190, 156, 184, 160, 189, 75, 24, 195, 62, 172, 59, 40, 62, 63, 232, 21, 62, 20, 9, 38, 190, 30, 14, 80, 190, 162, 31, 1, 58, 154, 19, 48, 190, 24, 84, 195, 61, 79, 156, 132, 61, 31, 237, 95, 61, 237, 193, 147, 189, 245, 122, 97, 60, 244, 118, 133, 62, 220, 231, 48, 190, 254, 216, 17, 190, 228, 221, 169, 189, 3, 57, 24, 189, 98, 214, 103, 62, 181, 129, 127, 61, 91, 23, 132, 189, 1, 109, 40, 62, 104, 231, 80, 191, 106, 90, 177, 190, 162, 53, 147, 191, 80, 13, 164, 61, 218, 179, 164, 189, 108, 121, 92, 191, 82, 250, 45, 60, 91, 112, 55, 190, 21, 219, 135, 62, 129, 115, 157, 190, 185, 153, 54, 62, 140, 196, 4, 190, 238, 18, 234, 190, 166, 245, 65, 190, 255, 119, 137, 61, 24, 245, 180, 189, 147, 124, 25, 190, 38, 194, 210, 62, 14, 251, 127, 61, 210, 196, 225, 189, 81, 183, 134, 189, 77, 88, 78, 189, 18, 184, 1, 62, 57, 93, 136, 190, 139, 158, 239, 190, 238, 175, 186, 188, 186, 95, 149, 190, 24, 239, 113, 61, 175, 215, 37, 62, 58, 217, 130, 62, 78, 151, 201, 189, 93, 145, 39, 61, 86, 40, 242, 61, 104, 219, 72, 190, 175, 189, 27, 62, 122, 95, 69, 191, 130, 10, 6, 190, 51, 162, 61, 189, 17, 138, 109, 62, 112, 93, 140, 190, 125, 52, 198, 189, 116, 108, 126, 190, 185, 79, 129, 191, 7, 60, 216, 61, 175, 209, 103, 62, 73, 201, 14, 62, 95, 37, 114, 190, 54, 106, 2, 190, 243, 28, 15, 62, 16, 68, 104, 190, 248, 154, 239, 61, 95, 185, 121, 188, 121, 122, 100, 62, 153, 92, 19, 62, 173, 123, 44, 190, 108, 225, 115, 62, 137, 185, 192, 61, 196, 131, 35, 62, 244, 193, 47, 189, 170, 73, 138, 61, 85, 134, 44, 189, 69, 196, 208, 189, 31, 43, 137, 61, 203, 20, 17, 189, 21, 28, 156, 61, 97, 19, 32, 190, 7, 167, 165, 189, 166, 96, 173, 188, 249, 91, 6, 189, 22, 135, 251, 189, 172, 16, 3, 190, 91, 52, 40, 190, 137, 172, 18, 62, 19, 142, 225, 60, 249, 136, 54, 189, 21, 183, 40, 190, 5, 163, 217, 189, 129, 32, 217, 61, 127, 93, 65, 189, 193, 85, 102, 189, 1, 52, 161, 189, 57, 21, 156, 61, 144, 23, 188, 188, 98, 181, 45, 190, 24, 210, 29, 189, 24, 230, 3, 62, 219, 192, 113, 61, 169, 250, 186, 189, 207, 43, 90, 189, 181, 184, 128, 61, 16, 97, 159, 189, 226, 107, 52, 62, 82, 71, 213, 188, 104, 92, 68, 61, 66, 216, 22, 189, 119, 116, 137, 189, 25, 36, 210, 62, 1, 159, 16, 190, 4, 98, 221, 62, 8, 83, 37, 190, 229, 73, 139, 60, 4, 184, 51, 61, 114, 14, 76, 190, 3, 101, 85, 62, 105, 49, 188, 61, 134, 19, 93, 62, 199, 205, 176, 190, 102, 116, 156, 189, 47, 113, 160, 60, 245, 184, 176, 60, 74, 83, 4, 62, 177, 65, 20, 62, 176, 241, 149, 189, 130, 242, 126, 62, 92, 171, 195, 59, 226, 44, 28, 60, 75, 197, 204, 60, 199, 104, 27, 189, 85, 181, 149, 188, 102, 28, 1, 62, 40, 96, 63, 61, 189, 101, 170, 60, 242, 145, 206, 60, 167, 102, 49, 190, 253, 91, 28, 62, 38, 249, 57, 188, 247, 0, 45, 62, 227, 36, 28, 190, 160, 226, 220, 189, 221, 74, 45, 190, 237, 191, 136, 61, 127, 121, 3, 189, 55, 20, 62, 61, 132, 196, 9, 188, 90, 102, 51, 190, 199, 236, 163, 189, 135, 220, 55, 60, 208, 131, 170, 61, 41, 192, 218, 188, 56, 224, 12, 190, 120, 244, 137, 189, 53, 207, 30, 190, 49, 12, 37, 190, 105, 240, 58, 61, 74, 141, 24, 190, 51, 220, 143, 60, 208, 32, 141, 189, 90, 98, 135, 60, 147, 30, 9, 190, 182, 233, 43, 62, 45, 133, 195, 189, 44, 105, 73, 187, 32, 130, 71, 61, 136, 198, 159, 61, 146, 215, 163, 61, 123, 37, 240, 61, 6, 161, 150, 61, 3, 31, 81, 188, 229, 144, 162, 190, 186, 147, 23, 190, 195, 33, 156, 190, 235, 190, 1, 62, 170, 99, 173, 61, 67, 183, 157, 62, 16, 247, 66, 190, 19, 219, 174, 190, 149, 55, 154, 62, 58, 245, 2, 189, 149, 230, 5, 190, 13, 214, 80, 62, 168, 233, 253, 61, 142, 69, 101, 189, 202, 173, 126, 62, 176, 51, 185, 188, 172, 151, 140, 62, 94, 71, 31, 62, 64, 134, 161, 185, 223, 224, 70, 190, 212, 152, 40, 188, 56, 17, 25, 190, 148, 192, 31, 62, 102, 174, 201, 61, 66, 247, 37, 61, 185, 61, 151, 190, 225, 109, 20, 62, 203, 10, 57, 62, 128, 45, 1, 189, 119, 144, 184, 190, 77, 226, 208, 190, 103, 13, 181, 190, 8, 41, 42, 189, 112, 254, 199, 190, 219, 18, 244, 189, 134, 47, 28, 62, 189, 198, 164, 61, 245, 90, 63, 190, 183, 5, 75, 190, 212, 15, 155, 188, 120, 97, 72, 62, 174, 40, 182, 60, 18, 106, 205, 61, 210, 66, 1, 190, 202, 219, 45, 61, 39, 80, 65, 62, 124, 233, 102, 190, 230, 116, 51, 62, 186, 250, 225, 189, 56, 220, 109, 189, 168, 106, 68, 190, 114, 189, 132, 190, 97, 20, 20, 61, 24, 239, 44, 62, 159, 193, 74, 62, 55, 2, 99, 59, 149, 193, 88, 190, 5, 3, 83, 62, 205, 218, 214, 189, 2, 7, 136, 61, 1, 67, 14, 61, 62, 35, 36, 62, 78, 174, 60, 62, 109, 253, 196, 189, 83, 51, 206, 189, 24, 186, 2, 62, 144, 184, 169, 62, 196, 249, 95, 62, 104, 62, 154, 62, 3, 211, 105, 190, 9, 117, 32, 61, 195, 182, 32, 62, 194, 138, 205, 189, 117, 39, 51, 190, 68, 116, 163, 190, 106, 214, 220, 190, 133, 96, 239, 190, 146, 29, 10, 62, 239, 124, 232, 60, 109, 177, 65, 62, 26, 78, 247, 188, 35, 245, 152, 189, 130, 240, 38, 59, 60, 169, 99, 189, 179, 121, 57, 61, 164, 21, 235, 189, 202, 224, 18, 189, 75, 4, 20, 190, 153, 59, 240, 190, 107, 101, 141, 62, 140, 235, 12, 190, 126, 222, 61, 190, 158, 227, 133, 61, 245, 176, 63, 62, 35, 104, 17, 190, 48, 182, 200, 189, 160, 199, 66, 190, 107, 235, 19, 62, 8, 131, 0, 62, 196, 56, 179, 189, 219, 41, 119, 60, 13, 121, 165, 61, 178, 189, 229, 189, 153, 52, 121, 61, 135, 98, 164, 60, 223, 191, 122, 190, 78, 2, 176, 61, 213, 156, 145, 190, 147, 219, 73, 61, 82, 53, 136, 62, 150, 78, 90, 62, 87, 203, 133, 62, 151, 191, 140, 189, 253, 241, 72, 186, 68, 183, 85, 62, 74, 42, 174, 190, 120, 176, 81, 61, 169, 238, 174, 189, 61, 155, 53, 188, 2, 76, 213, 61, 38, 236, 163, 60, 121, 27, 171, 61, 4, 106, 32, 61, 26, 102, 0, 190, 211, 166, 167, 190, 174, 145, 81, 62, 106, 179, 189, 189, 102, 72, 52, 191, 234, 198, 213, 60, 35, 36, 108, 190, 3, 20, 58, 190, 15, 30, 192, 189, 251, 9, 200, 189, 148, 6, 197, 62, 90, 29, 138, 189, 247, 82, 211, 61, 40, 158, 84, 188, 222, 65, 80, 62, 29, 84, 125, 189, 62, 196, 194, 62, 79, 165, 41, 62, 120, 161, 59, 190, 111, 63, 248, 61, 233, 86, 230, 190, 35, 109, 104, 189, 233, 135, 62, 62, 137, 98, 221, 189, 62, 124, 190, 62, 218, 138, 59, 190, 182, 161, 17, 61, 146, 198, 73, 61, 55, 153, 164, 61, 37, 13, 177, 57, 139, 169, 142, 190, 10, 104, 24, 59, 56, 221, 190, 189, 122, 186, 229, 61, 13, 223, 102, 189, 40, 7, 152, 189, 196, 34, 71, 190, 24, 5, 166, 60, 202, 92, 239, 61, 190, 137, 54, 189, 161, 1, 83, 188, 1, 71, 76, 61, 56, 16, 160, 189, 133, 222, 197, 188, 212, 26, 156, 189, 254, 209, 34, 190, 0, 94, 13, 62, 157, 50, 16, 190, 107, 94, 251, 61, 45, 126, 27, 190, 97, 137, 9, 189, 243, 201, 209, 188, 71, 188, 180, 189, 228, 246, 8, 62, 17, 39, 149, 189, 17, 54, 61, 190, 17, 154, 43, 190, 197, 159, 62, 190, 201, 32, 243, 61, 244, 178, 223, 61, 123, 95, 194, 189, 223, 93, 141, 61, 56, 168, 39, 190, 163, 250, 200, 189, 88, 107, 74, 62, 98, 122, 242, 190, 221, 89, 7, 190, 81, 127, 26, 62, 185, 14, 91, 62, 15, 167, 208, 190, 15, 52, 133, 62, 82, 173, 205, 61, 36, 179, 50, 62, 242, 207, 203, 189, 223, 79, 37, 191, 139, 49, 213, 189, 131, 84, 218, 62, 222, 174, 57, 62, 61, 194, 115, 190, 91, 37, 48, 190, 132, 240, 59, 190, 198, 120, 60, 191, 87, 52, 140, 62, 128, 182, 144, 62, 173, 243, 200, 62, 3, 23, 5, 191, 112, 232, 233, 190, 81, 46, 142, 62, 157, 58, 184, 189, 177, 98, 106, 189, 148, 24, 216, 190, 250, 162, 194, 62, 153, 145, 192, 189, 162, 121, 127, 190, 112, 67, 208, 62, 7, 202, 144, 62, 239, 223, 4, 190, 124, 157, 6, 61, 189, 106, 183, 62, 174, 34, 54, 62, 245, 57, 107, 189, 108, 61, 182, 62, 216, 60, 104, 61, 157, 19, 190, 60, 114, 170, 75, 61, 211, 120, 56, 190, 13, 177, 238, 189, 100, 225, 180, 61, 241, 144, 172, 189, 164, 163, 119, 189, 205, 160, 60, 190, 223, 0, 137, 190, 220, 75, 124, 190, 38, 200, 93, 190, 24, 11, 4, 62, 230, 142, 48, 62, 138, 191, 136, 190, 180, 39, 101, 62, 180, 134, 251, 61, 181, 79, 119, 62, 94, 41, 129, 62, 239, 255, 66, 62, 191, 49, 177, 62, 240, 133, 58, 188, 27, 100, 42, 62, 118, 139, 40, 190, 131, 27, 1, 191, 166, 253, 209, 189, 182, 71, 107, 189, 244, 127, 221, 189, 226, 237, 13, 60, 168, 81, 25, 189, 231, 165, 91, 190, 165, 128, 250, 61, 153, 178, 45, 60, 112, 7, 42, 61, 67, 172, 70, 190, 72, 167, 60, 189, 224, 80, 71, 189, 152, 53, 154, 61, 195, 124, 81, 189, 143, 243, 125, 189, 75, 253, 197, 61, 169, 110, 144, 61, 211, 33, 36, 61, 201, 67, 9, 61, 212, 82, 32, 59, 130, 103, 1, 62, 19, 32, 190, 188, 7, 225, 255, 189, 244, 65, 236, 189, 172, 177, 48, 62, 174, 201, 67, 190, 101, 230, 247, 188, 87, 125, 185, 189, 20, 233, 209, 61, 2, 117, 140, 62, 124, 251, 237, 61, 255, 230, 252, 189, 163, 173, 3, 190, 140, 175, 205, 60, 68, 34, 26, 190, 126, 237, 12, 190, 194, 219, 229, 189, 252, 24, 11, 190, 206, 146, 1, 190, 39, 212, 156, 189, 182, 205, 178, 189, 153, 128, 230, 189, 110, 1, 239, 189, 225, 39, 214, 61, 32, 20, 16, 189, 86, 147, 86, 189, 224, 4, 233, 189, 157, 58, 183, 61, 198, 206, 97, 60, 232, 147, 118, 61, 188, 95, 193, 189, 120, 132, 45, 62, 146, 215, 172, 61, 213, 216, 165, 188, 97, 148, 14, 190, 245, 110, 196, 186, 196, 216, 175, 189, 102, 110, 227, 61, 202, 85, 129, 60, 7, 79, 46, 190, 207, 246, 39, 60, 172, 176, 245, 61, 179, 200, 69, 189, 205, 26, 32, 190, 104, 217, 56, 189, 126, 53, 80, 190, 78, 73, 100, 62, 112, 122, 148, 188, 125, 6, 176, 60, 89, 20, 159, 188, 67, 2, 130, 190, 234, 219, 72, 62, 181, 139, 70, 60, 77, 205, 116, 61, 73, 134, 247, 189, 195, 153, 132, 61, 125, 16, 236, 187, 58, 207, 178, 61, 212, 5, 53, 58, 82, 218, 150, 189, 74, 121, 56, 190, 158, 129, 131, 190, 118, 6, 196, 189, 72, 255, 183, 62, 215, 254, 134, 61, 164, 23, 55, 62, 99, 203, 245, 189, 63, 108, 8, 62, 198, 207, 179, 61, 60, 49, 11, 190, 10, 235, 127, 62, 50, 16, 74, 189, 48, 70, 226, 189, 115, 160, 66, 190, 234, 146, 35, 61, 45, 88, 219, 61, 97, 184, 223, 60, 93, 73, 180, 62, 230, 86, 194, 189, 61, 117, 219, 190, 112, 177, 128, 191, 231, 135, 12, 191, 140, 117, 170, 187, 24, 168, 144, 190, 215, 65, 24, 190, 161, 246, 87, 62, 37, 219, 179, 190, 54, 33, 134, 190, 13, 145, 102, 61, 77, 240, 55, 189, 251, 230, 211, 60, 24, 48, 128, 61, 155, 133, 64, 190, 149, 181, 30, 62, 114, 90, 50, 190, 174, 254, 83, 61, 218, 127, 1, 190, 33, 249, 65, 62, 138, 236, 207, 188, 122, 36, 241, 188, 14, 21, 160, 188, 185, 138, 231, 190, 60, 86, 236, 189, 252, 53, 243, 189, 78, 198, 41, 61, 74, 120, 0, 190, 48, 224, 204, 189, 45, 60, 196, 189, 252, 9, 217, 190, 214, 38, 7, 191, 99, 17, 136, 60, 68, 189, 30, 62, 199, 108, 155, 61, 20, 82, 196, 189, 22, 7, 138, 62, 159, 246, 84, 62, 43, 105, 185, 190, 183, 26, 84, 190, 64, 187, 36, 190, 234, 161, 144, 61, 214, 28, 101, 61, 153, 61, 164, 190, 78, 37, 174, 190, 59, 84, 66, 189, 198, 185, 242, 61, 212, 224, 187, 188, 22, 185, 113, 62, 245, 239, 53, 189, 247, 171, 9, 190, 155, 88, 115, 189, 124, 12, 87, 62, 148, 241, 150, 62, 47, 100, 66, 189, 154, 138, 215, 62, 185, 22, 4, 62, 101, 170, 102, 62, 90, 130, 116, 190, 119, 127, 124, 190, 100, 114, 113, 62, 100, 18, 184, 190, 11, 94, 21, 62, 1, 208, 35, 61, 58, 138, 127, 61, 93, 129, 183, 189, 40, 102, 36, 190, 130, 74, 194, 60, 19, 180, 35, 62, 67, 156, 2, 190, 121, 143, 0, 190, 78, 78, 137, 189, 7, 141, 2, 189, 188, 90, 86, 189, 233, 212, 176, 61, 165, 196, 35, 190, 252, 223, 0, 62, 77, 195, 152, 189, 133, 3, 56, 61, 116, 201, 6, 190, 202, 238, 175, 189, 64, 221, 229, 61, 122, 58, 46, 190, 148, 255, 176, 189, 114, 221, 22, 190, 55, 86, 2, 62, 162, 123, 251, 189, 18, 77, 234, 189, 84, 79, 51, 62, 106, 53, 77, 61, 90, 122, 12, 190, 15, 139, 30, 190, 102, 40, 247, 188, 164, 128, 168, 189, 2, 224, 196, 190, 206, 175, 144, 190, 121, 48, 127, 62, 217, 74, 49, 62, 226, 83, 230, 189, 128, 241, 35, 61, 20, 98, 152, 189, 26, 91, 63, 62, 115, 107, 211, 190, 22, 124, 133, 189, 151, 148, 219, 190, 20, 125, 170, 61, 192, 23, 140, 61, 254, 100, 92, 191, 124, 58, 106, 190, 216, 243, 127, 190, 117, 115, 66, 62, 81, 36, 148, 190, 31, 170, 168, 61, 175, 96, 152, 61, 162, 217, 39, 190, 168, 129, 46, 61, 117, 13, 193, 61, 61, 251, 27, 62, 142, 144, 20, 190, 130, 13, 209, 62, 84, 220, 217, 187, 78, 79, 73, 189, 247, 242, 139, 190, 91, 59, 67, 189, 108, 33, 97, 62, 202, 214, 190, 190, 168, 95, 94, 190, 230, 52, 175, 190, 211, 39, 16, 62, 29, 18, 78, 62, 28, 86, 124, 61, 30, 98, 152, 60, 146, 217, 235, 189, 150, 128, 109, 62, 236, 239, 163, 190, 81, 237, 228, 188, 207, 218, 61, 191, 144, 9, 65, 62, 248, 253, 48, 61, 146, 222, 49, 191, 72, 199, 100, 189, 69, 95, 45, 190, 13, 174, 12, 189, 173, 136, 92, 190, 27, 97, 158, 61, 198, 18, 208, 189, 141, 14, 216, 190, 112, 195, 14, 190, 128, 250, 158, 62, 69, 160, 158, 60, 63, 187, 27, 190, 28, 154, 206, 62, 27, 121, 159, 189, 28, 94, 254, 61, 136, 110, 168, 190, 208, 75, 62, 190, 35, 170, 42, 62, 45, 36, 6, 191, 27, 127, 31, 190, 215, 246, 246, 189, 63, 70, 30, 190, 77, 2, 2, 62, 243, 132, 35, 190, 250, 93, 66, 189, 128, 27, 194, 189, 25, 168, 31, 62, 110, 209, 3, 61, 201, 91, 199, 59, 230, 191, 119, 61, 96, 187, 31, 62, 65, 31, 170, 61, 234, 122, 217, 189, 5, 10, 174, 61, 14, 105, 6, 190, 116, 167, 41, 190, 20, 64, 174, 189, 136, 229, 93, 189, 160, 52, 210, 189, 210, 228, 1, 190, 126, 117, 51, 190, 171, 185, 179, 188, 200, 203, 39, 60, 138, 139, 169, 189, 130, 64, 22, 190, 107, 169, 150, 189, 30, 15, 122, 189, 84, 236, 55, 189, 140, 122, 25, 62, 155, 134, 13, 188, 90, 126, 253, 61, 22, 95, 227, 189, 61, 25, 154, 190, 192, 254, 155, 61, 215, 154, 74, 61, 56, 243, 197, 61, 28, 248, 152, 61, 168, 16, 17, 60, 215, 201, 16, 62, 212, 126, 177, 190, 210, 9, 182, 190, 175, 82, 59, 191, 52, 3, 112, 61, 106, 203, 166, 189, 143, 220, 75, 191, 214, 235, 89, 190, 176, 72, 155, 61, 89, 59, 98, 61, 212, 151, 35, 189, 228, 106, 137, 62, 210, 47, 172, 189, 12, 73, 136, 190, 161, 57, 173, 189, 173, 49, 48, 62, 69, 238, 179, 61, 154, 62, 80, 190, 108, 58, 69, 63, 243, 78, 45, 62, 234, 193, 32, 59, 27, 189, 140, 190, 111, 151, 78, 190, 133, 135, 154, 62, 4, 66, 7, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 186, 241, 61, 251, 199, 63, 60, 46, 192, 96, 61, 148, 107, 97, 62, 121, 224, 194, 61, 42, 210, 11, 62, 87, 211, 32, 62, 72, 211, 241, 61, 71, 208, 29, 61, 26, 225, 65, 62, 50, 38, 159, 62, 177, 80, 191, 189, 47, 217, 216, 61, 62, 27, 30, 61, 24, 93, 60, 190, 72, 78, 161, 189, 214, 62, 180, 62, 212, 188, 137, 62, 61, 78, 191, 189, 69, 234, 63, 190, 45, 197, 139, 62, 204, 155, 246, 61, 199, 39, 50, 190, 8, 52, 92, 61, 22, 166, 187, 62, 162, 67, 28, 190, 127, 70, 34, 61, 222, 133, 69, 61, 115, 255, 253, 61, 185, 160, 128, 62, 109, 242, 54, 190, 76, 178, 27, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 133, 13, 191, 159, 77, 219, 190, 139, 136, 201, 62, 47, 84, 13, 190, 236, 137, 44, 190, 134, 19, 183, 61, 253, 163, 163, 62, 207, 109, 138, 188, 176, 146, 147, 190, 104, 85, 72, 63, 223, 199, 2, 191, 163, 103, 55, 189, 151, 98, 195, 62, 197, 57, 252, 61, 122, 144, 129, 190, 203, 50, 15, 62, 228, 144, 173, 62, 115, 87, 175, 189, 255, 206, 163, 190, 206, 169, 74, 188, 252, 131, 49, 191, 247, 9, 238, 62, 255, 73, 42, 190, 141, 111, 174, 61, 5, 26, 9, 189, 37, 18, 39, 63, 75, 142, 174, 62, 188, 219, 33, 190, 170, 217, 192, 62, 137, 23, 252, 62, 189, 46, 181, 61, 216, 43, 29, 63, 199, 200, 192, 61, 248, 122, 73, 186, 56, 63, 80, 61, 136, 26, 32, 190, 160, 137, 180, 190, 63, 40, 68, 59, 208, 227, 135, 61, 140, 114, 129, 61, 218, 55, 173, 188, 193, 203, 18, 62, 97, 20, 194, 190, 253, 43, 117, 189, 142, 172, 103, 61, 78, 245, 240, 60, 83, 244, 60, 61, 15, 193, 229, 62, 236, 32, 155, 190, 224, 238, 68, 190, 75, 255, 229, 62, 247, 183, 125, 61, 231, 98, 134, 62, 240, 251, 236, 60, 226, 100, 143, 189, 221, 172, 83, 61, 97, 144, 75, 190, 163, 86, 202, 62, 52, 222, 44, 60, 95, 217, 40, 61, 172, 60, 2, 191, 9, 205, 248, 189, 186, 117, 225, 189, 151, 54, 51, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 83, 15, 62, 48, 189, 127, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {150, 40, 7, 62, 62, 208, 201, 191, 195, 250, 101, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {27, 68, 243, 63, 77, 249, 124, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0018/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}