// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 104, 88, 62, 12, 69, 61, 191, 246, 249, 124, 62, 101, 46, 126, 63, 221, 196, 121, 62, 19, 129, 138, 62, 134, 224, 232, 62, 2, 24, 145, 63, 184, 108, 222, 62, 154, 42, 227, 62, 147, 97, 153, 191, 242, 87, 113, 190, 31, 168, 241, 190, 136, 153, 38, 191, 83, 46, 180, 60, 218, 38, 135, 191, 67, 77, 30, 191, 15, 21, 200, 189, 11, 181, 9, 190, 169, 52, 86, 191, 206, 209, 170, 190, 17, 142, 238, 190, 240, 254, 36, 189, 116, 209, 233, 188, 121, 62, 171, 62, 94, 20, 45, 63, 22, 248, 31, 191, 90, 153, 45, 59, 174, 175, 111, 63, 48, 166, 24, 63, 251, 33, 176, 61, 220, 206, 17, 62, 219, 88, 49, 191, 197, 141, 74, 188, 137, 23, 200, 191, 116, 192, 216, 62, 224, 119, 67, 190, 7, 16, 124, 189, 196, 168, 252, 190, 153, 42, 153, 190, 205, 41, 79, 62, 87, 79, 113, 191, 153, 79, 53, 191, 91, 71, 175, 191, 164, 153, 23, 190, 53, 177, 135, 190, 228, 93, 52, 63, 58, 160, 26, 191, 57, 55, 45, 191, 105, 234, 253, 62, 216, 14, 13, 62, 239, 249, 85, 63, 67, 53, 39, 190, 251, 152, 145, 190, 59, 72, 87, 190, 193, 214, 176, 189, 157, 48, 45, 63, 31, 108, 123, 63, 28, 192, 72, 61, 243, 7, 164, 61, 181, 28, 9, 62, 6, 108, 152, 191, 201, 76, 209, 190, 215, 64, 49, 63, 251, 62, 130, 63, 169, 208, 235, 62, 34, 59, 116, 62, 145, 19, 148, 62, 16, 77, 250, 62, 174, 146, 37, 63, 82, 56, 150, 191, 112, 195, 4, 191, 51, 177, 36, 63, 37, 186, 182, 190, 255, 30, 241, 62, 103, 21, 1, 63, 203, 29, 144, 191, 17, 249, 71, 190, 225, 7, 37, 62, 227, 19, 76, 63, 223, 162, 77, 62, 197, 235, 7, 191, 254, 109, 76, 191, 29, 229, 161, 190, 50, 81, 19, 63, 86, 47, 28, 63, 69, 184, 37, 63, 76, 48, 198, 190, 96, 177, 114, 190, 133, 78, 221, 188, 172, 184, 183, 190, 230, 227, 107, 62, 70, 55, 13, 63, 119, 75, 64, 190, 150, 85, 80, 63, 148, 248, 190, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {82, 64, 2, 191, 192, 156, 153, 191, 8, 33, 178, 62, 182, 52, 131, 62, 225, 49, 2, 63, 174, 89, 219, 62, 216, 163, 42, 191, 241, 26, 254, 62, 176, 136, 41, 63, 219, 77, 253, 190, 137, 161, 104, 62, 247, 238, 78, 190, 224, 170, 77, 190, 0, 102, 126, 61, 23, 146, 107, 62, 155, 155, 67, 190, 92, 231, 191, 62, 27, 124, 143, 191, 21, 218, 176, 190, 94, 75, 79, 62, 196, 42, 210, 62, 26, 250, 2, 190, 184, 241, 162, 62, 140, 60, 218, 189, 26, 121, 199, 62, 10, 50, 250, 61, 230, 172, 169, 62, 170, 11, 180, 190, 92, 52, 28, 61, 117, 230, 44, 191, 223, 247, 123, 62, 52, 109, 185, 55};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 97, 198, 61, 8, 209, 93, 63, 1, 245, 25, 189, 87, 14, 115, 190, 187, 76, 191, 62, 117, 172, 225, 61, 23, 173, 183, 190, 68, 186, 54, 62, 54, 85, 152, 62, 114, 64, 9, 61, 48, 88, 55, 190, 173, 101, 234, 190, 69, 44, 125, 190, 109, 0, 155, 62, 154, 202, 190, 61, 89, 185, 198, 189, 218, 10, 230, 61, 197, 187, 150, 191, 249, 96, 139, 190, 161, 2, 173, 62, 228, 133, 59, 190, 5, 168, 185, 62, 75, 8, 212, 189, 103, 82, 252, 190, 212, 158, 173, 62, 87, 205, 13, 191, 146, 42, 142, 62, 5, 192, 81, 190, 11, 245, 167, 62, 239, 188, 5, 190, 35, 216, 0, 190, 111, 189, 246, 62, 191, 217, 57, 190, 17, 86, 217, 62, 81, 77, 100, 188, 186, 194, 45, 190, 63, 17, 202, 61, 180, 200, 166, 62, 54, 18, 85, 190, 124, 75, 190, 62, 120, 58, 35, 62, 38, 141, 177, 60, 78, 12, 18, 62, 150, 213, 12, 191, 143, 160, 190, 189, 31, 168, 218, 62, 42, 144, 155, 62, 140, 9, 60, 190, 5, 174, 184, 61, 207, 184, 38, 191, 5, 35, 109, 190, 129, 118, 58, 62, 93, 203, 80, 61, 135, 238, 95, 62, 5, 216, 168, 189, 155, 117, 187, 190, 46, 15, 110, 62, 190, 58, 128, 190, 22, 34, 25, 62, 74, 183, 89, 189, 64, 80, 142, 62, 61, 216, 6, 190, 56, 173, 20, 190, 125, 136, 113, 62, 177, 70, 252, 60, 236, 219, 152, 191, 213, 248, 202, 189, 0, 43, 68, 62, 201, 31, 58, 61, 114, 175, 126, 189, 157, 195, 12, 60, 77, 181, 156, 61, 255, 175, 145, 190, 64, 135, 249, 190, 35, 68, 116, 190, 142, 137, 46, 62, 20, 217, 6, 62, 43, 23, 177, 61, 16, 4, 55, 189, 198, 39, 59, 190, 103, 146, 216, 61, 102, 34, 238, 189, 229, 174, 164, 62, 13, 227, 220, 61, 188, 156, 224, 190, 21, 216, 188, 190, 138, 86, 23, 62, 132, 16, 242, 190, 140, 12, 110, 60, 56, 122, 83, 63, 241, 153, 128, 62, 34, 130, 202, 62, 166, 4, 63, 190, 61, 240, 122, 189, 93, 45, 154, 61, 127, 5, 32, 191, 74, 101, 165, 61, 154, 165, 231, 62, 161, 205, 102, 186, 99, 152, 8, 62, 173, 117, 60, 189, 82, 6, 12, 62, 154, 102, 168, 191, 18, 228, 69, 62, 97, 96, 13, 190, 201, 82, 7, 190, 96, 95, 178, 61, 165, 128, 0, 62, 172, 145, 213, 190, 110, 115, 1, 190, 135, 138, 192, 62, 36, 161, 109, 188, 227, 212, 11, 62, 125, 67, 33, 191, 118, 86, 98, 61, 96, 74, 197, 62, 67, 126, 36, 62, 218, 68, 245, 61, 47, 17, 218, 189, 101, 250, 23, 190, 214, 151, 111, 62, 41, 144, 28, 190, 19, 58, 178, 189, 177, 92, 171, 191, 246, 103, 20, 62, 95, 168, 66, 62, 26, 109, 119, 61, 79, 31, 23, 63, 68, 166, 168, 189, 53, 80, 225, 62, 244, 98, 18, 62, 205, 76, 73, 190, 62, 137, 56, 59, 99, 231, 117, 61, 24, 238, 128, 190, 98, 109, 102, 62, 39, 69, 111, 62, 53, 216, 181, 190, 126, 175, 84, 189, 184, 90, 68, 190, 43, 21, 179, 188, 100, 6, 250, 189, 92, 209, 247, 191, 26, 55, 141, 62, 188, 41, 56, 62, 191, 187, 156, 191, 246, 31, 52, 190, 168, 202, 128, 62, 151, 9, 56, 191, 168, 174, 181, 61, 206, 237, 75, 62, 128, 7, 133, 189, 254, 235, 226, 61, 120, 131, 175, 61, 120, 74, 104, 62, 126, 70, 165, 191, 198, 209, 80, 189, 191, 253, 173, 61, 73, 191, 48, 62, 32, 201, 249, 62, 5, 117, 178, 188, 29, 20, 28, 62, 18, 208, 239, 189, 52, 110, 31, 190, 175, 190, 199, 189, 179, 150, 16, 190, 63, 129, 196, 189, 19, 145, 140, 189, 106, 241, 159, 61, 126, 73, 40, 190, 82, 209, 26, 190, 119, 226, 65, 189, 214, 75, 135, 189, 127, 118, 32, 190, 216, 23, 147, 189, 237, 142, 194, 189, 143, 63, 129, 187, 241, 177, 51, 62, 217, 217, 12, 60, 95, 166, 237, 189, 160, 32, 171, 189, 160, 96, 79, 189, 88, 191, 157, 61, 177, 237, 26, 190, 113, 227, 201, 189, 166, 126, 97, 189, 220, 225, 138, 188, 90, 91, 231, 60, 247, 50, 38, 190, 77, 133, 51, 190, 180, 138, 206, 60, 167, 169, 37, 190, 221, 156, 219, 189, 24, 4, 208, 190, 236, 139, 36, 190, 111, 146, 173, 62, 9, 159, 52, 190, 220, 148, 233, 189, 10, 41, 43, 63, 115, 228, 153, 190, 107, 35, 192, 190, 174, 36, 20, 190, 67, 147, 34, 190, 61, 51, 50, 190, 127, 195, 156, 189, 241, 120, 54, 191, 11, 140, 247, 190, 58, 32, 116, 190, 127, 60, 254, 61, 20, 187, 0, 61, 200, 80, 131, 62, 148, 13, 18, 190, 36, 150, 176, 189, 110, 124, 255, 190, 30, 209, 179, 60, 2, 28, 181, 61, 128, 218, 22, 190, 32, 230, 23, 63, 129, 34, 229, 189, 134, 18, 21, 63, 66, 21, 154, 60, 177, 159, 110, 189, 161, 87, 214, 61, 204, 18, 15, 191, 4, 7, 185, 61, 147, 176, 164, 189, 118, 195, 232, 189, 136, 225, 221, 189, 4, 232, 148, 189, 118, 189, 96, 189, 154, 251, 33, 190, 200, 92, 100, 189, 142, 126, 43, 61, 199, 39, 40, 190, 211, 138, 246, 189, 74, 81, 81, 61, 4, 80, 252, 59, 93, 207, 107, 189, 190, 141, 41, 190, 147, 206, 196, 188, 50, 60, 21, 189, 4, 158, 147, 189, 190, 25, 33, 190, 39, 48, 159, 189, 59, 211, 197, 61, 104, 66, 204, 189, 113, 30, 158, 189, 156, 210, 133, 189, 89, 59, 184, 189, 250, 193, 23, 190, 130, 22, 11, 189, 214, 104, 213, 59, 18, 88, 17, 190, 11, 55, 244, 189, 95, 136, 217, 61, 89, 155, 250, 189, 130, 35, 93, 61, 195, 133, 246, 61, 200, 197, 32, 62, 105, 204, 84, 190, 53, 151, 198, 61, 129, 240, 39, 62, 54, 3, 102, 62, 125, 142, 111, 188, 74, 134, 159, 62, 159, 133, 154, 190, 147, 6, 213, 60, 50, 175, 7, 190, 143, 55, 217, 189, 127, 100, 188, 62, 234, 32, 209, 60, 155, 153, 181, 190, 101, 34, 181, 190, 55, 124, 90, 191, 28, 151, 64, 190, 97, 145, 148, 62, 4, 128, 221, 61, 213, 139, 1, 62, 237, 31, 0, 190, 52, 52, 160, 190, 141, 246, 165, 60, 199, 152, 141, 190, 145, 201, 71, 61, 172, 9, 92, 62, 111, 50, 84, 61, 237, 193, 147, 189, 61, 214, 77, 190, 134, 39, 145, 62, 26, 232, 46, 190, 52, 216, 19, 191, 189, 16, 15, 190, 136, 168, 142, 62, 247, 157, 114, 62, 118, 2, 77, 61, 135, 214, 25, 62, 165, 240, 155, 61, 78, 8, 123, 191, 143, 52, 200, 190, 136, 164, 140, 191, 54, 129, 157, 61, 133, 7, 14, 190, 169, 185, 134, 191, 231, 169, 7, 62, 151, 144, 42, 190, 243, 139, 65, 62, 129, 115, 157, 190, 237, 8, 56, 62, 139, 108, 128, 190, 198, 119, 241, 190, 97, 116, 109, 190, 66, 182, 20, 61, 138, 42, 162, 191, 13, 182, 21, 190, 37, 53, 43, 63, 168, 252, 139, 189, 58, 105, 47, 63, 254, 217, 107, 189, 77, 88, 78, 189, 130, 200, 210, 61, 173, 191, 52, 191, 221, 120, 188, 190, 74, 4, 182, 61, 169, 62, 171, 190, 186, 41, 186, 188, 159, 130, 64, 62, 4, 207, 185, 60, 218, 133, 211, 190, 242, 102, 150, 189, 177, 84, 219, 61, 115, 157, 113, 191, 73, 124, 0, 62, 34, 81, 194, 190, 95, 82, 38, 190, 197, 115, 174, 189, 196, 225, 80, 62, 206, 237, 146, 190, 173, 75, 28, 191, 123, 203, 140, 191, 66, 190, 138, 191, 240, 135, 196, 61, 188, 134, 65, 62, 97, 83, 33, 62, 143, 93, 65, 190, 46, 201, 43, 190, 100, 249, 68, 62, 200, 66, 179, 190, 125, 229, 233, 61, 35, 215, 49, 190, 116, 239, 95, 62, 153, 92, 19, 62, 154, 253, 216, 190, 155, 214, 117, 62, 137, 185, 192, 61, 196, 131, 35, 62, 244, 193, 47, 189, 170, 73, 138, 61, 85, 134, 44, 189, 69, 196, 208, 189, 31, 43, 137, 61, 203, 20, 17, 189, 21, 28, 156, 61, 97, 19, 32, 190, 7, 167, 165, 189, 166, 96, 173, 188, 249, 91, 6, 189, 22, 135, 251, 189, 172, 16, 3, 190, 91, 52, 40, 190, 137, 172, 18, 62, 19, 142, 225, 60, 249, 136, 54, 189, 21, 183, 40, 190, 5, 163, 217, 189, 129, 32, 217, 61, 127, 93, 65, 189, 193, 85, 102, 189, 1, 52, 161, 189, 57, 21, 156, 61, 144, 23, 188, 188, 98, 181, 45, 190, 24, 210, 29, 189, 24, 230, 3, 62, 219, 192, 113, 61, 169, 250, 186, 189, 74, 72, 190, 190, 173, 80, 137, 61, 143, 104, 37, 190, 247, 52, 79, 62, 133, 71, 251, 189, 9, 211, 82, 61, 203, 204, 183, 190, 222, 11, 241, 189, 203, 168, 201, 62, 232, 232, 25, 191, 134, 125, 218, 62, 186, 63, 170, 190, 72, 236, 166, 188, 115, 171, 231, 60, 83, 198, 205, 190, 152, 254, 21, 62, 158, 95, 232, 61, 34, 216, 36, 63, 68, 41, 240, 190, 8, 37, 45, 189, 7, 100, 18, 61, 176, 215, 5, 190, 62, 79, 117, 188, 85, 146, 63, 62, 35, 68, 44, 190, 207, 251, 163, 62, 207, 197, 120, 189, 74, 132, 82, 189, 111, 123, 142, 189, 199, 104, 27, 189, 51, 245, 134, 190, 253, 193, 20, 61, 40, 96, 63, 61, 189, 101, 170, 60, 242, 145, 206, 60, 167, 102, 49, 190, 253, 91, 28, 62, 38, 249, 57, 188, 247, 0, 45, 62, 227, 36, 28, 190, 160, 226, 220, 189, 221, 74, 45, 190, 237, 191, 136, 61, 127, 121, 3, 189, 55, 20, 62, 61, 132, 196, 9, 188, 90, 102, 51, 190, 199, 236, 163, 189, 135, 220, 55, 60, 208, 131, 170, 61, 41, 192, 218, 188, 56, 224, 12, 190, 120, 244, 137, 189, 53, 207, 30, 190, 49, 12, 37, 190, 105, 240, 58, 61, 74, 141, 24, 190, 51, 220, 143, 60, 208, 32, 141, 189, 90, 98, 135, 60, 147, 30, 9, 190, 182, 233, 43, 62, 45, 133, 195, 189, 44, 105, 73, 187, 10, 221, 169, 61, 219, 4, 47, 63, 233, 207, 128, 60, 42, 2, 8, 62, 50, 147, 36, 62, 15, 28, 173, 189, 186, 184, 188, 191, 212, 29, 5, 190, 117, 177, 158, 190, 126, 215, 184, 61, 214, 87, 101, 61, 9, 135, 188, 62, 85, 0, 123, 191, 168, 230, 5, 191, 252, 194, 156, 62, 166, 43, 199, 190, 217, 153, 9, 190, 123, 249, 15, 190, 19, 54, 8, 62, 239, 110, 13, 60, 176, 131, 166, 62, 28, 127, 229, 189, 120, 222, 145, 62, 140, 190, 199, 62, 25, 157, 160, 60, 219, 165, 11, 190, 38, 112, 80, 189, 153, 213, 208, 191, 198, 54, 189, 61, 102, 174, 201, 61, 98, 250, 40, 61, 30, 199, 58, 191, 237, 102, 229, 61, 159, 95, 26, 190, 227, 242, 32, 62, 14, 205, 149, 191, 6, 8, 66, 191, 203, 85, 48, 191, 194, 70, 147, 190, 234, 15, 212, 190, 143, 233, 165, 189, 172, 11, 148, 62, 184, 37, 184, 190, 32, 61, 127, 190, 84, 150, 108, 189, 173, 42, 174, 60, 156, 151, 110, 191, 208, 207, 170, 190, 23, 130, 70, 62, 210, 66, 1, 190, 9, 230, 15, 61, 10, 130, 138, 62, 236, 182, 250, 191, 162, 93, 226, 62, 194, 122, 47, 188, 241, 184, 134, 191, 161, 126, 250, 189, 235, 127, 118, 191, 174, 111, 121, 62, 24, 239, 44, 62, 251, 103, 178, 62, 55, 2, 99, 59, 5, 230, 46, 190, 75, 243, 125, 62, 153, 15, 78, 190, 154, 165, 221, 190, 100, 145, 61, 60, 243, 56, 153, 62, 250, 178, 158, 61, 100, 248, 117, 190, 25, 54, 198, 190, 107, 15, 29, 62, 221, 197, 163, 62, 60, 202, 144, 62, 46, 146, 160, 62, 185, 221, 73, 190, 190, 3, 139, 60, 6, 203, 43, 62, 216, 156, 151, 190, 184, 68, 110, 190, 214, 0, 128, 61, 81, 181, 37, 190, 76, 184, 135, 190, 174, 100, 88, 62, 15, 225, 232, 61, 84, 205, 190, 61, 167, 107, 130, 189, 51, 144, 15, 61, 14, 10, 78, 188, 125, 32, 0, 62, 188, 102, 97, 61, 50, 91, 87, 190, 127, 5, 155, 60, 75, 4, 20, 190, 239, 192, 73, 190, 143, 137, 57, 62, 76, 79, 152, 189, 37, 63, 31, 62, 143, 213, 127, 188, 180, 123, 79, 62, 207, 14, 168, 188, 159, 44, 210, 59, 189, 161, 242, 188, 167, 108, 118, 62, 123, 140, 175, 61, 14, 226, 22, 190, 19, 208, 111, 61, 168, 229, 5, 62, 245, 159, 210, 188, 227, 200, 27, 62, 66, 226, 170, 62, 100, 230, 51, 190, 28, 240, 112, 61, 176, 197, 11, 191, 255, 23, 73, 61, 120, 65, 24, 62, 157, 72, 145, 62, 156, 90, 76, 62, 23, 88, 121, 189, 91, 36, 187, 61, 103, 202, 59, 62, 48, 254, 181, 190, 23, 206, 48, 189, 103, 173, 100, 189, 16, 142, 18, 189, 2, 76, 213, 61, 1, 79, 86, 61, 245, 235, 193, 61, 112, 44, 7, 63, 143, 50, 0, 190, 240, 172, 236, 191, 89, 148, 174, 62, 124, 142, 129, 62, 140, 242, 35, 191, 151, 81, 88, 62, 241, 166, 39, 190, 120, 42, 142, 190, 13, 85, 211, 190, 201, 205, 53, 190, 146, 187, 87, 63, 207, 34, 39, 190, 119, 18, 46, 188, 215, 40, 42, 62, 228, 145, 64, 62, 167, 171, 232, 190, 128, 203, 25, 63, 174, 241, 169, 61, 167, 121, 174, 190, 241, 8, 104, 62, 101, 1, 234, 191, 119, 73, 37, 190, 22, 154, 102, 62, 254, 210, 136, 62, 100, 45, 3, 63, 241, 101, 152, 191, 232, 29, 78, 189, 127, 4, 69, 191, 55, 153, 164, 61, 32, 10, 242, 189, 17, 139, 160, 190, 10, 104, 24, 59, 56, 221, 190, 189, 122, 186, 229, 61, 13, 223, 102, 189, 40, 7, 152, 189, 196, 34, 71, 190, 24, 5, 166, 60, 202, 92, 239, 61, 190, 137, 54, 189, 161, 1, 83, 188, 1, 71, 76, 61, 56, 16, 160, 189, 133, 222, 197, 188, 212, 26, 156, 189, 254, 209, 34, 190, 0, 94, 13, 62, 157, 50, 16, 190, 107, 94, 251, 61, 45, 126, 27, 190, 97, 137, 9, 189, 243, 201, 209, 188, 71, 188, 180, 189, 228, 246, 8, 62, 17, 39, 149, 189, 17, 54, 61, 190, 17, 154, 43, 190, 197, 159, 62, 190, 201, 32, 243, 61, 244, 178, 223, 61, 123, 95, 194, 189, 223, 93, 141, 61, 56, 168, 39, 190, 11, 162, 244, 62, 71, 233, 57, 62, 228, 239, 205, 190, 215, 222, 162, 190, 126, 194, 220, 62, 232, 86, 212, 62, 81, 147, 167, 62, 144, 178, 84, 62, 96, 58, 172, 60, 251, 169, 77, 189, 93, 225, 250, 189, 137, 28, 236, 190, 67, 46, 194, 189, 206, 112, 211, 62, 234, 139, 48, 63, 120, 232, 139, 190, 106, 170, 114, 191, 166, 98, 94, 191, 73, 138, 76, 191, 130, 231, 122, 61, 123, 33, 63, 62, 178, 135, 20, 63, 236, 187, 253, 190, 83, 176, 28, 191, 104, 123, 7, 62, 119, 239, 163, 190, 226, 58, 150, 189, 1, 205, 36, 190, 139, 40, 231, 62, 153, 145, 192, 189, 159, 113, 244, 190, 131, 1, 179, 62, 82, 41, 89, 62, 171, 85, 239, 191, 102, 15, 185, 60, 94, 26, 222, 62, 215, 34, 45, 188, 189, 128, 220, 190, 6, 114, 31, 62, 114, 216, 203, 60, 57, 148, 79, 61, 204, 116, 160, 190, 130, 125, 22, 190, 126, 105, 39, 190, 255, 9, 104, 61, 43, 229, 11, 190, 73, 32, 199, 190, 107, 222, 51, 190, 34, 249, 157, 190, 166, 59, 62, 188, 50, 208, 180, 190, 129, 218, 27, 62, 108, 226, 16, 62, 105, 54, 195, 190, 106, 225, 37, 62, 39, 149, 20, 62, 12, 206, 80, 62, 246, 129, 168, 62, 35, 26, 87, 62, 10, 167, 111, 62, 28, 120, 6, 189, 27, 100, 42, 62, 108, 167, 119, 190, 87, 238, 46, 191, 166, 253, 209, 189, 182, 71, 107, 189, 244, 127, 221, 189, 226, 237, 13, 60, 168, 81, 25, 189, 231, 165, 91, 190, 165, 128, 250, 61, 153, 178, 45, 60, 112, 7, 42, 61, 67, 172, 70, 190, 72, 167, 60, 189, 224, 80, 71, 189, 152, 53, 154, 61, 195, 124, 81, 189, 143, 243, 125, 189, 75, 253, 197, 61, 169, 110, 144, 61, 211, 33, 36, 61, 201, 67, 9, 61, 212, 82, 32, 59, 130, 103, 1, 62, 19, 32, 190, 188, 7, 225, 255, 189, 244, 65, 236, 189, 172, 177, 48, 62, 174, 201, 67, 190, 101, 230, 247, 188, 87, 125, 185, 189, 20, 233, 209, 61, 2, 117, 140, 62, 124, 251, 237, 61, 255, 230, 252, 189, 163, 173, 3, 190, 140, 175, 205, 60, 68, 34, 26, 190, 126, 237, 12, 190, 194, 219, 229, 189, 252, 24, 11, 190, 206, 146, 1, 190, 39, 212, 156, 189, 182, 205, 178, 189, 153, 128, 230, 189, 110, 1, 239, 189, 225, 39, 214, 61, 32, 20, 16, 189, 86, 147, 86, 189, 224, 4, 233, 189, 157, 58, 183, 61, 198, 206, 97, 60, 232, 147, 118, 61, 188, 95, 193, 189, 120, 132, 45, 62, 146, 215, 172, 61, 213, 216, 165, 188, 97, 148, 14, 190, 245, 110, 196, 186, 196, 216, 175, 189, 102, 110, 227, 61, 202, 85, 129, 60, 7, 79, 46, 190, 207, 246, 39, 60, 172, 176, 245, 61, 179, 200, 69, 189, 205, 26, 32, 190, 221, 233, 86, 60, 17, 166, 42, 61, 70, 97, 223, 61, 167, 180, 31, 58, 89, 39, 252, 61, 209, 23, 137, 61, 108, 140, 229, 189, 142, 82, 140, 62, 172, 150, 80, 189, 30, 243, 170, 60, 120, 24, 165, 189, 137, 31, 207, 61, 46, 75, 148, 61, 161, 3, 57, 62, 121, 49, 151, 62, 127, 156, 144, 188, 129, 160, 64, 190, 99, 253, 240, 190, 107, 60, 189, 189, 80, 11, 45, 62, 138, 61, 2, 62, 21, 94, 210, 61, 129, 23, 11, 190, 226, 7, 108, 62, 247, 158, 244, 60, 172, 216, 17, 190, 95, 231, 229, 61, 245, 23, 89, 189, 231, 85, 4, 190, 115, 160, 66, 190, 106, 66, 181, 61, 148, 247, 189, 61, 8, 194, 210, 60, 76, 121, 179, 62, 233, 224, 197, 189, 26, 159, 219, 190, 105, 222, 128, 191, 114, 143, 12, 191, 140, 117, 170, 187, 17, 102, 145, 190, 241, 3, 24, 190, 199, 51, 86, 62, 37, 219, 179, 190, 116, 245, 134, 190, 13, 145, 102, 61, 77, 240, 55, 189, 251, 230, 211, 60, 24, 48, 128, 61, 243, 60, 66, 190, 149, 181, 30, 62, 2, 31, 52, 190, 144, 212, 76, 61, 218, 127, 1, 190, 176, 39, 64, 62, 24, 111, 222, 188, 122, 36, 241, 188, 69, 169, 174, 188, 236, 167, 231, 190, 101, 248, 239, 189, 252, 53, 243, 189, 67, 131, 34, 61, 74, 120, 0, 190, 213, 97, 208, 189, 60, 221, 195, 189, 221, 81, 209, 190, 129, 247, 145, 191, 160, 197, 109, 189, 26, 200, 145, 62, 236, 174, 81, 61, 36, 109, 118, 190, 119, 211, 77, 63, 139, 172, 91, 61, 190, 147, 153, 190, 101, 65, 89, 190, 156, 114, 151, 61, 114, 124, 122, 61, 93, 110, 75, 62, 180, 107, 21, 191, 163, 98, 50, 191, 99, 18, 32, 190, 169, 110, 13, 61, 164, 249, 240, 62, 223, 54, 123, 62, 223, 145, 19, 190, 144, 244, 7, 190, 251, 199, 87, 190, 119, 22, 36, 62, 155, 182, 141, 62, 120, 173, 119, 189, 43, 204, 9, 63, 67, 12, 20, 60, 254, 211, 73, 63, 136, 40, 129, 190, 119, 127, 124, 190, 245, 160, 108, 62, 101, 72, 14, 191, 11, 94, 21, 62, 1, 208, 35, 61, 58, 138, 127, 61, 93, 129, 183, 189, 40, 102, 36, 190, 130, 74, 194, 60, 19, 180, 35, 62, 67, 156, 2, 190, 121, 143, 0, 190, 78, 78, 137, 189, 7, 141, 2, 189, 188, 90, 86, 189, 233, 212, 176, 61, 165, 196, 35, 190, 252, 223, 0, 62, 77, 195, 152, 189, 133, 3, 56, 61, 116, 201, 6, 190, 202, 238, 175, 189, 64, 221, 229, 61, 122, 58, 46, 190, 148, 255, 176, 189, 114, 221, 22, 190, 55, 86, 2, 62, 162, 123, 251, 189, 18, 77, 234, 189, 84, 79, 51, 62, 106, 53, 77, 61, 90, 122, 12, 190, 15, 139, 30, 190, 102, 40, 247, 188, 164, 128, 168, 189, 239, 61, 211, 190, 108, 129, 68, 191, 215, 142, 191, 62, 126, 236, 103, 62, 119, 120, 65, 190, 32, 253, 216, 61, 20, 68, 69, 63, 183, 79, 45, 62, 133, 64, 106, 190, 179, 246, 15, 189, 176, 94, 152, 190, 238, 254, 40, 60, 134, 26, 252, 62, 164, 12, 120, 191, 131, 23, 7, 190, 22, 236, 155, 191, 179, 65, 56, 62, 171, 190, 147, 190, 194, 248, 140, 61, 43, 188, 211, 61, 59, 132, 76, 190, 169, 192, 112, 62, 81, 106, 17, 62, 209, 160, 166, 61, 17, 120, 177, 189, 37, 219, 226, 62, 157, 3, 223, 61, 135, 83, 134, 63, 192, 163, 18, 190, 91, 59, 67, 189, 175, 112, 107, 62, 104, 97, 142, 191, 253, 48, 139, 190, 211, 40, 129, 191, 237, 207, 46, 62, 225, 252, 145, 62, 21, 19, 7, 61, 156, 217, 35, 187, 220, 138, 209, 61, 232, 176, 67, 62, 143, 241, 109, 62, 129, 201, 162, 60, 126, 44, 96, 191, 71, 209, 244, 61, 159, 210, 153, 188, 72, 128, 113, 191, 66, 122, 68, 62, 49, 124, 53, 191, 123, 139, 201, 188, 173, 136, 92, 190, 186, 108, 99, 61, 203, 74, 72, 190, 4, 180, 22, 191, 93, 226, 21, 189, 82, 207, 146, 62, 249, 168, 120, 191, 17, 106, 59, 190, 185, 81, 218, 62, 134, 218, 117, 189, 244, 250, 84, 63, 141, 239, 151, 190, 208, 75, 62, 190, 225, 188, 33, 62, 184, 235, 144, 190, 27, 127, 31, 190, 215, 246, 246, 189, 63, 70, 30, 190, 77, 2, 2, 62, 243, 132, 35, 190, 250, 93, 66, 189, 128, 27, 194, 189, 25, 168, 31, 62, 110, 209, 3, 61, 201, 91, 199, 59, 230, 191, 119, 61, 96, 187, 31, 62, 65, 31, 170, 61, 234, 122, 217, 189, 5, 10, 174, 61, 14, 105, 6, 190, 116, 167, 41, 190, 20, 64, 174, 189, 136, 229, 93, 189, 160, 52, 210, 189, 210, 228, 1, 190, 126, 117, 51, 190, 171, 185, 179, 188, 200, 203, 39, 60, 138, 139, 169, 189, 130, 64, 22, 190, 107, 169, 150, 189, 30, 15, 122, 189, 84, 236, 55, 189, 140, 122, 25, 62, 155, 134, 13, 188, 90, 126, 253, 61, 102, 149, 20, 190, 232, 84, 129, 191, 227, 62, 187, 61, 45, 110, 94, 62, 87, 111, 198, 61, 223, 222, 50, 189, 242, 42, 234, 62, 233, 9, 157, 61, 25, 234, 174, 190, 214, 179, 156, 190, 181, 47, 144, 190, 159, 39, 143, 60, 152, 191, 137, 61, 87, 114, 12, 191, 18, 16, 118, 190, 12, 12, 63, 191, 132, 77, 137, 61, 113, 197, 36, 189, 220, 20, 139, 62, 135, 85, 58, 190, 30, 140, 149, 190, 54, 91, 136, 189, 100, 188, 34, 62, 159, 49, 165, 189, 60, 22, 92, 190, 242, 37, 103, 63, 161, 173, 25, 62, 199, 222, 95, 63, 225, 23, 109, 190, 111, 151, 78, 190, 208, 210, 167, 62, 10, 199, 38, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 130, 52, 62, 54, 33, 222, 59, 45, 16, 135, 61, 22, 48, 143, 62, 47, 0, 136, 62, 42, 210, 11, 62, 31, 193, 238, 60, 72, 211, 241, 61, 208, 188, 118, 187, 181, 229, 218, 61, 197, 16, 164, 62, 177, 80, 191, 189, 242, 216, 132, 61, 62, 27, 30, 61, 147, 20, 19, 190, 203, 143, 186, 188, 87, 16, 217, 62, 31, 187, 151, 62, 207, 237, 124, 189, 69, 234, 63, 190, 156, 150, 6, 62, 43, 146, 12, 62, 199, 39, 50, 190, 8, 52, 92, 61, 254, 173, 181, 62, 45, 242, 29, 190, 121, 239, 144, 189, 222, 133, 69, 61, 73, 179, 26, 62, 63, 184, 112, 62, 109, 242, 54, 190, 41, 25, 238, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 119, 37, 191, 215, 81, 169, 190, 106, 175, 42, 63, 156, 203, 20, 190, 255, 202, 28, 191, 134, 19, 183, 61, 213, 20, 196, 62, 207, 109, 138, 188, 255, 116, 56, 190, 199, 239, 101, 63, 239, 205, 255, 190, 163, 103, 55, 189, 59, 0, 187, 62, 197, 57, 252, 61, 249, 58, 158, 190, 246, 27, 86, 63, 246, 15, 156, 62, 144, 136, 172, 188, 186, 106, 130, 191, 206, 169, 74, 188, 137, 164, 69, 191, 120, 156, 8, 63, 255, 73, 42, 190, 141, 111, 174, 61, 131, 135, 180, 187, 197, 233, 38, 63, 240, 230, 251, 62, 188, 219, 33, 190, 225, 92, 178, 62, 138, 4, 253, 62, 189, 46, 181, 61, 68, 63, 26, 63, 183, 75, 94, 62, 146, 247, 16, 190, 78, 5, 6, 191, 132, 10, 55, 190, 32, 44, 48, 190, 63, 40, 68, 59, 227, 4, 60, 63, 140, 114, 129, 61, 83, 86, 68, 61, 240, 233, 20, 62, 50, 43, 75, 190, 253, 43, 117, 189, 227, 76, 218, 187, 78, 245, 240, 60, 19, 71, 244, 188, 126, 33, 246, 62, 92, 241, 155, 190, 8, 22, 129, 190, 78, 32, 187, 59, 247, 183, 125, 61, 61, 11, 28, 63, 164, 225, 57, 190, 226, 100, 143, 189, 221, 172, 83, 61, 149, 129, 64, 190, 163, 215, 201, 62, 68, 130, 44, 63, 95, 217, 40, 61, 125, 195, 252, 190, 140, 152, 62, 189, 186, 117, 225, 189, 30, 12, 12, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 252, 247, 61, 74, 255, 208, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {108, 92, 52, 191, 158, 224, 181, 63, 101, 107, 27, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {77, 133, 61, 192, 30, 146, 208, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0018/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}