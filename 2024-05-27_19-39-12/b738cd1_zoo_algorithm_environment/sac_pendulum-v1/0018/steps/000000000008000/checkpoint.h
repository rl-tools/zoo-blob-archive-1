// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 203, 52, 62, 61, 107, 30, 191, 63, 78, 175, 62, 119, 115, 214, 62, 186, 10, 176, 62, 25, 237, 165, 62, 4, 236, 2, 63, 187, 155, 17, 63, 226, 24, 175, 62, 74, 135, 239, 62, 189, 13, 137, 191, 39, 52, 83, 190, 226, 84, 27, 191, 29, 135, 136, 190, 5, 159, 29, 61, 19, 144, 117, 191, 24, 146, 225, 190, 23, 89, 2, 189, 242, 149, 224, 190, 229, 144, 98, 191, 154, 250, 82, 189, 139, 168, 166, 190, 102, 143, 223, 189, 144, 146, 41, 60, 122, 160, 135, 62, 142, 18, 44, 63, 173, 227, 73, 191, 53, 253, 27, 61, 134, 122, 40, 63, 180, 216, 23, 63, 172, 233, 15, 189, 42, 39, 121, 62, 62, 225, 67, 191, 169, 69, 82, 189, 209, 154, 189, 191, 53, 123, 247, 62, 135, 235, 159, 190, 187, 180, 104, 62, 182, 18, 4, 191, 179, 247, 10, 191, 133, 86, 131, 62, 159, 129, 111, 191, 7, 192, 40, 191, 78, 83, 128, 191, 201, 103, 34, 190, 88, 4, 55, 190, 82, 197, 35, 63, 84, 10, 37, 191, 152, 86, 179, 190, 202, 0, 107, 62, 31, 54, 151, 62, 53, 217, 218, 62, 206, 124, 103, 190, 156, 69, 140, 190, 242, 145, 122, 190, 208, 152, 45, 189, 32, 62, 49, 63, 248, 83, 130, 63, 28, 39, 151, 60, 117, 185, 194, 61, 108, 212, 0, 190, 94, 17, 135, 191, 176, 27, 202, 190, 173, 200, 79, 63, 227, 215, 77, 63, 46, 217, 184, 62, 79, 151, 181, 62, 51, 37, 212, 61, 218, 191, 2, 63, 37, 37, 27, 63, 179, 79, 130, 191, 131, 74, 249, 190, 44, 165, 60, 63, 155, 108, 9, 191, 157, 48, 245, 62, 53, 58, 2, 63, 159, 31, 126, 191, 134, 224, 66, 190, 58, 10, 155, 62, 232, 82, 56, 62, 228, 105, 252, 61, 62, 167, 239, 190, 180, 157, 21, 191, 254, 148, 153, 190, 158, 135, 49, 63, 98, 85, 174, 62, 10, 241, 40, 63, 76, 48, 198, 190, 96, 177, 114, 190, 133, 78, 221, 188, 101, 167, 181, 190, 87, 181, 69, 62, 12, 21, 22, 63, 147, 97, 238, 188, 192, 208, 42, 63, 218, 130, 188, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 187, 201, 190, 218, 96, 143, 191, 221, 78, 193, 62, 35, 111, 147, 62, 11, 196, 207, 62, 8, 91, 162, 62, 17, 206, 17, 191, 1, 26, 16, 63, 195, 144, 41, 63, 118, 36, 26, 191, 195, 27, 0, 63, 58, 135, 239, 189, 113, 121, 76, 190, 159, 74, 98, 188, 125, 211, 38, 62, 186, 93, 76, 190, 93, 106, 187, 62, 198, 47, 129, 191, 213, 130, 204, 190, 81, 253, 108, 62, 50, 86, 16, 63, 255, 66, 199, 189, 160, 96, 214, 62, 39, 166, 128, 189, 52, 115, 221, 62, 27, 108, 33, 62, 245, 172, 212, 62, 95, 17, 185, 190, 190, 235, 96, 188, 117, 230, 44, 191, 139, 200, 76, 62, 104, 169, 48, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 90, 158, 61, 5, 95, 190, 62, 36, 221, 218, 189, 204, 118, 29, 190, 31, 139, 184, 62, 179, 244, 87, 62, 103, 242, 161, 190, 131, 149, 31, 62, 183, 213, 107, 62, 211, 109, 148, 61, 193, 62, 92, 190, 212, 130, 244, 190, 250, 97, 145, 190, 126, 56, 140, 62, 35, 228, 111, 62, 144, 255, 28, 190, 61, 223, 250, 61, 153, 95, 219, 190, 254, 28, 148, 190, 174, 173, 159, 62, 64, 193, 245, 189, 197, 166, 194, 62, 210, 247, 50, 190, 191, 9, 220, 190, 115, 69, 155, 62, 110, 137, 237, 190, 151, 251, 85, 62, 85, 105, 90, 190, 120, 18, 157, 62, 239, 188, 5, 190, 193, 96, 1, 190, 184, 139, 200, 62, 196, 15, 31, 189, 152, 107, 150, 61, 106, 29, 228, 188, 31, 106, 189, 189, 190, 46, 150, 189, 211, 59, 58, 62, 98, 26, 145, 190, 14, 57, 137, 62, 244, 53, 65, 62, 248, 2, 248, 187, 235, 112, 39, 62, 164, 9, 184, 190, 202, 15, 4, 190, 16, 89, 207, 62, 144, 249, 143, 62, 15, 25, 104, 190, 128, 214, 135, 189, 215, 240, 203, 190, 203, 118, 154, 190, 129, 205, 156, 62, 34, 58, 16, 62, 183, 200, 119, 62, 55, 192, 229, 189, 59, 88, 142, 190, 164, 222, 152, 62, 170, 74, 42, 190, 250, 217, 37, 62, 125, 23, 206, 189, 48, 231, 145, 62, 61, 216, 6, 190, 101, 253, 127, 190, 122, 146, 59, 62, 45, 79, 139, 189, 129, 248, 5, 191, 125, 130, 244, 189, 28, 53, 86, 187, 191, 154, 11, 189, 7, 198, 111, 189, 221, 106, 67, 62, 95, 0, 171, 61, 98, 226, 201, 190, 201, 198, 169, 190, 239, 227, 205, 190, 45, 92, 178, 61, 149, 88, 53, 62, 63, 201, 141, 190, 17, 187, 155, 189, 103, 255, 90, 62, 98, 86, 67, 62, 73, 16, 68, 189, 143, 136, 182, 62, 9, 208, 158, 189, 255, 94, 227, 190, 62, 31, 176, 190, 104, 204, 228, 61, 86, 31, 66, 190, 117, 20, 172, 189, 255, 206, 36, 63, 78, 244, 97, 62, 32, 177, 51, 62, 236, 198, 131, 190, 61, 240, 122, 189, 110, 48, 184, 61, 206, 2, 3, 191, 169, 114, 139, 61, 16, 189, 50, 61, 175, 166, 212, 187, 152, 127, 76, 62, 147, 73, 21, 190, 165, 153, 125, 60, 66, 88, 105, 191, 47, 216, 233, 61, 136, 213, 71, 190, 42, 162, 156, 189, 53, 239, 132, 61, 224, 97, 246, 61, 38, 152, 213, 190, 198, 231, 127, 190, 11, 3, 72, 62, 241, 61, 188, 190, 130, 196, 227, 61, 99, 82, 160, 190, 128, 165, 128, 61, 247, 129, 194, 62, 100, 73, 78, 62, 4, 18, 25, 62, 182, 103, 235, 189, 91, 186, 228, 189, 21, 160, 130, 62, 17, 199, 198, 189, 161, 122, 181, 189, 19, 155, 3, 191, 117, 177, 75, 62, 95, 168, 66, 62, 198, 92, 101, 61, 60, 46, 96, 62, 168, 62, 184, 58, 55, 101, 46, 188, 222, 5, 117, 61, 195, 24, 98, 190, 168, 187, 54, 190, 125, 73, 125, 189, 247, 40, 43, 190, 209, 35, 34, 61, 181, 148, 62, 62, 23, 168, 150, 190, 116, 186, 141, 189, 163, 249, 193, 189, 206, 112, 92, 189, 125, 244, 7, 190, 44, 238, 137, 191, 216, 98, 74, 62, 70, 93, 143, 61, 227, 233, 3, 191, 23, 21, 26, 190, 97, 30, 87, 62, 194, 81, 58, 191, 221, 233, 200, 61, 39, 111, 248, 61, 26, 253, 15, 189, 163, 158, 185, 61, 208, 74, 164, 61, 230, 43, 6, 62, 203, 97, 66, 191, 119, 74, 69, 189, 191, 253, 173, 61, 244, 34, 16, 62, 244, 242, 187, 62, 5, 117, 178, 188, 29, 20, 28, 62, 18, 208, 239, 189, 52, 110, 31, 190, 175, 190, 199, 189, 179, 150, 16, 190, 63, 129, 196, 189, 19, 145, 140, 189, 106, 241, 159, 61, 126, 73, 40, 190, 82, 209, 26, 190, 119, 226, 65, 189, 214, 75, 135, 189, 127, 118, 32, 190, 216, 23, 147, 189, 237, 142, 194, 189, 143, 63, 129, 187, 241, 177, 51, 62, 217, 217, 12, 60, 95, 166, 237, 189, 160, 32, 171, 189, 160, 96, 79, 189, 88, 191, 157, 61, 177, 237, 26, 190, 113, 227, 201, 189, 166, 126, 97, 189, 220, 225, 138, 188, 90, 91, 231, 60, 247, 50, 38, 190, 77, 133, 51, 190, 180, 138, 206, 60, 167, 169, 37, 190, 245, 81, 16, 190, 112, 252, 94, 189, 34, 136, 193, 189, 90, 230, 34, 62, 215, 98, 205, 189, 146, 47, 128, 61, 105, 223, 10, 63, 8, 157, 252, 189, 24, 25, 183, 190, 101, 143, 149, 189, 226, 210, 155, 190, 224, 42, 43, 190, 22, 122, 241, 61, 88, 91, 153, 190, 234, 221, 87, 61, 58, 46, 189, 61, 180, 227, 96, 62, 28, 221, 228, 59, 186, 234, 142, 62, 37, 170, 197, 189, 242, 17, 28, 190, 105, 212, 130, 190, 255, 63, 155, 61, 101, 8, 7, 61, 217, 163, 9, 190, 226, 247, 210, 62, 202, 229, 36, 189, 64, 155, 183, 62, 30, 163, 121, 61, 177, 159, 110, 189, 22, 229, 6, 62, 152, 131, 207, 190, 4, 7, 185, 61, 147, 176, 164, 189, 118, 195, 232, 189, 136, 225, 221, 189, 4, 232, 148, 189, 118, 189, 96, 189, 154, 251, 33, 190, 200, 92, 100, 189, 142, 126, 43, 61, 199, 39, 40, 190, 211, 138, 246, 189, 74, 81, 81, 61, 4, 80, 252, 59, 93, 207, 107, 189, 190, 141, 41, 190, 147, 206, 196, 188, 50, 60, 21, 189, 4, 158, 147, 189, 190, 25, 33, 190, 39, 48, 159, 189, 59, 211, 197, 61, 104, 66, 204, 189, 113, 30, 158, 189, 156, 210, 133, 189, 89, 59, 184, 189, 250, 193, 23, 190, 130, 22, 11, 189, 214, 104, 213, 59, 18, 88, 17, 190, 11, 55, 244, 189, 95, 136, 217, 61, 89, 155, 250, 189, 146, 114, 243, 189, 201, 148, 73, 189, 56, 199, 22, 62, 1, 10, 85, 190, 39, 43, 214, 189, 25, 234, 18, 61, 171, 124, 41, 60, 250, 226, 19, 188, 150, 8, 180, 62, 26, 199, 30, 61, 160, 74, 136, 61, 215, 112, 171, 190, 109, 106, 238, 189, 140, 230, 190, 62, 184, 156, 232, 189, 37, 82, 192, 190, 65, 187, 170, 189, 252, 73, 15, 191, 9, 212, 194, 189, 142, 80, 164, 62, 46, 190, 21, 62, 226, 107, 14, 62, 34, 195, 72, 190, 52, 223, 121, 190, 148, 223, 242, 188, 192, 16, 135, 190, 135, 231, 95, 61, 161, 27, 38, 62, 56, 229, 191, 60, 237, 193, 147, 189, 67, 34, 45, 189, 127, 49, 129, 62, 137, 75, 39, 190, 135, 197, 119, 190, 138, 119, 159, 189, 150, 181, 186, 61, 201, 99, 115, 62, 121, 58, 22, 61, 177, 145, 199, 62, 50, 244, 27, 62, 144, 218, 89, 191, 141, 112, 163, 190, 82, 2, 143, 191, 243, 226, 179, 61, 218, 179, 164, 189, 122, 129, 113, 191, 87, 13, 244, 61, 54, 113, 56, 190, 252, 99, 140, 62, 129, 115, 157, 190, 138, 156, 75, 62, 57, 29, 120, 190, 211, 5, 238, 190, 241, 248, 72, 190, 88, 23, 140, 61, 93, 21, 156, 190, 103, 224, 25, 190, 25, 104, 4, 63, 136, 23, 65, 61, 172, 93, 196, 62, 176, 134, 98, 189, 77, 88, 78, 189, 197, 82, 16, 62, 143, 185, 173, 190, 51, 221, 19, 191, 223, 246, 196, 188, 106, 54, 169, 190, 171, 188, 92, 188, 31, 248, 10, 62, 241, 100, 126, 62, 114, 255, 184, 61, 41, 149, 189, 60, 112, 147, 224, 61, 138, 114, 168, 190, 99, 254, 21, 62, 85, 18, 89, 191, 19, 165, 18, 190, 222, 177, 117, 189, 166, 71, 142, 62, 17, 15, 147, 190, 207, 193, 142, 190, 231, 9, 254, 190, 15, 148, 124, 191, 117, 235, 180, 61, 205, 95, 58, 62, 246, 112, 27, 62, 73, 214, 156, 190, 208, 218, 42, 190, 46, 90, 194, 61, 143, 127, 167, 190, 169, 41, 241, 61, 140, 73, 41, 188, 176, 3, 0, 62, 153, 92, 19, 62, 58, 173, 102, 190, 155, 230, 103, 62, 137, 185, 192, 61, 196, 131, 35, 62, 244, 193, 47, 189, 170, 73, 138, 61, 85, 134, 44, 189, 69, 196, 208, 189, 31, 43, 137, 61, 203, 20, 17, 189, 21, 28, 156, 61, 97, 19, 32, 190, 7, 167, 165, 189, 166, 96, 173, 188, 249, 91, 6, 189, 22, 135, 251, 189, 172, 16, 3, 190, 91, 52, 40, 190, 137, 172, 18, 62, 19, 142, 225, 60, 249, 136, 54, 189, 21, 183, 40, 190, 5, 163, 217, 189, 129, 32, 217, 61, 127, 93, 65, 189, 193, 85, 102, 189, 1, 52, 161, 189, 57, 21, 156, 61, 144, 23, 188, 188, 98, 181, 45, 190, 24, 210, 29, 189, 24, 230, 3, 62, 219, 192, 113, 61, 169, 250, 186, 189, 68, 71, 69, 190, 173, 80, 137, 61, 54, 148, 195, 189, 17, 49, 55, 62, 183, 51, 83, 189, 89, 118, 250, 59, 181, 99, 159, 190, 22, 141, 179, 189, 20, 20, 212, 62, 190, 119, 223, 189, 242, 179, 217, 62, 84, 142, 148, 190, 82, 10, 188, 59, 77, 207, 35, 61, 53, 203, 168, 190, 221, 207, 81, 62, 90, 207, 131, 62, 111, 178, 186, 62, 158, 187, 204, 190, 214, 222, 144, 189, 196, 86, 151, 60, 72, 162, 78, 188, 175, 69, 220, 61, 88, 105, 37, 62, 226, 99, 3, 190, 249, 45, 144, 62, 80, 113, 154, 188, 46, 255, 129, 189, 204, 38, 23, 61, 199, 104, 27, 189, 101, 62, 1, 187, 158, 107, 1, 62, 40, 96, 63, 61, 189, 101, 170, 60, 242, 145, 206, 60, 167, 102, 49, 190, 253, 91, 28, 62, 38, 249, 57, 188, 247, 0, 45, 62, 227, 36, 28, 190, 160, 226, 220, 189, 221, 74, 45, 190, 237, 191, 136, 61, 127, 121, 3, 189, 55, 20, 62, 61, 132, 196, 9, 188, 90, 102, 51, 190, 199, 236, 163, 189, 135, 220, 55, 60, 208, 131, 170, 61, 41, 192, 218, 188, 56, 224, 12, 190, 120, 244, 137, 189, 53, 207, 30, 190, 49, 12, 37, 190, 105, 240, 58, 61, 74, 141, 24, 190, 51, 220, 143, 60, 208, 32, 141, 189, 90, 98, 135, 60, 147, 30, 9, 190, 182, 233, 43, 62, 45, 133, 195, 189, 44, 105, 73, 187, 243, 38, 145, 61, 140, 136, 71, 62, 154, 210, 62, 61, 196, 96, 207, 61, 90, 235, 145, 61, 12, 149, 190, 188, 171, 158, 66, 191, 44, 10, 9, 190, 50, 57, 164, 190, 177, 156, 221, 61, 185, 56, 252, 61, 73, 49, 171, 62, 255, 117, 159, 190, 63, 174, 171, 190, 239, 252, 106, 62, 49, 45, 84, 189, 204, 221, 2, 190, 8, 61, 211, 61, 160, 84, 5, 62, 175, 219, 1, 188, 178, 147, 138, 62, 54, 175, 86, 189, 46, 149, 138, 62, 75, 66, 158, 62, 104, 178, 22, 60, 47, 87, 61, 190, 208, 111, 128, 188, 52, 22, 250, 190, 2, 107, 19, 62, 102, 174, 201, 61, 76, 187, 61, 61, 7, 63, 188, 190, 184, 4, 253, 61, 238, 183, 13, 62, 240, 52, 103, 61, 205, 128, 252, 190, 130, 204, 185, 190, 197, 31, 139, 190, 52, 195, 252, 189, 251, 198, 140, 190, 81, 31, 182, 189, 125, 249, 40, 62, 108, 155, 102, 59, 145, 93, 78, 190, 33, 59, 123, 190, 151, 43, 36, 189, 96, 205, 5, 189, 26, 174, 24, 188, 115, 246, 35, 62, 210, 66, 1, 190, 145, 23, 255, 60, 192, 116, 147, 62, 122, 162, 5, 191, 128, 163, 133, 62, 56, 47, 67, 189, 236, 21, 219, 190, 166, 21, 12, 190, 92, 10, 202, 190, 193, 187, 11, 62, 24, 239, 44, 62, 4, 135, 129, 62, 55, 2, 99, 59, 64, 175, 56, 190, 167, 167, 118, 62, 231, 53, 111, 190, 163, 122, 132, 61, 147, 209, 68, 189, 132, 75, 98, 62, 38, 75, 110, 62, 4, 145, 184, 189, 111, 168, 140, 190, 136, 195, 60, 62, 78, 122, 173, 62, 34, 151, 140, 62, 42, 109, 154, 62, 79, 8, 79, 190, 170, 109, 27, 60, 158, 6, 22, 62, 229, 23, 49, 190, 102, 212, 63, 190, 200, 232, 68, 188, 156, 170, 207, 190, 234, 180, 251, 190, 95, 39, 2, 62, 51, 132, 121, 61, 180, 230, 59, 61, 69, 90, 165, 189, 177, 172, 232, 188, 110, 220, 135, 189, 39, 35, 252, 60, 215, 41, 162, 60, 172, 118, 106, 190, 66, 255, 147, 189, 75, 4, 20, 190, 215, 204, 175, 190, 204, 99, 139, 62, 233, 144, 192, 189, 31, 28, 219, 189, 58, 174, 49, 61, 31, 91, 84, 62, 166, 77, 18, 190, 140, 221, 166, 189, 141, 63, 53, 61, 52, 56, 38, 62, 136, 184, 5, 62, 244, 115, 163, 189, 93, 149, 3, 61, 155, 45, 5, 62, 170, 48, 246, 189, 16, 222, 122, 61, 220, 168, 221, 61, 9, 140, 125, 190, 137, 141, 123, 61, 169, 172, 15, 191, 12, 77, 156, 61, 147, 191, 136, 62, 26, 94, 106, 62, 107, 101, 122, 62, 235, 4, 137, 189, 141, 155, 37, 61, 217, 35, 98, 62, 106, 11, 171, 190, 157, 59, 64, 61, 191, 193, 202, 189, 109, 130, 102, 188, 2, 76, 213, 61, 245, 56, 24, 61, 46, 46, 166, 61, 163, 150, 145, 59, 26, 102, 0, 190, 65, 45, 212, 190, 156, 233, 132, 62, 66, 218, 31, 61, 247, 223, 20, 191, 173, 109, 86, 62, 235, 254, 36, 190, 87, 108, 72, 190, 184, 213, 0, 190, 248, 50, 201, 189, 70, 172, 210, 62, 213, 64, 119, 189, 69, 117, 213, 61, 76, 0, 223, 61, 153, 242, 66, 62, 82, 114, 23, 190, 131, 60, 238, 62, 150, 206, 108, 61, 239, 43, 10, 190, 1, 86, 67, 62, 170, 208, 52, 191, 49, 123, 203, 189, 97, 108, 101, 62, 106, 245, 24, 61, 127, 68, 217, 62, 23, 109, 214, 189, 118, 57, 189, 61, 12, 225, 15, 190, 55, 153, 164, 61, 185, 152, 220, 189, 137, 41, 159, 190, 10, 104, 24, 59, 56, 221, 190, 189, 122, 186, 229, 61, 13, 223, 102, 189, 40, 7, 152, 189, 196, 34, 71, 190, 24, 5, 166, 60, 202, 92, 239, 61, 190, 137, 54, 189, 161, 1, 83, 188, 1, 71, 76, 61, 56, 16, 160, 189, 133, 222, 197, 188, 212, 26, 156, 189, 254, 209, 34, 190, 0, 94, 13, 62, 157, 50, 16, 190, 107, 94, 251, 61, 45, 126, 27, 190, 97, 137, 9, 189, 243, 201, 209, 188, 71, 188, 180, 189, 228, 246, 8, 62, 17, 39, 149, 189, 17, 54, 61, 190, 17, 154, 43, 190, 197, 159, 62, 190, 201, 32, 243, 61, 244, 178, 223, 61, 123, 95, 194, 189, 223, 93, 141, 61, 56, 168, 39, 190, 164, 234, 246, 189, 247, 201, 96, 62, 230, 128, 191, 190, 131, 169, 95, 190, 82, 107, 60, 62, 78, 170, 143, 62, 15, 14, 50, 190, 226, 19, 134, 62, 165, 77, 182, 61, 151, 203, 35, 62, 37, 141, 210, 189, 87, 181, 61, 191, 8, 73, 176, 189, 135, 192, 220, 62, 60, 99, 143, 62, 105, 139, 115, 190, 56, 255, 172, 190, 23, 150, 155, 190, 224, 99, 32, 191, 52, 159, 134, 62, 194, 109, 130, 62, 207, 187, 18, 63, 203, 48, 221, 190, 89, 199, 1, 191, 121, 98, 148, 62, 92, 13, 80, 190, 55, 209, 24, 189, 21, 139, 156, 190, 242, 46, 226, 62, 153, 145, 192, 189, 200, 143, 144, 190, 76, 214, 203, 62, 244, 218, 139, 62, 223, 37, 222, 190, 161, 239, 7, 187, 87, 249, 219, 62, 6, 232, 49, 62, 67, 129, 180, 189, 64, 74, 150, 62, 247, 229, 75, 61, 12, 65, 133, 186, 78, 61, 101, 59, 174, 185, 99, 190, 83, 103, 207, 189, 199, 48, 132, 188, 204, 131, 38, 190, 63, 120, 71, 189, 114, 41, 131, 190, 226, 23, 131, 190, 254, 248, 7, 190, 231, 255, 110, 190, 196, 52, 200, 61, 195, 157, 63, 62, 169, 209, 177, 190, 99, 222, 74, 62, 169, 57, 14, 62, 200, 67, 95, 62, 124, 25, 163, 62, 59, 20, 29, 62, 119, 43, 121, 62, 214, 113, 39, 189, 27, 100, 42, 62, 197, 86, 47, 190, 112, 115, 25, 191, 166, 253, 209, 189, 182, 71, 107, 189, 244, 127, 221, 189, 226, 237, 13, 60, 168, 81, 25, 189, 231, 165, 91, 190, 165, 128, 250, 61, 153, 178, 45, 60, 112, 7, 42, 61, 67, 172, 70, 190, 72, 167, 60, 189, 224, 80, 71, 189, 152, 53, 154, 61, 195, 124, 81, 189, 143, 243, 125, 189, 75, 253, 197, 61, 169, 110, 144, 61, 211, 33, 36, 61, 201, 67, 9, 61, 212, 82, 32, 59, 130, 103, 1, 62, 19, 32, 190, 188, 7, 225, 255, 189, 244, 65, 236, 189, 172, 177, 48, 62, 174, 201, 67, 190, 101, 230, 247, 188, 87, 125, 185, 189, 20, 233, 209, 61, 2, 117, 140, 62, 124, 251, 237, 61, 255, 230, 252, 189, 163, 173, 3, 190, 140, 175, 205, 60, 68, 34, 26, 190, 126, 237, 12, 190, 194, 219, 229, 189, 252, 24, 11, 190, 206, 146, 1, 190, 39, 212, 156, 189, 182, 205, 178, 189, 153, 128, 230, 189, 110, 1, 239, 189, 225, 39, 214, 61, 32, 20, 16, 189, 86, 147, 86, 189, 224, 4, 233, 189, 157, 58, 183, 61, 198, 206, 97, 60, 232, 147, 118, 61, 188, 95, 193, 189, 120, 132, 45, 62, 146, 215, 172, 61, 213, 216, 165, 188, 97, 148, 14, 190, 245, 110, 196, 186, 196, 216, 175, 189, 102, 110, 227, 61, 202, 85, 129, 60, 7, 79, 46, 190, 207, 246, 39, 60, 172, 176, 245, 61, 179, 200, 69, 189, 205, 26, 32, 190, 204, 252, 61, 187, 236, 169, 31, 190, 241, 43, 62, 62, 229, 188, 219, 60, 15, 225, 157, 60, 103, 39, 24, 188, 149, 195, 162, 187, 83, 46, 86, 62, 147, 25, 168, 60, 166, 87, 146, 61, 70, 24, 207, 189, 8, 105, 225, 61, 93, 96, 202, 188, 114, 56, 174, 61, 215, 195, 186, 61, 123, 37, 163, 189, 16, 218, 75, 190, 115, 223, 15, 191, 57, 2, 139, 189, 249, 37, 167, 62, 5, 126, 168, 61, 181, 245, 17, 62, 36, 167, 3, 190, 33, 153, 63, 62, 80, 148, 177, 61, 139, 145, 196, 189, 83, 211, 107, 62, 182, 133, 207, 189, 166, 58, 243, 189, 115, 160, 66, 190, 102, 95, 109, 61, 51, 14, 213, 61, 8, 194, 210, 60, 76, 121, 179, 62, 233, 224, 197, 189, 26, 159, 219, 190, 105, 222, 128, 191, 114, 143, 12, 191, 140, 117, 170, 187, 17, 102, 145, 190, 241, 3, 24, 190, 199, 51, 86, 62, 37, 219, 179, 190, 116, 245, 134, 190, 13, 145, 102, 61, 77, 240, 55, 189, 251, 230, 211, 60, 24, 48, 128, 61, 243, 60, 66, 190, 149, 181, 30, 62, 2, 31, 52, 190, 144, 212, 76, 61, 218, 127, 1, 190, 176, 39, 64, 62, 24, 111, 222, 188, 122, 36, 241, 188, 69, 169, 174, 188, 236, 167, 231, 190, 101, 248, 239, 189, 252, 53, 243, 189, 67, 131, 34, 61, 74, 120, 0, 190, 213, 97, 208, 189, 60, 221, 195, 189, 238, 124, 225, 190, 25, 184, 53, 191, 102, 103, 250, 60, 8, 123, 81, 62, 119, 63, 153, 61, 11, 106, 219, 189, 160, 77, 31, 63, 115, 80, 63, 62, 235, 225, 125, 190, 218, 230, 79, 190, 241, 225, 7, 190, 22, 235, 54, 61, 10, 195, 141, 61, 252, 161, 252, 190, 229, 255, 166, 190, 106, 172, 239, 189, 80, 64, 218, 61, 212, 224, 187, 188, 109, 191, 110, 62, 227, 20, 169, 189, 175, 154, 75, 190, 232, 97, 126, 189, 130, 244, 82, 62, 126, 3, 90, 62, 142, 127, 91, 189, 225, 245, 232, 62, 248, 53, 4, 62, 8, 197, 250, 62, 57, 173, 118, 190, 119, 127, 124, 190, 31, 51, 104, 62, 170, 43, 195, 190, 11, 94, 21, 62, 1, 208, 35, 61, 58, 138, 127, 61, 93, 129, 183, 189, 40, 102, 36, 190, 130, 74, 194, 60, 19, 180, 35, 62, 67, 156, 2, 190, 121, 143, 0, 190, 78, 78, 137, 189, 7, 141, 2, 189, 188, 90, 86, 189, 233, 212, 176, 61, 165, 196, 35, 190, 252, 223, 0, 62, 77, 195, 152, 189, 133, 3, 56, 61, 116, 201, 6, 190, 202, 238, 175, 189, 64, 221, 229, 61, 122, 58, 46, 190, 148, 255, 176, 189, 114, 221, 22, 190, 55, 86, 2, 62, 162, 123, 251, 189, 18, 77, 234, 189, 84, 79, 51, 62, 106, 53, 77, 61, 90, 122, 12, 190, 15, 139, 30, 190, 102, 40, 247, 188, 164, 128, 168, 189, 93, 133, 198, 190, 123, 223, 194, 190, 172, 49, 136, 62, 219, 135, 116, 62, 120, 13, 7, 190, 67, 255, 140, 60, 39, 172, 125, 62, 57, 107, 37, 62, 191, 10, 115, 190, 174, 212, 16, 189, 139, 107, 152, 190, 205, 22, 141, 61, 252, 255, 150, 61, 78, 234, 113, 191, 195, 110, 33, 190, 39, 203, 183, 190, 174, 149, 63, 62, 81, 36, 148, 190, 243, 108, 190, 61, 134, 83, 211, 60, 25, 169, 38, 190, 183, 168, 107, 61, 92, 58, 198, 61, 78, 29, 22, 62, 97, 179, 17, 190, 127, 13, 242, 62, 172, 185, 192, 187, 186, 56, 139, 62, 6, 108, 133, 190, 91, 59, 67, 189, 149, 1, 101, 62, 255, 8, 253, 190, 169, 118, 110, 190, 65, 148, 250, 190, 172, 146, 18, 62, 20, 17, 84, 62, 194, 176, 89, 61, 151, 89, 67, 188, 137, 214, 116, 62, 94, 163, 81, 62, 243, 210, 136, 190, 183, 57, 220, 187, 178, 58, 50, 191, 194, 17, 38, 62, 248, 253, 48, 61, 85, 117, 57, 191, 78, 246, 189, 60, 92, 221, 59, 190, 48, 197, 3, 189, 173, 136, 92, 190, 166, 167, 165, 61, 60, 228, 66, 190, 235, 64, 5, 191, 172, 76, 13, 190, 243, 93, 154, 62, 156, 217, 142, 190, 128, 176, 48, 190, 216, 101, 199, 62, 183, 246, 194, 189, 115, 64, 226, 62, 66, 71, 167, 190, 208, 75, 62, 190, 230, 21, 46, 62, 228, 174, 15, 191, 27, 127, 31, 190, 215, 246, 246, 189, 63, 70, 30, 190, 77, 2, 2, 62, 243, 132, 35, 190, 250, 93, 66, 189, 128, 27, 194, 189, 25, 168, 31, 62, 110, 209, 3, 61, 201, 91, 199, 59, 230, 191, 119, 61, 96, 187, 31, 62, 65, 31, 170, 61, 234, 122, 217, 189, 5, 10, 174, 61, 14, 105, 6, 190, 116, 167, 41, 190, 20, 64, 174, 189, 136, 229, 93, 189, 160, 52, 210, 189, 210, 228, 1, 190, 126, 117, 51, 190, 171, 185, 179, 188, 200, 203, 39, 60, 138, 139, 169, 189, 130, 64, 22, 190, 107, 169, 150, 189, 30, 15, 122, 189, 84, 236, 55, 189, 140, 122, 25, 62, 155, 134, 13, 188, 90, 126, 253, 61, 38, 29, 17, 190, 101, 79, 234, 190, 164, 35, 189, 61, 149, 69, 189, 61, 5, 106, 157, 61, 81, 119, 252, 60, 176, 27, 185, 62, 51, 202, 241, 61, 223, 147, 66, 190, 113, 122, 174, 190, 19, 171, 52, 191, 205, 242, 158, 60, 106, 203, 166, 189, 236, 24, 92, 191, 241, 87, 62, 190, 56, 30, 114, 61, 255, 144, 99, 61, 212, 151, 35, 189, 220, 133, 134, 62, 99, 162, 11, 190, 244, 99, 186, 190, 145, 74, 147, 189, 149, 153, 43, 62, 250, 231, 215, 189, 99, 149, 96, 190, 255, 21, 76, 63, 82, 138, 45, 62, 132, 242, 146, 62, 112, 125, 138, 190, 111, 151, 78, 190, 118, 148, 153, 62, 200, 236, 13, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 145, 254, 61, 148, 212, 213, 60, 32, 224, 2, 189, 247, 247, 93, 62, 128, 241, 248, 61, 42, 210, 11, 62, 237, 146, 2, 62, 72, 211, 241, 61, 103, 56, 152, 188, 232, 255, 40, 62, 174, 253, 147, 62, 177, 80, 191, 189, 214, 116, 216, 61, 62, 27, 30, 61, 5, 219, 61, 190, 178, 227, 85, 61, 38, 191, 210, 62, 101, 133, 143, 62, 169, 28, 141, 189, 69, 234, 63, 190, 125, 195, 124, 62, 204, 234, 245, 61, 199, 39, 50, 190, 8, 52, 92, 61, 6, 70, 192, 62, 45, 242, 29, 190, 36, 50, 23, 61, 222, 133, 69, 61, 191, 97, 231, 61, 41, 94, 99, 62, 109, 242, 54, 190, 32, 247, 19, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 139, 17, 191, 189, 131, 214, 190, 92, 28, 243, 62, 17, 254, 32, 190, 63, 90, 192, 190, 134, 19, 183, 61, 234, 216, 165, 62, 207, 109, 138, 188, 21, 67, 142, 190, 30, 150, 85, 63, 224, 232, 15, 191, 163, 103, 55, 189, 88, 41, 203, 62, 197, 57, 252, 61, 135, 226, 137, 190, 90, 251, 166, 62, 209, 212, 171, 62, 46, 59, 195, 189, 248, 135, 235, 190, 206, 169, 74, 188, 254, 243, 54, 191, 172, 97, 3, 63, 255, 73, 42, 190, 141, 111, 174, 61, 226, 20, 114, 189, 197, 233, 38, 63, 187, 74, 204, 62, 188, 219, 33, 190, 38, 106, 199, 62, 53, 212, 6, 63, 189, 46, 181, 61, 26, 69, 30, 63, 69, 6, 40, 62, 199, 19, 163, 60, 231, 128, 13, 61, 162, 131, 9, 190, 30, 87, 156, 190, 63, 40, 68, 59, 176, 3, 199, 61, 140, 114, 129, 61, 110, 247, 47, 59, 253, 170, 48, 62, 172, 32, 210, 190, 253, 43, 117, 189, 251, 23, 76, 61, 78, 245, 240, 60, 78, 202, 152, 59, 116, 10, 202, 62, 16, 103, 166, 190, 179, 32, 71, 190, 141, 59, 164, 62, 247, 183, 125, 61, 118, 89, 155, 62, 127, 98, 192, 189, 226, 100, 143, 189, 221, 172, 83, 61, 237, 135, 37, 190, 163, 215, 201, 62, 18, 171, 221, 61, 95, 217, 40, 61, 0, 34, 218, 190, 177, 74, 152, 189, 186, 117, 225, 189, 113, 12, 122, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {28, 216, 9, 62, 143, 84, 140, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {1, 199, 250, 62, 149, 38, 152, 190, 210, 16, 253, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {61, 8, 102, 63, 72, 31, 156, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0018/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}