// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 64, 53, 62, 158, 92, 54, 191, 51, 71, 143, 62, 145, 56, 116, 63, 234, 81, 44, 62, 25, 229, 146, 62, 109, 222, 1, 63, 27, 63, 106, 63, 46, 25, 228, 62, 237, 8, 225, 62, 181, 135, 157, 191, 222, 206, 103, 190, 114, 222, 2, 191, 183, 233, 21, 191, 200, 137, 190, 186, 146, 177, 125, 191, 173, 43, 20, 191, 117, 190, 233, 189, 143, 110, 158, 190, 23, 186, 90, 191, 186, 173, 49, 190, 23, 2, 220, 190, 162, 87, 214, 188, 73, 54, 10, 188, 11, 182, 169, 62, 210, 86, 77, 63, 191, 64, 47, 191, 224, 225, 227, 188, 122, 46, 102, 63, 155, 239, 19, 63, 18, 53, 8, 62, 83, 217, 54, 62, 183, 255, 59, 191, 165, 48, 199, 187, 111, 90, 199, 191, 144, 233, 201, 62, 98, 104, 34, 190, 72, 240, 219, 61, 118, 37, 247, 190, 99, 71, 130, 190, 145, 86, 9, 62, 178, 79, 119, 191, 32, 162, 40, 191, 72, 205, 164, 191, 174, 70, 47, 190, 153, 9, 91, 190, 61, 121, 35, 63, 116, 196, 29, 191, 78, 193, 20, 191, 205, 12, 230, 62, 117, 1, 55, 62, 244, 20, 89, 63, 171, 238, 14, 190, 106, 57, 149, 190, 84, 71, 154, 190, 222, 121, 57, 189, 252, 195, 43, 63, 243, 130, 129, 63, 167, 250, 252, 61, 53, 9, 182, 61, 37, 55, 1, 62, 231, 100, 157, 191, 239, 176, 186, 190, 160, 45, 55, 63, 111, 51, 130, 63, 184, 160, 221, 62, 191, 239, 142, 62, 226, 36, 17, 62, 204, 135, 253, 62, 220, 20, 36, 63, 54, 255, 156, 191, 30, 96, 253, 190, 221, 171, 38, 63, 115, 184, 165, 190, 86, 82, 248, 62, 255, 108, 0, 63, 87, 166, 145, 191, 131, 162, 90, 190, 122, 3, 107, 62, 87, 23, 43, 63, 1, 139, 47, 62, 137, 217, 8, 191, 137, 164, 53, 191, 220, 108, 184, 190, 154, 82, 29, 63, 125, 157, 27, 63, 206, 129, 36, 63, 76, 48, 198, 190, 96, 177, 114, 190, 133, 78, 221, 188, 10, 159, 198, 190, 12, 36, 103, 62, 29, 144, 13, 63, 204, 74, 80, 189, 163, 236, 70, 63, 98, 228, 180, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {158, 55, 240, 190, 134, 159, 154, 191, 238, 86, 197, 62, 196, 237, 132, 62, 86, 65, 227, 62, 78, 205, 135, 62, 112, 173, 42, 191, 194, 69, 0, 63, 81, 226, 32, 63, 116, 150, 2, 191, 99, 137, 118, 62, 150, 140, 94, 190, 139, 246, 79, 190, 255, 5, 226, 187, 92, 175, 52, 62, 147, 25, 108, 190, 119, 90, 165, 62, 74, 102, 138, 191, 223, 79, 209, 190, 33, 110, 80, 62, 8, 154, 220, 62, 196, 51, 8, 190, 72, 148, 193, 62, 104, 91, 208, 189, 204, 109, 208, 62, 67, 227, 226, 61, 8, 229, 191, 62, 83, 166, 186, 190, 230, 166, 125, 61, 117, 230, 44, 191, 247, 46, 120, 62, 162, 76, 29, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {13, 70, 214, 61, 59, 113, 72, 63, 12, 118, 61, 189, 116, 16, 133, 190, 153, 184, 181, 62, 157, 8, 242, 61, 169, 40, 206, 190, 224, 236, 57, 62, 36, 197, 149, 62, 158, 229, 192, 60, 16, 156, 46, 190, 146, 128, 224, 190, 107, 171, 109, 190, 241, 64, 157, 62, 180, 239, 6, 62, 57, 91, 177, 189, 72, 113, 195, 61, 171, 145, 137, 191, 187, 75, 145, 190, 238, 87, 169, 62, 186, 239, 87, 190, 208, 158, 195, 62, 112, 144, 221, 189, 236, 224, 7, 191, 174, 130, 171, 62, 93, 10, 20, 191, 180, 52, 142, 62, 20, 178, 67, 190, 19, 124, 175, 62, 239, 188, 5, 190, 59, 124, 244, 189, 254, 192, 238, 62, 47, 12, 219, 189, 222, 93, 139, 62, 192, 237, 99, 188, 150, 227, 39, 190, 145, 29, 161, 188, 44, 148, 88, 62, 243, 193, 119, 190, 112, 208, 153, 62, 118, 136, 57, 62, 211, 253, 183, 60, 252, 177, 40, 62, 108, 46, 225, 190, 97, 242, 204, 189, 63, 194, 213, 62, 142, 171, 155, 62, 10, 206, 77, 190, 222, 13, 229, 187, 248, 144, 31, 191, 102, 154, 107, 190, 49, 70, 77, 62, 80, 140, 109, 61, 19, 45, 130, 62, 233, 44, 171, 189, 138, 62, 182, 190, 125, 86, 123, 62, 128, 176, 121, 190, 221, 41, 32, 62, 142, 2, 158, 189, 87, 8, 155, 62, 61, 216, 6, 190, 199, 168, 40, 190, 4, 93, 73, 62, 198, 138, 217, 60, 39, 64, 148, 191, 130, 87, 223, 189, 73, 173, 42, 62, 12, 166, 1, 61, 124, 73, 70, 189, 208, 123, 20, 61, 192, 33, 207, 61, 101, 186, 52, 190, 105, 157, 227, 190, 48, 27, 107, 190, 232, 97, 34, 62, 187, 199, 20, 62, 242, 54, 185, 61, 225, 166, 48, 60, 22, 49, 245, 189, 160, 91, 2, 62, 102, 34, 238, 189, 179, 40, 168, 62, 9, 138, 81, 61, 100, 150, 212, 190, 134, 193, 192, 190, 88, 254, 7, 62, 135, 71, 213, 190, 150, 133, 88, 188, 165, 114, 77, 63, 8, 211, 125, 62, 120, 88, 216, 62, 217, 125, 87, 190, 61, 240, 122, 189, 205, 222, 141, 61, 107, 134, 13, 191, 153, 44, 146, 61, 172, 8, 187, 62, 81, 0, 171, 60, 50, 70, 255, 61, 187, 138, 192, 189, 186, 111, 165, 61, 74, 169, 151, 191, 139, 203, 17, 62, 247, 164, 3, 190, 229, 170, 255, 189, 86, 156, 190, 61, 44, 79, 1, 62, 45, 156, 244, 190, 52, 182, 109, 190, 148, 111, 199, 62, 66, 48, 60, 190, 80, 88, 230, 61, 90, 74, 242, 190, 107, 165, 122, 61, 102, 112, 204, 62, 79, 151, 15, 62, 246, 44, 45, 62, 74, 86, 190, 189, 45, 0, 42, 190, 184, 133, 125, 62, 54, 131, 38, 190, 0, 184, 129, 189, 221, 85, 157, 191, 214, 163, 60, 62, 95, 168, 66, 62, 172, 151, 136, 61, 133, 91, 188, 62, 55, 83, 114, 189, 98, 219, 138, 62, 118, 83, 23, 62, 169, 134, 84, 190, 208, 164, 157, 189, 216, 46, 33, 189, 16, 226, 192, 189, 225, 197, 45, 62, 220, 159, 109, 62, 139, 202, 177, 190, 255, 201, 83, 189, 215, 108, 26, 190, 106, 54, 23, 189, 131, 124, 25, 190, 230, 173, 239, 191, 39, 173, 128, 62, 137, 124, 245, 61, 39, 184, 146, 191, 148, 14, 55, 190, 135, 219, 132, 62, 10, 80, 59, 191, 102, 153, 2, 62, 91, 22, 82, 62, 213, 87, 170, 189, 67, 78, 248, 61, 71, 116, 153, 61, 66, 68, 115, 62, 46, 25, 160, 191, 236, 90, 166, 188, 191, 253, 173, 61, 169, 79, 48, 62, 174, 92, 219, 62, 5, 117, 178, 188, 29, 20, 28, 62, 18, 208, 239, 189, 52, 110, 31, 190, 175, 190, 199, 189, 179, 150, 16, 190, 63, 129, 196, 189, 19, 145, 140, 189, 106, 241, 159, 61, 126, 73, 40, 190, 82, 209, 26, 190, 119, 226, 65, 189, 214, 75, 135, 189, 127, 118, 32, 190, 216, 23, 147, 189, 237, 142, 194, 189, 143, 63, 129, 187, 241, 177, 51, 62, 217, 217, 12, 60, 95, 166, 237, 189, 160, 32, 171, 189, 160, 96, 79, 189, 88, 191, 157, 61, 177, 237, 26, 190, 113, 227, 201, 189, 166, 126, 97, 189, 220, 225, 138, 188, 90, 91, 231, 60, 247, 50, 38, 190, 77, 133, 51, 190, 180, 138, 206, 60, 167, 169, 37, 190, 13, 164, 138, 189, 72, 19, 205, 190, 245, 102, 28, 190, 123, 129, 201, 62, 132, 50, 108, 189, 132, 104, 244, 60, 64, 84, 30, 63, 224, 184, 53, 190, 9, 188, 197, 190, 244, 79, 7, 190, 58, 181, 141, 190, 143, 133, 179, 189, 178, 237, 107, 190, 9, 22, 64, 191, 174, 99, 135, 190, 233, 226, 150, 190, 163, 104, 8, 62, 164, 186, 185, 60, 89, 248, 136, 62, 183, 250, 245, 189, 6, 205, 247, 188, 162, 211, 225, 190, 89, 70, 93, 61, 245, 136, 223, 61, 189, 183, 197, 189, 77, 250, 36, 63, 96, 187, 223, 189, 15, 76, 23, 63, 229, 113, 16, 61, 177, 159, 110, 189, 172, 75, 228, 61, 89, 203, 23, 191, 4, 7, 185, 61, 147, 176, 164, 189, 118, 195, 232, 189, 136, 225, 221, 189, 4, 232, 148, 189, 118, 189, 96, 189, 154, 251, 33, 190, 200, 92, 100, 189, 142, 126, 43, 61, 199, 39, 40, 190, 211, 138, 246, 189, 74, 81, 81, 61, 4, 80, 252, 59, 93, 207, 107, 189, 190, 141, 41, 190, 147, 206, 196, 188, 50, 60, 21, 189, 4, 158, 147, 189, 190, 25, 33, 190, 39, 48, 159, 189, 59, 211, 197, 61, 104, 66, 204, 189, 113, 30, 158, 189, 156, 210, 133, 189, 89, 59, 184, 189, 250, 193, 23, 190, 130, 22, 11, 189, 214, 104, 213, 59, 18, 88, 17, 190, 11, 55, 244, 189, 95, 136, 217, 61, 89, 155, 250, 189, 136, 189, 244, 60, 3, 103, 20, 61, 38, 81, 31, 62, 188, 115, 84, 190, 99, 210, 14, 61, 52, 16, 21, 62, 246, 25, 64, 62, 254, 254, 183, 59, 2, 224, 173, 62, 24, 79, 13, 190, 224, 106, 126, 61, 98, 65, 3, 190, 60, 17, 203, 189, 187, 162, 191, 62, 74, 232, 70, 61, 171, 228, 184, 190, 243, 183, 146, 190, 34, 37, 75, 191, 153, 99, 64, 190, 75, 121, 151, 62, 99, 20, 241, 61, 33, 73, 20, 62, 66, 37, 13, 190, 74, 164, 151, 190, 152, 2, 46, 60, 148, 53, 141, 190, 1, 107, 129, 61, 132, 55, 80, 62, 254, 63, 113, 61, 237, 193, 147, 189, 209, 146, 246, 189, 16, 185, 130, 62, 255, 252, 28, 190, 16, 204, 37, 191, 124, 255, 187, 189, 124, 124, 158, 62, 1, 200, 89, 62, 202, 215, 30, 189, 60, 229, 147, 62, 204, 43, 141, 61, 221, 243, 103, 191, 247, 216, 186, 190, 30, 213, 132, 191, 85, 176, 160, 61, 142, 36, 1, 190, 195, 146, 127, 191, 124, 20, 102, 61, 151, 144, 42, 190, 62, 45, 70, 62, 129, 115, 157, 190, 244, 198, 58, 62, 231, 80, 102, 190, 79, 147, 216, 190, 64, 232, 55, 190, 215, 18, 98, 61, 169, 230, 141, 191, 102, 154, 8, 190, 24, 158, 53, 63, 98, 89, 30, 58, 248, 232, 53, 63, 190, 10, 12, 189, 77, 88, 78, 189, 98, 107, 226, 61, 116, 154, 12, 191, 187, 85, 2, 191, 163, 253, 171, 61, 248, 51, 170, 190, 0, 83, 84, 189, 123, 54, 16, 61, 1, 24, 226, 61, 180, 62, 70, 190, 6, 32, 49, 189, 234, 249, 10, 62, 127, 45, 85, 191, 241, 243, 44, 62, 243, 84, 7, 191, 253, 158, 3, 190, 228, 26, 133, 189, 203, 195, 108, 62, 212, 67, 135, 190, 181, 187, 19, 191, 99, 86, 125, 191, 183, 165, 141, 191, 208, 179, 181, 61, 48, 75, 43, 62, 171, 136, 48, 62, 120, 139, 82, 190, 213, 52, 58, 190, 63, 101, 44, 62, 113, 192, 194, 190, 165, 21, 10, 62, 202, 187, 236, 189, 16, 24, 102, 62, 153, 92, 19, 62, 56, 233, 195, 190, 158, 41, 111, 62, 137, 185, 192, 61, 196, 131, 35, 62, 244, 193, 47, 189, 170, 73, 138, 61, 85, 134, 44, 189, 69, 196, 208, 189, 31, 43, 137, 61, 203, 20, 17, 189, 21, 28, 156, 61, 97, 19, 32, 190, 7, 167, 165, 189, 166, 96, 173, 188, 249, 91, 6, 189, 22, 135, 251, 189, 172, 16, 3, 190, 91, 52, 40, 190, 137, 172, 18, 62, 19, 142, 225, 60, 249, 136, 54, 189, 21, 183, 40, 190, 5, 163, 217, 189, 129, 32, 217, 61, 127, 93, 65, 189, 193, 85, 102, 189, 1, 52, 161, 189, 57, 21, 156, 61, 144, 23, 188, 188, 98, 181, 45, 190, 24, 210, 29, 189, 24, 230, 3, 62, 219, 192, 113, 61, 169, 250, 186, 189, 110, 183, 33, 190, 173, 80, 137, 61, 178, 175, 3, 190, 169, 230, 101, 62, 28, 76, 106, 189, 13, 42, 175, 60, 255, 177, 194, 190, 108, 184, 202, 189, 179, 122, 200, 62, 138, 172, 198, 190, 39, 221, 206, 62, 221, 12, 155, 190, 125, 231, 217, 188, 151, 14, 216, 60, 144, 7, 225, 190, 208, 144, 40, 62, 207, 7, 128, 62, 6, 85, 23, 63, 171, 54, 254, 190, 100, 150, 174, 188, 17, 234, 76, 61, 67, 48, 222, 189, 219, 210, 251, 60, 171, 210, 71, 62, 142, 242, 3, 190, 185, 107, 175, 62, 103, 190, 42, 189, 112, 146, 146, 189, 156, 182, 65, 189, 199, 104, 27, 189, 71, 235, 4, 190, 63, 208, 184, 61, 40, 96, 63, 61, 189, 101, 170, 60, 242, 145, 206, 60, 167, 102, 49, 190, 253, 91, 28, 62, 38, 249, 57, 188, 247, 0, 45, 62, 227, 36, 28, 190, 160, 226, 220, 189, 221, 74, 45, 190, 237, 191, 136, 61, 127, 121, 3, 189, 55, 20, 62, 61, 132, 196, 9, 188, 90, 102, 51, 190, 199, 236, 163, 189, 135, 220, 55, 60, 208, 131, 170, 61, 41, 192, 218, 188, 56, 224, 12, 190, 120, 244, 137, 189, 53, 207, 30, 190, 49, 12, 37, 190, 105, 240, 58, 61, 74, 141, 24, 190, 51, 220, 143, 60, 208, 32, 141, 189, 90, 98, 135, 60, 147, 30, 9, 190, 182, 233, 43, 62, 45, 133, 195, 189, 44, 105, 73, 187, 185, 183, 174, 61, 49, 41, 22, 63, 200, 9, 173, 59, 205, 179, 175, 61, 180, 190, 18, 62, 97, 214, 65, 189, 74, 97, 172, 191, 220, 84, 220, 189, 221, 1, 152, 190, 227, 228, 133, 61, 46, 195, 9, 62, 51, 116, 192, 62, 54, 63, 19, 191, 141, 25, 178, 190, 173, 127, 144, 62, 124, 72, 168, 190, 226, 151, 233, 189, 202, 151, 125, 61, 208, 81, 10, 62, 67, 230, 45, 188, 206, 234, 136, 62, 8, 121, 242, 189, 100, 11, 134, 62, 193, 217, 169, 62, 14, 129, 3, 188, 31, 35, 63, 190, 187, 54, 67, 189, 146, 184, 188, 191, 124, 173, 175, 61, 102, 174, 201, 61, 223, 76, 100, 61, 18, 236, 2, 191, 9, 122, 129, 61, 37, 181, 135, 189, 185, 60, 24, 62, 149, 243, 95, 191, 181, 115, 44, 191, 235, 9, 6, 191, 194, 70, 147, 190, 218, 32, 204, 190, 183, 208, 51, 189, 221, 74, 105, 62, 177, 77, 188, 189, 152, 21, 151, 190, 227, 239, 254, 189, 66, 132, 190, 61, 63, 46, 114, 191, 136, 143, 38, 190, 43, 5, 36, 62, 210, 66, 1, 190, 237, 132, 247, 60, 33, 77, 193, 62, 31, 98, 232, 191, 142, 157, 213, 62, 139, 184, 110, 188, 67, 102, 108, 191, 206, 112, 200, 189, 70, 75, 60, 191, 76, 65, 114, 62, 24, 239, 44, 62, 43, 68, 170, 62, 55, 2, 99, 59, 88, 18, 75, 190, 39, 21, 74, 62, 115, 70, 148, 190, 59, 195, 182, 189, 117, 174, 23, 60, 195, 95, 151, 62, 164, 124, 0, 62, 145, 88, 21, 190, 252, 68, 174, 190, 201, 170, 52, 62, 87, 218, 157, 62, 29, 216, 143, 62, 223, 156, 141, 62, 218, 50, 145, 190, 149, 70, 76, 188, 145, 66, 17, 62, 188, 74, 142, 190, 184, 211, 106, 190, 104, 173, 195, 61, 69, 103, 139, 190, 125, 172, 139, 190, 210, 220, 83, 62, 255, 5, 219, 61, 31, 204, 140, 61, 186, 138, 138, 189, 151, 22, 225, 60, 196, 70, 97, 188, 247, 184, 247, 61, 123, 38, 64, 61, 46, 86, 98, 190, 208, 19, 156, 188, 75, 4, 20, 190, 9, 236, 133, 190, 134, 190, 84, 62, 58, 193, 222, 189, 117, 7, 189, 61, 216, 161, 36, 61, 168, 170, 48, 62, 168, 37, 20, 190, 62, 211, 27, 189, 149, 156, 136, 61, 65, 11, 12, 62, 74, 112, 235, 61, 89, 58, 4, 190, 239, 90, 47, 61, 112, 249, 214, 61, 47, 120, 126, 189, 19, 60, 222, 61, 106, 59, 157, 62, 75, 170, 86, 190, 5, 41, 146, 60, 87, 124, 50, 191, 181, 144, 139, 61, 193, 194, 92, 62, 169, 77, 118, 62, 229, 152, 141, 62, 226, 244, 9, 189, 198, 25, 142, 61, 12, 181, 101, 62, 90, 114, 195, 190, 227, 77, 20, 60, 122, 40, 136, 189, 90, 62, 20, 60, 2, 76, 213, 61, 231, 243, 20, 61, 130, 235, 77, 61, 241, 10, 231, 62, 143, 50, 0, 190, 12, 62, 204, 191, 165, 37, 170, 62, 54, 176, 128, 62, 80, 198, 29, 191, 69, 210, 118, 62, 54, 73, 30, 190, 243, 129, 97, 190, 235, 183, 227, 189, 216, 139, 227, 189, 209, 179, 73, 63, 246, 54, 186, 189, 165, 233, 132, 61, 18, 110, 58, 62, 128, 87, 48, 62, 136, 50, 58, 190, 67, 145, 33, 63, 166, 102, 93, 62, 203, 130, 198, 190, 181, 5, 107, 62, 85, 113, 190, 191, 115, 180, 51, 190, 135, 20, 127, 62, 90, 82, 39, 62, 14, 181, 0, 63, 251, 140, 106, 191, 89, 247, 191, 188, 166, 89, 32, 191, 55, 153, 164, 61, 21, 238, 202, 187, 17, 67, 175, 190, 10, 104, 24, 59, 56, 221, 190, 189, 122, 186, 229, 61, 13, 223, 102, 189, 40, 7, 152, 189, 196, 34, 71, 190, 24, 5, 166, 60, 202, 92, 239, 61, 190, 137, 54, 189, 161, 1, 83, 188, 1, 71, 76, 61, 56, 16, 160, 189, 133, 222, 197, 188, 212, 26, 156, 189, 254, 209, 34, 190, 0, 94, 13, 62, 157, 50, 16, 190, 107, 94, 251, 61, 45, 126, 27, 190, 97, 137, 9, 189, 243, 201, 209, 188, 71, 188, 180, 189, 228, 246, 8, 62, 17, 39, 149, 189, 17, 54, 61, 190, 17, 154, 43, 190, 197, 159, 62, 190, 201, 32, 243, 61, 244, 178, 223, 61, 123, 95, 194, 189, 223, 93, 141, 61, 56, 168, 39, 190, 70, 77, 201, 62, 108, 174, 230, 61, 171, 236, 208, 190, 17, 213, 142, 190, 183, 86, 177, 62, 217, 230, 193, 62, 108, 61, 207, 61, 162, 198, 85, 62, 116, 183, 55, 61, 138, 112, 74, 61, 222, 204, 243, 189, 70, 24, 0, 191, 60, 7, 217, 189, 91, 47, 212, 62, 25, 189, 14, 63, 26, 162, 140, 190, 75, 6, 60, 191, 174, 71, 67, 191, 139, 233, 45, 191, 247, 164, 19, 62, 210, 249, 78, 62, 188, 76, 25, 63, 193, 115, 226, 190, 33, 14, 23, 191, 157, 103, 73, 62, 119, 180, 141, 190, 225, 90, 141, 189, 17, 209, 122, 190, 151, 77, 0, 63, 153, 145, 192, 189, 132, 214, 195, 190, 209, 199, 184, 62, 221, 127, 130, 62, 134, 72, 222, 191, 176, 38, 130, 60, 44, 69, 229, 62, 101, 1, 148, 61, 162, 184, 169, 190, 88, 146, 195, 61, 131, 136, 26, 61, 186, 109, 188, 60, 110, 182, 34, 190, 23, 17, 111, 190, 149, 72, 241, 189, 59, 227, 140, 189, 78, 11, 93, 190, 20, 7, 172, 190, 251, 66, 112, 190, 116, 17, 146, 190, 126, 162, 12, 189, 139, 181, 145, 190, 180, 106, 26, 62, 241, 224, 22, 62, 23, 204, 202, 190, 224, 247, 66, 62, 61, 132, 19, 62, 31, 145, 107, 62, 246, 210, 175, 62, 28, 89, 65, 62, 225, 123, 41, 62, 198, 180, 253, 188, 27, 100, 42, 62, 204, 193, 79, 190, 190, 76, 9, 191, 166, 253, 209, 189, 182, 71, 107, 189, 244, 127, 221, 189, 226, 237, 13, 60, 168, 81, 25, 189, 231, 165, 91, 190, 165, 128, 250, 61, 153, 178, 45, 60, 112, 7, 42, 61, 67, 172, 70, 190, 72, 167, 60, 189, 224, 80, 71, 189, 152, 53, 154, 61, 195, 124, 81, 189, 143, 243, 125, 189, 75, 253, 197, 61, 169, 110, 144, 61, 211, 33, 36, 61, 201, 67, 9, 61, 212, 82, 32, 59, 130, 103, 1, 62, 19, 32, 190, 188, 7, 225, 255, 189, 244, 65, 236, 189, 172, 177, 48, 62, 174, 201, 67, 190, 101, 230, 247, 188, 87, 125, 185, 189, 20, 233, 209, 61, 2, 117, 140, 62, 124, 251, 237, 61, 255, 230, 252, 189, 163, 173, 3, 190, 140, 175, 205, 60, 68, 34, 26, 190, 126, 237, 12, 190, 194, 219, 229, 189, 252, 24, 11, 190, 206, 146, 1, 190, 39, 212, 156, 189, 182, 205, 178, 189, 153, 128, 230, 189, 110, 1, 239, 189, 225, 39, 214, 61, 32, 20, 16, 189, 86, 147, 86, 189, 224, 4, 233, 189, 157, 58, 183, 61, 198, 206, 97, 60, 232, 147, 118, 61, 188, 95, 193, 189, 120, 132, 45, 62, 146, 215, 172, 61, 213, 216, 165, 188, 97, 148, 14, 190, 245, 110, 196, 186, 196, 216, 175, 189, 102, 110, 227, 61, 202, 85, 129, 60, 7, 79, 46, 190, 207, 246, 39, 60, 172, 176, 245, 61, 179, 200, 69, 189, 205, 26, 32, 190, 138, 142, 2, 189, 62, 130, 17, 188, 248, 77, 53, 62, 142, 187, 125, 188, 113, 144, 60, 188, 161, 41, 201, 60, 197, 98, 150, 59, 62, 115, 37, 62, 140, 15, 0, 188, 191, 130, 220, 60, 84, 6, 199, 189, 146, 0, 121, 61, 128, 146, 8, 61, 224, 77, 10, 62, 71, 177, 137, 62, 109, 213, 61, 189, 171, 168, 122, 190, 200, 86, 37, 191, 21, 20, 160, 189, 136, 208, 132, 62, 237, 104, 193, 61, 230, 51, 57, 62, 68, 168, 209, 189, 50, 157, 99, 62, 198, 62, 176, 61, 199, 94, 29, 190, 2, 255, 49, 62, 69, 43, 121, 189, 12, 61, 181, 189, 115, 160, 66, 190, 182, 115, 89, 61, 149, 146, 115, 61, 8, 194, 210, 60, 76, 121, 179, 62, 233, 224, 197, 189, 26, 159, 219, 190, 105, 222, 128, 191, 114, 143, 12, 191, 140, 117, 170, 187, 17, 102, 145, 190, 241, 3, 24, 190, 199, 51, 86, 62, 37, 219, 179, 190, 116, 245, 134, 190, 13, 145, 102, 61, 77, 240, 55, 189, 251, 230, 211, 60, 24, 48, 128, 61, 243, 60, 66, 190, 149, 181, 30, 62, 2, 31, 52, 190, 144, 212, 76, 61, 218, 127, 1, 190, 176, 39, 64, 62, 24, 111, 222, 188, 122, 36, 241, 188, 69, 169, 174, 188, 236, 167, 231, 190, 101, 248, 239, 189, 252, 53, 243, 189, 67, 131, 34, 61, 74, 120, 0, 190, 213, 97, 208, 189, 60, 221, 195, 189, 143, 21, 204, 190, 15, 186, 144, 191, 150, 231, 3, 189, 140, 69, 138, 62, 82, 183, 202, 61, 172, 169, 16, 190, 71, 119, 44, 63, 85, 194, 40, 62, 139, 67, 167, 190, 176, 249, 17, 190, 151, 18, 163, 189, 237, 198, 153, 61, 22, 16, 180, 58, 17, 42, 48, 191, 21, 120, 15, 191, 194, 31, 96, 190, 29, 31, 245, 61, 43, 99, 240, 62, 199, 203, 137, 62, 117, 135, 50, 190, 63, 102, 16, 190, 6, 179, 39, 190, 136, 51, 53, 62, 28, 141, 126, 62, 88, 103, 108, 189, 179, 234, 4, 63, 229, 117, 82, 61, 201, 150, 63, 63, 74, 127, 123, 190, 119, 127, 124, 190, 135, 123, 133, 62, 143, 118, 5, 191, 11, 94, 21, 62, 1, 208, 35, 61, 58, 138, 127, 61, 93, 129, 183, 189, 40, 102, 36, 190, 130, 74, 194, 60, 19, 180, 35, 62, 67, 156, 2, 190, 121, 143, 0, 190, 78, 78, 137, 189, 7, 141, 2, 189, 188, 90, 86, 189, 233, 212, 176, 61, 165, 196, 35, 190, 252, 223, 0, 62, 77, 195, 152, 189, 133, 3, 56, 61, 116, 201, 6, 190, 202, 238, 175, 189, 64, 221, 229, 61, 122, 58, 46, 190, 148, 255, 176, 189, 114, 221, 22, 190, 55, 86, 2, 62, 162, 123, 251, 189, 18, 77, 234, 189, 84, 79, 51, 62, 106, 53, 77, 61, 90, 122, 12, 190, 15, 139, 30, 190, 102, 40, 247, 188, 164, 128, 168, 189, 39, 15, 216, 190, 71, 34, 55, 191, 145, 96, 175, 62, 53, 229, 107, 62, 76, 228, 44, 190, 231, 127, 18, 62, 79, 87, 47, 63, 76, 173, 16, 62, 232, 90, 127, 190, 197, 177, 233, 188, 13, 239, 182, 190, 221, 177, 76, 187, 44, 113, 202, 62, 225, 140, 118, 191, 99, 163, 162, 189, 241, 6, 128, 191, 82, 222, 33, 62, 81, 36, 148, 190, 46, 101, 157, 61, 193, 25, 173, 61, 28, 178, 59, 190, 252, 41, 68, 62, 23, 244, 5, 62, 133, 19, 208, 61, 46, 17, 201, 189, 42, 170, 229, 62, 118, 148, 129, 61, 101, 181, 126, 63, 238, 220, 50, 190, 91, 59, 67, 189, 246, 93, 84, 62, 40, 141, 120, 191, 191, 130, 127, 190, 132, 209, 130, 191, 72, 206, 37, 62, 201, 49, 141, 62, 127, 93, 10, 61, 226, 114, 253, 187, 144, 24, 52, 62, 108, 136, 63, 62, 150, 104, 25, 190, 140, 215, 66, 59, 97, 153, 55, 191, 204, 234, 6, 62, 117, 155, 4, 189, 190, 254, 69, 191, 14, 207, 222, 61, 54, 160, 3, 191, 121, 137, 26, 189, 173, 136, 92, 190, 229, 100, 137, 61, 45, 219, 68, 190, 253, 81, 24, 191, 120, 184, 136, 189, 177, 72, 150, 62, 175, 237, 104, 191, 247, 42, 51, 190, 176, 168, 217, 62, 32, 218, 166, 189, 234, 229, 64, 63, 155, 114, 153, 190, 208, 75, 62, 190, 7, 135, 37, 62, 153, 94, 13, 191, 27, 127, 31, 190, 215, 246, 246, 189, 63, 70, 30, 190, 77, 2, 2, 62, 243, 132, 35, 190, 250, 93, 66, 189, 128, 27, 194, 189, 25, 168, 31, 62, 110, 209, 3, 61, 201, 91, 199, 59, 230, 191, 119, 61, 96, 187, 31, 62, 65, 31, 170, 61, 234, 122, 217, 189, 5, 10, 174, 61, 14, 105, 6, 190, 116, 167, 41, 190, 20, 64, 174, 189, 136, 229, 93, 189, 160, 52, 210, 189, 210, 228, 1, 190, 126, 117, 51, 190, 171, 185, 179, 188, 200, 203, 39, 60, 138, 139, 169, 189, 130, 64, 22, 190, 107, 169, 150, 189, 30, 15, 122, 189, 84, 236, 55, 189, 140, 122, 25, 62, 155, 134, 13, 188, 90, 126, 253, 61, 17, 116, 20, 190, 36, 54, 125, 191, 70, 10, 172, 61, 134, 89, 82, 62, 240, 246, 197, 61, 83, 83, 48, 60, 183, 133, 243, 62, 137, 150, 231, 61, 83, 13, 145, 190, 238, 119, 162, 190, 91, 69, 188, 190, 251, 230, 23, 60, 226, 83, 102, 61, 123, 174, 14, 191, 137, 137, 69, 190, 172, 183, 13, 191, 202, 171, 129, 61, 196, 4, 36, 189, 239, 1, 133, 62, 94, 151, 72, 190, 197, 253, 143, 190, 183, 177, 162, 189, 52, 208, 23, 62, 171, 194, 133, 189, 177, 220, 107, 190, 9, 91, 100, 63, 219, 23, 26, 62, 12, 133, 104, 63, 235, 79, 130, 190, 111, 151, 78, 190, 30, 7, 157, 62, 125, 230, 34, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 156, 37, 62, 126, 34, 13, 59, 229, 155, 60, 61, 134, 30, 140, 62, 195, 45, 130, 62, 42, 210, 11, 62, 114, 146, 180, 61, 72, 211, 241, 61, 149, 232, 72, 187, 234, 22, 2, 62, 234, 109, 157, 62, 177, 80, 191, 189, 68, 60, 194, 61, 62, 27, 30, 61, 15, 231, 40, 190, 40, 76, 27, 61, 94, 181, 219, 62, 26, 225, 145, 62, 144, 227, 154, 189, 69, 234, 63, 190, 29, 60, 55, 62, 254, 35, 19, 62, 199, 39, 50, 190, 8, 52, 92, 61, 83, 152, 183, 62, 45, 242, 29, 190, 53, 31, 47, 189, 222, 133, 69, 61, 193, 149, 10, 62, 31, 250, 104, 62, 109, 242, 54, 190, 58, 233, 254, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 173, 54, 191, 198, 119, 182, 190, 8, 226, 38, 63, 138, 62, 31, 190, 82, 107, 32, 191, 134, 19, 183, 61, 53, 190, 219, 62, 207, 109, 138, 188, 114, 95, 102, 190, 45, 183, 84, 63, 216, 26, 12, 191, 163, 103, 55, 189, 14, 50, 193, 62, 197, 57, 252, 61, 111, 173, 144, 190, 125, 118, 66, 63, 252, 210, 161, 62, 253, 159, 49, 189, 23, 236, 106, 191, 206, 169, 74, 188, 144, 198, 52, 191, 13, 24, 13, 63, 255, 73, 42, 190, 141, 111, 174, 61, 16, 135, 52, 188, 197, 233, 38, 63, 117, 202, 247, 62, 188, 219, 33, 190, 61, 25, 184, 62, 71, 234, 9, 63, 189, 46, 181, 61, 25, 179, 38, 63, 203, 113, 102, 62, 89, 75, 0, 190, 48, 6, 204, 190, 108, 248, 48, 190, 186, 43, 52, 190, 63, 40, 68, 59, 74, 69, 35, 63, 140, 114, 129, 61, 50, 213, 238, 58, 216, 52, 222, 188, 55, 155, 144, 190, 253, 43, 117, 189, 15, 109, 71, 61, 78, 245, 240, 60, 6, 96, 211, 60, 91, 242, 245, 62, 208, 40, 143, 190, 236, 131, 109, 190, 132, 211, 176, 61, 247, 183, 125, 61, 78, 221, 28, 63, 239, 49, 57, 190, 226, 100, 143, 189, 221, 172, 83, 61, 197, 232, 43, 190, 163, 215, 201, 62, 234, 211, 35, 63, 95, 217, 40, 61, 227, 111, 249, 190, 96, 109, 190, 189, 186, 117, 225, 189, 184, 148, 75, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {108, 69, 246, 61, 43, 191, 173, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {30, 62, 73, 62, 15, 248, 225, 190, 60, 202, 227, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {119, 69, 217, 190, 222, 253, 140, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0018/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}