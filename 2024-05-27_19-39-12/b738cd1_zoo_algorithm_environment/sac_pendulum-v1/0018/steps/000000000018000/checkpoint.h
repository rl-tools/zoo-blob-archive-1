// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 159, 57, 62, 235, 213, 57, 191, 59, 164, 137, 62, 52, 201, 121, 63, 198, 229, 83, 62, 21, 27, 141, 62, 205, 192, 249, 62, 219, 65, 138, 63, 126, 173, 221, 62, 169, 173, 225, 62, 138, 77, 155, 191, 159, 171, 115, 190, 6, 116, 248, 190, 222, 115, 32, 191, 176, 16, 132, 187, 4, 197, 128, 191, 120, 225, 26, 191, 18, 239, 219, 189, 253, 53, 130, 190, 140, 181, 81, 191, 134, 69, 125, 190, 144, 155, 226, 190, 195, 5, 221, 188, 9, 101, 152, 188, 200, 40, 173, 62, 189, 231, 61, 63, 111, 52, 40, 191, 107, 51, 210, 187, 17, 253, 109, 63, 35, 74, 20, 63, 72, 69, 201, 61, 0, 12, 55, 62, 196, 170, 54, 191, 242, 156, 9, 189, 75, 161, 200, 191, 111, 47, 210, 62, 212, 179, 250, 189, 122, 151, 69, 61, 230, 135, 0, 191, 0, 1, 133, 190, 35, 97, 51, 62, 114, 7, 116, 191, 204, 165, 54, 191, 142, 175, 168, 191, 87, 237, 59, 190, 199, 209, 43, 190, 54, 64, 39, 63, 75, 110, 29, 191, 8, 17, 27, 191, 32, 64, 242, 62, 41, 104, 41, 62, 200, 14, 96, 63, 195, 144, 30, 190, 161, 163, 146, 190, 217, 73, 140, 190, 110, 117, 99, 189, 147, 169, 44, 63, 231, 140, 128, 63, 28, 236, 213, 61, 189, 219, 137, 61, 189, 108, 234, 61, 145, 71, 155, 191, 31, 179, 199, 190, 66, 209, 54, 63, 167, 134, 132, 63, 158, 120, 222, 62, 218, 134, 131, 62, 151, 22, 81, 62, 36, 225, 253, 62, 65, 144, 36, 63, 93, 25, 155, 191, 69, 102, 255, 190, 234, 2, 40, 63, 134, 211, 168, 190, 129, 48, 240, 62, 88, 53, 0, 63, 175, 76, 145, 191, 125, 213, 82, 190, 40, 224, 84, 62, 242, 96, 64, 63, 47, 228, 57, 62, 212, 98, 13, 191, 219, 89, 66, 191, 67, 191, 156, 190, 168, 41, 28, 63, 113, 233, 29, 63, 86, 150, 33, 63, 76, 48, 198, 190, 96, 177, 114, 190, 133, 78, 221, 188, 90, 154, 198, 190, 251, 76, 125, 62, 88, 194, 13, 63, 26, 208, 136, 189, 160, 223, 79, 63, 5, 231, 184, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 2, 250, 190, 135, 142, 154, 191, 170, 178, 183, 62, 179, 170, 128, 62, 185, 187, 246, 62, 140, 34, 170, 62, 248, 109, 53, 191, 237, 238, 255, 62, 235, 69, 37, 63, 51, 193, 0, 191, 26, 139, 107, 62, 99, 126, 99, 190, 185, 220, 37, 190, 95, 170, 88, 61, 25, 108, 61, 62, 241, 249, 106, 190, 130, 199, 148, 62, 118, 186, 140, 191, 107, 115, 188, 190, 135, 57, 83, 62, 62, 44, 212, 62, 215, 65, 5, 190, 152, 200, 179, 62, 154, 70, 215, 189, 105, 185, 207, 62, 237, 189, 216, 61, 31, 32, 176, 62, 179, 132, 202, 190, 243, 163, 81, 61, 117, 230, 44, 191, 230, 253, 117, 62, 62, 72, 215, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 24, 196, 61, 94, 115, 89, 63, 35, 234, 31, 189, 53, 250, 114, 190, 75, 0, 181, 62, 93, 195, 149, 61, 34, 66, 186, 190, 133, 224, 30, 62, 128, 73, 155, 62, 234, 143, 155, 60, 75, 22, 46, 190, 63, 21, 231, 190, 19, 235, 128, 190, 171, 189, 147, 62, 70, 98, 217, 61, 61, 143, 213, 189, 175, 142, 133, 61, 12, 91, 153, 191, 43, 158, 144, 190, 50, 33, 176, 62, 144, 166, 63, 190, 153, 120, 194, 62, 200, 71, 221, 189, 125, 205, 0, 191, 236, 151, 174, 62, 14, 42, 14, 191, 184, 98, 142, 62, 159, 187, 61, 190, 62, 252, 170, 62, 239, 188, 5, 190, 210, 28, 13, 190, 168, 90, 239, 62, 16, 235, 7, 190, 39, 243, 177, 62, 57, 156, 136, 188, 165, 142, 41, 190, 179, 176, 13, 61, 172, 182, 125, 62, 212, 148, 105, 190, 1, 209, 162, 62, 164, 233, 50, 62, 244, 8, 165, 60, 56, 150, 32, 62, 89, 255, 238, 190, 76, 165, 210, 189, 14, 148, 211, 62, 43, 32, 161, 62, 63, 191, 76, 190, 97, 185, 180, 58, 118, 66, 46, 191, 187, 77, 95, 190, 121, 216, 67, 62, 147, 88, 109, 61, 164, 51, 118, 62, 224, 54, 182, 189, 197, 161, 183, 190, 159, 61, 115, 62, 138, 220, 124, 190, 219, 222, 21, 62, 130, 132, 129, 189, 102, 176, 146, 62, 61, 216, 6, 190, 224, 129, 52, 190, 165, 131, 91, 62, 10, 163, 251, 60, 198, 242, 153, 191, 225, 133, 198, 189, 137, 253, 56, 62, 32, 233, 43, 61, 193, 12, 71, 189, 108, 197, 93, 61, 197, 137, 200, 61, 90, 165, 105, 190, 132, 242, 236, 190, 132, 85, 71, 190, 120, 117, 41, 62, 241, 113, 21, 62, 91, 250, 201, 61, 219, 63, 149, 188, 248, 122, 15, 190, 38, 143, 255, 61, 102, 34, 238, 189, 101, 58, 166, 62, 233, 144, 172, 61, 117, 175, 211, 190, 26, 138, 189, 190, 20, 140, 18, 62, 49, 208, 213, 190, 245, 192, 78, 59, 76, 236, 80, 63, 0, 55, 133, 62, 76, 125, 219, 62, 125, 66, 72, 190, 61, 240, 122, 189, 246, 121, 156, 61, 12, 137, 10, 191, 77, 141, 154, 61, 139, 185, 215, 62, 88, 138, 229, 59, 49, 1, 3, 62, 179, 114, 143, 189, 219, 36, 189, 61, 121, 252, 153, 191, 197, 193, 24, 62, 247, 191, 1, 190, 182, 47, 15, 190, 232, 75, 202, 61, 160, 138, 4, 62, 166, 198, 227, 190, 187, 231, 56, 190, 107, 145, 205, 62, 244, 189, 158, 189, 231, 69, 195, 61, 96, 103, 22, 191, 29, 99, 106, 61, 191, 23, 201, 62, 249, 100, 21, 62, 254, 18, 23, 62, 254, 111, 214, 189, 178, 66, 41, 190, 228, 230, 114, 62, 103, 193, 35, 190, 212, 14, 162, 189, 226, 171, 164, 191, 186, 194, 35, 62, 95, 168, 66, 62, 114, 53, 99, 61, 163, 121, 5, 63, 113, 62, 107, 189, 93, 32, 182, 62, 228, 109, 23, 62, 8, 38, 78, 190, 137, 121, 58, 189, 51, 151, 89, 189, 16, 226, 192, 189, 25, 247, 40, 62, 249, 70, 112, 62, 61, 110, 177, 190, 131, 127, 90, 189, 20, 119, 30, 190, 140, 149, 52, 189, 0, 203, 32, 190, 227, 81, 241, 191, 247, 213, 126, 62, 78, 166, 220, 61, 122, 134, 159, 191, 11, 153, 35, 190, 216, 66, 132, 62, 73, 167, 57, 191, 161, 138, 239, 61, 249, 119, 81, 62, 21, 41, 151, 189, 224, 55, 248, 61, 128, 160, 164, 61, 104, 18, 107, 62, 159, 212, 160, 191, 199, 148, 3, 189, 191, 253, 173, 61, 249, 201, 43, 62, 197, 128, 231, 62, 5, 117, 178, 188, 29, 20, 28, 62, 18, 208, 239, 189, 52, 110, 31, 190, 175, 190, 199, 189, 179, 150, 16, 190, 63, 129, 196, 189, 19, 145, 140, 189, 106, 241, 159, 61, 126, 73, 40, 190, 82, 209, 26, 190, 119, 226, 65, 189, 214, 75, 135, 189, 127, 118, 32, 190, 216, 23, 147, 189, 237, 142, 194, 189, 143, 63, 129, 187, 241, 177, 51, 62, 217, 217, 12, 60, 95, 166, 237, 189, 160, 32, 171, 189, 160, 96, 79, 189, 88, 191, 157, 61, 177, 237, 26, 190, 113, 227, 201, 189, 166, 126, 97, 189, 220, 225, 138, 188, 90, 91, 231, 60, 247, 50, 38, 190, 77, 133, 51, 190, 180, 138, 206, 60, 167, 169, 37, 190, 67, 164, 155, 189, 37, 183, 207, 190, 229, 57, 51, 190, 200, 215, 200, 62, 21, 242, 204, 189, 120, 73, 128, 189, 198, 116, 26, 63, 131, 243, 108, 190, 122, 255, 181, 190, 189, 102, 16, 190, 95, 92, 38, 190, 10, 48, 237, 189, 15, 25, 99, 190, 174, 190, 74, 191, 163, 135, 203, 190, 107, 201, 154, 190, 99, 198, 3, 62, 121, 65, 41, 60, 128, 78, 133, 62, 11, 82, 242, 189, 222, 200, 235, 188, 45, 193, 1, 191, 232, 197, 248, 60, 131, 68, 10, 62, 58, 231, 230, 189, 69, 111, 37, 63, 228, 196, 0, 190, 210, 177, 17, 63, 239, 123, 233, 59, 177, 159, 110, 189, 70, 128, 225, 61, 252, 249, 14, 191, 4, 7, 185, 61, 147, 176, 164, 189, 118, 195, 232, 189, 136, 225, 221, 189, 4, 232, 148, 189, 118, 189, 96, 189, 154, 251, 33, 190, 200, 92, 100, 189, 142, 126, 43, 61, 199, 39, 40, 190, 211, 138, 246, 189, 74, 81, 81, 61, 4, 80, 252, 59, 93, 207, 107, 189, 190, 141, 41, 190, 147, 206, 196, 188, 50, 60, 21, 189, 4, 158, 147, 189, 190, 25, 33, 190, 39, 48, 159, 189, 59, 211, 197, 61, 104, 66, 204, 189, 113, 30, 158, 189, 156, 210, 133, 189, 89, 59, 184, 189, 250, 193, 23, 190, 130, 22, 11, 189, 214, 104, 213, 59, 18, 88, 17, 190, 11, 55, 244, 189, 95, 136, 217, 61, 89, 155, 250, 189, 165, 61, 171, 60, 243, 167, 162, 61, 52, 94, 36, 62, 137, 159, 79, 190, 100, 183, 197, 61, 197, 253, 46, 62, 231, 70, 101, 62, 150, 41, 219, 59, 140, 223, 168, 62, 245, 95, 81, 190, 137, 226, 58, 61, 177, 121, 229, 189, 229, 207, 225, 189, 235, 56, 184, 62, 144, 18, 134, 61, 168, 142, 188, 190, 76, 132, 170, 190, 193, 94, 96, 191, 166, 103, 75, 190, 76, 6, 151, 62, 202, 146, 247, 61, 129, 64, 18, 62, 123, 50, 8, 190, 57, 254, 152, 190, 177, 215, 114, 60, 113, 132, 139, 190, 35, 20, 111, 61, 151, 154, 97, 62, 116, 109, 90, 61, 237, 193, 147, 189, 87, 71, 61, 190, 19, 247, 136, 62, 1, 172, 31, 190, 34, 204, 27, 191, 184, 58, 225, 189, 12, 71, 142, 62, 101, 9, 87, 62, 112, 191, 13, 189, 27, 142, 91, 62, 20, 197, 64, 61, 56, 167, 118, 191, 190, 165, 190, 190, 73, 108, 139, 191, 240, 143, 157, 61, 142, 36, 1, 190, 86, 43, 138, 191, 173, 228, 98, 61, 151, 144, 42, 190, 87, 212, 54, 62, 129, 115, 157, 190, 157, 195, 59, 62, 78, 217, 108, 190, 44, 102, 244, 190, 236, 254, 73, 190, 80, 241, 65, 61, 216, 24, 155, 191, 86, 198, 12, 190, 168, 193, 44, 63, 104, 108, 2, 189, 186, 125, 34, 63, 42, 99, 38, 189, 77, 88, 78, 189, 204, 62, 215, 61, 116, 66, 36, 191, 213, 29, 7, 191, 148, 98, 203, 61, 110, 51, 168, 190, 20, 94, 45, 189, 236, 61, 205, 61, 14, 69, 137, 61, 216, 95, 169, 190, 203, 5, 55, 189, 202, 39, 8, 62, 188, 195, 100, 191, 114, 227, 35, 62, 123, 199, 232, 190, 132, 63, 14, 190, 58, 52, 148, 189, 150, 96, 79, 62, 23, 228, 136, 190, 80, 137, 18, 191, 28, 59, 133, 191, 150, 14, 141, 191, 70, 141, 188, 61, 107, 16, 52, 62, 214, 170, 49, 62, 2, 132, 75, 190, 34, 234, 52, 190, 87, 187, 53, 62, 85, 129, 190, 190, 131, 170, 4, 62, 213, 233, 18, 190, 211, 214, 97, 62, 153, 92, 19, 62, 153, 244, 230, 190, 60, 147, 130, 62, 137, 185, 192, 61, 196, 131, 35, 62, 244, 193, 47, 189, 170, 73, 138, 61, 85, 134, 44, 189, 69, 196, 208, 189, 31, 43, 137, 61, 203, 20, 17, 189, 21, 28, 156, 61, 97, 19, 32, 190, 7, 167, 165, 189, 166, 96, 173, 188, 249, 91, 6, 189, 22, 135, 251, 189, 172, 16, 3, 190, 91, 52, 40, 190, 137, 172, 18, 62, 19, 142, 225, 60, 249, 136, 54, 189, 21, 183, 40, 190, 5, 163, 217, 189, 129, 32, 217, 61, 127, 93, 65, 189, 193, 85, 102, 189, 1, 52, 161, 189, 57, 21, 156, 61, 144, 23, 188, 188, 98, 181, 45, 190, 24, 210, 29, 189, 24, 230, 3, 62, 219, 192, 113, 61, 169, 250, 186, 189, 107, 183, 76, 190, 173, 80, 137, 61, 93, 6, 34, 190, 8, 61, 92, 62, 165, 14, 164, 189, 165, 117, 33, 61, 104, 144, 193, 190, 62, 65, 232, 189, 127, 150, 198, 62, 47, 213, 10, 191, 230, 208, 212, 62, 222, 17, 162, 190, 173, 90, 129, 188, 57, 120, 33, 61, 224, 102, 213, 190, 96, 190, 39, 62, 197, 98, 43, 62, 121, 100, 44, 63, 68, 41, 240, 190, 119, 228, 18, 189, 222, 237, 55, 61, 13, 245, 13, 190, 141, 222, 215, 58, 27, 91, 70, 62, 101, 124, 26, 190, 235, 8, 171, 62, 73, 114, 127, 189, 206, 221, 132, 189, 246, 72, 136, 189, 199, 104, 27, 189, 186, 93, 84, 190, 32, 101, 116, 61, 40, 96, 63, 61, 189, 101, 170, 60, 242, 145, 206, 60, 167, 102, 49, 190, 253, 91, 28, 62, 38, 249, 57, 188, 247, 0, 45, 62, 227, 36, 28, 190, 160, 226, 220, 189, 221, 74, 45, 190, 237, 191, 136, 61, 127, 121, 3, 189, 55, 20, 62, 61, 132, 196, 9, 188, 90, 102, 51, 190, 199, 236, 163, 189, 135, 220, 55, 60, 208, 131, 170, 61, 41, 192, 218, 188, 56, 224, 12, 190, 120, 244, 137, 189, 53, 207, 30, 190, 49, 12, 37, 190, 105, 240, 58, 61, 74, 141, 24, 190, 51, 220, 143, 60, 208, 32, 141, 189, 90, 98, 135, 60, 147, 30, 9, 190, 182, 233, 43, 62, 45, 133, 195, 189, 44, 105, 73, 187, 215, 225, 169, 61, 108, 232, 40, 63, 107, 73, 174, 58, 50, 190, 231, 61, 73, 22, 29, 62, 126, 108, 117, 189, 168, 151, 179, 191, 168, 201, 237, 189, 142, 160, 154, 190, 209, 177, 148, 61, 211, 49, 207, 61, 60, 175, 190, 62, 137, 61, 78, 191, 228, 3, 242, 190, 132, 58, 150, 62, 4, 164, 194, 190, 6, 28, 1, 190, 224, 166, 249, 189, 165, 152, 10, 62, 235, 27, 148, 187, 83, 191, 152, 62, 36, 180, 3, 190, 217, 19, 137, 62, 157, 186, 185, 62, 121, 187, 161, 58, 207, 156, 33, 190, 23, 71, 108, 189, 177, 114, 204, 191, 110, 243, 161, 61, 102, 174, 201, 61, 93, 40, 62, 61, 192, 38, 31, 191, 64, 12, 158, 61, 88, 140, 202, 189, 95, 63, 8, 62, 9, 73, 132, 191, 197, 224, 62, 191, 122, 192, 39, 191, 194, 70, 147, 190, 17, 211, 229, 190, 226, 178, 237, 189, 185, 124, 127, 62, 171, 25, 105, 190, 222, 58, 147, 190, 124, 206, 179, 189, 53, 144, 122, 61, 28, 163, 118, 191, 117, 152, 129, 190, 44, 190, 25, 62, 210, 66, 1, 190, 192, 120, 205, 60, 91, 149, 161, 62, 13, 118, 243, 191, 244, 12, 214, 62, 172, 29, 235, 188, 155, 136, 126, 191, 165, 211, 243, 189, 222, 16, 92, 191, 225, 124, 93, 62, 24, 239, 44, 62, 106, 126, 168, 62, 55, 2, 99, 59, 132, 246, 77, 190, 46, 233, 31, 62, 153, 5, 113, 190, 250, 236, 165, 190, 38, 20, 43, 60, 245, 172, 152, 62, 80, 129, 238, 61, 143, 214, 55, 190, 245, 111, 212, 190, 63, 245, 73, 62, 183, 117, 161, 62, 149, 194, 158, 62, 131, 240, 152, 62, 26, 226, 106, 190, 24, 102, 122, 60, 254, 118, 50, 62, 136, 211, 156, 190, 129, 226, 89, 190, 212, 47, 29, 62, 207, 217, 15, 190, 90, 203, 137, 190, 98, 105, 85, 62, 200, 219, 225, 61, 73, 111, 150, 61, 66, 31, 122, 189, 46, 138, 9, 61, 173, 191, 56, 188, 141, 91, 255, 61, 129, 166, 93, 61, 174, 19, 111, 190, 236, 244, 59, 59, 75, 4, 20, 190, 184, 156, 63, 190, 48, 78, 87, 62, 154, 91, 191, 189, 111, 233, 247, 61, 204, 124, 6, 60, 100, 20, 43, 62, 106, 133, 189, 189, 59, 27, 46, 189, 95, 138, 48, 189, 216, 28, 59, 62, 108, 165, 218, 61, 205, 208, 24, 190, 2, 246, 89, 61, 83, 127, 0, 62, 110, 68, 39, 189, 53, 105, 10, 62, 219, 210, 151, 62, 118, 36, 57, 190, 121, 129, 243, 60, 227, 96, 21, 191, 217, 201, 104, 61, 110, 46, 55, 62, 203, 13, 119, 62, 218, 111, 116, 62, 81, 166, 75, 189, 101, 209, 103, 61, 191, 230, 78, 62, 87, 96, 200, 190, 188, 194, 211, 188, 59, 223, 168, 189, 86, 26, 133, 188, 2, 76, 213, 61, 95, 73, 37, 61, 192, 216, 193, 61, 237, 142, 9, 63, 143, 50, 0, 190, 147, 32, 225, 191, 42, 30, 173, 62, 218, 68, 141, 62, 24, 224, 25, 191, 208, 0, 122, 62, 249, 255, 11, 190, 47, 210, 129, 190, 117, 208, 149, 190, 185, 41, 18, 190, 139, 47, 91, 63, 119, 195, 252, 189, 172, 52, 7, 61, 55, 113, 72, 62, 187, 221, 47, 62, 217, 7, 133, 190, 232, 156, 27, 63, 132, 43, 53, 62, 208, 254, 201, 190, 143, 211, 107, 62, 4, 196, 215, 191, 90, 52, 18, 190, 154, 227, 110, 62, 124, 38, 97, 62, 188, 0, 2, 63, 2, 211, 136, 191, 241, 173, 32, 189, 59, 107, 50, 191, 55, 153, 164, 61, 110, 61, 142, 188, 173, 43, 175, 190, 10, 104, 24, 59, 56, 221, 190, 189, 122, 186, 229, 61, 13, 223, 102, 189, 40, 7, 152, 189, 196, 34, 71, 190, 24, 5, 166, 60, 202, 92, 239, 61, 190, 137, 54, 189, 161, 1, 83, 188, 1, 71, 76, 61, 56, 16, 160, 189, 133, 222, 197, 188, 212, 26, 156, 189, 254, 209, 34, 190, 0, 94, 13, 62, 157, 50, 16, 190, 107, 94, 251, 61, 45, 126, 27, 190, 97, 137, 9, 189, 243, 201, 209, 188, 71, 188, 180, 189, 228, 246, 8, 62, 17, 39, 149, 189, 17, 54, 61, 190, 17, 154, 43, 190, 197, 159, 62, 190, 201, 32, 243, 61, 244, 178, 223, 61, 123, 95, 194, 189, 223, 93, 141, 61, 56, 168, 39, 190, 180, 6, 217, 62, 61, 40, 58, 62, 169, 235, 216, 190, 40, 30, 157, 190, 136, 129, 211, 62, 86, 236, 212, 62, 107, 202, 134, 62, 222, 85, 89, 62, 149, 124, 163, 60, 248, 164, 117, 61, 96, 24, 2, 190, 70, 25, 0, 191, 28, 241, 218, 189, 3, 132, 208, 62, 49, 80, 39, 63, 125, 179, 145, 190, 241, 186, 84, 191, 222, 206, 96, 191, 175, 127, 64, 191, 92, 136, 172, 61, 55, 184, 67, 62, 11, 19, 24, 63, 53, 92, 248, 190, 102, 202, 27, 191, 213, 126, 20, 62, 255, 112, 157, 190, 72, 11, 194, 189, 140, 55, 61, 190, 161, 105, 235, 62, 153, 145, 192, 189, 42, 119, 209, 190, 197, 5, 176, 62, 55, 185, 117, 62, 147, 240, 229, 191, 165, 194, 131, 60, 117, 69, 227, 62, 78, 241, 23, 61, 235, 53, 204, 190, 76, 56, 178, 61, 137, 5, 205, 60, 102, 20, 189, 60, 10, 126, 105, 190, 99, 106, 87, 190, 247, 227, 7, 190, 165, 182, 14, 188, 147, 132, 41, 190, 78, 122, 188, 190, 185, 24, 87, 190, 235, 94, 156, 190, 90, 98, 253, 60, 16, 12, 164, 190, 202, 16, 27, 62, 239, 234, 20, 62, 220, 229, 199, 190, 112, 173, 56, 62, 83, 17, 19, 62, 151, 170, 100, 62, 74, 44, 174, 62, 48, 237, 70, 62, 153, 126, 77, 62, 217, 58, 222, 188, 27, 100, 42, 62, 28, 144, 93, 190, 176, 38, 46, 191, 166, 253, 209, 189, 182, 71, 107, 189, 244, 127, 221, 189, 226, 237, 13, 60, 168, 81, 25, 189, 231, 165, 91, 190, 165, 128, 250, 61, 153, 178, 45, 60, 112, 7, 42, 61, 67, 172, 70, 190, 72, 167, 60, 189, 224, 80, 71, 189, 152, 53, 154, 61, 195, 124, 81, 189, 143, 243, 125, 189, 75, 253, 197, 61, 169, 110, 144, 61, 211, 33, 36, 61, 201, 67, 9, 61, 212, 82, 32, 59, 130, 103, 1, 62, 19, 32, 190, 188, 7, 225, 255, 189, 244, 65, 236, 189, 172, 177, 48, 62, 174, 201, 67, 190, 101, 230, 247, 188, 87, 125, 185, 189, 20, 233, 209, 61, 2, 117, 140, 62, 124, 251, 237, 61, 255, 230, 252, 189, 163, 173, 3, 190, 140, 175, 205, 60, 68, 34, 26, 190, 126, 237, 12, 190, 194, 219, 229, 189, 252, 24, 11, 190, 206, 146, 1, 190, 39, 212, 156, 189, 182, 205, 178, 189, 153, 128, 230, 189, 110, 1, 239, 189, 225, 39, 214, 61, 32, 20, 16, 189, 86, 147, 86, 189, 224, 4, 233, 189, 157, 58, 183, 61, 198, 206, 97, 60, 232, 147, 118, 61, 188, 95, 193, 189, 120, 132, 45, 62, 146, 215, 172, 61, 213, 216, 165, 188, 97, 148, 14, 190, 245, 110, 196, 186, 196, 216, 175, 189, 102, 110, 227, 61, 202, 85, 129, 60, 7, 79, 46, 190, 207, 246, 39, 60, 172, 176, 245, 61, 179, 200, 69, 189, 205, 26, 32, 190, 65, 47, 105, 188, 168, 81, 28, 60, 138, 21, 11, 62, 180, 31, 253, 188, 242, 21, 52, 61, 145, 129, 156, 60, 107, 170, 249, 189, 184, 229, 90, 62, 54, 124, 178, 188, 13, 93, 248, 59, 64, 251, 174, 189, 241, 236, 177, 61, 241, 119, 110, 61, 191, 123, 42, 62, 224, 42, 130, 62, 235, 124, 130, 188, 226, 68, 101, 190, 59, 252, 0, 191, 67, 6, 189, 189, 68, 175, 82, 62, 9, 226, 180, 61, 71, 228, 11, 62, 233, 248, 252, 189, 88, 2, 79, 62, 32, 187, 92, 61, 228, 215, 49, 190, 16, 224, 6, 62, 111, 101, 164, 189, 3, 146, 233, 189, 115, 160, 66, 190, 127, 62, 130, 61, 151, 9, 211, 61, 8, 194, 210, 60, 76, 121, 179, 62, 233, 224, 197, 189, 26, 159, 219, 190, 105, 222, 128, 191, 114, 143, 12, 191, 140, 117, 170, 187, 17, 102, 145, 190, 241, 3, 24, 190, 199, 51, 86, 62, 37, 219, 179, 190, 116, 245, 134, 190, 13, 145, 102, 61, 77, 240, 55, 189, 251, 230, 211, 60, 24, 48, 128, 61, 243, 60, 66, 190, 149, 181, 30, 62, 2, 31, 52, 190, 144, 212, 76, 61, 218, 127, 1, 190, 176, 39, 64, 62, 24, 111, 222, 188, 122, 36, 241, 188, 69, 169, 174, 188, 236, 167, 231, 190, 101, 248, 239, 189, 252, 53, 243, 189, 67, 131, 34, 61, 74, 120, 0, 190, 213, 97, 208, 189, 60, 221, 195, 189, 71, 91, 209, 190, 241, 149, 143, 191, 3, 172, 138, 189, 193, 70, 143, 62, 183, 13, 157, 61, 224, 254, 64, 190, 178, 106, 41, 63, 199, 184, 224, 61, 82, 254, 147, 190, 38, 92, 50, 190, 149, 95, 10, 61, 227, 243, 122, 61, 200, 238, 20, 188, 163, 136, 60, 191, 39, 216, 36, 191, 72, 159, 120, 190, 142, 62, 162, 61, 101, 4, 236, 62, 196, 13, 129, 62, 163, 61, 41, 190, 123, 170, 0, 190, 144, 108, 99, 190, 225, 73, 27, 62, 129, 158, 144, 62, 69, 183, 140, 189, 127, 254, 7, 63, 186, 150, 33, 60, 136, 150, 59, 63, 91, 236, 139, 190, 119, 127, 124, 190, 151, 249, 116, 62, 207, 129, 10, 191, 11, 94, 21, 62, 1, 208, 35, 61, 58, 138, 127, 61, 93, 129, 183, 189, 40, 102, 36, 190, 130, 74, 194, 60, 19, 180, 35, 62, 67, 156, 2, 190, 121, 143, 0, 190, 78, 78, 137, 189, 7, 141, 2, 189, 188, 90, 86, 189, 233, 212, 176, 61, 165, 196, 35, 190, 252, 223, 0, 62, 77, 195, 152, 189, 133, 3, 56, 61, 116, 201, 6, 190, 202, 238, 175, 189, 64, 221, 229, 61, 122, 58, 46, 190, 148, 255, 176, 189, 114, 221, 22, 190, 55, 86, 2, 62, 162, 123, 251, 189, 18, 77, 234, 189, 84, 79, 51, 62, 106, 53, 77, 61, 90, 122, 12, 190, 15, 139, 30, 190, 102, 40, 247, 188, 164, 128, 168, 189, 117, 30, 213, 190, 224, 76, 68, 191, 191, 19, 186, 62, 169, 189, 103, 62, 80, 133, 38, 190, 66, 223, 23, 62, 190, 132, 64, 63, 198, 211, 54, 62, 219, 234, 128, 190, 127, 19, 210, 188, 62, 59, 179, 190, 66, 130, 187, 59, 34, 122, 228, 62, 118, 161, 109, 191, 10, 8, 209, 189, 93, 60, 136, 191, 158, 36, 69, 62, 171, 190, 147, 190, 201, 113, 149, 61, 133, 121, 190, 61, 124, 42, 70, 190, 208, 232, 95, 62, 94, 36, 19, 62, 23, 247, 179, 61, 183, 10, 180, 189, 141, 58, 227, 62, 189, 196, 185, 61, 227, 17, 134, 63, 51, 20, 26, 190, 91, 59, 67, 189, 51, 23, 105, 62, 193, 11, 138, 191, 5, 121, 134, 190, 237, 4, 133, 191, 203, 177, 45, 62, 219, 88, 127, 62, 204, 44, 14, 61, 249, 122, 162, 60, 226, 255, 6, 62, 179, 2, 89, 62, 83, 82, 27, 62, 222, 40, 153, 60, 37, 198, 78, 191, 189, 95, 246, 61, 112, 32, 9, 189, 155, 173, 99, 191, 152, 82, 9, 62, 34, 1, 16, 191, 144, 229, 157, 187, 173, 136, 92, 190, 2, 126, 124, 61, 154, 94, 86, 190, 96, 126, 31, 191, 94, 1, 102, 189, 254, 229, 147, 62, 48, 203, 117, 191, 13, 45, 62, 190, 40, 64, 202, 62, 220, 1, 114, 189, 232, 138, 60, 63, 81, 16, 154, 190, 208, 75, 62, 190, 131, 153, 40, 62, 231, 125, 147, 190, 27, 127, 31, 190, 215, 246, 246, 189, 63, 70, 30, 190, 77, 2, 2, 62, 243, 132, 35, 190, 250, 93, 66, 189, 128, 27, 194, 189, 25, 168, 31, 62, 110, 209, 3, 61, 201, 91, 199, 59, 230, 191, 119, 61, 96, 187, 31, 62, 65, 31, 170, 61, 234, 122, 217, 189, 5, 10, 174, 61, 14, 105, 6, 190, 116, 167, 41, 190, 20, 64, 174, 189, 136, 229, 93, 189, 160, 52, 210, 189, 210, 228, 1, 190, 126, 117, 51, 190, 171, 185, 179, 188, 200, 203, 39, 60, 138, 139, 169, 189, 130, 64, 22, 190, 107, 169, 150, 189, 30, 15, 122, 189, 84, 236, 55, 189, 140, 122, 25, 62, 155, 134, 13, 188, 90, 126, 253, 61, 105, 137, 17, 190, 182, 181, 130, 191, 125, 4, 176, 61, 134, 92, 84, 62, 97, 118, 211, 61, 20, 42, 177, 187, 79, 103, 237, 62, 234, 12, 232, 61, 177, 168, 151, 190, 91, 29, 157, 190, 4, 17, 138, 190, 213, 27, 95, 60, 179, 4, 25, 61, 13, 1, 19, 191, 183, 64, 110, 190, 79, 106, 35, 191, 230, 55, 173, 61, 113, 197, 36, 189, 152, 206, 135, 62, 126, 91, 71, 190, 184, 122, 142, 190, 163, 171, 178, 189, 193, 186, 26, 62, 243, 79, 73, 189, 28, 228, 103, 190, 35, 243, 100, 63, 145, 219, 27, 62, 204, 235, 98, 63, 180, 122, 126, 190, 111, 151, 78, 190, 198, 172, 165, 62, 245, 174, 7, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 202, 48, 62, 141, 219, 21, 59, 168, 149, 131, 61, 150, 5, 140, 62, 249, 34, 132, 62, 42, 210, 11, 62, 201, 187, 150, 61, 72, 211, 241, 61, 156, 133, 131, 58, 206, 54, 217, 61, 17, 106, 162, 62, 177, 80, 191, 189, 174, 73, 153, 61, 62, 27, 30, 61, 245, 190, 32, 190, 123, 92, 240, 188, 111, 150, 220, 62, 151, 20, 146, 62, 85, 113, 136, 189, 69, 234, 63, 190, 188, 197, 11, 62, 221, 155, 14, 62, 199, 39, 50, 190, 8, 52, 92, 61, 251, 164, 179, 62, 45, 242, 29, 190, 157, 214, 118, 189, 222, 133, 69, 61, 118, 152, 21, 62, 106, 246, 112, 62, 109, 242, 54, 190, 25, 135, 0, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 78, 44, 191, 70, 189, 171, 190, 16, 121, 36, 63, 186, 21, 25, 190, 171, 224, 28, 191, 134, 19, 183, 61, 193, 157, 2, 63, 207, 109, 138, 188, 33, 30, 84, 190, 243, 252, 77, 63, 244, 64, 7, 191, 163, 103, 55, 189, 53, 196, 191, 62, 197, 57, 252, 61, 79, 189, 151, 190, 143, 94, 76, 63, 34, 112, 160, 62, 5, 215, 0, 189, 250, 251, 124, 191, 206, 169, 74, 188, 136, 123, 64, 191, 23, 201, 11, 63, 255, 73, 42, 190, 141, 111, 174, 61, 242, 54, 193, 187, 197, 233, 38, 63, 55, 147, 3, 63, 188, 219, 33, 190, 28, 197, 185, 62, 82, 149, 4, 63, 189, 46, 181, 61, 16, 157, 30, 63, 152, 255, 88, 62, 168, 43, 5, 190, 39, 19, 249, 190, 125, 46, 48, 190, 194, 206, 37, 190, 63, 40, 68, 59, 22, 191, 52, 63, 140, 114, 129, 61, 245, 86, 213, 60, 159, 15, 181, 60, 134, 115, 97, 190, 253, 43, 117, 189, 94, 235, 30, 60, 78, 245, 240, 60, 171, 173, 229, 187, 248, 232, 244, 62, 12, 33, 151, 190, 212, 92, 106, 190, 20, 189, 95, 61, 247, 183, 125, 61, 154, 195, 35, 63, 232, 148, 53, 190, 226, 100, 143, 189, 221, 172, 83, 61, 6, 74, 39, 190, 163, 215, 201, 62, 95, 81, 45, 63, 95, 217, 40, 61, 206, 87, 251, 190, 107, 84, 166, 189, 186, 117, 225, 189, 166, 197, 13, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 36, 0, 62, 206, 79, 191, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {209, 148, 143, 63, 150, 85, 101, 191, 34, 119, 180, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {234, 32, 75, 62, 174, 249, 135, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0018/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}