// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {188, 220, 40, 63, 136, 213, 157, 191, 231, 7, 85, 190, 20, 41, 170, 62, 238, 102, 129, 191, 107, 98, 125, 190, 216, 4, 120, 190, 200, 170, 169, 62, 170, 125, 143, 62, 18, 114, 182, 190, 91, 25, 180, 62, 34, 190, 201, 61, 193, 27, 250, 62, 46, 222, 113, 190, 126, 59, 33, 191, 216, 37, 137, 62, 233, 96, 147, 190, 124, 203, 239, 62, 40, 207, 1, 191, 114, 11, 72, 62, 88, 60, 13, 63, 218, 205, 13, 191, 196, 172, 186, 62, 12, 157, 139, 190, 96, 242, 94, 189, 223, 43, 5, 62, 56, 141, 171, 62, 235, 44, 1, 191, 215, 146, 61, 189, 69, 104, 225, 62, 190, 149, 161, 190, 228, 202, 133, 190, 74, 36, 20, 63, 169, 141, 157, 62, 135, 59, 76, 63, 168, 113, 179, 188, 212, 28, 168, 62, 96, 82, 117, 63, 41, 91, 7, 63, 69, 170, 16, 63, 118, 66, 137, 190, 197, 98, 48, 63, 235, 54, 26, 63, 182, 99, 52, 63, 211, 34, 139, 189, 177, 52, 15, 63, 97, 106, 157, 62, 65, 251, 183, 62, 125, 152, 163, 61, 191, 235, 153, 190, 252, 96, 42, 191, 244, 167, 49, 60, 73, 204, 67, 191, 27, 182, 107, 62, 207, 196, 176, 190, 94, 125, 23, 63, 204, 243, 159, 61, 42, 189, 55, 62, 70, 169, 245, 190, 98, 177, 169, 189, 111, 8, 174, 190, 204, 208, 139, 62, 104, 157, 51, 63, 144, 208, 140, 188, 233, 88, 3, 191, 65, 157, 200, 190, 145, 0, 82, 63, 221, 199, 60, 63, 210, 244, 159, 61, 197, 7, 94, 190, 63, 16, 157, 191, 108, 86, 236, 190, 215, 242, 187, 62, 210, 164, 43, 191, 172, 98, 18, 190, 212, 166, 221, 190, 208, 42, 106, 62, 193, 250, 127, 191, 77, 197, 153, 62, 14, 193, 200, 62, 105, 32, 21, 63, 8, 117, 253, 189, 113, 213, 93, 63, 56, 202, 182, 190, 185, 175, 155, 190, 91, 56, 50, 62, 124, 108, 145, 62, 50, 11, 56, 190, 31, 69, 133, 189, 64, 19, 203, 62, 69, 180, 194, 62, 165, 141, 53, 191, 72, 227, 158, 190, 81, 141, 13, 63, 71, 238, 240, 189, 76, 168, 148, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 53, 145, 190, 252, 182, 28, 63, 90, 56, 22, 191, 211, 14, 235, 62, 90, 43, 182, 187, 130, 194, 161, 62, 247, 133, 202, 190, 136, 118, 139, 61, 207, 162, 190, 59, 174, 212, 11, 63, 187, 148, 70, 190, 195, 86, 249, 188, 220, 53, 11, 190, 221, 232, 51, 190, 207, 213, 160, 62, 239, 221, 201, 190, 134, 91, 157, 62, 118, 34, 147, 61, 79, 7, 9, 63, 131, 85, 222, 62, 164, 63, 44, 190, 118, 138, 166, 190, 222, 214, 252, 62, 212, 111, 40, 62, 6, 141, 253, 190, 128, 88, 97, 190, 39, 33, 205, 62, 207, 77, 92, 61, 185, 80, 144, 62, 17, 115, 70, 190, 99, 8, 61, 190, 47, 117, 66, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 121, 100, 190, 25, 53, 223, 190, 1, 87, 203, 189, 116, 196, 24, 62, 252, 85, 61, 190, 246, 84, 16, 62, 215, 248, 247, 61, 52, 178, 128, 62, 137, 208, 239, 61, 2, 42, 130, 62, 211, 30, 95, 189, 197, 143, 13, 191, 77, 234, 193, 188, 12, 219, 205, 190, 36, 212, 56, 191, 168, 211, 157, 190, 189, 179, 215, 190, 127, 197, 164, 62, 234, 120, 81, 62, 81, 41, 12, 190, 125, 112, 76, 62, 219, 38, 5, 188, 98, 3, 226, 190, 84, 91, 96, 191, 113, 224, 57, 61, 63, 153, 24, 191, 196, 189, 64, 61, 3, 220, 238, 59, 87, 236, 59, 62, 69, 26, 71, 61, 186, 78, 138, 190, 58, 143, 183, 190, 5, 26, 244, 190, 217, 74, 92, 61, 113, 110, 103, 61, 12, 213, 9, 190, 88, 54, 102, 189, 78, 28, 32, 62, 139, 171, 94, 189, 95, 205, 215, 61, 203, 139, 164, 60, 14, 119, 198, 61, 20, 114, 162, 189, 61, 55, 211, 61, 162, 85, 199, 60, 46, 55, 109, 62, 186, 146, 154, 62, 7, 153, 19, 189, 71, 248, 99, 61, 189, 0, 46, 62, 246, 19, 118, 60, 143, 77, 27, 62, 90, 215, 223, 61, 97, 160, 153, 60, 68, 37, 137, 62, 30, 246, 143, 60, 134, 209, 192, 190, 68, 84, 65, 62, 154, 55, 56, 61, 116, 137, 100, 190, 95, 108, 193, 188, 216, 41, 21, 61, 102, 177, 140, 190, 248, 27, 59, 62, 216, 216, 207, 190, 60, 20, 128, 62, 114, 50, 82, 62, 232, 7, 196, 61, 216, 95, 90, 190, 93, 85, 234, 190, 35, 244, 46, 191, 106, 96, 56, 62, 102, 130, 218, 190, 54, 173, 67, 62, 159, 250, 212, 190, 97, 156, 171, 60, 70, 149, 142, 189, 95, 23, 205, 189, 118, 118, 131, 58, 156, 140, 173, 61, 236, 179, 95, 62, 15, 220, 55, 62, 208, 58, 177, 61, 124, 124, 219, 61, 36, 45, 1, 191, 200, 215, 209, 190, 114, 87, 252, 61, 194, 109, 122, 62, 130, 152, 198, 190, 173, 161, 24, 62, 32, 107, 18, 191, 26, 214, 33, 190, 65, 124, 83, 62, 64, 26, 181, 189, 185, 100, 201, 190, 228, 108, 225, 190, 58, 7, 204, 62, 113, 159, 255, 60, 212, 251, 81, 189, 221, 47, 30, 190, 40, 36, 138, 62, 237, 148, 99, 62, 131, 144, 119, 189, 72, 150, 42, 190, 111, 156, 66, 62, 206, 134, 59, 189, 140, 245, 213, 60, 201, 143, 120, 190, 16, 15, 139, 190, 214, 253, 80, 190, 106, 240, 57, 190, 165, 252, 165, 190, 107, 236, 121, 60, 93, 34, 110, 62, 150, 76, 15, 62, 41, 168, 8, 62, 150, 129, 246, 61, 211, 46, 183, 61, 88, 244, 2, 190, 19, 75, 149, 190, 92, 61, 163, 58, 197, 12, 40, 190, 45, 219, 36, 62, 44, 26, 190, 61, 179, 27, 158, 61, 123, 189, 98, 190, 76, 183, 255, 61, 73, 181, 249, 189, 183, 29, 146, 190, 253, 192, 94, 61, 211, 145, 0, 188, 11, 199, 23, 61, 114, 245, 148, 59, 90, 108, 177, 189, 10, 39, 240, 189, 214, 102, 31, 190, 165, 147, 59, 187, 194, 22, 84, 61, 62, 242, 6, 190, 139, 35, 6, 189, 159, 191, 106, 60, 191, 74, 194, 61, 240, 244, 111, 62, 101, 91, 160, 62, 30, 241, 194, 61, 207, 152, 166, 190, 41, 22, 40, 189, 102, 168, 74, 59, 215, 27, 62, 190, 247, 102, 37, 190, 35, 102, 108, 62, 45, 228, 114, 62, 224, 195, 52, 189, 202, 89, 239, 60, 32, 44, 26, 62, 135, 200, 170, 190, 65, 163, 229, 61, 12, 98, 15, 61, 216, 177, 104, 190, 107, 28, 192, 62, 155, 208, 223, 190, 116, 162, 77, 190, 102, 52, 189, 61, 22, 29, 102, 60, 228, 49, 82, 188, 54, 16, 97, 189, 226, 240, 7, 189, 189, 182, 150, 62, 3, 224, 136, 190, 63, 242, 156, 190, 202, 18, 104, 190, 239, 71, 50, 62, 16, 50, 143, 60, 243, 211, 124, 60, 151, 253, 84, 62, 73, 130, 125, 60, 219, 77, 27, 62, 227, 184, 181, 190, 91, 98, 131, 62, 115, 151, 243, 61, 86, 190, 235, 188, 221, 100, 121, 190, 151, 141, 5, 62, 218, 201, 178, 61, 12, 0, 75, 190, 115, 199, 131, 61, 209, 135, 53, 190, 147, 36, 247, 189, 253, 103, 201, 189, 128, 34, 29, 189, 74, 113, 173, 190, 0, 58, 81, 61, 147, 60, 149, 62, 189, 17, 57, 62, 193, 169, 180, 61, 181, 6, 18, 191, 123, 52, 165, 189, 144, 199, 166, 60, 104, 43, 185, 61, 52, 105, 201, 60, 132, 63, 239, 61, 31, 2, 82, 190, 82, 60, 100, 190, 66, 144, 197, 190, 142, 221, 181, 190, 221, 20, 37, 61, 252, 193, 211, 61, 159, 150, 141, 190, 187, 133, 104, 60, 135, 156, 18, 62, 51, 12, 22, 191, 28, 26, 215, 61, 125, 204, 143, 61, 106, 43, 151, 61, 149, 182, 179, 60, 255, 59, 137, 61, 172, 0, 43, 190, 252, 84, 65, 190, 103, 19, 23, 61, 79, 189, 47, 190, 192, 188, 203, 189, 215, 100, 152, 189, 240, 157, 35, 62, 97, 74, 135, 62, 117, 45, 71, 190, 132, 0, 247, 190, 98, 131, 106, 61, 57, 243, 209, 61, 142, 100, 55, 188, 17, 161, 187, 61, 209, 130, 58, 62, 150, 64, 250, 188, 208, 31, 247, 189, 212, 79, 32, 62, 210, 208, 146, 188, 159, 153, 179, 189, 209, 117, 153, 61, 203, 149, 140, 62, 148, 33, 205, 62, 64, 14, 84, 62, 231, 226, 19, 62, 160, 232, 136, 189, 65, 47, 125, 60, 214, 63, 27, 190, 245, 8, 156, 189, 125, 242, 255, 60, 57, 10, 36, 62, 124, 232, 73, 60, 30, 222, 7, 189, 139, 194, 8, 190, 129, 228, 188, 61, 226, 85, 172, 189, 246, 21, 102, 61, 102, 195, 101, 189, 16, 170, 39, 190, 132, 213, 36, 62, 181, 216, 204, 61, 248, 239, 180, 61, 7, 15, 99, 190, 175, 89, 64, 190, 61, 73, 73, 62, 211, 105, 184, 188, 232, 80, 170, 189, 200, 231, 96, 62, 209, 123, 172, 61, 15, 201, 105, 189, 244, 204, 214, 61, 10, 219, 185, 189, 163, 178, 156, 190, 71, 182, 7, 189, 81, 166, 197, 61, 145, 128, 174, 188, 135, 208, 20, 62, 189, 60, 174, 62, 198, 87, 62, 60, 24, 184, 68, 62, 181, 216, 224, 61, 159, 89, 255, 61, 171, 210, 160, 62, 124, 3, 23, 190, 7, 65, 70, 190, 57, 215, 19, 190, 200, 112, 68, 62, 67, 252, 144, 59, 151, 227, 4, 190, 169, 179, 151, 190, 11, 254, 230, 61, 188, 243, 145, 61, 8, 191, 217, 190, 104, 30, 112, 62, 34, 205, 98, 61, 176, 1, 102, 62, 255, 142, 9, 190, 194, 66, 231, 60, 109, 103, 4, 191, 172, 110, 104, 62, 149, 176, 242, 190, 177, 13, 133, 189, 245, 4, 156, 190, 19, 250, 21, 61, 94, 18, 205, 61, 46, 127, 43, 190, 230, 245, 44, 62, 239, 111, 39, 189, 24, 34, 2, 62, 116, 49, 232, 61, 78, 236, 0, 190, 208, 241, 88, 62, 55, 159, 155, 190, 36, 173, 28, 190, 114, 205, 97, 61, 7, 200, 57, 62, 112, 58, 194, 190, 18, 135, 218, 61, 252, 219, 204, 189, 96, 125, 189, 189, 38, 127, 10, 190, 199, 44, 35, 189, 31, 158, 110, 190, 193, 130, 225, 189, 215, 206, 111, 60, 145, 244, 48, 190, 0, 214, 4, 190, 248, 94, 97, 190, 157, 163, 21, 61, 204, 100, 1, 62, 207, 83, 176, 60, 228, 88, 24, 62, 73, 217, 107, 62, 70, 188, 15, 61, 179, 14, 68, 62, 251, 72, 158, 190, 182, 145, 216, 190, 154, 125, 31, 190, 57, 98, 240, 61, 82, 202, 233, 189, 113, 47, 76, 189, 192, 72, 110, 62, 5, 199, 243, 61, 27, 134, 125, 61, 215, 21, 52, 189, 53, 156, 60, 190, 138, 77, 191, 60, 16, 226, 129, 190, 46, 57, 181, 190, 132, 53, 98, 190, 119, 122, 90, 189, 2, 56, 199, 61, 121, 132, 94, 61, 125, 9, 80, 190, 8, 231, 58, 189, 116, 193, 15, 62, 252, 138, 132, 61, 35, 137, 2, 61, 189, 201, 88, 190, 9, 40, 43, 190, 164, 237, 218, 61, 59, 9, 46, 62, 228, 162, 65, 188, 67, 107, 118, 61, 71, 233, 44, 61, 183, 222, 152, 189, 13, 76, 3, 190, 26, 42, 148, 190, 143, 240, 82, 188, 102, 41, 144, 61, 94, 140, 204, 61, 220, 2, 60, 190, 3, 229, 252, 189, 228, 118, 14, 62, 234, 53, 52, 190, 146, 81, 250, 60, 30, 42, 138, 188, 68, 121, 0, 62, 34, 106, 249, 189, 118, 205, 156, 60, 217, 123, 63, 190, 1, 234, 236, 61, 101, 41, 108, 61, 252, 101, 109, 60, 131, 160, 76, 61, 72, 204, 51, 61, 19, 128, 48, 188, 20, 193, 65, 61, 6, 168, 197, 62, 230, 71, 167, 189, 176, 18, 65, 189, 83, 184, 187, 189, 92, 209, 152, 62, 202, 169, 241, 58, 208, 104, 43, 189, 63, 228, 53, 188, 102, 54, 48, 62, 16, 191, 38, 62, 32, 174, 58, 62, 224, 119, 122, 190, 192, 217, 147, 190, 22, 139, 104, 190, 47, 138, 197, 189, 64, 68, 109, 190, 64, 169, 15, 190, 30, 203, 79, 62, 99, 8, 204, 189, 106, 37, 126, 189, 40, 94, 124, 58, 102, 123, 202, 189, 106, 23, 204, 61, 237, 205, 149, 190, 95, 46, 145, 190, 89, 15, 144, 190, 20, 34, 45, 62, 68, 28, 129, 62, 250, 240, 82, 189, 184, 41, 143, 189, 117, 208, 44, 62, 190, 216, 99, 190, 23, 64, 27, 191, 165, 146, 65, 62, 113, 71, 244, 189, 65, 15, 127, 62, 37, 75, 65, 190, 193, 205, 247, 190, 205, 224, 47, 191, 75, 185, 63, 62, 180, 126, 74, 191, 106, 202, 246, 188, 88, 7, 10, 191, 47, 87, 45, 62, 131, 183, 3, 62, 46, 82, 6, 190, 55, 5, 37, 62, 78, 118, 148, 188, 199, 23, 46, 61, 154, 255, 68, 190, 25, 213, 18, 62, 204, 186, 108, 62, 146, 176, 27, 191, 70, 104, 182, 190, 216, 225, 96, 62, 186, 252, 134, 62, 34, 236, 233, 190, 103, 222, 67, 62, 139, 128, 127, 190, 193, 111, 198, 190, 73, 124, 48, 189, 71, 23, 136, 190, 16, 13, 172, 190, 156, 116, 143, 60, 30, 190, 162, 189, 231, 215, 184, 189, 234, 173, 5, 62, 19, 207, 182, 189, 149, 137, 41, 190, 230, 38, 100, 189, 69, 230, 87, 61, 97, 50, 238, 189, 104, 48, 0, 62, 235, 83, 36, 190, 48, 249, 164, 61, 164, 69, 139, 61, 143, 100, 61, 190, 11, 86, 117, 186, 148, 128, 76, 61, 217, 209, 50, 61, 22, 48, 188, 61, 165, 214, 31, 189, 68, 195, 82, 190, 52, 113, 10, 62, 120, 182, 229, 60, 207, 157, 202, 59, 196, 144, 99, 188, 27, 71, 46, 190, 190, 216, 33, 190, 166, 229, 48, 190, 60, 132, 7, 62, 125, 30, 237, 189, 62, 144, 203, 189, 248, 41, 31, 59, 5, 125, 35, 62, 103, 114, 79, 190, 197, 107, 220, 60, 55, 149, 21, 62, 192, 250, 73, 61, 159, 231, 105, 61, 243, 226, 172, 189, 52, 66, 230, 61, 135, 229, 35, 62, 83, 48, 252, 186, 201, 134, 100, 62, 106, 78, 225, 60, 152, 57, 46, 62, 24, 244, 159, 190, 115, 48, 182, 189, 151, 41, 157, 190, 195, 150, 76, 190, 77, 233, 152, 190, 24, 124, 86, 190, 219, 90, 48, 62, 111, 7, 12, 189, 0, 6, 24, 62, 135, 39, 152, 189, 211, 33, 219, 189, 149, 134, 212, 61, 173, 193, 190, 190, 6, 35, 135, 190, 61, 198, 38, 191, 121, 54, 64, 62, 104, 140, 22, 63, 101, 32, 58, 62, 104, 91, 180, 61, 58, 225, 62, 62, 30, 224, 8, 190, 175, 128, 249, 190, 188, 34, 237, 189, 28, 192, 68, 190, 125, 188, 155, 61, 173, 19, 119, 188, 98, 254, 148, 189, 224, 51, 120, 61, 175, 203, 72, 188, 128, 60, 210, 189, 194, 190, 252, 189, 145, 241, 79, 190, 191, 38, 68, 62, 173, 200, 159, 61, 27, 248, 234, 61, 42, 164, 17, 62, 120, 6, 143, 189, 147, 159, 22, 62, 103, 92, 111, 190, 62, 33, 151, 58, 92, 150, 45, 190, 176, 108, 158, 188, 8, 190, 38, 190, 90, 27, 246, 61, 235, 8, 3, 190, 114, 233, 134, 190, 173, 225, 62, 62, 62, 199, 174, 61, 111, 209, 4, 62, 39, 80, 50, 61, 1, 152, 19, 61, 138, 80, 160, 190, 144, 102, 7, 190, 229, 241, 158, 190, 144, 212, 6, 190, 142, 218, 192, 61, 217, 77, 212, 188, 103, 225, 241, 60, 152, 92, 4, 57, 62, 161, 245, 60, 162, 67, 171, 189, 220, 165, 152, 189, 26, 135, 4, 190, 70, 191, 226, 60, 173, 161, 71, 189, 98, 33, 131, 61, 138, 224, 187, 61, 193, 8, 142, 62, 129, 44, 132, 62, 174, 88, 2, 62, 227, 215, 189, 190, 85, 247, 64, 61, 162, 38, 110, 61, 205, 33, 178, 188, 233, 162, 132, 62, 172, 24, 93, 62, 178, 228, 28, 190, 12, 49, 156, 189, 31, 147, 44, 62, 220, 171, 90, 189, 154, 138, 125, 61, 132, 104, 2, 187, 84, 204, 24, 62, 252, 43, 184, 189, 216, 223, 61, 62, 56, 43, 167, 189, 153, 145, 30, 62, 95, 221, 188, 61, 211, 140, 120, 61, 170, 190, 188, 61, 162, 133, 162, 189, 75, 64, 34, 62, 76, 56, 30, 190, 203, 85, 18, 61, 29, 76, 128, 60, 47, 207, 10, 190, 154, 115, 202, 188, 81, 120, 250, 61, 36, 233, 76, 61, 117, 217, 123, 61, 216, 157, 58, 189, 246, 126, 49, 62, 239, 148, 210, 188, 43, 197, 17, 62, 241, 36, 117, 61, 108, 0, 253, 61, 90, 119, 192, 189, 49, 149, 140, 62, 244, 197, 104, 62, 51, 73, 164, 188, 45, 177, 242, 61, 181, 108, 146, 61, 236, 92, 149, 190, 6, 159, 189, 189, 189, 202, 200, 61, 14, 79, 26, 190, 18, 241, 104, 188, 58, 121, 33, 61, 239, 7, 42, 190, 193, 76, 174, 188, 66, 126, 248, 189, 227, 63, 156, 189, 89, 224, 104, 61, 164, 203, 22, 62, 238, 163, 48, 62, 204, 225, 126, 61, 184, 243, 64, 190, 17, 248, 143, 61, 71, 110, 227, 189, 170, 157, 242, 188, 157, 129, 168, 61, 157, 94, 51, 190, 240, 99, 146, 60, 4, 129, 126, 61, 125, 213, 223, 189, 197, 38, 197, 189, 48, 218, 115, 61, 135, 86, 198, 61, 218, 172, 169, 189, 185, 96, 49, 190, 143, 109, 198, 188, 182, 106, 14, 61, 226, 148, 71, 189, 142, 13, 251, 189, 129, 35, 195, 188, 61, 87, 23, 190, 72, 176, 205, 189, 80, 149, 65, 60, 51, 214, 2, 190, 174, 70, 105, 62, 61, 236, 17, 62, 182, 252, 157, 189, 35, 20, 187, 189, 228, 2, 12, 62, 214, 229, 91, 62, 228, 90, 197, 190, 102, 151, 55, 62, 184, 207, 249, 188, 39, 18, 60, 190, 236, 62, 198, 189, 118, 92, 240, 60, 96, 242, 129, 61, 167, 83, 34, 61, 108, 150, 136, 62, 246, 23, 73, 190, 4, 109, 71, 62, 159, 224, 100, 61, 170, 17, 4, 190, 92, 34, 170, 187, 232, 171, 14, 190, 50, 136, 32, 62, 14, 71, 53, 187, 233, 199, 44, 61, 255, 120, 235, 189, 100, 153, 170, 61, 185, 115, 151, 189, 110, 214, 87, 62, 200, 10, 167, 189, 158, 24, 175, 190, 93, 24, 145, 61, 150, 169, 167, 62, 247, 28, 79, 62, 107, 178, 129, 186, 55, 12, 114, 189, 115, 127, 201, 189, 23, 173, 3, 62, 43, 151, 231, 61, 158, 16, 164, 61, 182, 16, 137, 189, 194, 231, 227, 189, 192, 182, 33, 190, 247, 92, 216, 189, 115, 156, 188, 189, 63, 132, 174, 190, 94, 190, 178, 61, 45, 211, 15, 190, 62, 251, 24, 61, 109, 118, 35, 61, 108, 101, 110, 62, 17, 78, 135, 61, 114, 127, 130, 62, 226, 191, 3, 62, 208, 181, 128, 62, 210, 0, 120, 60, 72, 67, 104, 61, 60, 103, 6, 190, 40, 195, 63, 62, 9, 19, 105, 187, 84, 201, 203, 187, 80, 133, 234, 60, 219, 76, 47, 61, 225, 90, 245, 60, 112, 29, 24, 61, 73, 157, 142, 62, 229, 203, 166, 61, 179, 238, 204, 189, 80, 250, 245, 59, 172, 130, 137, 62, 93, 46, 25, 62, 155, 210, 4, 62, 6, 180, 145, 190, 208, 208, 153, 61, 191, 51, 75, 62, 252, 228, 146, 188, 36, 29, 133, 190, 66, 255, 220, 189, 149, 101, 93, 190, 124, 86, 108, 189, 196, 51, 238, 190, 54, 247, 241, 189, 52, 44, 177, 62, 211, 116, 233, 60, 178, 219, 239, 188, 180, 152, 19, 62, 241, 176, 153, 61, 233, 109, 56, 188, 71, 61, 29, 190, 3, 149, 100, 190, 220, 53, 167, 190, 91, 51, 37, 190, 156, 83, 169, 62, 130, 208, 6, 61, 117, 70, 2, 190, 19, 235, 48, 62, 15, 57, 171, 189, 60, 53, 150, 189, 11, 135, 26, 191, 90, 88, 100, 61, 102, 249, 144, 62, 193, 106, 206, 61, 142, 24, 78, 190, 44, 89, 201, 61, 45, 78, 62, 62, 119, 236, 40, 190, 76, 205, 140, 62, 254, 40, 77, 62, 58, 88, 187, 190, 40, 62, 6, 190, 151, 249, 86, 190, 81, 250, 36, 191, 71, 28, 26, 190, 188, 174, 189, 190, 202, 245, 178, 190, 254, 13, 180, 62, 242, 130, 176, 190, 122, 150, 136, 62, 241, 238, 3, 190, 116, 143, 22, 190, 26, 59, 2, 191, 252, 48, 95, 189, 156, 104, 4, 191, 158, 163, 245, 189, 164, 77, 187, 61, 71, 47, 240, 60, 225, 225, 125, 190, 254, 223, 12, 190, 0, 202, 96, 190, 32, 111, 42, 61, 236, 46, 240, 61, 217, 173, 42, 190, 160, 179, 178, 190, 172, 104, 63, 62, 239, 231, 107, 190, 100, 119, 99, 60, 62, 0, 194, 190, 226, 11, 42, 61, 115, 82, 201, 189, 226, 135, 0, 62, 116, 246, 227, 189, 38, 44, 162, 61, 12, 173, 204, 61, 218, 45, 54, 62, 208, 226, 253, 61, 140, 89, 186, 59, 197, 94, 53, 190, 110, 22, 115, 189, 97, 44, 11, 190, 116, 63, 37, 62, 94, 89, 50, 62, 103, 45, 48, 190, 204, 220, 50, 189, 160, 81, 74, 62, 139, 2, 217, 189, 112, 64, 12, 190, 188, 202, 4, 189, 225, 183, 105, 190, 120, 88, 207, 189, 10, 128, 27, 62, 10, 26, 18, 190, 107, 153, 240, 59, 252, 23, 123, 60, 20, 205, 39, 190, 146, 64, 65, 61, 239, 31, 92, 189, 74, 112, 199, 61, 55, 124, 211, 61, 116, 118, 254, 188, 182, 192, 8, 62, 189, 145, 51, 190, 58, 122, 133, 189, 150, 15, 164, 189, 138, 141, 41, 189, 78, 149, 146, 61, 103, 154, 28, 62, 30, 109, 244, 59, 99, 152, 18, 190, 210, 80, 25, 190, 218, 217, 19, 190, 25, 217, 203, 61, 181, 223, 1, 190, 167, 132, 107, 189, 14, 196, 8, 190, 237, 119, 31, 189, 23, 6, 174, 61, 233, 210, 6, 62, 221, 132, 117, 188, 102, 191, 2, 190, 183, 219, 197, 61, 197, 179, 13, 190, 125, 187, 197, 189, 209, 223, 226, 61, 103, 181, 91, 62, 127, 51, 241, 188, 160, 207, 10, 190, 200, 255, 191, 61, 145, 3, 18, 190, 20, 180, 214, 61, 114, 194, 2, 62, 155, 247, 51, 61, 66, 15, 30, 61, 139, 195, 239, 61, 206, 10, 201, 61, 154, 126, 98, 190, 198, 122, 15, 189, 98, 31, 177, 189, 44, 208, 53, 190, 54, 5, 158, 190, 203, 53, 252, 190, 38, 53, 150, 62, 77, 237, 0, 62, 33, 250, 87, 61, 30, 46, 173, 189, 46, 104, 107, 190, 114, 111, 130, 190, 254, 19, 15, 191, 237, 251, 96, 190, 158, 49, 29, 191, 138, 126, 70, 188, 234, 55, 31, 62, 97, 100, 76, 61, 6, 213, 144, 190, 243, 70, 35, 61, 237, 196, 10, 190, 145, 223, 133, 61, 33, 40, 43, 62, 142, 105, 29, 61, 226, 196, 22, 62, 25, 71, 54, 189, 44, 72, 158, 60, 155, 251, 20, 62, 82, 81, 23, 189, 3, 236, 46, 190, 63, 64, 7, 190, 20, 39, 216, 61, 99, 81, 104, 61, 22, 195, 24, 190, 2, 38, 206, 60, 96, 111, 196, 189, 198, 76, 248, 189, 52, 164, 215, 61, 148, 131, 69, 189, 215, 154, 6, 62, 58, 0, 199, 189, 39, 29, 1, 61, 223, 197, 61, 190, 102, 8, 53, 62, 225, 77, 54, 190, 142, 108, 116, 190, 220, 6, 71, 189, 92, 255, 165, 189, 68, 47, 156, 61, 212, 107, 216, 61, 88, 162, 233, 61, 243, 76, 136, 189, 84, 138, 169, 189, 25, 9, 65, 62, 170, 250, 127, 62, 134, 236, 227, 188, 8, 65, 216, 190, 42, 6, 169, 61, 9, 179, 73, 62, 213, 153, 46, 190, 160, 141, 235, 190, 13, 74, 226, 189, 90, 150, 130, 190, 213, 221, 9, 191, 8, 250, 169, 190, 181, 52, 184, 190, 235, 199, 155, 61, 149, 158, 205, 62, 83, 138, 10, 190, 150, 111, 36, 189, 48, 198, 5, 62, 139, 27, 42, 190, 161, 179, 175, 61, 252, 185, 68, 190, 94, 226, 224, 189, 137, 124, 140, 62, 83, 12, 79, 189, 209, 186, 246, 190, 205, 49, 162, 190, 1, 92, 103, 58, 61, 232, 111, 190, 178, 175, 113, 190, 29, 154, 10, 190, 67, 186, 62, 61, 201, 119, 130, 62, 235, 107, 21, 62, 14, 176, 211, 189, 234, 210, 24, 61, 91, 66, 33, 190, 184, 169, 220, 189, 177, 42, 12, 190, 208, 167, 11, 190, 223, 131, 112, 189, 134, 66, 235, 188, 242, 34, 165, 61, 146, 183, 11, 190, 37, 46, 130, 61, 76, 23, 158, 189, 139, 192, 14, 62, 93, 51, 67, 190, 44, 33, 192, 189, 245, 118, 145, 189, 47, 224, 125, 189, 6, 204, 165, 61, 106, 24, 218, 189, 152, 46, 69, 190, 133, 108, 110, 55, 110, 162, 194, 61, 9, 134, 177, 188, 238, 38, 42, 62, 143, 170, 147, 61, 83, 160, 228, 189, 42, 79, 40, 187, 42, 223, 244, 189, 11, 162, 33, 190, 203, 233, 12, 62, 209, 200, 112, 60, 29, 219, 236, 190, 90, 67, 77, 189, 35, 199, 128, 190, 222, 7, 207, 189, 94, 157, 132, 190, 48, 154, 247, 189, 131, 186, 252, 190, 176, 120, 122, 62, 154, 215, 166, 190, 128, 74, 88, 61, 130, 153, 103, 190, 19, 190, 158, 62, 210, 130, 134, 189, 74, 20, 93, 62, 196, 185, 230, 62, 148, 81, 2, 61, 27, 71, 86, 62, 104, 67, 184, 61, 59, 55, 17, 61, 225, 4, 151, 61, 165, 166, 149, 190, 240, 252, 211, 189, 229, 157, 215, 62, 216, 247, 129, 59, 139, 72, 150, 190, 64, 62, 143, 62, 125, 137, 198, 60, 66, 13, 52, 190, 149, 248, 32, 190, 92, 177, 213, 60, 99, 153, 155, 190, 198, 8, 117, 62, 7, 88, 30, 191, 43, 197, 72, 189, 240, 241, 249, 61, 155, 116, 227, 59, 79, 79, 16, 190, 132, 170, 26, 60, 229, 46, 81, 190, 18, 71, 177, 61, 248, 0, 110, 189, 60, 113, 194, 61, 28, 188, 36, 190, 75, 231, 5, 62, 2, 151, 58, 62, 209, 210, 128, 61, 71, 177, 153, 62, 203, 95, 86, 62, 92, 8, 128, 62, 229, 136, 147, 189, 11, 216, 255, 189, 148, 111, 3, 190, 52, 22, 85, 190, 105, 221, 174, 60, 10, 182, 121, 62, 63, 240, 21, 189, 204, 53, 9, 189, 46, 172, 169, 62, 80, 176, 61, 61, 101, 122, 140, 190, 59, 242, 70, 189, 91, 117, 42, 62, 112, 155, 60, 190, 45, 52, 124, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 144, 68, 62, 171, 4, 87, 62, 254, 99, 204, 60, 118, 63, 46, 62, 138, 240, 156, 61, 172, 63, 238, 189, 183, 112, 132, 62, 128, 192, 99, 190, 180, 165, 218, 61, 175, 175, 85, 62, 151, 138, 200, 61, 180, 109, 142, 61, 223, 217, 138, 62, 143, 232, 176, 62, 19, 55, 88, 61, 231, 203, 240, 61, 48, 185, 38, 61, 127, 218, 141, 189, 14, 73, 236, 187, 144, 186, 115, 61, 115, 34, 243, 188, 228, 6, 239, 189, 65, 156, 237, 61, 212, 138, 118, 188, 34, 99, 76, 190, 107, 197, 52, 190, 1, 179, 131, 62, 191, 115, 106, 62, 149, 13, 143, 61, 65, 110, 20, 61, 29, 55, 94, 62, 60, 40, 124, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 208, 251, 62, 141, 67, 11, 190, 44, 229, 46, 191, 251, 110, 132, 62, 253, 82, 95, 190, 157, 228, 151, 62, 213, 48, 218, 62, 97, 207, 48, 190, 192, 64, 29, 62, 212, 201, 176, 190, 48, 56, 188, 62, 206, 46, 149, 61, 78, 61, 226, 62, 141, 248, 70, 191, 61, 7, 174, 188, 26, 74, 162, 62, 187, 247, 4, 62, 53, 19, 100, 190, 233, 153, 130, 189, 88, 119, 186, 61, 72, 128, 131, 62, 214, 119, 73, 62, 166, 75, 128, 62, 39, 163, 20, 63, 199, 176, 146, 190, 59, 45, 201, 189, 245, 174, 11, 63, 31, 238, 174, 186, 116, 155, 247, 62, 23, 140, 250, 189, 210, 142, 254, 190, 212, 82, 148, 190, 199, 93, 94, 61, 11, 208, 116, 190, 208, 52, 192, 189, 2, 64, 88, 61, 120, 160, 71, 190, 20, 128, 103, 189, 3, 165, 194, 189, 13, 201, 82, 62, 66, 60, 136, 190, 101, 207, 93, 190, 245, 98, 42, 61, 8, 236, 95, 189, 243, 205, 57, 61, 39, 22, 219, 61, 164, 232, 206, 61, 163, 231, 83, 190, 16, 35, 48, 62, 59, 68, 6, 62, 89, 31, 196, 189, 148, 245, 116, 188, 193, 114, 133, 61, 49, 44, 23, 61, 112, 193, 62, 62, 165, 148, 58, 190, 20, 40, 133, 62, 54, 30, 3, 62, 50, 244, 241, 60, 39, 193, 200, 189, 244, 220, 155, 190, 239, 22, 237, 61, 35, 208, 238, 189, 184, 82, 194, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 13, 91, 189, 130, 180, 26, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {61, 180, 98, 191, 250, 158, 168, 62, 174, 55, 150, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {104, 106, 13, 64, 201, 171, 204, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0089/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}