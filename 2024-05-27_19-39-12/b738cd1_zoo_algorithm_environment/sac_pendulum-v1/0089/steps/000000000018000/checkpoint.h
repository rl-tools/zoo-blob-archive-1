// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 75, 71, 63, 110, 148, 152, 191, 172, 10, 170, 190, 122, 75, 154, 62, 234, 99, 193, 191, 144, 78, 138, 190, 103, 127, 40, 60, 193, 220, 49, 63, 173, 31, 27, 62, 79, 73, 3, 191, 175, 53, 20, 63, 108, 149, 251, 59, 207, 96, 9, 63, 74, 39, 147, 190, 94, 102, 19, 191, 232, 159, 80, 62, 234, 3, 204, 190, 190, 24, 198, 62, 112, 136, 247, 189, 45, 172, 185, 63, 56, 188, 87, 62, 65, 191, 64, 191, 112, 97, 137, 189, 176, 0, 156, 190, 84, 199, 85, 189, 100, 86, 89, 63, 94, 252, 4, 62, 180, 118, 6, 191, 226, 35, 18, 62, 250, 79, 176, 62, 193, 128, 161, 188, 13, 93, 59, 62, 143, 202, 7, 63, 238, 106, 33, 62, 82, 234, 96, 63, 165, 97, 162, 190, 172, 14, 205, 62, 98, 10, 203, 63, 127, 28, 235, 62, 89, 41, 7, 63, 137, 211, 109, 190, 182, 176, 30, 63, 23, 100, 55, 62, 214, 2, 62, 63, 140, 86, 217, 190, 193, 227, 83, 63, 82, 200, 53, 63, 100, 172, 121, 62, 90, 167, 26, 62, 92, 158, 138, 191, 233, 172, 185, 190, 213, 61, 133, 62, 154, 145, 46, 191, 133, 192, 137, 62, 93, 164, 201, 190, 197, 241, 133, 63, 144, 205, 49, 190, 182, 181, 227, 189, 127, 126, 111, 191, 44, 253, 234, 189, 44, 198, 2, 191, 243, 101, 90, 63, 82, 238, 247, 62, 223, 77, 23, 190, 3, 143, 78, 191, 3, 2, 145, 190, 145, 46, 82, 63, 197, 87, 62, 63, 181, 76, 240, 61, 27, 206, 190, 190, 83, 188, 244, 191, 192, 194, 139, 190, 231, 103, 67, 63, 185, 199, 25, 191, 89, 173, 72, 190, 40, 161, 24, 191, 145, 241, 195, 189, 217, 44, 118, 191, 196, 6, 154, 190, 209, 71, 103, 63, 127, 102, 238, 62, 111, 240, 18, 189, 230, 229, 39, 63, 104, 220, 236, 190, 32, 74, 73, 191, 176, 245, 89, 61, 156, 46, 153, 62, 243, 225, 2, 190, 71, 170, 150, 190, 227, 225, 200, 62, 160, 39, 5, 63, 193, 159, 116, 191, 226, 13, 138, 190, 7, 128, 30, 63, 39, 92, 123, 190, 169, 130, 131, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {133, 145, 172, 190, 176, 208, 141, 62, 231, 109, 95, 191, 21, 58, 192, 62, 163, 55, 108, 190, 149, 113, 206, 61, 30, 25, 232, 190, 200, 148, 173, 190, 26, 139, 78, 190, 216, 91, 18, 63, 67, 111, 106, 190, 237, 89, 130, 190, 72, 71, 159, 189, 241, 237, 199, 190, 79, 91, 0, 63, 157, 142, 237, 190, 171, 142, 158, 61, 253, 229, 139, 61, 183, 44, 189, 62, 204, 11, 149, 62, 40, 247, 177, 61, 197, 5, 172, 190, 134, 116, 238, 61, 241, 12, 157, 190, 203, 181, 13, 191, 138, 250, 138, 190, 217, 173, 162, 62, 83, 146, 133, 190, 247, 117, 44, 63, 105, 177, 154, 190, 33, 212, 64, 190, 161, 212, 52, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 206, 208, 190, 58, 105, 200, 59, 205, 201, 200, 190, 102, 247, 123, 62, 249, 216, 19, 190, 168, 236, 154, 61, 40, 58, 132, 61, 120, 88, 240, 61, 191, 119, 139, 61, 94, 6, 145, 62, 193, 73, 235, 189, 149, 214, 111, 191, 140, 229, 0, 189, 202, 81, 242, 190, 204, 180, 170, 191, 50, 169, 90, 191, 186, 137, 114, 185, 105, 54, 70, 62, 205, 13, 77, 62, 123, 212, 131, 62, 199, 3, 55, 62, 229, 99, 56, 190, 47, 188, 39, 191, 253, 157, 16, 191, 94, 254, 15, 62, 95, 31, 71, 191, 79, 249, 154, 61, 194, 66, 209, 189, 153, 78, 150, 62, 150, 188, 11, 59, 201, 57, 20, 191, 165, 55, 13, 191, 29, 103, 195, 190, 9, 153, 224, 61, 11, 218, 113, 189, 76, 51, 56, 61, 194, 131, 25, 59, 10, 70, 157, 61, 12, 197, 84, 189, 134, 14, 38, 62, 139, 237, 141, 188, 180, 118, 34, 62, 237, 205, 46, 190, 125, 112, 199, 61, 41, 102, 79, 189, 133, 98, 32, 62, 133, 188, 213, 62, 75, 125, 158, 189, 230, 24, 121, 61, 106, 77, 84, 62, 79, 18, 49, 62, 232, 212, 95, 62, 65, 174, 55, 62, 47, 21, 149, 61, 78, 90, 135, 62, 101, 11, 174, 61, 157, 214, 85, 191, 27, 52, 49, 62, 221, 230, 253, 61, 21, 44, 108, 190, 115, 131, 152, 61, 73, 46, 12, 59, 102, 49, 111, 190, 98, 21, 203, 61, 253, 237, 191, 190, 220, 165, 190, 62, 214, 25, 80, 62, 193, 117, 0, 190, 211, 14, 72, 190, 224, 61, 89, 188, 134, 141, 139, 191, 136, 177, 36, 62, 133, 192, 121, 191, 122, 95, 133, 189, 129, 94, 246, 61, 249, 16, 45, 190, 86, 104, 12, 190, 41, 195, 51, 62, 54, 119, 132, 188, 118, 190, 246, 60, 188, 211, 133, 62, 95, 250, 232, 62, 200, 14, 147, 188, 116, 52, 137, 62, 249, 128, 65, 191, 79, 136, 169, 190, 93, 120, 194, 188, 114, 89, 213, 62, 159, 97, 104, 191, 188, 136, 64, 62, 218, 239, 147, 191, 192, 16, 72, 190, 119, 178, 225, 190, 78, 134, 17, 63, 232, 198, 180, 190, 148, 141, 73, 191, 245, 206, 255, 62, 17, 92, 146, 189, 170, 247, 111, 190, 169, 121, 144, 190, 98, 71, 166, 62, 191, 222, 93, 62, 68, 161, 147, 62, 100, 127, 209, 189, 71, 127, 197, 62, 171, 153, 131, 60, 59, 82, 202, 61, 140, 118, 157, 189, 118, 104, 163, 190, 143, 201, 6, 190, 177, 223, 64, 190, 68, 148, 135, 191, 0, 158, 0, 61, 7, 238, 20, 62, 117, 188, 34, 61, 73, 194, 152, 189, 225, 60, 121, 62, 51, 177, 128, 61, 164, 236, 197, 190, 33, 85, 15, 191, 230, 210, 109, 62, 172, 64, 25, 189, 182, 163, 200, 61, 15, 63, 108, 62, 13, 183, 1, 62, 46, 140, 255, 189, 104, 224, 79, 62, 38, 48, 73, 190, 133, 170, 2, 191, 10, 145, 19, 190, 42, 253, 28, 189, 67, 117, 139, 62, 244, 185, 17, 189, 216, 209, 190, 189, 112, 39, 18, 190, 0, 106, 65, 189, 8, 208, 60, 189, 214, 122, 88, 62, 251, 130, 60, 190, 190, 173, 55, 62, 44, 125, 28, 189, 214, 122, 238, 61, 141, 56, 222, 62, 225, 172, 172, 62, 49, 19, 136, 190, 16, 51, 98, 190, 217, 173, 83, 62, 172, 3, 108, 190, 3, 104, 156, 189, 200, 14, 48, 191, 63, 126, 132, 62, 115, 141, 85, 191, 200, 81, 64, 191, 148, 123, 145, 188, 220, 241, 151, 62, 49, 154, 44, 190, 112, 43, 164, 62, 31, 181, 81, 61, 164, 58, 233, 190, 41, 53, 211, 62, 23, 167, 198, 190, 131, 212, 149, 190, 99, 145, 94, 189, 28, 241, 173, 189, 253, 227, 60, 61, 86, 198, 217, 190, 106, 7, 109, 62, 149, 178, 125, 62, 218, 60, 53, 62, 103, 113, 91, 191, 9, 169, 214, 190, 131, 223, 224, 62, 207, 99, 174, 62, 176, 8, 109, 190, 218, 45, 169, 62, 174, 87, 78, 61, 240, 8, 210, 61, 54, 40, 211, 190, 190, 249, 117, 62, 8, 130, 199, 190, 186, 231, 167, 190, 175, 1, 125, 190, 150, 108, 92, 62, 41, 138, 7, 190, 146, 94, 42, 62, 105, 208, 218, 61, 251, 85, 142, 190, 157, 118, 90, 189, 54, 241, 206, 190, 241, 65, 22, 190, 134, 255, 131, 190, 168, 119, 85, 59, 175, 67, 129, 62, 50, 76, 121, 62, 124, 76, 119, 190, 183, 192, 13, 60, 9, 15, 135, 190, 160, 207, 90, 61, 190, 74, 91, 61, 29, 105, 233, 189, 144, 19, 203, 188, 83, 105, 160, 60, 92, 159, 83, 189, 6, 31, 1, 191, 201, 223, 27, 191, 133, 59, 202, 61, 68, 23, 222, 59, 68, 122, 242, 190, 34, 8, 111, 61, 248, 89, 135, 62, 10, 63, 79, 191, 151, 43, 137, 62, 170, 109, 18, 62, 48, 250, 135, 190, 26, 142, 81, 61, 102, 49, 62, 189, 227, 65, 181, 190, 168, 74, 37, 191, 45, 153, 178, 188, 203, 58, 246, 190, 74, 24, 213, 62, 139, 122, 143, 60, 249, 116, 144, 61, 115, 79, 187, 62, 249, 76, 234, 190, 76, 66, 47, 191, 82, 246, 46, 188, 103, 113, 131, 62, 63, 60, 155, 188, 22, 64, 41, 190, 48, 164, 39, 61, 241, 8, 143, 62, 232, 217, 130, 190, 38, 250, 99, 62, 172, 67, 36, 190, 216, 18, 166, 60, 68, 74, 63, 190, 218, 59, 8, 62, 234, 52, 9, 63, 124, 106, 166, 62, 9, 2, 77, 189, 130, 57, 237, 190, 48, 132, 105, 62, 75, 47, 136, 190, 251, 132, 25, 189, 111, 14, 237, 190, 215, 95, 67, 62, 88, 135, 64, 191, 204, 248, 188, 190, 63, 158, 190, 190, 53, 220, 205, 61, 120, 33, 28, 62, 161, 15, 183, 62, 156, 104, 133, 190, 142, 139, 241, 190, 174, 229, 80, 62, 179, 206, 132, 62, 71, 171, 23, 62, 42, 193, 253, 190, 101, 40, 213, 190, 210, 68, 149, 62, 184, 2, 51, 190, 246, 54, 108, 190, 105, 125, 245, 61, 39, 100, 72, 190, 81, 107, 82, 190, 16, 124, 254, 61, 117, 56, 27, 62, 220, 123, 53, 191, 116, 245, 114, 188, 178, 98, 4, 62, 251, 158, 126, 190, 220, 0, 132, 62, 184, 228, 131, 62, 242, 240, 26, 190, 190, 144, 38, 62, 47, 162, 134, 188, 7, 246, 217, 61, 143, 217, 73, 62, 66, 133, 184, 190, 210, 39, 219, 189, 247, 54, 57, 190, 201, 33, 216, 189, 169, 157, 56, 189, 178, 17, 74, 190, 44, 45, 224, 190, 60, 90, 106, 62, 211, 255, 48, 62, 7, 31, 231, 190, 15, 238, 136, 62, 116, 40, 16, 190, 120, 22, 246, 61, 124, 211, 163, 189, 172, 28, 62, 62, 214, 166, 157, 191, 155, 76, 39, 62, 225, 200, 131, 191, 135, 198, 143, 189, 64, 76, 35, 189, 127, 54, 167, 189, 29, 176, 5, 63, 179, 214, 191, 189, 198, 192, 121, 62, 222, 174, 113, 62, 84, 37, 124, 61, 1, 220, 132, 62, 168, 206, 251, 189, 78, 189, 126, 62, 66, 69, 81, 190, 51, 173, 247, 189, 16, 144, 87, 62, 251, 239, 143, 62, 227, 204, 32, 191, 55, 248, 153, 61, 80, 157, 51, 62, 67, 66, 34, 190, 54, 34, 13, 191, 80, 136, 211, 62, 90, 214, 128, 190, 6, 65, 31, 190, 62, 37, 27, 63, 7, 232, 245, 61, 34, 202, 168, 190, 102, 153, 34, 191, 222, 157, 211, 190, 49, 7, 102, 62, 211, 55, 60, 189, 32, 49, 164, 62, 153, 236, 26, 62, 59, 236, 197, 188, 202, 75, 130, 62, 150, 245, 16, 191, 51, 166, 11, 191, 27, 226, 149, 60, 222, 214, 198, 190, 86, 189, 139, 190, 29, 255, 69, 62, 162, 176, 187, 62, 70, 196, 134, 58, 101, 208, 87, 62, 69, 34, 54, 190, 142, 206, 208, 190, 97, 237, 102, 61, 192, 89, 7, 191, 75, 71, 232, 61, 232, 170, 71, 190, 145, 197, 28, 190, 198, 74, 138, 62, 120, 159, 5, 190, 150, 145, 150, 190, 30, 235, 2, 63, 156, 124, 185, 62, 249, 13, 120, 62, 237, 169, 34, 62, 220, 235, 224, 190, 36, 65, 216, 190, 82, 228, 98, 62, 58, 176, 214, 188, 101, 230, 122, 189, 226, 123, 150, 190, 95, 88, 177, 189, 150, 76, 137, 190, 9, 57, 89, 190, 68, 112, 64, 61, 184, 82, 183, 190, 188, 250, 94, 189, 21, 6, 139, 62, 13, 132, 222, 190, 40, 65, 177, 189, 203, 60, 175, 61, 40, 116, 207, 190, 154, 58, 129, 61, 89, 1, 10, 190, 59, 219, 13, 190, 213, 140, 152, 189, 166, 217, 144, 190, 28, 187, 147, 189, 186, 147, 112, 190, 40, 59, 229, 190, 244, 199, 135, 190, 218, 125, 139, 188, 147, 101, 16, 189, 226, 26, 255, 61, 168, 69, 204, 188, 47, 31, 31, 63, 51, 109, 7, 188, 130, 150, 119, 190, 118, 120, 152, 190, 195, 186, 189, 62, 121, 16, 199, 60, 173, 78, 184, 189, 249, 39, 23, 62, 102, 32, 109, 61, 41, 178, 191, 61, 45, 68, 123, 62, 237, 59, 153, 190, 81, 79, 7, 191, 214, 100, 34, 190, 84, 2, 234, 189, 209, 110, 14, 191, 128, 173, 77, 61, 165, 100, 87, 62, 105, 149, 141, 190, 105, 81, 88, 189, 2, 164, 167, 189, 88, 32, 36, 190, 181, 193, 62, 188, 217, 93, 52, 191, 79, 150, 187, 60, 69, 227, 188, 189, 42, 241, 219, 189, 249, 180, 226, 62, 43, 49, 186, 189, 115, 79, 219, 189, 3, 179, 207, 62, 66, 6, 55, 190, 197, 157, 84, 191, 234, 64, 143, 60, 113, 71, 244, 189, 67, 26, 129, 62, 179, 206, 67, 190, 160, 213, 233, 190, 137, 66, 197, 191, 13, 101, 140, 62, 43, 32, 192, 191, 96, 249, 119, 190, 203, 194, 184, 189, 191, 219, 15, 62, 98, 85, 106, 62, 87, 35, 233, 60, 207, 7, 45, 62, 148, 202, 139, 60, 184, 78, 20, 189, 7, 60, 52, 190, 92, 220, 64, 62, 109, 184, 106, 61, 61, 8, 15, 191, 72, 148, 173, 190, 229, 58, 53, 62, 46, 77, 184, 62, 159, 172, 131, 191, 10, 168, 149, 62, 4, 73, 84, 190, 76, 126, 177, 190, 160, 242, 228, 190, 114, 219, 235, 61, 40, 217, 3, 191, 154, 84, 33, 188, 221, 136, 165, 189, 156, 121, 189, 189, 234, 173, 5, 62, 250, 201, 182, 189, 99, 228, 42, 190, 180, 82, 104, 189, 69, 230, 87, 61, 97, 50, 238, 189, 104, 48, 0, 62, 235, 83, 36, 190, 48, 249, 164, 61, 126, 174, 138, 61, 194, 186, 61, 190, 250, 32, 139, 186, 9, 30, 69, 61, 158, 107, 49, 61, 138, 13, 186, 61, 101, 110, 33, 189, 103, 179, 82, 190, 165, 78, 9, 62, 120, 182, 229, 60, 207, 157, 202, 59, 163, 43, 134, 188, 27, 71, 46, 190, 184, 78, 34, 190, 166, 229, 48, 190, 108, 71, 6, 62, 125, 30, 237, 189, 62, 144, 203, 189, 248, 41, 31, 59, 64, 104, 34, 62, 194, 235, 79, 190, 87, 99, 93, 62, 240, 92, 140, 62, 216, 75, 12, 189, 111, 236, 69, 61, 124, 69, 197, 189, 238, 110, 236, 61, 194, 240, 211, 61, 248, 30, 11, 62, 242, 10, 62, 62, 97, 78, 3, 60, 122, 121, 82, 62, 200, 176, 27, 191, 51, 74, 4, 190, 62, 235, 149, 190, 100, 175, 186, 190, 35, 5, 199, 190, 205, 228, 140, 62, 181, 168, 218, 61, 168, 127, 120, 190, 238, 32, 191, 62, 61, 121, 174, 189, 248, 111, 80, 190, 45, 255, 203, 61, 59, 118, 46, 190, 215, 119, 175, 190, 145, 107, 117, 191, 226, 125, 232, 61, 156, 99, 245, 61, 229, 145, 155, 62, 13, 187, 221, 59, 197, 32, 186, 62, 27, 199, 131, 189, 77, 246, 176, 190, 20, 13, 64, 189, 151, 25, 189, 190, 194, 172, 199, 187, 117, 13, 27, 62, 110, 61, 18, 191, 252, 52, 188, 61, 195, 17, 128, 61, 94, 219, 52, 62, 130, 255, 64, 191, 131, 209, 200, 190, 153, 209, 209, 62, 24, 246, 180, 62, 104, 174, 51, 62, 18, 130, 149, 62, 111, 76, 135, 190, 46, 10, 146, 62, 93, 56, 20, 191, 53, 178, 12, 188, 141, 44, 141, 190, 247, 95, 184, 190, 230, 60, 205, 61, 74, 208, 36, 60, 26, 201, 143, 187, 141, 105, 242, 61, 56, 209, 197, 62, 46, 190, 234, 189, 78, 181, 145, 62, 162, 236, 168, 190, 120, 152, 242, 189, 245, 159, 105, 189, 63, 211, 236, 189, 250, 211, 11, 191, 5, 84, 155, 190, 16, 191, 145, 62, 155, 226, 163, 189, 177, 242, 121, 189, 248, 172, 200, 188, 220, 125, 95, 61, 198, 96, 42, 60, 171, 185, 122, 189, 42, 244, 77, 190, 30, 5, 140, 61, 92, 87, 189, 190, 185, 149, 175, 188, 218, 49, 241, 61, 142, 158, 4, 62, 79, 40, 152, 62, 183, 40, 132, 61, 65, 64, 154, 190, 111, 217, 193, 189, 30, 169, 7, 189, 212, 12, 112, 189, 245, 174, 154, 62, 27, 148, 239, 60, 247, 202, 76, 188, 102, 95, 137, 190, 64, 250, 85, 62, 214, 114, 17, 190, 151, 32, 18, 62, 12, 208, 221, 189, 136, 114, 37, 62, 55, 163, 160, 190, 140, 92, 103, 62, 84, 173, 73, 60, 42, 113, 3, 62, 171, 59, 236, 189, 178, 209, 39, 190, 239, 216, 253, 61, 132, 249, 78, 191, 92, 234, 82, 190, 20, 220, 201, 190, 51, 134, 186, 190, 223, 249, 29, 191, 90, 171, 164, 190, 190, 248, 55, 59, 61, 126, 190, 189, 69, 71, 86, 190, 179, 142, 173, 61, 108, 241, 33, 190, 170, 24, 132, 61, 143, 12, 38, 191, 207, 74, 37, 188, 67, 133, 211, 189, 7, 87, 131, 189, 77, 239, 131, 190, 229, 172, 173, 62, 223, 106, 170, 61, 222, 111, 38, 190, 133, 10, 10, 190, 245, 119, 31, 190, 124, 100, 246, 190, 41, 13, 249, 190, 171, 139, 64, 189, 69, 216, 254, 189, 181, 16, 144, 190, 58, 121, 33, 61, 239, 7, 42, 190, 193, 76, 174, 188, 66, 126, 248, 189, 227, 63, 156, 189, 89, 224, 104, 61, 164, 203, 22, 62, 238, 163, 48, 62, 204, 225, 126, 61, 184, 243, 64, 190, 17, 248, 143, 61, 71, 110, 227, 189, 170, 157, 242, 188, 157, 129, 168, 61, 157, 94, 51, 190, 240, 99, 146, 60, 4, 129, 126, 61, 125, 213, 223, 189, 197, 38, 197, 189, 48, 218, 115, 61, 135, 86, 198, 61, 218, 172, 169, 189, 185, 96, 49, 190, 143, 109, 198, 188, 182, 106, 14, 61, 226, 148, 71, 189, 142, 13, 251, 189, 129, 35, 195, 188, 61, 87, 23, 190, 72, 176, 205, 189, 80, 149, 65, 60, 51, 214, 2, 190, 122, 196, 179, 62, 146, 199, 139, 62, 182, 252, 157, 189, 216, 211, 129, 190, 145, 20, 242, 61, 35, 50, 28, 62, 23, 218, 77, 191, 125, 93, 187, 61, 161, 26, 199, 190, 83, 131, 48, 61, 61, 85, 1, 190, 126, 0, 186, 61, 114, 139, 220, 190, 101, 122, 19, 190, 18, 73, 89, 62, 189, 22, 188, 190, 163, 153, 143, 62, 139, 43, 30, 62, 203, 18, 187, 190, 4, 188, 208, 61, 7, 46, 224, 190, 164, 73, 165, 61, 104, 147, 136, 189, 105, 246, 109, 189, 225, 106, 12, 62, 48, 255, 73, 60, 148, 224, 1, 191, 33, 167, 141, 61, 122, 152, 27, 63, 56, 219, 75, 191, 247, 147, 40, 62, 215, 155, 238, 62, 178, 119, 159, 62, 130, 59, 59, 62, 88, 123, 149, 190, 149, 21, 42, 190, 46, 237, 249, 61, 148, 41, 11, 62, 152, 170, 90, 190, 228, 94, 15, 190, 115, 217, 202, 190, 237, 35, 28, 189, 79, 12, 253, 189, 16, 26, 211, 61, 34, 154, 31, 191, 114, 243, 145, 61, 110, 47, 228, 189, 115, 4, 24, 190, 79, 202, 249, 61, 168, 222, 165, 62, 94, 160, 39, 190, 167, 138, 223, 62, 86, 95, 37, 57, 44, 58, 39, 62, 127, 234, 15, 61, 99, 228, 212, 188, 242, 2, 129, 61, 252, 143, 15, 62, 255, 107, 107, 190, 165, 161, 255, 189, 248, 193, 148, 62, 164, 139, 172, 189, 133, 84, 252, 61, 112, 126, 1, 62, 247, 39, 234, 62, 148, 65, 209, 58, 106, 243, 255, 189, 100, 238, 113, 190, 4, 115, 132, 62, 111, 129, 33, 62, 90, 34, 70, 62, 166, 86, 144, 190, 135, 102, 48, 61, 176, 70, 35, 62, 69, 78, 26, 61, 173, 24, 151, 190, 143, 120, 229, 190, 58, 89, 215, 189, 60, 168, 195, 189, 132, 136, 156, 191, 10, 161, 214, 189, 111, 127, 181, 62, 130, 179, 109, 190, 170, 82, 47, 190, 34, 27, 242, 61, 52, 55, 133, 190, 184, 20, 116, 190, 70, 2, 48, 191, 233, 56, 30, 190, 156, 250, 128, 190, 91, 161, 185, 190, 255, 194, 10, 63, 11, 97, 113, 189, 199, 8, 236, 188, 126, 65, 161, 62, 14, 44, 241, 189, 60, 53, 150, 189, 99, 27, 30, 191, 117, 178, 243, 61, 204, 227, 114, 62, 97, 230, 19, 62, 231, 128, 52, 190, 50, 103, 1, 62, 63, 39, 18, 189, 18, 123, 226, 189, 126, 176, 93, 62, 104, 204, 72, 62, 32, 50, 90, 191, 55, 218, 87, 59, 185, 243, 93, 190, 132, 3, 166, 191, 90, 11, 129, 189, 232, 203, 145, 190, 51, 99, 58, 191, 53, 77, 155, 62, 175, 85, 9, 191, 215, 131, 141, 62, 84, 194, 126, 190, 123, 187, 86, 61, 127, 219, 1, 191, 252, 48, 95, 189, 54, 65, 21, 191, 157, 50, 27, 189, 175, 43, 193, 190, 180, 152, 200, 188, 27, 121, 157, 190, 254, 223, 12, 190, 217, 82, 253, 190, 255, 236, 26, 62, 67, 55, 51, 62, 230, 52, 56, 190, 207, 43, 160, 190, 251, 215, 80, 62, 41, 231, 68, 61, 57, 85, 215, 189, 106, 121, 20, 191, 90, 213, 229, 189, 248, 194, 227, 189, 171, 128, 11, 191, 171, 83, 164, 61, 187, 197, 79, 62, 230, 209, 179, 62, 79, 230, 176, 62, 8, 65, 25, 62, 30, 129, 165, 189, 165, 58, 118, 61, 242, 229, 63, 190, 45, 128, 242, 189, 110, 51, 70, 189, 200, 196, 165, 61, 173, 105, 75, 187, 65, 214, 181, 189, 214, 249, 180, 62, 238, 112, 146, 190, 41, 145, 56, 190, 162, 217, 3, 190, 165, 201, 65, 191, 124, 116, 128, 190, 50, 94, 103, 62, 88, 72, 192, 190, 107, 153, 240, 59, 252, 23, 123, 60, 20, 205, 39, 190, 146, 64, 65, 61, 239, 31, 92, 189, 74, 112, 199, 61, 55, 124, 211, 61, 116, 118, 254, 188, 182, 192, 8, 62, 189, 145, 51, 190, 58, 122, 133, 189, 150, 15, 164, 189, 138, 141, 41, 189, 78, 149, 146, 61, 103, 154, 28, 62, 30, 109, 244, 59, 99, 152, 18, 190, 210, 80, 25, 190, 218, 217, 19, 190, 25, 217, 203, 61, 181, 223, 1, 190, 167, 132, 107, 189, 14, 196, 8, 190, 237, 119, 31, 189, 23, 6, 174, 61, 233, 210, 6, 62, 221, 132, 117, 188, 102, 191, 2, 190, 183, 219, 197, 61, 197, 179, 13, 190, 125, 187, 197, 189, 209, 223, 226, 61, 201, 120, 55, 187, 2, 86, 130, 190, 121, 1, 164, 190, 36, 129, 189, 61, 210, 34, 84, 190, 15, 216, 182, 61, 180, 130, 165, 62, 6, 139, 229, 189, 148, 101, 240, 61, 224, 227, 162, 61, 5, 14, 21, 62, 24, 106, 1, 191, 188, 123, 227, 60, 223, 25, 73, 189, 242, 204, 216, 190, 96, 62, 109, 191, 100, 221, 180, 190, 1, 164, 113, 62, 237, 33, 221, 60, 202, 54, 247, 189, 20, 170, 250, 188, 245, 40, 153, 190, 200, 73, 69, 191, 84, 50, 95, 191, 28, 232, 227, 187, 128, 5, 218, 190, 186, 211, 11, 61, 168, 87, 92, 62, 25, 184, 225, 60, 251, 98, 98, 190, 178, 143, 128, 61, 206, 163, 146, 190, 222, 85, 206, 189, 85, 91, 6, 61, 171, 42, 224, 189, 141, 3, 197, 62, 169, 137, 170, 188, 133, 103, 105, 189, 112, 59, 26, 62, 45, 27, 80, 61, 89, 49, 81, 190, 249, 105, 187, 189, 162, 48, 230, 61, 71, 47, 138, 62, 23, 176, 136, 190, 215, 200, 152, 61, 150, 239, 14, 62, 80, 203, 178, 190, 86, 203, 31, 61, 245, 27, 147, 189, 242, 38, 194, 62, 207, 133, 72, 190, 60, 166, 9, 62, 87, 44, 235, 190, 195, 251, 36, 62, 31, 199, 100, 191, 81, 165, 148, 191, 79, 195, 132, 189, 162, 186, 140, 60, 103, 223, 3, 62, 81, 198, 147, 62, 110, 34, 217, 61, 81, 150, 147, 190, 247, 137, 182, 61, 20, 163, 83, 62, 108, 194, 135, 62, 134, 236, 227, 188, 94, 42, 25, 191, 4, 223, 29, 62, 70, 42, 91, 61, 199, 183, 24, 191, 50, 132, 242, 190, 45, 22, 46, 191, 248, 95, 17, 191, 76, 134, 148, 190, 127, 234, 135, 190, 21, 151, 79, 191, 100, 46, 218, 189, 241, 119, 220, 62, 42, 34, 149, 190, 245, 234, 42, 62, 205, 24, 158, 189, 209, 63, 146, 190, 244, 95, 252, 61, 124, 152, 216, 190, 104, 68, 173, 190, 112, 197, 115, 62, 90, 47, 205, 190, 68, 7, 69, 191, 152, 158, 239, 189, 25, 255, 190, 190, 210, 20, 151, 189, 22, 4, 144, 62, 69, 251, 153, 190, 136, 58, 153, 61, 109, 70, 138, 62, 125, 172, 17, 62, 149, 231, 224, 189, 234, 210, 24, 61, 91, 66, 33, 190, 15, 103, 220, 189, 24, 135, 18, 190, 208, 167, 11, 190, 223, 131, 112, 189, 134, 66, 235, 188, 95, 184, 156, 61, 24, 159, 12, 190, 37, 46, 130, 61, 72, 30, 159, 189, 161, 60, 9, 62, 167, 118, 67, 190, 23, 17, 195, 189, 228, 178, 146, 189, 124, 166, 137, 189, 6, 204, 165, 61, 133, 55, 226, 189, 152, 46, 69, 190, 236, 51, 58, 57, 75, 217, 181, 61, 191, 38, 176, 188, 54, 135, 41, 62, 143, 170, 147, 61, 142, 62, 235, 189, 42, 79, 40, 187, 248, 17, 246, 189, 11, 162, 33, 190, 154, 116, 10, 62, 235, 212, 68, 60, 157, 185, 3, 191, 214, 210, 59, 189, 144, 17, 221, 189, 136, 114, 56, 190, 81, 6, 102, 190, 193, 135, 17, 189, 4, 254, 141, 191, 52, 211, 184, 62, 114, 171, 78, 191, 46, 10, 216, 61, 68, 98, 236, 189, 235, 201, 46, 189, 234, 236, 59, 189, 30, 78, 130, 62, 80, 103, 200, 62, 212, 165, 146, 62, 8, 86, 49, 62, 78, 151, 41, 62, 200, 231, 30, 188, 12, 30, 171, 61, 82, 181, 134, 190, 152, 113, 13, 58, 181, 14, 226, 62, 146, 175, 56, 62, 108, 129, 33, 191, 24, 93, 169, 62, 89, 44, 11, 62, 109, 86, 144, 190, 244, 239, 166, 190, 172, 154, 111, 62, 105, 232, 176, 190, 250, 200, 20, 62, 27, 174, 136, 191, 213, 67, 89, 190, 48, 252, 129, 62, 118, 123, 246, 61, 111, 110, 176, 190, 97, 55, 197, 61, 11, 31, 128, 190, 86, 92, 161, 62, 196, 133, 9, 190, 130, 68, 99, 62, 138, 161, 35, 189, 66, 88, 233, 188, 191, 58, 212, 60, 206, 116, 31, 62, 135, 119, 136, 62, 215, 25, 169, 62, 207, 109, 71, 61, 106, 89, 184, 61, 183, 81, 225, 189, 147, 177, 253, 189, 102, 23, 237, 189, 133, 69, 100, 190, 103, 4, 99, 61, 221, 190, 162, 190, 24, 22, 67, 191, 22, 21, 155, 62, 55, 164, 67, 60, 165, 45, 139, 190, 127, 170, 48, 62, 90, 168, 142, 62, 82, 210, 24, 191, 66, 219, 192, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 107, 166, 62, 76, 146, 202, 62, 216, 81, 142, 60, 134, 210, 209, 189, 220, 191, 72, 62, 63, 237, 162, 190, 50, 94, 215, 62, 221, 244, 230, 189, 167, 250, 248, 60, 129, 112, 157, 62, 89, 164, 70, 62, 218, 130, 12, 62, 82, 81, 59, 62, 109, 118, 139, 62, 169, 218, 78, 61, 247, 115, 29, 62, 153, 79, 70, 190, 232, 216, 125, 190, 36, 207, 40, 61, 144, 186, 115, 61, 198, 194, 115, 189, 78, 0, 75, 189, 131, 242, 202, 189, 252, 37, 207, 189, 79, 90, 187, 189, 107, 197, 52, 190, 72, 142, 215, 61, 48, 176, 187, 62, 12, 249, 237, 59, 133, 130, 240, 60, 46, 180, 137, 62, 247, 184, 128, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 68, 123, 63, 32, 188, 238, 189, 186, 112, 125, 191, 244, 37, 242, 62, 217, 122, 158, 190, 4, 147, 185, 62, 32, 114, 20, 63, 241, 122, 197, 190, 214, 4, 130, 61, 150, 73, 245, 190, 102, 248, 129, 63, 61, 232, 250, 61, 78, 173, 31, 63, 246, 84, 103, 191, 160, 76, 172, 188, 219, 195, 96, 62, 220, 120, 165, 62, 149, 220, 55, 190, 15, 223, 52, 61, 88, 119, 186, 61, 19, 136, 161, 62, 166, 202, 85, 62, 37, 65, 81, 63, 87, 44, 102, 63, 234, 29, 143, 190, 59, 45, 201, 189, 153, 177, 83, 63, 202, 189, 244, 189, 173, 131, 1, 63, 126, 72, 250, 189, 0, 174, 2, 191, 74, 26, 5, 191, 91, 244, 129, 62, 218, 133, 159, 190, 221, 111, 196, 62, 229, 95, 223, 62, 68, 14, 161, 190, 234, 159, 228, 189, 120, 142, 109, 189, 82, 2, 77, 62, 85, 111, 21, 191, 62, 78, 38, 190, 82, 104, 14, 62, 217, 198, 159, 190, 27, 91, 25, 190, 1, 49, 192, 62, 205, 214, 206, 61, 97, 126, 130, 190, 36, 17, 108, 62, 120, 232, 132, 62, 239, 145, 8, 191, 148, 245, 116, 188, 196, 249, 17, 190, 14, 157, 183, 60, 153, 61, 83, 63, 58, 186, 118, 62, 255, 163, 211, 190, 54, 30, 3, 62, 211, 159, 193, 62, 172, 190, 185, 190, 78, 247, 35, 191, 121, 133, 237, 61, 249, 0, 189, 189, 238, 45, 155, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 237, 32, 190, 29, 203, 234, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {193, 40, 55, 63, 20, 22, 18, 61, 96, 76, 67, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {168, 103, 73, 63, 250, 240, 53, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0089/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}