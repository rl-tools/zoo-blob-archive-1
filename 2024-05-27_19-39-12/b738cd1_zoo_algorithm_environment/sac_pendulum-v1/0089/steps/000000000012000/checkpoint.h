// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 62, 66, 63, 155, 63, 145, 191, 191, 172, 164, 190, 23, 117, 192, 62, 63, 180, 172, 191, 57, 116, 150, 190, 194, 195, 213, 61, 26, 180, 24, 63, 65, 220, 129, 62, 145, 179, 206, 190, 249, 173, 21, 63, 44, 37, 39, 61, 179, 94, 13, 63, 118, 245, 181, 190, 108, 244, 24, 191, 20, 213, 151, 62, 5, 58, 92, 190, 233, 5, 197, 62, 64, 67, 128, 190, 226, 13, 172, 63, 42, 99, 112, 62, 147, 189, 49, 191, 70, 47, 139, 188, 243, 236, 156, 190, 9, 209, 252, 188, 179, 199, 62, 63, 113, 140, 79, 62, 99, 208, 131, 190, 247, 199, 203, 61, 66, 51, 177, 62, 50, 138, 24, 190, 91, 70, 32, 62, 118, 143, 9, 63, 86, 151, 128, 62, 81, 199, 65, 63, 89, 91, 115, 190, 5, 40, 218, 62, 116, 166, 186, 63, 229, 134, 207, 62, 163, 118, 244, 62, 176, 209, 139, 190, 2, 231, 30, 63, 156, 181, 86, 62, 39, 241, 36, 63, 79, 178, 220, 190, 219, 213, 77, 63, 194, 69, 18, 63, 189, 141, 115, 62, 90, 114, 148, 61, 214, 88, 90, 191, 35, 100, 230, 190, 58, 163, 54, 62, 147, 100, 43, 191, 149, 180, 146, 62, 230, 99, 209, 190, 136, 174, 97, 63, 37, 109, 31, 190, 120, 41, 155, 188, 5, 50, 109, 191, 147, 5, 151, 188, 60, 149, 181, 190, 232, 237, 108, 63, 187, 40, 11, 63, 118, 223, 145, 60, 95, 66, 76, 191, 183, 145, 146, 190, 132, 157, 106, 63, 204, 190, 51, 63, 208, 31, 53, 62, 119, 127, 158, 190, 153, 166, 235, 191, 71, 181, 173, 190, 140, 179, 51, 63, 45, 148, 19, 191, 214, 37, 108, 190, 126, 128, 77, 191, 195, 120, 84, 187, 158, 116, 112, 191, 56, 1, 163, 61, 136, 217, 112, 63, 182, 254, 146, 62, 130, 133, 34, 190, 222, 27, 55, 63, 187, 26, 220, 190, 207, 138, 26, 191, 90, 173, 27, 62, 254, 151, 60, 62, 117, 86, 49, 190, 49, 30, 38, 189, 79, 217, 173, 62, 127, 52, 1, 63, 217, 56, 90, 191, 110, 242, 146, 190, 90, 106, 27, 63, 231, 80, 135, 190, 108, 150, 134, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 240, 165, 190, 189, 98, 163, 62, 31, 245, 45, 191, 136, 112, 204, 62, 7, 22, 24, 190, 252, 70, 8, 62, 41, 46, 209, 190, 28, 233, 164, 190, 220, 69, 192, 189, 232, 85, 214, 62, 220, 146, 100, 190, 37, 3, 30, 190, 12, 121, 42, 189, 15, 91, 223, 190, 141, 185, 6, 63, 181, 47, 250, 190, 99, 51, 155, 61, 208, 81, 143, 187, 191, 12, 200, 62, 134, 135, 127, 62, 55, 9, 36, 188, 27, 174, 130, 190, 222, 64, 71, 62, 149, 75, 92, 190, 59, 145, 12, 191, 37, 208, 117, 190, 105, 250, 241, 62, 199, 120, 145, 190, 10, 26, 11, 63, 160, 67, 177, 190, 50, 158, 47, 190, 232, 75, 23, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 255, 160, 189, 170, 114, 12, 189, 229, 172, 186, 190, 214, 244, 47, 62, 207, 22, 30, 190, 227, 58, 217, 61, 95, 19, 23, 62, 148, 186, 93, 189, 171, 242, 16, 62, 250, 205, 105, 62, 106, 56, 203, 189, 103, 172, 48, 191, 85, 235, 61, 61, 229, 162, 227, 190, 118, 126, 156, 191, 213, 136, 54, 191, 120, 151, 208, 189, 10, 239, 98, 62, 163, 103, 106, 62, 169, 233, 17, 62, 122, 251, 54, 62, 121, 26, 51, 190, 58, 166, 233, 190, 49, 114, 57, 191, 161, 52, 34, 61, 115, 57, 88, 191, 124, 12, 174, 61, 145, 208, 4, 189, 99, 144, 43, 62, 193, 108, 8, 186, 186, 78, 138, 190, 189, 164, 15, 191, 103, 172, 225, 190, 200, 147, 139, 61, 160, 143, 77, 189, 199, 73, 90, 189, 9, 83, 227, 188, 89, 198, 23, 62, 109, 242, 249, 189, 127, 68, 64, 62, 120, 131, 226, 189, 146, 219, 202, 61, 110, 94, 144, 189, 79, 239, 54, 61, 30, 181, 199, 189, 23, 9, 80, 62, 92, 11, 182, 62, 90, 88, 215, 189, 121, 80, 109, 61, 146, 223, 124, 62, 133, 153, 187, 61, 26, 59, 95, 62, 23, 177, 174, 61, 167, 92, 226, 61, 163, 195, 83, 62, 108, 19, 160, 61, 27, 135, 106, 191, 247, 127, 97, 62, 196, 247, 46, 61, 56, 211, 63, 190, 67, 21, 9, 61, 193, 125, 4, 61, 94, 172, 150, 190, 242, 189, 102, 62, 11, 157, 227, 190, 98, 224, 154, 62, 214, 25, 80, 62, 231, 62, 13, 189, 157, 250, 65, 190, 243, 168, 76, 189, 26, 24, 151, 191, 144, 199, 67, 62, 32, 6, 121, 191, 160, 144, 88, 61, 147, 224, 47, 189, 0, 249, 220, 189, 107, 96, 243, 189, 159, 224, 114, 186, 219, 199, 142, 60, 229, 78, 129, 61, 77, 222, 113, 62, 18, 159, 195, 62, 189, 107, 237, 60, 129, 91, 58, 62, 183, 118, 60, 191, 42, 116, 191, 190, 9, 67, 182, 61, 255, 115, 176, 62, 248, 240, 104, 191, 147, 126, 85, 62, 224, 19, 144, 191, 97, 239, 3, 190, 233, 35, 126, 190, 126, 23, 167, 62, 180, 142, 213, 190, 100, 83, 45, 191, 74, 228, 2, 63, 1, 157, 196, 188, 225, 8, 16, 190, 254, 2, 145, 190, 12, 234, 165, 62, 43, 194, 91, 62, 162, 86, 118, 62, 192, 89, 4, 190, 248, 35, 186, 62, 203, 84, 231, 188, 71, 111, 226, 61, 29, 224, 120, 189, 126, 198, 155, 190, 128, 251, 23, 190, 123, 232, 46, 190, 237, 66, 69, 191, 203, 88, 8, 61, 117, 252, 67, 62, 134, 116, 90, 61, 33, 32, 63, 188, 233, 216, 89, 62, 181, 173, 19, 61, 191, 119, 114, 190, 113, 234, 7, 191, 212, 251, 66, 62, 106, 134, 148, 189, 165, 162, 211, 61, 166, 188, 90, 62, 57, 88, 152, 61, 229, 19, 11, 190, 130, 197, 93, 62, 230, 25, 54, 190, 250, 17, 232, 190, 124, 114, 140, 189, 75, 40, 24, 189, 122, 18, 93, 62, 169, 253, 20, 60, 115, 92, 85, 189, 125, 232, 54, 190, 13, 252, 154, 59, 233, 251, 222, 189, 31, 230, 206, 61, 66, 50, 194, 189, 77, 81, 61, 62, 155, 4, 221, 189, 56, 191, 0, 62, 80, 103, 217, 62, 113, 120, 156, 62, 200, 243, 237, 189, 219, 85, 35, 190, 165, 238, 39, 62, 254, 202, 210, 189, 222, 173, 66, 190, 149, 79, 243, 190, 152, 249, 107, 62, 29, 62, 8, 191, 130, 37, 68, 191, 147, 150, 86, 61, 78, 156, 59, 62, 193, 44, 198, 189, 118, 224, 129, 62, 252, 223, 105, 61, 44, 104, 206, 190, 29, 91, 246, 62, 154, 168, 181, 190, 57, 31, 145, 190, 116, 110, 10, 187, 87, 241, 128, 189, 143, 131, 86, 61, 49, 164, 246, 189, 72, 138, 40, 62, 89, 7, 169, 62, 97, 20, 1, 62, 97, 190, 153, 190, 41, 217, 134, 190, 49, 189, 194, 62, 241, 141, 28, 62, 171, 76, 176, 188, 63, 185, 149, 62, 104, 74, 15, 190, 229, 107, 54, 62, 123, 5, 6, 190, 121, 194, 108, 62, 2, 126, 121, 190, 5, 127, 120, 61, 234, 202, 111, 190, 48, 144, 124, 61, 76, 157, 123, 189, 184, 122, 57, 62, 112, 129, 28, 62, 154, 111, 147, 190, 168, 37, 96, 189, 93, 37, 176, 60, 80, 88, 21, 190, 246, 3, 82, 190, 168, 119, 85, 59, 106, 76, 146, 62, 118, 196, 129, 62, 129, 93, 3, 190, 158, 120, 40, 190, 63, 222, 61, 190, 37, 50, 54, 61, 229, 152, 19, 62, 109, 135, 76, 190, 191, 57, 51, 61, 147, 61, 102, 59, 49, 75, 201, 189, 104, 128, 161, 190, 65, 53, 26, 191, 212, 23, 214, 61, 108, 135, 105, 61, 250, 82, 8, 191, 37, 92, 179, 188, 253, 180, 136, 62, 29, 21, 8, 191, 122, 41, 135, 62, 139, 161, 22, 62, 29, 180, 180, 189, 44, 117, 241, 59, 239, 93, 42, 61, 69, 169, 149, 190, 182, 218, 222, 190, 18, 125, 28, 60, 46, 202, 4, 191, 124, 159, 134, 62, 169, 9, 181, 61, 105, 45, 241, 61, 46, 104, 147, 62, 119, 83, 220, 190, 47, 34, 18, 191, 201, 161, 155, 61, 69, 169, 125, 62, 229, 146, 14, 60, 6, 90, 221, 58, 208, 194, 148, 61, 251, 175, 133, 62, 44, 138, 129, 190, 141, 200, 137, 61, 222, 38, 45, 190, 174, 190, 176, 61, 86, 164, 156, 189, 103, 159, 79, 62, 221, 176, 23, 63, 122, 184, 233, 62, 34, 38, 135, 189, 72, 203, 15, 190, 7, 109, 128, 62, 62, 252, 128, 190, 184, 101, 92, 190, 88, 139, 141, 190, 88, 162, 155, 62, 44, 15, 3, 191, 250, 122, 215, 190, 182, 229, 175, 190, 185, 202, 170, 61, 110, 73, 101, 62, 56, 81, 209, 61, 3, 182, 92, 190, 125, 21, 237, 190, 192, 109, 128, 62, 47, 246, 67, 62, 234, 166, 248, 61, 42, 247, 136, 190, 112, 0, 189, 190, 254, 111, 134, 62, 4, 70, 139, 189, 106, 209, 56, 190, 223, 82, 49, 62, 148, 204, 6, 190, 71, 59, 170, 189, 173, 154, 252, 61, 23, 237, 33, 62, 176, 35, 252, 190, 229, 204, 137, 60, 35, 106, 37, 62, 241, 91, 31, 190, 134, 224, 66, 62, 94, 231, 162, 62, 27, 237, 190, 189, 182, 191, 69, 62, 204, 25, 8, 61, 79, 72, 5, 62, 68, 140, 129, 62, 241, 233, 143, 190, 149, 212, 133, 190, 189, 100, 238, 189, 96, 208, 3, 62, 73, 110, 151, 58, 173, 146, 58, 190, 162, 255, 158, 190, 215, 138, 53, 62, 145, 145, 12, 62, 37, 192, 228, 190, 111, 205, 133, 62, 154, 12, 115, 189, 30, 175, 1, 62, 22, 53, 222, 189, 141, 240, 6, 62, 76, 51, 144, 191, 13, 182, 49, 62, 112, 112, 124, 191, 224, 24, 42, 190, 192, 141, 72, 189, 216, 189, 3, 190, 200, 197, 231, 62, 96, 214, 42, 190, 238, 171, 67, 62, 20, 132, 68, 62, 83, 111, 217, 61, 223, 106, 80, 62, 67, 113, 46, 190, 24, 90, 113, 62, 31, 182, 175, 190, 221, 97, 192, 189, 217, 63, 37, 62, 175, 161, 141, 62, 175, 36, 22, 191, 16, 130, 161, 61, 180, 130, 176, 60, 35, 128, 11, 190, 118, 54, 251, 190, 148, 62, 96, 62, 150, 101, 133, 190, 44, 28, 236, 189, 83, 142, 187, 62, 65, 66, 130, 187, 84, 56, 68, 190, 119, 178, 188, 190, 72, 9, 154, 190, 2, 62, 76, 62, 90, 152, 135, 189, 85, 69, 121, 62, 134, 75, 108, 61, 104, 18, 190, 60, 192, 44, 94, 62, 205, 52, 202, 190, 235, 3, 44, 191, 97, 25, 233, 188, 126, 177, 252, 189, 247, 76, 238, 190, 18, 203, 197, 188, 9, 229, 170, 62, 195, 56, 89, 189, 132, 203, 49, 62, 19, 16, 37, 190, 37, 199, 229, 190, 15, 108, 210, 189, 120, 162, 236, 190, 179, 179, 174, 189, 11, 220, 78, 190, 98, 189, 201, 189, 58, 75, 148, 62, 204, 226, 135, 189, 244, 18, 62, 190, 8, 13, 147, 62, 172, 239, 109, 62, 146, 236, 205, 61, 175, 230, 76, 61, 232, 201, 166, 190, 12, 80, 155, 190, 28, 66, 35, 62, 170, 97, 4, 62, 215, 201, 139, 189, 11, 212, 155, 189, 67, 17, 133, 189, 217, 38, 157, 189, 208, 176, 221, 189, 189, 26, 213, 61, 120, 227, 0, 190, 152, 255, 224, 61, 135, 139, 110, 62, 113, 176, 193, 190, 218, 2, 3, 190, 52, 163, 9, 62, 230, 17, 155, 190, 106, 254, 206, 60, 211, 214, 103, 189, 149, 185, 169, 61, 111, 245, 12, 190, 211, 250, 246, 189, 143, 42, 155, 190, 173, 4, 156, 61, 180, 152, 8, 61, 199, 115, 6, 189, 109, 110, 201, 60, 149, 179, 106, 61, 214, 133, 34, 60, 254, 17, 151, 61, 43, 18, 17, 63, 208, 159, 56, 189, 37, 135, 232, 189, 42, 194, 97, 190, 93, 210, 186, 62, 39, 214, 63, 61, 45, 170, 224, 188, 30, 92, 15, 62, 111, 140, 237, 61, 92, 219, 48, 62, 254, 231, 113, 62, 31, 205, 100, 190, 227, 182, 229, 190, 197, 115, 5, 190, 97, 22, 172, 189, 174, 174, 11, 191, 181, 203, 191, 188, 190, 116, 115, 62, 255, 169, 66, 190, 108, 56, 125, 189, 160, 126, 172, 188, 250, 44, 59, 190, 209, 118, 82, 60, 171, 39, 43, 191, 104, 20, 167, 189, 132, 167, 172, 189, 29, 52, 150, 61, 84, 240, 239, 62, 43, 99, 188, 189, 115, 69, 192, 188, 165, 68, 187, 62, 122, 174, 90, 190, 51, 94, 59, 191, 236, 106, 42, 62, 113, 71, 244, 189, 216, 68, 62, 62, 108, 93, 69, 190, 72, 64, 189, 190, 76, 206, 159, 191, 176, 166, 118, 62, 130, 37, 163, 191, 165, 211, 235, 189, 70, 161, 238, 189, 206, 46, 221, 61, 207, 99, 179, 62, 200, 90, 145, 60, 157, 54, 39, 62, 10, 235, 69, 61, 199, 8, 138, 186, 62, 119, 37, 61, 165, 149, 251, 61, 31, 220, 83, 62, 18, 194, 53, 191, 200, 156, 135, 190, 87, 78, 115, 62, 131, 215, 219, 62, 221, 50, 114, 191, 101, 233, 136, 62, 32, 253, 74, 190, 70, 77, 190, 190, 136, 151, 226, 190, 184, 128, 52, 62, 215, 41, 226, 190, 231, 201, 119, 59, 221, 136, 165, 189, 156, 121, 189, 189, 234, 173, 5, 62, 250, 201, 182, 189, 99, 228, 42, 190, 180, 82, 104, 189, 69, 230, 87, 61, 97, 50, 238, 189, 104, 48, 0, 62, 235, 83, 36, 190, 48, 249, 164, 61, 126, 174, 138, 61, 194, 186, 61, 190, 250, 32, 139, 186, 9, 30, 69, 61, 158, 107, 49, 61, 138, 13, 186, 61, 101, 110, 33, 189, 103, 179, 82, 190, 165, 78, 9, 62, 120, 182, 229, 60, 207, 157, 202, 59, 163, 43, 134, 188, 27, 71, 46, 190, 184, 78, 34, 190, 166, 229, 48, 190, 108, 71, 6, 62, 125, 30, 237, 189, 62, 144, 203, 189, 248, 41, 31, 59, 64, 104, 34, 62, 194, 235, 79, 190, 40, 159, 15, 62, 40, 152, 56, 62, 190, 101, 19, 189, 136, 188, 140, 61, 130, 81, 5, 190, 248, 154, 18, 62, 163, 128, 75, 62, 21, 64, 133, 190, 246, 129, 135, 62, 211, 104, 4, 61, 102, 174, 44, 62, 249, 197, 181, 190, 170, 246, 40, 188, 79, 110, 142, 190, 96, 214, 140, 190, 130, 71, 201, 190, 79, 38, 11, 190, 230, 102, 245, 61, 176, 146, 90, 189, 70, 204, 126, 62, 249, 49, 83, 189, 148, 27, 128, 190, 12, 11, 3, 62, 74, 183, 187, 190, 13, 26, 213, 190, 24, 74, 99, 191, 31, 34, 112, 62, 114, 79, 185, 62, 142, 104, 75, 62, 38, 169, 163, 61, 30, 191, 148, 62, 184, 125, 240, 189, 52, 18, 218, 190, 105, 138, 234, 189, 162, 53, 189, 190, 40, 131, 222, 188, 73, 37, 213, 61, 4, 74, 90, 190, 252, 27, 216, 189, 15, 67, 169, 61, 161, 57, 194, 188, 159, 238, 91, 190, 194, 121, 150, 190, 125, 60, 182, 62, 251, 34, 226, 61, 104, 174, 51, 62, 18, 131, 114, 62, 101, 51, 116, 190, 84, 188, 121, 62, 149, 219, 133, 190, 10, 47, 42, 189, 133, 63, 180, 190, 51, 105, 68, 189, 65, 43, 137, 188, 122, 173, 8, 188, 59, 71, 181, 189, 115, 187, 8, 189, 91, 202, 176, 62, 191, 121, 10, 190, 224, 89, 112, 62, 124, 136, 223, 187, 120, 152, 242, 189, 100, 4, 234, 189, 63, 211, 236, 189, 141, 87, 215, 190, 233, 57, 22, 190, 154, 241, 53, 62, 12, 188, 36, 190, 167, 223, 11, 189, 66, 236, 67, 61, 154, 129, 54, 60, 126, 87, 53, 61, 161, 214, 211, 189, 245, 96, 22, 190, 181, 33, 230, 61, 91, 118, 211, 190, 240, 40, 163, 60, 191, 7, 62, 62, 218, 86, 240, 61, 47, 175, 182, 62, 163, 66, 8, 62, 84, 179, 102, 190, 59, 74, 35, 190, 241, 106, 234, 61, 72, 161, 34, 189, 42, 107, 213, 62, 163, 27, 67, 61, 202, 96, 166, 61, 113, 57, 21, 190, 167, 85, 101, 62, 62, 225, 202, 189, 28, 182, 241, 61, 31, 4, 132, 189, 202, 24, 80, 62, 10, 206, 85, 190, 202, 8, 155, 62, 30, 95, 255, 188, 52, 3, 253, 61, 171, 59, 236, 189, 115, 23, 202, 188, 125, 13, 18, 62, 240, 117, 193, 190, 206, 144, 245, 60, 203, 13, 83, 190, 64, 216, 29, 190, 249, 59, 92, 190, 116, 196, 146, 190, 214, 199, 39, 61, 112, 23, 21, 189, 125, 91, 43, 190, 43, 205, 242, 61, 82, 145, 129, 190, 96, 79, 33, 62, 82, 235, 168, 190, 146, 100, 213, 61, 192, 167, 253, 58, 168, 88, 7, 189, 24, 178, 153, 189, 250, 254, 68, 62, 210, 167, 88, 62, 69, 155, 131, 190, 71, 166, 175, 61, 196, 124, 26, 189, 41, 31, 146, 190, 125, 216, 129, 190, 171, 139, 64, 189, 77, 197, 26, 190, 37, 215, 128, 190, 58, 121, 33, 61, 239, 7, 42, 190, 193, 76, 174, 188, 66, 126, 248, 189, 227, 63, 156, 189, 89, 224, 104, 61, 164, 203, 22, 62, 238, 163, 48, 62, 204, 225, 126, 61, 184, 243, 64, 190, 17, 248, 143, 61, 71, 110, 227, 189, 170, 157, 242, 188, 157, 129, 168, 61, 157, 94, 51, 190, 240, 99, 146, 60, 4, 129, 126, 61, 125, 213, 223, 189, 197, 38, 197, 189, 48, 218, 115, 61, 135, 86, 198, 61, 218, 172, 169, 189, 185, 96, 49, 190, 143, 109, 198, 188, 182, 106, 14, 61, 226, 148, 71, 189, 142, 13, 251, 189, 129, 35, 195, 188, 61, 87, 23, 190, 72, 176, 205, 189, 80, 149, 65, 60, 51, 214, 2, 190, 193, 70, 130, 62, 229, 166, 49, 62, 182, 252, 157, 189, 144, 53, 84, 190, 6, 161, 228, 61, 42, 2, 12, 62, 39, 31, 10, 191, 97, 107, 195, 61, 64, 77, 148, 190, 49, 200, 158, 60, 144, 199, 68, 190, 121, 211, 71, 62, 54, 191, 156, 190, 232, 243, 253, 188, 66, 209, 121, 62, 188, 80, 191, 190, 194, 151, 68, 62, 106, 201, 238, 61, 75, 37, 131, 190, 147, 61, 199, 187, 61, 245, 223, 190, 70, 68, 129, 61, 81, 65, 142, 189, 57, 152, 76, 189, 7, 48, 10, 189, 72, 28, 96, 61, 84, 41, 117, 190, 12, 36, 249, 61, 176, 168, 109, 62, 7, 139, 219, 190, 125, 80, 180, 61, 220, 217, 159, 62, 251, 110, 115, 62, 182, 30, 235, 61, 53, 183, 39, 190, 140, 147, 0, 190, 84, 175, 33, 62, 33, 94, 222, 61, 28, 147, 76, 189, 238, 105, 20, 190, 63, 248, 186, 190, 18, 242, 47, 189, 6, 127, 11, 190, 89, 19, 117, 62, 60, 5, 21, 191, 247, 181, 176, 61, 200, 155, 201, 188, 195, 206, 77, 190, 54, 79, 137, 61, 1, 155, 151, 62, 93, 214, 246, 188, 247, 243, 185, 62, 32, 87, 147, 60, 228, 112, 26, 62, 224, 232, 243, 60, 242, 227, 140, 188, 196, 214, 145, 189, 14, 119, 36, 62, 89, 23, 175, 189, 35, 57, 127, 189, 230, 182, 33, 62, 110, 179, 25, 61, 150, 247, 142, 61, 91, 134, 139, 61, 133, 50, 224, 62, 152, 176, 154, 61, 73, 206, 1, 190, 189, 79, 87, 190, 128, 197, 150, 62, 150, 168, 56, 62, 160, 180, 97, 62, 123, 204, 130, 190, 54, 72, 45, 60, 180, 185, 28, 62, 65, 194, 44, 61, 79, 34, 141, 190, 37, 59, 184, 190, 142, 89, 209, 189, 1, 55, 140, 189, 119, 152, 117, 191, 32, 203, 210, 189, 113, 190, 197, 62, 110, 207, 57, 190, 227, 211, 6, 190, 187, 31, 163, 61, 216, 138, 23, 190, 52, 210, 218, 189, 33, 156, 31, 191, 197, 104, 102, 190, 100, 206, 118, 190, 133, 40, 160, 190, 204, 63, 13, 63, 63, 151, 185, 189, 117, 81, 142, 189, 10, 80, 150, 62, 90, 162, 163, 189, 60, 53, 150, 189, 232, 15, 33, 191, 202, 229, 30, 61, 1, 115, 148, 62, 97, 230, 19, 62, 175, 16, 50, 190, 106, 10, 48, 62, 20, 102, 239, 189, 14, 185, 137, 189, 10, 24, 121, 62, 184, 202, 72, 62, 132, 37, 38, 191, 192, 186, 144, 61, 125, 58, 85, 190, 232, 158, 146, 191, 35, 98, 42, 189, 232, 203, 145, 190, 41, 240, 41, 191, 28, 160, 193, 62, 229, 246, 190, 190, 253, 158, 155, 62, 84, 194, 126, 190, 229, 15, 44, 62, 17, 228, 12, 191, 252, 48, 95, 189, 117, 104, 50, 191, 119, 130, 98, 60, 212, 46, 12, 190, 247, 77, 122, 188, 98, 182, 140, 190, 254, 223, 12, 190, 189, 8, 216, 190, 226, 248, 246, 61, 3, 100, 2, 62, 230, 52, 56, 190, 89, 186, 138, 190, 217, 197, 86, 62, 168, 4, 142, 61, 50, 166, 254, 59, 24, 106, 240, 190, 82, 148, 31, 187, 216, 232, 45, 190, 202, 169, 29, 61, 4, 100, 7, 60, 218, 154, 77, 61, 50, 240, 132, 62, 252, 170, 163, 62, 162, 125, 122, 61, 232, 153, 152, 188, 47, 89, 51, 188, 182, 151, 98, 190, 136, 189, 20, 190, 165, 90, 157, 61, 124, 54, 225, 61, 91, 219, 219, 189, 246, 70, 221, 189, 185, 213, 186, 62, 101, 64, 63, 190, 250, 50, 214, 190, 43, 155, 191, 186, 207, 184, 182, 190, 179, 104, 57, 190, 199, 64, 72, 62, 144, 13, 94, 189, 107, 153, 240, 59, 252, 23, 123, 60, 20, 205, 39, 190, 146, 64, 65, 61, 239, 31, 92, 189, 74, 112, 199, 61, 55, 124, 211, 61, 116, 118, 254, 188, 182, 192, 8, 62, 189, 145, 51, 190, 58, 122, 133, 189, 150, 15, 164, 189, 138, 141, 41, 189, 78, 149, 146, 61, 103, 154, 28, 62, 30, 109, 244, 59, 99, 152, 18, 190, 210, 80, 25, 190, 218, 217, 19, 190, 25, 217, 203, 61, 181, 223, 1, 190, 167, 132, 107, 189, 14, 196, 8, 190, 237, 119, 31, 189, 23, 6, 174, 61, 233, 210, 6, 62, 221, 132, 117, 188, 102, 191, 2, 190, 183, 219, 197, 61, 197, 179, 13, 190, 125, 187, 197, 189, 209, 223, 226, 61, 205, 181, 114, 62, 33, 226, 39, 190, 28, 27, 111, 190, 47, 195, 153, 61, 210, 34, 84, 190, 255, 171, 6, 62, 186, 241, 175, 62, 222, 67, 253, 189, 229, 35, 30, 62, 34, 161, 205, 61, 3, 118, 51, 62, 176, 133, 170, 190, 54, 134, 149, 61, 242, 1, 174, 188, 148, 77, 184, 190, 197, 236, 73, 191, 170, 100, 183, 190, 127, 23, 144, 62, 102, 117, 222, 60, 42, 176, 143, 189, 198, 195, 128, 188, 245, 40, 153, 190, 150, 54, 27, 191, 220, 135, 115, 191, 210, 253, 228, 187, 112, 217, 240, 190, 118, 222, 98, 61, 87, 142, 176, 62, 78, 244, 219, 60, 198, 69, 86, 190, 179, 162, 50, 62, 200, 230, 106, 190, 39, 214, 185, 189, 223, 83, 128, 61, 148, 185, 164, 189, 237, 252, 152, 62, 111, 215, 12, 189, 149, 173, 57, 61, 194, 101, 203, 61, 218, 6, 176, 61, 6, 19, 146, 190, 91, 140, 248, 189, 19, 99, 248, 61, 113, 165, 90, 62, 249, 24, 138, 190, 200, 184, 91, 61, 72, 51, 244, 61, 48, 33, 150, 190, 46, 143, 244, 59, 159, 26, 160, 60, 178, 65, 153, 62, 175, 242, 3, 190, 60, 103, 224, 60, 134, 194, 173, 190, 239, 7, 61, 62, 154, 50, 72, 191, 21, 117, 159, 191, 21, 48, 93, 188, 25, 103, 7, 189, 193, 124, 41, 62, 188, 113, 67, 62, 43, 83, 1, 62, 54, 96, 152, 190, 228, 192, 80, 61, 230, 101, 81, 62, 202, 134, 131, 62, 134, 236, 227, 188, 119, 249, 17, 191, 200, 60, 43, 62, 181, 182, 35, 62, 101, 239, 162, 190, 134, 176, 225, 190, 56, 98, 232, 190, 223, 91, 180, 190, 173, 202, 205, 190, 168, 126, 64, 190, 23, 119, 34, 191, 208, 247, 165, 61, 12, 176, 237, 62, 12, 77, 94, 190, 64, 148, 7, 61, 255, 10, 250, 187, 208, 39, 87, 190, 199, 215, 197, 61, 80, 204, 151, 190, 88, 79, 146, 190, 93, 216, 150, 62, 182, 18, 182, 190, 78, 91, 72, 191, 152, 152, 64, 189, 161, 3, 194, 189, 249, 138, 191, 188, 127, 103, 30, 187, 24, 25, 226, 189, 91, 81, 159, 61, 68, 210, 143, 62, 125, 172, 17, 62, 149, 231, 224, 189, 234, 210, 24, 61, 91, 66, 33, 190, 15, 103, 220, 189, 24, 135, 18, 190, 208, 167, 11, 190, 223, 131, 112, 189, 134, 66, 235, 188, 95, 184, 156, 61, 24, 159, 12, 190, 37, 46, 130, 61, 72, 30, 159, 189, 161, 60, 9, 62, 167, 118, 67, 190, 23, 17, 195, 189, 228, 178, 146, 189, 124, 166, 137, 189, 6, 204, 165, 61, 133, 55, 226, 189, 152, 46, 69, 190, 236, 51, 58, 57, 75, 217, 181, 61, 191, 38, 176, 188, 54, 135, 41, 62, 143, 170, 147, 61, 142, 62, 235, 189, 42, 79, 40, 187, 248, 17, 246, 189, 11, 162, 33, 190, 154, 116, 10, 62, 235, 212, 68, 60, 37, 163, 4, 191, 8, 244, 23, 189, 3, 31, 124, 190, 210, 85, 211, 189, 19, 134, 130, 190, 51, 151, 73, 189, 114, 14, 66, 191, 12, 130, 174, 62, 67, 58, 18, 191, 120, 97, 69, 61, 20, 180, 96, 189, 96, 103, 13, 189, 129, 128, 43, 189, 134, 140, 129, 62, 103, 22, 183, 62, 136, 203, 104, 62, 161, 169, 91, 62, 58, 43, 59, 62, 134, 99, 194, 58, 161, 132, 247, 61, 222, 167, 157, 190, 144, 62, 184, 60, 197, 86, 206, 62, 226, 253, 70, 62, 158, 225, 30, 191, 150, 152, 166, 62, 108, 37, 78, 61, 60, 81, 115, 190, 182, 95, 104, 190, 230, 158, 43, 62, 38, 43, 186, 190, 8, 33, 119, 62, 238, 209, 113, 191, 52, 83, 128, 190, 132, 175, 131, 62, 218, 54, 175, 61, 214, 131, 159, 190, 119, 111, 161, 61, 76, 100, 41, 190, 20, 167, 71, 62, 41, 204, 161, 189, 38, 148, 8, 62, 58, 53, 114, 189, 90, 233, 59, 61, 55, 216, 25, 62, 231, 107, 30, 62, 122, 175, 142, 62, 195, 4, 184, 62, 195, 197, 10, 61, 191, 148, 115, 61, 197, 114, 245, 189, 184, 39, 129, 190, 81, 77, 43, 190, 254, 11, 38, 190, 95, 168, 48, 62, 157, 250, 134, 190, 100, 208, 31, 191, 204, 153, 147, 62, 33, 70, 47, 61, 141, 255, 107, 190, 115, 146, 44, 61, 93, 131, 119, 62, 119, 7, 6, 191, 204, 114, 189, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 168, 128, 62, 244, 38, 154, 62, 199, 200, 198, 188, 6, 147, 144, 60, 95, 42, 43, 62, 127, 6, 167, 190, 189, 79, 195, 62, 207, 190, 139, 189, 198, 114, 169, 61, 130, 65, 120, 62, 209, 137, 178, 61, 162, 199, 135, 61, 169, 168, 102, 62, 220, 239, 158, 62, 169, 218, 78, 61, 191, 94, 12, 62, 99, 197, 47, 190, 9, 246, 53, 190, 72, 98, 43, 189, 144, 186, 115, 61, 152, 233, 150, 189, 2, 138, 64, 189, 117, 147, 209, 188, 148, 59, 59, 188, 156, 133, 95, 190, 107, 197, 52, 190, 130, 69, 16, 62, 161, 150, 186, 62, 15, 223, 104, 61, 133, 130, 240, 60, 131, 5, 112, 62, 239, 240, 144, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {170, 150, 49, 63, 92, 127, 233, 189, 30, 149, 109, 191, 207, 32, 221, 62, 207, 4, 145, 190, 135, 150, 149, 62, 121, 234, 23, 63, 24, 244, 217, 190, 148, 80, 209, 61, 231, 249, 225, 190, 171, 213, 103, 63, 155, 112, 15, 60, 128, 190, 36, 63, 164, 173, 82, 191, 160, 76, 172, 188, 222, 161, 115, 62, 254, 165, 136, 62, 203, 210, 120, 190, 91, 102, 36, 189, 88, 119, 186, 61, 179, 66, 120, 62, 104, 221, 75, 62, 107, 21, 9, 63, 178, 157, 87, 63, 203, 213, 203, 190, 59, 45, 201, 189, 82, 111, 89, 63, 64, 64, 24, 190, 212, 9, 1, 63, 126, 72, 250, 189, 79, 221, 247, 190, 220, 112, 244, 190, 23, 96, 66, 62, 26, 46, 140, 190, 143, 127, 146, 62, 159, 82, 160, 62, 134, 173, 157, 190, 71, 39, 165, 189, 189, 198, 101, 189, 30, 68, 178, 62, 176, 106, 212, 190, 234, 80, 83, 190, 136, 7, 138, 61, 73, 14, 24, 190, 165, 57, 146, 60, 159, 4, 143, 62, 205, 214, 206, 61, 61, 85, 144, 190, 94, 94, 62, 62, 191, 108, 116, 62, 19, 18, 44, 190, 148, 245, 116, 188, 255, 2, 63, 189, 48, 149, 57, 59, 247, 219, 17, 63, 3, 169, 165, 61, 65, 15, 4, 62, 54, 30, 3, 62, 180, 114, 116, 62, 187, 138, 165, 190, 143, 136, 218, 190, 121, 133, 237, 61, 178, 108, 63, 190, 217, 165, 150, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 217, 221, 189, 65, 247, 146, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {161, 185, 100, 191, 38, 173, 226, 188, 162, 243, 103, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {200, 63, 177, 191, 16, 43, 92, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0089/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}