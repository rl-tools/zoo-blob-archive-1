// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 115, 61, 63, 108, 185, 149, 191, 183, 229, 159, 190, 61, 252, 202, 62, 68, 51, 168, 191, 164, 198, 150, 190, 1, 234, 97, 62, 128, 123, 7, 63, 18, 173, 65, 62, 186, 16, 192, 190, 156, 199, 21, 63, 83, 80, 120, 61, 81, 9, 17, 63, 211, 158, 196, 190, 78, 215, 22, 191, 68, 13, 165, 62, 186, 218, 81, 190, 23, 174, 192, 62, 106, 123, 221, 190, 170, 182, 159, 63, 159, 94, 125, 62, 158, 25, 5, 191, 127, 7, 177, 188, 87, 233, 161, 190, 46, 100, 254, 189, 36, 160, 54, 63, 233, 24, 65, 62, 191, 72, 112, 190, 235, 65, 144, 61, 180, 83, 191, 62, 150, 133, 157, 189, 40, 90, 194, 61, 170, 52, 7, 63, 118, 97, 139, 62, 38, 145, 68, 63, 95, 167, 132, 190, 33, 253, 208, 62, 214, 122, 180, 63, 99, 14, 228, 62, 10, 163, 0, 63, 175, 20, 187, 190, 250, 1, 26, 63, 67, 62, 168, 62, 186, 69, 40, 63, 38, 25, 199, 190, 234, 113, 71, 63, 22, 93, 0, 63, 208, 15, 121, 62, 149, 229, 18, 62, 166, 41, 81, 191, 180, 40, 245, 190, 24, 64, 27, 62, 38, 205, 53, 191, 185, 98, 138, 62, 40, 135, 205, 190, 43, 7, 101, 63, 166, 85, 191, 189, 26, 224, 216, 60, 159, 166, 93, 191, 228, 85, 46, 189, 31, 83, 229, 190, 2, 120, 98, 63, 62, 98, 10, 63, 194, 10, 129, 60, 0, 138, 94, 191, 119, 0, 154, 190, 58, 212, 106, 63, 65, 174, 71, 63, 98, 245, 27, 62, 31, 117, 142, 190, 206, 73, 232, 191, 42, 152, 174, 190, 22, 237, 36, 63, 197, 228, 33, 191, 47, 51, 110, 190, 191, 70, 252, 190, 135, 163, 52, 189, 1, 2, 113, 191, 202, 73, 40, 62, 122, 255, 102, 63, 23, 103, 175, 62, 59, 31, 245, 189, 250, 2, 48, 63, 73, 69, 224, 190, 51, 231, 11, 191, 79, 84, 43, 62, 60, 195, 74, 62, 118, 249, 144, 190, 74, 200, 132, 60, 122, 52, 175, 62, 142, 248, 251, 62, 27, 134, 85, 191, 201, 173, 154, 190, 66, 102, 43, 63, 149, 120, 136, 190, 33, 202, 133, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 20, 158, 190, 116, 17, 175, 62, 68, 235, 70, 191, 195, 117, 213, 62, 227, 203, 249, 189, 19, 55, 5, 62, 110, 27, 158, 190, 74, 9, 160, 190, 121, 152, 50, 189, 109, 223, 201, 62, 1, 78, 154, 190, 30, 36, 226, 189, 94, 82, 113, 189, 0, 53, 226, 190, 240, 132, 242, 62, 30, 75, 7, 191, 13, 185, 8, 62, 255, 99, 72, 58, 197, 103, 218, 62, 206, 125, 133, 62, 44, 223, 111, 61, 37, 34, 65, 190, 78, 10, 139, 62, 243, 13, 80, 190, 38, 201, 13, 191, 28, 45, 219, 190, 193, 76, 226, 62, 0, 93, 34, 190, 182, 145, 247, 62, 157, 206, 149, 190, 72, 237, 39, 190, 1, 49, 5, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 255, 160, 189, 134, 120, 197, 190, 84, 98, 146, 190, 29, 181, 68, 62, 207, 22, 30, 190, 77, 20, 7, 62, 33, 155, 16, 62, 116, 177, 135, 62, 164, 168, 17, 62, 62, 239, 90, 62, 247, 71, 181, 189, 252, 249, 63, 191, 227, 39, 214, 60, 214, 128, 205, 190, 111, 124, 130, 191, 125, 35, 32, 191, 176, 192, 13, 190, 30, 46, 96, 62, 86, 104, 146, 62, 88, 171, 67, 189, 126, 127, 59, 62, 97, 252, 66, 190, 178, 165, 215, 190, 69, 160, 134, 191, 161, 52, 34, 61, 17, 18, 168, 190, 203, 223, 179, 61, 245, 75, 10, 60, 212, 178, 35, 62, 63, 135, 98, 60, 186, 78, 138, 190, 232, 187, 6, 191, 53, 53, 222, 190, 173, 199, 103, 61, 20, 83, 60, 189, 28, 90, 199, 189, 66, 175, 207, 188, 28, 114, 36, 62, 108, 39, 178, 189, 239, 115, 39, 62, 157, 201, 138, 189, 118, 138, 153, 61, 107, 184, 96, 189, 226, 69, 184, 61, 138, 224, 41, 189, 98, 193, 70, 62, 47, 127, 188, 62, 29, 200, 238, 189, 77, 240, 129, 61, 158, 108, 123, 62, 25, 80, 60, 61, 214, 4, 83, 62, 145, 205, 183, 61, 200, 238, 228, 61, 204, 192, 106, 62, 133, 63, 129, 61, 122, 213, 95, 191, 234, 69, 109, 62, 176, 250, 81, 61, 86, 121, 20, 190, 235, 142, 220, 188, 250, 34, 118, 61, 76, 21, 151, 190, 253, 186, 96, 62, 34, 72, 234, 190, 230, 178, 134, 62, 214, 25, 80, 62, 239, 94, 202, 60, 106, 247, 70, 190, 65, 28, 11, 190, 218, 93, 150, 191, 112, 166, 46, 62, 212, 50, 121, 191, 44, 54, 9, 61, 176, 247, 21, 190, 96, 104, 84, 189, 50, 179, 252, 189, 16, 201, 152, 189, 217, 229, 1, 61, 41, 197, 110, 61, 73, 161, 97, 62, 192, 21, 195, 62, 7, 64, 124, 61, 223, 196, 237, 61, 97, 167, 50, 191, 199, 71, 212, 190, 25, 223, 128, 62, 129, 168, 147, 62, 248, 155, 92, 191, 92, 245, 74, 62, 123, 174, 136, 191, 156, 67, 225, 189, 180, 0, 20, 190, 77, 17, 118, 62, 55, 236, 222, 190, 14, 163, 35, 191, 144, 159, 0, 63, 12, 120, 147, 59, 72, 7, 151, 189, 233, 183, 133, 190, 165, 27, 167, 62, 5, 110, 99, 62, 235, 93, 7, 62, 240, 225, 6, 190, 136, 119, 135, 62, 255, 134, 65, 189, 60, 187, 179, 61, 129, 75, 70, 189, 174, 138, 171, 190, 248, 119, 15, 190, 155, 29, 12, 190, 154, 61, 48, 191, 159, 227, 210, 60, 218, 211, 79, 62, 3, 7, 182, 61, 26, 213, 178, 60, 225, 56, 33, 62, 87, 193, 12, 60, 181, 161, 61, 190, 54, 90, 11, 191, 161, 65, 222, 61, 106, 213, 190, 189, 233, 238, 251, 61, 164, 105, 80, 62, 118, 175, 103, 61, 67, 138, 32, 190, 131, 103, 91, 62, 129, 81, 50, 190, 17, 168, 233, 190, 161, 189, 133, 189, 111, 42, 129, 189, 223, 89, 17, 62, 230, 209, 87, 187, 96, 24, 27, 189, 183, 20, 26, 190, 21, 212, 196, 189, 49, 113, 148, 189, 175, 53, 192, 61, 65, 198, 158, 189, 156, 247, 91, 62, 121, 191, 90, 189, 238, 223, 233, 61, 209, 26, 211, 62, 22, 190, 149, 62, 98, 56, 233, 189, 134, 239, 18, 190, 204, 223, 160, 61, 252, 140, 111, 189, 115, 223, 70, 190, 108, 249, 230, 190, 23, 160, 116, 62, 200, 0, 178, 190, 119, 75, 63, 191, 41, 46, 17, 61, 21, 13, 55, 62, 83, 200, 143, 189, 243, 109, 68, 62, 88, 162, 165, 61, 253, 65, 214, 190, 20, 1, 241, 62, 168, 18, 155, 190, 91, 16, 104, 190, 182, 163, 1, 60, 156, 168, 6, 190, 127, 158, 121, 61, 101, 3, 179, 189, 116, 34, 218, 189, 2, 200, 171, 62, 209, 16, 77, 190, 144, 44, 96, 190, 216, 190, 128, 190, 234, 83, 169, 62, 43, 30, 238, 189, 255, 171, 74, 188, 75, 241, 137, 62, 27, 183, 197, 189, 4, 75, 72, 62, 123, 5, 6, 190, 205, 187, 62, 62, 152, 174, 39, 190, 129, 41, 14, 189, 149, 121, 86, 190, 110, 13, 106, 186, 141, 6, 237, 188, 27, 247, 53, 62, 136, 161, 20, 62, 247, 210, 182, 190, 249, 187, 167, 189, 165, 149, 2, 190, 253, 1, 22, 190, 114, 44, 37, 190, 168, 119, 85, 59, 132, 254, 153, 62, 9, 91, 137, 62, 113, 144, 173, 189, 15, 73, 185, 190, 228, 156, 13, 190, 180, 218, 5, 61, 99, 190, 53, 62, 31, 204, 12, 190, 124, 240, 146, 61, 48, 18, 86, 189, 160, 86, 191, 189, 247, 66, 175, 190, 199, 8, 29, 191, 152, 209, 227, 61, 161, 89, 136, 61, 96, 73, 16, 191, 169, 167, 210, 60, 66, 59, 132, 62, 185, 247, 34, 191, 70, 107, 123, 62, 128, 59, 246, 61, 248, 11, 101, 59, 49, 198, 135, 188, 105, 41, 237, 61, 210, 48, 123, 190, 187, 48, 176, 190, 103, 128, 63, 188, 132, 242, 0, 191, 248, 159, 4, 62, 192, 4, 189, 61, 234, 216, 18, 62, 170, 121, 139, 62, 151, 27, 226, 190, 163, 133, 20, 191, 10, 90, 122, 61, 237, 36, 46, 62, 167, 226, 146, 60, 203, 2, 237, 60, 223, 230, 240, 61, 208, 249, 2, 62, 4, 66, 79, 190, 107, 127, 141, 61, 194, 117, 3, 190, 45, 146, 8, 62, 198, 70, 53, 188, 217, 201, 96, 62, 99, 58, 19, 63, 136, 32, 228, 62, 38, 11, 89, 189, 132, 114, 218, 189, 33, 246, 46, 62, 225, 21, 132, 190, 15, 127, 75, 190, 9, 185, 104, 190, 157, 237, 155, 62, 145, 130, 6, 191, 253, 140, 217, 190, 34, 90, 178, 190, 55, 78, 172, 61, 153, 77, 137, 62, 145, 173, 165, 60, 12, 243, 65, 190, 214, 73, 242, 190, 228, 91, 141, 62, 133, 135, 54, 62, 99, 107, 253, 61, 55, 141, 139, 190, 219, 167, 172, 190, 156, 18, 128, 62, 145, 187, 146, 189, 100, 43, 1, 190, 188, 204, 68, 62, 27, 61, 196, 189, 66, 142, 197, 189, 201, 112, 247, 61, 131, 51, 193, 61, 125, 177, 252, 190, 252, 44, 165, 188, 162, 21, 34, 62, 56, 245, 41, 190, 182, 234, 61, 62, 168, 136, 149, 62, 91, 41, 173, 189, 231, 204, 83, 62, 12, 57, 69, 61, 104, 207, 5, 62, 184, 8, 122, 62, 85, 200, 134, 190, 207, 119, 149, 190, 37, 116, 243, 189, 28, 120, 20, 62, 162, 71, 243, 188, 123, 219, 39, 190, 78, 5, 147, 190, 173, 111, 44, 62, 255, 22, 187, 61, 46, 220, 231, 190, 172, 131, 116, 62, 232, 199, 125, 189, 65, 13, 18, 62, 21, 18, 7, 190, 21, 33, 16, 62, 148, 58, 142, 191, 227, 3, 71, 62, 146, 49, 122, 191, 184, 41, 23, 190, 155, 214, 101, 189, 104, 249, 17, 190, 100, 51, 222, 62, 106, 25, 64, 190, 34, 6, 43, 62, 255, 206, 76, 62, 134, 254, 201, 61, 82, 253, 80, 62, 48, 222, 74, 190, 97, 35, 99, 62, 218, 36, 163, 190, 1, 235, 210, 189, 245, 230, 23, 62, 225, 237, 129, 62, 238, 57, 16, 191, 106, 231, 198, 61, 74, 214, 197, 185, 62, 140, 250, 189, 233, 83, 208, 190, 201, 177, 95, 62, 66, 123, 141, 190, 57, 155, 219, 189, 137, 36, 122, 62, 170, 82, 9, 189, 30, 186, 57, 190, 197, 5, 176, 190, 152, 88, 78, 190, 66, 245, 54, 62, 223, 34, 103, 189, 85, 69, 121, 62, 120, 217, 47, 61, 123, 95, 51, 60, 186, 211, 87, 62, 87, 199, 204, 190, 236, 240, 49, 191, 67, 90, 95, 189, 44, 161, 63, 60, 207, 207, 250, 190, 73, 232, 53, 190, 34, 117, 160, 62, 139, 68, 81, 189, 121, 207, 30, 62, 212, 121, 52, 190, 102, 133, 36, 191, 236, 50, 252, 189, 240, 44, 235, 190, 182, 166, 41, 190, 11, 220, 78, 190, 29, 142, 243, 189, 58, 75, 148, 62, 188, 106, 98, 189, 31, 215, 70, 190, 190, 175, 26, 62, 129, 136, 73, 62, 219, 0, 217, 61, 167, 91, 131, 61, 244, 159, 153, 190, 152, 146, 142, 190, 35, 47, 31, 62, 159, 234, 33, 62, 224, 71, 237, 188, 16, 56, 34, 189, 232, 135, 154, 188, 51, 133, 121, 189, 10, 96, 161, 189, 60, 233, 26, 61, 235, 164, 192, 189, 142, 68, 218, 61, 96, 204, 114, 62, 207, 47, 184, 190, 33, 50, 240, 189, 67, 36, 9, 62, 90, 168, 157, 190, 182, 34, 71, 61, 83, 232, 128, 188, 53, 127, 197, 61, 214, 125, 11, 190, 86, 13, 203, 189, 35, 243, 156, 190, 25, 99, 192, 61, 193, 168, 132, 61, 49, 83, 85, 189, 225, 137, 122, 61, 67, 253, 202, 61, 200, 67, 137, 60, 50, 95, 117, 61, 46, 186, 12, 63, 60, 50, 27, 189, 148, 135, 158, 189, 165, 76, 84, 190, 162, 185, 187, 62, 29, 228, 153, 60, 95, 73, 54, 187, 247, 232, 5, 62, 41, 68, 8, 62, 145, 21, 20, 62, 142, 104, 109, 62, 137, 69, 112, 190, 36, 253, 223, 190, 250, 220, 16, 190, 230, 156, 163, 189, 237, 48, 15, 191, 133, 212, 173, 188, 78, 115, 99, 62, 97, 20, 38, 190, 165, 63, 104, 189, 132, 192, 195, 188, 36, 41, 50, 190, 253, 120, 48, 60, 128, 98, 34, 191, 161, 52, 33, 190, 86, 138, 212, 189, 228, 163, 178, 61, 238, 106, 229, 62, 223, 244, 247, 189, 78, 120, 214, 188, 245, 246, 185, 62, 91, 71, 111, 190, 166, 128, 56, 191, 9, 223, 48, 62, 113, 71, 244, 189, 40, 165, 36, 62, 216, 135, 74, 190, 134, 88, 176, 190, 202, 205, 141, 191, 158, 171, 64, 62, 153, 220, 148, 191, 221, 183, 243, 189, 22, 70, 35, 190, 120, 111, 16, 62, 203, 168, 188, 62, 71, 150, 25, 189, 52, 171, 44, 62, 155, 194, 163, 61, 184, 54, 51, 188, 162, 114, 177, 61, 212, 14, 185, 61, 111, 149, 90, 62, 33, 251, 83, 191, 8, 210, 161, 190, 67, 122, 135, 62, 229, 62, 182, 62, 40, 108, 103, 191, 54, 6, 122, 62, 181, 235, 70, 190, 205, 171, 186, 190, 97, 107, 241, 190, 196, 235, 138, 61, 198, 90, 226, 190, 75, 106, 169, 60, 221, 136, 165, 189, 156, 121, 189, 189, 234, 173, 5, 62, 250, 201, 182, 189, 99, 228, 42, 190, 180, 82, 104, 189, 69, 230, 87, 61, 97, 50, 238, 189, 104, 48, 0, 62, 235, 83, 36, 190, 48, 249, 164, 61, 126, 174, 138, 61, 194, 186, 61, 190, 250, 32, 139, 186, 9, 30, 69, 61, 158, 107, 49, 61, 138, 13, 186, 61, 101, 110, 33, 189, 103, 179, 82, 190, 165, 78, 9, 62, 120, 182, 229, 60, 207, 157, 202, 59, 163, 43, 134, 188, 27, 71, 46, 190, 184, 78, 34, 190, 166, 229, 48, 190, 108, 71, 6, 62, 125, 30, 237, 189, 62, 144, 203, 189, 248, 41, 31, 59, 64, 104, 34, 62, 194, 235, 79, 190, 120, 225, 239, 61, 52, 105, 35, 62, 78, 164, 25, 61, 143, 78, 64, 61, 146, 91, 245, 189, 229, 65, 22, 62, 81, 218, 86, 62, 79, 152, 221, 189, 234, 247, 141, 62, 236, 35, 147, 60, 33, 5, 63, 62, 226, 128, 201, 190, 102, 178, 182, 188, 182, 212, 132, 190, 91, 45, 132, 190, 66, 248, 205, 190, 142, 247, 39, 190, 177, 81, 250, 61, 39, 59, 108, 189, 247, 163, 79, 62, 204, 20, 51, 189, 89, 116, 126, 190, 81, 14, 237, 61, 102, 232, 209, 190, 243, 57, 213, 190, 222, 171, 22, 191, 178, 53, 107, 62, 148, 131, 190, 62, 129, 181, 57, 62, 17, 219, 217, 61, 68, 102, 141, 62, 8, 249, 8, 190, 217, 143, 223, 190, 218, 16, 217, 189, 162, 53, 189, 190, 10, 77, 180, 189, 156, 78, 190, 61, 124, 61, 255, 189, 35, 206, 150, 190, 190, 165, 94, 61, 132, 228, 131, 190, 174, 153, 191, 189, 194, 121, 150, 190, 136, 247, 162, 62, 132, 248, 70, 188, 148, 174, 51, 62, 229, 193, 97, 62, 155, 74, 111, 189, 65, 36, 95, 62, 149, 219, 133, 190, 84, 82, 176, 189, 162, 255, 185, 190, 193, 130, 248, 189, 185, 8, 140, 189, 245, 34, 65, 61, 30, 19, 16, 190, 220, 239, 11, 190, 30, 151, 149, 62, 134, 228, 211, 189, 104, 46, 58, 62, 146, 217, 163, 189, 120, 152, 242, 189, 26, 41, 240, 189, 11, 203, 236, 189, 42, 171, 205, 190, 60, 190, 24, 190, 103, 165, 33, 62, 84, 41, 28, 190, 28, 85, 223, 187, 116, 50, 120, 61, 1, 242, 136, 187, 79, 32, 109, 61, 85, 107, 247, 189, 188, 61, 17, 190, 50, 217, 217, 61, 131, 125, 182, 190, 117, 235, 203, 60, 68, 15, 72, 62, 29, 125, 29, 62, 68, 97, 202, 62, 145, 66, 13, 62, 153, 66, 88, 190, 123, 140, 2, 190, 229, 19, 180, 61, 25, 84, 79, 189, 238, 195, 208, 62, 123, 2, 227, 61, 130, 246, 96, 61, 99, 242, 106, 189, 103, 129, 121, 62, 25, 74, 196, 189, 191, 230, 33, 62, 248, 43, 111, 189, 66, 198, 70, 62, 188, 155, 74, 190, 118, 194, 164, 62, 184, 115, 1, 188, 210, 128, 31, 62, 33, 59, 236, 189, 121, 105, 27, 61, 11, 163, 7, 62, 47, 11, 133, 190, 135, 96, 240, 61, 69, 227, 45, 190, 214, 14, 150, 189, 14, 181, 23, 190, 220, 3, 147, 190, 69, 204, 7, 61, 175, 28, 193, 60, 178, 93, 35, 190, 22, 165, 15, 62, 231, 5, 118, 190, 32, 42, 49, 62, 9, 5, 61, 190, 193, 158, 25, 62, 218, 97, 143, 61, 97, 249, 63, 186, 96, 244, 63, 189, 161, 200, 80, 62, 222, 31, 116, 62, 38, 249, 124, 190, 238, 240, 4, 62, 150, 53, 10, 60, 252, 110, 127, 190, 56, 141, 62, 190, 210, 122, 62, 189, 135, 182, 15, 190, 247, 247, 52, 190, 58, 121, 33, 61, 239, 7, 42, 190, 193, 76, 174, 188, 66, 126, 248, 189, 227, 63, 156, 189, 89, 224, 104, 61, 164, 203, 22, 62, 238, 163, 48, 62, 204, 225, 126, 61, 184, 243, 64, 190, 17, 248, 143, 61, 71, 110, 227, 189, 170, 157, 242, 188, 157, 129, 168, 61, 157, 94, 51, 190, 240, 99, 146, 60, 4, 129, 126, 61, 125, 213, 223, 189, 197, 38, 197, 189, 48, 218, 115, 61, 135, 86, 198, 61, 218, 172, 169, 189, 185, 96, 49, 190, 143, 109, 198, 188, 182, 106, 14, 61, 226, 148, 71, 189, 142, 13, 251, 189, 129, 35, 195, 188, 61, 87, 23, 190, 72, 176, 205, 189, 80, 149, 65, 60, 51, 214, 2, 190, 99, 99, 117, 62, 41, 153, 63, 62, 182, 252, 157, 189, 161, 180, 87, 190, 164, 85, 223, 61, 16, 142, 33, 62, 180, 106, 12, 191, 128, 18, 176, 61, 61, 250, 154, 190, 217, 195, 121, 61, 89, 24, 233, 189, 163, 41, 51, 62, 186, 77, 145, 190, 251, 185, 6, 61, 127, 70, 122, 62, 158, 180, 189, 190, 164, 246, 57, 62, 25, 115, 36, 62, 10, 211, 115, 190, 3, 207, 251, 60, 39, 176, 189, 190, 117, 84, 118, 61, 43, 248, 130, 189, 125, 248, 195, 188, 37, 99, 181, 189, 155, 149, 252, 60, 145, 29, 85, 190, 152, 178, 192, 61, 29, 177, 125, 62, 176, 2, 169, 190, 224, 164, 167, 61, 163, 78, 167, 62, 76, 73, 100, 62, 239, 166, 238, 61, 20, 209, 47, 190, 146, 19, 15, 190, 18, 161, 33, 62, 225, 49, 179, 61, 56, 55, 17, 189, 156, 91, 23, 190, 163, 6, 200, 190, 105, 104, 167, 189, 211, 226, 26, 190, 205, 91, 102, 62, 215, 176, 21, 191, 112, 240, 160, 61, 40, 242, 136, 188, 161, 69, 96, 190, 47, 162, 116, 61, 22, 141, 141, 62, 171, 251, 78, 187, 55, 47, 181, 62, 189, 247, 178, 188, 19, 181, 25, 62, 110, 31, 216, 60, 7, 123, 255, 187, 137, 1, 253, 189, 39, 241, 20, 62, 178, 29, 155, 189, 235, 45, 174, 189, 76, 156, 174, 61, 93, 13, 165, 60, 28, 28, 132, 61, 204, 3, 40, 61, 204, 151, 223, 62, 190, 121, 245, 61, 8, 39, 12, 190, 81, 49, 73, 190, 33, 12, 154, 62, 130, 67, 89, 62, 235, 230, 82, 62, 43, 90, 130, 190, 251, 190, 169, 187, 33, 152, 58, 62, 104, 156, 81, 61, 10, 9, 140, 190, 226, 64, 156, 190, 143, 67, 162, 189, 2, 113, 83, 189, 120, 61, 99, 191, 107, 122, 244, 189, 6, 211, 216, 62, 38, 239, 36, 190, 186, 5, 186, 189, 229, 186, 151, 61, 60, 231, 52, 190, 17, 18, 94, 189, 12, 149, 21, 191, 239, 183, 125, 190, 31, 24, 131, 190, 25, 2, 132, 190, 76, 47, 14, 63, 109, 128, 138, 189, 51, 75, 154, 189, 50, 192, 148, 62, 134, 57, 110, 189, 60, 53, 150, 189, 24, 190, 47, 191, 242, 192, 175, 61, 72, 34, 157, 62, 97, 230, 19, 62, 14, 151, 34, 190, 106, 253, 41, 62, 203, 93, 8, 62, 109, 58, 156, 189, 96, 250, 114, 62, 72, 141, 71, 62, 124, 47, 42, 191, 242, 155, 53, 61, 190, 17, 62, 190, 156, 159, 133, 191, 79, 104, 138, 188, 252, 12, 130, 190, 93, 20, 35, 191, 136, 160, 208, 62, 100, 21, 221, 190, 180, 81, 152, 62, 84, 194, 126, 190, 230, 233, 53, 62, 173, 11, 36, 191, 252, 48, 95, 189, 78, 187, 143, 190, 15, 141, 226, 58, 72, 126, 210, 189, 21, 87, 168, 187, 237, 237, 135, 190, 254, 223, 12, 190, 207, 220, 203, 190, 215, 237, 0, 62, 199, 48, 239, 61, 230, 52, 56, 190, 230, 171, 252, 190, 67, 35, 84, 62, 255, 202, 46, 62, 50, 166, 254, 59, 206, 114, 216, 190, 82, 148, 31, 187, 220, 119, 163, 189, 142, 180, 40, 61, 163, 69, 206, 189, 58, 174, 163, 59, 82, 57, 147, 62, 226, 105, 147, 62, 243, 30, 137, 61, 129, 71, 162, 188, 125, 116, 226, 59, 105, 245, 205, 190, 235, 170, 33, 190, 165, 90, 157, 61, 131, 82, 2, 62, 181, 118, 49, 190, 218, 63, 221, 189, 214, 125, 203, 62, 51, 61, 15, 190, 133, 50, 251, 190, 44, 211, 75, 61, 33, 77, 166, 190, 221, 109, 57, 190, 87, 207, 73, 62, 236, 69, 21, 189, 107, 153, 240, 59, 252, 23, 123, 60, 20, 205, 39, 190, 146, 64, 65, 61, 239, 31, 92, 189, 74, 112, 199, 61, 55, 124, 211, 61, 116, 118, 254, 188, 182, 192, 8, 62, 189, 145, 51, 190, 58, 122, 133, 189, 150, 15, 164, 189, 138, 141, 41, 189, 78, 149, 146, 61, 103, 154, 28, 62, 30, 109, 244, 59, 99, 152, 18, 190, 210, 80, 25, 190, 218, 217, 19, 190, 25, 217, 203, 61, 181, 223, 1, 190, 167, 132, 107, 189, 14, 196, 8, 190, 237, 119, 31, 189, 23, 6, 174, 61, 233, 210, 6, 62, 221, 132, 117, 188, 102, 191, 2, 190, 183, 219, 197, 61, 197, 179, 13, 190, 125, 187, 197, 189, 209, 223, 226, 61, 126, 8, 150, 62, 79, 150, 32, 190, 46, 201, 57, 190, 27, 134, 105, 58, 210, 34, 84, 190, 248, 29, 254, 61, 4, 136, 129, 62, 202, 47, 200, 60, 114, 18, 166, 61, 217, 185, 130, 61, 198, 139, 25, 62, 209, 141, 179, 190, 157, 3, 39, 188, 112, 27, 175, 188, 244, 168, 165, 190, 90, 31, 65, 191, 170, 100, 183, 190, 126, 214, 143, 62, 34, 156, 41, 189, 14, 214, 187, 189, 143, 107, 139, 189, 245, 40, 153, 190, 4, 169, 31, 191, 2, 33, 131, 191, 210, 253, 228, 187, 16, 192, 128, 190, 201, 121, 30, 188, 150, 180, 193, 62, 247, 194, 227, 188, 103, 181, 105, 190, 5, 82, 54, 62, 3, 75, 107, 190, 45, 234, 155, 189, 108, 20, 158, 61, 42, 98, 164, 189, 0, 45, 125, 62, 3, 230, 69, 189, 87, 242, 153, 61, 190, 238, 12, 62, 250, 88, 200, 60, 60, 144, 116, 190, 57, 58, 247, 189, 223, 244, 24, 62, 88, 57, 113, 62, 242, 134, 87, 190, 200, 220, 86, 61, 179, 113, 238, 61, 185, 153, 158, 190, 183, 221, 109, 60, 189, 57, 65, 61, 155, 119, 110, 62, 27, 144, 137, 189, 117, 217, 12, 61, 189, 229, 157, 190, 164, 169, 76, 62, 35, 49, 37, 191, 66, 69, 153, 191, 95, 89, 141, 188, 209, 42, 226, 188, 150, 56, 71, 62, 185, 90, 20, 62, 102, 137, 42, 62, 13, 53, 154, 190, 131, 180, 40, 61, 37, 159, 75, 62, 36, 101, 125, 62, 134, 236, 227, 188, 50, 246, 21, 191, 13, 78, 47, 62, 179, 232, 16, 62, 248, 245, 121, 190, 91, 116, 227, 190, 175, 46, 200, 190, 195, 188, 201, 190, 5, 98, 223, 190, 105, 7, 83, 190, 14, 14, 28, 191, 153, 61, 143, 61, 167, 205, 239, 62, 212, 55, 84, 190, 176, 151, 66, 60, 39, 58, 34, 189, 53, 201, 72, 190, 221, 251, 109, 61, 64, 90, 144, 190, 4, 50, 151, 190, 199, 183, 154, 62, 147, 44, 189, 190, 170, 29, 67, 191, 27, 30, 185, 189, 34, 215, 130, 189, 0, 145, 99, 189, 208, 160, 24, 190, 29, 213, 81, 189, 132, 92, 152, 61, 72, 207, 140, 62, 235, 107, 21, 62, 14, 176, 211, 189, 234, 210, 24, 61, 91, 66, 33, 190, 184, 169, 220, 189, 177, 42, 12, 190, 208, 167, 11, 190, 223, 131, 112, 189, 134, 66, 235, 188, 242, 34, 165, 61, 146, 183, 11, 190, 37, 46, 130, 61, 76, 23, 158, 189, 139, 192, 14, 62, 93, 51, 67, 190, 44, 33, 192, 189, 245, 118, 145, 189, 47, 224, 125, 189, 6, 204, 165, 61, 106, 24, 218, 189, 152, 46, 69, 190, 133, 108, 110, 55, 110, 162, 194, 61, 9, 134, 177, 188, 238, 38, 42, 62, 143, 170, 147, 61, 83, 160, 228, 189, 42, 79, 40, 187, 42, 223, 244, 189, 11, 162, 33, 190, 203, 233, 12, 62, 209, 200, 112, 60, 187, 240, 0, 191, 131, 173, 15, 189, 112, 201, 129, 190, 150, 212, 28, 190, 88, 206, 130, 190, 53, 35, 25, 189, 103, 107, 37, 191, 156, 24, 165, 62, 73, 73, 251, 190, 143, 127, 16, 61, 82, 46, 77, 189, 154, 108, 103, 60, 200, 80, 33, 188, 24, 90, 125, 62, 89, 99, 183, 62, 66, 40, 105, 62, 77, 160, 101, 62, 150, 94, 84, 62, 50, 234, 8, 189, 245, 58, 8, 62, 114, 127, 162, 190, 100, 41, 252, 60, 126, 174, 209, 62, 126, 34, 77, 62, 8, 56, 21, 191, 13, 57, 172, 62, 110, 75, 46, 61, 56, 205, 71, 190, 151, 90, 141, 190, 77, 250, 55, 62, 176, 106, 183, 190, 241, 241, 131, 62, 204, 220, 98, 191, 165, 55, 80, 190, 144, 52, 69, 62, 16, 197, 182, 187, 240, 41, 115, 190, 169, 135, 159, 61, 15, 64, 50, 190, 196, 112, 0, 62, 244, 86, 169, 189, 117, 51, 205, 61, 116, 33, 130, 189, 28, 74, 31, 62, 183, 42, 66, 62, 156, 32, 30, 62, 90, 187, 172, 62, 174, 4, 186, 62, 75, 152, 200, 61, 236, 224, 137, 61, 57, 14, 21, 190, 174, 184, 121, 190, 17, 207, 75, 190, 166, 9, 0, 190, 175, 119, 102, 62, 164, 59, 86, 190, 250, 94, 240, 190, 224, 39, 156, 62, 245, 64, 63, 61, 170, 154, 40, 190, 9, 42, 130, 189, 210, 237, 108, 62, 235, 25, 238, 190, 12, 135, 197, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 242, 124, 62, 210, 210, 137, 62, 143, 39, 213, 188, 238, 214, 182, 61, 174, 128, 14, 62, 153, 114, 154, 190, 26, 203, 171, 62, 72, 63, 2, 190, 72, 80, 205, 61, 131, 52, 99, 62, 121, 198, 143, 61, 63, 139, 188, 61, 226, 122, 114, 62, 65, 236, 163, 62, 169, 218, 78, 61, 106, 74, 228, 61, 241, 249, 234, 189, 191, 237, 48, 190, 233, 106, 196, 186, 144, 186, 115, 61, 125, 208, 69, 189, 70, 85, 50, 189, 19, 15, 227, 60, 56, 27, 215, 59, 240, 59, 143, 190, 107, 197, 52, 190, 82, 57, 187, 61, 98, 137, 175, 62, 129, 236, 111, 61, 65, 110, 20, 61, 98, 41, 92, 62, 76, 134, 85, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 170, 24, 63, 224, 36, 213, 189, 251, 232, 90, 191, 34, 57, 198, 62, 26, 174, 135, 190, 50, 61, 125, 62, 253, 67, 22, 63, 108, 238, 193, 190, 254, 170, 241, 61, 194, 231, 222, 190, 144, 98, 102, 63, 170, 94, 169, 60, 164, 121, 36, 63, 114, 82, 86, 191, 160, 76, 172, 188, 11, 66, 85, 62, 0, 128, 105, 62, 165, 255, 137, 190, 47, 158, 194, 188, 88, 119, 186, 61, 202, 60, 118, 62, 226, 34, 87, 62, 205, 116, 10, 63, 188, 168, 73, 63, 187, 107, 251, 190, 59, 45, 201, 189, 234, 84, 69, 63, 62, 126, 240, 189, 128, 75, 6, 63, 23, 140, 250, 189, 63, 206, 253, 190, 157, 184, 245, 190, 95, 19, 66, 62, 215, 209, 142, 190, 219, 112, 122, 62, 41, 132, 144, 62, 254, 216, 141, 190, 56, 120, 227, 189, 203, 67, 172, 189, 40, 226, 200, 62, 193, 92, 197, 190, 36, 37, 99, 190, 92, 197, 222, 61, 124, 218, 37, 190, 6, 69, 56, 61, 3, 104, 130, 62, 205, 214, 206, 61, 9, 97, 158, 190, 137, 174, 48, 62, 242, 136, 115, 62, 11, 220, 40, 190, 148, 245, 116, 188, 77, 18, 183, 188, 153, 218, 7, 61, 129, 190, 9, 63, 97, 39, 192, 61, 200, 229, 13, 62, 54, 30, 3, 62, 251, 179, 20, 62, 37, 9, 160, 190, 111, 109, 224, 190, 239, 22, 237, 61, 201, 15, 51, 190, 29, 5, 146, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 49, 158, 189, 92, 184, 135, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {157, 241, 68, 190, 184, 39, 135, 62, 28, 84, 168, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {86, 99, 150, 63, 211, 16, 40, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0089/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}