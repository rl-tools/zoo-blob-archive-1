// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 16, 200, 62, 72, 122, 18, 191, 252, 241, 130, 190, 170, 246, 115, 62, 120, 64, 157, 190, 210, 196, 237, 190, 78, 67, 223, 190, 125, 168, 143, 60, 215, 78, 146, 62, 146, 176, 229, 190, 82, 48, 184, 62, 252, 147, 76, 62, 68, 3, 100, 62, 224, 40, 12, 60, 119, 33, 15, 191, 41, 1, 183, 62, 144, 119, 17, 191, 115, 119, 141, 62, 76, 178, 180, 189, 255, 238, 131, 190, 195, 133, 208, 62, 227, 64, 232, 190, 185, 141, 253, 62, 245, 85, 231, 61, 224, 232, 134, 190, 85, 91, 149, 190, 188, 75, 66, 61, 26, 29, 250, 190, 235, 72, 181, 190, 73, 241, 224, 62, 203, 168, 166, 189, 236, 36, 8, 191, 45, 143, 178, 62, 167, 93, 69, 61, 239, 56, 205, 62, 7, 50, 18, 62, 203, 210, 131, 190, 140, 58, 15, 63, 217, 147, 18, 63, 68, 216, 142, 62, 205, 117, 68, 190, 38, 143, 15, 63, 202, 229, 170, 62, 204, 88, 194, 62, 170, 191, 104, 189, 37, 201, 219, 189, 214, 127, 31, 189, 244, 207, 123, 62, 78, 28, 71, 189, 245, 232, 5, 63, 130, 124, 197, 190, 194, 123, 34, 62, 106, 253, 0, 191, 192, 36, 172, 61, 111, 154, 151, 190, 218, 153, 81, 62, 121, 111, 177, 62, 47, 255, 14, 60, 225, 155, 43, 61, 35, 183, 86, 190, 77, 92, 128, 190, 31, 12, 170, 189, 48, 68, 8, 63, 251, 228, 59, 62, 132, 196, 141, 190, 117, 194, 123, 190, 114, 96, 11, 63, 64, 30, 16, 63, 250, 22, 163, 61, 238, 136, 180, 190, 2, 59, 177, 190, 200, 208, 213, 190, 235, 127, 139, 62, 125, 145, 154, 190, 62, 94, 7, 190, 36, 14, 229, 190, 239, 101, 206, 62, 216, 43, 5, 191, 130, 135, 113, 189, 20, 153, 167, 190, 25, 93, 12, 63, 140, 187, 214, 62, 136, 158, 14, 63, 251, 176, 53, 190, 8, 62, 197, 190, 23, 210, 155, 190, 69, 165, 167, 62, 219, 81, 208, 190, 247, 57, 80, 190, 176, 249, 140, 62, 114, 198, 123, 62, 175, 255, 135, 190, 41, 146, 124, 190, 43, 226, 226, 62, 91, 11, 211, 189, 178, 127, 217, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 151, 19, 191, 184, 189, 4, 63, 156, 204, 214, 190, 38, 155, 169, 62, 62, 86, 228, 189, 120, 96, 174, 61, 83, 244, 203, 190, 199, 6, 142, 189, 165, 204, 14, 62, 99, 81, 1, 63, 135, 142, 157, 190, 59, 154, 33, 62, 37, 158, 79, 61, 196, 49, 237, 189, 56, 107, 169, 62, 67, 19, 192, 189, 53, 14, 176, 62, 25, 236, 109, 190, 34, 73, 1, 63, 119, 134, 94, 62, 136, 150, 134, 59, 78, 130, 211, 190, 1, 97, 5, 63, 102, 20, 216, 61, 85, 2, 244, 190, 123, 169, 40, 190, 76, 239, 197, 62, 13, 50, 236, 190, 112, 230, 243, 62, 31, 251, 14, 190, 202, 201, 183, 190, 19, 222, 191, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 135, 227, 60, 71, 86, 238, 61, 136, 40, 134, 61, 178, 173, 46, 60, 154, 126, 129, 189, 16, 180, 161, 61, 86, 27, 15, 62, 206, 148, 44, 62, 69, 196, 160, 189, 113, 27, 251, 61, 17, 41, 16, 190, 206, 70, 13, 190, 6, 61, 48, 62, 173, 198, 33, 190, 5, 234, 112, 189, 180, 135, 107, 186, 150, 66, 209, 61, 39, 255, 190, 61, 13, 211, 246, 61, 73, 146, 138, 61, 113, 210, 40, 62, 228, 63, 190, 61, 13, 55, 5, 186, 143, 176, 99, 189, 168, 27, 45, 62, 164, 83, 168, 61, 144, 96, 66, 61, 227, 226, 10, 189, 175, 103, 35, 61, 149, 218, 33, 62, 231, 199, 161, 189, 100, 165, 140, 189, 134, 41, 39, 190, 104, 57, 150, 189, 79, 185, 155, 60, 89, 251, 252, 189, 253, 223, 38, 189, 189, 28, 204, 61, 102, 199, 163, 189, 231, 3, 27, 62, 186, 68, 222, 61, 45, 221, 150, 61, 105, 251, 147, 189, 255, 186, 13, 61, 39, 3, 23, 189, 161, 194, 9, 62, 52, 61, 199, 61, 196, 76, 246, 189, 62, 218, 187, 187, 7, 238, 44, 62, 147, 20, 120, 188, 32, 229, 149, 61, 86, 218, 220, 61, 89, 238, 253, 61, 109, 137, 86, 61, 175, 217, 56, 189, 145, 201, 243, 189, 157, 95, 219, 61, 28, 244, 130, 59, 176, 255, 2, 188, 163, 54, 250, 188, 101, 179, 80, 60, 162, 48, 40, 190, 241, 63, 233, 60, 17, 200, 19, 61, 165, 57, 50, 61, 229, 164, 33, 62, 72, 34, 102, 60, 94, 189, 200, 189, 87, 5, 50, 190, 243, 60, 218, 189, 101, 109, 248, 61, 87, 218, 15, 62, 25, 123, 37, 61, 144, 24, 39, 190, 161, 178, 62, 189, 228, 115, 145, 189, 145, 66, 138, 189, 34, 236, 171, 189, 154, 113, 18, 62, 183, 134, 13, 62, 164, 218, 21, 61, 95, 95, 128, 61, 161, 203, 192, 189, 85, 129, 5, 189, 111, 140, 29, 190, 240, 110, 255, 60, 65, 58, 184, 61, 241, 19, 158, 61, 110, 206, 175, 61, 16, 215, 181, 189, 240, 31, 144, 61, 213, 7, 5, 62, 150, 108, 211, 189, 66, 64, 51, 190, 40, 8, 20, 190, 239, 130, 38, 62, 105, 173, 136, 186, 85, 121, 27, 62, 242, 52, 16, 190, 123, 218, 36, 62, 17, 150, 31, 60, 128, 33, 53, 60, 99, 150, 37, 190, 78, 227, 19, 189, 19, 146, 1, 190, 174, 135, 243, 188, 192, 205, 130, 189, 161, 104, 110, 189, 12, 24, 218, 60, 181, 212, 24, 190, 233, 161, 14, 61, 27, 221, 3, 62, 244, 186, 39, 190, 162, 60, 24, 62, 154, 228, 234, 61, 112, 162, 176, 61, 36, 230, 36, 188, 123, 161, 33, 190, 226, 96, 24, 190, 33, 64, 19, 61, 77, 215, 102, 188, 13, 161, 163, 61, 246, 196, 9, 61, 4, 186, 218, 188, 181, 153, 180, 189, 124, 26, 25, 188, 216, 229, 160, 189, 108, 119, 242, 60, 226, 159, 89, 59, 23, 250, 79, 189, 143, 147, 188, 61, 163, 211, 105, 61, 102, 105, 183, 189, 240, 79, 203, 189, 32, 24, 148, 189, 84, 225, 50, 62, 48, 189, 140, 61, 25, 251, 159, 189, 14, 150, 21, 190, 4, 253, 195, 189, 0, 73, 148, 189, 93, 233, 182, 60, 252, 77, 23, 62, 42, 164, 138, 60, 20, 71, 45, 190, 29, 118, 25, 189, 141, 169, 120, 188, 1, 86, 46, 190, 233, 198, 170, 189, 11, 101, 75, 187, 42, 78, 40, 62, 161, 95, 199, 61, 249, 156, 158, 189, 146, 17, 241, 61, 68, 27, 20, 190, 83, 199, 23, 62, 182, 99, 150, 60, 134, 66, 220, 189, 230, 0, 22, 62, 81, 91, 44, 190, 242, 85, 255, 189, 22, 209, 178, 61, 155, 235, 7, 190, 151, 177, 75, 61, 80, 160, 41, 60, 103, 99, 106, 61, 39, 158, 191, 61, 196, 13, 176, 189, 101, 223, 49, 190, 241, 45, 24, 190, 129, 210, 245, 61, 153, 186, 200, 188, 213, 148, 137, 61, 244, 159, 47, 62, 201, 200, 200, 60, 161, 60, 62, 61, 59, 163, 87, 189, 248, 227, 254, 61, 235, 177, 23, 62, 101, 38, 118, 61, 79, 58, 167, 189, 213, 109, 7, 62, 243, 76, 150, 60, 100, 205, 129, 61, 160, 204, 230, 188, 60, 161, 221, 189, 26, 78, 11, 190, 42, 162, 96, 59, 159, 221, 171, 188, 16, 199, 231, 189, 140, 215, 200, 60, 10, 240, 27, 62, 59, 172, 56, 61, 64, 16, 200, 61, 91, 210, 147, 189, 219, 17, 130, 189, 60, 247, 57, 189, 172, 60, 204, 189, 106, 108, 239, 61, 136, 142, 18, 62, 132, 165, 3, 190, 203, 51, 37, 190, 199, 160, 161, 189, 105, 154, 255, 61, 193, 97, 100, 188, 25, 208, 2, 62, 204, 236, 177, 189, 208, 129, 216, 60, 61, 161, 5, 62, 166, 248, 42, 190, 235, 182, 87, 188, 89, 19, 38, 61, 220, 113, 31, 62, 190, 116, 176, 188, 180, 137, 121, 60, 94, 208, 254, 59, 3, 152, 242, 189, 126, 122, 47, 59, 63, 137, 206, 61, 60, 89, 77, 60, 44, 103, 138, 189, 221, 151, 32, 62, 175, 218, 183, 61, 155, 104, 62, 61, 111, 170, 95, 189, 31, 133, 129, 61, 47, 68, 5, 62, 24, 196, 251, 189, 96, 238, 25, 61, 250, 71, 51, 62, 204, 42, 139, 189, 23, 228, 212, 189, 56, 188, 37, 62, 239, 93, 91, 188, 177, 161, 46, 190, 55, 155, 98, 60, 125, 129, 48, 62, 229, 211, 60, 188, 176, 188, 53, 61, 67, 250, 147, 61, 127, 167, 146, 189, 25, 201, 237, 188, 21, 226, 94, 61, 85, 186, 189, 189, 157, 236, 32, 61, 155, 10, 249, 189, 52, 185, 251, 61, 254, 249, 7, 189, 149, 165, 41, 189, 121, 122, 34, 61, 187, 163, 222, 189, 20, 96, 128, 61, 28, 233, 146, 189, 240, 241, 49, 188, 238, 104, 216, 189, 139, 235, 204, 60, 252, 124, 61, 61, 30, 34, 108, 61, 166, 13, 47, 190, 32, 71, 39, 62, 41, 145, 25, 190, 178, 41, 219, 188, 209, 192, 158, 61, 189, 224, 238, 188, 109, 25, 134, 189, 178, 78, 245, 61, 201, 79, 237, 187, 28, 101, 198, 189, 248, 117, 191, 188, 156, 239, 34, 188, 219, 102, 180, 61, 240, 81, 22, 62, 100, 28, 247, 61, 145, 41, 101, 189, 220, 228, 11, 62, 63, 99, 238, 61, 164, 239, 2, 62, 90, 0, 44, 62, 192, 226, 78, 189, 155, 58, 218, 188, 168, 202, 2, 190, 136, 250, 167, 61, 180, 19, 157, 60, 147, 39, 52, 190, 222, 173, 0, 190, 16, 121, 216, 61, 125, 195, 228, 189, 40, 6, 170, 61, 120, 167, 41, 190, 135, 123, 27, 61, 23, 246, 52, 62, 169, 86, 141, 189, 59, 98, 221, 61, 199, 239, 236, 189, 251, 81, 231, 61, 172, 92, 228, 61, 167, 7, 254, 189, 246, 66, 32, 190, 201, 160, 77, 61, 88, 156, 45, 62, 9, 42, 28, 190, 148, 186, 0, 62, 68, 163, 17, 59, 242, 94, 2, 190, 38, 224, 170, 189, 217, 32, 215, 189, 103, 190, 43, 190, 28, 185, 19, 61, 236, 10, 33, 62, 132, 224, 43, 61, 77, 153, 165, 189, 63, 250, 133, 61, 255, 117, 112, 189, 97, 132, 186, 61, 45, 67, 3, 62, 23, 102, 8, 190, 236, 53, 205, 188, 221, 75, 132, 61, 91, 166, 136, 189, 97, 76, 224, 189, 27, 209, 235, 189, 169, 29, 226, 61, 87, 102, 48, 190, 230, 184, 128, 188, 8, 199, 86, 60, 43, 71, 113, 61, 70, 131, 163, 61, 43, 30, 15, 62, 25, 103, 71, 187, 202, 141, 2, 62, 9, 234, 194, 189, 5, 36, 197, 189, 173, 138, 136, 60, 64, 130, 244, 61, 181, 36, 32, 62, 19, 150, 6, 62, 188, 132, 215, 188, 110, 250, 4, 62, 160, 57, 201, 61, 158, 204, 174, 189, 165, 232, 6, 190, 41, 126, 18, 61, 223, 24, 114, 61, 197, 54, 194, 189, 46, 88, 208, 187, 209, 122, 181, 189, 218, 77, 30, 190, 211, 229, 161, 59, 126, 105, 61, 189, 184, 140, 202, 189, 89, 144, 51, 62, 234, 44, 38, 188, 181, 86, 89, 189, 87, 113, 13, 190, 178, 77, 164, 189, 93, 21, 182, 61, 73, 240, 34, 62, 211, 81, 66, 61, 209, 220, 170, 61, 189, 141, 234, 186, 90, 48, 197, 188, 142, 249, 193, 189, 93, 89, 41, 190, 183, 65, 196, 61, 151, 239, 28, 62, 19, 239, 41, 62, 67, 101, 48, 189, 149, 226, 153, 189, 111, 3, 230, 60, 243, 155, 184, 189, 91, 180, 219, 188, 201, 209, 220, 60, 158, 174, 14, 62, 121, 38, 172, 189, 50, 140, 38, 61, 232, 72, 234, 188, 148, 152, 41, 62, 80, 76, 139, 61, 147, 192, 240, 61, 177, 204, 178, 61, 158, 115, 163, 61, 214, 247, 16, 188, 109, 82, 10, 62, 101, 140, 33, 62, 134, 0, 18, 190, 243, 155, 38, 61, 125, 158, 4, 190, 115, 225, 14, 62, 134, 99, 223, 187, 139, 182, 219, 188, 240, 30, 27, 60, 101, 13, 218, 60, 196, 187, 243, 61, 41, 136, 33, 62, 33, 241, 117, 189, 72, 5, 0, 190, 52, 172, 59, 189, 4, 250, 5, 189, 111, 158, 7, 61, 169, 68, 65, 188, 28, 29, 175, 61, 52, 132, 238, 189, 219, 82, 253, 189, 201, 108, 143, 188, 49, 84, 203, 189, 149, 95, 20, 62, 43, 53, 48, 188, 206, 185, 186, 189, 21, 77, 149, 189, 117, 54, 46, 62, 192, 111, 47, 190, 191, 174, 237, 189, 182, 1, 196, 58, 228, 128, 253, 60, 2, 132, 160, 60, 185, 195, 251, 189, 121, 57, 74, 61, 223, 23, 1, 188, 173, 12, 32, 62, 110, 116, 164, 59, 196, 108, 24, 190, 227, 219, 152, 188, 88, 62, 18, 188, 75, 125, 230, 189, 171, 145, 48, 188, 137, 176, 221, 189, 186, 250, 164, 61, 247, 102, 30, 62, 129, 63, 38, 190, 76, 75, 166, 61, 234, 106, 133, 188, 82, 178, 151, 189, 17, 188, 47, 189, 239, 210, 37, 62, 218, 186, 236, 60, 46, 27, 202, 189, 251, 160, 151, 189, 251, 45, 35, 62, 48, 38, 233, 61, 223, 144, 168, 189, 79, 134, 227, 61, 201, 21, 154, 61, 138, 5, 30, 190, 210, 237, 55, 61, 173, 225, 0, 190, 158, 16, 11, 189, 131, 97, 104, 60, 217, 117, 163, 189, 136, 204, 128, 189, 234, 173, 5, 62, 29, 3, 125, 189, 215, 68, 20, 190, 172, 243, 45, 189, 69, 230, 87, 61, 34, 53, 226, 189, 127, 220, 1, 62, 208, 208, 23, 190, 48, 249, 164, 61, 33, 9, 216, 61, 43, 10, 40, 190, 40, 175, 161, 60, 223, 208, 171, 61, 217, 209, 50, 61, 166, 209, 250, 61, 199, 95, 1, 189, 84, 163, 49, 190, 97, 243, 42, 62, 119, 23, 236, 60, 63, 109, 194, 59, 196, 248, 173, 60, 148, 6, 38, 190, 190, 216, 33, 190, 176, 4, 32, 190, 107, 95, 29, 62, 12, 253, 181, 189, 65, 127, 177, 189, 248, 41, 31, 59, 44, 113, 35, 62, 92, 149, 50, 190, 216, 135, 2, 190, 77, 156, 251, 61, 55, 211, 206, 61, 250, 33, 186, 189, 40, 58, 31, 190, 85, 190, 106, 61, 136, 30, 12, 62, 156, 213, 153, 189, 128, 29, 185, 61, 141, 171, 128, 189, 207, 13, 2, 62, 29, 26, 45, 190, 87, 78, 138, 60, 35, 103, 25, 190, 172, 235, 36, 190, 203, 200, 81, 189, 208, 139, 205, 61, 191, 94, 165, 60, 206, 35, 7, 190, 206, 203, 6, 62, 30, 72, 239, 189, 40, 53, 36, 189, 125, 106, 172, 61, 226, 78, 152, 60, 116, 251, 118, 189, 61, 195, 26, 190, 106, 17, 24, 62, 45, 103, 48, 62, 114, 114, 142, 61, 179, 240, 25, 62, 211, 114, 17, 62, 210, 114, 136, 61, 3, 16, 47, 190, 13, 65, 66, 60, 167, 253, 9, 190, 182, 189, 251, 59, 47, 12, 150, 61, 59, 100, 95, 189, 2, 218, 2, 62, 69, 53, 34, 190, 7, 91, 160, 189, 14, 120, 32, 189, 94, 131, 6, 190, 91, 193, 40, 62, 111, 106, 109, 61, 248, 5, 17, 62, 183, 149, 34, 62, 93, 193, 209, 189, 171, 206, 174, 61, 66, 247, 31, 190, 147, 110, 59, 189, 38, 57, 216, 189, 35, 172, 32, 61, 33, 162, 193, 189, 120, 62, 38, 62, 41, 7, 23, 190, 194, 60, 148, 189, 130, 61, 122, 61, 79, 225, 173, 61, 169, 220, 87, 60, 239, 169, 226, 61, 178, 113, 167, 61, 141, 81, 255, 189, 4, 108, 0, 190, 159, 99, 236, 189, 229, 186, 32, 60, 177, 183, 253, 61, 176, 84, 139, 61, 95, 25, 6, 61, 245, 211, 237, 61, 13, 10, 6, 62, 87, 141, 40, 190, 168, 185, 194, 61, 120, 180, 36, 189, 233, 217, 40, 62, 105, 179, 10, 190, 200, 124, 177, 60, 23, 186, 166, 188, 225, 253, 52, 62, 107, 252, 157, 61, 35, 154, 30, 61, 48, 205, 213, 189, 242, 176, 233, 61, 137, 196, 252, 61, 89, 182, 82, 61, 176, 216, 47, 62, 49, 138, 1, 62, 149, 140, 249, 189, 155, 71, 30, 190, 168, 201, 83, 61, 98, 49, 62, 188, 176, 111, 110, 61, 217, 132, 177, 61, 99, 0, 53, 62, 141, 9, 237, 189, 61, 30, 200, 187, 204, 42, 218, 61, 237, 49, 133, 59, 188, 66, 166, 61, 83, 44, 129, 61, 137, 35, 229, 61, 181, 95, 231, 189, 230, 122, 31, 62, 14, 211, 24, 190, 108, 44, 16, 62, 159, 250, 16, 186, 168, 118, 210, 189, 24, 118, 142, 189, 47, 184, 176, 61, 17, 125, 165, 188, 225, 46, 227, 189, 253, 188, 206, 189, 127, 146, 197, 61, 157, 143, 44, 188, 71, 171, 233, 61, 126, 26, 112, 189, 33, 249, 18, 62, 32, 44, 62, 188, 238, 100, 162, 61, 15, 63, 28, 62, 106, 106, 37, 62, 155, 89, 57, 61, 65, 101, 69, 61, 96, 225, 192, 188, 70, 111, 192, 189, 218, 6, 204, 61, 27, 212, 152, 189, 201, 133, 15, 190, 58, 203, 36, 61, 91, 80, 29, 190, 236, 102, 199, 187, 127, 252, 200, 189, 227, 63, 156, 189, 169, 70, 142, 61, 27, 254, 36, 62, 238, 163, 48, 62, 190, 219, 154, 61, 131, 183, 48, 190, 83, 184, 170, 61, 71, 110, 227, 189, 85, 189, 69, 188, 34, 60, 194, 61, 157, 94, 51, 190, 29, 108, 250, 60, 4, 129, 126, 61, 212, 75, 200, 189, 239, 217, 142, 189, 152, 133, 138, 61, 177, 250, 227, 61, 218, 172, 169, 189, 17, 75, 29, 190, 99, 168, 167, 188, 182, 106, 14, 61, 226, 148, 71, 189, 47, 204, 220, 189, 129, 35, 195, 188, 30, 69, 6, 190, 5, 149, 177, 189, 80, 149, 65, 60, 9, 124, 237, 189, 236, 186, 40, 61, 123, 163, 180, 61, 170, 126, 252, 188, 103, 163, 146, 189, 138, 88, 209, 61, 124, 29, 184, 61, 153, 85, 13, 190, 188, 201, 141, 189, 133, 218, 57, 189, 95, 19, 229, 59, 152, 75, 236, 61, 189, 21, 149, 189, 201, 197, 52, 62, 51, 29, 133, 60, 39, 34, 34, 62, 8, 201, 177, 189, 97, 243, 229, 61, 93, 204, 43, 190, 16, 119, 27, 190, 92, 87, 137, 189, 201, 16, 0, 61, 68, 180, 219, 61, 233, 46, 226, 189, 234, 219, 222, 188, 124, 32, 166, 189, 82, 160, 209, 188, 39, 134, 31, 190, 111, 15, 10, 62, 146, 206, 146, 61, 15, 236, 7, 190, 99, 155, 168, 60, 59, 132, 20, 62, 213, 178, 97, 189, 30, 154, 21, 190, 198, 238, 42, 187, 91, 58, 135, 59, 96, 76, 129, 61, 185, 0, 161, 61, 79, 144, 67, 61, 174, 228, 235, 189, 140, 135, 39, 190, 11, 132, 186, 189, 83, 11, 240, 189, 61, 132, 135, 61, 187, 82, 32, 190, 227, 115, 204, 61, 87, 88, 234, 189, 236, 118, 43, 62, 72, 12, 186, 188, 126, 77, 10, 62, 231, 74, 37, 62, 113, 222, 21, 62, 219, 203, 15, 62, 51, 142, 48, 62, 254, 156, 197, 61, 39, 170, 226, 188, 192, 163, 226, 189, 69, 107, 238, 61, 107, 226, 0, 61, 105, 25, 139, 189, 159, 76, 204, 61, 50, 1, 40, 61, 163, 96, 119, 189, 98, 163, 173, 187, 53, 247, 39, 61, 247, 101, 8, 62, 117, 161, 140, 60, 100, 137, 191, 60, 159, 218, 41, 62, 227, 181, 115, 61, 199, 14, 37, 62, 106, 13, 49, 190, 66, 235, 247, 189, 198, 106, 17, 62, 174, 60, 196, 189, 203, 109, 4, 60, 102, 220, 170, 61, 127, 119, 121, 188, 106, 136, 133, 61, 81, 111, 48, 190, 246, 233, 236, 61, 253, 14, 94, 61, 179, 207, 114, 61, 50, 24, 240, 59, 209, 71, 225, 61, 126, 193, 51, 61, 159, 146, 152, 61, 184, 40, 38, 62, 142, 248, 2, 190, 205, 121, 4, 189, 116, 178, 48, 190, 29, 234, 92, 61, 67, 10, 30, 189, 204, 255, 131, 189, 233, 61, 249, 60, 231, 8, 236, 61, 42, 35, 188, 188, 71, 105, 186, 61, 16, 115, 10, 189, 212, 26, 132, 61, 3, 10, 4, 62, 147, 166, 231, 189, 228, 62, 176, 59, 155, 101, 228, 189, 126, 62, 38, 190, 153, 145, 21, 62, 238, 137, 39, 62, 148, 33, 224, 189, 146, 23, 33, 190, 77, 77, 21, 190, 48, 18, 223, 188, 57, 66, 38, 190, 52, 58, 190, 189, 226, 214, 46, 190, 38, 59, 14, 62, 3, 60, 128, 189, 243, 45, 43, 62, 209, 115, 215, 189, 44, 35, 136, 58, 2, 164, 7, 62, 14, 167, 51, 189, 147, 246, 140, 187, 118, 168, 52, 190, 0, 245, 196, 61, 26, 122, 224, 189, 251, 194, 42, 190, 159, 185, 220, 189, 44, 29, 11, 190, 191, 192, 199, 189, 13, 179, 21, 62, 217, 173, 42, 190, 184, 61, 43, 190, 120, 108, 30, 62, 203, 89, 39, 190, 100, 119, 99, 60, 158, 21, 205, 187, 132, 97, 45, 62, 35, 53, 16, 189, 226, 135, 0, 62, 129, 79, 135, 189, 38, 44, 162, 61, 77, 154, 205, 61, 32, 42, 6, 62, 208, 226, 253, 61, 186, 51, 20, 61, 220, 159, 179, 58, 129, 50, 84, 61, 17, 108, 202, 189, 116, 63, 37, 62, 244, 31, 244, 61, 35, 66, 42, 190, 21, 246, 171, 60, 255, 152, 54, 189, 51, 76, 139, 189, 209, 166, 233, 189, 43, 181, 27, 190, 40, 189, 35, 190, 120, 88, 207, 189, 194, 214, 125, 61, 254, 51, 219, 58, 107, 153, 240, 59, 252, 23, 123, 60, 20, 205, 39, 190, 146, 64, 65, 61, 239, 31, 92, 189, 74, 112, 199, 61, 55, 124, 211, 61, 116, 118, 254, 188, 182, 192, 8, 62, 189, 145, 51, 190, 58, 122, 133, 189, 150, 15, 164, 189, 138, 141, 41, 189, 78, 149, 146, 61, 103, 154, 28, 62, 30, 109, 244, 59, 99, 152, 18, 190, 210, 80, 25, 190, 218, 217, 19, 190, 25, 217, 203, 61, 181, 223, 1, 190, 167, 132, 107, 189, 14, 196, 8, 190, 237, 119, 31, 189, 23, 6, 174, 61, 233, 210, 6, 62, 221, 132, 117, 188, 102, 191, 2, 190, 183, 219, 197, 61, 197, 179, 13, 190, 125, 187, 197, 189, 209, 223, 226, 61, 64, 216, 16, 62, 196, 130, 100, 61, 127, 225, 148, 60, 125, 217, 171, 188, 181, 202, 163, 189, 3, 163, 57, 61, 137, 210, 39, 62, 168, 5, 80, 189, 14, 27, 191, 189, 105, 196, 59, 61, 79, 167, 137, 61, 187, 62, 104, 61, 82, 102, 13, 62, 138, 135, 165, 61, 28, 127, 148, 61, 210, 82, 99, 189, 59, 55, 197, 189, 86, 15, 221, 61, 139, 239, 97, 61, 29, 184, 112, 61, 209, 115, 188, 189, 132, 77, 205, 189, 115, 197, 19, 190, 122, 60, 219, 187, 10, 160, 149, 188, 129, 69, 188, 189, 195, 155, 244, 188, 205, 210, 30, 190, 208, 41, 10, 189, 106, 181, 51, 190, 85, 112, 250, 61, 245, 64, 254, 60, 124, 101, 138, 61, 20, 90, 18, 62, 25, 128, 53, 61, 167, 154, 37, 62, 187, 130, 52, 189, 116, 215, 35, 60, 27, 27, 9, 62, 212, 13, 22, 189, 148, 61, 52, 190, 139, 63, 250, 189, 199, 98, 243, 61, 167, 199, 8, 62, 11, 70, 172, 189, 173, 124, 182, 61, 0, 246, 131, 189, 155, 186, 20, 188, 61, 70, 42, 62, 16, 236, 228, 189, 18, 192, 252, 61, 3, 213, 187, 189, 112, 199, 38, 61, 250, 233, 14, 190, 15, 107, 43, 62, 159, 56, 156, 189, 231, 60, 82, 189, 250, 12, 230, 59, 211, 175, 187, 189, 167, 81, 48, 62, 154, 149, 212, 61, 67, 26, 26, 62, 167, 231, 179, 188, 157, 114, 41, 60, 1, 184, 193, 60, 141, 75, 61, 61, 237, 216, 223, 188, 130, 9, 77, 60, 163, 171, 9, 189, 10, 243, 161, 61, 171, 135, 25, 61, 211, 2, 106, 189, 158, 228, 36, 61, 184, 87, 205, 189, 91, 60, 241, 189, 43, 50, 42, 190, 67, 112, 129, 188, 139, 124, 44, 189, 177, 142, 97, 61, 199, 220, 162, 189, 11, 53, 216, 189, 171, 196, 46, 62, 231, 224, 219, 61, 0, 78, 192, 189, 122, 73, 216, 61, 113, 255, 5, 62, 43, 51, 13, 190, 7, 213, 137, 60, 61, 219, 122, 189, 49, 96, 13, 190, 167, 10, 42, 189, 96, 33, 42, 190, 72, 207, 101, 57, 49, 94, 23, 62, 232, 206, 149, 187, 126, 123, 239, 189, 230, 40, 43, 62, 105, 14, 154, 189, 234, 210, 24, 61, 88, 237, 0, 190, 52, 98, 153, 189, 106, 216, 202, 189, 84, 249, 4, 190, 183, 247, 226, 188, 242, 13, 206, 188, 65, 9, 207, 61, 6, 100, 1, 190, 2, 212, 192, 61, 40, 218, 86, 189, 132, 66, 41, 62, 158, 20, 22, 190, 202, 112, 160, 189, 201, 255, 242, 188, 143, 40, 17, 189, 83, 98, 231, 61, 95, 92, 147, 189, 95, 139, 46, 190, 128, 161, 250, 60, 151, 210, 11, 62, 208, 47, 178, 59, 229, 248, 52, 62, 50, 85, 227, 61, 10, 12, 174, 189, 136, 131, 255, 60, 174, 241, 201, 189, 11, 162, 33, 190, 218, 172, 44, 62, 59, 50, 73, 61, 62, 164, 40, 62, 221, 109, 39, 189, 238, 230, 88, 189, 220, 186, 233, 189, 98, 68, 179, 189, 250, 122, 226, 188, 0, 83, 176, 189, 60, 85, 167, 61, 30, 119, 195, 60, 63, 103, 192, 61, 41, 254, 87, 187, 83, 150, 236, 61, 130, 166, 27, 190, 218, 96, 149, 61, 225, 56, 225, 61, 109, 211, 166, 189, 18, 79, 215, 189, 119, 76, 242, 61, 212, 132, 78, 61, 25, 91, 132, 189, 32, 72, 139, 189, 86, 89, 135, 60, 92, 210, 22, 62, 122, 230, 5, 190, 177, 231, 239, 188, 198, 208, 82, 189, 15, 252, 228, 61, 115, 197, 17, 61, 151, 201, 149, 189, 159, 60, 139, 61, 177, 124, 1, 189, 94, 188, 143, 61, 225, 102, 52, 190, 121, 181, 110, 61, 112, 204, 19, 62, 106, 69, 207, 61, 188, 206, 12, 61, 160, 70, 134, 61, 170, 134, 174, 189, 249, 138, 44, 188, 129, 233, 7, 62, 207, 25, 45, 62, 98, 191, 21, 189, 34, 117, 169, 60, 255, 151, 250, 61, 165, 248, 228, 189, 145, 211, 150, 61, 212, 190, 219, 188, 227, 35, 105, 189, 208, 200, 159, 61, 37, 213, 83, 189, 127, 153, 48, 190, 76, 182, 232, 189, 224, 179, 8, 62, 51, 214, 126, 61, 175, 44, 22, 190, 81, 252, 21, 62, 91, 48, 134, 189, 187, 66, 188, 61, 192, 217, 113, 189, 17, 159, 59, 61, 179, 183, 51, 62, 201, 232, 195, 60, 123, 170, 99, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 214, 158, 189, 172, 41, 9, 62, 212, 162, 43, 190, 104, 96, 39, 189, 88, 74, 219, 61, 123, 117, 0, 190, 235, 227, 40, 62, 39, 241, 33, 190, 36, 133, 160, 189, 225, 105, 34, 60, 8, 25, 71, 61, 105, 20, 195, 188, 214, 62, 254, 61, 179, 70, 37, 62, 123, 118, 175, 61, 65, 96, 23, 190, 251, 71, 137, 61, 100, 254, 173, 61, 211, 68, 229, 189, 195, 106, 158, 61, 40, 250, 15, 190, 121, 62, 11, 190, 137, 200, 14, 61, 19, 125, 183, 189, 53, 196, 41, 189, 107, 197, 52, 190, 199, 132, 41, 61, 169, 41, 20, 62, 199, 224, 0, 190, 98, 94, 165, 61, 224, 43, 126, 60, 212, 227, 245, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 206, 136, 60, 210, 203, 37, 189, 41, 50, 143, 189, 66, 247, 138, 61, 69, 70, 9, 190, 66, 74, 200, 61, 111, 183, 159, 60, 186, 199, 130, 189, 18, 10, 10, 62, 193, 255, 166, 61, 79, 188, 228, 61, 148, 136, 232, 61, 119, 208, 44, 62, 141, 246, 17, 190, 11, 61, 221, 188, 234, 108, 125, 61, 0, 67, 149, 61, 195, 247, 14, 190, 162, 207, 22, 188, 88, 109, 27, 62, 160, 194, 26, 62, 101, 164, 41, 62, 72, 221, 242, 61, 114, 120, 197, 61, 146, 28, 14, 190, 59, 45, 201, 189, 48, 79, 4, 62, 115, 120, 162, 61, 75, 73, 146, 61, 218, 70, 38, 190, 19, 237, 20, 189, 217, 70, 19, 190, 210, 217, 13, 60, 89, 84, 26, 190, 64, 171, 42, 190, 56, 207, 0, 186, 207, 190, 1, 190, 155, 116, 142, 189, 209, 46, 9, 62, 226, 85, 42, 62, 134, 55, 45, 190, 140, 110, 206, 189, 114, 110, 11, 62, 96, 155, 80, 189, 206, 44, 149, 188, 103, 249, 254, 61, 83, 45, 3, 62, 116, 218, 245, 189, 33, 101, 252, 61, 4, 61, 51, 62, 1, 197, 129, 189, 103, 170, 103, 189, 162, 167, 241, 61, 132, 245, 142, 61, 198, 239, 223, 61, 43, 255, 204, 188, 50, 130, 25, 62, 54, 30, 3, 62, 48, 213, 232, 188, 237, 235, 24, 189, 193, 192, 160, 61, 221, 220, 241, 61, 206, 175, 11, 60, 99, 220, 212, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 113, 178, 189, 160, 20, 175, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {162, 177, 74, 191, 103, 99, 0, 64, 16, 26, 67, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {78, 49, 57, 190, 137, 198, 79, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0089/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}