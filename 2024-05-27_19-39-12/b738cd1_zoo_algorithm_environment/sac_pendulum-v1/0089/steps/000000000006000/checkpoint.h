// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 188, 55, 63, 110, 98, 148, 191, 212, 41, 156, 190, 64, 95, 182, 62, 171, 67, 161, 191, 245, 255, 150, 190, 222, 112, 6, 190, 53, 49, 23, 63, 200, 118, 115, 62, 2, 231, 182, 190, 113, 167, 207, 62, 233, 215, 131, 61, 48, 48, 6, 63, 142, 27, 222, 190, 186, 66, 20, 191, 44, 52, 186, 62, 37, 51, 78, 190, 68, 208, 198, 62, 90, 240, 238, 190, 179, 230, 143, 63, 24, 114, 121, 62, 233, 163, 4, 191, 85, 200, 64, 61, 73, 170, 167, 190, 210, 219, 168, 189, 127, 47, 51, 63, 41, 82, 55, 62, 244, 166, 200, 190, 154, 14, 216, 189, 157, 130, 219, 62, 51, 193, 46, 190, 190, 10, 93, 189, 21, 92, 11, 63, 116, 136, 146, 62, 124, 112, 80, 63, 252, 207, 45, 190, 190, 217, 189, 62, 239, 242, 169, 63, 218, 118, 231, 62, 194, 102, 15, 63, 74, 66, 90, 190, 202, 77, 37, 63, 18, 239, 22, 63, 177, 97, 46, 63, 71, 24, 112, 190, 204, 18, 54, 63, 97, 167, 229, 62, 155, 233, 128, 62, 188, 90, 168, 61, 47, 124, 103, 191, 34, 100, 250, 190, 189, 72, 35, 61, 247, 167, 67, 191, 194, 176, 140, 62, 31, 7, 195, 190, 3, 103, 51, 63, 149, 106, 222, 59, 64, 98, 244, 61, 95, 49, 69, 191, 204, 188, 54, 189, 120, 116, 157, 190, 185, 147, 118, 63, 180, 254, 2, 63, 175, 30, 230, 189, 4, 118, 66, 191, 132, 65, 179, 190, 197, 135, 94, 63, 145, 138, 76, 63, 254, 117, 4, 62, 97, 218, 153, 190, 129, 158, 220, 191, 137, 144, 215, 190, 215, 167, 17, 63, 163, 206, 48, 191, 37, 14, 13, 190, 173, 113, 163, 190, 59, 27, 229, 189, 43, 40, 112, 191, 78, 45, 170, 62, 170, 122, 112, 63, 33, 25, 179, 62, 13, 102, 69, 190, 142, 170, 72, 63, 111, 81, 233, 190, 125, 63, 150, 190, 95, 160, 181, 62, 59, 94, 82, 62, 243, 156, 127, 190, 50, 51, 197, 187, 180, 166, 193, 62, 194, 196, 240, 62, 9, 84, 81, 191, 147, 184, 148, 190, 62, 91, 57, 63, 127, 78, 1, 190, 149, 135, 115, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 156, 133, 190, 240, 129, 16, 63, 67, 42, 14, 191, 123, 14, 226, 62, 198, 117, 149, 188, 151, 179, 45, 62, 112, 230, 202, 190, 244, 44, 192, 189, 139, 97, 20, 189, 71, 195, 219, 62, 244, 121, 184, 190, 235, 50, 197, 189, 113, 34, 166, 189, 19, 250, 95, 190, 35, 32, 146, 62, 161, 236, 251, 190, 120, 21, 120, 62, 70, 213, 34, 61, 98, 172, 242, 62, 44, 202, 197, 62, 62, 141, 87, 190, 244, 11, 70, 190, 54, 118, 206, 62, 146, 5, 22, 60, 92, 101, 11, 191, 206, 195, 215, 190, 121, 218, 204, 62, 142, 127, 220, 61, 104, 224, 109, 62, 153, 51, 232, 189, 18, 200, 12, 190, 88, 47, 130, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 255, 160, 189, 76, 107, 23, 191, 165, 72, 21, 190, 122, 80, 189, 61, 252, 85, 61, 190, 43, 71, 14, 62, 66, 23, 165, 61, 138, 229, 148, 62, 7, 23, 175, 61, 23, 179, 76, 62, 74, 104, 154, 189, 203, 202, 70, 191, 182, 149, 166, 189, 57, 72, 195, 190, 42, 213, 131, 191, 219, 114, 199, 190, 106, 63, 213, 190, 184, 39, 142, 62, 98, 94, 23, 62, 92, 230, 30, 190, 254, 108, 37, 62, 219, 38, 5, 188, 16, 247, 7, 191, 201, 9, 165, 191, 161, 52, 34, 61, 125, 140, 188, 190, 45, 13, 205, 60, 9, 99, 185, 61, 217, 127, 6, 62, 70, 137, 176, 60, 186, 78, 138, 190, 141, 163, 188, 190, 171, 192, 237, 190, 51, 197, 70, 61, 126, 44, 150, 188, 45, 147, 213, 189, 156, 69, 16, 189, 96, 234, 24, 62, 48, 39, 206, 189, 57, 167, 7, 62, 255, 240, 42, 189, 252, 41, 154, 61, 78, 217, 196, 189, 202, 239, 237, 61, 96, 42, 205, 187, 190, 86, 51, 62, 213, 81, 166, 62, 220, 236, 158, 189, 67, 126, 119, 61, 203, 168, 42, 62, 38, 212, 43, 61, 198, 2, 55, 62, 122, 31, 158, 61, 221, 63, 71, 61, 214, 210, 138, 62, 144, 16, 12, 61, 15, 78, 47, 191, 214, 252, 91, 62, 226, 168, 43, 61, 11, 25, 81, 190, 34, 9, 54, 189, 120, 156, 198, 60, 245, 146, 170, 190, 244, 196, 38, 62, 111, 238, 229, 190, 117, 211, 145, 62, 214, 25, 80, 62, 130, 176, 158, 61, 63, 113, 76, 190, 24, 230, 16, 190, 227, 173, 136, 191, 114, 81, 28, 62, 20, 157, 97, 191, 145, 246, 96, 62, 160, 77, 193, 189, 239, 210, 80, 61, 132, 116, 238, 189, 25, 193, 209, 188, 75, 198, 19, 61, 126, 1, 73, 61, 214, 6, 88, 62, 189, 0, 251, 62, 155, 203, 109, 61, 27, 69, 28, 62, 190, 23, 21, 191, 128, 1, 225, 190, 109, 135, 197, 61, 144, 65, 143, 62, 230, 227, 44, 191, 159, 121, 46, 62, 171, 17, 117, 191, 235, 68, 20, 190, 24, 113, 52, 62, 206, 107, 162, 62, 75, 222, 224, 190, 253, 17, 20, 191, 55, 168, 226, 62, 103, 254, 0, 60, 44, 79, 230, 60, 114, 110, 60, 190, 74, 247, 146, 62, 232, 111, 102, 62, 73, 87, 81, 188, 195, 3, 244, 189, 93, 194, 70, 62, 45, 250, 92, 189, 170, 160, 157, 61, 0, 19, 46, 190, 42, 87, 197, 190, 122, 111, 19, 190, 11, 1, 32, 190, 41, 63, 245, 190, 94, 26, 192, 60, 114, 105, 121, 62, 49, 131, 238, 61, 221, 196, 213, 61, 87, 31, 12, 62, 135, 90, 84, 61, 193, 254, 56, 190, 244, 61, 218, 190, 145, 123, 66, 61, 200, 62, 10, 190, 56, 60, 2, 62, 201, 71, 86, 62, 75, 233, 177, 61, 54, 210, 50, 190, 77, 16, 54, 62, 207, 221, 251, 189, 177, 83, 185, 190, 177, 170, 156, 187, 157, 253, 90, 189, 32, 167, 116, 61, 226, 99, 200, 60, 41, 181, 107, 189, 3, 180, 33, 190, 180, 178, 58, 190, 88, 67, 48, 189, 10, 68, 156, 61, 213, 115, 234, 189, 149, 140, 244, 61, 5, 163, 45, 58, 32, 73, 174, 61, 186, 49, 169, 62, 194, 96, 157, 62, 165, 38, 34, 188, 96, 88, 121, 190, 204, 160, 63, 188, 187, 228, 152, 188, 161, 38, 80, 190, 222, 216, 175, 190, 8, 183, 131, 62, 84, 44, 37, 61, 188, 8, 194, 190, 130, 134, 68, 60, 61, 191, 39, 62, 31, 222, 112, 190, 68, 19, 6, 62, 84, 105, 75, 61, 42, 0, 174, 190, 80, 176, 202, 62, 112, 176, 243, 190, 43, 78, 81, 190, 241, 21, 144, 61, 106, 142, 3, 61, 145, 180, 25, 189, 152, 79, 153, 189, 194, 207, 23, 62, 212, 150, 166, 62, 138, 148, 183, 59, 75, 206, 125, 190, 210, 59, 104, 190, 222, 79, 46, 62, 108, 71, 32, 188, 34, 137, 74, 59, 241, 154, 50, 62, 209, 158, 177, 187, 19, 82, 32, 62, 214, 254, 116, 190, 172, 70, 135, 62, 203, 56, 198, 61, 217, 86, 66, 61, 211, 63, 76, 190, 144, 99, 29, 61, 186, 118, 249, 61, 47, 117, 46, 190, 159, 107, 175, 61, 47, 29, 55, 190, 149, 165, 244, 189, 182, 106, 136, 59, 240, 203, 160, 189, 190, 134, 145, 190, 140, 193, 66, 60, 196, 255, 165, 62, 223, 38, 107, 62, 162, 151, 106, 59, 204, 30, 18, 191, 229, 210, 162, 189, 78, 78, 57, 61, 177, 231, 216, 61, 240, 185, 111, 187, 69, 169, 169, 61, 202, 175, 236, 189, 161, 197, 14, 190, 255, 212, 187, 190, 137, 73, 6, 191, 180, 80, 185, 61, 204, 14, 223, 61, 142, 4, 220, 190, 236, 211, 191, 60, 144, 157, 96, 62, 39, 249, 37, 191, 55, 154, 45, 62, 184, 13, 238, 61, 1, 4, 89, 61, 141, 44, 176, 60, 198, 59, 107, 61, 86, 17, 45, 190, 119, 75, 86, 190, 169, 249, 232, 60, 17, 235, 101, 190, 7, 20, 134, 188, 227, 234, 228, 60, 204, 111, 58, 62, 141, 170, 144, 62, 45, 73, 155, 190, 190, 213, 18, 191, 92, 117, 0, 61, 133, 249, 195, 61, 195, 235, 223, 61, 10, 160, 58, 61, 78, 188, 44, 62, 50, 143, 147, 61, 145, 37, 9, 190, 37, 5, 242, 61, 39, 215, 96, 189, 53, 24, 48, 61, 47, 149, 122, 61, 29, 108, 104, 62, 43, 80, 245, 62, 255, 10, 140, 62, 194, 222, 16, 62, 99, 216, 224, 189, 182, 137, 48, 61, 16, 46, 138, 190, 112, 241, 204, 189, 99, 60, 161, 61, 70, 227, 84, 62, 17, 77, 110, 190, 64, 54, 36, 190, 124, 87, 106, 190, 122, 133, 166, 61, 118, 30, 67, 62, 10, 41, 245, 60, 65, 115, 206, 189, 169, 3, 153, 190, 27, 212, 45, 62, 95, 43, 3, 62, 172, 234, 191, 61, 9, 234, 133, 190, 101, 74, 56, 190, 97, 13, 81, 62, 7, 72, 255, 188, 126, 60, 148, 189, 112, 29, 136, 62, 132, 227, 132, 61, 247, 160, 133, 189, 218, 23, 251, 61, 234, 119, 187, 189, 242, 38, 211, 190, 112, 76, 143, 188, 7, 177, 197, 61, 24, 110, 5, 190, 100, 173, 41, 62, 197, 1, 163, 62, 109, 201, 200, 59, 81, 127, 84, 62, 110, 119, 234, 61, 228, 11, 27, 62, 143, 214, 131, 62, 163, 239, 73, 190, 129, 183, 131, 190, 102, 139, 222, 189, 253, 53, 66, 62, 60, 190, 254, 58, 144, 132, 2, 190, 185, 210, 138, 190, 28, 81, 255, 61, 176, 75, 157, 61, 121, 78, 219, 190, 251, 134, 128, 62, 160, 169, 159, 60, 207, 80, 97, 62, 233, 25, 216, 189, 122, 188, 182, 61, 191, 168, 103, 191, 93, 156, 74, 62, 74, 108, 85, 191, 9, 255, 167, 189, 224, 252, 136, 189, 133, 104, 212, 60, 33, 81, 140, 62, 91, 90, 105, 190, 86, 69, 68, 62, 131, 133, 165, 61, 43, 77, 253, 61, 241, 137, 106, 62, 96, 111, 18, 190, 252, 56, 108, 62, 202, 14, 212, 190, 99, 161, 13, 190, 95, 238, 192, 61, 90, 112, 115, 62, 215, 193, 220, 190, 154, 100, 248, 61, 19, 152, 179, 189, 65, 0, 220, 189, 214, 78, 70, 190, 181, 171, 110, 62, 203, 145, 136, 190, 195, 51, 10, 190, 212, 213, 214, 61, 18, 50, 58, 190, 89, 83, 52, 190, 165, 87, 73, 190, 45, 44, 88, 189, 91, 29, 27, 62, 42, 230, 48, 59, 130, 130, 133, 62, 112, 246, 88, 62, 196, 251, 26, 61, 57, 229, 96, 62, 194, 53, 165, 190, 186, 253, 25, 191, 0, 161, 198, 189, 225, 247, 222, 61, 99, 137, 159, 190, 18, 59, 225, 189, 149, 103, 144, 62, 218, 217, 5, 62, 218, 183, 176, 61, 254, 196, 132, 189, 198, 56, 204, 190, 95, 58, 174, 189, 180, 166, 24, 191, 86, 117, 223, 189, 68, 171, 63, 190, 97, 221, 140, 189, 247, 105, 172, 62, 158, 28, 113, 61, 128, 61, 48, 190, 4, 114, 144, 61, 122, 168, 41, 62, 72, 7, 148, 61, 86, 128, 86, 61, 99, 28, 132, 190, 28, 64, 57, 190, 88, 81, 229, 61, 198, 27, 39, 62, 100, 228, 134, 188, 151, 118, 76, 61, 38, 233, 134, 60, 57, 18, 175, 189, 116, 175, 0, 190, 60, 123, 71, 190, 231, 49, 161, 189, 165, 57, 142, 61, 14, 243, 31, 62, 92, 60, 150, 190, 61, 225, 249, 189, 159, 168, 241, 61, 168, 18, 80, 190, 110, 27, 88, 61, 1, 111, 203, 188, 220, 7, 242, 61, 123, 77, 245, 189, 144, 61, 214, 188, 138, 192, 123, 190, 140, 232, 222, 61, 67, 124, 137, 61, 153, 119, 252, 188, 128, 196, 38, 61, 150, 251, 77, 61, 96, 162, 83, 188, 200, 190, 85, 61, 113, 11, 242, 62, 70, 196, 183, 189, 58, 68, 118, 60, 112, 6, 234, 189, 105, 219, 142, 62, 48, 170, 163, 60, 201, 117, 126, 187, 3, 239, 115, 61, 122, 232, 46, 62, 121, 129, 31, 62, 75, 135, 106, 62, 176, 22, 178, 190, 145, 86, 216, 190, 172, 83, 27, 190, 180, 226, 219, 189, 107, 13, 193, 190, 112, 186, 3, 190, 208, 105, 115, 62, 0, 194, 14, 190, 159, 232, 119, 189, 225, 246, 2, 60, 116, 219, 135, 190, 142, 198, 220, 60, 126, 36, 31, 191, 188, 213, 100, 190, 35, 159, 117, 190, 145, 193, 3, 62, 61, 170, 207, 62, 86, 67, 78, 189, 157, 44, 239, 188, 132, 210, 148, 62, 160, 92, 78, 190, 130, 15, 41, 191, 228, 243, 91, 62, 113, 71, 244, 189, 9, 75, 78, 62, 181, 133, 49, 190, 147, 168, 196, 190, 249, 210, 134, 191, 105, 229, 32, 62, 82, 137, 141, 191, 200, 50, 90, 188, 4, 100, 251, 189, 233, 73, 88, 62, 160, 242, 137, 62, 62, 212, 211, 189, 213, 83, 41, 62, 11, 214, 10, 61, 216, 44, 35, 61, 22, 82, 219, 61, 159, 146, 177, 61, 186, 106, 135, 62, 211, 18, 32, 191, 95, 183, 165, 190, 251, 216, 113, 62, 235, 44, 187, 62, 0, 168, 36, 191, 244, 2, 96, 62, 121, 36, 125, 190, 152, 234, 213, 190, 80, 211, 228, 189, 60, 21, 38, 62, 241, 68, 202, 190, 18, 125, 138, 60, 30, 190, 162, 189, 231, 215, 184, 189, 234, 173, 5, 62, 19, 207, 182, 189, 149, 137, 41, 190, 230, 38, 100, 189, 69, 230, 87, 61, 97, 50, 238, 189, 104, 48, 0, 62, 235, 83, 36, 190, 48, 249, 164, 61, 164, 69, 139, 61, 143, 100, 61, 190, 11, 86, 117, 186, 148, 128, 76, 61, 217, 209, 50, 61, 22, 48, 188, 61, 165, 214, 31, 189, 68, 195, 82, 190, 52, 113, 10, 62, 120, 182, 229, 60, 207, 157, 202, 59, 196, 144, 99, 188, 27, 71, 46, 190, 190, 216, 33, 190, 166, 229, 48, 190, 60, 132, 7, 62, 125, 30, 237, 189, 62, 144, 203, 189, 248, 41, 31, 59, 5, 125, 35, 62, 103, 114, 79, 190, 251, 119, 194, 61, 164, 170, 224, 61, 164, 77, 155, 61, 202, 23, 95, 61, 132, 145, 188, 189, 201, 247, 2, 62, 214, 94, 69, 62, 169, 6, 199, 60, 59, 150, 132, 62, 88, 220, 58, 59, 60, 255, 53, 62, 50, 243, 159, 190, 8, 135, 161, 189, 150, 200, 138, 190, 201, 248, 78, 190, 158, 133, 179, 190, 221, 134, 90, 190, 33, 150, 6, 62, 100, 169, 229, 188, 173, 99, 2, 62, 108, 21, 77, 189, 117, 243, 251, 189, 202, 254, 221, 61, 144, 85, 54, 191, 104, 223, 107, 190, 35, 102, 192, 190, 248, 89, 95, 62, 52, 226, 45, 63, 205, 49, 53, 62, 69, 98, 204, 61, 244, 131, 139, 62, 197, 239, 3, 190, 57, 222, 6, 191, 157, 167, 181, 189, 4, 6, 176, 190, 118, 99, 33, 61, 108, 116, 147, 60, 208, 143, 9, 190, 116, 203, 240, 188, 185, 117, 74, 60, 245, 128, 1, 190, 214, 128, 240, 189, 184, 176, 149, 190, 94, 39, 109, 62, 158, 210, 163, 58, 13, 67, 185, 61, 78, 11, 50, 62, 4, 60, 133, 189, 4, 183, 40, 62, 155, 241, 109, 190, 115, 86, 209, 188, 99, 238, 67, 190, 52, 244, 196, 189, 95, 143, 226, 189, 66, 41, 182, 61, 209, 45, 229, 189, 218, 165, 162, 190, 98, 48, 88, 62, 140, 241, 4, 61, 92, 149, 23, 62, 114, 233, 125, 61, 233, 120, 176, 189, 156, 25, 57, 190, 135, 68, 34, 190, 230, 84, 170, 190, 238, 248, 20, 190, 158, 53, 163, 61, 207, 242, 25, 190, 116, 171, 45, 61, 53, 21, 89, 61, 149, 239, 12, 188, 201, 184, 118, 189, 97, 189, 210, 189, 52, 161, 17, 190, 18, 206, 132, 61, 170, 237, 242, 189, 21, 150, 103, 61, 66, 15, 36, 62, 179, 60, 119, 62, 15, 85, 184, 62, 243, 3, 5, 62, 144, 108, 130, 190, 190, 164, 210, 189, 189, 27, 97, 61, 239, 65, 30, 189, 248, 204, 158, 62, 87, 80, 67, 62, 121, 226, 251, 189, 237, 196, 27, 189, 62, 57, 75, 62, 182, 164, 113, 189, 104, 60, 225, 61, 170, 110, 74, 189, 232, 23, 44, 62, 137, 103, 20, 190, 13, 209, 143, 62, 72, 88, 108, 189, 147, 235, 22, 62, 11, 89, 78, 60, 31, 224, 169, 61, 195, 105, 243, 61, 80, 32, 214, 189, 86, 157, 222, 61, 246, 171, 16, 190, 192, 247, 250, 188, 26, 238, 117, 188, 204, 207, 42, 190, 74, 221, 221, 187, 96, 233, 172, 61, 255, 191, 184, 188, 229, 204, 185, 61, 136, 116, 196, 189, 7, 182, 51, 62, 124, 243, 71, 189, 184, 172, 39, 62, 243, 236, 149, 61, 106, 98, 166, 61, 251, 65, 150, 189, 68, 139, 138, 62, 205, 38, 112, 62, 9, 188, 15, 190, 197, 255, 14, 62, 121, 125, 95, 61, 181, 248, 139, 190, 12, 163, 242, 189, 236, 10, 146, 61, 190, 87, 66, 190, 208, 133, 88, 189, 58, 121, 33, 61, 239, 7, 42, 190, 193, 76, 174, 188, 66, 126, 248, 189, 227, 63, 156, 189, 89, 224, 104, 61, 164, 203, 22, 62, 238, 163, 48, 62, 204, 225, 126, 61, 184, 243, 64, 190, 17, 248, 143, 61, 71, 110, 227, 189, 170, 157, 242, 188, 157, 129, 168, 61, 157, 94, 51, 190, 240, 99, 146, 60, 4, 129, 126, 61, 125, 213, 223, 189, 197, 38, 197, 189, 48, 218, 115, 61, 135, 86, 198, 61, 218, 172, 169, 189, 185, 96, 49, 190, 143, 109, 198, 188, 182, 106, 14, 61, 226, 148, 71, 189, 142, 13, 251, 189, 129, 35, 195, 188, 61, 87, 23, 190, 72, 176, 205, 189, 80, 149, 65, 60, 51, 214, 2, 190, 146, 86, 118, 62, 156, 184, 64, 62, 182, 252, 157, 189, 127, 145, 21, 190, 16, 100, 213, 61, 39, 192, 61, 62, 192, 72, 155, 190, 242, 155, 29, 62, 14, 231, 161, 189, 50, 36, 128, 189, 179, 237, 77, 190, 78, 47, 56, 60, 40, 59, 8, 190, 228, 177, 21, 61, 193, 99, 109, 62, 159, 130, 143, 190, 219, 138, 69, 62, 52, 71, 179, 61, 10, 96, 66, 190, 254, 174, 29, 61, 122, 14, 119, 190, 58, 106, 10, 62, 48, 253, 215, 188, 34, 185, 99, 61, 104, 163, 177, 189, 234, 224, 82, 61, 210, 200, 5, 190, 233, 199, 6, 62, 144, 2, 22, 61, 92, 31, 230, 190, 102, 51, 194, 61, 227, 157, 171, 62, 165, 216, 76, 62, 178, 229, 144, 61, 196, 68, 219, 189, 141, 239, 32, 190, 18, 54, 6, 62, 242, 201, 193, 61, 212, 253, 150, 61, 140, 241, 214, 189, 26, 94, 34, 190, 164, 247, 218, 189, 138, 219, 216, 189, 24, 79, 154, 186, 59, 191, 254, 190, 94, 11, 175, 61, 92, 222, 186, 189, 36, 10, 29, 190, 71, 61, 105, 61, 147, 158, 131, 62, 90, 105, 156, 188, 228, 140, 165, 62, 38, 108, 217, 61, 226, 29, 107, 62, 21, 100, 167, 59, 170, 40, 129, 61, 62, 219, 254, 189, 100, 104, 32, 62, 124, 6, 50, 189, 36, 137, 144, 189, 182, 108, 48, 61, 25, 85, 102, 61, 113, 157, 110, 61, 116, 94, 205, 60, 188, 49, 167, 62, 136, 172, 135, 61, 222, 227, 158, 189, 198, 84, 91, 189, 59, 205, 138, 62, 69, 0, 40, 62, 210, 246, 0, 62, 157, 54, 111, 190, 173, 26, 47, 61, 208, 189, 52, 62, 170, 221, 169, 60, 190, 200, 178, 190, 211, 139, 131, 190, 79, 182, 17, 190, 180, 204, 166, 189, 28, 71, 32, 191, 18, 110, 212, 189, 8, 123, 198, 62, 221, 254, 33, 189, 33, 100, 23, 189, 199, 196, 253, 61, 218, 109, 184, 189, 99, 23, 174, 189, 51, 64, 205, 190, 125, 124, 38, 190, 166, 232, 150, 190, 76, 248, 109, 190, 45, 24, 11, 63, 192, 104, 191, 59, 246, 114, 210, 189, 9, 55, 116, 62, 139, 75, 130, 189, 60, 53, 150, 189, 223, 249, 90, 191, 71, 13, 220, 61, 129, 194, 146, 62, 227, 239, 222, 61, 122, 198, 47, 190, 229, 89, 223, 61, 124, 182, 91, 62, 164, 171, 18, 190, 185, 7, 134, 62, 33, 217, 89, 62, 195, 37, 12, 191, 107, 128, 207, 189, 248, 209, 38, 190, 12, 58, 102, 191, 93, 40, 143, 189, 66, 212, 233, 190, 48, 152, 226, 190, 29, 145, 185, 62, 233, 212, 203, 190, 189, 142, 142, 62, 93, 217, 12, 190, 76, 51, 87, 189, 116, 177, 83, 191, 252, 48, 95, 189, 187, 210, 156, 190, 70, 250, 174, 189, 1, 64, 186, 61, 199, 28, 231, 60, 181, 227, 111, 190, 254, 223, 12, 190, 65, 24, 78, 190, 117, 0, 194, 61, 240, 152, 216, 61, 154, 107, 71, 190, 151, 81, 242, 190, 64, 113, 72, 62, 60, 165, 171, 61, 147, 128, 83, 188, 55, 93, 218, 190, 76, 212, 38, 60, 114, 120, 124, 189, 235, 44, 200, 61, 63, 36, 60, 190, 130, 98, 72, 61, 223, 30, 161, 62, 182, 70, 103, 62, 8, 171, 205, 61, 203, 96, 34, 188, 197, 96, 209, 189, 36, 56, 198, 190, 184, 221, 28, 190, 148, 118, 3, 62, 183, 74, 38, 62, 46, 135, 124, 190, 89, 132, 142, 189, 165, 221, 166, 62, 18, 107, 253, 189, 15, 238, 224, 190, 138, 239, 186, 188, 180, 36, 134, 190, 88, 106, 0, 190, 193, 69, 52, 62, 122, 14, 233, 189, 107, 153, 240, 59, 252, 23, 123, 60, 20, 205, 39, 190, 146, 64, 65, 61, 239, 31, 92, 189, 74, 112, 199, 61, 55, 124, 211, 61, 116, 118, 254, 188, 182, 192, 8, 62, 189, 145, 51, 190, 58, 122, 133, 189, 150, 15, 164, 189, 138, 141, 41, 189, 78, 149, 146, 61, 103, 154, 28, 62, 30, 109, 244, 59, 99, 152, 18, 190, 210, 80, 25, 190, 218, 217, 19, 190, 25, 217, 203, 61, 181, 223, 1, 190, 167, 132, 107, 189, 14, 196, 8, 190, 237, 119, 31, 189, 23, 6, 174, 61, 233, 210, 6, 62, 221, 132, 117, 188, 102, 191, 2, 190, 183, 219, 197, 61, 197, 179, 13, 190, 125, 187, 197, 189, 209, 223, 226, 61, 7, 74, 148, 62, 196, 40, 6, 190, 96, 190, 240, 189, 146, 99, 65, 61, 177, 227, 131, 188, 194, 102, 19, 62, 165, 240, 1, 62, 144, 76, 44, 62, 178, 177, 193, 60, 160, 32, 184, 61, 150, 147, 19, 62, 72, 150, 70, 190, 241, 29, 2, 190, 135, 118, 150, 187, 196, 76, 243, 189, 5, 173, 230, 190, 209, 151, 233, 190, 49, 149, 171, 62, 215, 228, 141, 61, 253, 230, 226, 59, 28, 162, 185, 189, 163, 166, 154, 190, 65, 54, 5, 191, 197, 105, 134, 191, 71, 49, 12, 188, 86, 6, 33, 190, 92, 44, 227, 188, 232, 56, 10, 63, 105, 227, 145, 60, 93, 87, 124, 190, 139, 15, 48, 62, 130, 249, 217, 189, 87, 19, 33, 188, 115, 75, 192, 61, 224, 248, 177, 188, 186, 218, 73, 62, 181, 48, 19, 189, 134, 183, 8, 61, 48, 238, 1, 62, 143, 168, 57, 188, 138, 71, 80, 190, 107, 144, 19, 190, 152, 78, 203, 61, 187, 69, 37, 62, 118, 248, 52, 190, 50, 207, 67, 60, 197, 232, 133, 60, 243, 76, 92, 190, 84, 28, 149, 61, 71, 105, 152, 189, 180, 48, 67, 62, 195, 78, 185, 189, 138, 48, 196, 60, 59, 152, 130, 190, 168, 219, 98, 62, 253, 130, 213, 190, 169, 236, 27, 191, 225, 52, 70, 188, 180, 183, 91, 189, 95, 152, 235, 61, 251, 26, 197, 61, 192, 14, 249, 61, 249, 132, 135, 190, 60, 57, 158, 189, 36, 123, 88, 62, 81, 87, 138, 62, 134, 236, 227, 188, 216, 55, 16, 191, 3, 1, 19, 62, 41, 85, 66, 62, 193, 190, 121, 190, 227, 207, 242, 190, 60, 130, 151, 190, 58, 72, 151, 190, 30, 164, 25, 191, 35, 134, 143, 190, 229, 218, 4, 191, 124, 7, 211, 61, 36, 122, 232, 62, 96, 16, 42, 190, 225, 190, 126, 188, 240, 87, 162, 61, 95, 130, 91, 190, 79, 50, 186, 61, 233, 34, 179, 190, 210, 173, 85, 190, 134, 233, 162, 62, 54, 136, 94, 190, 47, 161, 41, 191, 36, 189, 79, 190, 151, 13, 120, 188, 92, 76, 206, 189, 72, 174, 156, 190, 239, 253, 93, 190, 164, 154, 172, 61, 162, 21, 145, 62, 235, 107, 21, 62, 14, 176, 211, 189, 234, 210, 24, 61, 91, 66, 33, 190, 184, 169, 220, 189, 177, 42, 12, 190, 208, 167, 11, 190, 223, 131, 112, 189, 134, 66, 235, 188, 242, 34, 165, 61, 146, 183, 11, 190, 37, 46, 130, 61, 76, 23, 158, 189, 139, 192, 14, 62, 93, 51, 67, 190, 44, 33, 192, 189, 245, 118, 145, 189, 47, 224, 125, 189, 6, 204, 165, 61, 106, 24, 218, 189, 152, 46, 69, 190, 133, 108, 110, 55, 110, 162, 194, 61, 9, 134, 177, 188, 238, 38, 42, 62, 143, 170, 147, 61, 83, 160, 228, 189, 42, 79, 40, 187, 42, 223, 244, 189, 11, 162, 33, 190, 203, 233, 12, 62, 209, 200, 112, 60, 205, 35, 2, 191, 229, 64, 29, 189, 173, 55, 83, 190, 205, 240, 252, 189, 7, 224, 129, 190, 57, 53, 75, 189, 142, 59, 41, 191, 212, 167, 128, 62, 89, 55, 237, 190, 115, 112, 191, 61, 51, 39, 103, 189, 117, 226, 59, 62, 214, 124, 45, 189, 118, 255, 127, 62, 36, 215, 194, 62, 213, 24, 50, 62, 150, 112, 84, 62, 185, 170, 115, 62, 248, 71, 162, 188, 140, 222, 244, 61, 19, 185, 160, 190, 35, 50, 153, 189, 139, 163, 209, 62, 6, 57, 194, 61, 106, 174, 9, 191, 147, 254, 150, 62, 93, 11, 0, 60, 163, 19, 106, 190, 7, 99, 53, 190, 220, 252, 60, 62, 138, 200, 192, 190, 67, 81, 136, 62, 199, 61, 62, 191, 226, 106, 38, 190, 70, 5, 1, 62, 140, 154, 171, 189, 89, 49, 73, 190, 205, 237, 15, 61, 76, 57, 108, 190, 155, 80, 151, 61, 248, 220, 187, 189, 118, 189, 164, 61, 159, 41, 2, 190, 50, 39, 183, 61, 50, 93, 49, 62, 142, 155, 216, 61, 1, 222, 128, 62, 244, 147, 144, 62, 169, 224, 51, 62, 222, 243, 15, 59, 129, 200, 100, 190, 51, 215, 84, 190, 176, 93, 100, 190, 196, 45, 4, 189, 138, 250, 85, 62, 241, 223, 219, 189, 18, 131, 55, 190, 106, 172, 153, 62, 220, 160, 196, 60, 115, 207, 131, 190, 118, 223, 174, 189, 181, 211, 57, 62, 184, 67, 176, 190, 74, 117, 153, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 15, 20, 62, 4, 131, 128, 62, 135, 83, 215, 60, 94, 197, 30, 62, 53, 18, 221, 61, 107, 237, 17, 190, 169, 83, 153, 62, 105, 43, 112, 190, 22, 121, 250, 61, 109, 104, 94, 62, 67, 189, 228, 61, 189, 215, 199, 61, 140, 196, 131, 62, 143, 39, 174, 62, 19, 55, 88, 61, 218, 130, 203, 61, 160, 159, 208, 60, 34, 63, 14, 190, 36, 188, 169, 60, 144, 186, 115, 61, 46, 176, 205, 188, 64, 53, 175, 189, 131, 236, 168, 61, 159, 195, 144, 188, 142, 239, 140, 190, 107, 197, 52, 190, 239, 123, 84, 62, 110, 175, 147, 62, 59, 89, 174, 61, 65, 110, 20, 61, 58, 130, 97, 62, 24, 70, 154, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 123, 15, 63, 32, 67, 239, 189, 40, 52, 106, 191, 21, 77, 173, 62, 132, 66, 94, 190, 73, 38, 99, 62, 221, 75, 0, 63, 2, 176, 78, 190, 230, 22, 11, 62, 120, 139, 216, 190, 245, 220, 70, 63, 198, 12, 48, 61, 10, 173, 34, 63, 239, 247, 88, 191, 61, 7, 174, 188, 240, 129, 166, 62, 106, 215, 2, 62, 153, 172, 99, 190, 96, 68, 152, 188, 88, 119, 186, 61, 101, 127, 121, 62, 97, 188, 83, 62, 4, 59, 195, 62, 191, 66, 52, 63, 63, 72, 222, 190, 59, 45, 201, 189, 52, 106, 84, 63, 15, 174, 120, 188, 149, 162, 11, 63, 23, 140, 250, 189, 182, 77, 4, 191, 170, 164, 171, 190, 199, 111, 103, 61, 94, 20, 129, 190, 52, 56, 203, 61, 93, 198, 7, 62, 230, 173, 123, 190, 192, 5, 248, 189, 93, 237, 114, 189, 212, 8, 127, 62, 130, 207, 151, 190, 252, 44, 76, 190, 149, 155, 10, 61, 107, 160, 174, 189, 235, 195, 116, 61, 135, 208, 28, 62, 164, 232, 206, 61, 252, 152, 105, 190, 173, 85, 50, 62, 20, 142, 61, 62, 34, 16, 230, 189, 148, 245, 116, 188, 188, 219, 186, 60, 87, 135, 255, 60, 79, 129, 171, 62, 247, 174, 160, 189, 206, 136, 109, 62, 54, 30, 3, 62, 105, 56, 177, 60, 238, 117, 96, 190, 251, 48, 179, 190, 239, 22, 237, 61, 231, 252, 22, 190, 10, 237, 11, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 224, 125, 189, 221, 206, 86, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {216, 172, 111, 190, 200, 255, 82, 191, 251, 215, 19, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {206, 42, 70, 191, 85, 11, 53, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0089/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}