// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 38, 62, 63, 106, 91, 139, 191, 229, 79, 172, 190, 103, 132, 217, 62, 173, 130, 165, 191, 92, 124, 144, 190, 55, 204, 47, 62, 15, 229, 18, 63, 55, 121, 85, 62, 53, 203, 187, 190, 60, 93, 253, 62, 24, 96, 17, 61, 91, 216, 15, 63, 136, 148, 212, 190, 106, 19, 18, 191, 107, 123, 178, 62, 17, 169, 100, 190, 244, 195, 204, 62, 150, 169, 0, 191, 55, 175, 147, 63, 33, 228, 95, 62, 212, 23, 0, 191, 97, 109, 160, 186, 157, 169, 168, 190, 0, 150, 67, 190, 130, 222, 40, 63, 193, 178, 46, 62, 82, 55, 175, 190, 145, 68, 164, 189, 171, 236, 205, 62, 43, 74, 192, 189, 55, 174, 56, 188, 61, 86, 10, 63, 180, 13, 137, 62, 69, 218, 93, 63, 206, 245, 30, 190, 213, 9, 202, 62, 248, 90, 174, 63, 128, 9, 227, 62, 205, 203, 15, 63, 99, 105, 136, 190, 231, 45, 30, 63, 147, 10, 241, 62, 48, 202, 59, 63, 34, 149, 148, 190, 7, 191, 66, 63, 208, 235, 241, 62, 88, 97, 121, 62, 47, 156, 24, 62, 148, 233, 96, 191, 193, 149, 245, 190, 11, 66, 189, 61, 200, 82, 62, 191, 1, 34, 141, 62, 238, 65, 197, 190, 156, 96, 64, 63, 9, 58, 62, 189, 93, 205, 255, 61, 71, 188, 79, 191, 149, 190, 148, 189, 44, 181, 233, 190, 131, 137, 95, 63, 213, 35, 5, 63, 147, 179, 31, 189, 3, 62, 84, 191, 157, 166, 160, 190, 65, 237, 100, 63, 169, 190, 79, 63, 166, 143, 44, 62, 64, 209, 112, 190, 117, 8, 233, 191, 106, 176, 166, 190, 108, 56, 29, 63, 51, 5, 33, 191, 19, 14, 96, 190, 60, 9, 186, 190, 231, 76, 118, 189, 13, 199, 112, 191, 46, 77, 102, 62, 235, 237, 102, 63, 219, 128, 192, 62, 223, 5, 47, 190, 191, 175, 45, 63, 27, 71, 224, 190, 37, 158, 2, 191, 253, 207, 129, 62, 56, 100, 58, 62, 185, 209, 114, 190, 84, 82, 214, 60, 27, 250, 183, 62, 134, 201, 0, 63, 7, 106, 66, 191, 188, 31, 155, 190, 15, 21, 52, 63, 197, 228, 59, 190, 105, 153, 135, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {132, 140, 151, 190, 117, 145, 198, 62, 159, 20, 49, 191, 196, 12, 219, 62, 117, 195, 171, 189, 150, 72, 26, 62, 105, 205, 186, 190, 170, 208, 91, 190, 171, 25, 28, 59, 38, 219, 212, 62, 32, 111, 170, 190, 207, 19, 127, 189, 248, 152, 124, 189, 58, 166, 172, 190, 23, 239, 189, 62, 13, 178, 6, 191, 196, 26, 36, 62, 70, 242, 20, 61, 201, 2, 231, 62, 166, 165, 136, 62, 68, 136, 233, 188, 151, 144, 62, 190, 253, 184, 159, 62, 227, 160, 251, 189, 156, 110, 7, 191, 10, 92, 240, 190, 36, 215, 237, 62, 28, 242, 136, 60, 198, 144, 175, 62, 110, 19, 84, 190, 232, 241, 42, 190, 168, 197, 214, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 255, 160, 189, 242, 116, 12, 191, 177, 56, 90, 190, 80, 117, 5, 62, 213, 77, 61, 190, 193, 14, 18, 62, 44, 136, 161, 61, 164, 82, 195, 62, 148, 174, 173, 61, 166, 211, 83, 62, 167, 194, 146, 189, 103, 33, 89, 191, 195, 40, 128, 189, 130, 220, 191, 190, 224, 123, 135, 191, 74, 187, 17, 191, 137, 5, 32, 190, 209, 61, 137, 62, 120, 61, 71, 62, 246, 119, 226, 189, 24, 106, 35, 62, 227, 86, 190, 188, 212, 67, 19, 191, 34, 16, 153, 191, 161, 52, 34, 61, 49, 164, 92, 190, 242, 25, 224, 60, 230, 103, 220, 61, 36, 205, 19, 62, 14, 56, 204, 60, 186, 78, 138, 190, 225, 179, 229, 190, 200, 108, 223, 190, 61, 224, 77, 61, 14, 60, 240, 188, 219, 144, 170, 189, 85, 247, 143, 188, 237, 79, 34, 62, 193, 161, 131, 189, 167, 74, 35, 62, 199, 165, 4, 189, 211, 158, 142, 61, 243, 222, 97, 189, 59, 235, 2, 62, 241, 27, 208, 188, 58, 102, 65, 62, 226, 191, 188, 62, 37, 207, 2, 190, 64, 248, 145, 61, 114, 51, 102, 62, 235, 5, 124, 61, 252, 39, 65, 62, 73, 114, 203, 61, 208, 194, 174, 61, 248, 30, 119, 62, 154, 217, 20, 61, 16, 82, 68, 191, 203, 244, 115, 62, 64, 230, 81, 61, 166, 201, 17, 190, 171, 132, 12, 189, 225, 66, 107, 61, 241, 176, 155, 190, 207, 9, 71, 62, 113, 255, 233, 190, 6, 69, 136, 62, 214, 25, 80, 62, 25, 5, 184, 60, 133, 36, 56, 190, 148, 147, 61, 190, 90, 227, 147, 191, 85, 118, 48, 62, 22, 241, 119, 191, 80, 30, 144, 61, 162, 62, 31, 190, 21, 151, 129, 60, 150, 120, 243, 189, 156, 135, 188, 189, 43, 79, 23, 61, 41, 197, 110, 61, 86, 199, 104, 62, 237, 195, 210, 62, 244, 169, 66, 61, 105, 11, 220, 61, 244, 141, 35, 191, 77, 127, 210, 190, 230, 114, 31, 62, 57, 45, 146, 62, 45, 204, 58, 191, 212, 221, 80, 62, 118, 28, 134, 191, 163, 10, 225, 189, 121, 1, 94, 189, 201, 126, 132, 62, 147, 29, 222, 190, 11, 125, 36, 191, 81, 210, 234, 62, 74, 158, 33, 188, 13, 121, 182, 188, 63, 126, 100, 190, 38, 74, 152, 62, 91, 139, 87, 62, 122, 36, 60, 61, 1, 102, 27, 190, 129, 130, 87, 62, 97, 3, 24, 189, 35, 169, 184, 61, 214, 163, 177, 189, 139, 148, 200, 190, 179, 22, 18, 190, 49, 177, 26, 190, 198, 63, 35, 191, 236, 228, 223, 59, 232, 38, 102, 62, 160, 175, 194, 61, 98, 20, 130, 61, 146, 215, 19, 62, 150, 251, 134, 60, 114, 36, 89, 190, 73, 79, 252, 190, 141, 235, 79, 60, 154, 88, 7, 190, 176, 116, 206, 61, 247, 110, 67, 62, 188, 113, 227, 61, 115, 13, 30, 190, 151, 211, 63, 62, 88, 117, 56, 190, 147, 225, 212, 190, 217, 164, 57, 189, 151, 32, 59, 189, 236, 255, 245, 61, 107, 6, 146, 60, 156, 180, 63, 189, 130, 92, 238, 189, 250, 207, 26, 190, 233, 114, 219, 188, 240, 164, 164, 61, 94, 67, 161, 189, 145, 78, 67, 62, 194, 230, 155, 188, 12, 29, 203, 61, 139, 109, 198, 62, 175, 74, 148, 62, 110, 57, 134, 189, 18, 38, 64, 190, 175, 22, 80, 61, 219, 51, 60, 189, 198, 253, 53, 190, 146, 191, 218, 190, 224, 87, 127, 62, 82, 146, 116, 190, 16, 101, 25, 191, 252, 175, 3, 61, 132, 32, 57, 62, 244, 162, 222, 189, 64, 142, 33, 62, 74, 121, 161, 61, 110, 191, 199, 190, 68, 227, 224, 62, 228, 142, 161, 190, 42, 150, 61, 190, 182, 163, 1, 60, 225, 55, 188, 189, 233, 23, 27, 60, 101, 3, 179, 189, 142, 213, 250, 60, 154, 109, 157, 62, 13, 174, 227, 189, 176, 58, 97, 190, 216, 190, 128, 190, 19, 63, 108, 62, 197, 169, 152, 189, 255, 171, 74, 188, 127, 255, 85, 62, 103, 103, 30, 189, 74, 191, 53, 62, 123, 5, 6, 190, 212, 114, 47, 62, 15, 67, 25, 60, 65, 210, 33, 188, 78, 185, 72, 190, 51, 31, 197, 188, 22, 18, 87, 61, 188, 198, 38, 61, 95, 205, 203, 61, 51, 35, 151, 190, 204, 192, 5, 190, 243, 242, 234, 188, 253, 1, 22, 190, 252, 91, 58, 190, 168, 119, 85, 59, 54, 193, 150, 62, 246, 137, 116, 62, 220, 121, 164, 189, 23, 90, 242, 190, 15, 167, 227, 189, 189, 61, 42, 61, 150, 131, 178, 61, 120, 76, 37, 189, 169, 29, 71, 61, 225, 26, 144, 189, 108, 126, 214, 189, 49, 168, 175, 190, 200, 238, 18, 191, 179, 99, 208, 61, 214, 224, 184, 61, 57, 109, 5, 191, 115, 116, 142, 60, 87, 166, 127, 62, 200, 99, 28, 191, 56, 126, 83, 62, 19, 233, 235, 61, 158, 46, 31, 61, 140, 15, 173, 187, 178, 45, 193, 61, 106, 26, 111, 190, 38, 85, 128, 190, 36, 223, 13, 60, 201, 117, 165, 190, 135, 73, 29, 61, 12, 42, 155, 61, 196, 115, 26, 62, 8, 223, 135, 62, 229, 235, 215, 190, 251, 21, 22, 191, 170, 0, 161, 61, 28, 57, 28, 62, 161, 244, 122, 61, 185, 176, 4, 61, 54, 111, 56, 62, 212, 126, 170, 61, 234, 192, 7, 190, 201, 91, 185, 61, 153, 253, 180, 189, 84, 11, 211, 61, 202, 233, 96, 61, 6, 136, 95, 62, 208, 2, 8, 63, 232, 194, 216, 62, 69, 81, 202, 60, 100, 105, 9, 190, 240, 10, 9, 62, 48, 63, 147, 190, 146, 167, 13, 190, 237, 38, 2, 190, 53, 124, 147, 62, 123, 97, 238, 190, 153, 104, 146, 190, 114, 206, 149, 190, 153, 245, 206, 61, 206, 147, 132, 62, 29, 90, 106, 60, 100, 73, 18, 190, 200, 239, 224, 190, 108, 218, 118, 62, 68, 90, 41, 62, 15, 56, 226, 61, 67, 211, 138, 190, 143, 82, 142, 190, 186, 173, 110, 62, 55, 106, 79, 189, 81, 112, 195, 189, 50, 217, 99, 62, 149, 210, 193, 58, 38, 176, 156, 189, 135, 14, 6, 62, 125, 128, 27, 60, 239, 74, 227, 190, 135, 94, 172, 188, 55, 77, 16, 62, 225, 49, 38, 190, 84, 205, 52, 62, 3, 17, 155, 62, 96, 68, 146, 189, 167, 163, 86, 62, 12, 145, 209, 61, 16, 11, 21, 62, 148, 141, 121, 62, 16, 133, 108, 190, 27, 163, 150, 190, 229, 108, 238, 189, 109, 230, 43, 62, 166, 33, 214, 188, 137, 98, 22, 190, 46, 230, 135, 190, 57, 114, 34, 62, 250, 23, 161, 61, 234, 126, 230, 190, 247, 166, 110, 62, 139, 19, 101, 60, 89, 140, 36, 62, 31, 39, 1, 190, 91, 97, 240, 61, 166, 153, 125, 191, 212, 70, 72, 62, 96, 117, 95, 191, 192, 126, 25, 190, 42, 90, 156, 189, 153, 24, 164, 189, 197, 151, 180, 62, 109, 235, 89, 190, 187, 209, 40, 62, 80, 18, 27, 62, 106, 156, 211, 61, 255, 137, 85, 62, 129, 60, 68, 190, 152, 3, 95, 62, 74, 133, 185, 190, 132, 114, 2, 190, 27, 93, 249, 61, 132, 117, 109, 62, 203, 94, 238, 190, 120, 138, 226, 61, 248, 150, 30, 189, 242, 118, 239, 189, 113, 141, 174, 190, 173, 224, 87, 62, 121, 95, 145, 190, 155, 244, 218, 189, 207, 204, 68, 62, 134, 100, 137, 189, 10, 167, 95, 190, 137, 126, 164, 190, 73, 150, 10, 190, 189, 194, 77, 62, 249, 194, 217, 189, 85, 69, 121, 62, 1, 23, 179, 61, 201, 12, 19, 61, 92, 49, 115, 62, 163, 121, 206, 190, 196, 126, 30, 191, 24, 61, 30, 189, 205, 28, 201, 61, 31, 33, 209, 190, 206, 12, 19, 190, 139, 159, 167, 62, 154, 250, 10, 189, 226, 63, 32, 62, 190, 245, 255, 189, 253, 198, 13, 191, 247, 43, 142, 189, 0, 174, 2, 191, 156, 128, 248, 189, 11, 220, 78, 190, 175, 244, 155, 189, 58, 75, 148, 62, 153, 111, 72, 188, 37, 38, 41, 190, 93, 81, 32, 62, 143, 166, 93, 62, 216, 236, 198, 61, 69, 69, 86, 61, 47, 255, 150, 190, 225, 86, 131, 190, 250, 102, 15, 62, 58, 52, 53, 62, 13, 180, 24, 189, 187, 178, 223, 187, 219, 30, 132, 187, 69, 190, 104, 189, 149, 116, 166, 189, 14, 221, 69, 189, 20, 196, 164, 189, 221, 136, 202, 61, 192, 193, 94, 62, 75, 84, 177, 190, 206, 46, 1, 190, 143, 25, 17, 62, 247, 81, 152, 190, 202, 255, 93, 61, 112, 230, 137, 187, 10, 45, 202, 61, 6, 246, 6, 190, 142, 29, 165, 189, 67, 103, 150, 190, 129, 99, 203, 61, 202, 194, 149, 61, 193, 90, 80, 189, 76, 174, 119, 61, 242, 30, 201, 61, 65, 242, 10, 60, 182, 245, 123, 61, 5, 129, 1, 63, 252, 1, 130, 189, 208, 95, 71, 189, 234, 55, 243, 189, 48, 100, 162, 62, 107, 185, 61, 60, 162, 226, 93, 60, 232, 75, 206, 61, 251, 24, 32, 62, 135, 192, 40, 62, 124, 194, 101, 62, 69, 37, 152, 190, 7, 108, 220, 190, 140, 146, 32, 190, 4, 76, 204, 189, 47, 141, 5, 191, 240, 121, 153, 189, 234, 244, 98, 62, 13, 237, 1, 190, 51, 246, 82, 189, 156, 105, 98, 187, 254, 149, 59, 190, 180, 91, 23, 60, 77, 222, 26, 191, 175, 78, 140, 190, 226, 33, 38, 190, 71, 220, 217, 61, 236, 118, 211, 62, 183, 161, 64, 189, 38, 85, 228, 188, 227, 143, 167, 62, 74, 105, 128, 190, 153, 183, 51, 191, 125, 223, 59, 62, 113, 71, 244, 189, 236, 16, 23, 62, 84, 107, 47, 190, 245, 136, 193, 190, 131, 199, 141, 191, 203, 28, 44, 62, 210, 11, 140, 191, 77, 153, 26, 190, 196, 32, 18, 190, 58, 108, 78, 62, 248, 92, 158, 62, 178, 183, 213, 189, 188, 156, 52, 62, 204, 238, 52, 61, 38, 106, 179, 60, 95, 132, 175, 61, 68, 179, 150, 61, 20, 160, 96, 62, 100, 19, 56, 191, 230, 251, 164, 190, 14, 110, 127, 62, 228, 72, 176, 62, 255, 42, 64, 191, 170, 133, 126, 62, 217, 150, 106, 190, 79, 222, 185, 190, 137, 104, 189, 190, 114, 224, 247, 61, 35, 234, 216, 190, 237, 91, 219, 59, 30, 190, 162, 189, 231, 215, 184, 189, 234, 173, 5, 62, 19, 207, 182, 189, 149, 137, 41, 190, 230, 38, 100, 189, 69, 230, 87, 61, 97, 50, 238, 189, 104, 48, 0, 62, 235, 83, 36, 190, 48, 249, 164, 61, 164, 69, 139, 61, 143, 100, 61, 190, 11, 86, 117, 186, 148, 128, 76, 61, 217, 209, 50, 61, 22, 48, 188, 61, 165, 214, 31, 189, 68, 195, 82, 190, 52, 113, 10, 62, 120, 182, 229, 60, 207, 157, 202, 59, 196, 144, 99, 188, 27, 71, 46, 190, 190, 216, 33, 190, 166, 229, 48, 190, 60, 132, 7, 62, 125, 30, 237, 189, 62, 144, 203, 189, 248, 41, 31, 59, 5, 125, 35, 62, 103, 114, 79, 190, 131, 29, 194, 61, 38, 52, 2, 62, 126, 145, 4, 61, 217, 57, 230, 60, 144, 23, 240, 189, 85, 135, 17, 62, 249, 6, 56, 62, 14, 100, 5, 187, 136, 28, 127, 62, 198, 44, 206, 58, 30, 187, 59, 62, 17, 197, 175, 190, 183, 16, 134, 189, 19, 244, 131, 190, 101, 4, 97, 190, 201, 70, 212, 190, 111, 151, 79, 190, 228, 232, 9, 62, 191, 47, 130, 189, 225, 187, 34, 62, 249, 154, 105, 189, 188, 182, 123, 190, 88, 249, 214, 61, 118, 181, 19, 191, 16, 114, 217, 190, 95, 160, 230, 190, 125, 132, 94, 62, 119, 15, 10, 63, 107, 89, 42, 62, 135, 15, 211, 61, 64, 195, 136, 62, 105, 81, 13, 190, 216, 40, 224, 190, 247, 198, 147, 189, 162, 53, 189, 190, 231, 30, 193, 189, 14, 114, 61, 61, 21, 115, 160, 189, 217, 38, 106, 190, 127, 196, 196, 187, 207, 45, 137, 190, 136, 203, 243, 189, 194, 121, 150, 190, 101, 186, 125, 62, 21, 45, 242, 188, 132, 207, 39, 62, 26, 219, 57, 62, 179, 34, 132, 60, 230, 29, 55, 62, 128, 155, 133, 190, 239, 41, 255, 189, 236, 145, 128, 190, 187, 154, 42, 190, 248, 119, 216, 189, 235, 101, 181, 61, 88, 152, 14, 190, 92, 250, 155, 190, 108, 241, 94, 62, 63, 215, 40, 189, 38, 41, 248, 61, 120, 44, 123, 189, 120, 152, 242, 189, 84, 254, 3, 190, 91, 130, 250, 189, 163, 218, 200, 190, 172, 172, 35, 190, 73, 70, 28, 62, 236, 68, 221, 189, 229, 144, 39, 60, 48, 75, 72, 61, 73, 230, 241, 60, 165, 104, 168, 60, 144, 169, 159, 189, 160, 109, 17, 190, 125, 224, 188, 61, 195, 51, 120, 190, 214, 240, 118, 61, 213, 98, 56, 62, 148, 56, 56, 62, 206, 83, 206, 62, 187, 238, 8, 62, 149, 106, 109, 190, 107, 72, 134, 189, 219, 157, 33, 61, 72, 73, 12, 189, 205, 103, 188, 62, 22, 16, 25, 62, 188, 251, 130, 188, 188, 211, 156, 188, 92, 34, 112, 62, 87, 233, 149, 189, 197, 23, 39, 62, 195, 136, 78, 189, 166, 117, 58, 62, 30, 118, 69, 190, 162, 86, 149, 62, 62, 67, 164, 188, 89, 129, 29, 62, 10, 185, 159, 189, 0, 33, 168, 61, 159, 229, 10, 62, 221, 49, 74, 190, 114, 86, 248, 61, 196, 86, 26, 190, 112, 129, 56, 189, 78, 232, 210, 189, 192, 207, 132, 190, 78, 61, 84, 61, 112, 156, 240, 60, 229, 125, 253, 189, 155, 84, 32, 62, 190, 245, 82, 190, 49, 106, 52, 62, 79, 65, 221, 189, 147, 4, 57, 62, 207, 29, 143, 61, 148, 105, 211, 60, 75, 52, 138, 189, 143, 55, 119, 62, 170, 113, 88, 62, 228, 84, 75, 190, 144, 157, 18, 62, 25, 251, 226, 60, 37, 44, 111, 190, 8, 53, 26, 190, 155, 106, 160, 188, 174, 4, 32, 190, 181, 196, 215, 189, 58, 121, 33, 61, 239, 7, 42, 190, 193, 76, 174, 188, 66, 126, 248, 189, 227, 63, 156, 189, 89, 224, 104, 61, 164, 203, 22, 62, 238, 163, 48, 62, 204, 225, 126, 61, 184, 243, 64, 190, 17, 248, 143, 61, 71, 110, 227, 189, 170, 157, 242, 188, 157, 129, 168, 61, 157, 94, 51, 190, 240, 99, 146, 60, 4, 129, 126, 61, 125, 213, 223, 189, 197, 38, 197, 189, 48, 218, 115, 61, 135, 86, 198, 61, 218, 172, 169, 189, 185, 96, 49, 190, 143, 109, 198, 188, 182, 106, 14, 61, 226, 148, 71, 189, 142, 13, 251, 189, 129, 35, 195, 188, 61, 87, 23, 190, 72, 176, 205, 189, 80, 149, 65, 60, 51, 214, 2, 190, 174, 104, 126, 62, 200, 178, 69, 62, 182, 252, 157, 189, 97, 88, 52, 190, 52, 65, 220, 61, 151, 70, 32, 62, 49, 255, 227, 190, 66, 107, 228, 61, 225, 224, 105, 190, 63, 183, 31, 61, 24, 10, 32, 190, 51, 147, 208, 61, 131, 100, 89, 190, 185, 98, 58, 60, 32, 148, 121, 62, 152, 46, 173, 190, 254, 20, 65, 62, 183, 117, 238, 61, 160, 184, 99, 190, 252, 224, 37, 61, 5, 46, 175, 190, 203, 3, 220, 61, 1, 153, 87, 189, 137, 52, 15, 61, 34, 170, 245, 189, 184, 90, 13, 61, 173, 213, 54, 190, 158, 88, 199, 61, 247, 134, 85, 62, 47, 251, 184, 190, 55, 183, 200, 61, 209, 221, 154, 62, 143, 179, 88, 62, 177, 168, 187, 61, 50, 254, 43, 190, 247, 229, 47, 190, 229, 76, 18, 62, 76, 67, 185, 61, 106, 136, 223, 60, 66, 29, 6, 190, 245, 144, 125, 190, 153, 91, 145, 189, 185, 60, 204, 189, 224, 1, 2, 62, 61, 170, 11, 191, 184, 73, 197, 61, 202, 73, 89, 189, 39, 11, 102, 190, 118, 124, 111, 61, 31, 251, 143, 62, 142, 138, 9, 189, 254, 168, 174, 62, 134, 60, 118, 61, 179, 183, 76, 62, 216, 103, 148, 187, 173, 239, 41, 61, 181, 217, 33, 190, 186, 241, 24, 62, 101, 50, 146, 189, 27, 64, 170, 189, 89, 252, 148, 61, 161, 118, 145, 61, 109, 110, 129, 61, 204, 200, 151, 60, 168, 11, 209, 62, 88, 92, 220, 61, 142, 99, 4, 190, 177, 150, 19, 190, 203, 76, 160, 62, 161, 121, 70, 62, 102, 144, 228, 61, 111, 59, 99, 190, 246, 46, 236, 188, 212, 86, 75, 62, 30, 97, 36, 61, 61, 147, 140, 190, 104, 79, 154, 190, 100, 118, 211, 189, 94, 196, 78, 189, 203, 193, 80, 191, 253, 135, 182, 189, 181, 186, 218, 62, 183, 69, 235, 189, 233, 123, 43, 189, 173, 37, 176, 61, 70, 7, 176, 189, 134, 88, 194, 189, 130, 243, 226, 190, 155, 227, 123, 190, 122, 9, 116, 190, 50, 78, 137, 190, 234, 32, 19, 63, 41, 97, 74, 188, 69, 77, 165, 189, 222, 18, 155, 62, 124, 190, 148, 189, 60, 53, 150, 189, 53, 185, 71, 191, 209, 121, 172, 61, 118, 180, 153, 62, 196, 36, 241, 61, 236, 49, 37, 190, 64, 134, 233, 61, 70, 34, 137, 62, 226, 50, 4, 190, 250, 79, 128, 62, 39, 201, 80, 62, 34, 153, 22, 191, 252, 206, 104, 189, 133, 169, 39, 190, 96, 126, 104, 191, 177, 71, 204, 189, 16, 3, 131, 190, 245, 131, 3, 191, 106, 144, 196, 62, 116, 194, 206, 190, 141, 69, 143, 62, 17, 19, 246, 189, 176, 221, 187, 60, 88, 226, 53, 191, 252, 48, 95, 189, 72, 250, 35, 190, 27, 250, 120, 189, 107, 171, 117, 61, 101, 91, 230, 60, 250, 171, 125, 190, 254, 223, 12, 190, 38, 95, 155, 190, 192, 247, 208, 61, 56, 1, 217, 61, 230, 52, 56, 190, 6, 97, 1, 191, 154, 36, 57, 62, 122, 34, 41, 62, 50, 166, 254, 59, 135, 253, 239, 190, 172, 211, 11, 60, 72, 226, 107, 189, 214, 103, 114, 61, 92, 133, 57, 190, 121, 182, 196, 60, 173, 223, 161, 62, 35, 4, 122, 62, 8, 11, 198, 61, 189, 28, 6, 189, 88, 103, 211, 188, 117, 51, 230, 190, 137, 110, 31, 190, 235, 147, 191, 61, 145, 109, 247, 61, 9, 208, 50, 190, 224, 108, 214, 189, 215, 30, 181, 62, 173, 30, 39, 190, 39, 38, 242, 190, 102, 219, 226, 188, 30, 13, 153, 190, 215, 181, 41, 190, 159, 255, 50, 62, 18, 77, 216, 188, 107, 153, 240, 59, 252, 23, 123, 60, 20, 205, 39, 190, 146, 64, 65, 61, 239, 31, 92, 189, 74, 112, 199, 61, 55, 124, 211, 61, 116, 118, 254, 188, 182, 192, 8, 62, 189, 145, 51, 190, 58, 122, 133, 189, 150, 15, 164, 189, 138, 141, 41, 189, 78, 149, 146, 61, 103, 154, 28, 62, 30, 109, 244, 59, 99, 152, 18, 190, 210, 80, 25, 190, 218, 217, 19, 190, 25, 217, 203, 61, 181, 223, 1, 190, 167, 132, 107, 189, 14, 196, 8, 190, 237, 119, 31, 189, 23, 6, 174, 61, 233, 210, 6, 62, 221, 132, 117, 188, 102, 191, 2, 190, 183, 219, 197, 61, 197, 179, 13, 190, 125, 187, 197, 189, 209, 223, 226, 61, 192, 179, 150, 62, 33, 233, 223, 189, 221, 139, 40, 190, 203, 148, 210, 60, 155, 137, 66, 190, 21, 187, 15, 62, 51, 117, 57, 62, 227, 1, 242, 61, 247, 51, 44, 61, 46, 168, 166, 61, 161, 57, 22, 62, 209, 75, 177, 190, 237, 89, 165, 189, 45, 186, 215, 187, 74, 69, 135, 190, 51, 45, 42, 191, 220, 179, 217, 190, 181, 6, 161, 62, 51, 247, 12, 61, 0, 134, 38, 188, 43, 207, 165, 189, 63, 129, 185, 190, 206, 237, 23, 191, 26, 169, 131, 191, 210, 253, 228, 187, 84, 171, 117, 190, 189, 84, 169, 188, 95, 31, 222, 62, 96, 15, 201, 59, 188, 180, 119, 190, 5, 82, 54, 62, 238, 42, 51, 190, 248, 52, 53, 189, 241, 47, 171, 61, 130, 17, 102, 189, 28, 191, 114, 62, 127, 47, 72, 189, 71, 176, 129, 61, 11, 116, 40, 62, 2, 165, 230, 187, 87, 199, 74, 190, 229, 53, 13, 190, 168, 159, 22, 62, 203, 78, 91, 62, 233, 101, 70, 190, 142, 165, 31, 61, 232, 194, 195, 61, 10, 241, 164, 190, 60, 251, 32, 61, 108, 189, 36, 60, 193, 247, 96, 62, 100, 200, 130, 189, 57, 217, 59, 61, 206, 212, 154, 190, 1, 141, 79, 62, 152, 250, 19, 191, 164, 46, 128, 191, 10, 217, 210, 188, 94, 106, 5, 189, 200, 108, 47, 62, 134, 248, 251, 61, 173, 221, 37, 62, 116, 253, 147, 190, 185, 108, 231, 187, 163, 54, 76, 62, 33, 88, 129, 62, 134, 236, 227, 188, 239, 182, 17, 191, 222, 192, 37, 62, 144, 114, 36, 62, 193, 190, 121, 190, 85, 115, 200, 190, 221, 171, 193, 190, 69, 21, 187, 190, 28, 98, 14, 191, 23, 120, 104, 190, 156, 24, 11, 191, 170, 217, 165, 61, 222, 211, 238, 62, 10, 240, 46, 190, 95, 239, 253, 187, 50, 164, 175, 188, 181, 140, 63, 190, 61, 206, 130, 61, 183, 172, 203, 190, 105, 147, 80, 190, 159, 162, 160, 62, 147, 92, 149, 190, 212, 218, 66, 191, 34, 153, 254, 189, 107, 78, 4, 189, 86, 136, 170, 189, 10, 194, 161, 190, 47, 67, 61, 190, 81, 124, 155, 61, 43, 128, 141, 62, 235, 107, 21, 62, 14, 176, 211, 189, 234, 210, 24, 61, 91, 66, 33, 190, 184, 169, 220, 189, 177, 42, 12, 190, 208, 167, 11, 190, 223, 131, 112, 189, 134, 66, 235, 188, 242, 34, 165, 61, 146, 183, 11, 190, 37, 46, 130, 61, 76, 23, 158, 189, 139, 192, 14, 62, 93, 51, 67, 190, 44, 33, 192, 189, 245, 118, 145, 189, 47, 224, 125, 189, 6, 204, 165, 61, 106, 24, 218, 189, 152, 46, 69, 190, 133, 108, 110, 55, 110, 162, 194, 61, 9, 134, 177, 188, 238, 38, 42, 62, 143, 170, 147, 61, 83, 160, 228, 189, 42, 79, 40, 187, 42, 223, 244, 189, 11, 162, 33, 190, 203, 233, 12, 62, 209, 200, 112, 60, 39, 29, 3, 191, 172, 156, 31, 189, 158, 157, 40, 190, 8, 232, 250, 189, 133, 145, 130, 190, 8, 245, 34, 189, 10, 2, 28, 191, 8, 233, 149, 62, 241, 46, 223, 190, 94, 52, 108, 61, 193, 39, 41, 189, 13, 176, 195, 61, 180, 210, 226, 188, 37, 165, 128, 62, 52, 79, 186, 62, 193, 8, 88, 62, 212, 176, 95, 62, 97, 24, 111, 62, 130, 253, 112, 188, 242, 198, 255, 61, 30, 151, 151, 190, 9, 203, 176, 188, 37, 10, 210, 62, 228, 105, 23, 62, 2, 44, 10, 191, 6, 32, 165, 62, 246, 109, 250, 60, 90, 10, 75, 190, 119, 14, 102, 190, 250, 40, 71, 62, 144, 176, 191, 190, 84, 22, 140, 62, 226, 34, 90, 191, 148, 160, 74, 190, 246, 201, 77, 62, 113, 167, 63, 189, 136, 194, 105, 190, 54, 203, 120, 61, 92, 205, 85, 190, 58, 38, 207, 61, 110, 210, 195, 189, 67, 168, 182, 61, 96, 39, 152, 189, 248, 51, 230, 61, 2, 196, 44, 62, 235, 112, 20, 62, 208, 36, 145, 62, 58, 24, 181, 62, 190, 112, 0, 62, 85, 206, 52, 61, 38, 232, 74, 190, 243, 237, 120, 190, 250, 1, 89, 190, 89, 206, 236, 189, 21, 39, 86, 62, 66, 50, 73, 190, 38, 173, 128, 190, 203, 31, 152, 62, 28, 203, 177, 60, 121, 155, 67, 190, 230, 132, 168, 189, 119, 219, 96, 62, 22, 181, 229, 190, 134, 204, 180, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 3, 62, 62, 42, 96, 131, 62, 5, 224, 27, 189, 149, 184, 242, 61, 230, 212, 252, 61, 131, 52, 103, 190, 35, 160, 160, 62, 4, 61, 49, 190, 134, 66, 216, 61, 208, 29, 81, 62, 199, 250, 202, 61, 99, 28, 193, 61, 142, 73, 132, 62, 24, 185, 160, 62, 19, 55, 88, 61, 41, 61, 198, 61, 220, 22, 66, 189, 61, 195, 43, 190, 167, 255, 199, 60, 144, 186, 115, 61, 10, 229, 11, 189, 12, 69, 149, 189, 244, 5, 96, 61, 252, 41, 2, 60, 191, 71, 141, 190, 107, 197, 52, 190, 21, 121, 48, 62, 238, 190, 163, 62, 67, 188, 142, 61, 65, 110, 20, 61, 37, 163, 91, 62, 139, 118, 116, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 104, 25, 63, 190, 63, 212, 189, 29, 241, 89, 191, 168, 137, 205, 62, 47, 216, 115, 190, 144, 187, 15, 62, 208, 11, 4, 63, 7, 251, 165, 190, 184, 108, 253, 61, 97, 252, 208, 190, 168, 76, 92, 63, 184, 240, 32, 61, 214, 251, 32, 63, 124, 220, 78, 191, 61, 7, 174, 188, 171, 181, 95, 62, 156, 161, 6, 62, 244, 107, 118, 190, 248, 99, 115, 188, 88, 119, 186, 61, 188, 59, 115, 62, 155, 180, 85, 62, 19, 179, 1, 63, 97, 222, 41, 63, 215, 231, 242, 190, 59, 45, 201, 189, 103, 44, 86, 63, 221, 131, 159, 189, 73, 155, 6, 63, 23, 140, 250, 189, 101, 136, 255, 190, 49, 106, 225, 190, 59, 31, 43, 62, 126, 232, 138, 190, 92, 87, 68, 62, 141, 196, 73, 62, 13, 159, 124, 190, 118, 114, 7, 190, 27, 255, 200, 189, 228, 245, 160, 62, 244, 23, 175, 190, 57, 188, 62, 190, 134, 38, 192, 61, 236, 20, 31, 190, 172, 74, 250, 60, 131, 121, 100, 62, 164, 232, 206, 61, 119, 150, 158, 190, 88, 130, 44, 62, 65, 123, 103, 62, 254, 212, 26, 190, 148, 245, 116, 188, 45, 251, 247, 187, 118, 138, 27, 61, 135, 250, 224, 62, 22, 161, 149, 61, 233, 184, 71, 62, 54, 30, 3, 62, 90, 71, 40, 61, 14, 149, 155, 190, 176, 7, 217, 190, 239, 22, 237, 61, 82, 55, 30, 190, 195, 148, 125, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {30, 25, 135, 189, 186, 245, 106, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {167, 144, 104, 63, 220, 59, 230, 62, 76, 232, 139, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {215, 19, 148, 191, 70, 20, 188, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0089/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}