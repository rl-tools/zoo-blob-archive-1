// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 144, 241, 62, 78, 11, 81, 191, 3, 41, 118, 190, 145, 5, 149, 62, 11, 18, 95, 191, 94, 245, 133, 190, 81, 87, 166, 190, 231, 132, 99, 62, 158, 26, 136, 62, 82, 12, 175, 190, 62, 188, 12, 63, 25, 116, 39, 62, 86, 12, 220, 62, 29, 120, 255, 189, 143, 56, 19, 191, 27, 95, 11, 62, 212, 129, 90, 191, 198, 186, 68, 62, 9, 80, 205, 190, 194, 227, 138, 190, 145, 85, 178, 62, 207, 251, 8, 191, 192, 112, 31, 63, 63, 148, 89, 189, 83, 58, 193, 189, 111, 10, 200, 190, 250, 178, 10, 62, 113, 4, 153, 190, 233, 110, 50, 190, 222, 179, 230, 62, 123, 219, 192, 190, 8, 129, 72, 191, 18, 92, 176, 62, 61, 103, 156, 61, 131, 198, 34, 63, 254, 154, 208, 61, 150, 178, 62, 189, 236, 16, 81, 63, 132, 77, 6, 63, 65, 99, 19, 63, 4, 37, 112, 190, 39, 82, 18, 63, 67, 76, 180, 62, 129, 230, 40, 63, 24, 167, 183, 60, 93, 23, 204, 62, 63, 46, 25, 62, 211, 168, 153, 62, 77, 181, 188, 59, 60, 246, 179, 62, 31, 14, 200, 190, 253, 121, 189, 189, 107, 124, 125, 191, 163, 40, 128, 61, 251, 57, 26, 190, 210, 124, 26, 63, 250, 9, 130, 62, 1, 130, 243, 61, 80, 69, 180, 190, 175, 168, 41, 190, 32, 96, 156, 190, 57, 77, 117, 190, 130, 219, 252, 62, 204, 87, 142, 62, 77, 13, 162, 190, 201, 91, 132, 190, 37, 27, 13, 63, 67, 195, 68, 63, 102, 248, 143, 61, 1, 74, 167, 189, 178, 96, 51, 191, 52, 149, 158, 190, 48, 152, 148, 62, 100, 53, 150, 190, 125, 161, 48, 190, 184, 118, 6, 191, 123, 93, 33, 63, 100, 47, 22, 191, 204, 188, 58, 62, 93, 184, 17, 190, 26, 86, 6, 63, 57, 167, 207, 62, 27, 164, 9, 63, 14, 190, 57, 190, 67, 84, 125, 190, 116, 190, 7, 189, 232, 127, 162, 62, 61, 137, 3, 190, 7, 163, 133, 189, 230, 224, 168, 62, 52, 153, 191, 62, 66, 51, 233, 190, 103, 164, 113, 190, 28, 134, 10, 63, 202, 151, 176, 189, 235, 118, 63, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 107, 172, 190, 22, 32, 22, 63, 7, 178, 7, 191, 95, 43, 197, 62, 38, 198, 50, 188, 106, 50, 181, 62, 16, 232, 182, 190, 123, 160, 217, 188, 46, 246, 156, 61, 234, 94, 1, 63, 94, 169, 180, 188, 116, 44, 86, 62, 243, 48, 183, 59, 183, 221, 59, 190, 85, 59, 1, 63, 167, 234, 50, 190, 25, 94, 221, 62, 247, 92, 16, 62, 4, 174, 243, 62, 223, 185, 237, 62, 116, 9, 191, 189, 112, 125, 216, 190, 106, 151, 46, 63, 102, 4, 15, 62, 252, 234, 1, 191, 202, 96, 189, 188, 82, 253, 226, 62, 249, 230, 231, 190, 196, 193, 181, 62, 153, 119, 94, 190, 222, 154, 104, 190, 33, 174, 68, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 189, 2, 189, 209, 102, 37, 62, 145, 226, 36, 189, 74, 65, 207, 188, 181, 12, 13, 190, 197, 141, 34, 62, 237, 124, 73, 61, 150, 166, 116, 61, 159, 181, 155, 61, 186, 156, 25, 62, 98, 106, 234, 189, 129, 223, 162, 190, 7, 133, 101, 61, 173, 93, 153, 190, 161, 251, 146, 190, 73, 40, 53, 190, 33, 42, 59, 189, 42, 184, 180, 62, 219, 54, 139, 61, 82, 169, 168, 61, 82, 20, 11, 62, 18, 57, 6, 61, 64, 43, 95, 190, 98, 205, 166, 189, 161, 19, 109, 61, 45, 16, 212, 189, 40, 231, 166, 60, 121, 182, 42, 189, 86, 11, 155, 61, 62, 138, 2, 62, 253, 145, 10, 190, 172, 195, 89, 190, 82, 254, 85, 190, 82, 85, 160, 189, 96, 50, 63, 61, 18, 200, 19, 190, 150, 103, 144, 188, 195, 162, 9, 62, 0, 92, 42, 189, 59, 110, 3, 62, 83, 58, 37, 61, 121, 181, 116, 61, 96, 226, 136, 189, 207, 61, 216, 61, 170, 41, 241, 59, 161, 14, 81, 62, 50, 28, 142, 62, 16, 47, 125, 189, 220, 125, 255, 60, 36, 33, 15, 62, 0, 141, 215, 182, 57, 88, 58, 61, 255, 19, 242, 61, 121, 217, 188, 61, 244, 231, 109, 62, 238, 45, 107, 189, 46, 127, 33, 190, 81, 233, 40, 62, 8, 84, 13, 61, 21, 115, 1, 189, 176, 102, 71, 189, 126, 11, 245, 59, 47, 60, 71, 190, 113, 86, 14, 62, 170, 108, 51, 60, 11, 187, 64, 61, 78, 25, 38, 62, 182, 180, 87, 61, 83, 146, 202, 189, 152, 69, 130, 190, 123, 187, 229, 189, 47, 250, 30, 62, 211, 61, 165, 61, 156, 34, 165, 61, 10, 156, 78, 190, 112, 130, 63, 61, 210, 102, 108, 189, 83, 114, 148, 189, 238, 134, 174, 59, 131, 212, 17, 62, 13, 221, 37, 62, 113, 138, 165, 189, 231, 222, 242, 61, 219, 124, 180, 189, 42, 139, 115, 189, 112, 199, 65, 190, 17, 226, 11, 62, 157, 80, 192, 61, 251, 88, 204, 60, 135, 214, 248, 61, 95, 83, 195, 189, 89, 15, 239, 60, 29, 24, 52, 62, 86, 17, 3, 190, 17, 18, 82, 190, 183, 64, 100, 190, 91, 32, 65, 62, 162, 73, 244, 61, 167, 32, 53, 185, 244, 63, 69, 190, 187, 1, 77, 62, 4, 190, 104, 62, 73, 107, 253, 189, 14, 53, 45, 190, 239, 26, 49, 62, 88, 78, 140, 189, 215, 133, 235, 59, 22, 86, 24, 190, 30, 146, 93, 190, 175, 195, 237, 189, 248, 36, 236, 189, 66, 191, 53, 190, 133, 155, 14, 62, 107, 79, 172, 62, 210, 27, 180, 61, 244, 126, 94, 62, 170, 235, 114, 61, 170, 139, 55, 188, 52, 42, 19, 190, 117, 183, 182, 189, 7, 26, 71, 189, 12, 221, 46, 189, 179, 13, 210, 61, 169, 238, 49, 61, 120, 75, 28, 61, 205, 203, 3, 190, 99, 69, 241, 59, 65, 45, 170, 189, 16, 192, 123, 188, 78, 85, 92, 189, 239, 250, 145, 188, 11, 148, 216, 61, 69, 148, 70, 61, 234, 140, 89, 189, 109, 79, 60, 189, 98, 240, 194, 189, 230, 175, 145, 61, 119, 172, 152, 61, 166, 112, 144, 189, 118, 160, 207, 187, 142, 168, 205, 187, 122, 161, 59, 61, 231, 189, 107, 62, 162, 161, 128, 62, 249, 21, 74, 61, 148, 100, 154, 190, 242, 70, 152, 60, 9, 60, 156, 189, 82, 160, 6, 190, 15, 210, 236, 189, 232, 1, 101, 62, 63, 57, 246, 61, 38, 178, 207, 61, 13, 57, 242, 188, 150, 37, 51, 62, 168, 39, 44, 190, 130, 24, 20, 62, 178, 212, 40, 60, 4, 187, 20, 190, 49, 192, 160, 62, 104, 218, 182, 190, 38, 25, 0, 190, 12, 129, 161, 61, 213, 58, 29, 190, 50, 34, 122, 61, 255, 146, 36, 189, 253, 235, 16, 61, 189, 246, 31, 62, 212, 173, 56, 190, 156, 211, 105, 190, 244, 253, 52, 190, 24, 212, 8, 62, 46, 1, 97, 189, 150, 187, 174, 60, 137, 130, 91, 62, 157, 81, 231, 188, 233, 137, 11, 62, 12, 199, 63, 190, 221, 49, 203, 61, 243, 55, 62, 62, 250, 73, 253, 60, 170, 70, 56, 190, 53, 141, 19, 62, 44, 238, 64, 187, 216, 50, 232, 188, 234, 211, 207, 60, 40, 185, 31, 190, 189, 31, 5, 190, 96, 116, 74, 189, 243, 225, 28, 189, 45, 254, 104, 190, 21, 48, 21, 189, 117, 123, 240, 61, 62, 225, 63, 60, 64, 16, 200, 61, 126, 163, 222, 189, 176, 234, 193, 189, 16, 12, 58, 189, 247, 236, 220, 189, 203, 228, 210, 61, 181, 201, 250, 61, 239, 13, 28, 190, 49, 173, 88, 190, 239, 81, 6, 190, 125, 70, 197, 61, 38, 34, 244, 187, 240, 147, 222, 61, 69, 102, 226, 189, 53, 196, 116, 187, 104, 141, 175, 61, 186, 126, 89, 190, 18, 45, 53, 189, 76, 237, 188, 60, 215, 219, 231, 61, 65, 90, 30, 189, 147, 34, 178, 188, 189, 96, 93, 189, 73, 123, 24, 190, 244, 175, 34, 60, 157, 72, 177, 61, 189, 29, 209, 188, 239, 165, 129, 189, 96, 197, 250, 61, 96, 212, 217, 61, 240, 58, 49, 61, 235, 38, 130, 190, 53, 158, 39, 61, 224, 219, 174, 61, 230, 127, 0, 190, 249, 159, 51, 61, 108, 255, 38, 62, 7, 52, 254, 189, 161, 221, 40, 190, 248, 69, 4, 62, 66, 81, 29, 189, 4, 64, 39, 190, 95, 178, 47, 60, 187, 116, 68, 62, 79, 111, 241, 61, 160, 197, 142, 61, 31, 247, 67, 61, 78, 215, 203, 189, 118, 10, 76, 189, 184, 246, 157, 188, 243, 12, 226, 189, 157, 236, 32, 61, 137, 155, 13, 189, 95, 128, 134, 61, 254, 249, 7, 189, 162, 128, 53, 189, 95, 221, 5, 61, 160, 196, 222, 189, 124, 5, 206, 60, 203, 138, 209, 189, 240, 241, 49, 188, 245, 224, 57, 60, 25, 104, 240, 60, 168, 220, 4, 62, 239, 236, 180, 189, 55, 9, 143, 190, 142, 121, 74, 62, 117, 96, 8, 188, 141, 138, 188, 189, 48, 39, 47, 61, 142, 171, 255, 61, 54, 245, 100, 189, 117, 18, 34, 62, 156, 10, 23, 189, 125, 10, 58, 190, 2, 212, 136, 189, 48, 123, 50, 61, 4, 214, 53, 189, 79, 242, 53, 62, 2, 50, 231, 62, 238, 135, 228, 189, 238, 59, 86, 62, 111, 95, 179, 61, 224, 235, 236, 61, 217, 47, 100, 62, 79, 85, 54, 188, 146, 153, 190, 189, 183, 217, 252, 189, 176, 202, 214, 61, 204, 121, 36, 60, 38, 2, 30, 190, 99, 34, 59, 190, 109, 28, 217, 61, 94, 105, 154, 189, 57, 220, 44, 189, 245, 229, 187, 189, 218, 171, 69, 61, 21, 25, 94, 62, 6, 171, 97, 189, 95, 125, 64, 61, 34, 15, 5, 190, 167, 146, 69, 62, 125, 40, 8, 61, 114, 72, 23, 190, 239, 134, 77, 190, 135, 116, 180, 61, 86, 55, 44, 62, 197, 218, 62, 190, 43, 177, 88, 62, 113, 20, 193, 188, 173, 216, 75, 61, 152, 209, 91, 190, 77, 206, 182, 189, 82, 112, 75, 189, 39, 130, 59, 60, 120, 207, 154, 59, 75, 252, 181, 61, 4, 87, 159, 189, 227, 185, 163, 188, 170, 176, 36, 61, 6, 145, 117, 61, 183, 219, 28, 62, 248, 167, 27, 190, 18, 197, 13, 189, 198, 6, 180, 189, 218, 126, 4, 190, 215, 114, 10, 190, 202, 44, 193, 188, 67, 22, 131, 60, 215, 1, 149, 190, 164, 165, 236, 59, 122, 239, 25, 62, 183, 255, 205, 188, 47, 75, 164, 61, 49, 22, 109, 62, 150, 3, 130, 186, 171, 241, 74, 62, 16, 92, 119, 190, 141, 82, 129, 190, 235, 25, 201, 189, 69, 85, 182, 61, 165, 93, 172, 187, 157, 156, 240, 61, 77, 168, 170, 62, 113, 203, 187, 60, 26, 0, 38, 62, 69, 136, 200, 189, 161, 228, 44, 190, 61, 168, 140, 185, 204, 24, 160, 61, 61, 189, 174, 190, 25, 76, 53, 189, 51, 185, 188, 189, 28, 85, 33, 190, 147, 235, 43, 59, 68, 158, 127, 189, 136, 59, 232, 189, 236, 149, 9, 62, 115, 237, 139, 186, 169, 203, 185, 60, 175, 204, 36, 190, 90, 80, 219, 189, 161, 209, 228, 61, 255, 249, 61, 62, 92, 85, 149, 60, 17, 101, 90, 61, 150, 151, 190, 61, 118, 121, 150, 188, 138, 38, 166, 189, 46, 181, 120, 190, 241, 71, 58, 61, 139, 23, 156, 61, 203, 62, 159, 61, 22, 176, 9, 190, 129, 204, 173, 189, 148, 229, 86, 62, 203, 128, 252, 189, 179, 88, 202, 60, 198, 85, 77, 60, 128, 193, 9, 62, 91, 176, 60, 190, 201, 50, 162, 61, 113, 231, 193, 189, 140, 43, 30, 62, 230, 111, 69, 61, 222, 193, 175, 61, 59, 158, 205, 61, 206, 14, 169, 61, 237, 188, 183, 187, 177, 235, 84, 187, 146, 107, 76, 62, 17, 225, 123, 60, 214, 62, 225, 60, 238, 179, 14, 190, 85, 190, 51, 62, 52, 168, 184, 60, 136, 164, 120, 189, 64, 211, 159, 188, 249, 235, 52, 62, 91, 229, 21, 62, 58, 248, 65, 62, 9, 222, 43, 190, 150, 178, 61, 190, 18, 127, 25, 190, 123, 248, 36, 190, 36, 169, 188, 189, 115, 136, 182, 59, 230, 182, 150, 62, 199, 3, 26, 190, 238, 114, 141, 187, 98, 75, 140, 188, 34, 67, 229, 189, 248, 51, 34, 60, 190, 229, 139, 61, 173, 131, 82, 190, 50, 238, 188, 189, 237, 159, 28, 62, 223, 40, 27, 190, 80, 57, 159, 189, 77, 102, 208, 60, 229, 237, 254, 60, 85, 211, 48, 190, 55, 99, 73, 190, 197, 39, 28, 60, 8, 125, 18, 190, 11, 41, 132, 62, 174, 79, 154, 189, 114, 161, 138, 190, 222, 71, 18, 190, 104, 255, 40, 62, 162, 106, 157, 190, 146, 169, 55, 189, 153, 76, 137, 190, 250, 47, 43, 62, 110, 39, 22, 62, 218, 200, 74, 190, 79, 136, 36, 62, 254, 119, 125, 189, 108, 91, 203, 188, 38, 96, 211, 190, 20, 163, 91, 62, 158, 194, 107, 61, 15, 246, 61, 190, 58, 253, 62, 190, 227, 30, 103, 62, 180, 9, 205, 61, 46, 89, 33, 190, 161, 246, 2, 62, 17, 64, 102, 60, 19, 104, 98, 190, 139, 180, 10, 60, 141, 56, 140, 190, 27, 181, 12, 190, 238, 9, 37, 60, 30, 190, 162, 189, 231, 215, 184, 189, 234, 173, 5, 62, 19, 207, 182, 189, 149, 137, 41, 190, 230, 38, 100, 189, 69, 230, 87, 61, 97, 50, 238, 189, 104, 48, 0, 62, 235, 83, 36, 190, 48, 249, 164, 61, 164, 69, 139, 61, 143, 100, 61, 190, 11, 86, 117, 186, 148, 128, 76, 61, 217, 209, 50, 61, 22, 48, 188, 61, 165, 214, 31, 189, 68, 195, 82, 190, 52, 113, 10, 62, 120, 182, 229, 60, 207, 157, 202, 59, 196, 144, 99, 188, 27, 71, 46, 190, 190, 216, 33, 190, 166, 229, 48, 190, 60, 132, 7, 62, 125, 30, 237, 189, 62, 144, 203, 189, 248, 41, 31, 59, 5, 125, 35, 62, 103, 114, 79, 190, 135, 43, 179, 189, 220, 171, 128, 62, 2, 162, 198, 61, 197, 114, 30, 189, 49, 88, 70, 190, 3, 77, 23, 62, 125, 80, 7, 62, 170, 103, 180, 189, 52, 234, 117, 62, 38, 97, 209, 59, 98, 197, 58, 62, 56, 158, 96, 190, 32, 122, 103, 187, 242, 216, 84, 190, 176, 21, 118, 190, 135, 96, 15, 190, 173, 121, 79, 60, 38, 60, 138, 62, 80, 248, 217, 189, 128, 101, 89, 62, 220, 49, 185, 189, 92, 61, 225, 189, 170, 52, 155, 60, 207, 192, 76, 61, 81, 222, 54, 190, 152, 120, 165, 190, 2, 109, 47, 62, 82, 168, 185, 61, 247, 28, 24, 62, 249, 90, 55, 62, 199, 114, 240, 61, 240, 203, 68, 189, 253, 28, 66, 190, 251, 228, 154, 188, 111, 150, 15, 190, 47, 145, 223, 188, 60, 246, 52, 61, 81, 2, 210, 189, 57, 248, 223, 61, 225, 253, 47, 190, 53, 102, 200, 189, 241, 187, 151, 189, 198, 12, 33, 190, 5, 93, 222, 61, 22, 59, 188, 60, 254, 65, 203, 61, 18, 96, 23, 61, 1, 247, 8, 190, 156, 130, 64, 61, 6, 64, 62, 190, 100, 222, 175, 189, 198, 50, 17, 190, 154, 134, 26, 60, 228, 106, 236, 189, 198, 124, 59, 61, 163, 118, 47, 190, 100, 180, 195, 189, 108, 124, 8, 61, 101, 181, 42, 61, 173, 245, 80, 188, 68, 196, 156, 61, 36, 138, 137, 61, 192, 163, 22, 190, 185, 210, 97, 190, 141, 237, 8, 190, 79, 0, 161, 189, 119, 172, 214, 61, 102, 139, 197, 61, 68, 124, 218, 188, 78, 182, 151, 61, 39, 186, 246, 61, 221, 59, 203, 189, 89, 119, 208, 58, 159, 161, 109, 189, 248, 140, 231, 61, 102, 226, 133, 189, 37, 195, 73, 61, 96, 134, 167, 60, 237, 70, 118, 62, 84, 39, 4, 62, 247, 94, 8, 61, 193, 184, 137, 190, 49, 158, 14, 62, 227, 243, 153, 61, 208, 176, 22, 61, 92, 196, 23, 62, 205, 102, 79, 62, 189, 87, 43, 190, 38, 140, 30, 190, 22, 198, 7, 61, 254, 60, 149, 188, 217, 44, 210, 60, 159, 185, 129, 61, 50, 2, 18, 62, 11, 52, 18, 190, 182, 96, 194, 61, 0, 179, 208, 61, 24, 188, 92, 60, 117, 233, 198, 61, 238, 95, 71, 61, 229, 50, 6, 62, 80, 55, 181, 189, 210, 100, 61, 62, 106, 247, 15, 190, 50, 208, 153, 61, 103, 255, 143, 188, 41, 149, 214, 189, 97, 107, 25, 188, 64, 44, 240, 61, 144, 241, 20, 61, 179, 84, 74, 61, 15, 99, 88, 189, 173, 225, 26, 62, 65, 226, 15, 189, 44, 114, 1, 62, 146, 156, 115, 189, 58, 134, 19, 62, 184, 84, 3, 189, 40, 217, 120, 62, 187, 126, 31, 62, 204, 237, 40, 62, 115, 58, 211, 61, 246, 254, 135, 61, 46, 247, 130, 189, 233, 42, 235, 189, 78, 38, 177, 61, 100, 210, 183, 189, 123, 235, 65, 189, 58, 203, 36, 61, 91, 80, 29, 190, 236, 102, 199, 187, 127, 252, 200, 189, 227, 63, 156, 189, 169, 70, 142, 61, 27, 254, 36, 62, 238, 163, 48, 62, 190, 219, 154, 61, 131, 183, 48, 190, 83, 184, 170, 61, 71, 110, 227, 189, 85, 189, 69, 188, 34, 60, 194, 61, 157, 94, 51, 190, 29, 108, 250, 60, 4, 129, 126, 61, 212, 75, 200, 189, 239, 217, 142, 189, 152, 133, 138, 61, 177, 250, 227, 61, 218, 172, 169, 189, 17, 75, 29, 190, 99, 168, 167, 188, 182, 106, 14, 61, 226, 148, 71, 189, 47, 204, 220, 189, 129, 35, 195, 188, 30, 69, 6, 190, 5, 149, 177, 189, 80, 149, 65, 60, 9, 124, 237, 189, 195, 77, 100, 61, 204, 215, 241, 61, 2, 59, 159, 189, 239, 22, 118, 190, 234, 39, 245, 61, 196, 234, 126, 62, 39, 178, 134, 190, 9, 20, 60, 189, 225, 224, 52, 60, 162, 131, 88, 189, 223, 43, 153, 61, 10, 29, 175, 188, 170, 212, 124, 61, 78, 129, 229, 188, 123, 125, 87, 62, 22, 147, 46, 190, 91, 120, 0, 62, 109, 255, 58, 62, 138, 53, 147, 190, 30, 133, 25, 189, 69, 108, 150, 189, 3, 151, 227, 61, 57, 212, 122, 189, 50, 45, 82, 188, 234, 3, 4, 190, 66, 0, 163, 188, 11, 204, 213, 189, 48, 59, 26, 62, 34, 85, 98, 187, 43, 232, 132, 190, 60, 7, 7, 61, 234, 6, 77, 62, 41, 166, 175, 60, 243, 182, 97, 189, 131, 222, 177, 188, 148, 120, 154, 189, 39, 57, 241, 61, 51, 180, 110, 61, 51, 160, 74, 60, 246, 169, 62, 190, 208, 175, 41, 190, 63, 28, 11, 190, 200, 234, 34, 190, 17, 109, 164, 60, 209, 45, 76, 190, 210, 120, 84, 61, 166, 63, 203, 189, 21, 226, 253, 61, 215, 200, 3, 60, 35, 24, 67, 62, 217, 12, 216, 61, 12, 160, 93, 62, 50, 174, 202, 61, 140, 204, 91, 62, 107, 167, 175, 61, 197, 14, 173, 60, 89, 100, 240, 189, 235, 99, 248, 61, 10, 71, 55, 188, 212, 75, 16, 189, 35, 25, 102, 61, 32, 99, 71, 60, 217, 222, 114, 187, 181, 30, 70, 189, 108, 233, 76, 61, 41, 70, 66, 62, 108, 49, 217, 187, 178, 76, 105, 59, 218, 159, 37, 62, 102, 152, 23, 62, 180, 224, 225, 61, 109, 197, 120, 190, 168, 123, 121, 61, 200, 48, 67, 62, 186, 71, 221, 188, 230, 68, 3, 190, 92, 18, 34, 187, 171, 168, 15, 190, 112, 182, 74, 189, 177, 15, 167, 190, 96, 194, 94, 61, 6, 90, 212, 62, 194, 21, 110, 60, 192, 31, 56, 61, 137, 0, 250, 61, 108, 72, 37, 61, 218, 34, 120, 189, 58, 158, 53, 62, 137, 236, 67, 190, 175, 212, 226, 189, 49, 204, 57, 190, 2, 100, 123, 61, 224, 190, 121, 60, 167, 121, 7, 189, 170, 245, 18, 61, 18, 154, 23, 189, 255, 53, 25, 189, 122, 120, 129, 61, 16, 115, 10, 189, 212, 26, 132, 61, 104, 138, 207, 61, 138, 15, 249, 189, 228, 62, 176, 59, 155, 101, 228, 189, 202, 137, 46, 190, 153, 145, 21, 62, 238, 137, 39, 62, 154, 173, 236, 189, 146, 23, 33, 190, 77, 77, 21, 190, 39, 235, 94, 189, 57, 66, 38, 190, 152, 50, 248, 189, 174, 146, 48, 190, 38, 59, 14, 62, 251, 188, 185, 189, 243, 45, 43, 62, 204, 208, 3, 190, 176, 124, 159, 188, 58, 53, 219, 61, 252, 48, 95, 189, 161, 106, 252, 188, 118, 168, 52, 190, 213, 84, 145, 61, 26, 122, 224, 189, 251, 194, 42, 190, 7, 187, 7, 190, 220, 166, 15, 190, 70, 37, 62, 189, 160, 238, 251, 61, 217, 173, 42, 190, 103, 96, 94, 190, 18, 176, 19, 62, 85, 70, 134, 190, 100, 119, 99, 60, 71, 250, 134, 190, 123, 167, 41, 61, 160, 126, 157, 189, 226, 135, 0, 62, 133, 0, 0, 190, 38, 44, 162, 61, 49, 49, 204, 61, 65, 219, 2, 62, 208, 226, 253, 61, 128, 44, 13, 60, 172, 25, 18, 190, 66, 82, 2, 61, 28, 79, 1, 190, 116, 63, 37, 62, 163, 103, 13, 62, 128, 62, 28, 190, 50, 151, 90, 188, 199, 31, 237, 60, 163, 192, 203, 189, 38, 67, 6, 190, 67, 65, 0, 190, 225, 183, 105, 190, 120, 88, 207, 189, 11, 89, 181, 61, 213, 224, 26, 189, 107, 153, 240, 59, 252, 23, 123, 60, 20, 205, 39, 190, 146, 64, 65, 61, 239, 31, 92, 189, 74, 112, 199, 61, 55, 124, 211, 61, 116, 118, 254, 188, 182, 192, 8, 62, 189, 145, 51, 190, 58, 122, 133, 189, 150, 15, 164, 189, 138, 141, 41, 189, 78, 149, 146, 61, 103, 154, 28, 62, 30, 109, 244, 59, 99, 152, 18, 190, 210, 80, 25, 190, 218, 217, 19, 190, 25, 217, 203, 61, 181, 223, 1, 190, 167, 132, 107, 189, 14, 196, 8, 190, 237, 119, 31, 189, 23, 6, 174, 61, 233, 210, 6, 62, 221, 132, 117, 188, 102, 191, 2, 190, 183, 219, 197, 61, 197, 179, 13, 190, 125, 187, 197, 189, 209, 223, 226, 61, 99, 251, 50, 62, 70, 83, 67, 62, 44, 183, 207, 188, 64, 65, 34, 188, 54, 52, 3, 190, 124, 7, 189, 61, 153, 72, 231, 61, 96, 48, 181, 189, 161, 74, 195, 60, 92, 249, 147, 61, 57, 102, 177, 61, 87, 108, 195, 188, 79, 211, 166, 61, 236, 255, 167, 188, 227, 101, 70, 189, 23, 187, 55, 190, 119, 66, 21, 190, 100, 166, 172, 62, 50, 215, 44, 61, 6, 39, 37, 62, 212, 82, 217, 189, 21, 237, 44, 190, 29, 210, 110, 190, 79, 130, 153, 60, 143, 168, 39, 190, 137, 244, 132, 190, 105, 89, 65, 189, 28, 148, 94, 190, 68, 142, 142, 57, 68, 230, 57, 190, 178, 97, 178, 61, 131, 161, 210, 189, 49, 100, 87, 61, 185, 9, 75, 62, 89, 21, 86, 61, 38, 97, 174, 61, 194, 115, 24, 189, 155, 230, 27, 61, 149, 98, 8, 62, 150, 194, 3, 190, 121, 26, 11, 190, 155, 116, 20, 190, 229, 70, 5, 62, 144, 44, 147, 61, 164, 159, 241, 189, 91, 72, 90, 61, 3, 35, 231, 189, 12, 79, 94, 189, 202, 152, 21, 62, 135, 156, 43, 61, 16, 110, 150, 61, 139, 113, 153, 189, 181, 113, 213, 60, 214, 213, 46, 190, 218, 241, 249, 61, 103, 251, 115, 189, 215, 161, 6, 190, 155, 237, 56, 188, 184, 35, 218, 189, 224, 122, 11, 62, 13, 75, 175, 61, 111, 252, 26, 62, 210, 19, 61, 189, 1, 245, 161, 189, 138, 101, 150, 61, 157, 77, 217, 61, 134, 236, 227, 188, 96, 28, 76, 189, 159, 24, 193, 188, 74, 230, 21, 62, 219, 22, 12, 60, 107, 209, 105, 189, 236, 31, 249, 187, 234, 31, 69, 190, 80, 25, 144, 190, 23, 45, 72, 190, 106, 192, 42, 189, 33, 38, 19, 189, 67, 102, 63, 62, 155, 20, 206, 189, 59, 100, 231, 189, 61, 184, 45, 62, 64, 160, 52, 61, 134, 253, 101, 189, 219, 14, 78, 188, 159, 239, 121, 61, 52, 193, 28, 61, 70, 105, 84, 187, 216, 104, 2, 190, 124, 186, 134, 190, 230, 93, 124, 189, 50, 188, 43, 190, 171, 137, 191, 189, 200, 138, 208, 61, 78, 31, 0, 59, 236, 17, 205, 60, 121, 249, 33, 62, 78, 206, 191, 189, 234, 210, 24, 61, 90, 102, 25, 190, 61, 245, 193, 189, 98, 242, 5, 190, 208, 167, 11, 190, 129, 36, 64, 189, 134, 66, 235, 188, 32, 154, 163, 61, 146, 183, 11, 190, 121, 41, 134, 61, 51, 29, 156, 189, 139, 192, 14, 62, 37, 67, 51, 190, 44, 33, 192, 189, 85, 186, 101, 189, 119, 32, 137, 189, 72, 110, 175, 61, 252, 113, 192, 189, 152, 46, 69, 190, 215, 122, 84, 60, 41, 67, 218, 61, 16, 49, 100, 188, 208, 151, 52, 62, 115, 157, 175, 61, 83, 160, 228, 189, 107, 149, 21, 60, 79, 79, 245, 189, 11, 162, 33, 190, 70, 171, 27, 62, 209, 200, 112, 60, 122, 12, 152, 189, 116, 22, 122, 190, 51, 15, 136, 190, 76, 206, 245, 188, 134, 13, 88, 190, 112, 214, 31, 189, 71, 162, 79, 190, 74, 52, 125, 62, 48, 123, 8, 190, 141, 248, 147, 61, 94, 80, 3, 190, 25, 190, 154, 62, 71, 67, 242, 189, 173, 112, 226, 61, 43, 75, 236, 62, 199, 210, 169, 189, 9, 100, 176, 61, 118, 57, 192, 186, 229, 252, 5, 62, 251, 221, 175, 189, 130, 196, 1, 190, 16, 98, 41, 189, 137, 23, 213, 62, 226, 168, 134, 190, 48, 244, 214, 189, 16, 200, 9, 62, 225, 250, 237, 61, 205, 98, 16, 189, 184, 159, 208, 189, 167, 173, 170, 189, 119, 232, 75, 190, 9, 147, 58, 62, 176, 239, 149, 190, 179, 100, 41, 190, 61, 160, 7, 62, 49, 134, 253, 61, 232, 100, 192, 189, 39, 133, 46, 61, 103, 231, 179, 189, 183, 26, 150, 61, 24, 93, 172, 60, 96, 220, 21, 62, 173, 43, 178, 189, 1, 7, 244, 61, 191, 11, 38, 62, 87, 33, 96, 189, 88, 133, 140, 62, 22, 235, 32, 61, 141, 106, 202, 61, 52, 224, 149, 189, 200, 214, 177, 188, 220, 167, 129, 190, 226, 226, 2, 190, 234, 231, 210, 61, 93, 134, 96, 62, 234, 121, 133, 190, 248, 211, 231, 61, 29, 93, 33, 62, 236, 9, 193, 61, 211, 164, 38, 190, 202, 40, 128, 60, 217, 27, 12, 62, 123, 189, 160, 189, 169, 227, 173, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 113, 145, 61, 55, 100, 13, 62, 4, 174, 255, 189, 117, 197, 58, 62, 245, 196, 199, 61, 50, 81, 229, 189, 206, 85, 6, 62, 124, 136, 98, 190, 210, 8, 78, 61, 235, 112, 140, 61, 58, 11, 227, 61, 75, 254, 123, 61, 110, 9, 107, 62, 161, 215, 124, 62, 19, 55, 88, 61, 90, 249, 70, 61, 191, 39, 170, 188, 181, 241, 40, 61, 72, 77, 190, 189, 195, 106, 158, 61, 117, 46, 167, 189, 55, 58, 9, 190, 245, 165, 218, 61, 222, 104, 243, 189, 110, 162, 0, 190, 107, 197, 52, 190, 30, 84, 43, 62, 204, 65, 44, 62, 242, 70, 137, 189, 174, 184, 82, 61, 191, 119, 63, 62, 153, 254, 213, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 130, 184, 61, 31, 15, 185, 189, 213, 205, 28, 190, 147, 24, 63, 62, 238, 249, 50, 190, 94, 166, 2, 62, 18, 118, 216, 61, 235, 24, 196, 189, 117, 248, 54, 62, 128, 191, 127, 189, 148, 241, 156, 62, 21, 60, 176, 61, 122, 181, 140, 62, 30, 130, 195, 190, 61, 7, 174, 188, 166, 254, 114, 62, 239, 108, 249, 60, 150, 216, 57, 190, 221, 105, 35, 189, 88, 109, 27, 62, 131, 11, 78, 62, 252, 6, 25, 62, 243, 242, 76, 62, 121, 58, 163, 61, 153, 153, 36, 190, 59, 45, 201, 189, 185, 59, 134, 62, 76, 9, 226, 60, 34, 125, 54, 62, 98, 246, 18, 190, 79, 130, 174, 190, 11, 22, 58, 190, 13, 68, 129, 61, 228, 253, 72, 190, 68, 95, 233, 189, 153, 44, 136, 188, 66, 49, 35, 190, 36, 170, 101, 190, 58, 194, 104, 61, 95, 147, 17, 62, 216, 218, 115, 190, 114, 125, 111, 190, 172, 127, 103, 189, 11, 5, 176, 189, 238, 69, 210, 188, 214, 106, 96, 61, 164, 232, 206, 61, 221, 193, 67, 190, 171, 79, 165, 61, 192, 5, 251, 61, 32, 42, 177, 189, 103, 170, 103, 189, 124, 255, 170, 61, 49, 43, 232, 60, 173, 85, 169, 61, 36, 92, 7, 189, 128, 128, 15, 62, 54, 30, 3, 62, 128, 223, 27, 189, 74, 153, 107, 189, 13, 25, 74, 61, 138, 236, 220, 61, 81, 201, 253, 189, 83, 181, 140, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 232, 82, 189, 111, 83, 52, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {44, 127, 175, 191, 79, 225, 64, 63, 235, 114, 128, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {62, 245, 202, 191, 222, 122, 26, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0089/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}