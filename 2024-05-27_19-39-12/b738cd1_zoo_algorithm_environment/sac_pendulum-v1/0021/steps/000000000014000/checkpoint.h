// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 111, 235, 62, 47, 127, 15, 62, 207, 184, 39, 191, 160, 18, 181, 61, 243, 105, 62, 63, 15, 65, 37, 63, 203, 132, 66, 62, 57, 42, 192, 189, 226, 54, 171, 61, 124, 101, 46, 190, 19, 12, 30, 191, 119, 27, 176, 62, 16, 121, 46, 191, 84, 113, 41, 191, 161, 148, 29, 59, 248, 174, 226, 189, 172, 181, 40, 63, 96, 231, 254, 190, 219, 217, 4, 62, 1, 58, 95, 191, 76, 23, 231, 61, 8, 112, 187, 190, 95, 139, 80, 191, 84, 113, 191, 62, 71, 151, 89, 191, 167, 5, 91, 191, 116, 245, 56, 188, 52, 171, 173, 60, 87, 83, 13, 62, 178, 252, 44, 191, 36, 81, 56, 62, 115, 113, 72, 63, 165, 23, 15, 190, 32, 114, 5, 61, 75, 186, 78, 63, 101, 47, 128, 190, 122, 59, 91, 61, 106, 65, 25, 63, 0, 109, 172, 189, 132, 217, 136, 191, 26, 130, 39, 63, 179, 7, 58, 189, 247, 233, 63, 63, 172, 233, 133, 191, 180, 157, 86, 190, 244, 173, 159, 190, 115, 108, 161, 191, 233, 89, 156, 190, 82, 39, 236, 62, 221, 250, 178, 63, 123, 246, 160, 62, 248, 43, 169, 62, 228, 164, 120, 191, 50, 45, 73, 62, 236, 140, 12, 191, 5, 144, 139, 62, 136, 214, 22, 191, 211, 110, 3, 191, 174, 255, 243, 63, 187, 252, 187, 62, 103, 88, 22, 63, 107, 95, 144, 191, 175, 240, 213, 190, 114, 145, 16, 63, 6, 187, 173, 61, 47, 209, 12, 63, 96, 142, 243, 61, 181, 190, 56, 63, 143, 20, 233, 62, 150, 53, 71, 190, 38, 55, 220, 190, 93, 254, 34, 63, 71, 183, 107, 190, 61, 228, 242, 62, 28, 12, 248, 190, 135, 225, 176, 190, 188, 22, 192, 62, 153, 32, 60, 63, 117, 82, 42, 62, 82, 17, 143, 63, 45, 247, 155, 62, 18, 216, 111, 63, 99, 184, 56, 191, 77, 175, 58, 62, 151, 184, 7, 63, 177, 108, 16, 63, 104, 154, 124, 62, 102, 33, 64, 62, 158, 60, 150, 63, 93, 166, 179, 62, 156, 92, 115, 62, 16, 153, 150, 191, 28, 9, 206, 190, 6, 101, 42, 61, 236, 211, 19, 191, 213, 208, 153, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 105, 139, 190, 17, 89, 240, 62, 202, 185, 172, 62, 32, 220, 40, 62, 140, 82, 213, 62, 186, 152, 14, 191, 15, 34, 136, 190, 54, 109, 112, 190, 48, 193, 27, 63, 221, 92, 1, 63, 20, 89, 250, 189, 110, 173, 225, 189, 51, 28, 13, 63, 34, 147, 66, 189, 204, 217, 46, 61, 207, 185, 203, 62, 181, 25, 214, 62, 129, 93, 33, 62, 200, 171, 19, 191, 12, 104, 70, 190, 136, 6, 238, 190, 181, 208, 26, 191, 99, 165, 246, 62, 207, 111, 25, 190, 44, 158, 209, 190, 145, 68, 7, 62, 95, 67, 168, 61, 144, 213, 138, 62, 192, 50, 221, 190, 189, 115, 43, 62, 65, 81, 250, 190, 127, 200, 45, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {174, 220, 82, 62, 26, 134, 236, 60, 236, 11, 14, 188, 10, 101, 229, 62, 154, 234, 193, 57, 140, 130, 32, 62, 115, 167, 55, 189, 242, 146, 91, 63, 31, 76, 151, 190, 144, 187, 6, 62, 175, 73, 132, 62, 8, 39, 187, 62, 201, 25, 32, 190, 236, 188, 211, 188, 164, 5, 124, 189, 3, 229, 199, 189, 67, 115, 138, 190, 150, 125, 63, 190, 114, 236, 77, 60, 38, 16, 30, 62, 13, 187, 101, 61, 254, 159, 25, 187, 253, 103, 199, 190, 90, 208, 125, 62, 44, 176, 167, 188, 141, 134, 249, 190, 45, 174, 180, 190, 30, 115, 185, 190, 25, 92, 183, 190, 208, 170, 196, 190, 221, 43, 174, 189, 142, 153, 237, 187, 52, 248, 63, 62, 0, 153, 168, 61, 15, 23, 179, 61, 64, 25, 79, 190, 32, 46, 111, 60, 1, 208, 239, 190, 10, 83, 135, 189, 172, 189, 177, 190, 129, 251, 192, 61, 145, 37, 246, 189, 174, 117, 9, 191, 214, 171, 101, 62, 64, 247, 63, 62, 48, 204, 131, 62, 7, 219, 106, 62, 159, 10, 186, 61, 127, 135, 183, 190, 1, 122, 34, 190, 40, 1, 69, 190, 148, 223, 41, 63, 253, 71, 19, 63, 173, 78, 146, 190, 190, 185, 244, 61, 113, 118, 120, 62, 81, 49, 129, 62, 78, 67, 200, 62, 112, 236, 249, 190, 86, 156, 168, 62, 68, 82, 110, 191, 214, 10, 213, 190, 19, 240, 61, 191, 110, 66, 166, 189, 195, 229, 186, 190, 236, 197, 236, 190, 167, 205, 28, 61, 74, 61, 186, 188, 221, 189, 165, 187, 118, 225, 18, 190, 237, 200, 167, 61, 62, 42, 59, 61, 240, 87, 163, 62, 253, 22, 142, 61, 113, 233, 157, 190, 155, 40, 41, 190, 230, 20, 119, 190, 210, 10, 186, 190, 187, 21, 163, 190, 152, 253, 33, 62, 221, 202, 109, 190, 23, 87, 238, 61, 107, 214, 17, 190, 29, 97, 57, 191, 126, 22, 12, 190, 144, 17, 33, 190, 224, 15, 184, 190, 230, 118, 142, 190, 133, 92, 150, 190, 71, 241, 121, 190, 186, 212, 21, 190, 76, 209, 18, 191, 240, 13, 227, 188, 66, 104, 180, 189, 144, 154, 138, 190, 116, 51, 63, 61, 23, 146, 101, 190, 60, 207, 232, 191, 247, 45, 136, 190, 21, 86, 166, 62, 73, 37, 191, 62, 83, 46, 39, 61, 221, 254, 199, 61, 58, 50, 41, 63, 234, 128, 172, 62, 131, 22, 106, 62, 25, 198, 155, 62, 69, 58, 191, 190, 242, 241, 35, 61, 129, 133, 80, 62, 130, 37, 192, 190, 55, 45, 160, 62, 123, 133, 130, 61, 111, 168, 244, 189, 40, 13, 170, 62, 236, 68, 123, 191, 140, 132, 47, 189, 132, 80, 207, 60, 95, 54, 160, 191, 184, 50, 64, 191, 216, 95, 139, 190, 18, 187, 69, 191, 163, 198, 219, 189, 137, 41, 133, 62, 124, 219, 1, 190, 21, 223, 151, 62, 129, 68, 169, 188, 157, 75, 142, 61, 122, 140, 179, 190, 0, 193, 223, 190, 244, 154, 57, 62, 2, 108, 39, 62, 225, 83, 216, 62, 31, 33, 142, 62, 57, 1, 48, 62, 174, 178, 96, 62, 34, 226, 162, 62, 152, 229, 143, 62, 100, 224, 97, 62, 214, 121, 55, 190, 71, 17, 113, 62, 14, 183, 120, 60, 244, 34, 47, 191, 147, 188, 132, 60, 20, 195, 135, 62, 15, 22, 7, 190, 175, 118, 68, 61, 71, 223, 131, 191, 6, 15, 23, 191, 229, 47, 159, 62, 77, 132, 233, 189, 224, 190, 199, 190, 45, 51, 133, 190, 8, 15, 2, 191, 175, 70, 208, 62, 97, 161, 153, 189, 200, 233, 102, 189, 47, 222, 74, 62, 91, 167, 194, 189, 64, 17, 58, 62, 37, 207, 131, 190, 24, 7, 143, 190, 80, 74, 199, 60, 255, 150, 8, 62, 46, 163, 47, 190, 75, 243, 67, 62, 174, 248, 132, 190, 244, 176, 130, 189, 1, 235, 222, 190, 198, 147, 25, 62, 69, 255, 250, 61, 173, 49, 126, 62, 120, 167, 156, 62, 181, 6, 133, 62, 141, 33, 4, 191, 11, 223, 81, 190, 235, 159, 25, 62, 167, 233, 197, 187, 234, 118, 27, 190, 251, 140, 149, 187, 125, 113, 81, 191, 20, 26, 41, 190, 151, 113, 136, 190, 26, 213, 40, 190, 181, 205, 250, 61, 7, 96, 199, 189, 55, 229, 77, 62, 106, 99, 229, 61, 109, 236, 18, 190, 194, 224, 54, 62, 128, 57, 177, 190, 182, 0, 122, 190, 233, 59, 170, 189, 75, 15, 145, 58, 232, 75, 2, 62, 96, 179, 17, 62, 201, 4, 157, 189, 51, 194, 162, 62, 103, 88, 92, 189, 207, 32, 38, 189, 64, 237, 146, 188, 142, 16, 223, 188, 4, 99, 173, 62, 245, 132, 150, 190, 123, 233, 121, 62, 246, 78, 207, 62, 38, 29, 169, 190, 104, 169, 157, 190, 26, 75, 199, 61, 173, 9, 7, 188, 76, 134, 119, 62, 195, 162, 28, 191, 201, 136, 15, 191, 235, 191, 171, 189, 174, 194, 137, 189, 19, 147, 41, 190, 46, 3, 156, 189, 17, 53, 31, 62, 159, 212, 90, 61, 49, 158, 31, 62, 81, 168, 17, 191, 167, 164, 151, 62, 209, 169, 166, 190, 135, 15, 231, 61, 109, 100, 38, 61, 71, 236, 175, 189, 11, 120, 76, 61, 27, 170, 34, 191, 125, 226, 234, 190, 224, 153, 94, 190, 122, 222, 135, 62, 129, 83, 58, 191, 225, 250, 100, 190, 173, 66, 134, 61, 37, 82, 148, 59, 198, 211, 20, 62, 64, 245, 67, 62, 84, 56, 193, 190, 118, 58, 169, 62, 255, 172, 224, 188, 119, 53, 168, 61, 230, 174, 135, 61, 99, 96, 166, 61, 236, 73, 194, 62, 137, 112, 194, 62, 232, 61, 78, 190, 111, 209, 53, 190, 210, 200, 181, 190, 157, 80, 54, 62, 73, 14, 43, 190, 87, 5, 202, 62, 94, 110, 173, 61, 229, 170, 54, 63, 9, 153, 69, 62, 247, 58, 185, 188, 100, 5, 219, 60, 193, 238, 233, 60, 158, 59, 119, 62, 76, 176, 244, 187, 89, 175, 179, 190, 201, 214, 81, 62, 6, 95, 96, 190, 239, 20, 102, 61, 213, 235, 89, 190, 3, 175, 177, 61, 195, 78, 215, 190, 198, 34, 16, 62, 72, 17, 49, 63, 188, 178, 106, 59, 249, 174, 5, 63, 99, 115, 122, 62, 132, 3, 129, 189, 29, 88, 48, 58, 211, 82, 146, 189, 14, 23, 220, 190, 173, 243, 197, 62, 70, 29, 207, 61, 141, 237, 240, 188, 25, 34, 223, 61, 24, 124, 72, 62, 110, 152, 42, 63, 176, 193, 155, 62, 91, 231, 64, 190, 24, 103, 143, 190, 80, 209, 125, 188, 171, 27, 117, 190, 102, 71, 219, 189, 91, 139, 162, 191, 186, 221, 99, 62, 178, 7, 157, 60, 38, 179, 99, 61, 39, 192, 213, 189, 11, 73, 93, 62, 52, 124, 27, 62, 51, 220, 239, 190, 103, 131, 78, 186, 229, 131, 12, 61, 227, 158, 236, 189, 102, 10, 196, 62, 92, 53, 227, 189, 89, 137, 149, 61, 203, 144, 118, 62, 97, 122, 178, 62, 214, 24, 127, 190, 78, 101, 86, 62, 118, 82, 8, 190, 37, 121, 35, 61, 225, 129, 158, 62, 77, 216, 128, 62, 107, 18, 109, 190, 119, 137, 47, 62, 138, 241, 242, 189, 63, 202, 141, 188, 30, 199, 52, 62, 178, 152, 26, 190, 86, 11, 234, 62, 69, 130, 233, 190, 30, 21, 45, 59, 247, 229, 244, 190, 26, 56, 112, 59, 93, 49, 225, 189, 20, 253, 121, 62, 45, 170, 122, 62, 89, 141, 186, 190, 236, 81, 138, 62, 79, 173, 36, 191, 89, 72, 128, 62, 207, 217, 230, 189, 43, 178, 103, 62, 51, 13, 146, 189, 252, 80, 32, 190, 112, 65, 3, 62, 46, 51, 25, 190, 198, 255, 68, 189, 243, 140, 155, 62, 56, 168, 159, 188, 208, 136, 161, 189, 49, 222, 134, 62, 155, 247, 165, 190, 212, 237, 36, 62, 23, 226, 6, 60, 129, 155, 184, 189, 128, 2, 3, 62, 99, 153, 45, 62, 30, 171, 182, 61, 10, 150, 87, 62, 116, 217, 154, 189, 202, 16, 233, 188, 196, 147, 229, 189, 167, 233, 156, 61, 123, 146, 156, 62, 25, 58, 88, 61, 47, 34, 227, 61, 241, 115, 171, 61, 28, 175, 18, 62, 171, 209, 150, 190, 38, 166, 70, 191, 8, 35, 2, 62, 161, 165, 220, 190, 213, 222, 249, 190, 13, 240, 144, 190, 52, 182, 199, 188, 2, 3, 3, 63, 45, 200, 11, 188, 246, 208, 22, 62, 215, 148, 52, 190, 83, 154, 192, 189, 56, 125, 110, 189, 175, 79, 231, 187, 229, 83, 27, 191, 131, 173, 11, 62, 50, 213, 77, 62, 75, 210, 131, 61, 34, 246, 222, 188, 225, 214, 79, 190, 67, 125, 247, 190, 254, 218, 0, 190, 32, 61, 255, 189, 54, 215, 176, 62, 135, 138, 176, 190, 160, 11, 25, 63, 176, 99, 228, 61, 18, 171, 104, 62, 252, 228, 199, 187, 125, 150, 251, 189, 37, 0, 20, 190, 56, 171, 87, 190, 151, 53, 179, 190, 61, 240, 68, 62, 145, 234, 144, 190, 152, 4, 75, 189, 29, 198, 146, 190, 187, 105, 133, 62, 73, 201, 31, 190, 66, 133, 58, 190, 227, 227, 220, 62, 152, 209, 119, 62, 124, 99, 192, 62, 137, 75, 150, 190, 65, 213, 132, 61, 2, 93, 54, 191, 205, 126, 142, 189, 130, 174, 63, 190, 160, 190, 22, 62, 208, 247, 28, 191, 36, 251, 138, 190, 174, 200, 38, 61, 209, 159, 2, 62, 31, 29, 144, 62, 219, 187, 153, 189, 6, 197, 111, 191, 230, 46, 78, 61, 16, 121, 56, 190, 21, 191, 83, 191, 208, 197, 4, 61, 94, 222, 28, 190, 221, 169, 61, 62, 37, 139, 158, 189, 42, 157, 161, 189, 24, 200, 8, 191, 86, 166, 11, 191, 200, 156, 116, 190, 70, 130, 188, 190, 143, 108, 119, 190, 38, 79, 197, 190, 234, 11, 151, 61, 184, 175, 51, 62, 36, 14, 15, 61, 172, 101, 145, 61, 199, 131, 83, 60, 100, 149, 40, 189, 91, 143, 143, 190, 108, 254, 89, 62, 191, 156, 61, 191, 36, 139, 132, 190, 125, 146, 11, 62, 137, 29, 112, 188, 243, 101, 79, 191, 86, 207, 29, 62, 39, 95, 225, 190, 53, 119, 47, 189, 240, 252, 52, 190, 109, 67, 199, 61, 32, 164, 6, 62, 6, 139, 30, 191, 8, 154, 120, 62, 18, 154, 85, 61, 105, 91, 234, 188, 150, 240, 37, 190, 37, 209, 223, 188, 229, 145, 11, 189, 14, 49, 234, 189, 44, 193, 163, 61, 52, 206, 128, 62, 13, 130, 146, 189, 39, 154, 102, 61, 42, 123, 92, 62, 68, 106, 45, 62, 142, 44, 49, 62, 71, 166, 102, 190, 95, 158, 75, 62, 91, 156, 145, 188, 9, 223, 163, 190, 131, 52, 242, 189, 209, 250, 91, 62, 210, 101, 238, 187, 152, 235, 67, 62, 143, 200, 173, 190, 102, 121, 179, 190, 178, 150, 60, 62, 37, 111, 200, 61, 5, 88, 44, 61, 69, 124, 15, 190, 186, 79, 181, 188, 174, 58, 48, 190, 4, 168, 43, 62, 154, 135, 172, 190, 110, 87, 91, 62, 232, 96, 9, 190, 238, 245, 44, 61, 15, 171, 242, 60, 164, 16, 138, 186, 148, 114, 139, 189, 138, 145, 89, 190, 163, 45, 3, 191, 184, 219, 178, 61, 111, 91, 121, 191, 214, 157, 7, 61, 72, 116, 203, 191, 16, 163, 97, 62, 47, 54, 146, 62, 126, 159, 160, 61, 74, 213, 88, 62, 149, 252, 62, 62, 243, 155, 3, 191, 191, 109, 43, 191, 123, 47, 91, 62, 199, 25, 202, 190, 65, 232, 2, 190, 215, 36, 50, 61, 137, 66, 28, 191, 35, 37, 77, 62, 100, 239, 97, 61, 237, 220, 169, 189, 36, 43, 128, 61, 183, 182, 144, 61, 13, 139, 130, 189, 219, 148, 231, 188, 99, 105, 34, 190, 114, 236, 126, 61, 176, 185, 56, 191, 72, 193, 11, 190, 126, 236, 157, 190, 38, 47, 199, 61, 247, 0, 29, 62, 119, 205, 209, 61, 12, 216, 145, 62, 252, 42, 132, 60, 86, 194, 25, 61, 163, 79, 153, 61, 2, 136, 20, 189, 236, 178, 77, 190, 76, 169, 80, 190, 136, 88, 188, 62, 41, 101, 8, 190, 222, 50, 151, 59, 90, 207, 117, 61, 11, 188, 10, 190, 243, 135, 91, 62, 0, 233, 55, 62, 154, 204, 138, 190, 114, 129, 71, 190, 69, 124, 74, 191, 87, 214, 36, 62, 194, 126, 55, 62, 29, 69, 144, 62, 22, 209, 31, 190, 129, 214, 192, 61, 180, 99, 78, 61, 51, 169, 204, 188, 236, 241, 212, 188, 78, 219, 15, 189, 58, 51, 92, 191, 150, 133, 95, 190, 225, 16, 63, 62, 214, 249, 141, 61, 244, 209, 112, 62, 109, 235, 125, 62, 152, 69, 145, 190, 97, 56, 145, 62, 127, 24, 155, 62, 82, 38, 230, 188, 122, 191, 146, 190, 160, 34, 6, 61, 144, 17, 115, 62, 152, 144, 142, 62, 178, 110, 168, 62, 75, 166, 235, 61, 160, 127, 229, 62, 243, 213, 170, 61, 96, 138, 146, 190, 157, 119, 105, 62, 228, 129, 27, 187, 225, 164, 38, 63, 180, 12, 167, 59, 177, 198, 240, 189, 78, 191, 165, 190, 30, 7, 42, 190, 213, 98, 159, 61, 214, 3, 18, 191, 147, 201, 17, 191, 253, 120, 155, 190, 236, 64, 0, 191, 223, 217, 145, 190, 135, 191, 3, 61, 171, 77, 195, 62, 151, 223, 149, 61, 209, 199, 142, 189, 116, 135, 112, 189, 10, 166, 40, 62, 43, 142, 152, 61, 61, 241, 159, 60, 4, 30, 60, 61, 78, 188, 182, 61, 177, 204, 21, 190, 114, 0, 129, 189, 175, 136, 244, 189, 183, 221, 21, 188, 94, 77, 119, 61, 202, 10, 77, 61, 196, 135, 232, 189, 147, 242, 17, 190, 138, 182, 0, 190, 40, 92, 198, 189, 114, 61, 184, 189, 15, 106, 50, 62, 24, 41, 29, 190, 211, 72, 21, 61, 4, 38, 29, 190, 209, 108, 245, 189, 66, 152, 209, 61, 34, 59, 53, 60, 242, 96, 113, 189, 234, 169, 14, 190, 122, 48, 3, 61, 250, 26, 32, 190, 31, 58, 14, 62, 128, 160, 3, 190, 152, 236, 97, 61, 251, 1, 14, 62, 151, 170, 96, 61, 226, 26, 156, 190, 195, 3, 49, 62, 37, 48, 47, 191, 211, 186, 178, 62, 36, 112, 133, 190, 250, 175, 74, 62, 140, 224, 255, 59, 47, 190, 4, 190, 233, 66, 175, 62, 54, 213, 180, 61, 98, 200, 134, 61, 207, 32, 55, 62, 65, 63, 171, 61, 245, 22, 32, 190, 138, 161, 130, 62, 92, 136, 127, 190, 215, 157, 77, 62, 235, 25, 39, 189, 231, 3, 64, 190, 51, 52, 126, 188, 1, 202, 130, 62, 19, 113, 141, 61, 84, 196, 167, 61, 74, 210, 32, 191, 88, 227, 14, 189, 210, 75, 75, 191, 192, 210, 151, 190, 157, 223, 213, 60, 77, 8, 53, 190, 156, 91, 49, 190, 19, 100, 153, 61, 102, 145, 200, 61, 111, 50, 226, 61, 67, 31, 60, 190, 85, 186, 23, 62, 116, 217, 43, 190, 186, 9, 237, 189, 236, 17, 163, 191, 42, 248, 11, 62, 239, 18, 147, 62, 148, 197, 142, 61, 41, 163, 133, 62, 140, 121, 239, 62, 239, 134, 128, 190, 24, 197, 38, 191, 138, 118, 139, 62, 21, 36, 132, 189, 103, 178, 196, 61, 21, 77, 188, 189, 203, 6, 193, 190, 241, 193, 96, 189, 90, 201, 126, 61, 183, 228, 137, 190, 109, 212, 163, 189, 71, 31, 20, 190, 167, 209, 51, 189, 125, 141, 169, 62, 149, 20, 111, 190, 252, 103, 163, 186, 146, 250, 25, 191, 119, 12, 215, 186, 167, 219, 241, 190, 242, 65, 160, 189, 149, 238, 119, 62, 13, 156, 235, 61, 71, 217, 215, 189, 170, 212, 39, 63, 113, 164, 178, 61, 16, 171, 124, 62, 234, 243, 53, 190, 11, 71, 218, 62, 109, 70, 188, 62, 240, 247, 236, 190, 253, 233, 253, 61, 18, 123, 15, 62, 181, 146, 76, 191, 3, 192, 238, 188, 50, 100, 49, 62, 128, 147, 20, 190, 130, 165, 199, 62, 78, 58, 202, 190, 212, 214, 141, 191, 81, 231, 128, 62, 196, 145, 15, 190, 60, 14, 70, 190, 10, 164, 183, 190, 229, 81, 24, 190, 5, 186, 162, 62, 51, 36, 7, 63, 211, 177, 225, 60, 220, 76, 151, 62, 43, 184, 189, 190, 42, 0, 78, 61, 139, 82, 2, 190, 52, 136, 54, 62, 28, 55, 163, 62, 117, 253, 99, 61, 175, 56, 107, 62, 203, 221, 56, 62, 92, 2, 113, 58, 72, 173, 15, 190, 126, 226, 5, 190, 56, 4, 208, 61, 90, 8, 176, 62, 192, 70, 61, 190, 144, 6, 194, 62, 33, 198, 80, 61, 204, 130, 238, 189, 24, 86, 225, 189, 194, 226, 135, 61, 36, 84, 231, 61, 21, 4, 138, 61, 1, 127, 181, 190, 186, 117, 46, 190, 7, 138, 60, 60, 121, 119, 35, 62, 18, 48, 90, 190, 70, 125, 74, 190, 93, 209, 239, 189, 12, 212, 49, 190, 157, 176, 173, 62, 212, 237, 11, 191, 126, 67, 28, 62, 36, 125, 96, 61, 88, 185, 81, 61, 213, 193, 210, 61, 156, 182, 134, 190, 74, 99, 209, 62, 200, 157, 211, 62, 143, 55, 116, 190, 203, 79, 137, 188, 178, 121, 153, 62, 232, 28, 133, 62, 56, 18, 37, 190, 165, 107, 6, 62, 187, 5, 187, 189, 61, 149, 217, 62, 157, 107, 91, 61, 17, 40, 193, 190, 14, 180, 161, 62, 99, 159, 237, 189, 246, 72, 52, 190, 164, 143, 242, 62, 18, 79, 12, 62, 86, 121, 154, 190, 175, 204, 206, 59, 165, 65, 78, 190, 241, 66, 70, 190, 62, 204, 212, 61, 5, 91, 202, 60, 149, 29, 156, 190, 139, 14, 92, 191, 215, 224, 236, 62, 203, 212, 60, 191, 11, 232, 225, 190, 175, 245, 206, 61, 132, 185, 140, 62, 156, 35, 25, 190, 6, 21, 152, 189, 46, 12, 205, 188, 190, 142, 58, 61, 254, 67, 91, 61, 13, 92, 178, 189, 122, 62, 146, 187, 243, 136, 103, 189, 134, 165, 88, 189, 3, 126, 1, 190, 45, 171, 33, 190, 156, 158, 129, 189, 189, 186, 232, 61, 42, 158, 16, 60, 110, 51, 16, 190, 130, 99, 195, 189, 169, 39, 207, 189, 241, 120, 16, 190, 105, 152, 52, 61, 186, 143, 133, 188, 116, 197, 126, 188, 192, 128, 149, 189, 143, 153, 147, 189, 57, 97, 45, 188, 230, 161, 153, 188, 224, 15, 48, 62, 65, 89, 4, 62, 185, 10, 146, 60, 32, 39, 41, 62, 251, 249, 9, 190, 202, 108, 226, 189, 16, 27, 226, 61, 224, 31, 240, 62, 0, 143, 45, 190, 7, 243, 22, 190, 66, 3, 174, 62, 154, 100, 99, 190, 140, 63, 12, 190, 92, 96, 147, 62, 152, 6, 190, 62, 74, 136, 176, 189, 14, 20, 43, 190, 124, 173, 227, 189, 218, 7, 65, 61, 213, 121, 133, 190, 102, 237, 134, 191, 255, 8, 50, 62, 119, 168, 232, 189, 118, 108, 158, 191, 109, 121, 208, 61, 123, 219, 242, 189, 80, 90, 64, 189, 226, 112, 243, 62, 173, 142, 33, 191, 56, 25, 159, 190, 176, 246, 116, 62, 188, 162, 65, 62, 49, 249, 35, 190, 70, 5, 174, 190, 11, 81, 95, 62, 26, 136, 149, 188, 82, 5, 61, 191, 187, 14, 0, 61, 117, 243, 149, 61, 153, 70, 233, 60, 197, 214, 61, 62, 225, 121, 60, 62, 144, 114, 179, 190, 130, 163, 135, 60, 191, 126, 114, 191, 4, 94, 20, 62, 128, 222, 200, 189, 29, 26, 9, 62, 67, 224, 191, 61, 27, 34, 17, 188, 39, 58, 134, 62, 51, 255, 172, 61, 154, 214, 58, 61, 165, 211, 9, 62, 113, 36, 197, 61, 49, 111, 131, 190, 107, 232, 145, 62, 115, 32, 217, 190, 208, 108, 67, 62, 161, 47, 154, 61, 32, 110, 190, 190, 134, 197, 74, 62, 253, 130, 44, 62, 121, 96, 87, 189, 181, 100, 0, 62, 138, 246, 56, 191, 144, 150, 34, 62, 203, 247, 84, 191, 166, 72, 246, 190, 0, 81, 0, 62, 193, 50, 145, 189, 238, 235, 64, 62, 150, 198, 42, 62, 235, 161, 39, 189, 48, 115, 49, 62, 26, 83, 165, 189, 128, 248, 164, 59, 202, 115, 41, 62, 160, 113, 253, 188, 236, 131, 135, 189, 148, 243, 103, 190, 67, 180, 215, 190, 230, 98, 98, 62, 197, 149, 176, 190, 21, 93, 197, 189, 187, 186, 183, 62, 254, 184, 53, 190, 88, 237, 199, 60, 180, 206, 99, 188, 181, 110, 25, 188, 55, 192, 10, 187, 81, 160, 113, 62, 185, 36, 139, 188, 198, 207, 104, 189, 206, 210, 25, 62, 175, 20, 23, 62, 157, 54, 142, 62, 159, 33, 171, 61, 88, 141, 67, 62, 213, 249, 61, 62, 12, 23, 32, 189, 149, 48, 122, 62, 234, 75, 40, 190, 136, 254, 176, 61, 96, 38, 150, 190, 99, 121, 9, 190, 103, 191, 11, 190, 225, 132, 19, 190, 238, 66, 15, 190, 46, 59, 184, 189, 141, 107, 46, 190, 74, 110, 175, 61, 226, 69, 35, 190, 226, 9, 133, 190, 10, 124, 163, 189, 9, 102, 215, 189, 156, 105, 3, 188, 38, 166, 232, 189, 165, 134, 197, 61, 162, 11, 166, 189, 36, 138, 67, 190, 229, 108, 144, 188, 183, 179, 100, 61, 48, 74, 15, 190, 129, 73, 98, 189, 227, 13, 152, 61, 106, 176, 67, 190, 100, 49, 233, 189, 168, 128, 44, 60, 238, 35, 110, 61, 239, 235, 42, 190, 122, 157, 128, 189, 19, 31, 163, 190, 246, 153, 129, 61, 32, 6, 65, 190, 141, 84, 35, 190, 42, 188, 1, 191, 229, 72, 22, 190, 162, 100, 111, 62, 232, 105, 8, 61, 107, 81, 185, 62, 214, 66, 4, 190, 61, 255, 130, 62, 58, 237, 124, 62, 173, 37, 9, 62, 244, 115, 51, 62, 217, 81, 255, 190, 218, 213, 92, 61, 127, 81, 225, 189, 123, 35, 171, 190, 132, 161, 232, 61, 23, 66, 208, 62, 168, 241, 224, 190, 229, 150, 154, 62, 82, 176, 120, 191, 216, 208, 245, 189, 96, 73, 236, 62, 77, 190, 50, 190, 210, 59, 177, 190, 237, 99, 19, 190, 120, 244, 206, 190, 203, 91, 17, 63, 255, 24, 138, 59, 198, 213, 14, 62, 108, 97, 196, 62, 204, 230, 64, 61, 47, 75, 144, 61, 142, 81, 10, 62, 221, 116, 152, 61, 97, 188, 242, 189, 82, 221, 11, 191, 180, 32, 102, 61, 254, 243, 248, 190, 20, 177, 157, 189, 96, 178, 164, 190, 201, 155, 178, 189, 12, 10, 99, 189, 237, 73, 188, 190, 222, 19, 218, 62, 31, 205, 219, 61, 180, 78, 153, 62, 95, 125, 42, 188, 43, 218, 187, 189, 38, 246, 188, 190, 161, 65, 154, 189, 157, 209, 37, 190, 87, 115, 110, 62, 192, 38, 9, 62, 74, 32, 28, 190, 9, 107, 156, 61, 150, 6, 11, 62, 123, 177, 40, 62, 124, 244, 255, 61, 98, 210, 17, 191, 242, 203, 218, 189, 111, 231, 15, 191, 186, 232, 194, 190, 123, 149, 210, 61, 174, 162, 227, 190, 213, 210, 178, 190, 108, 75, 67, 191, 31, 24, 137, 189, 206, 86, 237, 62, 130, 12, 149, 62, 73, 236, 251, 62, 203, 22, 196, 188, 49, 167, 160, 62, 216, 185, 101, 189, 44, 18, 51, 62, 69, 239, 141, 62, 21, 117, 146, 190, 58, 85, 209, 188, 28, 216, 183, 61, 34, 38, 57, 190, 251, 43, 47, 62, 66, 26, 69, 62, 90, 139, 147, 190, 248, 107, 147, 62, 127, 215, 147, 191, 129, 201, 146, 190, 133, 28, 16, 190, 166, 61, 198, 190, 30, 143, 211, 190, 209, 226, 207, 189, 24, 178, 172, 190, 151, 226, 245, 62, 29, 45, 188, 62, 213, 88, 137, 190, 141, 206, 246, 62, 5, 34, 56, 189, 42, 118, 81, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 120, 202, 188, 242, 155, 226, 61, 117, 115, 121, 61, 176, 36, 32, 188, 88, 120, 25, 62, 13, 198, 76, 61, 141, 214, 138, 62, 118, 175, 194, 189, 93, 216, 88, 62, 21, 83, 211, 61, 235, 71, 92, 62, 154, 143, 29, 190, 204, 105, 154, 62, 167, 121, 77, 190, 15, 252, 130, 61, 142, 146, 51, 62, 31, 140, 175, 61, 233, 79, 159, 187, 79, 150, 152, 189, 248, 241, 202, 62, 116, 234, 94, 61, 246, 159, 217, 60, 222, 161, 76, 62, 183, 11, 125, 62, 169, 48, 27, 190, 108, 138, 214, 189, 173, 17, 181, 61, 179, 1, 129, 190, 179, 194, 221, 61, 63, 20, 214, 61, 166, 36, 119, 189, 197, 238, 177, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 50, 51, 62, 77, 238, 109, 63, 107, 68, 78, 191, 211, 143, 32, 191, 224, 14, 119, 191, 169, 122, 197, 190, 21, 75, 232, 190, 246, 16, 122, 62, 122, 62, 12, 63, 58, 40, 47, 62, 247, 242, 30, 62, 237, 173, 58, 63, 138, 22, 118, 63, 181, 239, 184, 190, 60, 230, 66, 189, 155, 65, 36, 191, 32, 132, 152, 190, 163, 16, 204, 62, 253, 76, 51, 190, 129, 46, 242, 62, 210, 205, 1, 191, 78, 92, 46, 191, 206, 6, 13, 189, 14, 167, 114, 62, 134, 54, 6, 62, 138, 210, 83, 191, 221, 228, 35, 63, 201, 164, 61, 190, 46, 201, 211, 185, 79, 239, 188, 190, 128, 10, 38, 63, 14, 55, 153, 190, 27, 50, 26, 60, 148, 57, 45, 63, 237, 16, 6, 62, 147, 158, 201, 189, 162, 152, 26, 62, 225, 65, 21, 63, 17, 219, 11, 191, 154, 241, 90, 190, 235, 79, 26, 189, 169, 214, 112, 190, 179, 110, 54, 190, 174, 226, 148, 62, 202, 175, 114, 61, 1, 133, 184, 62, 185, 17, 75, 190, 228, 30, 91, 189, 40, 189, 23, 58, 211, 68, 253, 60, 117, 70, 145, 61, 103, 110, 198, 189, 127, 230, 176, 190, 43, 159, 102, 62, 171, 59, 209, 190, 3, 165, 83, 190, 73, 56, 150, 189, 49, 145, 161, 62, 13, 45, 219, 61, 239, 84, 75, 61, 18, 29, 39, 62, 1, 13, 91, 62, 146, 1, 214, 61, 191, 211, 158, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 39, 22, 60, 48, 6, 197, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {174, 149, 213, 62, 8, 100, 206, 62, 78, 101, 45, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {204, 0, 36, 192, 228, 156, 114, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0021/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}