// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 42, 242, 62, 23, 162, 17, 62, 51, 90, 37, 191, 135, 57, 226, 60, 0, 92, 51, 63, 34, 170, 34, 63, 6, 44, 243, 61, 156, 126, 4, 190, 48, 82, 190, 61, 115, 50, 38, 190, 7, 19, 23, 191, 110, 67, 188, 62, 113, 118, 39, 191, 233, 29, 50, 191, 246, 173, 253, 187, 237, 213, 152, 189, 108, 13, 35, 63, 188, 152, 0, 191, 65, 155, 235, 61, 119, 168, 94, 191, 186, 79, 199, 61, 147, 107, 172, 190, 16, 159, 72, 191, 86, 35, 190, 62, 136, 68, 81, 191, 156, 37, 104, 191, 76, 121, 202, 188, 116, 140, 218, 60, 55, 164, 221, 61, 60, 58, 45, 191, 117, 215, 29, 62, 243, 238, 74, 63, 85, 95, 34, 190, 127, 66, 187, 188, 104, 80, 85, 63, 167, 192, 112, 190, 121, 250, 55, 61, 242, 43, 25, 63, 223, 97, 154, 189, 74, 129, 143, 191, 154, 131, 26, 63, 7, 204, 235, 188, 49, 19, 61, 63, 239, 63, 142, 191, 84, 139, 81, 190, 35, 127, 142, 190, 5, 102, 170, 191, 249, 244, 154, 190, 96, 66, 229, 62, 172, 207, 182, 63, 4, 56, 149, 62, 142, 182, 165, 62, 242, 247, 132, 191, 54, 9, 89, 62, 223, 245, 4, 191, 98, 240, 139, 62, 116, 102, 20, 191, 221, 222, 18, 191, 210, 204, 252, 63, 5, 65, 189, 62, 153, 117, 25, 63, 126, 96, 151, 191, 125, 132, 207, 190, 152, 49, 18, 63, 33, 31, 208, 61, 203, 6, 17, 63, 80, 172, 167, 61, 12, 103, 47, 63, 204, 132, 216, 62, 4, 28, 152, 190, 190, 99, 0, 191, 3, 192, 26, 63, 239, 237, 129, 190, 187, 116, 255, 62, 250, 117, 243, 190, 2, 115, 225, 190, 7, 153, 173, 62, 76, 90, 52, 63, 198, 111, 24, 62, 115, 92, 147, 63, 113, 163, 157, 62, 26, 63, 105, 63, 148, 60, 55, 191, 133, 240, 99, 62, 18, 109, 3, 63, 154, 244, 33, 63, 229, 60, 126, 62, 99, 246, 37, 62, 80, 93, 153, 63, 207, 39, 181, 62, 19, 158, 93, 62, 132, 30, 152, 191, 169, 106, 209, 190, 73, 37, 203, 61, 199, 82, 5, 191, 60, 218, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 179, 131, 190, 79, 241, 3, 63, 215, 248, 142, 62, 82, 30, 18, 62, 122, 133, 213, 62, 240, 62, 15, 191, 202, 132, 147, 190, 109, 70, 176, 190, 199, 215, 30, 63, 108, 141, 237, 62, 62, 64, 30, 190, 57, 128, 28, 190, 54, 149, 4, 63, 137, 84, 249, 188, 176, 137, 43, 61, 219, 101, 215, 62, 80, 30, 205, 62, 198, 38, 35, 62, 11, 78, 28, 191, 149, 187, 47, 190, 182, 186, 234, 190, 166, 242, 28, 191, 173, 59, 5, 63, 252, 98, 171, 189, 43, 8, 210, 190, 97, 109, 75, 62, 42, 16, 116, 61, 54, 179, 143, 62, 44, 177, 230, 190, 244, 211, 11, 62, 121, 201, 1, 191, 135, 75, 192, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 190, 76, 62, 35, 7, 228, 60, 139, 245, 167, 188, 235, 172, 228, 62, 195, 91, 144, 188, 51, 160, 34, 62, 111, 136, 60, 189, 179, 63, 91, 63, 166, 110, 162, 190, 181, 212, 1, 62, 45, 85, 130, 62, 137, 222, 183, 62, 161, 62, 42, 190, 35, 29, 176, 187, 137, 125, 142, 189, 178, 236, 203, 189, 180, 197, 186, 190, 153, 179, 64, 190, 213, 108, 141, 60, 227, 159, 107, 62, 237, 193, 132, 61, 207, 165, 68, 187, 44, 237, 196, 190, 130, 160, 124, 62, 164, 41, 176, 188, 203, 26, 250, 190, 62, 146, 186, 190, 141, 59, 180, 190, 25, 92, 183, 190, 235, 77, 198, 190, 180, 196, 157, 189, 118, 110, 6, 188, 144, 166, 53, 62, 11, 206, 176, 61, 251, 172, 230, 61, 254, 32, 92, 190, 50, 183, 236, 60, 10, 15, 4, 191, 120, 146, 159, 189, 146, 42, 188, 190, 141, 216, 233, 61, 99, 167, 187, 189, 23, 27, 12, 191, 78, 131, 95, 62, 59, 38, 95, 62, 108, 139, 157, 62, 3, 53, 142, 62, 100, 72, 34, 62, 167, 204, 167, 190, 41, 93, 7, 190, 159, 201, 128, 190, 168, 224, 54, 63, 147, 24, 23, 63, 218, 130, 162, 190, 241, 152, 6, 62, 141, 43, 99, 62, 251, 38, 87, 62, 118, 237, 188, 62, 53, 131, 244, 190, 223, 134, 185, 62, 171, 126, 113, 191, 226, 70, 206, 190, 217, 108, 68, 191, 74, 238, 136, 189, 96, 180, 180, 190, 48, 83, 14, 191, 174, 103, 122, 189, 2, 83, 9, 190, 21, 78, 186, 189, 250, 75, 9, 190, 157, 164, 10, 61, 113, 225, 103, 189, 82, 4, 111, 62, 210, 237, 129, 61, 113, 233, 157, 190, 143, 210, 31, 190, 6, 2, 135, 190, 178, 248, 224, 190, 104, 232, 164, 190, 103, 47, 194, 61, 221, 202, 109, 190, 169, 99, 45, 61, 109, 48, 233, 189, 29, 97, 57, 191, 137, 71, 251, 189, 144, 17, 33, 190, 228, 126, 229, 190, 27, 17, 196, 190, 186, 234, 131, 190, 113, 31, 181, 190, 186, 212, 21, 190, 23, 134, 20, 191, 240, 13, 227, 188, 66, 104, 180, 189, 148, 221, 139, 190, 1, 120, 7, 61, 23, 246, 98, 190, 55, 82, 242, 191, 76, 46, 147, 190, 116, 152, 123, 62, 121, 169, 174, 62, 40, 82, 36, 61, 141, 69, 159, 61, 170, 125, 8, 63, 124, 39, 160, 62, 154, 176, 108, 62, 25, 81, 152, 62, 165, 153, 191, 190, 74, 87, 48, 61, 144, 229, 57, 62, 52, 158, 171, 190, 203, 240, 157, 62, 221, 98, 32, 62, 157, 171, 2, 190, 38, 206, 169, 62, 98, 45, 128, 191, 77, 103, 8, 189, 132, 80, 207, 60, 116, 155, 167, 191, 165, 161, 96, 191, 45, 234, 137, 190, 48, 243, 100, 191, 25, 113, 189, 189, 65, 196, 164, 62, 124, 219, 1, 190, 40, 163, 151, 62, 178, 114, 136, 188, 95, 175, 147, 61, 188, 27, 175, 190, 59, 70, 245, 190, 178, 116, 24, 62, 41, 117, 234, 60, 3, 222, 185, 62, 238, 5, 142, 62, 66, 141, 162, 61, 199, 224, 204, 61, 72, 46, 137, 62, 216, 90, 145, 62, 211, 151, 94, 62, 207, 89, 50, 190, 231, 167, 111, 62, 82, 93, 145, 188, 162, 5, 50, 191, 199, 217, 150, 187, 236, 211, 148, 62, 186, 135, 126, 190, 45, 94, 60, 61, 176, 157, 153, 191, 253, 243, 24, 191, 92, 159, 157, 62, 78, 83, 26, 190, 108, 17, 255, 190, 223, 147, 131, 190, 62, 74, 25, 191, 181, 252, 191, 62, 195, 75, 209, 189, 81, 72, 104, 189, 162, 214, 40, 62, 92, 135, 200, 189, 223, 186, 57, 62, 222, 97, 125, 190, 76, 236, 185, 190, 172, 134, 242, 58, 204, 250, 11, 62, 178, 205, 157, 190, 137, 48, 58, 62, 174, 248, 132, 190, 235, 1, 131, 189, 160, 194, 14, 191, 173, 233, 19, 62, 77, 83, 226, 61, 18, 203, 115, 62, 233, 94, 144, 62, 59, 12, 66, 62, 191, 208, 231, 190, 38, 111, 120, 190, 35, 94, 228, 61, 40, 248, 108, 185, 28, 236, 44, 190, 215, 88, 17, 190, 7, 91, 90, 191, 179, 99, 88, 190, 96, 13, 183, 190, 69, 148, 32, 190, 199, 76, 228, 61, 32, 82, 251, 189, 59, 139, 205, 61, 32, 226, 229, 61, 24, 38, 125, 190, 91, 12, 162, 61, 85, 19, 200, 190, 33, 92, 128, 190, 61, 14, 150, 189, 179, 177, 221, 188, 157, 30, 200, 61, 49, 130, 36, 62, 106, 193, 153, 189, 7, 101, 161, 62, 87, 44, 21, 189, 251, 140, 182, 188, 83, 109, 134, 188, 159, 108, 15, 189, 40, 225, 173, 62, 186, 174, 147, 190, 188, 26, 95, 62, 141, 139, 202, 62, 98, 252, 189, 190, 45, 0, 180, 190, 55, 132, 97, 61, 33, 148, 253, 188, 245, 126, 111, 62, 238, 180, 55, 191, 69, 227, 22, 191, 28, 123, 126, 189, 12, 159, 206, 189, 52, 207, 18, 190, 85, 173, 156, 189, 208, 238, 49, 62, 211, 183, 252, 186, 180, 184, 240, 61, 47, 215, 36, 191, 10, 154, 122, 62, 93, 35, 175, 190, 45, 60, 208, 61, 218, 23, 22, 61, 61, 81, 158, 189, 114, 45, 40, 61, 214, 111, 46, 191, 191, 254, 248, 190, 46, 176, 88, 190, 29, 10, 96, 62, 226, 31, 43, 191, 124, 175, 128, 190, 212, 161, 147, 61, 36, 90, 155, 60, 141, 246, 33, 62, 252, 67, 77, 62, 114, 26, 168, 190, 200, 73, 162, 62, 143, 218, 248, 188, 137, 72, 180, 61, 143, 217, 79, 61, 38, 164, 180, 61, 200, 222, 242, 62, 120, 66, 199, 62, 211, 216, 100, 190, 200, 22, 43, 190, 5, 216, 168, 190, 146, 67, 58, 62, 30, 30, 23, 190, 106, 176, 220, 62, 86, 169, 158, 61, 92, 236, 58, 63, 171, 54, 100, 62, 218, 201, 129, 188, 255, 206, 1, 61, 85, 236, 162, 60, 143, 28, 97, 62, 201, 121, 166, 188, 51, 160, 184, 190, 164, 30, 115, 62, 114, 8, 55, 190, 36, 135, 77, 61, 171, 135, 104, 190, 250, 30, 2, 62, 228, 157, 182, 190, 115, 64, 113, 62, 177, 219, 73, 63, 102, 86, 42, 61, 202, 194, 20, 63, 60, 16, 151, 62, 32, 89, 4, 62, 153, 218, 132, 59, 253, 136, 173, 189, 209, 222, 204, 190, 221, 12, 216, 62, 236, 147, 40, 62, 36, 194, 137, 189, 170, 60, 190, 61, 102, 231, 48, 62, 249, 3, 52, 63, 140, 113, 140, 62, 184, 5, 68, 190, 85, 51, 158, 190, 196, 163, 118, 189, 174, 223, 121, 190, 28, 58, 167, 189, 189, 91, 159, 191, 176, 36, 97, 62, 26, 169, 98, 60, 151, 230, 91, 61, 99, 227, 200, 189, 164, 251, 111, 62, 57, 25, 36, 62, 110, 165, 231, 190, 12, 206, 146, 185, 205, 24, 104, 61, 153, 49, 220, 189, 131, 143, 206, 62, 187, 31, 191, 189, 125, 221, 163, 61, 90, 61, 141, 62, 186, 137, 180, 62, 95, 14, 103, 190, 98, 175, 82, 62, 1, 107, 2, 190, 160, 154, 71, 61, 113, 178, 179, 62, 75, 55, 132, 62, 243, 112, 123, 190, 102, 93, 45, 62, 146, 3, 254, 189, 173, 101, 48, 188, 139, 39, 39, 62, 103, 7, 25, 190, 12, 131, 235, 62, 84, 144, 247, 190, 221, 18, 151, 59, 204, 223, 242, 190, 228, 26, 37, 60, 213, 206, 251, 189, 236, 52, 112, 62, 118, 36, 122, 62, 114, 146, 186, 190, 90, 162, 150, 62, 179, 246, 48, 191, 213, 28, 133, 62, 193, 255, 243, 189, 144, 79, 131, 62, 76, 44, 110, 189, 115, 13, 212, 189, 79, 64, 102, 62, 177, 36, 15, 190, 19, 186, 79, 189, 139, 61, 160, 62, 121, 146, 113, 60, 80, 69, 148, 189, 39, 203, 136, 62, 171, 28, 190, 190, 141, 195, 61, 62, 67, 43, 213, 57, 239, 201, 225, 189, 242, 236, 249, 61, 252, 101, 33, 62, 54, 227, 113, 61, 50, 8, 68, 62, 102, 160, 157, 189, 115, 254, 209, 188, 134, 37, 15, 190, 166, 119, 154, 61, 156, 129, 149, 62, 21, 95, 113, 61, 37, 101, 212, 61, 253, 134, 192, 61, 7, 88, 14, 62, 136, 1, 151, 190, 22, 65, 71, 191, 95, 174, 5, 62, 161, 165, 220, 190, 40, 181, 238, 190, 173, 123, 149, 190, 5, 193, 194, 188, 213, 74, 5, 63, 148, 3, 173, 187, 136, 64, 30, 62, 50, 244, 15, 190, 227, 141, 12, 190, 225, 189, 86, 189, 230, 225, 16, 188, 85, 54, 45, 191, 211, 9, 18, 62, 97, 174, 115, 62, 177, 55, 158, 61, 81, 249, 184, 189, 44, 109, 61, 190, 104, 30, 0, 191, 73, 5, 0, 190, 55, 161, 25, 190, 136, 236, 187, 62, 113, 26, 197, 190, 216, 206, 22, 63, 171, 135, 8, 62, 203, 202, 119, 62, 42, 229, 129, 187, 94, 176, 15, 190, 225, 101, 166, 190, 228, 76, 247, 189, 19, 63, 144, 190, 225, 180, 148, 62, 239, 247, 145, 190, 131, 243, 182, 60, 190, 6, 119, 190, 121, 209, 183, 62, 244, 50, 29, 190, 200, 9, 45, 190, 70, 31, 223, 62, 85, 67, 129, 62, 1, 251, 206, 62, 45, 219, 123, 190, 214, 112, 8, 62, 123, 187, 53, 191, 181, 178, 188, 60, 64, 155, 74, 190, 41, 131, 52, 62, 43, 24, 44, 191, 180, 89, 181, 190, 81, 24, 231, 189, 127, 221, 191, 61, 65, 166, 139, 62, 108, 196, 48, 190, 218, 143, 111, 191, 219, 53, 130, 61, 16, 121, 56, 190, 116, 154, 88, 191, 7, 196, 178, 59, 91, 39, 25, 190, 40, 126, 31, 62, 140, 228, 2, 190, 138, 93, 213, 189, 249, 169, 1, 191, 4, 135, 29, 191, 13, 209, 138, 190, 70, 130, 188, 190, 143, 108, 119, 190, 118, 9, 239, 190, 233, 36, 99, 60, 246, 215, 162, 61, 26, 88, 91, 189, 9, 165, 116, 187, 38, 167, 144, 188, 205, 107, 97, 189, 230, 205, 199, 190, 115, 8, 14, 62, 205, 208, 53, 191, 198, 187, 144, 190, 174, 12, 29, 61, 188, 32, 213, 189, 9, 108, 90, 191, 142, 157, 193, 61, 144, 109, 188, 190, 133, 88, 159, 189, 217, 45, 68, 190, 100, 76, 73, 60, 43, 189, 238, 61, 117, 110, 48, 191, 5, 126, 37, 62, 123, 171, 33, 61, 107, 126, 195, 189, 242, 70, 18, 190, 201, 106, 242, 188, 232, 178, 150, 189, 188, 145, 187, 189, 225, 25, 180, 61, 231, 194, 137, 62, 89, 119, 6, 189, 114, 253, 138, 61, 216, 138, 103, 62, 202, 219, 42, 62, 40, 184, 75, 62, 166, 233, 75, 190, 70, 68, 55, 62, 63, 110, 198, 188, 141, 119, 207, 190, 135, 222, 17, 190, 34, 40, 63, 62, 216, 20, 32, 189, 184, 150, 83, 62, 51, 119, 172, 190, 238, 117, 189, 190, 81, 173, 106, 62, 88, 83, 179, 61, 2, 224, 133, 61, 245, 136, 243, 189, 196, 30, 22, 60, 126, 41, 48, 190, 0, 210, 234, 61, 230, 7, 171, 190, 192, 136, 87, 62, 87, 58, 6, 190, 4, 69, 52, 61, 205, 129, 105, 61, 101, 105, 181, 59, 33, 219, 60, 189, 198, 153, 81, 190, 5, 170, 14, 191, 127, 207, 179, 61, 66, 216, 129, 191, 179, 156, 64, 61, 8, 32, 207, 191, 0, 223, 110, 62, 93, 36, 153, 62, 186, 139, 166, 61, 158, 33, 101, 62, 72, 199, 17, 62, 149, 104, 247, 190, 96, 151, 52, 191, 92, 213, 110, 62, 231, 0, 188, 190, 61, 188, 8, 190, 220, 78, 163, 60, 142, 109, 38, 191, 156, 225, 113, 62, 76, 114, 123, 61, 144, 242, 131, 189, 194, 128, 132, 61, 74, 242, 189, 61, 61, 131, 131, 189, 21, 18, 57, 58, 176, 50, 20, 190, 51, 56, 126, 61, 143, 175, 68, 191, 72, 248, 16, 190, 75, 163, 185, 190, 171, 37, 200, 61, 252, 233, 4, 62, 54, 244, 226, 61, 1, 77, 138, 62, 50, 42, 111, 189, 65, 114, 47, 61, 172, 11, 177, 61, 61, 61, 109, 189, 131, 12, 137, 190, 24, 39, 138, 190, 200, 202, 129, 62, 103, 143, 52, 190, 121, 77, 195, 187, 162, 24, 54, 60, 64, 188, 135, 190, 90, 135, 58, 62, 150, 139, 35, 62, 0, 187, 143, 190, 77, 186, 83, 190, 0, 131, 88, 191, 190, 52, 72, 62, 152, 36, 45, 62, 128, 60, 154, 62, 226, 251, 84, 190, 134, 68, 247, 61, 221, 157, 39, 61, 203, 54, 105, 189, 107, 185, 236, 187, 175, 58, 63, 189, 103, 41, 93, 191, 100, 7, 169, 190, 17, 227, 51, 62, 95, 134, 219, 61, 145, 62, 99, 62, 147, 95, 123, 62, 48, 72, 162, 190, 107, 115, 144, 62, 147, 54, 163, 62, 5, 230, 211, 187, 216, 119, 164, 190, 2, 31, 191, 60, 123, 26, 119, 62, 241, 188, 141, 62, 107, 144, 165, 62, 82, 236, 19, 62, 245, 201, 211, 62, 48, 63, 138, 61, 180, 186, 163, 190, 81, 105, 101, 62, 115, 2, 44, 187, 192, 103, 67, 63, 147, 98, 10, 187, 63, 1, 107, 189, 97, 72, 150, 190, 111, 32, 202, 189, 72, 174, 150, 61, 132, 130, 7, 191, 200, 98, 11, 191, 34, 60, 159, 190, 127, 218, 252, 190, 44, 14, 134, 190, 25, 228, 189, 60, 213, 155, 189, 62, 151, 223, 149, 61, 209, 199, 142, 189, 116, 135, 112, 189, 10, 166, 40, 62, 43, 142, 152, 61, 61, 241, 159, 60, 4, 30, 60, 61, 78, 188, 182, 61, 177, 204, 21, 190, 114, 0, 129, 189, 175, 136, 244, 189, 183, 221, 21, 188, 94, 77, 119, 61, 202, 10, 77, 61, 196, 135, 232, 189, 147, 242, 17, 190, 138, 182, 0, 190, 40, 92, 198, 189, 114, 61, 184, 189, 15, 106, 50, 62, 24, 41, 29, 190, 211, 72, 21, 61, 4, 38, 29, 190, 209, 108, 245, 189, 66, 152, 209, 61, 34, 59, 53, 60, 242, 96, 113, 189, 234, 169, 14, 190, 122, 48, 3, 61, 250, 26, 32, 190, 31, 58, 14, 62, 128, 160, 3, 190, 79, 87, 194, 60, 102, 77, 18, 62, 69, 215, 139, 61, 147, 149, 149, 190, 123, 178, 73, 62, 86, 108, 59, 191, 128, 172, 184, 62, 116, 222, 129, 190, 142, 186, 104, 62, 33, 234, 148, 60, 185, 203, 254, 189, 32, 217, 197, 62, 25, 41, 206, 61, 187, 61, 17, 62, 113, 11, 82, 62, 32, 20, 241, 61, 182, 132, 18, 190, 18, 84, 144, 62, 10, 206, 154, 190, 55, 136, 178, 62, 21, 186, 103, 189, 246, 78, 66, 190, 236, 114, 30, 188, 180, 250, 131, 62, 97, 247, 0, 61, 105, 36, 155, 61, 163, 75, 33, 191, 82, 128, 72, 188, 237, 185, 80, 191, 53, 165, 150, 190, 60, 14, 151, 188, 240, 112, 65, 190, 14, 23, 27, 190, 104, 51, 151, 61, 3, 172, 180, 61, 164, 252, 61, 62, 175, 221, 100, 190, 242, 147, 35, 62, 217, 255, 218, 189, 78, 200, 226, 189, 248, 114, 166, 191, 112, 15, 9, 62, 55, 2, 153, 62, 182, 12, 169, 61, 106, 141, 126, 62, 191, 32, 222, 62, 2, 45, 137, 190, 236, 241, 43, 191, 85, 166, 133, 62, 33, 189, 168, 189, 71, 253, 208, 61, 137, 131, 228, 189, 247, 55, 210, 190, 186, 125, 231, 60, 136, 54, 92, 61, 114, 117, 101, 190, 49, 101, 136, 189, 185, 228, 196, 189, 249, 227, 99, 189, 58, 130, 160, 62, 103, 53, 105, 190, 21, 112, 94, 188, 170, 116, 31, 191, 250, 242, 136, 187, 187, 96, 242, 190, 34, 83, 153, 189, 10, 107, 116, 62, 170, 134, 245, 61, 52, 168, 22, 190, 82, 100, 35, 63, 106, 191, 185, 61, 227, 176, 129, 62, 78, 195, 99, 190, 199, 200, 209, 62, 35, 135, 181, 62, 159, 163, 244, 190, 75, 33, 224, 61, 39, 248, 167, 61, 5, 235, 80, 191, 239, 193, 157, 189, 204, 206, 47, 62, 130, 100, 27, 190, 38, 115, 188, 62, 152, 143, 224, 190, 86, 100, 145, 191, 143, 86, 148, 62, 57, 153, 17, 190, 93, 85, 55, 190, 78, 164, 191, 190, 62, 230, 4, 190, 71, 98, 160, 62, 148, 243, 4, 63, 87, 225, 101, 61, 33, 101, 148, 62, 139, 187, 206, 190, 138, 255, 2, 61, 39, 56, 226, 189, 150, 212, 55, 62, 110, 240, 136, 62, 132, 134, 198, 61, 137, 31, 130, 62, 221, 110, 72, 62, 58, 149, 59, 61, 133, 25, 225, 189, 253, 107, 211, 189, 120, 160, 206, 61, 203, 80, 192, 62, 120, 204, 31, 190, 5, 37, 179, 62, 15, 201, 137, 61, 96, 157, 73, 190, 141, 203, 240, 189, 194, 224, 158, 60, 157, 208, 176, 61, 181, 30, 162, 61, 48, 193, 164, 190, 81, 132, 57, 190, 168, 113, 142, 61, 50, 240, 23, 62, 54, 42, 48, 190, 227, 156, 55, 190, 3, 231, 144, 189, 82, 250, 50, 190, 91, 160, 139, 62, 118, 99, 16, 191, 178, 202, 22, 62, 35, 18, 111, 61, 220, 192, 95, 61, 131, 86, 188, 61, 211, 34, 142, 190, 114, 131, 211, 62, 198, 222, 207, 62, 222, 178, 122, 190, 188, 218, 175, 188, 196, 113, 157, 62, 3, 227, 115, 62, 167, 167, 37, 190, 77, 104, 0, 62, 209, 204, 220, 189, 132, 242, 211, 62, 154, 90, 41, 61, 7, 205, 180, 190, 123, 31, 171, 62, 179, 145, 178, 189, 32, 141, 71, 190, 217, 221, 250, 62, 155, 185, 12, 62, 81, 220, 183, 190, 166, 85, 126, 60, 180, 172, 98, 190, 112, 28, 82, 190, 83, 224, 168, 61, 9, 204, 150, 60, 61, 25, 174, 190, 99, 109, 102, 191, 54, 208, 245, 62, 89, 11, 65, 191, 170, 98, 240, 190, 124, 218, 215, 61, 189, 205, 143, 62, 156, 35, 25, 190, 6, 21, 152, 189, 46, 12, 205, 188, 190, 142, 58, 61, 254, 67, 91, 61, 13, 92, 178, 189, 122, 62, 146, 187, 243, 136, 103, 189, 134, 165, 88, 189, 3, 126, 1, 190, 45, 171, 33, 190, 156, 158, 129, 189, 189, 186, 232, 61, 42, 158, 16, 60, 110, 51, 16, 190, 130, 99, 195, 189, 169, 39, 207, 189, 241, 120, 16, 190, 105, 152, 52, 61, 186, 143, 133, 188, 116, 197, 126, 188, 192, 128, 149, 189, 143, 153, 147, 189, 57, 97, 45, 188, 230, 161, 153, 188, 224, 15, 48, 62, 65, 89, 4, 62, 185, 10, 146, 60, 32, 39, 41, 62, 251, 249, 9, 190, 202, 108, 226, 189, 16, 27, 226, 61, 178, 156, 234, 62, 9, 164, 22, 190, 169, 39, 14, 190, 45, 36, 202, 62, 79, 114, 72, 190, 125, 49, 4, 190, 157, 108, 163, 62, 114, 228, 217, 62, 141, 54, 121, 189, 76, 7, 50, 190, 245, 123, 14, 190, 18, 243, 74, 60, 142, 175, 146, 190, 43, 20, 145, 191, 202, 96, 63, 62, 174, 174, 206, 189, 34, 108, 179, 191, 254, 233, 252, 61, 108, 13, 244, 189, 186, 93, 117, 188, 45, 26, 249, 62, 154, 18, 28, 191, 239, 129, 155, 190, 85, 154, 146, 62, 23, 103, 65, 62, 98, 172, 188, 189, 38, 213, 184, 190, 199, 98, 98, 62, 53, 55, 156, 188, 174, 152, 53, 191, 244, 131, 32, 61, 199, 132, 155, 61, 248, 110, 111, 60, 87, 178, 54, 62, 185, 242, 78, 62, 101, 165, 184, 190, 1, 4, 205, 60, 224, 210, 140, 191, 138, 35, 23, 62, 251, 180, 237, 189, 18, 188, 25, 62, 36, 142, 229, 61, 45, 170, 63, 189, 6, 170, 120, 62, 222, 212, 200, 61, 107, 189, 2, 59, 40, 221, 49, 62, 11, 155, 43, 62, 171, 33, 120, 190, 168, 198, 159, 62, 100, 107, 254, 190, 47, 84, 84, 62, 7, 4, 170, 61, 130, 45, 202, 190, 250, 251, 73, 62, 9, 22, 22, 62, 164, 219, 15, 190, 224, 175, 187, 61, 27, 8, 61, 191, 58, 98, 65, 62, 33, 158, 87, 191, 255, 146, 250, 190, 63, 155, 221, 61, 64, 140, 78, 189, 29, 67, 44, 62, 132, 113, 59, 62, 123, 221, 89, 189, 100, 233, 62, 62, 231, 90, 131, 189, 82, 231, 194, 60, 82, 64, 50, 62, 94, 36, 145, 188, 220, 235, 95, 189, 5, 81, 133, 190, 137, 35, 200, 190, 127, 199, 119, 62, 65, 114, 182, 190, 205, 25, 250, 189, 87, 85, 162, 62, 33, 186, 42, 190, 45, 191, 211, 60, 16, 140, 225, 188, 103, 204, 154, 59, 156, 112, 169, 60, 236, 243, 130, 62, 174, 153, 145, 60, 115, 93, 60, 189, 5, 217, 43, 62, 56, 144, 36, 62, 174, 48, 158, 62, 229, 184, 231, 61, 158, 68, 43, 62, 186, 42, 118, 62, 200, 122, 120, 188, 146, 30, 136, 62, 33, 213, 21, 190, 136, 254, 176, 61, 96, 38, 150, 190, 99, 121, 9, 190, 103, 191, 11, 190, 225, 132, 19, 190, 238, 66, 15, 190, 46, 59, 184, 189, 141, 107, 46, 190, 74, 110, 175, 61, 226, 69, 35, 190, 226, 9, 133, 190, 10, 124, 163, 189, 9, 102, 215, 189, 156, 105, 3, 188, 38, 166, 232, 189, 165, 134, 197, 61, 162, 11, 166, 189, 36, 138, 67, 190, 229, 108, 144, 188, 183, 179, 100, 61, 48, 74, 15, 190, 129, 73, 98, 189, 227, 13, 152, 61, 106, 176, 67, 190, 100, 49, 233, 189, 168, 128, 44, 60, 238, 35, 110, 61, 239, 235, 42, 190, 122, 157, 128, 189, 19, 31, 163, 190, 246, 153, 129, 61, 32, 6, 65, 190, 243, 53, 23, 190, 121, 120, 5, 191, 20, 199, 39, 190, 223, 161, 190, 61, 62, 186, 63, 59, 57, 242, 184, 62, 156, 37, 100, 190, 29, 72, 10, 62, 158, 160, 99, 62, 175, 135, 16, 62, 209, 98, 50, 62, 166, 121, 254, 190, 106, 45, 115, 61, 87, 234, 21, 190, 35, 228, 158, 190, 216, 199, 208, 61, 197, 10, 231, 62, 13, 18, 251, 190, 49, 111, 153, 62, 57, 170, 149, 191, 253, 210, 242, 189, 36, 67, 178, 62, 207, 209, 55, 190, 94, 207, 240, 190, 95, 80, 16, 190, 247, 235, 23, 191, 8, 15, 16, 63, 79, 37, 175, 186, 46, 238, 229, 61, 213, 57, 193, 62, 190, 53, 85, 61, 178, 213, 146, 61, 142, 81, 10, 62, 105, 180, 51, 61, 121, 108, 14, 190, 48, 55, 16, 191, 44, 165, 40, 61, 229, 8, 249, 190, 20, 177, 157, 189, 113, 243, 167, 190, 76, 67, 209, 189, 125, 54, 117, 189, 255, 107, 188, 190, 138, 224, 216, 62, 151, 244, 199, 61, 83, 40, 146, 62, 95, 125, 42, 188, 44, 153, 203, 189, 122, 77, 196, 190, 161, 65, 154, 189, 24, 118, 39, 190, 17, 100, 91, 62, 192, 38, 9, 62, 74, 32, 28, 190, 114, 94, 56, 61, 108, 183, 255, 61, 31, 132, 39, 62, 181, 255, 196, 61, 101, 123, 22, 191, 242, 203, 218, 189, 111, 231, 15, 191, 223, 147, 205, 190, 123, 149, 210, 61, 174, 162, 227, 190, 74, 32, 170, 190, 37, 239, 70, 191, 174, 17, 170, 189, 151, 26, 187, 62, 73, 155, 128, 62, 77, 251, 252, 62, 203, 223, 130, 189, 197, 223, 59, 62, 218, 9, 182, 189, 117, 202, 64, 62, 242, 131, 150, 62, 1, 46, 140, 190, 125, 114, 152, 187, 233, 218, 106, 61, 251, 146, 41, 190, 183, 142, 31, 62, 118, 238, 139, 62, 103, 196, 190, 190, 180, 140, 146, 62, 112, 8, 153, 191, 141, 151, 145, 190, 132, 247, 33, 190, 239, 200, 191, 190, 165, 139, 10, 191, 252, 247, 197, 189, 245, 53, 238, 190, 97, 36, 12, 63, 175, 221, 178, 62, 11, 240, 141, 190, 207, 88, 8, 63, 67, 197, 59, 189, 235, 139, 85, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 31, 67, 189, 88, 53, 29, 62, 49, 143, 146, 188, 18, 77, 106, 187, 223, 246, 8, 62, 161, 51, 188, 60, 197, 170, 113, 62, 34, 2, 197, 189, 145, 11, 128, 62, 29, 188, 230, 61, 205, 73, 107, 62, 252, 120, 29, 190, 27, 211, 187, 62, 136, 229, 130, 190, 136, 121, 164, 60, 226, 224, 70, 62, 86, 44, 31, 61, 178, 27, 225, 188, 79, 150, 152, 189, 18, 51, 216, 62, 197, 69, 26, 61, 162, 64, 1, 60, 198, 32, 28, 62, 62, 50, 128, 62, 169, 48, 27, 190, 56, 117, 205, 189, 60, 160, 240, 61, 68, 39, 140, 190, 179, 194, 221, 61, 85, 166, 218, 61, 36, 150, 150, 189, 147, 206, 15, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 215, 50, 62, 41, 141, 126, 63, 67, 130, 66, 191, 148, 4, 27, 191, 149, 6, 125, 191, 173, 166, 196, 190, 139, 168, 227, 190, 92, 190, 129, 62, 168, 126, 14, 63, 206, 255, 58, 62, 237, 43, 32, 62, 158, 127, 62, 63, 241, 225, 140, 63, 60, 177, 132, 190, 56, 18, 40, 189, 231, 212, 41, 191, 76, 46, 157, 190, 158, 157, 203, 62, 253, 76, 51, 190, 193, 124, 5, 63, 184, 109, 247, 190, 213, 59, 41, 191, 35, 71, 134, 188, 72, 91, 135, 62, 134, 54, 6, 62, 247, 168, 96, 191, 2, 149, 51, 63, 183, 6, 77, 190, 46, 201, 211, 185, 19, 80, 202, 190, 51, 217, 34, 63, 114, 55, 152, 190, 168, 119, 105, 188, 235, 60, 57, 63, 70, 31, 21, 62, 254, 102, 239, 189, 204, 123, 9, 62, 30, 14, 26, 63, 61, 22, 5, 191, 115, 76, 83, 190, 47, 2, 131, 189, 111, 132, 74, 190, 18, 134, 50, 190, 185, 168, 119, 62, 170, 252, 62, 60, 114, 95, 189, 62, 3, 136, 77, 190, 45, 201, 135, 189, 120, 223, 216, 188, 101, 7, 101, 59, 117, 70, 145, 61, 59, 75, 213, 189, 135, 97, 146, 190, 147, 109, 124, 62, 76, 150, 180, 190, 231, 59, 74, 190, 73, 56, 150, 189, 133, 130, 163, 62, 87, 32, 12, 62, 106, 132, 71, 59, 18, 29, 39, 62, 1, 211, 71, 62, 250, 107, 228, 61, 57, 119, 244, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 185, 4, 61, 113, 107, 188, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {254, 248, 215, 190, 63, 239, 253, 190, 255, 71, 152, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {89, 203, 174, 63, 129, 153, 190, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0021/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}