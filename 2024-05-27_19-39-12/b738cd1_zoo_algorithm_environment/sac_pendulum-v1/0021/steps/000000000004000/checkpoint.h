// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 24, 6, 62, 5, 94, 159, 62, 147, 144, 49, 191, 206, 23, 67, 62, 186, 172, 214, 189, 100, 205, 57, 63, 183, 204, 156, 62, 118, 130, 33, 190, 63, 32, 84, 60, 169, 193, 115, 61, 186, 39, 35, 191, 129, 167, 160, 62, 55, 240, 5, 191, 254, 242, 163, 190, 98, 152, 104, 188, 5, 32, 248, 190, 11, 213, 71, 63, 213, 28, 249, 190, 58, 112, 74, 62, 10, 14, 83, 191, 68, 217, 222, 61, 225, 78, 64, 190, 18, 184, 42, 191, 92, 186, 195, 62, 191, 160, 33, 191, 121, 85, 70, 191, 47, 84, 243, 189, 206, 243, 14, 62, 127, 223, 178, 62, 198, 89, 65, 191, 21, 109, 52, 61, 233, 150, 81, 63, 50, 159, 38, 190, 191, 196, 66, 189, 146, 95, 34, 63, 147, 196, 177, 190, 88, 242, 38, 62, 83, 156, 26, 63, 139, 49, 87, 190, 179, 172, 51, 191, 197, 34, 4, 63, 202, 230, 150, 189, 198, 19, 19, 63, 169, 184, 53, 191, 149, 164, 34, 190, 198, 5, 22, 191, 32, 192, 41, 191, 56, 233, 140, 190, 211, 6, 18, 63, 234, 93, 52, 63, 184, 29, 17, 63, 243, 17, 168, 62, 18, 28, 130, 191, 197, 202, 11, 62, 194, 206, 34, 191, 176, 130, 241, 62, 32, 72, 37, 191, 185, 132, 230, 190, 220, 130, 83, 63, 156, 53, 132, 62, 23, 228, 179, 62, 116, 114, 18, 191, 116, 230, 249, 190, 199, 194, 175, 62, 147, 150, 185, 61, 63, 16, 26, 63, 168, 65, 126, 62, 246, 1, 68, 189, 86, 230, 3, 63, 217, 187, 233, 59, 106, 30, 114, 191, 158, 139, 19, 63, 212, 160, 75, 190, 128, 8, 15, 63, 74, 18, 14, 191, 138, 190, 69, 190, 14, 22, 29, 190, 222, 44, 60, 63, 93, 51, 97, 62, 210, 96, 26, 63, 212, 13, 159, 62, 226, 108, 125, 63, 192, 87, 189, 190, 89, 254, 99, 189, 38, 81, 188, 61, 89, 103, 227, 62, 175, 65, 11, 62, 250, 172, 175, 62, 131, 214, 32, 63, 3, 143, 210, 62, 141, 10, 136, 190, 212, 141, 62, 191, 127, 239, 204, 190, 149, 8, 239, 187, 227, 144, 237, 61, 220, 21, 235, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 45, 103, 190, 203, 117, 184, 62, 148, 107, 213, 62, 177, 240, 28, 59, 188, 39, 202, 62, 183, 222, 178, 190, 11, 141, 197, 61, 212, 113, 154, 190, 98, 13, 179, 62, 37, 21, 4, 63, 23, 130, 129, 61, 195, 24, 39, 189, 205, 11, 26, 63, 73, 88, 90, 190, 128, 215, 233, 61, 47, 238, 0, 63, 72, 188, 171, 61, 151, 149, 157, 62, 14, 87, 174, 190, 71, 71, 150, 61, 65, 143, 190, 190, 110, 217, 239, 190, 165, 76, 231, 62, 226, 218, 2, 61, 46, 18, 168, 190, 155, 92, 152, 62, 151, 225, 138, 190, 65, 165, 166, 62, 216, 97, 213, 190, 40, 16, 156, 189, 47, 236, 62, 191, 197, 148, 73, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {66, 195, 116, 62, 212, 183, 62, 190, 180, 199, 250, 189, 192, 117, 170, 189, 126, 160, 19, 62, 181, 220, 38, 62, 86, 2, 75, 189, 64, 247, 40, 62, 106, 204, 42, 190, 134, 210, 56, 62, 143, 146, 101, 62, 7, 254, 212, 62, 136, 158, 230, 189, 111, 149, 226, 61, 75, 70, 194, 189, 131, 224, 176, 60, 101, 149, 52, 60, 165, 240, 43, 190, 60, 104, 37, 61, 181, 125, 173, 61, 10, 161, 183, 61, 221, 76, 32, 190, 111, 207, 227, 190, 215, 110, 125, 190, 106, 74, 162, 60, 250, 83, 0, 191, 234, 188, 211, 187, 49, 42, 114, 190, 118, 40, 225, 189, 38, 63, 156, 189, 249, 22, 133, 60, 176, 255, 54, 61, 183, 195, 105, 62, 171, 160, 133, 61, 47, 163, 234, 61, 41, 72, 8, 190, 94, 151, 9, 189, 197, 10, 36, 191, 122, 164, 42, 62, 205, 63, 168, 190, 214, 254, 254, 61, 150, 107, 145, 190, 241, 89, 224, 190, 153, 103, 92, 62, 245, 132, 6, 61, 171, 48, 86, 190, 65, 73, 141, 61, 84, 221, 169, 61, 155, 223, 144, 190, 52, 72, 203, 186, 84, 68, 208, 190, 203, 143, 129, 62, 95, 114, 190, 62, 115, 94, 81, 190, 186, 193, 209, 61, 40, 67, 145, 62, 130, 122, 90, 62, 247, 187, 170, 62, 123, 239, 189, 190, 90, 149, 157, 62, 87, 69, 153, 190, 26, 149, 155, 190, 176, 52, 126, 189, 19, 37, 53, 190, 55, 74, 186, 190, 154, 147, 238, 60, 64, 177, 43, 62, 81, 215, 155, 61, 104, 158, 138, 60, 124, 105, 33, 190, 104, 179, 6, 62, 162, 63, 225, 61, 248, 22, 175, 62, 173, 144, 3, 62, 174, 255, 136, 190, 191, 132, 10, 190, 114, 175, 61, 190, 43, 34, 148, 190, 232, 203, 136, 190, 33, 33, 77, 62, 120, 41, 105, 190, 128, 100, 66, 62, 122, 116, 114, 189, 222, 58, 205, 190, 75, 147, 62, 190, 212, 72, 14, 190, 200, 215, 78, 189, 107, 129, 223, 188, 118, 18, 154, 190, 170, 226, 145, 189, 22, 161, 39, 190, 19, 202, 184, 190, 240, 13, 227, 188, 237, 82, 182, 189, 239, 22, 117, 189, 149, 191, 1, 62, 120, 76, 63, 190, 120, 65, 74, 191, 153, 143, 187, 189, 160, 197, 52, 58, 79, 177, 174, 62, 7, 90, 158, 61, 234, 143, 37, 189, 83, 229, 139, 62, 73, 244, 136, 62, 57, 210, 137, 62, 18, 87, 223, 62, 154, 36, 171, 190, 112, 222, 3, 62, 67, 22, 143, 62, 87, 59, 91, 190, 8, 168, 131, 62, 147, 192, 247, 189, 161, 244, 165, 190, 122, 145, 182, 62, 88, 230, 5, 189, 224, 97, 165, 60, 132, 80, 207, 60, 57, 215, 236, 190, 0, 179, 35, 191, 189, 229, 132, 190, 117, 80, 215, 190, 216, 147, 14, 190, 231, 104, 180, 61, 217, 58, 12, 190, 106, 215, 78, 62, 24, 124, 161, 188, 216, 156, 188, 61, 167, 167, 172, 190, 32, 220, 156, 190, 104, 154, 111, 62, 3, 169, 233, 61, 84, 107, 83, 62, 163, 137, 142, 62, 216, 104, 6, 62, 44, 4, 5, 62, 240, 80, 208, 61, 228, 90, 150, 62, 183, 212, 158, 62, 203, 205, 83, 190, 27, 16, 148, 62, 73, 12, 153, 189, 163, 189, 130, 190, 129, 21, 118, 189, 140, 186, 255, 61, 156, 80, 168, 189, 76, 125, 218, 60, 214, 218, 27, 190, 19, 65, 191, 190, 82, 127, 130, 61, 112, 240, 8, 188, 160, 120, 147, 190, 13, 229, 155, 190, 127, 65, 140, 190, 63, 20, 157, 62, 178, 73, 77, 61, 205, 165, 11, 62, 148, 251, 193, 61, 81, 127, 225, 189, 253, 120, 80, 62, 157, 33, 87, 190, 254, 154, 255, 189, 114, 77, 63, 61, 218, 251, 85, 62, 88, 191, 93, 190, 6, 123, 236, 60, 239, 229, 129, 190, 151, 197, 195, 59, 40, 188, 13, 190, 217, 92, 149, 61, 248, 56, 183, 189, 24, 130, 64, 190, 246, 8, 225, 61, 172, 172, 76, 190, 33, 45, 186, 189, 209, 219, 171, 189, 162, 147, 29, 62, 43, 179, 16, 190, 123, 45, 48, 190, 163, 201, 12, 62, 51, 30, 239, 189, 127, 155, 11, 61, 159, 145, 61, 190, 16, 214, 196, 189, 88, 170, 139, 188, 135, 210, 200, 61, 205, 27, 122, 62, 18, 239, 147, 187, 176, 31, 218, 189, 98, 32, 95, 62, 26, 155, 14, 62, 144, 44, 42, 189, 235, 78, 247, 189, 171, 77, 114, 189, 104, 39, 100, 61, 141, 26, 89, 62, 58, 1, 11, 189, 212, 19, 116, 62, 124, 90, 46, 62, 119, 223, 203, 61, 237, 7, 67, 61, 45, 46, 39, 189, 228, 37, 135, 62, 225, 138, 209, 190, 128, 63, 239, 61, 64, 63, 36, 62, 209, 97, 156, 187, 247, 236, 212, 188, 247, 187, 166, 189, 65, 118, 190, 61, 30, 126, 63, 62, 228, 148, 11, 190, 192, 80, 142, 190, 150, 103, 40, 190, 195, 197, 11, 190, 159, 239, 6, 190, 196, 18, 71, 190, 131, 51, 231, 61, 178, 242, 242, 188, 108, 228, 247, 61, 0, 198, 179, 190, 140, 70, 26, 62, 147, 150, 231, 189, 41, 22, 85, 62, 72, 37, 206, 60, 53, 110, 25, 60, 83, 70, 175, 189, 217, 127, 167, 190, 172, 151, 77, 190, 137, 83, 92, 190, 55, 53, 144, 62, 194, 146, 128, 190, 215, 164, 3, 188, 130, 81, 79, 61, 119, 240, 247, 189, 107, 127, 82, 62, 103, 23, 61, 62, 182, 37, 181, 189, 137, 180, 77, 62, 168, 8, 60, 61, 10, 36, 181, 61, 170, 172, 27, 62, 243, 75, 207, 61, 15, 255, 62, 60, 80, 107, 113, 62, 59, 1, 225, 61, 57, 243, 237, 189, 2, 56, 175, 61, 100, 200, 96, 62, 120, 84, 16, 190, 58, 9, 148, 62, 216, 102, 115, 61, 143, 19, 195, 62, 139, 211, 47, 62, 56, 108, 81, 60, 253, 152, 183, 188, 159, 220, 116, 189, 133, 253, 87, 62, 128, 150, 77, 61, 103, 112, 135, 190, 240, 64, 141, 62, 23, 58, 64, 191, 56, 9, 84, 62, 116, 46, 37, 190, 33, 157, 112, 62, 141, 161, 12, 191, 37, 80, 0, 190, 86, 199, 187, 61, 55, 188, 102, 189, 27, 96, 129, 62, 232, 83, 39, 189, 220, 110, 9, 190, 218, 94, 151, 187, 106, 54, 205, 61, 114, 38, 127, 191, 190, 105, 13, 62, 66, 137, 8, 62, 224, 144, 88, 187, 11, 30, 151, 61, 90, 46, 127, 62, 222, 146, 149, 189, 29, 30, 157, 62, 28, 33, 70, 190, 102, 41, 217, 189, 143, 3, 20, 62, 252, 150, 114, 190, 42, 29, 56, 61, 106, 105, 61, 191, 152, 25, 5, 190, 92, 5, 114, 189, 222, 194, 191, 189, 187, 195, 224, 189, 116, 85, 82, 62, 119, 208, 13, 189, 219, 250, 122, 190, 164, 68, 179, 189, 197, 227, 205, 60, 233, 125, 147, 190, 204, 35, 129, 62, 152, 246, 31, 190, 239, 59, 181, 187, 156, 143, 149, 62, 56, 177, 30, 62, 235, 111, 50, 190, 28, 77, 54, 62, 83, 97, 52, 189, 181, 89, 200, 189, 125, 166, 52, 62, 120, 196, 150, 189, 13, 54, 140, 190, 140, 234, 192, 61, 115, 150, 250, 189, 5, 228, 78, 190, 81, 237, 250, 61, 253, 49, 5, 190, 208, 73, 199, 62, 160, 126, 109, 190, 76, 160, 25, 60, 126, 33, 179, 189, 247, 75, 103, 189, 36, 97, 134, 60, 200, 49, 135, 62, 244, 220, 82, 62, 7, 109, 164, 190, 108, 120, 56, 62, 31, 235, 14, 191, 225, 235, 156, 62, 229, 216, 121, 189, 248, 26, 26, 62, 213, 79, 196, 189, 158, 236, 111, 190, 64, 206, 145, 62, 116, 23, 50, 190, 240, 78, 14, 190, 200, 41, 146, 62, 77, 29, 156, 189, 192, 204, 62, 189, 60, 222, 151, 62, 7, 16, 190, 190, 125, 57, 187, 60, 148, 254, 158, 61, 0, 205, 179, 188, 196, 112, 3, 62, 26, 141, 121, 62, 140, 172, 64, 62, 220, 61, 139, 62, 175, 68, 231, 59, 188, 140, 136, 58, 134, 236, 44, 62, 176, 32, 13, 62, 159, 200, 147, 62, 232, 16, 67, 61, 120, 190, 114, 61, 75, 152, 32, 62, 244, 74, 112, 60, 221, 42, 58, 61, 172, 153, 191, 190, 76, 190, 61, 61, 168, 237, 53, 190, 195, 78, 40, 190, 136, 224, 33, 189, 36, 49, 222, 189, 254, 191, 116, 62, 172, 2, 183, 189, 223, 185, 221, 188, 204, 131, 217, 60, 47, 3, 25, 190, 112, 186, 214, 60, 66, 204, 169, 189, 190, 139, 62, 190, 46, 178, 176, 61, 4, 88, 238, 61, 55, 86, 136, 59, 17, 118, 24, 62, 140, 226, 54, 190, 42, 162, 94, 190, 8, 248, 63, 190, 53, 136, 151, 61, 61, 60, 136, 62, 21, 34, 148, 190, 25, 171, 213, 62, 214, 43, 41, 61, 34, 108, 61, 62, 165, 188, 131, 188, 69, 185, 198, 61, 50, 208, 137, 61, 217, 24, 234, 59, 10, 42, 168, 190, 7, 141, 235, 59, 226, 124, 202, 190, 236, 203, 73, 62, 120, 3, 201, 190, 9, 202, 244, 61, 187, 59, 70, 190, 136, 86, 152, 190, 242, 11, 130, 62, 36, 103, 120, 61, 91, 137, 132, 189, 53, 219, 19, 62, 52, 8, 33, 188, 7, 243, 9, 190, 28, 93, 13, 62, 218, 31, 173, 190, 93, 123, 200, 60, 166, 165, 31, 61, 134, 126, 215, 189, 177, 109, 76, 62, 31, 27, 1, 61, 52, 23, 19, 62, 159, 131, 210, 61, 37, 28, 126, 190, 6, 146, 174, 60, 99, 201, 189, 189, 241, 218, 10, 190, 121, 174, 150, 62, 249, 239, 238, 59, 240, 222, 111, 62, 165, 241, 202, 188, 85, 45, 74, 62, 175, 176, 182, 190, 131, 144, 178, 190, 20, 175, 7, 190, 51, 28, 127, 190, 134, 211, 6, 190, 155, 186, 21, 190, 68, 150, 9, 62, 134, 69, 94, 62, 72, 196, 225, 60, 219, 15, 248, 61, 183, 7, 81, 190, 161, 253, 139, 61, 44, 5, 38, 190, 135, 163, 95, 62, 230, 27, 7, 191, 211, 8, 237, 189, 13, 221, 191, 59, 137, 177, 27, 62, 37, 75, 54, 190, 207, 143, 35, 62, 172, 102, 148, 190, 253, 28, 99, 61, 182, 56, 67, 190, 15, 127, 244, 187, 98, 91, 164, 62, 187, 49, 92, 61, 223, 64, 75, 62, 88, 159, 185, 61, 142, 231, 175, 61, 18, 247, 130, 189, 17, 64, 134, 189, 238, 8, 210, 189, 125, 87, 53, 190, 124, 64, 221, 60, 64, 66, 154, 62, 8, 229, 73, 190, 128, 49, 243, 60, 18, 217, 37, 62, 143, 189, 125, 62, 106, 73, 111, 62, 140, 229, 59, 190, 58, 182, 71, 62, 205, 128, 165, 188, 239, 115, 174, 189, 83, 186, 91, 60, 149, 92, 52, 62, 153, 151, 34, 190, 243, 99, 111, 62, 91, 115, 227, 188, 202, 112, 243, 189, 210, 117, 95, 61, 73, 183, 155, 61, 182, 104, 77, 189, 209, 194, 241, 189, 14, 34, 58, 189, 190, 106, 222, 189, 85, 204, 99, 61, 26, 136, 136, 190, 208, 91, 90, 62, 144, 253, 110, 188, 237, 89, 38, 62, 181, 161, 143, 61, 10, 213, 96, 61, 57, 39, 162, 189, 169, 42, 26, 190, 155, 202, 90, 190, 17, 159, 216, 61, 234, 50, 6, 191, 166, 45, 151, 61, 46, 13, 35, 191, 236, 248, 93, 62, 223, 159, 120, 62, 7, 85, 193, 59, 166, 162, 33, 62, 57, 173, 96, 189, 151, 216, 100, 190, 185, 53, 229, 190, 117, 218, 122, 62, 199, 65, 198, 190, 147, 110, 111, 189, 84, 125, 172, 61, 1, 201, 94, 190, 212, 31, 50, 62, 235, 35, 228, 61, 76, 247, 178, 189, 200, 123, 70, 61, 4, 10, 186, 61, 135, 244, 180, 188, 77, 113, 1, 190, 162, 137, 37, 190, 201, 253, 218, 61, 28, 153, 162, 190, 72, 183, 49, 189, 48, 51, 119, 190, 168, 215, 193, 61, 163, 177, 18, 62, 188, 123, 6, 62, 159, 128, 25, 62, 221, 215, 25, 190, 29, 192, 218, 60, 0, 152, 233, 61, 219, 245, 5, 190, 47, 137, 177, 189, 184, 230, 185, 189, 57, 222, 138, 61, 51, 119, 174, 190, 209, 184, 95, 190, 29, 34, 10, 62, 55, 249, 182, 189, 9, 126, 96, 62, 90, 53, 29, 62, 20, 76, 175, 189, 99, 22, 147, 189, 185, 67, 185, 190, 14, 157, 4, 62, 97, 75, 52, 62, 48, 136, 143, 62, 218, 183, 230, 189, 206, 186, 145, 61, 227, 102, 169, 61, 202, 165, 181, 189, 83, 160, 47, 190, 188, 239, 222, 188, 174, 60, 90, 190, 249, 5, 62, 60, 3, 109, 67, 62, 43, 209, 20, 190, 234, 202, 196, 60, 64, 165, 240, 61, 57, 21, 15, 190, 72, 149, 143, 62, 119, 102, 131, 61, 77, 145, 132, 61, 136, 121, 27, 190, 25, 246, 163, 60, 46, 130, 70, 62, 7, 250, 162, 62, 111, 125, 160, 62, 54, 201, 92, 62, 192, 76, 117, 62, 151, 53, 7, 62, 8, 143, 233, 189, 126, 210, 112, 189, 35, 198, 107, 187, 86, 255, 230, 61, 20, 133, 159, 189, 175, 13, 35, 189, 247, 233, 4, 191, 176, 160, 196, 190, 184, 140, 221, 61, 213, 52, 237, 190, 246, 2, 141, 189, 246, 56, 230, 190, 220, 209, 43, 190, 149, 223, 255, 187, 8, 144, 154, 61, 16, 52, 182, 62, 151, 223, 149, 61, 209, 199, 142, 189, 116, 135, 112, 189, 10, 166, 40, 62, 43, 142, 152, 61, 61, 241, 159, 60, 4, 30, 60, 61, 78, 188, 182, 61, 177, 204, 21, 190, 114, 0, 129, 189, 175, 136, 244, 189, 183, 221, 21, 188, 94, 77, 119, 61, 202, 10, 77, 61, 196, 135, 232, 189, 147, 242, 17, 190, 138, 182, 0, 190, 40, 92, 198, 189, 114, 61, 184, 189, 15, 106, 50, 62, 24, 41, 29, 190, 211, 72, 21, 61, 4, 38, 29, 190, 209, 108, 245, 189, 66, 152, 209, 61, 34, 59, 53, 60, 242, 96, 113, 189, 234, 169, 14, 190, 122, 48, 3, 61, 250, 26, 32, 190, 31, 58, 14, 62, 128, 160, 3, 190, 139, 134, 192, 61, 95, 241, 58, 62, 132, 110, 144, 188, 91, 115, 167, 190, 95, 195, 254, 61, 178, 9, 1, 191, 139, 46, 141, 62, 152, 190, 147, 190, 111, 253, 49, 62, 114, 62, 210, 189, 80, 248, 179, 190, 153, 133, 180, 62, 202, 172, 63, 189, 230, 2, 21, 190, 224, 248, 71, 61, 138, 251, 124, 61, 60, 114, 136, 189, 202, 19, 53, 62, 179, 169, 106, 190, 185, 189, 139, 61, 115, 112, 154, 61, 189, 196, 1, 190, 58, 67, 99, 60, 125, 17, 142, 62, 54, 190, 90, 62, 56, 218, 25, 62, 163, 233, 199, 190, 57, 89, 4, 190, 36, 211, 82, 190, 143, 232, 1, 190, 227, 223, 64, 62, 39, 159, 64, 190, 227, 44, 22, 190, 22, 223, 164, 61, 142, 3, 251, 189, 179, 5, 40, 62, 123, 38, 234, 60, 212, 172, 14, 62, 78, 139, 76, 190, 132, 158, 238, 61, 238, 208, 235, 190, 155, 78, 242, 61, 44, 52, 112, 62, 52, 221, 221, 188, 13, 45, 205, 61, 30, 118, 134, 62, 33, 96, 131, 190, 110, 164, 221, 190, 184, 247, 110, 62, 81, 109, 77, 190, 17, 220, 7, 62, 113, 94, 192, 61, 182, 80, 76, 59, 124, 27, 166, 189, 184, 8, 89, 61, 224, 175, 14, 190, 41, 192, 3, 190, 201, 227, 40, 189, 152, 218, 46, 60, 9, 93, 84, 61, 229, 119, 89, 190, 199, 206, 182, 60, 79, 50, 102, 190, 182, 143, 214, 61, 45, 146, 1, 191, 157, 15, 208, 188, 210, 114, 27, 62, 193, 164, 46, 61, 96, 168, 159, 59, 20, 38, 22, 63, 223, 162, 107, 189, 0, 31, 118, 62, 54, 52, 170, 188, 9, 192, 220, 62, 107, 84, 175, 62, 143, 23, 18, 191, 45, 236, 153, 61, 24, 172, 248, 61, 143, 208, 176, 190, 254, 176, 222, 61, 116, 236, 236, 61, 172, 130, 154, 190, 89, 56, 192, 62, 25, 157, 214, 187, 168, 147, 74, 191, 146, 92, 10, 62, 88, 64, 191, 189, 180, 11, 147, 190, 124, 166, 226, 190, 160, 100, 254, 189, 196, 101, 170, 62, 182, 203, 185, 62, 140, 164, 206, 189, 2, 219, 142, 62, 110, 143, 29, 190, 153, 252, 235, 61, 22, 192, 10, 190, 100, 191, 19, 62, 120, 245, 213, 61, 171, 9, 0, 62, 205, 243, 141, 62, 183, 8, 22, 62, 54, 29, 96, 188, 250, 106, 185, 60, 252, 232, 186, 189, 93, 94, 161, 61, 201, 102, 138, 62, 77, 65, 66, 190, 246, 206, 138, 62, 14, 2, 129, 60, 169, 56, 20, 190, 194, 125, 158, 188, 104, 242, 107, 60, 11, 71, 162, 60, 163, 111, 34, 61, 45, 25, 152, 60, 173, 40, 245, 189, 101, 241, 246, 187, 2, 212, 6, 62, 36, 157, 213, 189, 246, 224, 121, 190, 144, 165, 1, 189, 225, 88, 114, 189, 72, 44, 120, 61, 35, 253, 180, 190, 191, 101, 27, 62, 92, 245, 157, 61, 86, 114, 112, 61, 170, 10, 227, 61, 188, 73, 236, 189, 236, 109, 236, 61, 86, 147, 232, 61, 53, 119, 243, 189, 147, 212, 45, 188, 65, 77, 231, 60, 131, 7, 168, 189, 216, 118, 168, 189, 48, 137, 216, 61, 183, 137, 90, 190, 166, 26, 243, 62, 97, 248, 50, 60, 160, 64, 107, 190, 202, 25, 28, 62, 213, 123, 156, 189, 88, 168, 143, 185, 152, 229, 107, 62, 139, 60, 31, 62, 23, 199, 144, 60, 99, 28, 25, 189, 248, 143, 75, 60, 35, 188, 21, 190, 59, 147, 239, 188, 227, 173, 128, 61, 137, 14, 96, 190, 203, 138, 100, 189, 52, 106, 142, 62, 50, 190, 18, 189, 48, 138, 156, 189, 179, 57, 72, 62, 102, 145, 123, 62, 156, 35, 25, 190, 6, 21, 152, 189, 46, 12, 205, 188, 190, 142, 58, 61, 254, 67, 91, 61, 13, 92, 178, 189, 122, 62, 146, 187, 243, 136, 103, 189, 134, 165, 88, 189, 3, 126, 1, 190, 45, 171, 33, 190, 156, 158, 129, 189, 189, 186, 232, 61, 42, 158, 16, 60, 110, 51, 16, 190, 130, 99, 195, 189, 169, 39, 207, 189, 241, 120, 16, 190, 105, 152, 52, 61, 186, 143, 133, 188, 116, 197, 126, 188, 192, 128, 149, 189, 143, 153, 147, 189, 57, 97, 45, 188, 230, 161, 153, 188, 224, 15, 48, 62, 65, 89, 4, 62, 185, 10, 146, 60, 32, 39, 41, 62, 251, 249, 9, 190, 202, 108, 226, 189, 16, 27, 226, 61, 245, 124, 186, 62, 88, 18, 199, 61, 229, 62, 153, 187, 5, 215, 65, 62, 247, 233, 108, 189, 155, 110, 94, 190, 68, 100, 61, 62, 89, 251, 33, 62, 142, 126, 230, 60, 74, 87, 63, 190, 199, 255, 47, 189, 197, 12, 216, 187, 111, 62, 100, 190, 186, 108, 168, 190, 147, 239, 81, 189, 161, 15, 4, 190, 108, 5, 168, 190, 0, 224, 206, 60, 112, 21, 26, 190, 158, 58, 219, 61, 12, 96, 148, 62, 45, 19, 130, 190, 229, 94, 72, 61, 175, 240, 16, 62, 63, 70, 199, 61, 170, 194, 29, 58, 110, 210, 142, 190, 179, 152, 150, 61, 83, 134, 16, 61, 243, 181, 206, 190, 203, 255, 200, 189, 87, 67, 44, 60, 200, 227, 60, 61, 143, 174, 116, 62, 226, 21, 214, 61, 113, 141, 196, 190, 149, 114, 161, 60, 243, 95, 17, 191, 127, 216, 126, 61, 71, 144, 7, 190, 253, 209, 44, 62, 117, 51, 67, 188, 192, 120, 199, 190, 237, 66, 129, 62, 64, 153, 233, 189, 217, 214, 51, 189, 176, 172, 115, 189, 236, 78, 166, 61, 42, 16, 29, 190, 69, 34, 82, 62, 82, 254, 184, 190, 53, 250, 201, 61, 134, 37, 38, 62, 223, 192, 160, 190, 54, 220, 109, 62, 179, 68, 73, 62, 36, 46, 59, 62, 205, 172, 74, 62, 155, 108, 241, 190, 92, 177, 0, 61, 71, 170, 82, 190, 25, 192, 145, 190, 102, 173, 133, 62, 128, 67, 184, 189, 106, 155, 33, 62, 17, 174, 58, 62, 109, 175, 167, 61, 122, 60, 79, 62, 91, 223, 146, 189, 14, 12, 155, 188, 136, 126, 10, 62, 42, 243, 56, 59, 115, 24, 96, 189, 79, 178, 42, 190, 141, 169, 145, 189, 129, 7, 70, 62, 9, 15, 157, 190, 218, 89, 65, 61, 160, 165, 137, 62, 68, 62, 65, 190, 0, 179, 206, 61, 124, 228, 196, 188, 2, 242, 179, 59, 197, 164, 165, 61, 76, 207, 3, 62, 67, 26, 215, 188, 67, 79, 88, 188, 44, 3, 7, 62, 117, 137, 224, 61, 17, 129, 143, 62, 147, 162, 15, 62, 222, 11, 208, 61, 191, 191, 85, 59, 184, 86, 139, 60, 33, 82, 250, 61, 183, 10, 42, 190, 136, 254, 176, 61, 92, 90, 150, 190, 193, 236, 7, 190, 150, 21, 12, 190, 63, 43, 15, 190, 225, 136, 12, 190, 46, 59, 184, 189, 141, 107, 46, 190, 171, 89, 182, 61, 229, 135, 32, 190, 8, 233, 132, 190, 118, 42, 161, 189, 105, 62, 207, 189, 203, 170, 46, 187, 38, 166, 232, 189, 214, 25, 204, 61, 162, 11, 166, 189, 27, 216, 67, 190, 9, 254, 100, 188, 156, 233, 113, 61, 48, 74, 15, 190, 129, 73, 98, 189, 89, 7, 153, 61, 69, 116, 68, 190, 100, 49, 233, 189, 109, 165, 74, 60, 238, 35, 110, 61, 239, 235, 42, 190, 122, 157, 128, 189, 19, 31, 163, 190, 246, 153, 129, 61, 141, 113, 60, 190, 51, 46, 15, 190, 84, 35, 136, 190, 30, 239, 180, 61, 96, 204, 254, 61, 162, 229, 47, 188, 1, 114, 209, 62, 192, 247, 174, 188, 133, 126, 180, 61, 51, 0, 50, 62, 148, 213, 45, 62, 37, 173, 156, 62, 23, 212, 238, 190, 80, 22, 12, 62, 210, 9, 108, 60, 248, 223, 61, 190, 84, 138, 139, 61, 186, 200, 51, 62, 139, 192, 178, 190, 103, 118, 168, 62, 8, 201, 141, 189, 191, 199, 49, 189, 157, 151, 41, 62, 17, 102, 86, 189, 179, 63, 157, 190, 30, 37, 6, 190, 7, 244, 69, 190, 153, 255, 52, 62, 0, 33, 189, 61, 2, 182, 12, 190, 175, 81, 186, 61, 61, 43, 140, 60, 11, 4, 185, 61, 118, 98, 143, 62, 201, 176, 245, 61, 194, 218, 200, 61, 141, 95, 161, 190, 156, 101, 11, 62, 136, 149, 21, 191, 45, 122, 198, 61, 195, 221, 95, 190, 254, 254, 101, 61, 37, 57, 87, 189, 65, 86, 171, 190, 200, 40, 166, 62, 212, 39, 152, 61, 161, 129, 220, 61, 76, 36, 151, 61, 72, 10, 24, 60, 140, 248, 81, 190, 195, 5, 8, 62, 202, 188, 158, 190, 118, 103, 131, 61, 199, 255, 53, 62, 134, 118, 94, 190, 205, 240, 216, 61, 141, 232, 89, 62, 30, 220, 133, 61, 46, 251, 76, 62, 63, 48, 217, 190, 86, 230, 29, 189, 226, 170, 191, 190, 22, 230, 88, 190, 85, 118, 57, 62, 72, 88, 164, 190, 133, 224, 159, 190, 199, 33, 33, 190, 24, 109, 242, 60, 179, 132, 85, 62, 103, 201, 92, 62, 224, 18, 11, 63, 138, 180, 108, 189, 65, 21, 52, 61, 26, 94, 30, 190, 225, 2, 91, 62, 23, 107, 202, 62, 216, 60, 132, 190, 88, 224, 38, 61, 161, 130, 30, 62, 143, 37, 139, 188, 45, 243, 4, 62, 181, 172, 130, 189, 14, 204, 168, 190, 82, 5, 168, 62, 188, 0, 51, 190, 191, 6, 74, 190, 147, 229, 22, 190, 91, 209, 42, 190, 68, 108, 139, 190, 82, 96, 171, 189, 71, 46, 243, 188, 41, 231, 86, 61, 85, 138, 172, 62, 218, 235, 176, 190, 247, 193, 40, 62, 224, 93, 30, 189, 21, 105, 117, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {210, 63, 251, 61, 221, 99, 148, 60, 252, 180, 219, 61, 6, 13, 138, 188, 63, 209, 35, 62, 254, 3, 72, 189, 219, 37, 100, 62, 73, 40, 20, 60, 176, 74, 24, 62, 145, 180, 161, 186, 107, 53, 245, 61, 91, 28, 181, 189, 62, 88, 36, 62, 47, 75, 40, 190, 33, 202, 83, 61, 12, 90, 211, 61, 210, 154, 24, 60, 81, 144, 19, 61, 79, 150, 152, 189, 121, 222, 112, 62, 38, 217, 17, 190, 241, 249, 100, 61, 19, 204, 196, 61, 237, 209, 26, 62, 169, 48, 27, 190, 38, 59, 17, 187, 69, 203, 146, 189, 250, 219, 29, 190, 56, 98, 229, 61, 179, 27, 4, 62, 129, 22, 54, 60, 219, 193, 37, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 181, 77, 62, 137, 60, 1, 63, 171, 65, 22, 191, 207, 119, 10, 191, 41, 220, 4, 191, 75, 159, 235, 189, 59, 61, 130, 190, 92, 254, 56, 62, 176, 197, 4, 63, 113, 252, 92, 61, 155, 209, 105, 62, 199, 52, 107, 62, 215, 156, 187, 62, 144, 60, 207, 190, 184, 50, 188, 189, 251, 37, 154, 190, 68, 211, 164, 190, 24, 119, 192, 62, 253, 76, 51, 190, 132, 233, 189, 62, 43, 7, 131, 190, 5, 40, 219, 190, 9, 103, 190, 189, 136, 161, 13, 62, 134, 54, 6, 62, 194, 79, 157, 190, 218, 1, 228, 62, 214, 79, 72, 190, 174, 191, 21, 58, 37, 191, 183, 190, 104, 162, 235, 62, 109, 162, 150, 190, 196, 249, 143, 61, 96, 120, 44, 62, 132, 231, 136, 61, 23, 178, 223, 189, 249, 108, 0, 190, 239, 203, 9, 62, 179, 120, 98, 190, 148, 6, 182, 189, 160, 174, 0, 190, 93, 134, 125, 190, 255, 253, 46, 190, 183, 23, 156, 62, 31, 190, 145, 189, 36, 106, 213, 61, 228, 34, 9, 190, 13, 97, 162, 189, 1, 37, 154, 61, 187, 30, 18, 61, 117, 70, 145, 61, 198, 224, 229, 188, 129, 62, 51, 189, 208, 202, 213, 61, 129, 226, 76, 190, 214, 31, 33, 190, 73, 56, 150, 189, 161, 217, 185, 61, 202, 136, 215, 61, 81, 247, 132, 61, 152, 105, 39, 62, 107, 236, 19, 62, 221, 121, 251, 60, 200, 212, 217, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 143, 235, 59, 254, 31, 141, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {112, 171, 5, 190, 137, 153, 236, 191, 47, 52, 194, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {182, 255, 37, 64, 212, 35, 64, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0021/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}