// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {82, 108, 235, 62, 159, 89, 19, 62, 161, 248, 38, 191, 16, 166, 241, 61, 35, 9, 36, 63, 154, 241, 44, 63, 20, 21, 145, 62, 74, 111, 196, 61, 19, 15, 9, 62, 174, 218, 27, 190, 18, 192, 15, 191, 183, 133, 172, 62, 131, 14, 53, 191, 220, 131, 19, 191, 35, 37, 137, 60, 29, 182, 15, 190, 131, 156, 40, 63, 1, 118, 0, 191, 21, 72, 90, 62, 215, 101, 60, 191, 150, 148, 57, 62, 136, 229, 158, 190, 227, 196, 42, 191, 38, 151, 209, 62, 108, 204, 97, 191, 65, 83, 56, 191, 148, 105, 100, 60, 119, 118, 215, 60, 177, 11, 9, 62, 92, 63, 53, 191, 233, 204, 59, 62, 213, 235, 69, 63, 88, 204, 14, 190, 23, 162, 120, 188, 240, 117, 66, 63, 68, 182, 151, 190, 98, 0, 121, 62, 123, 35, 51, 63, 52, 66, 224, 189, 104, 190, 103, 191, 41, 124, 16, 63, 108, 183, 251, 188, 108, 166, 69, 63, 38, 31, 110, 191, 149, 43, 68, 190, 147, 10, 175, 190, 43, 7, 150, 191, 201, 155, 166, 190, 155, 178, 239, 62, 46, 179, 169, 63, 68, 188, 186, 62, 131, 213, 155, 62, 236, 69, 111, 191, 206, 112, 139, 62, 22, 80, 1, 191, 226, 92, 58, 62, 41, 71, 36, 191, 52, 36, 206, 190, 147, 160, 221, 63, 35, 184, 199, 62, 68, 158, 14, 63, 143, 181, 118, 191, 228, 115, 244, 190, 118, 8, 31, 63, 152, 197, 131, 61, 86, 252, 19, 63, 20, 246, 14, 62, 173, 176, 51, 63, 106, 48, 232, 62, 12, 251, 132, 190, 180, 150, 35, 191, 88, 97, 31, 63, 221, 44, 106, 190, 62, 25, 5, 63, 116, 79, 252, 190, 119, 198, 159, 190, 169, 73, 184, 62, 81, 121, 64, 63, 65, 53, 10, 62, 68, 147, 137, 63, 137, 30, 150, 62, 151, 217, 115, 63, 116, 144, 22, 191, 225, 174, 64, 62, 28, 27, 2, 63, 74, 228, 235, 62, 58, 172, 102, 62, 11, 63, 73, 62, 98, 24, 143, 63, 122, 118, 175, 62, 210, 191, 159, 189, 23, 208, 141, 191, 244, 127, 215, 190, 113, 172, 59, 61, 28, 32, 231, 190, 152, 29, 191, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 91, 132, 190, 21, 49, 230, 62, 228, 63, 207, 62, 129, 78, 77, 62, 207, 42, 187, 62, 157, 145, 14, 191, 231, 167, 2, 190, 108, 159, 199, 189, 163, 165, 9, 63, 146, 236, 241, 62, 86, 25, 255, 189, 187, 116, 49, 189, 87, 81, 13, 63, 80, 242, 52, 190, 226, 11, 175, 61, 197, 157, 216, 62, 15, 91, 228, 62, 156, 29, 48, 62, 25, 163, 248, 190, 95, 185, 103, 189, 0, 112, 212, 190, 254, 169, 1, 191, 44, 111, 7, 63, 71, 98, 249, 189, 83, 96, 207, 190, 73, 235, 27, 62, 177, 75, 197, 61, 51, 52, 145, 62, 196, 65, 203, 190, 92, 16, 91, 62, 57, 86, 248, 190, 243, 98, 31, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 197, 77, 62, 37, 188, 76, 61, 138, 225, 117, 189, 120, 4, 249, 62, 199, 239, 154, 61, 219, 218, 17, 62, 196, 214, 139, 188, 20, 15, 101, 63, 221, 253, 80, 190, 166, 97, 9, 62, 190, 215, 106, 62, 228, 222, 185, 62, 91, 231, 40, 190, 154, 220, 61, 187, 175, 239, 200, 189, 222, 9, 37, 189, 120, 25, 157, 190, 21, 134, 19, 190, 91, 60, 10, 60, 248, 134, 144, 61, 208, 215, 85, 61, 227, 242, 37, 185, 240, 217, 184, 190, 99, 33, 143, 62, 243, 86, 172, 188, 19, 168, 233, 190, 249, 134, 135, 190, 144, 189, 174, 190, 51, 151, 247, 189, 69, 120, 173, 190, 129, 200, 119, 189, 69, 213, 18, 58, 139, 12, 69, 62, 4, 159, 184, 61, 62, 231, 171, 61, 81, 186, 104, 190, 116, 232, 15, 189, 44, 231, 247, 190, 73, 7, 24, 189, 231, 38, 171, 190, 130, 116, 3, 61, 235, 146, 6, 190, 149, 202, 2, 191, 227, 202, 163, 62, 142, 205, 99, 62, 227, 57, 215, 61, 150, 52, 64, 62, 131, 93, 44, 189, 169, 69, 178, 190, 27, 119, 32, 190, 47, 120, 171, 190, 33, 3, 16, 63, 168, 64, 14, 63, 82, 244, 143, 190, 63, 127, 2, 62, 116, 157, 119, 62, 151, 166, 70, 62, 24, 28, 202, 62, 202, 51, 228, 190, 255, 139, 167, 62, 48, 163, 84, 191, 25, 143, 197, 190, 156, 252, 50, 191, 73, 160, 0, 190, 172, 2, 111, 190, 191, 99, 161, 190, 111, 183, 26, 189, 47, 151, 223, 189, 122, 160, 1, 188, 225, 118, 21, 190, 189, 101, 61, 59, 126, 202, 171, 189, 128, 75, 162, 62, 254, 189, 40, 62, 196, 121, 157, 190, 223, 76, 61, 190, 187, 70, 130, 190, 19, 47, 197, 190, 206, 141, 134, 190, 250, 254, 74, 62, 221, 202, 109, 190, 157, 217, 125, 61, 48, 235, 123, 189, 201, 254, 67, 191, 25, 54, 54, 189, 144, 17, 33, 190, 206, 234, 139, 190, 36, 112, 170, 190, 103, 13, 148, 190, 222, 54, 69, 190, 186, 212, 21, 190, 128, 103, 26, 191, 240, 13, 227, 188, 66, 104, 180, 189, 175, 220, 45, 190, 47, 139, 8, 62, 85, 153, 81, 190, 70, 54, 203, 191, 191, 55, 135, 190, 120, 194, 235, 61, 36, 243, 191, 62, 53, 169, 57, 61, 221, 9, 240, 188, 113, 214, 251, 62, 75, 33, 165, 62, 98, 40, 118, 62, 2, 64, 168, 62, 53, 164, 192, 190, 22, 103, 36, 61, 109, 228, 63, 62, 126, 35, 175, 190, 116, 13, 156, 62, 31, 254, 32, 62, 195, 160, 130, 190, 88, 43, 175, 62, 83, 75, 98, 191, 54, 212, 33, 188, 132, 80, 207, 60, 17, 158, 141, 191, 201, 35, 75, 191, 234, 127, 141, 190, 3, 231, 44, 191, 95, 195, 185, 189, 67, 255, 117, 61, 124, 219, 1, 190, 90, 245, 178, 62, 215, 204, 167, 59, 86, 18, 180, 61, 154, 157, 169, 190, 148, 194, 190, 190, 254, 188, 70, 62, 100, 36, 63, 61, 0, 91, 136, 62, 16, 50, 153, 62, 225, 79, 32, 189, 43, 241, 239, 61, 14, 183, 25, 62, 175, 248, 148, 62, 13, 120, 145, 62, 29, 212, 39, 190, 255, 249, 139, 62, 226, 98, 42, 187, 139, 86, 32, 191, 239, 163, 130, 189, 137, 48, 157, 62, 192, 44, 52, 190, 237, 122, 81, 61, 161, 117, 41, 191, 107, 166, 8, 191, 126, 30, 124, 62, 232, 176, 132, 189, 122, 34, 209, 190, 41, 54, 131, 190, 149, 109, 201, 190, 117, 82, 247, 62, 104, 120, 180, 189, 4, 57, 76, 188, 250, 1, 133, 62, 124, 182, 4, 190, 77, 103, 50, 62, 185, 166, 131, 190, 116, 178, 83, 190, 145, 233, 28, 61, 113, 75, 10, 62, 11, 248, 73, 189, 49, 113, 71, 62, 157, 80, 158, 190, 122, 188, 176, 189, 58, 54, 175, 190, 210, 134, 26, 62, 67, 165, 5, 62, 31, 96, 99, 62, 142, 217, 160, 62, 209, 4, 41, 62, 1, 86, 224, 190, 26, 26, 20, 190, 9, 249, 57, 62, 136, 138, 132, 189, 182, 82, 25, 190, 162, 188, 16, 62, 108, 152, 32, 191, 32, 157, 167, 59, 251, 48, 93, 190, 141, 63, 15, 190, 202, 210, 249, 61, 207, 65, 2, 189, 115, 55, 135, 62, 90, 175, 131, 61, 142, 17, 98, 61, 208, 73, 116, 62, 40, 134, 139, 190, 97, 139, 81, 190, 142, 213, 178, 189, 120, 177, 216, 188, 103, 168, 234, 61, 225, 135, 22, 62, 146, 82, 200, 189, 91, 49, 157, 62, 139, 20, 56, 189, 33, 27, 45, 189, 166, 103, 78, 189, 255, 158, 2, 189, 187, 254, 178, 62, 242, 129, 165, 190, 8, 158, 91, 62, 217, 18, 145, 62, 39, 236, 149, 190, 244, 89, 131, 190, 235, 175, 187, 61, 147, 192, 248, 188, 201, 142, 104, 62, 193, 96, 6, 191, 168, 113, 255, 190, 208, 101, 107, 189, 109, 192, 194, 189, 153, 93, 36, 190, 58, 24, 203, 189, 104, 198, 5, 62, 216, 19, 88, 61, 124, 243, 19, 62, 18, 21, 224, 190, 91, 9, 148, 62, 236, 233, 152, 190, 63, 187, 2, 62, 191, 252, 26, 61, 197, 224, 184, 189, 95, 79, 134, 61, 91, 128, 22, 191, 174, 223, 254, 190, 126, 50, 109, 190, 249, 144, 97, 62, 44, 15, 29, 191, 72, 46, 130, 190, 248, 162, 105, 61, 61, 119, 41, 189, 61, 18, 30, 62, 0, 1, 81, 62, 141, 130, 184, 190, 196, 82, 174, 62, 84, 66, 41, 189, 92, 135, 175, 61, 226, 128, 199, 61, 210, 14, 133, 61, 157, 170, 48, 62, 86, 102, 172, 62, 147, 71, 136, 190, 245, 237, 37, 190, 247, 247, 221, 190, 122, 114, 48, 62, 9, 196, 121, 190, 170, 70, 185, 62, 15, 233, 242, 61, 42, 152, 24, 63, 88, 243, 55, 62, 188, 54, 68, 189, 153, 58, 20, 59, 180, 197, 36, 190, 195, 231, 122, 62, 196, 107, 163, 188, 52, 131, 176, 190, 166, 140, 112, 62, 55, 221, 236, 190, 28, 254, 140, 61, 100, 154, 70, 190, 228, 101, 211, 61, 199, 229, 224, 190, 195, 183, 80, 60, 16, 170, 27, 63, 59, 201, 82, 61, 255, 17, 254, 62, 82, 247, 91, 62, 155, 146, 80, 190, 207, 12, 150, 188, 216, 226, 66, 189, 133, 91, 15, 191, 191, 155, 161, 62, 110, 136, 140, 60, 177, 177, 24, 189, 134, 168, 217, 61, 52, 101, 90, 62, 163, 26, 230, 62, 98, 253, 161, 62, 113, 26, 82, 190, 223, 80, 126, 190, 165, 211, 8, 188, 47, 78, 130, 190, 247, 19, 146, 60, 160, 238, 136, 191, 33, 19, 50, 62, 23, 142, 25, 60, 1, 185, 57, 61, 253, 109, 210, 189, 53, 207, 125, 62, 252, 25, 146, 61, 243, 137, 245, 190, 158, 242, 171, 60, 68, 245, 96, 61, 150, 8, 38, 190, 34, 29, 153, 62, 124, 236, 16, 190, 66, 167, 151, 61, 50, 105, 117, 62, 106, 116, 162, 62, 92, 234, 137, 190, 20, 212, 83, 62, 6, 208, 254, 189, 62, 69, 70, 189, 21, 152, 128, 62, 122, 128, 42, 62, 59, 0, 142, 190, 173, 50, 46, 62, 168, 89, 210, 189, 218, 74, 197, 189, 163, 165, 62, 62, 122, 127, 14, 190, 108, 94, 232, 62, 4, 242, 233, 190, 62, 181, 24, 60, 30, 149, 253, 190, 221, 72, 97, 189, 135, 7, 203, 188, 139, 98, 128, 62, 205, 25, 128, 62, 186, 160, 167, 190, 39, 233, 142, 62, 84, 140, 1, 191, 185, 71, 135, 62, 212, 244, 92, 189, 117, 250, 99, 62, 216, 9, 30, 189, 232, 58, 27, 190, 28, 96, 148, 62, 154, 139, 196, 189, 156, 20, 174, 58, 242, 1, 160, 62, 198, 105, 247, 188, 48, 31, 158, 189, 249, 19, 145, 62, 192, 117, 152, 190, 234, 122, 0, 62, 75, 167, 93, 61, 26, 182, 217, 189, 154, 200, 10, 62, 67, 195, 89, 62, 32, 248, 59, 62, 86, 41, 117, 62, 83, 52, 131, 189, 224, 70, 199, 188, 127, 94, 227, 189, 39, 99, 175, 61, 139, 104, 160, 62, 235, 117, 158, 61, 73, 219, 201, 61, 116, 30, 187, 61, 187, 247, 39, 62, 31, 197, 140, 190, 51, 162, 78, 191, 4, 213, 168, 61, 197, 17, 221, 190, 205, 218, 226, 190, 121, 64, 146, 190, 0, 178, 7, 189, 153, 216, 243, 62, 167, 138, 155, 188, 110, 204, 27, 62, 111, 125, 38, 190, 140, 168, 35, 189, 232, 64, 75, 189, 126, 177, 44, 60, 24, 255, 243, 190, 26, 222, 200, 61, 155, 208, 39, 62, 155, 164, 0, 61, 126, 126, 15, 189, 215, 107, 56, 190, 253, 9, 242, 190, 147, 241, 31, 190, 156, 177, 178, 189, 128, 50, 185, 62, 233, 96, 89, 190, 255, 151, 7, 63, 38, 61, 5, 62, 80, 185, 81, 62, 220, 6, 165, 188, 27, 50, 54, 189, 109, 199, 148, 189, 164, 248, 95, 190, 113, 85, 180, 190, 254, 32, 228, 61, 56, 76, 132, 190, 22, 95, 139, 189, 153, 155, 145, 190, 141, 27, 56, 62, 179, 63, 46, 190, 121, 196, 71, 190, 248, 228, 214, 62, 158, 22, 30, 62, 58, 38, 130, 62, 221, 175, 28, 190, 198, 69, 213, 60, 222, 162, 60, 191, 238, 195, 126, 189, 9, 200, 70, 190, 47, 54, 165, 61, 228, 123, 136, 190, 165, 116, 96, 190, 188, 133, 111, 61, 254, 63, 41, 62, 79, 86, 149, 62, 73, 160, 93, 60, 123, 10, 111, 191, 39, 136, 165, 189, 16, 121, 56, 190, 163, 55, 74, 191, 205, 235, 32, 62, 201, 52, 232, 189, 254, 67, 53, 62, 225, 114, 177, 189, 89, 47, 166, 189, 192, 215, 247, 190, 218, 255, 161, 190, 8, 239, 52, 190, 31, 175, 188, 190, 36, 78, 115, 190, 39, 127, 29, 190, 183, 3, 158, 61, 241, 234, 32, 62, 50, 97, 211, 59, 89, 234, 94, 61, 237, 147, 57, 190, 94, 246, 234, 188, 145, 144, 74, 190, 100, 210, 41, 62, 231, 247, 38, 191, 144, 143, 43, 190, 134, 92, 247, 61, 207, 33, 165, 61, 60, 103, 165, 190, 100, 129, 204, 61, 236, 161, 194, 190, 91, 82, 157, 60, 95, 207, 109, 190, 206, 153, 75, 187, 144, 36, 42, 62, 208, 23, 171, 190, 64, 19, 36, 62, 45, 112, 147, 61, 45, 226, 73, 60, 47, 2, 205, 189, 88, 19, 203, 188, 55, 119, 217, 188, 210, 74, 216, 189, 11, 164, 48, 61, 52, 37, 149, 62, 150, 139, 229, 189, 152, 5, 140, 61, 212, 75, 46, 62, 90, 245, 82, 62, 156, 203, 85, 62, 174, 172, 77, 190, 62, 91, 73, 62, 223, 29, 94, 189, 190, 38, 115, 190, 51, 63, 148, 189, 183, 43, 125, 62, 50, 176, 58, 189, 208, 43, 95, 62, 191, 66, 138, 190, 228, 3, 124, 190, 133, 17, 56, 62, 151, 45, 216, 61, 83, 38, 89, 61, 229, 154, 238, 189, 43, 28, 80, 188, 223, 55, 6, 190, 248, 141, 27, 62, 30, 86, 144, 190, 179, 142, 124, 62, 43, 119, 148, 189, 31, 95, 184, 61, 0, 107, 176, 60, 99, 84, 235, 186, 135, 203, 110, 189, 52, 49, 98, 190, 240, 223, 145, 190, 185, 172, 175, 61, 120, 74, 70, 191, 173, 236, 253, 59, 234, 164, 175, 191, 148, 220, 89, 62, 219, 144, 143, 62, 172, 213, 68, 61, 210, 240, 82, 62, 239, 186, 136, 61, 206, 10, 234, 190, 221, 114, 36, 191, 42, 147, 90, 62, 15, 64, 203, 190, 244, 96, 3, 190, 35, 126, 125, 61, 16, 69, 2, 191, 19, 145, 86, 62, 61, 234, 68, 61, 174, 123, 205, 189, 80, 30, 90, 61, 125, 195, 82, 61, 238, 222, 142, 189, 13, 45, 54, 189, 199, 208, 211, 189, 241, 170, 105, 61, 106, 25, 39, 191, 37, 186, 2, 190, 121, 112, 136, 190, 49, 106, 236, 61, 180, 53, 71, 62, 220, 38, 243, 61, 23, 216, 127, 62, 208, 222, 67, 62, 19, 168, 72, 61, 15, 154, 131, 61, 48, 167, 107, 189, 162, 149, 37, 190, 94, 185, 123, 189, 60, 172, 192, 62, 82, 73, 3, 190, 173, 43, 89, 189, 59, 212, 218, 61, 33, 61, 254, 188, 11, 244, 132, 62, 123, 98, 68, 62, 57, 0, 93, 190, 248, 4, 8, 190, 229, 31, 64, 191, 163, 248, 62, 62, 147, 23, 80, 62, 1, 63, 141, 62, 147, 198, 102, 188, 188, 36, 191, 61, 146, 52, 180, 61, 161, 239, 34, 60, 246, 89, 35, 60, 185, 47, 71, 58, 246, 187, 98, 191, 220, 68, 70, 190, 181, 179, 61, 62, 167, 217, 37, 190, 143, 106, 91, 62, 61, 229, 199, 62, 166, 113, 131, 190, 162, 67, 139, 62, 210, 248, 140, 62, 1, 244, 145, 62, 105, 204, 125, 190, 40, 211, 235, 60, 107, 105, 96, 62, 82, 48, 144, 62, 196, 90, 166, 62, 91, 152, 184, 61, 111, 120, 204, 62, 126, 50, 189, 61, 175, 125, 161, 190, 33, 30, 53, 62, 8, 102, 171, 188, 116, 98, 114, 62, 94, 151, 247, 188, 221, 43, 3, 191, 173, 110, 218, 190, 89, 50, 115, 189, 105, 249, 154, 61, 241, 131, 33, 191, 98, 127, 12, 191, 255, 230, 157, 190, 106, 68, 6, 191, 7, 72, 142, 190, 240, 44, 204, 60, 179, 204, 190, 62, 151, 223, 149, 61, 209, 199, 142, 189, 116, 135, 112, 189, 10, 166, 40, 62, 43, 142, 152, 61, 61, 241, 159, 60, 4, 30, 60, 61, 78, 188, 182, 61, 177, 204, 21, 190, 114, 0, 129, 189, 175, 136, 244, 189, 183, 221, 21, 188, 94, 77, 119, 61, 202, 10, 77, 61, 196, 135, 232, 189, 147, 242, 17, 190, 138, 182, 0, 190, 40, 92, 198, 189, 114, 61, 184, 189, 15, 106, 50, 62, 24, 41, 29, 190, 211, 72, 21, 61, 4, 38, 29, 190, 209, 108, 245, 189, 66, 152, 209, 61, 34, 59, 53, 60, 242, 96, 113, 189, 234, 169, 14, 190, 122, 48, 3, 61, 250, 26, 32, 190, 31, 58, 14, 62, 128, 160, 3, 190, 38, 152, 238, 59, 62, 168, 9, 62, 160, 36, 32, 61, 233, 136, 162, 190, 193, 160, 41, 62, 28, 74, 30, 191, 162, 79, 149, 62, 50, 0, 126, 190, 105, 249, 53, 62, 43, 153, 129, 189, 103, 172, 142, 190, 131, 79, 146, 62, 191, 6, 164, 61, 142, 192, 131, 189, 222, 185, 252, 61, 122, 46, 23, 61, 63, 90, 27, 190, 159, 82, 94, 62, 130, 165, 165, 190, 200, 152, 198, 61, 185, 36, 94, 189, 125, 41, 88, 190, 96, 197, 145, 188, 57, 198, 130, 62, 203, 226, 171, 61, 108, 194, 191, 61, 217, 6, 16, 191, 222, 109, 149, 189, 150, 136, 36, 191, 32, 202, 132, 190, 218, 180, 230, 60, 69, 83, 98, 190, 198, 23, 57, 190, 99, 243, 57, 61, 214, 184, 94, 61, 12, 255, 144, 61, 198, 24, 107, 189, 175, 135, 9, 62, 144, 189, 160, 190, 239, 223, 24, 189, 30, 42, 152, 191, 198, 203, 6, 62, 251, 233, 152, 62, 28, 106, 14, 61, 165, 168, 106, 62, 5, 170, 175, 62, 2, 190, 143, 190, 187, 228, 38, 191, 149, 119, 131, 62, 227, 228, 33, 190, 207, 51, 165, 61, 118, 37, 208, 187, 173, 121, 153, 190, 236, 98, 86, 189, 44, 33, 210, 60, 141, 219, 98, 190, 150, 201, 212, 189, 2, 154, 6, 190, 153, 159, 242, 188, 74, 88, 138, 62, 108, 177, 29, 190, 117, 18, 111, 58, 52, 204, 9, 191, 169, 111, 108, 60, 89, 135, 251, 190, 157, 93, 156, 189, 163, 94, 122, 62, 194, 136, 243, 61, 5, 232, 37, 189, 183, 24, 40, 63, 213, 66, 149, 61, 123, 81, 98, 62, 236, 239, 223, 189, 107, 161, 213, 62, 37, 135, 188, 62, 91, 188, 255, 190, 78, 44, 181, 61, 67, 175, 23, 62, 15, 25, 66, 191, 41, 177, 133, 61, 20, 5, 49, 62, 123, 38, 35, 190, 211, 171, 204, 62, 237, 216, 150, 190, 84, 232, 134, 191, 179, 207, 107, 62, 194, 79, 16, 190, 150, 10, 97, 190, 106, 68, 187, 190, 114, 53, 40, 190, 215, 91, 170, 62, 7, 74, 6, 63, 47, 242, 67, 61, 92, 159, 157, 62, 54, 99, 152, 190, 99, 238, 140, 61, 87, 19, 188, 189, 147, 97, 9, 62, 115, 225, 149, 62, 33, 105, 154, 59, 62, 164, 37, 62, 126, 12, 89, 62, 141, 159, 182, 189, 142, 145, 56, 190, 235, 118, 90, 190, 250, 47, 223, 61, 57, 96, 171, 62, 30, 216, 40, 190, 108, 199, 186, 62, 33, 233, 192, 59, 194, 34, 239, 189, 104, 196, 227, 189, 102, 200, 191, 61, 5, 193, 228, 60, 154, 75, 187, 61, 187, 102, 169, 190, 158, 62, 18, 190, 52, 126, 40, 189, 164, 22, 16, 62, 245, 113, 124, 190, 253, 115, 54, 190, 230, 174, 38, 190, 108, 196, 17, 190, 143, 130, 152, 62, 188, 112, 229, 190, 21, 66, 47, 62, 42, 35, 157, 61, 140, 76, 111, 61, 138, 14, 220, 61, 120, 48, 124, 190, 123, 117, 210, 62, 104, 239, 218, 62, 134, 117, 24, 190, 210, 78, 96, 188, 79, 157, 103, 62, 132, 208, 156, 62, 167, 172, 161, 189, 68, 193, 8, 62, 147, 194, 209, 189, 89, 241, 231, 62, 128, 64, 188, 61, 137, 237, 181, 190, 0, 238, 140, 62, 37, 188, 232, 189, 223, 154, 247, 189, 171, 26, 225, 62, 80, 139, 3, 62, 16, 103, 36, 190, 219, 33, 170, 188, 88, 115, 124, 190, 16, 222, 29, 190, 80, 108, 254, 61, 62, 154, 20, 61, 189, 154, 134, 190, 78, 205, 44, 191, 8, 108, 223, 62, 227, 245, 24, 191, 182, 113, 167, 190, 108, 176, 187, 61, 169, 7, 132, 62, 156, 35, 25, 190, 6, 21, 152, 189, 46, 12, 205, 188, 190, 142, 58, 61, 254, 67, 91, 61, 13, 92, 178, 189, 122, 62, 146, 187, 243, 136, 103, 189, 134, 165, 88, 189, 3, 126, 1, 190, 45, 171, 33, 190, 156, 158, 129, 189, 189, 186, 232, 61, 42, 158, 16, 60, 110, 51, 16, 190, 130, 99, 195, 189, 169, 39, 207, 189, 241, 120, 16, 190, 105, 152, 52, 61, 186, 143, 133, 188, 116, 197, 126, 188, 192, 128, 149, 189, 143, 153, 147, 189, 57, 97, 45, 188, 230, 161, 153, 188, 224, 15, 48, 62, 65, 89, 4, 62, 185, 10, 146, 60, 32, 39, 41, 62, 251, 249, 9, 190, 202, 108, 226, 189, 16, 27, 226, 61, 168, 100, 229, 62, 13, 169, 92, 189, 221, 85, 201, 189, 179, 2, 215, 61, 194, 156, 66, 190, 27, 233, 81, 190, 54, 85, 86, 62, 210, 180, 115, 61, 197, 153, 72, 189, 69, 46, 22, 190, 22, 55, 15, 190, 11, 170, 126, 60, 119, 251, 120, 190, 208, 179, 74, 191, 17, 83, 6, 62, 134, 222, 240, 189, 145, 40, 46, 191, 34, 150, 89, 61, 155, 117, 235, 189, 80, 90, 64, 189, 245, 250, 223, 62, 101, 245, 221, 190, 26, 187, 3, 190, 102, 4, 164, 61, 38, 106, 20, 62, 251, 172, 70, 190, 169, 223, 164, 190, 234, 233, 108, 62, 147, 163, 15, 61, 245, 173, 24, 191, 172, 95, 77, 60, 130, 202, 149, 61, 204, 185, 197, 188, 248, 22, 64, 62, 116, 171, 27, 62, 158, 99, 183, 190, 96, 45, 110, 61, 87, 167, 37, 191, 162, 50, 144, 61, 11, 193, 130, 189, 95, 218, 36, 62, 43, 63, 57, 61, 50, 71, 6, 190, 18, 28, 156, 62, 48, 205, 166, 61, 222, 152, 228, 61, 164, 92, 61, 61, 144, 93, 11, 61, 254, 234, 131, 190, 152, 241, 107, 62, 32, 243, 237, 190, 120, 7, 80, 62, 216, 27, 231, 60, 54, 181, 203, 190, 214, 225, 71, 62, 169, 144, 61, 62, 23, 56, 152, 61, 174, 112, 35, 62, 17, 161, 35, 191, 202, 144, 188, 61, 128, 20, 55, 191, 90, 145, 221, 190, 123, 244, 162, 61, 93, 108, 4, 190, 12, 28, 40, 62, 48, 249, 64, 62, 205, 109, 93, 188, 88, 160, 42, 62, 45, 90, 196, 189, 50, 13, 218, 188, 159, 96, 39, 62, 120, 225, 105, 189, 228, 226, 145, 189, 149, 252, 94, 190, 98, 156, 174, 190, 123, 50, 40, 62, 229, 248, 186, 190, 37, 143, 251, 188, 218, 112, 180, 62, 123, 157, 27, 190, 141, 236, 142, 61, 42, 102, 145, 188, 180, 216, 199, 60, 176, 62, 99, 61, 170, 100, 55, 62, 4, 154, 140, 60, 179, 227, 1, 189, 7, 152, 13, 62, 66, 19, 13, 62, 108, 155, 143, 62, 214, 123, 247, 61, 200, 232, 84, 62, 21, 113, 93, 62, 129, 22, 46, 187, 212, 47, 103, 62, 6, 148, 47, 190, 136, 254, 176, 61, 96, 38, 150, 190, 99, 121, 9, 190, 103, 191, 11, 190, 225, 132, 19, 190, 238, 66, 15, 190, 46, 59, 184, 189, 141, 107, 46, 190, 74, 110, 175, 61, 226, 69, 35, 190, 226, 9, 133, 190, 10, 124, 163, 189, 9, 102, 215, 189, 156, 105, 3, 188, 38, 166, 232, 189, 165, 134, 197, 61, 162, 11, 166, 189, 36, 138, 67, 190, 229, 108, 144, 188, 183, 179, 100, 61, 48, 74, 15, 190, 129, 73, 98, 189, 227, 13, 152, 61, 106, 176, 67, 190, 100, 49, 233, 189, 168, 128, 44, 60, 238, 35, 110, 61, 239, 235, 42, 190, 122, 157, 128, 189, 19, 31, 163, 190, 246, 153, 129, 61, 32, 6, 65, 190, 70, 228, 28, 190, 140, 26, 250, 190, 120, 108, 9, 190, 57, 93, 14, 62, 38, 89, 88, 61, 177, 227, 192, 62, 188, 53, 188, 189, 93, 94, 197, 61, 59, 75, 133, 62, 37, 172, 22, 62, 213, 142, 72, 62, 186, 67, 255, 190, 92, 207, 94, 61, 204, 73, 115, 189, 177, 144, 147, 190, 13, 106, 2, 62, 33, 196, 184, 62, 47, 129, 178, 190, 70, 129, 163, 62, 155, 163, 4, 191, 145, 253, 164, 189, 71, 149, 144, 62, 173, 32, 87, 190, 212, 219, 226, 190, 7, 173, 16, 190, 188, 53, 179, 190, 154, 197, 231, 62, 115, 7, 154, 185, 30, 192, 104, 189, 63, 43, 149, 62, 215, 75, 119, 61, 158, 80, 181, 61, 233, 203, 35, 62, 108, 84, 221, 61, 152, 249, 212, 189, 36, 148, 2, 191, 128, 56, 92, 61, 1, 67, 248, 190, 20, 177, 157, 189, 233, 100, 160, 190, 13, 137, 190, 189, 229, 171, 118, 189, 166, 113, 193, 190, 85, 122, 206, 62, 33, 111, 184, 61, 236, 157, 143, 62, 195, 141, 91, 59, 37, 73, 157, 189, 31, 184, 184, 190, 71, 75, 138, 189, 35, 31, 40, 190, 38, 197, 70, 62, 45, 55, 18, 62, 74, 32, 28, 190, 67, 225, 158, 61, 93, 54, 34, 62, 188, 88, 31, 62, 11, 182, 39, 62, 113, 129, 15, 191, 255, 190, 195, 189, 111, 231, 15, 191, 2, 93, 190, 190, 218, 156, 218, 61, 156, 167, 192, 190, 37, 215, 168, 190, 168, 194, 30, 191, 224, 69, 241, 189, 248, 2, 151, 62, 213, 132, 150, 62, 237, 190, 2, 63, 113, 10, 207, 189, 24, 123, 62, 62, 217, 89, 133, 189, 18, 195, 66, 62, 163, 63, 151, 62, 41, 244, 146, 190, 32, 201, 8, 189, 19, 172, 223, 61, 234, 74, 22, 190, 147, 229, 58, 62, 1, 97, 2, 62, 68, 228, 168, 190, 128, 138, 160, 62, 88, 223, 70, 191, 168, 244, 114, 190, 95, 113, 16, 190, 110, 153, 231, 190, 245, 157, 210, 190, 71, 45, 192, 189, 64, 251, 75, 190, 249, 139, 175, 62, 199, 171, 140, 62, 125, 142, 141, 190, 73, 209, 185, 62, 214, 81, 101, 188, 241, 134, 108, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 146, 165, 60, 235, 48, 184, 61, 216, 216, 105, 61, 94, 162, 92, 189, 169, 136, 19, 62, 56, 73, 74, 61, 255, 241, 124, 62, 251, 45, 145, 189, 52, 244, 75, 62, 243, 239, 203, 61, 191, 220, 98, 62, 241, 161, 206, 189, 195, 247, 100, 62, 53, 225, 89, 190, 53, 127, 123, 61, 239, 59, 45, 62, 45, 12, 2, 62, 48, 130, 98, 60, 79, 150, 152, 189, 135, 6, 183, 62, 122, 194, 222, 59, 140, 84, 21, 61, 195, 0, 22, 62, 202, 215, 141, 62, 169, 48, 27, 190, 181, 252, 154, 189, 3, 66, 71, 61, 125, 81, 112, 190, 179, 194, 221, 61, 101, 33, 201, 61, 210, 115, 137, 189, 196, 177, 160, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 165, 52, 62, 172, 250, 101, 63, 115, 6, 69, 191, 149, 142, 33, 191, 107, 29, 77, 191, 231, 15, 130, 190, 73, 230, 194, 190, 65, 157, 134, 62, 62, 100, 12, 63, 59, 106, 59, 62, 43, 104, 57, 62, 106, 132, 48, 63, 167, 175, 62, 63, 18, 121, 59, 190, 24, 23, 112, 189, 94, 132, 12, 191, 30, 76, 170, 190, 119, 108, 201, 62, 253, 76, 51, 190, 246, 78, 213, 62, 250, 142, 235, 190, 23, 42, 45, 191, 242, 3, 11, 189, 76, 185, 88, 62, 134, 54, 6, 62, 98, 127, 12, 191, 185, 139, 11, 63, 111, 207, 91, 190, 46, 201, 211, 185, 69, 8, 189, 190, 122, 127, 28, 63, 80, 35, 152, 190, 4, 58, 164, 186, 175, 87, 22, 63, 87, 34, 91, 62, 106, 154, 102, 189, 138, 133, 196, 60, 14, 119, 5, 63, 74, 75, 250, 190, 41, 201, 57, 190, 140, 230, 122, 189, 61, 93, 123, 190, 159, 221, 45, 190, 133, 114, 185, 62, 115, 232, 191, 189, 191, 120, 62, 62, 111, 199, 43, 190, 190, 181, 207, 189, 0, 210, 165, 60, 110, 33, 12, 61, 117, 70, 145, 61, 38, 28, 15, 189, 151, 249, 154, 190, 248, 33, 98, 62, 220, 47, 192, 190, 82, 218, 43, 190, 73, 56, 150, 189, 7, 156, 169, 62, 179, 182, 10, 62, 159, 131, 149, 61, 18, 29, 39, 62, 167, 201, 70, 62, 188, 222, 203, 61, 104, 238, 160, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 103, 179, 59, 204, 9, 172, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {101, 147, 140, 63, 83, 134, 60, 191, 252, 223, 37, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {251, 99, 239, 63, 88, 38, 27, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0021/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}