// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {205, 65, 207, 62, 1, 241, 64, 62, 111, 62, 39, 191, 251, 102, 29, 62, 220, 107, 67, 63, 163, 122, 39, 63, 141, 212, 149, 62, 124, 39, 140, 189, 160, 188, 254, 61, 1, 56, 240, 189, 116, 41, 32, 191, 12, 46, 165, 62, 91, 157, 50, 191, 185, 66, 230, 190, 55, 80, 97, 188, 156, 42, 14, 190, 131, 138, 32, 63, 133, 33, 255, 190, 213, 6, 86, 62, 106, 220, 92, 191, 121, 254, 11, 62, 243, 104, 162, 190, 30, 89, 38, 191, 45, 33, 210, 62, 18, 202, 91, 191, 49, 216, 74, 191, 37, 162, 90, 60, 179, 251, 82, 61, 138, 225, 242, 61, 190, 0, 57, 191, 23, 136, 89, 62, 142, 160, 68, 63, 56, 8, 10, 190, 71, 39, 88, 189, 127, 165, 68, 63, 64, 234, 155, 190, 182, 15, 147, 62, 157, 44, 45, 63, 244, 251, 34, 190, 134, 124, 84, 191, 37, 142, 28, 63, 165, 107, 16, 189, 129, 96, 63, 63, 85, 254, 98, 191, 245, 176, 66, 190, 222, 160, 244, 190, 48, 246, 149, 191, 22, 111, 148, 190, 103, 122, 6, 63, 160, 115, 158, 63, 87, 99, 206, 62, 230, 146, 161, 62, 196, 145, 131, 191, 229, 46, 99, 62, 15, 41, 203, 190, 241, 157, 29, 62, 89, 13, 40, 191, 6, 145, 201, 190, 206, 123, 216, 63, 179, 95, 198, 62, 225, 120, 10, 63, 114, 230, 107, 191, 189, 38, 241, 190, 145, 104, 20, 63, 16, 235, 1, 62, 89, 62, 18, 63, 94, 247, 219, 61, 91, 118, 78, 63, 32, 215, 213, 62, 198, 34, 29, 190, 213, 141, 58, 191, 196, 139, 27, 63, 225, 221, 130, 190, 3, 132, 17, 63, 12, 223, 0, 191, 178, 182, 157, 190, 216, 137, 191, 62, 188, 45, 62, 63, 209, 157, 49, 62, 6, 6, 129, 63, 4, 9, 147, 62, 95, 195, 118, 63, 0, 9, 44, 191, 247, 105, 1, 62, 35, 46, 228, 62, 228, 123, 7, 63, 201, 6, 89, 62, 30, 251, 139, 62, 52, 108, 137, 63, 40, 130, 164, 62, 206, 107, 17, 190, 170, 141, 139, 191, 47, 191, 215, 190, 190, 146, 254, 60, 212, 79, 255, 190, 6, 207, 194, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {100, 97, 106, 190, 75, 179, 206, 62, 110, 20, 229, 62, 5, 113, 85, 62, 80, 99, 209, 62, 96, 166, 28, 191, 229, 135, 45, 189, 245, 235, 144, 189, 244, 37, 227, 62, 29, 227, 241, 62, 88, 188, 12, 190, 124, 203, 117, 61, 117, 222, 20, 63, 97, 115, 133, 190, 1, 135, 245, 61, 149, 169, 218, 62, 52, 105, 217, 62, 156, 18, 72, 62, 147, 131, 10, 191, 202, 220, 82, 60, 113, 10, 198, 190, 236, 57, 246, 190, 212, 8, 7, 63, 87, 248, 43, 190, 54, 220, 173, 190, 57, 243, 70, 62, 205, 56, 37, 61, 61, 98, 137, 62, 86, 226, 175, 190, 108, 65, 94, 62, 37, 35, 231, 190, 214, 1, 237, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 47, 82, 62, 198, 128, 190, 189, 62, 1, 40, 190, 245, 5, 203, 62, 127, 45, 151, 61, 197, 225, 15, 62, 5, 176, 188, 60, 161, 71, 72, 63, 200, 38, 74, 190, 210, 27, 20, 62, 225, 203, 105, 62, 235, 217, 190, 62, 63, 160, 32, 190, 175, 30, 119, 59, 193, 241, 181, 189, 199, 238, 190, 188, 187, 220, 165, 190, 198, 137, 244, 189, 118, 81, 46, 60, 190, 45, 209, 61, 199, 23, 134, 61, 60, 183, 47, 190, 144, 88, 225, 190, 193, 217, 20, 62, 238, 21, 108, 188, 205, 129, 26, 191, 2, 1, 72, 190, 189, 197, 163, 190, 23, 94, 5, 61, 101, 165, 162, 190, 203, 166, 50, 189, 54, 22, 95, 60, 204, 99, 50, 62, 214, 149, 150, 61, 138, 57, 113, 61, 7, 36, 102, 190, 126, 201, 83, 188, 189, 57, 212, 190, 86, 221, 202, 60, 82, 58, 166, 190, 82, 126, 92, 61, 214, 224, 222, 189, 69, 172, 1, 191, 228, 149, 201, 62, 190, 61, 117, 62, 111, 190, 250, 61, 48, 41, 26, 62, 114, 211, 106, 189, 175, 88, 192, 190, 153, 3, 16, 190, 78, 44, 114, 190, 89, 145, 242, 62, 246, 114, 250, 62, 62, 31, 109, 190, 236, 202, 229, 61, 127, 244, 131, 62, 166, 214, 144, 62, 143, 185, 187, 62, 117, 90, 242, 190, 153, 201, 174, 62, 199, 113, 46, 191, 255, 92, 208, 190, 43, 97, 13, 191, 33, 170, 28, 190, 61, 54, 77, 190, 131, 57, 76, 190, 156, 130, 5, 187, 81, 12, 208, 189, 50, 137, 97, 60, 255, 204, 113, 189, 240, 170, 78, 189, 234, 67, 88, 189, 231, 94, 170, 62, 74, 198, 76, 62, 230, 248, 139, 190, 48, 108, 182, 189, 60, 244, 94, 190, 159, 127, 160, 190, 21, 113, 172, 190, 190, 83, 93, 62, 221, 202, 109, 190, 116, 120, 218, 60, 47, 233, 178, 60, 62, 244, 77, 191, 136, 160, 135, 189, 144, 17, 33, 190, 215, 183, 136, 190, 35, 240, 114, 190, 98, 225, 74, 190, 118, 148, 14, 190, 186, 212, 21, 190, 115, 38, 17, 191, 240, 13, 227, 188, 66, 104, 180, 189, 35, 2, 29, 190, 5, 188, 32, 62, 105, 223, 68, 190, 6, 151, 164, 191, 62, 106, 241, 189, 178, 153, 24, 62, 254, 75, 202, 62, 127, 179, 101, 61, 173, 30, 199, 189, 222, 65, 18, 63, 24, 35, 171, 62, 91, 254, 126, 62, 10, 192, 172, 62, 12, 46, 191, 190, 233, 22, 75, 61, 64, 206, 82, 62, 214, 89, 156, 190, 44, 135, 161, 62, 217, 116, 88, 62, 107, 224, 157, 190, 67, 233, 180, 62, 253, 25, 73, 191, 33, 70, 220, 59, 132, 80, 207, 60, 69, 196, 108, 191, 60, 79, 39, 191, 190, 217, 138, 190, 94, 205, 0, 191, 69, 30, 236, 189, 87, 180, 141, 61, 124, 219, 1, 190, 252, 130, 197, 62, 88, 193, 99, 60, 137, 106, 198, 61, 96, 245, 159, 190, 183, 193, 185, 190, 212, 166, 94, 62, 162, 231, 250, 61, 218, 56, 87, 62, 32, 159, 157, 62, 238, 168, 123, 189, 216, 124, 84, 62, 108, 28, 183, 61, 39, 136, 150, 62, 61, 148, 158, 62, 179, 11, 51, 190, 164, 138, 142, 62, 56, 148, 123, 189, 126, 12, 17, 191, 236, 211, 158, 189, 115, 43, 148, 62, 212, 131, 44, 190, 182, 85, 95, 61, 42, 247, 58, 191, 197, 248, 248, 190, 44, 190, 126, 62, 215, 7, 165, 189, 91, 171, 154, 190, 89, 217, 133, 190, 235, 179, 163, 190, 119, 134, 206, 62, 148, 149, 139, 189, 117, 253, 142, 60, 10, 156, 95, 62, 114, 29, 20, 190, 139, 204, 61, 62, 196, 4, 114, 190, 80, 45, 90, 190, 65, 38, 12, 60, 216, 43, 205, 61, 244, 32, 107, 190, 17, 160, 65, 62, 24, 90, 170, 190, 237, 221, 200, 189, 239, 17, 10, 191, 98, 219, 13, 62, 54, 24, 251, 61, 138, 61, 68, 62, 186, 183, 140, 62, 29, 120, 144, 186, 197, 13, 176, 190, 100, 193, 241, 189, 229, 159, 14, 62, 145, 252, 13, 190, 250, 137, 22, 190, 248, 28, 5, 62, 21, 12, 251, 190, 237, 200, 79, 58, 32, 124, 131, 190, 152, 32, 30, 190, 198, 158, 206, 61, 21, 92, 131, 188, 41, 196, 104, 62, 72, 168, 145, 188, 25, 177, 110, 61, 39, 156, 75, 62, 177, 121, 67, 190, 64, 203, 37, 190, 149, 254, 153, 189, 245, 106, 192, 188, 89, 84, 15, 62, 96, 246, 76, 62, 219, 197, 212, 189, 250, 96, 153, 62, 239, 40, 118, 60, 9, 68, 73, 60, 72, 97, 94, 189, 76, 239, 238, 188, 1, 17, 179, 62, 68, 148, 169, 190, 198, 177, 67, 62, 26, 198, 119, 62, 165, 176, 125, 190, 40, 20, 50, 190, 98, 57, 175, 61, 241, 91, 195, 60, 211, 71, 92, 62, 72, 95, 0, 191, 228, 254, 228, 190, 37, 116, 71, 189, 202, 29, 209, 189, 10, 67, 236, 189, 165, 101, 241, 189, 241, 192, 34, 62, 121, 36, 18, 61, 41, 133, 46, 62, 134, 10, 236, 190, 210, 30, 141, 62, 46, 159, 148, 190, 47, 3, 30, 62, 124, 24, 235, 60, 109, 189, 178, 189, 13, 150, 84, 61, 144, 134, 252, 190, 195, 163, 214, 190, 83, 245, 118, 190, 186, 39, 134, 62, 226, 49, 220, 190, 196, 195, 16, 190, 250, 235, 103, 61, 74, 118, 103, 189, 210, 140, 35, 62, 248, 168, 83, 62, 116, 159, 177, 190, 231, 213, 162, 62, 66, 109, 10, 189, 147, 216, 174, 61, 96, 244, 242, 61, 201, 47, 127, 61, 151, 20, 96, 61, 91, 65, 156, 62, 199, 235, 254, 189, 15, 184, 25, 190, 162, 247, 96, 190, 21, 78, 54, 62, 98, 244, 130, 190, 40, 248, 176, 62, 128, 75, 254, 61, 43, 85, 27, 63, 48, 36, 51, 62, 198, 236, 92, 189, 179, 63, 21, 188, 188, 101, 223, 189, 234, 26, 116, 62, 56, 161, 108, 189, 182, 153, 177, 190, 186, 172, 117, 62, 152, 58, 165, 190, 191, 202, 192, 61, 230, 202, 66, 190, 110, 83, 222, 61, 184, 188, 160, 190, 174, 166, 134, 60, 114, 80, 38, 63, 212, 247, 36, 62, 73, 241, 249, 62, 75, 164, 168, 188, 13, 116, 147, 190, 211, 243, 36, 189, 95, 171, 67, 189, 54, 230, 229, 190, 55, 117, 148, 62, 71, 215, 22, 62, 176, 213, 233, 187, 24, 195, 190, 61, 195, 125, 101, 62, 218, 240, 13, 63, 77, 175, 162, 62, 96, 123, 102, 190, 136, 226, 113, 190, 91, 137, 44, 61, 168, 140, 139, 190, 234, 180, 152, 60, 78, 240, 123, 191, 97, 85, 53, 62, 99, 97, 5, 186, 114, 130, 61, 60, 135, 28, 240, 189, 66, 211, 97, 62, 35, 154, 209, 61, 167, 5, 232, 190, 216, 236, 159, 59, 121, 59, 147, 60, 195, 93, 28, 190, 88, 181, 163, 62, 196, 93, 199, 189, 134, 82, 214, 61, 58, 131, 150, 62, 11, 54, 121, 62, 23, 221, 168, 190, 121, 23, 90, 62, 100, 245, 13, 190, 178, 92, 15, 189, 135, 20, 129, 62, 5, 126, 242, 61, 16, 149, 134, 190, 83, 3, 44, 62, 229, 84, 221, 189, 184, 13, 134, 189, 61, 120, 59, 62, 168, 221, 243, 189, 148, 128, 227, 62, 187, 63, 208, 190, 71, 32, 164, 60, 126, 210, 4, 191, 77, 71, 147, 189, 249, 233, 23, 189, 163, 137, 128, 62, 195, 234, 115, 62, 92, 35, 160, 190, 251, 4, 141, 62, 41, 186, 3, 191, 204, 59, 169, 62, 162, 38, 50, 189, 62, 45, 100, 62, 95, 166, 64, 189, 246, 231, 21, 190, 11, 52, 153, 62, 20, 61, 171, 189, 53, 77, 233, 188, 143, 48, 153, 62, 39, 33, 55, 189, 201, 189, 155, 189, 75, 168, 161, 62, 132, 199, 165, 190, 201, 3, 229, 61, 63, 24, 91, 61, 127, 214, 160, 189, 54, 87, 12, 62, 17, 109, 106, 62, 121, 200, 53, 62, 238, 2, 123, 62, 200, 62, 107, 189, 56, 184, 26, 188, 243, 243, 96, 189, 195, 190, 181, 61, 59, 152, 163, 62, 130, 180, 141, 61, 145, 75, 210, 61, 147, 90, 151, 61, 56, 221, 22, 62, 245, 153, 115, 190, 230, 109, 61, 191, 161, 70, 165, 61, 24, 239, 206, 190, 66, 0, 239, 190, 242, 160, 39, 190, 164, 178, 197, 188, 120, 96, 230, 62, 249, 230, 179, 188, 237, 216, 18, 62, 4, 138, 64, 190, 19, 217, 145, 189, 134, 238, 108, 188, 205, 11, 172, 188, 190, 141, 222, 190, 213, 195, 212, 61, 15, 31, 72, 61, 77, 202, 191, 60, 26, 28, 86, 61, 145, 7, 87, 190, 205, 242, 233, 190, 174, 23, 22, 190, 45, 165, 203, 189, 17, 216, 165, 62, 109, 112, 23, 190, 186, 57, 19, 63, 203, 8, 192, 61, 226, 213, 93, 62, 161, 106, 253, 187, 84, 208, 151, 188, 176, 241, 1, 189, 209, 91, 85, 190, 0, 16, 189, 190, 171, 69, 132, 61, 198, 1, 135, 190, 77, 222, 119, 61, 218, 148, 170, 190, 104, 66, 5, 62, 218, 208, 66, 190, 120, 64, 78, 190, 173, 247, 206, 62, 96, 211, 255, 61, 17, 94, 63, 62, 139, 32, 56, 189, 24, 11, 41, 188, 149, 24, 17, 191, 23, 103, 138, 60, 198, 163, 131, 190, 245, 248, 18, 62, 159, 220, 253, 189, 224, 61, 33, 190, 218, 2, 154, 61, 240, 148, 206, 61, 67, 235, 127, 62, 56, 85, 16, 61, 239, 20, 61, 191, 27, 47, 199, 189, 16, 121, 56, 190, 114, 41, 25, 191, 164, 9, 75, 62, 26, 187, 228, 189, 57, 53, 52, 62, 235, 56, 191, 189, 148, 34, 73, 189, 159, 18, 246, 190, 69, 201, 143, 190, 125, 238, 64, 190, 159, 16, 183, 190, 36, 78, 115, 190, 55, 127, 1, 190, 234, 96, 160, 61, 122, 45, 0, 62, 200, 151, 140, 188, 158, 47, 39, 61, 56, 213, 23, 190, 8, 147, 55, 59, 30, 145, 38, 190, 43, 102, 14, 62, 98, 234, 29, 191, 42, 182, 41, 190, 227, 161, 213, 61, 40, 47, 210, 61, 191, 103, 157, 190, 44, 40, 92, 61, 195, 78, 194, 190, 226, 112, 170, 59, 107, 72, 97, 190, 20, 23, 164, 189, 248, 136, 82, 62, 10, 211, 145, 190, 31, 112, 229, 61, 205, 104, 167, 61, 25, 215, 237, 60, 246, 237, 168, 189, 104, 135, 254, 188, 245, 105, 194, 59, 37, 132, 9, 190, 175, 138, 177, 60, 2, 30, 149, 62, 109, 16, 31, 190, 219, 246, 240, 60, 87, 168, 14, 62, 113, 77, 98, 62, 56, 237, 76, 62, 128, 200, 78, 190, 0, 89, 68, 62, 41, 221, 0, 189, 200, 71, 52, 190, 117, 48, 143, 188, 82, 133, 145, 62, 104, 227, 143, 189, 53, 16, 100, 62, 24, 130, 93, 190, 175, 237, 75, 190, 173, 74, 14, 62, 110, 159, 232, 61, 37, 72, 135, 60, 185, 194, 248, 189, 53, 125, 167, 188, 13, 235, 187, 189, 243, 194, 43, 62, 246, 221, 153, 190, 71, 79, 142, 62, 198, 72, 40, 189, 151, 145, 0, 62, 164, 251, 51, 61, 184, 13, 90, 188, 137, 100, 135, 189, 146, 108, 131, 190, 249, 127, 68, 190, 158, 133, 211, 61, 36, 235, 50, 191, 59, 37, 166, 188, 97, 149, 164, 191, 207, 128, 106, 62, 14, 43, 153, 62, 19, 66, 134, 61, 167, 157, 100, 62, 67, 39, 18, 62, 56, 236, 212, 190, 215, 125, 21, 191, 104, 217, 81, 62, 248, 14, 233, 190, 244, 44, 213, 189, 205, 37, 179, 61, 81, 8, 228, 190, 67, 166, 25, 62, 123, 139, 16, 61, 187, 36, 12, 190, 154, 213, 123, 61, 179, 22, 36, 61, 245, 232, 156, 189, 202, 3, 187, 189, 12, 240, 34, 190, 13, 141, 78, 61, 173, 117, 21, 191, 103, 107, 190, 189, 12, 28, 149, 190, 42, 237, 246, 61, 168, 211, 81, 62, 97, 167, 228, 61, 127, 157, 120, 62, 83, 216, 19, 62, 236, 7, 251, 184, 92, 122, 106, 61, 112, 184, 141, 189, 227, 231, 61, 190, 243, 17, 65, 189, 101, 76, 185, 62, 74, 97, 32, 190, 128, 196, 225, 185, 88, 97, 232, 61, 255, 149, 183, 60, 159, 232, 141, 62, 238, 245, 47, 62, 30, 49, 43, 190, 175, 220, 190, 189, 154, 161, 70, 191, 251, 134, 33, 62, 198, 136, 90, 62, 108, 65, 134, 62, 103, 236, 12, 189, 174, 176, 192, 61, 65, 22, 229, 61, 84, 119, 86, 188, 115, 56, 246, 188, 92, 168, 158, 60, 99, 56, 118, 191, 177, 16, 69, 190, 176, 153, 61, 62, 87, 16, 226, 189, 27, 252, 128, 62, 123, 133, 251, 62, 254, 149, 106, 190, 131, 140, 137, 62, 164, 127, 195, 62, 109, 196, 185, 62, 216, 189, 80, 190, 236, 228, 7, 61, 235, 101, 107, 62, 87, 67, 150, 62, 26, 108, 178, 62, 109, 97, 186, 61, 35, 178, 213, 62, 90, 69, 201, 61, 135, 190, 133, 190, 198, 128, 138, 62, 73, 76, 218, 188, 204, 197, 44, 62, 210, 205, 29, 189, 6, 79, 237, 190, 175, 72, 186, 190, 159, 199, 0, 59, 118, 139, 163, 61, 18, 59, 37, 191, 39, 114, 238, 190, 39, 212, 128, 190, 193, 190, 243, 190, 167, 101, 90, 190, 88, 85, 203, 60, 238, 130, 190, 62, 151, 223, 149, 61, 209, 199, 142, 189, 116, 135, 112, 189, 10, 166, 40, 62, 43, 142, 152, 61, 61, 241, 159, 60, 4, 30, 60, 61, 78, 188, 182, 61, 177, 204, 21, 190, 114, 0, 129, 189, 175, 136, 244, 189, 183, 221, 21, 188, 94, 77, 119, 61, 202, 10, 77, 61, 196, 135, 232, 189, 147, 242, 17, 190, 138, 182, 0, 190, 40, 92, 198, 189, 114, 61, 184, 189, 15, 106, 50, 62, 24, 41, 29, 190, 211, 72, 21, 61, 4, 38, 29, 190, 209, 108, 245, 189, 66, 152, 209, 61, 34, 59, 53, 60, 242, 96, 113, 189, 234, 169, 14, 190, 122, 48, 3, 61, 250, 26, 32, 190, 31, 58, 14, 62, 128, 160, 3, 190, 43, 55, 154, 59, 159, 214, 41, 62, 208, 122, 68, 59, 179, 8, 151, 190, 111, 54, 93, 62, 101, 63, 8, 191, 136, 4, 161, 62, 62, 152, 100, 190, 21, 55, 105, 62, 96, 104, 105, 189, 200, 197, 163, 190, 41, 3, 171, 62, 6, 186, 92, 61, 105, 245, 153, 60, 24, 190, 158, 61, 250, 40, 131, 61, 246, 18, 18, 190, 34, 89, 93, 62, 127, 0, 134, 190, 29, 5, 56, 62, 147, 78, 152, 187, 38, 10, 48, 190, 210, 16, 191, 59, 64, 121, 145, 62, 255, 33, 33, 62, 76, 49, 10, 62, 249, 31, 254, 190, 196, 213, 248, 189, 3, 178, 3, 191, 174, 49, 98, 190, 155, 170, 239, 61, 179, 202, 67, 190, 17, 179, 40, 190, 255, 39, 90, 61, 126, 156, 50, 61, 11, 252, 169, 61, 120, 165, 167, 59, 231, 86, 9, 62, 47, 171, 165, 190, 129, 120, 95, 60, 119, 119, 145, 191, 106, 70, 16, 62, 138, 120, 157, 62, 226, 49, 33, 61, 86, 223, 98, 62, 105, 79, 206, 62, 252, 81, 150, 190, 78, 117, 23, 191, 224, 214, 131, 62, 7, 112, 65, 190, 84, 161, 174, 61, 187, 134, 130, 61, 236, 214, 117, 190, 132, 190, 136, 189, 53, 249, 208, 60, 166, 96, 60, 190, 119, 112, 231, 189, 227, 236, 186, 189, 104, 70, 255, 187, 55, 76, 117, 62, 92, 187, 44, 190, 105, 8, 94, 60, 255, 254, 251, 190, 109, 146, 70, 61, 77, 210, 243, 190, 66, 131, 160, 189, 38, 190, 127, 62, 135, 153, 225, 61, 15, 128, 132, 189, 71, 147, 44, 63, 145, 107, 95, 61, 29, 250, 83, 62, 154, 63, 13, 190, 1, 167, 216, 62, 189, 157, 201, 62, 100, 44, 0, 191, 67, 33, 156, 61, 99, 169, 52, 62, 222, 23, 55, 191, 65, 53, 239, 61, 183, 109, 37, 62, 131, 118, 44, 190, 247, 91, 215, 62, 250, 207, 131, 190, 201, 201, 127, 191, 158, 75, 66, 62, 195, 132, 20, 190, 32, 219, 121, 190, 11, 228, 184, 190, 216, 107, 50, 190, 185, 163, 166, 62, 6, 5, 5, 63, 212, 219, 101, 60, 143, 237, 152, 62, 14, 198, 132, 190, 96, 250, 191, 61, 141, 67, 199, 189, 37, 159, 180, 61, 177, 178, 140, 62, 239, 77, 141, 61, 49, 220, 99, 62, 128, 76, 60, 62, 205, 64, 128, 188, 245, 189, 187, 189, 218, 113, 18, 190, 22, 196, 221, 61, 44, 201, 154, 62, 112, 81, 55, 190, 198, 220, 167, 62, 163, 189, 8, 189, 104, 222, 195, 189, 14, 71, 128, 189, 246, 151, 90, 61, 109, 179, 153, 61, 215, 38, 146, 61, 59, 96, 158, 190, 57, 144, 3, 190, 18, 31, 152, 189, 101, 252, 216, 61, 164, 190, 44, 190, 234, 77, 81, 190, 229, 11, 7, 190, 180, 252, 68, 190, 136, 242, 143, 62, 51, 194, 20, 191, 126, 130, 244, 61, 142, 132, 194, 61, 118, 165, 151, 61, 188, 74, 207, 61, 126, 156, 120, 190, 216, 59, 197, 62, 242, 126, 216, 62, 149, 20, 1, 190, 164, 33, 199, 188, 201, 188, 124, 62, 72, 108, 152, 62, 224, 254, 54, 189, 191, 44, 5, 62, 57, 43, 217, 189, 93, 39, 235, 62, 92, 132, 192, 61, 25, 141, 195, 190, 184, 149, 126, 62, 235, 202, 214, 189, 101, 91, 200, 189, 72, 116, 226, 62, 170, 234, 243, 61, 28, 233, 2, 190, 69, 221, 240, 188, 46, 147, 109, 190, 155, 187, 19, 190, 165, 228, 249, 61, 95, 71, 14, 61, 204, 248, 130, 190, 56, 153, 17, 191, 3, 102, 212, 62, 170, 137, 242, 190, 238, 121, 142, 190, 115, 127, 206, 61, 111, 60, 132, 62, 156, 35, 25, 190, 6, 21, 152, 189, 46, 12, 205, 188, 190, 142, 58, 61, 254, 67, 91, 61, 13, 92, 178, 189, 122, 62, 146, 187, 243, 136, 103, 189, 134, 165, 88, 189, 3, 126, 1, 190, 45, 171, 33, 190, 156, 158, 129, 189, 189, 186, 232, 61, 42, 158, 16, 60, 110, 51, 16, 190, 130, 99, 195, 189, 169, 39, 207, 189, 241, 120, 16, 190, 105, 152, 52, 61, 186, 143, 133, 188, 116, 197, 126, 188, 192, 128, 149, 189, 143, 153, 147, 189, 57, 97, 45, 188, 230, 161, 153, 188, 224, 15, 48, 62, 65, 89, 4, 62, 185, 10, 146, 60, 32, 39, 41, 62, 251, 249, 9, 190, 202, 108, 226, 189, 16, 27, 226, 61, 8, 100, 223, 62, 23, 82, 169, 60, 0, 221, 246, 188, 192, 36, 182, 61, 27, 5, 55, 190, 173, 144, 89, 190, 116, 71, 51, 62, 78, 174, 114, 61, 87, 171, 92, 189, 108, 255, 27, 190, 23, 69, 80, 190, 184, 202, 26, 58, 15, 66, 129, 190, 54, 134, 50, 191, 105, 93, 203, 61, 105, 136, 250, 189, 37, 35, 9, 191, 168, 228, 253, 60, 161, 28, 246, 189, 201, 250, 63, 189, 111, 111, 213, 62, 178, 78, 176, 190, 60, 39, 81, 189, 175, 140, 189, 61, 144, 226, 9, 62, 41, 0, 211, 189, 223, 128, 164, 190, 48, 139, 114, 62, 157, 84, 15, 61, 198, 249, 3, 191, 223, 93, 137, 58, 114, 217, 127, 61, 230, 230, 252, 188, 45, 58, 82, 62, 123, 153, 212, 61, 159, 124, 179, 190, 225, 70, 206, 61, 21, 195, 19, 191, 72, 7, 182, 61, 188, 99, 99, 189, 224, 30, 79, 62, 254, 201, 120, 61, 5, 253, 88, 190, 161, 247, 157, 62, 201, 147, 87, 61, 103, 2, 34, 62, 1, 184, 88, 188, 212, 180, 132, 61, 181, 8, 132, 190, 129, 240, 99, 62, 189, 146, 206, 190, 82, 193, 127, 62, 183, 141, 198, 61, 59, 167, 190, 190, 187, 78, 84, 62, 253, 217, 72, 62, 106, 195, 7, 62, 103, 102, 56, 62, 232, 91, 23, 191, 169, 216, 21, 61, 148, 208, 16, 191, 90, 117, 205, 190, 231, 90, 58, 62, 124, 229, 175, 189, 30, 137, 49, 62, 58, 48, 76, 62, 88, 140, 192, 60, 223, 230, 27, 62, 43, 16, 4, 190, 91, 52, 13, 189, 22, 211, 234, 61, 157, 170, 152, 189, 182, 142, 227, 189, 16, 208, 77, 190, 242, 201, 123, 190, 4, 196, 67, 62, 30, 70, 174, 190, 186, 163, 171, 61, 77, 243, 195, 62, 238, 0, 33, 190, 48, 4, 233, 61, 209, 171, 11, 189, 99, 200, 22, 60, 24, 30, 228, 61, 93, 136, 55, 62, 77, 49, 199, 187, 35, 61, 154, 187, 114, 204, 238, 61, 79, 83, 249, 61, 133, 230, 143, 62, 55, 25, 39, 62, 252, 115, 88, 62, 122, 76, 52, 62, 245, 146, 36, 61, 168, 164, 86, 62, 237, 219, 43, 190, 136, 254, 176, 61, 96, 38, 150, 190, 99, 121, 9, 190, 103, 191, 11, 190, 225, 132, 19, 190, 238, 66, 15, 190, 46, 59, 184, 189, 141, 107, 46, 190, 74, 110, 175, 61, 226, 69, 35, 190, 226, 9, 133, 190, 10, 124, 163, 189, 9, 102, 215, 189, 156, 105, 3, 188, 38, 166, 232, 189, 165, 134, 197, 61, 162, 11, 166, 189, 36, 138, 67, 190, 229, 108, 144, 188, 183, 179, 100, 61, 48, 74, 15, 190, 129, 73, 98, 189, 227, 13, 152, 61, 106, 176, 67, 190, 100, 49, 233, 189, 168, 128, 44, 60, 238, 35, 110, 61, 239, 235, 42, 190, 122, 157, 128, 189, 19, 31, 163, 190, 246, 153, 129, 61, 32, 6, 65, 190, 106, 13, 31, 190, 47, 170, 201, 190, 176, 178, 217, 189, 247, 94, 83, 62, 23, 182, 81, 61, 98, 142, 199, 62, 127, 28, 58, 190, 191, 106, 63, 62, 148, 28, 124, 62, 137, 148, 14, 62, 14, 200, 75, 62, 58, 66, 0, 191, 230, 249, 39, 61, 67, 177, 230, 188, 224, 230, 163, 190, 174, 232, 239, 61, 186, 184, 154, 62, 168, 200, 216, 190, 4, 38, 168, 62, 138, 74, 217, 190, 82, 78, 173, 189, 79, 203, 133, 62, 213, 161, 72, 190, 167, 141, 161, 190, 57, 153, 12, 190, 37, 111, 110, 190, 134, 197, 175, 62, 137, 39, 152, 189, 155, 119, 197, 189, 21, 234, 91, 62, 65, 178, 72, 61, 199, 7, 162, 61, 227, 153, 95, 62, 214, 4, 35, 62, 37, 212, 89, 189, 179, 98, 226, 190, 1, 85, 180, 61, 215, 13, 222, 190, 99, 184, 156, 189, 103, 23, 143, 190, 84, 144, 109, 189, 37, 58, 87, 189, 227, 6, 171, 190, 165, 193, 215, 62, 170, 177, 249, 61, 81, 149, 165, 62, 140, 228, 112, 59, 119, 182, 146, 189, 95, 59, 162, 190, 181, 60, 132, 189, 227, 198, 47, 190, 224, 93, 122, 62, 193, 101, 18, 62, 20, 5, 28, 190, 165, 21, 1, 62, 207, 27, 49, 62, 243, 165, 37, 62, 98, 237, 99, 62, 147, 86, 3, 191, 233, 43, 195, 189, 35, 41, 16, 191, 218, 255, 163, 190, 70, 105, 234, 61, 178, 59, 198, 190, 15, 226, 163, 190, 31, 209, 220, 190, 224, 97, 154, 189, 28, 123, 156, 62, 4, 171, 147, 62, 30, 186, 5, 63, 70, 227, 31, 190, 111, 111, 111, 62, 209, 16, 167, 189, 110, 57, 70, 62, 12, 62, 150, 62, 49, 26, 149, 190, 198, 9, 43, 189, 178, 245, 240, 61, 209, 66, 239, 189, 179, 101, 68, 62, 232, 55, 147, 61, 143, 187, 188, 190, 125, 82, 167, 62, 217, 169, 52, 191, 61, 254, 92, 190, 95, 113, 16, 190, 183, 163, 238, 190, 227, 107, 158, 190, 29, 136, 182, 189, 69, 242, 153, 189, 18, 76, 74, 62, 44, 13, 138, 62, 136, 180, 160, 190, 21, 214, 141, 62, 46, 110, 197, 186, 244, 247, 117, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 238, 10, 61, 153, 251, 138, 61, 229, 89, 125, 61, 114, 102, 32, 189, 74, 243, 16, 62, 93, 231, 200, 188, 81, 195, 130, 62, 220, 25, 78, 189, 106, 23, 28, 62, 191, 222, 148, 61, 55, 214, 80, 62, 45, 213, 187, 189, 34, 118, 59, 62, 7, 123, 81, 190, 118, 253, 185, 61, 50, 115, 59, 62, 195, 194, 19, 62, 134, 95, 132, 61, 79, 150, 152, 189, 249, 214, 169, 62, 109, 120, 171, 187, 253, 200, 39, 61, 220, 28, 25, 62, 130, 23, 141, 62, 169, 48, 27, 190, 11, 72, 160, 189, 152, 126, 154, 60, 43, 138, 64, 190, 179, 194, 221, 61, 201, 252, 148, 61, 174, 18, 236, 188, 100, 41, 13, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 194, 58, 62, 54, 145, 73, 63, 7, 109, 56, 191, 208, 61, 31, 191, 147, 36, 61, 191, 231, 51, 77, 190, 6, 91, 190, 190, 222, 30, 124, 62, 60, 77, 13, 63, 184, 75, 30, 62, 239, 229, 74, 62, 94, 23, 33, 63, 131, 184, 32, 63, 98, 254, 65, 190, 122, 107, 148, 189, 17, 235, 5, 191, 59, 223, 175, 190, 207, 151, 203, 62, 253, 76, 51, 190, 43, 6, 204, 62, 147, 70, 237, 190, 49, 135, 39, 191, 252, 31, 12, 189, 22, 146, 67, 62, 134, 54, 6, 62, 223, 205, 3, 191, 119, 229, 0, 63, 5, 168, 102, 190, 46, 201, 211, 185, 59, 187, 194, 190, 85, 252, 24, 63, 114, 196, 156, 190, 90, 144, 209, 60, 36, 246, 246, 62, 112, 233, 88, 62, 208, 18, 185, 189, 177, 127, 61, 188, 133, 154, 201, 62, 141, 213, 237, 190, 65, 165, 248, 189, 48, 63, 99, 189, 28, 8, 152, 190, 245, 228, 47, 190, 53, 100, 235, 62, 167, 34, 251, 188, 121, 157, 26, 62, 117, 20, 40, 190, 101, 225, 33, 190, 172, 42, 90, 61, 119, 83, 8, 61, 117, 70, 145, 61, 64, 24, 172, 188, 64, 241, 132, 190, 59, 242, 64, 62, 65, 69, 172, 190, 17, 84, 51, 190, 73, 56, 150, 189, 153, 88, 154, 62, 9, 252, 36, 62, 77, 164, 183, 61, 18, 29, 39, 62, 211, 219, 53, 62, 57, 210, 3, 62, 163, 138, 118, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 116, 212, 58, 20, 166, 178, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {245, 148, 28, 191, 33, 103, 42, 190, 239, 165, 47, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {210, 62, 172, 63, 204, 242, 18, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0021/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}