// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 213, 232, 62, 206, 207, 17, 62, 53, 55, 242, 190, 13, 121, 187, 62, 4, 118, 9, 191, 48, 152, 0, 63, 116, 143, 149, 61, 67, 224, 148, 189, 234, 64, 172, 189, 121, 15, 154, 62, 113, 117, 191, 190, 32, 99, 53, 62, 253, 121, 195, 190, 91, 95, 153, 189, 244, 98, 11, 189, 121, 41, 231, 190, 4, 60, 7, 63, 144, 196, 15, 189, 151, 150, 218, 61, 126, 239, 12, 191, 208, 137, 6, 190, 98, 138, 174, 189, 155, 205, 11, 191, 132, 167, 158, 62, 245, 186, 6, 191, 208, 6, 181, 190, 49, 219, 164, 190, 173, 193, 38, 62, 218, 7, 179, 62, 41, 187, 8, 191, 29, 73, 9, 62, 230, 156, 235, 62, 91, 151, 174, 61, 81, 84, 234, 61, 176, 24, 234, 62, 19, 93, 44, 189, 200, 247, 238, 61, 68, 138, 214, 62, 58, 14, 63, 60, 154, 160, 5, 191, 40, 191, 238, 62, 178, 235, 64, 62, 221, 224, 146, 62, 31, 10, 19, 191, 142, 39, 70, 190, 174, 198, 236, 190, 253, 102, 39, 190, 63, 68, 14, 191, 196, 66, 217, 62, 249, 251, 209, 62, 227, 167, 18, 63, 85, 210, 16, 62, 7, 52, 15, 191, 175, 38, 103, 189, 161, 32, 234, 190, 117, 157, 54, 62, 110, 213, 166, 190, 237, 99, 235, 190, 195, 194, 149, 62, 76, 101, 3, 63, 208, 141, 152, 62, 78, 112, 50, 190, 255, 70, 209, 190, 86, 229, 206, 62, 231, 43, 179, 190, 106, 179, 7, 63, 196, 206, 101, 61, 156, 147, 218, 190, 139, 88, 141, 62, 167, 234, 117, 190, 200, 120, 18, 191, 91, 243, 3, 62, 212, 94, 122, 60, 66, 64, 251, 62, 39, 157, 213, 190, 161, 92, 115, 190, 137, 103, 86, 190, 75, 52, 250, 62, 192, 175, 180, 61, 91, 210, 52, 62, 213, 79, 134, 62, 223, 234, 9, 63, 224, 127, 14, 191, 92, 167, 49, 189, 245, 141, 227, 61, 107, 215, 145, 62, 80, 68, 235, 60, 13, 119, 85, 62, 137, 52, 132, 62, 65, 100, 218, 62, 44, 179, 7, 191, 96, 75, 0, 191, 77, 240, 227, 190, 88, 50, 9, 62, 253, 34, 30, 62, 192, 57, 131, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 192, 19, 191, 211, 149, 130, 62, 225, 102, 3, 63, 115, 85, 129, 190, 208, 214, 156, 62, 155, 105, 186, 190, 136, 197, 8, 62, 143, 191, 205, 190, 110, 248, 161, 62, 47, 39, 247, 62, 51, 14, 154, 189, 214, 250, 68, 190, 106, 176, 19, 63, 44, 3, 159, 190, 107, 123, 112, 62, 245, 225, 237, 62, 7, 186, 115, 62, 62, 103, 207, 62, 74, 247, 238, 190, 120, 83, 110, 62, 107, 71, 170, 190, 23, 162, 235, 190, 175, 70, 16, 63, 58, 114, 131, 62, 151, 91, 0, 191, 179, 151, 189, 62, 238, 182, 11, 190, 90, 120, 152, 62, 213, 220, 176, 190, 110, 206, 140, 60, 247, 69, 19, 191, 135, 219, 215, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 231, 47, 62, 35, 208, 159, 59, 222, 10, 96, 189, 98, 122, 139, 189, 155, 66, 49, 62, 208, 232, 139, 187, 41, 136, 45, 60, 233, 244, 50, 62, 46, 29, 184, 189, 213, 94, 23, 62, 147, 172, 20, 61, 196, 164, 46, 62, 136, 36, 46, 190, 139, 185, 191, 189, 179, 66, 174, 189, 12, 48, 64, 61, 223, 111, 50, 62, 225, 143, 9, 190, 150, 50, 209, 188, 249, 125, 135, 60, 47, 20, 179, 61, 188, 241, 210, 189, 33, 218, 0, 190, 148, 112, 197, 61, 11, 141, 24, 189, 151, 131, 44, 190, 149, 6, 249, 61, 36, 75, 208, 61, 0, 176, 121, 189, 253, 204, 126, 61, 37, 184, 114, 61, 71, 133, 137, 188, 34, 1, 188, 60, 4, 12, 37, 188, 98, 240, 51, 61, 172, 225, 243, 61, 58, 132, 41, 189, 130, 245, 7, 190, 153, 152, 249, 61, 8, 73, 43, 190, 230, 204, 11, 62, 170, 77, 182, 187, 141, 242, 42, 190, 233, 3, 198, 60, 23, 159, 183, 60, 54, 117, 39, 190, 193, 207, 194, 60, 126, 7, 43, 62, 15, 245, 195, 189, 148, 243, 46, 190, 57, 60, 137, 61, 207, 34, 35, 62, 113, 228, 214, 61, 205, 149, 146, 186, 73, 48, 109, 189, 150, 126, 170, 61, 131, 74, 35, 62, 80, 172, 51, 62, 89, 11, 128, 58, 155, 231, 30, 62, 218, 124, 63, 189, 233, 148, 5, 190, 121, 243, 210, 189, 22, 20, 48, 62, 54, 99, 239, 189, 255, 180, 27, 62, 178, 37, 24, 62, 14, 85, 111, 61, 177, 31, 1, 190, 65, 240, 247, 189, 164, 6, 149, 188, 51, 69, 157, 61, 192, 250, 51, 62, 120, 10, 165, 61, 93, 144, 67, 189, 103, 36, 234, 61, 72, 25, 132, 189, 146, 133, 162, 189, 58, 177, 13, 190, 8, 245, 135, 61, 241, 19, 156, 189, 35, 243, 130, 61, 132, 78, 33, 190, 185, 50, 8, 190, 31, 197, 176, 61, 190, 195, 39, 61, 122, 154, 125, 60, 154, 246, 131, 189, 8, 156, 231, 188, 126, 128, 41, 187, 79, 3, 144, 60, 31, 56, 222, 189, 105, 99, 190, 188, 228, 103, 141, 61, 16, 232, 185, 61, 137, 206, 136, 61, 63, 0, 31, 189, 146, 225, 241, 189, 187, 32, 35, 190, 31, 229, 232, 60, 186, 5, 41, 62, 204, 119, 30, 190, 47, 149, 19, 62, 35, 150, 192, 61, 26, 3, 175, 61, 9, 73, 226, 61, 155, 130, 33, 62, 148, 132, 128, 189, 67, 210, 26, 189, 165, 236, 123, 61, 157, 43, 155, 189, 197, 86, 178, 61, 53, 230, 40, 190, 239, 43, 94, 61, 206, 251, 45, 62, 93, 203, 46, 189, 18, 57, 6, 62, 218, 238, 172, 60, 168, 71, 48, 190, 171, 4, 46, 190, 25, 11, 48, 190, 255, 133, 52, 190, 147, 22, 45, 190, 72, 133, 224, 189, 123, 162, 47, 190, 143, 3, 43, 62, 106, 153, 182, 59, 8, 6, 15, 189, 74, 92, 194, 189, 146, 7, 24, 190, 146, 240, 215, 61, 216, 23, 223, 61, 234, 216, 253, 61, 218, 64, 148, 61, 132, 99, 143, 61, 133, 40, 205, 61, 16, 185, 156, 60, 83, 4, 34, 62, 70, 134, 250, 61, 27, 96, 222, 60, 228, 10, 25, 62, 79, 39, 197, 189, 204, 232, 181, 189, 113, 14, 20, 190, 98, 157, 184, 189, 113, 19, 149, 189, 251, 215, 211, 189, 12, 129, 168, 189, 73, 198, 181, 189, 205, 166, 202, 189, 217, 250, 61, 61, 154, 109, 61, 189, 43, 184, 40, 190, 201, 74, 52, 190, 25, 167, 187, 61, 234, 33, 201, 189, 189, 176, 13, 62, 200, 252, 199, 189, 219, 71, 45, 188, 242, 224, 169, 61, 70, 161, 2, 190, 232, 35, 191, 189, 76, 204, 236, 61, 90, 232, 39, 62, 155, 2, 136, 189, 123, 133, 174, 187, 53, 66, 132, 189, 18, 92, 187, 60, 124, 36, 166, 61, 18, 167, 29, 62, 122, 8, 187, 189, 180, 161, 245, 189, 155, 232, 50, 62, 148, 69, 48, 190, 17, 23, 22, 189, 248, 42, 242, 60, 115, 63, 200, 61, 172, 99, 216, 60, 9, 83, 227, 189, 180, 194, 29, 62, 200, 23, 179, 189, 99, 76, 70, 188, 55, 154, 255, 189, 14, 119, 165, 60, 235, 69, 128, 61, 152, 218, 25, 62, 1, 221, 13, 62, 44, 189, 180, 189, 222, 71, 175, 189, 46, 179, 35, 62, 226, 205, 44, 62, 20, 116, 57, 61, 51, 204, 30, 62, 238, 241, 19, 189, 5, 84, 247, 187, 205, 220, 140, 61, 27, 136, 0, 190, 206, 253, 83, 61, 211, 180, 239, 61, 29, 107, 47, 188, 119, 6, 59, 60, 82, 185, 0, 190, 240, 151, 160, 61, 136, 99, 4, 190, 77, 236, 249, 60, 23, 51, 202, 61, 192, 144, 8, 62, 83, 9, 140, 189, 150, 97, 42, 190, 111, 53, 1, 62, 131, 11, 206, 61, 63, 5, 4, 190, 175, 238, 132, 61, 166, 28, 26, 190, 216, 29, 6, 190, 118, 214, 49, 189, 247, 75, 144, 60, 188, 107, 246, 61, 207, 196, 126, 189, 191, 7, 147, 61, 122, 138, 138, 189, 150, 88, 175, 61, 250, 82, 185, 60, 40, 50, 23, 62, 222, 231, 185, 189, 217, 194, 119, 189, 54, 54, 41, 190, 114, 84, 0, 190, 61, 150, 47, 190, 153, 139, 222, 189, 151, 82, 4, 62, 127, 241, 100, 189, 251, 40, 208, 188, 39, 97, 195, 60, 228, 155, 167, 189, 159, 105, 43, 190, 214, 105, 44, 62, 228, 7, 164, 187, 170, 74, 83, 60, 50, 54, 153, 60, 51, 13, 209, 60, 36, 146, 25, 61, 232, 211, 226, 61, 27, 238, 89, 60, 148, 41, 227, 61, 208, 60, 141, 189, 206, 246, 253, 189, 46, 33, 246, 60, 253, 142, 192, 61, 49, 35, 19, 190, 12, 179, 18, 62, 163, 239, 186, 61, 82, 63, 254, 60, 177, 231, 6, 62, 70, 134, 198, 189, 203, 153, 211, 188, 59, 130, 2, 190, 104, 66, 4, 62, 168, 93, 7, 189, 226, 192, 41, 188, 112, 157, 41, 62, 43, 151, 214, 60, 169, 177, 179, 61, 147, 114, 151, 187, 161, 171, 210, 61, 179, 63, 153, 185, 249, 27, 24, 61, 251, 210, 253, 61, 118, 149, 241, 189, 231, 25, 35, 62, 66, 63, 230, 189, 251, 230, 18, 190, 88, 101, 234, 61, 172, 34, 213, 189, 205, 187, 156, 189, 74, 53, 97, 188, 221, 231, 27, 190, 221, 140, 0, 62, 151, 138, 205, 189, 62, 78, 156, 60, 152, 194, 22, 60, 26, 18, 25, 62, 66, 196, 71, 60, 17, 4, 12, 190, 46, 125, 135, 59, 5, 46, 32, 190, 30, 131, 174, 188, 255, 181, 233, 61, 158, 134, 151, 189, 27, 63, 102, 189, 20, 231, 141, 189, 23, 213, 152, 61, 5, 208, 47, 62, 215, 15, 155, 189, 86, 141, 170, 189, 176, 22, 153, 61, 193, 162, 28, 62, 122, 209, 39, 190, 72, 118, 243, 61, 180, 43, 83, 61, 100, 100, 140, 189, 128, 49, 197, 61, 210, 151, 126, 61, 89, 226, 175, 189, 7, 56, 33, 62, 29, 174, 215, 61, 223, 220, 204, 61, 12, 78, 141, 61, 143, 151, 249, 188, 220, 149, 1, 190, 154, 210, 165, 61, 1, 89, 121, 59, 24, 243, 63, 189, 252, 224, 195, 61, 177, 9, 244, 189, 222, 230, 48, 62, 216, 32, 255, 61, 50, 227, 178, 188, 169, 116, 192, 188, 232, 151, 143, 61, 191, 97, 110, 189, 27, 33, 12, 62, 99, 255, 183, 61, 209, 122, 44, 189, 93, 33, 169, 61, 235, 87, 154, 189, 108, 143, 31, 62, 106, 247, 216, 61, 199, 76, 76, 61, 142, 254, 186, 60, 124, 213, 31, 61, 210, 74, 160, 57, 19, 233, 40, 190, 26, 153, 4, 190, 46, 121, 6, 62, 225, 109, 227, 189, 22, 183, 55, 58, 68, 48, 228, 61, 18, 114, 8, 190, 132, 20, 176, 189, 225, 209, 21, 189, 39, 80, 159, 61, 131, 49, 250, 188, 217, 21, 92, 61, 116, 226, 193, 61, 188, 45, 7, 62, 217, 208, 26, 62, 238, 246, 140, 60, 255, 76, 158, 58, 181, 84, 21, 62, 153, 61, 24, 62, 223, 169, 52, 62, 173, 25, 204, 61, 52, 206, 51, 62, 157, 177, 87, 61, 98, 73, 217, 61, 246, 189, 26, 190, 130, 95, 8, 62, 164, 196, 49, 189, 32, 25, 78, 189, 246, 128, 189, 60, 166, 81, 237, 189, 126, 85, 33, 62, 17, 229, 1, 190, 231, 174, 65, 189, 151, 207, 89, 61, 245, 213, 59, 189, 176, 242, 169, 59, 167, 159, 35, 190, 75, 243, 184, 60, 79, 36, 180, 61, 47, 26, 10, 62, 141, 19, 92, 61, 25, 14, 108, 61, 91, 184, 13, 190, 42, 96, 24, 189, 252, 4, 32, 190, 29, 0, 10, 62, 165, 203, 25, 62, 199, 199, 230, 189, 64, 87, 156, 61, 240, 90, 226, 188, 42, 200, 46, 62, 106, 10, 180, 188, 250, 165, 60, 186, 242, 212, 151, 189, 135, 208, 188, 189, 127, 203, 224, 61, 176, 73, 86, 189, 250, 215, 202, 59, 63, 192, 195, 61, 89, 135, 220, 189, 93, 235, 123, 61, 212, 222, 197, 189, 58, 241, 29, 61, 38, 54, 137, 60, 63, 174, 162, 61, 161, 15, 230, 60, 133, 230, 252, 59, 157, 239, 31, 189, 90, 161, 134, 189, 76, 253, 169, 59, 72, 201, 13, 190, 110, 146, 124, 189, 88, 241, 217, 189, 122, 98, 143, 61, 136, 230, 136, 61, 19, 167, 230, 189, 67, 90, 131, 61, 164, 90, 9, 189, 136, 120, 23, 189, 208, 210, 171, 60, 224, 34, 218, 60, 212, 243, 127, 189, 235, 166, 40, 62, 39, 161, 5, 62, 218, 45, 244, 61, 198, 71, 152, 189, 35, 106, 237, 61, 216, 28, 163, 189, 140, 225, 27, 189, 7, 56, 53, 189, 245, 16, 138, 189, 102, 158, 188, 61, 227, 32, 81, 61, 164, 29, 22, 61, 179, 252, 154, 61, 236, 247, 52, 190, 119, 28, 71, 189, 242, 158, 95, 61, 118, 165, 217, 61, 84, 179, 225, 188, 25, 71, 204, 61, 214, 118, 11, 190, 65, 118, 8, 190, 170, 215, 79, 186, 247, 34, 224, 61, 118, 77, 27, 190, 254, 98, 0, 62, 177, 88, 50, 61, 134, 34, 83, 189, 143, 36, 13, 190, 211, 200, 219, 189, 77, 129, 34, 62, 148, 119, 76, 59, 72, 159, 226, 61, 91, 46, 192, 61, 168, 63, 115, 189, 140, 183, 81, 61, 150, 76, 190, 188, 157, 47, 208, 189, 3, 26, 240, 189, 36, 86, 81, 189, 94, 105, 46, 62, 73, 202, 182, 189, 201, 56, 83, 61, 205, 96, 16, 62, 218, 28, 52, 62, 102, 227, 20, 62, 116, 3, 56, 189, 153, 235, 7, 62, 209, 129, 77, 189, 66, 45, 218, 188, 215, 6, 170, 188, 9, 102, 254, 61, 21, 112, 14, 57, 90, 193, 37, 62, 13, 169, 26, 189, 201, 37, 116, 60, 96, 65, 10, 62, 217, 160, 187, 61, 155, 214, 95, 61, 47, 203, 126, 189, 241, 143, 248, 188, 29, 135, 10, 190, 224, 75, 8, 61, 181, 174, 119, 189, 149, 131, 33, 62, 94, 75, 140, 185, 207, 82, 202, 61, 197, 26, 5, 60, 54, 245, 141, 61, 154, 58, 202, 60, 62, 156, 47, 190, 219, 130, 15, 190, 173, 124, 180, 189, 204, 190, 14, 190, 132, 216, 219, 61, 116, 229, 24, 188, 105, 34, 9, 62, 36, 32, 160, 61, 168, 20, 165, 189, 123, 68, 153, 61, 251, 33, 22, 190, 48, 163, 0, 62, 174, 116, 170, 189, 121, 228, 33, 62, 101, 218, 27, 190, 124, 133, 146, 189, 22, 218, 68, 58, 172, 101, 219, 189, 157, 234, 30, 62, 68, 204, 21, 62, 28, 87, 19, 61, 13, 75, 127, 58, 29, 248, 213, 61, 68, 234, 27, 190, 194, 75, 234, 188, 146, 34, 18, 62, 83, 80, 172, 60, 124, 119, 230, 188, 9, 47, 8, 190, 58, 66, 36, 187, 190, 101, 85, 189, 152, 89, 254, 61, 44, 101, 57, 189, 48, 219, 245, 61, 211, 76, 204, 189, 77, 222, 65, 189, 143, 93, 19, 58, 167, 26, 200, 189, 166, 144, 189, 61, 99, 27, 30, 61, 166, 13, 113, 188, 184, 101, 18, 190, 118, 117, 170, 189, 95, 73, 8, 62, 56, 23, 71, 189, 126, 11, 14, 62, 237, 248, 130, 61, 197, 45, 230, 60, 186, 194, 213, 189, 105, 162, 196, 61, 53, 193, 145, 61, 37, 163, 145, 61, 140, 66, 44, 62, 73, 50, 73, 189, 44, 28, 135, 188, 0, 222, 46, 188, 231, 120, 5, 190, 108, 197, 153, 189, 166, 109, 200, 189, 213, 34, 191, 189, 99, 166, 25, 62, 157, 193, 215, 61, 163, 94, 148, 60, 49, 119, 19, 188, 151, 215, 68, 61, 215, 216, 48, 190, 187, 150, 138, 61, 101, 192, 62, 189, 159, 140, 125, 61, 159, 15, 1, 190, 122, 225, 26, 190, 151, 179, 184, 188, 94, 94, 141, 61, 130, 49, 14, 62, 184, 177, 216, 60, 6, 236, 36, 62, 200, 64, 151, 61, 141, 220, 122, 189, 198, 230, 34, 190, 54, 111, 20, 190, 160, 61, 142, 61, 72, 240, 3, 190, 60, 48, 169, 187, 8, 108, 33, 190, 228, 114, 196, 61, 44, 195, 26, 189, 236, 173, 77, 189, 68, 85, 216, 188, 142, 62, 2, 190, 253, 41, 3, 190, 225, 240, 160, 188, 103, 196, 218, 60, 207, 119, 47, 62, 151, 223, 149, 61, 209, 199, 142, 189, 116, 135, 112, 189, 10, 166, 40, 62, 43, 142, 152, 61, 61, 241, 159, 60, 4, 30, 60, 61, 78, 188, 182, 61, 177, 204, 21, 190, 114, 0, 129, 189, 175, 136, 244, 189, 183, 221, 21, 188, 94, 77, 119, 61, 202, 10, 77, 61, 196, 135, 232, 189, 147, 242, 17, 190, 138, 182, 0, 190, 40, 92, 198, 189, 114, 61, 184, 189, 15, 106, 50, 62, 24, 41, 29, 190, 211, 72, 21, 61, 4, 38, 29, 190, 209, 108, 245, 189, 66, 152, 209, 61, 34, 59, 53, 60, 242, 96, 113, 189, 234, 169, 14, 190, 122, 48, 3, 61, 250, 26, 32, 190, 31, 58, 14, 62, 128, 160, 3, 190, 28, 102, 253, 189, 8, 92, 148, 61, 209, 103, 244, 189, 82, 40, 132, 188, 59, 225, 20, 61, 127, 228, 59, 189, 115, 212, 0, 62, 49, 93, 219, 189, 17, 125, 150, 61, 166, 174, 233, 60, 170, 32, 77, 60, 17, 206, 114, 61, 157, 228, 152, 188, 193, 178, 161, 189, 120, 83, 200, 189, 253, 84, 31, 61, 164, 76, 127, 61, 150, 123, 131, 188, 60, 164, 213, 59, 90, 94, 186, 188, 186, 68, 45, 190, 109, 16, 232, 61, 110, 21, 23, 190, 10, 169, 150, 61, 211, 89, 198, 60, 181, 54, 121, 59, 101, 155, 166, 189, 153, 189, 156, 189, 157, 24, 146, 189, 145, 92, 55, 189, 91, 109, 169, 188, 17, 212, 116, 189, 196, 98, 120, 189, 234, 15, 205, 61, 130, 16, 128, 189, 104, 7, 23, 62, 247, 229, 179, 61, 106, 90, 196, 189, 240, 159, 236, 61, 195, 170, 31, 62, 100, 118, 186, 61, 112, 185, 7, 61, 209, 54, 138, 61, 26, 237, 120, 61, 167, 167, 130, 187, 51, 249, 36, 62, 205, 104, 17, 190, 18, 93, 6, 190, 223, 200, 20, 62, 60, 240, 178, 60, 229, 242, 2, 62, 224, 133, 187, 60, 102, 73, 128, 61, 86, 167, 187, 189, 226, 17, 186, 61, 24, 232, 217, 187, 223, 194, 49, 189, 133, 247, 179, 188, 70, 229, 238, 189, 70, 0, 91, 189, 50, 249, 228, 61, 253, 113, 101, 189, 22, 85, 21, 61, 188, 101, 49, 61, 7, 29, 19, 62, 200, 155, 44, 62, 239, 0, 119, 60, 10, 75, 239, 189, 194, 14, 9, 190, 189, 136, 248, 61, 203, 118, 49, 189, 183, 30, 12, 62, 213, 44, 130, 189, 72, 51, 26, 62, 57, 203, 43, 62, 229, 217, 161, 61, 216, 77, 125, 189, 96, 133, 146, 61, 78, 51, 144, 187, 0, 113, 141, 189, 208, 144, 238, 188, 224, 36, 7, 190, 222, 20, 129, 61, 180, 161, 137, 61, 0, 131, 251, 189, 133, 157, 59, 59, 204, 202, 0, 61, 50, 217, 190, 189, 233, 165, 18, 61, 244, 97, 49, 188, 99, 5, 241, 61, 22, 22, 48, 62, 168, 212, 49, 62, 76, 44, 43, 62, 222, 201, 17, 62, 135, 242, 21, 188, 124, 200, 41, 61, 171, 28, 42, 62, 131, 70, 82, 61, 0, 171, 22, 62, 63, 74, 50, 62, 184, 53, 147, 189, 228, 168, 2, 60, 185, 177, 20, 61, 250, 106, 205, 189, 62, 135, 230, 188, 220, 99, 193, 61, 44, 208, 24, 189, 104, 190, 45, 62, 137, 158, 184, 189, 240, 206, 224, 189, 98, 224, 108, 189, 210, 252, 77, 189, 179, 104, 252, 61, 169, 58, 131, 189, 210, 26, 100, 188, 172, 220, 110, 61, 186, 154, 134, 61, 204, 83, 11, 62, 137, 247, 6, 60, 61, 166, 16, 190, 55, 237, 0, 189, 47, 28, 215, 189, 116, 114, 149, 188, 169, 33, 164, 189, 84, 233, 176, 61, 201, 98, 16, 62, 218, 106, 78, 189, 117, 81, 133, 61, 191, 77, 42, 190, 128, 12, 132, 188, 234, 249, 192, 189, 230, 252, 208, 189, 241, 171, 159, 60, 76, 143, 31, 190, 84, 165, 200, 189, 34, 23, 226, 189, 168, 32, 228, 60, 84, 92, 143, 189, 35, 131, 5, 62, 248, 223, 199, 60, 185, 88, 82, 189, 199, 137, 174, 189, 245, 24, 226, 189, 204, 92, 250, 188, 217, 102, 119, 61, 195, 89, 214, 61, 61, 71, 25, 62, 217, 31, 238, 189, 25, 100, 181, 189, 155, 130, 8, 190, 191, 11, 175, 189, 110, 117, 12, 189, 253, 100, 69, 189, 153, 249, 225, 60, 73, 36, 225, 61, 240, 236, 13, 189, 80, 84, 103, 189, 65, 80, 171, 61, 128, 32, 39, 62, 156, 35, 25, 190, 6, 21, 152, 189, 46, 12, 205, 188, 190, 142, 58, 61, 254, 67, 91, 61, 13, 92, 178, 189, 122, 62, 146, 187, 243, 136, 103, 189, 134, 165, 88, 189, 3, 126, 1, 190, 45, 171, 33, 190, 156, 158, 129, 189, 189, 186, 232, 61, 42, 158, 16, 60, 110, 51, 16, 190, 130, 99, 195, 189, 169, 39, 207, 189, 241, 120, 16, 190, 105, 152, 52, 61, 186, 143, 133, 188, 116, 197, 126, 188, 192, 128, 149, 189, 143, 153, 147, 189, 57, 97, 45, 188, 230, 161, 153, 188, 224, 15, 48, 62, 65, 89, 4, 62, 185, 10, 146, 60, 32, 39, 41, 62, 251, 249, 9, 190, 202, 108, 226, 189, 16, 27, 226, 61, 221, 178, 26, 62, 180, 250, 12, 190, 71, 152, 207, 61, 8, 13, 13, 190, 169, 59, 87, 188, 187, 193, 48, 190, 129, 123, 10, 62, 125, 70, 144, 189, 131, 19, 70, 61, 249, 240, 111, 189, 53, 187, 208, 61, 158, 133, 125, 187, 24, 164, 23, 61, 75, 217, 242, 188, 47, 204, 164, 189, 250, 43, 157, 189, 48, 31, 152, 189, 45, 245, 47, 59, 92, 175, 4, 190, 180, 234, 242, 61, 83, 110, 49, 62, 248, 221, 243, 188, 203, 22, 70, 189, 213, 12, 203, 59, 36, 186, 27, 190, 244, 229, 255, 189, 65, 80, 137, 61, 86, 135, 193, 61, 214, 23, 33, 61, 46, 58, 11, 190, 50, 205, 8, 190, 168, 23, 168, 61, 176, 162, 21, 190, 175, 199, 30, 62, 246, 122, 229, 60, 108, 220, 251, 189, 61, 112, 16, 189, 195, 194, 234, 189, 68, 67, 126, 189, 207, 28, 220, 60, 41, 188, 210, 61, 17, 109, 52, 62, 213, 181, 117, 188, 86, 68, 242, 60, 99, 188, 87, 189, 212, 24, 153, 61, 17, 182, 6, 190, 9, 124, 197, 61, 74, 213, 192, 188, 79, 123, 56, 59, 173, 74, 133, 189, 232, 104, 246, 60, 166, 126, 28, 189, 245, 232, 178, 189, 85, 6, 153, 61, 98, 31, 142, 188, 189, 8, 200, 61, 229, 103, 37, 61, 128, 55, 240, 189, 232, 135, 131, 61, 228, 20, 123, 60, 238, 178, 52, 190, 185, 50, 7, 62, 102, 206, 240, 61, 167, 98, 68, 61, 186, 0, 152, 61, 181, 255, 166, 61, 7, 199, 225, 61, 183, 84, 247, 189, 255, 191, 148, 60, 87, 100, 131, 61, 100, 249, 130, 189, 53, 60, 48, 189, 83, 66, 254, 189, 235, 32, 172, 61, 39, 6, 10, 62, 155, 234, 45, 190, 49, 85, 173, 61, 129, 72, 241, 61, 13, 34, 27, 190, 195, 178, 163, 61, 101, 221, 216, 189, 185, 83, 158, 61, 85, 149, 19, 60, 230, 27, 149, 61, 144, 15, 171, 60, 42, 25, 254, 189, 55, 198, 48, 188, 29, 178, 13, 61, 7, 193, 50, 62, 126, 192, 243, 61, 181, 151, 53, 189, 74, 204, 42, 62, 199, 165, 35, 187, 58, 70, 214, 61, 172, 69, 252, 189, 248, 236, 204, 61, 125, 103, 250, 189, 80, 196, 206, 189, 214, 174, 13, 190, 87, 35, 9, 190, 189, 28, 13, 190, 34, 65, 38, 61, 237, 52, 47, 190, 16, 108, 245, 61, 183, 175, 1, 190, 41, 65, 38, 190, 84, 26, 204, 188, 169, 185, 12, 190, 74, 124, 237, 60, 16, 174, 23, 61, 147, 244, 4, 62, 200, 83, 156, 61, 36, 82, 14, 190, 175, 61, 47, 59, 34, 111, 35, 61, 200, 78, 156, 189, 41, 249, 94, 189, 202, 60, 156, 61, 255, 200, 44, 190, 200, 121, 175, 189, 15, 27, 212, 188, 175, 16, 120, 61, 11, 50, 174, 186, 122, 157, 128, 189, 72, 243, 3, 190, 255, 194, 31, 62, 159, 160, 251, 189, 251, 183, 103, 61, 111, 179, 203, 61, 114, 126, 163, 61, 111, 204, 118, 188, 103, 86, 214, 188, 239, 151, 159, 61, 137, 137, 24, 62, 194, 78, 195, 61, 142, 144, 18, 62, 213, 145, 149, 58, 248, 25, 178, 61, 213, 69, 239, 59, 195, 191, 44, 61, 77, 80, 28, 189, 155, 27, 83, 189, 216, 60, 221, 188, 45, 247, 129, 61, 49, 212, 210, 189, 166, 142, 233, 61, 7, 40, 173, 61, 236, 29, 172, 61, 136, 91, 31, 61, 243, 242, 42, 62, 44, 58, 174, 58, 68, 191, 136, 61, 191, 128, 47, 61, 132, 208, 85, 189, 16, 60, 49, 190, 36, 185, 143, 61, 105, 116, 134, 60, 60, 223, 164, 61, 77, 22, 159, 188, 202, 184, 1, 62, 2, 41, 24, 61, 70, 103, 170, 188, 181, 185, 111, 61, 52, 68, 149, 61, 129, 237, 206, 189, 34, 191, 54, 189, 19, 250, 227, 60, 89, 171, 209, 188, 82, 7, 224, 61, 205, 124, 186, 60, 197, 99, 116, 61, 100, 183, 245, 61, 61, 30, 43, 62, 25, 180, 83, 189, 207, 191, 111, 59, 125, 113, 9, 189, 225, 90, 75, 189, 221, 154, 14, 189, 36, 106, 129, 188, 78, 154, 227, 59, 7, 255, 136, 61, 41, 41, 14, 189, 201, 180, 30, 61, 21, 187, 251, 188, 42, 82, 167, 61, 50, 52, 153, 189, 77, 116, 29, 189, 166, 252, 10, 190, 55, 13, 159, 189, 31, 204, 97, 61, 209, 109, 31, 190, 225, 119, 136, 189, 172, 113, 254, 61, 177, 77, 160, 60, 240, 76, 163, 61, 208, 130, 41, 62, 113, 163, 177, 61, 122, 178, 198, 61, 116, 92, 236, 60, 171, 209, 23, 190, 138, 200, 209, 60, 227, 60, 255, 61, 23, 33, 46, 62, 40, 71, 2, 190, 106, 167, 226, 60, 36, 175, 181, 61, 248, 98, 131, 61, 11, 149, 221, 189, 250, 76, 202, 189, 188, 96, 199, 61, 214, 172, 44, 189, 182, 161, 69, 188, 52, 160, 23, 190, 117, 44, 121, 60, 192, 44, 73, 188, 74, 36, 218, 61, 239, 140, 24, 62, 65, 105, 37, 189, 127, 181, 195, 61, 70, 86, 202, 189, 178, 144, 28, 62, 12, 248, 188, 61, 81, 113, 197, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 172, 45, 62, 168, 84, 214, 187, 225, 43, 58, 61, 17, 46, 51, 190, 208, 99, 11, 61, 156, 99, 100, 61, 132, 121, 243, 61, 106, 5, 36, 58, 191, 202, 18, 61, 83, 218, 139, 189, 91, 172, 66, 60, 172, 190, 190, 187, 123, 200, 174, 61, 134, 210, 48, 190, 152, 124, 11, 189, 148, 113, 183, 61, 175, 241, 251, 188, 37, 12, 216, 188, 79, 150, 152, 189, 116, 45, 36, 62, 189, 223, 27, 190, 129, 177, 104, 189, 253, 164, 187, 188, 53, 111, 2, 62, 169, 48, 27, 190, 1, 65, 201, 61, 226, 163, 220, 189, 114, 1, 53, 190, 13, 103, 1, 62, 192, 130, 233, 61, 193, 234, 113, 189, 75, 18, 149, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 196, 133, 59, 207, 100, 176, 60, 2, 58, 18, 190, 244, 122, 223, 189, 209, 27, 244, 189, 127, 228, 95, 189, 55, 18, 36, 190, 255, 99, 209, 61, 40, 77, 212, 61, 170, 252, 79, 189, 179, 94, 80, 61, 98, 191, 217, 61, 10, 31, 197, 61, 206, 126, 52, 190, 11, 79, 124, 189, 36, 52, 178, 189, 185, 169, 14, 190, 121, 5, 54, 61, 253, 76, 51, 190, 35, 182, 204, 61, 156, 15, 230, 189, 100, 132, 247, 188, 156, 67, 230, 189, 112, 208, 144, 61, 134, 54, 6, 62, 144, 68, 17, 190, 57, 35, 145, 61, 11, 5, 50, 189, 211, 198, 178, 188, 153, 71, 25, 190, 209, 249, 190, 61, 203, 93, 80, 189, 240, 107, 197, 61, 242, 115, 43, 62, 170, 82, 15, 62, 163, 30, 49, 190, 86, 124, 40, 190, 250, 206, 254, 61, 241, 164, 47, 190, 48, 77, 23, 60, 124, 98, 7, 187, 55, 1, 147, 189, 30, 26, 157, 189, 107, 40, 20, 62, 168, 167, 73, 188, 175, 203, 4, 189, 1, 12, 145, 189, 200, 43, 165, 61, 225, 60, 38, 189, 60, 47, 234, 189, 117, 70, 145, 61, 168, 141, 208, 60, 100, 157, 155, 61, 6, 37, 204, 60, 58, 137, 5, 190, 219, 82, 122, 189, 73, 56, 150, 189, 119, 191, 96, 61, 125, 179, 9, 62, 84, 64, 42, 190, 191, 83, 12, 62, 46, 73, 30, 62, 168, 159, 73, 61, 73, 177, 240, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {9, 59, 92, 188, 48, 178, 187, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {251, 245, 34, 191, 149, 209, 8, 191, 248, 43, 162, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {152, 158, 17, 190, 20, 250, 33, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0021/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}