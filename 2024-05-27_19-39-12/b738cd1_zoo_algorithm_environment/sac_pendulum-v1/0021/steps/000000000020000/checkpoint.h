// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 225, 235, 62, 116, 111, 17, 62, 114, 66, 32, 191, 152, 13, 223, 60, 254, 106, 67, 63, 202, 63, 6, 63, 61, 171, 200, 61, 239, 129, 204, 189, 159, 159, 8, 62, 79, 190, 58, 190, 121, 189, 40, 191, 135, 65, 175, 62, 161, 233, 66, 191, 226, 118, 37, 191, 114, 169, 253, 188, 15, 143, 103, 190, 30, 154, 10, 63, 178, 104, 5, 191, 17, 239, 147, 62, 217, 254, 140, 191, 60, 27, 206, 61, 190, 10, 140, 189, 233, 150, 129, 191, 201, 47, 149, 62, 123, 83, 131, 191, 241, 169, 105, 191, 8, 212, 203, 188, 103, 200, 97, 60, 38, 208, 158, 61, 164, 238, 46, 191, 49, 205, 48, 62, 69, 20, 97, 63, 8, 252, 53, 190, 68, 41, 65, 61, 238, 248, 90, 63, 43, 43, 129, 190, 193, 189, 28, 62, 60, 156, 24, 63, 71, 16, 173, 189, 121, 104, 149, 191, 228, 137, 19, 63, 246, 26, 180, 188, 208, 174, 48, 63, 159, 225, 167, 191, 180, 140, 15, 190, 229, 86, 125, 190, 82, 11, 192, 191, 167, 85, 134, 190, 10, 179, 237, 62, 226, 28, 182, 63, 166, 58, 157, 62, 231, 245, 152, 62, 141, 161, 144, 191, 24, 118, 92, 62, 172, 122, 251, 190, 240, 171, 78, 62, 214, 127, 29, 191, 137, 70, 52, 191, 63, 154, 251, 63, 172, 206, 233, 62, 112, 87, 38, 63, 37, 26, 165, 191, 63, 129, 199, 190, 188, 87, 25, 63, 42, 61, 1, 62, 104, 240, 9, 63, 205, 0, 29, 61, 249, 120, 72, 63, 25, 97, 196, 62, 254, 211, 14, 191, 251, 92, 183, 190, 185, 76, 23, 63, 39, 30, 156, 190, 128, 20, 1, 63, 169, 102, 223, 190, 30, 14, 37, 191, 5, 89, 254, 62, 202, 246, 49, 63, 24, 134, 29, 62, 220, 60, 157, 63, 6, 158, 141, 62, 10, 84, 84, 63, 64, 183, 28, 191, 199, 220, 4, 62, 142, 64, 8, 63, 115, 117, 38, 63, 116, 121, 118, 62, 27, 162, 39, 62, 128, 58, 164, 63, 105, 105, 160, 62, 223, 54, 88, 62, 179, 84, 161, 191, 104, 173, 205, 190, 62, 247, 6, 62, 0, 160, 10, 191, 167, 215, 195, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 88, 136, 190, 188, 51, 10, 63, 180, 104, 70, 62, 96, 203, 238, 61, 93, 12, 204, 62, 197, 103, 25, 191, 245, 155, 46, 190, 192, 27, 79, 190, 67, 9, 226, 62, 210, 71, 211, 62, 6, 132, 28, 190, 78, 142, 37, 190, 219, 169, 223, 62, 28, 157, 112, 189, 176, 218, 36, 60, 204, 207, 218, 62, 21, 122, 210, 62, 62, 80, 16, 62, 161, 94, 30, 191, 59, 164, 94, 190, 193, 179, 216, 190, 134, 138, 39, 191, 52, 35, 5, 63, 113, 109, 45, 190, 191, 90, 226, 190, 189, 196, 26, 62, 121, 115, 58, 61, 96, 150, 134, 62, 9, 19, 235, 190, 42, 90, 231, 61, 233, 210, 8, 191, 94, 62, 224, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 235, 88, 62, 73, 21, 144, 59, 152, 3, 101, 189, 155, 115, 214, 62, 76, 194, 246, 57, 85, 50, 64, 62, 238, 228, 192, 189, 34, 114, 83, 63, 16, 2, 154, 190, 98, 58, 22, 62, 225, 247, 138, 62, 117, 28, 190, 62, 10, 52, 30, 190, 252, 90, 143, 60, 131, 150, 125, 187, 178, 134, 70, 189, 15, 203, 189, 190, 123, 130, 105, 190, 114, 99, 87, 61, 132, 154, 227, 62, 72, 252, 43, 62, 74, 16, 5, 189, 64, 190, 175, 190, 171, 67, 94, 62, 158, 24, 155, 58, 203, 28, 6, 191, 169, 74, 95, 190, 210, 166, 197, 190, 48, 51, 221, 190, 89, 79, 124, 190, 45, 69, 231, 60, 206, 248, 128, 60, 166, 218, 134, 61, 191, 41, 184, 61, 108, 201, 213, 61, 172, 36, 100, 190, 11, 185, 17, 189, 1, 225, 39, 191, 185, 169, 20, 190, 142, 154, 191, 190, 60, 200, 46, 61, 106, 131, 11, 190, 154, 1, 73, 191, 33, 148, 87, 62, 75, 81, 81, 62, 240, 196, 110, 62, 15, 137, 143, 62, 62, 84, 13, 62, 91, 122, 170, 190, 222, 140, 6, 190, 81, 19, 199, 190, 16, 23, 58, 63, 71, 209, 24, 63, 226, 183, 145, 190, 175, 87, 2, 62, 157, 221, 108, 62, 49, 179, 129, 61, 177, 144, 197, 62, 163, 32, 0, 191, 89, 122, 190, 62, 90, 43, 113, 191, 55, 141, 212, 190, 75, 152, 96, 191, 168, 129, 35, 190, 96, 180, 180, 190, 48, 83, 14, 191, 10, 7, 135, 189, 171, 24, 12, 190, 128, 85, 198, 189, 250, 75, 9, 190, 52, 68, 10, 61, 245, 73, 104, 189, 207, 200, 104, 62, 90, 96, 107, 61, 113, 233, 157, 190, 143, 210, 31, 190, 38, 118, 138, 190, 27, 80, 229, 190, 75, 96, 165, 190, 115, 226, 182, 61, 221, 202, 109, 190, 115, 59, 36, 61, 91, 155, 239, 189, 29, 97, 57, 191, 222, 85, 251, 189, 144, 17, 33, 190, 228, 126, 229, 190, 224, 19, 196, 190, 186, 234, 131, 190, 113, 31, 181, 190, 186, 212, 21, 190, 23, 134, 20, 191, 240, 13, 227, 188, 66, 104, 180, 189, 228, 237, 140, 190, 63, 56, 244, 60, 105, 157, 80, 190, 100, 188, 0, 192, 183, 102, 173, 190, 81, 74, 180, 62, 62, 166, 202, 62, 94, 30, 77, 61, 44, 227, 106, 62, 56, 11, 40, 63, 168, 225, 188, 62, 137, 27, 127, 62, 107, 73, 159, 62, 151, 164, 183, 190, 3, 23, 103, 61, 254, 237, 46, 62, 160, 56, 134, 190, 52, 162, 179, 62, 194, 225, 132, 62, 129, 170, 135, 188, 172, 86, 172, 62, 190, 215, 133, 191, 81, 99, 185, 188, 211, 74, 54, 60, 124, 118, 191, 191, 216, 32, 68, 191, 121, 196, 127, 190, 211, 164, 111, 191, 7, 109, 58, 189, 117, 43, 164, 62, 184, 241, 1, 190, 29, 224, 153, 62, 238, 125, 151, 187, 189, 160, 182, 61, 249, 68, 161, 190, 60, 144, 231, 190, 27, 38, 41, 61, 244, 67, 101, 189, 254, 238, 176, 62, 86, 245, 149, 62, 19, 34, 30, 61, 72, 135, 160, 61, 171, 243, 132, 62, 215, 179, 151, 62, 251, 126, 105, 62, 72, 102, 26, 190, 249, 137, 118, 62, 119, 139, 65, 189, 16, 180, 85, 191, 5, 108, 40, 188, 138, 89, 168, 62, 252, 155, 189, 190, 237, 63, 76, 61, 208, 35, 177, 191, 182, 117, 35, 191, 255, 252, 180, 62, 37, 124, 66, 190, 40, 191, 1, 191, 237, 246, 113, 190, 68, 10, 31, 191, 118, 81, 181, 62, 88, 161, 105, 190, 5, 0, 4, 62, 252, 144, 9, 62, 233, 56, 242, 189, 20, 13, 74, 62, 114, 236, 91, 190, 95, 212, 225, 190, 101, 5, 8, 189, 204, 250, 11, 62, 220, 17, 145, 190, 187, 164, 39, 62, 174, 248, 132, 190, 235, 1, 131, 189, 196, 209, 18, 191, 11, 167, 30, 62, 31, 212, 238, 61, 234, 136, 111, 62, 60, 55, 150, 62, 32, 240, 126, 61, 122, 219, 195, 190, 175, 124, 156, 190, 188, 25, 24, 62, 178, 212, 17, 190, 143, 129, 91, 190, 175, 35, 188, 190, 24, 129, 97, 191, 179, 99, 88, 190, 177, 101, 236, 190, 69, 148, 32, 190, 211, 160, 177, 61, 39, 214, 249, 189, 216, 119, 98, 185, 207, 72, 60, 62, 33, 14, 85, 190, 36, 176, 234, 188, 168, 52, 254, 190, 136, 145, 97, 190, 238, 193, 184, 188, 95, 132, 70, 187, 188, 128, 205, 61, 15, 65, 23, 62, 240, 38, 99, 60, 124, 242, 167, 62, 230, 17, 10, 190, 153, 218, 3, 189, 221, 185, 163, 61, 36, 251, 139, 187, 192, 95, 193, 62, 141, 216, 150, 190, 109, 250, 115, 62, 150, 139, 217, 62, 94, 129, 215, 190, 56, 43, 206, 190, 178, 58, 154, 61, 222, 37, 229, 189, 214, 254, 131, 62, 143, 113, 110, 191, 121, 163, 66, 191, 85, 165, 189, 189, 7, 105, 164, 189, 210, 3, 25, 190, 184, 16, 94, 189, 141, 109, 27, 62, 141, 79, 16, 61, 86, 217, 177, 61, 23, 100, 14, 191, 57, 146, 139, 62, 232, 225, 152, 190, 179, 79, 10, 62, 211, 224, 251, 60, 44, 111, 157, 189, 226, 6, 131, 61, 1, 40, 222, 190, 148, 217, 8, 191, 57, 105, 88, 190, 212, 89, 220, 62, 123, 108, 17, 191, 51, 235, 149, 190, 175, 162, 166, 61, 92, 2, 205, 60, 168, 49, 53, 62, 33, 71, 72, 62, 65, 122, 167, 190, 163, 97, 175, 62, 19, 172, 74, 188, 153, 166, 170, 61, 254, 46, 188, 61, 98, 64, 185, 61, 77, 61, 5, 63, 77, 21, 226, 62, 119, 56, 163, 189, 100, 1, 37, 190, 79, 137, 46, 190, 182, 172, 51, 62, 78, 137, 8, 190, 111, 217, 231, 62, 169, 238, 244, 61, 162, 211, 72, 63, 123, 24, 121, 62, 219, 144, 183, 59, 111, 157, 184, 60, 53, 28, 243, 189, 229, 75, 97, 62, 220, 32, 181, 188, 104, 36, 183, 190, 205, 67, 105, 62, 219, 167, 109, 190, 181, 89, 114, 187, 22, 179, 116, 190, 189, 248, 243, 61, 221, 46, 213, 190, 191, 151, 238, 61, 25, 0, 62, 63, 128, 246, 12, 61, 123, 202, 18, 63, 156, 238, 162, 62, 136, 135, 21, 62, 5, 78, 173, 59, 63, 40, 155, 189, 33, 175, 232, 190, 152, 159, 232, 62, 75, 179, 126, 62, 29, 119, 57, 189, 160, 60, 195, 61, 208, 147, 59, 62, 147, 28, 38, 63, 9, 15, 135, 62, 41, 50, 55, 190, 252, 250, 147, 190, 168, 243, 119, 189, 210, 149, 107, 190, 229, 177, 57, 190, 140, 60, 185, 191, 217, 53, 89, 62, 94, 200, 177, 188, 105, 9, 150, 60, 130, 219, 198, 189, 91, 27, 76, 62, 169, 88, 27, 62, 127, 49, 254, 190, 149, 11, 12, 189, 209, 156, 197, 60, 193, 10, 200, 189, 201, 47, 212, 62, 179, 105, 161, 189, 158, 36, 128, 61, 30, 5, 148, 62, 208, 72, 173, 62, 225, 198, 104, 190, 147, 184, 49, 62, 221, 225, 54, 190, 60, 240, 45, 61, 129, 25, 213, 62, 42, 202, 164, 62, 10, 255, 95, 190, 29, 181, 12, 62, 7, 95, 238, 189, 124, 118, 224, 188, 155, 66, 33, 62, 85, 42, 9, 190, 85, 26, 226, 62, 163, 103, 243, 190, 233, 32, 33, 60, 131, 232, 225, 190, 254, 91, 220, 59, 67, 38, 240, 188, 104, 98, 74, 62, 222, 122, 98, 62, 98, 39, 179, 190, 246, 90, 148, 62, 47, 208, 137, 191, 10, 212, 134, 62, 64, 25, 8, 190, 9, 74, 131, 62, 246, 231, 109, 60, 68, 234, 83, 187, 212, 230, 175, 62, 0, 1, 7, 190, 58, 134, 227, 189, 128, 17, 164, 62, 150, 239, 165, 60, 137, 1, 191, 189, 151, 161, 115, 62, 213, 251, 42, 191, 48, 173, 18, 62, 235, 160, 108, 61, 161, 7, 164, 189, 91, 4, 175, 61, 54, 164, 42, 62, 153, 20, 156, 190, 66, 196, 59, 62, 243, 221, 191, 189, 234, 70, 150, 188, 236, 43, 35, 190, 194, 191, 91, 61, 5, 183, 155, 62, 107, 182, 216, 61, 156, 75, 181, 61, 52, 125, 84, 60, 128, 250, 228, 61, 18, 225, 137, 190, 241, 194, 87, 191, 93, 169, 9, 62, 161, 165, 220, 190, 86, 153, 209, 190, 224, 211, 180, 190, 50, 0, 211, 188, 20, 181, 5, 63, 255, 89, 60, 188, 234, 52, 11, 62, 205, 248, 80, 190, 192, 19, 65, 190, 179, 117, 133, 189, 98, 35, 93, 189, 246, 251, 44, 191, 138, 54, 21, 62, 252, 212, 52, 62, 33, 224, 224, 61, 251, 38, 246, 189, 243, 64, 127, 190, 19, 30, 4, 191, 179, 211, 2, 190, 60, 167, 149, 190, 103, 179, 169, 62, 14, 148, 174, 190, 94, 220, 14, 63, 118, 144, 196, 61, 215, 246, 141, 62, 54, 22, 224, 188, 39, 200, 45, 190, 253, 171, 25, 191, 67, 254, 235, 189, 123, 209, 180, 190, 173, 133, 137, 62, 16, 251, 158, 190, 195, 152, 159, 189, 181, 21, 189, 190, 4, 97, 172, 62, 2, 63, 49, 190, 218, 55, 33, 190, 78, 123, 217, 62, 172, 64, 118, 62, 68, 48, 201, 62, 187, 78, 151, 190, 25, 208, 218, 61, 62, 51, 77, 191, 121, 202, 44, 189, 11, 239, 105, 190, 142, 250, 67, 62, 21, 211, 51, 191, 246, 91, 184, 190, 50, 95, 196, 190, 38, 14, 207, 189, 242, 168, 118, 62, 59, 108, 177, 190, 208, 65, 123, 191, 56, 251, 195, 189, 16, 121, 56, 190, 85, 33, 95, 191, 135, 46, 65, 189, 150, 89, 59, 190, 44, 246, 89, 62, 8, 204, 62, 190, 217, 74, 17, 190, 249, 169, 1, 191, 23, 112, 29, 191, 218, 217, 49, 190, 70, 130, 188, 190, 143, 108, 119, 190, 190, 69, 238, 190, 208, 76, 246, 60, 34, 65, 183, 61, 186, 175, 230, 188, 178, 239, 7, 189, 232, 178, 164, 189, 164, 252, 226, 189, 87, 38, 247, 190, 140, 12, 189, 61, 141, 119, 61, 191, 79, 167, 146, 190, 171, 69, 136, 189, 102, 27, 31, 190, 9, 108, 90, 191, 241, 226, 234, 60, 144, 109, 188, 190, 242, 126, 28, 188, 61, 15, 70, 190, 90, 78, 55, 189, 51, 78, 124, 61, 162, 22, 56, 191, 194, 190, 208, 61, 46, 172, 255, 60, 130, 114, 218, 187, 134, 203, 219, 189, 203, 103, 33, 189, 161, 47, 153, 189, 115, 246, 11, 190, 202, 97, 150, 61, 89, 39, 125, 62, 67, 141, 153, 189, 144, 67, 146, 60, 104, 245, 90, 62, 90, 70, 58, 62, 114, 222, 116, 62, 34, 53, 123, 190, 186, 207, 80, 62, 225, 172, 187, 58, 234, 247, 222, 190, 176, 203, 124, 190, 108, 205, 82, 62, 1, 160, 25, 190, 233, 170, 89, 62, 19, 88, 223, 190, 179, 72, 11, 191, 47, 233, 53, 62, 178, 120, 190, 61, 38, 100, 163, 60, 205, 62, 5, 190, 249, 138, 50, 189, 198, 10, 26, 190, 226, 0, 219, 61, 28, 225, 160, 190, 59, 6, 104, 62, 105, 23, 247, 189, 81, 250, 196, 60, 219, 235, 49, 61, 112, 80, 93, 61, 10, 18, 1, 188, 230, 179, 185, 190, 235, 191, 246, 190, 4, 143, 100, 61, 255, 178, 158, 191, 50, 97, 186, 58, 120, 149, 202, 191, 141, 216, 79, 62, 36, 245, 155, 62, 55, 33, 47, 61, 52, 156, 129, 62, 213, 105, 250, 61, 163, 67, 244, 190, 145, 213, 105, 191, 79, 101, 140, 62, 81, 158, 188, 190, 67, 61, 46, 190, 35, 150, 47, 189, 240, 96, 107, 191, 166, 45, 5, 62, 102, 183, 211, 61, 187, 59, 69, 190, 222, 50, 27, 61, 135, 111, 118, 61, 5, 43, 37, 189, 105, 156, 147, 60, 176, 144, 233, 189, 232, 3, 177, 61, 93, 176, 94, 191, 10, 109, 60, 190, 152, 61, 154, 190, 93, 172, 10, 62, 14, 68, 25, 62, 203, 85, 216, 61, 212, 7, 143, 62, 162, 160, 140, 61, 98, 124, 141, 61, 83, 0, 194, 61, 71, 221, 52, 189, 37, 156, 135, 190, 178, 224, 113, 61, 3, 201, 245, 62, 223, 91, 1, 190, 235, 245, 57, 62, 85, 83, 113, 188, 24, 125, 240, 190, 242, 101, 126, 62, 72, 46, 34, 62, 180, 147, 57, 190, 114, 90, 10, 190, 75, 82, 181, 191, 182, 127, 53, 62, 115, 41, 90, 62, 0, 167, 146, 62, 205, 3, 46, 61, 194, 15, 4, 62, 119, 3, 253, 61, 80, 71, 98, 189, 70, 66, 131, 61, 166, 19, 212, 60, 236, 169, 62, 191, 110, 173, 229, 190, 125, 119, 75, 62, 31, 236, 11, 62, 227, 134, 142, 62, 56, 72, 127, 62, 54, 84, 214, 190, 70, 147, 153, 62, 218, 173, 194, 62, 252, 172, 31, 189, 121, 171, 214, 190, 103, 131, 117, 61, 150, 244, 149, 62, 157, 54, 163, 62, 241, 215, 199, 62, 242, 238, 250, 61, 123, 167, 233, 62, 45, 184, 152, 61, 128, 100, 76, 190, 73, 223, 120, 62, 62, 32, 53, 60, 217, 160, 91, 63, 121, 200, 148, 61, 252, 118, 235, 189, 225, 124, 80, 190, 177, 172, 29, 190, 146, 255, 165, 61, 108, 16, 145, 191, 234, 212, 212, 190, 226, 46, 91, 190, 195, 197, 202, 190, 107, 167, 3, 190, 201, 160, 152, 60, 75, 49, 187, 62, 151, 223, 149, 61, 209, 199, 142, 189, 116, 135, 112, 189, 10, 166, 40, 62, 43, 142, 152, 61, 61, 241, 159, 60, 4, 30, 60, 61, 78, 188, 182, 61, 177, 204, 21, 190, 114, 0, 129, 189, 175, 136, 244, 189, 183, 221, 21, 188, 94, 77, 119, 61, 202, 10, 77, 61, 196, 135, 232, 189, 147, 242, 17, 190, 138, 182, 0, 190, 40, 92, 198, 189, 114, 61, 184, 189, 15, 106, 50, 62, 24, 41, 29, 190, 211, 72, 21, 61, 4, 38, 29, 190, 209, 108, 245, 189, 66, 152, 209, 61, 34, 59, 53, 60, 242, 96, 113, 189, 234, 169, 14, 190, 122, 48, 3, 61, 250, 26, 32, 190, 31, 58, 14, 62, 128, 160, 3, 190, 6, 150, 164, 187, 53, 80, 210, 61, 14, 179, 71, 61, 153, 98, 157, 190, 177, 108, 18, 62, 172, 111, 127, 191, 30, 103, 174, 62, 160, 155, 132, 190, 198, 108, 47, 62, 249, 24, 157, 60, 77, 243, 210, 189, 14, 133, 33, 63, 222, 93, 1, 62, 99, 131, 228, 188, 43, 248, 78, 62, 49, 249, 119, 61, 52, 239, 35, 190, 207, 70, 140, 62, 116, 10, 20, 191, 60, 195, 3, 62, 63, 146, 98, 189, 119, 85, 67, 190, 127, 132, 73, 189, 25, 145, 122, 62, 50, 132, 111, 190, 178, 139, 103, 61, 194, 62, 50, 191, 160, 63, 1, 60, 128, 86, 110, 191, 244, 99, 178, 190, 145, 222, 245, 189, 51, 18, 131, 190, 28, 57, 21, 190, 226, 205, 206, 61, 76, 250, 201, 61, 14, 108, 135, 62, 199, 132, 15, 189, 127, 222, 4, 62, 137, 200, 101, 60, 124, 88, 84, 62, 135, 24, 147, 191, 128, 130, 218, 61, 89, 26, 160, 62, 128, 139, 52, 61, 233, 2, 109, 62, 55, 8, 216, 62, 20, 33, 152, 190, 67, 165, 82, 191, 39, 150, 130, 62, 254, 131, 188, 189, 77, 216, 147, 61, 171, 154, 49, 190, 92, 251, 30, 191, 219, 68, 164, 61, 175, 228, 138, 61, 146, 170, 59, 190, 167, 128, 187, 189, 61, 94, 214, 188, 128, 194, 119, 189, 249, 93, 146, 62, 183, 223, 96, 190, 164, 54, 150, 188, 147, 144, 51, 191, 98, 208, 50, 188, 49, 80, 245, 190, 233, 172, 202, 189, 71, 243, 123, 62, 53, 180, 225, 61, 169, 7, 82, 190, 126, 42, 29, 63, 150, 199, 6, 62, 161, 208, 125, 62, 10, 94, 144, 190, 186, 220, 192, 62, 236, 210, 150, 62, 188, 66, 10, 191, 5, 231, 69, 61, 177, 30, 95, 61, 191, 198, 76, 191, 7, 217, 219, 189, 205, 133, 2, 62, 184, 210, 12, 190, 110, 105, 178, 62, 185, 94, 30, 191, 249, 238, 164, 191, 24, 0, 153, 62, 100, 210, 51, 190, 59, 207, 86, 190, 226, 100, 201, 190, 234, 76, 39, 190, 188, 41, 98, 62, 217, 133, 4, 63, 12, 50, 91, 61, 53, 231, 85, 62, 167, 202, 218, 190, 255, 211, 51, 61, 211, 132, 210, 189, 157, 218, 60, 62, 187, 158, 137, 62, 29, 250, 46, 62, 189, 33, 144, 62, 227, 250, 28, 62, 47, 198, 18, 62, 158, 187, 172, 189, 6, 212, 135, 189, 99, 24, 176, 61, 105, 241, 215, 62, 109, 228, 77, 190, 201, 243, 159, 62, 128, 249, 216, 61, 163, 43, 98, 190, 131, 132, 32, 190, 252, 221, 91, 188, 98, 239, 85, 61, 237, 12, 108, 61, 95, 249, 166, 190, 17, 13, 125, 190, 74, 144, 32, 62, 237, 41, 29, 62, 60, 59, 10, 190, 207, 132, 91, 190, 40, 180, 212, 188, 82, 131, 21, 190, 176, 136, 129, 62, 155, 125, 253, 190, 66, 13, 40, 62, 90, 47, 201, 61, 88, 34, 109, 61, 166, 30, 70, 61, 136, 64, 136, 190, 214, 16, 213, 62, 196, 225, 227, 62, 245, 131, 110, 190, 140, 159, 138, 189, 88, 52, 171, 62, 64, 107, 142, 62, 27, 232, 24, 190, 37, 243, 193, 61, 167, 129, 35, 190, 35, 54, 194, 62, 187, 32, 146, 60, 186, 230, 187, 190, 81, 67, 170, 62, 145, 204, 196, 189, 16, 217, 124, 190, 72, 40, 2, 63, 48, 76, 215, 61, 20, 153, 4, 191, 246, 151, 136, 61, 19, 181, 49, 190, 144, 175, 75, 190, 114, 41, 1, 62, 207, 74, 12, 189, 214, 141, 149, 190, 227, 220, 111, 191, 29, 29, 1, 63, 220, 13, 82, 191, 174, 60, 251, 190, 23, 115, 227, 61, 43, 33, 133, 62, 156, 35, 25, 190, 6, 21, 152, 189, 46, 12, 205, 188, 190, 142, 58, 61, 254, 67, 91, 61, 13, 92, 178, 189, 122, 62, 146, 187, 243, 136, 103, 189, 134, 165, 88, 189, 3, 126, 1, 190, 45, 171, 33, 190, 156, 158, 129, 189, 189, 186, 232, 61, 42, 158, 16, 60, 110, 51, 16, 190, 130, 99, 195, 189, 169, 39, 207, 189, 241, 120, 16, 190, 105, 152, 52, 61, 186, 143, 133, 188, 116, 197, 126, 188, 192, 128, 149, 189, 143, 153, 147, 189, 57, 97, 45, 188, 230, 161, 153, 188, 224, 15, 48, 62, 65, 89, 4, 62, 185, 10, 146, 60, 32, 39, 41, 62, 251, 249, 9, 190, 202, 108, 226, 189, 16, 27, 226, 61, 45, 153, 232, 62, 119, 220, 134, 190, 111, 163, 63, 190, 232, 182, 213, 62, 111, 191, 94, 189, 125, 226, 174, 189, 44, 144, 182, 62, 113, 168, 230, 62, 129, 211, 155, 61, 84, 203, 43, 190, 197, 167, 97, 190, 210, 199, 179, 189, 101, 116, 212, 190, 150, 59, 158, 191, 116, 71, 90, 62, 81, 185, 117, 188, 188, 224, 233, 191, 209, 166, 254, 61, 35, 154, 142, 189, 146, 47, 48, 59, 186, 186, 3, 63, 70, 116, 84, 191, 23, 12, 225, 190, 17, 247, 143, 62, 218, 238, 113, 62, 91, 113, 23, 190, 202, 233, 208, 190, 148, 139, 255, 61, 78, 200, 130, 189, 37, 117, 100, 191, 61, 115, 176, 61, 93, 232, 199, 61, 161, 126, 8, 189, 13, 201, 45, 62, 199, 110, 77, 62, 59, 164, 179, 190, 145, 43, 255, 60, 236, 244, 174, 191, 162, 198, 254, 61, 233, 134, 191, 189, 147, 225, 33, 62, 33, 161, 4, 62, 228, 201, 196, 189, 29, 83, 24, 63, 137, 215, 2, 62, 32, 137, 147, 61, 238, 108, 34, 62, 192, 147, 18, 62, 61, 59, 128, 190, 194, 73, 165, 62, 172, 234, 42, 191, 129, 217, 219, 188, 87, 79, 101, 61, 211, 252, 185, 190, 87, 12, 63, 62, 227, 125, 48, 62, 217, 112, 159, 190, 57, 170, 243, 61, 252, 191, 73, 191, 79, 81, 85, 62, 101, 147, 113, 191, 30, 203, 5, 191, 106, 121, 128, 188, 58, 1, 239, 189, 167, 216, 241, 61, 4, 168, 55, 62, 225, 90, 130, 189, 25, 78, 62, 62, 6, 134, 147, 188, 202, 46, 9, 189, 195, 119, 132, 62, 169, 152, 10, 188, 188, 128, 59, 187, 252, 4, 165, 190, 193, 12, 129, 190, 11, 22, 167, 62, 219, 143, 228, 190, 123, 31, 177, 189, 194, 251, 173, 62, 114, 116, 202, 189, 5, 21, 22, 60, 37, 155, 45, 187, 99, 99, 23, 189, 248, 247, 188, 61, 156, 179, 142, 62, 105, 75, 42, 187, 206, 161, 88, 189, 249, 193, 27, 62, 210, 241, 232, 61, 127, 158, 160, 62, 169, 119, 249, 61, 143, 195, 6, 62, 97, 230, 128, 62, 93, 213, 69, 188, 31, 24, 164, 62, 9, 163, 249, 189, 136, 254, 176, 61, 96, 38, 150, 190, 99, 121, 9, 190, 103, 191, 11, 190, 225, 132, 19, 190, 238, 66, 15, 190, 46, 59, 184, 189, 141, 107, 46, 190, 74, 110, 175, 61, 226, 69, 35, 190, 226, 9, 133, 190, 10, 124, 163, 189, 9, 102, 215, 189, 156, 105, 3, 188, 38, 166, 232, 189, 165, 134, 197, 61, 162, 11, 166, 189, 36, 138, 67, 190, 229, 108, 144, 188, 183, 179, 100, 61, 48, 74, 15, 190, 129, 73, 98, 189, 227, 13, 152, 61, 106, 176, 67, 190, 100, 49, 233, 189, 168, 128, 44, 60, 238, 35, 110, 61, 239, 235, 42, 190, 122, 157, 128, 189, 19, 31, 163, 190, 246, 153, 129, 61, 32, 6, 65, 190, 7, 223, 238, 189, 175, 167, 244, 190, 17, 221, 242, 189, 9, 184, 151, 61, 169, 189, 151, 61, 4, 160, 183, 62, 234, 250, 94, 190, 225, 201, 139, 62, 4, 19, 151, 62, 4, 81, 34, 62, 255, 205, 36, 62, 232, 94, 7, 191, 70, 223, 155, 61, 207, 198, 76, 190, 47, 158, 117, 190, 229, 89, 13, 62, 88, 199, 250, 62, 81, 112, 233, 190, 40, 29, 151, 62, 159, 205, 194, 191, 11, 45, 228, 189, 107, 181, 113, 62, 15, 3, 20, 190, 28, 226, 2, 191, 159, 148, 10, 190, 130, 67, 84, 191, 106, 33, 11, 63, 58, 3, 8, 61, 236, 39, 14, 62, 215, 216, 186, 62, 51, 121, 206, 61, 165, 98, 228, 61, 142, 81, 10, 62, 74, 135, 60, 188, 80, 54, 30, 190, 239, 82, 17, 191, 201, 227, 104, 187, 13, 85, 250, 190, 20, 177, 157, 189, 114, 56, 168, 190, 215, 195, 24, 190, 149, 62, 167, 189, 39, 248, 190, 190, 80, 100, 209, 62, 252, 115, 138, 61, 109, 180, 115, 62, 95, 125, 42, 188, 143, 47, 0, 190, 40, 130, 212, 190, 161, 65, 154, 189, 231, 99, 48, 190, 92, 122, 26, 62, 192, 38, 9, 62, 74, 32, 28, 190, 177, 124, 118, 188, 153, 30, 249, 61, 222, 51, 23, 62, 80, 203, 80, 61, 244, 210, 28, 191, 242, 203, 218, 189, 111, 231, 15, 191, 34, 232, 220, 190, 123, 149, 210, 61, 174, 162, 227, 190, 13, 187, 159, 190, 225, 192, 55, 191, 226, 73, 83, 189, 224, 113, 222, 62, 213, 90, 159, 62, 242, 191, 241, 62, 249, 42, 192, 187, 109, 75, 167, 62, 50, 222, 238, 188, 0, 146, 69, 62, 197, 41, 155, 62, 107, 213, 157, 190, 128, 73, 152, 60, 90, 86, 0, 188, 191, 201, 22, 190, 101, 210, 38, 62, 104, 175, 171, 62, 33, 205, 209, 190, 229, 142, 135, 62, 70, 87, 189, 191, 169, 41, 160, 190, 22, 22, 144, 190, 38, 167, 163, 190, 115, 198, 207, 190, 128, 7, 226, 189, 49, 127, 2, 191, 161, 255, 28, 63, 218, 63, 179, 62, 30, 169, 33, 190, 155, 21, 23, 63, 136, 146, 196, 188, 167, 42, 105, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {124, 131, 89, 189, 150, 75, 15, 62, 127, 3, 195, 188, 145, 38, 40, 61, 81, 236, 254, 61, 60, 19, 77, 61, 89, 149, 116, 62, 235, 208, 184, 189, 91, 63, 123, 62, 108, 24, 163, 61, 163, 188, 102, 62, 148, 218, 74, 190, 209, 145, 179, 62, 204, 101, 152, 190, 60, 4, 193, 60, 108, 128, 99, 62, 78, 52, 163, 61, 0, 103, 59, 61, 79, 150, 152, 189, 14, 10, 215, 62, 164, 25, 169, 60, 163, 188, 178, 188, 159, 142, 5, 62, 175, 111, 109, 62, 169, 48, 27, 190, 82, 51, 187, 189, 172, 38, 5, 62, 217, 8, 143, 190, 179, 194, 221, 61, 178, 59, 17, 62, 10, 239, 238, 189, 144, 76, 129, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 137, 64, 62, 215, 159, 134, 63, 118, 127, 66, 191, 205, 214, 30, 191, 205, 169, 140, 191, 250, 249, 193, 190, 1, 131, 7, 191, 78, 166, 130, 62, 24, 147, 16, 63, 45, 126, 34, 62, 45, 22, 180, 61, 227, 17, 60, 63, 66, 211, 144, 63, 3, 30, 129, 190, 164, 183, 157, 189, 105, 192, 66, 191, 29, 67, 177, 190, 20, 190, 222, 62, 253, 76, 51, 190, 218, 84, 14, 63, 80, 174, 248, 190, 74, 49, 44, 191, 99, 231, 32, 189, 201, 164, 134, 62, 134, 54, 6, 62, 111, 219, 131, 191, 60, 196, 70, 63, 139, 88, 72, 190, 46, 201, 211, 185, 192, 171, 237, 190, 31, 27, 29, 63, 163, 1, 156, 190, 95, 15, 233, 60, 109, 213, 80, 63, 76, 23, 21, 62, 149, 229, 23, 190, 131, 119, 149, 62, 8, 233, 62, 63, 94, 52, 40, 191, 202, 10, 53, 190, 127, 158, 4, 189, 116, 23, 62, 190, 22, 64, 137, 190, 76, 64, 152, 62, 10, 66, 129, 189, 94, 109, 230, 62, 59, 3, 121, 190, 121, 78, 234, 189, 35, 218, 90, 189, 9, 179, 101, 59, 117, 70, 145, 61, 166, 186, 6, 190, 8, 125, 152, 190, 21, 69, 187, 61, 209, 124, 169, 190, 42, 2, 76, 190, 73, 56, 150, 189, 248, 216, 70, 62, 1, 179, 10, 62, 15, 125, 182, 189, 18, 29, 39, 62, 66, 119, 19, 62, 76, 224, 253, 61, 175, 146, 73, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 17, 176, 59, 162, 0, 205, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {120, 155, 9, 64, 139, 93, 129, 191, 157, 10, 187, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {141, 110, 80, 64, 176, 142, 140, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0021/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}