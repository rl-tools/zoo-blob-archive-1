// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 133, 211, 62, 182, 132, 214, 62, 27, 192, 19, 191, 221, 134, 253, 61, 126, 106, 211, 190, 33, 154, 214, 62, 62, 27, 103, 62, 14, 111, 13, 190, 78, 186, 220, 188, 40, 254, 165, 62, 172, 5, 43, 191, 19, 176, 102, 62, 131, 196, 229, 190, 235, 166, 69, 190, 16, 176, 174, 188, 1, 252, 16, 191, 95, 16, 121, 63, 86, 192, 79, 190, 84, 13, 50, 61, 215, 151, 69, 191, 116, 186, 147, 189, 231, 88, 141, 60, 189, 148, 38, 191, 9, 205, 155, 62, 110, 85, 30, 191, 42, 93, 37, 191, 91, 87, 88, 190, 8, 66, 24, 62, 50, 88, 212, 62, 231, 40, 13, 191, 159, 124, 224, 189, 84, 52, 83, 63, 177, 185, 46, 59, 18, 255, 36, 62, 206, 109, 45, 63, 251, 4, 136, 190, 203, 124, 41, 62, 157, 11, 48, 63, 75, 192, 145, 189, 123, 213, 37, 191, 86, 84, 64, 63, 59, 29, 73, 61, 41, 28, 245, 62, 28, 167, 49, 191, 145, 53, 27, 190, 188, 177, 19, 191, 192, 187, 176, 190, 117, 134, 189, 190, 248, 0, 13, 63, 234, 143, 230, 62, 199, 20, 13, 63, 244, 236, 50, 62, 95, 42, 86, 191, 33, 124, 236, 61, 218, 63, 30, 191, 116, 203, 14, 63, 186, 176, 218, 190, 101, 73, 235, 190, 128, 106, 242, 62, 80, 69, 135, 62, 61, 73, 179, 62, 175, 81, 48, 190, 135, 203, 218, 190, 144, 120, 252, 62, 102, 16, 118, 190, 232, 48, 6, 63, 148, 104, 218, 61, 232, 63, 179, 190, 35, 235, 146, 62, 196, 178, 99, 190, 219, 51, 146, 191, 183, 168, 139, 62, 48, 76, 133, 61, 96, 63, 12, 63, 227, 224, 242, 190, 170, 28, 156, 190, 173, 112, 224, 190, 63, 172, 255, 62, 191, 234, 90, 62, 44, 133, 129, 62, 77, 72, 146, 62, 160, 23, 94, 63, 56, 95, 40, 191, 244, 220, 77, 60, 109, 60, 24, 62, 115, 146, 188, 62, 39, 162, 1, 62, 72, 32, 139, 62, 93, 242, 220, 62, 204, 160, 210, 62, 206, 95, 246, 190, 237, 108, 28, 191, 71, 56, 214, 190, 6, 181, 35, 62, 148, 177, 118, 62, 24, 156, 106, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 116, 229, 190, 24, 75, 218, 62, 10, 122, 224, 62, 83, 47, 164, 189, 38, 200, 177, 62, 152, 16, 145, 190, 62, 248, 75, 62, 9, 114, 210, 190, 13, 59, 168, 62, 88, 19, 3, 63, 163, 152, 29, 62, 214, 123, 27, 190, 183, 136, 20, 63, 103, 121, 137, 190, 230, 23, 122, 62, 151, 227, 6, 63, 122, 38, 211, 61, 34, 111, 206, 62, 244, 176, 179, 190, 108, 100, 59, 62, 45, 124, 179, 190, 190, 172, 10, 191, 200, 234, 9, 63, 88, 210, 83, 62, 118, 28, 1, 191, 227, 182, 207, 62, 197, 176, 126, 190, 43, 127, 177, 62, 178, 118, 195, 190, 211, 56, 24, 187, 84, 42, 30, 191, 32, 36, 37, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 127, 135, 62, 31, 245, 153, 189, 57, 162, 211, 189, 54, 117, 147, 189, 213, 196, 200, 61, 100, 221, 152, 61, 68, 23, 237, 189, 64, 247, 40, 62, 195, 222, 58, 190, 105, 120, 23, 62, 27, 188, 43, 62, 90, 83, 191, 62, 220, 133, 16, 190, 197, 221, 208, 59, 16, 97, 11, 190, 3, 240, 13, 188, 0, 110, 188, 61, 50, 54, 100, 190, 194, 153, 194, 188, 174, 205, 218, 60, 107, 197, 216, 61, 136, 172, 19, 190, 94, 159, 86, 190, 103, 148, 79, 187, 144, 203, 140, 59, 147, 84, 100, 190, 102, 238, 164, 60, 35, 139, 27, 61, 109, 108, 194, 189, 8, 80, 231, 187, 84, 223, 18, 187, 116, 26, 178, 59, 2, 195, 190, 61, 8, 33, 126, 188, 2, 241, 65, 61, 96, 239, 6, 190, 26, 101, 216, 59, 213, 54, 209, 190, 116, 48, 31, 62, 160, 6, 138, 190, 141, 233, 64, 62, 136, 62, 229, 189, 42, 159, 1, 191, 91, 253, 54, 62, 157, 245, 110, 189, 232, 79, 170, 190, 45, 176, 160, 189, 67, 9, 40, 62, 12, 235, 57, 190, 42, 95, 139, 189, 219, 107, 174, 189, 174, 158, 53, 62, 54, 35, 250, 61, 43, 159, 48, 190, 196, 114, 225, 60, 170, 137, 111, 62, 244, 255, 16, 62, 56, 59, 139, 62, 226, 47, 55, 190, 86, 213, 199, 189, 171, 72, 65, 189, 198, 186, 63, 190, 194, 26, 246, 189, 158, 136, 139, 61, 213, 108, 41, 190, 58, 31, 1, 62, 34, 98, 219, 61, 113, 127, 164, 60, 115, 25, 45, 190, 233, 202, 51, 190, 91, 172, 53, 189, 145, 199, 54, 61, 192, 41, 5, 62, 151, 183, 178, 60, 41, 15, 155, 189, 91, 49, 184, 61, 9, 117, 230, 189, 50, 98, 230, 189, 220, 204, 41, 190, 9, 250, 98, 60, 82, 17, 235, 189, 114, 14, 43, 61, 59, 39, 98, 190, 57, 195, 29, 190, 144, 28, 0, 61, 117, 220, 76, 59, 248, 80, 133, 60, 14, 52, 159, 189, 155, 149, 216, 189, 64, 170, 199, 188, 147, 242, 162, 187, 168, 63, 200, 189, 105, 99, 190, 188, 51, 212, 223, 60, 8, 101, 31, 61, 77, 44, 221, 59, 142, 62, 47, 190, 112, 51, 112, 190, 251, 200, 233, 189, 82, 208, 153, 60, 246, 169, 124, 62, 182, 177, 40, 61, 196, 1, 64, 61, 89, 100, 153, 61, 101, 169, 22, 62, 118, 90, 62, 62, 62, 230, 220, 62, 92, 65, 135, 190, 188, 207, 177, 61, 144, 138, 149, 62, 247, 157, 211, 189, 139, 140, 31, 62, 11, 154, 88, 189, 201, 168, 222, 189, 234, 102, 135, 62, 176, 244, 206, 61, 212, 197, 128, 61, 154, 124, 52, 60, 203, 171, 128, 190, 185, 206, 212, 190, 204, 108, 91, 190, 109, 129, 126, 190, 64, 13, 247, 189, 54, 6, 40, 189, 242, 205, 11, 190, 225, 7, 143, 62, 180, 163, 92, 59, 67, 189, 33, 60, 127, 54, 128, 190, 207, 198, 197, 189, 144, 52, 33, 62, 218, 196, 89, 62, 2, 161, 21, 62, 50, 190, 138, 62, 97, 40, 253, 60, 134, 191, 26, 62, 185, 165, 150, 188, 52, 255, 84, 62, 232, 90, 156, 62, 10, 211, 190, 189, 108, 24, 129, 62, 96, 113, 37, 61, 67, 22, 173, 188, 157, 15, 36, 190, 170, 192, 244, 188, 73, 100, 236, 189, 183, 69, 121, 189, 44, 111, 125, 187, 196, 97, 68, 190, 230, 25, 159, 189, 215, 14, 215, 61, 136, 188, 192, 189, 208, 4, 82, 190, 249, 106, 250, 189, 72, 87, 178, 61, 215, 49, 47, 62, 152, 56, 165, 58, 74, 221, 84, 189, 30, 50, 24, 189, 182, 26, 2, 62, 141, 84, 30, 190, 180, 165, 239, 189, 157, 28, 239, 59, 48, 238, 96, 62, 218, 84, 35, 190, 230, 59, 198, 60, 202, 244, 174, 189, 215, 56, 231, 60, 160, 120, 93, 189, 117, 72, 193, 61, 127, 111, 96, 189, 199, 165, 94, 190, 233, 233, 192, 61, 234, 118, 31, 190, 242, 197, 115, 189, 188, 240, 95, 189, 33, 0, 250, 61, 142, 135, 164, 189, 29, 229, 38, 190, 9, 1, 12, 62, 248, 162, 241, 189, 49, 8, 130, 60, 57, 68, 56, 190, 224, 105, 127, 189, 61, 154, 19, 60, 96, 157, 243, 61, 215, 59, 74, 62, 145, 164, 227, 189, 179, 173, 128, 190, 20, 2, 65, 62, 26, 155, 14, 62, 139, 78, 47, 188, 173, 190, 32, 189, 251, 174, 158, 60, 248, 117, 217, 60, 165, 25, 99, 62, 75, 253, 241, 189, 71, 117, 124, 62, 17, 33, 169, 61, 120, 144, 114, 61, 216, 215, 83, 189, 227, 200, 205, 189, 22, 100, 148, 62, 34, 129, 152, 190, 14, 155, 241, 61, 171, 33, 117, 62, 75, 232, 78, 62, 121, 51, 221, 189, 226, 97, 240, 189, 119, 106, 188, 61, 60, 64, 234, 61, 80, 233, 132, 189, 252, 243, 138, 189, 8, 245, 229, 189, 56, 106, 180, 189, 142, 163, 172, 189, 6, 192, 207, 189, 165, 241, 30, 62, 44, 229, 134, 189, 116, 221, 175, 62, 186, 181, 108, 190, 87, 47, 233, 61, 205, 164, 59, 189, 116, 246, 31, 62, 93, 150, 0, 61, 202, 24, 6, 189, 58, 133, 224, 189, 53, 60, 159, 190, 85, 118, 19, 190, 211, 43, 69, 190, 119, 115, 95, 62, 115, 60, 45, 190, 192, 75, 44, 61, 248, 151, 150, 61, 164, 160, 229, 189, 70, 18, 63, 62, 113, 15, 81, 62, 6, 71, 24, 190, 111, 138, 160, 61, 212, 247, 173, 61, 148, 201, 209, 61, 49, 88, 222, 61, 10, 5, 18, 62, 253, 117, 255, 188, 60, 108, 56, 62, 154, 135, 229, 61, 41, 81, 246, 189, 19, 144, 190, 61, 124, 223, 86, 62, 17, 236, 4, 190, 12, 135, 146, 62, 34, 252, 51, 189, 21, 180, 165, 62, 173, 49, 61, 62, 59, 73, 191, 187, 32, 182, 141, 60, 101, 6, 49, 190, 131, 10, 16, 62, 194, 217, 174, 60, 230, 60, 116, 190, 241, 90, 138, 62, 100, 112, 216, 190, 225, 176, 122, 62, 130, 178, 187, 189, 62, 6, 139, 62, 5, 39, 58, 190, 26, 255, 136, 190, 223, 184, 196, 61, 228, 91, 85, 190, 88, 39, 65, 61, 99, 197, 243, 189, 134, 75, 184, 189, 233, 126, 101, 60, 115, 141, 175, 61, 248, 210, 194, 190, 56, 243, 196, 60, 197, 160, 69, 190, 39, 54, 243, 188, 219, 102, 13, 59, 244, 106, 100, 62, 238, 44, 136, 189, 36, 71, 119, 62, 82, 193, 31, 190, 178, 36, 177, 190, 100, 113, 175, 61, 24, 237, 91, 190, 223, 114, 138, 61, 125, 190, 165, 189, 212, 233, 27, 190, 199, 226, 218, 188, 242, 200, 40, 189, 47, 105, 196, 61, 20, 228, 33, 62, 83, 227, 26, 61, 126, 89, 251, 189, 77, 236, 151, 61, 140, 27, 93, 61, 182, 37, 77, 190, 93, 168, 122, 62, 231, 215, 29, 188, 79, 230, 19, 188, 161, 94, 39, 62, 186, 70, 4, 62, 25, 100, 59, 190, 125, 67, 63, 62, 166, 60, 162, 61, 254, 95, 62, 186, 178, 65, 218, 61, 213, 46, 166, 189, 120, 174, 29, 190, 112, 55, 230, 61, 125, 130, 184, 188, 0, 254, 219, 189, 248, 10, 233, 61, 56, 50, 7, 190, 6, 143, 203, 62, 86, 44, 41, 61, 54, 220, 186, 59, 36, 61, 173, 189, 179, 190, 140, 61, 247, 114, 25, 61, 163, 99, 90, 62, 254, 47, 59, 62, 150, 103, 134, 190, 131, 49, 39, 62, 239, 93, 175, 190, 75, 90, 136, 62, 121, 179, 17, 61, 251, 255, 35, 62, 86, 215, 33, 60, 226, 206, 54, 190, 188, 81, 199, 62, 128, 62, 48, 190, 43, 41, 143, 190, 40, 145, 56, 62, 47, 151, 118, 189, 12, 119, 183, 188, 158, 87, 142, 62, 233, 50, 82, 190, 52, 149, 73, 189, 94, 170, 141, 60, 208, 140, 98, 188, 82, 189, 193, 61, 232, 129, 129, 62, 166, 92, 97, 62, 36, 133, 115, 62, 196, 133, 79, 61, 78, 33, 165, 189, 109, 85, 127, 62, 156, 185, 33, 62, 222, 133, 112, 62, 110, 36, 73, 62, 173, 25, 204, 61, 89, 4, 30, 62, 25, 34, 100, 186, 21, 255, 208, 61, 194, 250, 142, 190, 139, 20, 152, 60, 77, 109, 23, 190, 67, 64, 155, 189, 242, 168, 172, 189, 12, 184, 234, 189, 102, 32, 79, 62, 91, 29, 174, 189, 189, 8, 71, 189, 199, 179, 206, 60, 112, 239, 238, 189, 118, 4, 141, 188, 93, 25, 14, 190, 68, 206, 235, 189, 245, 83, 185, 61, 180, 17, 209, 61, 141, 19, 92, 61, 170, 102, 207, 61, 233, 253, 60, 190, 24, 232, 20, 190, 252, 4, 32, 190, 172, 84, 172, 61, 11, 242, 66, 62, 173, 41, 75, 190, 193, 205, 130, 62, 13, 147, 94, 188, 42, 200, 46, 62, 237, 40, 235, 188, 170, 65, 241, 61, 158, 29, 69, 59, 62, 171, 50, 189, 64, 69, 116, 190, 27, 89, 119, 58, 102, 59, 58, 190, 193, 139, 54, 62, 200, 123, 116, 190, 53, 113, 5, 62, 232, 7, 169, 189, 240, 81, 101, 190, 226, 147, 179, 62, 115, 184, 77, 61, 125, 171, 64, 190, 145, 88, 233, 60, 228, 222, 60, 60, 244, 46, 134, 189, 11, 228, 255, 61, 155, 250, 37, 190, 142, 200, 139, 189, 116, 87, 19, 189, 182, 254, 38, 189, 190, 202, 27, 62, 248, 46, 92, 61, 137, 72, 57, 62, 158, 42, 135, 61, 171, 99, 237, 189, 175, 148, 12, 190, 95, 3, 218, 60, 67, 211, 129, 189, 164, 70, 125, 62, 28, 73, 34, 62, 161, 42, 4, 62, 98, 197, 77, 189, 36, 9, 16, 62, 158, 217, 231, 189, 177, 78, 203, 189, 219, 199, 223, 189, 201, 172, 216, 189, 124, 202, 53, 61, 56, 197, 46, 187, 79, 34, 78, 61, 13, 230, 210, 61, 37, 179, 47, 190, 69, 15, 32, 188, 123, 10, 27, 188, 174, 12, 188, 61, 33, 141, 158, 189, 115, 144, 24, 62, 23, 191, 22, 190, 245, 69, 245, 189, 166, 45, 4, 189, 3, 112, 247, 61, 107, 42, 66, 190, 14, 119, 5, 62, 199, 198, 150, 188, 130, 177, 245, 188, 60, 241, 40, 190, 253, 43, 175, 189, 231, 101, 100, 62, 113, 134, 222, 60, 241, 120, 15, 62, 169, 3, 205, 61, 152, 220, 210, 188, 246, 249, 53, 189, 252, 107, 12, 59, 51, 98, 35, 189, 126, 253, 126, 189, 147, 90, 182, 188, 42, 181, 160, 62, 39, 233, 192, 189, 217, 18, 149, 61, 104, 228, 0, 62, 178, 123, 91, 62, 205, 28, 136, 62, 57, 151, 215, 189, 238, 13, 92, 62, 59, 154, 16, 60, 123, 8, 91, 61, 111, 15, 239, 188, 127, 5, 16, 62, 72, 101, 89, 187, 152, 191, 62, 62, 210, 187, 87, 188, 64, 46, 45, 189, 198, 129, 230, 61, 73, 4, 243, 61, 150, 230, 13, 61, 154, 177, 147, 189, 134, 206, 188, 188, 30, 207, 38, 190, 169, 8, 146, 62, 151, 194, 19, 190, 120, 50, 45, 62, 164, 212, 201, 58, 44, 43, 12, 62, 184, 162, 117, 189, 178, 226, 102, 61, 182, 135, 144, 189, 134, 248, 159, 189, 35, 32, 74, 190, 180, 172, 187, 61, 23, 30, 15, 190, 47, 254, 247, 61, 63, 53, 148, 190, 7, 84, 178, 61, 24, 45, 36, 62, 36, 212, 116, 190, 178, 41, 99, 61, 150, 177, 216, 189, 237, 3, 249, 61, 235, 142, 149, 190, 2, 184, 80, 62, 20, 217, 128, 190, 124, 182, 2, 190, 192, 234, 230, 58, 207, 40, 2, 190, 251, 118, 71, 62, 34, 117, 225, 61, 211, 205, 8, 189, 111, 117, 108, 189, 140, 22, 185, 61, 10, 189, 150, 189, 151, 194, 199, 59, 255, 87, 10, 190, 23, 32, 129, 61, 17, 179, 73, 188, 215, 253, 61, 190, 160, 136, 9, 190, 53, 174, 5, 61, 81, 215, 26, 62, 251, 144, 8, 62, 114, 248, 158, 61, 141, 113, 28, 190, 186, 93, 10, 61, 182, 43, 149, 61, 216, 45, 32, 190, 157, 55, 235, 60, 207, 159, 99, 189, 166, 223, 235, 189, 223, 41, 116, 190, 107, 50, 14, 190, 114, 68, 123, 62, 19, 1, 200, 189, 118, 80, 57, 62, 89, 104, 22, 62, 199, 169, 140, 188, 159, 241, 1, 190, 238, 139, 92, 58, 193, 226, 35, 62, 190, 47, 244, 61, 157, 67, 100, 62, 16, 213, 223, 189, 96, 26, 71, 59, 33, 147, 33, 61, 54, 131, 219, 61, 37, 165, 45, 190, 148, 72, 144, 189, 177, 32, 15, 190, 88, 93, 194, 61, 195, 40, 70, 62, 157, 237, 22, 189, 235, 42, 163, 60, 151, 215, 68, 61, 102, 6, 75, 190, 81, 214, 52, 62, 57, 83, 181, 189, 159, 140, 125, 61, 250, 95, 53, 190, 62, 56, 2, 189, 100, 33, 233, 61, 206, 194, 133, 62, 114, 167, 133, 62, 195, 71, 212, 61, 51, 1, 19, 62, 230, 241, 180, 61, 200, 70, 215, 189, 220, 212, 96, 190, 16, 34, 161, 189, 135, 163, 115, 61, 235, 111, 188, 189, 188, 145, 105, 188, 181, 128, 135, 190, 230, 174, 211, 60, 213, 35, 152, 61, 10, 162, 61, 190, 175, 9, 139, 189, 224, 221, 1, 190, 56, 206, 19, 190, 96, 53, 10, 189, 177, 32, 181, 60, 173, 31, 151, 62, 151, 223, 149, 61, 209, 199, 142, 189, 116, 135, 112, 189, 10, 166, 40, 62, 43, 142, 152, 61, 61, 241, 159, 60, 4, 30, 60, 61, 78, 188, 182, 61, 177, 204, 21, 190, 114, 0, 129, 189, 175, 136, 244, 189, 183, 221, 21, 188, 94, 77, 119, 61, 202, 10, 77, 61, 196, 135, 232, 189, 147, 242, 17, 190, 138, 182, 0, 190, 40, 92, 198, 189, 114, 61, 184, 189, 15, 106, 50, 62, 24, 41, 29, 190, 211, 72, 21, 61, 4, 38, 29, 190, 209, 108, 245, 189, 66, 152, 209, 61, 34, 59, 53, 60, 242, 96, 113, 189, 234, 169, 14, 190, 122, 48, 3, 61, 250, 26, 32, 190, 31, 58, 14, 62, 128, 160, 3, 190, 189, 81, 127, 59, 200, 54, 201, 61, 163, 184, 137, 189, 90, 85, 149, 190, 113, 224, 222, 61, 199, 98, 172, 190, 38, 102, 92, 62, 156, 84, 81, 190, 6, 60, 45, 62, 206, 71, 190, 188, 161, 215, 164, 190, 95, 3, 171, 62, 5, 8, 182, 189, 62, 119, 132, 190, 250, 105, 194, 189, 168, 118, 143, 61, 132, 88, 25, 189, 215, 139, 13, 62, 48, 108, 185, 189, 241, 183, 61, 188, 216, 187, 197, 189, 246, 28, 236, 189, 87, 52, 80, 189, 44, 254, 134, 62, 81, 208, 17, 62, 5, 53, 203, 61, 234, 165, 154, 190, 176, 63, 146, 190, 132, 192, 190, 189, 187, 253, 184, 189, 221, 188, 137, 61, 206, 132, 155, 189, 129, 117, 60, 190, 117, 222, 189, 61, 111, 235, 6, 190, 191, 208, 127, 62, 74, 163, 43, 61, 166, 215, 223, 61, 82, 221, 4, 62, 80, 26, 56, 62, 93, 58, 100, 190, 212, 178, 95, 61, 18, 11, 51, 62, 62, 208, 55, 190, 227, 7, 71, 59, 96, 160, 82, 62, 204, 70, 227, 189, 87, 111, 180, 190, 150, 59, 80, 62, 94, 8, 149, 189, 83, 113, 185, 61, 70, 23, 247, 60, 103, 97, 74, 61, 89, 237, 73, 189, 170, 121, 129, 61, 154, 97, 150, 189, 148, 194, 49, 190, 253, 73, 247, 188, 222, 198, 252, 188, 120, 138, 31, 61, 144, 59, 85, 190, 43, 41, 66, 188, 228, 215, 80, 189, 201, 26, 25, 61, 98, 168, 174, 190, 72, 168, 205, 61, 227, 173, 11, 61, 242, 168, 30, 189, 1, 57, 132, 187, 253, 197, 13, 63, 169, 222, 65, 190, 128, 44, 42, 62, 250, 35, 206, 189, 192, 216, 125, 62, 236, 67, 216, 62, 136, 101, 208, 190, 133, 240, 175, 61, 98, 172, 154, 62, 44, 167, 36, 190, 254, 72, 250, 60, 137, 54, 3, 61, 138, 64, 148, 190, 38, 64, 100, 62, 64, 194, 6, 62, 180, 111, 8, 191, 159, 84, 52, 61, 56, 42, 39, 187, 187, 37, 86, 190, 174, 187, 136, 190, 191, 0, 154, 188, 91, 95, 100, 62, 58, 173, 98, 62, 208, 234, 219, 189, 138, 193, 80, 62, 245, 167, 196, 188, 74, 194, 84, 189, 58, 68, 29, 190, 237, 78, 67, 62, 239, 83, 179, 61, 60, 11, 95, 62, 59, 76, 53, 62, 145, 80, 13, 62, 173, 139, 47, 189, 152, 39, 114, 61, 236, 191, 61, 190, 255, 129, 230, 59, 193, 202, 141, 62, 135, 113, 1, 190, 66, 241, 133, 62, 187, 118, 117, 60, 79, 36, 11, 189, 93, 214, 240, 189, 113, 208, 53, 188, 255, 173, 156, 61, 133, 19, 41, 189, 224, 135, 207, 60, 107, 224, 18, 189, 21, 133, 119, 61, 224, 67, 31, 62, 186, 1, 49, 189, 46, 72, 91, 190, 227, 56, 192, 188, 152, 23, 200, 189, 141, 35, 108, 62, 17, 175, 102, 190, 148, 92, 244, 61, 210, 202, 162, 61, 166, 255, 189, 187, 217, 140, 0, 62, 196, 48, 67, 190, 3, 230, 63, 61, 7, 164, 248, 189, 74, 85, 166, 189, 157, 224, 21, 189, 5, 44, 139, 189, 70, 184, 209, 189, 251, 14, 113, 189, 198, 94, 182, 61, 68, 107, 83, 190, 116, 169, 245, 62, 50, 98, 123, 60, 46, 28, 70, 190, 221, 228, 132, 60, 95, 63, 115, 189, 229, 140, 173, 189, 194, 10, 32, 62, 83, 123, 20, 62, 36, 158, 129, 61, 125, 116, 158, 189, 102, 216, 5, 190, 248, 186, 2, 190, 18, 190, 186, 58, 47, 102, 144, 61, 11, 173, 177, 189, 223, 124, 107, 189, 230, 69, 5, 62, 169, 50, 15, 189, 189, 157, 237, 189, 159, 208, 44, 62, 127, 160, 109, 62, 156, 35, 25, 190, 6, 21, 152, 189, 46, 12, 205, 188, 190, 142, 58, 61, 254, 67, 91, 61, 13, 92, 178, 189, 122, 62, 146, 187, 243, 136, 103, 189, 134, 165, 88, 189, 3, 126, 1, 190, 45, 171, 33, 190, 156, 158, 129, 189, 189, 186, 232, 61, 42, 158, 16, 60, 110, 51, 16, 190, 130, 99, 195, 189, 169, 39, 207, 189, 241, 120, 16, 190, 105, 152, 52, 61, 186, 143, 133, 188, 116, 197, 126, 188, 192, 128, 149, 189, 143, 153, 147, 189, 57, 97, 45, 188, 230, 161, 153, 188, 224, 15, 48, 62, 65, 89, 4, 62, 185, 10, 146, 60, 32, 39, 41, 62, 251, 249, 9, 190, 202, 108, 226, 189, 16, 27, 226, 61, 49, 78, 22, 62, 246, 229, 245, 59, 130, 200, 241, 61, 61, 30, 46, 62, 212, 174, 6, 189, 150, 93, 63, 190, 43, 40, 129, 62, 98, 30, 52, 61, 34, 25, 100, 61, 4, 102, 237, 189, 154, 128, 75, 60, 4, 91, 41, 190, 137, 207, 95, 189, 62, 42, 134, 189, 139, 255, 20, 61, 79, 39, 169, 189, 184, 207, 50, 190, 231, 120, 173, 61, 92, 23, 31, 190, 105, 212, 55, 61, 240, 42, 100, 62, 160, 64, 21, 189, 227, 103, 47, 188, 200, 33, 136, 61, 84, 27, 250, 189, 28, 20, 235, 189, 153, 88, 23, 60, 151, 15, 138, 62, 46, 21, 33, 61, 218, 238, 115, 190, 78, 120, 21, 190, 75, 194, 224, 60, 112, 58, 188, 187, 237, 228, 42, 62, 164, 89, 118, 61, 165, 142, 192, 190, 186, 239, 251, 60, 208, 21, 198, 190, 48, 121, 218, 185, 19, 125, 146, 189, 115, 199, 55, 62, 52, 25, 196, 61, 109, 17, 164, 190, 235, 154, 139, 62, 216, 44, 238, 189, 255, 175, 196, 189, 112, 163, 60, 190, 199, 174, 227, 61, 25, 224, 139, 189, 141, 241, 10, 62, 236, 1, 69, 190, 125, 151, 122, 61, 177, 75, 195, 60, 36, 6, 150, 190, 115, 191, 53, 62, 107, 153, 39, 62, 141, 154, 27, 62, 105, 241, 32, 62, 52, 115, 158, 190, 214, 52, 38, 190, 70, 44, 140, 187, 91, 217, 64, 190, 131, 9, 54, 62, 7, 95, 96, 61, 45, 40, 213, 61, 143, 67, 234, 61, 224, 45, 57, 62, 163, 118, 92, 62, 18, 136, 174, 189, 240, 9, 191, 61, 45, 40, 130, 62, 145, 149, 10, 189, 159, 12, 164, 188, 216, 26, 176, 189, 187, 123, 255, 60, 172, 246, 5, 62, 81, 188, 61, 190, 86, 79, 169, 61, 202, 243, 191, 62, 156, 88, 15, 190, 195, 170, 149, 61, 186, 13, 63, 61, 69, 65, 81, 61, 63, 192, 215, 59, 99, 172, 11, 62, 98, 38, 8, 60, 4, 131, 161, 189, 229, 64, 140, 61, 4, 60, 131, 61, 106, 100, 79, 62, 83, 251, 203, 61, 222, 49, 148, 62, 235, 22, 189, 59, 49, 194, 101, 188, 192, 179, 236, 61, 99, 228, 206, 189, 194, 159, 187, 61, 123, 28, 126, 190, 247, 52, 222, 189, 210, 35, 12, 190, 180, 148, 200, 189, 117, 149, 244, 189, 160, 33, 130, 189, 93, 73, 46, 190, 63, 59, 1, 62, 185, 79, 11, 190, 110, 12, 120, 190, 20, 178, 152, 189, 170, 19, 148, 189, 153, 24, 10, 61, 53, 95, 217, 189, 41, 162, 8, 62, 70, 85, 165, 189, 198, 107, 40, 190, 121, 147, 13, 60, 240, 3, 189, 61, 38, 58, 6, 190, 129, 73, 98, 189, 193, 51, 216, 61, 38, 191, 40, 190, 253, 143, 226, 189, 146, 179, 75, 61, 238, 35, 110, 61, 206, 254, 42, 190, 122, 157, 128, 189, 164, 38, 162, 190, 245, 180, 144, 61, 197, 222, 37, 190, 203, 206, 227, 189, 156, 118, 162, 188, 185, 129, 64, 60, 61, 151, 128, 61, 3, 188, 120, 189, 242, 17, 186, 62, 34, 70, 229, 187, 88, 233, 185, 61, 28, 106, 155, 61, 205, 134, 152, 61, 29, 161, 149, 62, 86, 241, 202, 190, 184, 199, 168, 61, 147, 123, 178, 61, 95, 142, 243, 189, 88, 76, 164, 188, 23, 0, 160, 61, 117, 83, 159, 190, 32, 125, 108, 62, 38, 236, 92, 61, 2, 239, 9, 188, 77, 212, 133, 61, 182, 116, 29, 61, 68, 52, 90, 190, 48, 179, 150, 189, 121, 103, 136, 189, 223, 75, 30, 60, 153, 68, 233, 189, 83, 15, 131, 190, 91, 79, 236, 59, 167, 235, 68, 61, 67, 201, 80, 186, 141, 133, 136, 62, 207, 248, 129, 61, 69, 186, 9, 61, 153, 147, 120, 190, 125, 130, 13, 62, 197, 50, 202, 190, 213, 37, 113, 61, 237, 57, 186, 189, 135, 146, 147, 61, 31, 200, 83, 61, 73, 73, 151, 190, 88, 108, 184, 62, 87, 41, 71, 61, 41, 70, 40, 188, 10, 9, 59, 189, 129, 219, 22, 61, 139, 176, 248, 189, 126, 58, 237, 61, 101, 56, 14, 190, 178, 209, 102, 188, 39, 153, 170, 61, 241, 125, 32, 190, 115, 194, 124, 61, 160, 60, 105, 62, 137, 54, 148, 61, 153, 141, 46, 62, 248, 157, 136, 190, 117, 154, 109, 190, 139, 255, 24, 190, 41, 105, 247, 189, 66, 164, 9, 62, 19, 20, 58, 190, 165, 67, 147, 190, 187, 235, 154, 61, 164, 140, 141, 61, 208, 114, 115, 62, 57, 82, 80, 62, 5, 151, 4, 63, 31, 6, 63, 61, 122, 229, 82, 61, 218, 255, 72, 190, 51, 166, 27, 62, 75, 154, 213, 62, 238, 68, 63, 190, 110, 220, 234, 60, 81, 54, 101, 62, 239, 85, 33, 62, 2, 63, 186, 61, 99, 126, 180, 189, 46, 229, 80, 190, 250, 89, 118, 62, 243, 60, 40, 189, 54, 246, 240, 189, 231, 57, 37, 190, 219, 212, 26, 189, 123, 199, 29, 190, 155, 230, 0, 189, 230, 235, 195, 61, 214, 207, 143, 188, 92, 36, 209, 62, 144, 63, 168, 190, 216, 12, 22, 62, 131, 97, 61, 60, 26, 83, 48, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 75, 242, 61, 43, 217, 135, 59, 102, 255, 120, 59, 103, 91, 169, 189, 222, 117, 204, 61, 127, 65, 45, 189, 166, 7, 48, 62, 109, 167, 14, 61, 101, 114, 190, 61, 223, 209, 33, 189, 202, 201, 177, 61, 110, 150, 152, 189, 56, 122, 246, 61, 80, 205, 42, 190, 37, 219, 246, 60, 224, 131, 4, 61, 68, 196, 4, 189, 192, 238, 25, 60, 79, 150, 152, 189, 146, 177, 70, 62, 213, 208, 66, 190, 34, 138, 47, 61, 124, 138, 185, 60, 190, 40, 23, 62, 169, 48, 27, 190, 20, 100, 173, 61, 201, 10, 160, 189, 76, 82, 4, 190, 3, 112, 26, 62, 143, 86, 157, 61, 103, 27, 214, 188, 234, 251, 165, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 31, 23, 62, 71, 178, 137, 62, 186, 34, 229, 189, 122, 186, 165, 190, 41, 154, 93, 190, 196, 121, 149, 189, 230, 85, 117, 190, 114, 17, 65, 62, 123, 175, 165, 62, 208, 153, 33, 189, 137, 72, 46, 62, 0, 60, 17, 62, 58, 44, 81, 62, 23, 22, 36, 190, 27, 219, 169, 189, 146, 70, 15, 190, 196, 208, 147, 190, 185, 234, 140, 62, 253, 76, 51, 190, 224, 165, 138, 62, 30, 133, 64, 190, 196, 250, 90, 190, 179, 240, 5, 190, 248, 251, 207, 61, 134, 54, 6, 62, 121, 83, 140, 190, 220, 195, 146, 62, 143, 163, 44, 190, 214, 232, 8, 60, 115, 6, 111, 190, 158, 94, 140, 62, 101, 194, 108, 190, 22, 5, 70, 61, 148, 198, 249, 61, 0, 193, 243, 61, 160, 174, 245, 189, 203, 181, 87, 190, 16, 178, 215, 61, 253, 53, 120, 190, 213, 210, 161, 189, 151, 215, 216, 189, 239, 246, 33, 190, 184, 126, 50, 190, 189, 90, 55, 62, 105, 253, 152, 189, 100, 236, 135, 189, 97, 153, 245, 189, 239, 208, 159, 61, 185, 204, 254, 188, 179, 40, 191, 188, 117, 70, 145, 61, 244, 59, 107, 189, 22, 101, 227, 61, 173, 168, 173, 61, 180, 119, 84, 190, 76, 199, 25, 190, 73, 56, 150, 189, 87, 146, 160, 61, 210, 110, 129, 61, 115, 10, 37, 189, 103, 68, 43, 62, 168, 205, 4, 62, 42, 147, 250, 188, 229, 108, 229, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 9, 87, 59, 143, 143, 66, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {253, 158, 101, 189, 218, 235, 33, 190, 153, 185, 3, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {164, 139, 136, 62, 61, 233, 43, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0021/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}