// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 134, 224, 62, 244, 6, 58, 62, 16, 143, 35, 191, 2, 11, 161, 187, 227, 11, 70, 63, 191, 244, 25, 63, 219, 191, 138, 61, 30, 119, 216, 189, 160, 171, 178, 61, 49, 156, 92, 190, 72, 23, 24, 191, 111, 76, 191, 62, 117, 127, 34, 191, 106, 159, 51, 191, 247, 66, 14, 188, 146, 176, 188, 189, 87, 78, 19, 63, 231, 252, 3, 191, 219, 46, 91, 62, 116, 68, 104, 191, 62, 79, 99, 61, 71, 136, 101, 190, 63, 70, 99, 191, 100, 121, 176, 62, 94, 4, 83, 191, 185, 108, 107, 191, 254, 121, 167, 188, 41, 202, 93, 61, 240, 177, 123, 61, 147, 25, 46, 191, 188, 200, 66, 62, 13, 249, 87, 63, 0, 137, 50, 190, 177, 41, 242, 60, 89, 124, 93, 63, 135, 119, 125, 190, 102, 135, 173, 61, 41, 1, 15, 63, 99, 9, 138, 189, 24, 82, 148, 191, 28, 7, 9, 63, 136, 234, 57, 60, 88, 12, 51, 63, 115, 163, 158, 191, 58, 135, 23, 190, 236, 235, 122, 190, 69, 114, 180, 191, 83, 163, 131, 190, 20, 215, 240, 62, 54, 230, 182, 63, 220, 192, 137, 62, 189, 216, 159, 62, 251, 70, 139, 191, 229, 46, 81, 62, 109, 207, 239, 190, 215, 128, 141, 62, 139, 242, 17, 191, 38, 66, 47, 191, 78, 127, 0, 64, 168, 190, 196, 62, 213, 208, 26, 63, 12, 47, 158, 191, 255, 227, 195, 190, 40, 186, 2, 63, 219, 60, 22, 62, 229, 89, 17, 63, 216, 180, 52, 61, 170, 166, 58, 63, 29, 183, 223, 62, 82, 220, 160, 190, 120, 182, 235, 190, 116, 125, 22, 63, 81, 198, 143, 190, 27, 177, 12, 63, 120, 237, 238, 190, 80, 140, 205, 190, 165, 189, 194, 62, 104, 27, 52, 63, 73, 200, 33, 62, 190, 236, 151, 63, 155, 103, 137, 62, 23, 115, 111, 63, 9, 65, 22, 191, 209, 249, 28, 62, 143, 163, 4, 63, 169, 62, 31, 63, 166, 166, 119, 62, 214, 17, 47, 62, 208, 92, 157, 63, 42, 18, 164, 62, 185, 189, 157, 62, 5, 172, 157, 191, 9, 67, 199, 190, 144, 230, 27, 62, 40, 182, 0, 191, 213, 148, 173, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 91, 136, 190, 127, 98, 1, 63, 68, 151, 95, 62, 102, 202, 161, 61, 166, 117, 201, 62, 100, 219, 14, 191, 43, 126, 116, 190, 121, 40, 162, 190, 157, 149, 19, 63, 191, 158, 221, 62, 60, 211, 4, 190, 44, 43, 12, 190, 148, 17, 240, 62, 44, 126, 89, 189, 2, 188, 138, 60, 55, 162, 224, 62, 139, 85, 215, 62, 190, 209, 37, 62, 175, 226, 45, 191, 170, 56, 64, 190, 33, 96, 233, 190, 150, 228, 37, 191, 141, 112, 251, 62, 106, 40, 149, 189, 123, 192, 200, 190, 136, 170, 76, 62, 179, 169, 139, 61, 192, 62, 165, 62, 159, 176, 224, 190, 241, 94, 13, 62, 161, 139, 6, 191, 9, 202, 225, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 238, 89, 62, 185, 80, 75, 61, 242, 244, 174, 188, 209, 238, 229, 62, 104, 249, 116, 59, 128, 138, 57, 62, 87, 155, 68, 189, 120, 176, 91, 63, 4, 85, 151, 190, 240, 169, 23, 62, 156, 97, 145, 62, 76, 63, 196, 62, 155, 208, 9, 190, 171, 65, 238, 60, 17, 23, 128, 189, 202, 142, 158, 189, 1, 173, 154, 190, 111, 54, 64, 190, 128, 168, 35, 61, 20, 152, 234, 62, 145, 163, 201, 61, 232, 99, 69, 187, 32, 67, 150, 190, 129, 138, 124, 62, 143, 115, 225, 185, 234, 125, 250, 190, 117, 235, 54, 190, 172, 198, 175, 190, 95, 12, 204, 190, 250, 53, 84, 190, 244, 1, 37, 189, 249, 20, 2, 59, 214, 211, 185, 61, 194, 32, 185, 61, 173, 177, 208, 61, 143, 27, 103, 190, 180, 178, 11, 58, 181, 220, 21, 191, 126, 173, 246, 189, 22, 70, 190, 190, 144, 145, 162, 61, 86, 103, 7, 190, 181, 38, 53, 191, 138, 126, 95, 62, 34, 55, 68, 62, 94, 14, 138, 62, 245, 34, 137, 62, 233, 99, 11, 62, 156, 69, 173, 190, 74, 182, 4, 190, 23, 76, 151, 190, 127, 34, 53, 63, 152, 135, 17, 63, 192, 107, 152, 190, 26, 116, 3, 62, 203, 247, 95, 62, 188, 175, 22, 62, 125, 242, 189, 62, 53, 52, 253, 190, 211, 247, 182, 62, 71, 171, 109, 191, 227, 157, 210, 190, 222, 172, 77, 191, 124, 73, 216, 189, 96, 180, 180, 190, 48, 83, 14, 191, 10, 7, 135, 189, 171, 24, 12, 190, 128, 85, 198, 189, 250, 75, 9, 190, 52, 68, 10, 61, 245, 73, 104, 189, 207, 200, 104, 62, 90, 96, 107, 61, 113, 233, 157, 190, 143, 210, 31, 190, 38, 118, 138, 190, 27, 80, 229, 190, 75, 96, 165, 190, 115, 226, 182, 61, 221, 202, 109, 190, 115, 59, 36, 61, 91, 155, 239, 189, 29, 97, 57, 191, 222, 85, 251, 189, 144, 17, 33, 190, 228, 126, 229, 190, 224, 19, 196, 190, 186, 234, 131, 190, 113, 31, 181, 190, 186, 212, 21, 190, 23, 134, 20, 191, 240, 13, 227, 188, 66, 104, 180, 189, 228, 237, 140, 190, 63, 56, 244, 60, 96, 21, 84, 190, 206, 2, 247, 191, 91, 178, 155, 190, 97, 152, 153, 62, 210, 133, 168, 62, 89, 179, 83, 61, 127, 30, 23, 62, 204, 89, 22, 63, 149, 46, 155, 62, 73, 166, 118, 62, 172, 28, 159, 62, 105, 228, 185, 190, 247, 196, 111, 61, 81, 35, 40, 62, 51, 225, 148, 190, 161, 114, 158, 62, 166, 99, 129, 62, 94, 156, 169, 189, 68, 151, 173, 62, 23, 117, 131, 191, 155, 119, 220, 188, 132, 80, 207, 60, 94, 212, 173, 191, 133, 235, 82, 191, 140, 247, 129, 190, 237, 177, 113, 191, 54, 4, 194, 188, 38, 71, 182, 62, 206, 192, 1, 190, 66, 160, 174, 62, 20, 220, 133, 188, 236, 130, 160, 61, 151, 61, 169, 190, 109, 42, 235, 190, 61, 177, 213, 61, 247, 252, 205, 189, 150, 191, 145, 62, 6, 51, 142, 62, 34, 148, 173, 187, 219, 88, 31, 61, 17, 9, 74, 62, 145, 50, 144, 62, 51, 129, 93, 62, 240, 21, 47, 190, 75, 107, 108, 62, 56, 0, 116, 189, 125, 46, 63, 191, 169, 244, 55, 189, 180, 154, 156, 62, 63, 243, 202, 190, 45, 155, 39, 61, 236, 89, 173, 191, 93, 50, 30, 191, 168, 54, 167, 62, 196, 142, 39, 190, 203, 6, 9, 191, 77, 68, 130, 190, 56, 252, 26, 191, 111, 183, 178, 62, 191, 119, 9, 190, 36, 63, 173, 60, 27, 76, 14, 62, 173, 119, 232, 189, 23, 57, 59, 62, 181, 174, 96, 190, 245, 96, 207, 190, 22, 54, 152, 60, 204, 250, 11, 62, 94, 223, 166, 190, 94, 69, 50, 62, 174, 248, 132, 190, 235, 1, 131, 189, 95, 99, 24, 191, 108, 196, 32, 62, 174, 3, 237, 61, 227, 215, 111, 62, 230, 74, 148, 62, 152, 160, 246, 61, 113, 25, 181, 190, 222, 137, 137, 190, 66, 50, 245, 61, 46, 7, 214, 189, 27, 210, 66, 190, 10, 183, 153, 190, 234, 174, 93, 191, 179, 99, 88, 190, 9, 218, 210, 190, 69, 148, 32, 190, 197, 133, 203, 61, 169, 223, 249, 189, 209, 124, 240, 60, 73, 65, 77, 62, 14, 150, 122, 190, 24, 252, 18, 60, 115, 200, 221, 190, 117, 150, 96, 190, 188, 216, 80, 189, 210, 76, 70, 189, 24, 36, 161, 61, 40, 189, 24, 62, 27, 178, 25, 189, 209, 82, 155, 62, 28, 104, 53, 189, 33, 116, 4, 189, 241, 217, 237, 60, 95, 194, 225, 188, 17, 153, 177, 62, 111, 132, 161, 190, 156, 140, 81, 62, 255, 143, 200, 62, 69, 60, 207, 190, 221, 151, 189, 190, 179, 178, 44, 61, 113, 238, 202, 189, 96, 217, 110, 62, 69, 196, 95, 191, 90, 106, 40, 191, 210, 137, 159, 189, 157, 84, 245, 189, 107, 229, 27, 190, 12, 173, 170, 189, 254, 38, 35, 62, 26, 191, 139, 188, 174, 233, 172, 61, 135, 166, 32, 191, 138, 75, 104, 62, 15, 60, 160, 190, 155, 45, 245, 61, 246, 168, 204, 60, 81, 165, 198, 189, 20, 232, 241, 60, 205, 192, 21, 191, 225, 220, 221, 190, 223, 245, 86, 190, 44, 47, 195, 62, 220, 196, 40, 191, 252, 95, 72, 190, 113, 149, 161, 61, 230, 160, 6, 61, 147, 119, 52, 62, 38, 57, 67, 62, 103, 155, 147, 190, 130, 205, 160, 62, 140, 158, 75, 188, 89, 134, 140, 61, 69, 245, 141, 61, 231, 173, 186, 61, 2, 183, 252, 62, 157, 44, 200, 62, 133, 163, 93, 190, 7, 73, 58, 190, 61, 68, 136, 190, 67, 218, 59, 62, 231, 193, 72, 190, 84, 172, 227, 62, 121, 247, 150, 61, 181, 126, 61, 63, 128, 43, 108, 62, 115, 200, 252, 60, 187, 86, 226, 60, 7, 13, 104, 189, 219, 185, 95, 62, 222, 178, 116, 188, 109, 178, 180, 190, 118, 32, 111, 62, 61, 174, 66, 190, 99, 4, 10, 61, 96, 14, 106, 190, 228, 106, 0, 62, 141, 9, 192, 190, 213, 205, 71, 62, 177, 144, 76, 63, 78, 200, 35, 61, 125, 104, 35, 63, 206, 231, 168, 62, 6, 233, 254, 61, 95, 134, 3, 60, 33, 182, 97, 189, 254, 84, 213, 190, 165, 151, 224, 62, 50, 93, 151, 61, 31, 149, 100, 189, 19, 187, 196, 61, 154, 12, 53, 62, 165, 95, 49, 63, 249, 131, 130, 62, 79, 156, 62, 190, 125, 115, 145, 190, 193, 226, 140, 189, 243, 248, 113, 190, 100, 62, 213, 189, 201, 129, 173, 191, 64, 17, 79, 62, 227, 112, 69, 187, 193, 32, 30, 61, 118, 68, 176, 189, 167, 127, 129, 62, 91, 231, 28, 62, 244, 152, 216, 190, 71, 242, 93, 187, 18, 38, 161, 61, 27, 15, 214, 189, 86, 92, 213, 62, 15, 115, 169, 189, 139, 233, 130, 61, 154, 51, 158, 62, 201, 122, 177, 62, 85, 36, 91, 190, 231, 89, 58, 62, 7, 166, 255, 189, 216, 109, 44, 61, 155, 172, 181, 62, 21, 205, 128, 62, 187, 80, 108, 190, 149, 197, 28, 62, 11, 238, 243, 189, 154, 48, 162, 188, 167, 102, 19, 62, 32, 47, 17, 190, 146, 79, 231, 62, 152, 217, 242, 190, 227, 65, 233, 59, 151, 115, 221, 190, 199, 157, 39, 59, 240, 26, 220, 189, 5, 209, 90, 62, 128, 222, 112, 62, 183, 250, 180, 190, 79, 180, 166, 62, 101, 13, 100, 191, 47, 112, 152, 62, 210, 79, 1, 190, 94, 209, 149, 62, 62, 164, 180, 188, 190, 25, 90, 189, 62, 152, 115, 62, 197, 118, 31, 190, 192, 214, 139, 189, 178, 14, 167, 62, 72, 133, 55, 61, 164, 101, 191, 189, 242, 87, 138, 62, 26, 184, 2, 191, 178, 249, 6, 62, 60, 232, 14, 60, 143, 146, 201, 189, 172, 67, 203, 61, 214, 252, 34, 62, 41, 118, 244, 189, 148, 10, 45, 62, 71, 247, 178, 189, 25, 78, 187, 188, 164, 3, 0, 190, 231, 148, 122, 61, 113, 191, 183, 62, 184, 218, 208, 61, 224, 51, 219, 61, 222, 190, 41, 61, 216, 132, 173, 61, 0, 33, 122, 190, 188, 118, 75, 191, 94, 64, 22, 62, 161, 165, 220, 190, 251, 168, 209, 190, 151, 210, 157, 190, 75, 165, 186, 187, 192, 203, 11, 63, 178, 171, 151, 60, 154, 158, 43, 62, 186, 233, 230, 189, 139, 65, 86, 190, 40, 32, 130, 189, 32, 133, 194, 188, 24, 66, 45, 191, 194, 231, 28, 62, 214, 173, 133, 62, 62, 170, 151, 61, 176, 244, 1, 190, 15, 100, 98, 190, 214, 85, 236, 190, 51, 73, 226, 189, 214, 196, 97, 190, 3, 58, 184, 62, 33, 117, 237, 190, 92, 205, 7, 63, 249, 222, 250, 61, 249, 53, 118, 62, 22, 77, 158, 188, 128, 253, 37, 190, 156, 172, 244, 190, 35, 158, 194, 189, 226, 160, 150, 190, 6, 59, 150, 62, 138, 117, 154, 190, 245, 16, 133, 189, 24, 72, 164, 190, 241, 106, 184, 62, 233, 143, 40, 190, 202, 76, 38, 190, 199, 47, 219, 62, 219, 95, 122, 62, 251, 49, 207, 62, 118, 29, 150, 190, 135, 142, 4, 62, 92, 17, 61, 191, 54, 28, 104, 188, 43, 51, 99, 190, 75, 195, 72, 62, 105, 162, 53, 191, 246, 91, 184, 190, 57, 28, 134, 190, 215, 223, 38, 189, 247, 205, 126, 62, 151, 156, 151, 190, 46, 235, 120, 191, 183, 104, 105, 189, 16, 121, 56, 190, 50, 60, 95, 191, 100, 248, 0, 189, 12, 83, 44, 190, 42, 204, 100, 62, 89, 27, 16, 190, 189, 1, 223, 189, 249, 169, 1, 191, 56, 121, 29, 191, 191, 246, 72, 190, 70, 130, 188, 190, 143, 108, 119, 190, 23, 140, 238, 190, 66, 9, 113, 61, 157, 49, 255, 61, 188, 100, 130, 187, 151, 247, 138, 60, 161, 102, 119, 188, 121, 160, 130, 189, 60, 15, 230, 190, 149, 21, 25, 62, 15, 253, 57, 191, 19, 73, 139, 190, 64, 136, 227, 59, 110, 248, 2, 190, 9, 108, 90, 191, 9, 236, 176, 61, 144, 109, 188, 190, 5, 103, 131, 188, 173, 200, 64, 190, 130, 45, 103, 60, 118, 211, 234, 61, 88, 205, 50, 191, 68, 187, 37, 62, 235, 242, 71, 61, 100, 53, 235, 188, 131, 248, 24, 190, 237, 31, 215, 188, 207, 107, 175, 189, 143, 219, 194, 189, 63, 86, 220, 61, 169, 182, 101, 62, 62, 33, 171, 188, 225, 138, 98, 61, 63, 104, 128, 62, 230, 239, 19, 62, 116, 217, 93, 62, 92, 244, 136, 190, 67, 43, 45, 62, 247, 222, 209, 188, 27, 38, 238, 190, 62, 216, 117, 190, 87, 1, 74, 62, 204, 187, 12, 190, 6, 193, 62, 62, 240, 154, 203, 190, 143, 89, 19, 191, 220, 122, 107, 62, 89, 44, 201, 61, 142, 117, 103, 61, 39, 61, 34, 190, 180, 223, 58, 59, 58, 42, 8, 190, 252, 23, 186, 61, 124, 146, 130, 190, 115, 82, 119, 62, 197, 209, 4, 190, 12, 80, 193, 59, 102, 201, 102, 61, 220, 138, 222, 60, 147, 111, 28, 189, 239, 118, 125, 190, 208, 154, 27, 191, 139, 221, 118, 61, 225, 93, 132, 191, 55, 167, 34, 61, 189, 35, 213, 191, 56, 192, 86, 62, 145, 172, 147, 62, 198, 55, 47, 61, 49, 21, 92, 62, 42, 116, 178, 61, 53, 5, 251, 190, 164, 250, 65, 191, 128, 27, 118, 62, 41, 65, 211, 190, 240, 48, 34, 190, 197, 33, 168, 187, 89, 168, 54, 191, 87, 55, 123, 62, 111, 231, 153, 61, 249, 102, 195, 189, 160, 129, 25, 61, 153, 102, 1, 62, 182, 61, 108, 189, 161, 23, 219, 187, 253, 219, 213, 189, 132, 231, 139, 61, 125, 0, 79, 191, 112, 125, 20, 190, 45, 229, 184, 190, 117, 248, 231, 61, 131, 8, 0, 62, 180, 138, 201, 61, 103, 236, 151, 62, 3, 211, 253, 188, 155, 232, 64, 61, 5, 173, 166, 61, 107, 150, 224, 188, 132, 182, 143, 190, 181, 173, 247, 189, 34, 55, 201, 62, 58, 103, 27, 190, 76, 20, 71, 61, 102, 255, 179, 188, 131, 14, 136, 190, 191, 224, 86, 62, 58, 141, 11, 62, 103, 226, 139, 190, 167, 168, 8, 190, 52, 156, 101, 191, 35, 206, 56, 62, 24, 242, 61, 62, 227, 238, 148, 62, 91, 2, 5, 190, 12, 151, 10, 62, 140, 176, 185, 61, 160, 38, 167, 189, 166, 63, 230, 60, 121, 106, 196, 187, 68, 108, 74, 191, 121, 8, 173, 190, 55, 30, 67, 62, 238, 133, 26, 62, 197, 73, 70, 62, 192, 246, 199, 61, 0, 164, 186, 190, 205, 205, 151, 62, 191, 245, 147, 62, 205, 98, 7, 190, 117, 221, 187, 190, 151, 49, 61, 61, 209, 57, 156, 62, 240, 219, 163, 62, 67, 134, 192, 62, 175, 26, 38, 62, 4, 167, 184, 62, 193, 232, 47, 61, 121, 202, 92, 190, 21, 55, 0, 62, 33, 140, 192, 59, 67, 29, 126, 63, 122, 23, 82, 187, 85, 182, 42, 190, 107, 180, 81, 190, 154, 211, 88, 190, 179, 55, 173, 61, 216, 222, 99, 191, 153, 207, 176, 190, 59, 244, 175, 190, 12, 120, 172, 190, 21, 36, 159, 189, 205, 13, 205, 60, 154, 94, 186, 62, 151, 223, 149, 61, 209, 199, 142, 189, 116, 135, 112, 189, 10, 166, 40, 62, 43, 142, 152, 61, 61, 241, 159, 60, 4, 30, 60, 61, 78, 188, 182, 61, 177, 204, 21, 190, 114, 0, 129, 189, 175, 136, 244, 189, 183, 221, 21, 188, 94, 77, 119, 61, 202, 10, 77, 61, 196, 135, 232, 189, 147, 242, 17, 190, 138, 182, 0, 190, 40, 92, 198, 189, 114, 61, 184, 189, 15, 106, 50, 62, 24, 41, 29, 190, 211, 72, 21, 61, 4, 38, 29, 190, 209, 108, 245, 189, 66, 152, 209, 61, 34, 59, 53, 60, 242, 96, 113, 189, 234, 169, 14, 190, 122, 48, 3, 61, 250, 26, 32, 190, 31, 58, 14, 62, 128, 160, 3, 190, 208, 72, 81, 189, 24, 100, 253, 61, 207, 2, 86, 61, 114, 181, 161, 190, 25, 78, 38, 62, 32, 181, 103, 191, 88, 34, 181, 62, 222, 183, 141, 190, 210, 156, 67, 62, 32, 131, 163, 188, 188, 153, 48, 190, 177, 10, 201, 62, 229, 245, 162, 61, 168, 149, 49, 61, 185, 197, 74, 62, 26, 230, 185, 61, 63, 227, 33, 190, 153, 214, 140, 62, 101, 103, 224, 190, 28, 251, 93, 62, 166, 113, 191, 189, 13, 234, 65, 190, 164, 233, 3, 189, 45, 235, 107, 62, 113, 242, 7, 190, 42, 182, 58, 61, 140, 51, 37, 191, 18, 244, 100, 188, 75, 177, 68, 191, 240, 90, 158, 190, 149, 59, 210, 188, 19, 101, 96, 190, 104, 119, 22, 190, 244, 71, 179, 61, 235, 18, 183, 61, 223, 103, 32, 62, 141, 27, 113, 190, 132, 147, 254, 61, 198, 194, 27, 190, 89, 204, 137, 189, 210, 67, 169, 191, 206, 17, 239, 61, 189, 115, 150, 62, 226, 103, 19, 61, 7, 0, 118, 62, 250, 12, 196, 62, 139, 58, 142, 190, 61, 226, 56, 191, 185, 190, 136, 62, 168, 39, 10, 190, 165, 78, 146, 61, 176, 36, 9, 190, 146, 59, 228, 190, 162, 72, 86, 61, 111, 39, 127, 61, 27, 61, 111, 190, 172, 31, 208, 189, 242, 97, 35, 189, 104, 3, 59, 189, 134, 20, 154, 62, 222, 82, 70, 190, 213, 56, 177, 187, 131, 77, 41, 191, 212, 191, 84, 185, 166, 93, 244, 190, 181, 7, 167, 189, 99, 199, 120, 62, 200, 0, 186, 61, 253, 240, 20, 190, 98, 67, 26, 63, 38, 214, 156, 61, 246, 185, 111, 62, 251, 14, 100, 190, 58, 123, 201, 62, 203, 31, 163, 62, 6, 91, 6, 191, 212, 252, 203, 61, 8, 8, 37, 61, 2, 182, 76, 191, 62, 112, 100, 189, 103, 251, 46, 62, 41, 211, 42, 190, 67, 158, 172, 62, 71, 119, 243, 190, 255, 202, 141, 191, 33, 54, 140, 62, 131, 210, 24, 190, 148, 38, 80, 190, 105, 159, 208, 190, 16, 30, 6, 190, 107, 75, 149, 62, 196, 78, 5, 63, 65, 57, 75, 61, 147, 130, 138, 62, 37, 83, 220, 190, 45, 199, 37, 61, 100, 46, 7, 190, 29, 72, 49, 62, 150, 122, 134, 62, 206, 79, 1, 62, 226, 10, 154, 62, 203, 36, 19, 62, 1, 76, 246, 61, 56, 255, 234, 189, 124, 84, 65, 189, 108, 8, 153, 61, 136, 253, 200, 62, 169, 187, 97, 190, 82, 173, 163, 62, 60, 133, 138, 61, 247, 16, 94, 190, 238, 5, 253, 189, 238, 232, 79, 186, 187, 215, 71, 61, 58, 65, 63, 61, 200, 110, 189, 190, 195, 215, 115, 190, 75, 96, 185, 61, 223, 27, 20, 62, 243, 109, 42, 190, 253, 252, 104, 190, 214, 22, 147, 189, 105, 230, 18, 190, 23, 207, 132, 62, 226, 74, 245, 190, 0, 237, 39, 62, 68, 121, 201, 61, 96, 159, 29, 61, 97, 28, 48, 61, 192, 197, 133, 190, 248, 12, 210, 62, 220, 108, 212, 62, 103, 240, 114, 190, 135, 31, 108, 189, 139, 37, 173, 62, 142, 77, 119, 62, 43, 90, 27, 190, 105, 48, 179, 61, 4, 21, 28, 190, 198, 5, 195, 62, 128, 97, 40, 59, 245, 194, 175, 190, 93, 227, 166, 62, 151, 220, 188, 189, 119, 53, 103, 190, 121, 49, 0, 63, 203, 208, 231, 61, 63, 226, 218, 190, 109, 198, 164, 58, 28, 244, 68, 190, 113, 199, 73, 190, 66, 233, 177, 61, 139, 76, 156, 188, 22, 170, 169, 190, 209, 91, 98, 191, 61, 229, 247, 62, 72, 57, 41, 191, 52, 79, 233, 190, 144, 71, 6, 62, 230, 93, 134, 62, 156, 35, 25, 190, 6, 21, 152, 189, 46, 12, 205, 188, 190, 142, 58, 61, 254, 67, 91, 61, 13, 92, 178, 189, 122, 62, 146, 187, 243, 136, 103, 189, 134, 165, 88, 189, 3, 126, 1, 190, 45, 171, 33, 190, 156, 158, 129, 189, 189, 186, 232, 61, 42, 158, 16, 60, 110, 51, 16, 190, 130, 99, 195, 189, 169, 39, 207, 189, 241, 120, 16, 190, 105, 152, 52, 61, 186, 143, 133, 188, 116, 197, 126, 188, 192, 128, 149, 189, 143, 153, 147, 189, 57, 97, 45, 188, 230, 161, 153, 188, 224, 15, 48, 62, 65, 89, 4, 62, 185, 10, 146, 60, 32, 39, 41, 62, 251, 249, 9, 190, 202, 108, 226, 189, 16, 27, 226, 61, 114, 119, 228, 62, 82, 240, 84, 190, 1, 37, 36, 190, 245, 89, 212, 62, 254, 18, 16, 190, 225, 34, 143, 189, 153, 72, 164, 62, 94, 84, 223, 62, 226, 22, 23, 188, 250, 167, 58, 190, 222, 27, 50, 190, 110, 182, 217, 188, 156, 163, 183, 190, 142, 227, 147, 191, 200, 17, 58, 62, 122, 214, 147, 189, 128, 174, 195, 191, 74, 231, 215, 61, 45, 88, 135, 189, 186, 93, 117, 188, 159, 58, 246, 62, 134, 34, 52, 191, 211, 155, 189, 190, 92, 172, 138, 62, 51, 1, 125, 62, 198, 50, 15, 190, 228, 12, 203, 190, 193, 91, 39, 62, 155, 28, 172, 188, 170, 225, 73, 191, 21, 210, 58, 61, 228, 143, 148, 61, 34, 160, 120, 189, 131, 141, 37, 62, 170, 188, 61, 62, 208, 216, 204, 190, 72, 101, 183, 58, 0, 255, 165, 191, 155, 236, 224, 61, 170, 43, 28, 190, 247, 221, 1, 62, 73, 214, 188, 61, 255, 156, 6, 190, 210, 233, 174, 62, 67, 250, 182, 61, 226, 25, 129, 61, 239, 2, 36, 62, 222, 145, 32, 62, 180, 139, 127, 190, 199, 191, 151, 62, 92, 177, 16, 191, 95, 8, 37, 61, 128, 90, 252, 60, 84, 69, 207, 190, 149, 54, 56, 62, 166, 200, 223, 61, 213, 125, 131, 190, 122, 254, 107, 61, 127, 44, 64, 191, 13, 183, 59, 62, 4, 8, 80, 191, 36, 137, 255, 190, 159, 203, 171, 61, 98, 5, 158, 189, 13, 251, 16, 62, 192, 246, 66, 62, 191, 163, 146, 189, 155, 186, 57, 62, 72, 212, 252, 188, 244, 118, 112, 61, 80, 157, 65, 62, 85, 76, 162, 188, 76, 114, 148, 188, 119, 39, 157, 190, 209, 169, 116, 190, 45, 145, 177, 62, 199, 40, 182, 190, 94, 177, 212, 189, 2, 148, 133, 62, 37, 252, 16, 190, 101, 230, 35, 61, 19, 154, 94, 189, 208, 163, 223, 60, 99, 185, 209, 61, 79, 97, 131, 62, 68, 234, 128, 58, 93, 253, 33, 189, 186, 235, 33, 62, 130, 152, 68, 62, 98, 244, 164, 62, 20, 232, 35, 62, 255, 133, 222, 61, 236, 10, 139, 62, 186, 85, 171, 60, 190, 231, 142, 62, 208, 26, 24, 190, 136, 254, 176, 61, 96, 38, 150, 190, 99, 121, 9, 190, 103, 191, 11, 190, 225, 132, 19, 190, 238, 66, 15, 190, 46, 59, 184, 189, 141, 107, 46, 190, 74, 110, 175, 61, 226, 69, 35, 190, 226, 9, 133, 190, 10, 124, 163, 189, 9, 102, 215, 189, 156, 105, 3, 188, 38, 166, 232, 189, 165, 134, 197, 61, 162, 11, 166, 189, 36, 138, 67, 190, 229, 108, 144, 188, 183, 179, 100, 61, 48, 74, 15, 190, 129, 73, 98, 189, 227, 13, 152, 61, 106, 176, 67, 190, 100, 49, 233, 189, 168, 128, 44, 60, 238, 35, 110, 61, 239, 235, 42, 190, 122, 157, 128, 189, 19, 31, 163, 190, 246, 153, 129, 61, 32, 6, 65, 190, 132, 14, 230, 189, 16, 150, 4, 191, 102, 44, 251, 189, 1, 187, 23, 189, 5, 137, 4, 189, 31, 122, 185, 62, 240, 183, 129, 190, 173, 12, 195, 61, 207, 144, 66, 62, 88, 32, 38, 62, 25, 111, 38, 62, 93, 82, 4, 191, 157, 204, 158, 61, 160, 3, 74, 190, 142, 56, 104, 190, 81, 123, 236, 61, 230, 127, 243, 62, 152, 207, 238, 190, 177, 91, 153, 62, 107, 175, 184, 191, 216, 146, 135, 189, 148, 127, 72, 62, 29, 113, 46, 190, 62, 8, 1, 191, 145, 76, 12, 190, 3, 20, 47, 191, 39, 16, 253, 62, 142, 244, 87, 61, 189, 136, 35, 61, 248, 149, 166, 62, 202, 201, 131, 61, 135, 45, 206, 61, 142, 81, 10, 62, 165, 206, 31, 60, 65, 151, 27, 190, 239, 82, 17, 191, 184, 86, 182, 60, 83, 122, 249, 190, 20, 177, 157, 189, 114, 56, 168, 190, 186, 61, 251, 189, 235, 234, 140, 189, 112, 160, 189, 190, 222, 103, 213, 62, 246, 205, 170, 61, 73, 144, 135, 62, 95, 125, 42, 188, 152, 39, 225, 189, 49, 179, 206, 190, 161, 65, 154, 189, 74, 47, 43, 190, 131, 127, 60, 62, 192, 38, 9, 62, 74, 32, 28, 190, 9, 193, 4, 60, 153, 30, 249, 61, 12, 146, 33, 62, 59, 62, 141, 61, 139, 184, 27, 191, 242, 203, 218, 189, 111, 231, 15, 191, 5, 146, 217, 190, 123, 149, 210, 61, 174, 162, 227, 190, 123, 56, 156, 190, 195, 117, 65, 191, 30, 223, 79, 189, 179, 44, 198, 62, 16, 111, 121, 62, 112, 65, 246, 62, 109, 122, 32, 188, 26, 120, 130, 62, 236, 157, 196, 189, 89, 186, 79, 62, 137, 220, 153, 62, 132, 192, 151, 190, 221, 191, 167, 60, 232, 255, 88, 59, 162, 135, 243, 189, 206, 112, 41, 62, 85, 106, 164, 62, 158, 48, 203, 190, 91, 85, 140, 62, 71, 126, 180, 191, 165, 130, 129, 190, 238, 136, 139, 190, 65, 177, 176, 190, 131, 183, 239, 190, 70, 145, 218, 189, 125, 210, 243, 190, 56, 141, 15, 63, 61, 217, 191, 62, 46, 48, 130, 190, 38, 80, 12, 63, 82, 183, 28, 189, 54, 120, 105, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 116, 129, 188, 225, 156, 10, 62, 127, 3, 195, 188, 138, 0, 129, 60, 38, 179, 222, 61, 10, 205, 47, 61, 43, 108, 93, 62, 156, 180, 208, 189, 230, 212, 134, 62, 77, 214, 205, 61, 71, 73, 106, 62, 60, 104, 31, 190, 110, 45, 189, 62, 11, 44, 120, 190, 11, 59, 165, 58, 23, 194, 62, 62, 142, 177, 56, 61, 216, 241, 72, 186, 79, 150, 152, 189, 201, 249, 206, 62, 194, 206, 229, 60, 28, 185, 237, 59, 15, 83, 12, 62, 156, 119, 105, 62, 169, 48, 27, 190, 112, 116, 217, 189, 208, 197, 221, 61, 140, 92, 149, 190, 179, 194, 221, 61, 82, 152, 12, 62, 95, 199, 189, 189, 43, 78, 135, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 118, 58, 62, 69, 226, 105, 63, 118, 127, 66, 191, 103, 210, 22, 191, 38, 28, 133, 191, 112, 68, 179, 190, 20, 132, 226, 190, 103, 75, 114, 62, 202, 172, 18, 63, 223, 141, 31, 62, 242, 208, 7, 62, 129, 21, 63, 63, 48, 112, 147, 63, 181, 223, 130, 190, 81, 86, 207, 188, 131, 3, 44, 191, 102, 253, 156, 190, 170, 45, 220, 62, 253, 76, 51, 190, 205, 206, 247, 62, 76, 148, 236, 190, 135, 138, 25, 191, 55, 187, 182, 188, 152, 45, 99, 62, 134, 54, 6, 62, 119, 138, 115, 191, 159, 2, 47, 63, 123, 30, 71, 190, 46, 201, 211, 185, 170, 13, 227, 190, 231, 128, 30, 63, 157, 246, 160, 190, 133, 194, 61, 61, 50, 106, 94, 63, 76, 23, 21, 62, 43, 29, 50, 190, 168, 65, 119, 62, 219, 5, 52, 63, 166, 165, 46, 191, 193, 225, 69, 190, 148, 246, 197, 188, 121, 168, 38, 190, 11, 46, 116, 190, 93, 188, 170, 62, 235, 116, 144, 189, 120, 222, 218, 62, 132, 144, 164, 190, 171, 9, 63, 190, 35, 19, 26, 189, 97, 58, 0, 61, 117, 70, 145, 61, 100, 125, 234, 189, 114, 111, 171, 190, 182, 149, 43, 61, 217, 209, 176, 190, 19, 30, 38, 190, 73, 56, 150, 189, 5, 237, 37, 62, 73, 13, 40, 62, 0, 21, 246, 188, 18, 29, 39, 62, 37, 237, 191, 61, 159, 143, 250, 61, 71, 46, 128, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 109, 179, 60, 188, 182, 199, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {27, 114, 19, 64, 108, 184, 220, 63, 17, 123, 212, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {63, 104, 159, 191, 70, 224, 165, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0021/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}