// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 235, 217, 62, 5, 238, 28, 191, 105, 120, 153, 62, 43, 97, 10, 63, 174, 188, 28, 191, 211, 104, 188, 62, 36, 253, 29, 191, 253, 198, 27, 191, 216, 203, 89, 189, 6, 237, 163, 188, 28, 23, 138, 190, 136, 194, 44, 63, 73, 32, 100, 62, 57, 28, 71, 191, 209, 20, 35, 191, 29, 126, 36, 63, 154, 123, 177, 62, 19, 210, 255, 62, 11, 121, 100, 62, 152, 245, 183, 190, 235, 1, 157, 188, 167, 241, 149, 62, 66, 227, 186, 62, 212, 96, 230, 190, 8, 155, 247, 190, 19, 101, 28, 191, 61, 99, 3, 63, 61, 103, 70, 191, 205, 192, 26, 59, 69, 159, 31, 189, 210, 215, 65, 191, 40, 52, 182, 62, 5, 108, 28, 63, 4, 131, 54, 190, 166, 62, 212, 189, 168, 127, 194, 62, 170, 199, 35, 62, 206, 85, 18, 188, 144, 176, 28, 187, 225, 210, 109, 188, 118, 37, 40, 191, 252, 194, 65, 62, 242, 128, 25, 190, 85, 58, 38, 63, 60, 234, 140, 60, 157, 169, 17, 63, 225, 40, 85, 191, 28, 87, 89, 190, 156, 16, 133, 190, 112, 243, 66, 63, 36, 182, 244, 190, 204, 7, 164, 190, 133, 109, 155, 61, 159, 94, 4, 190, 20, 152, 245, 190, 41, 132, 107, 63, 72, 147, 163, 61, 190, 133, 200, 190, 229, 237, 172, 190, 187, 5, 2, 63, 195, 138, 43, 63, 12, 109, 77, 63, 86, 177, 231, 62, 201, 238, 51, 191, 250, 28, 118, 191, 169, 55, 36, 61, 156, 177, 118, 63, 65, 49, 192, 62, 196, 106, 108, 62, 183, 227, 24, 191, 10, 138, 22, 191, 235, 148, 195, 190, 163, 121, 45, 62, 134, 27, 51, 191, 129, 129, 147, 62, 225, 29, 205, 190, 239, 158, 180, 62, 112, 106, 82, 191, 8, 199, 13, 63, 93, 106, 80, 191, 20, 156, 0, 190, 163, 8, 135, 62, 0, 50, 136, 63, 39, 157, 180, 62, 224, 132, 4, 191, 249, 218, 32, 190, 166, 89, 11, 63, 49, 52, 81, 190, 36, 197, 254, 190, 40, 13, 1, 63, 94, 196, 240, 190, 218, 222, 79, 191, 132, 222, 94, 62, 64, 145, 76, 62, 204, 29, 163, 190, 54, 82, 4, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 168, 243, 190, 29, 84, 170, 62, 144, 128, 240, 61, 33, 66, 91, 190, 60, 119, 4, 191, 22, 93, 158, 62, 212, 134, 15, 191, 62, 35, 240, 61, 231, 71, 27, 62, 44, 176, 205, 61, 174, 100, 176, 190, 99, 60, 147, 190, 88, 211, 134, 190, 165, 236, 162, 61, 37, 152, 35, 63, 225, 97, 2, 62, 128, 130, 147, 188, 184, 28, 147, 61, 180, 254, 132, 62, 14, 136, 139, 190, 198, 30, 36, 191, 176, 251, 129, 190, 22, 74, 247, 62, 125, 168, 19, 62, 225, 4, 151, 62, 137, 111, 6, 191, 58, 74, 138, 62, 11, 169, 215, 190, 116, 155, 16, 63, 119, 252, 118, 190, 59, 39, 145, 190, 131, 31, 225, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 224, 198, 189, 153, 22, 242, 61, 122, 103, 130, 189, 66, 133, 136, 61, 76, 139, 104, 61, 169, 120, 139, 189, 118, 166, 151, 188, 81, 2, 135, 187, 168, 36, 130, 60, 137, 17, 11, 189, 75, 51, 65, 190, 254, 162, 41, 188, 253, 160, 50, 62, 84, 7, 76, 190, 59, 12, 100, 61, 113, 59, 182, 189, 80, 199, 24, 189, 191, 10, 43, 189, 116, 22, 253, 188, 53, 219, 179, 189, 158, 85, 34, 62, 63, 247, 226, 61, 54, 105, 208, 189, 156, 49, 120, 61, 125, 205, 13, 62, 66, 182, 65, 189, 62, 236, 150, 189, 232, 252, 138, 61, 240, 168, 198, 189, 6, 237, 9, 62, 111, 37, 40, 190, 21, 140, 26, 190, 193, 182, 221, 59, 94, 110, 1, 190, 114, 72, 224, 189, 21, 29, 218, 60, 185, 109, 235, 189, 166, 96, 46, 189, 125, 66, 70, 61, 198, 90, 51, 189, 248, 148, 252, 61, 239, 110, 159, 61, 168, 2, 255, 189, 51, 150, 145, 189, 189, 197, 218, 189, 58, 214, 3, 189, 133, 208, 173, 189, 16, 227, 28, 190, 253, 164, 231, 189, 152, 149, 11, 189, 13, 150, 1, 61, 94, 214, 86, 189, 144, 47, 13, 189, 15, 254, 25, 62, 71, 220, 143, 189, 231, 18, 21, 61, 166, 128, 236, 60, 229, 25, 232, 61, 134, 70, 184, 189, 234, 182, 169, 61, 125, 108, 6, 190, 41, 16, 194, 61, 202, 154, 46, 190, 243, 44, 210, 61, 33, 188, 34, 62, 29, 193, 67, 62, 150, 104, 102, 190, 235, 76, 222, 60, 139, 116, 97, 190, 189, 190, 137, 190, 251, 62, 167, 59, 165, 224, 17, 61, 211, 32, 208, 61, 9, 252, 165, 60, 61, 39, 40, 190, 201, 191, 178, 190, 229, 190, 253, 189, 61, 195, 99, 187, 108, 201, 43, 62, 23, 138, 155, 62, 153, 121, 82, 61, 225, 234, 64, 62, 12, 4, 61, 62, 9, 116, 118, 190, 137, 177, 0, 191, 222, 38, 116, 191, 161, 204, 86, 62, 18, 53, 9, 190, 246, 49, 213, 185, 46, 14, 181, 61, 89, 179, 151, 61, 105, 103, 52, 190, 115, 232, 33, 62, 38, 91, 204, 190, 137, 57, 30, 191, 187, 230, 189, 190, 214, 242, 31, 62, 143, 253, 44, 189, 158, 168, 33, 190, 65, 29, 27, 190, 98, 50, 141, 190, 63, 137, 48, 61, 47, 108, 151, 189, 186, 184, 9, 62, 180, 127, 255, 60, 224, 251, 227, 190, 116, 136, 241, 189, 37, 220, 29, 190, 148, 213, 114, 61, 146, 255, 39, 189, 225, 121, 241, 188, 129, 94, 230, 189, 40, 96, 161, 59, 182, 167, 91, 190, 171, 46, 62, 62, 35, 100, 171, 61, 81, 230, 182, 188, 240, 83, 133, 62, 75, 244, 42, 61, 124, 136, 206, 190, 30, 140, 54, 62, 235, 43, 153, 189, 16, 126, 146, 61, 249, 239, 4, 60, 125, 191, 178, 61, 69, 220, 221, 60, 53, 91, 206, 189, 219, 17, 85, 61, 51, 176, 99, 189, 32, 102, 78, 188, 252, 29, 167, 61, 106, 196, 99, 189, 106, 137, 195, 189, 146, 78, 241, 61, 79, 113, 29, 59, 74, 130, 205, 61, 84, 127, 235, 59, 207, 68, 39, 62, 136, 87, 49, 61, 138, 255, 227, 58, 186, 129, 11, 190, 25, 154, 233, 189, 108, 56, 87, 62, 246, 201, 150, 62, 52, 240, 158, 189, 253, 7, 5, 190, 231, 3, 0, 62, 210, 223, 110, 60, 198, 184, 56, 190, 4, 148, 57, 61, 124, 211, 136, 61, 130, 114, 85, 62, 196, 211, 28, 62, 215, 7, 12, 190, 138, 172, 162, 62, 36, 34, 183, 190, 103, 110, 71, 62, 229, 249, 233, 189, 96, 145, 99, 190, 94, 33, 72, 189, 135, 72, 37, 62, 5, 104, 39, 62, 199, 81, 65, 62, 6, 196, 218, 188, 102, 94, 63, 189, 58, 243, 230, 61, 208, 99, 150, 189, 209, 216, 81, 62, 111, 113, 161, 190, 17, 91, 13, 62, 86, 81, 32, 189, 90, 155, 187, 60, 70, 28, 206, 189, 91, 173, 146, 189, 50, 230, 155, 188, 18, 125, 11, 62, 126, 111, 90, 189, 144, 153, 19, 62, 183, 64, 46, 62, 93, 43, 102, 190, 88, 116, 0, 190, 147, 13, 146, 62, 219, 83, 206, 61, 144, 148, 246, 188, 91, 170, 134, 62, 48, 83, 47, 62, 207, 248, 77, 62, 239, 127, 43, 190, 194, 65, 70, 190, 8, 254, 42, 190, 45, 21, 43, 189, 99, 19, 32, 60, 73, 86, 246, 189, 190, 242, 215, 61, 4, 191, 19, 189, 238, 255, 244, 61, 20, 176, 79, 62, 71, 178, 119, 189, 27, 17, 2, 190, 151, 170, 249, 189, 118, 239, 226, 61, 205, 116, 246, 60, 90, 235, 46, 62, 189, 78, 159, 60, 249, 222, 212, 188, 78, 107, 11, 61, 67, 212, 152, 189, 190, 253, 129, 62, 142, 110, 159, 62, 86, 196, 185, 60, 38, 140, 160, 61, 52, 172, 167, 62, 250, 128, 231, 190, 182, 243, 164, 190, 36, 122, 223, 60, 89, 39, 51, 190, 48, 250, 59, 189, 102, 88, 146, 190, 94, 125, 165, 61, 182, 221, 53, 191, 83, 170, 73, 62, 121, 83, 114, 190, 137, 56, 39, 190, 173, 218, 91, 190, 223, 194, 107, 190, 211, 15, 46, 62, 99, 187, 40, 190, 100, 56, 68, 62, 168, 153, 31, 62, 172, 44, 137, 190, 15, 238, 107, 62, 69, 249, 201, 189, 229, 215, 88, 61, 141, 61, 67, 62, 73, 130, 38, 62, 231, 21, 22, 189, 166, 46, 195, 61, 247, 161, 52, 62, 69, 195, 199, 189, 244, 183, 240, 62, 153, 169, 61, 62, 254, 16, 176, 187, 123, 181, 252, 61, 38, 70, 235, 62, 142, 224, 62, 190, 161, 43, 14, 191, 149, 14, 34, 190, 15, 68, 219, 186, 79, 251, 59, 190, 239, 204, 151, 190, 191, 210, 226, 60, 103, 135, 37, 190, 140, 174, 19, 62, 225, 24, 175, 189, 167, 90, 158, 190, 68, 86, 11, 190, 153, 235, 7, 61, 157, 9, 74, 190, 243, 61, 136, 61, 47, 117, 177, 190, 26, 23, 25, 190, 57, 211, 15, 62, 207, 165, 183, 60, 46, 84, 159, 61, 190, 70, 254, 188, 231, 186, 29, 62, 111, 68, 37, 190, 254, 14, 147, 188, 201, 164, 35, 61, 19, 43, 1, 62, 254, 106, 247, 61, 146, 53, 115, 189, 182, 79, 171, 61, 156, 138, 11, 60, 50, 159, 160, 189, 164, 34, 49, 190, 218, 81, 12, 61, 250, 13, 2, 63, 24, 240, 202, 61, 247, 4, 178, 188, 1, 47, 173, 61, 220, 32, 13, 61, 21, 169, 232, 189, 205, 109, 189, 190, 20, 105, 136, 189, 145, 58, 128, 62, 108, 12, 151, 62, 140, 251, 211, 189, 45, 104, 75, 62, 118, 49, 99, 61, 170, 135, 139, 60, 30, 116, 226, 61, 32, 128, 110, 61, 184, 225, 151, 61, 54, 89, 28, 60, 191, 124, 172, 60, 172, 225, 232, 189, 166, 95, 23, 189, 197, 179, 26, 190, 31, 85, 55, 190, 166, 80, 49, 62, 178, 252, 248, 189, 162, 154, 64, 189, 55, 143, 188, 61, 121, 22, 54, 59, 177, 212, 128, 189, 49, 5, 123, 190, 132, 162, 212, 189, 140, 225, 71, 190, 166, 242, 116, 62, 191, 244, 21, 62, 115, 38, 240, 61, 153, 28, 4, 189, 153, 135, 6, 62, 133, 182, 158, 62, 168, 202, 67, 190, 199, 83, 133, 190, 20, 89, 6, 61, 39, 114, 103, 62, 72, 252, 20, 60, 198, 148, 5, 190, 210, 134, 147, 190, 60, 237, 10, 62, 167, 24, 22, 191, 135, 48, 197, 190, 127, 249, 31, 62, 225, 41, 119, 189, 127, 201, 150, 62, 11, 1, 219, 61, 105, 217, 41, 62, 139, 192, 34, 191, 254, 68, 96, 190, 224, 229, 36, 61, 9, 65, 54, 60, 51, 197, 87, 62, 35, 207, 21, 190, 105, 226, 223, 189, 23, 59, 94, 62, 50, 78, 131, 61, 243, 211, 163, 190, 187, 182, 14, 62, 204, 3, 16, 63, 212, 231, 73, 62, 91, 148, 34, 62, 224, 144, 57, 62, 81, 93, 40, 61, 60, 203, 70, 190, 48, 182, 122, 190, 113, 51, 112, 190, 146, 37, 119, 188, 213, 223, 3, 63, 146, 174, 16, 188, 95, 178, 183, 60, 231, 144, 158, 189, 77, 27, 80, 190, 2, 72, 97, 189, 23, 126, 123, 190, 236, 252, 146, 62, 192, 183, 134, 189, 155, 144, 62, 62, 232, 139, 172, 188, 137, 146, 11, 62, 213, 86, 140, 190, 41, 47, 175, 188, 47, 200, 37, 189, 59, 188, 9, 190, 239, 217, 24, 188, 75, 142, 12, 191, 240, 95, 207, 189, 17, 89, 219, 61, 112, 42, 213, 189, 209, 39, 10, 190, 137, 176, 168, 62, 54, 105, 169, 62, 155, 34, 51, 188, 224, 213, 94, 62, 164, 190, 11, 62, 151, 143, 49, 62, 152, 228, 141, 190, 81, 61, 28, 61, 62, 163, 22, 61, 207, 178, 0, 189, 7, 85, 37, 62, 79, 36, 87, 62, 68, 254, 93, 62, 79, 100, 168, 61, 225, 110, 223, 189, 78, 36, 94, 189, 12, 118, 72, 190, 182, 154, 133, 190, 86, 68, 214, 61, 185, 112, 26, 190, 46, 188, 65, 62, 38, 114, 40, 62, 157, 234, 87, 62, 103, 40, 32, 190, 170, 254, 211, 60, 125, 27, 37, 62, 16, 149, 189, 189, 150, 66, 95, 62, 181, 8, 157, 62, 149, 133, 96, 62, 164, 223, 132, 62, 178, 233, 118, 62, 203, 76, 11, 190, 28, 61, 71, 191, 186, 146, 79, 189, 111, 198, 188, 190, 127, 217, 167, 190, 13, 223, 163, 190, 96, 132, 24, 62, 33, 129, 2, 191, 7, 208, 207, 61, 176, 115, 80, 190, 130, 153, 178, 190, 46, 208, 52, 190, 36, 104, 141, 189, 145, 218, 183, 61, 223, 82, 64, 60, 143, 205, 19, 62, 156, 203, 99, 190, 154, 64, 105, 59, 25, 34, 199, 61, 238, 233, 75, 62, 162, 141, 36, 190, 92, 159, 38, 61, 22, 86, 85, 190, 168, 217, 13, 62, 246, 181, 41, 62, 108, 221, 113, 190, 205, 214, 105, 62, 104, 157, 199, 190, 171, 42, 177, 187, 177, 46, 134, 187, 17, 59, 212, 188, 118, 145, 206, 188, 24, 198, 42, 189, 23, 96, 25, 62, 209, 47, 173, 62, 187, 157, 11, 62, 196, 233, 158, 58, 103, 134, 133, 60, 19, 5, 14, 190, 175, 61, 103, 190, 14, 247, 242, 61, 200, 232, 158, 61, 107, 76, 46, 62, 164, 177, 34, 187, 141, 104, 62, 61, 192, 134, 31, 190, 110, 89, 29, 62, 114, 144, 247, 189, 128, 187, 84, 60, 95, 131, 230, 60, 132, 200, 234, 61, 209, 173, 46, 190, 206, 161, 204, 188, 226, 106, 38, 190, 198, 192, 3, 62, 194, 132, 16, 62, 136, 172, 207, 59, 179, 167, 191, 61, 213, 221, 151, 189, 242, 224, 170, 61, 185, 230, 23, 62, 66, 243, 220, 189, 104, 135, 57, 190, 30, 25, 161, 187, 230, 79, 191, 61, 137, 241, 174, 189, 191, 224, 117, 61, 84, 95, 53, 190, 17, 3, 67, 190, 210, 132, 42, 190, 114, 64, 49, 189, 231, 243, 48, 61, 83, 46, 16, 190, 153, 129, 183, 61, 15, 59, 44, 62, 113, 42, 57, 190, 25, 211, 240, 60, 90, 229, 134, 61, 188, 80, 23, 62, 9, 251, 71, 61, 252, 9, 60, 190, 253, 198, 80, 62, 129, 124, 89, 189, 166, 208, 202, 189, 102, 171, 160, 188, 131, 215, 178, 189, 176, 211, 223, 187, 210, 5, 88, 188, 40, 187, 163, 189, 96, 148, 7, 190, 214, 134, 114, 189, 3, 76, 56, 62, 88, 241, 44, 62, 99, 79, 22, 62, 17, 105, 153, 189, 154, 128, 30, 62, 163, 237, 165, 190, 149, 17, 24, 61, 88, 215, 13, 62, 207, 162, 254, 61, 240, 102, 5, 190, 160, 177, 82, 57, 241, 19, 170, 62, 254, 77, 33, 188, 97, 124, 31, 62, 58, 99, 116, 189, 87, 105, 12, 61, 82, 173, 201, 189, 123, 10, 50, 190, 226, 224, 168, 189, 49, 29, 172, 60, 5, 39, 173, 189, 183, 253, 83, 189, 137, 239, 236, 189, 197, 171, 200, 188, 120, 218, 46, 190, 226, 174, 73, 61, 15, 57, 223, 189, 81, 6, 186, 60, 38, 227, 46, 62, 174, 84, 115, 189, 238, 251, 143, 188, 143, 44, 40, 62, 209, 242, 14, 190, 79, 148, 66, 189, 16, 52, 20, 60, 59, 169, 232, 189, 195, 144, 16, 190, 234, 217, 140, 189, 2, 235, 10, 190, 130, 139, 5, 188, 27, 1, 84, 60, 35, 205, 85, 61, 208, 165, 236, 61, 151, 40, 60, 189, 233, 100, 192, 61, 247, 95, 7, 189, 52, 152, 66, 189, 221, 86, 26, 190, 192, 99, 210, 60, 31, 113, 53, 62, 180, 97, 28, 190, 114, 127, 22, 62, 220, 251, 168, 189, 14, 202, 105, 190, 113, 240, 233, 62, 219, 83, 134, 61, 144, 139, 115, 189, 59, 12, 209, 189, 161, 253, 212, 61, 75, 88, 184, 190, 17, 53, 98, 190, 90, 213, 158, 189, 92, 247, 118, 61, 230, 83, 234, 61, 154, 21, 106, 190, 186, 156, 71, 61, 21, 69, 100, 61, 11, 131, 0, 61, 115, 113, 176, 190, 183, 43, 135, 62, 27, 171, 142, 62, 221, 138, 139, 62, 187, 1, 198, 61, 8, 141, 75, 189, 69, 63, 48, 62, 42, 226, 142, 190, 53, 36, 152, 61, 192, 20, 162, 61, 229, 97, 141, 61, 164, 214, 95, 190, 44, 191, 147, 62, 45, 13, 17, 62, 153, 202, 179, 189, 160, 33, 117, 189, 147, 221, 104, 189, 133, 65, 22, 62, 50, 170, 2, 61, 184, 232, 42, 62, 137, 173, 53, 190, 186, 169, 148, 188, 62, 2, 221, 189, 60, 147, 23, 61, 206, 147, 91, 61, 133, 176, 6, 62, 217, 46, 224, 189, 86, 128, 225, 60, 202, 153, 219, 60, 64, 226, 6, 62, 30, 147, 222, 189, 162, 94, 0, 189, 167, 252, 113, 61, 10, 255, 35, 62, 49, 34, 169, 61, 248, 164, 71, 189, 72, 160, 87, 188, 141, 168, 249, 187, 183, 47, 145, 189, 166, 13, 151, 189, 31, 33, 205, 189, 75, 158, 10, 190, 12, 3, 30, 189, 203, 53, 81, 61, 166, 252, 149, 60, 168, 183, 181, 189, 53, 147, 241, 61, 173, 175, 22, 62, 58, 178, 213, 61, 14, 227, 38, 62, 247, 149, 96, 188, 52, 74, 91, 188, 124, 182, 14, 190, 231, 88, 136, 62, 164, 249, 247, 61, 254, 26, 17, 62, 107, 48, 1, 190, 200, 96, 193, 189, 193, 37, 116, 62, 227, 0, 4, 187, 13, 180, 209, 62, 60, 217, 82, 62, 19, 153, 179, 189, 97, 52, 137, 61, 241, 7, 175, 62, 168, 122, 14, 190, 131, 9, 208, 190, 222, 93, 199, 189, 162, 165, 9, 190, 130, 254, 106, 190, 50, 24, 130, 190, 59, 60, 72, 62, 117, 237, 122, 190, 83, 85, 8, 189, 211, 81, 104, 190, 202, 99, 151, 189, 231, 92, 169, 190, 53, 95, 108, 190, 107, 100, 150, 62, 36, 53, 52, 62, 125, 173, 128, 61, 210, 191, 64, 188, 180, 14, 58, 190, 242, 244, 243, 60, 168, 104, 179, 189, 128, 192, 78, 62, 173, 84, 144, 62, 178, 125, 184, 61, 140, 143, 22, 190, 120, 168, 252, 184, 45, 219, 115, 62, 74, 150, 70, 61, 200, 1, 232, 61, 57, 158, 32, 189, 115, 10, 150, 61, 236, 118, 98, 62, 47, 223, 135, 62, 230, 239, 213, 190, 164, 31, 159, 189, 177, 140, 78, 190, 148, 118, 108, 61, 4, 209, 190, 189, 136, 175, 109, 190, 96, 107, 87, 62, 98, 104, 30, 191, 146, 130, 150, 61, 6, 246, 4, 190, 86, 12, 96, 190, 204, 44, 51, 189, 242, 160, 70, 190, 137, 127, 19, 190, 217, 34, 1, 190, 34, 139, 39, 61, 207, 182, 13, 190, 188, 118, 108, 61, 159, 124, 157, 189, 172, 206, 158, 60, 127, 168, 232, 187, 8, 23, 51, 61, 149, 177, 255, 60, 205, 83, 181, 189, 191, 145, 37, 60, 152, 149, 138, 61, 219, 167, 1, 189, 177, 42, 90, 62, 114, 7, 25, 190, 251, 121, 22, 62, 56, 78, 162, 61, 83, 243, 236, 189, 65, 110, 239, 189, 211, 216, 3, 190, 153, 205, 149, 62, 195, 125, 139, 61, 189, 33, 32, 189, 134, 40, 164, 61, 44, 121, 102, 59, 64, 89, 177, 61, 79, 13, 37, 62, 243, 233, 10, 190, 34, 43, 26, 190, 194, 121, 144, 60, 199, 189, 28, 190, 128, 146, 167, 190, 143, 160, 167, 62, 163, 54, 162, 190, 247, 9, 230, 190, 1, 244, 182, 59, 50, 99, 47, 62, 58, 58, 134, 190, 121, 1, 68, 62, 213, 179, 163, 62, 133, 221, 18, 191, 186, 237, 147, 61, 128, 45, 63, 189, 164, 163, 193, 62, 70, 46, 149, 190, 6, 109, 11, 191, 92, 142, 209, 190, 2, 112, 60, 61, 214, 54, 162, 189, 77, 143, 177, 190, 136, 180, 99, 188, 233, 154, 212, 62, 202, 247, 138, 190, 221, 94, 136, 60, 133, 190, 53, 62, 4, 67, 172, 190, 40, 127, 176, 190, 244, 4, 1, 191, 217, 144, 187, 61, 183, 112, 66, 62, 90, 54, 242, 62, 234, 228, 140, 62, 88, 137, 204, 189, 203, 28, 9, 62, 47, 104, 146, 61, 92, 18, 247, 61, 191, 235, 195, 188, 84, 99, 2, 61, 236, 134, 186, 61, 224, 155, 19, 190, 185, 161, 45, 190, 70, 75, 37, 62, 113, 71, 46, 62, 222, 138, 18, 190, 5, 107, 31, 60, 32, 41, 37, 190, 57, 231, 208, 189, 147, 43, 236, 59, 6, 17, 10, 190, 235, 237, 49, 190, 52, 39, 155, 188, 245, 34, 245, 189, 6, 112, 157, 187, 110, 95, 16, 190, 173, 244, 179, 189, 196, 131, 181, 188, 182, 238, 225, 189, 168, 108, 185, 189, 135, 249, 56, 57, 185, 191, 11, 62, 0, 161, 18, 190, 148, 31, 164, 59, 68, 80, 13, 61, 33, 159, 167, 60, 109, 104, 130, 61, 176, 112, 109, 62, 116, 214, 178, 190, 57, 63, 65, 190, 218, 146, 160, 62, 205, 67, 225, 189, 47, 247, 0, 62, 127, 236, 48, 61, 23, 182, 151, 187, 22, 233, 100, 190, 110, 138, 182, 189, 101, 57, 55, 190, 192, 221, 71, 189, 208, 110, 71, 62, 142, 41, 137, 190, 56, 215, 229, 62, 51, 176, 19, 62, 226, 247, 21, 190, 52, 194, 3, 190, 43, 222, 24, 190, 228, 165, 28, 190, 148, 56, 146, 190, 161, 143, 244, 189, 46, 25, 166, 61, 82, 104, 250, 60, 132, 77, 37, 190, 30, 78, 128, 61, 132, 139, 40, 190, 49, 70, 191, 189, 225, 15, 15, 188, 59, 163, 13, 60, 187, 155, 31, 190, 4, 237, 135, 190, 78, 78, 145, 189, 19, 175, 51, 190, 97, 148, 142, 61, 240, 251, 84, 59, 223, 180, 202, 61, 237, 79, 15, 62, 90, 98, 6, 189, 22, 121, 18, 62, 5, 76, 170, 61, 3, 93, 137, 189, 241, 77, 140, 185, 86, 104, 223, 189, 236, 61, 182, 61, 19, 136, 169, 61, 101, 96, 87, 62, 169, 13, 4, 189, 164, 168, 96, 61, 176, 169, 51, 62, 220, 188, 61, 189, 54, 162, 19, 190, 167, 85, 126, 190, 224, 224, 60, 61, 30, 4, 130, 61, 57, 127, 194, 189, 68, 174, 74, 61, 44, 206, 10, 62, 154, 179, 217, 60, 75, 231, 20, 62, 48, 245, 232, 189, 30, 190, 228, 190, 191, 23, 157, 188, 32, 36, 251, 62, 122, 231, 115, 61, 95, 232, 236, 188, 201, 132, 143, 189, 59, 160, 9, 190, 50, 160, 156, 62, 138, 212, 255, 61, 27, 30, 45, 62, 56, 79, 143, 189, 239, 34, 42, 62, 141, 72, 140, 190, 250, 27, 130, 62, 162, 53, 33, 62, 162, 28, 93, 61, 247, 37, 76, 62, 61, 165, 28, 190, 231, 1, 131, 190, 160, 15, 43, 62, 183, 237, 235, 188, 40, 54, 33, 191, 116, 209, 221, 62, 157, 199, 238, 61, 247, 142, 41, 62, 137, 119, 46, 62, 171, 92, 91, 62, 209, 53, 44, 61, 214, 78, 247, 189, 47, 223, 178, 190, 175, 127, 142, 189, 76, 28, 16, 62, 198, 182, 30, 62, 81, 95, 167, 62, 44, 74, 73, 60, 45, 5, 70, 61, 193, 236, 43, 62, 157, 246, 226, 188, 233, 64, 144, 60, 134, 139, 254, 60, 136, 109, 15, 62, 127, 121, 178, 187, 216, 171, 163, 59, 163, 156, 233, 61, 181, 234, 46, 62, 26, 232, 213, 61, 252, 147, 5, 190, 67, 254, 240, 187, 155, 177, 170, 61, 188, 36, 150, 62, 121, 233, 21, 189, 123, 38, 166, 189, 2, 89, 104, 62, 206, 100, 100, 61, 204, 22, 164, 190, 174, 91, 36, 190, 21, 219, 62, 62, 128, 252, 227, 189, 114, 27, 115, 189, 251, 175, 32, 190, 227, 87, 72, 62, 162, 218, 31, 61, 32, 65, 24, 62, 122, 37, 231, 189, 39, 134, 247, 189, 39, 96, 84, 190, 60, 113, 135, 189, 108, 156, 41, 62, 222, 127, 197, 188, 143, 231, 21, 189, 146, 199, 152, 190, 202, 102, 148, 187, 1, 148, 33, 62, 112, 229, 175, 190, 134, 213, 155, 62, 5, 209, 7, 61, 154, 82, 53, 62, 114, 95, 134, 188, 235, 214, 164, 61, 60, 16, 138, 62, 161, 118, 8, 60, 63, 70, 173, 62, 151, 214, 152, 62, 250, 28, 17, 62, 113, 112, 62, 62, 170, 148, 163, 62, 221, 107, 209, 190, 14, 107, 96, 190, 127, 173, 120, 189, 161, 23, 90, 189, 77, 247, 138, 190, 57, 191, 178, 190, 77, 200, 134, 61, 84, 34, 104, 191, 185, 146, 136, 62, 145, 202, 46, 190, 90, 131, 124, 190, 49, 30, 183, 190, 157, 110, 205, 62, 116, 83, 160, 190, 112, 243, 95, 62, 23, 219, 207, 190, 187, 37, 174, 190, 236, 195, 155, 62, 80, 126, 23, 190, 11, 107, 0, 62, 165, 25, 234, 189, 185, 93, 171, 62, 6, 254, 26, 191, 93, 246, 49, 188, 209, 156, 126, 61, 234, 21, 116, 189, 254, 147, 249, 61, 237, 152, 108, 190, 6, 34, 17, 190, 232, 167, 50, 62, 151, 161, 136, 61, 226, 5, 158, 190, 132, 86, 155, 188, 25, 202, 194, 62, 244, 50, 183, 62, 243, 204, 136, 62, 18, 83, 12, 62, 28, 144, 192, 61, 220, 7, 168, 190, 153, 14, 115, 189, 147, 228, 240, 188, 122, 79, 48, 62, 145, 37, 189, 62, 248, 95, 140, 62, 180, 37, 152, 62, 196, 101, 170, 189, 249, 212, 21, 190, 114, 140, 57, 189, 142, 226, 44, 190, 187, 67, 75, 62, 11, 160, 255, 189, 168, 133, 159, 61, 85, 230, 31, 188, 139, 161, 26, 190, 244, 196, 18, 189, 5, 127, 11, 62, 187, 85, 40, 190, 48, 54, 66, 189, 75, 21, 22, 62, 192, 225, 13, 191, 149, 233, 146, 188, 111, 245, 245, 189, 166, 240, 247, 59, 64, 237, 0, 190, 110, 221, 173, 61, 209, 201, 161, 59, 147, 49, 242, 61, 207, 109, 128, 188, 68, 73, 103, 189, 51, 137, 32, 62, 251, 95, 202, 189, 247, 187, 240, 61, 66, 79, 90, 190, 224, 44, 9, 189, 50, 198, 0, 62, 182, 1, 70, 62, 181, 162, 72, 190, 9, 48, 155, 189, 223, 114, 85, 62, 145, 248, 155, 190, 246, 132, 161, 190, 217, 97, 55, 60, 50, 248, 54, 61, 139, 179, 97, 62, 45, 54, 103, 62, 133, 63, 187, 62, 125, 250, 61, 191, 72, 146, 4, 188, 121, 40, 25, 62, 125, 119, 148, 62, 158, 37, 150, 61, 100, 82, 182, 190, 45, 74, 69, 60, 23, 84, 175, 61, 223, 85, 150, 190, 104, 105, 131, 190, 114, 242, 209, 190, 202, 38, 34, 63, 160, 103, 3, 190, 72, 14, 98, 62, 224, 105, 66, 62, 119, 181, 93, 61, 241, 243, 132, 190, 247, 148, 253, 190, 142, 167, 228, 188, 200, 97, 151, 62, 21, 235, 251, 62, 125, 55, 24, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 11, 19, 190, 37, 102, 104, 189, 104, 134, 130, 189, 204, 11, 50, 62, 44, 138, 187, 62, 105, 223, 21, 62, 119, 36, 131, 62, 160, 130, 25, 188, 230, 254, 82, 62, 215, 223, 61, 62, 147, 45, 79, 61, 112, 254, 53, 61, 205, 155, 92, 62, 132, 243, 158, 61, 143, 38, 185, 61, 226, 226, 90, 62, 242, 15, 107, 189, 109, 233, 9, 188, 253, 171, 37, 190, 180, 222, 116, 62, 18, 186, 71, 62, 98, 202, 62, 62, 29, 60, 186, 189, 190, 97, 8, 190, 109, 224, 227, 189, 221, 109, 3, 62, 30, 157, 193, 61, 39, 161, 1, 62, 108, 32, 71, 62, 1, 149, 225, 61, 92, 208, 190, 57, 110, 76, 7, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 186, 173, 61, 173, 157, 192, 189, 135, 162, 237, 62, 184, 228, 42, 189, 14, 220, 41, 61, 172, 147, 148, 62, 14, 125, 2, 63, 181, 214, 161, 62, 92, 197, 153, 190, 128, 42, 69, 62, 223, 102, 27, 191, 13, 244, 61, 190, 232, 56, 7, 63, 11, 25, 14, 190, 196, 254, 150, 61, 209, 54, 139, 60, 249, 191, 84, 189, 102, 88, 230, 190, 134, 30, 134, 189, 26, 7, 221, 62, 133, 182, 220, 62, 235, 227, 26, 188, 111, 61, 128, 191, 116, 145, 36, 189, 29, 232, 51, 189, 69, 67, 36, 60, 214, 134, 184, 190, 73, 198, 227, 61, 120, 166, 42, 63, 98, 119, 63, 191, 161, 254, 45, 190, 150, 18, 46, 191, 85, 100, 161, 189, 30, 163, 23, 187, 153, 116, 77, 190, 110, 52, 224, 189, 203, 141, 149, 190, 152, 134, 52, 190, 21, 102, 201, 61, 112, 175, 122, 62, 191, 16, 149, 190, 167, 25, 62, 190, 95, 62, 60, 62, 215, 78, 28, 62, 209, 51, 136, 62, 131, 78, 46, 190, 47, 248, 19, 62, 199, 107, 104, 190, 161, 54, 219, 188, 148, 230, 142, 62, 180, 238, 239, 60, 109, 172, 161, 189, 238, 101, 145, 187, 144, 214, 6, 190, 52, 85, 220, 61, 216, 164, 206, 189, 232, 41, 37, 63, 76, 152, 239, 189, 145, 108, 42, 190, 80, 141, 62, 190, 199, 116, 244, 61, 11, 240, 96, 61, 48, 215, 146, 61, 119, 168, 134, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 40, 215, 189, 245, 188, 46, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {209, 120, 7, 62, 41, 37, 72, 63, 182, 11, 113, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {142, 254, 94, 191, 253, 145, 62, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0044/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}