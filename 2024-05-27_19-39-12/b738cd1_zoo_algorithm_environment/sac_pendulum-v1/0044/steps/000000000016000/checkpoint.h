// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 219, 9, 63, 187, 216, 38, 191, 141, 61, 188, 62, 47, 103, 248, 62, 131, 29, 117, 191, 151, 164, 22, 62, 185, 7, 51, 191, 105, 175, 140, 191, 186, 222, 187, 189, 186, 83, 160, 189, 218, 47, 60, 61, 91, 255, 44, 63, 198, 16, 3, 63, 175, 197, 134, 191, 225, 58, 25, 191, 34, 234, 31, 63, 105, 207, 14, 63, 205, 247, 235, 62, 11, 121, 100, 62, 152, 245, 183, 190, 235, 1, 157, 188, 186, 128, 136, 62, 132, 223, 226, 62, 239, 127, 200, 190, 226, 4, 253, 190, 196, 177, 207, 190, 229, 223, 237, 62, 77, 220, 129, 191, 224, 231, 168, 61, 58, 9, 109, 189, 143, 132, 211, 190, 58, 194, 111, 63, 51, 119, 28, 63, 183, 236, 179, 190, 25, 147, 149, 61, 192, 189, 155, 62, 170, 199, 35, 62, 206, 85, 18, 188, 144, 176, 28, 187, 165, 41, 160, 61, 29, 146, 67, 191, 194, 192, 9, 62, 190, 50, 111, 190, 115, 150, 75, 63, 223, 54, 20, 62, 233, 184, 236, 62, 92, 128, 169, 191, 227, 254, 127, 190, 230, 120, 255, 188, 166, 7, 27, 63, 203, 218, 0, 191, 147, 241, 12, 191, 157, 128, 38, 61, 17, 205, 248, 189, 208, 102, 129, 191, 102, 2, 121, 63, 166, 180, 182, 61, 230, 196, 104, 190, 175, 125, 64, 190, 97, 142, 7, 63, 36, 172, 63, 63, 171, 191, 128, 63, 60, 238, 150, 62, 15, 188, 49, 191, 180, 134, 140, 191, 31, 227, 236, 189, 93, 196, 94, 63, 126, 236, 64, 63, 139, 50, 122, 62, 223, 212, 43, 191, 227, 50, 137, 191, 222, 105, 139, 190, 192, 198, 7, 62, 248, 114, 69, 191, 7, 52, 142, 62, 180, 152, 192, 190, 238, 143, 217, 62, 1, 219, 56, 191, 180, 190, 201, 62, 220, 96, 151, 191, 219, 173, 119, 190, 159, 155, 177, 62, 144, 148, 180, 63, 196, 246, 222, 62, 39, 94, 25, 191, 252, 242, 196, 189, 219, 22, 6, 63, 218, 200, 11, 190, 163, 248, 1, 191, 198, 70, 227, 62, 124, 165, 7, 191, 177, 252, 42, 191, 82, 68, 141, 62, 99, 39, 119, 62, 26, 191, 226, 190, 20, 124, 232, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 236, 249, 190, 143, 150, 173, 62, 3, 191, 156, 62, 175, 67, 138, 190, 76, 148, 31, 191, 8, 115, 118, 62, 212, 134, 15, 191, 2, 46, 211, 61, 199, 133, 146, 187, 133, 33, 121, 62, 212, 56, 217, 190, 187, 76, 32, 191, 88, 211, 134, 190, 226, 215, 157, 61, 141, 225, 40, 63, 51, 165, 68, 61, 196, 114, 67, 189, 118, 224, 91, 62, 203, 92, 139, 62, 89, 31, 68, 190, 237, 200, 91, 191, 149, 0, 32, 190, 135, 183, 236, 62, 236, 66, 211, 62, 63, 125, 78, 62, 183, 192, 246, 190, 126, 117, 95, 62, 102, 173, 173, 190, 93, 254, 1, 63, 66, 108, 156, 190, 233, 171, 139, 190, 27, 110, 35, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 224, 198, 189, 153, 22, 242, 61, 122, 103, 130, 189, 66, 133, 136, 61, 76, 139, 104, 61, 169, 120, 139, 189, 118, 166, 151, 188, 81, 2, 135, 187, 168, 36, 130, 60, 137, 17, 11, 189, 75, 51, 65, 190, 254, 162, 41, 188, 253, 160, 50, 62, 84, 7, 76, 190, 59, 12, 100, 61, 113, 59, 182, 189, 80, 199, 24, 189, 191, 10, 43, 189, 116, 22, 253, 188, 53, 219, 179, 189, 158, 85, 34, 62, 63, 247, 226, 61, 54, 105, 208, 189, 156, 49, 120, 61, 125, 205, 13, 62, 66, 182, 65, 189, 62, 236, 150, 189, 232, 252, 138, 61, 240, 168, 198, 189, 6, 237, 9, 62, 111, 37, 40, 190, 21, 140, 26, 190, 193, 182, 221, 59, 94, 110, 1, 190, 101, 220, 229, 189, 21, 29, 218, 60, 38, 217, 235, 189, 166, 96, 46, 189, 125, 66, 70, 61, 4, 45, 59, 189, 248, 148, 252, 61, 230, 39, 152, 61, 168, 2, 255, 189, 51, 150, 145, 189, 189, 197, 218, 189, 58, 214, 3, 189, 160, 101, 177, 189, 14, 248, 28, 190, 255, 163, 237, 189, 186, 121, 22, 189, 166, 187, 234, 60, 94, 214, 86, 189, 144, 47, 13, 189, 63, 37, 24, 62, 71, 220, 143, 189, 134, 86, 4, 61, 166, 128, 236, 60, 154, 72, 224, 61, 61, 185, 185, 189, 234, 182, 169, 61, 190, 122, 6, 190, 41, 16, 194, 61, 202, 154, 46, 190, 243, 44, 210, 61, 225, 4, 41, 62, 161, 69, 46, 62, 246, 145, 75, 191, 157, 163, 84, 190, 242, 117, 53, 190, 133, 31, 141, 190, 251, 62, 167, 59, 129, 169, 34, 62, 173, 8, 147, 187, 155, 56, 95, 190, 22, 89, 10, 190, 71, 87, 184, 190, 229, 190, 253, 189, 22, 199, 140, 190, 77, 178, 62, 62, 155, 30, 189, 62, 253, 70, 226, 61, 9, 97, 59, 62, 222, 113, 98, 190, 87, 84, 215, 190, 32, 39, 220, 191, 132, 159, 89, 191, 158, 66, 112, 62, 33, 145, 187, 190, 149, 250, 146, 60, 179, 217, 49, 62, 232, 90, 226, 61, 213, 187, 56, 191, 51, 43, 55, 62, 5, 171, 242, 190, 64, 247, 53, 191, 167, 193, 75, 190, 9, 75, 54, 62, 135, 95, 213, 188, 143, 32, 26, 191, 91, 43, 35, 190, 38, 218, 61, 191, 6, 239, 0, 61, 47, 108, 151, 189, 108, 128, 117, 62, 108, 7, 39, 60, 46, 153, 49, 191, 121, 166, 54, 190, 169, 134, 35, 190, 148, 213, 114, 61, 44, 73, 64, 189, 35, 99, 172, 188, 194, 189, 202, 190, 212, 129, 86, 62, 153, 106, 37, 62, 169, 66, 255, 61, 76, 230, 162, 61, 63, 24, 93, 60, 47, 98, 63, 62, 24, 114, 241, 60, 26, 245, 223, 190, 146, 186, 8, 62, 86, 157, 83, 62, 167, 21, 23, 59, 222, 63, 14, 190, 133, 198, 175, 60, 236, 51, 149, 60, 107, 74, 234, 189, 12, 190, 177, 60, 241, 245, 132, 190, 217, 185, 207, 189, 9, 198, 243, 61, 117, 12, 46, 189, 66, 55, 166, 189, 38, 233, 153, 186, 79, 113, 29, 59, 4, 173, 169, 60, 251, 101, 179, 60, 145, 154, 131, 61, 175, 193, 146, 61, 163, 185, 38, 61, 186, 129, 11, 190, 210, 164, 118, 190, 15, 251, 244, 61, 130, 1, 195, 62, 247, 24, 111, 190, 11, 227, 82, 190, 161, 149, 166, 61, 149, 143, 22, 61, 31, 191, 19, 191, 151, 236, 182, 61, 193, 14, 131, 189, 88, 206, 134, 62, 167, 30, 255, 58, 3, 175, 135, 190, 214, 139, 203, 62, 201, 235, 79, 191, 234, 108, 72, 62, 65, 178, 188, 189, 37, 101, 70, 190, 34, 110, 82, 190, 48, 138, 96, 62, 146, 229, 145, 61, 198, 231, 50, 61, 98, 158, 174, 61, 188, 60, 124, 59, 11, 62, 142, 61, 208, 99, 150, 189, 106, 92, 156, 62, 190, 40, 87, 190, 52, 119, 80, 62, 252, 35, 28, 190, 102, 187, 127, 61, 70, 28, 206, 189, 249, 225, 3, 190, 174, 173, 99, 60, 90, 6, 196, 61, 196, 52, 113, 60, 152, 117, 138, 62, 43, 233, 68, 62, 98, 25, 131, 189, 77, 87, 130, 191, 31, 22, 213, 62, 179, 1, 53, 61, 101, 221, 224, 189, 64, 167, 101, 62, 5, 212, 129, 62, 224, 209, 17, 62, 203, 185, 135, 191, 75, 88, 200, 189, 79, 29, 36, 188, 253, 122, 20, 62, 179, 229, 202, 61, 54, 44, 134, 188, 121, 115, 203, 61, 45, 6, 5, 191, 160, 104, 27, 62, 203, 188, 133, 62, 65, 122, 201, 187, 27, 17, 2, 190, 223, 55, 245, 60, 255, 249, 195, 61, 0, 244, 43, 190, 171, 119, 132, 189, 247, 206, 164, 189, 249, 222, 212, 188, 11, 216, 165, 189, 102, 171, 235, 189, 248, 111, 143, 62, 118, 171, 201, 62, 200, 103, 197, 188, 38, 243, 220, 190, 223, 30, 178, 62, 188, 15, 77, 191, 10, 240, 203, 190, 151, 178, 141, 61, 154, 226, 4, 191, 140, 26, 103, 188, 190, 159, 13, 190, 142, 241, 172, 61, 239, 99, 133, 191, 180, 243, 54, 62, 114, 5, 59, 190, 21, 168, 43, 190, 69, 87, 186, 189, 181, 86, 126, 190, 20, 2, 139, 62, 240, 26, 58, 191, 165, 63, 70, 61, 107, 111, 49, 62, 67, 56, 131, 190, 15, 238, 107, 62, 235, 59, 29, 189, 79, 190, 8, 190, 113, 6, 34, 62, 149, 116, 158, 61, 0, 219, 237, 189, 166, 46, 195, 61, 86, 218, 90, 62, 200, 77, 34, 190, 51, 113, 1, 63, 95, 220, 111, 62, 21, 171, 182, 60, 54, 40, 246, 189, 180, 85, 147, 62, 115, 13, 107, 190, 111, 133, 85, 191, 210, 37, 13, 189, 232, 175, 103, 190, 185, 48, 202, 189, 230, 191, 112, 190, 67, 195, 24, 61, 166, 25, 177, 190, 218, 92, 17, 61, 1, 186, 125, 190, 61, 209, 229, 190, 70, 115, 77, 190, 129, 88, 144, 190, 97, 233, 34, 190, 155, 57, 22, 189, 62, 157, 205, 190, 144, 224, 170, 190, 46, 83, 52, 62, 207, 165, 183, 60, 213, 39, 4, 61, 56, 95, 95, 61, 115, 249, 112, 62, 154, 47, 17, 189, 146, 93, 248, 189, 201, 164, 35, 61, 71, 140, 98, 61, 197, 150, 134, 62, 207, 175, 161, 190, 206, 71, 7, 62, 71, 21, 204, 61, 115, 150, 91, 62, 86, 47, 52, 190, 65, 140, 117, 190, 216, 97, 212, 62, 195, 229, 226, 61, 160, 124, 50, 190, 123, 73, 17, 61, 37, 231, 178, 60, 45, 81, 138, 190, 207, 114, 91, 191, 64, 179, 112, 59, 164, 12, 84, 62, 180, 231, 89, 62, 77, 232, 118, 190, 130, 79, 130, 62, 20, 139, 179, 60, 227, 227, 138, 190, 234, 82, 64, 62, 235, 86, 181, 61, 203, 170, 152, 61, 54, 89, 28, 60, 219, 87, 240, 61, 161, 72, 46, 59, 86, 216, 19, 190, 20, 118, 124, 190, 235, 242, 34, 190, 166, 80, 49, 62, 11, 163, 47, 190, 120, 85, 202, 187, 18, 255, 149, 61, 87, 30, 156, 59, 210, 145, 131, 189, 59, 191, 253, 190, 239, 129, 35, 61, 203, 151, 125, 191, 199, 255, 154, 62, 181, 73, 16, 62, 119, 210, 185, 189, 74, 111, 223, 188, 73, 157, 35, 62, 108, 103, 144, 62, 109, 228, 218, 191, 66, 6, 50, 190, 211, 116, 30, 62, 100, 124, 185, 62, 28, 242, 192, 61, 110, 175, 42, 190, 160, 228, 169, 190, 156, 151, 179, 62, 248, 47, 134, 191, 55, 118, 242, 190, 125, 237, 82, 62, 225, 41, 119, 189, 141, 27, 109, 62, 101, 216, 207, 60, 235, 238, 160, 62, 158, 194, 45, 191, 109, 3, 156, 190, 224, 229, 36, 61, 211, 134, 146, 190, 196, 63, 154, 62, 166, 0, 161, 190, 43, 178, 232, 189, 85, 176, 160, 62, 98, 46, 62, 62, 179, 164, 248, 190, 145, 96, 246, 62, 69, 164, 43, 63, 255, 167, 121, 62, 36, 159, 80, 62, 209, 18, 200, 60, 229, 107, 90, 60, 26, 140, 156, 190, 247, 85, 79, 190, 215, 243, 162, 190, 187, 162, 149, 190, 197, 116, 112, 62, 212, 175, 137, 190, 167, 140, 30, 62, 135, 148, 180, 189, 253, 219, 221, 190, 123, 78, 16, 189, 220, 1, 211, 190, 98, 149, 85, 62, 192, 183, 134, 189, 132, 141, 181, 62, 113, 176, 218, 60, 188, 106, 150, 190, 70, 180, 206, 190, 224, 93, 206, 186, 47, 200, 37, 189, 232, 211, 206, 188, 21, 0, 11, 62, 136, 190, 195, 191, 100, 180, 139, 61, 37, 100, 145, 61, 236, 120, 208, 190, 9, 139, 162, 189, 130, 167, 65, 61, 248, 3, 103, 62, 170, 163, 8, 62, 114, 53, 29, 190, 109, 104, 4, 62, 56, 155, 36, 62, 124, 127, 37, 191, 187, 184, 104, 190, 220, 207, 208, 187, 11, 144, 50, 60, 224, 52, 144, 62, 124, 181, 87, 62, 82, 77, 71, 63, 219, 88, 66, 61, 45, 148, 217, 190, 76, 50, 70, 189, 102, 233, 44, 60, 106, 127, 156, 190, 86, 68, 214, 61, 255, 65, 74, 190, 190, 191, 55, 62, 191, 52, 23, 188, 240, 115, 8, 62, 48, 124, 160, 190, 170, 254, 211, 60, 222, 187, 133, 62, 208, 144, 41, 190, 181, 221, 186, 62, 213, 195, 132, 62, 99, 94, 77, 61, 160, 20, 68, 62, 111, 13, 57, 62, 229, 201, 141, 189, 105, 146, 103, 191, 140, 157, 228, 188, 71, 45, 160, 191, 95, 247, 153, 190, 137, 172, 188, 190, 43, 64, 97, 62, 28, 205, 245, 190, 147, 85, 132, 62, 138, 64, 91, 190, 68, 197, 12, 191, 238, 203, 189, 61, 160, 130, 211, 188, 92, 58, 4, 62, 181, 188, 182, 190, 160, 221, 23, 62, 23, 29, 218, 190, 129, 92, 103, 188, 25, 34, 199, 61, 8, 179, 94, 62, 153, 172, 3, 190, 222, 181, 97, 189, 216, 224, 59, 190, 179, 40, 81, 62, 246, 181, 41, 62, 133, 97, 114, 190, 139, 123, 138, 62, 229, 99, 64, 191, 55, 28, 210, 61, 40, 221, 18, 62, 234, 66, 188, 188, 33, 225, 132, 60, 39, 209, 111, 189, 52, 142, 166, 189, 116, 169, 167, 62, 138, 141, 101, 189, 83, 167, 207, 188, 113, 42, 94, 61, 112, 12, 151, 190, 163, 19, 202, 190, 156, 233, 201, 61, 180, 84, 191, 61, 77, 97, 47, 62, 167, 65, 213, 188, 79, 58, 37, 190, 151, 98, 207, 190, 248, 122, 56, 190, 174, 124, 19, 190, 143, 159, 242, 190, 90, 127, 13, 62, 132, 200, 234, 61, 192, 236, 178, 190, 174, 93, 36, 190, 251, 247, 215, 190, 172, 132, 27, 62, 32, 135, 136, 189, 136, 172, 207, 59, 149, 166, 61, 190, 255, 144, 44, 62, 30, 155, 162, 191, 247, 111, 165, 62, 121, 195, 33, 190, 175, 180, 13, 62, 63, 59, 19, 190, 253, 99, 130, 62, 152, 35, 5, 190, 15, 73, 58, 62, 3, 202, 212, 190, 10, 161, 164, 190, 119, 110, 164, 61, 79, 95, 184, 191, 125, 253, 174, 62, 188, 32, 208, 189, 109, 171, 56, 189, 134, 152, 43, 190, 23, 247, 74, 190, 26, 179, 25, 62, 161, 170, 140, 61, 6, 79, 240, 61, 120, 40, 240, 61, 77, 180, 40, 190, 233, 48, 139, 62, 129, 124, 89, 189, 199, 145, 245, 189, 137, 46, 31, 59, 45, 91, 163, 190, 108, 185, 72, 60, 170, 25, 44, 61, 40, 187, 163, 189, 167, 144, 47, 190, 197, 3, 63, 189, 17, 43, 59, 62, 167, 116, 172, 61, 251, 179, 204, 61, 250, 234, 50, 190, 61, 108, 82, 62, 2, 7, 107, 190, 30, 81, 215, 61, 6, 203, 44, 62, 144, 151, 237, 61, 144, 211, 16, 190, 222, 24, 152, 189, 213, 179, 179, 62, 242, 250, 119, 189, 167, 143, 48, 62, 71, 60, 212, 59, 63, 44, 162, 60, 93, 121, 247, 188, 123, 10, 50, 190, 226, 224, 168, 189, 49, 29, 172, 60, 5, 39, 173, 189, 183, 253, 83, 189, 137, 239, 236, 189, 197, 171, 200, 188, 120, 218, 46, 190, 226, 174, 73, 61, 15, 57, 223, 189, 81, 6, 186, 60, 38, 227, 46, 62, 174, 84, 115, 189, 238, 251, 143, 188, 143, 44, 40, 62, 209, 242, 14, 190, 79, 148, 66, 189, 16, 52, 20, 60, 59, 169, 232, 189, 195, 144, 16, 190, 234, 217, 140, 189, 2, 235, 10, 190, 130, 139, 5, 188, 27, 1, 84, 60, 35, 205, 85, 61, 208, 165, 236, 61, 151, 40, 60, 189, 233, 100, 192, 61, 247, 95, 7, 189, 52, 152, 66, 189, 221, 86, 26, 190, 192, 99, 210, 60, 89, 48, 67, 62, 170, 130, 54, 190, 230, 183, 137, 190, 118, 182, 219, 189, 127, 159, 193, 190, 121, 215, 192, 62, 219, 83, 134, 61, 161, 66, 33, 60, 119, 179, 132, 189, 123, 114, 40, 62, 241, 109, 169, 190, 233, 209, 18, 190, 90, 213, 158, 189, 125, 0, 120, 61, 211, 203, 30, 62, 73, 76, 2, 191, 6, 151, 41, 62, 46, 178, 164, 61, 168, 181, 210, 61, 174, 41, 153, 190, 250, 49, 33, 62, 226, 136, 236, 60, 65, 186, 134, 62, 170, 118, 12, 190, 152, 207, 241, 189, 7, 238, 29, 62, 227, 131, 212, 190, 210, 148, 10, 190, 230, 109, 34, 61, 3, 250, 163, 61, 9, 72, 3, 190, 6, 86, 101, 62, 45, 13, 17, 62, 153, 202, 179, 189, 160, 33, 117, 189, 147, 221, 104, 189, 133, 65, 22, 62, 50, 170, 2, 61, 184, 232, 42, 62, 137, 173, 53, 190, 186, 169, 148, 188, 62, 2, 221, 189, 60, 147, 23, 61, 206, 147, 91, 61, 133, 176, 6, 62, 217, 46, 224, 189, 86, 128, 225, 60, 202, 153, 219, 60, 64, 226, 6, 62, 30, 147, 222, 189, 162, 94, 0, 189, 167, 252, 113, 61, 10, 255, 35, 62, 49, 34, 169, 61, 248, 164, 71, 189, 72, 160, 87, 188, 141, 168, 249, 187, 183, 47, 145, 189, 166, 13, 151, 189, 31, 33, 205, 189, 75, 158, 10, 190, 12, 3, 30, 189, 203, 53, 81, 61, 166, 252, 149, 60, 50, 38, 216, 189, 82, 102, 165, 61, 202, 189, 169, 61, 48, 21, 252, 61, 238, 154, 1, 62, 74, 72, 156, 188, 52, 74, 91, 188, 229, 27, 144, 189, 96, 27, 135, 62, 171, 58, 184, 61, 75, 1, 216, 61, 17, 30, 248, 189, 200, 96, 193, 189, 111, 99, 30, 62, 77, 173, 98, 60, 249, 70, 201, 62, 172, 147, 117, 62, 63, 19, 103, 190, 26, 125, 164, 61, 132, 152, 187, 62, 151, 167, 249, 190, 59, 209, 65, 190, 35, 52, 155, 189, 32, 62, 209, 190, 108, 180, 110, 190, 185, 116, 60, 190, 76, 18, 69, 62, 252, 59, 1, 191, 83, 201, 70, 189, 162, 212, 69, 190, 72, 58, 26, 188, 128, 166, 150, 190, 255, 117, 155, 190, 55, 99, 132, 62, 115, 253, 39, 62, 170, 82, 38, 61, 218, 194, 89, 190, 177, 143, 249, 189, 242, 244, 243, 60, 54, 110, 132, 188, 84, 200, 50, 62, 97, 92, 5, 63, 102, 57, 21, 61, 196, 98, 53, 190, 120, 168, 252, 184, 121, 78, 245, 61, 171, 25, 131, 62, 74, 108, 211, 61, 226, 80, 133, 189, 67, 144, 37, 62, 104, 69, 12, 63, 173, 39, 128, 62, 127, 88, 81, 191, 181, 12, 243, 61, 232, 15, 4, 190, 48, 94, 189, 189, 127, 250, 228, 189, 56, 94, 87, 190, 145, 4, 102, 62, 148, 174, 71, 191, 147, 231, 132, 61, 18, 245, 11, 190, 10, 228, 64, 190, 73, 195, 32, 189, 152, 195, 95, 59, 24, 198, 65, 190, 94, 56, 137, 190, 122, 120, 3, 62, 6, 185, 35, 190, 184, 139, 54, 62, 159, 124, 157, 189, 113, 101, 84, 60, 156, 97, 39, 189, 15, 213, 151, 190, 107, 231, 78, 61, 113, 208, 239, 189, 191, 145, 37, 60, 106, 78, 93, 190, 117, 201, 190, 59, 104, 180, 89, 62, 231, 145, 66, 190, 248, 155, 127, 61, 240, 37, 11, 189, 221, 127, 171, 189, 45, 13, 185, 61, 15, 65, 81, 190, 233, 220, 182, 62, 197, 254, 29, 189, 55, 213, 221, 189, 221, 74, 142, 61, 232, 213, 11, 59, 7, 117, 251, 61, 190, 133, 50, 62, 84, 181, 125, 189, 218, 217, 18, 191, 169, 212, 51, 62, 128, 18, 35, 189, 168, 180, 106, 190, 88, 60, 169, 62, 154, 167, 172, 190, 153, 28, 62, 191, 39, 133, 20, 190, 50, 99, 47, 62, 164, 79, 216, 190, 44, 137, 82, 62, 144, 190, 142, 62, 52, 63, 113, 191, 108, 98, 235, 189, 128, 45, 63, 189, 38, 51, 239, 62, 20, 217, 187, 190, 43, 86, 3, 191, 21, 16, 11, 191, 222, 169, 174, 189, 3, 249, 63, 190, 75, 187, 166, 190, 220, 212, 66, 190, 7, 71, 228, 62, 162, 209, 12, 191, 50, 178, 240, 189, 33, 148, 97, 62, 23, 205, 20, 191, 159, 134, 126, 190, 213, 163, 22, 191, 145, 92, 199, 61, 54, 153, 56, 62, 247, 38, 245, 62, 129, 179, 140, 62, 88, 137, 204, 189, 203, 28, 9, 62, 47, 104, 146, 61, 92, 18, 247, 61, 191, 235, 195, 188, 84, 99, 2, 61, 236, 134, 186, 61, 224, 155, 19, 190, 185, 161, 45, 190, 70, 75, 37, 62, 113, 71, 46, 62, 222, 138, 18, 190, 5, 107, 31, 60, 32, 41, 37, 190, 57, 231, 208, 189, 147, 43, 236, 59, 6, 17, 10, 190, 235, 237, 49, 190, 52, 39, 155, 188, 245, 34, 245, 189, 6, 112, 157, 187, 110, 95, 16, 190, 173, 244, 179, 189, 196, 131, 181, 188, 182, 238, 225, 189, 168, 108, 185, 189, 135, 249, 56, 57, 185, 191, 11, 62, 0, 161, 18, 190, 148, 31, 164, 59, 68, 80, 13, 61, 33, 159, 167, 60, 57, 44, 29, 62, 165, 200, 0, 63, 144, 255, 164, 190, 128, 177, 133, 190, 40, 40, 126, 62, 150, 111, 77, 190, 47, 247, 0, 62, 128, 105, 130, 189, 26, 167, 218, 60, 42, 101, 183, 189, 23, 152, 61, 190, 169, 132, 183, 190, 192, 221, 71, 189, 164, 146, 250, 62, 49, 104, 23, 191, 159, 229, 21, 63, 159, 192, 173, 61, 249, 55, 119, 190, 78, 63, 242, 190, 195, 185, 129, 190, 35, 103, 236, 190, 68, 147, 203, 190, 14, 34, 163, 189, 17, 38, 189, 61, 165, 29, 167, 62, 8, 203, 81, 190, 174, 118, 72, 62, 194, 98, 13, 191, 106, 116, 159, 187, 206, 165, 174, 189, 201, 175, 35, 188, 187, 49, 250, 189, 240, 82, 178, 189, 57, 253, 212, 189, 81, 163, 149, 190, 221, 120, 20, 62, 178, 161, 17, 61, 248, 198, 62, 62, 237, 79, 15, 62, 207, 190, 59, 187, 244, 252, 231, 61, 157, 171, 69, 190, 167, 240, 243, 189, 109, 62, 212, 188, 86, 104, 223, 189, 184, 172, 222, 189, 194, 145, 167, 61, 125, 57, 64, 62, 85, 85, 250, 188, 105, 133, 34, 61, 159, 133, 17, 61, 160, 55, 207, 188, 32, 125, 208, 59, 85, 121, 141, 190, 28, 18, 174, 61, 199, 199, 207, 60, 204, 15, 45, 190, 109, 227, 140, 61, 181, 1, 6, 62, 49, 9, 130, 187, 35, 193, 2, 62, 215, 43, 114, 189, 163, 220, 50, 191, 101, 235, 154, 61, 25, 108, 5, 63, 48, 218, 4, 62, 161, 214, 201, 61, 151, 162, 163, 189, 151, 249, 72, 190, 230, 151, 132, 62, 138, 212, 255, 61, 136, 71, 20, 62, 12, 194, 42, 189, 239, 224, 145, 61, 158, 84, 136, 190, 200, 0, 146, 62, 162, 53, 33, 62, 163, 168, 41, 62, 40, 53, 55, 62, 139, 151, 90, 190, 120, 30, 96, 190, 52, 97, 110, 62, 63, 41, 204, 189, 190, 109, 27, 191, 112, 105, 230, 62, 75, 235, 162, 61, 163, 218, 13, 62, 9, 136, 132, 62, 111, 235, 129, 62, 182, 185, 218, 60, 76, 143, 142, 189, 231, 91, 239, 190, 96, 234, 167, 189, 99, 123, 21, 62, 241, 40, 43, 62, 192, 205, 155, 62, 241, 152, 245, 61, 146, 117, 23, 188, 91, 85, 138, 62, 202, 43, 71, 61, 166, 102, 161, 61, 116, 124, 13, 62, 136, 109, 15, 62, 9, 203, 34, 60, 16, 243, 230, 185, 210, 161, 214, 186, 134, 92, 57, 62, 192, 29, 5, 62, 252, 147, 5, 190, 192, 165, 189, 189, 22, 122, 9, 62, 187, 165, 156, 62, 133, 155, 229, 189, 230, 36, 158, 186, 229, 196, 44, 62, 35, 242, 176, 61, 116, 129, 35, 190, 135, 88, 213, 60, 235, 223, 140, 62, 221, 56, 124, 189, 27, 94, 203, 189, 182, 190, 33, 190, 220, 81, 52, 62, 123, 79, 166, 61, 158, 128, 42, 62, 144, 194, 96, 189, 199, 202, 23, 190, 107, 80, 241, 189, 135, 102, 23, 190, 140, 218, 15, 62, 254, 203, 228, 61, 170, 1, 117, 189, 225, 155, 12, 191, 182, 130, 124, 61, 1, 148, 33, 62, 33, 161, 151, 190, 243, 6, 141, 62, 20, 202, 166, 62, 237, 154, 5, 62, 32, 51, 79, 189, 235, 214, 164, 61, 79, 148, 22, 62, 22, 15, 13, 62, 194, 20, 212, 62, 106, 205, 105, 62, 194, 243, 148, 62, 159, 12, 242, 62, 119, 130, 154, 62, 86, 223, 70, 191, 69, 156, 22, 61, 183, 4, 135, 188, 172, 6, 55, 61, 180, 84, 147, 190, 126, 22, 232, 189, 97, 58, 2, 62, 93, 89, 130, 191, 186, 175, 134, 62, 8, 83, 58, 190, 13, 64, 102, 190, 137, 3, 180, 190, 176, 61, 27, 63, 193, 6, 162, 190, 80, 170, 196, 62, 36, 121, 198, 190, 242, 165, 199, 190, 184, 170, 178, 62, 80, 126, 23, 190, 142, 131, 183, 61, 239, 31, 101, 190, 208, 117, 194, 62, 60, 126, 140, 191, 18, 188, 25, 189, 209, 156, 126, 61, 84, 188, 73, 190, 127, 155, 67, 62, 140, 168, 191, 190, 20, 13, 234, 189, 15, 173, 129, 62, 181, 26, 243, 59, 117, 245, 234, 190, 90, 127, 136, 61, 203, 215, 230, 62, 134, 170, 207, 62, 192, 191, 157, 62, 251, 54, 63, 61, 121, 107, 194, 61, 46, 246, 202, 190, 36, 239, 173, 190, 41, 164, 52, 190, 125, 24, 55, 62, 253, 4, 191, 61, 40, 44, 131, 62, 251, 32, 204, 62, 155, 252, 166, 188, 188, 21, 55, 191, 194, 228, 230, 187, 240, 81, 8, 191, 108, 38, 46, 62, 11, 160, 255, 189, 223, 18, 76, 62, 242, 185, 90, 61, 11, 108, 129, 190, 234, 20, 36, 189, 106, 55, 114, 62, 187, 85, 40, 190, 20, 236, 69, 61, 28, 166, 85, 62, 52, 123, 98, 191, 182, 28, 34, 62, 40, 206, 142, 188, 73, 59, 159, 59, 156, 23, 54, 189, 4, 44, 7, 61, 13, 66, 98, 190, 226, 122, 45, 62, 214, 16, 113, 190, 79, 97, 74, 189, 37, 22, 24, 62, 237, 111, 32, 190, 0, 189, 168, 189, 230, 114, 126, 190, 247, 157, 15, 61, 176, 38, 99, 62, 239, 46, 79, 62, 139, 51, 114, 190, 128, 138, 65, 190, 201, 83, 200, 62, 41, 6, 193, 190, 195, 122, 227, 190, 20, 255, 5, 190, 50, 248, 54, 61, 27, 204, 72, 62, 130, 239, 103, 62, 231, 154, 181, 62, 183, 38, 104, 191, 64, 110, 92, 190, 121, 40, 25, 62, 135, 176, 127, 62, 16, 154, 71, 62, 14, 150, 228, 190, 171, 177, 226, 60, 51, 189, 112, 59, 38, 201, 81, 190, 172, 239, 158, 190, 199, 71, 38, 191, 22, 25, 62, 63, 44, 81, 239, 61, 152, 155, 57, 62, 48, 181, 36, 62, 134, 149, 64, 188, 17, 70, 149, 190, 175, 70, 101, 190, 212, 221, 131, 189, 58, 187, 119, 62, 91, 172, 230, 62, 91, 232, 7, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 11, 19, 190, 250, 102, 115, 189, 11, 114, 147, 189, 27, 222, 23, 62, 135, 27, 158, 62, 26, 1, 197, 61, 9, 59, 88, 62, 175, 47, 30, 189, 173, 133, 134, 62, 57, 219, 35, 62, 225, 108, 175, 61, 65, 246, 13, 62, 142, 34, 47, 62, 25, 138, 164, 61, 42, 210, 20, 62, 128, 207, 68, 62, 242, 15, 107, 189, 32, 187, 147, 188, 253, 171, 37, 190, 49, 187, 98, 62, 22, 13, 148, 62, 189, 109, 38, 62, 127, 159, 249, 189, 190, 97, 8, 190, 69, 158, 166, 189, 89, 29, 159, 61, 249, 130, 12, 62, 176, 30, 230, 61, 157, 76, 136, 62, 140, 19, 25, 62, 216, 244, 63, 61, 208, 25, 8, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 186, 173, 61, 38, 122, 192, 189, 123, 69, 22, 63, 124, 114, 222, 189, 106, 150, 126, 189, 229, 234, 138, 62, 100, 2, 40, 63, 196, 43, 86, 61, 107, 189, 224, 190, 4, 65, 158, 62, 102, 48, 81, 191, 105, 204, 132, 191, 170, 125, 144, 63, 108, 108, 113, 190, 128, 83, 87, 63, 113, 156, 159, 59, 249, 191, 84, 189, 75, 177, 161, 190, 134, 30, 134, 189, 120, 201, 146, 62, 237, 56, 4, 63, 63, 129, 132, 61, 12, 181, 168, 191, 116, 145, 36, 189, 20, 66, 5, 191, 171, 251, 185, 60, 120, 155, 137, 190, 9, 223, 114, 61, 0, 208, 54, 63, 34, 236, 98, 191, 199, 250, 6, 191, 21, 9, 80, 191, 85, 100, 161, 189, 148, 119, 17, 187, 184, 9, 233, 190, 57, 121, 41, 190, 171, 86, 221, 190, 223, 247, 98, 190, 127, 254, 23, 189, 14, 203, 9, 63, 105, 91, 209, 190, 211, 19, 136, 190, 240, 106, 105, 62, 28, 138, 107, 62, 48, 50, 182, 62, 119, 31, 149, 190, 181, 60, 38, 62, 121, 124, 115, 190, 161, 54, 219, 188, 82, 59, 73, 62, 180, 238, 239, 60, 228, 83, 77, 188, 78, 145, 116, 60, 196, 127, 107, 190, 239, 58, 232, 61, 216, 164, 206, 189, 0, 19, 76, 63, 214, 254, 41, 190, 206, 62, 130, 190, 112, 233, 82, 190, 126, 172, 8, 62, 153, 208, 72, 61, 14, 110, 0, 62, 110, 168, 124, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 139, 236, 189, 153, 53, 142, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {202, 24, 131, 191, 61, 42, 151, 191, 83, 126, 159, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {43, 114, 83, 192, 10, 53, 65, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0044/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}