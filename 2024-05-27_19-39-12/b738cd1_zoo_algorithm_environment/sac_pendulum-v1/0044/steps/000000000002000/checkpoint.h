// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 75, 24, 63, 203, 236, 90, 191, 185, 96, 87, 62, 12, 38, 199, 62, 14, 119, 79, 191, 72, 141, 24, 62, 224, 134, 252, 190, 79, 149, 243, 190, 217, 155, 196, 189, 15, 249, 88, 190, 6, 205, 21, 191, 174, 90, 205, 62, 233, 60, 226, 61, 250, 169, 171, 190, 71, 91, 37, 191, 185, 211, 24, 63, 11, 220, 13, 61, 158, 30, 181, 62, 179, 42, 103, 62, 85, 221, 187, 190, 222, 224, 8, 189, 192, 214, 134, 61, 119, 237, 46, 63, 198, 69, 135, 190, 126, 4, 255, 190, 246, 156, 91, 191, 194, 200, 183, 62, 226, 58, 50, 191, 0, 60, 173, 62, 188, 243, 183, 189, 254, 73, 30, 191, 231, 134, 170, 190, 30, 242, 248, 62, 123, 29, 27, 190, 39, 183, 99, 190, 213, 129, 170, 62, 170, 199, 35, 62, 206, 85, 18, 188, 144, 176, 28, 187, 17, 95, 73, 190, 28, 119, 61, 191, 176, 38, 123, 61, 30, 62, 62, 190, 24, 120, 90, 63, 238, 21, 18, 62, 198, 86, 223, 62, 37, 156, 169, 190, 165, 157, 102, 190, 36, 187, 248, 61, 111, 83, 16, 63, 11, 223, 229, 190, 45, 19, 114, 190, 219, 166, 88, 62, 219, 139, 13, 190, 171, 123, 21, 191, 74, 218, 72, 63, 57, 199, 113, 62, 3, 21, 210, 190, 233, 238, 73, 191, 194, 96, 153, 62, 206, 167, 161, 62, 4, 132, 101, 62, 224, 192, 249, 62, 191, 10, 55, 190, 0, 183, 3, 191, 81, 98, 252, 61, 17, 151, 68, 63, 112, 206, 68, 62, 237, 28, 143, 62, 246, 80, 4, 191, 12, 243, 207, 60, 191, 212, 200, 190, 4, 15, 184, 62, 254, 181, 55, 191, 4, 56, 104, 62, 116, 117, 35, 191, 122, 35, 132, 63, 239, 39, 248, 190, 140, 145, 148, 62, 21, 206, 36, 191, 56, 129, 156, 188, 145, 11, 95, 189, 7, 50, 88, 63, 48, 34, 33, 62, 204, 69, 208, 190, 83, 185, 229, 190, 145, 222, 252, 62, 205, 160, 47, 62, 33, 98, 4, 191, 4, 249, 228, 62, 37, 84, 80, 190, 82, 67, 30, 191, 201, 109, 91, 62, 148, 153, 224, 62, 80, 45, 246, 190, 75, 61, 214, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {241, 210, 170, 190, 213, 83, 17, 63, 81, 21, 235, 61, 198, 78, 156, 61, 218, 20, 252, 190, 140, 74, 179, 62, 215, 104, 13, 191, 229, 119, 174, 62, 181, 62, 141, 62, 236, 67, 243, 186, 142, 173, 140, 190, 79, 129, 131, 190, 88, 211, 134, 190, 150, 159, 87, 62, 214, 39, 34, 63, 202, 162, 114, 62, 196, 100, 157, 190, 28, 126, 31, 62, 197, 196, 69, 62, 59, 93, 8, 190, 45, 48, 242, 190, 4, 216, 247, 190, 175, 209, 27, 63, 98, 103, 175, 62, 144, 129, 106, 62, 221, 146, 160, 190, 91, 18, 6, 63, 54, 109, 255, 190, 205, 62, 11, 63, 85, 20, 178, 190, 69, 63, 182, 190, 184, 46, 101, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 148, 152, 189, 207, 253, 13, 62, 94, 225, 99, 189, 24, 241, 174, 61, 76, 139, 104, 61, 151, 93, 106, 189, 118, 166, 151, 188, 81, 2, 135, 187, 137, 79, 39, 61, 137, 17, 11, 189, 93, 24, 43, 190, 88, 234, 53, 60, 253, 160, 50, 62, 217, 73, 51, 190, 9, 117, 79, 61, 123, 240, 181, 189, 80, 199, 24, 189, 191, 10, 43, 189, 175, 72, 21, 189, 58, 175, 128, 189, 63, 104, 38, 62, 0, 225, 1, 62, 182, 139, 198, 189, 156, 49, 120, 61, 106, 168, 40, 62, 66, 182, 65, 189, 78, 193, 140, 189, 225, 58, 129, 61, 70, 41, 157, 189, 87, 245, 34, 62, 151, 34, 11, 190, 179, 28, 6, 190, 193, 182, 221, 59, 94, 110, 1, 190, 110, 97, 223, 189, 21, 29, 218, 60, 239, 72, 235, 189, 166, 96, 46, 189, 125, 66, 70, 61, 25, 71, 48, 189, 248, 148, 252, 61, 194, 198, 161, 61, 168, 2, 255, 189, 51, 150, 145, 189, 189, 197, 218, 189, 58, 214, 3, 189, 49, 152, 171, 189, 16, 227, 28, 190, 254, 1, 231, 189, 223, 168, 8, 189, 239, 243, 5, 61, 94, 214, 86, 189, 144, 47, 13, 189, 15, 254, 25, 62, 71, 220, 143, 189, 165, 184, 23, 61, 166, 128, 236, 60, 221, 221, 233, 61, 134, 70, 184, 189, 234, 182, 169, 61, 125, 108, 6, 190, 41, 16, 194, 61, 202, 154, 46, 190, 243, 44, 210, 61, 34, 230, 236, 60, 236, 210, 87, 62, 240, 94, 254, 187, 83, 113, 154, 61, 164, 221, 236, 189, 149, 100, 64, 190, 57, 232, 161, 59, 90, 84, 119, 60, 20, 88, 22, 62, 72, 202, 172, 189, 19, 64, 46, 190, 241, 114, 17, 190, 229, 190, 253, 189, 34, 106, 157, 61, 79, 181, 174, 60, 186, 94, 126, 62, 196, 37, 123, 59, 151, 108, 4, 62, 87, 224, 178, 61, 55, 39, 254, 189, 10, 70, 41, 190, 57, 198, 87, 190, 16, 73, 29, 62, 232, 93, 184, 188, 148, 153, 215, 61, 31, 241, 223, 61, 9, 77, 4, 62, 213, 68, 35, 61, 198, 225, 8, 62, 60, 116, 86, 190, 124, 240, 152, 190, 17, 145, 136, 190, 246, 1, 175, 62, 165, 211, 131, 189, 186, 12, 59, 188, 37, 46, 250, 189, 28, 66, 165, 189, 157, 20, 26, 59, 47, 108, 151, 189, 106, 137, 240, 61, 13, 130, 93, 61, 147, 183, 44, 190, 29, 159, 183, 189, 151, 143, 193, 189, 148, 213, 114, 61, 106, 13, 14, 188, 127, 107, 181, 189, 47, 251, 208, 189, 118, 169, 12, 189, 4, 25, 150, 189, 96, 52, 75, 62, 87, 111, 218, 61, 146, 27, 111, 188, 209, 131, 8, 62, 180, 59, 83, 189, 17, 99, 126, 190, 103, 185, 94, 62, 183, 222, 150, 61, 178, 147, 145, 189, 169, 113, 175, 61, 13, 15, 188, 61, 169, 73, 167, 61, 150, 113, 57, 189, 244, 178, 197, 61, 244, 153, 11, 187, 115, 252, 99, 60, 222, 0, 11, 61, 241, 206, 247, 188, 94, 190, 84, 189, 52, 95, 215, 61, 42, 119, 15, 59, 117, 225, 240, 61, 16, 17, 42, 188, 49, 250, 2, 62, 241, 222, 105, 61, 157, 5, 202, 60, 186, 129, 11, 190, 35, 252, 4, 190, 199, 58, 23, 62, 150, 184, 110, 62, 177, 163, 139, 189, 175, 126, 35, 190, 238, 149, 158, 61, 221, 224, 90, 61, 20, 132, 176, 59, 42, 25, 101, 61, 237, 217, 192, 60, 113, 159, 62, 62, 128, 135, 75, 62, 254, 166, 4, 190, 188, 147, 107, 62, 116, 82, 78, 190, 96, 207, 39, 62, 8, 192, 160, 189, 231, 187, 38, 190, 248, 125, 116, 188, 37, 32, 116, 189, 167, 27, 130, 61, 22, 58, 210, 61, 88, 22, 224, 187, 77, 243, 156, 188, 119, 224, 143, 61, 226, 205, 152, 189, 123, 195, 96, 62, 7, 66, 129, 190, 247, 221, 244, 188, 169, 228, 209, 59, 91, 217, 4, 62, 70, 28, 206, 189, 219, 223, 190, 189, 58, 223, 114, 189, 199, 176, 71, 60, 3, 205, 10, 188, 93, 122, 214, 61, 60, 132, 201, 61, 68, 85, 132, 189, 76, 149, 188, 61, 125, 96, 11, 59, 94, 13, 147, 188, 219, 10, 62, 189, 235, 84, 151, 61, 83, 128, 250, 61, 205, 155, 161, 61, 38, 5, 27, 190, 119, 72, 70, 190, 197, 115, 3, 190, 193, 100, 62, 190, 118, 22, 39, 61, 255, 15, 127, 190, 5, 134, 125, 61, 48, 16, 166, 61, 175, 255, 143, 61, 55, 248, 26, 62, 82, 118, 49, 189, 28, 74, 2, 190, 97, 104, 187, 189, 109, 193, 135, 61, 56, 188, 68, 60, 132, 187, 196, 61, 31, 137, 33, 61, 249, 222, 212, 188, 27, 80, 35, 61, 198, 239, 55, 190, 220, 218, 249, 186, 228, 169, 48, 62, 165, 97, 17, 61, 160, 39, 143, 189, 164, 114, 144, 62, 88, 11, 39, 190, 143, 99, 201, 189, 37, 57, 111, 188, 227, 138, 144, 188, 120, 148, 55, 189, 246, 47, 73, 190, 17, 239, 210, 60, 65, 139, 149, 190, 198, 173, 7, 62, 229, 113, 95, 190, 161, 143, 4, 190, 129, 11, 85, 190, 217, 114, 158, 190, 208, 71, 54, 62, 28, 78, 96, 60, 11, 7, 26, 62, 40, 65, 172, 61, 134, 10, 120, 190, 176, 5, 107, 62, 181, 8, 46, 188, 123, 147, 24, 61, 142, 137, 75, 62, 66, 41, 30, 61, 111, 221, 216, 188, 166, 46, 195, 61, 232, 27, 154, 62, 140, 206, 67, 190, 172, 78, 65, 62, 172, 197, 21, 62, 252, 255, 130, 61, 128, 27, 12, 190, 224, 156, 210, 62, 229, 20, 196, 188, 95, 59, 32, 190, 41, 152, 18, 190, 177, 44, 34, 62, 121, 106, 234, 189, 31, 139, 55, 190, 162, 114, 18, 60, 55, 95, 11, 189, 64, 65, 176, 61, 120, 91, 48, 189, 163, 176, 63, 190, 170, 232, 194, 189, 245, 249, 20, 189, 13, 93, 35, 190, 175, 243, 193, 189, 57, 11, 113, 190, 2, 55, 223, 189, 146, 166, 176, 61, 12, 135, 194, 60, 253, 173, 104, 61, 67, 189, 27, 190, 184, 110, 45, 62, 112, 108, 166, 61, 168, 125, 231, 189, 201, 164, 35, 61, 86, 131, 88, 189, 62, 29, 121, 62, 162, 252, 144, 61, 154, 100, 230, 61, 196, 141, 163, 187, 106, 69, 248, 61, 8, 100, 134, 190, 194, 253, 6, 62, 100, 27, 12, 62, 13, 238, 240, 61, 194, 252, 179, 189, 18, 170, 44, 189, 12, 208, 44, 61, 19, 245, 213, 189, 194, 195, 211, 189, 140, 140, 152, 187, 48, 252, 51, 188, 43, 122, 211, 188, 155, 246, 60, 190, 50, 222, 174, 61, 234, 9, 134, 61, 40, 193, 130, 189, 8, 30, 14, 62, 17, 104, 196, 61, 144, 73, 1, 62, 3, 44, 17, 60, 110, 83, 132, 61, 3, 239, 224, 189, 125, 252, 23, 190, 219, 88, 172, 188, 201, 129, 194, 189, 166, 80, 49, 62, 208, 244, 42, 190, 165, 27, 225, 61, 19, 79, 45, 59, 122, 181, 159, 61, 190, 44, 147, 189, 69, 10, 182, 188, 212, 86, 48, 189, 209, 36, 154, 61, 221, 21, 51, 189, 51, 29, 249, 61, 155, 198, 211, 61, 141, 39, 172, 189, 117, 186, 217, 61, 125, 98, 80, 62, 161, 196, 5, 62, 124, 109, 109, 190, 184, 83, 105, 61, 15, 227, 190, 61, 47, 131, 18, 61, 97, 214, 91, 190, 104, 80, 144, 190, 144, 38, 128, 187, 208, 222, 179, 190, 95, 105, 157, 190, 35, 37, 25, 189, 225, 41, 119, 189, 195, 17, 143, 62, 177, 1, 139, 61, 37, 69, 50, 62, 152, 157, 51, 190, 105, 1, 51, 190, 224, 229, 36, 61, 255, 242, 68, 190, 95, 25, 154, 62, 22, 235, 95, 60, 191, 158, 115, 189, 2, 177, 79, 62, 93, 119, 108, 62, 114, 83, 104, 190, 195, 63, 187, 61, 232, 50, 0, 187, 35, 133, 5, 62, 204, 207, 165, 61, 176, 78, 146, 189, 146, 3, 171, 60, 1, 117, 18, 190, 179, 67, 203, 189, 56, 225, 20, 190, 40, 64, 12, 190, 107, 211, 56, 60, 33, 74, 43, 189, 57, 137, 207, 61, 255, 102, 145, 188, 61, 246, 114, 190, 207, 243, 134, 60, 216, 152, 136, 190, 219, 104, 108, 62, 192, 183, 134, 189, 220, 127, 241, 61, 248, 29, 36, 61, 117, 59, 79, 62, 151, 236, 77, 190, 51, 212, 16, 188, 47, 200, 37, 189, 157, 82, 184, 189, 251, 13, 155, 61, 155, 35, 139, 190, 87, 243, 5, 190, 77, 53, 253, 61, 32, 203, 115, 61, 161, 45, 143, 189, 187, 103, 254, 61, 135, 225, 67, 62, 57, 99, 138, 189, 100, 78, 20, 62, 35, 114, 28, 62, 42, 70, 181, 61, 58, 47, 252, 189, 139, 153, 73, 188, 239, 5, 206, 61, 6, 34, 242, 188, 243, 138, 20, 62, 211, 80, 78, 62, 95, 251, 179, 61, 1, 114, 47, 61, 75, 183, 43, 62, 6, 146, 111, 189, 153, 145, 15, 56, 1, 66, 50, 190, 100, 68, 214, 61, 198, 51, 149, 189, 220, 166, 88, 62, 253, 176, 35, 189, 223, 152, 47, 62, 143, 131, 151, 189, 170, 254, 211, 60, 117, 95, 99, 62, 9, 149, 138, 190, 225, 13, 185, 188, 172, 206, 70, 61, 0, 242, 193, 61, 42, 216, 216, 188, 31, 142, 117, 62, 162, 215, 140, 61, 109, 22, 69, 190, 199, 153, 204, 188, 51, 217, 5, 190, 174, 152, 141, 190, 189, 200, 212, 189, 221, 155, 217, 61, 138, 210, 38, 190, 129, 69, 160, 61, 222, 148, 247, 189, 67, 97, 21, 190, 154, 2, 220, 189, 193, 136, 144, 61, 209, 13, 4, 62, 67, 133, 10, 189, 138, 52, 56, 62, 109, 20, 97, 190, 184, 36, 95, 189, 123, 44, 200, 61, 103, 46, 51, 62, 67, 1, 31, 190, 168, 93, 16, 62, 179, 116, 41, 190, 33, 125, 20, 62, 246, 181, 41, 62, 39, 213, 128, 190, 130, 130, 130, 62, 129, 64, 50, 190, 194, 125, 131, 188, 237, 216, 4, 61, 53, 90, 45, 61, 203, 102, 206, 59, 202, 191, 204, 189, 233, 217, 113, 189, 132, 10, 156, 62, 84, 88, 241, 61, 107, 43, 112, 60, 170, 194, 3, 188, 93, 104, 125, 189, 142, 84, 50, 190, 123, 96, 2, 62, 73, 144, 140, 61, 189, 101, 24, 62, 73, 0, 48, 188, 64, 93, 68, 61, 61, 46, 15, 190, 110, 89, 29, 62, 114, 144, 247, 189, 128, 187, 84, 60, 207, 25, 104, 61, 132, 200, 234, 61, 250, 105, 25, 190, 206, 161, 204, 188, 226, 106, 38, 190, 198, 192, 3, 62, 194, 132, 16, 62, 136, 172, 207, 59, 179, 167, 191, 61, 127, 235, 64, 189, 26, 40, 197, 61, 88, 118, 27, 62, 8, 128, 218, 189, 117, 16, 54, 190, 30, 25, 161, 187, 227, 94, 194, 61, 137, 241, 174, 189, 68, 147, 186, 61, 140, 105, 53, 190, 246, 213, 59, 190, 210, 132, 42, 190, 110, 99, 242, 188, 190, 112, 51, 61, 216, 119, 12, 190, 153, 129, 183, 61, 15, 59, 44, 62, 69, 167, 53, 190, 99, 104, 173, 61, 34, 230, 204, 61, 48, 74, 248, 61, 181, 117, 178, 61, 95, 248, 28, 190, 68, 213, 78, 62, 154, 15, 90, 189, 83, 79, 6, 190, 153, 121, 131, 188, 210, 72, 32, 190, 233, 184, 201, 60, 113, 156, 7, 61, 40, 187, 163, 189, 85, 242, 6, 190, 165, 187, 39, 190, 22, 251, 3, 62, 142, 74, 9, 62, 25, 3, 183, 61, 243, 146, 25, 190, 31, 111, 81, 62, 68, 9, 251, 189, 215, 186, 157, 61, 103, 59, 190, 61, 60, 253, 181, 61, 65, 207, 137, 189, 255, 118, 22, 189, 203, 151, 132, 62, 130, 124, 240, 61, 194, 8, 21, 62, 34, 123, 39, 186, 93, 113, 252, 61, 160, 90, 39, 189, 123, 10, 50, 190, 226, 224, 168, 189, 49, 29, 172, 60, 5, 39, 173, 189, 183, 253, 83, 189, 2, 222, 236, 189, 197, 171, 200, 188, 28, 157, 43, 190, 226, 174, 73, 61, 246, 34, 221, 189, 81, 6, 186, 60, 38, 227, 46, 62, 174, 84, 115, 189, 238, 251, 143, 188, 84, 205, 43, 62, 209, 242, 14, 190, 59, 59, 59, 189, 132, 109, 40, 60, 153, 224, 227, 189, 195, 144, 16, 190, 234, 217, 140, 189, 2, 235, 10, 190, 173, 103, 236, 187, 77, 238, 111, 60, 35, 205, 85, 61, 85, 148, 243, 61, 151, 40, 60, 189, 191, 130, 194, 61, 247, 95, 7, 189, 52, 152, 66, 189, 221, 86, 26, 190, 192, 99, 210, 60, 105, 247, 118, 189, 27, 220, 138, 190, 31, 241, 215, 61, 0, 127, 150, 60, 101, 109, 247, 189, 73, 68, 69, 62, 219, 83, 134, 61, 102, 219, 241, 189, 3, 179, 235, 189, 89, 106, 24, 62, 19, 62, 225, 189, 255, 160, 59, 190, 90, 213, 158, 189, 165, 107, 242, 188, 149, 91, 194, 61, 4, 155, 48, 61, 14, 4, 141, 61, 36, 26, 88, 61, 59, 218, 54, 62, 9, 106, 100, 190, 48, 153, 143, 188, 192, 139, 3, 60, 47, 66, 40, 60, 44, 29, 55, 61, 44, 128, 85, 190, 40, 61, 26, 62, 89, 177, 102, 190, 134, 90, 39, 62, 31, 104, 174, 61, 41, 11, 47, 59, 172, 186, 17, 190, 240, 242, 242, 61, 45, 13, 17, 62, 153, 202, 179, 189, 160, 33, 117, 189, 147, 221, 104, 189, 133, 65, 22, 62, 50, 170, 2, 61, 184, 232, 42, 62, 137, 173, 53, 190, 186, 169, 148, 188, 62, 2, 221, 189, 60, 147, 23, 61, 206, 147, 91, 61, 133, 176, 6, 62, 217, 46, 224, 189, 86, 128, 225, 60, 202, 153, 219, 60, 64, 226, 6, 62, 30, 147, 222, 189, 162, 94, 0, 189, 167, 252, 113, 61, 10, 255, 35, 62, 49, 34, 169, 61, 248, 164, 71, 189, 72, 160, 87, 188, 141, 168, 249, 187, 183, 47, 145, 189, 166, 13, 151, 189, 31, 33, 205, 189, 75, 158, 10, 190, 12, 3, 30, 189, 203, 53, 81, 61, 166, 252, 149, 60, 243, 137, 254, 189, 199, 61, 26, 62, 206, 135, 62, 62, 175, 49, 136, 61, 78, 187, 2, 62, 234, 123, 99, 61, 2, 159, 118, 188, 114, 138, 73, 189, 161, 59, 105, 62, 133, 49, 139, 60, 137, 7, 63, 61, 86, 197, 3, 190, 200, 96, 193, 189, 119, 145, 145, 62, 86, 175, 185, 189, 7, 113, 103, 62, 21, 205, 33, 62, 230, 51, 225, 189, 238, 249, 26, 190, 199, 174, 155, 62, 137, 227, 150, 61, 174, 5, 89, 190, 106, 123, 206, 188, 156, 213, 139, 189, 159, 42, 58, 190, 110, 29, 58, 190, 150, 161, 33, 62, 134, 160, 128, 189, 28, 114, 183, 189, 6, 190, 80, 190, 38, 36, 146, 188, 184, 160, 154, 190, 157, 198, 156, 190, 64, 177, 142, 62, 15, 159, 92, 62, 203, 54, 113, 61, 126, 125, 93, 61, 203, 216, 54, 190, 250, 159, 231, 60, 29, 239, 14, 61, 44, 131, 84, 62, 18, 146, 42, 62, 175, 48, 128, 61, 137, 174, 200, 189, 120, 168, 252, 184, 218, 53, 146, 62, 7, 100, 180, 189, 92, 24, 254, 187, 10, 85, 215, 60, 170, 238, 137, 61, 71, 81, 71, 187, 101, 179, 136, 62, 239, 223, 79, 190, 191, 148, 164, 61, 168, 135, 117, 190, 42, 167, 9, 62, 21, 199, 159, 189, 199, 168, 5, 190, 214, 133, 25, 62, 106, 225, 208, 190, 26, 204, 44, 61, 219, 45, 159, 189, 35, 10, 47, 190, 150, 93, 124, 188, 67, 234, 148, 189, 152, 224, 150, 189, 119, 98, 255, 189, 131, 226, 181, 61, 147, 149, 112, 189, 122, 83, 36, 187, 100, 146, 157, 189, 47, 156, 148, 61, 46, 17, 115, 188, 162, 29, 200, 60, 109, 6, 231, 60, 181, 44, 91, 189, 191, 145, 37, 60, 222, 133, 0, 62, 169, 198, 247, 189, 3, 29, 111, 62, 33, 42, 215, 189, 199, 98, 29, 62, 57, 224, 91, 188, 255, 33, 97, 189, 149, 12, 207, 188, 190, 111, 193, 187, 113, 82, 109, 62, 84, 143, 152, 61, 180, 115, 150, 61, 198, 214, 2, 62, 142, 149, 59, 57, 45, 213, 98, 60, 123, 222, 0, 62, 231, 115, 165, 189, 225, 39, 187, 60, 119, 185, 135, 61, 211, 134, 208, 189, 199, 134, 154, 190, 242, 123, 8, 62, 19, 77, 101, 190, 38, 249, 13, 190, 96, 56, 135, 189, 50, 99, 47, 62, 3, 69, 85, 61, 216, 28, 81, 188, 178, 180, 154, 62, 25, 124, 167, 189, 244, 88, 110, 61, 128, 45, 63, 189, 124, 184, 1, 61, 250, 20, 89, 60, 245, 76, 21, 190, 122, 73, 75, 61, 93, 97, 44, 62, 24, 57, 7, 62, 82, 36, 156, 190, 169, 245, 37, 62, 32, 212, 195, 61, 52, 37, 219, 189, 205, 166, 71, 61, 18, 48, 192, 189, 222, 221, 124, 189, 22, 103, 158, 190, 207, 69, 176, 188, 57, 194, 187, 60, 13, 21, 13, 190, 236, 213, 171, 61, 46, 153, 45, 189, 88, 137, 204, 189, 203, 28, 9, 62, 47, 104, 146, 61, 92, 18, 247, 61, 191, 235, 195, 188, 84, 99, 2, 61, 236, 134, 186, 61, 224, 155, 19, 190, 185, 161, 45, 190, 70, 75, 37, 62, 113, 71, 46, 62, 222, 138, 18, 190, 5, 107, 31, 60, 32, 41, 37, 190, 57, 231, 208, 189, 147, 43, 236, 59, 6, 17, 10, 190, 235, 237, 49, 190, 52, 39, 155, 188, 245, 34, 245, 189, 6, 112, 157, 187, 110, 95, 16, 190, 173, 244, 179, 189, 196, 131, 181, 188, 182, 238, 225, 189, 168, 108, 185, 189, 135, 249, 56, 57, 185, 191, 11, 62, 0, 161, 18, 190, 148, 31, 164, 59, 68, 80, 13, 61, 33, 159, 167, 60, 30, 161, 59, 61, 62, 222, 168, 61, 236, 110, 74, 190, 86, 33, 48, 190, 89, 247, 61, 62, 33, 184, 231, 59, 56, 230, 1, 62, 133, 95, 201, 189, 219, 237, 70, 60, 52, 182, 190, 60, 69, 244, 209, 188, 179, 172, 248, 189, 192, 221, 71, 189, 156, 157, 166, 61, 88, 153, 0, 190, 60, 205, 20, 62, 190, 241, 231, 61, 254, 8, 210, 189, 165, 240, 127, 189, 235, 30, 33, 190, 243, 87, 252, 187, 228, 211, 235, 188, 120, 131, 101, 190, 186, 62, 173, 61, 162, 8, 44, 190, 12, 140, 227, 189, 76, 177, 69, 190, 15, 93, 40, 190, 109, 24, 99, 189, 109, 177, 26, 61, 164, 122, 244, 61, 139, 78, 179, 189, 18, 152, 93, 190, 213, 182, 196, 59, 151, 91, 251, 189, 237, 103, 185, 61, 134, 66, 213, 61, 60, 56, 189, 61, 107, 45, 15, 62, 200, 89, 181, 61, 252, 71, 23, 62, 239, 240, 129, 187, 139, 88, 222, 189, 201, 192, 210, 60, 86, 104, 223, 189, 63, 250, 58, 62, 66, 234, 135, 189, 195, 225, 68, 62, 115, 236, 58, 61, 102, 236, 90, 61, 196, 49, 165, 188, 225, 19, 25, 188, 233, 225, 157, 188, 47, 221, 78, 188, 14, 92, 68, 60, 253, 94, 216, 61, 184, 92, 41, 61, 75, 94, 8, 62, 218, 182, 49, 62, 155, 21, 65, 190, 88, 117, 237, 61, 132, 42, 50, 189, 164, 226, 132, 190, 124, 45, 65, 61, 159, 113, 19, 61, 81, 111, 113, 189, 55, 236, 215, 189, 188, 64, 240, 188, 96, 118, 127, 189, 218, 98, 67, 60, 37, 91, 1, 62, 36, 90, 25, 62, 197, 123, 80, 190, 69, 239, 94, 62, 136, 184, 239, 60, 132, 233, 186, 61, 162, 53, 33, 62, 65, 101, 56, 190, 164, 206, 147, 62, 178, 75, 97, 188, 17, 208, 85, 190, 23, 44, 39, 62, 207, 70, 72, 62, 36, 35, 218, 190, 106, 78, 253, 60, 205, 194, 29, 190, 200, 23, 4, 189, 189, 254, 220, 61, 26, 202, 102, 189, 91, 148, 116, 61, 148, 204, 48, 190, 10, 255, 43, 190, 255, 187, 242, 189, 25, 214, 109, 190, 131, 145, 183, 189, 38, 162, 5, 190, 150, 217, 167, 186, 109, 181, 159, 61, 221, 247, 44, 62, 218, 57, 122, 188, 240, 99, 198, 61, 248, 85, 127, 61, 245, 235, 14, 62, 10, 18, 213, 61, 162, 168, 41, 59, 233, 41, 185, 60, 0, 74, 44, 62, 32, 17, 16, 62, 252, 147, 5, 190, 184, 252, 63, 60, 101, 236, 157, 59, 228, 87, 67, 62, 213, 6, 85, 61, 193, 244, 164, 189, 147, 224, 244, 61, 98, 240, 170, 61, 135, 46, 214, 189, 88, 203, 5, 189, 64, 123, 52, 62, 137, 178, 130, 189, 20, 5, 207, 185, 89, 122, 162, 189, 206, 26, 13, 62, 138, 160, 4, 62, 57, 16, 4, 62, 163, 231, 110, 189, 106, 97, 185, 188, 183, 26, 32, 190, 2, 20, 77, 190, 171, 42, 214, 61, 150, 210, 180, 61, 144, 92, 135, 189, 122, 40, 57, 61, 46, 185, 213, 187, 30, 148, 33, 62, 230, 222, 130, 190, 162, 211, 138, 62, 25, 66, 233, 189, 124, 40, 9, 62, 172, 52, 204, 60, 235, 214, 164, 61, 220, 59, 145, 62, 81, 10, 76, 190, 79, 225, 71, 62, 139, 73, 195, 189, 238, 162, 50, 61, 46, 80, 132, 189, 136, 211, 152, 62, 205, 234, 43, 190, 56, 170, 134, 61, 22, 192, 217, 189, 187, 87, 28, 62, 58, 170, 143, 190, 129, 199, 137, 190, 154, 117, 36, 61, 194, 189, 6, 191, 247, 3, 75, 62, 244, 251, 8, 190, 162, 116, 76, 190, 64, 134, 177, 190, 4, 185, 103, 62, 202, 184, 142, 190, 203, 215, 10, 61, 112, 34, 142, 190, 179, 146, 154, 190, 155, 179, 233, 61, 80, 126, 23, 190, 92, 98, 198, 61, 105, 158, 62, 190, 54, 162, 154, 62, 50, 57, 150, 190, 180, 178, 201, 189, 209, 156, 126, 61, 178, 221, 22, 190, 215, 3, 47, 62, 101, 114, 84, 188, 49, 212, 3, 190, 35, 83, 10, 62, 77, 28, 85, 62, 104, 157, 140, 190, 135, 53, 46, 190, 113, 97, 198, 189, 53, 220, 132, 62, 151, 150, 35, 62, 134, 136, 110, 60, 129, 219, 61, 61, 114, 146, 112, 190, 15, 94, 210, 61, 23, 247, 20, 59, 92, 188, 53, 189, 141, 163, 38, 189, 252, 127, 134, 61, 175, 240, 184, 62, 86, 169, 243, 188, 62, 11, 23, 189, 136, 248, 162, 60, 79, 131, 218, 189, 114, 32, 17, 62, 11, 160, 255, 189, 15, 148, 77, 61, 217, 23, 135, 61, 43, 46, 3, 61, 124, 42, 49, 61, 209, 140, 24, 62, 187, 85, 40, 190, 120, 156, 34, 60, 160, 154, 107, 62, 19, 250, 143, 190, 180, 127, 1, 188, 143, 247, 93, 189, 44, 11, 19, 62, 32, 117, 102, 189, 2, 218, 181, 189, 130, 142, 249, 188, 84, 188, 66, 61, 228, 79, 192, 59, 187, 207, 156, 188, 15, 231, 13, 62, 131, 63, 39, 61, 242, 54, 250, 61, 198, 114, 12, 190, 128, 61, 181, 188, 70, 30, 22, 62, 148, 150, 60, 62, 207, 43, 160, 189, 24, 18, 43, 190, 172, 17, 238, 59, 123, 63, 50, 190, 250, 108, 67, 190, 79, 174, 138, 61, 50, 248, 54, 61, 234, 43, 12, 62, 169, 9, 144, 61, 106, 20, 171, 62, 232, 66, 89, 190, 136, 72, 89, 61, 121, 40, 25, 62, 230, 115, 140, 189, 64, 136, 35, 62, 203, 114, 23, 190, 157, 28, 167, 60, 138, 86, 108, 61, 150, 22, 222, 189, 170, 120, 83, 190, 98, 87, 28, 190, 14, 26, 255, 61, 210, 78, 35, 190, 44, 45, 245, 61, 171, 30, 39, 190, 48, 57, 58, 188, 57, 192, 118, 190, 138, 158, 128, 61, 174, 149, 3, 61, 253, 40, 15, 62, 204, 97, 119, 61, 157, 166, 193, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 189, 10, 190, 185, 133, 101, 189, 237, 254, 202, 189, 201, 125, 216, 61, 192, 73, 122, 62, 222, 120, 110, 61, 222, 182, 79, 62, 161, 45, 32, 61, 232, 215, 70, 62, 118, 242, 34, 62, 243, 31, 105, 60, 40, 157, 234, 61, 225, 82, 18, 62, 69, 48, 147, 61, 55, 156, 244, 61, 51, 161, 175, 61, 235, 193, 96, 189, 187, 188, 125, 189, 253, 171, 37, 190, 168, 49, 82, 62, 67, 120, 6, 62, 51, 146, 207, 61, 9, 166, 93, 189, 190, 97, 8, 190, 26, 124, 63, 190, 117, 21, 142, 61, 35, 101, 100, 61, 239, 150, 61, 61, 169, 74, 173, 61, 12, 131, 143, 61, 25, 155, 200, 61, 192, 16, 153, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 50, 188, 61, 86, 163, 192, 189, 246, 200, 157, 61, 81, 171, 133, 189, 15, 231, 65, 186, 164, 69, 55, 62, 188, 121, 104, 62, 86, 219, 93, 62, 197, 103, 112, 190, 29, 218, 8, 62, 112, 200, 215, 190, 25, 248, 250, 189, 161, 169, 28, 62, 27, 3, 97, 190, 23, 9, 158, 61, 14, 1, 234, 60, 230, 198, 84, 189, 234, 152, 112, 190, 134, 30, 134, 189, 171, 6, 185, 62, 98, 164, 192, 62, 218, 148, 164, 187, 153, 183, 112, 190, 116, 145, 36, 189, 142, 185, 88, 189, 104, 202, 16, 61, 6, 122, 108, 190, 73, 232, 179, 61, 90, 211, 226, 62, 205, 199, 0, 191, 130, 192, 35, 190, 17, 33, 42, 190, 195, 239, 160, 189, 45, 129, 23, 187, 48, 213, 72, 190, 244, 51, 169, 189, 153, 40, 97, 190, 7, 174, 77, 190, 109, 98, 195, 188, 26, 137, 29, 62, 255, 220, 163, 190, 185, 235, 99, 190, 8, 57, 221, 61, 41, 223, 49, 61, 35, 90, 154, 61, 118, 100, 254, 189, 217, 194, 19, 62, 59, 27, 87, 190, 138, 73, 219, 188, 190, 135, 60, 62, 180, 238, 239, 60, 185, 122, 20, 190, 208, 159, 109, 188, 113, 228, 169, 189, 4, 252, 45, 62, 216, 164, 206, 189, 1, 184, 77, 62, 195, 53, 128, 189, 61, 96, 54, 190, 237, 70, 27, 190, 173, 216, 176, 61, 13, 251, 156, 188, 218, 86, 53, 61, 19, 38, 56, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {172, 167, 254, 189, 51, 169, 7, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {61, 99, 24, 192, 195, 16, 79, 190, 111, 55, 130, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {192, 100, 148, 188, 80, 22, 149, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0044/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}