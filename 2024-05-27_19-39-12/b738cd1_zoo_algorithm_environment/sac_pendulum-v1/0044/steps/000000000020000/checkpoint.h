// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 19, 47, 63, 121, 75, 37, 191, 61, 205, 169, 62, 166, 200, 246, 62, 133, 198, 131, 191, 102, 85, 76, 62, 128, 59, 98, 191, 78, 29, 142, 191, 74, 163, 200, 189, 16, 165, 153, 190, 209, 67, 203, 61, 118, 128, 42, 63, 210, 203, 182, 62, 77, 70, 145, 191, 225, 228, 21, 191, 209, 105, 24, 63, 170, 228, 24, 63, 139, 186, 241, 62, 11, 121, 100, 62, 152, 245, 183, 190, 235, 1, 157, 188, 25, 225, 85, 62, 43, 73, 151, 62, 39, 70, 193, 190, 35, 114, 8, 191, 160, 75, 224, 190, 32, 135, 234, 62, 55, 184, 152, 191, 242, 204, 124, 189, 139, 228, 45, 188, 118, 22, 140, 190, 57, 194, 113, 63, 1, 74, 38, 63, 161, 181, 164, 190, 26, 134, 39, 61, 138, 190, 176, 62, 170, 199, 35, 62, 206, 85, 18, 188, 144, 176, 28, 187, 165, 6, 72, 61, 21, 43, 70, 191, 175, 199, 152, 61, 53, 159, 137, 190, 42, 34, 78, 63, 63, 69, 117, 62, 184, 119, 231, 62, 172, 145, 170, 191, 209, 90, 139, 190, 74, 70, 220, 188, 11, 73, 44, 63, 157, 5, 210, 190, 248, 238, 51, 191, 82, 242, 69, 190, 163, 162, 77, 190, 90, 144, 132, 191, 102, 162, 127, 63, 183, 101, 1, 62, 245, 142, 238, 190, 221, 152, 130, 190, 54, 144, 4, 63, 8, 224, 64, 63, 97, 154, 101, 63, 17, 147, 179, 62, 31, 243, 48, 191, 145, 92, 157, 191, 181, 198, 39, 189, 102, 178, 79, 63, 4, 122, 56, 63, 127, 2, 127, 62, 76, 98, 51, 191, 30, 212, 115, 191, 152, 252, 236, 190, 116, 54, 57, 62, 159, 244, 64, 191, 34, 96, 146, 62, 81, 55, 104, 190, 23, 206, 215, 62, 230, 11, 59, 191, 55, 237, 181, 62, 90, 116, 150, 191, 184, 221, 144, 190, 118, 78, 190, 62, 175, 202, 172, 63, 134, 110, 3, 63, 23, 77, 16, 191, 162, 139, 252, 189, 174, 63, 255, 62, 237, 152, 65, 189, 207, 178, 245, 190, 175, 195, 222, 62, 68, 16, 27, 191, 214, 224, 36, 191, 202, 193, 113, 62, 220, 224, 172, 62, 73, 180, 202, 190, 196, 239, 226, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 224, 1, 191, 70, 137, 185, 62, 81, 188, 149, 62, 216, 22, 144, 190, 155, 83, 41, 191, 44, 236, 53, 62, 212, 134, 15, 191, 108, 137, 29, 61, 113, 72, 43, 188, 254, 251, 198, 62, 111, 203, 162, 190, 99, 159, 27, 191, 88, 211, 134, 190, 8, 170, 129, 188, 24, 230, 34, 63, 7, 198, 85, 61, 166, 234, 174, 189, 31, 45, 168, 62, 174, 74, 234, 62, 249, 184, 79, 190, 11, 197, 97, 191, 160, 217, 162, 189, 3, 60, 201, 62, 185, 100, 208, 62, 11, 68, 71, 62, 240, 22, 181, 190, 234, 134, 93, 62, 160, 211, 158, 190, 226, 8, 3, 63, 218, 127, 159, 190, 164, 62, 186, 190, 61, 123, 15, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 224, 198, 189, 153, 22, 242, 61, 122, 103, 130, 189, 66, 133, 136, 61, 76, 139, 104, 61, 169, 120, 139, 189, 118, 166, 151, 188, 81, 2, 135, 187, 168, 36, 130, 60, 137, 17, 11, 189, 75, 51, 65, 190, 254, 162, 41, 188, 253, 160, 50, 62, 84, 7, 76, 190, 59, 12, 100, 61, 113, 59, 182, 189, 80, 199, 24, 189, 191, 10, 43, 189, 116, 22, 253, 188, 53, 219, 179, 189, 158, 85, 34, 62, 63, 247, 226, 61, 54, 105, 208, 189, 156, 49, 120, 61, 125, 205, 13, 62, 66, 182, 65, 189, 62, 236, 150, 189, 232, 252, 138, 61, 240, 168, 198, 189, 6, 237, 9, 62, 111, 37, 40, 190, 21, 140, 26, 190, 193, 182, 221, 59, 94, 110, 1, 190, 101, 220, 229, 189, 21, 29, 218, 60, 38, 217, 235, 189, 166, 96, 46, 189, 125, 66, 70, 61, 4, 45, 59, 189, 248, 148, 252, 61, 230, 39, 152, 61, 168, 2, 255, 189, 51, 150, 145, 189, 189, 197, 218, 189, 58, 214, 3, 189, 160, 101, 177, 189, 14, 248, 28, 190, 255, 163, 237, 189, 186, 121, 22, 189, 166, 187, 234, 60, 94, 214, 86, 189, 144, 47, 13, 189, 63, 37, 24, 62, 71, 220, 143, 189, 134, 86, 4, 61, 166, 128, 236, 60, 154, 72, 224, 61, 61, 185, 185, 189, 234, 182, 169, 61, 190, 122, 6, 190, 41, 16, 194, 61, 202, 154, 46, 190, 243, 44, 210, 61, 160, 137, 196, 62, 241, 245, 100, 62, 51, 252, 120, 191, 218, 252, 200, 190, 0, 59, 150, 190, 212, 28, 111, 190, 251, 62, 167, 59, 132, 101, 174, 61, 201, 237, 178, 61, 118, 109, 121, 190, 88, 130, 33, 191, 71, 87, 184, 190, 229, 190, 253, 189, 202, 148, 59, 190, 237, 160, 49, 62, 239, 232, 206, 62, 225, 3, 114, 60, 165, 224, 6, 62, 172, 147, 147, 190, 238, 83, 241, 190, 155, 3, 8, 192, 8, 174, 111, 191, 32, 6, 123, 62, 195, 152, 252, 190, 37, 157, 237, 61, 112, 199, 179, 61, 31, 179, 4, 62, 163, 112, 74, 191, 207, 75, 144, 62, 31, 4, 189, 190, 118, 189, 50, 191, 216, 111, 124, 60, 67, 66, 16, 62, 115, 136, 196, 189, 229, 148, 20, 191, 129, 53, 35, 190, 105, 155, 77, 191, 249, 239, 134, 188, 47, 108, 151, 189, 12, 232, 75, 62, 79, 229, 27, 58, 98, 184, 63, 191, 235, 165, 118, 190, 169, 134, 35, 190, 148, 213, 114, 61, 93, 248, 143, 189, 152, 19, 108, 189, 245, 244, 243, 190, 133, 196, 73, 62, 22, 142, 135, 61, 33, 211, 59, 60, 71, 125, 147, 61, 223, 47, 84, 61, 47, 98, 63, 62, 221, 26, 182, 186, 117, 156, 6, 191, 82, 26, 145, 61, 118, 160, 44, 62, 214, 67, 146, 189, 157, 230, 55, 190, 46, 209, 134, 60, 219, 174, 77, 60, 142, 157, 2, 190, 203, 31, 234, 188, 55, 166, 205, 60, 162, 206, 0, 60, 42, 238, 105, 60, 150, 219, 164, 190, 106, 199, 156, 189, 182, 133, 131, 189, 79, 113, 29, 59, 118, 129, 127, 189, 76, 70, 32, 190, 10, 2, 154, 60, 141, 67, 56, 190, 142, 147, 28, 190, 186, 129, 11, 190, 62, 188, 215, 189, 159, 228, 240, 61, 148, 186, 249, 62, 210, 95, 98, 190, 184, 224, 175, 190, 224, 194, 152, 62, 146, 89, 113, 190, 250, 23, 166, 191, 99, 31, 57, 190, 170, 223, 164, 189, 217, 87, 99, 62, 126, 232, 23, 62, 109, 135, 157, 190, 241, 99, 242, 62, 196, 54, 134, 191, 66, 171, 114, 62, 229, 212, 130, 190, 78, 124, 208, 190, 108, 254, 182, 189, 90, 107, 70, 62, 213, 208, 131, 61, 145, 69, 98, 61, 16, 172, 143, 61, 8, 16, 7, 190, 131, 167, 166, 61, 208, 99, 150, 189, 249, 220, 115, 62, 8, 22, 77, 190, 2, 48, 89, 62, 43, 106, 83, 190, 66, 226, 179, 60, 70, 28, 206, 189, 146, 137, 7, 190, 221, 246, 19, 189, 126, 186, 56, 188, 217, 150, 129, 189, 175, 123, 132, 62, 177, 158, 150, 61, 64, 59, 134, 189, 108, 31, 167, 191, 141, 14, 253, 62, 78, 125, 5, 61, 71, 88, 35, 190, 228, 187, 103, 62, 73, 124, 65, 62, 89, 61, 99, 61, 28, 177, 155, 191, 209, 230, 217, 189, 54, 25, 30, 188, 43, 117, 71, 62, 164, 6, 197, 61, 121, 191, 168, 60, 219, 112, 207, 61, 174, 208, 24, 191, 63, 160, 10, 62, 151, 115, 223, 61, 63, 58, 0, 61, 27, 17, 2, 190, 89, 210, 136, 188, 188, 56, 176, 61, 48, 31, 20, 190, 221, 109, 16, 190, 251, 130, 67, 190, 249, 222, 212, 188, 16, 42, 195, 189, 154, 68, 235, 189, 183, 114, 107, 62, 55, 61, 171, 62, 133, 162, 0, 189, 98, 127, 240, 190, 104, 37, 171, 62, 34, 154, 112, 191, 51, 32, 204, 190, 142, 41, 171, 61, 145, 16, 41, 191, 137, 50, 23, 59, 193, 3, 65, 190, 58, 63, 62, 61, 248, 89, 145, 191, 177, 64, 51, 62, 165, 87, 55, 190, 247, 160, 49, 190, 104, 0, 93, 189, 187, 138, 162, 190, 152, 77, 81, 62, 250, 140, 69, 191, 218, 209, 59, 61, 18, 191, 79, 62, 203, 188, 154, 190, 15, 238, 107, 62, 70, 148, 131, 188, 46, 228, 10, 190, 253, 163, 43, 62, 149, 116, 158, 61, 0, 219, 237, 189, 166, 46, 195, 61, 164, 116, 19, 62, 15, 255, 76, 190, 54, 154, 236, 62, 252, 168, 134, 62, 112, 226, 152, 61, 138, 100, 3, 190, 7, 88, 146, 62, 201, 55, 101, 190, 142, 51, 92, 191, 60, 52, 162, 189, 39, 106, 89, 190, 89, 184, 49, 190, 81, 123, 63, 190, 218, 13, 134, 187, 213, 137, 177, 190, 190, 215, 79, 188, 62, 180, 127, 190, 61, 209, 229, 190, 61, 66, 139, 190, 80, 152, 143, 190, 206, 43, 124, 190, 51, 133, 11, 190, 74, 199, 242, 190, 220, 1, 210, 190, 18, 33, 152, 61, 207, 165, 183, 60, 25, 192, 184, 60, 11, 33, 131, 61, 56, 104, 146, 62, 133, 199, 144, 190, 140, 173, 32, 190, 201, 164, 35, 61, 170, 254, 34, 61, 135, 64, 148, 62, 101, 249, 206, 190, 49, 94, 27, 62, 19, 234, 210, 61, 124, 196, 156, 62, 83, 36, 92, 190, 20, 142, 163, 190, 184, 2, 122, 62, 133, 198, 108, 61, 221, 242, 136, 190, 161, 237, 137, 188, 116, 211, 224, 59, 113, 131, 175, 190, 101, 4, 144, 191, 35, 147, 213, 61, 198, 9, 6, 62, 147, 185, 75, 62, 192, 157, 161, 190, 179, 125, 144, 62, 119, 176, 48, 61, 93, 77, 109, 190, 72, 61, 109, 62, 164, 246, 76, 189, 185, 82, 239, 61, 54, 89, 28, 60, 243, 140, 117, 61, 158, 207, 127, 61, 181, 173, 213, 60, 155, 175, 103, 190, 99, 33, 15, 190, 166, 80, 49, 62, 225, 80, 14, 190, 80, 207, 6, 61, 169, 46, 248, 188, 131, 12, 83, 189, 208, 123, 11, 188, 133, 222, 160, 190, 178, 243, 188, 61, 194, 150, 174, 191, 239, 10, 199, 62, 62, 30, 20, 62, 204, 161, 4, 190, 225, 48, 127, 60, 120, 147, 222, 61, 105, 95, 77, 62, 183, 167, 229, 191, 113, 56, 235, 189, 50, 247, 82, 62, 98, 14, 233, 62, 156, 170, 18, 62, 76, 9, 187, 190, 105, 234, 209, 190, 212, 217, 187, 62, 45, 51, 155, 191, 221, 46, 220, 190, 136, 48, 242, 61, 225, 41, 119, 189, 250, 154, 83, 62, 116, 74, 90, 190, 106, 217, 182, 62, 5, 255, 116, 191, 144, 210, 155, 190, 224, 229, 36, 61, 168, 25, 186, 190, 119, 88, 130, 62, 59, 14, 151, 190, 224, 62, 230, 189, 145, 251, 174, 62, 77, 112, 237, 61, 163, 97, 46, 191, 195, 132, 165, 62, 180, 140, 50, 63, 53, 124, 51, 62, 121, 29, 98, 62, 82, 252, 42, 189, 217, 241, 191, 60, 131, 121, 153, 190, 44, 110, 242, 190, 187, 58, 203, 190, 83, 241, 25, 191, 24, 53, 128, 189, 210, 42, 181, 190, 218, 88, 22, 62, 33, 71, 230, 189, 185, 116, 249, 190, 142, 61, 13, 189, 47, 76, 233, 190, 111, 220, 98, 62, 192, 183, 134, 189, 231, 121, 172, 62, 82, 166, 253, 59, 74, 254, 241, 190, 121, 36, 199, 190, 219, 44, 169, 188, 47, 200, 37, 189, 179, 125, 48, 189, 176, 182, 30, 62, 3, 67, 198, 191, 28, 228, 133, 61, 214, 214, 63, 60, 37, 14, 250, 190, 60, 29, 183, 189, 16, 6, 117, 62, 155, 148, 13, 62, 136, 207, 90, 62, 58, 217, 148, 190, 224, 109, 218, 61, 138, 79, 28, 62, 3, 199, 40, 191, 40, 173, 13, 190, 236, 172, 94, 188, 53, 139, 67, 188, 176, 140, 115, 62, 27, 223, 81, 62, 135, 3, 67, 63, 94, 235, 163, 60, 138, 166, 17, 191, 58, 148, 198, 189, 39, 143, 109, 190, 238, 166, 166, 190, 86, 68, 214, 61, 217, 115, 99, 190, 73, 175, 4, 62, 198, 49, 130, 189, 56, 181, 43, 61, 220, 77, 244, 190, 170, 254, 211, 60, 148, 96, 122, 62, 79, 163, 101, 190, 213, 7, 188, 62, 123, 57, 141, 62, 229, 140, 67, 61, 192, 109, 27, 62, 91, 136, 9, 62, 109, 167, 38, 190, 54, 82, 138, 191, 123, 82, 228, 188, 68, 150, 195, 191, 54, 221, 163, 190, 177, 108, 232, 190, 4, 199, 94, 62, 118, 136, 39, 191, 112, 42, 78, 62, 89, 197, 121, 190, 218, 198, 29, 191, 83, 34, 156, 61, 240, 187, 36, 189, 24, 69, 57, 61, 20, 51, 176, 190, 41, 3, 12, 62, 46, 134, 240, 190, 218, 68, 212, 189, 25, 34, 199, 61, 178, 165, 54, 62, 2, 169, 21, 190, 174, 66, 138, 61, 102, 205, 86, 190, 53, 235, 56, 62, 246, 181, 41, 62, 201, 16, 130, 190, 43, 138, 117, 62, 225, 47, 101, 191, 54, 229, 10, 62, 153, 8, 127, 62, 29, 96, 72, 61, 150, 98, 146, 58, 3, 30, 243, 188, 9, 17, 231, 189, 226, 53, 116, 62, 140, 48, 169, 189, 38, 107, 154, 189, 54, 230, 145, 61, 179, 104, 216, 190, 119, 102, 236, 190, 81, 128, 199, 61, 164, 78, 144, 61, 102, 226, 29, 62, 214, 23, 77, 189, 223, 137, 12, 190, 35, 99, 234, 190, 40, 243, 242, 190, 66, 89, 133, 190, 231, 80, 59, 191, 242, 140, 222, 61, 132, 200, 234, 61, 113, 217, 116, 190, 154, 216, 108, 190, 69, 184, 171, 190, 168, 120, 217, 61, 72, 67, 145, 189, 136, 172, 207, 59, 55, 160, 83, 189, 226, 248, 109, 62, 254, 77, 172, 191, 236, 10, 232, 62, 120, 18, 26, 190, 75, 10, 135, 62, 6, 207, 122, 190, 121, 187, 14, 62, 244, 9, 140, 189, 57, 9, 73, 62, 174, 182, 65, 191, 74, 201, 190, 190, 217, 200, 14, 61, 113, 209, 215, 191, 245, 49, 177, 62, 58, 68, 26, 190, 160, 34, 183, 189, 109, 9, 184, 189, 166, 221, 154, 190, 148, 134, 132, 62, 89, 49, 218, 61, 135, 94, 118, 61, 11, 198, 147, 61, 15, 130, 128, 190, 216, 191, 120, 62, 129, 124, 89, 189, 158, 28, 104, 190, 103, 186, 37, 189, 92, 13, 245, 190, 154, 213, 39, 189, 80, 52, 50, 187, 40, 187, 163, 189, 120, 59, 167, 189, 182, 70, 216, 189, 115, 248, 57, 62, 222, 168, 147, 60, 126, 14, 232, 189, 252, 58, 159, 190, 158, 39, 30, 62, 232, 35, 93, 190, 65, 226, 136, 188, 167, 65, 15, 62, 118, 71, 14, 61, 252, 234, 182, 189, 59, 218, 75, 190, 147, 64, 168, 62, 4, 211, 50, 189, 235, 98, 43, 62, 139, 247, 54, 188, 23, 33, 120, 60, 62, 14, 148, 59, 123, 10, 50, 190, 226, 224, 168, 189, 49, 29, 172, 60, 5, 39, 173, 189, 183, 253, 83, 189, 137, 239, 236, 189, 197, 171, 200, 188, 120, 218, 46, 190, 226, 174, 73, 61, 15, 57, 223, 189, 81, 6, 186, 60, 38, 227, 46, 62, 174, 84, 115, 189, 238, 251, 143, 188, 143, 44, 40, 62, 209, 242, 14, 190, 79, 148, 66, 189, 16, 52, 20, 60, 59, 169, 232, 189, 195, 144, 16, 190, 234, 217, 140, 189, 2, 235, 10, 190, 130, 139, 5, 188, 27, 1, 84, 60, 35, 205, 85, 61, 208, 165, 236, 61, 151, 40, 60, 189, 233, 100, 192, 61, 247, 95, 7, 189, 52, 152, 66, 189, 221, 86, 26, 190, 192, 99, 210, 60, 22, 202, 90, 62, 0, 190, 255, 189, 93, 184, 83, 190, 48, 208, 64, 189, 27, 100, 239, 190, 78, 254, 205, 62, 219, 83, 134, 61, 56, 118, 246, 188, 133, 19, 123, 189, 208, 74, 66, 62, 63, 102, 178, 190, 124, 174, 203, 189, 90, 213, 158, 189, 169, 80, 230, 61, 248, 142, 66, 62, 234, 236, 238, 190, 143, 116, 13, 62, 10, 65, 218, 61, 186, 171, 221, 61, 220, 241, 138, 190, 241, 86, 112, 62, 9, 185, 150, 189, 72, 170, 151, 62, 184, 100, 54, 190, 0, 41, 137, 189, 92, 168, 10, 62, 106, 198, 193, 190, 48, 198, 71, 190, 181, 235, 9, 62, 48, 52, 110, 61, 213, 59, 121, 190, 48, 153, 146, 62, 45, 13, 17, 62, 153, 202, 179, 189, 160, 33, 117, 189, 147, 221, 104, 189, 133, 65, 22, 62, 50, 170, 2, 61, 184, 232, 42, 62, 137, 173, 53, 190, 186, 169, 148, 188, 62, 2, 221, 189, 60, 147, 23, 61, 206, 147, 91, 61, 133, 176, 6, 62, 217, 46, 224, 189, 86, 128, 225, 60, 202, 153, 219, 60, 64, 226, 6, 62, 30, 147, 222, 189, 162, 94, 0, 189, 167, 252, 113, 61, 10, 255, 35, 62, 49, 34, 169, 61, 248, 164, 71, 189, 72, 160, 87, 188, 141, 168, 249, 187, 183, 47, 145, 189, 166, 13, 151, 189, 31, 33, 205, 189, 75, 158, 10, 190, 12, 3, 30, 189, 203, 53, 81, 61, 166, 252, 149, 60, 135, 196, 214, 189, 200, 87, 159, 61, 194, 105, 234, 61, 132, 216, 9, 62, 103, 220, 191, 61, 215, 115, 126, 60, 52, 74, 91, 188, 143, 84, 184, 189, 135, 245, 142, 62, 112, 69, 6, 62, 149, 53, 186, 61, 84, 41, 246, 189, 200, 96, 193, 189, 38, 40, 18, 62, 242, 105, 154, 60, 88, 86, 189, 62, 55, 42, 66, 62, 136, 79, 44, 190, 234, 188, 173, 188, 159, 137, 194, 62, 17, 69, 0, 191, 6, 145, 136, 189, 227, 229, 120, 189, 201, 61, 201, 190, 8, 104, 105, 190, 165, 213, 94, 190, 211, 130, 56, 62, 10, 17, 8, 191, 40, 174, 28, 189, 150, 240, 51, 190, 114, 14, 0, 61, 95, 207, 141, 190, 90, 89, 165, 190, 214, 197, 111, 62, 180, 207, 80, 62, 78, 10, 134, 61, 65, 95, 142, 190, 46, 156, 150, 189, 242, 244, 243, 60, 58, 142, 175, 58, 23, 54, 82, 62, 46, 211, 31, 63, 100, 185, 127, 61, 134, 121, 30, 190, 120, 168, 252, 184, 64, 176, 195, 61, 162, 189, 159, 62, 54, 39, 7, 60, 117, 42, 90, 189, 147, 181, 133, 62, 81, 183, 38, 63, 161, 77, 142, 62, 61, 202, 40, 191, 29, 186, 117, 62, 113, 248, 211, 189, 29, 66, 145, 189, 246, 12, 237, 189, 199, 90, 66, 190, 247, 182, 38, 62, 223, 229, 52, 191, 74, 45, 185, 61, 93, 236, 227, 189, 209, 2, 0, 190, 28, 178, 227, 188, 43, 182, 143, 61, 16, 150, 122, 190, 228, 95, 186, 190, 39, 162, 176, 61, 49, 238, 79, 190, 71, 78, 28, 62, 159, 124, 157, 189, 248, 43, 35, 189, 227, 5, 180, 189, 80, 230, 102, 190, 23, 178, 140, 60, 155, 136, 35, 190, 191, 145, 37, 60, 138, 13, 87, 190, 45, 76, 20, 60, 53, 145, 74, 62, 98, 97, 56, 190, 227, 243, 5, 62, 109, 222, 92, 61, 241, 208, 7, 190, 247, 241, 187, 61, 82, 214, 177, 190, 39, 249, 172, 62, 32, 60, 84, 189, 148, 173, 6, 190, 128, 226, 1, 189, 18, 88, 254, 188, 0, 117, 37, 62, 26, 146, 39, 62, 255, 76, 158, 189, 95, 131, 20, 191, 200, 31, 61, 62, 208, 196, 10, 189, 250, 86, 139, 190, 230, 57, 110, 62, 139, 219, 176, 190, 56, 201, 108, 191, 131, 100, 9, 190, 50, 99, 47, 62, 237, 175, 217, 190, 172, 20, 41, 62, 131, 64, 16, 62, 66, 83, 113, 191, 194, 221, 176, 189, 128, 45, 63, 189, 61, 12, 215, 62, 10, 151, 221, 190, 118, 91, 24, 191, 214, 14, 14, 191, 126, 176, 154, 190, 152, 71, 141, 190, 160, 66, 177, 190, 220, 212, 66, 190, 106, 215, 170, 62, 110, 255, 13, 191, 174, 131, 117, 190, 75, 204, 52, 62, 5, 3, 25, 191, 222, 98, 167, 190, 213, 163, 22, 191, 241, 230, 64, 61, 140, 42, 35, 62, 189, 16, 220, 62, 136, 9, 135, 62, 38, 145, 45, 190, 196, 123, 75, 61, 207, 180, 112, 61, 171, 244, 43, 62, 191, 235, 195, 188, 118, 195, 139, 61, 236, 134, 186, 61, 160, 68, 201, 190, 152, 226, 60, 190, 133, 133, 186, 60, 172, 211, 117, 62, 10, 84, 46, 190, 5, 107, 31, 60, 240, 142, 100, 190, 141, 184, 183, 189, 243, 129, 253, 189, 66, 144, 187, 190, 72, 215, 151, 190, 94, 145, 81, 189, 7, 74, 247, 189, 173, 164, 20, 62, 13, 255, 5, 190, 133, 187, 170, 189, 156, 177, 94, 189, 180, 20, 37, 190, 155, 196, 224, 189, 232, 28, 25, 190, 243, 41, 80, 62, 203, 233, 213, 189, 227, 235, 204, 188, 53, 245, 213, 59, 10, 253, 181, 60, 27, 45, 101, 62, 70, 48, 11, 63, 230, 10, 221, 190, 73, 61, 157, 190, 101, 3, 170, 62, 241, 184, 133, 190, 47, 247, 0, 62, 112, 220, 25, 189, 73, 206, 208, 189, 55, 60, 228, 190, 165, 29, 145, 190, 66, 148, 238, 190, 192, 221, 71, 189, 13, 167, 3, 63, 243, 30, 45, 191, 234, 171, 37, 63, 26, 91, 37, 62, 58, 198, 4, 191, 43, 163, 240, 190, 204, 90, 187, 190, 153, 165, 32, 191, 249, 13, 36, 191, 193, 18, 184, 189, 71, 166, 188, 61, 23, 111, 166, 62, 142, 46, 30, 190, 77, 109, 126, 62, 186, 98, 222, 190, 249, 63, 108, 189, 204, 75, 1, 190, 132, 2, 152, 190, 63, 110, 23, 190, 104, 153, 205, 189, 19, 239, 64, 190, 235, 143, 163, 190, 137, 239, 92, 61, 133, 98, 157, 61, 129, 153, 21, 62, 237, 79, 15, 62, 52, 74, 169, 60, 147, 228, 92, 189, 234, 50, 206, 189, 76, 72, 27, 190, 13, 63, 154, 190, 86, 104, 223, 189, 93, 17, 10, 190, 123, 237, 197, 61, 80, 56, 185, 61, 189, 48, 171, 61, 178, 37, 10, 62, 127, 70, 34, 62, 57, 25, 66, 190, 103, 22, 245, 61, 188, 12, 195, 190, 46, 184, 251, 60, 47, 165, 175, 61, 147, 217, 127, 190, 55, 82, 36, 62, 6, 165, 30, 61, 223, 219, 157, 61, 120, 18, 4, 62, 188, 245, 51, 190, 236, 165, 69, 191, 108, 147, 198, 60, 143, 53, 20, 63, 125, 77, 59, 62, 31, 176, 177, 187, 230, 223, 138, 189, 120, 120, 112, 190, 74, 29, 141, 62, 138, 212, 255, 61, 61, 2, 157, 61, 118, 192, 92, 189, 171, 164, 18, 189, 233, 237, 91, 190, 80, 187, 159, 62, 162, 53, 33, 62, 27, 250, 99, 62, 245, 181, 100, 62, 83, 42, 42, 190, 83, 29, 147, 190, 40, 207, 192, 61, 56, 71, 158, 60, 165, 118, 28, 191, 96, 149, 25, 63, 70, 249, 49, 190, 114, 71, 44, 62, 227, 137, 33, 62, 75, 181, 148, 62, 91, 224, 64, 189, 173, 205, 76, 189, 254, 33, 178, 190, 19, 61, 93, 189, 166, 102, 9, 62, 145, 120, 240, 61, 244, 244, 170, 62, 86, 72, 55, 62, 202, 92, 76, 188, 193, 209, 111, 62, 215, 128, 26, 61, 131, 123, 110, 189, 221, 89, 20, 62, 136, 109, 15, 62, 111, 33, 162, 189, 255, 146, 128, 186, 172, 197, 164, 188, 98, 141, 41, 62, 157, 194, 241, 61, 252, 147, 5, 190, 41, 38, 60, 189, 142, 225, 39, 62, 244, 157, 116, 62, 218, 95, 64, 190, 47, 20, 207, 189, 61, 127, 66, 62, 203, 67, 156, 61, 67, 121, 3, 190, 72, 207, 188, 58, 208, 252, 138, 62, 213, 71, 23, 190, 194, 145, 144, 189, 36, 140, 176, 190, 85, 248, 209, 61, 54, 15, 5, 62, 38, 62, 65, 62, 175, 28, 38, 189, 13, 232, 206, 189, 46, 27, 185, 189, 29, 104, 52, 190, 13, 59, 237, 61, 184, 252, 44, 62, 232, 212, 32, 189, 77, 160, 26, 191, 113, 145, 225, 61, 1, 148, 33, 62, 122, 188, 147, 190, 59, 27, 155, 62, 158, 46, 213, 62, 64, 87, 25, 62, 6, 17, 8, 189, 235, 214, 164, 61, 17, 223, 243, 61, 155, 46, 63, 62, 207, 18, 172, 62, 44, 79, 89, 62, 171, 182, 197, 62, 155, 31, 11, 63, 144, 173, 166, 62, 231, 205, 24, 191, 14, 223, 59, 62, 10, 167, 51, 60, 41, 75, 154, 61, 228, 97, 152, 190, 253, 165, 225, 189, 127, 169, 160, 61, 23, 81, 114, 191, 129, 131, 144, 62, 151, 108, 36, 190, 203, 107, 40, 190, 24, 39, 177, 190, 61, 126, 35, 63, 191, 154, 184, 190, 80, 60, 190, 62, 87, 63, 168, 190, 93, 185, 143, 190, 243, 9, 163, 62, 80, 126, 23, 190, 53, 154, 4, 62, 23, 139, 226, 190, 7, 238, 218, 62, 97, 248, 174, 191, 104, 128, 74, 189, 209, 156, 126, 61, 200, 85, 175, 190, 77, 49, 80, 62, 235, 54, 176, 190, 218, 163, 55, 189, 41, 206, 163, 62, 250, 218, 221, 187, 250, 175, 20, 191, 17, 64, 166, 189, 123, 23, 229, 62, 21, 190, 200, 62, 143, 176, 181, 62, 116, 70, 39, 189, 134, 88, 47, 62, 212, 228, 188, 190, 26, 193, 252, 190, 48, 66, 83, 190, 151, 115, 77, 187, 38, 210, 49, 190, 207, 5, 61, 62, 229, 194, 228, 62, 222, 12, 28, 61, 165, 211, 51, 191, 34, 61, 81, 60, 90, 88, 20, 191, 106, 2, 70, 62, 11, 160, 255, 189, 118, 88, 36, 62, 12, 11, 133, 61, 152, 30, 220, 190, 10, 233, 57, 189, 139, 1, 95, 62, 187, 85, 40, 190, 123, 243, 209, 61, 40, 156, 47, 62, 208, 66, 84, 191, 42, 163, 4, 62, 5, 48, 190, 189, 104, 52, 44, 190, 158, 195, 238, 188, 202, 93, 152, 61, 125, 58, 92, 190, 121, 174, 75, 62, 43, 202, 198, 190, 115, 152, 96, 188, 185, 240, 16, 62, 36, 82, 238, 189, 223, 55, 8, 190, 209, 109, 108, 190, 132, 183, 51, 61, 23, 216, 83, 62, 51, 54, 115, 62, 99, 142, 190, 189, 112, 33, 129, 190, 22, 148, 183, 62, 191, 77, 209, 190, 99, 248, 239, 190, 235, 189, 112, 190, 50, 248, 54, 61, 75, 102, 35, 62, 109, 241, 30, 62, 175, 241, 163, 62, 163, 181, 86, 191, 17, 194, 28, 190, 121, 40, 25, 62, 204, 6, 115, 62, 216, 199, 175, 62, 174, 149, 200, 190, 77, 243, 36, 60, 122, 145, 146, 189, 13, 59, 23, 190, 191, 99, 188, 190, 83, 122, 103, 191, 117, 51, 48, 63, 126, 2, 5, 62, 180, 216, 239, 61, 65, 89, 34, 62, 21, 214, 99, 189, 82, 51, 134, 190, 200, 209, 237, 190, 205, 182, 47, 189, 126, 8, 98, 62, 24, 56, 158, 62, 68, 184, 69, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 11, 19, 190, 250, 102, 115, 189, 134, 3, 149, 189, 190, 220, 216, 61, 91, 237, 177, 62, 210, 225, 129, 61, 158, 82, 78, 62, 38, 94, 171, 189, 34, 255, 130, 62, 214, 245, 45, 62, 33, 136, 41, 61, 214, 173, 20, 62, 66, 64, 15, 62, 217, 100, 191, 60, 206, 64, 82, 62, 136, 243, 46, 62, 242, 15, 107, 189, 145, 240, 197, 60, 253, 171, 37, 190, 157, 28, 97, 62, 217, 107, 152, 62, 212, 107, 15, 62, 164, 203, 80, 190, 193, 142, 55, 190, 142, 117, 156, 189, 107, 130, 102, 61, 181, 72, 47, 62, 35, 84, 210, 61, 176, 215, 140, 62, 251, 233, 28, 62, 219, 66, 130, 61, 22, 177, 33, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 186, 173, 61, 38, 122, 192, 189, 12, 67, 14, 63, 240, 168, 51, 190, 187, 160, 228, 189, 18, 204, 110, 62, 198, 1, 24, 63, 199, 6, 144, 190, 85, 98, 41, 191, 196, 107, 127, 62, 218, 195, 76, 191, 103, 68, 134, 191, 27, 34, 184, 63, 160, 38, 129, 190, 77, 245, 116, 63, 63, 2, 18, 188, 249, 191, 84, 189, 66, 121, 176, 190, 134, 30, 134, 189, 235, 215, 215, 61, 53, 133, 233, 62, 13, 165, 60, 61, 167, 59, 161, 191, 181, 195, 15, 190, 48, 182, 109, 191, 239, 37, 38, 189, 184, 73, 110, 190, 199, 12, 38, 61, 51, 155, 35, 63, 230, 70, 96, 191, 49, 179, 238, 190, 160, 66, 41, 191, 85, 100, 161, 189, 148, 119, 17, 187, 254, 14, 60, 191, 29, 220, 206, 189, 19, 198, 19, 191, 213, 57, 110, 190, 180, 246, 89, 190, 205, 215, 209, 62, 221, 16, 5, 191, 129, 212, 191, 190, 85, 198, 142, 62, 119, 7, 25, 62, 14, 126, 7, 62, 174, 187, 169, 190, 225, 87, 51, 189, 70, 214, 142, 190, 161, 54, 219, 188, 14, 156, 32, 61, 180, 238, 239, 60, 108, 214, 187, 189, 230, 208, 119, 189, 112, 26, 107, 190, 23, 236, 255, 61, 239, 212, 159, 189, 110, 118, 240, 62, 240, 226, 79, 190, 4, 144, 185, 190, 225, 102, 105, 190, 254, 167, 135, 61, 4, 189, 138, 61, 80, 65, 33, 60, 108, 57, 141, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {82, 160, 27, 190, 72, 175, 170, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {222, 103, 57, 63, 250, 233, 40, 63, 102, 145, 148, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {64, 95, 36, 192, 121, 231, 96, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0044/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}