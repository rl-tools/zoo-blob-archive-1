// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 103, 255, 62, 7, 171, 28, 191, 25, 139, 172, 62, 133, 126, 240, 62, 31, 119, 87, 191, 247, 198, 171, 62, 78, 34, 35, 191, 176, 106, 96, 191, 116, 178, 226, 189, 239, 206, 157, 189, 192, 138, 176, 190, 208, 81, 39, 63, 112, 84, 241, 62, 162, 237, 97, 191, 43, 239, 34, 191, 244, 95, 38, 63, 227, 148, 195, 62, 118, 108, 254, 62, 11, 121, 100, 62, 152, 245, 183, 190, 235, 1, 157, 188, 131, 210, 146, 62, 222, 25, 134, 62, 201, 194, 224, 190, 148, 219, 254, 190, 238, 0, 10, 191, 187, 138, 254, 62, 3, 15, 106, 191, 213, 128, 48, 62, 107, 29, 156, 187, 67, 211, 240, 190, 248, 182, 67, 63, 180, 149, 17, 63, 170, 77, 115, 189, 100, 171, 139, 189, 211, 235, 172, 62, 170, 199, 35, 62, 206, 85, 18, 188, 144, 176, 28, 187, 176, 214, 101, 61, 237, 49, 42, 191, 28, 45, 22, 62, 97, 184, 106, 190, 235, 119, 62, 63, 53, 73, 111, 61, 36, 46, 232, 62, 196, 134, 147, 191, 135, 233, 117, 190, 21, 85, 219, 189, 10, 95, 62, 63, 78, 114, 250, 190, 192, 32, 5, 191, 169, 55, 47, 62, 128, 140, 215, 189, 80, 222, 63, 191, 57, 194, 99, 63, 215, 201, 227, 61, 127, 49, 178, 190, 126, 61, 225, 190, 78, 143, 253, 62, 185, 72, 60, 63, 89, 161, 71, 63, 235, 19, 195, 62, 2, 84, 60, 191, 242, 173, 105, 191, 255, 102, 156, 59, 34, 147, 108, 63, 132, 232, 13, 63, 105, 171, 58, 62, 197, 77, 50, 191, 120, 174, 110, 191, 27, 33, 133, 190, 194, 125, 25, 62, 179, 215, 36, 191, 123, 100, 154, 62, 133, 109, 196, 190, 132, 130, 144, 62, 160, 87, 70, 191, 193, 75, 201, 62, 158, 237, 134, 191, 8, 128, 88, 190, 137, 132, 179, 62, 116, 88, 156, 63, 31, 152, 203, 62, 37, 102, 20, 191, 223, 39, 254, 189, 204, 87, 4, 63, 220, 96, 207, 189, 140, 52, 219, 190, 14, 159, 254, 62, 87, 198, 0, 191, 180, 187, 29, 191, 255, 222, 147, 62, 183, 134, 131, 62, 27, 159, 161, 190, 189, 32, 0, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 123, 251, 190, 221, 178, 174, 62, 105, 93, 103, 62, 32, 218, 15, 190, 245, 230, 22, 191, 241, 42, 143, 62, 212, 134, 15, 191, 248, 225, 237, 61, 206, 252, 98, 61, 97, 94, 58, 62, 112, 237, 222, 190, 5, 65, 213, 190, 88, 211, 134, 190, 191, 245, 158, 61, 16, 143, 38, 63, 248, 254, 173, 61, 90, 134, 166, 189, 56, 248, 39, 62, 98, 180, 135, 62, 186, 64, 100, 190, 73, 175, 85, 191, 69, 34, 58, 190, 88, 206, 0, 63, 151, 23, 116, 62, 23, 95, 90, 62, 181, 255, 3, 191, 212, 188, 144, 62, 89, 53, 192, 190, 49, 94, 23, 63, 131, 35, 161, 190, 21, 100, 109, 190, 36, 174, 7, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 224, 198, 189, 153, 22, 242, 61, 122, 103, 130, 189, 66, 133, 136, 61, 76, 139, 104, 61, 169, 120, 139, 189, 118, 166, 151, 188, 81, 2, 135, 187, 168, 36, 130, 60, 137, 17, 11, 189, 75, 51, 65, 190, 254, 162, 41, 188, 253, 160, 50, 62, 84, 7, 76, 190, 59, 12, 100, 61, 113, 59, 182, 189, 80, 199, 24, 189, 191, 10, 43, 189, 116, 22, 253, 188, 53, 219, 179, 189, 158, 85, 34, 62, 63, 247, 226, 61, 54, 105, 208, 189, 156, 49, 120, 61, 125, 205, 13, 62, 66, 182, 65, 189, 62, 236, 150, 189, 232, 252, 138, 61, 240, 168, 198, 189, 6, 237, 9, 62, 111, 37, 40, 190, 21, 140, 26, 190, 193, 182, 221, 59, 94, 110, 1, 190, 114, 72, 224, 189, 21, 29, 218, 60, 185, 109, 235, 189, 166, 96, 46, 189, 125, 66, 70, 61, 198, 90, 51, 189, 248, 148, 252, 61, 239, 110, 159, 61, 168, 2, 255, 189, 51, 150, 145, 189, 189, 197, 218, 189, 58, 214, 3, 189, 133, 208, 173, 189, 16, 227, 28, 190, 253, 164, 231, 189, 152, 149, 11, 189, 13, 150, 1, 61, 94, 214, 86, 189, 144, 47, 13, 189, 15, 254, 25, 62, 71, 220, 143, 189, 231, 18, 21, 61, 166, 128, 236, 60, 229, 25, 232, 61, 134, 70, 184, 189, 234, 182, 169, 61, 125, 108, 6, 190, 41, 16, 194, 61, 202, 154, 46, 190, 243, 44, 210, 61, 51, 161, 239, 61, 238, 12, 43, 62, 6, 246, 10, 191, 125, 125, 63, 189, 157, 189, 222, 189, 177, 124, 158, 190, 251, 62, 167, 59, 162, 151, 29, 62, 209, 91, 149, 60, 91, 0, 75, 190, 208, 210, 19, 190, 71, 87, 184, 190, 229, 190, 253, 189, 204, 197, 3, 190, 21, 161, 44, 62, 211, 0, 208, 62, 46, 78, 1, 62, 175, 204, 35, 62, 255, 157, 232, 189, 146, 165, 123, 190, 130, 71, 126, 191, 18, 209, 102, 191, 43, 88, 91, 62, 209, 36, 106, 190, 244, 114, 130, 187, 111, 61, 48, 62, 177, 86, 18, 62, 66, 178, 40, 191, 167, 69, 37, 62, 80, 114, 198, 190, 94, 113, 49, 191, 50, 150, 180, 190, 15, 83, 92, 62, 127, 5, 133, 59, 206, 102, 252, 190, 228, 153, 6, 190, 210, 26, 34, 191, 152, 19, 44, 61, 47, 108, 151, 189, 157, 56, 142, 62, 98, 238, 41, 61, 36, 176, 38, 191, 106, 221, 253, 189, 34, 89, 8, 190, 148, 213, 114, 61, 106, 61, 119, 188, 241, 251, 22, 189, 11, 90, 120, 190, 97, 109, 85, 62, 129, 88, 1, 62, 227, 137, 7, 62, 184, 137, 223, 61, 132, 106, 77, 189, 34, 83, 60, 62, 83, 133, 14, 61, 177, 183, 180, 190, 77, 30, 77, 62, 246, 116, 84, 62, 145, 230, 173, 61, 197, 170, 1, 190, 44, 226, 110, 61, 37, 118, 74, 61, 120, 95, 154, 189, 148, 130, 138, 61, 0, 112, 194, 189, 171, 37, 22, 189, 8, 160, 65, 61, 74, 20, 218, 189, 251, 53, 201, 189, 2, 158, 219, 60, 79, 113, 29, 59, 56, 161, 234, 61, 106, 70, 111, 189, 191, 22, 119, 61, 236, 172, 27, 189, 100, 246, 52, 189, 186, 129, 11, 190, 106, 148, 48, 190, 174, 247, 38, 62, 176, 68, 181, 62, 189, 108, 237, 189, 143, 239, 41, 190, 91, 208, 140, 61, 55, 83, 47, 189, 161, 120, 145, 190, 201, 13, 43, 61, 141, 220, 124, 59, 206, 65, 102, 62, 27, 46, 220, 61, 143, 155, 45, 190, 34, 184, 198, 62, 190, 94, 21, 191, 73, 9, 12, 62, 209, 126, 28, 190, 12, 193, 149, 190, 213, 85, 190, 189, 18, 156, 19, 62, 38, 88, 0, 62, 140, 234, 143, 61, 240, 73, 72, 60, 35, 253, 210, 189, 254, 135, 244, 60, 208, 99, 150, 189, 100, 152, 119, 62, 187, 190, 105, 190, 68, 128, 2, 62, 15, 136, 32, 190, 160, 36, 64, 61, 70, 28, 206, 189, 18, 126, 166, 188, 143, 148, 107, 59, 132, 240, 192, 61, 51, 165, 30, 189, 47, 183, 238, 61, 72, 37, 249, 61, 59, 18, 250, 189, 59, 222, 28, 191, 176, 38, 161, 62, 181, 49, 70, 61, 185, 68, 251, 189, 99, 182, 142, 62, 47, 108, 35, 62, 223, 246, 29, 62, 72, 174, 59, 191, 171, 155, 212, 189, 188, 10, 161, 189, 234, 117, 41, 62, 107, 204, 150, 60, 36, 252, 227, 189, 194, 209, 234, 61, 145, 90, 141, 190, 246, 130, 242, 61, 195, 129, 122, 62, 81, 244, 139, 189, 27, 17, 2, 190, 36, 169, 208, 187, 225, 175, 215, 61, 155, 7, 75, 190, 58, 164, 6, 62, 85, 135, 227, 60, 249, 222, 212, 188, 38, 156, 5, 61, 54, 10, 236, 189, 161, 144, 158, 62, 161, 89, 187, 62, 41, 164, 245, 189, 14, 91, 142, 190, 220, 248, 171, 62, 226, 167, 42, 191, 48, 3, 158, 190, 252, 243, 24, 61, 231, 250, 193, 190, 20, 247, 147, 188, 12, 57, 91, 190, 44, 249, 227, 61, 220, 171, 108, 191, 83, 198, 52, 62, 181, 156, 92, 190, 174, 83, 233, 189, 187, 103, 70, 190, 250, 57, 50, 190, 246, 254, 78, 62, 46, 70, 2, 191, 105, 140, 21, 62, 135, 165, 26, 62, 199, 11, 117, 190, 15, 238, 107, 62, 43, 219, 132, 188, 171, 109, 249, 188, 128, 102, 192, 61, 242, 171, 190, 61, 3, 188, 209, 189, 166, 46, 195, 61, 204, 241, 19, 62, 60, 248, 31, 189, 190, 12, 238, 62, 200, 201, 128, 62, 231, 181, 190, 188, 109, 12, 193, 187, 168, 241, 193, 62, 168, 141, 75, 190, 73, 108, 40, 191, 92, 28, 226, 188, 183, 229, 63, 190, 68, 200, 57, 190, 243, 103, 131, 190, 179, 6, 128, 60, 0, 136, 59, 190, 225, 222, 231, 61, 75, 77, 25, 190, 100, 63, 223, 190, 145, 227, 18, 190, 237, 25, 178, 189, 252, 14, 26, 190, 119, 147, 29, 61, 73, 162, 177, 190, 67, 225, 143, 190, 49, 248, 59, 62, 207, 165, 183, 60, 144, 188, 240, 60, 121, 17, 241, 60, 247, 112, 121, 62, 135, 17, 194, 61, 149, 219, 228, 60, 201, 164, 35, 61, 145, 242, 11, 60, 187, 40, 107, 62, 0, 218, 103, 190, 255, 54, 174, 61, 231, 238, 166, 61, 128, 105, 32, 62, 109, 127, 37, 190, 238, 223, 166, 190, 108, 1, 254, 62, 175, 68, 235, 61, 95, 79, 222, 189, 133, 45, 144, 61, 206, 69, 1, 59, 81, 131, 105, 190, 20, 90, 80, 191, 36, 202, 165, 186, 140, 27, 111, 62, 26, 65, 55, 62, 80, 240, 229, 189, 223, 8, 83, 62, 125, 65, 101, 61, 128, 92, 29, 190, 198, 152, 33, 62, 244, 16, 75, 188, 125, 230, 3, 59, 54, 89, 28, 60, 45, 159, 106, 61, 104, 71, 4, 61, 105, 21, 168, 189, 129, 19, 43, 190, 210, 49, 10, 190, 166, 80, 49, 62, 127, 91, 104, 189, 105, 63, 193, 188, 227, 199, 130, 61, 255, 128, 162, 188, 13, 145, 14, 190, 52, 123, 218, 190, 189, 54, 1, 61, 249, 202, 60, 191, 248, 220, 143, 62, 231, 217, 220, 61, 197, 49, 5, 189, 96, 251, 198, 60, 87, 155, 186, 61, 188, 74, 143, 62, 192, 160, 195, 191, 192, 83, 12, 190, 143, 43, 9, 62, 90, 10, 217, 62, 154, 212, 22, 61, 52, 232, 63, 190, 150, 60, 164, 190, 226, 164, 146, 62, 73, 207, 111, 191, 171, 222, 223, 190, 234, 207, 64, 62, 225, 41, 119, 189, 7, 80, 126, 62, 120, 32, 94, 61, 14, 218, 142, 62, 243, 47, 226, 190, 65, 144, 65, 190, 224, 229, 36, 61, 172, 215, 116, 190, 137, 146, 131, 62, 211, 88, 124, 190, 228, 145, 0, 190, 4, 74, 153, 62, 59, 55, 72, 62, 238, 154, 234, 190, 216, 133, 57, 62, 5, 234, 26, 63, 18, 121, 96, 62, 115, 226, 80, 62, 92, 41, 92, 61, 216, 137, 146, 60, 157, 182, 138, 190, 252, 115, 158, 190, 127, 28, 168, 190, 83, 205, 143, 190, 236, 132, 88, 62, 215, 24, 73, 190, 194, 33, 217, 61, 130, 245, 169, 189, 124, 133, 239, 190, 189, 65, 73, 189, 211, 61, 175, 190, 7, 173, 115, 62, 192, 183, 134, 189, 51, 211, 144, 62, 165, 250, 219, 187, 216, 124, 15, 60, 30, 186, 181, 190, 222, 138, 247, 188, 47, 200, 37, 189, 242, 120, 161, 189, 128, 96, 22, 61, 1, 103, 75, 191, 107, 96, 107, 188, 207, 68, 110, 61, 17, 73, 91, 190, 140, 97, 226, 189, 165, 29, 127, 62, 74, 192, 45, 62, 74, 87, 156, 61, 129, 253, 56, 61, 60, 229, 251, 61, 175, 100, 21, 62, 96, 187, 175, 190, 50, 88, 204, 189, 213, 34, 1, 188, 200, 8, 56, 188, 165, 239, 87, 62, 75, 90, 83, 62, 79, 127, 190, 62, 6, 102, 130, 60, 187, 90, 139, 190, 113, 41, 93, 189, 184, 52, 189, 61, 181, 5, 138, 190, 86, 68, 214, 61, 97, 62, 57, 190, 34, 199, 7, 62, 7, 42, 91, 62, 21, 174, 146, 62, 65, 6, 84, 190, 170, 254, 211, 60, 5, 125, 103, 61, 213, 255, 114, 189, 180, 232, 159, 62, 186, 250, 129, 62, 100, 166, 84, 62, 215, 224, 183, 62, 86, 81, 60, 62, 139, 82, 2, 189, 85, 38, 98, 191, 30, 235, 42, 189, 194, 233, 21, 191, 164, 102, 201, 190, 150, 160, 165, 190, 205, 195, 73, 62, 157, 114, 164, 190, 222, 214, 94, 62, 164, 47, 141, 190, 127, 44, 30, 191, 59, 168, 60, 190, 219, 71, 30, 189, 212, 188, 11, 62, 242, 156, 86, 190, 129, 42, 22, 62, 211, 59, 197, 190, 42, 215, 43, 59, 25, 34, 199, 61, 106, 97, 80, 62, 172, 232, 12, 190, 20, 11, 3, 61, 19, 227, 79, 190, 244, 209, 19, 62, 246, 181, 41, 62, 36, 88, 104, 190, 211, 15, 143, 62, 50, 94, 28, 191, 152, 217, 51, 61, 142, 107, 207, 61, 182, 41, 49, 61, 253, 221, 78, 187, 248, 15, 163, 189, 32, 179, 40, 60, 221, 250, 175, 62, 150, 166, 102, 61, 151, 94, 99, 60, 241, 106, 129, 60, 241, 65, 101, 190, 213, 55, 185, 190, 255, 216, 248, 61, 55, 239, 173, 61, 85, 38, 42, 62, 52, 89, 132, 187, 10, 211, 37, 61, 137, 213, 55, 190, 160, 38, 9, 62, 189, 139, 240, 189, 113, 135, 34, 190, 76, 25, 216, 61, 132, 200, 234, 61, 67, 246, 132, 190, 155, 67, 11, 189, 116, 89, 69, 190, 44, 134, 237, 61, 68, 14, 246, 61, 136, 172, 207, 59, 232, 27, 176, 61, 144, 228, 146, 60, 203, 9, 163, 190, 161, 151, 25, 62, 74, 230, 162, 189, 196, 59, 106, 189, 140, 115, 210, 188, 116, 183, 46, 62, 22, 42, 8, 190, 197, 214, 3, 62, 102, 136, 52, 190, 9, 226, 85, 190, 173, 253, 44, 190, 64, 170, 210, 190, 80, 113, 70, 62, 186, 204, 229, 189, 178, 164, 150, 61, 52, 101, 248, 61, 206, 0, 49, 190, 202, 177, 161, 61, 254, 245, 210, 61, 227, 165, 140, 61, 242, 219, 112, 61, 210, 18, 74, 190, 202, 128, 99, 62, 129, 124, 89, 189, 95, 204, 170, 189, 12, 38, 11, 189, 113, 5, 97, 190, 204, 171, 154, 188, 46, 34, 190, 187, 40, 187, 163, 189, 85, 111, 24, 190, 101, 131, 78, 189, 126, 47, 103, 62, 156, 221, 11, 62, 217, 18, 248, 61, 71, 208, 157, 189, 100, 220, 27, 62, 153, 90, 163, 190, 140, 132, 200, 60, 71, 159, 50, 62, 35, 136, 246, 61, 185, 52, 242, 189, 7, 56, 6, 189, 205, 6, 204, 62, 185, 53, 159, 189, 42, 161, 20, 62, 201, 126, 73, 189, 182, 220, 27, 188, 91, 109, 167, 189, 123, 10, 50, 190, 226, 224, 168, 189, 49, 29, 172, 60, 5, 39, 173, 189, 183, 253, 83, 189, 137, 239, 236, 189, 197, 171, 200, 188, 120, 218, 46, 190, 226, 174, 73, 61, 15, 57, 223, 189, 81, 6, 186, 60, 38, 227, 46, 62, 174, 84, 115, 189, 238, 251, 143, 188, 143, 44, 40, 62, 209, 242, 14, 190, 79, 148, 66, 189, 16, 52, 20, 60, 59, 169, 232, 189, 195, 144, 16, 190, 234, 217, 140, 189, 2, 235, 10, 190, 130, 139, 5, 188, 27, 1, 84, 60, 35, 205, 85, 61, 208, 165, 236, 61, 151, 40, 60, 189, 233, 100, 192, 61, 247, 95, 7, 189, 52, 152, 66, 189, 221, 86, 26, 190, 192, 99, 210, 60, 186, 234, 105, 62, 149, 88, 21, 190, 184, 32, 13, 189, 17, 155, 144, 189, 153, 104, 161, 190, 140, 153, 217, 62, 219, 83, 134, 61, 74, 177, 142, 188, 178, 237, 100, 189, 204, 0, 136, 61, 175, 152, 177, 190, 40, 234, 65, 190, 90, 213, 158, 189, 73, 169, 186, 61, 153, 80, 1, 62, 230, 91, 203, 190, 113, 228, 200, 61, 242, 95, 16, 61, 42, 251, 185, 188, 209, 176, 147, 190, 56, 232, 131, 62, 102, 204, 31, 62, 61, 5, 146, 62, 137, 185, 202, 188, 162, 194, 116, 189, 111, 16, 20, 62, 186, 144, 183, 190, 48, 61, 90, 189, 107, 162, 139, 61, 231, 163, 208, 61, 124, 43, 4, 190, 68, 98, 146, 62, 45, 13, 17, 62, 153, 202, 179, 189, 160, 33, 117, 189, 147, 221, 104, 189, 133, 65, 22, 62, 50, 170, 2, 61, 184, 232, 42, 62, 137, 173, 53, 190, 186, 169, 148, 188, 62, 2, 221, 189, 60, 147, 23, 61, 206, 147, 91, 61, 133, 176, 6, 62, 217, 46, 224, 189, 86, 128, 225, 60, 202, 153, 219, 60, 64, 226, 6, 62, 30, 147, 222, 189, 162, 94, 0, 189, 167, 252, 113, 61, 10, 255, 35, 62, 49, 34, 169, 61, 248, 164, 71, 189, 72, 160, 87, 188, 141, 168, 249, 187, 183, 47, 145, 189, 166, 13, 151, 189, 31, 33, 205, 189, 75, 158, 10, 190, 12, 3, 30, 189, 203, 53, 81, 61, 166, 252, 149, 60, 214, 215, 180, 189, 161, 231, 252, 61, 93, 106, 49, 62, 163, 225, 209, 61, 48, 14, 242, 59, 159, 144, 94, 189, 52, 74, 91, 188, 114, 103, 236, 189, 67, 124, 141, 62, 255, 219, 238, 61, 15, 205, 204, 61, 246, 168, 247, 189, 200, 96, 193, 189, 211, 189, 140, 62, 204, 206, 225, 187, 11, 132, 190, 62, 165, 229, 94, 62, 31, 149, 98, 190, 21, 102, 138, 188, 195, 86, 183, 62, 221, 140, 170, 190, 119, 20, 128, 190, 250, 238, 194, 189, 112, 254, 140, 190, 245, 171, 67, 190, 136, 253, 153, 190, 169, 66, 63, 62, 137, 236, 219, 190, 151, 246, 30, 189, 82, 26, 80, 190, 250, 132, 48, 60, 86, 108, 164, 190, 209, 177, 152, 190, 67, 192, 147, 62, 166, 103, 123, 62, 220, 131, 19, 61, 230, 248, 73, 190, 216, 231, 41, 190, 242, 244, 243, 60, 105, 110, 133, 189, 48, 26, 73, 62, 68, 149, 223, 62, 243, 251, 161, 61, 135, 164, 37, 190, 120, 168, 252, 184, 85, 206, 102, 62, 142, 146, 88, 62, 173, 236, 223, 61, 198, 177, 117, 189, 111, 104, 207, 61, 94, 118, 197, 62, 226, 28, 132, 62, 245, 101, 27, 191, 42, 168, 105, 61, 189, 192, 38, 190, 137, 130, 0, 61, 108, 109, 156, 189, 15, 29, 115, 190, 81, 213, 110, 62, 231, 188, 45, 191, 129, 139, 176, 61, 39, 110, 14, 190, 87, 43, 44, 190, 33, 209, 127, 189, 234, 156, 65, 190, 53, 65, 237, 189, 208, 22, 53, 190, 230, 176, 61, 61, 163, 46, 9, 190, 4, 163, 170, 61, 159, 124, 157, 189, 43, 230, 74, 61, 215, 2, 16, 189, 129, 180, 252, 188, 230, 172, 96, 61, 94, 209, 139, 189, 191, 145, 37, 60, 72, 229, 81, 189, 174, 248, 230, 60, 150, 45, 138, 62, 143, 86, 45, 190, 199, 56, 11, 62, 166, 0, 20, 62, 72, 102, 0, 190, 166, 34, 5, 190, 51, 13, 79, 190, 20, 74, 162, 62, 138, 117, 134, 61, 157, 191, 77, 189, 10, 159, 136, 61, 166, 52, 150, 61, 156, 11, 17, 61, 127, 24, 36, 62, 188, 74, 253, 189, 75, 193, 189, 190, 168, 243, 196, 60, 188, 6, 32, 190, 95, 178, 193, 190, 35, 253, 14, 62, 203, 94, 147, 190, 101, 24, 3, 191, 99, 183, 87, 61, 50, 99, 47, 62, 116, 126, 152, 190, 182, 34, 35, 62, 3, 30, 131, 62, 174, 89, 246, 190, 161, 232, 235, 61, 128, 45, 63, 189, 111, 234, 143, 62, 14, 143, 136, 190, 233, 100, 76, 191, 59, 79, 209, 190, 239, 179, 144, 189, 12, 83, 156, 60, 74, 71, 168, 190, 220, 212, 66, 190, 116, 203, 123, 62, 70, 127, 132, 190, 163, 39, 177, 190, 32, 196, 216, 61, 207, 223, 219, 190, 98, 194, 32, 191, 148, 161, 25, 191, 118, 80, 142, 61, 62, 37, 76, 62, 173, 227, 203, 62, 46, 115, 150, 62, 88, 137, 204, 189, 203, 28, 9, 62, 47, 104, 146, 61, 92, 18, 247, 61, 191, 235, 195, 188, 84, 99, 2, 61, 236, 134, 186, 61, 224, 155, 19, 190, 185, 161, 45, 190, 70, 75, 37, 62, 113, 71, 46, 62, 222, 138, 18, 190, 5, 107, 31, 60, 32, 41, 37, 190, 57, 231, 208, 189, 147, 43, 236, 59, 6, 17, 10, 190, 235, 237, 49, 190, 52, 39, 155, 188, 245, 34, 245, 189, 6, 112, 157, 187, 110, 95, 16, 190, 173, 244, 179, 189, 196, 131, 181, 188, 182, 238, 225, 189, 168, 108, 185, 189, 135, 249, 56, 57, 185, 191, 11, 62, 0, 161, 18, 190, 148, 31, 164, 59, 68, 80, 13, 61, 33, 159, 167, 60, 86, 224, 72, 62, 164, 101, 183, 62, 24, 177, 158, 190, 68, 71, 236, 189, 187, 193, 165, 62, 172, 123, 2, 190, 47, 247, 0, 62, 52, 101, 212, 59, 44, 180, 135, 61, 214, 79, 167, 189, 212, 17, 251, 188, 41, 84, 74, 190, 192, 221, 71, 189, 157, 34, 159, 62, 163, 251, 237, 190, 102, 62, 1, 63, 77, 55, 24, 62, 241, 183, 200, 189, 136, 67, 164, 190, 110, 27, 8, 190, 33, 193, 175, 190, 7, 8, 96, 190, 33, 40, 171, 189, 151, 73, 204, 61, 88, 128, 33, 62, 49, 35, 13, 190, 44, 247, 242, 61, 94, 183, 192, 190, 97, 182, 200, 187, 23, 141, 129, 60, 221, 230, 140, 60, 239, 250, 151, 189, 206, 222, 89, 190, 33, 38, 26, 188, 41, 100, 137, 190, 76, 113, 166, 61, 75, 165, 32, 189, 106, 85, 10, 62, 237, 79, 15, 62, 220, 218, 17, 189, 157, 188, 6, 62, 218, 18, 145, 188, 112, 147, 159, 189, 166, 117, 20, 60, 86, 104, 223, 189, 177, 125, 39, 61, 207, 120, 9, 62, 65, 25, 110, 62, 210, 82, 157, 189, 227, 11, 180, 60, 32, 102, 86, 62, 57, 185, 109, 189, 247, 75, 11, 190, 247, 7, 182, 190, 216, 8, 196, 61, 84, 66, 234, 60, 155, 53, 131, 189, 63, 75, 99, 187, 250, 96, 56, 62, 166, 35, 230, 188, 69, 236, 29, 62, 190, 67, 210, 189, 71, 87, 21, 191, 94, 20, 101, 186, 254, 191, 1, 63, 37, 32, 190, 61, 79, 69, 20, 188, 132, 149, 164, 189, 59, 180, 28, 190, 49, 127, 143, 62, 138, 212, 255, 61, 226, 91, 27, 62, 124, 145, 143, 189, 253, 31, 40, 62, 31, 83, 143, 190, 235, 26, 128, 62, 162, 53, 33, 62, 137, 179, 149, 61, 17, 253, 50, 62, 102, 33, 53, 190, 204, 52, 116, 190, 42, 204, 128, 62, 68, 239, 172, 187, 238, 81, 32, 191, 130, 98, 201, 62, 57, 209, 129, 61, 250, 74, 15, 62, 14, 166, 105, 62, 82, 52, 93, 62, 150, 6, 51, 61, 236, 95, 149, 189, 125, 210, 248, 190, 253, 216, 200, 189, 51, 104, 9, 62, 2, 35, 10, 62, 165, 196, 159, 62, 253, 105, 88, 61, 41, 161, 115, 61, 176, 36, 108, 62, 39, 56, 81, 188, 97, 219, 220, 187, 69, 15, 110, 61, 136, 109, 15, 62, 199, 4, 179, 188, 119, 235, 82, 188, 44, 36, 154, 61, 81, 210, 31, 62, 205, 141, 230, 61, 252, 147, 5, 190, 246, 128, 189, 188, 67, 125, 190, 61, 145, 243, 168, 62, 205, 127, 3, 190, 215, 82, 160, 189, 240, 151, 84, 62, 191, 77, 72, 61, 87, 169, 145, 190, 130, 103, 202, 189, 22, 233, 115, 62, 81, 177, 101, 189, 153, 159, 76, 189, 88, 112, 86, 190, 110, 187, 99, 62, 155, 197, 30, 61, 132, 128, 23, 62, 193, 85, 205, 189, 246, 30, 26, 190, 132, 99, 56, 190, 146, 225, 8, 190, 206, 248, 40, 62, 202, 54, 32, 62, 74, 66, 118, 189, 32, 93, 26, 191, 114, 86, 149, 60, 1, 148, 33, 62, 230, 136, 162, 190, 204, 216, 154, 62, 37, 147, 132, 62, 113, 54, 47, 62, 152, 21, 234, 188, 235, 214, 164, 61, 54, 114, 129, 62, 123, 134, 229, 61, 228, 201, 194, 62, 197, 59, 150, 62, 218, 26, 132, 62, 97, 33, 160, 62, 181, 76, 161, 62, 149, 167, 23, 191, 142, 20, 24, 189, 10, 39, 37, 189, 153, 40, 241, 61, 157, 126, 129, 190, 196, 159, 7, 190, 229, 206, 229, 61, 128, 101, 114, 191, 250, 162, 145, 62, 102, 207, 53, 190, 10, 133, 72, 190, 124, 24, 190, 190, 194, 13, 10, 63, 254, 195, 156, 190, 200, 106, 133, 62, 63, 65, 218, 190, 6, 148, 196, 190, 203, 41, 173, 62, 80, 126, 23, 190, 137, 1, 232, 61, 61, 253, 82, 190, 24, 87, 187, 62, 147, 13, 36, 191, 11, 70, 239, 188, 209, 156, 126, 61, 135, 156, 48, 190, 181, 205, 55, 62, 124, 86, 155, 190, 81, 49, 0, 190, 16, 182, 114, 62, 210, 96, 237, 61, 131, 37, 223, 190, 201, 116, 177, 189, 108, 208, 157, 62, 214, 77, 202, 62, 81, 240, 129, 62, 158, 159, 161, 61, 195, 230, 186, 61, 160, 48, 185, 190, 66, 67, 170, 190, 241, 99, 12, 190, 20, 240, 224, 61, 140, 0, 177, 61, 61, 22, 148, 62, 186, 163, 192, 62, 229, 114, 218, 188, 135, 232, 29, 191, 188, 94, 230, 188, 59, 77, 216, 190, 110, 104, 69, 62, 11, 160, 255, 189, 128, 141, 58, 62, 70, 131, 129, 59, 16, 159, 150, 190, 148, 162, 163, 189, 201, 62, 26, 62, 187, 85, 40, 190, 17, 104, 153, 60, 20, 181, 73, 62, 27, 240, 68, 191, 194, 107, 225, 61, 164, 167, 192, 189, 243, 66, 51, 189, 187, 210, 193, 189, 17, 166, 201, 61, 90, 234, 83, 190, 162, 156, 63, 62, 141, 41, 51, 190, 112, 207, 22, 189, 23, 0, 19, 62, 135, 172, 213, 189, 96, 35, 20, 59, 249, 76, 133, 190, 221, 117, 160, 187, 181, 66, 47, 62, 118, 19, 90, 62, 209, 145, 107, 190, 131, 215, 29, 190, 79, 134, 163, 62, 61, 243, 150, 190, 209, 122, 182, 190, 10, 91, 228, 188, 50, 248, 54, 61, 31, 19, 92, 62, 176, 135, 105, 62, 38, 122, 195, 62, 51, 221, 26, 191, 0, 178, 135, 60, 121, 40, 25, 62, 72, 22, 117, 62, 224, 50, 33, 62, 215, 243, 181, 190, 50, 79, 54, 60, 227, 238, 108, 61, 44, 46, 0, 190, 219, 171, 133, 190, 23, 92, 60, 191, 223, 17, 48, 63, 168, 219, 146, 61, 91, 64, 67, 62, 19, 2, 227, 61, 138, 37, 10, 60, 227, 86, 133, 190, 135, 104, 149, 190, 178, 50, 134, 189, 161, 27, 145, 62, 133, 171, 228, 62, 45, 42, 11, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 11, 19, 190, 37, 102, 104, 189, 101, 186, 137, 189, 254, 241, 36, 62, 113, 93, 183, 62, 135, 102, 254, 61, 95, 107, 103, 62, 100, 44, 90, 188, 206, 69, 131, 62, 8, 176, 51, 62, 52, 23, 144, 61, 88, 146, 144, 61, 191, 144, 80, 62, 87, 8, 202, 61, 27, 6, 7, 62, 50, 149, 118, 62, 242, 15, 107, 189, 211, 211, 67, 188, 253, 171, 37, 190, 92, 40, 119, 62, 222, 59, 143, 62, 188, 146, 117, 62, 217, 133, 71, 190, 190, 97, 8, 190, 20, 171, 17, 190, 73, 32, 56, 62, 125, 93, 241, 61, 247, 120, 21, 62, 83, 93, 135, 62, 147, 163, 23, 62, 38, 186, 77, 61, 130, 180, 216, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 186, 173, 61, 173, 157, 192, 189, 159, 25, 24, 63, 179, 238, 183, 189, 124, 83, 23, 189, 183, 155, 109, 62, 26, 225, 38, 63, 1, 188, 94, 62, 60, 11, 216, 190, 11, 127, 122, 62, 19, 48, 63, 191, 89, 245, 156, 190, 150, 191, 61, 63, 152, 206, 100, 190, 16, 119, 85, 62, 147, 135, 58, 188, 249, 191, 84, 189, 232, 14, 184, 190, 134, 30, 134, 189, 194, 167, 201, 62, 221, 245, 13, 63, 148, 47, 242, 60, 19, 184, 99, 191, 116, 145, 36, 189, 182, 32, 72, 190, 140, 143, 42, 60, 61, 105, 156, 190, 248, 122, 135, 61, 38, 218, 66, 63, 242, 50, 84, 191, 0, 45, 236, 190, 64, 107, 21, 191, 85, 100, 161, 189, 30, 163, 23, 187, 99, 29, 193, 190, 84, 255, 50, 190, 115, 251, 192, 190, 164, 138, 95, 190, 105, 1, 179, 61, 159, 166, 144, 62, 157, 157, 202, 190, 237, 26, 97, 190, 227, 12, 51, 62, 142, 215, 117, 62, 140, 239, 5, 63, 175, 199, 121, 190, 205, 155, 138, 62, 181, 128, 103, 190, 161, 54, 219, 188, 215, 245, 131, 62, 180, 238, 239, 60, 3, 113, 199, 60, 198, 247, 5, 61, 52, 77, 51, 190, 35, 65, 22, 62, 216, 164, 206, 189, 182, 99, 49, 63, 5, 30, 41, 190, 229, 107, 124, 190, 234, 35, 87, 190, 110, 58, 31, 62, 68, 226, 51, 61, 102, 21, 53, 62, 42, 187, 127, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 79, 238, 189, 34, 170, 112, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {121, 60, 155, 191, 224, 56, 232, 63, 186, 143, 197, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {3, 12, 71, 64, 110, 171, 7, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0044/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}