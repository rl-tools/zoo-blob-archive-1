// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 217, 161, 62, 48, 113, 32, 191, 156, 181, 174, 62, 16, 61, 213, 62, 78, 16, 48, 191, 133, 29, 209, 62, 2, 45, 11, 191, 57, 219, 212, 190, 190, 131, 115, 189, 56, 105, 157, 190, 101, 92, 40, 191, 205, 247, 27, 63, 51, 59, 111, 61, 78, 181, 34, 191, 139, 153, 36, 191, 137, 197, 15, 63, 135, 54, 29, 62, 114, 149, 249, 62, 11, 121, 100, 62, 152, 245, 183, 190, 235, 1, 157, 188, 132, 248, 96, 62, 83, 20, 19, 63, 224, 87, 228, 190, 235, 100, 224, 190, 25, 186, 54, 191, 252, 142, 6, 63, 75, 231, 54, 191, 137, 130, 1, 62, 183, 63, 26, 190, 226, 85, 60, 191, 208, 90, 93, 190, 21, 29, 27, 63, 39, 52, 151, 190, 243, 118, 102, 190, 253, 246, 191, 62, 170, 199, 35, 62, 206, 85, 18, 188, 144, 176, 28, 187, 68, 54, 223, 186, 241, 32, 64, 191, 32, 29, 32, 62, 114, 64, 221, 189, 105, 11, 76, 63, 196, 51, 115, 61, 236, 114, 17, 63, 65, 157, 51, 191, 43, 194, 13, 190, 236, 105, 26, 190, 226, 192, 43, 63, 156, 158, 241, 190, 118, 208, 95, 190, 202, 57, 37, 62, 37, 4, 20, 190, 158, 247, 8, 191, 163, 4, 43, 63, 185, 174, 158, 61, 6, 39, 223, 190, 110, 242, 18, 191, 182, 166, 1, 63, 250, 211, 220, 62, 129, 116, 28, 63, 252, 0, 0, 63, 79, 57, 30, 191, 4, 24, 92, 191, 209, 232, 134, 61, 194, 189, 100, 63, 168, 84, 149, 62, 139, 58, 116, 62, 33, 22, 228, 190, 10, 216, 27, 190, 27, 195, 216, 190, 83, 215, 35, 62, 104, 150, 49, 191, 86, 22, 143, 62, 198, 106, 222, 190, 108, 86, 77, 63, 6, 116, 70, 191, 97, 148, 215, 62, 1, 9, 84, 191, 1, 180, 159, 189, 43, 26, 47, 60, 23, 2, 150, 63, 49, 128, 70, 62, 156, 139, 214, 190, 127, 103, 153, 190, 47, 182, 15, 63, 199, 40, 39, 190, 193, 170, 9, 191, 49, 164, 2, 63, 122, 194, 205, 190, 188, 224, 51, 191, 216, 227, 117, 62, 123, 60, 15, 62, 103, 154, 197, 190, 89, 116, 5, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {132, 195, 144, 190, 241, 16, 3, 63, 140, 254, 14, 62, 88, 227, 67, 189, 72, 40, 33, 191, 207, 190, 129, 62, 212, 134, 15, 191, 150, 87, 73, 62, 197, 204, 26, 62, 33, 147, 35, 188, 175, 185, 157, 190, 104, 63, 145, 190, 88, 211, 134, 190, 183, 158, 240, 61, 211, 76, 35, 63, 141, 165, 12, 62, 41, 144, 151, 190, 242, 166, 14, 62, 252, 228, 153, 62, 116, 164, 43, 190, 120, 41, 16, 191, 204, 73, 147, 190, 157, 142, 19, 63, 174, 251, 115, 62, 200, 219, 94, 62, 148, 160, 192, 190, 88, 58, 164, 62, 209, 172, 254, 190, 171, 157, 21, 63, 100, 145, 114, 190, 207, 124, 176, 190, 208, 186, 236, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 148, 152, 189, 207, 253, 13, 62, 94, 225, 99, 189, 24, 241, 174, 61, 76, 139, 104, 61, 151, 93, 106, 189, 118, 166, 151, 188, 81, 2, 135, 187, 137, 79, 39, 61, 137, 17, 11, 189, 93, 24, 43, 190, 88, 234, 53, 60, 253, 160, 50, 62, 217, 73, 51, 190, 9, 117, 79, 61, 123, 240, 181, 189, 80, 199, 24, 189, 191, 10, 43, 189, 175, 72, 21, 189, 58, 175, 128, 189, 63, 104, 38, 62, 0, 225, 1, 62, 182, 139, 198, 189, 156, 49, 120, 61, 106, 168, 40, 62, 66, 182, 65, 189, 78, 193, 140, 189, 225, 58, 129, 61, 70, 41, 157, 189, 87, 245, 34, 62, 151, 34, 11, 190, 179, 28, 6, 190, 193, 182, 221, 59, 94, 110, 1, 190, 114, 72, 224, 189, 21, 29, 218, 60, 185, 109, 235, 189, 166, 96, 46, 189, 125, 66, 70, 61, 198, 90, 51, 189, 248, 148, 252, 61, 239, 110, 159, 61, 168, 2, 255, 189, 51, 150, 145, 189, 189, 197, 218, 189, 58, 214, 3, 189, 133, 208, 173, 189, 16, 227, 28, 190, 253, 164, 231, 189, 152, 149, 11, 189, 13, 150, 1, 61, 94, 214, 86, 189, 144, 47, 13, 189, 15, 254, 25, 62, 71, 220, 143, 189, 231, 18, 21, 61, 166, 128, 236, 60, 229, 25, 232, 61, 134, 70, 184, 189, 234, 182, 169, 61, 125, 108, 6, 190, 41, 16, 194, 61, 202, 154, 46, 190, 243, 44, 210, 61, 183, 154, 249, 61, 120, 150, 116, 62, 69, 91, 39, 189, 219, 212, 177, 61, 200, 223, 129, 190, 108, 41, 53, 190, 251, 62, 167, 59, 253, 86, 208, 189, 14, 109, 32, 62, 12, 255, 112, 61, 177, 36, 140, 189, 114, 140, 92, 190, 229, 190, 253, 189, 185, 104, 46, 61, 191, 77, 41, 62, 230, 49, 134, 62, 164, 91, 77, 189, 15, 76, 46, 62, 54, 103, 140, 62, 162, 216, 244, 189, 204, 222, 214, 190, 215, 116, 76, 191, 109, 76, 61, 62, 4, 166, 166, 189, 138, 69, 81, 61, 62, 144, 36, 61, 122, 170, 180, 61, 26, 187, 87, 61, 173, 188, 57, 62, 96, 36, 179, 190, 156, 220, 21, 191, 119, 2, 192, 190, 64, 152, 20, 62, 239, 181, 15, 189, 73, 169, 69, 60, 78, 178, 208, 189, 154, 8, 171, 189, 204, 150, 60, 61, 47, 108, 151, 189, 175, 235, 55, 61, 254, 190, 163, 61, 207, 47, 149, 190, 173, 212, 99, 189, 128, 4, 184, 189, 148, 213, 114, 61, 161, 50, 54, 189, 187, 188, 103, 189, 112, 235, 56, 190, 58, 158, 132, 189, 28, 133, 101, 190, 67, 34, 68, 62, 141, 85, 14, 62, 227, 236, 208, 60, 57, 84, 130, 62, 59, 146, 255, 187, 138, 115, 167, 190, 85, 130, 86, 62, 107, 126, 156, 188, 204, 58, 73, 189, 103, 57, 155, 61, 217, 2, 5, 62, 181, 107, 168, 61, 95, 66, 42, 189, 102, 215, 211, 61, 33, 243, 137, 189, 10, 112, 45, 187, 9, 228, 201, 61, 181, 211, 75, 189, 227, 255, 188, 189, 242, 6, 3, 62, 79, 113, 29, 59, 209, 129, 119, 61, 199, 180, 33, 58, 80, 252, 90, 62, 236, 187, 110, 61, 200, 39, 100, 60, 186, 129, 11, 190, 159, 18, 0, 190, 226, 110, 58, 62, 175, 234, 133, 62, 6, 151, 241, 189, 233, 195, 10, 190, 67, 1, 198, 61, 80, 75, 185, 60, 249, 54, 129, 189, 93, 104, 34, 60, 71, 102, 127, 61, 144, 42, 87, 62, 203, 36, 26, 62, 157, 186, 43, 190, 110, 130, 136, 62, 81, 0, 114, 190, 202, 245, 67, 62, 62, 46, 234, 189, 64, 0, 122, 190, 152, 85, 56, 189, 143, 70, 22, 62, 63, 132, 57, 62, 133, 2, 5, 62, 54, 5, 191, 188, 144, 188, 153, 189, 11, 40, 31, 62, 208, 99, 150, 189, 182, 165, 36, 62, 86, 137, 197, 190, 47, 250, 191, 61, 41, 202, 186, 189, 32, 142, 189, 61, 70, 28, 206, 189, 8, 197, 232, 189, 37, 124, 167, 189, 66, 231, 36, 61, 240, 192, 141, 189, 9, 16, 225, 61, 105, 98, 46, 62, 5, 124, 22, 190, 129, 185, 151, 189, 61, 108, 35, 61, 213, 125, 108, 61, 191, 186, 120, 189, 100, 91, 128, 62, 249, 155, 30, 62, 236, 199, 232, 61, 220, 28, 241, 60, 137, 149, 159, 190, 125, 180, 47, 190, 244, 175, 73, 190, 34, 213, 204, 188, 131, 28, 13, 190, 107, 47, 231, 61, 235, 193, 236, 186, 62, 69, 215, 61, 243, 83, 105, 62, 116, 159, 156, 188, 27, 17, 2, 190, 114, 97, 56, 190, 177, 63, 189, 61, 250, 72, 235, 61, 130, 172, 20, 62, 30, 193, 35, 188, 249, 222, 212, 188, 96, 202, 97, 60, 66, 140, 27, 190, 165, 224, 49, 62, 122, 101, 139, 62, 165, 230, 99, 61, 208, 59, 117, 60, 104, 119, 160, 62, 174, 83, 158, 190, 189, 18, 187, 190, 160, 136, 60, 61, 204, 18, 164, 189, 165, 173, 120, 189, 141, 18, 139, 190, 197, 85, 228, 60, 158, 79, 4, 191, 131, 1, 44, 62, 61, 113, 137, 190, 1, 29, 112, 190, 181, 244, 115, 190, 232, 174, 33, 190, 222, 171, 134, 62, 208, 189, 147, 189, 181, 111, 65, 62, 20, 128, 47, 62, 111, 61, 80, 190, 15, 238, 107, 62, 126, 42, 194, 189, 147, 219, 141, 61, 220, 157, 132, 62, 128, 216, 183, 61, 175, 254, 166, 189, 166, 46, 195, 61, 24, 124, 137, 62, 77, 241, 46, 190, 255, 239, 210, 62, 248, 53, 78, 62, 3, 244, 77, 61, 104, 237, 137, 189, 104, 31, 227, 62, 90, 136, 14, 190, 144, 6, 207, 190, 200, 84, 99, 189, 120, 75, 173, 61, 75, 77, 210, 189, 38, 211, 133, 190, 65, 1, 13, 61, 2, 45, 133, 190, 159, 157, 15, 62, 54, 235, 205, 189, 122, 150, 138, 190, 192, 172, 255, 189, 229, 198, 199, 61, 205, 107, 74, 190, 15, 144, 102, 188, 74, 40, 206, 190, 118, 0, 200, 189, 120, 183, 35, 62, 207, 165, 183, 60, 204, 60, 227, 61, 137, 208, 72, 190, 17, 102, 253, 61, 162, 203, 97, 190, 45, 75, 39, 190, 201, 164, 35, 61, 6, 153, 95, 61, 227, 206, 37, 62, 4, 47, 207, 61, 73, 156, 192, 61, 218, 91, 79, 60, 84, 228, 150, 189, 171, 124, 19, 191, 31, 217, 75, 62, 229, 196, 214, 62, 243, 168, 70, 62, 158, 44, 189, 188, 222, 98, 191, 60, 172, 117, 71, 61, 85, 45, 191, 60, 232, 115, 184, 190, 69, 23, 76, 189, 223, 89, 150, 61, 103, 135, 137, 189, 41, 92, 180, 188, 122, 85, 53, 62, 196, 137, 166, 61, 52, 19, 34, 188, 24, 137, 209, 61, 210, 172, 25, 61, 224, 153, 194, 61, 54, 89, 28, 60, 242, 84, 101, 188, 177, 150, 41, 190, 36, 50, 64, 188, 86, 208, 185, 189, 185, 76, 26, 190, 166, 80, 49, 62, 122, 186, 37, 190, 55, 91, 11, 59, 218, 104, 158, 60, 90, 172, 79, 60, 93, 137, 84, 189, 58, 8, 2, 189, 230, 86, 185, 189, 188, 205, 247, 189, 67, 218, 242, 188, 101, 95, 201, 61, 182, 57, 216, 61, 144, 255, 51, 189, 81, 27, 3, 62, 127, 0, 124, 62, 74, 143, 43, 62, 71, 236, 155, 190, 169, 20, 151, 60, 136, 249, 90, 61, 128, 22, 134, 188, 171, 246, 179, 188, 54, 3, 209, 190, 112, 187, 134, 59, 58, 55, 44, 191, 144, 118, 200, 190, 46, 213, 132, 61, 225, 41, 119, 189, 60, 18, 167, 62, 212, 127, 44, 61, 188, 153, 237, 61, 9, 204, 10, 191, 10, 90, 144, 190, 224, 229, 36, 61, 67, 55, 188, 189, 211, 212, 148, 62, 191, 158, 199, 189, 79, 21, 191, 189, 84, 255, 71, 62, 192, 70, 240, 61, 250, 27, 26, 191, 26, 72, 86, 62, 214, 133, 187, 62, 120, 47, 100, 62, 144, 33, 192, 61, 133, 60, 193, 187, 74, 89, 249, 60, 224, 246, 65, 190, 25, 17, 173, 190, 173, 253, 19, 190, 98, 208, 29, 190, 32, 251, 248, 61, 7, 117, 10, 62, 174, 92, 107, 60, 101, 4, 142, 189, 103, 85, 115, 190, 106, 192, 6, 189, 25, 178, 82, 190, 133, 20, 142, 62, 192, 183, 134, 189, 146, 20, 109, 62, 59, 58, 79, 59, 26, 245, 147, 61, 3, 49, 113, 190, 73, 213, 37, 60, 47, 200, 37, 189, 120, 69, 7, 190, 240, 104, 16, 61, 122, 62, 183, 190, 245, 139, 161, 189, 239, 240, 179, 61, 220, 58, 77, 189, 147, 6, 239, 189, 6, 192, 99, 62, 63, 211, 167, 62, 58, 37, 203, 188, 207, 124, 39, 62, 29, 100, 33, 62, 238, 126, 62, 62, 216, 38, 55, 190, 108, 48, 132, 189, 90, 56, 152, 61, 2, 8, 188, 187, 134, 183, 71, 62, 8, 155, 109, 62, 27, 67, 79, 62, 151, 15, 214, 61, 52, 195, 134, 61, 17, 168, 132, 189, 17, 117, 114, 190, 192, 18, 68, 190, 86, 68, 214, 61, 189, 94, 68, 190, 104, 6, 100, 62, 193, 17, 41, 62, 38, 75, 53, 62, 83, 57, 58, 190, 170, 254, 211, 60, 185, 32, 85, 62, 168, 198, 239, 189, 215, 138, 98, 62, 164, 89, 189, 60, 57, 111, 64, 62, 94, 103, 33, 62, 209, 244, 107, 62, 193, 183, 251, 189, 237, 34, 0, 191, 140, 243, 41, 61, 12, 99, 126, 190, 10, 48, 150, 190, 126, 41, 241, 190, 201, 171, 45, 62, 112, 242, 234, 190, 218, 234, 243, 61, 127, 115, 103, 190, 201, 151, 140, 190, 58, 227, 57, 190, 165, 59, 177, 189, 81, 118, 167, 61, 157, 169, 240, 186, 227, 125, 33, 62, 52, 142, 36, 190, 58, 10, 163, 188, 25, 34, 199, 61, 85, 205, 116, 62, 105, 198, 30, 190, 123, 222, 220, 60, 189, 94, 58, 190, 103, 248, 47, 62, 246, 181, 41, 62, 139, 217, 132, 190, 237, 18, 104, 62, 95, 12, 85, 190, 44, 101, 170, 59, 26, 163, 116, 187, 82, 254, 50, 189, 255, 185, 145, 188, 53, 99, 31, 189, 230, 46, 5, 62, 30, 159, 171, 62, 119, 142, 18, 62, 193, 92, 11, 60, 49, 88, 254, 60, 240, 113, 82, 189, 35, 87, 94, 190, 218, 110, 12, 62, 240, 222, 202, 61, 107, 155, 72, 62, 28, 146, 184, 60, 141, 104, 62, 61, 192, 134, 31, 190, 110, 89, 29, 62, 114, 144, 247, 189, 128, 187, 84, 60, 95, 131, 230, 60, 132, 200, 234, 61, 209, 173, 46, 190, 206, 161, 204, 188, 226, 106, 38, 190, 198, 192, 3, 62, 194, 132, 16, 62, 136, 172, 207, 59, 179, 167, 191, 61, 213, 221, 151, 189, 242, 224, 170, 61, 185, 230, 23, 62, 66, 243, 220, 189, 104, 135, 57, 190, 30, 25, 161, 187, 230, 79, 191, 61, 137, 241, 174, 189, 191, 224, 117, 61, 84, 95, 53, 190, 17, 3, 67, 190, 210, 132, 42, 190, 114, 64, 49, 189, 231, 243, 48, 61, 83, 46, 16, 190, 153, 129, 183, 61, 15, 59, 44, 62, 113, 42, 57, 190, 4, 203, 169, 60, 80, 106, 163, 61, 39, 174, 40, 62, 130, 246, 122, 61, 52, 126, 51, 190, 19, 252, 94, 62, 129, 124, 89, 189, 176, 72, 9, 190, 80, 133, 168, 188, 233, 155, 40, 189, 56, 94, 114, 60, 142, 138, 215, 59, 40, 187, 163, 189, 24, 15, 15, 190, 23, 55, 176, 189, 17, 43, 34, 62, 42, 224, 5, 62, 150, 158, 15, 62, 59, 89, 213, 189, 21, 174, 44, 62, 247, 91, 81, 190, 240, 209, 179, 59, 31, 234, 12, 62, 186, 55, 0, 62, 180, 57, 2, 190, 188, 38, 232, 188, 75, 58, 146, 62, 185, 21, 226, 61, 243, 184, 34, 62, 55, 70, 88, 189, 112, 49, 151, 60, 156, 233, 177, 189, 123, 10, 50, 190, 226, 224, 168, 189, 49, 29, 172, 60, 5, 39, 173, 189, 183, 253, 83, 189, 137, 239, 236, 189, 197, 171, 200, 188, 120, 218, 46, 190, 226, 174, 73, 61, 15, 57, 223, 189, 81, 6, 186, 60, 38, 227, 46, 62, 174, 84, 115, 189, 238, 251, 143, 188, 143, 44, 40, 62, 209, 242, 14, 190, 79, 148, 66, 189, 16, 52, 20, 60, 59, 169, 232, 189, 195, 144, 16, 190, 234, 217, 140, 189, 2, 235, 10, 190, 130, 139, 5, 188, 27, 1, 84, 60, 35, 205, 85, 61, 208, 165, 236, 61, 151, 40, 60, 189, 233, 100, 192, 61, 247, 95, 7, 189, 52, 152, 66, 189, 221, 86, 26, 190, 192, 99, 210, 60, 199, 233, 25, 62, 81, 118, 74, 190, 245, 118, 204, 61, 237, 31, 185, 189, 184, 103, 125, 190, 150, 159, 197, 62, 219, 83, 134, 61, 134, 202, 155, 189, 161, 104, 195, 189, 117, 129, 190, 61, 65, 141, 164, 190, 244, 249, 84, 190, 90, 213, 158, 189, 178, 129, 105, 61, 173, 138, 255, 61, 130, 214, 242, 189, 158, 51, 154, 60, 86, 202, 241, 60, 86, 52, 161, 61, 0, 136, 181, 190, 248, 142, 38, 62, 72, 190, 140, 62, 16, 145, 85, 62, 53, 89, 26, 61, 166, 64, 128, 189, 161, 35, 9, 62, 132, 199, 114, 190, 250, 56, 50, 59, 254, 62, 221, 61, 165, 88, 158, 61, 156, 216, 27, 190, 172, 141, 145, 62, 45, 13, 17, 62, 153, 202, 179, 189, 160, 33, 117, 189, 147, 221, 104, 189, 133, 65, 22, 62, 50, 170, 2, 61, 184, 232, 42, 62, 137, 173, 53, 190, 186, 169, 148, 188, 62, 2, 221, 189, 60, 147, 23, 61, 206, 147, 91, 61, 133, 176, 6, 62, 217, 46, 224, 189, 86, 128, 225, 60, 202, 153, 219, 60, 64, 226, 6, 62, 30, 147, 222, 189, 162, 94, 0, 189, 167, 252, 113, 61, 10, 255, 35, 62, 49, 34, 169, 61, 248, 164, 71, 189, 72, 160, 87, 188, 141, 168, 249, 187, 183, 47, 145, 189, 166, 13, 151, 189, 31, 33, 205, 189, 75, 158, 10, 190, 12, 3, 30, 189, 203, 53, 81, 61, 166, 252, 149, 60, 4, 174, 32, 189, 190, 175, 48, 62, 226, 76, 17, 62, 59, 9, 214, 61, 105, 181, 58, 62, 107, 181, 36, 61, 52, 74, 91, 188, 115, 201, 37, 190, 141, 68, 133, 62, 124, 175, 13, 62, 28, 227, 216, 61, 49, 67, 25, 190, 200, 96, 193, 189, 233, 220, 138, 62, 204, 246, 188, 189, 71, 65, 165, 62, 61, 128, 88, 62, 6, 69, 166, 189, 59, 11, 139, 189, 91, 203, 172, 62, 226, 87, 90, 189, 42, 131, 209, 190, 152, 54, 46, 189, 85, 77, 208, 189, 167, 232, 78, 190, 50, 255, 108, 190, 8, 239, 23, 62, 212, 204, 127, 190, 138, 151, 96, 189, 201, 136, 114, 190, 9, 133, 196, 189, 138, 35, 168, 190, 230, 63, 65, 190, 6, 10, 175, 62, 144, 144, 72, 62, 103, 18, 179, 61, 200, 28, 225, 60, 215, 108, 10, 190, 242, 244, 243, 60, 164, 126, 78, 189, 97, 105, 92, 62, 173, 205, 162, 62, 225, 115, 188, 61, 164, 40, 10, 190, 120, 168, 252, 184, 106, 14, 136, 62, 85, 229, 212, 188, 57, 72, 139, 61, 147, 250, 106, 60, 187, 197, 228, 61, 7, 227, 238, 61, 227, 207, 149, 62, 158, 179, 152, 190, 143, 50, 212, 189, 153, 179, 41, 190, 113, 92, 234, 61, 11, 145, 131, 189, 190, 234, 48, 190, 57, 187, 43, 62, 162, 245, 17, 191, 100, 78, 123, 61, 215, 213, 230, 189, 140, 152, 111, 190, 151, 167, 181, 188, 206, 17, 54, 190, 221, 16, 214, 189, 229, 53, 188, 189, 223, 253, 61, 61, 127, 191, 221, 189, 166, 249, 23, 61, 159, 124, 157, 189, 216, 35, 59, 60, 184, 170, 208, 188, 204, 229, 125, 61, 221, 22, 85, 59, 242, 25, 159, 189, 191, 145, 37, 60, 127, 14, 213, 61, 18, 156, 202, 189, 237, 24, 126, 62, 255, 44, 40, 190, 96, 12, 29, 62, 183, 196, 153, 188, 120, 220, 239, 189, 202, 64, 94, 189, 85, 143, 168, 189, 242, 213, 143, 62, 99, 114, 167, 61, 183, 203, 164, 59, 180, 53, 152, 61, 179, 65, 132, 60, 1, 191, 29, 61, 212, 200, 14, 62, 114, 141, 6, 190, 11, 83, 225, 189, 102, 87, 13, 61, 211, 134, 208, 189, 53, 196, 22, 191, 211, 47, 177, 62, 222, 129, 27, 191, 187, 80, 120, 190, 44, 50, 134, 189, 50, 99, 47, 62, 11, 97, 3, 190, 30, 188, 195, 60, 2, 214, 198, 62, 235, 34, 244, 190, 86, 250, 4, 61, 128, 45, 63, 189, 74, 64, 85, 62, 177, 35, 30, 190, 57, 63, 142, 190, 105, 154, 116, 190, 52, 218, 64, 62, 8, 118, 26, 61, 234, 241, 47, 191, 119, 201, 58, 62, 141, 220, 147, 62, 192, 196, 52, 190, 58, 189, 15, 62, 60, 57, 153, 189, 70, 167, 26, 190, 164, 176, 68, 190, 192, 71, 189, 190, 8, 125, 70, 61, 192, 91, 9, 190, 40, 11, 252, 61, 159, 99, 43, 189, 88, 137, 204, 189, 203, 28, 9, 62, 47, 104, 146, 61, 92, 18, 247, 61, 191, 235, 195, 188, 84, 99, 2, 61, 236, 134, 186, 61, 224, 155, 19, 190, 185, 161, 45, 190, 70, 75, 37, 62, 113, 71, 46, 62, 222, 138, 18, 190, 5, 107, 31, 60, 32, 41, 37, 190, 57, 231, 208, 189, 147, 43, 236, 59, 6, 17, 10, 190, 235, 237, 49, 190, 52, 39, 155, 188, 245, 34, 245, 189, 6, 112, 157, 187, 110, 95, 16, 190, 173, 244, 179, 189, 196, 131, 181, 188, 182, 238, 225, 189, 168, 108, 185, 189, 135, 249, 56, 57, 185, 191, 11, 62, 0, 161, 18, 190, 148, 31, 164, 59, 68, 80, 13, 61, 33, 159, 167, 60, 176, 72, 113, 61, 227, 10, 41, 62, 92, 17, 118, 190, 22, 187, 23, 190, 4, 212, 159, 62, 72, 87, 150, 189, 47, 247, 0, 62, 18, 20, 128, 60, 253, 220, 247, 60, 168, 177, 1, 190, 221, 109, 63, 189, 216, 218, 1, 190, 192, 221, 71, 189, 241, 185, 231, 61, 48, 177, 154, 190, 237, 234, 192, 62, 90, 65, 8, 62, 145, 196, 241, 189, 16, 53, 140, 190, 162, 66, 237, 189, 67, 33, 185, 188, 70, 185, 31, 190, 97, 245, 241, 189, 158, 184, 230, 61, 146, 217, 59, 189, 201, 137, 32, 190, 226, 72, 133, 186, 15, 93, 40, 190, 209, 127, 53, 189, 61, 194, 140, 60, 24, 0, 146, 61, 34, 131, 3, 190, 155, 149, 118, 190, 25, 18, 118, 188, 225, 132, 222, 189, 232, 12, 158, 61, 53, 252, 213, 60, 53, 48, 212, 61, 237, 79, 15, 62, 225, 226, 62, 189, 188, 170, 19, 62, 149, 233, 0, 62, 132, 52, 185, 189, 238, 23, 53, 187, 86, 104, 223, 189, 65, 82, 20, 62, 143, 214, 197, 60, 249, 75, 82, 62, 100, 243, 17, 189, 78, 5, 152, 61, 154, 65, 207, 61, 159, 185, 25, 189, 4, 220, 203, 189, 160, 5, 66, 190, 41, 5, 13, 61, 99, 154, 182, 61, 75, 197, 29, 189, 188, 78, 94, 61, 34, 124, 18, 62, 8, 59, 246, 188, 143, 249, 11, 62, 51, 215, 223, 189, 212, 189, 211, 190, 216, 127, 28, 188, 181, 238, 174, 62, 225, 45, 223, 188, 244, 49, 77, 189, 96, 187, 67, 190, 144, 167, 173, 189, 2, 231, 98, 62, 138, 212, 255, 61, 15, 121, 88, 62, 155, 159, 53, 190, 121, 56, 35, 62, 239, 2, 151, 190, 187, 169, 11, 62, 162, 53, 33, 62, 179, 101, 127, 189, 149, 15, 134, 62, 167, 12, 8, 188, 195, 212, 118, 190, 143, 49, 48, 62, 84, 106, 123, 60, 127, 123, 74, 191, 21, 172, 155, 62, 135, 78, 9, 62, 104, 0, 30, 62, 162, 128, 36, 62, 60, 213, 230, 61, 115, 108, 117, 61, 193, 132, 86, 189, 9, 88, 199, 190, 101, 177, 161, 189, 74, 12, 124, 60, 100, 211, 195, 189, 99, 121, 117, 62, 27, 232, 143, 60, 246, 135, 134, 61, 69, 250, 74, 62, 221, 236, 234, 188, 41, 7, 73, 61, 209, 14, 77, 61, 136, 109, 15, 62, 183, 65, 172, 187, 226, 51, 56, 187, 131, 248, 81, 62, 72, 242, 44, 62, 116, 199, 204, 61, 252, 147, 5, 190, 198, 182, 144, 187, 78, 47, 133, 61, 130, 206, 97, 62, 182, 98, 225, 58, 43, 187, 183, 188, 173, 143, 89, 62, 90, 225, 112, 61, 32, 103, 98, 190, 166, 146, 59, 190, 131, 129, 62, 62, 133, 76, 84, 189, 179, 15, 115, 189, 19, 190, 237, 189, 59, 230, 18, 62, 106, 92, 0, 62, 83, 227, 10, 62, 216, 55, 248, 189, 182, 176, 19, 190, 68, 80, 91, 190, 188, 52, 135, 189, 52, 178, 52, 62, 124, 182, 30, 189, 92, 120, 0, 189, 107, 159, 44, 190, 158, 102, 201, 60, 1, 148, 33, 62, 65, 134, 205, 190, 189, 71, 156, 62, 58, 229, 28, 188, 48, 234, 53, 62, 185, 254, 163, 188, 235, 214, 164, 61, 74, 209, 140, 62, 194, 105, 204, 189, 77, 147, 174, 62, 4, 122, 4, 190, 227, 159, 59, 61, 245, 103, 127, 61, 164, 47, 169, 62, 165, 78, 146, 190, 124, 5, 55, 190, 171, 107, 77, 188, 95, 122, 201, 186, 143, 173, 138, 190, 46, 229, 20, 191, 75, 245, 109, 61, 65, 96, 71, 191, 85, 69, 125, 62, 207, 93, 54, 190, 125, 31, 137, 190, 129, 89, 186, 190, 106, 246, 225, 62, 43, 189, 172, 190, 200, 26, 118, 61, 219, 88, 225, 190, 124, 113, 188, 190, 76, 132, 139, 62, 80, 126, 23, 190, 203, 197, 250, 61, 11, 196, 49, 190, 219, 107, 126, 62, 76, 78, 23, 191, 193, 171, 229, 189, 209, 156, 126, 61, 36, 128, 193, 189, 232, 42, 34, 62, 194, 194, 45, 190, 157, 27, 38, 190, 40, 21, 254, 61, 151, 144, 140, 61, 94, 109, 11, 191, 132, 249, 51, 61, 229, 13, 52, 62, 69, 87, 190, 62, 122, 247, 51, 62, 141, 11, 221, 61, 115, 17, 90, 61, 191, 249, 160, 190, 93, 71, 0, 190, 156, 253, 26, 61, 16, 171, 200, 61, 237, 255, 32, 61, 116, 30, 167, 62, 21, 18, 139, 62, 1, 144, 160, 189, 77, 133, 161, 188, 5, 210, 114, 188, 104, 19, 177, 189, 79, 77, 53, 62, 11, 160, 255, 189, 12, 67, 11, 62, 150, 50, 64, 61, 96, 68, 160, 189, 156, 118, 160, 60, 127, 36, 48, 62, 187, 85, 40, 190, 255, 138, 95, 188, 95, 48, 78, 62, 177, 90, 203, 190, 140, 97, 219, 60, 93, 162, 174, 189, 255, 221, 120, 61, 194, 197, 178, 189, 149, 142, 7, 187, 168, 101, 228, 61, 81, 14, 146, 61, 32, 154, 170, 60, 216, 108, 135, 188, 238, 232, 84, 62, 203, 110, 184, 188, 127, 37, 143, 61, 59, 151, 22, 190, 213, 108, 255, 59, 124, 239, 78, 62, 248, 130, 94, 62, 207, 43, 160, 189, 43, 127, 155, 190, 245, 192, 23, 61, 134, 179, 235, 190, 48, 107, 173, 190, 97, 242, 143, 61, 50, 248, 54, 61, 157, 97, 44, 62, 6, 16, 7, 62, 94, 53, 162, 62, 144, 109, 2, 191, 233, 137, 167, 60, 121, 40, 25, 62, 70, 94, 200, 61, 78, 192, 57, 62, 186, 130, 148, 190, 207, 37, 45, 189, 238, 118, 116, 61, 174, 203, 19, 190, 141, 216, 244, 190, 18, 208, 29, 190, 182, 179, 204, 62, 215, 95, 246, 189, 247, 105, 5, 62, 245, 85, 128, 189, 43, 160, 56, 188, 248, 10, 141, 190, 87, 245, 175, 190, 20, 41, 162, 61, 132, 60, 15, 62, 43, 96, 31, 62, 157, 166, 193, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 189, 10, 190, 37, 102, 104, 189, 196, 67, 42, 189, 193, 85, 6, 62, 114, 157, 167, 62, 47, 32, 132, 61, 246, 84, 92, 62, 92, 229, 34, 61, 135, 85, 109, 62, 210, 107, 32, 62, 136, 24, 34, 61, 231, 191, 169, 61, 31, 105, 140, 62, 145, 224, 165, 61, 143, 38, 185, 61, 239, 103, 53, 62, 242, 15, 107, 189, 86, 46, 161, 188, 253, 171, 37, 190, 118, 61, 77, 62, 218, 202, 41, 62, 107, 58, 32, 62, 168, 103, 160, 188, 190, 97, 8, 190, 193, 74, 239, 189, 190, 161, 244, 61, 27, 39, 5, 62, 15, 39, 212, 61, 167, 150, 23, 62, 18, 65, 165, 61, 126, 101, 156, 61, 241, 25, 157, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 50, 188, 61, 173, 157, 192, 189, 27, 19, 203, 62, 176, 125, 167, 189, 6, 20, 104, 60, 157, 197, 149, 62, 71, 79, 206, 62, 157, 48, 147, 62, 128, 113, 198, 190, 224, 174, 40, 62, 56, 181, 31, 191, 201, 188, 15, 190, 74, 43, 204, 62, 54, 25, 63, 190, 196, 254, 150, 61, 242, 14, 130, 59, 249, 191, 84, 189, 70, 169, 190, 190, 134, 30, 134, 189, 63, 212, 227, 62, 204, 242, 208, 62, 172, 223, 43, 187, 204, 198, 70, 191, 116, 145, 36, 189, 136, 66, 244, 189, 205, 50, 229, 60, 33, 227, 199, 190, 68, 233, 203, 61, 53, 97, 27, 63, 48, 112, 57, 191, 231, 227, 6, 190, 213, 103, 212, 190, 195, 239, 160, 189, 30, 163, 23, 187, 70, 10, 72, 190, 170, 246, 131, 189, 200, 193, 140, 190, 122, 95, 48, 190, 186, 176, 69, 61, 100, 196, 65, 62, 9, 89, 143, 190, 69, 100, 61, 190, 73, 231, 100, 62, 35, 175, 153, 61, 75, 79, 246, 61, 17, 114, 12, 190, 47, 248, 19, 62, 148, 234, 93, 190, 161, 54, 219, 188, 162, 85, 124, 62, 180, 238, 239, 60, 56, 157, 215, 189, 40, 253, 11, 189, 3, 123, 231, 189, 200, 112, 213, 61, 216, 164, 206, 189, 140, 224, 2, 63, 125, 198, 178, 189, 38, 119, 2, 190, 86, 171, 67, 190, 252, 189, 227, 61, 187, 239, 102, 61, 30, 73, 129, 61, 28, 63, 117, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 142, 251, 189, 95, 209, 254, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {159, 148, 193, 63, 219, 4, 5, 191, 168, 233, 110, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {156, 199, 181, 63, 63, 92, 202, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0044/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}