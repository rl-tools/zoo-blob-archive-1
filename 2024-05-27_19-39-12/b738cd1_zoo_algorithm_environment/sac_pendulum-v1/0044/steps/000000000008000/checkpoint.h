// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 194, 250, 62, 151, 146, 24, 191, 192, 204, 165, 62, 6, 33, 251, 62, 45, 184, 59, 191, 154, 228, 183, 62, 208, 90, 43, 191, 106, 130, 54, 191, 8, 216, 191, 189, 231, 188, 32, 59, 241, 253, 159, 190, 28, 8, 43, 63, 25, 183, 228, 62, 133, 205, 80, 191, 99, 123, 37, 191, 8, 229, 40, 63, 203, 66, 209, 62, 106, 221, 248, 62, 11, 121, 100, 62, 152, 245, 183, 190, 235, 1, 157, 188, 172, 117, 154, 62, 238, 40, 147, 62, 196, 41, 232, 190, 200, 232, 4, 191, 4, 104, 19, 191, 120, 215, 255, 62, 109, 192, 88, 191, 86, 170, 0, 62, 181, 21, 192, 59, 128, 131, 22, 191, 38, 226, 23, 63, 136, 187, 22, 63, 243, 78, 209, 189, 147, 181, 138, 189, 186, 64, 181, 62, 170, 199, 35, 62, 206, 85, 18, 188, 144, 176, 28, 187, 150, 244, 36, 61, 134, 23, 30, 191, 205, 191, 40, 62, 150, 19, 74, 190, 218, 137, 57, 63, 22, 135, 41, 61, 204, 251, 250, 62, 158, 3, 129, 191, 215, 12, 113, 190, 191, 104, 98, 190, 157, 219, 63, 63, 129, 168, 246, 190, 253, 72, 233, 190, 196, 101, 4, 62, 163, 210, 222, 189, 150, 191, 36, 191, 140, 162, 81, 63, 66, 33, 213, 61, 201, 34, 199, 190, 87, 246, 213, 190, 98, 243, 250, 62, 152, 235, 54, 63, 155, 28, 73, 63, 231, 168, 206, 62, 186, 51, 57, 191, 173, 223, 106, 191, 54, 102, 201, 60, 71, 102, 113, 63, 76, 119, 244, 62, 167, 86, 84, 62, 224, 85, 55, 191, 165, 182, 66, 191, 122, 121, 153, 190, 119, 66, 58, 62, 71, 6, 35, 191, 58, 156, 143, 62, 72, 53, 199, 190, 214, 188, 160, 62, 102, 134, 77, 191, 156, 200, 228, 62, 13, 161, 112, 191, 248, 148, 60, 190, 148, 192, 166, 62, 87, 13, 144, 63, 135, 234, 194, 62, 64, 191, 18, 191, 21, 216, 255, 189, 176, 73, 6, 63, 227, 95, 6, 190, 229, 66, 226, 190, 132, 139, 0, 63, 53, 155, 223, 190, 75, 86, 48, 191, 79, 87, 134, 62, 196, 70, 115, 62, 112, 48, 143, 190, 27, 113, 2, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 209, 248, 190, 11, 8, 168, 62, 21, 237, 50, 62, 133, 193, 70, 190, 44, 199, 4, 191, 189, 121, 156, 62, 212, 134, 15, 191, 193, 126, 243, 61, 191, 180, 186, 61, 101, 197, 32, 62, 49, 254, 206, 190, 159, 254, 177, 190, 88, 211, 134, 190, 80, 40, 181, 61, 51, 98, 37, 63, 64, 35, 224, 61, 85, 47, 139, 189, 249, 68, 3, 62, 203, 11, 131, 62, 209, 127, 133, 190, 93, 94, 71, 191, 65, 221, 65, 190, 4, 221, 254, 62, 218, 10, 86, 62, 115, 99, 141, 62, 200, 195, 5, 191, 73, 35, 153, 62, 168, 28, 209, 190, 233, 113, 26, 63, 75, 147, 139, 190, 59, 149, 141, 190, 45, 191, 246, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 224, 198, 189, 153, 22, 242, 61, 122, 103, 130, 189, 66, 133, 136, 61, 76, 139, 104, 61, 169, 120, 139, 189, 118, 166, 151, 188, 81, 2, 135, 187, 168, 36, 130, 60, 137, 17, 11, 189, 75, 51, 65, 190, 254, 162, 41, 188, 253, 160, 50, 62, 84, 7, 76, 190, 59, 12, 100, 61, 113, 59, 182, 189, 80, 199, 24, 189, 191, 10, 43, 189, 116, 22, 253, 188, 53, 219, 179, 189, 158, 85, 34, 62, 63, 247, 226, 61, 54, 105, 208, 189, 156, 49, 120, 61, 125, 205, 13, 62, 66, 182, 65, 189, 62, 236, 150, 189, 232, 252, 138, 61, 240, 168, 198, 189, 6, 237, 9, 62, 111, 37, 40, 190, 21, 140, 26, 190, 193, 182, 221, 59, 94, 110, 1, 190, 114, 72, 224, 189, 21, 29, 218, 60, 185, 109, 235, 189, 166, 96, 46, 189, 125, 66, 70, 61, 198, 90, 51, 189, 248, 148, 252, 61, 239, 110, 159, 61, 168, 2, 255, 189, 51, 150, 145, 189, 189, 197, 218, 189, 58, 214, 3, 189, 133, 208, 173, 189, 16, 227, 28, 190, 253, 164, 231, 189, 152, 149, 11, 189, 13, 150, 1, 61, 94, 214, 86, 189, 144, 47, 13, 189, 15, 254, 25, 62, 71, 220, 143, 189, 231, 18, 21, 61, 166, 128, 236, 60, 229, 25, 232, 61, 134, 70, 184, 189, 234, 182, 169, 61, 125, 108, 6, 190, 41, 16, 194, 61, 202, 154, 46, 190, 243, 44, 210, 61, 74, 67, 19, 62, 148, 181, 45, 62, 73, 12, 253, 190, 164, 130, 240, 59, 252, 144, 39, 190, 89, 101, 155, 190, 251, 62, 167, 59, 120, 52, 211, 61, 190, 120, 234, 60, 147, 80, 247, 189, 85, 236, 62, 190, 147, 126, 192, 190, 229, 190, 253, 189, 68, 206, 119, 189, 125, 144, 39, 62, 122, 153, 192, 62, 190, 59, 183, 61, 6, 230, 17, 62, 41, 240, 115, 60, 101, 236, 144, 190, 179, 100, 55, 191, 48, 252, 110, 191, 222, 19, 87, 62, 164, 249, 84, 190, 212, 210, 21, 188, 180, 170, 255, 61, 187, 255, 251, 61, 5, 126, 247, 190, 223, 236, 45, 62, 11, 183, 210, 190, 62, 112, 40, 191, 150, 202, 180, 190, 136, 113, 60, 62, 34, 114, 238, 187, 221, 59, 174, 190, 189, 177, 17, 190, 196, 7, 23, 191, 233, 24, 89, 61, 47, 108, 151, 189, 70, 23, 134, 62, 245, 172, 44, 61, 253, 205, 26, 191, 32, 155, 208, 189, 165, 164, 10, 190, 148, 213, 114, 61, 244, 112, 11, 189, 143, 47, 246, 188, 74, 189, 135, 189, 66, 128, 187, 61, 44, 174, 152, 189, 78, 59, 22, 62, 204, 123, 215, 61, 121, 163, 53, 189, 222, 65, 78, 62, 18, 239, 136, 61, 144, 96, 225, 190, 72, 32, 68, 62, 80, 243, 151, 61, 239, 16, 53, 62, 226, 75, 136, 189, 9, 51, 140, 61, 87, 42, 50, 61, 195, 37, 170, 189, 114, 169, 83, 61, 26, 173, 122, 189, 42, 178, 151, 188, 41, 195, 6, 189, 187, 154, 213, 189, 216, 255, 7, 190, 131, 124, 159, 61, 79, 113, 29, 59, 129, 7, 9, 62, 59, 95, 70, 189, 39, 233, 71, 61, 175, 193, 145, 188, 8, 251, 40, 189, 186, 129, 11, 190, 163, 165, 40, 190, 255, 235, 67, 62, 104, 1, 158, 62, 246, 21, 166, 189, 195, 145, 38, 190, 70, 28, 152, 61, 9, 224, 7, 189, 231, 172, 124, 190, 199, 132, 24, 189, 232, 75, 129, 61, 186, 89, 48, 62, 239, 198, 250, 61, 11, 233, 22, 190, 254, 166, 172, 62, 244, 87, 6, 191, 12, 120, 2, 62, 91, 96, 30, 190, 181, 65, 142, 190, 75, 143, 196, 189, 161, 182, 14, 62, 124, 128, 15, 62, 17, 214, 5, 62, 12, 197, 189, 186, 123, 144, 139, 189, 200, 82, 137, 61, 208, 99, 150, 189, 17, 248, 119, 62, 175, 217, 130, 190, 193, 117, 249, 61, 191, 86, 249, 189, 80, 203, 79, 61, 70, 28, 206, 189, 61, 166, 34, 189, 38, 59, 199, 186, 38, 218, 250, 61, 91, 47, 227, 188, 228, 140, 248, 61, 172, 210, 220, 61, 90, 141, 39, 190, 41, 141, 164, 190, 169, 194, 178, 62, 30, 175, 150, 61, 226, 209, 114, 189, 90, 117, 141, 62, 210, 190, 57, 62, 222, 234, 55, 62, 195, 7, 215, 190, 182, 72, 248, 189, 126, 6, 223, 189, 31, 183, 3, 62, 197, 39, 180, 60, 44, 170, 18, 190, 48, 52, 186, 61, 254, 6, 16, 190, 110, 7, 234, 61, 147, 55, 110, 62, 83, 222, 179, 189, 27, 17, 2, 190, 185, 28, 34, 189, 151, 221, 223, 61, 2, 191, 227, 189, 106, 130, 37, 62, 173, 215, 241, 60, 249, 222, 212, 188, 174, 97, 244, 60, 226, 204, 221, 189, 203, 155, 150, 62, 223, 44, 181, 62, 191, 155, 217, 189, 192, 167, 246, 189, 215, 91, 172, 62, 246, 208, 15, 191, 91, 230, 133, 190, 46, 115, 16, 60, 185, 128, 137, 190, 73, 155, 39, 189, 245, 47, 113, 190, 119, 33, 198, 61, 120, 94, 82, 191, 58, 223, 64, 62, 47, 94, 101, 190, 34, 25, 230, 189, 146, 148, 88, 190, 114, 192, 120, 190, 153, 26, 13, 62, 229, 77, 172, 190, 161, 67, 34, 62, 137, 139, 30, 62, 110, 156, 132, 190, 15, 238, 107, 62, 244, 238, 168, 188, 70, 59, 253, 185, 20, 181, 29, 62, 16, 92, 17, 62, 205, 246, 153, 189, 166, 46, 195, 61, 83, 72, 237, 61, 66, 129, 78, 58, 16, 75, 246, 62, 189, 2, 115, 62, 190, 71, 156, 188, 17, 178, 209, 61, 88, 196, 211, 62, 156, 215, 79, 190, 169, 183, 31, 191, 196, 56, 131, 189, 18, 171, 214, 189, 33, 59, 104, 190, 103, 44, 144, 190, 192, 53, 20, 61, 168, 193, 16, 190, 203, 111, 6, 62, 139, 85, 4, 190, 117, 46, 199, 190, 142, 146, 37, 190, 29, 129, 238, 188, 139, 2, 31, 190, 104, 147, 221, 61, 226, 109, 186, 190, 98, 3, 117, 190, 58, 203, 59, 62, 207, 165, 183, 60, 155, 96, 4, 61, 52, 116, 80, 59, 237, 113, 100, 62, 233, 145, 212, 60, 95, 204, 209, 60, 201, 164, 35, 61, 6, 183, 72, 61, 87, 96, 53, 62, 110, 170, 19, 190, 192, 52, 90, 61, 215, 73, 66, 61, 118, 47, 150, 61, 212, 241, 12, 190, 1, 52, 36, 190, 206, 219, 8, 63, 180, 106, 247, 61, 133, 163, 70, 189, 61, 170, 159, 61, 101, 62, 105, 186, 134, 17, 53, 190, 19, 183, 38, 191, 252, 200, 118, 189, 204, 228, 120, 62, 126, 0, 112, 62, 147, 132, 23, 190, 73, 226, 97, 62, 89, 140, 71, 61, 234, 12, 212, 189, 55, 125, 27, 62, 47, 70, 236, 60, 152, 97, 111, 60, 54, 89, 28, 60, 77, 80, 140, 61, 47, 164, 64, 188, 214, 205, 178, 189, 1, 82, 16, 190, 100, 156, 0, 190, 166, 80, 49, 62, 55, 247, 158, 189, 213, 29, 53, 189, 107, 185, 172, 61, 193, 117, 190, 60, 207, 60, 206, 189, 50, 162, 213, 190, 36, 211, 170, 187, 44, 104, 251, 190, 66, 123, 134, 62, 19, 243, 223, 61, 219, 229, 83, 61, 20, 182, 201, 58, 53, 255, 12, 62, 254, 47, 151, 62, 143, 38, 157, 191, 106, 152, 58, 190, 62, 248, 235, 61, 191, 227, 190, 62, 134, 111, 18, 61, 172, 62, 10, 190, 234, 161, 154, 190, 147, 93, 114, 62, 19, 102, 78, 191, 165, 101, 209, 190, 207, 58, 69, 62, 225, 41, 119, 189, 47, 145, 137, 62, 130, 241, 107, 61, 4, 64, 123, 62, 52, 173, 253, 190, 10, 201, 61, 190, 224, 229, 36, 61, 219, 171, 24, 190, 12, 21, 122, 62, 147, 37, 82, 190, 111, 13, 248, 189, 22, 91, 141, 62, 29, 158, 43, 62, 189, 89, 176, 190, 216, 243, 74, 62, 85, 108, 17, 63, 249, 132, 96, 62, 65, 189, 69, 62, 97, 107, 196, 61, 207, 179, 1, 61, 51, 173, 122, 190, 152, 199, 107, 190, 37, 67, 167, 190, 150, 238, 52, 190, 24, 175, 160, 62, 239, 225, 38, 190, 25, 34, 66, 61, 80, 210, 165, 189, 109, 86, 172, 190, 221, 148, 126, 189, 106, 145, 151, 190, 119, 208, 141, 62, 192, 183, 134, 189, 99, 7, 110, 62, 179, 117, 234, 188, 134, 25, 87, 61, 162, 148, 154, 190, 150, 114, 239, 188, 47, 200, 37, 189, 71, 53, 10, 190, 21, 123, 178, 187, 62, 44, 40, 191, 225, 12, 176, 189, 80, 28, 49, 61, 169, 42, 66, 190, 38, 85, 5, 190, 49, 206, 174, 62, 145, 84, 77, 62, 142, 7, 138, 61, 149, 186, 10, 62, 33, 137, 244, 61, 248, 166, 28, 62, 133, 227, 154, 190, 121, 224, 203, 60, 126, 118, 8, 188, 20, 36, 241, 188, 254, 160, 49, 62, 94, 208, 76, 62, 233, 81, 129, 62, 127, 88, 62, 61, 93, 119, 141, 190, 165, 241, 222, 188, 129, 110, 124, 61, 248, 76, 119, 190, 86, 68, 214, 61, 11, 210, 35, 190, 72, 91, 11, 62, 38, 60, 26, 62, 184, 237, 150, 62, 67, 111, 253, 189, 170, 254, 211, 60, 103, 114, 150, 61, 133, 28, 167, 189, 154, 216, 155, 62, 165, 69, 135, 62, 253, 85, 19, 62, 32, 2, 154, 62, 160, 113, 123, 62, 172, 25, 151, 189, 193, 166, 124, 191, 90, 76, 1, 189, 234, 109, 5, 191, 207, 74, 187, 190, 37, 78, 166, 190, 156, 119, 85, 62, 150, 63, 188, 190, 123, 198, 23, 62, 212, 32, 83, 190, 161, 117, 1, 191, 234, 143, 38, 190, 141, 37, 101, 189, 248, 135, 237, 61, 116, 190, 18, 190, 165, 254, 24, 62, 59, 165, 171, 190, 155, 101, 70, 60, 25, 34, 199, 61, 42, 118, 87, 62, 49, 122, 16, 190, 247, 59, 1, 61, 187, 134, 55, 190, 67, 237, 28, 62, 246, 181, 41, 62, 71, 65, 122, 190, 127, 123, 139, 62, 196, 18, 2, 191, 60, 230, 29, 60, 116, 108, 13, 61, 96, 197, 55, 61, 158, 131, 223, 56, 165, 81, 112, 189, 223, 107, 218, 60, 24, 224, 180, 62, 84, 117, 145, 61, 8, 170, 71, 59, 0, 232, 17, 60, 114, 219, 62, 190, 236, 181, 150, 190, 249, 40, 242, 61, 143, 213, 183, 61, 214, 250, 47, 62, 237, 107, 255, 187, 141, 104, 62, 61, 231, 194, 52, 190, 110, 89, 29, 62, 114, 144, 247, 189, 137, 184, 71, 60, 66, 205, 110, 60, 132, 200, 234, 61, 222, 195, 66, 190, 206, 161, 204, 188, 226, 106, 38, 190, 198, 192, 3, 62, 194, 132, 16, 62, 136, 172, 207, 59, 179, 167, 191, 61, 88, 245, 170, 189, 138, 179, 128, 61, 28, 215, 25, 62, 247, 173, 220, 189, 31, 93, 46, 190, 30, 25, 161, 187, 146, 216, 194, 61, 137, 241, 174, 189, 65, 78, 72, 61, 84, 95, 53, 190, 11, 105, 72, 190, 234, 168, 42, 190, 149, 126, 141, 189, 4, 71, 75, 61, 210, 238, 11, 190, 153, 129, 183, 61, 15, 59, 44, 62, 28, 251, 56, 190, 8, 209, 129, 61, 185, 70, 198, 61, 118, 81, 234, 60, 25, 20, 111, 61, 145, 224, 99, 190, 230, 63, 102, 62, 129, 124, 89, 189, 119, 75, 142, 189, 101, 215, 177, 188, 91, 163, 69, 190, 38, 17, 2, 59, 8, 159, 71, 59, 40, 187, 163, 189, 64, 154, 25, 190, 106, 120, 48, 189, 35, 28, 72, 62, 10, 75, 39, 62, 116, 195, 231, 61, 221, 224, 131, 189, 180, 37, 40, 62, 10, 213, 166, 190, 244, 45, 211, 188, 248, 18, 54, 62, 80, 149, 179, 61, 63, 33, 249, 189, 96, 91, 70, 188, 197, 31, 183, 62, 183, 85, 145, 189, 210, 188, 19, 62, 248, 245, 62, 189, 39, 62, 173, 60, 44, 118, 188, 189, 123, 10, 50, 190, 226, 224, 168, 189, 49, 29, 172, 60, 5, 39, 173, 189, 183, 253, 83, 189, 137, 239, 236, 189, 197, 171, 200, 188, 120, 218, 46, 190, 226, 174, 73, 61, 15, 57, 223, 189, 81, 6, 186, 60, 38, 227, 46, 62, 174, 84, 115, 189, 238, 251, 143, 188, 143, 44, 40, 62, 209, 242, 14, 190, 79, 148, 66, 189, 16, 52, 20, 60, 59, 169, 232, 189, 195, 144, 16, 190, 234, 217, 140, 189, 2, 235, 10, 190, 130, 139, 5, 188, 27, 1, 84, 60, 35, 205, 85, 61, 208, 165, 236, 61, 151, 40, 60, 189, 233, 100, 192, 61, 247, 95, 7, 189, 52, 152, 66, 189, 221, 86, 26, 190, 192, 99, 210, 60, 146, 8, 94, 62, 82, 195, 21, 190, 155, 59, 164, 61, 15, 229, 141, 189, 164, 206, 142, 190, 156, 2, 229, 62, 219, 83, 134, 61, 203, 208, 75, 189, 208, 119, 150, 189, 230, 15, 217, 61, 145, 232, 170, 190, 133, 21, 77, 190, 90, 213, 158, 189, 19, 242, 160, 61, 200, 125, 255, 61, 6, 25, 170, 190, 87, 79, 145, 61, 54, 30, 137, 61, 196, 178, 212, 60, 181, 94, 157, 190, 25, 226, 143, 62, 87, 41, 53, 62, 250, 37, 144, 62, 185, 36, 72, 61, 45, 154, 91, 189, 115, 186, 38, 62, 5, 104, 168, 190, 127, 94, 63, 61, 144, 230, 152, 61, 46, 22, 193, 61, 99, 54, 47, 190, 8, 199, 150, 62, 45, 13, 17, 62, 153, 202, 179, 189, 160, 33, 117, 189, 147, 221, 104, 189, 133, 65, 22, 62, 50, 170, 2, 61, 184, 232, 42, 62, 137, 173, 53, 190, 186, 169, 148, 188, 62, 2, 221, 189, 60, 147, 23, 61, 206, 147, 91, 61, 133, 176, 6, 62, 217, 46, 224, 189, 86, 128, 225, 60, 202, 153, 219, 60, 64, 226, 6, 62, 30, 147, 222, 189, 162, 94, 0, 189, 167, 252, 113, 61, 10, 255, 35, 62, 49, 34, 169, 61, 248, 164, 71, 189, 72, 160, 87, 188, 141, 168, 249, 187, 183, 47, 145, 189, 166, 13, 151, 189, 31, 33, 205, 189, 75, 158, 10, 190, 12, 3, 30, 189, 203, 53, 81, 61, 166, 252, 149, 60, 152, 163, 171, 189, 210, 249, 234, 61, 201, 52, 3, 62, 37, 223, 211, 61, 17, 98, 153, 60, 171, 223, 46, 189, 52, 74, 91, 188, 82, 197, 32, 190, 246, 72, 141, 62, 181, 75, 228, 61, 71, 197, 247, 61, 145, 123, 247, 189, 200, 96, 193, 189, 43, 139, 133, 62, 194, 181, 190, 58, 189, 198, 174, 62, 239, 217, 74, 62, 25, 91, 51, 190, 38, 117, 158, 60, 4, 109, 179, 62, 134, 93, 119, 190, 200, 246, 165, 190, 120, 34, 220, 189, 120, 87, 109, 190, 138, 122, 85, 190, 240, 54, 163, 190, 252, 234, 27, 62, 241, 15, 183, 190, 146, 43, 233, 188, 184, 27, 88, 190, 13, 119, 87, 188, 229, 148, 165, 190, 217, 202, 140, 190, 35, 229, 148, 62, 11, 100, 126, 62, 113, 115, 72, 61, 54, 36, 221, 189, 58, 219, 41, 190, 242, 244, 243, 60, 100, 242, 141, 189, 145, 90, 84, 62, 200, 15, 200, 62, 54, 208, 189, 61, 224, 2, 19, 190, 120, 168, 252, 184, 138, 92, 106, 62, 154, 45, 50, 62, 190, 243, 229, 61, 183, 181, 15, 189, 62, 95, 177, 61, 80, 108, 160, 62, 78, 20, 137, 62, 206, 236, 3, 191, 220, 91, 251, 60, 111, 228, 44, 190, 34, 101, 164, 61, 100, 13, 166, 189, 205, 80, 109, 190, 121, 72, 105, 62, 120, 16, 41, 191, 150, 195, 189, 61, 87, 38, 3, 190, 222, 142, 41, 190, 27, 148, 83, 189, 96, 65, 96, 190, 203, 53, 216, 189, 86, 184, 73, 190, 168, 74, 164, 60, 255, 124, 53, 190, 77, 109, 126, 61, 159, 124, 157, 189, 246, 202, 69, 61, 210, 116, 233, 187, 17, 52, 212, 187, 55, 163, 15, 61, 58, 183, 184, 189, 191, 145, 37, 60, 170, 58, 25, 59, 188, 124, 231, 59, 142, 53, 123, 62, 152, 164, 31, 190, 192, 113, 7, 62, 220, 139, 2, 62, 104, 24, 232, 189, 192, 90, 48, 190, 150, 92, 81, 190, 179, 101, 158, 62, 47, 53, 55, 61, 152, 160, 14, 189, 207, 234, 142, 61, 232, 66, 75, 61, 226, 53, 213, 187, 151, 165, 25, 62, 130, 52, 13, 190, 111, 183, 107, 190, 226, 183, 148, 188, 173, 191, 32, 190, 56, 9, 191, 190, 42, 148, 40, 62, 214, 149, 147, 190, 101, 24, 3, 191, 128, 170, 78, 61, 50, 99, 47, 62, 116, 126, 152, 190, 251, 248, 41, 62, 70, 107, 138, 62, 255, 48, 252, 190, 32, 217, 233, 61, 128, 45, 63, 189, 37, 3, 149, 62, 64, 180, 133, 190, 95, 130, 74, 191, 132, 202, 206, 190, 225, 27, 78, 189, 247, 220, 172, 60, 73, 108, 167, 190, 183, 212, 66, 190, 108, 89, 136, 62, 176, 93, 132, 190, 144, 244, 159, 190, 38, 132, 231, 61, 187, 93, 219, 190, 168, 255, 26, 191, 184, 119, 26, 191, 136, 7, 157, 61, 238, 142, 76, 62, 59, 47, 208, 62, 29, 19, 151, 62, 88, 137, 204, 189, 203, 28, 9, 62, 47, 104, 146, 61, 92, 18, 247, 61, 191, 235, 195, 188, 84, 99, 2, 61, 236, 134, 186, 61, 224, 155, 19, 190, 185, 161, 45, 190, 70, 75, 37, 62, 113, 71, 46, 62, 222, 138, 18, 190, 5, 107, 31, 60, 32, 41, 37, 190, 57, 231, 208, 189, 147, 43, 236, 59, 6, 17, 10, 190, 235, 237, 49, 190, 52, 39, 155, 188, 245, 34, 245, 189, 6, 112, 157, 187, 110, 95, 16, 190, 173, 244, 179, 189, 196, 131, 181, 188, 182, 238, 225, 189, 168, 108, 185, 189, 135, 249, 56, 57, 185, 191, 11, 62, 0, 161, 18, 190, 148, 31, 164, 59, 68, 80, 13, 61, 33, 159, 167, 60, 152, 35, 66, 62, 163, 5, 149, 62, 97, 196, 150, 190, 140, 142, 225, 189, 1, 203, 174, 62, 93, 61, 36, 190, 47, 247, 0, 62, 196, 209, 8, 61, 37, 61, 85, 61, 174, 155, 4, 190, 146, 58, 152, 189, 198, 165, 56, 190, 192, 221, 71, 189, 32, 109, 144, 62, 225, 198, 197, 190, 248, 188, 255, 62, 117, 233, 26, 62, 43, 62, 217, 189, 109, 86, 157, 190, 22, 82, 0, 190, 226, 80, 139, 190, 234, 5, 99, 190, 230, 255, 228, 189, 200, 223, 220, 61, 190, 251, 208, 61, 233, 122, 18, 190, 69, 177, 232, 61, 34, 242, 130, 190, 22, 51, 213, 188, 35, 244, 0, 61, 144, 189, 25, 185, 177, 8, 153, 189, 224, 123, 128, 190, 47, 187, 178, 188, 117, 196, 135, 190, 163, 60, 139, 61, 11, 52, 65, 189, 64, 223, 242, 61, 237, 79, 15, 62, 115, 107, 73, 188, 162, 233, 29, 62, 144, 131, 146, 60, 214, 103, 134, 189, 26, 107, 21, 60, 86, 104, 223, 189, 151, 193, 109, 61, 81, 106, 247, 61, 219, 142, 109, 62, 142, 93, 72, 189, 140, 123, 226, 60, 91, 68, 86, 62, 127, 190, 25, 189, 213, 213, 37, 190, 223, 171, 170, 190, 21, 189, 173, 61, 62, 83, 11, 61, 57, 115, 144, 189, 104, 119, 215, 60, 146, 234, 47, 62, 182, 84, 37, 189, 54, 90, 23, 62, 234, 195, 210, 189, 26, 124, 250, 190, 227, 170, 252, 188, 35, 239, 253, 62, 215, 175, 168, 61, 61, 122, 11, 189, 181, 202, 143, 189, 241, 155, 33, 190, 67, 84, 156, 62, 138, 212, 255, 61, 71, 79, 34, 62, 29, 248, 122, 189, 109, 251, 68, 62, 162, 75, 126, 190, 171, 117, 134, 62, 162, 53, 33, 62, 228, 12, 115, 61, 94, 51, 83, 62, 102, 2, 33, 190, 26, 52, 131, 190, 121, 168, 97, 62, 255, 6, 50, 61, 143, 88, 29, 191, 101, 117, 213, 62, 213, 148, 57, 61, 42, 56, 35, 62, 48, 0, 66, 62, 52, 121, 92, 62, 18, 193, 29, 61, 116, 132, 173, 189, 146, 56, 208, 190, 68, 157, 166, 189, 25, 94, 19, 62, 211, 101, 21, 62, 199, 231, 162, 62, 54, 127, 41, 61, 122, 224, 128, 61, 45, 82, 76, 62, 76, 246, 109, 188, 49, 67, 86, 188, 154, 219, 69, 61, 136, 109, 15, 62, 202, 47, 95, 187, 160, 153, 185, 58, 253, 149, 167, 61, 167, 202, 43, 62, 245, 40, 242, 61, 252, 147, 5, 190, 240, 146, 138, 188, 253, 42, 145, 61, 132, 136, 162, 62, 46, 114, 152, 189, 48, 46, 171, 189, 55, 112, 70, 62, 65, 197, 117, 61, 195, 125, 156, 190, 96, 151, 5, 190, 26, 0, 96, 62, 108, 14, 136, 189, 29, 123, 75, 189, 11, 134, 47, 190, 238, 203, 89, 62, 221, 25, 186, 59, 70, 174, 21, 62, 8, 131, 203, 189, 40, 87, 250, 189, 165, 15, 68, 190, 191, 237, 224, 189, 51, 126, 37, 62, 192, 5, 255, 61, 159, 65, 69, 189, 69, 22, 7, 191, 38, 222, 50, 60, 1, 148, 33, 62, 2, 252, 167, 190, 220, 225, 159, 62, 113, 11, 81, 62, 183, 184, 58, 62, 28, 163, 55, 188, 235, 214, 164, 61, 203, 99, 131, 62, 111, 125, 176, 61, 1, 215, 177, 62, 152, 120, 167, 62, 120, 186, 118, 62, 169, 215, 128, 62, 62, 196, 165, 62, 227, 161, 1, 191, 249, 25, 144, 189, 95, 200, 78, 189, 114, 236, 252, 61, 31, 204, 133, 190, 176, 142, 35, 190, 135, 118, 164, 61, 142, 165, 112, 191, 38, 30, 148, 62, 214, 8, 43, 190, 59, 11, 71, 190, 40, 110, 185, 190, 21, 189, 222, 62, 129, 35, 160, 190, 145, 242, 118, 62, 203, 248, 223, 190, 134, 170, 182, 190, 52, 170, 164, 62, 80, 126, 23, 190, 204, 120, 15, 62, 235, 28, 38, 190, 33, 213, 186, 62, 31, 157, 14, 191, 33, 82, 205, 188, 209, 156, 126, 61, 24, 183, 3, 190, 226, 251, 57, 62, 27, 2, 133, 190, 93, 5, 249, 189, 44, 167, 97, 62, 14, 174, 14, 62, 220, 255, 173, 190, 102, 246, 231, 189, 16, 151, 162, 62, 154, 97, 197, 62, 96, 55, 130, 62, 52, 191, 190, 61, 132, 90, 205, 61, 159, 37, 173, 190, 159, 79, 108, 190, 202, 58, 225, 189, 43, 74, 9, 62, 169, 103, 91, 62, 87, 114, 119, 62, 102, 245, 185, 62, 123, 106, 90, 189, 41, 200, 208, 190, 222, 101, 18, 189, 186, 73, 163, 190, 197, 236, 61, 62, 11, 160, 255, 189, 188, 36, 34, 62, 194, 175, 20, 187, 111, 237, 148, 190, 35, 132, 141, 189, 66, 182, 16, 62, 187, 85, 40, 190, 142, 131, 130, 187, 127, 104, 49, 62, 161, 211, 53, 191, 80, 254, 141, 61, 98, 122, 251, 189, 86, 121, 48, 189, 101, 153, 219, 189, 115, 128, 196, 61, 102, 203, 0, 190, 209, 105, 38, 62, 236, 212, 14, 190, 191, 6, 70, 189, 191, 58, 25, 62, 62, 234, 212, 189, 43, 213, 105, 61, 37, 7, 126, 190, 227, 17, 96, 188, 149, 138, 33, 62, 160, 2, 82, 62, 19, 78, 110, 190, 215, 117, 221, 189, 225, 247, 132, 62, 126, 187, 167, 190, 233, 63, 169, 190, 2, 138, 44, 188, 50, 248, 54, 61, 42, 7, 113, 62, 201, 129, 65, 62, 150, 81, 178, 62, 216, 207, 51, 191, 92, 11, 143, 188, 121, 40, 25, 62, 204, 13, 131, 62, 147, 50, 5, 62, 167, 198, 170, 190, 162, 198, 166, 60, 55, 180, 136, 61, 54, 65, 71, 190, 118, 13, 144, 190, 86, 96, 14, 191, 159, 200, 37, 63, 239, 89, 120, 61, 6, 52, 64, 62, 60, 172, 20, 62, 116, 233, 25, 61, 104, 221, 118, 190, 150, 215, 128, 190, 6, 124, 215, 189, 110, 88, 135, 62, 45, 218, 224, 62, 136, 203, 236, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 11, 19, 190, 37, 102, 104, 189, 108, 122, 140, 189, 73, 89, 64, 62, 157, 101, 179, 62, 95, 237, 12, 62, 232, 3, 97, 62, 242, 22, 133, 60, 218, 185, 119, 62, 83, 208, 43, 62, 117, 168, 139, 61, 222, 192, 5, 61, 55, 180, 76, 62, 96, 0, 178, 61, 44, 105, 155, 61, 224, 111, 97, 62, 242, 15, 107, 189, 108, 166, 143, 188, 253, 171, 37, 190, 31, 53, 107, 62, 254, 214, 134, 62, 20, 226, 103, 62, 160, 162, 56, 190, 190, 97, 8, 190, 40, 12, 6, 190, 231, 59, 41, 62, 164, 128, 238, 61, 59, 186, 5, 62, 162, 206, 121, 62, 177, 187, 24, 62, 223, 170, 187, 60, 173, 24, 185, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 186, 173, 61, 173, 157, 192, 189, 222, 208, 6, 63, 33, 160, 112, 189, 214, 155, 30, 187, 56, 49, 125, 62, 27, 66, 16, 63, 141, 141, 127, 62, 101, 187, 179, 190, 242, 133, 86, 62, 63, 26, 49, 191, 19, 59, 34, 190, 139, 17, 20, 63, 182, 190, 51, 190, 0, 203, 123, 61, 118, 199, 139, 59, 249, 191, 84, 189, 63, 254, 191, 190, 134, 30, 134, 189, 164, 116, 190, 62, 17, 180, 1, 63, 189, 22, 46, 59, 149, 179, 102, 191, 116, 145, 36, 189, 18, 150, 61, 189, 38, 55, 150, 187, 179, 42, 162, 190, 214, 109, 106, 61, 240, 197, 57, 63, 157, 39, 72, 191, 134, 190, 162, 190, 209, 171, 19, 191, 85, 100, 161, 189, 30, 163, 23, 187, 86, 97, 204, 190, 30, 175, 6, 190, 54, 247, 171, 190, 111, 224, 93, 190, 210, 203, 173, 61, 189, 175, 147, 62, 142, 14, 200, 190, 28, 81, 100, 190, 109, 195, 29, 62, 207, 127, 113, 62, 230, 56, 17, 63, 130, 219, 106, 190, 151, 9, 16, 62, 220, 107, 110, 190, 161, 54, 219, 188, 74, 143, 154, 62, 180, 238, 239, 60, 63, 186, 43, 189, 212, 194, 38, 61, 221, 226, 48, 190, 77, 55, 20, 62, 216, 164, 206, 189, 131, 25, 55, 63, 111, 88, 29, 190, 31, 113, 90, 190, 167, 209, 95, 190, 86, 27, 15, 62, 243, 177, 40, 61, 226, 8, 57, 62, 79, 7, 145, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 92, 246, 189, 118, 92, 73, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {90, 96, 100, 63, 250, 209, 50, 60, 142, 67, 205, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {62, 12, 219, 63, 178, 76, 106, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0044/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}