// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 217, 29, 63, 74, 224, 47, 191, 171, 173, 171, 62, 55, 168, 234, 62, 29, 202, 129, 191, 214, 8, 81, 62, 60, 32, 65, 191, 252, 193, 140, 191, 162, 185, 244, 189, 49, 188, 58, 190, 159, 61, 241, 61, 209, 7, 51, 63, 183, 223, 235, 62, 205, 24, 140, 191, 119, 138, 26, 191, 138, 234, 32, 63, 142, 126, 32, 63, 96, 246, 214, 62, 11, 121, 100, 62, 152, 245, 183, 190, 235, 1, 157, 188, 44, 234, 142, 62, 230, 238, 207, 62, 217, 247, 201, 190, 178, 137, 242, 190, 222, 238, 202, 190, 54, 19, 233, 62, 86, 128, 136, 191, 107, 83, 95, 60, 120, 36, 159, 189, 233, 103, 146, 190, 78, 249, 100, 63, 181, 247, 46, 63, 254, 22, 208, 190, 217, 71, 137, 61, 129, 128, 164, 62, 170, 199, 35, 62, 206, 85, 18, 188, 144, 176, 28, 187, 117, 69, 254, 61, 153, 225, 59, 191, 155, 167, 216, 61, 177, 226, 102, 190, 221, 0, 76, 63, 221, 161, 56, 62, 106, 241, 220, 62, 74, 39, 172, 191, 190, 66, 121, 190, 229, 115, 193, 189, 130, 115, 27, 63, 143, 203, 244, 190, 181, 191, 43, 191, 162, 40, 20, 190, 87, 227, 14, 190, 239, 172, 133, 191, 187, 32, 125, 63, 177, 217, 147, 61, 64, 81, 168, 190, 106, 149, 78, 190, 74, 253, 8, 63, 53, 23, 86, 63, 161, 152, 142, 63, 177, 234, 64, 62, 6, 123, 47, 191, 191, 25, 148, 191, 19, 233, 175, 189, 236, 214, 92, 63, 146, 167, 64, 63, 143, 54, 115, 62, 220, 235, 38, 191, 203, 138, 136, 191, 218, 234, 167, 190, 33, 184, 25, 62, 249, 95, 72, 191, 185, 69, 140, 62, 188, 116, 145, 190, 113, 254, 207, 62, 190, 195, 61, 191, 112, 216, 181, 62, 21, 70, 155, 191, 114, 149, 107, 190, 55, 178, 206, 62, 3, 67, 181, 63, 250, 135, 243, 62, 221, 68, 245, 190, 148, 84, 172, 189, 253, 156, 4, 63, 222, 84, 158, 189, 25, 182, 3, 191, 16, 26, 220, 62, 27, 215, 8, 191, 19, 128, 41, 191, 3, 52, 134, 62, 155, 166, 145, 62, 22, 118, 222, 190, 114, 80, 223, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {196, 31, 255, 190, 82, 41, 161, 62, 95, 106, 165, 62, 213, 76, 145, 190, 243, 50, 28, 191, 184, 239, 109, 62, 212, 134, 15, 191, 44, 91, 225, 61, 13, 81, 42, 189, 81, 40, 146, 62, 191, 80, 148, 190, 45, 194, 34, 191, 88, 211, 134, 190, 185, 220, 112, 61, 242, 238, 45, 63, 100, 10, 18, 61, 218, 6, 245, 189, 121, 226, 124, 62, 62, 182, 152, 62, 48, 171, 79, 190, 40, 253, 72, 191, 230, 68, 12, 190, 8, 9, 231, 62, 132, 102, 224, 62, 21, 33, 64, 62, 85, 62, 202, 190, 207, 135, 77, 62, 32, 227, 142, 190, 220, 41, 21, 63, 197, 2, 151, 190, 76, 105, 158, 190, 222, 187, 13, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 224, 198, 189, 153, 22, 242, 61, 122, 103, 130, 189, 66, 133, 136, 61, 76, 139, 104, 61, 169, 120, 139, 189, 118, 166, 151, 188, 81, 2, 135, 187, 168, 36, 130, 60, 137, 17, 11, 189, 75, 51, 65, 190, 254, 162, 41, 188, 253, 160, 50, 62, 84, 7, 76, 190, 59, 12, 100, 61, 113, 59, 182, 189, 80, 199, 24, 189, 191, 10, 43, 189, 116, 22, 253, 188, 53, 219, 179, 189, 158, 85, 34, 62, 63, 247, 226, 61, 54, 105, 208, 189, 156, 49, 120, 61, 125, 205, 13, 62, 66, 182, 65, 189, 62, 236, 150, 189, 232, 252, 138, 61, 240, 168, 198, 189, 6, 237, 9, 62, 111, 37, 40, 190, 21, 140, 26, 190, 193, 182, 221, 59, 94, 110, 1, 190, 101, 220, 229, 189, 21, 29, 218, 60, 38, 217, 235, 189, 166, 96, 46, 189, 125, 66, 70, 61, 4, 45, 59, 189, 248, 148, 252, 61, 230, 39, 152, 61, 168, 2, 255, 189, 51, 150, 145, 189, 189, 197, 218, 189, 58, 214, 3, 189, 160, 101, 177, 189, 14, 248, 28, 190, 255, 163, 237, 189, 186, 121, 22, 189, 166, 187, 234, 60, 94, 214, 86, 189, 144, 47, 13, 189, 63, 37, 24, 62, 71, 220, 143, 189, 134, 86, 4, 61, 166, 128, 236, 60, 154, 72, 224, 61, 61, 185, 185, 189, 234, 182, 169, 61, 190, 122, 6, 190, 41, 16, 194, 61, 202, 154, 46, 190, 243, 44, 210, 61, 199, 171, 160, 62, 210, 246, 43, 62, 199, 120, 107, 191, 245, 189, 128, 190, 37, 52, 90, 190, 112, 0, 145, 190, 251, 62, 167, 59, 77, 32, 253, 61, 5, 55, 184, 61, 191, 207, 104, 190, 81, 33, 113, 190, 71, 87, 184, 190, 229, 190, 253, 189, 215, 38, 116, 190, 185, 159, 33, 62, 135, 44, 180, 62, 11, 190, 199, 61, 156, 254, 65, 62, 140, 171, 119, 190, 196, 252, 197, 190, 158, 77, 3, 192, 227, 180, 88, 191, 171, 222, 89, 62, 75, 243, 212, 190, 32, 180, 53, 61, 211, 81, 54, 62, 211, 8, 187, 61, 203, 228, 73, 191, 224, 32, 139, 62, 3, 120, 204, 190, 116, 124, 49, 191, 179, 128, 131, 189, 123, 216, 28, 62, 138, 123, 122, 189, 61, 109, 27, 191, 25, 147, 36, 190, 138, 128, 67, 191, 131, 141, 130, 60, 47, 108, 151, 189, 253, 53, 102, 62, 112, 199, 27, 58, 178, 19, 62, 191, 207, 235, 116, 190, 169, 134, 35, 190, 148, 213, 114, 61, 120, 6, 136, 189, 133, 26, 17, 189, 234, 215, 221, 190, 255, 79, 81, 62, 102, 14, 222, 61, 202, 136, 67, 61, 208, 110, 147, 61, 130, 69, 142, 61, 47, 98, 63, 62, 200, 196, 153, 60, 129, 33, 245, 190, 180, 203, 167, 61, 254, 169, 51, 62, 30, 98, 10, 189, 233, 8, 11, 190, 206, 37, 116, 60, 44, 43, 77, 60, 142, 157, 2, 190, 169, 96, 204, 188, 141, 231, 219, 189, 36, 129, 122, 189, 173, 55, 23, 62, 50, 143, 42, 190, 240, 222, 194, 188, 195, 47, 23, 190, 79, 113, 29, 59, 111, 1, 147, 189, 29, 199, 226, 188, 69, 116, 89, 61, 153, 47, 184, 189, 172, 240, 175, 189, 186, 129, 11, 190, 217, 255, 172, 189, 227, 6, 55, 60, 11, 12, 249, 62, 228, 212, 101, 190, 5, 27, 137, 190, 64, 249, 95, 62, 44, 132, 124, 189, 239, 162, 146, 191, 248, 208, 242, 187, 118, 198, 53, 190, 32, 98, 161, 62, 154, 142, 201, 61, 67, 138, 151, 190, 138, 123, 241, 62, 139, 164, 138, 191, 17, 186, 123, 62, 219, 133, 246, 189, 5, 201, 139, 190, 141, 42, 18, 190, 255, 227, 101, 62, 44, 120, 59, 61, 207, 203, 116, 61, 234, 100, 213, 61, 85, 182, 236, 188, 153, 9, 113, 61, 208, 99, 150, 189, 222, 6, 143, 62, 161, 107, 61, 190, 28, 209, 99, 62, 121, 19, 45, 190, 8, 81, 43, 61, 70, 28, 206, 189, 123, 126, 2, 190, 16, 209, 226, 188, 32, 31, 131, 60, 96, 255, 156, 60, 177, 148, 160, 62, 88, 16, 22, 62, 134, 32, 42, 189, 245, 245, 170, 191, 182, 13, 0, 63, 70, 182, 143, 59, 119, 119, 221, 189, 238, 75, 99, 62, 227, 129, 142, 62, 121, 149, 149, 61, 102, 86, 153, 191, 85, 75, 167, 189, 29, 61, 97, 60, 59, 212, 62, 62, 235, 111, 235, 61, 12, 145, 246, 60, 36, 163, 195, 61, 79, 37, 17, 191, 167, 165, 43, 62, 174, 238, 62, 62, 241, 208, 107, 59, 27, 17, 2, 190, 237, 145, 89, 59, 157, 52, 235, 61, 174, 191, 46, 190, 24, 60, 215, 189, 240, 61, 24, 190, 249, 222, 212, 188, 74, 171, 151, 189, 36, 122, 1, 190, 223, 241, 99, 62, 207, 70, 203, 62, 86, 10, 159, 59, 94, 32, 227, 190, 97, 226, 186, 62, 149, 1, 124, 191, 74, 118, 191, 190, 207, 226, 99, 61, 174, 234, 19, 191, 140, 185, 180, 59, 64, 161, 239, 189, 104, 205, 31, 61, 193, 48, 146, 191, 93, 54, 80, 62, 200, 41, 29, 190, 43, 133, 25, 190, 66, 162, 61, 189, 129, 106, 150, 190, 211, 29, 107, 62, 217, 107, 70, 191, 218, 209, 59, 61, 120, 32, 25, 62, 93, 251, 137, 190, 15, 238, 107, 62, 102, 78, 35, 189, 46, 228, 10, 190, 113, 6, 34, 62, 149, 116, 158, 61, 0, 219, 237, 189, 166, 46, 195, 61, 24, 33, 31, 62, 126, 201, 39, 190, 66, 99, 235, 62, 244, 180, 111, 62, 60, 255, 177, 60, 143, 210, 245, 189, 7, 88, 146, 62, 217, 91, 101, 190, 226, 171, 91, 191, 134, 97, 71, 189, 49, 14, 138, 190, 170, 139, 27, 190, 44, 110, 114, 190, 22, 84, 189, 187, 213, 137, 177, 190, 242, 4, 13, 60, 62, 180, 127, 190, 61, 209, 229, 190, 117, 175, 120, 190, 234, 104, 153, 190, 206, 174, 67, 190, 254, 201, 226, 189, 132, 30, 234, 190, 202, 176, 196, 190, 53, 239, 23, 62, 207, 165, 183, 60, 170, 196, 51, 60, 228, 108, 173, 60, 33, 117, 136, 62, 44, 51, 25, 190, 37, 55, 38, 190, 201, 164, 35, 61, 96, 115, 218, 60, 26, 98, 139, 62, 39, 45, 179, 190, 127, 29, 1, 62, 67, 139, 188, 61, 185, 62, 137, 62, 48, 179, 100, 190, 218, 182, 139, 190, 44, 226, 143, 62, 99, 106, 187, 61, 5, 220, 108, 190, 194, 206, 247, 187, 133, 200, 49, 188, 88, 113, 156, 190, 145, 81, 113, 191, 98, 208, 192, 60, 64, 67, 24, 62, 59, 171, 45, 62, 73, 121, 167, 190, 182, 61, 149, 62, 0, 140, 47, 60, 86, 166, 128, 190, 10, 202, 114, 62, 71, 126, 104, 61, 252, 68, 158, 61, 54, 89, 28, 60, 136, 224, 180, 61, 229, 62, 84, 61, 56, 97, 140, 189, 107, 229, 99, 190, 119, 14, 30, 190, 166, 80, 49, 62, 7, 20, 25, 190, 243, 156, 166, 188, 9, 249, 19, 187, 174, 93, 110, 60, 213, 209, 157, 59, 122, 157, 210, 190, 235, 37, 183, 61, 100, 170, 171, 191, 164, 168, 192, 62, 53, 244, 211, 61, 51, 33, 178, 189, 5, 57, 0, 188, 29, 123, 64, 62, 103, 11, 93, 62, 134, 206, 231, 191, 209, 50, 255, 189, 148, 185, 81, 62, 114, 48, 216, 62, 191, 251, 14, 62, 229, 231, 176, 190, 10, 145, 171, 190, 183, 139, 181, 62, 111, 203, 151, 191, 90, 7, 239, 190, 180, 144, 81, 62, 225, 41, 119, 189, 12, 183, 102, 62, 91, 224, 207, 189, 116, 199, 164, 62, 109, 163, 95, 191, 144, 210, 155, 190, 224, 229, 36, 61, 114, 207, 173, 190, 58, 245, 155, 62, 169, 83, 146, 190, 194, 38, 3, 190, 164, 195, 157, 62, 34, 166, 241, 61, 0, 237, 22, 191, 77, 253, 205, 62, 17, 148, 44, 63, 150, 51, 128, 62, 108, 132, 76, 62, 96, 240, 113, 59, 28, 176, 144, 187, 235, 202, 144, 190, 19, 125, 163, 190, 123, 56, 206, 190, 209, 63, 234, 190, 30, 114, 123, 61, 72, 106, 171, 190, 125, 224, 15, 62, 28, 237, 155, 189, 83, 3, 234, 190, 106, 188, 38, 189, 66, 224, 216, 190, 211, 28, 129, 62, 192, 183, 134, 189, 98, 111, 198, 62, 58, 1, 102, 60, 241, 194, 209, 190, 165, 107, 206, 190, 111, 161, 223, 187, 47, 200, 37, 189, 111, 36, 31, 189, 177, 120, 57, 62, 160, 124, 186, 191, 106, 182, 140, 61, 5, 244, 12, 61, 206, 148, 0, 191, 52, 62, 178, 189, 161, 171, 11, 62, 227, 96, 50, 62, 22, 199, 130, 62, 21, 122, 131, 190, 113, 226, 236, 61, 58, 133, 20, 62, 133, 239, 17, 191, 204, 235, 42, 190, 88, 115, 167, 188, 60, 25, 153, 187, 195, 225, 135, 62, 242, 189, 74, 62, 10, 162, 74, 63, 16, 93, 152, 61, 96, 222, 3, 191, 200, 37, 137, 189, 141, 9, 1, 190, 163, 99, 138, 190, 86, 68, 214, 61, 76, 58, 83, 190, 250, 31, 30, 62, 191, 216, 129, 189, 211, 30, 150, 61, 32, 238, 205, 190, 170, 254, 211, 60, 12, 146, 136, 62, 238, 187, 33, 190, 55, 162, 211, 62, 102, 160, 81, 62, 101, 100, 61, 61, 199, 152, 25, 62, 109, 172, 34, 62, 103, 68, 152, 189, 74, 208, 129, 191, 156, 196, 226, 60, 199, 235, 178, 191, 204, 192, 147, 190, 4, 3, 222, 190, 109, 143, 135, 62, 84, 247, 17, 191, 0, 162, 115, 62, 29, 250, 103, 190, 142, 142, 22, 191, 39, 14, 207, 61, 42, 204, 43, 188, 93, 191, 184, 61, 234, 212, 158, 190, 137, 199, 37, 62, 20, 248, 234, 190, 142, 158, 70, 189, 25, 34, 199, 61, 202, 211, 65, 62, 148, 109, 240, 189, 168, 252, 26, 61, 109, 133, 53, 190, 228, 105, 90, 62, 246, 181, 41, 62, 72, 114, 104, 190, 136, 87, 138, 62, 107, 10, 85, 191, 252, 141, 244, 61, 217, 180, 79, 62, 43, 93, 160, 60, 239, 227, 238, 60, 61, 216, 30, 189, 119, 182, 148, 189, 14, 52, 147, 62, 5, 227, 182, 189, 144, 93, 49, 189, 1, 79, 57, 61, 223, 66, 191, 190, 194, 193, 210, 190, 65, 217, 240, 61, 95, 126, 207, 61, 168, 23, 61, 62, 35, 31, 191, 188, 244, 184, 3, 189, 126, 228, 218, 190, 59, 193, 222, 190, 255, 121, 217, 189, 47, 63, 22, 191, 170, 245, 16, 62, 132, 200, 234, 61, 163, 49, 168, 190, 22, 106, 206, 189, 175, 172, 199, 190, 0, 97, 89, 62, 226, 59, 196, 60, 136, 172, 207, 59, 32, 23, 54, 189, 11, 207, 82, 62, 206, 104, 157, 191, 44, 18, 190, 62, 119, 232, 40, 190, 91, 169, 107, 62, 13, 201, 195, 189, 160, 130, 98, 62, 144, 161, 138, 189, 247, 203, 47, 62, 38, 49, 40, 191, 181, 228, 125, 190, 9, 23, 146, 61, 148, 119, 191, 191, 102, 156, 195, 62, 131, 173, 92, 189, 136, 30, 38, 61, 15, 83, 98, 189, 160, 251, 27, 190, 196, 1, 88, 62, 128, 23, 244, 60, 126, 48, 13, 62, 158, 192, 215, 61, 223, 10, 43, 190, 110, 217, 45, 62, 129, 124, 89, 189, 147, 78, 117, 190, 180, 19, 100, 187, 6, 94, 212, 190, 48, 189, 194, 187, 190, 145, 3, 61, 40, 187, 163, 189, 218, 246, 204, 189, 107, 49, 18, 190, 134, 160, 32, 62, 45, 232, 152, 61, 13, 1, 16, 188, 49, 214, 100, 190, 38, 120, 69, 62, 154, 35, 87, 190, 164, 13, 144, 61, 198, 31, 61, 61, 37, 27, 249, 61, 70, 62, 3, 190, 181, 226, 10, 190, 11, 210, 150, 62, 94, 151, 136, 189, 70, 132, 59, 62, 9, 224, 96, 60, 63, 138, 238, 60, 254, 120, 104, 188, 123, 10, 50, 190, 226, 224, 168, 189, 49, 29, 172, 60, 5, 39, 173, 189, 183, 253, 83, 189, 137, 239, 236, 189, 197, 171, 200, 188, 120, 218, 46, 190, 226, 174, 73, 61, 15, 57, 223, 189, 81, 6, 186, 60, 38, 227, 46, 62, 174, 84, 115, 189, 238, 251, 143, 188, 143, 44, 40, 62, 209, 242, 14, 190, 79, 148, 66, 189, 16, 52, 20, 60, 59, 169, 232, 189, 195, 144, 16, 190, 234, 217, 140, 189, 2, 235, 10, 190, 130, 139, 5, 188, 27, 1, 84, 60, 35, 205, 85, 61, 208, 165, 236, 61, 151, 40, 60, 189, 233, 100, 192, 61, 247, 95, 7, 189, 52, 152, 66, 189, 221, 86, 26, 190, 192, 99, 210, 60, 157, 138, 32, 62, 193, 143, 30, 190, 166, 5, 128, 190, 133, 241, 226, 189, 29, 175, 217, 190, 22, 138, 199, 62, 219, 83, 134, 61, 209, 85, 151, 187, 148, 51, 157, 189, 23, 233, 70, 62, 38, 238, 185, 190, 124, 126, 13, 190, 90, 213, 158, 189, 110, 252, 140, 61, 39, 75, 42, 62, 80, 192, 245, 190, 61, 254, 6, 62, 209, 84, 137, 61, 75, 236, 193, 61, 241, 65, 157, 190, 44, 89, 20, 62, 146, 246, 49, 60, 248, 140, 144, 62, 115, 231, 43, 190, 164, 129, 222, 189, 136, 121, 233, 61, 19, 40, 198, 190, 249, 225, 69, 190, 179, 161, 73, 61, 47, 237, 101, 61, 239, 182, 23, 190, 139, 195, 95, 62, 45, 13, 17, 62, 153, 202, 179, 189, 160, 33, 117, 189, 147, 221, 104, 189, 133, 65, 22, 62, 50, 170, 2, 61, 184, 232, 42, 62, 137, 173, 53, 190, 186, 169, 148, 188, 62, 2, 221, 189, 60, 147, 23, 61, 206, 147, 91, 61, 133, 176, 6, 62, 217, 46, 224, 189, 86, 128, 225, 60, 202, 153, 219, 60, 64, 226, 6, 62, 30, 147, 222, 189, 162, 94, 0, 189, 167, 252, 113, 61, 10, 255, 35, 62, 49, 34, 169, 61, 248, 164, 71, 189, 72, 160, 87, 188, 141, 168, 249, 187, 183, 47, 145, 189, 166, 13, 151, 189, 31, 33, 205, 189, 75, 158, 10, 190, 12, 3, 30, 189, 203, 53, 81, 61, 166, 252, 149, 60, 92, 37, 206, 189, 24, 220, 100, 61, 226, 244, 173, 61, 5, 188, 14, 62, 114, 87, 253, 61, 211, 219, 48, 188, 52, 74, 91, 188, 103, 59, 194, 189, 80, 231, 140, 62, 253, 185, 182, 61, 227, 205, 200, 61, 156, 3, 5, 190, 200, 96, 193, 189, 196, 224, 9, 62, 29, 88, 55, 187, 9, 250, 176, 62, 67, 81, 108, 62, 114, 207, 42, 190, 75, 182, 62, 60, 247, 214, 194, 62, 115, 87, 13, 191, 181, 151, 227, 189, 58, 191, 184, 189, 195, 10, 204, 190, 227, 228, 123, 190, 88, 222, 39, 190, 152, 198, 27, 62, 167, 30, 11, 191, 156, 211, 43, 189, 40, 196, 53, 190, 57, 149, 44, 60, 192, 169, 144, 190, 123, 233, 156, 190, 59, 19, 97, 62, 104, 95, 40, 62, 96, 68, 106, 61, 57, 236, 132, 190, 192, 122, 237, 189, 242, 244, 243, 60, 56, 176, 64, 189, 31, 199, 65, 62, 159, 179, 10, 63, 100, 224, 31, 61, 213, 167, 61, 190, 120, 168, 252, 184, 245, 136, 188, 61, 144, 166, 124, 62, 69, 67, 110, 60, 228, 57, 154, 189, 233, 59, 102, 62, 251, 3, 13, 63, 186, 66, 136, 62, 90, 36, 93, 191, 181, 48, 76, 62, 189, 87, 22, 190, 248, 145, 201, 189, 180, 95, 6, 190, 156, 30, 73, 190, 160, 245, 25, 62, 129, 22, 73, 191, 191, 245, 151, 61, 233, 242, 243, 189, 154, 240, 35, 190, 206, 148, 4, 189, 7, 205, 209, 61, 12, 92, 127, 190, 189, 178, 158, 190, 153, 255, 28, 62, 160, 34, 87, 190, 141, 240, 18, 62, 159, 124, 157, 189, 233, 27, 163, 189, 126, 139, 177, 188, 136, 235, 134, 190, 95, 223, 141, 61, 81, 46, 228, 189, 191, 145, 37, 60, 219, 41, 61, 190, 102, 8, 51, 188, 93, 238, 14, 62, 70, 157, 55, 190, 160, 200, 205, 61, 74, 99, 221, 60, 11, 69, 133, 189, 246, 201, 3, 62, 234, 147, 141, 190, 59, 157, 151, 62, 98, 72, 134, 189, 234, 123, 218, 189, 220, 238, 55, 61, 126, 229, 179, 189, 241, 210, 46, 62, 219, 232, 93, 62, 234, 183, 151, 188, 162, 151, 11, 191, 50, 61, 107, 62, 107, 237, 251, 188, 100, 214, 134, 190, 69, 37, 121, 62, 70, 49, 174, 190, 56, 201, 108, 191, 173, 63, 9, 190, 50, 99, 47, 62, 237, 175, 217, 190, 221, 46, 49, 62, 124, 197, 28, 62, 66, 83, 113, 191, 194, 221, 176, 189, 128, 45, 63, 189, 158, 10, 219, 62, 164, 80, 217, 190, 147, 244, 21, 191, 214, 14, 14, 191, 49, 2, 146, 190, 81, 105, 140, 190, 26, 113, 173, 190, 220, 212, 66, 190, 43, 88, 177, 62, 110, 255, 13, 191, 23, 230, 106, 190, 138, 19, 61, 62, 5, 3, 25, 191, 9, 138, 162, 190, 213, 163, 22, 191, 175, 253, 98, 61, 97, 12, 42, 62, 209, 79, 224, 62, 92, 24, 138, 62, 88, 137, 204, 189, 203, 28, 9, 62, 47, 104, 146, 61, 92, 18, 247, 61, 191, 235, 195, 188, 84, 99, 2, 61, 236, 134, 186, 61, 224, 155, 19, 190, 185, 161, 45, 190, 70, 75, 37, 62, 113, 71, 46, 62, 222, 138, 18, 190, 5, 107, 31, 60, 32, 41, 37, 190, 57, 231, 208, 189, 147, 43, 236, 59, 6, 17, 10, 190, 235, 237, 49, 190, 52, 39, 155, 188, 245, 34, 245, 189, 6, 112, 157, 187, 110, 95, 16, 190, 173, 244, 179, 189, 196, 131, 181, 188, 182, 238, 225, 189, 168, 108, 185, 189, 135, 249, 56, 57, 185, 191, 11, 62, 0, 161, 18, 190, 148, 31, 164, 59, 68, 80, 13, 61, 33, 159, 167, 60, 17, 141, 56, 62, 84, 169, 3, 63, 172, 92, 200, 190, 249, 249, 183, 190, 28, 77, 122, 62, 20, 66, 148, 190, 47, 247, 0, 62, 155, 156, 229, 189, 109, 72, 101, 189, 16, 76, 171, 190, 24, 87, 240, 190, 85, 147, 220, 190, 192, 221, 71, 189, 40, 77, 5, 63, 75, 214, 51, 191, 210, 0, 28, 63, 202, 211, 27, 61, 214, 2, 246, 190, 5, 53, 242, 190, 91, 201, 181, 190, 95, 87, 52, 191, 1, 82, 19, 191, 65, 211, 6, 190, 72, 58, 101, 61, 247, 201, 171, 62, 126, 79, 140, 190, 2, 194, 85, 62, 112, 225, 21, 191, 41, 11, 98, 189, 8, 94, 7, 190, 54, 172, 25, 190, 90, 119, 25, 190, 4, 117, 228, 188, 226, 2, 70, 190, 77, 225, 134, 190, 50, 132, 221, 61, 119, 93, 71, 61, 29, 30, 235, 61, 237, 79, 15, 62, 84, 39, 26, 189, 199, 143, 142, 61, 177, 135, 40, 190, 142, 199, 35, 190, 219, 165, 208, 189, 86, 104, 223, 189, 151, 26, 195, 189, 86, 17, 60, 61, 244, 160, 2, 62, 193, 167, 47, 60, 93, 157, 148, 61, 232, 17, 111, 61, 22, 70, 155, 189, 12, 214, 107, 61, 57, 229, 133, 190, 20, 151, 20, 59, 202, 99, 98, 61, 61, 236, 101, 190, 151, 162, 183, 61, 198, 213, 90, 61, 109, 79, 119, 60, 227, 140, 5, 62, 250, 172, 145, 189, 69, 222, 55, 191, 200, 184, 134, 61, 229, 0, 9, 63, 237, 248, 17, 62, 120, 188, 100, 61, 36, 40, 170, 189, 107, 174, 104, 190, 131, 78, 104, 62, 138, 212, 255, 61, 47, 234, 239, 61, 132, 86, 68, 189, 47, 129, 158, 60, 149, 84, 113, 190, 144, 106, 163, 62, 162, 53, 33, 62, 86, 80, 87, 62, 41, 174, 63, 62, 108, 53, 63, 190, 29, 8, 113, 190, 237, 124, 246, 61, 127, 120, 71, 188, 241, 222, 28, 191, 96, 227, 2, 63, 192, 137, 169, 189, 150, 230, 250, 61, 124, 54, 74, 62, 239, 176, 139, 62, 42, 202, 5, 189, 101, 240, 128, 189, 205, 63, 207, 190, 53, 157, 140, 189, 3, 32, 11, 62, 91, 214, 24, 62, 29, 248, 156, 62, 142, 13, 46, 62, 30, 44, 75, 189, 206, 225, 141, 62, 232, 133, 129, 61, 17, 16, 242, 60, 164, 117, 194, 61, 136, 109, 15, 62, 250, 234, 194, 189, 76, 111, 130, 60, 148, 101, 111, 188, 127, 187, 60, 62, 28, 208, 2, 62, 252, 147, 5, 190, 199, 141, 91, 189, 105, 51, 241, 61, 250, 34, 115, 62, 145, 157, 9, 190, 219, 254, 187, 188, 173, 209, 80, 62, 93, 110, 203, 61, 136, 58, 246, 189, 1, 161, 10, 61, 54, 14, 75, 62, 69, 209, 146, 189, 188, 147, 183, 189, 197, 203, 111, 190, 117, 34, 185, 61, 159, 185, 201, 61, 19, 136, 72, 62, 215, 19, 221, 188, 32, 50, 238, 189, 36, 243, 185, 189, 98, 153, 34, 190, 81, 212, 198, 61, 77, 247, 236, 61, 20, 77, 56, 189, 155, 36, 23, 191, 76, 29, 139, 61, 1, 148, 33, 62, 177, 5, 167, 190, 237, 131, 147, 62, 84, 209, 177, 62, 142, 178, 7, 62, 137, 74, 115, 189, 235, 214, 164, 61, 195, 233, 227, 61, 252, 153, 1, 62, 70, 217, 166, 62, 51, 21, 87, 62, 43, 4, 183, 62, 165, 252, 241, 62, 43, 182, 161, 62, 147, 121, 76, 191, 175, 184, 1, 62, 136, 227, 13, 189, 212, 153, 55, 61, 33, 174, 160, 190, 137, 103, 207, 189, 130, 145, 90, 61, 151, 114, 130, 191, 89, 114, 137, 62, 142, 143, 43, 190, 207, 230, 74, 190, 58, 42, 179, 190, 104, 114, 13, 63, 200, 203, 177, 190, 229, 166, 197, 62, 119, 227, 195, 190, 54, 166, 190, 190, 195, 4, 172, 62, 80, 126, 23, 190, 74, 36, 162, 61, 30, 83, 156, 190, 37, 64, 204, 62, 198, 110, 158, 191, 98, 117, 76, 189, 209, 156, 126, 61, 3, 52, 150, 190, 229, 135, 73, 62, 78, 64, 190, 190, 34, 101, 248, 189, 218, 206, 131, 62, 247, 185, 157, 188, 230, 125, 252, 190, 132, 189, 120, 60, 111, 101, 232, 62, 242, 87, 204, 62, 168, 111, 157, 62, 65, 7, 122, 188, 56, 123, 167, 61, 25, 208, 203, 190, 71, 142, 210, 190, 129, 109, 77, 190, 30, 51, 253, 61, 83, 163, 238, 188, 42, 225, 46, 62, 207, 209, 208, 62, 160, 146, 150, 187, 92, 70, 50, 191, 216, 33, 64, 59, 221, 50, 11, 191, 158, 72, 50, 62, 11, 160, 255, 189, 94, 141, 71, 62, 87, 201, 124, 61, 125, 124, 150, 190, 46, 145, 43, 189, 66, 190, 122, 62, 187, 85, 40, 190, 17, 52, 138, 61, 109, 203, 66, 62, 195, 161, 96, 191, 163, 29, 24, 62, 228, 235, 71, 189, 241, 88, 153, 189, 244, 37, 12, 189, 20, 183, 211, 59, 58, 164, 90, 190, 182, 193, 52, 62, 81, 46, 177, 190, 224, 54, 43, 189, 59, 69, 13, 62, 128, 248, 23, 190, 13, 25, 253, 189, 69, 195, 121, 190, 83, 247, 28, 61, 98, 231, 104, 62, 220, 64, 87, 62, 60, 253, 19, 190, 222, 33, 61, 190, 100, 31, 196, 62, 5, 175, 213, 190, 203, 167, 236, 190, 248, 164, 31, 190, 50, 248, 54, 61, 189, 23, 62, 62, 213, 88, 83, 62, 54, 153, 186, 62, 53, 130, 114, 191, 109, 173, 103, 190, 121, 40, 25, 62, 180, 251, 136, 62, 135, 4, 132, 62, 64, 129, 208, 190, 78, 194, 238, 60, 162, 34, 158, 188, 140, 3, 14, 190, 47, 254, 174, 190, 32, 117, 61, 191, 82, 219, 51, 63, 146, 114, 0, 62, 83, 206, 42, 62, 103, 169, 65, 62, 146, 191, 209, 188, 48, 121, 133, 190, 208, 248, 154, 190, 32, 69, 24, 189, 168, 202, 118, 62, 196, 181, 201, 62, 243, 233, 57, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 11, 19, 190, 250, 102, 115, 189, 182, 102, 198, 189, 180, 40, 7, 62, 142, 164, 143, 62, 85, 121, 75, 61, 28, 218, 64, 62, 62, 104, 134, 189, 129, 71, 129, 62, 93, 28, 255, 61, 65, 46, 193, 61, 180, 80, 77, 62, 192, 226, 74, 62, 193, 38, 100, 61, 200, 28, 9, 62, 243, 205, 200, 61, 242, 15, 107, 189, 250, 30, 172, 59, 253, 171, 37, 190, 68, 51, 66, 62, 52, 190, 126, 62, 76, 206, 192, 61, 140, 7, 71, 190, 190, 97, 8, 190, 251, 236, 229, 189, 113, 208, 11, 60, 243, 30, 19, 62, 230, 207, 56, 61, 226, 81, 101, 62, 221, 169, 18, 62, 33, 93, 91, 61, 241, 232, 41, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 186, 173, 61, 38, 122, 192, 189, 103, 10, 26, 63, 150, 156, 199, 189, 219, 96, 24, 190, 207, 132, 150, 62, 183, 190, 42, 63, 65, 254, 52, 190, 145, 246, 251, 190, 197, 27, 169, 62, 126, 215, 82, 191, 97, 218, 135, 191, 34, 240, 178, 63, 26, 36, 105, 190, 4, 86, 95, 63, 238, 40, 193, 59, 249, 191, 84, 189, 147, 91, 166, 190, 134, 30, 134, 189, 200, 143, 36, 62, 69, 220, 229, 62, 225, 0, 179, 61, 223, 90, 161, 191, 116, 145, 36, 189, 254, 54, 98, 191, 103, 253, 86, 60, 242, 174, 114, 190, 68, 171, 68, 61, 209, 187, 39, 63, 76, 133, 98, 191, 135, 11, 250, 190, 132, 218, 65, 191, 85, 100, 161, 189, 148, 119, 17, 187, 169, 96, 246, 190, 62, 12, 17, 190, 97, 244, 10, 191, 155, 30, 92, 190, 95, 186, 132, 189, 128, 250, 240, 62, 82, 249, 241, 190, 216, 145, 159, 190, 197, 52, 130, 62, 150, 12, 44, 62, 38, 245, 146, 62, 37, 70, 159, 190, 36, 207, 240, 187, 226, 171, 71, 190, 161, 54, 219, 188, 3, 164, 27, 62, 180, 238, 239, 60, 172, 177, 163, 189, 112, 148, 133, 189, 168, 155, 0, 190, 150, 56, 0, 62, 216, 164, 206, 189, 9, 131, 21, 63, 234, 99, 248, 189, 1, 131, 93, 190, 64, 232, 33, 190, 61, 83, 125, 61, 77, 70, 247, 61, 78, 99, 216, 61, 175, 115, 129, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 214, 9, 190, 212, 128, 101, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {253, 129, 136, 190, 139, 40, 23, 192, 186, 3, 118, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {75, 97, 219, 191, 124, 226, 37, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0044/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}