// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 213, 247, 62, 193, 35, 19, 191, 120, 168, 36, 62, 227, 202, 208, 62, 118, 109, 226, 190, 146, 86, 103, 61, 113, 183, 1, 191, 246, 79, 143, 190, 157, 75, 21, 190, 191, 211, 131, 61, 67, 212, 222, 189, 57, 242, 198, 62, 210, 152, 53, 190, 150, 156, 145, 190, 89, 119, 17, 191, 206, 77, 239, 62, 156, 106, 149, 59, 244, 136, 218, 62, 224, 109, 122, 62, 185, 196, 213, 190, 99, 41, 174, 189, 72, 102, 125, 61, 11, 74, 9, 63, 247, 196, 109, 190, 170, 65, 215, 190, 229, 122, 222, 190, 246, 241, 159, 62, 228, 109, 8, 191, 21, 163, 228, 61, 86, 82, 141, 189, 83, 162, 168, 190, 227, 132, 186, 60, 209, 20, 237, 62, 96, 119, 135, 190, 10, 195, 180, 189, 189, 89, 184, 62, 170, 199, 35, 62, 206, 85, 18, 188, 144, 176, 28, 187, 48, 194, 24, 190, 173, 234, 196, 190, 119, 194, 7, 188, 84, 105, 249, 189, 160, 249, 244, 62, 63, 65, 133, 62, 41, 168, 112, 62, 55, 197, 157, 190, 122, 178, 41, 190, 255, 62, 160, 190, 23, 219, 12, 63, 123, 139, 246, 190, 147, 92, 86, 190, 131, 126, 22, 61, 68, 145, 124, 190, 114, 154, 223, 190, 176, 51, 200, 62, 248, 132, 236, 62, 61, 145, 145, 190, 124, 19, 137, 190, 227, 62, 60, 62, 38, 62, 39, 62, 107, 23, 125, 62, 181, 8, 14, 63, 246, 167, 73, 190, 124, 175, 218, 190, 55, 185, 41, 62, 214, 150, 15, 63, 108, 190, 235, 187, 26, 48, 168, 62, 177, 17, 238, 190, 224, 190, 236, 61, 158, 181, 254, 190, 46, 141, 217, 62, 249, 21, 225, 190, 88, 235, 99, 62, 38, 42, 3, 191, 50, 0, 251, 62, 137, 124, 12, 191, 194, 180, 132, 62, 196, 153, 231, 190, 26, 4, 110, 188, 207, 189, 161, 189, 225, 53, 17, 63, 249, 193, 76, 62, 62, 108, 246, 190, 70, 182, 225, 190, 222, 159, 231, 62, 47, 145, 174, 61, 184, 219, 199, 190, 19, 74, 218, 62, 59, 183, 41, 190, 17, 205, 215, 190, 93, 81, 41, 62, 39, 159, 2, 63, 165, 46, 174, 190, 49, 253, 174, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 178, 19, 191, 121, 69, 12, 63, 177, 155, 161, 61, 156, 254, 251, 189, 2, 88, 176, 190, 74, 153, 169, 62, 99, 199, 249, 190, 97, 12, 130, 62, 98, 128, 183, 62, 186, 222, 19, 189, 126, 148, 226, 190, 86, 205, 86, 190, 88, 211, 134, 190, 1, 78, 108, 62, 214, 130, 232, 62, 163, 149, 119, 62, 130, 24, 239, 189, 102, 164, 48, 62, 195, 32, 20, 189, 57, 87, 56, 190, 13, 192, 146, 190, 97, 142, 253, 190, 29, 151, 12, 63, 200, 207, 174, 62, 117, 96, 78, 61, 153, 247, 189, 190, 225, 196, 246, 62, 32, 243, 4, 191, 58, 224, 6, 63, 2, 140, 183, 190, 31, 178, 239, 190, 252, 200, 171, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 148, 152, 189, 11, 24, 22, 62, 94, 225, 99, 189, 205, 239, 191, 61, 76, 139, 104, 61, 214, 85, 72, 189, 118, 166, 151, 188, 81, 2, 135, 187, 162, 69, 73, 61, 234, 220, 221, 188, 2, 151, 34, 190, 154, 248, 158, 60, 253, 160, 50, 62, 208, 101, 43, 190, 226, 148, 113, 61, 123, 240, 181, 189, 80, 199, 24, 189, 191, 10, 43, 189, 178, 109, 230, 188, 157, 119, 95, 189, 178, 235, 46, 62, 114, 18, 10, 62, 42, 138, 181, 189, 156, 49, 120, 61, 78, 16, 49, 62, 66, 182, 65, 189, 207, 108, 132, 189, 59, 76, 146, 61, 7, 43, 140, 189, 197, 111, 43, 62, 115, 244, 2, 190, 165, 87, 251, 189, 193, 182, 221, 59, 211, 16, 0, 190, 201, 141, 161, 189, 21, 29, 218, 60, 242, 188, 222, 189, 41, 237, 29, 189, 125, 66, 70, 61, 93, 8, 80, 188, 168, 19, 18, 62, 197, 57, 0, 62, 168, 2, 255, 189, 51, 150, 145, 189, 189, 197, 218, 189, 71, 9, 173, 188, 178, 204, 34, 189, 171, 21, 24, 190, 197, 227, 186, 189, 194, 110, 129, 187, 169, 131, 165, 61, 198, 36, 84, 189, 144, 47, 13, 189, 15, 254, 25, 62, 48, 197, 126, 189, 137, 206, 134, 61, 166, 128, 236, 60, 97, 90, 17, 62, 82, 237, 176, 189, 249, 212, 172, 61, 199, 75, 212, 189, 41, 16, 194, 61, 202, 154, 46, 190, 243, 44, 210, 61, 247, 246, 217, 61, 91, 147, 225, 61, 114, 0, 27, 188, 25, 103, 195, 61, 209, 177, 12, 190, 37, 133, 51, 190, 243, 204, 15, 61, 3, 57, 227, 188, 165, 111, 34, 62, 45, 166, 139, 189, 194, 14, 46, 190, 155, 177, 228, 189, 229, 190, 253, 189, 86, 199, 95, 61, 195, 29, 62, 61, 71, 187, 35, 62, 240, 248, 157, 188, 157, 123, 218, 61, 164, 52, 245, 61, 98, 181, 10, 190, 72, 101, 214, 189, 177, 72, 41, 190, 209, 242, 212, 61, 165, 207, 49, 189, 118, 7, 2, 62, 22, 118, 6, 62, 212, 50, 52, 61, 236, 20, 253, 61, 100, 6, 29, 62, 159, 93, 15, 190, 155, 34, 52, 190, 142, 134, 36, 190, 240, 195, 45, 62, 78, 22, 182, 189, 37, 63, 40, 62, 243, 156, 34, 190, 193, 83, 1, 188, 146, 11, 171, 189, 219, 178, 169, 189, 251, 232, 246, 59, 32, 12, 144, 61, 131, 75, 27, 190, 233, 117, 211, 189, 211, 107, 246, 189, 148, 213, 114, 61, 246, 71, 208, 61, 212, 236, 38, 190, 121, 92, 145, 189, 96, 159, 196, 188, 5, 160, 212, 59, 202, 160, 38, 62, 160, 59, 21, 62, 118, 103, 57, 189, 145, 182, 170, 61, 55, 83, 43, 190, 235, 178, 38, 190, 251, 212, 217, 61, 125, 151, 166, 61, 217, 104, 70, 189, 47, 118, 215, 61, 178, 173, 153, 61, 48, 112, 53, 61, 155, 150, 190, 189, 17, 36, 73, 61, 5, 182, 150, 189, 115, 158, 177, 189, 109, 6, 129, 61, 87, 118, 45, 189, 20, 32, 117, 189, 130, 160, 50, 61, 245, 185, 30, 61, 198, 241, 85, 61, 191, 231, 136, 186, 139, 99, 251, 61, 206, 14, 74, 61, 45, 119, 123, 60, 186, 129, 11, 190, 115, 41, 255, 189, 29, 226, 203, 61, 119, 41, 38, 62, 110, 176, 163, 189, 3, 38, 49, 190, 109, 167, 142, 61, 89, 122, 165, 61, 55, 222, 85, 59, 253, 66, 63, 61, 135, 50, 184, 189, 143, 169, 46, 62, 98, 90, 12, 62, 184, 41, 2, 190, 221, 198, 22, 62, 28, 144, 36, 190, 36, 102, 38, 62, 124, 56, 162, 189, 27, 147, 17, 190, 107, 32, 120, 188, 22, 154, 138, 59, 233, 103, 213, 60, 192, 54, 7, 62, 93, 101, 180, 60, 141, 24, 130, 189, 248, 158, 191, 61, 51, 216, 116, 189, 2, 106, 10, 62, 234, 133, 6, 190, 40, 99, 201, 58, 2, 184, 102, 60, 26, 247, 23, 62, 70, 28, 206, 189, 17, 117, 96, 189, 224, 159, 44, 187, 218, 235, 155, 189, 204, 117, 133, 189, 70, 56, 126, 61, 119, 59, 26, 62, 66, 152, 106, 188, 140, 142, 242, 61, 148, 207, 66, 61, 120, 92, 182, 188, 85, 59, 162, 189, 166, 235, 245, 61, 96, 43, 152, 61, 171, 104, 12, 61, 134, 41, 32, 190, 106, 130, 177, 189, 168, 128, 202, 189, 61, 116, 20, 190, 230, 31, 206, 61, 73, 167, 72, 188, 228, 217, 134, 189, 166, 249, 33, 189, 136, 55, 86, 61, 11, 248, 103, 61, 35, 135, 134, 61, 164, 145, 13, 190, 249, 58, 245, 188, 170, 217, 137, 188, 188, 125, 197, 60, 137, 18, 253, 59, 32, 105, 72, 61, 249, 222, 212, 188, 15, 75, 195, 189, 106, 211, 200, 188, 172, 253, 6, 190, 44, 21, 208, 61, 214, 142, 189, 188, 204, 196, 160, 59, 132, 137, 167, 61, 29, 128, 139, 189, 183, 152, 44, 188, 92, 246, 158, 61, 88, 108, 165, 189, 118, 251, 188, 61, 122, 40, 23, 190, 9, 71, 178, 189, 167, 128, 27, 189, 133, 218, 193, 61, 137, 56, 250, 189, 180, 104, 35, 188, 55, 47, 50, 189, 204, 106, 133, 189, 172, 52, 122, 61, 199, 132, 104, 189, 144, 36, 29, 62, 154, 139, 220, 60, 91, 137, 142, 189, 118, 38, 52, 62, 25, 223, 94, 61, 127, 187, 15, 190, 149, 96, 45, 62, 210, 186, 194, 189, 96, 104, 76, 59, 166, 46, 195, 61, 55, 195, 50, 62, 49, 210, 192, 189, 30, 116, 226, 61, 19, 2, 255, 61, 101, 98, 87, 61, 22, 190, 210, 189, 120, 189, 236, 61, 147, 79, 44, 61, 204, 201, 140, 189, 152, 254, 225, 60, 199, 112, 25, 62, 116, 6, 147, 61, 88, 110, 223, 189, 85, 102, 140, 189, 45, 102, 11, 61, 210, 169, 105, 189, 202, 32, 87, 61, 18, 36, 192, 189, 248, 160, 17, 61, 130, 103, 155, 189, 180, 165, 133, 189, 215, 248, 115, 189, 76, 9, 50, 190, 43, 221, 219, 187, 83, 158, 91, 60, 187, 159, 153, 61, 21, 73, 75, 189, 11, 225, 210, 189, 118, 240, 99, 61, 39, 214, 23, 62, 113, 111, 188, 189, 201, 164, 35, 61, 51, 22, 157, 61, 248, 213, 170, 61, 48, 156, 7, 62, 113, 171, 37, 62, 4, 219, 229, 188, 31, 117, 119, 61, 93, 128, 164, 188, 73, 27, 22, 62, 76, 250, 27, 62, 148, 73, 144, 187, 163, 189, 232, 189, 70, 76, 208, 189, 46, 233, 200, 60, 94, 15, 66, 189, 124, 98, 161, 189, 49, 97, 221, 57, 90, 92, 209, 60, 214, 144, 17, 189, 89, 179, 19, 190, 3, 4, 5, 62, 171, 215, 181, 59, 17, 38, 142, 189, 133, 253, 52, 62, 63, 179, 92, 61, 8, 219, 17, 62, 64, 52, 250, 60, 235, 183, 2, 189, 58, 173, 5, 189, 99, 4, 26, 190, 225, 15, 38, 60, 193, 156, 129, 189, 166, 80, 49, 62, 126, 151, 40, 190, 196, 223, 26, 62, 102, 190, 178, 189, 7, 152, 202, 60, 131, 58, 5, 190, 11, 233, 18, 61, 172, 104, 148, 59, 57, 243, 217, 61, 58, 208, 31, 188, 20, 253, 223, 61, 152, 112, 68, 61, 167, 15, 100, 189, 233, 206, 113, 61, 146, 35, 9, 62, 16, 36, 28, 62, 133, 181, 30, 190, 52, 94, 155, 61, 227, 42, 247, 61, 137, 99, 97, 61, 146, 149, 18, 190, 149, 113, 252, 60, 61, 236, 7, 189, 165, 181, 50, 190, 16, 28, 197, 189, 130, 152, 167, 189, 80, 102, 113, 189, 76, 99, 3, 62, 144, 17, 34, 62, 143, 34, 184, 189, 165, 220, 201, 188, 252, 60, 11, 190, 224, 229, 36, 61, 157, 243, 163, 189, 9, 163, 23, 62, 213, 148, 42, 62, 127, 187, 185, 188, 92, 20, 154, 61, 176, 255, 28, 62, 226, 208, 12, 62, 74, 61, 59, 61, 59, 113, 184, 60, 125, 164, 217, 61, 119, 253, 112, 189, 31, 211, 39, 61, 180, 135, 187, 189, 21, 143, 52, 61, 102, 169, 41, 190, 196, 245, 175, 189, 83, 95, 228, 189, 47, 125, 31, 61, 240, 76, 58, 186, 194, 103, 191, 189, 141, 94, 125, 61, 37, 59, 33, 190, 52, 188, 69, 61, 137, 244, 51, 189, 158, 250, 43, 62, 126, 112, 132, 189, 21, 45, 63, 189, 215, 47, 179, 61, 232, 94, 156, 61, 221, 0, 11, 190, 77, 185, 186, 59, 47, 200, 37, 189, 221, 170, 64, 188, 250, 93, 177, 187, 68, 30, 225, 189, 31, 251, 0, 190, 97, 197, 209, 61, 244, 109, 49, 61, 104, 142, 153, 61, 45, 159, 208, 61, 200, 217, 33, 62, 24, 140, 5, 190, 0, 168, 222, 61, 215, 187, 151, 61, 246, 197, 182, 187, 150, 189, 94, 189, 166, 146, 242, 188, 166, 53, 7, 62, 72, 150, 70, 189, 118, 245, 171, 61, 176, 171, 31, 62, 171, 72, 43, 62, 189, 130, 35, 190, 241, 171, 222, 61, 184, 209, 28, 190, 254, 141, 152, 188, 15, 0, 188, 189, 34, 142, 153, 61, 226, 182, 190, 61, 70, 195, 153, 189, 69, 156, 236, 188, 77, 230, 27, 188, 59, 129, 242, 189, 170, 254, 211, 60, 231, 25, 134, 61, 116, 131, 214, 189, 87, 29, 147, 189, 169, 240, 168, 61, 193, 73, 6, 62, 105, 11, 247, 60, 48, 215, 25, 190, 90, 23, 163, 61, 134, 87, 13, 190, 69, 178, 36, 62, 70, 8, 192, 189, 237, 48, 9, 190, 208, 188, 84, 61, 202, 207, 89, 187, 64, 166, 50, 59, 41, 238, 21, 190, 240, 124, 179, 189, 215, 84, 149, 189, 115, 244, 160, 189, 104, 115, 25, 190, 80, 147, 231, 61, 117, 243, 172, 61, 209, 136, 42, 62, 80, 225, 175, 189, 220, 184, 38, 190, 118, 233, 161, 61, 14, 225, 171, 61, 204, 33, 20, 190, 217, 251, 169, 61, 156, 238, 17, 190, 41, 193, 3, 62, 246, 181, 41, 62, 58, 162, 45, 190, 76, 21, 4, 62, 80, 178, 197, 189, 147, 87, 82, 61, 238, 21, 137, 61, 63, 32, 243, 187, 78, 156, 210, 61, 69, 9, 13, 190, 184, 106, 0, 190, 119, 25, 44, 62, 5, 204, 20, 62, 177, 166, 4, 190, 151, 131, 6, 189, 29, 244, 79, 189, 63, 133, 41, 190, 105, 0, 227, 61, 21, 141, 208, 60, 204, 64, 146, 61, 219, 126, 166, 189, 13, 148, 70, 61, 55, 107, 245, 189, 110, 89, 29, 62, 186, 69, 244, 189, 112, 0, 131, 60, 7, 136, 137, 61, 134, 254, 234, 61, 194, 15, 19, 190, 206, 161, 204, 188, 226, 106, 38, 190, 198, 192, 3, 62, 194, 132, 16, 62, 136, 172, 207, 59, 215, 58, 201, 61, 7, 57, 62, 189, 104, 185, 225, 61, 227, 54, 25, 62, 229, 92, 213, 189, 36, 84, 51, 190, 30, 25, 161, 187, 224, 135, 210, 61, 137, 241, 174, 189, 12, 196, 202, 61, 195, 133, 45, 190, 216, 110, 43, 190, 210, 132, 42, 190, 61, 44, 61, 188, 216, 12, 52, 61, 74, 226, 6, 190, 153, 129, 183, 61, 15, 59, 44, 62, 40, 205, 51, 190, 108, 244, 201, 60, 50, 219, 220, 188, 72, 55, 14, 62, 235, 231, 47, 61, 142, 31, 42, 190, 138, 180, 239, 61, 171, 153, 163, 188, 225, 247, 0, 190, 102, 236, 48, 189, 186, 90, 245, 189, 145, 220, 203, 188, 169, 90, 125, 59, 40, 187, 163, 189, 11, 54, 39, 190, 80, 248, 44, 190, 192, 146, 128, 61, 110, 229, 13, 62, 203, 176, 201, 61, 97, 20, 30, 190, 97, 232, 29, 62, 129, 84, 22, 190, 170, 247, 139, 61, 105, 159, 61, 189, 209, 14, 200, 61, 208, 195, 242, 189, 180, 13, 82, 60, 46, 139, 38, 62, 16, 182, 50, 62, 44, 62, 252, 61, 252, 161, 88, 188, 226, 59, 35, 62, 20, 151, 97, 189, 123, 10, 50, 190, 226, 224, 168, 189, 49, 29, 172, 60, 5, 39, 173, 189, 183, 253, 83, 189, 2, 222, 236, 189, 197, 171, 200, 188, 28, 157, 43, 190, 226, 174, 73, 61, 246, 34, 221, 189, 81, 6, 186, 60, 38, 227, 46, 62, 174, 84, 115, 189, 238, 251, 143, 188, 84, 205, 43, 62, 209, 242, 14, 190, 59, 59, 59, 189, 132, 109, 40, 60, 153, 224, 227, 189, 195, 144, 16, 190, 234, 217, 140, 189, 2, 235, 10, 190, 173, 103, 236, 187, 77, 238, 111, 60, 35, 205, 85, 61, 85, 148, 243, 61, 151, 40, 60, 189, 191, 130, 194, 61, 247, 95, 7, 189, 52, 152, 66, 189, 221, 86, 26, 190, 192, 99, 210, 60, 97, 155, 21, 190, 69, 249, 170, 189, 102, 240, 25, 62, 76, 175, 250, 61, 155, 126, 147, 189, 120, 247, 21, 62, 151, 235, 187, 188, 37, 201, 46, 190, 62, 80, 39, 189, 213, 215, 139, 61, 153, 176, 194, 187, 46, 220, 31, 190, 90, 213, 158, 189, 175, 45, 160, 61, 48, 70, 98, 183, 148, 1, 2, 62, 122, 171, 220, 61, 184, 60, 20, 61, 182, 238, 20, 62, 187, 138, 218, 188, 93, 87, 128, 189, 97, 136, 37, 187, 8, 235, 205, 188, 164, 250, 224, 60, 71, 166, 41, 190, 94, 247, 233, 61, 9, 232, 192, 189, 224, 160, 240, 61, 176, 227, 6, 62, 126, 4, 18, 183, 221, 196, 21, 190, 1, 196, 174, 61, 45, 13, 17, 62, 100, 219, 176, 189, 42, 199, 67, 189, 147, 221, 104, 189, 92, 203, 19, 62, 50, 170, 2, 61, 236, 63, 42, 62, 0, 236, 38, 190, 29, 98, 147, 188, 238, 149, 181, 189, 60, 147, 23, 61, 206, 147, 91, 61, 133, 176, 6, 62, 149, 180, 201, 189, 8, 219, 6, 61, 231, 76, 27, 61, 26, 231, 11, 62, 237, 205, 191, 189, 162, 94, 0, 189, 167, 252, 113, 61, 10, 255, 35, 62, 49, 34, 169, 61, 248, 164, 71, 189, 34, 47, 70, 188, 141, 168, 249, 187, 140, 174, 134, 189, 163, 171, 131, 189, 31, 33, 205, 189, 75, 158, 10, 190, 12, 3, 30, 189, 203, 53, 81, 61, 166, 252, 149, 60, 194, 55, 222, 61, 183, 164, 61, 60, 189, 201, 174, 61, 104, 13, 33, 61, 4, 202, 77, 61, 73, 40, 252, 61, 191, 54, 0, 188, 150, 32, 12, 187, 105, 57, 1, 62, 23, 174, 9, 59, 147, 81, 63, 189, 11, 94, 19, 190, 200, 96, 193, 189, 129, 17, 11, 62, 80, 42, 83, 58, 117, 82, 212, 61, 51, 165, 244, 61, 111, 149, 12, 190, 234, 113, 252, 189, 189, 71, 250, 61, 38, 129, 19, 62, 176, 237, 4, 190, 13, 207, 61, 60, 255, 249, 201, 189, 69, 106, 145, 189, 44, 234, 230, 189, 181, 61, 13, 61, 131, 160, 156, 61, 9, 165, 29, 190, 187, 231, 6, 190, 71, 30, 193, 61, 124, 225, 21, 190, 56, 214, 138, 189, 88, 171, 7, 62, 30, 117, 149, 61, 124, 102, 87, 61, 92, 177, 24, 189, 106, 236, 49, 189, 109, 189, 158, 60, 42, 64, 92, 61, 82, 142, 134, 61, 143, 45, 188, 61, 157, 124, 251, 188, 210, 143, 255, 189, 120, 168, 252, 184, 152, 168, 197, 61, 99, 22, 23, 188, 188, 244, 6, 190, 133, 22, 4, 189, 103, 137, 147, 59, 24, 111, 76, 60, 138, 178, 96, 61, 193, 0, 149, 189, 139, 111, 17, 62, 52, 14, 19, 190, 117, 41, 153, 61, 109, 233, 67, 61, 253, 56, 207, 189, 89, 246, 43, 60, 16, 214, 171, 188, 84, 59, 87, 189, 141, 99, 180, 60, 135, 241, 159, 189, 152, 196, 36, 62, 168, 113, 237, 189, 137, 79, 37, 190, 174, 176, 183, 189, 196, 62, 185, 61, 134, 189, 104, 189, 45, 9, 73, 189, 223, 32, 132, 189, 109, 74, 252, 60, 98, 214, 215, 59, 218, 133, 47, 61, 44, 253, 243, 60, 169, 133, 98, 189, 191, 145, 37, 60, 114, 159, 13, 62, 143, 24, 21, 190, 240, 61, 48, 62, 124, 70, 204, 189, 56, 169, 31, 62, 184, 160, 251, 187, 14, 52, 121, 188, 95, 228, 148, 188, 7, 216, 14, 187, 186, 233, 11, 62, 174, 175, 152, 61, 39, 102, 7, 61, 75, 29, 22, 62, 88, 204, 148, 189, 125, 240, 94, 61, 161, 149, 13, 62, 167, 4, 139, 189, 146, 89, 110, 61, 215, 151, 175, 61, 38, 7, 139, 189, 240, 123, 178, 188, 34, 153, 198, 61, 198, 19, 157, 189, 72, 165, 178, 187, 245, 46, 112, 189, 221, 9, 45, 62, 109, 226, 253, 58, 75, 61, 228, 60, 221, 55, 35, 62, 54, 205, 37, 61, 209, 75, 189, 61, 128, 45, 63, 189, 124, 109, 165, 61, 124, 129, 100, 189, 53, 180, 18, 59, 247, 188, 21, 62, 177, 136, 236, 61, 222, 184, 241, 61, 49, 132, 173, 189, 110, 212, 18, 62, 82, 245, 225, 61, 71, 119, 81, 189, 170, 195, 237, 187, 153, 49, 200, 60, 102, 35, 214, 189, 180, 219, 50, 190, 216, 148, 123, 189, 98, 130, 141, 61, 217, 4, 247, 189, 175, 44, 212, 61, 254, 1, 252, 188, 88, 137, 204, 189, 203, 28, 9, 62, 47, 104, 146, 61, 92, 18, 247, 61, 191, 235, 195, 188, 84, 99, 2, 61, 236, 134, 186, 61, 224, 155, 19, 190, 185, 161, 45, 190, 70, 75, 37, 62, 113, 71, 46, 62, 222, 138, 18, 190, 5, 107, 31, 60, 32, 41, 37, 190, 57, 231, 208, 189, 147, 43, 236, 59, 6, 17, 10, 190, 235, 237, 49, 190, 52, 39, 155, 188, 245, 34, 245, 189, 6, 112, 157, 187, 110, 95, 16, 190, 173, 244, 179, 189, 196, 131, 181, 188, 182, 238, 225, 189, 168, 108, 185, 189, 135, 249, 56, 57, 185, 191, 11, 62, 0, 161, 18, 190, 148, 31, 164, 59, 68, 80, 13, 61, 33, 159, 167, 60, 39, 73, 34, 61, 0, 92, 37, 62, 102, 217, 47, 190, 86, 33, 48, 190, 181, 184, 41, 62, 106, 178, 218, 59, 104, 60, 195, 61, 160, 109, 187, 189, 59, 51, 49, 62, 169, 247, 144, 61, 69, 244, 209, 188, 179, 172, 248, 189, 192, 221, 71, 189, 13, 233, 13, 62, 75, 107, 187, 188, 46, 251, 25, 62, 225, 17, 218, 61, 179, 157, 179, 189, 165, 240, 127, 189, 126, 29, 13, 190, 243, 87, 252, 187, 228, 211, 235, 188, 139, 163, 47, 190, 182, 131, 202, 61, 51, 171, 226, 189, 13, 171, 250, 189, 46, 236, 20, 190, 15, 93, 40, 190, 87, 62, 10, 60, 109, 177, 26, 61, 164, 122, 244, 61, 139, 78, 179, 189, 40, 128, 173, 189, 115, 83, 165, 189, 4, 105, 46, 190, 25, 85, 229, 61, 237, 249, 123, 61, 140, 94, 12, 62, 135, 97, 15, 62, 36, 54, 149, 61, 213, 226, 30, 62, 191, 154, 57, 58, 16, 194, 247, 189, 82, 250, 69, 61, 86, 104, 223, 189, 156, 79, 254, 61, 98, 84, 67, 188, 91, 168, 188, 61, 63, 178, 137, 60, 2, 161, 93, 60, 95, 172, 132, 60, 205, 48, 30, 189, 248, 148, 204, 60, 147, 71, 116, 61, 154, 3, 177, 60, 248, 38, 141, 61, 255, 3, 6, 62, 238, 235, 29, 62, 167, 172, 165, 61, 45, 226, 27, 190, 103, 249, 11, 62, 183, 68, 157, 60, 89, 241, 11, 190, 109, 58, 19, 62, 206, 178, 144, 188, 164, 37, 238, 61, 195, 104, 162, 189, 194, 137, 159, 61, 50, 63, 70, 61, 50, 156, 134, 189, 190, 107, 46, 62, 136, 3, 129, 61, 61, 73, 10, 190, 13, 246, 227, 61, 154, 216, 249, 61, 162, 20, 239, 61, 162, 53, 33, 62, 92, 130, 68, 189, 128, 68, 255, 61, 122, 96, 120, 61, 72, 208, 11, 190, 78, 198, 17, 62, 215, 128, 237, 61, 216, 173, 113, 189, 21, 150, 45, 61, 218, 213, 13, 190, 51, 101, 36, 190, 15, 43, 174, 61, 244, 184, 199, 189, 101, 196, 45, 61, 107, 152, 211, 189, 224, 235, 41, 190, 103, 143, 215, 189, 47, 93, 52, 190, 34, 51, 223, 188, 212, 60, 149, 189, 179, 55, 250, 61, 122, 171, 138, 188, 248, 100, 226, 61, 191, 164, 246, 187, 67, 228, 135, 61, 106, 66, 191, 61, 6, 16, 31, 62, 125, 129, 143, 61, 247, 94, 199, 57, 183, 148, 223, 60, 43, 91, 23, 62, 77, 230, 30, 62, 252, 147, 5, 190, 57, 141, 51, 189, 229, 19, 102, 61, 75, 185, 171, 61, 99, 235, 171, 187, 126, 189, 19, 190, 126, 178, 25, 62, 228, 52, 46, 61, 23, 83, 139, 189, 224, 107, 152, 60, 1, 56, 48, 62, 161, 144, 1, 190, 185, 117, 128, 61, 139, 212, 173, 189, 21, 90, 46, 61, 77, 171, 50, 62, 225, 167, 15, 62, 131, 85, 87, 188, 255, 135, 158, 61, 201, 109, 170, 189, 242, 59, 205, 61, 16, 178, 133, 189, 17, 0, 209, 189, 91, 52, 168, 189, 220, 111, 215, 189, 60, 255, 2, 62, 220, 102, 219, 61, 168, 133, 239, 189, 28, 62, 222, 61, 103, 216, 13, 190, 18, 155, 241, 60, 106, 44, 173, 59, 235, 214, 164, 61, 210, 229, 137, 61, 141, 66, 121, 189, 30, 45, 71, 61, 189, 143, 16, 190, 7, 9, 72, 187, 255, 40, 14, 189, 227, 187, 41, 61, 108, 192, 17, 189, 50, 130, 29, 62, 35, 71, 159, 60, 149, 63, 198, 61, 194, 187, 243, 189, 146, 50, 33, 190, 157, 135, 223, 189, 42, 147, 47, 190, 103, 62, 181, 61, 16, 54, 109, 188, 106, 179, 185, 189, 89, 97, 22, 190, 237, 22, 48, 62, 20, 6, 1, 190, 172, 57, 219, 61, 37, 249, 26, 190, 6, 219, 0, 190, 123, 49, 31, 61, 36, 255, 28, 190, 234, 99, 209, 189, 177, 198, 206, 189, 202, 68, 14, 62, 125, 52, 27, 190, 228, 53, 41, 189, 209, 156, 126, 61, 247, 38, 188, 187, 176, 130, 119, 60, 30, 153, 73, 61, 236, 100, 211, 189, 206, 186, 144, 61, 13, 91, 20, 62, 136, 173, 86, 61, 41, 200, 49, 190, 195, 176, 149, 189, 196, 107, 32, 62, 113, 150, 186, 61, 6, 221, 192, 183, 180, 180, 6, 189, 124, 5, 6, 190, 100, 245, 212, 61, 56, 24, 32, 61, 64, 23, 27, 60, 144, 129, 133, 187, 130, 81, 231, 61, 152, 212, 46, 62, 125, 41, 139, 61, 111, 150, 125, 61, 8, 79, 0, 61, 133, 197, 54, 61, 148, 181, 152, 61, 58, 151, 6, 190, 170, 180, 66, 189, 215, 115, 205, 61, 167, 162, 41, 189, 250, 164, 177, 61, 14, 168, 21, 62, 187, 85, 40, 190, 95, 181, 255, 61, 178, 208, 18, 62, 85, 55, 4, 190, 214, 186, 18, 61, 221, 122, 239, 188, 40, 166, 232, 61, 205, 174, 101, 61, 3, 169, 250, 189, 200, 25, 164, 189, 181, 148, 113, 188, 223, 121, 188, 60, 233, 1, 211, 189, 193, 80, 128, 61, 125, 193, 19, 62, 81, 118, 217, 61, 190, 233, 255, 189, 71, 205, 94, 189, 200, 165, 148, 61, 35, 227, 252, 61, 78, 18, 158, 57, 80, 178, 240, 61, 11, 226, 132, 188, 124, 196, 26, 189, 68, 209, 145, 189, 67, 40, 248, 61, 63, 131, 59, 61, 67, 60, 170, 61, 57, 119, 30, 62, 97, 15, 49, 62, 204, 116, 218, 189, 153, 51, 202, 61, 121, 40, 25, 62, 63, 17, 5, 61, 94, 55, 0, 62, 24, 141, 153, 61, 246, 119, 117, 61, 22, 65, 74, 189, 60, 250, 233, 189, 87, 110, 13, 59, 13, 176, 20, 190, 105, 220, 30, 62, 204, 158, 106, 189, 23, 194, 118, 60, 14, 69, 120, 188, 33, 29, 248, 189, 43, 199, 45, 189, 7, 29, 113, 61, 183, 236, 227, 61, 82, 94, 52, 62, 12, 130, 205, 61, 169, 52, 120, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 56, 2, 190, 26, 109, 175, 188, 228, 83, 48, 190, 216, 44, 139, 61, 16, 85, 17, 62, 224, 61, 210, 60, 110, 244, 46, 62, 100, 158, 24, 60, 196, 132, 73, 61, 145, 43, 191, 61, 177, 62, 131, 189, 103, 162, 156, 61, 47, 18, 26, 62, 252, 227, 251, 187, 24, 96, 6, 62, 137, 37, 109, 60, 235, 193, 96, 189, 133, 11, 60, 189, 174, 211, 19, 190, 42, 29, 2, 62, 50, 43, 148, 60, 237, 25, 167, 60, 209, 82, 145, 189, 190, 97, 8, 190, 0, 118, 223, 189, 211, 29, 254, 56, 193, 163, 138, 189, 40, 109, 131, 188, 180, 144, 208, 60, 132, 171, 68, 189, 176, 231, 196, 61, 37, 76, 232, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 30, 198, 61, 231, 119, 222, 189, 189, 215, 90, 61, 164, 18, 95, 189, 186, 250, 174, 60, 10, 149, 12, 62, 223, 251, 200, 61, 41, 66, 103, 61, 133, 235, 171, 188, 105, 66, 4, 62, 151, 77, 5, 189, 82, 129, 1, 189, 185, 71, 131, 187, 192, 125, 35, 190, 82, 93, 153, 61, 113, 83, 107, 189, 230, 198, 84, 189, 91, 254, 33, 190, 237, 113, 190, 189, 37, 57, 40, 62, 201, 227, 39, 62, 230, 8, 182, 187, 61, 89, 238, 188, 116, 145, 36, 189, 136, 161, 155, 60, 169, 220, 32, 61, 12, 215, 194, 188, 150, 32, 3, 62, 154, 41, 254, 61, 231, 165, 45, 190, 56, 64, 218, 189, 107, 248, 134, 60, 86, 39, 172, 189, 196, 132, 85, 60, 25, 216, 47, 190, 194, 133, 181, 189, 225, 97, 27, 190, 65, 63, 252, 189, 136, 88, 175, 188, 106, 173, 47, 62, 60, 30, 49, 190, 29, 30, 14, 190, 179, 57, 32, 62, 25, 222, 128, 61, 89, 95, 162, 61, 254, 32, 214, 188, 34, 25, 28, 62, 22, 249, 23, 190, 138, 73, 219, 188, 252, 32, 52, 62, 229, 68, 104, 61, 141, 239, 238, 189, 136, 196, 240, 188, 98, 20, 91, 189, 107, 126, 18, 62, 216, 164, 206, 189, 147, 67, 39, 62, 246, 154, 199, 188, 153, 31, 210, 189, 238, 63, 219, 189, 37, 73, 73, 189, 17, 90, 240, 188, 240, 191, 189, 61, 146, 185, 15, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 30, 7, 190, 94, 34, 159, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {114, 41, 58, 191, 89, 146, 23, 191, 252, 222, 136, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {26, 137, 205, 189, 108, 193, 190, 60};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0044/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}