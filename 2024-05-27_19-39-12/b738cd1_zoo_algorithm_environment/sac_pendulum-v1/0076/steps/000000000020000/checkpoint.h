// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 7, 144, 190, 150, 68, 194, 191, 241, 22, 44, 190, 23, 211, 218, 62, 126, 45, 233, 62, 225, 173, 164, 190, 236, 88, 33, 63, 138, 227, 88, 63, 37, 249, 83, 63, 30, 80, 1, 62, 131, 111, 85, 191, 108, 53, 227, 62, 92, 124, 154, 189, 87, 7, 170, 190, 61, 72, 64, 190, 86, 179, 59, 62, 236, 132, 246, 59, 211, 213, 7, 63, 13, 104, 22, 63, 245, 69, 12, 191, 159, 201, 69, 190, 86, 249, 209, 190, 216, 108, 141, 190, 102, 99, 234, 62, 128, 137, 18, 190, 109, 49, 108, 63, 41, 124, 7, 190, 126, 1, 70, 191, 21, 112, 181, 191, 180, 29, 159, 190, 204, 62, 163, 62, 37, 70, 73, 63, 9, 71, 21, 191, 65, 62, 161, 190, 225, 215, 82, 190, 73, 168, 7, 191, 30, 72, 60, 190, 84, 186, 10, 191, 86, 179, 175, 62, 151, 141, 164, 191, 222, 179, 61, 63, 147, 135, 3, 62, 142, 168, 9, 191, 103, 143, 128, 191, 231, 18, 87, 62, 98, 72, 243, 61, 71, 214, 64, 63, 47, 17, 71, 62, 219, 171, 86, 191, 165, 65, 132, 190, 66, 131, 255, 62, 71, 21, 127, 62, 150, 94, 186, 190, 20, 1, 2, 187, 76, 183, 155, 191, 182, 233, 0, 62, 171, 13, 44, 190, 25, 109, 43, 190, 218, 79, 200, 62, 204, 54, 76, 57, 24, 10, 135, 62, 43, 217, 51, 191, 102, 61, 8, 191, 225, 134, 98, 190, 91, 130, 155, 63, 209, 74, 79, 62, 67, 189, 52, 190, 2, 13, 160, 63, 171, 202, 31, 190, 141, 128, 110, 62, 87, 29, 180, 62, 109, 253, 214, 190, 21, 162, 58, 62, 215, 107, 223, 63, 201, 44, 200, 62, 186, 164, 117, 190, 246, 100, 123, 191, 114, 211, 214, 62, 170, 153, 162, 191, 123, 100, 34, 62, 104, 96, 92, 188, 8, 140, 199, 190, 218, 6, 171, 63, 189, 89, 151, 62, 49, 143, 83, 190, 166, 120, 81, 63, 18, 80, 154, 62, 254, 118, 199, 61, 178, 155, 155, 191, 129, 129, 185, 190, 217, 66, 25, 191, 202, 192, 247, 61, 117, 13, 122, 63, 120, 108, 21, 63, 203, 0, 52, 191, 90, 166, 54, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 217, 224, 189, 243, 55, 60, 191, 230, 219, 247, 190, 77, 167, 14, 63, 115, 248, 111, 61, 254, 186, 44, 190, 98, 237, 232, 190, 177, 54, 36, 191, 213, 59, 200, 188, 41, 212, 11, 189, 83, 252, 185, 190, 207, 163, 8, 191, 102, 195, 231, 62, 249, 145, 35, 61, 186, 201, 137, 62, 63, 22, 226, 61, 196, 226, 187, 62, 215, 50, 255, 62, 31, 105, 175, 62, 128, 71, 42, 62, 221, 165, 185, 61, 227, 2, 209, 62, 13, 3, 215, 62, 13, 63, 14, 191, 249, 76, 118, 62, 138, 234, 151, 190, 140, 39, 21, 63, 56, 191, 142, 190, 128, 155, 196, 189, 89, 117, 101, 190, 56, 177, 212, 190, 40, 56, 184, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 122, 50, 62, 183, 242, 71, 61, 194, 184, 200, 190, 209, 60, 1, 62, 97, 239, 251, 60, 66, 9, 181, 190, 220, 27, 51, 62, 250, 196, 184, 190, 180, 68, 198, 62, 193, 30, 147, 190, 26, 123, 229, 190, 28, 216, 155, 190, 29, 109, 11, 62, 15, 198, 102, 62, 158, 41, 251, 61, 252, 246, 134, 62, 109, 238, 147, 61, 213, 173, 180, 62, 241, 49, 30, 191, 233, 89, 11, 189, 110, 70, 131, 61, 82, 149, 83, 61, 144, 136, 68, 190, 112, 228, 184, 62, 123, 205, 22, 190, 250, 182, 2, 62, 195, 117, 15, 61, 145, 82, 140, 62, 122, 42, 84, 190, 247, 246, 177, 61, 218, 179, 2, 62, 203, 12, 167, 61, 114, 137, 25, 191, 159, 192, 99, 62, 124, 201, 70, 191, 104, 71, 4, 191, 120, 251, 144, 190, 68, 90, 162, 191, 46, 97, 153, 62, 234, 255, 125, 191, 253, 95, 232, 61, 182, 42, 77, 191, 201, 45, 209, 190, 235, 37, 199, 190, 98, 119, 39, 190, 243, 182, 82, 62, 151, 136, 38, 190, 236, 194, 15, 190, 26, 50, 57, 189, 25, 251, 163, 190, 7, 3, 83, 62, 126, 130, 90, 62, 167, 220, 147, 190, 129, 59, 71, 62, 189, 217, 124, 190, 82, 248, 168, 62, 240, 235, 168, 187, 23, 230, 9, 62, 112, 32, 90, 61, 13, 152, 228, 62, 110, 89, 191, 189, 119, 246, 87, 62, 122, 155, 131, 191, 3, 212, 240, 62, 180, 130, 162, 190, 77, 127, 2, 190, 142, 253, 88, 189, 204, 75, 34, 62, 30, 101, 104, 62, 100, 54, 187, 190, 156, 25, 26, 191, 125, 118, 197, 190, 90, 246, 103, 191, 115, 20, 15, 191, 65, 220, 41, 62, 253, 13, 109, 190, 216, 1, 15, 61, 33, 203, 144, 61, 158, 163, 79, 62, 251, 9, 47, 62, 89, 132, 236, 59, 94, 24, 185, 62, 152, 164, 14, 191, 135, 141, 67, 62, 160, 37, 128, 61, 115, 100, 158, 61, 155, 15, 125, 60, 82, 175, 85, 190, 169, 87, 2, 61, 168, 47, 197, 187, 190, 148, 150, 190, 50, 102, 172, 191, 20, 234, 165, 191, 19, 55, 238, 191, 150, 7, 28, 61, 188, 187, 3, 190, 212, 246, 139, 191, 87, 89, 203, 60, 253, 22, 119, 62, 202, 90, 225, 188, 101, 129, 7, 62, 190, 165, 144, 62, 232, 214, 32, 191, 175, 202, 160, 61, 198, 76, 208, 189, 120, 85, 5, 62, 23, 161, 62, 189, 122, 18, 68, 62, 152, 68, 178, 61, 205, 26, 37, 190, 194, 159, 205, 61, 166, 33, 30, 189, 155, 149, 0, 190, 245, 14, 211, 61, 51, 210, 248, 62, 214, 36, 54, 62, 237, 78, 14, 60, 250, 45, 244, 187, 153, 85, 181, 61, 22, 101, 135, 190, 67, 209, 204, 60, 100, 245, 87, 190, 101, 111, 47, 189, 70, 170, 56, 191, 57, 245, 212, 188, 208, 16, 168, 190, 211, 135, 214, 61, 247, 60, 75, 191, 202, 220, 0, 63, 154, 156, 37, 190, 154, 61, 93, 191, 95, 141, 20, 190, 224, 167, 166, 61, 255, 124, 101, 62, 199, 167, 116, 190, 232, 5, 145, 62, 83, 175, 118, 60, 72, 60, 233, 61, 130, 139, 22, 62, 225, 214, 84, 190, 133, 215, 155, 190, 176, 255, 129, 186, 252, 122, 121, 62, 54, 47, 253, 61, 43, 111, 184, 189, 207, 237, 232, 61, 153, 150, 132, 187, 89, 46, 230, 61, 218, 184, 98, 62, 108, 218, 71, 62, 3, 104, 18, 62, 45, 93, 42, 187, 90, 210, 30, 190, 94, 102, 180, 61, 34, 223, 42, 62, 7, 26, 161, 191, 146, 63, 187, 190, 119, 254, 177, 61, 69, 185, 85, 189, 221, 33, 16, 191, 65, 161, 166, 190, 91, 36, 99, 61, 39, 30, 132, 62, 188, 216, 57, 62, 87, 59, 4, 190, 87, 30, 154, 61, 76, 148, 20, 60, 123, 84, 192, 62, 158, 126, 5, 191, 123, 4, 123, 61, 51, 168, 210, 190, 33, 197, 141, 190, 127, 32, 201, 60, 111, 236, 40, 191, 189, 79, 246, 61, 5, 154, 134, 190, 50, 84, 219, 60, 81, 171, 41, 62, 12, 200, 163, 189, 203, 130, 62, 191, 41, 218, 128, 189, 148, 19, 231, 190, 145, 236, 184, 190, 151, 26, 55, 190, 113, 0, 150, 190, 7, 214, 165, 189, 158, 161, 234, 190, 141, 247, 45, 191, 199, 186, 166, 60, 169, 52, 174, 190, 92, 71, 188, 189, 205, 155, 75, 62, 60, 47, 129, 191, 122, 169, 181, 62, 243, 238, 215, 189, 149, 59, 43, 61, 40, 135, 153, 59, 153, 96, 111, 190, 9, 108, 15, 187, 225, 159, 26, 190, 74, 42, 163, 62, 73, 128, 228, 190, 205, 175, 243, 189, 174, 42, 152, 61, 188, 167, 134, 189, 64, 4, 243, 62, 70, 229, 161, 190, 110, 173, 29, 62, 92, 14, 151, 189, 146, 231, 37, 190, 251, 129, 4, 61, 139, 127, 219, 61, 235, 153, 145, 189, 42, 51, 152, 62, 58, 4, 83, 61, 155, 186, 114, 62, 99, 171, 177, 62, 139, 170, 101, 62, 147, 1, 148, 61, 62, 83, 88, 63, 15, 146, 195, 62, 190, 230, 34, 59, 99, 19, 135, 62, 208, 109, 69, 62, 234, 150, 229, 190, 192, 181, 145, 190, 147, 208, 173, 190, 116, 239, 66, 188, 208, 63, 101, 191, 148, 203, 30, 63, 217, 7, 38, 190, 234, 189, 230, 62, 162, 205, 85, 191, 153, 62, 137, 62, 57, 95, 32, 62, 236, 185, 170, 189, 168, 104, 88, 62, 107, 119, 194, 62, 3, 34, 167, 61, 22, 182, 252, 191, 33, 236, 132, 62, 127, 184, 236, 189, 32, 97, 254, 61, 252, 135, 111, 191, 228, 170, 33, 191, 118, 87, 135, 62, 94, 125, 129, 62, 229, 244, 81, 188, 1, 87, 220, 191, 181, 47, 23, 61, 156, 138, 70, 62, 86, 159, 187, 191, 202, 130, 202, 188, 53, 83, 190, 190, 149, 112, 23, 191, 232, 113, 108, 190, 106, 188, 1, 191, 68, 13, 121, 190, 86, 196, 48, 189, 19, 115, 10, 191, 231, 12, 187, 190, 210, 149, 3, 191, 163, 246, 113, 187, 131, 155, 54, 191, 114, 82, 100, 187, 156, 54, 4, 191, 136, 248, 38, 191, 2, 5, 5, 191, 87, 69, 159, 189, 4, 30, 94, 62, 2, 78, 48, 190, 197, 232, 95, 189, 96, 147, 8, 62, 56, 27, 184, 190, 216, 182, 115, 62, 215, 214, 77, 190, 117, 163, 167, 190, 90, 194, 228, 61, 101, 192, 52, 190, 3, 108, 205, 61, 104, 79, 17, 190, 16, 109, 7, 190, 217, 251, 28, 62, 181, 231, 141, 62, 189, 87, 63, 189, 76, 252, 12, 190, 118, 149, 0, 191, 206, 218, 144, 61, 99, 132, 106, 191, 111, 154, 30, 62, 253, 128, 46, 190, 30, 216, 137, 191, 98, 212, 126, 61, 65, 94, 19, 189, 23, 50, 54, 63, 181, 240, 30, 62, 226, 144, 36, 61, 182, 74, 121, 190, 193, 173, 131, 62, 28, 143, 205, 189, 161, 94, 148, 190, 32, 206, 28, 191, 134, 104, 70, 191, 151, 127, 128, 62, 77, 213, 121, 60, 217, 218, 195, 61, 120, 173, 235, 189, 175, 192, 190, 61, 102, 11, 150, 62, 244, 165, 51, 191, 172, 42, 79, 190, 10, 100, 216, 187, 176, 154, 109, 191, 221, 136, 133, 61, 102, 248, 15, 191, 176, 174, 190, 190, 143, 61, 83, 190, 128, 171, 202, 61, 137, 136, 73, 190, 72, 80, 126, 63, 221, 184, 147, 60, 121, 220, 0, 190, 65, 14, 63, 191, 221, 165, 118, 62, 39, 77, 213, 189, 5, 168, 47, 188, 58, 136, 64, 190, 161, 79, 130, 189, 204, 87, 238, 61, 135, 221, 57, 62, 109, 246, 153, 190, 186, 182, 63, 61, 95, 220, 43, 59, 140, 154, 143, 189, 234, 114, 136, 62, 9, 168, 194, 191, 99, 28, 195, 189, 46, 230, 101, 190, 184, 77, 43, 190, 103, 8, 252, 61, 240, 186, 74, 190, 36, 92, 48, 62, 226, 183, 57, 62, 1, 154, 157, 190, 161, 234, 251, 191, 17, 184, 233, 61, 60, 15, 12, 62, 138, 165, 61, 191, 39, 116, 198, 190, 168, 252, 45, 188, 9, 245, 159, 188, 214, 132, 144, 190, 91, 153, 200, 190, 32, 159, 179, 60, 234, 221, 150, 62, 71, 63, 159, 62, 124, 113, 155, 61, 112, 78, 43, 62, 43, 191, 141, 190, 148, 25, 130, 61, 44, 214, 150, 61, 32, 234, 30, 60, 214, 184, 82, 62, 230, 97, 21, 190, 128, 190, 241, 61, 170, 22, 56, 191, 170, 184, 174, 58, 105, 15, 136, 62, 137, 20, 33, 62, 215, 181, 3, 63, 195, 112, 152, 190, 183, 170, 106, 189, 254, 248, 136, 189, 218, 100, 27, 62, 224, 34, 237, 59, 182, 187, 182, 189, 63, 49, 38, 62, 100, 153, 199, 59, 95, 76, 252, 190, 8, 93, 154, 191, 46, 33, 172, 189, 233, 246, 82, 61, 167, 9, 198, 190, 216, 104, 12, 191, 119, 207, 105, 62, 225, 24, 67, 190, 253, 224, 100, 61, 70, 96, 160, 61, 182, 206, 248, 61, 150, 115, 158, 62, 225, 60, 26, 190, 123, 179, 147, 62, 216, 254, 182, 189, 21, 130, 71, 62, 133, 180, 143, 61, 85, 247, 114, 60, 70, 221, 15, 62, 212, 161, 108, 190, 102, 195, 97, 189, 117, 216, 224, 62, 187, 146, 5, 189, 62, 36, 229, 62, 61, 192, 154, 190, 133, 85, 147, 61, 36, 170, 155, 61, 107, 103, 90, 62, 16, 166, 169, 61, 197, 248, 33, 190, 160, 234, 90, 189, 27, 81, 83, 190, 121, 143, 105, 62, 202, 43, 32, 190, 103, 169, 190, 190, 240, 97, 173, 59, 204, 187, 39, 190, 190, 248, 43, 61, 245, 21, 135, 189, 138, 31, 14, 188, 222, 254, 230, 190, 69, 159, 164, 62, 15, 140, 0, 61, 23, 67, 254, 61, 34, 168, 87, 62, 92, 246, 137, 190, 95, 9, 247, 189, 246, 148, 6, 188, 12, 115, 165, 61, 5, 128, 39, 189, 184, 70, 146, 62, 233, 3, 135, 190, 148, 37, 92, 61, 68, 249, 66, 189, 67, 222, 15, 190, 173, 61, 7, 62, 25, 52, 22, 62, 111, 111, 253, 189, 28, 85, 70, 62, 131, 55, 233, 190, 133, 231, 99, 190, 18, 198, 7, 190, 206, 218, 172, 190, 104, 44, 29, 62, 111, 32, 19, 190, 88, 161, 2, 190, 255, 86, 66, 190, 2, 47, 122, 62, 173, 255, 173, 190, 72, 97, 8, 63, 157, 17, 146, 62, 249, 229, 18, 190, 141, 159, 50, 191, 234, 194, 231, 61, 25, 127, 100, 190, 122, 127, 176, 190, 138, 126, 173, 188, 119, 70, 154, 190, 213, 159, 215, 61, 8, 208, 19, 191, 159, 19, 113, 190, 133, 75, 6, 191, 124, 88, 145, 189, 3, 107, 166, 62, 194, 118, 238, 62, 45, 188, 246, 60, 20, 7, 153, 62, 80, 97, 107, 61, 203, 120, 37, 191, 77, 99, 139, 190, 157, 8, 177, 189, 184, 43, 225, 190, 131, 66, 242, 190, 184, 131, 88, 190, 166, 24, 252, 190, 201, 234, 69, 62, 59, 9, 199, 62, 97, 15, 42, 63, 25, 203, 195, 189, 49, 22, 190, 188, 90, 147, 23, 62, 182, 71, 206, 61, 248, 145, 36, 62, 125, 7, 88, 190, 96, 208, 65, 190, 44, 145, 40, 62, 138, 78, 210, 61, 89, 201, 162, 189, 20, 58, 170, 62, 160, 152, 132, 189, 60, 183, 140, 62, 166, 62, 166, 190, 48, 229, 10, 61, 122, 252, 94, 189, 94, 77, 211, 61, 153, 151, 143, 190, 55, 199, 220, 62, 124, 187, 169, 188, 167, 55, 247, 61, 41, 186, 20, 62, 15, 196, 206, 191, 46, 123, 7, 60, 233, 143, 109, 61, 137, 125, 197, 190, 64, 187, 180, 189, 107, 243, 86, 189, 113, 170, 59, 191, 32, 182, 118, 62, 160, 143, 26, 191, 15, 102, 137, 190, 165, 38, 86, 191, 96, 218, 155, 62, 93, 217, 178, 189, 169, 81, 137, 62, 91, 57, 142, 62, 169, 113, 219, 188, 6, 109, 9, 62, 183, 55, 8, 62, 249, 67, 249, 61, 99, 198, 83, 190, 60, 247, 167, 61, 89, 162, 68, 190, 112, 83, 244, 61, 21, 144, 142, 60, 55, 120, 101, 189, 175, 102, 71, 190, 144, 174, 54, 62, 248, 19, 189, 62, 159, 68, 128, 189, 206, 30, 77, 61, 5, 147, 53, 189, 254, 234, 43, 62, 124, 122, 180, 190, 168, 252, 8, 190, 87, 45, 88, 188, 79, 222, 70, 62, 159, 195, 177, 61, 239, 84, 13, 189, 223, 41, 164, 189, 132, 75, 97, 186, 180, 75, 109, 189, 242, 159, 19, 63, 95, 248, 222, 189, 179, 69, 96, 187, 118, 249, 22, 189, 216, 7, 117, 62, 138, 108, 151, 62, 102, 87, 58, 190, 235, 92, 9, 190, 55, 152, 38, 190, 132, 249, 53, 190, 46, 107, 17, 191, 209, 184, 204, 61, 168, 172, 12, 191, 91, 163, 209, 189, 185, 200, 166, 189, 227, 64, 109, 191, 63, 117, 0, 190, 193, 155, 63, 190, 42, 103, 204, 61, 29, 90, 142, 61, 213, 142, 132, 62, 239, 19, 137, 62, 27, 130, 161, 61, 125, 114, 24, 190, 244, 153, 122, 190, 140, 85, 18, 62, 150, 43, 235, 189, 193, 248, 17, 60, 96, 129, 146, 61, 87, 133, 102, 59, 199, 141, 132, 190, 74, 177, 93, 62, 193, 25, 219, 62, 45, 98, 107, 62, 109, 118, 37, 190, 134, 23, 132, 190, 56, 119, 15, 62, 107, 181, 23, 63, 158, 88, 237, 190, 74, 41, 0, 63, 249, 160, 165, 189, 252, 174, 94, 57, 236, 30, 196, 62, 146, 93, 249, 190, 184, 252, 180, 61, 13, 38, 159, 61, 185, 230, 207, 62, 142, 101, 41, 62, 120, 80, 17, 188, 150, 175, 215, 61, 96, 133, 156, 191, 121, 131, 153, 190, 198, 219, 139, 62, 86, 156, 155, 190, 29, 116, 240, 189, 8, 161, 103, 62, 226, 86, 170, 62, 133, 36, 82, 190, 198, 147, 75, 62, 216, 130, 120, 62, 66, 224, 113, 190, 216, 64, 110, 62, 134, 78, 134, 62, 73, 249, 165, 190, 69, 145, 59, 191, 71, 48, 232, 61, 99, 35, 222, 61, 5, 151, 146, 189, 242, 218, 42, 191, 21, 211, 73, 191, 232, 160, 18, 62, 173, 23, 41, 190, 111, 193, 163, 191, 11, 108, 178, 61, 234, 202, 147, 189, 86, 167, 15, 63, 147, 82, 137, 61, 172, 163, 109, 62, 44, 234, 77, 190, 62, 162, 137, 62, 104, 242, 59, 188, 6, 203, 233, 190, 198, 132, 139, 191, 41, 68, 103, 190, 113, 170, 140, 190, 63, 137, 35, 61, 156, 93, 230, 61, 35, 230, 48, 190, 57, 209, 191, 189, 50, 17, 227, 61, 238, 231, 131, 190, 240, 14, 20, 61, 97, 174, 136, 62, 98, 216, 9, 191, 102, 209, 28, 190, 1, 183, 114, 190, 9, 86, 226, 190, 108, 61, 177, 190, 219, 207, 175, 189, 42, 8, 141, 190, 54, 76, 18, 63, 71, 249, 136, 189, 107, 79, 188, 60, 239, 193, 78, 62, 216, 7, 227, 61, 212, 241, 207, 189, 33, 85, 248, 62, 182, 133, 250, 190, 94, 150, 76, 190, 107, 119, 49, 190, 153, 173, 226, 189, 96, 164, 21, 61, 32, 143, 0, 62, 134, 211, 223, 188, 164, 150, 37, 190, 157, 118, 244, 190, 62, 218, 160, 62, 205, 22, 84, 190, 191, 15, 151, 62, 82, 108, 152, 189, 113, 112, 13, 61, 113, 217, 82, 189, 2, 179, 37, 61, 175, 28, 47, 62, 113, 228, 117, 60, 23, 162, 97, 62, 131, 52, 39, 191, 175, 103, 175, 61, 13, 181, 180, 190, 96, 141, 173, 189, 41, 145, 74, 190, 152, 146, 131, 190, 204, 244, 58, 191, 28, 1, 105, 61, 14, 83, 20, 62, 190, 2, 96, 189, 232, 128, 44, 190, 144, 4, 169, 189, 23, 190, 22, 62, 187, 120, 134, 189, 240, 198, 88, 60, 204, 19, 214, 59, 79, 159, 213, 189, 108, 149, 218, 61, 171, 247, 50, 190, 16, 40, 203, 60, 72, 80, 69, 189, 92, 186, 102, 61, 174, 18, 74, 190, 60, 156, 249, 188, 238, 206, 194, 61, 139, 253, 178, 189, 100, 112, 222, 61, 77, 93, 78, 190, 130, 60, 61, 61, 195, 210, 213, 188, 164, 61, 122, 189, 202, 198, 69, 190, 55, 18, 16, 190, 96, 108, 151, 189, 179, 39, 71, 189, 245, 206, 226, 61, 107, 108, 4, 62, 18, 9, 253, 189, 12, 159, 246, 189, 91, 217, 115, 189, 23, 39, 57, 189, 126, 120, 68, 191, 36, 2, 49, 62, 106, 115, 46, 189, 189, 183, 190, 190, 255, 34, 56, 61, 167, 35, 132, 189, 186, 222, 30, 190, 94, 27, 167, 61, 127, 54, 222, 190, 93, 216, 21, 191, 176, 167, 163, 60, 61, 63, 18, 62, 21, 132, 38, 62, 6, 142, 6, 191, 1, 212, 1, 62, 53, 250, 226, 61, 66, 10, 221, 190, 9, 40, 195, 190, 180, 235, 49, 190, 170, 206, 155, 190, 228, 98, 216, 190, 195, 191, 174, 190, 248, 47, 194, 190, 166, 178, 192, 62, 231, 6, 199, 190, 115, 250, 7, 190, 4, 164, 36, 190, 223, 243, 11, 62, 124, 115, 23, 61, 124, 187, 82, 61, 83, 150, 36, 63, 20, 198, 140, 59, 123, 158, 238, 190, 187, 191, 111, 62, 47, 25, 11, 190, 215, 86, 63, 190, 2, 146, 142, 191, 233, 160, 141, 190, 187, 113, 15, 63, 8, 212, 108, 190, 122, 206, 83, 191, 255, 254, 108, 191, 33, 145, 155, 62, 247, 143, 150, 62, 112, 235, 137, 61, 82, 22, 1, 59, 57, 1, 173, 60, 223, 93, 68, 62, 231, 54, 226, 189, 195, 13, 60, 62, 229, 61, 19, 191, 128, 210, 219, 188, 155, 143, 133, 188, 86, 9, 51, 189, 160, 99, 132, 189, 133, 183, 222, 61, 140, 80, 114, 62, 23, 2, 29, 62, 42, 252, 228, 189, 115, 245, 128, 190, 181, 181, 175, 188, 134, 111, 38, 191, 200, 22, 64, 190, 223, 91, 243, 61, 232, 164, 16, 190, 198, 122, 15, 61, 75, 214, 142, 61, 211, 129, 69, 62, 79, 132, 22, 189, 232, 214, 205, 189, 120, 118, 20, 189, 29, 189, 251, 60, 237, 36, 44, 62, 91, 57, 14, 62, 31, 191, 45, 61, 139, 134, 42, 191, 245, 222, 40, 62, 136, 9, 2, 63, 238, 211, 56, 189, 21, 133, 201, 62, 216, 7, 189, 190, 89, 227, 196, 61, 195, 58, 23, 62, 198, 224, 6, 191, 20, 43, 23, 61, 90, 229, 48, 62, 203, 147, 175, 190, 252, 254, 215, 61, 8, 191, 231, 190, 83, 176, 226, 191, 209, 40, 132, 191, 223, 144, 176, 189, 197, 210, 202, 188, 151, 218, 27, 62, 141, 39, 192, 59, 161, 73, 92, 62, 189, 91, 241, 190, 68, 74, 144, 62, 112, 86, 26, 59, 218, 211, 225, 190, 12, 145, 247, 189, 194, 113, 0, 191, 168, 1, 205, 188, 207, 66, 4, 191, 51, 62, 133, 188, 109, 78, 211, 190, 72, 5, 61, 62, 73, 214, 137, 62, 1, 236, 205, 62, 104, 26, 137, 62, 93, 26, 8, 62, 132, 113, 210, 61, 53, 201, 29, 191, 111, 131, 207, 189, 31, 118, 232, 188, 110, 198, 25, 190, 86, 122, 5, 190, 211, 121, 105, 62, 143, 71, 135, 190, 131, 56, 32, 62, 57, 9, 149, 62, 26, 207, 52, 189, 102, 65, 150, 190, 142, 3, 100, 189, 143, 243, 111, 62, 57, 84, 221, 60, 253, 41, 80, 62, 147, 152, 204, 190, 33, 177, 26, 190, 0, 192, 238, 190, 5, 220, 115, 61, 110, 195, 128, 62, 96, 212, 42, 191, 70, 179, 190, 60, 173, 84, 58, 190, 109, 164, 23, 63, 232, 148, 6, 188, 159, 1, 36, 189, 99, 157, 34, 190, 170, 169, 66, 61, 236, 217, 37, 61, 26, 148, 26, 62, 112, 134, 32, 191, 115, 157, 166, 61, 167, 213, 224, 61, 62, 252, 130, 60, 203, 193, 119, 189, 103, 5, 137, 62, 250, 137, 234, 62, 211, 126, 25, 190, 27, 62, 11, 61, 158, 87, 151, 191, 0, 27, 61, 62, 218, 15, 58, 191, 185, 153, 138, 189, 20, 126, 107, 190, 160, 6, 194, 191, 97, 137, 21, 191, 166, 17, 57, 190, 241, 28, 12, 189, 218, 230, 32, 190, 239, 45, 118, 61, 202, 127, 170, 60, 120, 150, 27, 62, 219, 240, 214, 189, 35, 231, 38, 61, 233, 142, 209, 189, 207, 25, 225, 187, 253, 69, 44, 190, 203, 132, 185, 59, 51, 2, 64, 190, 143, 215, 75, 190, 111, 100, 90, 189, 57, 114, 50, 62, 91, 229, 153, 187, 220, 83, 161, 189, 169, 238, 122, 188, 5, 218, 204, 61, 31, 179, 39, 62, 7, 252, 30, 189, 15, 172, 45, 190, 151, 165, 210, 59, 84, 36, 73, 190, 163, 54, 29, 62, 112, 144, 12, 62, 93, 69, 225, 61, 13, 30, 124, 189, 144, 13, 119, 61, 239, 73, 35, 61, 128, 240, 170, 190, 82, 108, 167, 62, 81, 209, 83, 189, 121, 113, 9, 188, 214, 29, 44, 62, 2, 83, 73, 62, 217, 238, 233, 61, 197, 204, 161, 190, 114, 244, 42, 62, 151, 171, 41, 61, 237, 247, 59, 62, 31, 43, 211, 60, 139, 249, 83, 189, 43, 43, 42, 62, 102, 203, 203, 190, 116, 180, 233, 189, 245, 19, 83, 60, 45, 136, 23, 188, 71, 105, 76, 61, 53, 242, 198, 60, 40, 206, 45, 190, 71, 123, 132, 62, 3, 114, 49, 61, 4, 182, 167, 61, 100, 191, 118, 190, 5, 186, 248, 61, 42, 229, 188, 188, 206, 10, 76, 190, 94, 13, 211, 190, 244, 148, 72, 190, 246, 243, 228, 188, 47, 31, 114, 61, 1, 154, 16, 191, 229, 140, 137, 189, 42, 229, 169, 61, 236, 11, 51, 190, 130, 137, 43, 190, 11, 173, 68, 189, 127, 66, 45, 190, 232, 95, 199, 189, 207, 132, 140, 61, 211, 181, 9, 190, 136, 220, 0, 190, 244, 48, 38, 61, 153, 191, 153, 189, 175, 109, 0, 61, 30, 150, 199, 61, 191, 61, 238, 189, 218, 182, 23, 62, 177, 62, 161, 189, 79, 92, 18, 61, 112, 156, 172, 189, 254, 27, 63, 190, 51, 161, 58, 190, 167, 170, 116, 59, 230, 214, 192, 61, 32, 140, 190, 61, 48, 250, 135, 189, 199, 118, 26, 61, 235, 3, 24, 61, 10, 155, 77, 60, 20, 99, 52, 189, 115, 161, 3, 189, 206, 174, 29, 59, 185, 69, 167, 60, 114, 137, 43, 62, 168, 93, 216, 189, 48, 164, 2, 191, 207, 52, 157, 62, 240, 252, 58, 61, 139, 156, 52, 190, 101, 66, 18, 189, 190, 252, 183, 190, 66, 118, 122, 61, 44, 18, 102, 190, 90, 192, 131, 61, 235, 180, 154, 190, 154, 171, 27, 62, 94, 48, 173, 62, 199, 113, 75, 62, 250, 73, 40, 62, 59, 40, 136, 62, 151, 186, 156, 62, 222, 107, 96, 191, 135, 197, 44, 189, 93, 145, 40, 62, 39, 178, 110, 189, 19, 50, 139, 190, 53, 108, 52, 62, 193, 181, 140, 190, 215, 159, 101, 62, 171, 68, 0, 62, 4, 208, 7, 62, 93, 88, 81, 190, 53, 8, 92, 188, 240, 141, 173, 61, 47, 39, 4, 62, 55, 148, 234, 188, 145, 77, 10, 190, 175, 248, 72, 62, 219, 188, 39, 61, 2, 9, 139, 62, 175, 77, 187, 62, 49, 217, 98, 191, 100, 32, 143, 190, 60, 229, 197, 189, 27, 29, 252, 60, 198, 24, 54, 62, 58, 60, 118, 62, 239, 214, 1, 61, 37, 228, 218, 190, 192, 228, 112, 190, 41, 155, 131, 62, 93, 3, 183, 189, 197, 27, 188, 62, 121, 53, 197, 190, 245, 103, 229, 188, 217, 128, 11, 190, 153, 115, 37, 62, 230, 148, 11, 62, 55, 95, 197, 190, 67, 116, 21, 62, 88, 216, 217, 190, 177, 50, 146, 60, 135, 197, 216, 190, 69, 129, 157, 188, 139, 255, 171, 190, 196, 5, 236, 190, 244, 97, 169, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 44, 150, 62, 208, 186, 176, 61, 39, 235, 5, 61, 180, 234, 118, 61, 72, 163, 60, 62, 49, 148, 162, 61, 87, 170, 157, 187, 199, 121, 210, 60, 139, 150, 223, 189, 150, 124, 58, 190, 208, 199, 153, 188, 121, 125, 132, 62, 54, 147, 61, 62, 217, 225, 255, 189, 191, 101, 21, 62, 113, 54, 64, 62, 97, 22, 55, 62, 19, 142, 71, 62, 64, 44, 166, 186, 180, 117, 205, 189, 124, 17, 128, 62, 134, 250, 57, 60, 164, 115, 145, 190, 116, 26, 11, 62, 11, 182, 25, 62, 10, 55, 92, 62, 206, 26, 158, 62, 128, 70, 65, 190, 154, 130, 155, 189, 47, 93, 183, 189, 94, 2, 242, 60, 125, 249, 216, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 111, 180, 62, 180, 221, 144, 63, 25, 77, 174, 188, 214, 110, 70, 190, 207, 33, 120, 190, 159, 172, 125, 190, 49, 150, 140, 62, 156, 227, 145, 191, 33, 172, 59, 63, 223, 176, 138, 63, 32, 160, 0, 191, 238, 247, 245, 190, 188, 149, 83, 189, 171, 212, 150, 190, 88, 209, 129, 63, 166, 15, 142, 63, 84, 144, 34, 61, 44, 189, 105, 62, 195, 171, 52, 191, 181, 139, 176, 62, 179, 189, 167, 190, 242, 166, 13, 189, 86, 237, 144, 191, 2, 165, 39, 63, 135, 17, 148, 61, 36, 57, 223, 62, 90, 44, 77, 191, 210, 92, 164, 189, 232, 213, 176, 188, 4, 163, 212, 61, 205, 60, 220, 62, 247, 35, 172, 190, 191, 238, 26, 190, 9, 129, 204, 62, 136, 223, 138, 191, 27, 0, 212, 189, 29, 220, 144, 190, 16, 204, 145, 190, 124, 23, 134, 189, 218, 180, 143, 190, 110, 224, 57, 60, 221, 12, 34, 63, 71, 64, 41, 190, 230, 165, 89, 190, 176, 228, 244, 190, 62, 104, 158, 62, 197, 96, 248, 62, 247, 141, 232, 61, 254, 225, 130, 190, 60, 224, 55, 190, 222, 10, 16, 63, 166, 38, 72, 190, 89, 27, 166, 190, 225, 165, 25, 62, 111, 195, 48, 63, 146, 252, 168, 61, 4, 111, 23, 191, 32, 59, 77, 189, 69, 205, 49, 62, 201, 24, 145, 60, 30, 84, 30, 190, 32, 173, 97, 61, 220, 206, 104, 189, 171, 66, 103, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 47, 13, 61, 19, 241, 251, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {96, 82, 179, 62, 92, 241, 229, 190, 23, 116, 172, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {89, 254, 1, 64, 84, 198, 192, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0076/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}