// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 135, 193, 190, 213, 89, 90, 191, 39, 125, 55, 190, 10, 193, 8, 62, 224, 17, 180, 62, 215, 23, 145, 190, 232, 249, 41, 63, 42, 155, 179, 62, 140, 66, 72, 63, 57, 8, 136, 62, 216, 244, 28, 191, 96, 110, 247, 62, 142, 89, 152, 62, 22, 247, 89, 62, 18, 32, 181, 190, 122, 58, 237, 60, 198, 209, 42, 190, 228, 219, 211, 62, 96, 78, 253, 62, 136, 171, 20, 191, 119, 38, 135, 190, 100, 207, 178, 189, 112, 152, 16, 191, 245, 63, 252, 62, 215, 56, 160, 190, 13, 66, 42, 63, 9, 201, 141, 190, 172, 131, 213, 190, 75, 141, 107, 191, 197, 53, 203, 190, 72, 146, 129, 190, 180, 186, 233, 62, 24, 165, 16, 191, 98, 250, 11, 191, 23, 244, 162, 62, 136, 73, 26, 191, 169, 119, 130, 61, 1, 253, 151, 190, 145, 105, 234, 62, 198, 107, 248, 190, 81, 244, 33, 63, 185, 42, 66, 61, 46, 4, 184, 190, 192, 155, 86, 191, 75, 147, 128, 62, 147, 245, 232, 62, 172, 75, 185, 62, 187, 166, 182, 61, 18, 2, 225, 190, 55, 168, 202, 189, 20, 124, 18, 63, 108, 165, 0, 63, 188, 253, 170, 189, 177, 196, 96, 60, 254, 97, 198, 190, 137, 45, 84, 63, 22, 146, 155, 190, 35, 221, 226, 188, 37, 2, 16, 63, 17, 0, 148, 190, 82, 80, 200, 62, 234, 192, 221, 190, 126, 152, 11, 191, 230, 83, 5, 190, 158, 135, 49, 63, 254, 185, 249, 61, 178, 30, 249, 189, 164, 123, 139, 63, 16, 217, 177, 190, 166, 34, 3, 190, 194, 229, 117, 61, 145, 173, 214, 190, 147, 88, 73, 62, 230, 240, 100, 63, 27, 153, 184, 62, 182, 135, 169, 190, 196, 14, 88, 191, 150, 81, 232, 62, 104, 149, 52, 191, 4, 36, 131, 62, 30, 106, 236, 188, 151, 202, 147, 190, 68, 154, 77, 63, 204, 140, 27, 62, 81, 52, 13, 61, 6, 191, 85, 189, 211, 246, 205, 62, 81, 62, 12, 62, 23, 231, 51, 191, 77, 246, 244, 190, 200, 29, 223, 190, 217, 6, 10, 191, 208, 120, 133, 63, 93, 167, 3, 63, 169, 101, 21, 191, 167, 120, 107, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 185, 24, 191, 4, 158, 36, 191, 168, 250, 193, 190, 230, 179, 6, 63, 194, 31, 191, 62, 97, 58, 176, 190, 71, 19, 184, 190, 48, 46, 239, 190, 191, 53, 22, 190, 34, 2, 140, 62, 20, 21, 254, 190, 102, 34, 22, 190, 243, 231, 17, 63, 231, 93, 68, 190, 217, 245, 4, 189, 137, 207, 254, 62, 111, 23, 202, 62, 207, 1, 44, 63, 227, 29, 230, 187, 95, 106, 189, 61, 128, 73, 70, 62, 150, 160, 22, 63, 219, 47, 224, 62, 196, 80, 10, 191, 253, 42, 135, 62, 109, 192, 188, 190, 243, 50, 228, 62, 148, 144, 17, 190, 0, 193, 1, 188, 234, 78, 119, 190, 95, 119, 251, 190, 67, 4, 154, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 34, 147, 189, 126, 76, 180, 188, 65, 117, 179, 190, 202, 31, 21, 62, 31, 115, 33, 61, 23, 17, 141, 190, 181, 74, 119, 62, 39, 37, 159, 190, 169, 67, 12, 189, 138, 19, 88, 190, 254, 26, 160, 189, 218, 74, 211, 189, 133, 158, 14, 62, 146, 219, 34, 62, 239, 242, 138, 61, 160, 77, 148, 62, 68, 49, 91, 61, 132, 189, 163, 62, 55, 34, 168, 190, 224, 250, 33, 61, 57, 55, 8, 62, 21, 131, 201, 60, 164, 112, 199, 190, 162, 175, 0, 62, 89, 145, 133, 189, 180, 71, 7, 62, 105, 192, 210, 189, 96, 205, 88, 62, 96, 195, 128, 188, 173, 181, 52, 62, 2, 244, 93, 62, 46, 106, 27, 62, 215, 74, 99, 62, 14, 127, 84, 189, 2, 124, 230, 190, 60, 229, 219, 187, 177, 255, 65, 61, 75, 101, 13, 191, 217, 82, 132, 62, 210, 246, 54, 191, 76, 188, 60, 190, 71, 229, 168, 190, 191, 25, 27, 190, 45, 226, 181, 190, 32, 119, 106, 61, 99, 115, 236, 60, 51, 60, 11, 62, 115, 162, 143, 189, 83, 81, 227, 61, 44, 185, 22, 190, 178, 152, 156, 56, 160, 148, 48, 62, 246, 221, 26, 189, 40, 225, 23, 62, 127, 231, 184, 190, 224, 198, 196, 60, 131, 118, 80, 61, 251, 163, 170, 62, 24, 177, 77, 188, 156, 167, 141, 62, 230, 121, 98, 60, 150, 252, 125, 62, 105, 70, 180, 61, 99, 3, 222, 62, 227, 96, 199, 189, 211, 203, 7, 190, 245, 49, 61, 188, 146, 73, 83, 62, 237, 12, 6, 62, 138, 199, 206, 190, 101, 83, 167, 190, 109, 85, 180, 190, 175, 63, 34, 190, 216, 131, 15, 190, 24, 111, 253, 189, 240, 238, 180, 190, 111, 43, 214, 61, 214, 117, 163, 61, 179, 89, 135, 61, 29, 155, 204, 61, 146, 20, 30, 189, 238, 111, 149, 62, 218, 226, 141, 190, 133, 153, 189, 60, 72, 19, 202, 189, 240, 110, 157, 61, 131, 106, 24, 190, 195, 119, 98, 190, 14, 197, 158, 187, 86, 187, 2, 190, 23, 138, 70, 189, 200, 105, 92, 190, 10, 145, 46, 190, 26, 6, 198, 189, 120, 191, 182, 60, 129, 82, 91, 189, 58, 61, 148, 190, 253, 146, 113, 61, 149, 223, 99, 62, 125, 37, 81, 189, 208, 42, 245, 61, 196, 241, 147, 62, 97, 178, 45, 190, 7, 96, 194, 61, 54, 127, 54, 189, 145, 56, 144, 189, 241, 119, 176, 189, 21, 179, 179, 61, 41, 58, 184, 61, 163, 222, 196, 61, 188, 119, 166, 61, 158, 198, 193, 189, 26, 87, 196, 189, 19, 237, 2, 189, 189, 110, 108, 62, 69, 246, 232, 61, 219, 173, 86, 189, 159, 73, 97, 61, 155, 181, 28, 60, 132, 171, 46, 190, 50, 102, 68, 61, 110, 199, 128, 190, 199, 178, 155, 61, 253, 84, 175, 190, 158, 61, 236, 59, 164, 205, 13, 190, 106, 31, 214, 61, 14, 193, 238, 190, 220, 73, 61, 62, 29, 160, 227, 189, 183, 170, 230, 60, 55, 206, 46, 62, 107, 15, 91, 187, 136, 166, 8, 62, 199, 145, 69, 190, 116, 84, 168, 61, 29, 37, 142, 61, 118, 26, 59, 188, 13, 195, 246, 61, 0, 215, 25, 190, 90, 238, 25, 62, 176, 79, 230, 189, 145, 225, 184, 61, 41, 49, 9, 62, 169, 191, 136, 188, 67, 129, 164, 61, 247, 223, 168, 61, 150, 10, 62, 61, 3, 159, 254, 61, 183, 84, 16, 62, 250, 226, 1, 62, 101, 98, 150, 61, 131, 11, 203, 189, 112, 113, 136, 189, 19, 183, 12, 62, 26, 109, 118, 190, 19, 107, 62, 61, 0, 70, 169, 61, 132, 197, 32, 190, 105, 3, 28, 191, 207, 180, 202, 59, 91, 36, 99, 61, 17, 194, 131, 62, 88, 160, 255, 61, 71, 139, 179, 61, 58, 28, 154, 61, 181, 97, 170, 189, 197, 111, 178, 62, 234, 210, 145, 190, 144, 92, 41, 62, 185, 21, 86, 190, 151, 49, 224, 189, 251, 159, 11, 188, 200, 158, 93, 59, 181, 159, 133, 61, 229, 96, 53, 190, 224, 94, 145, 61, 68, 54, 192, 61, 129, 90, 4, 62, 3, 188, 130, 190, 255, 148, 123, 189, 88, 229, 189, 189, 127, 42, 191, 189, 3, 130, 55, 190, 244, 149, 45, 189, 36, 135, 51, 190, 15, 30, 34, 61, 165, 206, 140, 189, 201, 82, 209, 61, 141, 202, 21, 190, 201, 80, 170, 189, 38, 38, 194, 61, 108, 33, 4, 191, 153, 179, 93, 62, 119, 85, 143, 190, 21, 242, 249, 61, 74, 94, 168, 61, 139, 41, 172, 190, 117, 158, 133, 60, 67, 106, 134, 190, 81, 30, 132, 62, 156, 193, 0, 190, 92, 150, 186, 189, 198, 32, 82, 188, 95, 203, 219, 187, 132, 172, 127, 62, 160, 123, 42, 190, 48, 63, 10, 62, 233, 57, 238, 189, 243, 160, 40, 189, 178, 42, 72, 62, 217, 198, 57, 62, 28, 122, 126, 188, 35, 80, 36, 62, 224, 154, 62, 61, 201, 164, 197, 61, 33, 203, 57, 62, 243, 83, 108, 62, 64, 112, 230, 61, 23, 89, 195, 62, 171, 76, 166, 61, 91, 220, 13, 189, 10, 77, 33, 62, 207, 43, 78, 62, 141, 109, 174, 188, 192, 181, 145, 190, 162, 94, 194, 190, 112, 185, 170, 189, 171, 186, 18, 191, 60, 30, 55, 61, 48, 162, 197, 189, 232, 195, 90, 61, 53, 229, 84, 191, 175, 64, 196, 62, 168, 70, 221, 190, 156, 67, 22, 190, 180, 208, 17, 62, 77, 218, 175, 62, 224, 160, 105, 60, 203, 109, 46, 191, 111, 197, 9, 62, 73, 19, 178, 61, 231, 203, 203, 62, 175, 162, 109, 191, 62, 66, 107, 190, 132, 201, 43, 62, 9, 127, 144, 62, 44, 166, 161, 190, 34, 54, 214, 190, 108, 30, 112, 190, 140, 19, 31, 62, 115, 71, 48, 191, 160, 186, 134, 190, 21, 249, 2, 190, 3, 75, 120, 191, 161, 242, 4, 190, 244, 134, 163, 61, 206, 172, 164, 190, 89, 141, 25, 188, 142, 95, 57, 190, 160, 130, 222, 57, 221, 235, 234, 190, 163, 246, 113, 187, 49, 165, 107, 190, 135, 63, 212, 189, 247, 57, 157, 189, 56, 157, 66, 60, 154, 131, 180, 190, 181, 137, 187, 188, 160, 221, 174, 61, 146, 66, 160, 61, 188, 223, 158, 61, 93, 79, 225, 61, 120, 36, 168, 189, 140, 231, 172, 61, 33, 51, 65, 190, 236, 118, 83, 61, 75, 205, 235, 61, 113, 204, 93, 190, 191, 228, 47, 189, 180, 241, 111, 189, 111, 219, 19, 62, 180, 62, 170, 61, 79, 6, 129, 62, 0, 25, 191, 61, 166, 123, 167, 189, 214, 135, 234, 189, 206, 218, 144, 61, 232, 64, 71, 191, 66, 162, 156, 61, 144, 236, 98, 190, 108, 208, 43, 190, 130, 9, 155, 61, 65, 94, 19, 189, 233, 239, 59, 62, 181, 240, 30, 62, 99, 41, 26, 62, 10, 197, 51, 190, 151, 251, 86, 62, 13, 25, 185, 189, 150, 161, 162, 190, 112, 211, 160, 61, 127, 57, 42, 190, 241, 71, 131, 62, 172, 245, 214, 189, 156, 179, 206, 59, 95, 101, 43, 61, 107, 9, 13, 62, 172, 21, 125, 62, 147, 86, 148, 190, 52, 108, 38, 190, 19, 123, 92, 189, 83, 254, 28, 190, 221, 136, 133, 61, 126, 167, 137, 190, 2, 95, 144, 190, 58, 245, 85, 190, 125, 90, 201, 60, 137, 136, 73, 190, 105, 255, 2, 63, 207, 112, 220, 61, 150, 132, 110, 188, 223, 92, 1, 190, 218, 16, 135, 62, 164, 39, 99, 58, 79, 42, 231, 59, 0, 38, 235, 58, 205, 148, 43, 189, 111, 4, 216, 189, 93, 204, 72, 62, 145, 142, 13, 190, 106, 226, 188, 61, 218, 233, 171, 60, 201, 211, 73, 190, 47, 153, 28, 62, 72, 2, 157, 190, 114, 212, 84, 189, 150, 179, 11, 190, 125, 174, 143, 61, 135, 233, 176, 61, 112, 88, 106, 189, 234, 147, 175, 189, 133, 218, 228, 61, 253, 155, 169, 189, 64, 242, 81, 190, 29, 218, 47, 61, 98, 148, 22, 188, 209, 35, 78, 61, 123, 73, 136, 189, 59, 255, 121, 61, 225, 134, 14, 189, 200, 96, 121, 190, 98, 166, 232, 188, 158, 19, 205, 188, 68, 193, 5, 62, 183, 196, 83, 62, 253, 124, 3, 62, 249, 50, 240, 188, 126, 82, 178, 190, 152, 4, 10, 189, 55, 79, 71, 190, 125, 198, 210, 61, 255, 19, 68, 190, 70, 45, 17, 62, 221, 155, 207, 60, 216, 76, 179, 189, 15, 206, 195, 189, 153, 51, 130, 62, 143, 226, 151, 61, 75, 217, 0, 63, 44, 149, 213, 188, 9, 203, 127, 190, 55, 68, 105, 189, 147, 221, 44, 62, 115, 125, 85, 61, 162, 195, 47, 190, 177, 144, 13, 62, 156, 177, 65, 190, 175, 42, 134, 189, 215, 188, 39, 191, 91, 138, 92, 190, 104, 128, 24, 62, 109, 143, 13, 191, 127, 67, 30, 191, 151, 235, 193, 189, 179, 137, 36, 190, 173, 200, 241, 189, 218, 115, 171, 59, 190, 249, 122, 61, 41, 39, 197, 61, 230, 194, 113, 190, 241, 100, 150, 61, 119, 173, 30, 189, 164, 182, 81, 61, 226, 194, 161, 61, 170, 6, 138, 61, 213, 13, 118, 61, 1, 228, 113, 190, 92, 228, 37, 190, 99, 80, 198, 62, 97, 253, 14, 190, 120, 111, 173, 62, 46, 6, 115, 190, 99, 159, 133, 61, 60, 88, 51, 188, 143, 199, 16, 62, 90, 4, 188, 61, 250, 162, 175, 189, 252, 210, 192, 189, 177, 74, 194, 190, 7, 224, 133, 62, 155, 60, 36, 190, 143, 242, 188, 190, 76, 63, 211, 60, 17, 149, 166, 190, 151, 85, 224, 189, 180, 46, 30, 62, 97, 186, 197, 188, 225, 207, 74, 190, 134, 92, 13, 61, 142, 162, 81, 188, 132, 115, 139, 190, 58, 25, 128, 189, 204, 156, 164, 59, 214, 124, 239, 61, 53, 254, 127, 61, 115, 54, 172, 59, 217, 105, 47, 189, 14, 73, 148, 61, 130, 127, 195, 61, 66, 168, 1, 62, 65, 67, 203, 188, 202, 47, 182, 59, 47, 65, 194, 60, 39, 208, 22, 62, 187, 201, 112, 189, 118, 15, 27, 62, 253, 140, 22, 189, 163, 19, 181, 61, 122, 157, 250, 189, 222, 31, 2, 188, 4, 187, 50, 62, 44, 191, 110, 189, 155, 226, 86, 190, 40, 246, 11, 190, 11, 65, 28, 62, 242, 203, 55, 190, 249, 165, 142, 62, 75, 160, 231, 61, 161, 89, 68, 190, 239, 43, 236, 190, 105, 166, 83, 62, 132, 88, 47, 190, 104, 79, 144, 190, 86, 199, 138, 189, 156, 180, 190, 190, 117, 254, 44, 190, 166, 221, 113, 190, 64, 203, 99, 190, 11, 65, 204, 190, 228, 23, 179, 187, 117, 121, 142, 189, 153, 111, 193, 62, 182, 227, 140, 62, 94, 167, 121, 62, 127, 0, 85, 62, 193, 233, 244, 190, 178, 54, 18, 61, 0, 117, 30, 189, 248, 207, 165, 190, 151, 125, 207, 190, 237, 102, 159, 60, 67, 137, 57, 190, 39, 106, 51, 62, 122, 116, 149, 61, 93, 105, 223, 62, 234, 165, 49, 188, 14, 173, 168, 189, 87, 184, 26, 62, 197, 228, 14, 62, 207, 188, 221, 187, 233, 31, 223, 189, 52, 153, 154, 189, 233, 195, 238, 61, 77, 212, 78, 61, 195, 139, 213, 189, 160, 103, 84, 62, 121, 145, 230, 189, 212, 48, 56, 190, 202, 246, 207, 189, 119, 70, 248, 189, 228, 247, 150, 189, 228, 181, 168, 61, 41, 14, 214, 188, 0, 67, 150, 62, 120, 50, 109, 61, 201, 194, 223, 61, 46, 135, 142, 61, 195, 121, 25, 191, 12, 95, 6, 62, 181, 160, 16, 188, 128, 25, 183, 188, 78, 195, 234, 189, 97, 237, 241, 189, 210, 100, 103, 190, 89, 89, 40, 62, 106, 43, 35, 190, 208, 72, 251, 189, 67, 99, 200, 189, 35, 21, 40, 61, 222, 120, 149, 189, 206, 246, 47, 62, 120, 206, 200, 60, 86, 211, 74, 189, 173, 22, 210, 61, 164, 145, 83, 62, 166, 104, 41, 62, 18, 151, 71, 190, 46, 56, 55, 62, 185, 39, 23, 190, 52, 53, 3, 62, 126, 167, 231, 188, 231, 148, 137, 61, 236, 7, 28, 190, 185, 95, 100, 62, 221, 99, 112, 62, 60, 36, 171, 189, 135, 194, 28, 62, 195, 110, 132, 189, 196, 80, 132, 62, 38, 222, 134, 190, 119, 203, 69, 189, 190, 51, 164, 61, 77, 163, 69, 62, 211, 61, 180, 61, 167, 154, 156, 186, 66, 97, 169, 187, 108, 4, 142, 61, 204, 183, 222, 189, 177, 197, 171, 62, 102, 73, 188, 189, 192, 184, 171, 61, 202, 167, 86, 186, 27, 208, 166, 62, 72, 198, 16, 62, 140, 205, 31, 190, 48, 80, 0, 190, 109, 251, 175, 188, 154, 68, 59, 190, 43, 7, 15, 61, 146, 62, 6, 62, 106, 106, 73, 190, 196, 0, 7, 190, 127, 232, 33, 190, 52, 10, 95, 190, 214, 132, 80, 190, 152, 23, 99, 189, 243, 113, 91, 190, 84, 174, 215, 61, 216, 191, 160, 62, 101, 225, 243, 61, 167, 213, 27, 62, 191, 116, 149, 190, 215, 148, 193, 189, 191, 171, 78, 62, 152, 13, 34, 190, 11, 229, 13, 189, 207, 117, 48, 61, 91, 175, 182, 61, 74, 162, 240, 188, 235, 188, 129, 60, 99, 147, 62, 62, 35, 231, 36, 62, 73, 226, 23, 190, 85, 217, 102, 190, 235, 117, 63, 62, 54, 194, 131, 61, 154, 92, 46, 190, 96, 53, 178, 62, 95, 12, 226, 189, 241, 61, 72, 189, 163, 80, 132, 62, 87, 242, 128, 190, 243, 179, 227, 189, 125, 39, 192, 60, 220, 228, 156, 61, 190, 221, 212, 61, 148, 236, 197, 188, 146, 144, 150, 61, 141, 61, 48, 190, 82, 71, 139, 190, 33, 74, 21, 62, 46, 205, 99, 190, 244, 203, 24, 190, 95, 79, 113, 62, 215, 177, 222, 61, 141, 136, 85, 190, 173, 164, 26, 62, 56, 151, 105, 62, 108, 77, 244, 189, 222, 227, 109, 61, 89, 200, 243, 189, 29, 103, 251, 189, 210, 123, 188, 189, 243, 156, 171, 60, 210, 121, 203, 189, 35, 9, 41, 190, 23, 42, 220, 190, 242, 106, 36, 190, 20, 100, 210, 60, 173, 23, 41, 190, 211, 251, 212, 190, 101, 76, 162, 61, 234, 202, 147, 189, 19, 250, 130, 62, 147, 82, 137, 61, 39, 134, 35, 62, 161, 17, 61, 61, 142, 96, 37, 62, 10, 247, 53, 189, 241, 97, 182, 190, 8, 56, 197, 190, 198, 161, 143, 60, 79, 100, 240, 189, 63, 137, 35, 61, 2, 97, 39, 60, 234, 139, 19, 190, 222, 85, 23, 190, 101, 194, 151, 61, 59, 19, 59, 190, 14, 15, 138, 189, 24, 103, 75, 62, 68, 16, 37, 190, 102, 209, 28, 190, 58, 190, 166, 189, 10, 22, 173, 189, 108, 61, 177, 190, 124, 148, 168, 188, 42, 8, 141, 190, 94, 255, 143, 62, 153, 42, 238, 60, 70, 141, 205, 61, 113, 246, 253, 61, 35, 234, 210, 61, 213, 133, 199, 189, 251, 125, 132, 62, 0, 195, 110, 190, 218, 234, 143, 189, 121, 124, 27, 190, 198, 185, 73, 189, 236, 86, 145, 188, 65, 126, 89, 62, 11, 209, 254, 188, 186, 66, 143, 189, 228, 77, 51, 190, 206, 95, 128, 62, 73, 7, 135, 189, 251, 193, 139, 62, 181, 15, 0, 61, 205, 102, 105, 189, 249, 32, 216, 188, 168, 14, 249, 60, 39, 79, 55, 62, 57, 70, 218, 61, 181, 95, 4, 62, 138, 130, 2, 191, 192, 51, 115, 62, 228, 211, 157, 190, 140, 72, 247, 189, 49, 52, 155, 61, 183, 246, 147, 190, 105, 103, 12, 191, 28, 1, 105, 61, 14, 83, 20, 62, 190, 2, 96, 189, 232, 128, 44, 190, 103, 248, 79, 189, 23, 190, 22, 62, 187, 120, 134, 189, 240, 198, 88, 60, 218, 218, 28, 61, 79, 159, 213, 189, 139, 208, 13, 62, 12, 171, 47, 190, 16, 40, 203, 60, 236, 96, 164, 188, 92, 186, 102, 61, 162, 140, 41, 190, 60, 156, 249, 188, 173, 235, 1, 62, 147, 228, 99, 189, 49, 190, 15, 62, 5, 220, 72, 190, 110, 170, 159, 61, 184, 127, 185, 59, 164, 61, 122, 189, 114, 64, 37, 190, 55, 18, 16, 190, 48, 199, 44, 189, 57, 32, 138, 188, 194, 233, 17, 62, 107, 108, 4, 62, 18, 9, 253, 189, 12, 159, 246, 189, 209, 140, 167, 60, 58, 17, 177, 188, 46, 53, 164, 189, 70, 223, 190, 61, 134, 18, 175, 188, 251, 176, 65, 190, 26, 246, 54, 62, 120, 123, 53, 190, 145, 213, 242, 189, 48, 167, 58, 61, 148, 19, 53, 190, 88, 105, 64, 61, 237, 162, 133, 188, 228, 119, 76, 189, 140, 91, 235, 189, 229, 102, 6, 190, 121, 139, 128, 189, 158, 146, 53, 62, 152, 204, 60, 190, 25, 38, 118, 190, 211, 134, 44, 189, 205, 48, 228, 61, 126, 116, 109, 190, 135, 154, 254, 189, 14, 23, 140, 189, 16, 163, 57, 189, 128, 244, 92, 190, 176, 152, 19, 190, 104, 170, 78, 59, 120, 247, 194, 61, 232, 93, 11, 61, 83, 244, 14, 62, 83, 168, 47, 187, 189, 131, 15, 190, 163, 73, 216, 190, 50, 153, 96, 62, 161, 112, 79, 190, 236, 171, 21, 190, 102, 222, 5, 191, 109, 58, 55, 190, 53, 208, 3, 62, 135, 87, 118, 190, 180, 127, 62, 190, 167, 240, 73, 191, 252, 226, 150, 62, 213, 230, 70, 62, 209, 11, 181, 61, 217, 204, 123, 60, 242, 200, 133, 61, 75, 49, 23, 61, 162, 114, 142, 189, 82, 198, 92, 189, 143, 78, 132, 190, 17, 81, 93, 60, 15, 99, 17, 190, 57, 187, 153, 60, 184, 89, 98, 58, 117, 59, 76, 62, 204, 249, 228, 61, 154, 156, 161, 61, 24, 129, 133, 61, 62, 18, 115, 190, 199, 97, 195, 61, 107, 104, 91, 190, 98, 19, 63, 190, 217, 16, 217, 189, 45, 214, 89, 190, 113, 213, 76, 189, 118, 124, 120, 60, 64, 19, 107, 62, 48, 124, 117, 189, 210, 71, 137, 189, 4, 162, 182, 189, 138, 51, 23, 62, 155, 19, 211, 61, 98, 200, 79, 61, 223, 217, 228, 188, 205, 250, 34, 190, 166, 248, 75, 61, 191, 36, 254, 62, 167, 167, 43, 189, 167, 158, 148, 62, 28, 38, 146, 190, 207, 102, 240, 61, 105, 182, 221, 61, 133, 47, 218, 190, 126, 96, 13, 189, 4, 20, 87, 61, 23, 254, 223, 189, 136, 204, 232, 61, 214, 28, 47, 190, 27, 77, 65, 190, 67, 234, 70, 189, 254, 236, 172, 188, 78, 87, 189, 60, 99, 219, 233, 61, 34, 194, 78, 190, 69, 59, 60, 62, 164, 87, 203, 190, 65, 178, 130, 62, 251, 46, 51, 61, 252, 241, 197, 190, 82, 154, 156, 189, 7, 169, 9, 191, 49, 190, 156, 189, 253, 237, 156, 190, 197, 71, 223, 61, 206, 235, 56, 189, 130, 7, 24, 62, 1, 128, 184, 188, 230, 79, 133, 62, 38, 85, 157, 62, 185, 233, 92, 61, 44, 227, 94, 61, 31, 143, 161, 190, 212, 138, 44, 61, 183, 29, 39, 186, 83, 56, 5, 190, 220, 241, 112, 190, 118, 179, 252, 61, 199, 63, 218, 189, 246, 113, 227, 61, 70, 252, 197, 60, 5, 154, 26, 188, 17, 199, 221, 188, 64, 79, 234, 61, 65, 165, 136, 62, 46, 52, 183, 61, 197, 111, 178, 189, 254, 23, 113, 190, 175, 127, 17, 189, 81, 17, 194, 190, 150, 102, 52, 58, 231, 95, 253, 188, 17, 10, 254, 190, 16, 50, 132, 188, 64, 31, 132, 190, 220, 202, 193, 62, 61, 1, 132, 189, 184, 68, 156, 189, 207, 153, 204, 186, 55, 13, 105, 62, 128, 210, 179, 61, 0, 28, 46, 62, 240, 35, 131, 189, 129, 16, 24, 62, 238, 255, 38, 62, 201, 255, 222, 189, 114, 107, 145, 189, 126, 131, 129, 62, 76, 244, 252, 62, 5, 38, 142, 189, 153, 106, 213, 60, 191, 171, 39, 191, 71, 142, 52, 62, 145, 47, 227, 190, 228, 155, 71, 189, 180, 161, 145, 190, 226, 210, 167, 191, 141, 180, 235, 190, 166, 17, 57, 190, 241, 28, 12, 189, 218, 230, 32, 190, 239, 45, 118, 61, 202, 127, 170, 60, 120, 150, 27, 62, 219, 240, 214, 189, 35, 231, 38, 61, 233, 142, 209, 189, 207, 25, 225, 187, 253, 69, 44, 190, 203, 132, 185, 59, 51, 2, 64, 190, 143, 215, 75, 190, 111, 100, 90, 189, 57, 114, 50, 62, 91, 229, 153, 187, 220, 83, 161, 189, 169, 238, 122, 188, 5, 218, 204, 61, 31, 179, 39, 62, 7, 252, 30, 189, 15, 172, 45, 190, 151, 165, 210, 59, 84, 36, 73, 190, 163, 54, 29, 62, 112, 144, 12, 62, 93, 69, 225, 61, 13, 30, 124, 189, 144, 13, 119, 61, 239, 73, 35, 61, 128, 240, 170, 190, 117, 168, 52, 62, 229, 246, 141, 186, 40, 19, 118, 60, 113, 211, 35, 62, 207, 115, 51, 62, 214, 150, 226, 61, 254, 131, 135, 190, 143, 125, 69, 62, 146, 119, 175, 61, 62, 48, 163, 61, 128, 199, 209, 60, 230, 13, 21, 61, 170, 238, 52, 62, 234, 138, 22, 189, 87, 241, 62, 190, 166, 70, 73, 60, 235, 117, 181, 60, 187, 159, 66, 60, 90, 112, 241, 61, 12, 223, 87, 190, 59, 252, 67, 62, 142, 190, 222, 61, 59, 209, 149, 61, 41, 206, 36, 190, 79, 65, 41, 62, 60, 99, 154, 189, 11, 44, 215, 60, 132, 103, 213, 189, 192, 150, 20, 190, 185, 149, 19, 58, 225, 206, 129, 61, 226, 151, 22, 191, 229, 140, 137, 189, 42, 229, 169, 61, 236, 11, 51, 190, 130, 137, 43, 190, 11, 173, 68, 189, 127, 66, 45, 190, 232, 95, 199, 189, 207, 132, 140, 61, 211, 181, 9, 190, 136, 220, 0, 190, 244, 48, 38, 61, 153, 191, 153, 189, 175, 109, 0, 61, 30, 150, 199, 61, 191, 61, 238, 189, 218, 182, 23, 62, 177, 62, 161, 189, 79, 92, 18, 61, 112, 156, 172, 189, 254, 27, 63, 190, 51, 161, 58, 190, 167, 170, 116, 59, 230, 214, 192, 61, 32, 140, 190, 61, 48, 250, 135, 189, 199, 118, 26, 61, 235, 3, 24, 61, 10, 155, 77, 60, 20, 99, 52, 189, 115, 161, 3, 189, 206, 174, 29, 59, 185, 69, 167, 60, 165, 171, 197, 188, 182, 0, 133, 190, 69, 97, 251, 190, 6, 192, 119, 62, 2, 115, 130, 187, 111, 124, 34, 190, 171, 235, 48, 189, 132, 71, 215, 190, 77, 113, 191, 189, 228, 131, 95, 189, 59, 61, 90, 189, 232, 235, 182, 190, 194, 106, 182, 61, 129, 126, 246, 60, 175, 18, 69, 61, 91, 108, 45, 62, 123, 91, 62, 62, 112, 243, 105, 62, 105, 126, 251, 190, 22, 79, 155, 60, 193, 87, 27, 62, 76, 10, 93, 60, 176, 11, 146, 190, 9, 82, 34, 57, 55, 218, 208, 189, 131, 172, 28, 62, 81, 107, 44, 189, 13, 191, 65, 62, 38, 247, 78, 61, 153, 255, 155, 188, 18, 233, 164, 61, 240, 53, 10, 62, 167, 141, 227, 60, 202, 194, 53, 61, 189, 210, 205, 61, 0, 70, 82, 189, 198, 38, 116, 62, 118, 78, 128, 61, 45, 112, 60, 191, 107, 46, 57, 189, 236, 113, 7, 189, 91, 157, 185, 61, 145, 252, 147, 61, 31, 186, 127, 62, 32, 255, 115, 189, 188, 39, 149, 189, 152, 175, 75, 190, 68, 94, 70, 62, 26, 36, 39, 61, 129, 173, 158, 62, 205, 24, 156, 189, 72, 172, 3, 190, 61, 245, 255, 189, 247, 203, 32, 62, 192, 26, 63, 62, 81, 204, 128, 190, 213, 107, 135, 61, 42, 25, 170, 190, 247, 66, 140, 62, 196, 51, 116, 190, 174, 201, 0, 189, 169, 205, 125, 190, 169, 50, 237, 190, 134, 162, 105, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 87, 99, 62, 77, 96, 202, 61, 25, 192, 234, 188, 154, 98, 203, 58, 176, 160, 214, 61, 182, 42, 10, 62, 95, 81, 21, 62, 38, 241, 169, 61, 218, 223, 125, 189, 101, 90, 135, 189, 107, 205, 83, 189, 8, 200, 134, 62, 84, 122, 131, 61, 140, 200, 0, 190, 10, 95, 74, 62, 128, 204, 26, 62, 229, 119, 112, 62, 179, 20, 123, 62, 251, 226, 74, 189, 22, 179, 153, 189, 171, 249, 116, 62, 179, 146, 48, 61, 75, 26, 47, 190, 17, 146, 75, 189, 197, 251, 199, 61, 242, 204, 228, 61, 183, 207, 175, 62, 128, 70, 65, 190, 215, 14, 227, 189, 47, 93, 183, 189, 83, 103, 30, 189, 234, 76, 45, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 58, 203, 62, 1, 203, 7, 63, 139, 25, 139, 189, 135, 130, 60, 190, 7, 233, 208, 189, 173, 41, 220, 189, 164, 156, 73, 62, 222, 208, 82, 191, 165, 156, 35, 62, 41, 211, 202, 62, 158, 51, 17, 190, 195, 83, 231, 190, 40, 102, 103, 189, 216, 36, 105, 187, 85, 67, 239, 62, 137, 225, 162, 62, 111, 156, 201, 61, 200, 85, 124, 62, 253, 60, 13, 190, 209, 172, 54, 62, 156, 23, 178, 190, 166, 73, 238, 188, 129, 241, 246, 189, 126, 94, 1, 63, 153, 76, 19, 62, 19, 231, 197, 62, 4, 59, 73, 191, 210, 92, 164, 189, 28, 249, 246, 189, 4, 163, 212, 61, 218, 240, 219, 62, 249, 17, 185, 190, 63, 148, 11, 190, 44, 78, 86, 62, 84, 125, 225, 190, 3, 105, 82, 188, 124, 153, 93, 190, 73, 39, 185, 189, 112, 133, 148, 188, 107, 250, 14, 62, 100, 43, 1, 188, 68, 61, 148, 62, 93, 107, 28, 62, 145, 77, 77, 190, 185, 0, 213, 190, 227, 50, 79, 62, 205, 57, 93, 62, 173, 23, 63, 60, 3, 159, 36, 190, 129, 49, 249, 189, 158, 146, 182, 62, 36, 159, 239, 189, 163, 202, 173, 190, 216, 125, 34, 62, 176, 247, 24, 62, 207, 154, 125, 189, 20, 113, 62, 190, 44, 154, 108, 189, 139, 79, 10, 62, 201, 24, 145, 60, 52, 127, 42, 190, 32, 173, 97, 61, 149, 22, 197, 188, 7, 243, 140, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 194, 123, 61, 84, 71, 109, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {144, 51, 111, 62, 121, 26, 121, 191, 7, 87, 103, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {99, 196, 149, 63, 223, 224, 73, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0076/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}