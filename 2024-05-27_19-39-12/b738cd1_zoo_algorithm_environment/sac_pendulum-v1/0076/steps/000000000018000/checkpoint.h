// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 236, 167, 190, 111, 82, 190, 191, 61, 195, 39, 190, 23, 7, 197, 62, 252, 127, 238, 62, 155, 171, 163, 190, 175, 157, 38, 63, 54, 102, 89, 63, 210, 91, 82, 63, 115, 154, 221, 61, 144, 218, 82, 191, 152, 163, 222, 62, 134, 238, 115, 189, 242, 104, 205, 190, 199, 140, 43, 190, 212, 143, 67, 62, 83, 127, 80, 60, 185, 33, 6, 63, 140, 55, 20, 63, 244, 171, 16, 191, 240, 178, 72, 190, 90, 27, 167, 190, 144, 166, 160, 190, 157, 82, 251, 62, 215, 214, 47, 190, 87, 168, 109, 63, 239, 254, 252, 189, 203, 232, 41, 191, 37, 114, 184, 191, 157, 194, 160, 190, 150, 18, 185, 62, 15, 128, 63, 63, 23, 77, 20, 191, 108, 158, 167, 190, 75, 122, 126, 190, 21, 24, 225, 190, 67, 98, 52, 190, 34, 90, 9, 191, 218, 69, 174, 62, 186, 232, 156, 191, 55, 73, 53, 63, 169, 52, 38, 62, 160, 199, 23, 191, 22, 56, 119, 191, 183, 138, 84, 62, 49, 65, 64, 62, 67, 58, 54, 63, 95, 154, 66, 62, 68, 43, 101, 191, 94, 221, 121, 190, 9, 45, 246, 62, 52, 129, 137, 62, 6, 102, 180, 190, 6, 58, 250, 187, 114, 7, 154, 191, 106, 148, 60, 62, 82, 180, 230, 189, 198, 253, 5, 190, 27, 90, 180, 62, 219, 235, 185, 188, 162, 78, 136, 62, 27, 92, 59, 191, 204, 151, 7, 191, 200, 90, 78, 190, 210, 73, 154, 63, 125, 136, 88, 62, 194, 102, 26, 190, 132, 151, 161, 63, 195, 135, 41, 190, 195, 202, 49, 62, 125, 5, 176, 62, 252, 197, 215, 190, 132, 46, 62, 62, 238, 7, 226, 63, 134, 252, 197, 62, 130, 34, 159, 190, 239, 79, 115, 191, 57, 99, 203, 62, 13, 203, 151, 191, 144, 160, 7, 62, 199, 232, 221, 187, 177, 58, 167, 190, 143, 218, 172, 63, 97, 177, 153, 62, 255, 165, 47, 190, 47, 59, 80, 63, 242, 123, 147, 62, 55, 128, 14, 62, 166, 209, 157, 191, 226, 11, 186, 190, 94, 231, 38, 191, 76, 15, 173, 61, 11, 18, 123, 63, 96, 59, 17, 63, 57, 255, 49, 191, 7, 181, 77, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 8, 33, 190, 88, 174, 67, 191, 180, 206, 236, 190, 146, 125, 9, 63, 228, 93, 80, 61, 179, 72, 31, 190, 144, 222, 234, 190, 1, 185, 18, 191, 186, 57, 31, 189, 52, 206, 18, 189, 175, 243, 188, 190, 214, 147, 19, 191, 167, 80, 236, 62, 41, 210, 74, 61, 252, 123, 110, 62, 12, 87, 39, 62, 49, 242, 191, 62, 122, 97, 1, 63, 130, 141, 157, 62, 227, 238, 244, 61, 155, 3, 204, 61, 239, 109, 217, 62, 218, 253, 221, 62, 146, 36, 22, 191, 212, 57, 118, 62, 172, 68, 181, 190, 67, 40, 36, 63, 252, 126, 119, 190, 89, 129, 137, 189, 176, 208, 59, 190, 152, 120, 189, 190, 208, 165, 190, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 13, 18, 62, 75, 59, 174, 59, 14, 169, 204, 190, 123, 201, 10, 62, 195, 24, 4, 61, 15, 119, 180, 190, 21, 134, 71, 62, 148, 190, 179, 190, 240, 84, 178, 62, 25, 127, 154, 190, 180, 47, 220, 190, 50, 231, 33, 190, 29, 171, 18, 62, 199, 75, 114, 62, 147, 79, 222, 61, 62, 117, 132, 62, 250, 176, 150, 61, 255, 176, 180, 62, 44, 87, 13, 191, 252, 154, 42, 189, 133, 7, 130, 61, 136, 182, 83, 60, 161, 14, 127, 190, 98, 89, 170, 62, 51, 125, 53, 190, 248, 143, 253, 61, 107, 143, 144, 61, 190, 186, 135, 62, 134, 48, 58, 190, 28, 160, 114, 61, 57, 238, 2, 62, 97, 246, 211, 61, 67, 199, 28, 191, 200, 234, 189, 61, 103, 172, 55, 191, 14, 53, 206, 190, 214, 15, 108, 190, 188, 153, 157, 191, 46, 97, 153, 62, 234, 255, 125, 191, 206, 69, 211, 61, 80, 20, 78, 191, 25, 217, 230, 190, 102, 213, 158, 190, 45, 209, 13, 190, 163, 126, 131, 62, 45, 52, 56, 190, 159, 205, 40, 190, 120, 213, 226, 59, 129, 19, 177, 190, 88, 53, 131, 62, 11, 61, 92, 62, 79, 229, 130, 190, 206, 2, 66, 62, 62, 188, 130, 190, 104, 112, 147, 62, 141, 43, 209, 188, 122, 18, 10, 62, 111, 69, 200, 61, 216, 227, 226, 62, 68, 48, 194, 189, 119, 246, 87, 62, 64, 253, 61, 191, 3, 212, 240, 62, 237, 74, 84, 190, 255, 164, 193, 189, 23, 248, 211, 188, 191, 80, 25, 62, 138, 236, 108, 62, 221, 119, 175, 190, 174, 67, 36, 191, 21, 196, 173, 190, 238, 143, 91, 191, 20, 136, 9, 191, 159, 154, 45, 62, 176, 156, 108, 190, 159, 235, 7, 61, 33, 203, 144, 61, 107, 155, 93, 62, 163, 55, 47, 62, 232, 200, 228, 60, 2, 16, 180, 62, 152, 164, 14, 191, 237, 216, 97, 62, 148, 168, 18, 61, 63, 167, 189, 61, 249, 72, 15, 60, 126, 5, 39, 190, 232, 57, 5, 61, 225, 247, 70, 60, 146, 45, 148, 190, 29, 149, 172, 191, 165, 137, 162, 191, 171, 61, 235, 191, 127, 209, 126, 61, 67, 239, 39, 190, 164, 192, 139, 191, 212, 103, 94, 61, 165, 45, 135, 62, 69, 247, 164, 188, 16, 180, 37, 62, 251, 70, 157, 62, 191, 94, 61, 191, 54, 86, 217, 61, 222, 128, 187, 189, 151, 135, 37, 62, 3, 43, 182, 188, 233, 54, 105, 62, 44, 112, 207, 61, 18, 92, 243, 189, 198, 184, 4, 62, 251, 114, 30, 189, 30, 208, 192, 189, 175, 100, 150, 61, 67, 171, 249, 62, 22, 203, 70, 62, 112, 173, 203, 60, 244, 228, 150, 59, 77, 252, 218, 61, 61, 209, 113, 190, 153, 159, 7, 61, 79, 45, 57, 190, 201, 216, 110, 188, 74, 201, 45, 191, 128, 253, 233, 186, 243, 179, 151, 190, 19, 223, 9, 62, 123, 95, 105, 191, 66, 56, 0, 63, 13, 187, 25, 190, 205, 192, 25, 191, 118, 118, 224, 189, 106, 231, 165, 61, 125, 244, 142, 62, 13, 184, 132, 190, 29, 208, 173, 62, 93, 253, 26, 60, 85, 42, 250, 61, 124, 28, 11, 62, 61, 109, 78, 190, 127, 9, 93, 190, 209, 246, 26, 189, 54, 51, 103, 62, 191, 30, 229, 61, 45, 171, 243, 189, 238, 250, 216, 61, 6, 37, 203, 59, 252, 227, 215, 61, 80, 240, 93, 62, 254, 185, 40, 62, 215, 12, 5, 62, 21, 158, 237, 59, 57, 70, 53, 190, 209, 73, 4, 61, 44, 241, 29, 62, 110, 240, 162, 191, 15, 167, 197, 190, 160, 46, 216, 61, 254, 219, 77, 189, 129, 22, 20, 191, 114, 123, 133, 190, 91, 36, 99, 61, 42, 75, 124, 62, 189, 0, 43, 62, 90, 85, 131, 189, 75, 195, 122, 61, 246, 191, 173, 188, 64, 134, 184, 62, 158, 126, 5, 191, 30, 218, 51, 62, 199, 255, 156, 190, 206, 151, 136, 190, 226, 164, 161, 59, 80, 175, 18, 191, 242, 117, 12, 62, 75, 146, 132, 190, 4, 209, 219, 60, 223, 254, 43, 62, 97, 209, 161, 189, 83, 177, 51, 191, 199, 160, 107, 189, 129, 44, 200, 190, 141, 96, 136, 190, 151, 26, 55, 190, 189, 174, 134, 190, 174, 15, 165, 189, 9, 162, 213, 190, 92, 21, 33, 191, 156, 189, 58, 188, 178, 142, 20, 190, 60, 97, 205, 189, 60, 67, 49, 62, 211, 87, 103, 191, 180, 226, 182, 62, 88, 242, 253, 189, 162, 209, 112, 61, 27, 64, 207, 60, 53, 179, 114, 190, 160, 192, 40, 61, 171, 62, 59, 190, 54, 23, 173, 62, 126, 150, 238, 190, 161, 46, 205, 189, 226, 196, 149, 61, 17, 10, 107, 189, 184, 106, 221, 62, 131, 158, 167, 190, 226, 177, 18, 62, 50, 168, 201, 189, 134, 95, 22, 190, 222, 75, 207, 60, 170, 13, 239, 61, 88, 21, 96, 189, 229, 93, 136, 62, 58, 173, 53, 61, 6, 20, 113, 62, 48, 118, 162, 62, 217, 233, 80, 62, 185, 51, 60, 61, 98, 55, 77, 63, 35, 31, 177, 62, 39, 77, 250, 183, 88, 190, 111, 62, 78, 128, 104, 62, 125, 9, 244, 190, 192, 181, 145, 190, 117, 176, 152, 190, 59, 178, 147, 188, 42, 155, 105, 191, 89, 237, 44, 63, 26, 216, 193, 189, 97, 210, 0, 63, 128, 253, 66, 191, 124, 78, 130, 62, 128, 156, 36, 62, 155, 102, 131, 188, 132, 135, 84, 62, 125, 139, 211, 62, 149, 244, 148, 61, 110, 61, 254, 191, 138, 222, 133, 62, 119, 226, 247, 189, 150, 229, 20, 62, 196, 177, 98, 191, 152, 177, 21, 191, 162, 168, 163, 62, 100, 136, 156, 62, 2, 158, 34, 189, 243, 22, 219, 191, 47, 152, 23, 61, 230, 98, 84, 62, 58, 81, 185, 191, 222, 246, 174, 187, 123, 42, 208, 190, 148, 89, 15, 191, 168, 100, 22, 190, 249, 218, 251, 190, 205, 186, 116, 190, 197, 33, 47, 189, 75, 212, 234, 190, 109, 198, 182, 190, 230, 216, 10, 191, 163, 246, 113, 187, 37, 191, 46, 191, 112, 76, 51, 61, 65, 211, 6, 191, 88, 116, 26, 191, 253, 136, 239, 190, 230, 180, 138, 188, 138, 27, 154, 62, 170, 85, 8, 190, 126, 137, 217, 188, 247, 41, 92, 62, 169, 155, 166, 190, 84, 128, 164, 62, 16, 114, 16, 190, 86, 82, 152, 190, 3, 182, 35, 62, 53, 226, 2, 190, 157, 217, 1, 62, 68, 66, 223, 189, 131, 54, 223, 189, 45, 83, 112, 62, 20, 60, 163, 62, 77, 62, 5, 188, 112, 200, 12, 190, 123, 248, 229, 190, 206, 218, 144, 61, 173, 45, 80, 191, 95, 221, 48, 62, 253, 128, 46, 190, 242, 38, 67, 191, 89, 195, 169, 61, 65, 94, 19, 189, 104, 4, 44, 63, 181, 240, 30, 62, 176, 27, 120, 61, 239, 67, 85, 190, 140, 210, 134, 62, 83, 6, 103, 189, 201, 22, 184, 190, 19, 1, 35, 191, 102, 42, 40, 191, 68, 213, 70, 62, 77, 213, 121, 60, 188, 255, 1, 61, 208, 3, 191, 189, 66, 207, 204, 61, 250, 15, 152, 62, 223, 11, 52, 191, 181, 215, 78, 190, 21, 112, 61, 60, 208, 171, 122, 191, 221, 136, 133, 61, 215, 146, 9, 191, 176, 174, 190, 190, 143, 61, 83, 190, 51, 35, 7, 62, 137, 136, 73, 190, 208, 110, 114, 63, 143, 85, 55, 61, 124, 198, 13, 190, 79, 198, 55, 191, 64, 187, 135, 62, 231, 20, 136, 189, 208, 206, 93, 61, 12, 59, 224, 189, 113, 187, 105, 60, 170, 196, 32, 62, 204, 54, 85, 62, 14, 115, 145, 190, 242, 18, 216, 61, 191, 33, 93, 60, 57, 46, 42, 189, 83, 3, 141, 62, 80, 63, 192, 191, 148, 159, 199, 189, 143, 240, 54, 190, 119, 60, 16, 190, 91, 141, 12, 62, 176, 12, 17, 190, 172, 119, 105, 62, 83, 144, 71, 62, 172, 2, 159, 190, 29, 169, 249, 191, 125, 8, 171, 61, 145, 173, 19, 62, 84, 6, 55, 191, 162, 63, 141, 190, 242, 128, 240, 60, 32, 252, 172, 60, 189, 222, 101, 190, 122, 47, 192, 190, 149, 45, 15, 60, 203, 21, 144, 62, 135, 146, 151, 62, 127, 150, 105, 61, 252, 69, 25, 62, 82, 145, 161, 190, 54, 248, 80, 61, 239, 185, 41, 61, 218, 18, 163, 60, 82, 117, 45, 62, 244, 214, 38, 190, 145, 191, 216, 61, 235, 216, 35, 191, 47, 111, 71, 60, 246, 188, 129, 62, 2, 252, 29, 62, 168, 198, 1, 63, 145, 246, 115, 190, 241, 124, 189, 189, 121, 138, 178, 189, 1, 226, 27, 62, 163, 117, 46, 60, 183, 14, 197, 189, 21, 88, 30, 62, 41, 244, 120, 59, 157, 25, 228, 190, 118, 95, 159, 191, 129, 75, 21, 190, 61, 51, 210, 61, 249, 215, 202, 190, 150, 159, 20, 191, 96, 233, 82, 62, 84, 124, 26, 190, 33, 181, 219, 61, 51, 18, 184, 61, 223, 6, 4, 62, 149, 35, 178, 62, 240, 43, 67, 190, 149, 247, 167, 62, 133, 18, 154, 189, 51, 253, 57, 62, 218, 31, 190, 61, 146, 25, 37, 61, 198, 24, 35, 62, 167, 70, 83, 190, 49, 38, 53, 189, 213, 246, 242, 62, 80, 223, 197, 57, 142, 222, 228, 62, 34, 95, 159, 190, 54, 95, 169, 61, 154, 247, 164, 61, 50, 25, 130, 62, 239, 49, 221, 61, 229, 152, 251, 189, 178, 230, 188, 187, 58, 45, 51, 190, 241, 228, 105, 62, 4, 120, 209, 189, 2, 50, 164, 190, 101, 163, 77, 60, 8, 136, 254, 189, 236, 43, 126, 59, 252, 187, 86, 189, 67, 220, 12, 61, 27, 215, 227, 190, 18, 163, 153, 62, 74, 184, 120, 60, 18, 128, 142, 61, 158, 249, 48, 62, 192, 25, 101, 190, 221, 66, 172, 189, 171, 147, 132, 185, 10, 35, 129, 188, 68, 121, 37, 189, 40, 228, 130, 62, 1, 41, 149, 190, 211, 204, 115, 61, 249, 68, 24, 189, 83, 138, 36, 190, 236, 115, 245, 61, 4, 116, 1, 62, 168, 82, 13, 190, 144, 169, 59, 62, 142, 47, 192, 190, 54, 221, 31, 190, 73, 8, 250, 189, 120, 43, 148, 190, 47, 238, 8, 62, 238, 207, 57, 190, 88, 161, 2, 190, 34, 117, 66, 190, 158, 43, 137, 62, 55, 24, 171, 190, 97, 238, 253, 62, 172, 130, 156, 62, 249, 229, 18, 190, 163, 70, 50, 191, 147, 6, 1, 62, 255, 107, 67, 190, 27, 102, 179, 190, 5, 12, 97, 188, 24, 35, 164, 190, 255, 175, 104, 62, 10, 3, 7, 191, 172, 64, 103, 190, 90, 161, 246, 190, 195, 56, 129, 189, 3, 109, 161, 62, 30, 31, 240, 62, 110, 137, 117, 61, 200, 221, 151, 62, 185, 213, 189, 61, 189, 60, 20, 191, 30, 7, 45, 190, 181, 39, 128, 189, 16, 173, 216, 190, 115, 138, 205, 190, 184, 131, 88, 190, 150, 37, 236, 190, 244, 135, 66, 62, 3, 81, 208, 62, 144, 84, 35, 63, 42, 158, 229, 189, 243, 93, 188, 187, 43, 117, 15, 62, 88, 220, 11, 62, 61, 40, 239, 61, 241, 217, 152, 190, 113, 118, 79, 190, 173, 151, 43, 62, 236, 219, 202, 61, 56, 17, 164, 189, 85, 78, 183, 62, 81, 44, 126, 189, 90, 194, 73, 62, 23, 86, 177, 190, 137, 84, 169, 61, 118, 22, 135, 188, 219, 197, 213, 61, 255, 241, 187, 190, 49, 255, 205, 62, 90, 193, 236, 188, 189, 131, 232, 61, 148, 188, 18, 62, 14, 203, 194, 191, 36, 117, 18, 188, 245, 131, 122, 61, 63, 69, 226, 190, 154, 238, 22, 190, 115, 66, 200, 189, 68, 117, 68, 191, 49, 63, 108, 62, 69, 204, 16, 191, 106, 206, 132, 190, 103, 100, 69, 191, 97, 37, 136, 62, 19, 79, 192, 189, 218, 255, 148, 62, 195, 40, 109, 62, 193, 23, 162, 60, 20, 9, 0, 62, 51, 81, 8, 62, 75, 143, 3, 62, 55, 39, 100, 190, 178, 169, 213, 61, 35, 233, 89, 190, 34, 185, 43, 62, 124, 192, 195, 188, 182, 235, 10, 187, 68, 198, 42, 190, 209, 122, 45, 62, 79, 108, 176, 62, 204, 102, 210, 189, 22, 201, 133, 61, 73, 32, 143, 189, 205, 208, 62, 62, 101, 145, 192, 190, 70, 83, 227, 189, 132, 76, 52, 60, 184, 235, 76, 62, 237, 13, 230, 61, 109, 184, 240, 59, 217, 109, 146, 189, 23, 202, 224, 188, 41, 119, 173, 189, 42, 45, 17, 63, 46, 255, 226, 189, 32, 140, 7, 189, 226, 208, 126, 189, 174, 192, 133, 62, 205, 152, 130, 62, 102, 87, 58, 190, 7, 158, 5, 190, 172, 148, 19, 190, 223, 186, 50, 190, 129, 98, 209, 190, 32, 52, 242, 61, 76, 75, 4, 191, 58, 69, 184, 189, 240, 29, 231, 189, 72, 47, 51, 191, 196, 156, 249, 189, 194, 213, 31, 190, 70, 161, 248, 61, 106, 151, 154, 61, 61, 100, 128, 62, 111, 53, 152, 62, 249, 139, 170, 61, 120, 153, 192, 189, 186, 95, 83, 190, 19, 57, 19, 62, 103, 215, 38, 190, 105, 183, 213, 188, 203, 141, 79, 62, 145, 122, 5, 189, 214, 242, 51, 190, 243, 116, 136, 62, 32, 149, 217, 62, 182, 27, 103, 62, 58, 80, 77, 190, 175, 134, 143, 190, 166, 109, 33, 62, 60, 49, 23, 63, 80, 218, 252, 190, 183, 162, 244, 62, 100, 236, 125, 189, 96, 114, 120, 187, 215, 201, 188, 62, 58, 116, 230, 190, 250, 170, 147, 61, 233, 209, 8, 61, 139, 231, 203, 62, 18, 88, 7, 62, 10, 202, 240, 188, 251, 57, 231, 61, 159, 244, 148, 191, 216, 55, 150, 190, 78, 54, 134, 62, 236, 95, 158, 190, 225, 72, 167, 189, 148, 18, 115, 62, 198, 213, 150, 62, 46, 178, 64, 190, 21, 75, 38, 62, 35, 231, 117, 62, 119, 184, 137, 190, 151, 190, 75, 62, 113, 12, 132, 62, 253, 69, 154, 190, 35, 53, 74, 191, 38, 3, 252, 60, 12, 117, 231, 61, 79, 63, 174, 189, 39, 76, 33, 191, 94, 204, 63, 191, 190, 237, 31, 62, 173, 23, 41, 190, 17, 34, 120, 191, 66, 118, 141, 61, 234, 202, 147, 189, 27, 29, 0, 63, 147, 82, 137, 61, 45, 218, 126, 62, 65, 21, 116, 190, 159, 45, 137, 62, 154, 58, 67, 188, 6, 203, 233, 190, 104, 146, 149, 191, 41, 68, 103, 190, 69, 148, 143, 190, 63, 137, 35, 61, 254, 183, 103, 61, 194, 250, 81, 190, 21, 110, 188, 189, 19, 144, 195, 61, 31, 144, 107, 190, 6, 114, 21, 61, 146, 246, 139, 62, 244, 183, 2, 191, 102, 209, 28, 190, 31, 194, 135, 190, 14, 239, 201, 190, 108, 61, 177, 190, 113, 16, 238, 189, 42, 8, 141, 190, 239, 255, 249, 62, 57, 200, 181, 188, 199, 134, 16, 61, 99, 83, 15, 62, 189, 192, 136, 61, 188, 44, 222, 189, 4, 51, 194, 62, 182, 164, 9, 191, 238, 11, 62, 190, 50, 114, 58, 190, 202, 0, 156, 189, 227, 232, 249, 60, 125, 203, 14, 62, 244, 213, 155, 189, 177, 14, 76, 190, 202, 112, 240, 190, 42, 185, 151, 62, 200, 103, 106, 190, 213, 142, 139, 62, 246, 218, 88, 189, 107, 188, 155, 60, 223, 150, 131, 189, 7, 112, 247, 60, 26, 180, 58, 62, 124, 185, 245, 60, 180, 53, 85, 62, 17, 133, 37, 191, 50, 69, 180, 61, 185, 68, 209, 190, 87, 210, 25, 190, 107, 244, 45, 190, 47, 87, 150, 190, 137, 147, 70, 191, 28, 1, 105, 61, 14, 83, 20, 62, 190, 2, 96, 189, 232, 128, 44, 190, 144, 4, 169, 189, 23, 190, 22, 62, 187, 120, 134, 189, 240, 198, 88, 60, 204, 19, 214, 59, 79, 159, 213, 189, 108, 149, 218, 61, 171, 247, 50, 190, 16, 40, 203, 60, 72, 80, 69, 189, 92, 186, 102, 61, 174, 18, 74, 190, 60, 156, 249, 188, 238, 206, 194, 61, 139, 253, 178, 189, 100, 112, 222, 61, 77, 93, 78, 190, 130, 60, 61, 61, 195, 210, 213, 188, 164, 61, 122, 189, 202, 198, 69, 190, 55, 18, 16, 190, 96, 108, 151, 189, 179, 39, 71, 189, 245, 206, 226, 61, 107, 108, 4, 62, 18, 9, 253, 189, 12, 159, 246, 189, 152, 143, 226, 189, 23, 39, 57, 189, 173, 185, 57, 191, 53, 110, 67, 62, 89, 56, 14, 190, 154, 28, 161, 190, 213, 18, 180, 61, 160, 188, 190, 187, 186, 222, 30, 190, 20, 206, 76, 60, 127, 54, 222, 190, 93, 216, 21, 191, 202, 144, 18, 61, 52, 202, 118, 62, 29, 95, 33, 62, 52, 36, 6, 191, 248, 240, 18, 62, 253, 191, 233, 61, 84, 147, 212, 190, 220, 142, 192, 190, 193, 70, 86, 190, 209, 236, 124, 190, 228, 98, 216, 190, 195, 191, 174, 190, 78, 149, 196, 190, 14, 122, 196, 62, 138, 11, 197, 190, 249, 255, 7, 190, 231, 199, 216, 189, 150, 39, 72, 61, 201, 175, 194, 61, 18, 201, 137, 61, 136, 229, 39, 63, 237, 112, 82, 189, 190, 223, 245, 190, 218, 43, 98, 62, 202, 156, 228, 189, 68, 197, 81, 190, 181, 149, 130, 191, 28, 38, 135, 190, 2, 206, 12, 63, 46, 244, 87, 190, 170, 75, 79, 191, 103, 120, 89, 191, 59, 204, 149, 62, 0, 52, 150, 62, 68, 111, 134, 61, 172, 79, 162, 187, 109, 120, 187, 60, 150, 227, 53, 62, 82, 77, 165, 189, 191, 88, 51, 62, 100, 159, 5, 191, 44, 250, 189, 188, 115, 238, 154, 188, 230, 44, 81, 189, 144, 222, 147, 189, 26, 225, 223, 61, 90, 205, 128, 62, 147, 95, 6, 62, 153, 54, 203, 189, 109, 31, 110, 190, 164, 165, 154, 188, 252, 55, 24, 191, 183, 133, 88, 190, 155, 69, 11, 62, 128, 178, 34, 190, 175, 123, 28, 61, 252, 178, 100, 61, 70, 119, 63, 62, 102, 222, 221, 188, 228, 211, 210, 189, 157, 236, 165, 188, 241, 47, 44, 188, 161, 231, 71, 62, 61, 187, 4, 62, 110, 173, 60, 61, 142, 1, 68, 191, 198, 70, 20, 62, 15, 127, 2, 63, 175, 194, 62, 189, 211, 121, 203, 62, 65, 152, 204, 190, 171, 171, 224, 61, 129, 92, 18, 62, 222, 204, 7, 191, 243, 237, 15, 61, 149, 248, 63, 62, 87, 148, 180, 190, 232, 131, 206, 61, 99, 235, 240, 190, 218, 23, 225, 191, 4, 32, 128, 191, 228, 228, 253, 189, 144, 150, 32, 189, 165, 58, 31, 62, 152, 252, 180, 60, 50, 186, 11, 62, 141, 179, 245, 190, 84, 160, 150, 62, 41, 241, 44, 61, 224, 30, 226, 190, 228, 247, 172, 189, 47, 83, 1, 191, 50, 181, 157, 189, 164, 19, 252, 190, 238, 148, 153, 188, 191, 245, 52, 190, 176, 65, 70, 62, 113, 122, 133, 62, 213, 87, 201, 62, 224, 221, 133, 62, 45, 239, 4, 62, 121, 116, 219, 61, 165, 46, 14, 191, 164, 16, 184, 189, 39, 5, 153, 188, 229, 54, 70, 190, 123, 130, 66, 190, 28, 17, 21, 62, 78, 127, 151, 190, 232, 141, 23, 62, 127, 34, 157, 62, 234, 7, 100, 189, 9, 243, 141, 190, 180, 116, 46, 189, 171, 98, 107, 62, 126, 190, 129, 61, 83, 204, 69, 62, 85, 171, 204, 190, 193, 100, 220, 189, 11, 155, 207, 190, 66, 236, 58, 61, 13, 164, 113, 62, 139, 228, 39, 191, 70, 179, 190, 60, 96, 128, 74, 190, 156, 159, 25, 63, 15, 60, 214, 188, 225, 149, 67, 189, 186, 164, 175, 189, 201, 58, 206, 60, 228, 123, 120, 61, 231, 153, 61, 62, 251, 98, 25, 191, 75, 145, 3, 62, 206, 119, 9, 62, 213, 179, 49, 187, 61, 135, 64, 189, 216, 206, 142, 62, 9, 130, 238, 62, 163, 134, 26, 190, 6, 161, 145, 61, 197, 48, 146, 191, 210, 110, 73, 62, 11, 83, 71, 191, 62, 177, 8, 190, 203, 62, 118, 190, 137, 185, 204, 191, 121, 239, 14, 191, 166, 17, 57, 190, 241, 28, 12, 189, 218, 230, 32, 190, 239, 45, 118, 61, 202, 127, 170, 60, 120, 150, 27, 62, 219, 240, 214, 189, 35, 231, 38, 61, 233, 142, 209, 189, 207, 25, 225, 187, 253, 69, 44, 190, 203, 132, 185, 59, 51, 2, 64, 190, 143, 215, 75, 190, 111, 100, 90, 189, 57, 114, 50, 62, 91, 229, 153, 187, 220, 83, 161, 189, 169, 238, 122, 188, 5, 218, 204, 61, 31, 179, 39, 62, 7, 252, 30, 189, 15, 172, 45, 190, 151, 165, 210, 59, 84, 36, 73, 190, 163, 54, 29, 62, 112, 144, 12, 62, 93, 69, 225, 61, 13, 30, 124, 189, 144, 13, 119, 61, 239, 73, 35, 61, 128, 240, 170, 190, 129, 155, 161, 62, 186, 193, 42, 189, 124, 131, 254, 60, 207, 8, 60, 62, 6, 125, 79, 62, 113, 189, 21, 62, 141, 240, 179, 190, 231, 26, 80, 62, 98, 77, 60, 61, 12, 136, 59, 62, 123, 233, 238, 60, 233, 78, 19, 189, 215, 238, 65, 62, 85, 121, 166, 190, 239, 108, 172, 189, 203, 27, 5, 61, 99, 198, 231, 60, 13, 56, 81, 61, 66, 207, 98, 61, 11, 212, 29, 190, 131, 222, 129, 62, 112, 41, 181, 61, 133, 51, 210, 61, 208, 20, 104, 190, 244, 127, 31, 62, 151, 100, 67, 60, 248, 81, 29, 190, 37, 148, 185, 190, 173, 20, 31, 190, 41, 134, 157, 188, 240, 192, 196, 61, 94, 167, 24, 191, 229, 140, 137, 189, 42, 229, 169, 61, 236, 11, 51, 190, 130, 137, 43, 190, 11, 173, 68, 189, 127, 66, 45, 190, 232, 95, 199, 189, 207, 132, 140, 61, 211, 181, 9, 190, 136, 220, 0, 190, 244, 48, 38, 61, 153, 191, 153, 189, 175, 109, 0, 61, 30, 150, 199, 61, 191, 61, 238, 189, 218, 182, 23, 62, 177, 62, 161, 189, 79, 92, 18, 61, 112, 156, 172, 189, 254, 27, 63, 190, 51, 161, 58, 190, 167, 170, 116, 59, 230, 214, 192, 61, 32, 140, 190, 61, 48, 250, 135, 189, 199, 118, 26, 61, 235, 3, 24, 61, 10, 155, 77, 60, 20, 99, 52, 189, 115, 161, 3, 189, 206, 174, 29, 59, 185, 69, 167, 60, 180, 236, 15, 62, 138, 50, 160, 189, 223, 16, 5, 191, 143, 60, 160, 62, 178, 24, 122, 61, 63, 247, 53, 190, 7, 207, 50, 188, 28, 22, 186, 190, 202, 114, 192, 61, 120, 126, 121, 190, 135, 192, 245, 61, 158, 27, 57, 190, 141, 54, 30, 62, 21, 201, 158, 62, 156, 197, 54, 62, 172, 173, 35, 62, 226, 44, 132, 62, 196, 176, 157, 62, 166, 219, 85, 191, 236, 218, 128, 186, 44, 117, 55, 62, 39, 73, 187, 189, 117, 125, 148, 190, 128, 247, 86, 62, 3, 138, 153, 190, 6, 254, 92, 62, 154, 55, 254, 61, 107, 116, 233, 61, 48, 120, 71, 190, 172, 208, 53, 189, 77, 92, 161, 61, 173, 109, 28, 62, 189, 54, 76, 59, 54, 202, 20, 190, 187, 69, 21, 62, 230, 126, 3, 59, 25, 222, 94, 62, 231, 49, 141, 62, 117, 26, 110, 191, 184, 15, 81, 190, 187, 13, 0, 190, 27, 29, 252, 60, 182, 229, 8, 62, 19, 177, 38, 62, 41, 14, 43, 188, 16, 161, 197, 190, 163, 34, 92, 190, 3, 136, 121, 62, 245, 177, 160, 189, 118, 7, 178, 62, 226, 177, 149, 190, 153, 70, 134, 189, 233, 195, 36, 190, 236, 199, 45, 62, 195, 149, 29, 62, 108, 213, 198, 190, 165, 177, 18, 62, 25, 72, 208, 190, 154, 30, 161, 61, 49, 143, 237, 190, 19, 59, 151, 189, 141, 93, 179, 190, 201, 53, 239, 190, 36, 8, 191, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 58, 150, 62, 3, 110, 181, 61, 68, 255, 143, 60, 94, 46, 34, 61, 92, 147, 40, 62, 207, 202, 169, 61, 80, 96, 44, 60, 150, 126, 26, 61, 248, 88, 82, 189, 86, 199, 87, 190, 32, 100, 215, 60, 60, 255, 125, 62, 179, 6, 60, 62, 155, 77, 10, 190, 115, 108, 62, 62, 211, 40, 62, 62, 205, 175, 75, 62, 63, 27, 77, 62, 63, 85, 249, 60, 104, 93, 255, 189, 9, 48, 102, 62, 134, 250, 57, 60, 50, 84, 139, 190, 204, 196, 249, 61, 253, 120, 29, 62, 112, 153, 95, 62, 170, 254, 179, 62, 128, 70, 65, 190, 54, 77, 150, 189, 47, 93, 183, 189, 121, 176, 7, 61, 173, 104, 174, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 67, 186, 62, 117, 56, 151, 63, 207, 82, 18, 189, 103, 91, 110, 190, 39, 131, 105, 190, 37, 22, 74, 190, 149, 123, 125, 62, 218, 34, 154, 191, 82, 26, 76, 63, 128, 77, 136, 63, 0, 94, 254, 190, 171, 220, 243, 190, 199, 230, 84, 189, 250, 198, 85, 190, 129, 208, 126, 63, 108, 44, 151, 63, 140, 34, 96, 61, 105, 68, 88, 62, 112, 66, 39, 191, 180, 105, 180, 62, 209, 158, 167, 190, 242, 166, 13, 189, 20, 65, 146, 191, 30, 160, 38, 63, 121, 142, 215, 61, 248, 9, 241, 62, 74, 107, 87, 191, 210, 92, 164, 189, 19, 244, 64, 189, 4, 163, 212, 61, 38, 115, 236, 62, 131, 148, 173, 190, 72, 197, 239, 189, 194, 63, 204, 62, 56, 29, 139, 191, 219, 37, 221, 189, 192, 27, 148, 190, 37, 57, 141, 190, 225, 158, 147, 189, 169, 234, 80, 190, 123, 210, 214, 188, 107, 64, 251, 62, 72, 61, 23, 190, 231, 168, 88, 190, 163, 191, 253, 190, 129, 51, 177, 62, 161, 131, 220, 62, 53, 70, 10, 62, 82, 86, 130, 190, 15, 251, 12, 190, 21, 231, 15, 63, 164, 192, 121, 190, 237, 92, 179, 190, 225, 165, 25, 62, 100, 187, 49, 63, 204, 50, 197, 61, 26, 23, 28, 191, 153, 173, 17, 189, 50, 62, 26, 62, 201, 24, 145, 60, 128, 147, 58, 190, 32, 173, 97, 61, 167, 178, 43, 189, 136, 108, 128, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 126, 51, 61, 154, 80, 239, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {101, 0, 174, 63, 128, 42, 131, 191, 199, 73, 198, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {216, 173, 56, 64, 34, 229, 220, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0076/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}