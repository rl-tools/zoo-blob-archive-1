// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 175, 219, 190, 2, 60, 188, 190, 48, 126, 89, 190, 3, 192, 212, 62, 241, 196, 16, 62, 73, 115, 134, 190, 97, 85, 11, 63, 13, 72, 12, 61, 113, 87, 18, 63, 241, 156, 63, 62, 92, 179, 226, 190, 65, 160, 169, 62, 178, 92, 219, 61, 209, 156, 217, 60, 133, 200, 208, 190, 112, 139, 225, 62, 251, 240, 47, 190, 120, 206, 41, 62, 51, 218, 173, 61, 78, 138, 247, 190, 230, 71, 47, 190, 76, 87, 17, 63, 29, 157, 239, 190, 69, 197, 95, 62, 206, 255, 54, 62, 143, 212, 82, 62, 126, 151, 133, 190, 189, 148, 151, 190, 79, 205, 96, 190, 255, 27, 218, 190, 119, 229, 56, 62, 9, 70, 43, 62, 157, 81, 17, 191, 37, 242, 228, 61, 142, 168, 32, 62, 242, 53, 223, 190, 88, 46, 245, 61, 84, 220, 13, 191, 203, 178, 168, 62, 17, 98, 196, 190, 217, 53, 65, 62, 62, 207, 189, 62, 27, 239, 224, 190, 90, 34, 17, 191, 239, 68, 65, 62, 54, 229, 205, 62, 115, 115, 150, 62, 121, 251, 154, 61, 116, 25, 9, 191, 215, 6, 2, 188, 139, 202, 15, 63, 175, 69, 83, 62, 138, 193, 128, 61, 51, 177, 186, 61, 37, 224, 32, 190, 83, 198, 171, 62, 34, 23, 155, 62, 219, 190, 210, 62, 248, 131, 33, 62, 5, 175, 101, 190, 78, 17, 53, 62, 77, 119, 164, 190, 103, 136, 16, 191, 84, 247, 237, 188, 241, 208, 95, 62, 198, 229, 210, 62, 13, 11, 189, 189, 250, 203, 6, 63, 209, 56, 205, 61, 146, 208, 208, 60, 241, 241, 148, 60, 206, 125, 212, 190, 152, 47, 175, 62, 196, 94, 140, 62, 71, 123, 15, 63, 111, 10, 11, 191, 247, 103, 227, 190, 228, 180, 136, 62, 242, 166, 14, 191, 234, 162, 168, 62, 255, 125, 85, 61, 250, 96, 10, 190, 217, 117, 148, 61, 7, 40, 12, 62, 236, 59, 205, 61, 46, 144, 228, 190, 44, 68, 199, 62, 182, 174, 11, 190, 33, 37, 10, 191, 219, 30, 7, 191, 17, 228, 210, 190, 129, 13, 159, 190, 139, 211, 236, 62, 193, 149, 56, 62, 118, 170, 166, 190, 48, 39, 254, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 159, 19, 191, 222, 250, 12, 191, 226, 152, 101, 190, 137, 43, 15, 63, 86, 16, 83, 62, 241, 9, 209, 190, 253, 13, 204, 190, 100, 91, 10, 191, 158, 28, 172, 190, 5, 14, 124, 62, 212, 76, 13, 191, 190, 233, 196, 190, 98, 104, 19, 63, 220, 70, 98, 190, 161, 125, 52, 189, 120, 41, 59, 62, 42, 92, 11, 63, 212, 64, 13, 63, 191, 190, 66, 190, 245, 172, 82, 189, 40, 8, 143, 62, 71, 229, 209, 62, 83, 118, 7, 63, 43, 121, 11, 191, 113, 27, 136, 62, 99, 222, 22, 190, 143, 231, 198, 62, 229, 92, 205, 190, 111, 250, 111, 62, 33, 0, 106, 190, 208, 243, 17, 191, 148, 135, 254, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 61, 143, 188, 103, 15, 146, 189, 15, 14, 211, 189, 255, 137, 219, 60, 66, 131, 82, 188, 8, 106, 150, 61, 66, 120, 0, 62, 239, 3, 231, 187, 145, 174, 74, 189, 212, 138, 207, 189, 110, 112, 13, 190, 21, 133, 178, 188, 169, 139, 192, 60, 88, 15, 234, 61, 44, 181, 5, 189, 37, 79, 155, 61, 68, 156, 16, 188, 189, 25, 24, 62, 36, 212, 129, 186, 228, 218, 249, 188, 164, 111, 39, 61, 176, 202, 166, 61, 6, 116, 51, 190, 46, 251, 147, 61, 192, 227, 43, 189, 21, 38, 238, 60, 207, 6, 134, 188, 36, 248, 185, 61, 10, 239, 255, 189, 228, 112, 4, 62, 74, 189, 243, 61, 200, 172, 22, 190, 250, 194, 44, 62, 96, 159, 89, 61, 46, 42, 228, 189, 143, 11, 206, 188, 115, 103, 246, 61, 10, 182, 29, 62, 160, 67, 37, 62, 220, 70, 8, 61, 43, 68, 16, 190, 240, 229, 220, 189, 143, 196, 17, 190, 186, 48, 120, 187, 239, 205, 34, 188, 222, 141, 5, 190, 138, 242, 168, 187, 93, 220, 11, 189, 219, 202, 142, 189, 38, 200, 31, 190, 234, 166, 21, 62, 234, 218, 236, 61, 55, 249, 152, 189, 192, 0, 173, 61, 139, 15, 234, 189, 205, 176, 214, 60, 39, 50, 120, 189, 181, 78, 48, 62, 88, 4, 174, 189, 106, 205, 154, 189, 140, 21, 154, 189, 35, 8, 38, 62, 78, 69, 195, 189, 237, 185, 35, 62, 5, 123, 6, 61, 178, 47, 177, 189, 36, 239, 159, 61, 231, 207, 237, 61, 128, 114, 29, 58, 6, 93, 34, 190, 96, 181, 27, 190, 69, 83, 49, 190, 215, 235, 104, 187, 57, 87, 138, 60, 177, 55, 161, 189, 165, 50, 43, 189, 188, 108, 33, 61, 161, 34, 40, 62, 6, 165, 9, 62, 120, 106, 6, 189, 217, 188, 205, 186, 4, 167, 10, 62, 221, 12, 224, 189, 203, 223, 28, 62, 107, 51, 15, 190, 60, 35, 97, 61, 190, 34, 12, 189, 19, 109, 12, 190, 163, 28, 45, 188, 0, 143, 199, 189, 49, 8, 220, 188, 163, 168, 126, 61, 247, 205, 45, 190, 86, 243, 28, 62, 193, 58, 87, 61, 250, 119, 0, 189, 245, 118, 66, 189, 245, 12, 234, 60, 24, 123, 122, 61, 66, 28, 54, 60, 171, 7, 11, 62, 18, 220, 157, 61, 14, 247, 127, 61, 70, 11, 231, 189, 0, 248, 10, 61, 57, 50, 98, 189, 102, 144, 136, 189, 164, 125, 58, 61, 115, 15, 8, 62, 152, 236, 1, 62, 14, 0, 53, 62, 137, 116, 12, 190, 90, 153, 10, 190, 245, 65, 154, 189, 241, 100, 28, 62, 249, 42, 237, 61, 220, 218, 137, 60, 188, 159, 109, 188, 109, 110, 36, 190, 246, 131, 28, 190, 225, 83, 139, 60, 156, 72, 51, 190, 139, 18, 222, 60, 164, 195, 242, 189, 29, 197, 150, 60, 118, 19, 12, 189, 127, 246, 220, 61, 58, 139, 10, 189, 189, 213, 224, 61, 61, 28, 159, 189, 196, 78, 149, 189, 154, 196, 237, 61, 104, 12, 5, 188, 0, 95, 65, 188, 37, 202, 164, 188, 234, 10, 187, 189, 112, 19, 31, 62, 91, 4, 133, 189, 141, 227, 38, 62, 97, 61, 46, 190, 130, 51, 166, 61, 189, 250, 146, 189, 251, 52, 6, 62, 142, 189, 230, 61, 249, 47, 78, 189, 100, 86, 42, 60, 206, 164, 163, 61, 139, 170, 29, 62, 95, 113, 6, 62, 241, 208, 195, 61, 9, 114, 151, 61, 11, 143, 211, 61, 56, 248, 9, 190, 234, 228, 34, 59, 8, 116, 99, 61, 220, 231, 160, 189, 222, 120, 45, 61, 3, 36, 205, 61, 49, 106, 0, 190, 185, 66, 27, 190, 220, 92, 48, 62, 20, 27, 236, 61, 26, 222, 14, 62, 219, 32, 7, 62, 115, 11, 6, 61, 38, 50, 219, 189, 63, 78, 32, 61, 192, 122, 44, 62, 113, 195, 153, 60, 189, 120, 198, 61, 159, 29, 95, 189, 142, 83, 30, 190, 226, 102, 236, 187, 102, 238, 132, 60, 62, 51, 12, 62, 159, 148, 37, 190, 56, 207, 157, 61, 35, 36, 133, 59, 62, 236, 90, 61, 187, 207, 162, 189, 196, 136, 39, 189, 47, 227, 5, 190, 115, 198, 47, 190, 44, 243, 144, 188, 80, 52, 60, 189, 130, 40, 190, 189, 137, 228, 47, 61, 81, 65, 8, 62, 154, 206, 17, 62, 195, 120, 114, 189, 238, 5, 230, 188, 47, 134, 143, 61, 66, 141, 155, 189, 188, 19, 14, 62, 86, 31, 235, 189, 236, 255, 27, 62, 228, 255, 43, 59, 177, 18, 172, 189, 190, 63, 4, 189, 50, 140, 80, 61, 227, 107, 3, 62, 25, 240, 0, 59, 120, 130, 43, 190, 187, 255, 44, 188, 72, 167, 150, 60, 246, 163, 164, 61, 179, 150, 27, 190, 226, 184, 211, 60, 44, 201, 15, 190, 19, 185, 162, 185, 115, 25, 178, 61, 230, 95, 24, 188, 226, 150, 27, 189, 30, 90, 188, 61, 153, 224, 134, 188, 137, 215, 231, 61, 184, 163, 25, 62, 29, 181, 31, 62, 217, 108, 66, 61, 20, 203, 38, 62, 181, 168, 232, 60, 111, 78, 13, 61, 208, 226, 22, 188, 92, 70, 153, 61, 56, 109, 254, 61, 11, 144, 252, 189, 93, 177, 11, 190, 103, 52, 89, 59, 117, 1, 34, 190, 83, 96, 124, 61, 27, 75, 41, 60, 58, 104, 142, 61, 127, 117, 52, 62, 253, 252, 47, 62, 26, 75, 174, 188, 77, 101, 19, 190, 13, 230, 22, 62, 60, 35, 145, 61, 137, 40, 49, 189, 45, 214, 187, 188, 53, 78, 115, 58, 150, 117, 47, 61, 215, 214, 250, 61, 144, 46, 10, 62, 120, 14, 92, 189, 4, 232, 194, 60, 105, 199, 1, 60, 233, 216, 35, 190, 75, 36, 231, 189, 49, 187, 121, 189, 83, 61, 240, 189, 255, 209, 250, 189, 212, 201, 165, 60, 72, 244, 156, 60, 26, 199, 151, 189, 19, 52, 4, 187, 250, 109, 135, 187, 233, 168, 42, 190, 123, 21, 25, 62, 88, 73, 255, 189, 170, 26, 13, 62, 71, 165, 49, 190, 244, 189, 43, 61, 225, 227, 147, 61, 15, 192, 167, 189, 150, 236, 178, 61, 1, 88, 42, 61, 170, 178, 5, 188, 134, 54, 238, 60, 148, 156, 236, 61, 175, 118, 70, 61, 196, 209, 238, 61, 238, 169, 10, 62, 101, 31, 159, 61, 186, 67, 50, 62, 34, 198, 11, 190, 157, 203, 175, 61, 152, 101, 50, 62, 57, 86, 176, 189, 253, 1, 177, 188, 169, 31, 102, 189, 242, 101, 166, 61, 104, 53, 6, 62, 22, 131, 15, 62, 86, 168, 210, 61, 101, 41, 216, 189, 215, 219, 38, 190, 128, 55, 46, 189, 28, 169, 46, 190, 124, 233, 221, 189, 70, 152, 185, 60, 128, 80, 130, 187, 0, 202, 145, 188, 8, 213, 46, 57, 82, 127, 215, 188, 55, 101, 49, 62, 142, 90, 191, 61, 202, 208, 6, 190, 147, 135, 26, 62, 93, 130, 173, 189, 53, 45, 27, 190, 110, 30, 147, 61, 85, 10, 67, 189, 67, 192, 16, 62, 119, 154, 138, 189, 90, 55, 150, 189, 55, 246, 173, 61, 172, 246, 193, 188, 32, 85, 34, 62, 182, 17, 128, 186, 210, 91, 34, 190, 55, 191, 153, 189, 110, 37, 207, 61, 151, 132, 142, 61, 79, 219, 203, 60, 122, 148, 102, 188, 184, 92, 194, 187, 69, 241, 67, 60, 132, 181, 46, 190, 93, 199, 32, 62, 145, 199, 123, 61, 255, 157, 23, 61, 112, 141, 2, 190, 233, 55, 241, 61, 176, 151, 195, 60, 202, 200, 182, 58, 51, 211, 211, 61, 200, 182, 145, 189, 127, 136, 185, 189, 218, 81, 44, 62, 162, 172, 3, 190, 246, 53, 183, 61, 98, 163, 10, 190, 196, 183, 56, 188, 7, 222, 144, 60, 186, 241, 252, 189, 240, 254, 175, 189, 163, 223, 84, 189, 19, 2, 28, 62, 120, 104, 16, 62, 179, 84, 34, 189, 59, 155, 232, 59, 195, 17, 34, 62, 154, 232, 157, 189, 38, 128, 226, 189, 66, 113, 32, 190, 177, 108, 183, 189, 128, 46, 24, 62, 192, 92, 172, 189, 53, 56, 140, 61, 121, 115, 201, 189, 153, 99, 159, 186, 7, 75, 171, 61, 158, 243, 135, 187, 6, 152, 165, 189, 252, 113, 217, 61, 234, 240, 183, 61, 11, 67, 28, 190, 45, 19, 130, 189, 2, 167, 179, 189, 123, 65, 243, 187, 245, 245, 20, 61, 52, 204, 137, 189, 153, 239, 50, 62, 34, 237, 157, 189, 81, 38, 200, 61, 123, 177, 147, 189, 219, 215, 143, 189, 40, 138, 115, 61, 234, 108, 43, 62, 111, 224, 46, 61, 176, 53, 22, 190, 166, 236, 157, 189, 181, 19, 232, 61, 130, 227, 45, 189, 175, 70, 43, 189, 191, 255, 146, 61, 48, 160, 243, 60, 35, 145, 190, 189, 48, 86, 4, 190, 176, 243, 50, 190, 164, 127, 44, 62, 252, 165, 174, 188, 9, 71, 41, 190, 126, 45, 186, 189, 46, 50, 47, 190, 250, 149, 107, 189, 250, 160, 108, 189, 254, 251, 193, 189, 48, 100, 225, 61, 221, 247, 219, 189, 8, 63, 133, 61, 245, 101, 76, 189, 14, 125, 149, 189, 98, 194, 62, 61, 83, 214, 243, 188, 8, 152, 82, 60, 209, 69, 34, 60, 3, 101, 123, 189, 195, 149, 3, 62, 228, 23, 17, 190, 96, 52, 218, 61, 117, 208, 46, 189, 54, 29, 74, 61, 220, 189, 219, 189, 220, 105, 32, 62, 231, 159, 255, 188, 244, 28, 4, 190, 215, 165, 38, 189, 185, 102, 237, 188, 246, 253, 10, 62, 182, 174, 37, 62, 42, 24, 48, 190, 76, 72, 62, 61, 212, 187, 9, 62, 155, 122, 114, 60, 208, 200, 27, 62, 90, 58, 161, 59, 138, 74, 20, 189, 217, 176, 94, 188, 136, 139, 55, 189, 26, 29, 136, 189, 51, 27, 23, 190, 19, 55, 106, 61, 150, 244, 184, 61, 207, 93, 35, 61, 219, 101, 154, 185, 173, 99, 54, 57, 8, 157, 194, 61, 56, 81, 210, 61, 158, 85, 143, 189, 171, 191, 3, 188, 231, 31, 190, 189, 50, 78, 14, 189, 109, 243, 27, 62, 218, 179, 186, 189, 138, 107, 241, 61, 120, 5, 182, 189, 179, 121, 76, 187, 162, 243, 230, 189, 111, 146, 173, 61, 89, 206, 37, 189, 9, 48, 226, 189, 138, 153, 129, 189, 221, 167, 158, 189, 161, 30, 250, 61, 128, 118, 232, 189, 232, 190, 106, 61, 67, 252, 185, 61, 244, 30, 232, 59, 202, 151, 185, 189, 107, 123, 1, 61, 203, 81, 185, 189, 107, 228, 29, 62, 77, 106, 65, 189, 105, 158, 188, 61, 189, 25, 83, 61, 217, 21, 75, 187, 218, 234, 224, 189, 206, 8, 221, 61, 186, 216, 29, 190, 171, 107, 183, 61, 159, 19, 48, 62, 207, 251, 128, 60, 36, 171, 45, 62, 58, 254, 181, 61, 179, 48, 255, 61, 130, 51, 8, 62, 222, 104, 20, 189, 131, 172, 21, 190, 204, 101, 248, 189, 160, 178, 210, 61, 80, 111, 4, 190, 2, 228, 145, 188, 109, 184, 20, 62, 71, 255, 229, 60, 200, 108, 252, 189, 147, 137, 136, 189, 251, 239, 182, 189, 235, 246, 196, 189, 128, 146, 117, 189, 129, 210, 184, 188, 31, 252, 50, 62, 197, 115, 151, 60, 117, 246, 70, 189, 13, 75, 49, 189, 135, 245, 5, 62, 244, 162, 135, 189, 86, 233, 247, 189, 226, 152, 25, 190, 31, 84, 44, 190, 203, 229, 138, 188, 88, 229, 83, 187, 200, 52, 216, 61, 189, 179, 50, 62, 25, 38, 214, 188, 145, 38, 228, 61, 1, 224, 185, 189, 31, 231, 37, 190, 231, 102, 186, 61, 1, 213, 224, 189, 142, 81, 207, 61, 35, 125, 143, 61, 50, 155, 14, 190, 225, 9, 174, 189, 141, 213, 205, 61, 31, 79, 186, 189, 72, 6, 41, 62, 161, 48, 244, 189, 47, 245, 113, 188, 219, 28, 37, 188, 0, 194, 192, 188, 178, 13, 163, 61, 24, 109, 192, 189, 93, 149, 45, 62, 205, 157, 218, 61, 38, 184, 30, 62, 221, 11, 190, 61, 209, 201, 203, 61, 133, 12, 185, 61, 121, 187, 204, 61, 212, 214, 112, 61, 237, 85, 63, 61, 118, 61, 15, 190, 159, 90, 242, 61, 210, 62, 26, 62, 136, 144, 28, 190, 174, 99, 167, 189, 26, 105, 8, 190, 37, 177, 10, 62, 103, 211, 42, 190, 175, 26, 205, 189, 150, 41, 145, 61, 162, 143, 36, 62, 8, 91, 36, 62, 72, 67, 245, 188, 16, 19, 171, 189, 56, 49, 251, 60, 10, 195, 0, 190, 43, 106, 38, 62, 5, 151, 50, 190, 246, 152, 203, 61, 33, 214, 123, 189, 251, 115, 170, 61, 206, 22, 212, 61, 150, 200, 204, 188, 23, 137, 245, 189, 145, 149, 198, 189, 146, 106, 38, 190, 75, 5, 24, 62, 43, 62, 209, 61, 135, 177, 70, 189, 112, 179, 85, 58, 152, 17, 179, 189, 11, 81, 43, 190, 82, 18, 193, 188, 11, 228, 7, 190, 171, 185, 48, 190, 238, 92, 97, 189, 229, 46, 46, 62, 193, 25, 80, 61, 116, 166, 125, 61, 189, 241, 133, 189, 182, 220, 180, 188, 86, 200, 43, 62, 127, 7, 218, 189, 109, 46, 137, 61, 76, 131, 144, 61, 166, 28, 8, 62, 106, 235, 178, 189, 157, 90, 132, 187, 164, 164, 83, 187, 94, 126, 46, 62, 220, 235, 32, 190, 127, 209, 47, 190, 243, 111, 155, 188, 58, 2, 20, 188, 53, 91, 31, 190, 152, 67, 116, 61, 182, 48, 45, 189, 14, 212, 145, 187, 5, 124, 32, 62, 152, 47, 148, 61, 216, 194, 4, 190, 22, 128, 143, 189, 152, 26, 55, 61, 108, 233, 196, 60, 244, 149, 246, 189, 118, 194, 251, 61, 249, 59, 184, 189, 42, 102, 7, 190, 156, 128, 245, 61, 120, 247, 50, 190, 179, 51, 151, 189, 216, 32, 2, 62, 205, 225, 17, 188, 230, 6, 195, 189, 246, 116, 32, 61, 137, 24, 167, 61, 1, 247, 29, 190, 219, 131, 171, 189, 32, 118, 75, 189, 182, 100, 241, 189, 80, 25, 59, 189, 3, 189, 28, 190, 26, 164, 215, 189, 231, 197, 7, 190, 240, 85, 2, 188, 67, 235, 43, 190, 249, 101, 62, 188, 65, 46, 28, 190, 30, 84, 20, 190, 111, 10, 31, 61, 234, 202, 147, 189, 35, 96, 51, 62, 147, 82, 137, 61, 98, 216, 44, 62, 6, 159, 59, 60, 158, 97, 7, 62, 111, 76, 108, 189, 127, 102, 29, 190, 79, 22, 55, 188, 75, 21, 158, 189, 13, 29, 4, 190, 118, 145, 64, 189, 161, 241, 3, 61, 227, 192, 227, 61, 193, 11, 44, 190, 67, 6, 217, 60, 83, 149, 6, 62, 67, 125, 152, 189, 89, 37, 45, 62, 83, 203, 110, 187, 251, 194, 153, 189, 21, 68, 160, 188, 159, 23, 49, 187, 153, 40, 37, 190, 8, 221, 139, 189, 80, 162, 36, 190, 116, 55, 101, 61, 225, 167, 253, 189, 222, 168, 174, 61, 33, 170, 61, 61, 20, 27, 152, 61, 240, 185, 9, 190, 76, 220, 217, 61, 245, 209, 25, 189, 82, 119, 149, 189, 98, 122, 252, 189, 40, 197, 24, 190, 8, 60, 237, 188, 252, 153, 254, 61, 159, 153, 209, 189, 116, 164, 96, 189, 182, 137, 97, 189, 145, 75, 35, 62, 146, 164, 225, 189, 146, 203, 40, 62, 30, 184, 184, 59, 129, 126, 7, 188, 237, 27, 60, 189, 162, 117, 99, 189, 133, 95, 88, 61, 45, 90, 133, 61, 207, 249, 231, 61, 194, 62, 41, 190, 149, 236, 9, 61, 138, 59, 202, 189, 32, 97, 79, 189, 94, 135, 141, 61, 234, 159, 32, 61, 20, 109, 129, 61, 222, 100, 121, 61, 219, 148, 23, 62, 12, 233, 17, 189, 230, 59, 19, 190, 49, 58, 217, 188, 223, 103, 35, 62, 241, 138, 129, 189, 127, 124, 23, 61, 225, 227, 46, 61, 178, 187, 187, 189, 236, 186, 20, 62, 18, 79, 41, 190, 61, 141, 71, 61, 117, 224, 113, 188, 185, 121, 149, 61, 69, 3, 29, 190, 22, 206, 93, 188, 65, 144, 32, 62, 152, 139, 54, 189, 132, 88, 22, 62, 212, 157, 40, 190, 43, 138, 201, 61, 179, 119, 177, 60, 169, 210, 121, 189, 63, 54, 15, 190, 231, 79, 1, 190, 140, 23, 246, 188, 57, 32, 138, 188, 236, 219, 41, 62, 167, 142, 18, 62, 140, 157, 246, 189, 12, 159, 246, 189, 203, 51, 104, 61, 250, 179, 24, 189, 111, 19, 175, 189, 70, 148, 149, 61, 91, 215, 24, 188, 138, 27, 39, 190, 213, 46, 238, 61, 234, 107, 13, 190, 147, 231, 175, 189, 8, 139, 37, 188, 64, 59, 228, 189, 69, 209, 9, 62, 57, 183, 203, 188, 13, 56, 78, 189, 111, 197, 243, 189, 184, 131, 233, 189, 122, 117, 179, 189, 206, 47, 42, 62, 45, 36, 11, 190, 89, 104, 12, 190, 83, 25, 122, 189, 76, 12, 17, 62, 8, 236, 17, 190, 70, 241, 115, 189, 214, 229, 86, 189, 176, 104, 178, 188, 205, 211, 209, 189, 140, 228, 27, 190, 160, 55, 123, 188, 146, 67, 24, 61, 132, 53, 83, 61, 222, 211, 181, 61, 130, 227, 24, 189, 189, 131, 15, 190, 242, 71, 20, 190, 13, 174, 229, 61, 157, 163, 173, 61, 181, 93, 32, 62, 83, 210, 211, 189, 25, 214, 202, 61, 139, 143, 99, 61, 254, 188, 20, 60, 24, 95, 32, 190, 231, 233, 107, 60, 120, 244, 49, 62, 151, 243, 174, 61, 190, 166, 7, 189, 128, 72, 248, 189, 2, 49, 152, 188, 193, 53, 92, 189, 84, 43, 207, 61, 247, 47, 194, 189, 79, 48, 17, 190, 250, 158, 55, 189, 248, 229, 201, 188, 208, 55, 18, 62, 28, 145, 1, 189, 28, 158, 197, 61, 163, 171, 5, 60, 127, 51, 106, 189, 91, 179, 6, 189, 156, 206, 223, 189, 34, 40, 226, 60, 98, 101, 4, 62, 136, 224, 166, 189, 81, 162, 47, 190, 206, 55, 52, 190, 7, 149, 216, 189, 221, 87, 159, 189, 73, 107, 12, 62, 157, 2, 213, 189, 183, 42, 224, 189, 182, 28, 198, 189, 71, 88, 52, 62, 109, 116, 135, 61, 113, 199, 50, 61, 81, 22, 53, 189, 38, 74, 244, 61, 81, 221, 0, 62, 120, 60, 221, 61, 240, 13, 180, 61, 11, 212, 255, 61, 193, 5, 135, 61, 94, 78, 0, 61, 32, 29, 11, 61, 216, 30, 43, 190, 24, 171, 83, 60, 207, 84, 82, 61, 51, 93, 186, 60, 51, 171, 35, 62, 94, 192, 42, 60, 45, 103, 26, 62, 137, 33, 38, 189, 126, 244, 242, 188, 246, 55, 97, 61, 3, 116, 99, 189, 156, 62, 184, 189, 220, 35, 12, 62, 195, 131, 178, 189, 182, 227, 11, 62, 180, 181, 45, 61, 65, 180, 110, 60, 13, 225, 20, 190, 227, 248, 33, 190, 175, 108, 196, 189, 191, 224, 238, 189, 99, 128, 187, 61, 86, 74, 153, 61, 120, 180, 40, 61, 97, 201, 123, 188, 15, 39, 36, 62, 105, 127, 49, 62, 254, 26, 170, 59, 31, 198, 161, 189, 33, 150, 61, 188, 34, 141, 219, 188, 9, 243, 72, 188, 26, 117, 129, 188, 239, 162, 165, 189, 191, 111, 225, 61, 58, 254, 184, 189, 132, 62, 151, 59, 250, 201, 21, 62, 20, 191, 227, 189, 144, 146, 2, 190, 177, 69, 18, 62, 36, 195, 26, 62, 249, 98, 30, 190, 17, 90, 142, 189, 220, 172, 155, 189, 159, 33, 43, 190, 81, 58, 41, 190, 240, 126, 15, 189, 104, 77, 11, 190, 66, 50, 68, 61, 198, 67, 185, 59, 49, 134, 167, 189, 92, 241, 50, 62, 207, 10, 19, 61, 137, 137, 37, 190, 45, 133, 165, 61, 192, 253, 102, 187, 23, 20, 34, 62, 73, 35, 148, 61, 202, 223, 46, 190, 121, 215, 160, 189, 53, 192, 14, 190, 96, 91, 138, 60, 93, 177, 57, 189, 0, 65, 38, 189, 159, 72, 49, 62, 233, 165, 226, 60, 189, 15, 157, 61, 4, 153, 253, 189, 179, 217, 20, 190, 92, 102, 37, 189, 11, 111, 17, 62, 226, 229, 51, 190, 203, 95, 32, 190, 121, 25, 249, 188, 55, 98, 199, 189, 205, 196, 176, 187, 228, 76, 32, 190, 197, 41, 247, 61, 242, 192, 157, 60, 120, 150, 27, 62, 73, 95, 38, 189, 242, 75, 41, 61, 213, 200, 126, 189, 203, 9, 243, 59, 197, 82, 23, 190, 70, 73, 244, 60, 193, 40, 28, 190, 71, 55, 21, 190, 250, 107, 242, 188, 72, 52, 181, 61, 116, 22, 111, 60, 7, 248, 215, 189, 237, 98, 177, 59, 74, 150, 245, 61, 88, 110, 42, 62, 165, 186, 122, 188, 158, 36, 45, 190, 115, 92, 79, 61, 145, 139, 19, 190, 57, 23, 45, 62, 114, 9, 27, 62, 93, 69, 225, 61, 63, 25, 15, 189, 207, 30, 163, 61, 240, 230, 206, 61, 128, 242, 41, 190, 138, 46, 174, 61, 85, 116, 101, 60, 65, 160, 180, 189, 101, 173, 9, 62, 161, 149, 25, 62, 217, 96, 37, 189, 225, 28, 252, 189, 162, 192, 162, 60, 173, 245, 29, 62, 31, 80, 173, 186, 11, 181, 78, 61, 10, 123, 155, 58, 133, 7, 13, 62, 75, 62, 86, 60, 33, 207, 10, 190, 35, 186, 76, 60, 160, 203, 2, 59, 121, 76, 54, 189, 175, 47, 200, 61, 48, 134, 0, 190, 130, 2, 51, 62, 211, 218, 152, 61, 26, 122, 241, 58, 29, 51, 24, 190, 68, 119, 17, 62, 103, 87, 18, 187, 71, 227, 89, 189, 52, 126, 171, 61, 28, 145, 6, 190, 232, 113, 20, 188, 60, 60, 213, 61, 170, 209, 40, 190, 229, 140, 137, 189, 42, 229, 169, 61, 23, 111, 38, 190, 50, 127, 16, 190, 207, 212, 80, 187, 127, 66, 45, 190, 232, 95, 199, 189, 207, 132, 140, 61, 198, 46, 241, 189, 251, 214, 172, 189, 13, 152, 32, 61, 171, 173, 128, 189, 71, 149, 114, 61, 42, 193, 6, 62, 94, 107, 188, 189, 206, 188, 46, 62, 124, 91, 48, 189, 20, 50, 167, 61, 241, 74, 47, 189, 83, 134, 21, 190, 1, 88, 23, 190, 109, 182, 67, 61, 244, 197, 17, 62, 32, 140, 190, 61, 209, 226, 0, 189, 180, 56, 124, 61, 242, 225, 168, 61, 161, 241, 83, 60, 125, 27, 160, 188, 92, 124, 253, 188, 240, 249, 135, 60, 185, 69, 167, 60, 252, 49, 189, 58, 140, 99, 10, 190, 169, 15, 37, 190, 7, 128, 238, 61, 248, 0, 37, 188, 121, 217, 180, 61, 134, 201, 138, 189, 3, 202, 43, 190, 142, 62, 156, 186, 199, 10, 241, 61, 255, 189, 14, 188, 130, 192, 102, 189, 119, 91, 180, 188, 118, 93, 18, 62, 58, 118, 189, 189, 236, 61, 207, 61, 30, 68, 23, 62, 207, 47, 187, 61, 25, 20, 9, 189, 41, 144, 7, 61, 180, 206, 230, 61, 208, 59, 21, 62, 44, 134, 7, 189, 215, 110, 65, 61, 244, 250, 156, 188, 231, 66, 170, 60, 83, 5, 91, 59, 41, 13, 61, 189, 152, 159, 7, 189, 129, 246, 217, 187, 165, 233, 147, 189, 248, 231, 210, 189, 133, 214, 2, 61, 128, 191, 45, 62, 223, 3, 163, 188, 125, 243, 99, 60, 119, 189, 12, 62, 88, 174, 13, 190, 16, 168, 209, 189, 250, 30, 40, 190, 246, 102, 204, 61, 175, 191, 51, 190, 32, 35, 47, 62, 111, 231, 28, 62, 250, 42, 91, 187, 77, 108, 10, 60, 224, 153, 6, 190, 182, 106, 11, 62, 25, 143, 129, 61, 84, 11, 197, 61, 49, 70, 207, 189, 10, 83, 114, 189, 218, 189, 5, 190, 60, 193, 205, 61, 253, 2, 16, 189, 67, 132, 6, 190, 43, 112, 220, 61, 32, 72, 199, 189, 165, 150, 253, 61, 104, 236, 141, 61, 202, 234, 196, 61, 202, 45, 171, 189, 152, 180, 243, 189, 198, 253, 147, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 79, 27, 62, 110, 34, 134, 61, 10, 66, 217, 189, 218, 2, 206, 59, 221, 166, 251, 60, 94, 169, 218, 61, 58, 141, 26, 62, 209, 136, 176, 189, 195, 187, 23, 61, 217, 74, 214, 60, 14, 179, 63, 189, 64, 75, 139, 61, 135, 173, 18, 190, 117, 84, 38, 190, 105, 122, 21, 62, 94, 253, 69, 61, 175, 77, 33, 62, 29, 2, 49, 62, 83, 12, 144, 59, 247, 200, 107, 189, 122, 4, 176, 61, 56, 216, 135, 61, 169, 154, 44, 190, 28, 12, 49, 190, 4, 206, 180, 61, 169, 84, 161, 61, 41, 219, 132, 61, 174, 248, 52, 190, 162, 168, 52, 190, 63, 158, 47, 189, 225, 85, 242, 189, 138, 93, 42, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 71, 210, 61, 224, 101, 85, 188, 151, 250, 108, 189, 126, 31, 239, 189, 64, 169, 27, 190, 234, 202, 210, 189, 73, 70, 109, 61, 193, 58, 172, 189, 46, 255, 199, 61, 175, 20, 179, 61, 31, 105, 178, 189, 229, 250, 142, 189, 204, 221, 146, 61, 76, 192, 234, 58, 14, 9, 75, 61, 32, 177, 12, 62, 77, 63, 6, 62, 163, 132, 137, 61, 158, 123, 192, 59, 158, 110, 173, 61, 229, 19, 3, 190, 154, 59, 142, 188, 227, 110, 3, 190, 74, 234, 34, 62, 181, 147, 137, 60, 182, 66, 250, 61, 67, 78, 140, 188, 223, 131, 130, 189, 117, 185, 40, 190, 116, 45, 194, 61, 250, 182, 122, 61, 46, 159, 183, 189, 249, 30, 214, 189, 15, 238, 5, 189, 255, 239, 3, 190, 116, 97, 90, 60, 207, 38, 9, 190, 153, 69, 212, 187, 55, 128, 150, 60, 187, 54, 247, 61, 44, 54, 166, 61, 183, 84, 100, 60, 171, 158, 49, 62, 189, 7, 230, 189, 38, 159, 6, 190, 51, 85, 27, 62, 74, 147, 141, 60, 193, 127, 35, 190, 44, 203, 91, 189, 215, 230, 42, 61, 213, 184, 35, 62, 114, 73, 52, 190, 239, 56, 52, 190, 171, 210, 51, 62, 186, 62, 109, 188, 6, 134, 0, 190, 6, 96, 44, 190, 200, 191, 149, 189, 189, 62, 235, 60, 178, 192, 22, 61, 54, 108, 14, 190, 134, 231, 202, 61, 111, 55, 190, 189, 61, 219, 167, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 86, 41, 61, 160, 193, 99, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {89, 221, 48, 62, 186, 29, 5, 192, 80, 69, 89, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {96, 251, 71, 59, 32, 84, 81, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0076/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}