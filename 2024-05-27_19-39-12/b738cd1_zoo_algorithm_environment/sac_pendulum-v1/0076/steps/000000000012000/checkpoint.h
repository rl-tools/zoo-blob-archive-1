// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 76, 163, 190, 97, 241, 175, 191, 214, 217, 69, 190, 10, 40, 54, 62, 142, 38, 183, 62, 110, 171, 144, 190, 78, 124, 49, 63, 182, 33, 74, 63, 32, 68, 76, 63, 137, 1, 243, 61, 13, 113, 59, 191, 62, 0, 213, 62, 164, 91, 158, 61, 54, 45, 146, 190, 52, 44, 64, 190, 135, 203, 204, 61, 142, 96, 202, 61, 153, 189, 254, 62, 139, 23, 20, 63, 23, 93, 16, 191, 216, 82, 79, 190, 93, 76, 89, 190, 153, 65, 188, 190, 229, 238, 0, 63, 171, 34, 165, 190, 185, 87, 91, 63, 116, 160, 4, 190, 147, 135, 3, 191, 23, 166, 183, 191, 39, 210, 154, 190, 107, 216, 184, 62, 243, 217, 28, 63, 27, 112, 28, 191, 247, 14, 234, 190, 130, 230, 97, 190, 250, 133, 2, 191, 243, 64, 11, 190, 3, 160, 13, 191, 109, 182, 172, 62, 184, 144, 123, 191, 134, 203, 44, 63, 56, 210, 28, 62, 106, 193, 3, 191, 150, 219, 126, 191, 77, 214, 92, 62, 167, 73, 161, 62, 227, 84, 48, 63, 214, 234, 37, 62, 206, 192, 61, 191, 28, 146, 112, 190, 12, 49, 1, 63, 248, 141, 178, 62, 58, 45, 160, 190, 8, 220, 54, 187, 25, 72, 96, 191, 36, 103, 166, 62, 37, 125, 231, 189, 179, 29, 143, 189, 184, 250, 250, 62, 133, 117, 11, 190, 143, 147, 168, 62, 136, 44, 41, 191, 182, 32, 5, 191, 49, 198, 38, 190, 226, 17, 137, 63, 218, 30, 97, 62, 99, 85, 225, 189, 232, 77, 144, 63, 220, 224, 64, 190, 212, 250, 82, 60, 18, 37, 127, 62, 140, 74, 202, 190, 240, 164, 84, 62, 183, 229, 215, 63, 255, 202, 182, 62, 144, 192, 99, 190, 68, 142, 93, 191, 248, 140, 204, 62, 252, 109, 102, 191, 11, 190, 13, 62, 145, 90, 55, 188, 161, 137, 136, 190, 248, 224, 171, 63, 108, 237, 141, 62, 214, 7, 227, 189, 94, 216, 65, 63, 100, 235, 132, 62, 56, 136, 36, 62, 24, 154, 154, 191, 166, 40, 172, 190, 227, 44, 14, 191, 119, 109, 174, 188, 72, 98, 129, 63, 7, 228, 14, 63, 108, 67, 43, 191, 2, 125, 68, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 200, 66, 190, 141, 191, 98, 191, 73, 239, 213, 190, 202, 128, 11, 63, 142, 126, 88, 62, 63, 121, 105, 190, 84, 177, 223, 190, 88, 57, 7, 191, 140, 153, 146, 189, 14, 171, 97, 189, 75, 55, 177, 190, 183, 222, 189, 190, 11, 153, 0, 63, 30, 42, 181, 187, 118, 136, 154, 62, 213, 254, 161, 62, 129, 11, 213, 62, 95, 224, 23, 63, 23, 228, 101, 62, 244, 205, 39, 62, 1, 228, 45, 62, 123, 166, 229, 62, 21, 21, 239, 62, 91, 199, 41, 191, 66, 190, 135, 62, 86, 82, 223, 190, 13, 90, 49, 63, 124, 150, 43, 190, 16, 40, 15, 189, 52, 167, 30, 190, 198, 29, 186, 190, 208, 135, 191, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 24, 168, 61, 55, 222, 50, 190, 1, 180, 198, 190, 226, 27, 13, 62, 193, 149, 230, 60, 29, 164, 175, 190, 48, 201, 104, 62, 53, 130, 172, 190, 78, 239, 40, 62, 158, 97, 167, 190, 87, 225, 150, 190, 165, 184, 173, 189, 68, 33, 22, 62, 55, 232, 148, 62, 175, 182, 176, 61, 226, 9, 141, 62, 68, 86, 142, 61, 108, 73, 182, 62, 151, 59, 189, 190, 208, 239, 170, 186, 187, 178, 155, 61, 127, 108, 46, 61, 112, 156, 145, 190, 75, 76, 192, 61, 212, 127, 11, 190, 225, 254, 217, 61, 246, 214, 150, 61, 23, 165, 159, 62, 58, 231, 215, 189, 218, 62, 215, 60, 156, 134, 24, 62, 138, 217, 14, 62, 128, 156, 239, 190, 127, 186, 82, 189, 222, 100, 14, 191, 163, 130, 36, 190, 28, 220, 85, 190, 60, 160, 146, 191, 46, 97, 153, 62, 184, 252, 117, 191, 242, 161, 171, 60, 183, 5, 64, 191, 96, 235, 31, 191, 155, 235, 150, 190, 170, 13, 32, 61, 71, 197, 110, 62, 131, 254, 202, 189, 155, 235, 36, 190, 126, 97, 25, 62, 5, 205, 137, 190, 153, 203, 87, 62, 236, 26, 35, 62, 154, 245, 51, 190, 205, 18, 51, 62, 194, 179, 160, 190, 41, 30, 19, 61, 222, 54, 32, 189, 243, 56, 26, 62, 95, 172, 160, 61, 5, 97, 218, 62, 192, 246, 169, 189, 119, 246, 87, 62, 75, 58, 83, 190, 3, 212, 240, 62, 196, 1, 2, 190, 44, 52, 99, 188, 241, 55, 107, 189, 231, 237, 192, 61, 143, 69, 89, 62, 251, 255, 219, 190, 14, 191, 59, 191, 126, 163, 224, 190, 50, 141, 59, 191, 108, 47, 251, 190, 10, 158, 59, 62, 4, 41, 101, 190, 141, 142, 145, 188, 31, 169, 147, 61, 59, 72, 13, 62, 22, 238, 38, 62, 229, 110, 229, 188, 217, 15, 160, 62, 196, 73, 15, 191, 208, 206, 134, 62, 201, 220, 61, 188, 63, 220, 15, 62, 230, 73, 205, 60, 128, 80, 135, 189, 135, 190, 82, 61, 219, 237, 0, 190, 8, 237, 122, 190, 107, 12, 150, 191, 20, 202, 122, 191, 173, 250, 223, 191, 224, 24, 148, 187, 5, 254, 128, 190, 138, 186, 117, 191, 110, 229, 16, 61, 116, 175, 142, 62, 71, 243, 177, 188, 26, 226, 240, 61, 215, 238, 162, 62, 74, 117, 53, 191, 87, 189, 226, 61, 65, 219, 173, 189, 93, 48, 25, 62, 191, 47, 110, 189, 63, 21, 102, 62, 25, 180, 200, 61, 201, 244, 241, 189, 207, 160, 202, 61, 155, 242, 84, 189, 163, 4, 225, 189, 100, 245, 233, 60, 229, 50, 181, 62, 176, 172, 45, 62, 255, 186, 254, 188, 185, 209, 0, 60, 174, 151, 121, 61, 171, 231, 122, 190, 74, 91, 45, 61, 36, 46, 74, 190, 134, 25, 46, 189, 37, 69, 24, 191, 87, 15, 20, 60, 49, 105, 164, 190, 140, 7, 3, 62, 166, 98, 102, 191, 142, 4, 224, 62, 245, 204, 245, 189, 9, 82, 140, 190, 4, 176, 19, 189, 115, 186, 20, 61, 44, 254, 85, 61, 83, 195, 179, 190, 95, 173, 157, 61, 22, 15, 103, 60, 249, 131, 162, 61, 237, 191, 248, 61, 179, 206, 68, 190, 230, 160, 56, 189, 37, 228, 65, 190, 237, 100, 58, 62, 105, 104, 128, 61, 31, 122, 112, 189, 172, 73, 45, 61, 190, 158, 201, 188, 222, 219, 175, 61, 101, 94, 43, 62, 213, 184, 173, 61, 171, 177, 222, 61, 70, 190, 27, 61, 157, 243, 110, 190, 101, 44, 43, 189, 62, 73, 213, 61, 110, 125, 138, 191, 84, 249, 167, 190, 29, 170, 57, 61, 25, 72, 173, 190, 89, 164, 48, 191, 244, 131, 249, 189, 91, 36, 99, 61, 155, 113, 129, 62, 191, 220, 30, 62, 169, 10, 164, 61, 8, 175, 139, 61, 109, 78, 62, 190, 77, 99, 196, 62, 158, 126, 5, 191, 18, 215, 156, 62, 151, 135, 150, 190, 111, 102, 140, 190, 236, 93, 173, 59, 243, 90, 146, 190, 120, 131, 44, 62, 218, 131, 114, 190, 238, 108, 146, 61, 152, 219, 3, 62, 108, 57, 2, 188, 6, 106, 48, 191, 33, 155, 119, 189, 141, 75, 119, 190, 94, 46, 67, 190, 89, 159, 57, 190, 173, 246, 33, 190, 82, 102, 152, 189, 235, 6, 24, 190, 95, 91, 199, 190, 168, 193, 112, 61, 14, 218, 117, 189, 62, 18, 146, 189, 197, 85, 188, 188, 19, 251, 56, 191, 114, 48, 166, 62, 211, 139, 8, 190, 178, 50, 185, 61, 78, 184, 54, 61, 161, 215, 116, 190, 135, 231, 102, 61, 9, 136, 69, 190, 163, 191, 145, 62, 139, 68, 194, 190, 100, 57, 181, 189, 86, 204, 12, 61, 175, 204, 203, 188, 231, 57, 200, 62, 54, 148, 139, 190, 234, 158, 25, 62, 79, 82, 192, 189, 79, 43, 235, 189, 100, 174, 233, 61, 50, 14, 246, 61, 66, 41, 45, 189, 220, 56, 113, 62, 185, 58, 224, 60, 176, 228, 68, 62, 114, 34, 156, 62, 209, 60, 99, 62, 205, 228, 63, 61, 4, 54, 49, 63, 185, 29, 143, 62, 178, 216, 64, 189, 245, 21, 100, 62, 40, 148, 110, 62, 160, 83, 187, 190, 192, 181, 145, 190, 14, 215, 94, 190, 249, 72, 36, 187, 236, 158, 75, 191, 22, 223, 35, 63, 141, 239, 228, 189, 10, 80, 213, 62, 125, 122, 83, 191, 35, 147, 187, 62, 179, 102, 39, 189, 133, 50, 56, 189, 55, 101, 106, 62, 236, 145, 200, 62, 163, 152, 235, 61, 227, 231, 242, 191, 141, 93, 135, 62, 224, 1, 84, 188, 16, 193, 92, 62, 182, 237, 111, 191, 22, 184, 232, 190, 118, 228, 131, 62, 250, 123, 113, 62, 224, 199, 165, 190, 40, 124, 228, 191, 73, 216, 215, 188, 31, 45, 119, 62, 22, 208, 195, 191, 157, 164, 127, 190, 112, 185, 139, 190, 60, 17, 42, 191, 1, 1, 123, 190, 204, 24, 240, 190, 91, 185, 149, 190, 87, 201, 131, 189, 138, 40, 197, 190, 217, 68, 194, 190, 89, 142, 102, 191, 163, 246, 113, 187, 195, 139, 10, 191, 83, 163, 57, 59, 103, 133, 11, 191, 183, 159, 36, 191, 16, 171, 230, 190, 119, 173, 195, 188, 229, 125, 113, 62, 15, 36, 159, 189, 90, 165, 59, 188, 82, 222, 66, 62, 208, 147, 96, 190, 230, 207, 128, 62, 220, 150, 43, 190, 175, 241, 105, 190, 251, 129, 29, 62, 163, 191, 23, 190, 126, 122, 66, 189, 200, 4, 223, 189, 224, 128, 144, 60, 130, 17, 69, 62, 148, 224, 151, 62, 172, 148, 138, 188, 100, 229, 167, 189, 16, 180, 250, 190, 206, 218, 144, 61, 125, 187, 116, 191, 94, 91, 67, 62, 99, 98, 49, 190, 162, 176, 72, 190, 10, 65, 167, 61, 65, 94, 19, 189, 150, 180, 4, 63, 181, 240, 30, 62, 210, 1, 197, 61, 221, 57, 151, 190, 158, 134, 130, 62, 12, 244, 135, 189, 117, 153, 206, 190, 21, 86, 20, 191, 28, 192, 71, 191, 255, 45, 65, 62, 77, 213, 121, 60, 221, 127, 159, 60, 21, 191, 249, 188, 255, 27, 227, 61, 18, 93, 144, 62, 145, 178, 32, 191, 101, 121, 77, 190, 92, 201, 138, 60, 123, 174, 118, 191, 221, 136, 133, 61, 155, 204, 245, 190, 176, 174, 190, 190, 143, 61, 83, 190, 115, 69, 119, 61, 137, 136, 73, 190, 193, 74, 77, 63, 5, 203, 24, 61, 19, 46, 51, 190, 150, 76, 21, 191, 197, 239, 163, 62, 43, 71, 160, 189, 25, 7, 59, 61, 25, 144, 34, 190, 197, 174, 137, 189, 87, 19, 51, 61, 85, 38, 88, 62, 100, 25, 151, 190, 47, 138, 214, 60, 232, 167, 145, 61, 201, 190, 135, 58, 210, 241, 148, 62, 47, 249, 170, 191, 27, 54, 4, 61, 105, 69, 26, 190, 37, 190, 21, 189, 164, 38, 172, 61, 130, 149, 36, 190, 104, 5, 10, 62, 164, 228, 205, 61, 208, 1, 124, 190, 113, 160, 254, 191, 22, 176, 123, 61, 20, 0, 52, 62, 120, 126, 62, 191, 42, 15, 214, 190, 26, 2, 202, 59, 178, 209, 102, 189, 117, 227, 161, 190, 207, 20, 120, 190, 193, 79, 34, 189, 24, 166, 123, 62, 99, 196, 140, 62, 188, 218, 90, 61, 12, 99, 230, 61, 120, 213, 182, 190, 49, 21, 30, 61, 43, 192, 152, 190, 161, 111, 61, 62, 95, 46, 252, 189, 178, 160, 52, 189, 229, 233, 178, 61, 167, 192, 148, 190, 181, 174, 227, 58, 83, 250, 104, 62, 152, 52, 39, 62, 70, 24, 248, 62, 233, 187, 213, 189, 91, 90, 170, 190, 211, 135, 246, 189, 67, 210, 3, 62, 62, 232, 218, 189, 2, 17, 49, 190, 135, 33, 223, 61, 116, 60, 17, 189, 99, 182, 75, 190, 76, 51, 133, 191, 159, 21, 19, 190, 182, 118, 106, 62, 219, 85, 207, 190, 15, 130, 29, 191, 133, 25, 63, 62, 110, 173, 236, 189, 5, 144, 183, 60, 74, 153, 233, 60, 222, 30, 251, 61, 113, 222, 137, 62, 204, 14, 137, 190, 15, 4, 144, 62, 17, 142, 123, 189, 84, 80, 50, 62, 214, 36, 210, 61, 97, 94, 151, 61, 8, 180, 206, 61, 27, 110, 72, 190, 215, 89, 234, 189, 220, 8, 226, 62, 225, 197, 67, 189, 48, 20, 210, 62, 107, 24, 153, 190, 109, 111, 149, 61, 214, 93, 144, 61, 46, 129, 76, 62, 121, 159, 199, 61, 148, 245, 158, 189, 133, 204, 71, 189, 201, 204, 110, 190, 234, 236, 122, 62, 191, 121, 22, 190, 202, 157, 187, 190, 104, 233, 207, 60, 186, 160, 57, 190, 36, 240, 139, 189, 123, 2, 134, 189, 150, 126, 113, 61, 19, 144, 225, 190, 91, 55, 150, 62, 114, 35, 228, 60, 158, 222, 15, 189, 209, 172, 43, 62, 172, 41, 16, 190, 54, 88, 143, 188, 100, 85, 214, 186, 139, 215, 245, 188, 106, 168, 161, 189, 145, 70, 119, 62, 250, 75, 186, 189, 104, 145, 119, 61, 139, 49, 156, 188, 59, 82, 145, 189, 244, 250, 1, 62, 79, 248, 44, 62, 83, 199, 31, 190, 155, 48, 81, 62, 204, 85, 163, 190, 60, 171, 192, 189, 233, 152, 196, 189, 230, 234, 130, 190, 48, 182, 14, 62, 165, 238, 42, 190, 88, 161, 2, 190, 235, 68, 41, 190, 109, 205, 131, 62, 21, 231, 136, 190, 22, 165, 246, 62, 105, 68, 152, 62, 249, 229, 18, 190, 42, 225, 32, 191, 255, 157, 52, 62, 205, 149, 60, 190, 105, 27, 150, 190, 0, 29, 81, 58, 32, 210, 169, 190, 126, 231, 171, 62, 164, 153, 248, 190, 175, 0, 40, 189, 244, 0, 140, 190, 29, 173, 125, 188, 130, 229, 167, 62, 31, 56, 245, 62, 212, 144, 248, 61, 80, 95, 154, 62, 184, 44, 8, 62, 140, 229, 159, 190, 71, 254, 17, 60, 18, 143, 134, 189, 110, 175, 178, 190, 162, 199, 198, 190, 220, 193, 102, 59, 216, 213, 181, 190, 133, 20, 66, 62, 81, 107, 193, 62, 202, 121, 61, 63, 253, 169, 120, 189, 17, 62, 126, 60, 211, 4, 28, 62, 180, 12, 60, 62, 223, 24, 16, 62, 158, 157, 206, 190, 141, 246, 113, 190, 199, 80, 8, 62, 196, 217, 187, 61, 75, 191, 201, 189, 199, 190, 174, 62, 182, 178, 138, 189, 97, 25, 28, 62, 89, 47, 150, 190, 211, 16, 239, 61, 99, 28, 181, 188, 92, 61, 160, 61, 224, 179, 253, 190, 254, 74, 210, 62, 30, 74, 105, 189, 129, 146, 197, 61, 201, 110, 223, 61, 150, 224, 166, 191, 123, 225, 197, 61, 104, 228, 37, 61, 6, 53, 230, 190, 9, 42, 37, 190, 75, 9, 157, 190, 229, 169, 65, 191, 152, 54, 103, 62, 231, 181, 227, 190, 221, 84, 215, 190, 85, 236, 12, 191, 114, 205, 112, 62, 138, 43, 213, 189, 97, 169, 144, 62, 29, 42, 76, 62, 41, 95, 137, 61, 173, 192, 224, 61, 198, 42, 37, 62, 83, 10, 22, 62, 89, 1, 104, 190, 71, 181, 11, 62, 54, 7, 56, 190, 203, 157, 6, 62, 29, 242, 139, 188, 233, 62, 84, 61, 70, 91, 5, 190, 33, 159, 75, 62, 27, 99, 180, 62, 200, 14, 151, 189, 44, 151, 183, 61, 147, 130, 80, 189, 0, 99, 93, 62, 144, 101, 170, 190, 255, 243, 224, 189, 85, 113, 88, 61, 63, 203, 58, 62, 248, 30, 203, 61, 191, 94, 31, 61, 132, 134, 122, 189, 243, 54, 42, 59, 128, 241, 106, 189, 231, 121, 2, 63, 246, 39, 196, 189, 165, 96, 243, 59, 77, 9, 42, 189, 131, 78, 153, 62, 225, 248, 76, 62, 104, 244, 81, 190, 73, 175, 166, 189, 237, 71, 179, 189, 238, 122, 40, 190, 28, 140, 40, 190, 126, 75, 55, 62, 115, 127, 66, 190, 1, 173, 5, 190, 183, 156, 65, 190, 243, 91, 166, 190, 73, 117, 209, 189, 218, 63, 186, 189, 215, 245, 68, 189, 50, 111, 24, 62, 178, 36, 147, 62, 161, 249, 61, 62, 65, 151, 11, 62, 59, 135, 88, 190, 238, 119, 180, 189, 38, 219, 68, 62, 29, 130, 23, 190, 217, 65, 24, 61, 54, 232, 184, 60, 107, 221, 189, 58, 108, 233, 205, 58, 64, 188, 57, 62, 101, 230, 170, 62, 137, 30, 15, 62, 114, 54, 98, 190, 67, 216, 175, 190, 212, 67, 96, 62, 202, 4, 0, 63, 197, 226, 240, 190, 236, 56, 226, 62, 181, 40, 133, 189, 88, 220, 12, 188, 230, 248, 173, 62, 66, 251, 214, 190, 231, 4, 59, 61, 255, 249, 141, 60, 206, 132, 146, 62, 241, 105, 2, 62, 182, 149, 228, 188, 178, 11, 199, 61, 138, 62, 106, 191, 122, 50, 176, 190, 202, 205, 130, 62, 252, 150, 154, 190, 214, 84, 132, 189, 250, 230, 142, 62, 121, 224, 104, 62, 59, 167, 27, 190, 24, 235, 32, 62, 207, 106, 123, 62, 1, 0, 111, 190, 158, 37, 39, 62, 108, 194, 85, 62, 13, 111, 96, 190, 130, 103, 52, 191, 162, 14, 36, 188, 34, 252, 170, 61, 1, 218, 194, 189, 112, 145, 27, 191, 239, 206, 222, 190, 67, 220, 26, 62, 173, 23, 41, 190, 107, 160, 215, 190, 63, 63, 83, 61, 234, 202, 147, 189, 151, 155, 164, 62, 147, 82, 137, 61, 109, 115, 133, 62, 93, 141, 46, 190, 5, 68, 110, 62, 156, 115, 41, 189, 27, 169, 199, 190, 213, 134, 137, 191, 233, 203, 77, 190, 210, 12, 128, 190, 63, 137, 35, 61, 12, 78, 18, 189, 86, 10, 45, 190, 180, 171, 232, 189, 167, 254, 106, 61, 165, 45, 77, 190, 229, 37, 151, 58, 196, 164, 134, 62, 70, 179, 209, 190, 102, 209, 28, 190, 227, 34, 104, 190, 226, 187, 227, 189, 108, 61, 177, 190, 190, 83, 203, 189, 42, 8, 141, 190, 228, 44, 162, 62, 161, 208, 87, 189, 161, 222, 172, 60, 182, 166, 33, 62, 156, 97, 113, 61, 26, 151, 18, 190, 165, 139, 201, 62, 146, 234, 18, 191, 45, 102, 121, 189, 213, 193, 53, 190, 63, 193, 57, 190, 45, 228, 143, 188, 113, 138, 10, 62, 187, 195, 158, 189, 197, 201, 198, 189, 31, 198, 233, 190, 220, 242, 151, 62, 248, 61, 200, 189, 190, 216, 128, 62, 158, 92, 153, 188, 65, 36, 178, 188, 25, 139, 201, 189, 243, 101, 124, 61, 235, 144, 34, 62, 64, 201, 232, 60, 112, 130, 96, 62, 162, 221, 4, 191, 16, 40, 240, 61, 254, 2, 169, 190, 150, 72, 191, 189, 190, 148, 53, 190, 140, 231, 46, 190, 95, 140, 78, 191, 28, 1, 105, 61, 14, 83, 20, 62, 190, 2, 96, 189, 232, 128, 44, 190, 144, 4, 169, 189, 23, 190, 22, 62, 187, 120, 134, 189, 240, 198, 88, 60, 204, 19, 214, 59, 79, 159, 213, 189, 108, 149, 218, 61, 171, 247, 50, 190, 16, 40, 203, 60, 72, 80, 69, 189, 92, 186, 102, 61, 174, 18, 74, 190, 60, 156, 249, 188, 238, 206, 194, 61, 139, 253, 178, 189, 100, 112, 222, 61, 77, 93, 78, 190, 130, 60, 61, 61, 195, 210, 213, 188, 164, 61, 122, 189, 202, 198, 69, 190, 55, 18, 16, 190, 96, 108, 151, 189, 179, 39, 71, 189, 245, 206, 226, 61, 107, 108, 4, 62, 18, 9, 253, 189, 12, 159, 246, 189, 6, 214, 209, 189, 23, 39, 57, 189, 174, 107, 24, 191, 9, 82, 82, 62, 100, 182, 105, 189, 235, 118, 133, 190, 209, 237, 144, 62, 74, 148, 178, 59, 186, 222, 30, 190, 5, 75, 5, 61, 65, 35, 170, 190, 58, 48, 12, 191, 61, 60, 192, 60, 154, 168, 2, 61, 169, 219, 221, 61, 149, 224, 178, 190, 140, 130, 143, 61, 90, 104, 91, 62, 39, 8, 176, 190, 231, 45, 187, 190, 56, 156, 135, 189, 103, 200, 125, 190, 119, 210, 0, 191, 20, 90, 166, 190, 104, 79, 181, 190, 88, 201, 160, 62, 108, 56, 17, 191, 176, 152, 19, 190, 220, 246, 76, 190, 174, 149, 4, 62, 238, 54, 211, 61, 169, 130, 112, 62, 115, 193, 178, 62, 189, 131, 15, 190, 71, 189, 243, 190, 191, 222, 102, 62, 71, 193, 122, 190, 161, 110, 72, 190, 87, 192, 193, 190, 144, 141, 79, 190, 238, 165, 183, 62, 95, 13, 240, 190, 39, 210, 36, 191, 28, 64, 65, 191, 191, 2, 153, 62, 60, 119, 167, 62, 88, 19, 152, 61, 131, 137, 236, 188, 194, 195, 86, 61, 147, 69, 12, 62, 156, 236, 167, 61, 79, 195, 126, 61, 103, 154, 238, 190, 145, 198, 20, 189, 104, 171, 66, 190, 57, 187, 153, 60, 109, 220, 216, 189, 57, 220, 21, 62, 72, 190, 94, 62, 107, 96, 222, 61, 102, 177, 39, 189, 19, 120, 195, 190, 10, 237, 12, 61, 61, 43, 20, 190, 229, 35, 74, 190, 161, 93, 193, 61, 58, 208, 49, 190, 16, 185, 195, 60, 210, 151, 34, 61, 100, 132, 43, 62, 42, 85, 78, 189, 193, 146, 212, 189, 179, 162, 65, 189, 158, 150, 89, 60, 124, 255, 58, 62, 77, 179, 177, 61, 134, 152, 46, 61, 29, 114, 40, 191, 135, 215, 14, 62, 49, 121, 6, 63, 24, 203, 46, 189, 44, 54, 198, 62, 224, 137, 197, 190, 249, 206, 254, 61, 221, 214, 239, 61, 255, 133, 0, 191, 65, 61, 182, 60, 251, 151, 18, 62, 93, 131, 150, 190, 40, 163, 186, 61, 144, 150, 201, 190, 223, 213, 211, 191, 3, 113, 21, 191, 47, 30, 251, 189, 198, 81, 51, 189, 7, 254, 13, 62, 188, 118, 170, 61, 79, 13, 203, 61, 233, 233, 254, 190, 140, 11, 142, 62, 206, 247, 160, 61, 228, 91, 235, 190, 149, 184, 183, 188, 222, 29, 8, 191, 10, 101, 148, 189, 225, 107, 211, 190, 38, 189, 84, 61, 199, 154, 121, 59, 25, 185, 52, 62, 234, 136, 72, 62, 219, 217, 183, 62, 208, 147, 133, 62, 183, 87, 197, 61, 31, 46, 214, 61, 167, 221, 166, 190, 230, 181, 132, 185, 28, 106, 59, 60, 3, 173, 57, 190, 123, 190, 70, 190, 92, 155, 148, 61, 62, 5, 141, 190, 181, 98, 238, 61, 158, 91, 143, 62, 119, 250, 74, 189, 128, 243, 78, 190, 45, 113, 69, 61, 200, 235, 92, 62, 26, 58, 0, 62, 230, 44, 229, 61, 139, 90, 195, 190, 47, 161, 16, 190, 97, 96, 179, 190, 152, 2, 99, 60, 195, 24, 17, 62, 95, 219, 37, 191, 78, 220, 186, 60, 69, 131, 79, 190, 90, 45, 3, 63, 116, 46, 52, 189, 228, 200, 129, 189, 25, 241, 193, 188, 197, 255, 87, 61, 142, 183, 42, 62, 229, 4, 61, 62, 139, 174, 127, 190, 34, 208, 32, 62, 203, 154, 48, 62, 60, 246, 53, 189, 159, 221, 83, 189, 94, 162, 115, 62, 185, 33, 233, 62, 8, 39, 1, 190, 103, 89, 146, 60, 157, 151, 62, 191, 96, 221, 96, 62, 19, 31, 99, 191, 52, 253, 162, 190, 48, 38, 143, 190, 116, 60, 189, 191, 219, 208, 11, 191, 166, 17, 57, 190, 241, 28, 12, 189, 218, 230, 32, 190, 239, 45, 118, 61, 202, 127, 170, 60, 120, 150, 27, 62, 219, 240, 214, 189, 35, 231, 38, 61, 233, 142, 209, 189, 207, 25, 225, 187, 253, 69, 44, 190, 203, 132, 185, 59, 51, 2, 64, 190, 143, 215, 75, 190, 111, 100, 90, 189, 57, 114, 50, 62, 91, 229, 153, 187, 220, 83, 161, 189, 169, 238, 122, 188, 5, 218, 204, 61, 31, 179, 39, 62, 7, 252, 30, 189, 15, 172, 45, 190, 151, 165, 210, 59, 84, 36, 73, 190, 163, 54, 29, 62, 112, 144, 12, 62, 93, 69, 225, 61, 13, 30, 124, 189, 144, 13, 119, 61, 239, 73, 35, 61, 128, 240, 170, 190, 63, 15, 147, 62, 147, 252, 7, 189, 43, 146, 140, 59, 77, 29, 47, 62, 152, 69, 70, 62, 196, 132, 250, 61, 204, 127, 208, 190, 103, 22, 87, 62, 104, 14, 91, 61, 75, 159, 47, 62, 84, 92, 154, 60, 163, 6, 240, 187, 1, 180, 51, 62, 241, 103, 139, 190, 6, 99, 221, 189, 156, 13, 34, 60, 182, 5, 195, 60, 4, 169, 17, 61, 185, 181, 113, 61, 12, 2, 55, 190, 11, 83, 110, 62, 173, 123, 113, 61, 74, 137, 178, 61, 71, 203, 80, 190, 63, 81, 235, 61, 226, 1, 15, 187, 86, 241, 190, 189, 12, 177, 191, 190, 10, 227, 63, 190, 187, 93, 6, 189, 184, 151, 176, 61, 42, 188, 38, 191, 229, 140, 137, 189, 42, 229, 169, 61, 236, 11, 51, 190, 130, 137, 43, 190, 11, 173, 68, 189, 127, 66, 45, 190, 232, 95, 199, 189, 207, 132, 140, 61, 211, 181, 9, 190, 136, 220, 0, 190, 244, 48, 38, 61, 153, 191, 153, 189, 175, 109, 0, 61, 30, 150, 199, 61, 191, 61, 238, 189, 218, 182, 23, 62, 177, 62, 161, 189, 79, 92, 18, 61, 112, 156, 172, 189, 254, 27, 63, 190, 51, 161, 58, 190, 167, 170, 116, 59, 230, 214, 192, 61, 32, 140, 190, 61, 48, 250, 135, 189, 199, 118, 26, 61, 235, 3, 24, 61, 10, 155, 77, 60, 20, 99, 52, 189, 115, 161, 3, 189, 206, 174, 29, 59, 185, 69, 167, 60, 84, 189, 1, 62, 201, 38, 95, 190, 185, 193, 10, 191, 86, 201, 148, 62, 241, 111, 130, 61, 93, 30, 77, 190, 217, 70, 211, 60, 105, 131, 200, 190, 250, 217, 27, 61, 3, 22, 115, 190, 108, 114, 30, 62, 222, 158, 128, 190, 46, 119, 4, 62, 58, 68, 43, 62, 246, 86, 7, 62, 137, 74, 40, 62, 199, 60, 86, 62, 113, 210, 155, 62, 232, 73, 50, 191, 181, 30, 137, 61, 112, 6, 68, 62, 217, 37, 160, 189, 63, 150, 146, 190, 60, 29, 95, 61, 209, 215, 138, 190, 95, 28, 59, 62, 144, 136, 31, 61, 58, 200, 126, 61, 225, 54, 11, 190, 16, 86, 149, 189, 53, 75, 108, 61, 131, 158, 70, 62, 121, 248, 219, 188, 210, 13, 168, 189, 132, 189, 2, 62, 242, 254, 176, 188, 229, 33, 82, 62, 114, 236, 127, 62, 122, 41, 120, 191, 55, 223, 164, 188, 87, 175, 68, 189, 192, 34, 188, 60, 35, 168, 193, 61, 205, 43, 72, 62, 42, 188, 15, 189, 130, 82, 50, 190, 240, 86, 148, 190, 174, 199, 108, 62, 209, 58, 131, 61, 53, 103, 163, 62, 44, 56, 255, 189, 129, 68, 179, 189, 218, 235, 46, 190, 248, 33, 64, 62, 7, 253, 39, 62, 137, 43, 159, 190, 194, 32, 12, 62, 240, 178, 157, 190, 16, 175, 103, 62, 33, 129, 193, 190, 25, 3, 199, 188, 163, 77, 189, 190, 8, 156, 159, 190, 197, 173, 208, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 65, 151, 62, 97, 236, 183, 61, 244, 175, 178, 188, 47, 23, 66, 188, 180, 87, 191, 61, 183, 115, 180, 61, 241, 12, 32, 61, 97, 13, 234, 61, 189, 171, 14, 189, 240, 74, 70, 190, 66, 94, 159, 61, 5, 236, 103, 62, 129, 91, 14, 62, 59, 82, 245, 189, 203, 231, 98, 62, 203, 200, 28, 62, 84, 109, 98, 62, 103, 167, 129, 62, 183, 123, 88, 61, 202, 25, 38, 190, 253, 93, 78, 62, 134, 250, 57, 60, 239, 204, 60, 190, 162, 126, 120, 61, 249, 87, 19, 62, 152, 114, 92, 62, 162, 108, 192, 62, 128, 70, 65, 190, 252, 61, 183, 189, 47, 93, 183, 189, 244, 75, 238, 60, 141, 29, 120, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 227, 196, 62, 185, 146, 142, 63, 24, 252, 231, 188, 75, 192, 123, 190, 48, 217, 43, 190, 152, 23, 17, 190, 241, 178, 97, 62, 45, 235, 158, 191, 202, 130, 66, 63, 160, 137, 119, 63, 26, 168, 5, 191, 202, 64, 225, 190, 96, 14, 55, 189, 29, 33, 87, 190, 48, 87, 103, 63, 185, 61, 154, 63, 189, 151, 145, 61, 225, 75, 110, 62, 5, 117, 240, 190, 24, 122, 147, 62, 241, 85, 179, 190, 242, 166, 13, 189, 237, 223, 108, 191, 108, 229, 30, 63, 232, 191, 6, 62, 185, 106, 251, 62, 167, 160, 95, 191, 210, 92, 164, 189, 147, 218, 177, 189, 4, 163, 212, 61, 247, 203, 250, 62, 232, 5, 166, 190, 142, 34, 184, 189, 27, 239, 195, 62, 194, 87, 139, 191, 1, 177, 125, 188, 181, 227, 160, 190, 80, 6, 79, 190, 229, 239, 58, 189, 48, 204, 7, 190, 194, 10, 161, 188, 166, 146, 194, 62, 219, 23, 14, 190, 144, 222, 58, 190, 166, 155, 222, 190, 3, 164, 187, 62, 216, 21, 165, 62, 146, 44, 58, 62, 93, 117, 85, 190, 115, 14, 194, 189, 233, 143, 31, 63, 247, 136, 76, 190, 104, 220, 134, 190, 225, 165, 25, 62, 247, 162, 55, 63, 198, 7, 142, 61, 112, 98, 0, 191, 179, 81, 226, 188, 91, 250, 35, 62, 201, 24, 145, 60, 30, 18, 46, 190, 32, 173, 97, 61, 65, 254, 109, 60, 132, 128, 26, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {108, 45, 109, 61, 191, 138, 187, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {172, 162, 15, 191, 131, 201, 83, 191, 242, 33, 173, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {46, 53, 15, 64, 3, 45, 26, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0076/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}