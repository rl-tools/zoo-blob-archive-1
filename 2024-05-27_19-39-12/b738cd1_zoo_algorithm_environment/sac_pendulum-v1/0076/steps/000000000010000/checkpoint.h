// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 139, 174, 190, 146, 33, 165, 191, 112, 32, 30, 190, 231, 201, 105, 62, 83, 28, 182, 62, 97, 189, 138, 190, 238, 224, 51, 63, 93, 113, 69, 63, 54, 201, 75, 63, 249, 133, 12, 62, 153, 92, 51, 191, 176, 119, 224, 62, 1, 83, 48, 62, 55, 69, 130, 190, 159, 161, 78, 190, 17, 249, 3, 61, 43, 224, 244, 61, 112, 139, 249, 62, 37, 254, 20, 63, 81, 208, 23, 191, 74, 195, 86, 190, 104, 153, 97, 190, 108, 190, 223, 190, 181, 108, 2, 63, 1, 91, 170, 190, 27, 108, 88, 63, 49, 174, 18, 190, 233, 254, 251, 190, 180, 67, 183, 191, 49, 20, 162, 190, 202, 115, 134, 62, 129, 218, 26, 63, 203, 4, 29, 191, 230, 255, 237, 190, 61, 41, 221, 189, 117, 124, 18, 191, 46, 30, 199, 189, 64, 96, 254, 190, 217, 242, 193, 62, 40, 124, 104, 191, 179, 244, 24, 63, 223, 95, 4, 62, 103, 226, 245, 190, 38, 172, 112, 191, 56, 145, 112, 62, 141, 119, 185, 62, 10, 100, 38, 63, 115, 207, 32, 62, 69, 213, 57, 191, 6, 86, 129, 190, 86, 219, 2, 63, 79, 146, 198, 62, 93, 27, 115, 190, 156, 156, 185, 59, 115, 157, 58, 191, 107, 37, 168, 62, 145, 183, 51, 190, 193, 123, 134, 189, 215, 233, 254, 62, 104, 235, 45, 190, 186, 229, 181, 62, 107, 187, 40, 191, 7, 243, 3, 191, 137, 251, 25, 190, 14, 193, 131, 63, 142, 217, 80, 62, 245, 73, 248, 189, 199, 197, 152, 63, 220, 19, 90, 190, 31, 134, 31, 61, 255, 4, 79, 62, 1, 51, 195, 190, 147, 132, 106, 62, 59, 191, 206, 63, 74, 94, 179, 62, 47, 134, 127, 190, 24, 136, 79, 191, 167, 9, 207, 62, 172, 232, 80, 191, 48, 215, 237, 61, 93, 192, 152, 188, 178, 121, 118, 190, 172, 183, 159, 63, 157, 190, 128, 62, 19, 254, 189, 189, 233, 95, 38, 63, 115, 204, 106, 62, 146, 77, 61, 62, 127, 156, 140, 191, 38, 33, 162, 190, 234, 118, 252, 190, 232, 43, 90, 189, 164, 147, 130, 63, 213, 231, 15, 63, 81, 229, 38, 191, 150, 241, 88, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 11, 151, 190, 202, 91, 98, 191, 212, 189, 201, 190, 162, 28, 13, 63, 230, 86, 154, 62, 207, 233, 121, 190, 99, 106, 215, 190, 200, 9, 234, 190, 2, 108, 46, 189, 242, 183, 254, 188, 148, 63, 177, 190, 15, 142, 163, 190, 232, 237, 8, 63, 115, 114, 225, 189, 245, 186, 166, 62, 220, 179, 196, 62, 233, 82, 221, 62, 147, 253, 32, 63, 28, 13, 111, 62, 104, 88, 62, 62, 32, 131, 83, 62, 144, 242, 240, 62, 43, 35, 234, 62, 86, 52, 44, 191, 210, 242, 142, 62, 58, 213, 236, 190, 173, 39, 51, 63, 153, 77, 46, 190, 0, 140, 115, 189, 14, 227, 3, 190, 227, 180, 208, 190, 62, 102, 186, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 111, 10, 60, 59, 131, 85, 190, 77, 34, 203, 190, 129, 189, 12, 62, 105, 68, 12, 61, 105, 236, 170, 190, 55, 59, 126, 62, 198, 162, 169, 190, 36, 24, 1, 62, 61, 89, 184, 190, 120, 28, 40, 190, 58, 204, 52, 190, 129, 126, 18, 62, 74, 111, 140, 62, 131, 34, 91, 61, 181, 62, 144, 62, 184, 60, 119, 61, 216, 142, 181, 62, 79, 229, 166, 190, 58, 20, 228, 59, 157, 26, 187, 61, 158, 94, 2, 61, 208, 19, 165, 190, 21, 13, 214, 60, 135, 207, 5, 190, 209, 28, 189, 61, 134, 198, 63, 61, 186, 33, 144, 62, 96, 99, 185, 189, 228, 139, 13, 60, 172, 141, 34, 62, 191, 190, 32, 62, 248, 78, 142, 190, 127, 186, 82, 189, 98, 246, 14, 191, 11, 235, 213, 189, 200, 105, 95, 190, 32, 102, 119, 191, 46, 97, 153, 62, 193, 25, 93, 191, 69, 26, 39, 188, 244, 94, 58, 191, 141, 59, 22, 191, 91, 11, 157, 190, 7, 93, 147, 61, 138, 243, 98, 62, 147, 14, 163, 189, 149, 128, 38, 190, 172, 169, 38, 62, 133, 15, 133, 190, 195, 184, 66, 62, 68, 77, 3, 62, 219, 1, 211, 189, 152, 217, 40, 62, 25, 175, 174, 190, 41, 30, 19, 61, 73, 212, 58, 189, 117, 88, 100, 62, 146, 222, 138, 61, 210, 202, 213, 62, 27, 227, 158, 189, 119, 246, 87, 62, 118, 152, 42, 189, 3, 212, 240, 62, 196, 1, 2, 190, 92, 254, 209, 187, 68, 215, 75, 190, 216, 63, 132, 61, 167, 215, 103, 62, 191, 48, 21, 191, 197, 230, 41, 191, 81, 141, 225, 190, 133, 71, 36, 191, 108, 47, 251, 190, 214, 173, 64, 62, 198, 42, 108, 190, 179, 57, 90, 189, 31, 169, 147, 61, 99, 247, 98, 189, 83, 157, 17, 62, 229, 165, 68, 190, 72, 239, 155, 62, 132, 44, 5, 191, 12, 41, 139, 62, 183, 232, 132, 60, 63, 203, 207, 61, 150, 104, 205, 60, 49, 196, 135, 189, 196, 31, 137, 59, 2, 167, 66, 190, 122, 126, 200, 189, 162, 29, 93, 191, 184, 17, 42, 191, 179, 67, 162, 191, 47, 189, 249, 189, 116, 149, 73, 190, 93, 211, 79, 191, 88, 117, 155, 60, 225, 95, 125, 62, 211, 123, 117, 188, 184, 173, 15, 62, 50, 226, 152, 62, 182, 198, 242, 190, 56, 189, 232, 61, 244, 67, 216, 189, 37, 109, 188, 61, 189, 53, 180, 189, 56, 165, 92, 62, 105, 132, 211, 61, 255, 137, 177, 189, 242, 80, 237, 61, 115, 233, 189, 189, 70, 91, 233, 189, 175, 154, 67, 61, 6, 105, 170, 62, 15, 52, 12, 62, 94, 104, 168, 188, 138, 201, 11, 189, 6, 197, 31, 60, 88, 20, 118, 190, 249, 45, 129, 188, 177, 69, 65, 190, 156, 146, 25, 189, 3, 195, 21, 191, 218, 110, 244, 188, 92, 220, 155, 190, 245, 153, 238, 61, 92, 18, 46, 191, 169, 246, 194, 62, 14, 156, 0, 190, 39, 201, 27, 190, 53, 79, 76, 60, 190, 170, 62, 60, 16, 20, 13, 60, 135, 102, 182, 190, 209, 62, 139, 61, 245, 202, 4, 61, 205, 145, 7, 61, 151, 78, 230, 61, 22, 214, 60, 190, 178, 28, 159, 187, 227, 56, 69, 190, 1, 46, 237, 61, 232, 83, 148, 61, 136, 56, 161, 189, 187, 72, 217, 60, 214, 88, 134, 188, 193, 209, 141, 61, 209, 109, 15, 62, 143, 219, 179, 61, 161, 16, 206, 61, 67, 88, 117, 61, 123, 117, 88, 190, 121, 45, 16, 189, 250, 13, 196, 61, 168, 58, 57, 191, 199, 113, 58, 190, 254, 132, 70, 60, 206, 166, 135, 190, 243, 182, 51, 191, 176, 235, 207, 189, 91, 36, 99, 61, 167, 84, 107, 62, 193, 207, 20, 62, 152, 219, 27, 61, 86, 232, 103, 61, 255, 147, 82, 190, 112, 202, 193, 62, 87, 176, 1, 191, 223, 84, 140, 62, 78, 127, 95, 190, 29, 213, 134, 190, 98, 43, 122, 187, 207, 62, 135, 190, 44, 7, 45, 62, 125, 12, 130, 190, 166, 111, 148, 61, 171, 63, 237, 61, 140, 196, 210, 187, 134, 24, 15, 191, 11, 35, 165, 189, 127, 56, 116, 190, 194, 192, 239, 189, 225, 42, 57, 190, 117, 254, 52, 190, 153, 250, 167, 189, 122, 234, 237, 189, 179, 117, 191, 190, 176, 58, 9, 61, 220, 160, 238, 189, 239, 4, 161, 189, 232, 206, 133, 189, 43, 55, 28, 191, 113, 20, 164, 62, 5, 203, 34, 190, 240, 243, 0, 62, 245, 238, 130, 61, 70, 176, 122, 190, 112, 104, 184, 61, 216, 244, 77, 190, 235, 232, 138, 62, 229, 160, 151, 190, 110, 28, 57, 189, 221, 103, 239, 60, 248, 123, 49, 59, 2, 32, 172, 62, 251, 214, 130, 190, 130, 255, 31, 62, 131, 190, 206, 189, 104, 82, 166, 189, 70, 164, 24, 62, 200, 34, 9, 62, 255, 238, 72, 188, 129, 85, 64, 62, 153, 190, 245, 59, 200, 118, 50, 62, 128, 88, 133, 62, 16, 19, 97, 62, 160, 221, 207, 60, 87, 174, 20, 63, 145, 224, 84, 62, 36, 214, 28, 189, 124, 50, 91, 62, 54, 133, 134, 62, 80, 167, 171, 190, 192, 181, 145, 190, 115, 15, 87, 190, 200, 135, 137, 60, 16, 137, 73, 191, 71, 221, 21, 63, 246, 223, 1, 190, 250, 92, 192, 62, 104, 87, 93, 191, 145, 203, 202, 62, 95, 121, 199, 189, 252, 123, 233, 189, 42, 159, 128, 62, 79, 128, 209, 62, 38, 119, 14, 62, 240, 163, 224, 191, 116, 219, 145, 62, 33, 55, 57, 60, 181, 113, 117, 62, 165, 13, 121, 191, 114, 102, 209, 190, 9, 165, 141, 62, 74, 34, 87, 62, 177, 88, 164, 190, 63, 145, 209, 191, 45, 131, 22, 189, 166, 215, 133, 62, 47, 185, 180, 191, 30, 107, 36, 190, 35, 109, 117, 190, 80, 160, 42, 191, 155, 155, 106, 190, 152, 95, 91, 190, 91, 185, 149, 190, 197, 169, 212, 189, 148, 120, 186, 190, 9, 254, 190, 190, 110, 3, 101, 191, 163, 246, 113, 187, 143, 186, 9, 191, 161, 210, 35, 188, 237, 80, 5, 191, 197, 30, 3, 191, 246, 70, 225, 190, 233, 106, 226, 188, 176, 211, 86, 62, 207, 252, 165, 189, 4, 133, 230, 186, 155, 182, 44, 62, 255, 227, 85, 190, 96, 41, 104, 62, 231, 214, 51, 190, 83, 164, 147, 188, 39, 125, 20, 62, 229, 76, 33, 190, 126, 122, 66, 189, 139, 220, 216, 189, 169, 205, 16, 60, 110, 38, 48, 62, 144, 184, 149, 62, 93, 8, 149, 188, 100, 229, 167, 189, 96, 17, 206, 190, 206, 218, 144, 61, 43, 187, 90, 191, 55, 189, 47, 62, 96, 74, 52, 190, 135, 158, 90, 190, 164, 60, 150, 61, 65, 94, 19, 189, 248, 176, 244, 62, 181, 240, 30, 62, 242, 155, 190, 61, 121, 143, 102, 190, 212, 149, 117, 62, 6, 183, 150, 189, 90, 4, 204, 190, 241, 62, 190, 190, 136, 245, 51, 191, 182, 192, 46, 62, 77, 213, 121, 60, 22, 35, 6, 188, 228, 136, 146, 188, 4, 236, 207, 61, 212, 109, 139, 62, 161, 75, 28, 191, 196, 88, 93, 190, 138, 159, 145, 59, 248, 131, 103, 191, 221, 136, 133, 61, 153, 35, 234, 190, 176, 174, 190, 190, 143, 61, 83, 190, 20, 246, 152, 61, 137, 136, 73, 190, 152, 5, 69, 63, 44, 121, 113, 61, 19, 46, 51, 190, 251, 25, 11, 191, 176, 5, 153, 62, 120, 95, 146, 189, 18, 45, 74, 60, 236, 157, 174, 189, 181, 75, 177, 189, 129, 1, 141, 189, 242, 0, 104, 62, 196, 186, 147, 190, 218, 217, 82, 60, 10, 159, 75, 61, 235, 35, 203, 188, 184, 19, 143, 62, 82, 217, 156, 191, 254, 249, 149, 60, 168, 212, 35, 190, 47, 157, 140, 189, 26, 174, 74, 60, 206, 75, 240, 189, 63, 152, 215, 61, 32, 174, 166, 60, 60, 14, 94, 190, 188, 108, 237, 191, 14, 81, 55, 61, 207, 99, 29, 62, 252, 88, 42, 191, 203, 31, 148, 190, 92, 215, 22, 61, 91, 77, 182, 188, 28, 133, 138, 190, 128, 189, 56, 190, 193, 79, 34, 189, 36, 192, 126, 62, 152, 146, 140, 62, 4, 216, 57, 61, 148, 60, 228, 61, 17, 176, 204, 190, 119, 13, 98, 61, 214, 199, 194, 190, 40, 19, 64, 62, 9, 85, 189, 190, 25, 208, 246, 60, 181, 179, 182, 61, 169, 237, 67, 190, 155, 87, 195, 60, 194, 88, 100, 62, 169, 31, 53, 62, 196, 156, 245, 62, 99, 15, 39, 190, 196, 31, 197, 190, 252, 47, 20, 190, 50, 230, 19, 62, 217, 104, 219, 189, 69, 136, 82, 190, 247, 187, 229, 61, 214, 35, 177, 188, 232, 99, 26, 190, 170, 154, 112, 191, 103, 198, 13, 190, 19, 69, 90, 62, 148, 242, 201, 190, 249, 234, 38, 191, 36, 80, 27, 62, 145, 234, 5, 190, 60, 56, 98, 60, 193, 100, 214, 60, 81, 200, 230, 61, 198, 122, 141, 62, 14, 27, 142, 190, 204, 61, 158, 62, 192, 115, 153, 187, 102, 169, 4, 62, 154, 24, 246, 61, 212, 89, 164, 61, 172, 36, 204, 61, 242, 58, 53, 190, 184, 43, 234, 189, 54, 37, 232, 62, 207, 29, 29, 189, 33, 16, 205, 62, 99, 9, 149, 190, 224, 245, 227, 61, 141, 54, 116, 61, 173, 105, 102, 62, 209, 119, 16, 62, 171, 152, 115, 189, 47, 5, 213, 188, 145, 46, 71, 190, 159, 36, 135, 62, 70, 219, 245, 189, 253, 255, 179, 190, 38, 144, 139, 60, 18, 208, 43, 190, 42, 45, 181, 189, 255, 45, 8, 189, 140, 147, 23, 60, 154, 41, 189, 190, 234, 17, 135, 62, 254, 39, 21, 60, 136, 145, 225, 189, 92, 165, 171, 61, 108, 172, 60, 190, 101, 43, 9, 60, 58, 178, 196, 60, 239, 2, 131, 189, 205, 219, 151, 189, 33, 187, 89, 62, 122, 105, 18, 189, 45, 128, 138, 61, 178, 158, 168, 188, 220, 128, 200, 189, 88, 11, 221, 61, 179, 73, 0, 62, 250, 142, 42, 190, 251, 81, 44, 62, 232, 83, 135, 190, 51, 63, 76, 189, 124, 153, 250, 189, 80, 248, 88, 190, 84, 83, 219, 61, 62, 244, 30, 190, 88, 161, 2, 190, 73, 222, 36, 190, 69, 198, 108, 62, 186, 7, 152, 190, 229, 66, 208, 62, 135, 95, 131, 62, 249, 229, 18, 190, 21, 109, 27, 191, 42, 200, 65, 62, 108, 0, 38, 190, 197, 56, 150, 190, 222, 180, 248, 59, 188, 124, 167, 190, 72, 5, 169, 62, 204, 166, 240, 190, 7, 3, 242, 189, 39, 204, 134, 190, 184, 3, 199, 187, 158, 167, 139, 62, 5, 201, 240, 62, 190, 230, 19, 62, 115, 231, 151, 62, 246, 160, 25, 62, 108, 236, 137, 190, 250, 31, 2, 60, 116, 25, 70, 189, 82, 250, 174, 190, 160, 223, 205, 190, 133, 253, 29, 61, 31, 68, 168, 190, 135, 25, 75, 62, 5, 161, 184, 62, 156, 218, 44, 63, 165, 29, 97, 189, 80, 184, 21, 188, 82, 117, 31, 62, 165, 91, 78, 62, 205, 155, 194, 61, 205, 131, 0, 191, 206, 191, 82, 190, 201, 110, 245, 61, 104, 78, 172, 61, 32, 66, 205, 189, 164, 197, 158, 62, 24, 94, 82, 189, 25, 232, 93, 61, 201, 242, 149, 190, 28, 238, 179, 61, 37, 217, 102, 189, 200, 117, 142, 61, 77, 238, 245, 190, 235, 188, 192, 62, 169, 169, 34, 189, 216, 121, 191, 61, 92, 102, 175, 61, 82, 153, 147, 191, 38, 150, 183, 61, 186, 60, 191, 60, 141, 177, 178, 190, 53, 125, 61, 190, 251, 112, 170, 190, 207, 99, 34, 191, 53, 41, 107, 62, 171, 134, 201, 190, 76, 159, 188, 190, 30, 252, 174, 190, 134, 212, 47, 62, 209, 219, 175, 189, 225, 83, 135, 62, 80, 106, 33, 62, 62, 145, 69, 61, 107, 110, 176, 61, 158, 44, 49, 62, 165, 78, 38, 62, 145, 65, 99, 190, 119, 64, 50, 62, 211, 11, 34, 190, 155, 123, 41, 62, 146, 24, 78, 189, 230, 81, 208, 61, 248, 153, 14, 190, 189, 100, 81, 62, 172, 227, 157, 62, 129, 198, 165, 189, 75, 67, 208, 61, 66, 81, 93, 189, 120, 161, 110, 62, 103, 64, 163, 190, 46, 11, 140, 189, 223, 40, 160, 61, 129, 69, 43, 62, 168, 149, 225, 61, 244, 30, 21, 61, 158, 103, 139, 189, 75, 60, 238, 60, 9, 148, 148, 189, 26, 118, 224, 62, 191, 238, 232, 189, 127, 197, 36, 60, 243, 54, 255, 188, 175, 22, 169, 62, 46, 25, 11, 62, 99, 83, 98, 190, 179, 205, 11, 190, 168, 218, 113, 189, 239, 217, 29, 190, 125, 202, 15, 190, 101, 24, 81, 62, 47, 90, 1, 190, 155, 62, 23, 190, 239, 220, 129, 190, 228, 108, 83, 190, 124, 50, 75, 190, 77, 180, 131, 189, 32, 202, 175, 189, 207, 58, 16, 62, 8, 100, 149, 62, 119, 28, 57, 62, 145, 250, 27, 62, 98, 50, 60, 190, 177, 188, 137, 189, 209, 24, 86, 62, 31, 92, 59, 190, 238, 67, 128, 60, 190, 126, 4, 189, 46, 161, 223, 188, 246, 104, 24, 59, 107, 166, 23, 62, 87, 250, 93, 62, 12, 126, 216, 60, 57, 80, 121, 190, 215, 124, 166, 190, 192, 146, 119, 62, 130, 216, 254, 62, 242, 246, 229, 190, 23, 69, 242, 62, 139, 143, 135, 189, 14, 86, 201, 188, 226, 187, 173, 62, 186, 44, 243, 190, 214, 167, 203, 60, 140, 52, 185, 60, 233, 171, 126, 62, 111, 3, 180, 61, 213, 22, 135, 188, 229, 138, 207, 61, 116, 24, 77, 191, 83, 160, 176, 190, 243, 177, 134, 62, 195, 179, 146, 190, 152, 138, 143, 189, 246, 9, 137, 62, 225, 223, 93, 62, 90, 161, 60, 190, 48, 142, 83, 62, 108, 147, 139, 62, 168, 211, 83, 190, 35, 128, 79, 62, 232, 218, 66, 62, 203, 31, 48, 190, 200, 174, 14, 191, 174, 10, 16, 61, 222, 26, 103, 60, 118, 237, 203, 189, 204, 59, 40, 191, 33, 140, 159, 190, 131, 77, 5, 62, 173, 23, 41, 190, 139, 23, 205, 190, 95, 226, 8, 61, 234, 202, 147, 189, 250, 215, 98, 62, 147, 82, 137, 61, 138, 144, 133, 62, 123, 97, 159, 189, 206, 168, 86, 62, 107, 172, 17, 189, 48, 167, 198, 190, 208, 85, 63, 191, 233, 203, 77, 190, 20, 26, 148, 190, 63, 137, 35, 61, 59, 91, 243, 189, 24, 253, 10, 190, 85, 69, 4, 190, 231, 92, 25, 61, 201, 70, 63, 190, 242, 146, 182, 188, 156, 99, 130, 62, 162, 223, 168, 190, 102, 209, 28, 190, 217, 242, 43, 190, 158, 22, 199, 189, 108, 61, 177, 190, 91, 199, 189, 189, 42, 8, 141, 190, 229, 134, 106, 62, 247, 30, 74, 189, 104, 73, 15, 61, 138, 161, 43, 62, 238, 114, 29, 61, 172, 119, 21, 190, 166, 119, 186, 62, 199, 101, 25, 191, 141, 149, 191, 189, 78, 188, 0, 190, 224, 126, 58, 190, 163, 70, 207, 188, 161, 239, 48, 62, 22, 28, 201, 189, 240, 248, 188, 189, 156, 196, 242, 190, 44, 236, 151, 62, 134, 224, 235, 189, 236, 187, 120, 62, 58, 7, 167, 60, 106, 107, 217, 186, 88, 2, 222, 189, 195, 180, 184, 61, 46, 170, 80, 62, 211, 173, 145, 61, 136, 232, 119, 62, 181, 207, 1, 191, 152, 206, 33, 62, 174, 21, 139, 190, 41, 184, 146, 189, 240, 219, 7, 190, 114, 26, 81, 190, 2, 205, 83, 191, 28, 1, 105, 61, 14, 83, 20, 62, 190, 2, 96, 189, 232, 128, 44, 190, 144, 4, 169, 189, 23, 190, 22, 62, 187, 120, 134, 189, 240, 198, 88, 60, 204, 19, 214, 59, 79, 159, 213, 189, 108, 149, 218, 61, 171, 247, 50, 190, 16, 40, 203, 60, 72, 80, 69, 189, 92, 186, 102, 61, 174, 18, 74, 190, 60, 156, 249, 188, 238, 206, 194, 61, 139, 253, 178, 189, 100, 112, 222, 61, 77, 93, 78, 190, 130, 60, 61, 61, 195, 210, 213, 188, 164, 61, 122, 189, 202, 198, 69, 190, 55, 18, 16, 190, 96, 108, 151, 189, 179, 39, 71, 189, 245, 206, 226, 61, 107, 108, 4, 62, 18, 9, 253, 189, 12, 159, 246, 189, 87, 47, 243, 189, 23, 39, 57, 189, 84, 216, 2, 191, 142, 175, 69, 62, 103, 39, 45, 189, 156, 110, 134, 190, 232, 168, 144, 62, 224, 180, 26, 189, 186, 222, 30, 190, 224, 178, 199, 60, 48, 185, 185, 190, 219, 68, 204, 190, 2, 79, 199, 59, 157, 73, 73, 58, 15, 89, 161, 61, 66, 244, 78, 190, 98, 124, 222, 57, 119, 70, 103, 62, 125, 106, 147, 190, 90, 169, 180, 190, 3, 184, 58, 189, 129, 41, 20, 190, 171, 113, 222, 190, 158, 239, 169, 190, 35, 230, 119, 190, 84, 81, 120, 62, 118, 217, 21, 191, 176, 152, 19, 190, 133, 175, 11, 190, 49, 85, 8, 62, 46, 20, 130, 61, 230, 252, 114, 62, 23, 242, 144, 62, 189, 131, 15, 190, 17, 105, 238, 190, 78, 4, 83, 62, 88, 251, 108, 190, 45, 167, 66, 190, 157, 164, 145, 190, 238, 0, 78, 190, 119, 79, 154, 62, 217, 55, 231, 190, 116, 177, 65, 191, 234, 122, 57, 191, 137, 98, 144, 62, 241, 83, 148, 62, 161, 187, 72, 61, 201, 109, 218, 188, 99, 50, 63, 61, 30, 33, 171, 61, 162, 222, 145, 61, 207, 162, 170, 59, 89, 171, 177, 190, 124, 189, 175, 188, 228, 152, 126, 190, 57, 187, 153, 60, 97, 140, 122, 189, 231, 249, 19, 62, 19, 199, 63, 62, 170, 27, 209, 61, 140, 35, 63, 59, 227, 66, 156, 190, 147, 255, 47, 61, 44, 230, 171, 189, 199, 93, 120, 190, 25, 35, 22, 61, 102, 97, 79, 190, 150, 215, 165, 59, 132, 113, 228, 60, 39, 22, 66, 62, 15, 234, 20, 189, 7, 25, 159, 189, 125, 102, 110, 189, 146, 82, 191, 187, 243, 63, 57, 62, 169, 57, 125, 61, 235, 13, 202, 60, 233, 158, 211, 190, 159, 94, 179, 61, 56, 183, 6, 63, 242, 109, 199, 188, 44, 5, 189, 62, 146, 89, 178, 190, 1, 105, 3, 62, 183, 172, 230, 61, 97, 2, 250, 190, 123, 168, 135, 186, 36, 9, 243, 61, 139, 78, 137, 190, 252, 94, 211, 61, 235, 165, 171, 190, 49, 28, 169, 191, 161, 48, 142, 190, 123, 22, 2, 190, 223, 141, 49, 188, 53, 220, 20, 62, 33, 7, 228, 60, 36, 211, 46, 61, 37, 185, 253, 190, 209, 3, 142, 62, 95, 183, 146, 61, 57, 148, 228, 190, 88, 178, 30, 57, 106, 124, 8, 191, 175, 153, 164, 189, 13, 119, 219, 190, 134, 165, 69, 61, 252, 94, 162, 189, 109, 199, 52, 62, 97, 180, 26, 62, 172, 229, 171, 62, 14, 92, 136, 62, 233, 226, 194, 61, 181, 15, 203, 61, 159, 178, 128, 190, 179, 127, 125, 59, 223, 233, 84, 60, 191, 3, 49, 190, 32, 250, 102, 190, 153, 66, 231, 187, 177, 224, 130, 190, 250, 34, 219, 61, 252, 29, 142, 62, 75, 206, 115, 189, 101, 59, 6, 190, 85, 118, 48, 61, 82, 76, 100, 62, 132, 139, 21, 62, 90, 168, 250, 61, 30, 160, 189, 190, 57, 78, 218, 189, 175, 106, 183, 190, 160, 13, 29, 60, 69, 103, 144, 189, 128, 229, 42, 191, 184, 206, 94, 61, 185, 129, 89, 190, 135, 111, 4, 63, 13, 178, 140, 189, 154, 42, 61, 189, 78, 80, 0, 189, 74, 40, 75, 61, 4, 218, 43, 62, 99, 207, 42, 62, 228, 159, 112, 190, 155, 30, 22, 62, 233, 241, 47, 62, 183, 45, 145, 189, 162, 146, 127, 189, 125, 130, 104, 62, 164, 187, 233, 62, 28, 26, 198, 189, 38, 168, 227, 59, 187, 184, 34, 191, 108, 55, 86, 62, 51, 47, 97, 191, 166, 218, 182, 190, 90, 181, 132, 190, 27, 15, 184, 191, 11, 199, 16, 191, 166, 17, 57, 190, 241, 28, 12, 189, 218, 230, 32, 190, 239, 45, 118, 61, 202, 127, 170, 60, 120, 150, 27, 62, 219, 240, 214, 189, 35, 231, 38, 61, 233, 142, 209, 189, 207, 25, 225, 187, 253, 69, 44, 190, 203, 132, 185, 59, 51, 2, 64, 190, 143, 215, 75, 190, 111, 100, 90, 189, 57, 114, 50, 62, 91, 229, 153, 187, 220, 83, 161, 189, 169, 238, 122, 188, 5, 218, 204, 61, 31, 179, 39, 62, 7, 252, 30, 189, 15, 172, 45, 190, 151, 165, 210, 59, 84, 36, 73, 190, 163, 54, 29, 62, 112, 144, 12, 62, 93, 69, 225, 61, 13, 30, 124, 189, 144, 13, 119, 61, 239, 73, 35, 61, 128, 240, 170, 190, 124, 195, 139, 62, 147, 231, 38, 189, 87, 117, 194, 187, 67, 43, 40, 62, 195, 117, 61, 62, 18, 135, 243, 61, 54, 36, 222, 190, 28, 13, 106, 62, 31, 221, 218, 61, 97, 37, 13, 62, 187, 130, 231, 60, 143, 211, 36, 60, 228, 30, 46, 62, 221, 232, 102, 190, 197, 174, 204, 189, 234, 47, 140, 59, 154, 86, 227, 60, 245, 238, 195, 60, 228, 176, 158, 61, 234, 129, 30, 190, 177, 74, 91, 62, 45, 74, 158, 61, 67, 59, 254, 61, 231, 142, 59, 190, 196, 51, 250, 61, 6, 237, 179, 60, 83, 132, 99, 189, 210, 165, 167, 190, 230, 5, 63, 190, 124, 95, 37, 189, 255, 20, 189, 61, 44, 114, 46, 191, 229, 140, 137, 189, 42, 229, 169, 61, 236, 11, 51, 190, 130, 137, 43, 190, 11, 173, 68, 189, 127, 66, 45, 190, 232, 95, 199, 189, 207, 132, 140, 61, 211, 181, 9, 190, 136, 220, 0, 190, 244, 48, 38, 61, 153, 191, 153, 189, 175, 109, 0, 61, 30, 150, 199, 61, 191, 61, 238, 189, 218, 182, 23, 62, 177, 62, 161, 189, 79, 92, 18, 61, 112, 156, 172, 189, 254, 27, 63, 190, 51, 161, 58, 190, 167, 170, 116, 59, 230, 214, 192, 61, 32, 140, 190, 61, 48, 250, 135, 189, 199, 118, 26, 61, 235, 3, 24, 61, 10, 155, 77, 60, 20, 99, 52, 189, 115, 161, 3, 189, 206, 174, 29, 59, 185, 69, 167, 60, 150, 57, 144, 61, 47, 26, 161, 190, 68, 123, 10, 191, 177, 115, 147, 62, 167, 23, 123, 61, 73, 180, 62, 190, 173, 63, 75, 61, 131, 221, 199, 190, 35, 195, 43, 60, 145, 98, 128, 190, 163, 71, 48, 62, 144, 152, 169, 190, 72, 38, 2, 62, 249, 19, 185, 61, 240, 103, 219, 61, 185, 12, 46, 62, 203, 45, 82, 62, 208, 46, 153, 62, 114, 62, 22, 191, 214, 13, 172, 61, 35, 139, 76, 62, 65, 45, 150, 189, 110, 89, 159, 190, 130, 164, 61, 189, 237, 65, 128, 190, 227, 244, 51, 62, 150, 23, 223, 60, 158, 105, 91, 61, 64, 88, 87, 189, 104, 10, 151, 189, 92, 168, 132, 61, 89, 118, 92, 62, 65, 138, 161, 61, 225, 196, 161, 189, 229, 132, 38, 62, 60, 188, 68, 189, 234, 189, 76, 62, 1, 191, 98, 62, 60, 96, 128, 191, 178, 219, 125, 189, 132, 194, 186, 188, 143, 170, 147, 61, 182, 105, 136, 61, 39, 213, 110, 62, 140, 45, 128, 189, 243, 45, 57, 190, 108, 16, 166, 190, 94, 106, 109, 62, 121, 193, 17, 61, 254, 231, 156, 62, 20, 72, 210, 189, 239, 212, 173, 189, 249, 108, 58, 190, 64, 23, 98, 62, 90, 164, 70, 62, 154, 214, 144, 190, 160, 244, 47, 62, 235, 16, 153, 190, 230, 129, 128, 62, 30, 17, 145, 190, 228, 236, 2, 61, 63, 172, 166, 190, 196, 62, 177, 190, 172, 178, 222, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 22, 149, 62, 187, 114, 169, 61, 165, 207, 250, 188, 132, 93, 4, 186, 97, 122, 148, 61, 213, 160, 186, 61, 175, 129, 136, 61, 56, 179, 11, 62, 84, 132, 58, 189, 189, 111, 80, 190, 210, 215, 106, 61, 130, 66, 101, 62, 79, 235, 12, 62, 72, 97, 10, 190, 64, 251, 106, 62, 130, 240, 9, 62, 214, 107, 109, 62, 182, 130, 136, 62, 56, 65, 94, 61, 26, 233, 63, 190, 104, 145, 73, 62, 134, 250, 57, 60, 108, 198, 50, 190, 198, 33, 147, 59, 1, 24, 6, 62, 181, 10, 88, 62, 99, 166, 184, 62, 128, 70, 65, 190, 89, 163, 192, 189, 47, 93, 183, 189, 89, 200, 202, 60, 183, 221, 79, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 27, 205, 62, 159, 121, 131, 63, 236, 249, 238, 188, 56, 204, 93, 190, 173, 116, 164, 189, 119, 239, 9, 190, 214, 129, 54, 62, 26, 255, 157, 191, 35, 129, 37, 63, 50, 185, 86, 63, 255, 102, 242, 190, 127, 220, 228, 190, 109, 36, 77, 189, 132, 251, 5, 190, 49, 93, 89, 63, 179, 161, 115, 63, 142, 58, 142, 61, 137, 27, 132, 62, 161, 140, 244, 190, 40, 205, 102, 62, 18, 224, 204, 190, 242, 166, 13, 189, 243, 35, 40, 191, 175, 81, 3, 63, 62, 60, 19, 62, 84, 69, 1, 63, 149, 6, 100, 191, 210, 92, 164, 189, 169, 82, 204, 189, 4, 163, 212, 61, 12, 100, 2, 63, 39, 114, 193, 190, 246, 25, 132, 189, 248, 247, 212, 62, 91, 28, 104, 191, 74, 31, 4, 189, 222, 92, 135, 190, 68, 56, 98, 190, 209, 117, 114, 189, 44, 101, 231, 189, 237, 42, 140, 60, 159, 143, 234, 62, 204, 40, 252, 189, 171, 118, 32, 190, 12, 134, 221, 190, 73, 23, 153, 62, 169, 18, 173, 62, 42, 195, 77, 62, 81, 61, 66, 190, 201, 146, 159, 189, 7, 200, 36, 63, 237, 158, 193, 189, 34, 71, 134, 190, 225, 165, 25, 62, 172, 209, 54, 63, 116, 59, 213, 61, 138, 155, 210, 190, 87, 58, 198, 187, 194, 46, 62, 62, 201, 24, 145, 60, 4, 45, 57, 190, 32, 173, 97, 61, 235, 158, 79, 60, 90, 187, 199, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 104, 96, 61, 232, 181, 171, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {99, 91, 242, 190, 19, 15, 136, 63, 181, 120, 208, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {217, 167, 195, 191, 152, 153, 79, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0076/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}