// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 13, 216, 190, 47, 137, 150, 191, 161, 225, 217, 189, 50, 252, 147, 62, 26, 117, 183, 62, 57, 71, 154, 190, 24, 72, 51, 63, 154, 140, 44, 63, 99, 74, 77, 63, 228, 160, 18, 62, 205, 0, 29, 191, 27, 92, 232, 62, 100, 143, 132, 62, 2, 43, 148, 190, 90, 118, 101, 190, 3, 199, 134, 60, 102, 132, 191, 61, 74, 34, 241, 62, 108, 191, 15, 63, 102, 82, 22, 191, 112, 236, 91, 190, 162, 227, 145, 190, 206, 238, 252, 190, 200, 74, 2, 63, 2, 184, 158, 190, 159, 89, 110, 63, 87, 117, 67, 190, 195, 60, 6, 191, 192, 182, 168, 191, 120, 10, 179, 190, 165, 38, 35, 62, 255, 37, 219, 62, 206, 238, 24, 191, 133, 169, 210, 190, 205, 80, 90, 189, 33, 37, 27, 191, 220, 191, 146, 189, 68, 244, 187, 190, 36, 221, 213, 62, 109, 157, 80, 191, 31, 237, 5, 63, 152, 48, 25, 62, 152, 103, 21, 191, 17, 129, 92, 191, 244, 100, 124, 62, 129, 158, 227, 62, 196, 145, 17, 63, 224, 92, 253, 61, 47, 252, 59, 191, 248, 196, 100, 190, 50, 253, 3, 63, 181, 124, 223, 62, 132, 37, 34, 190, 219, 7, 53, 60, 27, 78, 34, 191, 252, 158, 199, 62, 111, 126, 102, 190, 34, 129, 29, 189, 181, 195, 19, 63, 142, 192, 129, 190, 181, 71, 185, 62, 40, 210, 46, 191, 47, 43, 4, 191, 73, 156, 242, 189, 87, 73, 103, 63, 188, 165, 59, 62, 108, 135, 6, 190, 7, 16, 142, 63, 128, 161, 113, 190, 186, 2, 228, 61, 29, 130, 92, 62, 153, 241, 195, 190, 66, 23, 161, 62, 99, 171, 183, 63, 250, 143, 174, 62, 229, 149, 121, 190, 70, 133, 75, 191, 228, 86, 210, 62, 114, 212, 90, 191, 168, 240, 152, 61, 214, 164, 2, 189, 247, 214, 73, 190, 159, 221, 133, 63, 106, 113, 109, 62, 241, 210, 184, 188, 124, 47, 232, 62, 84, 49, 113, 62, 43, 140, 73, 62, 76, 8, 125, 191, 213, 19, 172, 190, 245, 70, 216, 190, 241, 67, 191, 189, 101, 7, 134, 63, 98, 152, 13, 63, 70, 247, 34, 191, 209, 198, 88, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 8, 206, 190, 129, 25, 69, 191, 224, 53, 195, 190, 178, 213, 13, 63, 161, 172, 188, 62, 219, 49, 128, 190, 179, 192, 217, 190, 69, 199, 197, 190, 88, 169, 46, 189, 13, 212, 35, 188, 51, 134, 255, 190, 193, 216, 172, 190, 99, 81, 12, 63, 244, 141, 64, 189, 18, 177, 131, 62, 244, 20, 213, 62, 217, 235, 225, 62, 253, 208, 39, 63, 200, 117, 60, 62, 22, 130, 60, 62, 198, 185, 128, 62, 220, 77, 5, 63, 16, 151, 234, 62, 152, 24, 34, 191, 139, 24, 137, 62, 225, 225, 246, 190, 161, 92, 31, 63, 224, 23, 91, 190, 43, 36, 215, 189, 179, 226, 240, 189, 11, 191, 219, 190, 13, 30, 185, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 3, 4, 189, 70, 146, 62, 190, 204, 214, 202, 190, 64, 127, 1, 62, 95, 221, 253, 60, 249, 255, 165, 190, 99, 49, 110, 62, 144, 32, 175, 190, 151, 21, 54, 62, 169, 48, 162, 190, 163, 91, 22, 190, 191, 238, 44, 190, 119, 121, 7, 62, 60, 82, 144, 62, 213, 201, 235, 60, 211, 252, 146, 62, 13, 35, 89, 61, 177, 208, 173, 62, 119, 230, 121, 190, 186, 39, 36, 61, 199, 138, 202, 61, 129, 179, 80, 61, 83, 251, 171, 190, 10, 185, 51, 61, 221, 1, 196, 189, 242, 204, 159, 61, 103, 58, 117, 61, 111, 188, 137, 62, 131, 127, 132, 189, 46, 230, 151, 61, 117, 126, 38, 62, 187, 151, 15, 62, 24, 67, 1, 60, 127, 186, 82, 189, 79, 126, 17, 191, 160, 186, 239, 189, 181, 205, 157, 189, 18, 124, 80, 191, 46, 97, 153, 62, 105, 223, 97, 191, 204, 18, 190, 60, 124, 114, 51, 191, 131, 70, 133, 190, 28, 215, 87, 190, 207, 202, 221, 60, 17, 89, 63, 62, 194, 126, 187, 189, 167, 117, 211, 189, 118, 68, 222, 61, 131, 8, 99, 190, 74, 115, 58, 62, 13, 55, 55, 62, 246, 135, 180, 189, 235, 148, 49, 62, 56, 225, 156, 190, 111, 114, 251, 60, 20, 167, 17, 58, 174, 89, 84, 62, 61, 142, 73, 61, 151, 235, 222, 62, 137, 40, 111, 189, 119, 246, 87, 62, 239, 56, 220, 189, 3, 212, 240, 62, 196, 1, 2, 190, 7, 35, 29, 189, 185, 176, 112, 190, 161, 194, 195, 61, 81, 11, 94, 62, 164, 2, 36, 191, 28, 143, 25, 191, 217, 138, 225, 190, 5, 192, 40, 191, 108, 47, 251, 190, 227, 41, 234, 188, 142, 136, 171, 190, 178, 182, 198, 188, 31, 169, 147, 61, 154, 104, 21, 190, 0, 174, 241, 61, 194, 121, 136, 190, 57, 66, 154, 62, 170, 73, 1, 191, 192, 136, 247, 61, 191, 111, 161, 59, 111, 160, 56, 61, 59, 123, 181, 189, 133, 80, 39, 190, 80, 80, 106, 189, 2, 167, 66, 190, 243, 245, 166, 189, 135, 98, 36, 191, 219, 246, 1, 191, 117, 26, 129, 191, 125, 131, 12, 190, 170, 171, 22, 190, 39, 72, 21, 191, 184, 197, 103, 60, 255, 247, 129, 62, 239, 198, 164, 188, 154, 198, 187, 61, 81, 180, 160, 62, 217, 41, 136, 190, 153, 39, 0, 62, 119, 128, 47, 190, 183, 31, 79, 59, 43, 87, 214, 189, 132, 36, 15, 62, 99, 75, 215, 61, 235, 191, 108, 188, 87, 144, 244, 61, 227, 158, 191, 189, 143, 5, 202, 189, 57, 235, 130, 59, 178, 120, 128, 62, 202, 85, 143, 61, 239, 104, 133, 189, 152, 113, 214, 56, 50, 232, 60, 189, 222, 46, 110, 190, 251, 192, 162, 60, 40, 79, 68, 190, 205, 61, 35, 189, 247, 68, 219, 190, 59, 70, 59, 60, 176, 113, 104, 190, 252, 33, 7, 62, 95, 224, 14, 191, 19, 126, 149, 62, 38, 115, 244, 189, 26, 115, 252, 189, 158, 67, 60, 61, 112, 194, 96, 186, 74, 115, 188, 60, 146, 73, 165, 190, 60, 185, 90, 61, 9, 139, 138, 61, 117, 255, 134, 186, 211, 167, 6, 62, 100, 120, 32, 190, 177, 227, 222, 60, 254, 212, 10, 190, 107, 145, 160, 61, 113, 215, 133, 61, 216, 240, 156, 189, 64, 146, 164, 60, 161, 8, 233, 60, 123, 52, 146, 61, 192, 235, 5, 62, 114, 178, 219, 61, 157, 26, 241, 61, 94, 92, 183, 61, 2, 195, 88, 190, 252, 42, 141, 189, 101, 192, 244, 61, 83, 80, 230, 190, 96, 54, 172, 189, 9, 22, 162, 60, 105, 213, 91, 190, 146, 221, 45, 191, 122, 50, 188, 189, 91, 36, 99, 61, 73, 244, 105, 62, 30, 215, 2, 62, 12, 3, 128, 189, 182, 96, 134, 61, 54, 241, 85, 190, 0, 72, 194, 62, 210, 110, 246, 190, 170, 178, 72, 62, 28, 50, 77, 190, 221, 229, 169, 190, 149, 213, 38, 188, 253, 3, 16, 190, 199, 134, 34, 62, 14, 123, 132, 190, 181, 149, 181, 61, 233, 202, 106, 61, 227, 105, 230, 60, 8, 135, 0, 191, 88, 4, 87, 190, 157, 102, 45, 190, 72, 0, 184, 189, 225, 42, 57, 190, 202, 243, 12, 190, 10, 20, 205, 189, 254, 200, 12, 189, 161, 41, 94, 190, 103, 29, 146, 61, 65, 163, 110, 190, 203, 77, 143, 189, 252, 98, 159, 189, 7, 31, 25, 191, 42, 97, 139, 62, 238, 251, 96, 190, 127, 27, 16, 62, 211, 134, 141, 61, 9, 110, 145, 190, 153, 148, 186, 61, 241, 146, 102, 190, 90, 52, 152, 62, 72, 232, 128, 190, 29, 167, 132, 189, 239, 22, 69, 187, 169, 101, 17, 60, 0, 4, 152, 62, 45, 169, 92, 190, 249, 142, 23, 62, 217, 254, 221, 189, 146, 110, 74, 189, 115, 247, 74, 62, 157, 135, 34, 62, 17, 149, 71, 188, 78, 17, 31, 62, 156, 216, 198, 60, 193, 96, 252, 61, 42, 189, 80, 62, 78, 85, 99, 62, 5, 150, 157, 61, 210, 87, 217, 62, 14, 71, 1, 62, 116, 184, 8, 189, 188, 222, 59, 62, 111, 52, 133, 62, 204, 4, 178, 190, 192, 181, 145, 190, 134, 192, 29, 190, 158, 189, 27, 60, 115, 243, 95, 191, 146, 32, 2, 63, 28, 66, 116, 189, 106, 24, 167, 62, 113, 39, 122, 191, 66, 124, 195, 62, 210, 255, 143, 190, 250, 3, 107, 190, 184, 66, 128, 62, 20, 229, 215, 62, 62, 126, 10, 62, 88, 37, 193, 191, 54, 103, 147, 62, 171, 209, 235, 187, 170, 149, 134, 62, 44, 57, 137, 191, 155, 248, 245, 190, 87, 5, 142, 62, 110, 26, 38, 62, 177, 88, 164, 190, 229, 26, 177, 191, 60, 190, 203, 189, 184, 33, 134, 62, 53, 248, 156, 191, 66, 0, 124, 189, 86, 154, 169, 190, 235, 17, 45, 191, 42, 65, 61, 190, 114, 96, 159, 188, 91, 185, 149, 190, 166, 163, 162, 189, 25, 33, 173, 190, 133, 150, 129, 190, 168, 66, 96, 191, 163, 246, 113, 187, 233, 63, 6, 191, 221, 122, 179, 187, 114, 134, 2, 191, 246, 178, 50, 190, 73, 71, 204, 190, 76, 131, 112, 189, 110, 27, 34, 62, 196, 91, 162, 189, 121, 253, 115, 61, 50, 61, 234, 61, 18, 114, 22, 190, 17, 190, 67, 62, 250, 216, 31, 190, 238, 237, 186, 61, 200, 175, 27, 62, 254, 226, 16, 190, 126, 122, 66, 189, 214, 132, 128, 189, 143, 217, 208, 59, 224, 163, 12, 62, 119, 226, 157, 62, 218, 152, 58, 60, 100, 229, 167, 189, 18, 83, 192, 190, 206, 218, 144, 61, 95, 33, 69, 191, 105, 67, 14, 62, 241, 37, 72, 190, 117, 52, 187, 189, 9, 225, 169, 61, 65, 94, 19, 189, 97, 78, 238, 62, 181, 240, 30, 62, 55, 124, 194, 61, 55, 141, 44, 190, 210, 113, 106, 62, 69, 52, 175, 189, 153, 27, 137, 190, 61, 63, 78, 189, 67, 19, 39, 191, 157, 202, 66, 62, 110, 173, 88, 60, 104, 93, 19, 60, 44, 35, 142, 188, 87, 109, 202, 61, 67, 56, 143, 62, 90, 103, 8, 191, 79, 155, 100, 190, 200, 223, 79, 188, 4, 241, 57, 191, 221, 136, 133, 61, 182, 200, 222, 190, 176, 174, 190, 190, 143, 61, 83, 190, 47, 220, 190, 61, 137, 136, 73, 190, 20, 54, 68, 63, 205, 120, 145, 61, 140, 98, 51, 190, 161, 221, 249, 190, 120, 115, 136, 62, 151, 156, 140, 189, 133, 56, 33, 189, 17, 23, 106, 189, 172, 198, 250, 189, 115, 141, 25, 190, 183, 204, 121, 62, 178, 204, 109, 190, 13, 141, 41, 61, 156, 197, 14, 61, 157, 226, 112, 59, 121, 193, 138, 62, 131, 153, 132, 191, 232, 237, 219, 60, 87, 135, 69, 190, 58, 156, 144, 188, 120, 22, 146, 58, 2, 247, 178, 189, 58, 126, 203, 61, 218, 20, 164, 59, 252, 252, 55, 190, 203, 138, 184, 191, 188, 189, 157, 188, 168, 128, 55, 62, 152, 241, 189, 190, 130, 177, 152, 189, 188, 166, 56, 61, 57, 221, 238, 59, 234, 128, 134, 190, 165, 237, 39, 190, 67, 227, 7, 189, 69, 215, 113, 62, 32, 173, 134, 62, 159, 205, 111, 61, 137, 228, 170, 61, 144, 198, 206, 190, 136, 48, 20, 61, 191, 193, 195, 190, 225, 172, 223, 61, 129, 95, 151, 190, 159, 46, 201, 60, 110, 130, 166, 61, 144, 134, 192, 189, 124, 229, 99, 60, 114, 25, 128, 62, 105, 126, 46, 62, 59, 48, 253, 62, 84, 51, 44, 190, 175, 46, 178, 190, 28, 241, 23, 190, 244, 130, 76, 62, 162, 78, 72, 189, 166, 22, 65, 190, 89, 158, 25, 62, 147, 128, 71, 189, 98, 96, 198, 189, 74, 16, 70, 191, 12, 69, 2, 190, 115, 206, 183, 61, 92, 230, 211, 190, 249, 70, 39, 191, 160, 220, 130, 61, 167, 96, 6, 190, 75, 135, 106, 188, 109, 219, 133, 60, 116, 63, 174, 61, 222, 91, 128, 62, 163, 180, 146, 190, 248, 70, 150, 62, 229, 117, 133, 187, 62, 97, 158, 61, 126, 226, 1, 62, 67, 194, 195, 61, 41, 179, 186, 61, 139, 37, 21, 190, 247, 210, 17, 190, 2, 146, 223, 62, 91, 206, 94, 189, 80, 61, 189, 62, 199, 66, 135, 190, 19, 28, 229, 61, 71, 224, 1, 61, 11, 24, 103, 62, 24, 116, 5, 62, 77, 222, 253, 188, 249, 219, 30, 189, 164, 142, 80, 190, 174, 231, 145, 62, 255, 86, 208, 189, 228, 192, 182, 190, 97, 124, 86, 58, 182, 209, 63, 190, 116, 177, 216, 189, 75, 212, 19, 61, 13, 69, 98, 189, 176, 127, 157, 190, 41, 180, 64, 62, 33, 212, 9, 60, 114, 109, 162, 190, 183, 176, 145, 59, 184, 28, 128, 190, 170, 195, 124, 61, 211, 189, 132, 61, 71, 69, 92, 189, 171, 26, 146, 189, 159, 24, 36, 62, 221, 216, 136, 61, 176, 40, 18, 62, 39, 110, 189, 188, 5, 26, 132, 189, 8, 140, 195, 61, 232, 208, 36, 62, 191, 193, 1, 190, 201, 0, 34, 62, 233, 255, 39, 190, 237, 45, 3, 61, 42, 57, 50, 190, 37, 171, 20, 190, 239, 30, 206, 60, 103, 59, 124, 189, 183, 4, 7, 190, 86, 225, 36, 190, 205, 146, 64, 62, 191, 45, 178, 190, 225, 60, 170, 62, 12, 18, 106, 62, 166, 69, 21, 190, 235, 50, 25, 191, 108, 139, 58, 62, 121, 50, 10, 190, 16, 50, 148, 190, 23, 53, 249, 187, 44, 127, 164, 190, 163, 85, 172, 62, 154, 108, 199, 190, 147, 68, 154, 189, 117, 126, 84, 190, 171, 152, 134, 188, 245, 110, 57, 62, 128, 38, 239, 62, 175, 86, 28, 62, 39, 92, 146, 62, 97, 97, 28, 62, 84, 193, 135, 190, 245, 96, 235, 61, 101, 228, 202, 187, 71, 185, 176, 190, 176, 103, 171, 190, 207, 204, 63, 61, 71, 150, 157, 190, 203, 69, 92, 62, 9, 55, 163, 62, 39, 25, 12, 63, 163, 11, 123, 189, 10, 6, 245, 59, 14, 204, 34, 62, 125, 191, 68, 62, 80, 100, 62, 60, 199, 123, 109, 190, 198, 150, 58, 190, 49, 253, 156, 61, 56, 255, 188, 61, 208, 123, 205, 189, 11, 80, 140, 62, 34, 13, 100, 189, 85, 42, 212, 189, 162, 115, 85, 190, 31, 72, 230, 188, 101, 77, 150, 189, 175, 153, 0, 61, 50, 81, 200, 190, 124, 39, 162, 62, 93, 7, 230, 187, 196, 48, 158, 61, 51, 71, 101, 61, 22, 176, 112, 191, 191, 168, 45, 62, 219, 115, 3, 61, 211, 72, 77, 190, 63, 169, 210, 189, 156, 107, 27, 190, 39, 232, 219, 190, 137, 191, 95, 62, 195, 175, 183, 190, 141, 10, 38, 190, 21, 231, 63, 190, 253, 175, 200, 61, 152, 218, 162, 189, 71, 158, 108, 62, 135, 174, 209, 61, 206, 122, 18, 61, 148, 168, 47, 61, 2, 143, 49, 62, 67, 72, 45, 62, 143, 133, 120, 190, 43, 159, 77, 62, 16, 133, 44, 190, 103, 92, 79, 62, 90, 62, 81, 189, 124, 175, 254, 61, 17, 78, 254, 189, 251, 153, 75, 62, 44, 229, 139, 62, 54, 74, 185, 189, 105, 113, 194, 61, 251, 245, 141, 189, 94, 99, 112, 62, 163, 8, 134, 190, 153, 197, 231, 188, 122, 44, 187, 61, 224, 183, 32, 62, 193, 127, 254, 61, 40, 190, 118, 61, 142, 89, 183, 189, 112, 9, 27, 61, 154, 120, 110, 189, 194, 66, 166, 62, 92, 71, 22, 190, 136, 178, 75, 61, 38, 29, 59, 189, 70, 69, 180, 62, 68, 93, 254, 61, 167, 239, 64, 190, 199, 166, 67, 190, 16, 179, 94, 189, 64, 133, 22, 190, 61, 171, 151, 189, 187, 38, 68, 62, 31, 5, 23, 190, 151, 203, 71, 189, 133, 215, 128, 190, 31, 155, 30, 190, 251, 183, 66, 190, 195, 254, 131, 189, 242, 48, 202, 189, 178, 244, 9, 62, 66, 152, 149, 62, 22, 142, 47, 62, 232, 131, 26, 62, 54, 223, 24, 190, 204, 89, 173, 188, 117, 66, 101, 62, 40, 97, 53, 190, 199, 73, 13, 61, 137, 138, 252, 59, 5, 23, 161, 188, 79, 113, 29, 188, 123, 76, 19, 62, 170, 98, 90, 62, 230, 37, 210, 60, 65, 172, 59, 190, 32, 195, 159, 190, 194, 92, 107, 62, 107, 38, 2, 63, 146, 10, 198, 190, 119, 127, 242, 62, 74, 229, 149, 189, 152, 248, 22, 189, 99, 234, 155, 62, 230, 214, 3, 191, 34, 220, 7, 189, 3, 59, 223, 188, 62, 88, 110, 62, 234, 115, 177, 61, 248, 66, 3, 186, 148, 149, 206, 61, 5, 2, 60, 191, 199, 254, 180, 190, 231, 150, 124, 62, 1, 244, 148, 190, 230, 114, 153, 189, 12, 74, 113, 62, 125, 44, 43, 62, 28, 166, 77, 190, 40, 221, 59, 62, 145, 182, 112, 62, 151, 166, 55, 190, 235, 27, 56, 62, 112, 151, 207, 61, 229, 110, 64, 190, 59, 211, 184, 190, 151, 170, 12, 61, 151, 36, 12, 189, 205, 121, 11, 190, 56, 79, 48, 191, 157, 22, 14, 190, 86, 187, 67, 61, 173, 23, 41, 190, 251, 212, 200, 190, 241, 23, 18, 61, 234, 202, 147, 189, 8, 225, 131, 62, 147, 82, 137, 61, 164, 162, 68, 62, 193, 239, 40, 61, 44, 227, 44, 62, 88, 131, 17, 189, 221, 121, 198, 190, 199, 29, 202, 190, 168, 79, 89, 190, 94, 200, 199, 190, 63, 137, 35, 61, 44, 222, 16, 190, 197, 133, 16, 190, 116, 21, 52, 190, 12, 28, 71, 61, 224, 109, 91, 190, 141, 207, 203, 189, 154, 248, 95, 62, 55, 253, 11, 190, 102, 209, 28, 190, 60, 232, 227, 189, 99, 146, 191, 189, 108, 61, 177, 190, 182, 229, 217, 188, 42, 8, 141, 190, 13, 77, 141, 62, 89, 254, 14, 189, 213, 203, 62, 61, 74, 167, 53, 62, 36, 7, 61, 61, 2, 46, 16, 190, 65, 201, 163, 62, 31, 31, 7, 191, 228, 78, 0, 190, 221, 64, 30, 190, 9, 44, 36, 190, 30, 50, 242, 188, 165, 34, 74, 62, 197, 204, 199, 189, 244, 196, 102, 190, 74, 34, 13, 191, 159, 62, 146, 62, 19, 67, 55, 190, 249, 83, 128, 62, 55, 71, 19, 60, 220, 45, 235, 188, 245, 120, 200, 189, 21, 222, 70, 61, 33, 3, 56, 62, 228, 231, 199, 61, 204, 33, 85, 62, 99, 108, 4, 191, 118, 233, 214, 61, 210, 6, 151, 190, 122, 17, 184, 189, 206, 135, 139, 189, 211, 245, 130, 190, 64, 207, 68, 191, 28, 1, 105, 61, 14, 83, 20, 62, 190, 2, 96, 189, 232, 128, 44, 190, 103, 248, 79, 189, 23, 190, 22, 62, 187, 120, 134, 189, 240, 198, 88, 60, 218, 218, 28, 61, 79, 159, 213, 189, 139, 208, 13, 62, 12, 171, 47, 190, 16, 40, 203, 60, 236, 96, 164, 188, 92, 186, 102, 61, 162, 140, 41, 190, 60, 156, 249, 188, 173, 235, 1, 62, 147, 228, 99, 189, 49, 190, 15, 62, 5, 220, 72, 190, 110, 170, 159, 61, 184, 127, 185, 59, 164, 61, 122, 189, 114, 64, 37, 190, 55, 18, 16, 190, 48, 199, 44, 189, 57, 32, 138, 188, 194, 233, 17, 62, 107, 108, 4, 62, 18, 9, 253, 189, 12, 159, 246, 189, 113, 41, 186, 189, 23, 39, 57, 189, 173, 187, 159, 190, 194, 164, 52, 62, 198, 209, 100, 189, 199, 153, 141, 190, 5, 115, 128, 62, 109, 104, 36, 190, 186, 222, 30, 190, 84, 222, 45, 60, 125, 113, 229, 190, 207, 250, 130, 190, 54, 199, 87, 188, 228, 119, 76, 189, 220, 102, 149, 60, 244, 128, 2, 190, 21, 23, 31, 190, 66, 172, 93, 62, 124, 170, 145, 190, 88, 20, 238, 190, 17, 61, 104, 189, 164, 155, 30, 186, 178, 209, 232, 190, 42, 110, 168, 190, 158, 108, 216, 189, 211, 0, 182, 61, 34, 109, 21, 191, 176, 152, 19, 190, 35, 223, 5, 189, 70, 63, 205, 61, 62, 173, 28, 189, 183, 124, 84, 62, 174, 96, 74, 62, 189, 131, 15, 190, 73, 172, 230, 190, 230, 173, 77, 62, 97, 227, 131, 190, 2, 199, 49, 190, 88, 197, 175, 190, 38, 15, 67, 190, 179, 8, 179, 62, 161, 35, 219, 190, 187, 112, 243, 190, 112, 83, 52, 191, 158, 191, 141, 62, 216, 34, 117, 62, 83, 109, 46, 61, 89, 193, 169, 188, 233, 30, 63, 61, 26, 246, 58, 61, 119, 197, 113, 61, 221, 47, 144, 61, 132, 234, 101, 190, 71, 226, 30, 188, 248, 192, 87, 190, 57, 187, 153, 60, 252, 56, 218, 188, 197, 103, 40, 62, 205, 2, 31, 62, 137, 225, 125, 61, 14, 159, 0, 61, 159, 199, 225, 189, 228, 193, 110, 61, 188, 242, 33, 190, 42, 28, 59, 190, 60, 117, 74, 187, 128, 221, 72, 190, 100, 33, 230, 187, 167, 210, 188, 60, 195, 142, 84, 62, 200, 27, 194, 188, 38, 155, 166, 189, 220, 204, 143, 189, 157, 131, 180, 61, 214, 1, 46, 62, 233, 49, 153, 61, 163, 155, 132, 60, 161, 108, 157, 190, 150, 14, 6, 61, 233, 171, 9, 63, 236, 253, 159, 188, 26, 78, 178, 62, 92, 55, 155, 190, 52, 64, 255, 61, 51, 118, 242, 61, 52, 50, 225, 190, 78, 132, 2, 189, 207, 180, 251, 61, 141, 70, 45, 190, 108, 42, 186, 61, 161, 225, 118, 190, 177, 15, 110, 191, 83, 109, 230, 189, 198, 93, 119, 189, 223, 55, 216, 58, 228, 216, 27, 62, 82, 42, 173, 188, 142, 7, 42, 61, 84, 253, 239, 190, 87, 17, 144, 62, 86, 73, 133, 61, 82, 101, 213, 190, 211, 116, 18, 188, 173, 134, 7, 191, 22, 1, 192, 188, 188, 161, 189, 190, 253, 187, 235, 60, 2, 242, 138, 189, 56, 10, 60, 62, 71, 155, 67, 62, 122, 80, 166, 62, 69, 46, 143, 62, 6, 168, 225, 61, 199, 204, 180, 61, 85, 129, 63, 190, 212, 71, 100, 60, 236, 164, 127, 60, 87, 214, 234, 189, 29, 251, 111, 190, 184, 48, 170, 187, 187, 36, 64, 190, 112, 253, 209, 61, 59, 208, 161, 62, 160, 239, 253, 188, 215, 79, 132, 189, 32, 38, 226, 61, 201, 167, 120, 62, 198, 218, 12, 62, 111, 254, 134, 61, 171, 188, 177, 190, 141, 235, 96, 189, 197, 248, 182, 190, 147, 170, 210, 59, 143, 154, 19, 190, 102, 247, 35, 191, 111, 111, 198, 61, 48, 27, 127, 190, 39, 207, 252, 62, 207, 105, 150, 189, 196, 209, 37, 189, 236, 216, 211, 188, 215, 1, 3, 61, 215, 167, 35, 62, 229, 163, 30, 62, 75, 26, 104, 190, 203, 47, 23, 62, 209, 126, 27, 62, 126, 20, 199, 189, 49, 194, 126, 189, 41, 117, 67, 62, 133, 10, 228, 62, 9, 165, 168, 189, 168, 6, 105, 188, 111, 135, 24, 191, 86, 201, 50, 62, 10, 224, 76, 191, 91, 56, 126, 190, 239, 190, 134, 190, 149, 91, 172, 191, 150, 143, 12, 191, 166, 17, 57, 190, 241, 28, 12, 189, 218, 230, 32, 190, 239, 45, 118, 61, 202, 127, 170, 60, 120, 150, 27, 62, 219, 240, 214, 189, 35, 231, 38, 61, 233, 142, 209, 189, 207, 25, 225, 187, 253, 69, 44, 190, 203, 132, 185, 59, 51, 2, 64, 190, 143, 215, 75, 190, 111, 100, 90, 189, 57, 114, 50, 62, 91, 229, 153, 187, 220, 83, 161, 189, 169, 238, 122, 188, 5, 218, 204, 61, 31, 179, 39, 62, 7, 252, 30, 189, 15, 172, 45, 190, 151, 165, 210, 59, 84, 36, 73, 190, 163, 54, 29, 62, 112, 144, 12, 62, 93, 69, 225, 61, 13, 30, 124, 189, 144, 13, 119, 61, 239, 73, 35, 61, 128, 240, 170, 190, 161, 33, 113, 62, 50, 203, 239, 188, 111, 118, 101, 60, 129, 126, 49, 62, 97, 225, 51, 62, 182, 52, 4, 62, 5, 205, 204, 190, 54, 15, 117, 62, 228, 171, 176, 61, 31, 188, 215, 61, 223, 64, 238, 60, 231, 217, 238, 60, 195, 219, 59, 62, 220, 129, 30, 190, 181, 166, 206, 189, 24, 43, 180, 59, 76, 169, 42, 61, 61, 228, 135, 60, 166, 70, 164, 61, 157, 179, 50, 190, 241, 222, 80, 62, 27, 233, 203, 61, 109, 146, 211, 61, 151, 47, 34, 190, 147, 56, 16, 62, 245, 170, 176, 60, 67, 89, 7, 189, 194, 238, 93, 190, 165, 36, 26, 190, 255, 181, 40, 189, 65, 120, 213, 61, 12, 214, 40, 191, 229, 140, 137, 189, 42, 229, 169, 61, 236, 11, 51, 190, 130, 137, 43, 190, 11, 173, 68, 189, 127, 66, 45, 190, 232, 95, 199, 189, 207, 132, 140, 61, 211, 181, 9, 190, 136, 220, 0, 190, 244, 48, 38, 61, 153, 191, 153, 189, 175, 109, 0, 61, 30, 150, 199, 61, 191, 61, 238, 189, 218, 182, 23, 62, 177, 62, 161, 189, 79, 92, 18, 61, 112, 156, 172, 189, 254, 27, 63, 190, 51, 161, 58, 190, 167, 170, 116, 59, 230, 214, 192, 61, 32, 140, 190, 61, 48, 250, 135, 189, 199, 118, 26, 61, 235, 3, 24, 61, 10, 155, 77, 60, 20, 99, 52, 189, 115, 161, 3, 189, 206, 174, 29, 59, 185, 69, 167, 60, 191, 89, 27, 60, 121, 113, 133, 190, 70, 248, 3, 191, 248, 186, 140, 62, 109, 2, 88, 61, 205, 5, 35, 190, 8, 40, 73, 61, 254, 29, 202, 190, 54, 155, 164, 60, 81, 236, 103, 190, 125, 178, 36, 62, 242, 4, 162, 190, 55, 127, 235, 61, 34, 87, 152, 61, 32, 93, 122, 61, 64, 177, 61, 62, 225, 24, 73, 62, 73, 215, 144, 62, 78, 54, 32, 191, 185, 192, 195, 61, 63, 233, 81, 62, 16, 85, 216, 188, 192, 108, 168, 190, 9, 26, 155, 60, 216, 64, 39, 190, 244, 105, 36, 62, 173, 50, 106, 188, 164, 154, 16, 62, 247, 66, 24, 61, 122, 117, 157, 185, 144, 195, 158, 61, 108, 25, 86, 62, 186, 145, 91, 62, 199, 142, 164, 189, 165, 190, 89, 62, 205, 241, 244, 188, 253, 61, 88, 62, 80, 99, 114, 62, 156, 122, 117, 191, 84, 21, 252, 188, 76, 112, 151, 189, 137, 52, 37, 62, 90, 247, 74, 61, 93, 191, 135, 62, 59, 67, 44, 189, 143, 125, 90, 190, 103, 197, 154, 190, 114, 110, 109, 62, 29, 253, 43, 61, 115, 80, 161, 62, 174, 208, 211, 189, 194, 33, 249, 189, 30, 22, 41, 190, 128, 44, 79, 62, 253, 154, 38, 62, 234, 203, 140, 190, 34, 24, 47, 62, 155, 65, 146, 190, 31, 66, 131, 62, 143, 204, 99, 190, 136, 223, 144, 61, 50, 50, 131, 190, 215, 113, 168, 190, 2, 160, 201, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 18, 142, 62, 87, 171, 176, 61, 233, 203, 38, 189, 103, 115, 188, 188, 160, 154, 145, 61, 126, 159, 176, 61, 0, 48, 216, 61, 214, 72, 7, 62, 233, 144, 63, 189, 182, 154, 50, 190, 40, 48, 123, 61, 233, 56, 129, 62, 35, 69, 235, 61, 30, 31, 222, 189, 25, 129, 95, 62, 198, 214, 227, 61, 48, 100, 108, 62, 15, 191, 136, 62, 186, 39, 77, 61, 253, 14, 62, 190, 164, 192, 64, 62, 179, 146, 48, 61, 43, 52, 61, 190, 38, 240, 37, 189, 38, 121, 242, 61, 183, 23, 83, 62, 209, 0, 180, 62, 128, 70, 65, 190, 1, 2, 197, 189, 47, 93, 183, 189, 34, 203, 133, 59, 192, 190, 90, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 168, 202, 62, 99, 182, 99, 63, 0, 91, 163, 189, 21, 50, 65, 190, 167, 61, 131, 189, 184, 174, 219, 189, 87, 77, 23, 62, 78, 107, 158, 191, 119, 170, 0, 63, 87, 192, 53, 63, 249, 18, 211, 190, 10, 163, 228, 190, 12, 248, 88, 189, 154, 174, 10, 189, 63, 123, 64, 63, 87, 124, 7, 63, 73, 158, 141, 61, 104, 47, 135, 62, 193, 69, 214, 190, 148, 212, 40, 62, 188, 146, 207, 190, 166, 73, 238, 188, 108, 243, 203, 190, 235, 233, 232, 62, 40, 99, 12, 62, 20, 101, 244, 62, 179, 214, 89, 191, 210, 92, 164, 189, 63, 195, 220, 189, 4, 163, 212, 61, 234, 222, 243, 62, 219, 90, 201, 190, 162, 228, 218, 189, 193, 130, 210, 62, 228, 147, 71, 191, 187, 160, 129, 188, 22, 182, 120, 190, 218, 15, 60, 190, 231, 72, 106, 189, 179, 204, 195, 189, 8, 83, 185, 61, 251, 160, 224, 62, 180, 66, 151, 189, 232, 133, 17, 190, 65, 253, 215, 190, 122, 30, 131, 62, 234, 163, 139, 62, 212, 135, 33, 62, 154, 156, 42, 190, 121, 246, 200, 189, 85, 126, 33, 63, 215, 145, 208, 189, 31, 244, 162, 190, 216, 125, 34, 62, 41, 249, 35, 63, 205, 77, 131, 60, 196, 200, 165, 190, 163, 76, 163, 189, 21, 227, 113, 62, 201, 24, 145, 60, 117, 93, 47, 190, 32, 173, 97, 61, 52, 213, 201, 188, 240, 125, 164, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {28, 153, 93, 61, 223, 88, 150, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {245, 1, 187, 63, 91, 156, 138, 191, 116, 179, 110, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {36, 119, 62, 64, 34, 237, 37, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0076/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}