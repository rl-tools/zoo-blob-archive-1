// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 199, 248, 190, 127, 208, 92, 191, 6, 78, 100, 190, 71, 89, 45, 62, 123, 186, 193, 62, 207, 137, 156, 190, 229, 23, 34, 63, 0, 55, 251, 61, 227, 29, 65, 63, 213, 47, 87, 62, 176, 247, 18, 191, 211, 53, 205, 62, 146, 216, 134, 62, 22, 137, 5, 62, 238, 14, 177, 190, 130, 22, 192, 62, 48, 72, 132, 190, 34, 194, 145, 62, 77, 222, 160, 62, 45, 113, 234, 190, 25, 52, 114, 190, 204, 97, 235, 62, 24, 59, 5, 191, 205, 31, 163, 62, 10, 68, 78, 189, 0, 125, 206, 62, 163, 140, 134, 190, 79, 133, 149, 190, 33, 185, 5, 191, 21, 240, 175, 190, 71, 181, 57, 189, 103, 62, 200, 62, 254, 102, 16, 191, 207, 237, 228, 190, 134, 10, 155, 62, 248, 165, 213, 190, 16, 18, 129, 188, 216, 254, 228, 190, 45, 117, 210, 62, 252, 82, 7, 191, 92, 162, 23, 63, 27, 157, 182, 61, 106, 187, 3, 191, 163, 33, 86, 191, 175, 142, 25, 62, 20, 226, 222, 62, 173, 235, 172, 62, 58, 78, 166, 60, 85, 104, 26, 191, 6, 150, 52, 190, 104, 226, 230, 62, 178, 239, 164, 62, 149, 80, 175, 187, 43, 37, 31, 61, 208, 204, 225, 190, 183, 235, 111, 63, 42, 91, 121, 61, 167, 138, 107, 62, 246, 138, 164, 62, 143, 90, 73, 190, 136, 212, 193, 62, 247, 221, 4, 191, 211, 13, 13, 191, 173, 211, 186, 189, 132, 92, 47, 63, 11, 247, 73, 62, 207, 38, 105, 190, 136, 100, 131, 63, 72, 209, 11, 190, 13, 175, 69, 189, 22, 151, 213, 188, 187, 82, 223, 190, 248, 20, 33, 62, 219, 206, 33, 63, 143, 228, 237, 62, 111, 95, 2, 191, 132, 246, 78, 191, 203, 185, 142, 62, 140, 30, 47, 191, 21, 231, 217, 62, 8, 3, 44, 187, 243, 146, 91, 190, 125, 47, 224, 62, 22, 157, 98, 62, 243, 48, 21, 187, 72, 4, 219, 189, 129, 188, 209, 62, 242, 18, 166, 188, 88, 176, 99, 191, 117, 199, 253, 190, 102, 170, 0, 191, 65, 201, 191, 190, 76, 203, 55, 63, 185, 18, 248, 62, 30, 10, 209, 190, 80, 105, 13, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 250, 248, 190, 46, 179, 16, 191, 154, 43, 75, 190, 216, 222, 10, 63, 85, 37, 153, 62, 47, 36, 167, 190, 172, 63, 192, 190, 138, 145, 4, 191, 125, 90, 156, 190, 8, 182, 114, 62, 164, 89, 14, 191, 92, 139, 75, 190, 106, 77, 32, 63, 250, 154, 21, 190, 87, 244, 151, 186, 65, 81, 187, 62, 19, 123, 2, 63, 244, 12, 34, 63, 7, 8, 79, 60, 136, 185, 224, 188, 197, 207, 129, 62, 124, 189, 21, 63, 65, 138, 252, 62, 27, 147, 251, 190, 144, 55, 225, 62, 84, 75, 118, 190, 44, 239, 223, 62, 63, 148, 59, 190, 110, 227, 134, 62, 230, 218, 33, 190, 119, 243, 241, 190, 84, 73, 205, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 253, 149, 189, 182, 218, 26, 189, 85, 172, 137, 190, 185, 133, 254, 61, 104, 68, 79, 61, 43, 176, 29, 190, 233, 45, 51, 62, 169, 102, 26, 190, 19, 97, 57, 189, 85, 246, 158, 189, 43, 186, 3, 190, 138, 35, 242, 188, 206, 245, 241, 61, 211, 145, 130, 60, 223, 142, 0, 62, 108, 64, 111, 62, 36, 33, 34, 61, 221, 132, 160, 62, 181, 60, 139, 190, 138, 86, 57, 61, 156, 144, 244, 61, 20, 203, 162, 59, 56, 168, 151, 190, 63, 249, 117, 61, 11, 137, 230, 189, 196, 179, 32, 62, 251, 124, 188, 189, 30, 74, 148, 60, 128, 183, 105, 189, 66, 61, 55, 62, 117, 27, 64, 62, 63, 117, 153, 61, 107, 205, 64, 62, 71, 103, 21, 189, 238, 236, 145, 190, 90, 131, 128, 61, 209, 163, 197, 61, 220, 70, 167, 190, 38, 78, 68, 62, 142, 33, 215, 190, 159, 69, 134, 190, 234, 151, 252, 189, 156, 199, 107, 190, 174, 104, 13, 190, 33, 114, 163, 61, 170, 231, 7, 190, 200, 56, 105, 62, 159, 103, 85, 189, 59, 164, 144, 61, 153, 247, 40, 189, 237, 62, 186, 186, 47, 28, 201, 61, 201, 202, 10, 189, 56, 175, 148, 61, 125, 64, 155, 190, 127, 183, 141, 189, 197, 100, 165, 189, 133, 208, 200, 62, 174, 171, 44, 189, 184, 138, 218, 188, 223, 28, 74, 189, 209, 121, 90, 62, 80, 124, 195, 60, 250, 116, 211, 62, 212, 29, 214, 189, 30, 150, 7, 190, 122, 32, 15, 188, 252, 181, 0, 62, 8, 221, 141, 188, 234, 104, 95, 190, 69, 23, 77, 190, 172, 240, 54, 190, 209, 223, 46, 189, 66, 227, 145, 186, 226, 51, 247, 189, 136, 54, 191, 189, 164, 123, 67, 61, 50, 253, 247, 61, 149, 251, 253, 61, 139, 67, 163, 189, 126, 184, 181, 187, 171, 206, 37, 62, 243, 44, 39, 190, 169, 144, 3, 62, 18, 106, 56, 190, 204, 166, 42, 61, 207, 146, 229, 188, 195, 119, 98, 190, 242, 106, 130, 189, 73, 60, 210, 189, 140, 9, 224, 188, 101, 177, 182, 189, 226, 202, 60, 190, 243, 186, 189, 61, 52, 110, 177, 58, 164, 231, 248, 188, 30, 228, 198, 190, 200, 15, 255, 60, 177, 67, 37, 62, 100, 152, 195, 60, 41, 10, 249, 61, 118, 159, 96, 62, 36, 156, 197, 188, 249, 26, 35, 188, 4, 126, 167, 60, 175, 54, 201, 189, 174, 53, 155, 189, 176, 205, 144, 61, 139, 155, 23, 62, 233, 160, 120, 62, 16, 93, 3, 62, 30, 71, 165, 189, 175, 216, 91, 189, 15, 148, 77, 61, 62, 209, 149, 62, 15, 194, 7, 62, 77, 9, 17, 189, 118, 155, 236, 61, 226, 98, 0, 61, 125, 32, 64, 190, 115, 53, 128, 61, 175, 29, 86, 190, 247, 109, 52, 62, 13, 224, 107, 190, 191, 234, 47, 61, 183, 40, 30, 190, 133, 176, 9, 62, 30, 79, 81, 190, 84, 138, 197, 61, 221, 111, 3, 190, 173, 242, 110, 187, 192, 73, 41, 62, 223, 118, 0, 188, 90, 166, 0, 62, 152, 192, 236, 189, 220, 40, 38, 61, 243, 129, 207, 61, 147, 19, 61, 189, 182, 110, 1, 62, 195, 103, 47, 190, 42, 39, 2, 62, 72, 239, 109, 189, 125, 166, 186, 61, 7, 249, 250, 61, 35, 232, 224, 188, 19, 75, 136, 61, 125, 44, 230, 61, 131, 198, 175, 61, 30, 237, 247, 61, 104, 75, 28, 62, 116, 45, 20, 62, 46, 4, 86, 61, 161, 18, 230, 189, 37, 217, 183, 188, 74, 129, 252, 61, 210, 40, 44, 190, 58, 208, 143, 61, 152, 144, 149, 61, 82, 174, 244, 189, 244, 217, 227, 190, 175, 171, 16, 59, 206, 124, 127, 61, 186, 68, 93, 62, 116, 196, 19, 62, 21, 116, 18, 61, 8, 71, 28, 61, 9, 226, 24, 60, 54, 253, 138, 62, 37, 67, 116, 189, 215, 13, 161, 61, 140, 231, 210, 189, 138, 206, 25, 190, 104, 141, 11, 59, 114, 189, 148, 61, 182, 152, 155, 61, 252, 93, 70, 190, 228, 23, 183, 61, 106, 94, 146, 61, 233, 110, 34, 62, 175, 82, 253, 189, 233, 204, 143, 189, 3, 31, 157, 189, 174, 141, 189, 189, 46, 84, 194, 189, 149, 184, 177, 188, 171, 88, 14, 190, 103, 197, 136, 61, 7, 28, 36, 61, 253, 102, 15, 62, 43, 74, 241, 189, 40, 254, 32, 189, 157, 158, 40, 62, 123, 29, 181, 190, 150, 222, 106, 62, 245, 212, 30, 190, 202, 57, 235, 61, 186, 208, 143, 61, 211, 74, 48, 190, 63, 62, 53, 60, 248, 18, 57, 187, 33, 142, 61, 62, 69, 107, 98, 189, 234, 40, 232, 189, 69, 146, 127, 187, 131, 214, 134, 188, 112, 90, 183, 61, 85, 248, 39, 190, 12, 158, 47, 62, 33, 246, 40, 190, 212, 184, 12, 60, 34, 98, 234, 61, 147, 226, 10, 62, 38, 248, 5, 188, 41, 71, 185, 61, 123, 170, 237, 58, 126, 76, 224, 61, 144, 72, 31, 62, 199, 194, 41, 62, 2, 115, 46, 60, 93, 60, 136, 62, 141, 61, 210, 60, 194, 29, 66, 60, 204, 187, 205, 60, 199, 146, 32, 62, 215, 174, 183, 60, 98, 94, 129, 190, 200, 102, 191, 190, 33, 38, 120, 189, 36, 40, 157, 190, 60, 30, 55, 61, 134, 212, 144, 188, 151, 9, 96, 61, 89, 125, 205, 189, 19, 197, 147, 62, 217, 245, 99, 190, 220, 154, 117, 190, 118, 238, 253, 61, 16, 65, 144, 62, 163, 178, 234, 188, 213, 121, 148, 190, 202, 31, 194, 61, 216, 159, 160, 61, 194, 89, 187, 62, 223, 108, 45, 190, 34, 36, 52, 190, 224, 41, 27, 62, 251, 15, 142, 62, 58, 46, 144, 190, 227, 66, 150, 190, 172, 114, 21, 190, 222, 233, 195, 61, 225, 0, 223, 190, 126, 173, 231, 189, 165, 6, 237, 189, 189, 23, 9, 191, 124, 131, 33, 188, 56, 190, 209, 61, 89, 58, 164, 190, 241, 37, 181, 61, 140, 161, 40, 190, 182, 208, 210, 61, 19, 173, 158, 190, 100, 66, 150, 59, 197, 141, 5, 189, 21, 185, 255, 189, 146, 81, 198, 61, 197, 33, 103, 187, 96, 137, 224, 189, 31, 85, 70, 188, 114, 249, 154, 61, 2, 93, 202, 61, 74, 151, 188, 61, 174, 246, 219, 61, 213, 22, 155, 187, 214, 21, 237, 61, 13, 215, 71, 190, 255, 173, 207, 61, 45, 30, 217, 61, 224, 157, 46, 190, 50, 94, 65, 189, 249, 105, 178, 189, 39, 82, 237, 61, 148, 158, 200, 61, 162, 153, 76, 62, 134, 203, 149, 61, 56, 252, 67, 189, 81, 186, 42, 190, 243, 49, 221, 61, 194, 164, 24, 191, 180, 186, 55, 60, 45, 220, 202, 189, 226, 47, 25, 190, 160, 31, 135, 61, 153, 130, 59, 189, 96, 237, 162, 61, 181, 168, 27, 62, 248, 147, 13, 62, 235, 117, 61, 190, 205, 177, 52, 62, 173, 10, 211, 189, 116, 2, 158, 190, 59, 150, 35, 62, 197, 95, 255, 189, 105, 254, 146, 62, 11, 149, 233, 189, 59, 196, 29, 61, 108, 117, 161, 61, 143, 183, 249, 61, 51, 54, 100, 62, 224, 239, 234, 189, 84, 217, 28, 190, 4, 26, 193, 189, 228, 136, 244, 58, 30, 178, 108, 61, 91, 206, 65, 190, 112, 6, 231, 188, 56, 28, 17, 190, 39, 29, 112, 187, 137, 136, 73, 190, 154, 19, 180, 62, 125, 161, 170, 61, 68, 152, 216, 60, 112, 141, 2, 190, 20, 101, 220, 61, 102, 240, 127, 60, 202, 200, 182, 58, 140, 107, 157, 61, 29, 160, 143, 189, 139, 177, 164, 189, 120, 159, 40, 62, 66, 248, 240, 189, 217, 97, 187, 61, 48, 85, 10, 190, 34, 73, 168, 189, 165, 15, 78, 189, 116, 243, 128, 190, 225, 192, 17, 190, 153, 15, 47, 190, 21, 97, 233, 61, 111, 65, 233, 61, 163, 235, 77, 189, 4, 80, 47, 189, 117, 149, 1, 62, 192, 246, 117, 189, 138, 224, 33, 190, 241, 221, 26, 190, 106, 210, 207, 189, 128, 46, 24, 62, 47, 84, 200, 189, 219, 153, 129, 61, 251, 33, 216, 189, 42, 3, 7, 190, 68, 217, 129, 189, 74, 18, 82, 189, 169, 4, 21, 190, 141, 164, 175, 61, 143, 241, 216, 61, 207, 100, 74, 190, 45, 14, 38, 190, 56, 247, 246, 189, 187, 246, 177, 189, 188, 144, 48, 61, 128, 147, 255, 189, 72, 223, 26, 62, 212, 113, 177, 189, 162, 59, 205, 61, 131, 138, 24, 190, 50, 191, 130, 61, 195, 25, 103, 61, 170, 160, 149, 62, 187, 171, 92, 61, 84, 116, 61, 190, 204, 246, 161, 189, 198, 212, 38, 62, 221, 149, 116, 61, 60, 239, 3, 190, 213, 85, 194, 60, 48, 10, 154, 189, 149, 153, 194, 188, 110, 47, 181, 190, 146, 47, 102, 190, 135, 120, 242, 61, 171, 3, 23, 190, 185, 10, 160, 190, 27, 154, 5, 190, 190, 232, 92, 190, 233, 32, 22, 60, 247, 14, 187, 188, 77, 218, 83, 61, 172, 43, 98, 62, 192, 65, 83, 190, 239, 47, 17, 62, 158, 217, 19, 189, 127, 156, 73, 61, 146, 167, 84, 61, 237, 186, 156, 60, 234, 82, 237, 58, 169, 200, 28, 190, 199, 196, 26, 190, 140, 3, 211, 62, 41, 185, 24, 190, 5, 246, 171, 62, 181, 31, 56, 190, 148, 119, 212, 61, 98, 241, 105, 188, 58, 7, 108, 62, 19, 60, 6, 62, 34, 76, 21, 190, 44, 221, 108, 59, 89, 200, 120, 190, 112, 171, 122, 62, 89, 115, 187, 61, 107, 49, 88, 190, 31, 215, 19, 61, 64, 122, 216, 60, 35, 36, 179, 188, 185, 125, 86, 62, 46, 136, 3, 61, 75, 65, 239, 189, 143, 36, 17, 61, 68, 243, 110, 188, 88, 236, 142, 190, 81, 55, 183, 189, 75, 229, 240, 189, 144, 168, 8, 62, 2, 189, 164, 61, 204, 57, 52, 61, 124, 247, 97, 60, 54, 246, 11, 62, 144, 194, 229, 61, 235, 234, 236, 61, 4, 203, 24, 189, 152, 239, 177, 61, 184, 161, 209, 188, 30, 82, 40, 62, 255, 117, 124, 189, 11, 65, 23, 62, 51, 15, 153, 59, 146, 38, 218, 61, 80, 201, 92, 189, 57, 219, 149, 61, 146, 219, 227, 61, 153, 64, 21, 60, 251, 218, 2, 190, 233, 47, 253, 189, 13, 202, 37, 62, 119, 197, 72, 190, 229, 52, 57, 62, 251, 8, 94, 62, 88, 127, 70, 190, 62, 181, 184, 190, 204, 101, 229, 61, 71, 77, 170, 189, 62, 102, 27, 190, 114, 215, 176, 189, 121, 5, 99, 190, 91, 115, 1, 190, 91, 232, 144, 61, 13, 234, 106, 190, 174, 168, 79, 189, 225, 42, 182, 189, 235, 224, 61, 190, 0, 1, 197, 62, 172, 127, 24, 60, 244, 91, 73, 62, 255, 219, 217, 61, 81, 166, 220, 190, 86, 64, 146, 60, 104, 158, 214, 60, 245, 250, 194, 190, 137, 205, 161, 190, 238, 199, 11, 59, 31, 153, 168, 190, 143, 86, 27, 62, 70, 211, 234, 61, 7, 162, 212, 61, 44, 129, 249, 189, 87, 117, 228, 59, 24, 132, 130, 61, 219, 240, 252, 61, 173, 75, 6, 61, 135, 159, 210, 189, 68, 42, 189, 189, 19, 242, 100, 61, 251, 96, 119, 61, 9, 94, 38, 190, 196, 193, 56, 62, 140, 223, 12, 190, 101, 175, 41, 190, 145, 71, 11, 60, 189, 197, 30, 190, 187, 143, 31, 188, 102, 235, 2, 61, 178, 185, 113, 189, 65, 23, 149, 62, 9, 20, 162, 189, 202, 72, 199, 61, 65, 118, 202, 188, 96, 87, 249, 190, 15, 169, 198, 61, 37, 218, 169, 59, 171, 138, 191, 188, 71, 244, 154, 189, 154, 231, 33, 190, 14, 105, 113, 190, 196, 196, 33, 62, 97, 10, 246, 189, 141, 215, 23, 190, 40, 145, 19, 190, 241, 18, 160, 61, 255, 211, 165, 189, 58, 191, 23, 62, 6, 176, 130, 61, 219, 37, 156, 189, 246, 30, 73, 62, 67, 132, 71, 62, 12, 112, 42, 62, 96, 199, 151, 189, 99, 199, 19, 62, 92, 100, 50, 60, 7, 215, 216, 61, 182, 73, 3, 61, 234, 26, 37, 61, 5, 19, 30, 190, 111, 43, 73, 62, 122, 12, 131, 61, 155, 94, 22, 189, 217, 235, 248, 61, 18, 144, 193, 189, 158, 146, 114, 62, 220, 106, 145, 190, 90, 107, 58, 189, 54, 57, 181, 61, 32, 141, 18, 62, 249, 239, 193, 61, 17, 103, 21, 189, 235, 42, 129, 188, 235, 238, 242, 61, 47, 250, 70, 190, 238, 212, 113, 62, 179, 206, 192, 189, 25, 79, 229, 61, 66, 203, 147, 60, 172, 6, 153, 62, 12, 110, 119, 62, 172, 233, 30, 190, 112, 220, 167, 189, 2, 219, 102, 189, 211, 5, 230, 189, 152, 65, 175, 58, 156, 250, 5, 62, 135, 11, 61, 190, 187, 152, 215, 189, 200, 102, 62, 60, 120, 15, 93, 190, 202, 216, 167, 189, 111, 154, 209, 189, 205, 229, 195, 190, 158, 227, 12, 62, 44, 185, 137, 62, 98, 11, 163, 61, 198, 254, 232, 61, 88, 56, 170, 190, 186, 101, 150, 189, 15, 48, 133, 62, 189, 108, 88, 190, 230, 83, 15, 189, 83, 211, 38, 61, 119, 132, 185, 61, 176, 85, 136, 59, 182, 203, 36, 188, 159, 223, 168, 60, 232, 242, 15, 62, 129, 168, 82, 189, 61, 150, 64, 190, 219, 203, 52, 62, 58, 2, 20, 188, 99, 103, 31, 190, 47, 236, 52, 61, 182, 147, 89, 189, 110, 200, 226, 187, 5, 124, 32, 62, 152, 47, 148, 61, 216, 194, 4, 190, 252, 246, 144, 189, 152, 26, 55, 61, 50, 81, 194, 60, 194, 196, 247, 189, 161, 128, 229, 61, 225, 72, 183, 189, 42, 102, 7, 190, 172, 234, 217, 61, 151, 3, 59, 190, 88, 148, 179, 189, 98, 85, 247, 61, 37, 224, 58, 188, 43, 173, 190, 189, 240, 186, 179, 60, 140, 238, 137, 61, 1, 247, 29, 190, 2, 202, 217, 189, 32, 118, 75, 189, 218, 30, 252, 189, 80, 25, 59, 189, 133, 184, 38, 190, 26, 164, 215, 189, 231, 197, 7, 190, 240, 85, 2, 188, 65, 151, 52, 190, 170, 138, 5, 188, 10, 130, 37, 190, 248, 181, 59, 190, 148, 148, 172, 61, 234, 202, 147, 189, 162, 28, 87, 62, 147, 82, 137, 61, 8, 208, 41, 62, 27, 155, 68, 61, 85, 44, 17, 62, 211, 58, 75, 189, 108, 209, 90, 190, 163, 39, 47, 190, 115, 217, 15, 61, 121, 198, 70, 189, 176, 28, 95, 61, 220, 166, 223, 61, 63, 217, 211, 189, 78, 69, 16, 190, 129, 132, 143, 61, 125, 111, 34, 61, 8, 224, 30, 189, 244, 40, 48, 62, 204, 102, 194, 189, 189, 133, 37, 190, 46, 184, 21, 187, 159, 23, 49, 187, 76, 184, 176, 190, 175, 113, 12, 189, 42, 8, 141, 190, 2, 160, 132, 62, 182, 3, 123, 189, 186, 20, 151, 61, 149, 116, 158, 187, 196, 247, 134, 61, 189, 9, 199, 189, 142, 106, 151, 62, 56, 128, 213, 189, 70, 228, 196, 60, 25, 45, 240, 189, 248, 131, 165, 189, 111, 91, 160, 188, 202, 214, 47, 62, 230, 103, 184, 189, 201, 183, 220, 187, 214, 125, 1, 190, 115, 80, 61, 62, 56, 84, 156, 189, 41, 241, 88, 62, 163, 105, 7, 61, 161, 49, 150, 188, 172, 38, 166, 188, 162, 250, 25, 61, 157, 91, 53, 62, 138, 33, 149, 61, 212, 50, 166, 61, 237, 112, 156, 190, 104, 229, 102, 62, 86, 1, 80, 190, 182, 28, 197, 189, 178, 233, 137, 61, 194, 2, 149, 189, 199, 232, 155, 190, 28, 1, 105, 61, 14, 83, 20, 62, 190, 2, 96, 189, 232, 128, 44, 190, 103, 248, 79, 189, 23, 190, 22, 62, 187, 120, 134, 189, 240, 198, 88, 60, 218, 218, 28, 61, 79, 159, 213, 189, 139, 208, 13, 62, 12, 171, 47, 190, 16, 40, 203, 60, 236, 96, 164, 188, 92, 186, 102, 61, 162, 140, 41, 190, 60, 156, 249, 188, 173, 235, 1, 62, 147, 228, 99, 189, 49, 190, 15, 62, 5, 220, 72, 190, 110, 170, 159, 61, 184, 127, 185, 59, 164, 61, 122, 189, 114, 64, 37, 190, 55, 18, 16, 190, 48, 199, 44, 189, 57, 32, 138, 188, 194, 233, 17, 62, 107, 108, 4, 62, 18, 9, 253, 189, 12, 159, 246, 189, 203, 51, 104, 61, 250, 179, 24, 189, 111, 19, 175, 189, 70, 148, 149, 61, 91, 215, 24, 188, 138, 27, 39, 190, 213, 46, 238, 61, 234, 107, 13, 190, 147, 231, 175, 189, 8, 139, 37, 188, 64, 59, 228, 189, 69, 209, 9, 62, 57, 183, 203, 188, 13, 56, 78, 189, 111, 197, 243, 189, 184, 131, 233, 189, 122, 117, 179, 189, 206, 47, 42, 62, 45, 36, 11, 190, 89, 104, 12, 190, 83, 25, 122, 189, 76, 12, 17, 62, 8, 236, 17, 190, 70, 241, 115, 189, 214, 229, 86, 189, 176, 104, 178, 188, 205, 211, 209, 189, 140, 228, 27, 190, 160, 55, 123, 188, 146, 67, 24, 61, 132, 53, 83, 61, 222, 211, 181, 61, 126, 35, 11, 62, 189, 131, 15, 190, 27, 90, 171, 190, 8, 186, 48, 62, 196, 67, 71, 61, 168, 243, 208, 187, 231, 246, 183, 190, 205, 88, 227, 187, 38, 22, 94, 61, 194, 156, 168, 61, 157, 187, 59, 190, 222, 212, 237, 189, 187, 173, 124, 62, 108, 29, 246, 60, 176, 212, 182, 61, 33, 8, 107, 190, 160, 248, 191, 60, 227, 85, 108, 189, 47, 30, 165, 189, 68, 115, 229, 189, 146, 245, 230, 189, 246, 55, 137, 189, 1, 40, 231, 189, 73, 6, 83, 61, 127, 126, 145, 189, 101, 138, 81, 62, 42, 215, 6, 61, 230, 58, 232, 189, 80, 97, 143, 60, 12, 23, 57, 189, 250, 194, 139, 61, 245, 19, 232, 189, 81, 28, 19, 190, 125, 18, 68, 190, 148, 117, 115, 190, 143, 157, 145, 189, 78, 215, 135, 188, 151, 9, 32, 62, 70, 199, 223, 189, 75, 25, 216, 189, 171, 54, 22, 190, 56, 137, 80, 62, 104, 4, 240, 60, 200, 235, 79, 60, 42, 144, 232, 188, 136, 214, 195, 189, 138, 175, 11, 62, 251, 233, 207, 62, 234, 25, 182, 60, 89, 135, 129, 62, 241, 151, 142, 190, 97, 90, 144, 61, 41, 1, 181, 61, 199, 150, 141, 190, 88, 254, 43, 189, 66, 223, 221, 188, 46, 68, 0, 189, 159, 82, 41, 62, 101, 118, 153, 189, 177, 130, 162, 61, 2, 158, 33, 189, 145, 168, 100, 188, 251, 31, 139, 61, 145, 45, 162, 61, 183, 225, 236, 189, 233, 111, 32, 62, 52, 124, 146, 190, 192, 128, 97, 62, 205, 117, 86, 61, 92, 1, 124, 190, 51, 33, 181, 189, 151, 127, 190, 190, 60, 163, 209, 189, 174, 24, 249, 189, 96, 16, 163, 61, 38, 43, 56, 61, 75, 8, 253, 61, 44, 152, 230, 189, 169, 16, 157, 62, 179, 141, 106, 62, 22, 110, 71, 61, 233, 14, 179, 60, 85, 238, 154, 190, 81, 177, 110, 60, 81, 32, 25, 60, 152, 101, 231, 189, 190, 177, 73, 190, 34, 139, 197, 61, 121, 232, 4, 190, 50, 191, 246, 61, 86, 75, 154, 61, 156, 193, 24, 190, 185, 71, 145, 189, 107, 17, 34, 62, 165, 136, 104, 62, 38, 50, 146, 61, 98, 106, 146, 190, 5, 138, 249, 189, 70, 66, 170, 190, 58, 13, 156, 190, 73, 51, 135, 188, 185, 94, 252, 189, 214, 204, 35, 190, 177, 240, 20, 188, 78, 189, 21, 190, 166, 41, 128, 62, 148, 93, 178, 187, 28, 137, 9, 190, 185, 62, 14, 61, 26, 141, 160, 62, 154, 196, 205, 61, 172, 132, 17, 61, 153, 144, 11, 60, 92, 213, 69, 60, 153, 36, 23, 62, 164, 46, 45, 189, 93, 235, 205, 189, 221, 186, 88, 62, 213, 214, 231, 62, 36, 120, 23, 189, 96, 164, 136, 189, 161, 135, 177, 190, 200, 93, 30, 62, 184, 30, 174, 190, 11, 49, 183, 60, 148, 87, 176, 190, 9, 64, 58, 191, 29, 129, 176, 189, 166, 17, 57, 190, 241, 28, 12, 189, 218, 230, 32, 190, 239, 45, 118, 61, 202, 127, 170, 60, 120, 150, 27, 62, 219, 240, 214, 189, 35, 231, 38, 61, 233, 142, 209, 189, 207, 25, 225, 187, 253, 69, 44, 190, 203, 132, 185, 59, 51, 2, 64, 190, 143, 215, 75, 190, 111, 100, 90, 189, 57, 114, 50, 62, 91, 229, 153, 187, 220, 83, 161, 189, 169, 238, 122, 188, 5, 218, 204, 61, 31, 179, 39, 62, 7, 252, 30, 189, 15, 172, 45, 190, 151, 165, 210, 59, 84, 36, 73, 190, 163, 54, 29, 62, 112, 144, 12, 62, 93, 69, 225, 61, 13, 30, 124, 189, 144, 13, 119, 61, 239, 73, 35, 61, 128, 240, 170, 190, 213, 246, 168, 61, 1, 31, 175, 188, 252, 45, 169, 188, 36, 114, 39, 62, 212, 231, 34, 62, 4, 19, 191, 61, 195, 163, 75, 190, 147, 179, 13, 62, 57, 215, 230, 61, 88, 48, 221, 60, 176, 105, 219, 60, 22, 116, 34, 60, 191, 177, 41, 62, 253, 28, 42, 61, 37, 69, 65, 190, 62, 62, 161, 187, 156, 113, 188, 60, 85, 49, 163, 187, 113, 1, 26, 62, 1, 85, 61, 190, 188, 74, 50, 62, 125, 138, 7, 62, 54, 152, 170, 61, 5, 96, 60, 190, 125, 38, 36, 62, 190, 136, 21, 189, 211, 17, 208, 60, 178, 122, 95, 188, 150, 233, 238, 189, 231, 115, 206, 188, 241, 240, 213, 61, 217, 144, 229, 190, 229, 140, 137, 189, 42, 229, 169, 61, 236, 11, 51, 190, 130, 137, 43, 190, 11, 173, 68, 189, 127, 66, 45, 190, 232, 95, 199, 189, 207, 132, 140, 61, 211, 181, 9, 190, 136, 220, 0, 190, 244, 48, 38, 61, 153, 191, 153, 189, 175, 109, 0, 61, 30, 150, 199, 61, 191, 61, 238, 189, 218, 182, 23, 62, 177, 62, 161, 189, 79, 92, 18, 61, 112, 156, 172, 189, 254, 27, 63, 190, 51, 161, 58, 190, 167, 170, 116, 59, 230, 214, 192, 61, 32, 140, 190, 61, 48, 250, 135, 189, 199, 118, 26, 61, 235, 3, 24, 61, 10, 155, 77, 60, 20, 99, 52, 189, 115, 161, 3, 189, 206, 174, 29, 59, 185, 69, 167, 60, 69, 171, 216, 60, 238, 167, 135, 190, 188, 148, 199, 190, 217, 201, 56, 62, 171, 76, 170, 60, 246, 69, 56, 189, 171, 32, 157, 189, 89, 82, 149, 190, 211, 234, 6, 190, 8, 29, 60, 62, 147, 158, 221, 189, 12, 36, 34, 190, 148, 130, 18, 61, 14, 136, 155, 189, 170, 62, 76, 61, 106, 102, 11, 62, 53, 30, 30, 62, 61, 146, 50, 62, 88, 138, 241, 190, 46, 231, 183, 188, 41, 195, 40, 62, 175, 112, 142, 187, 23, 163, 51, 190, 153, 30, 120, 189, 186, 224, 32, 190, 40, 28, 9, 62, 16, 198, 227, 188, 212, 137, 209, 188, 166, 119, 160, 188, 252, 196, 242, 60, 74, 241, 209, 59, 149, 18, 187, 61, 40, 63, 163, 190, 114, 48, 156, 61, 64, 202, 46, 60, 239, 17, 159, 59, 29, 155, 84, 62, 166, 254, 52, 61, 12, 88, 1, 191, 101, 196, 206, 188, 5, 33, 77, 61, 52, 223, 193, 189, 81, 187, 214, 61, 143, 64, 54, 62, 31, 170, 11, 188, 168, 90, 133, 61, 207, 113, 52, 190, 1, 115, 197, 61, 171, 5, 3, 62, 193, 45, 98, 62, 160, 12, 229, 188, 247, 177, 183, 189, 172, 191, 53, 190, 245, 128, 80, 62, 81, 251, 54, 62, 111, 222, 123, 190, 252, 44, 198, 61, 163, 5, 43, 190, 77, 144, 152, 62, 76, 11, 86, 189, 95, 246, 136, 61, 109, 202, 182, 190, 183, 78, 37, 190, 9, 93, 75, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 241, 115, 62, 251, 140, 33, 62, 17, 150, 174, 189, 201, 53, 208, 61, 143, 148, 172, 61, 76, 161, 10, 62, 73, 130, 254, 61, 95, 185, 34, 61, 107, 33, 86, 188, 239, 45, 28, 60, 108, 184, 230, 189, 179, 160, 29, 62, 122, 42, 59, 61, 30, 182, 205, 189, 211, 154, 63, 62, 101, 194, 244, 61, 169, 147, 68, 62, 219, 161, 105, 62, 83, 61, 68, 188, 149, 77, 62, 59, 131, 131, 75, 62, 179, 146, 48, 61, 169, 154, 44, 190, 75, 170, 1, 190, 204, 116, 9, 62, 202, 46, 7, 62, 147, 12, 122, 62, 128, 70, 65, 190, 176, 249, 1, 190, 47, 93, 183, 189, 169, 56, 90, 189, 66, 211, 120, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 201, 151, 62, 10, 204, 149, 62, 135, 84, 55, 189, 88, 149, 117, 190, 224, 115, 3, 190, 17, 102, 223, 189, 146, 193, 194, 61, 201, 30, 212, 190, 60, 24, 125, 61, 142, 236, 141, 62, 42, 62, 2, 190, 184, 153, 20, 190, 126, 237, 6, 61, 5, 178, 8, 61, 216, 243, 175, 62, 204, 242, 160, 62, 244, 101, 238, 61, 29, 59, 130, 62, 88, 137, 143, 186, 78, 9, 28, 62, 130, 35, 71, 190, 166, 73, 238, 188, 227, 110, 3, 190, 229, 87, 160, 62, 245, 252, 18, 62, 208, 254, 120, 62, 104, 156, 2, 191, 210, 92, 164, 189, 91, 227, 11, 190, 4, 163, 212, 61, 4, 41, 134, 62, 158, 70, 137, 190, 35, 89, 34, 190, 58, 74, 190, 61, 60, 153, 17, 190, 0, 200, 57, 189, 239, 51, 53, 190, 213, 115, 125, 189, 139, 109, 188, 60, 30, 111, 170, 62, 128, 43, 184, 61, 124, 201, 91, 62, 183, 217, 249, 61, 211, 137, 16, 190, 254, 176, 208, 190, 87, 242, 85, 62, 87, 165, 222, 61, 1, 132, 16, 190, 91, 51, 1, 190, 206, 164, 192, 189, 105, 248, 34, 62, 4, 154, 174, 189, 144, 158, 165, 190, 216, 125, 34, 62, 186, 62, 109, 188, 47, 9, 230, 189, 23, 65, 54, 190, 36, 68, 123, 189, 52, 50, 137, 60, 201, 24, 145, 60, 92, 186, 27, 190, 32, 173, 97, 61, 164, 235, 164, 189, 112, 53, 143, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 245, 11, 61, 203, 83, 32, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {71, 171, 240, 190, 89, 123, 212, 63, 156, 119, 211, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {104, 150, 32, 192, 168, 19, 154, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0076/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}