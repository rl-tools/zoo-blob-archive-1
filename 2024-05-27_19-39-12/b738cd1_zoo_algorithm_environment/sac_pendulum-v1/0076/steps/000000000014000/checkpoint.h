// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 75, 125, 190, 32, 42, 180, 191, 130, 98, 93, 190, 140, 146, 153, 62, 158, 8, 209, 62, 4, 39, 160, 190, 95, 39, 44, 63, 211, 128, 85, 63, 223, 241, 75, 63, 254, 243, 236, 61, 67, 111, 79, 191, 188, 201, 218, 62, 91, 63, 24, 189, 165, 197, 184, 190, 70, 69, 79, 190, 120, 142, 200, 61, 59, 24, 159, 61, 29, 103, 0, 63, 58, 240, 21, 63, 160, 37, 18, 191, 76, 126, 75, 190, 148, 199, 117, 190, 154, 166, 185, 190, 117, 28, 1, 63, 56, 18, 143, 190, 2, 54, 97, 63, 44, 40, 10, 190, 185, 14, 8, 191, 77, 160, 181, 191, 139, 10, 168, 190, 27, 188, 217, 62, 203, 160, 50, 63, 221, 92, 26, 191, 10, 9, 238, 190, 255, 19, 127, 190, 168, 124, 225, 190, 157, 169, 26, 190, 83, 77, 16, 191, 101, 227, 170, 62, 68, 19, 144, 191, 31, 206, 58, 63, 91, 50, 20, 62, 239, 241, 0, 191, 94, 190, 125, 191, 20, 243, 85, 62, 13, 32, 134, 62, 10, 123, 52, 63, 167, 169, 52, 62, 199, 19, 66, 191, 28, 29, 125, 190, 174, 65, 250, 62, 52, 101, 163, 62, 241, 151, 175, 190, 158, 38, 63, 57, 179, 38, 124, 191, 30, 229, 155, 62, 138, 248, 200, 189, 91, 198, 168, 189, 80, 208, 215, 62, 130, 216, 235, 189, 64, 50, 153, 62, 38, 174, 54, 191, 98, 179, 4, 191, 76, 158, 66, 190, 203, 212, 148, 63, 128, 116, 98, 62, 69, 141, 251, 189, 28, 141, 157, 63, 186, 84, 66, 190, 132, 176, 151, 61, 5, 80, 154, 62, 254, 18, 210, 190, 237, 217, 59, 62, 46, 208, 224, 63, 241, 252, 185, 62, 203, 56, 103, 190, 64, 177, 99, 191, 27, 115, 203, 62, 18, 149, 131, 191, 192, 96, 39, 62, 245, 98, 161, 188, 4, 116, 159, 190, 72, 102, 172, 63, 129, 118, 151, 62, 201, 210, 66, 190, 119, 194, 73, 63, 183, 168, 135, 62, 249, 84, 24, 62, 92, 8, 165, 191, 111, 99, 172, 190, 219, 231, 28, 191, 93, 190, 129, 59, 234, 47, 125, 63, 125, 121, 17, 63, 152, 250, 46, 191, 132, 101, 76, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 71, 31, 190, 237, 76, 79, 191, 100, 254, 226, 190, 150, 28, 12, 63, 234, 184, 210, 61, 170, 235, 112, 190, 182, 201, 223, 190, 181, 110, 14, 191, 206, 237, 139, 189, 102, 240, 187, 188, 64, 215, 163, 190, 164, 186, 240, 190, 57, 238, 251, 62, 228, 154, 217, 59, 168, 100, 154, 62, 173, 20, 116, 62, 173, 6, 207, 62, 24, 11, 17, 63, 140, 130, 126, 62, 239, 26, 11, 62, 231, 248, 17, 62, 40, 32, 218, 62, 82, 98, 233, 62, 88, 142, 30, 191, 151, 91, 117, 62, 252, 169, 201, 190, 49, 124, 43, 63, 18, 201, 87, 190, 176, 243, 146, 189, 49, 185, 40, 190, 229, 207, 193, 190, 82, 180, 186, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 193, 168, 61, 216, 101, 8, 190, 52, 231, 201, 190, 199, 77, 15, 62, 184, 4, 165, 60, 237, 66, 180, 190, 121, 225, 91, 62, 172, 23, 179, 190, 39, 203, 52, 62, 234, 92, 173, 190, 99, 56, 231, 190, 154, 68, 239, 189, 157, 116, 26, 62, 60, 231, 172, 62, 213, 95, 179, 61, 10, 180, 133, 62, 201, 120, 151, 61, 72, 191, 178, 62, 16, 252, 200, 190, 85, 135, 167, 189, 240, 107, 103, 61, 65, 177, 210, 60, 41, 46, 161, 190, 14, 158, 235, 61, 123, 207, 38, 190, 105, 111, 200, 61, 75, 238, 201, 61, 186, 212, 174, 62, 192, 106, 230, 189, 253, 193, 62, 61, 207, 185, 15, 62, 139, 70, 4, 62, 114, 34, 4, 191, 127, 186, 82, 189, 146, 31, 27, 191, 33, 119, 95, 190, 113, 34, 92, 190, 66, 227, 150, 191, 46, 97, 153, 62, 218, 97, 124, 191, 190, 128, 79, 61, 112, 137, 79, 191, 160, 8, 13, 191, 249, 89, 142, 190, 248, 11, 235, 188, 225, 195, 108, 62, 89, 161, 33, 190, 63, 81, 40, 190, 173, 189, 188, 61, 149, 116, 163, 190, 35, 255, 93, 62, 174, 216, 56, 62, 0, 1, 86, 190, 144, 82, 48, 62, 184, 9, 152, 190, 159, 206, 214, 61, 11, 92, 20, 189, 209, 220, 14, 62, 141, 94, 148, 61, 247, 214, 221, 62, 215, 169, 179, 189, 119, 246, 87, 62, 69, 163, 165, 190, 3, 212, 240, 62, 107, 78, 52, 190, 35, 187, 164, 189, 237, 188, 178, 189, 235, 52, 206, 61, 72, 77, 98, 62, 109, 82, 244, 190, 71, 104, 51, 191, 229, 28, 176, 190, 225, 105, 78, 191, 110, 62, 251, 190, 72, 67, 19, 62, 106, 145, 128, 190, 114, 36, 160, 188, 31, 169, 147, 61, 211, 255, 36, 62, 198, 16, 36, 62, 221, 118, 31, 188, 118, 72, 164, 62, 190, 182, 16, 191, 17, 191, 121, 62, 33, 198, 245, 59, 251, 55, 238, 61, 79, 21, 142, 60, 236, 188, 2, 190, 28, 86, 14, 61, 173, 154, 51, 189, 220, 126, 128, 190, 244, 221, 159, 191, 179, 88, 141, 191, 167, 3, 233, 191, 79, 237, 18, 61, 194, 189, 98, 190, 235, 18, 132, 191, 172, 81, 62, 61, 38, 240, 137, 62, 26, 132, 241, 188, 194, 106, 0, 62, 39, 237, 159, 62, 103, 13, 91, 191, 64, 171, 216, 61, 185, 55, 202, 189, 229, 233, 207, 61, 9, 42, 21, 189, 117, 36, 95, 62, 93, 133, 184, 61, 32, 83, 50, 190, 214, 171, 217, 61, 68, 185, 117, 189, 116, 162, 231, 189, 31, 95, 14, 61, 71, 52, 184, 62, 241, 225, 68, 62, 146, 23, 107, 188, 114, 172, 4, 188, 239, 238, 168, 61, 140, 137, 122, 190, 108, 141, 209, 60, 153, 168, 67, 190, 124, 118, 140, 189, 123, 173, 41, 191, 66, 84, 142, 188, 33, 55, 186, 190, 120, 97, 254, 61, 11, 15, 133, 191, 226, 115, 236, 62, 248, 144, 1, 190, 179, 74, 171, 190, 18, 28, 133, 189, 149, 164, 63, 61, 192, 244, 50, 62, 137, 251, 162, 190, 253, 160, 25, 62, 78, 247, 249, 59, 105, 133, 177, 61, 174, 12, 0, 62, 132, 230, 59, 190, 111, 141, 200, 189, 145, 182, 49, 190, 114, 32, 64, 62, 131, 49, 145, 61, 82, 59, 203, 189, 146, 22, 103, 61, 64, 174, 157, 188, 8, 73, 195, 61, 183, 188, 58, 62, 204, 197, 8, 62, 126, 143, 237, 61, 55, 188, 233, 60, 150, 115, 87, 190, 43, 38, 152, 189, 37, 38, 216, 61, 148, 41, 151, 191, 12, 5, 200, 190, 164, 115, 132, 61, 120, 233, 139, 190, 149, 202, 37, 191, 127, 19, 0, 190, 91, 36, 99, 61, 10, 21, 128, 62, 126, 233, 22, 62, 37, 26, 133, 61, 171, 147, 151, 61, 167, 65, 74, 190, 192, 1, 201, 62, 158, 126, 5, 191, 15, 235, 155, 62, 114, 54, 87, 190, 213, 135, 92, 190, 21, 254, 249, 185, 110, 157, 177, 190, 110, 248, 52, 62, 200, 252, 144, 190, 206, 49, 143, 61, 136, 83, 199, 61, 131, 185, 156, 188, 8, 171, 51, 191, 10, 250, 159, 189, 32, 56, 148, 190, 228, 46, 111, 190, 76, 197, 54, 190, 234, 234, 90, 190, 246, 121, 110, 189, 229, 83, 85, 190, 60, 119, 241, 190, 138, 222, 41, 61, 158, 175, 243, 188, 161, 139, 130, 189, 225, 155, 250, 188, 17, 180, 73, 191, 69, 94, 169, 62, 119, 127, 251, 189, 229, 144, 188, 61, 59, 167, 69, 61, 204, 35, 106, 190, 212, 213, 125, 61, 72, 151, 58, 190, 252, 252, 150, 62, 245, 17, 199, 190, 253, 20, 208, 189, 150, 211, 21, 61, 133, 79, 161, 188, 134, 83, 226, 62, 209, 138, 144, 190, 72, 246, 16, 62, 35, 170, 167, 189, 14, 239, 253, 189, 94, 10, 201, 61, 141, 228, 165, 61, 104, 83, 58, 189, 115, 156, 113, 62, 126, 22, 251, 59, 69, 122, 84, 62, 237, 231, 152, 62, 214, 53, 97, 62, 55, 55, 146, 61, 241, 110, 60, 63, 113, 79, 157, 62, 237, 15, 15, 61, 66, 183, 113, 62, 207, 121, 120, 62, 80, 26, 230, 190, 192, 181, 145, 190, 181, 84, 85, 190, 155, 204, 250, 187, 207, 77, 96, 191, 208, 42, 48, 63, 97, 123, 209, 189, 167, 175, 238, 62, 158, 45, 70, 191, 244, 135, 148, 62, 212, 151, 249, 187, 5, 65, 162, 189, 94, 19, 97, 62, 58, 218, 214, 62, 99, 198, 178, 61, 143, 18, 244, 191, 249, 226, 135, 62, 222, 167, 54, 189, 73, 211, 71, 62, 40, 240, 98, 191, 220, 59, 15, 191, 255, 1, 161, 62, 38, 162, 150, 62, 73, 170, 152, 190, 254, 148, 221, 191, 248, 203, 33, 57, 41, 147, 98, 62, 69, 170, 187, 191, 129, 133, 64, 190, 169, 154, 188, 190, 3, 126, 29, 191, 20, 152, 74, 190, 108, 41, 5, 191, 91, 185, 149, 190, 107, 46, 7, 190, 140, 20, 227, 190, 38, 1, 203, 190, 59, 20, 101, 191, 163, 246, 113, 187, 195, 139, 10, 191, 17, 81, 15, 60, 121, 25, 29, 191, 218, 36, 20, 191, 13, 153, 224, 190, 172, 223, 199, 189, 139, 12, 93, 62, 175, 125, 19, 190, 210, 185, 32, 189, 238, 89, 1, 62, 6, 106, 148, 190, 48, 15, 119, 62, 167, 173, 45, 190, 157, 2, 130, 190, 187, 250, 2, 62, 5, 130, 32, 190, 10, 206, 229, 188, 42, 197, 6, 190, 224, 128, 144, 60, 52, 221, 44, 62, 56, 47, 143, 62, 246, 106, 55, 189, 100, 229, 167, 189, 104, 142, 20, 191, 206, 218, 144, 61, 198, 35, 128, 191, 181, 217, 65, 62, 253, 128, 46, 190, 44, 45, 153, 190, 46, 110, 188, 61, 65, 94, 19, 189, 60, 190, 20, 63, 181, 240, 30, 62, 147, 2, 197, 61, 128, 155, 143, 190, 156, 172, 139, 62, 252, 54, 142, 189, 21, 232, 219, 190, 243, 116, 13, 191, 133, 52, 77, 191, 235, 45, 84, 62, 77, 213, 121, 60, 51, 253, 40, 61, 13, 124, 86, 189, 101, 60, 253, 61, 55, 141, 152, 62, 164, 97, 33, 191, 16, 73, 60, 190, 128, 228, 172, 60, 87, 143, 115, 191, 221, 136, 133, 61, 110, 222, 255, 190, 176, 174, 190, 190, 143, 61, 83, 190, 17, 30, 144, 61, 137, 136, 73, 190, 5, 56, 92, 63, 11, 127, 113, 61, 146, 41, 64, 190, 196, 1, 38, 191, 114, 48, 162, 62, 102, 234, 65, 189, 41, 150, 14, 61, 243, 157, 156, 189, 86, 181, 143, 189, 126, 222, 154, 61, 7, 4, 104, 62, 201, 227, 136, 190, 219, 217, 139, 61, 29, 233, 116, 61, 136, 15, 32, 60, 33, 208, 146, 62, 44, 67, 178, 191, 152, 80, 12, 188, 97, 129, 231, 189, 47, 164, 136, 189, 112, 119, 182, 61, 214, 7, 244, 189, 182, 167, 61, 62, 44, 111, 237, 61, 214, 61, 144, 190, 210, 74, 249, 191, 155, 124, 25, 61, 50, 62, 35, 62, 79, 149, 49, 191, 199, 192, 201, 190, 195, 117, 76, 61, 52, 210, 116, 189, 11, 12, 96, 190, 230, 3, 130, 190, 251, 154, 16, 190, 25, 239, 121, 62, 195, 210, 139, 62, 57, 185, 96, 61, 117, 47, 243, 61, 218, 146, 177, 190, 28, 162, 38, 61, 233, 100, 71, 190, 93, 229, 50, 62, 138, 50, 6, 61, 158, 0, 144, 188, 9, 162, 170, 61, 34, 117, 226, 190, 234, 175, 75, 60, 18, 55, 112, 62, 50, 22, 33, 62, 160, 239, 250, 62, 95, 141, 60, 190, 87, 74, 103, 190, 231, 31, 217, 189, 40, 154, 7, 62, 99, 53, 102, 189, 253, 165, 104, 190, 37, 163, 248, 61, 21, 79, 140, 188, 42, 240, 140, 190, 51, 34, 150, 191, 94, 243, 41, 190, 49, 239, 68, 62, 204, 108, 206, 190, 17, 167, 27, 191, 158, 54, 72, 62, 190, 2, 228, 189, 219, 39, 21, 61, 62, 104, 10, 61, 80, 173, 248, 61, 241, 98, 142, 62, 128, 197, 109, 190, 92, 199, 141, 62, 99, 85, 142, 189, 231, 197, 52, 62, 123, 240, 187, 61, 163, 69, 162, 61, 202, 153, 208, 61, 14, 9, 128, 190, 158, 214, 225, 189, 159, 83, 229, 62, 50, 18, 76, 189, 8, 236, 213, 62, 45, 18, 172, 190, 252, 218, 153, 61, 45, 12, 162, 61, 250, 246, 84, 62, 42, 185, 225, 61, 125, 118, 171, 189, 133, 73, 39, 189, 82, 54, 110, 190, 29, 192, 79, 62, 211, 57, 17, 190, 33, 110, 185, 190, 46, 24, 253, 60, 226, 99, 53, 190, 152, 33, 21, 189, 144, 183, 106, 189, 151, 1, 175, 61, 41, 77, 234, 190, 217, 247, 148, 62, 237, 32, 208, 60, 46, 22, 196, 187, 2, 237, 42, 62, 164, 138, 37, 190, 80, 84, 167, 188, 246, 34, 201, 59, 192, 238, 5, 60, 73, 107, 113, 189, 253, 37, 117, 62, 148, 187, 28, 190, 220, 71, 176, 61, 118, 62, 149, 188, 36, 156, 136, 189, 19, 243, 0, 62, 54, 252, 50, 62, 42, 190, 219, 189, 250, 147, 80, 62, 216, 87, 162, 190, 131, 71, 178, 189, 178, 234, 173, 189, 218, 247, 126, 190, 26, 4, 36, 62, 91, 24, 33, 190, 88, 161, 2, 190, 243, 198, 60, 190, 138, 210, 120, 62, 21, 86, 138, 190, 3, 12, 247, 62, 188, 140, 157, 62, 249, 229, 18, 190, 29, 92, 36, 191, 14, 25, 61, 62, 113, 187, 45, 190, 81, 194, 155, 190, 90, 214, 90, 60, 141, 118, 174, 190, 141, 16, 156, 62, 248, 200, 246, 190, 240, 23, 0, 190, 152, 248, 157, 190, 128, 92, 45, 188, 207, 146, 175, 62, 171, 169, 245, 62, 151, 230, 241, 61, 145, 185, 151, 62, 97, 113, 25, 62, 207, 239, 192, 190, 37, 232, 163, 189, 105, 130, 88, 189, 243, 63, 195, 190, 21, 226, 206, 190, 18, 12, 149, 188, 150, 72, 201, 190, 69, 213, 58, 62, 152, 56, 197, 62, 48, 215, 57, 63, 112, 254, 193, 189, 108, 211, 86, 61, 197, 100, 15, 62, 132, 116, 68, 62, 246, 185, 246, 61, 144, 229, 103, 190, 55, 248, 85, 190, 89, 247, 44, 62, 165, 48, 220, 61, 136, 68, 171, 189, 252, 140, 189, 62, 115, 234, 153, 189, 154, 47, 139, 62, 76, 50, 168, 190, 141, 29, 241, 61, 235, 3, 75, 189, 236, 141, 225, 61, 114, 68, 40, 191, 28, 121, 208, 62, 123, 34, 44, 189, 30, 106, 198, 61, 171, 124, 14, 62, 15, 248, 180, 191, 92, 186, 1, 61, 76, 208, 107, 61, 181, 158, 242, 190, 201, 45, 42, 190, 247, 106, 49, 190, 243, 24, 72, 191, 204, 186, 101, 62, 58, 246, 14, 191, 157, 122, 225, 190, 52, 116, 46, 191, 165, 161, 137, 62, 40, 30, 226, 189, 141, 236, 156, 62, 116, 216, 73, 62, 150, 161, 110, 61, 238, 135, 223, 61, 255, 44, 32, 62, 33, 110, 12, 62, 34, 203, 107, 190, 120, 179, 13, 62, 68, 66, 71, 190, 215, 93, 3, 62, 192, 215, 211, 188, 120, 243, 87, 60, 50, 248, 14, 190, 232, 237, 69, 62, 95, 68, 176, 62, 143, 209, 178, 189, 22, 204, 147, 61, 125, 195, 109, 189, 150, 26, 82, 62, 139, 230, 194, 190, 49, 127, 32, 190, 197, 172, 28, 61, 216, 75, 41, 62, 4, 195, 162, 61, 177, 135, 4, 61, 53, 42, 173, 189, 15, 150, 109, 188, 81, 43, 176, 189, 90, 145, 7, 63, 210, 197, 211, 189, 0, 55, 106, 60, 83, 123, 75, 189, 35, 116, 153, 62, 15, 166, 81, 62, 127, 168, 62, 190, 255, 131, 183, 189, 72, 70, 182, 189, 44, 23, 48, 190, 141, 234, 57, 190, 81, 240, 41, 62, 119, 203, 85, 190, 171, 175, 49, 190, 196, 79, 58, 190, 16, 62, 249, 190, 139, 50, 248, 189, 20, 167, 182, 189, 220, 162, 48, 188, 1, 248, 12, 62, 249, 139, 134, 62, 201, 79, 91, 62, 10, 34, 250, 61, 198, 189, 86, 190, 232, 34, 73, 190, 169, 174, 48, 62, 71, 195, 73, 190, 63, 191, 218, 188, 76, 191, 25, 61, 255, 238, 61, 189, 20, 15, 91, 188, 176, 140, 60, 62, 207, 191, 154, 62, 12, 103, 206, 61, 38, 55, 71, 190, 205, 85, 171, 190, 103, 100, 85, 62, 240, 171, 7, 63, 182, 188, 250, 190, 105, 31, 225, 62, 52, 239, 130, 189, 96, 190, 71, 188, 150, 15, 177, 62, 221, 110, 217, 190, 225, 48, 124, 61, 189, 82, 136, 60, 237, 250, 158, 62, 176, 193, 14, 62, 56, 28, 17, 189, 97, 18, 201, 61, 15, 140, 130, 191, 70, 56, 159, 190, 198, 33, 135, 62, 103, 167, 153, 190, 250, 93, 119, 189, 205, 216, 141, 62, 125, 119, 139, 62, 219, 199, 27, 190, 82, 114, 42, 62, 12, 196, 135, 62, 249, 163, 132, 190, 192, 158, 55, 62, 238, 162, 119, 62, 99, 173, 104, 190, 198, 151, 71, 191, 212, 127, 146, 188, 100, 75, 153, 61, 156, 42, 184, 189, 226, 171, 28, 191, 53, 211, 11, 191, 10, 140, 30, 62, 173, 23, 41, 190, 221, 136, 26, 191, 233, 251, 165, 61, 234, 202, 147, 189, 82, 87, 223, 62, 147, 82, 137, 61, 177, 145, 133, 62, 74, 254, 43, 190, 176, 207, 135, 62, 48, 131, 55, 189, 72, 161, 227, 190, 225, 110, 133, 191, 41, 68, 103, 190, 37, 133, 60, 190, 63, 137, 35, 61, 136, 105, 110, 61, 116, 207, 74, 190, 177, 71, 180, 189, 62, 183, 193, 61, 66, 182, 76, 190, 160, 162, 8, 61, 135, 194, 138, 62, 200, 49, 195, 190, 102, 209, 28, 190, 4, 31, 132, 190, 221, 239, 95, 190, 108, 61, 177, 190, 90, 6, 166, 189, 42, 8, 141, 190, 64, 243, 218, 62, 26, 42, 169, 189, 87, 0, 171, 60, 101, 248, 27, 62, 93, 14, 78, 61, 28, 25, 23, 190, 225, 23, 199, 62, 142, 233, 19, 191, 89, 153, 155, 189, 237, 84, 61, 190, 191, 187, 68, 190, 64, 159, 160, 187, 73, 248, 11, 62, 129, 94, 182, 189, 6, 88, 254, 189, 51, 125, 215, 190, 138, 196, 155, 62, 99, 245, 217, 189, 105, 127, 129, 62, 8, 158, 60, 189, 228, 110, 54, 60, 106, 115, 195, 189, 65, 113, 154, 61, 241, 142, 56, 62, 183, 5, 152, 60, 159, 145, 113, 62, 4, 228, 3, 191, 230, 187, 214, 61, 100, 75, 171, 190, 53, 68, 181, 189, 206, 1, 129, 190, 186, 41, 56, 190, 146, 30, 80, 191, 28, 1, 105, 61, 14, 83, 20, 62, 190, 2, 96, 189, 232, 128, 44, 190, 144, 4, 169, 189, 23, 190, 22, 62, 187, 120, 134, 189, 240, 198, 88, 60, 204, 19, 214, 59, 79, 159, 213, 189, 108, 149, 218, 61, 171, 247, 50, 190, 16, 40, 203, 60, 72, 80, 69, 189, 92, 186, 102, 61, 174, 18, 74, 190, 60, 156, 249, 188, 238, 206, 194, 61, 139, 253, 178, 189, 100, 112, 222, 61, 77, 93, 78, 190, 130, 60, 61, 61, 195, 210, 213, 188, 164, 61, 122, 189, 202, 198, 69, 190, 55, 18, 16, 190, 96, 108, 151, 189, 179, 39, 71, 189, 245, 206, 226, 61, 107, 108, 4, 62, 18, 9, 253, 189, 12, 159, 246, 189, 31, 222, 158, 189, 23, 39, 57, 189, 82, 240, 38, 191, 185, 194, 99, 62, 175, 182, 110, 189, 183, 107, 142, 190, 165, 97, 138, 62, 109, 41, 32, 187, 186, 222, 30, 190, 21, 156, 83, 61, 206, 80, 169, 190, 44, 29, 13, 191, 5, 218, 55, 61, 161, 76, 33, 62, 11, 188, 14, 62, 35, 226, 213, 190, 138, 227, 204, 61, 185, 217, 95, 62, 133, 40, 184, 190, 30, 156, 170, 190, 176, 129, 160, 189, 79, 244, 131, 190, 191, 49, 232, 190, 237, 31, 170, 190, 155, 55, 203, 190, 118, 241, 172, 62, 187, 34, 1, 191, 176, 152, 19, 190, 170, 170, 66, 190, 150, 118, 13, 62, 150, 70, 204, 61, 183, 247, 108, 62, 39, 16, 228, 62, 189, 131, 15, 190, 133, 223, 244, 190, 190, 30, 107, 62, 135, 161, 88, 190, 46, 169, 76, 190, 6, 114, 12, 191, 45, 153, 97, 190, 255, 61, 234, 62, 57, 41, 198, 190, 114, 193, 42, 191, 127, 227, 65, 191, 206, 148, 155, 62, 213, 57, 205, 62, 118, 168, 153, 61, 95, 6, 250, 57, 54, 187, 95, 61, 171, 246, 38, 62, 99, 184, 232, 61, 179, 177, 232, 61, 5, 19, 230, 190, 162, 79, 80, 186, 216, 233, 192, 189, 214, 18, 73, 61, 94, 248, 148, 189, 164, 34, 5, 62, 211, 159, 144, 62, 239, 19, 46, 62, 241, 139, 35, 189, 230, 172, 172, 190, 54, 96, 197, 60, 90, 134, 123, 190, 49, 211, 64, 190, 216, 79, 240, 61, 217, 144, 28, 190, 181, 233, 86, 61, 7, 208, 58, 61, 217, 75, 67, 62, 142, 5, 17, 189, 39, 75, 158, 189, 83, 245, 54, 189, 106, 116, 92, 60, 188, 180, 45, 62, 46, 119, 190, 61, 58, 109, 146, 61, 16, 83, 56, 191, 161, 154, 47, 62, 57, 221, 3, 63, 201, 188, 169, 188, 84, 29, 203, 62, 52, 124, 205, 190, 61, 209, 187, 61, 170, 50, 252, 61, 145, 116, 11, 191, 53, 10, 159, 59, 58, 74, 35, 62, 136, 93, 174, 190, 76, 219, 251, 61, 114, 19, 223, 190, 229, 40, 218, 191, 115, 72, 72, 191, 117, 169, 217, 189, 13, 102, 176, 188, 210, 115, 27, 62, 51, 252, 150, 61, 51, 225, 226, 61, 115, 31, 249, 190, 59, 28, 149, 62, 141, 4, 159, 61, 32, 190, 234, 190, 69, 127, 2, 189, 47, 134, 9, 191, 147, 206, 161, 189, 64, 116, 221, 190, 146, 161, 115, 60, 19, 162, 25, 189, 20, 25, 66, 62, 203, 68, 119, 62, 33, 159, 184, 62, 127, 65, 134, 62, 109, 62, 199, 61, 197, 83, 228, 61, 187, 77, 212, 190, 223, 128, 97, 189, 227, 84, 31, 59, 186, 203, 69, 190, 153, 207, 90, 190, 37, 156, 170, 61, 137, 96, 147, 190, 71, 213, 229, 61, 9, 208, 135, 62, 53, 118, 173, 187, 136, 149, 111, 190, 205, 86, 127, 61, 151, 8, 86, 62, 21, 85, 239, 61, 14, 226, 11, 62, 204, 134, 201, 190, 177, 132, 25, 190, 174, 136, 191, 190, 21, 99, 4, 60, 207, 197, 210, 61, 233, 116, 38, 191, 70, 179, 190, 60, 81, 199, 72, 190, 153, 116, 6, 63, 22, 74, 24, 189, 152, 153, 116, 189, 1, 159, 83, 189, 113, 121, 118, 61, 136, 124, 22, 62, 142, 44, 71, 62, 132, 34, 159, 190, 255, 196, 26, 62, 206, 26, 39, 62, 191, 58, 238, 187, 199, 78, 82, 189, 21, 47, 145, 62, 231, 34, 244, 62, 169, 144, 20, 190, 173, 7, 110, 61, 173, 186, 98, 191, 92, 210, 103, 62, 43, 39, 76, 191, 214, 40, 70, 190, 117, 131, 153, 190, 186, 133, 186, 191, 45, 216, 12, 191, 166, 17, 57, 190, 241, 28, 12, 189, 218, 230, 32, 190, 239, 45, 118, 61, 202, 127, 170, 60, 120, 150, 27, 62, 219, 240, 214, 189, 35, 231, 38, 61, 233, 142, 209, 189, 207, 25, 225, 187, 253, 69, 44, 190, 203, 132, 185, 59, 51, 2, 64, 190, 143, 215, 75, 190, 111, 100, 90, 189, 57, 114, 50, 62, 91, 229, 153, 187, 220, 83, 161, 189, 169, 238, 122, 188, 5, 218, 204, 61, 31, 179, 39, 62, 7, 252, 30, 189, 15, 172, 45, 190, 151, 165, 210, 59, 84, 36, 73, 190, 163, 54, 29, 62, 112, 144, 12, 62, 93, 69, 225, 61, 13, 30, 124, 189, 144, 13, 119, 61, 239, 73, 35, 61, 128, 240, 170, 190, 209, 61, 153, 62, 123, 167, 12, 189, 161, 69, 241, 186, 40, 18, 38, 62, 143, 76, 70, 62, 136, 61, 239, 61, 135, 53, 198, 190, 7, 49, 70, 62, 169, 142, 79, 61, 67, 8, 45, 62, 162, 214, 186, 60, 95, 64, 62, 187, 248, 61, 39, 62, 160, 124, 176, 190, 110, 20, 229, 189, 246, 175, 74, 60, 65, 190, 28, 60, 37, 224, 25, 61, 254, 182, 28, 61, 17, 194, 30, 190, 51, 169, 121, 62, 46, 218, 117, 61, 157, 121, 219, 61, 97, 36, 86, 190, 243, 84, 245, 61, 16, 164, 238, 187, 214, 229, 15, 190, 69, 104, 205, 190, 4, 123, 74, 190, 102, 216, 9, 189, 169, 95, 158, 61, 176, 53, 34, 191, 229, 140, 137, 189, 42, 229, 169, 61, 236, 11, 51, 190, 130, 137, 43, 190, 11, 173, 68, 189, 127, 66, 45, 190, 232, 95, 199, 189, 207, 132, 140, 61, 211, 181, 9, 190, 136, 220, 0, 190, 244, 48, 38, 61, 153, 191, 153, 189, 175, 109, 0, 61, 30, 150, 199, 61, 191, 61, 238, 189, 218, 182, 23, 62, 177, 62, 161, 189, 79, 92, 18, 61, 112, 156, 172, 189, 254, 27, 63, 190, 51, 161, 58, 190, 167, 170, 116, 59, 230, 214, 192, 61, 32, 140, 190, 61, 48, 250, 135, 189, 199, 118, 26, 61, 235, 3, 24, 61, 10, 155, 77, 60, 20, 99, 52, 189, 115, 161, 3, 189, 206, 174, 29, 59, 185, 69, 167, 60, 145, 123, 4, 62, 108, 141, 250, 189, 145, 115, 8, 191, 127, 187, 155, 62, 20, 208, 135, 61, 191, 101, 82, 190, 11, 80, 173, 60, 114, 211, 208, 190, 42, 245, 171, 61, 161, 255, 121, 190, 165, 201, 1, 62, 77, 200, 133, 190, 151, 69, 17, 62, 129, 224, 98, 62, 107, 83, 4, 62, 12, 125, 41, 62, 189, 21, 83, 62, 199, 4, 160, 62, 65, 126, 57, 191, 251, 101, 159, 60, 171, 120, 63, 62, 24, 94, 181, 189, 119, 48, 153, 190, 23, 240, 26, 62, 160, 231, 145, 190, 120, 15, 46, 62, 38, 166, 25, 61, 234, 103, 194, 61, 206, 98, 62, 190, 42, 91, 43, 189, 79, 48, 44, 61, 96, 94, 66, 62, 177, 56, 134, 189, 211, 238, 186, 189, 152, 50, 208, 61, 89, 144, 232, 188, 37, 42, 76, 62, 243, 68, 95, 62, 22, 29, 121, 191, 30, 8, 171, 189, 210, 250, 113, 189, 120, 201, 169, 185, 37, 249, 218, 61, 154, 59, 62, 62, 188, 101, 53, 189, 97, 20, 112, 190, 163, 124, 91, 190, 232, 144, 113, 62, 81, 139, 21, 61, 123, 173, 165, 62, 91, 127, 18, 190, 91, 226, 93, 189, 104, 97, 47, 190, 66, 81, 68, 62, 239, 64, 59, 62, 8, 65, 169, 190, 171, 58, 18, 62, 232, 123, 159, 190, 253, 182, 92, 62, 60, 53, 216, 190, 252, 72, 100, 189, 100, 143, 230, 190, 165, 16, 185, 190, 65, 180, 211, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 242, 147, 62, 51, 73, 154, 61, 36, 90, 96, 188, 26, 91, 84, 188, 214, 65, 225, 61, 104, 15, 37, 61, 168, 237, 248, 60, 0, 29, 194, 61, 29, 97, 144, 189, 8, 160, 57, 190, 196, 254, 194, 61, 219, 199, 107, 62, 242, 50, 19, 62, 170, 235, 247, 189, 222, 235, 115, 62, 246, 63, 56, 62, 229, 109, 85, 62, 143, 250, 111, 62, 163, 190, 102, 61, 192, 29, 229, 189, 83, 160, 82, 62, 134, 250, 57, 60, 51, 78, 51, 190, 34, 212, 225, 61, 84, 55, 25, 62, 204, 40, 98, 62, 38, 123, 191, 62, 128, 70, 65, 190, 220, 54, 183, 189, 47, 93, 183, 189, 3, 231, 22, 61, 165, 1, 136, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 176, 198, 62, 231, 27, 144, 63, 148, 100, 137, 189, 139, 125, 135, 190, 204, 108, 65, 190, 93, 46, 29, 190, 48, 201, 105, 62, 236, 36, 160, 191, 88, 223, 64, 63, 35, 92, 129, 63, 166, 196, 1, 191, 244, 74, 229, 190, 90, 162, 68, 189, 20, 224, 47, 190, 99, 45, 113, 63, 27, 165, 167, 63, 235, 228, 142, 61, 98, 188, 90, 62, 119, 24, 9, 191, 221, 212, 161, 62, 50, 181, 176, 190, 242, 166, 13, 189, 237, 201, 132, 191, 72, 171, 45, 63, 9, 224, 9, 62, 134, 180, 252, 62, 38, 133, 97, 191, 210, 92, 164, 189, 241, 231, 156, 189, 4, 163, 212, 61, 142, 218, 250, 62, 196, 148, 171, 190, 221, 67, 229, 189, 4, 44, 218, 62, 94, 123, 137, 191, 130, 27, 176, 188, 200, 54, 149, 190, 139, 191, 105, 190, 27, 214, 12, 189, 50, 175, 254, 189, 213, 28, 81, 60, 207, 223, 183, 62, 12, 0, 192, 189, 182, 41, 54, 190, 190, 41, 227, 190, 79, 130, 182, 62, 3, 69, 176, 62, 51, 81, 20, 62, 58, 86, 95, 190, 199, 129, 225, 189, 157, 28, 31, 63, 135, 142, 108, 190, 217, 40, 149, 190, 225, 165, 25, 62, 198, 52, 51, 63, 40, 64, 157, 61, 205, 83, 13, 191, 255, 173, 15, 189, 241, 108, 71, 62, 201, 24, 145, 60, 185, 34, 33, 190, 32, 173, 97, 61, 48, 159, 171, 187, 0, 45, 174, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 254, 101, 61, 159, 119, 200, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {205, 32, 44, 63, 80, 107, 124, 191, 160, 2, 52, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {136, 209, 68, 64, 187, 160, 206, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0076/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}