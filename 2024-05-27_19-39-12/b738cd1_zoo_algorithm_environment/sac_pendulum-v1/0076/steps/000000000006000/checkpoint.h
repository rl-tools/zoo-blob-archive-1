// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 248, 225, 190, 121, 61, 122, 191, 41, 123, 234, 189, 177, 197, 114, 62, 189, 164, 220, 62, 38, 128, 170, 190, 177, 101, 38, 63, 0, 150, 0, 63, 199, 178, 75, 63, 53, 25, 64, 62, 88, 59, 6, 191, 11, 0, 242, 62, 1, 159, 158, 62, 229, 147, 241, 189, 204, 243, 123, 190, 71, 110, 129, 189, 106, 113, 3, 60, 170, 83, 231, 62, 230, 238, 1, 63, 9, 192, 5, 191, 229, 162, 100, 190, 24, 84, 131, 190, 214, 151, 23, 191, 227, 22, 1, 63, 5, 49, 150, 190, 11, 221, 91, 63, 132, 61, 119, 190, 122, 20, 243, 190, 107, 39, 151, 191, 22, 221, 223, 190, 97, 229, 4, 188, 17, 105, 237, 62, 247, 54, 23, 191, 97, 251, 254, 190, 112, 61, 170, 61, 218, 18, 31, 191, 128, 225, 254, 59, 51, 255, 131, 190, 215, 255, 225, 62, 88, 88, 28, 191, 226, 76, 245, 62, 114, 52, 237, 61, 100, 44, 253, 190, 255, 77, 81, 191, 48, 86, 129, 62, 53, 21, 229, 62, 68, 104, 20, 63, 95, 199, 236, 61, 6, 79, 23, 191, 64, 125, 90, 190, 17, 147, 9, 63, 52, 112, 239, 62, 193, 47, 146, 189, 107, 76, 71, 60, 247, 168, 0, 191, 184, 160, 48, 63, 11, 70, 103, 190, 25, 254, 43, 189, 45, 102, 24, 63, 220, 237, 152, 190, 59, 153, 177, 62, 46, 49, 12, 191, 205, 147, 17, 191, 123, 207, 6, 190, 112, 56, 72, 63, 16, 57, 0, 62, 142, 142, 27, 190, 91, 0, 144, 63, 93, 17, 127, 190, 205, 63, 180, 61, 243, 211, 130, 62, 14, 99, 207, 190, 130, 0, 149, 62, 212, 172, 147, 63, 132, 166, 189, 62, 241, 36, 91, 190, 221, 60, 65, 191, 188, 248, 231, 62, 5, 59, 58, 191, 139, 235, 89, 62, 62, 166, 15, 189, 87, 64, 135, 190, 80, 163, 104, 63, 139, 112, 45, 62, 113, 9, 149, 59, 199, 198, 118, 62, 54, 32, 199, 62, 162, 26, 39, 62, 242, 72, 75, 191, 57, 11, 218, 190, 239, 164, 216, 190, 174, 102, 179, 189, 86, 142, 141, 63, 13, 28, 2, 63, 177, 126, 7, 191, 75, 3, 113, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {210, 194, 4, 191, 11, 152, 33, 191, 177, 215, 191, 190, 40, 14, 15, 63, 167, 69, 204, 62, 204, 138, 108, 190, 85, 212, 217, 190, 79, 163, 197, 190, 38, 187, 167, 189, 186, 116, 75, 61, 198, 175, 253, 190, 26, 250, 142, 190, 152, 223, 19, 63, 77, 153, 41, 190, 130, 142, 240, 61, 90, 97, 238, 62, 254, 189, 202, 62, 188, 141, 43, 63, 148, 30, 227, 60, 34, 73, 11, 62, 5, 123, 127, 62, 212, 222, 16, 63, 27, 5, 232, 62, 92, 103, 11, 191, 206, 188, 135, 62, 119, 204, 234, 190, 205, 142, 4, 63, 147, 125, 44, 190, 79, 245, 106, 189, 88, 210, 17, 190, 221, 103, 223, 190, 189, 114, 184, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 20, 70, 188, 141, 98, 23, 190, 31, 109, 178, 190, 105, 169, 8, 62, 69, 213, 159, 60, 67, 244, 144, 190, 176, 69, 81, 62, 121, 231, 165, 190, 175, 239, 95, 61, 189, 0, 109, 190, 126, 8, 242, 189, 118, 144, 250, 189, 64, 29, 15, 62, 143, 160, 132, 62, 218, 204, 169, 60, 76, 110, 162, 62, 114, 59, 124, 61, 224, 99, 170, 62, 97, 165, 119, 190, 242, 34, 105, 61, 159, 68, 255, 61, 182, 0, 158, 61, 79, 73, 211, 190, 157, 70, 167, 61, 13, 53, 30, 189, 150, 135, 196, 61, 106, 45, 219, 60, 220, 248, 135, 62, 27, 82, 187, 188, 224, 98, 29, 62, 179, 91, 76, 62, 241, 142, 224, 61, 0, 145, 20, 61, 252, 142, 82, 189, 49, 115, 10, 191, 207, 180, 14, 59, 190, 130, 138, 188, 181, 183, 62, 191, 68, 98, 179, 62, 244, 28, 89, 191, 123, 26, 169, 189, 141, 213, 11, 191, 22, 88, 62, 190, 88, 61, 198, 190, 25, 159, 187, 61, 116, 29, 23, 62, 103, 121, 129, 188, 13, 43, 174, 189, 6, 81, 6, 62, 48, 53, 30, 190, 198, 120, 247, 61, 29, 249, 196, 61, 56, 50, 46, 189, 171, 38, 31, 62, 234, 24, 185, 190, 173, 109, 237, 60, 88, 144, 156, 188, 144, 122, 69, 62, 142, 168, 6, 61, 13, 92, 186, 62, 228, 147, 126, 188, 52, 172, 134, 62, 55, 203, 59, 189, 130, 119, 5, 63, 196, 1, 2, 190, 128, 116, 253, 189, 144, 29, 172, 189, 112, 236, 36, 62, 89, 217, 68, 62, 218, 254, 254, 190, 118, 148, 4, 191, 98, 18, 211, 190, 154, 69, 10, 191, 8, 182, 225, 190, 45, 159, 3, 190, 5, 242, 192, 190, 187, 110, 84, 61, 31, 169, 147, 61, 70, 11, 136, 189, 231, 96, 244, 61, 217, 165, 56, 190, 39, 141, 155, 62, 196, 161, 238, 190, 237, 235, 182, 188, 89, 197, 112, 189, 65, 66, 130, 61, 225, 163, 23, 190, 19, 79, 94, 190, 161, 228, 12, 189, 198, 103, 60, 190, 251, 221, 158, 189, 185, 7, 193, 190, 218, 86, 164, 190, 43, 196, 18, 191, 126, 252, 118, 189, 107, 16, 0, 190, 5, 157, 195, 190, 164, 248, 206, 60, 57, 145, 90, 62, 29, 156, 104, 189, 241, 38, 199, 61, 79, 108, 148, 62, 112, 249, 53, 190, 55, 57, 211, 61, 124, 120, 121, 189, 100, 97, 131, 189, 237, 150, 7, 190, 243, 92, 153, 61, 199, 114, 161, 61, 152, 75, 131, 61, 64, 252, 220, 61, 195, 246, 8, 190, 21, 119, 217, 189, 252, 158, 132, 189, 181, 222, 91, 62, 82, 108, 190, 61, 247, 208, 242, 189, 110, 164, 91, 60, 87, 5, 127, 61, 221, 30, 90, 190, 250, 0, 178, 60, 71, 45, 100, 190, 57, 28, 103, 60, 187, 15, 170, 190, 122, 205, 180, 57, 145, 186, 36, 190, 111, 217, 219, 61, 165, 43, 232, 190, 188, 60, 164, 62, 0, 40, 31, 190, 214, 204, 56, 189, 128, 194, 235, 61, 88, 90, 105, 59, 32, 209, 146, 61, 94, 155, 53, 190, 104, 4, 93, 61, 34, 10, 95, 61, 53, 142, 74, 61, 165, 200, 229, 61, 161, 55, 20, 190, 122, 75, 197, 61, 12, 196, 216, 189, 132, 164, 195, 61, 133, 131, 147, 61, 148, 217, 109, 189, 74, 214, 41, 61, 142, 6, 110, 61, 5, 140, 38, 61, 251, 129, 7, 62, 74, 100, 220, 61, 172, 2, 225, 61, 224, 22, 152, 61, 109, 4, 39, 190, 170, 78, 116, 189, 167, 97, 21, 62, 43, 20, 130, 190, 51, 41, 216, 188, 229, 103, 225, 61, 229, 171, 75, 190, 156, 48, 17, 191, 36, 129, 59, 189, 91, 36, 99, 61, 229, 103, 80, 62, 17, 223, 227, 61, 193, 103, 97, 61, 138, 238, 92, 61, 59, 254, 69, 189, 154, 25, 188, 62, 159, 215, 183, 190, 179, 212, 57, 62, 123, 14, 77, 190, 199, 148, 125, 190, 191, 188, 182, 188, 241, 112, 57, 189, 165, 90, 24, 62, 101, 10, 145, 190, 191, 118, 169, 61, 254, 165, 21, 61, 171, 125, 230, 61, 36, 104, 180, 190, 183, 85, 248, 189, 169, 238, 25, 190, 30, 161, 28, 189, 225, 42, 57, 190, 71, 98, 9, 190, 152, 235, 246, 189, 99, 121, 206, 60, 148, 186, 29, 190, 186, 83, 139, 61, 171, 128, 45, 190, 73, 192, 171, 189, 230, 52, 3, 62, 242, 202, 12, 191, 102, 133, 109, 62, 8, 192, 105, 190, 51, 96, 21, 62, 234, 189, 150, 61, 50, 205, 149, 190, 184, 2, 171, 60, 134, 48, 107, 190, 83, 253, 138, 62, 180, 165, 73, 190, 9, 220, 168, 189, 69, 45, 187, 188, 165, 194, 41, 60, 19, 92, 128, 62, 35, 83, 82, 190, 93, 246, 39, 62, 35, 185, 223, 189, 249, 253, 231, 188, 187, 64, 88, 62, 186, 161, 49, 62, 83, 230, 233, 187, 81, 14, 46, 62, 31, 190, 150, 59, 178, 210, 189, 61, 169, 49, 88, 62, 16, 237, 104, 62, 98, 109, 173, 61, 175, 182, 185, 62, 219, 119, 241, 61, 150, 154, 57, 189, 189, 246, 58, 62, 74, 67, 74, 62, 93, 179, 140, 190, 192, 181, 145, 190, 49, 136, 198, 190, 130, 83, 155, 188, 147, 13, 70, 191, 111, 19, 131, 62, 191, 104, 187, 188, 36, 115, 121, 62, 231, 147, 113, 191, 231, 172, 199, 62, 246, 107, 205, 190, 240, 148, 60, 190, 73, 247, 95, 62, 78, 205, 193, 62, 114, 141, 194, 61, 32, 97, 145, 191, 24, 232, 116, 62, 93, 138, 39, 61, 161, 149, 173, 62, 7, 40, 130, 191, 151, 168, 248, 190, 148, 40, 124, 62, 221, 104, 102, 62, 177, 88, 164, 190, 5, 76, 111, 191, 62, 60, 32, 190, 212, 49, 109, 62, 155, 72, 125, 191, 152, 41, 131, 190, 254, 176, 180, 190, 236, 206, 78, 191, 174, 42, 203, 189, 139, 178, 115, 60, 209, 10, 151, 190, 126, 46, 160, 189, 122, 135, 112, 190, 35, 124, 68, 190, 222, 24, 76, 191, 163, 246, 113, 187, 104, 92, 220, 190, 118, 65, 156, 188, 214, 140, 178, 190, 108, 212, 147, 189, 140, 251, 5, 191, 36, 40, 105, 59, 137, 225, 47, 62, 226, 180, 91, 59, 81, 24, 193, 61, 53, 75, 31, 62, 169, 119, 192, 189, 171, 56, 56, 62, 53, 8, 44, 190, 169, 182, 145, 61, 128, 102, 52, 62, 203, 142, 16, 190, 32, 143, 28, 189, 185, 252, 220, 188, 227, 167, 159, 60, 110, 175, 25, 62, 252, 49, 165, 62, 134, 18, 158, 61, 100, 229, 167, 189, 187, 49, 138, 190, 206, 218, 144, 61, 121, 167, 55, 191, 226, 93, 172, 61, 102, 248, 127, 190, 109, 55, 237, 189, 216, 121, 147, 61, 65, 94, 19, 189, 164, 223, 177, 62, 181, 240, 30, 62, 251, 215, 214, 61, 215, 10, 18, 190, 229, 30, 90, 62, 176, 190, 186, 189, 161, 208, 141, 190, 166, 193, 12, 189, 112, 92, 49, 191, 149, 245, 71, 62, 129, 0, 164, 188, 180, 145, 32, 188, 164, 200, 225, 59, 99, 206, 203, 61, 138, 207, 136, 62, 98, 11, 227, 190, 183, 241, 96, 190, 71, 160, 38, 189, 241, 56, 231, 190, 221, 136, 133, 61, 159, 50, 182, 190, 117, 134, 190, 190, 143, 61, 83, 190, 188, 122, 163, 61, 137, 136, 73, 190, 23, 152, 42, 63, 62, 49, 217, 61, 116, 208, 41, 190, 86, 207, 179, 190, 185, 147, 150, 62, 76, 47, 171, 187, 150, 67, 37, 190, 168, 219, 103, 188, 119, 53, 34, 190, 225, 131, 12, 190, 194, 78, 141, 62, 194, 191, 76, 190, 87, 190, 155, 61, 141, 66, 36, 61, 167, 128, 172, 189, 175, 183, 115, 62, 170, 79, 34, 191, 15, 5, 166, 188, 169, 218, 122, 189, 175, 199, 97, 61, 154, 170, 51, 61, 185, 117, 76, 189, 35, 212, 165, 60, 170, 87, 150, 61, 86, 230, 29, 190, 17, 130, 112, 191, 148, 165, 175, 188, 114, 83, 14, 62, 87, 230, 23, 190, 189, 228, 103, 190, 238, 247, 155, 61, 127, 168, 178, 189, 185, 130, 110, 190, 231, 65, 199, 189, 235, 20, 205, 189, 64, 94, 177, 61, 34, 227, 99, 62, 252, 197, 170, 61, 213, 127, 216, 189, 180, 9, 176, 190, 72, 224, 167, 189, 97, 77, 151, 190, 70, 13, 190, 61, 142, 112, 158, 190, 128, 76, 72, 61, 58, 154, 16, 61, 183, 84, 38, 189, 200, 28, 187, 187, 24, 183, 95, 62, 105, 12, 172, 61, 146, 83, 250, 62, 202, 231, 201, 189, 129, 106, 184, 190, 42, 54, 20, 190, 177, 205, 30, 62, 239, 57, 147, 188, 220, 115, 107, 190, 68, 176, 157, 61, 153, 174, 14, 190, 239, 79, 142, 189, 14, 251, 45, 191, 202, 99, 148, 190, 208, 208, 143, 61, 234, 40, 25, 191, 112, 174, 25, 191, 125, 199, 83, 61, 19, 16, 77, 190, 130, 15, 181, 60, 81, 237, 52, 61, 51, 71, 144, 61, 9, 231, 129, 62, 85, 166, 98, 190, 60, 184, 126, 62, 139, 58, 73, 189, 66, 102, 193, 61, 39, 90, 164, 61, 40, 184, 165, 61, 41, 250, 211, 61, 53, 20, 65, 190, 125, 176, 79, 190, 155, 38, 225, 62, 49, 141, 243, 189, 109, 86, 192, 62, 101, 1, 132, 190, 163, 109, 123, 61, 194, 83, 141, 59, 129, 225, 67, 62, 122, 218, 180, 61, 147, 125, 150, 189, 154, 153, 62, 188, 0, 198, 119, 190, 51, 30, 140, 62, 110, 101, 156, 189, 44, 50, 170, 190, 223, 8, 98, 61, 225, 246, 101, 190, 75, 36, 132, 189, 40, 114, 158, 60, 67, 202, 35, 188, 182, 241, 164, 190, 97, 44, 16, 61, 72, 42, 30, 188, 76, 183, 149, 190, 253, 91, 143, 189, 70, 10, 162, 189, 4, 187, 13, 62, 226, 115, 200, 60, 54, 92, 95, 188, 112, 3, 107, 189, 16, 49, 75, 61, 138, 73, 177, 61, 157, 35, 12, 62, 104, 60, 74, 57, 131, 237, 17, 189, 127, 204, 70, 61, 100, 49, 52, 62, 108, 52, 81, 189, 249, 231, 13, 62, 216, 89, 56, 189, 191, 45, 219, 61, 103, 235, 29, 190, 113, 140, 28, 189, 65, 95, 216, 61, 97, 238, 106, 189, 106, 172, 75, 190, 216, 1, 29, 190, 196, 107, 235, 61, 114, 150, 101, 190, 143, 237, 134, 62, 3, 67, 17, 62, 161, 89, 68, 190, 14, 182, 13, 191, 31, 168, 45, 62, 81, 57, 44, 190, 218, 137, 145, 190, 157, 50, 204, 188, 120, 205, 176, 190, 207, 175, 10, 62, 43, 197, 183, 190, 30, 145, 99, 190, 124, 232, 190, 190, 16, 210, 2, 189, 84, 113, 162, 61, 142, 177, 205, 62, 121, 19, 91, 62, 40, 66, 131, 62, 201, 143, 32, 62, 189, 77, 207, 190, 248, 74, 247, 188, 188, 165, 249, 187, 244, 238, 172, 190, 185, 163, 212, 190, 237, 102, 159, 60, 35, 71, 115, 190, 91, 119, 68, 62, 255, 156, 56, 62, 110, 114, 8, 63, 166, 117, 10, 189, 200, 121, 183, 59, 44, 34, 37, 62, 104, 164, 42, 62, 86, 17, 177, 59, 196, 165, 37, 190, 191, 181, 23, 190, 36, 250, 119, 61, 187, 165, 134, 61, 92, 189, 188, 189, 187, 245, 102, 62, 28, 172, 142, 189, 25, 184, 30, 190, 200, 187, 10, 190, 125, 243, 132, 189, 176, 3, 188, 188, 152, 152, 225, 60, 55, 28, 24, 190, 99, 234, 155, 62, 172, 43, 30, 60, 194, 85, 195, 61, 52, 20, 249, 60, 240, 68, 32, 191, 99, 91, 55, 62, 55, 240, 187, 60, 155, 155, 251, 189, 237, 192, 192, 189, 123, 168, 212, 189, 247, 101, 172, 190, 128, 41, 76, 62, 240, 221, 72, 190, 236, 135, 244, 189, 201, 236, 9, 190, 100, 13, 131, 61, 6, 110, 134, 189, 149, 179, 56, 62, 34, 87, 200, 61, 9, 172, 57, 189, 241, 35, 206, 61, 59, 249, 78, 62, 252, 141, 27, 62, 219, 254, 73, 190, 228, 144, 45, 62, 240, 94, 20, 190, 141, 179, 3, 62, 116, 199, 10, 189, 213, 45, 165, 61, 25, 169, 27, 190, 24, 120, 102, 62, 211, 223, 128, 62, 49, 4, 196, 189, 165, 124, 27, 62, 243, 252, 104, 189, 87, 153, 128, 62, 50, 136, 136, 190, 217, 163, 99, 189, 90, 33, 162, 61, 4, 17, 83, 62, 22, 125, 93, 61, 105, 36, 87, 60, 149, 251, 225, 187, 112, 39, 128, 61, 21, 217, 146, 189, 56, 117, 164, 62, 244, 30, 204, 189, 155, 67, 153, 61, 248, 81, 210, 187, 240, 134, 160, 62, 15, 209, 240, 61, 196, 60, 255, 189, 23, 184, 118, 190, 73, 246, 183, 189, 126, 204, 16, 190, 241, 0, 159, 189, 219, 12, 249, 61, 219, 112, 115, 190, 90, 9, 13, 60, 60, 167, 87, 190, 123, 59, 200, 189, 158, 70, 24, 190, 67, 45, 218, 189, 192, 198, 20, 190, 87, 234, 172, 61, 253, 41, 151, 62, 231, 160, 222, 61, 166, 106, 13, 62, 76, 56, 1, 190, 71, 252, 44, 61, 88, 175, 128, 62, 194, 90, 44, 190, 22, 36, 139, 61, 36, 173, 147, 61, 179, 217, 225, 59, 119, 106, 153, 189, 93, 20, 234, 61, 133, 89, 45, 62, 160, 76, 129, 61, 201, 64, 9, 190, 212, 129, 166, 190, 125, 40, 49, 62, 35, 224, 180, 62, 246, 147, 154, 190, 189, 76, 191, 62, 9, 109, 17, 190, 245, 61, 39, 189, 83, 2, 103, 62, 184, 248, 182, 190, 132, 228, 90, 190, 251, 46, 99, 60, 76, 236, 84, 62, 184, 195, 189, 61, 88, 214, 21, 60, 146, 202, 125, 61, 127, 137, 135, 190, 106, 19, 205, 190, 17, 3, 62, 62, 172, 61, 111, 190, 159, 242, 13, 190, 200, 178, 116, 62, 79, 251, 250, 61, 152, 197, 78, 190, 51, 41, 66, 62, 61, 166, 134, 62, 63, 225, 12, 190, 18, 234, 10, 62, 159, 15, 125, 190, 146, 171, 85, 189, 182, 26, 93, 189, 11, 89, 33, 61, 234, 150, 216, 188, 213, 208, 68, 190, 204, 214, 13, 191, 157, 0, 241, 189, 93, 147, 159, 59, 173, 23, 41, 190, 72, 221, 253, 190, 242, 197, 24, 61, 234, 202, 147, 189, 21, 175, 140, 62, 147, 82, 137, 61, 177, 138, 3, 62, 67, 25, 75, 61, 217, 83, 27, 62, 201, 8, 71, 189, 233, 2, 210, 190, 250, 67, 193, 190, 63, 15, 131, 190, 178, 225, 167, 190, 63, 137, 35, 61, 162, 150, 252, 189, 146, 166, 42, 190, 124, 169, 72, 190, 55, 28, 74, 61, 23, 54, 143, 190, 114, 77, 6, 190, 43, 254, 78, 62, 165, 244, 41, 190, 102, 209, 28, 190, 108, 65, 237, 189, 99, 146, 191, 189, 108, 61, 177, 190, 66, 74, 137, 188, 42, 8, 141, 190, 51, 128, 150, 62, 152, 88, 204, 60, 18, 247, 70, 61, 101, 33, 66, 62, 28, 48, 150, 61, 95, 175, 241, 189, 223, 45, 167, 62, 80, 53, 159, 190, 178, 84, 5, 190, 209, 183, 35, 190, 104, 90, 188, 189, 251, 83, 219, 188, 42, 82, 92, 62, 57, 36, 101, 189, 82, 183, 112, 189, 88, 103, 226, 190, 108, 185, 144, 62, 126, 17, 230, 189, 135, 161, 132, 62, 149, 119, 82, 60, 36, 118, 102, 189, 225, 252, 147, 189, 181, 136, 136, 61, 224, 242, 67, 62, 168, 216, 222, 61, 182, 78, 89, 62, 213, 11, 20, 191, 205, 202, 71, 62, 154, 25, 27, 190, 194, 197, 144, 189, 112, 7, 73, 61, 208, 57, 125, 190, 111, 148, 26, 191, 28, 1, 105, 61, 14, 83, 20, 62, 190, 2, 96, 189, 232, 128, 44, 190, 103, 248, 79, 189, 23, 190, 22, 62, 187, 120, 134, 189, 240, 198, 88, 60, 218, 218, 28, 61, 79, 159, 213, 189, 139, 208, 13, 62, 12, 171, 47, 190, 16, 40, 203, 60, 236, 96, 164, 188, 92, 186, 102, 61, 162, 140, 41, 190, 60, 156, 249, 188, 173, 235, 1, 62, 147, 228, 99, 189, 49, 190, 15, 62, 5, 220, 72, 190, 110, 170, 159, 61, 184, 127, 185, 59, 164, 61, 122, 189, 114, 64, 37, 190, 55, 18, 16, 190, 48, 199, 44, 189, 57, 32, 138, 188, 194, 233, 17, 62, 107, 108, 4, 62, 18, 9, 253, 189, 12, 159, 246, 189, 79, 143, 201, 61, 149, 13, 57, 189, 42, 177, 23, 190, 134, 102, 29, 62, 84, 73, 128, 189, 164, 22, 61, 190, 104, 233, 114, 62, 245, 178, 14, 190, 186, 222, 30, 190, 74, 172, 209, 61, 15, 36, 192, 190, 183, 115, 177, 189, 65, 46, 192, 188, 228, 119, 76, 189, 144, 243, 246, 61, 119, 235, 149, 190, 63, 154, 16, 190, 155, 123, 47, 62, 93, 180, 128, 190, 194, 136, 234, 190, 4, 80, 26, 189, 71, 79, 195, 188, 90, 103, 231, 190, 110, 119, 156, 190, 128, 51, 204, 189, 194, 42, 131, 61, 184, 80, 213, 190, 176, 152, 19, 190, 48, 15, 11, 189, 69, 8, 17, 62, 179, 203, 214, 60, 131, 181, 74, 62, 99, 48, 172, 60, 189, 131, 15, 190, 237, 106, 212, 190, 138, 100, 78, 62, 91, 249, 174, 190, 119, 133, 30, 190, 62, 79, 195, 190, 56, 181, 74, 190, 112, 176, 152, 62, 25, 79, 232, 190, 59, 250, 164, 190, 241, 33, 99, 191, 180, 7, 144, 62, 46, 3, 131, 62, 65, 5, 8, 60, 57, 117, 107, 61, 229, 228, 68, 61, 179, 19, 70, 61, 105, 89, 231, 60, 88, 213, 44, 61, 254, 48, 113, 190, 15, 79, 47, 61, 24, 56, 102, 190, 57, 187, 153, 60, 12, 67, 28, 61, 221, 240, 28, 62, 94, 87, 241, 61, 42, 111, 241, 61, 110, 125, 130, 61, 178, 109, 73, 190, 225, 129, 154, 61, 201, 101, 101, 190, 169, 37, 250, 189, 49, 196, 192, 189, 171, 255, 36, 190, 34, 242, 233, 188, 213, 212, 208, 59, 41, 234, 96, 62, 146, 30, 143, 189, 216, 28, 223, 189, 179, 3, 202, 189, 1, 14, 22, 62, 250, 245, 238, 61, 132, 122, 75, 61, 131, 5, 77, 185, 145, 66, 92, 190, 4, 219, 42, 188, 117, 178, 16, 63, 179, 211, 20, 189, 118, 227, 170, 62, 75, 95, 153, 190, 136, 251, 220, 61, 189, 250, 214, 61, 226, 165, 177, 190, 73, 172, 41, 189, 87, 118, 135, 61, 157, 167, 30, 189, 73, 101, 111, 61, 216, 123, 23, 190, 197, 152, 21, 191, 102, 189, 60, 189, 221, 39, 7, 189, 207, 120, 106, 59, 48, 176, 205, 61, 106, 181, 162, 189, 195, 105, 169, 61, 174, 186, 220, 190, 194, 187, 140, 62, 143, 45, 86, 61, 214, 253, 209, 190, 133, 218, 147, 189, 6, 219, 12, 191, 64, 200, 199, 187, 180, 202, 162, 190, 163, 9, 128, 61, 82, 96, 34, 189, 33, 1, 50, 62, 29, 114, 139, 61, 177, 177, 139, 62, 62, 125, 169, 62, 12, 209, 167, 61, 232, 89, 204, 61, 123, 30, 66, 190, 103, 104, 125, 61, 89, 12, 241, 60, 239, 235, 179, 189, 37, 255, 93, 190, 45, 15, 30, 61, 95, 87, 246, 189, 171, 159, 176, 61, 64, 186, 81, 62, 197, 211, 177, 189, 180, 74, 55, 189, 225, 73, 30, 62, 169, 78, 122, 62, 115, 121, 173, 61, 244, 43, 5, 60, 48, 160, 171, 190, 27, 31, 131, 189, 91, 71, 189, 190, 179, 191, 224, 59, 239, 189, 190, 189, 98, 229, 240, 190, 219, 144, 40, 61, 62, 133, 148, 190, 123, 116, 242, 62, 91, 154, 179, 189, 36, 36, 75, 189, 118, 173, 7, 189, 197, 223, 227, 61, 195, 93, 208, 61, 130, 195, 16, 62, 241, 255, 85, 190, 40, 118, 23, 62, 211, 190, 4, 62, 3, 157, 7, 190, 173, 146, 100, 189, 96, 163, 33, 62, 74, 87, 219, 62, 55, 216, 169, 189, 69, 110, 62, 189, 64, 43, 25, 191, 168, 115, 20, 62, 64, 37, 29, 191, 9, 222, 71, 190, 227, 43, 112, 190, 188, 2, 181, 191, 164, 68, 217, 190, 166, 17, 57, 190, 241, 28, 12, 189, 218, 230, 32, 190, 239, 45, 118, 61, 202, 127, 170, 60, 120, 150, 27, 62, 219, 240, 214, 189, 35, 231, 38, 61, 233, 142, 209, 189, 207, 25, 225, 187, 253, 69, 44, 190, 203, 132, 185, 59, 51, 2, 64, 190, 143, 215, 75, 190, 111, 100, 90, 189, 57, 114, 50, 62, 91, 229, 153, 187, 220, 83, 161, 189, 169, 238, 122, 188, 5, 218, 204, 61, 31, 179, 39, 62, 7, 252, 30, 189, 15, 172, 45, 190, 151, 165, 210, 59, 84, 36, 73, 190, 163, 54, 29, 62, 112, 144, 12, 62, 93, 69, 225, 61, 13, 30, 124, 189, 144, 13, 119, 61, 239, 73, 35, 61, 128, 240, 170, 190, 122, 152, 140, 62, 94, 50, 65, 189, 29, 130, 196, 59, 53, 21, 51, 62, 175, 80, 65, 62, 152, 146, 246, 61, 35, 70, 121, 190, 181, 243, 102, 62, 61, 171, 146, 61, 95, 221, 17, 62, 106, 167, 95, 60, 233, 175, 41, 61, 1, 205, 66, 62, 78, 250, 78, 189, 39, 136, 218, 189, 135, 124, 45, 188, 86, 191, 49, 61, 202, 240, 41, 60, 212, 105, 201, 61, 156, 72, 89, 190, 236, 166, 80, 62, 113, 175, 217, 61, 67, 84, 186, 61, 203, 120, 41, 190, 167, 93, 27, 62, 59, 41, 186, 187, 196, 44, 20, 61, 230, 78, 212, 189, 52, 219, 20, 190, 149, 192, 253, 60, 94, 249, 184, 61, 40, 11, 10, 191, 229, 140, 137, 189, 42, 229, 169, 61, 236, 11, 51, 190, 130, 137, 43, 190, 11, 173, 68, 189, 127, 66, 45, 190, 232, 95, 199, 189, 207, 132, 140, 61, 211, 181, 9, 190, 136, 220, 0, 190, 244, 48, 38, 61, 153, 191, 153, 189, 175, 109, 0, 61, 30, 150, 199, 61, 191, 61, 238, 189, 218, 182, 23, 62, 177, 62, 161, 189, 79, 92, 18, 61, 112, 156, 172, 189, 254, 27, 63, 190, 51, 161, 58, 190, 167, 170, 116, 59, 230, 214, 192, 61, 32, 140, 190, 61, 48, 250, 135, 189, 199, 118, 26, 61, 235, 3, 24, 61, 10, 155, 77, 60, 20, 99, 52, 189, 115, 161, 3, 189, 206, 174, 29, 59, 185, 69, 167, 60, 227, 181, 232, 188, 24, 115, 106, 190, 208, 174, 247, 190, 252, 191, 137, 62, 168, 118, 250, 60, 120, 165, 20, 190, 113, 235, 8, 189, 106, 158, 205, 190, 65, 167, 192, 61, 83, 57, 33, 190, 165, 8, 26, 62, 61, 154, 145, 190, 70, 116, 229, 61, 115, 107, 148, 188, 92, 226, 60, 61, 174, 190, 92, 62, 220, 254, 71, 62, 41, 142, 143, 62, 158, 233, 237, 190, 183, 69, 42, 62, 186, 238, 74, 62, 67, 240, 136, 60, 198, 28, 132, 190, 194, 44, 44, 61, 192, 150, 205, 189, 14, 62, 33, 62, 131, 16, 138, 188, 218, 58, 87, 61, 132, 75, 133, 61, 46, 228, 63, 60, 85, 247, 177, 61, 106, 181, 8, 62, 246, 213, 114, 61, 212, 178, 201, 188, 135, 53, 78, 62, 159, 246, 86, 189, 241, 88, 109, 62, 126, 241, 95, 62, 134, 206, 71, 191, 69, 236, 167, 189, 238, 29, 49, 189, 180, 207, 216, 61, 139, 9, 151, 61, 202, 193, 143, 62, 8, 69, 76, 189, 69, 120, 31, 189, 115, 28, 195, 190, 114, 143, 110, 62, 53, 82, 104, 61, 107, 183, 158, 62, 156, 22, 179, 189, 67, 173, 235, 189, 123, 216, 26, 190, 24, 73, 94, 62, 42, 166, 90, 62, 220, 92, 116, 190, 129, 64, 48, 62, 73, 250, 206, 190, 239, 218, 144, 62, 179, 33, 116, 189, 188, 111, 156, 61, 217, 187, 119, 190, 173, 104, 178, 190, 98, 113, 132, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 223, 134, 62, 56, 200, 218, 61, 131, 68, 18, 189, 227, 159, 36, 189, 172, 95, 193, 61, 178, 169, 201, 61, 159, 102, 6, 62, 47, 161, 0, 62, 241, 198, 145, 188, 0, 179, 16, 190, 59, 32, 184, 61, 65, 110, 129, 62, 175, 87, 207, 61, 126, 105, 252, 189, 55, 20, 53, 62, 103, 210, 211, 61, 47, 110, 114, 62, 41, 57, 130, 62, 170, 28, 116, 60, 63, 117, 56, 190, 247, 3, 93, 62, 179, 146, 48, 61, 90, 40, 65, 190, 108, 219, 105, 189, 168, 165, 254, 61, 181, 21, 69, 62, 152, 131, 174, 62, 128, 70, 65, 190, 108, 26, 176, 189, 47, 93, 183, 189, 161, 150, 40, 59, 199, 103, 87, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 219, 196, 62, 255, 7, 71, 63, 29, 130, 179, 189, 116, 139, 24, 190, 130, 145, 99, 189, 172, 208, 206, 189, 90, 111, 36, 62, 114, 228, 143, 191, 16, 51, 223, 62, 115, 251, 3, 63, 3, 148, 177, 190, 216, 13, 230, 190, 63, 41, 113, 189, 173, 69, 57, 188, 229, 235, 21, 63, 222, 26, 161, 62, 11, 44, 150, 61, 237, 69, 135, 62, 11, 221, 122, 190, 53, 231, 85, 62, 45, 2, 190, 190, 166, 73, 238, 188, 92, 84, 228, 190, 234, 183, 237, 62, 168, 30, 1, 62, 106, 94, 222, 62, 165, 148, 69, 191, 210, 92, 164, 189, 175, 34, 182, 189, 4, 163, 212, 61, 44, 170, 222, 62, 83, 201, 201, 190, 190, 135, 27, 190, 74, 229, 157, 62, 207, 38, 33, 191, 0, 243, 61, 189, 148, 224, 83, 190, 213, 34, 4, 190, 1, 214, 221, 188, 225, 47, 14, 61, 12, 87, 84, 61, 36, 213, 186, 62, 124, 230, 182, 188, 135, 217, 46, 190, 16, 95, 222, 190, 2, 122, 63, 62, 234, 206, 50, 62, 231, 234, 58, 59, 55, 165, 51, 190, 64, 2, 242, 189, 94, 196, 218, 62, 83, 243, 12, 190, 237, 153, 184, 190, 216, 125, 34, 62, 111, 9, 169, 62, 146, 221, 125, 189, 161, 71, 114, 190, 127, 193, 191, 189, 84, 139, 51, 62, 201, 24, 145, 60, 0, 238, 71, 190, 32, 173, 97, 61, 75, 162, 110, 189, 50, 208, 104, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 156, 80, 61, 30, 80, 143, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {78, 229, 48, 63, 39, 141, 50, 190, 84, 111, 82, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {215, 51, 81, 63, 74, 82, 197, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0076/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}