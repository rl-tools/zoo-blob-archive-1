// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 89, 139, 190, 248, 168, 186, 191, 121, 126, 74, 190, 201, 130, 158, 62, 144, 21, 225, 62, 189, 20, 163, 190, 228, 33, 43, 63, 183, 214, 90, 63, 229, 22, 78, 63, 235, 131, 220, 61, 104, 81, 83, 191, 14, 64, 218, 62, 66, 161, 94, 189, 230, 51, 188, 190, 128, 136, 41, 190, 162, 209, 52, 62, 249, 98, 88, 61, 146, 205, 1, 63, 168, 124, 21, 63, 23, 38, 20, 191, 42, 15, 69, 190, 232, 168, 114, 190, 72, 15, 180, 190, 186, 249, 0, 63, 23, 66, 124, 190, 77, 198, 100, 63, 137, 71, 0, 190, 174, 21, 13, 191, 194, 60, 180, 191, 39, 246, 178, 190, 9, 93, 196, 62, 52, 227, 47, 63, 77, 227, 21, 191, 122, 156, 196, 190, 169, 166, 66, 190, 249, 235, 218, 190, 191, 18, 51, 190, 49, 23, 12, 191, 204, 213, 168, 62, 245, 78, 155, 191, 154, 128, 59, 63, 101, 62, 24, 62, 2, 133, 13, 191, 20, 4, 121, 191, 237, 95, 87, 62, 109, 54, 94, 62, 244, 85, 51, 63, 64, 192, 75, 62, 237, 179, 95, 191, 18, 179, 143, 190, 110, 69, 239, 62, 225, 204, 135, 62, 68, 168, 176, 190, 220, 63, 26, 187, 188, 221, 140, 191, 245, 174, 134, 62, 103, 230, 146, 189, 164, 150, 216, 189, 77, 99, 195, 62, 237, 105, 254, 188, 78, 79, 141, 62, 70, 62, 59, 191, 162, 181, 4, 191, 77, 227, 69, 190, 107, 224, 153, 63, 46, 36, 98, 62, 223, 158, 10, 190, 72, 245, 162, 63, 128, 99, 53, 190, 220, 225, 202, 61, 12, 25, 172, 62, 192, 65, 211, 190, 135, 194, 59, 62, 243, 118, 226, 63, 199, 207, 201, 62, 160, 69, 160, 190, 22, 216, 114, 191, 182, 218, 194, 62, 181, 236, 147, 191, 247, 92, 250, 61, 238, 31, 172, 58, 149, 208, 154, 190, 177, 25, 173, 63, 105, 138, 156, 62, 95, 55, 49, 190, 150, 158, 78, 63, 157, 62, 139, 62, 147, 160, 33, 62, 55, 33, 164, 191, 80, 1, 177, 190, 17, 201, 49, 191, 167, 154, 157, 61, 241, 107, 122, 63, 120, 241, 16, 63, 155, 101, 51, 191, 157, 154, 72, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {3, 131, 46, 190, 61, 110, 79, 191, 217, 174, 229, 190, 75, 79, 11, 63, 192, 12, 74, 61, 144, 129, 48, 190, 49, 190, 227, 190, 237, 23, 10, 191, 188, 250, 177, 189, 73, 105, 13, 188, 120, 141, 181, 190, 51, 148, 17, 191, 84, 126, 244, 62, 18, 83, 88, 61, 36, 188, 140, 62, 101, 102, 75, 62, 156, 17, 210, 62, 194, 200, 5, 63, 49, 9, 114, 62, 221, 130, 236, 61, 121, 17, 239, 61, 74, 173, 218, 62, 243, 132, 227, 62, 46, 222, 33, 191, 234, 48, 110, 62, 249, 189, 178, 190, 1, 183, 40, 63, 107, 19, 112, 190, 7, 62, 174, 189, 115, 143, 33, 190, 49, 133, 198, 190, 251, 174, 188, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 52, 219, 61, 149, 239, 220, 188, 179, 3, 208, 190, 115, 58, 14, 62, 197, 6, 195, 60, 33, 83, 181, 190, 156, 219, 85, 62, 184, 33, 180, 190, 112, 11, 165, 62, 217, 54, 167, 190, 187, 134, 204, 190, 181, 127, 38, 190, 214, 137, 23, 62, 79, 143, 163, 62, 161, 174, 204, 61, 4, 83, 133, 62, 130, 124, 157, 61, 119, 167, 180, 62, 191, 37, 218, 190, 97, 110, 87, 188, 249, 174, 128, 61, 76, 165, 205, 60, 157, 193, 138, 190, 11, 149, 105, 62, 192, 100, 49, 190, 73, 169, 220, 61, 85, 164, 12, 62, 160, 55, 168, 62, 217, 142, 4, 190, 152, 190, 115, 61, 251, 161, 5, 62, 193, 237, 248, 61, 47, 26, 15, 191, 127, 186, 82, 189, 145, 253, 35, 191, 196, 86, 147, 190, 121, 248, 113, 190, 102, 131, 151, 191, 46, 97, 153, 62, 234, 255, 125, 191, 60, 69, 173, 61, 156, 149, 85, 191, 251, 215, 253, 190, 143, 100, 153, 190, 208, 224, 148, 189, 188, 148, 126, 62, 136, 212, 50, 190, 67, 18, 30, 190, 199, 241, 91, 61, 39, 55, 167, 190, 67, 172, 115, 62, 90, 111, 82, 62, 12, 206, 147, 190, 134, 248, 65, 62, 54, 153, 137, 190, 60, 146, 77, 62, 182, 203, 161, 188, 158, 242, 11, 62, 233, 38, 179, 61, 107, 217, 229, 62, 161, 6, 164, 189, 119, 246, 87, 62, 24, 238, 2, 191, 3, 212, 240, 62, 20, 234, 62, 190, 243, 142, 60, 189, 47, 13, 3, 190, 177, 108, 210, 61, 80, 192, 112, 62, 15, 51, 3, 191, 27, 25, 39, 191, 254, 225, 182, 190, 252, 244, 76, 191, 110, 62, 251, 190, 87, 73, 47, 62, 121, 252, 125, 190, 30, 147, 202, 188, 31, 169, 147, 61, 122, 18, 24, 62, 51, 63, 32, 62, 117, 232, 173, 188, 187, 208, 169, 62, 220, 83, 15, 191, 194, 208, 114, 62, 132, 42, 48, 61, 63, 189, 193, 61, 255, 171, 242, 60, 234, 39, 236, 189, 212, 83, 164, 60, 72, 87, 78, 189, 228, 141, 105, 190, 121, 60, 166, 191, 174, 27, 150, 191, 42, 70, 229, 191, 235, 10, 187, 60, 172, 107, 57, 190, 45, 228, 145, 191, 134, 169, 12, 61, 20, 1, 140, 62, 123, 115, 205, 188, 72, 112, 3, 62, 118, 121, 159, 62, 235, 6, 103, 191, 35, 57, 195, 61, 31, 92, 165, 189, 236, 28, 239, 61, 172, 131, 19, 189, 82, 26, 87, 62, 131, 111, 194, 61, 15, 198, 19, 190, 157, 58, 237, 61, 94, 75, 188, 188, 29, 106, 217, 189, 188, 55, 120, 61, 241, 225, 217, 62, 144, 4, 95, 62, 152, 219, 49, 188, 43, 243, 241, 60, 220, 20, 255, 61, 121, 239, 129, 190, 53, 50, 112, 61, 120, 36, 66, 190, 249, 128, 26, 189, 230, 45, 41, 191, 138, 245, 117, 187, 50, 244, 181, 190, 90, 83, 1, 62, 204, 247, 135, 191, 41, 51, 248, 62, 128, 28, 29, 190, 217, 45, 193, 190, 130, 133, 165, 189, 228, 143, 132, 61, 177, 205, 157, 62, 112, 12, 132, 190, 37, 69, 157, 62, 143, 62, 211, 58, 120, 208, 235, 61, 53, 138, 241, 61, 71, 252, 62, 190, 173, 88, 6, 190, 88, 81, 147, 189, 233, 88, 46, 62, 251, 148, 163, 61, 5, 58, 14, 190, 31, 118, 150, 61, 188, 211, 114, 186, 145, 87, 188, 61, 197, 88, 70, 62, 81, 2, 21, 62, 21, 135, 226, 61, 127, 167, 48, 60, 55, 190, 89, 190, 49, 50, 230, 188, 214, 147, 3, 62, 161, 93, 150, 191, 181, 94, 175, 190, 42, 171, 206, 61, 139, 96, 241, 189, 193, 43, 21, 191, 235, 5, 87, 190, 91, 36, 99, 61, 85, 217, 114, 62, 23, 8, 15, 62, 182, 189, 7, 61, 175, 170, 117, 61, 188, 37, 49, 190, 1, 69, 192, 62, 158, 126, 5, 191, 218, 86, 124, 62, 87, 254, 91, 190, 81, 150, 125, 190, 48, 52, 87, 188, 232, 228, 237, 190, 142, 53, 34, 62, 95, 108, 154, 190, 107, 140, 70, 61, 222, 164, 200, 61, 118, 102, 159, 189, 83, 177, 51, 191, 136, 52, 229, 189, 167, 235, 179, 190, 197, 229, 108, 190, 147, 113, 54, 190, 142, 82, 135, 190, 241, 124, 136, 189, 14, 59, 171, 190, 63, 68, 18, 191, 77, 138, 13, 59, 19, 235, 140, 189, 183, 240, 165, 189, 250, 2, 131, 57, 32, 191, 91, 191, 79, 86, 184, 62, 48, 255, 11, 190, 28, 178, 145, 61, 249, 180, 57, 61, 13, 203, 115, 190, 186, 26, 126, 61, 42, 43, 65, 190, 210, 65, 160, 62, 178, 83, 229, 190, 166, 214, 174, 189, 65, 175, 122, 61, 87, 253, 60, 189, 22, 234, 227, 62, 2, 18, 164, 190, 139, 152, 8, 62, 123, 110, 201, 189, 59, 39, 11, 190, 35, 240, 98, 61, 241, 55, 187, 61, 15, 222, 37, 189, 60, 68, 111, 62, 35, 40, 30, 60, 52, 95, 109, 62, 238, 51, 149, 62, 227, 241, 74, 62, 86, 193, 102, 61, 232, 194, 69, 63, 131, 19, 166, 62, 142, 6, 70, 61, 70, 197, 103, 62, 156, 238, 123, 62, 234, 67, 228, 190, 192, 181, 145, 190, 220, 67, 141, 190, 201, 28, 27, 188, 50, 172, 95, 191, 147, 7, 44, 63, 141, 98, 194, 189, 200, 201, 243, 62, 174, 204, 61, 191, 17, 20, 150, 62, 28, 198, 230, 61, 78, 130, 78, 189, 27, 196, 94, 62, 66, 221, 221, 62, 24, 149, 179, 61, 189, 249, 252, 191, 175, 158, 137, 62, 132, 229, 141, 189, 205, 187, 66, 62, 122, 232, 94, 191, 254, 197, 11, 191, 93, 142, 171, 62, 52, 222, 161, 62, 42, 153, 24, 190, 63, 209, 217, 191, 136, 234, 129, 60, 118, 163, 108, 62, 43, 174, 183, 191, 172, 137, 228, 189, 154, 150, 187, 190, 218, 191, 23, 191, 80, 69, 6, 190, 159, 173, 1, 191, 91, 185, 149, 190, 209, 67, 142, 189, 130, 89, 246, 190, 100, 97, 194, 190, 83, 178, 67, 191, 163, 246, 113, 187, 144, 197, 10, 191, 167, 159, 125, 61, 88, 208, 16, 191, 34, 142, 10, 191, 37, 178, 232, 190, 194, 95, 136, 189, 74, 39, 139, 62, 159, 194, 209, 189, 90, 92, 228, 58, 243, 7, 37, 62, 156, 164, 118, 190, 249, 182, 150, 62, 246, 239, 245, 189, 226, 35, 172, 190, 42, 26, 56, 62, 81, 125, 209, 189, 54, 188, 98, 61, 122, 120, 174, 189, 182, 39, 126, 60, 221, 54, 99, 62, 162, 106, 166, 62, 120, 217, 250, 186, 251, 96, 171, 189, 112, 151, 41, 191, 206, 218, 144, 61, 92, 224, 97, 191, 208, 124, 66, 62, 253, 128, 46, 190, 137, 153, 219, 190, 11, 178, 163, 61, 65, 94, 19, 189, 186, 167, 18, 63, 181, 240, 30, 62, 198, 193, 174, 61, 4, 233, 128, 190, 179, 112, 135, 62, 178, 183, 97, 189, 239, 179, 209, 190, 216, 152, 33, 191, 236, 84, 69, 191, 162, 21, 23, 62, 77, 213, 121, 60, 5, 165, 127, 188, 225, 46, 143, 189, 148, 241, 229, 61, 203, 147, 146, 62, 202, 58, 45, 191, 11, 128, 74, 190, 141, 160, 181, 60, 131, 96, 127, 191, 221, 136, 133, 61, 1, 239, 3, 191, 176, 174, 190, 190, 143, 61, 83, 190, 217, 120, 188, 61, 137, 136, 73, 190, 80, 72, 88, 63, 50, 250, 89, 61, 100, 23, 17, 190, 174, 94, 38, 191, 161, 173, 157, 62, 196, 40, 72, 189, 85, 203, 179, 61, 36, 223, 160, 188, 136, 236, 149, 187, 182, 229, 191, 61, 176, 50, 89, 62, 133, 137, 118, 190, 221, 117, 215, 61, 215, 127, 3, 61, 177, 132, 236, 188, 239, 111, 132, 62, 122, 31, 179, 191, 164, 157, 158, 189, 192, 20, 230, 189, 195, 118, 17, 190, 16, 4, 197, 61, 117, 7, 219, 189, 5, 166, 86, 62, 151, 208, 7, 62, 204, 206, 136, 190, 9, 116, 247, 191, 208, 148, 133, 61, 89, 134, 214, 61, 221, 235, 49, 191, 218, 48, 175, 190, 119, 163, 111, 61, 206, 199, 188, 59, 124, 110, 31, 190, 233, 153, 180, 190, 236, 26, 128, 189, 179, 58, 131, 62, 74, 91, 141, 62, 175, 26, 69, 61, 27, 11, 247, 61, 76, 110, 174, 190, 219, 185, 19, 61, 193, 72, 62, 189, 168, 123, 206, 61, 191, 2, 175, 61, 218, 125, 27, 190, 71, 171, 176, 61, 65, 45, 17, 191, 184, 154, 13, 60, 44, 195, 119, 62, 129, 7, 23, 62, 247, 49, 253, 62, 0, 223, 147, 190, 182, 124, 47, 190, 72, 141, 221, 189, 218, 168, 16, 62, 29, 9, 121, 188, 156, 158, 31, 190, 14, 78, 15, 62, 196, 229, 21, 188, 199, 217, 205, 190, 134, 169, 159, 191, 125, 91, 58, 190, 123, 84, 220, 61, 51, 181, 208, 190, 21, 186, 26, 191, 243, 128, 77, 62, 157, 15, 21, 190, 70, 177, 143, 61, 123, 156, 103, 61, 113, 162, 1, 62, 67, 186, 160, 62, 62, 171, 71, 190, 234, 93, 157, 62, 69, 121, 163, 189, 95, 14, 62, 62, 176, 94, 173, 61, 228, 239, 136, 61, 158, 193, 1, 62, 233, 169, 114, 190, 233, 7, 162, 189, 131, 172, 235, 62, 65, 120, 143, 188, 168, 190, 219, 62, 189, 14, 172, 190, 8, 46, 159, 61, 101, 25, 171, 61, 72, 11, 111, 62, 5, 110, 236, 61, 171, 153, 226, 189, 189, 21, 185, 188, 56, 87, 76, 190, 101, 26, 88, 62, 173, 247, 239, 189, 36, 245, 169, 190, 68, 102, 6, 61, 3, 207, 16, 190, 40, 75, 153, 187, 45, 221, 47, 189, 237, 76, 199, 61, 4, 222, 219, 190, 88, 164, 149, 62, 104, 44, 180, 60, 22, 38, 43, 61, 138, 151, 24, 62, 47, 104, 27, 190, 118, 29, 193, 188, 144, 88, 157, 60, 239, 64, 67, 189, 118, 58, 174, 188, 215, 250, 125, 62, 241, 181, 75, 190, 190, 203, 191, 61, 29, 156, 255, 188, 97, 182, 168, 189, 188, 26, 229, 61, 28, 126, 41, 62, 25, 220, 12, 190, 29, 217, 56, 62, 100, 73, 171, 190, 202, 74, 248, 189, 211, 84, 142, 189, 14, 8, 133, 190, 119, 149, 58, 62, 133, 162, 45, 190, 88, 161, 2, 190, 21, 158, 53, 190, 101, 108, 125, 62, 180, 27, 130, 190, 35, 73, 240, 62, 208, 101, 166, 62, 249, 229, 18, 190, 40, 178, 42, 191, 51, 141, 41, 62, 29, 158, 49, 190, 73, 250, 164, 190, 147, 18, 178, 187, 146, 232, 170, 190, 138, 23, 136, 62, 49, 141, 248, 190, 26, 178, 49, 190, 143, 158, 205, 190, 245, 89, 237, 188, 30, 237, 159, 62, 15, 251, 243, 62, 112, 216, 189, 61, 206, 138, 150, 62, 171, 192, 8, 62, 100, 126, 0, 191, 223, 225, 231, 189, 84, 30, 101, 189, 71, 215, 215, 190, 206, 121, 210, 190, 35, 33, 79, 190, 51, 128, 224, 190, 67, 75, 63, 62, 181, 150, 203, 62, 102, 182, 43, 63, 2, 98, 246, 189, 211, 169, 28, 61, 158, 166, 11, 62, 248, 185, 40, 62, 162, 138, 245, 61, 84, 103, 159, 190, 33, 204, 86, 190, 54, 182, 51, 62, 29, 91, 203, 61, 50, 152, 164, 189, 135, 183, 189, 62, 239, 121, 155, 189, 150, 214, 58, 62, 182, 163, 175, 190, 132, 184, 217, 61, 173, 108, 85, 189, 3, 169, 229, 61, 182, 226, 23, 191, 173, 113, 203, 62, 120, 161, 20, 189, 201, 227, 197, 61, 45, 168, 21, 62, 141, 141, 179, 191, 88, 47, 112, 60, 224, 242, 114, 61, 253, 124, 244, 190, 80, 255, 52, 190, 199, 97, 53, 190, 215, 30, 74, 191, 164, 2, 95, 62, 2, 117, 11, 191, 85, 110, 216, 190, 95, 157, 61, 191, 159, 215, 140, 62, 220, 89, 234, 189, 51, 10, 157, 62, 78, 222, 83, 62, 150, 200, 32, 61, 143, 103, 183, 61, 63, 61, 3, 62, 140, 92, 4, 62, 131, 195, 124, 190, 164, 29, 7, 62, 112, 27, 93, 190, 10, 10, 10, 62, 31, 211, 18, 189, 128, 34, 254, 59, 31, 7, 35, 190, 90, 153, 37, 62, 112, 63, 165, 62, 29, 148, 240, 189, 32, 151, 87, 61, 178, 36, 164, 189, 86, 162, 66, 62, 181, 201, 209, 190, 201, 15, 22, 190, 59, 117, 236, 60, 199, 118, 30, 62, 63, 67, 164, 61, 176, 172, 77, 60, 96, 195, 214, 189, 132, 139, 39, 189, 176, 26, 217, 189, 98, 248, 9, 63, 40, 0, 239, 189, 243, 38, 106, 57, 169, 127, 148, 189, 19, 77, 148, 62, 143, 4, 96, 62, 71, 133, 59, 190, 144, 101, 224, 189, 131, 233, 205, 189, 18, 29, 49, 190, 47, 247, 83, 190, 181, 162, 27, 62, 50, 129, 144, 190, 10, 181, 23, 190, 222, 62, 28, 190, 122, 150, 255, 190, 232, 224, 27, 190, 232, 245, 211, 189, 191, 224, 112, 61, 144, 142, 11, 62, 183, 225, 132, 62, 86, 125, 141, 62, 85, 51, 235, 61, 90, 172, 226, 189, 40, 37, 63, 190, 175, 82, 45, 62, 224, 157, 71, 190, 69, 171, 249, 188, 125, 47, 167, 61, 210, 230, 85, 189, 120, 64, 155, 189, 117, 114, 134, 62, 160, 226, 173, 62, 57, 239, 16, 62, 85, 74, 60, 190, 182, 76, 171, 190, 117, 88, 71, 62, 102, 4, 12, 63, 186, 108, 3, 191, 214, 238, 234, 62, 255, 206, 114, 189, 56, 20, 49, 188, 78, 158, 179, 62, 177, 24, 217, 190, 181, 26, 105, 61, 25, 113, 15, 58, 60, 86, 181, 62, 90, 20, 238, 61, 23, 216, 22, 189, 22, 82, 214, 61, 121, 201, 142, 191, 200, 107, 155, 190, 115, 178, 138, 62, 125, 80, 159, 190, 186, 205, 116, 189, 171, 183, 116, 62, 55, 46, 137, 62, 64, 164, 39, 190, 96, 178, 42, 62, 146, 245, 133, 62, 239, 19, 143, 190, 23, 227, 72, 62, 19, 111, 127, 62, 195, 236, 152, 190, 93, 135, 82, 191, 84, 92, 221, 188, 160, 125, 199, 61, 243, 17, 191, 189, 111, 0, 28, 191, 189, 188, 51, 191, 179, 70, 47, 62, 173, 23, 41, 190, 155, 219, 57, 191, 58, 47, 144, 61, 234, 202, 147, 189, 152, 215, 206, 62, 147, 82, 137, 61, 79, 142, 137, 62, 140, 71, 104, 190, 161, 160, 137, 62, 25, 28, 186, 188, 6, 203, 233, 190, 137, 31, 143, 191, 41, 68, 103, 190, 145, 16, 142, 190, 63, 137, 35, 61, 173, 195, 192, 59, 37, 6, 80, 190, 228, 33, 171, 189, 156, 36, 179, 61, 66, 66, 94, 190, 171, 20, 22, 61, 20, 53, 145, 62, 59, 175, 233, 190, 102, 209, 28, 190, 42, 168, 133, 190, 59, 118, 134, 190, 108, 61, 177, 190, 11, 13, 0, 190, 42, 8, 141, 190, 242, 9, 197, 62, 157, 114, 152, 189, 110, 41, 162, 60, 119, 140, 18, 62, 122, 74, 44, 61, 162, 136, 8, 190, 41, 147, 183, 62, 3, 11, 18, 191, 181, 119, 16, 190, 31, 253, 53, 190, 163, 155, 202, 189, 251, 67, 99, 59, 153, 252, 14, 62, 148, 180, 199, 189, 65, 136, 241, 189, 134, 174, 227, 190, 64, 190, 155, 62, 102, 35, 19, 190, 189, 44, 130, 62, 202, 73, 6, 189, 224, 198, 183, 60, 163, 98, 178, 189, 129, 172, 158, 61, 197, 206, 74, 62, 192, 23, 169, 60, 67, 30, 118, 62, 204, 180, 21, 191, 38, 121, 251, 61, 158, 64, 175, 190, 158, 182, 199, 189, 101, 0, 112, 190, 251, 250, 92, 190, 216, 185, 78, 191, 28, 1, 105, 61, 14, 83, 20, 62, 190, 2, 96, 189, 232, 128, 44, 190, 144, 4, 169, 189, 23, 190, 22, 62, 187, 120, 134, 189, 240, 198, 88, 60, 204, 19, 214, 59, 79, 159, 213, 189, 108, 149, 218, 61, 171, 247, 50, 190, 16, 40, 203, 60, 72, 80, 69, 189, 92, 186, 102, 61, 174, 18, 74, 190, 60, 156, 249, 188, 238, 206, 194, 61, 139, 253, 178, 189, 100, 112, 222, 61, 77, 93, 78, 190, 130, 60, 61, 61, 195, 210, 213, 188, 164, 61, 122, 189, 202, 198, 69, 190, 55, 18, 16, 190, 96, 108, 151, 189, 179, 39, 71, 189, 245, 206, 226, 61, 107, 108, 4, 62, 18, 9, 253, 189, 12, 159, 246, 189, 123, 191, 148, 189, 23, 39, 57, 189, 249, 166, 55, 191, 86, 96, 98, 62, 83, 139, 151, 189, 36, 10, 163, 190, 35, 102, 104, 62, 72, 163, 215, 188, 186, 222, 30, 190, 166, 108, 90, 61, 175, 79, 206, 190, 173, 172, 20, 191, 176, 176, 85, 61, 57, 78, 129, 62, 130, 32, 34, 62, 193, 81, 249, 190, 92, 184, 242, 61, 169, 52, 74, 62, 180, 57, 191, 190, 37, 224, 165, 190, 219, 136, 230, 189, 107, 82, 98, 190, 87, 139, 221, 190, 28, 154, 174, 190, 210, 149, 200, 190, 19, 91, 179, 62, 151, 16, 220, 190, 162, 166, 18, 190, 238, 44, 29, 190, 32, 200, 253, 61, 241, 74, 165, 61, 244, 176, 75, 62, 188, 191, 33, 63, 26, 235, 250, 189, 68, 194, 247, 190, 148, 91, 93, 62, 31, 129, 1, 190, 66, 60, 84, 190, 250, 209, 68, 191, 243, 28, 115, 190, 198, 164, 248, 62, 219, 209, 107, 190, 57, 44, 69, 191, 89, 174, 80, 191, 190, 162, 150, 62, 137, 244, 188, 62, 88, 211, 156, 61, 166, 203, 33, 187, 178, 14, 57, 61, 65, 161, 26, 62, 10, 174, 68, 60, 113, 47, 17, 62, 141, 188, 238, 190, 8, 191, 87, 59, 219, 252, 134, 189, 182, 144, 167, 189, 194, 111, 107, 189, 128, 126, 244, 61, 153, 102, 151, 62, 68, 151, 61, 62, 37, 80, 68, 189, 117, 176, 81, 190, 2, 40, 173, 59, 161, 54, 219, 190, 134, 97, 79, 190, 80, 219, 8, 62, 162, 218, 68, 190, 108, 61, 18, 61, 37, 231, 67, 61, 127, 175, 44, 62, 54, 190, 162, 188, 193, 183, 196, 189, 173, 252, 1, 189, 228, 244, 31, 188, 44, 143, 71, 62, 20, 218, 225, 61, 37, 76, 57, 61, 101, 75, 65, 191, 183, 148, 20, 62, 151, 107, 0, 63, 163, 60, 48, 189, 49, 247, 201, 62, 98, 244, 209, 190, 118, 128, 210, 61, 105, 137, 14, 62, 172, 138, 17, 191, 98, 131, 115, 60, 39, 89, 54, 62, 178, 112, 191, 190, 209, 57, 210, 61, 173, 30, 234, 190, 97, 44, 226, 191, 44, 5, 100, 191, 95, 85, 230, 189, 9, 97, 50, 189, 130, 161, 38, 62, 89, 150, 149, 61, 209, 148, 105, 61, 223, 16, 245, 190, 123, 9, 155, 62, 137, 13, 138, 61, 77, 5, 224, 190, 8, 214, 71, 189, 115, 61, 3, 191, 226, 11, 228, 189, 46, 17, 229, 190, 64, 21, 98, 60, 150, 92, 226, 189, 224, 126, 78, 62, 162, 79, 151, 62, 43, 232, 197, 62, 252, 210, 135, 62, 122, 70, 1, 62, 170, 205, 235, 61, 19, 79, 220, 190, 250, 25, 88, 189, 24, 101, 96, 187, 74, 52, 68, 190, 82, 15, 92, 190, 32, 49, 60, 61, 68, 98, 150, 190, 132, 54, 10, 62, 129, 25, 172, 62, 31, 197, 29, 60, 168, 141, 111, 190, 137, 181, 52, 61, 249, 119, 104, 62, 202, 105, 205, 61, 209, 56, 38, 62, 211, 43, 208, 190, 72, 196, 5, 190, 219, 250, 198, 190, 23, 28, 159, 60, 194, 52, 140, 61, 215, 214, 36, 191, 70, 179, 190, 60, 90, 60, 80, 190, 107, 130, 17, 63, 26, 207, 40, 189, 175, 72, 65, 189, 188, 23, 141, 189, 44, 57, 20, 61, 166, 97, 60, 61, 25, 93, 71, 62, 41, 57, 7, 191, 71, 23, 20, 62, 141, 95, 26, 62, 139, 100, 126, 188, 230, 68, 72, 189, 6, 206, 146, 62, 229, 191, 241, 62, 40, 244, 25, 190, 203, 253, 144, 61, 190, 2, 139, 191, 218, 28, 78, 62, 15, 96, 80, 191, 255, 81, 83, 190, 229, 191, 140, 190, 108, 129, 201, 191, 203, 204, 11, 191, 166, 17, 57, 190, 241, 28, 12, 189, 218, 230, 32, 190, 239, 45, 118, 61, 202, 127, 170, 60, 120, 150, 27, 62, 219, 240, 214, 189, 35, 231, 38, 61, 233, 142, 209, 189, 207, 25, 225, 187, 253, 69, 44, 190, 203, 132, 185, 59, 51, 2, 64, 190, 143, 215, 75, 190, 111, 100, 90, 189, 57, 114, 50, 62, 91, 229, 153, 187, 220, 83, 161, 189, 169, 238, 122, 188, 5, 218, 204, 61, 31, 179, 39, 62, 7, 252, 30, 189, 15, 172, 45, 190, 151, 165, 210, 59, 84, 36, 73, 190, 163, 54, 29, 62, 112, 144, 12, 62, 93, 69, 225, 61, 13, 30, 124, 189, 144, 13, 119, 61, 239, 73, 35, 61, 128, 240, 170, 190, 7, 244, 157, 62, 207, 81, 50, 189, 49, 16, 80, 60, 31, 50, 42, 62, 234, 29, 77, 62, 226, 37, 2, 62, 199, 163, 185, 190, 148, 61, 72, 62, 26, 59, 78, 61, 4, 10, 59, 62, 34, 38, 182, 60, 183, 0, 50, 188, 104, 236, 45, 62, 40, 178, 183, 190, 196, 73, 210, 189, 183, 22, 198, 60, 216, 141, 134, 60, 211, 24, 43, 61, 112, 27, 245, 60, 92, 188, 25, 190, 207, 140, 128, 62, 163, 97, 164, 61, 181, 191, 243, 61, 153, 44, 94, 190, 81, 225, 19, 62, 202, 233, 83, 59, 32, 162, 42, 190, 207, 23, 196, 190, 40, 6, 52, 190, 93, 173, 129, 188, 140, 132, 178, 61, 81, 109, 28, 191, 229, 140, 137, 189, 42, 229, 169, 61, 236, 11, 51, 190, 130, 137, 43, 190, 11, 173, 68, 189, 127, 66, 45, 190, 232, 95, 199, 189, 207, 132, 140, 61, 211, 181, 9, 190, 136, 220, 0, 190, 244, 48, 38, 61, 153, 191, 153, 189, 175, 109, 0, 61, 30, 150, 199, 61, 191, 61, 238, 189, 218, 182, 23, 62, 177, 62, 161, 189, 79, 92, 18, 61, 112, 156, 172, 189, 254, 27, 63, 190, 51, 161, 58, 190, 167, 170, 116, 59, 230, 214, 192, 61, 32, 140, 190, 61, 48, 250, 135, 189, 199, 118, 26, 61, 235, 3, 24, 61, 10, 155, 77, 60, 20, 99, 52, 189, 115, 161, 3, 189, 206, 174, 29, 59, 185, 69, 167, 60, 92, 69, 28, 62, 195, 15, 154, 189, 216, 70, 5, 191, 70, 47, 163, 62, 77, 140, 133, 61, 203, 66, 53, 190, 49, 30, 24, 60, 26, 200, 191, 190, 112, 183, 222, 61, 233, 242, 113, 190, 7, 65, 24, 62, 41, 158, 100, 190, 134, 172, 34, 62, 239, 201, 165, 62, 104, 115, 41, 62, 249, 193, 42, 62, 75, 75, 125, 62, 34, 38, 161, 62, 15, 169, 54, 191, 104, 206, 233, 60, 240, 93, 65, 62, 157, 239, 171, 189, 217, 174, 152, 190, 210, 26, 76, 62, 201, 34, 149, 190, 213, 156, 76, 62, 145, 89, 17, 62, 234, 60, 40, 62, 106, 209, 38, 190, 89, 6, 238, 188, 18, 95, 145, 61, 215, 49, 53, 62, 172, 84, 86, 189, 144, 48, 10, 190, 237, 222, 10, 62, 21, 218, 179, 188, 229, 232, 70, 62, 204, 159, 113, 62, 196, 216, 120, 191, 33, 3, 5, 190, 88, 183, 193, 189, 42, 158, 209, 60, 141, 214, 179, 61, 229, 161, 31, 62, 137, 28, 8, 189, 12, 9, 149, 190, 213, 146, 61, 190, 179, 220, 120, 62, 92, 214, 106, 60, 210, 170, 167, 62, 163, 118, 77, 190, 30, 30, 136, 189, 87, 154, 59, 190, 55, 249, 77, 62, 78, 201, 52, 62, 187, 172, 188, 190, 217, 237, 36, 62, 18, 207, 169, 190, 62, 197, 35, 62, 4, 170, 219, 190, 105, 59, 88, 189, 248, 12, 250, 190, 39, 37, 191, 190, 230, 144, 211, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 53, 152, 62, 254, 133, 179, 61, 148, 29, 206, 186, 93, 209, 228, 60, 239, 50, 1, 62, 160, 254, 159, 60, 101, 157, 156, 60, 207, 247, 172, 61, 217, 153, 138, 188, 4, 108, 103, 190, 12, 86, 149, 61, 18, 126, 110, 62, 199, 219, 35, 62, 50, 216, 14, 190, 37, 197, 100, 62, 139, 18, 64, 62, 210, 131, 72, 62, 58, 126, 107, 62, 245, 78, 84, 61, 88, 2, 19, 190, 234, 82, 87, 62, 134, 250, 57, 60, 138, 143, 67, 190, 235, 67, 216, 61, 208, 152, 24, 62, 172, 109, 104, 62, 164, 107, 187, 62, 128, 70, 65, 190, 225, 99, 174, 189, 47, 93, 183, 189, 182, 105, 44, 61, 27, 55, 140, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 153, 194, 62, 167, 19, 151, 63, 98, 185, 153, 189, 14, 251, 137, 190, 168, 116, 62, 190, 54, 72, 43, 190, 148, 217, 110, 62, 57, 118, 157, 191, 64, 118, 79, 63, 133, 142, 129, 63, 252, 254, 230, 190, 211, 161, 237, 190, 128, 62, 89, 189, 28, 163, 20, 190, 0, 90, 119, 63, 38, 177, 163, 63, 125, 39, 124, 61, 87, 91, 78, 62, 201, 160, 27, 191, 252, 2, 176, 62, 128, 150, 172, 190, 242, 166, 13, 189, 62, 110, 145, 191, 112, 185, 43, 63, 99, 179, 4, 62, 27, 126, 252, 62, 225, 223, 95, 191, 210, 92, 164, 189, 59, 176, 125, 189, 4, 163, 212, 61, 24, 141, 248, 62, 164, 69, 174, 190, 217, 136, 247, 189, 178, 255, 197, 62, 53, 202, 133, 191, 34, 114, 68, 189, 57, 98, 138, 190, 237, 37, 129, 190, 245, 213, 8, 189, 17, 230, 48, 190, 18, 54, 182, 189, 126, 149, 208, 62, 47, 178, 206, 189, 145, 213, 37, 190, 198, 37, 235, 190, 143, 235, 169, 62, 163, 140, 185, 62, 29, 154, 3, 62, 180, 179, 102, 190, 206, 148, 7, 190, 205, 198, 29, 63, 87, 83, 109, 190, 162, 104, 156, 190, 225, 165, 25, 62, 106, 242, 48, 63, 239, 6, 146, 61, 37, 3, 22, 191, 46, 84, 114, 189, 72, 228, 51, 62, 201, 24, 145, 60, 26, 34, 38, 190, 32, 173, 97, 61, 81, 42, 70, 189, 56, 155, 66, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 30, 81, 61, 180, 136, 217, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {9, 39, 135, 190, 78, 21, 91, 191, 3, 74, 97, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {218, 45, 83, 64, 246, 105, 218, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0076/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}