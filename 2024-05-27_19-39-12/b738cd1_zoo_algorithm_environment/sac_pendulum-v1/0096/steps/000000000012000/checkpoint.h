// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 56, 153, 62, 164, 233, 115, 190, 187, 234, 78, 188, 249, 74, 161, 190, 200, 5, 179, 63, 37, 74, 156, 62, 69, 95, 174, 62, 82, 28, 16, 191, 161, 20, 100, 61, 16, 146, 243, 190, 62, 125, 117, 191, 11, 133, 58, 190, 140, 82, 33, 63, 66, 163, 134, 191, 157, 129, 141, 190, 55, 221, 253, 62, 89, 15, 142, 191, 199, 184, 125, 190, 189, 61, 113, 190, 41, 176, 61, 63, 38, 153, 6, 191, 164, 252, 207, 190, 61, 127, 200, 62, 79, 163, 39, 63, 247, 13, 174, 60, 244, 126, 168, 63, 163, 90, 228, 62, 22, 74, 68, 62, 191, 9, 89, 191, 116, 53, 148, 59, 201, 53, 177, 190, 210, 81, 155, 191, 45, 42, 140, 190, 171, 101, 12, 191, 80, 53, 141, 63, 49, 241, 247, 62, 194, 205, 85, 191, 78, 62, 195, 190, 242, 84, 103, 189, 123, 52, 163, 190, 78, 125, 232, 62, 76, 170, 0, 191, 95, 53, 60, 190, 222, 244, 135, 61, 169, 238, 88, 63, 7, 82, 28, 62, 94, 185, 106, 191, 79, 174, 246, 62, 206, 17, 26, 63, 204, 126, 123, 63, 34, 138, 179, 62, 195, 222, 13, 191, 244, 27, 245, 62, 159, 118, 199, 189, 169, 186, 197, 62, 122, 239, 150, 191, 69, 17, 7, 191, 220, 98, 19, 63, 13, 94, 112, 63, 159, 117, 186, 62, 106, 90, 162, 190, 122, 175, 170, 63, 3, 30, 155, 62, 237, 59, 146, 191, 232, 250, 39, 190, 178, 70, 228, 187, 91, 24, 19, 191, 187, 69, 241, 62, 14, 155, 236, 61, 62, 88, 87, 63, 92, 40, 43, 191, 232, 156, 204, 190, 252, 154, 94, 61, 201, 162, 26, 191, 79, 222, 35, 189, 180, 173, 255, 190, 242, 148, 23, 63, 3, 128, 84, 190, 62, 204, 206, 61, 136, 151, 74, 63, 191, 126, 5, 191, 221, 214, 152, 190, 57, 65, 232, 62, 26, 161, 136, 61, 50, 213, 54, 62, 191, 142, 26, 63, 108, 41, 23, 62, 168, 79, 125, 62, 89, 123, 234, 190, 132, 146, 122, 62, 163, 50, 32, 62, 166, 49, 204, 191, 212, 200, 180, 190, 211, 144, 122, 63, 190, 166, 80, 63, 211, 142, 164, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 147, 19, 191, 178, 28, 141, 189, 104, 4, 243, 62, 115, 228, 166, 62, 18, 230, 149, 190, 189, 145, 196, 189, 115, 122, 218, 190, 232, 192, 150, 190, 59, 202, 71, 62, 158, 188, 56, 189, 115, 156, 18, 63, 151, 223, 186, 190, 217, 43, 134, 61, 202, 50, 134, 190, 248, 18, 113, 191, 219, 52, 40, 62, 238, 229, 138, 62, 104, 54, 12, 63, 124, 239, 206, 62, 45, 35, 202, 190, 244, 48, 17, 190, 71, 119, 6, 190, 99, 15, 36, 63, 64, 45, 80, 191, 83, 53, 12, 63, 222, 226, 175, 190, 213, 104, 117, 62, 123, 41, 188, 62, 239, 197, 223, 62, 236, 235, 222, 189, 106, 5, 62, 62, 25, 189, 128, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 48, 218, 61, 71, 42, 254, 190, 201, 171, 89, 188, 147, 89, 179, 61, 252, 12, 30, 191, 214, 118, 6, 190, 119, 128, 21, 62, 218, 30, 3, 191, 89, 104, 171, 190, 139, 162, 248, 62, 118, 64, 191, 189, 86, 114, 132, 190, 207, 248, 19, 62, 208, 205, 102, 62, 58, 51, 188, 190, 166, 252, 192, 189, 73, 110, 52, 191, 133, 134, 76, 62, 73, 58, 250, 61, 200, 43, 153, 188, 184, 82, 222, 190, 166, 88, 151, 190, 50, 148, 143, 189, 106, 88, 197, 189, 201, 115, 147, 189, 118, 137, 135, 62, 10, 166, 198, 189, 91, 188, 176, 60, 32, 233, 99, 190, 17, 130, 178, 190, 179, 1, 22, 62, 186, 106, 157, 189, 161, 198, 190, 61, 200, 83, 149, 62, 92, 242, 159, 62, 130, 229, 221, 190, 168, 11, 124, 190, 78, 250, 165, 61, 113, 97, 245, 61, 186, 114, 40, 188, 62, 151, 52, 61, 156, 189, 104, 60, 167, 236, 204, 61, 19, 47, 21, 190, 48, 222, 228, 189, 69, 170, 184, 60, 168, 34, 169, 189, 223, 158, 254, 189, 91, 30, 240, 62, 212, 165, 185, 189, 240, 107, 78, 62, 137, 67, 186, 61, 134, 190, 40, 62, 43, 25, 112, 191, 161, 40, 180, 190, 162, 139, 72, 62, 106, 252, 237, 61, 117, 41, 119, 61, 115, 114, 170, 61, 169, 228, 198, 61, 215, 72, 183, 62, 149, 193, 83, 190, 29, 243, 184, 189, 65, 226, 155, 62, 9, 145, 244, 61, 13, 138, 231, 61, 219, 33, 45, 62, 1, 85, 138, 62, 160, 82, 18, 63, 65, 53, 210, 62, 66, 213, 157, 191, 89, 179, 127, 62, 109, 13, 27, 190, 13, 182, 159, 62, 127, 219, 127, 190, 111, 62, 166, 189, 233, 73, 145, 62, 0, 71, 214, 190, 184, 251, 120, 189, 18, 211, 83, 62, 48, 45, 9, 191, 87, 153, 88, 190, 59, 107, 192, 189, 6, 96, 78, 191, 83, 106, 22, 61, 31, 202, 54, 62, 175, 93, 125, 189, 11, 192, 192, 61, 217, 159, 43, 62, 189, 57, 99, 61, 89, 32, 11, 62, 64, 233, 255, 188, 156, 58, 197, 189, 102, 197, 223, 186, 129, 226, 31, 190, 89, 227, 58, 61, 81, 92, 79, 189, 226, 109, 92, 62, 122, 35, 154, 62, 68, 151, 194, 61, 244, 128, 85, 62, 165, 143, 43, 62, 101, 79, 21, 62, 244, 103, 52, 62, 107, 21, 40, 62, 57, 128, 3, 191, 209, 55, 43, 62, 10, 132, 252, 61, 161, 16, 0, 62, 245, 190, 241, 189, 47, 197, 34, 190, 91, 1, 58, 190, 232, 171, 8, 190, 67, 231, 28, 61, 2, 10, 136, 62, 180, 58, 163, 61, 149, 232, 119, 189, 208, 185, 192, 62, 15, 17, 141, 189, 191, 242, 93, 190, 123, 10, 120, 186, 2, 226, 43, 190, 241, 102, 224, 61, 127, 114, 8, 60, 82, 172, 136, 190, 144, 222, 175, 190, 154, 124, 200, 62, 202, 235, 57, 191, 133, 3, 39, 189, 50, 160, 130, 189, 32, 98, 166, 62, 159, 47, 202, 189, 6, 230, 232, 190, 46, 248, 133, 188, 65, 142, 217, 60, 100, 208, 106, 62, 58, 15, 28, 62, 244, 165, 62, 187, 58, 56, 10, 62, 161, 127, 13, 62, 227, 231, 175, 60, 79, 201, 215, 189, 48, 107, 200, 61, 140, 205, 191, 61, 64, 239, 243, 188, 21, 178, 139, 62, 51, 156, 160, 189, 8, 24, 240, 189, 170, 214, 14, 190, 50, 68, 27, 62, 32, 119, 255, 61, 107, 117, 229, 60, 160, 145, 180, 61, 15, 195, 227, 60, 199, 66, 20, 62, 240, 117, 110, 62, 255, 45, 100, 62, 66, 0, 155, 61, 41, 1, 118, 190, 194, 62, 184, 62, 211, 110, 102, 61, 127, 219, 27, 189, 59, 124, 174, 61, 93, 122, 249, 191, 226, 188, 205, 190, 163, 117, 76, 191, 223, 150, 195, 188, 150, 95, 211, 189, 192, 186, 99, 62, 246, 149, 130, 61, 142, 168, 241, 190, 2, 137, 14, 190, 228, 182, 189, 191, 218, 10, 48, 62, 159, 41, 60, 62, 6, 127, 0, 62, 159, 65, 187, 62, 108, 244, 165, 190, 60, 201, 161, 61, 87, 247, 152, 61, 163, 177, 203, 61, 205, 192, 149, 191, 247, 160, 121, 61, 51, 246, 178, 190, 117, 83, 104, 190, 134, 53, 27, 185, 224, 25, 120, 62, 26, 78, 85, 190, 93, 5, 66, 62, 225, 225, 71, 62, 61, 107, 253, 190, 224, 149, 106, 62, 122, 205, 35, 190, 4, 235, 202, 188, 159, 164, 17, 189, 15, 39, 130, 191, 151, 205, 58, 191, 238, 144, 145, 191, 219, 243, 197, 189, 227, 152, 4, 187, 6, 19, 252, 61, 30, 26, 37, 190, 226, 185, 102, 190, 104, 136, 134, 62, 227, 65, 181, 61, 53, 30, 20, 61, 141, 216, 210, 61, 52, 74, 42, 62, 109, 187, 28, 61, 41, 94, 215, 62, 233, 155, 179, 189, 102, 213, 13, 62, 74, 193, 165, 60, 195, 238, 176, 190, 204, 197, 176, 62, 178, 149, 234, 190, 3, 114, 129, 190, 114, 252, 180, 62, 216, 28, 48, 62, 2, 151, 170, 62, 225, 105, 28, 62, 170, 197, 130, 62, 162, 174, 10, 191, 239, 181, 23, 62, 128, 234, 184, 188, 127, 128, 9, 191, 194, 227, 124, 62, 200, 189, 151, 190, 143, 224, 40, 62, 171, 192, 9, 190, 117, 89, 177, 189, 109, 233, 20, 189, 135, 110, 163, 61, 172, 185, 111, 62, 222, 162, 12, 190, 197, 60, 51, 190, 135, 4, 213, 189, 253, 183, 131, 190, 69, 106, 8, 62, 9, 188, 176, 61, 36, 117, 1, 62, 166, 172, 163, 189, 177, 229, 197, 61, 84, 78, 229, 189, 109, 232, 198, 190, 116, 207, 25, 190, 153, 69, 17, 191, 74, 252, 2, 190, 153, 95, 51, 62, 212, 208, 45, 190, 73, 129, 179, 184, 66, 81, 69, 190, 52, 7, 192, 61, 166, 227, 164, 61, 252, 187, 15, 62, 72, 136, 224, 61, 11, 191, 38, 61, 210, 150, 18, 189, 47, 64, 149, 189, 188, 74, 18, 61, 55, 134, 181, 188, 107, 187, 162, 61, 15, 220, 53, 60, 161, 62, 158, 189, 45, 5, 180, 59, 174, 70, 152, 62, 61, 156, 216, 61, 243, 92, 235, 189, 21, 50, 181, 189, 35, 50, 142, 190, 118, 162, 68, 190, 104, 8, 71, 190, 146, 232, 150, 190, 142, 161, 243, 61, 165, 182, 63, 190, 165, 37, 129, 189, 10, 12, 15, 190, 201, 40, 94, 189, 207, 101, 185, 189, 148, 135, 240, 187, 13, 229, 6, 61, 66, 9, 85, 190, 126, 8, 177, 60, 120, 119, 149, 61, 110, 212, 57, 190, 34, 206, 101, 190, 101, 170, 46, 189, 147, 188, 67, 190, 32, 46, 171, 61, 233, 156, 84, 62, 116, 228, 77, 189, 77, 160, 237, 62, 22, 230, 16, 190, 35, 181, 150, 60, 55, 70, 208, 190, 123, 206, 132, 188, 17, 158, 216, 61, 241, 13, 180, 190, 109, 85, 157, 189, 57, 245, 134, 60, 154, 150, 78, 62, 71, 116, 161, 190, 223, 72, 157, 61, 76, 174, 129, 60, 224, 206, 132, 62, 64, 112, 139, 190, 33, 194, 44, 191, 91, 99, 133, 62, 196, 126, 11, 187, 209, 40, 5, 61, 177, 157, 10, 190, 194, 253, 57, 190, 91, 233, 131, 61, 157, 244, 141, 190, 26, 4, 145, 61, 107, 34, 164, 61, 116, 90, 15, 62, 247, 212, 242, 189, 28, 97, 251, 188, 35, 19, 144, 190, 53, 196, 245, 189, 254, 178, 99, 190, 42, 181, 171, 61, 109, 112, 130, 190, 174, 76, 226, 61, 173, 72, 63, 62, 234, 122, 176, 61, 145, 242, 128, 190, 67, 141, 231, 190, 156, 210, 0, 58, 71, 252, 79, 189, 253, 113, 188, 190, 120, 95, 180, 190, 111, 71, 161, 60, 126, 167, 14, 191, 210, 102, 58, 190, 20, 230, 33, 61, 92, 144, 129, 190, 156, 236, 49, 62, 127, 111, 51, 191, 40, 172, 38, 190, 112, 10, 120, 190, 155, 172, 88, 191, 213, 194, 197, 62, 191, 223, 1, 62, 17, 146, 27, 62, 94, 37, 162, 61, 94, 209, 217, 190, 180, 211, 138, 190, 116, 100, 173, 61, 171, 231, 16, 62, 31, 183, 128, 62, 140, 150, 235, 189, 19, 234, 28, 191, 179, 64, 241, 59, 211, 237, 76, 61, 156, 226, 160, 191, 102, 209, 116, 191, 98, 169, 173, 62, 35, 150, 182, 190, 166, 65, 130, 190, 162, 108, 208, 190, 223, 240, 48, 61, 166, 189, 155, 191, 79, 141, 181, 61, 15, 236, 109, 190, 152, 131, 147, 190, 232, 14, 177, 61, 75, 82, 206, 61, 253, 24, 28, 62, 87, 3, 66, 190, 236, 7, 177, 188, 185, 252, 47, 191, 108, 116, 118, 189, 232, 163, 99, 62, 245, 44, 234, 190, 201, 52, 163, 189, 70, 6, 153, 190, 41, 179, 61, 62, 84, 99, 142, 61, 52, 30, 77, 62, 226, 254, 208, 189, 219, 136, 159, 189, 147, 233, 52, 61, 9, 111, 207, 61, 20, 94, 89, 191, 112, 202, 184, 62, 139, 81, 34, 191, 127, 209, 52, 191, 144, 15, 148, 190, 41, 240, 174, 61, 233, 219, 214, 190, 82, 140, 207, 58, 37, 63, 45, 190, 247, 26, 164, 189, 67, 183, 181, 190, 50, 120, 86, 190, 158, 122, 107, 190, 136, 77, 86, 190, 68, 81, 106, 187, 216, 11, 46, 62, 177, 32, 145, 61, 174, 52, 11, 62, 80, 12, 83, 61, 55, 177, 31, 191, 155, 79, 56, 190, 174, 173, 2, 61, 15, 54, 138, 190, 159, 139, 139, 61, 251, 2, 57, 190, 42, 2, 62, 62, 207, 113, 80, 61, 157, 130, 18, 62, 203, 244, 224, 61, 252, 180, 163, 190, 138, 200, 234, 61, 127, 9, 40, 62, 3, 208, 198, 189, 150, 151, 45, 190, 206, 88, 228, 61, 223, 82, 232, 61, 74, 5, 27, 190, 88, 31, 239, 189, 86, 47, 2, 62, 217, 210, 120, 61, 49, 103, 33, 190, 165, 106, 236, 61, 216, 205, 43, 61, 62, 59, 18, 61, 28, 166, 46, 190, 24, 35, 3, 189, 100, 241, 39, 190, 73, 86, 199, 61, 23, 237, 10, 61, 221, 152, 100, 60, 15, 215, 34, 190, 117, 10, 50, 60, 118, 40, 165, 189, 81, 238, 164, 61, 132, 113, 155, 188, 175, 171, 188, 189, 103, 255, 8, 190, 50, 169, 0, 188, 222, 145, 73, 190, 126, 136, 7, 190, 127, 112, 54, 61, 207, 189, 157, 60, 68, 154, 217, 61, 45, 169, 149, 61, 146, 67, 59, 189, 69, 161, 252, 188, 111, 204, 45, 190, 65, 249, 27, 62, 211, 38, 50, 189, 63, 37, 240, 61, 178, 205, 218, 61, 183, 139, 158, 189, 221, 163, 19, 189, 221, 219, 117, 190, 108, 133, 6, 62, 17, 240, 108, 189, 107, 47, 255, 61, 106, 196, 56, 189, 67, 217, 6, 190, 94, 44, 31, 189, 190, 124, 105, 61, 89, 229, 129, 188, 182, 246, 5, 62, 89, 234, 26, 60, 174, 69, 21, 62, 161, 132, 131, 189, 95, 243, 91, 190, 246, 111, 36, 61, 102, 195, 92, 189, 240, 43, 29, 189, 54, 254, 201, 189, 230, 159, 14, 59, 177, 202, 75, 60, 99, 233, 73, 61, 137, 98, 54, 190, 38, 119, 221, 61, 89, 237, 27, 190, 35, 60, 61, 190, 8, 76, 69, 189, 142, 70, 198, 61, 98, 159, 19, 62, 29, 222, 1, 188, 48, 93, 37, 190, 219, 240, 195, 61, 132, 4, 12, 190, 42, 144, 101, 61, 77, 39, 210, 61, 195, 15, 23, 187, 219, 99, 3, 190, 178, 156, 198, 189, 185, 59, 60, 189, 38, 75, 183, 61, 50, 198, 55, 190, 89, 147, 162, 189, 123, 83, 22, 189, 41, 59, 51, 190, 117, 89, 21, 190, 161, 199, 34, 60, 82, 21, 172, 59, 41, 246, 78, 189, 157, 149, 129, 61, 219, 215, 18, 61, 162, 16, 28, 190, 228, 152, 37, 62, 119, 77, 131, 189, 105, 82, 210, 60, 234, 194, 135, 189, 112, 144, 236, 189, 199, 222, 40, 62, 200, 58, 161, 61, 226, 173, 43, 191, 129, 240, 228, 189, 209, 29, 237, 61, 196, 114, 18, 62, 50, 127, 131, 60, 103, 69, 79, 190, 184, 22, 158, 188, 162, 105, 175, 60, 177, 118, 143, 190, 186, 57, 154, 190, 130, 195, 78, 61, 33, 143, 228, 61, 160, 99, 70, 62, 223, 25, 59, 62, 115, 211, 224, 189, 187, 155, 65, 62, 237, 196, 16, 191, 162, 36, 11, 190, 105, 97, 110, 191, 228, 235, 25, 191, 245, 79, 12, 62, 208, 218, 1, 62, 168, 48, 23, 61, 78, 157, 157, 62, 111, 1, 173, 190, 244, 128, 29, 62, 96, 14, 100, 189, 179, 97, 195, 61, 196, 168, 129, 62, 215, 53, 30, 61, 225, 23, 131, 62, 122, 246, 60, 62, 242, 144, 69, 60, 153, 211, 87, 62, 214, 4, 27, 62, 36, 208, 245, 190, 128, 102, 129, 62, 7, 26, 186, 60, 102, 88, 3, 189, 152, 87, 179, 190, 190, 155, 51, 62, 54, 53, 140, 190, 159, 193, 210, 189, 251, 92, 239, 187, 32, 220, 126, 62, 54, 59, 226, 59, 107, 215, 90, 190, 60, 134, 130, 61, 165, 34, 8, 191, 250, 123, 247, 59, 174, 34, 54, 189, 123, 127, 53, 190, 54, 237, 148, 62, 88, 43, 191, 61, 232, 32, 37, 191, 88, 87, 147, 58, 207, 160, 238, 58, 186, 198, 160, 62, 91, 75, 173, 61, 141, 156, 250, 189, 136, 63, 155, 62, 236, 96, 211, 189, 190, 1, 81, 190, 37, 227, 55, 62, 15, 167, 96, 191, 186, 8, 29, 191, 232, 149, 71, 191, 219, 161, 114, 62, 64, 156, 7, 62, 10, 144, 38, 62, 68, 8, 216, 61, 26, 9, 166, 190, 44, 175, 94, 189, 76, 197, 52, 189, 186, 149, 49, 190, 84, 136, 159, 61, 120, 175, 192, 189, 45, 168, 111, 62, 171, 244, 219, 62, 174, 157, 27, 189, 167, 231, 228, 189, 167, 117, 105, 61, 65, 159, 185, 190, 45, 175, 42, 62, 93, 208, 190, 190, 158, 179, 98, 188, 134, 234, 206, 59, 111, 194, 160, 61, 4, 221, 91, 62, 214, 59, 143, 62, 92, 32, 207, 61, 76, 180, 177, 190, 241, 103, 79, 62, 19, 19, 245, 189, 41, 212, 148, 62, 37, 197, 95, 62, 216, 121, 13, 61, 199, 193, 182, 62, 191, 33, 144, 62, 42, 236, 148, 191, 222, 179, 2, 62, 4, 95, 171, 61, 226, 215, 144, 188, 172, 151, 52, 61, 232, 243, 1, 61, 225, 120, 107, 62, 224, 174, 42, 190, 72, 151, 160, 59, 205, 153, 134, 61, 111, 146, 25, 190, 168, 139, 225, 187, 92, 0, 99, 190, 245, 236, 28, 190, 91, 36, 119, 62, 151, 14, 124, 62, 0, 220, 137, 61, 172, 194, 23, 62, 193, 179, 244, 61, 59, 119, 190, 189, 38, 234, 246, 61, 144, 130, 95, 61, 5, 38, 22, 62, 77, 150, 82, 62, 69, 181, 28, 189, 169, 189, 211, 62, 113, 232, 234, 189, 68, 185, 25, 190, 47, 156, 159, 61, 142, 162, 82, 191, 23, 133, 147, 191, 216, 37, 142, 191, 5, 224, 43, 62, 169, 239, 128, 61, 48, 31, 44, 188, 44, 75, 120, 61, 93, 239, 208, 190, 146, 75, 110, 61, 153, 44, 4, 191, 44, 226, 184, 61, 249, 88, 41, 62, 101, 13, 5, 60, 212, 142, 154, 62, 228, 92, 90, 61, 64, 71, 254, 182, 122, 144, 21, 63, 173, 168, 165, 190, 0, 201, 133, 190, 219, 111, 149, 190, 156, 176, 75, 190, 10, 0, 223, 189, 199, 142, 10, 61, 99, 105, 65, 62, 234, 163, 193, 190, 92, 71, 141, 189, 165, 176, 15, 188, 94, 169, 36, 191, 235, 146, 185, 61, 67, 67, 2, 62, 6, 143, 128, 62, 201, 33, 133, 190, 235, 72, 74, 61, 139, 113, 191, 190, 122, 87, 235, 189, 7, 76, 133, 191, 227, 52, 248, 61, 93, 146, 18, 190, 43, 166, 115, 61, 134, 124, 77, 190, 66, 168, 217, 61, 237, 207, 226, 61, 65, 64, 79, 189, 213, 89, 78, 61, 1, 28, 104, 189, 84, 34, 145, 190, 247, 228, 73, 62, 120, 60, 225, 191, 61, 63, 160, 190, 60, 70, 98, 62, 15, 253, 157, 62, 243, 240, 176, 62, 41, 13, 61, 190, 39, 238, 139, 60, 177, 185, 13, 62, 118, 90, 142, 190, 85, 90, 68, 62, 45, 57, 184, 61, 177, 205, 143, 190, 219, 103, 7, 192, 97, 114, 35, 189, 39, 192, 5, 190, 206, 119, 19, 191, 249, 156, 137, 62, 3, 47, 166, 190, 94, 123, 77, 191, 242, 11, 18, 191, 246, 94, 128, 62, 116, 98, 73, 190, 177, 213, 178, 188, 233, 73, 5, 61, 221, 78, 81, 188, 159, 163, 159, 190, 91, 166, 1, 61, 132, 10, 21, 190, 128, 51, 52, 60, 0, 95, 168, 62, 95, 196, 81, 62, 36, 2, 172, 61, 132, 18, 17, 190, 112, 226, 29, 63, 175, 63, 173, 190, 165, 95, 196, 61, 232, 222, 231, 61, 205, 207, 2, 190, 18, 6, 178, 61, 127, 136, 95, 190, 243, 168, 140, 61, 197, 25, 90, 61, 18, 58, 218, 187, 51, 165, 204, 60, 177, 191, 31, 190, 159, 51, 91, 62, 248, 202, 45, 189, 2, 77, 169, 188, 140, 29, 31, 62, 81, 233, 149, 189, 44, 11, 23, 62, 157, 58, 234, 59, 89, 67, 32, 62, 36, 202, 85, 61, 35, 35, 24, 187, 115, 203, 128, 186, 85, 5, 138, 60, 244, 53, 65, 61, 239, 27, 196, 61, 139, 154, 53, 189, 208, 218, 201, 189, 32, 196, 48, 190, 45, 122, 188, 189, 161, 135, 44, 61, 35, 124, 222, 61, 173, 10, 46, 57, 142, 86, 29, 62, 99, 29, 11, 189, 225, 192, 162, 187, 196, 9, 156, 189, 216, 104, 44, 190, 56, 204, 25, 190, 117, 171, 119, 189, 184, 24, 250, 60, 254, 16, 221, 189, 201, 180, 241, 61, 17, 214, 42, 190, 53, 245, 8, 60, 48, 113, 201, 188, 91, 226, 5, 62, 157, 71, 7, 191, 86, 73, 29, 62, 5, 198, 252, 189, 229, 12, 97, 190, 225, 13, 142, 191, 15, 10, 5, 189, 188, 119, 214, 61, 246, 172, 198, 188, 146, 5, 13, 190, 97, 138, 226, 61, 47, 177, 54, 62, 140, 141, 39, 62, 89, 201, 206, 189, 87, 109, 95, 190, 207, 137, 145, 190, 47, 162, 77, 62, 144, 207, 253, 191, 151, 241, 83, 189, 65, 153, 74, 62, 202, 228, 142, 62, 2, 245, 137, 62, 187, 50, 63, 188, 208, 140, 37, 190, 99, 206, 25, 62, 65, 221, 208, 190, 118, 205, 42, 62, 21, 201, 168, 188, 207, 97, 53, 189, 46, 70, 237, 191, 179, 67, 79, 62, 87, 230, 72, 189, 56, 238, 53, 190, 202, 145, 194, 187, 172, 5, 166, 190, 167, 173, 4, 191, 246, 199, 223, 190, 71, 8, 194, 61, 41, 119, 0, 191, 247, 95, 135, 61, 98, 67, 12, 62, 23, 161, 135, 190, 190, 238, 154, 190, 192, 103, 149, 59, 179, 114, 18, 189, 212, 72, 187, 190, 135, 239, 69, 62, 22, 210, 210, 62, 11, 147, 20, 62, 166, 109, 51, 190, 83, 95, 198, 62, 85, 72, 224, 190, 155, 156, 70, 190, 123, 148, 139, 62, 165, 232, 72, 191, 39, 201, 18, 62, 97, 243, 33, 190, 131, 215, 106, 62, 121, 149, 103, 62, 3, 215, 228, 61, 24, 231, 32, 189, 26, 30, 176, 190, 32, 254, 120, 62, 243, 213, 243, 61, 70, 16, 252, 189, 52, 0, 22, 189, 146, 73, 85, 189, 35, 126, 6, 190, 219, 209, 65, 189, 170, 187, 157, 189, 234, 85, 77, 190, 135, 151, 253, 61, 105, 240, 79, 189, 126, 180, 217, 189, 154, 121, 171, 189, 184, 234, 6, 61, 25, 87, 131, 189, 220, 21, 227, 61, 84, 212, 241, 189, 0, 114, 11, 62, 146, 211, 64, 190, 226, 151, 39, 190, 171, 55, 135, 61, 170, 242, 62, 190, 227, 47, 193, 188, 123, 244, 99, 189, 247, 147, 86, 189, 110, 250, 246, 189, 31, 24, 46, 62, 195, 167, 52, 188, 70, 232, 57, 61, 133, 163, 7, 190, 216, 190, 65, 190, 234, 39, 238, 60, 131, 22, 40, 62, 234, 46, 153, 61, 94, 201, 118, 191, 227, 61, 136, 189, 149, 200, 185, 62, 9, 185, 71, 190, 82, 55, 6, 191, 54, 109, 41, 62, 191, 225, 92, 189, 141, 128, 30, 192, 193, 159, 18, 191, 163, 172, 170, 62, 230, 80, 192, 191, 101, 216, 186, 62, 34, 129, 181, 190, 116, 135, 219, 190, 87, 133, 159, 190, 25, 12, 169, 61, 225, 252, 52, 189, 102, 71, 127, 188, 211, 204, 159, 190, 170, 32, 204, 191, 54, 125, 75, 62, 45, 185, 177, 61, 96, 85, 103, 190, 91, 164, 141, 62, 17, 135, 151, 190, 59, 114, 130, 62, 200, 17, 6, 60, 113, 60, 61, 62, 162, 8, 242, 190, 173, 76, 167, 187, 43, 51, 148, 190, 28, 227, 20, 190, 121, 105, 134, 62, 145, 75, 54, 62, 174, 153, 192, 62, 195, 14, 153, 62, 218, 216, 181, 61, 104, 91, 189, 190, 254, 208, 8, 188, 38, 119, 164, 61, 146, 250, 38, 62, 134, 146, 118, 190, 179, 6, 128, 61, 86, 166, 158, 61, 44, 8, 62, 189, 212, 27, 19, 61, 166, 58, 153, 61, 62, 64, 23, 62, 66, 212, 216, 187, 92, 184, 221, 190, 36, 44, 40, 62, 69, 206, 57, 62, 44, 214, 138, 60, 212, 110, 67, 62, 26, 5, 101, 190, 97, 213, 9, 61, 254, 10, 16, 62, 0, 110, 206, 189, 41, 182, 128, 189, 103, 185, 142, 61, 184, 126, 140, 188, 116, 184, 66, 191, 18, 243, 240, 61, 121, 218, 70, 61, 58, 144, 130, 189, 239, 243, 48, 190, 235, 245, 215, 189, 63, 148, 114, 189, 255, 162, 63, 189, 244, 102, 75, 61, 60, 130, 17, 190, 49, 149, 201, 189, 78, 222, 43, 62, 135, 64, 26, 190, 248, 138, 5, 190, 146, 42, 24, 189, 61, 153, 226, 61, 37, 90, 19, 62, 155, 78, 201, 61, 156, 123, 148, 189, 110, 82, 143, 189, 208, 98, 158, 60, 78, 76, 18, 189, 250, 156, 159, 61, 124, 38, 31, 190, 185, 133, 225, 61, 49, 212, 142, 61, 190, 222, 193, 61, 21, 136, 18, 62, 32, 193, 222, 189, 14, 204, 86, 190, 83, 193, 73, 61, 245, 114, 35, 190, 189, 161, 27, 190, 249, 124, 30, 190, 101, 208, 238, 61, 230, 187, 13, 191, 238, 97, 85, 62, 70, 82, 149, 62, 53, 220, 188, 190, 18, 113, 156, 190, 221, 205, 131, 62, 138, 75, 124, 190, 54, 34, 115, 190, 226, 215, 12, 191, 72, 234, 216, 61, 74, 3, 163, 191, 245, 135, 181, 61, 163, 169, 109, 190, 15, 166, 6, 191, 172, 231, 133, 190, 128, 151, 212, 62, 111, 208, 188, 61, 7, 19, 11, 62, 219, 108, 3, 63, 220, 231, 168, 191, 120, 194, 101, 62, 106, 94, 210, 187, 217, 196, 106, 190, 241, 230, 170, 189, 222, 93, 78, 189, 173, 80, 195, 189, 251, 50, 227, 60, 113, 220, 98, 62, 194, 5, 63, 190, 147, 194, 179, 189, 173, 27, 63, 60, 51, 15, 0, 190, 133, 237, 168, 60, 67, 182, 42, 61, 147, 179, 103, 62, 132, 167, 143, 60, 7, 36, 33, 62, 167, 108, 134, 191, 49, 100, 188, 61, 118, 50, 64, 190, 196, 246, 185, 62, 149, 118, 177, 189, 87, 240, 129, 189, 85, 187, 204, 60, 53, 156, 217, 189, 55, 135, 59, 189, 8, 253, 70, 62, 74, 70, 164, 190, 15, 242, 212, 190, 231, 166, 201, 189, 32, 171, 109, 191, 63, 145, 249, 189, 35, 22, 76, 61, 37, 102, 104, 60, 225, 84, 228, 190, 155, 235, 60, 62, 133, 250, 249, 189, 78, 145, 202, 190, 132, 113, 60, 190, 234, 56, 248, 189, 177, 202, 105, 62, 104, 35, 31, 190, 226, 112, 118, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 110, 31, 61, 83, 32, 184, 188, 69, 66, 192, 60, 77, 176, 145, 189, 244, 68, 201, 62, 201, 90, 127, 62, 82, 197, 89, 189, 122, 52, 249, 61, 102, 226, 128, 189, 3, 227, 229, 187, 57, 234, 144, 189, 247, 65, 133, 62, 24, 106, 143, 62, 1, 237, 16, 190, 104, 221, 37, 190, 90, 224, 189, 189, 70, 106, 8, 189, 200, 169, 194, 61, 40, 108, 176, 62, 248, 105, 161, 61, 49, 249, 157, 188, 181, 141, 204, 61, 253, 97, 178, 61, 187, 238, 50, 190, 63, 137, 246, 61, 249, 0, 16, 62, 89, 134, 55, 190, 31, 215, 10, 60, 121, 78, 240, 189, 67, 10, 114, 61, 33, 71, 174, 188, 149, 132, 51, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 57, 92, 62, 134, 215, 173, 62, 5, 21, 14, 63, 165, 23, 180, 190, 3, 119, 57, 62, 244, 32, 47, 191, 69, 170, 200, 190, 170, 231, 3, 62, 22, 206, 127, 62, 218, 38, 38, 62, 72, 202, 138, 62, 102, 205, 125, 191, 129, 81, 195, 190, 132, 76, 66, 188, 86, 70, 253, 61, 103, 169, 197, 187, 243, 215, 239, 62, 34, 215, 121, 62, 39, 93, 181, 190, 116, 98, 117, 62, 245, 243, 40, 191, 53, 208, 37, 63, 184, 92, 213, 190, 39, 254, 127, 61, 81, 115, 86, 63, 151, 83, 40, 191, 232, 12, 233, 189, 211, 87, 153, 191, 113, 69, 92, 62, 9, 38, 149, 189, 5, 134, 35, 191, 78, 46, 129, 63, 94, 45, 172, 189, 178, 69, 114, 190, 40, 2, 105, 62, 221, 11, 5, 190, 183, 31, 141, 190, 173, 115, 81, 61, 169, 210, 242, 61, 117, 155, 162, 190, 194, 188, 240, 185, 216, 244, 252, 61, 76, 0, 167, 62, 20, 166, 137, 61, 140, 77, 215, 190, 180, 122, 178, 189, 52, 97, 198, 189, 82, 212, 23, 61, 137, 221, 7, 190, 209, 214, 24, 190, 186, 172, 34, 190, 213, 30, 199, 188, 108, 183, 173, 62, 240, 70, 79, 62, 34, 245, 132, 188, 16, 229, 81, 189, 127, 138, 244, 61, 228, 194, 176, 62, 157, 228, 32, 61, 146, 234, 64, 62, 133, 41, 171, 61, 154, 59, 53, 61, 245, 120, 16, 62, 11, 127, 52, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 170, 81, 62, 78, 83, 249, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {243, 92, 196, 191, 127, 151, 141, 62, 139, 157, 23, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {125, 112, 129, 64, 104, 47, 82, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0096/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}