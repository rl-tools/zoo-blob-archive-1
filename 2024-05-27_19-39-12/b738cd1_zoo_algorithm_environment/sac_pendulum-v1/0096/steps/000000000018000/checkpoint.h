// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 56, 153, 62, 164, 233, 115, 190, 187, 234, 78, 188, 117, 141, 55, 190, 191, 84, 182, 63, 250, 218, 176, 62, 231, 239, 255, 61, 95, 61, 14, 191, 200, 151, 204, 61, 120, 115, 210, 190, 250, 138, 130, 191, 242, 54, 92, 190, 206, 41, 34, 63, 87, 234, 147, 191, 161, 54, 86, 190, 1, 14, 0, 63, 140, 11, 146, 191, 24, 171, 136, 190, 171, 23, 15, 191, 191, 180, 68, 63, 36, 59, 14, 191, 83, 46, 230, 190, 210, 17, 166, 62, 58, 215, 31, 63, 219, 220, 39, 189, 205, 56, 173, 63, 220, 52, 243, 62, 85, 182, 45, 62, 235, 65, 112, 191, 86, 29, 135, 188, 67, 150, 198, 190, 211, 39, 174, 191, 90, 169, 163, 190, 76, 190, 164, 190, 184, 245, 161, 63, 121, 250, 254, 62, 13, 95, 112, 191, 96, 171, 228, 190, 71, 90, 34, 189, 59, 87, 254, 190, 227, 31, 237, 62, 27, 137, 1, 191, 24, 241, 112, 190, 248, 83, 146, 61, 18, 235, 86, 63, 149, 116, 137, 61, 166, 255, 91, 191, 177, 218, 46, 63, 124, 188, 13, 63, 224, 169, 137, 63, 255, 209, 141, 62, 241, 38, 19, 191, 57, 14, 16, 63, 44, 247, 3, 190, 0, 23, 190, 62, 19, 198, 157, 191, 150, 87, 1, 191, 183, 91, 8, 63, 230, 37, 126, 63, 218, 187, 188, 62, 106, 89, 137, 190, 103, 139, 166, 63, 40, 156, 176, 62, 213, 189, 150, 191, 19, 36, 153, 190, 1, 183, 62, 60, 62, 78, 23, 191, 14, 105, 13, 63, 108, 130, 17, 62, 207, 5, 98, 63, 158, 74, 87, 191, 211, 130, 199, 190, 68, 137, 98, 189, 172, 81, 36, 191, 41, 142, 11, 189, 106, 205, 37, 191, 175, 81, 33, 63, 250, 191, 139, 190, 144, 180, 79, 190, 181, 10, 26, 63, 17, 182, 19, 191, 30, 164, 178, 190, 58, 186, 25, 63, 173, 215, 209, 61, 44, 162, 67, 61, 50, 69, 46, 63, 45, 50, 2, 62, 232, 56, 135, 62, 223, 253, 13, 191, 88, 180, 155, 62, 157, 108, 15, 62, 58, 170, 211, 191, 95, 93, 215, 190, 53, 133, 97, 63, 121, 82, 131, 63, 96, 95, 110, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 147, 19, 191, 101, 16, 70, 61, 66, 190, 126, 62, 166, 224, 163, 62, 32, 58, 157, 190, 73, 19, 186, 189, 158, 41, 156, 190, 5, 91, 191, 190, 79, 46, 252, 61, 1, 150, 63, 61, 56, 169, 4, 63, 106, 177, 42, 190, 94, 43, 160, 61, 144, 120, 176, 190, 85, 2, 134, 191, 143, 164, 148, 62, 239, 89, 128, 62, 196, 81, 5, 63, 193, 143, 158, 62, 113, 183, 227, 190, 204, 126, 83, 190, 140, 128, 251, 189, 111, 134, 32, 63, 161, 10, 71, 191, 63, 236, 226, 62, 1, 158, 160, 190, 55, 189, 160, 188, 113, 27, 166, 62, 149, 228, 141, 62, 190, 74, 201, 188, 216, 114, 18, 62, 184, 212, 38, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 48, 218, 61, 66, 158, 97, 191, 10, 25, 35, 188, 207, 59, 134, 62, 54, 47, 54, 191, 125, 36, 33, 190, 200, 124, 102, 62, 74, 168, 219, 190, 10, 204, 212, 190, 2, 243, 8, 63, 76, 212, 79, 61, 51, 164, 130, 190, 55, 112, 167, 62, 182, 115, 148, 62, 156, 170, 169, 190, 8, 167, 59, 62, 184, 170, 155, 191, 172, 74, 139, 62, 54, 179, 53, 62, 200, 43, 153, 188, 36, 113, 41, 191, 128, 251, 191, 189, 220, 116, 237, 60, 6, 29, 204, 189, 50, 75, 208, 59, 13, 140, 165, 62, 88, 129, 4, 189, 130, 126, 121, 60, 88, 132, 142, 190, 14, 28, 171, 190, 238, 220, 126, 62, 95, 194, 61, 60, 161, 198, 190, 61, 103, 140, 173, 62, 54, 221, 169, 62, 161, 51, 9, 191, 137, 53, 160, 190, 21, 209, 252, 60, 78, 100, 40, 62, 211, 238, 69, 60, 13, 150, 172, 61, 168, 36, 183, 61, 73, 129, 213, 61, 222, 93, 70, 190, 186, 82, 92, 190, 41, 66, 121, 61, 9, 44, 255, 187, 212, 143, 57, 189, 151, 157, 254, 62, 30, 204, 142, 189, 223, 228, 24, 62, 63, 88, 17, 62, 67, 178, 79, 62, 71, 27, 146, 191, 150, 159, 160, 190, 227, 12, 59, 62, 2, 42, 181, 61, 123, 160, 11, 62, 20, 24, 200, 61, 202, 64, 21, 62, 46, 175, 193, 62, 168, 139, 236, 189, 162, 79, 25, 190, 120, 117, 156, 62, 9, 145, 244, 61, 187, 206, 27, 60, 22, 51, 13, 62, 27, 88, 199, 61, 85, 161, 211, 62, 175, 137, 154, 62, 239, 163, 174, 191, 23, 51, 98, 62, 163, 33, 73, 190, 61, 207, 115, 62, 195, 195, 198, 190, 161, 241, 45, 190, 57, 249, 55, 62, 200, 125, 20, 191, 13, 166, 165, 189, 167, 140, 70, 62, 182, 43, 1, 191, 246, 85, 131, 190, 122, 192, 144, 190, 156, 224, 96, 191, 192, 11, 185, 189, 21, 145, 218, 61, 118, 12, 183, 189, 61, 46, 133, 187, 197, 227, 188, 61, 99, 147, 50, 61, 59, 44, 226, 61, 11, 179, 151, 189, 26, 37, 149, 189, 84, 24, 140, 188, 223, 47, 157, 190, 248, 221, 23, 62, 81, 92, 79, 189, 186, 22, 197, 62, 40, 172, 240, 62, 20, 185, 47, 62, 131, 191, 231, 62, 3, 190, 191, 62, 204, 179, 132, 61, 12, 153, 27, 62, 111, 213, 116, 62, 164, 220, 117, 190, 178, 251, 118, 62, 78, 133, 59, 62, 144, 52, 207, 61, 173, 97, 58, 190, 64, 143, 131, 190, 236, 74, 141, 190, 183, 150, 249, 190, 225, 153, 153, 60, 74, 62, 169, 62, 153, 237, 191, 189, 40, 119, 133, 61, 68, 74, 188, 62, 106, 42, 34, 61, 53, 234, 54, 189, 224, 27, 5, 62, 201, 10, 74, 190, 168, 175, 238, 60, 119, 210, 17, 62, 240, 196, 239, 190, 188, 61, 163, 190, 176, 251, 2, 63, 88, 229, 142, 191, 133, 3, 39, 189, 243, 31, 193, 189, 40, 227, 180, 62, 48, 73, 63, 189, 171, 249, 244, 190, 111, 212, 178, 188, 253, 247, 49, 187, 129, 235, 53, 62, 222, 116, 26, 62, 241, 55, 143, 61, 78, 164, 132, 62, 184, 110, 109, 61, 212, 3, 2, 61, 7, 47, 16, 190, 80, 74, 160, 61, 9, 68, 250, 61, 33, 168, 63, 188, 222, 248, 104, 62, 225, 197, 216, 189, 168, 228, 163, 189, 181, 237, 72, 190, 197, 118, 147, 61, 64, 1, 230, 61, 149, 164, 67, 61, 106, 198, 192, 61, 0, 13, 151, 185, 251, 65, 213, 61, 49, 157, 74, 62, 54, 35, 104, 62, 171, 160, 220, 61, 246, 175, 99, 190, 33, 77, 186, 62, 211, 110, 102, 61, 226, 49, 231, 189, 229, 188, 162, 61, 138, 55, 5, 192, 82, 151, 198, 190, 125, 148, 74, 191, 210, 216, 115, 61, 57, 56, 243, 189, 151, 187, 55, 62, 213, 238, 106, 61, 231, 46, 39, 191, 1, 167, 22, 190, 235, 125, 198, 191, 11, 158, 118, 62, 111, 93, 22, 62, 96, 119, 4, 62, 46, 112, 182, 62, 127, 127, 137, 190, 30, 64, 227, 61, 40, 213, 0, 61, 131, 175, 7, 61, 129, 71, 151, 191, 32, 61, 99, 188, 129, 184, 243, 190, 62, 108, 80, 190, 166, 199, 235, 59, 235, 76, 170, 62, 9, 49, 141, 190, 156, 83, 55, 62, 183, 58, 72, 62, 38, 18, 3, 191, 221, 101, 123, 62, 122, 205, 35, 190, 162, 174, 215, 188, 183, 144, 114, 189, 233, 84, 130, 191, 31, 221, 119, 191, 116, 8, 180, 191, 132, 35, 200, 189, 149, 69, 65, 61, 156, 87, 160, 61, 51, 102, 17, 190, 47, 43, 139, 190, 87, 243, 160, 62, 111, 32, 146, 62, 138, 120, 49, 61, 232, 15, 0, 62, 112, 235, 57, 62, 165, 232, 164, 189, 123, 245, 224, 62, 248, 95, 218, 189, 222, 248, 135, 59, 45, 86, 51, 61, 204, 221, 23, 190, 179, 115, 210, 62, 118, 173, 250, 190, 143, 32, 128, 190, 96, 20, 201, 62, 153, 22, 23, 62, 89, 3, 189, 62, 150, 60, 180, 61, 214, 132, 128, 62, 218, 236, 46, 191, 24, 47, 224, 60, 128, 234, 184, 188, 139, 118, 27, 191, 239, 48, 134, 62, 136, 200, 141, 190, 194, 88, 236, 61, 144, 125, 38, 190, 244, 156, 236, 189, 23, 225, 133, 189, 144, 77, 135, 61, 96, 15, 149, 62, 119, 75, 159, 189, 211, 224, 113, 190, 189, 68, 20, 61, 172, 151, 143, 190, 95, 72, 235, 61, 201, 81, 28, 62, 14, 164, 6, 62, 132, 209, 103, 189, 143, 190, 69, 61, 75, 205, 243, 189, 18, 134, 20, 191, 83, 247, 156, 189, 151, 202, 6, 191, 11, 227, 83, 190, 176, 39, 51, 62, 177, 131, 6, 190, 230, 182, 242, 188, 86, 38, 33, 190, 105, 193, 189, 61, 106, 62, 14, 62, 198, 28, 210, 61, 105, 33, 167, 61, 11, 191, 38, 61, 210, 150, 18, 189, 28, 128, 151, 189, 117, 185, 6, 61, 212, 177, 197, 188, 116, 190, 157, 61, 15, 220, 53, 60, 161, 62, 158, 189, 45, 5, 180, 59, 242, 113, 151, 62, 144, 126, 208, 61, 243, 92, 235, 189, 117, 62, 183, 189, 28, 59, 142, 190, 118, 162, 68, 190, 106, 8, 71, 190, 146, 232, 150, 190, 84, 235, 242, 61, 159, 200, 67, 190, 165, 37, 129, 189, 10, 12, 15, 190, 165, 74, 95, 189, 207, 101, 185, 189, 117, 141, 10, 188, 22, 48, 254, 60, 66, 9, 85, 190, 37, 108, 172, 60, 120, 119, 149, 61, 110, 212, 57, 190, 159, 210, 101, 190, 152, 140, 63, 189, 147, 188, 67, 190, 32, 46, 171, 61, 15, 43, 70, 62, 120, 49, 13, 189, 101, 236, 80, 63, 235, 168, 62, 190, 153, 126, 185, 61, 35, 23, 50, 191, 57, 44, 209, 188, 249, 46, 47, 62, 227, 12, 194, 190, 46, 119, 110, 62, 34, 165, 61, 189, 72, 76, 200, 62, 72, 86, 16, 191, 67, 12, 221, 61, 36, 98, 87, 59, 76, 127, 175, 62, 143, 34, 153, 60, 207, 47, 16, 191, 28, 252, 195, 62, 222, 66, 211, 188, 47, 152, 211, 61, 37, 97, 124, 189, 146, 217, 119, 190, 98, 60, 169, 61, 185, 188, 83, 191, 109, 75, 222, 62, 53, 184, 62, 62, 103, 37, 101, 62, 64, 69, 8, 190, 232, 236, 109, 61, 38, 13, 66, 190, 53, 196, 245, 189, 180, 227, 162, 190, 206, 81, 231, 61, 197, 251, 241, 190, 8, 44, 198, 61, 17, 37, 41, 62, 129, 11, 51, 62, 245, 44, 92, 190, 212, 210, 24, 191, 236, 185, 8, 190, 134, 201, 33, 190, 253, 113, 188, 190, 1, 231, 176, 190, 147, 250, 200, 61, 93, 143, 2, 191, 100, 146, 13, 190, 92, 122, 180, 61, 251, 0, 151, 190, 22, 25, 29, 62, 195, 251, 75, 191, 32, 215, 34, 190, 41, 152, 114, 190, 250, 175, 111, 191, 116, 68, 162, 62, 64, 208, 196, 61, 167, 241, 163, 62, 65, 134, 145, 61, 116, 83, 15, 191, 197, 167, 115, 190, 179, 35, 12, 62, 76, 87, 154, 61, 111, 125, 148, 62, 140, 150, 235, 189, 90, 76, 223, 190, 83, 214, 23, 190, 30, 149, 113, 188, 69, 86, 176, 191, 46, 135, 140, 191, 209, 148, 149, 62, 157, 17, 150, 190, 245, 244, 158, 190, 198, 49, 186, 190, 139, 126, 251, 188, 231, 88, 177, 191, 33, 176, 56, 62, 57, 153, 137, 190, 59, 78, 145, 190, 137, 70, 43, 59, 230, 214, 1, 62, 12, 68, 18, 62, 77, 129, 128, 190, 24, 241, 203, 189, 151, 210, 41, 191, 143, 74, 213, 61, 70, 99, 146, 62, 255, 235, 247, 190, 53, 63, 204, 189, 94, 215, 187, 190, 35, 184, 26, 62, 166, 230, 199, 61, 20, 88, 124, 62, 111, 186, 143, 190, 149, 255, 75, 190, 8, 131, 55, 61, 9, 111, 207, 61, 219, 41, 130, 191, 209, 129, 189, 62, 197, 117, 77, 191, 22, 233, 51, 191, 37, 229, 141, 190, 175, 208, 159, 61, 254, 30, 13, 191, 238, 76, 127, 61, 194, 36, 41, 190, 37, 65, 127, 190, 123, 216, 50, 191, 189, 28, 110, 190, 176, 73, 118, 190, 106, 222, 190, 190, 167, 44, 86, 61, 86, 163, 87, 62, 144, 52, 17, 62, 234, 17, 9, 62, 196, 55, 208, 61, 243, 135, 120, 191, 139, 36, 105, 190, 17, 129, 161, 188, 81, 151, 203, 190, 27, 50, 223, 61, 194, 25, 144, 190, 57, 103, 131, 62, 196, 20, 58, 61, 5, 248, 52, 62, 10, 120, 45, 62, 5, 230, 186, 190, 64, 244, 27, 62, 127, 9, 40, 62, 3, 208, 198, 189, 223, 13, 46, 190, 57, 23, 225, 61, 98, 87, 231, 61, 129, 204, 27, 190, 139, 31, 239, 189, 86, 47, 2, 62, 217, 210, 120, 61, 211, 229, 33, 190, 152, 54, 232, 61, 216, 205, 43, 61, 44, 42, 14, 61, 7, 234, 46, 190, 24, 35, 3, 189, 100, 241, 39, 190, 73, 86, 199, 61, 207, 81, 8, 61, 115, 78, 72, 60, 15, 215, 34, 190, 117, 10, 50, 60, 204, 193, 166, 189, 153, 17, 164, 61, 132, 113, 155, 188, 69, 175, 190, 189, 103, 255, 8, 190, 140, 32, 6, 188, 205, 159, 73, 190, 126, 136, 7, 190, 127, 112, 54, 61, 126, 73, 143, 60, 68, 154, 217, 61, 45, 169, 149, 61, 146, 67, 59, 189, 69, 161, 252, 188, 111, 204, 45, 190, 65, 249, 27, 62, 211, 38, 50, 189, 63, 37, 240, 61, 178, 205, 218, 61, 183, 139, 158, 189, 221, 163, 19, 189, 221, 219, 117, 190, 108, 133, 6, 62, 17, 240, 108, 189, 107, 47, 255, 61, 106, 196, 56, 189, 67, 217, 6, 190, 94, 44, 31, 189, 190, 124, 105, 61, 89, 229, 129, 188, 182, 246, 5, 62, 89, 234, 26, 60, 174, 69, 21, 62, 161, 132, 131, 189, 95, 243, 91, 190, 246, 111, 36, 61, 102, 195, 92, 189, 240, 43, 29, 189, 54, 254, 201, 189, 230, 159, 14, 59, 177, 202, 75, 60, 99, 233, 73, 61, 137, 98, 54, 190, 38, 119, 221, 61, 89, 237, 27, 190, 35, 60, 61, 190, 8, 76, 69, 189, 142, 70, 198, 61, 98, 159, 19, 62, 29, 222, 1, 188, 48, 93, 37, 190, 219, 240, 195, 61, 132, 4, 12, 190, 42, 144, 101, 61, 77, 39, 210, 61, 195, 15, 23, 187, 219, 99, 3, 190, 178, 156, 198, 189, 185, 59, 60, 189, 38, 75, 183, 61, 50, 198, 55, 190, 89, 147, 162, 189, 123, 83, 22, 189, 41, 59, 51, 190, 117, 89, 21, 190, 161, 199, 34, 60, 82, 21, 172, 59, 41, 246, 78, 189, 157, 149, 129, 61, 219, 215, 18, 61, 162, 16, 28, 190, 228, 152, 37, 62, 119, 77, 131, 189, 105, 82, 210, 60, 234, 194, 135, 189, 112, 144, 236, 189, 59, 114, 183, 61, 215, 233, 154, 61, 103, 33, 78, 191, 39, 204, 43, 190, 165, 52, 147, 61, 14, 238, 74, 62, 171, 182, 174, 60, 183, 152, 132, 190, 49, 78, 123, 188, 12, 106, 107, 187, 246, 158, 23, 191, 82, 186, 195, 190, 165, 63, 202, 61, 89, 2, 12, 62, 175, 150, 89, 62, 91, 104, 40, 62, 252, 27, 5, 190, 153, 59, 22, 62, 202, 53, 27, 191, 14, 236, 86, 190, 120, 118, 140, 191, 208, 126, 30, 191, 77, 76, 28, 62, 35, 25, 160, 61, 156, 169, 19, 62, 151, 133, 154, 62, 220, 78, 173, 190, 218, 230, 11, 62, 152, 171, 41, 189, 33, 181, 29, 61, 85, 153, 108, 62, 215, 53, 30, 61, 216, 18, 162, 62, 182, 57, 51, 62, 241, 4, 140, 190, 241, 26, 25, 62, 214, 15, 209, 61, 215, 133, 36, 191, 126, 107, 100, 62, 179, 87, 56, 61, 84, 222, 125, 189, 189, 90, 218, 190, 224, 254, 16, 62, 22, 117, 228, 190, 204, 246, 103, 190, 230, 183, 156, 187, 152, 31, 111, 62, 84, 120, 33, 61, 42, 9, 77, 190, 123, 39, 77, 187, 7, 90, 255, 190, 60, 235, 27, 61, 209, 118, 79, 190, 92, 11, 15, 190, 148, 226, 156, 62, 32, 192, 62, 61, 129, 49, 114, 191, 189, 154, 33, 189, 34, 141, 169, 61, 18, 126, 176, 62, 28, 162, 169, 61, 234, 61, 100, 190, 45, 49, 158, 62, 236, 96, 211, 189, 88, 167, 70, 190, 180, 22, 36, 62, 233, 216, 124, 191, 146, 29, 32, 191, 103, 233, 76, 191, 105, 129, 106, 62, 36, 237, 0, 62, 4, 177, 20, 62, 88, 37, 164, 61, 189, 220, 5, 191, 68, 103, 219, 188, 99, 70, 188, 61, 192, 181, 61, 190, 135, 200, 37, 61, 86, 169, 205, 189, 55, 158, 93, 62, 2, 135, 254, 62, 193, 96, 81, 189, 26, 242, 37, 190, 198, 181, 128, 61, 35, 131, 74, 190, 114, 182, 59, 62, 182, 94, 10, 191, 95, 91, 205, 57, 21, 50, 140, 188, 236, 28, 223, 61, 39, 10, 113, 62, 38, 79, 141, 62, 143, 100, 171, 61, 203, 85, 224, 190, 177, 248, 81, 62, 19, 19, 245, 189, 89, 162, 156, 62, 72, 52, 83, 62, 66, 128, 131, 189, 175, 153, 123, 62, 128, 218, 82, 62, 117, 100, 177, 191, 186, 35, 218, 61, 202, 240, 165, 61, 54, 96, 89, 189, 126, 2, 232, 60, 37, 107, 176, 188, 65, 173, 150, 62, 185, 223, 184, 190, 242, 135, 157, 60, 201, 146, 144, 61, 189, 115, 251, 189, 200, 211, 207, 60, 94, 94, 149, 190, 247, 52, 7, 190, 119, 97, 114, 62, 29, 208, 133, 62, 71, 148, 234, 61, 29, 96, 32, 61, 163, 124, 160, 61, 213, 66, 218, 190, 153, 106, 232, 61, 27, 176, 182, 61, 229, 27, 47, 62, 114, 6, 82, 62, 175, 174, 2, 190, 183, 246, 216, 62, 113, 232, 234, 189, 116, 179, 28, 190, 233, 44, 135, 61, 29, 46, 89, 191, 221, 186, 189, 191, 115, 80, 185, 191, 193, 114, 89, 62, 237, 92, 237, 61, 27, 164, 199, 188, 214, 186, 236, 61, 119, 167, 210, 190, 200, 198, 195, 61, 190, 228, 31, 191, 75, 151, 10, 62, 244, 224, 77, 62, 119, 175, 41, 61, 37, 100, 128, 62, 61, 174, 185, 60, 57, 142, 7, 61, 84, 191, 17, 63, 198, 111, 159, 190, 108, 24, 148, 190, 20, 66, 158, 190, 236, 231, 90, 190, 210, 78, 5, 190, 56, 12, 174, 61, 210, 236, 82, 62, 30, 101, 207, 190, 195, 231, 1, 190, 139, 149, 151, 60, 132, 56, 52, 191, 88, 153, 7, 61, 67, 67, 2, 62, 219, 90, 106, 62, 206, 178, 172, 190, 174, 83, 231, 189, 139, 113, 191, 190, 122, 87, 235, 189, 31, 12, 166, 191, 242, 29, 250, 61, 48, 154, 34, 190, 209, 57, 211, 188, 0, 35, 198, 190, 1, 95, 207, 61, 44, 114, 39, 188, 81, 231, 126, 190, 83, 149, 151, 61, 78, 19, 144, 189, 95, 241, 152, 190, 36, 184, 145, 61, 110, 141, 228, 191, 37, 119, 155, 190, 206, 230, 83, 62, 88, 99, 115, 62, 198, 158, 142, 62, 41, 13, 61, 190, 50, 125, 9, 189, 32, 176, 52, 190, 68, 117, 129, 190, 71, 117, 227, 61, 70, 26, 50, 61, 30, 235, 139, 190, 91, 177, 9, 192, 129, 35, 241, 189, 39, 192, 5, 190, 119, 72, 19, 191, 42, 70, 129, 62, 185, 2, 201, 190, 42, 8, 79, 191, 65, 11, 22, 191, 176, 6, 105, 62, 12, 138, 57, 190, 195, 38, 164, 188, 212, 151, 173, 185, 32, 121, 54, 190, 114, 12, 134, 190, 36, 147, 219, 61, 206, 188, 39, 190, 142, 193, 107, 188, 148, 232, 164, 62, 142, 180, 82, 62, 123, 119, 174, 61, 212, 159, 12, 190, 4, 244, 31, 63, 250, 239, 165, 190, 22, 193, 43, 62, 11, 54, 147, 61, 134, 111, 142, 190, 69, 128, 210, 61, 30, 159, 147, 190, 45, 22, 163, 61, 152, 215, 70, 187, 188, 80, 5, 188, 231, 11, 41, 59, 136, 9, 95, 190, 155, 253, 103, 62, 248, 202, 45, 189, 2, 77, 169, 188, 140, 29, 31, 62, 81, 233, 149, 189, 44, 11, 23, 62, 157, 58, 234, 59, 89, 67, 32, 62, 36, 202, 85, 61, 35, 35, 24, 187, 115, 203, 128, 186, 85, 5, 138, 60, 244, 53, 65, 61, 239, 27, 196, 61, 139, 154, 53, 189, 208, 218, 201, 189, 32, 196, 48, 190, 45, 122, 188, 189, 161, 135, 44, 61, 35, 124, 222, 61, 173, 10, 46, 57, 142, 86, 29, 62, 99, 29, 11, 189, 225, 192, 162, 187, 196, 9, 156, 189, 216, 104, 44, 190, 56, 204, 25, 190, 117, 171, 119, 189, 184, 24, 250, 60, 254, 16, 221, 189, 201, 180, 241, 61, 17, 214, 42, 190, 53, 245, 8, 60, 48, 113, 201, 188, 187, 93, 228, 61, 16, 50, 44, 191, 232, 132, 140, 188, 5, 198, 252, 189, 229, 12, 97, 190, 210, 189, 175, 191, 143, 190, 46, 190, 166, 37, 215, 61, 204, 232, 151, 188, 250, 16, 132, 190, 182, 91, 126, 188, 202, 214, 112, 190, 125, 80, 171, 189, 78, 28, 27, 190, 207, 148, 217, 190, 168, 162, 51, 190, 95, 20, 76, 62, 191, 55, 18, 192, 67, 118, 41, 61, 71, 173, 12, 62, 204, 226, 5, 190, 59, 184, 45, 62, 187, 50, 63, 188, 219, 234, 135, 190, 33, 94, 139, 190, 221, 21, 31, 190, 117, 202, 245, 61, 104, 78, 64, 61, 173, 41, 75, 190, 46, 70, 237, 191, 89, 126, 254, 62, 87, 230, 72, 189, 152, 21, 6, 190, 217, 142, 56, 188, 115, 247, 219, 190, 175, 52, 2, 191, 194, 2, 218, 190, 147, 243, 174, 61, 172, 46, 4, 191, 5, 82, 160, 61, 168, 199, 232, 61, 129, 94, 224, 190, 141, 212, 57, 190, 63, 92, 143, 62, 27, 134, 70, 189, 174, 254, 13, 191, 228, 212, 67, 62, 12, 83, 213, 62, 94, 106, 103, 62, 204, 188, 54, 190, 199, 239, 184, 62, 36, 149, 185, 190, 86, 191, 75, 62, 150, 106, 162, 62, 255, 187, 122, 191, 222, 175, 46, 62, 59, 75, 59, 190, 82, 154, 128, 62, 36, 177, 139, 62, 116, 121, 2, 62, 114, 104, 112, 189, 200, 42, 197, 190, 54, 189, 123, 62, 243, 213, 243, 61, 245, 227, 77, 190, 201, 53, 98, 188, 146, 73, 85, 189, 227, 144, 37, 190, 166, 35, 174, 189, 33, 135, 184, 189, 27, 34, 81, 190, 134, 191, 173, 61, 92, 20, 103, 189, 189, 106, 218, 189, 159, 32, 92, 190, 184, 234, 6, 61, 252, 73, 128, 189, 220, 21, 227, 61, 206, 61, 95, 190, 102, 100, 13, 62, 141, 100, 68, 190, 147, 245, 79, 190, 74, 45, 37, 61, 2, 60, 165, 190, 227, 47, 193, 188, 133, 146, 187, 189, 231, 48, 79, 189, 142, 145, 166, 189, 31, 24, 46, 62, 245, 71, 139, 61, 88, 94, 137, 60, 179, 210, 8, 190, 56, 30, 100, 190, 196, 252, 126, 60, 101, 67, 73, 62, 234, 46, 153, 61, 58, 232, 102, 191, 148, 100, 127, 189, 109, 4, 165, 62, 79, 205, 25, 190, 100, 51, 255, 190, 10, 172, 35, 62, 198, 101, 162, 188, 225, 130, 30, 192, 32, 252, 11, 191, 53, 99, 154, 62, 47, 39, 192, 191, 135, 79, 158, 62, 194, 72, 177, 190, 58, 172, 206, 190, 54, 120, 30, 191, 77, 34, 169, 61, 141, 88, 101, 189, 45, 149, 151, 188, 211, 204, 159, 190, 234, 119, 207, 191, 161, 203, 187, 61, 240, 29, 130, 59, 161, 227, 117, 190, 60, 62, 109, 62, 83, 37, 143, 190, 65, 60, 130, 62, 191, 243, 7, 61, 29, 184, 0, 62, 205, 202, 30, 191, 42, 206, 125, 188, 158, 55, 228, 190, 28, 227, 20, 190, 11, 144, 122, 62, 116, 153, 26, 62, 140, 61, 179, 62, 72, 37, 120, 61, 255, 15, 125, 189, 128, 39, 40, 191, 207, 119, 201, 188, 22, 230, 31, 62, 148, 35, 116, 61, 118, 198, 190, 190, 165, 47, 135, 186, 64, 70, 3, 190, 123, 89, 164, 190, 127, 142, 112, 61, 97, 192, 47, 61, 248, 181, 96, 62, 151, 106, 119, 61, 169, 147, 10, 191, 255, 100, 155, 62, 183, 103, 29, 62, 107, 225, 49, 190, 241, 87, 85, 62, 215, 18, 105, 190, 136, 10, 26, 189, 63, 128, 159, 190, 249, 212, 150, 59, 42, 155, 151, 60, 49, 83, 3, 62, 38, 21, 27, 189, 138, 184, 136, 191, 103, 238, 46, 62, 121, 218, 70, 61, 58, 144, 130, 189, 89, 121, 81, 190, 114, 149, 217, 189, 63, 148, 114, 189, 204, 66, 81, 189, 244, 102, 75, 61, 33, 8, 50, 190, 154, 79, 5, 190, 147, 91, 11, 62, 195, 19, 33, 190, 208, 5, 15, 190, 146, 42, 24, 189, 61, 153, 226, 61, 232, 167, 229, 61, 112, 65, 136, 61, 57, 134, 213, 189, 110, 82, 143, 189, 208, 98, 158, 60, 106, 119, 98, 189, 250, 156, 159, 61, 124, 38, 31, 190, 122, 205, 198, 61, 49, 212, 142, 61, 10, 136, 132, 61, 21, 136, 18, 62, 32, 193, 222, 189, 14, 204, 86, 190, 71, 155, 11, 61, 209, 248, 67, 190, 189, 161, 27, 190, 249, 124, 30, 190, 101, 208, 238, 61, 62, 193, 133, 190, 132, 219, 212, 61, 60, 224, 129, 62, 124, 83, 211, 190, 239, 204, 185, 190, 45, 37, 137, 62, 122, 32, 106, 190, 57, 180, 180, 190, 203, 255, 100, 191, 123, 236, 46, 61, 248, 52, 177, 191, 79, 197, 64, 62, 58, 138, 96, 190, 241, 27, 5, 191, 143, 235, 38, 191, 139, 243, 180, 62, 63, 87, 88, 62, 120, 59, 3, 62, 163, 74, 200, 62, 36, 185, 142, 191, 9, 214, 189, 62, 13, 145, 157, 188, 196, 50, 58, 190, 157, 5, 18, 190, 89, 7, 156, 189, 123, 108, 36, 60, 46, 127, 152, 61, 237, 160, 59, 62, 96, 135, 39, 191, 107, 230, 225, 189, 78, 138, 45, 188, 51, 15, 0, 190, 137, 168, 199, 189, 9, 17, 85, 61, 211, 13, 204, 62, 213, 45, 43, 190, 133, 92, 29, 62, 50, 248, 153, 191, 168, 162, 139, 61, 216, 12, 106, 190, 137, 40, 199, 62, 187, 33, 105, 61, 239, 252, 32, 190, 39, 59, 110, 62, 212, 25, 141, 190, 71, 212, 88, 189, 125, 160, 72, 62, 229, 57, 168, 190, 202, 225, 15, 190, 145, 108, 90, 190, 95, 124, 121, 191, 191, 174, 156, 190, 156, 34, 69, 62, 40, 216, 31, 61, 209, 131, 74, 191, 238, 11, 95, 62, 134, 98, 9, 190, 223, 202, 21, 191, 221, 134, 153, 190, 46, 180, 33, 190, 92, 228, 101, 62, 50, 118, 215, 189, 34, 155, 17, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 198, 92, 61, 42, 219, 209, 188, 17, 167, 53, 188, 165, 58, 169, 59, 57, 11, 203, 62, 120, 214, 130, 62, 81, 164, 211, 189, 203, 71, 244, 61, 229, 71, 132, 189, 128, 206, 144, 61, 175, 125, 135, 189, 174, 75, 139, 62, 31, 200, 161, 62, 44, 228, 17, 190, 104, 221, 37, 190, 90, 224, 189, 189, 229, 198, 132, 189, 119, 168, 185, 61, 31, 62, 178, 62, 28, 82, 149, 61, 102, 44, 203, 189, 106, 126, 26, 188, 90, 7, 182, 61, 187, 238, 50, 190, 43, 11, 78, 62, 41, 47, 36, 62, 110, 113, 24, 190, 211, 213, 32, 189, 228, 58, 225, 189, 240, 236, 223, 60, 92, 103, 119, 189, 22, 102, 71, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 138, 181, 62, 251, 67, 174, 62, 251, 117, 3, 63, 177, 134, 22, 191, 34, 7, 22, 62, 149, 191, 40, 191, 62, 189, 219, 190, 229, 183, 173, 61, 223, 174, 127, 62, 84, 97, 149, 62, 56, 195, 209, 62, 229, 67, 142, 191, 105, 110, 207, 190, 232, 42, 66, 188, 86, 70, 253, 61, 103, 169, 197, 187, 91, 79, 225, 62, 75, 118, 95, 62, 246, 71, 171, 190, 126, 111, 85, 62, 148, 21, 61, 191, 89, 142, 17, 63, 224, 142, 177, 190, 39, 254, 127, 61, 168, 74, 133, 63, 219, 253, 42, 191, 75, 120, 142, 190, 97, 172, 139, 191, 167, 127, 158, 62, 90, 136, 148, 189, 110, 146, 52, 191, 21, 27, 145, 63, 170, 28, 122, 189, 112, 185, 164, 190, 12, 145, 174, 62, 22, 179, 250, 189, 59, 180, 177, 190, 115, 234, 187, 188, 138, 136, 76, 62, 51, 39, 214, 190, 40, 157, 177, 185, 122, 163, 147, 61, 31, 246, 163, 62, 155, 95, 167, 62, 25, 246, 3, 191, 188, 115, 178, 189, 52, 97, 198, 189, 82, 212, 23, 61, 212, 138, 30, 190, 248, 226, 66, 190, 196, 167, 95, 190, 65, 150, 142, 189, 32, 170, 227, 62, 63, 246, 211, 62, 148, 41, 17, 190, 16, 229, 81, 189, 129, 137, 228, 61, 83, 239, 14, 62, 28, 20, 42, 188, 200, 146, 158, 62, 145, 84, 67, 61, 17, 246, 52, 61, 103, 135, 150, 61, 248, 193, 122, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 97, 62, 62, 20, 232, 26, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {253, 141, 101, 189, 35, 66, 70, 191, 169, 165, 173, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {106, 6, 81, 63, 159, 157, 131, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0096/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}