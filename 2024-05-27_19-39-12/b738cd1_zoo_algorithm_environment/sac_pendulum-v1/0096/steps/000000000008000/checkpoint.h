// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 56, 153, 62, 164, 233, 115, 190, 187, 234, 78, 188, 69, 246, 180, 190, 50, 206, 161, 63, 81, 34, 160, 62, 52, 225, 162, 62, 180, 20, 48, 191, 35, 236, 183, 61, 193, 89, 208, 190, 194, 104, 89, 191, 47, 201, 33, 190, 225, 194, 30, 63, 1, 166, 140, 191, 190, 225, 53, 190, 245, 190, 245, 62, 226, 187, 133, 191, 39, 66, 136, 190, 253, 87, 137, 190, 51, 10, 65, 63, 73, 80, 11, 191, 181, 44, 235, 190, 138, 144, 168, 62, 218, 245, 48, 63, 192, 125, 73, 61, 221, 47, 127, 63, 162, 234, 8, 63, 128, 103, 37, 62, 16, 124, 98, 191, 220, 201, 102, 61, 230, 80, 149, 190, 126, 225, 126, 191, 47, 248, 168, 190, 78, 48, 12, 191, 218, 254, 31, 63, 64, 230, 28, 63, 206, 47, 84, 191, 168, 171, 131, 190, 104, 202, 87, 189, 63, 143, 138, 190, 36, 6, 233, 62, 167, 144, 3, 191, 203, 95, 157, 190, 51, 164, 123, 189, 91, 136, 106, 63, 170, 116, 132, 62, 200, 41, 52, 191, 192, 240, 32, 63, 159, 0, 21, 63, 24, 70, 89, 63, 31, 248, 216, 62, 232, 77, 4, 191, 93, 33, 195, 62, 139, 235, 212, 189, 16, 131, 216, 62, 79, 226, 109, 191, 172, 181, 7, 191, 254, 118, 10, 63, 113, 199, 72, 63, 239, 221, 216, 62, 133, 173, 146, 190, 71, 89, 138, 63, 225, 227, 184, 62, 75, 54, 141, 191, 206, 100, 23, 190, 46, 166, 48, 60, 246, 248, 18, 191, 161, 112, 243, 62, 137, 204, 220, 61, 213, 94, 88, 63, 4, 13, 20, 191, 184, 101, 224, 190, 68, 232, 156, 61, 6, 72, 18, 191, 193, 245, 110, 188, 212, 229, 215, 190, 6, 112, 23, 63, 98, 10, 99, 190, 35, 148, 13, 62, 56, 50, 86, 63, 148, 214, 6, 191, 242, 147, 140, 190, 222, 95, 195, 62, 47, 245, 22, 61, 53, 253, 7, 62, 244, 130, 14, 63, 250, 172, 230, 61, 197, 96, 99, 62, 184, 29, 198, 190, 55, 244, 150, 62, 190, 98, 61, 62, 160, 178, 181, 191, 40, 205, 197, 190, 217, 157, 76, 63, 238, 206, 56, 63, 113, 190, 202, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 147, 19, 191, 105, 89, 226, 60, 117, 139, 7, 63, 13, 102, 129, 62, 196, 244, 162, 190, 142, 126, 239, 189, 158, 40, 208, 190, 169, 239, 113, 190, 36, 167, 99, 62, 149, 75, 91, 189, 152, 120, 30, 63, 163, 163, 193, 190, 196, 70, 100, 60, 162, 79, 97, 190, 70, 11, 30, 191, 236, 50, 136, 62, 88, 37, 127, 62, 89, 88, 12, 63, 192, 14, 231, 62, 156, 218, 176, 190, 8, 74, 228, 189, 199, 102, 12, 190, 0, 123, 28, 63, 199, 17, 58, 191, 47, 188, 26, 63, 170, 56, 163, 190, 149, 66, 131, 62, 120, 158, 186, 62, 213, 12, 226, 62, 176, 147, 244, 187, 42, 161, 57, 62, 69, 162, 193, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 48, 218, 61, 42, 15, 106, 190, 111, 137, 2, 61, 255, 77, 160, 61, 50, 71, 15, 191, 70, 133, 184, 189, 83, 237, 217, 61, 69, 73, 150, 190, 109, 108, 54, 190, 29, 165, 6, 63, 45, 68, 217, 189, 196, 47, 117, 190, 172, 115, 23, 62, 124, 22, 86, 62, 118, 209, 152, 190, 208, 222, 70, 190, 53, 92, 235, 190, 219, 215, 60, 62, 121, 108, 230, 61, 200, 43, 153, 188, 240, 2, 55, 190, 209, 141, 132, 190, 12, 170, 153, 189, 93, 236, 9, 190, 245, 204, 76, 189, 49, 165, 119, 62, 118, 97, 232, 189, 79, 153, 12, 60, 182, 214, 46, 190, 221, 124, 107, 190, 141, 37, 16, 62, 63, 226, 205, 189, 161, 198, 190, 61, 33, 106, 16, 62, 146, 149, 162, 62, 125, 214, 182, 190, 108, 243, 59, 190, 225, 55, 210, 61, 234, 11, 129, 61, 118, 83, 104, 60, 98, 178, 55, 60, 17, 215, 199, 61, 125, 192, 223, 61, 114, 232, 233, 189, 52, 13, 58, 189, 116, 192, 106, 188, 92, 216, 65, 189, 253, 255, 196, 189, 162, 23, 210, 62, 208, 176, 18, 190, 142, 197, 74, 62, 139, 115, 48, 61, 108, 99, 13, 61, 26, 125, 48, 191, 217, 244, 200, 190, 146, 28, 23, 62, 41, 67, 30, 62, 223, 55, 223, 187, 150, 119, 168, 60, 104, 110, 168, 59, 101, 144, 139, 62, 245, 131, 72, 190, 162, 46, 148, 189, 215, 176, 135, 62, 9, 145, 244, 61, 59, 175, 234, 61, 155, 40, 28, 62, 178, 117, 139, 62, 136, 160, 39, 63, 90, 143, 209, 62, 133, 55, 138, 191, 42, 223, 133, 62, 212, 118, 229, 189, 105, 130, 156, 62, 52, 175, 128, 190, 54, 40, 23, 189, 108, 204, 136, 62, 201, 244, 45, 190, 166, 219, 128, 189, 44, 221, 86, 62, 76, 29, 3, 191, 105, 154, 24, 190, 134, 90, 38, 188, 220, 11, 48, 191, 35, 145, 92, 61, 61, 177, 18, 62, 80, 66, 98, 189, 70, 12, 61, 62, 67, 159, 29, 62, 128, 176, 254, 61, 174, 49, 128, 61, 231, 152, 174, 60, 120, 233, 178, 189, 209, 254, 158, 58, 186, 180, 9, 190, 198, 249, 181, 61, 81, 92, 79, 189, 6, 59, 15, 62, 225, 49, 55, 62, 6, 245, 151, 60, 174, 81, 249, 60, 43, 175, 244, 60, 180, 252, 43, 62, 190, 187, 247, 61, 77, 89, 30, 62, 183, 57, 65, 191, 234, 255, 234, 61, 55, 110, 189, 61, 223, 33, 191, 61, 89, 76, 243, 189, 123, 176, 27, 190, 178, 253, 127, 190, 101, 76, 94, 189, 222, 231, 25, 61, 248, 14, 119, 62, 164, 93, 1, 62, 95, 84, 236, 189, 129, 53, 163, 62, 26, 104, 206, 189, 111, 174, 116, 190, 152, 176, 151, 189, 85, 96, 37, 190, 243, 159, 9, 62, 80, 142, 152, 187, 31, 243, 55, 190, 197, 193, 205, 190, 235, 20, 152, 62, 166, 132, 255, 190, 133, 3, 39, 189, 171, 81, 180, 188, 18, 38, 140, 62, 196, 27, 224, 189, 100, 38, 189, 190, 162, 236, 9, 61, 105, 255, 35, 61, 103, 129, 104, 62, 155, 204, 34, 62, 183, 31, 144, 58, 216, 221, 244, 61, 197, 182, 41, 62, 15, 136, 103, 187, 107, 61, 172, 189, 8, 214, 188, 61, 167, 148, 186, 61, 95, 49, 148, 189, 225, 115, 132, 62, 6, 11, 159, 189, 104, 22, 231, 189, 28, 220, 206, 189, 89, 102, 48, 62, 169, 184, 200, 61, 139, 15, 173, 60, 61, 252, 89, 61, 163, 66, 123, 61, 11, 2, 255, 61, 184, 243, 69, 62, 180, 206, 34, 62, 162, 192, 140, 61, 1, 97, 65, 190, 233, 154, 154, 62, 211, 110, 102, 61, 98, 236, 244, 59, 244, 53, 157, 61, 183, 150, 185, 191, 129, 146, 233, 190, 168, 145, 77, 191, 57, 253, 127, 188, 150, 174, 13, 190, 123, 197, 99, 62, 240, 243, 87, 61, 82, 113, 196, 190, 160, 148, 60, 190, 62, 161, 178, 191, 44, 62, 51, 62, 253, 253, 15, 62, 184, 175, 212, 61, 211, 52, 184, 62, 253, 8, 145, 190, 33, 241, 61, 61, 104, 140, 100, 61, 170, 21, 252, 61, 15, 101, 153, 191, 42, 137, 238, 61, 23, 69, 148, 190, 110, 222, 125, 190, 0, 111, 50, 60, 207, 20, 109, 62, 191, 78, 24, 190, 100, 255, 67, 62, 64, 39, 57, 62, 240, 2, 226, 190, 104, 20, 63, 62, 122, 205, 35, 190, 90, 206, 230, 188, 252, 107, 255, 188, 155, 77, 67, 191, 181, 86, 19, 191, 151, 82, 102, 191, 202, 239, 177, 189, 20, 81, 229, 188, 106, 15, 246, 61, 40, 251, 74, 190, 235, 224, 238, 189, 49, 46, 119, 62, 150, 68, 206, 187, 234, 185, 35, 61, 205, 109, 162, 61, 144, 229, 20, 62, 170, 68, 76, 61, 46, 45, 192, 62, 22, 49, 93, 189, 250, 133, 10, 62, 218, 11, 79, 60, 173, 190, 220, 190, 122, 242, 155, 62, 170, 4, 188, 190, 153, 103, 134, 190, 156, 141, 166, 62, 36, 39, 35, 62, 37, 15, 151, 62, 117, 160, 12, 62, 48, 21, 106, 62, 44, 199, 187, 190, 94, 118, 29, 62, 128, 234, 184, 188, 255, 185, 196, 190, 182, 196, 105, 62, 90, 74, 29, 190, 203, 18, 82, 62, 139, 111, 180, 189, 52, 7, 155, 189, 189, 108, 240, 189, 139, 28, 4, 62, 234, 123, 130, 62, 162, 18, 107, 189, 235, 7, 78, 190, 99, 198, 97, 61, 92, 244, 64, 190, 58, 88, 61, 61, 143, 194, 130, 61, 222, 102, 231, 61, 162, 180, 221, 188, 67, 156, 238, 61, 169, 204, 94, 188, 207, 61, 131, 190, 24, 208, 66, 189, 81, 204, 28, 191, 168, 153, 44, 190, 120, 244, 52, 62, 191, 128, 2, 190, 215, 41, 220, 189, 68, 35, 92, 190, 176, 162, 101, 61, 225, 27, 62, 61, 92, 174, 107, 62, 57, 161, 72, 61, 11, 191, 38, 61, 210, 150, 18, 189, 47, 64, 149, 189, 188, 74, 18, 61, 55, 134, 181, 188, 107, 187, 162, 61, 15, 220, 53, 60, 161, 62, 158, 189, 45, 5, 180, 59, 174, 70, 152, 62, 61, 156, 216, 61, 243, 92, 235, 189, 21, 50, 181, 189, 35, 50, 142, 190, 118, 162, 68, 190, 104, 8, 71, 190, 146, 232, 150, 190, 142, 161, 243, 61, 165, 182, 63, 190, 165, 37, 129, 189, 10, 12, 15, 190, 201, 40, 94, 189, 207, 101, 185, 189, 148, 135, 240, 187, 13, 229, 6, 61, 66, 9, 85, 190, 126, 8, 177, 60, 120, 119, 149, 61, 110, 212, 57, 190, 34, 206, 101, 190, 101, 170, 46, 189, 147, 188, 67, 190, 32, 46, 171, 61, 248, 1, 55, 62, 126, 37, 162, 188, 241, 113, 206, 62, 134, 212, 109, 190, 209, 128, 144, 190, 177, 236, 165, 190, 199, 174, 242, 59, 86, 133, 231, 61, 192, 93, 162, 190, 204, 135, 32, 190, 124, 186, 19, 61, 208, 103, 118, 62, 190, 99, 137, 190, 85, 56, 195, 61, 213, 243, 45, 61, 142, 204, 137, 62, 212, 241, 144, 190, 101, 141, 10, 191, 244, 37, 143, 62, 77, 231, 184, 188, 89, 99, 165, 61, 36, 222, 243, 189, 194, 253, 57, 190, 170, 207, 237, 61, 133, 48, 18, 190, 61, 223, 191, 61, 18, 124, 190, 61, 225, 61, 24, 62, 25, 178, 203, 189, 247, 237, 133, 190, 131, 212, 23, 190, 53, 196, 245, 189, 195, 43, 7, 190, 57, 5, 215, 60, 155, 8, 34, 190, 239, 165, 229, 61, 73, 108, 37, 62, 160, 50, 87, 61, 247, 27, 127, 190, 101, 222, 171, 190, 228, 22, 16, 62, 30, 34, 7, 189, 253, 113, 188, 190, 139, 149, 166, 190, 91, 40, 145, 59, 42, 140, 9, 191, 144, 13, 154, 190, 239, 100, 66, 60, 7, 89, 119, 190, 153, 71, 42, 62, 213, 249, 37, 191, 40, 172, 38, 190, 72, 91, 26, 190, 24, 218, 54, 191, 253, 129, 167, 62, 221, 122, 19, 62, 181, 217, 207, 61, 54, 76, 145, 61, 133, 97, 178, 190, 152, 197, 138, 190, 201, 71, 124, 189, 99, 31, 19, 62, 93, 45, 90, 62, 140, 150, 235, 189, 34, 247, 45, 191, 93, 87, 224, 60, 167, 173, 151, 61, 49, 93, 135, 191, 195, 131, 74, 191, 1, 196, 166, 62, 52, 92, 2, 191, 194, 194, 124, 190, 160, 120, 34, 191, 130, 86, 174, 61, 46, 0, 110, 191, 211, 203, 102, 61, 216, 74, 125, 190, 211, 159, 14, 191, 198, 78, 222, 189, 150, 162, 159, 61, 174, 155, 13, 62, 227, 242, 28, 190, 139, 142, 160, 189, 67, 206, 54, 191, 89, 27, 43, 189, 16, 135, 54, 62, 133, 195, 199, 190, 76, 170, 15, 189, 80, 231, 162, 190, 191, 190, 45, 62, 64, 179, 4, 61, 51, 50, 33, 62, 82, 12, 242, 189, 151, 114, 113, 187, 67, 157, 81, 61, 9, 111, 207, 61, 59, 185, 50, 191, 208, 191, 194, 62, 76, 179, 165, 190, 188, 107, 50, 191, 241, 90, 130, 190, 204, 152, 129, 61, 152, 132, 19, 191, 253, 160, 15, 60, 27, 159, 42, 190, 242, 215, 134, 189, 141, 163, 220, 190, 62, 80, 138, 190, 25, 178, 132, 190, 245, 117, 162, 190, 97, 35, 148, 60, 185, 217, 46, 62, 206, 97, 133, 59, 39, 100, 5, 62, 59, 49, 128, 61, 23, 102, 8, 191, 78, 137, 42, 190, 57, 159, 72, 61, 50, 201, 114, 190, 37, 133, 137, 61, 47, 205, 58, 190, 40, 163, 25, 62, 128, 153, 96, 61, 87, 31, 10, 62, 214, 238, 30, 62, 90, 176, 137, 190, 124, 33, 190, 61, 127, 9, 40, 62, 3, 208, 198, 189, 150, 151, 45, 190, 206, 88, 228, 61, 223, 82, 232, 61, 74, 5, 27, 190, 88, 31, 239, 189, 86, 47, 2, 62, 217, 210, 120, 61, 49, 103, 33, 190, 165, 106, 236, 61, 216, 205, 43, 61, 62, 59, 18, 61, 28, 166, 46, 190, 24, 35, 3, 189, 100, 241, 39, 190, 73, 86, 199, 61, 23, 237, 10, 61, 221, 152, 100, 60, 15, 215, 34, 190, 117, 10, 50, 60, 118, 40, 165, 189, 81, 238, 164, 61, 132, 113, 155, 188, 175, 171, 188, 189, 103, 255, 8, 190, 50, 169, 0, 188, 222, 145, 73, 190, 126, 136, 7, 190, 127, 112, 54, 61, 207, 189, 157, 60, 68, 154, 217, 61, 45, 169, 149, 61, 146, 67, 59, 189, 69, 161, 252, 188, 111, 204, 45, 190, 65, 249, 27, 62, 211, 38, 50, 189, 63, 37, 240, 61, 178, 205, 218, 61, 183, 139, 158, 189, 221, 163, 19, 189, 221, 219, 117, 190, 108, 133, 6, 62, 17, 240, 108, 189, 107, 47, 255, 61, 106, 196, 56, 189, 67, 217, 6, 190, 94, 44, 31, 189, 190, 124, 105, 61, 89, 229, 129, 188, 182, 246, 5, 62, 89, 234, 26, 60, 174, 69, 21, 62, 161, 132, 131, 189, 95, 243, 91, 190, 246, 111, 36, 61, 102, 195, 92, 189, 240, 43, 29, 189, 54, 254, 201, 189, 230, 159, 14, 59, 177, 202, 75, 60, 99, 233, 73, 61, 137, 98, 54, 190, 38, 119, 221, 61, 89, 237, 27, 190, 35, 60, 61, 190, 8, 76, 69, 189, 142, 70, 198, 61, 98, 159, 19, 62, 29, 222, 1, 188, 48, 93, 37, 190, 219, 240, 195, 61, 132, 4, 12, 190, 42, 144, 101, 61, 77, 39, 210, 61, 195, 15, 23, 187, 219, 99, 3, 190, 178, 156, 198, 189, 185, 59, 60, 189, 38, 75, 183, 61, 50, 198, 55, 190, 89, 147, 162, 189, 123, 83, 22, 189, 41, 59, 51, 190, 117, 89, 21, 190, 161, 199, 34, 60, 82, 21, 172, 59, 41, 246, 78, 189, 157, 149, 129, 61, 219, 215, 18, 61, 162, 16, 28, 190, 228, 152, 37, 62, 119, 77, 131, 189, 105, 82, 210, 60, 234, 194, 135, 189, 112, 144, 236, 189, 200, 186, 128, 61, 92, 150, 106, 61, 87, 224, 35, 191, 63, 212, 232, 189, 125, 110, 167, 61, 170, 229, 226, 61, 196, 98, 161, 188, 55, 251, 24, 190, 56, 173, 162, 188, 24, 98, 38, 60, 122, 32, 21, 190, 34, 129, 145, 190, 84, 32, 244, 60, 161, 7, 115, 61, 154, 103, 49, 62, 37, 213, 54, 62, 0, 142, 210, 189, 248, 212, 47, 62, 8, 228, 1, 191, 177, 104, 24, 190, 81, 38, 68, 191, 153, 77, 10, 191, 18, 142, 97, 61, 104, 100, 254, 61, 6, 164, 76, 60, 27, 167, 138, 62, 119, 72, 169, 190, 36, 54, 0, 62, 114, 52, 215, 189, 177, 210, 143, 61, 91, 208, 110, 62, 215, 53, 30, 61, 120, 162, 131, 62, 12, 1, 29, 62, 221, 144, 173, 61, 118, 31, 82, 62, 132, 29, 13, 62, 61, 242, 19, 191, 40, 55, 129, 62, 133, 93, 166, 60, 189, 75, 5, 60, 185, 117, 166, 190, 47, 226, 74, 62, 139, 20, 81, 190, 146, 6, 12, 190, 252, 199, 28, 188, 140, 204, 123, 62, 36, 9, 27, 189, 95, 161, 29, 190, 172, 12, 53, 61, 21, 199, 9, 191, 40, 147, 108, 60, 167, 198, 246, 60, 254, 160, 50, 190, 122, 213, 137, 61, 206, 105, 167, 61, 220, 232, 139, 190, 142, 7, 178, 189, 46, 3, 216, 187, 21, 31, 131, 62, 68, 222, 147, 61, 22, 118, 198, 189, 226, 98, 129, 62, 236, 96, 211, 189, 232, 245, 58, 190, 24, 210, 60, 62, 155, 161, 21, 191, 87, 183, 39, 191, 178, 17, 67, 191, 77, 186, 140, 62, 223, 56, 10, 62, 113, 154, 58, 62, 204, 219, 216, 61, 149, 194, 138, 190, 18, 13, 135, 189, 24, 212, 45, 190, 167, 219, 17, 190, 76, 39, 182, 61, 86, 230, 140, 189, 39, 153, 128, 62, 86, 81, 197, 62, 10, 138, 73, 189, 212, 192, 174, 189, 185, 147, 144, 61, 75, 219, 233, 190, 204, 81, 30, 62, 105, 217, 138, 190, 65, 147, 13, 189, 75, 120, 82, 60, 154, 251, 164, 61, 67, 230, 82, 62, 142, 2, 140, 62, 189, 98, 11, 62, 245, 230, 140, 190, 176, 242, 44, 62, 19, 19, 245, 189, 54, 35, 134, 62, 57, 115, 71, 62, 112, 204, 130, 61, 13, 189, 214, 62, 55, 52, 162, 62, 240, 246, 147, 191, 175, 132, 13, 62, 153, 205, 140, 61, 229, 170, 205, 60, 241, 233, 138, 61, 101, 213, 83, 61, 222, 82, 111, 62, 102, 51, 105, 189, 218, 219, 234, 59, 21, 73, 122, 61, 199, 119, 71, 190, 191, 43, 77, 188, 132, 57, 82, 190, 135, 239, 37, 190, 211, 38, 97, 62, 154, 20, 134, 62, 15, 39, 226, 60, 25, 92, 203, 61, 80, 53, 235, 61, 215, 239, 146, 185, 240, 148, 141, 61, 8, 1, 12, 60, 45, 103, 176, 61, 181, 78, 69, 62, 157, 247, 214, 60, 170, 252, 190, 62, 113, 232, 234, 189, 125, 159, 177, 189, 36, 124, 149, 61, 17, 213, 221, 190, 39, 66, 115, 191, 1, 162, 89, 191, 72, 255, 28, 62, 196, 168, 102, 60, 119, 66, 193, 59, 56, 36, 148, 59, 250, 191, 129, 190, 145, 120, 252, 60, 234, 86, 184, 190, 185, 39, 144, 61, 132, 4, 210, 61, 46, 91, 29, 189, 7, 170, 157, 62, 148, 4, 210, 61, 233, 254, 44, 188, 237, 104, 15, 63, 198, 38, 143, 190, 206, 128, 121, 190, 138, 143, 106, 190, 118, 133, 58, 190, 67, 232, 234, 189, 18, 227, 73, 61, 178, 155, 17, 62, 139, 41, 155, 190, 177, 235, 29, 189, 99, 238, 132, 189, 23, 84, 228, 190, 27, 30, 171, 61, 67, 67, 2, 62, 33, 2, 97, 62, 90, 15, 136, 190, 162, 183, 11, 61, 139, 113, 191, 190, 122, 87, 235, 189, 53, 107, 142, 191, 90, 146, 9, 62, 72, 48, 37, 190, 63, 216, 191, 61, 77, 141, 36, 190, 86, 117, 240, 61, 196, 156, 117, 61, 56, 135, 255, 189, 121, 204, 179, 61, 20, 138, 18, 189, 53, 10, 151, 190, 88, 79, 252, 61, 165, 199, 160, 191, 48, 95, 144, 190, 168, 202, 78, 62, 193, 219, 137, 62, 153, 20, 141, 62, 41, 13, 61, 190, 53, 113, 136, 188, 12, 22, 39, 62, 231, 47, 141, 190, 146, 158, 230, 61, 120, 153, 190, 60, 95, 54, 114, 190, 82, 98, 189, 191, 131, 40, 61, 190, 39, 192, 5, 190, 232, 157, 1, 191, 234, 123, 151, 62, 255, 158, 119, 190, 46, 254, 77, 191, 252, 28, 9, 191, 122, 169, 131, 62, 16, 147, 54, 190, 187, 140, 139, 60, 160, 182, 73, 61, 158, 18, 223, 187, 41, 137, 154, 190, 166, 58, 192, 185, 251, 59, 26, 190, 135, 103, 23, 61, 221, 160, 188, 62, 112, 95, 106, 62, 0, 184, 55, 61, 4, 189, 40, 190, 183, 108, 34, 63, 28, 16, 143, 190, 134, 234, 166, 61, 84, 72, 4, 62, 94, 53, 165, 189, 239, 180, 176, 61, 181, 85, 89, 190, 246, 245, 100, 61, 136, 35, 140, 61, 105, 127, 177, 59, 89, 183, 166, 61, 90, 149, 7, 190, 129, 73, 51, 62, 248, 202, 45, 189, 209, 194, 85, 188, 140, 29, 31, 62, 81, 233, 149, 189, 44, 11, 23, 62, 157, 58, 234, 59, 89, 67, 32, 62, 178, 82, 107, 61, 163, 21, 195, 59, 115, 203, 128, 186, 85, 5, 138, 60, 244, 171, 92, 61, 54, 195, 198, 61, 139, 154, 53, 189, 8, 103, 199, 189, 69, 181, 48, 190, 49, 64, 178, 189, 156, 102, 68, 61, 35, 124, 222, 61, 100, 204, 239, 58, 241, 116, 36, 62, 86, 163, 0, 189, 114, 20, 42, 59, 196, 9, 156, 189, 250, 47, 44, 190, 1, 213, 24, 190, 176, 245, 115, 189, 106, 209, 16, 61, 218, 151, 211, 189, 201, 180, 241, 61, 17, 214, 42, 190, 53, 245, 8, 60, 48, 113, 201, 188, 138, 191, 190, 61, 96, 99, 5, 191, 32, 56, 222, 61, 5, 198, 252, 189, 229, 12, 97, 190, 23, 255, 151, 191, 58, 254, 202, 188, 109, 70, 148, 61, 164, 221, 232, 189, 126, 241, 52, 190, 253, 70, 228, 61, 153, 201, 69, 62, 230, 149, 120, 61, 57, 95, 150, 189, 137, 239, 69, 190, 229, 214, 167, 190, 35, 16, 14, 62, 172, 5, 197, 191, 165, 137, 193, 189, 155, 67, 41, 62, 176, 142, 157, 62, 48, 75, 106, 62, 187, 50, 63, 188, 201, 209, 39, 190, 23, 96, 34, 62, 206, 161, 212, 190, 223, 44, 243, 61, 58, 209, 172, 189, 38, 80, 163, 60, 25, 96, 162, 191, 13, 207, 34, 62, 87, 230, 72, 189, 65, 225, 217, 189, 228, 23, 230, 188, 201, 244, 9, 190, 117, 34, 1, 191, 111, 54, 200, 190, 14, 89, 6, 62, 47, 112, 215, 190, 187, 134, 81, 61, 94, 4, 201, 61, 18, 54, 69, 190, 143, 191, 45, 190, 55, 40, 100, 189, 169, 6, 219, 187, 126, 175, 151, 190, 157, 177, 51, 62, 246, 17, 200, 62, 23, 17, 248, 61, 226, 59, 21, 190, 109, 76, 199, 62, 198, 72, 176, 190, 196, 160, 73, 190, 41, 1, 137, 62, 98, 166, 32, 191, 233, 100, 237, 61, 221, 243, 39, 190, 22, 9, 130, 62, 137, 93, 112, 62, 216, 120, 179, 61, 191, 80, 48, 189, 125, 121, 137, 190, 137, 93, 113, 62, 243, 213, 243, 61, 53, 215, 223, 189, 117, 229, 29, 189, 146, 73, 85, 189, 174, 134, 6, 190, 14, 37, 66, 189, 170, 187, 157, 189, 105, 141, 75, 190, 163, 153, 14, 62, 105, 240, 79, 189, 126, 180, 217, 189, 133, 127, 159, 189, 184, 234, 6, 61, 25, 87, 131, 189, 220, 21, 227, 61, 0, 23, 241, 189, 239, 12, 24, 62, 188, 175, 58, 190, 220, 137, 41, 190, 167, 208, 152, 61, 8, 211, 49, 190, 227, 47, 193, 188, 26, 190, 65, 189, 247, 147, 86, 189, 54, 194, 250, 189, 31, 24, 46, 62, 47, 175, 177, 187, 184, 52, 84, 61, 46, 16, 253, 189, 201, 252, 65, 190, 234, 39, 238, 60, 219, 236, 45, 62, 234, 46, 153, 61, 170, 134, 47, 191, 226, 119, 10, 190, 83, 55, 171, 62, 74, 110, 141, 190, 28, 202, 13, 191, 144, 110, 74, 62, 253, 242, 133, 190, 93, 61, 251, 191, 243, 137, 43, 191, 0, 249, 169, 62, 121, 198, 167, 191, 162, 73, 184, 62, 20, 141, 175, 190, 174, 158, 51, 191, 233, 112, 168, 190, 213, 147, 226, 187, 94, 213, 185, 186, 189, 250, 208, 188, 199, 203, 159, 190, 235, 165, 137, 191, 65, 72, 98, 62, 118, 199, 40, 62, 252, 53, 56, 190, 30, 247, 120, 62, 49, 189, 128, 190, 186, 28, 140, 62, 26, 99, 154, 61, 58, 153, 22, 62, 158, 187, 218, 190, 50, 76, 23, 189, 143, 204, 128, 190, 28, 227, 20, 190, 206, 246, 97, 62, 118, 145, 54, 62, 7, 40, 111, 62, 65, 194, 218, 62, 63, 189, 20, 62, 170, 8, 224, 190, 198, 60, 68, 59, 75, 55, 50, 61, 182, 152, 64, 62, 141, 169, 81, 190, 237, 10, 171, 61, 124, 158, 227, 61, 222, 236, 223, 189, 45, 248, 41, 61, 168, 150, 130, 61, 2, 0, 240, 61, 46, 232, 18, 188, 48, 229, 167, 190, 152, 198, 12, 62, 48, 106, 26, 62, 98, 10, 139, 61, 251, 88, 33, 62, 7, 251, 211, 189, 142, 77, 106, 61, 180, 3, 43, 62, 55, 167, 175, 189, 12, 243, 215, 189, 56, 245, 18, 61, 220, 165, 14, 189, 181, 210, 33, 191, 213, 82, 36, 62, 121, 218, 70, 61, 58, 144, 130, 189, 239, 243, 48, 190, 235, 245, 215, 189, 63, 148, 114, 189, 255, 162, 63, 189, 244, 102, 75, 61, 60, 130, 17, 190, 49, 149, 201, 189, 78, 222, 43, 62, 135, 64, 26, 190, 248, 138, 5, 190, 146, 42, 24, 189, 61, 153, 226, 61, 37, 90, 19, 62, 155, 78, 201, 61, 156, 123, 148, 189, 110, 82, 143, 189, 208, 98, 158, 60, 78, 76, 18, 189, 250, 156, 159, 61, 124, 38, 31, 190, 185, 133, 225, 61, 49, 212, 142, 61, 190, 222, 193, 61, 21, 136, 18, 62, 32, 193, 222, 189, 14, 204, 86, 190, 83, 193, 73, 61, 245, 114, 35, 190, 189, 161, 27, 190, 249, 124, 30, 190, 101, 208, 238, 61, 75, 130, 217, 190, 183, 123, 94, 62, 71, 135, 156, 62, 234, 6, 200, 190, 96, 203, 147, 190, 209, 72, 133, 62, 3, 128, 1, 191, 65, 22, 135, 190, 168, 38, 22, 191, 113, 51, 9, 62, 222, 126, 144, 191, 9, 48, 174, 61, 90, 177, 121, 190, 245, 23, 73, 191, 74, 47, 140, 190, 146, 191, 203, 62, 47, 190, 177, 61, 20, 50, 27, 62, 61, 100, 252, 62, 127, 41, 134, 191, 96, 24, 112, 62, 75, 161, 72, 61, 74, 33, 39, 190, 131, 131, 171, 189, 3, 114, 42, 189, 17, 90, 187, 189, 16, 185, 147, 61, 69, 94, 87, 62, 27, 217, 35, 190, 144, 197, 140, 189, 8, 73, 203, 60, 51, 15, 0, 190, 127, 37, 128, 61, 150, 18, 24, 61, 146, 242, 147, 61, 193, 137, 139, 61, 229, 235, 158, 61, 3, 189, 133, 191, 95, 59, 208, 61, 244, 77, 25, 190, 39, 11, 169, 62, 65, 207, 78, 190, 203, 46, 165, 188, 92, 4, 96, 188, 41, 245, 50, 190, 206, 55, 93, 189, 152, 156, 72, 62, 188, 226, 150, 190, 68, 222, 197, 190, 40, 117, 91, 189, 7, 203, 82, 191, 254, 61, 149, 189, 140, 55, 67, 61, 88, 218, 2, 61, 159, 229, 106, 190, 25, 43, 45, 62, 133, 250, 249, 189, 177, 83, 216, 190, 143, 178, 169, 189, 175, 39, 142, 189, 193, 122, 106, 62, 75, 34, 131, 190, 7, 56, 2, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 165, 116, 61, 8, 122, 66, 189, 23, 50, 14, 60, 234, 216, 168, 189, 255, 88, 173, 62, 208, 79, 128, 62, 17, 247, 135, 189, 90, 113, 201, 61, 102, 226, 128, 189, 109, 166, 178, 60, 57, 109, 103, 189, 64, 43, 129, 62, 49, 115, 139, 62, 1, 237, 16, 190, 104, 221, 37, 190, 90, 224, 189, 189, 140, 71, 42, 189, 186, 253, 103, 61, 66, 27, 168, 62, 88, 132, 28, 61, 250, 218, 218, 60, 71, 62, 224, 59, 49, 132, 182, 61, 49, 190, 45, 190, 29, 220, 127, 61, 64, 59, 245, 61, 247, 12, 50, 190, 63, 197, 168, 60, 224, 125, 255, 189, 67, 10, 114, 61, 174, 217, 121, 188, 9, 60, 59, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {172, 30, 74, 62, 233, 187, 147, 62, 229, 121, 221, 62, 16, 215, 134, 190, 233, 44, 47, 62, 15, 223, 27, 191, 159, 94, 163, 190, 38, 165, 18, 62, 22, 206, 127, 62, 146, 31, 39, 62, 9, 170, 110, 62, 4, 80, 88, 191, 45, 43, 196, 190, 132, 76, 66, 188, 86, 70, 253, 61, 103, 169, 197, 187, 5, 114, 215, 62, 133, 189, 122, 62, 181, 58, 178, 190, 97, 38, 125, 62, 9, 251, 217, 190, 158, 140, 255, 62, 25, 147, 235, 190, 201, 68, 128, 61, 185, 97, 51, 63, 170, 91, 23, 191, 112, 217, 240, 189, 218, 196, 137, 191, 137, 134, 64, 62, 9, 38, 149, 189, 90, 112, 52, 191, 218, 175, 83, 63, 0, 101, 149, 188, 219, 0, 50, 190, 59, 151, 38, 62, 103, 192, 48, 190, 74, 145, 90, 190, 250, 115, 215, 60, 63, 149, 33, 61, 250, 204, 148, 190, 194, 188, 240, 185, 57, 222, 31, 62, 93, 10, 117, 62, 228, 27, 252, 187, 194, 35, 233, 190, 180, 122, 178, 189, 52, 97, 198, 189, 82, 212, 23, 61, 62, 153, 157, 189, 93, 49, 192, 189, 75, 222, 42, 190, 5, 164, 131, 60, 27, 173, 142, 62, 28, 38, 255, 61, 197, 15, 240, 60, 40, 249, 81, 189, 118, 14, 219, 61, 125, 216, 135, 62, 207, 63, 248, 60, 47, 219, 89, 62, 215, 214, 199, 61, 154, 59, 53, 61, 214, 6, 219, 61, 239, 84, 53, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 227, 55, 62, 22, 45, 216, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {45, 54, 85, 63, 165, 140, 161, 191, 41, 4, 54, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {10, 38, 64, 64, 101, 45, 222, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0096/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}