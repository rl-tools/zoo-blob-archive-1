// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 56, 153, 62, 164, 233, 115, 190, 187, 234, 78, 188, 217, 71, 154, 190, 94, 194, 149, 61, 149, 217, 206, 62, 251, 88, 67, 62, 217, 137, 177, 190, 43, 226, 9, 190, 211, 58, 45, 190, 17, 197, 185, 190, 163, 205, 12, 190, 107, 221, 145, 62, 170, 126, 182, 190, 255, 54, 154, 188, 113, 73, 10, 62, 244, 79, 218, 190, 18, 107, 146, 190, 138, 85, 229, 190, 128, 168, 248, 62, 88, 53, 165, 189, 53, 57, 15, 191, 96, 40, 107, 190, 235, 14, 0, 63, 43, 20, 246, 61, 47, 158, 236, 189, 227, 64, 200, 62, 172, 144, 23, 190, 75, 96, 218, 190, 177, 248, 146, 189, 85, 194, 99, 190, 90, 161, 237, 190, 49, 245, 250, 190, 89, 221, 4, 191, 8, 211, 136, 190, 197, 43, 187, 62, 149, 193, 70, 190, 166, 94, 49, 190, 87, 53, 61, 190, 204, 60, 68, 62, 208, 39, 206, 62, 188, 54, 206, 190, 121, 165, 252, 190, 252, 99, 181, 190, 116, 140, 221, 62, 244, 175, 1, 63, 10, 30, 248, 190, 150, 229, 3, 63, 144, 201, 245, 62, 220, 212, 186, 62, 195, 1, 178, 62, 35, 194, 204, 190, 255, 50, 162, 61, 18, 213, 140, 190, 11, 226, 37, 62, 193, 99, 7, 190, 74, 167, 4, 191, 18, 189, 211, 62, 105, 231, 216, 62, 106, 30, 120, 62, 210, 191, 200, 190, 30, 63, 57, 61, 141, 162, 165, 62, 139, 96, 0, 191, 125, 230, 203, 189, 37, 171, 31, 190, 108, 98, 182, 190, 112, 198, 13, 62, 130, 28, 124, 62, 63, 0, 170, 62, 192, 135, 63, 190, 196, 0, 2, 191, 247, 156, 21, 62, 46, 109, 222, 190, 99, 110, 116, 190, 197, 114, 4, 190, 17, 153, 212, 62, 89, 25, 111, 190, 5, 10, 106, 189, 255, 20, 197, 62, 42, 176, 173, 190, 69, 82, 46, 190, 185, 0, 73, 62, 152, 143, 199, 61, 221, 217, 232, 189, 41, 132, 2, 62, 132, 72, 82, 62, 106, 222, 33, 62, 5, 183, 76, 190, 226, 17, 51, 62, 115, 175, 31, 62, 143, 43, 119, 190, 249, 95, 185, 190, 145, 102, 208, 62, 235, 183, 12, 63, 57, 46, 135, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 147, 19, 191, 246, 247, 82, 62, 35, 155, 231, 62, 89, 22, 245, 61, 4, 154, 235, 190, 210, 17, 146, 187, 186, 96, 249, 190, 40, 18, 47, 190, 101, 237, 70, 189, 88, 131, 30, 190, 3, 204, 8, 63, 13, 245, 178, 190, 131, 236, 94, 189, 250, 216, 0, 191, 74, 251, 181, 190, 137, 153, 148, 62, 148, 140, 113, 62, 11, 9, 0, 63, 166, 216, 222, 62, 26, 253, 132, 190, 197, 132, 110, 190, 247, 141, 165, 190, 213, 65, 4, 63, 154, 120, 5, 191, 214, 121, 11, 63, 200, 141, 225, 190, 217, 227, 242, 62, 5, 250, 201, 62, 108, 48, 174, 62, 44, 254, 64, 187, 59, 197, 192, 62, 121, 9, 253, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 48, 218, 61, 78, 58, 39, 190, 241, 61, 181, 189, 157, 242, 238, 60, 146, 57, 20, 190, 33, 11, 220, 188, 236, 93, 30, 61, 121, 130, 17, 188, 32, 17, 137, 189, 31, 125, 37, 62, 142, 121, 45, 190, 99, 223, 187, 189, 219, 237, 124, 61, 99, 136, 33, 62, 132, 62, 59, 189, 243, 234, 44, 189, 11, 194, 89, 61, 30, 189, 185, 61, 54, 186, 213, 61, 99, 92, 125, 188, 214, 55, 37, 189, 9, 13, 49, 190, 76, 59, 198, 189, 60, 33, 199, 189, 3, 236, 50, 189, 175, 38, 41, 62, 84, 220, 38, 190, 81, 70, 151, 189, 19, 199, 237, 189, 182, 230, 145, 189, 221, 30, 16, 62, 97, 77, 38, 190, 161, 198, 190, 61, 146, 225, 155, 61, 115, 192, 182, 61, 36, 54, 90, 188, 65, 230, 59, 189, 217, 223, 199, 61, 7, 17, 19, 62, 177, 124, 217, 61, 40, 32, 163, 61, 52, 172, 19, 62, 21, 154, 31, 62, 225, 229, 168, 61, 91, 87, 14, 62, 231, 230, 179, 188, 84, 221, 134, 60, 239, 200, 14, 190, 140, 168, 40, 62, 187, 180, 242, 189, 217, 52, 18, 62, 36, 21, 7, 62, 83, 137, 59, 188, 155, 194, 56, 189, 42, 57, 210, 189, 22, 63, 9, 62, 255, 56, 24, 62, 125, 66, 242, 189, 187, 50, 172, 189, 147, 191, 157, 58, 197, 211, 153, 61, 185, 225, 24, 190, 156, 145, 189, 189, 176, 78, 142, 189, 9, 145, 244, 61, 45, 98, 157, 189, 136, 18, 52, 189, 231, 152, 38, 61, 118, 113, 51, 62, 245, 198, 239, 61, 13, 187, 11, 190, 21, 70, 183, 61, 151, 159, 226, 60, 68, 227, 211, 60, 188, 247, 29, 190, 201, 216, 5, 190, 213, 223, 16, 62, 3, 10, 41, 190, 73, 162, 245, 189, 93, 216, 31, 62, 38, 74, 43, 190, 152, 12, 133, 61, 254, 189, 206, 61, 58, 92, 131, 189, 138, 129, 239, 188, 31, 0, 118, 61, 130, 155, 68, 60, 25, 161, 33, 62, 58, 217, 254, 61, 37, 29, 33, 62, 148, 108, 25, 62, 176, 33, 32, 62, 27, 40, 127, 189, 225, 204, 215, 189, 140, 5, 210, 188, 47, 201, 191, 61, 81, 92, 79, 189, 215, 178, 21, 62, 125, 159, 49, 62, 245, 143, 115, 189, 10, 108, 190, 61, 112, 122, 49, 58, 148, 3, 133, 61, 48, 126, 41, 62, 171, 52, 19, 62, 93, 175, 170, 189, 0, 136, 54, 61, 189, 196, 24, 62, 2, 178, 8, 59, 9, 30, 94, 61, 19, 97, 88, 189, 253, 155, 184, 189, 96, 190, 230, 188, 252, 223, 200, 59, 139, 255, 21, 62, 227, 174, 16, 62, 167, 24, 248, 189, 90, 19, 207, 61, 111, 31, 32, 190, 157, 38, 22, 190, 59, 137, 47, 190, 138, 36, 149, 60, 160, 158, 38, 62, 19, 113, 222, 59, 111, 209, 215, 189, 233, 195, 47, 190, 223, 148, 20, 62, 111, 247, 4, 190, 133, 3, 39, 189, 84, 13, 238, 189, 168, 38, 27, 62, 172, 191, 13, 190, 50, 59, 28, 190, 248, 109, 176, 61, 48, 251, 154, 61, 4, 98, 3, 62, 135, 75, 156, 61, 189, 123, 75, 189, 253, 28, 21, 62, 123, 169, 228, 61, 249, 206, 11, 190, 63, 49, 2, 190, 190, 221, 148, 60, 112, 142, 80, 189, 17, 96, 40, 190, 197, 69, 45, 62, 127, 136, 61, 189, 214, 248, 227, 61, 86, 168, 17, 190, 83, 211, 26, 61, 251, 166, 54, 189, 251, 232, 122, 61, 39, 154, 155, 59, 34, 16, 191, 189, 85, 176, 45, 61, 28, 71, 146, 189, 109, 18, 248, 189, 11, 162, 88, 189, 196, 222, 144, 189, 125, 221, 238, 61, 211, 110, 102, 61, 165, 232, 1, 62, 250, 62, 157, 189, 49, 196, 195, 60, 68, 59, 147, 59, 243, 119, 19, 190, 135, 241, 77, 60, 176, 68, 40, 190, 161, 144, 32, 62, 173, 244, 165, 188, 0, 76, 18, 188, 68, 61, 43, 190, 147, 222, 45, 190, 49, 149, 24, 62, 90, 0, 11, 62, 108, 75, 29, 189, 46, 237, 41, 62, 172, 185, 40, 190, 141, 26, 166, 61, 18, 96, 40, 190, 141, 236, 44, 62, 202, 123, 224, 189, 225, 231, 7, 62, 197, 4, 133, 61, 228, 78, 25, 190, 32, 76, 168, 188, 246, 6, 12, 62, 131, 73, 48, 190, 154, 68, 132, 61, 123, 38, 93, 61, 128, 245, 6, 190, 77, 33, 167, 189, 122, 205, 35, 190, 124, 11, 178, 189, 242, 153, 211, 61, 181, 2, 14, 190, 49, 36, 21, 62, 46, 152, 8, 190, 95, 5, 95, 189, 65, 201, 244, 189, 121, 61, 45, 61, 113, 235, 19, 190, 38, 141, 4, 61, 141, 34, 4, 62, 152, 237, 60, 61, 250, 247, 243, 189, 55, 140, 9, 61, 49, 192, 254, 61, 130, 113, 125, 61, 168, 14, 22, 62, 107, 57, 76, 61, 255, 221, 135, 61, 120, 63, 220, 189, 122, 128, 223, 189, 110, 196, 106, 61, 215, 241, 243, 189, 103, 90, 252, 189, 166, 250, 44, 62, 94, 226, 178, 61, 214, 31, 138, 61, 184, 121, 255, 60, 196, 218, 52, 62, 188, 200, 88, 189, 181, 230, 132, 60, 128, 234, 184, 188, 161, 56, 144, 188, 222, 106, 14, 61, 33, 199, 61, 189, 24, 15, 44, 62, 156, 182, 41, 190, 200, 223, 2, 62, 93, 100, 17, 190, 239, 205, 28, 62, 128, 93, 4, 62, 178, 30, 130, 189, 216, 127, 211, 189, 87, 160, 174, 189, 25, 145, 1, 190, 213, 41, 6, 61, 99, 191, 214, 60, 189, 121, 102, 61, 83, 136, 83, 189, 151, 187, 238, 186, 117, 144, 22, 62, 158, 164, 232, 189, 37, 137, 221, 187, 89, 61, 12, 190, 199, 224, 7, 190, 171, 31, 23, 61, 135, 12, 253, 188, 217, 81, 23, 190, 38, 108, 182, 61, 139, 225, 230, 61, 243, 22, 46, 61, 175, 255, 34, 62, 196, 227, 208, 188, 11, 191, 38, 61, 239, 115, 162, 61, 58, 80, 150, 189, 189, 105, 180, 187, 224, 165, 195, 61, 190, 20, 220, 61, 246, 134, 29, 62, 12, 195, 232, 188, 117, 62, 221, 61, 227, 3, 27, 62, 64, 35, 220, 61, 16, 234, 180, 189, 197, 228, 225, 189, 36, 95, 0, 190, 154, 199, 25, 190, 201, 50, 150, 60, 112, 190, 21, 190, 158, 62, 19, 62, 98, 71, 28, 190, 242, 227, 63, 60, 171, 126, 173, 189, 27, 118, 7, 189, 148, 200, 71, 189, 169, 146, 254, 61, 180, 225, 134, 60, 36, 139, 213, 189, 244, 74, 225, 61, 20, 224, 19, 62, 92, 138, 93, 189, 139, 228, 96, 189, 97, 3, 177, 188, 219, 241, 137, 189, 32, 46, 171, 61, 189, 237, 4, 62, 87, 58, 6, 188, 198, 253, 36, 190, 131, 155, 26, 190, 29, 35, 8, 190, 67, 132, 217, 60, 14, 214, 164, 61, 183, 99, 34, 61, 20, 161, 245, 189, 116, 171, 34, 190, 128, 154, 251, 61, 19, 61, 49, 61, 56, 100, 175, 186, 157, 192, 12, 62, 124, 155, 129, 61, 12, 22, 15, 62, 29, 140, 46, 190, 153, 0, 139, 188, 204, 184, 10, 62, 252, 190, 244, 188, 35, 201, 171, 189, 89, 207, 24, 190, 236, 63, 203, 60, 159, 175, 30, 62, 25, 3, 206, 189, 37, 211, 56, 61, 127, 33, 108, 60, 2, 70, 48, 61, 89, 208, 147, 189, 253, 137, 101, 58, 124, 253, 7, 190, 53, 196, 245, 189, 202, 97, 4, 62, 176, 167, 17, 190, 140, 209, 162, 61, 39, 167, 202, 61, 17, 67, 15, 189, 55, 162, 238, 61, 237, 28, 206, 60, 91, 236, 155, 60, 169, 118, 139, 189, 81, 190, 121, 189, 46, 105, 43, 190, 241, 138, 32, 190, 221, 229, 1, 61, 70, 219, 27, 190, 121, 28, 3, 190, 239, 10, 15, 62, 115, 226, 51, 190, 50, 194, 129, 61, 245, 118, 9, 189, 56, 117, 12, 190, 251, 107, 50, 62, 218, 101, 247, 188, 204, 160, 7, 62, 26, 15, 213, 61, 67, 236, 31, 62, 16, 30, 68, 61, 30, 51, 18, 61, 29, 29, 170, 189, 56, 10, 12, 62, 55, 179, 22, 61, 17, 202, 200, 186, 140, 150, 235, 189, 159, 0, 9, 190, 55, 26, 7, 189, 232, 55, 32, 60, 240, 208, 66, 189, 228, 81, 32, 58, 93, 176, 209, 60, 213, 174, 141, 189, 90, 87, 225, 61, 176, 94, 41, 190, 173, 92, 221, 61, 41, 102, 115, 61, 159, 160, 100, 189, 219, 162, 18, 190, 188, 18, 233, 189, 217, 87, 162, 186, 113, 37, 47, 61, 183, 138, 207, 189, 243, 178, 9, 190, 7, 80, 28, 190, 226, 135, 40, 62, 28, 58, 187, 189, 126, 81, 104, 61, 241, 57, 174, 61, 235, 30, 214, 60, 199, 55, 45, 190, 155, 16, 240, 189, 64, 44, 211, 189, 44, 0, 245, 61, 3, 204, 74, 189, 196, 15, 9, 62, 73, 88, 104, 189, 9, 111, 207, 61, 122, 240, 58, 189, 0, 126, 23, 62, 152, 65, 177, 189, 166, 177, 17, 190, 243, 94, 23, 62, 122, 70, 51, 61, 228, 90, 4, 190, 191, 253, 250, 189, 65, 41, 3, 61, 240, 43, 167, 61, 167, 134, 233, 61, 103, 49, 48, 190, 183, 48, 33, 190, 123, 148, 34, 60, 189, 122, 204, 189, 39, 26, 215, 189, 225, 108, 64, 61, 192, 102, 181, 61, 78, 134, 10, 190, 53, 142, 174, 61, 76, 19, 207, 189, 196, 236, 33, 62, 223, 195, 210, 60, 170, 89, 144, 60, 53, 111, 253, 189, 190, 122, 9, 62, 172, 240, 172, 61, 4, 42, 158, 61, 90, 70, 176, 61, 103, 207, 8, 190, 125, 91, 115, 189, 127, 9, 40, 62, 38, 92, 128, 189, 154, 139, 31, 190, 244, 83, 14, 62, 223, 82, 232, 61, 210, 39, 14, 190, 106, 64, 230, 189, 195, 51, 49, 62, 70, 48, 214, 61, 155, 8, 245, 189, 235, 248, 7, 62, 164, 236, 197, 61, 116, 55, 80, 61, 254, 36, 45, 190, 133, 26, 218, 60, 178, 158, 4, 190, 14, 113, 1, 62, 91, 116, 12, 61, 24, 40, 255, 60, 1, 1, 254, 189, 237, 27, 104, 61, 125, 67, 135, 189, 93, 10, 227, 61, 167, 224, 17, 188, 1, 179, 185, 189, 189, 217, 8, 190, 205, 82, 120, 188, 108, 94, 52, 190, 22, 172, 218, 189, 197, 214, 192, 61, 143, 203, 19, 61, 234, 71, 204, 61, 45, 169, 149, 61, 138, 34, 61, 189, 77, 232, 182, 188, 127, 151, 14, 190, 44, 250, 27, 62, 85, 216, 74, 188, 241, 197, 36, 62, 178, 205, 218, 61, 183, 139, 158, 189, 221, 163, 19, 189, 212, 148, 46, 190, 108, 133, 6, 62, 116, 33, 9, 189, 143, 167, 48, 62, 106, 196, 56, 189, 67, 217, 6, 190, 142, 73, 31, 189, 59, 18, 248, 61, 240, 146, 63, 61, 182, 246, 5, 62, 89, 234, 26, 60, 11, 125, 45, 62, 40, 167, 27, 189, 163, 231, 44, 190, 175, 234, 145, 61, 115, 28, 89, 188, 210, 73, 182, 60, 65, 217, 143, 189, 26, 140, 111, 60, 177, 202, 75, 60, 1, 132, 211, 61, 223, 42, 10, 190, 38, 119, 221, 61, 88, 13, 28, 190, 193, 18, 32, 190, 215, 231, 39, 189, 36, 4, 232, 61, 192, 217, 41, 62, 174, 25, 134, 59, 48, 93, 37, 190, 140, 125, 195, 61, 176, 85, 255, 189, 224, 220, 195, 61, 77, 39, 210, 61, 185, 236, 7, 58, 241, 60, 254, 189, 178, 156, 198, 189, 116, 177, 25, 189, 226, 95, 193, 61, 4, 204, 40, 190, 125, 28, 12, 189, 105, 0, 23, 189, 186, 58, 51, 190, 141, 210, 18, 190, 231, 45, 39, 60, 178, 62, 180, 60, 199, 76, 162, 188, 1, 13, 137, 61, 142, 69, 117, 61, 63, 208, 25, 190, 112, 81, 47, 62, 62, 119, 117, 189, 93, 234, 120, 61, 35, 164, 68, 189, 112, 144, 236, 189, 56, 254, 80, 188, 180, 170, 10, 190, 126, 77, 2, 190, 49, 238, 205, 188, 38, 53, 10, 59, 216, 125, 181, 61, 17, 219, 208, 189, 23, 74, 49, 61, 119, 214, 21, 190, 108, 137, 143, 60, 115, 73, 202, 188, 166, 167, 87, 61, 150, 139, 91, 189, 244, 210, 122, 57, 184, 91, 6, 62, 66, 190, 248, 61, 39, 250, 195, 189, 190, 38, 159, 60, 174, 205, 38, 190, 228, 245, 33, 62, 47, 160, 196, 189, 119, 26, 42, 57, 109, 228, 208, 189, 197, 63, 198, 61, 168, 53, 231, 189, 168, 97, 183, 61, 60, 102, 24, 190, 253, 232, 62, 61, 49, 233, 241, 189, 194, 103, 76, 189, 127, 111, 208, 189, 215, 53, 30, 61, 142, 89, 100, 61, 135, 168, 132, 61, 185, 48, 154, 61, 31, 73, 248, 58, 198, 81, 140, 60, 226, 92, 188, 61, 170, 141, 147, 61, 127, 11, 142, 188, 137, 94, 197, 189, 151, 34, 187, 189, 66, 230, 211, 61, 230, 47, 43, 190, 158, 154, 163, 188, 200, 204, 8, 190, 123, 145, 222, 61, 118, 88, 115, 61, 69, 196, 159, 61, 75, 32, 32, 62, 181, 109, 27, 190, 197, 140, 50, 190, 181, 247, 74, 61, 88, 251, 15, 190, 122, 178, 15, 189, 151, 224, 201, 61, 127, 222, 21, 189, 20, 234, 254, 189, 97, 8, 31, 60, 206, 253, 25, 62, 203, 241, 160, 189, 13, 220, 158, 61, 50, 22, 12, 62, 236, 96, 211, 189, 107, 110, 30, 190, 104, 64, 29, 61, 19, 129, 52, 60, 187, 141, 199, 189, 10, 140, 97, 60, 110, 194, 21, 62, 32, 186, 229, 61, 146, 99, 242, 61, 215, 192, 171, 61, 158, 230, 238, 189, 114, 202, 197, 189, 154, 64, 118, 188, 198, 42, 49, 190, 81, 227, 241, 61, 46, 148, 13, 190, 71, 204, 36, 62, 136, 92, 35, 62, 0, 137, 170, 189, 226, 34, 15, 190, 159, 78, 95, 61, 197, 221, 246, 189, 227, 65, 109, 189, 153, 87, 30, 62, 53, 115, 178, 189, 195, 69, 34, 189, 232, 117, 219, 189, 242, 126, 62, 188, 107, 238, 206, 61, 170, 130, 151, 61, 26, 154, 144, 189, 46, 184, 32, 190, 19, 19, 245, 189, 40, 70, 26, 62, 32, 139, 19, 189, 19, 111, 2, 190, 53, 55, 104, 189, 6, 228, 142, 188, 20, 23, 131, 189, 87, 96, 135, 61, 137, 50, 219, 61, 72, 90, 220, 188, 86, 63, 228, 61, 105, 17, 121, 187, 180, 224, 242, 61, 114, 196, 22, 190, 56, 203, 25, 189, 190, 254, 14, 61, 184, 174, 26, 190, 83, 212, 75, 61, 208, 90, 15, 190, 3, 12, 136, 59, 129, 233, 4, 62, 9, 2, 151, 61, 90, 212, 70, 61, 203, 82, 25, 190, 147, 68, 169, 61, 58, 128, 240, 187, 2, 140, 15, 61, 90, 0, 3, 188, 117, 92, 8, 189, 49, 178, 23, 62, 213, 211, 158, 61, 53, 253, 1, 190, 113, 232, 234, 189, 150, 160, 19, 62, 252, 181, 241, 61, 117, 112, 52, 62, 51, 177, 26, 190, 117, 241, 223, 189, 215, 22, 237, 188, 109, 214, 140, 61, 22, 188, 194, 60, 178, 160, 27, 60, 43, 78, 36, 190, 89, 246, 22, 62, 110, 52, 96, 61, 165, 235, 223, 60, 30, 141, 12, 62, 131, 93, 102, 189, 119, 22, 26, 62, 86, 200, 180, 61, 246, 206, 183, 61, 113, 103, 49, 62, 42, 187, 240, 189, 214, 115, 176, 61, 124, 111, 183, 189, 64, 241, 113, 61, 147, 51, 185, 188, 248, 8, 213, 61, 245, 199, 36, 189, 166, 227, 22, 190, 14, 75, 170, 61, 123, 61, 160, 189, 251, 74, 28, 190, 120, 241, 9, 62, 67, 67, 2, 62, 89, 56, 156, 61, 25, 135, 45, 61, 53, 236, 204, 188, 197, 13, 84, 189, 118, 179, 158, 188, 224, 94, 212, 60, 61, 87, 4, 62, 32, 95, 228, 189, 22, 67, 57, 61, 17, 108, 38, 61, 136, 143, 39, 62, 135, 214, 212, 189, 230, 40, 226, 189, 3, 97, 41, 62, 114, 252, 39, 61, 219, 181, 11, 190, 89, 60, 141, 61, 194, 140, 223, 61, 107, 220, 139, 188, 129, 236, 16, 62, 66, 131, 116, 189, 231, 187, 168, 61, 123, 52, 21, 190, 6, 107, 25, 62, 254, 86, 104, 61, 6, 136, 49, 62, 152, 102, 25, 190, 206, 64, 1, 190, 187, 99, 251, 189, 55, 100, 98, 189, 52, 190, 36, 190, 39, 192, 5, 190, 190, 93, 64, 189, 65, 186, 29, 62, 89, 56, 160, 61, 86, 138, 64, 188, 125, 4, 0, 62, 216, 82, 164, 187, 61, 138, 12, 190, 105, 255, 230, 189, 172, 199, 120, 61, 232, 224, 210, 61, 70, 231, 117, 189, 135, 252, 6, 61, 251, 120, 7, 190, 198, 195, 212, 188, 194, 61, 251, 61, 176, 67, 207, 189, 22, 240, 172, 60, 218, 224, 37, 190, 104, 216, 14, 62, 52, 211, 246, 61, 179, 41, 149, 61, 128, 199, 224, 61, 58, 18, 49, 62, 107, 39, 156, 61, 39, 87, 22, 190, 7, 232, 207, 189, 45, 13, 102, 61, 70, 217, 195, 188, 178, 187, 49, 190, 53, 254, 155, 60, 163, 211, 153, 61, 248, 202, 45, 189, 42, 218, 7, 187, 232, 214, 37, 62, 138, 58, 143, 189, 90, 99, 28, 62, 3, 41, 95, 60, 22, 230, 48, 62, 217, 20, 152, 61, 140, 147, 159, 60, 206, 167, 19, 59, 211, 15, 23, 61, 158, 150, 140, 61, 66, 220, 203, 61, 110, 62, 209, 188, 234, 171, 160, 189, 133, 22, 33, 190, 13, 198, 160, 189, 49, 0, 134, 61, 8, 49, 7, 62, 224, 102, 21, 60, 211, 111, 46, 62, 116, 241, 236, 188, 253, 155, 115, 60, 90, 255, 129, 189, 77, 13, 35, 190, 122, 135, 15, 190, 169, 85, 254, 188, 192, 37, 47, 61, 231, 175, 197, 189, 45, 188, 3, 62, 87, 41, 29, 190, 245, 58, 168, 60, 48, 113, 201, 188, 254, 78, 148, 60, 146, 177, 9, 190, 130, 200, 131, 189, 98, 242, 15, 61, 12, 33, 10, 190, 135, 146, 15, 190, 230, 55, 4, 189, 7, 213, 52, 62, 56, 13, 138, 189, 191, 17, 17, 190, 254, 86, 22, 62, 148, 218, 186, 61, 182, 18, 129, 61, 153, 138, 14, 187, 10, 194, 14, 190, 109, 190, 205, 189, 219, 57, 0, 62, 77, 170, 243, 189, 49, 63, 71, 61, 7, 244, 23, 62, 97, 140, 100, 61, 212, 134, 48, 62, 128, 191, 184, 188, 70, 154, 216, 188, 231, 23, 220, 60, 209, 83, 130, 61, 165, 100, 29, 61, 152, 74, 236, 189, 32, 255, 214, 61, 31, 220, 22, 62, 93, 166, 16, 62, 87, 230, 72, 189, 164, 160, 15, 62, 205, 23, 253, 189, 100, 204, 220, 61, 20, 150, 249, 60, 85, 16, 235, 61, 240, 128, 151, 61, 105, 208, 0, 190, 156, 21, 74, 60, 25, 124, 244, 61, 221, 9, 39, 189, 135, 222, 10, 62, 138, 216, 175, 189, 185, 117, 242, 61, 152, 159, 41, 189, 246, 247, 10, 62, 40, 165, 5, 62, 217, 89, 172, 61, 109, 98, 37, 190, 87, 197, 231, 61, 29, 75, 163, 189, 106, 112, 219, 189, 255, 95, 40, 62, 11, 186, 49, 190, 175, 241, 255, 61, 45, 16, 55, 189, 5, 97, 18, 62, 74, 168, 10, 62, 240, 20, 225, 188, 49, 126, 56, 189, 98, 174, 136, 189, 67, 104, 20, 62, 243, 213, 243, 61, 0, 73, 130, 189, 203, 67, 57, 189, 146, 73, 85, 189, 174, 134, 6, 190, 14, 37, 66, 189, 83, 32, 149, 189, 95, 172, 38, 190, 239, 150, 48, 62, 105, 240, 79, 189, 142, 179, 217, 189, 7, 93, 144, 189, 184, 234, 6, 61, 25, 87, 131, 189, 0, 90, 10, 62, 185, 238, 198, 189, 107, 64, 37, 62, 199, 137, 48, 190, 228, 108, 42, 190, 236, 61, 222, 61, 190, 208, 19, 190, 227, 47, 193, 188, 13, 175, 131, 188, 247, 147, 86, 189, 38, 132, 253, 189, 31, 24, 46, 62, 40, 90, 168, 59, 39, 134, 168, 61, 194, 51, 207, 189, 82, 155, 51, 190, 10, 222, 226, 60, 201, 14, 49, 62, 234, 46, 153, 61, 79, 232, 5, 190, 142, 55, 22, 190, 235, 97, 32, 62, 208, 152, 42, 62, 206, 113, 247, 189, 240, 199, 21, 62, 186, 225, 228, 61, 200, 127, 207, 189, 213, 227, 12, 190, 33, 78, 29, 62, 136, 51, 12, 190, 239, 130, 18, 62, 134, 42, 41, 190, 20, 98, 170, 189, 88, 61, 65, 61, 169, 63, 216, 189, 145, 165, 45, 190, 17, 27, 174, 189, 41, 107, 198, 189, 83, 120, 11, 62, 184, 195, 255, 189, 56, 158, 212, 61, 244, 106, 149, 61, 162, 68, 164, 61, 237, 141, 211, 188, 203, 46, 6, 62, 149, 186, 142, 61, 128, 119, 66, 188, 161, 167, 170, 189, 63, 207, 121, 189, 21, 72, 174, 189, 28, 227, 20, 190, 234, 42, 130, 61, 0, 212, 16, 62, 106, 134, 12, 62, 70, 166, 7, 190, 65, 155, 207, 189, 52, 132, 45, 61, 30, 56, 146, 189, 204, 219, 198, 59, 119, 246, 48, 62, 223, 50, 130, 61, 183, 98, 47, 61, 13, 169, 49, 62, 52, 25, 29, 190, 122, 39, 179, 187, 91, 180, 11, 61, 63, 237, 10, 62, 53, 43, 26, 62, 184, 12, 118, 59, 185, 235, 43, 62, 226, 138, 40, 61, 98, 3, 206, 60, 50, 164, 43, 62, 227, 11, 83, 61, 134, 135, 3, 62, 76, 189, 208, 59, 193, 172, 127, 189, 194, 238, 225, 189, 182, 148, 188, 189, 220, 163, 192, 189, 34, 2, 48, 190, 76, 185, 55, 61, 121, 218, 70, 61, 184, 101, 83, 189, 152, 241, 29, 190, 122, 99, 185, 189, 231, 32, 114, 189, 119, 145, 11, 189, 127, 202, 143, 61, 136, 45, 9, 190, 89, 45, 172, 189, 120, 241, 49, 62, 177, 145, 218, 189, 216, 187, 246, 189, 171, 242, 253, 188, 45, 36, 4, 62, 83, 6, 26, 62, 89, 94, 233, 61, 119, 91, 75, 189, 160, 149, 52, 189, 88, 91, 121, 61, 231, 190, 159, 187, 142, 232, 182, 61, 18, 62, 17, 190, 80, 158, 8, 62, 175, 5, 193, 61, 146, 172, 0, 62, 129, 196, 40, 62, 80, 155, 191, 189, 219, 201, 52, 190, 175, 116, 156, 61, 164, 14, 20, 190, 209, 18, 211, 189, 200, 209, 0, 190, 101, 208, 238, 61, 88, 86, 187, 61, 108, 179, 16, 62, 172, 187, 45, 62, 129, 229, 180, 61, 5, 47, 18, 189, 186, 95, 24, 62, 169, 240, 225, 189, 120, 178, 28, 190, 186, 175, 11, 190, 49, 4, 222, 61, 107, 129, 1, 62, 32, 142, 186, 60, 119, 217, 30, 190, 144, 221, 219, 189, 61, 70, 28, 190, 148, 59, 174, 61, 238, 147, 160, 61, 49, 196, 195, 61, 253, 121, 153, 60, 95, 110, 13, 190, 158, 136, 225, 61, 190, 236, 186, 185, 53, 210, 148, 60, 84, 247, 18, 190, 16, 64, 2, 62, 137, 10, 4, 190, 189, 7, 163, 61, 229, 66, 140, 61, 80, 10, 224, 189, 207, 192, 242, 189, 227, 76, 223, 61, 51, 15, 0, 190, 37, 212, 208, 60, 185, 248, 135, 189, 49, 180, 44, 189, 219, 5, 5, 190, 226, 133, 253, 189, 55, 71, 234, 61, 21, 200, 25, 188, 39, 117, 137, 189, 191, 77, 12, 62, 202, 46, 253, 61, 238, 126, 159, 189, 153, 34, 96, 189, 85, 124, 194, 189, 103, 175, 235, 189, 20, 80, 5, 62, 97, 180, 137, 189, 149, 42, 250, 189, 61, 116, 171, 61, 161, 166, 199, 189, 124, 74, 158, 189, 239, 192, 135, 189, 56, 195, 174, 188, 58, 214, 60, 189, 153, 140, 15, 62, 59, 31, 196, 59, 158, 25, 46, 190, 207, 194, 206, 189, 81, 128, 184, 189, 252, 122, 27, 62, 192, 212, 15, 189, 246, 29, 199, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {146, 216, 135, 60, 98, 43, 207, 189, 116, 162, 132, 189, 176, 20, 247, 189, 225, 24, 192, 61, 199, 60, 33, 62, 181, 186, 1, 190, 172, 193, 153, 61, 198, 107, 113, 189, 152, 86, 232, 60, 153, 116, 19, 189, 201, 116, 128, 61, 68, 40, 35, 62, 20, 154, 1, 190, 37, 57, 225, 189, 125, 48, 129, 189, 186, 154, 129, 189, 168, 18, 52, 189, 217, 105, 199, 61, 160, 96, 37, 189, 129, 177, 48, 62, 150, 102, 167, 189, 236, 215, 17, 61, 90, 53, 29, 190, 27, 241, 161, 61, 217, 249, 33, 61, 108, 131, 37, 190, 222, 11, 20, 190, 98, 216, 0, 190, 116, 76, 190, 61, 118, 210, 154, 189, 107, 90, 104, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 225, 217, 61, 153, 91, 10, 62, 128, 134, 169, 59, 180, 87, 189, 188, 140, 214, 190, 61, 156, 188, 246, 189, 137, 178, 99, 189, 150, 182, 12, 62, 126, 172, 2, 62, 18, 49, 216, 61, 169, 142, 99, 61, 129, 165, 173, 187, 23, 17, 251, 60, 100, 209, 244, 188, 250, 33, 250, 61, 202, 81, 196, 187, 249, 193, 140, 61, 13, 110, 154, 61, 79, 252, 28, 190, 203, 14, 162, 61, 190, 233, 8, 190, 115, 90, 159, 60, 126, 229, 208, 189, 134, 90, 128, 61, 182, 151, 212, 61, 239, 148, 10, 190, 207, 10, 21, 190, 6, 82, 223, 187, 130, 248, 6, 60, 133, 254, 12, 190, 66, 186, 18, 190, 235, 11, 29, 62, 108, 109, 121, 60, 70, 2, 216, 189, 73, 38, 250, 60, 125, 94, 19, 190, 198, 131, 251, 189, 240, 177, 179, 188, 101, 12, 179, 61, 137, 154, 13, 58, 247, 149, 232, 189, 216, 6, 224, 61, 88, 26, 239, 59, 252, 154, 56, 189, 239, 253, 50, 190, 28, 38, 10, 190, 13, 30, 228, 189, 111, 16, 37, 60, 117, 60, 215, 188, 5, 154, 6, 59, 80, 72, 4, 190, 94, 54, 255, 59, 121, 249, 175, 61, 179, 53, 252, 189, 75, 204, 140, 189, 54, 15, 87, 189, 228, 38, 181, 60, 119, 226, 149, 61, 32, 129, 183, 60, 194, 10, 77, 189, 129, 152, 233, 61, 191, 125, 63, 61, 225, 48, 20, 62, 224, 244, 52, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 239, 122, 61, 103, 65, 14, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {183, 251, 238, 62, 194, 238, 181, 63, 69, 15, 46, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {205, 75, 23, 190, 112, 226, 131, 60};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0096/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}