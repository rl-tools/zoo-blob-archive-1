// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 56, 153, 62, 164, 233, 115, 190, 187, 234, 78, 188, 62, 12, 221, 190, 24, 155, 50, 63, 229, 141, 195, 62, 81, 150, 202, 62, 237, 10, 36, 191, 169, 74, 119, 61, 100, 133, 150, 190, 73, 64, 208, 190, 7, 152, 117, 189, 253, 84, 19, 63, 133, 205, 144, 191, 43, 223, 172, 189, 163, 144, 200, 62, 3, 45, 55, 191, 220, 130, 92, 190, 203, 6, 207, 190, 51, 159, 32, 63, 107, 89, 12, 191, 65, 37, 22, 191, 9, 81, 48, 190, 89, 204, 53, 63, 175, 83, 28, 61, 42, 254, 66, 62, 26, 57, 18, 63, 63, 69, 237, 61, 73, 89, 92, 191, 156, 116, 11, 62, 24, 191, 90, 190, 31, 25, 37, 191, 75, 134, 200, 190, 198, 23, 31, 191, 29, 206, 112, 190, 239, 9, 40, 63, 193, 14, 0, 191, 207, 37, 17, 190, 13, 81, 120, 189, 9, 128, 9, 190, 129, 167, 23, 63, 91, 74, 8, 191, 23, 200, 0, 191, 222, 104, 37, 191, 168, 108, 109, 63, 201, 213, 145, 62, 198, 129, 7, 191, 57, 129, 56, 63, 1, 67, 30, 63, 248, 123, 34, 63, 7, 159, 223, 62, 223, 146, 188, 190, 250, 47, 141, 62, 245, 166, 53, 190, 37, 152, 227, 62, 6, 139, 215, 190, 152, 118, 232, 190, 235, 223, 179, 62, 109, 141, 15, 63, 149, 34, 231, 62, 65, 92, 204, 190, 156, 58, 153, 62, 119, 233, 202, 62, 142, 136, 105, 191, 168, 41, 131, 61, 234, 190, 233, 189, 136, 167, 224, 190, 238, 150, 241, 62, 45, 219, 157, 61, 4, 211, 250, 62, 22, 58, 191, 190, 228, 8, 5, 191, 68, 224, 112, 61, 223, 46, 38, 191, 255, 162, 32, 189, 173, 147, 158, 190, 2, 99, 43, 63, 29, 200, 145, 190, 231, 223, 18, 62, 9, 178, 92, 63, 105, 111, 4, 191, 167, 137, 19, 190, 28, 139, 229, 62, 142, 18, 44, 60, 231, 4, 97, 61, 227, 95, 146, 62, 87, 86, 21, 61, 48, 52, 184, 61, 47, 45, 10, 191, 172, 141, 255, 62, 211, 189, 137, 62, 171, 1, 22, 191, 74, 104, 161, 190, 236, 135, 49, 63, 95, 231, 229, 62, 100, 4, 41, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 147, 19, 191, 134, 168, 68, 188, 190, 10, 10, 63, 84, 58, 99, 62, 231, 71, 131, 190, 145, 161, 108, 189, 251, 222, 195, 190, 123, 22, 173, 190, 204, 68, 97, 62, 181, 68, 193, 188, 46, 156, 49, 63, 132, 48, 241, 190, 251, 162, 219, 187, 223, 88, 133, 190, 170, 30, 180, 190, 7, 83, 220, 62, 101, 87, 105, 62, 161, 215, 0, 63, 184, 182, 4, 63, 145, 135, 149, 190, 77, 12, 60, 190, 226, 18, 38, 190, 12, 223, 38, 63, 229, 2, 18, 191, 171, 98, 29, 63, 178, 102, 141, 190, 114, 55, 168, 62, 109, 133, 181, 62, 19, 13, 6, 63, 94, 25, 31, 62, 12, 136, 165, 62, 127, 232, 15, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 48, 218, 61, 78, 58, 39, 190, 66, 6, 182, 189, 155, 9, 220, 60, 146, 57, 20, 190, 144, 224, 3, 189, 136, 127, 6, 61, 121, 130, 17, 188, 32, 17, 137, 189, 31, 125, 37, 62, 73, 203, 56, 190, 99, 223, 187, 189, 122, 238, 113, 61, 90, 231, 21, 62, 132, 62, 59, 189, 243, 234, 44, 189, 11, 194, 89, 61, 97, 33, 169, 61, 199, 191, 189, 61, 99, 92, 125, 188, 214, 55, 37, 189, 132, 26, 53, 190, 76, 59, 198, 189, 206, 123, 219, 189, 250, 224, 71, 189, 61, 221, 34, 62, 86, 85, 50, 190, 113, 253, 152, 189, 19, 199, 237, 189, 182, 230, 145, 189, 135, 59, 8, 62, 113, 73, 41, 190, 161, 198, 190, 61, 215, 49, 69, 188, 158, 63, 112, 62, 124, 48, 241, 189, 79, 170, 73, 61, 62, 197, 56, 62, 47, 40, 91, 188, 88, 250, 115, 186, 117, 68, 15, 61, 53, 218, 179, 61, 210, 3, 20, 62, 97, 115, 25, 188, 16, 15, 169, 61, 139, 151, 172, 189, 197, 93, 16, 190, 186, 28, 67, 190, 236, 20, 139, 62, 40, 161, 69, 190, 191, 198, 76, 62, 185, 202, 74, 61, 233, 136, 123, 189, 122, 44, 0, 190, 226, 125, 154, 190, 43, 106, 22, 62, 116, 43, 82, 62, 198, 135, 34, 190, 113, 150, 8, 190, 229, 50, 72, 190, 156, 17, 128, 61, 114, 184, 144, 190, 250, 209, 195, 188, 130, 93, 74, 61, 9, 145, 244, 61, 190, 89, 85, 62, 56, 39, 13, 62, 76, 117, 168, 61, 143, 208, 33, 63, 0, 137, 163, 62, 227, 174, 107, 191, 218, 248, 153, 62, 201, 22, 25, 61, 50, 217, 86, 62, 65, 57, 128, 190, 29, 148, 152, 60, 251, 76, 12, 62, 133, 71, 11, 190, 85, 130, 92, 189, 139, 182, 136, 62, 136, 236, 186, 190, 222, 155, 226, 60, 107, 187, 91, 59, 184, 68, 220, 190, 217, 214, 32, 62, 164, 5, 21, 62, 247, 98, 10, 61, 93, 77, 191, 62, 46, 49, 12, 62, 158, 15, 104, 62, 17, 144, 5, 190, 126, 174, 229, 61, 246, 192, 185, 188, 5, 2, 253, 60, 29, 142, 212, 189, 128, 27, 249, 61, 81, 92, 79, 189, 38, 142, 243, 61, 88, 221, 73, 62, 231, 37, 168, 189, 158, 118, 238, 190, 237, 89, 183, 189, 111, 31, 35, 62, 41, 192, 249, 61, 254, 241, 40, 62, 241, 177, 238, 190, 242, 100, 155, 61, 103, 18, 149, 61, 84, 253, 53, 61, 37, 106, 3, 190, 149, 40, 202, 189, 154, 49, 21, 190, 83, 75, 11, 60, 146, 130, 174, 60, 238, 78, 72, 62, 30, 97, 77, 62, 240, 44, 218, 189, 55, 193, 95, 62, 225, 126, 18, 190, 205, 196, 158, 190, 186, 239, 236, 189, 65, 60, 43, 190, 136, 202, 32, 62, 176, 193, 250, 59, 202, 235, 32, 190, 91, 218, 131, 190, 134, 55, 77, 62, 83, 167, 162, 190, 133, 3, 39, 189, 117, 145, 244, 60, 210, 166, 85, 62, 238, 195, 210, 189, 158, 135, 21, 190, 25, 47, 221, 61, 12, 233, 243, 59, 110, 65, 99, 62, 218, 113, 39, 62, 132, 152, 128, 60, 156, 65, 42, 62, 60, 166, 50, 62, 3, 73, 55, 189, 139, 36, 186, 189, 103, 158, 155, 61, 37, 80, 132, 61, 166, 12, 240, 189, 44, 177, 156, 62, 37, 36, 74, 189, 82, 78, 185, 189, 231, 42, 135, 189, 18, 116, 132, 62, 97, 162, 246, 61, 248, 125, 105, 61, 186, 35, 48, 61, 191, 57, 78, 60, 164, 85, 102, 61, 34, 1, 17, 62, 112, 202, 145, 61, 106, 19, 101, 61, 48, 174, 167, 189, 56, 225, 24, 62, 211, 110, 102, 61, 111, 26, 233, 61, 64, 93, 102, 58, 135, 202, 9, 191, 62, 180, 205, 190, 80, 90, 156, 190, 105, 109, 229, 60, 89, 20, 91, 190, 176, 231, 63, 62, 190, 45, 61, 190, 157, 247, 39, 190, 247, 155, 139, 190, 159, 162, 39, 191, 206, 156, 56, 62, 136, 192, 6, 61, 237, 191, 154, 188, 20, 175, 151, 62, 148, 18, 73, 190, 147, 168, 15, 62, 55, 212, 1, 189, 0, 96, 31, 62, 200, 108, 56, 191, 145, 118, 60, 62, 54, 63, 65, 61, 224, 68, 146, 190, 12, 238, 18, 189, 49, 185, 100, 62, 143, 170, 147, 189, 204, 62, 59, 62, 139, 173, 67, 61, 26, 253, 0, 190, 226, 241, 35, 62, 122, 205, 35, 190, 71, 72, 5, 189, 1, 143, 16, 62, 169, 36, 128, 190, 97, 141, 151, 190, 47, 159, 147, 190, 156, 231, 230, 189, 54, 23, 68, 188, 17, 11, 18, 62, 19, 255, 192, 189, 79, 147, 149, 60, 124, 106, 109, 62, 58, 184, 219, 188, 251, 161, 162, 188, 112, 43, 9, 62, 165, 196, 105, 62, 149, 160, 216, 61, 131, 111, 223, 61, 120, 43, 25, 61, 101, 148, 45, 62, 187, 36, 177, 187, 54, 198, 13, 191, 64, 215, 28, 62, 18, 137, 160, 189, 90, 39, 208, 189, 3, 241, 56, 62, 188, 106, 213, 61, 16, 40, 5, 62, 210, 186, 212, 61, 236, 114, 157, 62, 252, 129, 192, 189, 111, 248, 15, 62, 128, 234, 184, 188, 12, 98, 190, 189, 26, 101, 36, 62, 16, 83, 24, 190, 22, 5, 124, 62, 194, 71, 139, 189, 253, 65, 66, 61, 107, 63, 49, 190, 166, 8, 82, 62, 145, 127, 108, 62, 5, 241, 20, 189, 183, 190, 108, 190, 36, 119, 188, 189, 118, 155, 178, 189, 209, 87, 130, 188, 66, 1, 65, 61, 53, 137, 173, 61, 209, 50, 156, 189, 83, 202, 209, 61, 207, 6, 47, 62, 173, 248, 59, 189, 252, 118, 41, 188, 240, 166, 12, 191, 194, 77, 164, 189, 171, 41, 0, 62, 183, 5, 69, 188, 119, 103, 29, 190, 78, 147, 174, 190, 203, 20, 136, 189, 175, 202, 56, 61, 34, 11, 136, 62, 177, 146, 9, 189, 11, 191, 38, 61, 72, 193, 18, 189, 124, 94, 109, 189, 34, 73, 78, 61, 92, 51, 209, 187, 173, 20, 191, 61, 58, 95, 188, 60, 178, 30, 158, 189, 45, 5, 180, 59, 2, 22, 157, 62, 96, 111, 245, 61, 243, 92, 235, 189, 11, 127, 161, 189, 243, 248, 138, 190, 31, 143, 68, 190, 13, 253, 75, 190, 146, 232, 150, 190, 62, 101, 4, 62, 63, 143, 49, 190, 165, 37, 129, 189, 10, 12, 15, 190, 165, 124, 52, 189, 246, 251, 165, 189, 181, 111, 136, 59, 130, 204, 58, 61, 39, 5, 85, 190, 66, 3, 255, 60, 191, 13, 161, 61, 100, 233, 44, 190, 76, 90, 109, 190, 223, 93, 225, 188, 35, 226, 64, 190, 32, 46, 171, 61, 166, 157, 215, 61, 221, 159, 144, 189, 160, 226, 65, 190, 220, 72, 23, 190, 22, 206, 45, 190, 55, 174, 226, 188, 170, 223, 85, 61, 249, 158, 233, 60, 145, 29, 142, 190, 100, 207, 54, 190, 141, 233, 199, 61, 218, 59, 123, 188, 166, 229, 118, 186, 248, 214, 248, 61, 96, 44, 163, 60, 40, 214, 35, 62, 161, 115, 198, 190, 225, 10, 64, 190, 156, 54, 76, 62, 44, 107, 55, 189, 8, 240, 239, 189, 80, 143, 87, 190, 181, 219, 193, 60, 56, 84, 215, 61, 78, 201, 208, 189, 2, 65, 134, 189, 97, 160, 6, 189, 223, 77, 57, 59, 210, 127, 236, 189, 196, 75, 204, 189, 42, 120, 164, 190, 53, 196, 245, 189, 82, 196, 46, 189, 176, 14, 85, 61, 254, 31, 210, 61, 185, 250, 213, 62, 126, 154, 13, 62, 251, 93, 150, 61, 249, 244, 156, 190, 220, 77, 111, 61, 255, 96, 244, 60, 146, 28, 174, 60, 37, 210, 193, 190, 63, 7, 240, 189, 8, 37, 254, 60, 110, 88, 29, 191, 71, 137, 18, 190, 120, 50, 54, 62, 115, 8, 49, 190, 63, 48, 43, 62, 91, 100, 251, 189, 40, 172, 38, 190, 178, 212, 43, 62, 110, 252, 206, 190, 212, 134, 106, 62, 3, 102, 107, 62, 137, 245, 31, 62, 137, 197, 30, 61, 28, 117, 96, 190, 233, 252, 109, 190, 150, 8, 160, 61, 177, 107, 41, 62, 189, 185, 87, 61, 140, 150, 235, 189, 3, 57, 196, 190, 2, 107, 176, 61, 111, 112, 153, 61, 15, 40, 108, 191, 226, 108, 161, 190, 177, 243, 166, 62, 110, 9, 8, 191, 236, 186, 47, 190, 249, 51, 90, 191, 137, 242, 42, 62, 78, 198, 65, 191, 47, 230, 114, 61, 219, 125, 133, 190, 64, 65, 75, 191, 137, 105, 141, 190, 252, 24, 24, 61, 15, 156, 0, 62, 20, 238, 22, 189, 77, 157, 116, 190, 224, 200, 148, 190, 75, 152, 9, 188, 72, 248, 223, 61, 117, 136, 70, 190, 239, 67, 158, 61, 251, 238, 182, 190, 84, 126, 73, 62, 224, 168, 42, 188, 47, 228, 8, 62, 129, 186, 177, 190, 128, 253, 41, 62, 190, 15, 243, 61, 9, 111, 207, 61, 251, 114, 132, 190, 248, 38, 208, 62, 5, 47, 12, 190, 42, 172, 12, 191, 30, 136, 57, 61, 229, 49, 166, 61, 244, 232, 227, 190, 136, 73, 67, 61, 194, 184, 66, 58, 149, 182, 85, 61, 213, 132, 180, 190, 53, 135, 75, 190, 233, 116, 134, 190, 99, 107, 101, 190, 184, 164, 169, 61, 145, 44, 10, 62, 39, 51, 163, 58, 182, 58, 0, 62, 248, 254, 146, 61, 122, 31, 79, 190, 77, 93, 248, 189, 148, 23, 173, 61, 172, 226, 205, 189, 139, 207, 207, 61, 140, 176, 102, 190, 116, 117, 237, 61, 3, 214, 41, 61, 238, 133, 165, 61, 188, 110, 124, 62, 211, 11, 197, 189, 92, 147, 221, 188, 127, 9, 40, 62, 217, 105, 179, 189, 190, 42, 43, 190, 206, 88, 228, 61, 223, 82, 232, 61, 74, 5, 27, 190, 88, 31, 239, 189, 90, 96, 14, 62, 36, 189, 154, 61, 183, 173, 32, 190, 165, 106, 236, 61, 68, 37, 110, 61, 247, 58, 20, 61, 28, 166, 46, 190, 108, 208, 116, 188, 74, 180, 29, 190, 3, 65, 225, 61, 100, 157, 15, 61, 221, 152, 100, 60, 184, 114, 16, 190, 38, 15, 194, 60, 155, 122, 159, 189, 132, 55, 177, 61, 132, 113, 155, 188, 170, 252, 187, 189, 103, 255, 8, 190, 50, 169, 0, 188, 146, 14, 68, 190, 19, 175, 1, 190, 78, 203, 108, 61, 207, 189, 157, 60, 68, 154, 217, 61, 45, 169, 149, 61, 146, 67, 59, 189, 69, 161, 252, 188, 108, 217, 28, 190, 65, 249, 27, 62, 73, 179, 211, 188, 72, 64, 13, 62, 178, 205, 218, 61, 183, 139, 158, 189, 221, 163, 19, 189, 69, 51, 96, 190, 108, 133, 6, 62, 198, 113, 78, 189, 204, 188, 20, 62, 106, 196, 56, 189, 67, 217, 6, 190, 94, 44, 31, 189, 46, 108, 157, 61, 58, 14, 199, 59, 182, 246, 5, 62, 89, 234, 26, 60, 79, 41, 22, 62, 200, 133, 81, 189, 85, 221, 63, 190, 129, 13, 53, 61, 73, 65, 3, 189, 161, 169, 142, 188, 150, 229, 172, 189, 99, 77, 4, 60, 177, 202, 75, 60, 69, 114, 150, 61, 148, 55, 28, 190, 38, 119, 221, 61, 89, 237, 27, 190, 194, 201, 57, 190, 70, 104, 62, 189, 139, 117, 204, 61, 123, 231, 28, 62, 159, 17, 26, 60, 48, 93, 37, 190, 219, 240, 195, 61, 78, 22, 12, 190, 140, 49, 152, 61, 77, 39, 210, 61, 200, 34, 212, 186, 210, 69, 224, 189, 178, 156, 198, 189, 185, 59, 60, 189, 38, 75, 183, 61, 175, 145, 46, 190, 194, 215, 101, 189, 123, 83, 22, 189, 41, 59, 51, 190, 39, 127, 19, 190, 161, 199, 34, 60, 95, 107, 193, 60, 206, 152, 56, 189, 250, 37, 146, 61, 133, 123, 121, 61, 231, 93, 26, 190, 61, 22, 41, 62, 119, 77, 131, 189, 52, 47, 40, 61, 177, 53, 92, 189, 112, 144, 236, 189, 144, 40, 122, 189, 162, 101, 7, 61, 91, 201, 90, 190, 73, 40, 31, 62, 137, 175, 1, 62, 164, 180, 129, 188, 220, 52, 68, 190, 79, 42, 41, 60, 199, 195, 237, 189, 24, 158, 149, 61, 59, 124, 21, 190, 73, 249, 237, 60, 170, 254, 179, 189, 138, 151, 37, 190, 54, 148, 195, 61, 89, 214, 55, 62, 79, 211, 2, 190, 136, 168, 36, 62, 109, 130, 131, 190, 226, 93, 10, 62, 105, 30, 8, 190, 104, 19, 133, 190, 245, 210, 73, 189, 31, 118, 101, 62, 189, 108, 28, 190, 12, 254, 186, 61, 76, 215, 217, 190, 234, 216, 133, 60, 29, 10, 84, 190, 96, 10, 214, 61, 65, 132, 6, 60, 215, 53, 30, 61, 247, 44, 129, 62, 129, 205, 219, 61, 133, 117, 145, 61, 231, 43, 111, 62, 29, 229, 19, 62, 80, 99, 218, 190, 101, 193, 136, 62, 138, 86, 164, 60, 166, 93, 30, 61, 13, 27, 31, 190, 180, 137, 109, 62, 5, 157, 14, 190, 220, 159, 237, 188, 34, 11, 154, 188, 168, 183, 102, 62, 168, 149, 209, 189, 192, 47, 147, 61, 36, 48, 196, 61, 77, 199, 5, 191, 122, 140, 233, 60, 217, 216, 34, 62, 81, 26, 12, 190, 193, 15, 100, 61, 55, 239, 202, 61, 210, 232, 108, 59, 85, 156, 161, 190, 94, 214, 132, 188, 139, 199, 30, 62, 85, 206, 88, 61, 21, 122, 235, 60, 60, 37, 145, 61, 236, 96, 211, 189, 217, 33, 21, 190, 57, 159, 107, 62, 238, 159, 200, 189, 128, 197, 17, 191, 233, 139, 158, 190, 172, 246, 153, 62, 202, 18, 3, 62, 13, 123, 67, 62, 194, 204, 57, 62, 37, 141, 84, 190, 63, 55, 203, 189, 107, 22, 95, 190, 149, 226, 16, 190, 242, 7, 0, 62, 82, 2, 32, 189, 145, 91, 134, 62, 242, 246, 90, 62, 176, 181, 86, 189, 69, 238, 89, 189, 179, 158, 136, 61, 170, 126, 9, 191, 65, 58, 161, 60, 157, 169, 9, 60, 204, 106, 135, 188, 218, 106, 143, 189, 61, 4, 114, 61, 130, 247, 142, 61, 7, 18, 72, 62, 168, 165, 60, 62, 203, 99, 204, 189, 172, 92, 189, 61, 19, 19, 245, 189, 174, 242, 107, 62, 141, 177, 24, 62, 0, 168, 234, 189, 242, 22, 199, 62, 178, 152, 111, 62, 206, 43, 146, 191, 217, 27, 41, 62, 57, 22, 132, 61, 212, 4, 215, 60, 82, 169, 106, 61, 96, 144, 197, 61, 2, 95, 229, 61, 243, 143, 8, 190, 118, 36, 23, 60, 212, 109, 83, 61, 178, 97, 116, 190, 171, 106, 55, 61, 2, 70, 41, 190, 70, 207, 28, 190, 31, 145, 94, 62, 156, 241, 106, 62, 127, 218, 203, 60, 50, 216, 0, 62, 148, 169, 225, 61, 31, 46, 8, 189, 149, 199, 58, 190, 60, 244, 6, 189, 83, 170, 218, 58, 192, 232, 52, 62, 142, 39, 140, 61, 124, 220, 133, 62, 113, 232, 234, 189, 138, 221, 109, 61, 198, 240, 255, 61, 44, 135, 191, 61, 253, 250, 37, 191, 167, 161, 67, 190, 207, 0, 123, 61, 171, 100, 80, 189, 193, 166, 184, 60, 111, 84, 106, 190, 87, 73, 201, 189, 64, 50, 241, 188, 205, 54, 159, 60, 48, 255, 140, 189, 235, 32, 82, 188, 94, 41, 5, 190, 144, 70, 167, 62, 32, 14, 202, 61, 239, 198, 50, 62, 121, 107, 244, 62, 10, 13, 81, 190, 251, 137, 138, 59, 250, 228, 237, 189, 11, 1, 197, 60, 182, 199, 174, 188, 221, 194, 134, 189, 12, 107, 126, 61, 199, 60, 30, 190, 27, 127, 182, 61, 53, 46, 68, 190, 46, 85, 170, 189, 186, 80, 51, 62, 67, 67, 2, 62, 109, 25, 84, 62, 189, 69, 148, 190, 39, 33, 13, 60, 205, 88, 191, 190, 19, 13, 228, 189, 140, 165, 142, 191, 200, 111, 12, 62, 0, 249, 60, 190, 177, 142, 225, 189, 14, 206, 146, 189, 232, 58, 4, 62, 17, 6, 7, 188, 82, 59, 12, 190, 206, 176, 184, 61, 240, 131, 99, 189, 178, 176, 157, 190, 166, 174, 78, 62, 106, 235, 193, 190, 140, 181, 148, 190, 178, 123, 67, 62, 0, 168, 71, 62, 8, 137, 125, 62, 41, 13, 61, 190, 6, 217, 223, 188, 91, 134, 7, 62, 8, 68, 141, 190, 149, 150, 182, 61, 216, 75, 13, 60, 200, 135, 124, 190, 53, 141, 246, 190, 239, 160, 80, 190, 39, 192, 5, 190, 219, 28, 23, 190, 43, 23, 92, 62, 53, 29, 109, 189, 72, 20, 26, 191, 102, 205, 65, 189, 93, 131, 101, 62, 7, 32, 161, 190, 245, 137, 23, 60, 7, 221, 166, 190, 139, 128, 161, 61, 142, 177, 222, 190, 133, 242, 125, 58, 112, 7, 86, 190, 45, 10, 100, 190, 198, 73, 50, 62, 80, 71, 94, 62, 87, 145, 216, 60, 196, 108, 154, 189, 35, 69, 15, 63, 4, 5, 29, 189, 27, 64, 130, 61, 202, 236, 13, 62, 71, 249, 186, 61, 41, 242, 25, 61, 226, 231, 146, 190, 243, 227, 190, 60, 79, 208, 6, 62, 82, 127, 107, 61, 246, 59, 36, 190, 205, 103, 137, 61, 167, 180, 21, 62, 248, 202, 45, 189, 180, 71, 49, 188, 140, 29, 31, 62, 43, 119, 148, 189, 44, 11, 23, 62, 157, 58, 234, 59, 109, 191, 43, 62, 222, 107, 113, 61, 91, 239, 5, 60, 115, 203, 128, 186, 237, 124, 180, 60, 174, 74, 99, 61, 176, 63, 201, 61, 52, 198, 10, 189, 244, 88, 198, 189, 69, 181, 48, 190, 192, 162, 176, 189, 52, 94, 100, 61, 227, 164, 237, 61, 100, 204, 239, 58, 22, 134, 38, 62, 30, 176, 246, 188, 36, 105, 254, 59, 51, 173, 149, 189, 130, 123, 43, 190, 163, 183, 18, 190, 12, 229, 57, 189, 228, 129, 32, 61, 175, 60, 205, 189, 201, 180, 241, 61, 49, 90, 40, 190, 123, 205, 82, 60, 48, 113, 201, 188, 171, 179, 251, 61, 2, 1, 253, 190, 135, 132, 24, 62, 5, 198, 252, 189, 229, 12, 97, 190, 180, 99, 147, 191, 245, 46, 131, 60, 32, 52, 138, 61, 245, 58, 94, 190, 137, 140, 69, 190, 162, 183, 56, 62, 4, 155, 147, 62, 207, 93, 191, 61, 158, 126, 14, 189, 255, 202, 94, 190, 249, 1, 200, 190, 208, 21, 94, 62, 175, 124, 66, 191, 150, 246, 89, 190, 181, 37, 73, 62, 1, 50, 195, 62, 173, 26, 138, 62, 187, 50, 63, 188, 5, 159, 0, 190, 17, 3, 33, 62, 44, 139, 205, 190, 207, 212, 22, 62, 11, 235, 166, 189, 250, 92, 6, 61, 114, 145, 226, 190, 165, 231, 245, 61, 87, 230, 72, 189, 2, 2, 248, 60, 89, 31, 19, 190, 64, 183, 209, 189, 206, 160, 13, 191, 225, 17, 54, 60, 193, 33, 55, 62, 76, 100, 137, 190, 111, 19, 13, 61, 79, 219, 17, 190, 106, 83, 117, 189, 219, 83, 124, 189, 68, 255, 69, 190, 41, 75, 49, 60, 108, 181, 76, 190, 229, 3, 121, 61, 177, 184, 169, 62, 26, 182, 76, 61, 195, 174, 132, 189, 171, 150, 219, 62, 18, 44, 53, 190, 22, 29, 142, 190, 2, 146, 182, 61, 136, 96, 131, 190, 18, 126, 189, 60, 246, 119, 108, 190, 69, 131, 134, 62, 43, 254, 203, 61, 90, 79, 45, 189, 240, 242, 44, 190, 143, 254, 17, 188, 131, 108, 63, 62, 243, 213, 243, 61, 53, 215, 223, 189, 117, 229, 29, 189, 146, 73, 85, 189, 174, 134, 6, 190, 14, 37, 66, 189, 170, 187, 157, 189, 105, 141, 75, 190, 163, 153, 14, 62, 105, 240, 79, 189, 126, 180, 217, 189, 133, 127, 159, 189, 184, 234, 6, 61, 25, 87, 131, 189, 220, 21, 227, 61, 0, 23, 241, 189, 239, 12, 24, 62, 188, 175, 58, 190, 220, 137, 41, 190, 167, 208, 152, 61, 8, 211, 49, 190, 227, 47, 193, 188, 26, 190, 65, 189, 247, 147, 86, 189, 54, 194, 250, 189, 31, 24, 46, 62, 47, 175, 177, 187, 184, 52, 84, 61, 46, 16, 253, 189, 201, 252, 65, 190, 234, 39, 238, 60, 219, 236, 45, 62, 234, 46, 153, 61, 20, 40, 66, 190, 164, 228, 179, 189, 44, 99, 162, 62, 250, 36, 149, 190, 96, 120, 228, 190, 42, 137, 70, 62, 97, 230, 81, 190, 67, 79, 144, 191, 247, 190, 1, 191, 230, 138, 173, 62, 100, 135, 126, 191, 5, 112, 170, 62, 94, 141, 187, 190, 111, 223, 133, 191, 25, 226, 27, 191, 195, 132, 12, 191, 127, 26, 234, 60, 13, 42, 109, 189, 199, 203, 159, 190, 238, 143, 204, 190, 208, 149, 43, 62, 229, 107, 121, 62, 59, 152, 213, 189, 154, 138, 82, 62, 69, 142, 130, 190, 100, 7, 133, 62, 130, 99, 25, 62, 216, 150, 64, 188, 11, 240, 37, 191, 38, 207, 131, 189, 203, 120, 161, 190, 28, 227, 20, 190, 138, 222, 50, 62, 48, 137, 217, 61, 132, 127, 16, 62, 82, 135, 168, 62, 4, 65, 137, 189, 237, 177, 8, 191, 96, 209, 112, 61, 212, 251, 1, 189, 17, 187, 54, 62, 237, 57, 16, 189, 116, 138, 35, 62, 55, 228, 35, 62, 156, 225, 38, 190, 192, 95, 141, 61, 194, 158, 203, 60, 71, 151, 11, 60, 170, 29, 240, 61, 175, 131, 79, 190, 240, 74, 129, 61, 185, 184, 24, 62, 19, 170, 198, 61, 83, 51, 36, 62, 216, 34, 13, 62, 159, 232, 57, 61, 120, 104, 239, 60, 78, 255, 109, 190, 121, 166, 23, 190, 209, 136, 222, 189, 105, 135, 144, 189, 181, 218, 190, 190, 64, 177, 165, 189, 121, 218, 70, 61, 58, 144, 130, 189, 239, 243, 48, 190, 235, 245, 215, 189, 63, 148, 114, 189, 255, 162, 63, 189, 244, 102, 75, 61, 60, 130, 17, 190, 49, 149, 201, 189, 78, 222, 43, 62, 135, 64, 26, 190, 248, 138, 5, 190, 146, 42, 24, 189, 61, 153, 226, 61, 37, 90, 19, 62, 155, 78, 201, 61, 156, 123, 148, 189, 110, 82, 143, 189, 208, 98, 158, 60, 78, 76, 18, 189, 250, 156, 159, 61, 124, 38, 31, 190, 185, 133, 225, 61, 49, 212, 142, 61, 190, 222, 193, 61, 21, 136, 18, 62, 32, 193, 222, 189, 14, 204, 86, 190, 83, 193, 73, 61, 245, 114, 35, 190, 189, 161, 27, 190, 249, 124, 30, 190, 101, 208, 238, 61, 196, 123, 48, 61, 196, 25, 90, 62, 37, 64, 71, 62, 31, 9, 8, 191, 50, 112, 74, 190, 215, 236, 129, 62, 71, 136, 225, 190, 43, 58, 106, 190, 121, 244, 7, 191, 11, 224, 12, 62, 194, 44, 82, 191, 44, 218, 79, 61, 158, 188, 135, 190, 143, 76, 112, 191, 132, 120, 183, 190, 68, 140, 166, 62, 237, 139, 1, 62, 53, 127, 3, 62, 236, 153, 161, 62, 91, 226, 224, 190, 77, 152, 100, 62, 47, 158, 16, 62, 194, 230, 123, 189, 63, 86, 229, 189, 190, 116, 108, 188, 116, 98, 153, 189, 196, 190, 46, 62, 98, 38, 101, 62, 238, 103, 155, 190, 47, 217, 188, 189, 62, 140, 167, 61, 51, 15, 0, 190, 44, 240, 13, 62, 76, 170, 235, 60, 169, 14, 14, 189, 70, 3, 131, 189, 211, 250, 7, 189, 84, 210, 132, 191, 120, 7, 234, 61, 73, 104, 177, 189, 124, 221, 152, 62, 153, 65, 39, 61, 213, 44, 139, 186, 145, 19, 85, 189, 175, 233, 37, 190, 112, 40, 95, 189, 32, 88, 89, 62, 110, 123, 49, 190, 181, 20, 175, 189, 188, 82, 255, 60, 185, 153, 21, 191, 52, 244, 38, 60, 30, 164, 98, 61, 181, 219, 66, 61, 175, 132, 158, 188, 209, 56, 35, 62, 54, 97, 184, 189, 62, 208, 216, 190, 213, 81, 14, 189, 180, 40, 47, 59, 236, 65, 112, 62, 178, 128, 122, 189, 51, 19, 185, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 83, 87, 60, 97, 184, 249, 189, 249, 125, 225, 60, 98, 225, 172, 189, 116, 104, 142, 62, 162, 164, 134, 62, 127, 225, 80, 189, 150, 172, 145, 60, 93, 21, 75, 189, 224, 61, 175, 189, 156, 232, 63, 60, 243, 8, 143, 62, 231, 201, 130, 62, 199, 117, 11, 190, 5, 27, 18, 190, 122, 172, 174, 189, 195, 161, 60, 189, 83, 194, 172, 60, 208, 70, 129, 62, 164, 43, 67, 188, 233, 222, 54, 62, 177, 226, 161, 187, 33, 61, 211, 61, 62, 217, 39, 190, 143, 20, 197, 61, 244, 247, 173, 59, 247, 12, 50, 190, 151, 114, 60, 60, 238, 52, 76, 190, 67, 10, 114, 61, 60, 164, 11, 60, 64, 129, 75, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 90, 216, 61, 168, 9, 138, 62, 94, 198, 117, 62, 96, 121, 34, 190, 143, 166, 52, 62, 84, 12, 153, 190, 200, 9, 99, 190, 231, 76, 107, 62, 74, 172, 129, 62, 96, 101, 249, 61, 116, 221, 61, 62, 240, 0, 24, 191, 8, 48, 138, 190, 35, 204, 66, 188, 59, 90, 1, 62, 13, 6, 170, 187, 248, 124, 93, 62, 174, 131, 138, 62, 225, 155, 131, 190, 199, 172, 141, 62, 231, 30, 94, 190, 82, 83, 222, 62, 71, 97, 179, 190, 91, 38, 128, 61, 113, 38, 54, 63, 23, 38, 137, 190, 112, 217, 240, 189, 136, 63, 91, 191, 60, 24, 41, 62, 9, 38, 149, 189, 68, 22, 42, 191, 49, 144, 252, 62, 171, 41, 123, 60, 228, 244, 72, 189, 130, 169, 229, 61, 142, 170, 80, 190, 112, 254, 54, 190, 204, 206, 143, 188, 84, 235, 66, 188, 171, 4, 64, 190, 204, 77, 145, 187, 9, 206, 10, 62, 247, 94, 139, 61, 69, 31, 60, 190, 118, 155, 161, 190, 78, 180, 178, 189, 118, 69, 196, 189, 212, 37, 14, 61, 126, 7, 136, 188, 219, 47, 106, 188, 205, 171, 71, 190, 47, 13, 155, 61, 81, 200, 3, 62, 236, 198, 91, 189, 77, 118, 76, 188, 227, 158, 84, 189, 181, 59, 40, 189, 15, 141, 142, 61, 207, 63, 248, 60, 25, 84, 40, 62, 72, 11, 30, 62, 154, 59, 53, 61, 253, 122, 32, 62, 89, 157, 38, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 42, 6, 62, 191, 215, 175, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {118, 160, 148, 63, 11, 25, 196, 191, 58, 0, 171, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {31, 231, 118, 64, 74, 249, 46, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0096/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}