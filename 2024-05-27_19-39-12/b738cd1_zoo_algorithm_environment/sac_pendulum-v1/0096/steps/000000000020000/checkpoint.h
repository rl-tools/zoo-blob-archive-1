// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 56, 153, 62, 164, 233, 115, 190, 187, 234, 78, 188, 7, 241, 84, 190, 147, 170, 180, 63, 225, 48, 169, 62, 60, 207, 25, 62, 59, 190, 21, 191, 39, 221, 186, 61, 209, 92, 223, 190, 95, 1, 135, 191, 43, 123, 56, 190, 81, 21, 31, 63, 138, 63, 148, 191, 44, 33, 107, 190, 81, 108, 252, 62, 211, 114, 146, 191, 249, 86, 145, 190, 101, 196, 56, 191, 223, 169, 75, 63, 119, 99, 6, 191, 78, 236, 0, 191, 72, 223, 192, 62, 227, 190, 16, 63, 133, 233, 120, 189, 209, 165, 166, 63, 32, 204, 1, 63, 62, 38, 109, 62, 225, 202, 102, 191, 244, 186, 74, 189, 252, 111, 196, 190, 68, 74, 176, 191, 209, 72, 150, 190, 97, 40, 182, 190, 138, 20, 161, 63, 55, 67, 243, 62, 167, 203, 135, 191, 58, 228, 224, 190, 212, 69, 117, 188, 62, 87, 16, 191, 134, 110, 199, 62, 27, 81, 0, 191, 85, 139, 135, 190, 208, 99, 44, 62, 107, 105, 84, 63, 154, 173, 214, 61, 37, 185, 59, 191, 180, 245, 64, 63, 83, 223, 10, 63, 112, 137, 128, 63, 94, 248, 175, 62, 6, 126, 30, 191, 192, 112, 21, 63, 152, 217, 252, 189, 152, 34, 175, 62, 36, 142, 160, 191, 104, 145, 1, 191, 115, 121, 5, 63, 238, 197, 117, 63, 253, 212, 209, 62, 44, 115, 176, 190, 199, 160, 175, 63, 125, 226, 151, 62, 192, 140, 152, 191, 141, 27, 168, 190, 230, 146, 134, 61, 99, 252, 23, 191, 206, 223, 17, 63, 220, 187, 3, 62, 23, 216, 98, 63, 214, 35, 84, 191, 222, 184, 209, 190, 58, 72, 18, 190, 13, 169, 38, 191, 123, 54, 125, 188, 65, 203, 76, 191, 92, 157, 33, 63, 234, 141, 140, 190, 153, 167, 146, 190, 201, 49, 4, 63, 236, 157, 22, 191, 246, 115, 205, 190, 112, 112, 28, 63, 7, 66, 179, 61, 223, 135, 76, 61, 183, 114, 36, 63, 41, 19, 25, 62, 51, 162, 148, 62, 204, 94, 248, 190, 232, 197, 166, 62, 60, 72, 49, 62, 75, 96, 209, 191, 239, 60, 212, 190, 244, 229, 83, 63, 225, 212, 134, 63, 170, 34, 179, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 147, 19, 191, 46, 17, 219, 60, 249, 180, 127, 62, 19, 95, 141, 62, 55, 205, 166, 190, 16, 8, 233, 189, 9, 126, 95, 190, 180, 118, 231, 190, 236, 62, 220, 61, 83, 192, 140, 61, 212, 113, 4, 63, 10, 103, 66, 190, 225, 244, 225, 61, 40, 45, 209, 190, 240, 148, 143, 191, 70, 1, 173, 62, 43, 235, 107, 62, 173, 138, 252, 62, 92, 61, 145, 62, 220, 34, 233, 190, 137, 9, 93, 190, 113, 165, 222, 189, 11, 220, 33, 63, 157, 176, 70, 191, 1, 75, 204, 62, 175, 54, 144, 190, 109, 53, 121, 189, 214, 48, 165, 62, 12, 104, 135, 62, 25, 31, 237, 188, 127, 218, 40, 62, 3, 142, 115, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 48, 218, 61, 241, 144, 74, 191, 95, 42, 25, 190, 246, 68, 130, 62, 11, 135, 46, 191, 167, 121, 0, 190, 148, 142, 119, 62, 170, 149, 10, 191, 216, 226, 213, 190, 100, 56, 243, 62, 65, 97, 55, 61, 194, 53, 133, 190, 94, 162, 149, 62, 121, 21, 158, 62, 131, 6, 220, 190, 215, 96, 156, 61, 132, 10, 164, 191, 248, 64, 139, 62, 93, 242, 72, 62, 200, 43, 153, 188, 211, 204, 28, 191, 141, 17, 7, 190, 159, 80, 227, 187, 205, 250, 204, 61, 249, 223, 78, 189, 253, 249, 161, 62, 116, 213, 129, 58, 170, 197, 80, 188, 109, 218, 120, 190, 205, 213, 244, 190, 255, 43, 135, 62, 158, 148, 77, 61, 161, 198, 190, 61, 251, 55, 179, 62, 72, 149, 177, 62, 232, 50, 20, 191, 47, 116, 160, 190, 253, 124, 10, 61, 64, 38, 32, 62, 208, 147, 92, 61, 41, 192, 204, 61, 216, 240, 208, 61, 85, 137, 126, 61, 66, 193, 16, 190, 111, 47, 42, 190, 114, 200, 128, 61, 92, 92, 34, 61, 110, 62, 127, 188, 92, 107, 3, 63, 89, 173, 177, 189, 193, 163, 21, 62, 154, 31, 27, 62, 144, 236, 124, 62, 51, 172, 137, 191, 221, 167, 147, 190, 177, 199, 10, 62, 123, 113, 185, 61, 92, 42, 3, 62, 104, 128, 183, 61, 200, 146, 24, 62, 53, 124, 200, 62, 221, 164, 182, 189, 91, 239, 40, 190, 90, 59, 160, 62, 9, 145, 244, 61, 99, 111, 144, 188, 225, 138, 19, 62, 33, 156, 187, 61, 181, 157, 217, 62, 179, 30, 161, 62, 59, 123, 173, 191, 179, 82, 91, 62, 184, 33, 98, 190, 61, 194, 111, 62, 61, 213, 191, 190, 1, 133, 60, 190, 163, 240, 60, 62, 14, 99, 18, 191, 232, 145, 177, 189, 148, 72, 80, 62, 220, 229, 240, 190, 239, 108, 36, 190, 123, 12, 149, 190, 158, 22, 109, 191, 252, 197, 10, 190, 240, 221, 3, 62, 90, 163, 182, 189, 41, 149, 126, 189, 121, 139, 202, 61, 133, 114, 72, 61, 0, 183, 80, 62, 224, 205, 174, 189, 113, 14, 46, 189, 138, 129, 21, 188, 6, 147, 156, 190, 142, 203, 128, 62, 81, 92, 79, 189, 9, 27, 211, 62, 115, 81, 254, 62, 253, 46, 42, 62, 180, 160, 209, 62, 215, 117, 171, 62, 232, 45, 71, 61, 133, 60, 16, 62, 124, 129, 126, 62, 244, 171, 102, 190, 143, 197, 107, 62, 204, 151, 65, 62, 152, 210, 27, 62, 181, 109, 89, 190, 80, 9, 155, 190, 21, 179, 170, 190, 68, 199, 21, 191, 131, 53, 127, 61, 42, 137, 153, 62, 25, 64, 72, 190, 254, 243, 169, 61, 251, 158, 216, 62, 162, 136, 218, 61, 110, 250, 66, 190, 107, 36, 29, 62, 27, 166, 45, 190, 49, 10, 183, 188, 129, 123, 80, 62, 211, 75, 1, 191, 121, 235, 184, 190, 185, 124, 250, 62, 150, 212, 151, 191, 133, 3, 39, 189, 26, 14, 18, 190, 250, 169, 183, 62, 183, 135, 188, 189, 105, 123, 241, 190, 105, 83, 89, 188, 69, 103, 208, 188, 228, 226, 35, 62, 167, 247, 244, 61, 144, 15, 146, 61, 234, 184, 98, 62, 138, 189, 43, 61, 18, 228, 0, 61, 85, 185, 28, 190, 89, 99, 139, 61, 8, 103, 241, 61, 20, 177, 153, 186, 122, 243, 65, 62, 67, 192, 220, 189, 205, 246, 215, 189, 125, 59, 101, 190, 95, 180, 165, 61, 104, 156, 172, 61, 7, 102, 3, 60, 155, 152, 195, 61, 2, 132, 148, 188, 31, 207, 155, 61, 60, 123, 23, 62, 75, 205, 102, 62, 15, 17, 225, 61, 42, 114, 118, 190, 29, 93, 190, 62, 211, 110, 102, 61, 36, 61, 131, 189, 225, 191, 177, 61, 185, 53, 3, 192, 193, 213, 189, 190, 20, 184, 71, 191, 242, 228, 142, 61, 192, 83, 169, 189, 190, 1, 84, 62, 251, 41, 89, 61, 95, 252, 16, 191, 245, 208, 224, 189, 179, 112, 203, 191, 255, 112, 121, 62, 133, 171, 58, 62, 71, 175, 39, 62, 114, 106, 185, 62, 101, 8, 145, 190, 149, 100, 249, 61, 118, 211, 136, 61, 117, 197, 101, 61, 179, 28, 156, 191, 135, 138, 14, 189, 53, 145, 207, 190, 78, 8, 70, 190, 173, 11, 10, 59, 248, 235, 179, 62, 81, 59, 135, 190, 232, 7, 60, 62, 227, 73, 96, 62, 191, 209, 245, 190, 106, 9, 120, 62, 122, 205, 35, 190, 143, 181, 17, 189, 121, 190, 34, 189, 247, 212, 118, 191, 152, 194, 130, 191, 116, 239, 192, 191, 171, 60, 149, 189, 102, 41, 70, 61, 28, 140, 149, 61, 79, 131, 243, 189, 154, 220, 114, 190, 14, 218, 156, 62, 220, 45, 154, 62, 222, 104, 141, 61, 226, 202, 237, 61, 222, 212, 64, 62, 18, 231, 190, 189, 111, 38, 233, 62, 84, 159, 195, 189, 35, 238, 177, 188, 12, 205, 248, 60, 114, 225, 26, 190, 187, 54, 216, 62, 38, 110, 1, 191, 109, 8, 104, 190, 78, 252, 231, 62, 113, 184, 28, 62, 184, 135, 190, 62, 89, 226, 158, 61, 144, 114, 132, 62, 138, 227, 41, 191, 100, 76, 168, 188, 128, 234, 184, 188, 65, 225, 56, 191, 145, 38, 134, 62, 123, 178, 177, 190, 23, 193, 16, 62, 221, 148, 6, 190, 60, 157, 104, 190, 108, 172, 234, 189, 165, 42, 55, 188, 59, 130, 153, 62, 41, 133, 234, 189, 251, 157, 135, 190, 45, 8, 11, 61, 230, 93, 173, 190, 190, 82, 124, 61, 214, 195, 248, 61, 113, 120, 37, 62, 154, 119, 241, 189, 6, 207, 155, 61, 142, 237, 63, 190, 8, 131, 27, 191, 179, 223, 112, 189, 181, 56, 19, 191, 234, 167, 146, 190, 73, 27, 55, 62, 4, 226, 3, 190, 249, 16, 26, 190, 178, 230, 124, 190, 209, 111, 212, 61, 194, 244, 242, 61, 233, 162, 203, 61, 216, 15, 231, 61, 11, 191, 38, 61, 0, 236, 3, 189, 80, 166, 34, 190, 82, 213, 176, 61, 234, 65, 127, 61, 169, 143, 25, 62, 79, 32, 12, 62, 161, 62, 158, 189, 45, 5, 180, 59, 71, 240, 146, 62, 203, 30, 31, 62, 243, 92, 235, 189, 208, 212, 3, 190, 29, 179, 28, 190, 118, 162, 68, 190, 119, 0, 134, 190, 236, 44, 237, 190, 225, 89, 10, 62, 17, 46, 233, 189, 165, 37, 129, 189, 238, 244, 13, 190, 175, 99, 27, 190, 106, 12, 79, 190, 202, 16, 68, 62, 184, 85, 93, 60, 207, 140, 28, 190, 90, 60, 15, 62, 123, 166, 168, 188, 222, 92, 94, 190, 65, 61, 158, 190, 35, 94, 231, 60, 226, 117, 144, 190, 32, 46, 171, 61, 136, 167, 59, 62, 207, 141, 140, 189, 40, 47, 64, 63, 95, 143, 119, 190, 162, 108, 224, 60, 228, 140, 51, 191, 11, 114, 139, 188, 112, 116, 36, 62, 58, 243, 214, 190, 167, 163, 36, 62, 65, 44, 231, 188, 93, 46, 187, 62, 43, 146, 16, 191, 84, 115, 4, 62, 66, 195, 67, 57, 29, 196, 155, 62, 24, 11, 42, 61, 48, 130, 37, 191, 106, 105, 193, 62, 238, 23, 28, 58, 14, 166, 223, 61, 88, 208, 138, 189, 4, 125, 195, 190, 248, 213, 13, 61, 18, 166, 128, 191, 159, 198, 14, 63, 168, 4, 63, 62, 125, 43, 61, 62, 227, 189, 13, 190, 106, 94, 12, 189, 8, 206, 108, 190, 53, 196, 245, 189, 75, 164, 81, 190, 20, 17, 86, 61, 124, 14, 210, 190, 68, 122, 163, 61, 172, 179, 28, 62, 122, 186, 70, 62, 245, 44, 92, 190, 171, 195, 33, 191, 135, 113, 63, 190, 217, 39, 8, 190, 253, 113, 188, 190, 53, 112, 145, 190, 131, 168, 6, 62, 93, 143, 2, 191, 247, 89, 118, 190, 14, 24, 106, 61, 200, 65, 156, 190, 44, 106, 22, 62, 254, 200, 86, 191, 249, 94, 32, 190, 118, 102, 121, 190, 247, 253, 123, 191, 186, 78, 199, 62, 88, 241, 119, 61, 242, 13, 173, 62, 236, 25, 201, 61, 242, 70, 24, 191, 59, 206, 130, 190, 206, 178, 15, 61, 172, 171, 188, 61, 53, 249, 132, 62, 140, 150, 235, 189, 23, 243, 87, 190, 99, 141, 211, 189, 160, 156, 53, 189, 223, 213, 207, 191, 130, 66, 155, 191, 89, 25, 148, 62, 6, 200, 151, 190, 132, 17, 8, 190, 76, 45, 1, 191, 57, 230, 112, 189, 244, 133, 155, 191, 182, 174, 201, 61, 71, 19, 139, 190, 252, 250, 133, 190, 116, 239, 69, 62, 162, 108, 87, 62, 67, 184, 8, 62, 149, 9, 139, 190, 172, 64, 194, 61, 72, 169, 50, 191, 5, 181, 240, 187, 13, 192, 153, 62, 96, 45, 234, 190, 239, 25, 10, 190, 189, 250, 194, 190, 83, 175, 26, 62, 253, 48, 1, 62, 212, 209, 158, 62, 29, 187, 1, 190, 95, 11, 124, 190, 63, 243, 175, 61, 9, 111, 207, 61, 238, 145, 105, 191, 83, 110, 185, 62, 57, 76, 65, 191, 149, 10, 44, 191, 205, 56, 129, 190, 87, 121, 190, 61, 190, 241, 43, 191, 64, 98, 106, 61, 2, 180, 57, 190, 35, 68, 14, 190, 148, 30, 81, 191, 71, 222, 113, 190, 236, 184, 106, 190, 217, 32, 249, 190, 76, 70, 64, 61, 26, 46, 95, 62, 27, 35, 25, 62, 33, 31, 29, 62, 34, 210, 212, 61, 118, 125, 130, 191, 118, 65, 133, 190, 59, 167, 146, 189, 180, 218, 162, 190, 71, 54, 240, 61, 143, 139, 146, 190, 206, 207, 143, 62, 19, 188, 80, 61, 24, 6, 58, 62, 183, 184, 32, 62, 102, 32, 159, 190, 165, 129, 40, 62, 127, 9, 40, 62, 3, 208, 198, 189, 223, 13, 46, 190, 57, 23, 225, 61, 98, 87, 231, 61, 129, 204, 27, 190, 139, 31, 239, 189, 86, 47, 2, 62, 217, 210, 120, 61, 211, 229, 33, 190, 152, 54, 232, 61, 216, 205, 43, 61, 44, 42, 14, 61, 7, 234, 46, 190, 24, 35, 3, 189, 100, 241, 39, 190, 73, 86, 199, 61, 207, 81, 8, 61, 115, 78, 72, 60, 15, 215, 34, 190, 117, 10, 50, 60, 204, 193, 166, 189, 153, 17, 164, 61, 132, 113, 155, 188, 69, 175, 190, 189, 103, 255, 8, 190, 140, 32, 6, 188, 205, 159, 73, 190, 126, 136, 7, 190, 127, 112, 54, 61, 126, 73, 143, 60, 68, 154, 217, 61, 45, 169, 149, 61, 146, 67, 59, 189, 69, 161, 252, 188, 111, 204, 45, 190, 65, 249, 27, 62, 211, 38, 50, 189, 63, 37, 240, 61, 178, 205, 218, 61, 183, 139, 158, 189, 221, 163, 19, 189, 221, 219, 117, 190, 108, 133, 6, 62, 17, 240, 108, 189, 107, 47, 255, 61, 106, 196, 56, 189, 67, 217, 6, 190, 94, 44, 31, 189, 190, 124, 105, 61, 89, 229, 129, 188, 182, 246, 5, 62, 89, 234, 26, 60, 174, 69, 21, 62, 161, 132, 131, 189, 95, 243, 91, 190, 246, 111, 36, 61, 102, 195, 92, 189, 240, 43, 29, 189, 54, 254, 201, 189, 230, 159, 14, 59, 177, 202, 75, 60, 99, 233, 73, 61, 137, 98, 54, 190, 38, 119, 221, 61, 89, 237, 27, 190, 35, 60, 61, 190, 8, 76, 69, 189, 142, 70, 198, 61, 98, 159, 19, 62, 29, 222, 1, 188, 48, 93, 37, 190, 219, 240, 195, 61, 132, 4, 12, 190, 42, 144, 101, 61, 77, 39, 210, 61, 195, 15, 23, 187, 219, 99, 3, 190, 178, 156, 198, 189, 185, 59, 60, 189, 38, 75, 183, 61, 50, 198, 55, 190, 89, 147, 162, 189, 123, 83, 22, 189, 41, 59, 51, 190, 117, 89, 21, 190, 161, 199, 34, 60, 82, 21, 172, 59, 41, 246, 78, 189, 157, 149, 129, 61, 219, 215, 18, 61, 162, 16, 28, 190, 228, 152, 37, 62, 119, 77, 131, 189, 105, 82, 210, 60, 234, 194, 135, 189, 112, 144, 236, 189, 129, 142, 87, 189, 145, 101, 178, 61, 168, 204, 82, 191, 108, 201, 38, 190, 220, 103, 161, 61, 120, 62, 78, 62, 201, 223, 129, 60, 51, 74, 136, 190, 0, 30, 160, 58, 88, 104, 243, 188, 131, 166, 26, 191, 162, 139, 183, 190, 41, 167, 227, 61, 254, 161, 1, 62, 36, 212, 99, 62, 20, 191, 51, 62, 209, 229, 21, 190, 193, 204, 25, 62, 111, 127, 28, 191, 107, 28, 133, 189, 18, 102, 140, 191, 89, 184, 29, 191, 246, 113, 34, 62, 144, 224, 161, 61, 214, 208, 31, 62, 196, 16, 154, 62, 126, 228, 200, 190, 85, 62, 22, 62, 114, 33, 222, 188, 43, 254, 20, 61, 153, 162, 111, 62, 215, 53, 30, 61, 78, 174, 156, 62, 143, 180, 63, 62, 111, 198, 165, 190, 49, 70, 39, 62, 153, 134, 237, 61, 2, 240, 85, 191, 40, 29, 100, 62, 210, 150, 40, 61, 237, 240, 47, 189, 218, 128, 236, 190, 100, 99, 29, 62, 101, 38, 236, 190, 25, 68, 181, 190, 236, 155, 247, 58, 190, 91, 113, 62, 113, 37, 107, 61, 82, 21, 97, 190, 148, 104, 198, 59, 52, 55, 0, 191, 230, 65, 86, 61, 230, 115, 76, 190, 230, 219, 0, 190, 13, 220, 106, 62, 31, 42, 85, 61, 74, 19, 145, 191, 189, 133, 251, 189, 216, 190, 163, 61, 36, 137, 182, 62, 62, 125, 187, 61, 190, 250, 101, 190, 116, 226, 164, 62, 236, 96, 211, 189, 72, 47, 78, 190, 233, 118, 31, 62, 202, 41, 114, 191, 121, 224, 28, 191, 216, 184, 74, 191, 74, 88, 126, 62, 203, 62, 236, 61, 89, 55, 0, 62, 185, 85, 147, 61, 135, 144, 230, 190, 4, 162, 80, 189, 193, 73, 237, 61, 130, 208, 48, 190, 114, 1, 169, 60, 243, 247, 211, 189, 184, 90, 83, 62, 249, 238, 3, 63, 229, 17, 40, 189, 29, 70, 72, 190, 82, 91, 240, 60, 114, 159, 70, 190, 253, 100, 39, 62, 147, 51, 238, 190, 75, 170, 28, 60, 153, 136, 209, 59, 253, 5, 4, 62, 88, 179, 109, 62, 93, 55, 136, 62, 232, 178, 155, 61, 226, 69, 209, 190, 58, 208, 77, 62, 19, 19, 245, 189, 20, 204, 147, 62, 24, 129, 78, 62, 148, 254, 232, 189, 151, 87, 97, 62, 34, 188, 67, 62, 235, 55, 187, 191, 100, 209, 219, 61, 213, 85, 153, 61, 35, 104, 137, 189, 118, 150, 253, 188, 207, 153, 81, 188, 187, 17, 156, 62, 95, 111, 201, 190, 60, 114, 241, 60, 105, 167, 136, 61, 131, 142, 214, 189, 157, 201, 82, 61, 142, 92, 150, 190, 93, 105, 6, 190, 13, 156, 124, 62, 134, 238, 145, 62, 176, 1, 7, 62, 147, 49, 123, 189, 16, 88, 136, 61, 86, 251, 28, 191, 252, 97, 37, 62, 203, 195, 164, 61, 175, 64, 62, 62, 40, 217, 79, 62, 211, 179, 42, 190, 117, 40, 228, 62, 113, 232, 234, 189, 153, 202, 16, 190, 25, 70, 153, 61, 147, 99, 71, 191, 203, 20, 194, 191, 200, 18, 194, 191, 251, 209, 69, 62, 107, 87, 167, 61, 83, 104, 49, 188, 182, 235, 3, 62, 238, 176, 194, 190, 242, 1, 122, 61, 20, 143, 79, 191, 40, 84, 1, 62, 158, 69, 43, 62, 154, 114, 230, 60, 249, 145, 184, 62, 152, 82, 150, 188, 22, 25, 7, 61, 240, 20, 38, 63, 233, 33, 173, 190, 242, 47, 242, 190, 42, 171, 177, 190, 177, 16, 164, 190, 22, 232, 248, 189, 255, 85, 188, 61, 184, 85, 49, 62, 29, 64, 231, 190, 20, 109, 128, 189, 144, 207, 26, 60, 157, 60, 59, 191, 216, 103, 156, 61, 67, 67, 2, 62, 111, 53, 100, 62, 89, 143, 203, 190, 207, 74, 59, 190, 139, 113, 191, 190, 122, 87, 235, 189, 223, 23, 174, 191, 192, 112, 204, 61, 164, 4, 43, 190, 66, 195, 13, 189, 104, 100, 241, 190, 40, 137, 183, 61, 125, 231, 31, 190, 53, 87, 128, 190, 79, 91, 130, 61, 194, 7, 211, 189, 70, 21, 142, 190, 79, 76, 63, 60, 110, 141, 228, 191, 107, 149, 129, 190, 24, 8, 80, 62, 232, 115, 2, 62, 211, 140, 105, 62, 41, 13, 61, 190, 84, 82, 31, 190, 200, 96, 165, 190, 204, 145, 131, 190, 231, 100, 144, 61, 176, 166, 17, 61, 252, 206, 156, 190, 91, 177, 9, 192, 167, 150, 198, 189, 39, 192, 5, 190, 238, 50, 10, 191, 168, 170, 132, 62, 11, 115, 206, 190, 221, 125, 74, 191, 164, 15, 19, 191, 10, 153, 97, 62, 206, 196, 60, 190, 97, 237, 66, 188, 29, 239, 246, 59, 174, 58, 240, 189, 30, 5, 135, 190, 61, 221, 194, 61, 255, 57, 47, 190, 50, 42, 185, 188, 118, 96, 172, 62, 157, 70, 87, 62, 162, 192, 109, 61, 231, 80, 8, 190, 213, 123, 35, 63, 149, 243, 167, 190, 42, 128, 22, 62, 122, 3, 41, 61, 70, 2, 104, 190, 209, 119, 233, 61, 1, 255, 163, 190, 229, 173, 150, 61, 151, 60, 226, 187, 17, 203, 150, 187, 13, 234, 24, 60, 210, 180, 67, 190, 128, 235, 102, 62, 248, 202, 45, 189, 2, 77, 169, 188, 140, 29, 31, 62, 81, 233, 149, 189, 44, 11, 23, 62, 157, 58, 234, 59, 89, 67, 32, 62, 36, 202, 85, 61, 35, 35, 24, 187, 115, 203, 128, 186, 85, 5, 138, 60, 244, 53, 65, 61, 239, 27, 196, 61, 139, 154, 53, 189, 208, 218, 201, 189, 32, 196, 48, 190, 45, 122, 188, 189, 161, 135, 44, 61, 35, 124, 222, 61, 173, 10, 46, 57, 142, 86, 29, 62, 99, 29, 11, 189, 225, 192, 162, 187, 196, 9, 156, 189, 216, 104, 44, 190, 56, 204, 25, 190, 117, 171, 119, 189, 184, 24, 250, 60, 254, 16, 221, 189, 201, 180, 241, 61, 17, 214, 42, 190, 53, 245, 8, 60, 48, 113, 201, 188, 107, 55, 25, 62, 8, 144, 110, 191, 233, 76, 143, 188, 5, 198, 252, 189, 134, 225, 96, 190, 100, 18, 178, 191, 35, 249, 50, 190, 82, 178, 4, 62, 87, 146, 186, 188, 243, 61, 132, 190, 103, 49, 134, 59, 191, 91, 183, 190, 147, 25, 163, 189, 251, 7, 132, 189, 146, 208, 253, 190, 136, 53, 7, 190, 22, 92, 89, 62, 24, 113, 24, 192, 194, 12, 233, 61, 61, 169, 54, 62, 167, 233, 117, 190, 22, 250, 33, 62, 187, 50, 63, 188, 236, 27, 221, 190, 135, 196, 231, 190, 225, 217, 14, 189, 224, 65, 3, 62, 224, 243, 158, 61, 1, 104, 175, 190, 46, 70, 237, 191, 136, 197, 26, 63, 87, 230, 72, 189, 252, 8, 7, 190, 81, 222, 157, 188, 192, 236, 194, 190, 74, 173, 254, 190, 219, 238, 214, 190, 31, 248, 235, 61, 166, 5, 20, 191, 190, 7, 88, 61, 237, 247, 183, 61, 67, 74, 181, 190, 171, 85, 106, 190, 200, 17, 188, 62, 245, 236, 212, 188, 17, 101, 47, 191, 9, 140, 61, 62, 192, 137, 206, 62, 60, 33, 131, 62, 166, 72, 50, 190, 69, 151, 163, 62, 178, 26, 207, 190, 45, 223, 145, 62, 179, 130, 154, 62, 116, 9, 113, 191, 10, 164, 47, 62, 106, 50, 22, 190, 189, 240, 142, 62, 3, 149, 148, 62, 132, 188, 236, 61, 3, 49, 144, 189, 113, 95, 182, 190, 245, 158, 110, 62, 243, 213, 243, 61, 245, 227, 77, 190, 201, 53, 98, 188, 146, 73, 85, 189, 227, 144, 37, 190, 166, 35, 174, 189, 33, 135, 184, 189, 27, 34, 81, 190, 134, 191, 173, 61, 92, 20, 103, 189, 189, 106, 218, 189, 159, 32, 92, 190, 184, 234, 6, 61, 252, 73, 128, 189, 220, 21, 227, 61, 206, 61, 95, 190, 102, 100, 13, 62, 141, 100, 68, 190, 147, 245, 79, 190, 74, 45, 37, 61, 2, 60, 165, 190, 227, 47, 193, 188, 133, 146, 187, 189, 231, 48, 79, 189, 142, 145, 166, 189, 31, 24, 46, 62, 245, 71, 139, 61, 88, 94, 137, 60, 179, 210, 8, 190, 56, 30, 100, 190, 196, 252, 126, 60, 101, 67, 73, 62, 234, 46, 153, 61, 159, 244, 105, 191, 224, 98, 165, 60, 238, 151, 176, 62, 205, 196, 40, 190, 204, 148, 255, 190, 122, 126, 23, 62, 114, 168, 28, 189, 225, 130, 30, 192, 1, 90, 244, 190, 23, 151, 165, 62, 47, 39, 192, 191, 105, 140, 175, 62, 147, 243, 183, 190, 58, 172, 206, 190, 230, 54, 22, 191, 77, 34, 169, 61, 162, 159, 97, 189, 189, 206, 129, 188, 211, 204, 159, 190, 227, 222, 207, 191, 102, 102, 3, 62, 145, 102, 37, 61, 189, 90, 180, 190, 219, 62, 147, 62, 2, 13, 146, 190, 172, 15, 118, 62, 152, 169, 119, 61, 59, 14, 197, 61, 145, 237, 14, 191, 247, 22, 87, 187, 7, 126, 244, 190, 28, 227, 20, 190, 80, 22, 112, 62, 83, 51, 14, 62, 17, 225, 191, 62, 10, 254, 153, 61, 55, 38, 99, 189, 4, 42, 46, 191, 239, 101, 103, 188, 169, 228, 28, 62, 249, 162, 117, 61, 216, 206, 180, 190, 190, 8, 123, 60, 115, 184, 36, 190, 12, 193, 166, 190, 18, 172, 164, 61, 146, 109, 60, 61, 2, 196, 71, 62, 124, 73, 110, 61, 181, 191, 16, 191, 13, 222, 158, 62, 46, 205, 52, 62, 90, 186, 58, 190, 116, 181, 73, 62, 47, 28, 93, 190, 48, 53, 98, 189, 52, 172, 0, 191, 64, 155, 193, 61, 118, 201, 64, 60, 220, 178, 207, 61, 181, 245, 13, 189, 180, 238, 135, 191, 40, 6, 22, 62, 121, 218, 70, 61, 58, 144, 130, 189, 89, 121, 81, 190, 114, 149, 217, 189, 63, 148, 114, 189, 204, 66, 81, 189, 244, 102, 75, 61, 33, 8, 50, 190, 154, 79, 5, 190, 147, 91, 11, 62, 195, 19, 33, 190, 208, 5, 15, 190, 146, 42, 24, 189, 61, 153, 226, 61, 232, 167, 229, 61, 112, 65, 136, 61, 57, 134, 213, 189, 110, 82, 143, 189, 208, 98, 158, 60, 106, 119, 98, 189, 250, 156, 159, 61, 124, 38, 31, 190, 122, 205, 198, 61, 49, 212, 142, 61, 10, 136, 132, 61, 21, 136, 18, 62, 32, 193, 222, 189, 14, 204, 86, 190, 71, 155, 11, 61, 209, 248, 67, 190, 189, 161, 27, 190, 249, 124, 30, 190, 101, 208, 238, 61, 159, 91, 131, 190, 176, 117, 154, 61, 89, 39, 133, 62, 139, 174, 221, 190, 110, 224, 186, 190, 103, 187, 149, 62, 143, 199, 124, 190, 232, 174, 179, 190, 199, 199, 130, 191, 214, 240, 111, 61, 98, 119, 182, 191, 156, 140, 51, 62, 247, 235, 77, 190, 241, 27, 5, 191, 193, 151, 39, 191, 135, 68, 196, 62, 131, 243, 122, 62, 166, 161, 33, 62, 249, 192, 203, 62, 60, 158, 154, 191, 227, 115, 183, 62, 0, 219, 122, 60, 28, 196, 48, 190, 15, 39, 35, 190, 119, 158, 132, 189, 73, 209, 63, 61, 4, 74, 203, 61, 163, 119, 73, 62, 234, 205, 38, 191, 18, 236, 192, 189, 96, 158, 190, 60, 51, 15, 0, 190, 61, 174, 16, 190, 84, 250, 126, 61, 205, 8, 178, 62, 162, 54, 23, 190, 177, 175, 46, 62, 156, 36, 152, 191, 189, 132, 21, 61, 53, 115, 125, 190, 202, 34, 198, 62, 104, 108, 177, 60, 212, 59, 66, 190, 81, 185, 64, 62, 49, 95, 157, 190, 42, 240, 175, 189, 101, 68, 73, 62, 121, 184, 134, 190, 232, 218, 167, 189, 111, 204, 94, 190, 60, 187, 124, 191, 237, 55, 181, 190, 109, 163, 62, 62, 197, 155, 32, 61, 147, 200, 77, 191, 200, 136, 95, 62, 224, 229, 145, 60, 39, 87, 41, 191, 227, 80, 167, 190, 234, 229, 202, 189, 24, 238, 107, 62, 12, 163, 6, 190, 212, 245, 173, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 240, 66, 187, 18, 131, 174, 188, 107, 54, 13, 60, 118, 56, 27, 61, 208, 109, 204, 62, 28, 144, 133, 62, 83, 104, 185, 189, 117, 239, 24, 62, 126, 222, 252, 189, 215, 74, 135, 60, 233, 186, 241, 189, 29, 240, 151, 62, 95, 206, 167, 62, 44, 228, 17, 190, 104, 221, 37, 190, 90, 224, 189, 189, 227, 135, 126, 189, 145, 154, 209, 61, 123, 4, 180, 62, 170, 17, 161, 61, 70, 150, 74, 189, 75, 33, 145, 189, 52, 244, 193, 61, 187, 238, 50, 190, 104, 78, 63, 62, 93, 197, 35, 62, 110, 113, 24, 190, 109, 57, 143, 58, 44, 227, 16, 190, 240, 236, 223, 60, 9, 216, 186, 188, 122, 162, 122, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 248, 183, 62, 251, 35, 170, 62, 193, 49, 249, 62, 202, 223, 33, 191, 87, 23, 4, 62, 138, 157, 34, 191, 211, 154, 216, 190, 181, 0, 143, 61, 231, 59, 150, 62, 243, 135, 149, 62, 67, 92, 220, 62, 167, 86, 161, 191, 217, 119, 195, 190, 232, 42, 66, 188, 86, 70, 253, 61, 103, 169, 197, 187, 53, 70, 215, 62, 126, 1, 99, 62, 166, 54, 141, 190, 175, 140, 83, 62, 236, 43, 92, 191, 72, 220, 7, 63, 96, 237, 157, 190, 39, 254, 127, 61, 179, 2, 155, 63, 146, 35, 32, 191, 75, 120, 142, 190, 55, 165, 144, 191, 114, 181, 149, 62, 90, 136, 148, 189, 94, 230, 62, 191, 100, 38, 139, 63, 96, 112, 186, 188, 132, 232, 173, 190, 170, 232, 240, 62, 250, 149, 92, 188, 3, 3, 191, 190, 193, 117, 130, 61, 169, 135, 120, 62, 137, 57, 9, 191, 12, 93, 246, 60, 252, 151, 20, 62, 90, 131, 168, 62, 66, 11, 10, 63, 211, 52, 7, 191, 188, 115, 178, 189, 52, 97, 198, 189, 82, 212, 23, 61, 171, 64, 100, 190, 218, 174, 115, 190, 9, 118, 175, 189, 247, 237, 172, 189, 26, 35, 238, 62, 195, 137, 225, 62, 42, 140, 53, 189, 16, 229, 81, 189, 84, 233, 4, 62, 221, 171, 106, 62, 28, 20, 42, 188, 119, 64, 139, 62, 44, 99, 3, 62, 17, 246, 52, 61, 47, 11, 234, 61, 117, 215, 139, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {172, 233, 52, 62, 105, 68, 45, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {198, 108, 97, 63, 16, 148, 149, 62, 79, 182, 116, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {148, 18, 231, 191, 90, 165, 98, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0096/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}