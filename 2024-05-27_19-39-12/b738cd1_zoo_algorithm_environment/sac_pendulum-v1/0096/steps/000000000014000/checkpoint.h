// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 56, 153, 62, 164, 233, 115, 190, 187, 234, 78, 188, 18, 33, 168, 190, 50, 208, 179, 63, 126, 159, 158, 62, 170, 235, 126, 62, 29, 114, 17, 191, 251, 75, 118, 61, 56, 92, 16, 191, 195, 219, 121, 191, 38, 217, 55, 190, 36, 133, 32, 63, 184, 51, 138, 191, 167, 38, 143, 190, 146, 39, 253, 62, 32, 104, 146, 191, 85, 217, 123, 190, 219, 47, 193, 190, 243, 194, 48, 63, 118, 186, 3, 191, 137, 213, 219, 190, 245, 148, 201, 62, 239, 25, 32, 63, 139, 205, 173, 60, 56, 120, 166, 63, 45, 108, 234, 62, 28, 190, 38, 62, 49, 22, 109, 191, 28, 119, 219, 188, 134, 153, 192, 190, 86, 113, 160, 191, 255, 20, 138, 190, 116, 182, 10, 191, 113, 21, 143, 63, 157, 152, 226, 62, 224, 201, 94, 191, 53, 66, 200, 190, 16, 84, 142, 189, 220, 48, 112, 190, 33, 60, 239, 62, 131, 65, 0, 191, 95, 72, 97, 190, 68, 81, 82, 61, 172, 116, 83, 63, 26, 38, 193, 61, 185, 190, 116, 191, 53, 164, 0, 63, 13, 61, 23, 63, 133, 216, 125, 63, 128, 100, 184, 62, 171, 138, 14, 191, 127, 207, 9, 63, 145, 192, 226, 189, 171, 209, 165, 62, 36, 75, 152, 191, 44, 194, 10, 191, 96, 129, 22, 63, 111, 189, 123, 63, 125, 66, 186, 62, 172, 157, 171, 190, 45, 16, 172, 63, 84, 1, 147, 62, 85, 53, 148, 191, 211, 64, 87, 190, 46, 127, 155, 188, 101, 230, 19, 191, 221, 0, 0, 63, 19, 143, 0, 62, 127, 2, 93, 63, 46, 11, 56, 191, 183, 205, 203, 190, 114, 73, 240, 59, 212, 143, 34, 191, 44, 213, 75, 189, 147, 253, 242, 190, 50, 7, 21, 63, 88, 55, 81, 190, 213, 87, 169, 60, 231, 41, 67, 63, 143, 150, 8, 191, 113, 45, 168, 190, 204, 185, 4, 63, 95, 161, 124, 61, 209, 78, 222, 61, 205, 30, 34, 63, 173, 234, 8, 62, 101, 41, 111, 62, 10, 192, 28, 191, 80, 195, 99, 62, 117, 130, 32, 62, 7, 238, 205, 191, 138, 8, 191, 190, 188, 196, 103, 63, 124, 16, 96, 63, 119, 220, 156, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 147, 19, 191, 215, 209, 85, 189, 198, 55, 197, 62, 207, 227, 155, 62, 135, 241, 154, 190, 177, 141, 208, 189, 157, 177, 235, 190, 239, 245, 163, 190, 109, 242, 55, 62, 25, 23, 147, 188, 96, 10, 11, 63, 175, 44, 193, 190, 19, 44, 170, 61, 241, 139, 121, 190, 33, 59, 128, 191, 106, 82, 105, 62, 218, 116, 130, 62, 87, 135, 9, 63, 142, 92, 175, 62, 1, 64, 201, 190, 208, 204, 27, 190, 160, 161, 15, 190, 232, 102, 37, 63, 118, 145, 78, 191, 126, 228, 1, 63, 28, 199, 181, 190, 4, 159, 58, 62, 43, 98, 176, 62, 204, 50, 190, 62, 121, 71, 159, 189, 8, 241, 49, 62, 93, 176, 147, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 48, 218, 61, 214, 211, 4, 191, 136, 116, 100, 58, 58, 156, 207, 61, 70, 1, 25, 191, 51, 10, 234, 189, 85, 162, 12, 62, 55, 255, 4, 191, 39, 35, 179, 190, 188, 57, 4, 63, 45, 109, 176, 189, 86, 114, 132, 190, 201, 161, 28, 62, 254, 129, 89, 62, 87, 125, 189, 190, 58, 100, 29, 188, 2, 159, 69, 191, 12, 23, 61, 62, 8, 51, 243, 61, 200, 43, 153, 188, 197, 2, 234, 190, 48, 150, 163, 190, 176, 83, 184, 189, 26, 172, 164, 189, 51, 55, 119, 189, 155, 92, 129, 62, 241, 153, 226, 189, 15, 231, 155, 187, 17, 88, 121, 190, 64, 222, 191, 190, 149, 15, 35, 62, 66, 46, 174, 189, 161, 198, 190, 61, 165, 249, 165, 62, 129, 66, 162, 62, 169, 172, 219, 190, 18, 219, 113, 190, 109, 48, 188, 61, 47, 3, 2, 62, 251, 222, 90, 188, 13, 249, 21, 61, 221, 243, 132, 61, 92, 174, 237, 61, 41, 33, 20, 190, 137, 15, 4, 190, 216, 204, 252, 60, 185, 17, 174, 189, 181, 176, 217, 189, 135, 55, 239, 62, 115, 156, 171, 189, 42, 139, 84, 62, 48, 44, 182, 61, 50, 37, 74, 62, 134, 33, 133, 191, 209, 14, 180, 190, 216, 98, 115, 62, 241, 136, 227, 61, 185, 86, 112, 61, 111, 66, 182, 61, 227, 242, 228, 61, 143, 34, 185, 62, 118, 246, 53, 190, 146, 206, 138, 189, 198, 163, 152, 62, 9, 145, 244, 61, 197, 100, 180, 61, 48, 99, 33, 62, 113, 23, 146, 62, 160, 160, 15, 63, 227, 170, 211, 62, 40, 246, 171, 191, 33, 178, 121, 62, 211, 116, 52, 190, 164, 117, 151, 62, 34, 204, 109, 190, 74, 227, 192, 189, 4, 125, 152, 62, 34, 172, 6, 191, 247, 98, 130, 189, 13, 61, 68, 62, 221, 103, 17, 191, 54, 185, 80, 190, 164, 107, 183, 189, 147, 98, 93, 191, 238, 231, 168, 59, 215, 223, 62, 62, 145, 108, 84, 189, 44, 126, 15, 62, 252, 124, 36, 62, 34, 102, 64, 61, 251, 220, 28, 62, 163, 157, 191, 188, 119, 107, 244, 189, 127, 173, 190, 188, 155, 232, 28, 190, 120, 39, 112, 61, 81, 92, 79, 189, 223, 35, 75, 62, 228, 145, 156, 62, 173, 232, 204, 61, 50, 79, 79, 62, 189, 18, 42, 62, 55, 106, 15, 62, 44, 158, 35, 62, 155, 29, 19, 62, 15, 78, 243, 190, 154, 171, 43, 62, 183, 194, 209, 61, 74, 0, 245, 61, 101, 240, 241, 189, 165, 175, 49, 190, 41, 33, 62, 190, 58, 2, 50, 190, 162, 217, 4, 61, 141, 120, 132, 62, 88, 189, 127, 61, 59, 85, 158, 189, 245, 165, 197, 62, 150, 54, 152, 189, 12, 56, 113, 190, 109, 87, 179, 187, 57, 214, 49, 190, 239, 16, 214, 61, 21, 243, 113, 59, 101, 162, 161, 190, 1, 21, 164, 190, 184, 46, 200, 62, 4, 35, 82, 191, 133, 3, 39, 189, 177, 159, 64, 189, 237, 20, 165, 62, 212, 224, 207, 189, 16, 232, 234, 190, 65, 7, 153, 188, 233, 154, 205, 60, 191, 225, 101, 62, 75, 40, 19, 62, 64, 140, 52, 59, 95, 117, 12, 62, 23, 44, 18, 62, 27, 11, 28, 61, 87, 199, 219, 189, 198, 123, 183, 61, 116, 97, 185, 61, 92, 35, 17, 189, 212, 155, 144, 62, 185, 185, 155, 189, 153, 31, 14, 190, 13, 12, 254, 189, 5, 250, 4, 62, 242, 40, 21, 62, 225, 199, 130, 61, 171, 1, 168, 61, 44, 156, 11, 60, 55, 89, 23, 62, 100, 99, 133, 62, 145, 122, 105, 62, 196, 186, 140, 61, 240, 186, 117, 190, 140, 81, 185, 62, 211, 110, 102, 61, 104, 179, 96, 189, 43, 41, 177, 61, 57, 49, 1, 192, 58, 56, 208, 190, 221, 249, 77, 191, 243, 134, 47, 188, 73, 176, 196, 189, 50, 138, 104, 62, 157, 70, 105, 61, 123, 217, 253, 190, 107, 67, 9, 190, 197, 93, 194, 191, 71, 221, 55, 62, 208, 80, 67, 62, 89, 161, 246, 61, 121, 49, 190, 62, 240, 88, 159, 190, 5, 58, 174, 61, 131, 117, 166, 61, 8, 240, 178, 61, 163, 4, 145, 191, 9, 25, 80, 61, 8, 250, 210, 190, 181, 204, 93, 190, 132, 63, 70, 61, 64, 58, 132, 62, 61, 182, 97, 190, 155, 232, 67, 62, 251, 212, 62, 62, 218, 10, 4, 191, 24, 168, 121, 62, 122, 205, 35, 190, 3, 217, 89, 189, 190, 17, 16, 189, 125, 93, 134, 191, 100, 103, 76, 191, 33, 200, 155, 191, 48, 246, 172, 189, 41, 131, 28, 187, 94, 20, 207, 61, 225, 247, 14, 190, 138, 174, 110, 190, 86, 101, 128, 62, 245, 57, 54, 61, 176, 50, 72, 61, 210, 148, 213, 61, 172, 108, 47, 62, 185, 213, 37, 60, 57, 120, 207, 62, 89, 63, 189, 189, 223, 70, 0, 62, 51, 34, 128, 187, 237, 153, 168, 190, 119, 196, 165, 62, 123, 117, 241, 190, 197, 168, 133, 190, 55, 35, 199, 62, 200, 75, 46, 62, 238, 64, 158, 62, 164, 68, 246, 61, 192, 195, 133, 62, 249, 179, 15, 191, 209, 240, 11, 62, 128, 234, 184, 188, 175, 250, 27, 191, 199, 13, 124, 62, 14, 110, 135, 190, 191, 112, 44, 62, 151, 217, 3, 190, 89, 58, 45, 189, 251, 95, 250, 188, 92, 59, 21, 61, 146, 198, 128, 62, 36, 97, 220, 189, 116, 115, 54, 190, 181, 181, 250, 188, 215, 39, 83, 190, 34, 254, 16, 62, 212, 157, 185, 61, 130, 107, 219, 61, 137, 160, 40, 59, 144, 191, 238, 61, 186, 60, 45, 190, 10, 171, 238, 190, 72, 92, 188, 189, 73, 179, 9, 191, 108, 147, 170, 189, 157, 18, 51, 62, 171, 146, 226, 189, 57, 221, 19, 61, 41, 209, 34, 190, 166, 201, 179, 61, 231, 139, 167, 61, 34, 69, 31, 62, 230, 235, 223, 61, 11, 191, 38, 61, 210, 150, 18, 189, 47, 64, 149, 189, 188, 74, 18, 61, 55, 134, 181, 188, 107, 187, 162, 61, 15, 220, 53, 60, 161, 62, 158, 189, 45, 5, 180, 59, 174, 70, 152, 62, 61, 156, 216, 61, 243, 92, 235, 189, 21, 50, 181, 189, 35, 50, 142, 190, 118, 162, 68, 190, 104, 8, 71, 190, 146, 232, 150, 190, 142, 161, 243, 61, 165, 182, 63, 190, 165, 37, 129, 189, 10, 12, 15, 190, 201, 40, 94, 189, 207, 101, 185, 189, 148, 135, 240, 187, 13, 229, 6, 61, 66, 9, 85, 190, 126, 8, 177, 60, 120, 119, 149, 61, 110, 212, 57, 190, 34, 206, 101, 190, 101, 170, 46, 189, 147, 188, 67, 190, 32, 46, 171, 61, 116, 247, 89, 62, 112, 126, 238, 188, 68, 29, 6, 63, 51, 163, 224, 188, 206, 167, 23, 62, 55, 212, 245, 190, 33, 77, 152, 188, 230, 15, 251, 61, 95, 88, 183, 190, 148, 52, 183, 188, 53, 207, 52, 60, 236, 99, 123, 62, 16, 170, 191, 190, 143, 48, 159, 61, 34, 227, 198, 60, 127, 57, 146, 62, 156, 208, 115, 190, 147, 114, 21, 191, 165, 9, 145, 62, 92, 86, 167, 185, 187, 69, 183, 60, 92, 227, 1, 190, 233, 62, 89, 190, 204, 188, 171, 61, 181, 75, 196, 190, 58, 199, 141, 61, 145, 195, 179, 61, 115, 234, 41, 62, 2, 46, 219, 189, 221, 29, 108, 61, 181, 209, 144, 190, 53, 196, 245, 189, 110, 165, 64, 190, 232, 221, 192, 61, 101, 38, 137, 190, 209, 144, 40, 62, 98, 144, 104, 62, 188, 95, 205, 61, 71, 239, 121, 190, 47, 208, 8, 191, 232, 8, 36, 58, 219, 241, 21, 189, 253, 113, 188, 190, 107, 206, 181, 190, 203, 127, 255, 60, 252, 72, 11, 191, 130, 233, 38, 190, 145, 196, 2, 61, 229, 144, 133, 190, 163, 202, 72, 62, 82, 32, 69, 191, 141, 117, 34, 190, 42, 45, 135, 190, 11, 124, 102, 191, 93, 188, 227, 62, 64, 244, 1, 62, 25, 59, 39, 62, 46, 224, 187, 61, 40, 62, 233, 190, 219, 136, 141, 190, 241, 255, 208, 61, 226, 173, 49, 62, 16, 186, 132, 62, 140, 150, 235, 189, 16, 218, 15, 191, 152, 238, 236, 188, 111, 13, 72, 61, 5, 237, 170, 191, 162, 48, 132, 191, 179, 171, 173, 62, 193, 129, 181, 190, 136, 240, 85, 190, 188, 250, 207, 190, 107, 119, 42, 61, 88, 126, 153, 191, 36, 219, 192, 61, 243, 82, 108, 190, 59, 78, 145, 190, 161, 232, 144, 61, 233, 152, 153, 61, 108, 64, 30, 62, 131, 162, 85, 190, 17, 248, 230, 60, 106, 225, 34, 191, 135, 109, 41, 189, 10, 31, 115, 62, 152, 148, 246, 190, 227, 173, 227, 189, 242, 39, 143, 190, 13, 18, 54, 62, 199, 233, 160, 61, 79, 200, 61, 62, 66, 113, 237, 189, 21, 83, 217, 189, 46, 11, 185, 60, 9, 111, 207, 61, 52, 42, 128, 191, 28, 194, 186, 62, 241, 77, 49, 191, 142, 79, 55, 191, 169, 16, 150, 190, 245, 102, 206, 61, 236, 120, 172, 190, 114, 172, 11, 61, 85, 210, 69, 190, 198, 225, 180, 189, 176, 208, 186, 190, 91, 190, 146, 190, 130, 199, 93, 190, 191, 138, 3, 190, 244, 222, 84, 188, 80, 30, 65, 62, 210, 159, 228, 61, 138, 174, 21, 62, 210, 165, 163, 61, 130, 211, 69, 191, 223, 90, 87, 190, 58, 168, 29, 61, 151, 47, 152, 190, 139, 117, 176, 61, 216, 91, 28, 190, 224, 134, 95, 62, 129, 231, 84, 61, 169, 238, 33, 62, 138, 11, 199, 61, 191, 66, 175, 190, 190, 86, 10, 62, 127, 9, 40, 62, 3, 208, 198, 189, 150, 151, 45, 190, 206, 88, 228, 61, 223, 82, 232, 61, 74, 5, 27, 190, 88, 31, 239, 189, 86, 47, 2, 62, 217, 210, 120, 61, 49, 103, 33, 190, 165, 106, 236, 61, 216, 205, 43, 61, 62, 59, 18, 61, 28, 166, 46, 190, 24, 35, 3, 189, 100, 241, 39, 190, 73, 86, 199, 61, 23, 237, 10, 61, 221, 152, 100, 60, 15, 215, 34, 190, 117, 10, 50, 60, 118, 40, 165, 189, 81, 238, 164, 61, 132, 113, 155, 188, 175, 171, 188, 189, 103, 255, 8, 190, 50, 169, 0, 188, 222, 145, 73, 190, 126, 136, 7, 190, 127, 112, 54, 61, 207, 189, 157, 60, 68, 154, 217, 61, 45, 169, 149, 61, 146, 67, 59, 189, 69, 161, 252, 188, 111, 204, 45, 190, 65, 249, 27, 62, 211, 38, 50, 189, 63, 37, 240, 61, 178, 205, 218, 61, 183, 139, 158, 189, 221, 163, 19, 189, 221, 219, 117, 190, 108, 133, 6, 62, 17, 240, 108, 189, 107, 47, 255, 61, 106, 196, 56, 189, 67, 217, 6, 190, 94, 44, 31, 189, 190, 124, 105, 61, 89, 229, 129, 188, 182, 246, 5, 62, 89, 234, 26, 60, 174, 69, 21, 62, 161, 132, 131, 189, 95, 243, 91, 190, 246, 111, 36, 61, 102, 195, 92, 189, 240, 43, 29, 189, 54, 254, 201, 189, 230, 159, 14, 59, 177, 202, 75, 60, 99, 233, 73, 61, 137, 98, 54, 190, 38, 119, 221, 61, 89, 237, 27, 190, 35, 60, 61, 190, 8, 76, 69, 189, 142, 70, 198, 61, 98, 159, 19, 62, 29, 222, 1, 188, 48, 93, 37, 190, 219, 240, 195, 61, 132, 4, 12, 190, 42, 144, 101, 61, 77, 39, 210, 61, 195, 15, 23, 187, 219, 99, 3, 190, 178, 156, 198, 189, 185, 59, 60, 189, 38, 75, 183, 61, 50, 198, 55, 190, 89, 147, 162, 189, 123, 83, 22, 189, 41, 59, 51, 190, 117, 89, 21, 190, 161, 199, 34, 60, 82, 21, 172, 59, 41, 246, 78, 189, 157, 149, 129, 61, 219, 215, 18, 61, 162, 16, 28, 190, 228, 152, 37, 62, 119, 77, 131, 189, 105, 82, 210, 60, 234, 194, 135, 189, 112, 144, 236, 189, 46, 166, 7, 62, 193, 73, 164, 61, 148, 104, 43, 191, 80, 106, 188, 189, 11, 33, 9, 62, 207, 110, 21, 62, 147, 226, 29, 188, 161, 248, 129, 190, 247, 102, 176, 60, 213, 196, 18, 61, 67, 160, 195, 190, 108, 133, 157, 190, 44, 137, 94, 61, 77, 179, 184, 61, 63, 88, 85, 62, 182, 52, 40, 62, 125, 33, 1, 190, 122, 78, 71, 62, 185, 54, 28, 191, 146, 250, 19, 190, 208, 114, 124, 191, 58, 57, 35, 191, 164, 84, 65, 62, 219, 172, 241, 61, 110, 110, 244, 60, 206, 149, 155, 62, 157, 232, 179, 190, 173, 183, 18, 62, 115, 29, 17, 189, 218, 134, 252, 61, 79, 164, 121, 62, 215, 53, 30, 61, 82, 125, 136, 62, 39, 254, 56, 62, 223, 43, 25, 189, 123, 224, 81, 62, 76, 59, 22, 62, 99, 146, 237, 190, 221, 87, 128, 62, 34, 105, 53, 60, 219, 68, 25, 189, 183, 151, 184, 190, 185, 135, 50, 62, 75, 164, 144, 190, 14, 32, 138, 189, 70, 210, 36, 188, 131, 215, 127, 62, 106, 243, 200, 185, 222, 119, 84, 190, 104, 159, 122, 61, 21, 31, 12, 191, 104, 147, 113, 60, 239, 110, 162, 189, 125, 120, 45, 190, 169, 243, 186, 62, 176, 24, 165, 61, 114, 30, 82, 191, 182, 212, 62, 59, 71, 41, 152, 60, 77, 156, 160, 62, 89, 82, 182, 61, 117, 36, 4, 190, 139, 204, 150, 62, 236, 96, 211, 189, 102, 3, 106, 190, 102, 39, 51, 62, 48, 17, 111, 191, 114, 79, 30, 191, 20, 95, 73, 191, 107, 37, 118, 62, 217, 83, 0, 62, 193, 208, 30, 62, 136, 250, 189, 61, 52, 51, 178, 190, 36, 90, 128, 189, 226, 122, 186, 189, 193, 94, 49, 190, 251, 235, 140, 61, 177, 128, 238, 189, 49, 155, 111, 62, 155, 231, 224, 62, 133, 66, 2, 189, 226, 192, 239, 189, 241, 170, 26, 61, 212, 148, 177, 190, 137, 200, 25, 62, 75, 192, 215, 190, 112, 167, 174, 187, 44, 239, 2, 61, 177, 97, 192, 61, 228, 112, 76, 62, 28, 2, 143, 62, 252, 70, 152, 61, 29, 29, 191, 190, 63, 82, 97, 62, 19, 19, 245, 189, 214, 200, 159, 62, 214, 65, 95, 62, 246, 126, 71, 61, 178, 140, 183, 62, 124, 128, 146, 62, 84, 184, 150, 191, 218, 77, 1, 62, 28, 93, 159, 61, 128, 172, 234, 186, 104, 234, 145, 61, 240, 241, 11, 61, 118, 201, 132, 62, 185, 247, 43, 190, 12, 27, 141, 59, 106, 110, 160, 61, 204, 155, 36, 190, 110, 177, 56, 187, 241, 40, 105, 190, 94, 213, 41, 190, 94, 103, 132, 62, 171, 233, 121, 62, 4, 87, 180, 61, 71, 235, 128, 62, 146, 146, 225, 61, 128, 29, 219, 189, 144, 75, 198, 61, 205, 153, 150, 61, 230, 118, 15, 62, 251, 112, 96, 62, 184, 134, 134, 188, 211, 135, 200, 62, 113, 232, 234, 189, 238, 69, 43, 190, 5, 148, 183, 61, 222, 8, 100, 191, 148, 171, 158, 191, 238, 22, 154, 191, 114, 71, 45, 62, 155, 98, 166, 61, 249, 247, 165, 188, 196, 150, 188, 61, 80, 105, 227, 190, 50, 13, 122, 61, 215, 182, 17, 191, 186, 11, 195, 61, 133, 83, 62, 62, 57, 119, 248, 60, 60, 45, 150, 62, 205, 238, 220, 60, 184, 247, 118, 187, 210, 8, 21, 63, 153, 66, 172, 190, 132, 75, 107, 190, 167, 4, 158, 190, 239, 124, 85, 190, 113, 44, 226, 189, 50, 249, 35, 61, 199, 219, 66, 62, 134, 166, 204, 190, 61, 68, 177, 189, 157, 162, 123, 60, 197, 186, 43, 191, 162, 144, 186, 61, 67, 67, 2, 62, 175, 17, 137, 62, 48, 100, 150, 190, 133, 183, 125, 61, 139, 113, 191, 190, 122, 87, 235, 189, 129, 207, 134, 191, 225, 88, 236, 61, 5, 115, 9, 190, 142, 201, 229, 187, 180, 254, 85, 190, 90, 73, 230, 61, 179, 34, 55, 62, 200, 105, 65, 189, 223, 35, 28, 61, 15, 208, 152, 189, 151, 247, 144, 190, 88, 56, 131, 62, 104, 166, 225, 191, 180, 128, 165, 190, 156, 92, 114, 62, 44, 103, 173, 62, 135, 87, 191, 62, 41, 13, 61, 190, 55, 140, 27, 61, 15, 102, 235, 61, 158, 174, 112, 190, 228, 224, 98, 62, 7, 252, 210, 61, 241, 56, 156, 190, 215, 118, 7, 192, 239, 23, 154, 189, 39, 192, 5, 190, 221, 38, 11, 191, 206, 54, 134, 62, 42, 209, 181, 190, 245, 229, 79, 191, 128, 35, 21, 191, 119, 158, 134, 62, 215, 181, 64, 190, 116, 225, 227, 59, 92, 24, 86, 60, 238, 240, 2, 189, 165, 216, 147, 190, 113, 171, 173, 60, 74, 62, 12, 190, 62, 111, 13, 60, 101, 119, 157, 62, 220, 254, 94, 62, 213, 164, 240, 61, 191, 242, 10, 190, 20, 91, 37, 63, 221, 161, 153, 190, 212, 148, 216, 61, 53, 5, 0, 62, 6, 226, 45, 190, 60, 106, 191, 61, 243, 116, 62, 190, 143, 214, 174, 61, 243, 6, 142, 61, 7, 70, 132, 59, 25, 81, 113, 187, 160, 213, 57, 190, 242, 136, 110, 62, 248, 202, 45, 189, 2, 77, 169, 188, 140, 29, 31, 62, 81, 233, 149, 189, 44, 11, 23, 62, 157, 58, 234, 59, 89, 67, 32, 62, 36, 202, 85, 61, 35, 35, 24, 187, 115, 203, 128, 186, 85, 5, 138, 60, 244, 53, 65, 61, 239, 27, 196, 61, 139, 154, 53, 189, 208, 218, 201, 189, 32, 196, 48, 190, 45, 122, 188, 189, 161, 135, 44, 61, 35, 124, 222, 61, 173, 10, 46, 57, 142, 86, 29, 62, 99, 29, 11, 189, 225, 192, 162, 187, 196, 9, 156, 189, 216, 104, 44, 190, 56, 204, 25, 190, 117, 171, 119, 189, 184, 24, 250, 60, 254, 16, 221, 189, 201, 180, 241, 61, 17, 214, 42, 190, 53, 245, 8, 60, 48, 113, 201, 188, 66, 56, 20, 62, 133, 64, 29, 191, 201, 20, 30, 62, 5, 198, 252, 189, 229, 12, 97, 190, 156, 94, 142, 191, 73, 89, 73, 189, 156, 82, 234, 61, 175, 217, 92, 188, 134, 51, 16, 190, 72, 184, 220, 61, 241, 126, 53, 62, 201, 245, 49, 62, 188, 123, 241, 189, 185, 86, 131, 190, 128, 110, 138, 190, 5, 222, 123, 62, 100, 87, 254, 191, 28, 182, 47, 189, 16, 187, 87, 62, 150, 156, 113, 62, 133, 245, 142, 62, 187, 50, 63, 188, 185, 204, 16, 190, 104, 24, 2, 62, 104, 161, 160, 190, 193, 69, 60, 62, 165, 32, 151, 186, 212, 153, 169, 189, 46, 70, 237, 191, 251, 84, 94, 62, 87, 230, 72, 189, 52, 74, 36, 190, 151, 12, 194, 58, 16, 3, 155, 190, 245, 141, 7, 191, 197, 66, 226, 190, 28, 130, 211, 61, 134, 65, 236, 190, 208, 69, 230, 61, 237, 167, 19, 62, 63, 45, 132, 190, 220, 111, 148, 190, 199, 29, 221, 60, 120, 174, 3, 189, 207, 36, 180, 190, 244, 35, 71, 62, 91, 7, 221, 62, 67, 1, 58, 62, 6, 27, 53, 190, 106, 35, 217, 62, 48, 15, 217, 190, 31, 212, 50, 190, 57, 237, 154, 62, 218, 129, 91, 191, 38, 159, 36, 62, 85, 152, 242, 189, 31, 247, 114, 62, 172, 47, 117, 62, 227, 48, 1, 62, 21, 61, 68, 189, 13, 129, 184, 190, 143, 226, 129, 62, 243, 213, 243, 61, 121, 227, 0, 190, 249, 219, 31, 189, 146, 73, 85, 189, 35, 126, 6, 190, 191, 209, 65, 189, 170, 187, 157, 189, 118, 89, 77, 190, 186, 253, 241, 61, 105, 240, 79, 189, 126, 180, 217, 189, 199, 183, 171, 189, 184, 234, 6, 61, 25, 87, 131, 189, 220, 21, 227, 61, 91, 40, 242, 189, 95, 219, 3, 62, 133, 79, 66, 190, 54, 154, 39, 190, 56, 167, 126, 61, 175, 55, 65, 190, 227, 47, 193, 188, 99, 122, 109, 189, 247, 147, 86, 189, 189, 142, 249, 189, 31, 24, 46, 62, 219, 123, 93, 188, 177, 219, 49, 61, 191, 172, 12, 190, 189, 190, 65, 190, 234, 39, 238, 60, 255, 177, 33, 62, 234, 46, 153, 61, 226, 105, 119, 191, 63, 122, 176, 189, 67, 163, 185, 62, 123, 218, 95, 190, 97, 146, 10, 191, 105, 94, 36, 62, 52, 66, 92, 189, 225, 130, 30, 192, 240, 229, 21, 191, 167, 177, 168, 62, 230, 80, 192, 191, 78, 111, 192, 62, 124, 248, 180, 190, 246, 95, 219, 190, 207, 132, 247, 190, 188, 85, 169, 61, 254, 148, 41, 189, 129, 183, 163, 188, 211, 204, 159, 190, 162, 214, 204, 191, 27, 78, 98, 62, 229, 208, 178, 61, 204, 176, 131, 190, 229, 119, 133, 62, 72, 163, 151, 190, 41, 48, 129, 62, 155, 203, 148, 60, 110, 80, 56, 62, 133, 242, 25, 191, 7, 65, 71, 188, 74, 44, 177, 190, 28, 227, 20, 190, 129, 152, 142, 62, 195, 235, 50, 62, 33, 218, 214, 62, 232, 54, 113, 62, 74, 63, 81, 61, 164, 255, 187, 190, 206, 119, 31, 188, 119, 175, 211, 61, 227, 170, 14, 62, 32, 18, 140, 190, 30, 32, 125, 61, 127, 111, 224, 61, 129, 3, 27, 189, 170, 102, 23, 61, 6, 109, 168, 61, 96, 122, 33, 62, 72, 89, 129, 60, 231, 199, 247, 190, 127, 247, 64, 62, 187, 7, 70, 62, 32, 160, 140, 55, 186, 222, 88, 62, 151, 33, 128, 190, 68, 110, 144, 60, 252, 107, 229, 61, 54, 125, 22, 190, 155, 121, 31, 189, 183, 246, 158, 61, 121, 67, 198, 187, 177, 185, 81, 191, 37, 119, 183, 61, 121, 218, 70, 61, 58, 144, 130, 189, 239, 243, 48, 190, 235, 245, 215, 189, 63, 148, 114, 189, 255, 162, 63, 189, 244, 102, 75, 61, 60, 130, 17, 190, 49, 149, 201, 189, 78, 222, 43, 62, 135, 64, 26, 190, 248, 138, 5, 190, 146, 42, 24, 189, 61, 153, 226, 61, 37, 90, 19, 62, 155, 78, 201, 61, 156, 123, 148, 189, 110, 82, 143, 189, 208, 98, 158, 60, 78, 76, 18, 189, 250, 156, 159, 61, 124, 38, 31, 190, 185, 133, 225, 61, 49, 212, 142, 61, 190, 222, 193, 61, 21, 136, 18, 62, 32, 193, 222, 189, 14, 204, 86, 190, 83, 193, 73, 61, 245, 114, 35, 190, 189, 161, 27, 190, 249, 124, 30, 190, 101, 208, 238, 61, 198, 137, 253, 190, 222, 154, 40, 62, 214, 6, 158, 62, 183, 96, 220, 190, 87, 127, 185, 190, 167, 146, 136, 62, 124, 220, 121, 190, 155, 164, 105, 190, 33, 185, 59, 191, 239, 171, 165, 61, 49, 32, 163, 191, 125, 204, 247, 61, 103, 209, 101, 190, 241, 27, 5, 191, 72, 85, 213, 190, 183, 5, 203, 62, 3, 153, 0, 62, 122, 82, 225, 61, 164, 24, 2, 63, 96, 197, 160, 191, 62, 60, 139, 62, 84, 68, 165, 186, 214, 215, 149, 190, 234, 87, 234, 189, 165, 217, 156, 188, 131, 8, 165, 189, 174, 101, 21, 61, 231, 219, 78, 62, 232, 127, 194, 190, 166, 173, 18, 190, 147, 144, 216, 187, 51, 15, 0, 190, 16, 20, 171, 59, 11, 10, 19, 61, 27, 105, 146, 62, 198, 43, 61, 189, 6, 116, 23, 62, 148, 173, 150, 191, 49, 115, 190, 61, 78, 40, 75, 190, 24, 72, 184, 62, 24, 194, 49, 189, 183, 176, 135, 189, 160, 24, 208, 61, 89, 237, 141, 190, 252, 203, 38, 189, 31, 51, 71, 62, 217, 205, 172, 190, 202, 92, 177, 190, 85, 89, 247, 189, 75, 163, 118, 191, 21, 5, 26, 190, 177, 105, 215, 61, 125, 21, 24, 61, 252, 228, 17, 191, 71, 9, 61, 62, 205, 45, 244, 189, 138, 42, 10, 191, 86, 154, 47, 190, 171, 221, 14, 190, 208, 176, 100, 62, 114, 176, 20, 190, 236, 181, 164, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 144, 182, 60, 192, 135, 204, 188, 51, 29, 160, 60, 26, 215, 179, 189, 93, 154, 201, 62, 194, 167, 131, 62, 22, 221, 152, 189, 224, 90, 254, 61, 102, 226, 128, 189, 87, 154, 174, 60, 215, 180, 149, 189, 36, 142, 122, 62, 156, 12, 153, 62, 1, 237, 16, 190, 104, 221, 37, 190, 90, 224, 189, 189, 188, 82, 53, 189, 213, 239, 182, 61, 153, 2, 180, 62, 218, 249, 143, 61, 16, 80, 16, 189, 41, 29, 248, 61, 29, 167, 198, 61, 187, 238, 50, 190, 60, 232, 11, 62, 224, 32, 33, 62, 59, 183, 60, 190, 196, 189, 203, 185, 194, 70, 255, 189, 67, 10, 114, 61, 235, 208, 53, 189, 247, 192, 49, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 22, 68, 62, 16, 102, 171, 62, 212, 155, 37, 63, 217, 171, 185, 190, 3, 18, 41, 62, 61, 227, 47, 191, 197, 34, 195, 190, 2, 166, 229, 61, 22, 206, 127, 62, 72, 154, 53, 62, 93, 186, 180, 62, 38, 110, 130, 191, 166, 254, 196, 190, 132, 76, 66, 188, 86, 70, 253, 61, 103, 169, 197, 187, 152, 46, 238, 62, 135, 83, 105, 62, 179, 48, 178, 190, 53, 57, 101, 62, 71, 218, 46, 191, 253, 160, 48, 63, 248, 164, 203, 190, 39, 254, 127, 61, 117, 146, 87, 63, 48, 217, 45, 191, 191, 108, 232, 189, 247, 236, 156, 191, 72, 196, 111, 62, 9, 38, 149, 189, 122, 153, 40, 191, 165, 122, 136, 63, 192, 62, 201, 189, 75, 141, 139, 190, 71, 133, 73, 62, 192, 96, 239, 189, 191, 81, 157, 190, 42, 247, 129, 61, 183, 7, 14, 62, 165, 172, 166, 190, 194, 188, 240, 185, 220, 46, 4, 62, 159, 47, 178, 62, 154, 108, 27, 62, 130, 101, 247, 190, 180, 122, 178, 189, 52, 97, 198, 189, 82, 212, 23, 61, 10, 168, 34, 190, 165, 130, 42, 190, 90, 124, 60, 190, 203, 14, 76, 189, 76, 250, 232, 62, 51, 179, 86, 62, 105, 7, 155, 59, 16, 229, 81, 189, 40, 79, 125, 61, 228, 33, 150, 62, 176, 142, 33, 61, 143, 32, 90, 62, 7, 196, 169, 61, 154, 59, 53, 61, 218, 154, 247, 61, 13, 212, 72, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {223, 72, 81, 62, 231, 96, 7, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {50, 74, 29, 191, 125, 229, 122, 190, 10, 249, 235, 187};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {23, 37, 162, 191, 170, 230, 253, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0096/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}