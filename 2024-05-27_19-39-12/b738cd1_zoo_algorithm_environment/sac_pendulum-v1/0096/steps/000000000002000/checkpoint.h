// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 56, 153, 62, 164, 233, 115, 190, 187, 234, 78, 188, 61, 138, 214, 190, 186, 85, 155, 62, 184, 183, 146, 62, 205, 145, 169, 62, 145, 149, 245, 190, 240, 85, 134, 188, 151, 10, 131, 190, 136, 148, 244, 190, 146, 14, 48, 189, 91, 238, 2, 63, 85, 16, 33, 191, 216, 186, 162, 189, 145, 175, 134, 62, 153, 164, 12, 191, 194, 150, 121, 190, 174, 36, 243, 190, 121, 43, 83, 63, 87, 3, 16, 190, 253, 126, 36, 191, 26, 181, 230, 190, 144, 207, 249, 62, 155, 35, 250, 61, 53, 84, 47, 61, 59, 216, 200, 62, 51, 13, 10, 190, 206, 205, 80, 191, 231, 109, 178, 61, 73, 135, 44, 190, 201, 219, 31, 191, 231, 119, 181, 190, 236, 218, 19, 191, 64, 180, 172, 190, 44, 202, 160, 62, 114, 54, 174, 190, 229, 1, 144, 190, 212, 35, 206, 189, 77, 173, 254, 61, 206, 49, 154, 62, 156, 40, 238, 190, 178, 106, 226, 190, 187, 122, 202, 190, 52, 121, 231, 62, 210, 119, 48, 62, 169, 57, 61, 191, 112, 189, 251, 62, 189, 63, 19, 63, 225, 71, 55, 63, 202, 252, 167, 62, 70, 83, 153, 190, 166, 226, 156, 62, 194, 236, 78, 190, 38, 11, 190, 62, 46, 10, 204, 190, 224, 220, 231, 190, 251, 75, 173, 62, 18, 29, 230, 62, 212, 115, 172, 62, 46, 64, 153, 190, 220, 176, 17, 62, 81, 244, 140, 62, 9, 177, 62, 191, 110, 151, 250, 189, 100, 115, 201, 189, 244, 184, 176, 190, 240, 34, 251, 62, 84, 80, 50, 62, 142, 70, 252, 62, 112, 97, 133, 190, 208, 114, 253, 190, 253, 81, 189, 61, 87, 165, 64, 191, 67, 159, 31, 190, 112, 26, 178, 189, 21, 235, 157, 62, 202, 172, 121, 190, 255, 201, 110, 61, 253, 178, 80, 63, 109, 71, 167, 190, 141, 2, 233, 189, 198, 50, 246, 62, 26, 179, 73, 61, 243, 254, 25, 61, 73, 63, 253, 62, 116, 136, 14, 62, 105, 149, 159, 60, 214, 71, 241, 190, 204, 109, 130, 62, 254, 38, 158, 62, 17, 60, 1, 191, 217, 166, 155, 190, 236, 236, 8, 63, 5, 89, 18, 63, 45, 216, 29, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 147, 19, 191, 44, 225, 69, 62, 55, 185, 3, 63, 237, 204, 48, 62, 115, 122, 147, 190, 195, 54, 213, 60, 124, 110, 140, 190, 169, 68, 68, 190, 87, 128, 119, 61, 83, 104, 121, 61, 184, 134, 47, 63, 72, 40, 217, 190, 1, 184, 247, 187, 162, 100, 255, 190, 120, 152, 165, 190, 183, 238, 13, 63, 170, 120, 156, 62, 184, 212, 6, 63, 248, 236, 234, 62, 23, 84, 159, 190, 176, 110, 58, 190, 104, 247, 47, 190, 149, 251, 29, 63, 193, 148, 20, 191, 247, 107, 32, 63, 66, 243, 244, 190, 38, 98, 6, 63, 232, 40, 194, 62, 207, 204, 254, 62, 200, 116, 156, 62, 107, 91, 194, 62, 229, 23, 28, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 48, 218, 61, 78, 58, 39, 190, 241, 61, 181, 189, 157, 242, 238, 60, 146, 57, 20, 190, 33, 11, 220, 188, 236, 93, 30, 61, 121, 130, 17, 188, 32, 17, 137, 189, 31, 125, 37, 62, 142, 121, 45, 190, 99, 223, 187, 189, 219, 237, 124, 61, 99, 136, 33, 62, 132, 62, 59, 189, 243, 234, 44, 189, 11, 194, 89, 61, 30, 189, 185, 61, 54, 186, 213, 61, 99, 92, 125, 188, 214, 55, 37, 189, 9, 13, 49, 190, 76, 59, 198, 189, 60, 33, 199, 189, 3, 236, 50, 189, 175, 38, 41, 62, 84, 220, 38, 190, 81, 70, 151, 189, 19, 199, 237, 189, 182, 230, 145, 189, 221, 30, 16, 62, 97, 77, 38, 190, 161, 198, 190, 61, 77, 132, 196, 59, 44, 105, 58, 62, 200, 163, 226, 186, 212, 77, 63, 59, 30, 216, 35, 62, 235, 72, 220, 61, 160, 217, 129, 61, 109, 34, 97, 61, 234, 170, 136, 62, 118, 108, 60, 62, 100, 171, 72, 61, 82, 114, 12, 62, 14, 102, 58, 57, 26, 112, 25, 188, 178, 157, 14, 190, 65, 214, 7, 62, 14, 142, 18, 190, 25, 60, 62, 62, 235, 131, 200, 61, 199, 194, 68, 189, 130, 61, 206, 189, 69, 98, 84, 190, 45, 65, 39, 62, 111, 128, 96, 62, 144, 247, 191, 189, 222, 27, 200, 189, 204, 7, 220, 189, 38, 81, 84, 188, 139, 230, 21, 190, 95, 48, 4, 189, 91, 180, 16, 189, 9, 145, 244, 61, 40, 74, 203, 61, 155, 52, 194, 61, 60, 115, 53, 62, 9, 17, 221, 62, 66, 139, 73, 62, 142, 30, 230, 190, 170, 12, 88, 62, 237, 242, 142, 60, 190, 255, 163, 62, 59, 4, 29, 190, 184, 17, 79, 189, 97, 218, 9, 62, 215, 206, 91, 190, 60, 55, 190, 189, 9, 219, 105, 62, 36, 99, 189, 190, 174, 160, 191, 60, 67, 166, 74, 61, 164, 106, 181, 190, 11, 254, 106, 61, 194, 123, 225, 60, 190, 235, 34, 61, 77, 104, 76, 62, 184, 101, 90, 62, 43, 177, 202, 61, 5, 188, 184, 188, 30, 50, 221, 61, 157, 194, 200, 189, 37, 214, 86, 60, 65, 91, 27, 189, 102, 17, 175, 60, 81, 92, 79, 189, 0, 184, 22, 62, 104, 12, 16, 62, 137, 143, 213, 189, 138, 197, 13, 190, 69, 202, 34, 189, 120, 165, 97, 62, 199, 42, 25, 62, 89, 250, 37, 62, 235, 19, 123, 190, 135, 179, 88, 61, 247, 85, 17, 62, 25, 142, 88, 60, 79, 10, 163, 60, 25, 226, 57, 189, 78, 105, 219, 189, 34, 160, 130, 59, 133, 225, 109, 61, 251, 135, 41, 62, 239, 76, 24, 62, 163, 9, 222, 189, 67, 154, 27, 62, 195, 169, 249, 189, 79, 57, 90, 190, 10, 98, 61, 190, 244, 188, 41, 57, 90, 105, 108, 62, 44, 146, 158, 61, 39, 241, 164, 189, 166, 178, 78, 190, 212, 22, 29, 62, 232, 97, 34, 190, 133, 3, 39, 189, 7, 107, 234, 189, 58, 91, 122, 62, 254, 126, 177, 189, 191, 107, 51, 190, 20, 11, 255, 61, 58, 210, 33, 60, 199, 226, 60, 62, 239, 252, 10, 62, 72, 67, 18, 62, 95, 32, 47, 62, 39, 9, 30, 62, 28, 190, 0, 190, 164, 179, 217, 189, 102, 155, 167, 61, 134, 162, 143, 61, 195, 85, 48, 190, 46, 66, 44, 62, 241, 156, 172, 188, 201, 235, 59, 188, 60, 94, 13, 190, 182, 119, 45, 60, 159, 10, 53, 189, 164, 144, 145, 61, 63, 121, 155, 61, 41, 231, 137, 189, 235, 67, 215, 59, 47, 118, 154, 189, 147, 36, 2, 190, 225, 111, 177, 61, 165, 49, 251, 188, 27, 217, 18, 62, 211, 110, 102, 61, 90, 177, 34, 62, 183, 70, 177, 189, 192, 141, 157, 190, 216, 17, 95, 190, 175, 234, 150, 190, 156, 243, 51, 62, 223, 145, 41, 190, 253, 167, 77, 62, 225, 197, 147, 189, 209, 217, 36, 190, 226, 75, 60, 190, 103, 99, 209, 190, 211, 214, 19, 62, 215, 141, 254, 61, 95, 66, 252, 187, 102, 50, 155, 62, 141, 215, 19, 190, 203, 216, 57, 61, 9, 122, 16, 189, 11, 75, 60, 62, 79, 196, 1, 191, 187, 252, 65, 62, 233, 55, 169, 184, 192, 51, 174, 190, 228, 22, 55, 189, 81, 107, 138, 62, 191, 228, 168, 189, 183, 138, 35, 62, 146, 82, 160, 61, 83, 102, 101, 190, 153, 76, 110, 61, 122, 205, 35, 190, 235, 161, 45, 189, 33, 92, 144, 61, 14, 173, 6, 191, 127, 229, 62, 61, 89, 18, 91, 190, 201, 70, 9, 61, 200, 117, 190, 189, 56, 2, 182, 61, 4, 200, 106, 190, 237, 222, 160, 189, 131, 21, 21, 62, 81, 88, 44, 190, 38, 47, 218, 189, 245, 91, 68, 61, 69, 253, 21, 62, 70, 213, 44, 62, 60, 200, 44, 62, 61, 150, 143, 60, 157, 145, 51, 62, 207, 243, 134, 189, 58, 145, 214, 190, 109, 123, 230, 61, 142, 30, 4, 190, 228, 60, 156, 190, 158, 54, 8, 62, 25, 53, 65, 62, 135, 200, 11, 62, 248, 235, 235, 61, 102, 59, 78, 62, 73, 110, 1, 190, 46, 211, 252, 61, 128, 234, 184, 188, 22, 52, 34, 190, 141, 12, 20, 62, 243, 86, 64, 59, 251, 29, 81, 62, 54, 85, 149, 189, 36, 25, 227, 61, 24, 115, 94, 190, 48, 228, 233, 61, 190, 198, 155, 62, 160, 231, 51, 60, 137, 18, 61, 190, 254, 144, 25, 189, 129, 242, 63, 189, 97, 39, 138, 188, 85, 18, 24, 61, 28, 75, 190, 188, 41, 210, 53, 189, 153, 250, 189, 61, 66, 170, 231, 60, 116, 83, 70, 190, 201, 208, 34, 189, 121, 157, 167, 190, 100, 224, 181, 189, 41, 15, 30, 62, 84, 38, 7, 59, 138, 121, 27, 190, 253, 237, 170, 189, 212, 51, 52, 189, 164, 165, 89, 61, 78, 68, 141, 62, 166, 137, 186, 59, 11, 191, 38, 61, 152, 85, 199, 188, 32, 158, 96, 189, 23, 78, 60, 59, 160, 245, 169, 61, 52, 55, 214, 61, 216, 191, 234, 61, 57, 246, 139, 189, 177, 189, 188, 59, 128, 178, 133, 62, 144, 25, 205, 61, 145, 52, 231, 189, 238, 149, 11, 190, 64, 83, 98, 190, 85, 167, 36, 190, 85, 4, 188, 189, 242, 250, 150, 190, 105, 102, 222, 61, 219, 71, 44, 190, 165, 37, 129, 189, 29, 216, 14, 190, 20, 5, 223, 189, 234, 129, 213, 189, 192, 191, 116, 61, 103, 33, 210, 60, 246, 87, 71, 190, 109, 10, 101, 61, 250, 63, 207, 61, 13, 94, 37, 190, 12, 65, 16, 190, 11, 179, 218, 188, 66, 213, 0, 190, 32, 46, 171, 61, 195, 40, 204, 61, 218, 88, 184, 189, 105, 125, 252, 189, 176, 252, 33, 190, 213, 49, 14, 190, 193, 125, 202, 188, 137, 83, 98, 61, 56, 56, 231, 183, 12, 6, 90, 190, 143, 119, 38, 190, 183, 116, 225, 61, 74, 160, 66, 61, 166, 229, 118, 186, 21, 100, 246, 61, 198, 77, 79, 59, 168, 117, 168, 61, 140, 119, 133, 190, 239, 113, 130, 188, 64, 180, 180, 61, 105, 48, 42, 189, 176, 183, 99, 189, 201, 138, 62, 190, 181, 219, 193, 60, 112, 69, 36, 62, 25, 3, 206, 189, 152, 33, 81, 188, 102, 46, 239, 188, 240, 138, 141, 186, 136, 132, 6, 190, 104, 236, 239, 60, 193, 69, 69, 190, 53, 196, 245, 189, 163, 16, 214, 187, 9, 244, 48, 189, 238, 112, 1, 62, 63, 106, 107, 62, 138, 64, 74, 61, 6, 170, 165, 61, 146, 47, 149, 189, 6, 214, 102, 61, 247, 127, 253, 61, 92, 37, 137, 188, 27, 36, 91, 190, 225, 10, 14, 190, 33, 132, 51, 61, 20, 146, 86, 190, 22, 26, 164, 189, 195, 205, 105, 61, 124, 104, 58, 190, 59, 119, 219, 61, 183, 73, 64, 189, 55, 189, 37, 190, 20, 77, 253, 61, 241, 228, 126, 190, 29, 0, 57, 62, 16, 94, 53, 62, 205, 39, 39, 62, 2, 116, 2, 61, 116, 43, 200, 189, 201, 189, 141, 190, 55, 220, 100, 62, 246, 198, 202, 61, 177, 164, 24, 59, 140, 150, 235, 189, 252, 106, 18, 190, 97, 197, 96, 188, 105, 12, 31, 189, 214, 91, 181, 190, 14, 66, 43, 190, 146, 188, 172, 62, 100, 40, 107, 190, 121, 230, 143, 61, 181, 1, 12, 191, 116, 194, 208, 61, 103, 119, 8, 190, 110, 118, 78, 189, 21, 132, 34, 190, 143, 67, 140, 190, 222, 109, 213, 189, 94, 210, 13, 62, 60, 146, 224, 61, 45, 75, 163, 189, 60, 250, 32, 190, 78, 144, 156, 61, 3, 60, 16, 190, 88, 85, 23, 62, 67, 246, 217, 189, 80, 209, 3, 189, 209, 200, 92, 190, 7, 81, 93, 62, 13, 9, 130, 61, 57, 209, 106, 62, 74, 132, 68, 190, 170, 59, 251, 61, 128, 60, 72, 62, 9, 111, 207, 61, 94, 233, 242, 189, 177, 100, 34, 62, 144, 27, 15, 190, 49, 116, 208, 190, 151, 106, 205, 61, 141, 194, 26, 62, 243, 115, 93, 190, 143, 0, 217, 189, 197, 246, 31, 60, 240, 16, 97, 61, 62, 71, 8, 61, 188, 64, 72, 190, 128, 134, 48, 190, 200, 169, 3, 189, 197, 116, 190, 189, 134, 10, 0, 189, 99, 252, 38, 61, 125, 180, 187, 61, 46, 131, 2, 190, 184, 55, 198, 60, 161, 142, 16, 190, 48, 162, 248, 61, 132, 67, 3, 189, 196, 44, 90, 187, 75, 83, 249, 189, 175, 197, 44, 62, 122, 227, 188, 61, 80, 249, 137, 61, 240, 22, 115, 61, 90, 130, 12, 190, 178, 28, 180, 188, 127, 9, 40, 62, 205, 136, 171, 189, 7, 86, 38, 190, 2, 152, 234, 61, 223, 82, 232, 61, 74, 5, 27, 190, 88, 31, 239, 189, 163, 14, 20, 62, 71, 65, 168, 61, 179, 96, 18, 190, 165, 106, 236, 61, 95, 149, 131, 61, 120, 24, 27, 61, 28, 166, 46, 190, 124, 84, 253, 187, 18, 143, 23, 190, 48, 47, 237, 61, 254, 95, 12, 61, 221, 152, 100, 60, 187, 231, 4, 190, 58, 225, 227, 60, 77, 68, 159, 189, 190, 249, 182, 61, 132, 113, 155, 188, 59, 0, 176, 189, 103, 255, 8, 190, 50, 169, 0, 188, 84, 27, 66, 190, 212, 135, 254, 189, 189, 228, 139, 61, 207, 189, 157, 60, 68, 154, 217, 61, 45, 169, 149, 61, 217, 28, 61, 189, 168, 36, 238, 188, 213, 246, 22, 190, 44, 250, 27, 62, 19, 27, 170, 188, 152, 208, 26, 62, 178, 205, 218, 61, 183, 139, 158, 189, 221, 163, 19, 189, 223, 87, 72, 190, 108, 133, 6, 62, 199, 25, 58, 189, 198, 89, 35, 62, 106, 196, 56, 189, 67, 217, 6, 190, 142, 73, 31, 189, 43, 43, 201, 61, 27, 224, 199, 60, 182, 246, 5, 62, 89, 234, 26, 60, 113, 101, 31, 62, 215, 22, 50, 189, 31, 211, 53, 190, 118, 142, 102, 61, 22, 253, 193, 188, 106, 175, 197, 186, 249, 87, 158, 189, 119, 216, 68, 60, 177, 202, 75, 60, 136, 42, 179, 61, 132, 215, 21, 190, 38, 119, 221, 61, 88, 13, 28, 190, 14, 95, 35, 190, 67, 167, 49, 189, 85, 119, 229, 61, 212, 95, 38, 62, 174, 25, 134, 59, 48, 93, 37, 190, 140, 125, 195, 61, 10, 190, 0, 190, 225, 174, 182, 61, 77, 39, 210, 61, 196, 142, 156, 186, 22, 48, 255, 189, 178, 156, 198, 189, 13, 41, 24, 189, 41, 79, 194, 61, 134, 252, 42, 190, 14, 30, 37, 189, 105, 0, 23, 189, 186, 58, 51, 190, 109, 196, 18, 190, 108, 186, 39, 60, 136, 134, 151, 60, 181, 42, 205, 188, 104, 28, 137, 61, 1, 151, 109, 61, 235, 154, 25, 190, 180, 181, 47, 62, 77, 215, 116, 189, 96, 74, 100, 61, 51, 87, 72, 189, 112, 144, 236, 189, 143, 26, 117, 189, 28, 117, 25, 189, 136, 117, 255, 189, 192, 131, 87, 61, 20, 128, 126, 61, 114, 213, 129, 61, 235, 30, 2, 190, 86, 63, 198, 60, 226, 59, 136, 59, 90, 133, 139, 61, 3, 50, 68, 189, 87, 200, 96, 61, 93, 194, 203, 188, 182, 99, 166, 188, 51, 209, 16, 62, 225, 56, 172, 61, 179, 193, 227, 189, 67, 70, 234, 61, 203, 197, 86, 190, 3, 61, 8, 62, 131, 187, 34, 190, 47, 3, 188, 189, 124, 1, 145, 189, 56, 192, 77, 62, 42, 114, 217, 189, 142, 217, 204, 61, 41, 14, 123, 190, 151, 67, 230, 188, 233, 66, 213, 189, 38, 0, 121, 61, 46, 243, 48, 189, 215, 53, 30, 61, 128, 232, 161, 61, 125, 52, 77, 62, 149, 48, 59, 62, 141, 170, 21, 62, 141, 34, 230, 61, 202, 199, 21, 189, 118, 222, 26, 62, 228, 13, 135, 188, 208, 176, 43, 62, 75, 217, 34, 189, 123, 31, 27, 62, 153, 173, 7, 190, 225, 12, 53, 59, 249, 77, 154, 189, 156, 61, 90, 62, 111, 39, 153, 189, 6, 40, 173, 61, 50, 255, 64, 62, 80, 167, 235, 190, 71, 98, 255, 189, 36, 142, 34, 61, 73, 177, 52, 190, 176, 145, 150, 60, 152, 114, 97, 62, 196, 20, 158, 188, 94, 209, 73, 190, 217, 236, 111, 189, 65, 104, 165, 61, 110, 148, 105, 61, 102, 69, 16, 62, 30, 4, 253, 61, 236, 96, 211, 189, 32, 157, 4, 190, 206, 86, 206, 61, 56, 3, 80, 190, 171, 202, 164, 190, 132, 248, 46, 190, 10, 135, 207, 62, 141, 95, 202, 61, 194, 168, 36, 62, 215, 102, 178, 61, 86, 251, 100, 190, 154, 185, 1, 190, 209, 161, 112, 190, 58, 136, 235, 189, 164, 244, 202, 61, 129, 17, 210, 189, 96, 234, 152, 62, 18, 169, 140, 62, 24, 120, 70, 189, 160, 28, 196, 188, 126, 189, 87, 61, 197, 63, 239, 190, 35, 123, 162, 186, 109, 30, 83, 61, 100, 184, 69, 190, 56, 193, 226, 188, 204, 58, 20, 62, 159, 83, 175, 61, 74, 1, 73, 62, 160, 145, 202, 61, 144, 174, 244, 189, 153, 165, 181, 61, 19, 19, 245, 189, 228, 219, 28, 62, 222, 131, 173, 61, 222, 77, 60, 188, 152, 206, 4, 62, 160, 128, 48, 61, 168, 76, 244, 190, 15, 141, 177, 61, 201, 201, 156, 61, 253, 75, 21, 62, 161, 254, 14, 62, 96, 202, 160, 60, 19, 83, 226, 61, 46, 77, 159, 190, 92, 83, 5, 189, 223, 171, 79, 61, 157, 134, 78, 190, 126, 215, 215, 60, 218, 240, 43, 190, 190, 202, 111, 189, 92, 240, 9, 62, 165, 66, 180, 61, 93, 215, 50, 61, 84, 65, 77, 190, 141, 8, 64, 62, 193, 102, 13, 190, 126, 124, 12, 190, 188, 208, 231, 188, 47, 30, 23, 189, 47, 49, 66, 62, 3, 35, 189, 61, 216, 220, 208, 189, 113, 232, 234, 189, 198, 183, 27, 62, 117, 89, 130, 61, 114, 44, 237, 61, 39, 210, 169, 190, 185, 65, 57, 190, 79, 202, 71, 61, 136, 2, 22, 61, 220, 63, 41, 61, 246, 57, 1, 190, 112, 122, 46, 190, 48, 23, 220, 61, 8, 213, 61, 61, 234, 235, 125, 189, 217, 16, 213, 61, 217, 137, 194, 189, 178, 156, 109, 62, 182, 174, 239, 61, 127, 34, 168, 61, 250, 82, 146, 62, 217, 178, 255, 189, 38, 21, 139, 61, 193, 174, 61, 189, 244, 183, 207, 188, 58, 163, 192, 189, 180, 161, 137, 59, 116, 138, 5, 61, 211, 121, 166, 189, 62, 200, 16, 62, 224, 120, 10, 190, 68, 58, 51, 190, 65, 31, 238, 61, 67, 67, 2, 62, 199, 151, 152, 61, 118, 168, 108, 61, 102, 71, 93, 187, 22, 105, 15, 190, 132, 177, 34, 189, 241, 252, 40, 190, 234, 199, 3, 62, 73, 222, 0, 190, 2, 69, 36, 62, 197, 253, 125, 59, 145, 97, 34, 62, 172, 206, 6, 190, 51, 228, 26, 190, 76, 113, 38, 62, 171, 140, 126, 61, 64, 194, 32, 190, 161, 219, 31, 61, 30, 86, 123, 61, 140, 190, 210, 189, 147, 211, 3, 62, 194, 34, 198, 189, 220, 223, 174, 61, 116, 220, 76, 190, 196, 183, 20, 62, 43, 72, 1, 61, 238, 156, 101, 61, 251, 244, 29, 190, 143, 161, 3, 190, 197, 144, 197, 189, 15, 97, 186, 189, 94, 8, 57, 190, 39, 192, 5, 190, 108, 110, 27, 189, 165, 112, 89, 61, 49, 127, 121, 189, 67, 254, 108, 190, 3, 178, 196, 60, 220, 102, 94, 62, 126, 197, 74, 190, 131, 232, 206, 189, 140, 141, 78, 190, 225, 148, 117, 61, 125, 128, 15, 190, 201, 244, 179, 185, 171, 73, 46, 190, 143, 102, 173, 189, 222, 44, 160, 61, 43, 32, 182, 59, 147, 194, 48, 61, 11, 13, 37, 190, 225, 207, 105, 62, 213, 60, 192, 61, 166, 13, 73, 61, 241, 180, 39, 62, 154, 29, 185, 61, 250, 58, 73, 189, 147, 152, 62, 190, 124, 160, 217, 60, 89, 106, 40, 62, 232, 119, 101, 61, 130, 117, 126, 190, 216, 172, 148, 188, 207, 6, 11, 62, 248, 202, 45, 189, 182, 222, 14, 187, 195, 202, 36, 62, 194, 45, 144, 189, 90, 99, 28, 62, 171, 53, 91, 60, 144, 78, 46, 62, 217, 20, 152, 61, 140, 147, 159, 60, 206, 167, 19, 59, 157, 158, 3, 61, 158, 150, 140, 61, 6, 194, 201, 61, 190, 168, 221, 188, 234, 171, 160, 189, 133, 22, 33, 190, 37, 42, 161, 189, 40, 47, 118, 61, 85, 195, 2, 62, 224, 102, 21, 60, 211, 111, 46, 62, 209, 227, 249, 188, 167, 80, 76, 60, 190, 50, 130, 189, 140, 59, 37, 190, 159, 177, 16, 190, 133, 57, 24, 189, 33, 169, 37, 61, 252, 30, 201, 189, 45, 188, 3, 62, 6, 148, 31, 190, 178, 30, 147, 60, 48, 113, 201, 188, 125, 45, 36, 61, 76, 124, 242, 189, 63, 87, 143, 61, 25, 157, 192, 60, 36, 98, 22, 190, 39, 67, 199, 190, 191, 132, 27, 60, 247, 251, 38, 62, 240, 210, 122, 187, 99, 159, 8, 190, 125, 117, 67, 62, 232, 31, 2, 62, 184, 142, 143, 61, 225, 113, 223, 60, 255, 6, 245, 189, 83, 142, 50, 190, 179, 220, 223, 61, 178, 255, 49, 190, 141, 216, 159, 59, 112, 102, 46, 62, 52, 54, 219, 61, 209, 188, 48, 62, 212, 234, 62, 188, 226, 22, 170, 60, 83, 79, 2, 61, 131, 233, 94, 189, 64, 115, 37, 60, 71, 172, 16, 190, 228, 161, 24, 62, 250, 56, 209, 61, 230, 25, 4, 62, 87, 230, 72, 189, 215, 177, 21, 62, 132, 241, 54, 190, 201, 147, 17, 61, 214, 109, 129, 190, 97, 92, 21, 61, 5, 156, 85, 62, 53, 142, 40, 190, 225, 163, 19, 61, 31, 252, 113, 188, 254, 53, 5, 189, 130, 44, 180, 61, 41, 214, 129, 189, 185, 170, 74, 61, 57, 199, 157, 189, 194, 80, 204, 61, 201, 139, 108, 62, 136, 43, 20, 62, 35, 161, 6, 190, 143, 61, 112, 62, 149, 228, 185, 189, 123, 160, 0, 190, 91, 43, 86, 62, 150, 28, 132, 190, 40, 193, 35, 61, 93, 88, 12, 190, 42, 225, 139, 62, 161, 42, 90, 62, 126, 152, 25, 61, 44, 208, 211, 189, 34, 116, 137, 189, 10, 217, 41, 62, 243, 213, 243, 61, 121, 179, 151, 189, 144, 238, 85, 189, 146, 73, 85, 189, 174, 134, 6, 190, 14, 37, 66, 189, 83, 32, 149, 189, 88, 185, 44, 190, 104, 213, 35, 62, 105, 240, 79, 189, 142, 179, 217, 189, 7, 93, 144, 189, 184, 234, 6, 61, 25, 87, 131, 189, 0, 90, 10, 62, 206, 139, 227, 189, 112, 104, 24, 62, 37, 64, 54, 190, 6, 111, 43, 190, 233, 239, 195, 61, 44, 105, 25, 190, 227, 47, 193, 188, 253, 74, 220, 188, 247, 147, 86, 189, 185, 145, 1, 190, 31, 24, 46, 62, 213, 176, 186, 187, 1, 163, 145, 61, 12, 47, 231, 189, 193, 13, 59, 190, 201, 45, 223, 60, 134, 98, 36, 62, 234, 46, 153, 61, 202, 29, 128, 189, 192, 64, 57, 190, 100, 236, 68, 62, 45, 30, 40, 62, 161, 4, 204, 190, 14, 135, 4, 62, 98, 165, 148, 61, 134, 53, 144, 190, 130, 77, 219, 190, 185, 153, 107, 62, 120, 184, 129, 190, 41, 86, 89, 62, 29, 237, 110, 190, 252, 51, 150, 190, 199, 101, 83, 190, 43, 231, 138, 190, 52, 188, 229, 188, 155, 77, 239, 189, 210, 108, 238, 189, 68, 206, 226, 60, 152, 92, 229, 60, 213, 227, 111, 62, 84, 12, 213, 189, 236, 192, 190, 61, 22, 89, 113, 189, 104, 54, 132, 62, 197, 159, 72, 62, 249, 60, 160, 61, 122, 154, 153, 190, 44, 17, 4, 190, 69, 208, 191, 189, 28, 227, 20, 190, 155, 158, 171, 61, 194, 196, 71, 62, 39, 239, 91, 62, 57, 239, 109, 62, 39, 33, 80, 189, 110, 229, 72, 190, 121, 99, 14, 189, 107, 87, 53, 189, 138, 180, 139, 62, 250, 81, 154, 61, 139, 216, 165, 61, 28, 36, 43, 62, 134, 211, 61, 190, 24, 131, 111, 59, 178, 28, 130, 59, 61, 46, 13, 61, 70, 101, 13, 62, 254, 81, 152, 188, 127, 179, 156, 61, 29, 248, 123, 61, 10, 136, 191, 60, 185, 135, 39, 62, 102, 168, 180, 61, 68, 242, 58, 62, 160, 53, 30, 189, 247, 0, 32, 190, 192, 178, 22, 190, 31, 254, 235, 189, 177, 108, 191, 189, 61, 122, 49, 190, 251, 7, 18, 60, 121, 218, 70, 61, 133, 61, 130, 189, 77, 240, 47, 190, 224, 153, 206, 189, 231, 32, 114, 189, 44, 237, 32, 189, 165, 206, 143, 61, 60, 130, 17, 190, 49, 149, 201, 189, 78, 222, 43, 62, 111, 28, 6, 190, 248, 138, 5, 190, 38, 239, 2, 189, 45, 36, 4, 62, 37, 90, 19, 62, 155, 78, 201, 61, 39, 71, 148, 189, 74, 17, 75, 189, 204, 237, 33, 61, 78, 76, 18, 189, 250, 156, 159, 61, 18, 62, 17, 190, 66, 231, 243, 61, 175, 5, 193, 61, 159, 25, 204, 61, 129, 196, 40, 62, 74, 40, 189, 189, 116, 172, 71, 190, 70, 130, 110, 61, 245, 114, 35, 190, 24, 115, 8, 190, 168, 148, 6, 190, 101, 208, 238, 61, 176, 224, 89, 62, 95, 15, 241, 61, 52, 246, 48, 62, 92, 79, 210, 187, 209, 75, 192, 189, 213, 26, 88, 62, 37, 255, 97, 190, 31, 177, 8, 190, 244, 173, 172, 190, 80, 204, 224, 61, 67, 134, 16, 190, 204, 77, 58, 61, 168, 181, 93, 190, 12, 193, 197, 190, 12, 197, 131, 190, 203, 115, 89, 62, 242, 74, 4, 62, 132, 47, 156, 61, 172, 189, 241, 61, 172, 222, 51, 190, 5, 139, 72, 62, 139, 133, 44, 62, 207, 108, 28, 189, 156, 110, 36, 190, 69, 77, 142, 61, 69, 242, 170, 189, 66, 130, 85, 62, 5, 121, 131, 62, 168, 84, 71, 190, 55, 215, 17, 190, 229, 141, 123, 61, 51, 15, 0, 190, 42, 96, 59, 61, 113, 106, 158, 61, 211, 57, 157, 61, 229, 58, 39, 190, 74, 48, 176, 189, 223, 38, 137, 190, 58, 155, 139, 61, 175, 202, 116, 189, 92, 164, 213, 62, 129, 197, 24, 62, 96, 30, 180, 188, 153, 105, 7, 189, 255, 121, 79, 190, 119, 109, 67, 189, 173, 79, 124, 62, 96, 79, 205, 189, 100, 161, 240, 189, 199, 96, 174, 61, 34, 14, 211, 190, 175, 58, 130, 189, 35, 152, 153, 189, 41, 80, 161, 60, 236, 179, 253, 189, 37, 121, 132, 62, 144, 145, 0, 190, 126, 177, 150, 190, 35, 180, 173, 189, 25, 225, 100, 189, 130, 105, 146, 62, 61, 126, 214, 59, 143, 190, 164, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {146, 216, 135, 60, 207, 137, 245, 189, 182, 117, 88, 60, 40, 103, 154, 189, 138, 150, 38, 62, 7, 31, 111, 62, 72, 187, 168, 189, 56, 173, 136, 61, 162, 66, 136, 189, 205, 109, 102, 189, 168, 114, 47, 188, 29, 137, 130, 62, 54, 21, 64, 62, 189, 250, 7, 190, 101, 4, 3, 190, 57, 1, 135, 189, 83, 159, 125, 189, 182, 142, 30, 61, 34, 95, 89, 62, 21, 41, 203, 188, 209, 31, 75, 62, 27, 34, 138, 189, 43, 198, 109, 61, 94, 91, 33, 190, 72, 168, 100, 61, 37, 197, 170, 61, 160, 28, 50, 190, 18, 87, 7, 189, 207, 11, 22, 190, 18, 136, 148, 61, 79, 106, 153, 188, 35, 138, 69, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 225, 217, 61, 133, 3, 76, 62, 221, 4, 227, 61, 86, 50, 226, 189, 173, 52, 29, 62, 231, 52, 119, 190, 43, 240, 84, 190, 166, 201, 119, 62, 84, 194, 81, 62, 57, 237, 89, 61, 132, 4, 227, 61, 14, 57, 145, 190, 15, 32, 73, 189, 43, 115, 11, 188, 0, 176, 247, 61, 64, 244, 175, 59, 111, 148, 166, 61, 83, 102, 75, 62, 14, 246, 141, 190, 248, 204, 255, 61, 208, 154, 38, 190, 207, 197, 140, 61, 7, 107, 8, 190, 222, 56, 129, 61, 208, 26, 9, 62, 0, 202, 91, 190, 101, 206, 15, 190, 83, 251, 130, 190, 104, 90, 165, 61, 190, 67, 5, 190, 69, 110, 184, 190, 126, 128, 228, 62, 108, 109, 121, 60, 252, 21, 149, 189, 165, 243, 155, 61, 227, 156, 54, 190, 160, 223, 237, 189, 165, 102, 202, 189, 235, 188, 3, 189, 121, 49, 241, 189, 5, 55, 111, 187, 125, 214, 207, 61, 185, 128, 140, 60, 66, 25, 23, 190, 34, 213, 86, 190, 94, 133, 183, 189, 130, 19, 227, 189, 45, 199, 44, 59, 179, 247, 220, 188, 105, 216, 11, 188, 129, 100, 79, 190, 232, 14, 137, 61, 229, 71, 132, 61, 80, 36, 150, 189, 100, 219, 80, 188, 1, 162, 84, 189, 234, 241, 97, 61, 131, 239, 153, 60, 76, 202, 152, 60, 91, 242, 144, 62, 108, 87, 8, 62, 174, 124, 189, 60, 135, 157, 28, 62, 204, 118, 65, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 47, 115, 61, 254, 220, 88, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {255, 198, 9, 64, 213, 199, 169, 61, 25, 42, 84, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {100, 37, 18, 188, 94, 173, 7, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0096/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}