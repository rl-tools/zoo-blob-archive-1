// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 56, 153, 62, 164, 233, 115, 190, 187, 234, 78, 188, 128, 67, 171, 190, 217, 166, 173, 63, 225, 180, 147, 62, 212, 209, 176, 62, 105, 81, 31, 191, 18, 105, 178, 61, 216, 183, 224, 190, 159, 116, 112, 191, 56, 248, 42, 190, 4, 166, 32, 63, 254, 192, 130, 191, 206, 67, 138, 190, 218, 41, 250, 62, 32, 210, 138, 191, 44, 3, 125, 190, 238, 247, 84, 190, 29, 68, 60, 63, 234, 147, 8, 191, 18, 205, 194, 190, 8, 128, 172, 62, 34, 25, 47, 63, 196, 82, 189, 61, 236, 60, 158, 63, 228, 154, 237, 62, 61, 60, 61, 62, 113, 4, 90, 191, 181, 105, 253, 59, 144, 209, 167, 190, 9, 228, 147, 191, 205, 193, 135, 190, 213, 245, 255, 190, 173, 94, 94, 63, 173, 104, 17, 63, 215, 67, 74, 191, 75, 169, 166, 190, 74, 116, 128, 189, 23, 208, 165, 190, 120, 158, 218, 62, 68, 157, 2, 191, 90, 2, 17, 190, 78, 57, 245, 60, 244, 67, 93, 63, 69, 174, 133, 62, 129, 177, 71, 191, 202, 131, 17, 63, 14, 169, 26, 63, 86, 165, 111, 63, 38, 172, 193, 62, 187, 150, 12, 191, 139, 188, 226, 62, 171, 52, 216, 189, 204, 20, 186, 62, 67, 11, 143, 191, 150, 190, 5, 191, 69, 224, 16, 63, 195, 111, 94, 63, 170, 135, 202, 62, 36, 234, 140, 190, 163, 26, 163, 63, 87, 234, 151, 62, 119, 122, 140, 191, 137, 246, 34, 190, 40, 56, 135, 58, 116, 105, 17, 191, 16, 188, 241, 62, 72, 238, 208, 61, 45, 22, 85, 63, 243, 177, 34, 191, 127, 254, 209, 190, 55, 62, 162, 61, 46, 169, 20, 191, 213, 160, 168, 188, 247, 9, 249, 190, 132, 141, 16, 63, 170, 34, 81, 190, 121, 199, 34, 62, 158, 186, 83, 63, 76, 126, 1, 191, 142, 12, 146, 190, 251, 106, 213, 62, 101, 145, 85, 61, 80, 124, 73, 62, 193, 17, 26, 63, 38, 146, 1, 62, 118, 247, 128, 62, 125, 48, 227, 190, 153, 61, 139, 62, 165, 57, 244, 61, 84, 20, 196, 191, 194, 41, 184, 190, 20, 152, 107, 63, 183, 253, 70, 63, 159, 201, 199, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 147, 19, 191, 175, 74, 129, 189, 44, 77, 9, 63, 86, 100, 161, 62, 95, 65, 154, 190, 114, 197, 227, 189, 171, 219, 238, 190, 201, 133, 132, 190, 252, 218, 65, 62, 161, 205, 87, 189, 7, 81, 26, 63, 14, 166, 213, 190, 174, 172, 85, 61, 226, 160, 113, 190, 252, 166, 85, 191, 92, 191, 82, 62, 46, 104, 137, 62, 128, 178, 8, 63, 5, 202, 237, 62, 245, 106, 193, 190, 247, 100, 29, 190, 202, 86, 240, 189, 211, 134, 34, 63, 13, 17, 75, 191, 105, 219, 21, 63, 17, 105, 175, 190, 8, 106, 144, 62, 164, 122, 189, 62, 29, 182, 230, 62, 175, 96, 157, 189, 50, 108, 99, 62, 171, 206, 165, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 48, 218, 61, 124, 41, 187, 190, 138, 214, 59, 60, 188, 242, 221, 61, 92, 32, 21, 191, 9, 6, 192, 189, 198, 248, 253, 61, 175, 240, 209, 190, 57, 12, 123, 190, 64, 222, 1, 63, 122, 7, 168, 189, 63, 97, 130, 190, 149, 217, 58, 62, 222, 118, 94, 62, 116, 241, 184, 190, 10, 208, 28, 190, 159, 236, 32, 191, 244, 167, 71, 62, 110, 6, 251, 61, 200, 43, 153, 188, 242, 58, 163, 190, 220, 15, 107, 190, 145, 253, 133, 189, 194, 170, 226, 189, 136, 19, 59, 189, 250, 137, 129, 62, 21, 182, 226, 189, 249, 222, 107, 60, 215, 94, 103, 190, 245, 81, 141, 190, 177, 238, 36, 62, 167, 4, 239, 189, 161, 198, 190, 61, 32, 179, 117, 62, 188, 145, 157, 62, 63, 56, 205, 190, 196, 194, 101, 190, 191, 111, 190, 61, 28, 209, 182, 61, 10, 166, 33, 187, 217, 255, 32, 61, 71, 63, 35, 60, 250, 5, 211, 61, 224, 111, 9, 190, 84, 54, 173, 189, 105, 224, 156, 185, 225, 186, 145, 189, 224, 80, 10, 190, 155, 203, 231, 62, 156, 123, 226, 189, 219, 135, 79, 62, 178, 224, 145, 61, 137, 170, 231, 61, 160, 11, 84, 191, 230, 45, 187, 190, 177, 107, 61, 62, 32, 190, 4, 62, 145, 143, 188, 60, 47, 164, 137, 61, 175, 141, 139, 61, 5, 240, 172, 62, 113, 48, 110, 190, 106, 255, 176, 189, 159, 243, 151, 62, 9, 145, 244, 61, 110, 179, 195, 61, 147, 223, 50, 62, 45, 3, 132, 62, 246, 109, 27, 63, 133, 150, 199, 62, 71, 53, 151, 191, 59, 236, 130, 62, 94, 174, 6, 190, 115, 55, 168, 62, 186, 234, 141, 190, 177, 191, 128, 189, 136, 94, 127, 62, 54, 197, 172, 190, 1, 54, 129, 189, 163, 191, 97, 62, 231, 176, 6, 191, 4, 45, 86, 190, 96, 140, 182, 189, 64, 44, 66, 191, 169, 237, 203, 60, 182, 189, 12, 62, 166, 202, 132, 189, 89, 60, 230, 61, 217, 46, 46, 62, 236, 208, 168, 61, 247, 122, 105, 61, 171, 62, 157, 188, 254, 163, 188, 189, 81, 114, 85, 60, 235, 1, 54, 190, 136, 118, 134, 61, 81, 92, 79, 189, 157, 77, 38, 62, 139, 182, 117, 62, 96, 190, 203, 60, 160, 114, 0, 62, 64, 43, 165, 61, 148, 138, 21, 62, 211, 51, 40, 62, 172, 23, 26, 62, 171, 27, 45, 191, 68, 83, 226, 61, 103, 152, 227, 61, 242, 162, 179, 61, 243, 16, 7, 190, 36, 71, 8, 190, 212, 10, 70, 190, 61, 21, 199, 189, 187, 179, 133, 60, 150, 91, 116, 62, 68, 146, 167, 61, 238, 17, 221, 189, 5, 28, 172, 62, 111, 191, 209, 189, 78, 128, 107, 190, 191, 16, 113, 189, 167, 235, 55, 190, 180, 155, 224, 61, 195, 67, 187, 188, 1, 137, 123, 190, 132, 91, 185, 190, 103, 59, 165, 62, 248, 199, 22, 191, 133, 3, 39, 189, 36, 30, 69, 189, 244, 105, 157, 62, 194, 87, 227, 189, 68, 18, 220, 190, 53, 36, 14, 58, 9, 152, 159, 60, 71, 64, 99, 62, 120, 61, 35, 62, 178, 134, 93, 188, 230, 51, 238, 61, 22, 218, 22, 62, 147, 98, 163, 58, 67, 90, 219, 189, 50, 109, 181, 61, 246, 20, 169, 61, 247, 160, 40, 189, 63, 63, 137, 62, 238, 215, 160, 189, 252, 52, 243, 189, 161, 3, 1, 190, 48, 60, 31, 62, 57, 92, 229, 61, 29, 82, 56, 60, 39, 181, 162, 61, 115, 161, 0, 61, 127, 139, 16, 62, 71, 177, 95, 62, 234, 132, 85, 62, 10, 196, 120, 61, 245, 65, 102, 190, 193, 113, 177, 62, 211, 110, 102, 61, 119, 147, 190, 188, 116, 184, 164, 61, 46, 155, 232, 191, 50, 4, 207, 190, 168, 101, 74, 191, 110, 238, 89, 188, 114, 114, 3, 190, 182, 208, 88, 62, 95, 185, 136, 61, 141, 255, 219, 190, 151, 197, 41, 190, 230, 122, 183, 191, 67, 201, 55, 62, 107, 67, 30, 62, 113, 97, 235, 61, 25, 15, 182, 62, 56, 53, 168, 190, 49, 189, 143, 61, 187, 160, 118, 61, 55, 242, 222, 61, 122, 67, 149, 191, 220, 51, 145, 61, 20, 171, 162, 190, 75, 147, 116, 190, 55, 235, 13, 60, 98, 84, 100, 62, 77, 14, 74, 190, 101, 216, 58, 62, 66, 202, 66, 62, 58, 89, 233, 190, 100, 216, 91, 62, 122, 205, 35, 190, 177, 77, 0, 189, 254, 66, 227, 188, 34, 113, 124, 191, 141, 202, 36, 191, 186, 215, 131, 191, 206, 164, 192, 189, 225, 103, 147, 188, 95, 150, 255, 61, 107, 25, 62, 190, 42, 157, 75, 190, 190, 52, 128, 62, 39, 113, 10, 61, 17, 112, 15, 61, 211, 152, 178, 61, 125, 170, 29, 62, 184, 7, 93, 61, 78, 23, 202, 62, 236, 161, 147, 189, 229, 151, 20, 62, 235, 163, 123, 60, 25, 29, 196, 190, 174, 101, 163, 62, 128, 204, 219, 190, 95, 118, 130, 190, 107, 210, 170, 62, 66, 84, 44, 62, 244, 39, 159, 62, 106, 79, 35, 62, 249, 32, 117, 62, 81, 16, 244, 190, 86, 75, 56, 62, 128, 234, 184, 188, 255, 137, 223, 190, 5, 166, 122, 62, 228, 98, 141, 190, 87, 195, 44, 62, 81, 125, 4, 190, 70, 174, 203, 189, 45, 191, 130, 189, 56, 228, 2, 62, 218, 236, 105, 62, 205, 10, 12, 190, 227, 60, 44, 190, 5, 166, 231, 189, 224, 130, 126, 190, 237, 192, 210, 61, 42, 195, 160, 61, 118, 71, 15, 62, 139, 169, 171, 189, 185, 188, 192, 61, 241, 52, 57, 189, 168, 47, 156, 190, 118, 237, 55, 190, 253, 136, 20, 191, 248, 80, 37, 190, 249, 244, 50, 62, 204, 75, 21, 190, 221, 214, 4, 189, 243, 230, 67, 190, 88, 170, 199, 61, 120, 151, 134, 61, 209, 15, 29, 62, 83, 125, 217, 61, 11, 191, 38, 61, 210, 150, 18, 189, 47, 64, 149, 189, 188, 74, 18, 61, 55, 134, 181, 188, 107, 187, 162, 61, 15, 220, 53, 60, 161, 62, 158, 189, 45, 5, 180, 59, 174, 70, 152, 62, 61, 156, 216, 61, 243, 92, 235, 189, 21, 50, 181, 189, 35, 50, 142, 190, 118, 162, 68, 190, 104, 8, 71, 190, 146, 232, 150, 190, 142, 161, 243, 61, 165, 182, 63, 190, 165, 37, 129, 189, 10, 12, 15, 190, 201, 40, 94, 189, 207, 101, 185, 189, 148, 135, 240, 187, 13, 229, 6, 61, 66, 9, 85, 190, 126, 8, 177, 60, 120, 119, 149, 61, 110, 212, 57, 190, 34, 206, 101, 190, 101, 170, 46, 189, 147, 188, 67, 190, 32, 46, 171, 61, 55, 197, 85, 62, 169, 227, 65, 189, 107, 78, 244, 62, 130, 64, 74, 190, 202, 213, 32, 190, 84, 106, 163, 190, 32, 116, 8, 183, 211, 86, 230, 61, 126, 140, 174, 190, 226, 191, 186, 189, 229, 74, 7, 61, 3, 86, 93, 62, 232, 39, 128, 190, 240, 147, 183, 61, 38, 1, 220, 60, 219, 238, 133, 62, 194, 240, 138, 190, 92, 85, 33, 191, 207, 11, 139, 62, 136, 95, 130, 185, 124, 155, 20, 61, 82, 225, 242, 189, 194, 253, 57, 190, 185, 246, 156, 61, 191, 9, 26, 190, 208, 148, 132, 61, 101, 16, 200, 61, 161, 42, 20, 62, 38, 171, 226, 189, 255, 225, 27, 190, 162, 81, 139, 190, 53, 196, 245, 189, 183, 0, 102, 190, 58, 225, 48, 61, 6, 96, 51, 190, 176, 73, 207, 61, 129, 68, 67, 62, 64, 203, 115, 61, 242, 87, 127, 190, 97, 28, 224, 190, 218, 190, 194, 61, 234, 82, 174, 188, 253, 113, 188, 190, 246, 83, 156, 190, 227, 57, 109, 59, 96, 25, 14, 191, 79, 95, 177, 190, 2, 37, 75, 188, 89, 189, 126, 190, 38, 42, 49, 62, 66, 253, 62, 191, 40, 172, 38, 190, 252, 204, 52, 190, 13, 61, 77, 191, 168, 30, 185, 62, 81, 234, 7, 62, 1, 176, 232, 61, 100, 100, 136, 61, 133, 2, 208, 190, 247, 91, 155, 190, 69, 103, 240, 189, 194, 23, 41, 62, 234, 85, 86, 62, 140, 150, 235, 189, 221, 97, 40, 191, 204, 129, 33, 60, 5, 34, 101, 61, 223, 141, 150, 191, 33, 32, 100, 191, 156, 230, 184, 62, 48, 4, 236, 190, 35, 62, 137, 190, 227, 216, 14, 191, 0, 68, 134, 61, 67, 143, 140, 191, 208, 27, 130, 61, 243, 99, 90, 190, 200, 175, 194, 190, 144, 211, 97, 188, 65, 96, 174, 61, 141, 224, 35, 62, 27, 232, 36, 190, 169, 121, 55, 189, 194, 218, 57, 191, 245, 217, 151, 189, 67, 109, 82, 62, 60, 47, 211, 190, 85, 24, 153, 189, 153, 131, 141, 190, 83, 163, 73, 62, 21, 141, 117, 61, 23, 154, 58, 62, 244, 47, 203, 189, 3, 200, 42, 189, 73, 136, 105, 61, 9, 111, 207, 61, 115, 57, 62, 191, 108, 226, 189, 62, 244, 114, 2, 191, 120, 204, 44, 191, 83, 166, 132, 190, 11, 238, 203, 61, 183, 214, 6, 191, 209, 87, 74, 188, 132, 22, 228, 189, 155, 49, 71, 189, 177, 25, 184, 190, 33, 252, 108, 190, 240, 126, 96, 190, 122, 195, 149, 190, 119, 198, 237, 60, 51, 217, 38, 62, 63, 95, 27, 61, 120, 213, 19, 62, 252, 250, 66, 61, 171, 129, 8, 191, 69, 201, 47, 190, 165, 195, 11, 61, 201, 74, 120, 190, 225, 144, 141, 61, 198, 30, 33, 190, 15, 103, 38, 62, 34, 46, 74, 61, 75, 88, 11, 62, 243, 140, 34, 62, 185, 253, 133, 190, 107, 216, 214, 61, 127, 9, 40, 62, 3, 208, 198, 189, 150, 151, 45, 190, 206, 88, 228, 61, 223, 82, 232, 61, 74, 5, 27, 190, 88, 31, 239, 189, 86, 47, 2, 62, 217, 210, 120, 61, 49, 103, 33, 190, 165, 106, 236, 61, 216, 205, 43, 61, 62, 59, 18, 61, 28, 166, 46, 190, 24, 35, 3, 189, 100, 241, 39, 190, 73, 86, 199, 61, 23, 237, 10, 61, 221, 152, 100, 60, 15, 215, 34, 190, 117, 10, 50, 60, 118, 40, 165, 189, 81, 238, 164, 61, 132, 113, 155, 188, 175, 171, 188, 189, 103, 255, 8, 190, 50, 169, 0, 188, 222, 145, 73, 190, 126, 136, 7, 190, 127, 112, 54, 61, 207, 189, 157, 60, 68, 154, 217, 61, 45, 169, 149, 61, 146, 67, 59, 189, 69, 161, 252, 188, 111, 204, 45, 190, 65, 249, 27, 62, 211, 38, 50, 189, 63, 37, 240, 61, 178, 205, 218, 61, 183, 139, 158, 189, 221, 163, 19, 189, 221, 219, 117, 190, 108, 133, 6, 62, 17, 240, 108, 189, 107, 47, 255, 61, 106, 196, 56, 189, 67, 217, 6, 190, 94, 44, 31, 189, 190, 124, 105, 61, 89, 229, 129, 188, 182, 246, 5, 62, 89, 234, 26, 60, 174, 69, 21, 62, 161, 132, 131, 189, 95, 243, 91, 190, 246, 111, 36, 61, 102, 195, 92, 189, 240, 43, 29, 189, 54, 254, 201, 189, 230, 159, 14, 59, 177, 202, 75, 60, 99, 233, 73, 61, 137, 98, 54, 190, 38, 119, 221, 61, 89, 237, 27, 190, 35, 60, 61, 190, 8, 76, 69, 189, 142, 70, 198, 61, 98, 159, 19, 62, 29, 222, 1, 188, 48, 93, 37, 190, 219, 240, 195, 61, 132, 4, 12, 190, 42, 144, 101, 61, 77, 39, 210, 61, 195, 15, 23, 187, 219, 99, 3, 190, 178, 156, 198, 189, 185, 59, 60, 189, 38, 75, 183, 61, 50, 198, 55, 190, 89, 147, 162, 189, 123, 83, 22, 189, 41, 59, 51, 190, 117, 89, 21, 190, 161, 199, 34, 60, 82, 21, 172, 59, 41, 246, 78, 189, 157, 149, 129, 61, 219, 215, 18, 61, 162, 16, 28, 190, 228, 152, 37, 62, 119, 77, 131, 189, 105, 82, 210, 60, 234, 194, 135, 189, 112, 144, 236, 189, 223, 97, 219, 61, 68, 131, 150, 61, 79, 129, 39, 191, 39, 93, 233, 189, 25, 140, 218, 61, 73, 101, 239, 61, 6, 25, 125, 60, 196, 16, 32, 190, 87, 112, 73, 189, 228, 153, 118, 60, 192, 137, 55, 190, 43, 63, 148, 190, 197, 116, 253, 60, 24, 228, 208, 61, 17, 180, 40, 62, 7, 62, 68, 62, 58, 124, 220, 189, 45, 138, 62, 62, 123, 9, 6, 191, 6, 115, 85, 190, 233, 226, 90, 191, 152, 82, 21, 191, 154, 231, 219, 61, 61, 223, 5, 62, 46, 230, 35, 60, 213, 228, 153, 62, 196, 232, 170, 190, 79, 35, 29, 62, 109, 39, 211, 189, 255, 208, 168, 61, 205, 156, 130, 62, 215, 53, 30, 61, 185, 33, 129, 62, 45, 112, 51, 62, 28, 140, 169, 61, 118, 181, 75, 62, 220, 182, 16, 62, 109, 150, 2, 191, 66, 0, 127, 62, 138, 92, 216, 60, 194, 4, 203, 188, 32, 56, 171, 190, 21, 168, 59, 62, 170, 98, 129, 190, 102, 250, 245, 189, 95, 156, 33, 188, 57, 249, 118, 62, 119, 229, 162, 187, 114, 46, 32, 190, 187, 29, 131, 61, 112, 73, 8, 191, 245, 44, 138, 59, 175, 123, 19, 189, 104, 70, 48, 190, 153, 49, 37, 62, 7, 43, 196, 61, 233, 79, 232, 190, 113, 175, 189, 59, 251, 60, 242, 59, 227, 239, 154, 62, 106, 163, 140, 61, 79, 179, 240, 189, 126, 41, 151, 62, 236, 96, 211, 189, 45, 96, 79, 190, 223, 153, 63, 62, 61, 165, 80, 191, 71, 179, 26, 191, 192, 234, 65, 191, 138, 231, 133, 62, 156, 200, 3, 62, 101, 108, 37, 62, 196, 102, 1, 62, 136, 232, 150, 190, 251, 251, 133, 189, 164, 11, 236, 189, 43, 30, 29, 190, 94, 172, 159, 61, 22, 23, 155, 189, 249, 180, 113, 62, 207, 220, 201, 62, 110, 72, 21, 189, 5, 252, 219, 189, 47, 220, 112, 61, 230, 98, 205, 190, 147, 101, 23, 62, 53, 86, 165, 190, 205, 211, 155, 188, 239, 185, 84, 60, 206, 138, 138, 61, 214, 102, 72, 62, 228, 78, 139, 62, 76, 205, 0, 62, 44, 7, 148, 190, 70, 228, 69, 62, 19, 19, 245, 189, 126, 3, 145, 62, 219, 104, 81, 62, 28, 72, 49, 61, 222, 253, 181, 62, 103, 9, 137, 62, 99, 115, 150, 191, 115, 113, 10, 62, 168, 202, 177, 61, 240, 124, 180, 188, 37, 178, 4, 61, 67, 219, 52, 61, 128, 3, 98, 62, 255, 206, 5, 190, 136, 122, 232, 59, 255, 44, 101, 61, 45, 82, 37, 190, 216, 56, 157, 60, 5, 206, 98, 190, 190, 139, 26, 190, 140, 116, 112, 62, 30, 173, 115, 62, 159, 9, 128, 61, 132, 79, 187, 61, 206, 169, 235, 61, 222, 43, 64, 188, 72, 244, 14, 62, 156, 109, 97, 61, 191, 197, 10, 62, 148, 248, 66, 62, 239, 239, 77, 189, 176, 5, 208, 62, 113, 232, 234, 189, 170, 70, 224, 189, 116, 162, 151, 61, 212, 185, 66, 191, 131, 46, 130, 191, 22, 170, 117, 191, 55, 122, 13, 62, 221, 247, 247, 60, 101, 178, 11, 60, 164, 80, 154, 60, 247, 18, 189, 190, 41, 91, 55, 61, 1, 56, 223, 190, 125, 49, 113, 61, 39, 206, 253, 61, 173, 125, 200, 188, 178, 205, 164, 62, 75, 104, 149, 61, 104, 250, 136, 188, 17, 80, 22, 63, 0, 165, 147, 190, 79, 219, 117, 190, 138, 138, 135, 190, 237, 63, 98, 190, 245, 213, 240, 189, 225, 175, 138, 60, 8, 48, 30, 62, 131, 208, 173, 190, 164, 245, 252, 188, 46, 40, 63, 189, 134, 75, 18, 191, 239, 116, 246, 61, 67, 67, 2, 62, 60, 226, 128, 62, 251, 197, 150, 190, 45, 141, 176, 60, 139, 113, 191, 190, 122, 87, 235, 189, 14, 78, 132, 191, 218, 244, 249, 61, 45, 12, 24, 190, 126, 98, 126, 61, 248, 155, 77, 190, 240, 79, 226, 61, 97, 248, 144, 61, 216, 49, 120, 189, 194, 119, 123, 61, 99, 72, 117, 189, 95, 223, 147, 190, 201, 28, 53, 62, 159, 219, 209, 191, 32, 188, 150, 190, 225, 117, 102, 62, 241, 20, 138, 62, 55, 97, 162, 62, 41, 13, 61, 190, 37, 5, 245, 188, 21, 205, 60, 62, 144, 214, 136, 190, 3, 141, 42, 62, 238, 98, 147, 61, 188, 21, 139, 190, 69, 180, 252, 191, 88, 194, 23, 190, 39, 192, 5, 190, 63, 172, 0, 191, 92, 159, 145, 62, 13, 173, 168, 190, 158, 157, 72, 191, 214, 147, 10, 191, 198, 102, 136, 62, 12, 77, 48, 190, 75, 243, 24, 60, 35, 62, 115, 61, 239, 76, 154, 187, 130, 69, 146, 190, 38, 121, 231, 186, 44, 215, 11, 190, 117, 189, 29, 61, 111, 176, 186, 62, 133, 181, 99, 62, 42, 167, 130, 61, 14, 49, 20, 190, 181, 76, 36, 63, 205, 160, 137, 190, 224, 148, 196, 61, 5, 85, 9, 62, 222, 46, 190, 189, 249, 142, 177, 61, 75, 166, 81, 190, 127, 160, 102, 61, 22, 54, 150, 61, 42, 196, 215, 59, 17, 1, 144, 61, 70, 177, 0, 190, 229, 65, 80, 62, 248, 202, 45, 189, 209, 194, 85, 188, 140, 29, 31, 62, 81, 233, 149, 189, 44, 11, 23, 62, 157, 58, 234, 59, 89, 67, 32, 62, 178, 82, 107, 61, 163, 21, 195, 59, 115, 203, 128, 186, 85, 5, 138, 60, 244, 171, 92, 61, 54, 195, 198, 61, 139, 154, 53, 189, 8, 103, 199, 189, 69, 181, 48, 190, 49, 64, 178, 189, 156, 102, 68, 61, 35, 124, 222, 61, 100, 204, 239, 58, 241, 116, 36, 62, 86, 163, 0, 189, 114, 20, 42, 59, 196, 9, 156, 189, 250, 47, 44, 190, 1, 213, 24, 190, 176, 245, 115, 189, 106, 209, 16, 61, 218, 151, 211, 189, 201, 180, 241, 61, 17, 214, 42, 190, 53, 245, 8, 60, 48, 113, 201, 188, 97, 19, 254, 61, 226, 64, 22, 191, 59, 154, 234, 61, 5, 198, 252, 189, 229, 12, 97, 190, 204, 40, 143, 191, 88, 173, 114, 188, 99, 253, 189, 61, 125, 178, 71, 189, 34, 82, 49, 190, 1, 243, 1, 62, 69, 87, 40, 62, 217, 143, 250, 61, 20, 179, 149, 189, 201, 200, 75, 190, 241, 14, 161, 190, 150, 105, 46, 62, 157, 216, 242, 191, 92, 134, 149, 189, 1, 192, 72, 62, 207, 211, 139, 62, 60, 226, 127, 62, 187, 50, 63, 188, 168, 44, 75, 190, 238, 169, 54, 62, 125, 82, 215, 190, 106, 224, 19, 62, 197, 5, 100, 189, 2, 180, 217, 187, 71, 191, 221, 191, 10, 226, 145, 61, 87, 230, 72, 189, 227, 131, 213, 189, 241, 80, 55, 188, 21, 136, 133, 190, 113, 166, 253, 190, 124, 213, 213, 190, 153, 117, 220, 61, 5, 134, 237, 190, 122, 28, 140, 61, 86, 72, 28, 62, 213, 243, 111, 190, 32, 174, 93, 190, 146, 56, 47, 189, 39, 124, 223, 188, 129, 213, 175, 190, 38, 133, 76, 62, 144, 194, 209, 62, 62, 137, 241, 61, 215, 12, 40, 190, 246, 191, 206, 62, 108, 211, 179, 190, 222, 249, 100, 190, 180, 126, 139, 62, 204, 65, 55, 191, 153, 52, 7, 62, 107, 61, 40, 190, 85, 77, 98, 62, 105, 151, 109, 62, 194, 152, 219, 61, 192, 40, 184, 188, 183, 241, 154, 190, 1, 154, 119, 62, 243, 213, 243, 61, 69, 34, 233, 189, 82, 188, 39, 189, 146, 73, 85, 189, 174, 134, 6, 190, 14, 37, 66, 189, 170, 187, 157, 189, 105, 141, 75, 190, 180, 7, 7, 62, 105, 240, 79, 189, 126, 180, 217, 189, 133, 127, 159, 189, 184, 234, 6, 61, 25, 87, 131, 189, 220, 21, 227, 61, 48, 49, 241, 189, 19, 60, 14, 62, 186, 87, 61, 190, 140, 156, 41, 190, 23, 50, 143, 61, 153, 126, 53, 190, 227, 47, 193, 188, 122, 245, 80, 189, 247, 147, 86, 189, 124, 204, 254, 189, 31, 24, 46, 62, 6, 98, 60, 188, 85, 204, 71, 61, 138, 131, 5, 190, 67, 228, 65, 190, 234, 39, 238, 60, 103, 189, 37, 62, 234, 46, 153, 61, 36, 146, 91, 191, 16, 181, 165, 189, 154, 30, 173, 62, 107, 149, 92, 190, 161, 146, 11, 191, 89, 233, 49, 62, 78, 19, 75, 190, 21, 60, 17, 192, 127, 209, 22, 191, 178, 208, 164, 62, 231, 113, 182, 191, 79, 229, 172, 62, 1, 205, 183, 190, 102, 59, 10, 191, 161, 17, 142, 190, 95, 108, 101, 60, 244, 252, 14, 189, 191, 168, 195, 188, 211, 204, 159, 190, 162, 193, 178, 191, 173, 199, 55, 62, 137, 219, 223, 61, 81, 238, 89, 190, 23, 213, 136, 62, 152, 215, 145, 190, 143, 151, 132, 62, 239, 233, 229, 60, 63, 30, 57, 62, 97, 159, 233, 190, 70, 208, 236, 188, 33, 152, 125, 190, 28, 227, 20, 190, 29, 150, 130, 62, 248, 69, 44, 62, 218, 98, 166, 62, 71, 239, 174, 62, 48, 169, 185, 61, 210, 66, 186, 190, 153, 160, 151, 58, 235, 183, 138, 61, 128, 128, 41, 62, 223, 68, 122, 190, 241, 111, 159, 61, 9, 74, 145, 61, 226, 199, 76, 189, 225, 45, 45, 61, 122, 79, 135, 61, 137, 173, 8, 62, 179, 56, 9, 59, 172, 162, 202, 190, 195, 109, 30, 62, 142, 14, 52, 62, 42, 255, 26, 60, 166, 148, 55, 62, 61, 30, 61, 190, 165, 237, 6, 61, 188, 235, 69, 62, 236, 19, 110, 189, 193, 172, 151, 189, 106, 20, 108, 61, 132, 230, 233, 188, 214, 222, 62, 191, 2, 29, 249, 61, 121, 218, 70, 61, 58, 144, 130, 189, 239, 243, 48, 190, 235, 245, 215, 189, 63, 148, 114, 189, 255, 162, 63, 189, 244, 102, 75, 61, 60, 130, 17, 190, 49, 149, 201, 189, 78, 222, 43, 62, 135, 64, 26, 190, 248, 138, 5, 190, 146, 42, 24, 189, 61, 153, 226, 61, 37, 90, 19, 62, 155, 78, 201, 61, 156, 123, 148, 189, 110, 82, 143, 189, 208, 98, 158, 60, 78, 76, 18, 189, 250, 156, 159, 61, 124, 38, 31, 190, 185, 133, 225, 61, 49, 212, 142, 61, 190, 222, 193, 61, 21, 136, 18, 62, 32, 193, 222, 189, 14, 204, 86, 190, 83, 193, 73, 61, 245, 114, 35, 190, 189, 161, 27, 190, 249, 124, 30, 190, 101, 208, 238, 61, 26, 76, 6, 191, 145, 128, 107, 62, 43, 143, 159, 62, 225, 179, 170, 190, 10, 174, 137, 190, 7, 43, 128, 62, 175, 222, 198, 190, 138, 104, 132, 190, 165, 123, 217, 190, 150, 30, 10, 62, 194, 9, 153, 191, 222, 104, 175, 61, 185, 60, 126, 190, 143, 79, 32, 191, 174, 49, 75, 190, 162, 129, 208, 62, 71, 109, 139, 61, 47, 38, 23, 62, 125, 66, 1, 63, 190, 90, 159, 191, 27, 35, 98, 62, 114, 219, 184, 57, 100, 206, 76, 190, 73, 11, 133, 189, 46, 141, 117, 189, 169, 76, 244, 189, 65, 94, 200, 60, 202, 58, 93, 62, 136, 123, 188, 189, 20, 81, 78, 189, 246, 190, 73, 60, 51, 15, 0, 190, 22, 184, 23, 61, 238, 229, 70, 61, 136, 173, 44, 62, 201, 120, 171, 61, 132, 2, 12, 62, 3, 189, 133, 191, 255, 169, 199, 61, 33, 28, 45, 190, 140, 225, 183, 62, 83, 213, 19, 190, 54, 148, 33, 189, 224, 218, 8, 189, 209, 164, 41, 190, 143, 86, 76, 189, 86, 159, 77, 62, 123, 158, 159, 190, 42, 44, 236, 190, 156, 167, 168, 189, 165, 17, 99, 191, 20, 235, 218, 189, 52, 235, 143, 60, 21, 159, 164, 60, 174, 200, 117, 190, 54, 216, 61, 62, 133, 250, 249, 189, 195, 23, 166, 190, 38, 146, 16, 190, 218, 11, 216, 189, 120, 140, 112, 62, 73, 172, 73, 190, 209, 160, 211, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 1, 62, 61, 56, 122, 235, 188, 1, 28, 173, 60, 87, 117, 200, 189, 42, 252, 193, 62, 105, 104, 122, 62, 247, 221, 89, 189, 234, 86, 242, 61, 102, 226, 128, 189, 174, 73, 113, 186, 188, 143, 166, 189, 254, 168, 132, 62, 21, 247, 141, 62, 1, 237, 16, 190, 104, 221, 37, 190, 90, 224, 189, 189, 124, 52, 2, 189, 107, 86, 185, 61, 240, 71, 172, 62, 183, 164, 141, 61, 44, 179, 41, 60, 241, 35, 89, 61, 85, 132, 186, 61, 49, 190, 45, 190, 205, 133, 151, 61, 95, 89, 8, 62, 91, 75, 57, 190, 3, 114, 147, 60, 95, 116, 1, 190, 67, 10, 114, 61, 50, 2, 104, 188, 149, 209, 59, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 206, 86, 62, 63, 132, 166, 62, 131, 217, 8, 63, 151, 167, 141, 190, 80, 81, 64, 62, 84, 199, 36, 191, 62, 216, 187, 190, 121, 185, 9, 62, 22, 206, 127, 62, 215, 14, 42, 62, 14, 114, 139, 62, 215, 115, 115, 191, 49, 88, 189, 190, 132, 76, 66, 188, 86, 70, 253, 61, 103, 169, 197, 187, 224, 134, 231, 62, 11, 57, 122, 62, 32, 50, 174, 190, 46, 191, 122, 62, 138, 218, 17, 191, 6, 236, 28, 63, 161, 8, 220, 190, 201, 68, 128, 61, 69, 108, 80, 63, 81, 197, 33, 191, 237, 47, 240, 189, 221, 195, 143, 191, 157, 42, 82, 62, 9, 38, 149, 189, 167, 106, 35, 191, 232, 25, 119, 63, 229, 230, 57, 189, 204, 45, 100, 190, 22, 188, 108, 62, 101, 177, 36, 190, 192, 167, 112, 190, 25, 90, 107, 61, 243, 169, 164, 61, 48, 76, 161, 190, 194, 188, 240, 185, 211, 5, 26, 62, 249, 145, 133, 62, 61, 180, 11, 61, 237, 26, 212, 190, 180, 122, 178, 189, 52, 97, 198, 189, 82, 212, 23, 61, 22, 211, 11, 190, 225, 108, 0, 190, 192, 19, 31, 190, 203, 85, 45, 187, 139, 170, 160, 62, 46, 114, 57, 62, 82, 192, 102, 59, 40, 249, 81, 189, 201, 194, 11, 62, 222, 9, 154, 62, 81, 204, 248, 60, 232, 150, 51, 62, 98, 227, 205, 61, 154, 59, 53, 61, 122, 76, 9, 62, 222, 136, 237, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 85, 82, 62, 36, 101, 235, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 188, 99, 63, 224, 221, 208, 63, 238, 221, 69, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {181, 3, 96, 192, 212, 207, 78, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0096/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}