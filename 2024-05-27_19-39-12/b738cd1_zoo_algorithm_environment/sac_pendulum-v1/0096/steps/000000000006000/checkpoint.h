// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 56, 153, 62, 164, 233, 115, 190, 187, 234, 78, 188, 61, 180, 222, 190, 192, 39, 147, 63, 91, 200, 166, 62, 244, 36, 158, 62, 146, 170, 51, 191, 18, 133, 168, 61, 45, 161, 216, 190, 141, 114, 53, 191, 92, 211, 225, 189, 114, 111, 32, 63, 249, 237, 133, 191, 41, 129, 30, 190, 160, 210, 252, 62, 19, 204, 111, 191, 115, 244, 127, 190, 103, 72, 136, 190, 66, 32, 10, 63, 239, 185, 17, 191, 28, 217, 20, 191, 109, 144, 109, 62, 25, 164, 51, 63, 103, 112, 12, 189, 13, 33, 99, 63, 79, 138, 1, 63, 124, 0, 15, 62, 121, 211, 77, 191, 245, 125, 215, 61, 223, 29, 130, 190, 69, 164, 86, 191, 146, 255, 186, 190, 74, 128, 44, 191, 24, 1, 202, 62, 55, 85, 32, 63, 34, 247, 40, 191, 66, 24, 119, 190, 197, 47, 228, 188, 189, 154, 105, 190, 209, 173, 252, 62, 177, 6, 6, 191, 187, 7, 236, 190, 109, 221, 107, 190, 202, 94, 120, 63, 157, 122, 146, 62, 243, 56, 45, 191, 135, 67, 37, 63, 98, 114, 17, 63, 237, 197, 58, 63, 205, 9, 238, 62, 40, 71, 255, 190, 23, 74, 187, 62, 132, 9, 3, 190, 90, 154, 10, 63, 209, 114, 78, 191, 167, 144, 248, 190, 40, 122, 2, 63, 124, 233, 49, 63, 110, 39, 234, 62, 45, 137, 224, 190, 175, 79, 108, 63, 193, 219, 193, 62, 124, 70, 122, 191, 113, 60, 192, 189, 87, 162, 170, 60, 13, 4, 14, 191, 131, 9, 251, 62, 168, 242, 156, 61, 128, 31, 81, 63, 71, 84, 233, 190, 168, 189, 246, 190, 217, 113, 168, 61, 183, 49, 19, 191, 96, 36, 149, 187, 243, 83, 210, 190, 56, 123, 40, 63, 90, 222, 124, 190, 235, 163, 64, 62, 15, 61, 64, 63, 98, 33, 11, 191, 219, 119, 111, 190, 39, 106, 187, 62, 193, 209, 214, 60, 35, 143, 17, 62, 64, 11, 224, 62, 225, 94, 152, 61, 166, 212, 23, 62, 196, 170, 223, 190, 41, 49, 187, 62, 214, 147, 134, 62, 8, 11, 145, 191, 214, 210, 214, 190, 32, 177, 82, 63, 91, 181, 11, 63, 25, 117, 20, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 147, 19, 191, 2, 220, 195, 60, 88, 94, 20, 63, 111, 222, 133, 62, 226, 190, 156, 190, 38, 163, 173, 189, 243, 102, 235, 190, 31, 246, 108, 190, 200, 34, 180, 62, 156, 177, 161, 189, 26, 84, 35, 63, 88, 230, 175, 190, 164, 178, 171, 61, 96, 112, 97, 190, 49, 138, 205, 190, 79, 186, 189, 62, 113, 78, 98, 62, 93, 134, 7, 63, 252, 239, 220, 62, 63, 100, 161, 190, 104, 175, 124, 189, 169, 91, 68, 189, 91, 130, 25, 63, 120, 83, 46, 191, 218, 113, 31, 63, 208, 124, 139, 190, 221, 13, 118, 62, 9, 73, 198, 62, 203, 231, 249, 62, 160, 21, 159, 61, 93, 144, 58, 62, 127, 156, 11, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 48, 218, 61, 62, 82, 152, 189, 88, 18, 103, 188, 201, 102, 143, 61, 199, 117, 162, 190, 4, 67, 35, 188, 198, 2, 214, 61, 63, 249, 103, 189, 197, 245, 41, 189, 46, 56, 178, 62, 220, 23, 242, 189, 28, 207, 235, 189, 56, 255, 240, 61, 43, 184, 88, 62, 172, 172, 233, 189, 95, 114, 1, 189, 94, 203, 237, 189, 43, 185, 30, 62, 31, 110, 4, 62, 35, 58, 142, 188, 4, 110, 160, 60, 95, 197, 68, 190, 165, 67, 63, 189, 22, 58, 139, 189, 247, 135, 30, 189, 254, 91, 113, 62, 230, 248, 231, 189, 254, 196, 139, 188, 16, 149, 10, 190, 191, 198, 161, 189, 103, 185, 48, 62, 41, 159, 4, 190, 161, 198, 190, 61, 207, 127, 54, 62, 122, 217, 145, 62, 229, 177, 164, 190, 249, 81, 162, 189, 159, 139, 2, 62, 135, 195, 11, 61, 81, 231, 103, 187, 89, 95, 41, 60, 82, 245, 119, 61, 172, 76, 208, 61, 22, 228, 178, 189, 244, 117, 64, 187, 169, 100, 9, 189, 137, 129, 200, 189, 160, 78, 246, 189, 91, 156, 196, 62, 47, 118, 14, 190, 200, 241, 80, 62, 236, 213, 100, 189, 22, 63, 166, 61, 222, 105, 183, 190, 82, 239, 124, 190, 98, 230, 25, 62, 56, 58, 55, 62, 251, 78, 39, 189, 87, 71, 13, 188, 14, 64, 42, 61, 114, 223, 137, 62, 54, 173, 114, 190, 44, 64, 125, 189, 157, 23, 130, 62, 9, 145, 244, 61, 67, 57, 11, 62, 112, 151, 6, 62, 125, 93, 27, 62, 19, 166, 38, 63, 154, 17, 195, 62, 62, 138, 118, 191, 144, 146, 133, 62, 174, 216, 183, 189, 174, 189, 141, 62, 187, 160, 142, 190, 105, 178, 209, 188, 207, 92, 223, 61, 127, 232, 217, 189, 34, 170, 146, 189, 100, 28, 90, 62, 184, 253, 247, 190, 96, 121, 237, 189, 156, 70, 158, 58, 255, 119, 27, 191, 205, 84, 180, 61, 217, 196, 97, 61, 252, 139, 64, 189, 137, 191, 171, 62, 11, 140, 250, 61, 69, 65, 161, 62, 177, 44, 194, 61, 139, 98, 30, 61, 248, 229, 159, 189, 17, 49, 4, 187, 214, 48, 25, 190, 88, 141, 7, 62, 81, 92, 79, 189, 4, 106, 185, 61, 215, 238, 149, 62, 3, 237, 132, 60, 227, 191, 20, 190, 191, 56, 50, 189, 9, 137, 39, 62, 223, 5, 34, 62, 103, 29, 19, 62, 164, 128, 18, 191, 228, 117, 242, 61, 34, 21, 4, 62, 99, 72, 247, 61, 178, 150, 254, 189, 70, 248, 163, 189, 138, 175, 67, 190, 34, 102, 55, 189, 179, 99, 43, 61, 81, 202, 106, 62, 24, 32, 15, 62, 211, 97, 15, 190, 54, 172, 162, 62, 141, 54, 241, 189, 7, 190, 157, 190, 184, 36, 68, 189, 190, 96, 48, 190, 43, 54, 13, 62, 199, 138, 146, 187, 142, 173, 72, 190, 175, 145, 167, 190, 222, 141, 133, 62, 120, 149, 213, 190, 133, 3, 39, 189, 123, 204, 76, 60, 139, 240, 113, 62, 239, 206, 19, 190, 21, 134, 143, 190, 24, 122, 146, 61, 247, 106, 225, 60, 94, 25, 81, 62, 81, 68, 25, 62, 172, 133, 206, 59, 227, 97, 233, 61, 185, 239, 28, 62, 109, 245, 66, 189, 194, 30, 176, 189, 142, 16, 133, 61, 57, 146, 153, 61, 123, 245, 188, 189, 82, 56, 138, 62, 255, 193, 142, 189, 248, 243, 18, 190, 12, 48, 168, 189, 231, 242, 71, 62, 225, 164, 0, 62, 216, 91, 31, 61, 7, 79, 58, 61, 233, 228, 124, 61, 231, 226, 251, 61, 56, 86, 73, 62, 8, 9, 35, 62, 39, 144, 89, 61, 50, 209, 35, 190, 132, 49, 154, 62, 211, 110, 102, 61, 66, 107, 221, 60, 224, 15, 127, 61, 165, 43, 136, 191, 251, 156, 219, 190, 74, 144, 52, 191, 96, 2, 166, 60, 179, 242, 47, 190, 159, 220, 92, 62, 67, 121, 232, 186, 49, 93, 166, 190, 135, 113, 106, 190, 83, 3, 158, 191, 168, 120, 77, 62, 110, 56, 225, 61, 45, 238, 173, 61, 111, 182, 177, 62, 11, 239, 152, 190, 98, 55, 28, 61, 122, 120, 96, 61, 215, 169, 220, 61, 121, 10, 141, 191, 127, 116, 195, 61, 162, 228, 69, 190, 65, 127, 137, 190, 194, 111, 185, 59, 202, 159, 102, 62, 17, 236, 37, 190, 89, 52, 54, 62, 216, 143, 43, 62, 179, 205, 178, 190, 44, 146, 24, 62, 122, 205, 35, 190, 156, 182, 13, 189, 163, 145, 54, 61, 184, 181, 8, 191, 35, 213, 230, 190, 4, 6, 45, 191, 128, 24, 189, 189, 8, 245, 146, 186, 109, 62, 30, 62, 195, 122, 70, 190, 244, 35, 131, 189, 108, 31, 130, 62, 218, 236, 5, 60, 9, 181, 164, 60, 19, 82, 241, 61, 135, 26, 80, 62, 59, 89, 220, 61, 15, 213, 116, 62, 108, 189, 104, 186, 89, 160, 64, 62, 252, 135, 178, 59, 66, 194, 212, 190, 20, 65, 104, 62, 90, 144, 128, 190, 255, 57, 76, 190, 106, 122, 129, 62, 242, 215, 8, 62, 90, 22, 97, 62, 4, 180, 19, 62, 221, 172, 142, 62, 208, 46, 98, 190, 245, 62, 47, 62, 128, 234, 184, 188, 27, 2, 136, 190, 161, 63, 74, 62, 60, 195, 86, 190, 46, 66, 65, 62, 65, 211, 225, 189, 42, 50, 154, 58, 177, 224, 63, 190, 87, 54, 14, 62, 175, 46, 75, 62, 143, 138, 175, 189, 202, 148, 130, 190, 184, 25, 102, 189, 251, 43, 7, 190, 184, 15, 164, 188, 135, 157, 120, 61, 106, 208, 241, 61, 27, 189, 165, 189, 210, 142, 214, 61, 17, 45, 69, 60, 15, 32, 47, 190, 227, 92, 163, 188, 233, 190, 10, 191, 65, 94, 21, 190, 232, 34, 22, 62, 119, 81, 62, 189, 152, 84, 200, 189, 23, 158, 71, 190, 110, 73, 97, 61, 10, 76, 18, 61, 11, 23, 86, 62, 75, 32, 207, 61, 11, 191, 38, 61, 210, 150, 18, 189, 47, 64, 149, 189, 188, 74, 18, 61, 55, 134, 181, 188, 107, 187, 162, 61, 15, 220, 53, 60, 161, 62, 158, 189, 45, 5, 180, 59, 174, 70, 152, 62, 61, 156, 216, 61, 243, 92, 235, 189, 21, 50, 181, 189, 35, 50, 142, 190, 118, 162, 68, 190, 104, 8, 71, 190, 146, 232, 150, 190, 142, 161, 243, 61, 165, 182, 63, 190, 165, 37, 129, 189, 10, 12, 15, 190, 201, 40, 94, 189, 207, 101, 185, 189, 148, 135, 240, 187, 13, 229, 6, 61, 66, 9, 85, 190, 126, 8, 177, 60, 120, 119, 149, 61, 110, 212, 57, 190, 34, 206, 101, 190, 101, 170, 46, 189, 147, 188, 67, 190, 32, 46, 171, 61, 98, 28, 14, 62, 20, 216, 161, 60, 133, 8, 84, 62, 130, 67, 82, 190, 242, 189, 136, 190, 237, 39, 29, 190, 211, 124, 133, 60, 112, 174, 203, 61, 104, 107, 122, 190, 195, 108, 252, 189, 229, 28, 69, 61, 155, 20, 192, 61, 29, 53, 14, 190, 52, 115, 210, 61, 98, 54, 113, 61, 53, 193, 131, 62, 162, 148, 136, 190, 7, 159, 215, 190, 242, 235, 136, 62, 100, 44, 30, 189, 162, 63, 132, 189, 81, 56, 12, 190, 120, 145, 228, 189, 192, 119, 47, 62, 106, 117, 151, 61, 248, 113, 247, 61, 234, 98, 152, 61, 170, 148, 11, 62, 151, 182, 179, 189, 156, 77, 143, 190, 160, 139, 167, 189, 53, 196, 245, 189, 174, 171, 53, 189, 112, 143, 30, 60, 18, 133, 143, 189, 199, 115, 122, 62, 86, 114, 39, 62, 110, 161, 121, 61, 53, 19, 127, 190, 183, 227, 108, 190, 155, 169, 156, 61, 68, 207, 91, 188, 253, 113, 188, 190, 224, 53, 132, 190, 203, 100, 141, 60, 174, 236, 2, 191, 52, 37, 95, 190, 20, 193, 109, 61, 161, 86, 105, 190, 135, 215, 41, 62, 253, 165, 8, 191, 40, 172, 38, 190, 203, 194, 117, 188, 58, 254, 24, 191, 77, 215, 151, 62, 71, 64, 46, 62, 56, 138, 1, 62, 73, 12, 117, 61, 69, 85, 157, 190, 125, 11, 139, 190, 57, 60, 166, 60, 201, 70, 33, 62, 73, 37, 8, 62, 140, 150, 235, 189, 222, 183, 25, 191, 193, 149, 211, 60, 241, 93, 146, 61, 34, 36, 114, 191, 41, 139, 19, 191, 249, 180, 154, 62, 208, 189, 10, 191, 128, 48, 134, 190, 8, 39, 73, 191, 41, 64, 232, 61, 10, 235, 79, 191, 41, 85, 68, 61, 39, 155, 139, 190, 226, 240, 50, 191, 203, 48, 100, 190, 146, 57, 57, 61, 57, 252, 244, 61, 43, 94, 226, 189, 231, 109, 7, 190, 70, 228, 35, 191, 123, 188, 157, 188, 7, 244, 5, 62, 220, 101, 159, 190, 221, 3, 54, 60, 163, 199, 184, 190, 250, 166, 42, 62, 18, 115, 174, 186, 38, 125, 18, 62, 238, 134, 127, 190, 190, 198, 145, 61, 113, 75, 153, 61, 9, 111, 207, 61, 114, 229, 246, 190, 55, 0, 220, 62, 213, 214, 136, 190, 204, 133, 24, 191, 200, 41, 27, 190, 60, 237, 119, 61, 20, 17, 5, 191, 87, 129, 146, 61, 195, 180, 37, 188, 144, 126, 86, 188, 106, 109, 214, 190, 197, 209, 95, 190, 238, 206, 132, 190, 14, 196, 130, 190, 123, 37, 174, 61, 153, 148, 79, 62, 69, 167, 47, 61, 67, 147, 15, 62, 240, 133, 2, 62, 89, 79, 219, 190, 13, 184, 2, 190, 224, 106, 239, 61, 149, 211, 73, 190, 26, 200, 227, 61, 123, 25, 69, 190, 241, 22, 31, 62, 241, 170, 190, 61, 193, 122, 33, 62, 51, 31, 121, 62, 53, 54, 60, 190, 168, 101, 177, 61, 127, 9, 40, 62, 144, 173, 181, 189, 59, 165, 43, 190, 206, 88, 228, 61, 223, 82, 232, 61, 74, 5, 27, 190, 88, 31, 239, 189, 95, 247, 12, 62, 54, 28, 151, 61, 159, 89, 33, 190, 165, 106, 236, 61, 93, 40, 102, 61, 247, 58, 20, 61, 28, 166, 46, 190, 61, 244, 139, 188, 112, 33, 31, 190, 70, 119, 222, 61, 100, 157, 15, 61, 221, 152, 100, 60, 73, 38, 19, 190, 227, 122, 182, 60, 155, 122, 159, 189, 169, 229, 175, 61, 132, 113, 155, 188, 170, 252, 187, 189, 103, 255, 8, 190, 50, 169, 0, 188, 247, 171, 68, 190, 172, 42, 2, 190, 87, 155, 98, 61, 207, 189, 157, 60, 68, 154, 217, 61, 45, 169, 149, 61, 146, 67, 59, 189, 69, 161, 252, 188, 92, 107, 29, 190, 65, 249, 27, 62, 73, 179, 211, 188, 114, 21, 9, 62, 178, 205, 218, 61, 183, 139, 158, 189, 221, 163, 19, 189, 16, 82, 99, 190, 108, 133, 6, 62, 170, 249, 81, 189, 103, 141, 16, 62, 106, 196, 56, 189, 67, 217, 6, 190, 94, 44, 31, 189, 5, 255, 149, 61, 190, 58, 131, 59, 182, 246, 5, 62, 89, 234, 26, 60, 162, 84, 20, 62, 192, 247, 93, 189, 85, 221, 63, 190, 85, 121, 51, 61, 13, 45, 16, 189, 88, 112, 187, 188, 4, 229, 176, 189, 126, 206, 217, 59, 177, 202, 75, 60, 63, 217, 147, 61, 87, 41, 29, 190, 38, 119, 221, 61, 89, 237, 27, 190, 35, 60, 61, 190, 8, 76, 69, 189, 142, 70, 198, 61, 98, 159, 19, 62, 29, 222, 1, 188, 48, 93, 37, 190, 219, 240, 195, 61, 132, 4, 12, 190, 42, 144, 101, 61, 77, 39, 210, 61, 195, 15, 23, 187, 219, 99, 3, 190, 178, 156, 198, 189, 185, 59, 60, 189, 38, 75, 183, 61, 50, 198, 55, 190, 89, 147, 162, 189, 123, 83, 22, 189, 41, 59, 51, 190, 117, 89, 21, 190, 161, 199, 34, 60, 82, 21, 172, 59, 41, 246, 78, 189, 157, 149, 129, 61, 219, 215, 18, 61, 162, 16, 28, 190, 228, 152, 37, 62, 119, 77, 131, 189, 105, 82, 210, 60, 234, 194, 135, 189, 112, 144, 236, 189, 88, 224, 246, 189, 189, 57, 106, 61, 125, 124, 19, 191, 54, 189, 69, 187, 192, 93, 206, 61, 133, 163, 129, 61, 220, 116, 53, 189, 170, 107, 215, 189, 207, 142, 166, 189, 111, 126, 14, 60, 125, 15, 204, 189, 186, 162, 131, 190, 31, 229, 203, 187, 199, 80, 232, 60, 43, 123, 61, 62, 226, 75, 89, 62, 235, 89, 24, 190, 46, 204, 54, 62, 222, 27, 239, 190, 117, 37, 196, 61, 150, 230, 6, 191, 42, 0, 244, 190, 230, 142, 10, 61, 78, 127, 33, 62, 3, 171, 37, 189, 142, 152, 110, 62, 222, 86, 178, 190, 126, 155, 12, 62, 150, 47, 229, 189, 173, 83, 160, 61, 56, 40, 113, 62, 215, 53, 30, 61, 98, 95, 116, 62, 240, 177, 18, 62, 169, 51, 45, 61, 177, 207, 76, 62, 240, 50, 3, 62, 184, 103, 12, 191, 30, 55, 116, 62, 154, 175, 64, 187, 214, 160, 76, 61, 20, 114, 142, 190, 229, 127, 70, 62, 33, 58, 99, 190, 34, 89, 205, 189, 233, 131, 255, 188, 234, 225, 109, 62, 3, 143, 154, 189, 35, 44, 137, 189, 152, 4, 100, 61, 101, 53, 18, 191, 205, 132, 207, 59, 127, 148, 251, 60, 78, 41, 35, 190, 29, 87, 9, 61, 201, 39, 188, 61, 82, 173, 225, 186, 34, 7, 202, 189, 131, 24, 17, 59, 116, 174, 110, 62, 6, 141, 98, 61, 183, 91, 186, 189, 218, 1, 129, 62, 236, 96, 211, 189, 55, 154, 38, 190, 180, 0, 58, 62, 91, 81, 198, 190, 17, 202, 39, 191, 70, 175, 41, 191, 228, 200, 151, 62, 154, 56, 27, 62, 201, 104, 81, 62, 203, 50, 172, 61, 92, 189, 135, 190, 241, 229, 120, 189, 45, 48, 44, 190, 92, 20, 5, 190, 162, 101, 235, 61, 188, 114, 55, 189, 40, 186, 137, 62, 170, 69, 152, 62, 22, 208, 86, 189, 193, 252, 72, 189, 192, 236, 154, 61, 211, 49, 222, 190, 228, 74, 202, 61, 116, 119, 46, 190, 40, 216, 106, 189, 178, 48, 241, 188, 204, 101, 146, 61, 27, 60, 27, 62, 102, 185, 128, 62, 248, 84, 42, 62, 222, 163, 78, 190, 84, 220, 16, 62, 19, 19, 245, 189, 74, 228, 117, 62, 53, 22, 60, 62, 146, 11, 168, 189, 195, 94, 201, 62, 239, 126, 136, 62, 46, 169, 144, 191, 135, 33, 5, 62, 116, 165, 76, 61, 81, 214, 132, 61, 129, 119, 191, 58, 163, 244, 76, 61, 200, 236, 187, 61, 35, 28, 137, 189, 109, 5, 192, 187, 221, 130, 109, 61, 253, 91, 97, 190, 241, 249, 18, 188, 54, 23, 92, 190, 153, 110, 67, 190, 185, 30, 87, 62, 161, 246, 50, 62, 142, 46, 236, 60, 57, 17, 3, 62, 85, 112, 218, 61, 63, 101, 48, 62, 196, 232, 164, 61, 20, 237, 236, 59, 219, 23, 147, 61, 152, 163, 59, 62, 73, 245, 239, 188, 184, 41, 203, 62, 113, 232, 234, 189, 214, 140, 40, 189, 132, 171, 191, 61, 206, 32, 6, 190, 132, 106, 82, 191, 36, 150, 28, 191, 51, 157, 21, 62, 155, 123, 22, 189, 36, 43, 108, 60, 76, 32, 205, 189, 104, 99, 51, 190, 77, 219, 134, 188, 24, 112, 110, 190, 12, 234, 60, 61, 111, 17, 48, 61, 124, 71, 151, 189, 191, 94, 170, 62, 159, 164, 171, 61, 103, 136, 39, 61, 102, 111, 15, 63, 72, 218, 139, 190, 54, 108, 55, 190, 29, 161, 101, 190, 109, 108, 216, 189, 33, 124, 194, 189, 71, 19, 60, 61, 98, 214, 244, 61, 230, 139, 141, 190, 123, 245, 171, 59, 114, 28, 218, 189, 251, 159, 143, 190, 168, 207, 217, 61, 67, 67, 2, 62, 2, 25, 129, 62, 106, 101, 115, 190, 15, 234, 253, 58, 18, 131, 190, 190, 175, 238, 233, 189, 56, 245, 123, 191, 18, 78, 17, 62, 76, 35, 8, 190, 35, 102, 38, 62, 28, 226, 203, 189, 88, 202, 252, 61, 206, 15, 47, 188, 101, 99, 172, 60, 86, 170, 199, 61, 151, 108, 133, 188, 204, 195, 126, 190, 239, 109, 83, 62, 249, 28, 91, 191, 233, 153, 106, 190, 174, 143, 104, 62, 144, 231, 59, 62, 148, 21, 151, 62, 41, 13, 61, 190, 243, 28, 4, 187, 109, 42, 181, 62, 57, 57, 221, 189, 203, 219, 22, 62, 41, 17, 172, 61, 39, 45, 91, 190, 255, 232, 133, 191, 179, 135, 28, 190, 39, 192, 5, 190, 205, 213, 231, 190, 123, 235, 133, 62, 153, 17, 240, 189, 23, 0, 73, 191, 240, 247, 228, 190, 43, 107, 145, 62, 147, 17, 132, 190, 203, 50, 89, 60, 104, 95, 247, 188, 75, 255, 142, 60, 86, 67, 202, 190, 142, 6, 9, 61, 62, 236, 1, 190, 7, 5, 36, 189, 145, 84, 161, 62, 9, 225, 101, 62, 138, 106, 148, 61, 79, 128, 47, 190, 70, 208, 33, 63, 95, 31, 154, 190, 218, 175, 161, 61, 150, 18, 234, 61, 207, 12, 1, 189, 161, 119, 89, 61, 38, 55, 77, 190, 66, 0, 120, 61, 27, 7, 165, 61, 166, 237, 17, 60, 148, 253, 26, 61, 75, 26, 181, 189, 33, 24, 16, 62, 248, 202, 45, 189, 180, 71, 49, 188, 140, 29, 31, 62, 43, 119, 148, 189, 44, 11, 23, 62, 157, 58, 234, 59, 109, 191, 43, 62, 222, 107, 113, 61, 91, 239, 5, 60, 115, 203, 128, 186, 237, 124, 180, 60, 174, 74, 99, 61, 176, 63, 201, 61, 52, 198, 10, 189, 244, 88, 198, 189, 69, 181, 48, 190, 192, 162, 176, 189, 52, 94, 100, 61, 227, 164, 237, 61, 100, 204, 239, 58, 22, 134, 38, 62, 30, 176, 246, 188, 36, 105, 254, 59, 51, 173, 149, 189, 130, 123, 43, 190, 163, 183, 18, 190, 12, 229, 57, 189, 228, 129, 32, 61, 175, 60, 205, 189, 201, 180, 241, 61, 49, 90, 40, 190, 123, 205, 82, 60, 48, 113, 201, 188, 17, 55, 45, 62, 200, 132, 34, 191, 181, 238, 134, 61, 5, 198, 252, 189, 229, 12, 97, 190, 107, 70, 134, 191, 101, 246, 69, 189, 88, 127, 222, 61, 45, 27, 12, 190, 50, 12, 66, 190, 223, 131, 211, 61, 143, 32, 50, 62, 17, 201, 88, 62, 189, 182, 234, 189, 50, 134, 128, 190, 42, 251, 152, 190, 86, 86, 105, 62, 41, 20, 153, 191, 92, 146, 178, 189, 1, 0, 99, 62, 74, 218, 140, 62, 225, 124, 148, 62, 187, 50, 63, 188, 252, 242, 95, 190, 137, 75, 181, 62, 240, 16, 130, 190, 10, 91, 73, 62, 82, 95, 164, 185, 34, 76, 121, 188, 40, 19, 113, 191, 198, 108, 21, 62, 87, 230, 72, 189, 32, 64, 107, 190, 90, 112, 139, 189, 112, 155, 9, 189, 8, 23, 8, 191, 196, 53, 153, 190, 247, 3, 38, 62, 194, 203, 219, 190, 43, 90, 172, 188, 7, 209, 209, 61, 96, 88, 13, 190, 113, 106, 132, 190, 38, 184, 196, 189, 98, 148, 120, 60, 55, 39, 150, 190, 109, 0, 8, 62, 44, 123, 169, 62, 230, 253, 152, 61, 25, 95, 0, 190, 243, 226, 187, 62, 178, 204, 246, 190, 175, 17, 72, 190, 182, 35, 5, 62, 25, 98, 254, 190, 218, 201, 170, 61, 6, 137, 64, 190, 235, 36, 131, 62, 17, 141, 12, 62, 79, 231, 45, 60, 43, 39, 149, 189, 183, 179, 45, 190, 225, 147, 85, 62, 243, 213, 243, 61, 53, 215, 223, 189, 117, 229, 29, 189, 146, 73, 85, 189, 174, 134, 6, 190, 14, 37, 66, 189, 170, 187, 157, 189, 105, 141, 75, 190, 163, 153, 14, 62, 105, 240, 79, 189, 126, 180, 217, 189, 133, 127, 159, 189, 184, 234, 6, 61, 25, 87, 131, 189, 220, 21, 227, 61, 0, 23, 241, 189, 239, 12, 24, 62, 188, 175, 58, 190, 220, 137, 41, 190, 167, 208, 152, 61, 8, 211, 49, 190, 227, 47, 193, 188, 26, 190, 65, 189, 247, 147, 86, 189, 54, 194, 250, 189, 31, 24, 46, 62, 47, 175, 177, 187, 184, 52, 84, 61, 46, 16, 253, 189, 201, 252, 65, 190, 234, 39, 238, 60, 219, 236, 45, 62, 234, 46, 153, 61, 246, 49, 18, 191, 219, 62, 85, 189, 153, 55, 162, 62, 167, 19, 181, 190, 197, 210, 10, 191, 96, 33, 80, 62, 75, 32, 147, 190, 167, 35, 220, 191, 77, 210, 3, 191, 76, 59, 171, 62, 222, 193, 150, 191, 186, 132, 168, 62, 217, 130, 175, 190, 48, 116, 108, 191, 154, 253, 6, 191, 36, 58, 161, 190, 165, 90, 206, 59, 217, 13, 5, 189, 199, 203, 159, 190, 149, 208, 106, 191, 97, 216, 48, 62, 214, 91, 59, 62, 136, 27, 35, 190, 192, 167, 84, 62, 72, 161, 119, 190, 9, 58, 139, 62, 59, 58, 187, 61, 119, 172, 102, 187, 34, 159, 17, 191, 253, 69, 54, 189, 183, 168, 112, 190, 28, 227, 20, 190, 153, 189, 63, 62, 129, 135, 52, 62, 247, 247, 81, 62, 218, 32, 199, 62, 86, 115, 201, 61, 29, 200, 196, 190, 202, 138, 178, 59, 156, 120, 53, 60, 181, 47, 121, 62, 29, 161, 211, 189, 49, 255, 186, 61, 59, 170, 240, 61, 213, 243, 67, 189, 217, 18, 31, 61, 149, 238, 88, 61, 133, 70, 149, 61, 165, 124, 159, 61, 176, 48, 143, 190, 112, 185, 206, 61, 75, 248, 11, 62, 31, 73, 115, 61, 75, 92, 48, 62, 77, 213, 161, 61, 245, 201, 169, 61, 129, 56, 149, 62, 5, 14, 112, 189, 21, 196, 209, 189, 226, 101, 169, 187, 134, 204, 71, 189, 86, 156, 12, 191, 107, 155, 31, 62, 121, 218, 70, 61, 58, 144, 130, 189, 239, 243, 48, 190, 235, 245, 215, 189, 63, 148, 114, 189, 255, 162, 63, 189, 244, 102, 75, 61, 60, 130, 17, 190, 49, 149, 201, 189, 78, 222, 43, 62, 135, 64, 26, 190, 248, 138, 5, 190, 146, 42, 24, 189, 61, 153, 226, 61, 37, 90, 19, 62, 155, 78, 201, 61, 156, 123, 148, 189, 110, 82, 143, 189, 208, 98, 158, 60, 78, 76, 18, 189, 250, 156, 159, 61, 124, 38, 31, 190, 185, 133, 225, 61, 49, 212, 142, 61, 190, 222, 193, 61, 21, 136, 18, 62, 32, 193, 222, 189, 14, 204, 86, 190, 83, 193, 73, 61, 245, 114, 35, 190, 189, 161, 27, 190, 249, 124, 30, 190, 101, 208, 238, 61, 0, 239, 133, 190, 227, 18, 109, 62, 23, 213, 147, 62, 156, 15, 223, 190, 49, 159, 143, 190, 205, 243, 137, 62, 15, 232, 7, 191, 43, 224, 126, 190, 151, 79, 189, 190, 188, 121, 11, 62, 120, 158, 130, 191, 104, 10, 100, 61, 155, 69, 119, 190, 167, 128, 100, 191, 4, 218, 145, 190, 212, 250, 195, 62, 21, 250, 192, 61, 209, 132, 10, 62, 235, 209, 2, 63, 171, 143, 92, 191, 244, 94, 67, 62, 137, 195, 135, 61, 124, 64, 23, 190, 210, 208, 224, 189, 32, 129, 185, 188, 180, 122, 206, 189, 159, 233, 166, 61, 70, 221, 35, 62, 214, 53, 13, 190, 15, 162, 139, 189, 26, 156, 97, 60, 51, 15, 0, 190, 180, 50, 172, 61, 164, 113, 188, 60, 218, 66, 60, 61, 119, 153, 139, 187, 128, 53, 133, 60, 3, 189, 133, 191, 207, 224, 227, 61, 107, 94, 25, 190, 181, 161, 168, 62, 173, 166, 182, 189, 214, 33, 229, 58, 112, 76, 115, 189, 41, 245, 50, 190, 203, 15, 72, 189, 214, 87, 72, 62, 218, 19, 147, 190, 96, 134, 145, 190, 123, 246, 108, 188, 30, 79, 65, 191, 103, 226, 241, 188, 134, 101, 176, 187, 119, 83, 93, 60, 43, 58, 78, 190, 222, 109, 26, 62, 61, 119, 250, 189, 61, 105, 209, 190, 140, 159, 212, 189, 217, 8, 183, 189, 27, 128, 106, 62, 95, 25, 53, 190, 83, 222, 183, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 51, 92, 61, 33, 53, 3, 189, 190, 114, 25, 188, 99, 36, 144, 189, 60, 102, 170, 62, 18, 19, 114, 62, 0, 43, 77, 189, 152, 122, 171, 61, 102, 226, 128, 189, 237, 213, 39, 61, 254, 226, 60, 189, 70, 78, 131, 62, 154, 104, 156, 62, 117, 55, 12, 190, 11, 193, 20, 190, 90, 224, 189, 189, 95, 18, 224, 188, 254, 155, 104, 61, 71, 73, 150, 62, 15, 91, 232, 60, 200, 18, 144, 61, 77, 222, 83, 61, 227, 50, 166, 61, 62, 217, 39, 190, 190, 228, 240, 61, 206, 141, 125, 61, 247, 12, 50, 190, 102, 10, 15, 186, 237, 168, 254, 189, 67, 10, 114, 61, 205, 123, 29, 189, 209, 87, 28, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 108, 16, 62, 82, 213, 135, 62, 1, 52, 162, 62, 103, 29, 128, 190, 78, 208, 41, 62, 117, 161, 0, 191, 78, 50, 139, 190, 184, 240, 30, 62, 22, 206, 127, 62, 230, 46, 242, 61, 247, 155, 67, 62, 153, 183, 52, 191, 106, 70, 183, 190, 67, 147, 67, 188, 49, 168, 0, 62, 103, 169, 197, 187, 142, 190, 199, 62, 54, 251, 130, 62, 158, 250, 160, 190, 115, 101, 129, 62, 113, 65, 161, 190, 60, 250, 210, 62, 205, 54, 234, 190, 91, 38, 128, 61, 128, 49, 56, 63, 177, 233, 253, 190, 112, 217, 240, 189, 244, 161, 129, 191, 148, 76, 37, 62, 9, 38, 149, 189, 32, 119, 53, 191, 171, 247, 48, 63, 23, 77, 78, 61, 134, 74, 50, 190, 133, 220, 40, 62, 50, 199, 47, 190, 175, 168, 81, 190, 79, 37, 210, 60, 10, 233, 145, 59, 77, 132, 129, 190, 194, 188, 240, 185, 250, 36, 49, 62, 168, 186, 64, 62, 88, 172, 22, 190, 77, 250, 250, 190, 193, 168, 178, 189, 128, 238, 197, 189, 82, 212, 23, 61, 161, 146, 212, 189, 184, 38, 116, 189, 248, 128, 60, 190, 40, 26, 105, 61, 149, 3, 81, 62, 54, 218, 146, 61, 66, 12, 134, 187, 227, 158, 84, 189, 86, 88, 143, 61, 128, 118, 190, 61, 207, 63, 248, 60, 250, 12, 50, 62, 157, 72, 4, 62, 154, 59, 53, 61, 225, 16, 162, 61, 30, 232, 215, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 199, 41, 62, 46, 52, 210, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {41, 242, 13, 191, 47, 110, 143, 191, 99, 202, 203, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {151, 63, 254, 63, 253, 250, 1, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0096/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}