// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 115, 13, 191, 29, 201, 45, 191, 51, 87, 216, 62, 16, 0, 213, 62, 94, 168, 53, 63, 50, 174, 254, 62, 90, 73, 119, 63, 240, 240, 22, 191, 205, 238, 59, 190, 71, 59, 175, 190, 245, 232, 10, 63, 236, 240, 69, 190, 48, 241, 156, 190, 212, 135, 132, 191, 175, 215, 206, 190, 66, 70, 64, 63, 246, 145, 109, 62, 242, 86, 28, 63, 163, 8, 9, 191, 152, 25, 28, 62, 235, 155, 122, 61, 253, 198, 107, 190, 72, 201, 206, 188, 220, 204, 160, 190, 80, 22, 72, 190, 233, 8, 57, 62, 185, 242, 219, 190, 221, 42, 136, 62, 48, 147, 57, 63, 182, 148, 191, 62, 85, 158, 214, 61, 164, 64, 152, 61, 46, 61, 59, 191, 162, 227, 41, 191, 194, 13, 100, 191, 230, 71, 254, 189, 91, 249, 102, 62, 9, 169, 218, 190, 202, 88, 235, 62, 246, 191, 172, 190, 47, 136, 32, 63, 194, 210, 124, 60, 171, 143, 71, 190, 216, 14, 24, 63, 131, 99, 2, 63, 66, 182, 94, 191, 182, 102, 146, 191, 243, 51, 143, 190, 75, 208, 195, 62, 128, 32, 96, 190, 118, 136, 22, 59, 243, 87, 200, 60, 227, 161, 56, 191, 26, 132, 4, 191, 235, 226, 84, 62, 230, 217, 26, 191, 64, 49, 193, 189, 65, 53, 14, 63, 22, 169, 78, 191, 196, 199, 169, 190, 171, 200, 68, 191, 195, 63, 71, 191, 200, 27, 42, 191, 112, 193, 160, 190, 100, 3, 23, 63, 139, 179, 133, 61, 214, 29, 243, 190, 88, 49, 36, 63, 118, 178, 204, 62, 184, 223, 14, 191, 36, 59, 134, 187, 45, 247, 66, 59, 247, 213, 28, 62, 17, 70, 45, 191, 110, 181, 165, 62, 244, 243, 92, 190, 213, 203, 205, 62, 59, 38, 75, 63, 237, 114, 185, 189, 249, 33, 26, 63, 190, 224, 129, 190, 165, 195, 0, 63, 7, 117, 172, 190, 212, 221, 34, 63, 252, 7, 206, 189, 237, 80, 132, 63, 201, 217, 2, 190, 188, 100, 14, 63, 226, 165, 244, 190, 156, 138, 152, 190, 84, 25, 38, 190, 9, 22, 30, 191, 174, 196, 45, 63, 14, 98, 157, 190, 138, 22, 92, 190, 58, 245, 75, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 137, 1, 191, 6, 31, 53, 190, 130, 230, 226, 62, 67, 204, 79, 190, 115, 85, 109, 62, 232, 247, 97, 62, 31, 207, 67, 62, 46, 230, 163, 62, 241, 61, 145, 190, 108, 95, 87, 191, 77, 137, 154, 62, 79, 21, 222, 62, 151, 192, 75, 188, 144, 52, 248, 62, 47, 55, 107, 62, 58, 152, 218, 59, 225, 214, 30, 63, 126, 62, 5, 191, 208, 147, 135, 188, 174, 133, 228, 190, 69, 190, 4, 191, 254, 119, 215, 62, 150, 171, 35, 63, 169, 107, 205, 189, 108, 156, 126, 61, 32, 5, 240, 61, 206, 166, 47, 190, 8, 236, 71, 61, 174, 232, 252, 62, 161, 228, 51, 62, 39, 235, 16, 190, 167, 110, 17, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 126, 53, 189, 243, 154, 86, 190, 21, 208, 151, 189, 100, 64, 221, 190, 254, 56, 76, 62, 23, 254, 92, 190, 16, 140, 209, 189, 114, 15, 89, 62, 68, 144, 46, 190, 29, 239, 1, 187, 126, 146, 16, 61, 240, 37, 217, 61, 215, 34, 215, 189, 252, 153, 216, 62, 23, 176, 23, 191, 221, 134, 67, 62, 109, 113, 176, 188, 105, 169, 54, 190, 227, 212, 255, 189, 184, 216, 252, 189, 79, 237, 56, 62, 121, 216, 213, 61, 181, 17, 142, 60, 148, 244, 21, 61, 10, 39, 38, 191, 159, 193, 97, 191, 61, 243, 62, 188, 120, 40, 184, 190, 214, 201, 44, 61, 170, 168, 19, 62, 252, 176, 83, 191, 14, 65, 89, 191, 112, 73, 245, 189, 72, 205, 154, 189, 150, 30, 44, 189, 63, 244, 222, 188, 52, 157, 181, 61, 104, 137, 136, 189, 214, 19, 27, 190, 254, 143, 133, 185, 90, 142, 15, 190, 152, 172, 223, 189, 161, 60, 241, 188, 208, 160, 43, 60, 243, 105, 3, 190, 214, 152, 212, 61, 206, 156, 29, 190, 22, 122, 20, 190, 64, 30, 10, 189, 168, 209, 189, 189, 96, 212, 236, 60, 59, 145, 190, 189, 107, 209, 12, 62, 130, 3, 252, 61, 251, 154, 39, 189, 238, 182, 86, 189, 188, 103, 246, 61, 189, 184, 247, 60, 245, 222, 70, 190, 184, 170, 221, 61, 9, 241, 184, 187, 240, 156, 33, 190, 76, 168, 226, 60, 199, 180, 15, 190, 114, 185, 22, 189, 135, 97, 201, 189, 39, 49, 8, 190, 191, 106, 42, 190, 163, 186, 220, 189, 227, 112, 44, 190, 157, 168, 191, 189, 192, 29, 213, 61, 85, 19, 166, 189, 252, 59, 46, 61, 212, 229, 58, 61, 73, 24, 15, 61, 68, 207, 194, 189, 153, 97, 96, 61, 46, 59, 52, 61, 228, 85, 197, 189, 33, 243, 43, 190, 88, 80, 38, 190, 74, 210, 126, 61, 150, 202, 19, 62, 28, 3, 144, 188, 128, 145, 225, 61, 25, 130, 141, 189, 94, 8, 5, 62, 65, 217, 140, 189, 149, 61, 234, 189, 120, 27, 17, 189, 48, 129, 251, 188, 45, 106, 37, 190, 196, 227, 246, 188, 75, 241, 233, 61, 142, 104, 132, 61, 182, 248, 63, 190, 17, 220, 109, 189, 158, 117, 11, 62, 214, 23, 122, 61, 246, 241, 105, 190, 244, 192, 254, 189, 161, 161, 207, 190, 8, 67, 143, 61, 112, 179, 201, 61, 227, 71, 186, 190, 61, 40, 205, 189, 98, 70, 40, 191, 139, 254, 197, 189, 26, 44, 217, 61, 102, 154, 93, 190, 252, 105, 232, 189, 199, 210, 43, 62, 23, 194, 189, 190, 66, 86, 180, 190, 111, 90, 10, 191, 205, 29, 201, 190, 199, 232, 138, 62, 130, 245, 128, 190, 7, 98, 19, 191, 231, 147, 229, 190, 91, 111, 120, 189, 238, 68, 116, 188, 116, 207, 143, 188, 254, 152, 187, 62, 0, 10, 126, 61, 140, 55, 50, 190, 148, 60, 86, 60, 5, 68, 174, 189, 178, 17, 148, 59, 153, 42, 139, 189, 3, 202, 199, 189, 83, 137, 26, 190, 63, 248, 226, 188, 10, 31, 241, 188, 231, 1, 147, 189, 167, 228, 201, 189, 243, 51, 192, 189, 12, 170, 245, 189, 212, 244, 189, 189, 107, 110, 139, 189, 69, 249, 25, 190, 178, 15, 129, 60, 193, 42, 203, 188, 197, 97, 114, 60, 106, 203, 187, 61, 36, 235, 167, 59, 68, 142, 15, 190, 0, 240, 230, 189, 22, 249, 27, 190, 72, 210, 167, 61, 238, 147, 18, 62, 77, 41, 11, 190, 155, 84, 229, 189, 185, 211, 59, 189, 89, 56, 40, 61, 249, 1, 239, 61, 167, 91, 178, 189, 75, 71, 9, 60, 52, 73, 222, 61, 153, 116, 78, 61, 196, 140, 86, 60, 226, 217, 105, 188, 183, 117, 249, 189, 97, 189, 3, 190, 155, 227, 184, 60, 17, 235, 3, 190, 149, 252, 35, 190, 89, 190, 153, 61, 71, 247, 7, 190, 127, 235, 17, 62, 64, 189, 122, 60, 81, 242, 82, 58, 177, 239, 20, 190, 101, 110, 25, 190, 154, 53, 9, 62, 248, 131, 4, 190, 199, 147, 237, 188, 161, 149, 0, 62, 180, 124, 5, 189, 119, 41, 163, 189, 72, 41, 195, 189, 38, 169, 229, 189, 75, 101, 228, 60, 22, 159, 66, 61, 12, 227, 39, 61, 119, 149, 48, 190, 9, 105, 182, 61, 209, 143, 234, 61, 226, 179, 32, 190, 104, 111, 48, 190, 131, 127, 143, 189, 55, 27, 214, 61, 55, 189, 145, 190, 116, 183, 183, 62, 238, 247, 140, 62, 132, 17, 235, 189, 27, 77, 173, 190, 82, 132, 229, 61, 130, 122, 136, 188, 172, 17, 194, 61, 170, 165, 172, 190, 236, 195, 91, 190, 47, 38, 132, 187, 144, 87, 15, 191, 156, 10, 45, 62, 22, 95, 132, 62, 30, 125, 229, 190, 24, 102, 53, 62, 134, 115, 44, 189, 199, 9, 178, 59, 109, 9, 188, 61, 11, 162, 67, 191, 130, 221, 252, 60, 246, 130, 179, 61, 6, 175, 9, 62, 198, 54, 137, 62, 17, 43, 209, 61, 248, 67, 88, 190, 185, 185, 87, 190, 255, 177, 253, 61, 82, 238, 80, 62, 242, 73, 157, 62, 218, 24, 116, 62, 211, 239, 204, 189, 49, 213, 188, 189, 111, 99, 164, 189, 253, 95, 212, 189, 181, 200, 70, 61, 193, 92, 134, 61, 222, 245, 216, 189, 33, 237, 224, 188, 217, 187, 255, 61, 215, 25, 167, 58, 16, 187, 50, 190, 36, 173, 215, 189, 150, 93, 26, 190, 7, 64, 83, 189, 216, 123, 208, 60, 49, 216, 208, 189, 224, 106, 138, 189, 146, 178, 9, 62, 34, 80, 175, 189, 249, 255, 79, 190, 199, 19, 190, 61, 136, 67, 11, 190, 227, 26, 33, 188, 13, 72, 44, 190, 135, 244, 172, 61, 195, 96, 28, 190, 41, 120, 234, 61, 138, 66, 160, 189, 78, 39, 14, 60, 45, 73, 87, 189, 229, 115, 33, 60, 108, 200, 33, 62, 131, 110, 151, 189, 215, 199, 172, 189, 30, 119, 199, 61, 92, 230, 241, 189, 8, 102, 190, 61, 101, 34, 199, 189, 134, 72, 248, 60, 189, 71, 243, 189, 86, 104, 135, 190, 49, 125, 125, 189, 126, 29, 7, 189, 50, 90, 172, 61, 88, 50, 162, 189, 61, 182, 111, 190, 21, 139, 21, 62, 125, 131, 109, 62, 183, 148, 188, 62, 121, 132, 44, 190, 138, 141, 121, 189, 91, 95, 195, 190, 219, 107, 137, 188, 80, 14, 175, 188, 231, 103, 213, 61, 167, 99, 171, 189, 102, 213, 207, 61, 16, 55, 131, 61, 159, 178, 248, 189, 83, 105, 164, 61, 235, 195, 30, 61, 149, 1, 45, 188, 155, 196, 62, 61, 92, 123, 125, 189, 177, 92, 19, 61, 195, 53, 223, 59, 77, 227, 187, 189, 210, 110, 3, 189, 155, 165, 175, 61, 14, 141, 216, 60, 234, 40, 92, 62, 195, 124, 178, 61, 248, 255, 53, 189, 137, 76, 18, 190, 189, 21, 135, 61, 96, 51, 207, 188, 153, 226, 94, 190, 216, 37, 20, 62, 97, 115, 198, 188, 21, 206, 186, 61, 164, 18, 115, 62, 92, 31, 241, 189, 133, 152, 89, 190, 198, 182, 138, 190, 93, 209, 145, 188, 65, 30, 15, 190, 134, 76, 177, 61, 249, 98, 93, 62, 192, 171, 47, 62, 176, 5, 60, 189, 36, 4, 100, 61, 101, 53, 202, 188, 109, 172, 48, 62, 128, 173, 74, 189, 45, 65, 28, 62, 20, 98, 138, 187, 0, 246, 81, 188, 185, 111, 94, 190, 182, 115, 168, 58, 205, 168, 21, 62, 33, 149, 213, 189, 212, 164, 51, 190, 27, 155, 94, 190, 41, 177, 201, 189, 8, 108, 19, 61, 110, 197, 205, 61, 1, 245, 91, 188, 24, 134, 146, 61, 233, 64, 0, 62, 11, 121, 62, 190, 159, 105, 125, 61, 40, 183, 71, 60, 20, 83, 47, 62, 65, 68, 181, 189, 4, 212, 43, 62, 23, 73, 60, 190, 210, 93, 136, 189, 135, 213, 235, 61, 191, 52, 219, 188, 20, 174, 152, 189, 71, 89, 30, 190, 72, 161, 177, 61, 63, 153, 177, 189, 122, 40, 236, 61, 6, 1, 78, 190, 191, 64, 186, 61, 79, 237, 26, 190, 39, 119, 232, 61, 118, 143, 135, 188, 30, 176, 183, 61, 144, 140, 190, 58, 9, 53, 129, 61, 186, 166, 3, 62, 55, 241, 150, 60, 191, 232, 163, 190, 130, 199, 198, 188, 221, 150, 5, 62, 152, 182, 36, 62, 103, 131, 141, 61, 216, 37, 105, 62, 202, 44, 24, 62, 28, 95, 189, 190, 119, 147, 53, 61, 190, 139, 234, 60, 223, 55, 99, 62, 41, 189, 140, 61, 37, 233, 152, 62, 102, 43, 144, 188, 206, 113, 184, 61, 223, 101, 73, 190, 242, 236, 17, 190, 190, 150, 186, 190, 199, 21, 74, 61, 77, 225, 203, 188, 20, 220, 237, 188, 141, 78, 60, 62, 34, 247, 198, 190, 39, 188, 37, 60, 83, 85, 21, 188, 64, 68, 55, 190, 245, 84, 67, 61, 22, 247, 186, 187, 119, 59, 170, 189, 54, 48, 4, 190, 150, 33, 4, 62, 198, 87, 155, 189, 218, 210, 168, 61, 33, 185, 28, 62, 224, 32, 40, 190, 253, 171, 180, 188, 252, 58, 34, 190, 114, 21, 9, 190, 201, 89, 46, 62, 5, 89, 25, 189, 56, 167, 134, 60, 102, 38, 171, 189, 174, 121, 132, 61, 134, 124, 73, 188, 46, 186, 15, 62, 125, 94, 204, 61, 196, 91, 198, 189, 89, 73, 32, 189, 64, 130, 216, 189, 144, 23, 27, 62, 56, 65, 5, 190, 22, 184, 37, 189, 136, 118, 239, 189, 201, 37, 199, 189, 218, 1, 30, 62, 193, 56, 120, 61, 63, 102, 212, 61, 195, 67, 63, 61, 69, 239, 204, 190, 2, 187, 102, 62, 45, 239, 214, 190, 188, 98, 81, 61, 137, 24, 78, 188, 43, 41, 246, 61, 12, 109, 15, 191, 128, 61, 134, 189, 18, 125, 172, 61, 110, 74, 61, 62, 214, 155, 18, 61, 87, 228, 127, 62, 107, 100, 118, 62, 14, 227, 155, 189, 102, 143, 229, 189, 152, 0, 40, 190, 208, 61, 59, 190, 104, 230, 169, 189, 233, 220, 158, 61, 216, 170, 56, 61, 8, 144, 195, 61, 136, 65, 125, 190, 113, 101, 16, 190, 183, 73, 57, 190, 162, 246, 58, 189, 102, 190, 67, 62, 199, 96, 6, 190, 73, 155, 100, 189, 139, 148, 214, 187, 245, 36, 34, 190, 212, 187, 97, 189, 50, 46, 56, 61, 1, 129, 73, 190, 52, 123, 62, 62, 237, 33, 35, 191, 130, 210, 47, 60, 22, 25, 251, 187, 60, 170, 42, 62, 88, 127, 156, 189, 55, 155, 39, 62, 194, 239, 118, 190, 68, 66, 122, 62, 213, 197, 107, 61, 175, 10, 8, 190, 1, 6, 160, 61, 108, 69, 159, 62, 110, 188, 201, 188, 119, 205, 120, 62, 33, 14, 236, 189, 130, 30, 124, 190, 176, 65, 204, 190, 17, 152, 7, 191, 111, 202, 110, 188, 168, 199, 122, 62, 84, 198, 146, 189, 225, 108, 158, 189, 149, 78, 143, 190, 194, 64, 123, 189, 67, 72, 191, 61, 51, 219, 137, 62, 84, 191, 193, 60, 42, 18, 91, 189, 217, 44, 59, 60, 191, 2, 227, 189, 72, 215, 14, 191, 133, 151, 73, 62, 162, 240, 168, 190, 173, 222, 129, 190, 248, 103, 178, 61, 179, 202, 252, 61, 215, 171, 114, 61, 124, 10, 134, 62, 0, 214, 9, 190, 241, 31, 159, 61, 143, 20, 66, 62, 8, 12, 183, 61, 187, 145, 134, 62, 163, 68, 108, 62, 20, 125, 236, 189, 158, 82, 111, 62, 205, 130, 77, 62, 151, 249, 211, 190, 44, 188, 3, 191, 236, 95, 149, 190, 155, 230, 12, 62, 186, 29, 224, 189, 16, 219, 242, 188, 178, 135, 194, 189, 81, 40, 100, 190, 49, 150, 18, 191, 185, 183, 181, 62, 185, 157, 62, 62, 141, 183, 192, 62, 95, 223, 243, 60, 50, 66, 238, 190, 114, 213, 253, 190, 69, 121, 14, 191, 255, 214, 201, 62, 11, 32, 86, 61, 81, 48, 147, 190, 253, 157, 176, 61, 4, 252, 170, 62, 183, 200, 157, 190, 64, 25, 170, 59, 25, 101, 209, 190, 67, 254, 134, 62, 222, 230, 10, 62, 72, 199, 238, 190, 65, 193, 146, 61, 223, 181, 205, 61, 218, 149, 188, 60, 74, 145, 43, 190, 250, 166, 144, 186, 250, 246, 176, 190, 197, 228, 33, 191, 224, 23, 39, 191, 69, 187, 98, 61, 134, 145, 131, 188, 24, 14, 177, 189, 124, 103, 229, 189, 31, 118, 214, 60, 32, 78, 234, 61, 218, 132, 176, 62, 143, 86, 148, 61, 80, 205, 210, 61, 63, 205, 46, 61, 5, 86, 5, 190, 95, 163, 123, 189, 11, 107, 113, 62, 234, 232, 190, 188, 213, 33, 190, 61, 185, 37, 153, 62, 8, 68, 218, 189, 250, 57, 212, 189, 186, 39, 203, 61, 2, 91, 201, 61, 160, 108, 148, 61, 2, 84, 48, 61, 170, 57, 157, 61, 222, 98, 48, 61, 184, 33, 40, 189, 17, 56, 3, 189, 112, 165, 230, 61, 184, 136, 81, 190, 250, 186, 185, 60, 151, 54, 103, 190, 196, 234, 31, 189, 44, 244, 126, 190, 80, 152, 196, 188, 20, 218, 210, 61, 121, 49, 42, 60, 130, 158, 103, 62, 102, 142, 223, 62, 146, 161, 114, 62, 15, 249, 98, 190, 180, 53, 15, 188, 74, 224, 27, 62, 169, 221, 214, 61, 61, 176, 254, 62, 159, 161, 32, 62, 52, 211, 173, 188, 55, 77, 0, 62, 245, 101, 49, 60, 47, 221, 255, 61, 111, 100, 82, 62, 248, 16, 168, 62, 209, 46, 249, 188, 176, 71, 224, 61, 61, 123, 165, 189, 43, 11, 132, 190, 219, 146, 187, 61, 212, 204, 193, 60, 203, 164, 74, 62, 66, 27, 201, 190, 30, 70, 63, 190, 65, 13, 19, 62, 254, 196, 122, 62, 60, 145, 155, 188, 92, 123, 199, 189, 61, 143, 134, 190, 62, 192, 14, 189, 15, 16, 29, 190, 147, 133, 42, 190, 59, 98, 146, 189, 149, 169, 129, 61, 118, 205, 248, 190, 178, 162, 229, 188, 46, 198, 3, 62, 105, 120, 105, 62, 230, 186, 27, 60, 27, 151, 104, 60, 126, 78, 161, 190, 44, 51, 37, 191, 229, 8, 209, 62, 144, 59, 16, 61, 95, 26, 160, 190, 168, 96, 219, 61, 196, 65, 174, 62, 155, 180, 195, 190, 205, 128, 223, 60, 116, 78, 223, 190, 21, 168, 75, 62, 91, 33, 96, 62, 80, 30, 237, 190, 193, 147, 59, 62, 203, 129, 162, 189, 222, 100, 1, 62, 140, 11, 38, 190, 176, 155, 12, 62, 38, 251, 221, 190, 118, 15, 13, 191, 55, 32, 1, 191, 154, 181, 120, 62, 184, 95, 200, 61, 255, 89, 229, 61, 4, 41, 141, 188, 194, 218, 191, 189, 212, 144, 1, 188, 190, 140, 165, 62, 35, 179, 78, 62, 71, 255, 240, 61, 29, 107, 91, 190, 27, 92, 169, 190, 231, 232, 45, 186, 184, 57, 120, 62, 126, 0, 121, 62, 101, 214, 145, 61, 85, 205, 84, 190, 96, 221, 154, 62, 129, 0, 72, 62, 37, 104, 175, 60, 2, 26, 201, 187, 241, 218, 194, 190, 195, 50, 41, 58, 244, 196, 179, 190, 101, 70, 109, 62, 30, 236, 120, 62, 187, 55, 96, 60, 79, 202, 37, 61, 184, 105, 187, 61, 52, 86, 134, 60, 168, 172, 196, 190, 132, 52, 170, 190, 0, 146, 175, 190, 248, 163, 236, 189, 123, 16, 127, 187, 185, 233, 98, 189, 90, 161, 50, 62, 114, 190, 102, 61, 127, 235, 162, 61, 86, 104, 227, 190, 120, 230, 165, 62, 122, 13, 189, 190, 247, 98, 25, 191, 124, 248, 203, 61, 68, 111, 238, 61, 241, 17, 139, 189, 196, 183, 40, 61, 194, 171, 161, 62, 58, 0, 53, 62, 148, 207, 140, 190, 189, 52, 49, 62, 137, 83, 54, 190, 156, 203, 185, 190, 173, 154, 69, 62, 129, 147, 63, 189, 107, 252, 107, 61, 172, 224, 74, 191, 169, 84, 122, 190, 114, 203, 82, 62, 176, 207, 39, 62, 167, 255, 11, 191, 19, 198, 121, 61, 41, 181, 214, 190, 235, 142, 3, 191, 9, 140, 21, 191, 170, 99, 49, 190, 13, 158, 254, 61, 6, 197, 34, 188, 146, 12, 216, 61, 68, 209, 176, 189, 38, 223, 217, 61, 230, 104, 169, 189, 195, 135, 60, 62, 176, 220, 66, 62, 152, 205, 76, 62, 133, 47, 150, 61, 99, 40, 209, 61, 211, 246, 107, 190, 229, 60, 221, 61, 196, 190, 155, 62, 93, 222, 166, 62, 147, 161, 205, 61, 47, 107, 249, 61, 97, 121, 31, 62, 181, 91, 213, 61, 78, 5, 148, 188, 104, 247, 158, 188, 31, 29, 231, 187, 200, 87, 249, 189, 111, 162, 156, 60, 118, 180, 94, 190, 206, 247, 38, 190, 9, 50, 95, 190, 235, 170, 249, 61, 133, 212, 153, 190, 199, 27, 148, 190, 193, 131, 152, 190, 252, 151, 104, 190, 80, 54, 239, 190, 201, 68, 142, 190, 190, 116, 52, 61, 111, 171, 47, 62, 137, 104, 129, 190, 51, 5, 169, 60, 28, 150, 180, 61, 63, 142, 196, 59, 33, 118, 8, 62, 22, 16, 49, 62, 187, 135, 80, 190, 151, 23, 0, 61, 68, 80, 12, 190, 219, 141, 140, 61, 223, 171, 48, 62, 160, 186, 250, 189, 189, 137, 127, 61, 159, 44, 199, 189, 243, 5, 98, 189, 73, 132, 131, 189, 113, 10, 206, 61, 68, 83, 39, 190, 125, 73, 161, 61, 31, 12, 194, 189, 246, 205, 90, 189, 253, 191, 17, 190, 157, 133, 131, 189, 204, 21, 110, 61, 242, 192, 117, 61, 36, 245, 117, 61, 52, 72, 40, 190, 206, 68, 140, 189, 93, 239, 68, 61, 39, 166, 20, 190, 70, 232, 168, 61, 105, 187, 12, 190, 131, 132, 170, 189, 189, 199, 130, 59, 154, 76, 198, 189, 81, 232, 97, 61, 149, 16, 106, 189, 108, 125, 49, 62, 104, 152, 250, 189, 45, 4, 246, 60, 95, 115, 177, 190, 107, 180, 238, 61, 157, 128, 62, 62, 233, 219, 69, 189, 101, 121, 144, 190, 181, 142, 69, 62, 184, 97, 51, 62, 58, 96, 86, 61, 3, 105, 15, 190, 94, 152, 249, 189, 236, 240, 80, 190, 231, 146, 61, 190, 165, 34, 217, 59, 53, 83, 8, 62, 179, 212, 37, 190, 67, 227, 130, 62, 71, 210, 4, 61, 191, 58, 41, 190, 252, 114, 164, 190, 36, 173, 171, 190, 19, 104, 67, 59, 98, 80, 241, 61, 253, 212, 165, 61, 5, 3, 64, 62, 184, 134, 84, 62, 201, 36, 15, 189, 187, 24, 232, 188, 169, 2, 249, 61, 55, 123, 71, 62, 224, 26, 81, 62, 24, 157, 18, 189, 83, 237, 1, 190, 140, 60, 61, 62, 35, 250, 19, 191, 236, 28, 202, 59, 18, 41, 223, 61, 216, 244, 49, 62, 118, 199, 46, 191, 69, 42, 218, 60, 177, 136, 81, 61, 116, 180, 194, 61, 66, 10, 201, 189, 61, 64, 147, 62, 200, 44, 55, 62, 135, 164, 252, 189, 137, 32, 131, 61, 219, 45, 25, 190, 250, 206, 58, 190, 65, 122, 61, 189, 38, 6, 121, 61, 217, 168, 193, 59, 154, 219, 149, 188, 254, 48, 2, 190, 67, 12, 232, 189, 161, 60, 28, 190, 107, 211, 89, 189, 106, 63, 138, 189, 52, 173, 82, 59, 96, 13, 182, 61, 128, 186, 126, 189, 31, 178, 230, 189, 25, 23, 34, 61, 168, 251, 51, 190, 66, 29, 23, 190, 19, 146, 38, 189, 11, 55, 201, 62, 144, 79, 66, 62, 133, 9, 207, 190, 174, 235, 62, 61, 104, 42, 115, 190, 113, 73, 160, 190, 169, 113, 59, 62, 54, 220, 22, 190, 70, 74, 52, 62, 126, 217, 252, 190, 174, 129, 155, 61, 104, 91, 251, 189, 220, 32, 73, 61, 69, 157, 14, 191, 183, 252, 185, 62, 229, 73, 167, 190, 221, 27, 22, 191, 200, 133, 213, 190, 156, 58, 54, 190, 248, 132, 34, 61, 238, 0, 41, 62, 105, 205, 229, 189, 233, 214, 160, 61, 70, 154, 146, 188, 86, 37, 107, 61, 77, 73, 216, 61, 58, 3, 46, 62, 48, 131, 60, 190, 243, 229, 0, 62, 250, 107, 216, 189, 36, 227, 89, 190, 0, 90, 66, 188, 125, 216, 120, 62, 252, 237, 143, 62, 252, 92, 140, 62, 225, 181, 215, 61, 153, 95, 188, 188, 18, 135, 130, 62, 51, 64, 35, 62, 96, 232, 55, 60, 52, 136, 61, 188, 81, 162, 158, 62, 159, 174, 34, 62, 207, 7, 4, 191, 96, 145, 130, 61, 11, 34, 194, 61, 190, 162, 124, 62, 218, 127, 20, 190, 229, 251, 245, 61, 156, 201, 142, 190, 131, 81, 87, 60, 211, 91, 114, 190, 215, 10, 190, 190, 11, 221, 118, 190, 95, 232, 43, 62, 182, 221, 208, 189, 171, 127, 56, 190, 238, 135, 100, 62, 38, 173, 236, 189, 153, 23, 32, 62, 29, 150, 160, 189, 39, 211, 126, 189, 134, 3, 229, 60, 253, 221, 246, 189, 110, 139, 9, 62, 51, 202, 251, 61, 240, 69, 50, 60, 69, 9, 110, 188, 16, 206, 31, 61, 202, 13, 158, 60, 212, 30, 78, 190, 61, 97, 187, 189, 157, 201, 228, 187, 58, 141, 235, 60, 25, 196, 53, 190, 10, 209, 50, 59, 101, 115, 34, 62, 94, 218, 160, 61, 250, 17, 75, 62, 0, 187, 210, 188, 141, 248, 112, 190, 66, 127, 231, 190, 136, 89, 46, 61, 197, 250, 65, 62, 130, 42, 60, 62, 132, 142, 13, 62, 40, 57, 143, 189, 122, 231, 82, 189, 138, 192, 142, 61, 121, 122, 14, 188, 76, 141, 133, 62, 247, 145, 141, 188, 242, 64, 173, 61, 241, 147, 142, 60, 143, 233, 30, 62, 240, 38, 185, 190, 24, 226, 129, 62, 10, 46, 193, 62, 191, 61, 87, 190, 57, 107, 139, 190, 44, 35, 135, 62, 75, 134, 71, 61, 55, 16, 71, 62, 5, 172, 11, 191, 235, 65, 109, 190, 44, 139, 51, 190, 120, 126, 150, 190, 172, 184, 138, 60, 112, 199, 190, 61, 252, 128, 149, 190, 22, 80, 15, 62, 153, 30, 236, 189, 11, 103, 168, 188, 225, 63, 83, 62, 250, 102, 18, 191, 208, 82, 141, 61, 145, 50, 162, 62, 74, 224, 17, 61, 255, 196, 186, 62, 105, 37, 45, 62, 210, 53, 138, 189, 121, 29, 219, 190, 43, 125, 51, 62, 134, 211, 111, 62, 38, 202, 115, 62, 22, 96, 135, 62, 108, 52, 242, 190, 131, 214, 21, 61, 198, 186, 142, 61, 189, 78, 121, 62, 239, 241, 186, 61, 236, 140, 29, 190, 28, 72, 80, 190, 104, 104, 131, 60, 125, 213, 179, 62, 247, 230, 149, 190, 136, 56, 110, 62, 216, 113, 88, 189, 209, 163, 87, 62, 146, 104, 156, 190, 254, 83, 137, 189, 164, 243, 110, 62, 244, 254, 38, 189, 0, 106, 223, 188, 38, 193, 236, 61, 115, 213, 187, 62, 150, 75, 131, 62, 105, 152, 144, 190, 75, 115, 119, 190, 33, 30, 132, 190, 145, 0, 122, 61, 101, 3, 42, 190, 81, 59, 10, 61, 106, 214, 7, 62, 18, 36, 48, 61, 76, 95, 216, 61, 201, 249, 75, 62, 174, 250, 40, 61, 20, 250, 91, 190, 106, 13, 36, 190, 214, 80, 42, 189, 34, 20, 201, 190, 200, 5, 29, 62, 163, 232, 206, 60, 156, 253, 102, 189, 100, 70, 29, 189, 74, 57, 81, 190, 243, 73, 127, 61, 10, 104, 147, 62, 232, 169, 151, 189, 135, 130, 159, 189, 128, 29, 142, 62, 75, 146, 147, 190, 199, 219, 238, 61, 33, 197, 164, 59, 58, 101, 214, 189, 16, 43, 197, 190, 77, 3, 62, 190, 49, 4, 231, 61, 118, 31, 58, 61, 163, 115, 107, 190, 123, 248, 101, 62, 154, 197, 20, 191, 4, 165, 12, 191, 30, 57, 130, 62, 166, 200, 70, 190, 36, 91, 186, 62, 69, 46, 234, 189, 206, 42, 146, 191, 2, 166, 52, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 166, 72, 62, 82, 80, 119, 60, 132, 43, 19, 190, 142, 115, 86, 62, 105, 192, 99, 189, 5, 17, 36, 190, 12, 247, 165, 62, 83, 235, 163, 189, 56, 143, 165, 62, 66, 65, 251, 61, 146, 236, 93, 190, 24, 133, 119, 61, 239, 77, 32, 190, 43, 57, 196, 190, 240, 61, 113, 190, 114, 83, 3, 62, 25, 71, 157, 188, 250, 58, 217, 61, 7, 200, 133, 61, 234, 201, 185, 189, 105, 85, 163, 189, 45, 54, 58, 187, 43, 224, 71, 62, 121, 169, 162, 188, 97, 129, 108, 62, 236, 22, 201, 190, 155, 126, 25, 62, 251, 213, 153, 60, 99, 186, 141, 62, 163, 87, 35, 62, 193, 112, 196, 60, 120, 247, 95, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 161, 32, 191, 215, 49, 199, 189, 41, 233, 99, 189, 1, 169, 10, 191, 79, 129, 184, 61, 78, 53, 245, 189, 54, 108, 90, 63, 50, 136, 148, 186, 193, 34, 181, 188, 36, 3, 183, 188, 26, 204, 20, 62, 210, 135, 54, 62, 170, 60, 14, 190, 140, 116, 226, 62, 102, 138, 43, 63, 99, 108, 33, 191, 122, 157, 187, 190, 201, 186, 120, 62, 82, 182, 16, 62, 171, 35, 179, 190, 90, 133, 129, 190, 228, 171, 17, 190, 252, 33, 154, 62, 167, 14, 204, 61, 78, 28, 185, 62, 94, 254, 138, 62, 102, 208, 33, 190, 79, 126, 139, 62, 161, 48, 152, 60, 231, 1, 24, 63, 41, 186, 161, 62, 233, 234, 5, 191, 57, 114, 145, 60, 89, 147, 80, 189, 105, 160, 175, 60, 25, 131, 174, 189, 106, 231, 43, 190, 152, 41, 242, 189, 163, 122, 46, 60, 111, 84, 205, 61, 96, 155, 44, 190, 99, 184, 222, 189, 182, 184, 29, 190, 189, 29, 172, 61, 65, 61, 146, 61, 12, 58, 160, 62, 173, 68, 153, 189, 195, 247, 99, 62, 61, 75, 46, 61, 76, 4, 80, 190, 173, 151, 189, 190, 101, 157, 16, 61, 76, 160, 54, 62, 106, 208, 59, 190, 165, 50, 214, 190, 38, 107, 40, 62, 251, 96, 66, 190, 109, 40, 177, 62, 60, 70, 167, 190, 253, 77, 101, 190, 198, 173, 15, 190, 133, 52, 52, 62, 218, 227, 203, 61, 26, 181, 131, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 122, 75, 189, 66, 25, 1, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {80, 41, 215, 191, 44, 83, 46, 62, 28, 70, 169, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {51, 236, 56, 191, 249, 103, 11, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0015/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}