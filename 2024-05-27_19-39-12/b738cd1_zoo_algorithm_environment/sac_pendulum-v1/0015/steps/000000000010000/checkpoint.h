// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 189, 75, 191, 161, 8, 255, 190, 83, 113, 210, 62, 35, 173, 228, 62, 12, 243, 74, 63, 161, 12, 250, 62, 64, 131, 115, 63, 14, 76, 52, 191, 130, 168, 13, 190, 160, 246, 149, 190, 181, 121, 28, 63, 46, 225, 38, 190, 9, 182, 100, 190, 117, 237, 180, 191, 113, 23, 148, 190, 106, 224, 74, 63, 255, 6, 128, 62, 204, 117, 26, 63, 141, 218, 21, 191, 63, 119, 6, 62, 4, 88, 151, 61, 62, 246, 136, 190, 198, 198, 231, 189, 10, 36, 158, 190, 179, 243, 50, 189, 64, 203, 56, 62, 107, 130, 231, 190, 94, 65, 42, 63, 111, 245, 59, 63, 24, 44, 192, 62, 128, 105, 24, 60, 113, 209, 127, 187, 188, 245, 45, 191, 143, 35, 245, 190, 181, 229, 158, 191, 50, 162, 12, 190, 41, 179, 148, 62, 156, 97, 220, 190, 209, 159, 226, 62, 81, 140, 179, 190, 205, 128, 27, 63, 190, 25, 180, 61, 46, 144, 29, 190, 171, 112, 57, 63, 236, 7, 236, 62, 120, 99, 64, 191, 35, 122, 191, 191, 172, 148, 155, 190, 153, 59, 148, 62, 117, 200, 181, 190, 134, 254, 239, 59, 168, 221, 178, 62, 138, 20, 88, 191, 179, 187, 1, 191, 155, 238, 60, 62, 74, 34, 76, 191, 141, 165, 27, 190, 162, 17, 49, 63, 96, 189, 108, 191, 49, 190, 149, 190, 64, 106, 56, 191, 150, 126, 129, 191, 212, 166, 25, 191, 241, 230, 173, 190, 202, 23, 48, 63, 193, 106, 149, 61, 18, 215, 13, 191, 234, 198, 107, 63, 208, 0, 166, 62, 127, 81, 20, 191, 97, 100, 141, 190, 108, 200, 234, 189, 120, 78, 18, 62, 46, 48, 67, 191, 65, 190, 135, 62, 13, 159, 88, 190, 252, 57, 196, 62, 156, 197, 70, 63, 255, 252, 58, 190, 130, 172, 40, 63, 18, 217, 94, 190, 80, 2, 23, 63, 219, 218, 151, 190, 46, 246, 28, 63, 83, 227, 25, 190, 99, 164, 138, 63, 80, 178, 16, 190, 52, 108, 5, 63, 66, 93, 32, 191, 55, 0, 142, 190, 172, 225, 90, 190, 227, 33, 252, 190, 210, 186, 41, 63, 156, 101, 209, 190, 243, 94, 37, 190, 100, 104, 70, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 148, 128, 190, 103, 6, 73, 190, 60, 39, 222, 62, 119, 232, 158, 190, 190, 63, 72, 62, 199, 117, 57, 62, 167, 245, 89, 62, 133, 185, 100, 62, 250, 107, 160, 190, 80, 196, 119, 191, 37, 244, 163, 62, 244, 158, 226, 62, 176, 139, 174, 189, 252, 162, 18, 63, 126, 247, 25, 62, 39, 171, 186, 61, 235, 219, 26, 63, 192, 36, 15, 191, 115, 126, 95, 61, 184, 247, 219, 190, 202, 72, 27, 191, 148, 29, 4, 63, 140, 191, 0, 63, 39, 245, 127, 190, 210, 18, 78, 61, 82, 137, 191, 61, 104, 21, 229, 189, 186, 193, 155, 188, 73, 106, 2, 63, 221, 106, 7, 62, 138, 195, 232, 189, 87, 80, 93, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 221, 14, 62, 118, 58, 175, 190, 0, 172, 54, 190, 49, 170, 225, 190, 157, 145, 64, 62, 82, 160, 134, 190, 100, 163, 198, 60, 109, 122, 98, 62, 78, 170, 21, 190, 29, 239, 1, 187, 197, 56, 245, 60, 208, 204, 8, 62, 47, 122, 45, 190, 149, 138, 227, 62, 137, 202, 55, 191, 66, 173, 119, 62, 88, 239, 176, 189, 188, 18, 74, 190, 13, 109, 105, 190, 241, 47, 149, 190, 223, 205, 95, 62, 151, 235, 236, 61, 159, 197, 177, 189, 32, 131, 81, 62, 121, 11, 26, 191, 253, 176, 154, 191, 46, 187, 187, 58, 178, 13, 171, 190, 143, 189, 4, 61, 52, 166, 193, 61, 175, 142, 54, 191, 217, 234, 135, 191, 112, 73, 245, 189, 72, 205, 154, 189, 150, 30, 44, 189, 63, 244, 222, 188, 52, 157, 181, 61, 104, 137, 136, 189, 214, 19, 27, 190, 254, 143, 133, 185, 90, 142, 15, 190, 152, 172, 223, 189, 161, 60, 241, 188, 208, 160, 43, 60, 243, 105, 3, 190, 214, 152, 212, 61, 206, 156, 29, 190, 22, 122, 20, 190, 64, 30, 10, 189, 168, 209, 189, 189, 96, 212, 236, 60, 59, 145, 190, 189, 107, 209, 12, 62, 130, 3, 252, 61, 251, 154, 39, 189, 238, 182, 86, 189, 188, 103, 246, 61, 189, 184, 247, 60, 245, 222, 70, 190, 184, 170, 221, 61, 9, 241, 184, 187, 240, 156, 33, 190, 76, 168, 226, 60, 199, 180, 15, 190, 114, 185, 22, 189, 135, 97, 201, 189, 39, 49, 8, 190, 191, 106, 42, 190, 163, 186, 220, 189, 227, 112, 44, 190, 157, 168, 191, 189, 192, 29, 213, 61, 85, 19, 166, 189, 252, 59, 46, 61, 212, 229, 58, 61, 73, 24, 15, 61, 68, 207, 194, 189, 153, 97, 96, 61, 46, 59, 52, 61, 228, 85, 197, 189, 33, 243, 43, 190, 88, 80, 38, 190, 74, 210, 126, 61, 150, 202, 19, 62, 28, 3, 144, 188, 128, 145, 225, 61, 25, 130, 141, 189, 94, 8, 5, 62, 65, 217, 140, 189, 149, 61, 234, 189, 120, 27, 17, 189, 48, 129, 251, 188, 45, 106, 37, 190, 196, 227, 246, 188, 75, 241, 233, 61, 142, 104, 132, 61, 82, 219, 16, 61, 26, 165, 161, 189, 80, 63, 74, 62, 222, 33, 66, 62, 80, 64, 249, 190, 183, 120, 142, 189, 63, 116, 51, 190, 40, 219, 120, 61, 177, 72, 154, 61, 122, 197, 63, 191, 60, 103, 241, 189, 252, 3, 55, 191, 29, 16, 158, 188, 129, 40, 112, 62, 52, 250, 150, 189, 250, 235, 222, 190, 176, 61, 132, 62, 200, 44, 246, 190, 153, 33, 193, 190, 173, 207, 41, 191, 238, 30, 215, 190, 114, 9, 207, 62, 189, 65, 195, 189, 188, 241, 225, 190, 147, 166, 130, 190, 220, 85, 253, 61, 206, 101, 3, 61, 190, 22, 107, 61, 101, 111, 222, 62, 197, 215, 224, 61, 252, 159, 99, 189, 221, 146, 7, 62, 5, 68, 174, 189, 178, 17, 148, 59, 153, 42, 139, 189, 3, 202, 199, 189, 83, 137, 26, 190, 63, 248, 226, 188, 10, 31, 241, 188, 231, 1, 147, 189, 167, 228, 201, 189, 243, 51, 192, 189, 12, 170, 245, 189, 212, 244, 189, 189, 107, 110, 139, 189, 69, 249, 25, 190, 178, 15, 129, 60, 193, 42, 203, 188, 197, 97, 114, 60, 106, 203, 187, 61, 36, 235, 167, 59, 68, 142, 15, 190, 0, 240, 230, 189, 22, 249, 27, 190, 72, 210, 167, 61, 238, 147, 18, 62, 77, 41, 11, 190, 155, 84, 229, 189, 185, 211, 59, 189, 89, 56, 40, 61, 249, 1, 239, 61, 167, 91, 178, 189, 75, 71, 9, 60, 52, 73, 222, 61, 153, 116, 78, 61, 196, 140, 86, 60, 226, 217, 105, 188, 183, 117, 249, 189, 97, 189, 3, 190, 155, 227, 184, 60, 17, 235, 3, 190, 149, 252, 35, 190, 89, 190, 153, 61, 71, 247, 7, 190, 127, 235, 17, 62, 64, 189, 122, 60, 81, 242, 82, 58, 177, 239, 20, 190, 101, 110, 25, 190, 154, 53, 9, 62, 248, 131, 4, 190, 199, 147, 237, 188, 161, 149, 0, 62, 180, 124, 5, 189, 119, 41, 163, 189, 72, 41, 195, 189, 38, 169, 229, 189, 75, 101, 228, 60, 22, 159, 66, 61, 12, 227, 39, 61, 119, 149, 48, 190, 9, 105, 182, 61, 209, 143, 234, 61, 226, 179, 32, 190, 104, 111, 48, 190, 131, 127, 143, 189, 184, 248, 151, 61, 17, 112, 147, 190, 14, 174, 164, 62, 87, 58, 94, 62, 93, 120, 16, 190, 95, 153, 175, 190, 228, 9, 239, 61, 159, 109, 242, 188, 196, 251, 20, 62, 167, 156, 240, 190, 202, 162, 125, 190, 57, 81, 41, 62, 137, 120, 15, 191, 217, 145, 75, 62, 17, 53, 127, 62, 17, 157, 235, 190, 47, 186, 34, 62, 243, 38, 101, 189, 243, 9, 178, 61, 77, 127, 97, 60, 0, 247, 106, 191, 85, 106, 93, 61, 11, 100, 171, 61, 43, 47, 35, 62, 123, 217, 123, 62, 161, 62, 180, 61, 213, 28, 98, 190, 212, 238, 93, 190, 94, 254, 12, 62, 107, 112, 21, 62, 173, 87, 150, 62, 180, 164, 115, 62, 211, 239, 204, 189, 49, 213, 188, 189, 111, 99, 164, 189, 253, 95, 212, 189, 181, 200, 70, 61, 193, 92, 134, 61, 222, 245, 216, 189, 33, 237, 224, 188, 217, 187, 255, 61, 215, 25, 167, 58, 16, 187, 50, 190, 36, 173, 215, 189, 150, 93, 26, 190, 7, 64, 83, 189, 216, 123, 208, 60, 49, 216, 208, 189, 224, 106, 138, 189, 146, 178, 9, 62, 34, 80, 175, 189, 249, 255, 79, 190, 199, 19, 190, 61, 136, 67, 11, 190, 227, 26, 33, 188, 13, 72, 44, 190, 135, 244, 172, 61, 195, 96, 28, 190, 41, 120, 234, 61, 138, 66, 160, 189, 78, 39, 14, 60, 45, 73, 87, 189, 229, 115, 33, 60, 108, 200, 33, 62, 30, 250, 144, 189, 29, 13, 237, 189, 115, 163, 153, 61, 87, 37, 28, 190, 164, 120, 35, 59, 58, 21, 200, 189, 37, 49, 132, 61, 69, 13, 131, 189, 179, 35, 141, 190, 66, 226, 158, 189, 92, 210, 158, 60, 45, 38, 5, 62, 227, 142, 138, 189, 198, 193, 129, 190, 245, 64, 1, 62, 219, 77, 79, 62, 207, 10, 202, 62, 33, 189, 168, 189, 133, 252, 148, 188, 207, 91, 182, 190, 162, 7, 171, 186, 255, 144, 89, 189, 139, 241, 179, 61, 43, 58, 24, 190, 32, 151, 215, 61, 60, 79, 64, 61, 95, 65, 234, 189, 82, 10, 188, 61, 199, 183, 13, 62, 163, 51, 236, 61, 243, 189, 89, 61, 118, 186, 99, 189, 218, 103, 222, 60, 52, 101, 130, 189, 12, 249, 0, 190, 187, 110, 239, 188, 114, 199, 170, 188, 70, 3, 166, 59, 85, 130, 124, 62, 32, 177, 166, 61, 25, 96, 161, 189, 102, 22, 46, 190, 221, 149, 59, 61, 10, 166, 142, 189, 235, 86, 114, 190, 111, 226, 221, 61, 239, 1, 142, 189, 29, 245, 79, 61, 94, 72, 120, 62, 223, 105, 6, 190, 194, 210, 141, 190, 128, 200, 193, 190, 43, 244, 132, 188, 112, 231, 59, 190, 108, 148, 33, 61, 4, 161, 83, 62, 35, 156, 47, 62, 153, 86, 185, 189, 212, 9, 85, 61, 183, 195, 29, 189, 113, 136, 73, 62, 92, 230, 10, 188, 43, 4, 4, 62, 119, 23, 24, 189, 57, 55, 146, 188, 185, 111, 94, 190, 96, 35, 246, 187, 205, 168, 21, 62, 179, 100, 224, 189, 46, 224, 56, 190, 52, 217, 94, 190, 41, 177, 201, 189, 8, 108, 19, 61, 110, 197, 205, 61, 1, 245, 91, 188, 186, 228, 124, 61, 72, 206, 236, 61, 11, 121, 62, 190, 14, 184, 120, 61, 14, 141, 229, 59, 196, 7, 39, 62, 65, 68, 181, 189, 196, 202, 38, 62, 196, 130, 60, 190, 210, 93, 136, 189, 135, 213, 235, 61, 34, 53, 232, 188, 20, 174, 152, 189, 13, 250, 40, 190, 67, 33, 169, 61, 63, 153, 177, 189, 79, 15, 223, 61, 6, 1, 78, 190, 151, 2, 181, 61, 60, 162, 36, 190, 82, 199, 222, 61, 181, 152, 253, 185, 32, 84, 11, 61, 252, 210, 8, 189, 94, 116, 82, 190, 49, 199, 12, 62, 246, 189, 154, 188, 124, 37, 185, 190, 73, 156, 36, 190, 41, 123, 225, 189, 5, 229, 26, 190, 192, 121, 30, 190, 251, 198, 242, 62, 172, 23, 20, 62, 195, 57, 244, 190, 179, 135, 141, 60, 204, 136, 42, 61, 62, 236, 101, 62, 148, 13, 7, 189, 66, 40, 202, 62, 182, 236, 219, 189, 62, 125, 190, 188, 183, 112, 110, 190, 96, 153, 2, 190, 116, 184, 253, 190, 198, 139, 84, 61, 187, 209, 111, 189, 202, 125, 215, 190, 47, 175, 38, 62, 181, 43, 27, 191, 218, 151, 162, 189, 152, 236, 163, 188, 176, 63, 64, 190, 245, 84, 67, 61, 22, 247, 186, 187, 119, 59, 170, 189, 54, 48, 4, 190, 150, 33, 4, 62, 198, 87, 155, 189, 218, 210, 168, 61, 33, 185, 28, 62, 224, 32, 40, 190, 253, 171, 180, 188, 252, 58, 34, 190, 114, 21, 9, 190, 201, 89, 46, 62, 5, 89, 25, 189, 56, 167, 134, 60, 102, 38, 171, 189, 174, 121, 132, 61, 134, 124, 73, 188, 46, 186, 15, 62, 125, 94, 204, 61, 196, 91, 198, 189, 89, 73, 32, 189, 64, 130, 216, 189, 144, 23, 27, 62, 56, 65, 5, 190, 22, 184, 37, 189, 136, 118, 239, 189, 201, 37, 199, 189, 218, 1, 30, 62, 193, 56, 120, 61, 63, 102, 212, 61, 195, 67, 63, 61, 21, 87, 207, 190, 30, 77, 128, 62, 236, 217, 88, 190, 188, 98, 81, 61, 137, 24, 78, 188, 16, 109, 9, 62, 200, 18, 35, 191, 128, 61, 134, 189, 18, 125, 172, 61, 237, 78, 142, 62, 214, 155, 18, 61, 34, 44, 59, 190, 225, 203, 130, 62, 144, 57, 12, 190, 48, 6, 229, 189, 152, 0, 40, 190, 84, 189, 100, 190, 104, 230, 169, 189, 24, 73, 215, 190, 216, 170, 56, 61, 8, 144, 195, 61, 94, 39, 150, 190, 133, 156, 38, 190, 149, 145, 58, 190, 200, 77, 30, 189, 50, 225, 72, 62, 199, 96, 6, 190, 122, 186, 38, 189, 144, 149, 108, 190, 157, 44, 31, 190, 104, 20, 62, 189, 4, 177, 81, 61, 43, 252, 143, 190, 121, 31, 141, 62, 127, 139, 216, 190, 27, 218, 37, 190, 21, 180, 145, 61, 253, 129, 95, 62, 20, 4, 166, 189, 199, 105, 77, 62, 64, 241, 126, 190, 134, 187, 184, 62, 49, 229, 203, 61, 153, 158, 39, 190, 67, 47, 110, 61, 0, 75, 202, 62, 0, 203, 125, 60, 137, 117, 220, 62, 206, 25, 245, 189, 205, 153, 203, 190, 15, 33, 49, 190, 205, 202, 22, 191, 123, 12, 158, 189, 140, 230, 166, 62, 223, 120, 215, 188, 216, 183, 136, 187, 141, 85, 210, 190, 16, 17, 25, 189, 45, 137, 230, 59, 223, 218, 139, 62, 118, 185, 209, 61, 26, 64, 93, 190, 161, 126, 242, 188, 237, 101, 234, 189, 233, 127, 39, 191, 56, 69, 174, 62, 106, 232, 215, 190, 33, 231, 136, 190, 108, 28, 244, 61, 118, 72, 247, 61, 46, 75, 38, 62, 164, 44, 91, 62, 142, 19, 113, 190, 173, 93, 227, 61, 109, 70, 184, 61, 131, 244, 63, 62, 155, 102, 91, 62, 154, 110, 137, 62, 36, 201, 32, 61, 136, 116, 167, 62, 198, 220, 45, 62, 201, 175, 3, 191, 203, 198, 33, 191, 114, 15, 38, 191, 107, 176, 1, 62, 216, 11, 133, 189, 195, 37, 117, 188, 232, 44, 43, 189, 130, 39, 57, 189, 144, 140, 213, 190, 106, 166, 149, 62, 33, 178, 39, 62, 230, 135, 181, 62, 120, 225, 159, 189, 203, 11, 203, 190, 172, 31, 52, 191, 10, 19, 3, 191, 163, 252, 208, 62, 102, 67, 105, 61, 67, 59, 19, 190, 179, 75, 3, 61, 219, 15, 185, 62, 192, 251, 199, 190, 6, 100, 227, 61, 128, 217, 187, 190, 205, 31, 199, 62, 240, 103, 83, 62, 252, 248, 60, 191, 2, 164, 212, 61, 10, 201, 38, 57, 49, 230, 59, 60, 15, 240, 141, 60, 233, 208, 1, 61, 133, 13, 193, 190, 246, 167, 106, 191, 2, 125, 57, 191, 86, 201, 46, 61, 5, 34, 228, 189, 247, 146, 6, 190, 18, 15, 53, 188, 244, 182, 177, 61, 34, 221, 0, 62, 132, 38, 224, 62, 150, 248, 222, 61, 117, 25, 168, 61, 29, 137, 194, 61, 100, 205, 206, 189, 141, 180, 87, 189, 43, 230, 104, 62, 107, 222, 22, 189, 143, 3, 33, 61, 143, 238, 193, 62, 223, 147, 96, 190, 17, 50, 234, 189, 112, 253, 222, 61, 230, 220, 58, 62, 92, 228, 80, 62, 143, 23, 32, 189, 30, 211, 32, 62, 99, 173, 253, 61, 74, 96, 47, 189, 107, 221, 189, 59, 246, 30, 190, 61, 111, 96, 153, 190, 83, 23, 154, 188, 89, 97, 30, 190, 237, 213, 212, 189, 103, 182, 140, 190, 23, 164, 252, 59, 76, 238, 248, 61, 192, 147, 193, 55, 191, 35, 145, 62, 54, 95, 208, 62, 131, 221, 92, 62, 139, 217, 161, 189, 94, 106, 131, 188, 87, 9, 128, 62, 82, 194, 236, 61, 189, 25, 248, 62, 92, 52, 32, 62, 120, 158, 196, 190, 221, 153, 191, 60, 116, 255, 178, 61, 59, 173, 239, 187, 40, 96, 1, 62, 163, 204, 163, 62, 24, 120, 139, 190, 74, 73, 133, 61, 196, 102, 47, 190, 216, 45, 13, 191, 232, 23, 207, 61, 37, 116, 155, 189, 36, 9, 164, 61, 69, 34, 255, 190, 162, 56, 4, 191, 39, 47, 132, 61, 88, 50, 148, 62, 201, 60, 2, 189, 167, 178, 101, 189, 143, 34, 133, 190, 114, 219, 192, 189, 128, 2, 142, 190, 49, 207, 32, 191, 120, 124, 167, 190, 149, 159, 3, 190, 115, 33, 77, 191, 130, 216, 54, 190, 76, 177, 142, 61, 226, 194, 21, 62, 105, 195, 137, 61, 180, 254, 23, 190, 70, 90, 213, 190, 147, 182, 27, 191, 73, 125, 217, 62, 43, 66, 161, 60, 129, 127, 246, 189, 119, 63, 7, 61, 69, 52, 185, 62, 91, 88, 177, 190, 37, 169, 29, 62, 103, 195, 214, 190, 146, 76, 160, 62, 59, 56, 138, 62, 202, 241, 51, 191, 7, 219, 78, 62, 60, 140, 89, 189, 176, 142, 20, 62, 17, 129, 112, 189, 208, 185, 38, 62, 250, 38, 3, 191, 70, 64, 90, 191, 213, 211, 39, 191, 163, 204, 116, 62, 198, 220, 253, 61, 219, 148, 2, 62, 220, 177, 24, 62, 22, 183, 80, 189, 25, 36, 148, 60, 70, 148, 228, 62, 50, 154, 103, 62, 114, 122, 70, 62, 134, 81, 71, 190, 80, 115, 157, 190, 203, 199, 50, 60, 163, 130, 99, 62, 129, 122, 133, 62, 91, 190, 48, 62, 115, 131, 93, 190, 227, 51, 107, 62, 124, 193, 98, 62, 53, 44, 158, 189, 207, 36, 100, 190, 210, 212, 204, 190, 147, 74, 133, 61, 146, 192, 150, 190, 237, 208, 26, 189, 104, 6, 112, 62, 177, 153, 24, 189, 184, 124, 1, 61, 27, 241, 109, 189, 113, 157, 106, 61, 94, 191, 198, 190, 32, 236, 31, 191, 239, 236, 23, 191, 31, 157, 134, 190, 195, 155, 45, 189, 183, 7, 172, 189, 109, 245, 99, 61, 246, 137, 45, 61, 189, 82, 128, 61, 25, 245, 187, 190, 211, 138, 169, 62, 146, 60, 194, 190, 76, 140, 19, 191, 133, 132, 169, 61, 26, 251, 182, 61, 0, 3, 69, 189, 223, 31, 190, 60, 149, 214, 174, 62, 164, 93, 135, 62, 115, 0, 30, 191, 25, 214, 56, 62, 214, 156, 245, 189, 96, 122, 151, 190, 41, 71, 15, 62, 172, 186, 141, 60, 247, 40, 143, 61, 235, 116, 98, 191, 249, 23, 117, 190, 14, 113, 100, 62, 246, 62, 46, 62, 48, 184, 206, 190, 127, 177, 250, 61, 73, 20, 233, 190, 94, 103, 24, 191, 63, 205, 34, 191, 80, 56, 103, 190, 89, 89, 13, 62, 176, 55, 17, 60, 181, 10, 149, 62, 2, 41, 46, 189, 121, 159, 231, 61, 225, 182, 149, 188, 140, 174, 71, 62, 95, 45, 139, 62, 12, 159, 150, 62, 241, 192, 175, 61, 244, 97, 208, 61, 19, 181, 154, 189, 38, 208, 116, 188, 38, 13, 165, 62, 190, 59, 254, 62, 254, 224, 195, 189, 93, 100, 5, 62, 223, 26, 100, 189, 91, 21, 2, 62, 180, 125, 161, 61, 1, 87, 40, 191, 10, 24, 105, 61, 74, 112, 68, 190, 64, 62, 166, 61, 70, 179, 170, 190, 148, 57, 188, 190, 55, 236, 34, 191, 198, 237, 241, 61, 120, 129, 139, 190, 106, 216, 135, 190, 85, 114, 207, 190, 171, 163, 161, 189, 200, 169, 47, 191, 166, 232, 43, 191, 7, 50, 201, 58, 91, 241, 124, 62, 176, 48, 191, 190, 129, 179, 18, 62, 27, 158, 2, 62, 45, 233, 121, 188, 98, 123, 49, 62, 27, 33, 141, 62, 171, 20, 202, 189, 151, 23, 0, 61, 68, 80, 12, 190, 219, 141, 140, 61, 223, 171, 48, 62, 160, 186, 250, 189, 189, 137, 127, 61, 159, 44, 199, 189, 243, 5, 98, 189, 73, 132, 131, 189, 113, 10, 206, 61, 68, 83, 39, 190, 125, 73, 161, 61, 31, 12, 194, 189, 246, 205, 90, 189, 253, 191, 17, 190, 157, 133, 131, 189, 204, 21, 110, 61, 242, 192, 117, 61, 36, 245, 117, 61, 52, 72, 40, 190, 206, 68, 140, 189, 93, 239, 68, 61, 39, 166, 20, 190, 70, 232, 168, 61, 105, 187, 12, 190, 131, 132, 170, 189, 189, 199, 130, 59, 154, 76, 198, 189, 81, 232, 97, 61, 149, 16, 106, 189, 108, 125, 49, 62, 104, 152, 250, 189, 241, 12, 101, 60, 12, 96, 180, 190, 251, 85, 155, 61, 248, 25, 140, 62, 6, 192, 185, 189, 7, 180, 145, 190, 246, 230, 75, 62, 130, 114, 141, 62, 236, 78, 82, 62, 229, 133, 125, 190, 130, 2, 11, 189, 45, 3, 174, 189, 147, 108, 58, 190, 100, 4, 69, 61, 85, 99, 250, 61, 146, 41, 59, 190, 157, 171, 108, 62, 150, 94, 19, 62, 170, 95, 59, 190, 41, 255, 182, 190, 138, 19, 99, 190, 192, 249, 190, 60, 83, 202, 225, 61, 12, 91, 52, 62, 210, 12, 41, 62, 213, 177, 70, 62, 166, 124, 225, 61, 217, 197, 247, 188, 108, 207, 104, 62, 254, 203, 81, 62, 97, 38, 72, 62, 228, 65, 7, 189, 84, 233, 29, 190, 70, 237, 67, 62, 37, 242, 3, 191, 236, 28, 202, 59, 18, 41, 223, 61, 74, 239, 46, 62, 80, 55, 57, 191, 69, 42, 218, 60, 177, 136, 81, 61, 248, 96, 255, 61, 66, 10, 201, 189, 66, 117, 8, 62, 60, 99, 43, 62, 145, 205, 22, 190, 172, 6, 108, 61, 219, 45, 25, 190, 133, 230, 87, 190, 65, 122, 61, 189, 64, 253, 251, 189, 217, 168, 193, 59, 154, 219, 149, 188, 154, 6, 17, 190, 164, 181, 0, 190, 66, 62, 28, 190, 13, 57, 147, 189, 124, 244, 153, 189, 52, 173, 82, 59, 169, 242, 164, 61, 112, 86, 247, 189, 31, 178, 230, 189, 131, 106, 202, 60, 138, 113, 64, 190, 76, 191, 10, 190, 58, 11, 98, 189, 85, 206, 220, 62, 212, 242, 9, 62, 24, 167, 119, 191, 97, 126, 144, 61, 8, 100, 151, 190, 22, 247, 190, 190, 28, 69, 65, 61, 175, 126, 178, 189, 9, 54, 6, 62, 146, 178, 18, 191, 80, 145, 215, 61, 125, 10, 105, 190, 8, 45, 232, 60, 101, 17, 85, 191, 152, 73, 225, 62, 187, 38, 181, 190, 5, 235, 6, 191, 254, 8, 224, 190, 112, 131, 131, 190, 76, 242, 135, 189, 123, 222, 253, 61, 152, 165, 63, 190, 180, 102, 28, 62, 17, 101, 196, 188, 166, 111, 79, 60, 35, 192, 14, 62, 74, 80, 50, 62, 92, 0, 119, 189, 188, 171, 25, 62, 33, 126, 215, 189, 132, 80, 200, 189, 132, 225, 9, 190, 155, 91, 102, 62, 130, 50, 158, 62, 171, 11, 108, 62, 35, 45, 62, 61, 90, 63, 236, 61, 194, 98, 142, 62, 163, 176, 12, 62, 219, 143, 0, 191, 215, 23, 226, 60, 1, 255, 250, 62, 223, 150, 51, 62, 20, 149, 5, 191, 40, 61, 52, 60, 14, 197, 149, 59, 171, 4, 125, 62, 215, 209, 33, 190, 69, 143, 47, 62, 192, 174, 144, 190, 68, 210, 242, 188, 7, 137, 124, 190, 212, 26, 201, 190, 234, 39, 175, 190, 193, 251, 80, 62, 146, 193, 252, 189, 161, 252, 44, 190, 17, 200, 85, 62, 100, 43, 242, 189, 10, 15, 65, 62, 78, 230, 242, 188, 1, 104, 55, 188, 138, 157, 141, 188, 33, 104, 81, 190, 218, 228, 30, 60, 255, 195, 12, 62, 100, 248, 22, 190, 38, 229, 141, 189, 0, 179, 72, 61, 87, 250, 5, 60, 158, 172, 98, 190, 132, 51, 239, 189, 84, 224, 232, 188, 99, 102, 101, 189, 81, 205, 102, 190, 3, 160, 243, 188, 219, 155, 210, 61, 7, 225, 44, 188, 179, 136, 236, 61, 176, 137, 30, 189, 21, 90, 187, 190, 70, 34, 17, 191, 163, 190, 172, 60, 211, 124, 29, 62, 143, 112, 16, 62, 178, 121, 182, 61, 128, 145, 222, 189, 53, 203, 229, 189, 79, 98, 183, 61, 73, 242, 103, 189, 58, 154, 149, 62, 211, 36, 169, 59, 1, 117, 41, 61, 101, 43, 212, 188, 43, 102, 224, 61, 195, 214, 179, 190, 0, 56, 141, 62, 248, 29, 200, 62, 226, 234, 45, 190, 181, 94, 135, 190, 160, 205, 116, 62, 91, 35, 107, 61, 221, 66, 161, 62, 209, 174, 43, 191, 40, 250, 61, 190, 118, 205, 177, 189, 129, 129, 145, 190, 45, 190, 0, 61, 186, 208, 192, 61, 16, 1, 219, 190, 125, 1, 16, 62, 45, 76, 141, 60, 19, 181, 195, 61, 106, 11, 152, 62, 39, 197, 25, 191, 186, 37, 148, 61, 2, 210, 159, 62, 159, 80, 123, 189, 158, 152, 178, 62, 209, 255, 41, 62, 23, 212, 144, 188, 105, 132, 216, 190, 167, 200, 54, 62, 116, 36, 130, 62, 40, 227, 108, 62, 56, 225, 138, 62, 112, 21, 243, 190, 127, 233, 70, 61, 213, 85, 4, 62, 115, 148, 126, 62, 153, 194, 181, 61, 64, 115, 15, 190, 153, 120, 201, 190, 188, 29, 226, 59, 105, 111, 172, 62, 144, 178, 61, 191, 163, 168, 112, 62, 55, 188, 133, 189, 202, 198, 133, 62, 212, 19, 176, 190, 107, 28, 143, 189, 52, 31, 13, 62, 171, 134, 139, 187, 83, 171, 185, 188, 114, 81, 20, 62, 50, 42, 222, 62, 120, 50, 101, 62, 142, 18, 161, 190, 72, 182, 84, 190, 218, 115, 234, 190, 21, 83, 175, 61, 236, 44, 92, 190, 20, 129, 37, 61, 47, 41, 41, 62, 217, 60, 122, 61, 206, 37, 7, 62, 229, 163, 85, 62, 98, 112, 88, 61, 64, 146, 194, 189, 214, 45, 176, 190, 34, 126, 187, 189, 14, 116, 213, 190, 209, 162, 92, 62, 88, 186, 29, 188, 246, 195, 17, 62, 132, 244, 110, 188, 188, 56, 89, 190, 92, 44, 127, 61, 121, 166, 136, 62, 37, 243, 108, 61, 125, 108, 4, 189, 22, 152, 150, 62, 239, 102, 137, 190, 106, 42, 114, 62, 76, 42, 111, 188, 76, 213, 176, 189, 87, 167, 174, 190, 205, 101, 137, 190, 23, 104, 48, 62, 195, 245, 109, 61, 207, 168, 128, 190, 142, 193, 194, 62, 158, 28, 155, 190, 153, 13, 39, 191, 109, 221, 99, 62, 3, 236, 3, 190, 248, 174, 157, 62, 36, 9, 5, 190, 0, 208, 89, 191, 150, 254, 100, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 42, 62, 62, 82, 80, 119, 60, 132, 43, 19, 190, 103, 9, 170, 62, 105, 192, 99, 189, 5, 17, 36, 190, 2, 182, 168, 62, 83, 235, 163, 189, 249, 0, 176, 62, 174, 144, 254, 61, 161, 101, 101, 190, 42, 235, 89, 61, 239, 77, 32, 190, 183, 52, 235, 190, 16, 216, 72, 190, 95, 83, 245, 61, 178, 122, 10, 189, 116, 116, 202, 61, 150, 214, 152, 61, 54, 141, 121, 189, 102, 159, 199, 189, 39, 37, 89, 61, 25, 253, 52, 62, 121, 169, 162, 188, 253, 141, 116, 62, 111, 148, 219, 190, 66, 187, 38, 62, 24, 71, 39, 61, 12, 190, 106, 62, 173, 200, 42, 62, 126, 170, 0, 61, 27, 60, 129, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 93, 57, 191, 215, 49, 199, 189, 41, 233, 99, 189, 251, 228, 54, 191, 79, 129, 184, 61, 78, 53, 245, 189, 115, 179, 68, 63, 50, 136, 148, 186, 94, 122, 105, 60, 218, 242, 79, 188, 103, 202, 20, 62, 77, 85, 154, 62, 170, 60, 14, 190, 48, 168, 42, 63, 104, 123, 81, 63, 181, 110, 64, 191, 194, 65, 225, 190, 49, 235, 97, 62, 48, 189, 32, 62, 247, 67, 201, 190, 53, 18, 131, 190, 155, 254, 59, 190, 242, 199, 173, 62, 167, 14, 204, 61, 203, 194, 121, 62, 120, 209, 161, 62, 149, 90, 57, 190, 35, 66, 143, 62, 144, 136, 171, 188, 154, 94, 7, 63, 104, 18, 150, 62, 169, 131, 12, 191, 20, 3, 173, 61, 89, 147, 80, 189, 105, 160, 175, 60, 83, 20, 88, 59, 106, 231, 43, 190, 152, 41, 242, 189, 169, 95, 89, 61, 111, 84, 205, 61, 124, 73, 16, 190, 151, 155, 208, 189, 12, 184, 29, 190, 101, 76, 220, 61, 65, 61, 146, 61, 174, 52, 170, 62, 162, 198, 69, 190, 164, 88, 105, 62, 140, 221, 33, 62, 155, 98, 101, 190, 131, 197, 19, 191, 79, 225, 10, 62, 48, 57, 37, 62, 101, 57, 17, 190, 191, 237, 106, 191, 38, 107, 40, 62, 113, 29, 66, 190, 241, 202, 162, 62, 247, 86, 203, 190, 54, 241, 76, 190, 33, 248, 28, 190, 235, 110, 102, 62, 126, 118, 27, 62, 237, 63, 16, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 122, 24, 189, 170, 210, 30, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {137, 225, 158, 62, 26, 68, 186, 63, 64, 159, 66, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {23, 179, 191, 191, 61, 138, 242, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0015/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}