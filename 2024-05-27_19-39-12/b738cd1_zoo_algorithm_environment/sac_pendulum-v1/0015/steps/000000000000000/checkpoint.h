// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 194, 233, 190, 180, 148, 242, 190, 83, 19, 63, 190, 230, 71, 125, 59, 247, 103, 149, 62, 103, 235, 213, 62, 105, 134, 6, 63, 249, 45, 215, 190, 55, 224, 95, 190, 25, 102, 123, 61, 78, 27, 210, 62, 191, 143, 234, 188, 169, 200, 222, 190, 67, 255, 215, 190, 94, 135, 254, 190, 162, 92, 16, 63, 82, 156, 180, 189, 152, 201, 228, 62, 203, 128, 163, 189, 78, 22, 7, 189, 100, 102, 48, 189, 141, 25, 166, 190, 102, 7, 154, 61, 229, 55, 180, 190, 199, 96, 153, 62, 150, 242, 163, 62, 186, 196, 146, 190, 239, 246, 234, 190, 189, 210, 210, 62, 192, 54, 204, 62, 136, 138, 130, 62, 109, 245, 147, 61, 3, 238, 3, 191, 128, 64, 199, 190, 239, 215, 232, 190, 215, 199, 203, 190, 43, 167, 14, 63, 253, 146, 139, 190, 43, 236, 41, 62, 240, 1, 240, 189, 206, 194, 146, 62, 79, 13, 66, 62, 198, 148, 34, 190, 69, 218, 95, 61, 136, 165, 10, 63, 228, 209, 252, 190, 31, 126, 141, 190, 102, 206, 233, 190, 128, 160, 238, 62, 51, 227, 142, 190, 90, 81, 100, 189, 228, 49, 189, 190, 21, 117, 16, 191, 253, 31, 209, 190, 96, 42, 15, 62, 253, 106, 227, 188, 167, 219, 162, 189, 12, 40, 178, 62, 184, 175, 186, 190, 245, 246, 80, 190, 213, 18, 18, 191, 130, 129, 145, 190, 142, 72, 15, 191, 49, 160, 252, 190, 250, 75, 165, 62, 85, 18, 252, 61, 56, 56, 167, 190, 120, 163, 136, 62, 129, 41, 237, 62, 23, 11, 170, 190, 109, 130, 71, 189, 68, 223, 40, 61, 99, 118, 41, 189, 42, 192, 97, 190, 226, 0, 45, 62, 51, 9, 124, 188, 128, 153, 225, 61, 252, 214, 208, 62, 83, 1, 209, 190, 86, 30, 200, 62, 140, 127, 8, 61, 248, 156, 12, 63, 78, 78, 125, 190, 252, 185, 11, 63, 216, 188, 146, 190, 191, 22, 19, 63, 191, 110, 1, 189, 78, 247, 226, 189, 23, 221, 152, 189, 228, 67, 244, 190, 232, 16, 252, 189, 86, 157, 5, 191, 218, 42, 24, 62, 112, 243, 40, 190, 46, 236, 17, 191, 162, 42, 200, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 195, 19, 191, 206, 161, 229, 60, 197, 0, 218, 62, 49, 222, 113, 190, 23, 240, 140, 62, 174, 145, 84, 62, 151, 229, 54, 61, 190, 113, 56, 62, 128, 206, 177, 190, 8, 89, 223, 190, 240, 203, 5, 63, 39, 6, 179, 189, 201, 144, 33, 190, 61, 245, 179, 62, 48, 17, 168, 62, 174, 176, 241, 188, 57, 63, 169, 62, 186, 130, 198, 190, 142, 182, 157, 189, 187, 87, 3, 191, 89, 182, 150, 190, 212, 185, 231, 62, 212, 60, 17, 63, 203, 114, 9, 62, 201, 158, 220, 61, 209, 16, 229, 61, 73, 117, 63, 189, 115, 37, 114, 61, 214, 184, 220, 62, 228, 23, 133, 61, 5, 214, 80, 189, 48, 125, 165, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 211, 23, 190, 191, 31, 223, 189, 193, 58, 194, 188, 77, 13, 9, 189, 112, 95, 17, 62, 109, 191, 236, 189, 212, 156, 214, 189, 237, 132, 51, 62, 26, 250, 73, 189, 153, 19, 24, 189, 167, 52, 41, 60, 213, 190, 168, 188, 135, 143, 154, 189, 190, 54, 16, 62, 8, 165, 59, 189, 207, 159, 168, 61, 132, 64, 105, 60, 121, 45, 167, 189, 236, 31, 39, 190, 174, 179, 40, 190, 29, 250, 228, 61, 109, 180, 218, 188, 225, 93, 49, 189, 91, 12, 47, 190, 62, 9, 220, 189, 202, 235, 13, 190, 44, 74, 28, 190, 249, 25, 43, 190, 8, 136, 231, 188, 131, 133, 33, 62, 24, 211, 252, 61, 120, 132, 40, 62, 163, 52, 196, 189, 58, 145, 179, 189, 204, 56, 133, 188, 82, 20, 212, 188, 52, 146, 234, 61, 146, 216, 164, 189, 230, 86, 246, 189, 243, 72, 188, 60, 233, 43, 17, 190, 189, 172, 238, 189, 215, 25, 18, 188, 172, 212, 9, 61, 243, 105, 3, 190, 49, 29, 250, 61, 39, 79, 35, 190, 83, 235, 244, 189, 169, 99, 48, 60, 175, 188, 155, 189, 39, 202, 5, 61, 64, 147, 190, 189, 151, 108, 32, 62, 27, 70, 19, 62, 230, 89, 213, 188, 171, 68, 162, 188, 163, 54, 7, 62, 175, 162, 119, 60, 180, 74, 52, 190, 182, 56, 198, 61, 237, 216, 104, 60, 236, 132, 18, 190, 71, 240, 25, 61, 57, 179, 23, 190, 114, 185, 22, 189, 135, 97, 201, 189, 39, 49, 8, 190, 191, 106, 42, 190, 163, 186, 220, 189, 227, 112, 44, 190, 157, 168, 191, 189, 192, 29, 213, 61, 85, 19, 166, 189, 252, 59, 46, 61, 212, 229, 58, 61, 73, 24, 15, 61, 68, 207, 194, 189, 153, 97, 96, 61, 46, 59, 52, 61, 228, 85, 197, 189, 33, 243, 43, 190, 88, 80, 38, 190, 74, 210, 126, 61, 150, 202, 19, 62, 28, 3, 144, 188, 128, 145, 225, 61, 25, 130, 141, 189, 94, 8, 5, 62, 65, 217, 140, 189, 149, 61, 234, 189, 120, 27, 17, 189, 48, 129, 251, 188, 45, 106, 37, 190, 196, 227, 246, 188, 75, 241, 233, 61, 142, 104, 132, 61, 174, 97, 222, 189, 141, 153, 112, 61, 196, 52, 0, 62, 48, 11, 188, 189, 231, 28, 147, 61, 20, 150, 197, 189, 180, 50, 213, 189, 251, 204, 238, 61, 65, 32, 149, 188, 121, 165, 3, 190, 146, 75, 34, 190, 147, 52, 192, 189, 236, 87, 15, 190, 164, 32, 40, 190, 71, 208, 225, 187, 204, 33, 19, 62, 119, 4, 248, 61, 243, 139, 39, 189, 7, 231, 47, 62, 30, 49, 117, 188, 86, 58, 21, 190, 80, 234, 2, 62, 142, 146, 49, 190, 121, 237, 47, 190, 3, 0, 55, 189, 23, 235, 70, 61, 175, 86, 14, 190, 252, 236, 132, 61, 215, 5, 24, 62, 126, 212, 12, 62, 88, 67, 156, 189, 164, 215, 41, 189, 5, 68, 174, 189, 178, 17, 148, 59, 153, 42, 139, 189, 3, 202, 199, 189, 83, 137, 26, 190, 63, 248, 226, 188, 10, 31, 241, 188, 231, 1, 147, 189, 167, 228, 201, 189, 243, 51, 192, 189, 12, 170, 245, 189, 212, 244, 189, 189, 107, 110, 139, 189, 69, 249, 25, 190, 178, 15, 129, 60, 193, 42, 203, 188, 197, 97, 114, 60, 106, 203, 187, 61, 36, 235, 167, 59, 68, 142, 15, 190, 0, 240, 230, 189, 22, 249, 27, 190, 72, 210, 167, 61, 238, 147, 18, 62, 77, 41, 11, 190, 155, 84, 229, 189, 185, 211, 59, 189, 89, 56, 40, 61, 249, 1, 239, 61, 167, 91, 178, 189, 75, 71, 9, 60, 52, 73, 222, 61, 12, 8, 172, 61, 26, 193, 54, 61, 131, 235, 116, 59, 183, 117, 249, 189, 97, 189, 3, 190, 87, 161, 156, 61, 36, 96, 2, 190, 149, 252, 35, 190, 89, 190, 153, 61, 39, 48, 4, 190, 127, 235, 17, 62, 254, 252, 206, 60, 215, 85, 63, 61, 106, 167, 16, 190, 41, 36, 219, 189, 154, 53, 9, 62, 100, 103, 216, 189, 199, 147, 237, 188, 191, 68, 3, 62, 180, 124, 5, 189, 119, 41, 163, 189, 21, 151, 182, 189, 229, 250, 152, 189, 22, 253, 251, 60, 0, 7, 192, 61, 246, 223, 190, 61, 119, 149, 48, 190, 108, 53, 20, 62, 209, 143, 234, 61, 226, 179, 32, 190, 102, 86, 242, 189, 207, 102, 122, 188, 91, 120, 2, 189, 56, 137, 152, 189, 83, 124, 14, 62, 239, 203, 1, 190, 241, 93, 25, 62, 235, 76, 153, 189, 49, 136, 253, 189, 215, 148, 37, 61, 206, 98, 213, 189, 185, 95, 53, 188, 12, 107, 179, 189, 209, 143, 22, 62, 143, 76, 30, 190, 130, 247, 179, 61, 159, 141, 231, 61, 30, 149, 200, 189, 69, 108, 100, 61, 231, 3, 59, 60, 170, 1, 11, 190, 129, 149, 58, 189, 200, 151, 37, 190, 166, 137, 0, 190, 130, 174, 64, 189, 246, 103, 163, 189, 240, 151, 236, 60, 65, 177, 204, 188, 187, 190, 137, 61, 60, 171, 205, 61, 88, 176, 7, 189, 224, 111, 160, 61, 134, 93, 200, 57, 248, 93, 114, 61, 229, 29, 168, 189, 49, 213, 188, 189, 88, 32, 35, 189, 191, 191, 153, 189, 252, 118, 172, 61, 193, 92, 134, 61, 196, 145, 169, 189, 108, 197, 247, 59, 127, 24, 34, 62, 215, 25, 167, 58, 240, 58, 15, 190, 238, 150, 150, 189, 150, 93, 26, 190, 53, 99, 84, 189, 216, 123, 208, 60, 212, 180, 136, 189, 119, 27, 125, 189, 88, 7, 48, 62, 112, 63, 131, 189, 9, 29, 43, 190, 50, 249, 3, 62, 0, 164, 5, 190, 227, 26, 33, 188, 216, 164, 30, 190, 135, 244, 172, 61, 195, 96, 28, 190, 51, 15, 28, 62, 138, 66, 160, 189, 98, 71, 30, 61, 166, 166, 136, 188, 229, 115, 33, 60, 108, 200, 33, 62, 203, 72, 16, 190, 28, 172, 79, 189, 53, 246, 147, 189, 163, 210, 27, 190, 148, 249, 147, 61, 45, 95, 191, 189, 130, 129, 135, 188, 177, 69, 237, 189, 180, 60, 42, 190, 177, 232, 129, 60, 74, 128, 90, 189, 29, 185, 43, 61, 23, 38, 178, 187, 91, 35, 33, 190, 74, 30, 35, 62, 76, 235, 44, 62, 49, 132, 39, 62, 211, 190, 253, 189, 226, 204, 104, 61, 48, 108, 110, 189, 236, 213, 248, 188, 99, 90, 51, 60, 138, 48, 11, 62, 170, 229, 5, 190, 233, 120, 186, 60, 77, 87, 232, 60, 66, 185, 182, 61, 82, 52, 224, 61, 248, 202, 81, 61, 61, 64, 134, 189, 161, 119, 130, 189, 55, 242, 0, 190, 29, 115, 217, 60, 248, 70, 105, 189, 234, 225, 5, 190, 8, 16, 185, 189, 235, 81, 16, 62, 84, 175, 145, 189, 187, 233, 23, 62, 49, 19, 210, 61, 148, 24, 129, 61, 38, 107, 43, 190, 148, 38, 144, 61, 120, 150, 47, 188, 237, 62, 38, 190, 180, 38, 242, 61, 89, 162, 203, 189, 119, 31, 234, 61, 214, 180, 5, 62, 93, 123, 232, 60, 99, 3, 201, 60, 230, 147, 38, 62, 13, 110, 213, 60, 131, 134, 48, 190, 18, 95, 47, 61, 36, 14, 236, 61, 160, 150, 160, 61, 170, 157, 47, 190, 189, 97, 250, 61, 89, 141, 170, 189, 159, 162, 152, 61, 14, 224, 2, 189, 196, 251, 254, 60, 182, 205, 0, 190, 118, 135, 209, 61, 76, 216, 49, 190, 195, 36, 65, 189, 205, 168, 21, 62, 233, 8, 239, 189, 10, 104, 10, 190, 185, 198, 195, 189, 175, 62, 204, 189, 43, 104, 86, 61, 145, 49, 4, 62, 28, 226, 84, 189, 246, 215, 230, 61, 13, 45, 182, 61, 202, 205, 17, 190, 157, 130, 228, 61, 103, 248, 1, 61, 239, 160, 20, 62, 23, 66, 130, 189, 37, 134, 52, 62, 40, 57, 51, 190, 253, 200, 46, 189, 76, 32, 45, 62, 16, 254, 212, 60, 125, 167, 21, 188, 220, 52, 155, 189, 63, 174, 19, 62, 30, 218, 136, 189, 244, 235, 32, 62, 178, 30, 52, 190, 196, 75, 184, 61, 8, 153, 140, 189, 181, 194, 52, 62, 101, 89, 181, 61, 84, 57, 19, 62, 98, 205, 13, 190, 191, 39, 237, 60, 151, 245, 136, 61, 241, 48, 135, 60, 159, 109, 52, 190, 243, 32, 168, 188, 247, 107, 4, 62, 248, 139, 32, 62, 131, 53, 12, 61, 207, 25, 173, 61, 21, 18, 150, 188, 174, 59, 96, 61, 13, 222, 18, 62, 214, 140, 162, 60, 168, 221, 189, 61, 115, 20, 5, 61, 67, 179, 52, 62, 227, 252, 226, 189, 252, 195, 178, 61, 252, 28, 30, 62, 110, 38, 52, 61, 171, 37, 154, 189, 147, 130, 151, 186, 220, 168, 144, 60, 93, 56, 33, 62, 5, 3, 2, 62, 171, 20, 29, 190, 176, 228, 139, 189, 244, 158, 87, 189, 92, 121, 36, 190, 245, 84, 67, 61, 22, 247, 186, 187, 119, 59, 170, 189, 54, 48, 4, 190, 212, 14, 14, 62, 198, 87, 155, 189, 232, 70, 175, 61, 253, 166, 38, 62, 224, 32, 40, 190, 253, 171, 180, 188, 116, 77, 24, 190, 10, 162, 7, 190, 201, 89, 46, 62, 89, 162, 227, 188, 231, 161, 177, 60, 121, 229, 156, 189, 174, 121, 132, 61, 134, 124, 73, 188, 46, 186, 15, 62, 125, 94, 204, 61, 155, 106, 191, 189, 17, 34, 241, 188, 66, 166, 196, 189, 139, 248, 34, 62, 56, 65, 5, 190, 22, 184, 37, 189, 177, 164, 219, 189, 201, 37, 199, 189, 243, 239, 39, 62, 139, 80, 137, 61, 63, 102, 212, 61, 195, 67, 63, 61, 187, 54, 211, 188, 17, 74, 251, 61, 188, 24, 119, 189, 7, 150, 177, 61, 17, 55, 168, 60, 157, 84, 69, 61, 248, 249, 129, 61, 8, 22, 91, 188, 24, 156, 240, 61, 227, 153, 176, 188, 105, 161, 145, 61, 86, 118, 230, 61, 58, 209, 16, 62, 31, 126, 38, 189, 27, 192, 203, 189, 92, 182, 7, 190, 216, 165, 147, 189, 9, 61, 80, 189, 111, 140, 163, 61, 210, 97, 163, 61, 133, 223, 2, 62, 245, 80, 34, 190, 94, 75, 175, 189, 34, 136, 67, 61, 233, 111, 219, 61, 154, 27, 49, 62, 247, 107, 244, 188, 182, 168, 0, 190, 194, 53, 169, 61, 29, 134, 3, 190, 64, 174, 172, 61, 40, 239, 141, 61, 115, 100, 173, 60, 148, 246, 129, 61, 84, 37, 250, 189, 46, 136, 207, 189, 231, 17, 90, 189, 206, 64, 50, 61, 213, 217, 165, 189, 248, 94, 241, 61, 159, 215, 13, 190, 138, 62, 163, 61, 99, 167, 107, 61, 110, 1, 136, 188, 30, 86, 164, 189, 39, 145, 48, 62, 5, 104, 138, 189, 85, 166, 4, 62, 17, 162, 35, 60, 87, 92, 164, 189, 163, 117, 220, 188, 156, 205, 220, 189, 41, 94, 142, 189, 19, 235, 21, 62, 236, 148, 225, 189, 163, 85, 38, 189, 47, 133, 33, 190, 149, 193, 209, 189, 48, 139, 160, 61, 76, 227, 44, 62, 84, 190, 138, 59, 79, 4, 202, 61, 177, 173, 68, 61, 26, 92, 12, 190, 91, 70, 45, 189, 153, 34, 16, 59, 136, 162, 34, 190, 17, 92, 72, 188, 246, 167, 241, 189, 7, 45, 164, 189, 189, 104, 154, 61, 158, 153, 244, 60, 43, 40, 13, 62, 39, 92, 119, 188, 90, 49, 215, 61, 32, 145, 42, 188, 253, 27, 29, 61, 56, 168, 9, 62, 6, 214, 47, 62, 71, 28, 54, 189, 224, 27, 39, 62, 102, 200, 193, 189, 189, 87, 122, 187, 124, 170, 20, 62, 243, 15, 34, 190, 121, 46, 36, 190, 215, 76, 110, 61, 154, 162, 242, 189, 227, 115, 137, 60, 253, 31, 8, 190, 95, 217, 1, 190, 142, 252, 154, 187, 0, 165, 99, 61, 147, 153, 74, 186, 55, 124, 188, 61, 26, 54, 129, 60, 37, 241, 76, 189, 229, 33, 47, 62, 181, 17, 152, 61, 125, 39, 166, 189, 148, 183, 211, 61, 239, 116, 213, 61, 133, 15, 235, 189, 16, 205, 67, 189, 241, 11, 27, 190, 47, 199, 170, 61, 149, 165, 68, 60, 78, 16, 31, 190, 107, 7, 180, 189, 78, 62, 172, 61, 41, 176, 134, 60, 118, 100, 23, 190, 151, 52, 51, 189, 78, 42, 128, 61, 110, 140, 227, 188, 62, 3, 32, 190, 37, 8, 219, 189, 10, 61, 234, 188, 161, 75, 190, 189, 55, 157, 182, 188, 21, 13, 223, 61, 241, 210, 7, 62, 129, 40, 12, 62, 141, 112, 18, 190, 8, 191, 144, 189, 137, 114, 150, 61, 171, 194, 54, 61, 16, 182, 235, 60, 201, 166, 255, 61, 57, 142, 239, 60, 235, 169, 42, 61, 110, 162, 224, 189, 139, 86, 57, 189, 160, 116, 131, 58, 95, 237, 233, 189, 136, 57, 122, 61, 12, 167, 170, 60, 48, 149, 202, 61, 96, 206, 196, 61, 228, 185, 135, 61, 67, 200, 24, 62, 65, 104, 0, 190, 202, 78, 225, 188, 75, 238, 30, 190, 51, 61, 233, 188, 187, 215, 39, 190, 80, 34, 146, 61, 253, 183, 22, 59, 3, 244, 235, 61, 61, 219, 84, 189, 168, 218, 5, 190, 69, 137, 176, 60, 119, 225, 24, 62, 130, 152, 155, 61, 91, 220, 6, 190, 229, 106, 238, 61, 189, 106, 158, 60, 82, 32, 201, 61, 162, 254, 39, 62, 254, 159, 85, 189, 149, 188, 207, 61, 7, 219, 13, 189, 54, 7, 252, 189, 118, 179, 238, 59, 233, 175, 209, 61, 244, 162, 127, 61, 65, 80, 64, 189, 158, 164, 136, 60, 30, 79, 213, 188, 157, 145, 136, 61, 48, 122, 212, 187, 237, 47, 178, 189, 161, 244, 140, 187, 204, 166, 48, 190, 250, 236, 192, 61, 38, 218, 39, 61, 79, 173, 172, 60, 232, 104, 34, 60, 129, 56, 162, 61, 79, 54, 18, 62, 62, 193, 2, 190, 108, 207, 177, 188, 131, 117, 133, 61, 15, 148, 145, 189, 81, 233, 27, 189, 20, 200, 44, 190, 39, 114, 219, 188, 213, 31, 25, 190, 151, 245, 43, 62, 146, 162, 8, 189, 140, 246, 173, 61, 164, 39, 87, 188, 146, 131, 13, 190, 158, 36, 41, 62, 144, 237, 108, 61, 120, 151, 188, 189, 1, 45, 47, 62, 76, 16, 162, 61, 87, 166, 174, 189, 152, 179, 13, 61, 119, 53, 31, 190, 128, 51, 153, 59, 4, 54, 183, 61, 123, 223, 8, 190, 104, 216, 242, 188, 230, 130, 150, 189, 11, 22, 13, 62, 72, 70, 238, 189, 240, 146, 191, 61, 15, 120, 188, 189, 102, 25, 240, 61, 138, 180, 1, 61, 137, 169, 241, 61, 130, 193, 5, 62, 42, 247, 8, 62, 44, 17, 9, 62, 235, 243, 9, 61, 99, 78, 154, 60, 250, 88, 25, 62, 62, 41, 34, 189, 255, 113, 112, 187, 88, 136, 20, 190, 186, 152, 2, 190, 89, 47, 207, 61, 85, 163, 229, 188, 127, 217, 28, 62, 240, 92, 39, 62, 254, 234, 41, 190, 50, 27, 71, 189, 64, 105, 153, 61, 172, 48, 233, 188, 180, 203, 129, 189, 140, 133, 168, 61, 240, 219, 246, 189, 82, 9, 100, 58, 231, 20, 255, 61, 118, 90, 81, 189, 123, 12, 207, 61, 26, 196, 187, 188, 39, 32, 21, 62, 80, 153, 31, 189, 160, 218, 197, 189, 91, 132, 49, 62, 21, 73, 1, 189, 64, 72, 39, 190, 242, 188, 159, 61, 209, 227, 160, 189, 33, 17, 48, 62, 172, 131, 19, 190, 136, 68, 3, 189, 20, 39, 41, 190, 113, 51, 13, 62, 235, 70, 123, 58, 84, 233, 28, 190, 40, 233, 241, 189, 27, 28, 72, 189, 14, 18, 181, 61, 11, 150, 180, 188, 79, 120, 221, 60, 58, 93, 116, 61, 230, 64, 120, 60, 43, 170, 213, 61, 119, 95, 52, 190, 10, 218, 49, 190, 209, 135, 34, 190, 79, 191, 137, 189, 160, 206, 243, 189, 78, 91, 97, 189, 217, 63, 33, 190, 107, 76, 205, 61, 109, 213, 223, 61, 154, 160, 38, 190, 197, 225, 8, 190, 111, 145, 52, 190, 3, 34, 34, 62, 33, 30, 196, 189, 73, 1, 150, 189, 238, 0, 78, 61, 132, 117, 107, 189, 102, 61, 223, 61, 200, 15, 177, 189, 103, 57, 37, 61, 86, 51, 31, 190, 224, 132, 16, 62, 77, 50, 98, 60, 252, 16, 216, 61, 188, 36, 179, 61, 117, 238, 150, 61, 96, 121, 234, 189, 51, 22, 45, 62, 158, 51, 175, 61, 224, 181, 208, 189, 205, 8, 51, 62, 25, 250, 254, 61, 186, 11, 26, 62, 56, 162, 218, 61, 230, 246, 104, 189, 88, 121, 188, 61, 239, 144, 155, 189, 113, 173, 172, 60, 199, 163, 50, 60, 39, 197, 227, 61, 176, 132, 1, 189, 91, 25, 110, 189, 180, 119, 239, 189, 57, 15, 27, 190, 79, 0, 2, 190, 1, 153, 214, 188, 195, 90, 209, 189, 33, 252, 36, 190, 107, 28, 59, 189, 217, 61, 26, 62, 31, 165, 13, 62, 165, 162, 10, 190, 154, 227, 19, 61, 72, 133, 6, 62, 86, 233, 44, 189, 81, 147, 161, 61, 120, 96, 26, 62, 183, 159, 239, 189, 151, 23, 0, 61, 68, 80, 12, 190, 219, 141, 140, 61, 223, 171, 48, 62, 160, 186, 250, 189, 189, 137, 127, 61, 159, 44, 199, 189, 243, 5, 98, 189, 73, 132, 131, 189, 113, 10, 206, 61, 68, 83, 39, 190, 125, 73, 161, 61, 31, 12, 194, 189, 246, 205, 90, 189, 253, 191, 17, 190, 157, 133, 131, 189, 204, 21, 110, 61, 242, 192, 117, 61, 36, 245, 117, 61, 52, 72, 40, 190, 206, 68, 140, 189, 93, 239, 68, 61, 39, 166, 20, 190, 70, 232, 168, 61, 105, 187, 12, 190, 131, 132, 170, 189, 189, 199, 130, 59, 154, 76, 198, 189, 81, 232, 97, 61, 149, 16, 106, 189, 108, 125, 49, 62, 104, 152, 250, 189, 27, 5, 120, 189, 40, 127, 42, 190, 249, 204, 11, 187, 138, 25, 19, 190, 134, 74, 97, 61, 49, 116, 228, 189, 99, 234, 157, 61, 173, 213, 43, 62, 156, 144, 43, 61, 226, 184, 87, 61, 148, 8, 6, 190, 176, 1, 193, 189, 138, 59, 22, 59, 201, 31, 30, 188, 187, 74, 152, 61, 196, 115, 173, 188, 247, 131, 43, 62, 224, 184, 217, 61, 221, 138, 230, 189, 208, 216, 188, 189, 239, 175, 31, 190, 92, 164, 141, 189, 61, 222, 188, 61, 150, 178, 194, 188, 63, 161, 136, 61, 93, 128, 16, 62, 51, 152, 159, 61, 30, 98, 33, 62, 30, 177, 200, 188, 125, 127, 18, 62, 169, 222, 3, 189, 209, 159, 36, 190, 82, 231, 43, 187, 150, 205, 222, 61, 98, 113, 10, 190, 62, 201, 73, 60, 108, 60, 43, 62, 159, 150, 236, 61, 74, 33, 18, 190, 225, 235, 122, 61, 113, 225, 81, 61, 245, 83, 112, 189, 173, 104, 144, 189, 193, 52, 89, 60, 72, 225, 153, 61, 100, 228, 142, 189, 83, 92, 176, 61, 85, 111, 11, 190, 254, 86, 190, 187, 65, 122, 61, 189, 112, 119, 99, 188, 217, 168, 193, 59, 59, 135, 152, 188, 17, 129, 26, 189, 212, 227, 81, 189, 148, 145, 168, 60, 202, 134, 135, 61, 250, 49, 153, 189, 76, 231, 5, 61, 133, 10, 168, 60, 219, 251, 54, 61, 204, 108, 235, 189, 63, 90, 19, 62, 180, 206, 24, 190, 185, 90, 212, 188, 64, 233, 196, 189, 84, 14, 8, 62, 101, 21, 98, 61, 16, 223, 42, 189, 157, 254, 15, 189, 91, 190, 122, 189, 152, 222, 234, 188, 147, 24, 218, 60, 200, 137, 20, 190, 38, 240, 8, 62, 25, 236, 25, 61, 109, 203, 13, 62, 163, 66, 30, 190, 95, 199, 137, 60, 49, 8, 47, 190, 50, 125, 35, 62, 12, 50, 226, 189, 80, 192, 2, 190, 194, 109, 27, 61, 186, 163, 51, 189, 51, 139, 72, 61, 232, 214, 42, 62, 42, 3, 235, 188, 89, 100, 178, 61, 156, 61, 170, 189, 51, 126, 31, 62, 73, 146, 128, 61, 190, 54, 253, 61, 77, 201, 52, 190, 127, 144, 229, 61, 85, 71, 31, 190, 244, 204, 224, 189, 120, 244, 188, 59, 9, 21, 49, 61, 9, 74, 131, 61, 242, 231, 28, 62, 16, 213, 239, 60, 217, 167, 200, 189, 18, 78, 38, 62, 1, 250, 20, 62, 68, 210, 34, 188, 249, 86, 23, 190, 194, 172, 233, 61, 28, 166, 52, 188, 243, 167, 80, 189, 183, 27, 9, 62, 212, 175, 23, 59, 19, 134, 34, 60, 54, 36, 33, 190, 129, 226, 213, 61, 253, 101, 13, 190, 6, 228, 115, 189, 96, 168, 35, 62, 79, 174, 46, 190, 41, 162, 180, 189, 120, 67, 150, 61, 206, 16, 76, 189, 249, 150, 250, 189, 163, 0, 20, 62, 48, 110, 179, 189, 128, 9, 62, 61, 55, 237, 40, 190, 54, 119, 41, 189, 61, 107, 248, 187, 205, 108, 12, 190, 145, 254, 226, 59, 146, 199, 221, 61, 176, 120, 73, 189, 114, 87, 172, 189, 223, 193, 235, 189, 254, 238, 221, 189, 163, 153, 29, 190, 31, 140, 221, 189, 3, 72, 42, 190, 212, 77, 6, 187, 236, 182, 23, 190, 17, 60, 222, 188, 180, 197, 14, 62, 149, 254, 147, 188, 235, 154, 146, 61, 232, 203, 169, 188, 207, 103, 226, 189, 42, 245, 170, 189, 72, 151, 146, 189, 142, 122, 12, 62, 251, 1, 44, 62, 253, 109, 93, 61, 132, 105, 61, 189, 177, 32, 203, 189, 241, 43, 229, 60, 68, 111, 73, 189, 149, 217, 136, 61, 210, 62, 50, 190, 211, 119, 199, 61, 141, 130, 19, 188, 15, 89, 106, 61, 61, 17, 148, 189, 240, 251, 43, 61, 78, 159, 167, 59, 104, 47, 123, 61, 8, 251, 148, 61, 188, 60, 229, 60, 93, 244, 174, 61, 77, 160, 9, 188, 72, 176, 228, 189, 102, 175, 166, 189, 222, 74, 48, 188, 2, 132, 51, 62, 132, 103, 221, 189, 180, 91, 91, 189, 17, 173, 120, 61, 88, 110, 246, 60, 51, 186, 179, 59, 202, 45, 192, 189, 50, 216, 158, 61, 51, 129, 83, 60, 233, 67, 238, 189, 10, 178, 45, 62, 135, 7, 52, 190, 156, 235, 36, 62, 181, 118, 65, 61, 117, 118, 218, 61, 48, 119, 58, 189, 246, 37, 240, 188, 115, 84, 32, 62, 79, 90, 41, 60, 238, 164, 5, 62, 52, 90, 173, 189, 156, 17, 154, 61, 162, 148, 133, 61, 210, 110, 9, 190, 195, 5, 224, 188, 37, 31, 225, 59, 184, 107, 20, 190, 178, 57, 118, 189, 191, 11, 1, 62, 217, 27, 199, 189, 196, 37, 4, 62, 47, 88, 207, 189, 77, 202, 145, 61, 52, 22, 20, 60, 207, 139, 241, 189, 74, 214, 235, 61, 209, 42, 101, 61, 164, 130, 238, 189, 26, 152, 150, 189, 30, 65, 41, 62, 219, 187, 240, 61, 49, 193, 130, 189, 253, 65, 22, 188, 219, 99, 70, 60, 40, 20, 10, 190, 15, 128, 171, 188, 104, 85, 144, 189, 114, 254, 155, 189, 243, 25, 60, 61, 116, 142, 195, 60, 182, 71, 148, 189, 90, 36, 130, 61, 167, 209, 36, 190, 199, 81, 26, 190, 159, 14, 241, 186, 200, 140, 26, 190, 26, 166, 213, 61, 216, 142, 64, 61, 215, 180, 151, 189, 27, 61, 253, 189, 254, 14, 225, 188, 228, 90, 39, 59, 195, 46, 14, 62, 33, 30, 25, 190, 36, 149, 156, 189, 46, 182, 40, 62, 80, 113, 70, 61, 169, 144, 250, 60, 27, 100, 218, 58, 239, 21, 149, 61, 240, 87, 46, 190, 180, 159, 21, 62, 47, 35, 239, 59, 46, 239, 223, 188, 121, 177, 41, 190, 129, 25, 212, 61, 208, 120, 123, 61, 179, 207, 40, 190, 29, 61, 170, 61, 122, 173, 47, 190, 119, 68, 45, 62, 155, 250, 4, 190, 82, 155, 224, 189, 22, 12, 47, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 195, 14, 62, 178, 253, 49, 61, 132, 43, 19, 190, 200, 113, 21, 62, 105, 192, 99, 189, 122, 126, 11, 190, 88, 209, 42, 62, 158, 156, 67, 189, 210, 203, 46, 62, 219, 152, 9, 189, 169, 43, 44, 190, 41, 175, 48, 62, 219, 95, 22, 190, 86, 117, 158, 189, 203, 119, 45, 190, 252, 179, 138, 60, 189, 139, 144, 189, 232, 4, 138, 189, 213, 181, 209, 189, 104, 15, 189, 189, 174, 249, 10, 61, 131, 128, 29, 190, 82, 12, 3, 62, 121, 169, 162, 188, 2, 34, 202, 61, 171, 191, 12, 190, 117, 191, 135, 61, 9, 139, 164, 189, 45, 79, 155, 61, 17, 106, 40, 59, 28, 107, 142, 61, 6, 84, 141, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 250, 49, 190, 40, 18, 4, 190, 41, 233, 99, 189, 86, 44, 255, 188, 79, 129, 184, 61, 127, 250, 245, 189, 196, 110, 32, 62, 235, 237, 143, 189, 16, 250, 114, 61, 71, 224, 170, 188, 94, 20, 25, 62, 100, 118, 33, 62, 97, 64, 14, 190, 66, 83, 165, 61, 192, 14, 40, 62, 234, 131, 162, 189, 224, 152, 174, 189, 172, 192, 230, 61, 165, 121, 74, 61, 172, 3, 35, 189, 225, 72, 252, 60, 193, 114, 193, 187, 22, 51, 2, 62, 167, 14, 204, 61, 22, 228, 51, 62, 101, 212, 41, 61, 13, 35, 90, 59, 97, 167, 165, 61, 70, 119, 4, 61, 80, 94, 7, 62, 218, 205, 171, 61, 72, 93, 89, 189, 140, 222, 39, 188, 65, 79, 187, 188, 105, 160, 175, 60, 239, 209, 80, 61, 106, 231, 43, 190, 114, 140, 242, 189, 98, 236, 162, 60, 236, 251, 26, 62, 38, 161, 75, 189, 126, 166, 205, 189, 119, 82, 44, 190, 249, 150, 182, 61, 18, 59, 146, 61, 81, 25, 182, 61, 185, 102, 138, 189, 157, 65, 47, 62, 206, 76, 92, 188, 69, 103, 137, 189, 37, 49, 0, 190, 172, 70, 243, 188, 136, 233, 211, 61, 68, 228, 126, 189, 87, 82, 161, 189, 38, 107, 40, 62, 205, 209, 41, 190, 176, 14, 28, 62, 66, 146, 227, 189, 194, 185, 214, 189, 216, 51, 56, 189, 6, 127, 131, 61, 54, 14, 172, 61, 49, 167, 227, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 149, 184, 189, 78, 136, 225, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {31, 125, 180, 190, 92, 148, 124, 62, 204, 110, 47, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {10, 166, 54, 189, 57, 139, 79, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0015/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}