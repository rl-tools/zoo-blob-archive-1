// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {112, 201, 10, 191, 203, 159, 125, 191, 13, 110, 213, 62, 32, 131, 181, 62, 118, 181, 23, 63, 70, 183, 2, 63, 85, 192, 113, 63, 54, 171, 12, 191, 6, 47, 55, 190, 166, 61, 114, 190, 100, 166, 1, 63, 174, 236, 73, 190, 212, 164, 211, 190, 25, 102, 32, 191, 234, 129, 213, 190, 18, 108, 60, 63, 152, 100, 203, 61, 145, 183, 30, 63, 71, 214, 175, 190, 19, 160, 134, 61, 191, 105, 219, 185, 219, 198, 212, 190, 189, 151, 31, 62, 155, 155, 136, 190, 226, 160, 15, 189, 167, 192, 137, 62, 184, 6, 222, 190, 246, 194, 56, 189, 216, 153, 62, 63, 71, 140, 203, 62, 93, 59, 43, 61, 26, 188, 142, 62, 250, 69, 49, 191, 180, 181, 20, 191, 106, 212, 86, 191, 77, 72, 209, 188, 181, 73, 137, 62, 38, 147, 240, 190, 48, 225, 235, 62, 113, 227, 96, 190, 232, 16, 33, 63, 112, 103, 151, 61, 86, 21, 28, 190, 20, 192, 185, 62, 29, 139, 0, 63, 53, 222, 93, 191, 241, 63, 235, 190, 100, 194, 190, 190, 63, 188, 211, 62, 143, 75, 150, 190, 85, 166, 158, 58, 83, 206, 178, 57, 109, 83, 37, 191, 59, 245, 242, 190, 147, 30, 78, 62, 162, 113, 196, 190, 40, 96, 192, 189, 210, 89, 253, 62, 175, 38, 49, 191, 252, 222, 162, 190, 11, 247, 64, 191, 13, 68, 168, 190, 136, 151, 39, 191, 180, 122, 152, 190, 211, 51, 254, 62, 89, 39, 159, 61, 228, 44, 255, 190, 90, 173, 241, 62, 18, 218, 190, 62, 228, 156, 8, 191, 209, 218, 172, 189, 137, 34, 152, 61, 249, 113, 150, 61, 6, 212, 54, 191, 45, 236, 176, 62, 172, 139, 56, 190, 59, 114, 22, 190, 57, 56, 69, 63, 149, 149, 21, 190, 45, 216, 38, 63, 248, 192, 125, 190, 23, 53, 3, 63, 124, 121, 211, 190, 202, 28, 36, 63, 41, 128, 102, 190, 165, 171, 104, 63, 171, 59, 43, 190, 216, 20, 211, 62, 166, 88, 160, 190, 0, 74, 206, 190, 143, 23, 99, 190, 253, 205, 93, 191, 35, 135, 42, 63, 210, 132, 158, 190, 177, 51, 37, 191, 63, 42, 67, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 213, 208, 190, 108, 246, 108, 190, 201, 14, 225, 62, 145, 162, 126, 190, 72, 38, 192, 62, 175, 73, 34, 62, 18, 98, 68, 62, 216, 159, 193, 62, 120, 126, 143, 190, 255, 198, 82, 191, 65, 192, 226, 62, 150, 226, 136, 62, 137, 195, 207, 188, 150, 164, 221, 62, 190, 154, 146, 62, 204, 14, 242, 61, 73, 154, 24, 63, 89, 220, 18, 191, 183, 246, 0, 190, 186, 159, 231, 190, 165, 45, 206, 190, 37, 140, 212, 62, 201, 24, 46, 63, 96, 242, 88, 61, 110, 36, 49, 62, 111, 228, 238, 61, 159, 236, 31, 190, 164, 230, 52, 61, 226, 153, 7, 63, 234, 68, 140, 60, 251, 0, 9, 189, 170, 182, 137, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 221, 190, 190, 173, 107, 100, 190, 246, 20, 240, 189, 82, 201, 195, 190, 171, 88, 62, 62, 83, 165, 18, 190, 167, 163, 109, 189, 183, 18, 120, 62, 129, 97, 27, 190, 61, 121, 60, 188, 147, 110, 47, 61, 203, 167, 144, 61, 182, 15, 129, 190, 96, 192, 228, 62, 185, 134, 166, 190, 205, 187, 55, 62, 183, 161, 228, 189, 9, 37, 25, 190, 235, 169, 40, 190, 174, 188, 32, 190, 210, 250, 71, 62, 154, 34, 19, 62, 64, 102, 206, 61, 74, 94, 168, 60, 60, 206, 98, 191, 112, 2, 21, 191, 95, 162, 142, 60, 31, 165, 119, 190, 116, 172, 178, 61, 222, 6, 18, 62, 133, 190, 147, 191, 20, 73, 85, 191, 112, 73, 245, 189, 72, 205, 154, 189, 150, 30, 44, 189, 63, 244, 222, 188, 52, 157, 181, 61, 104, 137, 136, 189, 214, 19, 27, 190, 254, 143, 133, 185, 90, 142, 15, 190, 152, 172, 223, 189, 161, 60, 241, 188, 208, 160, 43, 60, 243, 105, 3, 190, 214, 152, 212, 61, 206, 156, 29, 190, 22, 122, 20, 190, 64, 30, 10, 189, 168, 209, 189, 189, 96, 212, 236, 60, 59, 145, 190, 189, 107, 209, 12, 62, 130, 3, 252, 61, 251, 154, 39, 189, 238, 182, 86, 189, 188, 103, 246, 61, 189, 184, 247, 60, 245, 222, 70, 190, 184, 170, 221, 61, 9, 241, 184, 187, 240, 156, 33, 190, 76, 168, 226, 60, 199, 180, 15, 190, 114, 185, 22, 189, 135, 97, 201, 189, 39, 49, 8, 190, 191, 106, 42, 190, 163, 186, 220, 189, 227, 112, 44, 190, 157, 168, 191, 189, 192, 29, 213, 61, 85, 19, 166, 189, 252, 59, 46, 61, 212, 229, 58, 61, 73, 24, 15, 61, 68, 207, 194, 189, 153, 97, 96, 61, 46, 59, 52, 61, 228, 85, 197, 189, 33, 243, 43, 190, 88, 80, 38, 190, 74, 210, 126, 61, 150, 202, 19, 62, 28, 3, 144, 188, 128, 145, 225, 61, 25, 130, 141, 189, 94, 8, 5, 62, 65, 217, 140, 189, 149, 61, 234, 189, 120, 27, 17, 189, 48, 129, 251, 188, 45, 106, 37, 190, 196, 227, 246, 188, 75, 241, 233, 61, 142, 104, 132, 61, 182, 248, 63, 190, 49, 189, 34, 189, 233, 4, 195, 61, 48, 246, 169, 61, 119, 148, 180, 189, 177, 57, 190, 189, 85, 180, 205, 190, 164, 3, 198, 61, 80, 239, 36, 62, 197, 253, 15, 190, 149, 43, 159, 189, 150, 126, 146, 190, 195, 18, 48, 190, 75, 41, 116, 60, 161, 127, 136, 190, 134, 25, 173, 60, 27, 170, 177, 61, 253, 196, 92, 190, 179, 146, 114, 190, 238, 234, 225, 190, 36, 10, 93, 190, 17, 245, 48, 62, 87, 125, 184, 190, 214, 202, 183, 190, 244, 160, 238, 190, 154, 132, 15, 61, 60, 233, 219, 185, 235, 210, 4, 189, 34, 100, 164, 62, 25, 31, 162, 61, 155, 188, 97, 190, 160, 237, 143, 189, 5, 68, 174, 189, 178, 17, 148, 59, 153, 42, 139, 189, 3, 202, 199, 189, 83, 137, 26, 190, 63, 248, 226, 188, 10, 31, 241, 188, 231, 1, 147, 189, 167, 228, 201, 189, 243, 51, 192, 189, 12, 170, 245, 189, 212, 244, 189, 189, 107, 110, 139, 189, 69, 249, 25, 190, 178, 15, 129, 60, 193, 42, 203, 188, 197, 97, 114, 60, 106, 203, 187, 61, 36, 235, 167, 59, 68, 142, 15, 190, 0, 240, 230, 189, 22, 249, 27, 190, 72, 210, 167, 61, 238, 147, 18, 62, 77, 41, 11, 190, 155, 84, 229, 189, 185, 211, 59, 189, 89, 56, 40, 61, 249, 1, 239, 61, 167, 91, 178, 189, 75, 71, 9, 60, 52, 73, 222, 61, 105, 166, 152, 61, 123, 227, 7, 61, 190, 19, 30, 187, 183, 117, 249, 189, 97, 189, 3, 190, 41, 168, 93, 61, 17, 235, 3, 190, 149, 252, 35, 190, 89, 190, 153, 61, 88, 138, 7, 190, 127, 235, 17, 62, 243, 182, 198, 60, 39, 163, 4, 61, 90, 85, 20, 190, 20, 109, 254, 189, 154, 53, 9, 62, 239, 219, 233, 189, 199, 147, 237, 188, 191, 68, 3, 62, 180, 124, 5, 189, 119, 41, 163, 189, 133, 29, 191, 189, 210, 57, 185, 189, 75, 101, 228, 60, 81, 187, 159, 61, 32, 150, 148, 61, 119, 149, 48, 190, 42, 7, 247, 61, 209, 143, 234, 61, 226, 179, 32, 190, 39, 31, 16, 190, 48, 191, 29, 189, 44, 198, 230, 61, 84, 27, 143, 190, 41, 250, 187, 62, 189, 224, 23, 62, 241, 88, 1, 61, 81, 161, 171, 190, 231, 184, 135, 188, 57, 100, 91, 188, 210, 69, 189, 61, 153, 134, 186, 190, 146, 194, 58, 190, 102, 64, 220, 61, 145, 34, 16, 191, 81, 197, 184, 61, 7, 151, 105, 62, 6, 83, 128, 190, 250, 143, 109, 62, 6, 92, 197, 61, 219, 12, 38, 61, 204, 202, 21, 62, 252, 125, 247, 190, 68, 76, 50, 189, 253, 70, 7, 61, 230, 31, 93, 61, 93, 136, 147, 62, 72, 159, 184, 61, 197, 75, 141, 190, 12, 15, 89, 190, 191, 98, 211, 188, 93, 174, 64, 62, 174, 70, 159, 62, 1, 43, 113, 62, 211, 239, 204, 189, 49, 213, 188, 189, 111, 99, 164, 189, 253, 95, 212, 189, 181, 200, 70, 61, 193, 92, 134, 61, 222, 245, 216, 189, 33, 237, 224, 188, 217, 187, 255, 61, 215, 25, 167, 58, 16, 187, 50, 190, 36, 173, 215, 189, 150, 93, 26, 190, 7, 64, 83, 189, 216, 123, 208, 60, 49, 216, 208, 189, 224, 106, 138, 189, 146, 178, 9, 62, 34, 80, 175, 189, 249, 255, 79, 190, 199, 19, 190, 61, 136, 67, 11, 190, 227, 26, 33, 188, 13, 72, 44, 190, 135, 244, 172, 61, 195, 96, 28, 190, 41, 120, 234, 61, 138, 66, 160, 189, 78, 39, 14, 60, 45, 73, 87, 189, 229, 115, 33, 60, 108, 200, 33, 62, 65, 179, 11, 190, 58, 95, 144, 189, 179, 240, 182, 61, 49, 190, 4, 189, 49, 238, 190, 61, 167, 157, 235, 189, 81, 21, 229, 60, 214, 68, 132, 189, 154, 7, 101, 190, 167, 75, 197, 188, 115, 85, 194, 59, 36, 105, 203, 60, 212, 64, 206, 189, 81, 118, 36, 190, 228, 182, 39, 62, 26, 162, 58, 62, 151, 195, 169, 62, 77, 122, 24, 190, 162, 188, 157, 188, 79, 179, 144, 190, 120, 249, 27, 189, 116, 1, 55, 61, 51, 22, 5, 62, 191, 112, 78, 189, 58, 16, 141, 61, 175, 72, 141, 61, 64, 191, 85, 189, 144, 39, 106, 61, 247, 179, 187, 61, 137, 112, 100, 188, 36, 17, 27, 61, 65, 229, 126, 189, 123, 226, 137, 188, 32, 220, 155, 60, 163, 25, 137, 189, 134, 188, 122, 189, 80, 84, 215, 61, 64, 138, 91, 60, 66, 107, 60, 62, 211, 119, 209, 61, 32, 51, 68, 189, 31, 243, 254, 189, 191, 54, 142, 61, 167, 35, 101, 189, 179, 64, 113, 190, 239, 141, 53, 62, 199, 104, 75, 188, 237, 75, 163, 61, 222, 14, 104, 62, 185, 232, 152, 189, 184, 118, 228, 189, 8, 45, 251, 189, 204, 212, 160, 188, 4, 132, 209, 189, 95, 98, 223, 61, 113, 40, 105, 62, 59, 25, 24, 62, 233, 35, 52, 189, 14, 115, 238, 60, 99, 137, 50, 189, 230, 148, 14, 62, 196, 29, 69, 189, 226, 217, 21, 62, 116, 77, 177, 187, 226, 66, 251, 187, 234, 110, 94, 190, 39, 202, 106, 59, 205, 168, 21, 62, 180, 193, 209, 189, 234, 151, 50, 190, 223, 154, 94, 190, 41, 177, 201, 189, 8, 108, 19, 61, 110, 197, 205, 61, 1, 245, 91, 188, 103, 62, 157, 61, 75, 194, 2, 62, 11, 121, 62, 190, 225, 44, 127, 61, 40, 183, 71, 60, 232, 171, 49, 62, 65, 68, 181, 189, 78, 113, 45, 62, 23, 73, 60, 190, 210, 93, 136, 189, 135, 213, 235, 61, 224, 86, 215, 188, 134, 172, 152, 189, 20, 205, 27, 190, 128, 44, 180, 61, 63, 153, 177, 189, 112, 218, 238, 61, 6, 1, 78, 190, 191, 64, 186, 61, 39, 152, 24, 190, 171, 244, 234, 61, 100, 221, 61, 188, 151, 132, 4, 62, 57, 41, 91, 187, 112, 50, 5, 62, 212, 146, 145, 61, 224, 64, 90, 61, 130, 73, 168, 190, 75, 225, 70, 189, 52, 112, 27, 62, 56, 124, 53, 62, 53, 84, 117, 61, 198, 60, 93, 61, 173, 96, 36, 62, 239, 64, 138, 190, 108, 57, 145, 61, 46, 84, 254, 188, 195, 11, 98, 62, 176, 159, 133, 61, 242, 241, 71, 62, 67, 76, 109, 189, 234, 104, 137, 61, 150, 99, 15, 190, 179, 233, 16, 190, 254, 237, 164, 190, 252, 16, 90, 61, 201, 44, 210, 187, 32, 28, 165, 59, 113, 172, 81, 62, 16, 237, 171, 190, 124, 81, 194, 188, 66, 52, 160, 187, 236, 72, 48, 190, 245, 84, 67, 61, 22, 247, 186, 187, 119, 59, 170, 189, 54, 48, 4, 190, 150, 33, 4, 62, 198, 87, 155, 189, 218, 210, 168, 61, 33, 185, 28, 62, 224, 32, 40, 190, 253, 171, 180, 188, 252, 58, 34, 190, 114, 21, 9, 190, 201, 89, 46, 62, 5, 89, 25, 189, 56, 167, 134, 60, 102, 38, 171, 189, 174, 121, 132, 61, 134, 124, 73, 188, 46, 186, 15, 62, 125, 94, 204, 61, 196, 91, 198, 189, 89, 73, 32, 189, 64, 130, 216, 189, 144, 23, 27, 62, 56, 65, 5, 190, 22, 184, 37, 189, 136, 118, 239, 189, 201, 37, 199, 189, 218, 1, 30, 62, 193, 56, 120, 61, 63, 102, 212, 61, 195, 67, 63, 61, 151, 87, 199, 190, 7, 58, 107, 62, 152, 8, 110, 190, 188, 98, 81, 61, 137, 24, 78, 188, 88, 161, 19, 62, 195, 213, 10, 191, 128, 61, 134, 189, 18, 125, 172, 61, 122, 138, 22, 62, 214, 155, 18, 61, 141, 21, 245, 61, 137, 89, 137, 62, 22, 199, 187, 189, 35, 115, 220, 189, 152, 0, 40, 190, 219, 116, 202, 189, 104, 230, 169, 189, 225, 130, 77, 61, 216, 170, 56, 61, 8, 144, 195, 61, 18, 33, 138, 190, 175, 249, 17, 190, 71, 254, 65, 190, 88, 29, 12, 188, 96, 201, 75, 62, 199, 96, 6, 190, 75, 37, 238, 188, 251, 231, 149, 188, 245, 36, 34, 190, 62, 187, 22, 189, 17, 45, 100, 61, 207, 11, 39, 190, 166, 121, 240, 61, 155, 192, 231, 190, 111, 162, 190, 61, 158, 78, 91, 188, 54, 174, 16, 62, 145, 251, 75, 190, 115, 233, 90, 62, 172, 229, 82, 190, 220, 184, 251, 61, 53, 108, 229, 61, 43, 227, 9, 190, 85, 220, 233, 61, 177, 163, 82, 62, 174, 8, 198, 189, 208, 254, 99, 62, 254, 94, 236, 60, 100, 162, 96, 190, 42, 96, 190, 190, 232, 39, 251, 190, 199, 185, 207, 187, 120, 206, 14, 62, 30, 39, 21, 190, 173, 182, 123, 190, 14, 105, 55, 190, 15, 1, 244, 189, 198, 60, 44, 62, 36, 163, 146, 62, 57, 1, 107, 60, 98, 103, 165, 188, 16, 203, 193, 60, 154, 156, 15, 190, 71, 46, 75, 191, 14, 147, 183, 61, 252, 8, 184, 190, 126, 208, 158, 190, 46, 209, 203, 58, 188, 189, 30, 61, 83, 197, 97, 61, 177, 106, 86, 62, 188, 34, 84, 190, 168, 13, 232, 61, 185, 51, 244, 61, 87, 204, 17, 61, 144, 191, 15, 62, 84, 202, 125, 62, 164, 140, 14, 188, 3, 212, 11, 62, 239, 250, 236, 61, 36, 106, 220, 190, 41, 211, 211, 190, 193, 224, 120, 190, 33, 161, 227, 60, 106, 129, 147, 189, 33, 186, 13, 61, 101, 122, 180, 189, 139, 213, 182, 190, 132, 82, 243, 190, 250, 160, 152, 62, 102, 51, 223, 61, 82, 4, 176, 62, 69, 94, 27, 59, 56, 4, 25, 191, 186, 79, 253, 190, 188, 19, 15, 191, 163, 254, 182, 62, 146, 35, 19, 61, 39, 215, 166, 190, 206, 155, 41, 62, 143, 210, 142, 62, 166, 46, 206, 189, 251, 2, 44, 60, 39, 153, 189, 190, 11, 5, 155, 62, 58, 46, 43, 62, 92, 222, 149, 190, 24, 123, 133, 60, 68, 19, 59, 62, 222, 205, 44, 61, 114, 22, 1, 190, 163, 27, 215, 189, 172, 124, 129, 190, 71, 245, 161, 190, 70, 17, 7, 191, 251, 27, 7, 62, 134, 172, 132, 61, 41, 239, 11, 189, 55, 174, 115, 61, 254, 176, 20, 189, 132, 69, 252, 61, 68, 178, 176, 62, 87, 52, 106, 60, 248, 220, 191, 61, 217, 30, 2, 62, 66, 114, 22, 190, 195, 57, 112, 189, 236, 161, 87, 62, 38, 198, 207, 188, 15, 232, 23, 62, 157, 175, 106, 62, 70, 110, 229, 188, 143, 163, 221, 189, 221, 120, 78, 61, 46, 139, 249, 61, 127, 237, 160, 61, 17, 124, 29, 186, 115, 50, 199, 61, 109, 205, 182, 61, 63, 56, 99, 189, 112, 110, 39, 189, 20, 190, 199, 61, 245, 155, 255, 189, 117, 231, 196, 61, 25, 96, 17, 190, 237, 151, 51, 61, 211, 152, 198, 189, 208, 191, 51, 61, 139, 76, 199, 61, 190, 224, 137, 59, 96, 51, 92, 62, 177, 251, 224, 62, 100, 251, 101, 62, 2, 133, 140, 190, 167, 232, 174, 188, 126, 154, 200, 61, 179, 180, 246, 61, 162, 227, 251, 62, 184, 228, 22, 62, 30, 254, 218, 61, 96, 178, 133, 189, 204, 126, 202, 189, 30, 115, 7, 62, 122, 238, 38, 62, 22, 69, 112, 61, 93, 14, 181, 60, 178, 133, 187, 61, 181, 57, 202, 189, 101, 66, 65, 61, 217, 183, 149, 61, 50, 69, 226, 188, 20, 153, 129, 188, 5, 165, 160, 190, 202, 239, 149, 189, 248, 114, 189, 61, 233, 78, 243, 61, 99, 80, 30, 189, 255, 223, 255, 189, 84, 248, 103, 190, 126, 200, 193, 189, 15, 152, 150, 189, 158, 36, 151, 189, 232, 220, 85, 188, 10, 36, 7, 189, 16, 63, 176, 190, 45, 14, 253, 188, 205, 189, 36, 190, 49, 169, 122, 62, 101, 242, 9, 189, 175, 93, 217, 61, 128, 75, 4, 190, 59, 190, 37, 191, 48, 177, 189, 62, 244, 233, 13, 61, 17, 239, 182, 190, 142, 179, 24, 62, 125, 142, 147, 62, 196, 225, 79, 190, 115, 17, 121, 60, 22, 127, 208, 190, 54, 15, 114, 62, 53, 80, 116, 62, 104, 97, 182, 190, 28, 221, 7, 62, 30, 139, 168, 58, 72, 251, 25, 62, 81, 130, 32, 190, 135, 229, 47, 61, 218, 172, 179, 190, 202, 202, 76, 190, 207, 144, 186, 190, 117, 202, 139, 62, 245, 119, 52, 62, 96, 40, 40, 62, 7, 168, 9, 62, 71, 190, 25, 190, 170, 196, 98, 59, 139, 172, 164, 62, 254, 235, 23, 62, 149, 27, 222, 61, 216, 117, 249, 189, 126, 102, 176, 190, 90, 224, 121, 59, 123, 210, 142, 62, 201, 206, 134, 62, 116, 166, 17, 62, 143, 72, 39, 190, 16, 242, 165, 62, 45, 1, 85, 62, 102, 254, 142, 60, 156, 4, 94, 189, 212, 236, 145, 189, 199, 171, 101, 61, 58, 212, 84, 190, 100, 78, 112, 62, 150, 171, 137, 62, 153, 35, 153, 60, 5, 100, 130, 61, 49, 49, 129, 61, 168, 118, 129, 60, 232, 196, 201, 189, 96, 74, 123, 60, 200, 177, 67, 190, 37, 31, 209, 189, 133, 71, 99, 57, 17, 182, 76, 189, 112, 5, 34, 62, 98, 249, 140, 61, 235, 25, 214, 61, 83, 185, 188, 190, 192, 205, 176, 62, 252, 228, 187, 190, 198, 181, 126, 190, 24, 211, 240, 61, 234, 167, 15, 62, 97, 248, 16, 189, 5, 100, 138, 61, 101, 181, 96, 62, 182, 249, 70, 62, 177, 187, 11, 190, 126, 110, 51, 62, 220, 163, 206, 189, 223, 175, 162, 190, 108, 59, 125, 62, 10, 154, 26, 61, 157, 101, 217, 61, 237, 138, 53, 191, 134, 175, 98, 190, 232, 105, 107, 62, 231, 34, 77, 62, 18, 86, 243, 190, 250, 110, 120, 189, 53, 190, 150, 190, 196, 2, 53, 190, 177, 108, 216, 190, 17, 183, 75, 189, 239, 177, 29, 62, 223, 96, 219, 60, 25, 112, 76, 62, 250, 74, 155, 189, 120, 44, 24, 62, 49, 202, 130, 189, 177, 203, 73, 62, 94, 34, 35, 62, 211, 155, 107, 62, 63, 152, 247, 61, 142, 236, 28, 62, 128, 46, 79, 190, 214, 78, 66, 62, 138, 247, 138, 62, 118, 68, 247, 61, 80, 37, 55, 62, 0, 72, 19, 62, 214, 183, 80, 61, 228, 230, 174, 61, 44, 77, 77, 189, 193, 34, 28, 62, 78, 186, 250, 187, 137, 185, 18, 189, 45, 151, 76, 61, 194, 156, 223, 189, 213, 230, 138, 189, 255, 22, 239, 189, 67, 118, 192, 61, 215, 6, 38, 190, 30, 4, 28, 190, 250, 247, 14, 190, 158, 196, 39, 190, 78, 57, 184, 190, 186, 145, 73, 190, 56, 128, 125, 188, 82, 162, 54, 62, 173, 9, 42, 190, 101, 193, 6, 190, 96, 18, 232, 61, 244, 161, 221, 189, 141, 169, 255, 61, 76, 136, 109, 62, 185, 184, 0, 190, 151, 23, 0, 61, 68, 80, 12, 190, 219, 141, 140, 61, 223, 171, 48, 62, 160, 186, 250, 189, 189, 137, 127, 61, 159, 44, 199, 189, 243, 5, 98, 189, 73, 132, 131, 189, 113, 10, 206, 61, 68, 83, 39, 190, 125, 73, 161, 61, 31, 12, 194, 189, 246, 205, 90, 189, 253, 191, 17, 190, 157, 133, 131, 189, 204, 21, 110, 61, 242, 192, 117, 61, 36, 245, 117, 61, 52, 72, 40, 190, 206, 68, 140, 189, 93, 239, 68, 61, 39, 166, 20, 190, 70, 232, 168, 61, 105, 187, 12, 190, 131, 132, 170, 189, 189, 199, 130, 59, 154, 76, 198, 189, 81, 232, 97, 61, 149, 16, 106, 189, 108, 125, 49, 62, 104, 152, 250, 189, 169, 245, 114, 60, 226, 177, 178, 190, 244, 74, 199, 61, 155, 112, 11, 62, 181, 129, 111, 61, 19, 53, 150, 190, 119, 156, 71, 62, 159, 70, 106, 62, 24, 163, 86, 61, 97, 166, 45, 190, 174, 143, 212, 189, 75, 12, 202, 189, 184, 166, 81, 190, 255, 54, 158, 59, 43, 198, 235, 61, 217, 122, 28, 188, 203, 22, 144, 62, 101, 21, 212, 61, 170, 197, 42, 190, 201, 42, 117, 190, 210, 15, 89, 190, 15, 125, 73, 59, 140, 244, 240, 61, 181, 33, 170, 61, 239, 162, 61, 62, 90, 205, 70, 62, 76, 158, 165, 189, 80, 79, 60, 189, 227, 114, 117, 61, 104, 229, 42, 62, 120, 156, 75, 62, 219, 217, 50, 189, 135, 196, 246, 189, 179, 80, 84, 62, 167, 58, 203, 190, 236, 28, 202, 59, 18, 41, 223, 61, 234, 247, 81, 62, 195, 37, 34, 191, 69, 42, 218, 60, 177, 136, 81, 61, 176, 63, 197, 61, 66, 10, 201, 189, 24, 224, 221, 61, 117, 179, 81, 62, 244, 207, 222, 189, 189, 202, 175, 61, 13, 159, 25, 190, 47, 109, 226, 189, 65, 122, 61, 189, 96, 134, 102, 188, 217, 168, 193, 59, 154, 219, 149, 188, 136, 215, 230, 189, 31, 179, 191, 189, 213, 2, 17, 190, 78, 59, 208, 188, 91, 147, 60, 189, 52, 173, 82, 59, 233, 190, 239, 61, 35, 226, 181, 188, 31, 178, 230, 189, 130, 140, 116, 61, 167, 30, 32, 190, 198, 105, 15, 190, 193, 17, 109, 188, 18, 79, 153, 62, 149, 49, 91, 62, 160, 163, 140, 190, 104, 249, 58, 61, 135, 35, 32, 190, 167, 34, 135, 190, 194, 214, 86, 62, 105, 75, 134, 189, 196, 78, 85, 62, 182, 31, 214, 190, 234, 90, 195, 61, 128, 138, 181, 189, 163, 80, 176, 61, 131, 87, 255, 190, 23, 118, 131, 62, 216, 208, 130, 190, 218, 60, 146, 190, 131, 16, 139, 190, 63, 92, 212, 189, 190, 116, 161, 61, 229, 37, 82, 62, 86, 108, 178, 187, 219, 3, 180, 61, 227, 173, 177, 60, 19, 171, 131, 61, 32, 14, 235, 61, 216, 169, 19, 62, 231, 39, 63, 190, 27, 173, 45, 62, 19, 104, 113, 189, 135, 216, 110, 190, 173, 120, 185, 61, 176, 232, 128, 62, 100, 7, 129, 62, 19, 102, 57, 62, 38, 73, 49, 62, 198, 114, 61, 190, 115, 230, 39, 62, 44, 239, 9, 62, 112, 87, 6, 62, 89, 79, 113, 189, 176, 36, 190, 61, 112, 63, 65, 62, 100, 80, 204, 190, 73, 168, 9, 62, 135, 68, 12, 189, 208, 86, 131, 62, 125, 231, 34, 190, 69, 34, 149, 61, 48, 49, 123, 190, 80, 254, 157, 189, 137, 172, 13, 190, 244, 244, 167, 190, 188, 234, 137, 190, 56, 245, 49, 62, 114, 237, 66, 189, 25, 12, 101, 190, 144, 34, 136, 62, 115, 216, 3, 190, 155, 165, 219, 61, 77, 24, 98, 189, 227, 134, 233, 188, 181, 139, 199, 188, 46, 105, 9, 190, 180, 95, 16, 62, 206, 179, 172, 61, 29, 157, 248, 60, 158, 255, 84, 189, 219, 110, 132, 59, 175, 100, 5, 61, 190, 85, 95, 190, 4, 223, 0, 190, 132, 96, 52, 188, 87, 48, 156, 60, 151, 201, 90, 190, 131, 2, 168, 60, 41, 57, 24, 62, 228, 172, 142, 61, 189, 104, 71, 62, 143, 8, 166, 59, 101, 70, 52, 190, 200, 147, 166, 190, 233, 60, 23, 61, 190, 135, 88, 62, 137, 173, 66, 62, 164, 39, 34, 62, 135, 59, 200, 189, 24, 207, 134, 189, 140, 47, 0, 61, 213, 167, 74, 189, 21, 80, 103, 62, 19, 255, 11, 189, 122, 159, 144, 61, 25, 160, 179, 59, 20, 56, 82, 62, 24, 197, 178, 190, 181, 17, 128, 62, 60, 151, 85, 62, 236, 173, 167, 189, 104, 133, 130, 190, 39, 55, 11, 62, 253, 92, 247, 60, 116, 54, 64, 62, 36, 75, 16, 191, 207, 233, 89, 190, 58, 104, 127, 189, 39, 29, 138, 190, 170, 61, 185, 189, 163, 20, 141, 61, 171, 162, 200, 189, 127, 85, 64, 62, 105, 200, 6, 61, 25, 97, 136, 60, 184, 30, 142, 62, 74, 31, 167, 190, 22, 139, 241, 188, 52, 146, 135, 62, 205, 251, 72, 189, 84, 147, 211, 62, 208, 27, 47, 62, 135, 222, 22, 190, 18, 248, 207, 190, 186, 131, 35, 187, 124, 49, 98, 62, 102, 109, 138, 62, 177, 67, 145, 62, 74, 184, 230, 190, 48, 166, 33, 62, 146, 201, 149, 61, 49, 236, 153, 62, 203, 30, 149, 60, 91, 252, 134, 190, 126, 157, 43, 190, 216, 221, 234, 58, 168, 182, 182, 62, 100, 207, 171, 189, 143, 37, 111, 62, 128, 196, 53, 190, 114, 156, 10, 190, 67, 98, 171, 189, 0, 72, 203, 61, 196, 137, 26, 62, 105, 225, 245, 188, 48, 11, 88, 189, 26, 169, 157, 61, 26, 219, 185, 62, 148, 45, 77, 62, 147, 89, 167, 189, 125, 186, 208, 189, 130, 156, 62, 190, 34, 14, 242, 189, 21, 164, 34, 190, 123, 6, 133, 61, 194, 118, 92, 190, 216, 20, 0, 62, 109, 10, 193, 61, 203, 101, 242, 61, 214, 236, 197, 189, 88, 1, 179, 190, 241, 93, 203, 189, 125, 153, 2, 189, 122, 228, 191, 190, 187, 253, 56, 62, 168, 36, 28, 62, 85, 1, 178, 188, 14, 228, 75, 187, 41, 32, 68, 190, 193, 148, 143, 61, 174, 36, 155, 62, 129, 27, 27, 189, 106, 205, 109, 189, 25, 102, 148, 62, 216, 178, 204, 189, 203, 44, 24, 62, 153, 7, 150, 59, 28, 177, 136, 189, 128, 139, 182, 190, 36, 239, 57, 190, 190, 242, 16, 62, 198, 226, 154, 61, 186, 83, 19, 190, 204, 112, 84, 62, 167, 70, 25, 191, 211, 155, 185, 190, 76, 234, 139, 62, 239, 37, 239, 189, 190, 83, 201, 62, 252, 131, 193, 189, 152, 169, 160, 191, 175, 215, 43, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 205, 63, 62, 82, 80, 119, 60, 132, 43, 19, 190, 88, 134, 16, 62, 105, 192, 99, 189, 214, 209, 20, 190, 123, 19, 152, 62, 83, 235, 163, 189, 114, 38, 159, 62, 217, 92, 206, 61, 199, 110, 92, 190, 201, 212, 243, 60, 239, 77, 32, 190, 173, 234, 171, 190, 219, 1, 119, 190, 172, 154, 174, 61, 101, 246, 60, 59, 172, 165, 240, 61, 203, 198, 129, 188, 255, 100, 145, 189, 30, 58, 147, 189, 104, 55, 27, 189, 233, 141, 24, 62, 121, 169, 162, 188, 254, 161, 115, 62, 171, 210, 175, 190, 5, 184, 1, 62, 85, 93, 19, 189, 134, 3, 130, 62, 88, 128, 230, 61, 83, 225, 250, 60, 136, 22, 193, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 153, 35, 191, 215, 49, 199, 189, 41, 233, 99, 189, 1, 118, 149, 190, 79, 129, 184, 61, 235, 90, 245, 189, 46, 149, 62, 63, 50, 136, 148, 186, 186, 230, 214, 60, 86, 246, 251, 60, 166, 207, 20, 62, 178, 228, 40, 62, 170, 60, 14, 190, 9, 215, 222, 62, 65, 123, 34, 63, 126, 242, 4, 191, 31, 6, 154, 190, 61, 64, 121, 62, 54, 86, 131, 60, 180, 51, 147, 190, 62, 129, 129, 190, 159, 68, 17, 190, 164, 249, 53, 62, 167, 14, 204, 61, 5, 29, 178, 62, 158, 95, 138, 62, 82, 105, 223, 189, 171, 188, 138, 62, 176, 234, 97, 61, 229, 171, 4, 63, 209, 29, 148, 62, 184, 67, 12, 191, 162, 53, 60, 61, 89, 147, 80, 189, 105, 160, 175, 60, 67, 170, 26, 190, 106, 231, 43, 190, 92, 36, 242, 189, 148, 237, 43, 188, 111, 84, 205, 61, 97, 157, 13, 190, 103, 248, 213, 189, 109, 185, 29, 190, 202, 137, 43, 61, 65, 61, 146, 61, 26, 145, 120, 62, 70, 154, 187, 60, 117, 70, 182, 62, 2, 206, 57, 60, 38, 186, 57, 190, 252, 44, 140, 190, 21, 8, 90, 60, 102, 60, 84, 62, 39, 214, 62, 190, 48, 199, 133, 190, 38, 107, 40, 62, 168, 7, 83, 190, 153, 156, 163, 62, 159, 1, 157, 190, 155, 178, 83, 190, 13, 88, 6, 190, 67, 60, 38, 62, 219, 62, 201, 61, 9, 41, 116, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 91, 249, 188, 182, 164, 133, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {11, 85, 78, 191, 197, 252, 98, 190, 23, 25, 213, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {213, 23, 165, 63, 208, 202, 16, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0015/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}