// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 243, 152, 191, 134, 8, 32, 190, 90, 207, 217, 62, 163, 43, 243, 62, 110, 63, 98, 63, 49, 128, 225, 62, 168, 183, 122, 63, 91, 70, 44, 191, 173, 134, 242, 189, 192, 66, 144, 190, 240, 90, 42, 63, 3, 68, 44, 190, 68, 253, 102, 190, 8, 226, 206, 191, 183, 218, 150, 190, 113, 192, 78, 63, 87, 34, 121, 62, 248, 216, 16, 63, 174, 146, 27, 191, 5, 83, 142, 62, 225, 139, 167, 61, 207, 188, 109, 190, 251, 46, 16, 189, 88, 101, 152, 190, 116, 125, 177, 189, 192, 183, 5, 62, 195, 0, 237, 190, 16, 253, 97, 63, 134, 184, 91, 63, 171, 47, 202, 62, 248, 131, 147, 61, 103, 53, 250, 188, 153, 59, 33, 191, 35, 231, 249, 190, 46, 227, 170, 191, 217, 126, 231, 189, 180, 94, 120, 62, 156, 135, 7, 191, 166, 145, 216, 62, 78, 99, 183, 190, 236, 59, 57, 63, 201, 153, 9, 62, 230, 216, 8, 190, 98, 146, 171, 63, 182, 19, 179, 62, 203, 140, 69, 191, 29, 88, 219, 191, 109, 246, 172, 190, 239, 95, 144, 62, 97, 198, 218, 190, 84, 22, 154, 186, 231, 173, 230, 62, 62, 149, 128, 191, 234, 85, 250, 190, 1, 167, 72, 62, 179, 14, 105, 191, 39, 53, 50, 190, 198, 199, 56, 63, 157, 67, 135, 191, 28, 105, 153, 190, 246, 217, 88, 191, 64, 43, 145, 191, 22, 15, 9, 191, 157, 67, 189, 190, 113, 82, 113, 63, 255, 28, 203, 61, 240, 164, 215, 190, 141, 22, 187, 63, 6, 121, 171, 62, 89, 62, 65, 191, 58, 251, 162, 190, 132, 125, 108, 189, 108, 120, 231, 61, 232, 223, 76, 191, 190, 112, 129, 62, 120, 98, 123, 190, 221, 198, 63, 63, 210, 197, 12, 63, 102, 93, 193, 61, 219, 8, 64, 63, 83, 176, 64, 190, 39, 254, 21, 63, 86, 201, 153, 190, 197, 124, 20, 63, 107, 183, 146, 189, 115, 211, 161, 63, 239, 86, 19, 190, 112, 90, 6, 63, 64, 50, 63, 191, 197, 26, 65, 190, 226, 33, 36, 186, 238, 166, 171, 190, 194, 70, 36, 63, 45, 105, 185, 190, 174, 233, 255, 61, 148, 237, 42, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 217, 231, 189, 63, 217, 78, 190, 246, 192, 233, 62, 37, 69, 119, 190, 87, 74, 105, 62, 62, 19, 63, 62, 240, 175, 39, 62, 159, 153, 140, 62, 3, 240, 172, 190, 137, 215, 123, 191, 238, 40, 178, 62, 126, 237, 253, 62, 166, 224, 191, 189, 16, 172, 20, 63, 204, 157, 112, 62, 219, 52, 7, 189, 97, 236, 26, 63, 159, 151, 39, 191, 137, 212, 138, 61, 171, 234, 222, 190, 235, 72, 18, 191, 20, 61, 250, 62, 86, 77, 13, 63, 62, 224, 90, 190, 62, 49, 88, 60, 114, 163, 131, 189, 245, 250, 210, 189, 52, 181, 51, 189, 21, 142, 240, 62, 54, 95, 198, 61, 139, 255, 215, 189, 67, 147, 163, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 202, 46, 63, 201, 218, 146, 190, 216, 75, 105, 190, 206, 119, 200, 190, 197, 47, 247, 61, 11, 84, 163, 189, 159, 89, 227, 61, 230, 239, 80, 62, 212, 105, 3, 190, 173, 185, 196, 186, 203, 117, 164, 60, 212, 77, 17, 62, 164, 36, 231, 62, 212, 238, 1, 63, 56, 9, 153, 191, 165, 102, 86, 62, 126, 20, 131, 189, 76, 209, 139, 190, 106, 161, 198, 190, 168, 243, 242, 190, 233, 46, 36, 62, 52, 205, 18, 62, 21, 212, 202, 189, 77, 28, 132, 62, 40, 223, 238, 188, 100, 86, 129, 191, 144, 19, 59, 61, 145, 44, 115, 189, 242, 164, 128, 61, 77, 135, 110, 60, 90, 159, 136, 59, 113, 120, 15, 191, 112, 73, 245, 189, 72, 205, 154, 189, 150, 30, 44, 189, 63, 244, 222, 188, 52, 157, 181, 61, 104, 137, 136, 189, 214, 19, 27, 190, 254, 143, 133, 185, 90, 142, 15, 190, 152, 172, 223, 189, 161, 60, 241, 188, 208, 160, 43, 60, 243, 105, 3, 190, 214, 152, 212, 61, 206, 156, 29, 190, 22, 122, 20, 190, 64, 30, 10, 189, 168, 209, 189, 189, 96, 212, 236, 60, 59, 145, 190, 189, 107, 209, 12, 62, 130, 3, 252, 61, 251, 154, 39, 189, 238, 182, 86, 189, 188, 103, 246, 61, 189, 184, 247, 60, 245, 222, 70, 190, 184, 170, 221, 61, 9, 241, 184, 187, 240, 156, 33, 190, 76, 168, 226, 60, 199, 180, 15, 190, 114, 185, 22, 189, 135, 97, 201, 189, 39, 49, 8, 190, 191, 106, 42, 190, 163, 186, 220, 189, 227, 112, 44, 190, 157, 168, 191, 189, 192, 29, 213, 61, 85, 19, 166, 189, 252, 59, 46, 61, 212, 229, 58, 61, 73, 24, 15, 61, 68, 207, 194, 189, 153, 97, 96, 61, 46, 59, 52, 61, 228, 85, 197, 189, 33, 243, 43, 190, 88, 80, 38, 190, 74, 210, 126, 61, 150, 202, 19, 62, 28, 3, 144, 188, 128, 145, 225, 61, 25, 130, 141, 189, 94, 8, 5, 62, 65, 217, 140, 189, 149, 61, 234, 189, 120, 27, 17, 189, 48, 129, 251, 188, 45, 106, 37, 190, 196, 227, 246, 188, 75, 241, 233, 61, 142, 104, 132, 61, 196, 77, 158, 61, 43, 103, 243, 189, 148, 2, 131, 62, 231, 16, 77, 62, 99, 63, 63, 191, 164, 247, 95, 189, 101, 40, 27, 190, 211, 111, 205, 187, 147, 132, 153, 61, 16, 238, 125, 191, 53, 23, 231, 189, 149, 47, 87, 191, 137, 196, 82, 188, 72, 74, 129, 62, 252, 177, 186, 189, 119, 50, 19, 191, 64, 153, 153, 62, 54, 82, 43, 191, 204, 227, 195, 190, 27, 43, 77, 191, 134, 220, 191, 190, 77, 247, 211, 62, 215, 206, 192, 189, 98, 60, 188, 190, 126, 12, 40, 190, 18, 251, 19, 62, 227, 5, 0, 61, 238, 158, 143, 61, 210, 96, 211, 62, 123, 109, 16, 62, 34, 43, 148, 58, 60, 16, 59, 62, 5, 68, 174, 189, 178, 17, 148, 59, 153, 42, 139, 189, 3, 202, 199, 189, 83, 137, 26, 190, 63, 248, 226, 188, 10, 31, 241, 188, 231, 1, 147, 189, 167, 228, 201, 189, 243, 51, 192, 189, 12, 170, 245, 189, 212, 244, 189, 189, 107, 110, 139, 189, 69, 249, 25, 190, 178, 15, 129, 60, 193, 42, 203, 188, 197, 97, 114, 60, 106, 203, 187, 61, 36, 235, 167, 59, 68, 142, 15, 190, 0, 240, 230, 189, 22, 249, 27, 190, 72, 210, 167, 61, 238, 147, 18, 62, 77, 41, 11, 190, 155, 84, 229, 189, 185, 211, 59, 189, 89, 56, 40, 61, 249, 1, 239, 61, 167, 91, 178, 189, 75, 71, 9, 60, 52, 73, 222, 61, 153, 116, 78, 61, 196, 140, 86, 60, 226, 217, 105, 188, 183, 117, 249, 189, 97, 189, 3, 190, 155, 227, 184, 60, 17, 235, 3, 190, 149, 252, 35, 190, 89, 190, 153, 61, 71, 247, 7, 190, 127, 235, 17, 62, 64, 189, 122, 60, 81, 242, 82, 58, 177, 239, 20, 190, 101, 110, 25, 190, 154, 53, 9, 62, 248, 131, 4, 190, 199, 147, 237, 188, 161, 149, 0, 62, 180, 124, 5, 189, 119, 41, 163, 189, 72, 41, 195, 189, 38, 169, 229, 189, 75, 101, 228, 60, 22, 159, 66, 61, 12, 227, 39, 61, 119, 149, 48, 190, 9, 105, 182, 61, 209, 143, 234, 61, 226, 179, 32, 190, 104, 111, 48, 190, 131, 127, 143, 189, 184, 76, 16, 61, 60, 233, 130, 190, 245, 238, 149, 62, 78, 49, 148, 62, 180, 135, 238, 188, 102, 199, 168, 190, 16, 226, 236, 61, 46, 57, 97, 61, 101, 18, 55, 62, 38, 41, 212, 190, 200, 151, 139, 190, 231, 116, 97, 62, 2, 62, 11, 191, 50, 229, 103, 62, 178, 213, 140, 62, 22, 64, 90, 191, 23, 244, 12, 62, 42, 183, 230, 61, 144, 88, 242, 61, 78, 151, 175, 61, 26, 125, 148, 191, 29, 234, 191, 61, 61, 47, 227, 61, 252, 28, 148, 60, 221, 189, 90, 62, 195, 226, 186, 61, 197, 251, 87, 190, 240, 173, 79, 190, 177, 120, 53, 62, 34, 130, 242, 61, 41, 43, 141, 62, 192, 72, 98, 62, 211, 239, 204, 189, 49, 213, 188, 189, 111, 99, 164, 189, 253, 95, 212, 189, 181, 200, 70, 61, 193, 92, 134, 61, 222, 245, 216, 189, 33, 237, 224, 188, 217, 187, 255, 61, 215, 25, 167, 58, 16, 187, 50, 190, 36, 173, 215, 189, 150, 93, 26, 190, 7, 64, 83, 189, 216, 123, 208, 60, 49, 216, 208, 189, 224, 106, 138, 189, 146, 178, 9, 62, 34, 80, 175, 189, 249, 255, 79, 190, 199, 19, 190, 61, 136, 67, 11, 190, 227, 26, 33, 188, 13, 72, 44, 190, 135, 244, 172, 61, 195, 96, 28, 190, 41, 120, 234, 61, 138, 66, 160, 189, 78, 39, 14, 60, 45, 73, 87, 189, 229, 115, 33, 60, 108, 200, 33, 62, 255, 1, 7, 190, 107, 231, 13, 190, 161, 73, 4, 60, 225, 179, 128, 190, 229, 180, 149, 189, 180, 32, 250, 189, 156, 9, 186, 59, 70, 227, 115, 189, 203, 188, 166, 190, 188, 31, 163, 189, 153, 177, 107, 61, 100, 164, 77, 62, 177, 148, 156, 189, 250, 203, 129, 190, 32, 32, 238, 61, 163, 56, 135, 61, 9, 200, 204, 62, 163, 177, 171, 189, 244, 251, 89, 189, 207, 189, 130, 190, 92, 241, 42, 190, 144, 133, 130, 189, 78, 112, 136, 61, 9, 86, 83, 190, 29, 239, 190, 61, 195, 219, 135, 61, 8, 92, 20, 60, 68, 64, 145, 61, 187, 185, 118, 62, 43, 249, 241, 61, 142, 140, 102, 61, 196, 236, 77, 189, 189, 122, 166, 61, 178, 245, 211, 189, 112, 36, 204, 189, 16, 86, 10, 189, 193, 124, 164, 189, 78, 229, 188, 59, 242, 45, 159, 62, 218, 162, 85, 61, 123, 35, 237, 189, 234, 118, 154, 190, 10, 158, 62, 61, 58, 10, 250, 59, 145, 151, 121, 190, 59, 219, 227, 61, 127, 218, 193, 189, 150, 17, 95, 61, 102, 85, 147, 62, 138, 121, 80, 190, 122, 43, 172, 190, 44, 36, 238, 190, 206, 134, 24, 189, 160, 110, 84, 190, 94, 77, 246, 59, 176, 210, 138, 62, 234, 170, 106, 62, 86, 149, 75, 189, 18, 155, 138, 61, 206, 175, 78, 189, 132, 164, 65, 62, 203, 76, 65, 61, 233, 177, 47, 62, 202, 213, 62, 60, 57, 55, 146, 188, 185, 111, 94, 190, 96, 35, 246, 187, 205, 168, 21, 62, 179, 100, 224, 189, 46, 224, 56, 190, 52, 217, 94, 190, 41, 177, 201, 189, 8, 108, 19, 61, 110, 197, 205, 61, 1, 245, 91, 188, 186, 228, 124, 61, 72, 206, 236, 61, 11, 121, 62, 190, 14, 184, 120, 61, 14, 141, 229, 59, 196, 7, 39, 62, 65, 68, 181, 189, 196, 202, 38, 62, 196, 130, 60, 190, 210, 93, 136, 189, 135, 213, 235, 61, 34, 53, 232, 188, 20, 174, 152, 189, 13, 250, 40, 190, 67, 33, 169, 61, 63, 153, 177, 189, 79, 15, 223, 61, 6, 1, 78, 190, 151, 2, 181, 61, 60, 162, 36, 190, 82, 199, 222, 61, 171, 17, 193, 58, 162, 46, 32, 189, 147, 140, 227, 188, 138, 80, 141, 190, 195, 213, 85, 62, 160, 26, 135, 188, 45, 18, 6, 191, 136, 177, 18, 190, 74, 120, 236, 189, 193, 120, 14, 191, 236, 42, 79, 190, 103, 41, 12, 63, 45, 238, 46, 62, 23, 150, 22, 191, 250, 157, 75, 189, 72, 137, 211, 189, 29, 62, 113, 62, 235, 141, 7, 190, 151, 255, 225, 62, 116, 175, 126, 189, 54, 30, 225, 60, 154, 75, 236, 190, 170, 195, 125, 190, 35, 248, 221, 190, 83, 159, 109, 61, 89, 214, 161, 189, 5, 184, 52, 191, 122, 11, 55, 62, 46, 67, 76, 191, 231, 161, 149, 189, 189, 48, 34, 189, 246, 37, 97, 190, 245, 84, 67, 61, 22, 247, 186, 187, 119, 59, 170, 189, 54, 48, 4, 190, 150, 33, 4, 62, 198, 87, 155, 189, 218, 210, 168, 61, 33, 185, 28, 62, 224, 32, 40, 190, 253, 171, 180, 188, 252, 58, 34, 190, 114, 21, 9, 190, 201, 89, 46, 62, 5, 89, 25, 189, 56, 167, 134, 60, 102, 38, 171, 189, 174, 121, 132, 61, 134, 124, 73, 188, 46, 186, 15, 62, 125, 94, 204, 61, 196, 91, 198, 189, 89, 73, 32, 189, 64, 130, 216, 189, 144, 23, 27, 62, 56, 65, 5, 190, 22, 184, 37, 189, 136, 118, 239, 189, 201, 37, 199, 189, 218, 1, 30, 62, 193, 56, 120, 61, 63, 102, 212, 61, 195, 67, 63, 61, 59, 83, 206, 190, 96, 207, 131, 62, 238, 10, 31, 190, 188, 98, 81, 61, 235, 25, 12, 190, 99, 78, 21, 62, 84, 191, 55, 191, 128, 61, 134, 189, 18, 125, 172, 61, 243, 175, 163, 62, 214, 155, 18, 61, 166, 125, 7, 191, 182, 96, 143, 62, 150, 111, 78, 190, 78, 10, 1, 190, 152, 0, 40, 190, 87, 81, 83, 190, 104, 230, 169, 189, 155, 2, 114, 191, 216, 170, 56, 61, 8, 144, 195, 61, 77, 178, 183, 190, 201, 162, 77, 190, 149, 145, 58, 190, 99, 121, 150, 187, 20, 100, 68, 62, 199, 96, 6, 190, 106, 209, 170, 188, 96, 78, 203, 190, 252, 106, 100, 190, 118, 209, 0, 189, 248, 177, 92, 61, 186, 2, 205, 190, 118, 198, 179, 62, 68, 92, 50, 191, 142, 38, 119, 190, 18, 1, 123, 62, 91, 45, 123, 62, 14, 5, 206, 189, 166, 196, 142, 62, 79, 132, 173, 190, 215, 6, 27, 63, 126, 58, 204, 61, 101, 65, 254, 189, 221, 219, 156, 60, 3, 196, 227, 62, 28, 239, 158, 61, 107, 218, 29, 63, 9, 124, 76, 190, 2, 191, 185, 190, 50, 134, 6, 62, 181, 242, 93, 190, 1, 16, 16, 189, 124, 183, 204, 62, 252, 1, 28, 61, 249, 205, 48, 62, 64, 164, 9, 191, 86, 178, 18, 189, 176, 132, 206, 189, 224, 88, 134, 62, 106, 227, 122, 62, 227, 23, 216, 190, 37, 151, 178, 189, 27, 109, 27, 190, 217, 240, 58, 191, 179, 169, 249, 62, 188, 216, 246, 190, 234, 243, 127, 190, 28, 44, 173, 61, 56, 164, 3, 62, 189, 68, 219, 188, 68, 76, 77, 62, 16, 173, 106, 190, 140, 49, 115, 62, 79, 89, 165, 61, 23, 110, 124, 62, 40, 98, 224, 61, 53, 159, 146, 62, 212, 245, 21, 61, 97, 178, 155, 62, 240, 248, 16, 62, 176, 76, 28, 191, 161, 24, 121, 191, 95, 34, 146, 191, 210, 142, 37, 61, 239, 186, 6, 189, 233, 60, 43, 188, 17, 72, 201, 189, 237, 104, 90, 187, 47, 231, 171, 190, 109, 125, 175, 62, 214, 180, 245, 61, 214, 175, 205, 62, 179, 56, 70, 190, 147, 96, 68, 190, 136, 208, 40, 191, 131, 183, 2, 191, 170, 5, 191, 62, 102, 17, 241, 61, 243, 223, 2, 190, 151, 138, 6, 191, 101, 149, 191, 62, 97, 168, 219, 190, 174, 104, 2, 62, 30, 31, 187, 190, 8, 174, 164, 62, 226, 28, 136, 62, 59, 115, 91, 191, 123, 92, 222, 61, 221, 240, 197, 188, 156, 31, 28, 189, 27, 183, 158, 61, 36, 116, 177, 61, 16, 153, 3, 191, 112, 49, 119, 191, 106, 21, 76, 191, 46, 130, 193, 60, 190, 87, 25, 190, 29, 18, 50, 190, 66, 34, 171, 62, 184, 30, 11, 62, 255, 199, 217, 61, 197, 34, 235, 62, 82, 210, 246, 61, 44, 44, 215, 61, 196, 13, 23, 62, 242, 90, 167, 189, 141, 118, 48, 189, 60, 105, 51, 62, 234, 226, 147, 188, 230, 37, 72, 60, 92, 43, 185, 62, 118, 130, 87, 190, 225, 244, 216, 189, 110, 111, 89, 61, 23, 186, 74, 62, 36, 116, 63, 62, 204, 3, 170, 60, 35, 250, 37, 62, 126, 136, 52, 62, 104, 163, 254, 188, 97, 249, 170, 60, 183, 106, 223, 61, 143, 247, 18, 191, 57, 62, 179, 188, 92, 151, 210, 189, 128, 19, 220, 189, 122, 17, 43, 190, 232, 38, 197, 189, 112, 50, 16, 62, 117, 223, 217, 187, 2, 15, 153, 61, 215, 59, 193, 62, 110, 95, 99, 62, 118, 219, 42, 189, 229, 124, 22, 188, 165, 115, 162, 62, 250, 144, 229, 61, 18, 251, 237, 62, 228, 127, 12, 62, 5, 204, 18, 191, 185, 24, 139, 189, 133, 109, 216, 61, 43, 81, 47, 190, 87, 103, 44, 62, 197, 152, 147, 62, 43, 27, 133, 190, 176, 125, 102, 61, 74, 173, 127, 190, 233, 166, 178, 191, 228, 102, 245, 61, 180, 228, 43, 188, 215, 21, 159, 61, 55, 0, 10, 191, 190, 97, 208, 191, 91, 215, 33, 188, 184, 209, 156, 62, 209, 66, 192, 189, 67, 17, 139, 188, 157, 78, 85, 190, 135, 120, 86, 190, 123, 190, 206, 190, 162, 133, 20, 192, 107, 21, 161, 190, 68, 100, 84, 190, 11, 164, 88, 191, 162, 74, 134, 190, 124, 84, 30, 61, 35, 250, 128, 61, 35, 0, 193, 61, 2, 49, 103, 190, 254, 22, 18, 191, 77, 250, 19, 191, 195, 167, 209, 62, 194, 120, 155, 61, 79, 61, 9, 190, 142, 52, 235, 190, 125, 31, 196, 62, 238, 174, 164, 190, 180, 60, 7, 62, 175, 223, 231, 190, 233, 22, 127, 62, 161, 14, 150, 62, 216, 60, 79, 191, 137, 145, 91, 62, 227, 40, 67, 189, 209, 151, 4, 62, 80, 2, 105, 188, 47, 227, 89, 62, 76, 12, 50, 191, 47, 210, 104, 191, 18, 63, 64, 191, 115, 159, 70, 62, 2, 212, 244, 61, 155, 254, 1, 62, 137, 58, 239, 62, 188, 123, 24, 59, 210, 145, 199, 60, 157, 32, 217, 62, 18, 15, 123, 62, 209, 181, 71, 62, 250, 30, 32, 190, 228, 152, 139, 190, 184, 33, 40, 61, 82, 11, 125, 62, 156, 159, 92, 62, 132, 176, 10, 62, 187, 230, 5, 190, 80, 135, 61, 62, 227, 229, 47, 62, 247, 49, 17, 188, 197, 170, 112, 190, 210, 212, 204, 190, 127, 201, 5, 60, 203, 200, 244, 189, 141, 27, 230, 189, 49, 249, 90, 62, 162, 27, 66, 189, 226, 137, 205, 60, 150, 10, 76, 62, 72, 177, 172, 187, 94, 191, 198, 190, 45, 131, 62, 191, 126, 123, 106, 191, 216, 157, 206, 189, 98, 207, 71, 189, 89, 45, 183, 189, 218, 197, 128, 62, 74, 248, 56, 61, 137, 126, 112, 61, 13, 254, 130, 188, 40, 231, 152, 62, 192, 69, 1, 191, 171, 221, 34, 191, 206, 20, 184, 61, 22, 65, 201, 61, 246, 70, 60, 189, 92, 126, 7, 60, 85, 20, 190, 62, 10, 109, 158, 62, 248, 62, 166, 191, 63, 128, 70, 62, 246, 60, 245, 189, 21, 88, 144, 190, 149, 90, 41, 62, 118, 126, 28, 189, 162, 9, 252, 61, 134, 118, 120, 191, 65, 186, 117, 190, 156, 133, 110, 62, 45, 61, 36, 62, 228, 35, 231, 190, 225, 44, 31, 62, 154, 120, 23, 191, 169, 88, 45, 191, 83, 118, 67, 191, 115, 248, 250, 189, 226, 26, 21, 62, 64, 41, 39, 59, 94, 38, 42, 63, 152, 135, 25, 187, 34, 233, 252, 61, 222, 30, 216, 60, 154, 63, 79, 62, 233, 235, 159, 62, 20, 205, 169, 62, 12, 254, 232, 61, 97, 17, 3, 62, 254, 46, 1, 62, 207, 230, 211, 189, 239, 182, 156, 62, 159, 211, 2, 63, 125, 95, 27, 62, 223, 37, 182, 61, 60, 41, 4, 190, 217, 10, 95, 62, 12, 243, 18, 62, 46, 118, 168, 191, 73, 62, 9, 62, 124, 185, 34, 188, 65, 149, 1, 62, 169, 208, 209, 190, 62, 205, 35, 191, 58, 174, 65, 191, 19, 108, 210, 61, 23, 91, 45, 190, 228, 216, 83, 190, 200, 240, 151, 190, 158, 24, 65, 188, 74, 236, 78, 191, 3, 99, 182, 191, 163, 171, 203, 189, 51, 225, 135, 62, 73, 79, 174, 190, 117, 122, 89, 62, 233, 109, 240, 61, 246, 136, 38, 189, 146, 13, 59, 62, 195, 222, 172, 62, 88, 201, 41, 189, 151, 23, 0, 61, 68, 80, 12, 190, 219, 141, 140, 61, 223, 171, 48, 62, 160, 186, 250, 189, 189, 137, 127, 61, 159, 44, 199, 189, 243, 5, 98, 189, 73, 132, 131, 189, 113, 10, 206, 61, 68, 83, 39, 190, 125, 73, 161, 61, 31, 12, 194, 189, 246, 205, 90, 189, 253, 191, 17, 190, 157, 133, 131, 189, 204, 21, 110, 61, 242, 192, 117, 61, 36, 245, 117, 61, 52, 72, 40, 190, 206, 68, 140, 189, 93, 239, 68, 61, 39, 166, 20, 190, 70, 232, 168, 61, 105, 187, 12, 190, 131, 132, 170, 189, 189, 199, 130, 59, 154, 76, 198, 189, 81, 232, 97, 61, 149, 16, 106, 189, 108, 125, 49, 62, 104, 152, 250, 189, 62, 246, 129, 188, 225, 42, 164, 190, 93, 127, 82, 61, 227, 132, 126, 62, 243, 58, 142, 189, 62, 11, 136, 190, 19, 87, 39, 62, 207, 55, 142, 62, 22, 134, 54, 62, 153, 121, 52, 190, 150, 203, 63, 189, 243, 179, 201, 187, 229, 170, 28, 190, 105, 219, 149, 61, 138, 237, 25, 62, 146, 85, 237, 190, 252, 176, 109, 62, 46, 68, 49, 62, 128, 188, 47, 190, 251, 167, 137, 190, 79, 223, 172, 190, 91, 208, 67, 61, 42, 88, 237, 61, 188, 57, 46, 189, 97, 58, 29, 62, 98, 142, 91, 62, 74, 214, 10, 62, 187, 225, 11, 188, 140, 249, 144, 62, 21, 79, 72, 62, 50, 124, 70, 62, 227, 225, 15, 189, 51, 71, 34, 190, 240, 4, 62, 62, 120, 209, 4, 191, 236, 28, 202, 59, 18, 41, 223, 61, 162, 241, 40, 62, 160, 111, 57, 191, 69, 42, 218, 60, 177, 136, 81, 61, 204, 96, 239, 61, 66, 10, 201, 189, 66, 117, 8, 62, 172, 201, 37, 62, 186, 9, 28, 190, 153, 27, 88, 61, 219, 45, 25, 190, 209, 32, 93, 190, 65, 122, 61, 189, 64, 253, 251, 189, 217, 168, 193, 59, 154, 219, 149, 188, 229, 89, 21, 190, 83, 226, 4, 190, 66, 62, 28, 190, 16, 181, 156, 189, 54, 174, 164, 189, 52, 173, 82, 59, 139, 51, 153, 61, 112, 86, 247, 189, 31, 178, 230, 189, 93, 188, 157, 60, 111, 246, 69, 190, 228, 161, 80, 190, 80, 65, 129, 189, 218, 61, 230, 62, 36, 72, 205, 61, 159, 171, 224, 191, 5, 79, 185, 61, 215, 143, 241, 190, 95, 175, 195, 190, 185, 241, 151, 61, 251, 149, 167, 189, 112, 90, 89, 62, 116, 199, 2, 191, 115, 59, 222, 61, 89, 19, 139, 190, 78, 169, 39, 186, 175, 215, 181, 191, 225, 234, 251, 62, 68, 185, 194, 190, 108, 75, 30, 191, 76, 126, 5, 191, 182, 247, 229, 189, 203, 156, 252, 189, 101, 239, 106, 61, 129, 217, 198, 189, 204, 111, 69, 62, 155, 54, 165, 188, 1, 191, 203, 61, 246, 71, 26, 62, 78, 116, 137, 62, 156, 123, 145, 187, 69, 197, 46, 62, 187, 212, 192, 189, 68, 71, 158, 189, 175, 90, 84, 190, 89, 149, 82, 62, 188, 239, 157, 62, 247, 93, 100, 62, 170, 97, 142, 60, 222, 209, 208, 188, 18, 38, 169, 62, 93, 195, 48, 62, 197, 232, 128, 191, 12, 136, 160, 61, 117, 246, 0, 63, 161, 132, 81, 62, 52, 141, 22, 191, 150, 149, 174, 189, 111, 41, 79, 190, 59, 88, 104, 62, 218, 4, 14, 190, 217, 27, 25, 62, 186, 22, 128, 190, 108, 59, 97, 189, 233, 242, 163, 190, 117, 208, 37, 191, 92, 225, 226, 190, 21, 105, 67, 62, 132, 242, 246, 189, 119, 24, 241, 189, 124, 180, 83, 62, 193, 50, 247, 189, 35, 114, 55, 62, 166, 240, 169, 188, 36, 99, 44, 188, 237, 126, 229, 190, 255, 165, 17, 190, 238, 207, 44, 189, 223, 119, 11, 62, 54, 240, 77, 190, 42, 27, 94, 189, 12, 100, 152, 189, 7, 237, 135, 60, 10, 149, 83, 190, 147, 214, 170, 189, 117, 89, 26, 189, 170, 144, 191, 188, 100, 105, 151, 190, 61, 39, 9, 61, 168, 158, 28, 62, 27, 120, 21, 188, 143, 82, 237, 61, 49, 225, 219, 189, 15, 11, 90, 191, 145, 186, 146, 191, 109, 189, 87, 60, 42, 174, 101, 62, 60, 191, 70, 62, 93, 33, 209, 61, 168, 133, 143, 190, 21, 146, 127, 189, 221, 115, 9, 62, 187, 220, 158, 189, 73, 103, 178, 62, 51, 238, 145, 189, 207, 115, 29, 61, 202, 48, 27, 189, 239, 132, 147, 61, 8, 28, 162, 190, 149, 213, 136, 62, 178, 127, 236, 62, 107, 168, 32, 61, 86, 125, 129, 190, 110, 61, 87, 62, 202, 203, 8, 62, 64, 12, 197, 62, 162, 245, 26, 191, 115, 219, 33, 190, 215, 73, 72, 189, 110, 243, 140, 190, 181, 209, 110, 61, 190, 142, 2, 62, 200, 248, 34, 191, 239, 193, 5, 62, 45, 233, 70, 62, 54, 32, 47, 62, 126, 24, 212, 62, 183, 218, 27, 191, 12, 204, 245, 61, 3, 77, 172, 62, 108, 250, 137, 190, 190, 154, 160, 62, 54, 248, 39, 62, 223, 208, 30, 61, 198, 170, 211, 190, 230, 36, 109, 62, 102, 49, 131, 62, 57, 242, 79, 62, 235, 117, 125, 62, 6, 238, 170, 190, 248, 252, 163, 61, 188, 103, 1, 62, 131, 63, 61, 62, 66, 252, 37, 62, 11, 6, 211, 189, 40, 209, 254, 190, 40, 150, 159, 187, 228, 24, 157, 62, 178, 197, 141, 191, 56, 248, 74, 62, 250, 80, 187, 60, 122, 206, 183, 62, 51, 143, 202, 190, 123, 112, 206, 189, 231, 191, 135, 61, 24, 21, 28, 60, 209, 120, 32, 189, 99, 83, 15, 62, 41, 110, 217, 62, 88, 127, 91, 62, 202, 136, 197, 190, 138, 251, 250, 190, 169, 161, 226, 190, 93, 203, 2, 62, 69, 212, 62, 190, 236, 27, 110, 57, 228, 147, 108, 62, 94, 225, 19, 59, 59, 56, 230, 61, 56, 84, 122, 62, 164, 177, 162, 61, 179, 77, 247, 62, 104, 121, 166, 190, 161, 231, 16, 190, 23, 198, 224, 190, 71, 206, 153, 62, 143, 159, 190, 60, 166, 217, 73, 62, 212, 84, 60, 189, 83, 95, 90, 190, 42, 230, 236, 62, 195, 154, 107, 62, 87, 69, 74, 62, 49, 139, 167, 62, 5, 171, 132, 62, 118, 116, 38, 191, 20, 94, 175, 62, 243, 18, 215, 188, 115, 42, 181, 189, 133, 251, 200, 190, 143, 121, 178, 190, 237, 210, 77, 62, 22, 68, 143, 188, 56, 60, 150, 190, 79, 50, 228, 62, 65, 224, 106, 62, 16, 41, 229, 190, 200, 52, 59, 62, 212, 35, 23, 189, 181, 177, 109, 62, 44, 23, 62, 190, 83, 178, 117, 189, 238, 115, 183, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 90, 95, 62, 82, 80, 119, 60, 132, 43, 19, 190, 155, 40, 195, 62, 105, 192, 99, 189, 5, 17, 36, 190, 148, 208, 160, 62, 83, 235, 163, 189, 0, 38, 180, 62, 42, 89, 43, 62, 161, 101, 101, 190, 247, 70, 100, 61, 239, 77, 32, 190, 92, 113, 251, 190, 61, 209, 75, 190, 127, 157, 251, 61, 180, 123, 142, 60, 72, 204, 191, 61, 219, 179, 174, 61, 214, 181, 33, 188, 182, 42, 20, 190, 162, 183, 196, 61, 37, 255, 29, 62, 121, 169, 162, 188, 129, 117, 115, 62, 76, 253, 221, 190, 90, 2, 77, 62, 70, 35, 140, 60, 214, 12, 137, 62, 51, 184, 38, 62, 154, 121, 241, 60, 112, 42, 153, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 184, 52, 191, 215, 49, 199, 189, 41, 233, 99, 189, 185, 124, 93, 191, 79, 129, 184, 61, 78, 53, 245, 189, 141, 108, 41, 63, 50, 136, 148, 186, 241, 171, 80, 188, 158, 29, 105, 189, 103, 202, 20, 62, 232, 100, 246, 62, 170, 60, 14, 190, 197, 117, 110, 63, 78, 225, 136, 63, 52, 53, 133, 191, 209, 44, 2, 191, 11, 170, 48, 62, 85, 116, 132, 62, 116, 162, 215, 190, 46, 79, 131, 190, 100, 242, 148, 190, 78, 251, 221, 62, 167, 14, 204, 61, 114, 255, 30, 62, 57, 149, 161, 62, 24, 76, 159, 190, 28, 232, 169, 62, 218, 133, 91, 190, 206, 193, 230, 62, 3, 68, 155, 62, 61, 243, 10, 191, 209, 154, 189, 61, 89, 147, 80, 189, 105, 160, 175, 60, 45, 211, 240, 61, 106, 231, 43, 190, 152, 41, 242, 189, 133, 49, 135, 60, 111, 84, 205, 61, 51, 103, 39, 190, 129, 178, 138, 189, 12, 184, 29, 190, 243, 228, 24, 62, 65, 61, 146, 61, 188, 66, 240, 62, 136, 182, 152, 190, 32, 167, 17, 62, 81, 237, 51, 62, 160, 19, 137, 190, 31, 248, 79, 191, 94, 88, 33, 62, 42, 247, 213, 61, 169, 213, 87, 189, 57, 73, 133, 191, 38, 107, 40, 62, 255, 155, 85, 190, 34, 166, 162, 62, 96, 7, 163, 190, 244, 48, 135, 190, 197, 49, 155, 190, 212, 31, 69, 62, 81, 65, 135, 61, 228, 94, 142, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 225, 90, 189, 210, 218, 108, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {14, 21, 132, 63, 12, 125, 11, 63, 118, 228, 1, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {52, 190, 90, 192, 24, 153, 44, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0015/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}