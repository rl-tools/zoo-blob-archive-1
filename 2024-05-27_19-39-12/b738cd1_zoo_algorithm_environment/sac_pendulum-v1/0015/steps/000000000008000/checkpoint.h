// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 29, 40, 191, 91, 199, 25, 191, 56, 31, 214, 62, 93, 153, 214, 62, 232, 63, 69, 63, 95, 200, 252, 62, 244, 167, 116, 63, 162, 197, 47, 191, 121, 195, 33, 190, 188, 5, 125, 190, 57, 234, 24, 63, 17, 209, 62, 190, 125, 13, 91, 190, 13, 193, 156, 191, 111, 222, 178, 190, 151, 23, 70, 63, 238, 106, 123, 62, 69, 138, 27, 63, 8, 45, 230, 190, 85, 59, 46, 62, 158, 54, 168, 61, 93, 107, 172, 190, 226, 175, 167, 189, 214, 226, 167, 190, 214, 29, 194, 189, 177, 20, 44, 62, 90, 18, 225, 190, 211, 177, 225, 62, 7, 99, 51, 63, 173, 114, 184, 62, 53, 145, 90, 61, 187, 150, 174, 61, 42, 204, 46, 191, 175, 91, 241, 190, 112, 206, 147, 191, 64, 248, 248, 189, 11, 191, 141, 62, 92, 83, 226, 190, 143, 103, 231, 62, 255, 37, 172, 190, 76, 93, 35, 63, 60, 182, 37, 61, 195, 153, 69, 190, 106, 180, 38, 63, 140, 172, 246, 62, 107, 57, 54, 191, 62, 187, 181, 191, 174, 83, 140, 190, 238, 69, 162, 62, 212, 30, 155, 190, 113, 115, 227, 59, 186, 111, 136, 62, 49, 58, 72, 191, 40, 243, 6, 191, 6, 52, 83, 62, 75, 6, 69, 191, 151, 241, 14, 190, 248, 175, 42, 63, 139, 91, 112, 191, 158, 155, 148, 190, 87, 72, 56, 191, 195, 90, 129, 191, 59, 214, 20, 191, 107, 175, 172, 190, 236, 103, 41, 63, 29, 14, 147, 61, 67, 208, 6, 191, 97, 27, 67, 63, 12, 246, 187, 62, 190, 180, 19, 191, 6, 115, 90, 190, 145, 194, 152, 189, 162, 31, 0, 62, 102, 69, 65, 191, 7, 92, 149, 62, 118, 90, 80, 190, 242, 146, 211, 62, 53, 36, 72, 63, 168, 95, 134, 190, 166, 151, 29, 63, 152, 139, 125, 190, 122, 97, 19, 63, 229, 78, 177, 190, 97, 26, 31, 63, 233, 227, 25, 190, 153, 130, 140, 63, 209, 161, 24, 190, 243, 1, 3, 63, 146, 81, 18, 191, 194, 38, 175, 190, 164, 239, 52, 190, 27, 86, 16, 191, 41, 146, 42, 63, 47, 104, 203, 190, 255, 196, 68, 190, 15, 175, 71, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 118, 182, 190, 162, 242, 49, 190, 207, 210, 225, 62, 98, 166, 143, 190, 58, 240, 45, 62, 113, 183, 84, 62, 246, 94, 108, 62, 156, 100, 36, 62, 180, 50, 175, 190, 95, 68, 113, 191, 144, 44, 165, 62, 190, 117, 237, 62, 177, 153, 80, 189, 59, 115, 12, 63, 226, 114, 76, 62, 82, 147, 142, 61, 16, 39, 33, 63, 73, 140, 244, 190, 37, 123, 32, 61, 239, 5, 224, 190, 27, 219, 26, 191, 168, 249, 1, 63, 198, 249, 15, 63, 170, 240, 120, 190, 252, 144, 107, 61, 218, 237, 190, 61, 216, 30, 245, 189, 197, 156, 97, 60, 254, 115, 4, 63, 103, 108, 0, 62, 200, 70, 8, 190, 166, 30, 85, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 116, 97, 188, 109, 222, 88, 190, 169, 164, 32, 190, 229, 46, 221, 190, 215, 52, 67, 62, 254, 138, 72, 190, 245, 81, 117, 189, 10, 126, 76, 62, 230, 225, 38, 190, 29, 239, 1, 187, 40, 226, 149, 60, 226, 125, 211, 61, 55, 237, 180, 189, 21, 1, 201, 62, 45, 11, 42, 191, 168, 71, 94, 62, 123, 120, 188, 189, 119, 90, 70, 190, 200, 106, 68, 190, 211, 240, 102, 190, 205, 140, 89, 62, 113, 49, 125, 61, 50, 67, 181, 189, 215, 191, 28, 62, 33, 177, 38, 191, 129, 27, 133, 191, 219, 51, 31, 188, 67, 17, 173, 190, 83, 52, 167, 60, 72, 139, 205, 61, 154, 11, 68, 191, 202, 86, 114, 191, 112, 73, 245, 189, 72, 205, 154, 189, 150, 30, 44, 189, 63, 244, 222, 188, 52, 157, 181, 61, 104, 137, 136, 189, 214, 19, 27, 190, 254, 143, 133, 185, 90, 142, 15, 190, 152, 172, 223, 189, 161, 60, 241, 188, 208, 160, 43, 60, 243, 105, 3, 190, 214, 152, 212, 61, 206, 156, 29, 190, 22, 122, 20, 190, 64, 30, 10, 189, 168, 209, 189, 189, 96, 212, 236, 60, 59, 145, 190, 189, 107, 209, 12, 62, 130, 3, 252, 61, 251, 154, 39, 189, 238, 182, 86, 189, 188, 103, 246, 61, 189, 184, 247, 60, 245, 222, 70, 190, 184, 170, 221, 61, 9, 241, 184, 187, 240, 156, 33, 190, 76, 168, 226, 60, 199, 180, 15, 190, 114, 185, 22, 189, 135, 97, 201, 189, 39, 49, 8, 190, 191, 106, 42, 190, 163, 186, 220, 189, 227, 112, 44, 190, 157, 168, 191, 189, 192, 29, 213, 61, 85, 19, 166, 189, 252, 59, 46, 61, 212, 229, 58, 61, 73, 24, 15, 61, 68, 207, 194, 189, 153, 97, 96, 61, 46, 59, 52, 61, 228, 85, 197, 189, 33, 243, 43, 190, 88, 80, 38, 190, 74, 210, 126, 61, 150, 202, 19, 62, 28, 3, 144, 188, 128, 145, 225, 61, 25, 130, 141, 189, 94, 8, 5, 62, 65, 217, 140, 189, 149, 61, 234, 189, 120, 27, 17, 189, 48, 129, 251, 188, 45, 106, 37, 190, 196, 227, 246, 188, 75, 241, 233, 61, 142, 104, 132, 61, 84, 166, 78, 61, 134, 85, 118, 189, 37, 82, 76, 62, 137, 62, 28, 62, 91, 237, 182, 190, 33, 119, 166, 189, 4, 130, 61, 190, 139, 188, 171, 61, 78, 23, 150, 61, 115, 120, 56, 191, 60, 120, 231, 189, 43, 143, 43, 191, 191, 126, 242, 188, 254, 173, 111, 62, 23, 11, 166, 189, 163, 39, 160, 190, 21, 162, 122, 62, 224, 110, 220, 190, 44, 57, 209, 190, 35, 89, 43, 191, 220, 249, 223, 190, 171, 44, 209, 62, 103, 59, 232, 189, 253, 22, 223, 190, 178, 65, 172, 190, 211, 23, 167, 61, 33, 118, 162, 60, 119, 40, 60, 61, 124, 164, 230, 62, 62, 76, 196, 61, 110, 205, 204, 189, 207, 242, 221, 61, 5, 68, 174, 189, 178, 17, 148, 59, 153, 42, 139, 189, 3, 202, 199, 189, 83, 137, 26, 190, 63, 248, 226, 188, 10, 31, 241, 188, 231, 1, 147, 189, 167, 228, 201, 189, 243, 51, 192, 189, 12, 170, 245, 189, 212, 244, 189, 189, 107, 110, 139, 189, 69, 249, 25, 190, 178, 15, 129, 60, 193, 42, 203, 188, 197, 97, 114, 60, 106, 203, 187, 61, 36, 235, 167, 59, 68, 142, 15, 190, 0, 240, 230, 189, 22, 249, 27, 190, 72, 210, 167, 61, 238, 147, 18, 62, 77, 41, 11, 190, 155, 84, 229, 189, 185, 211, 59, 189, 89, 56, 40, 61, 249, 1, 239, 61, 167, 91, 178, 189, 75, 71, 9, 60, 52, 73, 222, 61, 153, 116, 78, 61, 196, 140, 86, 60, 226, 217, 105, 188, 183, 117, 249, 189, 97, 189, 3, 190, 155, 227, 184, 60, 17, 235, 3, 190, 149, 252, 35, 190, 89, 190, 153, 61, 71, 247, 7, 190, 127, 235, 17, 62, 64, 189, 122, 60, 81, 242, 82, 58, 177, 239, 20, 190, 101, 110, 25, 190, 154, 53, 9, 62, 248, 131, 4, 190, 199, 147, 237, 188, 161, 149, 0, 62, 180, 124, 5, 189, 119, 41, 163, 189, 72, 41, 195, 189, 38, 169, 229, 189, 75, 101, 228, 60, 22, 159, 66, 61, 12, 227, 39, 61, 119, 149, 48, 190, 9, 105, 182, 61, 209, 143, 234, 61, 226, 179, 32, 190, 104, 111, 48, 190, 131, 127, 143, 189, 3, 12, 150, 61, 111, 145, 146, 190, 63, 201, 162, 62, 135, 40, 126, 62, 172, 170, 25, 190, 33, 163, 174, 190, 36, 248, 204, 61, 205, 98, 22, 189, 15, 239, 15, 62, 235, 145, 190, 190, 117, 41, 105, 190, 98, 10, 154, 61, 214, 209, 16, 191, 161, 77, 47, 62, 39, 253, 125, 62, 196, 232, 219, 190, 140, 205, 28, 62, 233, 79, 130, 189, 42, 179, 152, 61, 181, 243, 145, 61, 214, 242, 72, 191, 109, 25, 228, 60, 41, 28, 167, 61, 185, 229, 29, 62, 0, 45, 129, 62, 56, 209, 191, 61, 49, 81, 85, 190, 198, 59, 95, 190, 99, 203, 216, 61, 4, 96, 48, 62, 44, 0, 151, 62, 180, 52, 112, 62, 211, 239, 204, 189, 49, 213, 188, 189, 111, 99, 164, 189, 253, 95, 212, 189, 181, 200, 70, 61, 193, 92, 134, 61, 222, 245, 216, 189, 33, 237, 224, 188, 217, 187, 255, 61, 215, 25, 167, 58, 16, 187, 50, 190, 36, 173, 215, 189, 150, 93, 26, 190, 7, 64, 83, 189, 216, 123, 208, 60, 49, 216, 208, 189, 224, 106, 138, 189, 146, 178, 9, 62, 34, 80, 175, 189, 249, 255, 79, 190, 199, 19, 190, 61, 136, 67, 11, 190, 227, 26, 33, 188, 13, 72, 44, 190, 135, 244, 172, 61, 195, 96, 28, 190, 41, 120, 234, 61, 138, 66, 160, 189, 78, 39, 14, 60, 45, 73, 87, 189, 229, 115, 33, 60, 108, 200, 33, 62, 143, 24, 76, 189, 218, 1, 253, 189, 29, 148, 206, 61, 91, 65, 193, 189, 207, 14, 77, 61, 40, 68, 209, 189, 44, 37, 124, 61, 106, 247, 169, 189, 234, 132, 109, 190, 9, 33, 182, 189, 89, 70, 205, 59, 57, 137, 216, 61, 117, 75, 172, 189, 144, 109, 127, 190, 180, 49, 245, 61, 44, 59, 125, 62, 93, 122, 201, 62, 80, 67, 251, 189, 168, 35, 197, 188, 160, 41, 207, 190, 45, 248, 232, 60, 248, 194, 61, 189, 42, 92, 173, 61, 86, 108, 5, 190, 206, 58, 203, 61, 83, 39, 34, 61, 241, 223, 203, 189, 78, 133, 164, 61, 225, 117, 192, 61, 159, 240, 216, 61, 44, 208, 52, 61, 110, 59, 134, 189, 50, 130, 92, 61, 170, 46, 250, 188, 12, 146, 227, 189, 238, 147, 16, 189, 225, 16, 203, 60, 34, 207, 225, 60, 82, 81, 124, 62, 217, 25, 150, 61, 160, 80, 148, 189, 90, 203, 45, 190, 99, 1, 27, 61, 138, 97, 53, 189, 96, 51, 98, 190, 223, 109, 241, 61, 129, 232, 70, 189, 7, 87, 179, 61, 189, 130, 132, 62, 204, 206, 18, 190, 215, 50, 134, 190, 249, 209, 212, 190, 209, 132, 33, 188, 54, 3, 49, 190, 231, 35, 98, 61, 80, 190, 75, 62, 6, 0, 55, 62, 16, 163, 146, 189, 165, 70, 19, 61, 29, 25, 164, 188, 216, 202, 63, 62, 58, 132, 7, 189, 170, 173, 21, 62, 252, 246, 154, 188, 57, 55, 146, 188, 185, 111, 94, 190, 96, 35, 246, 187, 205, 168, 21, 62, 179, 100, 224, 189, 46, 224, 56, 190, 52, 217, 94, 190, 41, 177, 201, 189, 8, 108, 19, 61, 110, 197, 205, 61, 1, 245, 91, 188, 186, 228, 124, 61, 72, 206, 236, 61, 11, 121, 62, 190, 14, 184, 120, 61, 14, 141, 229, 59, 196, 7, 39, 62, 65, 68, 181, 189, 196, 202, 38, 62, 196, 130, 60, 190, 210, 93, 136, 189, 135, 213, 235, 61, 34, 53, 232, 188, 20, 174, 152, 189, 13, 250, 40, 190, 67, 33, 169, 61, 63, 153, 177, 189, 79, 15, 223, 61, 6, 1, 78, 190, 151, 2, 181, 61, 60, 162, 36, 190, 82, 199, 222, 61, 201, 207, 48, 188, 94, 194, 147, 61, 155, 1, 118, 60, 25, 111, 51, 190, 38, 214, 231, 61, 80, 21, 177, 60, 178, 95, 184, 190, 56, 192, 23, 190, 148, 171, 167, 189, 34, 183, 40, 61, 54, 9, 157, 189, 153, 64, 188, 62, 240, 151, 32, 62, 22, 132, 232, 190, 95, 193, 208, 60, 81, 124, 64, 61, 254, 56, 134, 62, 183, 11, 146, 189, 205, 44, 211, 62, 173, 133, 95, 189, 14, 226, 83, 187, 146, 44, 100, 190, 18, 128, 1, 190, 1, 117, 223, 190, 77, 229, 129, 61, 70, 24, 45, 189, 49, 151, 154, 190, 246, 199, 65, 62, 44, 5, 14, 191, 241, 16, 150, 188, 86, 29, 112, 188, 245, 24, 59, 190, 245, 84, 67, 61, 22, 247, 186, 187, 119, 59, 170, 189, 54, 48, 4, 190, 150, 33, 4, 62, 198, 87, 155, 189, 218, 210, 168, 61, 33, 185, 28, 62, 224, 32, 40, 190, 253, 171, 180, 188, 252, 58, 34, 190, 114, 21, 9, 190, 201, 89, 46, 62, 5, 89, 25, 189, 56, 167, 134, 60, 102, 38, 171, 189, 174, 121, 132, 61, 134, 124, 73, 188, 46, 186, 15, 62, 125, 94, 204, 61, 196, 91, 198, 189, 89, 73, 32, 189, 64, 130, 216, 189, 144, 23, 27, 62, 56, 65, 5, 190, 22, 184, 37, 189, 136, 118, 239, 189, 201, 37, 199, 189, 218, 1, 30, 62, 193, 56, 120, 61, 63, 102, 212, 61, 195, 67, 63, 61, 55, 241, 217, 190, 5, 18, 116, 62, 6, 167, 165, 190, 188, 98, 81, 61, 137, 24, 78, 188, 126, 46, 250, 61, 186, 200, 23, 191, 128, 61, 134, 189, 18, 125, 172, 61, 6, 170, 108, 62, 214, 155, 18, 61, 137, 86, 127, 61, 210, 137, 112, 62, 121, 162, 192, 189, 172, 120, 230, 189, 152, 0, 40, 190, 65, 227, 91, 190, 104, 230, 169, 189, 205, 160, 125, 190, 216, 170, 56, 61, 8, 144, 195, 61, 215, 227, 130, 190, 196, 24, 24, 190, 149, 145, 58, 190, 52, 41, 121, 189, 152, 184, 65, 62, 199, 96, 6, 190, 197, 42, 112, 189, 201, 126, 187, 189, 245, 36, 34, 190, 197, 34, 130, 189, 11, 253, 33, 61, 182, 168, 136, 190, 131, 195, 129, 62, 133, 93, 242, 190, 13, 194, 5, 190, 71, 0, 39, 61, 15, 179, 89, 62, 204, 27, 176, 189, 16, 160, 51, 62, 223, 39, 117, 190, 85, 130, 161, 62, 241, 252, 181, 61, 150, 107, 244, 189, 104, 196, 101, 61, 42, 70, 189, 62, 6, 63, 0, 185, 241, 220, 190, 62, 126, 176, 144, 189, 9, 30, 167, 190, 123, 230, 126, 190, 165, 142, 8, 191, 239, 233, 144, 189, 182, 233, 152, 62, 113, 149, 54, 189, 173, 109, 57, 189, 115, 131, 190, 190, 33, 132, 63, 189, 218, 129, 201, 59, 70, 185, 137, 62, 197, 198, 161, 61, 238, 24, 151, 189, 212, 133, 169, 188, 18, 55, 241, 189, 191, 54, 30, 191, 245, 169, 76, 62, 1, 127, 206, 190, 153, 51, 112, 190, 61, 113, 198, 61, 186, 183, 168, 61, 232, 77, 28, 62, 255, 159, 123, 62, 91, 39, 50, 190, 213, 164, 98, 60, 83, 145, 12, 62, 116, 38, 234, 61, 122, 248, 99, 62, 239, 41, 126, 62, 31, 183, 0, 189, 155, 93, 145, 62, 83, 221, 20, 62, 31, 140, 230, 190, 192, 248, 24, 191, 220, 99, 224, 190, 236, 226, 45, 62, 132, 215, 182, 189, 5, 207, 199, 188, 159, 66, 216, 187, 86, 171, 123, 190, 104, 134, 254, 190, 32, 164, 173, 62, 223, 209, 23, 62, 27, 23, 188, 62, 198, 21, 65, 189, 206, 211, 241, 190, 198, 184, 31, 191, 40, 130, 4, 191, 156, 106, 205, 62, 60, 144, 105, 61, 87, 89, 20, 190, 216, 36, 121, 61, 59, 255, 175, 62, 25, 229, 167, 190, 191, 231, 225, 61, 211, 95, 193, 190, 91, 66, 156, 62, 16, 56, 66, 62, 37, 88, 39, 191, 253, 182, 177, 61, 188, 86, 165, 61, 20, 139, 186, 60, 145, 217, 184, 189, 252, 200, 137, 60, 234, 22, 181, 190, 9, 184, 102, 191, 186, 231, 64, 191, 159, 220, 80, 61, 233, 113, 241, 188, 207, 196, 203, 189, 217, 17, 5, 190, 246, 153, 85, 61, 128, 236, 238, 61, 189, 177, 224, 62, 216, 235, 182, 61, 181, 195, 12, 62, 4, 151, 131, 61, 77, 180, 236, 189, 121, 123, 115, 189, 252, 70, 103, 62, 201, 142, 57, 189, 193, 40, 49, 61, 176, 86, 194, 62, 32, 25, 29, 190, 134, 49, 245, 189, 87, 38, 207, 61, 153, 238, 21, 62, 41, 241, 47, 62, 196, 81, 73, 60, 199, 151, 6, 62, 107, 1, 191, 61, 197, 14, 102, 189, 166, 13, 133, 188, 51, 129, 177, 61, 68, 251, 88, 190, 113, 193, 106, 188, 122, 2, 79, 190, 175, 250, 141, 189, 186, 29, 133, 190, 134, 63, 41, 60, 208, 251, 208, 61, 16, 167, 237, 186, 197, 51, 116, 62, 202, 108, 212, 62, 28, 24, 92, 62, 18, 139, 239, 189, 146, 116, 206, 188, 122, 138, 66, 62, 93, 178, 0, 62, 54, 88, 246, 62, 104, 223, 23, 62, 76, 122, 25, 190, 243, 68, 24, 61, 3, 46, 136, 61, 171, 181, 96, 61, 67, 43, 15, 62, 43, 150, 182, 62, 244, 143, 17, 190, 54, 109, 80, 61, 194, 211, 27, 190, 8, 177, 12, 191, 191, 29, 90, 61, 157, 6, 24, 189, 29, 91, 51, 62, 121, 40, 253, 190, 60, 108, 222, 190, 142, 28, 194, 61, 52, 67, 147, 62, 249, 241, 150, 189, 78, 125, 130, 189, 116, 206, 155, 190, 79, 213, 136, 189, 250, 74, 144, 190, 129, 132, 181, 190, 1, 24, 77, 190, 18, 91, 225, 60, 47, 69, 44, 191, 33, 63, 245, 189, 63, 96, 11, 62, 172, 56, 2, 62, 84, 138, 7, 61, 121, 219, 74, 189, 189, 157, 190, 190, 168, 98, 28, 191, 250, 37, 214, 62, 250, 90, 207, 60, 111, 185, 31, 190, 92, 242, 140, 61, 55, 233, 177, 62, 93, 143, 170, 190, 133, 14, 2, 62, 71, 13, 219, 190, 107, 178, 112, 62, 204, 160, 124, 62, 104, 18, 31, 191, 181, 19, 67, 62, 89, 3, 0, 189, 85, 184, 21, 62, 227, 221, 229, 189, 255, 120, 26, 62, 40, 171, 243, 190, 232, 250, 84, 191, 164, 57, 42, 191, 98, 122, 124, 62, 56, 186, 23, 62, 128, 187, 6, 62, 96, 248, 5, 61, 42, 2, 160, 189, 193, 71, 213, 59, 218, 116, 212, 62, 165, 221, 88, 62, 188, 3, 80, 62, 162, 132, 93, 190, 58, 124, 163, 190, 29, 138, 173, 59, 157, 132, 120, 62, 96, 101, 132, 62, 198, 127, 36, 62, 44, 175, 98, 190, 5, 8, 129, 62, 192, 174, 100, 62, 18, 31, 129, 189, 186, 126, 222, 189, 210, 212, 204, 190, 116, 220, 193, 60, 179, 28, 190, 190, 4, 198, 181, 61, 109, 18, 130, 62, 4, 235, 56, 189, 237, 3, 7, 61, 225, 24, 36, 188, 245, 187, 128, 61, 161, 86, 203, 190, 30, 149, 246, 190, 17, 39, 231, 190, 73, 111, 57, 190, 117, 8, 94, 189, 124, 180, 165, 189, 177, 181, 1, 62, 249, 235, 137, 61, 172, 121, 151, 61, 46, 117, 0, 191, 222, 188, 175, 62, 155, 16, 213, 190, 200, 124, 27, 191, 71, 13, 206, 61, 34, 165, 218, 61, 248, 3, 212, 188, 194, 80, 240, 60, 203, 178, 183, 62, 148, 165, 87, 62, 205, 89, 221, 190, 101, 136, 56, 62, 14, 83, 3, 190, 190, 131, 178, 190, 182, 139, 6, 62, 194, 34, 62, 189, 125, 5, 53, 61, 8, 73, 86, 191, 183, 129, 112, 190, 254, 33, 101, 62, 110, 81, 47, 62, 221, 253, 13, 191, 60, 177, 244, 61, 174, 11, 236, 190, 177, 255, 24, 191, 229, 128, 44, 191, 243, 151, 135, 190, 116, 229, 15, 62, 52, 130, 103, 59, 250, 223, 201, 61, 61, 158, 102, 189, 105, 214, 224, 61, 210, 43, 157, 189, 199, 171, 73, 62, 68, 223, 128, 62, 201, 239, 138, 62, 169, 27, 176, 61, 153, 156, 216, 61, 71, 9, 69, 190, 43, 226, 45, 188, 253, 224, 162, 62, 172, 178, 9, 63, 107, 81, 30, 189, 150, 3, 6, 62, 68, 65, 230, 60, 152, 241, 244, 61, 219, 46, 163, 61, 7, 2, 15, 190, 118, 85, 32, 61, 247, 194, 129, 190, 223, 81, 88, 61, 155, 37, 149, 190, 0, 65, 177, 190, 36, 84, 228, 190, 140, 110, 242, 61, 66, 79, 158, 190, 94, 188, 144, 190, 57, 21, 207, 190, 86, 10, 178, 189, 34, 110, 33, 191, 92, 148, 234, 190, 233, 36, 61, 61, 56, 218, 106, 62, 16, 182, 186, 190, 136, 46, 36, 62, 107, 149, 239, 61, 213, 218, 136, 187, 43, 215, 44, 62, 249, 237, 77, 62, 251, 137, 56, 190, 151, 23, 0, 61, 68, 80, 12, 190, 219, 141, 140, 61, 223, 171, 48, 62, 160, 186, 250, 189, 189, 137, 127, 61, 159, 44, 199, 189, 243, 5, 98, 189, 73, 132, 131, 189, 113, 10, 206, 61, 68, 83, 39, 190, 125, 73, 161, 61, 31, 12, 194, 189, 246, 205, 90, 189, 253, 191, 17, 190, 157, 133, 131, 189, 204, 21, 110, 61, 242, 192, 117, 61, 36, 245, 117, 61, 52, 72, 40, 190, 206, 68, 140, 189, 93, 239, 68, 61, 39, 166, 20, 190, 70, 232, 168, 61, 105, 187, 12, 190, 131, 132, 170, 189, 189, 199, 130, 59, 154, 76, 198, 189, 81, 232, 97, 61, 149, 16, 106, 189, 108, 125, 49, 62, 104, 152, 250, 189, 213, 193, 38, 60, 78, 236, 181, 190, 211, 132, 164, 61, 182, 103, 138, 62, 170, 153, 74, 189, 139, 98, 147, 190, 135, 193, 60, 62, 10, 7, 118, 62, 88, 160, 60, 62, 109, 178, 47, 190, 135, 236, 85, 189, 154, 175, 17, 190, 2, 218, 71, 190, 251, 236, 214, 60, 184, 221, 240, 61, 19, 182, 3, 190, 182, 76, 109, 62, 244, 115, 237, 61, 7, 136, 31, 190, 9, 180, 160, 190, 51, 161, 108, 190, 222, 65, 192, 59, 113, 219, 222, 61, 208, 73, 209, 61, 88, 253, 44, 62, 124, 41, 70, 62, 37, 222, 162, 61, 186, 121, 29, 189, 112, 89, 47, 62, 62, 199, 100, 62, 27, 104, 66, 62, 130, 210, 45, 189, 79, 19, 29, 190, 183, 142, 70, 62, 210, 65, 2, 191, 236, 28, 202, 59, 18, 41, 223, 61, 22, 189, 49, 62, 154, 89, 57, 191, 69, 42, 218, 60, 177, 136, 81, 61, 127, 143, 2, 62, 66, 10, 201, 189, 66, 117, 8, 62, 128, 209, 45, 62, 202, 40, 20, 190, 231, 236, 116, 61, 219, 45, 25, 190, 89, 50, 84, 190, 65, 122, 61, 189, 64, 253, 251, 189, 217, 168, 193, 59, 154, 219, 149, 188, 223, 199, 14, 190, 60, 212, 253, 189, 66, 62, 28, 190, 233, 55, 143, 189, 125, 91, 149, 189, 52, 173, 82, 59, 62, 52, 170, 61, 129, 224, 246, 189, 31, 178, 230, 189, 94, 52, 219, 60, 230, 90, 62, 190, 105, 54, 201, 189, 232, 200, 104, 189, 170, 130, 233, 62, 2, 123, 26, 62, 155, 189, 28, 191, 157, 230, 127, 61, 29, 87, 110, 190, 67, 124, 185, 190, 173, 228, 145, 61, 29, 247, 25, 190, 50, 227, 8, 62, 223, 99, 7, 191, 15, 138, 198, 61, 237, 221, 35, 190, 123, 58, 34, 61, 161, 150, 29, 191, 0, 39, 225, 62, 58, 183, 205, 190, 138, 104, 12, 191, 104, 184, 255, 190, 20, 31, 154, 190, 209, 217, 1, 59, 42, 122, 30, 62, 104, 87, 108, 190, 251, 206, 0, 62, 79, 164, 203, 188, 227, 38, 231, 59, 3, 108, 5, 62, 68, 126, 66, 62, 119, 120, 177, 189, 53, 170, 19, 62, 27, 182, 209, 189, 184, 145, 1, 190, 131, 196, 189, 189, 141, 27, 110, 62, 121, 232, 145, 62, 123, 161, 135, 62, 181, 104, 143, 61, 20, 255, 90, 61, 59, 37, 136, 62, 148, 75, 17, 62, 61, 83, 55, 190, 212, 28, 29, 60, 188, 183, 212, 62, 122, 36, 55, 62, 158, 78, 16, 191, 242, 245, 217, 60, 52, 94, 139, 61, 153, 90, 123, 62, 188, 96, 37, 190, 144, 200, 71, 62, 78, 150, 128, 190, 167, 87, 66, 58, 20, 159, 148, 190, 61, 99, 191, 190, 242, 240, 161, 190, 105, 40, 84, 62, 99, 133, 225, 189, 177, 16, 59, 190, 16, 28, 101, 62, 148, 249, 38, 190, 240, 97, 73, 62, 3, 64, 31, 189, 46, 61, 175, 188, 144, 125, 48, 61, 73, 203, 34, 190, 40, 180, 162, 61, 44, 72, 219, 61, 129, 209, 142, 189, 101, 27, 163, 188, 186, 28, 93, 61, 218, 245, 42, 59, 245, 152, 101, 190, 108, 16, 248, 189, 1, 212, 10, 189, 21, 154, 95, 60, 87, 21, 59, 190, 58, 74, 234, 188, 181, 197, 6, 62, 43, 238, 116, 61, 139, 16, 60, 62, 26, 219, 84, 189, 28, 112, 150, 190, 92, 83, 21, 191, 169, 53, 37, 61, 88, 151, 28, 62, 61, 248, 31, 62, 170, 255, 214, 61, 84, 138, 149, 189, 176, 219, 158, 189, 6, 169, 81, 61, 127, 185, 20, 188, 88, 8, 136, 62, 83, 151, 9, 187, 20, 159, 161, 61, 68, 237, 12, 60, 80, 242, 236, 61, 13, 199, 177, 190, 136, 72, 124, 62, 146, 56, 221, 62, 225, 1, 81, 190, 64, 0, 134, 190, 142, 58, 116, 62, 194, 183, 167, 61, 66, 14, 163, 62, 115, 69, 17, 191, 34, 40, 46, 190, 78, 150, 31, 190, 81, 118, 147, 190, 84, 193, 229, 60, 248, 108, 195, 61, 229, 185, 180, 190, 195, 93, 0, 62, 27, 147, 122, 188, 178, 205, 56, 61, 130, 11, 148, 62, 27, 88, 7, 191, 146, 38, 143, 61, 43, 116, 162, 62, 73, 27, 13, 61, 4, 150, 182, 62, 106, 38, 50, 62, 198, 139, 101, 60, 190, 187, 216, 190, 205, 202, 60, 62, 222, 128, 127, 62, 131, 107, 113, 62, 173, 145, 138, 62, 51, 172, 12, 191, 163, 242, 154, 60, 206, 171, 11, 62, 82, 120, 96, 62, 29, 196, 184, 61, 236, 54, 25, 190, 38, 119, 200, 190, 41, 46, 53, 187, 15, 99, 168, 62, 56, 221, 186, 190, 183, 188, 106, 62, 175, 116, 146, 189, 254, 166, 114, 62, 54, 22, 188, 190, 145, 11, 245, 189, 155, 106, 53, 62, 78, 86, 12, 59, 130, 10, 238, 188, 59, 167, 60, 62, 36, 212, 235, 62, 42, 26, 102, 62, 123, 34, 176, 190, 196, 201, 114, 190, 200, 122, 244, 190, 111, 66, 184, 61, 248, 54, 84, 190, 0, 76, 138, 60, 4, 81, 27, 62, 119, 33, 164, 60, 76, 110, 25, 62, 179, 183, 62, 62, 38, 2, 222, 60, 240, 80, 164, 190, 44, 188, 131, 190, 121, 230, 140, 189, 77, 222, 199, 190, 206, 90, 50, 62, 113, 59, 171, 60, 179, 72, 29, 61, 243, 147, 247, 188, 163, 224, 78, 190, 92, 44, 127, 61, 33, 202, 143, 62, 106, 202, 11, 189, 47, 174, 26, 189, 222, 101, 141, 62, 31, 177, 122, 190, 241, 7, 42, 62, 167, 99, 146, 188, 197, 1, 186, 189, 16, 144, 187, 190, 34, 93, 110, 190, 223, 122, 23, 62, 34, 84, 40, 61, 255, 243, 135, 190, 151, 201, 175, 62, 185, 40, 17, 191, 141, 72, 18, 191, 43, 204, 124, 62, 67, 171, 2, 190, 67, 160, 177, 62, 107, 220, 246, 189, 152, 233, 146, 191, 134, 80, 83, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 109, 28, 62, 82, 80, 119, 60, 132, 43, 19, 190, 110, 93, 163, 62, 105, 192, 99, 189, 5, 17, 36, 190, 139, 223, 159, 62, 83, 235, 163, 189, 42, 32, 175, 62, 48, 80, 9, 62, 161, 101, 101, 190, 55, 98, 181, 61, 239, 77, 32, 190, 26, 34, 217, 190, 79, 143, 69, 190, 168, 31, 202, 61, 55, 7, 148, 188, 2, 145, 187, 61, 193, 240, 153, 61, 78, 185, 126, 189, 223, 24, 185, 189, 157, 253, 71, 61, 164, 92, 59, 62, 121, 169, 162, 188, 186, 189, 103, 62, 212, 0, 218, 190, 246, 144, 64, 62, 33, 150, 213, 60, 36, 222, 135, 62, 237, 168, 28, 62, 248, 109, 4, 61, 106, 147, 72, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 108, 40, 191, 215, 49, 199, 189, 41, 233, 99, 189, 43, 240, 56, 191, 79, 129, 184, 61, 78, 53, 245, 189, 86, 23, 62, 63, 50, 136, 148, 186, 76, 100, 229, 59, 171, 57, 17, 189, 103, 202, 20, 62, 216, 98, 146, 62, 170, 60, 14, 190, 113, 65, 0, 63, 150, 16, 72, 63, 24, 156, 44, 191, 36, 67, 203, 190, 11, 195, 97, 62, 126, 114, 21, 62, 3, 204, 189, 190, 236, 181, 134, 190, 94, 242, 58, 190, 32, 135, 176, 62, 167, 14, 204, 61, 165, 209, 123, 62, 219, 16, 162, 62, 63, 232, 68, 190, 233, 222, 145, 62, 95, 134, 175, 188, 231, 8, 2, 63, 100, 214, 167, 62, 199, 138, 10, 191, 151, 182, 28, 61, 89, 147, 80, 189, 105, 160, 175, 60, 67, 140, 100, 189, 106, 231, 43, 190, 152, 41, 242, 189, 176, 151, 166, 60, 111, 84, 205, 61, 121, 16, 45, 190, 15, 145, 237, 189, 12, 184, 29, 190, 95, 213, 231, 61, 65, 61, 146, 61, 33, 44, 190, 62, 82, 44, 233, 189, 39, 250, 92, 62, 35, 179, 14, 62, 198, 14, 85, 190, 191, 3, 8, 191, 46, 161, 6, 62, 192, 94, 65, 62, 165, 41, 38, 190, 70, 32, 83, 191, 38, 107, 40, 62, 124, 155, 74, 190, 241, 123, 163, 62, 57, 16, 197, 190, 64, 154, 93, 190, 127, 168, 17, 190, 66, 142, 86, 62, 59, 130, 7, 62, 221, 57, 87, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 142, 89, 189, 151, 68, 18, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {61, 181, 201, 63, 122, 3, 120, 191, 35, 253, 222, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {130, 49, 14, 64, 121, 210, 11, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0015/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}