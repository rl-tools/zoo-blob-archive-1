// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 175, 31, 191, 5, 191, 142, 191, 204, 229, 237, 61, 13, 168, 118, 62, 186, 85, 190, 62, 13, 47, 231, 62, 138, 10, 44, 63, 148, 104, 11, 191, 203, 234, 32, 190, 230, 238, 103, 189, 170, 110, 249, 62, 111, 7, 67, 190, 28, 181, 222, 190, 83, 164, 13, 191, 87, 101, 230, 190, 158, 149, 55, 63, 250, 14, 55, 60, 47, 29, 10, 63, 147, 12, 24, 190, 214, 208, 65, 190, 71, 173, 14, 189, 103, 35, 208, 190, 70, 8, 159, 189, 250, 85, 150, 190, 196, 253, 16, 62, 25, 84, 160, 62, 11, 92, 204, 190, 232, 16, 52, 190, 21, 74, 210, 62, 123, 247, 201, 62, 184, 37, 232, 61, 197, 200, 170, 62, 40, 111, 21, 191, 25, 162, 14, 191, 141, 57, 95, 191, 167, 124, 40, 190, 203, 215, 209, 62, 128, 174, 148, 190, 226, 27, 183, 62, 161, 114, 64, 190, 34, 137, 34, 63, 245, 8, 26, 62, 192, 255, 109, 189, 42, 206, 102, 62, 66, 150, 226, 62, 225, 88, 68, 191, 72, 174, 129, 190, 249, 1, 184, 190, 227, 103, 236, 62, 137, 204, 150, 190, 202, 215, 104, 187, 135, 91, 55, 190, 220, 144, 17, 191, 99, 213, 229, 190, 112, 26, 142, 61, 129, 175, 34, 190, 29, 22, 238, 189, 10, 15, 154, 62, 24, 246, 16, 191, 166, 156, 142, 190, 168, 168, 51, 191, 1, 164, 184, 189, 185, 12, 15, 191, 180, 222, 170, 190, 31, 131, 2, 63, 141, 172, 36, 62, 61, 194, 165, 190, 72, 255, 223, 62, 14, 78, 202, 62, 177, 215, 163, 190, 40, 96, 79, 61, 228, 255, 160, 61, 82, 72, 115, 189, 12, 72, 60, 191, 221, 225, 95, 62, 125, 225, 25, 190, 42, 9, 196, 189, 241, 54, 7, 63, 153, 169, 161, 190, 20, 54, 41, 63, 249, 69, 14, 190, 63, 73, 19, 63, 92, 39, 144, 190, 240, 37, 16, 63, 90, 142, 111, 190, 72, 159, 103, 63, 204, 231, 2, 190, 92, 208, 50, 60, 179, 44, 168, 190, 168, 60, 227, 190, 32, 13, 113, 190, 196, 225, 142, 191, 115, 174, 180, 62, 193, 97, 150, 190, 86, 212, 27, 191, 13, 237, 0, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 3, 162, 190, 102, 139, 127, 190, 179, 227, 36, 63, 181, 37, 140, 190, 96, 151, 192, 62, 13, 233, 25, 62, 167, 176, 1, 62, 247, 226, 151, 62, 105, 216, 195, 190, 82, 158, 58, 191, 72, 19, 6, 63, 89, 34, 231, 61, 48, 72, 37, 190, 220, 72, 206, 62, 214, 176, 163, 62, 209, 175, 211, 61, 81, 7, 16, 63, 226, 114, 21, 191, 112, 164, 13, 190, 151, 207, 2, 191, 225, 95, 154, 190, 141, 251, 180, 62, 242, 66, 38, 63, 138, 95, 48, 62, 20, 195, 57, 62, 132, 94, 24, 62, 244, 2, 238, 188, 16, 130, 37, 189, 50, 148, 9, 63, 44, 245, 61, 187, 124, 88, 36, 61, 64, 164, 182, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 157, 141, 190, 96, 40, 31, 190, 45, 73, 26, 190, 37, 60, 166, 190, 196, 46, 18, 62, 41, 151, 191, 189, 199, 67, 73, 189, 238, 21, 85, 62, 21, 81, 24, 190, 64, 75, 169, 188, 67, 121, 133, 187, 113, 109, 114, 188, 47, 38, 12, 190, 103, 242, 228, 62, 96, 165, 5, 190, 187, 19, 6, 62, 73, 115, 53, 190, 39, 218, 27, 190, 198, 46, 30, 190, 237, 149, 0, 190, 93, 158, 16, 62, 80, 60, 11, 62, 15, 149, 11, 62, 14, 248, 38, 189, 166, 108, 23, 191, 78, 162, 107, 190, 197, 205, 134, 59, 170, 57, 53, 190, 126, 28, 157, 61, 40, 109, 18, 62, 142, 112, 18, 191, 76, 99, 157, 190, 192, 210, 244, 189, 72, 205, 154, 189, 150, 30, 44, 189, 60, 240, 211, 188, 134, 106, 190, 61, 104, 137, 136, 189, 47, 109, 22, 190, 86, 165, 153, 59, 90, 142, 15, 190, 152, 172, 223, 189, 210, 72, 204, 188, 136, 182, 115, 60, 243, 105, 3, 190, 230, 175, 226, 61, 120, 96, 29, 190, 30, 150, 14, 190, 123, 32, 1, 189, 168, 209, 189, 189, 96, 212, 236, 60, 59, 145, 190, 189, 224, 49, 17, 62, 98, 239, 1, 62, 219, 108, 18, 189, 41, 129, 62, 189, 114, 130, 246, 61, 192, 184, 247, 60, 240, 52, 66, 190, 184, 170, 221, 61, 65, 211, 214, 185, 5, 216, 32, 190, 76, 168, 226, 60, 199, 180, 15, 190, 114, 185, 22, 189, 135, 97, 201, 189, 39, 49, 8, 190, 191, 106, 42, 190, 163, 186, 220, 189, 227, 112, 44, 190, 157, 168, 191, 189, 192, 29, 213, 61, 85, 19, 166, 189, 252, 59, 46, 61, 212, 229, 58, 61, 73, 24, 15, 61, 68, 207, 194, 189, 153, 97, 96, 61, 46, 59, 52, 61, 228, 85, 197, 189, 33, 243, 43, 190, 88, 80, 38, 190, 74, 210, 126, 61, 150, 202, 19, 62, 28, 3, 144, 188, 128, 145, 225, 61, 25, 130, 141, 189, 94, 8, 5, 62, 65, 217, 140, 189, 149, 61, 234, 189, 120, 27, 17, 189, 48, 129, 251, 188, 45, 106, 37, 190, 196, 227, 246, 188, 75, 241, 233, 61, 142, 104, 132, 61, 182, 248, 63, 190, 54, 186, 152, 60, 199, 234, 171, 61, 11, 117, 200, 188, 233, 148, 132, 59, 69, 152, 167, 189, 229, 248, 95, 190, 176, 12, 160, 61, 191, 92, 103, 61, 17, 97, 10, 190, 70, 160, 28, 190, 230, 39, 79, 190, 32, 227, 32, 190, 68, 79, 37, 190, 146, 161, 194, 189, 23, 170, 157, 61, 199, 198, 164, 61, 3, 167, 0, 190, 138, 41, 241, 61, 201, 93, 238, 189, 142, 8, 72, 190, 174, 216, 183, 61, 78, 84, 142, 190, 59, 3, 116, 190, 152, 194, 87, 190, 30, 219, 152, 60, 144, 208, 231, 189, 229, 35, 202, 58, 122, 76, 62, 62, 20, 110, 191, 61, 197, 188, 97, 190, 160, 237, 143, 189, 5, 68, 174, 189, 178, 17, 148, 59, 153, 42, 139, 189, 3, 202, 199, 189, 83, 137, 26, 190, 63, 248, 226, 188, 10, 31, 241, 188, 231, 1, 147, 189, 167, 228, 201, 189, 243, 51, 192, 189, 12, 170, 245, 189, 212, 244, 189, 189, 107, 110, 139, 189, 69, 249, 25, 190, 178, 15, 129, 60, 193, 42, 203, 188, 197, 97, 114, 60, 106, 203, 187, 61, 36, 235, 167, 59, 68, 142, 15, 190, 0, 240, 230, 189, 22, 249, 27, 190, 72, 210, 167, 61, 238, 147, 18, 62, 77, 41, 11, 190, 155, 84, 229, 189, 185, 211, 59, 189, 89, 56, 40, 61, 249, 1, 239, 61, 167, 91, 178, 189, 75, 71, 9, 60, 52, 73, 222, 61, 28, 216, 166, 61, 213, 137, 31, 61, 51, 62, 215, 57, 183, 117, 249, 189, 97, 189, 3, 190, 81, 21, 134, 61, 18, 52, 3, 190, 149, 252, 35, 190, 89, 190, 153, 61, 210, 132, 5, 190, 127, 235, 17, 62, 254, 252, 206, 60, 100, 98, 38, 61, 0, 244, 18, 190, 63, 116, 237, 189, 154, 53, 9, 62, 52, 19, 225, 189, 199, 147, 237, 188, 191, 68, 3, 62, 180, 124, 5, 189, 119, 41, 163, 189, 138, 100, 187, 189, 185, 242, 169, 189, 161, 152, 240, 60, 211, 187, 176, 61, 202, 40, 172, 61, 119, 149, 48, 190, 31, 9, 8, 62, 209, 143, 234, 61, 226, 179, 32, 190, 132, 245, 3, 190, 119, 142, 215, 188, 231, 44, 246, 61, 29, 104, 63, 190, 193, 163, 128, 62, 27, 178, 57, 62, 198, 34, 22, 62, 17, 230, 128, 190, 22, 31, 33, 189, 204, 58, 187, 187, 38, 226, 135, 189, 222, 215, 135, 190, 221, 227, 8, 190, 124, 120, 85, 62, 98, 53, 232, 190, 84, 9, 24, 61, 1, 132, 49, 62, 166, 19, 234, 189, 20, 214, 84, 62, 85, 44, 123, 61, 157, 168, 63, 190, 101, 79, 5, 190, 250, 121, 117, 190, 229, 171, 214, 189, 42, 178, 130, 188, 220, 204, 83, 59, 108, 42, 149, 62, 137, 172, 34, 61, 129, 57, 42, 190, 176, 197, 237, 189, 162, 234, 205, 189, 182, 75, 57, 61, 138, 115, 148, 62, 211, 86, 68, 62, 211, 239, 204, 189, 49, 213, 188, 189, 111, 99, 164, 189, 253, 95, 212, 189, 181, 200, 70, 61, 193, 92, 134, 61, 222, 245, 216, 189, 33, 237, 224, 188, 217, 187, 255, 61, 215, 25, 167, 58, 16, 187, 50, 190, 36, 173, 215, 189, 150, 93, 26, 190, 7, 64, 83, 189, 216, 123, 208, 60, 49, 216, 208, 189, 224, 106, 138, 189, 146, 178, 9, 62, 34, 80, 175, 189, 249, 255, 79, 190, 199, 19, 190, 61, 136, 67, 11, 190, 227, 26, 33, 188, 13, 72, 44, 190, 135, 244, 172, 61, 195, 96, 28, 190, 41, 120, 234, 61, 138, 66, 160, 189, 78, 39, 14, 60, 45, 73, 87, 189, 229, 115, 33, 60, 108, 200, 33, 62, 38, 50, 198, 189, 19, 191, 68, 189, 67, 4, 126, 60, 240, 133, 51, 189, 82, 187, 128, 61, 83, 35, 208, 189, 173, 185, 244, 187, 228, 119, 2, 190, 14, 245, 83, 190, 107, 201, 143, 188, 219, 116, 18, 60, 238, 139, 192, 60, 111, 125, 88, 189, 27, 46, 58, 190, 130, 86, 28, 62, 208, 166, 11, 62, 164, 27, 150, 62, 57, 61, 239, 189, 231, 22, 27, 189, 142, 86, 138, 190, 58, 207, 17, 189, 130, 40, 141, 60, 189, 84, 236, 61, 181, 235, 235, 189, 187, 39, 114, 61, 4, 122, 27, 61, 44, 128, 21, 58, 95, 29, 164, 61, 232, 85, 151, 61, 245, 56, 73, 189, 185, 132, 37, 61, 196, 188, 173, 189, 197, 64, 104, 60, 4, 146, 31, 61, 102, 176, 177, 189, 226, 24, 2, 60, 9, 234, 215, 61, 16, 254, 245, 60, 139, 36, 15, 62, 177, 132, 160, 61, 142, 190, 42, 61, 95, 115, 8, 190, 206, 26, 0, 62, 218, 15, 126, 189, 55, 168, 61, 190, 71, 249, 48, 62, 247, 72, 169, 188, 119, 219, 136, 61, 144, 81, 100, 62, 64, 254, 60, 60, 194, 49, 49, 189, 12, 47, 71, 188, 217, 102, 171, 60, 33, 5, 249, 189, 75, 91, 198, 61, 98, 103, 20, 62, 165, 81, 13, 62, 115, 133, 153, 189, 159, 207, 238, 61, 63, 202, 172, 188, 104, 14, 20, 62, 156, 254, 201, 188, 29, 248, 23, 62, 129, 213, 244, 188, 194, 121, 231, 60, 253, 5, 91, 190, 139, 58, 95, 60, 205, 168, 21, 62, 191, 121, 198, 189, 199, 183, 42, 190, 64, 78, 87, 190, 41, 177, 201, 189, 8, 108, 19, 61, 104, 169, 212, 61, 1, 245, 91, 188, 178, 73, 214, 61, 131, 33, 18, 62, 73, 117, 60, 190, 201, 35, 137, 61, 40, 183, 71, 60, 222, 40, 61, 62, 65, 68, 181, 189, 108, 66, 48, 62, 23, 73, 60, 190, 210, 93, 136, 189, 49, 231, 240, 61, 210, 2, 178, 188, 6, 190, 143, 189, 147, 159, 12, 190, 27, 128, 200, 61, 63, 153, 177, 189, 92, 96, 0, 62, 6, 1, 78, 190, 191, 64, 186, 61, 17, 91, 9, 190, 207, 83, 253, 61, 58, 9, 117, 61, 43, 144, 170, 61, 192, 12, 151, 189, 23, 11, 85, 62, 251, 56, 196, 61, 128, 24, 44, 189, 76, 156, 128, 190, 71, 6, 16, 188, 232, 35, 69, 62, 165, 109, 253, 61, 230, 4, 144, 61, 1, 190, 190, 61, 40, 34, 5, 60, 28, 65, 199, 189, 30, 34, 121, 61, 197, 88, 176, 60, 49, 63, 244, 61, 184, 107, 194, 61, 35, 66, 44, 62, 164, 218, 226, 189, 227, 195, 223, 61, 75, 164, 196, 60, 125, 136, 166, 189, 231, 48, 83, 190, 220, 173, 1, 189, 254, 68, 104, 189, 66, 229, 106, 61, 252, 2, 199, 61, 110, 34, 130, 190, 171, 172, 0, 189, 66, 18, 112, 189, 230, 44, 99, 190, 245, 84, 67, 61, 22, 247, 186, 187, 119, 59, 170, 189, 54, 48, 4, 190, 150, 33, 4, 62, 198, 87, 155, 189, 218, 210, 168, 61, 33, 185, 28, 62, 224, 32, 40, 190, 253, 171, 180, 188, 252, 58, 34, 190, 114, 21, 9, 190, 201, 89, 46, 62, 5, 89, 25, 189, 56, 167, 134, 60, 102, 38, 171, 189, 174, 121, 132, 61, 134, 124, 73, 188, 46, 186, 15, 62, 125, 94, 204, 61, 196, 91, 198, 189, 89, 73, 32, 189, 64, 130, 216, 189, 144, 23, 27, 62, 56, 65, 5, 190, 22, 184, 37, 189, 136, 118, 239, 189, 201, 37, 199, 189, 218, 1, 30, 62, 193, 56, 120, 61, 63, 102, 212, 61, 195, 67, 63, 61, 40, 57, 107, 190, 99, 133, 52, 62, 62, 211, 32, 190, 211, 197, 134, 61, 134, 93, 50, 57, 213, 26, 145, 61, 190, 42, 9, 190, 218, 120, 0, 189, 17, 96, 197, 61, 199, 147, 204, 61, 192, 202, 81, 61, 170, 115, 197, 61, 2, 231, 58, 62, 215, 220, 189, 187, 145, 81, 198, 189, 221, 32, 26, 190, 196, 85, 138, 190, 39, 96, 143, 189, 163, 213, 116, 61, 53, 157, 114, 61, 239, 129, 223, 61, 19, 59, 43, 190, 173, 91, 177, 189, 144, 248, 138, 188, 163, 91, 111, 188, 166, 107, 71, 62, 113, 149, 173, 188, 237, 174, 214, 189, 80, 55, 209, 61, 236, 142, 22, 190, 82, 250, 128, 188, 254, 254, 75, 61, 224, 73, 30, 61, 149, 59, 105, 61, 233, 252, 245, 189, 184, 155, 44, 190, 63, 73, 94, 189, 48, 0, 82, 61, 177, 27, 232, 189, 253, 74, 225, 61, 69, 131, 111, 190, 83, 123, 172, 61, 74, 32, 53, 61, 69, 202, 192, 188, 19, 163, 7, 60, 212, 179, 35, 62, 70, 176, 155, 189, 207, 156, 244, 61, 72, 22, 2, 61, 159, 179, 179, 189, 162, 31, 178, 189, 230, 172, 58, 190, 130, 6, 177, 189, 107, 241, 246, 61, 26, 37, 241, 189, 76, 224, 113, 189, 30, 220, 42, 190, 57, 158, 226, 189, 158, 77, 255, 60, 151, 116, 76, 62, 91, 112, 33, 189, 94, 231, 169, 61, 15, 0, 110, 61, 215, 126, 6, 190, 187, 25, 28, 191, 190, 218, 189, 59, 9, 54, 4, 191, 61, 75, 157, 190, 130, 244, 52, 188, 27, 56, 110, 189, 70, 197, 38, 62, 146, 30, 80, 62, 143, 167, 90, 190, 12, 183, 219, 60, 79, 194, 133, 60, 108, 19, 53, 61, 150, 191, 114, 61, 105, 238, 90, 62, 13, 111, 213, 61, 129, 43, 24, 62, 209, 52, 236, 189, 67, 133, 179, 190, 99, 139, 156, 190, 53, 220, 227, 189, 234, 110, 20, 187, 77, 156, 105, 189, 189, 191, 171, 61, 216, 140, 48, 189, 160, 87, 60, 190, 76, 246, 120, 190, 93, 150, 73, 62, 77, 111, 25, 61, 175, 77, 132, 62, 18, 170, 147, 186, 134, 173, 81, 190, 45, 213, 52, 190, 100, 167, 252, 190, 171, 144, 130, 62, 167, 57, 120, 61, 168, 207, 139, 190, 157, 207, 20, 62, 145, 182, 91, 62, 45, 41, 131, 189, 244, 29, 36, 61, 24, 74, 176, 190, 146, 2, 41, 62, 17, 3, 17, 62, 208, 180, 136, 190, 222, 81, 123, 188, 18, 23, 43, 62, 198, 93, 23, 61, 19, 147, 22, 190, 0, 50, 141, 188, 198, 57, 82, 190, 75, 32, 43, 190, 193, 255, 170, 190, 222, 114, 131, 61, 179, 215, 115, 61, 93, 74, 27, 189, 34, 53, 45, 61, 236, 126, 56, 61, 158, 172, 10, 62, 210, 124, 181, 62, 210, 100, 8, 189, 239, 225, 212, 61, 28, 87, 44, 62, 193, 145, 145, 189, 151, 213, 109, 188, 97, 203, 118, 62, 13, 48, 184, 59, 97, 133, 40, 62, 238, 90, 74, 62, 23, 238, 62, 188, 35, 152, 186, 189, 134, 52, 194, 59, 162, 90, 142, 61, 211, 249, 203, 61, 62, 121, 26, 61, 99, 159, 0, 62, 192, 200, 255, 61, 154, 102, 140, 188, 109, 225, 222, 189, 182, 82, 90, 61, 105, 13, 11, 190, 98, 170, 222, 61, 26, 65, 212, 189, 226, 79, 46, 61, 93, 12, 184, 189, 243, 241, 182, 61, 127, 222, 207, 60, 134, 243, 69, 189, 37, 125, 27, 62, 26, 197, 216, 62, 201, 76, 53, 62, 124, 236, 139, 190, 236, 21, 240, 59, 215, 244, 212, 60, 57, 85, 242, 61, 240, 215, 241, 62, 157, 71, 222, 61, 131, 148, 232, 61, 27, 80, 88, 189, 188, 17, 106, 189, 142, 185, 35, 62, 167, 189, 16, 62, 202, 188, 221, 60, 222, 254, 8, 189, 132, 16, 128, 61, 248, 95, 17, 189, 101, 66, 65, 61, 255, 135, 158, 61, 75, 246, 176, 189, 231, 112, 162, 189, 220, 184, 153, 190, 248, 213, 26, 61, 16, 99, 97, 61, 132, 115, 245, 61, 200, 145, 214, 60, 35, 116, 86, 188, 118, 125, 159, 189, 22, 236, 222, 189, 45, 231, 141, 189, 204, 143, 14, 189, 41, 117, 210, 189, 16, 101, 17, 189, 198, 47, 102, 190, 209, 53, 216, 188, 37, 22, 73, 190, 61, 60, 98, 62, 29, 59, 193, 186, 68, 130, 33, 62, 159, 14, 40, 189, 131, 248, 22, 191, 194, 3, 126, 62, 222, 65, 104, 60, 222, 23, 153, 190, 155, 111, 17, 62, 147, 64, 76, 62, 179, 215, 18, 190, 247, 226, 137, 61, 74, 210, 196, 190, 164, 126, 157, 61, 34, 23, 84, 62, 15, 3, 156, 190, 246, 128, 138, 61, 40, 81, 104, 184, 0, 126, 16, 62, 99, 91, 28, 190, 139, 172, 224, 61, 45, 8, 159, 190, 189, 32, 136, 189, 98, 47, 59, 190, 26, 247, 82, 62, 41, 211, 62, 62, 242, 248, 43, 62, 211, 183, 8, 62, 101, 95, 165, 189, 73, 255, 190, 59, 220, 52, 173, 62, 57, 108, 149, 61, 94, 129, 13, 62, 10, 9, 196, 189, 146, 196, 144, 190, 205, 162, 22, 61, 137, 7, 165, 61, 193, 177, 133, 62, 14, 56, 25, 62, 80, 152, 41, 190, 236, 164, 237, 61, 218, 217, 93, 62, 254, 154, 40, 190, 172, 156, 177, 189, 198, 222, 149, 61, 137, 139, 64, 61, 251, 45, 22, 190, 31, 57, 215, 186, 178, 124, 124, 62, 163, 242, 45, 61, 190, 115, 5, 61, 50, 52, 42, 189, 28, 141, 199, 188, 148, 41, 215, 189, 50, 86, 34, 62, 139, 147, 51, 189, 199, 250, 47, 190, 250, 6, 154, 59, 172, 39, 170, 189, 220, 116, 196, 61, 45, 215, 54, 189, 105, 11, 102, 61, 55, 26, 152, 190, 42, 109, 169, 62, 242, 178, 123, 190, 239, 104, 80, 190, 42, 120, 200, 184, 7, 151, 131, 61, 79, 31, 78, 188, 88, 6, 70, 61, 119, 18, 155, 61, 138, 72, 184, 61, 213, 51, 240, 189, 35, 245, 58, 62, 11, 162, 8, 190, 92, 13, 130, 190, 28, 208, 218, 188, 232, 113, 183, 188, 243, 82, 121, 188, 153, 246, 197, 190, 190, 64, 51, 190, 77, 198, 39, 62, 143, 77, 52, 62, 139, 239, 209, 190, 157, 6, 194, 188, 104, 56, 82, 190, 23, 121, 49, 62, 78, 89, 207, 189, 147, 32, 184, 189, 227, 235, 218, 61, 198, 40, 41, 59, 50, 235, 21, 62, 103, 2, 52, 189, 237, 32, 231, 61, 178, 213, 215, 189, 155, 111, 89, 62, 202, 233, 186, 61, 7, 214, 12, 62, 112, 81, 3, 62, 5, 197, 7, 62, 31, 62, 154, 189, 38, 142, 195, 61, 149, 121, 87, 62, 31, 240, 30, 62, 255, 75, 84, 62, 163, 165, 61, 61, 217, 95, 16, 62, 178, 88, 248, 61, 216, 240, 144, 188, 83, 70, 14, 60, 109, 75, 58, 188, 35, 166, 35, 61, 140, 146, 243, 188, 152, 55, 47, 187, 166, 163, 148, 189, 194, 99, 96, 189, 210, 251, 14, 61, 60, 73, 219, 189, 72, 69, 53, 190, 136, 145, 25, 190, 64, 71, 213, 189, 230, 39, 108, 190, 156, 134, 4, 190, 52, 207, 205, 61, 27, 221, 67, 62, 241, 80, 47, 190, 237, 184, 212, 189, 60, 100, 35, 61, 82, 49, 147, 189, 190, 232, 208, 61, 46, 151, 136, 62, 94, 30, 227, 189, 151, 23, 0, 61, 68, 80, 12, 190, 219, 141, 140, 61, 223, 171, 48, 62, 160, 186, 250, 189, 189, 137, 127, 61, 159, 44, 199, 189, 243, 5, 98, 189, 73, 132, 131, 189, 113, 10, 206, 61, 68, 83, 39, 190, 125, 73, 161, 61, 31, 12, 194, 189, 246, 205, 90, 189, 253, 191, 17, 190, 157, 133, 131, 189, 204, 21, 110, 61, 242, 192, 117, 61, 36, 245, 117, 61, 52, 72, 40, 190, 206, 68, 140, 189, 93, 239, 68, 61, 39, 166, 20, 190, 70, 232, 168, 61, 105, 187, 12, 190, 131, 132, 170, 189, 189, 199, 130, 59, 154, 76, 198, 189, 81, 232, 97, 61, 149, 16, 106, 189, 108, 125, 49, 62, 104, 152, 250, 189, 135, 67, 181, 60, 147, 199, 130, 190, 102, 42, 248, 61, 239, 79, 230, 61, 206, 52, 160, 61, 192, 18, 82, 190, 50, 24, 192, 61, 92, 230, 52, 62, 157, 5, 163, 61, 193, 73, 182, 189, 62, 117, 149, 189, 198, 115, 127, 189, 228, 44, 213, 189, 180, 63, 186, 189, 215, 178, 149, 61, 37, 50, 139, 188, 239, 91, 173, 62, 207, 6, 25, 62, 204, 216, 38, 190, 121, 19, 99, 190, 75, 93, 39, 190, 80, 15, 207, 189, 110, 87, 66, 61, 149, 89, 254, 188, 146, 250, 59, 62, 230, 31, 30, 62, 16, 31, 165, 189, 145, 127, 52, 61, 141, 50, 42, 189, 134, 167, 42, 62, 156, 207, 54, 62, 25, 228, 164, 189, 175, 31, 145, 189, 241, 17, 55, 62, 165, 169, 146, 190, 23, 118, 191, 59, 18, 41, 223, 61, 72, 87, 33, 62, 162, 184, 208, 190, 182, 200, 244, 60, 177, 136, 81, 61, 251, 190, 171, 61, 243, 185, 211, 189, 232, 66, 38, 189, 57, 190, 23, 62, 122, 221, 59, 189, 131, 130, 205, 61, 13, 159, 25, 190, 165, 169, 111, 190, 65, 122, 61, 189, 112, 119, 99, 188, 217, 168, 193, 59, 154, 219, 149, 188, 236, 176, 28, 189, 36, 1, 77, 189, 15, 134, 185, 188, 66, 212, 193, 188, 174, 147, 25, 189, 61, 175, 85, 61, 136, 165, 147, 61, 36, 99, 22, 61, 31, 178, 230, 189, 52, 59, 154, 61, 62, 218, 20, 190, 16, 82, 196, 189, 169, 11, 243, 188, 106, 63, 45, 62, 119, 132, 112, 62, 150, 246, 95, 190, 237, 66, 59, 61, 129, 90, 34, 190, 244, 50, 45, 190, 176, 187, 44, 62, 203, 114, 250, 189, 167, 147, 116, 62, 248, 111, 132, 190, 131, 60, 1, 62, 6, 227, 191, 189, 177, 78, 151, 61, 71, 115, 213, 190, 4, 228, 134, 62, 152, 97, 19, 190, 220, 114, 241, 189, 74, 106, 136, 189, 81, 252, 131, 189, 176, 143, 159, 61, 208, 248, 86, 62, 115, 144, 23, 189, 1, 183, 188, 61, 183, 224, 92, 188, 28, 184, 15, 62, 33, 219, 237, 61, 205, 247, 57, 62, 238, 222, 60, 190, 15, 83, 42, 62, 49, 234, 176, 189, 18, 7, 21, 190, 25, 16, 44, 189, 80, 57, 30, 62, 100, 196, 170, 62, 160, 105, 72, 62, 233, 30, 103, 188, 119, 150, 5, 190, 44, 168, 70, 62, 195, 128, 65, 62, 180, 90, 53, 189, 221, 81, 99, 189, 52, 198, 241, 61, 107, 100, 32, 187, 15, 15, 61, 190, 201, 160, 159, 61, 184, 169, 123, 60, 92, 206, 3, 62, 103, 104, 230, 189, 252, 56, 121, 61, 102, 122, 130, 190, 11, 204, 250, 188, 102, 191, 177, 61, 30, 116, 139, 190, 174, 223, 27, 190, 212, 0, 197, 61, 243, 116, 242, 189, 227, 138, 44, 190, 63, 98, 202, 61, 61, 24, 148, 189, 42, 155, 189, 61, 132, 42, 203, 189, 39, 252, 142, 189, 59, 212, 206, 60, 165, 59, 213, 189, 169, 65, 169, 61, 182, 158, 4, 62, 140, 48, 5, 188, 172, 247, 227, 188, 90, 105, 91, 189, 40, 67, 28, 189, 112, 255, 42, 190, 144, 55, 246, 189, 57, 116, 9, 60, 32, 28, 140, 54, 119, 233, 29, 190, 35, 65, 40, 60, 80, 187, 20, 62, 190, 220, 98, 60, 65, 83, 52, 62, 134, 167, 35, 61, 132, 135, 54, 190, 232, 64, 153, 190, 227, 118, 37, 61, 158, 120, 65, 62, 211, 129, 57, 62, 32, 11, 168, 61, 240, 179, 196, 189, 61, 84, 181, 189, 237, 240, 184, 61, 243, 96, 147, 188, 215, 46, 82, 62, 162, 1, 130, 189, 52, 141, 169, 61, 196, 146, 35, 188, 52, 132, 95, 62, 29, 201, 128, 190, 62, 235, 249, 61, 108, 92, 101, 62, 219, 163, 161, 61, 8, 143, 55, 190, 107, 192, 9, 62, 140, 233, 97, 61, 29, 28, 156, 61, 84, 47, 224, 190, 98, 97, 32, 190, 27, 93, 157, 61, 108, 113, 46, 190, 113, 78, 56, 190, 163, 92, 156, 188, 179, 158, 141, 61, 129, 156, 247, 61, 220, 152, 164, 61, 63, 31, 158, 189, 77, 11, 213, 61, 87, 177, 98, 189, 47, 107, 232, 189, 51, 124, 64, 62, 193, 204, 217, 189, 245, 97, 206, 62, 21, 111, 179, 61, 255, 144, 181, 189, 245, 97, 162, 190, 173, 17, 235, 189, 16, 90, 8, 62, 124, 229, 110, 62, 116, 225, 94, 62, 203, 4, 119, 190, 7, 60, 135, 61, 120, 60, 137, 61, 26, 24, 137, 62, 104, 249, 31, 60, 190, 12, 134, 190, 89, 233, 84, 190, 169, 158, 140, 188, 114, 158, 184, 62, 123, 244, 200, 189, 159, 1, 90, 62, 204, 220, 208, 189, 45, 49, 64, 190, 174, 81, 7, 190, 184, 138, 239, 189, 27, 250, 18, 62, 199, 94, 153, 187, 177, 78, 50, 189, 108, 124, 107, 61, 252, 8, 159, 62, 142, 231, 62, 62, 159, 47, 18, 190, 217, 33, 72, 190, 97, 185, 34, 190, 185, 182, 37, 189, 40, 97, 126, 189, 32, 29, 183, 59, 168, 165, 151, 190, 229, 133, 174, 61, 226, 106, 187, 61, 209, 252, 70, 62, 238, 38, 27, 189, 61, 173, 134, 190, 15, 84, 121, 189, 75, 191, 65, 60, 116, 199, 156, 190, 36, 92, 9, 62, 153, 147, 63, 62, 227, 135, 137, 188, 124, 81, 243, 188, 50, 50, 48, 190, 72, 25, 141, 61, 102, 127, 143, 62, 15, 226, 33, 190, 80, 83, 42, 189, 77, 66, 175, 62, 21, 205, 113, 61, 81, 178, 188, 61, 42, 56, 24, 61, 212, 79, 70, 189, 42, 37, 152, 190, 110, 97, 162, 189, 189, 249, 175, 61, 48, 71, 242, 61, 98, 98, 141, 189, 200, 6, 46, 62, 170, 30, 162, 190, 167, 187, 19, 190, 119, 24, 149, 62, 138, 71, 214, 189, 42, 151, 212, 62, 85, 199, 152, 189, 217, 106, 54, 191, 83, 19, 178, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 100, 36, 62, 134, 44, 162, 60, 132, 43, 19, 190, 20, 214, 207, 61, 105, 192, 99, 189, 232, 89, 16, 190, 121, 126, 133, 62, 83, 235, 163, 189, 56, 182, 125, 62, 248, 22, 79, 61, 91, 174, 84, 190, 55, 28, 154, 61, 239, 77, 32, 190, 158, 185, 78, 190, 170, 254, 74, 190, 219, 146, 19, 61, 90, 238, 164, 60, 72, 141, 135, 61, 213, 19, 120, 189, 119, 81, 47, 189, 121, 68, 219, 189, 70, 176, 171, 189, 185, 241, 40, 62, 121, 169, 162, 188, 189, 226, 52, 62, 164, 208, 132, 190, 210, 201, 252, 61, 56, 88, 77, 189, 51, 154, 64, 62, 247, 130, 123, 61, 64, 42, 97, 60, 95, 154, 222, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 172, 202, 190, 214, 72, 199, 189, 41, 233, 99, 189, 181, 161, 155, 189, 79, 129, 184, 61, 43, 168, 245, 189, 5, 81, 250, 62, 50, 136, 148, 186, 213, 82, 238, 60, 1, 119, 168, 60, 223, 105, 21, 62, 22, 221, 35, 62, 170, 60, 14, 190, 202, 255, 5, 62, 109, 90, 62, 62, 88, 105, 165, 190, 35, 4, 62, 190, 143, 40, 126, 62, 202, 90, 89, 61, 28, 7, 34, 190, 128, 135, 62, 190, 32, 25, 197, 189, 186, 153, 24, 62, 167, 14, 204, 61, 196, 206, 130, 62, 240, 148, 71, 61, 200, 84, 156, 189, 101, 55, 61, 62, 10, 44, 170, 60, 137, 47, 163, 62, 80, 43, 142, 62, 121, 62, 198, 190, 181, 221, 126, 60, 19, 207, 80, 189, 105, 160, 175, 60, 114, 207, 165, 188, 106, 231, 43, 190, 183, 54, 242, 189, 159, 97, 117, 188, 111, 84, 205, 61, 58, 120, 172, 189, 116, 217, 204, 189, 158, 182, 29, 190, 133, 158, 71, 61, 65, 61, 146, 61, 240, 72, 30, 62, 50, 76, 143, 189, 186, 74, 130, 62, 158, 159, 125, 189, 183, 126, 12, 190, 161, 9, 117, 190, 33, 98, 131, 189, 181, 136, 45, 62, 52, 244, 16, 190, 209, 99, 7, 190, 38, 107, 40, 62, 237, 125, 75, 190, 90, 62, 150, 62, 147, 168, 147, 190, 227, 210, 3, 190, 244, 71, 223, 189, 156, 181, 237, 61, 130, 58, 133, 61, 157, 204, 151, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 184, 114, 189, 248, 73, 217, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {197, 55, 39, 192, 123, 250, 183, 62, 146, 133, 199, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {51, 239, 79, 63, 159, 182, 237, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0015/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}