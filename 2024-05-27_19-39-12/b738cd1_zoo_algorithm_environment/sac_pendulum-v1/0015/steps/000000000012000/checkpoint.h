// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 201, 98, 191, 20, 228, 199, 190, 0, 163, 207, 62, 177, 248, 231, 62, 57, 180, 82, 63, 101, 213, 243, 62, 252, 171, 115, 63, 87, 72, 56, 191, 60, 247, 10, 190, 101, 23, 159, 190, 118, 1, 36, 63, 212, 14, 30, 190, 237, 189, 99, 190, 31, 90, 193, 191, 42, 64, 141, 190, 178, 166, 74, 63, 103, 84, 134, 62, 168, 19, 24, 63, 100, 85, 23, 191, 73, 41, 74, 62, 52, 249, 111, 61, 75, 250, 135, 190, 64, 210, 103, 189, 93, 89, 159, 190, 138, 36, 175, 189, 217, 139, 59, 62, 173, 214, 237, 190, 202, 18, 94, 63, 235, 155, 74, 63, 35, 16, 195, 62, 112, 64, 228, 60, 222, 97, 27, 189, 4, 114, 39, 191, 237, 254, 1, 191, 240, 66, 159, 191, 131, 222, 218, 189, 116, 10, 138, 62, 245, 195, 254, 190, 153, 198, 218, 62, 52, 72, 178, 190, 114, 9, 33, 63, 90, 151, 194, 61, 25, 80, 129, 190, 49, 137, 122, 63, 34, 96, 212, 62, 3, 245, 61, 191, 155, 227, 205, 191, 68, 148, 161, 190, 71, 228, 151, 62, 239, 118, 192, 190, 54, 103, 221, 59, 185, 189, 210, 62, 80, 37, 105, 191, 76, 97, 1, 191, 130, 73, 53, 62, 240, 40, 93, 191, 205, 5, 39, 190, 105, 40, 52, 63, 222, 99, 121, 191, 13, 73, 156, 190, 131, 222, 62, 191, 18, 128, 137, 191, 147, 254, 20, 191, 37, 135, 175, 190, 141, 209, 60, 63, 240, 108, 179, 61, 130, 121, 14, 191, 40, 115, 143, 63, 67, 114, 158, 62, 229, 158, 42, 191, 173, 228, 50, 190, 159, 254, 91, 189, 59, 25, 31, 62, 131, 197, 56, 191, 224, 206, 136, 62, 227, 131, 128, 190, 110, 186, 22, 63, 132, 75, 58, 63, 63, 216, 178, 59, 9, 44, 61, 63, 196, 220, 73, 190, 152, 113, 20, 63, 251, 71, 156, 190, 239, 2, 26, 63, 227, 33, 18, 190, 91, 37, 148, 63, 145, 154, 18, 190, 125, 20, 10, 63, 180, 132, 43, 191, 44, 234, 92, 190, 235, 109, 22, 190, 110, 248, 191, 190, 65, 187, 40, 63, 58, 237, 182, 190, 197, 172, 134, 59, 126, 99, 70, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 132, 42, 190, 254, 79, 67, 190, 146, 79, 220, 62, 150, 156, 153, 190, 188, 67, 89, 62, 133, 9, 70, 62, 230, 161, 49, 62, 105, 233, 124, 62, 221, 184, 145, 190, 57, 45, 113, 191, 213, 64, 162, 62, 199, 40, 248, 62, 34, 38, 218, 189, 207, 193, 20, 63, 187, 191, 37, 62, 74, 98, 91, 61, 137, 115, 36, 63, 143, 119, 25, 191, 221, 42, 131, 61, 255, 141, 222, 190, 220, 83, 23, 191, 211, 54, 4, 63, 230, 126, 248, 62, 55, 189, 152, 190, 189, 194, 68, 61, 8, 107, 146, 61, 230, 134, 82, 189, 178, 135, 237, 188, 27, 133, 244, 62, 39, 71, 9, 62, 179, 145, 10, 190, 202, 106, 1, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 75, 156, 62, 187, 201, 128, 190, 14, 130, 36, 190, 145, 65, 221, 190, 179, 61, 22, 62, 33, 232, 199, 189, 171, 185, 87, 60, 180, 249, 83, 62, 181, 9, 15, 190, 29, 239, 1, 187, 246, 30, 206, 60, 218, 55, 241, 61, 160, 191, 214, 61, 67, 133, 224, 62, 64, 80, 134, 191, 252, 83, 94, 62, 210, 63, 82, 189, 112, 52, 124, 190, 46, 122, 158, 190, 81, 185, 195, 190, 0, 234, 59, 62, 198, 228, 211, 61, 231, 129, 64, 190, 134, 229, 95, 62, 134, 40, 162, 190, 233, 241, 170, 191, 59, 145, 177, 60, 169, 230, 120, 190, 128, 85, 59, 61, 235, 212, 163, 61, 84, 115, 231, 190, 191, 188, 126, 191, 112, 73, 245, 189, 72, 205, 154, 189, 150, 30, 44, 189, 63, 244, 222, 188, 52, 157, 181, 61, 104, 137, 136, 189, 214, 19, 27, 190, 254, 143, 133, 185, 90, 142, 15, 190, 152, 172, 223, 189, 161, 60, 241, 188, 208, 160, 43, 60, 243, 105, 3, 190, 214, 152, 212, 61, 206, 156, 29, 190, 22, 122, 20, 190, 64, 30, 10, 189, 168, 209, 189, 189, 96, 212, 236, 60, 59, 145, 190, 189, 107, 209, 12, 62, 130, 3, 252, 61, 251, 154, 39, 189, 238, 182, 86, 189, 188, 103, 246, 61, 189, 184, 247, 60, 245, 222, 70, 190, 184, 170, 221, 61, 9, 241, 184, 187, 240, 156, 33, 190, 76, 168, 226, 60, 199, 180, 15, 190, 114, 185, 22, 189, 135, 97, 201, 189, 39, 49, 8, 190, 191, 106, 42, 190, 163, 186, 220, 189, 227, 112, 44, 190, 157, 168, 191, 189, 192, 29, 213, 61, 85, 19, 166, 189, 252, 59, 46, 61, 212, 229, 58, 61, 73, 24, 15, 61, 68, 207, 194, 189, 153, 97, 96, 61, 46, 59, 52, 61, 228, 85, 197, 189, 33, 243, 43, 190, 88, 80, 38, 190, 74, 210, 126, 61, 150, 202, 19, 62, 28, 3, 144, 188, 128, 145, 225, 61, 25, 130, 141, 189, 94, 8, 5, 62, 65, 217, 140, 189, 149, 61, 234, 189, 120, 27, 17, 189, 48, 129, 251, 188, 45, 106, 37, 190, 196, 227, 246, 188, 75, 241, 233, 61, 142, 104, 132, 61, 131, 160, 88, 61, 252, 164, 199, 189, 248, 68, 90, 62, 82, 170, 81, 62, 201, 229, 6, 191, 249, 222, 136, 189, 116, 203, 25, 190, 16, 200, 19, 59, 180, 103, 153, 61, 235, 249, 91, 191, 42, 8, 1, 190, 20, 19, 70, 191, 249, 73, 227, 188, 55, 149, 127, 62, 5, 2, 137, 189, 98, 199, 2, 191, 59, 111, 140, 62, 241, 221, 19, 191, 12, 76, 198, 190, 130, 189, 56, 191, 138, 205, 198, 190, 181, 147, 212, 62, 75, 45, 175, 189, 180, 38, 3, 191, 82, 243, 91, 190, 226, 242, 18, 62, 58, 13, 39, 61, 139, 59, 81, 61, 129, 80, 216, 62, 155, 165, 253, 61, 107, 186, 244, 188, 125, 10, 28, 62, 5, 68, 174, 189, 178, 17, 148, 59, 153, 42, 139, 189, 3, 202, 199, 189, 83, 137, 26, 190, 63, 248, 226, 188, 10, 31, 241, 188, 231, 1, 147, 189, 167, 228, 201, 189, 243, 51, 192, 189, 12, 170, 245, 189, 212, 244, 189, 189, 107, 110, 139, 189, 69, 249, 25, 190, 178, 15, 129, 60, 193, 42, 203, 188, 197, 97, 114, 60, 106, 203, 187, 61, 36, 235, 167, 59, 68, 142, 15, 190, 0, 240, 230, 189, 22, 249, 27, 190, 72, 210, 167, 61, 238, 147, 18, 62, 77, 41, 11, 190, 155, 84, 229, 189, 185, 211, 59, 189, 89, 56, 40, 61, 249, 1, 239, 61, 167, 91, 178, 189, 75, 71, 9, 60, 52, 73, 222, 61, 153, 116, 78, 61, 196, 140, 86, 60, 226, 217, 105, 188, 183, 117, 249, 189, 97, 189, 3, 190, 155, 227, 184, 60, 17, 235, 3, 190, 149, 252, 35, 190, 89, 190, 153, 61, 71, 247, 7, 190, 127, 235, 17, 62, 64, 189, 122, 60, 81, 242, 82, 58, 177, 239, 20, 190, 101, 110, 25, 190, 154, 53, 9, 62, 248, 131, 4, 190, 199, 147, 237, 188, 161, 149, 0, 62, 180, 124, 5, 189, 119, 41, 163, 189, 72, 41, 195, 189, 38, 169, 229, 189, 75, 101, 228, 60, 22, 159, 66, 61, 12, 227, 39, 61, 119, 149, 48, 190, 9, 105, 182, 61, 209, 143, 234, 61, 226, 179, 32, 190, 104, 111, 48, 190, 131, 127, 143, 189, 73, 168, 115, 61, 56, 103, 138, 190, 231, 139, 164, 62, 23, 228, 132, 62, 104, 229, 236, 189, 112, 237, 170, 190, 147, 47, 6, 62, 218, 229, 129, 61, 177, 9, 77, 62, 213, 254, 222, 190, 182, 105, 106, 190, 68, 159, 62, 62, 172, 181, 13, 191, 252, 1, 106, 62, 35, 179, 134, 62, 161, 117, 12, 191, 174, 51, 29, 62, 134, 193, 170, 61, 244, 230, 248, 61, 133, 103, 75, 61, 246, 253, 136, 191, 87, 96, 184, 61, 119, 223, 212, 61, 89, 28, 66, 62, 196, 16, 104, 62, 161, 72, 185, 61, 176, 199, 76, 190, 144, 210, 83, 190, 137, 216, 47, 62, 151, 107, 13, 62, 149, 220, 146, 62, 103, 228, 114, 62, 211, 239, 204, 189, 49, 213, 188, 189, 111, 99, 164, 189, 253, 95, 212, 189, 181, 200, 70, 61, 193, 92, 134, 61, 222, 245, 216, 189, 33, 237, 224, 188, 217, 187, 255, 61, 215, 25, 167, 58, 16, 187, 50, 190, 36, 173, 215, 189, 150, 93, 26, 190, 7, 64, 83, 189, 216, 123, 208, 60, 49, 216, 208, 189, 224, 106, 138, 189, 146, 178, 9, 62, 34, 80, 175, 189, 249, 255, 79, 190, 199, 19, 190, 61, 136, 67, 11, 190, 227, 26, 33, 188, 13, 72, 44, 190, 135, 244, 172, 61, 195, 96, 28, 190, 41, 120, 234, 61, 138, 66, 160, 189, 78, 39, 14, 60, 45, 73, 87, 189, 229, 115, 33, 60, 108, 200, 33, 62, 97, 199, 150, 189, 212, 18, 228, 189, 94, 160, 127, 61, 93, 147, 83, 190, 213, 85, 38, 188, 113, 52, 193, 189, 150, 107, 86, 61, 3, 85, 41, 189, 225, 156, 132, 190, 3, 17, 218, 189, 224, 67, 65, 61, 117, 199, 40, 62, 129, 206, 127, 189, 123, 203, 132, 190, 184, 215, 0, 62, 224, 147, 78, 62, 190, 110, 204, 62, 121, 136, 223, 188, 136, 24, 55, 189, 244, 117, 172, 190, 82, 222, 206, 60, 3, 139, 129, 189, 50, 135, 161, 61, 166, 152, 242, 189, 116, 200, 191, 61, 240, 109, 103, 61, 193, 49, 27, 190, 159, 207, 191, 61, 4, 122, 39, 62, 181, 246, 255, 61, 146, 249, 117, 61, 26, 136, 70, 189, 14, 253, 28, 61, 179, 23, 170, 188, 211, 117, 184, 189, 73, 130, 36, 189, 54, 30, 128, 189, 134, 146, 19, 61, 20, 54, 138, 62, 13, 14, 88, 61, 120, 200, 200, 189, 240, 85, 58, 190, 6, 203, 13, 61, 49, 157, 189, 189, 38, 26, 134, 190, 252, 177, 30, 62, 58, 134, 183, 188, 115, 213, 4, 61, 0, 178, 139, 62, 173, 137, 45, 190, 222, 138, 179, 190, 118, 151, 242, 190, 31, 26, 225, 188, 88, 177, 10, 190, 70, 119, 156, 61, 12, 85, 70, 62, 42, 157, 32, 62, 57, 177, 59, 189, 162, 68, 49, 61, 207, 150, 58, 189, 45, 55, 96, 62, 119, 39, 199, 60, 108, 204, 8, 62, 142, 199, 157, 188, 57, 55, 146, 188, 185, 111, 94, 190, 96, 35, 246, 187, 205, 168, 21, 62, 179, 100, 224, 189, 46, 224, 56, 190, 52, 217, 94, 190, 41, 177, 201, 189, 8, 108, 19, 61, 110, 197, 205, 61, 1, 245, 91, 188, 186, 228, 124, 61, 72, 206, 236, 61, 11, 121, 62, 190, 14, 184, 120, 61, 14, 141, 229, 59, 196, 7, 39, 62, 65, 68, 181, 189, 196, 202, 38, 62, 196, 130, 60, 190, 210, 93, 136, 189, 135, 213, 235, 61, 34, 53, 232, 188, 20, 174, 152, 189, 13, 250, 40, 190, 67, 33, 169, 61, 63, 153, 177, 189, 79, 15, 223, 61, 6, 1, 78, 190, 151, 2, 181, 61, 60, 162, 36, 190, 82, 199, 222, 61, 114, 183, 145, 60, 237, 211, 3, 59, 227, 108, 213, 188, 91, 30, 210, 190, 154, 96, 60, 62, 247, 154, 100, 188, 52, 191, 167, 190, 43, 236, 9, 190, 68, 112, 235, 189, 148, 169, 199, 190, 141, 5, 36, 190, 175, 170, 11, 63, 179, 79, 29, 62, 45, 188, 242, 190, 198, 227, 147, 58, 57, 164, 58, 61, 104, 69, 119, 62, 46, 185, 18, 189, 213, 123, 220, 62, 254, 172, 234, 189, 192, 64, 249, 60, 183, 132, 112, 190, 43, 241, 18, 190, 139, 17, 192, 190, 107, 84, 86, 61, 214, 187, 126, 189, 131, 110, 45, 191, 77, 88, 46, 62, 193, 184, 34, 191, 136, 71, 142, 189, 52, 152, 200, 188, 52, 17, 66, 190, 245, 84, 67, 61, 22, 247, 186, 187, 119, 59, 170, 189, 54, 48, 4, 190, 150, 33, 4, 62, 198, 87, 155, 189, 218, 210, 168, 61, 33, 185, 28, 62, 224, 32, 40, 190, 253, 171, 180, 188, 252, 58, 34, 190, 114, 21, 9, 190, 201, 89, 46, 62, 5, 89, 25, 189, 56, 167, 134, 60, 102, 38, 171, 189, 174, 121, 132, 61, 134, 124, 73, 188, 46, 186, 15, 62, 125, 94, 204, 61, 196, 91, 198, 189, 89, 73, 32, 189, 64, 130, 216, 189, 144, 23, 27, 62, 56, 65, 5, 190, 22, 184, 37, 189, 136, 118, 239, 189, 201, 37, 199, 189, 218, 1, 30, 62, 193, 56, 120, 61, 63, 102, 212, 61, 195, 67, 63, 61, 5, 126, 204, 190, 196, 234, 128, 62, 193, 115, 78, 190, 188, 98, 81, 61, 41, 167, 128, 189, 231, 207, 8, 62, 36, 163, 47, 191, 128, 61, 134, 189, 18, 125, 172, 61, 148, 112, 155, 62, 214, 155, 18, 61, 121, 187, 193, 190, 10, 1, 133, 62, 226, 201, 47, 190, 152, 37, 243, 189, 152, 0, 40, 190, 242, 46, 108, 190, 104, 230, 169, 189, 131, 115, 63, 191, 216, 170, 56, 61, 8, 144, 195, 61, 75, 25, 167, 190, 192, 43, 57, 190, 149, 145, 58, 190, 41, 112, 251, 188, 130, 55, 68, 62, 199, 96, 6, 190, 149, 24, 28, 189, 207, 239, 157, 190, 54, 238, 119, 190, 211, 99, 57, 189, 121, 172, 73, 61, 201, 120, 163, 190, 125, 107, 155, 62, 95, 67, 246, 190, 38, 222, 81, 190, 227, 230, 26, 62, 108, 200, 108, 62, 91, 134, 195, 189, 20, 231, 132, 62, 254, 176, 153, 190, 88, 122, 250, 62, 187, 177, 214, 61, 27, 0, 24, 190, 210, 249, 93, 61, 68, 100, 208, 62, 31, 71, 2, 61, 202, 5, 4, 63, 70, 71, 49, 190, 226, 89, 195, 190, 62, 54, 52, 60, 131, 161, 175, 190, 169, 13, 135, 189, 79, 21, 176, 62, 55, 171, 55, 188, 208, 56, 185, 61, 161, 89, 238, 190, 10, 9, 35, 189, 233, 53, 100, 189, 64, 157, 143, 62, 64, 134, 9, 62, 12, 45, 211, 190, 174, 113, 68, 189, 228, 243, 0, 190, 122, 61, 33, 191, 185, 35, 220, 62, 124, 139, 207, 190, 18, 142, 134, 190, 163, 75, 15, 62, 198, 45, 4, 62, 26, 207, 251, 61, 187, 1, 74, 62, 95, 135, 113, 190, 252, 43, 156, 59, 194, 148, 171, 61, 23, 90, 104, 62, 53, 235, 233, 61, 22, 163, 137, 62, 48, 60, 157, 60, 229, 157, 178, 62, 89, 20, 68, 62, 190, 85, 13, 191, 105, 33, 64, 191, 147, 237, 93, 191, 160, 58, 208, 61, 93, 216, 123, 189, 135, 146, 52, 189, 43, 69, 79, 189, 1, 210, 178, 61, 238, 28, 199, 190, 58, 149, 158, 62, 217, 84, 212, 61, 172, 162, 190, 62, 65, 155, 154, 189, 114, 14, 167, 190, 253, 77, 61, 191, 119, 13, 254, 190, 169, 184, 206, 62, 184, 88, 158, 61, 108, 63, 0, 190, 61, 62, 23, 190, 196, 61, 191, 62, 193, 155, 188, 190, 29, 114, 234, 61, 197, 212, 190, 190, 130, 135, 192, 62, 151, 248, 113, 62, 136, 105, 67, 191, 238, 70, 237, 61, 58, 213, 146, 60, 69, 242, 156, 60, 117, 188, 39, 61, 165, 3, 132, 61, 52, 154, 228, 190, 131, 237, 111, 191, 196, 89, 60, 191, 31, 234, 41, 60, 206, 207, 203, 189, 99, 82, 248, 189, 61, 146, 3, 62, 192, 128, 251, 61, 98, 220, 14, 62, 79, 207, 240, 62, 176, 163, 244, 61, 64, 106, 224, 61, 58, 15, 2, 62, 62, 112, 166, 189, 227, 160, 27, 189, 84, 191, 90, 62, 223, 102, 2, 189, 88, 208, 32, 61, 190, 186, 191, 62, 125, 142, 139, 190, 59, 116, 232, 189, 123, 167, 195, 61, 76, 14, 89, 62, 255, 251, 91, 62, 80, 11, 40, 189, 223, 8, 51, 62, 68, 38, 239, 61, 44, 175, 49, 189, 235, 221, 131, 60, 244, 112, 187, 61, 248, 126, 206, 190, 128, 89, 191, 188, 249, 14, 236, 189, 132, 118, 249, 189, 43, 171, 131, 190, 115, 178, 10, 189, 251, 101, 11, 62, 90, 95, 193, 187, 120, 7, 134, 62, 79, 175, 194, 62, 201, 80, 87, 62, 239, 87, 144, 189, 165, 161, 125, 188, 71, 89, 149, 62, 44, 9, 229, 61, 244, 12, 241, 62, 45, 69, 23, 62, 25, 0, 16, 191, 155, 175, 87, 61, 88, 39, 189, 61, 21, 48, 233, 189, 18, 242, 8, 62, 146, 117, 160, 62, 48, 167, 144, 190, 138, 50, 218, 61, 77, 224, 45, 190, 133, 54, 150, 191, 188, 178, 5, 62, 79, 83, 132, 189, 171, 17, 109, 61, 15, 26, 242, 190, 79, 66, 32, 191, 169, 173, 183, 61, 136, 90, 150, 62, 156, 164, 235, 187, 56, 131, 90, 189, 174, 240, 131, 190, 60, 249, 172, 189, 38, 93, 120, 190, 106, 213, 138, 191, 83, 192, 119, 190, 13, 83, 109, 190, 167, 144, 81, 191, 29, 5, 127, 190, 64, 115, 99, 61, 53, 22, 23, 62, 213, 109, 153, 61, 227, 21, 104, 190, 243, 125, 235, 190, 46, 149, 23, 191, 182, 209, 216, 62, 176, 151, 18, 61, 56, 165, 13, 190, 251, 170, 244, 189, 117, 233, 191, 62, 58, 40, 168, 190, 140, 183, 249, 61, 201, 51, 231, 190, 250, 106, 153, 62, 46, 177, 138, 62, 111, 230, 58, 191, 31, 185, 90, 62, 193, 7, 57, 189, 0, 127, 26, 62, 142, 215, 127, 189, 53, 51, 68, 62, 99, 223, 28, 191, 193, 87, 97, 191, 239, 16, 47, 191, 31, 110, 65, 62, 165, 170, 255, 61, 126, 47, 9, 62, 103, 44, 72, 62, 253, 56, 138, 188, 203, 203, 8, 61, 221, 208, 224, 62, 110, 128, 114, 62, 123, 77, 71, 62, 244, 88, 50, 190, 85, 87, 146, 190, 31, 230, 227, 60, 242, 231, 99, 62, 39, 131, 123, 62, 68, 136, 44, 62, 67, 210, 207, 189, 32, 60, 10, 62, 141, 186, 87, 62, 40, 243, 152, 189, 207, 12, 129, 190, 210, 212, 204, 190, 189, 156, 67, 61, 19, 149, 87, 190, 21, 101, 196, 189, 167, 195, 107, 62, 85, 57, 89, 189, 38, 42, 169, 60, 136, 143, 71, 189, 156, 42, 100, 61, 94, 191, 198, 190, 145, 3, 51, 191, 40, 149, 46, 191, 30, 208, 121, 190, 125, 7, 120, 189, 143, 139, 195, 189, 238, 5, 167, 60, 68, 99, 71, 61, 20, 207, 92, 61, 148, 30, 81, 190, 70, 80, 166, 62, 233, 118, 220, 190, 101, 130, 16, 191, 33, 113, 172, 61, 11, 216, 175, 61, 82, 16, 13, 189, 202, 175, 180, 60, 96, 23, 174, 62, 58, 245, 147, 62, 230, 240, 103, 191, 34, 52, 68, 62, 155, 20, 223, 189, 77, 218, 159, 190, 199, 134, 22, 62, 160, 87, 13, 188, 174, 205, 161, 61, 207, 198, 99, 191, 30, 206, 107, 190, 37, 22, 112, 62, 29, 59, 52, 62, 59, 135, 164, 190, 166, 21, 16, 62, 133, 130, 6, 191, 145, 222, 40, 191, 171, 148, 53, 191, 232, 53, 45, 190, 149, 127, 18, 62, 249, 130, 39, 60, 89, 27, 209, 62, 144, 28, 54, 188, 9, 230, 4, 62, 35, 124, 153, 59, 33, 69, 79, 62, 228, 118, 149, 62, 239, 0, 157, 62, 68, 182, 219, 61, 177, 186, 242, 61, 18, 146, 137, 60, 241, 84, 107, 58, 164, 118, 162, 62, 235, 242, 249, 62, 99, 18, 3, 190, 126, 151, 2, 62, 180, 112, 175, 189, 91, 107, 35, 62, 177, 238, 198, 61, 94, 52, 129, 191, 193, 107, 158, 61, 29, 37, 63, 190, 235, 226, 209, 61, 76, 184, 170, 190, 165, 231, 209, 190, 31, 37, 52, 191, 235, 29, 231, 61, 71, 45, 106, 190, 67, 146, 138, 190, 198, 187, 208, 190, 69, 29, 110, 189, 160, 106, 49, 191, 222, 63, 109, 191, 48, 10, 163, 187, 115, 6, 124, 62, 28, 31, 179, 190, 214, 54, 24, 62, 44, 195, 7, 62, 31, 170, 46, 188, 35, 247, 44, 62, 74, 56, 158, 62, 22, 100, 95, 189, 151, 23, 0, 61, 68, 80, 12, 190, 219, 141, 140, 61, 223, 171, 48, 62, 160, 186, 250, 189, 189, 137, 127, 61, 159, 44, 199, 189, 243, 5, 98, 189, 73, 132, 131, 189, 113, 10, 206, 61, 68, 83, 39, 190, 125, 73, 161, 61, 31, 12, 194, 189, 246, 205, 90, 189, 253, 191, 17, 190, 157, 133, 131, 189, 204, 21, 110, 61, 242, 192, 117, 61, 36, 245, 117, 61, 52, 72, 40, 190, 206, 68, 140, 189, 93, 239, 68, 61, 39, 166, 20, 190, 70, 232, 168, 61, 105, 187, 12, 190, 131, 132, 170, 189, 189, 199, 130, 59, 154, 76, 198, 189, 81, 232, 97, 61, 149, 16, 106, 189, 108, 125, 49, 62, 104, 152, 250, 189, 247, 224, 201, 59, 53, 214, 173, 190, 2, 245, 154, 61, 193, 228, 136, 62, 197, 57, 235, 189, 224, 248, 141, 190, 186, 67, 71, 62, 145, 96, 150, 62, 223, 98, 77, 62, 39, 31, 114, 190, 80, 15, 4, 189, 31, 110, 135, 189, 18, 247, 50, 190, 11, 28, 137, 61, 174, 191, 4, 62, 134, 70, 136, 190, 150, 107, 108, 62, 230, 189, 32, 62, 135, 47, 62, 190, 25, 3, 181, 190, 16, 252, 140, 190, 61, 19, 60, 61, 212, 43, 234, 61, 36, 200, 33, 62, 185, 165, 24, 62, 112, 33, 72, 62, 17, 242, 227, 61, 50, 95, 182, 188, 211, 254, 135, 62, 230, 34, 74, 62, 74, 232, 65, 62, 172, 156, 13, 189, 51, 71, 34, 190, 240, 4, 62, 62, 120, 209, 4, 191, 236, 28, 202, 59, 18, 41, 223, 61, 162, 241, 40, 62, 160, 111, 57, 191, 69, 42, 218, 60, 177, 136, 81, 61, 204, 96, 239, 61, 66, 10, 201, 189, 66, 117, 8, 62, 172, 201, 37, 62, 186, 9, 28, 190, 153, 27, 88, 61, 219, 45, 25, 190, 209, 32, 93, 190, 65, 122, 61, 189, 64, 253, 251, 189, 217, 168, 193, 59, 154, 219, 149, 188, 229, 89, 21, 190, 83, 226, 4, 190, 66, 62, 28, 190, 16, 181, 156, 189, 54, 174, 164, 189, 52, 173, 82, 59, 139, 51, 153, 61, 112, 86, 247, 189, 31, 178, 230, 189, 93, 188, 157, 60, 111, 246, 69, 190, 102, 192, 32, 190, 183, 175, 143, 189, 234, 118, 220, 62, 150, 36, 223, 61, 14, 27, 181, 191, 181, 171, 144, 61, 129, 207, 189, 190, 223, 202, 208, 190, 108, 235, 96, 61, 102, 231, 249, 189, 140, 81, 24, 62, 181, 193, 13, 191, 19, 217, 214, 61, 120, 216, 137, 190, 191, 146, 201, 57, 34, 59, 124, 191, 228, 231, 235, 62, 231, 162, 185, 190, 83, 64, 29, 191, 99, 200, 2, 191, 243, 5, 23, 190, 75, 137, 240, 189, 148, 213, 148, 61, 145, 111, 76, 190, 145, 151, 49, 62, 154, 251, 10, 189, 65, 189, 7, 61, 9, 250, 10, 62, 153, 123, 72, 62, 173, 123, 24, 189, 190, 82, 27, 62, 248, 128, 232, 189, 57, 55, 169, 189, 177, 23, 44, 190, 236, 176, 88, 62, 50, 139, 151, 62, 81, 146, 90, 62, 218, 2, 3, 61, 115, 244, 248, 61, 171, 74, 154, 62, 177, 87, 23, 62, 136, 31, 83, 191, 208, 81, 60, 61, 250, 55, 1, 63, 255, 157, 54, 62, 98, 97, 8, 191, 90, 235, 109, 188, 53, 170, 83, 189, 58, 51, 114, 62, 234, 36, 16, 190, 13, 204, 34, 62, 168, 121, 148, 190, 34, 5, 200, 188, 247, 124, 131, 190, 236, 144, 227, 190, 67, 205, 170, 190, 58, 178, 60, 62, 96, 92, 1, 190, 54, 73, 53, 190, 166, 237, 79, 62, 135, 109, 246, 189, 126, 170, 56, 62, 150, 154, 245, 188, 38, 163, 242, 187, 58, 16, 58, 60, 110, 234, 71, 190, 234, 29, 179, 59, 10, 111, 12, 62, 167, 93, 52, 190, 58, 117, 144, 189, 30, 65, 145, 61, 234, 227, 15, 188, 215, 108, 97, 190, 32, 202, 103, 190, 155, 21, 31, 189, 107, 22, 96, 189, 60, 99, 135, 190, 82, 239, 23, 187, 248, 54, 227, 61, 44, 23, 145, 188, 137, 199, 253, 61, 94, 75, 154, 189, 128, 72, 25, 191, 244, 164, 95, 191, 36, 33, 191, 60, 70, 16, 58, 62, 27, 131, 19, 62, 55, 153, 185, 61, 214, 57, 227, 189, 68, 209, 176, 189, 46, 20, 201, 61, 150, 140, 191, 189, 48, 56, 157, 62, 210, 46, 121, 60, 202, 107, 43, 61, 172, 246, 133, 188, 207, 106, 190, 61, 52, 81, 169, 190, 226, 116, 152, 62, 8, 22, 214, 62, 25, 173, 6, 190, 8, 250, 121, 190, 145, 176, 114, 62, 165, 203, 207, 61, 79, 63, 177, 62, 215, 122, 34, 191, 65, 133, 46, 190, 125, 142, 154, 189, 255, 147, 136, 190, 60, 102, 88, 61, 37, 140, 214, 61, 115, 29, 7, 191, 24, 201, 29, 62, 249, 125, 171, 61, 209, 20, 26, 62, 161, 58, 174, 62, 135, 31, 37, 191, 38, 95, 198, 61, 93, 252, 165, 62, 218, 242, 166, 189, 132, 147, 176, 62, 94, 167, 42, 62, 166, 255, 152, 59, 105, 79, 205, 190, 150, 91, 77, 62, 215, 102, 136, 62, 54, 83, 104, 62, 81, 30, 138, 62, 53, 115, 216, 190, 102, 42, 165, 61, 98, 246, 14, 62, 74, 127, 90, 62, 197, 103, 142, 61, 148, 160, 227, 189, 162, 8, 226, 190, 208, 139, 142, 186, 144, 36, 163, 62, 109, 98, 113, 191, 201, 235, 95, 62, 170, 26, 145, 189, 222, 131, 159, 62, 135, 223, 185, 190, 4, 127, 153, 189, 151, 36, 181, 61, 229, 196, 15, 60, 255, 129, 230, 188, 95, 58, 20, 62, 240, 203, 220, 62, 34, 241, 86, 62, 91, 27, 174, 190, 158, 77, 177, 190, 97, 133, 233, 190, 64, 167, 205, 61, 20, 254, 70, 190, 18, 75, 48, 60, 55, 80, 82, 62, 226, 206, 47, 61, 171, 124, 7, 62, 234, 213, 104, 62, 156, 100, 163, 61, 96, 33, 105, 61, 54, 107, 113, 190, 209, 170, 167, 189, 116, 119, 222, 190, 18, 241, 118, 62, 168, 229, 156, 61, 30, 233, 224, 61, 226, 182, 1, 189, 84, 30, 85, 190, 232, 185, 156, 62, 191, 170, 129, 62, 165, 225, 190, 61, 244, 150, 175, 187, 194, 164, 118, 62, 241, 241, 9, 191, 185, 202, 138, 62, 116, 240, 252, 187, 87, 168, 184, 189, 91, 55, 193, 190, 169, 205, 160, 190, 89, 12, 69, 62, 65, 82, 55, 187, 123, 24, 188, 190, 223, 174, 203, 62, 174, 17, 102, 189, 245, 73, 72, 191, 17, 98, 79, 62, 113, 29, 177, 189, 198, 86, 136, 62, 31, 234, 10, 190, 169, 181, 17, 191, 107, 73, 85, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 9, 78, 62, 82, 80, 119, 60, 132, 43, 19, 190, 47, 44, 180, 62, 105, 192, 99, 189, 5, 17, 36, 190, 58, 69, 171, 62, 83, 235, 163, 189, 224, 25, 177, 62, 215, 222, 35, 62, 161, 101, 101, 190, 235, 243, 156, 61, 239, 77, 32, 190, 13, 19, 251, 190, 129, 19, 89, 190, 138, 58, 7, 62, 112, 222, 165, 57, 136, 102, 202, 61, 42, 107, 173, 61, 220, 34, 15, 189, 144, 107, 216, 189, 168, 123, 150, 61, 85, 150, 48, 62, 121, 169, 162, 188, 91, 90, 122, 62, 76, 253, 221, 190, 18, 236, 42, 62, 185, 141, 10, 61, 145, 142, 126, 62, 244, 61, 61, 62, 58, 198, 27, 61, 107, 228, 15, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {134, 109, 60, 191, 215, 49, 199, 189, 41, 233, 99, 189, 6, 75, 70, 191, 79, 129, 184, 61, 78, 53, 245, 189, 135, 160, 61, 63, 50, 136, 148, 186, 254, 191, 0, 188, 20, 213, 122, 189, 103, 202, 20, 62, 118, 255, 185, 62, 170, 60, 14, 190, 185, 110, 78, 63, 93, 68, 109, 63, 120, 153, 87, 191, 153, 241, 235, 190, 162, 70, 81, 62, 10, 115, 71, 62, 110, 167, 206, 190, 74, 107, 131, 190, 3, 86, 96, 190, 189, 89, 193, 62, 167, 14, 204, 61, 171, 7, 97, 62, 57, 149, 161, 62, 81, 144, 97, 190, 15, 250, 154, 62, 127, 168, 18, 190, 134, 129, 0, 63, 159, 82, 150, 62, 154, 217, 11, 191, 14, 50, 107, 61, 89, 147, 80, 189, 105, 160, 175, 60, 9, 215, 159, 188, 106, 231, 43, 190, 152, 41, 242, 189, 51, 59, 101, 61, 111, 84, 205, 61, 123, 246, 9, 190, 254, 60, 255, 189, 12, 184, 29, 190, 110, 200, 48, 62, 65, 61, 146, 61, 50, 158, 209, 62, 195, 114, 53, 190, 214, 233, 111, 62, 132, 124, 9, 62, 255, 132, 119, 190, 248, 108, 16, 191, 35, 200, 248, 61, 140, 163, 14, 62, 26, 79, 10, 190, 80, 75, 97, 191, 38, 107, 40, 62, 33, 131, 73, 190, 34, 166, 162, 62, 91, 196, 215, 190, 255, 67, 52, 190, 33, 141, 36, 190, 1, 90, 117, 62, 226, 68, 22, 62, 18, 70, 27, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {133, 218, 42, 189, 235, 20, 53, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {220, 39, 166, 63, 150, 34, 183, 190, 149, 254, 88, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {214, 103, 53, 64, 3, 0, 57, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0015/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}