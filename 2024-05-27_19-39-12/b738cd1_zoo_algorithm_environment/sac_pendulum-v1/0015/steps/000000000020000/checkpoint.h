// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 40, 157, 191, 155, 84, 56, 189, 122, 163, 208, 62, 149, 189, 220, 62, 77, 195, 84, 63, 254, 133, 217, 62, 83, 213, 129, 63, 181, 131, 19, 191, 117, 15, 227, 189, 175, 42, 197, 190, 247, 233, 30, 63, 119, 69, 6, 190, 204, 108, 151, 190, 251, 42, 216, 191, 167, 154, 115, 190, 95, 198, 66, 63, 97, 112, 0, 62, 144, 46, 16, 63, 64, 239, 49, 191, 177, 30, 130, 62, 91, 153, 13, 62, 25, 112, 86, 190, 241, 59, 207, 61, 72, 235, 139, 190, 147, 90, 61, 190, 96, 199, 169, 60, 105, 196, 197, 190, 67, 58, 64, 63, 192, 121, 96, 63, 84, 208, 196, 62, 37, 137, 99, 61, 124, 125, 153, 189, 95, 199, 27, 191, 87, 0, 9, 191, 210, 2, 183, 191, 121, 150, 144, 189, 23, 70, 140, 62, 62, 50, 237, 190, 171, 133, 230, 62, 31, 103, 184, 190, 6, 193, 73, 63, 10, 195, 233, 61, 95, 211, 11, 190, 187, 181, 181, 63, 6, 90, 161, 62, 149, 241, 74, 191, 118, 227, 213, 191, 108, 154, 186, 190, 169, 109, 116, 62, 119, 156, 212, 190, 54, 80, 167, 60, 15, 221, 185, 62, 5, 129, 137, 191, 38, 35, 229, 190, 182, 145, 116, 62, 118, 36, 102, 191, 37, 248, 43, 190, 143, 94, 66, 63, 143, 21, 134, 191, 112, 169, 143, 190, 244, 9, 87, 191, 86, 95, 136, 191, 125, 89, 25, 191, 187, 11, 212, 190, 152, 229, 86, 63, 176, 48, 219, 61, 207, 63, 221, 190, 221, 23, 173, 63, 187, 133, 197, 62, 183, 216, 102, 191, 217, 189, 230, 190, 176, 90, 12, 190, 95, 179, 223, 61, 208, 55, 64, 191, 229, 99, 110, 62, 250, 136, 237, 190, 49, 133, 69, 63, 2, 185, 5, 63, 109, 171, 16, 61, 35, 204, 74, 63, 0, 15, 77, 190, 197, 53, 10, 63, 43, 42, 202, 190, 13, 45, 22, 63, 168, 113, 206, 188, 35, 34, 161, 63, 135, 27, 22, 190, 21, 219, 7, 63, 35, 34, 74, 191, 129, 58, 33, 190, 55, 235, 24, 190, 17, 74, 220, 190, 75, 128, 41, 63, 53, 255, 24, 191, 169, 30, 198, 61, 114, 114, 41, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 150, 117, 190, 131, 71, 130, 190, 234, 247, 228, 62, 106, 187, 140, 190, 168, 47, 40, 62, 156, 82, 230, 61, 166, 27, 234, 61, 10, 111, 164, 62, 114, 65, 248, 190, 99, 19, 136, 191, 140, 14, 189, 62, 163, 73, 223, 62, 76, 197, 241, 189, 192, 124, 11, 63, 221, 139, 160, 62, 140, 133, 46, 190, 235, 195, 18, 63, 167, 128, 54, 191, 210, 170, 185, 61, 154, 218, 195, 190, 165, 122, 28, 191, 165, 201, 242, 62, 160, 186, 16, 63, 216, 207, 102, 190, 161, 44, 148, 60, 5, 26, 133, 189, 25, 250, 49, 190, 203, 188, 204, 189, 182, 88, 3, 63, 4, 209, 116, 61, 178, 41, 27, 190, 119, 239, 102, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 160, 24, 63, 249, 212, 85, 190, 4, 207, 126, 190, 67, 149, 195, 190, 204, 125, 59, 62, 156, 204, 211, 189, 238, 87, 21, 189, 231, 172, 136, 62, 147, 102, 165, 189, 173, 185, 196, 186, 53, 72, 159, 61, 31, 248, 52, 62, 52, 192, 188, 62, 138, 124, 229, 62, 115, 251, 187, 191, 210, 14, 152, 62, 76, 119, 238, 189, 185, 133, 53, 190, 1, 184, 168, 190, 79, 166, 177, 190, 9, 153, 135, 62, 7, 203, 205, 61, 170, 156, 34, 190, 152, 2, 192, 62, 170, 8, 31, 190, 226, 243, 129, 191, 212, 216, 118, 61, 64, 49, 247, 189, 205, 233, 156, 61, 253, 139, 225, 60, 98, 103, 141, 189, 223, 59, 21, 191, 112, 73, 245, 189, 72, 205, 154, 189, 150, 30, 44, 189, 63, 244, 222, 188, 52, 157, 181, 61, 104, 137, 136, 189, 214, 19, 27, 190, 254, 143, 133, 185, 90, 142, 15, 190, 152, 172, 223, 189, 161, 60, 241, 188, 208, 160, 43, 60, 243, 105, 3, 190, 214, 152, 212, 61, 206, 156, 29, 190, 22, 122, 20, 190, 64, 30, 10, 189, 168, 209, 189, 189, 96, 212, 236, 60, 59, 145, 190, 189, 107, 209, 12, 62, 130, 3, 252, 61, 251, 154, 39, 189, 238, 182, 86, 189, 188, 103, 246, 61, 189, 184, 247, 60, 245, 222, 70, 190, 184, 170, 221, 61, 9, 241, 184, 187, 240, 156, 33, 190, 76, 168, 226, 60, 199, 180, 15, 190, 114, 185, 22, 189, 135, 97, 201, 189, 39, 49, 8, 190, 191, 106, 42, 190, 163, 186, 220, 189, 227, 112, 44, 190, 157, 168, 191, 189, 192, 29, 213, 61, 85, 19, 166, 189, 252, 59, 46, 61, 212, 229, 58, 61, 73, 24, 15, 61, 68, 207, 194, 189, 153, 97, 96, 61, 46, 59, 52, 61, 228, 85, 197, 189, 33, 243, 43, 190, 88, 80, 38, 190, 74, 210, 126, 61, 150, 202, 19, 62, 28, 3, 144, 188, 128, 145, 225, 61, 25, 130, 141, 189, 94, 8, 5, 62, 65, 217, 140, 189, 149, 61, 234, 189, 120, 27, 17, 189, 48, 129, 251, 188, 45, 106, 37, 190, 196, 227, 246, 188, 75, 241, 233, 61, 142, 104, 132, 61, 23, 194, 141, 61, 235, 8, 41, 190, 141, 242, 132, 62, 57, 64, 165, 62, 47, 74, 64, 191, 159, 242, 142, 189, 42, 53, 13, 190, 84, 98, 144, 61, 114, 50, 91, 62, 58, 112, 122, 191, 221, 9, 177, 189, 34, 78, 95, 191, 43, 124, 253, 60, 98, 211, 123, 62, 41, 75, 224, 189, 110, 120, 15, 191, 197, 207, 147, 62, 169, 187, 10, 191, 152, 66, 168, 190, 147, 192, 61, 191, 114, 237, 130, 190, 104, 31, 209, 62, 139, 178, 216, 189, 79, 20, 128, 190, 103, 114, 186, 189, 70, 94, 3, 62, 191, 47, 37, 62, 250, 61, 194, 61, 165, 255, 200, 62, 20, 166, 30, 62, 34, 255, 237, 188, 246, 61, 38, 62, 5, 68, 174, 189, 178, 17, 148, 59, 153, 42, 139, 189, 3, 202, 199, 189, 83, 137, 26, 190, 63, 248, 226, 188, 10, 31, 241, 188, 231, 1, 147, 189, 167, 228, 201, 189, 243, 51, 192, 189, 12, 170, 245, 189, 212, 244, 189, 189, 107, 110, 139, 189, 69, 249, 25, 190, 178, 15, 129, 60, 193, 42, 203, 188, 197, 97, 114, 60, 106, 203, 187, 61, 36, 235, 167, 59, 68, 142, 15, 190, 0, 240, 230, 189, 22, 249, 27, 190, 72, 210, 167, 61, 238, 147, 18, 62, 77, 41, 11, 190, 155, 84, 229, 189, 185, 211, 59, 189, 89, 56, 40, 61, 249, 1, 239, 61, 167, 91, 178, 189, 75, 71, 9, 60, 52, 73, 222, 61, 153, 116, 78, 61, 196, 140, 86, 60, 226, 217, 105, 188, 183, 117, 249, 189, 97, 189, 3, 190, 155, 227, 184, 60, 17, 235, 3, 190, 149, 252, 35, 190, 89, 190, 153, 61, 71, 247, 7, 190, 127, 235, 17, 62, 64, 189, 122, 60, 81, 242, 82, 58, 177, 239, 20, 190, 101, 110, 25, 190, 154, 53, 9, 62, 248, 131, 4, 190, 199, 147, 237, 188, 161, 149, 0, 62, 180, 124, 5, 189, 119, 41, 163, 189, 72, 41, 195, 189, 38, 169, 229, 189, 75, 101, 228, 60, 22, 159, 66, 61, 12, 227, 39, 61, 119, 149, 48, 190, 9, 105, 182, 61, 209, 143, 234, 61, 226, 179, 32, 190, 104, 111, 48, 190, 131, 127, 143, 189, 3, 93, 169, 61, 189, 214, 89, 190, 190, 190, 139, 62, 9, 76, 107, 62, 219, 96, 234, 189, 84, 182, 172, 190, 33, 115, 67, 62, 176, 54, 139, 61, 225, 186, 255, 61, 32, 91, 209, 190, 220, 207, 112, 190, 57, 119, 105, 62, 237, 4, 25, 191, 24, 54, 141, 62, 79, 212, 161, 62, 145, 80, 95, 191, 116, 204, 255, 61, 124, 83, 141, 61, 29, 62, 211, 60, 153, 58, 201, 60, 186, 153, 161, 191, 240, 163, 35, 62, 185, 41, 37, 62, 186, 132, 235, 61, 238, 154, 0, 62, 133, 214, 8, 62, 202, 169, 137, 190, 172, 136, 125, 190, 110, 9, 119, 62, 226, 136, 180, 61, 10, 134, 154, 62, 115, 100, 132, 62, 211, 239, 204, 189, 49, 213, 188, 189, 111, 99, 164, 189, 253, 95, 212, 189, 181, 200, 70, 61, 193, 92, 134, 61, 222, 245, 216, 189, 33, 237, 224, 188, 217, 187, 255, 61, 215, 25, 167, 58, 16, 187, 50, 190, 36, 173, 215, 189, 150, 93, 26, 190, 7, 64, 83, 189, 216, 123, 208, 60, 49, 216, 208, 189, 224, 106, 138, 189, 146, 178, 9, 62, 34, 80, 175, 189, 249, 255, 79, 190, 199, 19, 190, 61, 136, 67, 11, 190, 227, 26, 33, 188, 13, 72, 44, 190, 135, 244, 172, 61, 195, 96, 28, 190, 41, 120, 234, 61, 138, 66, 160, 189, 78, 39, 14, 60, 45, 73, 87, 189, 229, 115, 33, 60, 108, 200, 33, 62, 5, 194, 26, 190, 22, 14, 207, 189, 96, 65, 80, 61, 174, 148, 13, 191, 211, 78, 49, 61, 87, 169, 14, 190, 54, 109, 38, 189, 167, 127, 138, 189, 185, 9, 20, 191, 203, 68, 18, 189, 24, 45, 176, 61, 231, 0, 147, 62, 105, 117, 46, 190, 31, 243, 74, 190, 175, 3, 51, 62, 148, 102, 67, 62, 67, 92, 231, 62, 56, 242, 86, 189, 103, 194, 174, 188, 182, 135, 52, 190, 67, 5, 87, 190, 131, 98, 132, 188, 32, 225, 235, 61, 99, 211, 134, 190, 92, 172, 207, 56, 192, 212, 31, 61, 160, 219, 84, 189, 23, 168, 98, 188, 52, 86, 169, 62, 124, 221, 42, 62, 121, 132, 186, 60, 173, 89, 173, 189, 253, 142, 129, 61, 122, 164, 68, 190, 184, 117, 14, 190, 185, 123, 41, 189, 136, 190, 33, 190, 211, 91, 130, 189, 197, 96, 165, 62, 253, 50, 127, 61, 162, 216, 43, 190, 40, 89, 176, 190, 222, 142, 35, 61, 17, 104, 106, 189, 57, 231, 144, 190, 100, 45, 197, 61, 234, 199, 251, 189, 203, 1, 194, 56, 16, 58, 105, 62, 254, 190, 145, 190, 130, 178, 223, 190, 79, 61, 5, 191, 158, 123, 125, 189, 138, 47, 90, 190, 145, 56, 197, 187, 186, 150, 126, 62, 200, 217, 56, 62, 222, 147, 176, 189, 181, 73, 124, 61, 174, 140, 207, 189, 161, 118, 51, 62, 208, 76, 188, 188, 173, 161, 12, 62, 114, 168, 101, 188, 57, 55, 146, 188, 185, 111, 94, 190, 96, 35, 246, 187, 205, 168, 21, 62, 179, 100, 224, 189, 46, 224, 56, 190, 52, 217, 94, 190, 41, 177, 201, 189, 8, 108, 19, 61, 110, 197, 205, 61, 1, 245, 91, 188, 186, 228, 124, 61, 72, 206, 236, 61, 11, 121, 62, 190, 14, 184, 120, 61, 14, 141, 229, 59, 196, 7, 39, 62, 65, 68, 181, 189, 196, 202, 38, 62, 196, 130, 60, 190, 210, 93, 136, 189, 135, 213, 235, 61, 34, 53, 232, 188, 20, 174, 152, 189, 13, 250, 40, 190, 67, 33, 169, 61, 63, 153, 177, 189, 79, 15, 223, 61, 6, 1, 78, 190, 151, 2, 181, 61, 60, 162, 36, 190, 82, 199, 222, 61, 203, 23, 96, 189, 27, 110, 188, 188, 157, 8, 176, 187, 203, 11, 140, 190, 95, 173, 115, 62, 29, 15, 60, 188, 192, 14, 61, 191, 13, 186, 138, 190, 234, 53, 115, 190, 230, 108, 14, 191, 176, 5, 136, 190, 244, 219, 19, 63, 25, 107, 112, 62, 169, 146, 44, 191, 197, 189, 129, 189, 168, 138, 55, 190, 13, 235, 129, 62, 6, 121, 27, 190, 92, 77, 249, 62, 6, 153, 144, 189, 5, 43, 90, 190, 183, 250, 33, 191, 246, 102, 163, 190, 213, 32, 130, 191, 98, 15, 5, 62, 171, 91, 227, 189, 160, 175, 52, 191, 213, 56, 95, 62, 73, 22, 100, 191, 139, 234, 13, 189, 50, 160, 221, 60, 80, 31, 87, 190, 245, 84, 67, 61, 22, 247, 186, 187, 119, 59, 170, 189, 54, 48, 4, 190, 150, 33, 4, 62, 198, 87, 155, 189, 218, 210, 168, 61, 33, 185, 28, 62, 224, 32, 40, 190, 253, 171, 180, 188, 252, 58, 34, 190, 114, 21, 9, 190, 201, 89, 46, 62, 5, 89, 25, 189, 56, 167, 134, 60, 102, 38, 171, 189, 174, 121, 132, 61, 134, 124, 73, 188, 46, 186, 15, 62, 125, 94, 204, 61, 196, 91, 198, 189, 89, 73, 32, 189, 64, 130, 216, 189, 144, 23, 27, 62, 56, 65, 5, 190, 22, 184, 37, 189, 136, 118, 239, 189, 201, 37, 199, 189, 218, 1, 30, 62, 193, 56, 120, 61, 63, 102, 212, 61, 195, 67, 63, 61, 59, 83, 206, 190, 96, 207, 131, 62, 238, 10, 31, 190, 188, 98, 81, 61, 235, 25, 12, 190, 99, 78, 21, 62, 84, 191, 55, 191, 128, 61, 134, 189, 18, 125, 172, 61, 243, 175, 163, 62, 214, 155, 18, 61, 166, 125, 7, 191, 182, 96, 143, 62, 150, 111, 78, 190, 78, 10, 1, 190, 152, 0, 40, 190, 87, 81, 83, 190, 104, 230, 169, 189, 155, 2, 114, 191, 216, 170, 56, 61, 8, 144, 195, 61, 77, 178, 183, 190, 201, 162, 77, 190, 149, 145, 58, 190, 99, 121, 150, 187, 20, 100, 68, 62, 199, 96, 6, 190, 106, 209, 170, 188, 96, 78, 203, 190, 252, 106, 100, 190, 118, 209, 0, 189, 248, 177, 92, 61, 7, 20, 226, 190, 198, 22, 171, 62, 23, 181, 130, 191, 247, 216, 80, 190, 183, 140, 136, 62, 230, 15, 62, 62, 251, 163, 187, 189, 14, 118, 153, 62, 160, 19, 151, 190, 10, 43, 7, 63, 67, 222, 238, 61, 60, 77, 198, 189, 27, 126, 119, 189, 142, 201, 223, 62, 181, 180, 89, 61, 33, 217, 40, 63, 62, 100, 146, 190, 205, 60, 160, 190, 209, 84, 8, 62, 101, 232, 144, 190, 73, 182, 86, 60, 39, 67, 201, 62, 14, 0, 94, 60, 210, 245, 148, 62, 25, 124, 27, 191, 242, 124, 98, 189, 227, 164, 141, 189, 100, 40, 47, 62, 251, 33, 135, 62, 146, 231, 219, 190, 36, 101, 26, 190, 67, 73, 77, 190, 45, 135, 67, 191, 179, 157, 244, 62, 52, 115, 197, 190, 228, 214, 139, 190, 121, 249, 40, 189, 248, 109, 20, 62, 19, 54, 137, 189, 13, 25, 89, 62, 94, 226, 136, 190, 19, 182, 177, 62, 19, 220, 182, 61, 132, 161, 131, 62, 173, 239, 105, 62, 165, 248, 163, 62, 42, 88, 79, 61, 206, 152, 62, 62, 75, 33, 82, 62, 236, 38, 56, 191, 19, 68, 153, 191, 36, 202, 163, 191, 223, 164, 189, 189, 31, 36, 26, 59, 28, 88, 203, 60, 182, 90, 102, 190, 28, 92, 9, 60, 27, 162, 176, 190, 219, 102, 187, 62, 176, 68, 92, 62, 23, 16, 224, 62, 135, 58, 133, 190, 244, 218, 190, 189, 135, 58, 25, 191, 104, 147, 21, 191, 114, 7, 172, 62, 111, 255, 209, 61, 250, 68, 208, 189, 25, 242, 23, 191, 180, 182, 173, 62, 243, 182, 255, 190, 232, 12, 237, 61, 15, 149, 157, 190, 20, 45, 189, 62, 152, 82, 107, 62, 23, 66, 117, 191, 42, 172, 203, 61, 194, 13, 132, 189, 23, 244, 130, 189, 108, 245, 172, 189, 207, 30, 114, 61, 95, 208, 243, 190, 183, 167, 110, 191, 243, 143, 62, 191, 44, 89, 52, 188, 240, 227, 61, 190, 16, 233, 78, 190, 54, 192, 16, 62, 41, 17, 29, 62, 79, 248, 139, 61, 126, 43, 9, 63, 245, 131, 214, 61, 85, 50, 131, 61, 188, 83, 21, 62, 136, 242, 56, 190, 251, 200, 244, 189, 115, 47, 71, 62, 68, 108, 5, 61, 154, 204, 48, 61, 196, 29, 143, 62, 121, 149, 130, 189, 75, 188, 152, 189, 167, 102, 78, 61, 167, 71, 35, 62, 70, 197, 239, 61, 29, 7, 170, 60, 155, 94, 35, 62, 192, 88, 157, 62, 4, 78, 33, 189, 122, 211, 100, 61, 104, 158, 16, 62, 165, 158, 224, 190, 222, 203, 237, 60, 231, 17, 13, 190, 225, 66, 218, 189, 249, 5, 83, 190, 211, 240, 240, 189, 31, 162, 43, 62, 184, 149, 146, 60, 35, 238, 13, 62, 178, 71, 186, 62, 157, 7, 108, 62, 162, 206, 219, 189, 25, 67, 75, 188, 9, 38, 186, 62, 19, 248, 14, 62, 3, 104, 0, 63, 83, 45, 31, 62, 138, 182, 231, 190, 162, 15, 23, 190, 165, 54, 64, 61, 170, 84, 47, 190, 76, 98, 126, 62, 13, 221, 88, 62, 17, 154, 167, 190, 98, 203, 182, 59, 86, 97, 110, 190, 245, 147, 177, 191, 129, 114, 193, 61, 235, 83, 109, 61, 222, 85, 54, 61, 74, 127, 31, 191, 216, 217, 247, 191, 183, 121, 132, 61, 80, 77, 129, 62, 145, 104, 148, 188, 234, 155, 5, 189, 170, 170, 93, 190, 37, 26, 53, 190, 34, 253, 2, 191, 199, 49, 34, 192, 214, 250, 2, 191, 113, 152, 128, 190, 230, 113, 94, 191, 173, 250, 166, 190, 10, 127, 209, 188, 163, 67, 59, 189, 198, 142, 75, 61, 193, 3, 174, 190, 41, 141, 21, 191, 243, 82, 20, 191, 67, 193, 180, 62, 92, 67, 115, 61, 67, 175, 215, 189, 28, 205, 245, 190, 2, 250, 183, 62, 103, 210, 161, 190, 59, 244, 11, 62, 15, 200, 219, 190, 141, 243, 134, 62, 119, 107, 134, 62, 168, 226, 79, 191, 171, 128, 120, 62, 221, 166, 174, 189, 51, 194, 175, 61, 142, 234, 213, 188, 193, 23, 70, 62, 48, 25, 57, 191, 4, 42, 99, 191, 84, 161, 54, 191, 248, 85, 44, 62, 230, 109, 163, 61, 32, 219, 186, 61, 114, 138, 243, 62, 245, 16, 99, 61, 159, 200, 131, 186, 77, 194, 234, 62, 122, 97, 132, 62, 1, 179, 15, 62, 225, 147, 40, 190, 197, 28, 152, 190, 178, 215, 176, 60, 115, 116, 99, 62, 241, 48, 91, 62, 51, 246, 4, 61, 200, 154, 116, 190, 120, 161, 162, 61, 203, 248, 8, 62, 58, 198, 135, 188, 57, 2, 255, 190, 210, 212, 204, 190, 79, 0, 99, 60, 134, 25, 220, 189, 235, 79, 81, 190, 168, 28, 32, 62, 190, 3, 198, 188, 27, 201, 142, 61, 183, 19, 225, 61, 129, 149, 185, 189, 94, 191, 198, 190, 172, 170, 92, 191, 46, 1, 127, 191, 47, 20, 112, 189, 222, 41, 84, 59, 136, 204, 74, 189, 191, 228, 65, 62, 12, 93, 188, 188, 21, 162, 129, 61, 228, 163, 45, 62, 0, 163, 126, 62, 234, 117, 202, 190, 66, 155, 74, 191, 173, 87, 77, 61, 230, 181, 160, 61, 51, 1, 99, 189, 205, 135, 66, 189, 52, 158, 184, 62, 11, 6, 179, 62, 17, 114, 172, 191, 156, 255, 39, 62, 37, 1, 4, 190, 11, 226, 136, 190, 11, 56, 95, 62, 132, 133, 25, 189, 166, 226, 210, 61, 219, 119, 127, 191, 168, 191, 109, 190, 154, 173, 78, 62, 46, 219, 6, 62, 96, 119, 20, 191, 243, 39, 10, 62, 58, 93, 13, 191, 220, 193, 37, 191, 129, 103, 53, 191, 171, 72, 22, 190, 106, 79, 227, 61, 108, 215, 205, 188, 203, 218, 39, 63, 9, 198, 234, 60, 230, 48, 198, 61, 72, 252, 198, 61, 76, 220, 76, 62, 58, 156, 136, 62, 216, 55, 168, 62, 8, 114, 157, 61, 238, 223, 206, 61, 250, 166, 166, 61, 59, 27, 159, 189, 20, 173, 175, 62, 4, 42, 224, 62, 27, 185, 146, 62, 217, 14, 176, 61, 71, 93, 109, 190, 210, 100, 100, 62, 249, 184, 169, 61, 122, 196, 167, 191, 48, 164, 46, 62, 32, 207, 173, 61, 54, 36, 27, 61, 10, 169, 164, 190, 170, 60, 219, 190, 242, 51, 25, 191, 2, 3, 17, 62, 253, 19, 62, 190, 31, 51, 70, 190, 11, 82, 158, 190, 149, 179, 38, 188, 155, 216, 49, 191, 75, 65, 162, 191, 239, 44, 164, 189, 126, 112, 48, 62, 17, 164, 206, 190, 66, 28, 40, 62, 96, 34, 130, 61, 97, 182, 21, 61, 184, 218, 85, 62, 71, 118, 168, 62, 163, 199, 160, 189, 151, 23, 0, 61, 68, 80, 12, 190, 219, 141, 140, 61, 223, 171, 48, 62, 160, 186, 250, 189, 189, 137, 127, 61, 159, 44, 199, 189, 243, 5, 98, 189, 73, 132, 131, 189, 113, 10, 206, 61, 68, 83, 39, 190, 125, 73, 161, 61, 31, 12, 194, 189, 246, 205, 90, 189, 253, 191, 17, 190, 157, 133, 131, 189, 204, 21, 110, 61, 242, 192, 117, 61, 36, 245, 117, 61, 52, 72, 40, 190, 206, 68, 140, 189, 93, 239, 68, 61, 39, 166, 20, 190, 70, 232, 168, 61, 105, 187, 12, 190, 131, 132, 170, 189, 189, 199, 130, 59, 154, 76, 198, 189, 81, 232, 97, 61, 149, 16, 106, 189, 108, 125, 49, 62, 104, 152, 250, 189, 108, 238, 97, 188, 180, 158, 138, 190, 220, 17, 128, 61, 120, 142, 36, 62, 227, 186, 201, 189, 176, 61, 124, 190, 152, 100, 27, 62, 81, 29, 105, 62, 13, 76, 210, 61, 151, 187, 53, 190, 107, 119, 125, 189, 7, 141, 114, 60, 164, 28, 60, 190, 52, 7, 200, 61, 119, 149, 57, 62, 90, 54, 237, 190, 100, 210, 129, 62, 31, 235, 6, 62, 199, 233, 106, 190, 205, 175, 167, 190, 170, 108, 185, 190, 142, 136, 139, 61, 47, 42, 15, 62, 210, 201, 184, 188, 223, 245, 211, 61, 109, 34, 99, 62, 82, 76, 123, 61, 222, 20, 237, 188, 64, 8, 162, 62, 233, 169, 71, 62, 139, 233, 86, 62, 207, 38, 224, 188, 51, 71, 34, 190, 240, 4, 62, 62, 120, 209, 4, 191, 236, 28, 202, 59, 18, 41, 223, 61, 162, 241, 40, 62, 160, 111, 57, 191, 69, 42, 218, 60, 177, 136, 81, 61, 204, 96, 239, 61, 66, 10, 201, 189, 66, 117, 8, 62, 172, 201, 37, 62, 186, 9, 28, 190, 153, 27, 88, 61, 219, 45, 25, 190, 209, 32, 93, 190, 65, 122, 61, 189, 64, 253, 251, 189, 217, 168, 193, 59, 154, 219, 149, 188, 229, 89, 21, 190, 83, 226, 4, 190, 66, 62, 28, 190, 16, 181, 156, 189, 54, 174, 164, 189, 52, 173, 82, 59, 139, 51, 153, 61, 112, 86, 247, 189, 31, 178, 230, 189, 93, 188, 157, 60, 111, 246, 69, 190, 141, 246, 88, 190, 78, 244, 147, 189, 87, 182, 231, 62, 219, 136, 25, 62, 194, 139, 229, 191, 111, 3, 185, 61, 37, 162, 251, 190, 165, 138, 174, 190, 251, 206, 23, 62, 125, 1, 164, 59, 19, 111, 101, 62, 107, 118, 7, 191, 44, 53, 5, 62, 138, 179, 135, 190, 76, 49, 124, 60, 40, 40, 192, 191, 57, 100, 250, 62, 0, 55, 147, 190, 13, 58, 21, 191, 204, 36, 230, 190, 129, 25, 131, 189, 30, 231, 240, 189, 7, 150, 140, 61, 97, 11, 143, 190, 108, 130, 108, 62, 114, 246, 215, 188, 228, 165, 79, 62, 135, 15, 43, 62, 175, 86, 145, 62, 71, 129, 162, 59, 72, 15, 18, 62, 44, 149, 220, 189, 106, 80, 199, 189, 41, 31, 19, 190, 216, 129, 127, 62, 197, 128, 150, 62, 23, 183, 73, 62, 230, 69, 57, 61, 5, 10, 96, 189, 211, 5, 166, 62, 47, 52, 1, 62, 207, 200, 131, 191, 213, 61, 230, 61, 216, 121, 254, 62, 120, 124, 53, 62, 122, 52, 244, 190, 137, 5, 148, 61, 251, 79, 132, 190, 173, 124, 139, 62, 139, 145, 90, 190, 55, 81, 235, 61, 93, 110, 159, 190, 75, 28, 9, 190, 242, 191, 39, 190, 123, 184, 0, 191, 101, 2, 32, 191, 249, 229, 22, 62, 49, 198, 7, 190, 51, 218, 1, 190, 13, 173, 76, 62, 101, 241, 21, 188, 91, 142, 72, 62, 178, 247, 166, 60, 121, 254, 85, 57, 30, 4, 43, 191, 99, 4, 21, 190, 216, 170, 238, 188, 2, 66, 201, 61, 12, 94, 53, 190, 173, 188, 95, 189, 129, 254, 253, 189, 112, 7, 183, 60, 139, 194, 128, 190, 167, 29, 157, 58, 178, 45, 46, 189, 164, 36, 144, 61, 200, 51, 131, 190, 81, 127, 109, 61, 142, 199, 56, 62, 246, 41, 110, 58, 35, 242, 1, 62, 194, 61, 64, 190, 254, 88, 123, 191, 151, 87, 159, 191, 91, 159, 133, 189, 102, 97, 128, 62, 108, 200, 104, 62, 189, 218, 139, 61, 158, 106, 174, 190, 215, 244, 183, 189, 11, 174, 15, 62, 114, 21, 40, 189, 101, 233, 189, 62, 137, 94, 230, 189, 90, 47, 61, 61, 59, 102, 120, 189, 115, 216, 249, 61, 227, 63, 137, 190, 174, 108, 148, 62, 100, 174, 193, 62, 15, 143, 76, 62, 63, 79, 113, 190, 235, 222, 131, 62, 7, 63, 160, 61, 40, 7, 150, 62, 85, 165, 29, 191, 159, 63, 54, 190, 77, 57, 196, 61, 53, 5, 140, 190, 195, 3, 175, 61, 187, 38, 38, 62, 201, 228, 7, 191, 24, 217, 44, 62, 104, 75, 68, 62, 230, 118, 72, 62, 210, 91, 213, 62, 244, 126, 49, 191, 86, 231, 27, 62, 16, 74, 191, 62, 133, 2, 211, 190, 97, 227, 160, 62, 125, 121, 73, 62, 110, 184, 123, 189, 234, 200, 211, 190, 73, 148, 109, 62, 223, 75, 147, 62, 202, 109, 134, 62, 82, 144, 148, 62, 212, 131, 188, 190, 207, 133, 1, 62, 183, 84, 22, 62, 90, 199, 83, 62, 21, 61, 228, 61, 187, 135, 165, 189, 132, 249, 1, 191, 28, 73, 30, 188, 153, 141, 145, 62, 194, 149, 148, 191, 163, 45, 100, 62, 106, 187, 52, 59, 200, 148, 176, 62, 177, 149, 159, 190, 95, 29, 52, 187, 152, 214, 119, 188, 47, 173, 19, 61, 75, 230, 2, 190, 217, 141, 161, 61, 32, 118, 159, 62, 250, 227, 19, 62, 43, 74, 133, 190, 214, 183, 210, 190, 19, 200, 19, 191, 252, 5, 202, 61, 83, 98, 86, 190, 104, 0, 104, 59, 71, 62, 109, 62, 172, 222, 199, 61, 234, 116, 209, 61, 179, 212, 149, 62, 147, 74, 176, 61, 121, 208, 200, 62, 215, 255, 184, 190, 44, 202, 191, 189, 147, 171, 233, 190, 199, 76, 186, 62, 121, 232, 14, 189, 63, 27, 14, 61, 160, 59, 91, 60, 43, 207, 58, 190, 155, 3, 243, 62, 147, 253, 147, 62, 69, 24, 105, 62, 188, 100, 101, 62, 120, 34, 90, 62, 174, 138, 73, 191, 137, 31, 220, 62, 135, 134, 229, 188, 174, 247, 178, 187, 154, 100, 165, 190, 112, 83, 89, 190, 175, 96, 151, 62, 221, 171, 99, 189, 254, 115, 165, 190, 177, 183, 15, 63, 213, 39, 191, 61, 35, 132, 247, 190, 222, 175, 74, 62, 196, 89, 251, 189, 69, 179, 131, 62, 130, 36, 11, 190, 160, 236, 32, 190, 185, 217, 211, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 161, 57, 62, 82, 80, 119, 60, 132, 43, 19, 190, 132, 25, 197, 62, 105, 192, 99, 189, 5, 17, 36, 190, 157, 149, 158, 62, 83, 235, 163, 189, 7, 137, 205, 62, 48, 49, 252, 61, 161, 101, 101, 190, 165, 106, 42, 61, 239, 77, 32, 190, 92, 113, 251, 190, 154, 19, 91, 190, 117, 21, 42, 62, 104, 179, 138, 187, 161, 52, 10, 62, 209, 45, 163, 60, 225, 235, 221, 188, 161, 150, 73, 190, 217, 104, 167, 61, 229, 19, 71, 62, 121, 169, 162, 188, 212, 235, 127, 62, 76, 253, 221, 190, 202, 254, 87, 62, 92, 222, 133, 61, 184, 240, 148, 62, 80, 17, 60, 62, 70, 77, 117, 61, 114, 75, 160, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 92, 58, 191, 215, 49, 199, 189, 41, 233, 99, 189, 31, 194, 76, 191, 79, 129, 184, 61, 78, 53, 245, 189, 202, 184, 51, 63, 50, 136, 148, 186, 202, 149, 73, 61, 133, 67, 182, 189, 103, 202, 20, 62, 176, 209, 51, 63, 170, 60, 14, 190, 197, 117, 110, 63, 67, 228, 135, 63, 53, 78, 149, 191, 204, 69, 225, 190, 133, 233, 73, 62, 192, 149, 227, 61, 114, 129, 161, 190, 202, 131, 98, 190, 227, 120, 100, 190, 222, 159, 185, 62, 167, 14, 204, 61, 216, 212, 14, 62, 57, 149, 161, 62, 18, 23, 142, 190, 161, 138, 153, 62, 69, 97, 143, 190, 34, 99, 245, 62, 194, 228, 129, 62, 75, 30, 25, 191, 115, 68, 239, 61, 89, 147, 80, 189, 105, 160, 175, 60, 130, 189, 126, 61, 106, 231, 43, 190, 152, 41, 242, 189, 111, 234, 17, 189, 111, 84, 205, 61, 64, 68, 155, 190, 237, 126, 131, 189, 12, 184, 29, 190, 75, 70, 205, 62, 65, 61, 146, 61, 188, 66, 240, 62, 44, 247, 150, 190, 40, 184, 236, 61, 112, 36, 1, 62, 38, 61, 62, 190, 220, 134, 129, 191, 222, 5, 194, 61, 220, 134, 10, 62, 178, 155, 193, 189, 239, 22, 92, 191, 38, 107, 40, 62, 4, 99, 50, 190, 34, 166, 162, 62, 108, 77, 196, 190, 2, 80, 124, 190, 135, 135, 191, 190, 130, 128, 68, 62, 16, 188, 239, 61, 64, 229, 116, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 39, 197, 188, 7, 203, 150, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {196, 125, 207, 63, 224, 115, 20, 191, 156, 206, 11, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {87, 180, 110, 64, 116, 16, 204, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0015/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}