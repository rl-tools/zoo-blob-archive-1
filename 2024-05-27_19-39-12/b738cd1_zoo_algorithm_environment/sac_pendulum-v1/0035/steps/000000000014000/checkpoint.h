// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 37, 139, 62, 132, 77, 176, 190, 25, 195, 87, 60, 233, 228, 169, 62, 248, 10, 17, 63, 175, 12, 175, 190, 178, 22, 45, 63, 22, 36, 111, 63, 217, 43, 72, 62, 215, 237, 235, 190, 28, 237, 10, 63, 54, 189, 43, 191, 119, 253, 165, 190, 138, 185, 42, 63, 168, 61, 34, 190, 142, 82, 132, 62, 138, 126, 175, 190, 140, 45, 162, 187, 82, 230, 124, 63, 128, 14, 66, 61, 136, 72, 94, 61, 59, 156, 157, 189, 164, 2, 28, 63, 142, 129, 133, 190, 121, 178, 39, 63, 247, 11, 129, 189, 164, 21, 227, 62, 186, 253, 28, 190, 61, 46, 175, 191, 57, 79, 212, 190, 121, 137, 36, 190, 138, 154, 149, 191, 48, 194, 16, 190, 235, 3, 10, 63, 193, 1, 129, 63, 27, 254, 226, 62, 97, 155, 50, 63, 204, 202, 101, 191, 229, 158, 172, 190, 252, 169, 132, 63, 248, 68, 166, 63, 197, 146, 169, 62, 31, 244, 231, 190, 158, 173, 246, 191, 7, 159, 245, 190, 103, 83, 216, 190, 97, 80, 230, 61, 251, 247, 202, 190, 205, 115, 109, 62, 225, 9, 45, 190, 210, 185, 218, 190, 21, 136, 155, 190, 196, 223, 70, 191, 193, 214, 206, 62, 19, 192, 198, 62, 117, 215, 240, 190, 161, 94, 186, 62, 241, 8, 13, 63, 156, 151, 36, 63, 217, 255, 112, 62, 148, 71, 199, 189, 79, 77, 103, 62, 19, 23, 40, 63, 247, 27, 29, 63, 148, 74, 85, 191, 26, 207, 249, 190, 176, 181, 63, 63, 121, 250, 131, 191, 209, 115, 17, 191, 223, 98, 254, 60, 56, 14, 4, 191, 135, 57, 179, 189, 153, 60, 210, 190, 190, 253, 144, 63, 202, 164, 51, 62, 234, 235, 41, 63, 214, 204, 55, 191, 94, 145, 107, 190, 87, 132, 96, 62, 202, 199, 1, 63, 233, 143, 19, 191, 170, 71, 62, 63, 215, 46, 150, 190, 155, 37, 253, 62, 212, 68, 80, 191, 215, 99, 171, 189, 14, 184, 154, 188, 129, 172, 90, 62, 152, 213, 182, 63, 233, 223, 152, 61, 190, 133, 65, 190, 179, 74, 9, 63, 133, 122, 79, 63, 14, 196, 173, 190, 149, 27, 13, 63, 253, 23, 173, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 183, 19, 191, 97, 144, 225, 189, 190, 178, 16, 190, 21, 202, 82, 62, 154, 198, 109, 190, 52, 21, 11, 191, 248, 224, 7, 62, 58, 51, 243, 62, 158, 189, 148, 190, 208, 196, 168, 58, 195, 146, 18, 63, 133, 126, 45, 190, 40, 70, 22, 63, 81, 232, 240, 61, 81, 53, 144, 190, 46, 118, 8, 190, 254, 169, 247, 59, 217, 124, 69, 190, 253, 167, 25, 63, 246, 176, 10, 63, 168, 178, 101, 62, 166, 9, 231, 190, 232, 56, 142, 62, 227, 157, 153, 62, 147, 13, 39, 63, 248, 74, 180, 190, 88, 165, 242, 61, 146, 112, 210, 190, 202, 14, 56, 63, 80, 183, 223, 62, 141, 179, 174, 187, 177, 142, 216, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 158, 198, 188, 183, 252, 245, 61, 51, 24, 44, 188, 1, 194, 156, 189, 101, 16, 175, 188, 200, 243, 12, 62, 25, 6, 29, 62, 18, 50, 222, 61, 62, 190, 116, 189, 103, 53, 44, 190, 8, 133, 95, 189, 182, 233, 181, 189, 142, 141, 131, 189, 91, 166, 42, 190, 67, 219, 196, 189, 100, 145, 140, 189, 77, 192, 53, 61, 42, 40, 2, 190, 163, 31, 118, 189, 60, 168, 45, 190, 104, 85, 235, 60, 154, 116, 30, 61, 25, 237, 247, 59, 108, 56, 187, 187, 88, 138, 13, 190, 37, 78, 130, 188, 195, 16, 164, 60, 99, 243, 4, 61, 131, 152, 125, 189, 159, 154, 157, 189, 154, 252, 26, 62, 47, 5, 193, 61, 251, 121, 47, 190, 122, 52, 59, 191, 132, 175, 56, 191, 168, 14, 18, 189, 12, 86, 235, 61, 103, 50, 12, 190, 69, 35, 227, 190, 173, 36, 48, 189, 165, 58, 207, 59, 212, 209, 64, 191, 17, 38, 94, 189, 217, 36, 72, 189, 5, 95, 31, 63, 108, 228, 147, 190, 8, 204, 222, 191, 120, 66, 157, 189, 86, 40, 221, 60, 248, 89, 235, 189, 206, 162, 94, 62, 41, 193, 229, 189, 132, 255, 53, 61, 200, 140, 139, 188, 227, 227, 191, 61, 91, 49, 218, 61, 131, 227, 7, 62, 59, 142, 165, 62, 82, 241, 27, 191, 82, 159, 184, 61, 78, 122, 146, 62, 12, 254, 170, 190, 99, 10, 222, 61, 147, 136, 64, 61, 149, 237, 75, 61, 38, 225, 130, 190, 27, 54, 136, 61, 161, 188, 132, 61, 201, 244, 160, 189, 59, 159, 219, 61, 82, 60, 130, 190, 213, 254, 97, 188, 211, 106, 180, 189, 177, 19, 197, 60, 179, 149, 54, 189, 217, 233, 189, 189, 234, 214, 139, 189, 145, 110, 51, 61, 249, 86, 204, 61, 203, 123, 45, 61, 59, 64, 160, 189, 5, 83, 104, 61, 147, 250, 206, 189, 151, 161, 44, 190, 98, 161, 161, 60, 224, 44, 54, 59, 132, 7, 200, 189, 105, 42, 173, 61, 149, 207, 4, 189, 208, 15, 83, 61, 14, 182, 154, 61, 156, 42, 182, 60, 132, 11, 72, 189, 181, 255, 20, 189, 246, 229, 34, 189, 49, 13, 71, 190, 91, 212, 228, 189, 20, 32, 194, 62, 22, 116, 187, 190, 244, 251, 186, 189, 87, 40, 12, 62, 153, 7, 49, 190, 40, 71, 141, 189, 250, 34, 1, 62, 110, 33, 94, 61, 50, 39, 2, 190, 50, 235, 218, 61, 80, 77, 23, 189, 173, 143, 153, 62, 43, 165, 182, 61, 181, 66, 11, 61, 0, 146, 91, 190, 39, 181, 174, 61, 114, 91, 27, 189, 2, 50, 138, 62, 208, 191, 106, 61, 230, 57, 178, 61, 119, 82, 208, 60, 10, 82, 143, 61, 176, 152, 93, 61, 129, 81, 35, 62, 18, 149, 108, 62, 187, 51, 130, 61, 249, 239, 116, 190, 237, 129, 243, 61, 96, 123, 59, 62, 238, 136, 58, 189, 89, 198, 15, 189, 71, 120, 241, 61, 244, 109, 89, 190, 142, 211, 112, 61, 200, 54, 182, 61, 134, 69, 147, 189, 199, 219, 143, 61, 103, 5, 169, 62, 253, 144, 118, 62, 205, 108, 193, 62, 88, 189, 112, 61, 82, 33, 201, 188, 105, 16, 95, 190, 151, 104, 38, 62, 146, 33, 50, 62, 202, 107, 159, 60, 246, 99, 143, 62, 108, 189, 32, 190, 195, 71, 136, 190, 10, 74, 9, 189, 17, 110, 157, 62, 205, 54, 32, 190, 183, 253, 175, 188, 236, 122, 120, 59, 235, 192, 133, 62, 144, 78, 171, 189, 105, 99, 158, 190, 140, 11, 224, 188, 127, 55, 112, 62, 71, 184, 119, 189, 70, 42, 4, 62, 138, 37, 153, 189, 30, 115, 195, 60, 138, 244, 2, 189, 122, 107, 64, 189, 84, 223, 76, 61, 154, 21, 138, 190, 46, 180, 153, 190, 45, 199, 33, 61, 84, 79, 4, 191, 147, 52, 187, 190, 180, 118, 152, 190, 75, 21, 117, 190, 40, 117, 101, 61, 24, 22, 36, 190, 201, 172, 155, 191, 166, 88, 57, 190, 216, 151, 211, 190, 33, 69, 203, 58, 110, 244, 237, 190, 48, 34, 231, 61, 39, 159, 99, 62, 45, 27, 215, 189, 208, 26, 159, 62, 35, 173, 201, 190, 31, 127, 26, 191, 43, 135, 92, 62, 170, 29, 144, 62, 92, 24, 138, 189, 248, 158, 192, 190, 77, 68, 145, 190, 84, 99, 175, 62, 251, 136, 89, 189, 132, 60, 175, 62, 149, 135, 231, 61, 222, 73, 237, 189, 20, 218, 73, 191, 85, 203, 9, 191, 193, 183, 31, 190, 206, 198, 3, 185, 150, 106, 254, 189, 223, 136, 213, 189, 212, 189, 47, 60, 124, 212, 207, 61, 120, 218, 225, 191, 141, 236, 81, 62, 142, 116, 96, 190, 101, 226, 167, 62, 53, 247, 117, 190, 134, 197, 44, 192, 210, 164, 164, 190, 124, 158, 240, 187, 199, 181, 101, 60, 159, 200, 32, 190, 35, 59, 140, 188, 212, 109, 98, 62, 48, 55, 29, 190, 206, 238, 149, 190, 81, 7, 158, 61, 241, 66, 175, 62, 61, 67, 148, 62, 215, 104, 138, 191, 135, 150, 74, 189, 56, 2, 206, 62, 65, 213, 73, 190, 163, 232, 179, 188, 141, 232, 98, 62, 17, 78, 255, 61, 142, 193, 154, 62, 203, 142, 164, 190, 6, 66, 55, 190, 33, 243, 52, 62, 80, 160, 37, 190, 15, 230, 3, 190, 155, 186, 197, 61, 176, 167, 146, 59, 103, 199, 42, 190, 53, 236, 45, 62, 105, 207, 135, 190, 17, 81, 230, 61, 100, 251, 128, 189, 18, 207, 176, 189, 212, 120, 78, 190, 247, 71, 24, 62, 157, 132, 203, 60, 87, 84, 102, 62, 186, 243, 116, 190, 200, 60, 135, 61, 226, 59, 155, 60, 244, 168, 246, 187, 92, 55, 138, 185, 192, 244, 61, 190, 183, 135, 129, 62, 68, 106, 189, 61, 0, 88, 129, 186, 74, 241, 178, 60, 22, 75, 32, 61, 143, 114, 13, 190, 222, 24, 173, 61, 48, 187, 196, 189, 92, 171, 217, 61, 162, 180, 49, 191, 163, 200, 175, 189, 34, 204, 147, 61, 213, 9, 42, 190, 208, 202, 6, 190, 91, 86, 182, 61, 34, 48, 86, 190, 111, 193, 92, 189, 227, 115, 23, 190, 210, 110, 181, 190, 61, 164, 76, 60, 226, 109, 144, 190, 72, 217, 161, 190, 89, 97, 174, 189, 183, 88, 85, 61, 42, 162, 151, 189, 36, 219, 145, 61, 64, 50, 60, 190, 148, 172, 150, 62, 147, 165, 13, 63, 70, 110, 196, 62, 193, 151, 129, 189, 190, 162, 32, 190, 29, 3, 56, 63, 252, 69, 217, 60, 130, 144, 158, 189, 251, 229, 203, 190, 96, 98, 187, 189, 250, 229, 28, 62, 2, 251, 152, 190, 173, 54, 149, 189, 41, 57, 63, 61, 29, 182, 230, 190, 159, 233, 194, 187, 238, 225, 42, 191, 106, 227, 24, 62, 67, 57, 124, 62, 185, 32, 98, 188, 44, 63, 38, 60, 183, 201, 112, 190, 37, 203, 160, 62, 52, 95, 171, 190, 76, 3, 58, 62, 66, 158, 199, 61, 77, 88, 214, 188, 196, 56, 191, 190, 182, 105, 54, 189, 186, 125, 157, 62, 28, 162, 171, 62, 138, 51, 7, 62, 49, 127, 55, 190, 156, 111, 39, 61, 16, 238, 2, 62, 72, 174, 23, 62, 19, 162, 222, 190, 215, 56, 145, 62, 36, 165, 7, 62, 20, 21, 233, 189, 214, 15, 185, 61, 116, 217, 135, 190, 178, 158, 194, 190, 44, 229, 199, 189, 136, 32, 162, 189, 229, 222, 151, 190, 222, 114, 70, 62, 223, 177, 165, 62, 166, 152, 168, 190, 95, 166, 47, 190, 195, 172, 143, 62, 165, 135, 72, 62, 58, 109, 210, 62, 26, 214, 0, 189, 162, 174, 225, 189, 13, 2, 185, 189, 220, 202, 199, 61, 201, 117, 216, 61, 148, 93, 93, 189, 29, 196, 149, 62, 153, 237, 109, 190, 209, 187, 1, 62, 141, 147, 210, 58, 203, 21, 28, 62, 11, 175, 184, 190, 197, 126, 239, 190, 206, 115, 178, 190, 90, 129, 121, 190, 11, 199, 127, 59, 146, 236, 94, 191, 98, 183, 32, 62, 17, 255, 154, 62, 152, 83, 248, 189, 85, 99, 56, 62, 51, 75, 30, 190, 100, 191, 93, 62, 47, 136, 225, 189, 140, 150, 48, 190, 21, 251, 72, 62, 179, 9, 130, 61, 111, 99, 240, 189, 124, 201, 45, 62, 80, 253, 160, 61, 147, 116, 85, 61, 173, 82, 34, 61, 163, 106, 13, 62, 177, 72, 27, 188, 172, 151, 185, 60, 54, 72, 179, 190, 224, 241, 132, 62, 5, 177, 174, 62, 63, 235, 172, 62, 65, 54, 55, 188, 158, 188, 245, 61, 11, 203, 45, 190, 1, 186, 118, 190, 197, 21, 60, 190, 12, 158, 71, 190, 26, 99, 80, 189, 147, 233, 149, 188, 15, 124, 90, 190, 202, 237, 14, 191, 119, 51, 35, 62, 155, 220, 157, 62, 33, 87, 208, 62, 96, 159, 254, 190, 201, 44, 86, 189, 96, 126, 2, 190, 201, 204, 232, 189, 70, 27, 184, 62, 124, 27, 197, 190, 168, 118, 93, 190, 198, 180, 212, 61, 34, 252, 27, 189, 191, 232, 216, 189, 164, 45, 75, 189, 100, 137, 119, 189, 180, 1, 141, 189, 76, 225, 17, 190, 6, 152, 22, 190, 249, 124, 250, 61, 135, 214, 16, 188, 59, 12, 36, 190, 197, 176, 41, 190, 186, 109, 120, 62, 112, 213, 179, 188, 232, 235, 67, 62, 126, 191, 16, 190, 17, 78, 193, 62, 14, 100, 179, 62, 22, 102, 144, 62, 133, 216, 157, 60, 251, 82, 5, 190, 76, 116, 238, 62, 134, 170, 39, 190, 99, 222, 178, 190, 228, 129, 167, 188, 34, 78, 183, 61, 227, 242, 187, 188, 149, 102, 17, 189, 121, 98, 98, 188, 135, 204, 38, 190, 119, 2, 84, 191, 171, 168, 232, 190, 35, 255, 171, 190, 236, 32, 198, 188, 9, 188, 108, 62, 185, 188, 186, 190, 101, 196, 244, 187, 140, 177, 44, 62, 202, 207, 61, 62, 88, 34, 76, 191, 99, 147, 132, 62, 67, 183, 98, 190, 63, 178, 41, 190, 155, 49, 211, 190, 112, 146, 171, 189, 11, 185, 173, 62, 9, 193, 85, 62, 11, 161, 214, 188, 252, 187, 135, 61, 118, 26, 70, 190, 164, 26, 244, 189, 183, 42, 17, 63, 196, 144, 151, 191, 195, 76, 182, 62, 88, 43, 38, 190, 27, 89, 68, 61, 21, 101, 83, 186, 39, 225, 27, 191, 213, 238, 12, 190, 89, 140, 197, 190, 71, 193, 96, 59, 234, 84, 77, 62, 120, 100, 132, 191, 121, 83, 179, 59, 210, 143, 212, 62, 121, 3, 252, 189, 142, 200, 29, 63, 205, 116, 64, 61, 146, 48, 161, 190, 202, 19, 166, 189, 55, 70, 142, 189, 149, 114, 157, 190, 67, 177, 219, 61, 44, 118, 102, 191, 128, 106, 247, 189, 195, 198, 204, 190, 197, 32, 91, 62, 5, 132, 50, 62, 52, 78, 202, 61, 90, 126, 122, 61, 158, 60, 199, 60, 108, 202, 96, 62, 184, 229, 35, 61, 181, 48, 176, 61, 114, 76, 151, 190, 52, 64, 194, 62, 208, 80, 25, 188, 149, 143, 22, 190, 5, 192, 117, 190, 244, 150, 172, 190, 50, 2, 214, 189, 241, 135, 9, 191, 156, 206, 0, 62, 7, 187, 27, 191, 224, 173, 58, 191, 109, 210, 133, 190, 70, 249, 38, 62, 0, 22, 4, 62, 152, 211, 55, 190, 22, 131, 183, 189, 215, 148, 26, 190, 169, 230, 26, 191, 229, 86, 21, 62, 235, 229, 13, 190, 47, 24, 86, 62, 101, 157, 160, 190, 207, 59, 243, 191, 116, 233, 29, 191, 129, 136, 111, 60, 249, 96, 158, 190, 88, 43, 112, 62, 240, 196, 140, 60, 69, 66, 94, 62, 200, 118, 128, 59, 215, 51, 235, 61, 170, 81, 156, 62, 214, 120, 121, 62, 119, 94, 246, 61, 22, 184, 141, 191, 117, 153, 232, 189, 197, 213, 137, 62, 179, 143, 125, 189, 1, 0, 23, 62, 174, 36, 26, 62, 23, 253, 221, 61, 14, 132, 231, 189, 27, 162, 246, 61, 238, 172, 137, 60, 229, 165, 218, 189, 222, 213, 93, 60, 179, 182, 25, 190, 80, 232, 132, 61, 129, 20, 232, 61, 189, 52, 19, 190, 197, 161, 66, 189, 114, 231, 85, 189, 157, 227, 52, 190, 13, 9, 14, 190, 112, 235, 32, 62, 122, 59, 27, 61, 161, 223, 23, 190, 110, 235, 91, 190, 171, 133, 149, 61, 4, 41, 180, 61, 37, 211, 137, 189, 159, 241, 143, 61, 223, 143, 166, 61, 159, 20, 23, 190, 247, 34, 7, 190, 187, 48, 27, 188, 110, 179, 90, 188, 6, 38, 3, 190, 77, 140, 220, 61, 146, 22, 53, 190, 205, 100, 140, 60, 98, 212, 147, 190, 199, 85, 117, 61, 56, 21, 147, 62, 162, 33, 4, 191, 52, 170, 68, 60, 196, 94, 61, 61, 40, 116, 5, 190, 129, 0, 7, 190, 105, 227, 92, 190, 147, 107, 199, 189, 46, 71, 169, 186, 7, 26, 93, 62, 162, 55, 151, 190, 132, 58, 144, 62, 79, 29, 156, 189, 140, 237, 145, 190, 138, 129, 144, 187, 189, 48, 166, 61, 10, 146, 196, 189, 207, 40, 169, 61, 124, 83, 47, 190, 52, 219, 38, 62, 132, 39, 123, 62, 176, 14, 39, 62, 42, 148, 210, 61, 188, 107, 179, 188, 195, 204, 15, 63, 202, 201, 212, 61, 158, 206, 149, 187, 78, 175, 204, 189, 244, 246, 71, 62, 226, 65, 175, 61, 93, 82, 142, 61, 250, 190, 237, 59, 125, 77, 48, 189, 10, 196, 48, 190, 77, 41, 17, 61, 24, 168, 72, 59, 16, 245, 164, 189, 66, 20, 237, 60, 190, 11, 8, 190, 165, 70, 21, 62, 146, 159, 180, 61, 72, 194, 31, 190, 129, 129, 183, 189, 191, 214, 25, 190, 181, 245, 148, 61, 125, 54, 205, 188, 99, 71, 232, 61, 245, 221, 25, 188, 2, 117, 244, 189, 160, 167, 10, 190, 73, 161, 35, 186, 116, 50, 180, 187, 171, 132, 34, 62, 156, 132, 189, 189, 248, 252, 228, 189, 201, 246, 138, 189, 160, 249, 35, 190, 93, 3, 10, 189, 107, 140, 4, 190, 229, 48, 91, 61, 57, 85, 254, 61, 250, 216, 0, 62, 241, 189, 67, 190, 177, 67, 184, 189, 53, 54, 168, 60, 41, 160, 178, 62, 77, 136, 134, 62, 46, 242, 121, 188, 26, 17, 9, 62, 167, 145, 10, 63, 200, 200, 160, 62, 36, 25, 199, 61, 131, 33, 3, 188, 53, 78, 157, 190, 255, 2, 149, 190, 242, 62, 89, 189, 24, 29, 41, 62, 47, 71, 79, 190, 155, 168, 146, 62, 69, 94, 130, 190, 47, 50, 18, 191, 131, 228, 209, 190, 201, 122, 28, 62, 171, 237, 24, 191, 53, 47, 231, 190, 155, 54, 172, 190, 216, 33, 159, 190, 89, 207, 116, 62, 186, 62, 163, 191, 146, 229, 227, 61, 42, 182, 116, 190, 25, 147, 59, 62, 242, 223, 168, 62, 50, 15, 180, 190, 80, 77, 33, 61, 149, 165, 154, 188, 8, 43, 250, 60, 136, 93, 1, 191, 187, 238, 0, 190, 213, 87, 154, 190, 65, 50, 16, 190, 51, 74, 12, 61, 17, 133, 107, 60, 206, 149, 160, 190, 54, 119, 39, 190, 46, 95, 186, 189, 237, 230, 245, 188, 233, 105, 52, 62, 255, 183, 160, 190, 127, 33, 111, 189, 54, 157, 214, 190, 71, 48, 217, 189, 12, 16, 15, 190, 166, 207, 87, 61, 187, 60, 23, 62, 200, 3, 112, 62, 122, 28, 88, 190, 124, 170, 40, 62, 203, 111, 53, 62, 126, 111, 196, 61, 64, 185, 134, 61, 241, 215, 171, 61, 74, 124, 246, 189, 219, 207, 97, 62, 228, 16, 27, 188, 142, 10, 4, 62, 105, 153, 130, 61, 16, 115, 30, 62, 47, 188, 52, 62, 86, 19, 2, 191, 31, 71, 149, 190, 125, 58, 105, 190, 115, 210, 152, 189, 99, 32, 232, 61, 236, 79, 191, 59, 70, 24, 2, 190, 26, 98, 70, 190, 197, 231, 152, 62, 132, 138, 235, 190, 213, 255, 129, 62, 6, 68, 47, 190, 122, 225, 227, 190, 118, 97, 57, 191, 162, 98, 69, 62, 216, 148, 83, 60, 41, 99, 53, 62, 114, 215, 146, 62, 154, 114, 213, 189, 97, 4, 133, 189, 103, 57, 67, 62, 128, 153, 118, 62, 150, 154, 114, 190, 84, 218, 4, 62, 170, 21, 138, 189, 72, 235, 57, 190, 247, 51, 53, 62, 157, 167, 47, 189, 33, 239, 221, 60, 69, 150, 8, 62, 111, 0, 84, 61, 204, 130, 221, 62, 20, 101, 21, 191, 239, 178, 45, 190, 15, 81, 20, 62, 182, 76, 114, 61, 56, 40, 123, 61, 118, 25, 210, 61, 223, 14, 138, 190, 144, 233, 7, 61, 214, 47, 228, 61, 166, 200, 191, 190, 153, 141, 127, 62, 82, 53, 170, 189, 21, 55, 26, 190, 159, 204, 192, 190, 144, 93, 16, 61, 192, 40, 24, 60, 82, 239, 3, 62, 252, 139, 249, 60, 80, 28, 133, 62, 193, 2, 212, 62, 157, 181, 150, 61, 75, 15, 163, 61, 166, 18, 135, 190, 217, 14, 36, 63, 226, 26, 85, 186, 216, 175, 133, 190, 27, 126, 128, 190, 111, 176, 213, 58, 21, 57, 29, 62, 36, 87, 76, 189, 60, 96, 214, 60, 131, 15, 6, 191, 237, 242, 167, 60, 94, 38, 13, 61, 8, 92, 106, 191, 104, 17, 165, 189, 57, 227, 16, 191, 176, 139, 12, 190, 154, 66, 150, 190, 210, 25, 171, 62, 227, 246, 93, 62, 88, 229, 39, 62, 197, 37, 15, 191, 40, 173, 234, 189, 105, 28, 175, 62, 56, 97, 110, 61, 87, 30, 165, 190, 87, 154, 37, 63, 18, 78, 158, 190, 151, 3, 203, 191, 132, 93, 220, 190, 55, 65, 79, 61, 13, 137, 140, 190, 48, 158, 99, 61, 80, 54, 89, 61, 179, 44, 183, 190, 163, 164, 187, 189, 74, 4, 0, 191, 49, 138, 93, 62, 161, 220, 93, 191, 31, 194, 68, 191, 159, 237, 12, 62, 61, 202, 111, 187, 188, 158, 181, 189, 255, 231, 170, 62, 183, 143, 197, 189, 202, 189, 89, 61, 55, 228, 245, 188, 173, 176, 50, 62, 123, 198, 63, 190, 58, 38, 40, 61, 249, 177, 203, 62, 167, 180, 150, 62, 247, 41, 146, 61, 35, 11, 143, 61, 31, 216, 140, 189, 67, 178, 60, 62, 253, 132, 38, 188, 242, 240, 125, 61, 171, 97, 37, 61, 161, 235, 69, 62, 60, 0, 13, 190, 124, 161, 215, 61, 168, 55, 170, 62, 176, 149, 139, 188, 112, 229, 232, 61, 110, 109, 242, 189, 191, 49, 130, 62, 137, 152, 74, 60, 241, 255, 32, 62, 0, 190, 6, 62, 49, 215, 88, 191, 146, 104, 55, 62, 24, 194, 93, 190, 112, 216, 28, 61, 103, 114, 237, 62, 138, 55, 28, 63, 12, 116, 173, 62, 157, 40, 211, 62, 177, 33, 13, 190, 123, 77, 200, 189, 111, 151, 133, 62, 169, 239, 230, 62, 254, 124, 252, 190, 236, 142, 117, 190, 212, 14, 33, 63, 67, 153, 160, 191, 150, 177, 215, 62, 24, 221, 216, 190, 181, 247, 141, 190, 139, 173, 246, 188, 39, 106, 177, 62, 7, 164, 232, 190, 66, 193, 238, 61, 205, 0, 180, 190, 155, 47, 144, 191, 172, 98, 134, 191, 91, 234, 136, 191, 144, 249, 220, 61, 240, 82, 69, 191, 69, 161, 205, 62, 54, 164, 54, 62, 217, 9, 32, 61, 214, 47, 127, 62, 147, 170, 2, 189, 151, 223, 74, 62, 172, 140, 38, 62, 7, 182, 192, 190, 213, 253, 181, 189, 6, 249, 131, 62, 165, 207, 145, 190, 247, 17, 91, 61, 51, 174, 216, 62, 97, 32, 138, 62, 51, 191, 111, 62, 32, 176, 145, 61, 92, 233, 49, 62, 249, 35, 186, 61, 42, 227, 113, 61, 103, 6, 124, 62, 174, 87, 106, 61, 100, 202, 117, 62, 32, 146, 100, 189, 165, 99, 33, 62, 117, 148, 221, 188, 82, 244, 166, 62, 8, 142, 61, 190, 147, 78, 142, 190, 30, 84, 62, 190, 177, 192, 32, 62, 121, 130, 120, 189, 6, 1, 136, 191, 6, 233, 40, 189, 96, 214, 241, 61, 172, 197, 242, 61, 189, 104, 14, 190, 101, 17, 188, 190, 40, 60, 91, 62, 89, 136, 127, 61, 78, 159, 144, 62, 95, 61, 16, 191, 161, 181, 145, 61, 227, 38, 191, 61, 79, 106, 225, 61, 236, 37, 100, 190, 103, 25, 22, 189, 129, 187, 84, 188, 144, 68, 184, 190, 114, 223, 13, 189, 49, 54, 97, 190, 43, 132, 229, 187, 22, 138, 146, 190, 0, 49, 145, 190, 6, 54, 25, 190, 79, 225, 186, 61, 26, 96, 42, 62, 19, 213, 121, 60, 59, 147, 38, 190, 71, 42, 54, 62, 158, 144, 222, 62, 222, 50, 145, 62, 125, 30, 18, 190, 72, 13, 46, 188, 125, 80, 75, 63, 40, 33, 123, 190, 9, 146, 224, 60, 103, 24, 8, 190, 103, 202, 95, 189, 92, 57, 41, 62, 205, 95, 193, 61, 86, 152, 236, 61, 155, 102, 106, 190, 77, 64, 220, 189, 183, 65, 83, 62, 230, 27, 4, 190, 36, 161, 20, 190, 1, 119, 175, 62, 122, 113, 159, 62, 246, 12, 45, 62, 32, 27, 255, 61, 218, 253, 24, 190, 46, 232, 123, 189, 91, 79, 249, 189, 73, 229, 79, 62, 246, 128, 235, 189, 127, 78, 43, 62, 81, 71, 162, 190, 153, 69, 138, 189, 148, 117, 59, 62, 180, 178, 219, 59, 116, 214, 33, 61, 251, 197, 117, 190, 131, 56, 9, 190, 202, 96, 171, 189, 179, 114, 41, 59, 193, 71, 98, 191, 183, 102, 98, 61, 35, 5, 88, 62, 43, 181, 94, 62, 232, 3, 253, 61, 142, 144, 54, 61, 83, 164, 195, 187, 84, 19, 49, 62, 0, 190, 53, 62, 29, 207, 118, 191, 103, 224, 129, 60, 130, 110, 157, 188, 65, 46, 21, 190, 56, 58, 143, 62, 197, 7, 141, 190, 81, 166, 145, 190, 126, 59, 6, 62, 69, 149, 12, 62, 119, 154, 136, 190, 70, 145, 32, 62, 26, 86, 137, 191, 186, 139, 26, 190, 40, 144, 22, 190, 212, 13, 191, 61, 41, 73, 30, 190, 232, 149, 145, 60, 4, 15, 130, 189, 29, 131, 190, 61, 21, 235, 44, 62, 133, 219, 113, 62, 29, 138, 35, 190, 141, 245, 83, 191, 117, 75, 6, 63, 185, 81, 184, 189, 167, 245, 6, 62, 238, 81, 130, 189, 14, 239, 34, 191, 68, 207, 211, 188, 162, 227, 7, 191, 171, 5, 250, 60, 167, 74, 98, 190, 107, 195, 60, 61, 62, 21, 207, 61, 80, 72, 135, 189, 9, 223, 239, 189, 106, 194, 107, 62, 138, 6, 96, 62, 70, 114, 74, 62, 243, 86, 247, 60, 127, 167, 84, 190, 15, 181, 255, 188, 219, 38, 20, 62, 11, 224, 231, 61, 101, 197, 107, 190, 216, 201, 35, 62, 218, 9, 96, 190, 206, 52, 171, 190, 10, 247, 55, 190, 224, 178, 86, 62, 62, 46, 222, 190, 217, 125, 19, 191, 54, 243, 254, 189, 244, 173, 158, 189, 67, 183, 38, 187, 235, 140, 53, 191, 249, 119, 140, 62, 201, 74, 153, 62, 93, 5, 56, 62, 203, 189, 161, 188, 210, 220, 57, 191, 235, 26, 170, 59, 171, 205, 17, 61, 211, 82, 61, 190, 102, 220, 26, 62, 206, 64, 102, 62, 164, 114, 103, 190, 118, 60, 124, 61, 199, 126, 210, 62, 80, 28, 151, 61, 53, 119, 205, 62, 170, 193, 146, 60, 160, 5, 165, 61, 87, 182, 65, 59, 22, 57, 44, 190, 74, 45, 92, 62, 220, 14, 145, 61, 56, 242, 88, 62, 228, 234, 123, 190, 44, 187, 59, 190, 137, 193, 98, 189, 1, 209, 87, 62, 254, 101, 19, 190, 243, 248, 130, 189, 118, 146, 137, 190, 133, 84, 60, 190, 134, 26, 136, 57, 45, 201, 93, 191, 190, 31, 24, 62, 216, 149, 136, 62, 133, 205, 49, 188, 163, 83, 145, 61, 87, 248, 103, 190, 186, 181, 22, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 107, 18, 189, 162, 105, 153, 60, 174, 13, 189, 189, 123, 107, 72, 62, 52, 14, 17, 62, 89, 183, 55, 61, 112, 79, 118, 61, 204, 50, 248, 61, 3, 47, 172, 189, 96, 90, 229, 61, 63, 177, 199, 189, 41, 39, 151, 61, 85, 212, 94, 62, 30, 10, 238, 188, 73, 41, 89, 190, 192, 15, 6, 62, 202, 237, 167, 188, 189, 112, 24, 62, 78, 16, 241, 188, 83, 249, 166, 59, 54, 222, 55, 62, 161, 88, 149, 62, 170, 188, 163, 61, 176, 12, 216, 61, 139, 221, 233, 61, 210, 119, 207, 190, 86, 138, 147, 61, 175, 127, 153, 189, 206, 115, 164, 62, 249, 41, 84, 60, 91, 208, 87, 62, 91, 3, 247, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 8, 8, 190, 222, 255, 124, 63, 78, 46, 240, 187, 123, 27, 72, 61, 107, 17, 182, 189, 215, 157, 124, 191, 45, 192, 191, 63, 110, 187, 218, 60, 0, 230, 98, 63, 211, 2, 97, 62, 35, 119, 202, 190, 23, 83, 26, 191, 103, 27, 218, 62, 242, 95, 153, 63, 146, 197, 98, 191, 154, 109, 143, 63, 240, 144, 194, 189, 227, 206, 42, 62, 141, 118, 131, 189, 117, 202, 111, 191, 72, 158, 9, 61, 212, 233, 218, 62, 188, 174, 227, 62, 225, 219, 117, 191, 251, 225, 172, 190, 166, 255, 189, 63, 187, 115, 212, 190, 63, 36, 24, 63, 238, 229, 68, 190, 207, 7, 224, 190, 109, 5, 23, 191, 105, 85, 196, 190, 221, 174, 145, 61, 162, 102, 171, 61, 237, 157, 192, 189, 27, 44, 123, 190, 78, 92, 144, 190, 110, 232, 143, 189, 13, 60, 57, 62, 127, 23, 1, 190, 135, 159, 149, 62, 20, 105, 244, 189, 204, 65, 173, 189, 103, 106, 130, 62, 234, 248, 205, 189, 23, 52, 1, 63, 125, 180, 90, 63, 229, 111, 78, 188, 170, 158, 132, 60, 23, 156, 155, 190, 213, 98, 120, 189, 46, 5, 79, 61, 200, 136, 38, 189, 183, 188, 156, 189, 23, 176, 38, 190, 115, 167, 80, 62, 173, 115, 185, 187, 79, 141, 156, 62, 55, 23, 230, 59, 11, 77, 6, 62, 80, 93, 90, 190, 147, 237, 55, 62, 39, 213, 162, 188, 133, 111, 180, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 191, 191, 189, 52, 62, 168, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {43, 208, 133, 191, 80, 67, 238, 63, 105, 44, 244, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {50, 106, 42, 64, 164, 224, 107, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0035/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}