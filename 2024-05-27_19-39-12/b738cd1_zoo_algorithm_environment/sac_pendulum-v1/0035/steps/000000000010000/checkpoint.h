// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 37, 139, 62, 132, 77, 176, 190, 25, 195, 87, 60, 181, 192, 156, 62, 135, 70, 237, 62, 12, 118, 173, 190, 23, 64, 41, 63, 8, 153, 100, 63, 17, 97, 69, 62, 244, 146, 158, 190, 128, 20, 252, 62, 160, 115, 47, 191, 24, 9, 188, 190, 127, 190, 48, 63, 248, 28, 44, 190, 142, 82, 132, 62, 138, 126, 175, 190, 140, 45, 162, 187, 200, 139, 114, 63, 167, 207, 48, 62, 101, 61, 37, 61, 221, 113, 32, 189, 209, 102, 33, 63, 184, 167, 139, 190, 8, 103, 46, 63, 178, 185, 217, 61, 216, 69, 226, 62, 190, 84, 23, 190, 60, 229, 165, 191, 108, 223, 230, 190, 47, 225, 250, 189, 205, 138, 142, 191, 238, 90, 15, 190, 235, 250, 9, 63, 243, 82, 129, 63, 121, 229, 216, 62, 140, 239, 29, 63, 56, 225, 72, 191, 177, 206, 155, 190, 82, 161, 129, 63, 111, 162, 156, 63, 59, 153, 209, 62, 37, 242, 242, 190, 221, 151, 242, 191, 202, 189, 254, 190, 233, 126, 157, 190, 162, 54, 31, 61, 215, 89, 205, 190, 27, 174, 107, 62, 230, 225, 29, 190, 50, 255, 221, 190, 112, 206, 216, 190, 108, 116, 39, 191, 173, 181, 211, 62, 96, 243, 203, 62, 93, 172, 18, 191, 117, 23, 187, 62, 106, 238, 22, 63, 238, 71, 44, 63, 116, 125, 67, 62, 60, 11, 6, 190, 62, 73, 12, 62, 162, 108, 44, 63, 74, 214, 10, 63, 112, 218, 79, 191, 6, 110, 252, 190, 214, 143, 48, 63, 134, 224, 125, 191, 102, 163, 22, 191, 77, 45, 141, 60, 182, 30, 2, 191, 2, 254, 122, 60, 254, 37, 209, 190, 139, 63, 137, 63, 134, 247, 61, 62, 222, 211, 29, 63, 123, 191, 49, 191, 76, 157, 106, 190, 208, 130, 78, 62, 209, 128, 241, 62, 209, 4, 25, 191, 134, 98, 66, 63, 14, 46, 45, 190, 23, 153, 253, 62, 215, 110, 57, 191, 134, 169, 171, 189, 212, 205, 16, 189, 223, 160, 99, 62, 48, 86, 176, 63, 102, 34, 109, 61, 32, 255, 36, 190, 57, 47, 227, 62, 126, 57, 69, 63, 34, 170, 128, 190, 10, 222, 11, 63, 33, 238, 248, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 183, 19, 191, 182, 20, 161, 189, 122, 236, 33, 190, 225, 168, 121, 62, 209, 31, 84, 190, 52, 21, 11, 191, 217, 99, 68, 62, 101, 11, 243, 62, 190, 2, 129, 190, 109, 20, 182, 61, 46, 118, 28, 63, 254, 207, 51, 190, 135, 83, 26, 63, 164, 47, 188, 61, 207, 237, 61, 190, 10, 48, 84, 190, 170, 224, 55, 61, 74, 87, 5, 190, 169, 37, 28, 63, 159, 93, 16, 63, 71, 90, 62, 62, 73, 175, 205, 190, 41, 113, 147, 62, 154, 219, 140, 62, 181, 114, 36, 63, 52, 57, 155, 190, 17, 92, 224, 60, 108, 65, 199, 190, 194, 153, 48, 63, 2, 178, 201, 62, 20, 198, 169, 61, 172, 155, 245, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 158, 198, 188, 183, 252, 245, 61, 51, 24, 44, 188, 1, 194, 156, 189, 101, 16, 175, 188, 200, 243, 12, 62, 25, 6, 29, 62, 18, 50, 222, 61, 62, 190, 116, 189, 103, 53, 44, 190, 8, 133, 95, 189, 182, 233, 181, 189, 142, 141, 131, 189, 91, 166, 42, 190, 67, 219, 196, 189, 100, 145, 140, 189, 77, 192, 53, 61, 42, 40, 2, 190, 163, 31, 118, 189, 60, 168, 45, 190, 104, 85, 235, 60, 154, 116, 30, 61, 25, 237, 247, 59, 108, 56, 187, 187, 88, 138, 13, 190, 37, 78, 130, 188, 195, 16, 164, 60, 99, 243, 4, 61, 131, 152, 125, 189, 159, 154, 157, 189, 154, 252, 26, 62, 47, 5, 193, 61, 251, 121, 47, 190, 210, 81, 228, 190, 67, 239, 37, 191, 235, 152, 95, 60, 14, 64, 111, 62, 103, 50, 12, 190, 199, 85, 232, 190, 62, 238, 138, 61, 9, 240, 1, 60, 46, 45, 95, 191, 83, 95, 204, 189, 74, 155, 240, 188, 251, 28, 11, 63, 84, 39, 140, 190, 224, 125, 217, 191, 44, 35, 179, 189, 81, 235, 76, 61, 162, 3, 246, 189, 75, 160, 85, 62, 6, 184, 172, 189, 37, 212, 65, 61, 230, 140, 220, 188, 108, 197, 143, 61, 47, 144, 165, 61, 69, 142, 67, 62, 58, 211, 150, 62, 97, 238, 214, 190, 212, 19, 183, 61, 209, 251, 136, 62, 61, 89, 63, 190, 185, 67, 245, 61, 19, 138, 205, 61, 149, 237, 75, 61, 146, 162, 130, 190, 27, 54, 136, 61, 223, 106, 138, 61, 201, 244, 160, 189, 59, 159, 219, 61, 82, 60, 130, 190, 153, 6, 73, 188, 211, 106, 180, 189, 126, 97, 228, 60, 70, 6, 38, 189, 217, 233, 189, 189, 194, 196, 132, 189, 145, 110, 51, 61, 216, 175, 212, 61, 120, 138, 55, 61, 238, 158, 155, 189, 5, 83, 104, 61, 147, 250, 206, 189, 151, 161, 44, 190, 98, 161, 161, 60, 2, 240, 164, 59, 240, 4, 193, 189, 48, 201, 176, 61, 149, 207, 4, 189, 82, 152, 87, 61, 182, 129, 158, 61, 156, 42, 182, 60, 187, 165, 59, 189, 181, 255, 20, 189, 246, 229, 34, 189, 50, 2, 71, 190, 91, 212, 228, 189, 83, 137, 177, 62, 53, 14, 156, 190, 162, 226, 238, 189, 223, 160, 233, 61, 153, 7, 49, 190, 156, 224, 40, 189, 12, 19, 204, 61, 132, 221, 174, 61, 40, 38, 20, 190, 225, 189, 223, 61, 24, 195, 160, 59, 35, 140, 158, 62, 63, 58, 249, 61, 112, 75, 53, 61, 168, 68, 98, 190, 143, 132, 149, 61, 104, 57, 91, 188, 252, 141, 150, 62, 192, 14, 140, 61, 192, 81, 12, 62, 230, 219, 205, 188, 53, 189, 138, 61, 57, 252, 66, 61, 70, 155, 28, 62, 101, 141, 70, 62, 74, 31, 23, 61, 138, 253, 92, 190, 60, 139, 253, 61, 71, 174, 28, 62, 155, 140, 126, 188, 253, 118, 31, 189, 71, 120, 241, 61, 80, 5, 64, 190, 132, 131, 27, 62, 211, 230, 168, 61, 163, 58, 224, 189, 199, 219, 143, 61, 188, 96, 168, 62, 202, 31, 135, 62, 4, 8, 191, 62, 91, 84, 99, 61, 105, 237, 87, 189, 187, 39, 218, 189, 94, 239, 27, 62, 151, 190, 99, 62, 103, 37, 13, 61, 69, 243, 145, 62, 217, 217, 15, 190, 32, 31, 50, 190, 81, 77, 48, 189, 181, 178, 152, 62, 58, 106, 240, 189, 42, 196, 136, 188, 69, 220, 57, 60, 103, 253, 75, 62, 63, 185, 165, 189, 68, 205, 135, 190, 77, 152, 170, 59, 97, 170, 89, 62, 21, 241, 152, 189, 185, 235, 4, 62, 60, 52, 196, 188, 71, 49, 10, 61, 138, 244, 2, 189, 164, 168, 145, 189, 170, 195, 174, 190, 208, 183, 128, 190, 104, 181, 160, 190, 45, 199, 33, 61, 134, 207, 223, 190, 80, 180, 170, 190, 174, 73, 255, 190, 217, 224, 218, 189, 207, 64, 5, 62, 246, 253, 184, 190, 133, 73, 129, 191, 140, 53, 186, 190, 1, 248, 137, 190, 10, 81, 119, 60, 152, 58, 212, 190, 8, 222, 53, 61, 55, 234, 32, 62, 16, 234, 130, 190, 4, 135, 74, 62, 35, 173, 201, 190, 73, 85, 14, 191, 121, 51, 131, 62, 246, 231, 103, 62, 92, 24, 138, 189, 17, 8, 165, 190, 180, 16, 249, 190, 150, 173, 215, 62, 222, 185, 26, 190, 86, 71, 85, 62, 91, 118, 172, 61, 222, 73, 237, 189, 201, 68, 37, 191, 138, 123, 251, 190, 196, 15, 183, 189, 224, 40, 154, 61, 150, 106, 254, 189, 17, 67, 53, 189, 2, 249, 42, 61, 110, 236, 5, 62, 1, 175, 207, 191, 68, 84, 87, 62, 63, 127, 107, 190, 156, 202, 133, 62, 120, 34, 113, 190, 62, 212, 36, 192, 75, 57, 126, 190, 160, 51, 51, 190, 15, 203, 74, 60, 174, 185, 14, 190, 198, 121, 48, 60, 197, 81, 99, 62, 56, 38, 29, 190, 203, 5, 64, 190, 213, 53, 198, 61, 198, 179, 159, 62, 126, 1, 196, 62, 181, 18, 117, 191, 94, 155, 162, 188, 249, 181, 180, 62, 65, 84, 89, 190, 151, 231, 197, 188, 255, 86, 57, 62, 17, 78, 255, 61, 15, 131, 147, 62, 184, 236, 138, 190, 30, 185, 58, 190, 85, 165, 61, 62, 80, 160, 37, 190, 226, 211, 211, 189, 242, 117, 205, 61, 143, 251, 134, 57, 51, 240, 37, 190, 129, 140, 60, 62, 51, 185, 116, 190, 160, 20, 235, 61, 3, 91, 42, 189, 191, 249, 106, 189, 248, 96, 72, 190, 235, 243, 24, 62, 221, 198, 21, 61, 36, 106, 119, 62, 230, 90, 100, 190, 1, 22, 196, 61, 221, 19, 248, 187, 165, 239, 0, 59, 186, 129, 20, 60, 128, 130, 51, 190, 153, 205, 105, 62, 185, 104, 164, 61, 191, 228, 192, 187, 170, 211, 141, 61, 196, 7, 34, 61, 150, 184, 23, 190, 5, 234, 187, 61, 48, 187, 196, 189, 166, 86, 160, 61, 49, 190, 22, 191, 162, 54, 190, 189, 136, 10, 225, 61, 213, 9, 42, 190, 45, 98, 165, 189, 249, 229, 171, 61, 55, 181, 27, 190, 198, 83, 177, 189, 75, 137, 10, 190, 148, 92, 156, 190, 229, 164, 226, 188, 236, 97, 77, 190, 128, 30, 160, 190, 13, 216, 166, 189, 104, 218, 226, 60, 80, 134, 139, 189, 110, 34, 189, 61, 72, 182, 225, 189, 204, 53, 155, 62, 189, 4, 251, 62, 17, 253, 175, 62, 123, 149, 71, 189, 93, 66, 164, 189, 133, 229, 21, 63, 49, 133, 190, 58, 78, 125, 242, 188, 215, 156, 163, 190, 55, 249, 202, 189, 68, 4, 35, 62, 65, 159, 138, 190, 173, 54, 149, 189, 142, 96, 55, 60, 232, 71, 241, 190, 125, 189, 19, 188, 15, 252, 191, 190, 106, 227, 24, 62, 193, 125, 128, 62, 155, 244, 21, 189, 222, 140, 181, 60, 217, 125, 138, 190, 227, 85, 146, 62, 14, 123, 176, 190, 18, 160, 44, 62, 49, 135, 168, 61, 192, 36, 215, 189, 231, 50, 193, 190, 196, 120, 147, 189, 108, 87, 136, 62, 204, 57, 177, 62, 182, 223, 5, 62, 19, 56, 19, 190, 73, 15, 108, 187, 116, 6, 238, 61, 149, 74, 14, 62, 210, 183, 247, 190, 99, 224, 135, 62, 66, 125, 145, 61, 6, 33, 178, 189, 120, 27, 83, 61, 157, 58, 134, 190, 55, 25, 200, 190, 22, 231, 238, 189, 136, 32, 162, 189, 111, 14, 152, 190, 114, 85, 52, 62, 158, 75, 159, 62, 131, 6, 173, 190, 95, 166, 47, 190, 191, 169, 143, 62, 83, 224, 82, 62, 96, 173, 218, 62, 72, 17, 65, 61, 239, 63, 93, 189, 234, 79, 40, 189, 64, 146, 236, 61, 12, 245, 197, 61, 222, 62, 39, 189, 106, 205, 154, 62, 60, 207, 93, 190, 59, 82, 57, 62, 72, 161, 240, 60, 69, 179, 13, 62, 226, 112, 194, 190, 0, 36, 204, 190, 232, 148, 156, 190, 35, 72, 95, 190, 255, 212, 147, 189, 163, 249, 51, 191, 18, 69, 43, 62, 174, 9, 160, 62, 167, 107, 15, 190, 203, 16, 9, 62, 205, 146, 13, 190, 33, 170, 42, 62, 47, 136, 225, 189, 102, 96, 62, 190, 169, 152, 26, 62, 119, 100, 177, 60, 65, 245, 86, 190, 124, 201, 45, 62, 30, 244, 76, 61, 35, 34, 93, 60, 243, 58, 5, 61, 214, 76, 1, 62, 208, 253, 120, 188, 152, 151, 192, 60, 243, 45, 165, 190, 58, 91, 130, 62, 120, 240, 165, 62, 108, 130, 150, 62, 12, 54, 254, 188, 172, 129, 7, 62, 98, 83, 31, 190, 47, 103, 118, 190, 95, 75, 44, 190, 141, 244, 47, 190, 48, 146, 76, 189, 207, 77, 178, 58, 103, 191, 70, 190, 170, 102, 220, 190, 68, 247, 13, 62, 205, 81, 154, 62, 81, 34, 181, 62, 51, 227, 250, 190, 8, 39, 25, 189, 72, 59, 19, 190, 201, 204, 232, 189, 57, 186, 172, 62, 206, 9, 198, 190, 170, 97, 83, 190, 90, 249, 22, 62, 34, 252, 27, 189, 18, 110, 203, 189, 62, 183, 94, 189, 218, 184, 95, 189, 218, 236, 158, 189, 0, 245, 5, 190, 139, 248, 74, 190, 219, 164, 213, 61, 167, 139, 145, 188, 44, 25, 40, 190, 28, 35, 40, 190, 21, 213, 107, 62, 144, 65, 119, 189, 4, 185, 67, 62, 134, 30, 12, 190, 151, 215, 194, 62, 138, 134, 154, 62, 225, 194, 136, 62, 118, 176, 9, 61, 90, 103, 8, 190, 214, 18, 207, 62, 238, 248, 66, 190, 3, 87, 165, 190, 204, 117, 24, 60, 80, 38, 159, 61, 167, 145, 80, 189, 102, 242, 51, 189, 121, 98, 98, 188, 244, 137, 84, 61, 240, 81, 55, 191, 10, 153, 172, 190, 35, 255, 171, 190, 236, 32, 198, 188, 115, 249, 130, 62, 166, 95, 89, 190, 253, 150, 30, 188, 189, 86, 209, 61, 2, 207, 236, 61, 70, 90, 63, 191, 56, 194, 90, 62, 99, 32, 66, 190, 157, 189, 86, 190, 96, 151, 100, 190, 109, 232, 149, 189, 68, 159, 160, 62, 166, 91, 52, 62, 246, 48, 27, 60, 117, 188, 77, 61, 65, 95, 133, 190, 215, 129, 235, 189, 118, 139, 4, 63, 49, 235, 129, 191, 182, 130, 160, 62, 206, 250, 139, 189, 197, 119, 40, 61, 158, 133, 8, 60, 158, 20, 245, 190, 54, 9, 15, 190, 39, 204, 134, 190, 71, 193, 96, 59, 41, 105, 17, 188, 94, 244, 6, 191, 62, 165, 222, 189, 82, 137, 156, 190, 121, 3, 252, 189, 142, 166, 8, 63, 153, 128, 209, 189, 19, 92, 116, 190, 218, 209, 162, 189, 219, 141, 103, 189, 99, 170, 159, 190, 215, 117, 154, 61, 109, 8, 12, 191, 208, 165, 189, 189, 117, 111, 249, 190, 75, 240, 17, 62, 15, 175, 111, 189, 120, 200, 207, 60, 205, 34, 202, 61, 94, 75, 168, 189, 3, 195, 43, 62, 68, 135, 201, 58, 113, 168, 188, 61, 109, 6, 135, 190, 15, 93, 170, 62, 206, 222, 25, 190, 189, 34, 24, 190, 111, 16, 22, 190, 147, 14, 17, 191, 206, 46, 90, 190, 119, 193, 43, 191, 156, 206, 0, 62, 185, 188, 156, 190, 85, 225, 47, 191, 84, 47, 102, 190, 25, 186, 70, 62, 0, 22, 4, 62, 100, 52, 46, 190, 53, 53, 46, 189, 204, 2, 22, 190, 52, 250, 55, 191, 140, 140, 237, 61, 65, 236, 17, 190, 73, 113, 36, 62, 41, 222, 158, 190, 115, 12, 239, 191, 163, 30, 13, 191, 230, 201, 235, 61, 247, 173, 164, 190, 197, 95, 105, 62, 40, 118, 168, 60, 91, 203, 83, 62, 242, 213, 37, 61, 171, 172, 235, 61, 125, 234, 150, 62, 91, 178, 96, 62, 56, 218, 230, 61, 203, 216, 83, 191, 213, 63, 229, 189, 211, 99, 83, 62, 255, 225, 43, 189, 72, 195, 15, 62, 181, 165, 238, 61, 23, 253, 221, 61, 14, 132, 231, 189, 27, 162, 246, 61, 238, 172, 137, 60, 229, 165, 218, 189, 222, 213, 93, 60, 179, 182, 25, 190, 80, 232, 132, 61, 129, 20, 232, 61, 189, 52, 19, 190, 197, 161, 66, 189, 114, 231, 85, 189, 157, 227, 52, 190, 13, 9, 14, 190, 112, 235, 32, 62, 122, 59, 27, 61, 161, 223, 23, 190, 110, 235, 91, 190, 171, 133, 149, 61, 4, 41, 180, 61, 37, 211, 137, 189, 159, 241, 143, 61, 223, 143, 166, 61, 159, 20, 23, 190, 247, 34, 7, 190, 187, 48, 27, 188, 110, 179, 90, 188, 6, 38, 3, 190, 77, 140, 220, 61, 146, 22, 53, 190, 205, 100, 140, 60, 98, 212, 147, 190, 199, 85, 117, 61, 9, 25, 133, 62, 14, 151, 246, 190, 180, 97, 59, 60, 77, 31, 170, 61, 40, 116, 5, 190, 220, 31, 228, 189, 225, 221, 94, 190, 47, 225, 178, 189, 233, 136, 133, 188, 252, 195, 87, 62, 160, 252, 153, 190, 182, 81, 132, 62, 88, 215, 132, 189, 136, 138, 144, 190, 7, 235, 255, 187, 125, 129, 126, 61, 174, 251, 236, 189, 66, 141, 182, 61, 139, 57, 32, 190, 189, 9, 58, 62, 147, 116, 70, 62, 43, 55, 20, 62, 85, 182, 198, 61, 12, 50, 131, 188, 91, 73, 0, 63, 69, 250, 152, 61, 17, 27, 135, 60, 136, 28, 154, 189, 111, 47, 63, 62, 102, 206, 151, 61, 153, 225, 150, 61, 250, 190, 237, 59, 125, 77, 48, 189, 10, 196, 48, 190, 77, 41, 17, 61, 24, 168, 72, 59, 16, 245, 164, 189, 66, 20, 237, 60, 190, 11, 8, 190, 165, 70, 21, 62, 146, 159, 180, 61, 72, 194, 31, 190, 129, 129, 183, 189, 191, 214, 25, 190, 181, 245, 148, 61, 125, 54, 205, 188, 99, 71, 232, 61, 245, 221, 25, 188, 2, 117, 244, 189, 160, 167, 10, 190, 73, 161, 35, 186, 116, 50, 180, 187, 171, 132, 34, 62, 156, 132, 189, 189, 248, 252, 228, 189, 201, 246, 138, 189, 160, 249, 35, 190, 93, 3, 10, 189, 107, 140, 4, 190, 229, 48, 91, 61, 57, 85, 254, 61, 250, 216, 0, 62, 241, 189, 67, 190, 177, 67, 184, 189, 67, 103, 194, 57, 43, 47, 166, 62, 221, 21, 128, 62, 165, 94, 13, 189, 26, 17, 9, 62, 160, 248, 220, 62, 108, 77, 148, 62, 71, 92, 41, 62, 171, 105, 90, 61, 133, 83, 116, 190, 220, 105, 222, 189, 25, 157, 224, 189, 99, 100, 11, 62, 122, 201, 130, 190, 240, 11, 147, 62, 252, 138, 137, 190, 1, 155, 14, 191, 219, 138, 209, 190, 81, 17, 186, 61, 34, 217, 230, 190, 223, 167, 210, 190, 203, 126, 182, 190, 42, 97, 176, 190, 190, 103, 77, 62, 5, 215, 132, 191, 231, 140, 196, 61, 113, 90, 11, 190, 60, 125, 247, 61, 170, 85, 158, 62, 227, 45, 61, 190, 187, 181, 65, 60, 149, 165, 154, 188, 67, 224, 110, 187, 218, 181, 1, 191, 139, 154, 221, 189, 6, 199, 128, 190, 65, 50, 16, 190, 137, 220, 104, 61, 142, 32, 39, 60, 128, 176, 148, 190, 119, 168, 198, 189, 126, 175, 73, 189, 29, 117, 41, 189, 148, 192, 82, 62, 244, 222, 158, 190, 188, 70, 119, 188, 100, 164, 192, 190, 104, 73, 187, 189, 240, 144, 40, 190, 173, 128, 162, 61, 17, 18, 41, 62, 23, 33, 108, 62, 207, 53, 53, 190, 97, 36, 84, 62, 202, 124, 103, 62, 27, 99, 130, 61, 32, 185, 233, 61, 157, 54, 95, 61, 228, 100, 183, 189, 116, 96, 91, 62, 154, 214, 9, 188, 218, 195, 206, 61, 204, 126, 173, 60, 16, 115, 30, 62, 227, 70, 46, 62, 85, 198, 4, 191, 205, 181, 92, 190, 173, 32, 132, 189, 115, 210, 152, 189, 186, 127, 233, 61, 28, 235, 242, 187, 220, 96, 193, 189, 247, 73, 71, 190, 103, 128, 139, 62, 77, 0, 233, 190, 151, 6, 118, 62, 62, 185, 52, 190, 20, 183, 14, 191, 69, 112, 23, 191, 44, 4, 63, 62, 200, 77, 80, 187, 83, 27, 71, 62, 25, 87, 150, 62, 14, 48, 74, 189, 67, 203, 193, 189, 71, 198, 61, 62, 123, 127, 115, 62, 70, 197, 129, 190, 200, 236, 243, 61, 25, 163, 206, 189, 128, 107, 5, 190, 107, 163, 239, 61, 36, 134, 36, 189, 45, 124, 55, 61, 63, 67, 236, 61, 111, 0, 84, 61, 180, 178, 207, 62, 144, 193, 25, 191, 171, 36, 38, 190, 168, 6, 60, 62, 182, 76, 114, 61, 28, 88, 73, 61, 212, 198, 191, 61, 215, 69, 139, 190, 136, 195, 196, 60, 169, 184, 237, 61, 255, 38, 215, 190, 63, 27, 98, 62, 187, 239, 211, 189, 114, 177, 28, 190, 71, 228, 192, 190, 133, 122, 160, 60, 132, 33, 19, 60, 63, 90, 254, 61, 187, 13, 196, 60, 195, 156, 154, 62, 122, 228, 185, 62, 198, 53, 90, 61, 49, 145, 172, 61, 132, 177, 94, 190, 52, 29, 19, 63, 96, 12, 1, 189, 195, 124, 120, 190, 195, 37, 51, 190, 158, 247, 119, 188, 89, 143, 40, 62, 201, 28, 232, 188, 60, 96, 214, 60, 255, 28, 193, 190, 237, 242, 167, 60, 74, 189, 233, 61, 191, 207, 89, 191, 104, 17, 165, 189, 126, 152, 254, 190, 83, 204, 98, 189, 159, 111, 154, 190, 128, 196, 144, 62, 62, 107, 61, 62, 88, 229, 39, 62, 230, 23, 28, 191, 40, 173, 234, 189, 9, 57, 147, 62, 159, 92, 26, 62, 107, 211, 168, 190, 171, 20, 43, 63, 199, 166, 157, 190, 73, 0, 189, 191, 120, 29, 183, 190, 231, 188, 66, 189, 222, 11, 187, 190, 227, 64, 181, 60, 72, 123, 185, 61, 20, 92, 216, 190, 195, 207, 169, 61, 237, 149, 225, 190, 106, 95, 101, 62, 32, 70, 89, 191, 173, 72, 52, 191, 124, 17, 66, 62, 61, 202, 111, 187, 100, 7, 91, 189, 174, 133, 180, 62, 19, 95, 216, 189, 126, 202, 129, 60, 55, 228, 245, 188, 144, 157, 30, 62, 55, 67, 33, 190, 166, 96, 201, 60, 102, 86, 191, 62, 35, 215, 131, 62, 64, 16, 168, 61, 78, 25, 112, 61, 192, 57, 115, 189, 205, 151, 71, 62, 148, 204, 197, 188, 234, 103, 133, 61, 142, 213, 204, 61, 170, 59, 49, 62, 63, 32, 24, 190, 5, 173, 163, 61, 159, 131, 171, 62, 32, 199, 187, 188, 216, 76, 181, 61, 242, 5, 92, 189, 177, 242, 132, 62, 226, 214, 71, 61, 101, 148, 9, 62, 194, 44, 254, 61, 67, 99, 79, 191, 46, 47, 53, 62, 197, 20, 68, 190, 112, 216, 28, 61, 153, 97, 161, 62, 71, 119, 1, 63, 56, 10, 129, 62, 77, 88, 174, 62, 177, 33, 13, 190, 227, 184, 154, 189, 23, 78, 54, 62, 169, 94, 230, 62, 240, 15, 11, 191, 16, 181, 80, 190, 136, 23, 13, 63, 254, 99, 53, 191, 142, 71, 180, 62, 235, 98, 207, 190, 93, 156, 156, 190, 155, 8, 253, 189, 221, 216, 145, 62, 47, 93, 217, 190, 6, 247, 218, 61, 184, 109, 191, 190, 224, 183, 133, 191, 109, 19, 93, 191, 217, 39, 105, 191, 32, 45, 13, 62, 123, 43, 46, 191, 144, 20, 151, 62, 79, 89, 23, 62, 229, 240, 9, 62, 187, 60, 123, 62, 54, 75, 123, 189, 158, 215, 118, 62, 172, 140, 38, 62, 211, 193, 183, 190, 212, 207, 14, 189, 114, 193, 129, 62, 75, 72, 164, 190, 247, 17, 91, 61, 180, 104, 202, 62, 241, 65, 150, 62, 34, 105, 5, 62, 207, 184, 111, 61, 200, 35, 207, 61, 229, 111, 37, 62, 28, 194, 180, 60, 78, 25, 132, 62, 22, 83, 39, 61, 38, 84, 115, 62, 19, 47, 65, 189, 85, 200, 234, 189, 148, 159, 1, 190, 96, 187, 155, 62, 126, 56, 179, 190, 84, 41, 127, 190, 22, 24, 66, 190, 210, 220, 108, 61, 149, 10, 63, 189, 228, 60, 128, 191, 180, 200, 85, 188, 151, 20, 210, 188, 150, 124, 118, 61, 184, 105, 229, 189, 111, 223, 230, 190, 58, 176, 94, 62, 89, 136, 127, 61, 118, 26, 135, 62, 190, 92, 230, 190, 156, 236, 154, 61, 38, 227, 1, 62, 79, 106, 225, 61, 73, 140, 250, 189, 29, 13, 4, 189, 109, 92, 81, 188, 2, 109, 184, 190, 148, 173, 21, 61, 240, 32, 134, 190, 143, 255, 143, 187, 225, 40, 111, 190, 79, 99, 119, 190, 209, 129, 9, 190, 82, 139, 174, 61, 177, 72, 238, 61, 72, 23, 154, 60, 236, 241, 185, 189, 242, 152, 4, 62, 41, 16, 204, 62, 47, 4, 140, 62, 243, 24, 176, 189, 55, 190, 49, 59, 16, 100, 53, 63, 58, 140, 131, 190, 97, 175, 184, 60, 89, 67, 148, 189, 83, 33, 125, 189, 107, 217, 216, 61, 172, 154, 201, 61, 86, 152, 236, 61, 125, 150, 90, 190, 34, 165, 136, 189, 160, 246, 75, 62, 22, 225, 41, 190, 36, 161, 20, 190, 16, 150, 159, 62, 240, 171, 166, 62, 112, 237, 28, 62, 255, 67, 1, 62, 200, 27, 47, 190, 253, 170, 0, 61, 60, 211, 31, 190, 5, 72, 92, 62, 24, 226, 131, 189, 116, 61, 41, 62, 167, 181, 161, 190, 87, 213, 25, 61, 166, 42, 30, 62, 182, 142, 149, 188, 34, 47, 126, 61, 13, 197, 115, 190, 185, 201, 25, 190, 98, 176, 7, 190, 179, 55, 165, 186, 143, 225, 91, 191, 218, 55, 157, 61, 174, 125, 63, 62, 86, 137, 99, 62, 132, 46, 231, 61, 24, 73, 188, 61, 88, 64, 9, 188, 84, 19, 49, 62, 98, 186, 46, 62, 97, 54, 16, 191, 16, 113, 52, 60, 122, 203, 43, 189, 65, 46, 21, 190, 1, 216, 146, 61, 85, 245, 149, 190, 187, 5, 124, 190, 25, 28, 30, 62, 184, 52, 35, 62, 89, 101, 114, 190, 43, 150, 50, 62, 228, 17, 58, 191, 79, 187, 253, 189, 149, 87, 16, 190, 62, 86, 208, 61, 87, 214, 86, 190, 89, 21, 138, 61, 101, 96, 32, 190, 217, 250, 156, 61, 244, 38, 71, 62, 22, 126, 129, 62, 244, 91, 253, 189, 140, 151, 21, 191, 196, 7, 17, 63, 115, 89, 184, 189, 169, 219, 194, 61, 246, 165, 146, 189, 11, 232, 22, 191, 177, 151, 201, 186, 231, 236, 248, 190, 171, 5, 250, 60, 187, 87, 64, 190, 21, 25, 14, 62, 213, 236, 206, 61, 211, 73, 185, 189, 9, 223, 239, 189, 32, 178, 117, 62, 172, 193, 128, 62, 142, 131, 65, 62, 146, 253, 40, 59, 38, 159, 111, 190, 104, 53, 15, 62, 192, 57, 13, 62, 138, 44, 46, 62, 4, 238, 144, 190, 107, 118, 27, 62, 102, 170, 84, 190, 65, 67, 189, 190, 140, 99, 77, 190, 212, 205, 114, 62, 38, 152, 223, 190, 33, 180, 13, 191, 212, 101, 248, 189, 159, 12, 226, 189, 192, 129, 137, 61, 45, 99, 40, 191, 232, 216, 158, 62, 1, 254, 135, 62, 173, 108, 1, 62, 57, 19, 72, 61, 14, 221, 17, 191, 37, 25, 41, 61, 171, 205, 17, 61, 91, 75, 43, 190, 156, 229, 50, 62, 241, 153, 100, 62, 106, 25, 127, 190, 118, 60, 124, 61, 143, 105, 204, 62, 240, 245, 190, 61, 230, 134, 204, 62, 133, 201, 240, 60, 120, 40, 134, 61, 102, 132, 141, 61, 134, 147, 66, 190, 13, 59, 100, 62, 142, 219, 211, 61, 245, 164, 88, 62, 56, 228, 118, 190, 164, 61, 221, 189, 61, 40, 146, 189, 197, 57, 77, 62, 187, 125, 12, 190, 232, 192, 22, 189, 104, 238, 139, 190, 18, 135, 89, 190, 3, 47, 235, 188, 242, 208, 81, 191, 63, 14, 49, 62, 229, 115, 136, 62, 117, 138, 18, 189, 23, 105, 91, 61, 192, 112, 64, 190, 212, 235, 17, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 107, 18, 189, 35, 172, 136, 60, 222, 84, 184, 189, 85, 12, 68, 62, 251, 37, 232, 61, 163, 212, 195, 61, 177, 178, 140, 61, 38, 142, 14, 62, 178, 13, 80, 189, 72, 127, 225, 61, 16, 244, 209, 189, 14, 107, 130, 61, 238, 144, 104, 62, 78, 219, 55, 189, 189, 125, 112, 190, 50, 12, 236, 61, 202, 237, 167, 188, 13, 107, 32, 62, 78, 16, 241, 188, 216, 31, 122, 189, 46, 237, 77, 62, 55, 248, 145, 62, 191, 251, 174, 61, 219, 144, 213, 61, 194, 95, 211, 61, 206, 128, 179, 190, 143, 98, 202, 60, 113, 152, 189, 188, 153, 148, 148, 62, 217, 12, 177, 59, 150, 80, 89, 62, 91, 16, 201, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 8, 8, 190, 83, 209, 102, 63, 250, 48, 242, 187, 32, 192, 135, 61, 96, 76, 190, 189, 141, 28, 138, 191, 56, 213, 176, 63, 254, 76, 142, 61, 147, 165, 47, 63, 247, 136, 118, 62, 99, 132, 160, 190, 222, 179, 4, 191, 128, 116, 231, 62, 151, 181, 110, 63, 91, 212, 38, 191, 102, 207, 133, 63, 240, 144, 194, 189, 124, 231, 56, 62, 141, 118, 131, 189, 224, 191, 71, 191, 4, 112, 190, 61, 169, 123, 226, 62, 225, 149, 231, 62, 66, 155, 107, 191, 238, 242, 173, 190, 244, 49, 158, 63, 28, 150, 218, 190, 17, 130, 244, 62, 236, 23, 105, 190, 209, 25, 237, 190, 5, 241, 46, 191, 68, 41, 232, 190, 221, 174, 145, 61, 69, 41, 72, 61, 188, 181, 192, 189, 251, 200, 104, 190, 11, 230, 131, 190, 131, 53, 154, 188, 79, 104, 50, 62, 239, 0, 225, 189, 198, 183, 132, 62, 241, 251, 154, 189, 230, 191, 4, 188, 88, 247, 4, 62, 17, 47, 96, 189, 153, 133, 191, 62, 25, 219, 37, 63, 173, 204, 17, 61, 170, 158, 132, 60, 55, 33, 105, 190, 213, 98, 120, 189, 156, 99, 50, 62, 227, 177, 137, 188, 2, 213, 149, 189, 8, 23, 195, 189, 16, 222, 74, 62, 127, 143, 157, 61, 162, 177, 165, 62, 94, 64, 240, 189, 57, 189, 145, 61, 79, 16, 88, 190, 45, 117, 60, 62, 239, 66, 19, 189, 41, 223, 186, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 128, 165, 189, 33, 120, 137, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {109, 28, 229, 190, 82, 209, 64, 62, 0, 165, 140, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {223, 211, 206, 191, 18, 32, 92, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0035/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}