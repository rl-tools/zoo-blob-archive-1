// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 37, 139, 62, 132, 77, 176, 190, 25, 195, 87, 60, 42, 116, 109, 62, 132, 142, 167, 62, 134, 4, 176, 190, 221, 142, 24, 63, 188, 93, 77, 63, 155, 133, 109, 62, 246, 13, 90, 190, 144, 0, 19, 63, 231, 171, 53, 191, 154, 152, 184, 190, 31, 43, 90, 63, 159, 154, 46, 190, 142, 82, 132, 62, 138, 126, 175, 190, 140, 45, 162, 187, 32, 27, 104, 63, 15, 15, 122, 61, 7, 226, 244, 61, 66, 30, 23, 189, 5, 26, 26, 63, 173, 161, 164, 190, 31, 233, 41, 63, 97, 20, 20, 62, 241, 186, 219, 62, 222, 34, 215, 189, 66, 151, 140, 191, 38, 208, 239, 190, 135, 149, 9, 190, 89, 95, 126, 191, 62, 149, 48, 190, 96, 13, 12, 63, 128, 93, 121, 63, 34, 255, 190, 62, 120, 150, 13, 63, 125, 164, 205, 190, 127, 36, 160, 190, 211, 89, 129, 63, 207, 100, 132, 63, 97, 247, 8, 63, 139, 89, 206, 190, 228, 208, 188, 191, 129, 15, 28, 191, 94, 206, 88, 190, 33, 120, 171, 60, 154, 27, 193, 190, 27, 98, 101, 62, 84, 93, 42, 190, 60, 223, 228, 190, 46, 77, 207, 190, 107, 145, 70, 191, 56, 58, 213, 62, 238, 150, 196, 62, 200, 78, 35, 191, 126, 12, 221, 62, 175, 193, 15, 63, 188, 218, 3, 63, 82, 12, 59, 62, 74, 163, 10, 190, 219, 95, 48, 62, 9, 180, 44, 63, 188, 25, 232, 62, 183, 26, 66, 191, 163, 110, 1, 191, 53, 24, 54, 63, 120, 137, 76, 191, 185, 246, 30, 191, 230, 113, 235, 186, 128, 247, 239, 190, 134, 32, 103, 61, 174, 238, 210, 190, 48, 20, 101, 63, 149, 26, 193, 60, 116, 31, 10, 63, 193, 216, 42, 191, 212, 149, 88, 190, 20, 125, 71, 62, 206, 192, 246, 62, 50, 152, 32, 191, 51, 174, 53, 63, 255, 123, 186, 189, 216, 141, 1, 63, 20, 134, 32, 191, 39, 185, 37, 190, 108, 52, 141, 189, 41, 46, 117, 62, 24, 162, 115, 63, 6, 120, 13, 60, 231, 180, 80, 190, 122, 36, 191, 62, 190, 56, 85, 63, 51, 3, 4, 190, 241, 252, 201, 62, 123, 25, 241, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 183, 19, 191, 249, 154, 54, 188, 245, 2, 131, 190, 154, 48, 136, 62, 14, 208, 0, 190, 52, 21, 11, 191, 3, 84, 13, 62, 2, 56, 240, 62, 142, 8, 111, 190, 29, 100, 19, 62, 18, 247, 37, 63, 64, 158, 42, 190, 214, 189, 2, 63, 17, 160, 183, 61, 194, 165, 151, 189, 164, 139, 161, 190, 71, 61, 110, 61, 39, 19, 187, 189, 58, 67, 19, 63, 142, 236, 17, 63, 254, 108, 54, 62, 111, 185, 156, 190, 95, 155, 137, 62, 219, 85, 121, 62, 26, 166, 35, 63, 204, 140, 140, 190, 138, 77, 102, 189, 177, 59, 208, 190, 9, 33, 42, 63, 177, 201, 214, 62, 50, 207, 40, 62, 35, 84, 20, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 158, 198, 188, 183, 252, 245, 61, 51, 24, 44, 188, 1, 194, 156, 189, 101, 16, 175, 188, 200, 243, 12, 62, 25, 6, 29, 62, 18, 50, 222, 61, 62, 190, 116, 189, 103, 53, 44, 190, 8, 133, 95, 189, 182, 233, 181, 189, 142, 141, 131, 189, 91, 166, 42, 190, 67, 219, 196, 189, 100, 145, 140, 189, 77, 192, 53, 61, 42, 40, 2, 190, 163, 31, 118, 189, 60, 168, 45, 190, 104, 85, 235, 60, 154, 116, 30, 61, 25, 237, 247, 59, 108, 56, 187, 187, 88, 138, 13, 190, 37, 78, 130, 188, 195, 16, 164, 60, 99, 243, 4, 61, 131, 152, 125, 189, 159, 154, 157, 189, 154, 252, 26, 62, 47, 5, 193, 61, 251, 121, 47, 190, 161, 33, 192, 190, 194, 96, 221, 190, 31, 150, 196, 60, 101, 81, 180, 62, 103, 50, 12, 190, 160, 135, 198, 190, 153, 182, 24, 62, 233, 93, 240, 60, 29, 46, 253, 190, 230, 15, 44, 190, 33, 127, 155, 60, 174, 32, 53, 62, 244, 17, 103, 190, 4, 71, 136, 191, 19, 195, 0, 190, 75, 213, 187, 189, 160, 235, 8, 190, 64, 42, 91, 62, 195, 32, 220, 188, 137, 44, 37, 61, 40, 174, 44, 188, 98, 181, 151, 61, 160, 131, 182, 61, 205, 254, 58, 62, 224, 120, 70, 62, 188, 42, 213, 190, 199, 159, 227, 61, 54, 29, 123, 62, 158, 5, 53, 189, 207, 101, 232, 61, 207, 36, 3, 62, 149, 237, 75, 61, 70, 230, 129, 190, 27, 54, 136, 61, 23, 68, 145, 61, 201, 244, 160, 189, 59, 159, 219, 61, 82, 60, 130, 190, 15, 107, 31, 188, 211, 106, 180, 189, 178, 65, 10, 61, 102, 81, 7, 189, 217, 233, 189, 189, 35, 101, 114, 189, 145, 110, 51, 61, 31, 114, 223, 61, 253, 255, 71, 61, 26, 99, 147, 189, 5, 83, 104, 61, 198, 208, 206, 189, 151, 161, 44, 190, 98, 161, 161, 60, 247, 43, 27, 60, 54, 136, 182, 189, 139, 232, 196, 61, 149, 207, 4, 189, 238, 99, 111, 61, 17, 169, 163, 61, 156, 42, 182, 60, 113, 71, 36, 189, 181, 255, 20, 189, 246, 229, 34, 189, 200, 183, 69, 190, 91, 212, 228, 189, 137, 70, 145, 62, 45, 150, 171, 190, 232, 145, 33, 190, 38, 133, 125, 61, 153, 7, 49, 190, 65, 9, 8, 61, 22, 32, 142, 61, 111, 40, 78, 61, 254, 252, 9, 190, 6, 189, 8, 62, 32, 160, 141, 189, 100, 21, 159, 62, 175, 35, 178, 61, 229, 121, 177, 61, 243, 55, 130, 190, 181, 82, 44, 61, 200, 146, 22, 189, 49, 53, 154, 62, 30, 5, 188, 61, 194, 29, 210, 61, 187, 194, 151, 189, 136, 177, 138, 61, 60, 55, 31, 61, 242, 136, 192, 61, 120, 70, 46, 62, 241, 134, 176, 188, 234, 85, 124, 190, 131, 44, 40, 62, 104, 179, 42, 61, 32, 51, 65, 189, 199, 168, 101, 189, 71, 120, 241, 61, 174, 191, 27, 190, 216, 182, 108, 62, 78, 81, 167, 61, 38, 245, 54, 190, 199, 219, 143, 61, 173, 5, 196, 62, 255, 104, 139, 62, 74, 221, 154, 62, 241, 91, 100, 60, 98, 195, 195, 189, 235, 255, 189, 189, 6, 239, 47, 62, 15, 47, 139, 62, 241, 34, 16, 60, 131, 132, 125, 62, 204, 45, 31, 190, 81, 164, 245, 189, 225, 69, 158, 189, 169, 105, 151, 62, 253, 149, 27, 190, 125, 147, 0, 189, 10, 200, 143, 59, 92, 98, 183, 61, 63, 121, 170, 189, 211, 185, 21, 190, 180, 227, 253, 60, 179, 43, 14, 62, 4, 226, 220, 189, 57, 241, 11, 62, 59, 97, 115, 189, 253, 157, 89, 61, 138, 244, 2, 189, 189, 61, 52, 189, 24, 198, 133, 190, 147, 132, 180, 190, 209, 172, 5, 191, 45, 199, 33, 61, 79, 0, 244, 190, 47, 218, 231, 190, 12, 215, 0, 191, 212, 152, 154, 61, 243, 188, 79, 62, 116, 73, 158, 190, 192, 74, 180, 190, 170, 216, 177, 190, 31, 62, 218, 189, 248, 146, 181, 190, 211, 186, 190, 190, 53, 28, 166, 61, 127, 144, 95, 62, 93, 124, 115, 190, 104, 143, 48, 62, 101, 111, 195, 190, 188, 248, 164, 190, 55, 193, 165, 62, 181, 92, 0, 62, 48, 187, 206, 188, 254, 43, 186, 190, 211, 106, 251, 190, 208, 47, 197, 62, 147, 67, 99, 190, 30, 139, 51, 62, 190, 222, 216, 58, 222, 73, 237, 189, 252, 26, 136, 190, 98, 140, 174, 190, 18, 191, 231, 188, 204, 243, 107, 62, 150, 106, 254, 189, 76, 42, 228, 184, 38, 155, 5, 62, 15, 35, 14, 62, 187, 56, 135, 191, 18, 231, 77, 62, 89, 61, 110, 190, 32, 37, 135, 190, 243, 9, 114, 190, 214, 215, 240, 191, 235, 141, 253, 189, 83, 5, 135, 190, 199, 233, 247, 60, 161, 110, 242, 189, 34, 202, 3, 61, 111, 127, 96, 62, 11, 60, 8, 190, 206, 216, 143, 190, 240, 54, 20, 62, 247, 142, 146, 62, 92, 24, 82, 62, 244, 46, 59, 191, 139, 241, 143, 186, 100, 215, 179, 62, 111, 234, 1, 190, 116, 91, 248, 188, 179, 207, 63, 62, 17, 78, 255, 61, 192, 156, 123, 62, 106, 253, 68, 190, 159, 183, 69, 190, 86, 166, 67, 62, 80, 160, 37, 190, 61, 65, 137, 189, 173, 204, 172, 61, 3, 190, 120, 60, 139, 34, 252, 189, 30, 171, 82, 62, 86, 127, 79, 190, 226, 103, 178, 61, 161, 170, 17, 189, 124, 139, 6, 60, 236, 125, 66, 190, 246, 197, 27, 62, 205, 168, 90, 188, 99, 52, 112, 62, 42, 79, 56, 190, 66, 71, 185, 61, 118, 132, 250, 188, 176, 17, 126, 60, 43, 125, 152, 188, 115, 227, 56, 190, 48, 38, 46, 62, 149, 159, 39, 61, 55, 245, 173, 59, 156, 48, 243, 61, 25, 187, 23, 188, 54, 204, 10, 190, 121, 82, 182, 61, 48, 187, 196, 189, 102, 0, 130, 60, 202, 28, 206, 190, 101, 59, 203, 189, 85, 107, 9, 62, 213, 9, 42, 190, 118, 219, 118, 189, 133, 19, 210, 61, 2, 166, 232, 189, 224, 144, 147, 189, 68, 164, 57, 189, 217, 40, 136, 190, 230, 0, 234, 189, 110, 50, 127, 190, 229, 204, 128, 190, 200, 92, 228, 189, 2, 235, 129, 186, 35, 16, 190, 189, 93, 164, 162, 61, 213, 47, 58, 60, 93, 209, 138, 62, 26, 44, 204, 62, 109, 180, 155, 62, 21, 250, 118, 61, 7, 87, 165, 61, 91, 51, 167, 62, 222, 218, 81, 189, 219, 76, 128, 60, 171, 156, 241, 189, 24, 124, 39, 189, 237, 170, 6, 62, 212, 53, 82, 190, 173, 54, 149, 189, 170, 202, 201, 189, 5, 226, 0, 191, 151, 95, 62, 189, 179, 78, 60, 190, 106, 227, 24, 62, 18, 32, 92, 62, 77, 35, 255, 189, 149, 57, 63, 61, 57, 237, 86, 190, 147, 41, 130, 62, 167, 75, 161, 190, 221, 1, 1, 62, 223, 223, 95, 61, 147, 137, 46, 189, 205, 197, 99, 190, 172, 101, 6, 189, 86, 1, 42, 62, 43, 149, 164, 62, 186, 102, 191, 61, 235, 130, 249, 189, 191, 139, 185, 61, 16, 193, 26, 62, 104, 77, 224, 61, 0, 18, 44, 191, 55, 213, 158, 62, 36, 97, 125, 188, 76, 23, 113, 189, 228, 79, 107, 61, 216, 121, 180, 190, 168, 20, 168, 190, 184, 91, 70, 190, 136, 32, 162, 189, 92, 79, 134, 190, 132, 183, 113, 62, 109, 21, 176, 62, 11, 249, 191, 190, 95, 166, 47, 190, 146, 90, 112, 62, 26, 151, 91, 62, 197, 207, 201, 62, 247, 16, 200, 61, 19, 149, 116, 189, 184, 37, 63, 61, 56, 197, 220, 61, 171, 247, 2, 62, 123, 106, 146, 61, 71, 207, 162, 62, 25, 49, 79, 190, 37, 108, 116, 62, 140, 209, 159, 188, 36, 32, 202, 61, 241, 194, 178, 190, 193, 81, 173, 190, 82, 194, 158, 190, 209, 86, 145, 190, 185, 87, 165, 188, 211, 79, 25, 191, 103, 53, 92, 62, 156, 109, 142, 62, 172, 42, 28, 190, 226, 236, 45, 62, 57, 97, 212, 189, 35, 247, 45, 62, 47, 136, 225, 189, 250, 31, 241, 189, 21, 68, 174, 61, 94, 14, 136, 188, 115, 221, 124, 190, 124, 201, 45, 62, 77, 74, 3, 60, 244, 204, 18, 60, 98, 73, 210, 188, 61, 164, 136, 61, 211, 15, 61, 189, 180, 176, 128, 60, 18, 21, 10, 190, 223, 33, 106, 62, 88, 2, 93, 62, 252, 168, 105, 62, 146, 50, 10, 189, 31, 94, 49, 62, 63, 187, 235, 189, 43, 123, 67, 190, 39, 42, 35, 190, 238, 156, 31, 190, 33, 83, 171, 188, 27, 42, 108, 61, 147, 100, 9, 190, 179, 0, 112, 190, 248, 75, 41, 62, 41, 216, 117, 62, 219, 139, 100, 62, 157, 198, 28, 190, 183, 96, 2, 189, 69, 16, 1, 190, 201, 204, 232, 189, 18, 150, 147, 62, 255, 104, 177, 190, 67, 184, 93, 190, 219, 80, 67, 62, 34, 252, 27, 189, 192, 82, 142, 189, 33, 253, 86, 189, 92, 119, 157, 188, 190, 156, 120, 189, 168, 45, 207, 189, 126, 249, 68, 190, 121, 1, 131, 61, 20, 110, 225, 188, 176, 218, 5, 190, 106, 246, 50, 190, 205, 103, 96, 62, 130, 138, 11, 190, 185, 212, 64, 62, 167, 141, 173, 189, 201, 203, 183, 62, 41, 85, 119, 62, 127, 115, 131, 62, 164, 237, 116, 61, 120, 70, 126, 189, 48, 219, 154, 62, 229, 98, 116, 190, 238, 116, 139, 190, 190, 125, 212, 61, 184, 17, 172, 61, 238, 233, 113, 189, 174, 83, 227, 187, 121, 98, 98, 188, 151, 5, 183, 61, 153, 194, 172, 190, 177, 145, 68, 190, 48, 199, 163, 190, 236, 32, 198, 188, 252, 68, 72, 62, 103, 197, 133, 189, 182, 10, 215, 186, 150, 104, 26, 62, 198, 129, 47, 188, 167, 207, 245, 190, 192, 44, 223, 61, 142, 39, 245, 189, 226, 63, 202, 189, 203, 225, 60, 189, 41, 65, 255, 61, 249, 85, 74, 62, 247, 117, 229, 60, 40, 202, 15, 187, 5, 87, 83, 61, 228, 2, 153, 189, 216, 113, 71, 61, 57, 148, 184, 62, 229, 220, 233, 190, 0, 0, 223, 62, 255, 185, 100, 60, 153, 156, 146, 60, 140, 140, 41, 61, 16, 33, 164, 190, 232, 103, 190, 189, 30, 215, 217, 189, 71, 193, 96, 59, 29, 188, 183, 188, 66, 251, 89, 190, 144, 168, 131, 189, 82, 137, 156, 190, 121, 3, 252, 189, 118, 238, 228, 62, 210, 7, 205, 189, 255, 141, 140, 60, 188, 248, 39, 189, 178, 216, 209, 188, 100, 185, 66, 190, 132, 172, 174, 61, 80, 133, 29, 190, 147, 225, 18, 189, 19, 33, 170, 190, 119, 52, 35, 62, 64, 10, 162, 189, 242, 31, 197, 187, 131, 71, 99, 61, 173, 194, 185, 188, 26, 172, 56, 62, 176, 208, 141, 60, 235, 113, 207, 61, 151, 54, 132, 190, 221, 59, 167, 62, 226, 162, 25, 190, 67, 99, 20, 61, 104, 118, 118, 189, 56, 255, 196, 190, 179, 137, 28, 190, 9, 85, 31, 191, 156, 206, 0, 62, 174, 15, 38, 190, 69, 26, 17, 191, 229, 189, 74, 190, 30, 128, 134, 62, 0, 22, 4, 62, 94, 107, 4, 190, 155, 234, 79, 185, 61, 226, 10, 190, 149, 105, 8, 191, 232, 137, 245, 61, 161, 98, 252, 189, 171, 38, 184, 61, 13, 121, 147, 190, 254, 108, 159, 191, 60, 231, 191, 190, 61, 98, 25, 62, 15, 125, 157, 190, 120, 165, 119, 62, 168, 151, 224, 60, 136, 48, 78, 62, 46, 219, 1, 61, 255, 143, 11, 62, 98, 149, 167, 62, 34, 237, 70, 62, 170, 11, 212, 61, 95, 30, 41, 191, 207, 98, 209, 189, 211, 100, 118, 62, 182, 55, 254, 188, 130, 11, 7, 62, 173, 70, 13, 62, 23, 253, 221, 61, 14, 132, 231, 189, 27, 162, 246, 61, 238, 172, 137, 60, 229, 165, 218, 189, 222, 213, 93, 60, 179, 182, 25, 190, 80, 232, 132, 61, 129, 20, 232, 61, 189, 52, 19, 190, 197, 161, 66, 189, 114, 231, 85, 189, 157, 227, 52, 190, 13, 9, 14, 190, 112, 235, 32, 62, 122, 59, 27, 61, 161, 223, 23, 190, 110, 235, 91, 190, 171, 133, 149, 61, 4, 41, 180, 61, 37, 211, 137, 189, 159, 241, 143, 61, 223, 143, 166, 61, 159, 20, 23, 190, 247, 34, 7, 190, 187, 48, 27, 188, 110, 179, 90, 188, 6, 38, 3, 190, 77, 140, 220, 61, 146, 22, 53, 190, 205, 100, 140, 60, 98, 212, 147, 190, 199, 85, 117, 61, 229, 36, 82, 62, 51, 134, 219, 190, 210, 68, 178, 57, 45, 244, 249, 61, 40, 116, 5, 190, 54, 192, 93, 189, 18, 49, 95, 190, 58, 65, 110, 189, 79, 145, 50, 60, 218, 73, 110, 62, 79, 220, 147, 190, 115, 248, 102, 62, 49, 153, 122, 189, 148, 16, 105, 190, 115, 147, 17, 188, 115, 135, 78, 61, 62, 217, 56, 190, 12, 70, 193, 61, 182, 44, 204, 189, 236, 43, 48, 62, 24, 218, 34, 62, 66, 204, 21, 62, 115, 195, 174, 61, 15, 158, 116, 60, 217, 250, 218, 62, 165, 250, 206, 60, 192, 6, 91, 61, 44, 246, 47, 59, 111, 68, 33, 62, 249, 75, 157, 61, 9, 248, 204, 61, 250, 190, 237, 59, 125, 77, 48, 189, 10, 196, 48, 190, 77, 41, 17, 61, 24, 168, 72, 59, 16, 245, 164, 189, 66, 20, 237, 60, 190, 11, 8, 190, 165, 70, 21, 62, 146, 159, 180, 61, 72, 194, 31, 190, 129, 129, 183, 189, 191, 214, 25, 190, 181, 245, 148, 61, 125, 54, 205, 188, 99, 71, 232, 61, 245, 221, 25, 188, 2, 117, 244, 189, 160, 167, 10, 190, 73, 161, 35, 186, 116, 50, 180, 187, 171, 132, 34, 62, 156, 132, 189, 189, 248, 252, 228, 189, 201, 246, 138, 189, 160, 249, 35, 190, 93, 3, 10, 189, 107, 140, 4, 190, 229, 48, 91, 61, 57, 85, 254, 61, 250, 216, 0, 62, 241, 189, 67, 190, 177, 67, 184, 189, 57, 149, 31, 188, 27, 255, 213, 62, 185, 167, 109, 62, 39, 62, 215, 189, 26, 17, 9, 62, 190, 255, 200, 62, 39, 212, 118, 62, 81, 170, 106, 62, 42, 76, 44, 62, 11, 225, 225, 189, 191, 67, 74, 61, 38, 27, 173, 189, 90, 87, 153, 62, 212, 123, 152, 189, 247, 109, 159, 62, 247, 71, 134, 190, 72, 91, 150, 189, 133, 244, 169, 190, 22, 54, 220, 187, 140, 155, 246, 190, 109, 22, 153, 190, 125, 235, 164, 190, 222, 143, 27, 190, 248, 22, 108, 61, 142, 134, 243, 190, 203, 226, 189, 61, 78, 133, 177, 57, 100, 153, 79, 61, 233, 29, 79, 62, 192, 71, 105, 190, 174, 210, 153, 189, 149, 165, 154, 188, 94, 203, 166, 189, 86, 134, 3, 191, 44, 171, 9, 190, 160, 236, 88, 188, 65, 50, 16, 190, 154, 101, 148, 61, 153, 196, 176, 188, 16, 250, 104, 190, 33, 195, 50, 189, 29, 23, 144, 189, 221, 224, 151, 188, 70, 135, 44, 62, 9, 149, 157, 190, 111, 5, 75, 61, 151, 172, 127, 190, 29, 72, 155, 189, 193, 5, 104, 190, 105, 202, 202, 61, 168, 204, 45, 62, 136, 238, 109, 62, 202, 76, 209, 189, 19, 61, 111, 62, 155, 173, 119, 62, 170, 166, 121, 59, 59, 199, 21, 62, 62, 48, 215, 188, 215, 134, 80, 188, 90, 10, 69, 62, 114, 34, 30, 189, 182, 203, 232, 61, 252, 55, 129, 188, 16, 115, 30, 62, 140, 163, 30, 62, 204, 167, 2, 191, 55, 233, 137, 190, 33, 37, 37, 62, 115, 210, 152, 189, 6, 47, 194, 61, 53, 169, 70, 189, 156, 115, 153, 189, 108, 143, 80, 190, 247, 153, 65, 62, 61, 21, 209, 190, 121, 188, 67, 62, 214, 143, 64, 190, 101, 111, 26, 191, 241, 221, 200, 190, 66, 221, 91, 62, 43, 136, 142, 189, 204, 205, 51, 62, 231, 142, 142, 62, 49, 123, 64, 189, 67, 87, 25, 189, 11, 209, 76, 62, 135, 230, 74, 62, 52, 9, 138, 190, 171, 45, 19, 62, 69, 61, 28, 190, 226, 203, 220, 189, 55, 231, 45, 61, 156, 22, 135, 189, 127, 82, 144, 61, 18, 194, 190, 61, 111, 0, 84, 61, 125, 227, 176, 62, 77, 254, 15, 191, 75, 239, 51, 190, 222, 207, 104, 62, 182, 76, 114, 61, 227, 3, 164, 61, 112, 227, 190, 61, 182, 199, 105, 190, 68, 238, 6, 61, 229, 36, 16, 62, 185, 130, 205, 190, 137, 146, 52, 62, 230, 30, 223, 189, 61, 181, 0, 190, 184, 90, 201, 190, 152, 100, 6, 59, 168, 55, 102, 189, 51, 172, 255, 61, 110, 140, 165, 61, 52, 152, 153, 62, 107, 164, 153, 62, 5, 151, 31, 61, 42, 221, 214, 61, 91, 193, 2, 190, 156, 242, 242, 62, 172, 212, 180, 189, 208, 27, 57, 190, 101, 107, 144, 189, 137, 209, 60, 188, 218, 230, 53, 62, 215, 15, 45, 60, 60, 96, 214, 60, 93, 88, 234, 190, 237, 242, 167, 60, 182, 24, 205, 61, 29, 214, 89, 191, 104, 17, 165, 189, 181, 218, 240, 190, 181, 31, 165, 188, 197, 70, 255, 189, 67, 9, 169, 62, 125, 17, 113, 62, 88, 229, 39, 62, 17, 212, 223, 190, 40, 173, 234, 189, 197, 200, 167, 62, 232, 182, 186, 61, 203, 53, 214, 190, 207, 227, 49, 63, 245, 244, 78, 190, 235, 102, 103, 191, 131, 212, 212, 190, 199, 245, 113, 190, 97, 146, 216, 190, 254, 186, 196, 61, 145, 166, 127, 61, 19, 75, 247, 190, 110, 36, 31, 61, 73, 178, 142, 189, 222, 36, 105, 62, 157, 83, 54, 191, 193, 150, 75, 191, 17, 245, 54, 62, 61, 202, 111, 187, 20, 22, 38, 188, 147, 128, 4, 62, 250, 1, 7, 190, 190, 98, 199, 60, 55, 228, 245, 188, 255, 220, 46, 189, 105, 33, 32, 190, 222, 239, 146, 189, 158, 101, 140, 62, 216, 183, 40, 62, 136, 201, 39, 188, 54, 3, 157, 61, 84, 232, 25, 190, 226, 177, 93, 61, 43, 38, 149, 189, 174, 78, 179, 60, 90, 163, 31, 62, 51, 85, 24, 62, 214, 8, 85, 190, 78, 195, 160, 61, 69, 124, 141, 62, 173, 225, 189, 189, 62, 110, 151, 61, 142, 57, 130, 61, 139, 255, 127, 62, 171, 120, 134, 61, 200, 244, 33, 61, 232, 58, 151, 61, 242, 181, 2, 191, 118, 248, 49, 62, 71, 245, 4, 190, 112, 216, 28, 61, 122, 187, 11, 62, 111, 62, 159, 62, 165, 124, 244, 61, 64, 81, 147, 62, 177, 33, 13, 190, 237, 241, 49, 58, 202, 234, 12, 62, 254, 152, 220, 62, 86, 192, 142, 190, 48, 26, 42, 189, 172, 95, 215, 62, 234, 32, 108, 190, 252, 77, 130, 62, 201, 38, 25, 190, 110, 230, 54, 190, 32, 42, 150, 189, 240, 110, 94, 62, 162, 179, 161, 190, 102, 223, 188, 61, 53, 236, 191, 190, 152, 60, 12, 191, 27, 166, 27, 191, 165, 223, 29, 191, 10, 183, 2, 61, 140, 56, 210, 190, 67, 81, 44, 62, 138, 204, 213, 61, 94, 86, 3, 62, 24, 65, 6, 62, 78, 189, 147, 189, 177, 89, 56, 62, 172, 140, 38, 62, 124, 247, 172, 190, 119, 136, 168, 61, 81, 164, 133, 62, 99, 152, 209, 190, 247, 17, 91, 61, 138, 4, 202, 62, 8, 175, 151, 62, 88, 12, 194, 61, 98, 57, 179, 61, 42, 199, 174, 61, 52, 30, 146, 62, 235, 15, 143, 60, 82, 48, 170, 62, 155, 170, 210, 61, 244, 177, 91, 62, 237, 93, 36, 189, 198, 52, 5, 62, 107, 2, 59, 190, 119, 93, 147, 62, 97, 253, 179, 190, 239, 94, 77, 190, 101, 226, 51, 190, 145, 205, 127, 185, 115, 202, 32, 189, 89, 142, 88, 191, 164, 9, 104, 60, 226, 45, 129, 189, 228, 162, 207, 60, 67, 143, 158, 189, 17, 145, 226, 190, 247, 55, 93, 62, 89, 136, 127, 61, 3, 127, 121, 62, 184, 65, 178, 190, 22, 3, 88, 61, 129, 61, 33, 62, 79, 106, 225, 61, 121, 0, 134, 189, 63, 176, 17, 189, 222, 8, 181, 60, 142, 35, 174, 190, 165, 191, 141, 61, 108, 20, 103, 190, 228, 99, 231, 187, 72, 149, 96, 190, 33, 219, 72, 190, 69, 40, 15, 190, 196, 129, 177, 61, 132, 203, 146, 61, 102, 154, 90, 61, 69, 0, 231, 59, 254, 135, 194, 61, 224, 92, 178, 62, 188, 200, 145, 62, 25, 169, 30, 189, 63, 252, 50, 60, 106, 103, 25, 63, 224, 242, 144, 190, 97, 181, 103, 61, 111, 230, 117, 189, 142, 125, 58, 188, 53, 14, 166, 61, 162, 62, 209, 61, 86, 152, 236, 61, 0, 138, 53, 190, 120, 86, 148, 59, 155, 126, 93, 62, 108, 223, 113, 190, 36, 161, 20, 190, 131, 213, 145, 62, 69, 246, 165, 62, 40, 102, 214, 61, 144, 197, 60, 62, 223, 104, 2, 190, 192, 54, 194, 61, 137, 193, 235, 189, 216, 59, 130, 62, 92, 114, 26, 61, 32, 175, 31, 62, 77, 34, 159, 190, 190, 73, 35, 62, 225, 245, 18, 62, 133, 229, 100, 189, 5, 11, 131, 61, 237, 161, 80, 190, 201, 223, 14, 190, 237, 52, 6, 190, 129, 157, 145, 188, 34, 121, 55, 191, 1, 34, 240, 61, 154, 220, 12, 62, 250, 102, 90, 62, 46, 89, 15, 62, 23, 195, 176, 61, 104, 60, 169, 188, 84, 19, 49, 62, 134, 57, 64, 62, 219, 5, 164, 188, 195, 228, 18, 189, 237, 143, 142, 189, 65, 46, 21, 190, 104, 177, 42, 61, 220, 141, 158, 190, 251, 192, 134, 59, 220, 188, 55, 61, 34, 136, 217, 60, 137, 75, 60, 190, 84, 13, 239, 61, 98, 87, 63, 190, 45, 101, 132, 190, 172, 189, 75, 190, 76, 53, 111, 61, 176, 163, 140, 190, 210, 120, 238, 60, 119, 237, 192, 189, 238, 27, 245, 186, 181, 139, 18, 62, 250, 54, 76, 62, 232, 36, 123, 190, 44, 52, 137, 190, 125, 39, 8, 63, 145, 125, 217, 189, 38, 228, 101, 62, 236, 206, 117, 190, 127, 4, 135, 190, 242, 134, 253, 189, 110, 179, 219, 190, 171, 5, 250, 60, 111, 67, 75, 190, 187, 13, 92, 62, 103, 244, 196, 61, 33, 63, 63, 190, 9, 223, 239, 189, 95, 2, 108, 62, 224, 178, 118, 62, 13, 167, 225, 61, 255, 110, 134, 61, 198, 100, 124, 190, 195, 237, 103, 62, 96, 39, 243, 61, 74, 47, 95, 62, 187, 246, 199, 189, 165, 5, 240, 61, 213, 32, 97, 190, 19, 124, 152, 190, 160, 132, 136, 190, 32, 251, 88, 62, 197, 252, 17, 191, 4, 239, 255, 190, 169, 15, 4, 190, 236, 107, 60, 190, 203, 237, 250, 60, 12, 128, 12, 191, 57, 48, 162, 62, 134, 223, 45, 62, 247, 78, 164, 61, 82, 95, 234, 60, 6, 146, 54, 191, 168, 151, 142, 60, 171, 205, 17, 61, 232, 86, 10, 190, 205, 229, 112, 62, 242, 79, 120, 62, 145, 184, 152, 190, 118, 60, 124, 61, 156, 134, 181, 62, 153, 133, 192, 61, 29, 143, 183, 62, 114, 33, 104, 61, 36, 173, 91, 61, 154, 121, 20, 62, 139, 252, 68, 190, 138, 128, 128, 62, 11, 193, 48, 62, 43, 74, 90, 62, 211, 95, 110, 190, 192, 137, 130, 189, 241, 233, 250, 189, 170, 226, 33, 62, 64, 233, 1, 190, 126, 60, 38, 60, 31, 77, 141, 190, 240, 148, 137, 190, 216, 122, 60, 188, 118, 236, 54, 191, 23, 105, 90, 62, 150, 37, 98, 62, 151, 41, 182, 189, 253, 231, 208, 61, 149, 17, 51, 190, 229, 238, 66, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 107, 18, 189, 185, 60, 179, 60, 251, 30, 172, 189, 36, 136, 79, 62, 70, 89, 210, 61, 198, 238, 176, 61, 149, 151, 167, 61, 186, 187, 16, 62, 212, 110, 49, 61, 200, 41, 98, 61, 110, 215, 10, 190, 136, 164, 206, 61, 16, 151, 131, 62, 90, 26, 254, 189, 179, 96, 97, 190, 175, 251, 10, 62, 202, 237, 167, 188, 233, 148, 57, 62, 78, 16, 241, 188, 240, 150, 245, 189, 121, 156, 60, 62, 42, 45, 118, 62, 87, 193, 236, 61, 42, 113, 12, 62, 242, 90, 179, 61, 6, 46, 144, 190, 96, 246, 250, 57, 134, 10, 36, 60, 114, 124, 142, 62, 17, 215, 148, 189, 189, 125, 55, 62, 194, 106, 119, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 8, 8, 190, 174, 172, 14, 63, 120, 208, 242, 187, 228, 166, 141, 61, 127, 10, 242, 189, 75, 113, 127, 191, 160, 97, 109, 63, 101, 181, 157, 61, 211, 139, 197, 62, 186, 186, 106, 62, 223, 29, 189, 190, 173, 49, 126, 190, 23, 207, 230, 62, 156, 1, 175, 62, 234, 86, 163, 190, 25, 186, 67, 63, 240, 144, 194, 189, 40, 147, 56, 62, 141, 118, 131, 189, 102, 79, 225, 190, 101, 255, 236, 61, 6, 47, 208, 62, 155, 95, 211, 62, 65, 236, 123, 191, 127, 50, 102, 190, 145, 59, 74, 63, 11, 68, 230, 190, 251, 129, 204, 62, 139, 133, 126, 190, 175, 237, 191, 190, 38, 3, 56, 191, 124, 3, 2, 191, 221, 174, 145, 61, 163, 103, 216, 188, 181, 189, 192, 189, 42, 245, 122, 190, 43, 172, 131, 190, 225, 199, 1, 59, 57, 104, 242, 61, 6, 70, 191, 189, 5, 135, 71, 62, 211, 217, 76, 189, 67, 144, 94, 61, 45, 45, 204, 61, 101, 11, 255, 188, 111, 22, 132, 62, 50, 220, 197, 62, 147, 54, 244, 58, 170, 158, 132, 60, 153, 188, 48, 190, 213, 98, 120, 189, 13, 208, 133, 62, 18, 7, 85, 189, 46, 36, 77, 190, 144, 189, 194, 189, 37, 203, 11, 62, 244, 167, 233, 61, 182, 78, 152, 62, 168, 96, 131, 190, 61, 212, 11, 62, 134, 22, 34, 190, 253, 88, 39, 62, 250, 46, 247, 189, 213, 65, 253, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 53, 135, 189, 162, 181, 113, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {12, 106, 120, 191, 232, 165, 65, 190, 52, 16, 50, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {25, 30, 218, 62, 204, 114, 21, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0035/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}