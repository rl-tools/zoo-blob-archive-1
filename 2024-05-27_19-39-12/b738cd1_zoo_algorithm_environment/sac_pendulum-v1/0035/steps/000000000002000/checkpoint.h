// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 37, 139, 62, 132, 77, 176, 190, 25, 195, 87, 60, 39, 234, 193, 62, 189, 0, 204, 62, 218, 192, 129, 190, 87, 95, 159, 62, 22, 193, 183, 62, 43, 11, 121, 62, 250, 209, 141, 190, 140, 6, 100, 63, 139, 23, 6, 191, 255, 43, 68, 190, 199, 109, 33, 63, 217, 218, 13, 190, 142, 82, 132, 62, 138, 126, 175, 190, 140, 45, 162, 187, 186, 148, 94, 63, 136, 153, 210, 189, 243, 200, 137, 61, 20, 196, 3, 190, 211, 171, 45, 63, 200, 54, 67, 190, 90, 224, 208, 62, 107, 141, 165, 59, 170, 83, 177, 62, 42, 10, 48, 190, 136, 206, 158, 59, 87, 145, 206, 190, 93, 186, 204, 189, 179, 74, 131, 191, 177, 44, 129, 190, 65, 178, 193, 62, 137, 248, 240, 62, 73, 56, 192, 62, 143, 171, 248, 62, 202, 175, 63, 189, 120, 33, 160, 190, 228, 129, 73, 63, 105, 124, 34, 63, 14, 105, 11, 63, 154, 117, 10, 190, 143, 230, 156, 61, 205, 71, 218, 190, 9, 52, 174, 190, 199, 201, 222, 62, 209, 195, 5, 190, 10, 165, 176, 62, 212, 11, 127, 61, 155, 25, 190, 190, 91, 96, 58, 61, 229, 131, 22, 191, 59, 255, 193, 62, 91, 122, 166, 62, 185, 214, 113, 191, 252, 148, 142, 62, 16, 100, 238, 62, 96, 93, 163, 62, 26, 211, 233, 61, 139, 107, 11, 190, 109, 21, 189, 190, 36, 228, 227, 62, 234, 248, 160, 62, 158, 174, 155, 189, 33, 100, 239, 190, 216, 26, 58, 63, 152, 163, 169, 190, 9, 36, 17, 191, 122, 147, 3, 189, 153, 226, 35, 191, 45, 96, 203, 188, 141, 117, 130, 190, 5, 154, 105, 63, 253, 103, 86, 62, 174, 226, 180, 62, 211, 159, 51, 190, 42, 47, 75, 189, 62, 116, 107, 189, 195, 223, 77, 63, 133, 236, 179, 190, 161, 67, 233, 62, 188, 103, 56, 190, 228, 42, 248, 62, 12, 25, 237, 190, 122, 249, 124, 190, 43, 240, 207, 189, 218, 37, 102, 62, 134, 11, 34, 63, 198, 148, 202, 61, 164, 187, 166, 57, 63, 183, 36, 191, 19, 31, 246, 62, 116, 100, 11, 189, 15, 63, 233, 62, 245, 94, 14, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 183, 19, 191, 74, 148, 117, 190, 67, 87, 243, 189, 113, 222, 199, 62, 170, 190, 163, 190, 52, 21, 11, 191, 16, 26, 204, 60, 63, 69, 12, 63, 10, 45, 155, 189, 232, 45, 152, 62, 39, 56, 47, 63, 116, 114, 215, 57, 61, 0, 225, 62, 251, 40, 78, 62, 212, 12, 244, 189, 145, 227, 173, 189, 6, 28, 151, 189, 102, 112, 177, 190, 137, 31, 40, 63, 222, 133, 26, 63, 120, 171, 172, 62, 156, 175, 216, 190, 30, 229, 138, 62, 120, 117, 135, 62, 140, 89, 30, 63, 226, 93, 126, 190, 64, 14, 109, 62, 143, 126, 158, 190, 26, 193, 22, 63, 193, 179, 243, 62, 168, 105, 162, 61, 234, 191, 37, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 158, 198, 188, 62, 163, 0, 62, 51, 24, 44, 188, 52, 244, 116, 189, 41, 130, 145, 188, 200, 243, 12, 62, 233, 113, 29, 62, 217, 183, 19, 62, 227, 182, 136, 189, 138, 62, 32, 190, 6, 188, 58, 189, 211, 109, 185, 189, 250, 135, 123, 189, 181, 12, 44, 190, 6, 149, 183, 189, 139, 176, 123, 189, 84, 126, 70, 61, 235, 209, 14, 190, 133, 175, 137, 189, 64, 145, 31, 190, 150, 31, 2, 61, 223, 101, 47, 61, 120, 5, 46, 60, 208, 95, 52, 187, 114, 27, 224, 189, 226, 51, 127, 188, 80, 196, 206, 60, 152, 133, 178, 60, 216, 8, 55, 189, 215, 174, 74, 189, 8, 154, 20, 62, 127, 133, 2, 62, 251, 121, 47, 190, 9, 221, 145, 189, 91, 15, 110, 190, 19, 99, 190, 189, 207, 228, 17, 189, 103, 50, 12, 190, 13, 171, 144, 190, 195, 83, 36, 61, 88, 250, 105, 61, 67, 114, 206, 61, 92, 149, 10, 186, 174, 42, 178, 61, 35, 44, 123, 60, 159, 74, 46, 190, 211, 229, 65, 190, 179, 166, 223, 60, 111, 61, 8, 190, 106, 11, 12, 189, 200, 193, 128, 62, 74, 255, 1, 189, 210, 109, 25, 189, 91, 251, 237, 188, 91, 26, 138, 58, 151, 205, 132, 62, 73, 88, 254, 188, 232, 24, 152, 188, 19, 97, 148, 190, 207, 179, 15, 62, 141, 19, 96, 62, 10, 218, 51, 190, 197, 94, 120, 61, 114, 55, 11, 188, 149, 237, 75, 61, 238, 22, 193, 189, 157, 97, 142, 61, 17, 134, 239, 61, 248, 98, 37, 61, 59, 159, 219, 61, 33, 27, 174, 189, 58, 190, 81, 61, 177, 232, 178, 189, 169, 235, 47, 61, 119, 237, 71, 189, 225, 229, 179, 189, 241, 94, 7, 60, 25, 209, 69, 61, 58, 159, 253, 61, 42, 198, 186, 61, 240, 108, 48, 185, 131, 72, 163, 61, 15, 179, 211, 189, 187, 17, 177, 189, 46, 140, 126, 61, 96, 15, 148, 61, 91, 121, 228, 188, 169, 102, 51, 61, 34, 239, 254, 60, 68, 15, 229, 61, 194, 255, 19, 62, 58, 249, 181, 60, 189, 142, 98, 189, 201, 20, 103, 61, 197, 132, 236, 187, 237, 169, 9, 190, 91, 212, 228, 189, 48, 215, 163, 62, 40, 57, 58, 190, 196, 205, 1, 190, 198, 191, 223, 61, 153, 7, 49, 190, 206, 237, 175, 189, 24, 128, 170, 61, 204, 150, 79, 61, 34, 223, 213, 189, 204, 132, 187, 61, 243, 50, 25, 189, 225, 160, 104, 62, 101, 186, 135, 61, 232, 18, 10, 62, 101, 218, 102, 190, 64, 98, 213, 187, 163, 177, 47, 60, 192, 147, 138, 62, 111, 15, 41, 61, 136, 105, 191, 61, 99, 145, 207, 189, 94, 60, 130, 188, 64, 56, 54, 61, 27, 221, 192, 61, 112, 206, 247, 188, 104, 57, 21, 61, 204, 21, 88, 190, 29, 81, 13, 62, 137, 86, 138, 188, 196, 229, 96, 189, 119, 168, 203, 189, 71, 120, 241, 61, 167, 193, 252, 189, 62, 197, 50, 62, 63, 80, 97, 61, 181, 241, 155, 189, 199, 219, 143, 61, 114, 166, 144, 62, 127, 238, 143, 62, 157, 156, 66, 62, 189, 24, 148, 189, 233, 186, 55, 190, 132, 22, 23, 190, 23, 114, 5, 62, 228, 195, 67, 62, 191, 59, 226, 189, 149, 66, 43, 62, 208, 116, 39, 190, 64, 231, 232, 189, 103, 159, 220, 189, 48, 243, 130, 62, 216, 234, 78, 189, 22, 179, 183, 60, 98, 211, 199, 188, 102, 191, 252, 60, 192, 75, 135, 59, 11, 228, 28, 62, 69, 97, 74, 60, 204, 108, 87, 61, 15, 205, 176, 189, 158, 141, 68, 62, 179, 187, 138, 61, 215, 228, 215, 61, 138, 244, 2, 189, 135, 45, 102, 61, 93, 151, 221, 61, 8, 197, 253, 61, 100, 166, 32, 190, 45, 199, 33, 61, 66, 248, 46, 190, 208, 164, 23, 190, 80, 32, 53, 190, 236, 38, 226, 61, 130, 213, 200, 189, 41, 204, 183, 188, 94, 184, 234, 189, 127, 174, 55, 189, 239, 137, 221, 189, 92, 252, 218, 189, 4, 113, 137, 188, 239, 182, 247, 61, 107, 185, 5, 62, 9, 244, 18, 190, 148, 46, 205, 61, 129, 76, 139, 189, 22, 227, 253, 189, 120, 95, 222, 61, 195, 1, 26, 189, 184, 122, 41, 62, 70, 15, 161, 189, 160, 117, 73, 190, 5, 113, 114, 61, 208, 79, 152, 189, 53, 220, 201, 61, 51, 230, 63, 190, 222, 73, 237, 189, 139, 91, 100, 61, 161, 238, 178, 60, 41, 8, 72, 190, 25, 122, 148, 189, 150, 106, 254, 189, 138, 6, 125, 190, 206, 22, 218, 189, 9, 255, 41, 62, 66, 243, 51, 190, 0, 240, 202, 62, 147, 156, 86, 189, 207, 208, 180, 190, 64, 53, 213, 189, 68, 251, 151, 190, 39, 74, 89, 60, 238, 54, 23, 190, 63, 98, 19, 62, 127, 49, 214, 189, 210, 211, 0, 61, 5, 25, 72, 62, 243, 135, 163, 188, 171, 191, 250, 189, 114, 254, 128, 62, 151, 153, 32, 62, 127, 88, 74, 188, 169, 222, 206, 190, 170, 186, 198, 59, 176, 222, 90, 62, 187, 36, 249, 189, 5, 134, 47, 189, 138, 221, 119, 61, 17, 78, 255, 61, 170, 95, 53, 62, 94, 237, 30, 61, 49, 54, 37, 190, 13, 254, 39, 62, 80, 160, 37, 190, 117, 55, 201, 189, 251, 102, 184, 61, 31, 161, 159, 61, 174, 80, 51, 189, 222, 143, 130, 62, 204, 7, 214, 189, 246, 109, 254, 59, 40, 88, 100, 60, 51, 226, 215, 61, 115, 198, 205, 189, 133, 254, 123, 61, 194, 227, 74, 61, 219, 138, 129, 62, 236, 197, 74, 190, 101, 129, 174, 61, 40, 15, 233, 189, 200, 215, 175, 189, 135, 242, 82, 61, 41, 130, 48, 190, 81, 0, 177, 189, 28, 81, 178, 61, 208, 45, 147, 61, 68, 91, 60, 62, 217, 197, 192, 189, 117, 11, 13, 190, 219, 249, 176, 61, 48, 187, 196, 189, 174, 104, 193, 188, 161, 39, 98, 59, 34, 93, 162, 189, 179, 54, 226, 61, 213, 9, 42, 190, 209, 110, 145, 189, 23, 36, 133, 61, 243, 32, 136, 188, 246, 209, 140, 61, 62, 129, 155, 61, 73, 131, 158, 189, 63, 143, 18, 190, 144, 131, 217, 189, 114, 25, 31, 189, 239, 36, 90, 60, 222, 171, 130, 189, 129, 165, 165, 189, 109, 91, 216, 61, 147, 97, 214, 60, 116, 132, 40, 62, 93, 91, 99, 62, 46, 170, 83, 62, 226, 115, 12, 62, 165, 246, 145, 61, 203, 76, 21, 190, 232, 198, 22, 60, 195, 38, 147, 61, 17, 78, 76, 189, 231, 49, 208, 189, 86, 53, 79, 61, 178, 31, 93, 190, 173, 54, 149, 189, 166, 127, 108, 188, 47, 99, 43, 190, 84, 133, 128, 61, 209, 133, 116, 61, 106, 227, 24, 62, 234, 195, 186, 189, 31, 254, 6, 189, 144, 95, 2, 189, 219, 14, 47, 190, 43, 90, 44, 62, 4, 153, 54, 190, 224, 78, 92, 61, 165, 157, 55, 189, 124, 223, 69, 61, 245, 147, 105, 189, 116, 255, 103, 59, 120, 210, 231, 189, 234, 106, 90, 62, 109, 111, 143, 189, 75, 195, 180, 189, 5, 214, 206, 61, 159, 43, 194, 61, 36, 198, 32, 189, 163, 98, 95, 190, 47, 53, 5, 61, 37, 123, 187, 61, 81, 214, 189, 189, 212, 76, 255, 61, 47, 75, 203, 190, 42, 17, 144, 190, 73, 177, 250, 189, 136, 32, 162, 189, 237, 165, 126, 190, 171, 129, 164, 60, 32, 53, 148, 62, 167, 94, 166, 190, 95, 166, 47, 190, 71, 88, 249, 61, 199, 171, 104, 62, 90, 128, 68, 62, 92, 36, 140, 185, 65, 48, 253, 189, 49, 72, 188, 189, 234, 115, 1, 62, 112, 100, 194, 188, 240, 91, 114, 189, 123, 93, 87, 62, 67, 96, 41, 190, 74, 241, 22, 62, 98, 62, 8, 189, 200, 22, 42, 61, 62, 45, 93, 190, 179, 36, 107, 190, 225, 14, 130, 190, 191, 117, 217, 190, 229, 82, 34, 62, 81, 139, 230, 60, 173, 234, 35, 62, 157, 197, 149, 61, 117, 22, 175, 189, 252, 104, 121, 62, 219, 82, 61, 61, 40, 93, 132, 62, 47, 136, 225, 189, 134, 221, 224, 189, 37, 189, 22, 189, 14, 144, 78, 189, 78, 177, 19, 190, 124, 201, 45, 62, 223, 185, 80, 189, 45, 155, 159, 60, 27, 244, 168, 189, 88, 200, 4, 189, 177, 131, 47, 190, 118, 70, 183, 59, 130, 8, 232, 188, 213, 37, 87, 62, 233, 218, 220, 61, 119, 46, 42, 62, 243, 129, 28, 61, 188, 145, 248, 61, 173, 52, 197, 189, 151, 121, 5, 190, 165, 47, 96, 189, 54, 220, 92, 189, 14, 216, 191, 61, 18, 204, 60, 189, 73, 90, 156, 188, 34, 184, 12, 62, 207, 111, 13, 62, 108, 248, 56, 62, 179, 13, 11, 62, 129, 146, 188, 61, 136, 182, 198, 61, 241, 158, 116, 189, 201, 204, 232, 189, 184, 117, 143, 62, 128, 75, 112, 61, 30, 252, 56, 190, 45, 7, 49, 62, 34, 252, 27, 189, 13, 120, 2, 190, 141, 1, 123, 189, 233, 83, 133, 61, 231, 63, 192, 61, 48, 245, 253, 188, 79, 254, 54, 189, 215, 102, 149, 60, 75, 216, 161, 61, 18, 195, 196, 61, 146, 199, 63, 58, 186, 181, 41, 62, 200, 151, 171, 189, 5, 161, 47, 62, 144, 150, 244, 189, 59, 139, 117, 62, 2, 221, 235, 61, 5, 96, 31, 62, 20, 202, 215, 61, 252, 75, 0, 190, 8, 165, 213, 189, 36, 15, 23, 190, 206, 140, 89, 190, 246, 198, 9, 62, 101, 164, 2, 188, 251, 2, 26, 190, 209, 118, 96, 189, 121, 98, 98, 188, 219, 149, 36, 62, 203, 103, 33, 62, 238, 52, 237, 189, 242, 39, 227, 189, 236, 32, 198, 188, 136, 90, 158, 61, 44, 96, 70, 61, 212, 159, 1, 62, 140, 159, 57, 62, 114, 181, 7, 190, 246, 244, 27, 190, 9, 219, 214, 61, 146, 158, 156, 60, 77, 185, 165, 60, 132, 214, 164, 61, 33, 171, 62, 62, 218, 200, 214, 60, 157, 119, 82, 189, 172, 59, 141, 59, 128, 55, 76, 61, 84, 210, 157, 189, 167, 109, 66, 61, 186, 206, 31, 62, 28, 172, 208, 189, 72, 106, 198, 61, 133, 179, 150, 61, 162, 34, 236, 61, 64, 205, 32, 61, 159, 201, 106, 190, 185, 116, 244, 189, 22, 112, 216, 60, 71, 193, 96, 59, 87, 131, 107, 188, 106, 167, 113, 189, 250, 29, 3, 61, 198, 192, 80, 190, 121, 3, 252, 189, 40, 134, 5, 62, 124, 197, 132, 60, 252, 75, 176, 61, 20, 222, 129, 60, 163, 144, 138, 188, 193, 26, 224, 59, 122, 211, 158, 60, 94, 97, 235, 189, 133, 71, 95, 61, 59, 95, 8, 190, 157, 82, 41, 62, 171, 144, 68, 189, 164, 170, 50, 190, 159, 165, 31, 190, 58, 79, 82, 188, 32, 165, 15, 62, 1, 123, 18, 189, 6, 194, 15, 61, 166, 194, 47, 61, 117, 140, 46, 189, 169, 80, 151, 189, 133, 109, 144, 61, 22, 61, 174, 61, 238, 251, 137, 190, 247, 72, 231, 189, 230, 230, 247, 190, 156, 206, 0, 62, 204, 244, 249, 189, 197, 211, 94, 190, 210, 217, 113, 190, 39, 228, 248, 189, 0, 22, 4, 62, 172, 48, 77, 190, 18, 151, 0, 190, 69, 16, 92, 189, 10, 175, 249, 188, 186, 226, 77, 62, 247, 195, 73, 61, 19, 49, 164, 60, 255, 50, 49, 190, 98, 194, 105, 190, 45, 146, 239, 189, 141, 159, 159, 61, 185, 161, 74, 190, 63, 221, 122, 62, 25, 116, 196, 187, 44, 56, 62, 62, 143, 24, 31, 190, 23, 13, 174, 60, 237, 9, 194, 62, 103, 18, 201, 61, 113, 236, 7, 190, 206, 220, 160, 190, 100, 9, 221, 188, 240, 29, 68, 62, 221, 247, 214, 189, 37, 201, 11, 62, 249, 163, 22, 61, 23, 253, 221, 61, 116, 81, 245, 189, 27, 162, 246, 61, 209, 177, 158, 60, 20, 129, 170, 189, 222, 213, 93, 60, 174, 214, 23, 190, 195, 51, 146, 61, 129, 20, 232, 61, 7, 72, 15, 190, 249, 152, 34, 189, 114, 231, 85, 189, 198, 231, 50, 190, 13, 9, 14, 190, 72, 128, 33, 62, 70, 30, 17, 61, 183, 190, 24, 190, 122, 255, 79, 190, 74, 0, 209, 61, 7, 250, 190, 61, 37, 211, 137, 189, 181, 143, 138, 61, 138, 172, 167, 61, 68, 225, 6, 190, 124, 32, 215, 189, 108, 197, 124, 188, 92, 175, 88, 188, 6, 38, 3, 190, 201, 250, 245, 61, 223, 151, 50, 190, 205, 100, 140, 60, 250, 104, 135, 190, 199, 85, 117, 61, 62, 230, 122, 62, 251, 190, 83, 190, 15, 116, 67, 61, 9, 216, 77, 62, 40, 116, 5, 190, 15, 114, 54, 190, 73, 177, 60, 190, 99, 198, 29, 189, 171, 171, 189, 61, 62, 72, 121, 62, 126, 65, 96, 190, 156, 183, 36, 62, 27, 45, 45, 189, 236, 151, 228, 189, 81, 167, 146, 61, 103, 36, 211, 60, 161, 88, 35, 190, 227, 250, 117, 61, 121, 46, 255, 189, 66, 160, 30, 62, 76, 47, 237, 61, 217, 89, 167, 61, 4, 193, 189, 61, 55, 122, 159, 61, 60, 19, 44, 62, 207, 200, 184, 61, 57, 45, 175, 61, 58, 16, 79, 61, 225, 208, 247, 61, 147, 127, 80, 61, 46, 15, 226, 61, 250, 190, 237, 59, 128, 132, 9, 189, 141, 191, 45, 190, 55, 106, 121, 61, 143, 64, 28, 60, 16, 245, 164, 189, 66, 20, 237, 60, 170, 65, 246, 189, 128, 52, 26, 62, 228, 32, 215, 61, 77, 180, 22, 190, 69, 159, 169, 189, 8, 185, 14, 190, 253, 47, 167, 61, 137, 46, 23, 188, 83, 83, 250, 61, 191, 224, 83, 59, 3, 240, 233, 189, 7, 202, 1, 190, 171, 103, 112, 59, 114, 122, 10, 60, 217, 67, 48, 62, 54, 137, 152, 189, 230, 237, 227, 189, 107, 107, 116, 189, 160, 249, 35, 190, 235, 182, 131, 188, 66, 147, 254, 189, 206, 234, 132, 61, 241, 225, 2, 62, 122, 220, 19, 62, 129, 205, 58, 190, 177, 67, 184, 189, 179, 110, 188, 189, 182, 225, 115, 62, 251, 246, 47, 62, 213, 110, 121, 189, 26, 17, 9, 62, 183, 233, 77, 62, 139, 5, 96, 62, 105, 189, 52, 62, 252, 210, 14, 62, 141, 30, 38, 189, 217, 174, 25, 189, 3, 16, 241, 189, 58, 69, 74, 62, 27, 27, 244, 189, 215, 242, 130, 62, 73, 64, 128, 190, 1, 204, 71, 189, 200, 162, 104, 190, 152, 31, 8, 190, 182, 28, 60, 190, 159, 223, 39, 190, 211, 23, 146, 190, 2, 192, 222, 189, 8, 163, 14, 62, 90, 234, 219, 61, 156, 97, 3, 189, 115, 181, 55, 59, 247, 176, 65, 62, 49, 66, 237, 61, 43, 137, 240, 61, 208, 178, 23, 189, 149, 165, 154, 188, 151, 10, 3, 60, 104, 138, 91, 190, 212, 86, 202, 189, 107, 61, 81, 61, 65, 50, 16, 190, 212, 37, 107, 187, 8, 79, 231, 60, 194, 173, 46, 190, 15, 57, 220, 60, 193, 41, 141, 189, 30, 225, 155, 61, 15, 23, 11, 62, 27, 70, 130, 190, 103, 12, 33, 62, 43, 152, 29, 190, 139, 200, 182, 189, 60, 139, 51, 190, 100, 114, 175, 61, 55, 252, 27, 62, 136, 70, 68, 62, 198, 237, 246, 189, 134, 121, 62, 62, 185, 243, 154, 62, 237, 68, 216, 185, 205, 157, 193, 189, 41, 13, 174, 61, 218, 208, 75, 61, 117, 7, 47, 62, 214, 173, 53, 189, 75, 106, 124, 61, 107, 71, 186, 188, 16, 115, 30, 62, 184, 120, 169, 61, 65, 237, 135, 189, 176, 86, 111, 190, 28, 151, 36, 61, 115, 210, 152, 189, 50, 144, 160, 189, 226, 159, 167, 189, 64, 82, 49, 189, 142, 79, 62, 61, 80, 162, 107, 62, 31, 40, 78, 190, 211, 64, 209, 61, 5, 104, 234, 189, 44, 63, 77, 190, 161, 109, 173, 189, 140, 58, 16, 62, 156, 163, 26, 61, 171, 160, 63, 62, 59, 27, 16, 62, 75, 89, 229, 188, 255, 55, 242, 189, 214, 42, 181, 61, 32, 200, 139, 62, 159, 201, 95, 190, 111, 222, 167, 189, 188, 241, 198, 188, 219, 123, 182, 189, 58, 162, 26, 62, 0, 197, 125, 190, 251, 65, 1, 62, 113, 161, 146, 61, 111, 0, 84, 61, 22, 188, 163, 62, 113, 71, 98, 190, 234, 154, 14, 190, 194, 193, 113, 62, 182, 76, 114, 61, 133, 10, 21, 61, 160, 134, 195, 61, 102, 246, 25, 190, 194, 242, 23, 62, 6, 253, 81, 62, 88, 233, 152, 190, 30, 11, 216, 61, 247, 77, 125, 189, 245, 43, 50, 61, 243, 153, 134, 190, 133, 247, 171, 189, 130, 157, 163, 60, 103, 126, 15, 62, 36, 191, 198, 59, 111, 98, 83, 62, 79, 60, 18, 62, 247, 167, 182, 189, 246, 62, 73, 62, 243, 22, 56, 190, 73, 50, 220, 61, 122, 211, 17, 188, 90, 154, 195, 189, 144, 236, 195, 185, 50, 111, 45, 190, 236, 6, 5, 62, 225, 225, 193, 188, 60, 96, 214, 60, 199, 236, 136, 190, 153, 11, 61, 61, 59, 255, 24, 62, 246, 233, 145, 190, 104, 17, 165, 189, 197, 50, 7, 190, 193, 0, 202, 61, 137, 160, 223, 189, 203, 76, 52, 62, 116, 23, 154, 189, 102, 50, 40, 62, 196, 65, 76, 190, 55, 225, 246, 189, 122, 42, 68, 62, 167, 46, 153, 61, 235, 116, 128, 190, 231, 159, 113, 190, 94, 108, 192, 190, 176, 171, 113, 189, 209, 28, 147, 190, 57, 44, 86, 190, 117, 135, 142, 190, 8, 208, 170, 190, 42, 201, 67, 62, 73, 237, 235, 60, 214, 5, 154, 61, 219, 253, 226, 188, 49, 176, 3, 61, 145, 195, 118, 189, 136, 207, 241, 189, 171, 183, 125, 62, 61, 202, 111, 187, 170, 93, 143, 189, 46, 75, 210, 60, 140, 121, 6, 190, 54, 162, 206, 61, 55, 228, 245, 188, 39, 102, 78, 188, 191, 96, 70, 190, 26, 78, 66, 189, 2, 206, 36, 62, 37, 42, 76, 61, 79, 239, 62, 187, 189, 138, 6, 62, 169, 31, 157, 189, 197, 147, 61, 189, 230, 243, 180, 60, 113, 140, 5, 188, 216, 233, 217, 61, 5, 188, 75, 61, 5, 243, 240, 189, 151, 14, 172, 188, 25, 185, 62, 62, 251, 33, 189, 189, 20, 229, 198, 188, 158, 110, 126, 59, 143, 250, 25, 61, 210, 233, 214, 61, 177, 113, 18, 61, 175, 71, 206, 189, 74, 118, 0, 190, 150, 117, 148, 61, 219, 193, 28, 190, 112, 216, 28, 61, 74, 66, 230, 61, 190, 91, 71, 190, 239, 155, 11, 189, 169, 67, 31, 62, 177, 33, 13, 190, 193, 73, 144, 61, 231, 35, 136, 61, 91, 19, 13, 62, 48, 239, 53, 190, 232, 82, 26, 62, 26, 24, 37, 61, 238, 25, 105, 189, 188, 173, 143, 60, 148, 193, 236, 189, 33, 233, 57, 190, 50, 195, 244, 61, 216, 98, 239, 61, 214, 227, 58, 190, 206, 230, 227, 61, 94, 249, 230, 189, 213, 41, 4, 190, 98, 158, 35, 190, 91, 84, 185, 61, 65, 103, 236, 189, 248, 45, 254, 189, 56, 206, 213, 60, 44, 19, 209, 189, 213, 234, 6, 62, 69, 54, 113, 60, 89, 142, 161, 189, 188, 75, 240, 61, 172, 140, 38, 62, 137, 230, 142, 190, 139, 98, 74, 189, 117, 178, 109, 62, 89, 108, 171, 190, 247, 17, 91, 61, 39, 60, 173, 62, 56, 62, 148, 62, 4, 156, 153, 189, 217, 155, 179, 60, 109, 245, 75, 188, 140, 49, 55, 62, 80, 66, 203, 61, 70, 72, 101, 62, 16, 205, 25, 59, 87, 3, 209, 61, 155, 30, 54, 61, 157, 105, 82, 187, 192, 146, 93, 190, 77, 71, 136, 62, 72, 186, 41, 190, 75, 229, 218, 188, 101, 3, 129, 189, 124, 227, 28, 190, 226, 114, 214, 188, 45, 74, 77, 190, 77, 238, 133, 59, 222, 105, 93, 190, 87, 37, 156, 189, 174, 166, 206, 187, 219, 42, 24, 190, 234, 35, 88, 62, 89, 136, 127, 61, 227, 7, 142, 61, 207, 32, 91, 60, 114, 132, 91, 61, 143, 112, 196, 187, 79, 106, 225, 61, 2, 19, 71, 189, 23, 214, 156, 189, 251, 93, 139, 61, 210, 239, 31, 190, 3, 60, 119, 62, 176, 170, 165, 189, 70, 156, 101, 189, 60, 240, 228, 189, 237, 150, 125, 61, 254, 120, 242, 57, 113, 218, 85, 189, 245, 239, 185, 61, 144, 234, 149, 61, 43, 72, 145, 188, 229, 255, 228, 188, 125, 195, 236, 61, 128, 75, 21, 62, 61, 48, 198, 61, 25, 195, 17, 189, 189, 98, 4, 62, 56, 27, 110, 190, 168, 100, 106, 61, 43, 63, 114, 61, 188, 55, 17, 190, 176, 40, 29, 188, 163, 131, 156, 61, 86, 152, 236, 61, 110, 54, 4, 190, 75, 99, 100, 189, 14, 83, 69, 62, 60, 195, 51, 190, 36, 161, 20, 190, 7, 198, 142, 62, 181, 168, 161, 62, 242, 89, 172, 61, 37, 218, 177, 61, 172, 137, 148, 190, 40, 191, 178, 61, 98, 116, 133, 189, 173, 248, 113, 62, 2, 47, 187, 189, 166, 50, 148, 61, 109, 177, 134, 190, 30, 19, 45, 62, 208, 153, 1, 62, 50, 194, 101, 189, 86, 115, 13, 62, 136, 1, 144, 189, 237, 106, 144, 189, 155, 47, 150, 190, 248, 244, 248, 188, 120, 131, 194, 189, 175, 206, 219, 61, 5, 204, 10, 62, 242, 47, 114, 61, 252, 112, 82, 62, 10, 175, 60, 62, 136, 32, 65, 189, 84, 19, 49, 62, 228, 40, 233, 61, 124, 2, 75, 61, 135, 102, 169, 60, 106, 37, 50, 188, 65, 46, 21, 190, 27, 200, 110, 190, 213, 206, 81, 190, 218, 28, 142, 59, 173, 55, 248, 61, 58, 133, 204, 61, 74, 69, 133, 189, 239, 137, 83, 61, 50, 89, 254, 189, 196, 145, 46, 190, 48, 104, 99, 189, 182, 228, 201, 60, 150, 235, 16, 190, 60, 216, 152, 189, 1, 125, 93, 190, 133, 134, 6, 190, 101, 236, 135, 61, 52, 240, 13, 62, 120, 25, 86, 190, 177, 183, 112, 189, 100, 44, 26, 62, 34, 191, 182, 189, 191, 244, 199, 61, 203, 122, 137, 60, 44, 246, 143, 188, 26, 211, 5, 190, 241, 185, 87, 190, 171, 5, 250, 60, 16, 87, 76, 190, 93, 6, 45, 61, 137, 155, 101, 61, 245, 59, 12, 190, 9, 223, 239, 189, 41, 13, 117, 62, 243, 150, 112, 62, 114, 195, 107, 189, 116, 214, 66, 61, 147, 138, 137, 190, 2, 49, 188, 61, 28, 200, 20, 62, 25, 246, 219, 61, 237, 193, 16, 190, 183, 202, 2, 61, 201, 83, 48, 190, 187, 208, 137, 190, 23, 12, 45, 190, 3, 76, 78, 62, 244, 172, 142, 190, 214, 134, 170, 190, 164, 141, 140, 189, 98, 16, 139, 190, 104, 168, 212, 61, 148, 86, 142, 61, 238, 138, 131, 62, 22, 88, 244, 187, 57, 190, 22, 62, 129, 145, 244, 60, 235, 92, 114, 190, 145, 238, 78, 61, 171, 205, 17, 61, 57, 45, 21, 190, 69, 101, 228, 60, 141, 181, 42, 62, 80, 206, 150, 190, 118, 60, 124, 61, 38, 211, 134, 62, 34, 56, 137, 61, 51, 216, 65, 62, 52, 82, 13, 189, 129, 219, 175, 60, 162, 213, 197, 60, 86, 48, 44, 190, 245, 154, 1, 62, 187, 165, 99, 61, 151, 118, 210, 61, 39, 41, 88, 190, 12, 43, 28, 190, 249, 37, 240, 189, 123, 97, 234, 61, 235, 254, 46, 187, 145, 188, 218, 61, 101, 172, 101, 190, 108, 254, 183, 190, 146, 227, 238, 61, 83, 28, 239, 189, 72, 55, 17, 62, 160, 96, 52, 61, 176, 254, 101, 189, 80, 171, 37, 62, 200, 168, 40, 189, 125, 230, 124, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 43, 128, 188, 126, 33, 136, 188, 172, 16, 125, 189, 38, 156, 16, 62, 202, 242, 237, 61, 73, 175, 213, 189, 88, 95, 184, 188, 77, 170, 26, 62, 121, 138, 84, 61, 239, 226, 178, 60, 73, 182, 201, 189, 72, 225, 224, 61, 232, 108, 98, 62, 41, 65, 233, 189, 43, 97, 80, 190, 168, 218, 98, 61, 184, 103, 162, 187, 114, 125, 36, 62, 237, 114, 160, 188, 117, 58, 142, 189, 138, 84, 46, 62, 158, 188, 107, 62, 178, 53, 233, 61, 38, 4, 130, 61, 240, 206, 150, 60, 153, 86, 86, 190, 82, 242, 43, 189, 34, 6, 241, 60, 160, 49, 92, 62, 137, 57, 165, 60, 163, 238, 73, 62, 56, 113, 188, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 245, 32, 190, 64, 9, 81, 62, 91, 61, 71, 60, 227, 138, 221, 61, 150, 138, 4, 190, 78, 223, 238, 189, 148, 19, 95, 62, 64, 150, 65, 62, 133, 253, 249, 61, 222, 206, 91, 61, 218, 164, 70, 190, 143, 85, 12, 190, 189, 156, 138, 62, 107, 50, 211, 61, 134, 142, 239, 189, 144, 59, 187, 62, 220, 23, 222, 189, 166, 134, 45, 62, 45, 100, 132, 189, 142, 209, 71, 190, 75, 167, 172, 61, 99, 120, 129, 62, 43, 45, 140, 62, 121, 76, 178, 190, 193, 168, 188, 189, 25, 108, 3, 62, 184, 119, 131, 190, 105, 236, 38, 62, 184, 210, 101, 190, 48, 91, 177, 189, 45, 49, 228, 190, 21, 112, 141, 190, 140, 35, 206, 61, 174, 91, 189, 189, 194, 144, 4, 190, 114, 27, 17, 190, 93, 149, 77, 190, 23, 123, 0, 190, 238, 155, 5, 62, 114, 83, 164, 188, 18, 47, 190, 61, 25, 137, 202, 59, 10, 6, 31, 60, 67, 5, 218, 61, 128, 209, 66, 60, 153, 180, 198, 61, 142, 197, 75, 62, 20, 123, 46, 189, 230, 171, 238, 59, 41, 237, 237, 189, 91, 58, 119, 189, 100, 78, 74, 62, 67, 155, 236, 188, 150, 22, 255, 189, 94, 175, 229, 189, 205, 121, 26, 61, 92, 68, 162, 61, 124, 183, 70, 189, 255, 133, 77, 190, 61, 144, 241, 61, 210, 187, 35, 190, 55, 182, 168, 60, 107, 200, 15, 190, 139, 56, 216, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {132, 225, 5, 189, 51, 217, 207, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {75, 19, 30, 63, 99, 21, 245, 191, 211, 39, 238, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {106, 22, 89, 64, 169, 157, 76, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0035/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}