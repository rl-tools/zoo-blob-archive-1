// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 37, 139, 62, 132, 77, 176, 190, 25, 195, 87, 60, 140, 76, 36, 62, 206, 208, 193, 62, 122, 130, 187, 190, 110, 200, 11, 63, 118, 131, 42, 63, 91, 94, 98, 62, 228, 57, 110, 190, 207, 156, 50, 63, 4, 174, 58, 191, 85, 217, 152, 190, 205, 248, 65, 63, 76, 173, 89, 190, 142, 82, 132, 62, 138, 126, 175, 190, 140, 45, 162, 187, 145, 123, 101, 63, 110, 131, 85, 60, 180, 120, 61, 61, 5, 110, 50, 189, 202, 22, 27, 63, 194, 61, 142, 190, 255, 129, 33, 63, 105, 251, 226, 61, 28, 65, 214, 62, 126, 151, 37, 190, 133, 38, 219, 190, 169, 77, 13, 191, 230, 171, 204, 189, 43, 30, 112, 191, 58, 138, 67, 190, 187, 11, 13, 63, 28, 79, 15, 63, 8, 22, 211, 62, 194, 192, 16, 63, 128, 240, 207, 189, 220, 149, 184, 190, 232, 183, 131, 63, 32, 255, 60, 63, 138, 124, 15, 63, 174, 93, 145, 190, 247, 160, 211, 190, 54, 139, 94, 191, 25, 224, 92, 190, 97, 220, 100, 62, 110, 191, 186, 190, 168, 81, 86, 62, 178, 183, 185, 61, 181, 231, 233, 190, 63, 251, 56, 190, 30, 186, 53, 191, 30, 254, 218, 62, 242, 167, 191, 62, 56, 44, 58, 191, 17, 236, 0, 63, 56, 118, 10, 63, 227, 182, 203, 62, 56, 139, 174, 61, 104, 212, 15, 190, 165, 126, 240, 189, 208, 83, 45, 63, 18, 46, 217, 62, 108, 238, 250, 190, 34, 24, 5, 191, 202, 204, 54, 63, 47, 240, 235, 190, 47, 125, 38, 191, 212, 198, 112, 60, 81, 67, 11, 191, 201, 224, 153, 61, 88, 142, 174, 190, 20, 241, 88, 63, 177, 61, 17, 61, 94, 66, 226, 62, 210, 96, 53, 191, 60, 92, 231, 189, 214, 29, 99, 61, 199, 77, 31, 63, 163, 24, 42, 191, 176, 116, 42, 63, 27, 156, 232, 189, 34, 131, 11, 63, 6, 196, 21, 191, 152, 180, 99, 190, 243, 95, 189, 189, 8, 141, 172, 62, 133, 148, 60, 63, 58, 210, 200, 188, 176, 37, 92, 190, 227, 214, 154, 190, 171, 168, 115, 63, 158, 176, 79, 189, 35, 46, 215, 62, 183, 242, 33, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 183, 19, 191, 103, 44, 174, 60, 33, 129, 156, 190, 52, 155, 104, 62, 224, 111, 101, 190, 52, 21, 11, 191, 160, 144, 217, 61, 51, 94, 1, 63, 213, 229, 102, 190, 180, 15, 32, 62, 13, 130, 41, 63, 120, 141, 71, 190, 33, 244, 215, 62, 82, 103, 134, 61, 111, 118, 62, 189, 190, 28, 71, 190, 218, 0, 110, 61, 162, 117, 72, 190, 160, 197, 22, 63, 141, 66, 19, 63, 128, 100, 41, 62, 184, 204, 138, 190, 129, 97, 92, 62, 216, 173, 112, 62, 167, 209, 35, 63, 209, 211, 157, 190, 30, 220, 131, 61, 2, 219, 204, 190, 222, 117, 45, 63, 186, 6, 181, 62, 222, 194, 116, 61, 122, 194, 29, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 158, 198, 188, 183, 252, 245, 61, 51, 24, 44, 188, 1, 194, 156, 189, 101, 16, 175, 188, 200, 243, 12, 62, 25, 6, 29, 62, 18, 50, 222, 61, 62, 190, 116, 189, 103, 53, 44, 190, 8, 133, 95, 189, 182, 233, 181, 189, 142, 141, 131, 189, 91, 166, 42, 190, 67, 219, 196, 189, 100, 145, 140, 189, 77, 192, 53, 61, 42, 40, 2, 190, 163, 31, 118, 189, 60, 168, 45, 190, 104, 85, 235, 60, 154, 116, 30, 61, 25, 237, 247, 59, 108, 56, 187, 187, 88, 138, 13, 190, 37, 78, 130, 188, 195, 16, 164, 60, 99, 243, 4, 61, 131, 152, 125, 189, 159, 154, 157, 189, 154, 252, 26, 62, 47, 5, 193, 61, 251, 121, 47, 190, 233, 224, 85, 190, 248, 104, 204, 190, 136, 17, 90, 190, 42, 128, 0, 62, 103, 50, 12, 190, 13, 71, 159, 190, 229, 191, 178, 61, 112, 78, 146, 59, 101, 186, 213, 189, 191, 181, 235, 189, 40, 238, 49, 61, 94, 44, 129, 59, 191, 223, 92, 190, 137, 173, 12, 191, 111, 5, 139, 190, 104, 115, 9, 190, 66, 171, 194, 189, 168, 170, 121, 62, 135, 95, 34, 188, 36, 37, 14, 61, 226, 224, 166, 59, 149, 216, 243, 60, 155, 209, 66, 62, 49, 251, 232, 61, 245, 102, 159, 61, 184, 233, 16, 191, 83, 24, 182, 61, 168, 119, 127, 62, 252, 22, 118, 189, 5, 206, 214, 61, 162, 19, 200, 61, 149, 237, 75, 61, 183, 138, 87, 190, 218, 157, 135, 61, 157, 53, 217, 61, 110, 200, 130, 189, 59, 159, 219, 61, 227, 224, 180, 189, 117, 53, 34, 61, 211, 106, 180, 189, 19, 21, 41, 61, 230, 177, 254, 188, 229, 193, 189, 189, 116, 177, 214, 188, 7, 43, 50, 61, 41, 185, 236, 61, 138, 57, 144, 61, 97, 158, 50, 189, 30, 6, 163, 61, 15, 201, 7, 190, 23, 30, 206, 189, 207, 4, 35, 61, 219, 113, 10, 61, 154, 183, 117, 189, 150, 145, 40, 61, 165, 6, 195, 60, 96, 238, 237, 60, 133, 191, 237, 61, 156, 42, 182, 60, 156, 29, 156, 188, 40, 70, 198, 60, 57, 196, 238, 188, 229, 170, 9, 190, 91, 212, 228, 189, 230, 231, 140, 62, 3, 96, 151, 190, 160, 184, 42, 190, 33, 44, 127, 61, 153, 7, 49, 190, 28, 27, 242, 60, 197, 74, 174, 61, 54, 0, 167, 60, 94, 82, 253, 189, 75, 172, 221, 61, 200, 204, 132, 189, 121, 2, 145, 62, 9, 125, 130, 61, 93, 136, 174, 61, 16, 185, 145, 190, 189, 83, 112, 60, 107, 201, 91, 189, 40, 51, 143, 62, 175, 117, 198, 61, 169, 21, 203, 61, 8, 208, 209, 189, 101, 60, 21, 61, 36, 116, 134, 60, 147, 191, 239, 61, 4, 107, 241, 61, 14, 168, 12, 189, 108, 181, 133, 190, 249, 245, 51, 62, 153, 167, 56, 61, 76, 33, 91, 189, 93, 56, 34, 189, 71, 120, 241, 61, 239, 68, 44, 190, 101, 181, 91, 62, 98, 93, 155, 61, 103, 44, 113, 190, 199, 219, 143, 61, 92, 205, 168, 62, 145, 193, 139, 62, 87, 197, 94, 62, 255, 143, 211, 58, 101, 112, 178, 189, 78, 245, 252, 189, 224, 76, 57, 62, 29, 221, 104, 62, 143, 210, 213, 188, 141, 11, 71, 62, 181, 249, 51, 190, 30, 209, 41, 190, 45, 46, 34, 190, 21, 188, 139, 62, 130, 156, 13, 190, 214, 9, 54, 187, 234, 195, 62, 60, 126, 136, 22, 61, 74, 197, 30, 189, 231, 218, 3, 189, 30, 165, 159, 60, 144, 146, 135, 61, 165, 164, 183, 189, 187, 25, 51, 62, 244, 120, 77, 189, 61, 154, 176, 61, 138, 244, 2, 189, 154, 222, 93, 60, 11, 191, 39, 190, 101, 11, 105, 190, 119, 89, 211, 190, 45, 199, 33, 61, 209, 73, 221, 190, 119, 171, 227, 190, 64, 15, 222, 190, 153, 64, 117, 61, 234, 30, 97, 62, 151, 124, 154, 190, 245, 38, 150, 189, 60, 209, 163, 190, 127, 75, 1, 190, 10, 246, 61, 190, 243, 117, 232, 189, 180, 3, 207, 61, 117, 132, 121, 62, 142, 193, 59, 190, 76, 117, 38, 62, 200, 59, 106, 190, 203, 176, 207, 189, 122, 12, 178, 62, 182, 136, 51, 61, 7, 142, 232, 61, 9, 20, 109, 190, 88, 86, 215, 190, 201, 231, 168, 62, 228, 219, 150, 190, 136, 221, 49, 62, 73, 136, 147, 189, 222, 73, 237, 189, 67, 94, 192, 189, 147, 150, 99, 190, 199, 128, 160, 190, 37, 106, 117, 189, 150, 106, 254, 189, 26, 193, 86, 189, 46, 107, 29, 61, 110, 11, 150, 61, 108, 90, 16, 191, 199, 48, 142, 62, 224, 54, 55, 190, 236, 75, 227, 190, 132, 34, 100, 190, 168, 117, 161, 191, 255, 64, 151, 190, 221, 103, 124, 190, 226, 220, 87, 61, 63, 221, 236, 189, 99, 146, 223, 60, 28, 188, 90, 62, 28, 16, 201, 189, 4, 132, 147, 190, 8, 153, 98, 62, 110, 252, 130, 62, 94, 28, 7, 61, 196, 71, 106, 191, 132, 78, 156, 189, 235, 210, 189, 62, 51, 46, 193, 189, 59, 251, 32, 189, 180, 15, 59, 62, 17, 78, 255, 61, 125, 248, 110, 62, 131, 189, 188, 189, 210, 182, 85, 190, 88, 117, 68, 62, 80, 160, 37, 190, 84, 78, 139, 189, 181, 179, 148, 61, 109, 83, 15, 61, 41, 165, 180, 189, 159, 200, 83, 62, 138, 172, 17, 190, 62, 70, 89, 61, 232, 133, 140, 188, 249, 4, 67, 61, 71, 215, 56, 190, 101, 149, 8, 62, 34, 204, 157, 59, 28, 144, 128, 62, 64, 102, 53, 190, 76, 77, 245, 61, 141, 121, 139, 189, 6, 210, 154, 188, 168, 82, 126, 188, 88, 20, 34, 190, 53, 227, 198, 61, 240, 188, 184, 60, 172, 21, 212, 60, 110, 253, 34, 62, 40, 135, 70, 189, 200, 22, 215, 189, 125, 246, 201, 61, 48, 187, 196, 189, 254, 56, 27, 59, 17, 164, 83, 190, 100, 151, 15, 190, 140, 50, 115, 61, 213, 9, 42, 190, 156, 89, 207, 186, 220, 96, 209, 61, 161, 230, 183, 189, 88, 196, 193, 186, 132, 25, 249, 60, 180, 209, 43, 190, 118, 121, 217, 189, 42, 252, 62, 190, 158, 6, 36, 190, 244, 94, 223, 189, 235, 154, 209, 58, 181, 190, 5, 190, 249, 74, 211, 61, 147, 72, 139, 61, 32, 64, 95, 62, 65, 20, 174, 62, 139, 238, 152, 62, 120, 189, 229, 61, 164, 196, 238, 61, 42, 86, 77, 62, 203, 221, 182, 189, 219, 182, 227, 59, 152, 79, 146, 188, 126, 176, 43, 189, 14, 177, 173, 61, 25, 155, 33, 190, 173, 54, 149, 189, 24, 29, 53, 189, 42, 236, 177, 190, 53, 64, 200, 58, 21, 185, 189, 189, 106, 227, 24, 62, 171, 6, 73, 62, 124, 207, 186, 189, 247, 86, 23, 61, 73, 38, 64, 190, 117, 213, 89, 62, 165, 10, 116, 190, 95, 104, 0, 62, 14, 24, 94, 61, 107, 109, 46, 187, 229, 16, 22, 190, 132, 182, 149, 60, 41, 92, 173, 60, 71, 47, 139, 62, 196, 105, 146, 61, 0, 155, 70, 190, 215, 197, 10, 62, 43, 56, 44, 62, 80, 192, 250, 60, 47, 58, 20, 191, 107, 255, 140, 62, 113, 10, 6, 61, 234, 184, 213, 189, 144, 55, 101, 61, 98, 158, 187, 190, 132, 41, 199, 190, 116, 161, 58, 190, 136, 32, 162, 189, 176, 187, 134, 190, 91, 114, 56, 62, 99, 6, 179, 62, 75, 46, 212, 190, 95, 166, 47, 190, 34, 240, 61, 62, 184, 239, 98, 62, 160, 104, 167, 62, 49, 83, 162, 61, 158, 81, 107, 189, 185, 63, 145, 60, 139, 92, 236, 61, 207, 10, 177, 61, 23, 15, 28, 61, 124, 114, 143, 62, 171, 182, 84, 190, 221, 15, 80, 62, 148, 32, 146, 189, 242, 133, 134, 61, 26, 0, 163, 190, 68, 249, 146, 190, 138, 66, 152, 190, 250, 99, 170, 190, 171, 18, 110, 61, 74, 187, 238, 190, 189, 105, 103, 62, 130, 203, 89, 62, 12, 26, 24, 190, 252, 25, 90, 62, 177, 30, 170, 189, 106, 127, 77, 62, 47, 136, 225, 189, 36, 5, 197, 189, 240, 252, 141, 61, 37, 153, 94, 187, 51, 180, 51, 190, 124, 201, 45, 62, 80, 235, 248, 188, 173, 182, 91, 61, 140, 121, 49, 189, 56, 111, 184, 60, 182, 124, 247, 189, 67, 218, 17, 61, 222, 130, 54, 189, 238, 92, 122, 62, 52, 39, 42, 62, 75, 140, 90, 62, 208, 71, 113, 186, 109, 16, 213, 61, 49, 151, 25, 190, 231, 241, 3, 190, 40, 90, 23, 190, 136, 130, 190, 189, 189, 42, 100, 61, 40, 253, 4, 188, 145, 163, 114, 189, 115, 15, 133, 189, 108, 36, 61, 62, 95, 214, 93, 62, 179, 169, 2, 62, 91, 51, 153, 61, 147, 134, 124, 188, 7, 83, 159, 189, 201, 204, 232, 189, 6, 41, 139, 62, 155, 185, 109, 190, 241, 186, 135, 190, 144, 126, 236, 61, 34, 252, 27, 189, 231, 106, 145, 189, 226, 145, 168, 189, 136, 19, 23, 189, 66, 94, 156, 59, 174, 210, 175, 189, 173, 2, 27, 190, 197, 75, 15, 61, 203, 36, 188, 188, 252, 38, 49, 189, 71, 11, 27, 190, 16, 246, 88, 62, 253, 153, 38, 190, 149, 102, 49, 62, 51, 171, 199, 189, 147, 174, 170, 62, 237, 219, 83, 62, 162, 67, 107, 62, 149, 240, 92, 61, 222, 234, 129, 189, 191, 68, 65, 62, 33, 163, 140, 190, 91, 162, 154, 190, 254, 215, 31, 62, 175, 254, 184, 60, 97, 168, 169, 189, 151, 249, 77, 188, 121, 98, 98, 188, 165, 117, 201, 61, 144, 179, 146, 60, 226, 58, 58, 190, 214, 152, 135, 190, 236, 32, 198, 188, 93, 141, 86, 62, 214, 190, 205, 188, 158, 103, 208, 61, 60, 239, 40, 62, 246, 94, 150, 189, 22, 97, 103, 190, 47, 25, 242, 61, 158, 152, 136, 188, 194, 178, 229, 188, 246, 22, 94, 188, 19, 63, 42, 62, 225, 75, 202, 61, 55, 94, 211, 185, 76, 48, 87, 60, 211, 215, 109, 61, 59, 71, 75, 189, 8, 195, 155, 61, 22, 22, 143, 62, 121, 102, 152, 190, 63, 46, 184, 62, 226, 16, 107, 59, 97, 26, 216, 61, 5, 89, 44, 60, 45, 185, 144, 190, 53, 94, 171, 189, 33, 67, 138, 189, 71, 193, 96, 59, 55, 28, 180, 59, 13, 111, 213, 189, 151, 31, 220, 187, 102, 162, 150, 190, 121, 3, 252, 189, 143, 36, 199, 62, 206, 59, 229, 188, 193, 206, 217, 61, 205, 178, 171, 59, 178, 24, 112, 58, 91, 67, 57, 189, 222, 188, 165, 61, 189, 171, 121, 188, 104, 195, 200, 60, 182, 75, 129, 190, 10, 154, 67, 62, 42, 89, 197, 189, 84, 137, 118, 189, 186, 133, 18, 61, 109, 166, 231, 187, 75, 51, 61, 62, 202, 50, 151, 60, 168, 155, 187, 61, 37, 179, 249, 189, 60, 199, 131, 62, 231, 39, 235, 189, 227, 34, 157, 61, 233, 109, 11, 61, 200, 167, 140, 190, 88, 32, 217, 189, 23, 75, 15, 191, 156, 206, 0, 62, 171, 54, 2, 190, 156, 144, 244, 190, 190, 28, 199, 190, 229, 48, 105, 187, 0, 22, 4, 62, 124, 3, 0, 190, 107, 237, 164, 188, 253, 198, 19, 190, 183, 51, 137, 190, 130, 78, 21, 62, 12, 216, 154, 189, 131, 81, 133, 61, 164, 72, 138, 190, 242, 124, 66, 191, 171, 146, 233, 190, 148, 83, 18, 62, 158, 28, 145, 190, 50, 98, 124, 62, 48, 20, 182, 60, 128, 85, 75, 62, 133, 52, 230, 188, 105, 249, 223, 61, 228, 82, 188, 62, 77, 89, 64, 62, 207, 199, 39, 59, 133, 84, 62, 191, 132, 193, 237, 189, 125, 188, 144, 62, 44, 112, 26, 189, 227, 113, 5, 62, 134, 33, 25, 62, 23, 253, 221, 61, 116, 81, 245, 189, 27, 162, 246, 61, 209, 177, 158, 60, 20, 129, 170, 189, 222, 213, 93, 60, 174, 214, 23, 190, 195, 51, 146, 61, 129, 20, 232, 61, 7, 72, 15, 190, 249, 152, 34, 189, 114, 231, 85, 189, 198, 231, 50, 190, 13, 9, 14, 190, 72, 128, 33, 62, 70, 30, 17, 61, 183, 190, 24, 190, 122, 255, 79, 190, 74, 0, 209, 61, 7, 250, 190, 61, 37, 211, 137, 189, 181, 143, 138, 61, 138, 172, 167, 61, 68, 225, 6, 190, 124, 32, 215, 189, 108, 197, 124, 188, 92, 175, 88, 188, 6, 38, 3, 190, 201, 250, 245, 61, 223, 151, 50, 190, 205, 100, 140, 60, 250, 104, 135, 190, 199, 85, 117, 61, 75, 242, 96, 62, 69, 232, 195, 190, 134, 230, 77, 60, 213, 108, 83, 62, 40, 116, 5, 190, 82, 191, 116, 189, 224, 100, 62, 190, 174, 165, 183, 189, 94, 168, 121, 61, 77, 67, 108, 62, 214, 31, 146, 190, 37, 5, 74, 62, 159, 152, 178, 189, 3, 66, 48, 190, 108, 238, 139, 60, 100, 44, 76, 61, 124, 178, 86, 190, 142, 182, 147, 61, 175, 201, 213, 189, 233, 100, 30, 62, 50, 18, 2, 62, 174, 185, 249, 61, 80, 87, 125, 61, 125, 127, 138, 61, 147, 1, 175, 62, 178, 235, 252, 60, 78, 202, 227, 60, 68, 147, 130, 61, 93, 32, 16, 62, 96, 150, 111, 61, 156, 175, 5, 62, 250, 190, 237, 59, 125, 77, 48, 189, 141, 191, 45, 190, 77, 41, 17, 61, 24, 168, 72, 59, 16, 245, 164, 189, 66, 20, 237, 60, 190, 11, 8, 190, 128, 52, 26, 62, 146, 159, 180, 61, 72, 194, 31, 190, 69, 159, 169, 189, 191, 214, 25, 190, 253, 47, 167, 61, 125, 54, 205, 188, 99, 71, 232, 61, 245, 221, 25, 188, 3, 240, 233, 189, 7, 202, 1, 190, 171, 103, 112, 59, 114, 122, 10, 60, 171, 132, 34, 62, 156, 132, 189, 189, 230, 237, 227, 189, 59, 35, 119, 189, 160, 249, 35, 190, 93, 3, 10, 189, 66, 147, 254, 189, 142, 230, 104, 61, 23, 8, 2, 62, 122, 220, 19, 62, 134, 97, 63, 190, 177, 67, 184, 189, 204, 172, 240, 188, 200, 37, 184, 62, 192, 18, 121, 62, 175, 33, 0, 190, 26, 17, 9, 62, 51, 207, 201, 62, 138, 208, 117, 62, 123, 80, 126, 62, 8, 248, 73, 62, 71, 150, 100, 189, 30, 170, 30, 61, 206, 9, 137, 189, 93, 114, 150, 62, 214, 241, 44, 189, 112, 151, 165, 62, 34, 113, 128, 190, 139, 110, 103, 189, 173, 17, 160, 190, 147, 27, 7, 189, 102, 9, 210, 190, 233, 2, 85, 190, 218, 3, 146, 190, 208, 146, 231, 189, 31, 61, 98, 61, 68, 195, 144, 190, 50, 133, 180, 61, 242, 114, 102, 61, 201, 157, 178, 61, 9, 45, 48, 62, 217, 32, 42, 190, 58, 155, 147, 189, 149, 165, 154, 188, 248, 36, 46, 189, 246, 8, 224, 190, 91, 99, 44, 190, 140, 77, 44, 61, 65, 50, 16, 190, 75, 138, 162, 61, 20, 121, 56, 188, 85, 88, 109, 190, 72, 94, 250, 188, 152, 46, 229, 189, 159, 202, 107, 60, 84, 218, 24, 62, 155, 208, 156, 190, 224, 110, 140, 61, 16, 240, 115, 190, 122, 112, 159, 189, 117, 74, 114, 190, 135, 209, 202, 61, 26, 133, 42, 62, 254, 207, 105, 62, 11, 224, 226, 189, 25, 250, 93, 62, 19, 37, 115, 62, 114, 216, 251, 59, 56, 15, 209, 61, 196, 172, 119, 188, 171, 149, 101, 188, 80, 220, 47, 62, 62, 178, 12, 189, 190, 87, 226, 61, 73, 105, 90, 188, 16, 115, 30, 62, 47, 121, 72, 62, 40, 219, 181, 190, 29, 136, 149, 190, 91, 69, 62, 62, 115, 210, 152, 189, 119, 148, 120, 61, 32, 3, 5, 189, 85, 188, 240, 189, 72, 63, 134, 189, 161, 14, 52, 62, 92, 56, 164, 190, 249, 185, 54, 62, 85, 144, 58, 190, 108, 45, 213, 190, 145, 62, 142, 190, 166, 246, 114, 62, 106, 94, 198, 189, 249, 38, 32, 62, 46, 211, 137, 62, 225, 167, 245, 188, 92, 197, 66, 189, 153, 25, 67, 62, 248, 155, 69, 62, 113, 198, 45, 190, 175, 128, 176, 61, 233, 251, 9, 190, 126, 121, 49, 190, 169, 223, 209, 61, 214, 22, 17, 189, 114, 93, 189, 61, 75, 49, 18, 62, 111, 0, 84, 61, 109, 105, 170, 62, 83, 75, 224, 190, 157, 242, 94, 190, 211, 79, 84, 62, 182, 76, 114, 61, 223, 57, 218, 61, 145, 167, 169, 61, 211, 20, 86, 190, 203, 85, 152, 61, 229, 148, 27, 62, 36, 64, 174, 190, 8, 13, 20, 62, 215, 49, 168, 189, 75, 199, 140, 189, 229, 178, 201, 190, 176, 100, 140, 188, 170, 255, 113, 189, 168, 159, 16, 62, 46, 86, 201, 61, 104, 73, 155, 62, 238, 116, 119, 62, 42, 247, 140, 58, 141, 84, 1, 62, 201, 225, 213, 189, 80, 179, 183, 62, 14, 87, 245, 189, 229, 218, 39, 190, 158, 211, 126, 188, 216, 249, 58, 189, 193, 21, 60, 62, 71, 231, 221, 60, 60, 96, 214, 60, 179, 172, 245, 190, 237, 242, 167, 60, 136, 49, 42, 62, 37, 203, 46, 191, 104, 17, 165, 189, 49, 150, 51, 190, 211, 238, 165, 61, 250, 198, 243, 189, 47, 147, 165, 62, 254, 27, 50, 62, 88, 229, 39, 62, 181, 76, 168, 190, 40, 173, 234, 189, 234, 241, 164, 62, 4, 145, 176, 61, 3, 188, 195, 190, 220, 193, 110, 185, 39, 134, 19, 191, 189, 175, 187, 190, 151, 107, 22, 191, 151, 217, 85, 190, 231, 202, 174, 190, 34, 213, 170, 189, 155, 215, 234, 61, 215, 27, 139, 190, 101, 96, 23, 61, 9, 94, 206, 188, 225, 237, 61, 62, 75, 244, 197, 190, 187, 42, 121, 191, 59, 174, 94, 62, 61, 202, 111, 187, 150, 21, 181, 188, 51, 98, 132, 61, 9, 171, 59, 190, 74, 33, 10, 189, 55, 228, 245, 188, 203, 115, 15, 189, 206, 17, 80, 190, 186, 17, 84, 189, 214, 242, 19, 62, 226, 63, 248, 61, 156, 139, 232, 188, 10, 32, 16, 62, 44, 19, 228, 189, 131, 0, 168, 189, 48, 0, 9, 190, 156, 139, 25, 59, 63, 144, 49, 62, 125, 186, 50, 62, 144, 177, 248, 189, 250, 114, 177, 61, 74, 63, 102, 62, 49, 44, 167, 189, 214, 13, 205, 61, 185, 93, 86, 61, 217, 231, 132, 62, 136, 157, 33, 61, 29, 148, 57, 61, 69, 47, 152, 188, 47, 25, 128, 190, 22, 218, 61, 62, 72, 170, 9, 190, 112, 216, 28, 61, 229, 0, 160, 61, 235, 159, 31, 62, 187, 117, 24, 61, 234, 42, 127, 62, 177, 33, 13, 190, 107, 24, 248, 61, 59, 184, 170, 61, 189, 108, 215, 62, 2, 100, 31, 190, 211, 66, 252, 59, 237, 83, 164, 62, 143, 103, 55, 190, 215, 99, 78, 62, 83, 237, 220, 188, 8, 8, 145, 189, 49, 229, 72, 188, 80, 163, 88, 62, 190, 139, 103, 190, 1, 94, 200, 61, 22, 247, 214, 190, 17, 249, 191, 190, 71, 13, 243, 190, 117, 6, 169, 190, 21, 101, 215, 189, 193, 21, 60, 190, 10, 17, 253, 61, 198, 104, 186, 61, 164, 191, 44, 61, 117, 123, 50, 61, 52, 187, 4, 190, 183, 176, 202, 61, 172, 140, 38, 62, 131, 162, 183, 190, 9, 135, 245, 60, 24, 229, 111, 62, 66, 43, 244, 190, 247, 17, 91, 61, 64, 162, 204, 62, 117, 224, 142, 62, 200, 69, 67, 61, 14, 161, 51, 61, 91, 208, 73, 61, 126, 148, 131, 62, 152, 65, 73, 61, 241, 159, 158, 62, 123, 64, 4, 61, 204, 171, 4, 62, 175, 52, 105, 189, 210, 197, 209, 60, 24, 44, 103, 190, 223, 234, 150, 62, 144, 155, 147, 190, 52, 188, 30, 190, 149, 140, 21, 190, 31, 84, 15, 189, 140, 81, 108, 189, 200, 122, 39, 191, 27, 165, 170, 187, 214, 216, 181, 189, 221, 152, 92, 189, 134, 162, 243, 188, 132, 19, 197, 190, 44, 92, 85, 62, 89, 136, 127, 61, 158, 82, 104, 62, 5, 15, 66, 190, 121, 28, 83, 187, 30, 139, 42, 61, 79, 106, 225, 61, 124, 165, 83, 189, 91, 8, 133, 189, 88, 42, 199, 60, 122, 70, 127, 190, 255, 13, 13, 62, 209, 187, 21, 190, 2, 191, 195, 188, 177, 120, 61, 190, 218, 243, 170, 189, 82, 108, 247, 189, 197, 212, 178, 61, 28, 10, 174, 61, 38, 70, 155, 61, 109, 48, 129, 60, 48, 39, 163, 61, 69, 63, 154, 62, 107, 74, 136, 62, 234, 8, 146, 60, 74, 12, 204, 60, 88, 10, 239, 62, 137, 158, 165, 190, 250, 128, 15, 61, 88, 35, 47, 61, 126, 254, 139, 189, 40, 205, 149, 61, 110, 70, 241, 61, 86, 152, 236, 61, 127, 194, 52, 190, 3, 124, 47, 59, 34, 24, 86, 62, 174, 164, 161, 190, 36, 161, 20, 190, 16, 1, 138, 62, 177, 64, 157, 62, 204, 147, 201, 61, 143, 205, 20, 62, 178, 123, 31, 190, 240, 229, 207, 61, 73, 44, 141, 189, 67, 139, 131, 62, 174, 50, 207, 188, 72, 187, 200, 61, 12, 103, 159, 190, 147, 213, 44, 62, 250, 126, 251, 61, 75, 10, 90, 189, 78, 198, 202, 61, 226, 105, 19, 190, 125, 136, 202, 189, 218, 133, 50, 190, 107, 210, 69, 189, 120, 91, 1, 191, 173, 150, 244, 61, 158, 254, 19, 62, 62, 159, 235, 61, 19, 47, 57, 62, 98, 90, 252, 61, 31, 71, 53, 189, 84, 19, 49, 62, 235, 248, 29, 62, 36, 250, 218, 60, 244, 239, 178, 188, 24, 15, 191, 189, 65, 46, 21, 190, 55, 180, 94, 188, 159, 151, 140, 190, 134, 228, 142, 61, 101, 205, 183, 61, 49, 231, 162, 61, 186, 207, 170, 189, 137, 2, 218, 61, 229, 55, 161, 188, 243, 250, 87, 190, 55, 191, 27, 190, 160, 81, 122, 61, 251, 193, 171, 190, 94, 83, 47, 188, 166, 195, 190, 189, 183, 5, 8, 190, 156, 175, 254, 61, 27, 61, 67, 62, 206, 67, 86, 190, 241, 179, 51, 190, 169, 201, 228, 62, 219, 200, 4, 190, 101, 234, 35, 62, 109, 2, 197, 189, 112, 156, 26, 190, 65, 32, 63, 190, 41, 238, 184, 190, 171, 5, 250, 60, 223, 47, 111, 190, 214, 135, 21, 62, 60, 178, 221, 61, 33, 44, 124, 190, 9, 223, 239, 189, 243, 234, 97, 62, 137, 235, 119, 62, 155, 214, 93, 61, 45, 208, 11, 62, 38, 19, 54, 190, 98, 220, 52, 62, 189, 9, 247, 61, 108, 192, 59, 62, 186, 120, 6, 189, 45, 159, 209, 61, 228, 90, 95, 190, 250, 71, 119, 190, 116, 235, 156, 190, 131, 136, 63, 62, 221, 131, 5, 191, 198, 157, 203, 190, 67, 49, 218, 189, 55, 2, 61, 190, 234, 95, 43, 61, 146, 216, 210, 190, 58, 192, 155, 62, 17, 45, 252, 61, 120, 1, 44, 62, 113, 113, 79, 188, 123, 106, 46, 191, 221, 125, 201, 60, 171, 205, 17, 61, 19, 224, 29, 190, 61, 45, 62, 62, 183, 24, 102, 62, 104, 162, 185, 190, 118, 60, 124, 61, 52, 161, 156, 62, 44, 147, 153, 61, 54, 132, 148, 62, 5, 185, 186, 60, 34, 191, 37, 61, 157, 180, 238, 61, 230, 12, 68, 190, 142, 139, 87, 62, 83, 43, 3, 62, 223, 214, 38, 62, 73, 51, 129, 190, 103, 87, 243, 189, 221, 100, 53, 190, 101, 240, 249, 61, 217, 124, 212, 189, 232, 178, 67, 61, 84, 92, 139, 190, 187, 245, 167, 190, 172, 233, 34, 61, 34, 42, 22, 191, 125, 216, 82, 62, 194, 153, 24, 62, 81, 4, 240, 189, 6, 153, 8, 62, 164, 135, 35, 190, 176, 236, 26, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 107, 18, 189, 128, 205, 251, 60, 250, 198, 62, 189, 247, 22, 73, 62, 221, 168, 244, 61, 214, 254, 109, 61, 119, 101, 182, 61, 146, 228, 18, 62, 245, 4, 206, 61, 163, 80, 249, 60, 84, 218, 2, 190, 148, 127, 214, 61, 157, 159, 125, 62, 82, 9, 9, 190, 23, 65, 70, 190, 181, 164, 23, 62, 184, 103, 162, 187, 179, 107, 60, 62, 178, 146, 197, 188, 64, 145, 210, 189, 100, 229, 48, 62, 5, 187, 128, 62, 239, 63, 5, 62, 206, 224, 3, 62, 122, 36, 193, 61, 72, 80, 149, 190, 117, 17, 221, 187, 227, 171, 19, 61, 230, 158, 129, 62, 233, 94, 222, 188, 143, 80, 74, 62, 244, 110, 80, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 8, 8, 190, 191, 12, 204, 62, 241, 190, 7, 61, 99, 120, 200, 61, 109, 188, 0, 190, 167, 136, 96, 191, 176, 70, 29, 63, 70, 150, 236, 61, 197, 191, 133, 62, 57, 187, 42, 62, 73, 183, 157, 190, 216, 32, 30, 190, 128, 235, 232, 62, 176, 92, 66, 62, 44, 192, 78, 190, 142, 76, 42, 63, 220, 23, 222, 189, 67, 104, 53, 62, 44, 143, 131, 189, 197, 69, 165, 190, 180, 216, 241, 61, 239, 181, 182, 62, 103, 187, 198, 62, 101, 254, 82, 191, 210, 145, 45, 190, 199, 32, 9, 63, 99, 251, 207, 190, 30, 85, 153, 62, 195, 155, 101, 190, 152, 151, 95, 190, 89, 40, 38, 191, 156, 143, 218, 190, 221, 174, 145, 61, 230, 42, 25, 189, 55, 225, 196, 189, 150, 117, 102, 190, 128, 71, 110, 190, 121, 156, 91, 61, 53, 110, 30, 62, 177, 176, 151, 189, 249, 84, 12, 62, 212, 134, 13, 189, 165, 64, 177, 61, 134, 13, 241, 61, 119, 95, 81, 188, 253, 28, 19, 62, 76, 49, 131, 62, 98, 104, 4, 188, 230, 171, 238, 59, 52, 74, 35, 190, 23, 95, 120, 189, 60, 170, 132, 62, 35, 139, 162, 189, 93, 28, 68, 190, 171, 219, 197, 189, 37, 189, 141, 59, 112, 26, 48, 62, 108, 14, 184, 61, 76, 83, 104, 190, 40, 64, 10, 62, 191, 75, 21, 190, 193, 15, 162, 61, 86, 173, 191, 189, 178, 29, 32, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 3, 27, 189, 90, 160, 69, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {176, 214, 129, 62, 224, 207, 158, 190, 217, 231, 199, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {75, 166, 205, 63, 216, 189, 39, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0035/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}