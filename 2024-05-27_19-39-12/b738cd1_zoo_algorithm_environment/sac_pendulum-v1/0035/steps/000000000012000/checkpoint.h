// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 37, 139, 62, 132, 77, 176, 190, 25, 195, 87, 60, 178, 101, 160, 62, 57, 234, 3, 63, 201, 237, 175, 190, 254, 92, 40, 63, 152, 111, 109, 63, 90, 192, 62, 62, 155, 155, 239, 190, 70, 232, 252, 62, 222, 80, 44, 191, 40, 9, 175, 190, 7, 52, 39, 63, 177, 58, 43, 190, 142, 82, 132, 62, 138, 126, 175, 190, 140, 45, 162, 187, 157, 241, 116, 63, 163, 242, 185, 61, 96, 84, 109, 61, 201, 147, 128, 189, 64, 144, 28, 63, 19, 196, 136, 190, 46, 179, 45, 63, 56, 223, 145, 61, 36, 242, 221, 62, 246, 51, 228, 189, 111, 179, 174, 191, 140, 170, 218, 190, 98, 62, 5, 190, 156, 113, 147, 191, 82, 119, 31, 190, 180, 242, 9, 63, 227, 82, 129, 63, 198, 230, 224, 62, 163, 93, 39, 63, 98, 8, 86, 191, 170, 186, 166, 190, 149, 12, 129, 63, 182, 1, 163, 63, 32, 19, 188, 62, 235, 119, 231, 190, 172, 20, 247, 191, 7, 150, 252, 190, 87, 58, 217, 190, 55, 52, 130, 61, 187, 104, 202, 190, 75, 236, 101, 62, 35, 124, 25, 190, 130, 58, 223, 190, 231, 56, 196, 190, 214, 19, 50, 191, 72, 223, 200, 62, 194, 192, 207, 62, 53, 55, 6, 191, 8, 87, 184, 62, 244, 218, 11, 63, 61, 232, 45, 63, 0, 66, 85, 62, 180, 9, 240, 189, 186, 70, 13, 62, 95, 189, 44, 63, 108, 187, 23, 63, 138, 24, 81, 191, 218, 233, 251, 190, 62, 222, 53, 63, 36, 198, 129, 191, 114, 62, 21, 191, 110, 129, 29, 61, 59, 2, 5, 191, 69, 159, 150, 188, 69, 123, 200, 190, 151, 167, 141, 63, 218, 175, 63, 62, 115, 126, 39, 63, 182, 149, 50, 191, 78, 100, 110, 190, 239, 152, 101, 62, 98, 0, 249, 62, 253, 125, 21, 191, 40, 117, 67, 63, 8, 157, 80, 190, 208, 222, 255, 62, 10, 21, 69, 191, 33, 215, 187, 189, 164, 215, 24, 189, 73, 19, 70, 62, 14, 182, 182, 63, 36, 141, 187, 61, 79, 207, 32, 190, 35, 163, 229, 62, 63, 18, 78, 63, 243, 151, 159, 190, 255, 226, 14, 63, 226, 54, 76, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 183, 19, 191, 133, 158, 228, 189, 148, 35, 36, 190, 0, 71, 51, 62, 253, 167, 102, 190, 52, 21, 11, 191, 151, 194, 11, 62, 191, 97, 237, 62, 86, 153, 131, 190, 224, 182, 67, 61, 106, 194, 27, 63, 255, 184, 35, 190, 171, 168, 24, 63, 49, 96, 212, 61, 152, 139, 117, 190, 36, 114, 58, 190, 51, 52, 197, 60, 47, 13, 44, 190, 41, 108, 28, 63, 35, 212, 11, 63, 55, 65, 71, 62, 64, 245, 220, 190, 121, 130, 141, 62, 140, 139, 153, 62, 79, 192, 37, 63, 118, 230, 167, 190, 217, 92, 169, 61, 27, 8, 197, 190, 137, 102, 50, 63, 121, 165, 204, 62, 110, 207, 14, 61, 248, 205, 214, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 158, 198, 188, 183, 252, 245, 61, 51, 24, 44, 188, 1, 194, 156, 189, 101, 16, 175, 188, 200, 243, 12, 62, 25, 6, 29, 62, 18, 50, 222, 61, 62, 190, 116, 189, 103, 53, 44, 190, 8, 133, 95, 189, 182, 233, 181, 189, 142, 141, 131, 189, 91, 166, 42, 190, 67, 219, 196, 189, 100, 145, 140, 189, 77, 192, 53, 61, 42, 40, 2, 190, 163, 31, 118, 189, 60, 168, 45, 190, 104, 85, 235, 60, 154, 116, 30, 61, 25, 237, 247, 59, 108, 56, 187, 187, 88, 138, 13, 190, 37, 78, 130, 188, 195, 16, 164, 60, 99, 243, 4, 61, 131, 152, 125, 189, 159, 154, 157, 189, 154, 252, 26, 62, 47, 5, 193, 61, 251, 121, 47, 190, 134, 42, 23, 191, 124, 216, 50, 191, 78, 243, 187, 188, 89, 251, 6, 62, 103, 50, 12, 190, 246, 194, 219, 190, 205, 158, 201, 188, 179, 105, 81, 60, 0, 255, 91, 191, 179, 187, 117, 189, 35, 245, 34, 189, 178, 91, 26, 63, 160, 94, 140, 190, 250, 209, 227, 191, 46, 151, 134, 189, 84, 21, 110, 61, 41, 255, 250, 189, 139, 5, 96, 62, 250, 222, 208, 189, 142, 248, 43, 61, 179, 236, 178, 188, 35, 235, 148, 61, 249, 50, 202, 61, 3, 127, 1, 62, 62, 33, 154, 62, 204, 115, 0, 191, 81, 106, 193, 61, 20, 219, 127, 62, 170, 128, 165, 190, 201, 126, 221, 61, 16, 207, 55, 61, 149, 237, 75, 61, 93, 210, 130, 190, 27, 54, 136, 61, 33, 13, 136, 61, 201, 244, 160, 189, 59, 159, 219, 61, 82, 60, 130, 190, 52, 85, 87, 188, 211, 106, 180, 189, 40, 152, 212, 60, 12, 195, 47, 189, 217, 233, 189, 189, 10, 247, 136, 189, 145, 110, 51, 61, 21, 33, 209, 61, 8, 104, 49, 61, 217, 82, 158, 189, 5, 83, 104, 61, 147, 250, 206, 189, 151, 161, 44, 190, 98, 161, 161, 60, 206, 149, 110, 59, 225, 127, 196, 189, 28, 168, 174, 61, 149, 207, 4, 189, 217, 45, 84, 61, 128, 165, 156, 61, 156, 42, 182, 60, 47, 10, 67, 189, 181, 255, 20, 189, 246, 229, 34, 189, 128, 4, 71, 190, 91, 212, 228, 189, 86, 226, 177, 62, 232, 36, 161, 190, 155, 9, 231, 189, 189, 58, 205, 61, 153, 7, 49, 190, 227, 45, 132, 189, 190, 185, 203, 61, 174, 68, 57, 61, 8, 117, 237, 189, 217, 22, 250, 61, 189, 21, 150, 187, 195, 68, 164, 62, 192, 106, 243, 61, 11, 164, 154, 61, 187, 69, 111, 190, 1, 186, 144, 61, 105, 134, 122, 189, 75, 166, 135, 62, 123, 36, 143, 61, 233, 187, 202, 61, 108, 106, 33, 60, 130, 62, 155, 61, 250, 139, 118, 61, 130, 205, 62, 62, 234, 74, 113, 62, 91, 133, 17, 61, 144, 219, 131, 190, 66, 251, 252, 61, 17, 84, 78, 62, 147, 31, 75, 189, 20, 182, 149, 188, 71, 120, 241, 61, 197, 21, 90, 190, 123, 175, 221, 61, 42, 155, 164, 61, 176, 27, 208, 189, 199, 219, 143, 61, 150, 244, 161, 62, 35, 156, 128, 62, 37, 181, 189, 62, 85, 131, 158, 61, 219, 2, 215, 188, 176, 191, 21, 190, 77, 26, 41, 62, 3, 148, 69, 62, 21, 7, 129, 61, 183, 106, 144, 62, 133, 91, 27, 190, 107, 196, 106, 190, 127, 224, 69, 189, 223, 201, 155, 62, 80, 251, 21, 190, 127, 113, 69, 188, 42, 141, 149, 60, 67, 119, 122, 62, 160, 135, 115, 189, 79, 191, 143, 190, 114, 40, 168, 188, 28, 10, 90, 62, 59, 49, 66, 189, 68, 250, 23, 62, 197, 173, 114, 189, 162, 115, 21, 61, 138, 244, 2, 189, 175, 40, 158, 189, 134, 198, 148, 190, 191, 2, 138, 190, 50, 91, 146, 190, 45, 199, 33, 61, 93, 6, 219, 190, 254, 156, 167, 190, 147, 228, 228, 190, 107, 45, 64, 190, 101, 119, 185, 61, 243, 190, 185, 190, 231, 238, 150, 191, 207, 255, 192, 190, 24, 17, 185, 190, 27, 9, 74, 188, 110, 244, 237, 190, 104, 193, 38, 61, 23, 84, 35, 62, 17, 70, 107, 190, 5, 96, 83, 62, 35, 173, 201, 190, 233, 42, 24, 191, 70, 162, 110, 62, 128, 222, 79, 62, 92, 24, 138, 189, 101, 187, 213, 190, 126, 202, 215, 190, 226, 133, 194, 62, 186, 22, 41, 190, 190, 179, 98, 62, 70, 114, 93, 61, 222, 73, 237, 189, 56, 230, 68, 191, 139, 38, 2, 191, 249, 237, 237, 189, 98, 213, 192, 60, 150, 106, 254, 189, 236, 190, 81, 189, 169, 52, 104, 60, 4, 98, 230, 61, 206, 240, 221, 191, 175, 17, 94, 62, 153, 133, 102, 190, 184, 107, 167, 62, 18, 13, 103, 190, 190, 174, 43, 192, 233, 0, 131, 190, 130, 162, 190, 187, 120, 38, 10, 59, 57, 63, 27, 190, 205, 189, 121, 187, 183, 40, 88, 62, 48, 55, 29, 190, 71, 17, 126, 190, 135, 174, 178, 61, 94, 165, 157, 62, 193, 223, 168, 62, 138, 97, 130, 191, 183, 185, 32, 189, 64, 225, 182, 62, 58, 253, 114, 190, 231, 3, 16, 189, 197, 250, 62, 62, 17, 78, 255, 61, 146, 94, 146, 62, 226, 119, 144, 190, 254, 68, 63, 190, 77, 147, 34, 62, 80, 160, 37, 190, 223, 95, 237, 189, 75, 200, 184, 61, 126, 232, 170, 187, 65, 255, 24, 190, 150, 176, 66, 62, 100, 88, 120, 190, 28, 202, 252, 61, 226, 172, 36, 189, 143, 55, 51, 189, 57, 159, 86, 190, 7, 26, 20, 62, 95, 200, 86, 60, 242, 61, 108, 62, 184, 252, 105, 190, 72, 147, 147, 61, 45, 35, 121, 60, 135, 50, 41, 59, 234, 164, 144, 60, 120, 38, 51, 190, 127, 128, 134, 62, 186, 168, 160, 61, 112, 31, 80, 188, 18, 221, 42, 61, 233, 228, 79, 61, 25, 150, 46, 190, 156, 12, 170, 61, 48, 187, 196, 189, 171, 207, 205, 61, 16, 121, 28, 191, 181, 78, 179, 189, 46, 130, 193, 61, 213, 9, 42, 190, 59, 169, 200, 189, 204, 252, 176, 61, 118, 110, 59, 190, 1, 7, 155, 189, 89, 230, 39, 190, 151, 181, 166, 190, 86, 173, 33, 188, 190, 222, 75, 190, 173, 63, 163, 190, 231, 223, 170, 189, 84, 66, 49, 61, 112, 172, 154, 189, 186, 246, 145, 61, 245, 226, 14, 190, 76, 86, 151, 62, 39, 135, 7, 63, 20, 252, 186, 62, 30, 55, 182, 189, 10, 217, 3, 190, 135, 24, 43, 63, 157, 166, 147, 60, 126, 83, 99, 189, 64, 222, 196, 190, 161, 107, 202, 189, 14, 17, 29, 62, 75, 93, 146, 190, 173, 54, 149, 189, 191, 89, 139, 61, 35, 70, 232, 190, 117, 24, 207, 60, 32, 41, 248, 190, 106, 227, 24, 62, 130, 179, 128, 62, 182, 156, 25, 188, 23, 72, 155, 60, 64, 255, 125, 190, 171, 90, 152, 62, 27, 182, 172, 190, 58, 59, 57, 62, 181, 25, 200, 61, 225, 99, 134, 189, 105, 71, 189, 190, 199, 63, 60, 189, 202, 65, 146, 62, 144, 226, 176, 62, 40, 221, 11, 62, 184, 202, 17, 190, 50, 183, 252, 60, 186, 166, 0, 62, 22, 103, 17, 62, 204, 48, 217, 190, 97, 226, 143, 62, 207, 45, 6, 62, 63, 193, 193, 189, 254, 68, 67, 61, 20, 118, 122, 190, 91, 197, 195, 190, 168, 224, 149, 189, 136, 32, 162, 189, 93, 159, 150, 190, 112, 95, 13, 62, 112, 123, 167, 62, 95, 18, 158, 190, 95, 166, 47, 190, 217, 120, 126, 62, 123, 13, 81, 62, 64, 135, 212, 62, 33, 27, 7, 61, 76, 253, 218, 189, 174, 14, 164, 189, 79, 236, 176, 61, 170, 98, 119, 61, 165, 81, 235, 188, 146, 14, 165, 62, 34, 65, 93, 190, 61, 203, 47, 62, 183, 229, 171, 59, 146, 248, 230, 61, 21, 104, 192, 190, 27, 5, 214, 190, 236, 223, 165, 190, 9, 69, 132, 190, 14, 122, 100, 189, 44, 99, 71, 191, 139, 93, 42, 62, 187, 77, 155, 62, 241, 211, 234, 189, 131, 243, 1, 62, 231, 156, 16, 190, 139, 192, 53, 62, 47, 136, 225, 189, 74, 83, 77, 190, 121, 65, 73, 62, 1, 116, 20, 61, 103, 75, 45, 190, 124, 201, 45, 62, 212, 21, 169, 61, 72, 207, 203, 60, 34, 213, 71, 61, 196, 121, 9, 62, 158, 85, 151, 187, 170, 59, 254, 60, 65, 128, 178, 190, 173, 78, 136, 62, 147, 101, 172, 62, 147, 253, 158, 62, 195, 77, 250, 188, 237, 41, 241, 61, 164, 187, 37, 190, 247, 41, 110, 190, 0, 35, 51, 190, 61, 26, 77, 190, 222, 170, 108, 189, 214, 47, 135, 59, 160, 248, 127, 190, 212, 188, 7, 191, 152, 17, 12, 62, 252, 237, 162, 62, 173, 50, 194, 62, 158, 227, 3, 191, 131, 2, 45, 189, 71, 146, 38, 190, 201, 204, 232, 189, 131, 193, 179, 62, 182, 204, 197, 190, 138, 122, 88, 190, 174, 101, 241, 61, 34, 252, 27, 189, 11, 108, 208, 189, 237, 49, 116, 189, 18, 173, 133, 189, 115, 60, 149, 189, 216, 183, 19, 190, 87, 219, 60, 190, 195, 155, 233, 61, 196, 166, 253, 187, 79, 213, 39, 190, 24, 168, 46, 190, 138, 104, 113, 62, 16, 222, 96, 189, 24, 242, 63, 62, 163, 41, 17, 190, 235, 146, 193, 62, 165, 27, 171, 62, 46, 204, 139, 62, 253, 56, 151, 60, 50, 171, 22, 190, 200, 218, 229, 62, 201, 98, 53, 190, 65, 133, 175, 190, 160, 131, 11, 189, 38, 96, 152, 61, 153, 237, 66, 189, 50, 228, 75, 189, 121, 98, 98, 188, 147, 74, 55, 189, 108, 179, 74, 191, 41, 48, 195, 190, 35, 255, 171, 190, 236, 32, 198, 188, 202, 29, 118, 62, 76, 34, 151, 190, 77, 241, 99, 188, 76, 26, 42, 62, 214, 227, 43, 62, 245, 156, 71, 191, 101, 87, 129, 62, 209, 101, 87, 190, 158, 207, 33, 190, 88, 242, 163, 190, 96, 37, 114, 189, 237, 159, 163, 62, 13, 163, 70, 62, 153, 227, 162, 188, 10, 70, 96, 61, 89, 45, 63, 190, 65, 57, 225, 189, 171, 64, 14, 63, 24, 114, 143, 191, 123, 223, 182, 62, 222, 239, 192, 189, 170, 1, 36, 61, 158, 12, 99, 59, 232, 208, 16, 191, 209, 13, 19, 190, 247, 231, 170, 190, 71, 193, 96, 59, 66, 223, 24, 62, 247, 209, 67, 191, 115, 198, 194, 188, 247, 53, 93, 61, 121, 3, 252, 189, 25, 101, 17, 63, 12, 100, 170, 59, 90, 25, 159, 190, 222, 7, 180, 189, 199, 83, 169, 189, 85, 108, 162, 190, 145, 60, 167, 61, 105, 76, 58, 191, 220, 229, 235, 189, 165, 23, 215, 190, 189, 25, 69, 62, 24, 139, 54, 60, 131, 189, 119, 60, 37, 4, 182, 61, 190, 22, 153, 189, 96, 158, 77, 62, 237, 41, 144, 60, 173, 49, 123, 61, 104, 136, 134, 190, 3, 220, 179, 62, 247, 46, 43, 189, 170, 45, 66, 190, 86, 44, 104, 190, 160, 49, 3, 191, 17, 194, 82, 190, 246, 127, 32, 191, 156, 206, 0, 62, 162, 125, 229, 190, 203, 20, 51, 191, 15, 84, 116, 190, 105, 50, 42, 62, 0, 22, 4, 62, 101, 157, 37, 190, 56, 28, 163, 189, 153, 132, 21, 190, 166, 232, 57, 191, 173, 63, 7, 62, 126, 224, 4, 190, 56, 45, 71, 62, 16, 147, 151, 190, 158, 155, 249, 191, 188, 158, 17, 191, 229, 58, 45, 61, 91, 192, 168, 190, 118, 225, 108, 62, 255, 237, 213, 60, 87, 107, 84, 62, 111, 1, 8, 188, 227, 6, 209, 61, 133, 140, 153, 62, 59, 210, 103, 62, 110, 239, 215, 61, 66, 141, 117, 191, 90, 31, 228, 189, 62, 0, 89, 62, 191, 115, 93, 189, 22, 198, 14, 62, 94, 1, 4, 62, 23, 253, 221, 61, 14, 132, 231, 189, 27, 162, 246, 61, 238, 172, 137, 60, 229, 165, 218, 189, 222, 213, 93, 60, 179, 182, 25, 190, 80, 232, 132, 61, 129, 20, 232, 61, 189, 52, 19, 190, 197, 161, 66, 189, 114, 231, 85, 189, 157, 227, 52, 190, 13, 9, 14, 190, 112, 235, 32, 62, 122, 59, 27, 61, 161, 223, 23, 190, 110, 235, 91, 190, 171, 133, 149, 61, 4, 41, 180, 61, 37, 211, 137, 189, 159, 241, 143, 61, 223, 143, 166, 61, 159, 20, 23, 190, 247, 34, 7, 190, 187, 48, 27, 188, 110, 179, 90, 188, 6, 38, 3, 190, 77, 140, 220, 61, 146, 22, 53, 190, 205, 100, 140, 60, 98, 212, 147, 190, 199, 85, 117, 61, 215, 118, 134, 62, 199, 101, 252, 190, 101, 68, 44, 59, 126, 112, 30, 61, 40, 116, 5, 190, 47, 34, 252, 189, 139, 21, 113, 190, 182, 56, 204, 189, 0, 152, 180, 181, 234, 150, 95, 62, 162, 140, 150, 190, 36, 175, 140, 62, 116, 49, 122, 189, 226, 170, 136, 190, 233, 135, 168, 188, 244, 67, 131, 61, 41, 229, 245, 189, 151, 246, 169, 61, 59, 20, 40, 190, 137, 55, 49, 62, 31, 246, 102, 62, 245, 106, 29, 62, 41, 216, 214, 61, 164, 156, 157, 188, 9, 197, 12, 63, 149, 79, 158, 61, 102, 232, 53, 187, 64, 173, 210, 189, 180, 170, 64, 62, 64, 141, 142, 61, 149, 3, 129, 61, 250, 190, 237, 59, 125, 77, 48, 189, 10, 196, 48, 190, 77, 41, 17, 61, 24, 168, 72, 59, 16, 245, 164, 189, 66, 20, 237, 60, 190, 11, 8, 190, 165, 70, 21, 62, 146, 159, 180, 61, 72, 194, 31, 190, 129, 129, 183, 189, 191, 214, 25, 190, 181, 245, 148, 61, 125, 54, 205, 188, 99, 71, 232, 61, 245, 221, 25, 188, 2, 117, 244, 189, 160, 167, 10, 190, 73, 161, 35, 186, 116, 50, 180, 187, 171, 132, 34, 62, 156, 132, 189, 189, 248, 252, 228, 189, 201, 246, 138, 189, 160, 249, 35, 190, 93, 3, 10, 189, 107, 140, 4, 190, 229, 48, 91, 61, 57, 85, 254, 61, 250, 216, 0, 62, 241, 189, 67, 190, 177, 67, 184, 189, 196, 140, 175, 187, 208, 173, 150, 62, 5, 194, 122, 62, 249, 235, 209, 188, 26, 17, 9, 62, 106, 239, 230, 62, 154, 238, 147, 62, 39, 156, 57, 62, 104, 130, 148, 59, 65, 236, 170, 190, 211, 188, 64, 190, 26, 104, 224, 189, 108, 185, 213, 61, 33, 119, 136, 190, 6, 211, 143, 62, 135, 17, 143, 190, 143, 160, 16, 191, 40, 253, 188, 190, 61, 144, 206, 61, 170, 13, 245, 190, 103, 49, 232, 190, 166, 112, 190, 190, 47, 179, 222, 190, 151, 5, 103, 62, 188, 18, 156, 191, 62, 204, 178, 61, 11, 208, 15, 190, 74, 69, 27, 62, 222, 208, 159, 62, 55, 245, 102, 190, 80, 123, 228, 60, 149, 165, 154, 188, 187, 249, 240, 60, 136, 128, 255, 190, 124, 134, 217, 189, 44, 213, 151, 190, 65, 50, 16, 190, 57, 177, 91, 61, 172, 171, 158, 60, 159, 70, 159, 190, 40, 90, 5, 190, 45, 227, 139, 189, 138, 250, 59, 189, 154, 254, 76, 62, 129, 167, 156, 190, 15, 159, 50, 189, 238, 10, 208, 190, 117, 89, 185, 189, 11, 10, 41, 190, 159, 102, 132, 61, 120, 76, 33, 62, 43, 38, 97, 62, 165, 69, 66, 190, 239, 219, 67, 62, 202, 211, 78, 62, 81, 170, 135, 61, 44, 165, 194, 61, 253, 145, 170, 61, 71, 32, 235, 189, 95, 47, 75, 62, 79, 127, 254, 187, 244, 206, 192, 61, 58, 81, 19, 61, 16, 115, 30, 62, 220, 32, 55, 62, 9, 245, 2, 191, 43, 212, 95, 190, 76, 195, 25, 190, 115, 210, 152, 189, 244, 61, 240, 61, 238, 225, 23, 59, 190, 251, 235, 189, 149, 228, 25, 190, 92, 237, 152, 62, 137, 211, 238, 190, 59, 42, 131, 62, 216, 146, 46, 190, 69, 193, 243, 190, 70, 190, 42, 191, 53, 219, 71, 62, 189, 93, 77, 188, 150, 223, 61, 62, 168, 205, 148, 62, 168, 255, 155, 189, 251, 134, 140, 189, 198, 46, 69, 62, 180, 59, 124, 62, 115, 147, 126, 190, 50, 172, 4, 62, 152, 1, 156, 189, 201, 39, 34, 190, 194, 40, 14, 62, 214, 180, 18, 189, 122, 61, 188, 60, 188, 208, 4, 62, 111, 0, 84, 61, 33, 126, 216, 62, 110, 34, 23, 191, 37, 117, 41, 190, 240, 189, 33, 62, 182, 76, 114, 61, 243, 46, 99, 61, 22, 179, 188, 61, 160, 186, 142, 190, 219, 219, 238, 60, 192, 180, 213, 61, 215, 238, 209, 190, 195, 45, 113, 62, 252, 89, 179, 189, 51, 199, 28, 190, 176, 153, 195, 190, 121, 64, 224, 60, 36, 132, 40, 188, 131, 80, 247, 61, 17, 66, 204, 60, 121, 151, 142, 62, 151, 50, 203, 62, 110, 111, 126, 61, 251, 77, 147, 61, 192, 134, 134, 190, 242, 44, 31, 63, 180, 95, 123, 188, 195, 250, 131, 190, 80, 76, 128, 190, 217, 16, 57, 188, 122, 185, 19, 62, 172, 153, 72, 189, 60, 96, 214, 60, 133, 209, 238, 190, 237, 242, 167, 60, 47, 128, 174, 61, 91, 200, 99, 191, 104, 17, 165, 189, 115, 30, 8, 191, 159, 196, 192, 189, 156, 23, 156, 190, 221, 144, 166, 62, 17, 112, 79, 62, 88, 229, 39, 62, 241, 110, 18, 191, 40, 173, 234, 189, 40, 136, 169, 62, 115, 114, 239, 61, 130, 163, 148, 190, 134, 79, 30, 63, 121, 85, 173, 190, 148, 23, 202, 191, 125, 228, 212, 190, 165, 169, 137, 61, 245, 189, 142, 190, 27, 39, 37, 61, 86, 229, 146, 61, 3, 2, 177, 190, 183, 99, 218, 187, 215, 21, 6, 191, 51, 208, 92, 62, 225, 57, 91, 191, 201, 188, 62, 191, 78, 59, 35, 62, 61, 202, 111, 187, 144, 1, 83, 189, 105, 198, 187, 62, 175, 243, 192, 189, 25, 92, 3, 61, 55, 228, 245, 188, 221, 161, 61, 62, 211, 130, 20, 190, 43, 83, 67, 61, 42, 54, 199, 62, 107, 175, 145, 62, 12, 44, 181, 61, 67, 193, 159, 61, 161, 245, 75, 189, 241, 27, 73, 62, 188, 61, 57, 188, 73, 37, 172, 61, 137, 127, 204, 61, 185, 11, 68, 62, 151, 209, 2, 190, 37, 255, 190, 61, 76, 16, 177, 62, 178, 228, 148, 59, 241, 232, 226, 61, 200, 66, 225, 189, 205, 87, 137, 62, 232, 155, 72, 61, 226, 162, 37, 62, 167, 89, 2, 62, 187, 236, 81, 191, 5, 181, 61, 62, 128, 149, 105, 190, 112, 216, 28, 61, 11, 44, 194, 62, 235, 186, 19, 63, 148, 178, 145, 62, 97, 9, 187, 62, 177, 33, 13, 190, 106, 10, 201, 189, 240, 69, 74, 62, 204, 93, 214, 62, 36, 1, 16, 191, 238, 201, 38, 190, 123, 173, 22, 63, 35, 104, 98, 191, 225, 220, 202, 62, 113, 213, 244, 190, 235, 55, 157, 190, 129, 180, 164, 189, 156, 137, 138, 62, 238, 36, 237, 190, 87, 38, 225, 61, 30, 179, 199, 190, 103, 143, 142, 191, 15, 164, 107, 191, 107, 234, 110, 191, 163, 247, 250, 61, 213, 42, 64, 191, 176, 120, 176, 62, 129, 69, 8, 62, 250, 187, 159, 61, 209, 36, 134, 62, 217, 55, 155, 189, 80, 70, 101, 62, 172, 140, 38, 62, 29, 96, 189, 190, 49, 88, 179, 189, 146, 178, 131, 62, 142, 5, 153, 190, 247, 17, 91, 61, 203, 8, 203, 62, 208, 44, 145, 62, 55, 70, 33, 62, 85, 188, 202, 61, 109, 21, 25, 62, 173, 234, 185, 61, 160, 38, 65, 61, 117, 222, 104, 62, 34, 29, 212, 61, 144, 224, 129, 62, 57, 18, 51, 189, 232, 26, 164, 188, 31, 126, 181, 189, 145, 71, 152, 62, 55, 129, 179, 190, 199, 109, 125, 190, 158, 245, 49, 190, 229, 241, 234, 61, 22, 30, 152, 189, 28, 62, 131, 191, 51, 88, 211, 188, 163, 117, 101, 60, 151, 33, 225, 61, 4, 38, 16, 190, 120, 43, 0, 191, 8, 187, 78, 62, 89, 136, 127, 61, 150, 165, 140, 62, 14, 146, 249, 190, 33, 159, 148, 61, 44, 109, 210, 61, 79, 106, 225, 61, 218, 155, 21, 190, 95, 35, 27, 189, 214, 69, 27, 189, 247, 164, 178, 190, 1, 84, 161, 60, 215, 132, 133, 190, 143, 249, 83, 60, 59, 218, 104, 190, 159, 223, 124, 190, 5, 25, 19, 190, 90, 149, 191, 61, 34, 7, 243, 61, 31, 147, 20, 60, 51, 73, 235, 189, 29, 152, 7, 62, 161, 170, 221, 62, 193, 56, 149, 62, 104, 252, 215, 189, 20, 200, 4, 188, 236, 215, 74, 63, 111, 24, 128, 190, 169, 28, 45, 187, 231, 104, 221, 189, 159, 249, 128, 189, 142, 13, 230, 61, 254, 10, 196, 61, 86, 152, 236, 61, 144, 217, 96, 190, 44, 117, 185, 189, 37, 210, 76, 62, 120, 62, 11, 190, 36, 161, 20, 190, 120, 24, 166, 62, 67, 239, 165, 62, 189, 24, 50, 62, 21, 15, 203, 61, 213, 20, 73, 190, 63, 205, 68, 186, 27, 199, 23, 190, 108, 64, 80, 62, 215, 95, 238, 189, 135, 3, 48, 62, 163, 3, 163, 190, 75, 105, 98, 187, 104, 45, 47, 62, 28, 176, 68, 187, 137, 52, 96, 61, 59, 142, 120, 190, 76, 142, 18, 190, 75, 102, 7, 190, 189, 119, 69, 60, 191, 242, 97, 191, 63, 181, 133, 61, 130, 210, 85, 62, 231, 6, 86, 62, 84, 78, 0, 62, 99, 73, 158, 61, 85, 40, 74, 187, 84, 19, 49, 62, 20, 178, 37, 62, 99, 78, 88, 191, 230, 38, 32, 60, 42, 142, 87, 189, 65, 46, 21, 190, 225, 99, 66, 62, 199, 170, 144, 190, 157, 109, 150, 190, 66, 52, 14, 62, 25, 212, 26, 62, 217, 181, 130, 190, 67, 0, 38, 62, 39, 178, 125, 191, 102, 149, 17, 190, 123, 42, 29, 190, 251, 37, 186, 61, 87, 197, 78, 190, 230, 102, 122, 188, 29, 209, 249, 189, 197, 166, 159, 61, 41, 25, 44, 62, 129, 193, 115, 62, 129, 54, 16, 190, 207, 75, 51, 191, 60, 41, 6, 63, 49, 185, 198, 189, 255, 103, 195, 61, 156, 30, 72, 189, 171, 73, 22, 191, 200, 77, 184, 187, 225, 168, 253, 190, 171, 5, 250, 60, 182, 67, 80, 190, 35, 82, 162, 61, 251, 166, 204, 61, 38, 210, 135, 189, 9, 223, 239, 189, 108, 45, 111, 62, 93, 49, 115, 62, 170, 139, 75, 62, 234, 129, 2, 60, 236, 87, 104, 190, 30, 156, 79, 61, 145, 24, 17, 62, 56, 166, 6, 62, 31, 81, 130, 190, 205, 138, 43, 62, 129, 255, 89, 190, 12, 117, 182, 190, 95, 192, 59, 190, 205, 48, 97, 62, 101, 216, 244, 190, 75, 63, 17, 191, 236, 23, 253, 189, 164, 5, 193, 189, 189, 200, 10, 61, 170, 253, 49, 191, 87, 186, 149, 62, 146, 214, 144, 62, 21, 206, 39, 62, 56, 217, 86, 60, 203, 28, 42, 191, 252, 235, 212, 60, 171, 205, 17, 61, 89, 46, 52, 190, 29, 131, 30, 62, 22, 165, 98, 62, 134, 117, 104, 190, 118, 60, 124, 61, 128, 4, 206, 62, 51, 162, 178, 61, 52, 249, 208, 62, 226, 65, 170, 60, 237, 138, 95, 61, 33, 11, 41, 61, 43, 103, 60, 190, 250, 0, 88, 62, 73, 215, 177, 61, 160, 251, 97, 62, 17, 167, 119, 190, 42, 31, 8, 190, 215, 54, 120, 189, 237, 118, 78, 62, 248, 13, 20, 190, 110, 200, 78, 189, 86, 229, 136, 190, 192, 87, 86, 190, 5, 209, 147, 188, 239, 57, 89, 191, 13, 229, 36, 62, 64, 187, 138, 62, 55, 251, 167, 188, 249, 165, 90, 61, 40, 101, 79, 190, 165, 133, 247, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 107, 18, 189, 213, 74, 149, 60, 224, 70, 187, 189, 65, 56, 72, 62, 19, 117, 6, 62, 71, 169, 117, 61, 203, 56, 138, 61, 151, 80, 7, 62, 37, 181, 172, 189, 67, 250, 235, 61, 3, 200, 1, 190, 53, 111, 140, 61, 191, 106, 91, 62, 217, 198, 11, 189, 197, 126, 118, 190, 160, 211, 1, 62, 202, 237, 167, 188, 169, 238, 23, 62, 78, 16, 241, 188, 89, 194, 58, 189, 193, 218, 70, 62, 80, 238, 150, 62, 240, 96, 148, 61, 90, 175, 200, 61, 213, 90, 252, 61, 107, 8, 197, 190, 142, 200, 43, 61, 2, 133, 44, 189, 245, 192, 152, 62, 79, 215, 208, 60, 3, 17, 88, 62, 122, 18, 213, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 8, 8, 190, 196, 189, 115, 63, 207, 235, 240, 187, 0, 117, 114, 61, 147, 26, 189, 189, 148, 7, 134, 191, 195, 63, 185, 63, 157, 191, 52, 61, 45, 182, 81, 63, 231, 102, 102, 62, 48, 119, 159, 190, 89, 127, 27, 191, 7, 87, 231, 62, 57, 82, 141, 63, 175, 136, 80, 191, 187, 120, 138, 63, 240, 144, 194, 189, 113, 175, 52, 62, 141, 118, 131, 189, 160, 115, 95, 191, 202, 23, 107, 61, 207, 201, 224, 62, 234, 148, 238, 62, 127, 159, 106, 191, 58, 171, 181, 190, 85, 128, 171, 63, 207, 147, 212, 190, 120, 153, 13, 63, 74, 190, 101, 190, 209, 44, 228, 190, 49, 176, 38, 191, 182, 103, 213, 190, 221, 174, 145, 61, 123, 45, 189, 61, 44, 175, 192, 189, 114, 125, 122, 190, 32, 3, 139, 190, 98, 1, 3, 189, 102, 30, 38, 62, 16, 182, 210, 189, 250, 219, 146, 62, 82, 74, 192, 189, 117, 226, 103, 189, 21, 160, 67, 62, 171, 243, 142, 189, 232, 124, 200, 62, 155, 112, 58, 63, 203, 89, 178, 60, 170, 158, 132, 60, 27, 241, 132, 190, 213, 98, 120, 189, 50, 238, 219, 61, 102, 134, 227, 188, 238, 97, 64, 189, 14, 103, 218, 189, 242, 81, 98, 62, 44, 209, 7, 61, 133, 191, 143, 62, 198, 43, 73, 189, 29, 79, 231, 61, 122, 220, 86, 190, 165, 192, 238, 61, 198, 237, 134, 189, 251, 111, 136, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 106, 180, 189, 233, 246, 152, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {67, 32, 89, 190, 156, 107, 214, 62, 234, 215, 36, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {42, 158, 54, 191, 206, 248, 64, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0035/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}