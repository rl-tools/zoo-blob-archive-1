// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 37, 139, 62, 132, 77, 176, 190, 25, 195, 87, 60, 88, 178, 177, 62, 31, 148, 17, 63, 162, 81, 175, 190, 21, 49, 50, 63, 199, 79, 104, 63, 188, 242, 105, 62, 80, 230, 211, 190, 172, 142, 17, 63, 109, 208, 39, 191, 159, 32, 147, 190, 248, 249, 34, 63, 167, 91, 25, 190, 142, 82, 132, 62, 138, 126, 175, 190, 140, 45, 162, 187, 68, 199, 125, 63, 212, 21, 230, 60, 143, 134, 162, 61, 177, 28, 83, 189, 151, 192, 29, 63, 194, 152, 101, 190, 158, 23, 30, 63, 172, 78, 12, 189, 159, 206, 238, 62, 18, 89, 43, 190, 167, 122, 173, 191, 124, 25, 221, 190, 76, 241, 73, 190, 18, 46, 161, 191, 150, 47, 14, 190, 235, 8, 15, 63, 203, 251, 134, 63, 50, 135, 215, 62, 64, 11, 50, 63, 67, 235, 130, 191, 32, 12, 131, 190, 234, 118, 135, 63, 36, 132, 168, 63, 53, 27, 162, 62, 237, 210, 229, 190, 121, 46, 245, 191, 89, 197, 0, 191, 142, 10, 212, 190, 63, 244, 3, 62, 63, 136, 196, 190, 26, 133, 86, 62, 248, 178, 59, 190, 172, 189, 223, 190, 106, 205, 181, 190, 136, 170, 83, 191, 142, 176, 180, 62, 94, 140, 199, 62, 208, 71, 3, 191, 249, 87, 195, 62, 160, 53, 12, 63, 109, 111, 42, 63, 28, 104, 114, 62, 119, 189, 154, 189, 77, 133, 131, 62, 109, 214, 29, 63, 146, 112, 20, 63, 133, 3, 87, 191, 11, 5, 1, 191, 177, 173, 61, 63, 192, 157, 138, 191, 220, 133, 15, 191, 88, 238, 126, 61, 166, 72, 23, 191, 151, 107, 149, 189, 156, 52, 206, 190, 131, 196, 160, 63, 15, 142, 25, 62, 43, 237, 40, 63, 90, 83, 66, 191, 252, 127, 108, 190, 200, 225, 129, 62, 19, 41, 0, 63, 103, 179, 8, 191, 252, 246, 55, 63, 4, 111, 143, 190, 237, 84, 7, 63, 4, 199, 91, 191, 50, 83, 150, 189, 143, 202, 36, 60, 129, 25, 98, 62, 10, 171, 186, 63, 91, 219, 154, 61, 224, 109, 33, 190, 93, 141, 35, 63, 152, 197, 59, 63, 245, 6, 179, 190, 1, 43, 32, 63, 87, 237, 183, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 183, 19, 191, 15, 173, 230, 189, 164, 152, 228, 189, 105, 99, 128, 62, 23, 17, 156, 190, 52, 21, 11, 191, 63, 134, 23, 62, 104, 180, 251, 62, 220, 91, 170, 190, 204, 195, 10, 189, 194, 177, 15, 63, 30, 147, 54, 190, 239, 161, 18, 63, 56, 183, 252, 61, 40, 215, 165, 190, 76, 240, 114, 189, 22, 156, 177, 188, 130, 226, 140, 190, 8, 175, 23, 63, 81, 3, 12, 63, 185, 80, 127, 62, 132, 45, 244, 190, 245, 121, 140, 62, 70, 155, 165, 62, 68, 128, 41, 63, 143, 14, 178, 190, 40, 172, 19, 62, 187, 211, 226, 190, 200, 47, 60, 63, 1, 154, 219, 62, 155, 20, 139, 188, 137, 193, 222, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 158, 198, 188, 183, 252, 245, 61, 51, 24, 44, 188, 1, 194, 156, 189, 101, 16, 175, 188, 200, 243, 12, 62, 25, 6, 29, 62, 18, 50, 222, 61, 62, 190, 116, 189, 103, 53, 44, 190, 8, 133, 95, 189, 182, 233, 181, 189, 142, 141, 131, 189, 91, 166, 42, 190, 67, 219, 196, 189, 100, 145, 140, 189, 77, 192, 53, 61, 42, 40, 2, 190, 163, 31, 118, 189, 60, 168, 45, 190, 104, 85, 235, 60, 154, 116, 30, 61, 25, 237, 247, 59, 108, 56, 187, 187, 88, 138, 13, 190, 37, 78, 130, 188, 195, 16, 164, 60, 99, 243, 4, 61, 131, 152, 125, 189, 159, 154, 157, 189, 154, 252, 26, 62, 47, 5, 193, 61, 251, 121, 47, 190, 111, 78, 72, 191, 252, 90, 45, 191, 51, 193, 39, 190, 50, 44, 249, 187, 103, 50, 12, 190, 133, 148, 231, 190, 49, 14, 57, 190, 52, 50, 230, 187, 179, 17, 54, 191, 14, 106, 103, 189, 207, 232, 29, 189, 212, 217, 35, 63, 239, 199, 138, 190, 187, 233, 215, 191, 215, 136, 79, 190, 66, 68, 13, 189, 219, 41, 9, 190, 215, 140, 86, 62, 21, 246, 217, 189, 198, 121, 37, 61, 117, 115, 153, 189, 124, 249, 196, 61, 129, 130, 207, 61, 178, 53, 51, 62, 226, 205, 167, 62, 112, 243, 42, 191, 127, 203, 152, 61, 18, 166, 148, 62, 173, 153, 152, 190, 65, 148, 216, 61, 220, 133, 172, 61, 149, 237, 75, 61, 38, 225, 130, 190, 27, 54, 136, 61, 161, 188, 132, 61, 201, 244, 160, 189, 59, 159, 219, 61, 82, 60, 130, 190, 213, 254, 97, 188, 211, 106, 180, 189, 177, 19, 197, 60, 179, 149, 54, 189, 217, 233, 189, 189, 234, 214, 139, 189, 145, 110, 51, 61, 249, 86, 204, 61, 203, 123, 45, 61, 59, 64, 160, 189, 5, 83, 104, 61, 147, 250, 206, 189, 151, 161, 44, 190, 98, 161, 161, 60, 224, 44, 54, 59, 132, 7, 200, 189, 105, 42, 173, 61, 149, 207, 4, 189, 208, 15, 83, 61, 14, 182, 154, 61, 156, 42, 182, 60, 132, 11, 72, 189, 181, 255, 20, 189, 246, 229, 34, 189, 49, 13, 71, 190, 91, 212, 228, 189, 11, 106, 180, 62, 210, 207, 211, 190, 92, 202, 153, 189, 230, 95, 48, 62, 153, 7, 49, 190, 213, 12, 217, 189, 219, 62, 176, 61, 115, 163, 59, 61, 252, 173, 195, 189, 157, 21, 10, 62, 255, 77, 111, 189, 123, 15, 149, 62, 155, 168, 46, 61, 193, 72, 99, 61, 246, 1, 68, 190, 217, 198, 109, 61, 41, 253, 140, 189, 23, 151, 134, 62, 211, 2, 141, 60, 13, 251, 154, 61, 21, 60, 82, 60, 203, 246, 43, 61, 194, 135, 130, 61, 124, 17, 1, 62, 234, 175, 89, 62, 180, 217, 46, 61, 210, 158, 120, 190, 230, 177, 211, 61, 198, 96, 2, 62, 24, 126, 148, 189, 31, 88, 131, 189, 71, 120, 241, 61, 27, 166, 104, 190, 86, 216, 33, 61, 38, 212, 227, 61, 5, 189, 74, 189, 199, 219, 143, 61, 229, 187, 158, 62, 4, 31, 95, 62, 138, 19, 207, 62, 58, 92, 184, 61, 126, 36, 226, 60, 134, 131, 85, 190, 217, 97, 39, 62, 6, 96, 36, 62, 10, 85, 118, 61, 159, 58, 149, 62, 242, 185, 46, 190, 245, 160, 137, 190, 56, 97, 165, 188, 11, 229, 152, 62, 8, 34, 235, 189, 136, 221, 23, 189, 39, 40, 114, 188, 2, 139, 154, 62, 174, 35, 134, 189, 119, 28, 172, 190, 227, 103, 63, 189, 156, 98, 138, 62, 140, 231, 165, 188, 51, 21, 254, 61, 171, 222, 148, 189, 91, 141, 54, 61, 138, 244, 2, 189, 68, 132, 103, 62, 99, 128, 72, 61, 35, 52, 34, 189, 142, 156, 61, 189, 45, 199, 33, 61, 27, 240, 4, 191, 32, 63, 189, 189, 151, 230, 161, 190, 238, 87, 84, 190, 255, 237, 0, 62, 98, 112, 43, 190, 145, 235, 139, 191, 42, 237, 43, 190, 62, 191, 199, 190, 38, 207, 62, 62, 194, 110, 171, 190, 240, 226, 204, 61, 83, 15, 87, 62, 33, 162, 178, 189, 83, 163, 153, 62, 243, 235, 203, 190, 193, 2, 20, 191, 150, 214, 156, 62, 108, 201, 183, 62, 92, 24, 138, 189, 188, 193, 254, 189, 127, 12, 155, 190, 188, 3, 204, 62, 108, 19, 208, 61, 123, 244, 168, 62, 45, 176, 71, 62, 222, 73, 237, 189, 133, 161, 72, 191, 136, 6, 0, 191, 88, 100, 102, 190, 174, 213, 54, 189, 150, 106, 254, 189, 213, 100, 100, 190, 114, 26, 18, 189, 153, 133, 155, 61, 106, 90, 221, 191, 219, 151, 52, 62, 120, 84, 81, 190, 206, 33, 136, 62, 83, 81, 112, 190, 216, 199, 40, 192, 243, 127, 207, 190, 58, 197, 136, 60, 159, 54, 243, 59, 156, 209, 54, 190, 86, 141, 240, 188, 104, 219, 101, 62, 48, 55, 29, 190, 62, 155, 160, 190, 50, 218, 11, 61, 104, 30, 215, 62, 58, 253, 136, 62, 145, 74, 141, 191, 144, 143, 158, 189, 100, 160, 229, 62, 213, 60, 171, 189, 199, 46, 51, 188, 117, 19, 153, 62, 17, 78, 255, 61, 80, 197, 140, 62, 63, 182, 183, 190, 30, 72, 36, 190, 233, 130, 81, 62, 80, 160, 37, 190, 27, 229, 253, 189, 58, 198, 125, 61, 169, 239, 152, 61, 235, 109, 11, 190, 61, 116, 100, 62, 63, 220, 128, 190, 43, 134, 2, 62, 40, 24, 180, 189, 195, 183, 131, 189, 199, 76, 54, 190, 217, 75, 4, 62, 50, 32, 175, 60, 56, 222, 140, 62, 189, 141, 123, 190, 110, 156, 252, 61, 30, 43, 25, 60, 127, 173, 160, 188, 199, 133, 27, 61, 65, 54, 133, 190, 190, 88, 120, 62, 134, 65, 151, 61, 116, 10, 162, 61, 152, 141, 192, 60, 220, 88, 3, 189, 53, 184, 9, 190, 182, 199, 21, 61, 48, 187, 196, 189, 133, 46, 232, 61, 117, 96, 79, 191, 4, 26, 153, 189, 172, 185, 177, 61, 213, 9, 42, 190, 158, 192, 85, 190, 163, 241, 197, 61, 132, 119, 85, 190, 169, 0, 58, 189, 213, 206, 35, 190, 132, 55, 178, 190, 149, 130, 75, 59, 172, 92, 206, 190, 60, 233, 163, 190, 197, 239, 141, 189, 168, 52, 106, 61, 24, 114, 168, 189, 222, 116, 30, 62, 74, 163, 139, 190, 173, 8, 149, 62, 78, 236, 14, 63, 152, 222, 195, 62, 122, 213, 160, 189, 208, 13, 45, 190, 64, 150, 52, 63, 43, 148, 18, 61, 232, 139, 164, 189, 86, 126, 199, 190, 91, 142, 193, 189, 23, 60, 28, 62, 1, 112, 153, 190, 173, 54, 149, 189, 253, 155, 11, 189, 224, 198, 243, 190, 36, 44, 99, 189, 196, 122, 51, 191, 106, 227, 24, 62, 143, 77, 127, 62, 55, 38, 129, 189, 204, 72, 15, 61, 160, 171, 128, 190, 127, 27, 169, 62, 55, 116, 183, 190, 179, 33, 56, 62, 4, 196, 163, 61, 211, 109, 46, 189, 149, 45, 204, 190, 2, 16, 161, 189, 39, 162, 158, 62, 32, 82, 180, 62, 219, 77, 1, 62, 116, 45, 61, 190, 125, 12, 244, 60, 133, 233, 238, 61, 60, 22, 29, 62, 68, 103, 13, 191, 165, 189, 145, 62, 164, 71, 191, 61, 87, 88, 178, 189, 3, 86, 167, 61, 176, 116, 172, 190, 193, 141, 182, 190, 234, 239, 86, 190, 136, 32, 162, 189, 237, 246, 148, 190, 128, 45, 85, 62, 48, 196, 171, 62, 45, 74, 169, 190, 95, 166, 47, 190, 31, 252, 147, 62, 174, 133, 77, 62, 115, 44, 216, 62, 236, 127, 155, 189, 64, 216, 225, 189, 228, 84, 178, 189, 77, 127, 192, 61, 34, 136, 0, 62, 192, 53, 167, 189, 103, 190, 143, 62, 146, 76, 115, 190, 172, 142, 7, 62, 232, 26, 101, 59, 244, 201, 46, 62, 168, 92, 169, 190, 180, 79, 0, 191, 198, 150, 186, 190, 250, 13, 106, 190, 216, 30, 97, 61, 123, 179, 106, 191, 131, 98, 27, 62, 144, 104, 163, 62, 74, 59, 183, 189, 25, 158, 105, 62, 104, 200, 23, 190, 183, 16, 132, 62, 47, 136, 225, 189, 42, 18, 74, 190, 142, 140, 62, 62, 106, 8, 62, 61, 244, 189, 14, 190, 124, 201, 45, 62, 29, 92, 58, 61, 1, 17, 248, 60, 0, 19, 132, 60, 218, 88, 33, 62, 144, 98, 13, 61, 135, 3, 23, 59, 198, 5, 171, 190, 111, 5, 123, 62, 2, 202, 188, 62, 215, 48, 165, 62, 51, 168, 158, 188, 26, 73, 226, 61, 229, 60, 64, 190, 239, 156, 136, 190, 45, 43, 85, 190, 34, 56, 70, 190, 168, 254, 60, 189, 144, 173, 159, 60, 89, 193, 133, 190, 40, 246, 9, 191, 96, 63, 14, 62, 63, 130, 145, 62, 212, 185, 215, 62, 243, 107, 14, 191, 175, 208, 157, 189, 97, 117, 34, 190, 201, 204, 232, 189, 247, 147, 178, 62, 206, 238, 218, 190, 92, 133, 95, 190, 55, 96, 242, 61, 34, 252, 27, 189, 157, 156, 238, 189, 154, 133, 107, 189, 106, 105, 133, 189, 15, 179, 140, 189, 37, 138, 19, 190, 145, 230, 55, 190, 88, 32, 241, 61, 100, 227, 53, 189, 69, 218, 51, 190, 92, 65, 29, 190, 240, 111, 117, 62, 166, 129, 8, 189, 105, 104, 71, 62, 173, 138, 38, 190, 228, 3, 181, 62, 31, 98, 184, 62, 181, 174, 142, 62, 127, 165, 54, 60, 133, 52, 68, 190, 169, 139, 240, 62, 23, 31, 38, 190, 219, 133, 181, 190, 6, 11, 224, 188, 214, 42, 51, 61, 146, 25, 213, 188, 174, 44, 147, 189, 121, 98, 98, 188, 35, 94, 60, 190, 175, 238, 83, 191, 52, 157, 212, 190, 35, 255, 171, 190, 236, 32, 198, 188, 32, 183, 95, 62, 196, 94, 224, 190, 180, 160, 229, 186, 61, 10, 49, 62, 52, 103, 46, 62, 83, 82, 74, 191, 162, 235, 122, 62, 129, 124, 107, 190, 157, 141, 44, 190, 120, 2, 198, 190, 23, 212, 118, 189, 224, 104, 168, 62, 120, 186, 78, 62, 71, 24, 11, 189, 178, 14, 152, 61, 24, 88, 35, 190, 37, 155, 4, 190, 194, 173, 12, 63, 153, 197, 146, 191, 62, 229, 187, 62, 26, 201, 190, 189, 220, 139, 89, 61, 241, 124, 23, 189, 165, 17, 40, 191, 53, 232, 248, 189, 72, 103, 177, 190, 71, 193, 96, 59, 13, 228, 71, 62, 244, 20, 150, 191, 220, 228, 102, 187, 13, 204, 203, 62, 121, 3, 252, 189, 138, 221, 22, 63, 132, 164, 19, 61, 238, 27, 149, 190, 150, 241, 190, 189, 122, 15, 174, 189, 160, 186, 155, 190, 171, 229, 195, 61, 164, 100, 127, 191, 214, 205, 7, 190, 238, 130, 208, 190, 255, 163, 81, 62, 220, 223, 61, 62, 43, 156, 220, 60, 209, 55, 24, 61, 146, 151, 56, 61, 207, 90, 91, 62, 61, 179, 242, 60, 172, 194, 149, 61, 33, 41, 170, 190, 61, 113, 195, 62, 175, 44, 141, 188, 230, 55, 232, 189, 232, 167, 138, 190, 183, 225, 180, 190, 39, 136, 229, 189, 63, 99, 15, 191, 156, 206, 0, 62, 134, 20, 28, 191, 71, 214, 41, 191, 113, 15, 189, 190, 137, 38, 187, 61, 0, 22, 4, 62, 141, 33, 60, 190, 78, 253, 28, 190, 236, 78, 26, 190, 24, 254, 24, 191, 139, 114, 16, 62, 114, 229, 209, 189, 141, 118, 112, 62, 46, 240, 141, 190, 218, 167, 245, 191, 120, 89, 65, 191, 251, 25, 143, 188, 109, 29, 164, 190, 50, 63, 113, 62, 53, 208, 32, 61, 208, 95, 107, 62, 111, 34, 194, 188, 24, 134, 7, 62, 236, 40, 155, 62, 33, 241, 163, 62, 99, 162, 15, 62, 211, 237, 139, 191, 227, 19, 239, 189, 40, 233, 147, 62, 41, 42, 204, 59, 15, 248, 40, 62, 54, 229, 98, 62, 23, 253, 221, 61, 14, 132, 231, 189, 27, 162, 246, 61, 238, 172, 137, 60, 229, 165, 218, 189, 222, 213, 93, 60, 179, 182, 25, 190, 80, 232, 132, 61, 129, 20, 232, 61, 189, 52, 19, 190, 197, 161, 66, 189, 114, 231, 85, 189, 157, 227, 52, 190, 13, 9, 14, 190, 112, 235, 32, 62, 122, 59, 27, 61, 161, 223, 23, 190, 110, 235, 91, 190, 171, 133, 149, 61, 4, 41, 180, 61, 37, 211, 137, 189, 159, 241, 143, 61, 223, 143, 166, 61, 159, 20, 23, 190, 247, 34, 7, 190, 187, 48, 27, 188, 110, 179, 90, 188, 6, 38, 3, 190, 77, 140, 220, 61, 146, 22, 53, 190, 205, 100, 140, 60, 98, 212, 147, 190, 199, 85, 117, 61, 188, 147, 133, 62, 222, 162, 15, 191, 68, 151, 78, 60, 148, 151, 135, 61, 40, 116, 5, 190, 229, 50, 10, 190, 245, 243, 122, 190, 32, 246, 122, 189, 251, 13, 88, 60, 189, 212, 124, 62, 140, 37, 157, 190, 61, 254, 146, 62, 227, 233, 227, 189, 138, 136, 146, 190, 119, 64, 33, 60, 233, 14, 133, 61, 32, 31, 206, 189, 82, 108, 232, 61, 52, 179, 64, 190, 217, 220, 50, 62, 104, 156, 122, 62, 242, 240, 28, 62, 29, 87, 244, 61, 121, 255, 241, 189, 242, 3, 16, 63, 254, 170, 184, 61, 255, 236, 19, 61, 63, 73, 246, 189, 99, 109, 248, 61, 220, 7, 171, 61, 37, 114, 82, 186, 250, 190, 237, 59, 125, 77, 48, 189, 10, 196, 48, 190, 77, 41, 17, 61, 24, 168, 72, 59, 16, 245, 164, 189, 66, 20, 237, 60, 190, 11, 8, 190, 165, 70, 21, 62, 146, 159, 180, 61, 72, 194, 31, 190, 129, 129, 183, 189, 191, 214, 25, 190, 181, 245, 148, 61, 125, 54, 205, 188, 99, 71, 232, 61, 245, 221, 25, 188, 2, 117, 244, 189, 160, 167, 10, 190, 73, 161, 35, 186, 116, 50, 180, 187, 171, 132, 34, 62, 156, 132, 189, 189, 248, 252, 228, 189, 201, 246, 138, 189, 160, 249, 35, 190, 93, 3, 10, 189, 107, 140, 4, 190, 229, 48, 91, 61, 57, 85, 254, 61, 250, 216, 0, 62, 241, 189, 67, 190, 177, 67, 184, 189, 101, 133, 229, 59, 224, 235, 186, 62, 109, 120, 121, 62, 167, 84, 39, 189, 26, 17, 9, 62, 139, 76, 18, 63, 188, 28, 157, 62, 44, 74, 161, 189, 102, 97, 164, 189, 57, 178, 190, 190, 214, 237, 192, 190, 80, 232, 89, 189, 223, 240, 77, 62, 15, 238, 134, 190, 144, 229, 124, 62, 118, 94, 139, 190, 7, 86, 18, 191, 23, 187, 6, 191, 108, 125, 73, 62, 117, 240, 21, 191, 111, 59, 249, 190, 231, 248, 176, 190, 92, 118, 159, 190, 230, 101, 145, 62, 248, 137, 167, 191, 107, 219, 192, 61, 38, 165, 196, 190, 50, 126, 75, 62, 230, 111, 180, 62, 183, 172, 156, 190, 170, 175, 156, 61, 149, 165, 154, 188, 222, 136, 191, 60, 58, 48, 8, 191, 134, 145, 249, 189, 22, 97, 163, 190, 65, 50, 16, 190, 155, 21, 112, 60, 117, 46, 13, 58, 178, 91, 174, 190, 197, 175, 24, 190, 232, 137, 199, 189, 132, 239, 123, 189, 94, 90, 46, 62, 149, 101, 173, 190, 172, 157, 70, 189, 91, 221, 211, 190, 40, 95, 183, 189, 45, 25, 37, 190, 51, 222, 209, 60, 52, 81, 255, 61, 97, 242, 83, 62, 59, 209, 46, 190, 151, 103, 41, 62, 59, 126, 41, 62, 68, 239, 153, 61, 241, 200, 151, 61, 158, 240, 213, 61, 197, 69, 24, 190, 46, 138, 72, 62, 224, 244, 38, 189, 162, 43, 254, 61, 161, 91, 64, 61, 16, 115, 30, 62, 19, 98, 248, 61, 182, 207, 7, 191, 113, 24, 197, 190, 114, 209, 129, 190, 115, 210, 152, 189, 221, 30, 245, 61, 118, 174, 176, 188, 30, 167, 220, 189, 82, 19, 53, 190, 146, 32, 171, 62, 67, 74, 248, 190, 205, 237, 136, 62, 129, 16, 62, 190, 66, 164, 224, 190, 242, 33, 73, 191, 72, 157, 70, 62, 207, 67, 239, 60, 203, 180, 70, 62, 38, 215, 145, 62, 163, 223, 231, 189, 181, 72, 100, 188, 57, 76, 82, 62, 249, 124, 134, 62, 149, 48, 171, 190, 213, 118, 39, 62, 183, 195, 155, 189, 36, 156, 37, 190, 159, 134, 35, 62, 29, 151, 201, 189, 20, 103, 93, 61, 105, 90, 69, 61, 111, 0, 84, 61, 164, 29, 217, 62, 204, 7, 30, 191, 14, 144, 43, 190, 35, 119, 40, 62, 182, 76, 114, 61, 116, 70, 123, 61, 24, 148, 198, 61, 212, 105, 121, 190, 156, 114, 16, 61, 192, 46, 248, 61, 251, 59, 199, 190, 110, 77, 128, 62, 213, 0, 224, 189, 76, 194, 40, 190, 236, 151, 184, 190, 121, 223, 11, 61, 91, 241, 84, 60, 170, 221, 27, 62, 25, 107, 167, 60, 40, 209, 131, 62, 51, 122, 217, 62, 3, 140, 148, 61, 20, 62, 169, 61, 205, 226, 165, 190, 138, 155, 37, 63, 111, 235, 69, 59, 157, 195, 111, 190, 136, 122, 129, 190, 179, 83, 50, 189, 240, 54, 50, 62, 56, 243, 168, 189, 60, 96, 214, 60, 9, 244, 33, 191, 237, 242, 167, 60, 163, 227, 64, 189, 75, 211, 109, 191, 104, 17, 165, 189, 79, 235, 84, 191, 225, 141, 104, 190, 4, 108, 141, 190, 116, 14, 184, 62, 241, 136, 129, 62, 88, 229, 39, 62, 93, 88, 7, 191, 40, 173, 234, 189, 156, 48, 189, 62, 217, 83, 226, 188, 233, 148, 171, 190, 222, 253, 55, 63, 230, 76, 128, 190, 69, 215, 206, 191, 175, 92, 216, 190, 180, 129, 104, 61, 130, 46, 131, 190, 72, 76, 187, 61, 67, 242, 218, 60, 203, 74, 176, 190, 30, 244, 72, 190, 229, 10, 15, 191, 218, 119, 122, 62, 92, 52, 93, 191, 125, 39, 64, 191, 29, 90, 238, 61, 61, 202, 111, 187, 224, 83, 200, 189, 208, 41, 171, 62, 235, 1, 180, 189, 131, 24, 110, 61, 55, 228, 245, 188, 219, 239, 43, 62, 225, 255, 76, 190, 106, 100, 124, 61, 217, 22, 218, 62, 89, 115, 164, 62, 29, 146, 195, 61, 214, 129, 133, 61, 20, 58, 136, 189, 103, 219, 93, 62, 50, 95, 97, 184, 211, 161, 113, 61, 98, 233, 88, 61, 58, 229, 81, 62, 228, 163, 12, 190, 149, 175, 12, 62, 2, 204, 167, 62, 101, 167, 217, 188, 53, 178, 6, 62, 120, 234, 231, 189, 149, 48, 118, 62, 122, 254, 83, 187, 90, 80, 54, 62, 14, 153, 36, 62, 221, 185, 87, 191, 163, 146, 63, 62, 64, 144, 88, 190, 112, 216, 28, 61, 183, 241, 4, 63, 74, 157, 43, 63, 144, 5, 149, 62, 212, 152, 169, 62, 177, 33, 13, 190, 90, 164, 167, 189, 211, 37, 136, 62, 189, 134, 226, 62, 163, 72, 9, 191, 114, 0, 191, 190, 218, 224, 37, 63, 143, 42, 169, 191, 225, 191, 235, 62, 207, 100, 162, 190, 31, 53, 176, 190, 63, 113, 57, 189, 129, 105, 177, 62, 242, 126, 239, 190, 5, 208, 0, 62, 82, 75, 184, 190, 251, 121, 168, 191, 90, 240, 136, 191, 85, 57, 163, 191, 250, 161, 192, 61, 184, 245, 75, 191, 217, 209, 214, 62, 8, 21, 43, 62, 155, 247, 74, 189, 1, 220, 129, 62, 25, 255, 22, 189, 161, 44, 46, 62, 172, 140, 38, 62, 114, 88, 188, 190, 70, 41, 164, 189, 118, 193, 138, 62, 128, 149, 140, 190, 247, 17, 91, 61, 3, 145, 217, 62, 22, 17, 142, 62, 212, 13, 128, 62, 165, 5, 118, 61, 109, 96, 57, 62, 99, 251, 213, 61, 185, 58, 103, 61, 140, 41, 133, 62, 102, 195, 123, 61, 135, 84, 115, 62, 165, 239, 95, 189, 56, 229, 53, 62, 219, 87, 162, 188, 190, 243, 172, 62, 249, 20, 20, 190, 234, 185, 152, 190, 222, 255, 69, 190, 64, 189, 46, 62, 12, 231, 23, 187, 103, 18, 140, 191, 79, 101, 52, 189, 47, 16, 14, 62, 167, 32, 42, 62, 32, 42, 202, 189, 92, 240, 178, 190, 255, 205, 135, 62, 89, 136, 127, 61, 170, 50, 158, 62, 84, 181, 43, 191, 123, 127, 197, 61, 11, 17, 3, 62, 79, 106, 225, 61, 241, 226, 172, 190, 15, 3, 85, 188, 206, 216, 58, 189, 53, 205, 188, 190, 214, 230, 189, 189, 107, 119, 130, 190, 100, 205, 255, 188, 57, 253, 195, 190, 13, 42, 160, 190, 137, 10, 248, 189, 222, 38, 213, 61, 189, 21, 31, 62, 167, 64, 18, 188, 161, 48, 102, 190, 135, 135, 36, 62, 67, 175, 223, 62, 148, 250, 141, 62, 102, 202, 81, 190, 40, 183, 133, 58, 156, 53, 62, 63, 0, 229, 98, 190, 175, 150, 82, 187, 11, 205, 235, 189, 83, 114, 31, 189, 87, 119, 24, 62, 8, 141, 242, 61, 86, 152, 236, 61, 4, 199, 113, 190, 161, 29, 220, 189, 17, 13, 97, 62, 139, 218, 242, 189, 36, 161, 20, 190, 168, 19, 174, 62, 123, 29, 155, 62, 182, 51, 64, 62, 11, 175, 214, 61, 177, 0, 14, 190, 139, 176, 83, 189, 126, 214, 5, 190, 199, 246, 86, 62, 240, 13, 238, 189, 16, 134, 40, 62, 237, 145, 170, 190, 102, 73, 141, 189, 201, 135, 66, 62, 63, 160, 82, 60, 134, 224, 161, 61, 19, 55, 144, 190, 133, 137, 34, 190, 237, 42, 143, 189, 192, 126, 58, 61, 6, 59, 110, 191, 160, 3, 31, 61, 204, 54, 114, 62, 105, 96, 130, 62, 106, 50, 23, 62, 139, 58, 63, 61, 187, 206, 8, 61, 84, 19, 49, 62, 73, 203, 79, 62, 142, 189, 145, 191, 154, 75, 28, 61, 103, 137, 19, 58, 65, 46, 21, 190, 137, 156, 120, 62, 162, 230, 130, 190, 27, 120, 137, 190, 197, 64, 38, 62, 86, 5, 45, 62, 191, 149, 120, 190, 137, 1, 63, 62, 222, 0, 151, 191, 57, 36, 244, 189, 90, 167, 253, 189, 251, 119, 247, 61, 130, 135, 184, 189, 175, 126, 248, 59, 31, 74, 176, 189, 31, 232, 4, 62, 149, 83, 76, 62, 89, 4, 136, 62, 235, 6, 255, 189, 161, 174, 86, 191, 222, 85, 14, 63, 16, 90, 140, 189, 206, 227, 24, 62, 109, 189, 23, 189, 204, 141, 34, 191, 84, 67, 231, 60, 23, 139, 7, 191, 171, 5, 250, 60, 42, 112, 105, 190, 47, 75, 95, 61, 146, 234, 200, 61, 231, 52, 161, 189, 9, 223, 239, 189, 18, 84, 110, 62, 225, 130, 86, 62, 165, 194, 83, 62, 16, 146, 196, 188, 164, 10, 109, 190, 118, 248, 7, 189, 255, 212, 16, 62, 190, 150, 254, 61, 28, 27, 139, 190, 177, 82, 13, 62, 135, 73, 111, 190, 75, 111, 184, 190, 163, 72, 58, 190, 101, 143, 95, 62, 249, 196, 165, 190, 97, 39, 29, 191, 170, 70, 10, 190, 115, 5, 168, 189, 229, 243, 244, 60, 117, 89, 58, 191, 78, 180, 131, 62, 152, 13, 164, 62, 92, 87, 66, 62, 23, 52, 219, 186, 55, 141, 56, 191, 183, 127, 226, 60, 171, 205, 17, 61, 243, 153, 58, 190, 19, 149, 32, 62, 35, 188, 108, 62, 31, 103, 105, 190, 118, 60, 124, 61, 230, 206, 212, 62, 175, 134, 160, 61, 38, 19, 211, 62, 119, 173, 201, 188, 45, 178, 164, 61, 208, 146, 27, 59, 60, 221, 49, 190, 120, 196, 103, 62, 9, 242, 32, 61, 193, 10, 76, 62, 190, 97, 128, 190, 20, 143, 45, 190, 112, 176, 83, 189, 75, 42, 99, 62, 96, 23, 239, 189, 234, 80, 194, 189, 156, 202, 143, 190, 206, 11, 52, 190, 64, 180, 24, 61, 93, 238, 101, 191, 56, 210, 16, 62, 238, 176, 144, 62, 72, 176, 141, 60, 199, 121, 223, 61, 122, 40, 97, 190, 46, 193, 179, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 107, 18, 189, 79, 135, 150, 60, 174, 13, 189, 189, 96, 150, 44, 62, 100, 65, 25, 62, 180, 146, 219, 61, 170, 185, 20, 61, 78, 7, 5, 62, 65, 9, 202, 189, 30, 109, 218, 61, 233, 122, 159, 189, 13, 247, 165, 61, 92, 155, 78, 62, 70, 215, 49, 189, 150, 79, 115, 190, 5, 168, 14, 62, 202, 237, 167, 188, 196, 171, 15, 62, 78, 16, 241, 188, 78, 160, 230, 60, 208, 204, 34, 62, 81, 68, 151, 62, 209, 248, 152, 61, 23, 238, 10, 62, 1, 181, 242, 61, 221, 157, 227, 190, 205, 5, 183, 61, 63, 140, 201, 189, 103, 214, 169, 62, 13, 26, 35, 61, 254, 108, 93, 62, 176, 254, 9, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 8, 8, 190, 149, 185, 112, 63, 78, 46, 240, 187, 14, 107, 215, 60, 45, 150, 183, 189, 207, 82, 121, 191, 59, 29, 193, 63, 92, 97, 248, 58, 147, 164, 102, 63, 170, 122, 109, 62, 48, 196, 215, 190, 7, 104, 27, 191, 64, 204, 202, 62, 253, 225, 145, 63, 115, 65, 101, 191, 186, 88, 141, 63, 240, 144, 194, 189, 164, 228, 29, 62, 141, 118, 131, 189, 53, 242, 123, 191, 38, 122, 41, 60, 162, 232, 230, 62, 72, 197, 221, 62, 133, 164, 132, 191, 29, 229, 174, 190, 122, 10, 201, 63, 146, 241, 215, 190, 179, 44, 34, 63, 190, 14, 91, 190, 94, 125, 241, 190, 154, 203, 19, 191, 102, 160, 200, 190, 221, 174, 145, 61, 12, 7, 198, 61, 237, 157, 192, 189, 158, 104, 108, 190, 204, 207, 148, 190, 88, 200, 38, 189, 147, 233, 136, 62, 43, 206, 31, 190, 200, 69, 92, 62, 43, 9, 33, 190, 98, 186, 24, 190, 13, 253, 139, 62, 101, 6, 80, 189, 89, 8, 170, 62, 149, 249, 82, 63, 123, 21, 169, 189, 170, 158, 132, 60, 207, 80, 166, 190, 213, 98, 120, 189, 217, 224, 187, 60, 143, 221, 113, 60, 135, 125, 134, 189, 0, 85, 8, 190, 46, 171, 239, 61, 31, 122, 149, 189, 32, 221, 141, 62, 141, 128, 95, 189, 168, 173, 0, 62, 248, 198, 115, 190, 115, 203, 14, 62, 83, 178, 193, 59, 15, 146, 96, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 68, 232, 189, 232, 86, 174, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {161, 242, 16, 191, 230, 132, 135, 190, 251, 153, 24, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {37, 161, 12, 192, 163, 43, 97, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0035/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}