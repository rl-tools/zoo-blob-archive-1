// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 37, 139, 62, 132, 77, 176, 190, 25, 195, 87, 60, 77, 52, 188, 62, 119, 19, 20, 63, 146, 200, 171, 190, 140, 208, 48, 63, 110, 95, 100, 63, 150, 154, 133, 62, 221, 232, 206, 190, 4, 115, 22, 63, 89, 232, 36, 191, 7, 27, 196, 190, 8, 136, 22, 63, 88, 228, 21, 190, 142, 82, 132, 62, 138, 126, 175, 190, 140, 45, 162, 187, 70, 125, 121, 63, 105, 97, 196, 60, 213, 233, 0, 62, 19, 114, 3, 188, 144, 86, 21, 63, 246, 141, 60, 190, 146, 124, 30, 63, 63, 123, 202, 58, 235, 45, 237, 62, 109, 22, 66, 190, 86, 208, 171, 191, 211, 230, 219, 190, 112, 16, 106, 190, 59, 14, 160, 191, 254, 140, 34, 190, 192, 49, 14, 63, 132, 155, 135, 63, 151, 252, 216, 62, 217, 22, 46, 63, 37, 63, 132, 191, 28, 19, 133, 190, 59, 204, 132, 63, 89, 192, 169, 63, 78, 17, 169, 62, 138, 99, 211, 190, 112, 86, 243, 191, 148, 143, 2, 191, 193, 152, 204, 190, 207, 126, 249, 61, 137, 4, 195, 190, 63, 225, 84, 62, 165, 198, 72, 190, 74, 162, 223, 190, 41, 179, 197, 190, 248, 121, 81, 191, 247, 197, 180, 62, 172, 201, 205, 62, 90, 157, 254, 190, 199, 60, 181, 62, 94, 163, 4, 63, 149, 244, 43, 63, 247, 32, 124, 62, 194, 135, 180, 189, 134, 44, 155, 62, 110, 81, 18, 63, 106, 144, 22, 63, 89, 207, 87, 191, 255, 158, 1, 191, 56, 236, 61, 63, 108, 242, 140, 191, 187, 91, 13, 191, 144, 96, 148, 61, 103, 228, 23, 191, 206, 100, 246, 188, 176, 156, 200, 190, 132, 225, 162, 63, 100, 51, 34, 62, 7, 202, 42, 63, 242, 166, 71, 191, 5, 187, 109, 190, 142, 68, 146, 62, 238, 51, 225, 62, 134, 58, 1, 191, 9, 147, 56, 63, 59, 223, 132, 190, 253, 77, 11, 63, 163, 128, 111, 191, 123, 201, 149, 189, 21, 117, 1, 60, 152, 237, 80, 62, 40, 156, 189, 63, 110, 22, 30, 61, 86, 41, 86, 190, 152, 216, 49, 63, 77, 54, 45, 63, 95, 198, 210, 190, 209, 173, 45, 63, 221, 116, 157, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 183, 19, 191, 30, 80, 217, 189, 11, 91, 239, 189, 21, 70, 102, 62, 199, 228, 182, 190, 52, 21, 11, 191, 106, 74, 255, 61, 185, 227, 4, 63, 80, 26, 172, 190, 219, 44, 205, 189, 149, 131, 9, 63, 18, 67, 68, 190, 121, 44, 16, 63, 83, 237, 222, 61, 105, 147, 191, 190, 238, 255, 7, 190, 166, 240, 203, 188, 154, 112, 174, 190, 48, 200, 25, 63, 94, 207, 4, 63, 97, 144, 125, 62, 148, 107, 244, 190, 196, 204, 140, 62, 8, 239, 166, 62, 2, 249, 49, 63, 221, 120, 168, 190, 128, 59, 211, 61, 107, 210, 228, 190, 27, 34, 53, 63, 51, 134, 224, 62, 7, 159, 40, 189, 57, 29, 222, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 158, 198, 188, 183, 252, 245, 61, 51, 24, 44, 188, 1, 194, 156, 189, 101, 16, 175, 188, 200, 243, 12, 62, 25, 6, 29, 62, 18, 50, 222, 61, 62, 190, 116, 189, 103, 53, 44, 190, 8, 133, 95, 189, 182, 233, 181, 189, 142, 141, 131, 189, 91, 166, 42, 190, 67, 219, 196, 189, 100, 145, 140, 189, 77, 192, 53, 61, 42, 40, 2, 190, 163, 31, 118, 189, 60, 168, 45, 190, 104, 85, 235, 60, 154, 116, 30, 61, 25, 237, 247, 59, 108, 56, 187, 187, 88, 138, 13, 190, 37, 78, 130, 188, 195, 16, 164, 60, 99, 243, 4, 61, 131, 152, 125, 189, 159, 154, 157, 189, 154, 252, 26, 62, 47, 5, 193, 61, 251, 121, 47, 190, 221, 13, 81, 191, 33, 199, 44, 191, 134, 226, 118, 189, 141, 195, 163, 61, 103, 50, 12, 190, 165, 122, 227, 190, 233, 218, 6, 190, 167, 10, 215, 188, 72, 189, 41, 191, 193, 244, 40, 189, 88, 114, 111, 189, 76, 108, 37, 63, 88, 11, 140, 190, 177, 166, 211, 191, 237, 77, 163, 189, 213, 202, 36, 189, 204, 36, 35, 190, 215, 164, 74, 62, 210, 235, 225, 189, 38, 161, 163, 60, 10, 104, 141, 189, 109, 111, 149, 61, 55, 62, 226, 61, 152, 212, 83, 62, 247, 120, 158, 62, 231, 116, 33, 191, 169, 150, 99, 61, 85, 220, 153, 62, 118, 3, 116, 190, 254, 58, 164, 61, 121, 89, 233, 61, 149, 237, 75, 61, 38, 225, 130, 190, 27, 54, 136, 61, 161, 188, 132, 61, 201, 244, 160, 189, 59, 159, 219, 61, 82, 60, 130, 190, 213, 254, 97, 188, 211, 106, 180, 189, 177, 19, 197, 60, 179, 149, 54, 189, 217, 233, 189, 189, 234, 214, 139, 189, 145, 110, 51, 61, 249, 86, 204, 61, 203, 123, 45, 61, 59, 64, 160, 189, 5, 83, 104, 61, 147, 250, 206, 189, 151, 161, 44, 190, 98, 161, 161, 60, 224, 44, 54, 59, 132, 7, 200, 189, 105, 42, 173, 61, 149, 207, 4, 189, 208, 15, 83, 61, 14, 182, 154, 61, 156, 42, 182, 60, 132, 11, 72, 189, 181, 255, 20, 189, 246, 229, 34, 189, 49, 13, 71, 190, 91, 212, 228, 189, 92, 144, 200, 62, 132, 106, 199, 190, 162, 230, 4, 189, 13, 200, 92, 62, 153, 7, 49, 190, 109, 104, 217, 189, 61, 178, 237, 61, 182, 46, 48, 61, 58, 246, 159, 189, 164, 96, 253, 61, 42, 115, 5, 189, 67, 117, 141, 62, 89, 189, 129, 61, 9, 10, 134, 61, 226, 236, 36, 190, 209, 119, 134, 61, 79, 86, 201, 189, 133, 51, 132, 62, 69, 162, 6, 61, 222, 22, 175, 61, 44, 85, 50, 60, 15, 249, 133, 60, 71, 75, 54, 61, 252, 113, 67, 62, 61, 186, 35, 62, 46, 10, 142, 61, 82, 197, 124, 190, 104, 35, 234, 61, 4, 50, 60, 62, 253, 129, 155, 189, 22, 52, 211, 185, 71, 120, 241, 61, 34, 146, 73, 190, 137, 132, 220, 60, 250, 125, 20, 62, 179, 255, 223, 187, 199, 219, 143, 61, 20, 133, 144, 62, 190, 209, 105, 62, 70, 82, 174, 62, 255, 196, 218, 61, 64, 244, 183, 57, 248, 38, 108, 190, 164, 175, 26, 62, 68, 10, 27, 62, 27, 74, 160, 61, 167, 67, 165, 62, 200, 159, 34, 190, 198, 8, 188, 190, 94, 252, 102, 189, 183, 47, 144, 62, 170, 116, 23, 190, 164, 224, 35, 189, 157, 140, 215, 188, 13, 109, 140, 62, 252, 28, 22, 189, 66, 116, 189, 190, 158, 117, 20, 189, 143, 97, 81, 62, 61, 117, 193, 188, 118, 255, 31, 62, 211, 83, 9, 190, 104, 241, 147, 61, 138, 244, 2, 189, 17, 84, 72, 62, 101, 67, 30, 61, 114, 82, 29, 190, 245, 48, 240, 189, 45, 199, 33, 61, 9, 182, 8, 191, 112, 223, 235, 189, 9, 44, 164, 190, 176, 95, 148, 190, 130, 174, 181, 61, 73, 101, 48, 190, 38, 157, 140, 191, 58, 59, 49, 190, 75, 201, 237, 190, 115, 3, 11, 188, 205, 234, 175, 190, 22, 90, 182, 61, 179, 9, 78, 62, 1, 189, 200, 189, 152, 110, 148, 62, 200, 255, 173, 190, 20, 53, 3, 191, 36, 183, 139, 62, 141, 25, 162, 62, 92, 24, 138, 189, 89, 140, 47, 190, 18, 98, 156, 190, 177, 173, 170, 62, 126, 32, 148, 61, 244, 90, 164, 62, 15, 27, 24, 62, 222, 73, 237, 189, 45, 172, 39, 191, 233, 125, 246, 190, 209, 104, 89, 61, 238, 111, 29, 62, 150, 106, 254, 189, 250, 243, 148, 190, 235, 18, 147, 61, 79, 238, 18, 61, 85, 253, 217, 191, 127, 55, 50, 62, 226, 205, 90, 190, 180, 127, 95, 62, 73, 200, 106, 190, 139, 225, 38, 192, 78, 249, 90, 189, 35, 255, 51, 62, 221, 54, 229, 188, 181, 78, 89, 190, 149, 99, 11, 189, 106, 92, 84, 62, 48, 55, 29, 190, 66, 49, 159, 190, 97, 199, 68, 60, 229, 199, 2, 63, 64, 176, 136, 62, 173, 61, 86, 191, 42, 45, 248, 189, 81, 165, 2, 63, 131, 150, 116, 61, 136, 217, 200, 188, 156, 77, 196, 62, 17, 78, 255, 61, 217, 60, 133, 62, 38, 119, 203, 190, 167, 67, 16, 190, 250, 237, 110, 62, 80, 160, 37, 190, 233, 159, 18, 190, 221, 217, 224, 60, 150, 163, 201, 61, 145, 105, 15, 190, 148, 4, 92, 62, 117, 182, 143, 190, 81, 61, 225, 61, 16, 148, 250, 189, 77, 153, 149, 189, 50, 146, 36, 190, 170, 72, 213, 61, 58, 225, 26, 189, 150, 215, 138, 62, 207, 13, 139, 190, 1, 194, 6, 62, 192, 213, 212, 188, 34, 53, 131, 189, 29, 178, 235, 60, 224, 49, 154, 190, 163, 252, 58, 62, 58, 88, 103, 61, 216, 245, 224, 61, 23, 222, 103, 188, 216, 229, 179, 189, 247, 156, 51, 190, 38, 174, 110, 60, 48, 187, 196, 189, 221, 37, 226, 61, 3, 139, 96, 191, 90, 243, 154, 189, 49, 117, 162, 61, 213, 9, 42, 190, 207, 195, 66, 190, 191, 201, 203, 61, 73, 6, 83, 190, 201, 171, 63, 189, 203, 114, 33, 190, 132, 55, 178, 190, 8, 250, 28, 60, 66, 134, 207, 190, 220, 29, 168, 190, 138, 154, 144, 189, 69, 190, 89, 61, 87, 232, 189, 189, 171, 215, 120, 62, 249, 236, 139, 190, 148, 57, 147, 62, 183, 135, 13, 63, 56, 97, 195, 62, 82, 54, 143, 189, 9, 239, 34, 190, 125, 21, 50, 63, 110, 144, 22, 61, 102, 147, 166, 189, 241, 236, 199, 190, 107, 104, 175, 189, 239, 194, 27, 62, 214, 106, 146, 190, 173, 54, 149, 189, 171, 98, 120, 60, 119, 19, 246, 190, 242, 73, 64, 60, 221, 145, 80, 191, 106, 227, 24, 62, 14, 13, 130, 62, 140, 10, 247, 188, 56, 235, 214, 60, 28, 160, 106, 190, 185, 192, 174, 62, 25, 88, 198, 190, 79, 127, 66, 62, 211, 248, 157, 61, 203, 201, 171, 188, 103, 86, 206, 190, 8, 194, 245, 188, 218, 188, 157, 62, 30, 255, 173, 62, 79, 54, 0, 62, 5, 113, 91, 190, 86, 28, 159, 61, 184, 85, 3, 62, 44, 7, 32, 62, 81, 4, 9, 191, 131, 235, 148, 62, 50, 173, 36, 62, 203, 233, 191, 189, 51, 121, 176, 61, 29, 37, 171, 190, 245, 41, 189, 190, 189, 18, 44, 190, 136, 32, 162, 189, 210, 126, 139, 190, 66, 249, 102, 62, 42, 113, 182, 62, 190, 175, 161, 190, 95, 166, 47, 190, 12, 206, 146, 62, 210, 149, 82, 62, 141, 35, 221, 62, 142, 117, 135, 189, 201, 136, 2, 190, 27, 127, 135, 189, 184, 68, 182, 61, 114, 36, 14, 62, 31, 10, 116, 189, 20, 36, 153, 62, 118, 76, 99, 190, 106, 227, 245, 61, 93, 2, 185, 59, 28, 170, 51, 62, 194, 255, 157, 190, 189, 18, 1, 191, 226, 147, 185, 190, 177, 234, 110, 190, 134, 162, 136, 61, 162, 186, 109, 191, 210, 158, 32, 62, 219, 248, 168, 62, 82, 2, 182, 189, 170, 209, 122, 62, 148, 84, 14, 190, 81, 102, 134, 62, 47, 136, 225, 189, 17, 156, 79, 190, 142, 140, 62, 62, 195, 219, 31, 61, 176, 56, 17, 190, 124, 201, 45, 62, 105, 228, 66, 60, 71, 184, 155, 60, 251, 242, 150, 58, 100, 114, 35, 62, 234, 65, 20, 61, 135, 3, 23, 59, 19, 191, 170, 190, 111, 5, 123, 62, 19, 215, 191, 62, 128, 190, 161, 62, 225, 191, 184, 188, 48, 237, 229, 61, 22, 1, 66, 190, 58, 198, 145, 190, 112, 205, 99, 190, 137, 53, 67, 190, 154, 133, 60, 189, 157, 144, 194, 60, 154, 114, 153, 190, 213, 180, 3, 191, 200, 190, 6, 62, 28, 190, 136, 62, 196, 178, 205, 62, 190, 143, 21, 191, 75, 5, 201, 189, 212, 94, 77, 190, 201, 204, 232, 189, 58, 113, 178, 62, 30, 253, 233, 190, 8, 123, 93, 190, 245, 161, 235, 61, 34, 252, 27, 189, 3, 7, 11, 190, 177, 51, 64, 189, 59, 243, 212, 189, 117, 211, 132, 189, 93, 179, 37, 190, 48, 126, 93, 190, 79, 32, 210, 61, 96, 101, 139, 189, 30, 99, 54, 190, 93, 225, 31, 190, 228, 129, 121, 62, 82, 65, 248, 188, 13, 44, 41, 62, 238, 202, 58, 190, 26, 158, 159, 62, 196, 244, 188, 62, 33, 235, 140, 62, 242, 161, 79, 188, 80, 150, 44, 190, 77, 220, 233, 62, 224, 120, 25, 190, 76, 157, 202, 190, 163, 184, 114, 59, 158, 248, 43, 61, 157, 95, 180, 188, 211, 79, 30, 189, 121, 98, 98, 188, 128, 50, 96, 190, 65, 135, 84, 191, 80, 59, 185, 190, 35, 255, 171, 190, 236, 32, 198, 188, 26, 58, 98, 62, 199, 168, 245, 190, 188, 171, 180, 59, 152, 193, 77, 62, 239, 238, 58, 62, 123, 77, 74, 191, 21, 113, 127, 62, 185, 50, 114, 190, 230, 227, 17, 190, 95, 179, 172, 190, 73, 180, 84, 188, 190, 205, 169, 62, 37, 229, 78, 62, 120, 96, 22, 189, 242, 146, 154, 61, 242, 56, 239, 189, 91, 186, 20, 190, 61, 79, 13, 63, 90, 204, 144, 191, 145, 82, 183, 62, 147, 23, 110, 189, 158, 74, 121, 61, 97, 174, 21, 189, 72, 89, 58, 191, 163, 119, 247, 189, 43, 133, 155, 190, 71, 193, 96, 59, 194, 216, 62, 62, 129, 8, 152, 191, 188, 125, 142, 188, 13, 204, 203, 62, 121, 3, 252, 189, 82, 201, 31, 63, 205, 245, 230, 60, 83, 127, 129, 190, 26, 3, 240, 189, 147, 164, 215, 189, 127, 100, 155, 190, 91, 231, 162, 61, 187, 215, 120, 191, 43, 184, 34, 190, 194, 36, 215, 190, 102, 194, 61, 62, 188, 51, 81, 62, 195, 23, 141, 61, 109, 163, 254, 61, 222, 191, 148, 61, 213, 211, 67, 62, 86, 28, 40, 60, 35, 52, 105, 61, 33, 41, 170, 190, 238, 83, 184, 62, 89, 214, 249, 188, 10, 125, 118, 189, 198, 78, 147, 190, 186, 86, 181, 190, 198, 101, 206, 189, 63, 99, 15, 191, 156, 206, 0, 62, 185, 221, 30, 191, 250, 94, 43, 191, 181, 131, 67, 190, 110, 152, 96, 62, 0, 22, 4, 62, 245, 166, 69, 190, 226, 135, 40, 190, 111, 243, 20, 190, 122, 134, 14, 191, 5, 130, 33, 62, 170, 172, 205, 189, 203, 220, 105, 62, 89, 37, 148, 190, 135, 135, 241, 191, 40, 1, 14, 191, 102, 88, 53, 189, 119, 228, 155, 190, 182, 68, 113, 62, 193, 74, 22, 61, 235, 116, 117, 62, 100, 165, 47, 189, 28, 109, 203, 61, 17, 101, 157, 62, 43, 170, 188, 62, 74, 140, 231, 61, 251, 205, 135, 191, 180, 236, 226, 189, 3, 146, 177, 62, 29, 9, 156, 60, 83, 124, 52, 62, 174, 149, 143, 62, 23, 253, 221, 61, 14, 132, 231, 189, 27, 162, 246, 61, 238, 172, 137, 60, 229, 165, 218, 189, 222, 213, 93, 60, 179, 182, 25, 190, 80, 232, 132, 61, 129, 20, 232, 61, 189, 52, 19, 190, 197, 161, 66, 189, 114, 231, 85, 189, 157, 227, 52, 190, 13, 9, 14, 190, 112, 235, 32, 62, 122, 59, 27, 61, 161, 223, 23, 190, 110, 235, 91, 190, 171, 133, 149, 61, 4, 41, 180, 61, 37, 211, 137, 189, 159, 241, 143, 61, 223, 143, 166, 61, 159, 20, 23, 190, 247, 34, 7, 190, 187, 48, 27, 188, 110, 179, 90, 188, 6, 38, 3, 190, 77, 140, 220, 61, 146, 22, 53, 190, 205, 100, 140, 60, 98, 212, 147, 190, 199, 85, 117, 61, 237, 21, 139, 62, 255, 208, 16, 191, 93, 180, 232, 60, 181, 35, 163, 61, 40, 116, 5, 190, 253, 135, 1, 190, 31, 123, 113, 190, 69, 144, 63, 189, 199, 200, 191, 60, 208, 136, 131, 62, 47, 60, 160, 190, 116, 103, 151, 62, 127, 224, 231, 189, 111, 188, 145, 190, 183, 25, 158, 60, 103, 169, 147, 61, 53, 119, 215, 189, 6, 179, 244, 61, 82, 110, 62, 190, 26, 132, 47, 62, 140, 168, 129, 62, 224, 204, 27, 62, 146, 213, 1, 62, 44, 176, 249, 189, 206, 118, 12, 63, 92, 18, 221, 61, 234, 136, 92, 61, 231, 134, 8, 190, 176, 68, 238, 61, 242, 41, 156, 61, 11, 245, 28, 187, 250, 190, 237, 59, 125, 77, 48, 189, 10, 196, 48, 190, 77, 41, 17, 61, 24, 168, 72, 59, 16, 245, 164, 189, 66, 20, 237, 60, 190, 11, 8, 190, 165, 70, 21, 62, 146, 159, 180, 61, 72, 194, 31, 190, 129, 129, 183, 189, 191, 214, 25, 190, 181, 245, 148, 61, 125, 54, 205, 188, 99, 71, 232, 61, 245, 221, 25, 188, 2, 117, 244, 189, 160, 167, 10, 190, 73, 161, 35, 186, 116, 50, 180, 187, 171, 132, 34, 62, 156, 132, 189, 189, 248, 252, 228, 189, 201, 246, 138, 189, 160, 249, 35, 190, 93, 3, 10, 189, 107, 140, 4, 190, 229, 48, 91, 61, 57, 85, 254, 61, 250, 216, 0, 62, 241, 189, 67, 190, 177, 67, 184, 189, 197, 150, 153, 60, 120, 59, 188, 62, 143, 219, 130, 62, 15, 139, 210, 188, 26, 17, 9, 62, 40, 133, 4, 63, 205, 28, 159, 62, 121, 135, 202, 189, 0, 195, 150, 189, 118, 21, 206, 190, 151, 145, 188, 190, 31, 104, 130, 189, 37, 79, 66, 62, 244, 151, 125, 190, 216, 138, 134, 62, 21, 5, 132, 190, 76, 12, 43, 191, 123, 134, 28, 191, 28, 145, 51, 62, 79, 159, 14, 191, 78, 150, 248, 190, 162, 227, 173, 190, 1, 91, 164, 190, 82, 229, 150, 62, 61, 182, 173, 191, 50, 11, 211, 61, 71, 24, 198, 190, 184, 20, 84, 62, 176, 234, 182, 62, 220, 26, 131, 190, 72, 31, 177, 61, 149, 165, 154, 188, 238, 157, 252, 58, 18, 41, 20, 191, 167, 93, 65, 189, 244, 177, 177, 190, 65, 50, 16, 190, 225, 55, 167, 188, 235, 185, 52, 60, 126, 115, 189, 190, 252, 122, 1, 190, 112, 148, 151, 189, 179, 104, 189, 189, 79, 77, 10, 62, 145, 31, 196, 190, 76, 162, 195, 59, 26, 129, 233, 190, 218, 56, 225, 189, 177, 21, 30, 190, 125, 28, 37, 188, 149, 105, 211, 61, 138, 169, 97, 62, 64, 121, 48, 190, 101, 237, 2, 62, 111, 236, 32, 62, 157, 171, 64, 62, 87, 121, 128, 61, 17, 172, 184, 61, 226, 42, 51, 190, 208, 190, 178, 62, 78, 222, 249, 188, 136, 200, 25, 62, 119, 227, 60, 62, 16, 115, 30, 62, 134, 160, 41, 62, 208, 142, 9, 191, 22, 122, 161, 190, 46, 15, 130, 190, 115, 210, 152, 189, 253, 139, 254, 61, 145, 252, 68, 60, 245, 90, 220, 189, 95, 20, 66, 190, 138, 5, 175, 62, 88, 206, 1, 191, 203, 164, 139, 62, 109, 183, 66, 190, 189, 223, 233, 190, 56, 226, 89, 191, 116, 157, 115, 62, 188, 165, 130, 61, 170, 170, 67, 62, 183, 213, 146, 62, 93, 75, 248, 189, 5, 150, 10, 61, 12, 209, 89, 62, 166, 39, 135, 62, 198, 106, 150, 190, 174, 116, 42, 62, 130, 189, 50, 188, 219, 109, 35, 190, 92, 195, 86, 62, 42, 198, 197, 189, 35, 43, 150, 61, 83, 56, 4, 62, 111, 0, 84, 61, 200, 139, 219, 62, 233, 182, 32, 191, 170, 246, 34, 190, 171, 131, 43, 62, 182, 76, 114, 61, 233, 212, 131, 61, 195, 124, 227, 61, 57, 244, 106, 190, 49, 68, 53, 61, 23, 54, 11, 62, 141, 153, 202, 190, 32, 17, 131, 62, 162, 43, 237, 189, 107, 180, 38, 190, 70, 192, 182, 190, 101, 247, 46, 61, 88, 116, 78, 61, 128, 188, 33, 62, 240, 104, 180, 60, 247, 104, 134, 62, 33, 214, 223, 62, 11, 128, 154, 61, 53, 251, 181, 61, 245, 50, 156, 190, 32, 6, 36, 63, 172, 149, 167, 60, 127, 15, 95, 190, 123, 176, 99, 190, 247, 5, 62, 189, 208, 130, 79, 62, 163, 34, 85, 189, 60, 96, 214, 60, 246, 156, 35, 191, 237, 242, 167, 60, 114, 84, 15, 190, 1, 99, 113, 191, 104, 17, 165, 189, 21, 155, 104, 191, 104, 176, 171, 190, 126, 101, 147, 190, 222, 167, 176, 62, 37, 71, 129, 62, 88, 229, 39, 62, 169, 206, 5, 191, 40, 173, 234, 189, 198, 38, 182, 62, 185, 189, 0, 190, 230, 158, 195, 190, 137, 5, 71, 63, 2, 101, 76, 190, 27, 79, 213, 191, 255, 213, 206, 190, 92, 247, 3, 61, 244, 39, 138, 190, 90, 253, 207, 61, 128, 231, 34, 189, 183, 116, 178, 190, 14, 201, 124, 190, 93, 218, 12, 191, 40, 211, 94, 62, 233, 115, 91, 191, 193, 186, 72, 191, 203, 48, 47, 61, 61, 202, 111, 187, 179, 212, 244, 189, 223, 104, 176, 62, 40, 134, 207, 189, 133, 92, 83, 61, 55, 228, 245, 188, 82, 37, 48, 62, 78, 21, 108, 190, 131, 136, 164, 61, 181, 142, 213, 62, 198, 3, 158, 62, 172, 206, 235, 61, 76, 16, 114, 61, 48, 62, 105, 189, 198, 136, 88, 62, 159, 145, 71, 188, 248, 211, 24, 61, 205, 200, 52, 61, 83, 121, 95, 62, 10, 136, 7, 190, 17, 82, 34, 62, 163, 156, 158, 62, 242, 48, 26, 189, 153, 209, 1, 62, 62, 160, 45, 190, 176, 129, 120, 62, 158, 171, 30, 189, 218, 63, 74, 62, 197, 144, 245, 61, 126, 126, 92, 191, 194, 52, 64, 62, 103, 129, 140, 190, 112, 216, 28, 61, 64, 79, 251, 62, 143, 56, 39, 63, 220, 79, 141, 62, 120, 30, 162, 62, 177, 33, 13, 190, 175, 60, 253, 189, 16, 245, 131, 62, 63, 248, 220, 62, 251, 25, 14, 191, 91, 196, 149, 190, 114, 112, 35, 63, 64, 125, 182, 191, 7, 207, 224, 62, 11, 246, 118, 190, 27, 53, 176, 190, 207, 215, 31, 190, 164, 77, 185, 62, 59, 57, 245, 190, 37, 199, 224, 61, 161, 25, 185, 190, 6, 135, 179, 191, 86, 83, 156, 191, 3, 23, 163, 191, 133, 2, 215, 61, 142, 238, 75, 191, 47, 10, 197, 62, 184, 54, 29, 62, 116, 79, 137, 188, 228, 29, 128, 62, 201, 187, 23, 189, 72, 211, 62, 62, 172, 140, 38, 62, 234, 51, 191, 190, 59, 220, 130, 189, 2, 167, 135, 62, 76, 45, 139, 190, 247, 17, 91, 61, 30, 190, 216, 62, 255, 101, 132, 62, 19, 126, 137, 62, 128, 127, 67, 61, 162, 118, 36, 62, 197, 196, 7, 62, 143, 106, 68, 61, 219, 137, 138, 62, 149, 56, 95, 61, 74, 246, 111, 62, 96, 126, 130, 189, 170, 123, 45, 62, 107, 211, 24, 188, 96, 175, 174, 62, 252, 162, 243, 189, 56, 255, 162, 190, 187, 143, 79, 190, 93, 187, 40, 62, 191, 146, 173, 188, 140, 230, 140, 191, 62, 120, 128, 189, 163, 237, 33, 62, 131, 154, 4, 62, 16, 59, 209, 189, 125, 220, 173, 190, 67, 233, 116, 62, 89, 136, 127, 61, 252, 5, 155, 62, 97, 31, 64, 191, 222, 226, 185, 61, 201, 89, 243, 61, 79, 106, 225, 61, 108, 50, 177, 190, 52, 29, 137, 188, 72, 15, 109, 189, 189, 20, 193, 190, 144, 18, 221, 189, 241, 75, 139, 190, 76, 59, 28, 189, 179, 109, 209, 190, 13, 158, 168, 190, 67, 62, 1, 190, 247, 215, 194, 61, 82, 35, 21, 62, 73, 19, 129, 188, 79, 19, 122, 190, 246, 11, 24, 62, 159, 99, 219, 62, 244, 94, 137, 62, 114, 34, 93, 190, 98, 84, 8, 188, 124, 16, 58, 63, 22, 138, 102, 190, 228, 253, 117, 188, 15, 172, 11, 190, 56, 101, 34, 189, 168, 35, 11, 62, 81, 33, 224, 61, 86, 152, 236, 61, 249, 106, 116, 190, 9, 109, 191, 189, 41, 195, 93, 62, 153, 254, 245, 189, 36, 161, 20, 190, 150, 8, 174, 62, 227, 234, 148, 62, 13, 233, 56, 62, 246, 63, 173, 61, 235, 204, 33, 190, 136, 213, 31, 189, 138, 154, 8, 190, 85, 227, 99, 62, 168, 230, 11, 190, 50, 242, 34, 62, 242, 94, 176, 190, 132, 85, 236, 189, 3, 133, 66, 62, 126, 4, 143, 60, 123, 151, 172, 61, 63, 215, 159, 190, 213, 230, 43, 190, 75, 56, 152, 189, 177, 100, 71, 61, 28, 156, 113, 191, 130, 227, 173, 60, 16, 137, 107, 62, 106, 59, 97, 62, 30, 185, 38, 62, 44, 223, 217, 60, 107, 55, 211, 60, 84, 19, 49, 62, 36, 9, 76, 62, 140, 135, 150, 191, 71, 6, 245, 60, 13, 2, 21, 187, 65, 46, 21, 190, 59, 191, 97, 62, 219, 8, 139, 190, 170, 61, 146, 190, 3, 51, 41, 62, 160, 1, 47, 62, 241, 58, 111, 190, 50, 140, 61, 62, 76, 110, 151, 191, 164, 122, 229, 189, 227, 6, 4, 190, 218, 134, 239, 61, 13, 70, 17, 189, 218, 148, 41, 61, 105, 40, 58, 189, 225, 84, 38, 62, 172, 141, 82, 62, 139, 123, 135, 62, 47, 129, 252, 189, 207, 20, 116, 191, 138, 73, 19, 63, 205, 67, 154, 189, 187, 139, 13, 62, 117, 34, 79, 189, 112, 51, 58, 191, 2, 174, 211, 60, 187, 62, 30, 191, 171, 5, 250, 60, 175, 13, 125, 190, 48, 247, 98, 61, 52, 220, 161, 61, 23, 41, 214, 189, 9, 223, 239, 189, 82, 93, 111, 62, 0, 90, 46, 62, 246, 71, 110, 62, 100, 3, 82, 189, 193, 247, 110, 190, 65, 184, 3, 189, 45, 185, 18, 62, 3, 116, 255, 61, 166, 147, 144, 190, 255, 131, 253, 61, 96, 37, 129, 190, 230, 108, 239, 190, 177, 201, 45, 190, 114, 226, 93, 62, 188, 236, 132, 190, 189, 193, 37, 191, 16, 117, 17, 190, 55, 26, 147, 189, 10, 88, 44, 189, 149, 163, 58, 191, 136, 80, 103, 62, 20, 24, 182, 62, 235, 53, 191, 61, 78, 222, 229, 188, 228, 98, 59, 191, 140, 189, 129, 189, 171, 205, 17, 61, 148, 144, 83, 190, 54, 221, 55, 62, 105, 146, 81, 62, 4, 212, 131, 190, 118, 60, 124, 61, 177, 149, 215, 62, 176, 193, 67, 61, 80, 146, 223, 62, 115, 160, 115, 189, 246, 251, 131, 61, 76, 177, 6, 61, 27, 194, 55, 190, 55, 180, 121, 62, 174, 152, 48, 60, 12, 138, 49, 62, 22, 82, 141, 190, 217, 202, 45, 190, 91, 75, 25, 189, 47, 150, 109, 62, 1, 46, 174, 189, 21, 33, 9, 190, 75, 39, 150, 190, 72, 55, 52, 190, 242, 30, 63, 60, 107, 231, 102, 191, 116, 120, 218, 61, 243, 219, 157, 62, 123, 88, 207, 188, 84, 50, 204, 61, 210, 129, 78, 190, 35, 139, 99, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 107, 18, 189, 51, 253, 3, 61, 174, 13, 189, 189, 64, 141, 59, 62, 221, 234, 17, 62, 45, 159, 109, 61, 132, 95, 156, 61, 41, 176, 216, 61, 20, 197, 188, 189, 206, 222, 230, 61, 144, 127, 156, 189, 218, 6, 125, 61, 47, 222, 64, 62, 106, 242, 34, 189, 167, 232, 124, 190, 229, 54, 24, 62, 202, 237, 167, 188, 188, 14, 22, 62, 78, 16, 241, 188, 80, 128, 142, 60, 159, 149, 37, 62, 188, 112, 155, 62, 96, 196, 169, 61, 106, 197, 5, 62, 88, 51, 230, 61, 75, 166, 230, 190, 78, 134, 166, 61, 173, 77, 227, 189, 42, 208, 169, 62, 38, 24, 150, 60, 49, 204, 85, 62, 244, 7, 5, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 8, 8, 190, 79, 61, 95, 63, 78, 46, 240, 187, 0, 182, 183, 60, 255, 43, 147, 189, 120, 74, 109, 191, 248, 165, 204, 63, 127, 149, 194, 59, 199, 51, 94, 63, 50, 53, 102, 62, 0, 39, 192, 190, 245, 50, 21, 191, 231, 105, 169, 62, 8, 235, 142, 63, 190, 30, 96, 191, 236, 143, 139, 63, 240, 144, 194, 189, 242, 86, 1, 62, 141, 118, 131, 189, 168, 156, 121, 191, 97, 140, 253, 61, 83, 2, 228, 62, 140, 49, 203, 62, 165, 243, 135, 191, 221, 147, 170, 190, 174, 232, 199, 63, 255, 249, 196, 190, 14, 183, 26, 63, 170, 88, 70, 190, 135, 54, 0, 191, 172, 187, 250, 190, 16, 18, 189, 190, 221, 174, 145, 61, 91, 181, 214, 60, 237, 157, 192, 189, 124, 24, 138, 190, 95, 84, 161, 190, 85, 42, 52, 189, 74, 219, 89, 62, 2, 97, 48, 190, 241, 3, 33, 62, 159, 108, 43, 190, 107, 234, 17, 190, 231, 37, 149, 62, 46, 66, 243, 59, 168, 101, 94, 62, 72, 152, 94, 63, 115, 124, 82, 190, 170, 158, 132, 60, 32, 84, 177, 190, 213, 98, 120, 189, 143, 4, 157, 189, 46, 95, 241, 60, 30, 247, 113, 189, 209, 147, 212, 189, 239, 60, 186, 61, 255, 222, 45, 60, 136, 187, 137, 62, 116, 50, 155, 189, 8, 250, 75, 61, 79, 110, 103, 190, 108, 23, 64, 62, 64, 12, 234, 188, 51, 184, 219, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 229, 228, 189, 154, 111, 190, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {6, 196, 148, 191, 113, 74, 158, 191, 18, 186, 25, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {72, 131, 27, 192, 172, 190, 144, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0035/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}