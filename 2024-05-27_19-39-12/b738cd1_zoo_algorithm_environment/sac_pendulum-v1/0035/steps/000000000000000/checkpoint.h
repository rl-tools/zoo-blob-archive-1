// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 37, 139, 62, 132, 77, 176, 190, 25, 195, 87, 60, 154, 39, 226, 62, 44, 236, 100, 62, 142, 242, 143, 189, 26, 29, 48, 62, 22, 244, 180, 62, 167, 73, 107, 62, 31, 255, 150, 190, 153, 9, 251, 62, 14, 176, 254, 190, 107, 194, 131, 190, 47, 29, 179, 62, 34, 137, 221, 189, 142, 82, 132, 62, 138, 126, 175, 190, 140, 45, 162, 187, 80, 196, 10, 63, 200, 201, 95, 190, 122, 78, 66, 61, 165, 5, 152, 190, 199, 138, 160, 62, 197, 242, 143, 189, 214, 203, 118, 62, 140, 61, 159, 186, 168, 19, 187, 62, 136, 42, 159, 190, 53, 178, 81, 62, 87, 160, 205, 190, 189, 146, 23, 190, 129, 35, 15, 191, 252, 45, 224, 190, 88, 250, 9, 62, 171, 53, 141, 62, 224, 153, 206, 62, 232, 67, 121, 62, 94, 217, 221, 61, 96, 87, 178, 190, 250, 127, 234, 62, 217, 39, 0, 63, 204, 26, 18, 63, 130, 1, 90, 190, 3, 220, 136, 62, 219, 255, 188, 190, 48, 87, 199, 190, 54, 149, 204, 61, 150, 33, 140, 188, 15, 104, 167, 62, 128, 7, 192, 61, 126, 29, 138, 190, 22, 60, 55, 62, 231, 70, 12, 191, 139, 147, 194, 62, 72, 246, 234, 62, 226, 174, 253, 190, 71, 24, 130, 62, 67, 38, 179, 62, 49, 41, 202, 189, 64, 107, 134, 62, 138, 216, 120, 60, 187, 118, 168, 61, 63, 34, 168, 62, 47, 102, 65, 62, 116, 120, 154, 59, 195, 182, 227, 190, 132, 110, 16, 63, 20, 69, 248, 189, 173, 165, 11, 191, 35, 126, 209, 188, 76, 3, 130, 190, 152, 62, 83, 189, 207, 31, 115, 190, 194, 17, 103, 62, 206, 67, 6, 63, 49, 251, 203, 62, 254, 154, 61, 190, 88, 170, 189, 189, 71, 45, 188, 61, 107, 144, 228, 62, 249, 79, 183, 190, 165, 160, 3, 63, 250, 16, 253, 189, 238, 161, 1, 63, 36, 33, 0, 191, 79, 73, 205, 187, 135, 155, 92, 190, 116, 17, 60, 62, 122, 183, 135, 62, 134, 5, 103, 62, 144, 183, 227, 62, 242, 194, 231, 190, 209, 22, 245, 62, 211, 15, 125, 61, 240, 65, 156, 62, 184, 189, 33, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 183, 19, 191, 20, 105, 189, 190, 110, 100, 86, 189, 86, 52, 245, 62, 24, 50, 200, 190, 52, 21, 11, 191, 79, 176, 51, 189, 73, 179, 12, 63, 124, 124, 116, 189, 52, 147, 162, 62, 165, 148, 232, 62, 190, 102, 86, 189, 46, 190, 187, 62, 217, 154, 141, 61, 141, 89, 138, 60, 15, 167, 159, 61, 20, 211, 180, 60, 75, 242, 224, 190, 49, 101, 12, 63, 248, 221, 221, 62, 4, 52, 178, 62, 106, 185, 143, 190, 86, 8, 14, 63, 16, 117, 33, 62, 234, 255, 197, 62, 197, 180, 57, 190, 4, 109, 32, 61, 80, 153, 153, 190, 6, 118, 9, 63, 11, 196, 148, 62, 207, 162, 132, 190, 83, 53, 10, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 158, 198, 188, 108, 71, 28, 62, 144, 244, 21, 188, 252, 177, 254, 188, 38, 225, 36, 60, 200, 243, 12, 62, 179, 218, 37, 62, 228, 164, 49, 62, 227, 182, 136, 189, 67, 204, 2, 190, 175, 174, 171, 188, 211, 109, 185, 189, 9, 119, 24, 189, 113, 82, 45, 190, 93, 46, 113, 189, 154, 73, 18, 189, 157, 28, 156, 61, 235, 209, 14, 190, 165, 252, 108, 189, 23, 78, 25, 190, 128, 153, 250, 60, 240, 129, 148, 61, 159, 251, 15, 61, 89, 245, 86, 60, 95, 141, 223, 189, 35, 119, 34, 187, 252, 144, 94, 61, 152, 133, 178, 60, 41, 232, 158, 188, 242, 122, 47, 189, 197, 169, 20, 62, 224, 227, 24, 62, 251, 121, 47, 190, 88, 127, 132, 189, 175, 59, 45, 190, 171, 71, 102, 188, 193, 144, 83, 189, 103, 50, 12, 190, 13, 94, 13, 190, 128, 107, 196, 61, 172, 80, 161, 61, 206, 200, 10, 62, 190, 153, 131, 189, 188, 145, 245, 61, 48, 210, 168, 60, 152, 212, 251, 189, 232, 43, 13, 190, 101, 194, 3, 62, 101, 235, 221, 189, 61, 194, 29, 189, 210, 3, 240, 60, 227, 67, 157, 189, 72, 217, 8, 190, 79, 81, 105, 60, 192, 0, 108, 188, 206, 64, 180, 61, 145, 219, 72, 188, 58, 40, 160, 61, 230, 97, 51, 190, 143, 190, 49, 62, 56, 130, 40, 62, 196, 201, 206, 189, 173, 87, 37, 61, 187, 84, 196, 188, 149, 237, 75, 61, 3, 148, 181, 189, 23, 185, 201, 61, 220, 186, 228, 61, 101, 237, 136, 61, 59, 159, 219, 61, 245, 179, 159, 189, 159, 180, 87, 60, 35, 72, 76, 189, 2, 2, 83, 61, 124, 19, 245, 188, 53, 24, 93, 189, 81, 160, 227, 59, 81, 235, 161, 61, 134, 162, 18, 62, 16, 144, 189, 61, 203, 64, 163, 60, 171, 49, 247, 61, 202, 223, 165, 189, 162, 134, 149, 189, 172, 133, 190, 61, 244, 255, 235, 61, 38, 117, 187, 188, 73, 25, 146, 61, 144, 163, 135, 61, 220, 197, 15, 62, 189, 166, 16, 62, 193, 14, 130, 61, 242, 152, 93, 189, 77, 167, 132, 61, 17, 165, 19, 61, 8, 211, 39, 190, 91, 212, 228, 189, 155, 151, 52, 62, 213, 168, 237, 189, 89, 75, 38, 190, 113, 230, 237, 60, 153, 7, 49, 190, 170, 42, 208, 189, 169, 129, 41, 61, 71, 165, 187, 61, 153, 112, 32, 190, 126, 133, 65, 189, 165, 176, 32, 60, 156, 138, 169, 61, 89, 8, 239, 61, 35, 198, 239, 61, 143, 193, 38, 190, 27, 70, 0, 190, 242, 19, 38, 61, 160, 129, 41, 62, 70, 101, 44, 60, 193, 15, 143, 61, 217, 119, 225, 189, 144, 67, 45, 190, 32, 144, 41, 190, 92, 172, 246, 61, 232, 195, 228, 189, 82, 152, 94, 187, 14, 62, 39, 190, 238, 35, 202, 60, 33, 155, 171, 56, 53, 32, 32, 189, 138, 202, 12, 190, 71, 120, 241, 61, 247, 95, 11, 189, 189, 56, 32, 62, 194, 117, 193, 58, 158, 88, 110, 61, 199, 219, 143, 61, 246, 229, 135, 61, 134, 102, 23, 62, 231, 41, 52, 62, 119, 237, 160, 189, 151, 155, 12, 190, 49, 114, 40, 190, 240, 211, 138, 61, 192, 92, 23, 62, 154, 238, 198, 189, 42, 34, 41, 62, 236, 91, 203, 189, 164, 7, 211, 189, 93, 234, 247, 189, 131, 205, 46, 62, 64, 31, 6, 189, 42, 221, 18, 62, 124, 230, 21, 189, 79, 13, 207, 61, 247, 238, 106, 59, 244, 75, 21, 62, 109, 151, 113, 189, 217, 121, 69, 61, 193, 153, 63, 189, 27, 67, 232, 61, 137, 30, 129, 61, 86, 97, 190, 60, 138, 244, 2, 189, 135, 45, 102, 61, 252, 95, 16, 62, 106, 77, 253, 61, 100, 166, 32, 190, 45, 199, 33, 61, 156, 148, 29, 190, 30, 178, 14, 190, 134, 210, 15, 190, 149, 189, 219, 61, 191, 123, 41, 190, 146, 94, 79, 60, 205, 75, 237, 189, 102, 0, 11, 188, 239, 137, 221, 189, 16, 37, 197, 189, 4, 113, 137, 188, 161, 116, 31, 62, 247, 150, 31, 62, 195, 174, 240, 189, 2, 58, 5, 62, 129, 76, 139, 189, 8, 178, 253, 189, 212, 64, 232, 61, 250, 228, 35, 188, 184, 122, 41, 62, 70, 15, 161, 189, 105, 85, 36, 190, 104, 110, 22, 61, 72, 48, 51, 189, 239, 169, 6, 62, 44, 250, 42, 190, 222, 73, 237, 189, 66, 175, 90, 61, 241, 195, 115, 59, 83, 137, 131, 189, 13, 223, 120, 189, 150, 106, 254, 189, 129, 117, 21, 190, 119, 34, 5, 190, 252, 59, 39, 62, 45, 69, 33, 190, 119, 224, 229, 61, 23, 15, 137, 189, 17, 230, 1, 190, 109, 164, 228, 189, 85, 37, 97, 189, 59, 110, 30, 58, 143, 146, 195, 189, 69, 16, 34, 62, 7, 0, 49, 190, 237, 124, 246, 60, 54, 112, 250, 61, 160, 151, 220, 60, 112, 12, 219, 60, 237, 196, 41, 61, 243, 151, 223, 61, 209, 9, 69, 188, 172, 106, 219, 61, 161, 78, 163, 59, 173, 143, 248, 188, 206, 74, 8, 190, 77, 127, 49, 189, 12, 37, 17, 58, 17, 78, 255, 61, 134, 101, 93, 60, 255, 131, 6, 62, 244, 108, 255, 189, 156, 8, 105, 61, 80, 160, 37, 190, 205, 8, 14, 61, 151, 47, 25, 62, 238, 112, 10, 62, 35, 69, 41, 189, 0, 137, 47, 62, 87, 152, 6, 189, 67, 79, 244, 188, 196, 156, 213, 61, 36, 200, 207, 61, 199, 61, 144, 188, 167, 119, 211, 187, 190, 143, 158, 61, 76, 33, 41, 62, 36, 187, 30, 190, 2, 85, 141, 61, 74, 237, 36, 190, 126, 107, 30, 190, 181, 172, 2, 190, 35, 107, 244, 189, 14, 39, 251, 189, 8, 184, 249, 61, 205, 125, 8, 62, 98, 73, 6, 62, 181, 75, 218, 59, 214, 30, 226, 189, 195, 188, 9, 62, 48, 187, 196, 189, 13, 18, 34, 190, 209, 68, 111, 61, 19, 69, 7, 189, 124, 168, 245, 60, 213, 9, 42, 190, 146, 78, 195, 61, 188, 92, 12, 62, 106, 20, 194, 60, 95, 149, 163, 61, 200, 184, 77, 60, 88, 174, 28, 189, 100, 74, 20, 190, 142, 27, 55, 189, 237, 27, 33, 189, 132, 145, 144, 61, 89, 200, 241, 189, 247, 193, 108, 189, 8, 100, 171, 61, 172, 82, 184, 61, 5, 74, 28, 62, 109, 252, 32, 62, 131, 105, 49, 62, 154, 62, 120, 60, 122, 102, 195, 61, 162, 237, 32, 190, 99, 153, 139, 61, 80, 238, 232, 61, 10, 136, 216, 189, 236, 72, 116, 188, 51, 255, 158, 61, 68, 93, 26, 190, 173, 54, 149, 189, 40, 121, 48, 190, 153, 120, 37, 190, 65, 45, 217, 61, 253, 244, 253, 59, 106, 227, 24, 62, 186, 255, 27, 190, 143, 246, 32, 60, 32, 127, 23, 60, 230, 106, 31, 190, 85, 212, 233, 61, 223, 116, 32, 190, 51, 246, 4, 61, 109, 149, 56, 61, 11, 100, 175, 61, 216, 116, 20, 61, 154, 28, 127, 188, 10, 194, 140, 189, 134, 117, 158, 189, 124, 249, 1, 189, 61, 63, 38, 190, 236, 61, 201, 61, 247, 144, 85, 61, 59, 187, 13, 190, 56, 104, 7, 62, 66, 134, 66, 60, 63, 234, 17, 62, 51, 109, 96, 189, 109, 235, 252, 61, 136, 190, 237, 189, 96, 143, 26, 190, 164, 34, 126, 189, 136, 32, 162, 189, 5, 188, 166, 189, 192, 141, 125, 189, 58, 235, 220, 61, 89, 143, 42, 189, 95, 166, 47, 190, 180, 247, 168, 189, 115, 21, 96, 187, 215, 219, 37, 62, 58, 183, 219, 189, 59, 36, 128, 60, 45, 152, 19, 190, 238, 93, 138, 61, 173, 145, 203, 189, 226, 214, 110, 189, 240, 211, 222, 60, 134, 11, 141, 60, 79, 62, 42, 62, 83, 202, 178, 61, 38, 81, 129, 59, 75, 146, 15, 190, 189, 19, 142, 188, 188, 94, 38, 190, 67, 207, 28, 190, 50, 45, 14, 62, 189, 3, 212, 61, 157, 161, 144, 61, 236, 40, 53, 61, 224, 254, 50, 190, 255, 19, 34, 62, 14, 52, 136, 61, 233, 111, 52, 62, 47, 136, 225, 189, 18, 133, 103, 60, 218, 143, 185, 189, 14, 33, 138, 189, 202, 99, 144, 189, 124, 201, 45, 62, 249, 91, 178, 189, 191, 1, 2, 187, 109, 176, 218, 189, 212, 64, 56, 189, 21, 104, 19, 190, 59, 73, 252, 188, 223, 9, 67, 59, 206, 98, 43, 62, 216, 90, 208, 61, 176, 241, 181, 61, 77, 171, 155, 61, 124, 57, 240, 61, 1, 205, 55, 186, 147, 49, 239, 189, 156, 77, 201, 188, 176, 39, 78, 189, 218, 150, 18, 62, 60, 111, 83, 61, 35, 172, 63, 189, 52, 115, 48, 62, 162, 120, 8, 62, 21, 195, 28, 62, 27, 95, 16, 62, 211, 201, 137, 61, 141, 249, 209, 61, 153, 33, 85, 189, 201, 204, 232, 189, 172, 60, 245, 61, 137, 139, 250, 61, 196, 168, 33, 190, 87, 182, 186, 61, 34, 252, 27, 189, 203, 49, 239, 189, 171, 77, 1, 189, 70, 7, 239, 61, 177, 230, 169, 61, 43, 208, 232, 189, 50, 193, 57, 60, 247, 17, 112, 188, 135, 64, 34, 62, 136, 109, 190, 61, 37, 16, 71, 61, 78, 143, 207, 61, 128, 45, 147, 189, 118, 208, 167, 189, 185, 188, 173, 189, 117, 225, 202, 61, 67, 228, 135, 61, 63, 27, 191, 61, 174, 111, 34, 189, 27, 25, 147, 189, 201, 120, 10, 190, 34, 171, 222, 189, 69, 201, 50, 190, 224, 76, 116, 61, 190, 114, 218, 61, 27, 88, 40, 190, 187, 108, 225, 188, 121, 98, 98, 188, 139, 180, 97, 61, 192, 202, 49, 62, 193, 255, 233, 189, 178, 246, 50, 190, 236, 32, 198, 188, 242, 239, 201, 61, 56, 233, 209, 61, 228, 235, 6, 62, 233, 154, 48, 62, 20, 243, 24, 190, 1, 6, 20, 190, 38, 33, 199, 61, 16, 115, 40, 61, 141, 123, 60, 187, 166, 225, 203, 61, 21, 174, 22, 62, 21, 11, 149, 60, 202, 32, 41, 189, 84, 41, 64, 61, 119, 97, 136, 61, 247, 239, 10, 190, 48, 139, 232, 60, 207, 61, 27, 62, 135, 213, 139, 189, 230, 106, 163, 61, 179, 10, 134, 61, 18, 159, 235, 61, 22, 99, 90, 61, 10, 42, 32, 190, 67, 9, 245, 189, 158, 215, 228, 61, 71, 193, 96, 59, 230, 26, 39, 60, 55, 143, 92, 189, 234, 158, 166, 61, 78, 235, 39, 190, 121, 3, 252, 189, 153, 51, 2, 62, 31, 199, 7, 62, 252, 75, 176, 61, 150, 138, 63, 61, 57, 99, 77, 187, 193, 26, 224, 59, 55, 149, 37, 61, 7, 14, 201, 189, 84, 34, 141, 61, 61, 147, 146, 188, 127, 198, 30, 62, 171, 144, 68, 189, 165, 132, 214, 189, 50, 71, 225, 189, 188, 49, 195, 188, 121, 21, 222, 61, 205, 10, 220, 188, 37, 206, 40, 61, 229, 125, 47, 61, 34, 108, 200, 189, 104, 166, 54, 189, 133, 109, 144, 61, 25, 133, 17, 62, 74, 6, 52, 190, 247, 72, 231, 189, 132, 11, 52, 190, 156, 206, 0, 62, 125, 178, 2, 190, 129, 167, 11, 190, 95, 220, 146, 189, 210, 174, 51, 61, 0, 22, 4, 62, 108, 65, 82, 189, 5, 241, 133, 189, 96, 182, 81, 58, 111, 132, 39, 60, 71, 21, 125, 60, 154, 142, 223, 61, 6, 122, 44, 61, 74, 33, 195, 189, 30, 88, 204, 189, 172, 186, 100, 189, 137, 184, 21, 62, 54, 192, 44, 190, 65, 237, 253, 61, 112, 183, 141, 60, 186, 41, 5, 62, 160, 127, 82, 189, 237, 62, 220, 186, 241, 70, 47, 61, 167, 211, 167, 61, 68, 132, 42, 190, 154, 252, 196, 60, 236, 109, 9, 61, 223, 220, 246, 187, 91, 36, 60, 189, 128, 202, 38, 62, 110, 160, 14, 188, 23, 253, 221, 61, 176, 130, 207, 189, 98, 165, 251, 61, 14, 103, 29, 61, 69, 52, 157, 189, 222, 213, 93, 60, 191, 173, 0, 190, 174, 69, 232, 61, 190, 242, 20, 62, 38, 81, 249, 189, 170, 207, 140, 188, 28, 112, 36, 189, 27, 71, 29, 190, 32, 5, 246, 189, 66, 165, 45, 62, 51, 82, 133, 61, 209, 14, 18, 190, 19, 153, 44, 190, 176, 70, 34, 62, 82, 198, 9, 62, 209, 23, 161, 188, 21, 197, 139, 61, 40, 103, 205, 61, 232, 58, 193, 189, 226, 179, 131, 189, 151, 224, 50, 188, 125, 195, 182, 186, 27, 110, 206, 189, 194, 241, 25, 62, 208, 135, 19, 190, 10, 49, 102, 61, 250, 250, 31, 190, 199, 85, 117, 61, 123, 66, 225, 61, 156, 70, 2, 190, 219, 35, 128, 61, 4, 11, 244, 61, 40, 116, 5, 190, 168, 206, 254, 189, 78, 8, 48, 190, 136, 111, 47, 59, 62, 72, 184, 61, 239, 38, 48, 62, 137, 23, 36, 190, 210, 248, 234, 61, 170, 240, 222, 60, 203, 62, 217, 189, 116, 53, 12, 62, 208, 191, 162, 188, 53, 95, 23, 190, 80, 126, 119, 189, 62, 119, 2, 190, 206, 174, 1, 62, 187, 21, 213, 61, 6, 203, 121, 60, 54, 58, 172, 189, 54, 106, 235, 61, 85, 202, 1, 62, 172, 182, 207, 61, 138, 116, 4, 62, 159, 56, 51, 186, 32, 3, 53, 62, 10, 209, 116, 61, 98, 56, 212, 61, 250, 190, 237, 59, 219, 39, 10, 189, 103, 196, 19, 190, 108, 39, 120, 61, 111, 251, 25, 60, 16, 245, 164, 189, 146, 180, 220, 60, 210, 170, 194, 189, 240, 71, 38, 62, 39, 197, 216, 61, 77, 180, 22, 190, 107, 100, 129, 189, 234, 172, 17, 190, 162, 172, 200, 61, 90, 185, 19, 188, 244, 171, 11, 62, 191, 224, 83, 59, 235, 217, 225, 189, 24, 73, 6, 190, 161, 24, 67, 60, 231, 174, 180, 60, 217, 67, 48, 62, 248, 67, 152, 189, 167, 10, 237, 189, 5, 200, 41, 189, 253, 123, 34, 190, 235, 182, 131, 188, 224, 130, 236, 189, 213, 63, 140, 61, 188, 106, 21, 62, 33, 116, 22, 62, 73, 5, 38, 190, 177, 67, 184, 189, 5, 198, 213, 188, 221, 134, 50, 62, 97, 205, 152, 189, 47, 185, 154, 61, 26, 17, 9, 62, 107, 88, 238, 60, 32, 207, 9, 61, 82, 149, 11, 62, 118, 238, 9, 189, 27, 178, 140, 61, 74, 97, 163, 189, 53, 28, 227, 189, 102, 117, 19, 62, 4, 92, 52, 190, 98, 230, 66, 61, 54, 14, 44, 188, 182, 134, 152, 189, 142, 46, 9, 190, 162, 80, 25, 190, 105, 108, 7, 190, 103, 90, 149, 61, 9, 62, 198, 189, 238, 162, 44, 62, 226, 180, 245, 61, 145, 78, 177, 61, 104, 197, 24, 190, 222, 215, 55, 189, 102, 159, 254, 61, 187, 48, 146, 61, 0, 231, 226, 61, 203, 102, 167, 189, 149, 165, 154, 188, 65, 228, 16, 190, 2, 121, 242, 189, 36, 16, 131, 189, 31, 124, 133, 189, 65, 50, 16, 190, 152, 163, 162, 188, 10, 130, 160, 61, 216, 100, 254, 189, 241, 68, 28, 61, 161, 194, 5, 190, 206, 51, 23, 62, 155, 6, 217, 61, 23, 93, 46, 190, 7, 119, 45, 62, 152, 133, 143, 189, 121, 7, 7, 190, 183, 84, 49, 190, 161, 199, 196, 189, 20, 141, 25, 62, 25, 214, 242, 61, 24, 20, 9, 190, 94, 200, 7, 62, 90, 224, 41, 62, 190, 197, 150, 61, 146, 47, 238, 189, 97, 107, 234, 61, 34, 219, 182, 61, 21, 249, 9, 62, 150, 248, 88, 61, 112, 137, 50, 61, 54, 159, 185, 60, 16, 115, 30, 62, 223, 22, 192, 189, 38, 22, 215, 61, 56, 84, 51, 190, 214, 129, 37, 188, 115, 210, 152, 189, 71, 28, 178, 189, 218, 195, 166, 189, 54, 102, 38, 61, 236, 157, 142, 61, 175, 2, 5, 62, 62, 4, 163, 189, 229, 237, 49, 61, 63, 249, 149, 59, 10, 123, 27, 190, 28, 135, 1, 61, 80, 158, 198, 61, 198, 12, 183, 61, 111, 250, 41, 189, 137, 77, 192, 61, 106, 0, 247, 189, 87, 203, 220, 189, 25, 103, 84, 59, 17, 247, 198, 60, 133, 240, 25, 190, 229, 85, 5, 190, 133, 94, 68, 61, 232, 36, 6, 60, 163, 32, 154, 61, 8, 56, 36, 190, 22, 72, 28, 62, 51, 34, 8, 61, 111, 0, 84, 61, 194, 43, 35, 62, 238, 96, 233, 188, 204, 17, 198, 189, 158, 141, 48, 62, 182, 76, 114, 61, 195, 141, 238, 60, 144, 101, 220, 61, 73, 147, 171, 189, 71, 199, 38, 62, 157, 197, 13, 62, 104, 181, 49, 190, 137, 192, 140, 61, 205, 188, 239, 60, 77, 164, 123, 61, 127, 47, 51, 190, 245, 162, 5, 190, 142, 163, 105, 61, 251, 188, 28, 190, 137, 56, 211, 189, 29, 133, 162, 61, 162, 44, 253, 61, 57, 129, 22, 190, 252, 19, 242, 60, 58, 47, 177, 189, 96, 186, 190, 61, 37, 187, 23, 61, 110, 204, 97, 188, 17, 8, 80, 189, 238, 2, 7, 190, 187, 37, 242, 61, 248, 207, 5, 190, 60, 96, 214, 60, 63, 8, 138, 58, 22, 223, 178, 60, 208, 134, 28, 188, 17, 47, 95, 189, 104, 17, 165, 189, 246, 208, 50, 190, 57, 196, 163, 189, 45, 103, 205, 189, 16, 16, 192, 61, 65, 126, 246, 60, 111, 49, 8, 62, 102, 12, 45, 190, 23, 85, 40, 190, 164, 221, 41, 62, 40, 106, 205, 189, 141, 185, 235, 186, 32, 140, 50, 190, 75, 49, 186, 61, 43, 103, 119, 189, 87, 24, 225, 189, 208, 10, 131, 61, 82, 95, 216, 189, 177, 134, 253, 189, 238, 74, 181, 61, 110, 196, 9, 61, 198, 60, 16, 189, 201, 0, 76, 59, 124, 16, 11, 188, 144, 234, 48, 190, 233, 29, 254, 187, 93, 191, 250, 61, 61, 202, 111, 187, 65, 104, 189, 60, 30, 92, 33, 61, 142, 102, 209, 189, 40, 251, 43, 62, 55, 228, 245, 188, 231, 143, 39, 61, 174, 89, 222, 189, 115, 9, 29, 189, 60, 153, 38, 62, 207, 85, 115, 60, 170, 68, 18, 60, 205, 11, 13, 62, 107, 251, 134, 189, 121, 200, 91, 189, 77, 246, 173, 61, 192, 17, 171, 188, 137, 88, 218, 61, 195, 177, 101, 61, 104, 96, 153, 189, 195, 12, 42, 189, 195, 111, 29, 62, 75, 157, 208, 189, 239, 6, 200, 189, 136, 141, 143, 60, 92, 130, 5, 60, 252, 73, 6, 62, 105, 80, 57, 61, 27, 102, 203, 189, 146, 88, 155, 189, 220, 89, 118, 61, 56, 142, 19, 61, 112, 216, 28, 61, 36, 199, 229, 61, 103, 187, 47, 190, 114, 7, 135, 188, 193, 1, 31, 62, 177, 33, 13, 190, 120, 0, 157, 61, 230, 198, 191, 61, 13, 80, 35, 62, 119, 112, 52, 190, 232, 82, 26, 62, 77, 153, 151, 61, 251, 162, 84, 189, 129, 10, 131, 61, 148, 193, 236, 189, 201, 246, 49, 190, 50, 195, 244, 61, 216, 98, 239, 61, 131, 192, 39, 190, 151, 97, 21, 62, 140, 78, 176, 189, 213, 41, 4, 190, 100, 81, 35, 190, 91, 84, 185, 61, 26, 157, 147, 189, 248, 45, 254, 189, 242, 134, 240, 60, 128, 1, 177, 189, 234, 46, 20, 62, 15, 185, 79, 61, 45, 128, 151, 189, 137, 252, 25, 62, 172, 140, 38, 62, 99, 133, 171, 189, 203, 85, 202, 189, 70, 109, 44, 62, 182, 94, 13, 190, 247, 17, 91, 61, 150, 189, 47, 62, 150, 55, 32, 62, 154, 217, 148, 189, 203, 106, 139, 188, 68, 197, 10, 188, 10, 214, 3, 62, 9, 135, 185, 61, 173, 183, 13, 62, 91, 37, 208, 187, 88, 139, 87, 60, 129, 147, 13, 62, 214, 210, 24, 62, 254, 108, 30, 190, 250, 174, 4, 62, 85, 77, 18, 190, 33, 26, 135, 61, 188, 60, 183, 188, 64, 180, 222, 189, 139, 47, 232, 189, 18, 68, 18, 190, 182, 188, 65, 189, 23, 36, 44, 190, 26, 219, 244, 189, 188, 126, 52, 190, 106, 24, 106, 189, 138, 170, 67, 61, 89, 136, 127, 61, 9, 245, 244, 189, 98, 106, 89, 61, 25, 228, 204, 61, 15, 5, 89, 189, 79, 106, 225, 61, 169, 23, 182, 61, 232, 59, 247, 189, 163, 216, 217, 61, 71, 169, 30, 190, 237, 73, 29, 62, 62, 153, 87, 189, 51, 81, 141, 189, 120, 58, 144, 189, 88, 112, 164, 61, 56, 176, 31, 189, 182, 209, 225, 189, 35, 60, 7, 62, 253, 137, 101, 60, 35, 104, 174, 186, 13, 222, 183, 189, 183, 200, 77, 61, 210, 138, 209, 61, 111, 229, 134, 189, 31, 233, 100, 189, 120, 249, 222, 61, 34, 38, 18, 190, 129, 118, 213, 61, 128, 48, 132, 189, 177, 193, 238, 189, 61, 171, 217, 60, 160, 194, 33, 61, 86, 152, 236, 61, 58, 93, 179, 189, 162, 155, 239, 189, 157, 121, 227, 61, 160, 126, 179, 60, 36, 161, 20, 190, 58, 58, 78, 61, 69, 158, 29, 62, 209, 197, 82, 61, 13, 22, 135, 61, 215, 219, 28, 190, 5, 34, 34, 61, 196, 42, 230, 189, 75, 197, 35, 62, 154, 28, 172, 189, 172, 104, 104, 59, 97, 218, 23, 190, 214, 132, 50, 62, 90, 150, 24, 62, 146, 18, 19, 190, 119, 222, 23, 62, 34, 155, 179, 61, 107, 53, 162, 188, 162, 112, 203, 189, 116, 40, 117, 189, 34, 130, 185, 189, 4, 153, 153, 60, 52, 239, 225, 61, 26, 103, 217, 61, 136, 128, 193, 61, 144, 37, 51, 62, 17, 130, 28, 190, 84, 19, 49, 62, 68, 53, 22, 62, 237, 241, 77, 61, 189, 41, 100, 61, 88, 222, 176, 59, 65, 46, 21, 190, 26, 205, 33, 190, 131, 235, 239, 189, 143, 53, 207, 60, 210, 4, 22, 62, 86, 67, 1, 62, 138, 23, 140, 189, 180, 64, 174, 61, 125, 161, 226, 189, 209, 164, 40, 190, 68, 180, 131, 59, 104, 110, 192, 60, 64, 65, 246, 189, 204, 42, 33, 60, 114, 21, 10, 190, 19, 11, 212, 189, 14, 241, 66, 61, 104, 138, 36, 62, 193, 202, 50, 190, 12, 228, 16, 189, 2, 20, 26, 62, 203, 6, 142, 189, 74, 198, 242, 61, 18, 114, 136, 61, 103, 213, 47, 61, 4, 230, 223, 189, 134, 172, 128, 188, 171, 5, 250, 60, 128, 201, 83, 189, 248, 55, 104, 60, 83, 230, 165, 189, 47, 132, 145, 61, 9, 223, 239, 189, 137, 177, 146, 61, 138, 47, 47, 187, 227, 113, 211, 188, 16, 183, 17, 59, 81, 236, 219, 189, 233, 10, 167, 61, 176, 132, 237, 61, 183, 40, 132, 61, 147, 249, 7, 190, 14, 250, 13, 190, 253, 115, 219, 187, 65, 143, 4, 190, 71, 108, 99, 61, 85, 140, 26, 62, 203, 119, 8, 190, 53, 176, 203, 189, 161, 255, 192, 60, 158, 217, 138, 188, 145, 59, 193, 61, 99, 15, 175, 61, 148, 104, 26, 62, 191, 31, 75, 61, 212, 15, 23, 62, 74, 135, 161, 189, 225, 30, 243, 189, 152, 186, 159, 189, 171, 205, 17, 61, 139, 76, 112, 61, 250, 247, 69, 189, 218, 16, 22, 62, 70, 240, 38, 190, 118, 60, 124, 61, 56, 29, 18, 62, 88, 31, 255, 60, 249, 249, 34, 62, 49, 124, 29, 189, 15, 70, 187, 61, 12, 217, 221, 188, 141, 230, 2, 190, 243, 68, 123, 61, 3, 189, 132, 61, 150, 187, 201, 60, 245, 236, 3, 190, 252, 15, 21, 190, 99, 84, 112, 60, 78, 194, 220, 61, 216, 70, 120, 61, 236, 74, 35, 62, 33, 137, 27, 190, 113, 174, 40, 190, 111, 101, 192, 61, 163, 42, 124, 189, 131, 67, 18, 62, 10, 77, 64, 60, 171, 136, 139, 188, 138, 46, 216, 61, 105, 68, 211, 188, 18, 255, 86, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 243, 141, 59, 245, 78, 252, 189, 113, 183, 209, 189, 208, 186, 155, 60, 102, 239, 244, 59, 196, 44, 175, 189, 43, 237, 226, 189, 47, 124, 232, 61, 226, 3, 153, 61, 248, 146, 0, 189, 12, 28, 33, 190, 238, 67, 43, 62, 240, 117, 31, 62, 39, 1, 42, 189, 191, 9, 147, 189, 47, 130, 193, 189, 238, 163, 126, 61, 85, 1, 142, 61, 253, 101, 26, 188, 61, 219, 153, 189, 95, 219, 246, 61, 239, 167, 83, 61, 125, 103, 175, 188, 248, 217, 252, 185, 25, 69, 183, 61, 137, 235, 52, 190, 70, 17, 36, 190, 210, 98, 69, 189, 215, 119, 1, 62, 114, 175, 13, 62, 135, 238, 229, 61, 35, 202, 29, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {205, 45, 46, 190, 114, 254, 156, 60, 199, 17, 242, 59, 244, 252, 127, 61, 190, 165, 149, 188, 25, 246, 12, 190, 61, 194, 48, 61, 0, 221, 26, 62, 213, 214, 182, 61, 202, 117, 51, 187, 60, 117, 123, 189, 59, 131, 6, 190, 194, 188, 49, 62, 201, 231, 72, 61, 216, 88, 239, 189, 66, 244, 5, 62, 192, 42, 23, 190, 22, 170, 247, 61, 133, 195, 224, 189, 84, 195, 57, 189, 17, 154, 205, 60, 87, 57, 253, 60, 58, 47, 29, 62, 254, 146, 82, 59, 214, 24, 186, 189, 180, 200, 12, 62, 122, 24, 0, 190, 15, 27, 13, 62, 23, 195, 23, 190, 221, 109, 205, 189, 39, 2, 247, 189, 181, 133, 39, 190, 214, 80, 224, 61, 15, 223, 195, 189, 18, 225, 48, 190, 47, 160, 217, 189, 126, 130, 32, 190, 74, 26, 9, 190, 112, 39, 182, 61, 83, 113, 255, 60, 21, 119, 223, 61, 220, 163, 162, 187, 177, 140, 156, 60, 157, 40, 32, 62, 255, 245, 229, 60, 63, 155, 31, 62, 25, 21, 33, 62, 7, 120, 79, 188, 3, 103, 100, 60, 227, 165, 218, 189, 144, 161, 120, 189, 78, 218, 29, 62, 146, 8, 66, 60, 250, 149, 243, 187, 101, 59, 8, 190, 14, 185, 237, 189, 184, 152, 201, 60, 87, 168, 96, 189, 168, 129, 240, 189, 40, 186, 37, 62, 102, 222, 20, 190, 252, 178, 66, 60, 201, 216, 2, 189, 12, 47, 23, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 200, 143, 189, 73, 153, 219, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {200, 82, 77, 63, 195, 145, 142, 190, 211, 62, 94, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {6, 11, 22, 190, 206, 32, 125, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0035/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}