// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 37, 139, 62, 132, 77, 176, 190, 25, 195, 87, 60, 12, 188, 143, 62, 153, 231, 207, 62, 208, 4, 174, 190, 107, 218, 36, 63, 61, 6, 92, 63, 36, 232, 60, 62, 116, 156, 117, 190, 155, 61, 11, 63, 132, 180, 47, 191, 159, 87, 174, 190, 190, 147, 55, 63, 254, 196, 65, 190, 142, 82, 132, 62, 138, 126, 175, 190, 140, 45, 162, 187, 175, 40, 106, 63, 57, 137, 57, 62, 49, 78, 144, 61, 2, 65, 66, 189, 40, 75, 38, 63, 210, 30, 138, 190, 55, 13, 41, 63, 70, 56, 9, 62, 11, 93, 229, 62, 96, 197, 15, 190, 51, 83, 157, 191, 49, 55, 222, 190, 6, 139, 20, 190, 176, 72, 135, 191, 112, 123, 54, 190, 187, 36, 12, 63, 160, 140, 124, 63, 14, 61, 210, 62, 60, 18, 23, 63, 243, 40, 56, 191, 134, 4, 132, 190, 29, 216, 128, 63, 184, 145, 152, 63, 113, 21, 231, 62, 91, 211, 242, 190, 197, 155, 226, 191, 112, 132, 253, 190, 30, 104, 154, 190, 69, 71, 243, 60, 52, 39, 192, 190, 51, 192, 94, 62, 118, 117, 30, 190, 235, 218, 227, 190, 115, 203, 232, 190, 77, 140, 57, 191, 240, 236, 209, 62, 63, 217, 200, 62, 132, 28, 38, 191, 124, 113, 192, 62, 126, 56, 25, 63, 26, 2, 39, 63, 220, 186, 58, 62, 197, 105, 237, 189, 215, 57, 228, 61, 145, 68, 42, 63, 96, 206, 242, 62, 73, 247, 73, 191, 57, 230, 255, 190, 1, 47, 50, 63, 5, 5, 111, 191, 160, 129, 24, 191, 134, 151, 49, 187, 51, 100, 247, 190, 249, 45, 14, 61, 236, 196, 209, 190, 6, 12, 131, 63, 103, 44, 18, 62, 174, 250, 20, 63, 169, 121, 47, 191, 207, 127, 96, 190, 194, 121, 96, 62, 3, 253, 252, 62, 1, 66, 25, 191, 133, 145, 59, 63, 249, 253, 44, 190, 150, 203, 253, 62, 234, 149, 45, 191, 220, 98, 153, 189, 61, 50, 87, 189, 184, 84, 135, 62, 224, 143, 165, 63, 141, 107, 105, 61, 159, 84, 23, 190, 96, 37, 179, 62, 165, 162, 67, 63, 37, 33, 57, 190, 145, 36, 246, 62, 73, 43, 128, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 183, 19, 191, 66, 134, 69, 189, 253, 206, 73, 190, 144, 229, 146, 62, 163, 163, 69, 190, 52, 21, 11, 191, 36, 83, 72, 62, 230, 72, 251, 62, 139, 243, 124, 190, 108, 54, 250, 61, 43, 142, 30, 63, 238, 249, 40, 190, 11, 129, 16, 63, 95, 12, 225, 61, 224, 43, 7, 190, 199, 124, 115, 190, 207, 187, 51, 61, 28, 56, 247, 189, 146, 214, 22, 63, 139, 218, 20, 63, 236, 143, 57, 62, 9, 229, 186, 190, 7, 225, 148, 62, 151, 57, 133, 62, 38, 222, 29, 63, 90, 168, 139, 190, 142, 56, 110, 188, 206, 107, 208, 190, 248, 35, 34, 63, 73, 52, 213, 62, 83, 157, 234, 61, 104, 105, 8, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 158, 198, 188, 183, 252, 245, 61, 51, 24, 44, 188, 1, 194, 156, 189, 101, 16, 175, 188, 200, 243, 12, 62, 25, 6, 29, 62, 18, 50, 222, 61, 62, 190, 116, 189, 103, 53, 44, 190, 8, 133, 95, 189, 182, 233, 181, 189, 142, 141, 131, 189, 91, 166, 42, 190, 67, 219, 196, 189, 100, 145, 140, 189, 77, 192, 53, 61, 42, 40, 2, 190, 163, 31, 118, 189, 60, 168, 45, 190, 104, 85, 235, 60, 154, 116, 30, 61, 25, 237, 247, 59, 108, 56, 187, 187, 88, 138, 13, 190, 37, 78, 130, 188, 195, 16, 164, 60, 99, 243, 4, 61, 131, 152, 125, 189, 159, 154, 157, 189, 154, 252, 26, 62, 47, 5, 193, 61, 251, 121, 47, 190, 205, 86, 193, 190, 230, 206, 3, 191, 176, 49, 141, 60, 120, 189, 122, 62, 103, 50, 12, 190, 165, 43, 223, 190, 182, 229, 140, 61, 153, 25, 5, 60, 136, 102, 45, 191, 2, 68, 31, 190, 156, 65, 216, 187, 231, 42, 234, 62, 40, 151, 129, 190, 241, 197, 180, 191, 11, 128, 11, 189, 30, 207, 115, 188, 176, 208, 18, 190, 187, 97, 73, 62, 75, 175, 127, 189, 78, 129, 27, 61, 231, 177, 164, 189, 88, 125, 213, 61, 233, 95, 80, 61, 173, 10, 82, 62, 111, 70, 161, 62, 104, 248, 187, 190, 14, 243, 168, 61, 219, 92, 125, 62, 109, 181, 218, 189, 76, 22, 231, 61, 183, 221, 240, 61, 149, 237, 75, 61, 168, 56, 130, 190, 27, 54, 136, 61, 155, 245, 142, 61, 201, 244, 160, 189, 59, 159, 219, 61, 82, 60, 130, 190, 184, 80, 46, 188, 211, 106, 180, 189, 214, 76, 2, 61, 11, 179, 17, 189, 217, 233, 189, 189, 6, 160, 121, 189, 145, 110, 51, 61, 63, 220, 219, 61, 232, 201, 66, 61, 228, 62, 150, 189, 5, 83, 104, 61, 238, 210, 206, 189, 151, 161, 44, 190, 98, 161, 161, 60, 144, 239, 0, 60, 238, 26, 186, 189, 21, 231, 188, 61, 149, 207, 4, 189, 203, 110, 102, 61, 166, 232, 161, 61, 156, 42, 182, 60, 34, 188, 43, 189, 181, 255, 20, 189, 246, 229, 34, 189, 84, 82, 70, 190, 91, 212, 228, 189, 96, 161, 165, 62, 139, 140, 150, 190, 2, 153, 17, 190, 68, 32, 177, 61, 153, 7, 49, 190, 131, 0, 193, 188, 84, 242, 150, 61, 167, 223, 174, 61, 161, 242, 8, 190, 222, 23, 231, 61, 128, 160, 55, 60, 93, 127, 160, 62, 124, 183, 254, 61, 200, 174, 149, 61, 19, 139, 109, 190, 134, 81, 129, 61, 20, 159, 8, 60, 71, 46, 159, 62, 66, 154, 169, 61, 104, 248, 30, 62, 124, 91, 47, 189, 65, 230, 146, 61, 83, 177, 33, 61, 178, 29, 21, 62, 120, 160, 62, 62, 139, 190, 129, 60, 78, 117, 102, 190, 75, 16, 12, 62, 76, 60, 237, 61, 217, 255, 0, 60, 42, 55, 72, 189, 71, 120, 241, 61, 0, 70, 38, 190, 41, 21, 90, 62, 49, 140, 165, 61, 91, 173, 6, 190, 199, 219, 143, 61, 158, 56, 174, 62, 192, 36, 141, 62, 224, 110, 167, 62, 168, 243, 50, 61, 40, 139, 168, 189, 157, 37, 160, 189, 127, 137, 27, 62, 141, 192, 133, 62, 183, 221, 23, 61, 188, 97, 135, 62, 35, 252, 16, 190, 112, 70, 8, 190, 161, 113, 141, 189, 41, 196, 158, 62, 42, 65, 254, 189, 30, 8, 219, 187, 168, 131, 47, 60, 2, 211, 250, 61, 40, 149, 119, 189, 111, 164, 65, 190, 135, 101, 188, 60, 220, 64, 35, 62, 58, 143, 180, 189, 124, 67, 16, 62, 67, 222, 178, 188, 144, 175, 92, 61, 138, 244, 2, 189, 189, 61, 52, 189, 187, 231, 196, 190, 3, 201, 137, 190, 30, 129, 196, 190, 45, 199, 33, 61, 180, 68, 236, 190, 45, 53, 195, 190, 39, 107, 233, 190, 68, 46, 229, 189, 227, 69, 211, 61, 244, 214, 161, 190, 57, 233, 80, 191, 46, 45, 165, 190, 79, 8, 145, 190, 191, 56, 222, 189, 150, 53, 212, 190, 136, 172, 23, 61, 6, 189, 21, 62, 139, 94, 141, 190, 91, 50, 49, 62, 35, 173, 201, 190, 62, 225, 238, 190, 150, 42, 115, 62, 88, 63, 46, 62, 92, 24, 138, 189, 0, 133, 188, 190, 221, 168, 230, 190, 17, 251, 192, 62, 131, 236, 113, 190, 84, 166, 61, 62, 128, 176, 221, 60, 222, 73, 237, 189, 180, 136, 251, 190, 24, 218, 191, 190, 218, 84, 201, 189, 227, 1, 86, 61, 150, 106, 254, 189, 100, 236, 71, 187, 217, 111, 229, 59, 211, 83, 17, 62, 107, 146, 171, 191, 102, 183, 63, 62, 241, 66, 98, 190, 149, 253, 50, 62, 156, 52, 101, 190, 246, 220, 16, 192, 1, 156, 24, 190, 219, 51, 80, 190, 238, 11, 31, 59, 222, 70, 9, 190, 224, 105, 217, 60, 214, 253, 96, 62, 13, 22, 8, 190, 249, 105, 175, 189, 90, 61, 183, 61, 128, 85, 150, 62, 174, 83, 231, 62, 68, 13, 90, 191, 201, 40, 98, 188, 224, 184, 166, 62, 18, 181, 68, 190, 245, 17, 221, 188, 17, 233, 42, 62, 17, 78, 255, 61, 224, 169, 137, 62, 99, 89, 132, 190, 14, 92, 67, 190, 195, 14, 68, 62, 80, 160, 37, 190, 39, 142, 195, 189, 95, 187, 179, 61, 64, 237, 75, 188, 230, 213, 14, 190, 118, 100, 71, 62, 61, 217, 127, 190, 206, 129, 213, 61, 122, 94, 100, 189, 32, 220, 193, 188, 189, 72, 66, 190, 24, 35, 25, 62, 171, 99, 96, 60, 2, 247, 115, 62, 153, 218, 94, 190, 134, 148, 173, 61, 44, 146, 188, 188, 230, 180, 8, 60, 0, 76, 85, 59, 223, 41, 65, 190, 205, 160, 74, 62, 231, 187, 132, 61, 18, 131, 179, 188, 44, 65, 183, 61, 88, 171, 145, 60, 42, 206, 25, 190, 145, 59, 163, 61, 48, 187, 196, 189, 45, 128, 74, 61, 214, 227, 247, 190, 192, 243, 205, 189, 36, 89, 254, 61, 213, 9, 42, 190, 128, 175, 140, 189, 167, 77, 184, 61, 16, 46, 3, 190, 131, 186, 204, 189, 22, 47, 202, 189, 58, 226, 134, 190, 212, 239, 135, 189, 202, 167, 90, 190, 48, 218, 158, 190, 228, 236, 186, 189, 140, 108, 3, 60, 74, 176, 163, 189, 252, 73, 208, 61, 215, 65, 53, 189, 203, 225, 152, 62, 194, 216, 219, 62, 133, 111, 162, 62, 231, 172, 128, 60, 94, 117, 27, 61, 150, 37, 226, 62, 248, 211, 181, 188, 75, 217, 62, 188, 65, 22, 101, 190, 0, 35, 31, 189, 17, 253, 32, 62, 8, 130, 103, 190, 173, 54, 149, 189, 137, 123, 180, 189, 12, 213, 0, 191, 55, 31, 13, 189, 42, 129, 116, 190, 106, 227, 24, 62, 155, 91, 106, 62, 98, 63, 197, 189, 25, 28, 227, 60, 213, 212, 93, 190, 174, 5, 155, 62, 171, 88, 178, 190, 134, 65, 28, 62, 103, 114, 114, 61, 242, 191, 90, 189, 204, 67, 153, 190, 125, 176, 153, 189, 120, 70, 113, 62, 141, 217, 176, 62, 91, 150, 225, 61, 141, 31, 10, 190, 96, 4, 108, 60, 199, 215, 0, 62, 181, 6, 30, 62, 38, 133, 21, 191, 18, 62, 138, 62, 36, 157, 141, 187, 173, 219, 163, 189, 0, 247, 15, 62, 96, 162, 161, 190, 135, 206, 188, 190, 82, 172, 34, 190, 136, 32, 162, 189, 160, 110, 146, 190, 75, 6, 91, 62, 208, 242, 161, 62, 68, 220, 183, 190, 95, 166, 47, 190, 153, 220, 137, 62, 92, 93, 96, 62, 94, 182, 204, 62, 8, 55, 86, 61, 128, 86, 104, 189, 81, 94, 36, 188, 62, 40, 220, 61, 110, 253, 238, 61, 200, 104, 149, 58, 19, 166, 143, 62, 82, 68, 96, 190, 92, 247, 81, 62, 226, 74, 154, 59, 171, 131, 14, 62, 131, 25, 191, 190, 220, 63, 194, 190, 93, 85, 160, 190, 173, 24, 121, 190, 85, 177, 2, 189, 31, 63, 39, 191, 159, 128, 56, 62, 149, 219, 147, 62, 44, 124, 11, 190, 174, 50, 48, 62, 32, 165, 3, 190, 147, 51, 61, 62, 47, 136, 225, 189, 23, 28, 16, 190, 236, 222, 169, 61, 53, 221, 120, 60, 175, 167, 110, 190, 124, 201, 45, 62, 131, 252, 138, 61, 146, 205, 151, 60, 134, 143, 29, 61, 89, 165, 231, 61, 60, 128, 143, 188, 234, 243, 237, 60, 18, 203, 113, 190, 50, 72, 130, 62, 223, 79, 149, 62, 77, 116, 142, 62, 152, 225, 141, 188, 193, 154, 57, 62, 219, 144, 251, 189, 115, 104, 93, 190, 4, 132, 12, 190, 178, 68, 6, 190, 253, 14, 199, 188, 246, 61, 212, 60, 4, 181, 39, 190, 225, 230, 145, 190, 188, 91, 36, 62, 213, 6, 157, 62, 39, 225, 161, 62, 165, 236, 225, 190, 6, 105, 10, 188, 80, 174, 4, 190, 201, 204, 232, 189, 109, 193, 159, 62, 168, 86, 194, 190, 33, 16, 92, 190, 107, 28, 41, 62, 34, 252, 27, 189, 226, 57, 202, 189, 132, 167, 128, 189, 217, 161, 66, 189, 202, 58, 152, 189, 219, 209, 238, 189, 236, 220, 71, 190, 251, 178, 175, 61, 170, 143, 253, 188, 222, 194, 33, 190, 190, 242, 42, 190, 230, 200, 95, 62, 136, 253, 178, 189, 44, 152, 71, 62, 112, 247, 249, 189, 179, 138, 195, 62, 248, 38, 132, 62, 238, 232, 131, 62, 118, 93, 103, 61, 193, 21, 152, 189, 92, 193, 176, 62, 135, 51, 90, 190, 104, 4, 161, 190, 80, 20, 125, 61, 82, 110, 205, 61, 90, 118, 50, 189, 212, 228, 181, 188, 121, 98, 98, 188, 232, 127, 142, 61, 174, 246, 17, 191, 45, 112, 116, 190, 35, 255, 171, 190, 236, 32, 198, 188, 94, 237, 97, 62, 247, 240, 255, 189, 126, 178, 124, 188, 181, 1, 25, 62, 163, 11, 167, 61, 2, 1, 43, 191, 198, 227, 40, 62, 192, 174, 46, 190, 12, 13, 10, 190, 237, 137, 213, 189, 185, 140, 235, 60, 116, 95, 150, 62, 196, 229, 3, 62, 177, 106, 145, 59, 189, 182, 83, 61, 13, 15, 52, 190, 193, 82, 21, 189, 88, 133, 244, 62, 83, 204, 61, 191, 22, 157, 187, 62, 151, 75, 56, 188, 214, 217, 229, 60, 109, 246, 145, 61, 94, 19, 200, 190, 90, 150, 251, 189, 143, 97, 36, 190, 71, 193, 96, 59, 159, 52, 170, 189, 133, 183, 191, 190, 240, 55, 26, 190, 82, 137, 156, 190, 121, 3, 252, 189, 22, 26, 4, 63, 17, 164, 32, 190, 215, 25, 1, 190, 165, 95, 106, 189, 79, 88, 187, 188, 250, 8, 143, 190, 164, 62, 188, 61, 97, 206, 175, 190, 225, 148, 130, 189, 152, 49, 232, 190, 234, 216, 255, 61, 19, 151, 10, 189, 39, 218, 131, 61, 186, 221, 210, 61, 183, 225, 192, 189, 118, 40, 35, 62, 125, 143, 26, 60, 102, 63, 6, 62, 109, 6, 135, 190, 218, 128, 169, 62, 134, 230, 98, 190, 89, 137, 157, 189, 237, 223, 170, 189, 134, 226, 242, 190, 200, 16, 105, 190, 185, 165, 32, 191, 156, 206, 0, 62, 83, 176, 108, 190, 129, 246, 27, 191, 144, 108, 135, 190, 252, 237, 235, 61, 0, 22, 4, 62, 52, 32, 12, 190, 219, 81, 158, 189, 38, 146, 21, 190, 222, 181, 23, 191, 114, 106, 3, 62, 166, 24, 17, 190, 95, 187, 16, 62, 183, 21, 153, 190, 162, 160, 196, 191, 76, 167, 234, 190, 227, 9, 12, 62, 24, 178, 165, 190, 2, 99, 116, 62, 163, 226, 220, 60, 243, 36, 80, 62, 70, 69, 14, 61, 163, 11, 22, 62, 210, 216, 156, 62, 16, 235, 69, 62, 57, 212, 13, 62, 230, 226, 62, 191, 234, 202, 240, 189, 117, 240, 85, 62, 90, 231, 75, 189, 72, 78, 9, 62, 88, 227, 234, 61, 23, 253, 221, 61, 14, 132, 231, 189, 27, 162, 246, 61, 238, 172, 137, 60, 229, 165, 218, 189, 222, 213, 93, 60, 179, 182, 25, 190, 80, 232, 132, 61, 129, 20, 232, 61, 189, 52, 19, 190, 197, 161, 66, 189, 114, 231, 85, 189, 157, 227, 52, 190, 13, 9, 14, 190, 112, 235, 32, 62, 122, 59, 27, 61, 161, 223, 23, 190, 110, 235, 91, 190, 171, 133, 149, 61, 4, 41, 180, 61, 37, 211, 137, 189, 159, 241, 143, 61, 223, 143, 166, 61, 159, 20, 23, 190, 247, 34, 7, 190, 187, 48, 27, 188, 110, 179, 90, 188, 6, 38, 3, 190, 77, 140, 220, 61, 146, 22, 53, 190, 205, 100, 140, 60, 98, 212, 147, 190, 199, 85, 117, 61, 85, 27, 114, 62, 50, 117, 237, 190, 48, 213, 61, 59, 69, 234, 198, 61, 40, 116, 5, 190, 108, 9, 205, 189, 95, 8, 104, 190, 6, 63, 174, 189, 195, 148, 97, 58, 77, 226, 96, 62, 46, 195, 149, 190, 19, 64, 123, 62, 214, 253, 142, 189, 157, 56, 130, 190, 130, 186, 92, 187, 79, 214, 102, 61, 216, 192, 7, 190, 180, 234, 192, 61, 254, 84, 16, 190, 44, 123, 64, 62, 235, 95, 48, 62, 178, 168, 21, 62, 19, 128, 196, 61, 209, 177, 31, 60, 123, 107, 236, 62, 249, 152, 101, 61, 38, 73, 133, 60, 143, 101, 20, 189, 189, 71, 60, 62, 141, 202, 179, 61, 107, 104, 170, 61, 250, 190, 237, 59, 125, 77, 48, 189, 10, 196, 48, 190, 77, 41, 17, 61, 24, 168, 72, 59, 16, 245, 164, 189, 66, 20, 237, 60, 190, 11, 8, 190, 165, 70, 21, 62, 146, 159, 180, 61, 72, 194, 31, 190, 129, 129, 183, 189, 191, 214, 25, 190, 181, 245, 148, 61, 125, 54, 205, 188, 99, 71, 232, 61, 245, 221, 25, 188, 2, 117, 244, 189, 160, 167, 10, 190, 73, 161, 35, 186, 116, 50, 180, 187, 171, 132, 34, 62, 156, 132, 189, 189, 248, 252, 228, 189, 201, 246, 138, 189, 160, 249, 35, 190, 93, 3, 10, 189, 107, 140, 4, 190, 229, 48, 91, 61, 57, 85, 254, 61, 250, 216, 0, 62, 241, 189, 67, 190, 177, 67, 184, 189, 182, 168, 140, 188, 163, 172, 188, 62, 42, 65, 112, 62, 146, 186, 103, 189, 26, 17, 9, 62, 83, 132, 185, 62, 6, 13, 141, 62, 96, 44, 246, 61, 82, 93, 165, 61, 126, 210, 69, 190, 136, 127, 192, 188, 109, 66, 250, 189, 39, 31, 92, 62, 193, 245, 77, 190, 241, 105, 134, 62, 138, 45, 146, 190, 133, 32, 220, 190, 39, 126, 227, 190, 148, 133, 176, 61, 248, 180, 201, 190, 150, 217, 195, 190, 237, 166, 185, 190, 139, 41, 148, 190, 6, 29, 94, 62, 239, 56, 69, 191, 180, 2, 167, 61, 89, 22, 34, 190, 26, 161, 245, 61, 100, 168, 159, 62, 114, 124, 238, 189, 2, 124, 115, 60, 149, 165, 154, 188, 104, 65, 147, 189, 227, 20, 4, 191, 34, 11, 16, 190, 218, 248, 72, 190, 65, 50, 16, 190, 128, 69, 93, 61, 76, 43, 40, 189, 234, 31, 137, 190, 4, 64, 61, 189, 155, 192, 24, 189, 52, 120, 11, 189, 132, 244, 70, 62, 169, 237, 161, 190, 178, 131, 22, 61, 170, 32, 158, 190, 6, 62, 197, 189, 43, 110, 60, 190, 47, 157, 193, 61, 18, 216, 39, 62, 177, 212, 117, 62, 60, 79, 30, 190, 43, 208, 96, 62, 239, 252, 123, 62, 2, 11, 39, 61, 164, 106, 250, 61, 87, 187, 200, 187, 62, 211, 136, 189, 55, 185, 105, 62, 160, 128, 237, 188, 200, 213, 233, 61, 126, 187, 117, 187, 16, 115, 30, 62, 168, 122, 32, 62, 163, 230, 7, 191, 180, 62, 104, 190, 180, 194, 47, 61, 115, 210, 152, 189, 250, 129, 204, 61, 250, 205, 214, 188, 41, 38, 202, 189, 32, 236, 58, 190, 244, 241, 118, 62, 71, 55, 233, 190, 217, 100, 95, 62, 211, 180, 70, 190, 218, 128, 19, 191, 66, 106, 242, 190, 28, 97, 68, 62, 73, 68, 32, 189, 81, 249, 60, 62, 4, 73, 145, 62, 233, 94, 78, 189, 1, 100, 171, 189, 159, 195, 64, 62, 51, 93, 101, 62, 46, 58, 109, 190, 68, 208, 252, 61, 133, 182, 252, 189, 90, 36, 10, 190, 186, 45, 242, 61, 62, 12, 81, 189, 33, 249, 88, 61, 8, 203, 244, 61, 111, 0, 84, 61, 120, 9, 191, 62, 46, 44, 25, 191, 116, 113, 48, 190, 194, 141, 78, 62, 182, 76, 114, 61, 88, 82, 72, 61, 2, 103, 176, 61, 59, 77, 137, 190, 66, 52, 208, 60, 239, 69, 9, 62, 200, 187, 216, 190, 65, 121, 76, 62, 75, 210, 245, 189, 139, 181, 22, 190, 214, 14, 196, 190, 172, 135, 123, 59, 169, 232, 153, 188, 189, 226, 0, 62, 172, 242, 24, 61, 254, 0, 155, 62, 28, 211, 162, 62, 163, 139, 40, 61, 252, 51, 222, 61, 95, 194, 21, 190, 68, 62, 4, 63, 238, 19, 118, 189, 212, 103, 113, 190, 43, 152, 215, 189, 143, 22, 26, 59, 235, 148, 47, 62, 69, 145, 85, 187, 60, 96, 214, 60, 218, 135, 216, 190, 237, 242, 167, 60, 24, 223, 234, 61, 51, 55, 90, 191, 104, 17, 165, 189, 79, 81, 254, 190, 28, 33, 232, 188, 163, 53, 154, 190, 175, 48, 147, 62, 255, 17, 81, 62, 88, 229, 39, 62, 204, 109, 15, 191, 40, 173, 234, 189, 215, 179, 149, 62, 108, 10, 9, 62, 137, 215, 193, 190, 187, 221, 50, 63, 188, 84, 138, 190, 177, 217, 156, 191, 161, 68, 176, 190, 230, 195, 41, 190, 197, 44, 218, 190, 190, 183, 78, 61, 221, 118, 206, 61, 191, 15, 245, 190, 134, 152, 142, 61, 123, 89, 205, 190, 130, 47, 120, 62, 174, 168, 77, 191, 193, 133, 51, 191, 106, 242, 82, 62, 61, 202, 111, 187, 73, 186, 125, 188, 209, 84, 140, 62, 117, 154, 189, 189, 128, 90, 39, 61, 55, 228, 245, 188, 94, 198, 125, 61, 77, 243, 20, 190, 65, 145, 255, 186, 69, 174, 176, 62, 49, 124, 68, 62, 50, 137, 113, 61, 118, 13, 160, 60, 140, 58, 218, 189, 78, 248, 28, 62, 153, 82, 134, 188, 221, 114, 126, 61, 213, 34, 252, 61, 216, 210, 10, 62, 191, 67, 94, 190, 34, 71, 156, 61, 179, 250, 170, 62, 230, 241, 124, 189, 45, 55, 7, 61, 247, 40, 218, 188, 17, 118, 128, 62, 70, 170, 158, 61, 203, 139, 227, 61, 252, 244, 196, 61, 213, 143, 72, 191, 155, 208, 50, 62, 156, 193, 58, 190, 112, 216, 28, 61, 178, 189, 131, 62, 246, 77, 227, 62, 189, 243, 58, 62, 241, 212, 104, 62, 177, 33, 13, 190, 239, 68, 44, 188, 10, 86, 237, 61, 61, 131, 242, 62, 39, 142, 187, 190, 55, 183, 250, 189, 164, 136, 3, 63, 104, 220, 161, 190, 142, 150, 166, 62, 129, 191, 122, 190, 124, 56, 117, 190, 40, 40, 102, 189, 174, 187, 150, 62, 133, 239, 183, 190, 153, 212, 202, 61, 212, 15, 181, 190, 108, 129, 77, 191, 240, 33, 36, 191, 236, 147, 83, 191, 70, 192, 153, 61, 251, 115, 246, 190, 61, 205, 129, 62, 65, 19, 27, 62, 118, 41, 234, 61, 199, 67, 47, 62, 232, 78, 66, 189, 54, 19, 70, 62, 172, 140, 38, 62, 243, 91, 183, 190, 199, 211, 45, 61, 44, 134, 129, 62, 229, 50, 181, 190, 247, 17, 91, 61, 64, 59, 199, 62, 112, 6, 155, 62, 146, 166, 184, 61, 141, 31, 147, 61, 120, 91, 186, 61, 231, 101, 121, 62, 242, 135, 174, 59, 255, 223, 157, 62, 82, 86, 179, 61, 93, 10, 93, 62, 231, 203, 82, 189, 84, 135, 23, 189, 119, 126, 46, 190, 28, 96, 162, 62, 108, 135, 167, 190, 60, 28, 105, 190, 218, 116, 69, 190, 22, 201, 219, 59, 187, 235, 145, 60, 184, 173, 110, 191, 98, 146, 3, 188, 69, 86, 155, 189, 97, 219, 155, 61, 114, 140, 158, 189, 71, 146, 206, 190, 49, 178, 124, 62, 89, 136, 127, 61, 3, 202, 132, 62, 211, 164, 203, 190, 95, 99, 147, 61, 219, 76, 21, 62, 79, 106, 225, 61, 232, 179, 180, 189, 32, 237, 224, 188, 9, 170, 30, 59, 159, 19, 179, 190, 211, 133, 133, 61, 242, 213, 128, 190, 146, 131, 187, 59, 8, 42, 107, 190, 126, 210, 96, 190, 253, 53, 255, 189, 158, 209, 185, 61, 133, 97, 165, 61, 171, 32, 49, 61, 172, 143, 49, 189, 191, 104, 200, 61, 100, 1, 188, 62, 116, 65, 144, 62, 11, 243, 47, 189, 53, 140, 203, 187, 11, 16, 36, 63, 30, 215, 132, 190, 34, 59, 4, 61, 24, 7, 151, 189, 166, 182, 134, 188, 43, 159, 153, 61, 188, 227, 194, 61, 86, 152, 236, 61, 56, 83, 74, 190, 229, 125, 231, 188, 222, 38, 91, 62, 167, 68, 56, 190, 36, 161, 20, 190, 148, 175, 145, 62, 106, 230, 172, 62, 83, 28, 232, 61, 250, 154, 44, 62, 245, 218, 35, 190, 199, 161, 130, 61, 33, 251, 34, 190, 239, 111, 113, 62, 220, 242, 209, 60, 195, 93, 40, 62, 67, 241, 158, 190, 73, 218, 152, 61, 67, 131, 245, 61, 239, 121, 5, 189, 14, 26, 87, 61, 112, 196, 87, 190, 151, 164, 26, 190, 121, 160, 41, 190, 158, 8, 222, 59, 161, 179, 76, 191, 92, 189, 198, 61, 11, 29, 23, 62, 108, 93, 116, 62, 39, 224, 252, 61, 224, 250, 178, 61, 252, 39, 183, 187, 84, 19, 49, 62, 175, 159, 97, 62, 128, 130, 144, 190, 111, 123, 119, 60, 150, 54, 53, 60, 65, 46, 21, 190, 124, 108, 13, 61, 60, 8, 144, 190, 116, 133, 13, 190, 125, 1, 224, 61, 44, 46, 169, 61, 148, 154, 106, 190, 149, 28, 20, 62, 219, 145, 219, 190, 22, 128, 57, 190, 176, 74, 6, 190, 80, 234, 213, 61, 134, 7, 143, 190, 136, 222, 4, 61, 88, 180, 45, 190, 45, 165, 151, 188, 252, 4, 75, 62, 186, 85, 117, 62, 185, 43, 100, 190, 195, 175, 244, 190, 123, 86, 20, 63, 143, 40, 129, 189, 123, 93, 5, 62, 201, 238, 54, 190, 127, 232, 14, 191, 185, 85, 0, 190, 182, 14, 235, 190, 171, 5, 250, 60, 20, 237, 62, 190, 170, 173, 79, 62, 68, 103, 193, 61, 50, 78, 6, 190, 9, 223, 239, 189, 199, 50, 118, 62, 145, 200, 131, 62, 218, 10, 22, 62, 26, 37, 34, 187, 131, 111, 128, 190, 250, 125, 86, 62, 42, 152, 3, 62, 7, 11, 89, 62, 97, 79, 112, 190, 117, 33, 220, 61, 39, 50, 93, 190, 211, 193, 113, 190, 28, 9, 113, 190, 96, 88, 127, 62, 22, 132, 222, 190, 86, 183, 9, 191, 4, 161, 253, 189, 228, 22, 29, 190, 160, 242, 215, 61, 121, 52, 25, 191, 102, 211, 160, 62, 61, 64, 96, 62, 98, 221, 209, 61, 54, 3, 163, 61, 237, 135, 11, 191, 72, 239, 103, 61, 171, 205, 17, 61, 114, 220, 36, 190, 18, 39, 82, 62, 105, 68, 106, 62, 200, 0, 137, 190, 118, 60, 124, 61, 159, 44, 198, 62, 189, 200, 209, 61, 55, 46, 189, 62, 99, 248, 81, 61, 46, 42, 169, 61, 226, 89, 175, 61, 105, 28, 72, 190, 165, 204, 114, 62, 235, 117, 38, 62, 165, 226, 75, 62, 143, 156, 120, 190, 213, 200, 186, 189, 68, 215, 192, 189, 226, 166, 72, 62, 94, 128, 19, 190, 0, 166, 128, 188, 48, 115, 142, 190, 162, 197, 102, 190, 163, 44, 156, 188, 94, 221, 68, 191, 2, 28, 59, 62, 111, 41, 120, 62, 80, 201, 221, 188, 110, 68, 151, 61, 84, 144, 70, 190, 37, 134, 3, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 107, 18, 189, 16, 212, 51, 59, 216, 22, 176, 189, 207, 136, 67, 62, 60, 138, 209, 61, 86, 192, 90, 61, 60, 239, 101, 61, 111, 187, 11, 62, 7, 202, 206, 59, 204, 27, 197, 61, 219, 205, 216, 189, 217, 104, 176, 61, 232, 156, 120, 62, 3, 125, 141, 189, 176, 214, 79, 190, 27, 159, 254, 61, 202, 237, 167, 188, 90, 61, 41, 62, 78, 16, 241, 188, 86, 234, 143, 189, 220, 61, 73, 62, 220, 30, 138, 62, 236, 149, 212, 61, 167, 146, 2, 62, 9, 184, 55, 61, 162, 186, 167, 190, 20, 82, 169, 60, 41, 204, 7, 58, 155, 135, 140, 62, 105, 187, 147, 189, 122, 170, 83, 62, 87, 227, 190, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 8, 8, 190, 136, 68, 54, 63, 136, 210, 242, 187, 145, 44, 155, 61, 54, 177, 210, 189, 249, 97, 124, 191, 244, 188, 145, 63, 123, 9, 196, 61, 7, 117, 1, 63, 45, 166, 127, 62, 20, 133, 171, 190, 33, 232, 213, 190, 168, 49, 234, 62, 220, 11, 37, 63, 115, 136, 12, 191, 100, 128, 101, 63, 240, 144, 194, 189, 180, 33, 66, 62, 141, 118, 131, 189, 32, 10, 44, 191, 116, 235, 3, 62, 209, 141, 221, 62, 58, 66, 220, 62, 160, 200, 116, 191, 183, 44, 159, 190, 158, 222, 131, 63, 216, 236, 233, 190, 88, 44, 209, 62, 33, 183, 111, 190, 74, 102, 240, 190, 42, 148, 56, 191, 88, 109, 248, 190, 221, 174, 145, 61, 177, 162, 3, 61, 229, 187, 192, 189, 191, 134, 109, 190, 246, 250, 122, 190, 80, 111, 159, 186, 232, 90, 59, 62, 252, 25, 186, 189, 170, 25, 85, 62, 40, 116, 122, 189, 106, 95, 99, 61, 50, 42, 204, 61, 92, 239, 65, 189, 46, 107, 161, 62, 112, 47, 12, 63, 98, 66, 68, 61, 170, 158, 132, 60, 216, 26, 67, 190, 213, 98, 120, 189, 139, 92, 106, 62, 130, 189, 167, 188, 65, 50, 236, 189, 254, 171, 222, 189, 63, 116, 50, 62, 139, 45, 166, 61, 202, 171, 136, 62, 36, 244, 47, 190, 216, 202, 166, 61, 41, 24, 66, 190, 221, 62, 45, 62, 154, 163, 37, 189, 113, 66, 2, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 238, 142, 189, 230, 76, 116, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {1, 193, 93, 190, 78, 195, 249, 62, 164, 12, 26, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {202, 239, 203, 191, 159, 200, 1, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0035/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}