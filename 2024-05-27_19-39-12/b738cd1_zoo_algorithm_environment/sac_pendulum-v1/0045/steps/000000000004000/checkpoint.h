// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 22, 38, 191, 227, 210, 46, 63, 153, 73, 21, 191, 212, 137, 205, 190, 123, 61, 132, 191, 195, 192, 29, 190, 96, 255, 40, 63, 124, 119, 184, 62, 142, 208, 242, 62, 58, 110, 150, 61, 239, 16, 18, 190, 105, 181, 122, 190, 206, 8, 111, 190, 131, 204, 195, 61, 228, 146, 23, 191, 139, 180, 20, 189, 226, 58, 140, 191, 245, 102, 169, 62, 230, 25, 48, 190, 5, 154, 43, 191, 188, 78, 204, 190, 49, 218, 217, 190, 24, 66, 75, 63, 207, 187, 9, 191, 36, 217, 0, 191, 228, 224, 5, 63, 238, 192, 250, 190, 208, 13, 28, 63, 13, 56, 30, 63, 161, 97, 98, 62, 161, 65, 216, 190, 121, 251, 186, 190, 81, 65, 244, 62, 221, 230, 111, 62, 233, 35, 16, 191, 198, 202, 211, 62, 247, 50, 13, 191, 86, 117, 217, 190, 75, 71, 99, 63, 19, 200, 19, 62, 73, 234, 105, 62, 23, 140, 80, 61, 212, 84, 146, 61, 78, 157, 59, 63, 69, 2, 150, 62, 76, 103, 235, 190, 42, 25, 231, 62, 185, 33, 206, 60, 193, 17, 21, 63, 210, 131, 27, 191, 240, 241, 182, 190, 24, 121, 27, 62, 90, 213, 138, 191, 185, 214, 216, 62, 24, 221, 65, 191, 143, 227, 232, 190, 188, 5, 179, 188, 122, 154, 194, 190, 78, 26, 30, 191, 1, 233, 12, 63, 253, 150, 223, 62, 231, 17, 44, 63, 81, 73, 131, 62, 160, 24, 236, 62, 97, 231, 218, 62, 216, 81, 168, 189, 159, 229, 82, 63, 130, 216, 181, 189, 243, 208, 201, 190, 52, 115, 243, 189, 102, 171, 19, 191, 13, 216, 13, 63, 187, 214, 73, 62, 130, 235, 117, 190, 78, 124, 146, 190, 77, 194, 207, 60, 247, 57, 44, 191, 43, 64, 51, 190, 138, 92, 93, 190, 147, 90, 231, 62, 183, 154, 13, 59, 5, 165, 149, 62, 51, 181, 132, 63, 158, 219, 113, 190, 190, 181, 24, 63, 16, 214, 83, 63, 203, 80, 27, 62, 107, 21, 246, 62, 185, 57, 41, 63, 244, 187, 10, 63, 119, 49, 10, 63, 94, 234, 26, 191, 125, 75, 252, 190, 82, 126, 216, 62, 164, 112, 16, 191, 18, 247, 15, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 3, 22, 191, 182, 11, 230, 60, 50, 144, 145, 190, 193, 3, 205, 190, 139, 172, 142, 62, 197, 31, 73, 61, 11, 41, 90, 62, 214, 203, 195, 190, 217, 11, 232, 190, 251, 225, 7, 191, 137, 151, 53, 190, 17, 160, 0, 63, 188, 71, 181, 189, 206, 0, 37, 63, 229, 207, 96, 190, 203, 220, 199, 62, 83, 116, 13, 190, 6, 27, 17, 62, 30, 36, 182, 62, 223, 124, 29, 190, 48, 112, 209, 190, 224, 208, 51, 63, 124, 56, 247, 62, 54, 70, 154, 190, 192, 77, 44, 63, 150, 93, 193, 62, 208, 113, 4, 191, 64, 160, 166, 61, 74, 44, 21, 190, 132, 167, 124, 189, 190, 85, 252, 190, 163, 103, 208, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 213, 31, 189, 62, 183, 110, 61, 76, 249, 13, 62, 44, 25, 52, 62, 117, 194, 7, 190, 155, 83, 187, 61, 137, 223, 63, 61, 1, 4, 212, 61, 168, 74, 17, 61, 182, 179, 229, 189, 53, 154, 45, 62, 35, 93, 9, 190, 64, 133, 18, 62, 35, 86, 248, 188, 239, 150, 208, 61, 207, 3, 4, 190, 217, 161, 150, 61, 98, 47, 114, 59, 85, 140, 194, 61, 65, 133, 139, 61, 30, 120, 188, 60, 169, 129, 203, 189, 128, 106, 34, 190, 37, 246, 205, 61, 127, 35, 61, 190, 47, 227, 199, 59, 56, 19, 16, 62, 20, 40, 202, 61, 229, 37, 78, 62, 187, 202, 3, 188, 81, 97, 255, 61, 16, 59, 138, 189, 19, 54, 12, 62, 61, 34, 95, 61, 234, 237, 52, 189, 139, 4, 28, 190, 254, 13, 42, 61, 64, 209, 174, 61, 150, 137, 139, 61, 185, 6, 227, 61, 216, 43, 69, 190, 5, 87, 202, 60, 194, 97, 47, 190, 136, 139, 132, 59, 130, 143, 224, 189, 57, 55, 38, 62, 121, 164, 90, 187, 92, 28, 32, 190, 6, 210, 90, 190, 100, 23, 6, 62, 199, 193, 182, 189, 226, 146, 66, 188, 124, 6, 55, 190, 20, 55, 30, 62, 72, 105, 84, 62, 40, 101, 38, 62, 11, 161, 149, 188, 27, 193, 73, 62, 49, 58, 176, 60, 14, 134, 129, 59, 64, 189, 20, 62, 119, 176, 95, 189, 45, 92, 35, 189, 250, 100, 7, 189, 83, 221, 191, 189, 164, 108, 68, 62, 76, 26, 180, 189, 211, 139, 103, 190, 228, 152, 10, 62, 38, 195, 74, 62, 119, 136, 110, 189, 24, 74, 76, 189, 2, 11, 237, 61, 149, 27, 227, 189, 153, 170, 19, 190, 201, 18, 169, 61, 25, 31, 248, 60, 223, 132, 9, 62, 32, 160, 53, 190, 180, 72, 39, 189, 82, 75, 7, 190, 203, 205, 15, 190, 227, 10, 17, 61, 184, 237, 14, 60, 36, 80, 8, 62, 100, 147, 245, 61, 116, 28, 110, 60, 95, 17, 161, 189, 72, 66, 44, 62, 109, 62, 22, 62, 103, 199, 214, 189, 75, 3, 159, 189, 170, 198, 149, 62, 141, 151, 38, 62, 6, 30, 196, 189, 134, 21, 59, 188, 51, 10, 71, 190, 9, 19, 74, 190, 37, 218, 238, 61, 140, 2, 22, 62, 89, 200, 179, 190, 175, 245, 225, 61, 120, 176, 19, 189, 12, 227, 41, 189, 105, 122, 57, 62, 153, 196, 1, 61, 0, 26, 223, 61, 218, 124, 68, 62, 203, 176, 19, 62, 15, 130, 236, 60, 173, 6, 90, 61, 82, 130, 128, 189, 188, 169, 57, 190, 76, 59, 101, 62, 35, 174, 59, 62, 89, 12, 121, 190, 121, 102, 145, 190, 187, 186, 148, 189, 248, 65, 70, 190, 247, 204, 135, 189, 253, 47, 179, 189, 232, 120, 115, 190, 141, 231, 131, 61, 163, 177, 9, 190, 180, 39, 53, 189, 9, 139, 162, 188, 230, 128, 67, 189, 13, 238, 42, 189, 115, 121, 3, 190, 164, 217, 13, 189, 41, 205, 138, 61, 189, 172, 64, 190, 90, 43, 96, 62, 8, 35, 140, 189, 42, 160, 53, 62, 40, 228, 115, 61, 47, 219, 11, 62, 189, 12, 4, 190, 49, 171, 30, 61, 25, 103, 64, 62, 0, 57, 118, 188, 7, 63, 73, 62, 132, 5, 98, 190, 169, 126, 186, 61, 127, 180, 11, 190, 80, 88, 53, 61, 151, 119, 141, 62, 128, 67, 85, 62, 153, 97, 5, 190, 116, 220, 44, 62, 31, 90, 100, 189, 12, 88, 78, 190, 253, 86, 23, 62, 127, 182, 230, 57, 234, 165, 117, 189, 31, 12, 72, 189, 34, 218, 122, 190, 115, 139, 60, 190, 14, 33, 183, 189, 75, 82, 38, 188, 123, 120, 176, 61, 187, 227, 125, 61, 219, 209, 41, 190, 210, 100, 219, 189, 139, 41, 63, 190, 38, 53, 49, 60, 1, 239, 48, 190, 210, 194, 63, 61, 183, 105, 214, 61, 149, 35, 15, 190, 132, 245, 3, 61, 21, 171, 49, 188, 83, 214, 216, 188, 114, 20, 0, 61, 101, 86, 238, 189, 50, 29, 70, 189, 58, 98, 27, 190, 162, 0, 240, 189, 123, 145, 245, 187, 124, 211, 35, 190, 131, 132, 255, 189, 62, 52, 172, 189, 111, 113, 128, 59, 184, 196, 246, 188, 69, 210, 178, 189, 54, 41, 32, 60, 227, 2, 2, 189, 129, 210, 132, 60, 45, 236, 24, 62, 12, 221, 28, 188, 201, 234, 198, 189, 49, 62, 135, 189, 121, 147, 116, 190, 74, 104, 236, 60, 4, 75, 120, 62, 43, 58, 149, 62, 83, 171, 60, 190, 242, 159, 250, 189, 79, 5, 236, 188, 221, 214, 253, 61, 199, 228, 164, 60, 19, 236, 172, 62, 4, 49, 178, 60, 251, 4, 23, 190, 35, 250, 138, 61, 197, 5, 29, 62, 90, 166, 247, 189, 74, 216, 168, 189, 52, 63, 23, 62, 2, 181, 247, 189, 246, 177, 208, 190, 97, 207, 33, 190, 246, 82, 141, 61, 16, 132, 103, 62, 214, 25, 153, 60, 239, 117, 2, 62, 210, 141, 171, 188, 104, 106, 147, 189, 10, 182, 230, 61, 220, 87, 77, 61, 71, 156, 177, 62, 26, 184, 87, 62, 248, 172, 123, 62, 43, 152, 142, 62, 225, 135, 0, 190, 161, 237, 135, 61, 234, 227, 128, 60, 94, 25, 223, 60, 120, 191, 8, 190, 87, 141, 253, 189, 107, 186, 170, 189, 105, 141, 51, 61, 53, 159, 89, 189, 60, 170, 192, 61, 91, 15, 252, 61, 149, 158, 12, 62, 53, 204, 191, 59, 4, 53, 68, 190, 196, 7, 111, 189, 53, 75, 116, 188, 155, 206, 173, 60, 3, 237, 50, 190, 188, 152, 196, 61, 185, 249, 87, 188, 26, 0, 115, 186, 234, 76, 49, 190, 129, 113, 1, 62, 252, 92, 28, 61, 106, 124, 7, 62, 210, 89, 220, 189, 103, 37, 207, 61, 18, 152, 133, 61, 239, 134, 151, 188, 222, 235, 177, 187, 191, 162, 46, 190, 15, 56, 93, 189, 61, 44, 87, 190, 106, 237, 44, 62, 69, 94, 0, 62, 120, 94, 133, 190, 190, 126, 181, 190, 202, 47, 144, 62, 56, 190, 144, 61, 143, 249, 11, 189, 202, 194, 227, 188, 196, 236, 30, 61, 134, 166, 217, 61, 184, 54, 45, 62, 178, 69, 69, 62, 37, 174, 123, 60, 217, 166, 16, 190, 127, 49, 26, 190, 79, 165, 171, 61, 251, 31, 239, 61, 122, 17, 246, 188, 124, 177, 157, 62, 131, 154, 187, 61, 85, 185, 237, 189, 80, 138, 63, 62, 3, 212, 36, 189, 97, 249, 194, 188, 213, 13, 67, 189, 255, 126, 157, 61, 65, 244, 152, 190, 228, 77, 149, 62, 187, 35, 5, 190, 248, 41, 135, 62, 180, 255, 232, 61, 232, 216, 164, 189, 128, 189, 144, 189, 102, 134, 161, 62, 234, 226, 21, 189, 61, 82, 7, 189, 91, 237, 252, 60, 51, 11, 34, 61, 179, 249, 148, 60, 40, 227, 74, 62, 175, 111, 62, 189, 240, 80, 185, 190, 235, 133, 18, 190, 23, 38, 93, 190, 32, 22, 71, 59, 236, 33, 7, 60, 116, 87, 84, 62, 79, 64, 100, 190, 172, 45, 69, 190, 87, 125, 106, 188, 165, 63, 50, 191, 56, 115, 42, 62, 30, 242, 145, 61, 171, 116, 43, 190, 125, 71, 246, 186, 113, 191, 235, 61, 79, 222, 166, 58, 130, 76, 177, 188, 248, 143, 104, 62, 118, 175, 241, 61, 43, 67, 228, 61, 250, 37, 16, 188, 40, 48, 245, 60, 106, 73, 12, 189, 121, 57, 206, 188, 126, 255, 70, 189, 113, 182, 61, 190, 115, 21, 68, 62, 22, 223, 8, 58, 237, 133, 13, 62, 54, 209, 75, 190, 139, 178, 255, 187, 189, 108, 139, 190, 138, 238, 202, 61, 207, 217, 42, 61, 148, 45, 195, 188, 60, 77, 117, 61, 51, 216, 60, 190, 178, 252, 239, 187, 85, 146, 0, 62, 116, 3, 147, 62, 62, 136, 2, 62, 185, 157, 226, 188, 64, 4, 47, 190, 216, 33, 241, 61, 174, 20, 242, 61, 225, 13, 33, 190, 199, 64, 242, 61, 133, 154, 18, 62, 216, 84, 25, 189, 55, 232, 219, 60, 196, 83, 69, 60, 4, 119, 247, 60, 241, 213, 154, 189, 50, 210, 32, 62, 172, 51, 179, 62, 197, 105, 41, 61, 44, 61, 131, 62, 167, 201, 134, 190, 143, 97, 46, 62, 77, 7, 96, 188, 217, 255, 114, 62, 169, 42, 72, 59, 212, 43, 42, 62, 140, 236, 14, 189, 103, 131, 233, 190, 76, 87, 49, 61, 1, 6, 183, 190, 92, 192, 13, 62, 45, 39, 148, 189, 13, 165, 221, 188, 240, 247, 178, 190, 255, 87, 128, 190, 240, 7, 58, 62, 19, 185, 97, 191, 110, 125, 140, 187, 131, 221, 80, 62, 167, 242, 4, 190, 83, 230, 72, 62, 231, 156, 85, 189, 82, 250, 26, 190, 125, 183, 2, 62, 96, 30, 10, 62, 193, 156, 84, 62, 226, 25, 121, 62, 103, 11, 126, 190, 36, 24, 211, 190, 229, 213, 9, 191, 226, 150, 24, 190, 43, 220, 136, 190, 100, 251, 5, 61, 114, 13, 22, 190, 80, 142, 211, 190, 8, 56, 146, 61, 106, 0, 68, 191, 187, 194, 62, 191, 227, 139, 188, 190, 220, 157, 168, 62, 166, 109, 59, 62, 153, 72, 117, 62, 56, 53, 122, 61, 249, 235, 141, 190, 30, 128, 132, 62, 139, 79, 135, 62, 101, 121, 213, 62, 153, 91, 148, 62, 141, 15, 22, 62, 250, 208, 140, 190, 87, 171, 59, 62, 25, 213, 84, 62, 123, 188, 186, 190, 150, 226, 83, 62, 48, 206, 53, 58, 90, 46, 224, 189, 174, 46, 13, 191, 50, 131, 215, 190, 233, 47, 247, 189, 253, 241, 38, 62, 233, 219, 132, 62, 38, 204, 181, 188, 226, 117, 29, 190, 172, 153, 83, 62, 118, 3, 2, 190, 219, 169, 91, 61, 187, 123, 93, 61, 226, 192, 196, 61, 137, 114, 23, 62, 26, 117, 221, 61, 7, 56, 66, 189, 207, 175, 29, 190, 61, 65, 86, 61, 155, 61, 87, 190, 27, 168, 212, 61, 211, 246, 234, 189, 193, 52, 159, 188, 117, 178, 66, 61, 51, 183, 129, 190, 246, 162, 4, 188, 113, 202, 236, 190, 120, 176, 110, 61, 174, 187, 190, 189, 241, 31, 141, 189, 252, 183, 175, 61, 32, 64, 228, 60, 119, 164, 206, 60, 81, 55, 65, 189, 220, 198, 254, 189, 128, 247, 54, 62, 97, 149, 174, 61, 233, 17, 147, 61, 28, 131, 163, 61, 56, 138, 77, 189, 89, 154, 212, 190, 124, 170, 136, 189, 25, 228, 218, 189, 19, 188, 234, 189, 9, 247, 105, 190, 36, 132, 159, 190, 189, 209, 7, 189, 194, 245, 167, 190, 184, 18, 144, 190, 175, 33, 66, 62, 69, 227, 160, 189, 182, 144, 177, 187, 97, 193, 170, 62, 180, 55, 116, 62, 81, 210, 165, 62, 169, 143, 148, 189, 225, 54, 48, 189, 177, 204, 130, 189, 162, 119, 13, 190, 186, 254, 168, 189, 5, 21, 170, 62, 48, 31, 21, 60, 18, 122, 134, 189, 20, 236, 234, 61, 205, 6, 102, 188, 123, 129, 160, 61, 48, 135, 172, 60, 194, 33, 137, 59, 176, 43, 200, 60, 162, 123, 134, 61, 85, 238, 176, 189, 209, 244, 246, 189, 230, 140, 209, 61, 237, 150, 113, 62, 171, 142, 177, 190, 76, 148, 65, 62, 209, 194, 180, 189, 2, 185, 237, 61, 150, 68, 169, 61, 181, 43, 13, 62, 194, 79, 16, 62, 63, 122, 102, 191, 235, 198, 213, 189, 240, 54, 18, 191, 181, 209, 131, 62, 20, 62, 137, 60, 164, 64, 157, 62, 218, 137, 0, 190, 172, 38, 47, 191, 172, 240, 40, 62, 231, 90, 105, 191, 44, 188, 97, 62, 142, 225, 162, 61, 22, 19, 173, 61, 6, 178, 107, 188, 118, 255, 91, 189, 65, 245, 243, 188, 203, 10, 194, 61, 157, 188, 211, 188, 177, 148, 188, 62, 69, 164, 154, 62, 74, 128, 218, 190, 57, 173, 136, 190, 28, 114, 246, 190, 200, 50, 153, 189, 35, 130, 196, 189, 53, 149, 192, 189, 188, 1, 93, 190, 189, 9, 183, 189, 134, 220, 98, 190, 133, 130, 233, 190, 167, 186, 95, 190, 105, 143, 163, 190, 228, 164, 109, 62, 0, 139, 182, 60, 13, 19, 200, 61, 79, 225, 14, 62, 135, 19, 77, 190, 125, 116, 0, 62, 38, 238, 51, 62, 29, 165, 131, 62, 63, 241, 204, 188, 8, 217, 84, 62, 75, 81, 220, 190, 245, 200, 69, 62, 117, 86, 185, 61, 99, 69, 155, 190, 114, 12, 146, 61, 223, 61, 202, 61, 208, 152, 217, 61, 90, 71, 222, 190, 102, 10, 109, 190, 49, 144, 27, 190, 232, 137, 178, 59, 123, 207, 213, 189, 68, 182, 206, 189, 109, 165, 153, 189, 114, 217, 242, 61, 35, 209, 226, 61, 47, 37, 68, 60, 249, 115, 119, 190, 70, 86, 235, 189, 221, 107, 173, 189, 56, 93, 19, 190, 166, 246, 222, 190, 224, 93, 20, 187, 64, 30, 144, 62, 153, 7, 78, 62, 55, 239, 160, 188, 17, 130, 183, 190, 19, 154, 59, 190, 191, 116, 174, 62, 192, 245, 230, 61, 4, 140, 202, 61, 93, 235, 11, 62, 126, 210, 118, 190, 57, 52, 13, 190, 191, 123, 71, 62, 171, 159, 229, 189, 53, 225, 149, 188, 201, 39, 98, 62, 238, 200, 40, 61, 179, 16, 122, 190, 221, 224, 51, 190, 18, 211, 100, 190, 229, 165, 161, 187, 171, 62, 54, 62, 233, 180, 196, 189, 50, 26, 223, 61, 205, 164, 30, 190, 168, 178, 176, 61, 220, 106, 168, 189, 64, 229, 20, 190, 64, 160, 214, 60, 33, 143, 172, 188, 199, 72, 218, 60, 119, 111, 0, 62, 210, 174, 6, 62, 182, 225, 250, 189, 219, 115, 12, 189, 157, 125, 69, 190, 167, 224, 237, 61, 194, 120, 212, 190, 139, 240, 79, 186, 223, 40, 74, 190, 187, 101, 253, 189, 245, 151, 154, 189, 211, 130, 198, 61, 192, 184, 203, 189, 105, 146, 164, 60, 227, 135, 30, 61, 151, 84, 129, 189, 60, 67, 72, 60, 201, 9, 42, 62, 189, 202, 22, 190, 184, 48, 31, 190, 236, 189, 112, 61, 5, 159, 161, 58, 86, 60, 233, 61, 90, 54, 122, 190, 128, 153, 193, 190, 211, 29, 159, 189, 127, 133, 164, 58, 195, 251, 44, 190, 97, 181, 95, 62, 65, 41, 111, 190, 101, 55, 212, 188, 143, 45, 74, 190, 58, 135, 0, 62, 197, 242, 23, 61, 104, 198, 58, 62, 220, 63, 67, 61, 20, 211, 86, 60, 197, 181, 88, 187, 159, 7, 208, 189, 200, 51, 8, 189, 140, 7, 129, 189, 203, 145, 107, 190, 35, 235, 52, 190, 124, 253, 122, 61, 3, 60, 116, 62, 113, 184, 160, 62, 10, 31, 18, 190, 91, 117, 63, 59, 183, 198, 157, 190, 105, 5, 150, 61, 188, 3, 152, 62, 110, 58, 5, 62, 0, 65, 82, 61, 140, 57, 11, 61, 147, 51, 118, 60, 97, 141, 34, 62, 202, 122, 0, 190, 231, 32, 190, 61, 83, 49, 198, 189, 132, 231, 3, 189, 94, 172, 182, 190, 72, 223, 207, 60, 103, 108, 130, 189, 78, 153, 244, 61, 241, 248, 84, 190, 64, 176, 166, 187, 224, 65, 57, 62, 207, 83, 228, 189, 111, 125, 59, 62, 41, 159, 35, 62, 238, 88, 135, 62, 252, 188, 50, 62, 73, 186, 39, 62, 33, 227, 63, 61, 243, 76, 164, 189, 184, 136, 26, 190, 215, 234, 146, 60, 91, 89, 152, 61, 133, 31, 35, 190, 224, 67, 82, 61, 36, 17, 136, 61, 83, 131, 168, 61, 174, 181, 92, 190, 43, 206, 14, 190, 80, 158, 102, 188, 9, 12, 155, 189, 53, 142, 67, 61, 37, 176, 89, 188, 182, 17, 145, 190, 236, 194, 241, 61, 224, 196, 96, 61, 72, 93, 202, 188, 7, 12, 158, 61, 86, 135, 81, 61, 26, 6, 216, 59, 175, 23, 145, 189, 53, 2, 226, 189, 0, 146, 206, 189, 7, 109, 186, 190, 251, 157, 244, 189, 55, 211, 135, 59, 204, 150, 6, 191, 159, 26, 135, 190, 222, 106, 184, 61, 175, 2, 141, 190, 30, 152, 137, 190, 80, 235, 15, 189, 217, 37, 159, 189, 14, 165, 130, 62, 122, 230, 206, 61, 4, 200, 23, 62, 12, 161, 10, 62, 77, 110, 205, 57, 30, 61, 25, 62, 148, 96, 205, 61, 233, 229, 136, 62, 167, 37, 39, 62, 241, 100, 159, 61, 195, 74, 167, 61, 178, 220, 125, 190, 107, 106, 63, 60, 216, 54, 80, 190, 240, 184, 76, 62, 95, 215, 227, 61, 161, 165, 239, 190, 170, 143, 219, 61, 41, 67, 11, 190, 146, 127, 3, 190, 62, 17, 19, 191, 102, 185, 14, 62, 20, 4, 66, 62, 220, 12, 46, 62, 135, 68, 54, 62, 30, 141, 124, 190, 71, 114, 227, 189, 148, 143, 192, 60, 75, 108, 144, 62, 123, 223, 15, 190, 213, 220, 205, 61, 211, 6, 133, 190, 209, 158, 15, 190, 133, 116, 67, 62, 240, 151, 126, 189, 30, 107, 27, 62, 152, 89, 30, 61, 10, 16, 17, 61, 169, 35, 144, 190, 73, 169, 83, 190, 113, 165, 208, 188, 100, 207, 127, 62, 84, 82, 213, 60, 233, 137, 29, 190, 54, 32, 16, 61, 156, 31, 180, 188, 38, 5, 206, 189, 36, 241, 241, 188, 193, 129, 50, 190, 19, 8, 95, 189, 194, 186, 172, 61, 143, 98, 111, 61, 155, 5, 148, 61, 29, 79, 166, 189, 160, 164, 76, 189, 60, 104, 244, 61, 21, 86, 145, 189, 181, 86, 248, 61, 102, 58, 254, 60, 217, 56, 2, 189, 238, 23, 252, 60, 28, 56, 174, 189, 26, 60, 40, 189, 201, 59, 201, 60, 45, 223, 133, 61, 174, 63, 177, 189, 158, 43, 148, 189, 247, 229, 209, 58, 182, 38, 108, 61, 239, 223, 230, 61, 84, 184, 7, 190, 29, 0, 117, 189, 236, 96, 155, 189, 134, 177, 160, 61, 255, 179, 222, 189, 43, 116, 187, 190, 250, 176, 109, 61, 4, 216, 101, 190, 163, 248, 43, 61, 71, 244, 120, 61, 5, 52, 151, 61, 58, 1, 177, 61, 162, 86, 37, 189, 93, 0, 139, 190, 28, 73, 129, 190, 119, 249, 93, 190, 208, 214, 236, 61, 27, 151, 193, 190, 201, 43, 31, 62, 75, 40, 227, 60, 124, 133, 242, 60, 26, 193, 122, 189, 5, 32, 145, 189, 130, 66, 158, 61, 162, 150, 68, 191, 247, 25, 164, 190, 93, 255, 0, 189, 222, 215, 32, 60, 79, 198, 77, 189, 142, 174, 189, 61, 81, 16, 154, 61, 40, 224, 155, 188, 156, 132, 25, 62, 204, 193, 21, 190, 50, 220, 0, 62, 99, 212, 130, 189, 204, 209, 12, 62, 20, 71, 1, 61, 66, 118, 155, 61, 51, 105, 156, 60, 221, 227, 166, 190, 127, 252, 161, 61, 116, 212, 241, 61, 41, 5, 79, 189, 9, 169, 193, 61, 237, 162, 159, 60, 160, 58, 37, 190, 10, 170, 89, 191, 163, 184, 110, 190, 164, 54, 58, 191, 103, 218, 36, 62, 224, 10, 67, 190, 64, 213, 131, 62, 51, 215, 87, 190, 18, 73, 86, 191, 11, 24, 169, 62, 139, 14, 181, 191, 100, 200, 114, 190, 225, 237, 197, 61, 30, 214, 48, 189, 185, 182, 1, 190, 44, 36, 187, 61, 209, 36, 132, 61, 114, 54, 27, 190, 99, 5, 249, 61, 50, 2, 25, 62, 42, 118, 18, 62, 211, 31, 176, 189, 154, 110, 147, 190, 95, 253, 62, 61, 4, 211, 138, 61, 140, 3, 150, 189, 119, 248, 24, 190, 2, 12, 1, 189, 16, 52, 166, 189, 48, 28, 180, 189, 194, 113, 8, 190, 228, 127, 218, 60, 124, 131, 64, 61, 196, 20, 199, 61, 127, 202, 186, 189, 197, 138, 225, 189, 251, 190, 209, 189, 210, 129, 159, 188, 171, 67, 187, 61, 226, 253, 137, 189, 204, 250, 88, 61, 97, 134, 76, 190, 31, 2, 193, 188, 156, 114, 164, 188, 55, 15, 116, 61, 214, 145, 41, 61, 166, 111, 229, 60, 148, 50, 243, 61, 209, 50, 70, 190, 222, 101, 24, 190, 240, 125, 95, 61, 108, 93, 197, 189, 46, 79, 77, 190, 102, 89, 37, 190, 130, 209, 5, 62, 41, 19, 250, 189, 211, 204, 196, 188, 66, 4, 68, 190, 199, 39, 126, 59, 16, 141, 255, 189, 173, 222, 113, 190, 69, 222, 75, 61, 226, 33, 195, 188, 135, 38, 68, 190, 24, 190, 24, 190, 219, 245, 241, 61, 148, 32, 131, 61, 12, 161, 67, 61, 114, 1, 115, 189, 72, 147, 244, 188, 167, 221, 200, 189, 213, 247, 14, 62, 76, 191, 190, 62, 201, 32, 155, 61, 154, 0, 232, 60, 107, 76, 175, 190, 147, 26, 242, 61, 206, 97, 8, 62, 175, 232, 59, 190, 229, 191, 42, 189, 245, 84, 219, 61, 85, 178, 200, 60, 85, 82, 179, 190, 159, 115, 22, 190, 169, 197, 5, 61, 126, 23, 109, 62, 231, 185, 12, 61, 130, 246, 171, 190, 76, 214, 5, 190, 230, 247, 131, 61, 191, 41, 166, 61, 245, 204, 163, 189, 231, 6, 120, 190, 174, 41, 45, 188, 69, 182, 132, 190, 162, 7, 96, 59, 122, 70, 143, 190, 173, 67, 139, 61, 90, 119, 15, 62, 110, 195, 54, 61, 135, 42, 116, 188, 24, 224, 62, 190, 15, 221, 240, 61, 134, 3, 151, 62, 7, 45, 194, 62, 77, 231, 116, 62, 131, 19, 161, 60, 236, 68, 172, 190, 119, 180, 179, 189, 0, 193, 90, 62, 240, 24, 19, 190, 235, 32, 77, 62, 85, 233, 148, 187, 72, 175, 47, 190, 185, 127, 212, 190, 108, 239, 43, 190, 167, 113, 227, 189, 125, 175, 81, 62, 254, 199, 164, 62, 49, 91, 42, 61, 233, 188, 30, 189, 208, 119, 139, 190, 217, 218, 9, 189, 189, 87, 200, 187, 158, 0, 174, 189, 79, 29, 189, 189, 186, 199, 251, 61, 220, 57, 72, 61, 175, 193, 63, 190, 133, 61, 1, 62, 91, 207, 75, 62, 136, 13, 216, 189, 178, 202, 176, 188, 182, 251, 62, 190, 14, 220, 43, 62, 165, 133, 12, 190, 178, 156, 160, 62, 26, 168, 16, 189, 58, 10, 110, 62, 140, 146, 98, 190, 52, 75, 37, 187, 94, 106, 16, 62, 163, 213, 14, 190, 74, 186, 76, 60, 181, 212, 57, 189, 136, 33, 88, 60, 141, 154, 14, 61, 144, 232, 62, 190, 235, 87, 211, 59, 62, 131, 67, 61, 230, 22, 254, 61, 211, 235, 177, 189, 155, 121, 0, 190, 113, 187, 70, 60, 186, 201, 205, 61, 159, 29, 43, 62, 82, 42, 0, 188, 63, 142, 86, 61, 244, 86, 222, 59, 130, 118, 156, 61, 219, 103, 206, 190, 80, 155, 2, 61, 111, 202, 27, 62, 75, 63, 81, 61, 204, 129, 105, 62, 253, 190, 128, 190, 247, 135, 199, 189, 187, 167, 174, 186, 169, 221, 159, 61, 11, 215, 97, 62, 236, 149, 147, 61, 31, 144, 133, 190, 118, 155, 56, 189, 102, 250, 203, 189, 56, 241, 236, 60, 159, 103, 192, 61, 199, 56, 77, 62, 90, 175, 188, 189, 85, 13, 4, 61, 43, 237, 131, 190, 119, 175, 21, 190, 188, 226, 242, 189, 12, 238, 119, 61, 100, 242, 126, 189, 144, 210, 254, 61, 207, 28, 214, 61, 46, 238, 96, 189, 161, 132, 169, 60, 68, 0, 221, 189, 177, 226, 14, 61, 30, 49, 177, 189, 31, 130, 120, 61, 88, 79, 241, 61, 215, 36, 122, 61, 123, 13, 131, 189, 74, 148, 115, 60, 184, 160, 76, 190, 184, 138, 212, 189, 117, 230, 103, 190, 4, 221, 14, 62, 25, 192, 40, 190, 8, 72, 91, 61, 141, 66, 227, 189, 222, 77, 183, 189, 157, 232, 67, 61, 1, 76, 227, 58, 47, 14, 250, 189, 118, 199, 205, 189, 4, 123, 52, 189, 255, 213, 48, 62, 95, 177, 184, 61, 79, 139, 224, 189, 149, 142, 5, 190, 143, 231, 52, 190, 242, 178, 178, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {66, 36, 61, 190, 14, 88, 137, 62, 167, 137, 22, 62, 227, 188, 128, 61, 234, 75, 53, 62, 147, 192, 182, 61, 106, 139, 66, 190, 57, 53, 59, 190, 234, 34, 33, 190, 81, 141, 206, 61, 18, 133, 55, 62, 98, 6, 246, 61, 67, 3, 55, 62, 95, 27, 25, 62, 33, 43, 196, 62, 8, 13, 59, 62, 39, 63, 163, 62, 36, 197, 129, 62, 0, 118, 250, 188, 160, 173, 106, 62, 62, 97, 161, 62, 215, 150, 35, 190, 149, 247, 0, 62, 158, 217, 203, 188, 227, 88, 58, 61, 22, 126, 27, 62, 250, 147, 251, 189, 154, 107, 137, 62, 117, 10, 37, 62, 216, 78, 64, 189, 143, 190, 151, 62, 32, 198, 37, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 197, 201, 59, 21, 249, 77, 189, 208, 104, 90, 189, 188, 143, 15, 190, 100, 168, 28, 62, 178, 59, 3, 190, 95, 116, 106, 190, 63, 150, 160, 61, 116, 242, 134, 190, 217, 89, 131, 190, 21, 142, 45, 61, 230, 139, 229, 190, 87, 10, 224, 62, 173, 110, 26, 190, 226, 147, 212, 62, 172, 140, 75, 191, 137, 1, 0, 63, 1, 150, 188, 62, 197, 62, 253, 188, 228, 88, 20, 190, 103, 196, 229, 61, 51, 18, 140, 190, 147, 110, 33, 62, 33, 230, 147, 189, 186, 142, 148, 190, 7, 20, 98, 191, 60, 250, 128, 189, 242, 174, 164, 62, 244, 50, 2, 63, 180, 72, 236, 61, 31, 40, 69, 62, 50, 27, 41, 60, 192, 152, 13, 62, 191, 2, 87, 190, 203, 217, 79, 190, 117, 22, 102, 190, 233, 203, 82, 190, 187, 14, 216, 60, 111, 253, 101, 62, 223, 66, 12, 62, 179, 62, 199, 189, 175, 178, 227, 61, 71, 208, 231, 189, 99, 236, 223, 61, 160, 189, 214, 61, 132, 218, 197, 189, 198, 36, 35, 190, 34, 249, 151, 61, 178, 171, 7, 190, 137, 178, 142, 61, 150, 98, 40, 62, 162, 110, 177, 190, 118, 20, 209, 189, 16, 137, 69, 61, 133, 151, 236, 60, 10, 131, 149, 61, 240, 128, 2, 190, 74, 207, 243, 59, 3, 84, 106, 60, 118, 68, 234, 189, 68, 171, 33, 62, 125, 207, 65, 62, 172, 28, 250, 189, 156, 27, 169, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {210, 235, 190, 59, 170, 220, 168, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {25, 113, 132, 60, 81, 180, 179, 62, 220, 172, 163, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {109, 134, 235, 190, 169, 142, 87, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0045/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}