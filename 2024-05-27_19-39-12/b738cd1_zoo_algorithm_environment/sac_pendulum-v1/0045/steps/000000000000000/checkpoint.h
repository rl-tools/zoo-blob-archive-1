// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 205, 4, 191, 136, 112, 152, 62, 122, 184, 237, 190, 200, 246, 252, 190, 79, 157, 198, 190, 168, 240, 160, 190, 239, 148, 18, 63, 83, 213, 38, 62, 76, 111, 232, 62, 143, 149, 213, 61, 163, 205, 64, 189, 71, 50, 30, 190, 153, 126, 44, 190, 233, 33, 34, 62, 49, 106, 251, 190, 202, 124, 216, 61, 69, 170, 240, 190, 151, 104, 177, 62, 223, 119, 154, 190, 240, 101, 159, 190, 85, 37, 248, 190, 177, 251, 144, 190, 62, 143, 221, 62, 198, 188, 1, 191, 247, 49, 187, 190, 74, 178, 212, 62, 14, 53, 237, 190, 31, 86, 174, 62, 37, 113, 207, 61, 5, 169, 180, 62, 82, 243, 178, 190, 190, 78, 152, 190, 250, 134, 54, 62, 226, 252, 56, 190, 57, 124, 3, 191, 145, 96, 104, 62, 176, 78, 251, 190, 113, 159, 142, 190, 103, 155, 12, 63, 129, 75, 44, 62, 229, 186, 247, 60, 53, 101, 60, 62, 225, 183, 117, 190, 96, 76, 191, 62, 151, 15, 169, 62, 214, 153, 172, 190, 1, 119, 147, 62, 24, 136, 79, 62, 214, 203, 131, 62, 11, 38, 152, 190, 40, 231, 192, 190, 201, 81, 254, 189, 208, 47, 10, 191, 183, 165, 73, 62, 10, 71, 9, 191, 14, 161, 27, 190, 38, 53, 32, 190, 42, 234, 103, 190, 5, 9, 11, 191, 101, 239, 166, 189, 253, 188, 157, 62, 69, 237, 135, 62, 242, 194, 71, 62, 94, 174, 7, 63, 74, 147, 216, 62, 248, 243, 26, 190, 51, 77, 221, 62, 209, 46, 134, 62, 85, 235, 241, 190, 112, 195, 2, 62, 202, 140, 182, 190, 196, 112, 245, 62, 252, 179, 119, 62, 51, 186, 3, 190, 184, 169, 231, 190, 193, 231, 228, 60, 111, 103, 170, 190, 94, 139, 175, 190, 163, 17, 113, 190, 118, 201, 242, 62, 88, 168, 193, 60, 248, 68, 254, 62, 212, 3, 4, 63, 153, 186, 185, 189, 244, 23, 12, 63, 252, 179, 143, 62, 187, 60, 138, 62, 1, 108, 169, 62, 218, 174, 222, 62, 12, 179, 19, 63, 2, 246, 26, 62, 21, 7, 214, 190, 178, 206, 2, 191, 165, 95, 51, 62, 211, 229, 210, 190, 189, 48, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 177, 19, 191, 216, 248, 9, 60, 56, 51, 149, 190, 221, 238, 162, 190, 183, 113, 220, 62, 147, 201, 174, 190, 12, 123, 250, 62, 123, 55, 215, 190, 140, 138, 252, 190, 151, 171, 235, 190, 219, 14, 33, 190, 250, 227, 10, 63, 25, 56, 83, 61, 245, 92, 1, 63, 102, 32, 14, 190, 85, 216, 6, 62, 168, 87, 7, 190, 134, 193, 229, 61, 239, 75, 145, 62, 117, 32, 126, 190, 183, 139, 248, 190, 240, 224, 1, 63, 23, 110, 12, 63, 91, 223, 208, 190, 4, 182, 6, 63, 138, 97, 127, 62, 174, 142, 253, 190, 154, 72, 200, 61, 119, 102, 77, 60, 187, 46, 50, 190, 213, 230, 185, 190, 73, 229, 155, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 176, 26, 61, 64, 92, 218, 61, 177, 25, 51, 62, 61, 101, 22, 62, 117, 234, 100, 189, 42, 49, 179, 61, 161, 212, 242, 61, 224, 180, 48, 62, 24, 118, 207, 61, 241, 47, 49, 190, 141, 138, 15, 62, 112, 134, 0, 190, 49, 124, 34, 62, 237, 150, 239, 60, 97, 16, 228, 61, 28, 7, 194, 189, 228, 150, 219, 61, 7, 87, 9, 60, 43, 182, 47, 62, 154, 166, 13, 61, 244, 27, 36, 188, 226, 224, 95, 189, 184, 181, 209, 189, 93, 90, 215, 61, 112, 79, 225, 189, 52, 78, 134, 61, 117, 155, 33, 62, 19, 12, 238, 61, 236, 177, 37, 62, 93, 208, 9, 61, 225, 201, 31, 62, 129, 197, 15, 189, 22, 224, 19, 62, 202, 236, 89, 189, 14, 2, 141, 189, 46, 87, 5, 188, 118, 40, 44, 61, 197, 247, 62, 60, 206, 108, 244, 60, 18, 140, 7, 62, 113, 119, 40, 190, 227, 166, 173, 61, 1, 69, 188, 189, 179, 35, 97, 188, 32, 81, 167, 189, 80, 70, 221, 61, 166, 170, 75, 61, 242, 86, 206, 189, 169, 243, 43, 190, 72, 203, 32, 62, 129, 189, 24, 190, 176, 109, 221, 61, 137, 238, 208, 189, 132, 65, 1, 62, 128, 58, 44, 62, 228, 84, 17, 62, 207, 223, 172, 189, 44, 194, 224, 61, 222, 220, 5, 59, 215, 42, 16, 61, 49, 239, 128, 61, 188, 169, 163, 189, 94, 11, 43, 61, 228, 38, 28, 61, 90, 105, 171, 189, 166, 92, 190, 61, 129, 166, 14, 190, 196, 144, 210, 189, 180, 224, 29, 62, 213, 213, 139, 61, 162, 185, 143, 189, 8, 58, 4, 189, 187, 238, 17, 62, 101, 87, 247, 189, 195, 160, 138, 189, 171, 113, 160, 61, 89, 125, 109, 61, 146, 200, 186, 61, 131, 157, 36, 190, 29, 201, 39, 60, 123, 222, 128, 189, 243, 248, 186, 189, 143, 22, 198, 60, 162, 255, 47, 62, 115, 228, 23, 62, 46, 55, 241, 61, 167, 58, 106, 57, 44, 246, 9, 190, 252, 240, 8, 62, 118, 102, 186, 61, 184, 216, 253, 189, 159, 131, 135, 189, 175, 160, 52, 62, 109, 215, 229, 61, 18, 155, 71, 187, 107, 102, 154, 61, 177, 13, 232, 189, 93, 115, 242, 189, 201, 97, 239, 61, 172, 155, 31, 62, 248, 48, 45, 190, 183, 131, 12, 189, 66, 99, 156, 61, 90, 88, 119, 59, 249, 13, 22, 62, 45, 217, 197, 59, 161, 59, 9, 60, 209, 118, 124, 61, 198, 119, 142, 60, 164, 102, 197, 189, 200, 185, 21, 59, 74, 174, 14, 190, 61, 63, 215, 61, 245, 113, 166, 61, 236, 78, 38, 62, 235, 49, 29, 190, 234, 32, 52, 190, 96, 40, 86, 189, 17, 28, 43, 190, 115, 97, 38, 190, 156, 226, 214, 60, 217, 181, 118, 188, 141, 231, 131, 61, 193, 38, 206, 189, 194, 112, 24, 189, 38, 148, 140, 189, 238, 217, 167, 188, 110, 254, 14, 188, 175, 94, 9, 190, 14, 81, 90, 189, 157, 53, 188, 61, 16, 206, 0, 190, 228, 165, 38, 62, 180, 40, 244, 61, 212, 252, 233, 61, 158, 170, 165, 61, 18, 179, 11, 62, 172, 191, 216, 61, 158, 48, 252, 60, 210, 219, 28, 62, 148, 41, 40, 189, 160, 5, 246, 61, 239, 67, 29, 190, 240, 193, 170, 61, 0, 24, 32, 190, 23, 157, 193, 188, 116, 122, 45, 62, 116, 246, 24, 62, 12, 9, 238, 59, 177, 134, 234, 61, 1, 86, 196, 189, 220, 9, 198, 189, 131, 44, 150, 61, 162, 133, 161, 189, 163, 60, 134, 189, 153, 26, 84, 61, 39, 154, 3, 190, 167, 64, 15, 190, 143, 240, 176, 189, 97, 0, 159, 188, 118, 206, 177, 61, 187, 227, 125, 61, 194, 99, 19, 190, 210, 100, 219, 189, 229, 26, 47, 190, 229, 18, 172, 60, 216, 46, 43, 190, 60, 224, 67, 61, 15, 189, 215, 61, 163, 35, 3, 190, 34, 106, 11, 61, 188, 33, 208, 59, 12, 245, 166, 188, 175, 46, 109, 61, 211, 188, 222, 189, 153, 198, 13, 189, 75, 176, 24, 190, 115, 3, 216, 189, 6, 156, 232, 187, 124, 211, 35, 190, 8, 209, 242, 189, 112, 78, 107, 189, 43, 241, 231, 60, 35, 161, 180, 188, 222, 124, 125, 189, 25, 217, 203, 60, 227, 2, 2, 189, 73, 188, 37, 61, 103, 202, 50, 62, 86, 125, 82, 60, 201, 234, 198, 189, 49, 62, 135, 189, 91, 168, 33, 190, 12, 72, 240, 61, 196, 250, 230, 61, 236, 67, 19, 62, 157, 2, 42, 190, 182, 124, 24, 190, 235, 181, 161, 60, 152, 163, 13, 62, 115, 91, 246, 61, 66, 154, 251, 61, 167, 248, 16, 61, 58, 19, 50, 190, 64, 164, 130, 61, 180, 144, 17, 62, 103, 81, 14, 190, 178, 75, 76, 61, 204, 47, 185, 59, 63, 147, 249, 189, 59, 164, 111, 188, 172, 245, 222, 189, 181, 211, 182, 189, 130, 66, 211, 61, 157, 185, 231, 189, 173, 7, 209, 61, 226, 227, 224, 188, 241, 186, 181, 187, 82, 32, 2, 62, 124, 12, 47, 189, 14, 96, 23, 62, 115, 251, 234, 61, 63, 134, 228, 61, 237, 146, 23, 62, 225, 135, 0, 190, 161, 237, 135, 61, 87, 148, 36, 61, 94, 25, 223, 60, 120, 191, 8, 190, 106, 5, 202, 189, 107, 186, 170, 189, 105, 141, 51, 61, 53, 159, 89, 189, 217, 199, 233, 61, 6, 230, 25, 62, 142, 49, 40, 62, 116, 255, 250, 60, 236, 71, 47, 190, 84, 218, 24, 189, 236, 51, 228, 59, 155, 206, 173, 60, 209, 28, 22, 190, 179, 249, 210, 61, 14, 214, 227, 60, 164, 12, 32, 61, 238, 145, 52, 190, 129, 113, 1, 62, 157, 168, 128, 61, 106, 124, 7, 62, 210, 89, 220, 189, 218, 132, 218, 61, 141, 33, 127, 61, 49, 52, 32, 58, 189, 47, 150, 60, 191, 162, 46, 190, 15, 56, 93, 189, 254, 207, 150, 189, 86, 228, 16, 62, 180, 110, 253, 61, 137, 213, 25, 190, 192, 243, 43, 190, 241, 210, 26, 62, 5, 243, 26, 62, 39, 175, 177, 61, 92, 4, 243, 61, 239, 230, 132, 189, 113, 101, 58, 61, 221, 152, 201, 61, 232, 98, 14, 62, 147, 117, 62, 60, 158, 249, 13, 190, 242, 187, 175, 60, 210, 38, 168, 189, 62, 200, 202, 188, 208, 226, 198, 61, 134, 11, 40, 62, 231, 238, 137, 61, 44, 84, 252, 189, 187, 16, 120, 60, 125, 152, 181, 189, 151, 126, 56, 189, 233, 201, 149, 189, 234, 18, 108, 61, 51, 125, 121, 189, 128, 106, 45, 62, 186, 91, 42, 190, 79, 221, 23, 62, 121, 34, 95, 60, 104, 0, 251, 189, 168, 31, 90, 189, 246, 197, 52, 62, 242, 7, 225, 60, 229, 5, 113, 189, 226, 145, 192, 189, 203, 85, 80, 61, 193, 182, 21, 189, 184, 242, 34, 62, 198, 106, 25, 190, 101, 189, 38, 189, 157, 182, 88, 189, 165, 36, 64, 189, 191, 229, 10, 60, 129, 85, 183, 58, 230, 40, 50, 62, 51, 138, 181, 189, 214, 174, 115, 61, 101, 114, 70, 61, 199, 245, 67, 61, 83, 168, 198, 61, 252, 178, 104, 61, 241, 180, 245, 189, 220, 46, 181, 189, 171, 246, 34, 62, 215, 22, 212, 61, 28, 240, 197, 188, 85, 127, 11, 62, 74, 232, 235, 188, 120, 144, 152, 60, 52, 134, 228, 61, 208, 30, 22, 62, 242, 85, 225, 59, 121, 131, 16, 189, 32, 225, 141, 189, 220, 81, 180, 189, 108, 209, 48, 62, 91, 196, 39, 62, 179, 121, 206, 61, 200, 53, 7, 190, 36, 223, 35, 61, 5, 117, 71, 189, 53, 140, 74, 61, 157, 42, 196, 189, 135, 147, 245, 189, 185, 140, 159, 189, 60, 177, 18, 190, 130, 69, 204, 60, 164, 38, 5, 62, 22, 210, 213, 61, 173, 82, 47, 61, 35, 177, 170, 189, 217, 213, 71, 188, 52, 162, 135, 61, 216, 87, 198, 61, 217, 18, 70, 189, 29, 24, 142, 61, 90, 87, 170, 61, 216, 84, 25, 189, 82, 126, 40, 62, 2, 127, 37, 59, 223, 48, 128, 60, 156, 222, 46, 189, 131, 70, 52, 62, 105, 141, 19, 62, 190, 160, 79, 189, 128, 127, 225, 61, 173, 102, 122, 61, 209, 242, 25, 61, 121, 157, 219, 189, 200, 118, 9, 62, 238, 142, 45, 190, 105, 213, 68, 189, 76, 94, 21, 190, 113, 119, 102, 189, 135, 225, 180, 61, 151, 17, 39, 190, 48, 31, 64, 61, 175, 95, 196, 189, 242, 225, 90, 189, 197, 119, 223, 189, 40, 227, 139, 188, 62, 47, 179, 61, 245, 123, 105, 61, 24, 223, 164, 189, 152, 60, 197, 60, 108, 172, 36, 190, 67, 166, 235, 61, 21, 146, 142, 189, 77, 207, 212, 189, 136, 49, 248, 61, 81, 29, 46, 188, 207, 225, 133, 189, 139, 80, 10, 62, 252, 132, 90, 59, 222, 180, 50, 190, 177, 5, 35, 62, 118, 141, 186, 59, 99, 146, 3, 190, 3, 253, 147, 59, 54, 7, 224, 189, 223, 68, 157, 188, 212, 210, 10, 62, 158, 208, 3, 190, 0, 104, 197, 189, 190, 52, 41, 189, 25, 31, 165, 61, 161, 147, 191, 189, 192, 172, 142, 61, 235, 221, 208, 189, 168, 51, 69, 189, 213, 190, 227, 61, 32, 26, 245, 61, 112, 221, 153, 61, 118, 80, 36, 62, 77, 109, 192, 185, 39, 6, 34, 190, 166, 250, 233, 61, 208, 144, 55, 60, 38, 102, 14, 190, 187, 82, 9, 62, 248, 38, 191, 187, 90, 46, 224, 189, 113, 165, 15, 62, 24, 96, 45, 190, 237, 129, 1, 62, 179, 176, 97, 61, 46, 176, 229, 61, 250, 92, 0, 188, 195, 51, 31, 190, 138, 28, 233, 61, 129, 129, 27, 189, 211, 40, 166, 61, 1, 67, 119, 189, 241, 234, 237, 61, 155, 71, 36, 62, 208, 58, 14, 62, 214, 47, 172, 189, 221, 105, 192, 61, 159, 198, 164, 61, 101, 41, 208, 189, 214, 245, 167, 61, 210, 127, 6, 190, 220, 253, 30, 61, 71, 211, 163, 61, 126, 22, 254, 189, 25, 107, 153, 61, 96, 184, 249, 60, 92, 101, 19, 61, 241, 126, 254, 189, 3, 48, 187, 189, 251, 53, 219, 60, 157, 70, 170, 60, 127, 9, 8, 61, 92, 108, 130, 189, 124, 252, 241, 189, 223, 94, 30, 61, 89, 30, 209, 59, 99, 23, 7, 62, 236, 37, 8, 62, 51, 115, 47, 62, 240, 152, 134, 188, 3, 99, 161, 188, 60, 217, 48, 62, 22, 103, 46, 189, 10, 46, 242, 188, 23, 140, 250, 189, 241, 82, 15, 62, 27, 229, 30, 190, 158, 0, 22, 190, 179, 191, 18, 62, 155, 3, 34, 190, 238, 174, 155, 189, 155, 237, 245, 61, 192, 115, 12, 62, 88, 108, 174, 61, 55, 253, 0, 190, 170, 124, 2, 189, 33, 28, 19, 190, 253, 131, 227, 189, 110, 228, 128, 186, 34, 53, 183, 61, 191, 225, 37, 190, 8, 48, 168, 61, 152, 204, 9, 189, 104, 193, 195, 189, 128, 199, 144, 61, 117, 36, 31, 190, 231, 94, 12, 61, 143, 253, 37, 61, 119, 253, 35, 62, 43, 242, 150, 188, 48, 43, 19, 190, 114, 56, 129, 188, 213, 107, 83, 61, 205, 196, 207, 189, 25, 151, 255, 61, 70, 187, 245, 189, 233, 72, 126, 61, 41, 141, 130, 61, 221, 86, 223, 61, 99, 122, 187, 60, 180, 146, 240, 188, 81, 87, 0, 188, 176, 250, 7, 190, 211, 220, 18, 62, 154, 160, 112, 189, 245, 4, 236, 61, 220, 6, 13, 62, 39, 74, 237, 188, 216, 26, 54, 60, 27, 66, 5, 62, 58, 131, 199, 61, 46, 216, 73, 59, 156, 166, 20, 62, 201, 134, 90, 189, 210, 245, 126, 189, 121, 46, 214, 187, 25, 184, 203, 61, 144, 31, 254, 189, 249, 253, 12, 62, 61, 185, 221, 61, 52, 249, 30, 190, 90, 147, 171, 188, 240, 237, 41, 190, 224, 173, 237, 61, 195, 106, 242, 188, 7, 33, 201, 61, 24, 213, 42, 190, 195, 115, 20, 62, 189, 64, 6, 190, 1, 92, 35, 190, 71, 218, 239, 61, 60, 91, 4, 62, 215, 120, 20, 62, 214, 38, 35, 190, 180, 61, 30, 188, 225, 57, 58, 189, 13, 250, 219, 189, 81, 162, 170, 187, 63, 90, 37, 62, 109, 51, 142, 61, 43, 206, 208, 189, 76, 76, 211, 61, 97, 119, 28, 190, 68, 239, 238, 61, 155, 218, 164, 60, 91, 130, 5, 190, 36, 214, 211, 60, 215, 172, 192, 61, 208, 152, 217, 61, 156, 52, 163, 189, 4, 223, 189, 189, 205, 198, 155, 189, 55, 232, 125, 61, 203, 93, 147, 189, 204, 179, 224, 60, 206, 95, 216, 188, 190, 74, 17, 62, 156, 11, 230, 188, 8, 113, 201, 60, 237, 101, 157, 188, 166, 159, 4, 190, 129, 108, 133, 61, 113, 186, 209, 187, 32, 232, 186, 189, 23, 3, 19, 190, 63, 240, 163, 61, 245, 172, 199, 61, 99, 7, 150, 189, 44, 218, 20, 190, 37, 133, 144, 189, 208, 20, 37, 62, 242, 34, 15, 190, 1, 180, 78, 61, 157, 181, 125, 188, 254, 238, 53, 189, 50, 158, 47, 190, 183, 176, 180, 61, 217, 66, 35, 61, 11, 204, 161, 189, 96, 201, 27, 62, 238, 200, 40, 61, 117, 195, 39, 189, 6, 56, 47, 188, 75, 205, 12, 190, 224, 53, 45, 190, 201, 42, 155, 59, 196, 40, 35, 189, 97, 241, 18, 62, 205, 164, 30, 190, 244, 167, 178, 61, 157, 241, 23, 189, 42, 172, 27, 190, 197, 215, 130, 61, 84, 212, 211, 60, 206, 119, 163, 61, 119, 111, 0, 62, 91, 77, 11, 62, 81, 253, 81, 189, 101, 42, 13, 189, 13, 106, 246, 189, 167, 224, 237, 61, 62, 131, 45, 190, 38, 114, 186, 187, 184, 118, 46, 190, 70, 219, 115, 189, 98, 67, 91, 189, 211, 130, 198, 61, 84, 14, 173, 189, 95, 210, 5, 61, 227, 135, 30, 61, 94, 183, 48, 189, 8, 120, 189, 60, 201, 9, 42, 62, 123, 164, 201, 189, 223, 207, 33, 190, 236, 189, 112, 61, 58, 205, 149, 58, 108, 118, 239, 61, 248, 225, 134, 189, 14, 118, 97, 61, 153, 186, 247, 189, 85, 232, 134, 189, 144, 144, 24, 190, 148, 21, 37, 62, 146, 85, 185, 189, 231, 220, 7, 61, 97, 30, 146, 189, 114, 205, 253, 61, 81, 224, 110, 61, 114, 215, 253, 61, 144, 234, 206, 60, 40, 114, 206, 189, 209, 166, 167, 60, 242, 115, 65, 189, 34, 12, 128, 189, 10, 142, 134, 189, 121, 142, 169, 189, 196, 180, 231, 61, 203, 249, 196, 61, 48, 140, 52, 61, 203, 223, 16, 62, 23, 158, 43, 190, 114, 188, 95, 188, 182, 187, 102, 189, 48, 213, 96, 61, 41, 89, 4, 62, 232, 55, 61, 60, 101, 241, 56, 59, 169, 210, 89, 61, 255, 0, 107, 59, 29, 96, 38, 62, 90, 124, 229, 189, 90, 1, 193, 61, 196, 105, 85, 188, 99, 115, 150, 189, 124, 65, 147, 189, 24, 186, 126, 188, 238, 131, 225, 188, 226, 28, 1, 62, 119, 208, 114, 189, 30, 136, 160, 188, 123, 8, 35, 62, 163, 25, 45, 190, 146, 236, 66, 61, 179, 211, 181, 61, 161, 213, 51, 62, 217, 113, 51, 62, 124, 129, 17, 62, 206, 75, 93, 189, 75, 26, 231, 189, 104, 138, 192, 189, 221, 16, 129, 189, 58, 130, 123, 61, 188, 207, 99, 188, 57, 38, 186, 59, 184, 78, 150, 60, 62, 190, 158, 61, 168, 244, 228, 189, 233, 145, 27, 190, 136, 152, 169, 188, 123, 92, 86, 189, 122, 69, 111, 61, 45, 50, 54, 60, 199, 199, 4, 190, 106, 47, 6, 189, 18, 10, 237, 189, 154, 49, 186, 188, 97, 8, 40, 190, 121, 159, 9, 62, 123, 151, 16, 189, 221, 106, 21, 189, 183, 122, 30, 189, 111, 36, 203, 189, 138, 47, 188, 189, 63, 175, 6, 189, 178, 45, 49, 189, 237, 81, 216, 189, 235, 135, 68, 189, 172, 138, 17, 61, 98, 53, 58, 61, 32, 216, 16, 61, 181, 203, 67, 60, 212, 19, 5, 61, 72, 177, 42, 62, 105, 164, 9, 61, 237, 131, 34, 62, 16, 101, 47, 62, 225, 97, 13, 62, 30, 61, 25, 62, 231, 187, 110, 189, 204, 13, 217, 61, 108, 198, 118, 61, 241, 223, 9, 60, 93, 19, 85, 60, 192, 153, 43, 189, 137, 54, 30, 62, 41, 30, 175, 189, 37, 74, 169, 61, 6, 80, 47, 62, 181, 230, 25, 190, 171, 185, 20, 62, 62, 71, 221, 61, 177, 234, 162, 61, 81, 253, 30, 190, 106, 15, 141, 61, 230, 93, 169, 61, 147, 246, 199, 61, 17, 7, 41, 62, 131, 237, 140, 189, 129, 252, 103, 189, 130, 150, 12, 190, 241, 36, 37, 62, 81, 27, 42, 190, 111, 16, 16, 61, 174, 77, 217, 187, 183, 84, 179, 189, 158, 171, 31, 62, 198, 73, 21, 62, 235, 83, 30, 62, 59, 193, 250, 60, 239, 166, 25, 61, 72, 46, 185, 61, 48, 62, 249, 61, 90, 65, 238, 61, 31, 216, 208, 61, 6, 208, 12, 190, 218, 213, 28, 190, 118, 140, 143, 61, 23, 210, 204, 186, 38, 5, 206, 189, 239, 23, 168, 188, 70, 190, 27, 190, 91, 165, 21, 189, 13, 229, 172, 61, 143, 98, 111, 61, 223, 18, 185, 61, 143, 142, 76, 189, 90, 105, 136, 188, 86, 250, 22, 62, 194, 131, 48, 189, 129, 167, 18, 62, 239, 90, 111, 61, 154, 23, 2, 189, 97, 254, 125, 61, 61, 61, 144, 189, 100, 41, 10, 188, 149, 15, 61, 61, 97, 84, 147, 61, 211, 232, 175, 189, 143, 104, 77, 189, 162, 135, 202, 60, 149, 149, 188, 61, 19, 198, 249, 61, 145, 83, 253, 189, 89, 26, 37, 189, 73, 99, 92, 189, 172, 185, 160, 61, 142, 168, 222, 189, 13, 163, 27, 190, 76, 7, 113, 189, 155, 213, 238, 189, 155, 9, 195, 61, 222, 41, 67, 61, 28, 36, 48, 60, 239, 218, 186, 60, 153, 183, 218, 61, 63, 171, 160, 189, 40, 27, 11, 190, 170, 168, 179, 61, 105, 219, 119, 61, 170, 164, 23, 190, 194, 114, 169, 61, 92, 28, 114, 61, 241, 211, 30, 189, 158, 170, 235, 189, 135, 97, 143, 189, 74, 254, 20, 189, 52, 164, 135, 189, 196, 241, 36, 190, 87, 242, 180, 189, 156, 68, 181, 188, 167, 171, 44, 61, 222, 184, 231, 187, 209, 239, 110, 189, 40, 224, 155, 188, 12, 210, 41, 62, 130, 1, 12, 190, 187, 71, 44, 62, 214, 78, 144, 189, 60, 165, 9, 62, 223, 163, 112, 61, 251, 197, 128, 189, 95, 183, 85, 188, 128, 253, 252, 188, 48, 4, 225, 188, 108, 99, 182, 61, 231, 56, 43, 190, 95, 239, 224, 61, 207, 219, 22, 61, 4, 101, 110, 189, 39, 35, 173, 61, 61, 55, 148, 189, 224, 106, 236, 189, 250, 0, 6, 62, 68, 141, 34, 189, 99, 207, 36, 62, 192, 217, 176, 59, 124, 208, 30, 190, 189, 9, 235, 61, 39, 254, 12, 190, 234, 100, 245, 189, 25, 149, 5, 59, 163, 226, 22, 189, 31, 59, 82, 189, 178, 181, 17, 61, 188, 119, 229, 60, 143, 168, 24, 190, 170, 12, 23, 61, 120, 15, 147, 60, 151, 192, 8, 62, 165, 188, 46, 62, 254, 158, 90, 189, 114, 39, 164, 61, 113, 54, 203, 61, 60, 10, 27, 189, 169, 168, 3, 190, 196, 211, 26, 188, 198, 188, 161, 189, 117, 43, 134, 189, 58, 17, 214, 189, 215, 0, 95, 61, 124, 131, 64, 61, 196, 20, 199, 61, 126, 89, 32, 187, 197, 138, 225, 189, 32, 170, 140, 189, 180, 241, 146, 188, 81, 114, 215, 61, 44, 153, 73, 189, 161, 135, 209, 61, 86, 67, 44, 190, 110, 25, 182, 186, 92, 169, 127, 188, 103, 132, 152, 61, 112, 248, 116, 61, 166, 111, 229, 60, 39, 77, 15, 62, 180, 214, 48, 190, 222, 101, 24, 190, 99, 94, 143, 61, 31, 218, 131, 189, 116, 89, 52, 190, 71, 45, 17, 190, 159, 3, 25, 62, 164, 244, 231, 188, 176, 212, 180, 187, 93, 63, 243, 189, 135, 177, 112, 189, 222, 213, 31, 190, 63, 148, 215, 188, 89, 216, 182, 59, 223, 235, 186, 61, 242, 62, 184, 189, 141, 34, 1, 62, 24, 190, 73, 189, 167, 68, 11, 190, 106, 175, 200, 189, 183, 45, 164, 189, 150, 25, 91, 61, 212, 69, 116, 189, 72, 111, 210, 59, 184, 206, 204, 61, 132, 157, 255, 188, 89, 186, 224, 189, 18, 212, 214, 189, 8, 92, 48, 62, 76, 233, 125, 61, 35, 14, 96, 189, 148, 208, 246, 189, 250, 131, 59, 60, 239, 139, 195, 60, 200, 216, 189, 189, 64, 120, 253, 61, 114, 55, 31, 62, 111, 141, 250, 61, 34, 90, 198, 189, 248, 181, 52, 190, 10, 159, 128, 189, 51, 201, 50, 62, 68, 183, 131, 189, 63, 92, 244, 189, 233, 140, 148, 58, 150, 250, 50, 189, 128, 65, 140, 189, 255, 214, 29, 62, 146, 179, 28, 62, 193, 37, 22, 190, 45, 87, 238, 189, 58, 137, 193, 189, 103, 252, 204, 189, 214, 154, 155, 188, 219, 37, 107, 60, 52, 55, 195, 61, 25, 190, 194, 61, 15, 237, 208, 61, 144, 222, 49, 190, 194, 44, 195, 189, 194, 27, 233, 189, 228, 51, 129, 61, 157, 185, 66, 58, 238, 133, 225, 61, 220, 178, 176, 189, 3, 139, 38, 190, 151, 104, 39, 190, 238, 214, 0, 62, 112, 235, 84, 61, 195, 85, 23, 61, 224, 226, 3, 62, 167, 51, 93, 61, 134, 158, 162, 61, 113, 147, 250, 189, 148, 39, 196, 189, 1, 220, 184, 188, 134, 11, 202, 61, 255, 4, 152, 189, 45, 92, 10, 62, 47, 156, 44, 61, 181, 92, 202, 61, 165, 47, 90, 61, 71, 235, 162, 61, 108, 22, 12, 190, 121, 62, 229, 189, 64, 27, 50, 189, 119, 73, 199, 188, 37, 87, 32, 190, 14, 138, 46, 62, 251, 186, 235, 189, 94, 103, 230, 61, 160, 9, 118, 60, 77, 102, 65, 189, 150, 246, 31, 62, 115, 37, 54, 59, 128, 230, 48, 61, 205, 81, 207, 60, 237, 17, 159, 60, 82, 245, 194, 60, 217, 175, 234, 61, 193, 202, 38, 62, 176, 179, 249, 59, 68, 36, 180, 61, 173, 154, 181, 189, 239, 223, 235, 189, 149, 254, 57, 188, 60, 159, 250, 61, 0, 71, 246, 61, 34, 158, 50, 62, 237, 131, 77, 59, 203, 96, 213, 60, 116, 179, 153, 61, 101, 167, 255, 189, 175, 252, 71, 189, 8, 174, 121, 187, 4, 80, 29, 189, 177, 251, 188, 61, 104, 147, 15, 190, 106, 207, 181, 189, 40, 187, 27, 189, 58, 54, 11, 190, 68, 221, 245, 61, 14, 76, 7, 189, 105, 187, 167, 189, 183, 39, 240, 189, 244, 34, 12, 190, 8, 201, 20, 62, 57, 199, 3, 61, 138, 3, 14, 62, 90, 175, 188, 189, 7, 87, 230, 61, 101, 245, 30, 190, 95, 94, 5, 190, 59, 69, 17, 190, 86, 127, 229, 60, 250, 187, 47, 189, 151, 69, 39, 62, 8, 114, 215, 61, 233, 168, 110, 189, 215, 223, 104, 61, 68, 0, 221, 189, 43, 40, 152, 61, 153, 191, 139, 189, 228, 5, 155, 61, 88, 79, 241, 61, 84, 186, 138, 61, 123, 217, 11, 61, 70, 131, 190, 60, 46, 38, 43, 190, 184, 138, 212, 189, 209, 218, 30, 190, 18, 76, 35, 62, 8, 177, 159, 189, 196, 103, 219, 61, 39, 134, 180, 189, 222, 77, 183, 189, 193, 212, 155, 61, 249, 63, 2, 61, 47, 14, 250, 189, 243, 79, 136, 189, 70, 130, 34, 188, 255, 213, 48, 62, 236, 187, 211, 61, 184, 151, 225, 189, 177, 105, 5, 190, 242, 122, 36, 190, 233, 91, 215, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 116, 129, 189, 247, 142, 22, 62, 63, 162, 194, 61, 121, 23, 54, 189, 22, 205, 31, 61, 58, 197, 238, 61, 50, 43, 149, 189, 48, 57, 35, 190, 243, 167, 25, 190, 241, 0, 22, 62, 180, 133, 203, 60, 49, 106, 71, 188, 68, 164, 62, 189, 218, 225, 28, 62, 138, 121, 29, 62, 127, 192, 217, 60, 105, 160, 3, 62, 58, 2, 13, 62, 149, 207, 23, 61, 190, 200, 225, 61, 81, 197, 39, 62, 198, 45, 183, 188, 198, 54, 165, 61, 60, 207, 22, 60, 65, 51, 188, 189, 46, 228, 159, 188, 166, 9, 198, 189, 166, 34, 20, 62, 228, 39, 205, 188, 143, 211, 22, 190, 30, 216, 8, 62, 97, 11, 180, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {66, 217, 11, 60, 81, 24, 171, 189, 248, 46, 13, 190, 163, 38, 138, 189, 24, 171, 213, 61, 134, 242, 21, 190, 170, 232, 94, 188, 17, 132, 174, 61, 41, 134, 148, 189, 177, 139, 46, 190, 223, 236, 34, 60, 48, 246, 202, 189, 155, 116, 194, 188, 215, 2, 19, 190, 200, 255, 196, 61, 15, 245, 240, 189, 16, 61, 5, 187, 102, 15, 0, 62, 89, 206, 77, 188, 38, 35, 69, 189, 169, 66, 182, 60, 103, 132, 2, 190, 117, 122, 37, 188, 220, 80, 56, 189, 226, 254, 65, 189, 100, 23, 44, 190, 158, 64, 77, 188, 191, 62, 42, 62, 180, 172, 235, 61, 88, 72, 12, 62, 210, 212, 5, 62, 209, 95, 44, 189, 149, 123, 45, 62, 87, 50, 7, 190, 92, 141, 190, 189, 238, 214, 4, 188, 9, 208, 26, 190, 126, 2, 16, 61, 154, 221, 252, 61, 60, 108, 23, 62, 114, 252, 40, 190, 201, 39, 47, 61, 170, 2, 131, 189, 156, 35, 89, 60, 104, 235, 209, 59, 90, 39, 40, 190, 36, 161, 171, 189, 199, 225, 147, 61, 229, 184, 24, 190, 104, 137, 77, 61, 239, 224, 23, 62, 10, 28, 220, 189, 78, 38, 11, 189, 3, 140, 163, 60, 135, 3, 136, 60, 16, 19, 199, 61, 170, 61, 105, 189, 207, 243, 149, 60, 22, 33, 102, 61, 230, 16, 111, 189, 200, 194, 33, 62, 248, 101, 38, 62, 177, 41, 184, 189, 214, 86, 205, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 197, 118, 189, 156, 207, 37, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {7, 25, 160, 191, 242, 183, 132, 59, 71, 120, 111, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {59, 130, 32, 190, 212, 103, 4, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0045/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}