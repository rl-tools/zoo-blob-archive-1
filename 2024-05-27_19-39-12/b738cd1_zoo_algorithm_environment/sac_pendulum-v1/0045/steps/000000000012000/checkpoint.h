// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 144, 24, 191, 213, 44, 113, 61, 209, 112, 57, 191, 153, 64, 210, 190, 29, 246, 183, 191, 142, 236, 111, 190, 235, 111, 61, 63, 94, 48, 186, 62, 253, 79, 242, 62, 97, 246, 7, 63, 70, 24, 89, 190, 215, 248, 112, 190, 243, 30, 168, 190, 164, 250, 209, 190, 97, 248, 19, 191, 33, 177, 59, 59, 195, 209, 154, 191, 164, 146, 165, 62, 42, 27, 182, 189, 165, 86, 179, 191, 154, 237, 218, 190, 163, 46, 143, 190, 28, 217, 218, 62, 57, 90, 40, 191, 169, 241, 8, 191, 138, 224, 144, 61, 18, 95, 7, 191, 103, 179, 46, 63, 59, 101, 72, 63, 31, 147, 130, 61, 199, 149, 157, 190, 133, 62, 126, 63, 203, 41, 191, 62, 127, 215, 67, 188, 10, 151, 194, 190, 156, 222, 213, 62, 175, 3, 201, 190, 255, 188, 73, 63, 12, 219, 104, 63, 15, 184, 195, 61, 226, 231, 29, 61, 153, 85, 132, 59, 192, 215, 59, 62, 121, 91, 110, 63, 208, 234, 140, 62, 101, 21, 44, 191, 151, 94, 73, 63, 126, 201, 234, 59, 49, 21, 254, 62, 169, 162, 145, 191, 128, 16, 132, 190, 70, 110, 173, 62, 120, 218, 164, 191, 105, 84, 220, 62, 112, 101, 171, 191, 92, 10, 229, 190, 238, 104, 142, 60, 9, 97, 125, 189, 92, 96, 173, 62, 72, 162, 4, 63, 137, 45, 47, 63, 194, 24, 50, 63, 123, 152, 142, 62, 39, 191, 19, 63, 45, 186, 185, 62, 11, 158, 104, 190, 114, 5, 66, 63, 212, 43, 66, 191, 187, 95, 128, 190, 131, 26, 225, 190, 106, 103, 42, 190, 152, 13, 9, 63, 158, 36, 107, 62, 180, 28, 190, 190, 234, 53, 221, 189, 79, 70, 139, 189, 156, 126, 101, 191, 80, 50, 69, 190, 204, 216, 89, 190, 61, 149, 227, 62, 31, 14, 126, 58, 115, 42, 7, 63, 97, 229, 63, 63, 249, 175, 235, 189, 29, 31, 83, 63, 68, 151, 56, 63, 86, 41, 84, 62, 47, 146, 14, 63, 190, 219, 42, 63, 169, 123, 8, 63, 80, 110, 26, 63, 147, 212, 152, 191, 149, 34, 186, 190, 214, 115, 74, 61, 15, 46, 158, 191, 18, 68, 3, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 214, 35, 191, 110, 210, 39, 190, 209, 30, 187, 190, 7, 83, 59, 191, 50, 112, 39, 62, 224, 177, 54, 62, 51, 204, 198, 61, 203, 47, 218, 190, 109, 233, 5, 191, 231, 252, 15, 191, 178, 29, 141, 190, 136, 95, 1, 63, 222, 146, 139, 189, 55, 153, 7, 63, 51, 100, 144, 189, 85, 230, 219, 62, 242, 21, 194, 189, 96, 192, 176, 189, 39, 49, 35, 62, 107, 31, 192, 190, 243, 173, 2, 191, 69, 112, 55, 63, 220, 198, 41, 63, 183, 209, 187, 190, 42, 246, 41, 63, 33, 135, 108, 62, 223, 133, 6, 191, 145, 11, 18, 62, 150, 131, 18, 190, 139, 226, 80, 189, 10, 227, 226, 190, 160, 207, 242, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 213, 31, 189, 137, 253, 67, 190, 13, 221, 31, 62, 44, 25, 52, 62, 223, 240, 8, 190, 173, 213, 213, 61, 49, 170, 230, 60, 1, 4, 212, 61, 168, 74, 17, 61, 61, 75, 11, 191, 130, 247, 62, 61, 159, 102, 36, 190, 212, 65, 51, 61, 58, 124, 4, 190, 177, 41, 8, 189, 55, 131, 2, 191, 154, 156, 18, 190, 241, 13, 186, 61, 179, 68, 167, 190, 36, 124, 98, 188, 233, 147, 179, 58, 12, 230, 167, 190, 71, 12, 198, 188, 248, 79, 65, 61, 224, 137, 122, 190, 166, 18, 148, 190, 86, 20, 16, 62, 15, 204, 196, 190, 230, 237, 93, 62, 142, 199, 74, 189, 81, 97, 255, 61, 16, 59, 138, 189, 76, 249, 116, 62, 252, 103, 155, 189, 79, 206, 8, 61, 121, 16, 3, 190, 26, 37, 136, 189, 7, 33, 246, 60, 171, 73, 80, 190, 65, 224, 45, 62, 171, 111, 200, 189, 158, 201, 128, 190, 24, 230, 154, 190, 144, 24, 19, 62, 217, 252, 51, 190, 193, 177, 13, 62, 194, 23, 25, 191, 2, 4, 200, 190, 104, 24, 150, 190, 87, 210, 20, 62, 199, 83, 8, 190, 99, 215, 93, 188, 2, 22, 61, 191, 122, 24, 6, 62, 140, 150, 113, 62, 220, 63, 145, 62, 202, 217, 82, 189, 140, 150, 37, 62, 57, 48, 176, 60, 23, 143, 71, 59, 241, 191, 94, 61, 123, 199, 237, 188, 29, 216, 153, 190, 22, 241, 136, 190, 181, 111, 237, 188, 202, 2, 153, 61, 209, 78, 154, 189, 57, 244, 226, 190, 46, 42, 162, 61, 145, 128, 43, 189, 128, 166, 81, 190, 60, 240, 182, 188, 254, 46, 50, 62, 183, 190, 152, 189, 135, 154, 135, 189, 195, 158, 182, 61, 196, 34, 72, 61, 68, 212, 69, 62, 83, 105, 25, 190, 91, 35, 56, 61, 234, 115, 13, 190, 95, 242, 223, 190, 221, 192, 249, 188, 192, 229, 24, 61, 152, 198, 23, 62, 137, 217, 18, 62, 179, 58, 28, 61, 79, 10, 217, 189, 49, 39, 43, 62, 171, 15, 27, 62, 151, 210, 214, 189, 226, 189, 125, 60, 23, 16, 204, 62, 178, 171, 87, 62, 59, 147, 112, 190, 114, 216, 55, 190, 98, 236, 135, 190, 130, 12, 59, 190, 23, 125, 188, 61, 140, 2, 22, 62, 138, 42, 4, 191, 73, 36, 148, 62, 56, 150, 192, 190, 236, 215, 137, 190, 74, 1, 234, 61, 78, 56, 216, 190, 155, 126, 41, 188, 129, 196, 148, 62, 16, 90, 205, 61, 193, 145, 232, 61, 168, 73, 76, 190, 163, 29, 161, 190, 98, 2, 75, 191, 175, 249, 240, 62, 235, 48, 149, 62, 4, 145, 134, 190, 33, 248, 215, 190, 34, 72, 154, 61, 32, 196, 85, 189, 40, 24, 164, 189, 36, 157, 2, 189, 23, 53, 140, 191, 90, 236, 131, 61, 215, 224, 251, 186, 202, 124, 8, 190, 221, 89, 191, 189, 154, 32, 43, 191, 194, 208, 50, 190, 95, 198, 171, 189, 54, 68, 86, 190, 4, 16, 149, 60, 124, 122, 28, 62, 152, 98, 34, 62, 14, 77, 42, 189, 124, 147, 214, 60, 12, 241, 228, 61, 77, 56, 55, 62, 200, 123, 71, 190, 243, 123, 91, 61, 101, 64, 79, 62, 140, 53, 19, 188, 74, 31, 82, 62, 224, 174, 164, 190, 26, 254, 240, 61, 192, 134, 10, 190, 133, 95, 148, 61, 62, 151, 171, 62, 92, 180, 80, 62, 76, 53, 5, 191, 219, 163, 148, 62, 250, 98, 233, 60, 127, 198, 31, 190, 138, 64, 41, 62, 98, 113, 194, 60, 86, 88, 117, 189, 79, 103, 1, 62, 103, 8, 225, 190, 60, 107, 84, 190, 0, 109, 88, 190, 81, 252, 204, 189, 123, 120, 176, 61, 187, 227, 125, 61, 219, 209, 41, 190, 210, 100, 219, 189, 139, 41, 63, 190, 38, 53, 49, 60, 1, 239, 48, 190, 210, 194, 63, 61, 183, 105, 214, 61, 149, 35, 15, 190, 132, 245, 3, 61, 21, 171, 49, 188, 83, 214, 216, 188, 114, 20, 0, 61, 101, 86, 238, 189, 50, 29, 70, 189, 58, 98, 27, 190, 162, 0, 240, 189, 123, 145, 245, 187, 124, 211, 35, 190, 131, 132, 255, 189, 62, 52, 172, 189, 111, 113, 128, 59, 184, 196, 246, 188, 69, 210, 178, 189, 54, 41, 32, 60, 227, 2, 2, 189, 129, 210, 132, 60, 45, 236, 24, 62, 12, 221, 28, 188, 201, 234, 198, 189, 49, 62, 135, 189, 138, 77, 255, 190, 251, 32, 249, 61, 60, 150, 100, 62, 225, 130, 34, 62, 176, 188, 107, 190, 212, 53, 228, 61, 211, 210, 42, 61, 179, 227, 194, 189, 201, 44, 105, 190, 230, 157, 71, 190, 144, 216, 148, 189, 210, 117, 184, 189, 210, 82, 9, 61, 187, 162, 5, 62, 185, 168, 111, 190, 237, 236, 143, 190, 146, 165, 25, 62, 148, 236, 43, 62, 86, 160, 37, 191, 38, 226, 42, 190, 242, 83, 255, 60, 39, 121, 13, 62, 201, 176, 217, 60, 196, 170, 228, 61, 2, 100, 46, 189, 133, 240, 3, 190, 109, 138, 230, 61, 237, 86, 46, 190, 52, 31, 143, 62, 165, 29, 20, 62, 178, 184, 154, 62, 85, 93, 158, 62, 225, 135, 0, 190, 161, 237, 135, 61, 240, 10, 230, 187, 94, 25, 223, 60, 120, 191, 8, 190, 129, 241, 32, 190, 107, 186, 170, 189, 105, 141, 51, 61, 53, 159, 89, 189, 210, 207, 206, 61, 217, 28, 190, 61, 179, 141, 221, 61, 113, 7, 165, 188, 50, 84, 80, 190, 223, 176, 164, 189, 203, 244, 39, 189, 155, 206, 173, 60, 5, 237, 87, 190, 225, 60, 118, 61, 22, 228, 71, 189, 186, 85, 0, 188, 234, 76, 49, 190, 129, 113, 1, 62, 11, 34, 16, 60, 106, 124, 7, 62, 210, 89, 220, 189, 103, 37, 207, 61, 250, 25, 154, 61, 246, 2, 150, 188, 242, 155, 224, 188, 191, 162, 46, 190, 15, 56, 93, 189, 26, 211, 141, 190, 6, 167, 128, 190, 100, 145, 29, 62, 75, 90, 122, 189, 159, 121, 201, 190, 228, 221, 119, 62, 76, 198, 239, 189, 54, 148, 27, 190, 64, 233, 124, 189, 36, 29, 16, 190, 230, 116, 176, 61, 236, 104, 96, 62, 171, 35, 69, 62, 86, 178, 27, 62, 202, 70, 55, 190, 229, 185, 65, 190, 225, 226, 142, 62, 36, 6, 85, 62, 87, 225, 244, 190, 191, 108, 154, 62, 154, 151, 90, 61, 192, 234, 7, 189, 217, 30, 151, 62, 170, 168, 167, 189, 49, 107, 185, 189, 196, 24, 158, 190, 97, 138, 157, 61, 96, 104, 107, 190, 30, 31, 188, 62, 144, 111, 208, 189, 19, 33, 8, 63, 32, 7, 113, 62, 123, 61, 7, 190, 157, 221, 78, 62, 198, 192, 192, 62, 252, 252, 229, 190, 26, 114, 190, 188, 209, 235, 163, 62, 239, 9, 140, 61, 133, 130, 106, 60, 1, 160, 13, 62, 82, 78, 193, 61, 152, 43, 14, 191, 150, 8, 168, 189, 144, 50, 50, 190, 223, 164, 149, 189, 61, 8, 10, 62, 234, 46, 17, 62, 138, 107, 247, 190, 4, 251, 117, 190, 49, 121, 230, 61, 229, 156, 6, 191, 11, 122, 132, 62, 148, 75, 52, 188, 112, 246, 134, 190, 218, 55, 254, 61, 220, 3, 141, 61, 104, 74, 91, 189, 118, 43, 178, 188, 226, 20, 81, 62, 126, 139, 78, 62, 38, 33, 254, 61, 26, 242, 119, 190, 82, 18, 46, 189, 21, 45, 114, 189, 192, 120, 26, 190, 226, 134, 242, 189, 24, 132, 240, 59, 25, 133, 77, 61, 123, 83, 251, 59, 30, 233, 138, 189, 136, 255, 109, 190, 128, 132, 3, 189, 167, 32, 200, 190, 57, 155, 123, 61, 228, 8, 177, 60, 115, 136, 56, 189, 37, 141, 231, 188, 23, 176, 188, 190, 234, 44, 1, 190, 167, 93, 135, 61, 105, 123, 158, 62, 90, 223, 47, 62, 27, 196, 33, 189, 92, 138, 20, 191, 187, 180, 15, 62, 86, 40, 11, 62, 200, 164, 251, 189, 244, 208, 136, 61, 152, 85, 229, 61, 92, 63, 25, 189, 240, 5, 215, 61, 236, 173, 138, 190, 34, 206, 193, 188, 137, 138, 139, 190, 104, 168, 67, 187, 212, 255, 94, 62, 220, 35, 114, 62, 151, 160, 173, 62, 191, 187, 83, 191, 85, 95, 209, 61, 95, 39, 33, 62, 89, 173, 49, 62, 31, 66, 205, 189, 231, 179, 217, 60, 232, 28, 25, 62, 250, 249, 25, 191, 126, 30, 3, 62, 202, 28, 157, 190, 77, 218, 226, 61, 176, 237, 135, 60, 207, 10, 110, 190, 99, 162, 222, 190, 21, 24, 163, 190, 93, 142, 132, 62, 150, 162, 50, 191, 74, 152, 170, 61, 192, 60, 73, 62, 129, 217, 237, 189, 240, 246, 110, 62, 110, 177, 41, 189, 120, 10, 12, 190, 239, 130, 2, 62, 92, 68, 0, 62, 204, 240, 171, 62, 138, 199, 140, 62, 205, 6, 187, 190, 190, 28, 20, 191, 9, 134, 63, 191, 97, 101, 99, 190, 225, 188, 169, 190, 69, 251, 119, 61, 145, 169, 122, 190, 61, 109, 251, 190, 110, 78, 105, 189, 222, 150, 78, 191, 116, 165, 116, 191, 254, 227, 187, 190, 229, 238, 204, 62, 9, 146, 252, 61, 255, 124, 142, 62, 197, 114, 65, 61, 136, 203, 40, 190, 35, 122, 16, 63, 162, 101, 148, 62, 255, 177, 150, 62, 217, 42, 209, 62, 240, 124, 0, 62, 195, 108, 175, 190, 74, 158, 133, 62, 37, 71, 154, 62, 93, 134, 193, 190, 185, 99, 143, 62, 231, 254, 93, 61, 90, 46, 224, 189, 87, 240, 5, 191, 125, 206, 1, 191, 249, 194, 0, 190, 117, 145, 31, 187, 254, 147, 170, 62, 129, 138, 129, 189, 162, 177, 195, 57, 194, 183, 144, 62, 147, 143, 181, 190, 128, 251, 186, 58, 48, 19, 250, 188, 239, 144, 239, 61, 47, 126, 126, 61, 227, 2, 119, 61, 87, 237, 118, 189, 117, 162, 5, 191, 255, 10, 3, 62, 189, 46, 166, 190, 252, 135, 153, 61, 80, 188, 35, 190, 141, 27, 197, 189, 42, 129, 33, 62, 137, 150, 209, 190, 171, 20, 15, 61, 21, 112, 245, 190, 56, 68, 241, 60, 80, 47, 11, 190, 111, 40, 110, 189, 45, 143, 76, 59, 168, 9, 66, 61, 192, 229, 4, 62, 1, 122, 65, 189, 78, 77, 156, 190, 20, 174, 100, 62, 126, 9, 2, 62, 93, 251, 86, 62, 5, 148, 16, 60, 254, 48, 116, 190, 173, 137, 102, 191, 2, 76, 81, 189, 182, 11, 178, 62, 80, 77, 34, 190, 115, 109, 187, 190, 16, 172, 6, 191, 145, 202, 45, 190, 255, 84, 12, 191, 27, 112, 33, 188, 236, 150, 9, 62, 195, 232, 29, 190, 195, 34, 146, 189, 217, 246, 178, 62, 101, 129, 229, 61, 32, 232, 117, 62, 32, 245, 170, 189, 45, 72, 22, 190, 9, 81, 166, 189, 220, 171, 130, 190, 28, 94, 171, 60, 165, 60, 222, 62, 50, 119, 250, 60, 46, 177, 65, 190, 228, 91, 37, 62, 206, 174, 5, 188, 85, 100, 160, 61, 35, 251, 247, 61, 126, 147, 179, 61, 174, 244, 249, 188, 46, 125, 157, 62, 86, 35, 114, 62, 42, 198, 227, 189, 46, 199, 153, 62, 205, 57, 203, 62, 192, 79, 130, 191, 164, 5, 40, 62, 105, 66, 234, 61, 13, 184, 156, 61, 176, 37, 160, 61, 163, 217, 14, 62, 204, 0, 132, 61, 77, 90, 49, 191, 213, 211, 0, 62, 250, 129, 181, 190, 120, 177, 137, 62, 183, 64, 35, 62, 36, 61, 210, 62, 153, 209, 116, 190, 160, 80, 63, 191, 26, 210, 176, 62, 251, 206, 252, 190, 44, 184, 160, 62, 194, 161, 234, 60, 153, 51, 142, 61, 165, 165, 134, 62, 224, 217, 115, 189, 211, 146, 36, 189, 234, 89, 193, 61, 182, 140, 222, 189, 104, 197, 250, 62, 244, 81, 229, 62, 193, 194, 12, 191, 9, 34, 209, 190, 182, 242, 45, 191, 81, 191, 212, 190, 29, 139, 26, 190, 123, 179, 19, 190, 130, 183, 243, 190, 131, 75, 5, 190, 250, 45, 69, 191, 85, 9, 47, 191, 229, 126, 198, 190, 53, 117, 131, 190, 125, 240, 143, 62, 71, 95, 160, 59, 208, 120, 245, 61, 161, 59, 37, 62, 192, 85, 121, 190, 73, 193, 163, 62, 28, 126, 65, 62, 6, 166, 126, 62, 87, 128, 224, 60, 213, 139, 71, 62, 116, 115, 79, 191, 148, 201, 171, 62, 19, 30, 35, 62, 77, 55, 145, 190, 82, 246, 155, 61, 149, 164, 107, 61, 208, 152, 217, 61, 55, 27, 219, 190, 215, 118, 204, 190, 206, 0, 50, 190, 249, 178, 255, 188, 24, 142, 29, 189, 204, 218, 67, 190, 44, 34, 157, 190, 162, 158, 163, 61, 88, 19, 121, 61, 82, 197, 16, 190, 106, 50, 162, 190, 44, 41, 216, 190, 69, 37, 233, 189, 183, 48, 92, 190, 144, 24, 48, 191, 2, 66, 226, 61, 211, 47, 88, 62, 139, 61, 138, 62, 54, 116, 186, 189, 114, 118, 120, 190, 235, 153, 109, 61, 8, 52, 242, 62, 78, 15, 129, 60, 100, 50, 209, 61, 93, 86, 35, 62, 165, 199, 142, 190, 139, 28, 247, 189, 245, 103, 115, 62, 175, 15, 159, 189, 228, 40, 201, 189, 252, 130, 50, 62, 252, 162, 40, 61, 160, 29, 227, 190, 35, 117, 185, 190, 160, 93, 94, 190, 44, 190, 8, 190, 63, 173, 40, 61, 151, 52, 197, 189, 195, 62, 216, 61, 205, 164, 30, 190, 186, 20, 170, 61, 43, 220, 175, 189, 96, 148, 20, 190, 254, 212, 179, 60, 49, 84, 177, 188, 204, 187, 211, 60, 119, 111, 0, 62, 210, 174, 6, 62, 182, 225, 250, 189, 219, 115, 12, 189, 68, 5, 84, 190, 167, 224, 237, 61, 194, 120, 212, 190, 169, 252, 236, 187, 223, 40, 74, 190, 46, 178, 252, 189, 245, 151, 154, 189, 211, 130, 198, 61, 238, 24, 219, 189, 114, 216, 96, 60, 227, 135, 30, 61, 250, 8, 139, 189, 14, 52, 236, 59, 201, 9, 42, 62, 193, 71, 24, 190, 184, 48, 31, 190, 236, 189, 112, 61, 179, 20, 134, 187, 238, 236, 221, 61, 218, 165, 123, 190, 228, 20, 5, 191, 247, 114, 189, 189, 142, 101, 17, 191, 180, 168, 204, 190, 143, 200, 176, 61, 218, 161, 163, 191, 19, 247, 11, 190, 148, 142, 69, 190, 8, 166, 165, 60, 40, 26, 197, 60, 10, 235, 97, 62, 195, 67, 34, 60, 125, 192, 128, 61, 209, 217, 244, 189, 172, 189, 88, 190, 209, 26, 147, 188, 138, 210, 3, 190, 0, 133, 185, 190, 210, 60, 83, 190, 99, 122, 88, 189, 115, 74, 101, 62, 143, 43, 213, 62, 79, 171, 86, 190, 142, 104, 42, 187, 30, 160, 190, 190, 105, 5, 150, 61, 208, 51, 147, 62, 80, 160, 11, 62, 121, 103, 27, 61, 197, 154, 212, 190, 115, 176, 18, 191, 163, 214, 78, 62, 248, 129, 179, 190, 181, 149, 141, 61, 219, 25, 159, 62, 36, 149, 164, 189, 164, 62, 141, 190, 158, 106, 251, 189, 183, 147, 154, 187, 102, 91, 37, 62, 109, 1, 187, 190, 95, 100, 129, 189, 145, 117, 118, 62, 137, 6, 76, 190, 26, 43, 139, 62, 4, 86, 74, 190, 120, 103, 137, 62, 199, 216, 34, 62, 193, 209, 177, 62, 100, 113, 219, 189, 203, 17, 107, 190, 165, 111, 11, 191, 22, 182, 4, 62, 229, 31, 13, 62, 134, 161, 70, 190, 45, 159, 146, 61, 180, 37, 135, 61, 191, 160, 168, 61, 243, 34, 20, 188, 91, 54, 73, 190, 208, 28, 2, 189, 63, 84, 72, 190, 37, 174, 222, 188, 146, 232, 97, 190, 74, 110, 235, 188, 103, 90, 39, 62, 110, 56, 203, 190, 131, 102, 48, 190, 77, 146, 61, 62, 145, 164, 92, 189, 135, 23, 84, 190, 13, 183, 145, 190, 7, 134, 161, 189, 194, 112, 234, 190, 96, 238, 77, 190, 100, 196, 46, 191, 135, 27, 207, 61, 177, 244, 108, 191, 235, 204, 179, 190, 40, 168, 6, 62, 109, 12, 18, 61, 122, 94, 254, 190, 217, 122, 27, 191, 94, 53, 165, 190, 163, 19, 165, 62, 69, 85, 60, 62, 218, 148, 119, 191, 75, 47, 81, 62, 208, 175, 114, 61, 108, 31, 25, 62, 248, 211, 171, 60, 147, 14, 217, 62, 144, 24, 46, 62, 32, 166, 42, 60, 232, 168, 153, 189, 84, 205, 156, 190, 197, 7, 173, 189, 237, 234, 159, 190, 167, 89, 13, 63, 185, 193, 176, 61, 251, 230, 213, 190, 32, 157, 134, 60, 30, 43, 1, 190, 11, 134, 62, 190, 60, 187, 39, 191, 85, 188, 40, 62, 101, 122, 39, 62, 44, 203, 60, 62, 2, 93, 4, 62, 68, 52, 184, 190, 42, 175, 246, 188, 87, 98, 51, 61, 161, 168, 158, 62, 141, 144, 233, 60, 188, 20, 166, 61, 91, 20, 45, 191, 179, 93, 157, 189, 43, 70, 143, 62, 243, 227, 36, 189, 38, 208, 43, 62, 73, 75, 118, 61, 10, 16, 17, 61, 210, 169, 57, 190, 10, 72, 252, 190, 197, 124, 242, 189, 194, 72, 52, 62, 127, 58, 70, 61, 134, 179, 227, 189, 24, 121, 211, 190, 190, 145, 87, 190, 73, 154, 74, 190, 156, 149, 84, 190, 185, 2, 252, 190, 128, 241, 242, 190, 118, 240, 120, 62, 197, 6, 177, 61, 48, 147, 193, 190, 7, 70, 153, 61, 171, 18, 50, 190, 251, 155, 78, 62, 2, 218, 223, 61, 233, 238, 139, 62, 186, 21, 187, 62, 230, 8, 111, 190, 47, 53, 209, 190, 229, 106, 224, 190, 125, 105, 186, 59, 183, 1, 28, 190, 140, 58, 143, 62, 117, 187, 150, 189, 191, 231, 132, 189, 65, 76, 187, 60, 36, 119, 143, 190, 239, 223, 230, 61, 202, 141, 47, 62, 206, 213, 71, 189, 46, 114, 208, 189, 75, 107, 104, 190, 185, 175, 110, 190, 12, 196, 240, 190, 16, 52, 57, 62, 204, 109, 225, 189, 70, 25, 1, 190, 216, 10, 133, 189, 236, 103, 96, 62, 184, 244, 215, 61, 199, 239, 132, 190, 127, 172, 204, 190, 54, 57, 199, 190, 101, 188, 85, 191, 58, 158, 163, 62, 102, 189, 64, 191, 179, 10, 244, 61, 240, 23, 49, 190, 9, 135, 67, 188, 233, 224, 10, 188, 143, 21, 49, 190, 236, 254, 128, 61, 137, 205, 88, 191, 211, 233, 14, 191, 6, 208, 166, 189, 217, 67, 97, 59, 96, 201, 142, 190, 15, 231, 248, 61, 222, 119, 65, 62, 40, 224, 155, 188, 120, 61, 178, 189, 196, 67, 56, 190, 57, 59, 22, 62, 250, 248, 196, 61, 182, 208, 36, 60, 62, 161, 141, 60, 21, 117, 193, 62, 170, 147, 169, 190, 38, 96, 135, 191, 140, 98, 176, 61, 19, 17, 254, 62, 121, 253, 153, 60, 143, 54, 128, 61, 228, 209, 238, 185, 139, 131, 208, 188, 77, 170, 187, 191, 105, 33, 178, 190, 106, 188, 117, 191, 249, 48, 103, 61, 242, 6, 192, 190, 187, 199, 15, 62, 167, 241, 124, 190, 75, 78, 166, 191, 106, 137, 234, 62, 230, 15, 102, 191, 148, 148, 221, 190, 109, 222, 6, 61, 237, 153, 133, 189, 225, 146, 2, 63, 45, 99, 250, 61, 145, 106, 242, 61, 249, 155, 27, 190, 182, 5, 5, 62, 239, 11, 137, 62, 115, 46, 36, 190, 231, 48, 218, 189, 160, 165, 167, 190, 92, 31, 186, 188, 113, 105, 118, 190, 175, 64, 126, 190, 66, 215, 157, 190, 19, 71, 83, 60, 42, 49, 24, 191, 57, 246, 205, 190, 169, 158, 205, 189, 163, 74, 27, 189, 52, 138, 84, 62, 23, 156, 155, 62, 46, 83, 212, 190, 239, 31, 239, 60, 145, 74, 3, 62, 169, 44, 149, 62, 226, 66, 227, 62, 31, 14, 156, 190, 181, 41, 32, 191, 236, 92, 168, 190, 3, 209, 108, 61, 226, 1, 178, 61, 32, 132, 128, 62, 39, 21, 201, 60, 119, 50, 209, 61, 43, 37, 47, 62, 214, 130, 23, 191, 222, 101, 24, 190, 169, 116, 158, 62, 83, 59, 237, 61, 101, 227, 113, 190, 89, 125, 216, 190, 74, 60, 238, 60, 203, 10, 243, 189, 109, 246, 37, 190, 119, 189, 141, 190, 63, 167, 9, 62, 197, 251, 140, 190, 46, 105, 82, 190, 226, 86, 60, 190, 192, 3, 54, 61, 14, 55, 67, 190, 47, 188, 86, 190, 235, 14, 45, 62, 82, 164, 139, 61, 55, 170, 158, 61, 162, 84, 165, 189, 234, 100, 206, 189, 137, 38, 155, 189, 68, 104, 83, 62, 91, 112, 211, 62, 135, 29, 25, 62, 16, 127, 176, 60, 151, 78, 82, 191, 107, 59, 96, 62, 134, 90, 123, 62, 199, 66, 15, 190, 58, 152, 70, 189, 182, 34, 196, 61, 85, 178, 200, 60, 9, 106, 38, 190, 65, 188, 212, 190, 248, 195, 142, 188, 217, 63, 42, 62, 54, 225, 221, 187, 180, 5, 2, 191, 145, 107, 103, 190, 89, 71, 97, 187, 12, 31, 59, 61, 106, 98, 163, 190, 150, 17, 39, 190, 29, 10, 156, 190, 148, 41, 157, 190, 148, 54, 251, 189, 248, 128, 152, 190, 39, 64, 101, 61, 230, 174, 10, 62, 3, 66, 73, 61, 164, 84, 33, 190, 145, 113, 157, 190, 198, 151, 246, 60, 104, 232, 146, 62, 203, 63, 250, 62, 192, 110, 163, 62, 246, 200, 251, 187, 119, 35, 73, 191, 141, 102, 169, 190, 67, 97, 123, 62, 84, 233, 250, 189, 238, 141, 187, 61, 60, 148, 40, 189, 72, 175, 47, 190, 241, 46, 66, 191, 21, 121, 80, 191, 241, 195, 43, 190, 202, 169, 121, 190, 223, 73, 165, 61, 176, 175, 106, 56, 177, 100, 81, 190, 196, 200, 189, 190, 101, 7, 9, 63, 117, 77, 95, 189, 29, 51, 103, 61, 131, 157, 65, 190, 245, 109, 253, 61, 165, 126, 65, 60, 81, 64, 13, 191, 244, 16, 178, 59, 99, 237, 111, 62, 129, 76, 25, 190, 182, 48, 154, 188, 168, 182, 2, 191, 184, 213, 161, 61, 47, 152, 137, 61, 93, 39, 253, 62, 20, 121, 144, 188, 134, 224, 7, 62, 254, 142, 88, 191, 43, 67, 18, 61, 150, 125, 161, 62, 251, 91, 47, 190, 192, 177, 130, 61, 165, 172, 151, 60, 60, 250, 88, 60, 252, 34, 196, 61, 85, 227, 57, 191, 37, 170, 204, 189, 242, 255, 72, 61, 226, 228, 203, 61, 85, 218, 31, 189, 4, 54, 165, 190, 145, 162, 95, 189, 218, 65, 242, 62, 78, 155, 254, 61, 210, 105, 4, 189, 54, 232, 170, 189, 130, 126, 139, 61, 163, 67, 252, 61, 2, 160, 218, 190, 240, 249, 24, 61, 61, 23, 2, 62, 121, 116, 54, 61, 127, 128, 106, 62, 54, 126, 153, 190, 132, 70, 60, 60, 35, 130, 150, 60, 144, 213, 7, 61, 85, 178, 154, 62, 31, 218, 21, 61, 106, 220, 14, 191, 240, 54, 170, 61, 115, 97, 113, 60, 44, 254, 239, 60, 189, 116, 21, 62, 177, 215, 109, 62, 162, 132, 188, 189, 202, 132, 60, 62, 24, 96, 240, 190, 36, 16, 53, 190, 134, 193, 106, 190, 92, 114, 72, 188, 17, 121, 149, 189, 212, 241, 235, 61, 207, 28, 214, 61, 180, 241, 131, 189, 71, 222, 31, 60, 214, 126, 220, 189, 41, 201, 204, 60, 137, 120, 195, 189, 201, 73, 76, 61, 88, 79, 241, 61, 215, 36, 122, 61, 123, 13, 131, 189, 74, 148, 115, 60, 239, 138, 77, 190, 184, 138, 212, 189, 40, 8, 104, 190, 195, 96, 2, 62, 25, 192, 40, 190, 227, 193, 83, 61, 141, 66, 227, 189, 222, 77, 183, 189, 59, 0, 32, 61, 114, 41, 198, 187, 47, 14, 250, 189, 246, 169, 218, 189, 242, 42, 84, 189, 255, 213, 48, 62, 101, 179, 174, 61, 79, 139, 224, 189, 149, 142, 5, 190, 210, 239, 65, 190, 252, 84, 149, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 147, 174, 190, 191, 18, 123, 62, 253, 118, 89, 62, 157, 9, 110, 62, 227, 15, 60, 62, 147, 192, 182, 61, 67, 141, 68, 190, 112, 57, 82, 190, 213, 45, 55, 189, 11, 147, 129, 61, 226, 89, 184, 61, 60, 79, 214, 61, 135, 26, 51, 62, 231, 42, 23, 62, 15, 143, 191, 62, 91, 77, 96, 62, 46, 16, 176, 62, 164, 168, 26, 62, 16, 233, 21, 189, 197, 174, 152, 62, 250, 18, 191, 62, 241, 190, 147, 189, 26, 182, 176, 61, 96, 60, 37, 62, 164, 42, 29, 61, 149, 70, 231, 61, 149, 55, 130, 61, 139, 240, 118, 62, 112, 228, 185, 60, 24, 147, 141, 189, 22, 10, 152, 62, 144, 123, 43, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 70, 206, 60, 184, 7, 191, 61, 100, 141, 239, 59, 31, 20, 241, 190, 26, 107, 85, 62, 178, 59, 3, 190, 90, 156, 64, 190, 55, 230, 186, 61, 217, 51, 153, 190, 28, 255, 101, 190, 215, 26, 171, 61, 98, 54, 0, 191, 156, 116, 21, 63, 5, 87, 40, 190, 105, 255, 10, 63, 82, 155, 77, 191, 69, 101, 87, 63, 81, 77, 188, 62, 97, 193, 254, 188, 144, 200, 76, 190, 116, 76, 91, 62, 189, 98, 182, 190, 21, 172, 64, 62, 198, 178, 52, 191, 24, 2, 221, 190, 129, 111, 170, 191, 225, 175, 196, 190, 186, 246, 234, 62, 206, 119, 119, 63, 109, 28, 18, 63, 201, 65, 113, 62, 29, 142, 43, 60, 241, 94, 151, 62, 181, 118, 254, 190, 163, 157, 158, 190, 117, 145, 30, 190, 30, 49, 23, 190, 187, 14, 216, 60, 132, 68, 161, 62, 28, 239, 4, 62, 106, 250, 6, 190, 61, 11, 205, 62, 155, 242, 79, 187, 150, 158, 136, 61, 78, 118, 227, 61, 230, 203, 71, 190, 254, 172, 84, 190, 174, 5, 240, 188, 121, 98, 128, 190, 117, 180, 138, 189, 230, 41, 40, 62, 137, 239, 233, 190, 197, 28, 31, 190, 226, 249, 151, 190, 75, 91, 40, 62, 142, 219, 137, 189, 112, 156, 61, 60, 249, 137, 68, 61, 149, 9, 181, 62, 129, 35, 188, 189, 169, 6, 154, 62, 68, 153, 131, 62, 11, 187, 30, 190, 44, 122, 168, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 10, 171, 188, 94, 149, 193, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {39, 165, 254, 187, 87, 30, 126, 63, 64, 164, 241, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {152, 154, 181, 191, 136, 251, 225, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0045/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}