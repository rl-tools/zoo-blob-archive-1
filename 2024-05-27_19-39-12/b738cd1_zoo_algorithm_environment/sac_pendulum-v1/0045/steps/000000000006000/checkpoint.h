// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 213, 16, 191, 148, 68, 207, 62, 110, 37, 25, 191, 136, 246, 202, 190, 93, 30, 175, 191, 246, 135, 76, 190, 148, 152, 57, 63, 222, 178, 196, 62, 245, 250, 251, 62, 76, 142, 102, 62, 167, 24, 109, 190, 128, 239, 68, 190, 201, 148, 127, 190, 7, 244, 163, 190, 56, 14, 23, 191, 102, 248, 140, 189, 200, 72, 128, 191, 64, 15, 176, 62, 106, 253, 177, 189, 15, 229, 151, 191, 151, 85, 210, 190, 231, 241, 189, 190, 40, 84, 5, 63, 186, 180, 6, 191, 50, 254, 235, 190, 62, 101, 161, 62, 94, 128, 255, 190, 207, 119, 51, 63, 207, 18, 55, 63, 140, 1, 144, 61, 115, 181, 154, 190, 64, 82, 218, 62, 64, 122, 1, 63, 31, 176, 88, 62, 204, 158, 217, 190, 186, 110, 222, 62, 86, 211, 195, 190, 93, 189, 215, 62, 195, 202, 124, 63, 63, 28, 26, 62, 36, 145, 78, 62, 190, 7, 58, 61, 206, 118, 228, 60, 255, 11, 85, 63, 92, 165, 152, 62, 59, 165, 246, 190, 134, 20, 209, 62, 159, 79, 163, 60, 203, 119, 249, 62, 229, 83, 124, 191, 99, 169, 154, 190, 93, 28, 137, 62, 240, 69, 161, 191, 153, 162, 181, 62, 38, 190, 121, 191, 121, 167, 30, 191, 91, 173, 40, 61, 166, 33, 133, 190, 61, 251, 215, 61, 157, 63, 25, 63, 184, 207, 216, 62, 136, 143, 55, 63, 86, 113, 133, 62, 216, 87, 21, 63, 6, 175, 248, 62, 12, 45, 28, 190, 139, 131, 96, 63, 226, 85, 223, 190, 217, 223, 139, 190, 204, 57, 142, 190, 94, 195, 148, 190, 34, 254, 10, 63, 73, 124, 78, 62, 253, 243, 30, 190, 11, 167, 53, 190, 15, 139, 51, 61, 39, 7, 40, 191, 9, 21, 38, 190, 204, 216, 89, 190, 61, 149, 227, 62, 31, 14, 126, 58, 240, 210, 250, 62, 222, 194, 67, 63, 60, 117, 83, 190, 230, 21, 49, 63, 36, 239, 86, 63, 84, 187, 33, 62, 162, 221, 7, 63, 21, 146, 32, 63, 152, 200, 16, 63, 31, 183, 244, 62, 213, 62, 133, 191, 208, 177, 223, 190, 59, 137, 54, 62, 17, 10, 125, 191, 184, 147, 17, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 242, 47, 191, 22, 158, 235, 188, 67, 33, 146, 190, 104, 209, 9, 191, 188, 172, 138, 62, 34, 48, 122, 62, 217, 175, 53, 62, 96, 58, 14, 191, 109, 225, 11, 191, 143, 155, 1, 191, 136, 184, 82, 190, 192, 124, 245, 62, 246, 168, 38, 190, 231, 147, 42, 63, 143, 216, 82, 190, 119, 251, 225, 62, 223, 204, 41, 190, 161, 32, 178, 189, 201, 143, 79, 62, 224, 198, 102, 190, 248, 31, 2, 191, 165, 148, 58, 63, 69, 96, 35, 63, 88, 92, 217, 190, 102, 141, 59, 63, 191, 198, 199, 62, 223, 133, 6, 191, 237, 85, 234, 61, 79, 175, 196, 189, 66, 92, 203, 188, 63, 142, 247, 190, 235, 212, 128, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 213, 31, 189, 58, 153, 137, 188, 72, 102, 22, 62, 44, 25, 52, 62, 223, 240, 8, 190, 23, 111, 56, 61, 2, 42, 28, 61, 1, 4, 212, 61, 168, 74, 17, 61, 135, 131, 246, 189, 140, 9, 249, 61, 198, 0, 46, 190, 189, 22, 200, 61, 68, 131, 192, 189, 25, 146, 152, 61, 73, 32, 142, 190, 240, 187, 151, 61, 255, 228, 69, 188, 107, 208, 128, 189, 218, 8, 183, 60, 213, 233, 23, 61, 201, 237, 70, 190, 97, 93, 86, 190, 122, 161, 135, 61, 156, 133, 118, 190, 221, 179, 234, 188, 86, 20, 16, 62, 163, 158, 55, 189, 167, 230, 90, 62, 235, 169, 149, 188, 81, 97, 255, 61, 16, 59, 138, 189, 248, 27, 10, 62, 220, 190, 206, 59, 162, 226, 154, 60, 194, 94, 85, 190, 92, 173, 124, 60, 180, 76, 46, 189, 201, 228, 14, 61, 63, 173, 190, 61, 255, 171, 73, 190, 141, 147, 23, 61, 46, 103, 53, 190, 189, 203, 236, 60, 194, 133, 6, 190, 186, 127, 45, 62, 245, 99, 238, 188, 169, 9, 81, 190, 143, 91, 110, 190, 143, 156, 68, 61, 27, 159, 235, 189, 25, 117, 215, 188, 191, 152, 38, 190, 42, 79, 46, 62, 80, 69, 106, 62, 87, 142, 5, 62, 99, 169, 215, 188, 178, 39, 67, 62, 57, 48, 176, 60, 199, 68, 13, 189, 113, 147, 75, 62, 22, 216, 49, 188, 217, 71, 177, 189, 62, 184, 153, 189, 29, 228, 153, 189, 231, 189, 22, 62, 23, 132, 217, 189, 15, 237, 144, 190, 84, 148, 240, 61, 94, 103, 109, 61, 208, 196, 180, 189, 189, 29, 59, 189, 253, 54, 7, 62, 186, 10, 18, 190, 198, 193, 0, 190, 75, 84, 119, 61, 159, 97, 184, 60, 238, 134, 227, 61, 136, 179, 74, 190, 146, 37, 143, 189, 46, 52, 26, 190, 105, 20, 150, 190, 1, 117, 160, 58, 130, 202, 114, 60, 244, 18, 214, 61, 95, 202, 246, 61, 100, 85, 20, 61, 48, 102, 241, 189, 136, 88, 20, 62, 116, 25, 4, 62, 151, 210, 214, 189, 49, 152, 193, 189, 101, 24, 159, 62, 3, 247, 28, 62, 120, 195, 10, 190, 180, 171, 42, 189, 100, 242, 122, 190, 52, 19, 124, 190, 188, 134, 46, 61, 140, 2, 22, 62, 229, 71, 3, 191, 7, 209, 215, 61, 43, 104, 56, 190, 221, 153, 10, 190, 160, 60, 33, 62, 19, 122, 195, 189, 166, 6, 213, 61, 14, 247, 47, 62, 98, 162, 9, 62, 140, 133, 125, 60, 220, 66, 146, 59, 202, 71, 26, 189, 211, 127, 212, 190, 1, 220, 87, 62, 205, 245, 77, 62, 183, 161, 127, 190, 224, 51, 194, 190, 149, 168, 59, 190, 37, 77, 173, 190, 121, 125, 191, 189, 57, 102, 157, 190, 165, 243, 1, 191, 90, 236, 131, 61, 138, 246, 153, 189, 230, 57, 10, 190, 169, 31, 145, 189, 251, 12, 68, 189, 117, 237, 42, 189, 162, 27, 224, 189, 69, 99, 9, 190, 193, 61, 73, 61, 21, 154, 54, 190, 216, 109, 91, 62, 8, 169, 133, 189, 60, 35, 8, 62, 133, 220, 164, 61, 118, 94, 29, 62, 234, 228, 206, 189, 190, 94, 195, 60, 135, 83, 58, 62, 14, 69, 179, 188, 200, 46, 137, 62, 104, 230, 135, 190, 5, 153, 16, 62, 61, 48, 3, 190, 167, 125, 123, 61, 183, 143, 139, 62, 173, 26, 66, 62, 26, 122, 69, 190, 35, 183, 158, 62, 142, 41, 143, 60, 154, 205, 88, 190, 191, 116, 65, 62, 38, 122, 200, 187, 86, 88, 117, 189, 124, 155, 186, 61, 61, 234, 105, 190, 185, 34, 73, 190, 140, 185, 191, 189, 91, 220, 181, 187, 123, 120, 176, 61, 187, 227, 125, 61, 219, 209, 41, 190, 210, 100, 219, 189, 139, 41, 63, 190, 38, 53, 49, 60, 1, 239, 48, 190, 210, 194, 63, 61, 183, 105, 214, 61, 149, 35, 15, 190, 132, 245, 3, 61, 21, 171, 49, 188, 83, 214, 216, 188, 114, 20, 0, 61, 101, 86, 238, 189, 50, 29, 70, 189, 58, 98, 27, 190, 162, 0, 240, 189, 123, 145, 245, 187, 124, 211, 35, 190, 131, 132, 255, 189, 62, 52, 172, 189, 111, 113, 128, 59, 184, 196, 246, 188, 69, 210, 178, 189, 54, 41, 32, 60, 227, 2, 2, 189, 129, 210, 132, 60, 45, 236, 24, 62, 12, 221, 28, 188, 201, 234, 198, 189, 49, 62, 135, 189, 237, 98, 142, 190, 232, 66, 250, 61, 225, 229, 69, 62, 40, 77, 136, 62, 14, 49, 65, 190, 136, 80, 40, 190, 15, 249, 90, 188, 40, 24, 179, 61, 127, 36, 135, 188, 45, 89, 160, 62, 176, 89, 201, 184, 204, 228, 58, 190, 188, 48, 33, 61, 79, 71, 223, 61, 12, 196, 25, 190, 69, 121, 181, 189, 79, 65, 39, 62, 53, 16, 39, 190, 104, 218, 206, 190, 2, 143, 62, 190, 117, 160, 42, 61, 55, 25, 45, 62, 73, 202, 229, 59, 33, 200, 169, 61, 129, 24, 37, 189, 9, 99, 133, 189, 109, 138, 230, 61, 104, 6, 21, 189, 10, 186, 164, 62, 75, 154, 37, 62, 27, 181, 130, 62, 146, 193, 144, 62, 225, 135, 0, 190, 161, 237, 135, 61, 181, 228, 80, 60, 94, 25, 223, 60, 120, 191, 8, 190, 193, 6, 3, 190, 107, 186, 170, 189, 105, 141, 51, 61, 53, 159, 89, 189, 173, 212, 194, 61, 188, 230, 235, 61, 139, 6, 8, 62, 148, 125, 215, 57, 249, 86, 70, 190, 214, 1, 122, 189, 208, 94, 141, 188, 155, 206, 173, 60, 28, 0, 56, 190, 141, 32, 188, 61, 72, 188, 205, 188, 102, 117, 28, 187, 234, 76, 49, 190, 129, 113, 1, 62, 101, 139, 11, 61, 106, 124, 7, 62, 210, 89, 220, 189, 103, 37, 207, 61, 18, 152, 133, 61, 229, 173, 148, 188, 122, 196, 9, 188, 191, 162, 46, 190, 15, 56, 93, 189, 9, 219, 29, 190, 140, 247, 0, 190, 164, 163, 41, 62, 92, 208, 200, 189, 72, 254, 186, 190, 184, 201, 42, 62, 18, 207, 244, 188, 145, 47, 220, 188, 229, 228, 52, 61, 133, 154, 234, 187, 141, 27, 50, 62, 5, 88, 68, 62, 44, 165, 123, 62, 117, 226, 205, 61, 222, 40, 78, 189, 111, 96, 132, 189, 54, 185, 112, 62, 134, 127, 34, 61, 169, 1, 159, 190, 201, 174, 177, 62, 209, 110, 250, 61, 235, 21, 118, 189, 96, 184, 131, 62, 249, 240, 29, 189, 120, 98, 220, 189, 180, 41, 82, 190, 97, 138, 157, 61, 40, 90, 86, 190, 252, 120, 189, 62, 33, 121, 129, 189, 9, 64, 203, 62, 215, 216, 84, 62, 159, 48, 204, 189, 149, 137, 187, 61, 236, 97, 191, 62, 171, 179, 174, 189, 235, 6, 31, 189, 141, 42, 130, 62, 133, 197, 145, 61, 54, 28, 213, 58, 184, 195, 54, 62, 111, 0, 44, 60, 50, 120, 193, 190, 138, 114, 225, 188, 20, 191, 109, 190, 132, 245, 33, 189, 192, 239, 84, 189, 28, 102, 14, 62, 187, 73, 144, 190, 169, 195, 44, 190, 224, 134, 223, 61, 170, 91, 13, 191, 249, 152, 75, 62, 35, 102, 145, 59, 77, 85, 70, 190, 74, 254, 103, 60, 125, 13, 230, 61, 199, 200, 127, 61, 118, 43, 178, 188, 97, 82, 48, 62, 137, 177, 30, 62, 7, 159, 245, 61, 122, 143, 81, 189, 148, 101, 140, 188, 141, 131, 19, 189, 20, 117, 239, 189, 228, 213, 149, 189, 207, 61, 74, 190, 13, 209, 36, 62, 150, 206, 85, 188, 8, 210, 157, 61, 164, 253, 81, 190, 26, 23, 70, 188, 82, 89, 121, 190, 235, 238, 224, 61, 168, 140, 200, 60, 10, 76, 124, 188, 100, 199, 145, 61, 206, 243, 77, 190, 0, 189, 206, 60, 205, 212, 242, 61, 16, 204, 140, 62, 219, 28, 33, 62, 229, 55, 203, 188, 54, 16, 86, 190, 4, 90, 83, 62, 230, 147, 40, 62, 31, 208, 24, 190, 3, 178, 1, 62, 49, 136, 248, 61, 92, 63, 25, 189, 112, 241, 214, 61, 244, 175, 134, 188, 162, 102, 115, 60, 105, 21, 202, 189, 7, 97, 13, 62, 245, 196, 163, 62, 68, 230, 58, 62, 58, 199, 176, 62, 45, 79, 181, 190, 97, 143, 40, 62, 157, 37, 4, 62, 77, 44, 136, 62, 167, 49, 190, 188, 141, 234, 9, 62, 235, 27, 176, 61, 246, 101, 212, 190, 118, 34, 32, 62, 37, 64, 176, 190, 11, 223, 2, 62, 168, 189, 195, 189, 247, 162, 7, 190, 140, 234, 201, 190, 246, 244, 142, 190, 173, 20, 146, 62, 204, 253, 54, 191, 95, 109, 170, 61, 225, 2, 65, 62, 42, 140, 237, 189, 86, 106, 119, 62, 88, 113, 27, 189, 30, 93, 162, 189, 239, 130, 2, 62, 67, 201, 218, 61, 169, 220, 151, 62, 45, 163, 144, 62, 87, 208, 151, 190, 7, 230, 237, 190, 79, 14, 15, 191, 187, 125, 104, 190, 99, 109, 140, 190, 45, 171, 123, 189, 246, 78, 27, 190, 21, 209, 202, 190, 93, 128, 69, 188, 181, 55, 50, 191, 20, 34, 69, 191, 168, 46, 178, 190, 6, 189, 169, 62, 255, 65, 43, 62, 39, 155, 132, 62, 215, 194, 106, 61, 57, 89, 146, 190, 230, 13, 159, 62, 104, 231, 147, 62, 190, 247, 227, 62, 123, 216, 161, 62, 95, 196, 16, 62, 202, 251, 136, 190, 223, 127, 128, 62, 66, 31, 137, 62, 68, 157, 183, 190, 123, 174, 109, 62, 22, 214, 165, 188, 90, 46, 224, 189, 124, 62, 20, 191, 51, 157, 234, 190, 160, 184, 8, 190, 39, 193, 83, 62, 60, 214, 204, 62, 16, 109, 106, 189, 111, 1, 65, 189, 221, 50, 132, 62, 196, 255, 41, 190, 206, 81, 193, 60, 205, 200, 15, 61, 41, 235, 221, 61, 64, 159, 208, 61, 151, 56, 147, 61, 118, 200, 181, 188, 149, 238, 59, 190, 161, 191, 12, 62, 127, 61, 131, 190, 252, 50, 174, 61, 161, 207, 19, 190, 241, 196, 187, 189, 169, 130, 97, 61, 22, 134, 157, 190, 14, 12, 2, 61, 60, 63, 214, 190, 53, 30, 116, 61, 6, 225, 255, 189, 150, 73, 131, 189, 54, 160, 89, 61, 241, 144, 9, 61, 143, 11, 177, 61, 1, 122, 65, 189, 152, 1, 88, 190, 61, 182, 101, 62, 115, 121, 216, 61, 38, 24, 86, 61, 206, 97, 31, 61, 177, 207, 65, 190, 61, 18, 60, 191, 51, 199, 25, 189, 25, 223, 246, 189, 244, 105, 71, 190, 236, 185, 92, 190, 200, 94, 34, 191, 98, 134, 198, 189, 136, 198, 247, 190, 34, 221, 47, 190, 86, 212, 33, 62, 16, 85, 181, 189, 60, 222, 83, 188, 40, 0, 190, 62, 217, 37, 73, 62, 163, 62, 171, 62, 118, 55, 5, 190, 118, 74, 213, 60, 91, 120, 251, 189, 215, 139, 40, 190, 136, 159, 36, 189, 110, 160, 222, 62, 89, 58, 231, 60, 232, 214, 120, 189, 128, 22, 21, 62, 90, 248, 189, 189, 85, 100, 160, 61, 146, 129, 218, 61, 11, 76, 142, 61, 106, 168, 199, 60, 79, 27, 150, 61, 39, 240, 185, 189, 30, 144, 197, 189, 177, 29, 109, 62, 32, 65, 223, 62, 67, 128, 209, 190, 87, 179, 63, 62, 188, 164, 178, 61, 105, 148, 20, 62, 27, 174, 215, 61, 173, 155, 34, 62, 93, 160, 152, 62, 21, 5, 46, 191, 29, 93, 249, 61, 64, 14, 212, 190, 193, 214, 136, 62, 92, 110, 44, 62, 122, 89, 144, 62, 63, 193, 63, 190, 7, 201, 57, 191, 233, 213, 130, 62, 89, 207, 8, 191, 39, 94, 217, 62, 251, 217, 123, 61, 152, 58, 171, 61, 81, 194, 42, 62, 5, 199, 96, 189, 34, 1, 208, 60, 234, 89, 193, 61, 74, 185, 19, 189, 252, 57, 3, 63, 172, 134, 239, 62, 20, 186, 246, 190, 141, 201, 163, 190, 74, 137, 216, 190, 90, 81, 164, 190, 253, 166, 216, 189, 161, 113, 243, 189, 46, 10, 185, 190, 218, 128, 203, 189, 184, 43, 24, 191, 162, 191, 165, 190, 75, 2, 82, 190, 62, 190, 104, 190, 255, 218, 79, 62, 21, 238, 138, 60, 65, 19, 188, 61, 23, 60, 62, 62, 177, 62, 134, 190, 7, 131, 76, 62, 175, 214, 108, 61, 20, 127, 146, 62, 64, 27, 72, 189, 9, 129, 57, 62, 249, 67, 248, 190, 112, 14, 152, 62, 147, 157, 205, 61, 43, 149, 164, 190, 137, 94, 70, 61, 43, 64, 1, 189, 208, 152, 217, 61, 76, 125, 223, 190, 71, 51, 92, 190, 254, 214, 45, 190, 154, 247, 218, 189, 112, 16, 63, 190, 92, 101, 174, 189, 175, 183, 99, 190, 87, 50, 34, 62, 243, 186, 31, 62, 196, 128, 35, 60, 75, 77, 83, 190, 10, 147, 62, 190, 249, 140, 45, 189, 82, 254, 4, 190, 121, 63, 163, 190, 45, 247, 193, 60, 208, 253, 143, 62, 83, 79, 121, 62, 40, 90, 118, 189, 58, 129, 183, 190, 71, 93, 100, 190, 4, 222, 193, 62, 167, 130, 48, 62, 86, 89, 171, 61, 204, 223, 37, 62, 29, 245, 31, 190, 131, 149, 226, 189, 167, 251, 97, 62, 33, 133, 135, 189, 164, 198, 60, 189, 38, 147, 46, 62, 252, 162, 40, 61, 88, 169, 120, 190, 176, 246, 91, 190, 236, 14, 90, 190, 227, 157, 88, 61, 77, 88, 115, 62, 151, 52, 197, 189, 195, 62, 216, 61, 205, 164, 30, 190, 186, 20, 170, 61, 43, 220, 175, 189, 96, 148, 20, 190, 254, 212, 179, 60, 49, 84, 177, 188, 204, 187, 211, 60, 119, 111, 0, 62, 210, 174, 6, 62, 182, 225, 250, 189, 219, 115, 12, 189, 68, 5, 84, 190, 167, 224, 237, 61, 194, 120, 212, 190, 169, 252, 236, 187, 223, 40, 74, 190, 46, 178, 252, 189, 245, 151, 154, 189, 211, 130, 198, 61, 238, 24, 219, 189, 114, 216, 96, 60, 227, 135, 30, 61, 250, 8, 139, 189, 14, 52, 236, 59, 201, 9, 42, 62, 193, 71, 24, 190, 184, 48, 31, 190, 236, 189, 112, 61, 179, 20, 134, 187, 238, 236, 221, 61, 199, 233, 36, 190, 90, 159, 35, 191, 228, 192, 126, 189, 77, 236, 37, 190, 61, 69, 41, 190, 25, 142, 220, 61, 227, 107, 140, 190, 179, 5, 171, 60, 21, 103, 243, 189, 69, 177, 133, 61, 105, 87, 180, 61, 19, 221, 93, 62, 95, 112, 148, 61, 65, 126, 8, 61, 93, 94, 213, 188, 45, 189, 253, 189, 246, 247, 75, 188, 105, 248, 32, 190, 185, 141, 129, 190, 233, 239, 19, 190, 3, 43, 33, 61, 70, 26, 135, 62, 68, 112, 201, 62, 205, 62, 30, 190, 176, 150, 181, 60, 56, 202, 148, 190, 105, 5, 150, 61, 191, 12, 153, 62, 141, 172, 9, 62, 171, 136, 122, 61, 8, 120, 150, 189, 161, 158, 190, 188, 251, 168, 51, 62, 36, 53, 123, 190, 125, 83, 210, 61, 44, 168, 136, 189, 69, 4, 3, 189, 220, 204, 147, 190, 164, 166, 142, 188, 9, 20, 37, 189, 99, 63, 10, 62, 88, 68, 140, 190, 58, 18, 17, 189, 136, 141, 80, 62, 43, 182, 233, 189, 233, 227, 145, 62, 108, 34, 110, 61, 8, 41, 162, 62, 75, 148, 61, 62, 170, 103, 142, 62, 231, 83, 248, 186, 146, 217, 234, 189, 186, 100, 113, 190, 187, 188, 17, 62, 7, 155, 13, 62, 132, 139, 29, 190, 243, 163, 198, 61, 87, 224, 135, 61, 191, 160, 168, 61, 79, 151, 149, 189, 167, 90, 19, 190, 143, 83, 6, 188, 101, 75, 148, 189, 17, 179, 117, 61, 42, 15, 150, 189, 197, 178, 75, 190, 114, 228, 52, 62, 68, 18, 73, 187, 234, 213, 145, 189, 161, 199, 54, 62, 191, 168, 185, 60, 74, 177, 104, 189, 80, 24, 6, 190, 146, 28, 229, 189, 161, 27, 141, 190, 166, 167, 59, 190, 143, 149, 191, 190, 237, 158, 152, 61, 125, 118, 88, 191, 171, 124, 157, 190, 16, 200, 217, 61, 70, 44, 39, 189, 99, 222, 143, 190, 101, 187, 161, 190, 188, 57, 103, 190, 35, 249, 150, 62, 138, 114, 24, 62, 255, 194, 121, 190, 228, 48, 54, 62, 38, 119, 93, 61, 108, 31, 25, 62, 45, 2, 63, 61, 250, 82, 194, 62, 67, 82, 64, 62, 233, 155, 50, 61, 173, 147, 37, 61, 108, 70, 110, 190, 118, 132, 139, 189, 46, 9, 93, 190, 113, 64, 139, 62, 156, 15, 10, 62, 39, 145, 233, 190, 236, 202, 166, 61, 122, 254, 199, 189, 148, 114, 231, 189, 170, 27, 4, 191, 169, 185, 249, 61, 224, 110, 39, 62, 128, 47, 47, 62, 22, 4, 47, 62, 147, 70, 144, 190, 0, 32, 203, 189, 208, 254, 134, 61, 24, 10, 150, 62, 66, 198, 0, 190, 132, 239, 167, 61, 121, 242, 124, 190, 142, 40, 130, 189, 29, 232, 134, 62, 71, 118, 152, 189, 53, 68, 57, 62, 230, 67, 11, 61, 10, 16, 17, 61, 13, 74, 96, 190, 126, 59, 138, 190, 125, 34, 86, 189, 206, 85, 159, 62, 135, 135, 203, 61, 233, 137, 29, 190, 54, 32, 16, 61, 156, 31, 180, 188, 38, 5, 206, 189, 36, 241, 241, 188, 193, 129, 50, 190, 19, 8, 95, 189, 194, 186, 172, 61, 143, 98, 111, 61, 155, 5, 148, 61, 29, 79, 166, 189, 160, 164, 76, 189, 60, 104, 244, 61, 21, 86, 145, 189, 181, 86, 248, 61, 102, 58, 254, 60, 217, 56, 2, 189, 238, 23, 252, 60, 28, 56, 174, 189, 26, 60, 40, 189, 201, 59, 201, 60, 45, 223, 133, 61, 174, 63, 177, 189, 158, 43, 148, 189, 247, 229, 209, 58, 182, 38, 108, 61, 239, 223, 230, 61, 84, 184, 7, 190, 29, 0, 117, 189, 236, 96, 155, 189, 134, 177, 160, 61, 255, 179, 222, 189, 63, 181, 196, 190, 110, 150, 111, 62, 13, 175, 204, 189, 169, 207, 190, 61, 54, 110, 215, 60, 250, 166, 144, 62, 36, 127, 29, 62, 224, 97, 218, 189, 53, 93, 150, 190, 179, 15, 174, 190, 236, 178, 15, 191, 183, 102, 188, 62, 33, 171, 43, 191, 220, 195, 29, 62, 111, 181, 111, 190, 168, 60, 22, 188, 220, 86, 46, 189, 32, 152, 128, 188, 61, 113, 45, 62, 148, 60, 63, 191, 147, 55, 8, 191, 62, 173, 141, 189, 206, 30, 157, 60, 111, 165, 66, 190, 165, 187, 20, 62, 104, 167, 86, 62, 40, 224, 155, 188, 3, 112, 160, 188, 207, 176, 30, 190, 178, 170, 31, 62, 245, 158, 73, 189, 231, 167, 140, 61, 111, 6, 106, 61, 202, 207, 68, 62, 202, 34, 113, 190, 15, 142, 200, 190, 184, 33, 201, 61, 241, 191, 29, 63, 38, 77, 152, 188, 85, 118, 1, 62, 180, 44, 47, 61, 5, 244, 160, 190, 49, 52, 139, 191, 123, 78, 238, 189, 252, 43, 91, 191, 197, 63, 162, 61, 33, 246, 219, 190, 11, 8, 121, 62, 202, 147, 153, 190, 10, 155, 82, 191, 198, 8, 220, 62, 70, 69, 143, 191, 14, 68, 208, 190, 248, 99, 90, 60, 249, 34, 188, 189, 163, 176, 7, 62, 165, 244, 192, 61, 54, 79, 215, 61, 249, 155, 27, 190, 66, 136, 13, 62, 244, 220, 122, 61, 136, 66, 226, 189, 15, 224, 0, 190, 136, 25, 162, 190, 152, 126, 72, 61, 210, 46, 112, 60, 47, 41, 3, 190, 228, 84, 27, 190, 113, 15, 134, 187, 73, 145, 60, 190, 202, 110, 226, 189, 248, 17, 222, 189, 184, 82, 231, 60, 188, 215, 44, 62, 190, 214, 0, 62, 121, 180, 95, 190, 57, 238, 178, 189, 98, 200, 52, 188, 179, 179, 184, 61, 61, 246, 58, 62, 249, 207, 176, 189, 246, 119, 110, 189, 182, 80, 150, 190, 22, 155, 64, 189, 119, 2, 147, 61, 251, 5, 23, 62, 113, 23, 109, 61, 26, 192, 212, 60, 212, 45, 22, 62, 22, 75, 131, 190, 222, 101, 24, 190, 190, 45, 36, 62, 75, 17, 128, 61, 249, 140, 95, 190, 70, 125, 23, 190, 31, 125, 9, 62, 1, 148, 15, 190, 205, 223, 58, 190, 39, 188, 91, 190, 175, 97, 56, 60, 94, 226, 39, 190, 247, 208, 105, 190, 201, 229, 109, 189, 13, 190, 17, 59, 251, 162, 87, 190, 13, 30, 3, 190, 105, 139, 9, 62, 32, 103, 90, 61, 73, 126, 149, 61, 132, 82, 30, 189, 52, 48, 43, 189, 253, 74, 170, 189, 160, 159, 45, 62, 156, 109, 198, 62, 82, 104, 45, 61, 215, 141, 18, 61, 61, 39, 206, 190, 106, 78, 93, 62, 9, 238, 99, 62, 97, 74, 50, 190, 86, 126, 24, 189, 245, 94, 97, 61, 85, 178, 200, 60, 86, 83, 95, 190, 237, 93, 76, 190, 126, 44, 129, 60, 73, 211, 131, 62, 191, 81, 148, 61, 103, 172, 193, 190, 149, 124, 125, 190, 224, 14, 83, 61, 173, 215, 168, 61, 208, 217, 9, 190, 156, 170, 89, 190, 33, 102, 200, 189, 79, 235, 143, 190, 152, 214, 43, 189, 140, 21, 157, 190, 160, 236, 110, 61, 67, 59, 247, 61, 86, 56, 111, 61, 154, 100, 170, 189, 232, 125, 110, 190, 37, 15, 110, 61, 36, 234, 146, 62, 252, 11, 217, 62, 86, 37, 66, 62, 48, 60, 26, 60, 134, 76, 183, 190, 99, 171, 6, 190, 3, 75, 72, 62, 115, 180, 19, 190, 195, 245, 3, 62, 107, 173, 161, 189, 72, 175, 47, 190, 160, 112, 3, 191, 163, 72, 160, 190, 34, 45, 16, 190, 205, 14, 97, 62, 229, 119, 180, 62, 48, 163, 0, 61, 245, 59, 43, 190, 197, 113, 143, 190, 91, 242, 74, 61, 126, 232, 64, 188, 99, 87, 65, 189, 11, 120, 254, 189, 195, 2, 5, 62, 88, 201, 26, 61, 46, 11, 117, 190, 215, 172, 208, 61, 37, 189, 74, 62, 140, 36, 201, 189, 40, 147, 182, 58, 254, 55, 56, 190, 107, 114, 108, 62, 56, 43, 215, 189, 48, 37, 194, 62, 205, 188, 83, 189, 83, 234, 78, 62, 154, 245, 99, 190, 163, 125, 29, 60, 205, 78, 2, 62, 49, 69, 39, 190, 208, 224, 24, 187, 151, 226, 172, 189, 60, 250, 88, 60, 138, 7, 2, 61, 25, 90, 172, 190, 17, 95, 128, 188, 22, 46, 195, 61, 121, 236, 10, 62, 182, 39, 132, 189, 11, 172, 97, 190, 189, 225, 174, 188, 157, 45, 254, 61, 199, 46, 51, 62, 145, 80, 106, 188, 134, 175, 158, 60, 66, 108, 19, 61, 127, 101, 200, 61, 168, 6, 213, 190, 232, 2, 4, 61, 207, 243, 254, 61, 243, 188, 103, 61, 121, 82, 131, 62, 199, 77, 138, 190, 132, 113, 235, 187, 79, 48, 46, 60, 49, 63, 151, 61, 218, 30, 132, 62, 134, 240, 129, 61, 250, 76, 152, 190, 118, 61, 129, 61, 252, 108, 30, 189, 31, 116, 238, 60, 247, 129, 5, 62, 159, 91, 71, 62, 162, 132, 188, 189, 254, 120, 2, 62, 113, 89, 165, 190, 156, 26, 49, 190, 254, 251, 230, 189, 168, 209, 156, 61, 93, 21, 133, 189, 160, 192, 246, 61, 207, 28, 214, 61, 248, 125, 113, 189, 111, 172, 137, 60, 214, 126, 220, 189, 41, 172, 253, 60, 107, 188, 181, 189, 209, 247, 107, 61, 88, 79, 241, 61, 215, 36, 122, 61, 123, 13, 131, 189, 74, 148, 115, 60, 23, 218, 77, 190, 184, 138, 212, 189, 64, 12, 104, 190, 196, 30, 10, 62, 25, 192, 40, 190, 141, 184, 81, 61, 141, 66, 227, 189, 222, 77, 183, 189, 142, 156, 57, 61, 206, 171, 154, 186, 47, 14, 250, 189, 31, 149, 211, 189, 52, 63, 66, 189, 255, 213, 48, 62, 195, 213, 185, 61, 79, 139, 224, 189, 149, 142, 5, 190, 213, 126, 57, 190, 63, 78, 168, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 67, 143, 190, 239, 155, 135, 62, 212, 4, 251, 61, 107, 2, 154, 61, 121, 221, 116, 62, 147, 192, 182, 61, 151, 98, 94, 190, 121, 136, 62, 190, 7, 125, 223, 189, 66, 164, 194, 61, 124, 26, 61, 62, 185, 37, 0, 62, 108, 113, 50, 62, 33, 105, 25, 62, 34, 59, 203, 62, 245, 167, 76, 62, 107, 146, 181, 62, 202, 94, 65, 62, 16, 233, 21, 189, 59, 198, 128, 62, 61, 16, 200, 62, 247, 157, 191, 189, 182, 67, 238, 61, 158, 217, 203, 188, 231, 57, 167, 61, 100, 82, 8, 62, 238, 194, 132, 189, 13, 249, 138, 62, 76, 103, 171, 61, 99, 194, 29, 189, 188, 239, 164, 62, 236, 15, 41, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 208, 28, 188, 15, 45, 147, 60, 149, 185, 53, 189, 35, 40, 45, 190, 155, 27, 72, 62, 178, 59, 3, 190, 254, 95, 38, 190, 164, 245, 158, 61, 243, 165, 145, 190, 67, 245, 56, 190, 57, 117, 129, 61, 149, 11, 245, 190, 154, 223, 252, 62, 250, 33, 20, 190, 7, 254, 10, 63, 183, 67, 83, 191, 32, 93, 39, 63, 249, 197, 188, 62, 97, 193, 254, 188, 239, 72, 240, 189, 136, 174, 63, 62, 188, 98, 154, 190, 214, 14, 2, 62, 33, 230, 147, 189, 160, 58, 1, 191, 250, 199, 132, 191, 36, 44, 34, 60, 111, 231, 181, 62, 161, 146, 14, 63, 72, 233, 55, 62, 82, 175, 73, 62, 19, 187, 44, 60, 142, 240, 13, 62, 4, 94, 96, 190, 16, 169, 58, 190, 120, 119, 118, 190, 12, 3, 55, 190, 187, 14, 216, 60, 158, 241, 101, 62, 23, 121, 12, 62, 179, 87, 252, 189, 209, 230, 38, 62, 78, 147, 158, 189, 95, 20, 220, 61, 95, 67, 165, 61, 161, 102, 240, 189, 25, 10, 222, 189, 169, 229, 57, 61, 60, 115, 33, 190, 100, 240, 23, 61, 230, 41, 40, 62, 239, 36, 200, 190, 173, 89, 217, 189, 165, 58, 198, 189, 252, 19, 21, 61, 10, 131, 149, 61, 32, 214, 246, 189, 224, 164, 135, 59, 1, 243, 69, 62, 238, 43, 240, 189, 200, 165, 51, 62, 133, 39, 20, 62, 30, 0, 0, 190, 142, 129, 168, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 72, 145, 60, 167, 189, 211, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {206, 226, 99, 191, 206, 184, 201, 190, 14, 14, 88, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {191, 210, 54, 192, 244, 209, 226, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0045/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}