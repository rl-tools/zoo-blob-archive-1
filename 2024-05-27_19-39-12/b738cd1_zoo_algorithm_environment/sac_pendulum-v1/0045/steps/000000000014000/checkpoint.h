// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 149, 29, 191, 6, 95, 157, 189, 141, 94, 62, 191, 225, 35, 4, 191, 156, 223, 193, 191, 193, 213, 117, 190, 143, 76, 56, 63, 41, 71, 245, 62, 27, 137, 230, 62, 89, 19, 246, 62, 226, 115, 106, 190, 74, 102, 99, 190, 253, 16, 184, 190, 220, 59, 10, 191, 137, 136, 8, 191, 59, 211, 131, 186, 123, 7, 161, 191, 204, 111, 155, 62, 88, 57, 165, 189, 98, 9, 189, 191, 199, 105, 237, 190, 62, 41, 58, 190, 188, 73, 224, 62, 19, 14, 42, 191, 60, 128, 7, 191, 184, 161, 145, 60, 50, 219, 249, 190, 1, 59, 52, 63, 10, 86, 124, 63, 126, 11, 18, 60, 30, 242, 137, 190, 29, 219, 144, 63, 64, 54, 163, 62, 98, 222, 136, 188, 75, 63, 177, 190, 198, 188, 198, 62, 180, 242, 199, 190, 159, 61, 97, 63, 179, 198, 88, 63, 63, 164, 163, 61, 44, 137, 150, 60, 93, 149, 171, 188, 72, 223, 60, 62, 166, 65, 128, 63, 40, 70, 145, 62, 152, 255, 24, 191, 156, 192, 102, 63, 2, 185, 114, 188, 98, 12, 242, 62, 166, 222, 144, 191, 96, 95, 155, 190, 116, 64, 177, 62, 112, 217, 162, 191, 243, 209, 217, 62, 196, 149, 169, 191, 140, 144, 235, 190, 199, 37, 178, 60, 121, 59, 103, 189, 164, 196, 182, 62, 203, 30, 252, 62, 228, 35, 45, 63, 2, 95, 63, 63, 137, 83, 147, 62, 153, 189, 19, 63, 163, 215, 191, 62, 158, 156, 44, 190, 255, 35, 64, 63, 73, 231, 84, 191, 165, 251, 38, 190, 228, 124, 11, 191, 195, 200, 48, 190, 94, 64, 9, 63, 248, 232, 115, 62, 178, 89, 172, 190, 164, 239, 9, 190, 9, 80, 148, 189, 97, 233, 122, 191, 77, 222, 75, 190, 204, 216, 89, 190, 61, 149, 227, 62, 31, 14, 126, 58, 29, 189, 3, 63, 145, 156, 85, 63, 12, 181, 248, 189, 253, 201, 78, 63, 217, 102, 66, 63, 62, 15, 79, 62, 203, 31, 10, 63, 46, 137, 65, 63, 9, 165, 2, 63, 243, 24, 27, 63, 125, 230, 165, 191, 105, 166, 191, 190, 60, 124, 100, 61, 202, 6, 176, 191, 185, 173, 238, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 113, 30, 191, 145, 103, 181, 189, 58, 209, 196, 190, 122, 24, 70, 191, 36, 73, 31, 62, 121, 60, 63, 62, 2, 215, 234, 61, 244, 136, 185, 190, 64, 151, 5, 191, 141, 71, 9, 191, 181, 190, 134, 190, 35, 91, 241, 62, 190, 211, 237, 189, 80, 195, 2, 63, 4, 139, 71, 189, 189, 184, 187, 62, 5, 25, 202, 189, 147, 91, 182, 189, 4, 1, 210, 61, 140, 66, 209, 190, 213, 34, 4, 191, 147, 105, 54, 63, 127, 191, 43, 63, 78, 59, 198, 190, 115, 117, 36, 63, 99, 76, 103, 62, 223, 133, 6, 191, 218, 102, 241, 61, 93, 21, 55, 190, 94, 255, 138, 189, 190, 124, 208, 190, 181, 54, 233, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 213, 31, 189, 118, 185, 120, 190, 108, 16, 12, 62, 44, 25, 52, 62, 223, 240, 8, 190, 178, 248, 207, 61, 49, 170, 230, 60, 1, 4, 212, 61, 168, 74, 17, 61, 253, 122, 20, 191, 116, 42, 0, 61, 59, 115, 50, 190, 170, 241, 253, 60, 193, 225, 48, 190, 128, 255, 137, 189, 87, 195, 14, 191, 9, 132, 19, 190, 120, 6, 177, 61, 105, 6, 179, 190, 187, 121, 191, 188, 12, 83, 223, 188, 114, 90, 213, 190, 152, 15, 228, 189, 202, 179, 64, 61, 87, 200, 153, 190, 92, 94, 186, 190, 86, 20, 16, 62, 77, 129, 205, 190, 64, 195, 51, 62, 88, 159, 147, 189, 81, 97, 255, 61, 16, 59, 138, 189, 57, 148, 145, 62, 46, 32, 60, 189, 17, 154, 246, 60, 55, 167, 190, 189, 153, 50, 193, 188, 223, 213, 102, 61, 77, 3, 70, 190, 238, 198, 90, 62, 218, 185, 97, 189, 203, 49, 171, 190, 31, 84, 226, 190, 181, 106, 36, 62, 251, 0, 68, 190, 18, 56, 24, 62, 179, 154, 58, 191, 223, 13, 196, 190, 79, 22, 148, 190, 238, 111, 40, 62, 168, 72, 222, 189, 28, 102, 228, 188, 90, 145, 77, 191, 252, 101, 17, 62, 114, 64, 127, 62, 67, 236, 154, 62, 117, 26, 5, 189, 21, 111, 75, 62, 57, 48, 176, 60, 126, 110, 209, 60, 67, 110, 187, 60, 204, 202, 20, 189, 37, 150, 151, 190, 2, 148, 102, 190, 49, 168, 1, 189, 8, 98, 146, 61, 8, 161, 139, 189, 134, 77, 200, 190, 246, 187, 177, 61, 81, 52, 239, 188, 210, 17, 72, 190, 89, 197, 60, 188, 68, 118, 42, 62, 20, 103, 9, 189, 53, 69, 149, 189, 118, 92, 170, 61, 14, 168, 27, 61, 33, 125, 83, 62, 121, 200, 20, 190, 18, 86, 12, 61, 221, 197, 201, 189, 113, 84, 211, 190, 195, 142, 230, 189, 235, 63, 252, 60, 179, 15, 50, 62, 249, 136, 41, 62, 162, 78, 60, 61, 232, 153, 249, 189, 86, 85, 53, 62, 222, 32, 31, 62, 151, 210, 214, 189, 59, 197, 114, 61, 118, 246, 209, 62, 29, 253, 88, 62, 79, 247, 63, 190, 136, 74, 32, 190, 98, 236, 135, 190, 151, 55, 165, 190, 233, 102, 104, 61, 140, 2, 22, 62, 85, 222, 250, 190, 162, 249, 145, 62, 91, 27, 167, 190, 66, 101, 135, 190, 74, 1, 234, 61, 37, 194, 212, 190, 208, 9, 113, 189, 115, 188, 144, 62, 56, 233, 149, 61, 178, 244, 6, 62, 53, 130, 128, 190, 160, 111, 188, 190, 63, 130, 89, 191, 56, 203, 237, 62, 145, 8, 173, 62, 84, 152, 149, 190, 155, 22, 253, 190, 24, 249, 15, 62, 221, 228, 20, 189, 124, 183, 213, 189, 73, 7, 165, 59, 79, 205, 166, 191, 90, 236, 131, 61, 124, 103, 222, 61, 28, 195, 21, 190, 209, 168, 0, 190, 70, 12, 80, 191, 72, 35, 183, 189, 89, 175, 145, 189, 36, 17, 152, 190, 121, 215, 18, 61, 164, 70, 88, 62, 6, 118, 27, 62, 77, 118, 105, 189, 9, 135, 3, 189, 127, 121, 3, 62, 70, 195, 65, 62, 173, 95, 149, 190, 57, 171, 113, 59, 84, 93, 66, 62, 38, 97, 9, 189, 213, 52, 70, 62, 228, 176, 182, 190, 48, 144, 244, 61, 37, 225, 43, 190, 40, 170, 110, 61, 94, 222, 137, 62, 115, 69, 58, 62, 14, 213, 4, 191, 132, 62, 145, 62, 227, 228, 181, 60, 72, 81, 51, 190, 112, 13, 30, 62, 216, 190, 138, 186, 86, 88, 117, 189, 142, 97, 6, 62, 99, 1, 226, 190, 89, 224, 77, 190, 175, 246, 130, 190, 203, 5, 1, 190, 123, 120, 176, 61, 187, 227, 125, 61, 219, 209, 41, 190, 210, 100, 219, 189, 139, 41, 63, 190, 38, 53, 49, 60, 1, 239, 48, 190, 210, 194, 63, 61, 183, 105, 214, 61, 149, 35, 15, 190, 132, 245, 3, 61, 21, 171, 49, 188, 83, 214, 216, 188, 114, 20, 0, 61, 101, 86, 238, 189, 50, 29, 70, 189, 58, 98, 27, 190, 162, 0, 240, 189, 123, 145, 245, 187, 124, 211, 35, 190, 131, 132, 255, 189, 62, 52, 172, 189, 111, 113, 128, 59, 184, 196, 246, 188, 69, 210, 178, 189, 54, 41, 32, 60, 227, 2, 2, 189, 129, 210, 132, 60, 45, 236, 24, 62, 12, 221, 28, 188, 201, 234, 198, 189, 49, 62, 135, 189, 182, 229, 22, 191, 6, 199, 232, 61, 59, 160, 52, 62, 80, 21, 205, 61, 23, 164, 133, 190, 248, 20, 181, 61, 91, 150, 148, 61, 158, 96, 60, 190, 87, 71, 149, 190, 155, 176, 76, 190, 127, 155, 0, 189, 200, 53, 224, 189, 97, 0, 191, 60, 175, 95, 4, 62, 3, 19, 96, 190, 81, 45, 39, 190, 28, 146, 42, 62, 53, 82, 19, 62, 112, 151, 49, 191, 247, 17, 60, 190, 38, 69, 193, 187, 78, 210, 17, 62, 9, 170, 19, 61, 157, 64, 168, 61, 147, 103, 20, 189, 117, 237, 5, 190, 109, 138, 230, 61, 67, 56, 60, 190, 67, 89, 132, 62, 232, 122, 230, 61, 41, 102, 165, 62, 61, 84, 158, 62, 225, 135, 0, 190, 161, 237, 135, 61, 240, 10, 230, 187, 94, 25, 223, 60, 120, 191, 8, 190, 129, 241, 32, 190, 107, 186, 170, 189, 105, 141, 51, 61, 53, 159, 89, 189, 210, 207, 206, 61, 217, 28, 190, 61, 179, 141, 221, 61, 113, 7, 165, 188, 50, 84, 80, 190, 223, 176, 164, 189, 203, 244, 39, 189, 155, 206, 173, 60, 5, 237, 87, 190, 225, 60, 118, 61, 22, 228, 71, 189, 186, 85, 0, 188, 234, 76, 49, 190, 129, 113, 1, 62, 11, 34, 16, 60, 106, 124, 7, 62, 210, 89, 220, 189, 103, 37, 207, 61, 250, 25, 154, 61, 246, 2, 150, 188, 242, 155, 224, 188, 191, 162, 46, 190, 15, 56, 93, 189, 242, 119, 187, 190, 119, 213, 8, 190, 209, 87, 217, 61, 52, 38, 222, 189, 34, 139, 186, 190, 81, 73, 131, 62, 51, 5, 193, 187, 255, 234, 116, 190, 221, 98, 195, 189, 195, 116, 4, 190, 98, 120, 85, 61, 117, 97, 92, 62, 19, 141, 45, 62, 18, 114, 35, 62, 33, 123, 93, 190, 138, 57, 94, 190, 249, 200, 157, 62, 172, 234, 97, 62, 216, 209, 235, 190, 200, 175, 141, 62, 98, 146, 38, 187, 152, 15, 222, 188, 252, 240, 158, 62, 145, 113, 208, 189, 198, 10, 152, 189, 185, 211, 142, 190, 97, 138, 157, 61, 107, 156, 107, 190, 42, 133, 176, 62, 231, 163, 15, 190, 165, 156, 21, 63, 160, 207, 152, 62, 40, 83, 22, 190, 133, 0, 63, 62, 63, 124, 217, 62, 213, 199, 236, 190, 75, 109, 159, 188, 99, 127, 208, 62, 49, 161, 43, 61, 30, 147, 170, 60, 10, 66, 238, 61, 246, 125, 235, 61, 126, 17, 64, 191, 120, 96, 21, 189, 254, 50, 51, 190, 236, 4, 143, 189, 42, 141, 248, 61, 79, 138, 241, 61, 29, 0, 47, 191, 213, 167, 7, 190, 64, 62, 212, 61, 91, 245, 12, 191, 198, 66, 146, 62, 181, 51, 168, 188, 158, 38, 120, 190, 154, 215, 84, 61, 222, 8, 153, 61, 213, 192, 30, 190, 118, 43, 178, 188, 117, 109, 65, 62, 79, 254, 90, 62, 94, 72, 11, 62, 188, 4, 6, 191, 254, 21, 155, 189, 23, 9, 9, 189, 38, 38, 121, 190, 58, 32, 182, 189, 121, 173, 86, 61, 68, 249, 203, 60, 87, 244, 108, 60, 114, 133, 49, 190, 128, 131, 86, 190, 218, 27, 105, 188, 230, 154, 230, 190, 171, 193, 230, 189, 44, 53, 202, 60, 23, 148, 155, 189, 102, 16, 8, 189, 129, 189, 235, 190, 184, 156, 33, 190, 98, 1, 2, 61, 205, 206, 162, 62, 175, 142, 31, 62, 184, 113, 148, 189, 70, 34, 26, 191, 170, 249, 9, 62, 220, 173, 5, 62, 34, 4, 17, 190, 228, 202, 112, 61, 85, 154, 162, 61, 92, 63, 25, 189, 156, 164, 212, 61, 22, 110, 136, 190, 78, 117, 229, 187, 192, 237, 171, 190, 52, 87, 99, 189, 240, 236, 88, 62, 125, 213, 144, 62, 51, 176, 166, 62, 117, 104, 77, 191, 60, 15, 216, 61, 161, 228, 3, 62, 100, 36, 7, 62, 191, 163, 190, 189, 167, 210, 94, 60, 237, 104, 119, 62, 56, 231, 51, 191, 59, 35, 241, 61, 37, 223, 145, 190, 49, 175, 243, 61, 48, 181, 83, 60, 234, 7, 110, 190, 90, 192, 230, 190, 114, 204, 172, 190, 67, 127, 148, 62, 193, 146, 55, 191, 198, 200, 153, 61, 74, 206, 87, 62, 124, 233, 224, 189, 58, 118, 93, 62, 17, 40, 11, 189, 193, 223, 40, 190, 239, 130, 2, 62, 67, 136, 23, 62, 238, 82, 174, 62, 194, 48, 136, 62, 85, 181, 199, 190, 32, 114, 39, 191, 103, 245, 43, 191, 220, 160, 208, 190, 100, 0, 157, 190, 13, 26, 12, 62, 229, 234, 162, 190, 9, 1, 10, 191, 177, 175, 68, 190, 1, 26, 59, 191, 201, 149, 112, 191, 161, 71, 238, 190, 15, 56, 207, 62, 159, 105, 208, 61, 149, 131, 133, 62, 54, 240, 13, 61, 183, 68, 34, 190, 15, 30, 21, 63, 139, 85, 131, 62, 173, 134, 130, 62, 4, 94, 181, 62, 80, 230, 219, 61, 52, 63, 160, 190, 159, 168, 128, 62, 88, 41, 150, 62, 77, 105, 208, 190, 130, 105, 137, 62, 140, 23, 138, 187, 90, 46, 224, 189, 130, 234, 8, 191, 129, 111, 253, 190, 82, 122, 229, 189, 192, 89, 157, 189, 184, 95, 113, 62, 58, 169, 166, 189, 212, 75, 199, 61, 173, 36, 133, 62, 248, 226, 144, 190, 84, 210, 233, 59, 133, 14, 116, 188, 191, 243, 49, 62, 147, 30, 65, 61, 16, 65, 53, 61, 153, 124, 192, 60, 48, 22, 6, 191, 239, 204, 8, 62, 169, 164, 188, 190, 153, 108, 172, 61, 221, 238, 253, 189, 98, 0, 20, 190, 151, 133, 81, 62, 145, 162, 201, 190, 228, 193, 196, 59, 196, 7, 9, 191, 166, 246, 19, 61, 195, 140, 255, 189, 192, 207, 28, 189, 107, 168, 63, 58, 145, 58, 132, 61, 243, 129, 59, 62, 1, 122, 65, 189, 41, 50, 153, 190, 226, 7, 96, 62, 130, 137, 228, 61, 100, 140, 147, 62, 112, 80, 53, 61, 176, 131, 54, 190, 226, 54, 129, 191, 130, 10, 171, 188, 211, 229, 210, 62, 42, 88, 24, 190, 49, 44, 154, 190, 255, 110, 255, 190, 196, 36, 245, 189, 84, 48, 247, 190, 241, 252, 215, 188, 139, 238, 47, 62, 75, 147, 250, 189, 118, 219, 76, 189, 121, 127, 183, 62, 246, 68, 11, 62, 1, 185, 139, 62, 100, 63, 141, 189, 118, 221, 186, 189, 74, 227, 148, 189, 193, 178, 100, 190, 234, 65, 77, 61, 10, 84, 225, 62, 32, 247, 15, 61, 58, 109, 36, 190, 149, 230, 42, 62, 88, 52, 65, 60, 85, 100, 160, 61, 89, 181, 3, 62, 101, 63, 195, 61, 42, 158, 245, 187, 146, 55, 165, 62, 38, 189, 174, 62, 122, 22, 238, 189, 228, 60, 187, 62, 107, 149, 194, 62, 44, 216, 128, 191, 25, 101, 39, 62, 178, 20, 167, 61, 239, 228, 102, 61, 255, 77, 153, 61, 34, 50, 4, 62, 132, 166, 215, 61, 212, 27, 56, 191, 171, 224, 230, 61, 88, 91, 180, 190, 51, 223, 136, 62, 48, 30, 17, 62, 41, 122, 202, 62, 255, 170, 125, 190, 171, 185, 68, 191, 192, 223, 180, 62, 244, 163, 253, 190, 227, 110, 150, 62, 150, 168, 250, 60, 4, 121, 151, 61, 98, 151, 139, 62, 104, 48, 106, 189, 220, 55, 111, 189, 234, 89, 193, 61, 118, 99, 220, 189, 62, 26, 249, 62, 167, 234, 222, 62, 126, 36, 14, 191, 149, 194, 230, 190, 159, 164, 52, 191, 116, 219, 203, 190, 199, 40, 11, 190, 69, 237, 225, 189, 74, 65, 5, 191, 245, 141, 254, 189, 130, 247, 78, 191, 235, 113, 49, 191, 122, 162, 213, 190, 150, 211, 170, 190, 96, 197, 134, 62, 203, 145, 17, 60, 101, 33, 210, 61, 128, 231, 44, 62, 27, 77, 125, 190, 205, 45, 186, 62, 97, 230, 73, 62, 219, 60, 128, 62, 141, 51, 13, 188, 242, 157, 47, 62, 28, 35, 78, 191, 111, 245, 173, 62, 225, 223, 50, 62, 174, 58, 157, 190, 106, 155, 177, 61, 6, 200, 198, 61, 208, 152, 217, 61, 250, 72, 220, 190, 133, 117, 202, 190, 59, 70, 39, 190, 182, 109, 229, 188, 6, 45, 77, 61, 204, 218, 67, 190, 236, 209, 99, 190, 183, 194, 200, 61, 253, 22, 126, 61, 168, 243, 26, 190, 212, 7, 167, 190, 21, 158, 254, 190, 136, 116, 230, 189, 183, 48, 92, 190, 82, 111, 62, 191, 78, 76, 250, 61, 89, 53, 83, 62, 138, 78, 141, 62, 73, 204, 200, 189, 252, 56, 95, 190, 189, 86, 194, 61, 157, 238, 232, 62, 31, 246, 221, 59, 214, 96, 129, 61, 37, 170, 39, 62, 129, 109, 110, 190, 92, 135, 14, 190, 131, 27, 139, 62, 179, 132, 156, 189, 130, 217, 177, 189, 36, 221, 142, 62, 252, 162, 40, 61, 17, 170, 16, 191, 127, 231, 179, 190, 179, 90, 78, 190, 41, 230, 51, 190, 239, 210, 29, 189, 151, 52, 197, 189, 195, 62, 216, 61, 205, 164, 30, 190, 186, 20, 170, 61, 43, 220, 175, 189, 96, 148, 20, 190, 254, 212, 179, 60, 49, 84, 177, 188, 204, 187, 211, 60, 119, 111, 0, 62, 210, 174, 6, 62, 182, 225, 250, 189, 219, 115, 12, 189, 68, 5, 84, 190, 167, 224, 237, 61, 194, 120, 212, 190, 169, 252, 236, 187, 223, 40, 74, 190, 46, 178, 252, 189, 245, 151, 154, 189, 211, 130, 198, 61, 238, 24, 219, 189, 114, 216, 96, 60, 227, 135, 30, 61, 250, 8, 139, 189, 14, 52, 236, 59, 201, 9, 42, 62, 193, 71, 24, 190, 184, 48, 31, 190, 236, 189, 112, 61, 179, 20, 134, 187, 238, 236, 221, 61, 59, 161, 114, 190, 167, 5, 7, 191, 204, 234, 173, 189, 252, 7, 250, 190, 90, 145, 212, 190, 115, 34, 206, 61, 192, 213, 184, 191, 26, 255, 15, 190, 74, 179, 86, 190, 42, 241, 135, 186, 53, 160, 134, 60, 99, 130, 104, 62, 231, 90, 49, 61, 215, 177, 59, 61, 141, 210, 241, 189, 6, 107, 103, 190, 45, 28, 118, 189, 174, 234, 213, 189, 125, 157, 229, 190, 75, 206, 40, 190, 208, 8, 80, 189, 74, 54, 78, 62, 177, 72, 205, 62, 117, 99, 15, 190, 89, 114, 147, 188, 248, 153, 222, 190, 105, 5, 150, 61, 126, 15, 140, 62, 114, 185, 254, 61, 96, 32, 52, 61, 5, 160, 239, 190, 197, 84, 126, 191, 32, 225, 96, 62, 184, 117, 218, 190, 192, 212, 151, 61, 223, 138, 192, 62, 234, 56, 169, 189, 124, 129, 123, 190, 130, 188, 55, 190, 46, 25, 133, 60, 115, 235, 51, 62, 69, 105, 239, 190, 224, 248, 251, 189, 82, 150, 130, 62, 38, 67, 31, 190, 126, 149, 131, 62, 225, 149, 155, 190, 218, 33, 143, 62, 234, 176, 252, 61, 30, 21, 188, 62, 168, 160, 107, 189, 134, 159, 61, 190, 120, 126, 37, 191, 147, 83, 237, 61, 148, 206, 236, 61, 122, 124, 159, 189, 64, 97, 81, 61, 249, 12, 27, 61, 191, 160, 168, 61, 228, 32, 187, 187, 154, 249, 100, 190, 158, 74, 230, 188, 220, 200, 117, 190, 120, 241, 78, 189, 12, 46, 163, 190, 46, 127, 31, 62, 148, 83, 4, 62, 234, 10, 12, 191, 248, 45, 36, 190, 238, 43, 67, 62, 252, 91, 234, 60, 75, 163, 120, 190, 204, 136, 191, 190, 190, 128, 189, 187, 29, 82, 23, 191, 182, 52, 79, 190, 125, 173, 73, 191, 112, 132, 219, 61, 207, 253, 102, 191, 171, 152, 187, 190, 210, 139, 26, 62, 54, 214, 30, 61, 100, 197, 255, 190, 2, 115, 56, 191, 16, 162, 164, 190, 48, 35, 168, 62, 228, 212, 69, 62, 232, 248, 133, 191, 140, 28, 92, 62, 100, 1, 209, 61, 108, 31, 25, 62, 235, 130, 224, 60, 94, 134, 212, 62, 104, 34, 19, 62, 111, 51, 46, 61, 34, 245, 55, 189, 183, 45, 187, 190, 193, 157, 94, 190, 37, 145, 149, 190, 252, 7, 225, 62, 28, 7, 120, 57, 3, 181, 214, 190, 189, 46, 138, 189, 236, 65, 55, 190, 123, 10, 129, 190, 100, 158, 93, 191, 176, 61, 171, 61, 169, 52, 35, 62, 98, 199, 37, 62, 87, 107, 10, 62, 213, 31, 2, 191, 101, 138, 65, 189, 143, 70, 199, 60, 247, 118, 161, 62, 204, 168, 7, 189, 207, 184, 104, 61, 58, 234, 68, 191, 30, 131, 146, 189, 19, 42, 152, 62, 18, 36, 146, 189, 39, 63, 50, 62, 166, 235, 37, 61, 10, 16, 17, 61, 26, 175, 63, 190, 57, 218, 243, 190, 66, 255, 230, 189, 145, 90, 0, 62, 115, 139, 82, 189, 231, 153, 14, 190, 96, 11, 236, 190, 205, 48, 138, 190, 21, 92, 42, 190, 247, 246, 93, 190, 254, 153, 19, 191, 109, 22, 2, 191, 0, 165, 109, 62, 83, 101, 76, 61, 112, 190, 184, 190, 186, 12, 165, 61, 88, 11, 84, 190, 45, 196, 73, 62, 134, 158, 231, 61, 21, 135, 116, 62, 160, 67, 183, 62, 217, 30, 85, 190, 7, 177, 8, 191, 159, 63, 10, 191, 193, 122, 15, 187, 206, 81, 95, 190, 183, 6, 151, 62, 229, 139, 51, 189, 83, 166, 129, 189, 239, 223, 20, 61, 15, 235, 161, 190, 239, 223, 230, 61, 133, 214, 66, 62, 224, 18, 138, 189, 108, 52, 18, 190, 227, 7, 72, 190, 251, 128, 130, 190, 107, 240, 253, 190, 53, 46, 175, 62, 162, 107, 25, 190, 114, 6, 6, 190, 53, 85, 131, 188, 240, 182, 116, 62, 19, 126, 94, 62, 176, 177, 139, 190, 144, 86, 187, 190, 2, 163, 150, 190, 101, 188, 85, 191, 73, 212, 164, 62, 101, 150, 75, 191, 100, 111, 10, 62, 90, 111, 39, 190, 155, 212, 171, 187, 120, 203, 27, 61, 134, 130, 34, 190, 253, 242, 130, 61, 215, 60, 114, 191, 64, 186, 18, 191, 58, 236, 131, 189, 213, 2, 215, 60, 70, 250, 103, 190, 79, 228, 20, 62, 178, 48, 135, 62, 40, 224, 155, 188, 81, 20, 156, 189, 138, 227, 63, 190, 5, 111, 242, 61, 19, 8, 52, 62, 35, 27, 157, 61, 136, 24, 28, 188, 173, 169, 208, 62, 174, 114, 219, 190, 82, 23, 137, 191, 198, 189, 133, 61, 48, 110, 250, 62, 214, 150, 2, 188, 159, 155, 35, 61, 198, 230, 1, 189, 184, 191, 76, 61, 17, 227, 190, 191, 138, 206, 187, 190, 184, 152, 113, 191, 254, 149, 37, 61, 50, 66, 255, 190, 78, 71, 220, 61, 196, 145, 130, 190, 96, 10, 166, 191, 68, 177, 242, 62, 230, 15, 102, 191, 125, 143, 7, 191, 229, 151, 182, 60, 167, 161, 139, 189, 212, 10, 10, 63, 136, 142, 224, 61, 107, 223, 197, 61, 249, 155, 27, 190, 240, 113, 243, 61, 234, 202, 135, 62, 71, 15, 96, 190, 91, 10, 237, 189, 21, 62, 178, 190, 33, 73, 80, 189, 95, 184, 133, 190, 66, 39, 146, 190, 79, 153, 163, 190, 55, 126, 146, 187, 200, 190, 33, 191, 182, 218, 236, 190, 86, 187, 236, 189, 31, 122, 147, 189, 16, 250, 100, 62, 87, 86, 143, 62, 121, 103, 220, 190, 26, 123, 84, 60, 61, 98, 247, 61, 36, 83, 127, 62, 244, 16, 214, 62, 82, 10, 180, 190, 252, 163, 48, 191, 156, 226, 199, 190, 139, 86, 81, 61, 18, 33, 8, 61, 197, 206, 128, 62, 65, 172, 36, 61, 188, 196, 245, 61, 137, 254, 49, 62, 22, 188, 44, 191, 222, 101, 24, 190, 210, 239, 159, 62, 13, 42, 215, 61, 22, 157, 137, 190, 173, 178, 254, 190, 111, 121, 157, 188, 67, 102, 109, 189, 169, 201, 101, 190, 3, 234, 132, 190, 58, 110, 105, 62, 183, 229, 148, 190, 197, 87, 108, 190, 169, 30, 132, 190, 73, 157, 172, 61, 73, 186, 14, 190, 197, 50, 145, 190, 36, 37, 233, 61, 166, 173, 84, 61, 226, 135, 44, 61, 188, 197, 172, 189, 70, 72, 250, 189, 179, 18, 103, 189, 95, 255, 59, 62, 152, 111, 200, 62, 159, 149, 188, 61, 141, 11, 139, 188, 8, 66, 81, 191, 177, 177, 95, 62, 64, 126, 124, 62, 17, 58, 56, 190, 226, 99, 89, 189, 253, 21, 162, 61, 85, 178, 200, 60, 221, 12, 34, 190, 14, 169, 207, 190, 164, 252, 241, 187, 180, 38, 2, 62, 101, 31, 10, 189, 180, 5, 2, 191, 47, 88, 138, 190, 184, 61, 252, 60, 12, 31, 59, 61, 176, 32, 183, 190, 87, 145, 48, 190, 228, 153, 235, 190, 148, 41, 157, 190, 148, 54, 251, 189, 248, 128, 152, 190, 194, 210, 8, 61, 166, 242, 2, 62, 35, 246, 38, 61, 192, 110, 48, 190, 183, 10, 162, 190, 9, 202, 225, 59, 30, 242, 72, 62, 113, 115, 248, 62, 55, 234, 143, 62, 101, 5, 130, 188, 98, 175, 59, 191, 123, 25, 138, 190, 86, 155, 144, 62, 63, 242, 7, 190, 154, 43, 183, 61, 220, 194, 74, 189, 72, 175, 47, 190, 173, 102, 77, 191, 9, 237, 64, 191, 201, 4, 20, 190, 188, 168, 212, 190, 47, 94, 188, 189, 21, 232, 59, 59, 42, 140, 181, 190, 223, 161, 186, 190, 180, 221, 7, 63, 169, 164, 138, 189, 202, 97, 133, 61, 50, 183, 101, 190, 173, 179, 5, 62, 62, 74, 101, 60, 73, 43, 61, 191, 169, 75, 42, 190, 70, 32, 111, 62, 50, 222, 34, 190, 107, 244, 95, 188, 200, 28, 76, 191, 197, 147, 149, 61, 2, 148, 88, 61, 108, 41, 1, 63, 143, 169, 124, 189, 218, 150, 240, 61, 98, 165, 127, 191, 203, 12, 56, 61, 32, 149, 166, 62, 248, 92, 53, 190, 80, 76, 141, 61, 73, 8, 234, 59, 60, 250, 88, 60, 97, 253, 218, 61, 203, 224, 56, 191, 73, 215, 213, 189, 243, 110, 215, 60, 85, 154, 112, 61, 254, 118, 240, 188, 17, 115, 212, 190, 216, 8, 242, 188, 66, 142, 7, 63, 64, 14, 238, 61, 2, 38, 61, 189, 75, 21, 19, 190, 22, 101, 167, 61, 149, 107, 5, 62, 14, 74, 5, 191, 128, 113, 149, 188, 159, 196, 241, 61, 222, 131, 128, 60, 5, 217, 100, 62, 89, 44, 170, 190, 22, 146, 206, 59, 199, 242, 53, 188, 199, 164, 178, 60, 28, 86, 107, 62, 167, 53, 14, 60, 98, 72, 11, 191, 237, 46, 169, 61, 113, 12, 121, 60, 28, 254, 47, 59, 89, 165, 16, 62, 176, 92, 84, 62, 162, 132, 188, 189, 92, 205, 69, 62, 43, 25, 237, 190, 162, 145, 40, 190, 120, 112, 140, 190, 48, 127, 35, 189, 17, 121, 149, 189, 212, 241, 235, 61, 207, 28, 214, 61, 180, 241, 131, 189, 71, 222, 31, 60, 214, 126, 220, 189, 41, 201, 204, 60, 137, 120, 195, 189, 201, 73, 76, 61, 88, 79, 241, 61, 215, 36, 122, 61, 123, 13, 131, 189, 74, 148, 115, 60, 239, 138, 77, 190, 184, 138, 212, 189, 40, 8, 104, 190, 195, 96, 2, 62, 25, 192, 40, 190, 227, 193, 83, 61, 141, 66, 227, 189, 222, 77, 183, 189, 59, 0, 32, 61, 114, 41, 198, 187, 47, 14, 250, 189, 246, 169, 218, 189, 242, 42, 84, 189, 255, 213, 48, 62, 101, 179, 174, 61, 79, 139, 224, 189, 149, 142, 5, 190, 210, 239, 65, 190, 252, 84, 149, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 78, 197, 190, 58, 174, 132, 62, 176, 233, 100, 62, 206, 48, 131, 62, 87, 28, 44, 62, 147, 192, 182, 61, 166, 0, 70, 190, 112, 57, 82, 190, 107, 25, 7, 189, 41, 207, 139, 61, 34, 25, 171, 61, 245, 167, 230, 61, 245, 71, 34, 62, 83, 75, 33, 62, 254, 182, 196, 62, 230, 255, 94, 62, 111, 12, 180, 62, 225, 36, 14, 62, 16, 233, 21, 189, 149, 132, 144, 62, 57, 148, 183, 62, 37, 81, 132, 189, 142, 40, 181, 61, 12, 105, 42, 62, 158, 11, 102, 61, 239, 151, 204, 61, 185, 188, 105, 61, 141, 89, 112, 62, 124, 48, 165, 187, 80, 96, 138, 189, 12, 36, 147, 62, 144, 123, 43, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 149, 23, 62, 179, 213, 225, 61, 70, 181, 36, 60, 244, 195, 5, 191, 174, 76, 74, 62, 178, 59, 3, 190, 83, 227, 69, 190, 55, 230, 186, 61, 137, 55, 152, 190, 233, 63, 181, 190, 112, 56, 204, 61, 145, 166, 7, 191, 189, 78, 8, 63, 57, 190, 49, 190, 149, 137, 9, 63, 208, 20, 76, 191, 184, 63, 91, 63, 82, 74, 180, 62, 97, 193, 254, 188, 31, 251, 90, 190, 125, 44, 98, 62, 180, 90, 185, 190, 193, 250, 107, 62, 182, 32, 62, 191, 29, 214, 1, 191, 245, 244, 169, 191, 206, 199, 215, 190, 22, 107, 216, 62, 233, 108, 111, 63, 31, 98, 56, 63, 176, 82, 102, 62, 29, 142, 43, 60, 117, 146, 153, 62, 221, 114, 19, 191, 179, 177, 153, 190, 170, 95, 24, 190, 216, 72, 19, 190, 187, 14, 216, 60, 239, 182, 154, 62, 28, 239, 4, 62, 104, 17, 220, 189, 233, 161, 6, 63, 97, 167, 98, 61, 10, 249, 170, 61, 234, 241, 53, 62, 236, 239, 54, 190, 128, 63, 104, 190, 20, 162, 221, 188, 46, 52, 79, 190, 63, 248, 2, 187, 230, 41, 40, 62, 133, 19, 212, 190, 174, 212, 26, 190, 17, 84, 147, 190, 39, 141, 87, 62, 144, 111, 220, 189, 229, 136, 1, 61, 123, 166, 220, 61, 81, 189, 176, 62, 239, 146, 85, 189, 6, 182, 106, 62, 143, 224, 134, 62, 19, 123, 31, 190, 44, 122, 168, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 131, 12, 189, 99, 230, 187, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {4, 39, 41, 63, 18, 112, 37, 190, 40, 118, 184, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {54, 100, 74, 63, 218, 233, 109, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0045/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}