// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 32, 37, 191, 54, 179, 155, 189, 208, 66, 56, 191, 202, 146, 27, 191, 177, 238, 209, 191, 112, 189, 136, 190, 241, 184, 52, 63, 35, 136, 2, 63, 195, 37, 218, 62, 110, 234, 12, 63, 19, 89, 101, 190, 79, 108, 98, 190, 115, 212, 186, 190, 219, 189, 44, 191, 21, 209, 4, 191, 158, 201, 51, 188, 48, 87, 162, 191, 34, 170, 150, 62, 222, 196, 166, 189, 20, 104, 198, 191, 149, 158, 245, 190, 51, 29, 6, 190, 36, 119, 136, 62, 219, 218, 38, 191, 229, 5, 27, 191, 95, 243, 198, 61, 139, 148, 9, 191, 46, 191, 53, 63, 249, 179, 115, 63, 130, 48, 109, 61, 218, 54, 129, 190, 180, 72, 163, 63, 114, 96, 189, 62, 87, 216, 196, 189, 148, 69, 137, 190, 251, 191, 191, 62, 103, 190, 165, 190, 228, 144, 141, 63, 156, 250, 59, 63, 117, 14, 190, 189, 63, 20, 45, 61, 35, 18, 189, 60, 40, 141, 87, 62, 104, 237, 106, 63, 190, 37, 148, 62, 94, 202, 55, 191, 156, 118, 135, 63, 230, 73, 182, 188, 223, 70, 226, 62, 196, 123, 153, 191, 253, 211, 141, 190, 234, 63, 154, 62, 241, 3, 157, 191, 226, 56, 231, 62, 62, 244, 189, 191, 63, 32, 184, 190, 228, 93, 206, 188, 30, 131, 195, 61, 38, 51, 229, 62, 84, 240, 1, 63, 187, 159, 48, 63, 14, 156, 44, 63, 6, 141, 156, 62, 33, 119, 16, 63, 179, 133, 243, 62, 226, 217, 231, 189, 254, 114, 47, 63, 107, 124, 76, 191, 94, 97, 30, 190, 36, 185, 35, 191, 0, 97, 213, 61, 63, 169, 10, 63, 185, 221, 58, 62, 201, 230, 213, 189, 232, 221, 38, 190, 119, 100, 230, 189, 131, 41, 129, 191, 240, 68, 76, 190, 204, 216, 89, 190, 61, 149, 227, 62, 31, 14, 126, 58, 47, 173, 239, 62, 52, 37, 53, 63, 167, 241, 85, 189, 68, 108, 71, 63, 56, 41, 82, 63, 213, 56, 113, 62, 119, 57, 6, 63, 148, 52, 35, 63, 5, 213, 5, 63, 234, 234, 9, 63, 91, 131, 179, 191, 15, 138, 178, 190, 254, 150, 108, 61, 192, 34, 185, 191, 62, 207, 254, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {205, 83, 23, 191, 68, 92, 11, 190, 47, 108, 207, 190, 228, 204, 63, 191, 173, 19, 99, 62, 124, 53, 48, 62, 43, 31, 253, 61, 215, 94, 235, 190, 147, 100, 252, 190, 101, 244, 9, 191, 130, 11, 105, 190, 229, 239, 203, 62, 124, 218, 249, 60, 204, 225, 189, 62, 102, 82, 146, 189, 159, 141, 187, 62, 212, 190, 254, 189, 118, 191, 6, 190, 186, 210, 166, 60, 215, 1, 130, 190, 195, 136, 5, 191, 247, 156, 51, 63, 11, 43, 27, 63, 210, 191, 190, 190, 167, 88, 25, 63, 21, 133, 110, 62, 223, 133, 6, 191, 26, 247, 7, 61, 247, 132, 99, 190, 213, 179, 203, 189, 145, 147, 221, 190, 145, 24, 212, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 213, 31, 189, 118, 185, 120, 190, 177, 11, 12, 62, 44, 25, 52, 62, 223, 240, 8, 190, 188, 26, 185, 61, 49, 170, 230, 60, 1, 4, 212, 61, 168, 74, 17, 61, 221, 102, 20, 191, 234, 82, 247, 60, 254, 143, 59, 190, 116, 89, 215, 60, 69, 1, 64, 190, 233, 72, 130, 189, 87, 195, 14, 191, 9, 132, 19, 190, 114, 109, 156, 61, 196, 23, 191, 190, 126, 105, 241, 188, 226, 90, 139, 188, 22, 196, 213, 190, 125, 80, 7, 190, 163, 245, 34, 61, 131, 205, 158, 190, 251, 185, 204, 190, 86, 20, 16, 62, 157, 109, 205, 190, 230, 190, 63, 62, 164, 248, 153, 189, 81, 97, 255, 61, 16, 59, 138, 189, 46, 188, 108, 62, 189, 180, 95, 190, 254, 39, 189, 60, 207, 180, 66, 61, 139, 23, 18, 61, 76, 241, 69, 61, 64, 111, 61, 190, 200, 118, 99, 62, 78, 103, 221, 189, 177, 57, 40, 190, 254, 246, 219, 190, 44, 191, 16, 62, 68, 68, 52, 190, 123, 33, 39, 62, 29, 227, 35, 191, 60, 2, 197, 190, 201, 110, 132, 190, 37, 95, 14, 62, 164, 72, 86, 190, 7, 119, 152, 188, 199, 11, 67, 191, 112, 94, 66, 62, 45, 100, 138, 62, 125, 163, 158, 62, 253, 198, 177, 187, 117, 246, 27, 62, 57, 48, 176, 60, 25, 111, 194, 61, 20, 27, 144, 60, 179, 0, 76, 189, 123, 212, 138, 190, 34, 95, 21, 190, 65, 113, 238, 188, 136, 102, 26, 189, 218, 221, 118, 189, 211, 222, 33, 190, 159, 112, 25, 62, 231, 220, 149, 189, 82, 252, 129, 190, 189, 137, 43, 61, 250, 229, 43, 62, 197, 59, 17, 61, 52, 139, 136, 189, 67, 156, 117, 61, 203, 155, 129, 61, 101, 54, 41, 62, 5, 113, 248, 189, 199, 66, 35, 61, 50, 179, 64, 190, 179, 72, 229, 190, 102, 216, 66, 190, 221, 155, 141, 61, 108, 69, 83, 62, 85, 77, 26, 62, 65, 232, 127, 188, 14, 92, 241, 189, 100, 12, 15, 62, 35, 165, 45, 187, 151, 210, 214, 189, 122, 77, 189, 61, 39, 10, 200, 62, 88, 130, 83, 62, 198, 48, 153, 190, 148, 135, 19, 190, 98, 236, 135, 190, 185, 150, 212, 190, 251, 213, 219, 60, 140, 2, 22, 62, 83, 121, 3, 191, 127, 212, 130, 62, 180, 203, 25, 191, 160, 15, 134, 190, 74, 1, 234, 61, 221, 115, 14, 191, 244, 6, 44, 190, 31, 148, 120, 62, 236, 44, 231, 60, 133, 177, 116, 61, 196, 164, 166, 190, 9, 195, 248, 190, 250, 156, 146, 191, 215, 50, 229, 62, 15, 164, 102, 62, 0, 20, 167, 190, 132, 59, 6, 191, 60, 177, 245, 59, 168, 78, 154, 189, 73, 163, 23, 190, 94, 31, 127, 189, 166, 230, 183, 191, 90, 236, 131, 61, 247, 62, 58, 61, 194, 74, 57, 190, 107, 171, 47, 190, 211, 152, 114, 191, 195, 25, 160, 190, 66, 197, 249, 189, 242, 210, 9, 191, 181, 210, 154, 61, 172, 19, 78, 62, 81, 165, 27, 62, 17, 213, 197, 188, 169, 107, 214, 188, 82, 224, 234, 61, 76, 51, 13, 62, 31, 245, 42, 190, 61, 122, 57, 62, 0, 126, 87, 62, 193, 99, 34, 61, 204, 147, 82, 62, 214, 140, 67, 190, 223, 204, 88, 62, 248, 249, 54, 190, 11, 209, 131, 61, 12, 33, 139, 62, 239, 98, 103, 62, 143, 21, 228, 190, 227, 59, 154, 62, 16, 216, 67, 60, 176, 167, 0, 190, 198, 162, 29, 62, 109, 250, 49, 189, 86, 88, 117, 189, 187, 129, 55, 62, 227, 238, 213, 190, 136, 140, 25, 190, 108, 23, 148, 190, 151, 224, 187, 189, 123, 120, 176, 61, 187, 227, 125, 61, 219, 209, 41, 190, 210, 100, 219, 189, 139, 41, 63, 190, 38, 53, 49, 60, 1, 239, 48, 190, 210, 194, 63, 61, 183, 105, 214, 61, 149, 35, 15, 190, 132, 245, 3, 61, 21, 171, 49, 188, 83, 214, 216, 188, 114, 20, 0, 61, 101, 86, 238, 189, 50, 29, 70, 189, 58, 98, 27, 190, 162, 0, 240, 189, 123, 145, 245, 187, 124, 211, 35, 190, 131, 132, 255, 189, 62, 52, 172, 189, 111, 113, 128, 59, 184, 196, 246, 188, 69, 210, 178, 189, 54, 41, 32, 60, 227, 2, 2, 189, 129, 210, 132, 60, 45, 236, 24, 62, 12, 221, 28, 188, 201, 234, 198, 189, 49, 62, 135, 189, 197, 101, 25, 191, 28, 99, 133, 62, 247, 147, 42, 62, 233, 8, 177, 61, 3, 148, 206, 190, 175, 137, 200, 61, 199, 161, 239, 60, 4, 71, 86, 190, 50, 200, 150, 190, 222, 207, 163, 190, 1, 163, 100, 61, 195, 195, 191, 189, 86, 114, 123, 61, 116, 82, 250, 61, 132, 194, 75, 190, 39, 98, 221, 60, 50, 178, 23, 62, 34, 52, 55, 62, 143, 89, 75, 191, 199, 213, 13, 190, 74, 135, 17, 189, 108, 149, 245, 61, 57, 83, 228, 60, 141, 162, 246, 61, 3, 13, 63, 189, 134, 155, 239, 189, 109, 138, 230, 61, 59, 62, 85, 190, 14, 106, 121, 62, 93, 170, 220, 61, 201, 63, 160, 62, 110, 239, 84, 62, 225, 135, 0, 190, 161, 237, 135, 61, 240, 10, 230, 187, 94, 25, 223, 60, 120, 191, 8, 190, 129, 241, 32, 190, 107, 186, 170, 189, 105, 141, 51, 61, 53, 159, 89, 189, 210, 207, 206, 61, 217, 28, 190, 61, 179, 141, 221, 61, 113, 7, 165, 188, 50, 84, 80, 190, 223, 176, 164, 189, 203, 244, 39, 189, 155, 206, 173, 60, 5, 237, 87, 190, 225, 60, 118, 61, 22, 228, 71, 189, 186, 85, 0, 188, 234, 76, 49, 190, 129, 113, 1, 62, 11, 34, 16, 60, 106, 124, 7, 62, 210, 89, 220, 189, 103, 37, 207, 61, 250, 25, 154, 61, 246, 2, 150, 188, 242, 155, 224, 188, 191, 162, 46, 190, 15, 56, 93, 189, 170, 191, 169, 190, 204, 19, 147, 61, 54, 36, 210, 61, 155, 105, 121, 190, 236, 139, 232, 190, 8, 154, 138, 62, 20, 250, 254, 188, 178, 24, 179, 190, 25, 24, 52, 61, 25, 151, 11, 190, 103, 183, 147, 61, 73, 237, 114, 62, 28, 34, 63, 62, 174, 33, 50, 62, 208, 21, 27, 190, 213, 72, 245, 189, 231, 199, 154, 62, 90, 11, 134, 62, 195, 9, 6, 191, 200, 188, 154, 62, 2, 7, 87, 60, 158, 97, 224, 188, 235, 229, 164, 62, 111, 53, 185, 189, 68, 255, 134, 189, 139, 114, 124, 190, 97, 138, 157, 61, 10, 81, 112, 190, 50, 29, 179, 62, 156, 148, 9, 190, 82, 67, 23, 63, 204, 217, 117, 62, 149, 46, 20, 190, 195, 55, 253, 61, 17, 250, 177, 62, 38, 191, 224, 190, 76, 89, 55, 61, 217, 121, 170, 62, 74, 191, 104, 189, 223, 16, 150, 61, 121, 172, 231, 61, 51, 108, 103, 62, 201, 41, 155, 191, 117, 109, 9, 190, 249, 255, 136, 190, 198, 13, 188, 189, 159, 229, 62, 189, 251, 199, 150, 60, 208, 98, 132, 191, 163, 239, 78, 190, 131, 20, 90, 61, 177, 36, 27, 191, 212, 67, 96, 62, 102, 221, 130, 60, 247, 198, 54, 190, 12, 209, 75, 61, 218, 188, 9, 62, 95, 7, 214, 190, 118, 43, 178, 188, 222, 75, 135, 62, 80, 228, 72, 62, 33, 194, 199, 60, 194, 253, 73, 191, 216, 96, 62, 190, 97, 176, 5, 189, 211, 94, 197, 190, 170, 93, 206, 189, 177, 47, 83, 61, 101, 161, 137, 189, 105, 173, 189, 60, 182, 147, 43, 190, 249, 148, 106, 190, 62, 137, 90, 188, 21, 38, 4, 191, 103, 207, 7, 190, 163, 15, 144, 60, 8, 122, 168, 189, 113, 213, 119, 189, 41, 249, 21, 191, 183, 135, 37, 190, 84, 216, 41, 60, 53, 156, 158, 62, 16, 94, 65, 62, 213, 125, 179, 189, 228, 213, 40, 191, 7, 197, 202, 61, 64, 209, 209, 61, 160, 170, 33, 190, 223, 218, 198, 60, 114, 128, 103, 61, 92, 63, 25, 189, 100, 54, 128, 61, 157, 203, 153, 190, 129, 36, 186, 188, 106, 44, 183, 190, 89, 94, 252, 188, 155, 74, 84, 62, 228, 86, 41, 62, 231, 180, 151, 62, 210, 6, 74, 191, 201, 130, 229, 61, 231, 6, 192, 61, 165, 164, 136, 61, 149, 117, 192, 189, 3, 67, 50, 60, 217, 1, 65, 62, 177, 25, 153, 191, 245, 35, 205, 61, 222, 176, 10, 191, 59, 105, 10, 62, 249, 139, 33, 190, 240, 34, 177, 190, 212, 64, 214, 190, 198, 96, 168, 190, 223, 223, 147, 62, 158, 104, 101, 191, 233, 156, 202, 187, 104, 81, 113, 62, 255, 245, 155, 189, 249, 245, 52, 62, 43, 59, 55, 187, 246, 133, 16, 190, 239, 130, 2, 62, 46, 211, 26, 62, 174, 69, 171, 62, 71, 241, 104, 62, 204, 171, 175, 190, 144, 113, 74, 191, 140, 116, 32, 191, 42, 116, 27, 191, 67, 160, 164, 190, 23, 5, 247, 62, 203, 104, 155, 190, 174, 15, 17, 191, 165, 96, 62, 190, 191, 110, 247, 190, 101, 1, 122, 191, 82, 214, 159, 190, 113, 93, 222, 62, 18, 38, 107, 61, 44, 3, 65, 62, 70, 244, 59, 61, 74, 9, 9, 190, 152, 91, 66, 63, 137, 44, 110, 62, 149, 58, 78, 62, 123, 146, 145, 62, 51, 84, 203, 187, 177, 16, 149, 190, 57, 10, 142, 62, 213, 162, 146, 62, 60, 162, 252, 190, 219, 6, 143, 62, 135, 187, 68, 189, 90, 46, 224, 189, 17, 29, 243, 190, 48, 239, 236, 190, 86, 38, 239, 189, 24, 236, 221, 189, 180, 55, 148, 62, 191, 9, 80, 189, 181, 211, 155, 62, 210, 244, 125, 62, 87, 132, 164, 189, 48, 102, 128, 60, 243, 136, 96, 60, 224, 234, 85, 62, 15, 133, 113, 61, 58, 176, 159, 61, 159, 131, 247, 61, 30, 118, 75, 190, 48, 2, 28, 62, 75, 205, 242, 190, 3, 29, 207, 61, 153, 58, 248, 61, 116, 248, 21, 190, 227, 186, 119, 62, 221, 175, 168, 190, 48, 101, 225, 60, 252, 67, 80, 191, 60, 34, 159, 61, 227, 235, 224, 189, 164, 251, 169, 188, 94, 114, 12, 62, 46, 66, 173, 61, 8, 157, 129, 62, 1, 122, 65, 189, 17, 78, 151, 190, 181, 77, 109, 62, 45, 241, 231, 61, 131, 48, 183, 62, 20, 99, 179, 61, 141, 6, 197, 190, 125, 148, 135, 191, 0, 89, 209, 187, 174, 34, 255, 62, 60, 207, 72, 190, 181, 170, 101, 190, 92, 188, 185, 190, 108, 93, 110, 190, 255, 167, 53, 191, 71, 208, 248, 61, 73, 4, 137, 62, 127, 90, 232, 189, 30, 24, 149, 189, 242, 119, 189, 62, 61, 21, 109, 62, 116, 119, 152, 62, 217, 147, 60, 189, 161, 127, 124, 189, 124, 224, 227, 189, 56, 1, 168, 190, 66, 201, 224, 61, 73, 179, 231, 62, 96, 224, 20, 61, 198, 12, 172, 190, 61, 182, 50, 62, 25, 47, 45, 61, 85, 100, 160, 61, 244, 222, 39, 62, 169, 218, 4, 62, 131, 133, 154, 60, 19, 147, 185, 62, 69, 53, 26, 63, 254, 2, 188, 189, 232, 108, 198, 62, 131, 238, 198, 62, 157, 142, 106, 191, 163, 140, 51, 62, 202, 32, 170, 61, 117, 48, 16, 60, 25, 27, 188, 61, 144, 241, 28, 62, 38, 25, 221, 188, 100, 242, 74, 191, 222, 98, 15, 62, 53, 108, 157, 190, 94, 29, 137, 62, 184, 251, 148, 61, 188, 18, 167, 62, 22, 160, 94, 190, 22, 231, 56, 191, 233, 160, 172, 62, 113, 77, 190, 190, 221, 215, 122, 62, 183, 132, 241, 60, 226, 214, 213, 61, 203, 132, 213, 62, 63, 211, 48, 189, 103, 107, 16, 189, 234, 89, 193, 61, 45, 146, 22, 190, 168, 124, 237, 62, 153, 241, 218, 62, 194, 78, 2, 191, 62, 63, 6, 191, 183, 86, 83, 191, 141, 203, 44, 191, 159, 106, 225, 189, 133, 25, 237, 60, 216, 167, 21, 191, 59, 15, 188, 189, 26, 86, 83, 191, 168, 8, 33, 191, 96, 169, 5, 191, 20, 70, 75, 190, 6, 165, 204, 62, 45, 34, 189, 60, 227, 56, 16, 62, 224, 247, 55, 62, 169, 39, 7, 190, 180, 107, 20, 63, 121, 35, 55, 62, 104, 122, 130, 62, 173, 164, 200, 61, 209, 249, 53, 62, 142, 149, 67, 191, 253, 190, 180, 62, 8, 68, 32, 62, 253, 239, 139, 190, 237, 151, 167, 61, 207, 69, 88, 61, 208, 152, 217, 61, 97, 5, 200, 190, 255, 251, 191, 190, 69, 242, 245, 189, 90, 33, 142, 189, 98, 19, 216, 61, 124, 86, 12, 190, 164, 207, 224, 190, 31, 78, 239, 61, 43, 110, 132, 61, 103, 222, 138, 190, 81, 34, 161, 190, 99, 116, 8, 191, 133, 239, 157, 189, 42, 194, 40, 190, 21, 0, 115, 191, 253, 106, 67, 62, 37, 59, 104, 62, 57, 127, 157, 62, 64, 146, 136, 189, 134, 197, 75, 190, 84, 88, 25, 62, 70, 239, 12, 63, 95, 119, 25, 60, 116, 21, 16, 62, 23, 134, 62, 62, 5, 55, 141, 190, 203, 119, 124, 189, 40, 151, 151, 62, 49, 37, 30, 189, 119, 2, 108, 189, 59, 49, 156, 62, 252, 162, 40, 61, 138, 53, 45, 191, 147, 51, 193, 190, 138, 98, 50, 190, 178, 209, 36, 190, 50, 14, 10, 190, 151, 52, 197, 189, 195, 62, 216, 61, 205, 164, 30, 190, 186, 20, 170, 61, 43, 220, 175, 189, 96, 148, 20, 190, 254, 212, 179, 60, 49, 84, 177, 188, 204, 187, 211, 60, 119, 111, 0, 62, 210, 174, 6, 62, 182, 225, 250, 189, 219, 115, 12, 189, 68, 5, 84, 190, 167, 224, 237, 61, 194, 120, 212, 190, 169, 252, 236, 187, 223, 40, 74, 190, 46, 178, 252, 189, 245, 151, 154, 189, 211, 130, 198, 61, 238, 24, 219, 189, 114, 216, 96, 60, 227, 135, 30, 61, 250, 8, 139, 189, 14, 52, 236, 59, 201, 9, 42, 62, 193, 71, 24, 190, 184, 48, 31, 190, 236, 189, 112, 61, 179, 20, 134, 187, 238, 236, 221, 61, 245, 32, 130, 190, 217, 89, 19, 191, 224, 158, 169, 189, 176, 229, 226, 190, 42, 231, 220, 190, 244, 195, 129, 61, 28, 204, 210, 191, 74, 200, 94, 190, 76, 255, 114, 190, 26, 26, 72, 190, 3, 69, 161, 189, 238, 220, 115, 62, 192, 239, 182, 61, 158, 71, 162, 58, 115, 233, 39, 190, 165, 250, 212, 190, 20, 170, 198, 189, 122, 63, 203, 189, 99, 236, 32, 191, 245, 4, 136, 189, 242, 193, 165, 189, 218, 145, 15, 62, 206, 105, 202, 62, 18, 123, 21, 189, 222, 178, 89, 189, 53, 201, 244, 190, 105, 5, 150, 61, 141, 60, 53, 62, 223, 44, 138, 61, 16, 51, 220, 60, 80, 37, 1, 191, 36, 121, 195, 191, 223, 65, 16, 62, 4, 179, 75, 191, 141, 92, 126, 61, 19, 163, 186, 62, 118, 140, 251, 189, 79, 201, 120, 190, 120, 180, 108, 190, 8, 7, 149, 188, 132, 47, 199, 61, 214, 107, 203, 190, 39, 154, 137, 61, 160, 31, 118, 62, 164, 236, 10, 190, 149, 87, 124, 62, 77, 128, 124, 190, 61, 116, 163, 62, 99, 189, 197, 61, 144, 95, 174, 62, 215, 192, 22, 190, 53, 244, 68, 190, 63, 208, 41, 191, 254, 11, 237, 61, 130, 117, 187, 61, 165, 22, 134, 189, 102, 54, 249, 60, 74, 35, 41, 189, 191, 160, 168, 61, 85, 123, 182, 60, 15, 47, 104, 190, 95, 91, 233, 188, 59, 63, 153, 190, 76, 215, 165, 189, 107, 141, 21, 191, 192, 48, 155, 62, 15, 106, 4, 62, 221, 1, 102, 191, 194, 71, 161, 190, 253, 47, 105, 62, 133, 188, 34, 189, 19, 249, 225, 190, 212, 61, 16, 191, 116, 189, 104, 61, 88, 110, 63, 191, 70, 125, 48, 190, 139, 178, 83, 191, 243, 237, 5, 62, 248, 170, 49, 191, 176, 4, 174, 190, 99, 131, 23, 62, 251, 96, 223, 61, 236, 231, 217, 190, 72, 86, 83, 191, 163, 229, 139, 190, 65, 51, 177, 62, 105, 168, 85, 62, 151, 49, 100, 191, 23, 44, 110, 62, 146, 163, 3, 62, 108, 31, 25, 62, 2, 188, 30, 61, 106, 174, 221, 62, 186, 136, 28, 62, 142, 97, 236, 60, 7, 146, 34, 190, 191, 249, 139, 190, 42, 4, 231, 190, 90, 8, 153, 190, 176, 150, 75, 63, 111, 246, 14, 62, 164, 42, 225, 190, 98, 102, 243, 188, 176, 58, 15, 62, 176, 186, 135, 190, 217, 135, 82, 191, 108, 196, 133, 188, 159, 143, 240, 61, 197, 252, 112, 62, 255, 120, 3, 62, 20, 218, 100, 191, 74, 61, 130, 61, 23, 27, 15, 61, 97, 253, 145, 62, 204, 157, 181, 189, 174, 19, 40, 62, 3, 26, 109, 191, 27, 216, 76, 189, 180, 27, 153, 62, 173, 76, 62, 189, 187, 176, 56, 62, 152, 142, 146, 60, 10, 16, 17, 61, 126, 25, 30, 190, 48, 13, 249, 190, 81, 105, 3, 190, 52, 233, 29, 62, 144, 116, 129, 188, 227, 54, 225, 189, 37, 192, 24, 191, 57, 83, 148, 190, 13, 0, 227, 189, 1, 57, 92, 190, 109, 55, 27, 191, 252, 78, 20, 191, 223, 201, 122, 62, 199, 131, 161, 61, 196, 205, 1, 191, 251, 4, 2, 190, 78, 36, 20, 190, 185, 141, 6, 62, 91, 215, 213, 61, 183, 39, 56, 61, 213, 156, 128, 62, 137, 235, 38, 190, 200, 137, 17, 191, 145, 138, 2, 191, 138, 201, 207, 60, 220, 233, 170, 190, 74, 63, 151, 62, 186, 68, 117, 61, 67, 238, 11, 61, 209, 198, 142, 61, 237, 190, 172, 190, 239, 223, 230, 61, 156, 147, 22, 62, 232, 46, 8, 190, 75, 87, 95, 190, 132, 175, 50, 190, 211, 206, 176, 190, 50, 19, 183, 190, 71, 80, 30, 63, 220, 236, 45, 190, 136, 96, 58, 62, 242, 49, 178, 189, 96, 12, 145, 62, 51, 152, 115, 62, 216, 215, 130, 190, 35, 112, 74, 190, 6, 103, 177, 190, 101, 188, 85, 191, 181, 198, 179, 62, 236, 109, 109, 191, 227, 70, 18, 62, 169, 212, 233, 189, 123, 48, 173, 190, 57, 152, 146, 61, 142, 193, 156, 189, 13, 147, 208, 188, 30, 42, 146, 191, 73, 187, 24, 191, 3, 196, 133, 189, 2, 204, 23, 61, 253, 48, 225, 189, 101, 100, 29, 62, 27, 244, 171, 62, 40, 224, 155, 188, 118, 143, 190, 189, 148, 40, 72, 190, 62, 63, 222, 61, 173, 221, 102, 62, 200, 111, 130, 61, 226, 12, 28, 61, 232, 14, 255, 62, 64, 234, 14, 191, 141, 36, 110, 191, 71, 69, 164, 61, 95, 85, 184, 62, 113, 101, 9, 189, 47, 46, 164, 61, 26, 202, 130, 60, 238, 236, 61, 62, 34, 153, 174, 191, 170, 45, 254, 190, 164, 29, 132, 191, 111, 230, 2, 61, 145, 174, 120, 190, 79, 47, 79, 62, 71, 112, 162, 190, 142, 96, 166, 191, 191, 194, 15, 63, 242, 31, 102, 191, 185, 88, 4, 191, 239, 46, 4, 61, 25, 102, 2, 190, 83, 125, 250, 62, 205, 163, 206, 61, 93, 114, 50, 61, 249, 155, 27, 190, 99, 127, 10, 62, 237, 167, 135, 62, 211, 238, 148, 190, 175, 32, 240, 189, 239, 147, 177, 190, 234, 53, 127, 188, 138, 182, 117, 190, 25, 249, 138, 190, 31, 67, 161, 190, 92, 197, 221, 188, 83, 6, 40, 191, 183, 173, 7, 191, 206, 6, 233, 189, 57, 37, 13, 189, 169, 147, 166, 61, 172, 152, 53, 62, 184, 117, 167, 190, 77, 210, 247, 60, 138, 198, 227, 61, 136, 195, 255, 61, 89, 98, 183, 62, 225, 1, 174, 190, 82, 113, 60, 191, 77, 153, 172, 190, 13, 19, 26, 62, 0, 169, 3, 189, 6, 219, 108, 62, 60, 149, 220, 61, 74, 118, 155, 62, 152, 215, 54, 62, 111, 78, 48, 191, 222, 101, 24, 190, 252, 228, 129, 62, 169, 241, 97, 61, 89, 23, 147, 190, 72, 185, 254, 190, 233, 97, 6, 190, 217, 11, 169, 189, 37, 200, 227, 190, 56, 133, 97, 190, 50, 0, 225, 62, 97, 253, 48, 190, 221, 41, 103, 190, 30, 144, 104, 190, 136, 73, 24, 62, 118, 67, 88, 190, 143, 229, 124, 190, 24, 149, 147, 61, 27, 76, 88, 61, 199, 233, 110, 61, 6, 198, 180, 189, 220, 238, 31, 190, 203, 50, 54, 190, 39, 223, 58, 62, 204, 161, 191, 62, 173, 17, 225, 61, 167, 248, 142, 187, 166, 175, 71, 191, 232, 45, 100, 62, 236, 252, 123, 62, 156, 135, 47, 190, 26, 67, 99, 189, 60, 63, 43, 61, 85, 178, 200, 60, 134, 99, 22, 190, 240, 206, 202, 190, 42, 49, 166, 60, 152, 44, 244, 61, 219, 163, 135, 61, 105, 96, 2, 191, 55, 40, 3, 191, 146, 183, 142, 61, 12, 31, 59, 61, 100, 122, 250, 190, 16, 71, 45, 190, 107, 207, 29, 191, 195, 228, 157, 190, 252, 220, 2, 190, 248, 128, 152, 190, 136, 58, 181, 61, 9, 216, 13, 62, 88, 101, 139, 61, 90, 166, 16, 190, 216, 44, 158, 190, 105, 130, 1, 188, 193, 138, 137, 62, 144, 214, 247, 62, 52, 149, 187, 62, 140, 2, 60, 59, 21, 39, 78, 191, 55, 108, 98, 188, 21, 190, 150, 62, 247, 35, 209, 189, 226, 120, 251, 61, 31, 48, 218, 189, 72, 175, 47, 190, 169, 100, 123, 191, 240, 234, 68, 191, 220, 8, 213, 189, 92, 85, 241, 190, 230, 238, 165, 190, 6, 100, 226, 59, 221, 18, 51, 191, 74, 185, 174, 190, 16, 208, 246, 62, 164, 88, 148, 189, 50, 199, 14, 61, 225, 29, 124, 190, 242, 25, 12, 62, 47, 23, 155, 60, 240, 102, 87, 191, 35, 239, 56, 190, 65, 195, 88, 62, 235, 246, 195, 189, 218, 165, 18, 189, 38, 240, 103, 191, 114, 229, 26, 61, 101, 138, 33, 61, 121, 50, 239, 62, 28, 101, 212, 189, 53, 37, 47, 62, 154, 212, 142, 191, 40, 161, 115, 61, 200, 187, 164, 62, 133, 18, 2, 190, 5, 61, 105, 61, 143, 235, 135, 189, 60, 250, 88, 60, 182, 63, 217, 61, 50, 167, 51, 191, 116, 19, 172, 189, 15, 253, 149, 187, 186, 250, 3, 61, 89, 167, 205, 189, 79, 183, 58, 191, 255, 52, 36, 60, 105, 82, 4, 63, 201, 213, 193, 61, 185, 91, 118, 188, 184, 102, 40, 190, 62, 202, 79, 61, 166, 16, 114, 61, 96, 73, 234, 190, 132, 124, 61, 61, 2, 121, 15, 62, 205, 227, 122, 61, 22, 172, 104, 62, 129, 99, 129, 190, 147, 137, 78, 58, 6, 94, 195, 188, 67, 70, 223, 60, 194, 223, 66, 62, 125, 33, 72, 61, 186, 182, 250, 190, 45, 50, 189, 61, 73, 70, 71, 60, 204, 118, 53, 61, 99, 94, 11, 62, 52, 30, 26, 62, 162, 132, 188, 189, 2, 11, 100, 62, 28, 215, 230, 190, 177, 171, 252, 189, 119, 168, 159, 190, 220, 88, 20, 189, 17, 121, 149, 189, 212, 241, 235, 61, 207, 28, 214, 61, 180, 241, 131, 189, 71, 222, 31, 60, 214, 126, 220, 189, 41, 201, 204, 60, 137, 120, 195, 189, 201, 73, 76, 61, 88, 79, 241, 61, 215, 36, 122, 61, 123, 13, 131, 189, 74, 148, 115, 60, 239, 138, 77, 190, 184, 138, 212, 189, 40, 8, 104, 190, 195, 96, 2, 62, 25, 192, 40, 190, 227, 193, 83, 61, 141, 66, 227, 189, 222, 77, 183, 189, 59, 0, 32, 61, 114, 41, 198, 187, 47, 14, 250, 189, 246, 169, 218, 189, 242, 42, 84, 189, 255, 213, 48, 62, 101, 179, 174, 61, 79, 139, 224, 189, 149, 142, 5, 190, 210, 239, 65, 190, 252, 84, 149, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 122, 205, 190, 161, 134, 144, 62, 39, 114, 69, 62, 124, 5, 56, 62, 52, 214, 61, 62, 147, 192, 182, 61, 97, 49, 81, 190, 112, 57, 82, 190, 23, 129, 168, 188, 123, 158, 53, 61, 71, 248, 86, 61, 6, 179, 2, 62, 0, 88, 49, 62, 41, 210, 49, 62, 21, 242, 205, 62, 53, 16, 95, 62, 138, 214, 187, 62, 172, 227, 41, 62, 16, 233, 21, 189, 38, 20, 111, 62, 31, 122, 179, 62, 74, 128, 49, 189, 241, 31, 177, 61, 70, 86, 46, 62, 158, 251, 123, 61, 80, 199, 192, 61, 231, 97, 79, 61, 33, 66, 113, 62, 136, 243, 131, 60, 138, 211, 171, 189, 174, 182, 151, 62, 144, 123, 43, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 73, 0, 62, 135, 45, 143, 61, 216, 198, 101, 60, 191, 5, 11, 191, 116, 238, 30, 62, 178, 59, 3, 190, 119, 71, 17, 190, 55, 230, 186, 61, 106, 138, 151, 190, 30, 246, 79, 191, 116, 229, 29, 61, 65, 54, 8, 191, 18, 154, 237, 62, 107, 158, 47, 190, 233, 205, 16, 63, 40, 48, 56, 191, 196, 128, 82, 63, 103, 90, 227, 62, 97, 193, 254, 188, 168, 41, 100, 190, 95, 28, 59, 62, 36, 155, 186, 190, 190, 163, 180, 62, 168, 204, 54, 191, 119, 243, 3, 191, 75, 110, 171, 191, 125, 141, 160, 190, 116, 159, 174, 62, 198, 51, 130, 63, 19, 139, 68, 63, 93, 130, 42, 62, 29, 142, 43, 60, 135, 76, 170, 62, 60, 81, 22, 191, 83, 13, 168, 190, 254, 66, 75, 190, 191, 162, 73, 190, 187, 14, 216, 60, 193, 97, 139, 62, 28, 239, 4, 62, 42, 46, 5, 190, 33, 45, 32, 63, 189, 138, 114, 62, 30, 60, 225, 188, 87, 210, 29, 62, 139, 143, 34, 190, 157, 158, 130, 190, 68, 137, 31, 189, 178, 99, 99, 189, 234, 12, 154, 60, 230, 41, 40, 62, 52, 132, 236, 190, 20, 122, 46, 190, 31, 173, 186, 190, 224, 174, 35, 62, 228, 236, 21, 190, 178, 121, 146, 61, 50, 157, 103, 62, 109, 54, 171, 62, 83, 217, 112, 189, 15, 170, 115, 62, 90, 64, 99, 62, 139, 145, 66, 190, 44, 122, 168, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 174, 169, 188, 149, 51, 26, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {25, 22, 188, 63, 0, 150, 208, 63, 46, 224, 51, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {28, 34, 221, 62, 16, 176, 186, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0045/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}