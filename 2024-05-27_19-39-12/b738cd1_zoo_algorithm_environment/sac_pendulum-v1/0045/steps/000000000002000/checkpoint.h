// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 180, 57, 191, 57, 15, 0, 63, 109, 34, 3, 191, 112, 150, 5, 191, 58, 163, 59, 191, 112, 225, 132, 190, 137, 161, 22, 63, 128, 131, 195, 61, 129, 135, 235, 62, 172, 237, 202, 61, 173, 104, 57, 61, 213, 117, 94, 190, 78, 83, 92, 190, 106, 185, 143, 62, 21, 23, 9, 191, 29, 125, 174, 61, 14, 50, 38, 191, 109, 191, 181, 62, 100, 173, 105, 190, 116, 220, 165, 190, 33, 0, 233, 190, 192, 51, 254, 190, 213, 147, 25, 63, 108, 172, 3, 191, 168, 191, 32, 191, 200, 213, 8, 63, 62, 91, 194, 190, 68, 99, 181, 62, 192, 252, 231, 61, 134, 98, 160, 62, 231, 207, 185, 190, 203, 139, 239, 190, 192, 165, 80, 62, 84, 67, 3, 189, 44, 117, 48, 191, 158, 111, 157, 62, 102, 206, 239, 190, 13, 143, 220, 190, 223, 178, 25, 63, 12, 45, 3, 62, 197, 208, 172, 62, 219, 166, 9, 62, 58, 169, 13, 190, 19, 228, 228, 62, 136, 172, 157, 62, 252, 214, 1, 191, 103, 154, 17, 63, 156, 193, 13, 62, 93, 242, 189, 62, 79, 70, 186, 190, 0, 151, 195, 190, 209, 123, 0, 189, 76, 189, 139, 191, 87, 43, 111, 62, 193, 93, 28, 191, 154, 136, 172, 190, 215, 206, 11, 190, 85, 170, 173, 190, 168, 97, 75, 191, 127, 185, 239, 61, 90, 163, 75, 62, 202, 165, 144, 62, 16, 252, 171, 62, 204, 99, 240, 62, 159, 25, 6, 63, 157, 31, 233, 189, 215, 215, 39, 63, 143, 91, 66, 189, 79, 62, 211, 190, 66, 186, 37, 62, 116, 162, 176, 190, 189, 42, 2, 63, 39, 8, 80, 62, 135, 249, 218, 190, 123, 1, 150, 190, 253, 140, 35, 60, 49, 196, 42, 191, 37, 124, 102, 190, 138, 92, 93, 190, 147, 90, 231, 62, 183, 154, 13, 59, 188, 12, 64, 62, 31, 52, 88, 63, 93, 249, 23, 190, 106, 195, 18, 63, 173, 78, 176, 62, 129, 86, 86, 62, 188, 46, 115, 62, 68, 99, 18, 63, 159, 183, 18, 63, 220, 47, 129, 62, 81, 13, 168, 190, 93, 108, 0, 191, 187, 88, 190, 62, 83, 131, 160, 190, 113, 151, 6, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 70, 255, 190, 27, 32, 156, 61, 34, 64, 149, 190, 65, 12, 194, 190, 123, 50, 202, 62, 79, 30, 40, 190, 54, 168, 163, 62, 104, 194, 124, 190, 109, 203, 174, 190, 66, 48, 243, 190, 1, 82, 25, 190, 174, 231, 20, 63, 194, 33, 30, 190, 134, 109, 26, 63, 0, 162, 136, 190, 188, 166, 145, 62, 53, 90, 3, 190, 38, 34, 169, 62, 28, 137, 193, 62, 172, 161, 17, 190, 31, 248, 193, 190, 193, 54, 37, 63, 206, 226, 32, 63, 91, 255, 245, 190, 188, 118, 48, 63, 178, 255, 227, 62, 208, 113, 4, 191, 15, 19, 180, 62, 84, 7, 219, 61, 65, 111, 233, 189, 120, 10, 224, 190, 106, 33, 213, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 5, 99, 60, 79, 187, 217, 61, 19, 109, 48, 62, 91, 179, 32, 62, 103, 224, 110, 189, 50, 197, 151, 61, 232, 154, 243, 61, 56, 6, 27, 62, 67, 47, 177, 61, 160, 252, 35, 190, 151, 208, 9, 62, 7, 167, 21, 190, 253, 2, 5, 62, 172, 53, 100, 59, 169, 14, 167, 61, 42, 178, 177, 189, 189, 120, 174, 61, 205, 19, 173, 188, 158, 39, 36, 62, 111, 174, 71, 59, 176, 30, 133, 60, 238, 30, 167, 189, 205, 112, 235, 189, 211, 100, 206, 61, 83, 129, 235, 189, 238, 163, 111, 61, 56, 19, 16, 62, 91, 88, 198, 61, 6, 76, 21, 62, 223, 145, 237, 59, 177, 252, 12, 62, 236, 37, 98, 189, 162, 240, 50, 62, 203, 234, 206, 189, 245, 162, 102, 189, 255, 128, 144, 189, 245, 188, 21, 61, 63, 140, 90, 61, 43, 120, 42, 60, 112, 190, 31, 62, 100, 141, 16, 190, 179, 64, 161, 61, 42, 41, 231, 189, 93, 56, 86, 187, 184, 53, 104, 189, 19, 213, 63, 62, 19, 178, 207, 61, 165, 165, 126, 189, 151, 65, 46, 190, 237, 30, 2, 62, 223, 174, 40, 190, 214, 43, 105, 61, 213, 175, 0, 190, 102, 95, 78, 62, 178, 184, 60, 62, 115, 140, 36, 62, 214, 30, 187, 189, 148, 38, 181, 61, 49, 58, 176, 60, 182, 138, 255, 61, 9, 195, 212, 61, 17, 166, 16, 189, 227, 213, 158, 60, 129, 111, 165, 60, 34, 183, 97, 189, 51, 169, 210, 60, 124, 190, 228, 189, 95, 81, 50, 190, 219, 106, 15, 62, 156, 23, 5, 62, 228, 53, 220, 189, 5, 47, 32, 188, 36, 224, 44, 62, 47, 200, 221, 189, 154, 40, 189, 189, 112, 99, 149, 61, 11, 195, 170, 61, 62, 201, 56, 62, 216, 53, 205, 189, 220, 115, 163, 61, 192, 61, 215, 189, 170, 59, 33, 190, 12, 237, 40, 188, 127, 208, 90, 61, 212, 243, 20, 62, 54, 29, 52, 62, 14, 178, 55, 188, 188, 26, 200, 189, 51, 203, 198, 61, 163, 131, 5, 61, 103, 199, 214, 189, 147, 128, 233, 60, 255, 62, 103, 62, 128, 160, 43, 62, 250, 247, 101, 189, 76, 225, 199, 60, 249, 116, 243, 189, 93, 87, 194, 190, 181, 147, 191, 61, 140, 2, 22, 62, 212, 195, 133, 190, 209, 59, 149, 61, 116, 51, 157, 189, 247, 92, 255, 60, 4, 97, 89, 62, 132, 137, 1, 189, 40, 123, 178, 61, 19, 43, 38, 62, 43, 19, 254, 61, 223, 70, 136, 60, 76, 236, 153, 61, 38, 66, 35, 189, 2, 208, 70, 61, 192, 224, 59, 62, 188, 209, 42, 62, 159, 190, 114, 190, 222, 132, 164, 190, 202, 56, 226, 60, 56, 152, 156, 190, 59, 143, 186, 189, 27, 84, 79, 190, 71, 29, 138, 190, 141, 231, 131, 61, 190, 160, 147, 61, 125, 148, 193, 189, 10, 25, 23, 189, 87, 113, 89, 189, 201, 161, 57, 189, 19, 87, 15, 190, 21, 138, 138, 188, 108, 218, 72, 61, 246, 224, 223, 189, 20, 203, 53, 62, 161, 129, 117, 61, 67, 189, 21, 62, 109, 132, 153, 61, 11, 251, 249, 61, 1, 216, 83, 61, 89, 44, 91, 61, 8, 70, 85, 62, 116, 85, 228, 188, 166, 203, 213, 61, 154, 122, 58, 190, 127, 252, 217, 188, 190, 20, 185, 189, 172, 224, 184, 61, 55, 111, 80, 62, 50, 177, 132, 62, 20, 89, 148, 189, 242, 140, 26, 62, 125, 253, 63, 189, 82, 156, 30, 190, 135, 157, 1, 62, 119, 252, 90, 188, 234, 165, 117, 189, 81, 39, 255, 60, 114, 208, 1, 190, 32, 237, 50, 190, 49, 208, 12, 189, 243, 144, 23, 61, 118, 206, 177, 61, 187, 227, 125, 61, 219, 209, 41, 190, 210, 100, 219, 189, 194, 12, 62, 190, 38, 53, 49, 60, 1, 239, 48, 190, 60, 224, 67, 61, 15, 189, 215, 61, 149, 35, 15, 190, 132, 245, 3, 61, 21, 171, 49, 188, 83, 214, 216, 188, 221, 15, 6, 61, 226, 160, 237, 189, 47, 175, 63, 189, 58, 98, 27, 190, 162, 0, 240, 189, 6, 156, 232, 187, 124, 211, 35, 190, 112, 127, 255, 189, 210, 2, 169, 189, 106, 49, 143, 59, 184, 196, 246, 188, 171, 215, 177, 189, 54, 41, 32, 60, 227, 2, 2, 189, 87, 168, 148, 60, 225, 142, 25, 62, 153, 118, 18, 188, 201, 234, 198, 189, 49, 62, 135, 189, 216, 119, 42, 190, 125, 196, 218, 61, 98, 74, 221, 61, 164, 165, 14, 62, 172, 124, 50, 190, 88, 45, 8, 190, 197, 42, 38, 60, 38, 197, 5, 62, 165, 70, 227, 61, 208, 81, 242, 61, 0, 225, 93, 61, 22, 47, 44, 190, 254, 151, 151, 61, 166, 207, 7, 62, 61, 135, 8, 190, 216, 208, 93, 61, 90, 168, 149, 186, 24, 205, 216, 189, 57, 41, 165, 188, 191, 128, 225, 189, 223, 235, 183, 189, 108, 36, 146, 61, 119, 192, 6, 190, 46, 0, 223, 61, 173, 235, 48, 189, 131, 144, 149, 188, 10, 182, 230, 61, 125, 106, 128, 189, 181, 19, 5, 62, 67, 194, 232, 61, 232, 241, 214, 61, 59, 216, 16, 62, 225, 135, 0, 190, 161, 237, 135, 61, 174, 112, 177, 60, 94, 25, 223, 60, 120, 191, 8, 190, 200, 203, 241, 189, 107, 186, 170, 189, 105, 141, 51, 61, 53, 159, 89, 189, 214, 253, 197, 61, 79, 126, 5, 62, 63, 187, 19, 62, 216, 102, 62, 60, 222, 44, 65, 190, 2, 118, 97, 189, 227, 85, 54, 188, 155, 206, 173, 60, 38, 98, 43, 190, 129, 187, 204, 61, 147, 184, 254, 59, 114, 0, 53, 60, 234, 76, 49, 190, 129, 113, 1, 62, 216, 109, 52, 61, 106, 124, 7, 62, 210, 89, 220, 189, 103, 37, 207, 61, 18, 152, 133, 61, 177, 130, 131, 188, 230, 33, 179, 185, 191, 162, 46, 190, 15, 56, 93, 189, 76, 215, 254, 188, 8, 157, 224, 61, 16, 222, 220, 61, 53, 124, 24, 190, 139, 82, 55, 190, 76, 175, 56, 62, 251, 181, 7, 62, 32, 182, 0, 62, 255, 183, 25, 62, 116, 93, 175, 189, 55, 2, 228, 60, 31, 54, 161, 61, 61, 177, 17, 62, 26, 136, 61, 188, 171, 172, 15, 190, 168, 175, 10, 189, 217, 5, 106, 189, 152, 61, 252, 188, 218, 114, 96, 61, 110, 128, 57, 62, 122, 189, 194, 59, 246, 120, 1, 190, 234, 72, 217, 60, 70, 172, 163, 189, 228, 195, 114, 189, 246, 31, 188, 189, 255, 126, 157, 61, 64, 103, 156, 189, 40, 127, 23, 62, 109, 188, 45, 190, 245, 108, 43, 62, 196, 57, 14, 61, 83, 118, 149, 189, 190, 30, 28, 190, 246, 94, 81, 62, 192, 2, 131, 189, 183, 239, 58, 189, 114, 219, 55, 189, 40, 47, 152, 60, 102, 145, 26, 60, 164, 236, 92, 62, 87, 67, 246, 189, 210, 3, 250, 189, 222, 77, 5, 190, 169, 24, 139, 189, 44, 222, 126, 61, 182, 254, 60, 61, 138, 245, 135, 62, 255, 111, 46, 190, 201, 66, 210, 189, 149, 8, 148, 188, 116, 195, 160, 190, 185, 51, 206, 61, 26, 84, 227, 61, 70, 233, 17, 190, 17, 67, 46, 189, 53, 97, 210, 61, 246, 41, 64, 59, 130, 76, 177, 188, 180, 199, 131, 62, 134, 68, 11, 188, 3, 22, 116, 61, 29, 69, 233, 60, 157, 49, 125, 61, 24, 71, 90, 188, 133, 247, 71, 188, 38, 230, 181, 189, 131, 139, 164, 189, 145, 64, 48, 62, 120, 241, 16, 62, 14, 138, 243, 61, 209, 189, 28, 190, 126, 195, 38, 60, 136, 165, 8, 190, 243, 118, 236, 61, 30, 243, 102, 61, 52, 174, 38, 189, 90, 1, 39, 189, 162, 6, 47, 190, 242, 222, 238, 189, 130, 122, 63, 62, 52, 24, 169, 62, 36, 14, 141, 61, 69, 27, 195, 60, 140, 62, 27, 190, 167, 83, 215, 61, 122, 4, 11, 62, 246, 57, 224, 189, 66, 0, 224, 61, 123, 87, 11, 62, 216, 84, 25, 189, 48, 215, 20, 62, 167, 139, 104, 61, 51, 55, 131, 60, 146, 205, 74, 185, 243, 211, 100, 62, 242, 230, 191, 62, 71, 26, 212, 189, 235, 216, 14, 62, 135, 20, 63, 190, 142, 57, 12, 62, 179, 92, 131, 189, 214, 154, 44, 62, 160, 235, 9, 61, 171, 6, 78, 62, 112, 217, 248, 189, 125, 246, 12, 190, 145, 24, 88, 61, 103, 168, 39, 190, 0, 232, 227, 61, 36, 207, 151, 188, 179, 50, 186, 61, 136, 70, 174, 190, 2, 119, 39, 190, 8, 215, 24, 62, 152, 194, 193, 190, 17, 82, 143, 189, 238, 42, 246, 61, 16, 68, 107, 190, 34, 70, 30, 62, 71, 223, 69, 190, 136, 86, 145, 190, 125, 183, 2, 62, 121, 218, 44, 62, 41, 101, 96, 189, 125, 184, 72, 62, 205, 153, 71, 190, 60, 221, 189, 190, 250, 89, 18, 190, 106, 239, 14, 62, 129, 158, 166, 190, 33, 97, 221, 189, 81, 126, 34, 190, 85, 116, 108, 190, 157, 196, 37, 62, 101, 43, 222, 190, 216, 108, 199, 190, 59, 39, 24, 190, 160, 193, 157, 62, 59, 231, 20, 62, 201, 172, 56, 62, 11, 104, 4, 190, 124, 31, 48, 190, 22, 170, 47, 62, 202, 99, 60, 61, 179, 95, 222, 62, 48, 207, 169, 62, 236, 72, 67, 62, 114, 148, 84, 190, 236, 92, 63, 190, 178, 63, 215, 189, 69, 177, 162, 190, 45, 249, 10, 62, 139, 153, 143, 61, 90, 46, 224, 189, 230, 166, 214, 190, 251, 183, 207, 190, 105, 41, 247, 189, 248, 58, 145, 188, 63, 32, 50, 61, 122, 217, 133, 60, 204, 74, 120, 190, 80, 170, 0, 62, 193, 32, 214, 189, 223, 72, 78, 61, 32, 42, 12, 189, 151, 54, 133, 61, 203, 6, 53, 62, 70, 93, 35, 62, 39, 202, 187, 189, 189, 207, 253, 60, 204, 165, 55, 61, 98, 33, 195, 189, 2, 8, 19, 62, 60, 232, 164, 189, 151, 86, 195, 61, 11, 23, 50, 61, 142, 68, 121, 190, 64, 233, 149, 60, 219, 134, 38, 190, 155, 55, 137, 60, 168, 48, 189, 189, 205, 94, 244, 189, 188, 46, 21, 61, 191, 143, 16, 189, 106, 121, 46, 189, 81, 55, 65, 189, 80, 99, 129, 189, 160, 39, 133, 61, 218, 212, 84, 61, 2, 218, 179, 61, 83, 111, 187, 61, 54, 8, 180, 61, 155, 30, 19, 190, 246, 246, 96, 189, 243, 77, 13, 62, 100, 51, 177, 189, 219, 68, 85, 189, 1, 233, 80, 190, 71, 249, 186, 61, 141, 94, 87, 190, 245, 56, 62, 190, 227, 1, 41, 62, 35, 62, 213, 189, 30, 46, 91, 189, 112, 228, 43, 62, 160, 35, 31, 62, 58, 93, 254, 61, 62, 193, 199, 189, 148, 27, 217, 59, 38, 191, 145, 189, 199, 222, 234, 189, 137, 187, 128, 189, 150, 47, 53, 62, 193, 27, 176, 189, 115, 141, 65, 61, 46, 212, 29, 61, 71, 191, 7, 189, 123, 129, 160, 61, 146, 139, 189, 189, 126, 166, 139, 60, 236, 248, 19, 61, 96, 58, 20, 62, 111, 154, 220, 188, 160, 38, 3, 190, 82, 162, 86, 189, 202, 20, 241, 59, 24, 237, 163, 190, 93, 25, 50, 62, 43, 0, 108, 190, 138, 92, 155, 61, 108, 55, 162, 61, 117, 77, 11, 62, 36, 254, 89, 188, 236, 102, 150, 190, 57, 191, 20, 190, 37, 165, 119, 190, 131, 164, 132, 62, 83, 239, 76, 60, 196, 30, 185, 62, 247, 157, 171, 60, 102, 84, 15, 191, 111, 254, 173, 61, 177, 109, 146, 190, 16, 56, 215, 61, 205, 30, 185, 61, 97, 29, 5, 62, 47, 199, 23, 190, 165, 194, 171, 189, 9, 94, 125, 189, 203, 10, 194, 61, 189, 201, 32, 60, 198, 93, 240, 61, 92, 139, 8, 62, 195, 8, 154, 190, 63, 133, 33, 190, 134, 6, 131, 190, 207, 125, 49, 62, 66, 185, 172, 189, 35, 222, 10, 61, 37, 43, 67, 190, 73, 110, 110, 61, 28, 42, 237, 189, 153, 179, 131, 190, 95, 30, 35, 60, 26, 37, 27, 189, 173, 217, 104, 62, 154, 42, 115, 60, 60, 170, 126, 61, 82, 213, 21, 61, 181, 13, 233, 189, 65, 229, 16, 187, 68, 88, 62, 62, 34, 103, 146, 62, 244, 94, 102, 188, 119, 73, 128, 62, 156, 79, 162, 190, 20, 128, 208, 61, 79, 167, 6, 61, 218, 101, 125, 190, 4, 205, 137, 61, 44, 150, 43, 62, 208, 152, 217, 61, 71, 236, 117, 190, 70, 36, 16, 189, 158, 255, 210, 189, 110, 248, 97, 61, 251, 76, 140, 189, 25, 31, 70, 188, 147, 165, 23, 61, 249, 246, 238, 61, 203, 83, 4, 61, 170, 107, 2, 61, 14, 223, 6, 190, 102, 26, 185, 189, 235, 145, 225, 60, 66, 217, 82, 189, 209, 43, 55, 190, 247, 72, 88, 189, 205, 33, 128, 62, 75, 228, 0, 62, 167, 176, 109, 189, 125, 89, 150, 190, 86, 42, 46, 190, 92, 112, 106, 62, 99, 218, 228, 61, 120, 243, 241, 61, 7, 97, 15, 62, 133, 164, 7, 190, 85, 92, 33, 190, 116, 252, 242, 61, 134, 233, 162, 189, 239, 234, 240, 188, 161, 21, 105, 62, 238, 200, 40, 61, 239, 113, 175, 189, 36, 11, 205, 60, 182, 86, 77, 190, 28, 75, 206, 189, 122, 230, 151, 61, 106, 203, 98, 189, 35, 134, 231, 61, 205, 164, 30, 190, 194, 243, 196, 61, 83, 218, 121, 189, 42, 172, 27, 190, 147, 73, 25, 61, 175, 28, 82, 60, 84, 111, 142, 61, 119, 111, 0, 62, 210, 174, 6, 62, 139, 118, 248, 189, 219, 115, 12, 189, 74, 198, 3, 190, 167, 224, 237, 61, 105, 175, 134, 190, 93, 218, 73, 188, 230, 114, 87, 190, 22, 132, 211, 189, 4, 70, 140, 189, 211, 130, 198, 61, 161, 22, 183, 189, 101, 17, 150, 60, 227, 135, 30, 61, 140, 166, 124, 189, 170, 45, 39, 59, 201, 9, 42, 62, 204, 142, 183, 189, 250, 63, 34, 190, 236, 189, 112, 61, 175, 36, 92, 187, 162, 254, 226, 61, 127, 37, 77, 190, 121, 196, 178, 190, 249, 154, 217, 189, 55, 215, 230, 189, 93, 90, 45, 190, 68, 244, 88, 62, 112, 90, 87, 190, 98, 209, 112, 188, 12, 232, 14, 190, 157, 60, 239, 61, 80, 156, 144, 61, 222, 157, 62, 62, 60, 238, 149, 61, 246, 211, 207, 60, 188, 182, 165, 61, 93, 160, 36, 61, 95, 249, 41, 189, 70, 41, 54, 189, 2, 93, 185, 189, 213, 249, 209, 189, 17, 31, 138, 61, 33, 231, 105, 62, 72, 137, 77, 62, 28, 142, 17, 190, 176, 184, 61, 189, 193, 25, 81, 190, 105, 5, 150, 61, 188, 243, 168, 62, 3, 213, 92, 61, 102, 20, 89, 61, 246, 69, 128, 60, 47, 233, 149, 188, 85, 52, 23, 62, 188, 132, 167, 189, 146, 73, 68, 61, 39, 113, 95, 59, 68, 190, 135, 189, 67, 94, 17, 190, 26, 138, 40, 60, 215, 89, 47, 189, 251, 126, 207, 61, 243, 101, 251, 189, 140, 92, 165, 60, 174, 4, 98, 62, 198, 68, 13, 190, 217, 107, 29, 61, 37, 61, 164, 61, 10, 245, 155, 61, 198, 162, 119, 62, 106, 128, 135, 62, 167, 198, 182, 188, 178, 179, 144, 185, 72, 139, 43, 190, 25, 156, 244, 188, 0, 249, 218, 61, 214, 55, 156, 189, 190, 228, 93, 61, 150, 125, 162, 61, 83, 131, 168, 61, 234, 147, 19, 190, 199, 178, 22, 190, 64, 7, 56, 189, 70, 133, 222, 57, 32, 231, 237, 61, 220, 195, 119, 59, 89, 216, 61, 190, 164, 45, 184, 189, 8, 62, 200, 189, 69, 201, 90, 189, 108, 138, 55, 190, 37, 31, 184, 61, 173, 196, 29, 189, 130, 182, 37, 189, 162, 25, 83, 189, 43, 26, 206, 189, 143, 106, 147, 190, 62, 66, 35, 189, 175, 255, 133, 189, 140, 252, 214, 189, 239, 239, 246, 189, 0, 145, 182, 59, 193, 130, 38, 190, 2, 99, 7, 189, 86, 157, 9, 189, 207, 208, 121, 60, 178, 68, 14, 62, 75, 168, 55, 186, 149, 70, 24, 62, 8, 151, 0, 62, 56, 240, 173, 61, 30, 61, 25, 62, 97, 133, 79, 189, 54, 231, 145, 61, 69, 78, 95, 60, 254, 153, 93, 188, 235, 165, 46, 188, 3, 168, 24, 190, 179, 241, 22, 62, 159, 75, 84, 190, 31, 178, 185, 61, 209, 192, 208, 61, 148, 131, 162, 190, 75, 239, 221, 61, 191, 149, 161, 58, 7, 237, 19, 189, 13, 17, 145, 190, 64, 186, 226, 61, 248, 189, 12, 62, 59, 131, 204, 61, 7, 170, 203, 61, 185, 138, 20, 190, 155, 47, 46, 190, 164, 212, 250, 189, 105, 243, 147, 62, 60, 47, 49, 190, 82, 124, 9, 62, 43, 36, 248, 189, 217, 96, 44, 190, 11, 69, 237, 61, 231, 90, 211, 187, 49, 212, 8, 62, 114, 179, 35, 61, 10, 16, 17, 61, 212, 253, 78, 189, 134, 43, 130, 61, 39, 250, 46, 60, 15, 125, 238, 61, 6, 249, 244, 189, 233, 137, 29, 190, 54, 32, 16, 61, 180, 58, 160, 188, 38, 5, 206, 189, 36, 241, 241, 188, 193, 129, 50, 190, 19, 8, 95, 189, 194, 186, 172, 61, 143, 98, 111, 61, 91, 44, 151, 61, 207, 158, 161, 189, 164, 54, 68, 189, 24, 246, 248, 61, 119, 151, 139, 189, 246, 151, 252, 61, 220, 9, 12, 61, 217, 56, 2, 189, 131, 166, 1, 61, 22, 220, 172, 189, 62, 77, 27, 189, 137, 116, 245, 60, 41, 255, 142, 61, 174, 63, 177, 189, 1, 97, 145, 189, 247, 229, 209, 58, 182, 38, 108, 61, 239, 223, 230, 61, 123, 28, 6, 190, 100, 245, 108, 189, 188, 152, 149, 189, 134, 177, 160, 61, 255, 179, 222, 189, 25, 103, 97, 190, 110, 62, 36, 190, 4, 238, 60, 190, 99, 47, 136, 61, 215, 56, 126, 61, 45, 2, 13, 60, 57, 134, 56, 60, 53, 66, 140, 61, 201, 12, 230, 189, 34, 141, 88, 190, 43, 217, 169, 61, 163, 174, 213, 61, 78, 7, 254, 189, 129, 36, 46, 62, 119, 93, 230, 61, 48, 155, 164, 61, 224, 119, 213, 189, 138, 223, 206, 189, 135, 194, 233, 60, 72, 118, 93, 190, 28, 206, 130, 190, 110, 6, 246, 188, 176, 246, 208, 188, 203, 14, 22, 59, 136, 115, 148, 188, 242, 74, 210, 189, 40, 224, 155, 188, 150, 251, 104, 62, 67, 185, 82, 190, 20, 1, 64, 62, 168, 220, 144, 189, 114, 166, 13, 62, 251, 215, 77, 61, 42, 107, 31, 189, 159, 207, 100, 189, 100, 49, 159, 190, 210, 112, 134, 61, 235, 255, 131, 187, 128, 72, 174, 189, 169, 43, 213, 61, 198, 215, 61, 61, 254, 113, 210, 189, 32, 112, 60, 190, 91, 174, 50, 190, 132, 23, 130, 190, 158, 171, 87, 62, 41, 36, 2, 189, 184, 119, 169, 62, 156, 217, 27, 190, 57, 81, 19, 191, 169, 45, 146, 62, 67, 19, 46, 191, 113, 13, 20, 190, 70, 216, 218, 61, 213, 154, 83, 189, 187, 108, 12, 190, 128, 249, 7, 61, 46, 125, 242, 186, 114, 54, 27, 190, 213, 34, 32, 62, 73, 246, 113, 188, 33, 252, 5, 62, 202, 18, 143, 188, 152, 32, 112, 190, 147, 32, 82, 61, 4, 211, 138, 61, 140, 3, 150, 189, 119, 248, 24, 190, 65, 194, 220, 188, 16, 52, 166, 189, 12, 31, 177, 189, 143, 193, 2, 190, 123, 85, 252, 60, 124, 131, 64, 61, 196, 20, 199, 61, 127, 202, 186, 189, 197, 138, 225, 189, 11, 98, 190, 189, 210, 129, 159, 188, 247, 63, 200, 61, 38, 147, 136, 189, 204, 250, 88, 61, 193, 111, 76, 190, 31, 2, 193, 188, 156, 114, 164, 188, 168, 182, 133, 61, 121, 152, 55, 61, 166, 111, 229, 60, 191, 171, 249, 61, 101, 11, 70, 190, 222, 101, 24, 190, 37, 27, 131, 61, 177, 230, 185, 189, 169, 55, 77, 190, 216, 41, 37, 190, 209, 131, 6, 62, 164, 131, 161, 189, 28, 97, 139, 61, 143, 150, 75, 190, 213, 120, 233, 188, 204, 5, 15, 190, 76, 144, 141, 189, 11, 241, 111, 61, 104, 114, 62, 61, 227, 233, 25, 190, 218, 187, 133, 60, 187, 151, 154, 61, 228, 117, 99, 61, 77, 72, 44, 189, 237, 161, 194, 189, 23, 37, 25, 189, 20, 160, 96, 190, 120, 49, 198, 61, 159, 16, 210, 62, 214, 139, 71, 61, 120, 89, 85, 61, 171, 163, 138, 190, 249, 247, 56, 62, 168, 72, 234, 61, 238, 53, 17, 190, 3, 180, 71, 189, 46, 64, 225, 61, 85, 178, 200, 60, 135, 151, 32, 190, 181, 111, 182, 61, 193, 166, 113, 61, 78, 222, 80, 62, 52, 29, 64, 188, 248, 160, 135, 190, 206, 12, 156, 60, 3, 217, 186, 61, 100, 216, 137, 189, 228, 57, 4, 190, 39, 204, 18, 190, 92, 18, 52, 188, 221, 25, 34, 190, 145, 39, 136, 61, 115, 7, 9, 61, 12, 253, 50, 189, 128, 60, 223, 61, 197, 226, 150, 189, 177, 254, 148, 189, 1, 246, 19, 190, 54, 150, 33, 61, 143, 38, 227, 61, 183, 145, 188, 62, 212, 50, 101, 62, 62, 171, 0, 189, 92, 24, 81, 190, 58, 201, 11, 190, 39, 229, 114, 61, 218, 145, 14, 190, 118, 104, 22, 62, 109, 76, 129, 188, 72, 175, 47, 190, 27, 13, 141, 190, 32, 2, 179, 61, 229, 229, 133, 189, 176, 215, 85, 61, 187, 83, 18, 62, 233, 23, 150, 60, 10, 54, 3, 62, 17, 46, 73, 190, 78, 113, 23, 189, 76, 59, 211, 187, 249, 120, 6, 189, 198, 9, 53, 189, 44, 174, 214, 61, 187, 28, 39, 60, 81, 194, 138, 60, 79, 88, 160, 61, 69, 9, 66, 62, 149, 119, 27, 190, 123, 148, 163, 189, 71, 225, 234, 189, 156, 170, 57, 61, 178, 94, 254, 189, 213, 68, 147, 62, 14, 232, 198, 188, 222, 163, 94, 62, 210, 190, 154, 189, 59, 178, 225, 188, 85, 27, 42, 62, 65, 55, 220, 189, 65, 145, 139, 61, 73, 234, 126, 61, 136, 33, 88, 60, 128, 200, 1, 60, 47, 90, 163, 61, 233, 155, 167, 61, 89, 235, 78, 61, 185, 36, 4, 62, 110, 176, 216, 189, 206, 115, 125, 189, 164, 62, 194, 188, 154, 142, 31, 62, 193, 81, 10, 62, 39, 117, 228, 61, 95, 87, 48, 61, 162, 169, 42, 60, 43, 11, 77, 61, 160, 164, 88, 190, 245, 220, 173, 60, 195, 62, 28, 62, 132, 8, 2, 60, 70, 3, 228, 61, 144, 213, 106, 190, 27, 48, 110, 190, 5, 31, 18, 61, 209, 23, 209, 61, 55, 41, 47, 62, 6, 199, 218, 61, 88, 210, 92, 190, 228, 103, 174, 189, 99, 116, 187, 189, 61, 3, 121, 61, 101, 50, 184, 61, 214, 91, 94, 62, 90, 175, 188, 189, 188, 33, 166, 61, 48, 47, 201, 189, 214, 189, 30, 190, 194, 5, 160, 189, 165, 40, 195, 61, 249, 43, 121, 189, 46, 17, 1, 62, 207, 28, 214, 61, 17, 240, 83, 189, 34, 249, 182, 60, 68, 0, 221, 189, 174, 31, 21, 61, 104, 204, 174, 189, 179, 80, 125, 61, 88, 79, 241, 61, 215, 36, 122, 61, 123, 13, 131, 189, 74, 148, 115, 60, 184, 160, 76, 190, 184, 138, 212, 189, 80, 230, 103, 190, 16, 243, 16, 62, 25, 192, 40, 190, 69, 93, 97, 61, 141, 66, 227, 189, 222, 77, 183, 189, 213, 155, 71, 61, 157, 165, 77, 59, 47, 14, 250, 189, 216, 196, 202, 189, 19, 47, 46, 189, 255, 213, 48, 62, 190, 171, 187, 61, 79, 139, 224, 189, 149, 142, 5, 190, 34, 220, 50, 190, 119, 218, 182, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 147, 234, 189, 11, 208, 106, 62, 166, 24, 10, 62, 130, 19, 74, 61, 140, 3, 200, 61, 231, 34, 186, 61, 211, 63, 200, 189, 249, 103, 54, 190, 18, 84, 45, 190, 136, 50, 10, 62, 9, 60, 218, 61, 209, 143, 100, 61, 37, 175, 97, 61, 29, 76, 35, 62, 15, 113, 129, 62, 23, 158, 17, 62, 27, 167, 127, 62, 143, 96, 103, 62, 223, 121, 127, 188, 108, 95, 132, 62, 204, 203, 99, 62, 174, 233, 233, 189, 94, 90, 87, 61, 113, 156, 177, 188, 70, 91, 90, 60, 196, 116, 10, 62, 185, 202, 239, 189, 53, 77, 118, 62, 148, 252, 211, 61, 143, 91, 108, 189, 45, 242, 97, 62, 146, 91, 36, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 79, 135, 59, 235, 11, 182, 189, 149, 9, 3, 190, 239, 38, 56, 190, 218, 65, 9, 62, 255, 74, 3, 190, 126, 98, 171, 188, 200, 252, 160, 61, 172, 125, 180, 189, 236, 177, 104, 190, 28, 6, 152, 61, 255, 39, 166, 190, 110, 143, 134, 62, 22, 63, 34, 190, 84, 157, 154, 187, 202, 194, 255, 190, 247, 127, 153, 62, 8, 35, 113, 62, 13, 153, 138, 59, 91, 130, 61, 190, 182, 184, 151, 61, 9, 248, 215, 189, 63, 134, 66, 61, 27, 68, 148, 189, 47, 196, 196, 189, 126, 235, 23, 191, 3, 89, 129, 189, 14, 223, 154, 62, 157, 104, 166, 62, 151, 154, 56, 62, 135, 90, 70, 62, 58, 0, 41, 60, 178, 103, 8, 62, 95, 246, 73, 190, 68, 194, 11, 190, 68, 21, 97, 190, 94, 237, 33, 190, 216, 139, 215, 60, 213, 143, 205, 61, 90, 66, 12, 62, 32, 236, 21, 190, 144, 173, 75, 59, 70, 48, 172, 189, 103, 210, 46, 186, 144, 55, 218, 60, 157, 117, 28, 190, 130, 198, 58, 190, 246, 248, 73, 61, 73, 177, 87, 190, 50, 252, 213, 60, 81, 207, 9, 62, 48, 221, 134, 190, 137, 176, 160, 189, 78, 151, 46, 188, 105, 248, 69, 187, 95, 159, 149, 61, 195, 0, 40, 190, 243, 149, 10, 188, 19, 63, 101, 60, 190, 134, 34, 190, 167, 4, 245, 61, 107, 185, 1, 62, 187, 1, 192, 189, 197, 29, 169, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {216, 153, 74, 189, 229, 179, 146, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {170, 93, 120, 62, 99, 246, 247, 191, 194, 185, 29, 60};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {3, 66, 112, 64, 205, 188, 129, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0045/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}