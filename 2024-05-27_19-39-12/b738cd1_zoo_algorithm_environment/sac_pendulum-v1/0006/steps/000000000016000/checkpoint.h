// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 231, 89, 63, 129, 116, 137, 191, 248, 8, 189, 190, 133, 62, 145, 60, 59, 110, 95, 191, 101, 70, 170, 62, 178, 131, 110, 190, 102, 197, 123, 63, 244, 216, 96, 61, 156, 243, 68, 191, 61, 85, 5, 63, 1, 123, 160, 62, 18, 2, 30, 191, 114, 252, 59, 190, 224, 76, 51, 190, 46, 67, 213, 62, 177, 236, 141, 191, 154, 222, 33, 62, 174, 13, 160, 190, 205, 3, 161, 61, 158, 11, 153, 61, 4, 71, 139, 62, 223, 72, 186, 190, 138, 117, 7, 61, 111, 13, 214, 190, 148, 95, 126, 191, 143, 200, 18, 190, 176, 170, 126, 62, 249, 111, 160, 63, 234, 199, 83, 190, 234, 80, 63, 63, 159, 171, 147, 191, 136, 95, 122, 190, 138, 86, 128, 62, 18, 130, 22, 191, 177, 54, 186, 190, 246, 128, 60, 191, 198, 130, 194, 190, 229, 19, 252, 60, 211, 114, 14, 63, 184, 252, 76, 190, 85, 46, 220, 190, 65, 136, 149, 190, 135, 37, 123, 63, 209, 170, 86, 62, 89, 10, 202, 61, 191, 90, 17, 62, 78, 111, 207, 190, 251, 57, 52, 190, 227, 197, 74, 63, 7, 76, 44, 190, 84, 40, 198, 62, 146, 178, 145, 63, 15, 74, 131, 62, 152, 20, 217, 60, 23, 65, 77, 62, 126, 190, 144, 190, 169, 147, 42, 189, 158, 95, 187, 191, 117, 160, 133, 190, 186, 53, 64, 63, 49, 103, 250, 189, 133, 172, 92, 62, 29, 75, 80, 63, 173, 84, 238, 190, 158, 210, 246, 190, 208, 112, 218, 190, 71, 217, 36, 62, 171, 202, 176, 190, 234, 45, 128, 62, 196, 92, 106, 62, 115, 242, 17, 63, 87, 26, 35, 63, 192, 78, 185, 63, 165, 41, 111, 62, 182, 160, 30, 191, 164, 252, 142, 191, 209, 173, 34, 62, 50, 26, 0, 191, 195, 82, 216, 191, 181, 30, 170, 190, 181, 150, 201, 61, 87, 53, 203, 62, 191, 250, 210, 190, 240, 12, 9, 191, 103, 103, 169, 63, 113, 169, 26, 63, 252, 30, 89, 191, 142, 108, 180, 60, 181, 155, 28, 63, 197, 147, 11, 63, 198, 10, 157, 61, 207, 235, 253, 62, 128, 193, 84, 63, 153, 217, 79, 63, 126, 229, 166, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {146, 88, 23, 191, 41, 207, 37, 62, 10, 3, 152, 62, 63, 43, 122, 61, 150, 149, 216, 62, 61, 122, 229, 62, 68, 127, 209, 62, 210, 245, 132, 62, 224, 178, 245, 62, 27, 83, 185, 189, 78, 176, 253, 61, 107, 183, 217, 189, 143, 61, 42, 63, 67, 144, 131, 189, 152, 145, 184, 189, 207, 17, 243, 190, 213, 226, 201, 62, 139, 198, 103, 188, 151, 119, 9, 63, 89, 112, 154, 190, 162, 118, 249, 61, 227, 122, 63, 191, 242, 156, 23, 63, 61, 0, 107, 190, 155, 232, 145, 62, 214, 148, 202, 62, 67, 241, 228, 190, 62, 46, 35, 62, 27, 132, 251, 189, 92, 199, 59, 190, 161, 51, 23, 188, 206, 185, 21, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 153, 36, 191, 164, 243, 156, 190, 173, 156, 187, 61, 37, 184, 178, 190, 14, 36, 153, 61, 228, 239, 139, 189, 229, 201, 36, 62, 248, 249, 182, 61, 229, 153, 186, 190, 9, 7, 92, 190, 3, 38, 197, 61, 115, 0, 136, 190, 144, 66, 5, 62, 242, 157, 203, 60, 152, 129, 152, 190, 101, 205, 84, 188, 51, 64, 60, 62, 245, 152, 216, 62, 181, 180, 61, 62, 65, 135, 13, 62, 85, 229, 7, 61, 249, 242, 65, 190, 90, 51, 37, 61, 76, 185, 220, 61, 74, 248, 63, 62, 7, 139, 171, 61, 86, 8, 80, 60, 73, 252, 6, 62, 136, 236, 110, 190, 146, 201, 184, 190, 13, 240, 181, 61, 173, 198, 213, 62, 176, 23, 128, 189, 65, 223, 5, 189, 250, 242, 173, 189, 172, 214, 94, 190, 132, 228, 45, 62, 132, 56, 173, 62, 114, 52, 47, 62, 225, 223, 164, 62, 97, 85, 85, 62, 130, 129, 47, 191, 235, 145, 115, 62, 99, 78, 96, 190, 54, 67, 69, 60, 44, 92, 240, 61, 103, 93, 13, 58, 36, 23, 22, 62, 255, 255, 197, 60, 189, 246, 166, 190, 157, 145, 216, 61, 1, 223, 112, 190, 66, 246, 56, 62, 202, 139, 12, 60, 98, 207, 134, 61, 242, 189, 167, 189, 238, 131, 10, 62, 129, 158, 123, 189, 232, 27, 186, 61, 216, 44, 240, 189, 158, 15, 175, 190, 14, 44, 182, 189, 2, 246, 74, 189, 200, 95, 51, 190, 100, 198, 133, 188, 51, 23, 68, 62, 208, 110, 53, 191, 24, 170, 13, 60, 13, 248, 246, 188, 155, 1, 48, 63, 75, 118, 16, 62, 56, 202, 145, 62, 50, 22, 185, 62, 185, 80, 121, 190, 90, 236, 24, 189, 47, 158, 206, 61, 227, 174, 81, 62, 118, 198, 150, 189, 176, 1, 65, 190, 65, 62, 59, 191, 180, 31, 24, 191, 38, 194, 252, 190, 125, 123, 140, 190, 180, 69, 90, 61, 21, 0, 140, 60, 242, 207, 55, 189, 233, 149, 140, 61, 148, 194, 18, 191, 46, 98, 236, 190, 186, 21, 94, 62, 83, 107, 15, 190, 112, 49, 144, 190, 166, 83, 38, 191, 151, 86, 52, 191, 87, 238, 117, 190, 93, 140, 194, 189, 163, 88, 162, 61, 105, 33, 144, 61, 190, 33, 105, 190, 129, 244, 175, 189, 4, 78, 85, 189, 114, 87, 186, 62, 135, 191, 84, 189, 100, 217, 138, 62, 235, 61, 112, 62, 180, 108, 16, 191, 35, 136, 104, 62, 18, 212, 146, 188, 92, 61, 89, 189, 131, 4, 77, 189, 101, 23, 19, 190, 27, 188, 236, 61, 27, 231, 153, 60, 57, 229, 246, 190, 148, 70, 74, 62, 5, 245, 163, 191, 155, 218, 147, 60, 127, 12, 134, 190, 244, 31, 101, 190, 237, 246, 137, 190, 153, 203, 126, 190, 169, 52, 93, 190, 49, 97, 122, 191, 243, 189, 24, 62, 238, 4, 44, 60, 106, 47, 85, 61, 3, 141, 71, 189, 41, 255, 32, 191, 104, 14, 201, 189, 48, 73, 15, 188, 74, 85, 207, 62, 7, 158, 179, 188, 118, 208, 1, 190, 153, 45, 250, 61, 109, 63, 85, 62, 139, 121, 40, 62, 237, 147, 233, 60, 46, 5, 99, 188, 98, 174, 69, 62, 81, 1, 123, 188, 144, 154, 195, 61, 46, 101, 78, 62, 165, 66, 166, 62, 140, 81, 120, 189, 172, 95, 137, 62, 111, 245, 173, 62, 51, 131, 117, 62, 16, 228, 93, 190, 188, 90, 134, 189, 186, 145, 124, 189, 180, 7, 220, 61, 252, 248, 239, 187, 10, 88, 179, 62, 252, 8, 169, 61, 125, 127, 10, 61, 61, 215, 240, 189, 148, 76, 35, 189, 10, 104, 98, 61, 136, 7, 13, 190, 218, 220, 166, 61, 24, 243, 17, 191, 7, 123, 11, 62, 87, 159, 19, 62, 114, 246, 3, 61, 130, 26, 12, 62, 121, 239, 92, 62, 95, 161, 153, 62, 182, 82, 180, 61, 139, 245, 119, 61, 44, 76, 136, 59, 231, 232, 147, 189, 161, 93, 130, 190, 221, 9, 132, 62, 243, 131, 243, 189, 140, 175, 138, 190, 87, 69, 103, 189, 230, 17, 42, 61, 222, 58, 80, 61, 253, 255, 71, 62, 97, 237, 34, 190, 164, 141, 140, 61, 174, 40, 116, 59, 49, 22, 70, 190, 144, 33, 16, 190, 154, 113, 126, 61, 189, 145, 250, 61, 122, 217, 21, 188, 212, 238, 17, 62, 158, 53, 115, 190, 17, 204, 165, 189, 84, 123, 122, 62, 21, 93, 112, 61, 188, 19, 108, 191, 82, 123, 43, 61, 18, 98, 141, 191, 62, 10, 42, 190, 178, 226, 152, 60, 181, 158, 86, 62, 44, 124, 157, 189, 122, 213, 208, 61, 166, 28, 141, 62, 171, 95, 34, 62, 23, 52, 151, 62, 242, 59, 57, 191, 242, 143, 47, 62, 116, 30, 26, 191, 176, 12, 49, 190, 195, 137, 189, 190, 42, 167, 72, 191, 247, 111, 24, 191, 72, 143, 120, 190, 223, 83, 78, 188, 79, 241, 97, 61, 187, 4, 53, 191, 17, 31, 107, 190, 103, 108, 189, 188, 166, 68, 13, 189, 173, 39, 128, 62, 126, 85, 249, 61, 40, 45, 25, 191, 155, 231, 14, 191, 66, 213, 165, 189, 97, 64, 68, 189, 44, 6, 140, 190, 202, 187, 38, 191, 172, 232, 203, 190, 35, 213, 66, 62, 155, 146, 98, 190, 126, 253, 148, 62, 215, 13, 145, 190, 75, 233, 130, 62, 206, 63, 220, 61, 222, 220, 45, 62, 244, 42, 93, 62, 184, 71, 189, 189, 80, 123, 89, 190, 143, 67, 202, 62, 43, 66, 178, 190, 189, 231, 192, 190, 222, 42, 124, 189, 200, 115, 93, 62, 241, 202, 131, 62, 4, 6, 252, 189, 117, 25, 27, 62, 127, 95, 144, 62, 116, 217, 207, 189, 190, 144, 96, 62, 110, 184, 181, 62, 196, 63, 83, 62, 94, 78, 170, 189, 130, 155, 79, 62, 196, 41, 41, 61, 166, 72, 3, 191, 153, 35, 137, 191, 110, 175, 44, 62, 204, 218, 192, 62, 149, 197, 70, 190, 101, 219, 25, 190, 148, 60, 13, 61, 70, 95, 97, 188, 84, 2, 195, 61, 133, 122, 91, 61, 136, 206, 39, 188, 142, 176, 40, 61, 140, 239, 135, 189, 126, 142, 242, 60, 19, 70, 4, 62, 154, 122, 131, 61, 13, 216, 16, 62, 111, 253, 17, 61, 101, 191, 167, 60, 225, 173, 160, 61, 178, 129, 251, 189, 27, 51, 30, 190, 83, 14, 62, 61, 99, 158, 204, 60, 206, 7, 21, 189, 74, 135, 125, 188, 113, 194, 149, 189, 198, 148, 130, 187, 94, 222, 16, 190, 233, 234, 53, 190, 143, 207, 36, 190, 57, 58, 173, 189, 23, 28, 104, 189, 111, 32, 217, 189, 96, 25, 42, 61, 34, 156, 7, 190, 58, 199, 42, 191, 78, 189, 16, 62, 211, 23, 65, 62, 7, 120, 136, 190, 177, 83, 104, 62, 114, 249, 89, 189, 46, 63, 81, 61, 39, 239, 96, 62, 173, 129, 106, 62, 124, 202, 22, 62, 96, 141, 92, 189, 135, 21, 183, 189, 49, 178, 93, 62, 125, 185, 193, 189, 66, 151, 107, 191, 158, 144, 128, 190, 149, 157, 47, 62, 152, 122, 134, 62, 13, 201, 105, 61, 65, 76, 8, 63, 52, 154, 90, 62, 8, 32, 136, 190, 177, 151, 7, 62, 3, 26, 15, 60, 27, 120, 202, 61, 67, 29, 192, 62, 88, 28, 195, 62, 29, 78, 48, 62, 71, 227, 112, 190, 181, 25, 81, 188, 246, 59, 82, 62, 45, 31, 7, 63, 244, 209, 236, 62, 179, 45, 136, 61, 132, 177, 136, 190, 44, 42, 52, 62, 23, 253, 149, 190, 157, 42, 39, 62, 43, 113, 24, 190, 202, 252, 207, 61, 42, 135, 154, 62, 173, 251, 245, 190, 118, 18, 86, 62, 249, 174, 245, 61, 240, 118, 0, 61, 72, 206, 30, 190, 12, 195, 173, 62, 57, 47, 42, 190, 141, 144, 56, 190, 64, 174, 126, 190, 221, 178, 144, 188, 252, 140, 137, 191, 196, 72, 57, 61, 61, 113, 254, 61, 193, 3, 196, 60, 194, 205, 90, 190, 121, 111, 1, 190, 65, 122, 218, 190, 30, 236, 110, 191, 244, 40, 196, 189, 203, 122, 109, 62, 197, 136, 174, 187, 93, 137, 24, 190, 61, 86, 255, 190, 198, 222, 139, 61, 231, 48, 193, 61, 84, 180, 146, 189, 55, 181, 177, 189, 32, 24, 37, 61, 213, 168, 99, 60, 112, 67, 28, 62, 74, 149, 158, 60, 205, 179, 139, 189, 57, 49, 17, 61, 145, 4, 169, 60, 195, 3, 61, 61, 216, 88, 189, 60, 179, 226, 251, 189, 253, 230, 210, 189, 73, 66, 10, 190, 89, 178, 113, 189, 169, 252, 65, 61, 190, 47, 5, 62, 239, 225, 73, 61, 168, 219, 44, 189, 3, 40, 96, 189, 197, 77, 27, 189, 6, 139, 7, 190, 32, 24, 250, 189, 197, 92, 36, 190, 25, 152, 10, 188, 182, 86, 53, 189, 53, 235, 19, 190, 144, 96, 66, 61, 157, 130, 15, 189, 199, 56, 118, 188, 89, 200, 97, 190, 24, 244, 156, 61, 154, 196, 78, 191, 190, 160, 89, 190, 113, 182, 133, 190, 29, 213, 58, 62, 104, 231, 30, 190, 105, 127, 141, 61, 212, 141, 71, 62, 134, 241, 99, 191, 47, 184, 142, 62, 171, 32, 213, 190, 136, 66, 137, 62, 178, 99, 111, 190, 130, 202, 33, 62, 78, 123, 52, 190, 243, 202, 9, 191, 193, 191, 234, 190, 246, 191, 180, 190, 81, 138, 210, 189, 88, 204, 134, 61, 32, 229, 132, 189, 91, 121, 206, 190, 194, 124, 164, 190, 231, 218, 46, 190, 21, 87, 191, 62, 45, 111, 172, 186, 79, 29, 173, 190, 55, 155, 156, 190, 205, 161, 15, 61, 132, 42, 38, 61, 219, 120, 71, 191, 26, 196, 79, 190, 7, 161, 0, 191, 126, 75, 28, 190, 52, 31, 56, 62, 195, 250, 6, 62, 97, 112, 69, 191, 162, 40, 65, 62, 15, 156, 156, 189, 23, 131, 159, 62, 61, 15, 86, 190, 118, 20, 74, 189, 84, 164, 113, 190, 204, 221, 16, 63, 238, 85, 43, 187, 255, 51, 39, 62, 121, 197, 227, 189, 233, 208, 168, 189, 248, 169, 38, 62, 88, 177, 215, 61, 177, 123, 63, 62, 239, 233, 215, 189, 239, 119, 183, 190, 213, 57, 100, 62, 225, 255, 8, 191, 125, 227, 232, 62, 85, 36, 126, 189, 175, 190, 137, 62, 82, 194, 29, 62, 181, 234, 198, 190, 72, 149, 31, 191, 135, 162, 201, 190, 205, 7, 58, 190, 116, 22, 88, 191, 59, 23, 10, 191, 87, 139, 198, 61, 107, 149, 210, 61, 92, 36, 196, 62, 107, 234, 202, 190, 144, 39, 197, 61, 78, 226, 176, 61, 207, 126, 7, 61, 164, 21, 84, 61, 3, 154, 143, 190, 100, 63, 129, 190, 113, 121, 148, 62, 248, 211, 247, 189, 25, 27, 54, 190, 216, 175, 79, 190, 135, 146, 6, 62, 9, 87, 134, 62, 124, 148, 83, 62, 41, 221, 124, 62, 175, 2, 97, 62, 164, 164, 193, 190, 82, 146, 152, 62, 34, 93, 139, 59, 67, 20, 148, 62, 36, 151, 238, 189, 62, 47, 2, 62, 247, 158, 25, 189, 57, 157, 218, 190, 61, 163, 67, 191, 6, 209, 211, 61, 166, 52, 41, 62, 69, 218, 162, 187, 215, 140, 212, 60, 215, 75, 77, 189, 158, 133, 217, 190, 152, 53, 162, 61, 214, 75, 170, 60, 203, 84, 146, 61, 32, 98, 245, 61, 135, 196, 155, 190, 100, 31, 198, 62, 138, 81, 35, 62, 66, 115, 100, 61, 2, 219, 16, 190, 32, 168, 177, 189, 78, 227, 125, 191, 101, 105, 115, 189, 96, 34, 82, 62, 206, 85, 19, 190, 12, 46, 135, 187, 73, 43, 203, 189, 245, 111, 114, 62, 246, 182, 74, 61, 164, 50, 6, 62, 23, 56, 187, 189, 191, 122, 222, 189, 68, 78, 51, 62, 205, 141, 180, 61, 186, 80, 8, 189, 182, 168, 115, 191, 117, 150, 134, 62, 187, 141, 119, 62, 188, 244, 66, 189, 164, 30, 189, 60, 196, 255, 96, 62, 29, 26, 149, 62, 233, 78, 9, 62, 175, 204, 20, 190, 158, 247, 201, 61, 112, 109, 129, 62, 92, 180, 65, 61, 242, 146, 101, 62, 228, 70, 25, 191, 13, 195, 219, 62, 97, 152, 151, 187, 1, 127, 108, 62, 11, 134, 19, 61, 14, 65, 98, 63, 24, 58, 204, 190, 8, 104, 204, 189, 16, 146, 118, 190, 120, 190, 210, 190, 167, 215, 80, 191, 116, 216, 10, 188, 75, 118, 29, 63, 173, 96, 49, 190, 87, 98, 30, 190, 77, 83, 91, 189, 48, 13, 240, 190, 140, 148, 162, 191, 71, 157, 40, 191, 198, 15, 138, 62, 120, 228, 55, 189, 170, 135, 242, 189, 174, 56, 29, 191, 139, 71, 90, 191, 179, 126, 224, 190, 46, 250, 83, 62, 113, 173, 246, 190, 172, 168, 242, 62, 134, 125, 158, 60, 98, 139, 182, 62, 23, 243, 148, 189, 188, 217, 198, 62, 229, 194, 34, 62, 174, 221, 119, 191, 84, 43, 34, 190, 205, 44, 148, 62, 82, 199, 253, 190, 117, 156, 176, 61, 74, 53, 178, 190, 242, 228, 106, 60, 242, 244, 194, 62, 64, 160, 28, 189, 243, 138, 151, 62, 151, 150, 207, 189, 168, 146, 1, 191, 48, 229, 109, 61, 202, 14, 94, 61, 171, 173, 184, 62, 125, 153, 151, 62, 236, 17, 17, 63, 143, 6, 39, 62, 121, 28, 229, 189, 163, 15, 240, 190, 52, 139, 196, 61, 202, 49, 174, 61, 67, 155, 239, 62, 119, 92, 65, 62, 59, 124, 38, 62, 175, 223, 195, 62, 253, 93, 203, 189, 204, 131, 212, 61, 226, 181, 14, 62, 26, 20, 164, 61, 245, 248, 182, 188, 52, 219, 154, 189, 226, 13, 207, 62, 217, 173, 51, 62, 209, 157, 109, 190, 19, 228, 47, 61, 33, 2, 39, 63, 175, 237, 165, 62, 142, 202, 2, 190, 87, 218, 181, 190, 100, 60, 4, 190, 202, 112, 29, 191, 71, 102, 220, 61, 194, 60, 95, 62, 71, 11, 77, 189, 6, 73, 133, 190, 183, 227, 126, 190, 206, 71, 236, 190, 152, 77, 247, 190, 152, 78, 143, 190, 247, 73, 176, 62, 95, 102, 51, 62, 246, 153, 83, 190, 109, 170, 25, 190, 214, 68, 138, 60, 182, 138, 226, 61, 131, 3, 22, 62, 175, 59, 10, 62, 207, 242, 32, 190, 143, 237, 150, 61, 127, 51, 84, 189, 97, 34, 144, 61, 15, 47, 29, 190, 230, 191, 222, 188, 113, 65, 24, 190, 42, 100, 142, 189, 169, 150, 91, 189, 32, 187, 133, 189, 197, 196, 38, 189, 199, 146, 48, 190, 29, 182, 17, 189, 195, 80, 252, 188, 54, 46, 218, 61, 15, 5, 232, 61, 187, 198, 49, 190, 13, 108, 165, 188, 167, 217, 207, 60, 152, 45, 5, 61, 247, 211, 9, 190, 188, 163, 10, 190, 109, 239, 10, 189, 136, 208, 36, 190, 156, 43, 195, 189, 132, 221, 32, 61, 184, 153, 4, 190, 202, 203, 39, 62, 246, 15, 171, 60, 54, 108, 247, 189, 253, 208, 228, 188, 110, 122, 145, 61, 12, 177, 156, 189, 46, 20, 184, 188, 107, 164, 138, 189, 123, 211, 30, 189, 158, 109, 220, 189, 132, 115, 50, 190, 9, 222, 202, 189, 14, 241, 49, 61, 23, 49, 97, 61, 37, 171, 41, 190, 234, 111, 31, 62, 208, 183, 21, 190, 44, 232, 13, 190, 41, 87, 162, 61, 48, 179, 132, 61, 87, 28, 130, 61, 97, 25, 229, 60, 188, 100, 31, 62, 61, 165, 31, 190, 75, 90, 185, 189, 78, 54, 242, 189, 179, 49, 65, 189, 36, 195, 122, 189, 68, 220, 215, 189, 181, 70, 41, 190, 65, 111, 250, 189, 160, 162, 105, 59, 47, 114, 42, 62, 146, 9, 233, 190, 68, 118, 103, 189, 159, 42, 156, 189, 147, 213, 206, 62, 36, 120, 80, 62, 250, 143, 150, 190, 85, 21, 195, 62, 121, 150, 154, 61, 76, 199, 190, 189, 44, 192, 22, 188, 173, 108, 140, 190, 98, 0, 139, 190, 116, 219, 140, 62, 19, 86, 253, 189, 218, 173, 93, 188, 245, 46, 142, 189, 156, 230, 35, 62, 243, 23, 168, 61, 129, 135, 66, 62, 204, 38, 85, 190, 87, 216, 234, 190, 182, 181, 180, 190, 131, 193, 104, 62, 154, 186, 220, 189, 126, 221, 173, 61, 216, 127, 230, 61, 82, 155, 138, 190, 46, 1, 208, 61, 160, 61, 130, 190, 12, 43, 87, 191, 201, 11, 211, 190, 251, 113, 19, 191, 205, 223, 168, 59, 27, 29, 94, 187, 127, 123, 35, 189, 231, 179, 249, 189, 231, 80, 94, 186, 221, 219, 227, 189, 81, 57, 45, 60, 198, 129, 16, 190, 7, 143, 44, 190, 48, 152, 195, 61, 189, 78, 180, 60, 139, 136, 222, 61, 226, 85, 1, 62, 187, 141, 116, 61, 139, 80, 175, 61, 127, 18, 242, 61, 130, 71, 36, 189, 56, 31, 19, 62, 77, 63, 54, 189, 46, 181, 54, 189, 66, 63, 42, 190, 121, 96, 23, 190, 131, 234, 16, 190, 112, 27, 42, 190, 124, 58, 224, 60, 250, 48, 127, 61, 5, 141, 216, 189, 47, 188, 50, 190, 139, 253, 37, 190, 79, 146, 138, 61, 252, 92, 41, 62, 82, 234, 11, 62, 175, 109, 19, 190, 52, 141, 17, 62, 178, 182, 17, 191, 167, 104, 71, 59, 252, 249, 8, 190, 233, 90, 206, 60, 51, 89, 100, 61, 159, 41, 106, 60, 112, 247, 138, 62, 153, 50, 151, 61, 81, 149, 183, 62, 163, 222, 185, 190, 105, 255, 132, 62, 84, 136, 169, 190, 245, 95, 44, 63, 191, 56, 225, 190, 120, 132, 28, 191, 126, 54, 12, 191, 145, 241, 87, 190, 84, 195, 222, 190, 239, 255, 120, 190, 68, 232, 78, 191, 0, 95, 178, 190, 157, 46, 117, 189, 54, 217, 83, 190, 212, 164, 163, 62, 11, 240, 37, 190, 186, 126, 206, 190, 230, 220, 182, 190, 156, 227, 39, 61, 167, 73, 188, 61, 82, 5, 122, 191, 250, 98, 152, 60, 116, 189, 133, 62, 91, 48, 181, 190, 36, 248, 245, 190, 214, 107, 158, 61, 152, 223, 195, 61, 239, 192, 34, 60, 6, 34, 120, 62, 219, 151, 127, 189, 186, 255, 205, 62, 136, 93, 20, 62, 94, 43, 176, 61, 229, 243, 141, 190, 28, 51, 136, 62, 55, 184, 145, 190, 245, 204, 166, 61, 20, 47, 252, 189, 18, 218, 35, 191, 210, 240, 228, 61, 197, 226, 52, 190, 136, 145, 188, 62, 94, 38, 34, 62, 135, 118, 132, 62, 170, 94, 169, 61, 26, 160, 207, 190, 120, 55, 73, 62, 221, 223, 50, 188, 74, 242, 39, 62, 123, 49, 22, 191, 43, 141, 168, 189, 183, 90, 75, 61, 149, 9, 25, 191, 48, 249, 251, 62, 69, 243, 26, 62, 161, 236, 252, 190, 223, 233, 63, 62, 200, 170, 157, 190, 234, 227, 139, 62, 79, 242, 13, 62, 7, 108, 119, 62, 213, 175, 130, 62, 141, 63, 218, 190, 246, 91, 41, 62, 180, 142, 153, 61, 107, 9, 49, 61, 54, 169, 212, 189, 85, 115, 77, 189, 75, 219, 75, 190, 61, 186, 32, 189, 214, 52, 144, 190, 64, 85, 224, 60, 139, 41, 164, 191, 90, 240, 4, 62, 41, 196, 32, 189, 66, 147, 19, 189, 112, 176, 31, 191, 236, 207, 105, 190, 167, 85, 37, 60, 63, 231, 130, 191, 247, 181, 39, 190, 59, 124, 209, 62, 74, 209, 160, 189, 46, 53, 240, 190, 154, 239, 196, 190, 25, 99, 185, 190, 153, 152, 47, 62, 100, 24, 111, 62, 7, 142, 91, 62, 12, 172, 105, 61, 105, 143, 124, 62, 135, 100, 49, 61, 232, 112, 72, 62, 130, 11, 158, 59, 162, 115, 147, 62, 72, 6, 208, 189, 152, 140, 227, 189, 240, 235, 136, 62, 186, 79, 8, 61, 192, 128, 52, 191, 64, 204, 90, 189, 79, 170, 19, 62, 171, 90, 101, 190, 194, 247, 36, 188, 36, 217, 143, 190, 102, 124, 96, 62, 164, 70, 207, 190, 138, 172, 218, 189, 228, 129, 4, 62, 82, 49, 145, 61, 79, 98, 227, 62, 27, 35, 197, 190, 153, 134, 132, 61, 19, 160, 71, 189, 210, 208, 184, 189, 110, 0, 26, 62, 199, 73, 247, 189, 146, 80, 157, 191, 12, 175, 187, 188, 66, 5, 197, 187, 206, 157, 143, 61, 188, 185, 128, 188, 246, 190, 23, 62, 218, 161, 148, 189, 129, 190, 177, 62, 18, 46, 23, 191, 27, 67, 27, 63, 85, 195, 194, 190, 198, 211, 202, 190, 13, 167, 78, 190, 75, 149, 40, 62, 45, 233, 95, 191, 201, 109, 127, 62, 102, 76, 161, 188, 84, 167, 83, 62, 112, 5, 50, 61, 118, 223, 3, 62, 10, 200, 152, 61, 197, 18, 5, 191, 252, 67, 205, 61, 11, 24, 66, 61, 134, 11, 231, 61, 98, 28, 137, 62, 98, 208, 117, 61, 160, 11, 238, 61, 174, 107, 209, 189, 128, 95, 217, 189, 61, 112, 114, 62, 210, 114, 165, 62, 213, 102, 247, 189, 170, 236, 198, 190, 17, 213, 90, 188, 214, 251, 10, 191, 155, 54, 76, 60, 89, 126, 220, 60, 114, 159, 6, 190, 139, 76, 92, 62, 67, 12, 11, 190, 75, 164, 81, 191, 179, 6, 142, 61, 7, 21, 48, 190, 210, 218, 122, 190, 157, 9, 134, 61, 91, 34, 1, 61, 188, 137, 65, 190, 12, 161, 140, 189, 147, 115, 46, 62, 228, 24, 97, 61, 167, 174, 10, 189, 131, 71, 172, 62, 51, 239, 191, 190, 255, 126, 153, 61, 139, 118, 119, 190, 0, 182, 55, 62, 73, 165, 128, 190, 162, 177, 201, 61, 56, 189, 79, 190, 222, 185, 51, 191, 119, 199, 195, 190, 147, 178, 25, 62, 234, 80, 78, 61, 55, 192, 226, 190, 66, 102, 216, 190, 107, 238, 39, 61, 86, 13, 189, 190, 214, 19, 65, 188, 108, 247, 173, 190, 108, 162, 13, 62, 142, 102, 209, 61, 197, 51, 93, 62, 202, 176, 118, 189, 244, 5, 160, 190, 51, 178, 245, 189, 132, 69, 253, 61, 51, 68, 68, 189, 115, 234, 190, 189, 199, 98, 25, 190, 144, 21, 130, 62, 30, 65, 242, 62, 0, 61, 35, 62, 67, 127, 150, 61, 141, 251, 29, 62, 209, 206, 36, 190, 206, 55, 75, 62, 118, 125, 102, 190, 54, 54, 207, 62, 36, 17, 129, 61, 232, 129, 199, 62, 27, 80, 216, 187, 138, 227, 164, 190, 126, 89, 32, 191, 115, 146, 155, 189, 92, 157, 18, 63, 66, 43, 234, 62, 100, 208, 178, 188, 82, 165, 30, 189, 62, 46, 46, 62, 218, 175, 183, 190, 195, 155, 178, 62, 47, 247, 44, 62, 198, 174, 24, 62, 54, 108, 175, 62, 246, 240, 143, 190, 69, 31, 169, 62, 148, 223, 179, 189, 243, 171, 35, 62, 205, 146, 74, 61, 16, 198, 236, 62, 250, 219, 163, 62, 93, 49, 151, 61, 50, 249, 121, 190, 165, 4, 98, 190, 111, 186, 186, 191, 191, 255, 133, 61, 188, 34, 178, 61, 209, 65, 254, 189, 109, 50, 54, 190, 164, 36, 230, 189, 85, 6, 114, 190, 234, 64, 207, 191, 131, 161, 210, 190, 198, 33, 27, 61, 202, 154, 151, 189, 120, 2, 203, 188, 59, 74, 121, 191, 251, 109, 61, 62, 114, 207, 15, 62, 143, 71, 8, 61, 238, 201, 4, 58, 3, 167, 176, 189, 218, 218, 49, 62, 228, 202, 2, 62, 195, 154, 18, 61, 225, 95, 158, 62, 77, 208, 34, 190, 133, 26, 206, 62, 34, 63, 187, 61, 29, 90, 146, 61, 75, 103, 43, 61, 213, 236, 131, 62, 205, 82, 100, 62, 222, 60, 120, 62, 40, 142, 177, 190, 115, 85, 50, 189, 32, 64, 180, 191, 9, 255, 1, 190, 69, 203, 149, 61, 63, 242, 137, 61, 21, 204, 70, 190, 56, 146, 28, 61, 153, 60, 128, 190, 115, 57, 151, 191, 247, 102, 191, 59, 210, 55, 201, 186, 12, 4, 119, 61, 46, 229, 111, 61, 7, 95, 7, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 130, 149, 186, 231, 139, 230, 61, 192, 47, 12, 62, 241, 165, 105, 62, 212, 107, 209, 62, 212, 104, 159, 62, 134, 156, 8, 188, 20, 138, 72, 62, 0, 234, 63, 190, 248, 43, 167, 189, 82, 130, 145, 61, 10, 208, 192, 189, 198, 0, 62, 190, 64, 137, 128, 60, 69, 101, 83, 62, 79, 175, 163, 189, 129, 20, 101, 62, 215, 11, 79, 62, 192, 26, 27, 189, 182, 91, 78, 61, 182, 166, 11, 62, 58, 196, 6, 61, 27, 65, 52, 190, 92, 231, 59, 62, 74, 152, 13, 189, 137, 72, 40, 61, 30, 101, 187, 61, 133, 193, 6, 190, 55, 189, 75, 190, 71, 39, 131, 189, 128, 224, 134, 62, 155, 107, 136, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 238, 57, 190, 255, 174, 207, 61, 20, 199, 92, 191, 140, 46, 235, 62, 1, 192, 68, 61, 61, 154, 179, 189, 167, 103, 104, 63, 127, 212, 228, 190, 25, 180, 30, 62, 45, 149, 10, 191, 154, 139, 182, 62, 115, 76, 109, 61, 96, 47, 10, 63, 5, 203, 15, 191, 194, 253, 45, 191, 236, 220, 138, 61, 134, 225, 115, 63, 208, 217, 147, 63, 254, 199, 160, 62, 38, 187, 197, 61, 213, 78, 221, 189, 254, 184, 21, 191, 190, 113, 51, 189, 93, 127, 148, 63, 193, 174, 201, 62, 80, 90, 75, 63, 249, 30, 26, 190, 243, 13, 250, 190, 97, 229, 122, 61, 109, 7, 26, 191, 176, 140, 45, 63, 170, 163, 208, 62, 122, 175, 3, 191, 159, 96, 183, 190, 36, 66, 116, 62, 69, 213, 0, 62, 87, 106, 179, 190, 71, 33, 199, 190, 52, 244, 17, 189, 179, 42, 246, 189, 184, 247, 241, 189, 102, 38, 173, 188, 230, 36, 35, 63, 45, 4, 47, 190, 42, 32, 46, 62, 223, 94, 47, 62, 50, 93, 78, 61, 151, 8, 71, 190, 85, 73, 113, 62, 78, 250, 170, 62, 86, 84, 201, 62, 232, 232, 230, 189, 223, 45, 20, 62, 174, 247, 207, 61, 215, 138, 172, 186, 219, 235, 210, 62, 79, 15, 122, 61, 91, 242, 151, 63, 55, 59, 154, 190, 220, 236, 200, 62, 119, 61, 171, 190, 194, 117, 153, 187, 123, 187, 52, 62, 164, 45, 138, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 72, 161, 188, 133, 252, 165, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {117, 9, 136, 61, 86, 162, 235, 191, 233, 71, 225, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {176, 99, 93, 192, 58, 72, 221, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0006/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}