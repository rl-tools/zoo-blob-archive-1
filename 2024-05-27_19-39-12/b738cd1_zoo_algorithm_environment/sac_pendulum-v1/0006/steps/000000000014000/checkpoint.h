// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 28, 90, 63, 87, 14, 129, 191, 232, 110, 194, 190, 45, 226, 201, 60, 18, 190, 67, 191, 52, 151, 164, 62, 223, 41, 112, 190, 241, 218, 90, 63, 205, 254, 176, 60, 74, 217, 51, 191, 93, 176, 248, 62, 192, 121, 170, 62, 183, 225, 43, 191, 71, 171, 23, 190, 157, 159, 45, 190, 115, 172, 216, 62, 153, 25, 134, 191, 139, 167, 17, 62, 53, 38, 99, 190, 73, 216, 215, 61, 199, 15, 129, 61, 65, 204, 179, 62, 26, 28, 163, 190, 147, 127, 160, 60, 145, 76, 207, 190, 111, 207, 114, 191, 148, 36, 17, 190, 30, 56, 110, 62, 61, 49, 143, 63, 186, 50, 63, 190, 228, 162, 64, 63, 155, 251, 143, 191, 125, 56, 122, 190, 117, 19, 131, 62, 87, 253, 2, 191, 151, 248, 190, 190, 217, 67, 54, 191, 182, 28, 193, 190, 139, 10, 52, 61, 129, 124, 16, 63, 42, 47, 0, 190, 254, 5, 230, 190, 241, 248, 116, 190, 47, 88, 115, 63, 197, 85, 63, 62, 251, 18, 145, 61, 184, 209, 36, 62, 146, 124, 211, 190, 97, 106, 34, 190, 64, 172, 69, 63, 153, 76, 19, 190, 140, 134, 199, 62, 19, 134, 142, 63, 207, 29, 122, 62, 100, 10, 218, 60, 114, 254, 96, 62, 232, 69, 147, 190, 240, 4, 167, 189, 116, 125, 178, 191, 57, 218, 146, 190, 84, 86, 69, 63, 4, 43, 6, 190, 79, 5, 133, 62, 128, 115, 67, 63, 173, 69, 220, 190, 92, 237, 252, 190, 236, 243, 219, 190, 94, 45, 22, 62, 246, 193, 170, 190, 10, 109, 135, 62, 77, 217, 57, 62, 36, 72, 20, 63, 91, 57, 37, 63, 146, 9, 175, 63, 65, 246, 137, 62, 198, 139, 44, 191, 164, 183, 139, 191, 191, 98, 18, 62, 86, 33, 11, 191, 202, 0, 207, 191, 135, 215, 176, 190, 208, 23, 192, 61, 209, 107, 168, 62, 219, 191, 201, 190, 243, 6, 243, 190, 209, 28, 162, 63, 31, 40, 28, 63, 6, 88, 82, 191, 184, 74, 67, 189, 152, 141, 22, 63, 0, 175, 13, 63, 42, 151, 9, 188, 54, 148, 1, 63, 236, 171, 84, 63, 151, 218, 74, 63, 250, 96, 163, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 102, 22, 191, 25, 172, 43, 62, 157, 97, 150, 62, 74, 6, 200, 61, 50, 191, 190, 62, 137, 201, 233, 62, 58, 130, 235, 62, 119, 126, 182, 62, 37, 221, 248, 62, 89, 87, 217, 189, 240, 65, 10, 62, 21, 9, 204, 189, 139, 8, 34, 63, 109, 99, 89, 189, 217, 215, 253, 189, 214, 188, 237, 190, 190, 120, 209, 62, 165, 110, 66, 188, 193, 140, 9, 63, 65, 201, 129, 190, 7, 117, 30, 62, 135, 235, 72, 191, 2, 95, 22, 63, 25, 234, 88, 190, 184, 110, 147, 62, 111, 88, 183, 62, 74, 196, 221, 190, 113, 94, 27, 62, 230, 7, 197, 189, 230, 123, 52, 190, 141, 218, 66, 59, 233, 72, 21, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 46, 28, 191, 59, 226, 152, 190, 104, 162, 152, 61, 106, 24, 172, 190, 204, 5, 165, 61, 164, 156, 145, 189, 77, 39, 37, 62, 248, 10, 179, 61, 50, 182, 140, 190, 53, 138, 113, 190, 220, 204, 206, 61, 93, 109, 126, 190, 171, 45, 39, 62, 102, 32, 206, 60, 36, 122, 134, 190, 24, 244, 141, 188, 123, 118, 53, 62, 51, 100, 211, 62, 77, 49, 65, 62, 178, 17, 62, 62, 81, 105, 239, 60, 215, 165, 58, 190, 20, 145, 76, 61, 151, 46, 193, 61, 118, 245, 55, 62, 227, 184, 139, 61, 157, 214, 140, 61, 193, 47, 7, 62, 164, 18, 82, 190, 210, 200, 177, 190, 134, 142, 163, 61, 56, 49, 202, 62, 225, 99, 112, 189, 230, 98, 24, 188, 226, 142, 119, 189, 91, 191, 58, 190, 241, 254, 63, 62, 113, 54, 175, 62, 21, 214, 53, 62, 249, 2, 164, 62, 144, 3, 107, 62, 151, 102, 40, 191, 62, 66, 112, 62, 161, 170, 75, 190, 142, 200, 42, 61, 80, 18, 2, 62, 217, 165, 65, 60, 118, 62, 32, 62, 224, 249, 42, 61, 38, 203, 171, 190, 221, 238, 230, 61, 55, 66, 121, 190, 28, 34, 55, 62, 111, 140, 246, 60, 206, 218, 178, 61, 175, 169, 115, 189, 117, 32, 6, 62, 124, 231, 35, 189, 99, 115, 180, 61, 249, 17, 203, 189, 65, 5, 159, 190, 97, 176, 115, 189, 55, 23, 73, 189, 249, 114, 67, 190, 119, 131, 122, 189, 103, 165, 56, 62, 198, 192, 47, 191, 38, 218, 39, 60, 201, 14, 154, 188, 244, 38, 44, 63, 144, 104, 17, 62, 108, 61, 137, 62, 110, 102, 177, 62, 247, 42, 130, 190, 219, 103, 141, 189, 82, 217, 134, 61, 203, 120, 87, 62, 247, 231, 142, 189, 239, 28, 65, 190, 248, 45, 62, 191, 191, 172, 29, 191, 53, 87, 252, 190, 38, 181, 139, 190, 175, 121, 3, 61, 99, 2, 84, 187, 127, 127, 81, 189, 24, 66, 126, 61, 139, 106, 15, 191, 246, 235, 235, 190, 179, 208, 100, 62, 12, 109, 20, 190, 5, 239, 147, 190, 59, 19, 21, 191, 123, 132, 25, 191, 68, 151, 111, 190, 166, 5, 202, 189, 8, 112, 162, 61, 174, 61, 147, 61, 27, 134, 41, 190, 189, 149, 43, 189, 246, 33, 97, 189, 3, 9, 188, 62, 187, 41, 51, 189, 132, 250, 140, 62, 140, 92, 84, 62, 64, 39, 0, 191, 193, 57, 106, 62, 83, 35, 246, 58, 247, 40, 14, 189, 237, 114, 8, 189, 206, 154, 237, 189, 96, 178, 240, 61, 7, 45, 55, 61, 162, 48, 236, 190, 125, 146, 86, 62, 231, 152, 160, 191, 183, 17, 184, 60, 92, 61, 15, 190, 106, 133, 78, 190, 152, 59, 130, 190, 42, 248, 110, 190, 95, 195, 76, 190, 191, 154, 105, 191, 68, 70, 51, 62, 92, 35, 74, 61, 230, 77, 161, 61, 188, 79, 53, 189, 3, 4, 29, 191, 130, 51, 191, 189, 225, 224, 142, 188, 31, 242, 197, 62, 241, 122, 139, 189, 251, 181, 2, 190, 175, 106, 241, 61, 62, 86, 61, 62, 159, 157, 41, 62, 101, 108, 24, 61, 49, 97, 63, 60, 250, 130, 69, 62, 214, 232, 189, 185, 145, 217, 144, 61, 12, 56, 90, 62, 237, 110, 141, 62, 101, 123, 122, 189, 180, 34, 145, 62, 190, 33, 162, 62, 54, 85, 129, 62, 10, 141, 110, 190, 48, 152, 146, 189, 187, 144, 75, 189, 245, 238, 252, 61, 103, 44, 253, 188, 71, 178, 174, 62, 33, 44, 115, 61, 26, 108, 217, 60, 77, 199, 199, 189, 157, 46, 170, 189, 47, 106, 164, 60, 232, 183, 37, 190, 243, 121, 43, 61, 96, 2, 12, 191, 42, 64, 2, 62, 151, 64, 11, 62, 2, 168, 190, 59, 181, 55, 21, 62, 203, 153, 83, 62, 2, 241, 149, 62, 238, 113, 173, 61, 218, 228, 200, 61, 170, 247, 76, 57, 191, 136, 139, 189, 244, 143, 112, 190, 80, 194, 122, 62, 57, 15, 233, 189, 51, 83, 137, 190, 233, 186, 68, 189, 152, 182, 49, 61, 176, 240, 48, 61, 229, 153, 79, 62, 239, 137, 34, 190, 193, 4, 130, 61, 80, 207, 216, 60, 115, 90, 52, 190, 2, 15, 25, 190, 53, 121, 112, 61, 192, 203, 205, 61, 48, 137, 202, 60, 136, 137, 31, 62, 169, 147, 128, 190, 125, 167, 202, 189, 54, 49, 112, 62, 251, 39, 16, 61, 219, 111, 75, 191, 175, 73, 97, 61, 72, 42, 142, 191, 55, 9, 19, 190, 188, 96, 15, 61, 206, 227, 105, 62, 146, 84, 137, 189, 160, 121, 249, 61, 245, 18, 154, 62, 171, 95, 34, 62, 95, 236, 166, 62, 67, 39, 31, 191, 207, 11, 58, 62, 12, 30, 19, 191, 1, 12, 86, 190, 201, 114, 189, 190, 88, 214, 78, 191, 78, 134, 17, 191, 169, 190, 65, 190, 173, 174, 76, 61, 11, 42, 142, 61, 70, 71, 45, 191, 50, 43, 75, 190, 234, 176, 130, 188, 211, 32, 102, 188, 79, 243, 131, 62, 218, 77, 51, 62, 149, 41, 19, 191, 194, 166, 11, 191, 37, 216, 166, 189, 95, 72, 29, 189, 254, 136, 130, 190, 210, 176, 36, 191, 111, 218, 199, 190, 207, 0, 50, 62, 48, 28, 44, 190, 134, 67, 136, 62, 170, 203, 144, 190, 4, 89, 131, 62, 16, 157, 218, 61, 5, 73, 47, 62, 153, 234, 68, 62, 139, 111, 189, 189, 217, 30, 105, 190, 171, 204, 187, 62, 32, 41, 183, 190, 211, 18, 163, 190, 94, 22, 159, 189, 105, 191, 80, 62, 179, 83, 130, 62, 37, 159, 3, 190, 233, 167, 10, 62, 154, 219, 144, 62, 97, 103, 3, 190, 173, 48, 79, 62, 3, 47, 184, 62, 60, 205, 79, 62, 135, 239, 226, 189, 138, 213, 66, 62, 247, 130, 207, 60, 86, 225, 226, 190, 143, 182, 124, 191, 49, 92, 47, 62, 138, 202, 190, 62, 149, 197, 70, 190, 101, 219, 25, 190, 148, 60, 13, 61, 70, 95, 97, 188, 84, 2, 195, 61, 133, 122, 91, 61, 136, 206, 39, 188, 142, 176, 40, 61, 140, 239, 135, 189, 126, 142, 242, 60, 19, 70, 4, 62, 154, 122, 131, 61, 13, 216, 16, 62, 111, 253, 17, 61, 101, 191, 167, 60, 225, 173, 160, 61, 178, 129, 251, 189, 27, 51, 30, 190, 83, 14, 62, 61, 99, 158, 204, 60, 206, 7, 21, 189, 74, 135, 125, 188, 113, 194, 149, 189, 198, 148, 130, 187, 94, 222, 16, 190, 233, 234, 53, 190, 143, 207, 36, 190, 57, 58, 173, 189, 23, 28, 104, 189, 111, 32, 217, 189, 96, 25, 42, 61, 34, 156, 7, 190, 108, 120, 43, 191, 72, 27, 10, 62, 180, 147, 68, 62, 67, 206, 132, 190, 152, 188, 91, 62, 199, 120, 105, 189, 120, 60, 100, 61, 144, 89, 94, 62, 36, 216, 95, 62, 23, 124, 4, 62, 93, 217, 96, 189, 5, 206, 218, 189, 111, 44, 84, 62, 26, 92, 214, 189, 201, 32, 95, 191, 230, 236, 132, 190, 17, 179, 39, 62, 118, 164, 134, 62, 80, 33, 81, 61, 241, 72, 3, 63, 177, 144, 89, 62, 169, 21, 145, 190, 178, 248, 246, 61, 251, 75, 2, 60, 194, 74, 201, 61, 77, 239, 184, 62, 204, 147, 188, 62, 243, 149, 35, 62, 82, 101, 97, 190, 26, 136, 46, 188, 85, 94, 84, 62, 47, 212, 5, 63, 0, 152, 220, 62, 144, 186, 88, 61, 53, 87, 234, 189, 222, 68, 77, 62, 226, 206, 125, 190, 66, 110, 36, 62, 120, 195, 5, 190, 209, 43, 216, 61, 249, 4, 101, 62, 106, 108, 187, 190, 122, 214, 80, 62, 4, 163, 214, 61, 138, 29, 153, 61, 209, 160, 22, 190, 232, 124, 187, 62, 57, 47, 42, 190, 18, 11, 9, 190, 241, 151, 84, 190, 118, 131, 183, 187, 243, 237, 118, 191, 177, 222, 80, 61, 125, 142, 15, 61, 25, 223, 92, 61, 54, 68, 73, 190, 96, 162, 208, 189, 34, 172, 198, 190, 195, 175, 85, 191, 249, 253, 136, 189, 158, 245, 129, 62, 251, 178, 117, 60, 82, 191, 15, 190, 128, 22, 235, 190, 198, 222, 139, 61, 231, 48, 193, 61, 84, 180, 146, 189, 55, 181, 177, 189, 32, 24, 37, 61, 213, 168, 99, 60, 112, 67, 28, 62, 74, 149, 158, 60, 205, 179, 139, 189, 57, 49, 17, 61, 145, 4, 169, 60, 195, 3, 61, 61, 216, 88, 189, 60, 179, 226, 251, 189, 253, 230, 210, 189, 73, 66, 10, 190, 89, 178, 113, 189, 169, 252, 65, 61, 190, 47, 5, 62, 239, 225, 73, 61, 168, 219, 44, 189, 3, 40, 96, 189, 197, 77, 27, 189, 6, 139, 7, 190, 32, 24, 250, 189, 197, 92, 36, 190, 25, 152, 10, 188, 182, 86, 53, 189, 53, 235, 19, 190, 144, 96, 66, 61, 157, 130, 15, 189, 199, 56, 118, 188, 167, 236, 209, 189, 183, 128, 141, 61, 240, 88, 79, 191, 115, 230, 62, 190, 3, 146, 116, 190, 61, 180, 52, 62, 198, 142, 35, 190, 194, 98, 129, 61, 118, 211, 96, 62, 134, 241, 99, 191, 144, 232, 145, 62, 129, 215, 171, 190, 99, 56, 141, 62, 199, 31, 39, 190, 92, 217, 48, 62, 162, 121, 52, 190, 228, 162, 3, 191, 49, 206, 253, 190, 251, 27, 137, 190, 187, 168, 12, 189, 57, 199, 74, 61, 167, 210, 52, 189, 123, 3, 188, 190, 179, 250, 171, 190, 196, 215, 80, 190, 52, 120, 191, 62, 180, 189, 101, 61, 118, 229, 161, 190, 204, 186, 148, 190, 214, 103, 15, 61, 23, 124, 195, 60, 68, 66, 81, 191, 148, 83, 78, 190, 15, 64, 254, 190, 226, 74, 10, 190, 179, 61, 65, 62, 210, 110, 3, 62, 209, 126, 59, 191, 53, 237, 80, 62, 62, 63, 140, 189, 164, 71, 153, 62, 197, 158, 64, 190, 45, 127, 76, 189, 207, 129, 111, 190, 115, 72, 11, 63, 32, 191, 162, 59, 130, 47, 43, 62, 41, 24, 218, 189, 62, 200, 144, 189, 211, 213, 49, 62, 6, 120, 228, 61, 38, 229, 51, 62, 247, 170, 153, 189, 237, 254, 179, 190, 124, 10, 102, 62, 169, 162, 227, 190, 116, 48, 238, 62, 22, 64, 153, 189, 178, 7, 130, 62, 40, 152, 36, 62, 101, 88, 187, 190, 179, 208, 14, 191, 166, 235, 160, 190, 176, 111, 197, 189, 232, 244, 83, 191, 113, 77, 3, 191, 139, 110, 188, 61, 179, 54, 47, 62, 10, 59, 193, 62, 88, 227, 198, 190, 23, 148, 214, 61, 123, 46, 185, 61, 91, 78, 126, 61, 251, 29, 5, 61, 172, 44, 140, 190, 101, 76, 131, 190, 179, 127, 156, 62, 47, 177, 1, 190, 12, 101, 222, 189, 26, 142, 84, 190, 19, 236, 255, 61, 16, 160, 135, 62, 52, 42, 82, 62, 153, 4, 135, 62, 151, 216, 103, 62, 112, 127, 200, 190, 151, 238, 149, 62, 215, 136, 89, 61, 116, 161, 148, 62, 161, 98, 174, 189, 16, 24, 18, 62, 170, 249, 62, 189, 71, 122, 181, 190, 240, 110, 45, 191, 158, 7, 239, 61, 2, 55, 46, 62, 184, 27, 9, 59, 244, 119, 1, 61, 223, 249, 162, 188, 186, 62, 201, 190, 223, 167, 181, 61, 212, 118, 189, 60, 2, 96, 162, 61, 4, 21, 254, 61, 99, 77, 147, 190, 234, 57, 213, 62, 137, 205, 40, 62, 187, 88, 155, 61, 74, 167, 240, 189, 51, 166, 143, 189, 139, 246, 115, 191, 116, 41, 96, 189, 228, 137, 105, 62, 252, 242, 9, 190, 226, 168, 46, 60, 242, 74, 215, 189, 48, 205, 116, 62, 232, 83, 134, 61, 72, 7, 27, 62, 122, 225, 176, 189, 152, 59, 203, 189, 206, 31, 58, 62, 110, 62, 176, 61, 54, 250, 92, 188, 220, 19, 110, 191, 78, 96, 140, 62, 231, 35, 116, 62, 155, 57, 91, 189, 179, 200, 188, 59, 113, 216, 93, 62, 235, 83, 135, 62, 191, 97, 234, 61, 208, 250, 163, 189, 31, 144, 220, 61, 42, 33, 128, 62, 35, 222, 119, 61, 246, 119, 38, 62, 196, 230, 11, 191, 69, 141, 221, 62, 229, 234, 35, 188, 1, 150, 95, 62, 244, 56, 88, 61, 15, 207, 75, 63, 24, 58, 204, 190, 67, 82, 163, 189, 36, 70, 114, 190, 210, 62, 201, 190, 194, 234, 105, 191, 131, 25, 138, 59, 252, 145, 251, 62, 104, 238, 13, 190, 81, 110, 40, 190, 80, 68, 48, 189, 136, 18, 243, 190, 189, 252, 169, 191, 0, 10, 31, 191, 162, 131, 110, 62, 14, 15, 95, 189, 168, 38, 236, 189, 55, 64, 24, 191, 6, 18, 101, 191, 113, 76, 224, 190, 57, 120, 75, 62, 43, 69, 6, 191, 226, 233, 239, 62, 233, 59, 2, 61, 160, 245, 163, 62, 159, 182, 44, 189, 114, 152, 159, 62, 223, 176, 69, 62, 105, 70, 125, 191, 24, 42, 46, 190, 113, 48, 102, 62, 73, 24, 238, 190, 217, 206, 1, 61, 211, 89, 162, 190, 135, 86, 211, 60, 208, 250, 170, 62, 181, 66, 2, 188, 73, 146, 86, 62, 43, 95, 143, 189, 140, 37, 247, 190, 164, 138, 153, 61, 249, 222, 221, 60, 104, 190, 168, 62, 5, 4, 114, 62, 192, 27, 244, 62, 100, 5, 87, 62, 229, 162, 43, 190, 87, 30, 7, 191, 17, 82, 180, 61, 188, 42, 44, 61, 63, 159, 232, 62, 54, 108, 55, 62, 42, 79, 60, 62, 16, 0, 193, 62, 103, 125, 80, 189, 91, 217, 179, 61, 158, 146, 1, 62, 4, 99, 135, 61, 226, 5, 118, 188, 88, 252, 3, 189, 77, 10, 199, 62, 153, 92, 81, 62, 191, 204, 71, 190, 216, 221, 103, 61, 186, 146, 27, 63, 154, 219, 177, 62, 45, 114, 211, 189, 50, 139, 190, 190, 195, 186, 246, 189, 82, 57, 12, 191, 254, 110, 181, 61, 132, 31, 137, 62, 125, 73, 53, 188, 74, 141, 136, 190, 157, 47, 135, 190, 131, 55, 219, 190, 103, 16, 227, 190, 220, 115, 125, 190, 159, 202, 167, 62, 201, 157, 57, 62, 129, 159, 110, 190, 148, 168, 38, 190, 214, 68, 138, 60, 182, 138, 226, 61, 131, 3, 22, 62, 175, 59, 10, 62, 207, 242, 32, 190, 143, 237, 150, 61, 127, 51, 84, 189, 97, 34, 144, 61, 15, 47, 29, 190, 230, 191, 222, 188, 113, 65, 24, 190, 42, 100, 142, 189, 169, 150, 91, 189, 32, 187, 133, 189, 197, 196, 38, 189, 199, 146, 48, 190, 29, 182, 17, 189, 195, 80, 252, 188, 54, 46, 218, 61, 15, 5, 232, 61, 187, 198, 49, 190, 13, 108, 165, 188, 167, 217, 207, 60, 152, 45, 5, 61, 247, 211, 9, 190, 188, 163, 10, 190, 109, 239, 10, 189, 136, 208, 36, 190, 156, 43, 195, 189, 132, 221, 32, 61, 184, 153, 4, 190, 202, 203, 39, 62, 246, 15, 171, 60, 54, 108, 247, 189, 253, 208, 228, 188, 110, 122, 145, 61, 12, 177, 156, 189, 46, 20, 184, 188, 107, 164, 138, 189, 123, 211, 30, 189, 158, 109, 220, 189, 132, 115, 50, 190, 9, 222, 202, 189, 14, 241, 49, 61, 23, 49, 97, 61, 37, 171, 41, 190, 234, 111, 31, 62, 208, 183, 21, 190, 44, 232, 13, 190, 41, 87, 162, 61, 48, 179, 132, 61, 87, 28, 130, 61, 97, 25, 229, 60, 188, 100, 31, 62, 61, 165, 31, 190, 75, 90, 185, 189, 78, 54, 242, 189, 179, 49, 65, 189, 36, 195, 122, 189, 68, 220, 215, 189, 181, 70, 41, 190, 65, 111, 250, 189, 160, 162, 105, 59, 47, 114, 42, 62, 0, 201, 203, 190, 49, 254, 161, 189, 158, 108, 135, 189, 59, 233, 203, 62, 50, 58, 99, 62, 3, 63, 156, 190, 102, 20, 192, 62, 149, 52, 209, 59, 69, 165, 159, 189, 201, 234, 235, 59, 227, 195, 126, 190, 2, 207, 124, 190, 159, 87, 134, 62, 11, 37, 212, 189, 168, 118, 140, 188, 222, 15, 55, 189, 255, 50, 49, 62, 217, 247, 174, 61, 158, 106, 81, 62, 4, 197, 41, 190, 8, 58, 245, 190, 250, 111, 163, 190, 97, 44, 120, 62, 47, 156, 208, 59, 26, 184, 167, 61, 231, 22, 38, 62, 195, 209, 105, 190, 105, 32, 246, 61, 128, 178, 119, 190, 179, 125, 75, 191, 241, 25, 144, 190, 45, 191, 228, 190, 205, 223, 168, 59, 27, 29, 94, 187, 127, 123, 35, 189, 231, 179, 249, 189, 231, 80, 94, 186, 221, 219, 227, 189, 81, 57, 45, 60, 198, 129, 16, 190, 7, 143, 44, 190, 48, 152, 195, 61, 189, 78, 180, 60, 139, 136, 222, 61, 226, 85, 1, 62, 187, 141, 116, 61, 139, 80, 175, 61, 127, 18, 242, 61, 130, 71, 36, 189, 56, 31, 19, 62, 77, 63, 54, 189, 46, 181, 54, 189, 66, 63, 42, 190, 121, 96, 23, 190, 131, 234, 16, 190, 112, 27, 42, 190, 124, 58, 224, 60, 250, 48, 127, 61, 5, 141, 216, 189, 47, 188, 50, 190, 139, 253, 37, 190, 79, 146, 138, 61, 252, 92, 41, 62, 82, 234, 11, 62, 8, 242, 12, 188, 166, 125, 248, 61, 210, 119, 18, 191, 155, 1, 41, 188, 43, 146, 225, 189, 102, 33, 42, 60, 52, 182, 248, 60, 96, 105, 58, 58, 14, 171, 141, 62, 153, 50, 151, 61, 124, 203, 181, 62, 222, 108, 140, 190, 39, 196, 115, 62, 74, 111, 124, 190, 73, 67, 28, 63, 185, 53, 225, 190, 13, 2, 26, 191, 211, 228, 25, 191, 177, 138, 249, 189, 47, 248, 187, 190, 126, 56, 135, 190, 141, 226, 78, 191, 238, 104, 162, 190, 131, 26, 177, 189, 109, 56, 119, 190, 30, 34, 152, 62, 146, 19, 204, 189, 7, 211, 197, 190, 93, 203, 192, 190, 185, 39, 132, 60, 69, 54, 137, 61, 90, 85, 127, 191, 180, 225, 182, 60, 189, 56, 135, 62, 145, 228, 165, 190, 5, 167, 223, 190, 166, 103, 184, 61, 79, 203, 202, 61, 18, 112, 131, 60, 245, 61, 123, 62, 224, 121, 62, 189, 47, 212, 218, 62, 109, 158, 23, 62, 134, 169, 212, 61, 72, 142, 116, 190, 173, 95, 142, 62, 240, 26, 114, 190, 17, 179, 184, 61, 185, 206, 220, 189, 11, 187, 32, 191, 36, 206, 245, 61, 88, 115, 33, 190, 98, 82, 189, 62, 143, 48, 50, 62, 14, 210, 138, 62, 35, 119, 179, 61, 230, 114, 203, 190, 226, 110, 103, 62, 84, 231, 201, 58, 199, 103, 52, 62, 83, 245, 14, 191, 53, 191, 137, 189, 26, 100, 73, 61, 191, 13, 23, 191, 77, 89, 237, 62, 232, 99, 204, 61, 107, 223, 167, 190, 28, 245, 28, 62, 158, 172, 106, 190, 236, 82, 133, 62, 141, 124, 25, 62, 132, 62, 117, 62, 78, 17, 64, 62, 14, 220, 162, 190, 152, 253, 31, 62, 135, 175, 137, 61, 126, 129, 168, 61, 109, 73, 204, 189, 52, 116, 233, 187, 75, 219, 75, 190, 68, 205, 20, 59, 58, 107, 123, 190, 67, 236, 14, 61, 56, 114, 137, 191, 88, 10, 0, 62, 100, 99, 0, 188, 203, 31, 132, 187, 233, 14, 37, 191, 186, 10, 90, 190, 158, 110, 92, 61, 141, 49, 81, 191, 18, 164, 16, 190, 42, 21, 192, 62, 110, 69, 22, 190, 94, 46, 246, 190, 246, 16, 178, 190, 245, 219, 178, 190, 214, 49, 39, 62, 95, 13, 117, 62, 175, 183, 75, 62, 89, 187, 151, 61, 43, 246, 116, 62, 40, 151, 43, 61, 11, 250, 68, 62, 208, 156, 12, 61, 112, 10, 148, 62, 229, 182, 205, 189, 138, 201, 198, 189, 20, 85, 130, 62, 225, 107, 25, 61, 174, 107, 47, 191, 255, 184, 204, 188, 24, 195, 26, 62, 179, 110, 106, 190, 133, 162, 62, 187, 99, 241, 168, 190, 50, 217, 93, 62, 171, 3, 194, 190, 176, 60, 176, 189, 197, 96, 254, 61, 211, 27, 139, 61, 110, 157, 215, 62, 61, 130, 188, 190, 23, 241, 162, 61, 83, 45, 85, 189, 121, 137, 206, 189, 171, 156, 21, 62, 211, 126, 11, 190, 203, 98, 156, 191, 229, 102, 195, 188, 199, 148, 245, 187, 39, 20, 161, 61, 154, 58, 156, 188, 28, 139, 25, 62, 221, 81, 137, 189, 186, 4, 178, 62, 232, 57, 19, 191, 176, 199, 21, 63, 142, 138, 192, 190, 115, 148, 209, 190, 43, 238, 63, 190, 237, 241, 32, 62, 2, 181, 88, 191, 163, 7, 120, 62, 223, 130, 222, 188, 160, 206, 79, 62, 86, 146, 40, 61, 34, 234, 112, 62, 122, 174, 155, 61, 1, 158, 11, 191, 36, 214, 188, 61, 11, 182, 53, 61, 220, 146, 225, 61, 0, 40, 139, 62, 231, 40, 2, 62, 149, 121, 211, 61, 128, 122, 191, 189, 95, 230, 214, 189, 216, 211, 115, 62, 149, 241, 160, 62, 129, 58, 209, 189, 250, 136, 188, 190, 83, 200, 154, 189, 214, 251, 10, 191, 155, 54, 76, 60, 230, 136, 206, 60, 166, 151, 18, 190, 131, 128, 84, 62, 132, 249, 50, 189, 180, 29, 90, 191, 118, 191, 138, 61, 28, 67, 19, 190, 234, 43, 77, 190, 225, 190, 121, 61, 212, 177, 32, 61, 188, 137, 65, 190, 18, 35, 193, 189, 213, 109, 17, 62, 169, 87, 36, 61, 188, 106, 10, 189, 19, 97, 166, 62, 178, 131, 13, 190, 213, 117, 118, 61, 25, 120, 121, 190, 119, 86, 36, 62, 105, 126, 95, 190, 162, 177, 201, 61, 79, 97, 93, 190, 9, 130, 47, 191, 196, 190, 184, 190, 173, 76, 12, 62, 13, 36, 145, 60, 58, 131, 224, 190, 216, 78, 207, 190, 74, 30, 183, 60, 211, 75, 162, 190, 185, 153, 34, 189, 118, 187, 172, 190, 64, 182, 14, 62, 45, 82, 209, 61, 219, 93, 83, 62, 26, 23, 180, 189, 139, 235, 159, 190, 166, 66, 13, 190, 211, 119, 179, 61, 134, 47, 125, 189, 93, 253, 254, 188, 83, 23, 43, 190, 104, 189, 116, 62, 126, 252, 241, 62, 171, 201, 24, 62, 46, 211, 101, 61, 147, 42, 33, 62, 207, 129, 64, 190, 205, 70, 54, 62, 13, 249, 61, 190, 4, 50, 206, 62, 161, 227, 78, 187, 188, 68, 192, 62, 82, 208, 208, 188, 70, 17, 131, 190, 238, 97, 13, 191, 188, 27, 138, 189, 66, 180, 18, 63, 0, 13, 232, 62, 121, 50, 32, 189, 53, 131, 30, 61, 64, 107, 54, 62, 30, 153, 156, 190, 41, 124, 177, 62, 165, 40, 49, 62, 123, 142, 25, 62, 37, 4, 150, 62, 8, 197, 96, 190, 31, 200, 168, 62, 60, 102, 152, 189, 28, 188, 23, 62, 223, 117, 125, 61, 126, 34, 0, 63, 94, 244, 163, 62, 222, 82, 210, 61, 85, 25, 99, 190, 21, 172, 87, 190, 250, 238, 186, 191, 147, 234, 135, 61, 169, 254, 61, 62, 12, 63, 206, 189, 168, 15, 61, 190, 22, 0, 197, 189, 121, 30, 131, 190, 198, 134, 200, 191, 202, 76, 199, 190, 99, 62, 52, 61, 21, 9, 176, 189, 171, 89, 231, 188, 229, 229, 116, 191, 109, 104, 48, 62, 63, 214, 4, 62, 51, 246, 43, 61, 134, 45, 172, 57, 233, 79, 231, 189, 3, 163, 47, 62, 157, 46, 1, 62, 159, 193, 20, 61, 92, 216, 135, 62, 140, 159, 30, 190, 20, 155, 204, 62, 0, 28, 167, 61, 255, 246, 119, 61, 155, 211, 39, 61, 219, 40, 124, 62, 75, 243, 64, 62, 141, 99, 120, 62, 221, 223, 171, 190, 213, 209, 65, 189, 180, 146, 187, 191, 61, 239, 2, 190, 197, 95, 106, 61, 215, 148, 89, 61, 164, 163, 75, 190, 21, 140, 63, 61, 218, 135, 135, 190, 94, 153, 160, 191, 197, 195, 157, 186, 42, 251, 4, 188, 21, 43, 82, 61, 12, 64, 96, 61, 37, 255, 4, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 73, 129, 187, 20, 134, 237, 61, 31, 144, 246, 61, 92, 250, 114, 62, 182, 195, 208, 62, 212, 244, 157, 62, 82, 229, 58, 60, 255, 85, 68, 62, 0, 234, 63, 190, 185, 69, 172, 189, 173, 176, 167, 61, 10, 208, 192, 189, 233, 156, 68, 190, 229, 51, 195, 60, 61, 152, 85, 62, 205, 40, 140, 189, 72, 94, 109, 62, 40, 51, 69, 62, 127, 151, 66, 189, 182, 91, 78, 61, 182, 166, 11, 62, 147, 80, 243, 60, 27, 65, 52, 190, 160, 120, 37, 62, 44, 65, 216, 188, 61, 50, 49, 61, 114, 66, 183, 61, 39, 70, 6, 190, 184, 183, 85, 190, 12, 227, 139, 189, 255, 59, 138, 62, 55, 106, 137, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 170, 58, 190, 20, 204, 222, 61, 232, 175, 76, 191, 39, 112, 233, 62, 158, 3, 103, 61, 105, 41, 192, 189, 22, 34, 106, 63, 113, 15, 226, 190, 25, 180, 30, 62, 203, 200, 10, 191, 131, 105, 133, 62, 115, 76, 109, 61, 141, 97, 15, 63, 189, 60, 6, 191, 64, 146, 46, 191, 0, 116, 176, 61, 142, 183, 85, 63, 226, 91, 141, 63, 41, 232, 171, 62, 38, 187, 197, 61, 213, 78, 221, 189, 66, 48, 16, 191, 190, 113, 51, 189, 12, 170, 147, 63, 174, 164, 210, 62, 4, 51, 25, 63, 64, 112, 33, 190, 82, 29, 245, 190, 76, 64, 148, 61, 116, 77, 26, 191, 5, 209, 45, 63, 94, 112, 215, 62, 4, 237, 233, 190, 204, 221, 176, 190, 7, 28, 139, 62, 50, 199, 28, 61, 11, 89, 169, 190, 161, 51, 184, 190, 110, 117, 26, 189, 16, 68, 166, 189, 184, 247, 241, 189, 66, 155, 91, 60, 81, 21, 198, 62, 45, 4, 47, 190, 137, 211, 63, 62, 145, 202, 219, 61, 194, 136, 186, 61, 66, 137, 58, 190, 111, 168, 57, 62, 9, 234, 144, 62, 252, 195, 178, 62, 232, 232, 230, 189, 223, 45, 20, 62, 206, 53, 201, 61, 215, 138, 172, 186, 211, 21, 228, 62, 101, 65, 50, 61, 101, 132, 92, 63, 78, 110, 135, 190, 199, 15, 8, 63, 221, 29, 154, 190, 179, 154, 175, 60, 100, 21, 2, 62, 178, 164, 164, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 218, 124, 188, 41, 88, 151, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {40, 101, 229, 190, 122, 189, 176, 63, 62, 186, 146, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {15, 87, 131, 63, 174, 84, 250, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0006/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}