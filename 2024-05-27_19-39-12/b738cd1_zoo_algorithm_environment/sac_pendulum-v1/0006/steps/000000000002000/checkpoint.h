// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 75, 47, 63, 216, 4, 204, 190, 99, 225, 205, 190, 110, 52, 216, 188, 218, 51, 63, 191, 133, 24, 103, 62, 28, 151, 184, 61, 35, 157, 3, 63, 228, 63, 6, 62, 42, 94, 224, 190, 53, 171, 174, 190, 114, 211, 126, 62, 23, 90, 235, 190, 7, 152, 194, 62, 137, 146, 253, 189, 145, 134, 200, 62, 127, 191, 63, 191, 160, 85, 193, 61, 36, 47, 66, 62, 227, 161, 93, 62, 218, 143, 57, 61, 244, 74, 21, 63, 162, 182, 36, 190, 71, 58, 47, 190, 180, 101, 103, 190, 74, 51, 37, 191, 90, 99, 28, 190, 152, 147, 20, 190, 14, 196, 51, 63, 179, 13, 108, 61, 208, 185, 35, 63, 157, 43, 23, 191, 233, 110, 56, 190, 46, 11, 245, 61, 150, 248, 77, 190, 10, 147, 172, 190, 33, 38, 1, 191, 241, 223, 198, 190, 121, 252, 93, 189, 182, 163, 18, 63, 157, 136, 182, 61, 71, 82, 166, 190, 176, 192, 165, 190, 100, 125, 107, 190, 197, 147, 119, 188, 45, 195, 20, 62, 165, 244, 136, 62, 216, 177, 140, 190, 120, 79, 142, 60, 253, 246, 56, 63, 185, 80, 3, 62, 47, 169, 131, 62, 175, 29, 17, 63, 50, 88, 116, 62, 139, 239, 111, 189, 100, 54, 12, 63, 146, 237, 130, 190, 166, 35, 175, 189, 203, 166, 73, 190, 159, 226, 18, 190, 10, 91, 33, 63, 165, 88, 88, 190, 94, 47, 170, 62, 235, 48, 7, 62, 183, 139, 241, 190, 44, 209, 238, 190, 73, 174, 173, 190, 3, 109, 195, 62, 134, 61, 141, 190, 203, 124, 148, 62, 9, 194, 163, 190, 136, 14, 248, 62, 39, 126, 255, 62, 27, 47, 66, 63, 66, 169, 185, 62, 122, 35, 117, 190, 174, 63, 30, 191, 170, 240, 107, 190, 80, 74, 49, 191, 48, 178, 153, 62, 173, 121, 164, 190, 223, 192, 67, 188, 171, 74, 51, 63, 32, 180, 84, 190, 44, 201, 201, 190, 119, 232, 62, 190, 30, 119, 217, 62, 82, 43, 219, 190, 124, 224, 90, 191, 40, 216, 230, 62, 97, 215, 40, 63, 169, 179, 157, 190, 70, 194, 5, 63, 200, 19, 58, 63, 43, 90, 183, 62, 235, 135, 160, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 180, 229, 190, 62, 208, 159, 62, 99, 146, 162, 62, 51, 109, 162, 62, 184, 79, 145, 62, 128, 37, 20, 63, 158, 210, 17, 63, 44, 87, 0, 63, 248, 71, 9, 63, 89, 103, 206, 189, 138, 99, 143, 62, 72, 144, 28, 61, 228, 129, 19, 63, 190, 17, 82, 62, 82, 11, 2, 190, 232, 242, 133, 190, 55, 192, 1, 63, 67, 95, 83, 62, 227, 52, 24, 63, 133, 56, 165, 188, 99, 71, 194, 62, 147, 50, 20, 191, 233, 36, 35, 63, 62, 83, 56, 190, 215, 148, 3, 63, 81, 92, 112, 62, 116, 248, 208, 190, 9, 117, 174, 62, 116, 70, 235, 62, 6, 193, 148, 190, 208, 180, 183, 61, 224, 160, 129, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 208, 124, 190, 61, 26, 2, 190, 80, 48, 224, 61, 230, 52, 44, 190, 152, 114, 33, 62, 174, 71, 53, 61, 29, 28, 52, 62, 210, 2, 33, 61, 192, 34, 108, 190, 183, 235, 120, 189, 81, 1, 194, 61, 205, 59, 12, 190, 216, 86, 83, 61, 197, 200, 252, 61, 170, 181, 97, 190, 252, 146, 2, 62, 20, 147, 115, 62, 241, 170, 124, 62, 234, 174, 123, 62, 186, 9, 172, 61, 14, 50, 146, 60, 188, 232, 245, 189, 154, 129, 246, 61, 33, 233, 24, 62, 22, 55, 72, 61, 119, 188, 16, 190, 227, 17, 252, 188, 15, 235, 94, 62, 150, 203, 11, 61, 97, 93, 187, 189, 46, 211, 181, 61, 138, 173, 77, 62, 238, 142, 71, 61, 9, 151, 46, 61, 135, 242, 8, 190, 141, 151, 68, 188, 156, 214, 82, 62, 2, 99, 155, 62, 68, 125, 224, 61, 82, 112, 80, 62, 78, 5, 78, 62, 178, 110, 130, 190, 171, 229, 235, 61, 5, 90, 22, 190, 205, 186, 128, 61, 209, 150, 138, 61, 28, 8, 174, 61, 200, 213, 56, 62, 76, 32, 56, 188, 24, 59, 69, 190, 3, 242, 141, 60, 14, 155, 6, 190, 78, 188, 140, 61, 4, 177, 180, 187, 130, 63, 66, 61, 208, 145, 248, 188, 20, 144, 7, 61, 71, 82, 119, 189, 175, 184, 140, 61, 238, 105, 37, 190, 145, 142, 85, 189, 191, 81, 180, 58, 241, 142, 239, 189, 255, 122, 52, 189, 185, 3, 123, 190, 80, 156, 215, 189, 192, 70, 123, 189, 80, 158, 56, 190, 166, 250, 44, 62, 171, 21, 33, 61, 234, 36, 9, 62, 194, 248, 250, 61, 41, 66, 163, 61, 32, 176, 14, 62, 138, 50, 104, 190, 206, 124, 196, 61, 230, 167, 142, 61, 119, 50, 207, 60, 15, 78, 87, 62, 190, 101, 96, 190, 141, 133, 0, 190, 124, 110, 66, 190, 252, 206, 226, 189, 66, 18, 9, 190, 108, 172, 100, 190, 49, 13, 221, 187, 250, 89, 58, 62, 202, 29, 68, 190, 84, 144, 61, 190, 193, 102, 174, 189, 81, 150, 209, 61, 194, 45, 145, 189, 123, 245, 17, 190, 197, 196, 105, 189, 61, 37, 142, 189, 237, 241, 132, 61, 70, 32, 57, 61, 101, 94, 245, 61, 148, 18, 129, 190, 77, 21, 13, 61, 186, 147, 242, 61, 36, 5, 199, 62, 157, 196, 185, 189, 59, 35, 119, 62, 62, 156, 65, 62, 165, 56, 205, 190, 127, 186, 185, 61, 111, 78, 98, 61, 58, 86, 4, 61, 48, 202, 90, 189, 114, 170, 100, 189, 146, 190, 157, 61, 31, 132, 144, 189, 234, 13, 36, 190, 44, 133, 64, 62, 215, 123, 15, 190, 220, 213, 144, 182, 149, 31, 78, 189, 43, 80, 10, 190, 104, 76, 48, 190, 242, 92, 50, 190, 48, 247, 173, 189, 173, 64, 241, 189, 147, 33, 8, 62, 178, 54, 31, 62, 237, 220, 34, 62, 206, 220, 172, 188, 1, 221, 20, 190, 88, 25, 172, 61, 77, 161, 226, 61, 223, 60, 145, 187, 209, 230, 128, 188, 255, 55, 199, 188, 175, 246, 27, 62, 121, 37, 70, 61, 237, 183, 213, 61, 231, 71, 11, 62, 254, 192, 81, 189, 123, 166, 1, 62, 92, 58, 142, 61, 204, 180, 78, 62, 21, 103, 47, 62, 4, 236, 33, 62, 147, 75, 191, 185, 146, 82, 220, 188, 31, 245, 213, 61, 96, 49, 67, 62, 35, 45, 128, 189, 213, 97, 255, 189, 43, 20, 130, 189, 205, 170, 25, 62, 63, 195, 121, 61, 105, 241, 15, 61, 250, 43, 28, 62, 24, 157, 170, 61, 212, 230, 222, 189, 127, 112, 161, 189, 143, 211, 194, 61, 183, 109, 10, 190, 135, 229, 10, 61, 230, 167, 242, 189, 143, 22, 145, 61, 206, 145, 173, 61, 120, 4, 134, 188, 189, 83, 63, 62, 115, 118, 134, 61, 254, 154, 120, 62, 18, 225, 28, 60, 1, 76, 171, 60, 53, 189, 187, 59, 170, 224, 237, 188, 91, 34, 237, 189, 184, 222, 7, 61, 231, 114, 155, 189, 114, 198, 17, 61, 112, 209, 241, 61, 148, 110, 5, 61, 207, 151, 238, 61, 165, 210, 94, 62, 65, 192, 33, 190, 162, 65, 32, 188, 76, 244, 8, 62, 46, 55, 16, 190, 134, 225, 234, 189, 86, 14, 241, 60, 250, 93, 105, 190, 39, 92, 11, 61, 118, 129, 89, 62, 224, 149, 204, 189, 142, 61, 17, 190, 4, 3, 85, 62, 82, 237, 24, 62, 191, 196, 18, 190, 68, 99, 46, 59, 241, 156, 55, 190, 252, 214, 55, 61, 43, 144, 136, 187, 156, 127, 141, 61, 160, 156, 17, 190, 21, 142, 149, 189, 163, 202, 85, 61, 171, 95, 34, 62, 26, 58, 150, 59, 143, 21, 129, 60, 167, 73, 141, 61, 38, 204, 127, 61, 23, 119, 105, 61, 147, 9, 201, 60, 165, 25, 28, 190, 211, 23, 37, 190, 54, 143, 177, 60, 21, 100, 243, 189, 149, 58, 126, 60, 124, 238, 206, 189, 134, 48, 240, 189, 92, 220, 27, 61, 228, 72, 47, 61, 63, 12, 183, 61, 160, 52, 229, 189, 221, 121, 3, 62, 207, 214, 61, 190, 158, 140, 127, 61, 100, 233, 79, 189, 228, 104, 211, 61, 186, 148, 55, 190, 15, 107, 222, 190, 157, 224, 145, 62, 206, 130, 9, 189, 2, 124, 124, 62, 48, 148, 169, 190, 215, 38, 79, 62, 163, 105, 71, 61, 48, 143, 102, 61, 96, 68, 187, 62, 143, 97, 16, 189, 69, 1, 248, 189, 160, 165, 3, 62, 78, 234, 108, 190, 179, 184, 201, 189, 67, 80, 97, 61, 83, 1, 164, 62, 72, 236, 180, 60, 51, 66, 158, 189, 146, 222, 148, 189, 162, 209, 150, 61, 82, 156, 62, 61, 143, 98, 91, 62, 190, 99, 107, 190, 39, 174, 25, 61, 236, 87, 62, 190, 143, 169, 83, 60, 194, 94, 197, 61, 82, 239, 30, 190, 211, 112, 233, 190, 201, 38, 209, 189, 141, 201, 70, 189, 215, 105, 61, 190, 101, 219, 25, 190, 83, 211, 39, 61, 70, 95, 97, 188, 236, 151, 203, 61, 215, 229, 99, 61, 75, 204, 237, 187, 3, 164, 63, 61, 69, 118, 130, 189, 192, 92, 31, 61, 126, 49, 14, 62, 46, 78, 153, 61, 214, 152, 17, 62, 231, 250, 88, 61, 101, 191, 167, 60, 246, 104, 183, 61, 93, 242, 235, 189, 27, 51, 30, 190, 241, 219, 122, 61, 207, 196, 237, 60, 160, 42, 15, 189, 4, 21, 194, 187, 28, 152, 116, 189, 198, 148, 130, 187, 47, 145, 16, 190, 121, 166, 53, 190, 172, 96, 34, 190, 145, 63, 144, 189, 23, 28, 104, 189, 111, 32, 217, 189, 96, 25, 42, 61, 34, 156, 7, 190, 25, 45, 178, 190, 122, 245, 71, 61, 220, 0, 93, 62, 49, 66, 85, 190, 47, 62, 44, 62, 131, 3, 69, 190, 115, 49, 50, 60, 233, 213, 245, 61, 0, 222, 62, 60, 236, 144, 249, 188, 236, 254, 128, 61, 224, 76, 189, 189, 149, 170, 186, 57, 70, 41, 167, 189, 100, 24, 57, 190, 114, 0, 42, 190, 45, 90, 72, 62, 101, 234, 64, 62, 161, 73, 56, 188, 252, 63, 17, 62, 12, 181, 242, 61, 77, 240, 202, 189, 83, 166, 218, 60, 230, 244, 128, 189, 101, 222, 156, 59, 225, 58, 245, 61, 36, 113, 23, 62, 117, 90, 21, 62, 1, 24, 49, 188, 24, 196, 188, 61, 96, 191, 3, 62, 206, 20, 144, 62, 77, 76, 138, 62, 235, 5, 3, 62, 250, 88, 32, 190, 62, 49, 223, 61, 228, 73, 227, 189, 56, 96, 132, 62, 198, 187, 7, 190, 153, 200, 29, 62, 130, 8, 24, 62, 99, 80, 159, 189, 220, 174, 171, 61, 1, 160, 198, 61, 133, 138, 40, 62, 123, 90, 247, 189, 86, 248, 70, 189, 88, 59, 194, 189, 64, 210, 128, 190, 88, 123, 168, 189, 153, 35, 62, 61, 59, 58, 33, 61, 127, 74, 202, 61, 104, 192, 22, 62, 41, 46, 154, 61, 227, 177, 25, 190, 92, 105, 145, 189, 57, 43, 38, 60, 86, 10, 108, 189, 129, 36, 122, 189, 206, 19, 175, 61, 81, 142, 223, 187, 236, 4, 185, 189, 210, 252, 43, 190, 248, 56, 147, 61, 3, 180, 196, 61, 84, 180, 146, 189, 55, 181, 177, 189, 32, 24, 37, 61, 226, 167, 149, 60, 138, 166, 30, 62, 254, 248, 197, 60, 85, 8, 133, 189, 57, 49, 17, 61, 73, 49, 213, 60, 208, 183, 68, 61, 127, 223, 205, 60, 253, 26, 245, 189, 253, 230, 210, 189, 82, 48, 10, 190, 47, 41, 113, 189, 169, 252, 65, 61, 250, 159, 7, 62, 218, 173, 80, 61, 44, 93, 32, 189, 228, 26, 93, 189, 95, 117, 19, 189, 6, 139, 7, 190, 243, 239, 249, 189, 104, 203, 33, 190, 25, 152, 10, 188, 216, 197, 51, 189, 53, 235, 19, 190, 144, 96, 66, 61, 199, 150, 11, 189, 199, 56, 118, 188, 242, 164, 116, 62, 64, 25, 60, 60, 69, 230, 56, 190, 117, 198, 190, 190, 37, 204, 90, 190, 226, 135, 254, 61, 76, 91, 174, 189, 81, 87, 226, 61, 156, 168, 67, 60, 17, 91, 6, 61, 4, 91, 101, 62, 217, 227, 143, 60, 174, 161, 72, 61, 138, 57, 11, 62, 188, 181, 141, 190, 239, 227, 142, 61, 193, 116, 46, 189, 127, 170, 238, 61, 133, 49, 48, 60, 139, 148, 26, 62, 2, 147, 91, 61, 50, 73, 91, 62, 219, 202, 63, 190, 130, 101, 72, 190, 80, 103, 184, 187, 106, 88, 232, 61, 207, 233, 5, 62, 231, 198, 159, 61, 127, 157, 174, 189, 240, 182, 2, 190, 200, 138, 73, 61, 248, 9, 154, 61, 43, 112, 74, 188, 238, 163, 243, 189, 13, 222, 74, 61, 106, 143, 113, 61, 126, 12, 202, 187, 244, 220, 202, 190, 159, 212, 201, 61, 137, 184, 139, 60, 10, 57, 129, 187, 133, 228, 245, 61, 223, 230, 230, 60, 143, 135, 29, 190, 197, 143, 174, 61, 80, 189, 39, 62, 17, 173, 124, 61, 253, 127, 22, 61, 144, 168, 123, 61, 182, 169, 173, 189, 151, 72, 2, 62, 42, 152, 130, 60, 134, 55, 184, 189, 177, 10, 75, 190, 245, 118, 49, 62, 200, 89, 251, 188, 48, 154, 42, 62, 97, 220, 210, 189, 165, 138, 153, 61, 103, 191, 104, 62, 123, 125, 67, 189, 242, 46, 215, 189, 22, 1, 53, 190, 17, 255, 1, 190, 16, 25, 177, 190, 183, 162, 191, 190, 223, 139, 189, 61, 195, 119, 0, 61, 164, 246, 118, 62, 168, 236, 161, 190, 243, 242, 148, 59, 70, 243, 71, 61, 146, 148, 55, 60, 30, 88, 109, 61, 198, 6, 47, 190, 0, 159, 49, 190, 150, 142, 137, 61, 63, 154, 193, 189, 102, 237, 126, 61, 244, 66, 207, 189, 114, 44, 199, 61, 40, 77, 139, 61, 79, 113, 38, 62, 18, 21, 17, 62, 250, 66, 229, 61, 61, 108, 14, 190, 78, 238, 87, 62, 119, 162, 175, 61, 5, 18, 1, 62, 57, 189, 173, 188, 16, 91, 32, 61, 202, 77, 142, 189, 167, 7, 10, 190, 176, 6, 193, 190, 22, 194, 119, 61, 145, 179, 56, 190, 111, 178, 51, 61, 30, 228, 201, 189, 207, 237, 175, 189, 4, 220, 11, 190, 195, 243, 149, 61, 85, 186, 162, 189, 173, 173, 17, 61, 132, 113, 157, 61, 178, 90, 64, 190, 71, 134, 222, 61, 174, 235, 7, 62, 242, 171, 163, 61, 175, 148, 17, 62, 221, 193, 39, 190, 204, 22, 0, 190, 240, 96, 52, 190, 148, 35, 34, 62, 182, 180, 13, 188, 55, 147, 196, 189, 174, 253, 235, 187, 45, 165, 241, 61, 233, 255, 110, 61, 155, 128, 176, 61, 12, 17, 49, 190, 180, 17, 11, 190, 95, 201, 211, 60, 57, 132, 155, 61, 74, 7, 37, 190, 183, 211, 171, 189, 66, 38, 9, 189, 186, 85, 196, 61, 3, 138, 126, 61, 111, 19, 232, 189, 231, 27, 145, 62, 201, 67, 249, 61, 20, 65, 16, 62, 27, 64, 66, 61, 202, 38, 225, 61, 44, 229, 24, 62, 96, 207, 191, 189, 33, 178, 178, 61, 210, 104, 49, 190, 73, 235, 141, 61, 202, 136, 169, 189, 250, 210, 150, 62, 80, 254, 128, 60, 109, 220, 107, 62, 36, 12, 251, 187, 24, 63, 78, 190, 119, 88, 61, 190, 103, 55, 151, 190, 254, 152, 144, 61, 109, 177, 239, 188, 105, 25, 224, 61, 188, 183, 191, 189, 173, 28, 228, 189, 102, 36, 145, 189, 78, 234, 218, 60, 131, 247, 145, 190, 216, 111, 171, 190, 230, 173, 40, 62, 2, 25, 40, 61, 202, 209, 187, 189, 216, 51, 167, 190, 247, 23, 53, 189, 231, 78, 63, 190, 254, 160, 37, 62, 88, 79, 85, 190, 245, 182, 35, 62, 234, 173, 32, 188, 103, 26, 15, 62, 152, 246, 13, 59, 237, 78, 198, 188, 154, 122, 81, 62, 80, 159, 22, 190, 146, 32, 254, 59, 235, 219, 146, 189, 230, 74, 83, 190, 229, 99, 47, 190, 40, 34, 35, 190, 105, 180, 196, 189, 161, 147, 36, 61, 48, 130, 239, 189, 27, 47, 24, 190, 246, 105, 201, 189, 139, 57, 37, 60, 67, 126, 184, 189, 0, 113, 244, 189, 84, 122, 224, 61, 158, 202, 164, 59, 237, 221, 7, 61, 135, 225, 45, 62, 202, 59, 247, 189, 96, 75, 168, 189, 179, 169, 17, 189, 124, 214, 161, 189, 198, 170, 97, 61, 217, 171, 67, 62, 148, 18, 94, 61, 102, 1, 114, 62, 101, 101, 148, 189, 195, 54, 22, 62, 65, 24, 24, 62, 205, 227, 167, 61, 172, 214, 93, 62, 5, 137, 153, 190, 36, 210, 92, 62, 234, 162, 229, 61, 103, 100, 243, 61, 94, 76, 9, 60, 152, 87, 239, 61, 72, 172, 199, 61, 130, 187, 96, 190, 252, 32, 60, 190, 90, 248, 168, 189, 24, 110, 156, 61, 182, 132, 173, 61, 241, 112, 73, 61, 24, 254, 9, 60, 0, 215, 150, 190, 192, 83, 46, 190, 51, 59, 225, 61, 85, 237, 176, 188, 247, 96, 122, 190, 53, 113, 137, 61, 224, 210, 41, 62, 78, 66, 130, 190, 15, 108, 238, 61, 214, 68, 138, 60, 182, 138, 226, 61, 131, 3, 22, 62, 175, 59, 10, 62, 207, 242, 32, 190, 143, 237, 150, 61, 127, 51, 84, 189, 97, 34, 144, 61, 15, 47, 29, 190, 230, 191, 222, 188, 113, 65, 24, 190, 42, 100, 142, 189, 169, 150, 91, 189, 32, 187, 133, 189, 197, 196, 38, 189, 199, 146, 48, 190, 29, 182, 17, 189, 195, 80, 252, 188, 54, 46, 218, 61, 15, 5, 232, 61, 187, 198, 49, 190, 13, 108, 165, 188, 167, 217, 207, 60, 152, 45, 5, 61, 247, 211, 9, 190, 188, 163, 10, 190, 109, 239, 10, 189, 136, 208, 36, 190, 156, 43, 195, 189, 132, 221, 32, 61, 184, 153, 4, 190, 202, 203, 39, 62, 246, 15, 171, 60, 54, 108, 247, 189, 253, 208, 228, 188, 110, 122, 145, 61, 12, 177, 156, 189, 46, 20, 184, 188, 107, 164, 138, 189, 123, 211, 30, 189, 158, 109, 220, 189, 132, 115, 50, 190, 9, 222, 202, 189, 14, 241, 49, 61, 23, 49, 97, 61, 37, 171, 41, 190, 234, 111, 31, 62, 208, 183, 21, 190, 44, 232, 13, 190, 41, 87, 162, 61, 48, 179, 132, 61, 87, 28, 130, 61, 97, 25, 229, 60, 188, 100, 31, 62, 61, 165, 31, 190, 75, 90, 185, 189, 78, 54, 242, 189, 179, 49, 65, 189, 36, 195, 122, 189, 68, 220, 215, 189, 181, 70, 41, 190, 65, 111, 250, 189, 160, 162, 105, 59, 47, 114, 42, 62, 218, 34, 201, 189, 80, 200, 187, 188, 183, 35, 146, 188, 119, 161, 56, 62, 0, 130, 213, 61, 100, 16, 79, 190, 108, 51, 138, 62, 67, 197, 88, 61, 88, 250, 137, 190, 56, 47, 230, 61, 169, 188, 204, 189, 24, 172, 35, 190, 251, 196, 26, 190, 116, 65, 104, 188, 181, 118, 47, 190, 42, 49, 37, 61, 21, 247, 80, 62, 30, 117, 22, 62, 215, 110, 53, 62, 228, 71, 32, 190, 246, 195, 153, 190, 9, 113, 49, 190, 103, 220, 48, 62, 34, 89, 183, 189, 9, 244, 238, 61, 16, 161, 211, 189, 234, 176, 122, 190, 130, 202, 30, 62, 246, 86, 45, 60, 14, 33, 104, 190, 235, 190, 158, 190, 125, 107, 220, 189, 205, 223, 168, 59, 27, 29, 94, 187, 127, 123, 35, 189, 231, 179, 249, 189, 231, 80, 94, 186, 221, 219, 227, 189, 81, 57, 45, 60, 198, 129, 16, 190, 7, 143, 44, 190, 48, 152, 195, 61, 189, 78, 180, 60, 139, 136, 222, 61, 226, 85, 1, 62, 187, 141, 116, 61, 139, 80, 175, 61, 127, 18, 242, 61, 130, 71, 36, 189, 56, 31, 19, 62, 77, 63, 54, 189, 46, 181, 54, 189, 66, 63, 42, 190, 121, 96, 23, 190, 131, 234, 16, 190, 112, 27, 42, 190, 124, 58, 224, 60, 250, 48, 127, 61, 5, 141, 216, 189, 47, 188, 50, 190, 139, 253, 37, 190, 79, 146, 138, 61, 252, 92, 41, 62, 82, 234, 11, 62, 175, 50, 70, 62, 240, 254, 136, 61, 71, 253, 237, 188, 100, 185, 210, 187, 115, 30, 130, 190, 192, 111, 69, 58, 123, 96, 95, 60, 170, 219, 126, 61, 220, 189, 67, 60, 66, 123, 141, 60, 107, 27, 2, 62, 172, 103, 164, 188, 52, 77, 25, 61, 149, 240, 240, 188, 24, 84, 215, 60, 201, 122, 128, 190, 134, 192, 77, 190, 120, 50, 193, 60, 8, 7, 18, 62, 69, 27, 27, 190, 97, 29, 61, 190, 0, 253, 41, 190, 243, 103, 72, 190, 35, 128, 114, 189, 56, 232, 24, 61, 115, 133, 199, 60, 241, 40, 2, 190, 107, 51, 165, 61, 152, 147, 85, 190, 117, 146, 145, 61, 243, 107, 212, 61, 51, 73, 128, 189, 63, 99, 185, 60, 6, 93, 50, 62, 179, 94, 140, 190, 126, 200, 128, 190, 250, 13, 111, 188, 51, 89, 250, 59, 238, 145, 255, 60, 133, 212, 119, 62, 248, 189, 14, 190, 54, 44, 138, 61, 173, 145, 142, 61, 30, 142, 152, 61, 194, 99, 74, 190, 174, 12, 98, 62, 18, 178, 83, 189, 157, 161, 79, 189, 31, 2, 181, 189, 153, 194, 215, 189, 19, 81, 201, 59, 130, 126, 188, 187, 170, 36, 163, 62, 73, 178, 48, 62, 179, 200, 36, 62, 171, 127, 212, 61, 199, 10, 57, 190, 123, 4, 105, 189, 230, 240, 169, 60, 197, 180, 204, 60, 145, 178, 78, 190, 76, 13, 35, 189, 213, 52, 110, 187, 79, 248, 80, 189, 2, 215, 88, 62, 194, 76, 110, 62, 60, 149, 134, 190, 108, 235, 42, 186, 60, 121, 19, 190, 105, 38, 222, 60, 235, 209, 210, 61, 102, 187, 175, 61, 4, 55, 235, 61, 219, 244, 148, 189, 3, 189, 199, 189, 110, 244, 135, 60, 70, 152, 44, 62, 221, 97, 5, 190, 228, 50, 208, 60, 237, 236, 119, 189, 68, 174, 251, 188, 108, 148, 86, 190, 11, 145, 226, 61, 109, 32, 43, 190, 156, 176, 168, 61, 212, 161, 9, 62, 39, 126, 205, 61, 54, 72, 168, 60, 239, 108, 184, 190, 121, 170, 226, 60, 18, 88, 21, 189, 249, 41, 214, 60, 131, 152, 55, 62, 236, 72, 131, 188, 87, 94, 242, 189, 16, 167, 94, 190, 104, 146, 88, 61, 43, 255, 178, 60, 65, 197, 41, 62, 91, 206, 242, 61, 78, 78, 51, 62, 127, 218, 81, 61, 77, 192, 124, 186, 106, 80, 207, 61, 192, 247, 1, 61, 251, 85, 219, 61, 203, 208, 11, 189, 51, 100, 74, 61, 232, 204, 117, 61, 245, 35, 0, 61, 49, 220, 44, 190, 67, 244, 16, 62, 57, 236, 21, 62, 253, 87, 106, 189, 5, 58, 0, 61, 117, 152, 5, 190, 186, 12, 25, 62, 135, 29, 222, 189, 151, 252, 88, 188, 222, 32, 7, 62, 83, 217, 247, 61, 205, 136, 73, 61, 88, 29, 15, 190, 130, 200, 4, 62, 55, 210, 217, 61, 157, 70, 87, 190, 70, 227, 216, 61, 252, 66, 101, 61, 61, 160, 45, 190, 2, 41, 183, 189, 58, 9, 36, 61, 164, 181, 43, 62, 147, 213, 62, 61, 254, 237, 107, 59, 100, 148, 241, 189, 146, 106, 187, 187, 13, 67, 155, 190, 245, 146, 114, 62, 67, 106, 125, 190, 97, 161, 216, 189, 136, 219, 148, 189, 58, 44, 167, 60, 57, 226, 218, 61, 114, 141, 142, 189, 74, 81, 14, 189, 95, 117, 46, 62, 237, 203, 76, 189, 17, 62, 243, 61, 114, 72, 128, 189, 150, 200, 59, 190, 91, 225, 52, 61, 127, 251, 78, 188, 58, 101, 11, 60, 171, 66, 119, 61, 108, 142, 1, 189, 236, 235, 179, 61, 86, 133, 156, 61, 56, 8, 99, 189, 130, 142, 29, 62, 165, 151, 24, 62, 234, 20, 62, 61, 21, 200, 159, 189, 139, 249, 240, 189, 188, 75, 120, 190, 85, 211, 38, 188, 139, 230, 134, 61, 80, 73, 32, 190, 167, 106, 82, 62, 18, 122, 210, 61, 3, 106, 100, 59, 133, 175, 157, 61, 83, 89, 248, 60, 70, 152, 128, 189, 45, 246, 231, 61, 38, 141, 118, 188, 116, 247, 40, 189, 221, 134, 185, 188, 118, 210, 60, 61, 103, 50, 78, 61, 100, 171, 128, 61, 226, 233, 105, 62, 67, 145, 164, 61, 38, 235, 200, 61, 30, 223, 8, 190, 174, 249, 157, 188, 233, 1, 141, 189, 53, 137, 15, 62, 47, 55, 9, 190, 201, 217, 77, 188, 70, 114, 16, 190, 42, 233, 208, 61, 250, 222, 3, 189, 56, 172, 54, 189, 47, 192, 101, 190, 149, 213, 37, 62, 196, 53, 9, 190, 99, 207, 58, 189, 164, 252, 129, 190, 137, 13, 14, 62, 33, 109, 132, 61, 121, 169, 168, 61, 62, 205, 1, 62, 27, 121, 134, 190, 206, 18, 15, 189, 184, 246, 26, 190, 13, 32, 164, 61, 155, 4, 41, 62, 151, 104, 13, 189, 167, 219, 183, 62, 157, 59, 176, 62, 83, 182, 67, 62, 223, 123, 188, 189, 80, 56, 207, 61, 28, 103, 246, 188, 134, 169, 102, 62, 254, 19, 180, 189, 9, 53, 147, 62, 54, 89, 210, 189, 12, 205, 57, 62, 154, 97, 13, 61, 13, 106, 27, 61, 139, 217, 128, 190, 192, 200, 155, 189, 48, 97, 118, 62, 5, 62, 26, 62, 66, 237, 29, 61, 229, 185, 86, 189, 109, 232, 49, 62, 149, 59, 11, 189, 50, 16, 186, 62, 158, 8, 157, 61, 15, 115, 202, 61, 171, 179, 98, 62, 193, 110, 143, 190, 54, 26, 21, 62, 32, 118, 63, 190, 35, 152, 59, 62, 236, 156, 5, 61, 210, 192, 236, 61, 39, 115, 108, 61, 84, 85, 109, 189, 248, 215, 217, 60, 168, 106, 101, 190, 87, 162, 24, 190, 238, 184, 160, 61, 210, 174, 203, 189, 108, 80, 4, 189, 107, 154, 171, 189, 185, 161, 7, 189, 172, 53, 72, 61, 100, 110, 106, 190, 158, 236, 172, 190, 13, 180, 142, 188, 3, 214, 1, 187, 130, 131, 4, 61, 107, 190, 204, 190, 4, 31, 110, 189, 72, 7, 55, 62, 153, 120, 205, 189, 177, 106, 122, 61, 129, 219, 194, 188, 157, 94, 3, 62, 103, 130, 70, 60, 48, 52, 203, 189, 215, 79, 41, 62, 111, 253, 99, 60, 167, 111, 80, 62, 174, 245, 15, 188, 98, 55, 11, 62, 168, 195, 213, 189, 27, 105, 153, 61, 65, 51, 12, 190, 71, 4, 194, 61, 42, 64, 226, 189, 152, 41, 15, 190, 212, 150, 53, 190, 122, 94, 36, 190, 75, 65, 176, 189, 105, 193, 35, 61, 91, 52, 227, 189, 217, 29, 189, 61, 3, 66, 145, 189, 200, 250, 125, 190, 48, 113, 121, 189, 65, 219, 9, 61, 219, 30, 16, 62, 229, 62, 170, 61, 146, 165, 6, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 124, 27, 188, 130, 165, 69, 61, 117, 246, 67, 189, 41, 111, 90, 62, 227, 239, 133, 62, 219, 2, 84, 62, 214, 42, 17, 190, 125, 122, 239, 61, 28, 1, 57, 190, 141, 48, 42, 190, 136, 242, 241, 61, 4, 208, 184, 189, 226, 81, 50, 190, 226, 152, 205, 189, 229, 13, 121, 61, 126, 109, 227, 189, 222, 155, 2, 62, 178, 128, 206, 60, 249, 191, 33, 61, 182, 91, 78, 61, 182, 166, 11, 62, 224, 226, 133, 189, 27, 65, 52, 190, 107, 202, 220, 61, 249, 158, 111, 189, 83, 115, 22, 61, 213, 32, 152, 60, 197, 238, 244, 189, 220, 125, 92, 190, 27, 86, 224, 189, 8, 107, 64, 62, 187, 60, 46, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 245, 84, 190, 25, 28, 194, 61, 104, 149, 59, 190, 44, 12, 106, 62, 177, 189, 130, 61, 37, 220, 2, 190, 58, 201, 155, 61, 158, 42, 95, 190, 155, 189, 30, 62, 169, 163, 87, 190, 239, 102, 77, 62, 243, 77, 109, 61, 153, 111, 234, 61, 240, 208, 4, 190, 244, 198, 133, 190, 145, 234, 190, 61, 191, 24, 219, 62, 108, 158, 217, 61, 27, 89, 254, 61, 38, 187, 197, 61, 213, 78, 221, 189, 63, 79, 123, 190, 190, 113, 51, 189, 139, 243, 59, 62, 186, 3, 41, 62, 58, 20, 42, 62, 123, 220, 195, 189, 56, 102, 68, 189, 254, 227, 5, 62, 77, 40, 172, 190, 132, 53, 118, 62, 247, 108, 7, 62, 140, 212, 87, 190, 91, 191, 82, 190, 251, 143, 152, 61, 196, 224, 240, 189, 55, 119, 65, 190, 126, 237, 106, 190, 204, 140, 246, 61, 58, 235, 96, 61, 198, 51, 242, 189, 3, 78, 75, 61, 252, 191, 86, 60, 218, 4, 47, 190, 168, 196, 234, 60, 136, 43, 133, 189, 188, 109, 142, 61, 243, 54, 94, 189, 80, 117, 252, 188, 233, 176, 151, 61, 141, 6, 0, 62, 232, 232, 230, 189, 223, 45, 20, 62, 60, 115, 30, 190, 215, 138, 172, 186, 195, 144, 70, 62, 75, 85, 136, 188, 103, 214, 209, 61, 145, 220, 21, 190, 98, 216, 100, 62, 168, 176, 10, 190, 41, 26, 205, 61, 245, 129, 58, 189, 37, 89, 209, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 130, 164, 188, 114, 241, 229, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {0, 237, 202, 191, 144, 93, 61, 62, 223, 34, 195, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {51, 246, 0, 191, 255, 232, 231, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0006/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}