// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 196, 95, 63, 110, 202, 106, 191, 235, 146, 179, 190, 1, 141, 133, 61, 52, 31, 28, 191, 44, 245, 171, 62, 20, 218, 100, 190, 191, 93, 67, 63, 2, 195, 133, 188, 57, 227, 37, 191, 110, 207, 172, 62, 30, 16, 186, 62, 136, 80, 63, 191, 248, 204, 140, 189, 245, 241, 39, 190, 72, 109, 221, 62, 146, 56, 120, 191, 237, 22, 223, 61, 104, 138, 202, 189, 0, 179, 234, 61, 71, 5, 128, 61, 193, 192, 235, 62, 76, 92, 129, 190, 161, 2, 237, 60, 157, 45, 201, 190, 235, 119, 104, 191, 48, 125, 217, 189, 250, 204, 66, 62, 22, 137, 128, 63, 164, 35, 65, 190, 1, 101, 64, 63, 111, 60, 132, 191, 85, 202, 110, 190, 108, 31, 147, 62, 22, 232, 197, 190, 189, 8, 186, 190, 89, 56, 39, 191, 93, 141, 197, 190, 250, 74, 91, 61, 172, 158, 21, 63, 248, 68, 119, 61, 180, 35, 235, 190, 165, 218, 84, 190, 0, 67, 87, 63, 208, 227, 48, 62, 199, 200, 243, 61, 62, 190, 253, 61, 83, 96, 189, 190, 188, 43, 29, 190, 71, 196, 67, 63, 254, 81, 204, 189, 98, 49, 206, 62, 166, 207, 135, 63, 87, 117, 91, 62, 193, 31, 239, 60, 7, 0, 80, 62, 136, 79, 157, 190, 50, 225, 77, 190, 226, 53, 165, 191, 49, 12, 139, 190, 102, 1, 79, 63, 39, 33, 53, 190, 74, 123, 135, 62, 231, 172, 37, 63, 38, 103, 221, 190, 30, 148, 236, 190, 46, 34, 232, 190, 149, 9, 1, 62, 125, 48, 172, 190, 86, 57, 144, 62, 45, 67, 51, 61, 23, 124, 21, 63, 142, 238, 39, 63, 60, 211, 160, 63, 146, 126, 129, 62, 239, 76, 4, 191, 172, 120, 143, 191, 107, 103, 19, 62, 152, 235, 57, 191, 151, 211, 179, 191, 131, 99, 185, 190, 82, 129, 5, 62, 251, 33, 24, 62, 26, 226, 195, 190, 132, 214, 193, 190, 145, 51, 147, 63, 0, 77, 31, 63, 90, 99, 72, 191, 109, 188, 227, 189, 183, 183, 34, 63, 247, 191, 21, 63, 54, 95, 78, 190, 12, 120, 12, 63, 24, 198, 86, 63, 187, 7, 69, 63, 176, 0, 150, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 31, 14, 191, 122, 81, 90, 62, 206, 19, 156, 62, 82, 146, 4, 62, 22, 250, 170, 62, 74, 189, 235, 62, 10, 190, 13, 63, 97, 47, 240, 62, 166, 4, 2, 63, 89, 191, 13, 190, 102, 178, 20, 62, 239, 151, 152, 189, 188, 203, 32, 63, 9, 69, 248, 188, 53, 10, 8, 190, 223, 179, 229, 190, 188, 213, 223, 62, 1, 173, 46, 188, 219, 211, 14, 63, 132, 231, 12, 190, 65, 106, 99, 62, 169, 100, 85, 191, 166, 212, 21, 63, 4, 52, 66, 190, 251, 116, 153, 62, 33, 44, 206, 62, 133, 75, 230, 190, 17, 36, 8, 62, 41, 203, 186, 60, 227, 144, 144, 189, 224, 217, 26, 61, 206, 91, 15, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 209, 6, 191, 85, 65, 154, 190, 115, 207, 117, 61, 86, 78, 169, 190, 139, 171, 191, 61, 29, 13, 138, 189, 24, 124, 33, 62, 107, 254, 156, 61, 140, 4, 76, 190, 206, 233, 136, 190, 135, 143, 211, 61, 79, 158, 107, 190, 10, 106, 15, 62, 26, 229, 210, 60, 82, 171, 48, 190, 207, 201, 47, 59, 164, 233, 45, 62, 28, 143, 192, 62, 93, 31, 78, 62, 170, 34, 80, 62, 160, 116, 173, 60, 52, 86, 26, 190, 147, 129, 134, 61, 128, 205, 206, 61, 118, 9, 22, 62, 114, 243, 197, 188, 72, 19, 172, 61, 28, 57, 19, 62, 38, 144, 21, 190, 146, 111, 158, 190, 103, 60, 146, 61, 217, 42, 176, 62, 108, 210, 140, 189, 116, 254, 195, 60, 122, 66, 188, 189, 41, 179, 211, 189, 136, 214, 28, 62, 90, 57, 177, 62, 3, 91, 27, 62, 209, 17, 146, 62, 165, 33, 131, 62, 85, 58, 88, 191, 89, 170, 73, 62, 174, 99, 96, 190, 27, 198, 164, 61, 8, 114, 124, 61, 189, 191, 135, 61, 165, 244, 83, 61, 253, 137, 142, 189, 191, 88, 193, 190, 34, 209, 27, 61, 60, 178, 103, 190, 25, 201, 26, 62, 44, 76, 54, 189, 208, 82, 8, 61, 168, 241, 11, 189, 43, 96, 159, 61, 232, 9, 177, 60, 41, 16, 203, 61, 0, 30, 64, 190, 194, 6, 85, 190, 8, 181, 80, 186, 160, 209, 117, 189, 143, 69, 90, 190, 216, 63, 254, 189, 204, 87, 21, 62, 41, 167, 69, 191, 82, 121, 4, 62, 170, 206, 236, 61, 157, 155, 12, 63, 159, 153, 17, 62, 200, 215, 23, 62, 227, 131, 176, 62, 169, 227, 54, 190, 42, 128, 70, 190, 74, 64, 159, 61, 234, 102, 129, 62, 98, 184, 42, 60, 254, 55, 8, 190, 72, 187, 220, 190, 89, 39, 11, 191, 119, 221, 229, 190, 0, 31, 79, 190, 247, 207, 9, 61, 202, 227, 167, 189, 56, 202, 15, 61, 241, 11, 19, 62, 215, 82, 18, 191, 179, 51, 201, 190, 123, 240, 91, 62, 92, 172, 73, 189, 150, 146, 79, 190, 198, 21, 191, 190, 60, 242, 215, 190, 220, 63, 85, 190, 82, 59, 181, 189, 152, 202, 149, 61, 179, 60, 131, 61, 127, 125, 189, 189, 33, 144, 17, 61, 18, 30, 124, 189, 121, 173, 174, 62, 116, 146, 130, 189, 203, 90, 129, 62, 141, 54, 27, 62, 201, 184, 211, 190, 18, 225, 58, 62, 229, 8, 15, 61, 181, 148, 74, 188, 2, 93, 137, 188, 99, 69, 37, 190, 237, 244, 17, 62, 177, 104, 138, 61, 72, 78, 225, 190, 155, 249, 82, 62, 118, 174, 122, 191, 195, 1, 2, 187, 250, 20, 124, 188, 128, 127, 64, 190, 249, 22, 129, 190, 233, 250, 113, 190, 44, 64, 60, 190, 215, 32, 24, 191, 30, 166, 63, 62, 93, 56, 234, 61, 34, 124, 4, 62, 104, 229, 98, 189, 130, 53, 19, 191, 195, 229, 158, 189, 162, 53, 237, 60, 177, 36, 225, 62, 209, 165, 53, 189, 183, 13, 212, 189, 240, 52, 6, 62, 172, 31, 63, 62, 32, 74, 19, 62, 100, 238, 153, 61, 134, 246, 95, 61, 183, 47, 44, 62, 163, 232, 113, 60, 183, 155, 5, 62, 167, 17, 84, 62, 79, 22, 140, 62, 229, 30, 148, 189, 130, 80, 149, 62, 115, 21, 136, 62, 69, 233, 130, 62, 32, 117, 109, 190, 51, 222, 191, 189, 151, 47, 147, 189, 56, 225, 25, 62, 71, 250, 125, 188, 95, 28, 142, 62, 113, 246, 1, 62, 46, 11, 145, 60, 179, 177, 197, 189, 19, 166, 105, 189, 208, 241, 80, 61, 204, 138, 42, 190, 142, 175, 22, 188, 18, 99, 248, 190, 68, 184, 12, 62, 78, 230, 221, 61, 122, 80, 209, 188, 1, 32, 36, 62, 114, 100, 82, 62, 70, 173, 149, 62, 235, 148, 162, 61, 134, 49, 30, 62, 102, 112, 59, 189, 44, 69, 114, 189, 124, 101, 103, 190, 91, 99, 93, 62, 92, 32, 4, 190, 80, 148, 62, 190, 139, 58, 157, 188, 75, 11, 178, 60, 126, 194, 60, 61, 155, 182, 76, 62, 25, 60, 17, 190, 45, 232, 153, 61, 120, 57, 105, 61, 49, 135, 40, 190, 187, 203, 5, 190, 128, 46, 87, 61, 216, 43, 83, 61, 205, 236, 105, 61, 231, 126, 32, 62, 206, 125, 115, 190, 253, 125, 235, 189, 25, 81, 128, 62, 71, 254, 31, 61, 203, 86, 26, 191, 150, 209, 86, 61, 122, 58, 111, 191, 9, 4, 66, 189, 176, 27, 253, 188, 87, 160, 85, 62, 152, 113, 170, 189, 113, 176, 187, 61, 26, 215, 150, 62, 171, 95, 34, 62, 236, 105, 143, 62, 64, 210, 218, 190, 233, 96, 68, 62, 145, 46, 236, 190, 10, 112, 24, 190, 131, 196, 148, 190, 59, 194, 41, 191, 152, 22, 25, 191, 229, 147, 0, 190, 172, 11, 177, 61, 244, 159, 66, 61, 184, 2, 237, 190, 95, 155, 55, 190, 10, 51, 34, 187, 121, 255, 111, 189, 214, 144, 131, 62, 140, 169, 54, 62, 208, 83, 170, 190, 190, 22, 239, 190, 202, 102, 38, 189, 14, 161, 42, 189, 255, 96, 147, 190, 205, 60, 22, 191, 236, 83, 193, 190, 81, 182, 25, 62, 219, 180, 48, 190, 37, 218, 135, 62, 224, 28, 133, 190, 251, 88, 137, 62, 131, 79, 237, 61, 170, 85, 71, 62, 177, 150, 52, 62, 185, 15, 159, 189, 237, 255, 96, 190, 164, 232, 148, 62, 26, 167, 176, 190, 72, 179, 121, 190, 56, 237, 87, 189, 19, 181, 85, 62, 72, 203, 117, 62, 219, 144, 216, 189, 106, 206, 9, 62, 243, 83, 153, 62, 5, 189, 184, 189, 114, 244, 85, 62, 242, 171, 205, 62, 190, 31, 71, 62, 85, 122, 64, 190, 253, 224, 62, 62, 93, 114, 50, 61, 137, 148, 200, 190, 209, 205, 104, 191, 179, 81, 67, 62, 109, 1, 180, 62, 149, 197, 70, 190, 101, 219, 25, 190, 148, 60, 13, 61, 70, 95, 97, 188, 84, 2, 195, 61, 133, 122, 91, 61, 136, 206, 39, 188, 142, 176, 40, 61, 140, 239, 135, 189, 126, 142, 242, 60, 19, 70, 4, 62, 154, 122, 131, 61, 13, 216, 16, 62, 111, 253, 17, 61, 101, 191, 167, 60, 225, 173, 160, 61, 178, 129, 251, 189, 27, 51, 30, 190, 83, 14, 62, 61, 99, 158, 204, 60, 206, 7, 21, 189, 74, 135, 125, 188, 113, 194, 149, 189, 198, 148, 130, 187, 94, 222, 16, 190, 233, 234, 53, 190, 143, 207, 36, 190, 57, 58, 173, 189, 23, 28, 104, 189, 111, 32, 217, 189, 96, 25, 42, 61, 34, 156, 7, 190, 90, 188, 56, 191, 9, 245, 11, 62, 197, 196, 38, 62, 124, 163, 154, 190, 240, 4, 89, 62, 91, 234, 128, 189, 232, 137, 129, 61, 17, 48, 95, 62, 137, 37, 23, 62, 199, 255, 0, 62, 212, 228, 121, 189, 230, 41, 32, 190, 159, 121, 15, 62, 50, 44, 225, 189, 246, 242, 84, 191, 207, 74, 109, 190, 34, 44, 30, 62, 221, 165, 123, 62, 215, 160, 100, 61, 192, 214, 168, 62, 234, 113, 114, 62, 126, 5, 157, 190, 93, 90, 227, 61, 22, 14, 171, 60, 108, 250, 194, 61, 141, 150, 157, 62, 139, 45, 123, 62, 169, 222, 44, 62, 192, 228, 124, 190, 23, 166, 201, 188, 111, 159, 110, 62, 193, 95, 5, 63, 192, 88, 189, 62, 30, 202, 135, 61, 3, 109, 130, 60, 39, 57, 82, 62, 223, 115, 12, 190, 105, 240, 47, 62, 132, 234, 221, 189, 125, 54, 2, 62, 207, 16, 193, 61, 55, 17, 67, 190, 118, 155, 69, 62, 76, 230, 175, 61, 27, 248, 205, 61, 205, 60, 1, 190, 247, 134, 170, 62, 183, 238, 254, 189, 103, 107, 158, 189, 12, 242, 23, 190, 221, 229, 71, 60, 245, 127, 55, 191, 243, 110, 142, 61, 160, 102, 170, 61, 253, 209, 152, 61, 232, 2, 57, 190, 174, 186, 118, 189, 50, 53, 177, 190, 136, 61, 14, 191, 133, 39, 67, 189, 19, 143, 126, 62, 63, 50, 221, 60, 233, 142, 250, 189, 110, 55, 192, 190, 198, 222, 139, 61, 231, 48, 193, 61, 84, 180, 146, 189, 55, 181, 177, 189, 32, 24, 37, 61, 213, 168, 99, 60, 112, 67, 28, 62, 74, 149, 158, 60, 205, 179, 139, 189, 57, 49, 17, 61, 145, 4, 169, 60, 195, 3, 61, 61, 216, 88, 189, 60, 179, 226, 251, 189, 253, 230, 210, 189, 73, 66, 10, 190, 89, 178, 113, 189, 169, 252, 65, 61, 190, 47, 5, 62, 239, 225, 73, 61, 168, 219, 44, 189, 3, 40, 96, 189, 197, 77, 27, 189, 6, 139, 7, 190, 32, 24, 250, 189, 197, 92, 36, 190, 25, 152, 10, 188, 182, 86, 53, 189, 53, 235, 19, 190, 144, 96, 66, 61, 157, 130, 15, 189, 199, 56, 118, 188, 144, 154, 222, 61, 173, 197, 208, 61, 252, 224, 84, 191, 85, 139, 4, 190, 11, 11, 144, 190, 13, 176, 107, 62, 87, 237, 25, 190, 48, 175, 217, 61, 117, 73, 144, 62, 216, 155, 99, 191, 200, 157, 175, 62, 132, 255, 49, 190, 179, 252, 152, 62, 121, 11, 16, 189, 88, 94, 25, 61, 167, 25, 60, 190, 80, 198, 4, 191, 94, 215, 246, 190, 193, 5, 11, 190, 226, 69, 182, 61, 248, 234, 161, 61, 221, 34, 34, 61, 55, 240, 158, 190, 178, 23, 151, 190, 249, 18, 78, 190, 175, 101, 208, 62, 20, 28, 6, 62, 185, 85, 52, 190, 239, 5, 112, 190, 5, 113, 145, 61, 96, 42, 94, 61, 56, 176, 66, 191, 115, 131, 86, 190, 132, 184, 2, 191, 6, 136, 16, 190, 233, 102, 80, 188, 161, 172, 190, 61, 121, 43, 49, 191, 150, 158, 42, 62, 39, 160, 76, 189, 113, 142, 97, 62, 89, 254, 10, 190, 126, 10, 134, 189, 206, 176, 116, 190, 212, 177, 206, 62, 22, 118, 161, 60, 125, 78, 251, 61, 160, 73, 205, 189, 105, 9, 114, 189, 32, 175, 50, 62, 68, 255, 244, 61, 187, 225, 231, 61, 132, 66, 82, 61, 180, 48, 178, 190, 23, 110, 90, 62, 14, 177, 60, 190, 121, 72, 236, 62, 164, 42, 34, 190, 181, 201, 65, 62, 4, 193, 57, 62, 154, 138, 213, 190, 64, 120, 35, 191, 92, 108, 164, 189, 25, 129, 164, 60, 235, 51, 78, 191, 214, 111, 230, 190, 230, 13, 163, 61, 183, 9, 26, 62, 28, 252, 206, 62, 157, 139, 193, 190, 157, 124, 189, 61, 188, 132, 136, 61, 179, 97, 0, 62, 79, 9, 48, 61, 167, 229, 147, 190, 5, 163, 130, 190, 72, 184, 149, 62, 142, 196, 13, 190, 62, 212, 147, 189, 212, 27, 21, 190, 116, 231, 229, 61, 181, 133, 79, 62, 142, 15, 80, 62, 47, 105, 151, 62, 97, 96, 87, 62, 205, 103, 163, 190, 172, 192, 158, 62, 199, 31, 78, 62, 57, 147, 111, 62, 54, 110, 133, 189, 40, 89, 42, 62, 192, 200, 7, 189, 129, 224, 173, 190, 105, 160, 35, 191, 206, 215, 0, 62, 160, 20, 229, 61, 218, 247, 1, 61, 52, 56, 173, 187, 51, 204, 175, 60, 165, 35, 159, 190, 215, 217, 180, 61, 167, 2, 141, 187, 72, 45, 122, 61, 216, 144, 205, 61, 204, 52, 121, 190, 202, 167, 224, 62, 105, 148, 33, 62, 144, 244, 218, 61, 214, 196, 214, 188, 7, 154, 116, 189, 74, 155, 66, 191, 213, 187, 154, 189, 220, 153, 106, 62, 195, 190, 28, 190, 12, 80, 31, 60, 191, 166, 117, 189, 8, 243, 63, 62, 141, 28, 84, 61, 204, 155, 34, 62, 172, 18, 59, 190, 41, 192, 3, 190, 89, 6, 101, 62, 55, 96, 225, 61, 114, 76, 155, 188, 232, 48, 102, 191, 190, 38, 137, 62, 169, 233, 35, 62, 162, 127, 237, 189, 19, 156, 76, 189, 115, 47, 101, 62, 48, 79, 158, 62, 93, 232, 31, 62, 150, 161, 46, 61, 252, 203, 176, 61, 43, 30, 130, 62, 246, 205, 41, 61, 65, 123, 187, 61, 201, 61, 231, 190, 152, 189, 176, 62, 54, 231, 225, 189, 12, 146, 128, 62, 86, 101, 59, 60, 62, 49, 59, 63, 58, 96, 204, 190, 225, 110, 2, 189, 23, 141, 131, 190, 159, 126, 196, 190, 127, 174, 142, 191, 210, 97, 119, 188, 17, 217, 113, 187, 158, 160, 227, 189, 235, 44, 39, 190, 205, 150, 116, 189, 106, 14, 228, 190, 13, 209, 173, 191, 0, 110, 27, 191, 36, 114, 120, 62, 247, 41, 199, 188, 246, 71, 254, 189, 103, 213, 27, 191, 55, 26, 73, 191, 82, 144, 213, 190, 17, 95, 77, 62, 255, 40, 1, 191, 204, 171, 240, 62, 226, 151, 6, 62, 21, 66, 160, 62, 161, 181, 180, 187, 161, 44, 150, 62, 180, 227, 54, 62, 68, 211, 83, 191, 203, 195, 26, 190, 109, 47, 100, 62, 42, 83, 242, 190, 132, 131, 84, 188, 139, 235, 182, 190, 119, 93, 42, 60, 49, 78, 116, 62, 14, 48, 128, 57, 84, 237, 19, 62, 129, 189, 26, 189, 41, 4, 234, 190, 42, 146, 182, 61, 212, 47, 14, 189, 154, 207, 126, 62, 13, 213, 150, 62, 106, 160, 194, 62, 242, 196, 87, 62, 227, 85, 80, 190, 239, 218, 25, 191, 237, 16, 97, 61, 73, 32, 24, 188, 11, 112, 218, 62, 37, 45, 18, 62, 181, 227, 101, 62, 31, 204, 163, 62, 54, 58, 96, 189, 151, 214, 196, 61, 15, 108, 22, 62, 99, 80, 191, 61, 197, 130, 71, 188, 64, 217, 189, 58, 227, 9, 206, 62, 114, 208, 85, 62, 80, 159, 215, 189, 39, 237, 147, 61, 25, 144, 5, 63, 230, 146, 136, 62, 195, 226, 149, 189, 33, 210, 161, 190, 209, 153, 210, 189, 161, 247, 167, 190, 21, 179, 161, 61, 149, 237, 70, 62, 216, 2, 25, 188, 86, 249, 175, 190, 169, 225, 97, 190, 101, 200, 180, 190, 80, 22, 163, 190, 235, 29, 128, 190, 217, 187, 133, 62, 163, 33, 11, 62, 139, 22, 140, 190, 80, 183, 13, 190, 214, 68, 138, 60, 182, 138, 226, 61, 131, 3, 22, 62, 175, 59, 10, 62, 207, 242, 32, 190, 143, 237, 150, 61, 127, 51, 84, 189, 97, 34, 144, 61, 15, 47, 29, 190, 230, 191, 222, 188, 113, 65, 24, 190, 42, 100, 142, 189, 169, 150, 91, 189, 32, 187, 133, 189, 197, 196, 38, 189, 199, 146, 48, 190, 29, 182, 17, 189, 195, 80, 252, 188, 54, 46, 218, 61, 15, 5, 232, 61, 187, 198, 49, 190, 13, 108, 165, 188, 167, 217, 207, 60, 152, 45, 5, 61, 247, 211, 9, 190, 188, 163, 10, 190, 109, 239, 10, 189, 136, 208, 36, 190, 156, 43, 195, 189, 132, 221, 32, 61, 184, 153, 4, 190, 202, 203, 39, 62, 246, 15, 171, 60, 54, 108, 247, 189, 253, 208, 228, 188, 110, 122, 145, 61, 12, 177, 156, 189, 46, 20, 184, 188, 107, 164, 138, 189, 123, 211, 30, 189, 158, 109, 220, 189, 132, 115, 50, 190, 9, 222, 202, 189, 14, 241, 49, 61, 23, 49, 97, 61, 37, 171, 41, 190, 234, 111, 31, 62, 208, 183, 21, 190, 44, 232, 13, 190, 41, 87, 162, 61, 48, 179, 132, 61, 87, 28, 130, 61, 97, 25, 229, 60, 188, 100, 31, 62, 61, 165, 31, 190, 75, 90, 185, 189, 78, 54, 242, 189, 179, 49, 65, 189, 36, 195, 122, 189, 68, 220, 215, 189, 181, 70, 41, 190, 65, 111, 250, 189, 160, 162, 105, 59, 47, 114, 42, 62, 234, 68, 150, 190, 9, 238, 117, 190, 42, 59, 167, 189, 169, 23, 55, 62, 27, 177, 61, 62, 107, 92, 197, 190, 239, 197, 147, 62, 86, 68, 17, 189, 115, 235, 80, 190, 242, 235, 214, 60, 186, 133, 82, 190, 144, 71, 117, 190, 162, 133, 240, 60, 44, 36, 175, 189, 197, 16, 190, 189, 234, 43, 7, 189, 40, 6, 45, 62, 24, 40, 43, 60, 81, 145, 83, 62, 161, 238, 155, 190, 163, 173, 198, 190, 57, 134, 145, 190, 119, 79, 109, 62, 167, 52, 218, 189, 28, 117, 81, 60, 85, 184, 209, 187, 113, 170, 178, 190, 187, 238, 7, 62, 134, 4, 203, 190, 226, 176, 109, 191, 132, 194, 170, 190, 193, 47, 187, 190, 205, 223, 168, 59, 27, 29, 94, 187, 127, 123, 35, 189, 231, 179, 249, 189, 231, 80, 94, 186, 221, 219, 227, 189, 81, 57, 45, 60, 198, 129, 16, 190, 7, 143, 44, 190, 48, 152, 195, 61, 189, 78, 180, 60, 139, 136, 222, 61, 226, 85, 1, 62, 187, 141, 116, 61, 139, 80, 175, 61, 127, 18, 242, 61, 130, 71, 36, 189, 56, 31, 19, 62, 77, 63, 54, 189, 46, 181, 54, 189, 66, 63, 42, 190, 121, 96, 23, 190, 131, 234, 16, 190, 112, 27, 42, 190, 124, 58, 224, 60, 250, 48, 127, 61, 5, 141, 216, 189, 47, 188, 50, 190, 139, 253, 37, 190, 79, 146, 138, 61, 252, 92, 41, 62, 82, 234, 11, 62, 33, 127, 11, 62, 252, 91, 29, 62, 221, 232, 215, 190, 146, 132, 180, 60, 113, 220, 232, 189, 175, 94, 61, 61, 105, 123, 223, 60, 202, 226, 204, 60, 53, 204, 150, 62, 153, 50, 151, 61, 23, 84, 140, 62, 20, 158, 34, 190, 14, 243, 119, 62, 250, 98, 53, 190, 213, 33, 211, 62, 185, 221, 209, 190, 98, 55, 232, 190, 235, 204, 35, 191, 60, 240, 186, 188, 46, 61, 171, 190, 96, 201, 104, 190, 77, 51, 45, 191, 112, 220, 128, 190, 109, 232, 48, 189, 141, 200, 131, 190, 85, 23, 162, 62, 187, 134, 131, 189, 238, 125, 87, 190, 191, 173, 178, 190, 98, 103, 57, 61, 16, 94, 216, 61, 118, 12, 100, 191, 28, 213, 40, 61, 161, 125, 119, 62, 59, 80, 151, 190, 239, 146, 165, 190, 171, 153, 158, 61, 174, 15, 151, 61, 61, 225, 220, 59, 33, 68, 111, 62, 41, 32, 209, 188, 139, 201, 224, 62, 20, 78, 10, 62, 150, 200, 5, 62, 45, 249, 17, 190, 90, 226, 147, 62, 230, 110, 103, 190, 245, 198, 97, 61, 213, 21, 214, 189, 74, 113, 24, 191, 82, 206, 234, 61, 18, 27, 72, 189, 85, 20, 172, 62, 52, 100, 39, 62, 246, 254, 135, 62, 159, 246, 107, 61, 206, 22, 199, 190, 17, 5, 142, 62, 127, 109, 143, 61, 51, 127, 41, 62, 204, 73, 244, 190, 153, 70, 130, 188, 149, 167, 23, 60, 76, 20, 23, 191, 130, 59, 201, 62, 94, 70, 91, 60, 68, 159, 0, 190, 52, 182, 14, 62, 6, 134, 84, 190, 141, 141, 102, 62, 68, 157, 27, 62, 19, 196, 108, 62, 202, 129, 71, 187, 227, 105, 18, 190, 151, 96, 2, 62, 238, 69, 27, 61, 228, 63, 212, 61, 26, 255, 199, 189, 138, 100, 54, 61, 56, 223, 48, 190, 35, 116, 98, 61, 12, 5, 34, 190, 114, 126, 23, 61, 208, 40, 51, 191, 142, 235, 223, 61, 44, 150, 32, 62, 250, 11, 1, 188, 223, 193, 24, 191, 234, 213, 53, 190, 183, 173, 141, 61, 185, 186, 246, 190, 62, 156, 17, 190, 65, 194, 200, 62, 193, 203, 72, 190, 186, 21, 1, 191, 50, 29, 125, 190, 33, 191, 140, 190, 116, 105, 43, 62, 137, 246, 98, 62, 55, 181, 22, 62, 111, 34, 167, 61, 156, 65, 128, 62, 96, 128, 69, 61, 4, 120, 80, 62, 90, 38, 181, 61, 244, 10, 145, 62, 127, 126, 148, 189, 133, 84, 160, 189, 58, 66, 69, 62, 52, 31, 46, 61, 113, 40, 25, 191, 250, 159, 17, 61, 19, 216, 20, 62, 47, 204, 86, 190, 173, 0, 35, 60, 141, 251, 183, 190, 53, 9, 117, 62, 144, 141, 158, 190, 170, 117, 132, 189, 102, 181, 15, 62, 198, 2, 161, 61, 38, 227, 186, 62, 225, 193, 195, 190, 65, 254, 207, 61, 26, 254, 86, 189, 176, 14, 8, 190, 60, 174, 42, 62, 32, 175, 222, 189, 251, 155, 152, 191, 162, 130, 115, 189, 229, 80, 68, 61, 193, 136, 53, 61, 157, 116, 189, 60, 63, 152, 250, 61, 124, 108, 171, 189, 197, 193, 165, 62, 231, 214, 16, 191, 156, 18, 19, 63, 71, 220, 179, 190, 124, 80, 215, 190, 94, 3, 114, 190, 181, 162, 7, 62, 47, 70, 43, 191, 239, 130, 161, 62, 148, 117, 84, 189, 255, 174, 71, 62, 206, 73, 139, 60, 77, 122, 23, 62, 65, 250, 128, 61, 153, 32, 229, 190, 10, 126, 201, 61, 233, 29, 73, 61, 51, 231, 179, 61, 243, 163, 84, 62, 88, 9, 112, 61, 234, 166, 205, 61, 109, 143, 193, 189, 197, 215, 27, 190, 197, 229, 105, 62, 21, 38, 162, 62, 146, 223, 161, 189, 113, 68, 187, 190, 91, 238, 241, 189, 214, 251, 10, 191, 124, 206, 91, 61, 170, 152, 94, 60, 89, 167, 39, 190, 69, 124, 66, 62, 44, 184, 127, 61, 179, 127, 87, 191, 245, 0, 117, 61, 214, 116, 174, 189, 137, 53, 151, 189, 82, 120, 133, 61, 17, 29, 41, 61, 108, 156, 60, 190, 192, 22, 247, 189, 95, 165, 183, 61, 31, 3, 137, 60, 125, 108, 218, 188, 153, 184, 150, 62, 8, 165, 193, 60, 43, 53, 167, 61, 38, 73, 174, 190, 140, 192, 2, 62, 99, 118, 13, 190, 191, 152, 26, 62, 181, 32, 95, 190, 132, 50, 14, 191, 198, 58, 140, 190, 185, 245, 197, 61, 187, 145, 78, 189, 228, 198, 207, 190, 88, 95, 226, 190, 4, 30, 211, 60, 156, 126, 162, 190, 151, 177, 125, 188, 224, 254, 188, 190, 23, 41, 201, 61, 246, 222, 32, 61, 5, 99, 116, 62, 231, 218, 161, 189, 7, 247, 176, 190, 124, 199, 255, 189, 18, 70, 145, 61, 194, 200, 160, 189, 245, 38, 97, 61, 140, 63, 240, 189, 107, 51, 106, 62, 63, 123, 204, 62, 95, 43, 14, 62, 77, 250, 168, 61, 41, 248, 194, 61, 47, 211, 248, 189, 63, 175, 77, 62, 184, 249, 198, 189, 249, 252, 164, 62, 1, 122, 128, 187, 66, 234, 201, 62, 162, 167, 10, 188, 209, 146, 62, 190, 68, 159, 1, 191, 90, 65, 233, 189, 202, 89, 240, 62, 214, 201, 207, 62, 97, 209, 69, 189, 227, 237, 9, 62, 165, 99, 107, 62, 21, 212, 34, 190, 170, 44, 161, 62, 216, 244, 31, 62, 238, 87, 2, 62, 127, 120, 86, 62, 148, 57, 12, 190, 249, 110, 139, 62, 69, 156, 137, 189, 152, 150, 48, 62, 68, 60, 162, 61, 143, 114, 217, 62, 120, 43, 160, 62, 215, 200, 13, 62, 4, 68, 92, 190, 63, 137, 81, 190, 184, 235, 179, 191, 64, 14, 36, 61, 216, 229, 103, 62, 214, 30, 111, 189, 238, 74, 71, 190, 43, 229, 205, 189, 217, 140, 125, 190, 200, 162, 168, 191, 38, 241, 187, 190, 95, 229, 137, 61, 138, 71, 79, 189, 4, 25, 58, 189, 199, 215, 110, 191, 207, 60, 33, 62, 216, 249, 247, 61, 135, 194, 136, 61, 14, 79, 131, 61, 88, 90, 7, 190, 75, 90, 9, 62, 162, 2, 224, 61, 3, 138, 126, 60, 183, 137, 68, 62, 237, 147, 19, 190, 151, 96, 181, 62, 214, 46, 183, 61, 87, 254, 203, 61, 150, 210, 71, 61, 17, 139, 97, 62, 109, 228, 24, 62, 224, 154, 128, 62, 230, 181, 166, 190, 161, 118, 91, 189, 76, 150, 165, 191, 103, 184, 35, 190, 73, 118, 143, 61, 78, 22, 60, 61, 21, 151, 84, 190, 116, 150, 61, 61, 140, 72, 130, 190, 165, 207, 158, 191, 60, 138, 248, 187, 107, 132, 9, 61, 75, 26, 184, 61, 192, 233, 12, 61, 240, 210, 0, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 44, 116, 188, 141, 221, 139, 61, 77, 47, 170, 61, 217, 186, 89, 62, 210, 154, 201, 62, 213, 139, 155, 62, 105, 65, 216, 188, 163, 133, 76, 62, 0, 234, 63, 190, 231, 62, 165, 189, 40, 201, 207, 61, 10, 208, 192, 189, 80, 178, 49, 190, 93, 3, 103, 59, 240, 105, 64, 62, 110, 48, 172, 189, 146, 80, 85, 62, 15, 12, 73, 62, 239, 208, 134, 188, 182, 91, 78, 61, 182, 166, 11, 62, 143, 183, 69, 188, 27, 65, 52, 190, 239, 121, 21, 62, 169, 3, 11, 189, 85, 160, 18, 61, 245, 8, 204, 61, 95, 146, 22, 190, 148, 185, 106, 190, 126, 131, 246, 189, 123, 212, 124, 62, 128, 108, 123, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 206, 89, 190, 251, 204, 221, 61, 104, 87, 39, 191, 79, 185, 209, 62, 147, 120, 87, 61, 12, 111, 9, 190, 35, 112, 65, 63, 128, 193, 231, 190, 25, 180, 30, 62, 203, 114, 17, 191, 137, 150, 111, 62, 115, 76, 109, 61, 53, 34, 21, 63, 95, 149, 225, 190, 110, 77, 46, 191, 230, 93, 192, 61, 249, 250, 91, 63, 229, 223, 130, 63, 201, 71, 139, 62, 38, 187, 197, 61, 213, 78, 221, 189, 27, 110, 14, 191, 190, 113, 51, 189, 32, 89, 135, 63, 87, 101, 201, 62, 85, 123, 250, 62, 115, 3, 56, 190, 217, 171, 246, 190, 76, 221, 221, 61, 206, 229, 21, 191, 18, 23, 34, 63, 204, 25, 215, 62, 100, 94, 165, 190, 112, 26, 167, 190, 126, 113, 49, 62, 10, 75, 105, 188, 157, 230, 156, 190, 240, 228, 158, 190, 81, 83, 135, 189, 155, 217, 129, 60, 184, 247, 241, 189, 82, 87, 114, 61, 21, 184, 81, 62, 45, 4, 47, 190, 151, 95, 61, 62, 227, 20, 230, 61, 39, 199, 204, 61, 253, 203, 18, 190, 26, 237, 214, 61, 207, 160, 96, 62, 205, 215, 134, 62, 232, 232, 230, 189, 223, 45, 20, 62, 253, 51, 36, 61, 215, 138, 172, 186, 214, 106, 242, 62, 240, 8, 47, 59, 212, 181, 136, 62, 217, 107, 109, 190, 165, 47, 255, 62, 110, 7, 116, 190, 54, 150, 87, 61, 42, 2, 193, 61, 167, 59, 197, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 174, 230, 188, 233, 149, 110, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {120, 0, 197, 190, 222, 50, 144, 190, 96, 168, 6, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {151, 59, 115, 191, 6, 76, 33, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0006/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}