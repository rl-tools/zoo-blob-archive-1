// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 241, 92, 63, 185, 112, 154, 191, 34, 237, 211, 190, 169, 87, 43, 60, 222, 195, 140, 191, 7, 250, 144, 62, 219, 62, 146, 190, 149, 93, 170, 63, 118, 5, 105, 61, 222, 21, 90, 191, 5, 5, 41, 63, 112, 218, 162, 62, 53, 12, 18, 191, 6, 0, 97, 190, 5, 220, 12, 190, 98, 51, 205, 62, 195, 230, 157, 191, 211, 79, 236, 61, 187, 136, 225, 190, 66, 132, 0, 62, 139, 25, 91, 61, 212, 162, 43, 62, 71, 129, 177, 190, 98, 21, 15, 60, 241, 116, 201, 190, 194, 163, 134, 191, 172, 127, 41, 190, 54, 21, 94, 62, 197, 193, 206, 63, 43, 76, 168, 190, 235, 82, 61, 63, 179, 40, 161, 191, 40, 151, 147, 190, 81, 173, 144, 62, 134, 123, 39, 191, 85, 32, 188, 190, 197, 83, 74, 191, 244, 74, 174, 190, 116, 38, 3, 60, 185, 74, 0, 63, 110, 47, 176, 190, 181, 199, 237, 190, 68, 196, 139, 190, 156, 143, 140, 63, 159, 12, 27, 62, 5, 42, 204, 62, 57, 34, 10, 62, 208, 232, 194, 190, 122, 110, 135, 190, 250, 172, 106, 63, 178, 190, 250, 189, 250, 2, 180, 62, 32, 86, 154, 63, 227, 32, 155, 62, 159, 247, 210, 188, 137, 253, 134, 62, 14, 118, 137, 190, 73, 138, 197, 60, 242, 47, 191, 191, 128, 159, 111, 190, 123, 255, 43, 63, 183, 185, 4, 190, 44, 203, 91, 62, 136, 31, 88, 63, 202, 57, 25, 191, 228, 26, 5, 191, 53, 201, 244, 190, 7, 77, 150, 62, 108, 221, 166, 190, 59, 15, 70, 62, 99, 85, 135, 62, 176, 223, 28, 63, 98, 162, 24, 63, 21, 178, 195, 63, 35, 54, 152, 62, 211, 194, 240, 190, 125, 94, 139, 191, 215, 53, 75, 62, 11, 175, 101, 190, 189, 143, 233, 191, 16, 102, 155, 190, 47, 249, 45, 61, 230, 26, 78, 63, 100, 233, 218, 190, 132, 152, 14, 191, 13, 211, 167, 63, 68, 251, 36, 63, 21, 164, 111, 191, 77, 184, 163, 189, 247, 111, 34, 63, 35, 29, 0, 63, 169, 12, 111, 62, 221, 76, 254, 62, 125, 238, 79, 63, 88, 57, 104, 63, 151, 162, 168, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 240, 21, 191, 237, 97, 32, 62, 143, 14, 113, 62, 253, 87, 193, 60, 251, 204, 229, 62, 101, 243, 220, 62, 62, 251, 164, 62, 134, 195, 237, 61, 177, 131, 255, 62, 213, 240, 0, 190, 240, 215, 236, 61, 246, 147, 208, 189, 117, 13, 64, 63, 174, 166, 8, 190, 99, 166, 10, 190, 74, 237, 226, 190, 70, 215, 147, 62, 41, 210, 58, 189, 90, 87, 251, 62, 109, 216, 190, 190, 80, 17, 44, 61, 255, 51, 56, 191, 82, 95, 11, 63, 118, 122, 148, 190, 150, 243, 123, 62, 22, 103, 20, 63, 100, 239, 141, 190, 51, 232, 191, 61, 129, 13, 68, 190, 169, 177, 7, 190, 181, 239, 115, 189, 5, 101, 27, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 206, 72, 191, 57, 177, 159, 190, 74, 54, 19, 62, 215, 59, 168, 190, 98, 208, 129, 61, 99, 9, 244, 189, 40, 13, 65, 62, 172, 47, 78, 61, 143, 41, 3, 191, 218, 21, 94, 190, 18, 54, 136, 60, 165, 68, 188, 190, 255, 21, 15, 62, 26, 40, 107, 189, 43, 246, 121, 190, 198, 189, 159, 188, 131, 80, 42, 62, 80, 152, 212, 62, 116, 53, 224, 61, 107, 39, 170, 61, 133, 174, 36, 188, 3, 4, 132, 190, 194, 69, 198, 59, 234, 9, 135, 62, 190, 174, 22, 62, 198, 75, 18, 62, 205, 8, 193, 189, 74, 201, 182, 61, 105, 203, 79, 190, 95, 88, 189, 190, 184, 22, 154, 61, 73, 108, 223, 62, 238, 108, 52, 187, 223, 154, 52, 188, 107, 138, 139, 190, 222, 93, 198, 190, 127, 127, 16, 62, 189, 198, 165, 62, 180, 17, 208, 61, 201, 37, 150, 62, 253, 93, 131, 62, 203, 4, 81, 191, 142, 104, 110, 62, 173, 234, 67, 190, 154, 158, 252, 188, 190, 112, 167, 61, 229, 7, 70, 188, 78, 185, 6, 62, 179, 111, 102, 189, 153, 140, 229, 190, 95, 41, 87, 61, 77, 208, 99, 190, 47, 191, 19, 62, 171, 21, 218, 60, 98, 76, 82, 61, 146, 0, 159, 189, 72, 84, 228, 60, 32, 70, 62, 189, 211, 113, 148, 61, 101, 40, 50, 190, 18, 35, 207, 190, 58, 239, 24, 190, 180, 147, 171, 189, 205, 29, 140, 190, 87, 141, 25, 59, 65, 127, 1, 62, 62, 228, 75, 191, 47, 169, 242, 189, 164, 139, 129, 189, 163, 10, 29, 63, 5, 152, 113, 61, 221, 170, 103, 62, 98, 230, 170, 62, 117, 85, 31, 190, 171, 89, 150, 189, 255, 66, 0, 62, 66, 41, 25, 62, 138, 211, 164, 189, 26, 237, 64, 190, 242, 206, 26, 191, 87, 70, 4, 191, 127, 5, 25, 191, 9, 34, 180, 190, 179, 170, 164, 61, 68, 91, 13, 189, 24, 111, 161, 189, 125, 174, 91, 60, 122, 187, 43, 191, 37, 202, 15, 191, 10, 162, 20, 62, 192, 156, 9, 190, 89, 87, 27, 190, 159, 16, 51, 191, 0, 255, 82, 191, 161, 164, 163, 190, 121, 102, 64, 190, 246, 124, 7, 62, 96, 115, 197, 61, 208, 41, 181, 190, 16, 204, 52, 190, 208, 156, 149, 189, 40, 164, 194, 62, 9, 57, 172, 189, 185, 108, 139, 62, 89, 88, 173, 62, 154, 134, 39, 191, 195, 178, 125, 62, 111, 167, 228, 187, 77, 190, 145, 189, 52, 158, 117, 189, 132, 208, 49, 190, 227, 98, 142, 61, 176, 214, 72, 186, 44, 113, 6, 191, 233, 6, 73, 62, 145, 71, 169, 191, 231, 54, 239, 60, 128, 230, 151, 190, 250, 235, 84, 190, 195, 192, 146, 190, 99, 57, 140, 190, 194, 162, 77, 190, 134, 211, 150, 191, 209, 178, 16, 62, 243, 23, 117, 189, 231, 127, 54, 60, 62, 66, 41, 189, 214, 206, 42, 191, 170, 48, 225, 188, 10, 148, 17, 189, 101, 171, 201, 62, 112, 51, 194, 189, 233, 69, 255, 189, 160, 97, 159, 61, 185, 244, 11, 62, 34, 207, 0, 62, 227, 207, 151, 61, 203, 47, 135, 189, 211, 242, 63, 62, 42, 22, 26, 61, 5, 83, 47, 61, 16, 93, 61, 62, 146, 136, 187, 62, 22, 165, 2, 189, 81, 144, 115, 62, 148, 83, 112, 62, 37, 115, 83, 62, 48, 147, 51, 190, 44, 151, 1, 190, 233, 35, 160, 188, 152, 254, 231, 61, 255, 138, 201, 188, 46, 182, 122, 62, 225, 201, 59, 61, 160, 90, 71, 61, 142, 164, 7, 190, 105, 159, 145, 189, 196, 191, 227, 188, 246, 92, 79, 190, 170, 28, 249, 58, 17, 208, 16, 191, 179, 231, 20, 62, 64, 107, 66, 62, 234, 148, 11, 61, 60, 242, 66, 62, 247, 203, 72, 62, 101, 54, 171, 62, 49, 158, 131, 61, 221, 165, 26, 62, 36, 94, 173, 188, 13, 99, 211, 189, 221, 119, 74, 190, 28, 23, 162, 62, 9, 84, 20, 190, 33, 139, 80, 190, 144, 203, 18, 189, 220, 17, 10, 61, 132, 18, 176, 60, 240, 31, 37, 62, 21, 67, 89, 188, 161, 129, 2, 61, 246, 246, 66, 60, 189, 55, 52, 190, 55, 82, 217, 189, 235, 168, 210, 187, 4, 133, 16, 62, 221, 85, 183, 61, 73, 171, 9, 62, 27, 251, 82, 190, 146, 193, 201, 189, 224, 39, 104, 62, 218, 166, 91, 61, 223, 198, 136, 191, 104, 247, 173, 60, 14, 161, 131, 191, 214, 141, 160, 190, 143, 115, 81, 62, 180, 145, 84, 62, 13, 164, 177, 189, 23, 91, 226, 61, 245, 210, 157, 62, 171, 95, 34, 62, 162, 70, 171, 62, 111, 121, 67, 191, 28, 165, 74, 62, 209, 209, 53, 191, 127, 229, 101, 190, 74, 160, 250, 190, 55, 229, 34, 191, 128, 175, 16, 191, 203, 140, 66, 189, 18, 66, 140, 188, 157, 142, 142, 61, 33, 72, 124, 191, 72, 224, 92, 61, 235, 65, 241, 188, 215, 167, 231, 60, 204, 206, 134, 62, 99, 69, 45, 62, 217, 61, 44, 191, 164, 120, 43, 191, 140, 180, 23, 190, 126, 93, 45, 189, 57, 45, 117, 190, 215, 2, 62, 191, 173, 212, 234, 190, 174, 5, 113, 62, 249, 62, 140, 190, 208, 140, 163, 62, 254, 221, 162, 190, 27, 229, 160, 62, 181, 49, 179, 61, 46, 185, 200, 61, 218, 218, 110, 62, 137, 107, 12, 190, 218, 82, 113, 190, 245, 114, 215, 62, 112, 249, 194, 190, 119, 226, 194, 190, 124, 247, 131, 189, 208, 67, 88, 62, 43, 94, 138, 62, 235, 142, 32, 190, 167, 108, 37, 62, 164, 46, 133, 62, 5, 48, 242, 189, 205, 183, 97, 62, 80, 162, 222, 62, 251, 46, 62, 62, 195, 206, 30, 190, 200, 76, 69, 62, 118, 250, 18, 61, 111, 82, 11, 191, 104, 143, 155, 191, 202, 72, 36, 62, 213, 110, 209, 62, 149, 197, 70, 190, 101, 219, 25, 190, 148, 60, 13, 61, 70, 95, 97, 188, 84, 2, 195, 61, 133, 122, 91, 61, 136, 206, 39, 188, 142, 176, 40, 61, 140, 239, 135, 189, 126, 142, 242, 60, 19, 70, 4, 62, 154, 122, 131, 61, 13, 216, 16, 62, 111, 253, 17, 61, 101, 191, 167, 60, 225, 173, 160, 61, 178, 129, 251, 189, 27, 51, 30, 190, 83, 14, 62, 61, 99, 158, 204, 60, 206, 7, 21, 189, 74, 135, 125, 188, 113, 194, 149, 189, 198, 148, 130, 187, 94, 222, 16, 190, 233, 234, 53, 190, 143, 207, 36, 190, 57, 58, 173, 189, 23, 28, 104, 189, 111, 32, 217, 189, 96, 25, 42, 61, 34, 156, 7, 190, 158, 38, 72, 191, 212, 111, 38, 62, 243, 149, 124, 62, 21, 245, 85, 190, 248, 255, 107, 62, 229, 21, 55, 189, 133, 128, 11, 62, 242, 206, 93, 62, 4, 56, 81, 62, 138, 239, 15, 62, 120, 56, 203, 189, 195, 100, 30, 190, 172, 246, 146, 62, 91, 228, 29, 190, 198, 54, 107, 191, 208, 56, 156, 190, 191, 95, 29, 62, 81, 241, 150, 62, 182, 98, 88, 60, 200, 66, 251, 62, 205, 229, 92, 62, 220, 59, 181, 190, 183, 243, 188, 61, 252, 3, 52, 61, 177, 99, 204, 61, 212, 245, 212, 62, 184, 250, 170, 62, 73, 241, 6, 62, 87, 96, 67, 190, 159, 201, 207, 60, 10, 222, 98, 62, 227, 73, 16, 63, 223, 206, 2, 63, 149, 12, 137, 61, 38, 241, 213, 190, 106, 124, 38, 62, 191, 64, 234, 190, 66, 78, 70, 62, 237, 250, 45, 190, 83, 179, 228, 61, 176, 86, 167, 62, 254, 52, 12, 191, 176, 237, 122, 62, 147, 154, 2, 62, 176, 36, 222, 189, 36, 143, 9, 190, 147, 142, 169, 62, 109, 4, 231, 190, 23, 148, 51, 190, 28, 184, 115, 190, 58, 182, 203, 60, 255, 178, 173, 191, 194, 120, 163, 61, 0, 35, 206, 60, 132, 177, 7, 61, 127, 48, 183, 190, 37, 69, 201, 189, 100, 11, 23, 191, 50, 197, 150, 191, 250, 148, 172, 189, 160, 183, 96, 62, 250, 162, 151, 188, 30, 30, 239, 189, 42, 166, 251, 190, 198, 222, 139, 61, 231, 48, 193, 61, 84, 180, 146, 189, 55, 181, 177, 189, 32, 24, 37, 61, 213, 168, 99, 60, 112, 67, 28, 62, 74, 149, 158, 60, 205, 179, 139, 189, 57, 49, 17, 61, 145, 4, 169, 60, 195, 3, 61, 61, 216, 88, 189, 60, 179, 226, 251, 189, 253, 230, 210, 189, 73, 66, 10, 190, 89, 178, 113, 189, 169, 252, 65, 61, 190, 47, 5, 62, 239, 225, 73, 61, 168, 219, 44, 189, 3, 40, 96, 189, 197, 77, 27, 189, 6, 139, 7, 190, 32, 24, 250, 189, 197, 92, 36, 190, 25, 152, 10, 188, 182, 86, 53, 189, 53, 235, 19, 190, 144, 96, 66, 61, 157, 130, 15, 189, 199, 56, 118, 188, 28, 22, 199, 190, 67, 251, 140, 61, 114, 184, 50, 191, 85, 222, 166, 190, 53, 149, 29, 189, 228, 172, 65, 62, 60, 13, 17, 190, 254, 93, 175, 61, 123, 73, 123, 62, 134, 241, 99, 191, 105, 28, 164, 62, 53, 177, 224, 190, 98, 213, 160, 62, 216, 99, 171, 190, 253, 133, 51, 62, 15, 146, 67, 190, 53, 7, 163, 190, 227, 142, 191, 190, 127, 248, 68, 190, 186, 119, 155, 189, 38, 136, 175, 61, 212, 47, 102, 190, 103, 33, 201, 189, 238, 39, 160, 190, 89, 91, 227, 188, 106, 50, 203, 62, 92, 12, 170, 61, 191, 146, 204, 190, 28, 119, 203, 190, 20, 153, 81, 188, 45, 212, 112, 61, 240, 222, 50, 191, 200, 2, 43, 190, 245, 164, 78, 191, 105, 3, 195, 188, 166, 133, 172, 62, 175, 142, 44, 62, 28, 187, 73, 191, 66, 170, 147, 62, 202, 184, 187, 189, 124, 126, 180, 62, 203, 110, 147, 190, 75, 14, 154, 188, 55, 30, 88, 190, 250, 229, 33, 63, 46, 12, 101, 188, 203, 63, 215, 62, 242, 235, 31, 190, 78, 79, 154, 189, 117, 118, 110, 62, 59, 3, 232, 61, 101, 250, 97, 62, 215, 247, 157, 190, 126, 15, 196, 190, 35, 90, 122, 62, 131, 181, 219, 190, 133, 138, 214, 62, 176, 12, 134, 189, 217, 61, 153, 62, 204, 2, 16, 62, 230, 219, 7, 190, 25, 59, 30, 191, 72, 10, 133, 190, 21, 219, 246, 189, 189, 207, 95, 191, 214, 123, 22, 191, 211, 77, 228, 61, 151, 142, 120, 61, 109, 123, 211, 62, 224, 118, 197, 190, 79, 56, 39, 62, 47, 136, 202, 61, 47, 227, 225, 60, 155, 135, 46, 61, 85, 28, 141, 190, 247, 131, 124, 190, 119, 37, 189, 62, 10, 181, 255, 189, 36, 117, 68, 190, 251, 251, 123, 190, 246, 25, 3, 62, 216, 60, 152, 62, 0, 70, 82, 62, 233, 56, 180, 62, 95, 225, 109, 62, 227, 56, 221, 190, 14, 213, 151, 62, 92, 228, 99, 189, 5, 79, 153, 62, 78, 205, 224, 189, 173, 159, 73, 62, 162, 64, 92, 189, 187, 154, 239, 190, 158, 75, 123, 191, 119, 44, 235, 61, 96, 60, 85, 62, 238, 8, 176, 61, 147, 223, 62, 61, 247, 154, 227, 189, 82, 134, 15, 191, 133, 184, 228, 61, 148, 198, 146, 58, 17, 247, 88, 60, 68, 138, 198, 61, 154, 238, 95, 190, 31, 108, 182, 62, 64, 28, 47, 62, 144, 139, 232, 61, 236, 126, 11, 190, 238, 22, 162, 189, 52, 145, 101, 191, 113, 159, 132, 188, 114, 102, 73, 62, 157, 239, 131, 190, 252, 145, 9, 188, 20, 0, 47, 189, 253, 255, 73, 62, 12, 120, 244, 61, 69, 96, 44, 62, 187, 143, 186, 189, 122, 224, 64, 190, 146, 168, 92, 62, 129, 188, 2, 62, 1, 25, 172, 188, 210, 192, 130, 191, 144, 20, 85, 62, 140, 176, 75, 62, 65, 193, 26, 190, 251, 248, 187, 61, 72, 87, 80, 62, 32, 248, 131, 62, 79, 104, 216, 61, 89, 170, 230, 190, 63, 191, 198, 61, 58, 169, 75, 62, 150, 197, 33, 61, 73, 62, 125, 62, 129, 1, 36, 191, 242, 216, 234, 62, 82, 40, 202, 60, 134, 93, 47, 62, 130, 48, 29, 61, 206, 31, 119, 63, 47, 7, 251, 190, 163, 7, 230, 189, 213, 115, 106, 190, 0, 253, 207, 190, 74, 126, 75, 191, 60, 205, 56, 186, 1, 28, 35, 63, 148, 184, 102, 190, 225, 59, 47, 190, 106, 215, 53, 189, 73, 157, 247, 190, 13, 201, 174, 191, 183, 203, 46, 191, 236, 145, 137, 62, 126, 40, 159, 189, 34, 146, 239, 189, 40, 238, 27, 191, 39, 67, 127, 191, 98, 192, 186, 190, 166, 53, 85, 62, 16, 25, 16, 191, 117, 156, 217, 62, 230, 224, 174, 60, 10, 57, 132, 62, 60, 225, 163, 189, 129, 66, 170, 62, 21, 8, 152, 62, 1, 1, 131, 191, 41, 189, 90, 190, 156, 108, 87, 62, 24, 112, 235, 190, 3, 155, 138, 60, 115, 1, 136, 190, 13, 131, 45, 61, 183, 241, 189, 62, 211, 180, 12, 189, 168, 51, 96, 62, 112, 178, 115, 190, 234, 198, 2, 191, 130, 132, 71, 61, 125, 240, 27, 61, 171, 86, 211, 62, 226, 189, 154, 62, 103, 37, 255, 62, 188, 35, 46, 62, 82, 163, 38, 190, 80, 218, 1, 191, 237, 49, 2, 61, 73, 85, 143, 61, 86, 178, 8, 63, 213, 178, 25, 62, 28, 85, 188, 61, 33, 152, 181, 62, 225, 98, 105, 190, 213, 237, 214, 61, 5, 103, 155, 61, 52, 75, 165, 61, 154, 228, 206, 188, 33, 129, 16, 190, 229, 194, 224, 62, 165, 246, 83, 62, 175, 54, 170, 190, 82, 68, 105, 61, 87, 197, 60, 63, 193, 47, 157, 62, 47, 160, 62, 190, 154, 116, 154, 190, 173, 131, 254, 189, 168, 12, 15, 191, 66, 190, 248, 61, 44, 39, 87, 62, 116, 75, 0, 190, 106, 57, 143, 190, 213, 8, 85, 190, 40, 114, 6, 191, 213, 91, 191, 190, 27, 182, 167, 190, 236, 45, 181, 62, 146, 1, 18, 62, 27, 220, 65, 190, 230, 211, 180, 189, 214, 68, 138, 60, 182, 138, 226, 61, 131, 3, 22, 62, 175, 59, 10, 62, 207, 242, 32, 190, 143, 237, 150, 61, 127, 51, 84, 189, 97, 34, 144, 61, 15, 47, 29, 190, 230, 191, 222, 188, 113, 65, 24, 190, 42, 100, 142, 189, 169, 150, 91, 189, 32, 187, 133, 189, 197, 196, 38, 189, 199, 146, 48, 190, 29, 182, 17, 189, 195, 80, 252, 188, 54, 46, 218, 61, 15, 5, 232, 61, 187, 198, 49, 190, 13, 108, 165, 188, 167, 217, 207, 60, 152, 45, 5, 61, 247, 211, 9, 190, 188, 163, 10, 190, 109, 239, 10, 189, 136, 208, 36, 190, 156, 43, 195, 189, 132, 221, 32, 61, 184, 153, 4, 190, 202, 203, 39, 62, 251, 244, 219, 187, 174, 76, 45, 190, 194, 242, 23, 189, 36, 22, 67, 62, 51, 35, 65, 189, 73, 200, 113, 60, 253, 52, 48, 61, 44, 219, 175, 60, 200, 244, 96, 190, 200, 183, 69, 190, 85, 114, 104, 189, 86, 247, 253, 60, 106, 190, 92, 61, 211, 138, 175, 189, 64, 178, 78, 62, 55, 211, 125, 190, 118, 108, 246, 189, 164, 35, 145, 62, 115, 134, 66, 62, 136, 6, 31, 189, 89, 221, 232, 61, 248, 97, 215, 61, 97, 63, 63, 190, 201, 8, 198, 189, 241, 80, 170, 61, 170, 232, 14, 190, 97, 43, 188, 189, 68, 141, 159, 189, 127, 71, 185, 189, 43, 250, 161, 188, 6, 101, 177, 61, 192, 135, 162, 62, 249, 255, 238, 190, 192, 11, 131, 190, 21, 131, 114, 188, 159, 110, 21, 63, 32, 101, 124, 62, 202, 4, 253, 190, 94, 46, 251, 62, 73, 176, 5, 190, 82, 191, 182, 189, 168, 32, 164, 188, 230, 230, 180, 190, 77, 117, 130, 190, 181, 7, 171, 62, 238, 249, 10, 190, 30, 34, 85, 62, 249, 17, 134, 189, 54, 83, 63, 62, 44, 32, 23, 62, 16, 0, 66, 62, 48, 143, 194, 190, 191, 84, 17, 191, 88, 85, 187, 190, 40, 31, 128, 62, 252, 174, 170, 188, 136, 144, 151, 189, 209, 253, 127, 189, 179, 69, 200, 190, 126, 47, 212, 61, 23, 238, 19, 188, 115, 195, 74, 191, 76, 90, 158, 190, 125, 61, 22, 191, 205, 223, 168, 59, 27, 29, 94, 187, 127, 123, 35, 189, 231, 179, 249, 189, 231, 80, 94, 186, 221, 219, 227, 189, 81, 57, 45, 60, 198, 129, 16, 190, 7, 143, 44, 190, 48, 152, 195, 61, 189, 78, 180, 60, 139, 136, 222, 61, 226, 85, 1, 62, 187, 141, 116, 61, 139, 80, 175, 61, 127, 18, 242, 61, 130, 71, 36, 189, 56, 31, 19, 62, 77, 63, 54, 189, 46, 181, 54, 189, 66, 63, 42, 190, 121, 96, 23, 190, 131, 234, 16, 190, 112, 27, 42, 190, 124, 58, 224, 60, 250, 48, 127, 61, 5, 141, 216, 189, 47, 188, 50, 190, 139, 253, 37, 190, 79, 146, 138, 61, 252, 92, 41, 62, 82, 234, 11, 62, 217, 169, 205, 190, 178, 156, 234, 61, 227, 81, 31, 191, 255, 205, 200, 188, 200, 86, 163, 61, 157, 219, 49, 188, 193, 108, 116, 61, 160, 193, 87, 188, 61, 136, 146, 62, 72, 71, 172, 61, 242, 12, 165, 62, 19, 91, 204, 190, 131, 94, 147, 62, 169, 77, 243, 190, 174, 105, 55, 63, 1, 247, 7, 191, 199, 187, 234, 190, 206, 20, 7, 191, 145, 120, 173, 189, 115, 103, 218, 190, 182, 1, 139, 190, 41, 72, 132, 191, 78, 90, 41, 189, 142, 72, 141, 189, 62, 6, 56, 190, 179, 199, 166, 62, 195, 93, 187, 189, 11, 199, 208, 190, 152, 27, 196, 190, 75, 209, 168, 60, 168, 85, 161, 61, 47, 55, 117, 191, 205, 14, 21, 62, 193, 220, 139, 62, 41, 218, 183, 190, 103, 16, 37, 191, 100, 38, 153, 61, 16, 196, 223, 61, 196, 64, 160, 189, 213, 227, 130, 62, 200, 65, 43, 189, 215, 49, 222, 62, 22, 254, 79, 62, 224, 244, 28, 62, 242, 222, 190, 190, 77, 65, 170, 62, 161, 8, 128, 189, 147, 155, 11, 62, 145, 73, 168, 189, 140, 246, 40, 191, 107, 100, 44, 62, 100, 125, 6, 190, 8, 7, 195, 62, 142, 187, 129, 62, 154, 112, 157, 62, 184, 165, 116, 61, 4, 175, 199, 190, 30, 148, 22, 62, 92, 236, 218, 60, 176, 0, 96, 62, 208, 144, 43, 191, 31, 106, 2, 190, 40, 213, 99, 61, 56, 179, 32, 191, 255, 75, 11, 63, 183, 175, 59, 62, 22, 48, 42, 191, 116, 203, 39, 62, 255, 148, 1, 191, 206, 175, 162, 62, 255, 53, 231, 61, 128, 26, 134, 62, 212, 129, 130, 62, 43, 106, 246, 190, 173, 34, 88, 62, 34, 172, 189, 61, 117, 166, 67, 190, 24, 10, 143, 189, 98, 24, 195, 189, 187, 36, 2, 191, 20, 223, 210, 188, 239, 123, 130, 190, 171, 237, 164, 61, 42, 136, 207, 191, 16, 178, 55, 62, 185, 102, 151, 189, 211, 23, 0, 188, 36, 177, 63, 191, 141, 64, 61, 190, 215, 95, 118, 190, 169, 13, 170, 191, 22, 132, 6, 190, 56, 173, 199, 62, 218, 62, 172, 189, 238, 138, 210, 190, 19, 154, 184, 190, 176, 48, 205, 190, 177, 156, 67, 62, 12, 193, 165, 62, 159, 191, 124, 62, 86, 46, 108, 61, 153, 141, 114, 62, 228, 107, 147, 61, 58, 133, 57, 62, 172, 26, 6, 189, 243, 11, 165, 62, 228, 150, 19, 190, 198, 89, 226, 189, 83, 39, 140, 62, 180, 162, 60, 58, 240, 206, 38, 191, 228, 63, 162, 188, 195, 175, 28, 62, 171, 163, 97, 190, 69, 34, 93, 189, 142, 200, 150, 190, 251, 150, 76, 62, 15, 222, 193, 190, 46, 23, 247, 189, 19, 92, 42, 62, 14, 160, 29, 61, 215, 193, 224, 62, 27, 255, 255, 190, 241, 114, 129, 61, 153, 210, 220, 187, 69, 213, 161, 189, 82, 221, 25, 62, 214, 224, 210, 189, 182, 54, 169, 191, 182, 28, 46, 189, 107, 103, 68, 189, 193, 0, 102, 61, 12, 85, 144, 189, 131, 204, 19, 62, 53, 82, 159, 189, 217, 55, 178, 62, 218, 56, 54, 191, 216, 0, 21, 63, 214, 88, 211, 190, 219, 205, 243, 190, 55, 22, 121, 190, 75, 44, 224, 61, 33, 84, 128, 191, 185, 13, 66, 62, 85, 35, 171, 189, 93, 236, 119, 62, 15, 95, 61, 188, 179, 98, 121, 190, 217, 114, 157, 61, 13, 24, 21, 191, 230, 105, 185, 60, 158, 14, 23, 61, 100, 196, 252, 61, 59, 231, 111, 62, 98, 213, 60, 190, 89, 142, 76, 61, 22, 130, 2, 190, 144, 141, 242, 189, 62, 57, 114, 62, 148, 121, 192, 62, 26, 97, 216, 189, 127, 85, 224, 190, 71, 168, 24, 190, 214, 251, 10, 191, 213, 216, 13, 61, 42, 10, 111, 188, 171, 16, 25, 190, 32, 211, 54, 62, 143, 215, 66, 189, 17, 153, 110, 191, 61, 108, 30, 61, 246, 144, 42, 190, 188, 126, 150, 190, 56, 58, 19, 61, 93, 6, 192, 60, 188, 137, 65, 190, 205, 206, 237, 189, 29, 15, 188, 61, 132, 45, 220, 60, 167, 174, 10, 189, 153, 85, 151, 62, 35, 240, 197, 190, 232, 186, 137, 61, 177, 117, 200, 190, 197, 155, 238, 61, 100, 124, 188, 190, 162, 177, 201, 61, 82, 135, 113, 190, 123, 96, 54, 191, 195, 156, 209, 190, 28, 0, 193, 61, 111, 191, 8, 189, 174, 153, 3, 191, 26, 238, 2, 191, 175, 52, 136, 61, 14, 156, 216, 190, 223, 55, 19, 59, 225, 127, 180, 190, 56, 72, 58, 62, 210, 13, 195, 61, 230, 76, 59, 62, 173, 44, 134, 189, 82, 95, 172, 190, 114, 88, 23, 190, 48, 72, 64, 62, 145, 170, 174, 189, 118, 192, 235, 189, 129, 40, 78, 190, 34, 232, 109, 62, 205, 222, 247, 62, 255, 145, 1, 62, 146, 185, 198, 61, 0, 159, 19, 62, 115, 239, 90, 190, 185, 11, 56, 62, 245, 122, 159, 190, 129, 244, 201, 62, 24, 144, 225, 61, 76, 26, 201, 62, 123, 138, 15, 189, 42, 58, 190, 190, 6, 160, 95, 191, 112, 19, 182, 189, 31, 141, 23, 63, 109, 95, 0, 63, 200, 123, 167, 187, 84, 155, 69, 190, 227, 81, 16, 62, 144, 146, 182, 190, 231, 88, 182, 62, 138, 66, 18, 62, 244, 224, 18, 62, 76, 111, 219, 62, 54, 164, 195, 190, 232, 97, 176, 62, 16, 190, 182, 189, 251, 224, 38, 62, 69, 51, 2, 61, 142, 92, 246, 62, 31, 182, 60, 62, 219, 36, 43, 61, 80, 0, 153, 190, 53, 141, 107, 190, 214, 62, 182, 191, 114, 204, 135, 61, 222, 239, 197, 60, 203, 110, 248, 189, 222, 68, 65, 190, 40, 88, 26, 190, 96, 175, 93, 190, 46, 0, 229, 191, 250, 23, 220, 190, 83, 252, 152, 60, 37, 168, 171, 189, 166, 219, 214, 188, 17, 181, 130, 191, 124, 154, 90, 62, 59, 86, 38, 62, 29, 32, 230, 189, 252, 101, 5, 189, 19, 181, 73, 190, 108, 44, 55, 62, 245, 113, 156, 61, 89, 6, 254, 60, 43, 6, 165, 62, 120, 4, 132, 190, 6, 193, 211, 62, 218, 59, 90, 61, 233, 113, 199, 60, 150, 101, 76, 60, 152, 240, 112, 62, 213, 136, 42, 62, 3, 31, 53, 62, 204, 94, 201, 190, 55, 158, 144, 189, 124, 134, 174, 191, 151, 216, 0, 190, 75, 135, 125, 60, 81, 162, 253, 185, 122, 61, 70, 190, 5, 79, 103, 60, 251, 128, 97, 190, 65, 44, 152, 191, 64, 131, 80, 189, 93, 215, 97, 188, 244, 219, 125, 61, 208, 119, 109, 61, 157, 14, 21, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 42, 108, 189, 66, 21, 98, 61, 98, 187, 51, 61, 214, 105, 104, 62, 71, 186, 174, 62, 135, 12, 139, 62, 72, 22, 35, 61, 48, 78, 44, 62, 0, 234, 63, 190, 14, 182, 172, 189, 30, 28, 209, 61, 10, 208, 192, 189, 117, 206, 249, 189, 114, 139, 41, 61, 129, 206, 98, 62, 205, 160, 240, 189, 202, 155, 104, 62, 139, 205, 47, 62, 66, 114, 236, 188, 182, 91, 78, 61, 7, 165, 117, 62, 228, 15, 140, 60, 27, 65, 52, 190, 44, 50, 64, 62, 236, 96, 88, 188, 191, 196, 174, 61, 153, 142, 117, 61, 193, 210, 20, 190, 218, 214, 124, 190, 92, 142, 155, 189, 198, 214, 129, 62, 165, 174, 129, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 208, 81, 190, 68, 233, 217, 61, 89, 104, 97, 191, 173, 174, 8, 63, 240, 253, 21, 61, 139, 126, 215, 189, 237, 133, 130, 63, 37, 43, 252, 190, 25, 180, 30, 62, 6, 52, 14, 191, 118, 137, 236, 62, 115, 76, 109, 61, 254, 133, 230, 62, 27, 19, 53, 191, 74, 131, 69, 191, 49, 0, 183, 61, 188, 136, 103, 63, 229, 165, 144, 63, 161, 208, 180, 62, 38, 187, 197, 61, 221, 91, 20, 190, 152, 46, 56, 191, 190, 113, 51, 189, 56, 171, 141, 63, 183, 147, 238, 62, 232, 165, 120, 63, 66, 23, 24, 190, 10, 86, 13, 191, 98, 229, 115, 61, 193, 3, 38, 191, 250, 198, 55, 63, 78, 57, 196, 62, 117, 125, 250, 190, 185, 207, 184, 190, 36, 170, 165, 61, 66, 166, 91, 61, 86, 211, 157, 190, 150, 82, 155, 190, 192, 103, 209, 59, 58, 212, 230, 189, 184, 247, 241, 189, 35, 57, 221, 188, 247, 148, 13, 63, 45, 4, 47, 190, 118, 124, 166, 62, 93, 97, 75, 62, 105, 217, 19, 62, 10, 79, 55, 190, 2, 252, 23, 62, 71, 102, 110, 62, 208, 224, 149, 62, 232, 232, 230, 189, 237, 223, 154, 62, 127, 131, 47, 62, 215, 138, 172, 186, 12, 153, 15, 63, 118, 66, 227, 188, 66, 201, 148, 63, 41, 125, 132, 190, 120, 177, 210, 62, 130, 100, 161, 190, 74, 193, 128, 61, 167, 254, 195, 61, 108, 57, 205, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 211, 183, 188, 124, 204, 157, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {58, 213, 17, 191, 206, 90, 144, 190, 58, 53, 8, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {58, 52, 69, 192, 194, 23, 250, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0006/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}