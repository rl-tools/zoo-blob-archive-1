// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 110, 87, 63, 47, 104, 95, 191, 148, 162, 196, 190, 50, 9, 189, 60, 181, 64, 240, 190, 46, 28, 200, 62, 37, 183, 24, 189, 32, 23, 48, 63, 18, 219, 108, 189, 188, 9, 5, 191, 62, 11, 224, 60, 193, 207, 195, 62, 71, 180, 53, 191, 95, 28, 233, 188, 37, 113, 244, 189, 10, 61, 234, 62, 38, 156, 45, 191, 151, 131, 27, 62, 165, 199, 214, 187, 253, 114, 147, 61, 237, 214, 76, 61, 157, 87, 24, 63, 125, 122, 188, 190, 62, 23, 28, 189, 134, 96, 151, 190, 165, 39, 52, 191, 32, 250, 94, 189, 221, 222, 57, 62, 93, 149, 40, 63, 169, 34, 44, 190, 240, 71, 71, 63, 77, 189, 96, 191, 137, 190, 120, 190, 162, 190, 141, 62, 174, 250, 187, 190, 123, 45, 177, 190, 88, 134, 9, 191, 94, 239, 195, 190, 55, 218, 200, 60, 34, 222, 24, 63, 42, 20, 129, 187, 227, 79, 227, 190, 26, 219, 197, 190, 105, 66, 3, 63, 17, 139, 245, 61, 130, 191, 34, 62, 201, 112, 146, 61, 88, 88, 202, 190, 244, 205, 236, 188, 151, 205, 58, 63, 26, 61, 118, 189, 184, 41, 206, 62, 30, 27, 102, 63, 69, 247, 101, 62, 126, 53, 152, 61, 116, 58, 19, 62, 127, 122, 173, 190, 95, 190, 152, 190, 242, 255, 109, 191, 137, 116, 166, 190, 121, 26, 85, 63, 8, 16, 137, 190, 251, 34, 161, 62, 224, 26, 208, 62, 169, 24, 12, 191, 42, 103, 227, 190, 245, 206, 198, 190, 4, 69, 67, 61, 142, 39, 163, 190, 141, 191, 156, 62, 81, 140, 146, 189, 104, 18, 19, 63, 152, 29, 48, 63, 130, 58, 129, 63, 80, 18, 149, 62, 119, 79, 250, 190, 60, 126, 119, 191, 199, 172, 132, 61, 91, 106, 75, 191, 188, 178, 94, 191, 45, 182, 222, 190, 214, 126, 13, 62, 51, 51, 17, 62, 35, 144, 193, 190, 163, 216, 220, 190, 75, 34, 121, 63, 230, 6, 32, 63, 93, 179, 45, 191, 31, 11, 189, 60, 163, 249, 49, 63, 221, 82, 35, 63, 160, 88, 160, 190, 154, 241, 20, 63, 19, 254, 78, 63, 204, 138, 66, 63, 209, 128, 152, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 124, 248, 190, 74, 2, 24, 62, 37, 225, 171, 62, 230, 52, 92, 62, 105, 138, 210, 62, 138, 158, 236, 62, 23, 96, 25, 63, 62, 84, 241, 62, 66, 224, 23, 63, 134, 142, 55, 190, 57, 49, 24, 62, 234, 153, 65, 189, 51, 165, 34, 63, 211, 114, 138, 60, 92, 125, 42, 190, 190, 114, 133, 190, 77, 191, 1, 63, 143, 145, 231, 188, 191, 3, 17, 63, 197, 0, 219, 60, 179, 219, 140, 62, 151, 58, 61, 191, 221, 213, 36, 63, 105, 238, 46, 190, 74, 203, 150, 62, 78, 213, 172, 62, 212, 48, 201, 190, 141, 128, 28, 62, 25, 156, 156, 61, 124, 204, 241, 189, 201, 152, 104, 61, 153, 163, 254, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 244, 218, 190, 43, 196, 143, 190, 40, 254, 160, 61, 104, 254, 148, 190, 196, 169, 195, 61, 208, 25, 57, 189, 51, 226, 26, 62, 116, 160, 167, 61, 219, 142, 132, 190, 212, 6, 99, 190, 203, 174, 225, 61, 101, 72, 54, 190, 61, 140, 159, 60, 135, 33, 191, 61, 140, 124, 247, 189, 86, 164, 76, 61, 180, 220, 71, 62, 38, 185, 170, 62, 47, 210, 119, 62, 223, 28, 18, 62, 116, 166, 214, 60, 72, 21, 240, 189, 8, 77, 174, 61, 199, 158, 194, 61, 94, 17, 219, 61, 92, 166, 6, 190, 67, 78, 81, 60, 125, 225, 74, 62, 159, 107, 158, 189, 89, 75, 98, 190, 190, 114, 179, 61, 163, 170, 160, 62, 48, 26, 242, 188, 72, 34, 228, 188, 86, 229, 178, 189, 98, 95, 197, 189, 250, 255, 63, 62, 203, 100, 158, 62, 34, 151, 28, 62, 229, 154, 143, 62, 25, 199, 95, 62, 163, 213, 44, 191, 172, 59, 80, 62, 30, 166, 64, 190, 255, 34, 110, 61, 211, 164, 191, 61, 2, 0, 193, 61, 7, 89, 144, 61, 57, 37, 253, 188, 122, 208, 137, 190, 155, 113, 52, 61, 4, 239, 106, 190, 124, 71, 13, 62, 88, 123, 53, 189, 181, 49, 4, 61, 147, 86, 200, 189, 40, 165, 221, 61, 46, 110, 51, 189, 31, 99, 146, 61, 46, 177, 64, 190, 35, 198, 36, 190, 120, 110, 207, 187, 148, 19, 219, 189, 114, 228, 251, 189, 71, 154, 165, 190, 170, 240, 32, 62, 2, 227, 61, 191, 79, 168, 238, 61, 215, 117, 62, 62, 7, 162, 233, 62, 56, 95, 19, 62, 151, 147, 150, 61, 226, 3, 181, 62, 159, 177, 20, 190, 79, 100, 164, 190, 64, 22, 59, 188, 79, 230, 145, 62, 213, 116, 163, 189, 21, 93, 8, 62, 199, 164, 208, 190, 202, 15, 6, 191, 131, 26, 129, 190, 140, 21, 85, 190, 58, 20, 98, 61, 206, 169, 140, 190, 164, 239, 223, 188, 85, 127, 44, 62, 202, 22, 15, 191, 220, 115, 187, 190, 250, 218, 108, 62, 189, 233, 92, 61, 114, 46, 125, 190, 243, 96, 178, 190, 77, 65, 233, 190, 152, 218, 144, 190, 237, 241, 132, 61, 123, 77, 241, 60, 218, 37, 138, 61, 122, 41, 130, 189, 160, 113, 214, 60, 41, 73, 48, 61, 253, 60, 171, 62, 179, 139, 136, 189, 5, 241, 123, 62, 95, 139, 204, 61, 187, 136, 189, 190, 48, 95, 17, 62, 50, 12, 30, 187, 219, 158, 212, 188, 236, 142, 78, 189, 68, 46, 10, 190, 30, 14, 219, 61, 214, 56, 161, 61, 1, 243, 153, 190, 29, 25, 50, 62, 117, 2, 24, 191, 78, 115, 1, 188, 210, 176, 188, 189, 40, 45, 76, 190, 41, 53, 121, 190, 10, 43, 69, 190, 236, 184, 98, 190, 58, 64, 174, 190, 239, 196, 4, 62, 219, 77, 33, 62, 127, 104, 6, 62, 123, 48, 122, 189, 122, 77, 205, 190, 126, 11, 22, 189, 88, 250, 250, 60, 228, 63, 97, 62, 52, 64, 25, 189, 151, 201, 69, 60, 189, 240, 246, 61, 16, 104, 32, 62, 32, 19, 4, 62, 176, 244, 33, 62, 130, 139, 39, 190, 15, 143, 69, 62, 227, 23, 178, 60, 199, 46, 117, 62, 247, 152, 53, 62, 211, 23, 84, 62, 213, 151, 249, 189, 110, 144, 20, 62, 92, 68, 28, 62, 202, 239, 100, 62, 20, 159, 34, 190, 110, 80, 232, 189, 110, 212, 217, 189, 146, 232, 28, 62, 154, 30, 70, 189, 157, 228, 17, 62, 223, 55, 38, 62, 201, 39, 144, 61, 89, 150, 250, 189, 25, 195, 180, 189, 19, 242, 142, 61, 94, 230, 66, 190, 227, 91, 113, 189, 108, 200, 197, 190, 102, 175, 189, 61, 219, 90, 119, 61, 146, 67, 158, 188, 49, 195, 74, 62, 175, 253, 48, 62, 187, 147, 150, 62, 243, 234, 145, 61, 174, 30, 48, 62, 56, 62, 5, 190, 237, 45, 255, 188, 7, 28, 65, 190, 45, 60, 30, 62, 110, 196, 202, 189, 11, 130, 164, 187, 146, 162, 38, 188, 158, 101, 244, 59, 234, 100, 1, 62, 142, 63, 92, 62, 58, 102, 254, 189, 3, 69, 156, 61, 254, 215, 123, 61, 148, 82, 24, 190, 141, 60, 5, 190, 137, 25, 162, 61, 215, 21, 141, 189, 51, 182, 120, 61, 12, 110, 59, 62, 172, 170, 46, 190, 225, 224, 225, 189, 143, 116, 127, 62, 122, 163, 35, 62, 191, 196, 18, 190, 217, 0, 178, 187, 241, 156, 55, 190, 144, 204, 30, 61, 225, 238, 139, 187, 14, 26, 122, 61, 43, 76, 20, 190, 18, 224, 154, 189, 164, 32, 68, 61, 171, 95, 34, 62, 187, 8, 5, 59, 143, 21, 129, 60, 76, 35, 132, 61, 38, 204, 127, 61, 23, 119, 105, 61, 147, 9, 201, 60, 165, 25, 28, 190, 211, 23, 37, 190, 54, 143, 177, 60, 252, 75, 245, 189, 139, 1, 24, 60, 124, 238, 206, 189, 134, 48, 240, 189, 105, 106, 2, 61, 228, 72, 47, 61, 166, 224, 176, 61, 160, 52, 229, 189, 221, 121, 3, 62, 254, 113, 67, 190, 24, 21, 88, 61, 108, 100, 110, 189, 228, 104, 211, 61, 235, 165, 5, 191, 45, 241, 178, 190, 214, 190, 28, 62, 176, 34, 34, 190, 165, 149, 139, 62, 69, 238, 105, 190, 187, 42, 135, 62, 25, 217, 231, 61, 159, 114, 85, 62, 80, 38, 87, 62, 202, 137, 157, 189, 3, 20, 81, 190, 48, 164, 113, 62, 130, 242, 163, 190, 174, 233, 133, 190, 86, 115, 199, 188, 179, 73, 87, 62, 202, 20, 18, 62, 16, 207, 187, 189, 63, 43, 194, 61, 164, 56, 144, 62, 98, 215, 85, 189, 122, 179, 92, 62, 211, 200, 58, 62, 59, 149, 249, 61, 224, 9, 198, 59, 143, 220, 246, 61, 242, 192, 128, 61, 132, 163, 227, 190, 167, 110, 99, 191, 48, 7, 42, 62, 81, 195, 136, 62, 25, 156, 64, 190, 101, 219, 25, 190, 245, 45, 38, 61, 70, 95, 97, 188, 6, 87, 203, 61, 133, 122, 91, 61, 72, 203, 17, 188, 15, 249, 49, 61, 6, 153, 133, 189, 192, 92, 31, 61, 244, 65, 10, 62, 242, 220, 148, 61, 13, 216, 16, 62, 192, 133, 75, 61, 101, 191, 167, 60, 45, 156, 180, 61, 23, 184, 237, 189, 27, 51, 30, 190, 123, 64, 111, 61, 171, 34, 223, 60, 206, 7, 21, 189, 150, 100, 223, 187, 53, 226, 124, 189, 198, 148, 130, 187, 158, 200, 16, 190, 233, 234, 53, 190, 172, 96, 34, 190, 76, 56, 148, 189, 23, 28, 104, 189, 111, 32, 217, 189, 96, 25, 42, 61, 34, 156, 7, 190, 92, 123, 46, 191, 96, 205, 178, 61, 7, 151, 16, 62, 174, 177, 158, 190, 31, 193, 108, 62, 181, 187, 201, 189, 32, 179, 12, 61, 124, 216, 63, 62, 213, 131, 240, 61, 100, 17, 210, 61, 189, 247, 136, 189, 215, 115, 26, 190, 244, 204, 45, 61, 175, 25, 197, 189, 64, 158, 20, 191, 129, 208, 68, 190, 86, 117, 8, 62, 176, 183, 86, 62, 245, 232, 109, 61, 120, 35, 140, 62, 129, 81, 86, 62, 19, 249, 126, 190, 15, 223, 236, 61, 65, 211, 133, 188, 244, 55, 75, 61, 165, 42, 116, 62, 86, 87, 88, 62, 182, 149, 60, 62, 55, 239, 98, 190, 242, 29, 67, 189, 148, 232, 84, 62, 136, 206, 252, 62, 218, 1, 148, 62, 98, 185, 150, 61, 198, 199, 196, 61, 75, 112, 62, 62, 9, 75, 178, 189, 158, 249, 36, 62, 61, 244, 222, 189, 153, 157, 0, 62, 126, 58, 100, 188, 243, 33, 174, 61, 39, 241, 6, 62, 149, 246, 162, 60, 37, 64, 225, 61, 17, 11, 20, 190, 145, 170, 113, 62, 193, 135, 166, 189, 131, 87, 229, 188, 93, 12, 228, 189, 132, 200, 72, 60, 33, 160, 203, 190, 24, 223, 97, 61, 165, 190, 144, 61, 132, 77, 135, 61, 1, 70, 65, 190, 128, 255, 60, 189, 14, 57, 132, 190, 4, 204, 168, 190, 203, 255, 164, 189, 68, 140, 110, 62, 137, 246, 137, 60, 70, 229, 11, 190, 135, 183, 178, 190, 198, 222, 139, 61, 231, 48, 193, 61, 84, 180, 146, 189, 55, 181, 177, 189, 32, 24, 37, 61, 213, 168, 99, 60, 112, 67, 28, 62, 74, 149, 158, 60, 205, 179, 139, 189, 57, 49, 17, 61, 145, 4, 169, 60, 195, 3, 61, 61, 216, 88, 189, 60, 179, 226, 251, 189, 253, 230, 210, 189, 73, 66, 10, 190, 89, 178, 113, 189, 169, 252, 65, 61, 190, 47, 5, 62, 239, 225, 73, 61, 168, 219, 44, 189, 3, 40, 96, 189, 197, 77, 27, 189, 6, 139, 7, 190, 32, 24, 250, 189, 197, 92, 36, 190, 25, 152, 10, 188, 182, 86, 53, 189, 53, 235, 19, 190, 144, 96, 66, 61, 157, 130, 15, 189, 199, 56, 118, 188, 110, 33, 130, 62, 211, 171, 186, 61, 158, 214, 220, 190, 155, 213, 224, 189, 55, 108, 137, 190, 163, 103, 77, 62, 188, 87, 45, 190, 186, 94, 203, 61, 168, 15, 58, 62, 4, 236, 212, 190, 236, 198, 155, 62, 243, 221, 108, 189, 131, 163, 78, 62, 178, 231, 74, 61, 159, 55, 121, 190, 147, 95, 239, 189, 12, 232, 174, 190, 75, 100, 101, 190, 130, 157, 214, 189, 195, 36, 153, 61, 96, 254, 209, 61, 196, 139, 242, 61, 78, 86, 139, 190, 95, 190, 135, 190, 94, 22, 9, 190, 119, 51, 145, 62, 95, 27, 65, 61, 192, 182, 172, 189, 187, 100, 248, 189, 162, 216, 208, 61, 216, 206, 142, 61, 54, 66, 194, 190, 185, 118, 44, 190, 148, 118, 20, 190, 100, 83, 234, 189, 47, 164, 245, 188, 37, 23, 147, 60, 166, 42, 15, 191, 177, 118, 61, 61, 156, 217, 222, 189, 71, 114, 115, 61, 227, 220, 234, 187, 220, 73, 251, 189, 242, 98, 102, 190, 90, 203, 32, 62, 253, 47, 153, 61, 167, 230, 235, 61, 163, 171, 50, 189, 115, 233, 43, 189, 162, 165, 59, 188, 149, 86, 240, 61, 9, 3, 33, 61, 159, 149, 78, 190, 203, 80, 145, 190, 220, 8, 60, 62, 91, 55, 27, 189, 219, 103, 60, 62, 248, 157, 155, 189, 68, 110, 213, 61, 143, 10, 80, 62, 253, 26, 147, 190, 95, 128, 4, 191, 86, 111, 69, 190, 162, 153, 232, 189, 163, 141, 60, 191, 91, 26, 135, 190, 191, 191, 131, 61, 181, 219, 201, 61, 110, 24, 184, 62, 115, 147, 129, 190, 158, 4, 207, 61, 15, 3, 214, 61, 168, 38, 73, 62, 52, 69, 168, 61, 182, 45, 129, 190, 127, 31, 127, 190, 65, 180, 132, 62, 60, 180, 7, 190, 0, 65, 135, 189, 96, 72, 251, 189, 44, 225, 176, 61, 81, 16, 225, 61, 222, 146, 80, 62, 168, 243, 144, 62, 224, 95, 114, 62, 111, 94, 144, 190, 163, 219, 147, 62, 155, 171, 114, 62, 182, 174, 42, 62, 21, 188, 84, 62, 230, 74, 230, 61, 246, 36, 19, 189, 218, 178, 214, 190, 84, 190, 52, 191, 3, 186, 74, 62, 78, 147, 96, 60, 139, 186, 174, 61, 227, 205, 251, 189, 238, 136, 92, 189, 52, 228, 224, 190, 48, 138, 15, 62, 186, 67, 7, 189, 254, 18, 166, 61, 163, 61, 233, 61, 189, 105, 33, 190, 249, 161, 134, 62, 161, 51, 73, 62, 132, 34, 240, 61, 30, 201, 16, 62, 44, 33, 194, 189, 71, 147, 186, 190, 50, 164, 19, 190, 9, 0, 79, 62, 191, 241, 112, 189, 127, 246, 90, 58, 215, 218, 23, 61, 237, 200, 71, 62, 246, 184, 9, 61, 124, 246, 35, 62, 46, 142, 138, 190, 168, 240, 203, 189, 143, 202, 244, 61, 223, 139, 57, 62, 5, 33, 105, 189, 195, 140, 51, 191, 61, 195, 232, 60, 39, 113, 7, 62, 128, 163, 109, 189, 207, 59, 164, 189, 13, 153, 128, 62, 53, 129, 152, 62, 10, 125, 46, 62, 162, 153, 6, 62, 46, 84, 184, 61, 42, 154, 128, 62, 98, 161, 48, 61, 209, 63, 113, 60, 157, 239, 92, 190, 58, 116, 87, 62, 253, 89, 30, 190, 67, 147, 147, 62, 237, 36, 131, 61, 213, 80, 22, 63, 184, 76, 129, 189, 1, 77, 55, 188, 102, 14, 162, 190, 103, 25, 157, 190, 83, 4, 93, 191, 89, 216, 3, 189, 9, 7, 136, 188, 66, 63, 150, 189, 0, 2, 45, 190, 29, 25, 201, 189, 65, 236, 181, 190, 57, 217, 119, 191, 146, 130, 226, 190, 140, 128, 106, 62, 121, 57, 184, 59, 121, 99, 7, 190, 129, 74, 37, 191, 239, 49, 251, 190, 145, 87, 2, 191, 93, 77, 85, 62, 68, 179, 194, 190, 242, 241, 209, 62, 114, 151, 188, 189, 31, 88, 144, 62, 50, 113, 10, 190, 225, 167, 58, 62, 163, 75, 113, 62, 118, 59, 57, 191, 81, 147, 5, 190, 142, 72, 30, 62, 203, 140, 220, 190, 18, 179, 20, 189, 55, 52, 163, 190, 26, 72, 158, 60, 110, 0, 12, 62, 219, 224, 211, 188, 193, 55, 107, 189, 250, 55, 2, 60, 231, 211, 130, 190, 73, 29, 86, 61, 134, 192, 129, 189, 157, 241, 43, 62, 207, 11, 115, 62, 85, 27, 78, 62, 35, 124, 109, 62, 6, 54, 67, 190, 34, 60, 225, 190, 129, 119, 37, 61, 180, 140, 142, 60, 15, 202, 193, 62, 247, 221, 59, 62, 146, 46, 99, 62, 75, 105, 166, 62, 242, 113, 185, 189, 206, 92, 187, 61, 252, 187, 20, 62, 43, 117, 208, 61, 241, 200, 143, 60, 218, 173, 238, 60, 123, 100, 188, 62, 97, 133, 100, 62, 116, 94, 190, 187, 58, 137, 158, 61, 7, 225, 194, 62, 206, 156, 129, 62, 106, 113, 166, 189, 94, 173, 141, 190, 146, 243, 222, 189, 70, 152, 41, 190, 170, 110, 54, 61, 213, 33, 42, 62, 178, 213, 79, 188, 63, 41, 160, 190, 2, 162, 68, 190, 18, 215, 94, 190, 253, 129, 115, 190, 77, 171, 128, 190, 254, 165, 134, 62, 160, 132, 55, 62, 56, 110, 148, 190, 143, 98, 32, 190, 214, 68, 138, 60, 182, 138, 226, 61, 131, 3, 22, 62, 175, 59, 10, 62, 207, 242, 32, 190, 143, 237, 150, 61, 127, 51, 84, 189, 97, 34, 144, 61, 15, 47, 29, 190, 230, 191, 222, 188, 113, 65, 24, 190, 42, 100, 142, 189, 169, 150, 91, 189, 32, 187, 133, 189, 197, 196, 38, 189, 199, 146, 48, 190, 29, 182, 17, 189, 195, 80, 252, 188, 54, 46, 218, 61, 15, 5, 232, 61, 187, 198, 49, 190, 13, 108, 165, 188, 167, 217, 207, 60, 152, 45, 5, 61, 247, 211, 9, 190, 188, 163, 10, 190, 109, 239, 10, 189, 136, 208, 36, 190, 156, 43, 195, 189, 132, 221, 32, 61, 184, 153, 4, 190, 202, 203, 39, 62, 246, 15, 171, 60, 54, 108, 247, 189, 253, 208, 228, 188, 110, 122, 145, 61, 12, 177, 156, 189, 46, 20, 184, 188, 107, 164, 138, 189, 123, 211, 30, 189, 158, 109, 220, 189, 132, 115, 50, 190, 9, 222, 202, 189, 14, 241, 49, 61, 23, 49, 97, 61, 37, 171, 41, 190, 234, 111, 31, 62, 208, 183, 21, 190, 44, 232, 13, 190, 41, 87, 162, 61, 48, 179, 132, 61, 87, 28, 130, 61, 97, 25, 229, 60, 188, 100, 31, 62, 61, 165, 31, 190, 75, 90, 185, 189, 78, 54, 242, 189, 179, 49, 65, 189, 36, 195, 122, 189, 68, 220, 215, 189, 181, 70, 41, 190, 65, 111, 250, 189, 160, 162, 105, 59, 47, 114, 42, 62, 60, 103, 224, 189, 123, 155, 118, 190, 28, 17, 35, 190, 19, 158, 62, 61, 111, 36, 247, 61, 244, 204, 203, 190, 117, 187, 47, 62, 29, 87, 154, 188, 148, 88, 57, 190, 26, 233, 77, 60, 71, 246, 244, 189, 115, 180, 42, 190, 3, 149, 208, 189, 4, 240, 82, 189, 131, 222, 160, 189, 64, 109, 1, 59, 178, 211, 199, 61, 139, 122, 166, 61, 138, 74, 66, 62, 58, 148, 147, 189, 62, 99, 228, 190, 20, 55, 56, 190, 112, 192, 76, 62, 225, 21, 246, 189, 3, 144, 219, 59, 115, 254, 1, 61, 25, 217, 69, 190, 35, 208, 20, 62, 35, 116, 135, 190, 127, 188, 86, 191, 128, 178, 171, 190, 61, 140, 26, 190, 205, 223, 168, 59, 27, 29, 94, 187, 127, 123, 35, 189, 231, 179, 249, 189, 231, 80, 94, 186, 221, 219, 227, 189, 81, 57, 45, 60, 198, 129, 16, 190, 7, 143, 44, 190, 48, 152, 195, 61, 189, 78, 180, 60, 139, 136, 222, 61, 226, 85, 1, 62, 187, 141, 116, 61, 139, 80, 175, 61, 127, 18, 242, 61, 130, 71, 36, 189, 56, 31, 19, 62, 77, 63, 54, 189, 46, 181, 54, 189, 66, 63, 42, 190, 121, 96, 23, 190, 131, 234, 16, 190, 112, 27, 42, 190, 124, 58, 224, 60, 250, 48, 127, 61, 5, 141, 216, 189, 47, 188, 50, 190, 139, 253, 37, 190, 79, 146, 138, 61, 252, 92, 41, 62, 82, 234, 11, 62, 189, 140, 214, 62, 114, 251, 40, 62, 213, 100, 158, 190, 93, 0, 154, 188, 46, 109, 149, 190, 45, 19, 128, 61, 35, 145, 41, 189, 158, 136, 142, 61, 61, 15, 3, 62, 80, 122, 10, 61, 232, 63, 106, 62, 59, 64, 237, 61, 158, 69, 114, 61, 188, 88, 140, 189, 74, 68, 18, 60, 234, 57, 232, 189, 33, 35, 234, 190, 92, 192, 185, 190, 102, 254, 26, 60, 189, 131, 183, 190, 170, 116, 18, 190, 200, 232, 111, 190, 122, 6, 142, 190, 176, 128, 6, 61, 196, 23, 17, 190, 98, 91, 74, 62, 69, 157, 103, 190, 222, 232, 224, 60, 33, 91, 152, 190, 90, 75, 53, 61, 142, 181, 49, 62, 3, 206, 213, 190, 154, 139, 148, 61, 239, 23, 105, 62, 123, 244, 184, 190, 75, 209, 146, 190, 108, 65, 120, 61, 216, 43, 52, 61, 43, 96, 112, 187, 51, 128, 114, 62, 155, 228, 241, 188, 101, 144, 150, 62, 156, 35, 20, 62, 186, 13, 1, 62, 104, 109, 204, 189, 51, 33, 121, 62, 217, 104, 197, 188, 31, 86, 84, 188, 210, 96, 25, 190, 111, 23, 231, 190, 235, 236, 166, 61, 218, 46, 8, 61, 238, 174, 180, 62, 30, 59, 33, 62, 47, 188, 116, 62, 14, 223, 19, 62, 238, 16, 166, 190, 47, 156, 250, 61, 214, 238, 245, 61, 250, 221, 238, 61, 39, 24, 160, 190, 106, 205, 221, 60, 100, 1, 20, 61, 233, 227, 218, 190, 44, 143, 141, 62, 93, 112, 232, 189, 131, 226, 60, 60, 40, 43, 17, 61, 92, 12, 221, 189, 58, 11, 91, 190, 58, 3, 44, 62, 25, 76, 102, 61, 135, 221, 77, 188, 219, 245, 186, 188, 125, 129, 146, 189, 17, 54, 10, 60, 8, 54, 235, 61, 222, 72, 212, 189, 42, 204, 168, 61, 51, 84, 179, 189, 167, 226, 38, 62, 145, 220, 138, 189, 198, 229, 236, 61, 221, 37, 197, 190, 234, 81, 204, 188, 162, 141, 54, 62, 25, 89, 232, 61, 13, 226, 231, 190, 144, 238, 33, 190, 133, 109, 195, 189, 70, 24, 65, 190, 218, 13, 2, 189, 125, 230, 181, 62, 160, 190, 139, 190, 55, 98, 241, 190, 228, 131, 30, 190, 194, 222, 30, 190, 170, 49, 244, 61, 84, 55, 28, 62, 43, 42, 39, 62, 155, 239, 240, 61, 9, 120, 84, 62, 158, 135, 71, 61, 140, 198, 62, 62, 8, 33, 21, 62, 191, 170, 220, 61, 222, 219, 66, 189, 109, 90, 5, 189, 117, 39, 5, 62, 171, 209, 26, 61, 75, 57, 161, 190, 55, 215, 244, 60, 158, 87, 226, 61, 208, 183, 141, 189, 216, 252, 37, 59, 194, 162, 91, 190, 138, 208, 128, 62, 70, 38, 124, 190, 39, 122, 133, 189, 163, 1, 40, 62, 242, 86, 26, 62, 167, 132, 43, 62, 175, 96, 107, 190, 205, 98, 214, 61, 152, 209, 120, 61, 181, 192, 1, 190, 192, 31, 59, 62, 182, 243, 117, 61, 19, 121, 95, 191, 122, 175, 32, 189, 60, 9, 201, 57, 249, 210, 172, 61, 124, 222, 242, 187, 237, 93, 182, 61, 149, 214, 240, 189, 122, 171, 110, 62, 160, 54, 234, 190, 32, 30, 247, 62, 62, 30, 137, 190, 50, 127, 175, 190, 51, 185, 143, 190, 43, 213, 5, 62, 174, 221, 199, 190, 91, 70, 208, 62, 68, 46, 248, 189, 251, 173, 82, 62, 86, 177, 95, 189, 254, 107, 40, 62, 203, 208, 91, 61, 106, 173, 79, 190, 79, 76, 123, 61, 188, 204, 167, 61, 17, 174, 116, 61, 158, 128, 6, 62, 92, 70, 44, 61, 16, 157, 225, 61, 33, 239, 20, 188, 132, 45, 240, 189, 255, 103, 133, 62, 174, 7, 185, 62, 13, 41, 53, 188, 141, 236, 140, 190, 210, 103, 24, 190, 40, 143, 11, 191, 197, 228, 38, 61, 193, 30, 153, 61, 227, 106, 12, 190, 162, 177, 112, 62, 245, 88, 15, 62, 146, 47, 39, 191, 7, 79, 244, 61, 249, 29, 210, 188, 150, 25, 206, 188, 236, 116, 212, 61, 17, 29, 41, 61, 129, 180, 54, 190, 216, 145, 243, 189, 17, 236, 130, 61, 74, 171, 59, 61, 240, 69, 166, 59, 254, 57, 164, 62, 10, 169, 31, 61, 69, 205, 203, 61, 77, 92, 168, 190, 69, 139, 238, 61, 77, 236, 101, 189, 190, 1, 18, 62, 209, 4, 75, 190, 244, 252, 178, 190, 142, 5, 147, 190, 34, 139, 219, 61, 156, 114, 169, 189, 110, 244, 183, 190, 23, 255, 159, 190, 134, 183, 174, 61, 44, 145, 84, 190, 145, 169, 107, 189, 118, 29, 174, 190, 8, 226, 160, 61, 57, 194, 119, 188, 0, 30, 231, 60, 1, 196, 134, 60, 255, 77, 217, 190, 225, 93, 5, 190, 116, 18, 29, 190, 120, 45, 108, 189, 167, 128, 87, 62, 5, 209, 157, 189, 205, 58, 141, 62, 181, 180, 203, 62, 5, 207, 1, 62, 211, 224, 62, 189, 172, 77, 161, 61, 84, 72, 139, 189, 61, 127, 46, 62, 230, 39, 66, 189, 255, 230, 144, 62, 130, 243, 193, 189, 1, 9, 139, 62, 141, 29, 23, 188, 164, 25, 188, 188, 127, 3, 202, 190, 225, 121, 128, 189, 81, 74, 203, 62, 4, 250, 167, 62, 18, 50, 39, 188, 239, 222, 0, 62, 223, 129, 71, 62, 165, 91, 212, 184, 173, 100, 168, 62, 74, 110, 22, 62, 109, 6, 16, 62, 239, 101, 33, 62, 21, 123, 174, 189, 148, 4, 118, 62, 243, 52, 167, 189, 228, 222, 36, 62, 211, 124, 210, 61, 184, 116, 45, 62, 136, 5, 175, 62, 158, 204, 6, 62, 5, 185, 46, 190, 156, 180, 78, 190, 45, 65, 101, 191, 133, 155, 85, 61, 173, 102, 50, 61, 169, 171, 93, 188, 173, 177, 37, 190, 246, 238, 179, 189, 171, 157, 136, 190, 109, 250, 87, 191, 70, 177, 170, 190, 119, 48, 63, 60, 23, 59, 30, 189, 145, 94, 228, 188, 50, 209, 73, 191, 75, 157, 20, 62, 4, 57, 7, 62, 207, 194, 192, 59, 222, 104, 122, 61, 68, 179, 124, 189, 233, 87, 238, 61, 107, 139, 191, 61, 122, 83, 163, 60, 123, 50, 13, 62, 43, 198, 45, 190, 118, 209, 178, 62, 39, 117, 205, 61, 20, 200, 226, 61, 131, 112, 137, 61, 87, 56, 31, 62, 166, 58, 248, 61, 184, 104, 97, 62, 232, 151, 143, 190, 147, 69, 80, 189, 206, 132, 82, 191, 91, 183, 44, 190, 134, 22, 101, 187, 99, 209, 95, 61, 172, 161, 71, 190, 18, 150, 83, 61, 170, 208, 153, 190, 13, 147, 128, 191, 42, 39, 144, 59, 33, 188, 203, 60, 75, 43, 227, 61, 243, 72, 203, 60, 169, 58, 191, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 203, 214, 188, 102, 207, 135, 61, 115, 150, 158, 61, 44, 193, 79, 62, 97, 177, 186, 62, 85, 249, 150, 62, 106, 93, 22, 190, 151, 247, 70, 62, 143, 124, 59, 190, 73, 70, 236, 189, 211, 60, 200, 61, 10, 208, 192, 189, 205, 75, 82, 190, 122, 202, 200, 189, 237, 236, 68, 62, 25, 162, 123, 189, 212, 209, 69, 62, 247, 161, 29, 62, 243, 113, 31, 188, 182, 91, 78, 61, 182, 166, 11, 62, 28, 252, 188, 189, 27, 65, 52, 190, 64, 101, 128, 61, 224, 125, 46, 189, 82, 188, 30, 61, 33, 144, 181, 61, 187, 92, 71, 190, 182, 252, 65, 190, 192, 171, 44, 190, 220, 72, 118, 62, 127, 172, 108, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 231, 95, 190, 222, 247, 162, 61, 99, 28, 65, 191, 205, 86, 138, 62, 15, 71, 252, 60, 106, 97, 1, 190, 25, 40, 157, 61, 128, 158, 183, 190, 117, 190, 30, 62, 226, 128, 247, 190, 240, 79, 56, 62, 115, 76, 109, 61, 124, 64, 147, 62, 220, 174, 98, 190, 177, 214, 19, 191, 200, 156, 181, 61, 207, 199, 61, 63, 23, 52, 61, 63, 46, 168, 67, 62, 38, 187, 197, 61, 213, 78, 221, 189, 165, 235, 158, 190, 190, 113, 51, 189, 247, 145, 26, 63, 2, 250, 155, 62, 81, 99, 153, 62, 69, 114, 16, 190, 9, 204, 124, 190, 101, 71, 2, 62, 234, 185, 223, 190, 209, 54, 253, 62, 167, 136, 181, 62, 160, 224, 136, 190, 9, 116, 164, 190, 210, 151, 70, 62, 72, 19, 16, 190, 245, 207, 132, 190, 190, 151, 154, 190, 88, 119, 245, 61, 35, 65, 174, 60, 126, 12, 242, 189, 78, 0, 126, 61, 21, 63, 199, 61, 45, 4, 47, 190, 201, 125, 62, 62, 72, 51, 115, 60, 171, 82, 83, 61, 222, 60, 245, 189, 254, 187, 190, 61, 175, 134, 128, 62, 190, 115, 96, 62, 232, 232, 230, 189, 223, 45, 20, 62, 242, 40, 171, 59, 215, 138, 172, 186, 8, 171, 16, 63, 249, 229, 152, 60, 97, 57, 88, 62, 188, 129, 52, 190, 28, 59, 230, 62, 140, 101, 164, 190, 65, 190, 180, 61, 184, 17, 192, 188, 16, 229, 0, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 25, 15, 189, 19, 105, 45, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {31, 71, 212, 63, 188, 193, 254, 190, 147, 232, 186, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {251, 187, 45, 64, 80, 11, 175, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0006/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}