// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 194, 248, 62, 108, 53, 121, 190, 205, 31, 171, 190, 50, 186, 26, 61, 201, 210, 73, 190, 243, 3, 149, 62, 183, 170, 74, 61, 36, 44, 90, 62, 15, 181, 32, 62, 76, 135, 152, 190, 221, 181, 20, 190, 73, 211, 117, 62, 86, 223, 3, 191, 4, 117, 89, 62, 168, 215, 23, 189, 4, 190, 181, 62, 72, 251, 222, 190, 171, 253, 118, 60, 247, 226, 94, 62, 24, 250, 41, 62, 115, 29, 183, 61, 237, 104, 241, 62, 233, 14, 23, 190, 55, 164, 66, 190, 18, 89, 70, 190, 171, 102, 205, 190, 15, 70, 111, 190, 97, 139, 114, 190, 138, 65, 1, 63, 252, 171, 135, 61, 126, 99, 223, 62, 250, 120, 2, 191, 234, 233, 133, 190, 123, 129, 38, 60, 14, 198, 185, 189, 178, 135, 181, 190, 58, 148, 3, 191, 236, 19, 31, 190, 211, 79, 56, 190, 150, 224, 250, 62, 62, 132, 140, 60, 149, 186, 197, 190, 158, 225, 127, 190, 168, 68, 32, 190, 42, 216, 179, 189, 247, 189, 21, 61, 205, 216, 6, 62, 66, 183, 157, 190, 211, 106, 71, 189, 102, 157, 214, 62, 164, 199, 31, 62, 4, 167, 153, 60, 82, 72, 187, 59, 100, 120, 95, 62, 0, 60, 244, 189, 75, 55, 118, 62, 153, 35, 147, 190, 185, 170, 48, 190, 14, 77, 72, 190, 88, 95, 0, 190, 239, 54, 223, 62, 138, 239, 229, 190, 159, 180, 188, 62, 125, 100, 220, 189, 143, 207, 204, 190, 204, 142, 249, 190, 221, 136, 165, 190, 87, 130, 28, 62, 242, 81, 210, 190, 224, 186, 219, 61, 82, 35, 214, 190, 181, 105, 249, 62, 4, 233, 230, 62, 194, 190, 227, 62, 96, 18, 241, 62, 178, 197, 132, 190, 169, 179, 16, 191, 113, 207, 148, 190, 98, 85, 19, 191, 59, 39, 10, 62, 232, 207, 158, 190, 54, 71, 73, 188, 130, 187, 93, 62, 17, 222, 154, 190, 227, 146, 156, 190, 144, 12, 21, 190, 111, 25, 233, 62, 158, 44, 75, 188, 126, 236, 18, 191, 181, 41, 244, 62, 244, 142, 249, 62, 70, 152, 13, 191, 144, 131, 236, 62, 109, 143, 10, 63, 227, 96, 154, 61, 158, 24, 84, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 201, 19, 191, 255, 154, 135, 62, 77, 205, 150, 62, 228, 68, 187, 62, 254, 43, 106, 62, 15, 186, 249, 62, 13, 46, 250, 62, 16, 147, 243, 62, 117, 86, 199, 62, 245, 39, 169, 189, 24, 140, 135, 62, 39, 97, 143, 61, 32, 201, 241, 62, 226, 105, 66, 62, 57, 48, 223, 189, 50, 248, 69, 190, 139, 82, 240, 62, 97, 219, 30, 62, 106, 240, 1, 63, 124, 104, 205, 61, 184, 61, 174, 62, 29, 166, 249, 190, 14, 174, 18, 63, 201, 222, 74, 189, 142, 91, 227, 62, 105, 97, 154, 62, 232, 165, 250, 190, 159, 145, 142, 62, 112, 228, 225, 62, 226, 158, 225, 190, 33, 233, 33, 62, 147, 96, 184, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 187, 200, 189, 251, 192, 210, 189, 186, 141, 186, 60, 122, 17, 34, 190, 92, 21, 195, 61, 13, 83, 145, 61, 49, 2, 155, 61, 47, 3, 40, 186, 96, 43, 41, 190, 140, 21, 13, 190, 117, 180, 23, 62, 215, 173, 5, 190, 199, 6, 136, 61, 29, 74, 14, 62, 18, 154, 39, 190, 190, 181, 10, 62, 43, 212, 2, 62, 239, 99, 50, 62, 135, 120, 36, 62, 15, 204, 191, 61, 159, 219, 232, 188, 17, 80, 182, 189, 7, 217, 164, 61, 120, 96, 10, 62, 216, 70, 19, 189, 43, 16, 192, 189, 23, 190, 9, 189, 132, 26, 12, 62, 235, 59, 170, 60, 246, 35, 87, 189, 121, 247, 47, 61, 136, 20, 170, 61, 198, 15, 163, 61, 172, 187, 223, 188, 200, 55, 218, 189, 81, 85, 136, 189, 99, 195, 47, 62, 129, 230, 50, 62, 28, 191, 63, 61, 100, 191, 6, 62, 170, 114, 23, 62, 170, 142, 217, 189, 90, 75, 82, 61, 194, 0, 4, 190, 98, 206, 108, 186, 173, 43, 166, 60, 4, 132, 196, 61, 102, 98, 33, 62, 183, 178, 207, 187, 226, 134, 226, 189, 138, 118, 154, 188, 192, 196, 241, 189, 201, 124, 107, 61, 20, 164, 251, 59, 20, 48, 178, 60, 85, 35, 28, 59, 171, 49, 186, 61, 102, 48, 71, 189, 234, 167, 181, 61, 121, 153, 43, 190, 120, 168, 145, 189, 51, 128, 113, 60, 63, 58, 215, 189, 56, 107, 161, 61, 230, 92, 191, 189, 202, 21, 103, 61, 153, 36, 205, 188, 222, 192, 25, 190, 99, 150, 197, 61, 189, 199, 233, 61, 95, 104, 22, 62, 75, 113, 20, 62, 29, 253, 130, 61, 149, 34, 38, 62, 31, 228, 43, 190, 164, 177, 189, 61, 80, 83, 18, 61, 112, 56, 162, 61, 224, 41, 16, 62, 49, 158, 39, 190, 234, 203, 3, 190, 81, 245, 23, 190, 163, 213, 13, 190, 63, 77, 22, 190, 207, 148, 49, 190, 18, 30, 24, 61, 205, 96, 33, 62, 245, 1, 223, 189, 79, 162, 4, 190, 9, 158, 215, 189, 167, 76, 125, 61, 118, 230, 185, 189, 122, 206, 124, 188, 206, 212, 50, 62, 16, 43, 224, 188, 50, 159, 123, 61, 60, 84, 21, 189, 5, 6, 242, 188, 203, 222, 30, 190, 253, 103, 195, 189, 251, 192, 222, 61, 12, 189, 43, 62, 132, 170, 251, 189, 159, 15, 26, 62, 200, 34, 74, 59, 143, 202, 8, 190, 251, 227, 209, 189, 167, 154, 20, 61, 7, 144, 238, 189, 114, 192, 24, 190, 6, 145, 164, 189, 232, 57, 84, 61, 107, 128, 162, 60, 246, 95, 224, 187, 219, 199, 50, 62, 93, 200, 25, 190, 196, 196, 250, 188, 199, 89, 134, 189, 231, 130, 51, 190, 173, 202, 50, 190, 126, 162, 250, 188, 237, 242, 19, 190, 181, 109, 192, 189, 62, 135, 25, 62, 248, 230, 200, 61, 202, 27, 191, 61, 95, 243, 182, 188, 111, 128, 0, 62, 72, 234, 217, 61, 41, 95, 106, 61, 215, 1, 209, 60, 1, 18, 92, 189, 155, 172, 6, 189, 87, 162, 140, 186, 170, 177, 239, 186, 17, 73, 195, 60, 197, 146, 160, 61, 174, 29, 111, 61, 87, 86, 64, 61, 178, 203, 165, 61, 124, 52, 11, 62, 103, 240, 249, 61, 127, 195, 48, 62, 44, 101, 179, 188, 98, 244, 149, 187, 230, 135, 37, 62, 91, 0, 44, 62, 186, 247, 77, 189, 73, 87, 24, 190, 171, 178, 99, 189, 201, 136, 10, 62, 16, 226, 150, 61, 231, 99, 172, 61, 95, 203, 36, 62, 126, 208, 207, 61, 122, 26, 212, 189, 46, 151, 189, 189, 242, 31, 216, 61, 18, 83, 15, 190, 204, 114, 22, 62, 72, 200, 67, 61, 86, 29, 153, 61, 188, 206, 79, 60, 148, 6, 165, 188, 103, 178, 6, 62, 226, 151, 183, 60, 50, 75, 7, 62, 161, 29, 166, 189, 34, 37, 135, 61, 29, 33, 191, 188, 4, 239, 23, 189, 35, 67, 226, 189, 203, 246, 0, 61, 88, 116, 194, 189, 89, 101, 16, 62, 255, 49, 233, 61, 180, 155, 106, 189, 43, 104, 132, 61, 62, 160, 8, 62, 11, 13, 11, 190, 255, 67, 139, 189, 53, 100, 24, 62, 231, 138, 52, 190, 46, 76, 5, 190, 138, 194, 20, 189, 227, 52, 45, 190, 67, 165, 139, 61, 137, 9, 16, 62, 93, 202, 236, 189, 65, 127, 208, 189, 251, 242, 33, 62, 181, 178, 144, 61, 145, 184, 10, 190, 153, 80, 55, 61, 27, 64, 47, 190, 215, 214, 225, 61, 175, 160, 4, 61, 41, 213, 181, 61, 245, 167, 6, 190, 140, 87, 116, 189, 148, 139, 155, 61, 6, 191, 36, 62, 7, 145, 138, 60, 244, 111, 255, 60, 76, 230, 200, 61, 37, 158, 146, 61, 208, 47, 169, 61, 49, 70, 13, 61, 204, 184, 16, 190, 136, 151, 36, 190, 56, 8, 36, 61, 9, 53, 199, 189, 8, 3, 235, 60, 77, 90, 180, 189, 129, 138, 200, 189, 179, 205, 45, 61, 243, 132, 59, 61, 107, 131, 226, 61, 92, 163, 188, 189, 62, 208, 18, 62, 79, 235, 33, 190, 204, 18, 138, 61, 101, 20, 7, 189, 228, 104, 211, 61, 246, 154, 220, 61, 107, 33, 15, 190, 26, 221, 23, 62, 218, 248, 157, 57, 99, 216, 233, 61, 14, 106, 217, 188, 193, 156, 4, 62, 248, 107, 210, 61, 14, 118, 164, 61, 59, 166, 19, 62, 122, 171, 1, 62, 93, 70, 224, 189, 40, 22, 159, 61, 69, 27, 250, 189, 63, 173, 7, 190, 179, 109, 34, 62, 65, 166, 36, 62, 72, 147, 32, 190, 72, 41, 25, 190, 7, 90, 172, 189, 207, 143, 31, 62, 130, 221, 5, 62, 231, 76, 37, 62, 219, 112, 161, 189, 16, 125, 218, 189, 30, 61, 42, 190, 55, 184, 46, 188, 239, 23, 172, 60, 55, 196, 1, 190, 82, 21, 128, 189, 123, 196, 220, 187, 233, 217, 197, 189, 161, 242, 36, 190, 58, 42, 19, 190, 56, 81, 59, 61, 175, 169, 57, 188, 133, 33, 223, 61, 41, 45, 165, 61, 98, 206, 121, 59, 82, 24, 145, 61, 132, 38, 34, 189, 160, 46, 36, 61, 58, 111, 40, 62, 212, 244, 195, 61, 31, 69, 39, 62, 26, 41, 153, 61, 76, 177, 21, 61, 189, 47, 219, 61, 217, 22, 238, 189, 135, 84, 29, 190, 233, 15, 164, 61, 84, 121, 84, 61, 18, 96, 199, 188, 67, 190, 129, 60, 47, 182, 35, 189, 152, 187, 0, 187, 105, 225, 8, 190, 221, 255, 28, 190, 188, 92, 24, 190, 90, 29, 83, 189, 222, 255, 96, 189, 111, 32, 217, 189, 252, 159, 74, 61, 34, 156, 7, 190, 247, 112, 52, 190, 133, 32, 243, 61, 107, 194, 5, 62, 233, 238, 36, 190, 138, 41, 194, 61, 143, 158, 131, 189, 28, 114, 13, 189, 251, 198, 19, 62, 22, 223, 214, 61, 169, 209, 48, 190, 118, 156, 50, 62, 204, 63, 213, 189, 126, 223, 78, 61, 153, 205, 209, 188, 234, 254, 40, 190, 132, 251, 236, 189, 21, 224, 184, 61, 211, 209, 183, 61, 50, 169, 181, 189, 64, 114, 1, 62, 154, 253, 226, 61, 20, 213, 131, 189, 123, 40, 108, 188, 158, 160, 145, 189, 231, 164, 178, 189, 231, 32, 10, 62, 140, 247, 5, 62, 187, 7, 129, 61, 229, 90, 13, 186, 133, 195, 4, 62, 26, 137, 231, 61, 72, 181, 226, 61, 8, 73, 42, 62, 201, 138, 138, 61, 34, 99, 155, 189, 82, 148, 153, 61, 8, 105, 126, 189, 190, 199, 3, 62, 70, 11, 244, 189, 219, 13, 250, 61, 71, 145, 101, 61, 118, 206, 228, 61, 189, 134, 63, 188, 148, 33, 214, 61, 10, 24, 238, 61, 209, 156, 37, 190, 230, 46, 194, 189, 120, 120, 220, 189, 22, 144, 44, 190, 181, 152, 224, 60, 58, 215, 225, 61, 152, 41, 56, 61, 18, 236, 255, 61, 172, 79, 4, 62, 90, 241, 226, 61, 186, 212, 211, 189, 222, 239, 180, 60, 236, 94, 105, 188, 24, 0, 37, 189, 235, 90, 93, 60, 107, 206, 181, 61, 150, 244, 203, 59, 37, 71, 40, 189, 183, 215, 231, 184, 248, 56, 147, 61, 3, 180, 196, 61, 84, 180, 146, 189, 55, 181, 177, 189, 32, 24, 37, 61, 226, 167, 149, 60, 138, 166, 30, 62, 254, 248, 197, 60, 85, 8, 133, 189, 57, 49, 17, 61, 73, 49, 213, 60, 208, 183, 68, 61, 127, 223, 205, 60, 253, 26, 245, 189, 253, 230, 210, 189, 82, 48, 10, 190, 47, 41, 113, 189, 169, 252, 65, 61, 250, 159, 7, 62, 218, 173, 80, 61, 44, 93, 32, 189, 228, 26, 93, 189, 95, 117, 19, 189, 6, 139, 7, 190, 243, 239, 249, 189, 104, 203, 33, 190, 25, 152, 10, 188, 216, 197, 51, 189, 53, 235, 19, 190, 144, 96, 66, 61, 199, 150, 11, 189, 199, 56, 118, 188, 40, 96, 246, 61, 22, 129, 163, 189, 224, 91, 142, 189, 66, 7, 9, 190, 79, 28, 215, 189, 33, 87, 181, 188, 6, 121, 217, 189, 131, 224, 27, 61, 47, 35, 226, 60, 195, 226, 183, 61, 131, 37, 206, 61, 6, 86, 49, 187, 211, 216, 4, 62, 146, 126, 133, 61, 43, 93, 9, 190, 227, 127, 51, 61, 83, 24, 171, 61, 157, 145, 13, 62, 48, 132, 231, 60, 18, 40, 41, 62, 126, 160, 151, 189, 102, 37, 51, 62, 197, 119, 39, 190, 36, 169, 15, 190, 175, 57, 139, 189, 227, 243, 0, 62, 59, 73, 16, 62, 69, 198, 161, 61, 118, 59, 135, 60, 145, 211, 188, 189, 252, 86, 72, 60, 39, 59, 200, 61, 209, 204, 225, 61, 7, 145, 132, 61, 192, 86, 236, 60, 57, 76, 35, 62, 78, 254, 139, 189, 1, 192, 42, 190, 116, 0, 170, 61, 145, 86, 170, 59, 89, 71, 37, 61, 128, 19, 139, 61, 120, 152, 131, 61, 254, 139, 36, 190, 178, 87, 149, 61, 119, 31, 46, 62, 59, 69, 250, 61, 60, 39, 130, 61, 41, 42, 194, 60, 174, 241, 203, 189, 28, 92, 60, 61, 182, 104, 195, 60, 0, 131, 175, 188, 52, 214, 44, 190, 39, 92, 3, 62, 70, 79, 93, 61, 227, 115, 44, 62, 228, 47, 139, 189, 194, 233, 176, 61, 16, 172, 30, 62, 157, 155, 205, 60, 112, 32, 49, 61, 207, 155, 218, 189, 45, 206, 186, 189, 119, 171, 195, 188, 82, 231, 35, 190, 254, 207, 195, 60, 118, 92, 203, 61, 34, 116, 246, 61, 141, 53, 22, 190, 41, 113, 140, 189, 217, 241, 37, 61, 61, 235, 224, 188, 53, 58, 132, 189, 243, 24, 152, 189, 25, 132, 26, 190, 150, 12, 61, 189, 58, 154, 196, 188, 167, 173, 67, 61, 208, 156, 187, 58, 213, 155, 124, 60, 30, 31, 197, 188, 117, 12, 50, 61, 72, 8, 16, 62, 170, 48, 33, 62, 24, 181, 89, 188, 31, 184, 240, 61, 228, 35, 46, 62, 140, 36, 87, 61, 36, 72, 10, 189, 8, 187, 57, 61, 14, 243, 33, 190, 32, 153, 154, 189, 239, 196, 42, 190, 144, 171, 246, 61, 118, 154, 12, 190, 223, 249, 112, 61, 23, 173, 201, 189, 213, 238, 164, 189, 235, 237, 1, 190, 143, 110, 188, 61, 142, 181, 139, 189, 225, 92, 52, 61, 34, 37, 185, 61, 236, 212, 47, 190, 195, 95, 235, 61, 148, 229, 20, 62, 163, 81, 194, 61, 21, 67, 36, 62, 72, 188, 26, 190, 63, 207, 230, 189, 29, 255, 38, 190, 250, 238, 46, 62, 142, 46, 7, 188, 136, 208, 161, 189, 160, 144, 7, 60, 144, 220, 242, 61, 96, 127, 150, 61, 35, 133, 210, 61, 249, 134, 49, 190, 175, 143, 11, 190, 40, 19, 41, 61, 217, 137, 180, 61, 121, 50, 21, 190, 122, 217, 153, 189, 66, 38, 9, 189, 111, 153, 195, 61, 3, 138, 126, 61, 81, 122, 248, 189, 255, 208, 27, 62, 229, 87, 52, 62, 30, 102, 43, 61, 44, 130, 160, 61, 31, 6, 246, 189, 221, 233, 12, 62, 109, 122, 246, 189, 169, 19, 98, 189, 1, 153, 142, 61, 53, 131, 228, 188, 107, 89, 80, 188, 65, 148, 47, 62, 86, 31, 151, 188, 137, 111, 149, 60, 207, 221, 104, 61, 40, 13, 16, 190, 137, 21, 238, 189, 238, 136, 228, 189, 175, 167, 244, 61, 92, 232, 108, 189, 235, 133, 51, 62, 1, 16, 111, 60, 0, 112, 6, 190, 236, 213, 248, 187, 86, 175, 54, 59, 199, 68, 48, 190, 197, 14, 114, 60, 121, 212, 230, 61, 238, 67, 189, 188, 58, 236, 208, 189, 175, 208, 28, 190, 115, 45, 186, 188, 62, 250, 5, 190, 188, 250, 240, 61, 239, 150, 45, 190, 44, 111, 21, 62, 98, 74, 159, 61, 85, 41, 13, 62, 223, 60, 117, 61, 94, 205, 131, 61, 153, 5, 247, 61, 132, 204, 162, 189, 93, 134, 126, 61, 200, 168, 69, 188, 4, 161, 52, 190, 182, 197, 8, 190, 107, 186, 20, 190, 94, 213, 31, 190, 2, 121, 184, 59, 34, 189, 9, 190, 13, 150, 201, 189, 159, 213, 72, 189, 193, 168, 95, 61, 46, 1, 185, 189, 142, 86, 184, 189, 230, 101, 156, 61, 209, 53, 181, 61, 253, 229, 130, 61, 140, 89, 3, 62, 34, 147, 231, 189, 170, 232, 160, 189, 209, 110, 135, 60, 60, 183, 10, 189, 168, 3, 7, 189, 197, 103, 147, 60, 175, 51, 9, 62, 182, 109, 255, 61, 190, 78, 5, 189, 97, 241, 76, 189, 123, 76, 43, 62, 87, 86, 173, 61, 80, 10, 30, 62, 26, 39, 189, 189, 248, 204, 38, 62, 198, 90, 25, 62, 164, 137, 154, 61, 122, 78, 196, 60, 153, 16, 86, 61, 68, 207, 14, 62, 217, 3, 230, 189, 36, 238, 219, 187, 124, 169, 168, 188, 98, 209, 195, 61, 243, 190, 179, 61, 166, 241, 138, 61, 14, 8, 34, 61, 105, 236, 50, 190, 34, 62, 147, 189, 54, 58, 188, 61, 127, 133, 175, 60, 182, 208, 40, 190, 48, 79, 149, 60, 220, 194, 26, 62, 242, 231, 48, 190, 143, 210, 35, 62, 214, 68, 138, 60, 145, 145, 2, 62, 98, 93, 22, 62, 33, 20, 23, 62, 207, 242, 32, 190, 58, 10, 184, 61, 200, 18, 70, 189, 97, 34, 144, 61, 142, 217, 20, 190, 200, 197, 254, 188, 113, 65, 24, 190, 42, 100, 142, 189, 14, 227, 60, 189, 32, 187, 133, 189, 144, 100, 32, 189, 199, 146, 48, 190, 25, 40, 21, 189, 164, 79, 239, 188, 54, 46, 218, 61, 15, 5, 232, 61, 203, 24, 34, 190, 13, 108, 165, 188, 167, 217, 207, 60, 210, 156, 66, 61, 88, 253, 3, 190, 188, 163, 10, 190, 109, 239, 10, 189, 136, 208, 36, 190, 229, 173, 161, 189, 5, 223, 109, 61, 187, 104, 227, 189, 194, 197, 41, 62, 246, 15, 171, 60, 54, 108, 247, 189, 253, 208, 228, 188, 110, 122, 145, 61, 12, 177, 156, 189, 46, 20, 184, 188, 107, 164, 138, 189, 123, 211, 30, 189, 158, 109, 220, 189, 132, 115, 50, 190, 9, 222, 202, 189, 14, 241, 49, 61, 23, 49, 97, 61, 37, 171, 41, 190, 234, 111, 31, 62, 208, 183, 21, 190, 44, 232, 13, 190, 41, 87, 162, 61, 48, 179, 132, 61, 87, 28, 130, 61, 97, 25, 229, 60, 188, 100, 31, 62, 61, 165, 31, 190, 75, 90, 185, 189, 78, 54, 242, 189, 179, 49, 65, 189, 36, 195, 122, 189, 68, 220, 215, 189, 181, 70, 41, 190, 65, 111, 250, 189, 160, 162, 105, 59, 47, 114, 42, 62, 178, 96, 181, 59, 94, 197, 58, 61, 113, 247, 6, 190, 154, 45, 23, 62, 74, 109, 125, 61, 78, 92, 161, 61, 187, 172, 30, 62, 67, 137, 138, 61, 239, 89, 255, 189, 163, 200, 37, 189, 42, 34, 155, 188, 17, 111, 162, 189, 246, 58, 254, 189, 204, 37, 9, 189, 120, 16, 211, 61, 140, 52, 78, 61, 65, 33, 129, 61, 66, 171, 226, 61, 217, 0, 255, 61, 83, 175, 90, 60, 77, 228, 51, 190, 68, 168, 98, 189, 104, 148, 38, 62, 247, 150, 112, 61, 229, 111, 171, 61, 32, 202, 239, 61, 32, 214, 14, 189, 31, 86, 194, 61, 176, 136, 73, 189, 142, 44, 85, 60, 216, 197, 47, 190, 213, 158, 173, 60, 205, 223, 168, 59, 27, 29, 94, 187, 127, 123, 35, 189, 231, 179, 249, 189, 231, 80, 94, 186, 221, 219, 227, 189, 81, 57, 45, 60, 198, 129, 16, 190, 7, 143, 44, 190, 48, 152, 195, 61, 189, 78, 180, 60, 139, 136, 222, 61, 226, 85, 1, 62, 187, 141, 116, 61, 139, 80, 175, 61, 127, 18, 242, 61, 130, 71, 36, 189, 56, 31, 19, 62, 77, 63, 54, 189, 46, 181, 54, 189, 66, 63, 42, 190, 121, 96, 23, 190, 131, 234, 16, 190, 112, 27, 42, 190, 124, 58, 224, 60, 250, 48, 127, 61, 5, 141, 216, 189, 47, 188, 50, 190, 139, 253, 37, 190, 79, 146, 138, 61, 252, 92, 41, 62, 82, 234, 11, 62, 153, 22, 33, 62, 207, 97, 171, 61, 200, 117, 155, 60, 18, 105, 45, 61, 156, 171, 28, 190, 101, 252, 76, 189, 85, 13, 26, 188, 116, 132, 19, 60, 183, 127, 165, 59, 227, 7, 7, 61, 229, 251, 76, 61, 165, 146, 171, 58, 129, 1, 164, 61, 211, 125, 103, 189, 67, 145, 0, 62, 64, 217, 47, 190, 224, 74, 38, 190, 33, 72, 115, 61, 213, 250, 45, 62, 8, 33, 215, 189, 19, 195, 49, 190, 114, 210, 205, 189, 122, 219, 38, 190, 223, 245, 156, 188, 167, 133, 123, 61, 184, 148, 39, 61, 203, 156, 0, 189, 195, 167, 252, 61, 217, 159, 39, 190, 106, 244, 242, 61, 107, 56, 6, 62, 71, 3, 167, 188, 114, 165, 212, 189, 19, 111, 71, 61, 172, 8, 20, 190, 247, 86, 151, 189, 79, 84, 106, 61, 51, 204, 23, 190, 177, 215, 185, 60, 167, 95, 26, 62, 113, 145, 45, 190, 160, 11, 20, 62, 92, 41, 185, 189, 46, 231, 19, 61, 188, 173, 40, 190, 39, 193, 14, 62, 162, 130, 50, 61, 254, 92, 177, 189, 55, 99, 36, 61, 96, 201, 88, 189, 106, 101, 196, 59, 243, 248, 239, 188, 134, 185, 39, 62, 35, 48, 232, 61, 5, 196, 37, 62, 64, 110, 8, 62, 252, 113, 34, 190, 186, 183, 167, 189, 160, 93, 120, 58, 14, 150, 96, 60, 23, 109, 7, 190, 203, 54, 241, 60, 10, 61, 187, 189, 247, 83, 24, 189, 37, 141, 246, 61, 65, 87, 84, 189, 197, 195, 11, 190, 204, 221, 237, 189, 106, 148, 189, 189, 238, 52, 35, 190, 80, 7, 23, 62, 178, 6, 168, 61, 89, 150, 99, 61, 174, 149, 241, 61, 77, 10, 28, 190, 121, 133, 31, 61, 16, 124, 7, 62, 190, 20, 5, 190, 206, 234, 143, 188, 151, 193, 70, 189, 49, 113, 198, 61, 44, 227, 105, 61, 96, 124, 35, 62, 213, 14, 39, 190, 204, 202, 4, 190, 231, 45, 2, 62, 52, 62, 248, 61, 139, 163, 44, 61, 40, 15, 12, 190, 208, 252, 219, 57, 10, 93, 154, 188, 124, 197, 176, 61, 230, 209, 87, 61, 116, 225, 170, 189, 101, 126, 22, 190, 153, 12, 18, 190, 173, 23, 30, 62, 14, 255, 106, 61, 161, 47, 232, 61, 190, 45, 21, 62, 159, 99, 0, 62, 222, 37, 172, 61, 0, 119, 117, 189, 252, 179, 132, 61, 4, 63, 182, 61, 125, 47, 164, 61, 11, 225, 85, 59, 255, 26, 75, 61, 158, 178, 146, 61, 131, 86, 2, 61, 0, 213, 233, 189, 75, 98, 10, 62, 42, 174, 165, 61, 253, 24, 212, 189, 80, 143, 55, 189, 4, 20, 2, 190, 57, 220, 254, 61, 90, 8, 205, 189, 134, 213, 70, 189, 217, 57, 6, 62, 193, 237, 145, 61, 217, 107, 174, 61, 170, 46, 17, 190, 181, 67, 120, 61, 12, 235, 223, 61, 218, 234, 52, 190, 19, 81, 168, 61, 30, 249, 14, 189, 61, 160, 45, 190, 225, 122, 198, 189, 5, 42, 105, 188, 55, 204, 47, 62, 49, 210, 10, 61, 82, 58, 60, 61, 31, 88, 40, 190, 5, 133, 232, 188, 135, 14, 209, 189, 228, 64, 37, 62, 55, 104, 17, 190, 118, 236, 191, 189, 2, 132, 78, 61, 213, 199, 158, 189, 233, 206, 33, 62, 231, 211, 246, 189, 60, 194, 194, 189, 214, 170, 243, 61, 122, 162, 1, 189, 225, 185, 47, 62, 249, 124, 166, 189, 213, 252, 37, 190, 254, 209, 231, 61, 77, 153, 225, 188, 161, 77, 57, 189, 206, 98, 19, 62, 9, 7, 60, 61, 45, 33, 152, 61, 185, 74, 122, 61, 129, 164, 105, 189, 25, 14, 13, 62, 125, 147, 166, 61, 4, 91, 253, 59, 98, 66, 35, 190, 74, 93, 3, 188, 131, 60, 85, 189, 44, 147, 159, 61, 222, 140, 112, 187, 208, 5, 48, 190, 153, 105, 38, 62, 168, 2, 18, 62, 189, 58, 197, 61, 43, 85, 150, 59, 151, 23, 4, 61, 43, 34, 77, 60, 194, 21, 134, 61, 22, 16, 238, 61, 240, 82, 129, 189, 163, 5, 132, 61, 126, 107, 32, 62, 101, 217, 149, 61, 140, 27, 174, 61, 218, 5, 230, 61, 218, 139, 145, 61, 105, 210, 3, 62, 156, 124, 17, 190, 60, 150, 83, 60, 95, 123, 4, 189, 109, 156, 31, 62, 232, 181, 247, 189, 73, 2, 173, 61, 89, 86, 133, 189, 130, 20, 27, 60, 15, 142, 117, 188, 173, 74, 110, 61, 44, 215, 28, 190, 238, 21, 114, 188, 88, 201, 16, 190, 19, 220, 36, 190, 56, 250, 228, 189, 9, 205, 190, 60, 197, 108, 144, 61, 10, 96, 241, 61, 55, 48, 213, 189, 197, 233, 32, 190, 231, 11, 27, 189, 190, 12, 31, 190, 158, 230, 15, 62, 252, 43, 246, 61, 239, 41, 126, 60, 14, 142, 32, 62, 175, 41, 44, 62, 63, 85, 255, 61, 117, 169, 224, 189, 101, 245, 169, 61, 24, 86, 142, 59, 174, 208, 49, 62, 52, 39, 180, 189, 161, 184, 0, 62, 19, 214, 251, 189, 81, 61, 44, 62, 195, 170, 253, 188, 75, 226, 232, 186, 140, 113, 39, 190, 161, 98, 194, 189, 53, 78, 243, 58, 233, 200, 3, 62, 65, 249, 53, 189, 155, 65, 143, 60, 81, 40, 219, 61, 55, 1, 112, 186, 145, 200, 44, 62, 29, 17, 110, 61, 4, 224, 121, 188, 191, 68, 227, 184, 153, 121, 91, 189, 194, 69, 133, 189, 177, 206, 41, 190, 67, 43, 3, 187, 194, 19, 82, 189, 24, 25, 38, 189, 216, 80, 216, 61, 1, 6, 92, 60, 174, 40, 12, 62, 15, 196, 6, 190, 77, 80, 191, 189, 73, 117, 218, 61, 158, 87, 170, 189, 252, 168, 238, 60, 149, 33, 228, 188, 44, 21, 128, 61, 49, 167, 247, 58, 57, 7, 131, 189, 114, 242, 7, 190, 214, 250, 15, 189, 220, 132, 30, 186, 110, 7, 184, 61, 176, 60, 13, 190, 69, 173, 0, 190, 25, 114, 19, 62, 105, 15, 11, 189, 196, 212, 8, 61, 131, 182, 76, 60, 226, 20, 78, 188, 236, 15, 187, 60, 197, 216, 51, 190, 11, 249, 188, 188, 228, 56, 20, 62, 167, 237, 135, 188, 173, 45, 160, 61, 184, 101, 159, 185, 203, 198, 35, 190, 134, 200, 67, 188, 32, 232, 161, 188, 187, 115, 42, 62, 252, 165, 191, 188, 45, 86, 41, 189, 138, 125, 208, 189, 10, 207, 15, 190, 28, 123, 188, 188, 254, 237, 190, 61, 166, 27, 156, 189, 60, 149, 46, 62, 152, 151, 215, 189, 18, 108, 174, 189, 251, 25, 10, 62, 27, 116, 39, 61, 61, 200, 28, 62, 84, 37, 241, 61, 151, 96, 10, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 60, 169, 189, 170, 233, 110, 189, 177, 102, 151, 189, 107, 165, 198, 61, 55, 108, 39, 62, 158, 90, 217, 61, 87, 51, 235, 189, 39, 52, 103, 61, 83, 29, 33, 190, 189, 32, 34, 190, 20, 195, 188, 61, 4, 208, 184, 189, 26, 252, 16, 190, 170, 183, 227, 189, 233, 150, 154, 188, 226, 121, 188, 189, 102, 78, 62, 61, 93, 4, 68, 61, 140, 73, 5, 61, 166, 221, 113, 61, 182, 166, 11, 62, 139, 243, 250, 189, 27, 65, 52, 190, 68, 28, 231, 61, 96, 109, 102, 189, 187, 251, 32, 61, 83, 253, 214, 188, 41, 97, 230, 189, 143, 252, 52, 190, 234, 141, 40, 190, 244, 113, 175, 61, 72, 83, 232, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 91, 178, 189, 234, 50, 155, 186, 86, 63, 208, 189, 184, 188, 175, 61, 100, 178, 78, 61, 243, 249, 41, 189, 199, 66, 208, 61, 4, 172, 200, 60, 95, 167, 45, 62, 73, 108, 28, 190, 233, 20, 247, 61, 243, 77, 109, 61, 122, 90, 30, 61, 37, 81, 131, 189, 166, 98, 226, 188, 84, 14, 223, 61, 112, 196, 48, 62, 93, 167, 28, 61, 118, 214, 5, 61, 0, 62, 213, 61, 213, 78, 221, 189, 218, 94, 250, 60, 190, 113, 51, 189, 253, 117, 18, 62, 244, 198, 134, 61, 161, 6, 15, 62, 22, 170, 200, 189, 81, 156, 185, 61, 169, 159, 232, 61, 157, 188, 27, 190, 236, 11, 143, 61, 164, 155, 246, 61, 186, 75, 46, 190, 189, 177, 6, 190, 163, 88, 167, 60, 21, 157, 8, 61, 7, 8, 49, 190, 227, 64, 4, 190, 85, 92, 5, 62, 187, 202, 51, 60, 210, 48, 248, 189, 250, 214, 8, 61, 78, 61, 68, 61, 218, 4, 47, 190, 228, 100, 165, 60, 186, 59, 169, 189, 204, 110, 128, 189, 201, 26, 63, 189, 159, 86, 223, 60, 125, 149, 120, 59, 72, 62, 227, 61, 76, 65, 230, 189, 223, 45, 20, 62, 66, 133, 132, 188, 215, 138, 172, 186, 11, 225, 24, 62, 120, 158, 72, 61, 242, 175, 249, 61, 41, 250, 0, 190, 63, 253, 39, 62, 19, 153, 16, 190, 232, 235, 215, 61, 58, 60, 38, 189, 61, 188, 212, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 131, 232, 188, 129, 152, 114, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {224, 127, 133, 63, 40, 227, 151, 191, 218, 213, 82, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {94, 216, 145, 189, 114, 38, 177, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0006/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}