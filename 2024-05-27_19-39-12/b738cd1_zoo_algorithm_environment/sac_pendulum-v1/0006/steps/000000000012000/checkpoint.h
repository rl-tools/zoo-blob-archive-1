// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {146, 90, 94, 63, 179, 23, 113, 191, 216, 194, 188, 190, 12, 173, 76, 61, 17, 143, 39, 191, 38, 69, 159, 62, 154, 83, 117, 190, 33, 224, 75, 63, 210, 152, 173, 188, 38, 234, 37, 191, 2, 130, 221, 62, 60, 120, 171, 62, 75, 185, 49, 191, 22, 232, 43, 190, 237, 213, 35, 190, 223, 63, 219, 62, 223, 54, 132, 191, 106, 48, 203, 61, 112, 253, 24, 190, 49, 127, 173, 61, 14, 89, 126, 61, 53, 28, 226, 62, 158, 101, 131, 190, 205, 176, 6, 61, 101, 166, 203, 190, 80, 239, 109, 191, 22, 55, 245, 189, 125, 112, 85, 62, 99, 35, 133, 63, 246, 101, 34, 190, 110, 233, 66, 63, 104, 18, 136, 191, 210, 3, 108, 190, 169, 230, 142, 62, 203, 245, 235, 190, 217, 71, 193, 190, 18, 19, 48, 191, 57, 122, 196, 190, 69, 156, 85, 61, 219, 10, 22, 63, 20, 34, 103, 189, 102, 113, 240, 190, 114, 104, 127, 190, 66, 108, 102, 63, 66, 219, 48, 62, 52, 160, 100, 61, 125, 201, 32, 62, 36, 218, 202, 190, 167, 230, 248, 189, 155, 144, 68, 63, 172, 36, 254, 189, 222, 250, 204, 62, 169, 23, 139, 63, 8, 17, 100, 62, 11, 97, 8, 61, 94, 236, 95, 62, 165, 159, 165, 190, 228, 5, 53, 190, 164, 251, 175, 191, 49, 133, 136, 190, 133, 128, 78, 63, 116, 129, 31, 190, 127, 230, 138, 62, 199, 192, 55, 63, 183, 57, 223, 190, 159, 247, 242, 190, 158, 185, 220, 190, 219, 64, 167, 61, 170, 62, 178, 190, 74, 155, 140, 62, 212, 122, 205, 61, 149, 242, 21, 63, 199, 7, 40, 63, 85, 246, 167, 63, 133, 141, 129, 62, 43, 181, 20, 191, 244, 60, 140, 191, 102, 229, 31, 62, 222, 13, 47, 191, 180, 243, 197, 191, 242, 181, 181, 190, 42, 220, 244, 61, 139, 212, 45, 62, 224, 196, 195, 190, 102, 17, 193, 190, 147, 78, 156, 63, 122, 84, 25, 63, 227, 74, 68, 191, 171, 216, 240, 189, 240, 22, 31, 63, 105, 201, 17, 63, 241, 89, 234, 189, 143, 21, 11, 63, 68, 135, 86, 63, 223, 129, 71, 63, 96, 166, 153, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 217, 17, 191, 245, 9, 72, 62, 202, 13, 151, 62, 84, 212, 149, 61, 3, 249, 198, 62, 214, 3, 241, 62, 76, 158, 7, 63, 77, 14, 239, 62, 17, 92, 1, 63, 227, 66, 2, 190, 176, 1, 24, 62, 179, 32, 150, 189, 253, 63, 36, 63, 27, 111, 202, 188, 172, 158, 1, 190, 180, 1, 248, 190, 58, 116, 222, 62, 113, 203, 96, 188, 132, 160, 9, 63, 103, 6, 108, 190, 83, 254, 77, 62, 194, 22, 78, 191, 13, 213, 20, 63, 82, 240, 78, 190, 170, 19, 151, 62, 132, 124, 208, 62, 122, 35, 210, 190, 232, 216, 46, 62, 102, 193, 243, 188, 100, 155, 188, 189, 67, 233, 174, 60, 85, 146, 20, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 64, 20, 191, 37, 250, 150, 190, 26, 69, 134, 61, 34, 220, 168, 190, 17, 101, 186, 61, 164, 55, 171, 189, 192, 6, 28, 62, 143, 67, 155, 61, 241, 26, 88, 190, 150, 16, 132, 190, 221, 56, 192, 61, 25, 203, 117, 190, 2, 51, 41, 62, 112, 71, 131, 60, 105, 209, 91, 190, 136, 72, 35, 59, 112, 239, 40, 62, 145, 106, 203, 62, 110, 36, 65, 62, 50, 211, 99, 62, 192, 59, 175, 60, 77, 109, 21, 190, 169, 119, 114, 61, 9, 69, 8, 62, 40, 7, 38, 62, 125, 0, 178, 60, 208, 83, 213, 61, 68, 192, 7, 62, 231, 109, 41, 190, 102, 159, 165, 190, 71, 108, 160, 61, 176, 153, 193, 62, 205, 213, 139, 189, 55, 193, 189, 60, 6, 167, 135, 189, 99, 12, 246, 189, 156, 234, 25, 62, 39, 132, 176, 62, 157, 94, 41, 62, 41, 175, 153, 62, 105, 197, 111, 62, 230, 56, 55, 191, 25, 41, 83, 62, 49, 85, 86, 190, 31, 205, 126, 61, 251, 224, 195, 61, 54, 4, 91, 61, 51, 250, 211, 61, 60, 224, 168, 188, 176, 130, 190, 190, 49, 208, 140, 61, 121, 54, 132, 190, 181, 142, 41, 62, 112, 10, 144, 185, 222, 78, 91, 61, 229, 141, 118, 188, 239, 103, 201, 61, 205, 177, 11, 59, 13, 131, 146, 61, 197, 187, 16, 190, 85, 128, 104, 190, 36, 145, 229, 187, 211, 51, 30, 189, 72, 39, 95, 190, 163, 80, 4, 189, 63, 14, 26, 62, 153, 61, 62, 191, 197, 114, 160, 61, 7, 183, 252, 60, 210, 2, 37, 63, 221, 60, 239, 61, 94, 35, 88, 62, 246, 169, 198, 62, 253, 123, 131, 190, 39, 244, 188, 189, 181, 137, 226, 61, 66, 83, 130, 62, 33, 170, 240, 188, 239, 28, 65, 190, 184, 212, 46, 191, 59, 246, 40, 191, 130, 134, 25, 191, 209, 51, 116, 190, 121, 20, 228, 61, 206, 119, 225, 189, 17, 39, 112, 188, 213, 173, 196, 61, 28, 42, 34, 191, 184, 112, 24, 191, 186, 251, 140, 62, 51, 246, 111, 189, 177, 84, 137, 190, 89, 42, 215, 190, 40, 66, 249, 190, 99, 174, 162, 190, 78, 147, 74, 190, 98, 77, 182, 61, 77, 99, 135, 61, 249, 165, 6, 190, 73, 121, 102, 60, 209, 79, 159, 189, 48, 251, 184, 62, 222, 230, 48, 189, 97, 240, 138, 62, 75, 52, 67, 62, 130, 69, 232, 190, 135, 157, 95, 62, 97, 175, 15, 61, 248, 133, 81, 188, 47, 251, 115, 188, 203, 95, 8, 190, 94, 64, 242, 61, 117, 118, 121, 61, 71, 77, 231, 190, 20, 253, 88, 62, 171, 247, 145, 191, 51, 154, 109, 60, 83, 69, 164, 189, 200, 65, 71, 190, 119, 154, 135, 190, 182, 96, 106, 190, 159, 177, 58, 190, 194, 250, 82, 191, 52, 51, 66, 62, 54, 201, 189, 61, 213, 59, 228, 61, 40, 8, 87, 189, 137, 229, 28, 191, 18, 36, 161, 189, 23, 173, 226, 60, 215, 2, 222, 62, 39, 106, 55, 189, 204, 248, 10, 190, 218, 26, 12, 62, 106, 14, 65, 62, 100, 246, 37, 62, 164, 73, 105, 61, 201, 229, 81, 61, 181, 155, 56, 62, 174, 201, 129, 60, 204, 198, 193, 61, 83, 154, 91, 62, 186, 239, 144, 62, 236, 125, 133, 189, 143, 131, 147, 62, 182, 52, 151, 62, 237, 37, 129, 62, 33, 0, 120, 190, 191, 56, 147, 189, 110, 155, 52, 189, 251, 250, 11, 62, 202, 33, 69, 60, 170, 194, 161, 62, 130, 194, 219, 61, 192, 83, 54, 60, 128, 124, 185, 189, 204, 3, 78, 189, 188, 247, 80, 61, 51, 246, 15, 190, 203, 70, 181, 60, 230, 129, 3, 191, 139, 170, 25, 62, 75, 198, 8, 62, 87, 49, 110, 188, 28, 118, 2, 62, 88, 15, 93, 62, 214, 205, 147, 62, 112, 131, 179, 61, 149, 131, 10, 62, 197, 7, 175, 187, 209, 254, 112, 189, 175, 51, 105, 190, 231, 253, 101, 62, 30, 77, 2, 190, 122, 123, 114, 190, 154, 190, 23, 189, 136, 67, 246, 60, 251, 234, 19, 61, 153, 155, 73, 62, 106, 94, 24, 190, 160, 99, 150, 61, 78, 51, 132, 61, 9, 47, 53, 190, 117, 60, 236, 189, 212, 4, 77, 61, 163, 143, 197, 61, 2, 130, 191, 60, 196, 17, 28, 62, 48, 211, 119, 190, 235, 182, 215, 189, 203, 5, 130, 62, 13, 206, 23, 61, 13, 220, 76, 191, 208, 82, 82, 61, 214, 74, 135, 191, 219, 72, 175, 189, 32, 9, 22, 188, 1, 74, 86, 62, 244, 131, 144, 189, 216, 231, 206, 61, 123, 19, 141, 62, 171, 95, 34, 62, 44, 169, 137, 62, 90, 145, 43, 191, 108, 203, 59, 62, 197, 110, 40, 191, 187, 99, 115, 190, 202, 142, 173, 190, 225, 124, 67, 191, 2, 242, 22, 191, 196, 98, 93, 190, 227, 78, 68, 188, 121, 30, 107, 61, 190, 49, 37, 191, 226, 2, 84, 190, 55, 227, 37, 188, 60, 218, 5, 189, 56, 51, 128, 62, 76, 121, 252, 61, 216, 116, 6, 191, 163, 36, 2, 191, 180, 105, 121, 189, 23, 125, 34, 189, 64, 247, 144, 190, 203, 51, 28, 191, 202, 40, 202, 190, 173, 154, 17, 62, 78, 46, 53, 190, 203, 119, 134, 62, 178, 125, 144, 190, 48, 137, 129, 62, 22, 174, 220, 61, 166, 59, 77, 62, 219, 180, 35, 62, 159, 203, 176, 189, 50, 14, 103, 190, 172, 104, 163, 62, 240, 24, 184, 190, 129, 92, 154, 190, 182, 144, 134, 189, 119, 70, 69, 62, 60, 151, 127, 62, 233, 72, 250, 189, 201, 10, 57, 62, 199, 242, 146, 62, 248, 130, 206, 189, 98, 145, 76, 62, 35, 63, 196, 62, 229, 66, 74, 62, 146, 231, 62, 190, 85, 10, 100, 62, 150, 124, 199, 60, 48, 150, 214, 190, 59, 188, 117, 191, 187, 131, 51, 62, 90, 186, 189, 62, 149, 197, 70, 190, 101, 219, 25, 190, 148, 60, 13, 61, 70, 95, 97, 188, 84, 2, 195, 61, 133, 122, 91, 61, 136, 206, 39, 188, 142, 176, 40, 61, 140, 239, 135, 189, 126, 142, 242, 60, 19, 70, 4, 62, 154, 122, 131, 61, 13, 216, 16, 62, 111, 253, 17, 61, 101, 191, 167, 60, 225, 173, 160, 61, 178, 129, 251, 189, 27, 51, 30, 190, 83, 14, 62, 61, 99, 158, 204, 60, 206, 7, 21, 189, 74, 135, 125, 188, 113, 194, 149, 189, 198, 148, 130, 187, 94, 222, 16, 190, 233, 234, 53, 190, 143, 207, 36, 190, 57, 58, 173, 189, 23, 28, 104, 189, 111, 32, 217, 189, 96, 25, 42, 61, 34, 156, 7, 190, 62, 26, 49, 191, 90, 111, 12, 62, 115, 238, 66, 62, 143, 88, 149, 190, 105, 191, 74, 62, 142, 45, 66, 189, 51, 72, 131, 61, 240, 133, 104, 62, 173, 212, 76, 62, 119, 168, 7, 62, 80, 132, 53, 189, 87, 236, 15, 190, 176, 208, 51, 62, 9, 165, 244, 189, 144, 236, 85, 191, 165, 118, 137, 190, 207, 243, 37, 62, 219, 157, 137, 62, 205, 154, 83, 61, 59, 17, 229, 62, 127, 213, 104, 62, 114, 81, 162, 190, 127, 103, 218, 61, 210, 148, 132, 60, 173, 98, 213, 61, 224, 38, 173, 62, 120, 243, 156, 62, 49, 75, 26, 62, 114, 133, 114, 190, 204, 145, 243, 188, 189, 219, 96, 62, 70, 92, 9, 63, 41, 101, 213, 62, 41, 58, 74, 61, 18, 76, 154, 188, 152, 183, 81, 62, 89, 209, 55, 190, 154, 62, 46, 62, 206, 219, 220, 189, 57, 30, 254, 61, 47, 21, 20, 62, 207, 186, 142, 190, 8, 199, 93, 62, 154, 250, 236, 61, 237, 138, 181, 61, 51, 101, 248, 189, 243, 38, 195, 62, 187, 104, 29, 190, 179, 152, 193, 189, 80, 117, 41, 190, 163, 28, 98, 60, 127, 32, 89, 191, 155, 139, 133, 61, 142, 240, 1, 59, 80, 1, 158, 61, 139, 240, 74, 190, 177, 116, 142, 189, 183, 6, 193, 190, 209, 77, 64, 191, 188, 15, 34, 189, 235, 197, 129, 62, 101, 23, 132, 60, 119, 43, 8, 190, 220, 238, 213, 190, 198, 222, 139, 61, 231, 48, 193, 61, 84, 180, 146, 189, 55, 181, 177, 189, 32, 24, 37, 61, 213, 168, 99, 60, 112, 67, 28, 62, 74, 149, 158, 60, 205, 179, 139, 189, 57, 49, 17, 61, 145, 4, 169, 60, 195, 3, 61, 61, 216, 88, 189, 60, 179, 226, 251, 189, 253, 230, 210, 189, 73, 66, 10, 190, 89, 178, 113, 189, 169, 252, 65, 61, 190, 47, 5, 62, 239, 225, 73, 61, 168, 219, 44, 189, 3, 40, 96, 189, 197, 77, 27, 189, 6, 139, 7, 190, 32, 24, 250, 189, 197, 92, 36, 190, 25, 152, 10, 188, 182, 86, 53, 189, 53, 235, 19, 190, 144, 96, 66, 61, 157, 130, 15, 189, 199, 56, 118, 188, 95, 212, 204, 189, 59, 192, 192, 61, 10, 39, 81, 191, 168, 213, 5, 190, 160, 170, 141, 190, 45, 108, 70, 62, 128, 147, 10, 190, 43, 221, 160, 61, 211, 197, 98, 62, 134, 241, 99, 191, 37, 250, 133, 62, 45, 96, 190, 190, 85, 1, 152, 62, 96, 245, 47, 190, 41, 84, 28, 62, 21, 187, 63, 190, 217, 116, 253, 190, 90, 249, 241, 190, 217, 168, 123, 190, 119, 130, 169, 189, 24, 96, 149, 61, 120, 209, 137, 189, 153, 118, 193, 190, 25, 252, 156, 190, 41, 38, 56, 190, 62, 97, 199, 62, 110, 50, 111, 60, 2, 251, 159, 190, 157, 212, 125, 190, 70, 35, 140, 61, 156, 97, 79, 61, 3, 236, 77, 191, 3, 140, 124, 190, 231, 92, 6, 191, 87, 87, 3, 190, 92, 236, 161, 61, 115, 228, 215, 61, 89, 20, 72, 191, 216, 226, 61, 62, 165, 7, 160, 189, 247, 18, 115, 62, 219, 9, 21, 190, 219, 77, 196, 189, 243, 103, 127, 190, 0, 194, 233, 62, 231, 52, 11, 60, 3, 186, 190, 61, 85, 103, 213, 189, 35, 162, 83, 189, 90, 189, 52, 62, 193, 128, 236, 61, 87, 236, 222, 61, 208, 228, 100, 60, 82, 79, 186, 190, 109, 41, 95, 62, 16, 130, 173, 190, 145, 78, 243, 62, 108, 0, 50, 190, 19, 160, 69, 62, 32, 13, 46, 62, 63, 41, 217, 190, 7, 181, 23, 191, 108, 236, 57, 190, 152, 195, 231, 187, 207, 4, 82, 191, 255, 79, 252, 190, 211, 130, 141, 61, 55, 108, 22, 62, 255, 207, 196, 62, 27, 53, 201, 190, 16, 82, 189, 61, 3, 230, 165, 61, 6, 201, 190, 61, 147, 255, 81, 60, 31, 67, 143, 190, 28, 247, 134, 190, 213, 16, 143, 62, 63, 203, 19, 190, 83, 229, 219, 189, 178, 108, 50, 190, 59, 221, 218, 61, 0, 42, 122, 62, 233, 120, 72, 62, 13, 70, 159, 62, 76, 159, 101, 62, 28, 179, 176, 190, 192, 9, 150, 62, 40, 100, 42, 62, 125, 165, 138, 62, 116, 31, 11, 190, 194, 9, 57, 62, 197, 15, 74, 189, 172, 195, 181, 190, 0, 227, 47, 191, 218, 41, 3, 62, 99, 2, 37, 62, 210, 45, 156, 60, 251, 211, 83, 61, 106, 185, 176, 59, 82, 64, 152, 190, 170, 137, 166, 61, 197, 220, 209, 60, 155, 168, 167, 61, 137, 11, 247, 61, 31, 111, 135, 190, 58, 248, 220, 62, 207, 181, 35, 62, 101, 143, 198, 61, 102, 57, 137, 189, 4, 156, 111, 189, 162, 4, 89, 191, 28, 197, 127, 189, 7, 64, 105, 62, 144, 242, 15, 190, 93, 92, 49, 60, 142, 73, 207, 189, 61, 198, 108, 62, 151, 226, 140, 61, 188, 140, 31, 62, 7, 245, 135, 189, 183, 54, 215, 189, 227, 1, 107, 62, 160, 156, 180, 61, 63, 80, 26, 188, 4, 140, 86, 191, 103, 216, 169, 62, 127, 213, 116, 62, 200, 205, 150, 189, 144, 180, 137, 189, 11, 69, 91, 62, 127, 247, 154, 62, 197, 183, 16, 62, 73, 170, 132, 60, 173, 72, 173, 61, 233, 69, 128, 62, 13, 39, 25, 61, 91, 112, 231, 61, 145, 230, 248, 190, 86, 202, 194, 62, 93, 68, 196, 189, 226, 68, 128, 62, 159, 4, 174, 187, 246, 168, 63, 63, 24, 58, 204, 190, 6, 5, 123, 189, 231, 202, 130, 190, 254, 170, 217, 190, 99, 163, 118, 191, 139, 109, 167, 188, 144, 215, 138, 61, 126, 50, 244, 189, 229, 19, 47, 190, 209, 202, 129, 189, 250, 148, 231, 190, 205, 229, 174, 191, 23, 50, 42, 191, 76, 109, 111, 62, 200, 160, 24, 189, 200, 204, 5, 190, 251, 38, 32, 191, 28, 151, 106, 191, 175, 23, 197, 190, 223, 102, 77, 62, 98, 168, 247, 190, 174, 234, 2, 63, 218, 51, 140, 61, 229, 198, 178, 62, 66, 105, 0, 189, 130, 71, 164, 62, 30, 246, 43, 62, 190, 178, 117, 191, 84, 63, 58, 190, 57, 102, 138, 62, 212, 150, 244, 190, 223, 185, 239, 60, 156, 86, 180, 190, 154, 49, 161, 60, 8, 62, 157, 62, 190, 92, 122, 59, 254, 70, 69, 62, 171, 79, 125, 189, 157, 65, 255, 190, 220, 90, 217, 61, 105, 16, 231, 60, 4, 41, 159, 62, 114, 34, 146, 62, 31, 120, 238, 62, 204, 239, 91, 62, 235, 47, 43, 190, 236, 251, 253, 190, 170, 196, 195, 61, 57, 150, 171, 60, 176, 242, 232, 62, 41, 170, 37, 62, 15, 227, 68, 62, 122, 57, 174, 62, 98, 123, 17, 189, 229, 7, 220, 61, 122, 227, 25, 62, 70, 205, 192, 61, 143, 233, 12, 189, 19, 95, 217, 188, 7, 174, 211, 62, 223, 153, 91, 62, 194, 216, 24, 190, 145, 145, 170, 61, 203, 162, 7, 63, 203, 64, 158, 62, 219, 33, 160, 189, 45, 251, 173, 190, 51, 120, 196, 189, 144, 169, 236, 190, 183, 216, 219, 61, 45, 2, 101, 62, 155, 92, 87, 187, 155, 206, 165, 190, 165, 47, 107, 190, 115, 241, 210, 190, 135, 105, 184, 190, 28, 176, 113, 190, 131, 56, 138, 62, 112, 70, 29, 62, 34, 252, 114, 190, 234, 42, 20, 190, 214, 68, 138, 60, 182, 138, 226, 61, 131, 3, 22, 62, 175, 59, 10, 62, 207, 242, 32, 190, 143, 237, 150, 61, 127, 51, 84, 189, 97, 34, 144, 61, 15, 47, 29, 190, 230, 191, 222, 188, 113, 65, 24, 190, 42, 100, 142, 189, 169, 150, 91, 189, 32, 187, 133, 189, 197, 196, 38, 189, 199, 146, 48, 190, 29, 182, 17, 189, 195, 80, 252, 188, 54, 46, 218, 61, 15, 5, 232, 61, 187, 198, 49, 190, 13, 108, 165, 188, 167, 217, 207, 60, 152, 45, 5, 61, 247, 211, 9, 190, 188, 163, 10, 190, 109, 239, 10, 189, 136, 208, 36, 190, 156, 43, 195, 189, 132, 221, 32, 61, 184, 153, 4, 190, 202, 203, 39, 62, 246, 15, 171, 60, 54, 108, 247, 189, 253, 208, 228, 188, 110, 122, 145, 61, 12, 177, 156, 189, 46, 20, 184, 188, 107, 164, 138, 189, 123, 211, 30, 189, 158, 109, 220, 189, 132, 115, 50, 190, 9, 222, 202, 189, 14, 241, 49, 61, 23, 49, 97, 61, 37, 171, 41, 190, 234, 111, 31, 62, 208, 183, 21, 190, 44, 232, 13, 190, 41, 87, 162, 61, 48, 179, 132, 61, 87, 28, 130, 61, 97, 25, 229, 60, 188, 100, 31, 62, 61, 165, 31, 190, 75, 90, 185, 189, 78, 54, 242, 189, 179, 49, 65, 189, 36, 195, 122, 189, 68, 220, 215, 189, 181, 70, 41, 190, 65, 111, 250, 189, 160, 162, 105, 59, 47, 114, 42, 62, 23, 100, 182, 190, 151, 210, 104, 190, 78, 252, 184, 189, 141, 164, 74, 62, 208, 128, 61, 62, 240, 233, 179, 190, 182, 38, 150, 62, 193, 208, 162, 59, 33, 251, 50, 190, 42, 51, 90, 60, 184, 26, 97, 190, 93, 207, 119, 190, 229, 198, 137, 61, 71, 66, 186, 189, 26, 125, 74, 190, 139, 250, 28, 189, 162, 37, 37, 62, 83, 214, 126, 188, 246, 53, 78, 62, 93, 1, 154, 190, 206, 20, 196, 190, 117, 197, 153, 190, 140, 242, 105, 62, 141, 52, 218, 189, 194, 153, 146, 60, 188, 46, 91, 61, 152, 96, 178, 190, 24, 217, 0, 62, 188, 191, 227, 190, 222, 195, 111, 191, 172, 144, 172, 190, 234, 230, 228, 190, 205, 223, 168, 59, 27, 29, 94, 187, 127, 123, 35, 189, 231, 179, 249, 189, 231, 80, 94, 186, 221, 219, 227, 189, 81, 57, 45, 60, 198, 129, 16, 190, 7, 143, 44, 190, 48, 152, 195, 61, 189, 78, 180, 60, 139, 136, 222, 61, 226, 85, 1, 62, 187, 141, 116, 61, 139, 80, 175, 61, 127, 18, 242, 61, 130, 71, 36, 189, 56, 31, 19, 62, 77, 63, 54, 189, 46, 181, 54, 189, 66, 63, 42, 190, 121, 96, 23, 190, 131, 234, 16, 190, 112, 27, 42, 190, 124, 58, 224, 60, 250, 48, 127, 61, 5, 141, 216, 189, 47, 188, 50, 190, 139, 253, 37, 190, 79, 146, 138, 61, 252, 92, 41, 62, 82, 234, 11, 62, 161, 159, 14, 189, 199, 213, 12, 62, 208, 48, 3, 191, 196, 234, 236, 60, 59, 106, 216, 189, 208, 244, 57, 60, 104, 66, 18, 61, 115, 162, 45, 188, 3, 234, 141, 62, 153, 50, 151, 61, 74, 225, 117, 62, 43, 104, 167, 190, 188, 67, 130, 62, 239, 150, 136, 190, 235, 126, 7, 63, 129, 114, 215, 190, 69, 23, 7, 191, 92, 254, 37, 191, 38, 235, 207, 189, 197, 165, 213, 190, 213, 25, 133, 190, 126, 158, 71, 191, 70, 119, 146, 190, 199, 144, 133, 189, 108, 189, 139, 190, 139, 117, 159, 62, 170, 47, 0, 190, 25, 101, 173, 190, 119, 73, 178, 190, 137, 65, 61, 61, 0, 7, 169, 61, 207, 101, 126, 191, 214, 26, 200, 60, 33, 187, 128, 62, 249, 11, 163, 190, 155, 196, 182, 190, 219, 104, 174, 61, 9, 240, 173, 61, 117, 37, 109, 60, 5, 142, 115, 62, 42, 191, 79, 189, 191, 141, 216, 62, 19, 208, 9, 62, 231, 151, 236, 61, 63, 30, 71, 190, 135, 254, 146, 62, 57, 190, 90, 190, 192, 109, 157, 61, 212, 63, 218, 189, 7, 76, 29, 191, 229, 43, 237, 61, 151, 70, 6, 190, 9, 137, 183, 62, 73, 72, 44, 62, 107, 144, 135, 62, 46, 125, 146, 61, 115, 206, 199, 190, 163, 41, 128, 62, 206, 63, 7, 61, 35, 172, 48, 62, 206, 189, 0, 191, 1, 203, 219, 188, 152, 200, 22, 61, 122, 210, 23, 191, 253, 246, 206, 62, 137, 40, 52, 61, 214, 82, 66, 190, 95, 241, 30, 62, 174, 214, 85, 190, 122, 81, 105, 62, 38, 146, 20, 62, 173, 228, 99, 62, 23, 158, 133, 61, 146, 191, 64, 190, 140, 64, 254, 61, 196, 163, 5, 61, 4, 177, 242, 61, 92, 6, 227, 189, 192, 54, 236, 59, 30, 165, 72, 190, 174, 187, 199, 60, 252, 147, 92, 190, 109, 23, 187, 60, 164, 67, 107, 191, 230, 169, 212, 61, 30, 20, 166, 60, 165, 236, 100, 188, 111, 225, 36, 191, 141, 41, 84, 190, 195, 119, 240, 61, 215, 205, 48, 191, 0, 59, 26, 190, 40, 50, 195, 62, 234, 242, 28, 190, 143, 191, 1, 191, 9, 239, 161, 190, 163, 216, 165, 190, 44, 4, 48, 62, 170, 28, 122, 62, 111, 244, 34, 62, 32, 204, 144, 61, 100, 143, 123, 62, 56, 198, 28, 61, 7, 253, 73, 62, 127, 15, 155, 61, 245, 188, 152, 62, 126, 223, 180, 189, 172, 215, 174, 189, 2, 127, 93, 62, 178, 102, 10, 61, 171, 111, 40, 191, 133, 111, 143, 60, 19, 251, 26, 62, 172, 239, 107, 190, 213, 122, 35, 59, 166, 75, 164, 190, 46, 253, 104, 62, 188, 80, 163, 190, 123, 214, 146, 189, 230, 55, 20, 62, 56, 240, 133, 61, 41, 139, 205, 62, 64, 49, 191, 190, 78, 26, 185, 61, 161, 142, 121, 189, 69, 144, 255, 189, 103, 243, 35, 62, 159, 228, 0, 190, 170, 136, 158, 191, 168, 235, 45, 189, 162, 69, 50, 61, 121, 6, 168, 61, 242, 188, 191, 60, 100, 246, 4, 62, 55, 73, 143, 189, 159, 39, 170, 62, 29, 58, 24, 191, 192, 65, 23, 63, 91, 253, 194, 190, 77, 23, 219, 190, 123, 82, 81, 190, 90, 94, 16, 62, 128, 201, 56, 191, 121, 75, 150, 62, 161, 218, 195, 188, 187, 80, 94, 62, 52, 109, 24, 61, 201, 152, 76, 62, 16, 51, 141, 61, 182, 241, 252, 190, 193, 239, 213, 61, 229, 79, 114, 61, 45, 169, 224, 61, 81, 130, 113, 62, 219, 5, 208, 61, 94, 206, 214, 61, 97, 249, 147, 189, 130, 111, 234, 189, 161, 109, 116, 62, 148, 4, 171, 62, 14, 57, 185, 189, 60, 189, 167, 190, 176, 173, 246, 189, 214, 251, 10, 191, 108, 98, 149, 60, 213, 221, 226, 60, 37, 156, 29, 190, 74, 67, 75, 62, 227, 191, 129, 61, 6, 216, 93, 191, 185, 69, 133, 61, 98, 233, 236, 189, 232, 97, 131, 189, 129, 144, 71, 61, 17, 29, 41, 61, 188, 137, 65, 190, 190, 198, 2, 190, 65, 84, 209, 61, 109, 193, 50, 60, 88, 39, 31, 189, 237, 225, 159, 62, 244, 95, 204, 59, 23, 97, 66, 61, 135, 109, 114, 190, 64, 153, 10, 62, 205, 169, 171, 189, 65, 160, 216, 61, 147, 170, 111, 190, 45, 114, 27, 191, 81, 25, 140, 190, 226, 185, 4, 62, 125, 230, 207, 188, 203, 225, 217, 190, 181, 168, 211, 190, 42, 36, 114, 60, 57, 184, 166, 190, 124, 183, 157, 188, 21, 92, 179, 190, 250, 238, 253, 61, 242, 60, 177, 61, 116, 50, 118, 62, 53, 219, 189, 189, 166, 42, 165, 190, 232, 126, 5, 190, 206, 99, 183, 61, 54, 82, 149, 189, 117, 167, 97, 188, 35, 168, 5, 190, 192, 163, 108, 62, 112, 16, 229, 62, 216, 105, 20, 62, 65, 70, 198, 61, 118, 149, 20, 62, 26, 50, 14, 190, 245, 13, 71, 62, 232, 188, 243, 189, 43, 148, 193, 62, 135, 147, 212, 188, 10, 205, 209, 62, 204, 249, 116, 188, 245, 213, 116, 190, 77, 181, 11, 191, 255, 196, 148, 189, 85, 107, 13, 63, 112, 49, 232, 62, 128, 134, 59, 189, 44, 34, 207, 61, 205, 117, 103, 62, 129, 10, 89, 190, 64, 90, 174, 62, 143, 183, 53, 62, 218, 253, 20, 62, 120, 45, 139, 62, 193, 89, 52, 190, 201, 50, 162, 62, 172, 187, 82, 189, 193, 240, 52, 62, 189, 20, 156, 61, 26, 4, 4, 63, 71, 16, 143, 62, 78, 80, 0, 62, 51, 28, 88, 190, 60, 22, 85, 190, 235, 44, 174, 191, 2, 8, 112, 61, 84, 30, 62, 62, 98, 149, 174, 189, 138, 72, 74, 190, 17, 159, 185, 189, 173, 152, 121, 190, 171, 58, 189, 191, 33, 102, 193, 190, 190, 30, 160, 61, 208, 190, 123, 189, 51, 74, 22, 189, 91, 75, 116, 191, 32, 140, 56, 62, 145, 156, 1, 62, 31, 148, 134, 61, 69, 32, 68, 61, 167, 53, 14, 190, 176, 127, 41, 62, 103, 125, 5, 62, 188, 188, 12, 61, 249, 157, 127, 62, 119, 205, 16, 190, 94, 220, 199, 62, 197, 215, 195, 61, 64, 253, 186, 61, 54, 42, 74, 61, 115, 196, 138, 62, 9, 9, 26, 62, 69, 85, 129, 62, 59, 127, 164, 190, 222, 67, 77, 189, 140, 226, 170, 191, 3, 158, 11, 190, 179, 37, 75, 61, 248, 30, 58, 61, 58, 79, 85, 190, 226, 218, 98, 61, 87, 7, 128, 190, 13, 215, 157, 191, 98, 57, 163, 187, 63, 74, 251, 60, 104, 180, 153, 61, 52, 46, 62, 61, 103, 209, 4, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 86, 136, 188, 249, 53, 183, 61, 241, 148, 171, 61, 67, 218, 113, 62, 16, 237, 205, 62, 81, 236, 155, 62, 19, 250, 68, 188, 67, 70, 65, 62, 0, 234, 63, 190, 178, 199, 155, 189, 54, 46, 211, 61, 10, 208, 192, 189, 36, 122, 52, 190, 129, 210, 83, 60, 157, 221, 70, 62, 197, 148, 141, 189, 127, 232, 88, 62, 165, 171, 94, 62, 103, 142, 140, 188, 182, 91, 78, 61, 182, 166, 11, 62, 114, 131, 184, 187, 27, 65, 52, 190, 69, 243, 20, 62, 246, 255, 245, 188, 86, 96, 235, 60, 106, 133, 184, 61, 176, 115, 15, 190, 59, 9, 98, 190, 66, 66, 176, 189, 116, 80, 138, 62, 216, 216, 137, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 108, 80, 190, 132, 21, 219, 61, 11, 15, 81, 191, 146, 139, 241, 62, 52, 38, 100, 61, 75, 221, 242, 189, 234, 12, 91, 63, 169, 37, 237, 190, 25, 180, 30, 62, 109, 71, 19, 191, 42, 98, 140, 62, 115, 76, 109, 61, 212, 38, 9, 63, 191, 171, 255, 190, 77, 235, 57, 191, 241, 145, 188, 61, 28, 111, 93, 63, 107, 59, 144, 63, 85, 127, 170, 62, 38, 187, 197, 61, 213, 78, 221, 189, 83, 37, 14, 191, 190, 113, 51, 189, 231, 136, 145, 63, 56, 8, 207, 62, 33, 190, 2, 63, 118, 60, 48, 190, 213, 171, 8, 191, 224, 27, 217, 61, 231, 174, 38, 191, 80, 136, 50, 63, 226, 103, 224, 62, 74, 131, 190, 190, 30, 86, 157, 190, 111, 73, 126, 62, 227, 233, 243, 60, 161, 156, 158, 190, 108, 148, 166, 190, 51, 19, 62, 189, 196, 187, 47, 189, 184, 247, 241, 189, 234, 47, 43, 61, 161, 115, 143, 62, 45, 4, 47, 190, 7, 182, 79, 62, 230, 46, 0, 62, 125, 165, 207, 61, 46, 151, 33, 190, 31, 77, 185, 61, 13, 52, 126, 62, 170, 50, 143, 62, 232, 232, 230, 189, 223, 45, 20, 62, 79, 121, 131, 61, 215, 138, 172, 186, 60, 70, 253, 62, 123, 108, 158, 59, 32, 145, 246, 62, 7, 114, 133, 190, 212, 158, 13, 63, 83, 253, 58, 190, 191, 168, 48, 61, 21, 216, 6, 62, 139, 159, 133, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 81, 188, 188, 134, 21, 131, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {146, 154, 49, 63, 132, 199, 94, 191, 232, 146, 189, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {178, 86, 52, 64, 182, 85, 128, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0006/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}