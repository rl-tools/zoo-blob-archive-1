// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 189, 61, 63, 74, 233, 103, 191, 236, 137, 215, 190, 161, 48, 237, 60, 11, 61, 16, 191, 48, 69, 195, 62, 103, 75, 32, 62, 49, 157, 60, 63, 144, 83, 93, 188, 232, 178, 236, 190, 76, 225, 200, 189, 217, 98, 190, 62, 41, 227, 16, 191, 131, 230, 78, 62, 99, 137, 5, 190, 227, 14, 209, 62, 43, 240, 28, 191, 42, 164, 88, 62, 237, 71, 64, 62, 170, 107, 56, 62, 12, 79, 34, 60, 232, 67, 55, 63, 44, 170, 162, 190, 71, 159, 197, 189, 247, 47, 131, 190, 201, 182, 21, 191, 82, 104, 95, 188, 54, 125, 107, 61, 28, 154, 75, 63, 253, 6, 18, 190, 213, 48, 60, 63, 227, 125, 95, 191, 55, 215, 48, 190, 21, 34, 109, 62, 66, 144, 114, 190, 254, 229, 174, 190, 92, 109, 243, 190, 24, 178, 154, 190, 57, 170, 72, 59, 240, 48, 13, 63, 5, 156, 88, 190, 56, 79, 201, 190, 228, 142, 219, 190, 236, 182, 34, 62, 11, 3, 254, 188, 42, 227, 202, 61, 223, 8, 182, 61, 195, 96, 170, 190, 49, 212, 172, 187, 254, 140, 45, 63, 123, 190, 220, 188, 183, 151, 202, 62, 53, 127, 54, 63, 162, 10, 85, 62, 225, 99, 197, 61, 13, 235, 193, 62, 43, 146, 203, 190, 230, 62, 72, 190, 221, 110, 5, 191, 73, 63, 138, 190, 85, 29, 84, 63, 192, 244, 125, 190, 46, 210, 198, 62, 120, 0, 33, 62, 122, 228, 40, 191, 1, 101, 218, 190, 221, 244, 170, 190, 38, 98, 98, 62, 207, 80, 169, 190, 149, 58, 164, 62, 79, 208, 190, 190, 39, 7, 24, 63, 105, 200, 50, 63, 168, 60, 84, 63, 10, 25, 143, 62, 2, 97, 207, 190, 197, 42, 90, 191, 37, 159, 253, 189, 13, 152, 65, 191, 28, 57, 47, 62, 204, 113, 28, 191, 92, 206, 193, 61, 19, 145, 24, 63, 251, 138, 218, 190, 96, 236, 253, 190, 5, 207, 196, 62, 136, 216, 31, 63, 121, 153, 4, 191, 242, 2, 8, 191, 98, 92, 74, 63, 231, 208, 29, 63, 89, 127, 187, 190, 233, 115, 25, 63, 38, 251, 63, 63, 38, 105, 44, 63, 9, 240, 162, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 115, 248, 190, 38, 171, 97, 62, 161, 249, 124, 62, 3, 125, 154, 62, 88, 62, 174, 62, 56, 80, 4, 63, 59, 81, 33, 63, 184, 234, 234, 62, 221, 164, 20, 63, 64, 33, 33, 190, 38, 117, 46, 62, 236, 92, 152, 189, 130, 241, 34, 63, 208, 192, 70, 61, 122, 230, 18, 190, 172, 253, 87, 190, 230, 15, 3, 63, 82, 152, 28, 188, 133, 188, 11, 63, 41, 83, 151, 61, 229, 179, 161, 62, 196, 159, 58, 191, 81, 176, 40, 63, 219, 234, 65, 190, 191, 90, 165, 62, 16, 218, 75, 62, 73, 78, 187, 190, 92, 12, 128, 62, 7, 186, 96, 62, 150, 49, 47, 190, 81, 92, 0, 61, 198, 156, 230, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 147, 204, 190, 122, 58, 148, 190, 71, 241, 171, 61, 189, 239, 151, 190, 52, 80, 238, 61, 103, 114, 97, 189, 254, 93, 16, 62, 90, 188, 176, 61, 58, 197, 142, 190, 247, 170, 23, 190, 2, 106, 178, 61, 202, 42, 35, 190, 72, 205, 22, 60, 198, 254, 247, 61, 123, 72, 126, 190, 139, 221, 158, 61, 179, 158, 68, 62, 92, 232, 139, 62, 195, 7, 140, 62, 111, 14, 28, 62, 58, 40, 24, 60, 190, 63, 9, 190, 218, 224, 233, 61, 60, 189, 200, 61, 197, 53, 129, 61, 95, 39, 169, 189, 118, 191, 96, 187, 101, 43, 99, 62, 15, 16, 220, 189, 16, 13, 133, 190, 105, 175, 140, 61, 244, 73, 143, 62, 202, 250, 158, 188, 49, 149, 122, 188, 54, 180, 103, 189, 230, 224, 169, 189, 171, 113, 93, 62, 208, 142, 149, 62, 219, 47, 36, 62, 97, 175, 132, 62, 75, 38, 60, 62, 191, 39, 7, 191, 159, 169, 46, 62, 100, 13, 62, 190, 199, 251, 39, 61, 62, 234, 165, 61, 152, 191, 14, 62, 221, 212, 181, 61, 221, 22, 174, 60, 214, 210, 40, 190, 34, 43, 151, 60, 171, 142, 90, 190, 238, 81, 240, 61, 209, 16, 58, 189, 161, 229, 61, 61, 121, 59, 28, 190, 35, 34, 10, 62, 70, 133, 238, 189, 113, 75, 82, 61, 213, 23, 73, 190, 225, 221, 234, 189, 230, 247, 22, 189, 8, 140, 28, 190, 237, 34, 226, 187, 31, 67, 204, 190, 31, 121, 134, 190, 214, 70, 222, 190, 214, 185, 207, 60, 116, 53, 119, 62, 46, 71, 165, 61, 215, 191, 39, 62, 168, 22, 6, 61, 248, 133, 128, 62, 191, 30, 106, 190, 65, 177, 185, 190, 6, 132, 14, 61, 115, 83, 113, 62, 207, 28, 188, 189, 217, 74, 181, 62, 69, 12, 181, 190, 4, 2, 134, 190, 109, 51, 102, 190, 44, 155, 221, 189, 252, 46, 14, 189, 107, 65, 133, 190, 95, 156, 163, 189, 192, 18, 108, 62, 108, 194, 64, 190, 54, 80, 143, 190, 90, 171, 155, 61, 189, 6, 214, 61, 191, 226, 24, 190, 152, 180, 75, 190, 149, 83, 16, 191, 83, 227, 136, 189, 237, 241, 132, 61, 105, 12, 150, 61, 1, 207, 244, 61, 246, 167, 43, 190, 120, 216, 136, 61, 84, 89, 6, 62, 238, 203, 190, 62, 64, 93, 103, 189, 2, 201, 118, 62, 228, 90, 10, 62, 160, 214, 3, 191, 151, 155, 8, 62, 221, 81, 17, 61, 195, 138, 129, 59, 42, 19, 125, 189, 78, 141, 79, 188, 192, 245, 221, 60, 205, 186, 28, 60, 4, 69, 34, 190, 196, 120, 243, 61, 136, 19, 156, 190, 159, 23, 90, 60, 234, 103, 148, 189, 63, 163, 55, 190, 203, 130, 101, 190, 162, 135, 243, 189, 217, 219, 104, 190, 142, 234, 90, 190, 27, 125, 48, 61, 138, 184, 100, 62, 242, 24, 66, 62, 57, 188, 42, 189, 221, 97, 107, 190, 13, 232, 176, 188, 122, 54, 156, 61, 105, 146, 239, 61, 241, 135, 155, 188, 197, 187, 2, 61, 172, 122, 21, 62, 219, 193, 36, 62, 144, 128, 26, 62, 124, 250, 23, 62, 60, 152, 42, 190, 157, 215, 50, 62, 242, 171, 7, 59, 200, 110, 115, 62, 195, 86, 28, 62, 217, 172, 128, 62, 211, 10, 10, 190, 56, 106, 161, 61, 133, 80, 35, 62, 118, 174, 70, 62, 62, 213, 37, 190, 86, 239, 191, 189, 81, 154, 5, 190, 138, 176, 27, 62, 211, 218, 239, 188, 155, 235, 13, 62, 65, 88, 200, 61, 6, 143, 26, 61, 212, 241, 14, 190, 250, 86, 151, 189, 190, 211, 172, 61, 42, 234, 47, 190, 192, 17, 145, 188, 23, 32, 144, 190, 105, 107, 34, 61, 29, 3, 165, 61, 91, 0, 240, 188, 34, 53, 34, 62, 254, 208, 180, 61, 127, 253, 136, 62, 88, 119, 177, 61, 75, 48, 159, 61, 254, 125, 204, 189, 235, 100, 18, 61, 223, 133, 40, 190, 227, 118, 172, 61, 113, 178, 140, 189, 124, 96, 161, 61, 61, 246, 130, 60, 60, 199, 119, 60, 100, 243, 249, 61, 137, 215, 107, 62, 7, 55, 20, 190, 213, 182, 84, 60, 205, 192, 159, 61, 47, 239, 27, 190, 135, 157, 35, 190, 171, 211, 65, 61, 209, 122, 34, 190, 6, 103, 184, 60, 128, 127, 80, 62, 60, 135, 27, 190, 134, 176, 18, 190, 248, 17, 76, 62, 150, 196, 20, 62, 191, 196, 18, 190, 254, 185, 157, 187, 241, 156, 55, 190, 79, 155, 32, 61, 43, 144, 136, 187, 126, 170, 124, 61, 39, 3, 20, 190, 153, 56, 154, 189, 46, 97, 70, 61, 171, 95, 34, 62, 135, 137, 19, 59, 143, 21, 129, 60, 198, 40, 133, 61, 38, 204, 127, 61, 23, 119, 105, 61, 147, 9, 201, 60, 165, 25, 28, 190, 211, 23, 37, 190, 54, 143, 177, 60, 95, 252, 244, 189, 166, 20, 32, 60, 124, 238, 206, 189, 134, 48, 240, 189, 43, 64, 4, 61, 228, 72, 47, 61, 173, 53, 178, 61, 160, 52, 229, 189, 221, 121, 3, 62, 76, 70, 67, 190, 125, 123, 90, 61, 195, 192, 107, 189, 228, 104, 211, 61, 150, 38, 218, 190, 58, 132, 250, 190, 56, 194, 133, 62, 172, 118, 40, 189, 147, 104, 134, 62, 142, 132, 141, 190, 251, 129, 153, 62, 184, 162, 18, 62, 160, 195, 243, 61, 113, 143, 153, 62, 75, 80, 90, 189, 196, 249, 64, 190, 65, 22, 54, 62, 198, 203, 139, 190, 171, 40, 211, 189, 184, 225, 84, 58, 170, 156, 159, 62, 203, 187, 250, 61, 63, 25, 92, 189, 161, 239, 156, 188, 23, 123, 137, 62, 163, 186, 124, 189, 43, 215, 102, 62, 112, 84, 4, 62, 254, 217, 241, 61, 223, 162, 214, 189, 143, 164, 53, 61, 182, 180, 188, 61, 224, 9, 147, 190, 28, 69, 121, 191, 32, 157, 7, 62, 163, 10, 103, 62, 215, 105, 61, 190, 101, 219, 25, 190, 83, 211, 39, 61, 70, 95, 97, 188, 236, 151, 203, 61, 215, 229, 99, 61, 75, 204, 237, 187, 3, 164, 63, 61, 69, 118, 130, 189, 192, 92, 31, 61, 126, 49, 14, 62, 46, 78, 153, 61, 214, 152, 17, 62, 231, 250, 88, 61, 101, 191, 167, 60, 246, 104, 183, 61, 93, 242, 235, 189, 27, 51, 30, 190, 241, 219, 122, 61, 207, 196, 237, 60, 160, 42, 15, 189, 4, 21, 194, 187, 28, 152, 116, 189, 198, 148, 130, 187, 47, 145, 16, 190, 121, 166, 53, 190, 172, 96, 34, 190, 145, 63, 144, 189, 23, 28, 104, 189, 111, 32, 217, 189, 96, 25, 42, 61, 34, 156, 7, 190, 191, 98, 10, 191, 188, 89, 92, 189, 117, 234, 53, 62, 255, 155, 136, 190, 110, 155, 73, 62, 252, 124, 131, 190, 55, 30, 87, 187, 223, 9, 23, 62, 51, 185, 29, 61, 109, 116, 188, 189, 74, 231, 153, 186, 183, 195, 4, 190, 208, 174, 28, 61, 162, 108, 205, 189, 37, 239, 9, 190, 186, 222, 78, 190, 151, 197, 46, 62, 184, 108, 76, 62, 135, 62, 28, 61, 98, 143, 110, 62, 63, 156, 218, 61, 156, 249, 32, 190, 12, 22, 144, 61, 171, 251, 194, 189, 134, 234, 53, 59, 90, 10, 116, 62, 41, 65, 85, 62, 76, 203, 20, 62, 251, 164, 241, 189, 23, 248, 134, 189, 210, 28, 233, 61, 189, 84, 201, 62, 188, 130, 206, 62, 132, 245, 27, 62, 216, 39, 48, 189, 92, 31, 69, 62, 2, 32, 185, 189, 98, 212, 125, 62, 125, 13, 195, 189, 176, 120, 40, 62, 86, 238, 142, 61, 60, 13, 164, 189, 234, 22, 29, 62, 106, 195, 225, 61, 157, 225, 248, 61, 19, 193, 208, 189, 175, 254, 219, 188, 23, 93, 182, 189, 246, 211, 19, 190, 188, 242, 65, 189, 30, 231, 227, 188, 205, 37, 212, 189, 164, 232, 233, 61, 196, 60, 52, 62, 222, 158, 18, 61, 252, 214, 39, 190, 166, 223, 135, 59, 151, 145, 33, 190, 0, 15, 48, 190, 164, 204, 19, 190, 51, 163, 102, 62, 78, 50, 103, 61, 90, 27, 186, 189, 39, 163, 96, 190, 198, 222, 139, 61, 231, 48, 193, 61, 84, 180, 146, 189, 55, 181, 177, 189, 32, 24, 37, 61, 213, 168, 99, 60, 112, 67, 28, 62, 74, 149, 158, 60, 205, 179, 139, 189, 57, 49, 17, 61, 145, 4, 169, 60, 195, 3, 61, 61, 216, 88, 189, 60, 179, 226, 251, 189, 253, 230, 210, 189, 73, 66, 10, 190, 89, 178, 113, 189, 169, 252, 65, 61, 190, 47, 5, 62, 239, 225, 73, 61, 168, 219, 44, 189, 3, 40, 96, 189, 197, 77, 27, 189, 6, 139, 7, 190, 32, 24, 250, 189, 197, 92, 36, 190, 25, 152, 10, 188, 182, 86, 53, 189, 53, 235, 19, 190, 144, 96, 66, 61, 157, 130, 15, 189, 199, 56, 118, 188, 26, 85, 177, 62, 87, 13, 19, 61, 245, 196, 187, 190, 187, 2, 182, 190, 77, 249, 138, 190, 72, 145, 52, 62, 61, 148, 27, 190, 112, 131, 9, 62, 93, 75, 120, 61, 78, 125, 82, 190, 9, 30, 160, 62, 98, 228, 137, 60, 252, 190, 93, 61, 219, 218, 8, 62, 173, 68, 141, 190, 3, 156, 208, 186, 202, 233, 130, 190, 221, 129, 151, 188, 151, 1, 57, 189, 251, 116, 11, 62, 247, 120, 241, 61, 16, 38, 90, 62, 211, 100, 111, 190, 103, 117, 147, 190, 247, 221, 29, 189, 224, 169, 0, 62, 219, 240, 160, 61, 69, 81, 152, 188, 58, 241, 55, 190, 148, 142, 26, 190, 173, 132, 156, 61, 99, 204, 153, 189, 172, 241, 97, 189, 168, 56, 128, 190, 36, 200, 130, 189, 171, 102, 124, 61, 188, 48, 0, 59, 185, 110, 210, 190, 209, 102, 184, 61, 179, 176, 57, 61, 163, 126, 148, 61, 38, 18, 144, 61, 234, 227, 197, 60, 197, 45, 22, 190, 136, 103, 11, 62, 18, 99, 44, 62, 166, 124, 160, 61, 174, 160, 250, 59, 223, 234, 113, 188, 229, 244, 6, 190, 152, 254, 33, 62, 64, 203, 167, 61, 240, 161, 224, 189, 5, 226, 126, 190, 182, 184, 80, 62, 2, 95, 23, 189, 254, 124, 221, 61, 176, 192, 118, 188, 236, 168, 207, 61, 195, 69, 115, 62, 122, 35, 70, 190, 206, 163, 232, 190, 136, 76, 56, 190, 131, 134, 226, 189, 10, 143, 28, 191, 186, 60, 222, 190, 219, 150, 148, 61, 30, 73, 52, 61, 252, 44, 141, 62, 150, 72, 151, 190, 209, 31, 192, 61, 116, 196, 11, 62, 246, 239, 168, 61, 175, 80, 208, 188, 144, 220, 72, 190, 82, 87, 124, 190, 97, 107, 11, 62, 167, 141, 16, 190, 175, 170, 176, 61, 1, 21, 38, 190, 118, 58, 200, 61, 53, 161, 17, 62, 211, 147, 59, 62, 64, 172, 69, 62, 102, 207, 139, 62, 75, 201, 113, 190, 202, 26, 104, 62, 248, 229, 169, 62, 52, 145, 69, 62, 175, 81, 106, 61, 11, 201, 155, 61, 83, 183, 169, 189, 254, 50, 131, 190, 39, 154, 97, 191, 117, 123, 125, 62, 168, 233, 39, 61, 238, 202, 112, 61, 112, 234, 203, 189, 14, 242, 124, 189, 202, 135, 197, 190, 121, 53, 21, 62, 168, 238, 75, 189, 91, 174, 154, 61, 146, 135, 169, 61, 222, 45, 67, 190, 34, 177, 41, 62, 159, 175, 37, 62, 238, 90, 118, 61, 117, 235, 30, 62, 157, 246, 31, 190, 159, 105, 14, 190, 19, 51, 99, 190, 5, 18, 88, 62, 51, 232, 141, 189, 252, 188, 25, 189, 30, 237, 41, 189, 136, 7, 60, 62, 15, 13, 22, 59, 120, 179, 9, 62, 156, 77, 209, 190, 123, 235, 254, 189, 253, 130, 73, 188, 23, 251, 16, 62, 114, 66, 198, 189, 177, 154, 154, 190, 190, 101, 49, 189, 139, 5, 209, 61, 114, 18, 207, 189, 10, 102, 163, 188, 110, 171, 128, 62, 221, 229, 83, 62, 200, 37, 13, 62, 68, 209, 62, 62, 133, 48, 237, 61, 169, 201, 134, 62, 145, 44, 125, 61, 157, 239, 127, 61, 150, 238, 93, 190, 102, 234, 89, 62, 112, 210, 161, 189, 246, 254, 150, 62, 130, 239, 220, 61, 15, 169, 192, 62, 48, 37, 95, 189, 135, 223, 165, 189, 63, 143, 129, 190, 247, 235, 184, 190, 12, 246, 161, 190, 31, 6, 46, 189, 90, 106, 19, 61, 151, 121, 170, 189, 86, 108, 107, 190, 170, 89, 97, 189, 8, 126, 121, 190, 221, 173, 56, 191, 208, 46, 16, 191, 106, 29, 56, 62, 5, 85, 140, 188, 163, 195, 46, 190, 131, 133, 4, 191, 135, 75, 192, 190, 36, 5, 153, 190, 34, 41, 150, 62, 238, 212, 254, 190, 30, 52, 149, 62, 56, 189, 36, 190, 175, 63, 117, 62, 231, 102, 204, 189, 41, 27, 57, 189, 225, 232, 223, 62, 109, 135, 22, 191, 238, 148, 106, 189, 245, 164, 98, 189, 121, 184, 132, 190, 34, 3, 239, 189, 90, 223, 56, 190, 195, 10, 92, 61, 101, 39, 47, 62, 84, 14, 143, 60, 144, 184, 12, 190, 72, 172, 122, 189, 106, 190, 66, 190, 163, 204, 237, 60, 161, 72, 30, 59, 101, 147, 86, 62, 24, 32, 65, 61, 221, 206, 38, 62, 186, 177, 173, 62, 51, 230, 158, 190, 32, 107, 173, 190, 22, 216, 253, 60, 246, 34, 224, 186, 178, 104, 159, 62, 33, 204, 39, 62, 236, 131, 31, 62, 169, 155, 137, 62, 237, 73, 36, 188, 131, 41, 7, 62, 0, 181, 57, 62, 208, 236, 205, 61, 172, 58, 25, 62, 27, 102, 53, 190, 187, 37, 169, 62, 238, 251, 41, 62, 66, 221, 181, 61, 120, 139, 15, 61, 82, 148, 16, 62, 208, 147, 12, 62, 67, 160, 228, 189, 56, 125, 101, 190, 3, 234, 35, 190, 135, 134, 100, 189, 49, 106, 47, 61, 13, 105, 7, 62, 111, 93, 157, 188, 71, 172, 218, 190, 134, 255, 21, 190, 128, 1, 149, 189, 104, 121, 63, 190, 208, 199, 182, 190, 58, 0, 43, 62, 68, 12, 231, 61, 53, 132, 178, 190, 6, 130, 179, 189, 214, 68, 138, 60, 182, 138, 226, 61, 131, 3, 22, 62, 175, 59, 10, 62, 207, 242, 32, 190, 143, 237, 150, 61, 127, 51, 84, 189, 97, 34, 144, 61, 15, 47, 29, 190, 230, 191, 222, 188, 113, 65, 24, 190, 42, 100, 142, 189, 169, 150, 91, 189, 32, 187, 133, 189, 197, 196, 38, 189, 199, 146, 48, 190, 29, 182, 17, 189, 195, 80, 252, 188, 54, 46, 218, 61, 15, 5, 232, 61, 187, 198, 49, 190, 13, 108, 165, 188, 167, 217, 207, 60, 152, 45, 5, 61, 247, 211, 9, 190, 188, 163, 10, 190, 109, 239, 10, 189, 136, 208, 36, 190, 156, 43, 195, 189, 132, 221, 32, 61, 184, 153, 4, 190, 202, 203, 39, 62, 246, 15, 171, 60, 54, 108, 247, 189, 253, 208, 228, 188, 110, 122, 145, 61, 12, 177, 156, 189, 46, 20, 184, 188, 107, 164, 138, 189, 123, 211, 30, 189, 158, 109, 220, 189, 132, 115, 50, 190, 9, 222, 202, 189, 14, 241, 49, 61, 23, 49, 97, 61, 37, 171, 41, 190, 234, 111, 31, 62, 208, 183, 21, 190, 44, 232, 13, 190, 41, 87, 162, 61, 48, 179, 132, 61, 87, 28, 130, 61, 97, 25, 229, 60, 188, 100, 31, 62, 61, 165, 31, 190, 75, 90, 185, 189, 78, 54, 242, 189, 179, 49, 65, 189, 36, 195, 122, 189, 68, 220, 215, 189, 181, 70, 41, 190, 65, 111, 250, 189, 160, 162, 105, 59, 47, 114, 42, 62, 67, 227, 136, 188, 153, 102, 111, 190, 230, 73, 16, 190, 168, 191, 0, 62, 173, 206, 214, 61, 254, 48, 86, 190, 6, 134, 96, 62, 21, 23, 239, 61, 179, 195, 7, 190, 40, 216, 86, 61, 63, 199, 156, 60, 6, 243, 202, 189, 128, 189, 197, 189, 172, 248, 162, 60, 87, 168, 236, 189, 99, 197, 35, 61, 166, 23, 208, 61, 141, 74, 162, 61, 238, 139, 95, 62, 5, 55, 12, 58, 189, 73, 175, 190, 148, 71, 36, 190, 161, 159, 91, 62, 129, 238, 245, 189, 21, 157, 14, 61, 144, 25, 193, 61, 180, 140, 63, 190, 201, 118, 42, 62, 15, 11, 33, 190, 193, 48, 55, 191, 109, 108, 173, 190, 196, 72, 213, 189, 205, 223, 168, 59, 27, 29, 94, 187, 127, 123, 35, 189, 231, 179, 249, 189, 231, 80, 94, 186, 221, 219, 227, 189, 81, 57, 45, 60, 198, 129, 16, 190, 7, 143, 44, 190, 48, 152, 195, 61, 189, 78, 180, 60, 139, 136, 222, 61, 226, 85, 1, 62, 187, 141, 116, 61, 139, 80, 175, 61, 127, 18, 242, 61, 130, 71, 36, 189, 56, 31, 19, 62, 77, 63, 54, 189, 46, 181, 54, 189, 66, 63, 42, 190, 121, 96, 23, 190, 131, 234, 16, 190, 112, 27, 42, 190, 124, 58, 224, 60, 250, 48, 127, 61, 5, 141, 216, 189, 47, 188, 50, 190, 139, 253, 37, 190, 79, 146, 138, 61, 252, 92, 41, 62, 82, 234, 11, 62, 28, 15, 175, 62, 98, 125, 24, 62, 203, 28, 101, 190, 84, 48, 131, 189, 118, 241, 160, 190, 211, 202, 115, 61, 128, 131, 157, 188, 208, 196, 172, 61, 53, 186, 243, 188, 91, 7, 221, 60, 44, 107, 67, 62, 207, 113, 78, 61, 171, 16, 10, 190, 109, 207, 147, 189, 223, 166, 216, 189, 3, 20, 132, 190, 41, 153, 194, 190, 126, 93, 188, 189, 249, 175, 25, 61, 131, 24, 133, 190, 175, 187, 202, 189, 146, 241, 88, 190, 112, 65, 141, 190, 66, 144, 162, 61, 62, 236, 73, 59, 152, 35, 6, 190, 187, 5, 4, 190, 160, 253, 21, 189, 196, 166, 106, 190, 187, 182, 43, 61, 111, 130, 91, 62, 17, 169, 139, 189, 213, 109, 31, 61, 172, 248, 128, 62, 67, 110, 211, 190, 103, 37, 134, 190, 94, 200, 190, 61, 237, 187, 115, 61, 208, 165, 39, 60, 149, 122, 102, 62, 2, 136, 113, 189, 253, 178, 247, 61, 244, 208, 202, 61, 79, 81, 150, 61, 234, 10, 232, 189, 42, 208, 61, 62, 36, 190, 177, 61, 255, 43, 198, 189, 3, 171, 46, 190, 100, 132, 131, 190, 6, 72, 246, 60, 176, 130, 119, 60, 139, 159, 199, 62, 194, 251, 10, 62, 206, 12, 99, 62, 92, 193, 30, 62, 173, 79, 107, 190, 181, 182, 246, 188, 84, 26, 203, 61, 166, 115, 52, 61, 233, 193, 93, 190, 148, 187, 99, 61, 7, 116, 133, 61, 31, 179, 28, 190, 81, 69, 142, 62, 2, 82, 222, 61, 246, 176, 9, 190, 198, 39, 20, 189, 114, 63, 18, 190, 210, 68, 174, 189, 204, 62, 232, 61, 55, 216, 184, 61, 255, 8, 3, 61, 127, 200, 163, 189, 29, 122, 59, 189, 238, 176, 8, 186, 253, 55, 230, 61, 5, 31, 4, 190, 157, 20, 135, 59, 238, 116, 123, 189, 142, 69, 75, 61, 220, 216, 45, 190, 48, 97, 156, 61, 60, 16, 122, 190, 64, 21, 68, 60, 0, 230, 35, 62, 53, 20, 154, 61, 107, 109, 77, 190, 215, 48, 139, 190, 12, 68, 147, 189, 162, 149, 187, 189, 76, 198, 1, 189, 226, 33, 116, 62, 216, 202, 246, 189, 161, 90, 150, 190, 205, 133, 99, 190, 161, 194, 184, 189, 212, 163, 11, 188, 13, 165, 19, 62, 4, 82, 205, 61, 64, 33, 4, 62, 152, 209, 135, 61, 251, 90, 39, 59, 224, 63, 30, 62, 6, 137, 154, 61, 255, 118, 145, 59, 235, 208, 100, 187, 23, 166, 105, 58, 119, 170, 199, 61, 138, 46, 242, 60, 6, 52, 42, 190, 158, 254, 97, 61, 161, 248, 224, 61, 107, 206, 121, 189, 148, 102, 4, 61, 237, 229, 222, 189, 234, 81, 33, 62, 51, 39, 31, 190, 81, 198, 21, 189, 179, 51, 190, 61, 9, 83, 249, 61, 171, 54, 250, 61, 109, 175, 33, 190, 166, 176, 232, 61, 229, 62, 59, 61, 24, 120, 97, 190, 24, 233, 191, 61, 166, 186, 96, 61, 13, 193, 213, 190, 0, 97, 10, 190, 80, 205, 185, 61, 147, 189, 151, 61, 77, 193, 201, 189, 239, 195, 197, 59, 189, 231, 201, 189, 140, 52, 116, 62, 87, 193, 245, 190, 228, 245, 71, 62, 188, 120, 170, 189, 73, 93, 154, 190, 51, 219, 131, 190, 59, 30, 69, 62, 68, 201, 176, 189, 158, 30, 85, 61, 4, 93, 188, 188, 40, 71, 109, 62, 150, 103, 206, 189, 74, 133, 246, 61, 201, 159, 142, 188, 150, 200, 59, 190, 254, 123, 147, 189, 215, 0, 142, 188, 163, 24, 139, 61, 250, 200, 79, 60, 249, 225, 149, 188, 64, 89, 13, 189, 156, 143, 11, 60, 63, 36, 32, 190, 45, 130, 47, 62, 240, 12, 161, 62, 53, 72, 238, 60, 199, 133, 17, 190, 77, 38, 68, 190, 223, 231, 203, 190, 102, 246, 180, 188, 135, 160, 183, 61, 189, 174, 25, 190, 144, 127, 118, 62, 203, 50, 254, 61, 34, 22, 202, 190, 7, 214, 4, 62, 117, 252, 131, 59, 77, 0, 109, 189, 146, 69, 249, 61, 21, 245, 143, 61, 197, 97, 9, 190, 11, 16, 9, 190, 187, 56, 192, 188, 199, 84, 47, 61, 137, 62, 44, 59, 61, 36, 168, 62, 135, 121, 10, 61, 160, 150, 181, 61, 223, 138, 172, 190, 141, 154, 47, 61, 24, 195, 205, 189, 90, 211, 239, 61, 202, 121, 50, 190, 80, 175, 91, 190, 194, 227, 61, 190, 209, 171, 241, 61, 37, 167, 35, 190, 85, 253, 98, 190, 103, 143, 137, 190, 109, 175, 211, 61, 207, 163, 70, 190, 225, 98, 148, 189, 33, 73, 130, 190, 33, 100, 7, 62, 102, 218, 162, 61, 92, 10, 133, 61, 93, 87, 171, 61, 16, 69, 173, 190, 89, 63, 161, 189, 3, 0, 54, 190, 141, 47, 7, 61, 112, 164, 212, 61, 34, 121, 61, 189, 144, 0, 154, 62, 195, 151, 190, 62, 47, 94, 76, 62, 114, 147, 119, 189, 90, 25, 25, 62, 15, 152, 171, 189, 229, 163, 90, 62, 1, 92, 153, 187, 41, 14, 151, 62, 62, 243, 120, 189, 151, 21, 89, 62, 204, 137, 9, 61, 193, 47, 112, 189, 36, 128, 217, 190, 81, 1, 113, 58, 108, 215, 218, 62, 70, 61, 144, 62, 227, 31, 62, 60, 80, 156, 7, 59, 84, 99, 87, 62, 71, 89, 186, 61, 182, 6, 171, 62, 97, 232, 12, 62, 214, 219, 1, 62, 220, 100, 62, 62, 188, 171, 149, 190, 229, 45, 88, 62, 185, 115, 226, 189, 143, 116, 64, 62, 234, 213, 163, 61, 142, 156, 104, 62, 138, 78, 110, 61, 183, 16, 31, 61, 54, 74, 129, 189, 139, 238, 142, 190, 210, 67, 252, 190, 81, 26, 7, 61, 28, 192, 27, 190, 56, 246, 74, 188, 242, 196, 69, 190, 36, 82, 66, 189, 224, 246, 92, 190, 0, 151, 27, 191, 20, 95, 240, 190, 255, 52, 9, 61, 182, 187, 137, 187, 43, 252, 98, 189, 100, 174, 32, 191, 183, 253, 199, 61, 231, 219, 233, 61, 44, 67, 129, 189, 193, 29, 29, 61, 217, 98, 137, 61, 190, 0, 206, 61, 33, 10, 175, 61, 151, 161, 30, 188, 212, 189, 14, 62, 121, 65, 221, 189, 192, 146, 156, 62, 203, 16, 103, 61, 159, 178, 240, 61, 170, 209, 230, 60, 175, 124, 25, 62, 241, 66, 23, 190, 139, 133, 46, 62, 238, 244, 81, 190, 199, 143, 238, 189, 201, 110, 253, 190, 124, 47, 83, 190, 147, 222, 73, 190, 84, 224, 173, 61, 100, 115, 132, 190, 163, 135, 156, 61, 27, 25, 145, 190, 236, 175, 58, 191, 46, 73, 203, 189, 118, 177, 55, 60, 254, 92, 187, 61, 240, 142, 231, 188, 138, 79, 130, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 194, 28, 189, 15, 76, 140, 61, 218, 60, 135, 61, 5, 106, 91, 62, 63, 4, 177, 62, 94, 243, 128, 62, 119, 230, 21, 190, 96, 117, 89, 62, 28, 1, 57, 190, 246, 118, 31, 190, 230, 247, 228, 61, 10, 208, 192, 189, 99, 77, 89, 190, 196, 105, 131, 189, 218, 140, 34, 62, 126, 192, 156, 189, 176, 120, 83, 62, 53, 54, 167, 61, 180, 22, 56, 61, 182, 91, 78, 61, 182, 166, 11, 62, 67, 11, 86, 189, 27, 65, 52, 190, 227, 151, 105, 61, 250, 252, 47, 189, 173, 143, 252, 57, 239, 239, 43, 61, 150, 43, 39, 190, 249, 111, 80, 190, 69, 29, 232, 189, 120, 16, 109, 62, 226, 224, 92, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 222, 135, 190, 111, 125, 177, 61, 19, 24, 22, 191, 83, 117, 129, 62, 151, 3, 142, 61, 123, 66, 121, 189, 198, 64, 156, 61, 128, 32, 197, 190, 155, 189, 30, 62, 239, 155, 163, 190, 174, 22, 115, 62, 115, 76, 109, 61, 38, 247, 42, 62, 161, 168, 77, 190, 211, 109, 11, 191, 244, 13, 3, 62, 63, 66, 37, 63, 200, 68, 34, 63, 96, 43, 71, 62, 38, 187, 197, 61, 213, 78, 221, 189, 154, 154, 137, 190, 190, 113, 51, 189, 62, 147, 172, 62, 140, 196, 88, 62, 228, 162, 244, 61, 33, 6, 52, 189, 86, 90, 241, 189, 76, 93, 54, 62, 14, 137, 202, 190, 85, 79, 209, 62, 9, 63, 137, 62, 102, 246, 133, 190, 217, 209, 156, 190, 128, 168, 6, 62, 254, 186, 8, 190, 142, 176, 116, 190, 197, 158, 156, 190, 91, 16, 246, 61, 104, 48, 4, 60, 198, 51, 242, 189, 106, 60, 138, 61, 225, 205, 67, 61, 45, 4, 47, 190, 62, 170, 40, 62, 163, 185, 135, 187, 7, 122, 60, 61, 34, 42, 32, 189, 128, 106, 231, 60, 40, 33, 92, 62, 97, 14, 73, 62, 232, 232, 230, 189, 223, 45, 20, 62, 69, 214, 114, 189, 215, 138, 172, 186, 59, 253, 175, 62, 19, 34, 218, 60, 227, 135, 31, 62, 178, 108, 40, 190, 201, 130, 192, 62, 193, 18, 119, 190, 236, 25, 201, 61, 22, 244, 41, 189, 232, 169, 33, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 93, 101, 60, 253, 152, 237, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {176, 170, 144, 62, 206, 222, 137, 191, 136, 236, 5, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {166, 221, 28, 64, 77, 104, 35, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0006/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}