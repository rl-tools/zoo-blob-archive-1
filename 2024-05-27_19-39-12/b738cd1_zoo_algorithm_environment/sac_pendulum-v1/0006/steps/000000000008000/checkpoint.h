// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 231, 96, 63, 70, 161, 100, 191, 108, 103, 183, 190, 117, 93, 104, 61, 231, 179, 18, 191, 38, 32, 192, 62, 142, 42, 3, 190, 145, 133, 57, 63, 10, 87, 111, 189, 151, 46, 38, 191, 179, 53, 88, 62, 162, 128, 191, 62, 192, 37, 75, 191, 162, 158, 64, 58, 248, 62, 20, 190, 15, 57, 226, 62, 39, 221, 104, 191, 228, 25, 9, 62, 200, 36, 141, 189, 167, 181, 208, 61, 244, 36, 111, 61, 0, 34, 3, 63, 198, 193, 129, 190, 133, 252, 122, 187, 120, 238, 191, 190, 130, 88, 88, 191, 196, 161, 200, 189, 24, 197, 84, 62, 233, 88, 100, 63, 21, 237, 92, 190, 132, 124, 69, 63, 60, 86, 115, 191, 57, 30, 131, 190, 31, 60, 166, 62, 1, 106, 193, 190, 101, 165, 176, 190, 235, 171, 31, 191, 141, 159, 187, 190, 66, 48, 55, 61, 86, 139, 27, 63, 110, 219, 12, 62, 16, 144, 229, 190, 188, 234, 150, 190, 246, 22, 57, 63, 148, 135, 51, 62, 212, 10, 238, 61, 178, 7, 25, 62, 76, 251, 191, 190, 38, 14, 164, 189, 225, 202, 45, 63, 54, 45, 150, 189, 252, 18, 208, 62, 151, 133, 128, 63, 220, 237, 99, 62, 186, 209, 44, 61, 117, 62, 69, 62, 10, 111, 157, 190, 157, 103, 134, 190, 246, 72, 151, 191, 105, 182, 133, 190, 220, 152, 79, 63, 121, 0, 31, 190, 237, 102, 146, 62, 146, 226, 23, 63, 24, 186, 223, 190, 56, 180, 237, 190, 54, 207, 225, 190, 229, 162, 247, 61, 174, 50, 165, 190, 152, 171, 84, 62, 205, 175, 182, 60, 130, 230, 21, 63, 70, 76, 44, 63, 174, 78, 151, 63, 86, 164, 128, 62, 119, 62, 236, 190, 158, 154, 142, 191, 59, 116, 21, 62, 247, 149, 64, 191, 47, 46, 160, 191, 58, 83, 187, 190, 221, 193, 27, 62, 238, 84, 87, 61, 158, 62, 202, 190, 146, 89, 230, 190, 2, 223, 141, 63, 18, 235, 30, 63, 185, 42, 66, 191, 191, 172, 213, 57, 181, 76, 39, 63, 84, 86, 27, 63, 57, 77, 135, 190, 92, 95, 16, 63, 22, 238, 87, 63, 110, 121, 65, 63, 197, 166, 149, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 116, 2, 191, 68, 114, 64, 62, 239, 60, 153, 62, 69, 223, 84, 62, 213, 5, 171, 62, 173, 100, 235, 62, 111, 169, 16, 63, 27, 134, 240, 62, 116, 236, 6, 63, 2, 94, 74, 190, 32, 191, 14, 62, 178, 98, 133, 189, 181, 221, 28, 63, 163, 122, 63, 188, 163, 137, 35, 190, 81, 75, 214, 190, 209, 115, 255, 62, 75, 253, 103, 187, 131, 105, 18, 63, 57, 199, 34, 189, 11, 34, 116, 62, 173, 97, 79, 191, 120, 97, 28, 63, 134, 134, 118, 190, 52, 248, 160, 62, 132, 191, 186, 62, 135, 57, 225, 190, 40, 190, 245, 61, 2, 116, 168, 61, 36, 161, 191, 60, 62, 136, 127, 61, 157, 146, 3, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 173, 244, 190, 198, 248, 166, 190, 33, 129, 57, 61, 123, 163, 173, 190, 144, 83, 171, 61, 75, 134, 101, 189, 32, 36, 28, 62, 92, 178, 159, 61, 154, 153, 86, 190, 194, 168, 149, 190, 175, 150, 228, 61, 130, 127, 90, 190, 156, 108, 164, 61, 26, 157, 54, 61, 71, 64, 0, 190, 189, 37, 212, 187, 139, 229, 41, 62, 52, 95, 180, 62, 66, 250, 86, 62, 73, 123, 54, 62, 35, 226, 157, 60, 106, 231, 55, 190, 153, 78, 129, 61, 31, 183, 76, 61, 31, 20, 5, 62, 23, 180, 219, 189, 191, 76, 101, 61, 203, 15, 34, 62, 72, 149, 243, 189, 50, 240, 137, 190, 82, 157, 87, 61, 91, 220, 153, 62, 105, 10, 180, 189, 203, 250, 203, 59, 1, 167, 196, 189, 169, 88, 247, 189, 103, 204, 48, 62, 252, 245, 169, 62, 87, 200, 21, 62, 79, 227, 140, 62, 192, 54, 118, 62, 109, 214, 79, 191, 254, 255, 63, 62, 85, 138, 119, 190, 155, 125, 147, 61, 72, 99, 8, 61, 95, 97, 139, 61, 116, 70, 24, 61, 161, 2, 108, 189, 230, 135, 181, 190, 165, 79, 174, 60, 132, 59, 116, 190, 63, 1, 35, 62, 42, 237, 174, 189, 47, 90, 89, 60, 37, 207, 120, 189, 162, 67, 173, 61, 29, 150, 3, 188, 164, 254, 180, 61, 52, 204, 96, 190, 1, 70, 102, 190, 191, 80, 252, 188, 28, 146, 106, 189, 222, 86, 70, 190, 141, 62, 55, 190, 16, 86, 15, 62, 181, 148, 77, 191, 54, 242, 55, 62, 17, 154, 39, 62, 80, 94, 252, 62, 12, 100, 49, 62, 237, 29, 234, 61, 209, 197, 169, 62, 214, 69, 8, 190, 195, 165, 135, 190, 120, 181, 59, 61, 82, 11, 137, 62, 36, 144, 227, 60, 179, 109, 53, 61, 37, 254, 217, 190, 164, 200, 4, 191, 131, 26, 129, 190, 65, 181, 67, 190, 171, 9, 205, 187, 24, 245, 87, 190, 203, 108, 214, 60, 239, 98, 36, 62, 243, 222, 43, 191, 11, 74, 123, 190, 160, 42, 74, 62, 231, 236, 24, 189, 152, 143, 103, 190, 85, 149, 131, 190, 208, 101, 194, 190, 34, 166, 177, 190, 237, 241, 132, 61, 182, 142, 142, 60, 60, 168, 151, 61, 7, 82, 52, 189, 47, 247, 146, 60, 250, 213, 152, 60, 196, 192, 170, 62, 13, 26, 134, 189, 180, 224, 122, 62, 52, 66, 8, 62, 23, 136, 192, 190, 43, 189, 32, 62, 192, 32, 184, 188, 36, 23, 164, 59, 224, 49, 90, 189, 11, 20, 2, 190, 159, 99, 25, 62, 170, 41, 177, 61, 28, 150, 203, 190, 74, 222, 67, 62, 189, 51, 70, 191, 122, 209, 152, 187, 146, 121, 3, 189, 40, 31, 65, 190, 100, 234, 123, 190, 88, 145, 106, 190, 170, 123, 71, 190, 132, 45, 232, 190, 181, 4, 24, 62, 177, 13, 206, 61, 0, 57, 220, 61, 15, 56, 56, 189, 183, 184, 1, 191, 87, 178, 128, 189, 154, 197, 45, 61, 87, 61, 188, 62, 165, 236, 54, 189, 124, 5, 89, 189, 212, 30, 12, 62, 236, 56, 48, 62, 224, 64, 11, 62, 44, 143, 198, 61, 99, 56, 19, 60, 104, 248, 54, 62, 90, 250, 195, 60, 123, 120, 51, 62, 73, 171, 87, 62, 119, 16, 94, 62, 162, 226, 144, 189, 179, 92, 127, 62, 214, 118, 57, 62, 183, 162, 129, 62, 128, 149, 98, 190, 242, 245, 186, 189, 148, 186, 174, 189, 151, 183, 31, 62, 7, 249, 232, 188, 49, 203, 72, 62, 254, 43, 23, 62, 85, 98, 213, 60, 44, 109, 186, 189, 98, 244, 176, 189, 12, 37, 113, 61, 44, 255, 36, 190, 197, 44, 140, 189, 118, 66, 219, 190, 131, 50, 12, 62, 153, 25, 153, 61, 65, 137, 27, 188, 159, 76, 65, 62, 185, 52, 87, 62, 62, 61, 154, 62, 186, 6, 168, 61, 37, 108, 54, 62, 178, 45, 186, 189, 66, 169, 78, 189, 244, 32, 74, 190, 117, 219, 76, 62, 197, 232, 213, 189, 57, 80, 5, 190, 42, 206, 121, 188, 83, 69, 19, 60, 92, 249, 148, 61, 132, 147, 91, 62, 145, 182, 1, 190, 66, 34, 191, 61, 168, 213, 41, 61, 61, 24, 24, 190, 127, 151, 236, 189, 18, 72, 137, 61, 130, 184, 138, 60, 64, 1, 164, 61, 150, 74, 58, 62, 117, 130, 77, 190, 79, 161, 187, 189, 126, 133, 136, 62, 113, 31, 156, 61, 175, 41, 222, 190, 87, 59, 61, 61, 64, 34, 170, 190, 80, 150, 22, 189, 93, 40, 145, 189, 139, 3, 72, 62, 158, 163, 185, 189, 90, 120, 170, 61, 236, 31, 138, 62, 171, 95, 34, 62, 58, 58, 156, 62, 175, 47, 142, 190, 175, 176, 53, 62, 7, 163, 191, 190, 209, 6, 94, 189, 50, 201, 7, 190, 249, 96, 225, 190, 151, 81, 15, 191, 221, 116, 5, 190, 161, 94, 145, 61, 169, 23, 92, 61, 236, 29, 232, 190, 106, 30, 73, 190, 72, 134, 150, 185, 186, 84, 173, 189, 17, 13, 114, 62, 4, 166, 132, 61, 63, 76, 39, 190, 144, 211, 222, 190, 244, 14, 248, 188, 152, 156, 17, 189, 122, 35, 130, 190, 61, 182, 16, 191, 61, 222, 215, 190, 114, 29, 5, 62, 126, 44, 184, 190, 210, 204, 129, 62, 110, 175, 135, 190, 108, 232, 119, 62, 203, 71, 208, 61, 225, 105, 56, 62, 153, 170, 67, 62, 124, 245, 181, 189, 55, 142, 86, 190, 17, 170, 77, 62, 11, 161, 165, 190, 120, 227, 175, 190, 12, 68, 29, 189, 50, 16, 72, 62, 67, 104, 54, 62, 112, 214, 198, 189, 208, 79, 235, 61, 231, 37, 141, 62, 188, 110, 190, 189, 186, 78, 87, 62, 128, 190, 53, 62, 56, 34, 26, 62, 208, 123, 64, 190, 102, 48, 34, 62, 202, 136, 131, 61, 132, 154, 14, 191, 251, 208, 129, 191, 86, 60, 12, 62, 251, 56, 145, 62, 149, 197, 70, 190, 101, 219, 25, 190, 148, 60, 13, 61, 70, 95, 97, 188, 84, 2, 195, 61, 133, 122, 91, 61, 136, 206, 39, 188, 142, 176, 40, 61, 140, 239, 135, 189, 126, 142, 242, 60, 19, 70, 4, 62, 154, 122, 131, 61, 13, 216, 16, 62, 111, 253, 17, 61, 101, 191, 167, 60, 225, 173, 160, 61, 178, 129, 251, 189, 27, 51, 30, 190, 83, 14, 62, 61, 99, 158, 204, 60, 206, 7, 21, 189, 74, 135, 125, 188, 113, 194, 149, 189, 198, 148, 130, 187, 94, 222, 16, 190, 233, 234, 53, 190, 143, 207, 36, 190, 57, 58, 173, 189, 23, 28, 104, 189, 111, 32, 217, 189, 96, 25, 42, 61, 34, 156, 7, 190, 210, 242, 55, 191, 220, 8, 248, 61, 190, 104, 14, 62, 241, 228, 154, 190, 142, 42, 111, 62, 2, 154, 172, 189, 206, 153, 88, 61, 17, 58, 78, 62, 36, 149, 4, 62, 96, 237, 216, 61, 126, 208, 175, 189, 202, 164, 31, 190, 118, 64, 195, 61, 240, 120, 198, 189, 159, 144, 74, 191, 22, 96, 95, 190, 224, 230, 12, 62, 215, 225, 113, 62, 114, 183, 109, 61, 203, 54, 146, 62, 226, 188, 105, 62, 123, 233, 157, 190, 96, 78, 246, 61, 114, 152, 30, 60, 243, 15, 176, 61, 185, 188, 140, 62, 63, 234, 109, 62, 155, 99, 59, 62, 154, 179, 108, 190, 37, 63, 107, 188, 0, 155, 95, 62, 79, 4, 5, 63, 132, 69, 152, 62, 2, 44, 149, 61, 31, 120, 136, 61, 121, 198, 62, 62, 15, 62, 85, 189, 58, 39, 33, 62, 242, 238, 229, 189, 146, 173, 241, 61, 247, 211, 189, 60, 64, 105, 150, 189, 227, 200, 30, 62, 198, 63, 79, 60, 176, 128, 212, 61, 109, 125, 37, 190, 180, 142, 162, 62, 214, 109, 145, 189, 125, 205, 65, 189, 124, 177, 254, 189, 190, 254, 187, 59, 239, 180, 13, 191, 209, 197, 133, 61, 152, 60, 17, 62, 247, 118, 161, 61, 112, 142, 50, 190, 175, 164, 91, 189, 71, 206, 174, 190, 253, 165, 210, 190, 187, 1, 172, 189, 70, 34, 111, 62, 112, 61, 191, 59, 211, 40, 237, 189, 187, 215, 169, 190, 198, 222, 139, 61, 231, 48, 193, 61, 84, 180, 146, 189, 55, 181, 177, 189, 32, 24, 37, 61, 213, 168, 99, 60, 112, 67, 28, 62, 74, 149, 158, 60, 205, 179, 139, 189, 57, 49, 17, 61, 145, 4, 169, 60, 195, 3, 61, 61, 216, 88, 189, 60, 179, 226, 251, 189, 253, 230, 210, 189, 73, 66, 10, 190, 89, 178, 113, 189, 169, 252, 65, 61, 190, 47, 5, 62, 239, 225, 73, 61, 168, 219, 44, 189, 3, 40, 96, 189, 197, 77, 27, 189, 6, 139, 7, 190, 32, 24, 250, 189, 197, 92, 36, 190, 25, 152, 10, 188, 182, 86, 53, 189, 53, 235, 19, 190, 144, 96, 66, 61, 157, 130, 15, 189, 199, 56, 118, 188, 23, 190, 35, 62, 177, 241, 195, 61, 248, 30, 14, 191, 5, 209, 29, 190, 202, 197, 137, 190, 73, 30, 107, 62, 186, 120, 49, 190, 205, 248, 215, 61, 110, 12, 148, 62, 216, 231, 79, 191, 244, 168, 191, 62, 228, 45, 219, 189, 197, 106, 146, 62, 111, 64, 252, 188, 120, 81, 171, 189, 128, 47, 21, 190, 140, 176, 255, 190, 204, 98, 221, 190, 211, 65, 5, 190, 41, 226, 30, 62, 218, 11, 170, 61, 79, 147, 136, 61, 163, 84, 148, 190, 195, 32, 150, 190, 16, 30, 97, 190, 169, 152, 203, 62, 138, 91, 30, 62, 12, 96, 254, 189, 121, 58, 114, 190, 64, 239, 103, 61, 84, 186, 111, 61, 84, 13, 43, 191, 140, 5, 76, 190, 157, 193, 75, 190, 113, 100, 33, 190, 173, 133, 85, 190, 159, 5, 170, 61, 119, 232, 45, 191, 64, 72, 169, 61, 39, 151, 10, 190, 146, 248, 68, 62, 199, 117, 205, 189, 49, 205, 201, 189, 205, 12, 104, 190, 38, 98, 161, 62, 22, 253, 55, 61, 184, 229, 139, 61, 212, 211, 131, 189, 159, 51, 150, 189, 99, 64, 128, 61, 116, 210, 250, 61, 229, 33, 238, 61, 44, 174, 240, 189, 178, 32, 164, 190, 225, 36, 89, 62, 91, 55, 27, 189, 7, 15, 168, 62, 162, 126, 247, 189, 131, 71, 64, 62, 227, 180, 77, 62, 194, 173, 255, 190, 246, 109, 35, 191, 153, 219, 69, 190, 200, 210, 192, 189, 12, 204, 79, 191, 117, 238, 187, 190, 204, 101, 171, 61, 80, 112, 24, 62, 15, 202, 204, 62, 210, 122, 180, 190, 115, 18, 178, 61, 161, 120, 77, 61, 196, 21, 13, 62, 179, 198, 168, 61, 67, 12, 163, 190, 207, 149, 136, 190, 10, 205, 139, 62, 85, 152, 19, 190, 74, 140, 0, 188, 234, 85, 4, 190, 225, 10, 216, 61, 196, 241, 58, 62, 33, 12, 71, 62, 76, 27, 146, 62, 146, 47, 70, 62, 110, 175, 163, 190, 190, 187, 156, 62, 233, 252, 107, 62, 94, 109, 81, 62, 53, 6, 8, 61, 111, 40, 20, 62, 27, 239, 20, 189, 56, 139, 154, 190, 81, 114, 23, 191, 96, 226, 1, 62, 25, 189, 148, 61, 110, 242, 85, 61, 214, 193, 223, 60, 38, 30, 143, 60, 101, 209, 120, 190, 126, 133, 171, 61, 104, 197, 63, 59, 125, 254, 152, 61, 236, 98, 239, 61, 2, 162, 96, 190, 220, 116, 221, 62, 222, 208, 54, 62, 236, 157, 240, 61, 238, 49, 31, 61, 195, 195, 111, 189, 173, 241, 54, 191, 211, 241, 149, 189, 239, 51, 115, 62, 83, 143, 0, 190, 80, 116, 255, 59, 21, 233, 9, 189, 5, 150, 86, 62, 38, 169, 128, 61, 71, 199, 24, 62, 72, 135, 15, 190, 1, 28, 246, 189, 80, 124, 121, 62, 149, 170, 236, 61, 133, 165, 215, 188, 8, 249, 83, 191, 72, 247, 162, 62, 101, 20, 79, 62, 98, 136, 193, 189, 150, 246, 232, 189, 167, 207, 109, 62, 211, 53, 165, 62, 250, 178, 29, 62, 48, 145, 224, 61, 119, 123, 164, 61, 123, 28, 127, 62, 45, 83, 6, 61, 192, 88, 51, 61, 236, 116, 192, 190, 246, 72, 141, 62, 110, 50, 82, 190, 113, 76, 131, 62, 174, 86, 158, 188, 157, 201, 49, 63, 3, 218, 189, 190, 30, 213, 98, 187, 76, 44, 143, 190, 120, 200, 169, 190, 238, 207, 140, 191, 154, 173, 146, 188, 156, 247, 130, 188, 25, 29, 134, 189, 239, 144, 32, 190, 74, 110, 160, 189, 60, 87, 224, 190, 55, 178, 153, 191, 103, 40, 1, 191, 255, 34, 112, 62, 243, 131, 195, 188, 251, 146, 245, 189, 176, 80, 26, 191, 69, 36, 17, 191, 114, 129, 249, 190, 117, 182, 79, 62, 165, 224, 215, 190, 185, 38, 236, 62, 241, 6, 52, 62, 232, 170, 158, 62, 198, 153, 80, 188, 217, 23, 143, 62, 184, 59, 35, 62, 119, 150, 41, 191, 110, 254, 252, 189, 226, 176, 98, 62, 147, 6, 254, 190, 52, 99, 21, 189, 85, 53, 185, 190, 25, 252, 228, 59, 122, 3, 15, 62, 100, 159, 49, 188, 175, 170, 92, 61, 60, 19, 109, 61, 164, 4, 166, 190, 222, 164, 159, 61, 183, 148, 28, 189, 16, 196, 34, 62, 167, 122, 157, 62, 158, 100, 142, 62, 202, 104, 81, 62, 22, 68, 78, 190, 55, 208, 25, 191, 205, 73, 1, 62, 126, 39, 129, 187, 195, 66, 198, 62, 232, 43, 46, 62, 75, 22, 108, 62, 120, 80, 157, 62, 136, 135, 198, 189, 224, 246, 170, 61, 63, 27, 7, 62, 104, 94, 182, 61, 154, 1, 172, 188, 235, 207, 29, 61, 167, 21, 195, 62, 180, 47, 82, 62, 135, 225, 158, 189, 213, 239, 140, 61, 20, 237, 244, 62, 239, 20, 136, 62, 10, 78, 156, 189, 230, 182, 155, 190, 240, 61, 227, 189, 187, 194, 123, 190, 61, 9, 79, 61, 252, 74, 68, 62, 118, 51, 147, 188, 175, 95, 161, 190, 158, 44, 98, 190, 91, 202, 142, 190, 243, 169, 155, 190, 248, 63, 129, 190, 195, 181, 128, 62, 230, 255, 18, 62, 162, 202, 140, 190, 32, 89, 16, 190, 214, 68, 138, 60, 182, 138, 226, 61, 131, 3, 22, 62, 175, 59, 10, 62, 207, 242, 32, 190, 143, 237, 150, 61, 127, 51, 84, 189, 97, 34, 144, 61, 15, 47, 29, 190, 230, 191, 222, 188, 113, 65, 24, 190, 42, 100, 142, 189, 169, 150, 91, 189, 32, 187, 133, 189, 197, 196, 38, 189, 199, 146, 48, 190, 29, 182, 17, 189, 195, 80, 252, 188, 54, 46, 218, 61, 15, 5, 232, 61, 187, 198, 49, 190, 13, 108, 165, 188, 167, 217, 207, 60, 152, 45, 5, 61, 247, 211, 9, 190, 188, 163, 10, 190, 109, 239, 10, 189, 136, 208, 36, 190, 156, 43, 195, 189, 132, 221, 32, 61, 184, 153, 4, 190, 202, 203, 39, 62, 246, 15, 171, 60, 54, 108, 247, 189, 253, 208, 228, 188, 110, 122, 145, 61, 12, 177, 156, 189, 46, 20, 184, 188, 107, 164, 138, 189, 123, 211, 30, 189, 158, 109, 220, 189, 132, 115, 50, 190, 9, 222, 202, 189, 14, 241, 49, 61, 23, 49, 97, 61, 37, 171, 41, 190, 234, 111, 31, 62, 208, 183, 21, 190, 44, 232, 13, 190, 41, 87, 162, 61, 48, 179, 132, 61, 87, 28, 130, 61, 97, 25, 229, 60, 188, 100, 31, 62, 61, 165, 31, 190, 75, 90, 185, 189, 78, 54, 242, 189, 179, 49, 65, 189, 36, 195, 122, 189, 68, 220, 215, 189, 181, 70, 41, 190, 65, 111, 250, 189, 160, 162, 105, 59, 47, 114, 42, 62, 84, 36, 127, 190, 123, 155, 118, 190, 112, 51, 216, 189, 78, 109, 49, 189, 37, 18, 43, 62, 209, 77, 202, 190, 181, 45, 101, 62, 156, 191, 158, 189, 41, 226, 86, 190, 208, 61, 6, 61, 30, 209, 101, 190, 53, 221, 98, 190, 141, 193, 133, 189, 28, 164, 147, 189, 221, 249, 157, 189, 4, 92, 125, 188, 214, 185, 19, 62, 225, 157, 76, 61, 248, 10, 78, 62, 21, 78, 32, 190, 85, 33, 215, 190, 109, 162, 140, 190, 217, 60, 99, 62, 225, 21, 246, 189, 0, 51, 113, 59, 191, 215, 201, 188, 14, 74, 122, 190, 198, 203, 18, 62, 102, 229, 218, 190, 23, 171, 123, 191, 4, 99, 171, 190, 51, 12, 89, 190, 205, 223, 168, 59, 27, 29, 94, 187, 127, 123, 35, 189, 231, 179, 249, 189, 231, 80, 94, 186, 221, 219, 227, 189, 81, 57, 45, 60, 198, 129, 16, 190, 7, 143, 44, 190, 48, 152, 195, 61, 189, 78, 180, 60, 139, 136, 222, 61, 226, 85, 1, 62, 187, 141, 116, 61, 139, 80, 175, 61, 127, 18, 242, 61, 130, 71, 36, 189, 56, 31, 19, 62, 77, 63, 54, 189, 46, 181, 54, 189, 66, 63, 42, 190, 121, 96, 23, 190, 131, 234, 16, 190, 112, 27, 42, 190, 124, 58, 224, 60, 250, 48, 127, 61, 5, 141, 216, 189, 47, 188, 50, 190, 139, 253, 37, 190, 79, 146, 138, 61, 252, 92, 41, 62, 82, 234, 11, 62, 71, 182, 132, 62, 35, 77, 33, 62, 121, 37, 144, 190, 42, 247, 125, 188, 10, 116, 34, 190, 3, 47, 137, 61, 235, 125, 194, 186, 90, 71, 107, 61, 46, 139, 141, 62, 153, 50, 151, 61, 16, 1, 161, 62, 222, 82, 37, 189, 24, 126, 71, 62, 167, 73, 38, 190, 87, 14, 130, 62, 140, 152, 120, 190, 199, 102, 227, 190, 65, 103, 19, 191, 86, 34, 111, 186, 195, 233, 132, 190, 175, 8, 70, 190, 162, 238, 9, 191, 17, 236, 126, 190, 232, 96, 217, 188, 104, 66, 124, 190, 133, 71, 152, 62, 161, 96, 133, 189, 238, 54, 182, 189, 131, 66, 192, 190, 235, 121, 185, 60, 0, 114, 4, 62, 216, 223, 60, 191, 57, 61, 90, 61, 50, 180, 124, 62, 187, 35, 150, 190, 179, 184, 155, 190, 141, 64, 101, 61, 118, 208, 125, 61, 167, 118, 167, 57, 18, 55, 115, 62, 10, 228, 3, 189, 139, 108, 224, 62, 166, 165, 20, 62, 154, 23, 9, 62, 48, 184, 239, 189, 45, 60, 144, 62, 198, 197, 129, 190, 7, 186, 96, 61, 231, 223, 220, 189, 77, 140, 14, 191, 190, 40, 208, 61, 173, 85, 54, 188, 214, 210, 171, 62, 248, 157, 68, 62, 182, 59, 128, 62, 84, 63, 168, 61, 246, 211, 192, 190, 126, 17, 134, 62, 214, 107, 150, 61, 24, 77, 26, 62, 95, 221, 231, 190, 64, 63, 53, 188, 69, 72, 188, 60, 200, 20, 11, 191, 205, 171, 171, 62, 205, 42, 42, 190, 169, 189, 92, 189, 11, 235, 222, 61, 158, 3, 25, 190, 250, 187, 143, 189, 226, 101, 17, 62, 36, 75, 154, 61, 10, 130, 168, 187, 163, 5, 193, 189, 192, 41, 114, 59, 219, 50, 52, 60, 245, 13, 255, 61, 61, 148, 12, 190, 69, 137, 189, 61, 178, 141, 11, 190, 153, 185, 216, 61, 210, 47, 27, 190, 61, 6, 137, 61, 244, 135, 5, 191, 222, 23, 195, 189, 243, 69, 75, 62, 143, 75, 124, 61, 196, 128, 25, 191, 10, 158, 98, 190, 186, 6, 115, 188, 118, 212, 167, 190, 13, 175, 184, 189, 105, 121, 195, 62, 255, 106, 160, 190, 137, 129, 23, 191, 103, 234, 139, 190, 152, 106, 81, 190, 79, 203, 42, 62, 58, 41, 60, 62, 33, 218, 52, 62, 68, 181, 171, 61, 220, 225, 128, 62, 229, 70, 117, 61, 64, 44, 86, 62, 144, 69, 228, 61, 30, 16, 103, 62, 122, 249, 133, 189, 206, 190, 81, 189, 5, 153, 37, 62, 37, 199, 110, 61, 72, 33, 250, 190, 7, 104, 152, 60, 124, 35, 0, 62, 114, 135, 22, 190, 161, 33, 80, 60, 136, 107, 167, 190, 145, 149, 133, 62, 99, 237, 176, 190, 132, 58, 135, 189, 211, 146, 46, 62, 167, 114, 244, 61, 40, 114, 159, 62, 227, 112, 162, 190, 246, 206, 237, 61, 30, 221, 132, 60, 244, 224, 203, 189, 214, 250, 64, 62, 121, 248, 46, 189, 206, 198, 142, 191, 53, 8, 32, 189, 130, 56, 18, 61, 214, 168, 71, 61, 151, 221, 104, 61, 183, 114, 5, 62, 57, 131, 188, 189, 68, 103, 159, 62, 170, 11, 0, 191, 226, 229, 16, 63, 218, 233, 179, 190, 76, 81, 209, 190, 147, 10, 128, 190, 253, 57, 6, 62, 46, 77, 28, 191, 29, 136, 182, 62, 148, 0, 161, 189, 141, 151, 42, 62, 102, 149, 89, 60, 34, 54, 197, 61, 133, 86, 142, 61, 109, 225, 198, 190, 114, 74, 227, 61, 145, 87, 136, 61, 86, 142, 106, 61, 238, 58, 83, 62, 42, 124, 48, 187, 130, 52, 227, 61, 103, 184, 158, 189, 9, 116, 19, 190, 126, 110, 128, 62, 33, 186, 164, 62, 210, 66, 124, 189, 254, 207, 176, 190, 35, 51, 25, 190, 214, 251, 10, 191, 187, 67, 92, 61, 148, 141, 193, 60, 207, 194, 38, 190, 153, 136, 73, 62, 240, 70, 166, 61, 250, 205, 72, 191, 221, 210, 143, 61, 0, 24, 137, 189, 147, 39, 149, 189, 47, 109, 153, 61, 17, 29, 41, 61, 222, 198, 59, 190, 48, 232, 253, 189, 33, 144, 159, 61, 82, 228, 156, 60, 132, 83, 202, 188, 168, 206, 151, 62, 138, 225, 192, 60, 73, 48, 155, 61, 33, 196, 193, 190, 216, 135, 255, 61, 232, 178, 21, 190, 233, 232, 26, 62, 159, 38, 99, 190, 19, 133, 255, 190, 198, 58, 140, 190, 206, 199, 197, 61, 196, 94, 132, 189, 54, 7, 188, 190, 231, 208, 193, 190, 186, 228, 220, 60, 169, 235, 168, 190, 230, 95, 22, 189, 216, 71, 175, 190, 151, 130, 174, 61, 31, 212, 244, 60, 1, 31, 64, 62, 253, 39, 143, 189, 185, 238, 182, 190, 26, 254, 241, 189, 107, 253, 233, 188, 78, 137, 142, 189, 136, 241, 10, 62, 114, 237, 205, 189, 220, 31, 109, 62, 105, 38, 216, 62, 132, 1, 7, 62, 69, 4, 146, 61, 150, 96, 205, 61, 143, 203, 217, 189, 205, 121, 63, 62, 253, 165, 189, 189, 87, 21, 168, 62, 245, 59, 160, 189, 159, 121, 195, 62, 228, 143, 151, 187, 161, 17, 230, 189, 182, 53, 236, 190, 171, 69, 208, 189, 128, 199, 220, 62, 75, 140, 173, 62, 42, 137, 167, 188, 218, 133, 20, 62, 130, 28, 95, 62, 252, 187, 92, 189, 213, 184, 159, 62, 218, 47, 25, 62, 13, 231, 252, 61, 0, 101, 56, 62, 188, 19, 4, 190, 7, 146, 126, 62, 122, 154, 235, 189, 60, 174, 74, 62, 56, 117, 132, 61, 235, 184, 175, 62, 63, 162, 164, 62, 240, 104, 13, 62, 100, 70, 91, 190, 158, 114, 85, 190, 5, 82, 147, 191, 124, 195, 35, 61, 51, 67, 53, 62, 124, 144, 44, 189, 171, 86, 47, 190, 241, 191, 222, 189, 246, 49, 120, 190, 210, 216, 140, 191, 69, 178, 190, 190, 46, 148, 6, 61, 162, 162, 79, 189, 76, 59, 224, 188, 98, 158, 99, 191, 230, 200, 19, 62, 84, 100, 8, 62, 238, 151, 9, 61, 14, 63, 134, 61, 95, 248, 182, 189, 148, 150, 246, 61, 223, 241, 203, 61, 250, 200, 111, 60, 146, 167, 45, 62, 67, 112, 67, 190, 49, 9, 181, 62, 179, 72, 149, 61, 254, 107, 9, 62, 167, 170, 20, 61, 18, 247, 61, 62, 152, 221, 8, 62, 226, 130, 107, 62, 178, 49, 169, 190, 44, 209, 113, 189, 45, 49, 134, 191, 23, 150, 41, 190, 181, 153, 164, 61, 150, 190, 27, 61, 114, 4, 74, 190, 128, 127, 12, 61, 20, 197, 134, 190, 97, 199, 145, 191, 160, 113, 200, 188, 63, 155, 143, 60, 37, 174, 182, 61, 218, 226, 37, 61, 17, 83, 236, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {158, 175, 179, 188, 15, 8, 115, 61, 33, 33, 203, 61, 238, 32, 84, 62, 75, 40, 195, 62, 218, 4, 158, 62, 24, 18, 39, 189, 114, 118, 54, 62, 0, 234, 63, 190, 144, 27, 193, 189, 150, 119, 192, 61, 10, 208, 192, 189, 31, 68, 68, 190, 122, 119, 85, 189, 184, 203, 49, 62, 46, 216, 143, 189, 61, 17, 71, 62, 133, 17, 69, 62, 238, 93, 223, 188, 182, 91, 78, 61, 182, 166, 11, 62, 123, 154, 111, 189, 27, 65, 52, 190, 164, 193, 250, 61, 120, 193, 25, 189, 123, 147, 62, 60, 137, 214, 213, 61, 62, 191, 31, 190, 78, 29, 102, 190, 107, 199, 16, 190, 42, 168, 116, 62, 127, 123, 113, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {108, 224, 93, 190, 226, 221, 237, 61, 54, 105, 42, 191, 221, 200, 169, 62, 25, 121, 20, 61, 189, 225, 5, 190, 14, 101, 37, 63, 107, 54, 208, 190, 25, 180, 30, 62, 114, 234, 13, 191, 99, 72, 63, 62, 115, 76, 109, 61, 145, 172, 20, 63, 15, 228, 204, 190, 104, 124, 35, 191, 202, 240, 225, 61, 87, 110, 80, 63, 193, 98, 99, 63, 62, 149, 94, 62, 38, 187, 197, 61, 213, 78, 221, 189, 182, 24, 0, 191, 190, 113, 51, 189, 91, 247, 118, 63, 67, 88, 195, 62, 195, 75, 237, 62, 146, 165, 44, 190, 146, 187, 219, 190, 133, 18, 255, 61, 90, 121, 11, 191, 189, 31, 17, 63, 100, 89, 202, 62, 24, 246, 143, 190, 137, 146, 172, 190, 19, 80, 68, 62, 71, 251, 5, 190, 103, 168, 144, 190, 169, 108, 165, 190, 151, 76, 223, 188, 252, 190, 109, 61, 184, 247, 241, 189, 151, 241, 135, 61, 20, 17, 209, 61, 45, 4, 47, 190, 131, 188, 87, 62, 234, 246, 123, 61, 216, 122, 198, 61, 66, 0, 32, 190, 29, 200, 201, 61, 80, 150, 113, 62, 213, 57, 104, 62, 232, 232, 230, 189, 223, 45, 20, 62, 53, 13, 11, 61, 215, 138, 172, 186, 215, 200, 253, 62, 224, 158, 99, 187, 234, 147, 122, 62, 83, 122, 101, 190, 99, 170, 4, 63, 74, 35, 147, 190, 68, 95, 161, 61, 29, 77, 169, 188, 217, 20, 22, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 194, 21, 189, 146, 83, 81, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {134, 122, 195, 191, 112, 151, 126, 191, 200, 41, 29, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {153, 20, 87, 63, 214, 86, 14, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0006/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}