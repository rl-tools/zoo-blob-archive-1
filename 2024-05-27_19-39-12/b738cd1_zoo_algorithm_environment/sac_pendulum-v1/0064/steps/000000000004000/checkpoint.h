// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 65, 1, 190, 251, 213, 194, 190, 76, 25, 190, 62, 103, 230, 88, 190, 66, 217, 106, 191, 160, 107, 193, 190, 253, 30, 65, 62, 214, 242, 30, 63, 160, 186, 221, 62, 86, 30, 248, 190, 204, 40, 188, 189, 104, 95, 93, 190, 72, 115, 159, 61, 19, 255, 55, 63, 180, 236, 25, 191, 24, 248, 36, 62, 90, 142, 125, 190, 173, 71, 91, 188, 51, 57, 4, 191, 152, 104, 14, 63, 51, 63, 169, 190, 137, 161, 77, 190, 123, 238, 103, 191, 153, 221, 144, 62, 90, 139, 16, 191, 195, 40, 2, 63, 183, 105, 7, 191, 98, 152, 237, 190, 117, 181, 217, 189, 200, 110, 173, 62, 97, 143, 78, 63, 43, 159, 71, 63, 223, 137, 202, 62, 131, 144, 209, 189, 67, 8, 49, 191, 246, 14, 249, 62, 224, 169, 38, 188, 161, 113, 35, 63, 25, 243, 66, 191, 3, 118, 41, 62, 224, 50, 44, 191, 8, 212, 2, 63, 251, 186, 97, 190, 8, 17, 225, 189, 184, 255, 48, 63, 48, 20, 14, 63, 62, 12, 62, 63, 84, 163, 25, 62, 170, 54, 255, 190, 194, 125, 27, 190, 247, 29, 194, 62, 192, 69, 126, 62, 136, 110, 74, 62, 197, 137, 245, 62, 110, 154, 88, 190, 51, 100, 167, 189, 82, 135, 166, 190, 246, 104, 210, 189, 235, 173, 179, 190, 240, 17, 6, 191, 227, 44, 232, 190, 228, 46, 76, 191, 6, 124, 30, 63, 166, 37, 205, 62, 124, 141, 25, 63, 1, 107, 9, 191, 144, 238, 144, 62, 97, 187, 197, 190, 169, 242, 39, 63, 127, 65, 75, 62, 102, 241, 167, 190, 39, 20, 32, 63, 172, 98, 52, 63, 111, 229, 239, 189, 22, 161, 27, 191, 214, 247, 135, 189, 251, 230, 251, 62, 161, 131, 120, 61, 248, 99, 145, 190, 10, 232, 22, 191, 150, 2, 81, 190, 93, 38, 52, 190, 82, 88, 186, 189, 42, 112, 33, 63, 239, 68, 224, 62, 69, 234, 170, 62, 110, 222, 175, 62, 113, 34, 17, 63, 222, 80, 228, 61, 170, 191, 155, 190, 213, 79, 255, 62, 111, 88, 166, 190, 154, 240, 5, 63, 21, 119, 252, 190, 252, 70, 94, 63, 208, 158, 143, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 113, 12, 191, 75, 45, 133, 62, 231, 175, 151, 190, 69, 208, 207, 190, 25, 15, 19, 61, 75, 38, 216, 190, 84, 103, 12, 191, 236, 93, 11, 190, 94, 103, 22, 191, 154, 60, 241, 190, 163, 52, 77, 191, 75, 69, 170, 61, 175, 7, 235, 61, 46, 178, 105, 62, 216, 220, 174, 61, 12, 130, 104, 62, 160, 149, 249, 190, 159, 117, 169, 60, 118, 177, 72, 191, 57, 141, 28, 191, 108, 210, 162, 62, 18, 186, 20, 61, 254, 40, 27, 63, 138, 45, 254, 61, 159, 195, 163, 61, 175, 179, 33, 63, 205, 62, 57, 63, 186, 103, 24, 62, 31, 116, 3, 191, 75, 102, 214, 61, 26, 99, 232, 62, 193, 78, 184, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 77, 182, 188, 162, 35, 226, 189, 212, 210, 90, 190, 221, 198, 20, 190, 71, 233, 112, 190, 204, 202, 24, 190, 195, 45, 70, 191, 130, 86, 131, 190, 19, 129, 188, 190, 192, 111, 122, 190, 132, 165, 83, 190, 179, 243, 150, 61, 70, 44, 116, 190, 188, 17, 131, 190, 92, 155, 71, 62, 89, 136, 216, 61, 191, 16, 147, 189, 137, 40, 208, 189, 134, 118, 95, 60, 11, 4, 128, 189, 55, 57, 130, 62, 116, 121, 123, 188, 216, 174, 217, 61, 7, 80, 32, 190, 38, 51, 45, 62, 119, 94, 234, 61, 152, 50, 65, 61, 254, 97, 48, 62, 100, 46, 164, 190, 26, 0, 158, 61, 195, 134, 18, 190, 219, 216, 121, 189, 16, 50, 36, 190, 63, 105, 175, 60, 102, 169, 202, 60, 220, 50, 47, 188, 251, 126, 61, 62, 133, 146, 194, 189, 81, 15, 8, 190, 217, 223, 175, 189, 81, 218, 240, 188, 199, 160, 157, 189, 4, 73, 122, 61, 253, 215, 40, 62, 31, 219, 15, 62, 152, 4, 205, 188, 144, 132, 76, 187, 77, 112, 242, 187, 192, 188, 134, 61, 122, 66, 227, 59, 215, 159, 255, 61, 209, 253, 194, 61, 171, 188, 255, 60, 62, 220, 39, 62, 85, 186, 214, 188, 176, 34, 17, 62, 81, 114, 8, 61, 145, 36, 120, 190, 186, 180, 112, 60, 57, 140, 72, 62, 169, 34, 149, 189, 191, 55, 141, 62, 236, 149, 61, 190, 141, 167, 113, 190, 163, 0, 137, 190, 110, 113, 93, 62, 95, 151, 122, 190, 244, 86, 113, 61, 26, 248, 209, 190, 182, 118, 205, 61, 234, 92, 36, 191, 211, 202, 162, 190, 224, 247, 80, 191, 84, 210, 89, 190, 29, 52, 100, 190, 48, 232, 114, 62, 244, 238, 195, 189, 145, 208, 198, 189, 166, 105, 63, 62, 99, 147, 6, 61, 143, 3, 8, 61, 117, 47, 205, 188, 216, 228, 101, 61, 164, 162, 92, 62, 181, 6, 127, 61, 180, 185, 0, 62, 164, 210, 40, 62, 106, 88, 30, 190, 160, 51, 200, 61, 198, 60, 249, 61, 55, 228, 79, 60, 166, 132, 231, 188, 112, 189, 132, 190, 248, 245, 117, 62, 190, 163, 5, 61, 60, 101, 191, 61, 208, 227, 229, 61, 212, 107, 33, 190, 34, 166, 154, 190, 109, 156, 215, 189, 152, 14, 111, 191, 89, 194, 35, 190, 52, 13, 100, 191, 240, 139, 129, 190, 32, 194, 123, 191, 112, 102, 69, 61, 141, 232, 64, 190, 12, 189, 84, 62, 2, 89, 204, 190, 24, 219, 137, 189, 38, 112, 241, 60, 196, 98, 139, 189, 116, 219, 65, 189, 199, 108, 117, 60, 206, 237, 65, 189, 94, 99, 4, 61, 36, 145, 248, 62, 61, 163, 192, 190, 209, 34, 73, 189, 187, 133, 119, 190, 212, 95, 181, 190, 162, 142, 162, 61, 43, 253, 6, 62, 44, 15, 186, 61, 191, 13, 115, 190, 3, 56, 247, 190, 102, 247, 39, 189, 138, 71, 28, 62, 80, 228, 219, 61, 74, 54, 227, 188, 119, 153, 130, 189, 165, 116, 140, 61, 109, 146, 55, 62, 87, 225, 16, 62, 207, 238, 159, 62, 98, 177, 91, 189, 164, 34, 8, 187, 172, 10, 106, 62, 62, 24, 49, 190, 214, 242, 234, 189, 93, 98, 90, 60, 178, 87, 159, 62, 2, 106, 83, 58, 146, 218, 33, 62, 8, 77, 127, 62, 141, 19, 123, 61, 189, 34, 53, 190, 4, 198, 164, 185, 142, 91, 233, 187, 96, 251, 27, 190, 80, 76, 60, 62, 50, 51, 95, 62, 27, 128, 132, 189, 70, 162, 130, 62, 218, 135, 73, 62, 228, 205, 123, 190, 25, 15, 47, 189, 55, 153, 50, 189, 105, 132, 37, 61, 112, 163, 1, 189, 167, 160, 60, 190, 142, 123, 28, 62, 226, 88, 235, 189, 24, 149, 0, 190, 89, 65, 203, 188, 247, 111, 103, 61, 153, 70, 147, 190, 75, 52, 149, 61, 201, 90, 162, 189, 178, 23, 50, 190, 106, 244, 185, 189, 89, 167, 176, 62, 241, 62, 24, 62, 48, 150, 126, 60, 239, 160, 106, 61, 65, 238, 31, 61, 63, 147, 166, 188, 114, 243, 171, 189, 74, 194, 57, 190, 196, 133, 3, 188, 190, 48, 202, 60, 103, 144, 37, 62, 233, 238, 55, 60, 166, 124, 105, 60, 254, 174, 13, 62, 130, 111, 240, 61, 117, 174, 101, 62, 167, 211, 194, 188, 4, 142, 130, 190, 201, 101, 26, 62, 207, 162, 21, 62, 110, 50, 6, 190, 188, 198, 212, 189, 90, 136, 186, 61, 130, 148, 50, 190, 205, 232, 214, 61, 84, 73, 13, 190, 97, 205, 133, 60, 204, 63, 166, 190, 72, 214, 12, 62, 148, 45, 182, 189, 128, 208, 7, 190, 23, 46, 26, 190, 133, 194, 149, 190, 22, 83, 145, 60, 245, 52, 208, 188, 108, 50, 25, 62, 225, 129, 71, 190, 121, 166, 120, 189, 190, 128, 134, 61, 35, 165, 94, 61, 59, 56, 119, 62, 183, 74, 191, 190, 167, 0, 120, 62, 253, 179, 220, 61, 97, 12, 226, 188, 159, 227, 136, 62, 106, 119, 205, 190, 120, 114, 141, 189, 245, 161, 33, 190, 87, 0, 205, 61, 103, 223, 95, 62, 242, 188, 104, 189, 17, 21, 215, 190, 230, 57, 244, 61, 92, 228, 15, 62, 25, 146, 78, 62, 113, 88, 138, 60, 195, 245, 130, 62, 31, 218, 103, 61, 26, 9, 60, 62, 28, 118, 129, 190, 131, 11, 123, 61, 250, 113, 126, 62, 199, 206, 0, 190, 93, 189, 134, 190, 3, 246, 217, 188, 230, 8, 242, 61, 130, 145, 211, 188, 151, 103, 212, 62, 148, 169, 150, 189, 198, 235, 172, 61, 9, 83, 179, 190, 112, 255, 35, 190, 244, 148, 145, 189, 168, 111, 74, 190, 145, 186, 9, 190, 43, 246, 73, 189, 217, 83, 62, 190, 188, 89, 221, 61, 65, 223, 150, 189, 242, 54, 85, 190, 62, 98, 168, 61, 157, 248, 50, 62, 24, 18, 134, 62, 29, 93, 71, 62, 115, 68, 254, 188, 224, 249, 48, 190, 50, 156, 145, 61, 186, 31, 96, 189, 140, 154, 72, 189, 105, 129, 114, 189, 142, 162, 42, 190, 151, 220, 25, 190, 120, 29, 178, 61, 110, 19, 245, 61, 33, 184, 14, 190, 150, 81, 48, 190, 1, 160, 203, 189, 84, 34, 40, 190, 146, 244, 235, 189, 155, 230, 11, 61, 217, 121, 245, 189, 43, 206, 27, 61, 36, 184, 178, 61, 85, 52, 3, 62, 212, 78, 196, 188, 80, 35, 97, 189, 173, 218, 6, 61, 15, 43, 4, 61, 25, 16, 238, 188, 102, 219, 36, 190, 140, 39, 140, 189, 129, 168, 152, 189, 18, 72, 32, 190, 53, 14, 156, 61, 106, 174, 216, 61, 103, 30, 45, 190, 100, 21, 134, 189, 86, 110, 16, 190, 148, 51, 76, 190, 69, 201, 215, 189, 15, 171, 129, 190, 108, 195, 24, 60, 84, 193, 54, 191, 19, 50, 137, 190, 91, 34, 10, 191, 74, 150, 137, 190, 7, 123, 141, 60, 160, 78, 131, 62, 145, 51, 57, 189, 245, 31, 211, 188, 136, 188, 32, 60, 2, 220, 18, 190, 218, 73, 111, 190, 151, 40, 157, 61, 36, 90, 204, 189, 130, 82, 102, 62, 213, 164, 170, 188, 156, 224, 85, 61, 2, 215, 17, 62, 178, 74, 187, 61, 122, 97, 189, 61, 55, 105, 1, 190, 129, 108, 30, 62, 165, 134, 146, 189, 242, 8, 64, 190, 176, 222, 74, 62, 222, 12, 223, 189, 127, 185, 210, 61, 150, 111, 35, 189, 252, 136, 20, 61, 61, 188, 236, 59, 90, 4, 148, 61, 227, 104, 130, 62, 46, 21, 242, 189, 58, 242, 146, 62, 23, 78, 175, 189, 58, 161, 254, 187, 134, 128, 15, 189, 160, 36, 61, 190, 127, 169, 42, 188, 82, 10, 228, 61, 96, 91, 16, 190, 12, 94, 102, 188, 102, 41, 148, 62, 153, 93, 73, 190, 92, 98, 40, 189, 21, 163, 252, 189, 138, 158, 84, 190, 151, 27, 119, 190, 173, 50, 136, 189, 141, 141, 239, 189, 137, 202, 4, 62, 57, 12, 175, 190, 58, 121, 24, 61, 9, 102, 84, 190, 12, 88, 167, 61, 32, 59, 165, 190, 126, 58, 180, 190, 130, 121, 10, 62, 206, 159, 101, 62, 235, 148, 123, 61, 84, 65, 219, 189, 52, 172, 219, 189, 177, 107, 72, 189, 150, 79, 12, 62, 176, 175, 4, 189, 219, 110, 210, 60, 116, 121, 230, 188, 212, 67, 47, 190, 185, 108, 0, 190, 111, 137, 35, 61, 136, 128, 224, 189, 195, 140, 109, 189, 107, 146, 206, 61, 8, 153, 61, 189, 37, 91, 138, 189, 76, 20, 18, 190, 22, 144, 40, 190, 182, 167, 11, 190, 200, 100, 44, 61, 206, 19, 205, 188, 138, 128, 200, 189, 111, 127, 2, 189, 153, 8, 13, 190, 141, 81, 203, 188, 244, 100, 6, 62, 32, 28, 235, 189, 177, 195, 61, 187, 11, 63, 149, 61, 100, 221, 108, 61, 111, 173, 234, 189, 96, 212, 203, 189, 245, 18, 117, 188, 12, 103, 251, 188, 150, 210, 75, 62, 235, 218, 28, 62, 230, 70, 147, 189, 182, 76, 93, 189, 188, 34, 156, 189, 175, 218, 219, 190, 233, 131, 51, 190, 110, 219, 14, 62, 117, 135, 191, 62, 21, 95, 124, 190, 162, 50, 63, 190, 172, 50, 248, 189, 0, 80, 156, 188, 16, 125, 78, 62, 6, 152, 8, 62, 75, 207, 22, 62, 10, 98, 18, 62, 84, 249, 108, 59, 170, 157, 28, 190, 230, 204, 249, 189, 134, 149, 165, 188, 217, 168, 173, 61, 253, 77, 16, 190, 3, 72, 71, 61, 84, 248, 99, 188, 231, 158, 139, 189, 226, 205, 154, 62, 73, 112, 208, 189, 194, 225, 67, 60, 148, 225, 177, 59, 55, 130, 159, 190, 165, 203, 239, 60, 85, 59, 214, 190, 60, 121, 89, 190, 77, 140, 123, 61, 140, 111, 242, 61, 16, 18, 173, 190, 233, 131, 97, 191, 212, 83, 155, 190, 116, 179, 193, 190, 209, 86, 224, 188, 126, 103, 246, 61, 199, 43, 1, 62, 113, 197, 31, 191, 200, 18, 79, 62, 162, 20, 177, 190, 223, 3, 199, 190, 26, 14, 82, 190, 104, 141, 205, 189, 27, 111, 4, 62, 239, 128, 207, 62, 57, 137, 75, 61, 247, 189, 90, 62, 13, 0, 188, 190, 45, 236, 39, 62, 159, 219, 119, 190, 164, 217, 189, 60, 177, 221, 255, 62, 125, 68, 153, 189, 71, 128, 158, 62, 129, 228, 141, 190, 202, 83, 10, 190, 195, 219, 251, 60, 54, 63, 49, 190, 156, 193, 6, 190, 96, 225, 129, 61, 142, 13, 194, 189, 215, 155, 203, 189, 254, 80, 251, 188, 30, 248, 3, 190, 131, 160, 29, 190, 100, 226, 33, 62, 190, 66, 139, 61, 198, 133, 40, 62, 193, 13, 2, 62, 191, 122, 48, 190, 212, 109, 184, 61, 39, 112, 24, 189, 145, 26, 113, 189, 227, 72, 147, 189, 74, 4, 206, 61, 144, 178, 232, 187, 205, 12, 24, 62, 55, 178, 252, 189, 196, 94, 47, 190, 160, 121, 179, 189, 63, 215, 7, 61, 24, 218, 37, 190, 246, 193, 9, 190, 77, 165, 94, 189, 140, 155, 201, 59, 66, 194, 44, 62, 210, 100, 237, 59, 84, 141, 14, 62, 37, 171, 36, 190, 111, 142, 32, 190, 78, 50, 37, 62, 150, 115, 135, 188, 187, 251, 139, 187, 236, 24, 224, 188, 239, 55, 22, 190, 79, 134, 7, 62, 88, 120, 49, 62, 166, 126, 193, 189, 212, 133, 234, 189, 149, 203, 252, 61, 36, 12, 156, 189, 9, 148, 33, 189, 254, 224, 177, 189, 26, 135, 82, 61, 44, 4, 249, 61, 16, 227, 199, 60, 11, 163, 217, 188, 156, 166, 215, 60, 43, 229, 16, 62, 128, 127, 52, 190, 26, 103, 217, 189, 235, 190, 193, 189, 68, 154, 90, 189, 89, 27, 170, 188, 21, 23, 36, 189, 118, 32, 16, 190, 191, 251, 117, 61, 113, 34, 111, 189, 61, 131, 252, 189, 29, 237, 162, 189, 56, 63, 196, 58, 83, 151, 113, 61, 114, 46, 152, 61, 187, 82, 142, 189, 141, 97, 55, 62, 209, 182, 22, 62, 67, 0, 50, 62, 203, 179, 217, 61, 148, 202, 175, 188, 157, 248, 19, 62, 230, 247, 127, 189, 62, 126, 12, 190, 85, 177, 1, 190, 152, 174, 160, 62, 220, 92, 37, 188, 78, 127, 146, 62, 198, 163, 1, 189, 25, 243, 87, 62, 94, 16, 9, 190, 169, 228, 95, 188, 173, 6, 135, 60, 205, 193, 11, 190, 233, 83, 253, 189, 182, 145, 62, 61, 110, 84, 33, 190, 250, 131, 1, 62, 222, 0, 115, 62, 179, 2, 188, 61, 77, 10, 90, 190, 129, 113, 71, 62, 162, 142, 49, 188, 80, 16, 152, 189, 77, 155, 160, 61, 250, 212, 51, 190, 223, 213, 225, 60, 166, 206, 169, 190, 52, 233, 8, 62, 138, 90, 120, 60, 241, 252, 181, 189, 173, 85, 32, 190, 239, 173, 34, 190, 36, 217, 52, 61, 212, 145, 69, 62, 172, 86, 184, 189, 243, 97, 14, 190, 45, 200, 24, 190, 116, 23, 204, 189, 48, 108, 159, 62, 134, 33, 159, 61, 78, 170, 119, 61, 33, 176, 29, 190, 33, 168, 139, 190, 216, 35, 3, 190, 113, 16, 108, 62, 234, 138, 194, 61, 72, 122, 200, 189, 33, 151, 13, 62, 182, 14, 123, 62, 188, 213, 247, 188, 110, 145, 215, 61, 12, 220, 79, 62, 167, 71, 144, 62, 122, 253, 165, 61, 112, 136, 42, 190, 53, 177, 14, 61, 92, 61, 158, 189, 6, 108, 94, 61, 25, 132, 137, 188, 179, 197, 112, 60, 112, 113, 227, 189, 34, 39, 105, 189, 41, 107, 3, 188, 98, 175, 251, 61, 214, 142, 80, 189, 25, 120, 238, 61, 143, 237, 182, 189, 203, 71, 109, 61, 220, 203, 206, 61, 9, 239, 196, 189, 142, 63, 0, 62, 18, 80, 207, 61, 65, 51, 4, 62, 118, 10, 202, 61, 196, 208, 255, 189, 156, 124, 243, 189, 183, 78, 110, 190, 29, 115, 192, 61, 167, 195, 167, 189, 44, 113, 75, 190, 232, 158, 155, 189, 175, 47, 226, 59, 88, 147, 0, 190, 23, 79, 128, 62, 168, 235, 129, 190, 172, 49, 99, 61, 131, 34, 192, 189, 228, 156, 250, 61, 152, 228, 129, 61, 235, 189, 230, 190, 24, 81, 149, 190, 29, 243, 134, 190, 206, 236, 51, 190, 179, 219, 229, 190, 15, 165, 29, 190, 224, 252, 1, 191, 58, 129, 183, 189, 135, 144, 170, 190, 72, 246, 151, 61, 60, 109, 150, 190, 170, 45, 219, 189, 153, 198, 46, 62, 194, 57, 117, 190, 181, 203, 236, 188, 13, 190, 36, 190, 162, 74, 101, 189, 250, 102, 189, 60, 145, 222, 152, 61, 55, 106, 149, 62, 99, 198, 124, 62, 72, 78, 147, 189, 51, 9, 193, 61, 149, 152, 173, 189, 34, 61, 22, 61, 136, 172, 156, 62, 34, 167, 143, 190, 36, 239, 172, 62, 58, 186, 53, 189, 202, 23, 26, 61, 232, 206, 65, 190, 252, 69, 154, 190, 79, 123, 148, 61, 94, 235, 159, 61, 38, 151, 55, 190, 215, 79, 193, 61, 242, 21, 146, 190, 217, 138, 144, 190, 178, 151, 49, 191, 194, 237, 239, 189, 226, 236, 22, 191, 86, 3, 197, 60, 245, 97, 206, 189, 153, 233, 51, 190, 115, 25, 173, 189, 0, 130, 101, 62, 178, 35, 214, 189, 139, 128, 18, 59, 249, 132, 194, 61, 55, 134, 162, 190, 228, 23, 179, 189, 53, 56, 34, 62, 147, 72, 57, 62, 237, 0, 247, 61, 212, 190, 34, 62, 70, 91, 156, 62, 234, 49, 69, 190, 121, 140, 88, 61, 48, 129, 10, 190, 77, 114, 180, 61, 160, 81, 72, 62, 233, 219, 158, 186, 177, 169, 194, 190, 141, 167, 78, 189, 208, 165, 168, 190, 119, 82, 248, 190, 52, 201, 116, 191, 76, 137, 0, 62, 219, 17, 43, 191, 248, 98, 1, 191, 7, 211, 147, 191, 100, 185, 10, 191, 220, 163, 226, 188, 69, 20, 101, 62, 201, 8, 23, 191, 219, 43, 227, 190, 30, 126, 15, 62, 152, 144, 116, 61, 50, 100, 143, 190, 89, 126, 136, 190, 132, 222, 250, 60, 214, 199, 79, 60, 93, 106, 192, 62, 114, 183, 151, 190, 169, 114, 89, 61, 188, 97, 137, 190, 198, 83, 71, 190, 125, 25, 76, 62, 6, 66, 68, 62, 53, 222, 166, 62, 201, 173, 189, 190, 100, 176, 91, 189, 200, 44, 15, 190, 5, 114, 148, 62, 230, 164, 223, 61, 41, 7, 229, 189, 80, 176, 4, 62, 65, 151, 81, 190, 162, 100, 108, 61, 58, 235, 253, 189, 241, 62, 114, 62, 37, 215, 81, 190, 32, 99, 140, 189, 187, 70, 218, 60, 161, 206, 174, 60, 99, 224, 252, 190, 81, 217, 46, 61, 174, 176, 91, 61, 191, 29, 138, 187, 168, 63, 47, 62, 221, 167, 118, 62, 222, 247, 187, 61, 67, 248, 92, 190, 169, 206, 188, 190, 187, 194, 207, 189, 127, 131, 72, 189, 192, 96, 103, 190, 196, 41, 188, 188, 210, 156, 210, 61, 222, 73, 161, 62, 220, 94, 112, 190, 29, 47, 95, 61, 40, 65, 13, 62, 87, 79, 249, 61, 19, 47, 240, 61, 49, 25, 25, 62, 19, 253, 214, 189, 141, 17, 167, 189, 88, 72, 202, 60, 119, 172, 123, 189, 78, 80, 52, 61, 158, 164, 227, 189, 244, 140, 96, 60, 127, 252, 44, 190, 188, 118, 23, 62, 22, 78, 30, 62, 132, 9, 38, 60, 91, 252, 181, 189, 76, 31, 132, 189, 90, 126, 166, 61, 226, 223, 22, 190, 65, 135, 236, 188, 249, 155, 34, 62, 134, 129, 95, 189, 121, 103, 67, 60, 137, 24, 129, 188, 19, 85, 61, 189, 221, 21, 0, 190, 94, 15, 70, 189, 241, 33, 0, 62, 9, 211, 236, 61, 72, 232, 215, 60, 196, 220, 31, 189, 185, 231, 239, 189, 201, 61, 22, 62, 221, 138, 226, 189, 74, 26, 22, 190, 65, 212, 180, 189, 209, 168, 197, 61, 12, 101, 77, 188, 42, 83, 5, 190, 18, 187, 5, 190, 247, 166, 195, 189, 73, 166, 180, 61, 120, 151, 87, 61, 225, 246, 106, 188, 28, 39, 170, 61, 64, 227, 48, 190, 210, 254, 245, 61, 190, 137, 149, 188, 134, 109, 114, 61, 169, 154, 168, 61, 156, 65, 34, 190, 251, 149, 227, 189, 132, 197, 171, 189, 191, 173, 177, 189, 108, 107, 217, 61, 148, 194, 246, 189, 96, 18, 182, 61, 114, 66, 35, 190, 23, 157, 154, 188, 246, 252, 51, 60, 95, 231, 46, 190, 228, 110, 151, 61, 176, 6, 236, 189, 221, 222, 132, 61, 8, 242, 135, 189, 123, 138, 48, 62, 101, 211, 19, 190, 78, 207, 161, 61, 226, 56, 31, 189, 11, 77, 43, 190, 114, 249, 130, 62, 100, 84, 246, 61, 151, 148, 214, 61, 231, 28, 238, 189, 162, 124, 143, 62, 230, 156, 140, 61, 183, 107, 236, 189, 244, 92, 66, 190, 126, 210, 157, 62, 76, 111, 152, 188, 75, 222, 10, 62, 19, 125, 21, 190, 28, 112, 145, 61, 97, 231, 219, 61, 13, 55, 136, 61, 11, 51, 68, 62, 90, 184, 87, 190, 47, 189, 14, 60, 16, 15, 112, 190, 146, 1, 0, 189, 106, 238, 28, 190, 99, 117, 202, 61, 136, 250, 10, 190, 152, 88, 184, 61, 114, 114, 158, 188, 2, 32, 85, 187, 62, 61, 81, 60, 95, 3, 137, 190, 194, 242, 215, 188, 86, 59, 212, 61, 46, 86, 196, 61, 192, 190, 88, 62, 132, 244, 156, 61, 44, 18, 217, 189, 191, 136, 136, 189, 63, 10, 187, 60, 204, 253, 193, 62, 246, 194, 34, 190, 147, 103, 95, 62, 49, 190, 26, 59, 20, 135, 16, 190, 22, 165, 152, 190, 138, 72, 196, 61, 123, 182, 208, 60, 94, 165, 141, 61, 227, 138, 189, 187, 125, 129, 138, 189, 126, 204, 17, 62, 7, 118, 245, 58, 46, 221, 195, 187, 53, 253, 7, 190, 25, 136, 158, 190, 45, 116, 144, 187, 40, 74, 190, 61, 35, 143, 18, 60, 225, 111, 157, 61, 170, 142, 241, 61, 111, 153, 36, 190, 169, 214, 52, 189, 219, 109, 204, 190, 30, 104, 142, 62, 84, 203, 92, 62, 153, 95, 56, 190, 246, 80, 221, 189, 100, 186, 223, 61, 153, 179, 3, 62, 212, 166, 20, 188, 188, 91, 50, 62, 96, 0, 139, 62, 89, 220, 106, 188, 102, 5, 21, 62, 114, 75, 28, 190, 142, 196, 140, 62, 46, 22, 146, 191, 138, 39, 145, 62, 88, 246, 130, 189, 102, 250, 34, 191, 92, 73, 114, 62, 122, 118, 53, 190, 90, 76, 243, 61, 224, 86, 167, 189, 165, 129, 144, 190, 183, 78, 84, 190, 170, 231, 96, 190, 246, 4, 13, 191, 45, 149, 53, 189, 197, 247, 245, 189, 106, 70, 148, 62, 64, 0, 240, 61, 177, 176, 155, 190, 125, 128, 166, 62, 175, 2, 206, 190, 255, 133, 241, 189, 222, 116, 132, 62, 173, 120, 128, 190, 163, 4, 168, 60, 151, 87, 134, 62, 254, 173, 231, 188, 253, 238, 179, 61, 165, 19, 137, 61, 147, 196, 52, 62, 243, 19, 75, 60, 151, 43, 62, 60, 111, 66, 6, 62, 10, 84, 31, 62, 181, 68, 109, 191, 30, 217, 73, 62, 134, 38, 4, 60, 246, 113, 5, 190, 171, 136, 186, 62, 17, 247, 97, 61, 38, 215, 3, 189, 82, 118, 180, 190, 85, 61, 26, 190, 34, 178, 78, 190, 193, 52, 131, 57, 146, 156, 191, 190, 91, 76, 17, 62, 129, 225, 48, 190, 115, 234, 19, 62, 119, 80, 33, 189, 81, 243, 104, 190, 127, 235, 60, 62, 210, 111, 68, 190, 24, 122, 103, 61, 197, 141, 168, 62, 148, 95, 20, 190, 18, 74, 78, 62, 50, 204, 2, 61, 36, 72, 13, 190, 226, 168, 75, 62, 58, 26, 50, 62, 90, 219, 222, 61, 43, 82, 3, 190, 202, 210, 134, 189, 208, 125, 180, 60, 232, 94, 146, 190, 51, 21, 122, 61, 13, 236, 56, 59, 189, 138, 189, 188, 209, 181, 153, 189, 16, 163, 20, 61, 160, 162, 10, 190, 116, 161, 52, 189, 94, 120, 2, 190, 33, 201, 179, 189, 23, 215, 102, 60, 35, 129, 203, 61, 3, 171, 74, 62, 164, 200, 209, 61, 196, 38, 121, 62, 35, 30, 196, 61, 81, 194, 242, 61, 126, 179, 228, 189, 3, 141, 89, 188, 159, 70, 154, 189, 44, 14, 161, 189, 119, 171, 36, 189, 148, 63, 37, 190, 118, 91, 4, 189, 47, 108, 228, 189, 195, 160, 241, 61, 180, 92, 105, 190, 209, 118, 74, 189, 91, 213, 66, 191, 100, 154, 103, 190, 139, 156, 8, 191, 149, 11, 146, 189, 70, 120, 149, 190, 208, 68, 101, 61, 51, 160, 96, 190, 61, 205, 202, 190, 128, 108, 38, 62, 143, 169, 108, 61, 207, 123, 12, 190, 157, 140, 220, 189, 196, 36, 136, 189, 22, 33, 80, 62, 157, 163, 226, 187, 213, 4, 83, 61, 166, 11, 189, 60, 42, 194, 213, 189, 236, 232, 143, 62, 162, 142, 46, 62, 244, 204, 68, 61, 100, 87, 73, 189, 63, 236, 3, 190, 12, 216, 53, 61, 8, 25, 86, 189, 229, 137, 146, 189, 203, 117, 32, 190, 116, 46, 2, 190, 226, 93, 162, 190, 149, 142, 182, 190, 112, 233, 185, 61, 129, 3, 11, 62, 39, 0, 111, 190, 152, 210, 236, 189, 153, 149, 228, 189, 234, 18, 7, 62, 111, 56, 26, 190, 181, 103, 243, 189, 57, 56, 254, 61, 85, 191, 37, 190, 200, 78, 190, 61, 131, 51, 229, 62, 121, 71, 135, 189, 22, 18, 203, 189, 170, 236, 223, 189, 176, 172, 7, 190, 233, 173, 10, 190, 46, 112, 143, 61, 156, 62, 86, 190, 182, 129, 167, 61, 7, 208, 28, 61, 11, 24, 221, 61, 98, 149, 92, 189, 171, 176, 87, 190, 206, 187, 210, 188, 237, 128, 88, 62, 254, 192, 158, 190, 37, 32, 64, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 11, 17, 62, 191, 1, 117, 62, 203, 120, 89, 188, 164, 255, 53, 62, 224, 82, 13, 61, 168, 120, 95, 62, 203, 0, 136, 190, 162, 139, 178, 62, 197, 162, 63, 189, 39, 152, 28, 62, 178, 199, 156, 60, 82, 226, 42, 61, 215, 182, 155, 61, 170, 45, 90, 61, 196, 109, 255, 189, 123, 138, 198, 189, 238, 33, 120, 62, 174, 121, 47, 61, 199, 80, 36, 190, 227, 206, 64, 62, 6, 0, 100, 62, 75, 55, 225, 61, 227, 98, 103, 62, 248, 21, 233, 189, 241, 36, 22, 190, 138, 254, 25, 190, 149, 90, 62, 62, 200, 17, 44, 62, 167, 219, 155, 62, 36, 65, 114, 62, 133, 22, 44, 62, 76, 52, 23, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 181, 185, 62, 8, 240, 189, 61, 115, 192, 131, 62, 145, 126, 74, 63, 151, 76, 162, 189, 150, 194, 22, 62, 183, 228, 20, 62, 94, 102, 158, 190, 121, 247, 18, 60, 231, 249, 158, 62, 3, 121, 22, 63, 193, 232, 112, 60, 194, 84, 22, 190, 25, 11, 0, 63, 98, 253, 22, 62, 92, 97, 28, 62, 13, 178, 6, 190, 87, 231, 191, 190, 111, 47, 141, 61, 193, 23, 25, 63, 124, 51, 206, 61, 23, 224, 74, 63, 90, 60, 157, 190, 100, 225, 11, 190, 233, 16, 209, 61, 239, 110, 15, 62, 199, 64, 65, 190, 30, 163, 90, 191, 99, 145, 27, 191, 117, 245, 51, 61, 108, 245, 159, 62, 207, 94, 184, 190, 52, 41, 135, 61, 191, 25, 56, 189, 156, 188, 63, 190, 37, 114, 176, 61, 159, 219, 76, 190, 126, 95, 154, 190, 139, 238, 139, 62, 3, 158, 36, 189, 135, 166, 103, 188, 108, 189, 255, 189, 171, 91, 133, 61, 2, 5, 236, 61, 159, 176, 144, 62, 239, 225, 33, 62, 151, 189, 194, 60, 144, 189, 174, 60, 67, 213, 245, 189, 132, 101, 164, 57, 6, 55, 164, 61, 155, 117, 6, 62, 195, 39, 26, 191, 37, 78, 76, 62, 69, 210, 157, 60, 152, 129, 228, 188, 179, 249, 16, 188, 29, 253, 179, 62, 24, 53, 146, 190, 157, 249, 181, 62, 69, 253, 97, 189, 168, 48, 76, 190, 108, 13, 74, 190, 4, 103, 142, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 68, 31, 190, 192, 220, 141, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {208, 20, 15, 63, 213, 252, 177, 190, 193, 188, 187, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {170, 65, 135, 62, 122, 246, 180, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0064/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}