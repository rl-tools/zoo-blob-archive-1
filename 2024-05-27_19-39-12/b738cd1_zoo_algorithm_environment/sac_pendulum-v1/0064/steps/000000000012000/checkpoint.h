// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 41, 249, 61, 215, 24, 251, 190, 173, 84, 150, 62, 116, 69, 180, 188, 68, 133, 181, 191, 91, 27, 181, 190, 124, 205, 9, 61, 178, 218, 103, 63, 160, 251, 188, 62, 73, 94, 5, 190, 206, 87, 139, 191, 98, 72, 135, 190, 89, 199, 97, 62, 115, 69, 39, 63, 112, 17, 244, 190, 24, 248, 36, 62, 90, 142, 125, 190, 173, 71, 91, 188, 138, 187, 17, 191, 72, 218, 150, 61, 212, 126, 146, 190, 247, 142, 204, 189, 94, 44, 180, 191, 224, 7, 88, 189, 118, 10, 1, 191, 58, 146, 144, 190, 128, 227, 13, 191, 235, 81, 3, 191, 120, 1, 58, 63, 80, 32, 115, 62, 123, 244, 105, 63, 165, 173, 166, 63, 197, 207, 180, 62, 150, 188, 157, 61, 127, 210, 78, 191, 203, 187, 124, 62, 91, 111, 10, 190, 199, 14, 124, 62, 37, 58, 55, 191, 80, 221, 73, 189, 93, 53, 230, 190, 248, 148, 23, 63, 61, 237, 65, 191, 243, 207, 153, 63, 50, 20, 191, 62, 246, 7, 24, 63, 128, 80, 76, 63, 180, 236, 10, 62, 203, 97, 246, 190, 213, 30, 167, 61, 201, 174, 223, 62, 232, 136, 186, 62, 132, 160, 3, 63, 177, 190, 243, 62, 122, 73, 6, 63, 104, 226, 206, 60, 26, 138, 137, 190, 190, 146, 32, 62, 34, 181, 46, 191, 18, 216, 241, 190, 146, 13, 4, 191, 204, 42, 7, 191, 219, 87, 33, 63, 49, 33, 7, 63, 68, 148, 213, 62, 106, 158, 0, 191, 194, 197, 193, 62, 37, 47, 199, 189, 224, 196, 21, 63, 203, 222, 220, 61, 190, 10, 195, 189, 65, 115, 29, 63, 194, 250, 111, 63, 4, 246, 15, 191, 23, 183, 19, 191, 0, 225, 163, 190, 132, 184, 15, 63, 171, 124, 52, 61, 183, 26, 129, 190, 67, 70, 94, 191, 235, 37, 44, 190, 203, 181, 170, 190, 8, 208, 24, 63, 235, 28, 16, 63, 188, 26, 30, 63, 153, 31, 57, 63, 248, 161, 144, 62, 143, 100, 96, 63, 19, 241, 170, 190, 97, 101, 134, 190, 17, 79, 8, 63, 123, 41, 109, 61, 155, 98, 24, 63, 124, 253, 114, 191, 124, 96, 85, 63, 225, 108, 133, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 54, 62, 191, 27, 80, 87, 61, 2, 161, 8, 190, 52, 190, 141, 190, 37, 10, 130, 189, 75, 38, 216, 190, 150, 247, 25, 191, 179, 251, 133, 62, 226, 41, 32, 191, 135, 38, 72, 190, 227, 129, 37, 191, 179, 218, 28, 62, 244, 132, 214, 189, 44, 145, 86, 62, 83, 43, 110, 62, 255, 155, 28, 62, 244, 170, 205, 190, 170, 59, 133, 61, 63, 138, 144, 191, 240, 120, 61, 191, 241, 94, 244, 62, 187, 148, 104, 60, 115, 150, 41, 63, 130, 10, 53, 62, 13, 115, 136, 188, 99, 233, 43, 63, 218, 69, 51, 63, 159, 29, 246, 61, 111, 10, 200, 190, 68, 230, 180, 187, 214, 250, 164, 62, 168, 180, 35, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 189, 86, 190, 15, 153, 93, 190, 21, 173, 38, 190, 235, 161, 51, 191, 43, 151, 140, 60, 204, 202, 24, 190, 247, 5, 31, 191, 33, 203, 151, 190, 183, 14, 14, 190, 162, 93, 92, 190, 59, 147, 133, 190, 23, 144, 86, 61, 168, 69, 237, 188, 212, 187, 111, 190, 37, 234, 174, 62, 89, 219, 56, 62, 187, 125, 85, 189, 241, 11, 179, 189, 253, 172, 199, 62, 46, 183, 32, 62, 212, 25, 151, 62, 77, 94, 7, 62, 136, 139, 201, 61, 183, 117, 247, 189, 52, 219, 47, 62, 112, 50, 160, 62, 59, 176, 44, 187, 237, 165, 130, 62, 93, 109, 177, 190, 160, 143, 145, 61, 212, 224, 23, 190, 82, 160, 45, 62, 64, 180, 227, 190, 90, 245, 192, 188, 82, 179, 134, 190, 127, 101, 69, 190, 63, 50, 37, 62, 133, 146, 194, 189, 133, 10, 247, 189, 182, 59, 198, 189, 208, 31, 188, 189, 88, 109, 57, 190, 10, 250, 170, 189, 200, 2, 129, 62, 118, 222, 135, 61, 109, 244, 222, 61, 104, 216, 68, 190, 228, 54, 2, 189, 146, 1, 57, 190, 246, 20, 151, 188, 84, 59, 3, 63, 147, 252, 246, 60, 173, 87, 56, 61, 99, 29, 244, 61, 45, 173, 213, 60, 34, 196, 6, 62, 80, 174, 34, 61, 251, 3, 229, 190, 180, 138, 113, 189, 120, 88, 90, 189, 226, 202, 47, 190, 165, 189, 162, 62, 112, 227, 15, 190, 75, 192, 50, 191, 144, 108, 201, 190, 64, 135, 125, 62, 36, 138, 240, 189, 84, 110, 96, 191, 17, 31, 163, 190, 182, 118, 205, 61, 215, 232, 234, 190, 192, 8, 165, 190, 137, 207, 104, 191, 154, 230, 255, 189, 85, 17, 180, 190, 65, 40, 72, 62, 208, 202, 125, 189, 219, 108, 171, 189, 169, 1, 161, 62, 41, 79, 179, 61, 23, 235, 216, 61, 191, 54, 46, 189, 0, 154, 182, 62, 5, 22, 39, 62, 81, 54, 42, 61, 238, 229, 58, 62, 9, 154, 28, 62, 74, 77, 38, 190, 79, 234, 19, 62, 247, 208, 141, 62, 6, 139, 8, 188, 174, 225, 247, 60, 214, 59, 155, 190, 65, 49, 122, 62, 6, 199, 136, 60, 227, 133, 145, 62, 49, 194, 225, 186, 37, 49, 196, 190, 30, 236, 154, 190, 4, 113, 40, 191, 57, 127, 137, 191, 89, 194, 35, 190, 247, 32, 83, 191, 118, 161, 158, 190, 130, 186, 156, 191, 99, 186, 170, 61, 248, 52, 162, 190, 202, 3, 47, 62, 26, 56, 232, 190, 63, 36, 162, 189, 132, 205, 18, 61, 246, 175, 46, 190, 204, 188, 66, 188, 2, 104, 219, 187, 206, 237, 65, 189, 156, 197, 219, 59, 246, 85, 243, 62, 90, 169, 58, 191, 100, 30, 154, 189, 47, 34, 131, 190, 82, 77, 228, 190, 188, 76, 5, 62, 67, 26, 187, 61, 41, 139, 197, 61, 75, 75, 157, 190, 110, 138, 41, 191, 43, 188, 132, 189, 66, 117, 141, 62, 240, 219, 243, 61, 113, 84, 112, 190, 118, 253, 31, 190, 216, 34, 171, 60, 51, 103, 52, 62, 87, 225, 16, 62, 171, 68, 109, 62, 79, 62, 254, 188, 155, 64, 219, 187, 98, 216, 241, 61, 176, 141, 32, 190, 22, 199, 3, 190, 178, 66, 207, 58, 1, 93, 143, 62, 73, 78, 172, 189, 233, 251, 120, 62, 202, 207, 162, 61, 48, 218, 168, 61, 210, 236, 96, 190, 111, 196, 19, 190, 212, 28, 6, 189, 209, 184, 35, 190, 94, 159, 94, 62, 252, 178, 81, 62, 183, 227, 234, 189, 12, 236, 177, 62, 93, 72, 61, 62, 252, 170, 161, 190, 20, 195, 9, 61, 9, 32, 193, 189, 186, 61, 152, 61, 70, 139, 140, 185, 158, 149, 99, 190, 149, 191, 165, 61, 239, 102, 99, 190, 201, 174, 134, 190, 79, 176, 230, 60, 247, 111, 103, 61, 82, 151, 148, 190, 253, 249, 149, 61, 144, 233, 153, 189, 47, 164, 67, 190, 10, 177, 24, 191, 238, 130, 162, 62, 107, 96, 32, 62, 29, 154, 194, 60, 220, 72, 196, 187, 217, 51, 92, 61, 117, 103, 36, 189, 140, 101, 213, 189, 60, 127, 92, 62, 100, 92, 63, 189, 223, 113, 129, 188, 37, 206, 73, 62, 103, 66, 7, 60, 152, 249, 10, 188, 115, 210, 64, 62, 7, 103, 4, 62, 201, 226, 76, 62, 233, 88, 176, 189, 212, 11, 211, 190, 95, 205, 82, 62, 162, 52, 30, 62, 222, 133, 58, 190, 55, 173, 147, 190, 172, 1, 38, 62, 247, 66, 61, 190, 191, 152, 255, 60, 135, 212, 237, 189, 97, 205, 133, 60, 140, 157, 68, 190, 252, 107, 169, 62, 10, 169, 133, 189, 48, 39, 55, 190, 65, 3, 222, 190, 212, 83, 96, 62, 82, 44, 251, 60, 124, 42, 205, 62, 181, 125, 145, 61, 1, 209, 195, 190, 7, 222, 72, 190, 50, 66, 113, 190, 150, 34, 171, 62, 45, 251, 129, 62, 230, 88, 128, 61, 12, 39, 126, 62, 0, 119, 113, 62, 62, 255, 105, 189, 161, 207, 176, 62, 148, 196, 11, 191, 17, 231, 88, 189, 165, 134, 70, 190, 222, 173, 236, 189, 102, 64, 154, 62, 151, 246, 134, 188, 70, 58, 32, 191, 151, 187, 84, 190, 168, 68, 65, 190, 59, 158, 16, 61, 89, 52, 12, 188, 114, 229, 128, 62, 31, 218, 103, 61, 228, 175, 82, 62, 17, 254, 69, 191, 243, 106, 206, 61, 151, 181, 70, 62, 0, 67, 146, 189, 2, 181, 156, 190, 57, 25, 182, 188, 223, 10, 134, 61, 228, 100, 50, 190, 214, 199, 224, 62, 125, 18, 42, 190, 113, 250, 144, 61, 107, 108, 14, 191, 177, 12, 150, 190, 198, 172, 26, 190, 70, 157, 83, 190, 221, 33, 247, 189, 156, 177, 149, 189, 172, 19, 132, 190, 21, 47, 83, 62, 83, 211, 254, 189, 246, 151, 153, 190, 35, 220, 210, 61, 3, 55, 212, 61, 152, 48, 143, 62, 95, 205, 171, 62, 115, 68, 254, 188, 224, 249, 48, 190, 50, 156, 145, 61, 186, 31, 96, 189, 140, 154, 72, 189, 105, 129, 114, 189, 142, 162, 42, 190, 151, 220, 25, 190, 120, 29, 178, 61, 110, 19, 245, 61, 33, 184, 14, 190, 150, 81, 48, 190, 1, 160, 203, 189, 84, 34, 40, 190, 146, 244, 235, 189, 155, 230, 11, 61, 217, 121, 245, 189, 43, 206, 27, 61, 36, 184, 178, 61, 85, 52, 3, 62, 212, 78, 196, 188, 80, 35, 97, 189, 173, 218, 6, 61, 15, 43, 4, 61, 25, 16, 238, 188, 102, 219, 36, 190, 140, 39, 140, 189, 129, 168, 152, 189, 18, 72, 32, 190, 53, 14, 156, 61, 106, 174, 216, 61, 103, 30, 45, 190, 249, 75, 185, 189, 49, 16, 142, 189, 69, 105, 191, 190, 30, 242, 101, 191, 146, 150, 102, 190, 108, 195, 24, 60, 178, 44, 26, 191, 223, 104, 191, 189, 117, 25, 38, 191, 105, 162, 134, 190, 204, 188, 182, 190, 48, 45, 157, 62, 141, 209, 235, 187, 78, 127, 111, 61, 122, 176, 132, 188, 39, 189, 66, 190, 123, 243, 95, 190, 215, 77, 59, 60, 109, 115, 3, 190, 207, 225, 221, 61, 116, 128, 18, 189, 70, 78, 142, 61, 10, 141, 28, 62, 253, 143, 189, 61, 87, 70, 57, 62, 23, 15, 253, 189, 96, 2, 128, 62, 222, 110, 241, 189, 234, 166, 242, 190, 132, 85, 117, 62, 75, 183, 162, 189, 234, 81, 246, 188, 14, 186, 91, 189, 178, 31, 41, 190, 24, 109, 158, 190, 248, 12, 172, 190, 204, 228, 203, 62, 46, 21, 242, 189, 18, 197, 239, 61, 10, 223, 171, 190, 85, 244, 11, 190, 135, 244, 106, 191, 208, 199, 73, 190, 68, 236, 158, 189, 181, 166, 95, 62, 182, 27, 166, 190, 139, 231, 39, 191, 174, 253, 173, 62, 7, 11, 167, 190, 118, 162, 57, 190, 81, 50, 138, 190, 253, 27, 207, 190, 162, 53, 161, 190, 222, 1, 35, 61, 116, 14, 7, 191, 191, 76, 20, 190, 238, 29, 14, 191, 219, 162, 226, 61, 149, 34, 148, 190, 181, 103, 29, 191, 180, 119, 69, 190, 21, 148, 93, 191, 227, 195, 139, 190, 60, 47, 166, 62, 235, 148, 123, 61, 84, 65, 219, 189, 143, 175, 219, 189, 177, 107, 72, 189, 76, 52, 223, 61, 176, 175, 4, 189, 219, 110, 210, 60, 116, 121, 230, 188, 212, 67, 47, 190, 185, 108, 0, 190, 71, 18, 13, 61, 136, 128, 224, 189, 60, 208, 178, 189, 107, 146, 206, 61, 137, 80, 62, 189, 60, 219, 191, 189, 76, 20, 18, 190, 22, 242, 40, 190, 182, 167, 11, 190, 200, 100, 44, 61, 206, 19, 205, 188, 16, 85, 252, 189, 159, 42, 15, 189, 153, 8, 13, 190, 22, 50, 75, 189, 95, 0, 217, 61, 101, 245, 5, 190, 177, 195, 61, 187, 60, 255, 145, 61, 216, 125, 0, 61, 180, 14, 238, 189, 93, 98, 215, 189, 62, 86, 157, 62, 63, 21, 51, 61, 99, 227, 250, 61, 49, 44, 132, 62, 85, 139, 133, 62, 182, 76, 93, 189, 41, 248, 37, 61, 194, 159, 146, 190, 55, 204, 251, 186, 39, 36, 36, 59, 94, 179, 16, 63, 162, 131, 94, 189, 44, 88, 197, 61, 159, 240, 73, 189, 151, 185, 131, 190, 209, 205, 68, 62, 197, 212, 13, 62, 48, 0, 44, 62, 10, 98, 18, 62, 254, 216, 211, 188, 212, 80, 238, 189, 87, 37, 127, 61, 215, 48, 3, 189, 244, 170, 236, 61, 173, 72, 156, 190, 236, 0, 146, 190, 179, 183, 228, 190, 207, 105, 23, 190, 230, 148, 229, 62, 149, 6, 173, 189, 254, 90, 110, 61, 30, 97, 8, 191, 55, 130, 159, 190, 105, 8, 211, 61, 14, 207, 24, 191, 82, 76, 223, 189, 54, 185, 193, 61, 140, 111, 242, 61, 129, 163, 50, 190, 186, 214, 158, 191, 218, 73, 82, 190, 41, 148, 69, 191, 84, 243, 7, 190, 239, 90, 160, 60, 119, 231, 32, 62, 94, 182, 12, 191, 247, 206, 32, 62, 246, 89, 188, 190, 54, 32, 50, 191, 59, 188, 113, 190, 200, 0, 109, 62, 70, 192, 139, 62, 74, 111, 232, 62, 180, 139, 144, 61, 72, 154, 145, 62, 32, 217, 169, 190, 164, 155, 125, 62, 9, 26, 214, 190, 242, 218, 171, 60, 97, 50, 253, 62, 77, 31, 97, 190, 241, 171, 204, 62, 198, 121, 193, 189, 178, 43, 241, 190, 195, 219, 251, 60, 54, 63, 49, 190, 115, 6, 7, 190, 96, 225, 129, 61, 151, 254, 195, 189, 215, 155, 203, 189, 254, 80, 251, 188, 30, 248, 3, 190, 131, 160, 29, 190, 52, 59, 31, 62, 190, 66, 139, 61, 198, 133, 40, 62, 4, 108, 248, 61, 191, 122, 48, 190, 35, 97, 151, 61, 39, 112, 24, 189, 106, 34, 113, 189, 227, 72, 147, 189, 74, 4, 206, 61, 144, 178, 232, 187, 54, 175, 15, 62, 55, 178, 252, 189, 106, 220, 48, 190, 160, 121, 179, 189, 63, 215, 7, 61, 59, 160, 55, 190, 143, 242, 20, 190, 181, 6, 120, 189, 140, 155, 201, 59, 66, 194, 44, 62, 210, 100, 237, 59, 11, 104, 231, 61, 37, 171, 36, 190, 111, 142, 32, 190, 78, 50, 37, 62, 150, 115, 135, 188, 187, 251, 139, 187, 236, 24, 224, 188, 239, 55, 22, 190, 79, 134, 7, 62, 88, 120, 49, 62, 166, 126, 193, 189, 212, 133, 234, 189, 149, 203, 252, 61, 36, 12, 156, 189, 9, 148, 33, 189, 254, 224, 177, 189, 26, 135, 82, 61, 44, 4, 249, 61, 16, 227, 199, 60, 11, 163, 217, 188, 156, 166, 215, 60, 43, 229, 16, 62, 128, 127, 52, 190, 26, 103, 217, 189, 235, 190, 193, 189, 68, 154, 90, 189, 89, 27, 170, 188, 21, 23, 36, 189, 118, 32, 16, 190, 191, 251, 117, 61, 113, 34, 111, 189, 61, 131, 252, 189, 29, 237, 162, 189, 216, 132, 177, 61, 125, 61, 246, 60, 45, 188, 133, 186, 100, 151, 229, 60, 79, 62, 24, 62, 209, 182, 22, 62, 154, 57, 11, 61, 33, 29, 126, 62, 196, 50, 217, 188, 99, 101, 103, 61, 194, 230, 188, 59, 229, 126, 5, 190, 181, 173, 8, 190, 186, 61, 157, 62, 4, 240, 174, 189, 237, 134, 168, 62, 135, 25, 30, 190, 103, 92, 129, 62, 235, 95, 171, 190, 21, 45, 3, 189, 34, 205, 49, 60, 164, 99, 13, 190, 76, 125, 165, 189, 84, 9, 131, 61, 138, 52, 11, 190, 110, 184, 224, 61, 27, 165, 146, 62, 225, 196, 85, 61, 112, 66, 227, 189, 143, 0, 116, 62, 119, 13, 19, 61, 91, 150, 19, 190, 40, 224, 108, 62, 98, 247, 110, 190, 76, 169, 83, 189, 210, 220, 38, 190, 6, 111, 55, 62, 138, 90, 120, 60, 144, 197, 12, 189, 3, 186, 102, 190, 185, 79, 115, 189, 232, 132, 152, 189, 163, 33, 188, 62, 78, 181, 174, 188, 159, 51, 168, 189, 148, 235, 177, 189, 24, 77, 154, 190, 251, 246, 157, 62, 66, 30, 214, 60, 179, 166, 243, 61, 211, 185, 206, 190, 23, 109, 133, 190, 172, 174, 230, 189, 159, 79, 151, 62, 234, 27, 36, 62, 208, 184, 58, 189, 163, 71, 102, 62, 1, 144, 161, 61, 175, 89, 55, 189, 228, 93, 139, 61, 21, 1, 177, 62, 119, 166, 185, 62, 172, 11, 44, 62, 233, 47, 206, 190, 15, 205, 128, 188, 171, 229, 181, 190, 125, 0, 138, 60, 22, 11, 60, 190, 92, 156, 11, 62, 112, 113, 227, 189, 238, 95, 162, 61, 180, 105, 59, 190, 116, 106, 79, 62, 29, 2, 14, 191, 199, 188, 102, 62, 192, 88, 143, 190, 79, 139, 181, 61, 53, 162, 156, 189, 36, 78, 26, 190, 122, 68, 152, 62, 129, 69, 158, 189, 184, 102, 12, 62, 109, 70, 165, 190, 241, 84, 201, 190, 17, 192, 246, 190, 187, 250, 158, 188, 117, 38, 65, 61, 19, 7, 19, 190, 17, 4, 129, 190, 219, 236, 245, 61, 18, 154, 127, 189, 3, 146, 165, 190, 121, 56, 147, 62, 236, 177, 21, 190, 121, 179, 2, 61, 53, 146, 82, 62, 4, 60, 77, 189, 206, 14, 142, 62, 85, 238, 229, 190, 130, 135, 145, 191, 29, 27, 106, 190, 206, 236, 51, 190, 29, 32, 40, 190, 150, 179, 168, 189, 117, 146, 237, 190, 139, 172, 15, 187, 160, 192, 5, 191, 21, 237, 138, 61, 167, 22, 91, 190, 232, 43, 165, 189, 7, 65, 49, 62, 169, 225, 188, 190, 36, 118, 201, 60, 106, 147, 73, 190, 189, 30, 164, 62, 47, 237, 87, 62, 215, 168, 148, 61, 71, 166, 154, 62, 114, 164, 117, 62, 95, 102, 153, 189, 49, 150, 97, 62, 41, 189, 223, 189, 32, 166, 37, 62, 165, 211, 157, 62, 50, 94, 207, 190, 200, 88, 213, 62, 74, 89, 69, 189, 1, 52, 155, 189, 50, 32, 27, 190, 66, 170, 148, 191, 45, 191, 56, 190, 184, 112, 169, 61, 237, 75, 96, 190, 215, 79, 193, 61, 207, 124, 41, 190, 105, 87, 38, 191, 213, 31, 186, 190, 13, 170, 129, 190, 85, 37, 90, 191, 148, 78, 246, 59, 137, 100, 20, 190, 103, 90, 68, 190, 6, 224, 143, 190, 245, 211, 140, 62, 150, 155, 160, 190, 74, 151, 81, 61, 88, 134, 13, 63, 173, 2, 32, 190, 249, 136, 63, 190, 54, 134, 47, 62, 157, 144, 87, 62, 253, 92, 243, 61, 56, 212, 151, 62, 246, 118, 67, 62, 20, 106, 158, 190, 24, 23, 236, 189, 195, 4, 109, 190, 43, 208, 45, 62, 66, 70, 128, 62, 198, 95, 158, 190, 32, 233, 165, 190, 103, 7, 14, 188, 151, 236, 2, 191, 170, 0, 132, 191, 66, 64, 152, 190, 76, 137, 0, 62, 169, 92, 51, 191, 180, 81, 180, 190, 83, 135, 146, 191, 214, 77, 76, 191, 199, 111, 184, 188, 115, 137, 81, 62, 192, 229, 13, 190, 78, 191, 192, 190, 107, 59, 151, 189, 12, 86, 89, 61, 212, 7, 222, 190, 38, 236, 224, 190, 132, 222, 250, 60, 200, 140, 190, 189, 237, 54, 215, 62, 23, 202, 75, 62, 134, 213, 30, 190, 208, 183, 238, 190, 3, 70, 6, 61, 37, 168, 77, 62, 204, 207, 78, 62, 145, 210, 5, 62, 164, 63, 185, 190, 255, 157, 49, 190, 159, 6, 208, 190, 249, 144, 170, 62, 247, 13, 68, 190, 141, 182, 162, 190, 196, 74, 221, 189, 47, 18, 127, 190, 24, 82, 111, 61, 58, 235, 253, 189, 32, 74, 156, 62, 88, 245, 250, 190, 182, 220, 138, 188, 133, 161, 160, 62, 211, 101, 150, 190, 67, 158, 30, 191, 120, 118, 62, 61, 157, 60, 157, 189, 33, 47, 70, 188, 239, 16, 170, 60, 12, 73, 199, 62, 206, 221, 75, 189, 120, 217, 252, 190, 150, 127, 9, 191, 210, 195, 54, 190, 133, 42, 118, 189, 187, 104, 130, 190, 246, 196, 34, 190, 232, 115, 40, 61, 75, 177, 168, 62, 201, 63, 160, 190, 15, 85, 231, 61, 87, 98, 3, 190, 51, 109, 53, 61, 245, 40, 27, 61, 137, 52, 168, 62, 19, 253, 214, 189, 141, 17, 167, 189, 88, 72, 202, 60, 119, 172, 123, 189, 78, 80, 52, 61, 158, 164, 227, 189, 244, 140, 96, 60, 127, 252, 44, 190, 188, 118, 23, 62, 22, 78, 30, 62, 132, 9, 38, 60, 91, 252, 181, 189, 76, 31, 132, 189, 90, 126, 166, 61, 226, 223, 22, 190, 65, 135, 236, 188, 249, 155, 34, 62, 134, 129, 95, 189, 121, 103, 67, 60, 137, 24, 129, 188, 19, 85, 61, 189, 221, 21, 0, 190, 94, 15, 70, 189, 241, 33, 0, 62, 9, 211, 236, 61, 72, 232, 215, 60, 196, 220, 31, 189, 185, 231, 239, 189, 201, 61, 22, 62, 221, 138, 226, 189, 74, 26, 22, 190, 65, 212, 180, 189, 209, 168, 197, 61, 12, 101, 77, 188, 42, 83, 5, 190, 18, 187, 5, 190, 247, 166, 195, 189, 73, 166, 180, 61, 120, 151, 87, 61, 225, 246, 106, 188, 28, 39, 170, 61, 64, 227, 48, 190, 210, 254, 245, 61, 190, 137, 149, 188, 134, 109, 114, 61, 169, 154, 168, 61, 156, 65, 34, 190, 251, 149, 227, 189, 132, 197, 171, 189, 191, 173, 177, 189, 108, 107, 217, 61, 148, 194, 246, 189, 96, 18, 182, 61, 114, 66, 35, 190, 23, 157, 154, 188, 246, 252, 51, 60, 95, 231, 46, 190, 228, 110, 151, 61, 176, 6, 236, 189, 221, 222, 132, 61, 8, 242, 135, 189, 123, 138, 48, 62, 101, 211, 19, 190, 78, 207, 161, 61, 28, 42, 78, 189, 187, 132, 29, 189, 241, 239, 159, 62, 23, 242, 136, 62, 23, 219, 247, 61, 231, 28, 238, 189, 203, 146, 93, 62, 123, 165, 10, 63, 92, 233, 13, 190, 126, 228, 3, 191, 193, 217, 2, 63, 151, 129, 159, 188, 31, 90, 255, 61, 108, 223, 196, 190, 147, 121, 54, 188, 120, 40, 147, 62, 52, 189, 15, 190, 193, 239, 40, 62, 30, 246, 225, 190, 123, 195, 4, 188, 113, 123, 235, 190, 178, 0, 7, 189, 51, 246, 148, 190, 59, 121, 94, 189, 38, 145, 169, 190, 129, 210, 105, 62, 43, 112, 19, 61, 209, 119, 38, 190, 28, 235, 248, 61, 109, 64, 34, 191, 82, 57, 20, 190, 20, 170, 143, 62, 56, 168, 38, 62, 150, 140, 108, 62, 244, 49, 131, 60, 150, 211, 172, 189, 98, 198, 122, 189, 63, 10, 187, 60, 174, 238, 132, 62, 63, 178, 195, 188, 218, 72, 96, 62, 181, 136, 192, 189, 61, 83, 164, 189, 225, 83, 154, 190, 167, 117, 236, 61, 191, 16, 193, 60, 234, 193, 142, 59, 51, 35, 141, 61, 52, 193, 87, 190, 63, 83, 73, 62, 231, 240, 246, 189, 1, 203, 158, 187, 90, 2, 16, 190, 215, 138, 142, 190, 156, 40, 94, 61, 194, 135, 238, 61, 176, 11, 218, 61, 65, 135, 155, 61, 92, 29, 92, 62, 254, 74, 80, 190, 163, 140, 134, 61, 250, 113, 136, 190, 50, 63, 183, 62, 95, 184, 241, 61, 189, 176, 178, 189, 17, 174, 104, 189, 119, 134, 8, 190, 13, 108, 59, 62, 213, 49, 46, 187, 188, 91, 50, 62, 175, 203, 98, 62, 144, 250, 123, 62, 50, 213, 27, 62, 109, 226, 18, 190, 78, 124, 65, 63, 134, 107, 64, 191, 174, 232, 155, 62, 113, 129, 196, 62, 156, 222, 188, 191, 187, 19, 101, 62, 136, 40, 36, 62, 248, 155, 56, 62, 223, 188, 228, 190, 7, 37, 162, 190, 99, 170, 153, 62, 80, 240, 81, 190, 249, 181, 239, 190, 250, 117, 224, 61, 113, 25, 10, 190, 170, 189, 127, 62, 86, 4, 59, 62, 162, 61, 29, 191, 50, 195, 13, 63, 179, 170, 216, 190, 162, 79, 10, 189, 181, 205, 69, 62, 74, 158, 128, 190, 229, 183, 87, 61, 232, 142, 91, 190, 58, 181, 11, 59, 196, 108, 3, 61, 165, 19, 137, 61, 69, 40, 252, 61, 137, 11, 240, 62, 194, 166, 233, 187, 18, 68, 154, 62, 35, 136, 143, 190, 37, 146, 62, 191, 244, 247, 50, 62, 114, 153, 5, 61, 156, 40, 170, 190, 187, 37, 102, 62, 74, 205, 71, 62, 10, 98, 109, 190, 111, 48, 51, 191, 254, 111, 102, 190, 27, 45, 242, 188, 48, 37, 69, 189, 200, 53, 214, 190, 178, 226, 34, 59, 151, 97, 110, 190, 77, 229, 19, 62, 70, 169, 61, 61, 137, 149, 195, 190, 62, 205, 140, 190, 225, 177, 136, 190, 170, 194, 143, 189, 167, 68, 218, 62, 90, 32, 79, 190, 138, 103, 202, 61, 189, 136, 24, 190, 180, 101, 146, 190, 83, 63, 98, 62, 58, 26, 50, 62, 198, 2, 22, 61, 222, 110, 138, 189, 86, 254, 173, 189, 146, 18, 106, 187, 66, 48, 125, 191, 22, 209, 194, 61, 67, 250, 138, 188, 113, 6, 88, 61, 109, 99, 242, 189, 94, 249, 234, 61, 138, 149, 62, 190, 79, 83, 18, 189, 185, 190, 106, 62, 219, 187, 37, 190, 106, 154, 242, 60, 154, 26, 236, 61, 52, 28, 139, 62, 133, 114, 2, 62, 185, 97, 144, 62, 3, 44, 14, 62, 59, 237, 230, 61, 253, 152, 32, 190, 222, 199, 100, 190, 228, 21, 151, 188, 93, 167, 105, 58, 51, 249, 205, 189, 99, 26, 138, 190, 59, 53, 208, 61, 221, 146, 104, 191, 151, 116, 231, 190, 63, 84, 166, 190, 209, 118, 74, 189, 163, 166, 67, 191, 223, 117, 141, 60, 35, 224, 94, 191, 160, 180, 93, 190, 160, 108, 39, 191, 157, 157, 132, 62, 113, 232, 128, 190, 254, 85, 48, 190, 11, 219, 39, 62, 88, 199, 207, 60, 84, 13, 230, 190, 30, 75, 19, 190, 154, 253, 50, 191, 110, 176, 219, 61, 27, 128, 153, 189, 50, 8, 253, 188, 85, 73, 146, 61, 253, 187, 140, 189, 14, 167, 201, 62, 141, 187, 49, 62, 77, 136, 55, 62, 21, 184, 62, 190, 1, 132, 207, 190, 20, 60, 8, 62, 99, 247, 36, 61, 243, 244, 78, 190, 203, 117, 32, 190, 94, 131, 59, 190, 234, 89, 18, 61, 33, 179, 148, 190, 5, 203, 224, 61, 129, 3, 11, 62, 164, 127, 154, 190, 182, 73, 45, 63, 168, 11, 31, 190, 40, 143, 54, 62, 16, 29, 197, 62, 128, 15, 242, 188, 32, 2, 11, 62, 37, 177, 154, 190, 228, 127, 135, 191, 88, 157, 221, 62, 121, 71, 135, 189, 144, 186, 178, 189, 10, 101, 14, 191, 53, 226, 113, 190, 14, 119, 137, 190, 110, 74, 203, 61, 15, 38, 57, 190, 30, 218, 243, 188, 123, 120, 47, 61, 227, 181, 217, 61, 123, 33, 209, 189, 29, 16, 54, 190, 5, 74, 188, 62, 52, 5, 95, 62, 180, 247, 185, 190, 35, 129, 160, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 169, 82, 62, 108, 124, 10, 62, 248, 129, 125, 61, 50, 48, 28, 62, 108, 179, 184, 61, 6, 1, 97, 62, 157, 13, 162, 190, 243, 190, 195, 62, 197, 162, 63, 189, 106, 143, 105, 62, 9, 178, 232, 60, 46, 101, 126, 60, 15, 182, 26, 190, 112, 245, 154, 189, 243, 241, 15, 190, 123, 138, 198, 189, 103, 74, 147, 62, 231, 228, 152, 187, 56, 193, 82, 189, 108, 9, 103, 62, 129, 183, 250, 61, 217, 85, 164, 61, 30, 141, 57, 62, 248, 21, 233, 189, 241, 36, 22, 190, 1, 187, 120, 189, 141, 182, 152, 62, 165, 121, 87, 62, 194, 101, 185, 62, 90, 179, 150, 62, 128, 132, 139, 62, 86, 92, 35, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 202, 206, 62, 192, 27, 30, 62, 101, 26, 156, 62, 223, 112, 78, 63, 245, 213, 197, 189, 144, 72, 231, 61, 215, 108, 159, 62, 116, 131, 241, 190, 121, 247, 18, 60, 108, 97, 234, 62, 139, 14, 174, 63, 125, 218, 235, 188, 255, 63, 83, 190, 228, 145, 89, 63, 104, 117, 22, 62, 92, 97, 28, 62, 110, 134, 180, 189, 96, 208, 222, 190, 131, 198, 137, 62, 223, 227, 51, 63, 83, 232, 13, 189, 29, 145, 61, 63, 28, 133, 237, 190, 100, 225, 11, 190, 233, 16, 209, 61, 222, 175, 108, 63, 22, 221, 188, 189, 9, 55, 131, 191, 240, 226, 73, 191, 101, 4, 120, 61, 126, 27, 19, 63, 173, 192, 2, 191, 75, 221, 4, 190, 187, 19, 58, 190, 254, 81, 92, 61, 171, 7, 63, 62, 139, 98, 53, 190, 220, 132, 177, 190, 197, 203, 164, 62, 20, 181, 162, 189, 135, 166, 103, 188, 244, 225, 42, 62, 4, 112, 67, 62, 138, 154, 215, 61, 108, 211, 18, 63, 35, 169, 176, 62, 9, 98, 197, 60, 144, 189, 174, 60, 172, 79, 48, 190, 55, 158, 221, 189, 204, 17, 11, 63, 162, 0, 215, 62, 87, 175, 133, 191, 147, 194, 46, 61, 251, 234, 207, 188, 152, 129, 228, 188, 179, 249, 16, 188, 107, 42, 108, 62, 47, 183, 117, 190, 253, 36, 3, 63, 184, 63, 96, 187, 181, 67, 137, 190, 223, 10, 150, 189, 28, 118, 19, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 10, 60, 190, 165, 207, 225, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {218, 108, 196, 62, 88, 234, 160, 62, 249, 14, 215, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {233, 205, 243, 190, 201, 203, 158, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0064/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}