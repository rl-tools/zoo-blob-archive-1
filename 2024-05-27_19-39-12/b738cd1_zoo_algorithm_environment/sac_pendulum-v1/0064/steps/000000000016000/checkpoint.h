// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 228, 184, 61, 242, 161, 236, 190, 128, 78, 174, 62, 83, 3, 157, 61, 88, 24, 193, 191, 33, 8, 158, 190, 36, 52, 28, 61, 119, 32, 136, 63, 123, 231, 192, 62, 138, 77, 8, 190, 128, 193, 158, 191, 100, 197, 143, 190, 38, 142, 113, 62, 194, 91, 31, 63, 117, 149, 214, 190, 24, 248, 36, 62, 90, 142, 125, 190, 173, 71, 91, 188, 67, 242, 35, 191, 66, 41, 25, 61, 213, 0, 134, 190, 136, 176, 15, 189, 168, 143, 185, 191, 204, 38, 217, 187, 241, 85, 235, 190, 162, 107, 111, 190, 102, 22, 17, 191, 34, 119, 4, 191, 92, 130, 63, 63, 32, 223, 136, 62, 150, 14, 112, 63, 56, 165, 170, 63, 29, 117, 191, 62, 239, 104, 40, 62, 101, 26, 73, 191, 152, 152, 37, 62, 171, 25, 245, 189, 107, 130, 149, 62, 226, 19, 47, 191, 27, 206, 169, 189, 59, 157, 236, 190, 219, 157, 24, 63, 2, 10, 98, 191, 57, 236, 169, 63, 197, 182, 176, 62, 211, 109, 17, 63, 210, 213, 94, 63, 251, 65, 27, 62, 9, 246, 31, 191, 51, 36, 9, 62, 39, 2, 173, 62, 224, 121, 167, 62, 178, 25, 46, 63, 76, 65, 214, 62, 119, 4, 23, 63, 151, 196, 234, 188, 193, 220, 135, 190, 86, 3, 12, 62, 173, 60, 49, 191, 173, 193, 237, 190, 29, 206, 17, 191, 178, 84, 0, 191, 243, 241, 33, 63, 40, 89, 7, 63, 30, 107, 198, 62, 77, 110, 247, 190, 203, 251, 196, 62, 59, 195, 162, 189, 43, 174, 13, 63, 242, 253, 196, 61, 180, 118, 57, 189, 24, 72, 23, 63, 86, 25, 117, 63, 115, 89, 30, 191, 155, 104, 21, 191, 170, 251, 197, 190, 241, 28, 13, 63, 251, 134, 7, 61, 234, 212, 133, 190, 12, 180, 117, 191, 66, 133, 70, 190, 54, 26, 211, 190, 57, 9, 60, 63, 165, 123, 11, 63, 70, 178, 32, 63, 74, 202, 76, 63, 234, 180, 136, 62, 224, 71, 112, 63, 104, 39, 211, 190, 193, 122, 108, 190, 104, 48, 6, 63, 201, 2, 203, 61, 84, 150, 12, 63, 60, 75, 128, 191, 41, 140, 68, 63, 54, 37, 159, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 130, 62, 191, 181, 187, 202, 61, 247, 253, 215, 189, 98, 132, 136, 190, 112, 207, 55, 189, 75, 38, 216, 190, 221, 116, 22, 191, 148, 167, 165, 62, 207, 150, 18, 191, 28, 151, 2, 190, 192, 69, 30, 191, 222, 255, 90, 62, 106, 43, 203, 189, 212, 28, 29, 62, 161, 177, 136, 62, 192, 45, 243, 61, 168, 80, 11, 191, 95, 146, 23, 61, 111, 196, 148, 191, 175, 29, 72, 191, 172, 241, 9, 63, 41, 35, 73, 188, 234, 136, 39, 63, 47, 117, 20, 62, 65, 214, 2, 189, 49, 211, 45, 63, 22, 249, 49, 63, 178, 122, 164, 61, 2, 166, 197, 190, 186, 151, 180, 185, 80, 92, 139, 62, 206, 248, 57, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 12, 176, 190, 5, 7, 200, 189, 227, 255, 8, 190, 219, 186, 94, 191, 84, 27, 7, 61, 204, 202, 24, 190, 229, 247, 11, 191, 184, 4, 165, 190, 191, 69, 220, 189, 250, 125, 50, 190, 78, 178, 128, 190, 226, 74, 180, 60, 55, 211, 23, 188, 159, 241, 129, 190, 62, 177, 202, 62, 224, 124, 57, 62, 206, 34, 149, 189, 217, 17, 187, 189, 53, 246, 245, 62, 240, 215, 53, 62, 164, 176, 146, 62, 218, 159, 9, 62, 101, 37, 181, 61, 209, 126, 6, 190, 92, 198, 66, 62, 216, 174, 168, 62, 55, 245, 24, 60, 200, 144, 138, 62, 26, 255, 172, 190, 39, 144, 162, 61, 166, 147, 31, 190, 174, 98, 74, 62, 15, 46, 185, 190, 158, 155, 140, 189, 176, 74, 240, 190, 185, 172, 154, 190, 56, 113, 87, 62, 133, 146, 194, 189, 128, 19, 33, 189, 194, 111, 255, 189, 232, 133, 34, 189, 251, 108, 204, 190, 122, 85, 17, 190, 74, 41, 132, 62, 151, 149, 218, 61, 60, 180, 53, 62, 81, 184, 245, 190, 77, 208, 44, 189, 8, 79, 107, 190, 118, 64, 137, 60, 235, 182, 29, 63, 78, 22, 48, 61, 151, 30, 233, 61, 85, 178, 9, 62, 91, 210, 78, 61, 107, 254, 67, 62, 61, 136, 69, 61, 226, 206, 229, 190, 238, 4, 183, 189, 54, 50, 166, 187, 165, 61, 88, 190, 123, 164, 160, 62, 219, 250, 206, 189, 85, 125, 57, 191, 38, 150, 203, 190, 129, 124, 146, 62, 2, 153, 158, 189, 27, 169, 183, 191, 205, 251, 157, 190, 182, 118, 205, 61, 250, 5, 10, 191, 0, 12, 152, 190, 28, 226, 112, 191, 4, 214, 161, 189, 204, 57, 183, 190, 236, 176, 102, 62, 189, 11, 100, 189, 102, 244, 169, 188, 52, 129, 197, 62, 89, 153, 206, 61, 83, 202, 247, 61, 113, 8, 91, 188, 231, 155, 199, 62, 153, 196, 0, 61, 100, 131, 225, 61, 62, 154, 44, 62, 148, 135, 51, 62, 133, 102, 216, 189, 95, 175, 10, 62, 200, 238, 158, 62, 247, 122, 38, 187, 88, 13, 151, 61, 252, 20, 158, 190, 113, 125, 110, 62, 200, 80, 69, 61, 213, 116, 179, 62, 173, 155, 67, 189, 37, 60, 129, 190, 197, 124, 157, 190, 126, 35, 53, 191, 178, 37, 141, 191, 89, 194, 35, 190, 2, 173, 98, 191, 138, 93, 151, 190, 77, 138, 167, 191, 14, 96, 251, 61, 31, 89, 177, 190, 239, 19, 50, 62, 243, 92, 2, 191, 179, 67, 149, 189, 124, 251, 108, 61, 219, 194, 75, 190, 29, 253, 155, 188, 31, 190, 80, 187, 206, 237, 65, 189, 156, 197, 219, 59, 89, 34, 247, 62, 254, 91, 67, 191, 125, 65, 133, 189, 156, 121, 128, 190, 82, 77, 228, 190, 235, 57, 46, 62, 60, 89, 39, 62, 115, 48, 199, 61, 231, 181, 182, 190, 34, 135, 156, 190, 245, 239, 112, 189, 239, 28, 170, 62, 79, 169, 186, 61, 159, 215, 142, 190, 139, 66, 50, 190, 215, 96, 35, 61, 231, 176, 60, 62, 87, 225, 16, 62, 233, 149, 86, 62, 165, 175, 122, 58, 118, 89, 68, 188, 72, 147, 212, 61, 115, 96, 17, 190, 231, 225, 4, 190, 80, 229, 106, 60, 236, 189, 146, 62, 20, 132, 241, 189, 124, 168, 119, 62, 115, 61, 73, 61, 68, 237, 130, 61, 38, 151, 60, 190, 68, 85, 51, 190, 163, 161, 99, 188, 88, 196, 30, 190, 23, 52, 86, 62, 3, 97, 71, 62, 77, 83, 6, 190, 172, 0, 186, 62, 83, 103, 83, 62, 211, 135, 166, 190, 0, 84, 110, 61, 8, 91, 229, 189, 181, 192, 101, 61, 180, 220, 140, 58, 167, 88, 130, 190, 22, 177, 137, 61, 120, 242, 187, 190, 21, 59, 160, 190, 171, 130, 50, 61, 247, 111, 103, 61, 38, 134, 130, 190, 218, 83, 159, 61, 142, 244, 126, 189, 42, 46, 155, 190, 49, 166, 21, 191, 140, 142, 150, 62, 136, 80, 34, 62, 101, 131, 212, 60, 207, 55, 190, 189, 175, 250, 141, 61, 77, 156, 7, 190, 31, 187, 179, 189, 198, 160, 146, 62, 162, 99, 123, 189, 8, 19, 128, 186, 20, 189, 63, 62, 53, 48, 65, 60, 227, 101, 161, 188, 236, 208, 57, 62, 19, 25, 20, 62, 82, 59, 80, 62, 25, 144, 250, 189, 205, 165, 201, 190, 230, 110, 80, 62, 9, 60, 39, 62, 154, 234, 72, 190, 91, 248, 147, 190, 240, 192, 255, 61, 222, 205, 132, 190, 153, 18, 194, 189, 219, 176, 219, 189, 97, 205, 133, 60, 31, 205, 21, 190, 156, 142, 137, 62, 38, 72, 54, 189, 219, 176, 39, 190, 28, 198, 85, 191, 17, 25, 81, 62, 148, 143, 15, 61, 99, 221, 195, 62, 201, 103, 154, 60, 31, 149, 231, 190, 22, 171, 129, 190, 75, 131, 133, 190, 151, 68, 206, 62, 254, 216, 120, 62, 72, 114, 5, 61, 232, 191, 120, 62, 211, 65, 118, 62, 120, 71, 153, 189, 79, 214, 178, 62, 68, 77, 15, 191, 198, 135, 189, 189, 147, 18, 86, 190, 233, 192, 194, 190, 137, 208, 151, 62, 8, 12, 112, 187, 95, 68, 30, 191, 222, 169, 102, 190, 121, 37, 87, 190, 159, 135, 170, 60, 113, 176, 119, 61, 234, 69, 126, 62, 31, 218, 103, 61, 139, 192, 95, 62, 35, 177, 18, 191, 66, 75, 225, 61, 130, 43, 41, 62, 110, 253, 77, 189, 212, 107, 103, 190, 133, 122, 197, 188, 232, 145, 141, 61, 110, 252, 100, 190, 80, 212, 241, 62, 20, 180, 75, 190, 142, 3, 175, 61, 97, 22, 46, 191, 84, 79, 162, 190, 9, 151, 48, 190, 64, 150, 71, 190, 50, 198, 157, 189, 30, 251, 137, 189, 120, 236, 128, 190, 174, 108, 108, 62, 220, 168, 149, 189, 239, 36, 166, 190, 168, 146, 251, 61, 14, 155, 247, 61, 77, 175, 160, 62, 132, 221, 182, 62, 115, 68, 254, 188, 224, 249, 48, 190, 50, 156, 145, 61, 186, 31, 96, 189, 140, 154, 72, 189, 105, 129, 114, 189, 142, 162, 42, 190, 151, 220, 25, 190, 120, 29, 178, 61, 110, 19, 245, 61, 33, 184, 14, 190, 150, 81, 48, 190, 1, 160, 203, 189, 84, 34, 40, 190, 146, 244, 235, 189, 155, 230, 11, 61, 217, 121, 245, 189, 43, 206, 27, 61, 36, 184, 178, 61, 85, 52, 3, 62, 212, 78, 196, 188, 80, 35, 97, 189, 173, 218, 6, 61, 15, 43, 4, 61, 25, 16, 238, 188, 102, 219, 36, 190, 140, 39, 140, 189, 129, 168, 152, 189, 18, 72, 32, 190, 53, 14, 156, 61, 106, 174, 216, 61, 103, 30, 45, 190, 211, 184, 126, 189, 208, 116, 54, 190, 132, 91, 2, 191, 238, 71, 169, 191, 192, 81, 78, 190, 108, 195, 24, 60, 207, 175, 26, 191, 75, 179, 10, 190, 182, 249, 31, 191, 91, 20, 103, 190, 177, 218, 199, 190, 245, 113, 156, 62, 181, 195, 132, 59, 85, 32, 148, 61, 61, 206, 106, 189, 36, 146, 47, 190, 214, 245, 125, 190, 171, 150, 21, 61, 150, 74, 59, 189, 187, 152, 192, 189, 246, 85, 233, 188, 213, 23, 150, 61, 174, 80, 46, 62, 241, 36, 249, 61, 40, 72, 75, 62, 168, 92, 225, 189, 207, 79, 112, 62, 57, 86, 238, 189, 177, 75, 2, 191, 135, 171, 129, 62, 188, 244, 65, 189, 165, 199, 89, 189, 14, 186, 91, 189, 20, 229, 136, 189, 179, 73, 183, 190, 247, 183, 129, 190, 98, 88, 178, 62, 46, 21, 242, 189, 44, 253, 171, 61, 179, 38, 201, 190, 180, 102, 47, 190, 11, 236, 130, 191, 138, 141, 92, 190, 68, 236, 158, 189, 84, 134, 44, 62, 182, 27, 166, 190, 240, 131, 62, 191, 116, 155, 162, 62, 7, 11, 167, 190, 91, 105, 90, 190, 212, 8, 134, 190, 90, 176, 159, 190, 162, 53, 161, 190, 246, 162, 216, 187, 30, 200, 8, 191, 191, 76, 20, 190, 141, 223, 20, 191, 50, 46, 40, 61, 116, 128, 178, 190, 48, 81, 34, 191, 129, 29, 97, 190, 223, 171, 101, 191, 227, 195, 139, 190, 65, 76, 130, 62, 235, 148, 123, 61, 84, 65, 219, 189, 143, 175, 219, 189, 177, 107, 72, 189, 76, 52, 223, 61, 176, 175, 4, 189, 219, 110, 210, 60, 116, 121, 230, 188, 212, 67, 47, 190, 185, 108, 0, 190, 71, 18, 13, 61, 136, 128, 224, 189, 60, 208, 178, 189, 107, 146, 206, 61, 137, 80, 62, 189, 60, 219, 191, 189, 76, 20, 18, 190, 22, 242, 40, 190, 182, 167, 11, 190, 200, 100, 44, 61, 206, 19, 205, 188, 16, 85, 252, 189, 159, 42, 15, 189, 153, 8, 13, 190, 22, 50, 75, 189, 95, 0, 217, 61, 101, 245, 5, 190, 177, 195, 61, 187, 60, 255, 145, 61, 216, 125, 0, 61, 180, 14, 238, 189, 93, 98, 215, 189, 57, 96, 240, 62, 133, 247, 182, 190, 18, 55, 5, 62, 44, 0, 62, 62, 200, 59, 226, 62, 182, 76, 93, 189, 194, 176, 144, 189, 203, 233, 79, 190, 67, 202, 128, 189, 51, 239, 46, 190, 21, 12, 41, 63, 178, 12, 151, 188, 19, 106, 230, 61, 240, 61, 138, 189, 3, 87, 183, 190, 105, 190, 137, 62, 0, 151, 32, 62, 170, 200, 79, 62, 173, 202, 79, 61, 9, 100, 229, 189, 12, 94, 11, 190, 251, 238, 31, 62, 107, 19, 140, 187, 92, 12, 162, 61, 53, 33, 215, 190, 71, 77, 94, 190, 136, 221, 44, 191, 161, 164, 97, 190, 219, 150, 6, 63, 146, 233, 245, 189, 139, 161, 155, 61, 92, 133, 18, 191, 55, 130, 159, 190, 159, 180, 5, 62, 136, 71, 49, 191, 237, 65, 30, 190, 251, 173, 240, 61, 140, 111, 242, 61, 228, 188, 37, 190, 243, 86, 153, 191, 36, 54, 62, 190, 41, 148, 69, 191, 35, 100, 115, 190, 68, 38, 53, 62, 171, 80, 54, 62, 2, 218, 10, 191, 14, 88, 241, 189, 204, 111, 190, 190, 54, 32, 50, 191, 217, 68, 154, 190, 145, 123, 147, 62, 179, 86, 143, 62, 72, 220, 246, 62, 164, 0, 187, 61, 44, 25, 143, 62, 131, 9, 207, 190, 194, 232, 144, 62, 1, 252, 210, 190, 20, 244, 50, 61, 97, 50, 253, 62, 137, 121, 162, 190, 175, 179, 225, 62, 27, 116, 169, 189, 130, 229, 247, 190, 195, 219, 251, 60, 54, 63, 49, 190, 10, 133, 22, 190, 96, 225, 129, 61, 41, 160, 206, 189, 215, 155, 203, 189, 133, 141, 238, 188, 30, 248, 3, 190, 131, 160, 29, 190, 52, 37, 19, 62, 190, 66, 139, 61, 198, 133, 40, 62, 3, 243, 249, 61, 191, 122, 48, 190, 86, 233, 140, 61, 87, 139, 79, 189, 106, 34, 113, 189, 133, 113, 167, 189, 74, 4, 206, 61, 144, 178, 232, 187, 107, 155, 12, 62, 26, 2, 255, 189, 148, 190, 57, 190, 221, 17, 181, 189, 63, 215, 7, 61, 31, 247, 63, 190, 39, 142, 14, 190, 149, 79, 153, 189, 140, 155, 201, 59, 66, 194, 44, 62, 44, 150, 187, 59, 100, 76, 236, 61, 37, 171, 36, 190, 111, 142, 32, 190, 78, 50, 37, 62, 150, 115, 135, 188, 187, 251, 139, 187, 236, 24, 224, 188, 239, 55, 22, 190, 79, 134, 7, 62, 88, 120, 49, 62, 166, 126, 193, 189, 212, 133, 234, 189, 149, 203, 252, 61, 36, 12, 156, 189, 9, 148, 33, 189, 254, 224, 177, 189, 26, 135, 82, 61, 44, 4, 249, 61, 16, 227, 199, 60, 11, 163, 217, 188, 156, 166, 215, 60, 43, 229, 16, 62, 128, 127, 52, 190, 26, 103, 217, 189, 235, 190, 193, 189, 68, 154, 90, 189, 89, 27, 170, 188, 21, 23, 36, 189, 118, 32, 16, 190, 191, 251, 117, 61, 113, 34, 111, 189, 61, 131, 252, 189, 29, 237, 162, 189, 135, 7, 245, 60, 77, 225, 199, 61, 171, 156, 100, 188, 219, 190, 15, 62, 98, 149, 135, 61, 209, 182, 22, 62, 171, 226, 233, 188, 128, 114, 176, 62, 74, 28, 115, 189, 142, 39, 66, 61, 22, 151, 214, 60, 34, 128, 10, 190, 75, 243, 60, 190, 16, 147, 158, 62, 205, 214, 5, 190, 103, 186, 160, 62, 92, 182, 74, 190, 248, 14, 115, 62, 51, 88, 192, 190, 146, 133, 173, 188, 200, 178, 201, 60, 143, 41, 63, 190, 201, 24, 177, 189, 116, 2, 94, 61, 130, 16, 21, 190, 45, 188, 125, 61, 210, 97, 176, 62, 101, 87, 70, 61, 40, 175, 164, 189, 196, 112, 113, 62, 82, 74, 159, 60, 178, 183, 110, 190, 151, 76, 136, 62, 255, 139, 119, 190, 50, 39, 20, 189, 177, 203, 40, 60, 116, 201, 48, 62, 138, 90, 120, 60, 161, 60, 231, 188, 223, 49, 139, 190, 105, 68, 112, 189, 248, 49, 168, 189, 254, 230, 202, 62, 22, 249, 225, 188, 179, 68, 167, 189, 68, 201, 171, 189, 13, 143, 173, 190, 57, 101, 156, 62, 234, 159, 117, 61, 134, 122, 3, 62, 239, 212, 239, 190, 51, 94, 126, 190, 247, 5, 234, 189, 139, 217, 155, 62, 180, 189, 40, 62, 206, 108, 50, 189, 212, 15, 107, 62, 113, 74, 134, 61, 155, 13, 36, 189, 233, 177, 179, 61, 149, 109, 195, 62, 143, 145, 187, 62, 11, 223, 41, 62, 58, 69, 212, 190, 15, 205, 128, 188, 51, 149, 158, 190, 66, 204, 88, 61, 209, 178, 156, 189, 240, 68, 37, 62, 112, 113, 227, 189, 255, 85, 162, 61, 167, 132, 140, 190, 115, 195, 97, 62, 209, 34, 76, 191, 52, 21, 93, 62, 141, 229, 128, 190, 42, 85, 237, 61, 70, 251, 12, 190, 247, 20, 239, 189, 77, 37, 150, 62, 231, 188, 193, 189, 168, 187, 0, 62, 183, 129, 245, 190, 210, 135, 171, 190, 181, 200, 45, 191, 80, 9, 137, 188, 146, 27, 247, 59, 186, 218, 57, 190, 136, 235, 147, 190, 225, 191, 218, 61, 235, 197, 21, 190, 70, 101, 191, 190, 128, 79, 141, 62, 57, 156, 63, 190, 229, 231, 126, 187, 31, 47, 113, 62, 30, 80, 104, 189, 96, 198, 151, 62, 68, 226, 18, 191, 30, 134, 163, 191, 240, 252, 108, 190, 206, 236, 51, 190, 13, 64, 45, 190, 10, 225, 132, 189, 239, 91, 227, 190, 115, 143, 194, 189, 102, 49, 13, 191, 61, 78, 172, 61, 242, 43, 96, 190, 17, 88, 183, 189, 105, 14, 140, 61, 90, 130, 180, 190, 84, 2, 131, 189, 121, 251, 58, 190, 98, 211, 162, 62, 63, 11, 69, 62, 70, 203, 89, 61, 228, 193, 147, 62, 214, 243, 129, 62, 100, 71, 135, 189, 217, 105, 113, 62, 132, 177, 243, 189, 6, 114, 56, 62, 87, 214, 133, 62, 85, 115, 221, 190, 65, 93, 221, 62, 248, 159, 179, 188, 48, 66, 72, 190, 238, 114, 27, 190, 179, 108, 187, 191, 127, 28, 91, 190, 33, 143, 168, 61, 73, 25, 244, 189, 215, 79, 193, 61, 68, 23, 137, 190, 205, 197, 151, 191, 227, 147, 20, 191, 13, 170, 129, 190, 152, 183, 63, 191, 39, 52, 123, 190, 39, 161, 235, 189, 15, 155, 150, 190, 200, 214, 220, 190, 254, 74, 159, 62, 150, 155, 160, 190, 159, 156, 36, 61, 112, 49, 19, 63, 35, 211, 85, 190, 137, 171, 22, 190, 9, 40, 104, 62, 168, 139, 37, 62, 243, 9, 117, 188, 174, 10, 153, 62, 105, 68, 108, 62, 44, 154, 208, 190, 248, 156, 73, 190, 28, 117, 40, 190, 130, 32, 42, 62, 255, 236, 67, 62, 148, 197, 231, 190, 183, 236, 195, 190, 13, 229, 171, 61, 11, 153, 239, 190, 207, 90, 106, 191, 138, 196, 159, 190, 76, 137, 0, 62, 82, 194, 42, 191, 142, 45, 140, 190, 4, 182, 145, 191, 38, 17, 59, 191, 163, 227, 95, 189, 215, 115, 149, 62, 227, 221, 27, 190, 88, 170, 162, 190, 30, 68, 175, 188, 155, 215, 28, 61, 120, 217, 224, 190, 76, 237, 220, 190, 132, 222, 250, 60, 103, 151, 189, 189, 131, 21, 249, 62, 73, 90, 59, 62, 134, 61, 182, 189, 150, 247, 215, 190, 166, 160, 230, 60, 13, 166, 119, 62, 60, 130, 135, 62, 133, 31, 65, 62, 80, 132, 195, 190, 186, 223, 42, 190, 217, 208, 196, 190, 252, 88, 201, 62, 193, 163, 77, 190, 75, 62, 1, 191, 173, 15, 88, 190, 191, 31, 12, 191, 52, 49, 148, 61, 58, 235, 253, 189, 165, 153, 116, 62, 105, 251, 210, 190, 239, 4, 26, 189, 153, 171, 150, 62, 143, 192, 178, 190, 98, 118, 41, 191, 180, 181, 97, 61, 66, 38, 34, 190, 198, 200, 138, 189, 186, 77, 34, 61, 129, 101, 157, 62, 135, 174, 11, 190, 56, 201, 12, 191, 251, 182, 26, 191, 186, 196, 147, 190, 198, 96, 67, 189, 196, 140, 154, 190, 95, 121, 100, 190, 203, 142, 249, 60, 240, 119, 180, 62, 17, 119, 179, 190, 179, 218, 75, 61, 195, 231, 68, 190, 61, 220, 11, 61, 220, 234, 9, 189, 66, 12, 183, 62, 19, 253, 214, 189, 141, 17, 167, 189, 88, 72, 202, 60, 119, 172, 123, 189, 78, 80, 52, 61, 158, 164, 227, 189, 244, 140, 96, 60, 127, 252, 44, 190, 188, 118, 23, 62, 22, 78, 30, 62, 132, 9, 38, 60, 91, 252, 181, 189, 76, 31, 132, 189, 90, 126, 166, 61, 226, 223, 22, 190, 65, 135, 236, 188, 249, 155, 34, 62, 134, 129, 95, 189, 121, 103, 67, 60, 137, 24, 129, 188, 19, 85, 61, 189, 221, 21, 0, 190, 94, 15, 70, 189, 241, 33, 0, 62, 9, 211, 236, 61, 72, 232, 215, 60, 196, 220, 31, 189, 185, 231, 239, 189, 201, 61, 22, 62, 221, 138, 226, 189, 74, 26, 22, 190, 65, 212, 180, 189, 209, 168, 197, 61, 12, 101, 77, 188, 42, 83, 5, 190, 18, 187, 5, 190, 247, 166, 195, 189, 73, 166, 180, 61, 120, 151, 87, 61, 225, 246, 106, 188, 28, 39, 170, 61, 64, 227, 48, 190, 210, 254, 245, 61, 190, 137, 149, 188, 134, 109, 114, 61, 169, 154, 168, 61, 156, 65, 34, 190, 251, 149, 227, 189, 132, 197, 171, 189, 191, 173, 177, 189, 108, 107, 217, 61, 148, 194, 246, 189, 96, 18, 182, 61, 114, 66, 35, 190, 23, 157, 154, 188, 246, 252, 51, 60, 95, 231, 46, 190, 228, 110, 151, 61, 176, 6, 236, 189, 221, 222, 132, 61, 8, 242, 135, 189, 123, 138, 48, 62, 101, 211, 19, 190, 78, 207, 161, 61, 102, 168, 159, 188, 6, 42, 122, 188, 242, 44, 193, 62, 242, 132, 146, 62, 251, 185, 4, 62, 231, 28, 238, 189, 78, 124, 113, 62, 63, 183, 12, 63, 38, 124, 12, 190, 126, 163, 12, 191, 242, 58, 12, 63, 192, 148, 167, 61, 110, 116, 241, 61, 182, 128, 183, 190, 148, 200, 195, 60, 147, 28, 159, 62, 253, 55, 182, 61, 234, 13, 66, 62, 106, 44, 38, 191, 144, 27, 2, 188, 144, 202, 199, 190, 12, 233, 16, 189, 31, 232, 153, 190, 122, 228, 143, 189, 83, 120, 182, 190, 41, 148, 130, 62, 242, 137, 23, 61, 60, 231, 6, 190, 235, 76, 27, 62, 146, 158, 46, 191, 180, 33, 40, 190, 204, 242, 168, 62, 82, 147, 133, 61, 90, 84, 137, 62, 34, 107, 75, 60, 247, 76, 136, 188, 118, 149, 206, 189, 63, 10, 187, 60, 71, 252, 128, 62, 245, 81, 72, 61, 29, 163, 94, 62, 231, 218, 143, 189, 66, 53, 104, 189, 217, 248, 165, 190, 99, 105, 207, 61, 33, 207, 198, 60, 224, 50, 191, 58, 3, 98, 90, 61, 76, 60, 138, 190, 42, 234, 65, 62, 147, 1, 8, 190, 48, 144, 126, 186, 77, 194, 255, 189, 86, 64, 161, 190, 212, 93, 70, 61, 188, 140, 223, 61, 73, 54, 179, 61, 147, 101, 132, 61, 253, 150, 134, 62, 157, 254, 72, 190, 12, 240, 206, 61, 218, 147, 145, 190, 134, 172, 176, 62, 59, 211, 232, 61, 6, 93, 72, 190, 20, 232, 199, 188, 202, 99, 42, 190, 229, 127, 104, 62, 12, 51, 122, 59, 188, 91, 50, 62, 79, 203, 51, 62, 250, 92, 154, 62, 134, 46, 10, 62, 169, 54, 235, 189, 117, 177, 72, 63, 139, 242, 63, 191, 21, 134, 156, 62, 152, 213, 216, 62, 225, 46, 218, 191, 228, 230, 133, 62, 156, 42, 14, 62, 2, 106, 196, 61, 88, 165, 22, 191, 153, 204, 172, 190, 94, 157, 183, 62, 169, 143, 71, 190, 145, 20, 244, 190, 197, 28, 249, 61, 134, 31, 25, 190, 222, 76, 139, 62, 109, 150, 76, 62, 120, 111, 52, 191, 190, 68, 8, 63, 179, 142, 224, 190, 162, 56, 136, 189, 40, 168, 51, 62, 66, 8, 106, 190, 2, 2, 134, 61, 65, 245, 180, 190, 57, 238, 8, 61, 86, 124, 0, 61, 165, 19, 137, 61, 102, 118, 216, 61, 53, 254, 4, 63, 252, 54, 97, 59, 152, 231, 149, 62, 168, 205, 222, 190, 198, 35, 48, 191, 238, 127, 59, 62, 133, 150, 233, 61, 154, 130, 162, 190, 134, 65, 101, 62, 148, 150, 24, 61, 89, 66, 194, 190, 248, 170, 69, 191, 128, 214, 96, 190, 152, 181, 146, 187, 60, 200, 65, 189, 59, 9, 202, 190, 63, 25, 238, 61, 52, 163, 129, 190, 162, 219, 30, 62, 183, 177, 133, 61, 249, 248, 1, 191, 183, 162, 233, 190, 112, 157, 157, 190, 82, 226, 178, 59, 223, 107, 233, 62, 115, 93, 142, 190, 251, 3, 184, 61, 206, 82, 143, 190, 167, 243, 165, 190, 165, 244, 108, 62, 58, 26, 50, 62, 227, 55, 134, 61, 94, 190, 134, 189, 126, 56, 154, 189, 167, 217, 200, 189, 68, 117, 114, 191, 114, 118, 75, 61, 138, 77, 161, 188, 188, 37, 206, 60, 108, 181, 75, 190, 110, 198, 13, 62, 189, 187, 156, 190, 47, 89, 36, 189, 89, 186, 152, 62, 86, 184, 52, 190, 22, 10, 147, 60, 88, 195, 208, 61, 23, 72, 133, 62, 168, 172, 181, 61, 46, 229, 139, 62, 140, 118, 38, 62, 107, 125, 248, 61, 178, 36, 94, 190, 180, 51, 55, 190, 122, 60, 151, 188, 141, 127, 37, 188, 7, 229, 221, 189, 206, 80, 140, 190, 56, 25, 176, 61, 106, 44, 205, 191, 189, 209, 18, 191, 154, 50, 129, 190, 209, 118, 74, 189, 63, 242, 72, 191, 119, 36, 15, 189, 113, 30, 63, 191, 173, 14, 118, 190, 4, 63, 41, 191, 137, 88, 118, 62, 104, 118, 46, 190, 86, 126, 36, 190, 44, 98, 79, 62, 134, 51, 119, 61, 150, 193, 219, 190, 64, 223, 217, 189, 250, 93, 43, 191, 19, 218, 220, 61, 94, 208, 148, 189, 94, 250, 112, 187, 37, 39, 184, 61, 168, 154, 253, 188, 55, 66, 223, 62, 186, 157, 73, 62, 11, 130, 53, 62, 134, 113, 27, 190, 112, 227, 208, 190, 160, 224, 47, 62, 212, 26, 156, 61, 20, 177, 138, 190, 203, 117, 32, 190, 129, 52, 67, 190, 236, 7, 241, 61, 164, 244, 135, 190, 129, 36, 197, 61, 129, 3, 11, 62, 20, 10, 215, 190, 171, 217, 61, 63, 31, 139, 91, 190, 15, 188, 233, 61, 201, 130, 205, 62, 140, 32, 10, 61, 14, 235, 240, 61, 7, 97, 155, 190, 35, 138, 194, 191, 75, 103, 227, 62, 121, 71, 135, 189, 240, 36, 145, 189, 159, 110, 25, 191, 30, 233, 136, 190, 95, 11, 66, 191, 239, 36, 233, 61, 164, 21, 30, 190, 230, 169, 157, 188, 206, 231, 130, 61, 241, 47, 231, 61, 252, 76, 171, 189, 70, 232, 186, 190, 204, 34, 196, 62, 244, 80, 128, 62, 129, 178, 177, 190, 246, 227, 165, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 123, 84, 62, 208, 119, 0, 62, 20, 86, 152, 61, 123, 101, 84, 62, 83, 250, 195, 61, 130, 100, 109, 62, 52, 69, 178, 190, 29, 109, 214, 62, 197, 162, 63, 189, 45, 183, 119, 62, 210, 112, 37, 189, 46, 101, 126, 60, 53, 203, 222, 189, 71, 100, 127, 189, 114, 84, 27, 190, 123, 138, 198, 189, 193, 80, 144, 62, 41, 117, 9, 188, 111, 97, 167, 189, 247, 7, 117, 62, 37, 214, 244, 61, 181, 37, 240, 61, 115, 125, 67, 62, 248, 21, 233, 189, 241, 36, 22, 190, 29, 28, 97, 189, 217, 84, 152, 62, 109, 41, 105, 62, 113, 71, 186, 62, 245, 138, 160, 62, 3, 21, 151, 62, 193, 135, 7, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 18, 204, 62, 79, 71, 71, 62, 163, 18, 176, 62, 118, 66, 81, 63, 22, 206, 188, 189, 190, 80, 211, 61, 95, 166, 173, 62, 145, 147, 251, 190, 121, 247, 18, 60, 176, 216, 8, 63, 180, 138, 169, 63, 125, 218, 235, 188, 235, 132, 248, 190, 63, 143, 97, 63, 213, 20, 17, 62, 92, 97, 28, 62, 219, 114, 183, 189, 56, 148, 223, 190, 46, 74, 82, 62, 33, 235, 56, 63, 159, 82, 160, 188, 196, 229, 75, 63, 165, 246, 26, 191, 100, 225, 11, 190, 233, 16, 209, 61, 59, 131, 128, 63, 108, 184, 104, 189, 111, 248, 149, 191, 61, 31, 92, 191, 81, 15, 137, 61, 143, 43, 24, 63, 33, 66, 20, 191, 92, 102, 7, 190, 201, 107, 112, 190, 108, 134, 223, 187, 40, 94, 162, 62, 211, 27, 34, 190, 128, 90, 182, 190, 248, 172, 156, 62, 99, 150, 174, 188, 135, 166, 103, 188, 21, 124, 6, 62, 37, 167, 37, 62, 138, 154, 215, 61, 120, 254, 50, 63, 87, 163, 149, 62, 111, 235, 163, 60, 144, 189, 174, 60, 73, 48, 101, 190, 176, 45, 248, 189, 5, 31, 51, 63, 234, 247, 255, 62, 70, 198, 147, 191, 164, 60, 95, 189, 148, 214, 52, 59, 152, 129, 228, 188, 179, 249, 16, 188, 212, 194, 155, 62, 142, 59, 142, 190, 211, 87, 6, 63, 1, 143, 205, 188, 243, 170, 141, 190, 93, 114, 96, 189, 17, 15, 203, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 134, 74, 190, 124, 139, 239, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {225, 193, 204, 191, 51, 46, 29, 191, 65, 201, 72, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {84, 8, 19, 192, 222, 161, 71, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0064/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}