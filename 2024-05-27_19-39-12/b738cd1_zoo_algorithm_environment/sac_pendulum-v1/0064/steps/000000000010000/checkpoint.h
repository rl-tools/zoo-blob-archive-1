// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 235, 231, 61, 35, 254, 194, 190, 87, 131, 168, 62, 198, 198, 143, 189, 158, 176, 167, 191, 163, 27, 187, 190, 247, 120, 98, 61, 41, 93, 79, 63, 14, 221, 205, 62, 64, 124, 189, 190, 143, 8, 91, 191, 152, 133, 154, 190, 231, 216, 88, 62, 52, 24, 33, 63, 206, 183, 244, 190, 24, 248, 36, 62, 90, 142, 125, 190, 173, 71, 91, 188, 85, 156, 252, 190, 117, 138, 44, 61, 29, 36, 142, 190, 189, 252, 46, 190, 116, 81, 162, 191, 249, 8, 46, 189, 225, 210, 9, 191, 251, 153, 149, 190, 30, 8, 14, 191, 220, 63, 222, 190, 158, 16, 8, 63, 250, 201, 193, 62, 70, 14, 100, 63, 25, 175, 155, 63, 6, 25, 185, 62, 134, 102, 143, 61, 57, 99, 58, 191, 36, 214, 181, 62, 42, 0, 144, 189, 47, 96, 43, 62, 14, 192, 56, 191, 88, 197, 23, 189, 106, 179, 11, 191, 205, 105, 12, 63, 161, 18, 37, 191, 42, 120, 129, 63, 34, 181, 213, 62, 138, 157, 32, 63, 130, 43, 71, 63, 215, 148, 229, 61, 24, 111, 248, 190, 84, 224, 237, 61, 234, 80, 214, 62, 190, 81, 199, 62, 149, 166, 213, 62, 159, 182, 244, 62, 89, 198, 181, 62, 4, 189, 141, 187, 218, 187, 149, 190, 81, 85, 22, 62, 86, 245, 42, 191, 168, 239, 244, 190, 12, 37, 18, 191, 150, 95, 28, 191, 75, 87, 26, 63, 29, 248, 254, 62, 175, 18, 247, 62, 195, 184, 3, 191, 39, 197, 183, 62, 64, 115, 169, 189, 94, 42, 41, 63, 42, 75, 54, 62, 2, 178, 154, 189, 51, 161, 29, 63, 208, 215, 102, 63, 76, 150, 222, 190, 152, 83, 23, 191, 93, 32, 135, 190, 81, 44, 13, 63, 32, 242, 61, 61, 118, 113, 112, 190, 214, 55, 81, 191, 15, 239, 55, 190, 232, 231, 145, 190, 175, 147, 223, 62, 41, 76, 26, 63, 102, 94, 29, 63, 62, 217, 39, 63, 215, 67, 147, 62, 27, 175, 79, 63, 242, 47, 106, 190, 202, 145, 140, 190, 0, 84, 10, 63, 223, 157, 131, 59, 199, 190, 29, 63, 131, 28, 94, 191, 72, 247, 86, 63, 108, 131, 134, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 69, 51, 191, 170, 144, 187, 61, 150, 192, 9, 190, 193, 223, 219, 190, 231, 207, 207, 189, 75, 38, 216, 190, 151, 142, 42, 191, 66, 102, 65, 62, 234, 241, 33, 191, 186, 252, 157, 190, 60, 55, 44, 191, 4, 117, 218, 61, 60, 200, 73, 60, 206, 10, 144, 62, 250, 13, 151, 62, 81, 95, 42, 62, 185, 243, 235, 190, 168, 1, 198, 61, 228, 252, 138, 191, 166, 45, 60, 191, 225, 71, 216, 62, 241, 215, 111, 60, 239, 255, 34, 63, 185, 64, 126, 62, 133, 143, 132, 188, 167, 55, 45, 63, 165, 19, 54, 63, 89, 43, 52, 62, 81, 24, 197, 190, 22, 163, 70, 188, 251, 228, 169, 62, 90, 189, 25, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 223, 57, 190, 107, 34, 147, 190, 57, 173, 91, 190, 45, 223, 24, 191, 52, 236, 251, 59, 204, 202, 24, 190, 61, 82, 36, 191, 125, 154, 140, 190, 14, 99, 25, 190, 237, 197, 115, 190, 13, 137, 133, 190, 245, 76, 98, 61, 251, 23, 248, 188, 79, 193, 128, 190, 53, 193, 146, 62, 177, 130, 37, 62, 54, 223, 132, 189, 98, 83, 202, 189, 35, 233, 140, 62, 251, 135, 16, 62, 176, 114, 148, 62, 78, 158, 4, 62, 36, 255, 187, 61, 11, 153, 8, 190, 207, 185, 42, 62, 72, 97, 161, 62, 105, 75, 188, 60, 197, 112, 105, 62, 144, 128, 178, 190, 111, 111, 145, 61, 177, 210, 33, 190, 48, 168, 56, 62, 255, 110, 192, 190, 229, 164, 59, 60, 173, 103, 207, 189, 82, 48, 146, 189, 61, 104, 21, 62, 133, 146, 194, 189, 7, 17, 154, 189, 119, 204, 158, 189, 180, 47, 70, 189, 120, 138, 54, 190, 0, 133, 138, 60, 11, 158, 64, 62, 62, 47, 154, 61, 117, 17, 132, 61, 232, 31, 40, 190, 118, 16, 18, 189, 200, 255, 179, 189, 229, 148, 113, 185, 5, 231, 201, 62, 166, 51, 193, 61, 10, 139, 160, 59, 97, 20, 231, 61, 101, 12, 97, 60, 133, 249, 253, 61, 5, 247, 3, 61, 197, 60, 237, 190, 76, 110, 40, 189, 195, 154, 108, 187, 148, 246, 229, 189, 234, 48, 152, 62, 63, 31, 24, 190, 45, 255, 48, 191, 191, 189, 193, 190, 225, 224, 119, 62, 255, 33, 44, 190, 176, 198, 37, 191, 121, 66, 162, 190, 182, 118, 205, 61, 252, 59, 199, 190, 221, 218, 151, 190, 252, 169, 93, 191, 155, 172, 22, 190, 142, 119, 172, 190, 110, 49, 70, 62, 247, 91, 44, 189, 111, 19, 212, 189, 8, 230, 133, 62, 71, 121, 141, 61, 88, 57, 162, 61, 97, 169, 91, 189, 124, 237, 187, 62, 109, 35, 134, 62, 130, 220, 16, 61, 64, 229, 72, 62, 123, 115, 23, 62, 82, 32, 53, 190, 177, 15, 36, 62, 47, 106, 141, 62, 38, 176, 27, 61, 254, 26, 253, 58, 229, 102, 150, 190, 216, 175, 132, 62, 172, 220, 187, 59, 14, 201, 142, 62, 135, 50, 113, 188, 143, 33, 160, 190, 123, 3, 147, 190, 85, 79, 14, 191, 195, 42, 143, 191, 89, 194, 35, 190, 143, 80, 85, 191, 59, 43, 167, 190, 26, 207, 150, 191, 127, 146, 200, 61, 19, 255, 135, 190, 131, 228, 34, 62, 39, 24, 247, 190, 104, 253, 185, 189, 241, 105, 67, 61, 217, 230, 222, 189, 183, 61, 50, 188, 198, 237, 55, 188, 206, 237, 65, 189, 156, 197, 219, 59, 64, 125, 239, 62, 116, 162, 62, 191, 171, 133, 167, 189, 228, 172, 134, 190, 82, 77, 228, 190, 207, 48, 13, 62, 106, 53, 82, 61, 54, 18, 205, 61, 151, 99, 146, 190, 19, 123, 52, 191, 19, 27, 155, 189, 52, 64, 143, 62, 195, 225, 234, 61, 72, 18, 51, 190, 43, 201, 239, 189, 246, 122, 200, 58, 3, 251, 45, 62, 87, 225, 16, 62, 151, 191, 133, 62, 230, 61, 217, 189, 145, 56, 153, 187, 21, 254, 30, 62, 60, 244, 39, 190, 14, 125, 255, 189, 208, 151, 76, 187, 125, 85, 154, 62, 182, 64, 17, 189, 177, 27, 113, 62, 118, 234, 30, 62, 109, 202, 193, 61, 164, 78, 133, 190, 42, 66, 224, 189, 57, 35, 172, 188, 195, 16, 35, 190, 183, 173, 105, 62, 120, 199, 106, 62, 199, 244, 185, 189, 221, 66, 157, 62, 217, 252, 39, 62, 185, 35, 142, 190, 94, 167, 123, 60, 0, 18, 144, 189, 90, 69, 195, 61, 255, 254, 242, 188, 41, 75, 138, 190, 185, 25, 213, 61, 120, 60, 83, 190, 16, 114, 74, 190, 115, 55, 135, 60, 247, 111, 103, 61, 189, 241, 108, 190, 58, 36, 162, 61, 45, 90, 45, 189, 220, 101, 28, 190, 32, 67, 239, 190, 37, 70, 166, 62, 202, 76, 34, 62, 65, 98, 5, 61, 214, 137, 218, 60, 121, 207, 102, 61, 2, 165, 64, 188, 4, 93, 198, 189, 83, 185, 160, 61, 130, 219, 0, 185, 32, 81, 52, 60, 16, 253, 68, 62, 73, 190, 200, 60, 8, 220, 25, 60, 102, 146, 55, 62, 222, 54, 6, 62, 140, 91, 91, 62, 180, 245, 105, 189, 219, 172, 188, 190, 242, 137, 69, 62, 224, 68, 42, 62, 223, 194, 47, 190, 125, 215, 142, 190, 126, 84, 12, 62, 240, 37, 39, 190, 6, 246, 80, 61, 187, 32, 231, 189, 97, 205, 133, 60, 176, 222, 65, 190, 127, 60, 159, 62, 40, 218, 130, 189, 123, 118, 94, 190, 177, 148, 15, 190, 102, 172, 88, 62, 18, 177, 0, 61, 57, 220, 219, 62, 11, 169, 65, 61, 125, 33, 196, 190, 235, 80, 101, 190, 84, 104, 56, 190, 201, 59, 152, 62, 180, 48, 144, 62, 31, 248, 188, 61, 46, 254, 129, 62, 17, 178, 131, 62, 167, 164, 178, 188, 134, 157, 167, 62, 137, 121, 10, 191, 235, 232, 156, 189, 100, 218, 64, 190, 89, 14, 164, 61, 192, 193, 145, 62, 40, 1, 152, 58, 190, 76, 27, 191, 63, 178, 194, 59, 154, 4, 247, 59, 185, 119, 96, 61, 144, 135, 9, 61, 163, 32, 117, 62, 31, 218, 103, 61, 247, 168, 63, 62, 179, 213, 17, 191, 123, 216, 169, 61, 143, 28, 60, 62, 65, 214, 224, 189, 254, 249, 127, 190, 27, 254, 254, 188, 164, 1, 232, 61, 42, 143, 11, 190, 254, 39, 217, 62, 252, 31, 249, 189, 180, 72, 103, 61, 96, 90, 4, 191, 157, 138, 134, 190, 25, 251, 173, 189, 90, 57, 93, 190, 61, 226, 4, 190, 224, 184, 127, 189, 19, 126, 125, 190, 86, 1, 38, 62, 134, 248, 183, 189, 217, 114, 138, 190, 72, 65, 152, 61, 214, 118, 220, 61, 246, 10, 139, 62, 142, 240, 144, 62, 115, 68, 254, 188, 224, 249, 48, 190, 50, 156, 145, 61, 186, 31, 96, 189, 140, 154, 72, 189, 105, 129, 114, 189, 142, 162, 42, 190, 151, 220, 25, 190, 120, 29, 178, 61, 110, 19, 245, 61, 33, 184, 14, 190, 150, 81, 48, 190, 1, 160, 203, 189, 84, 34, 40, 190, 146, 244, 235, 189, 155, 230, 11, 61, 217, 121, 245, 189, 43, 206, 27, 61, 36, 184, 178, 61, 85, 52, 3, 62, 212, 78, 196, 188, 80, 35, 97, 189, 173, 218, 6, 61, 15, 43, 4, 61, 25, 16, 238, 188, 102, 219, 36, 190, 140, 39, 140, 189, 129, 168, 152, 189, 18, 72, 32, 190, 53, 14, 156, 61, 106, 174, 216, 61, 103, 30, 45, 190, 125, 129, 9, 190, 25, 110, 186, 189, 160, 121, 178, 190, 87, 146, 65, 191, 143, 159, 103, 190, 108, 195, 24, 60, 30, 33, 29, 191, 210, 25, 219, 189, 200, 67, 39, 191, 162, 112, 145, 190, 53, 95, 133, 190, 32, 206, 156, 62, 11, 7, 205, 187, 110, 129, 129, 61, 17, 114, 250, 188, 249, 177, 74, 190, 161, 215, 128, 190, 144, 122, 129, 60, 9, 109, 120, 188, 45, 175, 126, 62, 131, 50, 36, 188, 254, 35, 153, 61, 108, 175, 25, 62, 56, 128, 201, 61, 85, 124, 38, 62, 202, 206, 249, 189, 185, 127, 127, 62, 108, 122, 227, 189, 190, 212, 212, 190, 171, 6, 100, 62, 136, 18, 187, 189, 30, 59, 240, 60, 14, 186, 91, 189, 213, 126, 162, 190, 45, 235, 211, 190, 211, 255, 235, 190, 170, 81, 192, 62, 46, 21, 242, 189, 154, 182, 50, 61, 110, 163, 180, 190, 55, 201, 49, 190, 160, 215, 37, 191, 101, 142, 191, 190, 68, 236, 158, 189, 139, 52, 86, 62, 182, 27, 166, 190, 230, 105, 30, 191, 54, 254, 142, 62, 7, 11, 167, 190, 186, 30, 151, 190, 101, 139, 132, 190, 148, 42, 29, 191, 107, 226, 162, 190, 69, 53, 106, 60, 157, 33, 15, 191, 191, 76, 20, 190, 64, 28, 14, 191, 202, 66, 1, 62, 158, 129, 98, 190, 172, 170, 15, 191, 73, 22, 178, 190, 242, 44, 58, 191, 200, 79, 142, 190, 67, 8, 177, 62, 235, 148, 123, 61, 84, 65, 219, 189, 52, 172, 219, 189, 177, 107, 72, 189, 150, 79, 12, 62, 176, 175, 4, 189, 219, 110, 210, 60, 116, 121, 230, 188, 212, 67, 47, 190, 185, 108, 0, 190, 111, 137, 35, 61, 136, 128, 224, 189, 195, 140, 109, 189, 107, 146, 206, 61, 8, 153, 61, 189, 37, 91, 138, 189, 76, 20, 18, 190, 22, 144, 40, 190, 182, 167, 11, 190, 200, 100, 44, 61, 206, 19, 205, 188, 138, 128, 200, 189, 111, 127, 2, 189, 153, 8, 13, 190, 141, 81, 203, 188, 244, 100, 6, 62, 32, 28, 235, 189, 177, 195, 61, 187, 11, 63, 149, 61, 100, 221, 108, 61, 111, 173, 234, 189, 96, 212, 203, 189, 211, 26, 53, 62, 239, 147, 50, 61, 168, 123, 48, 62, 49, 44, 132, 62, 6, 249, 73, 62, 182, 76, 93, 189, 41, 248, 37, 61, 90, 174, 203, 190, 55, 204, 251, 186, 40, 83, 135, 61, 220, 18, 23, 63, 70, 18, 241, 189, 154, 64, 140, 60, 34, 204, 164, 189, 2, 195, 21, 190, 74, 229, 109, 62, 140, 146, 2, 62, 159, 58, 56, 62, 10, 98, 18, 62, 254, 216, 211, 188, 158, 228, 21, 190, 154, 59, 207, 60, 90, 5, 7, 189, 45, 188, 221, 61, 50, 199, 154, 190, 38, 126, 69, 190, 204, 170, 176, 190, 123, 240, 247, 189, 8, 221, 233, 62, 115, 245, 228, 189, 65, 153, 80, 61, 244, 176, 182, 190, 55, 130, 159, 190, 214, 186, 194, 61, 218, 238, 23, 191, 205, 198, 8, 190, 233, 26, 153, 61, 140, 111, 242, 61, 17, 183, 120, 190, 94, 176, 138, 191, 165, 22, 129, 190, 41, 148, 69, 191, 171, 65, 5, 189, 253, 176, 30, 188, 234, 211, 12, 62, 63, 23, 49, 191, 29, 16, 79, 62, 153, 94, 213, 190, 54, 32, 50, 191, 59, 203, 97, 190, 11, 125, 29, 62, 64, 2, 124, 62, 74, 111, 232, 62, 229, 15, 101, 61, 78, 19, 101, 62, 97, 140, 169, 190, 167, 7, 112, 62, 26, 222, 215, 190, 149, 189, 164, 60, 97, 50, 253, 62, 38, 178, 17, 190, 221, 159, 200, 62, 6, 6, 37, 190, 230, 136, 223, 190, 195, 219, 251, 60, 54, 63, 49, 190, 115, 6, 7, 190, 96, 225, 129, 61, 151, 254, 195, 189, 215, 155, 203, 189, 254, 80, 251, 188, 30, 248, 3, 190, 131, 160, 29, 190, 52, 59, 31, 62, 190, 66, 139, 61, 198, 133, 40, 62, 4, 108, 248, 61, 191, 122, 48, 190, 35, 97, 151, 61, 39, 112, 24, 189, 106, 34, 113, 189, 227, 72, 147, 189, 74, 4, 206, 61, 144, 178, 232, 187, 54, 175, 15, 62, 55, 178, 252, 189, 106, 220, 48, 190, 160, 121, 179, 189, 63, 215, 7, 61, 59, 160, 55, 190, 143, 242, 20, 190, 181, 6, 120, 189, 140, 155, 201, 59, 66, 194, 44, 62, 210, 100, 237, 59, 11, 104, 231, 61, 37, 171, 36, 190, 111, 142, 32, 190, 78, 50, 37, 62, 150, 115, 135, 188, 187, 251, 139, 187, 236, 24, 224, 188, 239, 55, 22, 190, 79, 134, 7, 62, 88, 120, 49, 62, 166, 126, 193, 189, 212, 133, 234, 189, 149, 203, 252, 61, 36, 12, 156, 189, 9, 148, 33, 189, 254, 224, 177, 189, 26, 135, 82, 61, 44, 4, 249, 61, 16, 227, 199, 60, 11, 163, 217, 188, 156, 166, 215, 60, 43, 229, 16, 62, 128, 127, 52, 190, 26, 103, 217, 189, 235, 190, 193, 189, 68, 154, 90, 189, 89, 27, 170, 188, 21, 23, 36, 189, 118, 32, 16, 190, 191, 251, 117, 61, 113, 34, 111, 189, 61, 131, 252, 189, 29, 237, 162, 189, 183, 15, 160, 61, 235, 141, 34, 61, 177, 28, 20, 61, 187, 151, 137, 188, 101, 67, 47, 62, 209, 182, 22, 62, 97, 143, 177, 61, 115, 83, 77, 62, 185, 142, 59, 187, 184, 84, 180, 61, 46, 99, 229, 186, 171, 40, 226, 189, 227, 43, 241, 189, 94, 101, 166, 62, 54, 32, 28, 189, 233, 236, 168, 62, 231, 219, 189, 189, 231, 21, 134, 62, 24, 244, 160, 190, 154, 24, 42, 189, 36, 55, 215, 60, 218, 170, 3, 190, 157, 18, 152, 189, 160, 97, 165, 61, 212, 101, 11, 190, 37, 48, 249, 61, 242, 9, 138, 62, 247, 217, 169, 61, 18, 127, 3, 190, 13, 117, 103, 62, 127, 162, 82, 61, 240, 48, 242, 189, 103, 238, 39, 62, 151, 19, 87, 190, 121, 212, 104, 188, 188, 118, 152, 190, 126, 244, 45, 62, 138, 90, 120, 60, 159, 244, 20, 189, 176, 159, 93, 190, 208, 251, 147, 189, 31, 52, 86, 189, 150, 189, 185, 62, 77, 158, 12, 189, 7, 127, 204, 189, 154, 69, 188, 189, 157, 38, 92, 190, 179, 129, 167, 62, 196, 90, 73, 60, 154, 72, 234, 61, 88, 21, 170, 190, 199, 33, 151, 190, 217, 44, 3, 190, 26, 132, 141, 62, 198, 160, 35, 62, 160, 209, 73, 189, 106, 250, 77, 62, 30, 95, 200, 61, 39, 96, 134, 189, 238, 159, 156, 61, 254, 171, 165, 62, 234, 151, 177, 62, 214, 104, 45, 62, 68, 192, 191, 190, 15, 205, 128, 188, 129, 117, 214, 190, 137, 71, 144, 61, 206, 57, 178, 190, 204, 222, 16, 62, 112, 113, 227, 189, 3, 62, 160, 189, 67, 137, 140, 189, 21, 51, 8, 62, 18, 57, 168, 190, 5, 39, 71, 62, 243, 150, 157, 190, 213, 231, 208, 61, 77, 7, 128, 189, 119, 150, 252, 189, 120, 6, 146, 62, 65, 88, 202, 189, 217, 169, 213, 61, 103, 34, 12, 189, 73, 188, 205, 190, 226, 86, 167, 190, 239, 161, 145, 188, 12, 220, 135, 60, 248, 114, 43, 190, 183, 43, 89, 190, 55, 146, 240, 61, 191, 109, 28, 189, 49, 111, 110, 190, 243, 83, 130, 62, 122, 106, 243, 189, 154, 105, 142, 187, 115, 163, 74, 62, 55, 30, 200, 59, 146, 253, 71, 62, 160, 114, 215, 190, 135, 40, 136, 191, 41, 158, 102, 190, 206, 236, 51, 190, 120, 125, 151, 190, 135, 47, 229, 189, 151, 137, 9, 191, 3, 140, 62, 60, 163, 223, 231, 190, 164, 95, 177, 61, 87, 199, 100, 190, 48, 183, 121, 189, 45, 213, 63, 62, 83, 8, 193, 190, 91, 28, 106, 61, 247, 149, 63, 190, 35, 51, 82, 62, 203, 146, 83, 62, 67, 255, 208, 61, 59, 46, 157, 62, 177, 245, 118, 62, 38, 166, 114, 189, 68, 221, 68, 62, 191, 186, 202, 189, 13, 91, 5, 62, 248, 96, 169, 62, 21, 118, 182, 190, 193, 232, 199, 62, 241, 38, 91, 189, 69, 152, 149, 188, 104, 58, 20, 190, 50, 138, 106, 191, 217, 164, 210, 189, 114, 22, 170, 61, 101, 80, 101, 190, 215, 79, 193, 61, 223, 120, 48, 190, 212, 136, 227, 190, 58, 221, 220, 190, 99, 246, 128, 190, 68, 63, 88, 191, 228, 46, 62, 61, 132, 87, 28, 190, 19, 18, 50, 190, 192, 36, 85, 190, 87, 156, 147, 62, 55, 72, 156, 190, 150, 68, 130, 61, 192, 70, 224, 62, 239, 54, 109, 190, 98, 201, 36, 190, 212, 7, 43, 62, 247, 25, 111, 62, 64, 255, 16, 62, 228, 231, 149, 62, 33, 221, 91, 62, 74, 178, 137, 190, 54, 30, 130, 189, 189, 18, 117, 190, 153, 124, 46, 62, 166, 148, 140, 62, 162, 237, 107, 190, 32, 233, 165, 190, 72, 240, 82, 189, 45, 120, 10, 191, 59, 159, 116, 191, 86, 179, 157, 190, 76, 137, 0, 62, 118, 163, 30, 191, 180, 133, 185, 190, 224, 190, 135, 191, 32, 61, 66, 191, 110, 25, 220, 188, 176, 148, 131, 62, 187, 252, 2, 190, 193, 237, 199, 190, 11, 138, 245, 189, 28, 127, 138, 60, 251, 41, 192, 190, 209, 42, 210, 190, 132, 222, 250, 60, 56, 85, 73, 189, 200, 229, 196, 62, 153, 63, 59, 62, 19, 162, 228, 189, 219, 28, 205, 190, 137, 22, 224, 60, 25, 210, 64, 62, 222, 231, 73, 62, 84, 192, 1, 62, 116, 105, 174, 190, 158, 127, 44, 190, 192, 138, 133, 190, 48, 205, 159, 62, 143, 218, 171, 61, 185, 133, 62, 190, 164, 89, 186, 189, 68, 218, 67, 190, 172, 227, 145, 61, 58, 235, 253, 189, 123, 1, 154, 62, 201, 39, 198, 190, 65, 80, 45, 188, 22, 80, 135, 62, 56, 64, 160, 190, 88, 109, 249, 190, 188, 108, 111, 61, 221, 67, 169, 188, 148, 102, 134, 186, 250, 8, 118, 60, 54, 6, 216, 62, 218, 89, 123, 189, 195, 54, 213, 190, 181, 106, 244, 190, 156, 159, 216, 189, 40, 98, 50, 189, 180, 1, 144, 190, 146, 184, 17, 190, 3, 243, 148, 61, 135, 85, 152, 62, 123, 199, 140, 190, 162, 110, 224, 61, 137, 154, 18, 190, 49, 109, 143, 61, 7, 105, 59, 60, 101, 77, 140, 62, 19, 253, 214, 189, 141, 17, 167, 189, 88, 72, 202, 60, 119, 172, 123, 189, 78, 80, 52, 61, 158, 164, 227, 189, 244, 140, 96, 60, 127, 252, 44, 190, 188, 118, 23, 62, 22, 78, 30, 62, 132, 9, 38, 60, 91, 252, 181, 189, 76, 31, 132, 189, 90, 126, 166, 61, 226, 223, 22, 190, 65, 135, 236, 188, 249, 155, 34, 62, 134, 129, 95, 189, 121, 103, 67, 60, 137, 24, 129, 188, 19, 85, 61, 189, 221, 21, 0, 190, 94, 15, 70, 189, 241, 33, 0, 62, 9, 211, 236, 61, 72, 232, 215, 60, 196, 220, 31, 189, 185, 231, 239, 189, 201, 61, 22, 62, 221, 138, 226, 189, 74, 26, 22, 190, 65, 212, 180, 189, 209, 168, 197, 61, 12, 101, 77, 188, 42, 83, 5, 190, 18, 187, 5, 190, 247, 166, 195, 189, 73, 166, 180, 61, 120, 151, 87, 61, 225, 246, 106, 188, 28, 39, 170, 61, 64, 227, 48, 190, 210, 254, 245, 61, 190, 137, 149, 188, 134, 109, 114, 61, 169, 154, 168, 61, 156, 65, 34, 190, 251, 149, 227, 189, 132, 197, 171, 189, 191, 173, 177, 189, 108, 107, 217, 61, 148, 194, 246, 189, 96, 18, 182, 61, 114, 66, 35, 190, 23, 157, 154, 188, 246, 252, 51, 60, 95, 231, 46, 190, 228, 110, 151, 61, 176, 6, 236, 189, 221, 222, 132, 61, 8, 242, 135, 189, 123, 138, 48, 62, 101, 211, 19, 190, 78, 207, 161, 61, 228, 62, 67, 189, 102, 134, 144, 189, 218, 197, 156, 62, 8, 240, 141, 62, 137, 247, 187, 61, 231, 28, 238, 189, 119, 198, 122, 62, 183, 78, 238, 62, 78, 98, 255, 189, 240, 198, 186, 190, 52, 235, 252, 62, 90, 79, 144, 190, 129, 245, 241, 61, 41, 28, 179, 190, 239, 55, 147, 187, 40, 255, 146, 62, 109, 90, 117, 189, 170, 30, 74, 62, 168, 93, 177, 190, 145, 247, 4, 61, 207, 43, 249, 190, 33, 6, 66, 189, 153, 57, 114, 190, 189, 190, 153, 59, 146, 23, 141, 190, 25, 52, 80, 62, 81, 244, 115, 60, 179, 249, 1, 190, 164, 155, 0, 62, 53, 212, 249, 190, 249, 118, 168, 189, 86, 105, 119, 62, 76, 247, 32, 62, 20, 144, 127, 62, 120, 90, 51, 61, 110, 28, 191, 189, 64, 75, 133, 189, 63, 10, 187, 60, 34, 255, 147, 62, 128, 192, 119, 189, 101, 207, 108, 62, 88, 189, 138, 189, 77, 206, 192, 189, 63, 152, 142, 190, 96, 40, 233, 61, 80, 102, 45, 61, 1, 174, 37, 61, 63, 99, 126, 61, 243, 24, 22, 190, 180, 147, 77, 62, 62, 110, 7, 190, 128, 220, 244, 187, 93, 226, 249, 189, 169, 10, 148, 190, 236, 0, 113, 61, 223, 51, 8, 62, 74, 160, 192, 61, 82, 236, 125, 61, 237, 81, 78, 62, 182, 10, 52, 190, 194, 51, 39, 61, 42, 178, 148, 190, 169, 28, 190, 62, 47, 112, 232, 61, 153, 95, 56, 190, 137, 170, 34, 189, 237, 81, 10, 190, 39, 129, 48, 62, 176, 110, 124, 188, 188, 91, 50, 62, 156, 152, 76, 62, 155, 162, 110, 62, 111, 28, 14, 62, 15, 1, 162, 190, 121, 116, 65, 63, 104, 18, 66, 191, 171, 232, 148, 62, 62, 160, 153, 62, 14, 249, 166, 191, 167, 21, 99, 62, 124, 168, 83, 190, 80, 185, 76, 62, 238, 197, 176, 190, 53, 177, 163, 190, 80, 71, 75, 62, 205, 213, 86, 190, 6, 179, 233, 190, 2, 203, 118, 61, 34, 48, 233, 189, 228, 111, 121, 62, 252, 211, 78, 62, 250, 184, 45, 191, 164, 61, 16, 63, 59, 145, 202, 190, 201, 236, 125, 188, 143, 141, 63, 62, 74, 158, 128, 190, 225, 113, 144, 61, 231, 238, 227, 189, 23, 74, 192, 186, 27, 204, 232, 60, 165, 19, 137, 61, 91, 182, 187, 61, 104, 221, 235, 62, 231, 171, 218, 188, 16, 121, 142, 62, 170, 216, 88, 190, 190, 146, 52, 191, 2, 191, 40, 62, 187, 124, 2, 61, 15, 120, 144, 190, 224, 1, 134, 62, 174, 151, 92, 62, 2, 194, 67, 190, 138, 63, 36, 191, 244, 0, 112, 190, 75, 2, 129, 58, 79, 8, 73, 189, 36, 134, 208, 190, 179, 89, 60, 189, 90, 225, 94, 190, 238, 165, 22, 62, 116, 250, 111, 61, 223, 241, 177, 190, 147, 232, 99, 190, 140, 250, 127, 190, 230, 14, 138, 189, 42, 125, 206, 62, 245, 11, 124, 190, 67, 16, 1, 62, 109, 102, 22, 190, 181, 72, 101, 190, 136, 122, 84, 62, 58, 26, 50, 62, 50, 38, 217, 61, 222, 222, 140, 189, 41, 44, 68, 189, 194, 120, 20, 60, 184, 219, 97, 191, 22, 67, 208, 61, 175, 100, 103, 188, 164, 253, 99, 61, 248, 112, 208, 189, 147, 55, 224, 61, 195, 34, 42, 190, 92, 159, 37, 189, 255, 2, 169, 61, 248, 227, 234, 189, 242, 25, 59, 61, 188, 122, 217, 61, 110, 159, 141, 62, 111, 246, 11, 62, 167, 88, 138, 62, 228, 206, 248, 61, 124, 174, 245, 61, 41, 4, 16, 190, 251, 219, 93, 190, 150, 169, 41, 189, 228, 238, 166, 59, 82, 225, 217, 189, 70, 240, 142, 190, 61, 86, 35, 61, 167, 46, 18, 191, 24, 255, 210, 190, 211, 72, 168, 190, 209, 118, 74, 189, 55, 205, 47, 191, 202, 209, 51, 188, 62, 39, 93, 191, 241, 150, 119, 190, 43, 205, 21, 191, 152, 32, 132, 62, 164, 81, 128, 190, 100, 162, 46, 190, 195, 114, 239, 61, 36, 208, 236, 59, 129, 156, 196, 190, 93, 255, 19, 190, 215, 21, 25, 191, 148, 209, 78, 62, 254, 241, 21, 189, 177, 249, 241, 188, 153, 228, 128, 61, 227, 191, 130, 189, 36, 95, 186, 62, 15, 135, 41, 62, 55, 104, 36, 62, 122, 108, 45, 190, 91, 150, 186, 190, 156, 136, 220, 61, 222, 99, 201, 60, 72, 145, 44, 190, 203, 117, 32, 190, 85, 17, 84, 190, 254, 94, 50, 190, 183, 198, 185, 190, 25, 208, 192, 61, 129, 3, 11, 62, 208, 189, 160, 190, 228, 169, 223, 62, 154, 88, 17, 190, 234, 18, 7, 62, 249, 246, 147, 62, 116, 124, 55, 190, 29, 122, 251, 61, 153, 67, 107, 190, 0, 57, 35, 191, 59, 147, 220, 62, 121, 71, 135, 189, 247, 52, 224, 189, 244, 253, 216, 190, 208, 207, 88, 190, 158, 241, 9, 190, 69, 249, 158, 61, 153, 236, 67, 190, 144, 23, 84, 60, 5, 21, 200, 60, 188, 152, 146, 61, 184, 180, 20, 190, 133, 189, 114, 190, 126, 184, 155, 62, 189, 60, 77, 62, 203, 113, 185, 190, 146, 123, 0, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 167, 91, 62, 76, 148, 252, 61, 68, 129, 152, 61, 34, 173, 13, 62, 22, 68, 129, 61, 47, 178, 92, 62, 167, 224, 165, 190, 210, 88, 190, 62, 197, 162, 63, 189, 245, 122, 99, 62, 57, 116, 99, 61, 82, 226, 42, 61, 72, 14, 218, 189, 42, 67, 136, 189, 243, 241, 15, 190, 123, 138, 198, 189, 131, 31, 142, 62, 3, 219, 249, 187, 26, 41, 106, 189, 111, 205, 93, 62, 39, 156, 26, 62, 146, 178, 136, 61, 144, 42, 53, 62, 248, 21, 233, 189, 241, 36, 22, 190, 172, 25, 164, 189, 199, 175, 139, 62, 100, 53, 111, 62, 160, 69, 197, 62, 201, 250, 139, 62, 209, 74, 130, 62, 148, 108, 72, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 48, 213, 62, 114, 180, 13, 62, 150, 93, 150, 62, 191, 177, 78, 63, 113, 125, 159, 189, 58, 81, 220, 61, 39, 161, 155, 62, 101, 66, 201, 190, 121, 247, 18, 60, 206, 31, 223, 62, 26, 74, 167, 63, 193, 232, 112, 60, 121, 206, 78, 190, 67, 175, 60, 63, 104, 117, 22, 62, 92, 97, 28, 62, 179, 67, 196, 189, 130, 216, 217, 190, 221, 141, 108, 62, 42, 139, 44, 63, 21, 73, 167, 59, 166, 208, 40, 63, 44, 226, 182, 190, 100, 225, 11, 190, 233, 16, 209, 61, 225, 141, 52, 63, 241, 203, 222, 189, 88, 9, 103, 191, 22, 250, 63, 191, 95, 36, 66, 61, 108, 36, 5, 63, 131, 10, 217, 190, 90, 70, 223, 189, 95, 167, 197, 189, 246, 83, 42, 61, 50, 59, 0, 62, 235, 208, 74, 190, 144, 174, 170, 190, 123, 74, 155, 62, 1, 6, 186, 189, 135, 166, 103, 188, 237, 10, 6, 62, 149, 101, 189, 61, 2, 5, 236, 61, 10, 90, 230, 62, 229, 142, 255, 62, 9, 98, 197, 60, 144, 189, 174, 60, 44, 136, 29, 190, 160, 154, 140, 189, 175, 126, 206, 62, 203, 135, 199, 62, 233, 171, 121, 191, 116, 100, 35, 61, 114, 247, 233, 189, 152, 129, 228, 188, 179, 249, 16, 188, 91, 117, 207, 62, 123, 181, 130, 190, 226, 224, 2, 63, 76, 67, 39, 60, 85, 148, 129, 190, 223, 52, 167, 189, 63, 16, 92, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {108, 134, 55, 190, 215, 231, 196, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {198, 117, 116, 61, 179, 128, 215, 63, 22, 168, 99, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {52, 90, 152, 62, 185, 191, 182, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0064/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}