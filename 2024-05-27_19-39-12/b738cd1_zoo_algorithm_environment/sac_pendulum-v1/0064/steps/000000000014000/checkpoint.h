// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 129, 151, 61, 89, 130, 230, 190, 39, 214, 166, 62, 69, 94, 173, 61, 204, 52, 190, 191, 119, 65, 167, 190, 72, 91, 99, 60, 70, 132, 128, 63, 29, 147, 191, 62, 76, 68, 240, 189, 5, 240, 149, 191, 155, 216, 141, 190, 147, 50, 91, 62, 57, 33, 34, 63, 35, 95, 240, 190, 24, 248, 36, 62, 90, 142, 125, 190, 173, 71, 91, 188, 72, 153, 32, 191, 115, 121, 127, 61, 114, 151, 136, 190, 4, 194, 71, 189, 126, 95, 188, 191, 86, 159, 1, 189, 132, 208, 227, 190, 24, 226, 128, 190, 241, 123, 15, 191, 49, 192, 2, 191, 238, 167, 64, 63, 149, 251, 126, 62, 98, 0, 109, 63, 2, 218, 168, 63, 92, 160, 183, 62, 253, 84, 4, 62, 191, 111, 78, 191, 249, 201, 45, 62, 121, 79, 177, 189, 164, 30, 153, 62, 156, 170, 51, 191, 155, 148, 227, 189, 5, 253, 247, 190, 23, 179, 22, 63, 65, 4, 85, 191, 45, 62, 165, 63, 127, 107, 170, 62, 214, 20, 18, 63, 190, 142, 86, 63, 105, 189, 25, 62, 254, 18, 19, 191, 69, 207, 211, 61, 49, 207, 187, 62, 40, 51, 172, 62, 24, 4, 30, 63, 248, 91, 226, 62, 159, 90, 20, 63, 130, 84, 227, 59, 119, 172, 141, 190, 126, 7, 24, 62, 37, 84, 48, 191, 120, 153, 241, 190, 27, 35, 17, 191, 236, 242, 6, 191, 69, 28, 33, 63, 251, 199, 4, 63, 237, 150, 202, 62, 242, 116, 253, 190, 28, 48, 202, 62, 219, 63, 147, 189, 49, 142, 12, 63, 156, 160, 173, 61, 17, 161, 135, 189, 218, 163, 25, 63, 134, 154, 113, 63, 75, 151, 20, 191, 87, 222, 21, 191, 84, 131, 181, 190, 179, 197, 11, 63, 54, 220, 40, 61, 133, 228, 116, 190, 103, 122, 112, 191, 156, 195, 43, 190, 213, 57, 191, 190, 94, 182, 50, 63, 213, 78, 13, 63, 235, 140, 29, 63, 202, 48, 70, 63, 243, 180, 136, 62, 108, 254, 102, 63, 141, 97, 190, 190, 90, 200, 128, 190, 100, 82, 6, 63, 254, 84, 203, 61, 243, 78, 17, 63, 180, 62, 116, 191, 200, 213, 75, 63, 76, 158, 149, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 224, 67, 191, 75, 51, 220, 61, 192, 158, 10, 190, 73, 53, 135, 190, 219, 115, 132, 189, 75, 38, 216, 190, 231, 122, 25, 191, 57, 118, 150, 62, 3, 189, 23, 191, 82, 27, 27, 190, 232, 120, 32, 191, 106, 217, 75, 62, 253, 9, 172, 189, 116, 62, 35, 62, 176, 23, 130, 62, 123, 83, 253, 61, 134, 35, 247, 190, 44, 204, 45, 61, 167, 92, 145, 191, 87, 65, 65, 191, 123, 167, 245, 62, 78, 187, 197, 187, 27, 27, 42, 63, 94, 91, 33, 62, 29, 227, 248, 188, 33, 201, 46, 63, 3, 43, 54, 63, 176, 168, 157, 61, 9, 96, 202, 190, 195, 221, 234, 187, 1, 49, 155, 62, 222, 104, 52, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 32, 135, 190, 133, 3, 43, 190, 237, 158, 26, 190, 6, 16, 76, 191, 131, 135, 75, 60, 204, 202, 24, 190, 154, 7, 25, 191, 21, 78, 166, 190, 37, 84, 7, 190, 89, 122, 76, 190, 131, 19, 125, 190, 140, 247, 56, 61, 93, 251, 10, 189, 206, 181, 111, 190, 241, 109, 187, 62, 91, 126, 61, 62, 56, 67, 109, 189, 162, 6, 165, 189, 7, 130, 223, 62, 87, 252, 31, 62, 201, 99, 152, 62, 7, 112, 251, 61, 216, 137, 212, 61, 203, 99, 232, 189, 161, 12, 48, 62, 104, 66, 161, 62, 197, 156, 18, 187, 229, 21, 135, 62, 236, 89, 170, 190, 89, 18, 147, 61, 46, 15, 17, 190, 142, 246, 42, 62, 249, 118, 202, 190, 96, 36, 68, 189, 234, 8, 206, 190, 160, 177, 129, 190, 235, 231, 64, 62, 133, 146, 194, 189, 219, 54, 135, 189, 167, 222, 13, 190, 198, 59, 131, 189, 100, 186, 207, 190, 32, 213, 164, 189, 242, 209, 128, 62, 208, 79, 172, 61, 241, 235, 11, 62, 197, 174, 224, 190, 52, 161, 177, 188, 51, 221, 94, 190, 237, 114, 174, 60, 121, 192, 17, 63, 8, 206, 13, 61, 137, 22, 139, 61, 160, 199, 4, 62, 84, 141, 78, 61, 224, 149, 42, 62, 70, 126, 60, 61, 99, 87, 225, 190, 16, 182, 157, 189, 28, 74, 213, 188, 183, 243, 38, 190, 74, 54, 165, 62, 16, 204, 225, 189, 206, 39, 56, 191, 186, 107, 208, 190, 178, 42, 156, 62, 234, 91, 223, 189, 104, 244, 142, 191, 26, 242, 167, 190, 182, 118, 205, 61, 144, 27, 244, 190, 144, 142, 150, 190, 89, 150, 107, 191, 149, 156, 234, 189, 12, 0, 181, 190, 106, 139, 102, 62, 146, 65, 165, 189, 38, 162, 83, 189, 223, 191, 174, 62, 157, 40, 188, 61, 37, 70, 220, 61, 240, 151, 252, 188, 233, 241, 170, 62, 163, 143, 136, 61, 110, 12, 153, 61, 196, 9, 43, 62, 191, 138, 45, 62, 96, 138, 6, 190, 153, 148, 6, 62, 213, 137, 147, 62, 86, 133, 181, 59, 120, 151, 51, 61, 54, 213, 156, 190, 110, 232, 113, 62, 170, 190, 19, 61, 87, 164, 157, 62, 135, 238, 17, 189, 231, 187, 145, 190, 237, 80, 162, 190, 226, 255, 47, 191, 141, 149, 139, 191, 89, 194, 35, 190, 101, 4, 87, 191, 233, 223, 136, 190, 112, 196, 158, 191, 223, 240, 185, 61, 187, 34, 171, 190, 84, 50, 65, 62, 48, 233, 241, 190, 24, 95, 145, 189, 230, 17, 1, 61, 9, 210, 54, 190, 25, 111, 2, 189, 11, 207, 64, 187, 206, 237, 65, 189, 156, 197, 219, 59, 227, 213, 246, 62, 38, 179, 61, 191, 229, 149, 117, 189, 186, 96, 127, 190, 82, 77, 228, 190, 128, 155, 23, 62, 94, 197, 50, 62, 165, 237, 184, 61, 128, 171, 173, 190, 27, 63, 188, 190, 179, 107, 88, 189, 78, 197, 153, 62, 228, 168, 229, 61, 248, 199, 119, 190, 241, 253, 38, 190, 46, 193, 134, 61, 164, 2, 60, 62, 87, 225, 16, 62, 108, 156, 107, 62, 220, 254, 142, 60, 34, 211, 245, 187, 247, 12, 230, 61, 4, 121, 21, 190, 218, 114, 240, 189, 196, 34, 41, 60, 193, 28, 153, 62, 211, 251, 205, 189, 148, 190, 115, 62, 241, 100, 159, 61, 182, 216, 149, 61, 46, 205, 72, 190, 55, 36, 34, 190, 226, 109, 205, 185, 124, 134, 33, 190, 243, 82, 91, 62, 118, 31, 80, 62, 151, 147, 1, 190, 41, 117, 185, 62, 178, 228, 84, 62, 130, 38, 163, 190, 70, 196, 82, 61, 20, 27, 227, 189, 13, 22, 129, 61, 21, 63, 207, 59, 174, 49, 110, 190, 75, 114, 173, 61, 83, 202, 146, 190, 4, 160, 140, 190, 210, 107, 245, 60, 247, 111, 103, 61, 130, 188, 136, 190, 221, 130, 148, 61, 12, 68, 152, 189, 236, 7, 125, 190, 165, 234, 3, 191, 26, 14, 158, 62, 211, 95, 23, 62, 107, 94, 229, 60, 175, 12, 110, 189, 4, 231, 171, 61, 92, 39, 158, 189, 51, 233, 127, 189, 224, 119, 128, 62, 121, 162, 102, 189, 240, 30, 188, 187, 20, 88, 65, 62, 152, 128, 244, 60, 96, 191, 132, 187, 29, 146, 62, 62, 91, 9, 17, 62, 150, 52, 87, 62, 45, 78, 197, 189, 54, 96, 174, 190, 0, 59, 88, 62, 9, 83, 51, 62, 27, 77, 84, 190, 74, 199, 153, 190, 10, 171, 6, 62, 181, 108, 114, 190, 237, 142, 54, 189, 45, 61, 226, 189, 97, 205, 133, 60, 218, 38, 43, 190, 70, 117, 143, 62, 74, 126, 81, 189, 23, 166, 46, 190, 156, 43, 33, 191, 49, 199, 86, 62, 89, 67, 9, 61, 4, 2, 196, 62, 69, 2, 248, 60, 72, 6, 201, 190, 152, 160, 108, 190, 133, 232, 121, 190, 64, 46, 188, 62, 212, 140, 122, 62, 204, 48, 18, 61, 194, 47, 123, 62, 24, 122, 117, 62, 128, 214, 144, 189, 180, 95, 176, 62, 81, 239, 11, 191, 226, 55, 160, 189, 86, 15, 78, 190, 20, 205, 129, 190, 108, 0, 152, 62, 10, 142, 209, 187, 24, 61, 28, 191, 87, 202, 141, 190, 205, 153, 102, 190, 133, 200, 217, 60, 253, 4, 45, 60, 130, 125, 129, 62, 31, 218, 103, 61, 157, 108, 104, 62, 10, 62, 23, 191, 68, 178, 221, 61, 239, 232, 57, 62, 238, 135, 140, 189, 14, 57, 128, 190, 126, 86, 155, 188, 90, 100, 155, 61, 123, 252, 76, 190, 124, 225, 231, 62, 40, 176, 62, 190, 9, 214, 156, 61, 214, 98, 34, 191, 186, 194, 157, 190, 109, 224, 27, 190, 195, 239, 77, 190, 119, 219, 200, 189, 204, 17, 145, 189, 172, 165, 131, 190, 94, 21, 103, 62, 125, 53, 194, 189, 191, 199, 160, 190, 242, 189, 214, 61, 109, 233, 223, 61, 63, 8, 152, 62, 156, 229, 185, 62, 115, 68, 254, 188, 224, 249, 48, 190, 50, 156, 145, 61, 186, 31, 96, 189, 140, 154, 72, 189, 105, 129, 114, 189, 142, 162, 42, 190, 151, 220, 25, 190, 120, 29, 178, 61, 110, 19, 245, 61, 33, 184, 14, 190, 150, 81, 48, 190, 1, 160, 203, 189, 84, 34, 40, 190, 146, 244, 235, 189, 155, 230, 11, 61, 217, 121, 245, 189, 43, 206, 27, 61, 36, 184, 178, 61, 85, 52, 3, 62, 212, 78, 196, 188, 80, 35, 97, 189, 173, 218, 6, 61, 15, 43, 4, 61, 25, 16, 238, 188, 102, 219, 36, 190, 140, 39, 140, 189, 129, 168, 152, 189, 18, 72, 32, 190, 53, 14, 156, 61, 106, 174, 216, 61, 103, 30, 45, 190, 62, 168, 155, 189, 73, 160, 229, 189, 76, 20, 240, 190, 236, 231, 140, 191, 1, 224, 121, 190, 108, 195, 24, 60, 207, 175, 26, 191, 67, 55, 247, 189, 26, 198, 47, 191, 107, 174, 98, 190, 49, 24, 191, 190, 84, 103, 160, 62, 91, 10, 59, 189, 253, 201, 123, 61, 108, 121, 39, 189, 180, 180, 58, 190, 157, 121, 107, 190, 231, 62, 5, 61, 56, 92, 56, 190, 120, 82, 140, 188, 180, 128, 42, 189, 161, 128, 100, 61, 163, 59, 46, 62, 29, 74, 233, 61, 5, 230, 59, 62, 241, 251, 253, 189, 173, 190, 122, 62, 154, 25, 227, 189, 3, 176, 252, 190, 149, 231, 123, 62, 251, 144, 96, 189, 156, 172, 67, 189, 14, 186, 91, 189, 82, 118, 155, 189, 95, 240, 189, 190, 13, 102, 136, 190, 159, 106, 189, 62, 46, 21, 242, 189, 20, 193, 2, 62, 254, 37, 201, 190, 153, 145, 3, 190, 176, 114, 129, 191, 58, 176, 111, 190, 68, 236, 158, 189, 233, 14, 73, 62, 182, 27, 166, 190, 153, 18, 58, 191, 16, 185, 150, 62, 7, 11, 167, 190, 91, 105, 90, 190, 212, 8, 134, 190, 21, 17, 144, 190, 162, 53, 161, 190, 117, 117, 93, 60, 30, 200, 8, 191, 191, 76, 20, 190, 78, 212, 15, 191, 124, 176, 126, 61, 51, 96, 159, 190, 48, 81, 34, 191, 4, 143, 97, 190, 76, 176, 101, 191, 227, 195, 139, 190, 241, 65, 143, 62, 235, 148, 123, 61, 84, 65, 219, 189, 143, 175, 219, 189, 177, 107, 72, 189, 76, 52, 223, 61, 176, 175, 4, 189, 219, 110, 210, 60, 116, 121, 230, 188, 212, 67, 47, 190, 185, 108, 0, 190, 71, 18, 13, 61, 136, 128, 224, 189, 60, 208, 178, 189, 107, 146, 206, 61, 137, 80, 62, 189, 60, 219, 191, 189, 76, 20, 18, 190, 22, 242, 40, 190, 182, 167, 11, 190, 200, 100, 44, 61, 206, 19, 205, 188, 16, 85, 252, 189, 159, 42, 15, 189, 153, 8, 13, 190, 22, 50, 75, 189, 95, 0, 217, 61, 101, 245, 5, 190, 177, 195, 61, 187, 60, 255, 145, 61, 216, 125, 0, 61, 180, 14, 238, 189, 93, 98, 215, 189, 229, 124, 227, 62, 71, 65, 84, 189, 161, 138, 16, 62, 161, 155, 121, 62, 250, 180, 219, 62, 182, 76, 93, 189, 28, 7, 38, 189, 122, 61, 41, 190, 149, 70, 121, 189, 49, 25, 152, 189, 2, 110, 24, 63, 37, 177, 230, 188, 206, 3, 62, 62, 164, 240, 161, 188, 149, 30, 153, 190, 171, 24, 88, 62, 61, 211, 27, 62, 99, 247, 51, 62, 207, 30, 186, 61, 4, 139, 171, 189, 182, 81, 176, 189, 107, 5, 13, 62, 34, 6, 19, 189, 220, 79, 237, 61, 207, 30, 200, 190, 38, 140, 133, 190, 155, 96, 28, 191, 82, 84, 24, 190, 241, 84, 240, 62, 12, 29, 13, 190, 192, 188, 93, 61, 13, 25, 14, 191, 55, 130, 159, 190, 68, 29, 241, 61, 47, 247, 45, 191, 231, 134, 2, 190, 124, 250, 224, 61, 140, 111, 242, 61, 81, 85, 29, 190, 192, 189, 158, 191, 88, 60, 59, 190, 41, 148, 69, 191, 255, 45, 94, 190, 19, 212, 252, 61, 15, 31, 51, 62, 253, 214, 16, 191, 0, 79, 227, 61, 152, 157, 193, 190, 54, 32, 50, 191, 253, 60, 149, 190, 55, 33, 134, 62, 217, 117, 144, 62, 74, 111, 232, 62, 249, 39, 166, 61, 16, 108, 136, 62, 90, 107, 196, 190, 192, 217, 133, 62, 251, 136, 212, 190, 239, 117, 255, 60, 97, 50, 253, 62, 162, 6, 153, 190, 93, 205, 208, 62, 234, 176, 220, 189, 143, 44, 239, 190, 195, 219, 251, 60, 54, 63, 49, 190, 115, 6, 7, 190, 96, 225, 129, 61, 151, 254, 195, 189, 215, 155, 203, 189, 254, 80, 251, 188, 30, 248, 3, 190, 131, 160, 29, 190, 52, 59, 31, 62, 190, 66, 139, 61, 198, 133, 40, 62, 4, 108, 248, 61, 191, 122, 48, 190, 35, 97, 151, 61, 39, 112, 24, 189, 106, 34, 113, 189, 227, 72, 147, 189, 74, 4, 206, 61, 144, 178, 232, 187, 54, 175, 15, 62, 55, 178, 252, 189, 106, 220, 48, 190, 160, 121, 179, 189, 63, 215, 7, 61, 59, 160, 55, 190, 143, 242, 20, 190, 181, 6, 120, 189, 140, 155, 201, 59, 66, 194, 44, 62, 210, 100, 237, 59, 11, 104, 231, 61, 37, 171, 36, 190, 111, 142, 32, 190, 78, 50, 37, 62, 150, 115, 135, 188, 187, 251, 139, 187, 236, 24, 224, 188, 239, 55, 22, 190, 79, 134, 7, 62, 88, 120, 49, 62, 166, 126, 193, 189, 212, 133, 234, 189, 149, 203, 252, 61, 36, 12, 156, 189, 9, 148, 33, 189, 254, 224, 177, 189, 26, 135, 82, 61, 44, 4, 249, 61, 16, 227, 199, 60, 11, 163, 217, 188, 156, 166, 215, 60, 43, 229, 16, 62, 128, 127, 52, 190, 26, 103, 217, 189, 235, 190, 193, 189, 68, 154, 90, 189, 89, 27, 170, 188, 21, 23, 36, 189, 118, 32, 16, 190, 191, 251, 117, 61, 113, 34, 111, 189, 61, 131, 252, 189, 29, 237, 162, 189, 252, 8, 127, 61, 108, 178, 172, 61, 194, 67, 28, 188, 218, 54, 242, 61, 255, 161, 254, 61, 209, 182, 22, 62, 154, 18, 35, 59, 127, 234, 167, 62, 113, 146, 48, 189, 4, 241, 82, 61, 249, 194, 166, 60, 192, 165, 4, 190, 91, 42, 22, 190, 220, 155, 164, 62, 215, 24, 220, 189, 50, 201, 164, 62, 254, 82, 38, 190, 90, 179, 121, 62, 239, 134, 179, 190, 118, 173, 75, 188, 130, 217, 22, 61, 83, 224, 24, 190, 210, 1, 170, 189, 193, 233, 117, 61, 16, 34, 3, 190, 223, 210, 185, 61, 225, 131, 170, 62, 215, 38, 69, 61, 153, 70, 184, 189, 111, 255, 123, 62, 170, 49, 198, 60, 77, 170, 68, 190, 239, 98, 137, 62, 254, 192, 129, 190, 252, 94, 26, 189, 229, 214, 156, 189, 205, 188, 59, 62, 138, 90, 120, 60, 238, 188, 28, 189, 186, 35, 128, 190, 117, 31, 125, 189, 131, 247, 150, 189, 95, 253, 191, 62, 19, 138, 245, 188, 33, 35, 154, 189, 171, 249, 160, 189, 92, 176, 160, 190, 31, 173, 154, 62, 29, 195, 128, 61, 55, 252, 247, 61, 22, 98, 221, 190, 183, 155, 127, 190, 32, 167, 212, 189, 239, 200, 156, 62, 188, 19, 31, 62, 35, 201, 56, 189, 29, 70, 110, 62, 5, 120, 150, 61, 6, 235, 82, 189, 182, 182, 171, 61, 129, 213, 184, 62, 179, 184, 187, 62, 14, 86, 37, 62, 65, 175, 206, 190, 15, 205, 128, 188, 161, 64, 164, 190, 154, 131, 165, 60, 234, 61, 226, 189, 242, 110, 242, 61, 112, 113, 227, 189, 255, 210, 170, 61, 208, 255, 101, 190, 21, 69, 85, 62, 137, 144, 42, 191, 6, 135, 87, 62, 169, 226, 121, 190, 123, 134, 171, 61, 143, 164, 160, 189, 79, 85, 247, 189, 28, 189, 143, 62, 231, 188, 193, 189, 219, 215, 7, 62, 16, 86, 231, 190, 57, 176, 195, 190, 25, 102, 19, 191, 240, 23, 67, 189, 14, 129, 248, 60, 110, 227, 10, 190, 94, 160, 150, 190, 2, 163, 210, 61, 51, 82, 213, 189, 37, 212, 177, 190, 131, 176, 141, 62, 58, 88, 54, 190, 190, 4, 172, 60, 235, 224, 106, 62, 117, 51, 124, 189, 59, 175, 139, 62, 233, 30, 5, 191, 212, 154, 160, 191, 123, 17, 100, 190, 206, 236, 51, 190, 152, 255, 26, 190, 217, 215, 185, 189, 49, 1, 221, 190, 186, 195, 235, 188, 184, 198, 10, 191, 238, 65, 155, 61, 51, 43, 82, 190, 222, 152, 190, 189, 113, 177, 5, 62, 101, 120, 182, 190, 185, 242, 153, 188, 30, 133, 60, 190, 209, 153, 169, 62, 160, 78, 82, 62, 121, 161, 71, 61, 241, 108, 154, 62, 152, 36, 129, 62, 234, 95, 137, 189, 239, 172, 110, 62, 193, 187, 220, 189, 141, 171, 43, 62, 147, 123, 148, 62, 124, 72, 217, 190, 167, 235, 219, 62, 69, 233, 234, 188, 87, 161, 212, 189, 238, 114, 27, 190, 83, 5, 202, 191, 238, 185, 64, 190, 184, 112, 169, 61, 120, 191, 42, 190, 215, 79, 193, 61, 221, 48, 80, 190, 154, 214, 157, 191, 60, 128, 244, 190, 13, 170, 129, 190, 236, 111, 62, 191, 181, 122, 104, 190, 139, 29, 22, 190, 195, 99, 109, 190, 76, 1, 194, 190, 211, 58, 153, 62, 150, 155, 160, 190, 74, 145, 131, 61, 75, 125, 19, 63, 91, 183, 44, 190, 22, 244, 10, 190, 144, 9, 63, 62, 158, 216, 48, 62, 160, 144, 62, 61, 168, 23, 133, 62, 152, 205, 97, 62, 64, 194, 221, 190, 250, 168, 33, 190, 28, 198, 27, 190, 233, 214, 12, 62, 18, 7, 88, 62, 212, 56, 215, 190, 32, 233, 165, 190, 254, 178, 35, 61, 188, 11, 2, 191, 140, 128, 116, 191, 215, 5, 162, 190, 76, 137, 0, 62, 19, 83, 54, 191, 54, 145, 161, 190, 206, 0, 147, 191, 61, 51, 73, 191, 100, 146, 52, 189, 189, 20, 121, 62, 250, 108, 34, 190, 68, 39, 187, 190, 237, 83, 163, 189, 186, 247, 18, 61, 111, 139, 235, 190, 82, 221, 219, 190, 132, 222, 250, 60, 200, 140, 190, 189, 124, 98, 224, 62, 208, 80, 58, 62, 182, 235, 18, 190, 161, 232, 243, 190, 146, 70, 181, 60, 38, 47, 68, 62, 171, 202, 96, 62, 66, 146, 11, 62, 145, 95, 192, 190, 131, 119, 59, 190, 197, 210, 220, 190, 102, 199, 168, 62, 193, 163, 77, 190, 44, 61, 212, 190, 228, 224, 34, 190, 4, 231, 182, 190, 191, 5, 136, 61, 58, 235, 253, 189, 164, 124, 152, 62, 74, 250, 231, 190, 239, 107, 205, 188, 200, 55, 158, 62, 154, 84, 165, 190, 77, 26, 39, 191, 121, 240, 88, 61, 227, 233, 1, 190, 135, 113, 39, 189, 24, 102, 174, 60, 119, 135, 176, 62, 209, 227, 198, 189, 22, 65, 12, 191, 95, 100, 19, 191, 195, 207, 112, 190, 50, 6, 101, 189, 147, 0, 152, 190, 212, 73, 75, 190, 83, 51, 231, 60, 124, 8, 179, 62, 115, 138, 169, 190, 2, 244, 163, 61, 250, 37, 45, 190, 191, 145, 201, 60, 243, 136, 4, 188, 152, 33, 186, 62, 19, 253, 214, 189, 141, 17, 167, 189, 88, 72, 202, 60, 119, 172, 123, 189, 78, 80, 52, 61, 158, 164, 227, 189, 244, 140, 96, 60, 127, 252, 44, 190, 188, 118, 23, 62, 22, 78, 30, 62, 132, 9, 38, 60, 91, 252, 181, 189, 76, 31, 132, 189, 90, 126, 166, 61, 226, 223, 22, 190, 65, 135, 236, 188, 249, 155, 34, 62, 134, 129, 95, 189, 121, 103, 67, 60, 137, 24, 129, 188, 19, 85, 61, 189, 221, 21, 0, 190, 94, 15, 70, 189, 241, 33, 0, 62, 9, 211, 236, 61, 72, 232, 215, 60, 196, 220, 31, 189, 185, 231, 239, 189, 201, 61, 22, 62, 221, 138, 226, 189, 74, 26, 22, 190, 65, 212, 180, 189, 209, 168, 197, 61, 12, 101, 77, 188, 42, 83, 5, 190, 18, 187, 5, 190, 247, 166, 195, 189, 73, 166, 180, 61, 120, 151, 87, 61, 225, 246, 106, 188, 28, 39, 170, 61, 64, 227, 48, 190, 210, 254, 245, 61, 190, 137, 149, 188, 134, 109, 114, 61, 169, 154, 168, 61, 156, 65, 34, 190, 251, 149, 227, 189, 132, 197, 171, 189, 191, 173, 177, 189, 108, 107, 217, 61, 148, 194, 246, 189, 96, 18, 182, 61, 114, 66, 35, 190, 23, 157, 154, 188, 246, 252, 51, 60, 95, 231, 46, 190, 228, 110, 151, 61, 176, 6, 236, 189, 221, 222, 132, 61, 8, 242, 135, 189, 123, 138, 48, 62, 101, 211, 19, 190, 78, 207, 161, 61, 28, 42, 78, 189, 39, 195, 238, 188, 241, 158, 179, 62, 198, 121, 138, 62, 80, 110, 245, 61, 231, 28, 238, 189, 231, 86, 101, 62, 128, 158, 11, 63, 110, 50, 16, 190, 239, 253, 12, 191, 177, 141, 10, 63, 62, 211, 182, 61, 95, 62, 237, 61, 56, 169, 188, 190, 171, 217, 188, 59, 50, 130, 155, 62, 3, 216, 96, 189, 184, 140, 60, 62, 199, 202, 4, 191, 203, 64, 165, 188, 24, 124, 209, 190, 155, 94, 43, 189, 87, 178, 147, 190, 214, 52, 127, 189, 24, 91, 183, 190, 159, 170, 124, 62, 91, 22, 27, 61, 181, 176, 24, 190, 236, 56, 25, 62, 64, 4, 44, 191, 129, 20, 23, 190, 109, 102, 159, 62, 32, 32, 228, 61, 30, 119, 133, 62, 138, 254, 195, 59, 155, 240, 233, 188, 68, 54, 161, 189, 63, 10, 187, 60, 175, 158, 128, 62, 159, 44, 18, 61, 224, 91, 84, 62, 3, 72, 189, 189, 222, 200, 117, 189, 129, 225, 158, 190, 134, 205, 213, 61, 128, 165, 3, 61, 47, 229, 217, 187, 173, 6, 128, 61, 120, 173, 106, 190, 77, 176, 67, 62, 227, 3, 12, 190, 224, 47, 130, 187, 189, 177, 243, 189, 57, 92, 149, 190, 161, 135, 89, 61, 172, 81, 225, 61, 218, 0, 214, 61, 173, 6, 145, 61, 183, 189, 128, 62, 228, 69, 85, 190, 111, 227, 186, 61, 231, 80, 136, 190, 218, 183, 177, 62, 189, 64, 209, 61, 104, 223, 76, 190, 209, 60, 32, 189, 130, 55, 24, 190, 81, 166, 79, 62, 108, 10, 166, 59, 188, 91, 50, 62, 150, 103, 65, 62, 31, 231, 150, 62, 242, 17, 7, 62, 39, 91, 235, 189, 169, 235, 75, 63, 46, 241, 63, 191, 90, 77, 156, 62, 60, 91, 212, 62, 139, 143, 206, 191, 92, 250, 128, 62, 166, 122, 9, 62, 1, 40, 229, 61, 139, 133, 11, 191, 53, 198, 173, 190, 185, 121, 177, 62, 132, 192, 71, 190, 197, 117, 244, 190, 196, 150, 230, 61, 87, 193, 14, 190, 85, 31, 139, 62, 8, 141, 71, 62, 60, 161, 48, 191, 247, 206, 12, 63, 43, 118, 216, 190, 47, 37, 129, 189, 81, 109, 56, 62, 103, 240, 124, 190, 156, 192, 79, 61, 158, 148, 150, 190, 73, 167, 205, 59, 118, 63, 23, 61, 165, 19, 137, 61, 81, 82, 229, 61, 213, 133, 2, 63, 16, 76, 59, 188, 63, 150, 150, 62, 207, 56, 166, 190, 124, 17, 49, 191, 206, 240, 55, 62, 250, 38, 243, 61, 131, 61, 171, 190, 78, 154, 116, 62, 190, 45, 183, 61, 206, 208, 157, 190, 109, 147, 63, 191, 64, 21, 112, 190, 52, 196, 128, 60, 181, 54, 46, 189, 180, 157, 190, 190, 149, 159, 225, 61, 144, 75, 120, 190, 251, 96, 38, 62, 171, 93, 99, 61, 217, 79, 223, 190, 182, 109, 173, 190, 52, 190, 144, 190, 74, 58, 199, 59, 150, 68, 227, 62, 233, 138, 124, 190, 3, 113, 217, 61, 64, 202, 94, 190, 50, 209, 147, 190, 1, 68, 97, 62, 58, 26, 50, 62, 123, 34, 97, 61, 244, 29, 143, 189, 49, 135, 178, 189, 69, 143, 54, 189, 205, 56, 100, 191, 131, 102, 139, 61, 207, 44, 228, 188, 205, 236, 13, 61, 148, 194, 31, 190, 209, 125, 23, 62, 252, 43, 122, 190, 34, 14, 142, 188, 156, 0, 135, 62, 169, 67, 47, 190, 34, 222, 175, 60, 113, 106, 214, 61, 159, 229, 141, 62, 67, 216, 219, 61, 235, 144, 142, 62, 45, 4, 35, 62, 215, 226, 2, 62, 82, 15, 62, 190, 142, 68, 13, 190, 22, 169, 86, 188, 161, 129, 89, 57, 35, 15, 231, 189, 35, 73, 105, 190, 1, 156, 245, 61, 115, 231, 179, 191, 39, 114, 255, 190, 36, 61, 155, 190, 209, 118, 74, 189, 118, 217, 69, 191, 116, 224, 199, 188, 233, 176, 76, 191, 210, 70, 119, 190, 253, 236, 37, 191, 75, 123, 120, 62, 248, 171, 106, 190, 203, 117, 73, 190, 228, 237, 27, 62, 16, 190, 49, 61, 3, 42, 221, 190, 6, 194, 234, 189, 218, 42, 68, 191, 174, 35, 251, 61, 110, 88, 231, 189, 159, 94, 181, 188, 55, 115, 171, 61, 46, 147, 92, 189, 31, 195, 214, 62, 246, 133, 55, 62, 73, 227, 56, 62, 30, 178, 19, 190, 101, 61, 204, 190, 235, 239, 32, 62, 230, 0, 125, 61, 206, 149, 141, 190, 203, 117, 32, 190, 250, 61, 61, 190, 89, 83, 176, 61, 141, 61, 131, 190, 51, 159, 220, 61, 129, 3, 11, 62, 234, 242, 182, 190, 78, 171, 59, 63, 227, 0, 55, 190, 71, 96, 49, 62, 244, 104, 191, 62, 165, 204, 100, 188, 197, 67, 11, 62, 96, 11, 152, 190, 120, 129, 168, 191, 190, 21, 219, 62, 121, 71, 135, 189, 107, 245, 195, 189, 253, 81, 21, 191, 97, 16, 110, 190, 29, 244, 240, 190, 244, 99, 226, 61, 73, 218, 58, 190, 128, 221, 57, 189, 22, 241, 103, 61, 166, 134, 209, 61, 244, 106, 184, 189, 166, 135, 116, 190, 230, 234, 181, 62, 51, 126, 109, 62, 41, 99, 188, 190, 141, 1, 182, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 62, 82, 62, 95, 190, 13, 62, 240, 134, 141, 61, 136, 155, 83, 62, 107, 142, 196, 61, 91, 69, 118, 62, 182, 76, 169, 190, 164, 158, 206, 62, 197, 162, 63, 189, 143, 27, 113, 62, 10, 106, 175, 188, 46, 101, 126, 60, 107, 80, 24, 190, 201, 234, 162, 189, 243, 241, 15, 190, 123, 138, 198, 189, 82, 50, 150, 62, 215, 100, 27, 188, 232, 57, 153, 189, 110, 207, 113, 62, 69, 250, 211, 61, 118, 217, 152, 61, 61, 236, 60, 62, 248, 21, 233, 189, 241, 36, 22, 190, 148, 186, 85, 189, 233, 66, 157, 62, 143, 28, 108, 62, 177, 103, 193, 62, 95, 204, 163, 62, 138, 163, 145, 62, 11, 27, 29, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 183, 198, 62, 36, 120, 50, 62, 201, 96, 160, 62, 20, 58, 77, 63, 210, 69, 210, 189, 52, 243, 213, 61, 166, 153, 159, 62, 82, 55, 246, 190, 121, 247, 18, 60, 209, 157, 0, 63, 253, 243, 170, 63, 125, 218, 235, 188, 92, 36, 180, 190, 124, 27, 94, 63, 104, 117, 22, 62, 92, 97, 28, 62, 67, 66, 191, 189, 126, 137, 221, 190, 175, 210, 125, 62, 189, 131, 55, 63, 208, 197, 253, 188, 8, 157, 60, 63, 250, 91, 16, 191, 100, 225, 11, 190, 233, 16, 209, 61, 75, 127, 123, 63, 1, 184, 136, 189, 115, 238, 145, 191, 60, 116, 86, 191, 181, 201, 126, 61, 95, 98, 22, 63, 33, 213, 10, 191, 86, 36, 221, 189, 189, 146, 83, 190, 15, 16, 252, 60, 222, 17, 126, 62, 107, 228, 40, 190, 58, 155, 175, 190, 12, 1, 144, 62, 8, 195, 115, 189, 135, 166, 103, 188, 30, 235, 67, 62, 52, 171, 48, 62, 138, 154, 215, 61, 145, 34, 36, 63, 160, 83, 165, 62, 9, 98, 197, 60, 144, 189, 174, 60, 178, 186, 87, 190, 193, 32, 5, 190, 157, 188, 23, 63, 20, 31, 251, 62, 142, 24, 147, 191, 199, 45, 150, 60, 216, 33, 138, 61, 152, 129, 228, 188, 179, 249, 16, 188, 116, 82, 139, 62, 45, 102, 132, 190, 29, 146, 4, 63, 224, 209, 128, 59, 85, 253, 133, 190, 180, 83, 27, 189, 25, 189, 195, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 2, 68, 190, 63, 253, 238, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {72, 20, 212, 63, 25, 249, 9, 192, 40, 56, 209, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {38, 93, 50, 64, 228, 218, 102, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0064/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}