// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 56, 159, 188, 23, 205, 199, 190, 193, 157, 205, 62, 105, 227, 65, 190, 47, 171, 46, 191, 99, 107, 224, 190, 75, 27, 53, 62, 253, 42, 255, 62, 2, 55, 211, 62, 74, 111, 0, 191, 127, 89, 130, 190, 137, 103, 79, 190, 162, 60, 163, 61, 235, 114, 112, 63, 236, 5, 105, 190, 24, 248, 36, 62, 90, 142, 125, 190, 173, 71, 91, 188, 62, 143, 13, 191, 220, 174, 69, 63, 45, 50, 59, 190, 155, 56, 46, 189, 238, 178, 40, 191, 97, 39, 3, 62, 178, 120, 25, 191, 33, 2, 3, 63, 161, 226, 164, 190, 95, 216, 194, 190, 29, 110, 11, 189, 236, 247, 160, 62, 163, 176, 12, 63, 25, 211, 6, 63, 233, 26, 244, 62, 53, 202, 10, 190, 58, 204, 77, 191, 184, 22, 55, 62, 22, 232, 199, 189, 87, 57, 63, 63, 29, 83, 17, 191, 106, 27, 135, 62, 79, 225, 156, 190, 215, 47, 234, 62, 219, 204, 217, 189, 213, 252, 158, 190, 31, 56, 228, 62, 79, 137, 137, 62, 154, 16, 26, 63, 80, 21, 7, 62, 171, 250, 190, 190, 14, 106, 85, 190, 47, 174, 198, 62, 214, 185, 150, 62, 24, 131, 24, 62, 113, 46, 254, 62, 151, 99, 173, 190, 215, 48, 121, 190, 87, 247, 158, 190, 130, 67, 57, 190, 76, 112, 153, 190, 48, 3, 245, 190, 167, 10, 17, 191, 205, 45, 110, 191, 156, 188, 165, 62, 100, 112, 2, 63, 94, 120, 30, 63, 42, 52, 216, 190, 253, 53, 147, 62, 44, 47, 252, 190, 224, 35, 218, 62, 202, 149, 93, 62, 173, 148, 253, 189, 114, 20, 33, 63, 205, 112, 8, 63, 171, 234, 82, 189, 138, 17, 15, 191, 251, 130, 16, 189, 25, 37, 13, 63, 16, 209, 255, 61, 147, 51, 148, 190, 139, 5, 16, 191, 14, 100, 174, 190, 219, 128, 133, 190, 204, 65, 93, 190, 96, 74, 128, 62, 53, 182, 141, 62, 7, 101, 7, 62, 14, 31, 212, 62, 16, 178, 28, 63, 16, 39, 235, 61, 142, 63, 58, 190, 102, 11, 239, 62, 127, 17, 99, 190, 22, 224, 5, 63, 138, 226, 254, 190, 232, 104, 92, 63, 240, 132, 249, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 223, 17, 191, 31, 108, 155, 62, 50, 204, 161, 190, 65, 22, 178, 190, 227, 24, 216, 61, 75, 38, 216, 190, 89, 212, 249, 190, 209, 80, 137, 190, 182, 62, 9, 191, 47, 191, 251, 190, 204, 162, 39, 191, 55, 113, 33, 62, 89, 70, 113, 62, 179, 15, 19, 62, 30, 35, 140, 60, 245, 177, 218, 62, 84, 48, 6, 191, 65, 32, 102, 61, 0, 16, 53, 191, 228, 69, 237, 190, 23, 237, 226, 62, 38, 181, 58, 189, 7, 110, 23, 63, 132, 143, 242, 61, 73, 52, 136, 62, 252, 152, 1, 63, 44, 0, 53, 63, 122, 188, 130, 62, 178, 162, 201, 190, 21, 179, 214, 61, 206, 57, 228, 62, 35, 206, 143, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 140, 0, 188, 74, 149, 130, 61, 175, 87, 34, 190, 238, 88, 28, 188, 59, 162, 212, 189, 204, 202, 24, 190, 212, 188, 12, 191, 143, 211, 121, 189, 116, 108, 28, 190, 31, 58, 54, 190, 199, 54, 252, 61, 27, 126, 70, 61, 116, 103, 30, 190, 20, 10, 40, 190, 171, 185, 167, 61, 179, 41, 190, 61, 212, 104, 228, 187, 58, 111, 239, 189, 248, 151, 175, 184, 171, 110, 143, 189, 163, 200, 116, 62, 103, 87, 152, 189, 232, 72, 35, 61, 168, 9, 11, 190, 109, 194, 70, 62, 109, 116, 110, 61, 36, 102, 52, 62, 16, 172, 46, 61, 33, 220, 91, 190, 55, 250, 181, 61, 135, 110, 198, 189, 45, 145, 69, 190, 15, 9, 37, 190, 24, 166, 224, 187, 234, 106, 201, 60, 249, 205, 87, 189, 119, 19, 73, 62, 133, 146, 194, 189, 250, 237, 5, 190, 220, 46, 124, 61, 76, 108, 16, 189, 169, 99, 66, 189, 120, 135, 158, 61, 151, 198, 60, 62, 14, 243, 253, 61, 238, 81, 247, 60, 197, 5, 72, 188, 75, 144, 51, 61, 235, 175, 210, 61, 8, 37, 51, 60, 208, 118, 80, 61, 121, 109, 126, 60, 238, 21, 164, 61, 44, 242, 1, 62, 198, 146, 186, 188, 21, 87, 40, 62, 169, 227, 42, 188, 86, 97, 60, 190, 115, 53, 207, 59, 237, 145, 69, 62, 56, 139, 168, 189, 225, 254, 117, 62, 105, 121, 30, 190, 114, 211, 85, 190, 51, 97, 116, 190, 48, 248, 108, 62, 253, 57, 93, 190, 5, 165, 164, 61, 180, 98, 0, 190, 182, 118, 205, 61, 99, 138, 64, 190, 26, 74, 254, 189, 58, 222, 216, 190, 230, 155, 1, 190, 212, 140, 83, 61, 56, 112, 138, 62, 130, 89, 156, 189, 167, 209, 101, 59, 140, 172, 26, 62, 132, 214, 81, 187, 142, 56, 251, 61, 170, 190, 151, 187, 133, 248, 183, 189, 234, 48, 44, 61, 61, 183, 159, 61, 169, 86, 37, 190, 12, 142, 36, 62, 11, 191, 220, 189, 13, 98, 187, 189, 35, 221, 148, 61, 70, 188, 71, 60, 176, 55, 152, 189, 187, 45, 61, 190, 151, 198, 89, 189, 45, 253, 180, 61, 136, 160, 38, 188, 53, 15, 9, 62, 228, 3, 135, 61, 156, 214, 91, 190, 91, 182, 168, 61, 111, 129, 208, 190, 89, 194, 35, 190, 188, 125, 0, 191, 177, 77, 22, 190, 185, 62, 242, 190, 54, 163, 12, 62, 127, 154, 132, 189, 82, 236, 58, 62, 126, 201, 11, 190, 45, 133, 246, 188, 181, 215, 64, 188, 205, 39, 231, 189, 110, 81, 5, 61, 49, 38, 4, 61, 40, 29, 118, 189, 128, 112, 204, 61, 132, 241, 234, 62, 251, 222, 198, 190, 187, 13, 219, 189, 183, 33, 99, 190, 36, 118, 39, 190, 93, 89, 58, 187, 82, 216, 89, 62, 182, 1, 8, 61, 71, 231, 42, 190, 19, 54, 159, 190, 157, 56, 6, 189, 116, 127, 43, 61, 162, 168, 188, 61, 155, 35, 35, 190, 207, 186, 189, 189, 27, 220, 32, 189, 179, 232, 147, 62, 87, 225, 16, 62, 225, 182, 213, 62, 145, 211, 172, 189, 77, 3, 104, 61, 13, 52, 55, 62, 246, 52, 173, 189, 165, 233, 171, 189, 58, 57, 102, 61, 233, 83, 127, 62, 129, 94, 66, 60, 132, 182, 175, 61, 150, 162, 86, 62, 234, 135, 14, 61, 135, 222, 215, 189, 89, 100, 60, 61, 70, 215, 19, 189, 199, 189, 187, 186, 234, 170, 50, 62, 66, 188, 57, 62, 226, 162, 204, 188, 188, 30, 108, 62, 57, 67, 149, 61, 111, 149, 99, 190, 30, 121, 177, 189, 183, 104, 137, 61, 109, 113, 186, 188, 34, 119, 58, 187, 102, 180, 60, 190, 199, 57, 191, 61, 197, 199, 31, 190, 162, 170, 62, 190, 58, 165, 76, 59, 247, 111, 103, 61, 139, 152, 137, 190, 168, 237, 76, 62, 125, 85, 149, 189, 203, 163, 32, 190, 90, 197, 230, 188, 143, 179, 178, 62, 227, 179, 16, 62, 46, 12, 72, 61, 160, 146, 230, 60, 119, 162, 135, 60, 33, 2, 12, 60, 123, 208, 208, 189, 211, 212, 121, 190, 113, 42, 172, 189, 74, 150, 72, 61, 124, 25, 24, 62, 39, 127, 120, 188, 17, 235, 162, 60, 127, 56, 200, 61, 227, 4, 253, 61, 144, 133, 59, 62, 17, 30, 76, 189, 168, 101, 141, 190, 103, 69, 1, 62, 229, 134, 23, 62, 106, 194, 3, 190, 188, 198, 212, 189, 76, 244, 85, 61, 130, 148, 50, 190, 108, 204, 18, 62, 113, 187, 82, 190, 97, 205, 133, 60, 61, 35, 164, 190, 223, 181, 28, 62, 206, 51, 195, 189, 128, 208, 7, 190, 23, 46, 26, 190, 175, 82, 66, 190, 1, 152, 222, 188, 172, 51, 65, 61, 108, 50, 25, 62, 219, 117, 80, 189, 121, 166, 120, 189, 64, 22, 228, 61, 44, 198, 13, 58, 44, 156, 40, 62, 234, 120, 142, 190, 28, 17, 21, 62, 115, 190, 15, 62, 77, 254, 227, 60, 235, 25, 39, 62, 144, 33, 30, 190, 89, 15, 142, 189, 245, 161, 33, 190, 87, 0, 205, 61, 88, 43, 43, 61, 210, 122, 135, 189, 37, 170, 22, 190, 70, 207, 52, 62, 90, 157, 37, 61, 222, 148, 5, 62, 85, 7, 157, 189, 75, 252, 141, 62, 31, 218, 103, 61, 103, 48, 125, 62, 236, 107, 85, 190, 0, 251, 181, 61, 235, 123, 94, 62, 120, 75, 50, 190, 215, 71, 9, 190, 232, 42, 22, 189, 251, 140, 156, 61, 12, 157, 75, 61, 154, 70, 145, 62, 182, 28, 177, 189, 63, 35, 255, 60, 52, 110, 44, 190, 192, 116, 97, 189, 98, 191, 70, 189, 201, 100, 217, 189, 18, 211, 155, 189, 229, 229, 184, 189, 103, 178, 30, 190, 241, 68, 129, 61, 247, 120, 40, 190, 12, 200, 255, 189, 155, 234, 164, 60, 182, 177, 69, 62, 134, 182, 86, 62, 18, 49, 59, 62, 115, 68, 254, 188, 224, 249, 48, 190, 50, 156, 145, 61, 186, 31, 96, 189, 140, 154, 72, 189, 105, 129, 114, 189, 142, 162, 42, 190, 151, 220, 25, 190, 120, 29, 178, 61, 110, 19, 245, 61, 33, 184, 14, 190, 150, 81, 48, 190, 1, 160, 203, 189, 84, 34, 40, 190, 146, 244, 235, 189, 155, 230, 11, 61, 217, 121, 245, 189, 43, 206, 27, 61, 36, 184, 178, 61, 85, 52, 3, 62, 212, 78, 196, 188, 80, 35, 97, 189, 173, 218, 6, 61, 15, 43, 4, 61, 25, 16, 238, 188, 102, 219, 36, 190, 140, 39, 140, 189, 129, 168, 152, 189, 18, 72, 32, 190, 53, 14, 156, 61, 106, 174, 216, 61, 103, 30, 45, 190, 163, 46, 233, 188, 244, 62, 162, 189, 241, 174, 32, 190, 174, 254, 231, 188, 48, 161, 31, 190, 108, 195, 24, 60, 80, 147, 186, 190, 193, 60, 171, 189, 192, 164, 141, 190, 113, 220, 56, 190, 168, 158, 136, 60, 110, 231, 155, 62, 62, 254, 129, 188, 87, 236, 147, 61, 254, 184, 0, 60, 210, 72, 64, 190, 23, 57, 19, 190, 160, 68, 229, 61, 2, 92, 23, 190, 123, 189, 19, 62, 17, 12, 212, 60, 8, 233, 189, 189, 38, 182, 32, 62, 162, 4, 22, 62, 93, 110, 139, 60, 6, 92, 8, 190, 129, 11, 77, 62, 154, 99, 169, 189, 53, 1, 43, 190, 81, 175, 127, 61, 209, 41, 64, 189, 42, 226, 73, 61, 211, 87, 55, 189, 249, 100, 37, 62, 132, 243, 2, 190, 123, 184, 9, 62, 178, 18, 146, 61, 46, 21, 242, 189, 206, 233, 159, 61, 94, 95, 198, 189, 189, 151, 201, 189, 48, 186, 1, 189, 147, 116, 204, 188, 95, 28, 201, 60, 34, 160, 34, 187, 228, 58, 195, 189, 54, 90, 254, 188, 167, 99, 44, 62, 41, 195, 63, 190, 220, 45, 160, 189, 33, 150, 131, 61, 228, 205, 82, 189, 111, 115, 60, 189, 122, 242, 14, 190, 22, 194, 181, 189, 5, 235, 17, 62, 215, 154, 30, 190, 26, 63, 237, 189, 58, 174, 240, 189, 47, 120, 166, 61, 73, 195, 79, 190, 46, 172, 246, 189, 109, 253, 40, 62, 250, 198, 151, 187, 235, 148, 123, 61, 170, 135, 165, 189, 185, 153, 224, 189, 203, 25, 69, 189, 141, 147, 18, 62, 176, 175, 4, 189, 247, 117, 191, 60, 116, 121, 230, 188, 37, 67, 42, 190, 185, 108, 0, 190, 77, 78, 34, 61, 136, 128, 224, 189, 219, 101, 51, 189, 107, 146, 206, 61, 8, 153, 61, 189, 19, 177, 154, 189, 76, 20, 18, 190, 149, 79, 42, 190, 192, 187, 9, 190, 162, 155, 124, 61, 206, 19, 205, 188, 211, 166, 144, 189, 104, 124, 6, 189, 196, 22, 13, 190, 182, 239, 131, 59, 193, 140, 243, 61, 178, 158, 202, 189, 246, 105, 115, 187, 11, 63, 149, 61, 213, 161, 171, 61, 139, 211, 236, 189, 92, 118, 238, 189, 71, 76, 9, 61, 254, 0, 9, 189, 179, 215, 129, 61, 235, 218, 28, 62, 186, 4, 175, 189, 182, 76, 93, 189, 67, 172, 11, 190, 242, 157, 136, 190, 106, 193, 40, 190, 59, 69, 27, 62, 1, 130, 233, 61, 157, 111, 38, 190, 140, 118, 250, 189, 19, 147, 198, 189, 19, 19, 251, 188, 65, 117, 151, 61, 203, 108, 43, 62, 250, 36, 203, 61, 10, 98, 18, 62, 84, 249, 108, 59, 187, 80, 220, 189, 145, 86, 77, 189, 135, 223, 167, 188, 60, 9, 147, 61, 91, 29, 34, 189, 35, 226, 192, 188, 126, 118, 189, 189, 226, 40, 191, 189, 5, 52, 42, 62, 114, 195, 189, 188, 8, 11, 238, 58, 84, 36, 180, 189, 182, 39, 144, 190, 15, 27, 142, 61, 55, 47, 53, 190, 53, 60, 2, 190, 36, 148, 151, 61, 140, 111, 242, 61, 43, 80, 175, 190, 108, 63, 203, 190, 203, 248, 147, 190, 12, 213, 25, 190, 92, 193, 130, 188, 57, 29, 89, 61, 14, 104, 14, 62, 145, 244, 165, 190, 104, 38, 19, 189, 198, 179, 52, 190, 125, 147, 40, 190, 248, 49, 18, 189, 99, 4, 56, 190, 34, 0, 119, 61, 42, 125, 213, 62, 221, 4, 189, 188, 170, 150, 180, 60, 15, 211, 61, 190, 40, 113, 202, 61, 201, 180, 21, 190, 136, 117, 178, 61, 224, 97, 166, 62, 231, 206, 144, 189, 202, 215, 83, 62, 11, 233, 25, 190, 233, 11, 142, 189, 195, 219, 251, 60, 54, 63, 49, 190, 156, 193, 6, 190, 96, 225, 129, 61, 142, 13, 194, 189, 215, 155, 203, 189, 254, 80, 251, 188, 30, 248, 3, 190, 131, 160, 29, 190, 100, 226, 33, 62, 190, 66, 139, 61, 198, 133, 40, 62, 193, 13, 2, 62, 191, 122, 48, 190, 212, 109, 184, 61, 39, 112, 24, 189, 145, 26, 113, 189, 227, 72, 147, 189, 74, 4, 206, 61, 144, 178, 232, 187, 205, 12, 24, 62, 55, 178, 252, 189, 196, 94, 47, 190, 160, 121, 179, 189, 63, 215, 7, 61, 24, 218, 37, 190, 246, 193, 9, 190, 77, 165, 94, 189, 140, 155, 201, 59, 66, 194, 44, 62, 210, 100, 237, 59, 84, 141, 14, 62, 37, 171, 36, 190, 111, 142, 32, 190, 78, 50, 37, 62, 150, 115, 135, 188, 187, 251, 139, 187, 236, 24, 224, 188, 239, 55, 22, 190, 79, 134, 7, 62, 88, 120, 49, 62, 166, 126, 193, 189, 212, 133, 234, 189, 149, 203, 252, 61, 36, 12, 156, 189, 9, 148, 33, 189, 254, 224, 177, 189, 26, 135, 82, 61, 44, 4, 249, 61, 16, 227, 199, 60, 11, 163, 217, 188, 156, 166, 215, 60, 43, 229, 16, 62, 128, 127, 52, 190, 26, 103, 217, 189, 235, 190, 193, 189, 68, 154, 90, 189, 89, 27, 170, 188, 21, 23, 36, 189, 118, 32, 16, 190, 191, 251, 117, 61, 113, 34, 111, 189, 61, 131, 252, 189, 29, 237, 162, 189, 43, 220, 24, 60, 9, 216, 172, 189, 164, 52, 129, 61, 55, 193, 40, 190, 72, 243, 85, 62, 209, 182, 22, 62, 119, 221, 128, 62, 161, 194, 28, 187, 4, 193, 54, 60, 11, 79, 222, 61, 82, 135, 88, 189, 103, 196, 10, 190, 137, 82, 1, 190, 116, 162, 131, 62, 89, 196, 135, 60, 245, 129, 81, 62, 203, 205, 142, 189, 254, 171, 77, 62, 187, 122, 162, 188, 232, 169, 128, 61, 125, 6, 4, 189, 11, 165, 54, 189, 8, 67, 236, 189, 80, 234, 154, 60, 36, 203, 20, 190, 204, 176, 195, 61, 249, 38, 196, 61, 250, 224, 245, 61, 162, 177, 105, 190, 89, 103, 84, 62, 4, 193, 94, 189, 208, 10, 211, 188, 63, 70, 249, 61, 108, 134, 191, 189, 72, 222, 134, 188, 61, 239, 70, 190, 145, 57, 189, 61, 138, 90, 120, 60, 68, 245, 102, 61, 59, 141, 140, 189, 56, 57, 204, 189, 49, 104, 147, 60, 70, 217, 141, 61, 149, 58, 231, 188, 227, 17, 31, 190, 15, 124, 11, 190, 133, 139, 1, 190, 161, 236, 189, 61, 125, 195, 140, 61, 9, 107, 180, 60, 244, 194, 61, 189, 102, 235, 104, 190, 189, 225, 234, 189, 109, 172, 56, 62, 109, 187, 163, 61, 12, 104, 255, 189, 122, 239, 235, 61, 51, 88, 17, 62, 19, 14, 66, 61, 56, 64, 161, 61, 180, 7, 4, 62, 46, 174, 87, 62, 4, 113, 138, 61, 122, 51, 50, 190, 188, 227, 139, 61, 223, 150, 177, 189, 129, 48, 236, 186, 25, 132, 137, 188, 244, 45, 160, 61, 112, 113, 227, 189, 17, 168, 143, 189, 3, 123, 174, 61, 98, 175, 251, 61, 8, 177, 51, 189, 110, 72, 187, 188, 200, 110, 79, 188, 56, 20, 157, 61, 92, 25, 23, 62, 68, 215, 167, 189, 94, 153, 232, 61, 119, 180, 241, 61, 237, 235, 6, 62, 118, 10, 202, 61, 196, 208, 255, 189, 54, 152, 140, 189, 67, 46, 21, 190, 195, 88, 15, 62, 194, 234, 123, 189, 95, 54, 243, 189, 59, 52, 147, 189, 253, 167, 118, 189, 228, 13, 207, 189, 1, 112, 82, 62, 179, 99, 29, 61, 240, 190, 190, 61, 53, 90, 12, 190, 119, 140, 164, 61, 126, 99, 43, 62, 147, 82, 203, 190, 57, 164, 37, 190, 76, 183, 211, 189, 206, 236, 51, 190, 205, 207, 42, 190, 202, 194, 115, 189, 103, 196, 136, 190, 167, 223, 186, 189, 76, 68, 47, 190, 252, 234, 26, 188, 218, 217, 93, 190, 209, 54, 184, 189, 42, 74, 111, 61, 243, 114, 254, 189, 19, 95, 5, 189, 20, 124, 66, 190, 110, 61, 85, 190, 29, 128, 9, 190, 28, 117, 254, 60, 69, 108, 97, 62, 10, 122, 28, 62, 204, 209, 182, 189, 123, 186, 16, 61, 56, 237, 45, 189, 210, 57, 4, 62, 1, 58, 61, 62, 222, 44, 125, 190, 38, 247, 144, 62, 236, 37, 64, 189, 215, 49, 8, 188, 174, 252, 53, 190, 247, 100, 106, 190, 42, 219, 163, 61, 219, 227, 28, 62, 31, 79, 156, 189, 215, 79, 193, 61, 126, 167, 9, 190, 122, 68, 197, 189, 3, 169, 188, 190, 90, 29, 190, 189, 8, 240, 171, 190, 102, 194, 135, 61, 242, 148, 202, 188, 184, 114, 0, 190, 57, 150, 143, 189, 243, 207, 11, 62, 32, 61, 122, 189, 41, 48, 30, 60, 249, 132, 194, 61, 173, 141, 47, 190, 39, 185, 107, 189, 50, 241, 212, 60, 186, 12, 55, 62, 21, 108, 25, 62, 212, 32, 24, 190, 195, 74, 133, 62, 152, 35, 201, 189, 153, 110, 93, 61, 162, 242, 12, 190, 4, 152, 52, 190, 123, 132, 75, 62, 99, 150, 131, 189, 182, 191, 108, 190, 127, 35, 158, 61, 170, 141, 94, 190, 99, 127, 125, 190, 68, 48, 172, 190, 76, 137, 0, 62, 245, 5, 50, 190, 71, 226, 32, 190, 32, 84, 228, 190, 235, 78, 178, 190, 42, 146, 29, 190, 217, 199, 16, 61, 21, 72, 84, 190, 217, 83, 84, 190, 101, 36, 153, 189, 141, 115, 14, 189, 249, 108, 148, 189, 180, 138, 27, 190, 6, 29, 215, 60, 150, 47, 43, 61, 152, 140, 131, 62, 0, 153, 141, 190, 120, 255, 31, 190, 167, 179, 253, 189, 36, 118, 37, 190, 92, 133, 20, 62, 100, 75, 110, 62, 235, 220, 13, 62, 140, 35, 193, 190, 205, 109, 91, 188, 126, 203, 152, 59, 142, 200, 125, 62, 182, 212, 43, 62, 226, 53, 5, 190, 181, 101, 140, 61, 189, 219, 37, 190, 60, 111, 142, 61, 58, 235, 253, 189, 171, 76, 190, 62, 181, 105, 199, 189, 117, 145, 146, 60, 253, 84, 42, 60, 234, 178, 58, 189, 221, 207, 179, 190, 90, 230, 40, 61, 72, 201, 124, 61, 53, 182, 148, 61, 206, 211, 16, 61, 160, 222, 116, 62, 224, 64, 71, 61, 145, 200, 26, 189, 40, 90, 133, 190, 168, 34, 94, 189, 172, 86, 89, 188, 254, 84, 17, 190, 22, 75, 49, 189, 134, 204, 230, 61, 148, 232, 157, 62, 117, 107, 111, 190, 237, 85, 10, 62, 206, 245, 171, 61, 169, 223, 133, 61, 74, 117, 234, 61, 21, 31, 64, 62, 19, 253, 214, 189, 141, 17, 167, 189, 88, 72, 202, 60, 119, 172, 123, 189, 78, 80, 52, 61, 158, 164, 227, 189, 244, 140, 96, 60, 127, 252, 44, 190, 188, 118, 23, 62, 22, 78, 30, 62, 132, 9, 38, 60, 91, 252, 181, 189, 76, 31, 132, 189, 90, 126, 166, 61, 226, 223, 22, 190, 65, 135, 236, 188, 249, 155, 34, 62, 134, 129, 95, 189, 121, 103, 67, 60, 137, 24, 129, 188, 19, 85, 61, 189, 221, 21, 0, 190, 94, 15, 70, 189, 241, 33, 0, 62, 9, 211, 236, 61, 72, 232, 215, 60, 196, 220, 31, 189, 185, 231, 239, 189, 201, 61, 22, 62, 221, 138, 226, 189, 74, 26, 22, 190, 65, 212, 180, 189, 209, 168, 197, 61, 12, 101, 77, 188, 42, 83, 5, 190, 18, 187, 5, 190, 247, 166, 195, 189, 73, 166, 180, 61, 120, 151, 87, 61, 225, 246, 106, 188, 28, 39, 170, 61, 64, 227, 48, 190, 210, 254, 245, 61, 190, 137, 149, 188, 134, 109, 114, 61, 169, 154, 168, 61, 156, 65, 34, 190, 251, 149, 227, 189, 132, 197, 171, 189, 191, 173, 177, 189, 108, 107, 217, 61, 148, 194, 246, 189, 96, 18, 182, 61, 114, 66, 35, 190, 23, 157, 154, 188, 246, 252, 51, 60, 95, 231, 46, 190, 228, 110, 151, 61, 176, 6, 236, 189, 221, 222, 132, 61, 8, 242, 135, 189, 123, 138, 48, 62, 101, 211, 19, 190, 78, 207, 161, 61, 43, 59, 132, 189, 236, 39, 21, 190, 64, 0, 27, 62, 49, 170, 167, 61, 24, 18, 175, 59, 231, 28, 238, 189, 29, 49, 17, 62, 149, 231, 252, 61, 198, 139, 47, 190, 146, 113, 34, 190, 46, 217, 243, 61, 241, 104, 124, 61, 163, 135, 109, 61, 8, 51, 15, 190, 186, 177, 194, 61, 195, 59, 179, 60, 9, 195, 213, 61, 168, 63, 30, 62, 83, 174, 40, 190, 233, 198, 125, 61, 93, 94, 229, 189, 51, 10, 212, 189, 119, 57, 7, 190, 220, 115, 198, 61, 91, 146, 148, 189, 48, 156, 214, 60, 243, 204, 70, 187, 86, 80, 10, 61, 154, 59, 211, 189, 131, 85, 100, 190, 82, 60, 30, 189, 146, 28, 112, 60, 216, 164, 28, 62, 231, 147, 233, 61, 250, 33, 191, 60, 112, 221, 62, 190, 1, 62, 17, 61, 63, 10, 187, 60, 51, 151, 234, 62, 134, 97, 17, 190, 81, 86, 131, 62, 1, 139, 98, 189, 18, 250, 252, 189, 49, 181, 68, 190, 153, 171, 16, 62, 145, 227, 5, 189, 190, 64, 234, 61, 54, 207, 239, 188, 26, 176, 215, 189, 19, 161, 186, 61, 162, 64, 136, 61, 62, 201, 41, 61, 19, 19, 30, 190, 47, 173, 35, 190, 66, 23, 123, 60, 14, 101, 67, 61, 82, 49, 117, 61, 124, 32, 130, 61, 13, 131, 153, 60, 49, 237, 225, 189, 56, 65, 180, 189, 220, 75, 140, 190, 16, 164, 81, 62, 112, 50, 97, 62, 180, 127, 55, 190, 140, 105, 43, 190, 228, 128, 201, 61, 213, 169, 130, 61, 144, 175, 56, 189, 188, 91, 50, 62, 183, 33, 121, 62, 91, 92, 87, 61, 31, 84, 216, 61, 195, 125, 39, 190, 0, 229, 140, 61, 2, 227, 44, 191, 143, 52, 111, 62, 177, 53, 32, 190, 189, 255, 221, 189, 170, 223, 10, 62, 228, 151, 50, 190, 65, 56, 130, 61, 5, 108, 134, 60, 116, 50, 76, 190, 184, 211, 34, 190, 156, 104, 36, 190, 187, 160, 217, 189, 46, 203, 194, 189, 97, 240, 187, 189, 65, 35, 133, 62, 245, 71, 85, 61, 62, 217, 36, 61, 99, 176, 239, 61, 35, 67, 175, 190, 93, 190, 77, 190, 166, 173, 126, 62, 92, 230, 92, 190, 203, 223, 150, 189, 19, 159, 91, 62, 24, 93, 54, 190, 126, 26, 198, 61, 165, 19, 137, 61, 75, 65, 61, 62, 82, 186, 179, 61, 170, 230, 161, 187, 224, 13, 88, 61, 48, 222, 101, 61, 197, 143, 16, 191, 221, 217, 48, 62, 228, 29, 149, 189, 74, 110, 120, 61, 129, 41, 145, 62, 65, 13, 23, 188, 154, 45, 231, 189, 218, 236, 137, 190, 252, 2, 181, 189, 88, 102, 71, 190, 113, 141, 160, 61, 15, 67, 42, 190, 116, 86, 104, 61, 233, 202, 2, 190, 60, 212, 230, 61, 160, 143, 19, 190, 171, 83, 128, 189, 208, 251, 180, 61, 93, 123, 9, 190, 198, 15, 192, 60, 181, 202, 160, 62, 108, 138, 9, 190, 238, 233, 168, 61, 47, 80, 29, 61, 10, 179, 137, 190, 124, 253, 168, 62, 58, 26, 50, 62, 208, 37, 90, 62, 174, 18, 83, 59, 21, 137, 81, 188, 137, 207, 69, 61, 143, 227, 179, 189, 17, 210, 161, 61, 41, 48, 2, 61, 190, 248, 129, 60, 198, 248, 151, 189, 49, 156, 195, 60, 166, 227, 194, 189, 94, 57, 13, 189, 6, 192, 39, 190, 98, 176, 22, 190, 47, 49, 16, 61, 18, 76, 68, 62, 21, 2, 69, 62, 128, 125, 253, 61, 127, 30, 110, 62, 154, 228, 228, 61, 242, 163, 187, 60, 91, 108, 210, 189, 12, 86, 71, 188, 56, 164, 10, 188, 72, 202, 145, 189, 131, 168, 16, 188, 141, 121, 3, 190, 231, 122, 14, 188, 161, 199, 100, 189, 57, 239, 19, 62, 218, 205, 66, 189, 209, 118, 74, 189, 67, 84, 175, 190, 60, 77, 36, 61, 1, 132, 55, 190, 239, 207, 199, 60, 241, 185, 97, 190, 185, 242, 39, 62, 219, 8, 78, 190, 99, 8, 75, 190, 236, 153, 34, 62, 213, 174, 122, 189, 36, 118, 23, 189, 66, 225, 30, 189, 153, 5, 44, 190, 185, 130, 117, 61, 18, 168, 124, 61, 127, 154, 104, 190, 44, 156, 138, 61, 208, 6, 40, 60, 252, 132, 226, 61, 22, 156, 15, 62, 252, 66, 99, 61, 244, 109, 108, 189, 201, 217, 224, 189, 238, 141, 165, 190, 87, 55, 124, 61, 26, 241, 232, 189, 203, 117, 32, 190, 249, 117, 145, 189, 47, 226, 145, 189, 4, 240, 84, 190, 184, 190, 8, 61, 129, 3, 11, 62, 4, 212, 209, 189, 152, 210, 236, 189, 168, 32, 35, 189, 234, 18, 7, 62, 202, 83, 35, 190, 173, 210, 210, 189, 237, 108, 177, 61, 214, 232, 146, 189, 168, 9, 249, 61, 248, 195, 135, 62, 121, 71, 135, 189, 95, 33, 98, 61, 43, 24, 162, 60, 96, 164, 162, 189, 89, 217, 244, 189, 38, 175, 141, 60, 105, 229, 144, 189, 242, 53, 158, 61, 219, 41, 23, 60, 87, 197, 48, 61, 245, 48, 128, 188, 252, 154, 10, 190, 99, 126, 153, 189, 244, 81, 38, 62, 29, 237, 76, 190, 143, 71, 198, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 80, 56, 62, 57, 159, 138, 62, 103, 65, 62, 189, 110, 154, 15, 62, 77, 30, 222, 189, 89, 208, 61, 62, 74, 157, 75, 190, 14, 53, 126, 62, 197, 162, 63, 189, 65, 193, 47, 62, 135, 72, 183, 188, 213, 167, 46, 61, 69, 160, 141, 61, 242, 129, 16, 62, 196, 109, 255, 189, 123, 138, 198, 189, 203, 74, 228, 61, 121, 74, 214, 60, 62, 25, 185, 189, 1, 154, 118, 62, 2, 125, 58, 62, 229, 29, 183, 61, 67, 64, 80, 62, 248, 21, 233, 189, 241, 36, 22, 190, 68, 90, 3, 190, 135, 217, 149, 61, 213, 87, 198, 61, 142, 166, 88, 62, 129, 38, 30, 62, 72, 131, 36, 62, 245, 136, 27, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 211, 95, 62, 162, 89, 176, 61, 71, 113, 206, 61, 182, 81, 11, 63, 222, 22, 210, 189, 106, 233, 73, 62, 195, 43, 184, 59, 205, 145, 79, 190, 121, 247, 18, 60, 131, 52, 81, 62, 151, 184, 192, 61, 53, 37, 42, 188, 162, 95, 143, 189, 103, 227, 175, 62, 98, 253, 22, 62, 92, 97, 28, 62, 15, 90, 219, 189, 58, 23, 73, 190, 118, 230, 147, 61, 120, 248, 206, 62, 53, 250, 11, 61, 125, 40, 151, 62, 236, 26, 131, 190, 100, 225, 11, 190, 233, 16, 209, 61, 164, 209, 250, 61, 147, 208, 47, 190, 74, 208, 5, 191, 80, 122, 210, 190, 108, 154, 36, 61, 225, 166, 206, 61, 40, 148, 219, 189, 111, 11, 5, 61, 91, 248, 192, 189, 102, 142, 221, 189, 24, 73, 25, 61, 150, 141, 101, 190, 9, 253, 106, 190, 177, 231, 232, 61, 49, 111, 183, 188, 135, 166, 103, 188, 236, 50, 183, 189, 206, 202, 131, 189, 235, 82, 239, 61, 40, 237, 212, 61, 99, 137, 87, 61, 151, 189, 194, 60, 144, 189, 174, 60, 243, 132, 141, 185, 122, 7, 175, 61, 181, 57, 242, 61, 194, 83, 131, 61, 139, 146, 222, 190, 175, 39, 54, 62, 136, 70, 27, 61, 152, 129, 228, 188, 179, 249, 16, 188, 227, 85, 198, 61, 157, 121, 87, 190, 90, 111, 164, 62, 20, 64, 59, 190, 192, 204, 99, 190, 108, 143, 18, 190, 122, 123, 131, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 110, 165, 189, 198, 117, 237, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {80, 186, 20, 188, 5, 35, 20, 62, 21, 236, 27, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {55, 183, 58, 189, 126, 5, 254, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0064/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}