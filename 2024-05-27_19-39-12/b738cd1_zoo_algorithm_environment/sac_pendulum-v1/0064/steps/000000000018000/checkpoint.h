// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 85, 20, 62, 29, 27, 237, 190, 104, 24, 187, 62, 172, 172, 195, 61, 201, 78, 197, 191, 177, 243, 158, 190, 215, 143, 167, 61, 116, 240, 146, 63, 253, 193, 182, 62, 168, 195, 142, 189, 101, 211, 168, 191, 24, 230, 149, 190, 243, 241, 100, 62, 88, 57, 37, 63, 91, 105, 209, 190, 24, 248, 36, 62, 90, 142, 125, 190, 173, 71, 91, 188, 102, 147, 33, 191, 97, 83, 55, 61, 78, 158, 138, 190, 86, 193, 145, 58, 228, 245, 176, 191, 210, 207, 156, 188, 29, 185, 255, 190, 87, 15, 104, 190, 163, 28, 17, 191, 101, 209, 42, 191, 242, 172, 58, 63, 115, 94, 159, 62, 204, 201, 109, 63, 230, 162, 174, 63, 235, 102, 196, 62, 170, 37, 58, 62, 247, 162, 71, 191, 224, 214, 30, 62, 7, 75, 21, 190, 120, 49, 141, 62, 20, 147, 46, 191, 166, 133, 206, 189, 3, 182, 243, 190, 247, 90, 32, 63, 160, 50, 103, 191, 102, 9, 174, 63, 137, 1, 191, 62, 97, 71, 17, 63, 72, 254, 106, 63, 174, 29, 28, 62, 245, 73, 36, 191, 240, 144, 73, 62, 104, 71, 177, 62, 195, 65, 146, 62, 110, 32, 46, 63, 5, 247, 227, 62, 101, 251, 27, 63, 226, 31, 209, 188, 44, 91, 135, 190, 208, 205, 48, 62, 38, 55, 45, 191, 43, 183, 245, 190, 199, 255, 4, 191, 86, 15, 20, 191, 254, 31, 33, 63, 142, 148, 12, 63, 254, 100, 187, 62, 75, 171, 237, 190, 48, 38, 195, 62, 149, 108, 190, 189, 187, 222, 15, 63, 11, 160, 250, 61, 240, 150, 67, 61, 234, 16, 19, 63, 127, 162, 120, 63, 217, 10, 43, 191, 95, 140, 20, 191, 241, 101, 191, 190, 35, 252, 20, 63, 222, 182, 205, 60, 2, 34, 139, 190, 225, 24, 130, 191, 7, 229, 76, 190, 123, 112, 217, 190, 55, 235, 73, 63, 19, 148, 7, 63, 138, 55, 31, 63, 5, 44, 85, 63, 207, 216, 133, 62, 121, 146, 111, 63, 40, 69, 239, 190, 11, 240, 109, 190, 55, 253, 249, 62, 175, 137, 167, 60, 61, 0, 28, 63, 231, 144, 125, 191, 202, 94, 80, 63, 120, 29, 124, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 88, 50, 191, 52, 252, 248, 61, 90, 109, 129, 189, 232, 14, 110, 190, 128, 190, 123, 189, 75, 38, 216, 190, 125, 7, 10, 191, 241, 105, 180, 62, 243, 121, 14, 191, 33, 226, 157, 189, 203, 200, 30, 191, 126, 29, 96, 62, 10, 21, 197, 189, 241, 109, 171, 61, 193, 169, 154, 62, 203, 64, 0, 62, 119, 232, 23, 191, 236, 31, 196, 187, 234, 200, 148, 191, 41, 40, 67, 191, 178, 39, 26, 63, 168, 13, 63, 187, 232, 93, 38, 63, 145, 93, 193, 61, 110, 249, 31, 189, 25, 11, 52, 63, 179, 232, 46, 63, 38, 53, 230, 61, 235, 247, 203, 190, 46, 86, 243, 188, 98, 242, 77, 62, 72, 114, 66, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 14, 222, 190, 167, 48, 245, 60, 206, 117, 247, 189, 50, 99, 109, 191, 45, 195, 243, 60, 204, 202, 24, 190, 235, 175, 6, 191, 50, 26, 105, 190, 10, 224, 218, 189, 196, 132, 80, 190, 104, 194, 130, 190, 157, 160, 22, 61, 181, 43, 236, 187, 178, 138, 144, 190, 59, 241, 215, 62, 248, 26, 64, 62, 222, 222, 229, 189, 74, 36, 201, 189, 221, 84, 251, 62, 94, 117, 59, 62, 83, 86, 133, 62, 148, 133, 2, 62, 143, 194, 169, 61, 66, 161, 29, 190, 135, 183, 60, 62, 147, 92, 174, 62, 234, 248, 190, 60, 162, 127, 128, 62, 127, 15, 174, 190, 110, 185, 157, 61, 8, 38, 41, 190, 255, 223, 102, 62, 44, 41, 176, 190, 246, 206, 44, 189, 78, 13, 9, 191, 236, 119, 153, 190, 35, 97, 73, 62, 133, 146, 194, 189, 121, 214, 164, 188, 117, 51, 199, 189, 144, 43, 186, 188, 174, 31, 10, 191, 219, 244, 72, 190, 136, 164, 131, 62, 24, 86, 237, 61, 105, 28, 63, 62, 78, 139, 33, 191, 159, 154, 160, 189, 21, 61, 164, 190, 25, 237, 134, 60, 21, 114, 34, 63, 162, 127, 162, 61, 79, 250, 241, 61, 60, 245, 250, 61, 130, 108, 20, 61, 191, 241, 75, 62, 34, 141, 106, 61, 212, 66, 249, 190, 139, 149, 164, 189, 181, 209, 248, 59, 195, 126, 124, 190, 221, 236, 155, 62, 163, 224, 216, 189, 24, 26, 64, 191, 187, 224, 201, 190, 121, 102, 193, 62, 198, 69, 145, 189, 8, 20, 199, 191, 62, 228, 151, 190, 182, 118, 205, 61, 231, 61, 39, 191, 183, 109, 124, 190, 182, 21, 114, 191, 163, 215, 234, 189, 187, 1, 196, 190, 209, 164, 119, 62, 39, 160, 8, 189, 52, 41, 78, 188, 103, 147, 206, 62, 179, 133, 231, 61, 156, 103, 181, 61, 117, 128, 71, 188, 101, 238, 207, 62, 52, 106, 153, 61, 15, 234, 249, 61, 114, 26, 52, 62, 187, 228, 54, 62, 92, 167, 204, 189, 11, 128, 17, 62, 141, 90, 171, 62, 24, 65, 117, 60, 3, 145, 157, 61, 76, 74, 169, 190, 209, 243, 101, 62, 227, 191, 79, 61, 21, 215, 204, 62, 102, 4, 173, 189, 174, 120, 239, 189, 251, 157, 152, 190, 25, 235, 29, 191, 152, 52, 141, 191, 89, 194, 35, 190, 99, 136, 115, 191, 201, 47, 140, 190, 55, 91, 178, 191, 31, 54, 18, 62, 227, 134, 180, 190, 97, 97, 42, 62, 173, 255, 16, 191, 21, 89, 161, 189, 238, 246, 177, 61, 192, 147, 54, 190, 123, 80, 189, 188, 90, 11, 237, 187, 206, 237, 65, 189, 156, 197, 219, 59, 180, 90, 248, 62, 2, 117, 70, 191, 22, 236, 139, 189, 95, 245, 131, 190, 68, 65, 230, 190, 253, 101, 111, 62, 66, 138, 115, 62, 98, 82, 204, 61, 7, 62, 194, 190, 220, 177, 74, 190, 83, 126, 141, 189, 117, 86, 205, 62, 56, 114, 192, 61, 109, 162, 191, 190, 198, 79, 24, 190, 179, 173, 177, 60, 123, 100, 74, 62, 87, 225, 16, 62, 178, 131, 61, 62, 67, 169, 48, 189, 85, 116, 183, 188, 192, 193, 28, 62, 49, 63, 226, 189, 131, 210, 27, 190, 114, 189, 131, 60, 132, 57, 153, 62, 166, 216, 183, 189, 30, 23, 128, 62, 14, 86, 72, 61, 1, 138, 152, 61, 44, 36, 49, 190, 213, 77, 80, 190, 119, 244, 212, 187, 227, 113, 28, 190, 61, 39, 82, 62, 223, 238, 76, 62, 128, 205, 25, 190, 42, 122, 191, 62, 137, 9, 53, 62, 67, 242, 160, 190, 23, 83, 180, 61, 24, 79, 251, 189, 26, 101, 95, 61, 94, 255, 255, 59, 200, 221, 111, 190, 88, 118, 160, 61, 161, 141, 153, 190, 9, 40, 160, 190, 175, 143, 92, 61, 247, 111, 103, 61, 218, 97, 141, 190, 96, 233, 232, 61, 137, 202, 150, 189, 217, 164, 213, 190, 5, 17, 12, 191, 174, 48, 156, 62, 246, 192, 39, 62, 73, 101, 77, 61, 199, 201, 38, 189, 48, 98, 185, 61, 250, 3, 75, 190, 204, 71, 37, 189, 42, 42, 163, 62, 233, 70, 127, 189, 243, 188, 180, 60, 197, 255, 70, 62, 169, 26, 184, 60, 5, 3, 252, 58, 126, 5, 62, 62, 38, 35, 54, 62, 185, 187, 90, 62, 27, 228, 206, 189, 203, 202, 178, 190, 182, 142, 85, 62, 208, 35, 55, 62, 246, 143, 23, 190, 48, 78, 120, 190, 158, 21, 166, 61, 243, 245, 135, 190, 115, 108, 22, 190, 8, 117, 252, 189, 97, 205, 133, 60, 146, 153, 6, 190, 37, 2, 106, 62, 208, 164, 80, 189, 115, 76, 75, 190, 228, 57, 117, 191, 204, 79, 48, 62, 186, 10, 154, 60, 153, 67, 196, 62, 35, 81, 129, 188, 16, 196, 249, 190, 98, 45, 135, 190, 123, 222, 131, 190, 49, 28, 187, 62, 81, 105, 113, 62, 53, 44, 232, 60, 228, 14, 106, 62, 124, 149, 112, 62, 236, 131, 148, 189, 66, 193, 170, 62, 86, 83, 21, 191, 149, 32, 13, 190, 217, 29, 51, 190, 171, 215, 232, 190, 56, 199, 122, 62, 174, 81, 192, 186, 117, 73, 33, 191, 120, 230, 181, 189, 52, 214, 144, 190, 56, 155, 68, 188, 120, 61, 136, 61, 55, 255, 123, 62, 31, 218, 103, 61, 73, 239, 53, 62, 123, 181, 10, 191, 66, 212, 189, 61, 253, 47, 15, 62, 166, 202, 24, 189, 211, 123, 55, 190, 140, 67, 19, 189, 131, 175, 4, 62, 27, 69, 148, 190, 220, 130, 245, 62, 118, 51, 125, 190, 23, 156, 206, 61, 137, 248, 49, 191, 73, 47, 177, 190, 65, 106, 248, 189, 228, 153, 72, 190, 255, 224, 67, 189, 22, 85, 203, 188, 102, 188, 133, 190, 114, 167, 92, 62, 121, 245, 118, 189, 61, 215, 170, 190, 208, 40, 13, 62, 202, 80, 6, 62, 162, 211, 176, 62, 44, 72, 158, 62, 115, 68, 254, 188, 224, 249, 48, 190, 50, 156, 145, 61, 186, 31, 96, 189, 140, 154, 72, 189, 105, 129, 114, 189, 142, 162, 42, 190, 151, 220, 25, 190, 120, 29, 178, 61, 110, 19, 245, 61, 33, 184, 14, 190, 150, 81, 48, 190, 1, 160, 203, 189, 84, 34, 40, 190, 146, 244, 235, 189, 155, 230, 11, 61, 217, 121, 245, 189, 43, 206, 27, 61, 36, 184, 178, 61, 85, 52, 3, 62, 212, 78, 196, 188, 80, 35, 97, 189, 173, 218, 6, 61, 15, 43, 4, 61, 25, 16, 238, 188, 102, 219, 36, 190, 140, 39, 140, 189, 129, 168, 152, 189, 18, 72, 32, 190, 53, 14, 156, 61, 106, 174, 216, 61, 103, 30, 45, 190, 16, 142, 81, 189, 176, 56, 81, 190, 183, 247, 16, 191, 171, 81, 207, 191, 170, 159, 83, 190, 108, 195, 24, 60, 103, 32, 29, 191, 93, 37, 14, 190, 150, 147, 16, 191, 28, 170, 162, 190, 56, 157, 218, 190, 247, 159, 150, 62, 130, 113, 152, 60, 64, 58, 141, 61, 24, 118, 10, 190, 51, 209, 45, 190, 143, 83, 157, 190, 119, 155, 26, 61, 186, 111, 55, 60, 167, 46, 233, 188, 183, 54, 11, 189, 93, 152, 157, 61, 47, 236, 43, 62, 193, 184, 248, 61, 36, 138, 98, 62, 46, 136, 231, 189, 233, 157, 102, 62, 192, 121, 235, 189, 236, 37, 9, 191, 172, 210, 131, 62, 157, 51, 56, 189, 218, 82, 123, 189, 14, 186, 91, 189, 240, 232, 161, 187, 186, 207, 242, 60, 91, 97, 116, 190, 171, 255, 204, 62, 46, 21, 242, 189, 146, 131, 164, 60, 111, 99, 223, 190, 186, 74, 133, 190, 60, 165, 137, 191, 244, 217, 73, 62, 119, 225, 23, 189, 247, 9, 40, 62, 45, 156, 148, 190, 237, 2, 10, 191, 235, 77, 25, 63, 7, 11, 167, 190, 48, 253, 183, 61, 48, 135, 134, 190, 227, 114, 244, 190, 217, 130, 112, 190, 240, 19, 67, 61, 30, 156, 163, 190, 125, 107, 31, 59, 141, 24, 27, 191, 47, 77, 41, 62, 143, 146, 218, 190, 0, 30, 200, 190, 0, 206, 75, 62, 30, 42, 98, 191, 175, 229, 201, 189, 193, 192, 177, 62, 235, 148, 123, 61, 84, 65, 219, 189, 143, 175, 219, 189, 177, 107, 72, 189, 76, 52, 223, 61, 176, 175, 4, 189, 219, 110, 210, 60, 116, 121, 230, 188, 212, 67, 47, 190, 185, 108, 0, 190, 71, 18, 13, 61, 136, 128, 224, 189, 60, 208, 178, 189, 107, 146, 206, 61, 137, 80, 62, 189, 60, 219, 191, 189, 76, 20, 18, 190, 22, 242, 40, 190, 182, 167, 11, 190, 200, 100, 44, 61, 206, 19, 205, 188, 16, 85, 252, 189, 159, 42, 15, 189, 153, 8, 13, 190, 22, 50, 75, 189, 95, 0, 217, 61, 101, 245, 5, 190, 177, 195, 61, 187, 60, 255, 145, 61, 216, 125, 0, 61, 180, 14, 238, 189, 93, 98, 215, 189, 25, 218, 234, 62, 49, 56, 9, 191, 225, 60, 182, 61, 44, 0, 62, 62, 99, 241, 194, 62, 182, 76, 93, 189, 194, 176, 144, 189, 127, 165, 132, 190, 188, 31, 124, 189, 91, 164, 40, 190, 22, 46, 37, 63, 239, 210, 253, 188, 130, 26, 21, 61, 4, 252, 153, 189, 188, 157, 234, 190, 12, 208, 115, 62, 231, 104, 86, 62, 252, 42, 66, 62, 173, 202, 79, 61, 77, 5, 230, 189, 47, 177, 15, 190, 67, 152, 249, 61, 252, 153, 8, 188, 24, 187, 160, 61, 31, 59, 223, 190, 229, 9, 139, 190, 75, 95, 53, 191, 85, 52, 126, 190, 72, 172, 2, 63, 113, 147, 253, 189, 220, 154, 157, 61, 133, 163, 49, 191, 55, 130, 159, 190, 38, 219, 35, 62, 71, 143, 43, 191, 88, 160, 20, 190, 162, 117, 222, 61, 140, 111, 242, 61, 143, 111, 21, 190, 139, 23, 147, 191, 0, 82, 56, 190, 41, 148, 69, 191, 155, 179, 137, 190, 94, 45, 58, 62, 223, 40, 51, 62, 119, 145, 0, 191, 5, 142, 84, 190, 200, 239, 203, 190, 54, 32, 50, 191, 28, 53, 165, 190, 204, 36, 142, 62, 170, 85, 149, 62, 14, 114, 24, 63, 143, 142, 168, 61, 227, 207, 139, 62, 44, 116, 214, 190, 41, 122, 145, 62, 71, 180, 219, 190, 168, 83, 126, 61, 97, 50, 253, 62, 129, 86, 173, 190, 61, 89, 226, 62, 92, 246, 176, 189, 125, 49, 1, 191, 195, 219, 251, 60, 54, 63, 49, 190, 10, 133, 22, 190, 96, 225, 129, 61, 41, 160, 206, 189, 215, 155, 203, 189, 133, 141, 238, 188, 30, 248, 3, 190, 131, 160, 29, 190, 52, 37, 19, 62, 190, 66, 139, 61, 198, 133, 40, 62, 3, 243, 249, 61, 191, 122, 48, 190, 86, 233, 140, 61, 87, 139, 79, 189, 106, 34, 113, 189, 133, 113, 167, 189, 74, 4, 206, 61, 144, 178, 232, 187, 107, 155, 12, 62, 26, 2, 255, 189, 148, 190, 57, 190, 221, 17, 181, 189, 63, 215, 7, 61, 31, 247, 63, 190, 39, 142, 14, 190, 149, 79, 153, 189, 140, 155, 201, 59, 66, 194, 44, 62, 44, 150, 187, 59, 100, 76, 236, 61, 37, 171, 36, 190, 111, 142, 32, 190, 78, 50, 37, 62, 150, 115, 135, 188, 187, 251, 139, 187, 236, 24, 224, 188, 239, 55, 22, 190, 79, 134, 7, 62, 88, 120, 49, 62, 166, 126, 193, 189, 212, 133, 234, 189, 149, 203, 252, 61, 36, 12, 156, 189, 9, 148, 33, 189, 254, 224, 177, 189, 26, 135, 82, 61, 44, 4, 249, 61, 16, 227, 199, 60, 11, 163, 217, 188, 156, 166, 215, 60, 43, 229, 16, 62, 128, 127, 52, 190, 26, 103, 217, 189, 235, 190, 193, 189, 68, 154, 90, 189, 89, 27, 170, 188, 21, 23, 36, 189, 118, 32, 16, 190, 191, 251, 117, 61, 113, 34, 111, 189, 61, 131, 252, 189, 29, 237, 162, 189, 234, 63, 22, 61, 110, 74, 203, 61, 33, 115, 203, 60, 10, 59, 59, 62, 83, 210, 149, 61, 209, 182, 22, 62, 63, 28, 213, 189, 151, 122, 182, 62, 81, 193, 221, 189, 96, 10, 198, 61, 211, 9, 134, 61, 95, 32, 1, 190, 178, 58, 76, 190, 129, 80, 169, 62, 35, 115, 223, 189, 87, 76, 165, 62, 71, 137, 80, 190, 111, 150, 130, 62, 91, 126, 199, 190, 207, 108, 56, 189, 101, 170, 46, 61, 228, 109, 67, 190, 78, 164, 175, 189, 211, 184, 132, 61, 201, 5, 30, 190, 241, 204, 135, 61, 108, 63, 181, 62, 165, 74, 137, 61, 136, 214, 48, 189, 237, 47, 110, 62, 225, 62, 163, 60, 69, 220, 115, 190, 253, 71, 143, 62, 89, 145, 174, 190, 52, 10, 190, 188, 118, 108, 29, 61, 52, 112, 64, 62, 138, 90, 120, 60, 108, 64, 39, 189, 238, 254, 160, 190, 222, 116, 96, 189, 72, 172, 12, 189, 68, 71, 218, 62, 72, 71, 20, 189, 81, 9, 155, 189, 22, 32, 140, 189, 204, 48, 179, 190, 26, 181, 160, 62, 214, 22, 212, 61, 100, 2, 19, 62, 175, 114, 244, 190, 91, 186, 133, 190, 158, 84, 207, 189, 8, 96, 162, 62, 63, 9, 48, 62, 56, 123, 253, 188, 53, 58, 108, 62, 111, 39, 135, 61, 255, 113, 112, 189, 47, 73, 223, 61, 178, 4, 209, 62, 55, 195, 188, 62, 127, 84, 49, 62, 121, 61, 222, 190, 15, 205, 128, 188, 254, 204, 132, 190, 128, 171, 193, 61, 99, 83, 192, 187, 195, 50, 20, 62, 112, 113, 227, 189, 15, 34, 170, 61, 232, 177, 182, 190, 22, 26, 84, 62, 56, 207, 129, 191, 182, 215, 129, 62, 175, 85, 133, 190, 158, 213, 192, 61, 235, 166, 13, 190, 8, 252, 13, 190, 46, 66, 160, 62, 231, 188, 193, 189, 74, 141, 31, 62, 225, 163, 4, 191, 164, 6, 161, 190, 58, 201, 46, 191, 118, 110, 1, 189, 28, 99, 233, 60, 145, 226, 20, 190, 219, 140, 162, 190, 154, 126, 191, 61, 159, 99, 62, 190, 9, 145, 175, 190, 74, 94, 160, 62, 16, 112, 78, 190, 72, 204, 170, 60, 236, 141, 75, 62, 221, 10, 60, 189, 47, 152, 158, 62, 173, 146, 31, 191, 102, 147, 175, 191, 14, 97, 124, 190, 206, 236, 51, 190, 125, 25, 85, 190, 216, 209, 81, 189, 190, 93, 233, 190, 48, 226, 40, 190, 187, 214, 20, 191, 53, 119, 168, 61, 8, 28, 102, 190, 158, 129, 184, 189, 170, 30, 70, 60, 216, 58, 177, 190, 131, 227, 219, 189, 134, 13, 58, 190, 166, 230, 142, 62, 86, 237, 47, 62, 84, 35, 85, 61, 155, 28, 147, 62, 246, 191, 131, 62, 60, 26, 133, 189, 71, 61, 132, 62, 65, 40, 243, 189, 171, 23, 61, 62, 221, 13, 134, 62, 38, 112, 232, 190, 91, 86, 226, 62, 219, 212, 128, 188, 247, 56, 77, 190, 238, 114, 27, 190, 248, 33, 208, 191, 198, 208, 80, 190, 33, 143, 168, 61, 54, 120, 174, 189, 215, 79, 193, 61, 94, 74, 175, 190, 60, 198, 162, 191, 100, 104, 41, 191, 13, 170, 129, 190, 31, 39, 58, 191, 10, 171, 154, 190, 187, 20, 9, 190, 36, 110, 246, 190, 223, 228, 12, 191, 243, 17, 169, 62, 150, 155, 160, 190, 236, 155, 60, 61, 241, 83, 15, 63, 91, 55, 138, 190, 28, 46, 238, 190, 206, 168, 131, 62, 225, 97, 33, 62, 192, 253, 137, 189, 57, 105, 164, 62, 88, 76, 124, 62, 54, 144, 220, 190, 84, 102, 134, 190, 176, 247, 21, 190, 234, 78, 59, 62, 118, 217, 57, 62, 218, 3, 246, 190, 223, 241, 187, 190, 252, 111, 72, 62, 192, 149, 141, 190, 216, 65, 103, 191, 0, 4, 149, 190, 76, 137, 0, 62, 203, 148, 64, 191, 8, 97, 51, 190, 49, 7, 153, 191, 22, 121, 92, 191, 243, 241, 162, 60, 12, 115, 192, 62, 82, 63, 14, 190, 146, 152, 124, 190, 38, 133, 143, 61, 108, 123, 200, 61, 35, 58, 35, 191, 83, 60, 163, 190, 132, 222, 250, 60, 50, 187, 119, 189, 133, 122, 8, 63, 237, 45, 77, 62, 134, 58, 108, 188, 109, 72, 199, 190, 243, 200, 32, 61, 220, 123, 144, 62, 75, 224, 141, 62, 121, 18, 81, 62, 56, 177, 148, 190, 122, 109, 18, 190, 165, 34, 152, 190, 161, 215, 235, 62, 193, 163, 77, 190, 229, 221, 19, 191, 193, 15, 166, 190, 163, 6, 34, 191, 20, 127, 166, 61, 58, 235, 253, 189, 76, 105, 71, 62, 196, 193, 189, 190, 31, 2, 62, 189, 90, 80, 158, 62, 170, 175, 205, 190, 176, 173, 42, 191, 68, 53, 126, 61, 129, 140, 23, 190, 164, 123, 242, 189, 146, 113, 67, 61, 86, 86, 162, 62, 233, 99, 83, 190, 224, 37, 10, 191, 122, 119, 32, 191, 162, 16, 150, 190, 36, 215, 13, 189, 251, 96, 162, 190, 175, 197, 100, 190, 57, 202, 52, 61, 155, 10, 183, 62, 141, 227, 175, 190, 56, 101, 252, 60, 126, 24, 132, 190, 68, 178, 114, 61, 125, 0, 150, 189, 143, 121, 180, 62, 19, 253, 214, 189, 141, 17, 167, 189, 88, 72, 202, 60, 119, 172, 123, 189, 78, 80, 52, 61, 158, 164, 227, 189, 244, 140, 96, 60, 127, 252, 44, 190, 188, 118, 23, 62, 22, 78, 30, 62, 132, 9, 38, 60, 91, 252, 181, 189, 76, 31, 132, 189, 90, 126, 166, 61, 226, 223, 22, 190, 65, 135, 236, 188, 249, 155, 34, 62, 134, 129, 95, 189, 121, 103, 67, 60, 137, 24, 129, 188, 19, 85, 61, 189, 221, 21, 0, 190, 94, 15, 70, 189, 241, 33, 0, 62, 9, 211, 236, 61, 72, 232, 215, 60, 196, 220, 31, 189, 185, 231, 239, 189, 201, 61, 22, 62, 221, 138, 226, 189, 74, 26, 22, 190, 65, 212, 180, 189, 209, 168, 197, 61, 12, 101, 77, 188, 42, 83, 5, 190, 18, 187, 5, 190, 247, 166, 195, 189, 73, 166, 180, 61, 120, 151, 87, 61, 225, 246, 106, 188, 28, 39, 170, 61, 64, 227, 48, 190, 210, 254, 245, 61, 190, 137, 149, 188, 134, 109, 114, 61, 169, 154, 168, 61, 156, 65, 34, 190, 251, 149, 227, 189, 132, 197, 171, 189, 191, 173, 177, 189, 108, 107, 217, 61, 148, 194, 246, 189, 96, 18, 182, 61, 114, 66, 35, 190, 23, 157, 154, 188, 246, 252, 51, 60, 95, 231, 46, 190, 228, 110, 151, 61, 176, 6, 236, 189, 221, 222, 132, 61, 8, 242, 135, 189, 123, 138, 48, 62, 101, 211, 19, 190, 78, 207, 161, 61, 10, 15, 215, 189, 121, 242, 179, 58, 110, 229, 220, 62, 69, 132, 158, 62, 103, 3, 9, 62, 231, 28, 238, 189, 121, 126, 94, 62, 76, 134, 12, 63, 37, 220, 41, 190, 56, 172, 35, 191, 209, 214, 20, 63, 134, 6, 141, 61, 235, 131, 203, 61, 164, 154, 229, 190, 129, 103, 113, 61, 139, 118, 184, 62, 209, 172, 9, 62, 157, 75, 78, 62, 159, 190, 65, 191, 64, 34, 221, 187, 92, 132, 230, 190, 75, 117, 39, 189, 148, 150, 163, 190, 28, 146, 230, 189, 157, 180, 218, 190, 247, 210, 143, 62, 190, 174, 3, 60, 51, 116, 14, 190, 193, 43, 51, 62, 166, 77, 64, 191, 167, 37, 68, 190, 60, 96, 182, 62, 107, 180, 147, 61, 48, 122, 138, 62, 185, 49, 130, 61, 56, 100, 80, 60, 76, 208, 186, 189, 63, 10, 187, 60, 113, 110, 95, 62, 218, 40, 156, 61, 22, 130, 82, 62, 160, 128, 84, 188, 219, 133, 203, 188, 196, 101, 161, 190, 25, 88, 212, 61, 188, 231, 74, 61, 183, 246, 147, 61, 101, 45, 108, 61, 195, 70, 153, 190, 137, 95, 93, 62, 44, 214, 188, 189, 188, 222, 76, 188, 56, 30, 213, 189, 75, 102, 165, 190, 183, 56, 53, 61, 215, 185, 249, 61, 12, 57, 131, 61, 93, 181, 181, 61, 191, 79, 137, 62, 90, 63, 42, 190, 19, 98, 10, 62, 96, 160, 157, 190, 76, 1, 176, 62, 223, 251, 38, 62, 135, 20, 21, 190, 214, 246, 240, 186, 177, 156, 119, 190, 215, 84, 130, 62, 31, 160, 115, 60, 188, 91, 50, 62, 86, 194, 36, 62, 212, 243, 158, 62, 133, 228, 16, 62, 65, 116, 207, 189, 128, 11, 58, 63, 198, 145, 63, 191, 153, 44, 162, 62, 4, 194, 212, 62, 113, 22, 235, 191, 151, 199, 129, 62, 21, 180, 191, 61, 181, 230, 255, 60, 190, 176, 21, 191, 12, 134, 170, 190, 236, 185, 178, 62, 21, 166, 57, 190, 246, 253, 0, 191, 46, 190, 219, 61, 36, 152, 18, 190, 113, 119, 137, 62, 70, 166, 83, 62, 77, 57, 68, 191, 148, 60, 234, 62, 140, 0, 226, 190, 200, 100, 190, 189, 184, 21, 43, 62, 160, 163, 134, 190, 89, 209, 132, 61, 115, 111, 244, 190, 73, 83, 39, 61, 2, 181, 12, 61, 165, 19, 137, 61, 94, 231, 180, 61, 56, 94, 2, 63, 165, 210, 226, 59, 49, 252, 217, 62, 61, 221, 1, 191, 21, 81, 50, 191, 228, 55, 65, 62, 70, 235, 97, 61, 90, 245, 142, 190, 176, 150, 106, 62, 61, 109, 181, 61, 233, 26, 215, 190, 224, 177, 66, 191, 0, 198, 96, 190, 23, 6, 104, 189, 231, 161, 45, 189, 220, 40, 228, 190, 155, 108, 139, 61, 84, 16, 126, 190, 174, 194, 37, 62, 16, 221, 140, 61, 170, 162, 4, 191, 236, 250, 17, 191, 97, 34, 153, 190, 138, 202, 45, 189, 75, 102, 239, 62, 40, 175, 131, 190, 160, 210, 206, 61, 7, 196, 108, 190, 115, 188, 163, 190, 177, 209, 116, 62, 58, 26, 50, 62, 223, 119, 41, 61, 157, 111, 237, 188, 252, 246, 179, 189, 31, 71, 61, 190, 104, 156, 106, 191, 227, 141, 124, 61, 252, 157, 105, 188, 182, 192, 74, 61, 53, 44, 32, 190, 110, 196, 28, 62, 88, 45, 190, 190, 146, 18, 142, 59, 50, 144, 171, 62, 166, 35, 55, 190, 194, 225, 34, 61, 169, 89, 214, 61, 104, 85, 137, 62, 58, 219, 227, 61, 33, 231, 139, 62, 58, 214, 67, 62, 200, 16, 8, 62, 63, 199, 74, 190, 80, 180, 15, 190, 249, 178, 128, 188, 198, 197, 156, 59, 221, 200, 132, 189, 33, 87, 201, 190, 65, 232, 81, 61, 105, 85, 221, 191, 248, 158, 45, 191, 5, 17, 132, 190, 209, 118, 74, 189, 29, 88, 76, 191, 241, 228, 66, 189, 187, 163, 56, 191, 45, 178, 114, 190, 32, 253, 44, 191, 29, 65, 110, 62, 157, 192, 30, 190, 24, 197, 33, 190, 254, 169, 139, 62, 154, 203, 150, 61, 2, 122, 212, 190, 195, 124, 181, 189, 219, 199, 25, 191, 239, 149, 227, 61, 131, 76, 167, 189, 6, 98, 70, 187, 61, 186, 202, 61, 175, 209, 81, 188, 15, 156, 231, 62, 18, 217, 73, 62, 13, 65, 36, 62, 81, 215, 32, 190, 155, 221, 209, 190, 21, 217, 66, 62, 246, 209, 190, 61, 36, 124, 144, 190, 203, 117, 32, 190, 202, 0, 95, 190, 181, 236, 24, 62, 7, 139, 112, 190, 103, 16, 9, 62, 129, 3, 11, 62, 104, 49, 224, 190, 193, 116, 48, 63, 220, 225, 70, 190, 145, 171, 206, 61, 246, 156, 220, 62, 89, 170, 103, 59, 171, 23, 15, 62, 159, 85, 29, 191, 3, 246, 227, 191, 3, 231, 237, 62, 121, 71, 135, 189, 59, 77, 137, 189, 148, 9, 21, 191, 253, 187, 134, 190, 97, 240, 148, 191, 75, 219, 25, 62, 128, 47, 35, 190, 43, 113, 156, 189, 90, 151, 179, 61, 131, 98, 21, 62, 39, 123, 168, 189, 57, 10, 26, 191, 81, 150, 206, 62, 121, 99, 135, 62, 231, 230, 183, 190, 105, 126, 200, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 23, 94, 62, 136, 100, 217, 61, 113, 66, 182, 61, 195, 6, 128, 62, 47, 216, 182, 61, 77, 129, 130, 62, 202, 230, 200, 190, 85, 31, 218, 62, 197, 162, 63, 189, 142, 109, 119, 62, 104, 250, 206, 61, 46, 101, 126, 60, 20, 35, 17, 190, 179, 81, 141, 189, 114, 84, 27, 190, 123, 138, 198, 189, 208, 240, 145, 62, 69, 205, 78, 188, 222, 240, 177, 189, 240, 52, 124, 62, 60, 131, 7, 62, 7, 174, 34, 62, 8, 80, 80, 62, 248, 21, 233, 189, 241, 36, 22, 190, 126, 142, 51, 189, 125, 252, 153, 62, 202, 49, 100, 62, 35, 36, 188, 62, 242, 21, 171, 62, 90, 199, 153, 62, 235, 66, 239, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 152, 201, 62, 173, 173, 77, 62, 174, 114, 188, 62, 20, 1, 86, 63, 146, 68, 174, 189, 32, 162, 195, 61, 102, 210, 172, 62, 123, 22, 250, 190, 121, 247, 18, 60, 159, 186, 21, 63, 150, 129, 195, 63, 125, 218, 235, 188, 223, 218, 249, 190, 150, 67, 94, 63, 213, 20, 17, 62, 92, 97, 28, 62, 213, 246, 179, 189, 215, 68, 233, 190, 227, 183, 150, 62, 147, 115, 68, 63, 102, 32, 19, 190, 100, 17, 84, 63, 188, 234, 35, 191, 100, 225, 11, 190, 233, 16, 209, 61, 55, 177, 157, 63, 45, 71, 2, 189, 230, 24, 151, 191, 29, 220, 90, 191, 122, 98, 116, 61, 212, 21, 34, 63, 189, 117, 39, 191, 61, 163, 67, 190, 175, 140, 144, 190, 218, 159, 207, 59, 255, 197, 218, 62, 177, 23, 74, 190, 212, 35, 185, 190, 107, 39, 148, 62, 196, 143, 105, 189, 135, 166, 103, 188, 145, 88, 47, 62, 45, 36, 240, 188, 138, 154, 215, 61, 163, 189, 62, 63, 138, 43, 124, 62, 111, 235, 163, 60, 144, 189, 174, 60, 97, 103, 133, 190, 129, 238, 253, 189, 125, 58, 57, 63, 185, 251, 19, 63, 0, 133, 159, 191, 33, 169, 4, 190, 74, 53, 185, 189, 152, 129, 228, 188, 179, 249, 16, 188, 150, 36, 99, 62, 41, 73, 154, 190, 98, 231, 13, 63, 197, 14, 62, 189, 73, 144, 141, 190, 58, 183, 44, 60, 82, 234, 132, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 180, 76, 190, 214, 25, 253, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {154, 70, 226, 191, 204, 68, 6, 192, 48, 39, 177, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {246, 13, 70, 192, 123, 18, 254, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0064/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}