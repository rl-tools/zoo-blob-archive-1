// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 70, 108, 61, 82, 0, 228, 190, 255, 155, 184, 62, 249, 60, 158, 190, 172, 175, 2, 191, 57, 253, 220, 190, 195, 199, 150, 62, 23, 210, 252, 62, 32, 239, 154, 62, 242, 118, 149, 190, 89, 108, 236, 188, 98, 83, 164, 189, 72, 86, 231, 57, 218, 127, 249, 62, 56, 147, 55, 190, 50, 206, 37, 62, 204, 1, 128, 190, 155, 149, 204, 188, 38, 149, 147, 190, 10, 55, 13, 63, 8, 17, 179, 59, 191, 2, 183, 61, 228, 151, 194, 190, 199, 197, 74, 61, 135, 60, 245, 190, 46, 40, 204, 62, 32, 213, 66, 190, 97, 15, 197, 190, 121, 67, 195, 189, 60, 9, 146, 62, 174, 62, 216, 62, 107, 204, 11, 63, 109, 97, 10, 63, 76, 198, 132, 62, 9, 44, 3, 191, 81, 163, 225, 59, 25, 145, 29, 190, 165, 118, 190, 62, 107, 67, 4, 191, 94, 31, 218, 62, 147, 187, 46, 190, 219, 240, 190, 62, 102, 33, 52, 190, 143, 90, 237, 190, 158, 21, 1, 63, 202, 206, 173, 62, 210, 120, 139, 61, 15, 51, 140, 62, 112, 119, 231, 190, 79, 51, 109, 190, 25, 22, 235, 62, 165, 161, 173, 62, 89, 97, 89, 61, 115, 181, 10, 63, 102, 229, 240, 189, 7, 18, 157, 189, 191, 224, 183, 190, 5, 147, 144, 190, 24, 17, 238, 186, 95, 23, 1, 191, 100, 169, 207, 190, 1, 133, 10, 191, 221, 143, 147, 62, 77, 127, 248, 62, 85, 163, 209, 62, 187, 222, 205, 190, 3, 14, 152, 62, 182, 99, 202, 190, 37, 240, 242, 62, 249, 60, 34, 190, 19, 141, 183, 189, 200, 125, 16, 63, 41, 88, 106, 62, 47, 191, 212, 59, 10, 156, 19, 191, 66, 227, 201, 189, 167, 152, 71, 62, 15, 233, 215, 61, 131, 115, 202, 190, 175, 39, 203, 190, 11, 208, 207, 190, 102, 160, 233, 189, 63, 102, 237, 190, 190, 97, 36, 62, 57, 67, 235, 62, 249, 55, 8, 62, 242, 127, 137, 62, 220, 106, 194, 62, 186, 103, 79, 189, 223, 66, 210, 188, 43, 224, 205, 62, 87, 85, 180, 190, 21, 170, 253, 62, 232, 218, 213, 190, 212, 245, 8, 63, 166, 197, 222, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 166, 19, 191, 126, 143, 25, 62, 104, 102, 204, 190, 145, 8, 16, 191, 111, 117, 19, 62, 245, 217, 214, 190, 16, 141, 19, 191, 105, 253, 7, 191, 202, 58, 2, 191, 132, 196, 223, 190, 220, 203, 2, 191, 244, 227, 50, 190, 58, 179, 133, 62, 36, 60, 83, 189, 126, 46, 18, 62, 161, 207, 178, 62, 41, 184, 217, 190, 139, 138, 247, 61, 126, 192, 16, 191, 23, 211, 198, 190, 80, 42, 182, 62, 216, 50, 151, 189, 159, 98, 9, 63, 232, 208, 186, 62, 73, 164, 168, 62, 185, 30, 251, 62, 150, 96, 17, 63, 170, 112, 141, 62, 160, 160, 5, 191, 219, 27, 8, 190, 188, 250, 244, 62, 246, 0, 146, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 215, 74, 61, 192, 149, 95, 61, 37, 65, 40, 189, 247, 201, 196, 61, 22, 221, 153, 189, 221, 203, 24, 190, 46, 171, 215, 189, 84, 3, 195, 187, 244, 209, 1, 61, 244, 5, 241, 189, 195, 105, 39, 62, 238, 255, 78, 189, 231, 62, 16, 190, 50, 202, 253, 189, 139, 11, 60, 61, 90, 47, 22, 62, 147, 67, 202, 60, 188, 251, 203, 189, 24, 38, 158, 61, 64, 225, 33, 189, 168, 131, 183, 61, 220, 191, 244, 189, 89, 235, 38, 188, 155, 3, 223, 189, 61, 78, 47, 62, 186, 232, 181, 61, 4, 184, 17, 62, 58, 242, 190, 189, 31, 6, 116, 189, 236, 209, 7, 189, 117, 104, 217, 189, 108, 76, 13, 190, 230, 227, 140, 189, 196, 15, 209, 189, 217, 92, 249, 61, 201, 134, 29, 61, 69, 252, 160, 61, 209, 130, 194, 189, 53, 240, 250, 60, 117, 176, 118, 61, 3, 224, 29, 60, 87, 120, 194, 60, 80, 221, 49, 62, 142, 137, 120, 60, 109, 133, 44, 61, 177, 223, 178, 61, 110, 127, 148, 188, 202, 68, 204, 61, 23, 156, 18, 62, 71, 137, 9, 61, 138, 159, 158, 61, 11, 134, 17, 189, 17, 193, 235, 60, 74, 104, 170, 60, 108, 24, 79, 189, 63, 208, 49, 62, 143, 104, 236, 189, 148, 21, 24, 190, 183, 27, 175, 189, 177, 12, 37, 62, 20, 59, 63, 61, 30, 40, 12, 62, 241, 192, 43, 190, 204, 202, 1, 190, 168, 100, 36, 190, 225, 96, 245, 61, 59, 172, 6, 190, 147, 142, 163, 60, 205, 136, 24, 61, 182, 118, 205, 61, 65, 182, 79, 61, 111, 245, 242, 189, 159, 162, 39, 190, 84, 134, 114, 189, 128, 62, 221, 61, 250, 164, 28, 62, 103, 214, 178, 188, 48, 158, 161, 61, 44, 27, 21, 62, 150, 116, 155, 187, 27, 156, 44, 62, 86, 116, 20, 61, 49, 81, 192, 188, 56, 157, 70, 58, 188, 18, 194, 59, 119, 17, 36, 190, 207, 203, 25, 62, 70, 223, 208, 189, 16, 136, 187, 189, 81, 67, 5, 61, 150, 15, 8, 190, 234, 7, 11, 190, 35, 255, 189, 189, 255, 181, 56, 189, 213, 175, 203, 61, 223, 15, 18, 189, 154, 138, 42, 62, 141, 48, 235, 60, 20, 148, 157, 189, 100, 78, 254, 61, 135, 155, 79, 189, 89, 194, 35, 190, 208, 170, 164, 189, 150, 157, 138, 189, 42, 141, 49, 190, 66, 243, 49, 62, 239, 243, 2, 60, 176, 132, 136, 188, 139, 110, 146, 189, 27, 247, 237, 60, 2, 237, 31, 189, 146, 61, 196, 188, 67, 91, 170, 61, 242, 25, 180, 61, 99, 59, 32, 62, 7, 85, 47, 62, 90, 104, 46, 62, 245, 74, 30, 190, 57, 4, 39, 190, 146, 85, 32, 190, 116, 18, 168, 189, 244, 161, 161, 189, 48, 132, 178, 61, 231, 242, 251, 189, 8, 170, 71, 189, 255, 197, 190, 189, 186, 198, 100, 189, 114, 46, 64, 189, 35, 131, 4, 62, 198, 71, 0, 190, 76, 113, 135, 189, 93, 41, 104, 61, 116, 215, 24, 62, 12, 245, 16, 62, 90, 197, 9, 62, 247, 75, 167, 189, 246, 254, 163, 189, 3, 85, 13, 62, 135, 244, 2, 61, 84, 1, 103, 189, 64, 27, 193, 185, 76, 193, 49, 62, 55, 131, 90, 188, 85, 118, 172, 186, 156, 93, 35, 62, 67, 90, 104, 188, 69, 131, 103, 189, 54, 60, 28, 61, 83, 143, 170, 61, 96, 46, 54, 188, 223, 141, 20, 62, 73, 156, 3, 62, 246, 180, 157, 189, 138, 204, 5, 62, 241, 85, 9, 62, 188, 63, 29, 190, 37, 165, 128, 186, 71, 102, 248, 61, 153, 48, 179, 189, 236, 180, 205, 189, 175, 216, 228, 189, 98, 32, 26, 61, 175, 141, 172, 189, 83, 55, 176, 189, 147, 234, 187, 189, 111, 194, 103, 61, 8, 213, 176, 189, 121, 180, 31, 62, 60, 73, 218, 59, 91, 208, 236, 189, 163, 56, 116, 61, 100, 13, 11, 62, 207, 0, 185, 61, 64, 180, 159, 61, 166, 88, 121, 187, 91, 47, 65, 61, 97, 85, 194, 60, 118, 169, 218, 189, 54, 124, 51, 190, 113, 67, 203, 189, 7, 159, 207, 188, 95, 178, 140, 61, 65, 78, 146, 189, 74, 199, 96, 59, 26, 160, 133, 60, 109, 32, 22, 62, 254, 39, 3, 62, 235, 84, 221, 189, 131, 109, 40, 190, 187, 119, 106, 60, 203, 193, 214, 61, 51, 15, 81, 189, 155, 34, 197, 189, 234, 13, 126, 61, 172, 43, 51, 190, 79, 42, 235, 61, 178, 151, 29, 190, 228, 165, 133, 60, 13, 67, 36, 190, 218, 218, 28, 62, 115, 175, 210, 189, 243, 126, 250, 189, 145, 123, 21, 190, 21, 253, 40, 190, 76, 79, 229, 58, 154, 89, 112, 61, 83, 223, 36, 62, 188, 82, 8, 189, 14, 103, 75, 189, 84, 92, 253, 61, 222, 224, 3, 189, 192, 57, 33, 62, 18, 250, 12, 190, 15, 83, 17, 62, 91, 8, 27, 62, 39, 188, 37, 61, 181, 182, 48, 62, 239, 226, 9, 190, 50, 54, 65, 189, 83, 155, 8, 190, 201, 142, 199, 61, 29, 87, 163, 60, 53, 234, 91, 189, 76, 36, 209, 189, 149, 0, 17, 62, 29, 206, 42, 62, 199, 85, 234, 61, 235, 155, 212, 61, 208, 200, 207, 185, 31, 218, 103, 61, 106, 97, 118, 189, 179, 224, 32, 190, 16, 99, 39, 190, 25, 193, 1, 62, 95, 163, 12, 190, 11, 92, 51, 61, 229, 158, 12, 190, 248, 251, 186, 188, 11, 164, 148, 188, 193, 140, 35, 62, 187, 221, 49, 190, 129, 155, 43, 189, 248, 97, 1, 62, 161, 192, 2, 62, 102, 214, 145, 188, 94, 92, 203, 189, 250, 51, 240, 189, 254, 160, 52, 190, 155, 44, 7, 190, 225, 211, 161, 189, 180, 204, 202, 189, 145, 34, 221, 189, 86, 52, 17, 61, 205, 94, 155, 61, 52, 209, 14, 62, 90, 201, 69, 60, 115, 68, 254, 188, 224, 249, 48, 190, 50, 156, 145, 61, 186, 31, 96, 189, 140, 154, 72, 189, 105, 129, 114, 189, 142, 162, 42, 190, 151, 220, 25, 190, 120, 29, 178, 61, 110, 19, 245, 61, 33, 184, 14, 190, 150, 81, 48, 190, 1, 160, 203, 189, 84, 34, 40, 190, 146, 244, 235, 189, 155, 230, 11, 61, 217, 121, 245, 189, 43, 206, 27, 61, 36, 184, 178, 61, 85, 52, 3, 62, 212, 78, 196, 188, 80, 35, 97, 189, 173, 218, 6, 61, 15, 43, 4, 61, 25, 16, 238, 188, 102, 219, 36, 190, 140, 39, 140, 189, 129, 168, 152, 189, 18, 72, 32, 190, 53, 14, 156, 61, 106, 174, 216, 61, 103, 30, 45, 190, 70, 210, 249, 60, 89, 241, 224, 189, 110, 83, 205, 189, 16, 146, 160, 60, 232, 106, 162, 189, 108, 195, 24, 60, 245, 205, 170, 61, 86, 80, 255, 189, 79, 255, 176, 189, 35, 4, 14, 190, 118, 223, 92, 61, 15, 192, 19, 62, 158, 51, 108, 60, 210, 8, 237, 61, 133, 55, 141, 188, 185, 81, 41, 190, 61, 167, 248, 189, 243, 94, 1, 62, 216, 65, 135, 189, 232, 154, 39, 62, 195, 230, 167, 189, 226, 194, 189, 189, 6, 22, 243, 61, 192, 99, 23, 62, 30, 129, 243, 186, 60, 160, 227, 189, 242, 220, 29, 62, 119, 186, 48, 190, 61, 34, 217, 189, 101, 130, 7, 188, 159, 101, 123, 189, 222, 59, 243, 61, 171, 2, 237, 60, 249, 16, 252, 61, 61, 85, 68, 189, 18, 33, 16, 62, 77, 107, 173, 188, 46, 21, 242, 189, 68, 200, 59, 189, 153, 7, 4, 190, 23, 109, 175, 189, 135, 91, 223, 60, 231, 5, 48, 61, 248, 220, 32, 189, 79, 143, 154, 60, 109, 211, 23, 189, 239, 159, 178, 188, 56, 241, 37, 62, 239, 54, 26, 190, 116, 129, 70, 189, 106, 189, 131, 61, 78, 213, 23, 189, 231, 66, 84, 189, 156, 212, 39, 190, 125, 88, 168, 189, 188, 85, 26, 62, 252, 154, 200, 189, 59, 112, 7, 190, 68, 40, 48, 190, 140, 125, 153, 61, 34, 182, 173, 189, 48, 6, 49, 189, 214, 69, 50, 62, 150, 140, 134, 186, 235, 148, 123, 61, 189, 210, 138, 189, 96, 107, 224, 189, 203, 25, 69, 189, 18, 96, 48, 62, 176, 175, 4, 189, 25, 59, 200, 60, 116, 121, 230, 188, 66, 44, 24, 190, 185, 108, 0, 190, 77, 78, 34, 61, 136, 128, 224, 189, 19, 29, 157, 188, 107, 146, 206, 61, 66, 238, 64, 189, 146, 159, 39, 189, 76, 20, 18, 190, 149, 79, 42, 190, 146, 15, 9, 190, 183, 89, 141, 61, 181, 193, 35, 188, 126, 52, 63, 189, 196, 246, 255, 188, 132, 142, 241, 189, 61, 15, 233, 60, 232, 167, 24, 62, 67, 222, 160, 189, 22, 145, 100, 187, 11, 63, 149, 61, 96, 99, 178, 61, 80, 85, 234, 189, 128, 90, 182, 189, 18, 161, 193, 59, 181, 50, 12, 189, 188, 65, 33, 189, 160, 191, 47, 62, 206, 138, 135, 189, 182, 76, 93, 189, 72, 117, 2, 190, 237, 61, 207, 189, 5, 71, 23, 190, 159, 234, 155, 61, 205, 55, 209, 60, 254, 235, 207, 60, 18, 219, 34, 190, 66, 144, 208, 189, 198, 252, 8, 189, 104, 160, 90, 61, 73, 6, 244, 61, 146, 149, 146, 61, 233, 72, 37, 62, 217, 40, 153, 60, 97, 176, 166, 189, 135, 4, 45, 189, 88, 184, 93, 187, 54, 197, 121, 61, 133, 248, 154, 189, 61, 110, 47, 189, 225, 78, 157, 187, 143, 215, 152, 189, 6, 126, 210, 61, 120, 181, 68, 189, 239, 67, 77, 60, 194, 120, 28, 190, 184, 50, 13, 190, 10, 71, 58, 61, 242, 252, 15, 189, 79, 8, 13, 189, 84, 55, 148, 61, 140, 111, 242, 61, 115, 223, 233, 61, 98, 115, 29, 190, 244, 131, 5, 190, 170, 187, 156, 189, 215, 135, 26, 188, 4, 128, 3, 190, 158, 234, 248, 61, 219, 203, 179, 189, 123, 6, 3, 190, 7, 206, 10, 62, 254, 229, 169, 189, 155, 59, 11, 62, 108, 167, 3, 190, 39, 79, 143, 61, 215, 81, 30, 62, 117, 19, 210, 189, 181, 114, 146, 189, 52, 196, 213, 189, 246, 1, 71, 61, 13, 7, 1, 190, 65, 87, 54, 61, 0, 230, 153, 61, 47, 252, 166, 61, 169, 146, 36, 187, 91, 187, 7, 190, 198, 44, 31, 189, 195, 219, 251, 60, 54, 63, 49, 190, 156, 193, 6, 190, 96, 225, 129, 61, 142, 13, 194, 189, 215, 155, 203, 189, 254, 80, 251, 188, 30, 248, 3, 190, 131, 160, 29, 190, 100, 226, 33, 62, 190, 66, 139, 61, 198, 133, 40, 62, 193, 13, 2, 62, 191, 122, 48, 190, 212, 109, 184, 61, 39, 112, 24, 189, 145, 26, 113, 189, 227, 72, 147, 189, 74, 4, 206, 61, 144, 178, 232, 187, 205, 12, 24, 62, 55, 178, 252, 189, 196, 94, 47, 190, 160, 121, 179, 189, 63, 215, 7, 61, 24, 218, 37, 190, 246, 193, 9, 190, 77, 165, 94, 189, 140, 155, 201, 59, 66, 194, 44, 62, 210, 100, 237, 59, 84, 141, 14, 62, 37, 171, 36, 190, 111, 142, 32, 190, 78, 50, 37, 62, 150, 115, 135, 188, 187, 251, 139, 187, 236, 24, 224, 188, 239, 55, 22, 190, 79, 134, 7, 62, 88, 120, 49, 62, 166, 126, 193, 189, 212, 133, 234, 189, 149, 203, 252, 61, 36, 12, 156, 189, 9, 148, 33, 189, 254, 224, 177, 189, 26, 135, 82, 61, 44, 4, 249, 61, 16, 227, 199, 60, 11, 163, 217, 188, 156, 166, 215, 60, 43, 229, 16, 62, 128, 127, 52, 190, 26, 103, 217, 189, 235, 190, 193, 189, 68, 154, 90, 189, 89, 27, 170, 188, 21, 23, 36, 189, 118, 32, 16, 190, 191, 251, 117, 61, 113, 34, 111, 189, 61, 131, 252, 189, 29, 237, 162, 189, 104, 250, 124, 188, 39, 228, 164, 186, 246, 154, 142, 61, 253, 103, 15, 61, 22, 41, 249, 61, 203, 189, 22, 62, 214, 237, 16, 189, 31, 224, 208, 187, 223, 239, 243, 187, 254, 176, 37, 61, 119, 112, 212, 187, 239, 100, 138, 189, 146, 24, 0, 190, 177, 232, 6, 62, 83, 181, 5, 189, 124, 53, 150, 61, 123, 16, 20, 190, 133, 226, 7, 62, 230, 143, 153, 61, 204, 56, 25, 62, 29, 161, 151, 60, 85, 3, 31, 189, 191, 147, 43, 190, 162, 43, 107, 189, 102, 218, 247, 189, 135, 182, 201, 188, 185, 105, 45, 62, 223, 122, 12, 62, 159, 144, 41, 190, 138, 69, 181, 61, 69, 123, 14, 190, 69, 37, 35, 190, 146, 240, 17, 62, 2, 75, 51, 187, 139, 5, 152, 188, 110, 60, 113, 189, 176, 55, 189, 61, 78, 198, 119, 60, 93, 184, 7, 189, 184, 87, 77, 189, 200, 172, 113, 189, 197, 21, 115, 61, 117, 84, 143, 61, 21, 54, 238, 188, 16, 109, 229, 189, 109, 89, 251, 189, 43, 242, 160, 189, 217, 54, 134, 61, 213, 74, 238, 61, 206, 30, 86, 61, 159, 223, 95, 60, 117, 35, 32, 190, 139, 219, 81, 189, 140, 43, 29, 62, 237, 115, 247, 61, 222, 29, 160, 189, 67, 55, 29, 62, 196, 249, 40, 62, 172, 67, 14, 62, 135, 143, 5, 62, 64, 198, 228, 61, 94, 225, 160, 61, 83, 245, 210, 61, 106, 71, 230, 189, 105, 115, 66, 61, 206, 1, 175, 189, 44, 101, 141, 189, 94, 201, 104, 187, 123, 76, 82, 61, 112, 113, 227, 189, 176, 62, 232, 189, 209, 103, 161, 61, 144, 133, 46, 62, 198, 196, 74, 189, 89, 87, 212, 189, 107, 149, 158, 61, 241, 151, 210, 187, 211, 34, 48, 62, 163, 246, 143, 189, 164, 136, 8, 62, 227, 65, 243, 61, 107, 15, 15, 62, 202, 25, 229, 61, 55, 11, 147, 189, 2, 207, 50, 189, 14, 246, 157, 189, 233, 67, 41, 62, 250, 120, 104, 189, 23, 79, 52, 188, 187, 44, 100, 189, 170, 121, 91, 189, 84, 100, 135, 189, 219, 43, 243, 61, 158, 18, 16, 62, 155, 140, 231, 61, 58, 211, 5, 190, 155, 125, 32, 62, 212, 6, 50, 62, 143, 89, 27, 190, 146, 161, 104, 61, 160, 119, 57, 189, 206, 236, 51, 190, 154, 53, 218, 61, 230, 103, 74, 187, 151, 244, 131, 61, 4, 122, 20, 189, 178, 44, 138, 189, 106, 94, 184, 189, 113, 227, 51, 190, 224, 21, 131, 185, 11, 172, 37, 61, 221, 7, 176, 189, 247, 131, 124, 60, 132, 57, 245, 189, 138, 82, 171, 188, 148, 103, 114, 189, 15, 128, 217, 189, 232, 7, 42, 62, 169, 208, 9, 62, 125, 214, 130, 189, 66, 133, 122, 60, 104, 94, 56, 189, 226, 117, 182, 61, 53, 201, 145, 61, 101, 156, 212, 188, 244, 113, 173, 61, 61, 116, 171, 188, 200, 234, 198, 60, 144, 45, 112, 189, 102, 18, 38, 190, 5, 43, 20, 62, 139, 60, 30, 62, 105, 142, 92, 189, 215, 79, 193, 61, 123, 74, 229, 60, 252, 210, 33, 190, 9, 46, 16, 190, 215, 231, 210, 189, 62, 22, 38, 190, 30, 61, 208, 189, 87, 186, 32, 62, 8, 15, 51, 190, 193, 139, 46, 190, 244, 70, 198, 59, 199, 38, 0, 190, 56, 150, 147, 189, 90, 209, 197, 61, 213, 251, 239, 189, 251, 214, 19, 190, 14, 6, 143, 189, 38, 88, 138, 61, 232, 199, 140, 61, 0, 82, 180, 189, 192, 38, 44, 62, 120, 219, 129, 189, 71, 129, 142, 189, 242, 93, 166, 61, 251, 85, 0, 190, 91, 60, 171, 61, 193, 20, 248, 189, 35, 59, 75, 189, 94, 131, 246, 61, 213, 196, 63, 188, 36, 204, 19, 190, 27, 23, 168, 189, 76, 137, 0, 62, 29, 7, 202, 60, 213, 2, 252, 61, 213, 41, 23, 190, 209, 249, 49, 190, 132, 64, 153, 189, 108, 153, 163, 189, 119, 245, 17, 190, 27, 164, 46, 61, 162, 209, 89, 189, 175, 102, 83, 60, 174, 13, 6, 62, 73, 110, 139, 61, 65, 140, 21, 62, 148, 162, 50, 62, 57, 56, 134, 189, 70, 33, 36, 190, 48, 241, 31, 190, 154, 127, 38, 188, 184, 120, 252, 188, 166, 55, 196, 188, 204, 228, 5, 62, 229, 204, 160, 189, 25, 135, 29, 190, 109, 56, 162, 60, 59, 152, 252, 61, 246, 116, 57, 61, 117, 114, 201, 61, 185, 231, 0, 189, 223, 202, 139, 188, 178, 111, 146, 189, 159, 5, 1, 188, 58, 235, 253, 189, 111, 63, 67, 61, 57, 92, 55, 59, 182, 189, 123, 58, 222, 142, 252, 189, 7, 17, 202, 189, 92, 74, 209, 189, 121, 170, 54, 60, 96, 29, 154, 186, 126, 167, 24, 61, 176, 188, 234, 189, 220, 213, 7, 62, 137, 107, 242, 188, 134, 63, 188, 61, 61, 139, 37, 190, 69, 44, 234, 188, 212, 12, 42, 61, 240, 23, 28, 190, 119, 105, 3, 190, 93, 211, 28, 62, 67, 220, 253, 61, 208, 229, 49, 190, 161, 130, 22, 62, 9, 230, 119, 61, 24, 215, 181, 60, 125, 145, 145, 61, 113, 1, 54, 189, 19, 253, 214, 189, 141, 17, 167, 189, 88, 72, 202, 60, 119, 172, 123, 189, 78, 80, 52, 61, 158, 164, 227, 189, 244, 140, 96, 60, 127, 252, 44, 190, 188, 118, 23, 62, 22, 78, 30, 62, 132, 9, 38, 60, 91, 252, 181, 189, 76, 31, 132, 189, 90, 126, 166, 61, 226, 223, 22, 190, 65, 135, 236, 188, 249, 155, 34, 62, 134, 129, 95, 189, 121, 103, 67, 60, 137, 24, 129, 188, 19, 85, 61, 189, 221, 21, 0, 190, 94, 15, 70, 189, 241, 33, 0, 62, 9, 211, 236, 61, 72, 232, 215, 60, 196, 220, 31, 189, 185, 231, 239, 189, 201, 61, 22, 62, 221, 138, 226, 189, 74, 26, 22, 190, 65, 212, 180, 189, 209, 168, 197, 61, 120, 109, 32, 187, 42, 83, 5, 190, 18, 187, 5, 190, 85, 81, 153, 189, 73, 166, 180, 61, 240, 51, 114, 61, 225, 246, 106, 188, 110, 25, 190, 61, 13, 227, 48, 190, 210, 254, 245, 61, 190, 137, 149, 188, 223, 118, 177, 61, 169, 154, 168, 61, 229, 132, 26, 190, 50, 202, 198, 189, 124, 186, 167, 189, 8, 254, 178, 189, 108, 107, 217, 61, 148, 194, 246, 189, 253, 147, 218, 61, 114, 66, 35, 190, 136, 118, 69, 188, 172, 165, 204, 60, 136, 180, 35, 190, 83, 24, 201, 61, 149, 220, 188, 189, 165, 61, 157, 61, 8, 242, 135, 189, 123, 138, 48, 62, 115, 62, 17, 190, 49, 184, 223, 61, 111, 105, 51, 189, 228, 89, 158, 189, 222, 86, 22, 62, 18, 90, 170, 61, 73, 15, 75, 61, 231, 28, 238, 189, 217, 36, 191, 59, 25, 135, 215, 61, 193, 158, 184, 189, 189, 67, 239, 189, 107, 76, 205, 61, 222, 111, 223, 61, 177, 120, 240, 61, 78, 213, 195, 189, 171, 69, 15, 62, 228, 50, 95, 61, 152, 138, 17, 62, 12, 234, 52, 62, 127, 243, 8, 190, 57, 144, 207, 61, 255, 14, 46, 189, 180, 222, 1, 189, 248, 111, 177, 189, 119, 43, 14, 62, 87, 190, 241, 187, 220, 219, 214, 61, 189, 218, 158, 61, 82, 75, 193, 61, 25, 65, 239, 189, 165, 188, 44, 190, 185, 227, 128, 186, 136, 247, 183, 61, 169, 1, 47, 62, 192, 196, 3, 62, 44, 113, 46, 61, 24, 93, 38, 190, 150, 92, 68, 189, 89, 176, 187, 60, 20, 60, 75, 61, 115, 233, 215, 189, 148, 33, 244, 61, 224, 228, 233, 189, 101, 129, 165, 188, 144, 36, 21, 190, 116, 91, 224, 61, 88, 96, 222, 189, 84, 208, 207, 61, 194, 225, 222, 189, 249, 185, 33, 190, 16, 161, 70, 61, 123, 39, 182, 61, 83, 160, 5, 61, 134, 251, 103, 189, 45, 215, 248, 189, 159, 140, 121, 59, 149, 121, 163, 59, 233, 141, 99, 61, 87, 161, 141, 188, 60, 65, 65, 61, 216, 60, 49, 189, 221, 40, 167, 59, 159, 18, 52, 190, 41, 213, 32, 62, 142, 147, 5, 62, 243, 149, 114, 189, 152, 183, 17, 190, 165, 143, 246, 61, 18, 191, 232, 60, 19, 55, 15, 190, 188, 91, 50, 62, 209, 161, 57, 188, 159, 222, 15, 62, 254, 167, 30, 189, 25, 19, 241, 189, 88, 228, 195, 61, 57, 102, 61, 188, 178, 23, 41, 62, 25, 173, 129, 189, 146, 91, 40, 59, 94, 71, 46, 61, 152, 112, 0, 190, 219, 162, 20, 62, 117, 103, 116, 61, 128, 115, 50, 190, 33, 63, 201, 189, 107, 81, 186, 189, 167, 67, 187, 61, 137, 100, 213, 189, 80, 66, 136, 189, 83, 45, 151, 61, 246, 222, 181, 60, 234, 101, 9, 62, 184, 70, 39, 62, 144, 88, 52, 190, 144, 70, 173, 189, 246, 27, 26, 187, 103, 92, 5, 190, 193, 214, 128, 188, 24, 164, 2, 62, 81, 130, 162, 189, 186, 167, 11, 189, 165, 19, 137, 61, 243, 205, 165, 189, 239, 210, 20, 62, 6, 127, 34, 189, 186, 226, 17, 61, 60, 126, 46, 61, 108, 44, 64, 61, 255, 25, 238, 61, 96, 20, 203, 189, 130, 202, 141, 61, 123, 217, 143, 61, 145, 181, 245, 187, 183, 107, 37, 190, 228, 201, 3, 190, 30, 72, 153, 188, 229, 79, 45, 190, 105, 170, 213, 61, 196, 95, 44, 190, 26, 208, 103, 189, 158, 205, 7, 190, 75, 99, 24, 190, 90, 108, 242, 189, 247, 251, 67, 188, 245, 229, 2, 62, 97, 188, 203, 189, 226, 0, 87, 188, 73, 189, 128, 61, 208, 235, 134, 189, 159, 111, 190, 61, 171, 52, 236, 61, 97, 87, 206, 189, 249, 233, 47, 62, 129, 42, 50, 62, 11, 97, 105, 60, 5, 160, 71, 61, 69, 197, 137, 189, 105, 95, 50, 61, 53, 154, 101, 61, 31, 169, 202, 189, 151, 227, 229, 188, 68, 227, 7, 188, 116, 171, 196, 189, 86, 235, 244, 187, 233, 228, 224, 189, 39, 132, 97, 189, 141, 10, 215, 189, 41, 214, 35, 190, 63, 8, 130, 61, 172, 11, 186, 61, 34, 68, 23, 62, 253, 15, 189, 61, 63, 223, 32, 62, 80, 18, 144, 61, 38, 23, 63, 61, 134, 28, 175, 189, 214, 67, 10, 62, 74, 91, 213, 189, 103, 105, 253, 189, 251, 70, 8, 189, 253, 142, 138, 189, 194, 153, 113, 189, 163, 236, 49, 60, 213, 30, 173, 61, 49, 116, 18, 62, 209, 118, 74, 189, 134, 90, 174, 61, 74, 72, 34, 60, 61, 0, 83, 189, 123, 176, 109, 61, 112, 73, 25, 190, 91, 130, 201, 188, 16, 241, 244, 189, 61, 92, 49, 190, 6, 157, 3, 62, 23, 149, 240, 188, 255, 188, 219, 188, 46, 245, 44, 189, 101, 31, 227, 189, 163, 219, 42, 61, 165, 2, 161, 188, 204, 8, 237, 189, 80, 86, 147, 60, 131, 70, 198, 187, 252, 48, 1, 62, 20, 32, 45, 62, 251, 173, 68, 60, 43, 15, 249, 189, 52, 92, 191, 188, 197, 232, 32, 190, 119, 58, 215, 60, 57, 239, 147, 188, 203, 117, 32, 190, 160, 94, 218, 188, 69, 112, 128, 189, 197, 58, 192, 189, 28, 223, 117, 60, 137, 255, 10, 62, 232, 98, 186, 189, 152, 210, 236, 189, 62, 109, 71, 188, 234, 18, 7, 62, 33, 198, 29, 190, 26, 141, 7, 190, 252, 24, 201, 61, 63, 65, 145, 189, 138, 249, 16, 62, 211, 87, 141, 61, 128, 135, 144, 189, 89, 189, 175, 61, 50, 192, 144, 61, 79, 35, 20, 189, 225, 46, 188, 189, 192, 74, 62, 188, 107, 253, 49, 189, 172, 117, 205, 61, 149, 129, 142, 60, 51, 76, 146, 188, 88, 153, 141, 60, 180, 32, 228, 189, 99, 126, 153, 189, 49, 153, 109, 61, 196, 99, 45, 190, 105, 1, 223, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 251, 186, 61, 91, 117, 41, 62, 25, 4, 6, 190, 11, 144, 113, 189, 65, 29, 24, 190, 168, 95, 156, 61, 255, 166, 218, 189, 37, 175, 46, 62, 197, 162, 63, 189, 129, 174, 195, 61, 237, 62, 90, 189, 239, 203, 145, 61, 39, 188, 203, 61, 10, 218, 230, 60, 196, 109, 255, 189, 123, 138, 198, 189, 190, 124, 159, 61, 123, 0, 186, 61, 141, 124, 82, 189, 63, 183, 19, 62, 84, 105, 214, 61, 42, 188, 2, 190, 60, 103, 8, 62, 248, 21, 233, 189, 233, 82, 242, 189, 109, 48, 32, 189, 18, 28, 115, 61, 87, 249, 131, 60, 171, 196, 155, 61, 208, 197, 179, 61, 141, 53, 14, 62, 69, 159, 34, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {138, 184, 205, 61, 15, 216, 33, 61, 145, 129, 238, 61, 126, 128, 32, 61, 15, 44, 178, 189, 99, 56, 245, 61, 63, 4, 124, 188, 202, 202, 154, 189, 121, 247, 18, 60, 155, 208, 22, 62, 167, 137, 225, 61, 201, 191, 6, 61, 6, 156, 56, 189, 120, 28, 38, 62, 98, 253, 22, 62, 92, 97, 28, 62, 18, 32, 234, 189, 165, 137, 25, 190, 134, 161, 207, 61, 60, 137, 34, 62, 240, 13, 34, 62, 234, 9, 0, 61, 235, 192, 51, 187, 100, 225, 11, 190, 43, 27, 217, 61, 198, 138, 10, 62, 232, 219, 27, 190, 240, 161, 44, 190, 115, 48, 103, 189, 254, 196, 70, 189, 39, 7, 46, 61, 172, 158, 192, 189, 161, 74, 18, 61, 73, 181, 116, 189, 42, 53, 74, 188, 227, 132, 220, 61, 246, 252, 15, 190, 177, 243, 13, 190, 104, 44, 67, 61, 164, 126, 82, 61, 135, 166, 103, 188, 241, 127, 49, 189, 85, 194, 30, 188, 45, 76, 5, 62, 141, 67, 19, 61, 220, 41, 39, 61, 151, 189, 194, 60, 144, 189, 174, 60, 32, 11, 34, 58, 173, 129, 11, 62, 244, 51, 248, 61, 188, 150, 137, 61, 151, 217, 247, 189, 82, 164, 171, 58, 99, 216, 181, 61, 152, 129, 228, 188, 224, 63, 122, 57, 131, 187, 249, 61, 255, 14, 223, 189, 18, 119, 35, 62, 186, 35, 25, 190, 42, 63, 167, 189, 177, 234, 190, 188, 65, 201, 58, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 113, 229, 189, 232, 249, 183, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {38, 251, 135, 189, 220, 201, 204, 63, 231, 109, 22, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {76, 21, 210, 189, 88, 239, 44, 58};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0064/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}