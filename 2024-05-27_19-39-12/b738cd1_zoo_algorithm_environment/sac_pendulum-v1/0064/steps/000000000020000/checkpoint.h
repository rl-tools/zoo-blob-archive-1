// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 100, 12, 62, 232, 89, 228, 190, 221, 39, 186, 62, 127, 143, 166, 59, 153, 174, 204, 191, 172, 123, 149, 190, 11, 196, 165, 61, 139, 207, 152, 63, 78, 198, 176, 62, 238, 205, 218, 60, 235, 37, 182, 191, 212, 226, 147, 190, 111, 112, 110, 62, 115, 174, 35, 63, 121, 84, 180, 190, 24, 248, 36, 62, 90, 142, 125, 190, 173, 71, 91, 188, 56, 10, 24, 191, 138, 220, 129, 61, 64, 98, 144, 190, 48, 151, 43, 189, 95, 31, 176, 191, 47, 18, 172, 61, 24, 196, 251, 190, 137, 150, 85, 190, 38, 16, 20, 191, 155, 175, 42, 191, 187, 151, 83, 63, 148, 50, 165, 62, 122, 159, 108, 63, 51, 111, 175, 63, 46, 232, 202, 62, 88, 112, 62, 62, 95, 48, 55, 191, 189, 130, 226, 61, 41, 143, 25, 190, 100, 112, 136, 62, 0, 171, 43, 191, 126, 74, 187, 189, 192, 170, 15, 191, 38, 252, 26, 63, 48, 119, 118, 191, 233, 186, 161, 63, 62, 22, 234, 62, 25, 13, 15, 63, 34, 205, 106, 63, 53, 174, 34, 62, 235, 233, 44, 191, 52, 106, 148, 62, 107, 13, 188, 62, 181, 59, 128, 62, 60, 128, 31, 63, 174, 11, 252, 62, 157, 223, 48, 63, 81, 39, 38, 188, 249, 245, 133, 190, 252, 236, 74, 62, 72, 254, 47, 191, 101, 194, 246, 190, 77, 68, 20, 191, 108, 160, 53, 191, 17, 58, 31, 63, 77, 162, 7, 63, 212, 71, 188, 62, 157, 95, 243, 190, 246, 191, 187, 62, 108, 129, 172, 188, 185, 164, 4, 63, 250, 27, 212, 61, 7, 152, 121, 188, 186, 142, 34, 63, 226, 77, 118, 63, 39, 227, 41, 191, 221, 64, 25, 191, 117, 164, 207, 190, 157, 113, 13, 63, 83, 63, 194, 60, 230, 97, 147, 190, 7, 221, 131, 191, 101, 58, 88, 190, 7, 163, 204, 190, 187, 48, 74, 63, 87, 99, 12, 63, 164, 129, 30, 63, 104, 249, 88, 63, 194, 54, 132, 62, 213, 59, 101, 63, 78, 5, 229, 190, 106, 145, 137, 190, 168, 130, 222, 62, 0, 27, 137, 185, 157, 141, 30, 63, 55, 183, 128, 191, 225, 43, 79, 63, 219, 144, 131, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 144, 51, 191, 54, 5, 22, 61, 94, 173, 142, 189, 56, 70, 28, 190, 71, 83, 117, 189, 75, 38, 216, 190, 180, 153, 14, 191, 142, 102, 156, 62, 181, 34, 12, 191, 4, 91, 24, 189, 132, 250, 31, 191, 62, 128, 92, 62, 182, 239, 238, 189, 24, 60, 215, 61, 163, 200, 190, 62, 12, 120, 243, 61, 116, 93, 18, 191, 106, 56, 68, 189, 93, 151, 146, 191, 239, 202, 64, 191, 145, 229, 14, 63, 42, 241, 232, 188, 153, 168, 32, 63, 35, 220, 128, 61, 40, 108, 118, 189, 178, 253, 51, 63, 68, 122, 43, 63, 245, 227, 46, 62, 154, 137, 207, 190, 47, 171, 175, 189, 130, 51, 10, 62, 29, 104, 68, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 119, 211, 190, 120, 36, 190, 61, 134, 166, 7, 190, 146, 69, 99, 191, 106, 242, 53, 61, 204, 202, 24, 190, 188, 0, 6, 191, 183, 87, 126, 190, 64, 155, 213, 189, 17, 140, 69, 190, 195, 16, 149, 190, 96, 187, 110, 188, 125, 249, 1, 188, 192, 16, 129, 190, 117, 120, 221, 62, 227, 179, 39, 62, 131, 227, 130, 189, 155, 228, 12, 190, 234, 95, 254, 62, 59, 170, 58, 62, 55, 146, 151, 62, 78, 173, 4, 62, 137, 234, 37, 61, 208, 182, 83, 190, 139, 210, 57, 62, 38, 78, 170, 62, 109, 3, 132, 60, 90, 174, 136, 62, 155, 21, 190, 190, 192, 87, 130, 61, 186, 31, 87, 190, 229, 103, 112, 62, 234, 54, 158, 190, 168, 61, 136, 189, 83, 151, 11, 191, 114, 193, 166, 190, 119, 199, 93, 62, 133, 146, 194, 189, 236, 235, 2, 189, 67, 32, 202, 189, 51, 238, 2, 188, 78, 89, 31, 191, 25, 246, 81, 190, 55, 135, 120, 62, 124, 205, 5, 62, 90, 172, 99, 62, 250, 166, 43, 191, 12, 214, 152, 189, 143, 95, 197, 190, 160, 132, 54, 61, 182, 120, 35, 63, 159, 98, 251, 61, 99, 41, 15, 62, 155, 2, 9, 62, 81, 245, 234, 60, 209, 28, 92, 62, 122, 33, 148, 61, 202, 207, 251, 190, 179, 195, 198, 189, 73, 216, 114, 61, 58, 220, 120, 190, 179, 127, 154, 62, 176, 93, 202, 189, 130, 158, 65, 191, 162, 119, 201, 190, 232, 229, 187, 62, 193, 157, 159, 189, 24, 114, 217, 191, 143, 98, 148, 190, 182, 118, 205, 61, 179, 11, 62, 191, 250, 2, 118, 190, 246, 123, 123, 191, 81, 241, 30, 190, 113, 165, 199, 190, 223, 87, 115, 62, 145, 72, 101, 189, 144, 4, 113, 60, 36, 36, 191, 62, 123, 172, 241, 61, 162, 94, 115, 61, 148, 162, 229, 187, 154, 248, 204, 62, 40, 14, 173, 61, 38, 182, 24, 62, 72, 41, 44, 62, 250, 180, 55, 62, 159, 176, 195, 189, 4, 44, 12, 62, 113, 163, 168, 62, 104, 74, 181, 59, 165, 65, 176, 61, 97, 83, 169, 190, 67, 36, 91, 62, 69, 49, 95, 61, 162, 27, 201, 62, 248, 162, 225, 189, 179, 112, 5, 190, 60, 25, 154, 190, 217, 235, 46, 191, 101, 29, 133, 191, 89, 194, 35, 190, 203, 241, 93, 191, 177, 57, 150, 190, 230, 66, 172, 191, 94, 244, 30, 62, 84, 164, 190, 190, 186, 148, 19, 62, 85, 36, 244, 190, 13, 1, 185, 189, 139, 127, 226, 61, 204, 117, 48, 190, 246, 96, 235, 188, 115, 14, 136, 188, 206, 237, 65, 189, 156, 197, 219, 59, 174, 63, 243, 62, 209, 233, 47, 191, 234, 239, 163, 189, 105, 58, 136, 190, 181, 218, 1, 191, 0, 70, 148, 62, 37, 57, 120, 62, 82, 237, 206, 61, 180, 62, 208, 190, 245, 191, 79, 190, 140, 0, 166, 189, 119, 8, 239, 62, 82, 140, 189, 61, 196, 246, 216, 190, 210, 64, 42, 190, 226, 102, 179, 60, 7, 142, 50, 62, 87, 225, 16, 62, 76, 195, 17, 62, 168, 106, 52, 189, 200, 149, 128, 189, 213, 125, 16, 62, 134, 72, 233, 189, 65, 59, 27, 190, 29, 196, 109, 187, 194, 240, 138, 62, 166, 74, 200, 189, 104, 101, 122, 62, 142, 116, 77, 61, 90, 140, 121, 61, 97, 235, 59, 190, 119, 40, 129, 190, 109, 96, 27, 189, 121, 156, 42, 190, 92, 29, 72, 62, 230, 88, 60, 62, 62, 53, 43, 190, 226, 139, 180, 62, 169, 249, 32, 62, 116, 160, 176, 190, 113, 75, 167, 61, 153, 201, 250, 189, 158, 224, 50, 61, 170, 183, 239, 188, 52, 191, 91, 190, 22, 71, 131, 61, 235, 221, 152, 190, 126, 61, 164, 190, 0, 5, 135, 61, 247, 111, 103, 61, 210, 14, 148, 190, 142, 31, 239, 61, 213, 208, 147, 189, 14, 119, 221, 190, 136, 71, 14, 191, 151, 96, 148, 62, 126, 88, 46, 62, 116, 39, 148, 61, 162, 98, 137, 186, 90, 205, 190, 61, 242, 152, 79, 190, 24, 215, 177, 188, 100, 64, 172, 62, 227, 213, 191, 188, 243, 21, 18, 61, 85, 97, 79, 62, 178, 182, 16, 60, 97, 84, 182, 59, 225, 236, 75, 62, 240, 70, 53, 62, 153, 249, 85, 62, 145, 59, 133, 189, 53, 119, 179, 190, 52, 198, 88, 62, 203, 196, 51, 62, 52, 66, 6, 190, 91, 78, 107, 190, 170, 179, 172, 60, 218, 163, 147, 190, 130, 48, 95, 190, 238, 200, 234, 189, 97, 205, 133, 60, 142, 18, 235, 189, 73, 11, 58, 62, 135, 144, 51, 189, 245, 145, 141, 190, 57, 178, 119, 191, 70, 198, 13, 62, 244, 65, 252, 60, 29, 35, 196, 62, 145, 155, 178, 189, 202, 140, 226, 190, 234, 2, 165, 190, 232, 252, 107, 190, 210, 92, 189, 62, 173, 120, 130, 62, 173, 73, 148, 60, 222, 147, 123, 62, 242, 232, 104, 62, 72, 127, 125, 189, 211, 163, 157, 62, 105, 182, 19, 191, 48, 235, 70, 190, 12, 219, 35, 190, 25, 212, 233, 190, 158, 178, 76, 62, 70, 59, 137, 59, 119, 16, 27, 191, 96, 54, 153, 189, 110, 202, 169, 190, 104, 227, 150, 188, 31, 114, 225, 59, 170, 232, 72, 62, 31, 218, 103, 61, 208, 137, 2, 62, 35, 76, 10, 191, 172, 70, 4, 61, 26, 104, 12, 62, 9, 137, 4, 189, 147, 145, 40, 190, 19, 9, 157, 189, 187, 160, 199, 61, 224, 255, 151, 190, 73, 63, 242, 62, 101, 13, 149, 190, 191, 209, 220, 61, 165, 127, 63, 191, 238, 229, 210, 190, 103, 95, 30, 190, 142, 179, 106, 190, 30, 114, 34, 189, 27, 231, 103, 188, 213, 228, 151, 190, 95, 37, 66, 62, 37, 120, 175, 189, 65, 131, 178, 190, 104, 115, 13, 62, 252, 79, 239, 61, 163, 160, 180, 62, 173, 83, 142, 62, 115, 68, 254, 188, 224, 249, 48, 190, 50, 156, 145, 61, 186, 31, 96, 189, 140, 154, 72, 189, 105, 129, 114, 189, 142, 162, 42, 190, 151, 220, 25, 190, 120, 29, 178, 61, 110, 19, 245, 61, 33, 184, 14, 190, 150, 81, 48, 190, 1, 160, 203, 189, 84, 34, 40, 190, 146, 244, 235, 189, 155, 230, 11, 61, 217, 121, 245, 189, 43, 206, 27, 61, 36, 184, 178, 61, 85, 52, 3, 62, 212, 78, 196, 188, 80, 35, 97, 189, 173, 218, 6, 61, 15, 43, 4, 61, 25, 16, 238, 188, 102, 219, 36, 190, 140, 39, 140, 189, 129, 168, 152, 189, 18, 72, 32, 190, 53, 14, 156, 61, 106, 174, 216, 61, 103, 30, 45, 190, 232, 49, 18, 189, 55, 90, 107, 190, 251, 52, 21, 191, 120, 174, 232, 191, 78, 193, 68, 190, 108, 195, 24, 60, 125, 15, 39, 191, 51, 104, 10, 190, 19, 4, 15, 191, 120, 120, 192, 190, 252, 185, 226, 190, 150, 32, 148, 62, 130, 148, 54, 60, 238, 18, 205, 61, 84, 243, 46, 190, 126, 181, 44, 190, 109, 147, 183, 190, 117, 158, 69, 61, 121, 217, 39, 188, 50, 214, 217, 188, 154, 38, 193, 187, 52, 107, 146, 61, 73, 1, 45, 62, 112, 37, 4, 62, 183, 209, 98, 62, 48, 190, 234, 189, 186, 231, 86, 62, 172, 147, 184, 189, 163, 250, 10, 191, 120, 146, 126, 62, 155, 155, 31, 189, 16, 186, 226, 188, 14, 186, 91, 189, 199, 53, 141, 188, 14, 134, 192, 61, 169, 204, 123, 190, 84, 200, 192, 62, 46, 21, 242, 189, 76, 21, 48, 188, 25, 11, 233, 190, 136, 186, 167, 190, 104, 26, 174, 191, 66, 188, 152, 62, 141, 201, 142, 62, 114, 188, 243, 61, 69, 108, 50, 190, 29, 97, 19, 191, 14, 67, 42, 63, 7, 11, 167, 190, 232, 184, 42, 62, 48, 135, 134, 190, 182, 167, 12, 191, 86, 155, 23, 190, 38, 207, 22, 61, 191, 16, 79, 190, 89, 18, 13, 62, 200, 109, 35, 191, 45, 118, 36, 62, 191, 121, 250, 190, 41, 225, 191, 190, 177, 106, 156, 62, 165, 147, 84, 191, 247, 213, 194, 60, 242, 46, 156, 62, 235, 148, 123, 61, 84, 65, 219, 189, 143, 175, 219, 189, 177, 107, 72, 189, 76, 52, 223, 61, 176, 175, 4, 189, 219, 110, 210, 60, 116, 121, 230, 188, 212, 67, 47, 190, 185, 108, 0, 190, 71, 18, 13, 61, 136, 128, 224, 189, 60, 208, 178, 189, 107, 146, 206, 61, 137, 80, 62, 189, 60, 219, 191, 189, 76, 20, 18, 190, 22, 242, 40, 190, 182, 167, 11, 190, 200, 100, 44, 61, 206, 19, 205, 188, 16, 85, 252, 189, 159, 42, 15, 189, 153, 8, 13, 190, 22, 50, 75, 189, 95, 0, 217, 61, 101, 245, 5, 190, 177, 195, 61, 187, 60, 255, 145, 61, 216, 125, 0, 61, 180, 14, 238, 189, 93, 98, 215, 189, 23, 21, 230, 62, 138, 191, 9, 191, 45, 42, 158, 60, 44, 0, 62, 62, 198, 6, 177, 62, 182, 76, 93, 189, 194, 176, 144, 189, 117, 25, 135, 190, 188, 31, 124, 189, 29, 99, 14, 190, 147, 89, 20, 63, 255, 198, 69, 189, 197, 1, 176, 60, 206, 9, 179, 189, 77, 39, 254, 190, 70, 107, 58, 62, 128, 14, 87, 62, 251, 212, 11, 62, 173, 202, 79, 61, 77, 5, 230, 189, 58, 68, 23, 190, 251, 249, 181, 61, 99, 205, 91, 189, 111, 94, 57, 61, 192, 208, 228, 190, 24, 2, 167, 190, 130, 198, 53, 191, 171, 130, 147, 190, 245, 182, 228, 62, 153, 135, 21, 190, 144, 152, 24, 61, 35, 55, 61, 191, 55, 130, 159, 190, 12, 24, 84, 62, 46, 136, 188, 190, 249, 190, 184, 189, 41, 206, 241, 61, 140, 111, 242, 61, 182, 30, 78, 190, 116, 116, 137, 191, 179, 41, 81, 190, 41, 148, 69, 191, 217, 50, 65, 190, 197, 139, 96, 62, 103, 248, 38, 62, 218, 248, 18, 191, 225, 115, 84, 190, 88, 144, 180, 190, 54, 32, 50, 191, 141, 153, 148, 190, 51, 251, 134, 62, 205, 3, 147, 62, 136, 3, 212, 62, 154, 94, 199, 61, 96, 24, 154, 62, 243, 27, 10, 191, 72, 77, 161, 62, 3, 4, 212, 190, 200, 40, 186, 61, 97, 50, 253, 62, 177, 153, 122, 190, 226, 248, 249, 62, 47, 132, 167, 189, 184, 98, 9, 191, 195, 219, 251, 60, 54, 63, 49, 190, 10, 133, 22, 190, 96, 225, 129, 61, 41, 160, 206, 189, 215, 155, 203, 189, 133, 141, 238, 188, 30, 248, 3, 190, 131, 160, 29, 190, 52, 37, 19, 62, 190, 66, 139, 61, 198, 133, 40, 62, 3, 243, 249, 61, 191, 122, 48, 190, 86, 233, 140, 61, 87, 139, 79, 189, 106, 34, 113, 189, 133, 113, 167, 189, 74, 4, 206, 61, 144, 178, 232, 187, 107, 155, 12, 62, 26, 2, 255, 189, 148, 190, 57, 190, 221, 17, 181, 189, 63, 215, 7, 61, 31, 247, 63, 190, 39, 142, 14, 190, 149, 79, 153, 189, 140, 155, 201, 59, 66, 194, 44, 62, 44, 150, 187, 59, 100, 76, 236, 61, 37, 171, 36, 190, 111, 142, 32, 190, 78, 50, 37, 62, 150, 115, 135, 188, 187, 251, 139, 187, 236, 24, 224, 188, 239, 55, 22, 190, 79, 134, 7, 62, 88, 120, 49, 62, 166, 126, 193, 189, 212, 133, 234, 189, 149, 203, 252, 61, 36, 12, 156, 189, 9, 148, 33, 189, 254, 224, 177, 189, 26, 135, 82, 61, 44, 4, 249, 61, 16, 227, 199, 60, 11, 163, 217, 188, 156, 166, 215, 60, 43, 229, 16, 62, 128, 127, 52, 190, 26, 103, 217, 189, 235, 190, 193, 189, 68, 154, 90, 189, 89, 27, 170, 188, 21, 23, 36, 189, 118, 32, 16, 190, 191, 251, 117, 61, 113, 34, 111, 189, 61, 131, 252, 189, 29, 237, 162, 189, 38, 204, 40, 61, 247, 207, 18, 62, 229, 251, 177, 59, 220, 123, 132, 62, 135, 141, 143, 61, 209, 182, 22, 62, 133, 43, 242, 189, 80, 110, 204, 62, 249, 196, 215, 189, 179, 246, 170, 61, 89, 2, 117, 61, 5, 122, 199, 189, 51, 127, 53, 190, 220, 39, 158, 62, 189, 162, 244, 189, 65, 199, 161, 62, 105, 139, 71, 190, 196, 175, 119, 62, 74, 223, 197, 190, 142, 113, 29, 189, 62, 145, 173, 60, 195, 59, 56, 190, 75, 1, 183, 189, 48, 128, 70, 61, 77, 193, 7, 190, 67, 231, 116, 61, 130, 63, 207, 62, 54, 20, 30, 61, 165, 32, 82, 189, 19, 90, 130, 62, 56, 125, 38, 60, 250, 25, 132, 190, 163, 180, 152, 62, 146, 153, 187, 190, 125, 49, 245, 188, 174, 242, 233, 61, 107, 187, 65, 62, 138, 90, 120, 60, 59, 147, 129, 60, 191, 134, 171, 190, 161, 61, 119, 188, 28, 16, 94, 188, 210, 53, 218, 62, 9, 152, 39, 189, 33, 180, 74, 189, 246, 50, 181, 189, 210, 157, 174, 190, 149, 140, 154, 62, 211, 105, 15, 62, 244, 206, 19, 62, 34, 249, 239, 190, 154, 151, 104, 190, 170, 216, 248, 189, 2, 248, 166, 62, 111, 139, 42, 62, 128, 146, 245, 188, 15, 69, 108, 62, 54, 56, 127, 61, 76, 131, 95, 189, 114, 190, 222, 61, 225, 212, 205, 62, 149, 99, 185, 62, 101, 22, 45, 62, 249, 244, 221, 190, 15, 205, 128, 188, 37, 92, 103, 190, 195, 252, 221, 61, 81, 43, 26, 61, 189, 28, 54, 62, 112, 113, 227, 189, 108, 178, 215, 61, 76, 41, 229, 190, 92, 115, 104, 62, 72, 171, 149, 191, 23, 9, 148, 62, 174, 44, 120, 190, 96, 69, 191, 61, 97, 107, 31, 190, 217, 73, 90, 190, 230, 95, 182, 62, 231, 188, 193, 189, 37, 65, 30, 62, 123, 197, 7, 191, 35, 4, 151, 190, 158, 192, 48, 191, 53, 201, 251, 59, 86, 173, 126, 61, 181, 231, 97, 190, 174, 251, 134, 190, 59, 96, 243, 61, 150, 240, 30, 190, 73, 254, 188, 190, 1, 112, 180, 62, 178, 136, 24, 190, 220, 20, 242, 60, 71, 117, 56, 62, 149, 244, 21, 189, 66, 28, 116, 62, 173, 111, 37, 191, 52, 163, 192, 191, 28, 230, 96, 190, 206, 236, 51, 190, 8, 112, 83, 190, 95, 20, 187, 189, 148, 56, 219, 190, 74, 112, 43, 190, 81, 225, 27, 191, 234, 73, 40, 61, 175, 93, 88, 190, 99, 30, 157, 189, 57, 34, 203, 60, 154, 251, 178, 190, 113, 43, 195, 189, 22, 93, 62, 190, 242, 229, 143, 62, 172, 196, 82, 62, 180, 247, 123, 61, 222, 54, 150, 62, 41, 51, 111, 62, 159, 108, 152, 189, 118, 2, 131, 62, 25, 198, 230, 189, 24, 193, 13, 62, 168, 26, 147, 62, 148, 71, 243, 190, 26, 69, 217, 62, 153, 239, 5, 189, 189, 47, 27, 190, 238, 114, 27, 190, 114, 40, 211, 191, 240, 145, 125, 190, 26, 199, 147, 61, 159, 117, 188, 189, 215, 79, 193, 61, 32, 224, 198, 190, 126, 183, 151, 191, 153, 118, 50, 191, 13, 170, 129, 190, 76, 95, 62, 191, 36, 37, 130, 190, 76, 174, 13, 190, 89, 27, 35, 191, 58, 101, 9, 191, 5, 248, 168, 62, 150, 155, 160, 190, 216, 111, 52, 61, 28, 240, 9, 63, 34, 204, 159, 190, 225, 62, 38, 191, 170, 133, 134, 62, 60, 23, 45, 62, 57, 7, 86, 189, 128, 80, 172, 62, 223, 202, 121, 62, 127, 120, 199, 190, 129, 207, 135, 190, 62, 75, 39, 190, 4, 64, 75, 62, 68, 100, 74, 62, 9, 171, 236, 190, 58, 239, 175, 190, 80, 41, 50, 62, 248, 59, 149, 190, 120, 224, 122, 191, 247, 209, 146, 190, 76, 137, 0, 62, 247, 170, 50, 191, 113, 208, 69, 190, 68, 189, 160, 191, 130, 91, 123, 191, 112, 148, 36, 61, 147, 89, 179, 62, 126, 204, 64, 190, 249, 142, 114, 190, 160, 3, 61, 61, 119, 124, 242, 61, 76, 130, 83, 191, 58, 26, 170, 190, 160, 3, 163, 188, 218, 35, 4, 190, 84, 113, 13, 63, 194, 6, 77, 62, 143, 119, 79, 188, 113, 227, 229, 190, 163, 101, 40, 61, 245, 11, 149, 62, 29, 153, 134, 62, 184, 10, 49, 62, 215, 14, 134, 190, 15, 244, 11, 190, 231, 41, 153, 190, 72, 10, 225, 62, 176, 119, 73, 190, 91, 147, 23, 191, 97, 96, 166, 190, 91, 237, 51, 191, 187, 225, 199, 61, 58, 235, 253, 189, 73, 252, 83, 62, 140, 220, 170, 190, 3, 69, 14, 189, 109, 77, 225, 62, 69, 109, 215, 190, 91, 60, 30, 191, 149, 172, 160, 61, 151, 157, 76, 189, 223, 234, 99, 189, 122, 95, 89, 61, 24, 24, 221, 62, 171, 151, 31, 190, 120, 110, 2, 191, 228, 239, 29, 191, 95, 233, 70, 190, 53, 7, 135, 188, 227, 120, 137, 190, 244, 43, 1, 190, 93, 158, 107, 61, 194, 210, 194, 62, 8, 28, 169, 190, 204, 119, 10, 62, 77, 25, 153, 190, 144, 191, 151, 61, 173, 52, 11, 189, 114, 183, 197, 62, 19, 253, 214, 189, 141, 17, 167, 189, 88, 72, 202, 60, 119, 172, 123, 189, 78, 80, 52, 61, 158, 164, 227, 189, 244, 140, 96, 60, 127, 252, 44, 190, 188, 118, 23, 62, 22, 78, 30, 62, 132, 9, 38, 60, 91, 252, 181, 189, 76, 31, 132, 189, 90, 126, 166, 61, 226, 223, 22, 190, 65, 135, 236, 188, 249, 155, 34, 62, 134, 129, 95, 189, 121, 103, 67, 60, 137, 24, 129, 188, 19, 85, 61, 189, 221, 21, 0, 190, 94, 15, 70, 189, 241, 33, 0, 62, 9, 211, 236, 61, 72, 232, 215, 60, 196, 220, 31, 189, 185, 231, 239, 189, 201, 61, 22, 62, 221, 138, 226, 189, 74, 26, 22, 190, 65, 212, 180, 189, 209, 168, 197, 61, 12, 101, 77, 188, 42, 83, 5, 190, 18, 187, 5, 190, 247, 166, 195, 189, 73, 166, 180, 61, 120, 151, 87, 61, 225, 246, 106, 188, 28, 39, 170, 61, 64, 227, 48, 190, 210, 254, 245, 61, 190, 137, 149, 188, 134, 109, 114, 61, 169, 154, 168, 61, 156, 65, 34, 190, 251, 149, 227, 189, 132, 197, 171, 189, 191, 173, 177, 189, 108, 107, 217, 61, 148, 194, 246, 189, 96, 18, 182, 61, 114, 66, 35, 190, 23, 157, 154, 188, 246, 252, 51, 60, 95, 231, 46, 190, 228, 110, 151, 61, 176, 6, 236, 189, 221, 222, 132, 61, 8, 242, 135, 189, 123, 138, 48, 62, 101, 211, 19, 190, 78, 207, 161, 61, 48, 49, 155, 190, 247, 150, 100, 188, 206, 102, 229, 62, 7, 179, 146, 62, 5, 148, 6, 62, 231, 28, 238, 189, 135, 228, 149, 62, 178, 145, 0, 63, 142, 6, 5, 190, 96, 54, 38, 191, 96, 195, 27, 63, 101, 253, 25, 61, 30, 190, 228, 61, 49, 136, 216, 190, 246, 183, 95, 61, 25, 16, 190, 62, 148, 115, 139, 62, 249, 136, 99, 62, 28, 188, 81, 191, 80, 81, 205, 59, 128, 230, 218, 190, 239, 182, 28, 189, 100, 3, 149, 190, 1, 178, 164, 189, 34, 108, 226, 190, 99, 48, 153, 62, 26, 91, 179, 60, 225, 64, 252, 189, 36, 61, 80, 62, 144, 223, 69, 191, 197, 225, 33, 190, 238, 143, 195, 62, 46, 171, 163, 61, 15, 98, 154, 62, 161, 213, 34, 61, 181, 172, 142, 61, 106, 134, 184, 189, 63, 10, 187, 60, 255, 39, 101, 62, 169, 112, 236, 61, 15, 84, 95, 62, 33, 65, 102, 189, 91, 59, 249, 188, 178, 145, 149, 190, 66, 132, 231, 61, 48, 28, 227, 60, 225, 1, 73, 61, 248, 2, 66, 61, 202, 141, 158, 190, 23, 144, 80, 62, 62, 164, 60, 189, 95, 123, 0, 61, 161, 92, 7, 190, 67, 149, 160, 190, 72, 88, 8, 61, 254, 179, 197, 61, 248, 34, 177, 61, 235, 52, 133, 61, 48, 67, 151, 62, 36, 7, 79, 190, 195, 1, 6, 62, 82, 237, 144, 190, 18, 58, 168, 62, 11, 170, 8, 62, 98, 102, 222, 189, 200, 121, 128, 61, 34, 160, 180, 190, 164, 184, 160, 62, 53, 156, 138, 60, 188, 91, 50, 62, 171, 177, 43, 62, 91, 19, 190, 62, 12, 134, 17, 62, 59, 58, 75, 190, 148, 167, 35, 63, 237, 164, 46, 191, 18, 112, 162, 62, 89, 233, 231, 62, 39, 191, 249, 191, 192, 172, 106, 62, 88, 153, 49, 61, 243, 236, 86, 188, 193, 211, 20, 191, 27, 136, 169, 190, 253, 60, 202, 62, 249, 216, 54, 190, 70, 48, 242, 190, 222, 81, 248, 61, 72, 101, 10, 190, 195, 144, 127, 62, 41, 247, 127, 62, 17, 27, 77, 191, 53, 250, 179, 62, 73, 33, 222, 190, 249, 176, 153, 189, 216, 107, 10, 62, 176, 30, 160, 190, 85, 49, 163, 61, 101, 129, 245, 190, 143, 108, 101, 61, 9, 230, 33, 61, 165, 19, 137, 61, 226, 44, 214, 61, 218, 112, 3, 63, 151, 82, 136, 60, 129, 127, 8, 63, 215, 143, 10, 191, 180, 233, 43, 191, 79, 119, 71, 62, 180, 215, 124, 61, 83, 127, 118, 190, 247, 154, 103, 62, 119, 58, 114, 62, 137, 121, 174, 190, 78, 126, 63, 191, 198, 202, 82, 190, 139, 41, 74, 189, 228, 220, 23, 189, 108, 50, 221, 190, 107, 7, 72, 61, 132, 83, 125, 190, 148, 115, 42, 62, 101, 160, 155, 61, 232, 62, 0, 191, 38, 48, 38, 191, 169, 53, 154, 190, 57, 186, 129, 189, 21, 201, 244, 62, 235, 140, 121, 190, 120, 139, 184, 61, 198, 188, 110, 190, 251, 179, 164, 190, 255, 15, 127, 62, 58, 26, 50, 62, 217, 245, 242, 60, 81, 80, 242, 188, 64, 140, 176, 189, 64, 142, 105, 190, 68, 75, 108, 191, 232, 82, 40, 61, 224, 231, 0, 188, 26, 9, 124, 61, 60, 38, 9, 190, 91, 217, 28, 62, 90, 241, 205, 190, 176, 122, 143, 60, 26, 233, 181, 62, 2, 234, 13, 190, 98, 160, 38, 61, 107, 173, 226, 61, 127, 211, 124, 62, 173, 112, 216, 61, 252, 235, 145, 62, 31, 124, 60, 62, 20, 121, 0, 62, 40, 229, 51, 190, 207, 123, 15, 190, 101, 58, 104, 188, 38, 162, 190, 187, 196, 135, 115, 189, 128, 30, 202, 190, 233, 250, 250, 188, 248, 102, 225, 191, 115, 162, 76, 191, 180, 59, 100, 190, 209, 118, 74, 189, 70, 233, 88, 191, 172, 103, 202, 189, 216, 244, 43, 191, 22, 207, 176, 190, 186, 42, 46, 191, 32, 7, 72, 62, 38, 116, 7, 190, 108, 192, 188, 189, 147, 233, 94, 62, 63, 251, 176, 61, 248, 8, 232, 190, 38, 155, 134, 189, 167, 222, 10, 191, 205, 151, 57, 62, 243, 243, 91, 189, 54, 161, 24, 60, 149, 54, 183, 61, 36, 239, 169, 58, 110, 207, 232, 62, 161, 169, 80, 62, 47, 36, 227, 61, 219, 248, 61, 60, 38, 79, 207, 190, 162, 169, 67, 62, 147, 3, 197, 61, 209, 62, 140, 190, 203, 117, 32, 190, 162, 19, 160, 190, 206, 105, 63, 62, 139, 240, 166, 190, 186, 29, 7, 62, 129, 3, 11, 62, 246, 208, 208, 190, 79, 255, 38, 63, 67, 55, 51, 190, 94, 63, 214, 61, 147, 166, 233, 62, 54, 185, 217, 60, 168, 255, 30, 62, 12, 184, 67, 191, 178, 32, 229, 191, 189, 171, 243, 62, 121, 71, 135, 189, 91, 84, 159, 188, 229, 221, 13, 191, 152, 229, 142, 190, 217, 130, 167, 191, 118, 146, 28, 62, 201, 218, 1, 190, 83, 102, 199, 60, 211, 10, 160, 61, 244, 50, 40, 62, 224, 117, 212, 189, 49, 87, 34, 191, 24, 34, 217, 62, 63, 79, 133, 62, 136, 208, 162, 190, 104, 192, 38, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 81, 74, 62, 180, 234, 205, 61, 19, 36, 179, 61, 47, 127, 132, 62, 109, 196, 160, 61, 7, 48, 128, 62, 145, 220, 218, 190, 184, 199, 211, 62, 197, 162, 63, 189, 44, 218, 117, 62, 153, 112, 10, 62, 46, 101, 126, 60, 246, 213, 64, 190, 243, 153, 240, 188, 114, 84, 27, 190, 123, 138, 198, 189, 177, 8, 152, 62, 104, 225, 198, 188, 30, 79, 57, 189, 50, 217, 106, 62, 64, 146, 18, 62, 201, 22, 43, 62, 156, 152, 98, 62, 248, 21, 233, 189, 241, 36, 22, 190, 229, 21, 239, 188, 218, 66, 153, 62, 175, 9, 111, 62, 46, 104, 188, 62, 75, 88, 166, 62, 205, 247, 150, 62, 230, 65, 224, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 23, 199, 62, 10, 228, 90, 62, 225, 227, 186, 62, 172, 232, 92, 63, 51, 56, 89, 189, 140, 19, 166, 61, 221, 162, 145, 62, 95, 178, 246, 190, 121, 247, 18, 60, 203, 181, 24, 63, 10, 174, 214, 63, 125, 218, 235, 188, 160, 92, 215, 190, 197, 135, 90, 63, 213, 20, 17, 62, 92, 97, 28, 62, 150, 206, 178, 189, 6, 22, 228, 190, 85, 214, 163, 62, 51, 94, 63, 63, 206, 164, 29, 190, 88, 5, 89, 63, 238, 152, 40, 191, 100, 225, 11, 190, 233, 16, 209, 61, 182, 53, 159, 63, 249, 80, 15, 189, 226, 123, 151, 191, 190, 119, 87, 191, 65, 149, 82, 61, 238, 6, 28, 63, 170, 42, 39, 191, 199, 183, 49, 190, 146, 69, 148, 190, 47, 15, 180, 60, 79, 145, 237, 62, 201, 149, 91, 190, 127, 169, 193, 190, 127, 171, 155, 62, 218, 221, 165, 189, 135, 166, 103, 188, 6, 65, 0, 62, 146, 182, 251, 189, 138, 154, 215, 61, 98, 214, 60, 63, 63, 177, 49, 62, 111, 235, 163, 60, 144, 189, 174, 60, 21, 196, 145, 190, 153, 183, 21, 190, 23, 207, 63, 63, 75, 103, 15, 63, 82, 175, 158, 191, 102, 233, 58, 190, 179, 95, 169, 189, 152, 129, 228, 188, 179, 249, 16, 188, 142, 89, 76, 62, 52, 208, 149, 190, 150, 108, 23, 63, 60, 138, 230, 188, 243, 61, 140, 190, 235, 254, 16, 189, 68, 222, 119, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 113, 81, 190, 99, 30, 3, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {234, 237, 25, 62, 63, 239, 88, 190, 10, 109, 24, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {88, 24, 60, 191, 254, 180, 174, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0064/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}