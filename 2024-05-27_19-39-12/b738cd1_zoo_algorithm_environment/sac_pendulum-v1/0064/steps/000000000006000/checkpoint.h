// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 67, 32, 189, 70, 3, 233, 190, 153, 182, 147, 62, 246, 146, 57, 190, 164, 142, 147, 191, 55, 226, 196, 190, 134, 125, 49, 62, 71, 79, 35, 63, 188, 15, 221, 62, 65, 185, 247, 190, 206, 28, 222, 190, 238, 76, 112, 190, 207, 151, 93, 62, 106, 179, 3, 63, 126, 53, 16, 191, 24, 248, 36, 62, 90, 142, 125, 190, 173, 71, 91, 188, 254, 116, 220, 190, 96, 206, 135, 62, 212, 1, 172, 190, 138, 0, 167, 190, 150, 170, 139, 191, 203, 103, 3, 62, 72, 185, 242, 190, 105, 154, 77, 61, 190, 37, 28, 191, 56, 125, 241, 190, 109, 178, 1, 62, 19, 65, 168, 62, 224, 253, 93, 63, 204, 202, 128, 63, 27, 76, 181, 62, 218, 34, 178, 189, 196, 251, 21, 191, 77, 177, 3, 63, 94, 111, 2, 189, 19, 206, 37, 62, 160, 177, 74, 191, 188, 205, 209, 60, 104, 72, 16, 191, 158, 174, 3, 63, 226, 8, 194, 190, 166, 38, 163, 62, 28, 78, 50, 63, 37, 70, 50, 63, 242, 9, 53, 63, 179, 234, 215, 61, 109, 97, 11, 191, 112, 34, 176, 60, 167, 120, 194, 62, 114, 23, 237, 62, 77, 162, 90, 62, 22, 56, 231, 62, 108, 188, 117, 189, 31, 110, 142, 189, 84, 41, 153, 190, 211, 255, 171, 60, 108, 31, 14, 191, 220, 219, 4, 191, 62, 252, 5, 191, 201, 120, 38, 191, 185, 227, 31, 63, 49, 27, 0, 63, 31, 139, 7, 63, 103, 74, 9, 191, 127, 42, 150, 62, 227, 82, 59, 190, 179, 50, 36, 63, 84, 162, 114, 62, 68, 129, 6, 190, 93, 9, 30, 63, 217, 4, 75, 63, 173, 151, 118, 190, 56, 92, 30, 191, 244, 28, 233, 189, 164, 160, 253, 62, 183, 86, 183, 60, 235, 143, 139, 190, 74, 9, 32, 191, 247, 178, 98, 190, 59, 13, 147, 190, 86, 243, 103, 62, 224, 130, 33, 63, 233, 32, 238, 62, 47, 8, 15, 63, 108, 125, 159, 62, 2, 74, 48, 63, 23, 207, 219, 60, 129, 107, 157, 190, 211, 235, 20, 63, 209, 23, 132, 189, 220, 108, 18, 63, 185, 137, 22, 191, 103, 4, 76, 63, 59, 95, 178, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 95, 28, 191, 97, 135, 121, 62, 101, 94, 169, 190, 164, 48, 237, 190, 13, 195, 21, 190, 75, 38, 216, 190, 164, 228, 41, 191, 220, 108, 183, 60, 64, 130, 37, 191, 239, 125, 212, 190, 153, 88, 68, 191, 195, 33, 10, 61, 193, 72, 96, 61, 44, 60, 190, 62, 250, 168, 29, 62, 137, 119, 73, 62, 229, 177, 223, 190, 67, 179, 20, 62, 188, 15, 100, 191, 238, 136, 9, 191, 87, 54, 159, 62, 70, 106, 145, 61, 97, 172, 37, 63, 142, 93, 109, 62, 59, 139, 167, 61, 180, 93, 33, 63, 15, 97, 49, 63, 198, 132, 58, 62, 40, 12, 238, 190, 35, 88, 133, 61, 197, 174, 221, 62, 238, 196, 222, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 182, 61, 189, 239, 132, 112, 190, 40, 106, 108, 190, 97, 232, 170, 190, 16, 21, 90, 189, 204, 202, 24, 190, 154, 143, 29, 191, 180, 116, 176, 190, 135, 206, 136, 190, 167, 235, 100, 190, 5, 198, 98, 190, 94, 155, 136, 61, 113, 17, 127, 189, 165, 119, 135, 190, 174, 81, 115, 62, 122, 174, 211, 61, 125, 125, 71, 189, 64, 128, 194, 189, 8, 154, 162, 60, 145, 235, 228, 60, 117, 214, 114, 62, 128, 67, 209, 61, 6, 133, 191, 61, 133, 183, 7, 190, 122, 0, 94, 62, 37, 218, 76, 62, 46, 183, 159, 60, 12, 137, 87, 62, 190, 107, 129, 190, 190, 135, 234, 61, 166, 44, 21, 190, 124, 47, 122, 61, 208, 232, 65, 190, 233, 90, 138, 61, 151, 194, 217, 59, 134, 207, 233, 57, 76, 7, 60, 62, 133, 146, 194, 189, 149, 209, 253, 189, 114, 226, 175, 189, 192, 26, 194, 188, 196, 109, 186, 189, 248, 237, 46, 61, 158, 132, 4, 62, 150, 227, 15, 62, 62, 148, 73, 189, 144, 57, 30, 189, 112, 177, 2, 189, 166, 167, 57, 61, 23, 8, 227, 188, 82, 105, 50, 62, 55, 148, 254, 61, 111, 206, 57, 60, 152, 4, 40, 62, 130, 49, 116, 189, 248, 34, 214, 61, 228, 134, 107, 61, 107, 172, 166, 190, 116, 247, 243, 60, 238, 166, 34, 62, 127, 31, 183, 189, 172, 3, 151, 62, 207, 202, 103, 190, 79, 115, 160, 190, 46, 179, 135, 190, 46, 95, 123, 62, 166, 177, 73, 190, 67, 170, 225, 189, 186, 111, 191, 190, 182, 118, 205, 61, 97, 172, 18, 191, 41, 44, 158, 190, 116, 207, 84, 191, 193, 38, 3, 190, 89, 187, 141, 190, 96, 13, 120, 62, 95, 36, 99, 189, 208, 6, 186, 189, 148, 152, 122, 62, 227, 180, 205, 59, 66, 82, 221, 61, 248, 27, 178, 188, 99, 24, 249, 61, 241, 19, 169, 62, 246, 146, 148, 61, 48, 83, 43, 62, 10, 18, 39, 62, 227, 235, 23, 190, 215, 154, 43, 62, 218, 83, 36, 62, 140, 104, 2, 61, 86, 220, 166, 60, 224, 41, 81, 190, 169, 125, 134, 62, 219, 134, 162, 60, 111, 43, 37, 62, 163, 254, 149, 61, 172, 226, 159, 190, 173, 4, 155, 190, 76, 248, 210, 190, 32, 45, 63, 191, 89, 194, 35, 190, 103, 199, 88, 191, 54, 246, 147, 190, 157, 209, 134, 191, 60, 222, 185, 61, 156, 159, 133, 190, 9, 71, 76, 62, 29, 190, 221, 190, 154, 250, 156, 189, 29, 26, 63, 61, 239, 148, 26, 190, 55, 164, 113, 188, 60, 120, 15, 188, 206, 237, 65, 189, 156, 197, 219, 59, 89, 192, 243, 62, 14, 100, 149, 190, 159, 126, 129, 189, 71, 39, 128, 190, 191, 136, 219, 190, 65, 194, 228, 61, 191, 24, 117, 61, 233, 121, 215, 61, 201, 233, 137, 190, 31, 136, 43, 191, 112, 228, 126, 189, 187, 156, 108, 62, 83, 58, 250, 61, 255, 100, 34, 188, 111, 80, 72, 189, 137, 240, 198, 61, 119, 29, 34, 62, 87, 225, 16, 62, 144, 123, 154, 62, 46, 105, 185, 188, 129, 74, 32, 59, 110, 209, 78, 62, 45, 155, 24, 190, 54, 105, 229, 189, 121, 23, 39, 187, 65, 17, 163, 62, 92, 113, 150, 188, 177, 45, 87, 62, 115, 248, 104, 62, 34, 197, 164, 61, 194, 44, 79, 190, 41, 163, 146, 188, 179, 41, 37, 187, 142, 208, 50, 190, 35, 119, 92, 62, 132, 90, 103, 62, 145, 230, 158, 189, 168, 163, 128, 62, 185, 130, 87, 62, 215, 107, 134, 190, 127, 84, 135, 188, 14, 169, 128, 189, 195, 149, 172, 61, 210, 60, 179, 189, 156, 31, 88, 190, 163, 17, 73, 62, 228, 82, 200, 189, 39, 163, 205, 189, 17, 104, 90, 188, 247, 111, 103, 61, 61, 143, 136, 190, 67, 215, 118, 61, 17, 90, 101, 189, 213, 182, 251, 189, 30, 251, 39, 190, 242, 233, 163, 62, 5, 75, 35, 62, 30, 14, 23, 188, 126, 89, 131, 61, 13, 227, 211, 60, 91, 238, 174, 60, 48, 104, 226, 189, 70, 30, 239, 189, 83, 34, 252, 60, 188, 191, 143, 60, 223, 44, 45, 62, 60, 212, 76, 188, 24, 245, 48, 188, 201, 0, 47, 62, 227, 69, 248, 61, 114, 30, 122, 62, 120, 249, 182, 188, 34, 200, 132, 190, 15, 89, 43, 62, 143, 212, 226, 61, 120, 103, 228, 189, 216, 134, 14, 190, 127, 241, 6, 62, 130, 148, 50, 190, 1, 98, 144, 61, 188, 47, 252, 189, 97, 205, 133, 60, 112, 140, 158, 190, 229, 26, 146, 62, 25, 222, 200, 189, 232, 92, 9, 190, 131, 144, 43, 190, 84, 8, 179, 188, 81, 186, 236, 60, 151, 156, 55, 62, 136, 227, 209, 61, 198, 240, 151, 190, 153, 210, 174, 189, 104, 85, 75, 190, 238, 52, 189, 61, 35, 254, 132, 62, 66, 0, 195, 189, 94, 51, 137, 62, 0, 114, 244, 61, 76, 136, 29, 190, 134, 127, 168, 62, 36, 118, 236, 190, 138, 141, 68, 189, 248, 59, 57, 190, 87, 0, 205, 61, 241, 44, 150, 62, 135, 177, 179, 189, 71, 244, 231, 190, 0, 177, 204, 61, 51, 133, 25, 62, 1, 188, 58, 62, 211, 45, 92, 61, 75, 222, 121, 62, 31, 218, 103, 61, 208, 230, 51, 62, 220, 237, 145, 190, 150, 49, 145, 61, 148, 128, 37, 62, 66, 197, 72, 189, 233, 200, 145, 190, 129, 114, 0, 189, 137, 41, 222, 61, 198, 216, 158, 189, 71, 114, 231, 62, 44, 5, 33, 190, 118, 107, 178, 61, 128, 43, 198, 190, 255, 147, 50, 190, 111, 160, 211, 189, 179, 245, 87, 190, 42, 118, 253, 189, 136, 53, 103, 189, 6, 61, 79, 190, 166, 165, 201, 61, 225, 124, 106, 189, 14, 197, 129, 190, 88, 35, 193, 61, 45, 115, 32, 62, 126, 110, 151, 62, 199, 140, 20, 62, 115, 68, 254, 188, 224, 249, 48, 190, 50, 156, 145, 61, 186, 31, 96, 189, 140, 154, 72, 189, 105, 129, 114, 189, 142, 162, 42, 190, 151, 220, 25, 190, 120, 29, 178, 61, 110, 19, 245, 61, 33, 184, 14, 190, 150, 81, 48, 190, 1, 160, 203, 189, 84, 34, 40, 190, 146, 244, 235, 189, 155, 230, 11, 61, 217, 121, 245, 189, 43, 206, 27, 61, 36, 184, 178, 61, 85, 52, 3, 62, 212, 78, 196, 188, 80, 35, 97, 189, 173, 218, 6, 61, 15, 43, 4, 61, 25, 16, 238, 188, 102, 219, 36, 190, 140, 39, 140, 189, 129, 168, 152, 189, 18, 72, 32, 190, 53, 14, 156, 61, 106, 174, 216, 61, 103, 30, 45, 190, 78, 157, 50, 189, 192, 114, 173, 189, 54, 183, 111, 190, 101, 18, 135, 190, 0, 234, 75, 190, 108, 195, 24, 60, 101, 30, 23, 191, 221, 234, 97, 190, 98, 83, 5, 191, 71, 67, 115, 190, 112, 67, 76, 60, 18, 94, 135, 62, 68, 194, 231, 60, 52, 57, 10, 188, 233, 236, 3, 61, 45, 26, 45, 190, 136, 169, 91, 190, 174, 252, 112, 61, 92, 234, 191, 60, 228, 223, 202, 62, 225, 110, 142, 188, 209, 196, 240, 61, 182, 99, 21, 62, 44, 42, 187, 61, 219, 147, 63, 62, 117, 157, 208, 189, 9, 14, 92, 62, 235, 242, 96, 189, 49, 159, 59, 190, 156, 203, 118, 62, 143, 187, 234, 189, 30, 138, 16, 62, 14, 186, 91, 189, 60, 164, 26, 188, 68, 9, 59, 190, 239, 176, 150, 59, 57, 247, 136, 62, 46, 21, 242, 189, 30, 71, 65, 62, 21, 175, 95, 190, 44, 6, 193, 189, 132, 160, 37, 190, 122, 27, 222, 190, 252, 180, 159, 189, 196, 230, 15, 62, 59, 39, 135, 190, 235, 128, 189, 189, 254, 139, 142, 62, 43, 55, 159, 190, 126, 226, 141, 190, 200, 240, 89, 190, 35, 161, 96, 190, 13, 191, 148, 190, 147, 113, 167, 189, 9, 232, 156, 190, 206, 191, 163, 189, 204, 24, 200, 190, 152, 68, 206, 61, 49, 77, 249, 189, 146, 83, 4, 187, 231, 115, 240, 190, 65, 227, 215, 190, 131, 5, 27, 190, 24, 227, 157, 62, 235, 148, 123, 61, 84, 65, 219, 189, 52, 172, 219, 189, 177, 107, 72, 189, 150, 79, 12, 62, 176, 175, 4, 189, 219, 110, 210, 60, 116, 121, 230, 188, 212, 67, 47, 190, 185, 108, 0, 190, 111, 137, 35, 61, 136, 128, 224, 189, 195, 140, 109, 189, 107, 146, 206, 61, 8, 153, 61, 189, 37, 91, 138, 189, 76, 20, 18, 190, 22, 144, 40, 190, 182, 167, 11, 190, 200, 100, 44, 61, 206, 19, 205, 188, 138, 128, 200, 189, 111, 127, 2, 189, 153, 8, 13, 190, 141, 81, 203, 188, 244, 100, 6, 62, 32, 28, 235, 189, 177, 195, 61, 187, 11, 63, 149, 61, 100, 221, 108, 61, 111, 173, 234, 189, 96, 212, 203, 189, 172, 170, 183, 59, 90, 244, 230, 61, 195, 146, 118, 62, 188, 109, 138, 62, 90, 136, 185, 188, 182, 76, 93, 189, 167, 15, 111, 61, 53, 146, 232, 190, 178, 183, 238, 60, 206, 219, 7, 62, 57, 118, 243, 62, 75, 17, 122, 190, 239, 76, 12, 190, 179, 250, 17, 190, 252, 86, 189, 188, 145, 159, 85, 62, 232, 93, 4, 62, 20, 121, 27, 62, 10, 98, 18, 62, 152, 203, 230, 188, 232, 89, 41, 190, 119, 57, 20, 190, 120, 155, 60, 189, 147, 90, 164, 61, 38, 31, 165, 190, 177, 175, 173, 60, 55, 81, 100, 189, 52, 157, 145, 189, 33, 50, 186, 62, 57, 118, 91, 190, 152, 171, 94, 187, 88, 60, 245, 187, 55, 130, 159, 190, 182, 38, 95, 61, 55, 207, 21, 191, 47, 9, 123, 190, 233, 62, 82, 61, 140, 111, 242, 61, 4, 74, 178, 190, 78, 247, 123, 191, 207, 113, 167, 190, 252, 67, 59, 191, 186, 242, 33, 190, 177, 19, 172, 61, 41, 77, 247, 61, 102, 1, 39, 191, 156, 22, 117, 62, 235, 19, 219, 190, 29, 48, 44, 191, 103, 71, 211, 190, 82, 91, 153, 189, 77, 90, 10, 62, 200, 241, 235, 62, 18, 3, 58, 61, 223, 117, 31, 62, 44, 234, 2, 191, 178, 244, 71, 62, 130, 245, 134, 190, 163, 93, 51, 61, 181, 184, 6, 63, 125, 68, 153, 189, 112, 128, 177, 62, 110, 181, 161, 190, 75, 205, 253, 189, 195, 219, 251, 60, 54, 63, 49, 190, 156, 193, 6, 190, 96, 225, 129, 61, 142, 13, 194, 189, 215, 155, 203, 189, 254, 80, 251, 188, 30, 248, 3, 190, 131, 160, 29, 190, 100, 226, 33, 62, 190, 66, 139, 61, 198, 133, 40, 62, 193, 13, 2, 62, 191, 122, 48, 190, 212, 109, 184, 61, 39, 112, 24, 189, 145, 26, 113, 189, 227, 72, 147, 189, 74, 4, 206, 61, 144, 178, 232, 187, 205, 12, 24, 62, 55, 178, 252, 189, 196, 94, 47, 190, 160, 121, 179, 189, 63, 215, 7, 61, 24, 218, 37, 190, 246, 193, 9, 190, 77, 165, 94, 189, 140, 155, 201, 59, 66, 194, 44, 62, 210, 100, 237, 59, 84, 141, 14, 62, 37, 171, 36, 190, 111, 142, 32, 190, 78, 50, 37, 62, 150, 115, 135, 188, 187, 251, 139, 187, 236, 24, 224, 188, 239, 55, 22, 190, 79, 134, 7, 62, 88, 120, 49, 62, 166, 126, 193, 189, 212, 133, 234, 189, 149, 203, 252, 61, 36, 12, 156, 189, 9, 148, 33, 189, 254, 224, 177, 189, 26, 135, 82, 61, 44, 4, 249, 61, 16, 227, 199, 60, 11, 163, 217, 188, 156, 166, 215, 60, 43, 229, 16, 62, 128, 127, 52, 190, 26, 103, 217, 189, 235, 190, 193, 189, 68, 154, 90, 189, 89, 27, 170, 188, 21, 23, 36, 189, 118, 32, 16, 190, 191, 251, 117, 61, 113, 34, 111, 189, 61, 131, 252, 189, 29, 237, 162, 189, 117, 182, 209, 60, 206, 52, 76, 61, 127, 43, 160, 61, 63, 13, 54, 189, 26, 27, 55, 62, 209, 182, 22, 62, 45, 238, 60, 62, 6, 83, 8, 62, 46, 249, 25, 186, 10, 128, 201, 61, 13, 190, 159, 188, 226, 31, 253, 189, 47, 45, 2, 190, 118, 212, 168, 62, 225, 222, 246, 188, 187, 77, 169, 62, 159, 226, 142, 189, 249, 58, 113, 62, 70, 101, 33, 190, 113, 202, 15, 189, 206, 29, 180, 60, 253, 90, 12, 190, 108, 234, 185, 189, 211, 15, 128, 61, 31, 131, 42, 190, 11, 17, 4, 62, 181, 182, 110, 62, 248, 126, 156, 61, 248, 222, 66, 190, 168, 146, 66, 62, 192, 33, 22, 61, 29, 93, 255, 189, 97, 241, 166, 61, 70, 46, 67, 190, 177, 195, 134, 60, 29, 164, 142, 190, 92, 41, 84, 62, 138, 90, 120, 60, 72, 85, 42, 59, 237, 132, 11, 190, 59, 132, 33, 189, 74, 130, 124, 189, 51, 151, 132, 62, 203, 197, 128, 189, 212, 203, 153, 189, 161, 162, 212, 189, 114, 248, 242, 189, 55, 254, 190, 62, 71, 16, 135, 188, 140, 21, 202, 61, 163, 33, 6, 190, 17, 106, 101, 190, 45, 132, 1, 190, 218, 85, 150, 62, 209, 21, 27, 62, 98, 60, 134, 189, 68, 157, 59, 62, 202, 140, 102, 62, 73, 29, 51, 189, 78, 200, 192, 61, 103, 141, 96, 62, 34, 68, 169, 62, 210, 70, 27, 62, 119, 83, 111, 190, 29, 131, 154, 188, 165, 50, 55, 190, 70, 177, 118, 61, 25, 132, 137, 188, 212, 124, 241, 188, 112, 113, 227, 189, 34, 39, 105, 189, 111, 130, 168, 189, 98, 175, 251, 61, 226, 206, 222, 189, 233, 125, 47, 62, 211, 107, 10, 190, 219, 112, 49, 60, 83, 128, 179, 61, 121, 159, 1, 190, 182, 95, 97, 62, 141, 138, 33, 61, 74, 22, 29, 62, 118, 10, 202, 61, 196, 208, 255, 189, 168, 157, 43, 190, 183, 178, 27, 190, 39, 75, 216, 61, 48, 152, 170, 189, 16, 160, 196, 189, 54, 220, 224, 188, 180, 45, 172, 61, 92, 160, 25, 190, 248, 178, 140, 62, 227, 161, 63, 189, 136, 177, 157, 61, 73, 78, 145, 189, 129, 55, 239, 61, 250, 206, 199, 61, 2, 84, 228, 190, 95, 221, 7, 191, 81, 81, 131, 190, 206, 236, 51, 190, 128, 107, 209, 190, 244, 250, 31, 190, 27, 124, 18, 191, 83, 153, 180, 188, 201, 197, 197, 190, 98, 75, 139, 61, 30, 102, 133, 190, 8, 67, 243, 189, 213, 43, 73, 62, 32, 22, 181, 190, 81, 232, 235, 60, 82, 103, 62, 190, 131, 91, 185, 188, 5, 14, 39, 62, 222, 47, 157, 61, 105, 129, 158, 62, 115, 240, 97, 62, 228, 34, 173, 189, 232, 69, 22, 62, 53, 146, 151, 189, 16, 25, 137, 61, 175, 249, 166, 62, 45, 8, 147, 190, 210, 116, 179, 62, 74, 10, 170, 189, 235, 100, 208, 61, 129, 106, 61, 190, 117, 141, 195, 190, 61, 101, 171, 61, 67, 192, 11, 62, 216, 193, 131, 190, 215, 79, 193, 61, 24, 208, 146, 190, 52, 10, 165, 190, 34, 151, 50, 191, 250, 230, 1, 190, 163, 99, 36, 191, 139, 94, 14, 188, 164, 15, 33, 190, 29, 253, 85, 190, 199, 153, 184, 189, 254, 196, 133, 62, 125, 179, 241, 189, 29, 59, 70, 60, 249, 132, 194, 61, 184, 172, 219, 190, 157, 100, 231, 189, 123, 131, 19, 62, 29, 131, 54, 62, 32, 2, 216, 61, 168, 226, 104, 62, 12, 129, 164, 62, 73, 120, 87, 190, 144, 55, 49, 61, 100, 216, 20, 190, 196, 63, 7, 62, 233, 92, 81, 62, 148, 41, 128, 187, 30, 4, 170, 190, 206, 78, 121, 190, 241, 7, 217, 190, 118, 18, 76, 191, 47, 133, 20, 191, 76, 137, 0, 62, 240, 108, 25, 191, 223, 181, 24, 191, 114, 198, 147, 191, 165, 34, 252, 190, 176, 3, 178, 189, 223, 192, 129, 62, 102, 192, 205, 190, 221, 176, 224, 190, 171, 129, 32, 62, 110, 139, 237, 187, 130, 47, 91, 190, 113, 178, 183, 190, 132, 222, 250, 60, 238, 90, 130, 188, 174, 178, 175, 62, 61, 90, 118, 188, 232, 248, 90, 60, 37, 115, 145, 190, 220, 90, 46, 190, 166, 159, 113, 62, 45, 108, 22, 62, 181, 17, 173, 62, 208, 13, 201, 190, 230, 189, 24, 190, 255, 148, 62, 190, 72, 90, 187, 62, 225, 169, 195, 61, 174, 225, 251, 189, 25, 17, 192, 61, 201, 97, 62, 190, 148, 27, 235, 61, 58, 235, 253, 189, 29, 208, 148, 62, 67, 129, 83, 190, 78, 158, 215, 59, 66, 91, 75, 188, 152, 251, 174, 189, 25, 72, 8, 191, 44, 173, 175, 61, 198, 176, 251, 187, 189, 229, 115, 189, 129, 213, 255, 61, 214, 86, 79, 62, 41, 173, 28, 61, 150, 132, 103, 190, 42, 71, 181, 190, 232, 41, 26, 190, 61, 72, 129, 186, 88, 29, 141, 190, 37, 165, 166, 189, 85, 238, 251, 61, 189, 88, 135, 62, 94, 237, 146, 190, 24, 254, 106, 184, 179, 16, 50, 61, 183, 84, 15, 62, 15, 185, 128, 61, 56, 136, 210, 61, 19, 253, 214, 189, 141, 17, 167, 189, 88, 72, 202, 60, 119, 172, 123, 189, 78, 80, 52, 61, 158, 164, 227, 189, 244, 140, 96, 60, 127, 252, 44, 190, 188, 118, 23, 62, 22, 78, 30, 62, 132, 9, 38, 60, 91, 252, 181, 189, 76, 31, 132, 189, 90, 126, 166, 61, 226, 223, 22, 190, 65, 135, 236, 188, 249, 155, 34, 62, 134, 129, 95, 189, 121, 103, 67, 60, 137, 24, 129, 188, 19, 85, 61, 189, 221, 21, 0, 190, 94, 15, 70, 189, 241, 33, 0, 62, 9, 211, 236, 61, 72, 232, 215, 60, 196, 220, 31, 189, 185, 231, 239, 189, 201, 61, 22, 62, 221, 138, 226, 189, 74, 26, 22, 190, 65, 212, 180, 189, 209, 168, 197, 61, 12, 101, 77, 188, 42, 83, 5, 190, 18, 187, 5, 190, 247, 166, 195, 189, 73, 166, 180, 61, 120, 151, 87, 61, 225, 246, 106, 188, 28, 39, 170, 61, 64, 227, 48, 190, 210, 254, 245, 61, 190, 137, 149, 188, 134, 109, 114, 61, 169, 154, 168, 61, 156, 65, 34, 190, 251, 149, 227, 189, 132, 197, 171, 189, 191, 173, 177, 189, 108, 107, 217, 61, 148, 194, 246, 189, 96, 18, 182, 61, 114, 66, 35, 190, 23, 157, 154, 188, 246, 252, 51, 60, 95, 231, 46, 190, 228, 110, 151, 61, 176, 6, 236, 189, 221, 222, 132, 61, 8, 242, 135, 189, 123, 138, 48, 62, 101, 211, 19, 190, 78, 207, 161, 61, 63, 32, 71, 189, 178, 142, 16, 190, 214, 2, 119, 62, 109, 52, 33, 62, 131, 254, 3, 62, 231, 28, 238, 189, 191, 233, 152, 62, 245, 172, 121, 188, 172, 189, 196, 189, 40, 18, 92, 190, 30, 185, 189, 62, 111, 107, 128, 189, 94, 206, 41, 62, 220, 76, 50, 190, 129, 101, 203, 60, 142, 39, 25, 62, 27, 20, 36, 61, 158, 147, 42, 62, 95, 38, 80, 190, 3, 81, 245, 60, 98, 44, 147, 190, 77, 161, 135, 188, 213, 120, 71, 190, 123, 48, 143, 61, 230, 73, 10, 190, 211, 189, 25, 62, 245, 63, 5, 61, 194, 175, 62, 189, 123, 97, 125, 61, 130, 21, 139, 190, 201, 53, 122, 189, 143, 148, 57, 62, 181, 248, 216, 61, 36, 182, 112, 62, 50, 14, 184, 61, 173, 164, 174, 189, 57, 14, 162, 189, 63, 10, 187, 60, 113, 27, 195, 62, 27, 15, 2, 190, 125, 186, 103, 62, 90, 149, 84, 189, 245, 198, 221, 189, 84, 134, 148, 190, 13, 232, 181, 61, 36, 159, 54, 61, 186, 32, 36, 61, 41, 209, 32, 61, 82, 180, 230, 189, 173, 196, 37, 62, 116, 86, 216, 188, 103, 229, 227, 188, 129, 41, 255, 189, 123, 51, 165, 190, 222, 179, 11, 61, 59, 6, 226, 61, 214, 97, 187, 59, 133, 150, 157, 61, 66, 39, 20, 62, 90, 18, 61, 190, 153, 75, 62, 188, 135, 63, 208, 190, 42, 164, 172, 62, 208, 102, 50, 62, 153, 95, 56, 190, 224, 133, 105, 189, 27, 110, 190, 61, 99, 164, 49, 62, 22, 70, 91, 188, 188, 91, 50, 62, 121, 56, 145, 62, 149, 17, 79, 61, 60, 134, 44, 62, 21, 147, 28, 190, 233, 228, 37, 63, 38, 182, 142, 191, 7, 91, 149, 62, 54, 59, 153, 61, 255, 207, 119, 191, 137, 49, 242, 61, 177, 96, 56, 190, 224, 199, 87, 62, 182, 126, 186, 189, 216, 115, 133, 190, 33, 204, 122, 190, 165, 154, 94, 190, 221, 179, 20, 191, 179, 216, 98, 188, 161, 15, 216, 189, 157, 207, 55, 62, 66, 104, 26, 62, 69, 112, 17, 191, 33, 253, 254, 62, 216, 197, 204, 190, 113, 210, 195, 61, 233, 89, 2, 62, 74, 158, 128, 190, 80, 91, 91, 61, 111, 165, 167, 62, 107, 56, 11, 188, 226, 7, 156, 61, 165, 19, 137, 61, 155, 246, 43, 62, 8, 70, 170, 62, 57, 131, 106, 60, 200, 229, 21, 62, 135, 231, 69, 62, 208, 172, 75, 191, 35, 204, 69, 62, 115, 175, 70, 61, 173, 21, 34, 190, 75, 253, 181, 62, 138, 68, 139, 61, 249, 131, 120, 58, 57, 123, 202, 190, 89, 152, 38, 190, 78, 109, 229, 189, 80, 178, 35, 188, 40, 150, 189, 190, 203, 229, 14, 62, 233, 96, 69, 190, 46, 144, 11, 62, 98, 127, 250, 187, 180, 12, 127, 190, 157, 31, 48, 62, 204, 123, 103, 190, 230, 254, 54, 61, 12, 0, 154, 62, 155, 131, 86, 190, 208, 177, 123, 62, 144, 219, 45, 187, 166, 239, 212, 189, 237, 135, 64, 62, 58, 26, 50, 62, 173, 96, 238, 61, 87, 143, 238, 189, 204, 223, 74, 189, 63, 169, 75, 61, 191, 247, 189, 190, 207, 44, 251, 60, 60, 31, 144, 187, 29, 34, 39, 189, 125, 225, 191, 189, 210, 220, 81, 61, 42, 220, 242, 189, 75, 21, 207, 189, 7, 253, 147, 189, 74, 110, 124, 189, 127, 124, 8, 60, 204, 105, 172, 61, 54, 25, 63, 62, 74, 144, 126, 61, 228, 202, 133, 62, 92, 194, 150, 61, 91, 5, 29, 62, 238, 176, 11, 190, 127, 94, 69, 189, 10, 203, 157, 189, 130, 158, 211, 189, 161, 73, 183, 189, 148, 63, 37, 190, 112, 93, 65, 187, 151, 64, 136, 190, 50, 180, 83, 189, 192, 44, 135, 190, 209, 118, 74, 189, 200, 164, 40, 191, 227, 156, 128, 190, 39, 232, 53, 191, 110, 169, 74, 190, 241, 2, 198, 190, 252, 102, 232, 60, 47, 104, 81, 190, 215, 13, 182, 190, 31, 253, 190, 61, 189, 105, 78, 61, 127, 254, 130, 190, 212, 53, 6, 190, 175, 237, 189, 189, 94, 248, 128, 62, 151, 218, 159, 189, 5, 168, 12, 61, 157, 175, 12, 61, 173, 150, 228, 189, 110, 149, 174, 62, 97, 64, 90, 62, 193, 196, 215, 61, 184, 174, 240, 189, 255, 60, 35, 190, 19, 122, 173, 61, 164, 82, 185, 188, 202, 157, 208, 188, 203, 117, 32, 190, 8, 160, 69, 190, 188, 93, 159, 190, 131, 159, 170, 190, 105, 77, 32, 62, 129, 3, 11, 62, 210, 28, 77, 190, 119, 65, 128, 61, 120, 157, 19, 189, 234, 18, 7, 62, 20, 245, 63, 189, 181, 103, 243, 189, 235, 236, 56, 62, 248, 55, 65, 190, 41, 58, 129, 60, 0, 248, 231, 62, 121, 71, 135, 189, 38, 88, 197, 189, 90, 135, 157, 189, 244, 90, 141, 189, 233, 173, 10, 190, 79, 13, 0, 62, 10, 5, 111, 190, 101, 48, 5, 61, 111, 48, 131, 61, 92, 221, 201, 61, 250, 112, 255, 189, 191, 251, 133, 190, 238, 250, 4, 189, 3, 167, 113, 62, 60, 90, 181, 190, 219, 205, 112, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 168, 46, 62, 4, 137, 89, 62, 254, 22, 240, 59, 114, 11, 21, 62, 64, 214, 100, 61, 40, 253, 97, 62, 108, 130, 130, 190, 91, 229, 184, 62, 197, 162, 63, 189, 112, 114, 74, 62, 115, 173, 163, 61, 82, 226, 42, 61, 79, 8, 152, 60, 242, 162, 140, 61, 196, 109, 255, 189, 123, 138, 198, 189, 31, 89, 130, 62, 64, 103, 128, 61, 48, 130, 220, 189, 198, 114, 64, 62, 144, 8, 110, 62, 58, 96, 196, 61, 64, 111, 42, 62, 248, 21, 233, 189, 241, 36, 22, 190, 139, 188, 222, 189, 227, 116, 96, 62, 29, 240, 27, 62, 211, 243, 164, 62, 111, 24, 128, 62, 56, 173, 108, 62, 104, 183, 72, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 14, 194, 62, 160, 136, 227, 61, 162, 17, 133, 62, 136, 0, 83, 63, 78, 246, 164, 189, 10, 233, 5, 62, 62, 128, 128, 62, 39, 15, 165, 190, 121, 247, 18, 60, 31, 199, 177, 62, 97, 39, 82, 63, 193, 232, 112, 60, 219, 175, 81, 190, 96, 22, 32, 63, 98, 253, 22, 62, 92, 97, 28, 62, 170, 11, 246, 189, 107, 25, 210, 190, 65, 132, 213, 61, 242, 66, 36, 63, 255, 1, 183, 61, 249, 97, 82, 63, 179, 119, 147, 190, 100, 225, 11, 190, 233, 16, 209, 61, 188, 174, 75, 62, 212, 145, 64, 190, 4, 143, 85, 191, 44, 78, 25, 191, 91, 228, 86, 61, 238, 92, 225, 62, 145, 185, 223, 190, 125, 236, 18, 61, 117, 35, 78, 189, 177, 250, 8, 190, 153, 5, 3, 62, 203, 50, 80, 190, 46, 228, 149, 190, 146, 107, 143, 62, 183, 223, 237, 188, 135, 166, 103, 188, 175, 236, 203, 188, 237, 235, 110, 61, 2, 5, 236, 61, 119, 6, 170, 62, 11, 209, 142, 62, 151, 189, 194, 60, 144, 189, 174, 60, 70, 37, 17, 190, 22, 139, 57, 188, 157, 199, 34, 62, 246, 81, 100, 62, 211, 167, 51, 191, 131, 121, 38, 62, 244, 198, 32, 60, 152, 129, 228, 188, 179, 249, 16, 188, 117, 210, 195, 62, 39, 65, 155, 190, 97, 117, 219, 62, 0, 181, 129, 60, 241, 189, 92, 190, 228, 165, 19, 190, 101, 146, 61, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 224, 37, 190, 74, 98, 156, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {86, 130, 150, 191, 90, 146, 186, 190, 89, 5, 20, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {172, 88, 85, 63, 110, 237, 84, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0064/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}