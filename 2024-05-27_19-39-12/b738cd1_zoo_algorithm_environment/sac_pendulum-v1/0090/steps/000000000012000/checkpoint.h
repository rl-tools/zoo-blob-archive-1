// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 251, 128, 63, 235, 146, 56, 63, 233, 156, 162, 62, 27, 40, 66, 189, 187, 155, 31, 191, 171, 73, 91, 62, 67, 24, 253, 190, 148, 76, 144, 62, 112, 227, 156, 190, 137, 186, 134, 190, 61, 209, 74, 191, 201, 195, 85, 191, 83, 43, 14, 63, 210, 99, 206, 189, 90, 2, 21, 191, 39, 13, 34, 191, 195, 98, 107, 62, 250, 7, 22, 62, 80, 6, 254, 62, 142, 64, 22, 190, 194, 181, 180, 187, 251, 173, 248, 62, 35, 178, 63, 63, 156, 249, 2, 191, 198, 82, 48, 191, 49, 95, 143, 63, 119, 44, 145, 62, 247, 50, 225, 61, 106, 204, 53, 191, 235, 114, 128, 62, 7, 15, 128, 61, 40, 249, 135, 63, 36, 188, 106, 62, 71, 73, 7, 62, 253, 235, 200, 188, 38, 242, 29, 60, 120, 2, 224, 62, 174, 197, 121, 191, 160, 45, 122, 190, 186, 132, 36, 191, 128, 159, 164, 190, 179, 229, 202, 190, 250, 223, 218, 62, 22, 157, 9, 63, 0, 181, 63, 62, 88, 228, 58, 62, 188, 252, 85, 63, 100, 19, 42, 191, 2, 39, 241, 62, 6, 235, 47, 191, 59, 108, 210, 62, 243, 96, 79, 62, 133, 192, 126, 63, 199, 7, 235, 62, 53, 175, 76, 191, 197, 13, 73, 191, 134, 171, 34, 62, 185, 155, 63, 63, 182, 150, 67, 191, 209, 59, 223, 190, 129, 60, 109, 61, 167, 191, 109, 63, 13, 87, 92, 62, 1, 45, 35, 191, 163, 93, 33, 191, 26, 193, 165, 191, 181, 213, 141, 62, 63, 90, 210, 189, 244, 53, 47, 63, 154, 176, 41, 63, 66, 40, 172, 63, 223, 59, 151, 62, 91, 233, 176, 62, 193, 197, 51, 63, 77, 157, 185, 62, 150, 123, 146, 189, 43, 95, 251, 190, 164, 7, 35, 188, 123, 65, 27, 191, 16, 5, 137, 191, 40, 64, 38, 190, 187, 243, 51, 61, 44, 214, 33, 63, 116, 108, 76, 191, 55, 6, 4, 191, 207, 78, 143, 63, 232, 164, 151, 61, 94, 170, 157, 190, 68, 64, 154, 187, 133, 172, 62, 63, 42, 210, 178, 189, 242, 11, 84, 191, 89, 103, 185, 62, 28, 145, 82, 190, 144, 46, 161, 190, 129, 74, 208, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 210, 12, 191, 60, 38, 202, 62, 108, 210, 32, 63, 37, 197, 174, 188, 173, 222, 183, 190, 75, 131, 53, 63, 220, 187, 25, 191, 248, 99, 130, 62, 21, 86, 61, 63, 76, 228, 180, 62, 237, 176, 171, 187, 85, 114, 122, 190, 112, 239, 3, 63, 87, 82, 169, 61, 18, 189, 211, 190, 6, 25, 13, 61, 244, 124, 3, 63, 76, 140, 215, 61, 44, 232, 158, 190, 3, 145, 116, 190, 176, 163, 128, 188, 223, 152, 149, 190, 168, 88, 6, 63, 131, 73, 82, 62, 253, 105, 39, 62, 149, 202, 10, 63, 178, 157, 12, 63, 221, 74, 89, 190, 136, 181, 51, 62, 130, 142, 7, 190, 189, 127, 64, 62, 229, 14, 46, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 154, 8, 62, 98, 33, 143, 61, 192, 156, 117, 189, 115, 2, 125, 61, 176, 101, 56, 190, 38, 116, 21, 190, 228, 30, 157, 189, 180, 143, 161, 188, 142, 77, 26, 189, 75, 10, 218, 188, 254, 40, 31, 62, 43, 187, 144, 61, 34, 97, 18, 62, 1, 72, 30, 61, 24, 128, 217, 187, 168, 100, 25, 188, 80, 225, 232, 189, 152, 122, 11, 62, 251, 113, 8, 189, 112, 188, 25, 62, 97, 193, 147, 188, 8, 81, 195, 189, 254, 66, 216, 188, 125, 66, 241, 188, 187, 31, 250, 189, 121, 193, 38, 190, 167, 210, 171, 189, 88, 213, 26, 60, 78, 16, 177, 189, 40, 106, 177, 60, 248, 210, 25, 190, 31, 151, 114, 60, 90, 248, 184, 61, 173, 174, 246, 189, 154, 34, 191, 62, 149, 120, 224, 61, 65, 53, 160, 189, 148, 150, 205, 62, 108, 235, 201, 189, 3, 30, 165, 62, 38, 200, 179, 62, 225, 249, 157, 190, 119, 102, 144, 62, 60, 79, 188, 61, 121, 62, 164, 62, 94, 197, 85, 62, 201, 148, 8, 191, 186, 3, 53, 190, 83, 34, 208, 190, 155, 38, 1, 62, 36, 71, 180, 62, 62, 140, 161, 190, 26, 146, 63, 62, 151, 238, 182, 62, 42, 229, 1, 191, 242, 188, 146, 62, 16, 214, 112, 62, 157, 185, 180, 188, 196, 114, 79, 62, 12, 26, 72, 62, 24, 97, 108, 61, 28, 204, 59, 191, 215, 14, 17, 62, 28, 29, 164, 189, 129, 88, 130, 190, 176, 108, 126, 60, 2, 26, 217, 187, 54, 97, 208, 61, 51, 187, 63, 189, 241, 246, 33, 187, 147, 4, 17, 62, 208, 50, 65, 62, 182, 42, 216, 61, 20, 81, 147, 61, 160, 37, 174, 190, 251, 228, 18, 62, 40, 152, 10, 62, 120, 118, 253, 189, 170, 164, 46, 191, 60, 228, 18, 62, 165, 40, 71, 62, 219, 46, 52, 191, 198, 202, 54, 190, 60, 199, 197, 188, 23, 208, 202, 190, 33, 236, 209, 61, 52, 100, 5, 190, 118, 187, 145, 62, 164, 225, 208, 189, 253, 218, 204, 188, 126, 142, 0, 190, 105, 122, 177, 189, 97, 78, 138, 62, 38, 9, 145, 189, 120, 194, 96, 190, 14, 165, 8, 190, 182, 143, 246, 189, 22, 255, 249, 188, 44, 214, 213, 61, 172, 3, 50, 62, 203, 130, 130, 185, 238, 120, 113, 61, 39, 93, 46, 62, 74, 112, 41, 190, 89, 60, 36, 61, 208, 65, 255, 60, 114, 187, 167, 61, 124, 217, 241, 61, 41, 1, 205, 189, 75, 148, 47, 190, 53, 120, 131, 60, 79, 94, 9, 189, 129, 242, 195, 189, 242, 77, 182, 189, 195, 234, 23, 62, 167, 14, 45, 62, 80, 215, 53, 189, 195, 51, 21, 190, 84, 106, 33, 190, 107, 15, 24, 190, 139, 248, 52, 189, 35, 73, 226, 189, 99, 171, 36, 190, 59, 93, 48, 190, 74, 74, 14, 190, 237, 22, 28, 62, 208, 124, 129, 61, 214, 171, 11, 190, 21, 226, 55, 62, 98, 63, 232, 61, 162, 52, 226, 61, 47, 67, 174, 61, 190, 139, 46, 190, 144, 130, 80, 62, 191, 42, 196, 188, 22, 244, 51, 62, 205, 62, 171, 61, 201, 52, 141, 62, 230, 44, 21, 190, 251, 26, 7, 188, 42, 55, 104, 62, 127, 6, 107, 62, 193, 3, 204, 59, 124, 181, 239, 60, 109, 67, 31, 62, 185, 231, 7, 190, 123, 75, 196, 62, 46, 133, 173, 188, 155, 216, 134, 190, 98, 129, 58, 61, 194, 153, 131, 61, 78, 186, 46, 62, 94, 35, 34, 61, 123, 96, 23, 62, 164, 140, 188, 189, 196, 189, 80, 62, 110, 81, 43, 190, 109, 49, 189, 189, 21, 23, 40, 189, 148, 118, 39, 62, 116, 177, 10, 191, 160, 161, 73, 189, 40, 173, 129, 62, 238, 45, 125, 62, 119, 19, 50, 62, 79, 110, 126, 190, 130, 12, 77, 189, 31, 118, 27, 62, 124, 208, 132, 189, 104, 197, 163, 62, 53, 18, 160, 190, 86, 102, 180, 188, 6, 151, 99, 62, 11, 29, 102, 189, 36, 49, 184, 189, 60, 33, 102, 62, 101, 140, 150, 62, 231, 103, 255, 190, 231, 15, 211, 190, 49, 252, 59, 62, 251, 238, 112, 190, 191, 156, 174, 62, 210, 245, 236, 190, 86, 3, 4, 191, 65, 77, 238, 190, 124, 242, 27, 189, 246, 227, 237, 189, 57, 226, 68, 62, 162, 66, 40, 62, 90, 25, 8, 191, 83, 128, 1, 63, 167, 70, 108, 191, 45, 178, 72, 189, 222, 53, 150, 190, 148, 219, 252, 61, 230, 111, 30, 191, 94, 29, 254, 189, 127, 49, 216, 62, 49, 168, 110, 61, 55, 194, 184, 190, 128, 226, 162, 62, 135, 34, 146, 190, 211, 82, 25, 189, 2, 48, 84, 61, 67, 149, 54, 192, 107, 20, 139, 61, 231, 201, 253, 61, 213, 117, 196, 62, 104, 53, 142, 190, 84, 34, 86, 189, 217, 29, 206, 189, 229, 184, 152, 61, 65, 108, 197, 188, 254, 133, 14, 191, 57, 129, 79, 62, 77, 57, 45, 190, 157, 219, 30, 190, 116, 219, 138, 189, 158, 0, 95, 189, 254, 123, 190, 60, 196, 141, 217, 62, 27, 144, 144, 62, 166, 132, 190, 190, 114, 159, 248, 189, 30, 75, 209, 188, 129, 233, 134, 189, 208, 40, 13, 62, 205, 88, 58, 186, 220, 173, 143, 61, 157, 221, 93, 188, 101, 119, 172, 189, 233, 153, 188, 189, 131, 102, 30, 189, 30, 127, 218, 61, 228, 217, 19, 190, 69, 28, 26, 188, 176, 254, 152, 189, 52, 83, 50, 190, 23, 149, 57, 61, 17, 165, 114, 189, 171, 80, 254, 188, 1, 145, 131, 61, 36, 231, 52, 190, 215, 173, 8, 189, 251, 83, 233, 189, 194, 227, 139, 189, 158, 216, 43, 189, 4, 163, 114, 60, 137, 174, 247, 59, 16, 141, 36, 189, 134, 194, 14, 190, 41, 89, 155, 189, 133, 149, 199, 61, 102, 158, 253, 189, 27, 181, 208, 189, 134, 76, 15, 62, 149, 73, 223, 60, 238, 230, 205, 189, 156, 151, 230, 189, 226, 217, 22, 190, 110, 146, 12, 59, 203, 129, 71, 188, 198, 247, 74, 61, 165, 255, 14, 190, 74, 243, 36, 190, 154, 141, 43, 62, 116, 84, 139, 60, 62, 112, 46, 190, 205, 201, 17, 59, 0, 37, 181, 189, 164, 236, 248, 61, 42, 138, 187, 188, 213, 217, 198, 189, 23, 225, 253, 61, 24, 178, 157, 188, 225, 37, 6, 189, 39, 55, 24, 61, 189, 52, 23, 190, 52, 6, 42, 190, 232, 48, 209, 188, 81, 249, 245, 60, 36, 61, 3, 62, 16, 132, 42, 190, 163, 209, 23, 61, 102, 120, 229, 187, 16, 83, 19, 61, 178, 23, 131, 189, 7, 15, 61, 61, 43, 197, 101, 191, 255, 251, 169, 59, 254, 114, 245, 188, 114, 249, 19, 190, 30, 77, 71, 63, 92, 227, 7, 189, 198, 157, 194, 189, 60, 234, 26, 61, 196, 204, 74, 61, 147, 85, 171, 60, 74, 70, 140, 190, 176, 35, 120, 61, 236, 40, 215, 61, 224, 52, 168, 189, 111, 100, 61, 191, 169, 133, 190, 62, 100, 201, 184, 62, 215, 253, 162, 189, 79, 14, 160, 190, 27, 77, 40, 63, 255, 158, 95, 190, 166, 223, 11, 191, 174, 211, 100, 62, 178, 36, 162, 190, 99, 138, 160, 190, 28, 57, 202, 61, 166, 38, 84, 189, 80, 216, 177, 60, 11, 110, 215, 62, 94, 255, 181, 61, 129, 132, 196, 189, 219, 223, 211, 189, 145, 26, 209, 190, 26, 70, 25, 62, 189, 108, 160, 189, 132, 132, 130, 190, 60, 222, 186, 188, 219, 146, 32, 188, 45, 32, 10, 190, 187, 111, 91, 62, 25, 180, 200, 59, 15, 138, 214, 61, 137, 38, 172, 191, 93, 53, 97, 189, 84, 189, 65, 62, 52, 134, 86, 190, 195, 55, 193, 191, 35, 222, 199, 61, 168, 172, 199, 61, 250, 213, 29, 190, 190, 5, 32, 190, 163, 220, 21, 62, 167, 239, 192, 190, 86, 19, 24, 190, 30, 169, 17, 62, 218, 37, 6, 61, 160, 90, 30, 190, 41, 94, 132, 62, 190, 78, 143, 190, 63, 148, 224, 61, 57, 167, 118, 62, 165, 222, 48, 62, 53, 245, 157, 61, 137, 82, 175, 189, 69, 5, 1, 190, 127, 149, 41, 190, 26, 43, 219, 61, 128, 3, 205, 189, 218, 118, 23, 62, 210, 135, 241, 189, 212, 140, 219, 189, 131, 132, 104, 189, 174, 114, 14, 190, 252, 58, 212, 61, 97, 28, 136, 188, 201, 124, 169, 189, 242, 26, 8, 189, 204, 7, 44, 190, 89, 148, 154, 61, 148, 64, 135, 188, 165, 121, 130, 189, 80, 61, 187, 189, 200, 211, 75, 189, 63, 175, 123, 189, 196, 231, 30, 190, 4, 132, 6, 189, 33, 103, 234, 189, 149, 56, 93, 61, 100, 46, 48, 190, 62, 200, 125, 61, 55, 193, 1, 190, 65, 82, 213, 61, 18, 181, 233, 189, 245, 179, 184, 189, 71, 64, 183, 189, 197, 251, 33, 62, 238, 42, 73, 60, 217, 122, 89, 62, 19, 56, 38, 61, 53, 123, 133, 189, 115, 148, 128, 62, 130, 37, 200, 190, 162, 92, 10, 61, 26, 5, 95, 62, 90, 204, 85, 191, 251, 230, 173, 62, 114, 231, 173, 191, 237, 21, 16, 189, 146, 9, 153, 61, 153, 199, 205, 58, 171, 60, 145, 191, 78, 174, 39, 61, 223, 117, 184, 62, 211, 206, 136, 190, 148, 134, 7, 189, 201, 2, 145, 62, 72, 228, 145, 191, 228, 72, 178, 61, 129, 67, 61, 62, 157, 28, 2, 61, 51, 66, 103, 190, 54, 165, 84, 189, 243, 183, 31, 190, 16, 114, 76, 189, 245, 37, 171, 190, 92, 231, 33, 190, 133, 253, 100, 62, 156, 225, 128, 190, 161, 32, 82, 62, 3, 82, 32, 62, 6, 94, 97, 62, 178, 156, 194, 61, 115, 89, 74, 188, 148, 75, 210, 61, 204, 188, 150, 60, 235, 40, 154, 62, 209, 146, 140, 62, 120, 3, 16, 62, 138, 81, 143, 62, 14, 126, 4, 61, 142, 178, 34, 62, 48, 67, 116, 62, 207, 195, 216, 61, 158, 106, 153, 188, 75, 157, 216, 189, 103, 9, 55, 62, 95, 14, 114, 62, 51, 136, 76, 190, 170, 231, 148, 61, 200, 0, 7, 60, 208, 28, 142, 190, 26, 122, 68, 62, 178, 82, 44, 62, 145, 91, 176, 189, 238, 102, 74, 62, 122, 213, 239, 60, 115, 235, 62, 190, 181, 84, 216, 190, 179, 95, 23, 62, 20, 48, 160, 189, 173, 238, 15, 62, 208, 59, 79, 62, 67, 3, 7, 62, 100, 147, 31, 189, 167, 126, 1, 61, 117, 0, 19, 189, 90, 15, 45, 62, 96, 35, 230, 62, 189, 203, 105, 61, 82, 90, 140, 189, 229, 132, 129, 188, 26, 134, 35, 62, 147, 86, 199, 62, 140, 165, 224, 61, 179, 147, 124, 190, 1, 250, 21, 189, 160, 74, 249, 187, 3, 170, 251, 188, 44, 71, 142, 187, 219, 76, 162, 189, 55, 182, 34, 190, 145, 69, 12, 190, 184, 253, 10, 62, 42, 225, 160, 62, 93, 135, 223, 60, 229, 52, 47, 61, 152, 59, 46, 190, 87, 233, 94, 62, 5, 38, 104, 61, 208, 110, 54, 190, 59, 192, 105, 62, 17, 136, 58, 61, 150, 118, 200, 190, 71, 222, 210, 62, 91, 252, 148, 189, 63, 78, 175, 61, 167, 86, 168, 62, 154, 73, 58, 191, 204, 214, 9, 190, 67, 253, 112, 62, 235, 22, 164, 191, 79, 171, 197, 62, 216, 76, 37, 191, 232, 244, 48, 62, 206, 84, 202, 61, 93, 45, 77, 61, 42, 155, 86, 191, 45, 12, 220, 61, 24, 145, 2, 63, 157, 83, 6, 190, 218, 129, 186, 189, 127, 196, 185, 62, 244, 76, 18, 191, 34, 250, 254, 189, 121, 165, 158, 61, 146, 154, 132, 190, 215, 211, 136, 190, 179, 254, 160, 189, 67, 179, 47, 190, 168, 96, 211, 189, 191, 130, 123, 190, 113, 72, 26, 190, 22, 0, 237, 189, 200, 239, 41, 62, 120, 243, 38, 190, 116, 158, 18, 190, 47, 27, 24, 62, 208, 127, 56, 190, 194, 197, 76, 189, 153, 115, 40, 190, 232, 117, 173, 60, 182, 83, 39, 190, 189, 33, 134, 188, 53, 27, 64, 190, 186, 161, 114, 188, 162, 72, 41, 190, 202, 185, 185, 61, 109, 249, 190, 61, 74, 105, 238, 189, 75, 124, 160, 60, 162, 129, 186, 189, 199, 200, 198, 189, 59, 95, 139, 189, 193, 24, 253, 61, 139, 125, 55, 189, 253, 249, 15, 62, 221, 204, 39, 190, 32, 175, 122, 61, 204, 45, 202, 189, 189, 208, 41, 60, 139, 87, 14, 190, 104, 118, 54, 190, 193, 33, 59, 61, 255, 237, 89, 61, 73, 80, 180, 61, 134, 162, 5, 62, 198, 231, 8, 191, 122, 105, 221, 61, 221, 128, 247, 188, 21, 255, 132, 191, 63, 158, 187, 62, 199, 47, 141, 62, 214, 62, 199, 60, 75, 27, 77, 191, 187, 219, 207, 62, 43, 28, 145, 61, 57, 204, 77, 190, 201, 65, 206, 61, 35, 163, 72, 191, 110, 49, 227, 190, 30, 68, 162, 190, 68, 222, 146, 189, 116, 67, 189, 61, 58, 230, 238, 189, 63, 29, 22, 190, 10, 126, 123, 62, 3, 86, 48, 190, 60, 213, 130, 191, 71, 119, 23, 62, 205, 152, 92, 190, 40, 212, 89, 190, 139, 251, 191, 61, 34, 71, 73, 62, 94, 196, 241, 190, 114, 255, 135, 62, 103, 178, 178, 62, 97, 231, 37, 190, 180, 251, 213, 189, 238, 131, 153, 189, 72, 146, 244, 189, 53, 12, 98, 189, 122, 78, 54, 190, 49, 59, 207, 189, 99, 73, 78, 61, 111, 155, 90, 61, 131, 212, 107, 60, 216, 159, 211, 189, 141, 182, 16, 190, 199, 88, 75, 187, 84, 159, 50, 190, 198, 75, 230, 189, 121, 163, 160, 189, 241, 238, 226, 188, 143, 227, 139, 60, 90, 52, 65, 189, 118, 177, 178, 189, 1, 14, 176, 61, 75, 192, 83, 190, 4, 119, 164, 61, 148, 181, 19, 62, 22, 174, 34, 62, 165, 209, 21, 190, 215, 9, 1, 62, 164, 143, 2, 62, 121, 158, 245, 189, 88, 81, 83, 189, 211, 10, 2, 190, 177, 75, 34, 190, 156, 23, 255, 189, 97, 238, 42, 189, 196, 87, 36, 60, 130, 97, 76, 189, 9, 91, 160, 62, 171, 148, 130, 62, 8, 31, 214, 189, 233, 29, 161, 62, 114, 138, 160, 61, 42, 229, 224, 61, 111, 27, 57, 61, 33, 152, 212, 188, 64, 65, 154, 188, 160, 146, 32, 62, 154, 163, 194, 62, 110, 157, 63, 189, 223, 99, 233, 190, 141, 40, 121, 190, 61, 158, 151, 189, 229, 175, 193, 189, 44, 81, 48, 62, 176, 207, 202, 189, 8, 84, 136, 189, 81, 75, 24, 62, 218, 193, 219, 189, 71, 87, 114, 62, 160, 117, 80, 62, 28, 233, 3, 62, 219, 169, 205, 188, 185, 100, 44, 62, 46, 33, 36, 189, 161, 19, 167, 190, 116, 173, 170, 189, 28, 37, 237, 187, 211, 223, 236, 190, 185, 149, 227, 189, 113, 59, 108, 188, 20, 4, 76, 190, 19, 180, 168, 61, 9, 101, 111, 189, 231, 24, 49, 190, 48, 152, 132, 190, 42, 37, 64, 190, 82, 155, 116, 61, 131, 176, 38, 190, 98, 196, 17, 190, 172, 38, 112, 61, 206, 66, 86, 62, 204, 227, 144, 190, 24, 59, 69, 190, 64, 26, 27, 62, 234, 135, 173, 190, 158, 109, 211, 62, 153, 89, 156, 61, 175, 148, 202, 189, 138, 71, 87, 190, 144, 103, 182, 61, 176, 105, 247, 190, 202, 107, 137, 190, 107, 200, 122, 62, 191, 114, 173, 61, 6, 40, 54, 61, 76, 218, 209, 190, 11, 172, 72, 190, 77, 47, 127, 62, 119, 47, 169, 61, 198, 43, 67, 63, 101, 11, 141, 189, 142, 120, 238, 61, 28, 243, 100, 62, 174, 71, 43, 190, 187, 60, 239, 189, 217, 0, 219, 189, 254, 201, 133, 62, 70, 15, 44, 61, 5, 10, 206, 189, 147, 75, 137, 62, 26, 94, 242, 60, 197, 194, 120, 62, 203, 93, 77, 61, 4, 43, 212, 62, 147, 31, 153, 190, 74, 94, 1, 62, 149, 158, 245, 61, 21, 20, 169, 62, 29, 28, 254, 189, 77, 61, 44, 191, 93, 100, 175, 59, 240, 62, 191, 190, 90, 48, 169, 62, 176, 253, 146, 62, 232, 118, 77, 62, 21, 126, 191, 59, 133, 70, 106, 62, 182, 27, 12, 191, 225, 19, 161, 190, 115, 238, 213, 62, 73, 217, 147, 61, 108, 88, 96, 61, 135, 204, 141, 189, 119, 71, 41, 190, 196, 233, 46, 190, 109, 161, 52, 188, 205, 162, 100, 189, 149, 190, 12, 62, 32, 203, 136, 189, 57, 114, 207, 189, 46, 218, 52, 190, 212, 39, 145, 189, 197, 11, 216, 186, 10, 213, 0, 190, 182, 113, 141, 61, 78, 183, 85, 61, 71, 161, 250, 61, 52, 118, 49, 190, 91, 216, 141, 61, 43, 232, 247, 61, 246, 70, 2, 62, 114, 197, 82, 189, 165, 180, 29, 190, 196, 240, 220, 189, 205, 189, 132, 189, 254, 248, 215, 188, 77, 226, 198, 61, 167, 155, 0, 61, 4, 83, 23, 190, 142, 188, 8, 60, 150, 215, 11, 62, 9, 30, 56, 60, 68, 196, 148, 188, 101, 84, 27, 63, 255, 89, 198, 61, 64, 147, 4, 191, 148, 90, 0, 190, 147, 243, 64, 190, 158, 7, 123, 190, 169, 85, 250, 189, 135, 228, 174, 189, 172, 21, 99, 190, 202, 72, 15, 61, 50, 5, 145, 190, 72, 103, 139, 60, 210, 93, 22, 189, 235, 90, 45, 60, 185, 140, 187, 62, 1, 144, 163, 190, 125, 160, 173, 61, 128, 31, 253, 61, 158, 132, 194, 188, 17, 3, 181, 190, 237, 155, 129, 190, 73, 220, 182, 61, 183, 234, 219, 60, 152, 49, 69, 62, 253, 15, 52, 62, 60, 6, 202, 190, 31, 176, 96, 191, 104, 12, 1, 190, 249, 36, 0, 191, 42, 77, 196, 61, 146, 229, 122, 61, 247, 114, 211, 61, 189, 88, 224, 190, 73, 115, 191, 189, 188, 39, 157, 190, 203, 0, 72, 191, 113, 198, 169, 61, 95, 151, 18, 62, 122, 103, 111, 189, 178, 249, 8, 191, 247, 77, 249, 61, 100, 40, 183, 61, 23, 208, 1, 191, 231, 74, 237, 61, 230, 94, 16, 190, 89, 231, 75, 190, 32, 155, 80, 191, 183, 210, 241, 189, 214, 154, 88, 62, 249, 212, 85, 190, 160, 228, 81, 188, 140, 18, 121, 62, 74, 42, 113, 190, 51, 221, 24, 191, 42, 91, 54, 62, 138, 43, 133, 189, 129, 242, 117, 189, 119, 80, 81, 61, 92, 193, 13, 62, 46, 242, 54, 191, 86, 55, 88, 62, 79, 22, 89, 62, 221, 195, 130, 190, 134, 212, 64, 190, 206, 206, 144, 62, 145, 132, 227, 190, 71, 109, 118, 62, 235, 124, 43, 191, 57, 146, 29, 190, 205, 10, 129, 62, 147, 45, 25, 62, 158, 175, 132, 61, 222, 227, 144, 62, 83, 218, 94, 190, 252, 190, 167, 61, 233, 103, 28, 62, 146, 103, 204, 191, 183, 106, 90, 62, 187, 119, 190, 62, 223, 25, 103, 63, 229, 98, 182, 189, 28, 134, 64, 191, 68, 38, 191, 190, 251, 102, 116, 190, 152, 112, 49, 191, 106, 56, 96, 191, 215, 235, 226, 61, 130, 117, 2, 191, 158, 92, 28, 191, 20, 57, 70, 190, 35, 17, 68, 61, 2, 128, 39, 62, 239, 208, 185, 62, 4, 247, 33, 189, 107, 236, 18, 191, 255, 144, 4, 191, 221, 32, 252, 190, 39, 64, 211, 62, 97, 227, 237, 60, 34, 116, 16, 62, 220, 117, 126, 189, 223, 73, 164, 190, 205, 69, 147, 189, 40, 42, 32, 62, 17, 209, 221, 190, 223, 189, 143, 62, 0, 132, 18, 191, 32, 240, 127, 189, 54, 238, 25, 189, 110, 163, 122, 61, 243, 81, 77, 191, 156, 214, 0, 61, 6, 204, 167, 62, 2, 36, 109, 61, 56, 2, 104, 60, 221, 240, 144, 62, 85, 160, 74, 191, 173, 221, 39, 62, 213, 9, 11, 62, 152, 6, 170, 190, 237, 153, 128, 190, 161, 220, 68, 62, 134, 120, 94, 189, 54, 213, 161, 61, 59, 249, 59, 61, 33, 230, 178, 190, 199, 133, 62, 62, 69, 162, 2, 190, 61, 216, 139, 190, 184, 255, 146, 190, 74, 114, 142, 62, 214, 129, 24, 62, 95, 54, 101, 190, 104, 56, 139, 61, 73, 241, 129, 188, 11, 245, 56, 190, 89, 14, 144, 62, 146, 19, 181, 190, 68, 12, 171, 60, 78, 99, 33, 190, 202, 144, 59, 61, 162, 10, 53, 62, 156, 159, 15, 190, 141, 164, 162, 190, 239, 27, 26, 191, 171, 112, 207, 190, 56, 140, 151, 190, 155, 62, 246, 188, 46, 6, 160, 190, 6, 244, 42, 61, 163, 154, 157, 190, 93, 187, 169, 189, 75, 158, 101, 190, 72, 251, 186, 62, 205, 118, 125, 62, 121, 190, 75, 190, 222, 154, 157, 62, 102, 168, 211, 190, 228, 156, 214, 190, 203, 211, 248, 190, 37, 66, 185, 61, 107, 239, 247, 60, 56, 235, 227, 189, 30, 121, 248, 60, 108, 132, 67, 189, 137, 140, 124, 189, 84, 32, 232, 189, 209, 99, 203, 187, 117, 68, 150, 61, 125, 142, 43, 190, 118, 132, 51, 61, 129, 133, 134, 61, 133, 77, 28, 62, 168, 121, 19, 62, 214, 232, 198, 61, 157, 14, 233, 189, 33, 183, 251, 61, 127, 115, 199, 189, 87, 49, 224, 189, 173, 66, 39, 61, 180, 197, 230, 60, 162, 16, 12, 190, 153, 16, 231, 189, 49, 212, 185, 189, 113, 131, 28, 62, 196, 218, 146, 189, 175, 27, 202, 189, 206, 246, 33, 190, 255, 230, 171, 60, 36, 213, 31, 190, 43, 170, 217, 61, 108, 218, 16, 62, 212, 98, 9, 191, 133, 237, 52, 61, 119, 166, 73, 62, 41, 228, 253, 190, 40, 64, 58, 62, 62, 61, 119, 61, 217, 21, 79, 189, 214, 81, 15, 190, 75, 122, 89, 62, 227, 219, 149, 189, 1, 2, 251, 190, 201, 220, 13, 190, 247, 242, 199, 191, 18, 65, 183, 189, 79, 223, 93, 190, 218, 159, 236, 62, 82, 235, 236, 189, 249, 148, 36, 190, 179, 37, 174, 190, 241, 189, 210, 188, 253, 109, 149, 190, 231, 168, 161, 190, 196, 156, 141, 62, 83, 245, 20, 190, 54, 0, 139, 190, 103, 160, 252, 61, 85, 107, 25, 189, 118, 250, 21, 62, 231, 31, 217, 61, 99, 129, 51, 62, 251, 184, 140, 190, 232, 129, 69, 189, 9, 41, 198, 61, 86, 111, 89, 62, 214, 199, 99, 61, 70, 125, 183, 61, 104, 158, 11, 190, 2, 241, 48, 62, 172, 87, 69, 61, 210, 156, 226, 62, 168, 150, 153, 61, 167, 129, 8, 61, 145, 234, 50, 190, 115, 14, 13, 189, 136, 76, 136, 62, 235, 135, 254, 61, 47, 78, 145, 190, 122, 212, 202, 189, 135, 162, 86, 62, 191, 80, 155, 188, 198, 57, 108, 62, 37, 8, 138, 190, 172, 7, 146, 189, 249, 169, 96, 61, 171, 91, 231, 186, 91, 150, 122, 62, 214, 224, 64, 62, 234, 61, 197, 61, 192, 173, 42, 190, 131, 66, 84, 62, 98, 253, 42, 190, 226, 128, 31, 190, 122, 147, 212, 61, 8, 147, 244, 60, 81, 202, 15, 190, 0, 107, 223, 61, 24, 137, 66, 190, 217, 162, 33, 189, 114, 4, 9, 63, 166, 35, 50, 191, 148, 104, 103, 189, 73, 205, 50, 190, 81, 111, 37, 191, 117, 18, 117, 62, 181, 3, 242, 190, 38, 211, 51, 189, 12, 91, 166, 61, 193, 64, 6, 190, 220, 71, 114, 191, 178, 122, 183, 62, 211, 174, 110, 62, 146, 88, 202, 189, 39, 200, 32, 62, 100, 136, 230, 62, 71, 69, 83, 191, 52, 203, 191, 189, 28, 97, 22, 62, 70, 52, 66, 190, 199, 147, 148, 189, 188, 172, 46, 61, 61, 5, 193, 190, 91, 178, 136, 189, 123, 35, 223, 189, 17, 71, 173, 189, 30, 2, 254, 61, 228, 120, 172, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 75, 226, 188, 232, 4, 10, 62, 181, 131, 42, 62, 101, 244, 28, 190, 70, 159, 131, 62, 159, 66, 136, 189, 226, 55, 254, 61, 36, 123, 93, 59, 96, 124, 155, 61, 68, 178, 53, 62, 217, 71, 142, 62, 247, 235, 237, 189, 87, 207, 58, 188, 105, 215, 2, 62, 211, 149, 175, 62, 241, 60, 49, 190, 227, 90, 6, 190, 53, 27, 222, 61, 203, 102, 97, 61, 104, 75, 162, 62, 72, 118, 143, 59, 246, 145, 72, 62, 235, 126, 61, 190, 147, 111, 67, 190, 131, 108, 48, 62, 10, 25, 104, 62, 75, 21, 122, 59, 254, 123, 175, 61, 175, 234, 73, 190, 195, 194, 144, 61, 219, 178, 128, 62, 244, 153, 253, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 107, 138, 189, 59, 178, 223, 190, 109, 165, 212, 187, 227, 179, 96, 61, 5, 54, 42, 190, 191, 176, 5, 63, 236, 253, 92, 63, 190, 21, 48, 189, 220, 136, 170, 61, 61, 137, 28, 63, 150, 81, 161, 62, 79, 239, 32, 61, 124, 0, 182, 62, 197, 184, 149, 190, 114, 180, 15, 190, 77, 83, 21, 63, 190, 229, 162, 61, 163, 239, 107, 63, 119, 59, 147, 60, 121, 40, 142, 190, 25, 188, 104, 190, 124, 134, 145, 190, 129, 229, 6, 62, 124, 84, 73, 191, 185, 131, 34, 63, 195, 97, 178, 63, 208, 162, 142, 62, 90, 94, 0, 63, 74, 13, 53, 61, 156, 22, 126, 63, 69, 0, 152, 190, 149, 181, 24, 63, 72, 36, 188, 189, 98, 133, 9, 62, 101, 96, 105, 190, 70, 233, 163, 61, 13, 60, 80, 190, 234, 27, 168, 61, 98, 253, 51, 190, 20, 157, 2, 62, 187, 21, 37, 190, 172, 98, 11, 61, 36, 88, 4, 191, 54, 56, 199, 189, 141, 169, 96, 190, 79, 117, 242, 61, 119, 7, 104, 190, 200, 71, 105, 62, 86, 113, 248, 188, 165, 69, 146, 62, 0, 4, 133, 60, 219, 142, 165, 189, 174, 74, 42, 63, 27, 5, 200, 61, 228, 131, 86, 188, 69, 122, 204, 61, 77, 254, 218, 189, 114, 180, 110, 62, 74, 2, 198, 188, 151, 136, 83, 189, 153, 87, 66, 189, 135, 181, 177, 60, 123, 123, 147, 190, 6, 61, 58, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 176, 58, 190, 3, 45, 17, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {63, 163, 232, 62, 108, 113, 162, 62, 150, 74, 126, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {73, 104, 203, 191, 137, 208, 62, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0090/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}