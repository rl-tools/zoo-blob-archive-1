// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 243, 129, 63, 193, 122, 74, 63, 16, 112, 146, 62, 183, 10, 42, 188, 140, 204, 239, 190, 230, 69, 19, 62, 203, 68, 237, 190, 227, 85, 139, 62, 29, 18, 120, 190, 252, 72, 226, 190, 79, 126, 48, 191, 138, 117, 83, 191, 233, 23, 16, 63, 232, 5, 188, 189, 127, 143, 17, 191, 210, 147, 34, 191, 108, 225, 134, 62, 236, 155, 40, 62, 80, 6, 254, 62, 142, 64, 22, 190, 194, 181, 180, 187, 84, 18, 238, 62, 235, 209, 55, 63, 236, 94, 222, 190, 124, 139, 54, 191, 9, 192, 158, 63, 117, 95, 93, 62, 222, 19, 52, 62, 210, 151, 37, 191, 224, 38, 96, 62, 68, 155, 169, 60, 70, 198, 150, 63, 49, 186, 85, 62, 71, 73, 7, 62, 253, 235, 200, 188, 38, 242, 29, 60, 127, 17, 206, 62, 53, 4, 93, 191, 102, 103, 140, 190, 255, 106, 39, 191, 122, 2, 115, 190, 26, 29, 182, 190, 217, 146, 214, 62, 205, 46, 18, 63, 242, 190, 87, 62, 10, 16, 101, 62, 82, 143, 93, 63, 93, 98, 37, 191, 224, 57, 251, 62, 144, 191, 70, 191, 202, 202, 160, 62, 76, 89, 42, 62, 137, 13, 138, 63, 197, 134, 218, 62, 25, 253, 99, 191, 112, 101, 103, 191, 30, 65, 214, 61, 174, 179, 59, 63, 163, 3, 73, 191, 168, 198, 210, 190, 226, 255, 124, 189, 135, 216, 131, 63, 50, 181, 58, 62, 160, 204, 70, 191, 76, 116, 6, 191, 84, 126, 167, 191, 222, 17, 148, 62, 192, 13, 1, 190, 39, 218, 35, 63, 245, 150, 34, 63, 185, 67, 181, 63, 226, 59, 140, 62, 123, 222, 162, 62, 61, 1, 57, 63, 181, 239, 176, 62, 43, 232, 79, 190, 82, 99, 0, 191, 36, 213, 189, 188, 125, 190, 20, 191, 89, 76, 152, 191, 20, 116, 14, 190, 2, 14, 225, 188, 9, 31, 50, 63, 105, 3, 68, 191, 223, 222, 35, 191, 63, 204, 137, 63, 176, 93, 238, 61, 58, 49, 154, 190, 253, 57, 161, 188, 243, 222, 56, 63, 27, 144, 31, 190, 66, 73, 79, 191, 238, 86, 181, 62, 102, 1, 207, 189, 141, 84, 109, 190, 233, 17, 200, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 7, 23, 191, 150, 49, 219, 62, 85, 81, 39, 63, 137, 254, 103, 189, 192, 217, 182, 190, 39, 58, 53, 63, 220, 187, 25, 191, 220, 194, 162, 62, 232, 178, 58, 63, 250, 70, 197, 62, 212, 171, 26, 188, 85, 114, 122, 190, 49, 185, 2, 63, 0, 138, 86, 60, 122, 6, 230, 190, 90, 254, 26, 61, 121, 123, 11, 63, 3, 168, 211, 61, 204, 57, 144, 190, 227, 230, 132, 190, 123, 56, 107, 189, 215, 200, 112, 190, 202, 31, 4, 63, 251, 81, 55, 62, 233, 15, 22, 62, 60, 206, 3, 63, 35, 17, 13, 63, 81, 9, 145, 190, 16, 250, 236, 61, 160, 34, 40, 190, 249, 47, 218, 61, 247, 29, 103, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 154, 8, 62, 98, 33, 143, 61, 192, 156, 117, 189, 115, 2, 125, 61, 176, 101, 56, 190, 38, 116, 21, 190, 228, 30, 157, 189, 180, 143, 161, 188, 142, 77, 26, 189, 75, 10, 218, 188, 254, 40, 31, 62, 43, 187, 144, 61, 34, 97, 18, 62, 1, 72, 30, 61, 24, 128, 217, 187, 168, 100, 25, 188, 80, 225, 232, 189, 152, 122, 11, 62, 251, 113, 8, 189, 112, 188, 25, 62, 97, 193, 147, 188, 8, 81, 195, 189, 254, 66, 216, 188, 125, 66, 241, 188, 187, 31, 250, 189, 121, 193, 38, 190, 167, 210, 171, 189, 88, 213, 26, 60, 78, 16, 177, 189, 40, 106, 177, 60, 248, 210, 25, 190, 31, 151, 114, 60, 9, 1, 75, 61, 4, 66, 145, 190, 21, 188, 197, 62, 32, 91, 227, 61, 232, 19, 167, 189, 250, 238, 20, 63, 108, 235, 201, 189, 14, 251, 161, 62, 67, 7, 228, 62, 91, 96, 25, 191, 195, 19, 238, 62, 60, 79, 188, 61, 21, 187, 139, 62, 132, 40, 75, 62, 127, 99, 23, 191, 84, 215, 42, 190, 84, 89, 41, 191, 250, 137, 82, 62, 159, 118, 33, 63, 220, 189, 173, 190, 196, 69, 186, 62, 29, 95, 182, 62, 28, 207, 25, 191, 255, 64, 165, 62, 196, 107, 82, 62, 204, 85, 77, 189, 140, 221, 100, 62, 197, 73, 77, 62, 191, 78, 198, 61, 23, 116, 64, 191, 187, 78, 47, 62, 215, 1, 85, 189, 206, 60, 217, 190, 144, 74, 187, 60, 241, 173, 209, 58, 61, 65, 110, 61, 89, 145, 39, 61, 61, 220, 35, 190, 147, 4, 17, 62, 3, 98, 52, 62, 27, 16, 101, 60, 248, 136, 12, 61, 8, 146, 72, 190, 251, 228, 18, 62, 42, 89, 30, 62, 87, 2, 84, 190, 15, 211, 43, 191, 54, 155, 78, 62, 167, 136, 239, 61, 149, 123, 121, 191, 178, 101, 11, 60, 224, 194, 6, 61, 187, 66, 192, 190, 57, 93, 34, 61, 61, 61, 142, 190, 225, 75, 98, 62, 54, 60, 128, 190, 2, 85, 153, 188, 217, 91, 115, 188, 23, 21, 20, 190, 120, 93, 72, 62, 216, 26, 181, 60, 110, 86, 149, 187, 32, 190, 117, 189, 182, 143, 246, 189, 22, 255, 249, 188, 44, 214, 213, 61, 172, 3, 50, 62, 203, 130, 130, 185, 238, 120, 113, 61, 39, 93, 46, 62, 74, 112, 41, 190, 89, 60, 36, 61, 208, 65, 255, 60, 114, 187, 167, 61, 124, 217, 241, 61, 41, 1, 205, 189, 75, 148, 47, 190, 53, 120, 131, 60, 79, 94, 9, 189, 129, 242, 195, 189, 242, 77, 182, 189, 195, 234, 23, 62, 167, 14, 45, 62, 80, 215, 53, 189, 195, 51, 21, 190, 84, 106, 33, 190, 107, 15, 24, 190, 139, 248, 52, 189, 35, 73, 226, 189, 99, 171, 36, 190, 59, 93, 48, 190, 74, 74, 14, 190, 237, 22, 28, 62, 208, 124, 129, 61, 214, 171, 11, 190, 74, 34, 45, 62, 128, 227, 16, 62, 104, 175, 207, 61, 72, 123, 140, 61, 189, 30, 23, 190, 157, 157, 53, 62, 191, 42, 196, 188, 215, 40, 32, 62, 36, 1, 217, 61, 214, 205, 147, 62, 120, 50, 117, 189, 251, 26, 7, 188, 15, 34, 114, 62, 249, 99, 65, 62, 75, 59, 151, 61, 172, 200, 3, 61, 217, 40, 30, 62, 200, 198, 38, 190, 105, 67, 233, 62, 24, 78, 229, 60, 133, 134, 66, 190, 128, 103, 238, 60, 26, 250, 143, 61, 191, 121, 47, 62, 221, 37, 78, 59, 160, 119, 53, 62, 179, 240, 68, 188, 31, 154, 80, 62, 32, 177, 43, 190, 122, 73, 181, 189, 81, 229, 48, 60, 68, 234, 39, 62, 22, 212, 18, 191, 8, 168, 97, 188, 208, 57, 126, 62, 90, 87, 122, 62, 151, 247, 31, 62, 233, 123, 163, 190, 130, 12, 77, 189, 88, 79, 8, 62, 59, 179, 207, 189, 49, 118, 219, 62, 32, 190, 19, 191, 86, 102, 180, 188, 7, 199, 107, 62, 30, 20, 52, 189, 97, 105, 183, 189, 247, 134, 80, 62, 236, 164, 213, 62, 63, 36, 77, 191, 58, 177, 53, 191, 172, 119, 42, 62, 158, 71, 223, 190, 152, 9, 171, 62, 115, 167, 235, 190, 34, 47, 36, 191, 199, 229, 244, 190, 255, 214, 225, 188, 151, 147, 202, 189, 177, 174, 55, 62, 142, 162, 15, 62, 142, 209, 84, 191, 218, 203, 13, 63, 40, 83, 120, 191, 213, 87, 221, 189, 135, 31, 121, 190, 131, 91, 3, 189, 130, 54, 58, 191, 211, 60, 214, 189, 118, 179, 208, 62, 49, 168, 110, 61, 236, 130, 175, 190, 172, 223, 147, 62, 248, 124, 105, 190, 220, 164, 60, 189, 2, 48, 84, 61, 141, 138, 55, 192, 53, 249, 228, 189, 119, 165, 237, 61, 87, 78, 206, 62, 91, 241, 111, 190, 117, 149, 4, 189, 75, 121, 238, 188, 229, 184, 152, 61, 193, 1, 7, 189, 254, 52, 38, 191, 8, 251, 110, 62, 164, 156, 49, 190, 130, 149, 7, 190, 221, 249, 234, 189, 16, 135, 8, 190, 235, 52, 51, 61, 144, 159, 196, 62, 72, 218, 170, 62, 142, 71, 152, 190, 170, 171, 141, 189, 30, 75, 209, 188, 129, 233, 134, 189, 208, 40, 13, 62, 205, 88, 58, 186, 220, 173, 143, 61, 157, 221, 93, 188, 101, 119, 172, 189, 233, 153, 188, 189, 131, 102, 30, 189, 30, 127, 218, 61, 228, 217, 19, 190, 69, 28, 26, 188, 176, 254, 152, 189, 52, 83, 50, 190, 23, 149, 57, 61, 17, 165, 114, 189, 171, 80, 254, 188, 1, 145, 131, 61, 36, 231, 52, 190, 215, 173, 8, 189, 251, 83, 233, 189, 194, 227, 139, 189, 158, 216, 43, 189, 4, 163, 114, 60, 137, 174, 247, 59, 16, 141, 36, 189, 134, 194, 14, 190, 41, 89, 155, 189, 133, 149, 199, 61, 102, 158, 253, 189, 27, 181, 208, 189, 134, 76, 15, 62, 149, 73, 223, 60, 238, 230, 205, 189, 156, 151, 230, 189, 226, 217, 22, 190, 110, 146, 12, 59, 203, 129, 71, 188, 198, 247, 74, 61, 165, 255, 14, 190, 74, 243, 36, 190, 154, 141, 43, 62, 116, 84, 139, 60, 62, 112, 46, 190, 205, 201, 17, 59, 0, 37, 181, 189, 164, 236, 248, 61, 42, 138, 187, 188, 213, 217, 198, 189, 23, 225, 253, 61, 24, 178, 157, 188, 225, 37, 6, 189, 39, 55, 24, 61, 189, 52, 23, 190, 52, 6, 42, 190, 232, 48, 209, 188, 81, 249, 245, 60, 36, 61, 3, 62, 16, 132, 42, 190, 163, 209, 23, 61, 102, 120, 229, 187, 16, 83, 19, 61, 178, 23, 131, 189, 7, 15, 61, 61, 94, 124, 103, 191, 254, 136, 211, 59, 9, 42, 48, 188, 178, 126, 18, 190, 164, 231, 66, 63, 60, 137, 16, 189, 198, 157, 194, 189, 100, 53, 23, 61, 230, 43, 5, 189, 146, 163, 162, 60, 20, 105, 222, 190, 176, 35, 120, 61, 201, 0, 250, 61, 156, 214, 152, 189, 226, 193, 109, 191, 220, 95, 187, 62, 10, 251, 181, 62, 120, 247, 137, 189, 224, 249, 176, 190, 24, 196, 34, 63, 41, 47, 194, 190, 20, 192, 14, 191, 165, 133, 72, 62, 3, 147, 165, 190, 169, 5, 153, 190, 209, 57, 211, 61, 51, 172, 14, 189, 169, 221, 167, 188, 231, 215, 221, 62, 247, 40, 161, 61, 246, 245, 252, 189, 67, 188, 227, 189, 237, 167, 222, 190, 253, 200, 27, 62, 18, 4, 101, 60, 30, 86, 78, 190, 54, 184, 251, 60, 253, 223, 77, 186, 45, 32, 10, 190, 78, 122, 92, 62, 36, 184, 146, 189, 45, 23, 213, 61, 245, 115, 201, 191, 93, 53, 97, 189, 18, 0, 104, 62, 134, 45, 255, 189, 216, 219, 211, 191, 112, 237, 28, 62, 25, 69, 186, 61, 252, 101, 69, 190, 24, 218, 79, 190, 138, 205, 26, 62, 233, 213, 41, 191, 134, 202, 214, 189, 52, 128, 232, 61, 68, 249, 182, 58, 162, 246, 45, 190, 217, 131, 144, 62, 38, 167, 34, 190, 145, 1, 192, 61, 151, 161, 130, 62, 191, 29, 51, 62, 66, 26, 193, 61, 147, 142, 150, 189, 69, 5, 1, 190, 127, 149, 41, 190, 26, 43, 219, 61, 128, 3, 205, 189, 218, 118, 23, 62, 210, 135, 241, 189, 212, 140, 219, 189, 131, 132, 104, 189, 174, 114, 14, 190, 252, 58, 212, 61, 97, 28, 136, 188, 201, 124, 169, 189, 242, 26, 8, 189, 204, 7, 44, 190, 89, 148, 154, 61, 148, 64, 135, 188, 165, 121, 130, 189, 80, 61, 187, 189, 200, 211, 75, 189, 63, 175, 123, 189, 196, 231, 30, 190, 4, 132, 6, 189, 33, 103, 234, 189, 149, 56, 93, 61, 100, 46, 48, 190, 62, 200, 125, 61, 55, 193, 1, 190, 65, 82, 213, 61, 18, 181, 233, 189, 245, 179, 184, 189, 71, 64, 183, 189, 197, 251, 33, 62, 132, 213, 6, 61, 27, 61, 86, 62, 104, 249, 178, 61, 2, 1, 120, 189, 35, 179, 142, 62, 73, 234, 213, 190, 162, 92, 10, 61, 5, 126, 130, 62, 188, 148, 97, 191, 19, 148, 178, 62, 207, 34, 218, 191, 237, 21, 16, 189, 225, 89, 175, 61, 216, 180, 200, 59, 234, 152, 162, 191, 61, 163, 190, 61, 202, 203, 190, 62, 49, 143, 109, 190, 125, 140, 79, 190, 193, 189, 134, 62, 172, 25, 180, 191, 164, 222, 184, 61, 10, 85, 61, 62, 155, 115, 90, 61, 194, 208, 65, 190, 59, 81, 120, 189, 162, 178, 63, 190, 161, 228, 54, 189, 222, 71, 147, 190, 201, 12, 217, 189, 128, 28, 112, 62, 177, 90, 95, 190, 215, 249, 82, 62, 191, 107, 19, 62, 121, 144, 74, 62, 246, 20, 173, 61, 78, 27, 150, 188, 121, 118, 202, 61, 204, 188, 150, 60, 21, 223, 149, 62, 158, 175, 165, 62, 216, 11, 233, 61, 69, 97, 193, 62, 14, 126, 4, 61, 77, 213, 41, 62, 11, 248, 92, 62, 231, 240, 19, 62, 151, 219, 35, 189, 104, 218, 0, 190, 223, 177, 26, 62, 158, 43, 140, 62, 183, 219, 48, 190, 88, 165, 47, 62, 188, 34, 24, 57, 183, 116, 148, 190, 134, 160, 83, 62, 62, 0, 14, 62, 187, 63, 169, 189, 234, 122, 74, 62, 106, 160, 5, 61, 200, 45, 35, 190, 83, 188, 4, 191, 184, 206, 237, 61, 43, 15, 17, 190, 164, 114, 232, 61, 126, 149, 109, 62, 48, 235, 254, 61, 60, 83, 103, 189, 205, 15, 121, 61, 200, 107, 147, 189, 90, 15, 45, 62, 79, 197, 216, 62, 200, 53, 135, 61, 204, 95, 101, 189, 141, 20, 121, 61, 26, 134, 35, 62, 220, 8, 204, 62, 1, 44, 134, 61, 28, 129, 61, 190, 176, 22, 236, 188, 77, 237, 92, 188, 203, 25, 145, 189, 96, 195, 146, 61, 62, 4, 237, 188, 14, 143, 198, 189, 202, 116, 31, 190, 237, 80, 10, 62, 83, 170, 154, 62, 124, 208, 166, 188, 158, 143, 150, 61, 16, 236, 147, 189, 38, 220, 91, 62, 46, 84, 76, 61, 208, 116, 46, 190, 146, 131, 149, 62, 150, 225, 70, 61, 60, 24, 170, 190, 130, 75, 198, 62, 28, 142, 201, 189, 245, 63, 129, 61, 103, 0, 141, 62, 53, 192, 69, 191, 204, 214, 9, 190, 145, 96, 95, 62, 30, 158, 191, 191, 180, 58, 193, 62, 55, 83, 140, 191, 232, 244, 48, 62, 9, 130, 205, 61, 238, 70, 73, 61, 57, 145, 124, 191, 176, 216, 104, 61, 159, 47, 5, 63, 169, 146, 118, 189, 111, 219, 152, 190, 68, 110, 166, 62, 53, 203, 118, 191, 41, 163, 30, 190, 233, 157, 147, 61, 147, 36, 111, 190, 198, 22, 92, 190, 101, 100, 185, 189, 241, 115, 115, 190, 146, 229, 51, 190, 58, 185, 149, 190, 131, 88, 8, 190, 231, 64, 50, 190, 160, 146, 37, 62, 120, 243, 38, 190, 116, 158, 18, 190, 47, 27, 24, 62, 208, 127, 56, 190, 194, 197, 76, 189, 153, 115, 40, 190, 232, 117, 173, 60, 182, 83, 39, 190, 189, 33, 134, 188, 53, 27, 64, 190, 186, 161, 114, 188, 162, 72, 41, 190, 202, 185, 185, 61, 109, 249, 190, 61, 74, 105, 238, 189, 75, 124, 160, 60, 162, 129, 186, 189, 199, 200, 198, 189, 59, 95, 139, 189, 193, 24, 253, 61, 139, 125, 55, 189, 253, 249, 15, 62, 221, 204, 39, 190, 32, 175, 122, 61, 204, 45, 202, 189, 189, 208, 41, 60, 139, 87, 14, 190, 104, 118, 54, 190, 193, 33, 59, 61, 255, 237, 89, 61, 73, 80, 180, 61, 134, 162, 5, 62, 115, 19, 24, 191, 216, 245, 183, 61, 240, 0, 82, 190, 36, 78, 126, 191, 63, 158, 187, 62, 223, 147, 136, 62, 214, 62, 199, 60, 93, 152, 127, 191, 124, 162, 197, 62, 34, 204, 66, 61, 122, 103, 68, 190, 201, 65, 206, 61, 239, 219, 42, 191, 161, 114, 206, 190, 137, 125, 178, 190, 177, 161, 151, 190, 223, 1, 146, 61, 19, 196, 1, 190, 106, 2, 48, 190, 136, 50, 236, 188, 107, 185, 33, 190, 144, 102, 139, 191, 165, 87, 1, 62, 89, 12, 96, 190, 13, 119, 94, 190, 31, 247, 138, 61, 60, 14, 76, 62, 244, 21, 38, 191, 124, 143, 150, 62, 81, 100, 164, 62, 110, 92, 53, 190, 146, 86, 237, 189, 238, 131, 153, 189, 72, 146, 244, 189, 53, 12, 98, 189, 122, 78, 54, 190, 49, 59, 207, 189, 99, 73, 78, 61, 111, 155, 90, 61, 131, 212, 107, 60, 216, 159, 211, 189, 141, 182, 16, 190, 199, 88, 75, 187, 84, 159, 50, 190, 198, 75, 230, 189, 121, 163, 160, 189, 241, 238, 226, 188, 143, 227, 139, 60, 90, 52, 65, 189, 118, 177, 178, 189, 1, 14, 176, 61, 75, 192, 83, 190, 4, 119, 164, 61, 148, 181, 19, 62, 22, 174, 34, 62, 165, 209, 21, 190, 215, 9, 1, 62, 164, 143, 2, 62, 121, 158, 245, 189, 88, 81, 83, 189, 211, 10, 2, 190, 177, 75, 34, 190, 156, 23, 255, 189, 97, 238, 42, 189, 55, 176, 54, 189, 248, 41, 25, 189, 173, 159, 152, 62, 92, 248, 119, 62, 255, 93, 198, 189, 180, 211, 170, 62, 114, 138, 160, 61, 123, 71, 203, 61, 1, 134, 7, 62, 99, 82, 36, 189, 220, 147, 17, 62, 160, 146, 32, 62, 152, 7, 200, 62, 212, 13, 159, 189, 145, 226, 228, 190, 245, 161, 129, 190, 52, 118, 199, 189, 195, 174, 42, 190, 188, 7, 212, 62, 201, 86, 116, 189, 12, 115, 191, 61, 27, 180, 12, 62, 43, 60, 255, 189, 167, 207, 103, 62, 249, 201, 18, 62, 70, 147, 21, 62, 225, 184, 170, 60, 213, 182, 47, 62, 193, 4, 173, 59, 70, 184, 228, 190, 118, 38, 48, 189, 49, 69, 76, 189, 37, 180, 55, 191, 36, 65, 5, 190, 67, 227, 47, 190, 198, 240, 139, 190, 231, 14, 234, 61, 37, 89, 136, 189, 231, 24, 49, 190, 209, 30, 22, 190, 248, 199, 60, 190, 113, 157, 60, 61, 39, 37, 76, 190, 98, 196, 17, 190, 60, 178, 216, 188, 136, 121, 105, 61, 21, 245, 223, 190, 182, 63, 233, 189, 98, 245, 11, 62, 23, 176, 174, 190, 209, 145, 213, 62, 65, 216, 192, 60, 179, 184, 155, 189, 20, 194, 130, 190, 19, 143, 209, 61, 83, 254, 57, 191, 134, 233, 148, 190, 73, 3, 70, 62, 127, 39, 235, 60, 86, 4, 74, 60, 91, 87, 206, 190, 204, 121, 27, 190, 63, 195, 126, 62, 48, 186, 194, 61, 220, 106, 78, 63, 49, 93, 121, 189, 59, 156, 58, 61, 236, 49, 87, 62, 103, 87, 51, 190, 136, 74, 38, 190, 217, 0, 219, 189, 179, 236, 114, 62, 10, 31, 181, 60, 247, 243, 198, 189, 93, 22, 179, 62, 26, 94, 242, 60, 78, 81, 108, 62, 149, 85, 80, 60, 156, 217, 18, 63, 59, 127, 172, 190, 61, 15, 6, 62, 255, 255, 7, 62, 132, 99, 199, 62, 219, 32, 204, 189, 101, 180, 23, 191, 20, 3, 251, 187, 191, 142, 177, 190, 23, 81, 178, 62, 9, 22, 147, 62, 142, 119, 72, 62, 166, 181, 101, 187, 118, 121, 99, 62, 121, 121, 39, 191, 44, 32, 155, 190, 16, 78, 222, 62, 182, 194, 147, 61, 108, 88, 96, 61, 135, 204, 141, 189, 119, 71, 41, 190, 196, 233, 46, 190, 109, 161, 52, 188, 205, 162, 100, 189, 149, 190, 12, 62, 32, 203, 136, 189, 57, 114, 207, 189, 46, 218, 52, 190, 212, 39, 145, 189, 197, 11, 216, 186, 10, 213, 0, 190, 182, 113, 141, 61, 78, 183, 85, 61, 71, 161, 250, 61, 52, 118, 49, 190, 91, 216, 141, 61, 43, 232, 247, 61, 246, 70, 2, 62, 114, 197, 82, 189, 165, 180, 29, 190, 196, 240, 220, 189, 205, 189, 132, 189, 254, 248, 215, 188, 77, 226, 198, 61, 167, 155, 0, 61, 4, 83, 23, 190, 142, 188, 8, 60, 150, 215, 11, 62, 9, 30, 56, 60, 68, 196, 148, 188, 101, 56, 57, 63, 23, 117, 168, 61, 132, 250, 85, 191, 148, 90, 0, 190, 192, 181, 10, 191, 30, 117, 137, 190, 169, 85, 250, 189, 42, 69, 245, 189, 23, 169, 72, 190, 126, 212, 223, 60, 249, 3, 100, 190, 72, 103, 139, 60, 41, 192, 164, 189, 235, 90, 45, 60, 198, 48, 4, 63, 164, 209, 14, 191, 47, 93, 173, 61, 92, 184, 38, 62, 179, 200, 43, 189, 231, 202, 133, 190, 154, 38, 71, 190, 73, 220, 182, 61, 85, 132, 24, 61, 108, 121, 138, 62, 243, 229, 82, 62, 114, 106, 216, 190, 120, 35, 127, 191, 104, 12, 1, 190, 214, 163, 250, 190, 134, 125, 208, 61, 247, 18, 24, 61, 77, 70, 185, 61, 31, 93, 10, 191, 193, 171, 178, 189, 16, 39, 148, 190, 218, 52, 71, 191, 6, 76, 183, 61, 57, 152, 253, 61, 122, 103, 111, 189, 242, 86, 34, 191, 101, 70, 109, 61, 161, 167, 192, 61, 193, 32, 17, 191, 231, 74, 237, 61, 211, 229, 105, 189, 2, 177, 152, 189, 187, 240, 129, 191, 76, 130, 14, 190, 186, 88, 91, 62, 148, 47, 138, 190, 139, 225, 157, 189, 189, 156, 98, 62, 151, 206, 142, 190, 171, 88, 26, 191, 167, 20, 37, 62, 229, 244, 20, 190, 107, 150, 184, 189, 225, 119, 149, 61, 91, 215, 123, 62, 46, 242, 54, 191, 116, 254, 88, 62, 187, 70, 52, 62, 124, 42, 120, 190, 90, 156, 66, 190, 30, 95, 29, 62, 76, 67, 22, 191, 58, 208, 35, 62, 134, 233, 65, 191, 44, 109, 57, 190, 92, 145, 38, 62, 147, 45, 25, 62, 164, 200, 111, 61, 72, 45, 113, 62, 220, 223, 139, 190, 168, 151, 250, 61, 233, 103, 28, 62, 18, 78, 215, 191, 17, 82, 79, 61, 202, 152, 155, 62, 186, 45, 98, 63, 33, 136, 134, 190, 79, 218, 40, 191, 76, 162, 214, 190, 155, 48, 148, 190, 32, 11, 39, 191, 224, 116, 119, 191, 178, 251, 149, 61, 19, 241, 223, 190, 222, 178, 251, 190, 32, 46, 219, 190, 224, 198, 121, 189, 49, 125, 7, 62, 221, 168, 166, 62, 28, 122, 21, 190, 151, 60, 25, 191, 155, 68, 37, 191, 72, 185, 223, 190, 187, 113, 208, 62, 17, 153, 163, 61, 232, 16, 15, 62, 233, 17, 68, 189, 246, 171, 154, 190, 205, 69, 147, 189, 6, 187, 75, 62, 155, 45, 234, 190, 238, 90, 146, 62, 178, 91, 86, 191, 32, 240, 127, 189, 209, 185, 82, 188, 38, 61, 157, 61, 188, 193, 113, 191, 82, 188, 142, 61, 49, 107, 176, 62, 207, 140, 215, 61, 107, 62, 138, 189, 56, 54, 135, 62, 102, 23, 135, 191, 129, 71, 35, 62, 226, 71, 9, 62, 185, 54, 147, 190, 251, 215, 73, 190, 194, 55, 76, 62, 116, 60, 153, 189, 34, 129, 146, 61, 236, 15, 100, 61, 215, 118, 171, 190, 6, 24, 48, 62, 126, 143, 231, 189, 61, 216, 139, 190, 31, 97, 175, 190, 221, 228, 143, 62, 13, 154, 56, 62, 240, 253, 86, 190, 130, 228, 2, 189, 73, 241, 129, 188, 162, 158, 60, 190, 41, 157, 144, 62, 25, 157, 132, 190, 219, 187, 75, 190, 78, 99, 33, 190, 33, 244, 132, 61, 118, 41, 88, 62, 156, 159, 15, 190, 3, 4, 164, 190, 230, 65, 187, 190, 9, 71, 36, 191, 251, 208, 43, 191, 76, 86, 3, 189, 148, 40, 11, 191, 87, 119, 145, 61, 186, 90, 208, 190, 7, 135, 135, 190, 130, 210, 194, 190, 51, 189, 194, 62, 177, 57, 145, 62, 146, 204, 57, 190, 67, 84, 42, 62, 33, 87, 0, 191, 216, 8, 210, 190, 224, 27, 18, 191, 37, 66, 185, 61, 107, 239, 247, 60, 56, 235, 227, 189, 30, 121, 248, 60, 108, 132, 67, 189, 137, 140, 124, 189, 84, 32, 232, 189, 209, 99, 203, 187, 117, 68, 150, 61, 125, 142, 43, 190, 118, 132, 51, 61, 129, 133, 134, 61, 133, 77, 28, 62, 168, 121, 19, 62, 214, 232, 198, 61, 157, 14, 233, 189, 33, 183, 251, 61, 127, 115, 199, 189, 87, 49, 224, 189, 173, 66, 39, 61, 180, 197, 230, 60, 162, 16, 12, 190, 153, 16, 231, 189, 49, 212, 185, 189, 113, 131, 28, 62, 196, 218, 146, 189, 175, 27, 202, 189, 206, 246, 33, 190, 255, 230, 171, 60, 36, 213, 31, 190, 43, 170, 217, 61, 108, 218, 16, 62, 80, 218, 43, 191, 49, 227, 159, 189, 121, 255, 252, 61, 110, 158, 39, 191, 94, 200, 170, 61, 71, 144, 241, 188, 217, 21, 79, 189, 217, 83, 20, 190, 131, 53, 39, 62, 242, 114, 44, 190, 132, 218, 227, 190, 201, 220, 13, 190, 139, 238, 218, 191, 152, 28, 132, 190, 45, 216, 161, 190, 112, 165, 222, 62, 138, 125, 130, 190, 171, 56, 184, 189, 180, 223, 204, 190, 241, 109, 221, 189, 182, 86, 123, 190, 37, 63, 237, 190, 159, 244, 55, 62, 72, 100, 67, 189, 253, 250, 46, 190, 28, 72, 139, 189, 211, 43, 223, 189, 30, 174, 179, 61, 120, 72, 140, 61, 38, 24, 123, 60, 168, 88, 189, 190, 98, 78, 64, 190, 27, 189, 204, 61, 178, 222, 123, 62, 84, 25, 76, 61, 25, 119, 160, 61, 47, 205, 229, 189, 105, 48, 35, 62, 172, 87, 69, 61, 93, 22, 221, 62, 146, 73, 221, 61, 132, 98, 89, 61, 31, 184, 170, 189, 115, 14, 13, 189, 154, 58, 144, 62, 125, 1, 185, 61, 250, 120, 87, 190, 2, 98, 194, 189, 240, 40, 95, 62, 25, 157, 26, 189, 185, 254, 156, 62, 247, 199, 92, 190, 253, 181, 12, 60, 128, 190, 52, 61, 131, 86, 114, 60, 249, 75, 131, 62, 143, 82, 40, 62, 208, 75, 7, 62, 32, 172, 186, 189, 192, 105, 89, 62, 64, 247, 38, 190, 150, 225, 22, 190, 7, 45, 31, 62, 36, 243, 16, 61, 9, 103, 198, 189, 88, 124, 248, 61, 158, 93, 46, 190, 235, 58, 57, 189, 108, 165, 6, 63, 45, 192, 40, 191, 148, 104, 103, 189, 114, 70, 28, 190, 1, 214, 56, 191, 219, 25, 134, 62, 183, 155, 74, 191, 38, 211, 51, 189, 29, 140, 207, 61, 97, 31, 9, 190, 101, 40, 141, 191, 33, 180, 187, 62, 111, 214, 131, 62, 104, 138, 240, 188, 26, 184, 252, 61, 33, 43, 218, 62, 18, 153, 138, 191, 225, 86, 220, 189, 248, 78, 33, 62, 166, 5, 32, 190, 122, 128, 147, 188, 220, 169, 100, 61, 138, 197, 201, 190, 210, 137, 189, 189, 39, 121, 253, 189, 138, 63, 25, 189, 6, 106, 245, 61, 28, 133, 88, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 75, 226, 188, 26, 53, 254, 61, 200, 223, 15, 62, 101, 244, 28, 190, 187, 134, 136, 62, 71, 38, 191, 189, 108, 165, 103, 61, 36, 123, 93, 59, 96, 124, 155, 61, 111, 56, 55, 62, 174, 28, 146, 62, 247, 235, 237, 189, 186, 203, 228, 185, 160, 226, 17, 62, 213, 231, 176, 62, 28, 229, 57, 190, 227, 90, 6, 190, 114, 186, 228, 61, 203, 102, 97, 61, 173, 131, 169, 62, 68, 55, 130, 189, 186, 149, 57, 62, 235, 126, 61, 190, 229, 93, 89, 190, 38, 110, 71, 62, 172, 200, 35, 62, 42, 129, 10, 61, 190, 128, 86, 61, 175, 234, 73, 190, 34, 153, 120, 60, 61, 141, 138, 62, 48, 37, 79, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 107, 138, 189, 88, 78, 246, 190, 69, 76, 189, 188, 227, 179, 96, 61, 108, 19, 25, 190, 83, 77, 7, 63, 32, 55, 66, 63, 190, 21, 48, 189, 220, 136, 170, 61, 84, 125, 10, 63, 90, 209, 152, 62, 79, 239, 32, 61, 188, 127, 179, 62, 163, 134, 140, 190, 11, 177, 0, 190, 116, 112, 22, 63, 190, 229, 162, 61, 16, 128, 79, 63, 119, 59, 147, 60, 205, 189, 133, 190, 1, 117, 43, 190, 152, 231, 133, 190, 129, 229, 6, 62, 14, 249, 102, 191, 239, 56, 35, 63, 149, 91, 174, 63, 120, 100, 115, 62, 43, 20, 253, 62, 74, 13, 53, 61, 248, 45, 131, 63, 189, 195, 140, 190, 110, 232, 12, 63, 72, 36, 188, 189, 152, 115, 50, 62, 96, 127, 147, 190, 70, 233, 163, 61, 4, 87, 80, 190, 62, 218, 149, 61, 59, 8, 35, 190, 20, 157, 2, 62, 187, 21, 37, 190, 135, 43, 213, 189, 110, 131, 7, 191, 54, 56, 199, 189, 57, 34, 125, 190, 136, 69, 196, 61, 228, 177, 118, 190, 240, 255, 145, 62, 86, 113, 248, 188, 106, 94, 217, 62, 0, 4, 133, 60, 197, 20, 145, 189, 107, 83, 69, 63, 111, 199, 227, 61, 228, 131, 86, 188, 198, 155, 90, 189, 71, 85, 15, 190, 79, 212, 182, 61, 175, 202, 76, 189, 226, 114, 243, 189, 153, 87, 66, 189, 26, 41, 184, 189, 199, 175, 139, 190, 231, 127, 236, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {124, 60, 87, 190, 247, 200, 30, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {200, 83, 151, 62, 46, 97, 134, 191, 244, 219, 160, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {202, 243, 203, 63, 10, 25, 198, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0090/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}