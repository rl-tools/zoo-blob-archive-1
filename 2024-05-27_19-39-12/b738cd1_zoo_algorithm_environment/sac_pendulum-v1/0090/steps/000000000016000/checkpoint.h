// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 42, 131, 63, 60, 104, 72, 63, 216, 28, 152, 62, 112, 224, 51, 188, 20, 135, 4, 191, 94, 241, 81, 62, 138, 168, 236, 190, 38, 54, 142, 62, 164, 8, 131, 190, 239, 239, 192, 190, 168, 87, 63, 191, 168, 191, 84, 191, 200, 147, 15, 63, 34, 77, 161, 189, 182, 150, 21, 191, 154, 64, 30, 191, 8, 12, 149, 62, 186, 143, 60, 62, 80, 6, 254, 62, 142, 64, 22, 190, 194, 181, 180, 187, 32, 210, 9, 63, 67, 237, 47, 63, 26, 115, 234, 190, 23, 114, 58, 191, 19, 40, 158, 63, 222, 45, 102, 62, 224, 218, 31, 62, 173, 104, 37, 191, 25, 181, 134, 62, 201, 73, 7, 61, 213, 120, 147, 63, 89, 95, 99, 62, 71, 73, 7, 62, 253, 235, 200, 188, 38, 242, 29, 60, 175, 160, 230, 62, 42, 147, 92, 191, 9, 66, 146, 190, 223, 210, 26, 191, 173, 80, 152, 190, 250, 22, 190, 190, 185, 236, 211, 62, 217, 48, 19, 63, 254, 181, 78, 62, 3, 103, 71, 62, 89, 170, 108, 63, 218, 34, 41, 191, 205, 26, 248, 62, 139, 50, 62, 191, 121, 9, 185, 62, 32, 231, 65, 62, 67, 60, 134, 63, 211, 132, 214, 62, 159, 72, 85, 191, 241, 69, 96, 191, 165, 26, 250, 61, 136, 89, 58, 63, 214, 111, 68, 191, 42, 123, 223, 190, 112, 181, 93, 60, 6, 150, 128, 63, 70, 37, 73, 62, 180, 235, 44, 191, 51, 67, 30, 191, 34, 179, 167, 191, 121, 139, 139, 62, 128, 72, 210, 189, 214, 152, 38, 63, 127, 166, 38, 63, 122, 145, 173, 63, 221, 149, 159, 62, 99, 192, 178, 62, 167, 134, 54, 63, 128, 194, 171, 62, 21, 234, 10, 190, 106, 133, 8, 191, 136, 218, 87, 188, 193, 55, 14, 191, 137, 90, 148, 191, 182, 106, 36, 190, 106, 192, 206, 189, 1, 132, 48, 63, 125, 108, 70, 191, 97, 65, 33, 191, 155, 78, 144, 63, 103, 250, 241, 61, 214, 254, 176, 190, 154, 193, 216, 60, 34, 228, 58, 63, 72, 100, 182, 189, 88, 41, 82, 191, 52, 210, 184, 62, 97, 205, 168, 189, 105, 62, 139, 190, 16, 237, 207, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 169, 17, 191, 142, 160, 213, 62, 251, 109, 40, 63, 21, 86, 171, 189, 213, 202, 184, 190, 197, 12, 56, 63, 220, 187, 25, 191, 181, 143, 149, 62, 98, 111, 58, 63, 229, 112, 191, 62, 185, 177, 136, 188, 85, 114, 122, 190, 162, 11, 14, 63, 243, 178, 50, 61, 196, 60, 230, 190, 137, 91, 54, 61, 65, 129, 9, 63, 7, 184, 193, 61, 186, 23, 148, 190, 220, 45, 134, 190, 185, 73, 3, 189, 138, 168, 140, 190, 13, 81, 7, 63, 4, 98, 45, 62, 108, 145, 27, 62, 42, 25, 8, 63, 71, 29, 22, 63, 138, 90, 164, 190, 189, 88, 69, 62, 191, 104, 0, 190, 157, 178, 27, 62, 84, 208, 95, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 154, 8, 62, 98, 33, 143, 61, 192, 156, 117, 189, 115, 2, 125, 61, 176, 101, 56, 190, 38, 116, 21, 190, 228, 30, 157, 189, 180, 143, 161, 188, 142, 77, 26, 189, 75, 10, 218, 188, 254, 40, 31, 62, 43, 187, 144, 61, 34, 97, 18, 62, 1, 72, 30, 61, 24, 128, 217, 187, 168, 100, 25, 188, 80, 225, 232, 189, 152, 122, 11, 62, 251, 113, 8, 189, 112, 188, 25, 62, 97, 193, 147, 188, 8, 81, 195, 189, 254, 66, 216, 188, 125, 66, 241, 188, 187, 31, 250, 189, 121, 193, 38, 190, 167, 210, 171, 189, 88, 213, 26, 60, 78, 16, 177, 189, 40, 106, 177, 60, 248, 210, 25, 190, 31, 151, 114, 60, 210, 31, 188, 61, 138, 159, 158, 190, 159, 11, 192, 62, 161, 124, 230, 61, 37, 39, 152, 189, 215, 136, 216, 62, 108, 235, 201, 189, 233, 197, 168, 62, 49, 186, 173, 62, 254, 225, 20, 191, 85, 70, 177, 62, 60, 79, 188, 61, 252, 136, 144, 62, 234, 135, 75, 62, 83, 97, 24, 191, 146, 240, 37, 190, 199, 254, 36, 191, 3, 219, 170, 61, 217, 146, 6, 63, 106, 152, 173, 190, 211, 254, 117, 62, 175, 186, 183, 62, 105, 244, 41, 191, 231, 251, 150, 62, 90, 106, 51, 62, 152, 88, 146, 189, 19, 210, 82, 62, 194, 220, 83, 62, 235, 107, 114, 187, 145, 228, 89, 191, 41, 176, 127, 61, 157, 26, 58, 190, 4, 84, 183, 190, 8, 121, 219, 61, 145, 49, 106, 188, 60, 33, 165, 61, 90, 169, 68, 189, 188, 61, 125, 189, 147, 4, 17, 62, 88, 237, 25, 62, 252, 224, 201, 61, 11, 132, 15, 62, 50, 52, 130, 190, 251, 228, 18, 62, 158, 96, 20, 62, 102, 232, 25, 190, 3, 47, 43, 191, 208, 171, 11, 62, 182, 7, 89, 62, 17, 15, 90, 191, 100, 27, 6, 190, 188, 43, 167, 188, 192, 56, 142, 190, 225, 96, 166, 61, 172, 43, 4, 190, 180, 159, 113, 62, 197, 231, 39, 190, 88, 54, 131, 187, 83, 115, 110, 189, 72, 38, 219, 189, 232, 128, 164, 62, 136, 221, 250, 188, 123, 42, 235, 187, 37, 214, 228, 61, 182, 143, 246, 189, 22, 255, 249, 188, 44, 214, 213, 61, 172, 3, 50, 62, 203, 130, 130, 185, 238, 120, 113, 61, 39, 93, 46, 62, 74, 112, 41, 190, 89, 60, 36, 61, 208, 65, 255, 60, 114, 187, 167, 61, 124, 217, 241, 61, 41, 1, 205, 189, 75, 148, 47, 190, 53, 120, 131, 60, 79, 94, 9, 189, 129, 242, 195, 189, 242, 77, 182, 189, 195, 234, 23, 62, 167, 14, 45, 62, 80, 215, 53, 189, 195, 51, 21, 190, 84, 106, 33, 190, 107, 15, 24, 190, 139, 248, 52, 189, 35, 73, 226, 189, 99, 171, 36, 190, 59, 93, 48, 190, 74, 74, 14, 190, 237, 22, 28, 62, 208, 124, 129, 61, 214, 171, 11, 190, 97, 150, 94, 62, 102, 238, 34, 62, 13, 12, 190, 61, 29, 181, 162, 61, 226, 66, 49, 190, 250, 129, 53, 62, 191, 42, 196, 188, 132, 185, 34, 62, 27, 146, 178, 61, 127, 12, 160, 62, 227, 182, 172, 189, 251, 26, 7, 188, 8, 86, 127, 62, 207, 68, 85, 62, 148, 1, 188, 61, 220, 217, 140, 60, 159, 65, 56, 62, 81, 3, 20, 190, 107, 175, 218, 62, 246, 223, 186, 59, 173, 215, 75, 190, 179, 32, 46, 61, 16, 37, 189, 61, 101, 242, 65, 62, 100, 99, 22, 61, 242, 174, 55, 62, 25, 0, 18, 189, 240, 205, 90, 62, 172, 231, 50, 190, 225, 16, 195, 189, 173, 201, 186, 59, 107, 75, 56, 62, 91, 72, 17, 191, 74, 183, 38, 188, 11, 156, 116, 62, 205, 107, 117, 62, 218, 142, 38, 62, 105, 117, 199, 190, 130, 12, 77, 189, 244, 131, 9, 62, 18, 16, 31, 190, 249, 255, 216, 62, 147, 37, 26, 191, 86, 102, 180, 188, 195, 32, 114, 62, 82, 7, 86, 189, 97, 105, 183, 189, 108, 254, 79, 62, 194, 51, 218, 62, 40, 251, 59, 191, 36, 29, 37, 191, 190, 0, 59, 62, 101, 157, 251, 190, 152, 143, 169, 62, 109, 187, 213, 190, 245, 90, 28, 191, 169, 93, 243, 190, 70, 66, 203, 188, 13, 94, 225, 189, 44, 241, 50, 62, 54, 207, 234, 61, 98, 131, 66, 191, 232, 63, 15, 63, 67, 105, 114, 191, 22, 161, 167, 189, 140, 233, 141, 190, 186, 146, 28, 62, 59, 222, 49, 191, 70, 5, 206, 189, 141, 68, 226, 62, 49, 168, 110, 61, 211, 8, 138, 190, 227, 31, 176, 62, 185, 183, 139, 190, 86, 31, 5, 188, 2, 48, 84, 61, 20, 31, 57, 192, 58, 174, 51, 188, 39, 88, 214, 61, 71, 10, 240, 62, 254, 247, 139, 190, 229, 132, 233, 188, 52, 157, 217, 189, 229, 184, 152, 61, 163, 204, 181, 59, 223, 191, 27, 191, 136, 50, 82, 62, 142, 252, 15, 190, 93, 208, 7, 190, 181, 58, 204, 189, 162, 242, 170, 189, 27, 46, 197, 61, 223, 205, 231, 62, 140, 147, 149, 62, 69, 151, 181, 190, 87, 75, 222, 189, 30, 75, 209, 188, 129, 233, 134, 189, 208, 40, 13, 62, 205, 88, 58, 186, 220, 173, 143, 61, 157, 221, 93, 188, 101, 119, 172, 189, 233, 153, 188, 189, 131, 102, 30, 189, 30, 127, 218, 61, 228, 217, 19, 190, 69, 28, 26, 188, 176, 254, 152, 189, 52, 83, 50, 190, 23, 149, 57, 61, 17, 165, 114, 189, 171, 80, 254, 188, 1, 145, 131, 61, 36, 231, 52, 190, 215, 173, 8, 189, 251, 83, 233, 189, 194, 227, 139, 189, 158, 216, 43, 189, 4, 163, 114, 60, 137, 174, 247, 59, 16, 141, 36, 189, 134, 194, 14, 190, 41, 89, 155, 189, 133, 149, 199, 61, 102, 158, 253, 189, 27, 181, 208, 189, 134, 76, 15, 62, 149, 73, 223, 60, 238, 230, 205, 189, 156, 151, 230, 189, 226, 217, 22, 190, 110, 146, 12, 59, 203, 129, 71, 188, 198, 247, 74, 61, 165, 255, 14, 190, 74, 243, 36, 190, 154, 141, 43, 62, 116, 84, 139, 60, 62, 112, 46, 190, 205, 201, 17, 59, 0, 37, 181, 189, 164, 236, 248, 61, 42, 138, 187, 188, 213, 217, 198, 189, 23, 225, 253, 61, 24, 178, 157, 188, 225, 37, 6, 189, 39, 55, 24, 61, 189, 52, 23, 190, 52, 6, 42, 190, 232, 48, 209, 188, 81, 249, 245, 60, 36, 61, 3, 62, 16, 132, 42, 190, 163, 209, 23, 61, 102, 120, 229, 187, 16, 83, 19, 61, 178, 23, 131, 189, 7, 15, 61, 61, 178, 94, 110, 191, 139, 140, 66, 60, 68, 55, 89, 188, 243, 202, 29, 190, 63, 243, 69, 63, 133, 100, 112, 188, 198, 157, 194, 189, 150, 232, 43, 61, 192, 43, 112, 60, 158, 188, 198, 60, 146, 17, 220, 190, 176, 35, 120, 61, 144, 79, 211, 61, 92, 232, 167, 189, 234, 114, 109, 191, 106, 50, 193, 62, 121, 103, 183, 62, 180, 4, 135, 189, 80, 46, 148, 190, 238, 77, 35, 63, 250, 110, 192, 190, 26, 197, 15, 191, 131, 129, 84, 62, 201, 139, 171, 190, 10, 149, 157, 190, 34, 92, 199, 61, 108, 177, 91, 189, 207, 45, 40, 188, 194, 148, 230, 62, 123, 172, 216, 61, 197, 111, 213, 189, 95, 11, 203, 189, 227, 143, 230, 190, 206, 13, 39, 62, 2, 113, 123, 188, 238, 252, 88, 190, 67, 237, 65, 60, 111, 79, 220, 58, 45, 32, 10, 190, 202, 97, 86, 62, 172, 231, 79, 189, 189, 220, 236, 61, 177, 16, 205, 191, 93, 53, 97, 189, 248, 163, 92, 62, 129, 11, 4, 190, 200, 108, 215, 191, 40, 26, 4, 62, 183, 201, 208, 61, 147, 203, 63, 190, 21, 123, 36, 190, 225, 90, 31, 62, 55, 208, 35, 191, 95, 156, 219, 189, 124, 70, 7, 62, 118, 115, 159, 187, 44, 39, 46, 190, 218, 49, 143, 62, 70, 204, 62, 190, 57, 17, 193, 61, 101, 126, 136, 62, 81, 155, 58, 62, 113, 69, 194, 61, 96, 80, 135, 189, 69, 5, 1, 190, 127, 149, 41, 190, 26, 43, 219, 61, 128, 3, 205, 189, 218, 118, 23, 62, 210, 135, 241, 189, 212, 140, 219, 189, 131, 132, 104, 189, 174, 114, 14, 190, 252, 58, 212, 61, 97, 28, 136, 188, 201, 124, 169, 189, 242, 26, 8, 189, 204, 7, 44, 190, 89, 148, 154, 61, 148, 64, 135, 188, 165, 121, 130, 189, 80, 61, 187, 189, 200, 211, 75, 189, 63, 175, 123, 189, 196, 231, 30, 190, 4, 132, 6, 189, 33, 103, 234, 189, 149, 56, 93, 61, 100, 46, 48, 190, 62, 200, 125, 61, 55, 193, 1, 190, 65, 82, 213, 61, 18, 181, 233, 189, 245, 179, 184, 189, 71, 64, 183, 189, 197, 251, 33, 62, 40, 173, 20, 60, 121, 74, 77, 62, 187, 85, 151, 61, 26, 206, 129, 189, 27, 45, 142, 62, 111, 67, 234, 190, 162, 92, 10, 61, 136, 246, 125, 62, 213, 222, 109, 191, 167, 148, 172, 62, 248, 248, 226, 191, 237, 21, 16, 189, 86, 169, 166, 61, 138, 83, 7, 60, 227, 166, 164, 191, 234, 124, 166, 61, 104, 45, 185, 62, 174, 43, 139, 190, 241, 164, 39, 190, 132, 153, 141, 62, 118, 46, 187, 191, 12, 70, 184, 61, 236, 242, 46, 62, 65, 38, 30, 61, 232, 66, 97, 190, 50, 60, 131, 189, 73, 34, 65, 190, 199, 19, 67, 189, 0, 205, 154, 190, 47, 176, 12, 190, 234, 1, 90, 62, 39, 249, 122, 190, 125, 102, 100, 62, 239, 142, 49, 62, 94, 129, 72, 62, 182, 162, 192, 61, 71, 22, 161, 188, 33, 32, 235, 61, 204, 188, 150, 60, 182, 234, 151, 62, 148, 212, 147, 62, 83, 187, 24, 62, 241, 243, 167, 62, 14, 126, 4, 61, 197, 238, 49, 62, 14, 233, 99, 62, 92, 31, 7, 62, 191, 253, 17, 189, 36, 159, 202, 189, 77, 1, 42, 62, 126, 51, 173, 62, 153, 0, 60, 190, 246, 107, 247, 61, 251, 158, 239, 59, 195, 152, 131, 190, 193, 224, 80, 62, 67, 224, 38, 62, 103, 120, 132, 189, 142, 40, 96, 62, 240, 244, 25, 61, 85, 28, 94, 190, 116, 86, 232, 190, 245, 12, 57, 62, 28, 16, 164, 189, 229, 189, 47, 62, 75, 179, 128, 62, 235, 207, 235, 61, 245, 81, 57, 189, 78, 111, 239, 60, 148, 22, 146, 189, 90, 15, 45, 62, 54, 213, 218, 62, 32, 166, 93, 61, 195, 21, 242, 188, 61, 243, 40, 61, 26, 134, 35, 62, 164, 72, 211, 62, 78, 195, 180, 61, 42, 240, 39, 190, 212, 15, 70, 189, 254, 153, 130, 60, 108, 112, 74, 189, 107, 4, 10, 61, 207, 164, 89, 189, 186, 49, 200, 189, 122, 212, 15, 190, 100, 86, 36, 62, 15, 70, 167, 62, 156, 226, 150, 60, 67, 168, 152, 61, 165, 29, 213, 189, 145, 0, 104, 62, 243, 130, 86, 61, 110, 190, 60, 190, 108, 180, 142, 62, 82, 133, 127, 61, 68, 24, 184, 190, 29, 25, 199, 62, 33, 80, 152, 189, 20, 203, 123, 61, 168, 26, 166, 62, 36, 106, 66, 191, 204, 214, 9, 190, 83, 83, 125, 62, 188, 14, 182, 191, 180, 225, 192, 62, 208, 155, 132, 191, 232, 244, 48, 62, 79, 67, 191, 61, 74, 227, 10, 61, 158, 12, 115, 191, 130, 40, 227, 61, 131, 230, 3, 63, 198, 239, 163, 189, 39, 104, 57, 190, 200, 217, 174, 62, 15, 29, 115, 191, 177, 89, 27, 190, 221, 56, 152, 61, 197, 113, 112, 190, 28, 218, 109, 190, 114, 241, 187, 189, 65, 208, 113, 190, 106, 120, 14, 190, 35, 195, 152, 190, 54, 33, 204, 189, 106, 116, 19, 190, 120, 57, 49, 62, 120, 243, 38, 190, 116, 158, 18, 190, 47, 27, 24, 62, 208, 127, 56, 190, 194, 197, 76, 189, 153, 115, 40, 190, 232, 117, 173, 60, 182, 83, 39, 190, 189, 33, 134, 188, 53, 27, 64, 190, 186, 161, 114, 188, 162, 72, 41, 190, 202, 185, 185, 61, 109, 249, 190, 61, 74, 105, 238, 189, 75, 124, 160, 60, 162, 129, 186, 189, 199, 200, 198, 189, 59, 95, 139, 189, 193, 24, 253, 61, 139, 125, 55, 189, 253, 249, 15, 62, 221, 204, 39, 190, 32, 175, 122, 61, 204, 45, 202, 189, 189, 208, 41, 60, 139, 87, 14, 190, 104, 118, 54, 190, 193, 33, 59, 61, 255, 237, 89, 61, 73, 80, 180, 61, 134, 162, 5, 62, 21, 225, 21, 191, 178, 34, 199, 61, 117, 244, 45, 189, 161, 163, 131, 191, 63, 158, 187, 62, 63, 198, 150, 62, 214, 62, 199, 60, 165, 206, 105, 191, 70, 179, 221, 62, 36, 15, 94, 61, 48, 30, 41, 190, 201, 65, 206, 61, 22, 195, 53, 191, 40, 65, 204, 190, 231, 162, 183, 190, 35, 101, 91, 190, 2, 185, 159, 61, 48, 171, 222, 189, 22, 64, 60, 190, 234, 29, 64, 61, 38, 49, 7, 190, 101, 13, 133, 191, 151, 240, 12, 62, 169, 153, 78, 190, 75, 221, 80, 190, 241, 95, 164, 61, 22, 70, 91, 62, 42, 83, 16, 191, 207, 234, 171, 62, 156, 178, 170, 62, 151, 31, 51, 190, 77, 230, 223, 189, 238, 131, 153, 189, 72, 146, 244, 189, 53, 12, 98, 189, 122, 78, 54, 190, 49, 59, 207, 189, 99, 73, 78, 61, 111, 155, 90, 61, 131, 212, 107, 60, 216, 159, 211, 189, 141, 182, 16, 190, 199, 88, 75, 187, 84, 159, 50, 190, 198, 75, 230, 189, 121, 163, 160, 189, 241, 238, 226, 188, 143, 227, 139, 60, 90, 52, 65, 189, 118, 177, 178, 189, 1, 14, 176, 61, 75, 192, 83, 190, 4, 119, 164, 61, 148, 181, 19, 62, 22, 174, 34, 62, 165, 209, 21, 190, 215, 9, 1, 62, 164, 143, 2, 62, 121, 158, 245, 189, 88, 81, 83, 189, 211, 10, 2, 190, 177, 75, 34, 190, 156, 23, 255, 189, 97, 238, 42, 189, 99, 157, 25, 188, 93, 235, 128, 188, 109, 236, 149, 62, 26, 49, 129, 62, 112, 56, 223, 189, 131, 103, 159, 62, 114, 138, 160, 61, 116, 122, 208, 61, 211, 87, 123, 61, 162, 46, 19, 188, 136, 49, 95, 61, 160, 146, 32, 62, 57, 232, 203, 62, 174, 234, 133, 189, 177, 179, 233, 190, 178, 213, 131, 190, 108, 56, 145, 189, 39, 218, 35, 190, 14, 26, 189, 62, 117, 227, 155, 189, 172, 222, 79, 60, 246, 200, 22, 62, 110, 155, 197, 189, 63, 7, 106, 62, 103, 13, 45, 62, 252, 110, 30, 62, 156, 36, 184, 60, 73, 228, 54, 62, 79, 137, 142, 189, 105, 180, 215, 190, 196, 165, 189, 188, 2, 92, 0, 188, 254, 143, 31, 191, 250, 248, 224, 189, 107, 110, 190, 189, 86, 236, 128, 190, 192, 66, 145, 61, 192, 41, 95, 189, 231, 24, 49, 190, 167, 217, 108, 190, 99, 120, 70, 190, 229, 179, 127, 61, 178, 22, 92, 190, 98, 196, 17, 190, 224, 97, 198, 60, 55, 192, 214, 61, 33, 78, 182, 190, 231, 128, 9, 190, 53, 146, 27, 62, 201, 135, 183, 190, 14, 192, 220, 62, 68, 98, 54, 61, 178, 240, 203, 189, 14, 59, 134, 190, 132, 0, 205, 61, 183, 94, 41, 191, 164, 85, 155, 190, 170, 251, 110, 62, 27, 255, 155, 61, 90, 230, 60, 60, 134, 140, 201, 190, 205, 35, 49, 190, 200, 199, 131, 62, 97, 37, 194, 61, 50, 108, 82, 63, 96, 172, 105, 189, 4, 132, 143, 61, 28, 224, 96, 62, 9, 64, 52, 190, 155, 230, 29, 190, 217, 0, 219, 189, 52, 67, 123, 62, 83, 41, 101, 60, 27, 64, 188, 189, 150, 231, 163, 62, 26, 94, 242, 60, 95, 7, 123, 62, 125, 35, 209, 60, 187, 169, 8, 63, 141, 217, 167, 190, 41, 160, 11, 62, 128, 21, 2, 62, 123, 113, 186, 62, 108, 29, 224, 189, 4, 182, 31, 191, 48, 25, 174, 54, 12, 33, 179, 190, 174, 40, 180, 62, 29, 36, 151, 62, 78, 31, 83, 62, 77, 247, 131, 59, 25, 253, 106, 62, 178, 219, 37, 191, 212, 215, 160, 190, 205, 207, 221, 62, 190, 116, 151, 61, 108, 88, 96, 61, 135, 204, 141, 189, 119, 71, 41, 190, 196, 233, 46, 190, 109, 161, 52, 188, 205, 162, 100, 189, 149, 190, 12, 62, 32, 203, 136, 189, 57, 114, 207, 189, 46, 218, 52, 190, 212, 39, 145, 189, 197, 11, 216, 186, 10, 213, 0, 190, 182, 113, 141, 61, 78, 183, 85, 61, 71, 161, 250, 61, 52, 118, 49, 190, 91, 216, 141, 61, 43, 232, 247, 61, 246, 70, 2, 62, 114, 197, 82, 189, 165, 180, 29, 190, 196, 240, 220, 189, 205, 189, 132, 189, 254, 248, 215, 188, 77, 226, 198, 61, 167, 155, 0, 61, 4, 83, 23, 190, 142, 188, 8, 60, 150, 215, 11, 62, 9, 30, 56, 60, 68, 196, 148, 188, 134, 0, 50, 63, 219, 145, 185, 61, 105, 7, 62, 191, 148, 90, 0, 190, 52, 30, 193, 190, 14, 101, 130, 190, 169, 85, 250, 189, 92, 251, 20, 190, 16, 174, 72, 190, 79, 205, 11, 61, 155, 35, 114, 190, 72, 103, 139, 60, 145, 126, 171, 189, 235, 90, 45, 60, 111, 187, 252, 62, 141, 184, 243, 190, 128, 204, 182, 61, 29, 235, 37, 62, 172, 60, 125, 188, 111, 223, 166, 190, 113, 248, 85, 190, 73, 220, 182, 61, 230, 25, 43, 61, 5, 191, 125, 62, 8, 168, 81, 62, 4, 0, 213, 190, 69, 140, 122, 191, 104, 12, 1, 190, 109, 16, 249, 190, 233, 18, 233, 61, 45, 233, 93, 61, 12, 192, 213, 61, 148, 87, 9, 191, 216, 3, 170, 189, 66, 186, 130, 190, 233, 167, 65, 191, 156, 170, 1, 62, 150, 136, 9, 62, 122, 103, 111, 189, 38, 81, 13, 191, 165, 144, 155, 61, 123, 86, 201, 61, 50, 231, 23, 191, 231, 74, 237, 61, 196, 240, 142, 189, 24, 13, 182, 189, 87, 132, 131, 191, 3, 227, 245, 189, 240, 186, 94, 62, 207, 4, 133, 190, 2, 44, 31, 189, 83, 34, 133, 62, 217, 143, 159, 190, 206, 95, 28, 191, 87, 113, 43, 62, 42, 207, 15, 190, 253, 30, 175, 189, 92, 113, 165, 61, 33, 229, 128, 62, 46, 242, 54, 191, 86, 78, 43, 62, 146, 136, 64, 62, 38, 35, 120, 190, 47, 42, 65, 190, 123, 65, 70, 62, 85, 78, 245, 190, 86, 19, 137, 62, 115, 152, 60, 191, 75, 228, 77, 190, 33, 243, 154, 62, 147, 45, 25, 62, 202, 109, 243, 61, 134, 30, 185, 62, 72, 82, 122, 190, 224, 228, 100, 62, 233, 103, 28, 62, 53, 205, 220, 191, 212, 46, 10, 62, 159, 208, 176, 62, 237, 58, 113, 63, 172, 231, 98, 190, 22, 86, 16, 191, 160, 250, 193, 190, 104, 106, 154, 190, 8, 35, 13, 191, 118, 255, 111, 191, 133, 219, 22, 62, 64, 1, 184, 190, 192, 93, 210, 190, 106, 99, 142, 190, 81, 206, 158, 60, 140, 21, 50, 62, 99, 203, 227, 62, 148, 222, 153, 189, 155, 56, 19, 191, 97, 27, 12, 191, 167, 1, 242, 190, 108, 108, 208, 62, 97, 34, 134, 61, 156, 21, 14, 62, 225, 90, 30, 189, 115, 92, 160, 190, 205, 69, 147, 189, 136, 67, 70, 62, 205, 90, 235, 190, 165, 207, 144, 62, 82, 200, 91, 191, 32, 240, 127, 189, 175, 183, 171, 188, 114, 204, 150, 61, 248, 189, 116, 191, 205, 68, 137, 61, 35, 174, 173, 62, 93, 232, 181, 61, 39, 240, 8, 59, 223, 181, 143, 62, 125, 81, 137, 191, 35, 7, 36, 62, 12, 224, 8, 62, 205, 127, 156, 190, 56, 14, 96, 190, 129, 243, 74, 62, 36, 81, 144, 189, 163, 224, 146, 61, 143, 114, 52, 61, 123, 211, 165, 190, 205, 157, 54, 62, 35, 177, 234, 189, 61, 216, 139, 190, 99, 45, 163, 190, 176, 206, 141, 62, 143, 78, 55, 62, 186, 172, 95, 190, 118, 204, 161, 187, 73, 241, 129, 188, 240, 211, 88, 190, 110, 61, 134, 62, 183, 144, 126, 190, 198, 50, 235, 189, 78, 99, 33, 190, 69, 33, 153, 61, 164, 248, 87, 62, 156, 159, 15, 190, 80, 68, 174, 190, 184, 144, 182, 190, 77, 164, 6, 191, 134, 178, 14, 191, 11, 88, 161, 188, 15, 170, 234, 190, 250, 214, 135, 61, 19, 108, 147, 190, 108, 157, 79, 190, 36, 90, 149, 190, 220, 248, 206, 62, 200, 82, 155, 62, 12, 38, 77, 190, 203, 67, 46, 62, 160, 142, 231, 190, 5, 87, 166, 190, 96, 98, 235, 190, 37, 66, 185, 61, 107, 239, 247, 60, 56, 235, 227, 189, 30, 121, 248, 60, 108, 132, 67, 189, 137, 140, 124, 189, 84, 32, 232, 189, 209, 99, 203, 187, 117, 68, 150, 61, 125, 142, 43, 190, 118, 132, 51, 61, 129, 133, 134, 61, 133, 77, 28, 62, 168, 121, 19, 62, 214, 232, 198, 61, 157, 14, 233, 189, 33, 183, 251, 61, 127, 115, 199, 189, 87, 49, 224, 189, 173, 66, 39, 61, 180, 197, 230, 60, 162, 16, 12, 190, 153, 16, 231, 189, 49, 212, 185, 189, 113, 131, 28, 62, 196, 218, 146, 189, 175, 27, 202, 189, 206, 246, 33, 190, 255, 230, 171, 60, 36, 213, 31, 190, 43, 170, 217, 61, 108, 218, 16, 62, 220, 40, 28, 191, 70, 105, 18, 189, 177, 235, 99, 62, 255, 74, 31, 191, 173, 246, 182, 61, 197, 134, 174, 61, 217, 21, 79, 189, 63, 97, 134, 189, 196, 13, 141, 62, 190, 71, 35, 190, 53, 0, 175, 190, 201, 220, 13, 190, 6, 98, 219, 191, 253, 84, 74, 190, 221, 121, 132, 190, 89, 57, 2, 63, 222, 6, 98, 190, 250, 217, 207, 59, 11, 30, 202, 190, 11, 112, 221, 189, 103, 223, 18, 190, 125, 176, 217, 190, 175, 45, 125, 62, 162, 121, 56, 61, 174, 72, 167, 189, 167, 71, 131, 60, 49, 73, 163, 189, 174, 104, 19, 62, 84, 86, 52, 62, 211, 35, 100, 61, 56, 111, 184, 190, 95, 205, 17, 190, 139, 162, 16, 62, 238, 255, 132, 62, 27, 83, 36, 61, 39, 248, 178, 61, 158, 116, 11, 190, 90, 139, 32, 62, 172, 87, 69, 61, 137, 49, 221, 62, 60, 1, 174, 61, 129, 238, 148, 61, 193, 241, 225, 189, 115, 14, 13, 189, 99, 80, 149, 62, 79, 115, 217, 61, 24, 47, 72, 190, 40, 174, 222, 189, 245, 45, 116, 62, 56, 216, 190, 188, 51, 245, 143, 62, 180, 217, 116, 190, 216, 182, 163, 187, 100, 33, 97, 61, 161, 52, 4, 61, 233, 239, 137, 62, 52, 75, 69, 62, 88, 22, 7, 62, 6, 106, 231, 189, 169, 95, 97, 62, 246, 200, 51, 190, 100, 96, 28, 190, 149, 206, 27, 62, 52, 156, 76, 61, 22, 137, 4, 190, 53, 30, 212, 61, 242, 93, 41, 190, 77, 44, 28, 189, 163, 107, 12, 63, 96, 145, 49, 191, 148, 104, 103, 189, 147, 154, 24, 190, 146, 95, 63, 191, 251, 66, 118, 62, 106, 96, 85, 191, 38, 211, 51, 189, 37, 156, 195, 61, 199, 83, 255, 189, 252, 97, 141, 191, 210, 198, 194, 62, 138, 172, 114, 62, 223, 112, 147, 189, 171, 248, 36, 62, 56, 87, 227, 62, 168, 175, 148, 191, 28, 124, 201, 189, 80, 173, 10, 62, 221, 176, 50, 190, 194, 101, 97, 189, 199, 43, 75, 61, 40, 153, 198, 190, 10, 84, 170, 189, 198, 254, 1, 190, 167, 15, 88, 189, 45, 149, 219, 61, 252, 62, 163, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 75, 226, 188, 133, 44, 220, 61, 70, 216, 38, 62, 101, 244, 28, 190, 18, 88, 142, 62, 82, 109, 178, 189, 160, 111, 22, 62, 36, 123, 93, 59, 96, 124, 155, 61, 10, 110, 50, 62, 185, 178, 144, 62, 247, 235, 237, 189, 38, 47, 19, 188, 203, 143, 21, 62, 123, 236, 184, 62, 249, 151, 54, 190, 227, 90, 6, 190, 167, 253, 8, 62, 203, 102, 97, 61, 185, 63, 171, 62, 39, 201, 181, 188, 64, 36, 70, 62, 235, 126, 61, 190, 9, 78, 89, 190, 47, 75, 75, 62, 51, 89, 140, 62, 76, 15, 193, 60, 7, 80, 131, 61, 175, 234, 73, 190, 218, 96, 252, 61, 144, 254, 141, 62, 79, 30, 35, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 107, 138, 189, 80, 197, 241, 190, 163, 92, 55, 186, 227, 179, 96, 61, 229, 31, 47, 190, 197, 18, 7, 63, 157, 52, 94, 63, 190, 21, 48, 189, 220, 136, 170, 61, 159, 249, 26, 63, 2, 186, 169, 62, 79, 239, 32, 61, 177, 216, 193, 62, 84, 79, 144, 190, 98, 237, 17, 190, 227, 19, 27, 63, 190, 229, 162, 61, 205, 214, 95, 63, 119, 59, 147, 60, 8, 33, 140, 190, 177, 145, 11, 190, 0, 223, 151, 190, 129, 229, 6, 62, 54, 224, 104, 191, 234, 21, 49, 63, 49, 158, 185, 63, 31, 114, 134, 62, 29, 246, 8, 63, 74, 13, 53, 61, 29, 103, 138, 63, 140, 93, 152, 190, 10, 91, 26, 63, 72, 36, 188, 189, 120, 38, 24, 62, 71, 223, 106, 190, 70, 233, 163, 61, 28, 12, 91, 190, 235, 69, 163, 61, 144, 215, 48, 190, 20, 157, 2, 62, 187, 21, 37, 190, 138, 126, 133, 188, 39, 54, 7, 191, 54, 56, 199, 189, 65, 226, 129, 190, 231, 84, 175, 61, 159, 56, 121, 190, 139, 232, 71, 62, 86, 113, 248, 188, 174, 95, 220, 62, 0, 4, 133, 60, 33, 124, 188, 189, 186, 26, 79, 63, 40, 12, 196, 61, 228, 131, 86, 188, 67, 176, 36, 59, 21, 190, 94, 189, 9, 88, 6, 62, 144, 188, 158, 189, 211, 185, 159, 189, 153, 87, 66, 189, 188, 150, 157, 189, 119, 170, 149, 190, 65, 105, 27, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 53, 86, 190, 13, 21, 41, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {228, 83, 209, 63, 248, 155, 247, 191, 56, 233, 119, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {77, 143, 233, 64, 54, 225, 9, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0090/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}