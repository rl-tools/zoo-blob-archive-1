// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 146, 81, 63, 92, 58, 52, 63, 30, 87, 165, 62, 127, 194, 154, 62, 211, 81, 133, 190, 102, 176, 184, 62, 234, 87, 223, 190, 57, 188, 13, 63, 42, 116, 192, 190, 65, 110, 148, 190, 89, 25, 206, 62, 254, 185, 138, 191, 249, 186, 184, 62, 214, 122, 65, 61, 114, 78, 28, 191, 183, 177, 37, 190, 235, 35, 232, 62, 235, 113, 221, 61, 80, 6, 254, 62, 142, 64, 22, 190, 194, 181, 180, 187, 148, 23, 177, 62, 179, 0, 58, 63, 220, 169, 18, 191, 120, 153, 183, 190, 63, 172, 118, 63, 37, 27, 207, 61, 46, 22, 94, 62, 115, 200, 12, 191, 91, 206, 88, 61, 190, 26, 227, 61, 246, 20, 92, 63, 255, 194, 93, 189, 71, 73, 7, 62, 253, 235, 200, 188, 38, 242, 29, 60, 87, 255, 191, 62, 19, 134, 71, 188, 62, 235, 190, 190, 167, 28, 8, 191, 178, 133, 225, 189, 121, 156, 225, 190, 103, 68, 71, 62, 116, 203, 142, 62, 1, 172, 160, 61, 254, 251, 66, 62, 80, 150, 56, 63, 166, 43, 47, 191, 253, 181, 2, 63, 43, 36, 44, 191, 40, 183, 248, 61, 37, 176, 10, 62, 152, 93, 172, 62, 117, 232, 17, 63, 52, 79, 20, 191, 138, 102, 133, 191, 24, 249, 161, 61, 119, 78, 255, 62, 43, 117, 11, 191, 29, 79, 2, 191, 88, 125, 170, 61, 16, 109, 235, 62, 211, 216, 59, 62, 51, 94, 38, 191, 145, 140, 2, 63, 228, 245, 188, 191, 249, 134, 190, 62, 231, 55, 93, 190, 255, 25, 27, 63, 222, 124, 49, 63, 66, 157, 122, 63, 64, 16, 147, 62, 191, 227, 188, 62, 233, 70, 196, 62, 125, 38, 200, 62, 157, 207, 235, 60, 64, 161, 22, 191, 192, 207, 239, 187, 111, 55, 37, 191, 9, 218, 56, 191, 228, 203, 185, 189, 218, 13, 207, 189, 133, 206, 91, 63, 209, 142, 88, 191, 76, 216, 219, 190, 166, 179, 84, 63, 66, 29, 72, 187, 126, 117, 55, 190, 28, 126, 209, 190, 219, 109, 57, 63, 218, 77, 185, 61, 210, 7, 56, 191, 24, 95, 205, 62, 156, 242, 90, 61, 167, 175, 173, 190, 67, 138, 237, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {54, 184, 6, 191, 5, 32, 90, 62, 200, 57, 235, 62, 162, 46, 150, 189, 65, 63, 182, 190, 177, 149, 58, 63, 220, 187, 25, 191, 6, 27, 214, 62, 55, 188, 85, 63, 8, 211, 187, 62, 1, 215, 60, 189, 85, 114, 122, 190, 61, 55, 235, 62, 85, 252, 8, 62, 47, 138, 166, 190, 162, 11, 96, 189, 107, 101, 7, 63, 154, 192, 70, 190, 228, 216, 33, 190, 48, 247, 86, 190, 13, 238, 153, 190, 253, 10, 171, 190, 71, 35, 37, 63, 213, 107, 156, 61, 241, 51, 30, 189, 214, 171, 33, 63, 99, 235, 21, 63, 75, 133, 231, 59, 109, 130, 47, 61, 227, 241, 201, 60, 45, 235, 29, 62, 12, 152, 12, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 112, 10, 62, 2, 237, 147, 61, 67, 132, 108, 189, 100, 176, 130, 61, 189, 28, 52, 190, 38, 116, 21, 190, 228, 30, 157, 189, 180, 184, 68, 188, 142, 77, 26, 189, 223, 52, 191, 188, 254, 40, 31, 62, 43, 187, 144, 61, 186, 16, 28, 62, 1, 72, 30, 61, 24, 128, 217, 187, 14, 219, 222, 187, 170, 214, 218, 189, 152, 122, 11, 62, 251, 113, 8, 189, 180, 144, 32, 62, 97, 193, 147, 188, 115, 213, 197, 189, 248, 123, 182, 188, 238, 233, 198, 188, 142, 193, 245, 189, 105, 75, 34, 190, 203, 63, 171, 189, 64, 115, 50, 60, 78, 16, 177, 189, 40, 106, 177, 60, 240, 239, 25, 190, 31, 151, 114, 60, 103, 206, 97, 62, 194, 138, 30, 62, 14, 11, 172, 62, 117, 200, 235, 61, 160, 139, 183, 189, 81, 135, 155, 62, 108, 235, 201, 189, 29, 170, 168, 62, 24, 168, 138, 62, 236, 137, 236, 189, 138, 130, 55, 62, 60, 79, 188, 61, 152, 27, 174, 62, 198, 48, 68, 62, 196, 204, 132, 190, 6, 165, 87, 190, 77, 77, 138, 190, 188, 147, 50, 62, 184, 44, 46, 62, 226, 1, 132, 190, 210, 101, 68, 62, 248, 51, 188, 62, 65, 222, 187, 190, 39, 27, 73, 62, 141, 151, 160, 62, 173, 234, 243, 188, 211, 33, 226, 61, 140, 136, 63, 62, 90, 220, 248, 61, 228, 201, 25, 191, 11, 240, 153, 62, 201, 102, 25, 61, 7, 159, 170, 190, 75, 40, 17, 189, 246, 131, 174, 60, 18, 223, 27, 62, 158, 175, 110, 189, 133, 191, 199, 61, 147, 4, 17, 62, 37, 255, 26, 62, 6, 12, 147, 61, 64, 205, 79, 61, 117, 193, 130, 190, 251, 228, 18, 62, 50, 134, 103, 62, 145, 22, 112, 189, 142, 110, 147, 61, 93, 2, 251, 61, 111, 78, 109, 62, 97, 39, 126, 190, 73, 254, 71, 189, 132, 124, 156, 186, 155, 140, 22, 190, 211, 41, 246, 61, 0, 235, 240, 188, 47, 152, 151, 61, 50, 167, 118, 61, 0, 55, 34, 62, 159, 40, 247, 61, 136, 54, 217, 189, 53, 130, 64, 188, 201, 116, 50, 62, 183, 115, 51, 190, 38, 42, 216, 60, 182, 143, 246, 189, 22, 255, 249, 188, 44, 214, 213, 61, 172, 3, 50, 62, 203, 130, 130, 185, 238, 120, 113, 61, 39, 93, 46, 62, 74, 112, 41, 190, 89, 60, 36, 61, 208, 65, 255, 60, 114, 187, 167, 61, 124, 217, 241, 61, 41, 1, 205, 189, 75, 148, 47, 190, 53, 120, 131, 60, 79, 94, 9, 189, 129, 242, 195, 189, 242, 77, 182, 189, 195, 234, 23, 62, 167, 14, 45, 62, 80, 215, 53, 189, 195, 51, 21, 190, 84, 106, 33, 190, 107, 15, 24, 190, 139, 248, 52, 189, 35, 73, 226, 189, 99, 171, 36, 190, 59, 93, 48, 190, 74, 74, 14, 190, 237, 22, 28, 62, 208, 124, 129, 61, 214, 171, 11, 190, 174, 224, 141, 61, 154, 125, 210, 60, 115, 85, 187, 61, 97, 147, 203, 61, 165, 53, 90, 190, 189, 46, 117, 62, 191, 42, 196, 188, 25, 156, 38, 62, 83, 159, 182, 61, 3, 128, 51, 62, 68, 112, 35, 188, 251, 26, 7, 188, 221, 38, 88, 62, 159, 212, 126, 62, 254, 222, 182, 61, 186, 90, 88, 188, 64, 78, 163, 61, 233, 246, 49, 189, 171, 74, 178, 62, 212, 43, 36, 187, 253, 41, 0, 190, 184, 202, 87, 61, 88, 61, 225, 59, 233, 172, 71, 61, 102, 235, 91, 61, 11, 207, 244, 61, 225, 217, 1, 185, 242, 209, 50, 62, 254, 154, 38, 190, 37, 224, 149, 189, 63, 126, 189, 189, 184, 223, 28, 62, 107, 42, 157, 190, 23, 65, 172, 189, 45, 206, 143, 62, 212, 182, 134, 62, 245, 169, 100, 62, 36, 212, 139, 189, 130, 12, 77, 189, 19, 72, 79, 62, 6, 30, 90, 62, 143, 171, 211, 60, 201, 142, 62, 61, 86, 102, 180, 188, 135, 191, 84, 62, 250, 223, 139, 189, 136, 142, 12, 61, 92, 131, 147, 62, 240, 172, 224, 186, 238, 151, 1, 62, 197, 48, 13, 191, 124, 15, 52, 62, 127, 82, 150, 62, 63, 241, 182, 62, 246, 5, 142, 190, 23, 152, 131, 188, 177, 107, 63, 190, 164, 155, 243, 189, 100, 100, 35, 190, 144, 204, 108, 62, 101, 111, 143, 62, 221, 27, 42, 190, 142, 253, 88, 61, 88, 137, 190, 190, 227, 66, 53, 190, 250, 78, 144, 190, 162, 211, 136, 61, 184, 69, 68, 191, 173, 164, 207, 60, 138, 230, 165, 62, 49, 168, 110, 61, 48, 173, 42, 191, 252, 6, 73, 62, 8, 49, 19, 190, 167, 182, 25, 190, 2, 48, 84, 61, 191, 219, 111, 191, 179, 241, 43, 189, 41, 224, 116, 61, 22, 6, 197, 60, 17, 52, 99, 190, 54, 52, 189, 188, 25, 183, 109, 62, 229, 184, 152, 61, 236, 99, 216, 58, 102, 158, 112, 191, 67, 51, 71, 62, 50, 233, 30, 190, 158, 83, 251, 189, 46, 199, 179, 60, 27, 21, 252, 188, 163, 158, 150, 190, 143, 63, 111, 62, 179, 233, 133, 62, 187, 167, 172, 190, 39, 223, 12, 190, 30, 75, 209, 188, 129, 233, 134, 189, 208, 40, 13, 62, 205, 88, 58, 186, 220, 173, 143, 61, 157, 221, 93, 188, 101, 119, 172, 189, 233, 153, 188, 189, 131, 102, 30, 189, 30, 127, 218, 61, 228, 217, 19, 190, 69, 28, 26, 188, 176, 254, 152, 189, 52, 83, 50, 190, 23, 149, 57, 61, 17, 165, 114, 189, 171, 80, 254, 188, 1, 145, 131, 61, 36, 231, 52, 190, 215, 173, 8, 189, 251, 83, 233, 189, 194, 227, 139, 189, 158, 216, 43, 189, 4, 163, 114, 60, 137, 174, 247, 59, 16, 141, 36, 189, 134, 194, 14, 190, 41, 89, 155, 189, 133, 149, 199, 61, 102, 158, 253, 189, 27, 181, 208, 189, 134, 76, 15, 62, 149, 73, 223, 60, 238, 230, 205, 189, 156, 151, 230, 189, 226, 217, 22, 190, 110, 146, 12, 59, 203, 129, 71, 188, 198, 247, 74, 61, 165, 255, 14, 190, 74, 243, 36, 190, 154, 141, 43, 62, 116, 84, 139, 60, 62, 112, 46, 190, 205, 201, 17, 59, 0, 37, 181, 189, 164, 236, 248, 61, 42, 138, 187, 188, 213, 217, 198, 189, 23, 225, 253, 61, 24, 178, 157, 188, 225, 37, 6, 189, 39, 55, 24, 61, 189, 52, 23, 190, 52, 6, 42, 190, 232, 48, 209, 188, 81, 249, 245, 60, 36, 61, 3, 62, 16, 132, 42, 190, 163, 209, 23, 61, 102, 120, 229, 187, 16, 83, 19, 61, 178, 23, 131, 189, 7, 15, 61, 61, 188, 232, 30, 191, 149, 29, 13, 60, 33, 205, 150, 189, 213, 168, 106, 190, 97, 49, 62, 63, 200, 94, 242, 188, 198, 157, 194, 189, 176, 127, 136, 60, 211, 197, 20, 61, 76, 89, 6, 62, 52, 74, 143, 189, 176, 35, 120, 61, 55, 55, 39, 62, 185, 13, 178, 189, 212, 108, 186, 189, 180, 49, 186, 62, 230, 187, 220, 62, 99, 27, 81, 189, 203, 143, 74, 190, 87, 59, 9, 63, 114, 172, 12, 190, 131, 121, 38, 191, 64, 94, 141, 62, 157, 165, 138, 189, 249, 173, 115, 190, 132, 71, 92, 62, 161, 217, 176, 188, 115, 138, 18, 189, 139, 139, 19, 62, 108, 220, 173, 61, 135, 166, 135, 189, 27, 48, 204, 189, 243, 141, 167, 190, 146, 7, 176, 61, 153, 192, 97, 60, 177, 186, 104, 190, 159, 77, 181, 61, 180, 1, 167, 189, 45, 32, 10, 190, 27, 134, 17, 62, 156, 101, 146, 188, 0, 169, 208, 61, 248, 142, 27, 191, 93, 53, 97, 189, 233, 121, 51, 62, 157, 113, 178, 189, 94, 55, 74, 190, 109, 187, 53, 62, 193, 106, 170, 61, 131, 54, 207, 189, 160, 230, 250, 189, 138, 236, 220, 61, 177, 189, 68, 190, 79, 168, 118, 190, 187, 19, 216, 61, 100, 112, 33, 60, 218, 158, 15, 190, 176, 86, 146, 62, 187, 249, 39, 190, 49, 75, 208, 61, 50, 115, 113, 61, 250, 235, 47, 62, 147, 34, 27, 61, 74, 162, 170, 189, 107, 43, 1, 190, 127, 149, 41, 190, 252, 200, 234, 61, 190, 3, 173, 189, 43, 0, 31, 62, 168, 57, 239, 189, 212, 140, 219, 189, 90, 217, 84, 189, 99, 183, 12, 190, 252, 58, 212, 61, 69, 10, 138, 188, 201, 124, 169, 189, 154, 218, 13, 189, 247, 77, 33, 190, 89, 148, 154, 61, 119, 17, 233, 187, 165, 121, 130, 189, 80, 61, 187, 189, 200, 211, 75, 189, 16, 111, 115, 189, 233, 36, 31, 190, 165, 39, 126, 188, 33, 103, 234, 189, 185, 136, 64, 61, 19, 112, 48, 190, 1, 57, 119, 61, 175, 63, 0, 190, 46, 32, 237, 61, 61, 33, 226, 189, 245, 179, 184, 189, 71, 64, 183, 189, 197, 251, 33, 62, 207, 157, 140, 61, 148, 100, 184, 61, 119, 189, 46, 61, 46, 199, 146, 189, 219, 203, 72, 62, 30, 39, 162, 189, 162, 92, 10, 61, 178, 138, 180, 61, 21, 241, 172, 190, 217, 5, 73, 62, 250, 205, 66, 191, 237, 21, 16, 189, 32, 242, 250, 59, 199, 33, 111, 61, 130, 3, 21, 61, 124, 133, 180, 188, 64, 100, 96, 62, 172, 216, 213, 188, 113, 254, 69, 190, 83, 157, 96, 62, 21, 238, 184, 60, 74, 13, 148, 61, 169, 143, 32, 62, 38, 195, 51, 61, 25, 245, 70, 190, 28, 180, 93, 189, 155, 76, 37, 61, 64, 142, 234, 189, 202, 120, 217, 190, 236, 153, 152, 189, 145, 218, 197, 61, 123, 102, 100, 190, 15, 6, 45, 62, 254, 216, 74, 62, 185, 74, 59, 62, 124, 59, 197, 61, 128, 217, 16, 189, 74, 161, 120, 61, 204, 188, 150, 60, 147, 86, 159, 62, 140, 177, 132, 62, 121, 77, 244, 61, 158, 146, 159, 62, 14, 126, 4, 61, 34, 151, 13, 62, 108, 177, 99, 62, 133, 111, 197, 61, 19, 30, 56, 189, 176, 21, 234, 189, 180, 153, 117, 62, 142, 32, 201, 61, 90, 160, 40, 190, 234, 178, 77, 62, 198, 114, 154, 60, 2, 235, 145, 190, 228, 120, 217, 61, 48, 125, 71, 62, 203, 149, 57, 190, 123, 185, 226, 61, 97, 63, 190, 60, 114, 100, 96, 189, 122, 69, 196, 190, 164, 218, 19, 62, 173, 66, 113, 189, 42, 51, 34, 61, 215, 53, 116, 61, 154, 91, 241, 61, 220, 107, 178, 188, 133, 66, 71, 188, 168, 30, 213, 187, 90, 15, 45, 62, 4, 109, 222, 62, 66, 50, 95, 61, 232, 21, 92, 190, 239, 79, 22, 62, 26, 134, 35, 62, 99, 220, 194, 62, 5, 42, 8, 62, 117, 99, 236, 189, 155, 239, 161, 189, 235, 151, 247, 189, 111, 120, 91, 61, 116, 141, 173, 189, 55, 151, 129, 189, 191, 127, 248, 188, 146, 216, 6, 190, 230, 80, 67, 61, 33, 23, 77, 62, 66, 174, 23, 61, 47, 171, 131, 60, 137, 82, 133, 189, 207, 50, 62, 62, 175, 210, 10, 61, 220, 190, 65, 190, 232, 106, 252, 61, 120, 160, 116, 187, 130, 233, 143, 189, 133, 190, 151, 62, 81, 117, 33, 189, 215, 128, 209, 61, 111, 85, 132, 62, 119, 76, 142, 190, 204, 214, 9, 190, 68, 142, 0, 62, 44, 91, 44, 191, 48, 68, 148, 62, 5, 103, 78, 190, 232, 244, 48, 62, 188, 167, 71, 61, 106, 245, 18, 62, 237, 128, 80, 189, 59, 9, 75, 61, 161, 147, 207, 62, 42, 235, 103, 189, 105, 126, 144, 190, 131, 212, 149, 62, 16, 114, 2, 62, 6, 106, 214, 189, 225, 250, 224, 61, 11, 206, 141, 188, 33, 201, 231, 189, 205, 227, 3, 189, 17, 142, 5, 62, 162, 13, 26, 190, 229, 75, 44, 190, 24, 77, 121, 190, 171, 241, 201, 190, 72, 68, 78, 188, 120, 243, 38, 190, 116, 158, 18, 190, 47, 27, 24, 62, 208, 127, 56, 190, 194, 197, 76, 189, 153, 115, 40, 190, 232, 117, 173, 60, 182, 83, 39, 190, 189, 33, 134, 188, 53, 27, 64, 190, 186, 161, 114, 188, 162, 72, 41, 190, 202, 185, 185, 61, 109, 249, 190, 61, 74, 105, 238, 189, 75, 124, 160, 60, 162, 129, 186, 189, 199, 200, 198, 189, 59, 95, 139, 189, 193, 24, 253, 61, 139, 125, 55, 189, 253, 249, 15, 62, 221, 204, 39, 190, 32, 175, 122, 61, 204, 45, 202, 189, 189, 208, 41, 60, 139, 87, 14, 190, 104, 118, 54, 190, 193, 33, 59, 61, 255, 237, 89, 61, 73, 80, 180, 61, 134, 162, 5, 62, 219, 141, 179, 190, 51, 114, 144, 61, 28, 250, 3, 62, 230, 119, 74, 191, 166, 205, 167, 62, 68, 252, 51, 62, 214, 62, 199, 60, 74, 7, 10, 191, 199, 174, 151, 62, 167, 196, 0, 62, 157, 253, 103, 190, 201, 65, 206, 61, 173, 236, 203, 190, 250, 50, 127, 190, 135, 158, 118, 187, 242, 65, 29, 61, 252, 146, 225, 61, 179, 247, 9, 190, 115, 205, 199, 188, 171, 163, 131, 62, 21, 10, 72, 190, 40, 173, 124, 191, 125, 62, 245, 61, 210, 237, 106, 190, 183, 18, 96, 190, 17, 79, 25, 62, 20, 90, 25, 62, 118, 170, 27, 191, 11, 238, 118, 61, 16, 149, 160, 62, 161, 218, 49, 190, 245, 83, 36, 190, 238, 131, 153, 189, 222, 220, 244, 189, 20, 156, 215, 188, 93, 232, 21, 190, 253, 107, 142, 189, 194, 184, 99, 61, 111, 155, 90, 61, 248, 77, 34, 61, 241, 93, 237, 189, 141, 182, 16, 190, 60, 178, 116, 187, 84, 159, 50, 190, 143, 62, 163, 189, 47, 79, 46, 189, 241, 238, 226, 188, 192, 83, 57, 61, 90, 52, 65, 189, 118, 177, 178, 189, 150, 22, 173, 61, 51, 54, 47, 190, 4, 119, 164, 61, 226, 14, 51, 62, 22, 174, 34, 62, 236, 197, 25, 190, 215, 9, 1, 62, 56, 113, 7, 62, 189, 11, 159, 189, 210, 238, 178, 188, 111, 210, 238, 189, 177, 75, 34, 190, 156, 23, 255, 189, 97, 238, 42, 189, 128, 6, 164, 189, 83, 64, 156, 189, 116, 95, 144, 62, 45, 101, 133, 62, 211, 217, 16, 190, 32, 140, 139, 62, 114, 138, 160, 61, 171, 250, 212, 61, 167, 251, 203, 188, 85, 178, 188, 189, 126, 126, 250, 188, 160, 146, 32, 62, 104, 63, 187, 62, 71, 67, 62, 189, 186, 83, 92, 190, 215, 225, 143, 190, 95, 100, 11, 190, 2, 225, 47, 61, 137, 199, 71, 62, 215, 56, 155, 189, 49, 236, 11, 62, 154, 236, 30, 62, 10, 133, 37, 190, 185, 121, 102, 61, 88, 218, 78, 62, 156, 198, 72, 61, 184, 75, 33, 189, 148, 107, 23, 62, 7, 168, 104, 186, 106, 12, 67, 190, 230, 134, 56, 189, 94, 84, 127, 61, 229, 31, 168, 189, 45, 59, 2, 190, 189, 90, 86, 189, 146, 24, 8, 190, 27, 159, 141, 61, 185, 202, 199, 60, 231, 24, 49, 190, 210, 82, 18, 190, 183, 133, 38, 189, 221, 206, 183, 189, 164, 78, 254, 61, 98, 196, 17, 190, 229, 61, 92, 61, 78, 54, 83, 189, 254, 24, 199, 189, 37, 183, 7, 190, 61, 13, 93, 61, 177, 235, 234, 188, 114, 214, 14, 62, 79, 28, 36, 62, 220, 245, 35, 60, 44, 235, 194, 189, 208, 105, 231, 61, 12, 202, 239, 189, 20, 51, 250, 189, 232, 43, 7, 62, 233, 133, 178, 189, 142, 217, 50, 61, 32, 176, 119, 189, 251, 224, 71, 190, 122, 129, 166, 61, 13, 137, 74, 61, 92, 231, 177, 62, 163, 39, 57, 190, 147, 205, 19, 62, 17, 122, 98, 62, 155, 79, 68, 190, 137, 78, 41, 189, 217, 0, 219, 189, 232, 249, 143, 62, 176, 215, 232, 61, 86, 61, 54, 190, 3, 101, 51, 62, 26, 94, 242, 60, 0, 80, 104, 62, 33, 42, 27, 61, 248, 77, 139, 189, 109, 119, 165, 190, 165, 113, 47, 61, 151, 252, 24, 188, 61, 248, 160, 62, 38, 11, 179, 189, 53, 251, 151, 190, 62, 203, 58, 60, 139, 158, 254, 190, 17, 10, 110, 61, 186, 85, 109, 61, 173, 95, 0, 62, 32, 1, 179, 188, 133, 250, 97, 62, 239, 231, 75, 190, 255, 218, 234, 190, 174, 1, 46, 62, 118, 28, 42, 190, 108, 88, 96, 61, 135, 204, 141, 189, 119, 71, 41, 190, 196, 233, 46, 190, 109, 161, 52, 188, 205, 162, 100, 189, 149, 190, 12, 62, 32, 203, 136, 189, 57, 114, 207, 189, 46, 218, 52, 190, 212, 39, 145, 189, 197, 11, 216, 186, 10, 213, 0, 190, 182, 113, 141, 61, 78, 183, 85, 61, 71, 161, 250, 61, 52, 118, 49, 190, 91, 216, 141, 61, 43, 232, 247, 61, 246, 70, 2, 62, 114, 197, 82, 189, 165, 180, 29, 190, 196, 240, 220, 189, 205, 189, 132, 189, 254, 248, 215, 188, 77, 226, 198, 61, 167, 155, 0, 61, 4, 83, 23, 190, 142, 188, 8, 60, 150, 215, 11, 62, 9, 30, 56, 60, 68, 196, 148, 188, 38, 125, 26, 62, 219, 116, 242, 60, 37, 172, 51, 190, 248, 58, 219, 189, 125, 132, 7, 62, 2, 45, 37, 189, 169, 85, 250, 189, 204, 67, 192, 61, 37, 78, 149, 188, 115, 234, 18, 190, 126, 75, 130, 189, 72, 103, 139, 60, 34, 131, 159, 189, 17, 87, 226, 60, 144, 31, 50, 190, 64, 207, 240, 189, 131, 142, 232, 189, 91, 40, 188, 61, 218, 39, 221, 189, 248, 174, 39, 61, 0, 252, 213, 189, 182, 241, 220, 61, 97, 25, 76, 189, 93, 235, 221, 61, 122, 57, 207, 61, 227, 12, 244, 190, 194, 140, 221, 190, 73, 198, 10, 190, 82, 133, 28, 189, 194, 168, 140, 61, 254, 213, 243, 187, 2, 43, 151, 61, 150, 134, 140, 190, 14, 89, 254, 189, 27, 147, 21, 190, 129, 143, 221, 190, 131, 51, 81, 62, 246, 72, 179, 61, 122, 103, 111, 189, 69, 173, 54, 191, 119, 18, 180, 61, 68, 23, 219, 61, 132, 97, 146, 190, 231, 74, 237, 61, 12, 36, 222, 189, 136, 21, 41, 189, 150, 111, 68, 190, 208, 26, 136, 61, 122, 152, 89, 62, 191, 32, 5, 190, 131, 136, 246, 187, 224, 27, 10, 62, 98, 223, 26, 190, 8, 172, 33, 191, 116, 123, 63, 62, 251, 92, 18, 60, 61, 85, 88, 59, 151, 83, 149, 61, 254, 53, 15, 61, 184, 62, 15, 191, 209, 107, 20, 62, 145, 80, 108, 62, 81, 120, 149, 190, 138, 57, 83, 190, 66, 98, 48, 61, 121, 178, 136, 190, 109, 55, 0, 62, 198, 147, 89, 191, 110, 216, 52, 190, 192, 223, 100, 62, 147, 45, 25, 62, 188, 162, 17, 191, 162, 198, 99, 62, 56, 63, 179, 189, 106, 188, 2, 62, 233, 103, 28, 62, 183, 197, 11, 191, 84, 39, 11, 62, 214, 4, 130, 61, 154, 133, 137, 61, 94, 63, 196, 190, 173, 81, 96, 190, 0, 79, 218, 189, 142, 82, 85, 190, 88, 20, 76, 190, 75, 6, 157, 191, 34, 5, 74, 62, 223, 79, 119, 190, 116, 77, 109, 190, 254, 224, 185, 188, 64, 43, 9, 62, 62, 30, 250, 190, 114, 137, 70, 62, 138, 95, 1, 187, 110, 212, 246, 190, 95, 18, 204, 190, 171, 89, 201, 190, 49, 149, 132, 62, 105, 158, 86, 61, 21, 7, 39, 62, 65, 78, 74, 188, 61, 141, 105, 190, 205, 69, 147, 189, 144, 11, 31, 62, 54, 192, 209, 189, 202, 205, 205, 61, 123, 85, 106, 60, 32, 240, 127, 189, 38, 63, 188, 189, 82, 130, 160, 61, 54, 114, 144, 189, 17, 180, 157, 61, 90, 229, 34, 62, 15, 56, 210, 61, 243, 254, 107, 190, 190, 163, 139, 62, 171, 76, 208, 189, 80, 212, 62, 62, 168, 49, 172, 61, 198, 132, 92, 190, 142, 120, 139, 190, 244, 100, 198, 61, 202, 159, 101, 189, 36, 120, 227, 61, 102, 224, 39, 62, 212, 5, 155, 190, 223, 212, 230, 60, 65, 226, 224, 189, 200, 4, 131, 190, 100, 19, 15, 61, 155, 180, 115, 62, 36, 30, 7, 62, 127, 161, 244, 60, 237, 38, 157, 189, 73, 241, 129, 188, 197, 245, 147, 189, 214, 178, 51, 62, 189, 244, 143, 190, 193, 94, 95, 190, 78, 99, 33, 190, 119, 37, 42, 190, 84, 113, 17, 62, 109, 39, 152, 189, 137, 33, 70, 190, 54, 148, 14, 191, 194, 224, 23, 60, 202, 59, 60, 190, 110, 16, 200, 60, 145, 10, 188, 189, 149, 30, 82, 61, 34, 72, 2, 61, 240, 205, 224, 188, 137, 72, 187, 60, 209, 233, 83, 61, 161, 254, 28, 61, 54, 188, 170, 189, 21, 207, 131, 62, 6, 111, 156, 189, 145, 32, 133, 189, 113, 99, 213, 189, 37, 66, 185, 61, 86, 46, 14, 61, 56, 235, 227, 189, 30, 121, 248, 60, 108, 132, 67, 189, 189, 153, 122, 189, 84, 32, 232, 189, 209, 99, 203, 187, 117, 68, 150, 61, 201, 41, 38, 190, 118, 132, 51, 61, 129, 133, 134, 61, 102, 138, 35, 62, 168, 121, 19, 62, 214, 232, 198, 61, 157, 14, 233, 189, 208, 238, 5, 62, 127, 115, 199, 189, 87, 49, 224, 189, 114, 85, 54, 61, 180, 197, 230, 60, 162, 16, 12, 190, 100, 135, 219, 189, 49, 212, 185, 189, 45, 5, 29, 62, 25, 14, 137, 189, 188, 147, 194, 189, 206, 246, 33, 190, 255, 230, 171, 60, 36, 213, 31, 190, 175, 170, 226, 61, 233, 129, 18, 62, 253, 112, 212, 190, 204, 93, 157, 61, 199, 205, 242, 61, 174, 168, 21, 191, 58, 118, 18, 61, 241, 22, 129, 61, 217, 21, 79, 189, 131, 136, 36, 191, 4, 236, 68, 62, 44, 40, 215, 58, 189, 49, 139, 190, 201, 220, 13, 190, 98, 79, 161, 190, 62, 133, 46, 189, 78, 115, 221, 61, 219, 158, 3, 190, 198, 97, 216, 189, 191, 111, 172, 189, 98, 203, 72, 190, 202, 171, 113, 60, 216, 104, 45, 190, 126, 118, 28, 191, 61, 231, 148, 62, 97, 241, 76, 190, 109, 25, 108, 190, 67, 164, 75, 62, 197, 13, 127, 61, 184, 89, 192, 190, 128, 157, 224, 188, 15, 180, 62, 62, 29, 76, 122, 190, 178, 171, 31, 189, 149, 207, 94, 188, 165, 164, 11, 62, 130, 168, 203, 60, 98, 51, 191, 61, 30, 13, 63, 190, 245, 16, 74, 62, 172, 87, 69, 61, 108, 230, 216, 62, 123, 254, 152, 61, 194, 143, 113, 189, 63, 154, 87, 189, 115, 14, 13, 189, 184, 105, 117, 62, 225, 239, 4, 62, 215, 61, 102, 190, 109, 254, 23, 190, 136, 227, 17, 62, 105, 54, 118, 61, 229, 72, 61, 62, 199, 190, 132, 190, 31, 174, 122, 61, 203, 243, 90, 61, 153, 25, 107, 189, 215, 26, 253, 61, 56, 161, 74, 62, 58, 34, 91, 61, 0, 19, 205, 189, 50, 58, 48, 62, 155, 147, 28, 190, 213, 219, 16, 190, 122, 137, 97, 61, 17, 249, 145, 60, 122, 18, 244, 58, 19, 103, 240, 187, 196, 61, 50, 190, 38, 18, 94, 189, 251, 88, 219, 62, 225, 208, 113, 190, 148, 104, 103, 189, 74, 83, 170, 190, 81, 141, 95, 188, 27, 154, 30, 62, 3, 174, 162, 189, 38, 211, 51, 189, 56, 144, 209, 59, 92, 19, 158, 188, 127, 234, 19, 190, 87, 253, 134, 62, 34, 108, 11, 62, 81, 142, 105, 189, 193, 207, 149, 188, 190, 24, 172, 62, 254, 147, 33, 190, 21, 237, 201, 189, 216, 125, 45, 62, 190, 81, 213, 188, 46, 102, 142, 188, 215, 236, 189, 61, 241, 189, 140, 189, 182, 135, 29, 190, 239, 208, 30, 190, 190, 240, 194, 189, 191, 94, 122, 189, 117, 189, 24, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 49, 160, 188, 82, 94, 20, 62, 255, 34, 118, 62, 101, 244, 28, 190, 213, 53, 129, 62, 196, 165, 128, 189, 46, 61, 167, 61, 36, 123, 93, 59, 96, 124, 155, 61, 141, 43, 100, 62, 87, 86, 124, 62, 135, 173, 243, 189, 248, 154, 148, 189, 90, 41, 188, 61, 160, 162, 172, 62, 56, 8, 45, 190, 227, 90, 6, 190, 209, 179, 140, 61, 239, 127, 138, 61, 69, 103, 132, 62, 18, 110, 27, 60, 74, 2, 77, 62, 235, 126, 61, 190, 112, 99, 216, 189, 116, 29, 39, 62, 17, 179, 134, 62, 149, 80, 142, 189, 46, 92, 238, 189, 124, 101, 68, 190, 169, 107, 138, 61, 25, 40, 114, 62, 41, 100, 15, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 161, 144, 189, 240, 13, 204, 190, 169, 204, 70, 188, 227, 179, 96, 61, 26, 249, 55, 190, 93, 228, 8, 63, 5, 247, 253, 62, 190, 21, 48, 189, 220, 136, 170, 61, 98, 202, 37, 63, 128, 55, 139, 62, 168, 61, 60, 61, 117, 18, 119, 62, 245, 120, 171, 190, 62, 224, 29, 190, 45, 4, 183, 62, 190, 229, 162, 61, 99, 156, 75, 63, 191, 110, 144, 61, 54, 81, 146, 190, 34, 89, 14, 59, 111, 1, 152, 190, 129, 229, 6, 62, 51, 219, 30, 190, 60, 249, 24, 63, 111, 220, 111, 63, 41, 184, 131, 62, 114, 14, 81, 62, 32, 147, 53, 61, 161, 29, 45, 63, 136, 134, 167, 190, 233, 209, 159, 62, 160, 52, 187, 189, 160, 150, 4, 62, 197, 1, 89, 190, 70, 233, 163, 61, 75, 23, 60, 190, 86, 2, 209, 61, 109, 183, 200, 190, 20, 157, 2, 62, 187, 21, 37, 190, 111, 133, 181, 61, 186, 252, 113, 190, 25, 63, 205, 189, 154, 174, 9, 190, 169, 186, 151, 61, 145, 243, 71, 190, 57, 24, 45, 62, 86, 113, 248, 188, 89, 43, 61, 62, 232, 158, 234, 60, 175, 66, 223, 189, 157, 229, 29, 62, 140, 204, 184, 61, 228, 131, 86, 188, 164, 21, 83, 62, 235, 215, 28, 190, 20, 155, 96, 62, 106, 32, 88, 188, 113, 23, 85, 189, 20, 136, 66, 189, 130, 26, 192, 188, 55, 149, 122, 190, 196, 126, 125, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 75, 30, 190, 214, 209, 18, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {194, 141, 155, 62, 30, 24, 33, 63, 153, 103, 97, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {156, 100, 214, 191, 88, 245, 39, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0090/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}