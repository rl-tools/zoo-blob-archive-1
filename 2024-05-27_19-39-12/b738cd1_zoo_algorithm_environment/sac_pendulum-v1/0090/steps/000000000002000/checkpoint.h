// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 98, 226, 62, 33, 205, 138, 62, 113, 24, 197, 62, 176, 53, 251, 62, 113, 221, 159, 190, 224, 89, 141, 62, 64, 175, 201, 190, 101, 163, 18, 63, 97, 104, 148, 190, 181, 149, 146, 190, 148, 72, 36, 63, 16, 165, 204, 190, 29, 20, 143, 62, 128, 53, 210, 62, 150, 233, 201, 190, 241, 35, 141, 189, 16, 59, 186, 62, 157, 98, 13, 62, 195, 44, 5, 63, 109, 32, 27, 190, 173, 177, 250, 59, 237, 115, 160, 62, 28, 29, 91, 63, 102, 204, 73, 190, 232, 197, 175, 190, 52, 179, 89, 63, 14, 95, 138, 62, 229, 134, 204, 61, 149, 215, 46, 191, 248, 235, 200, 189, 161, 174, 52, 190, 231, 161, 30, 63, 80, 245, 2, 61, 71, 73, 7, 62, 253, 235, 200, 188, 38, 242, 29, 60, 25, 236, 144, 62, 46, 124, 186, 62, 249, 76, 192, 189, 125, 20, 12, 191, 6, 146, 139, 62, 20, 217, 190, 190, 136, 59, 71, 62, 78, 144, 106, 62, 127, 59, 51, 187, 187, 199, 156, 62, 69, 22, 38, 63, 226, 100, 20, 191, 42, 2, 164, 62, 63, 14, 40, 191, 65, 172, 199, 189, 211, 66, 134, 62, 195, 224, 84, 62, 48, 28, 0, 63, 125, 97, 35, 191, 75, 120, 59, 191, 14, 91, 16, 190, 214, 195, 86, 62, 133, 76, 172, 190, 173, 247, 214, 190, 145, 136, 31, 189, 224, 94, 60, 62, 120, 184, 67, 62, 189, 200, 12, 191, 54, 230, 59, 63, 44, 83, 34, 191, 2, 193, 168, 62, 255, 193, 14, 191, 230, 33, 222, 62, 52, 229, 155, 62, 143, 177, 48, 63, 129, 170, 215, 62, 142, 185, 6, 62, 251, 151, 97, 62, 218, 237, 194, 62, 16, 237, 141, 60, 182, 57, 67, 191, 221, 85, 5, 190, 84, 95, 18, 191, 197, 16, 91, 191, 62, 232, 200, 190, 212, 79, 90, 190, 180, 23, 100, 63, 45, 147, 255, 190, 211, 55, 197, 190, 13, 235, 65, 63, 216, 247, 201, 61, 141, 17, 76, 190, 213, 170, 72, 191, 131, 128, 231, 62, 191, 45, 8, 63, 54, 95, 166, 190, 77, 227, 140, 62, 183, 255, 195, 61, 242, 197, 48, 190, 114, 120, 189, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 71, 5, 191, 127, 186, 118, 61, 140, 99, 172, 62, 33, 240, 18, 188, 42, 197, 9, 191, 191, 229, 38, 63, 102, 115, 19, 191, 152, 247, 253, 62, 211, 57, 21, 63, 63, 235, 204, 62, 149, 6, 232, 60, 85, 114, 122, 190, 189, 215, 237, 62, 14, 24, 56, 62, 146, 197, 161, 190, 28, 208, 23, 190, 108, 40, 29, 63, 204, 165, 173, 190, 96, 71, 52, 190, 94, 165, 125, 188, 192, 229, 128, 190, 247, 185, 173, 190, 159, 129, 45, 63, 112, 49, 202, 62, 67, 192, 191, 189, 180, 166, 30, 63, 80, 43, 30, 63, 81, 47, 28, 62, 136, 182, 65, 189, 54, 157, 1, 62, 50, 26, 97, 190, 255, 168, 254, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 112, 10, 62, 2, 237, 147, 61, 67, 132, 108, 189, 100, 176, 130, 61, 189, 28, 52, 190, 38, 116, 21, 190, 228, 30, 157, 189, 180, 184, 68, 188, 142, 77, 26, 189, 223, 52, 191, 188, 254, 40, 31, 62, 43, 187, 144, 61, 186, 16, 28, 62, 1, 72, 30, 61, 24, 128, 217, 187, 14, 219, 222, 187, 170, 214, 218, 189, 152, 122, 11, 62, 251, 113, 8, 189, 180, 144, 32, 62, 97, 193, 147, 188, 115, 213, 197, 189, 248, 123, 182, 188, 238, 233, 198, 188, 142, 193, 245, 189, 105, 75, 34, 190, 203, 63, 171, 189, 64, 115, 50, 60, 78, 16, 177, 189, 40, 106, 177, 60, 240, 239, 25, 190, 31, 151, 114, 60, 250, 39, 84, 61, 7, 200, 79, 59, 243, 64, 142, 62, 227, 66, 29, 61, 29, 162, 85, 61, 203, 23, 132, 62, 115, 205, 201, 189, 224, 61, 126, 62, 127, 19, 145, 62, 215, 194, 108, 190, 202, 99, 35, 62, 60, 79, 188, 61, 223, 88, 97, 62, 158, 182, 213, 61, 216, 239, 46, 190, 210, 32, 194, 189, 165, 166, 195, 190, 44, 45, 25, 59, 107, 105, 95, 190, 112, 119, 42, 190, 55, 88, 147, 61, 67, 15, 146, 62, 50, 34, 80, 190, 145, 102, 119, 61, 33, 149, 6, 62, 20, 253, 37, 190, 8, 13, 242, 55, 38, 43, 252, 61, 196, 213, 181, 62, 65, 252, 177, 190, 92, 175, 247, 61, 171, 22, 136, 189, 136, 211, 160, 190, 166, 215, 240, 60, 238, 165, 134, 60, 118, 224, 47, 62, 144, 143, 233, 189, 60, 57, 46, 61, 96, 27, 17, 62, 221, 236, 176, 61, 124, 212, 232, 60, 2, 42, 12, 61, 22, 68, 132, 190, 251, 228, 18, 62, 8, 113, 195, 61, 41, 144, 194, 188, 30, 161, 135, 61, 207, 255, 97, 61, 190, 71, 60, 62, 12, 232, 88, 190, 124, 222, 251, 188, 50, 205, 170, 189, 59, 234, 52, 190, 235, 29, 33, 62, 4, 70, 193, 185, 170, 201, 14, 189, 125, 213, 137, 61, 206, 103, 25, 62, 7, 70, 38, 62, 10, 152, 212, 189, 87, 232, 10, 60, 130, 64, 120, 62, 30, 45, 228, 188, 97, 152, 212, 61, 182, 143, 246, 189, 22, 255, 249, 188, 44, 214, 213, 61, 172, 3, 50, 62, 203, 130, 130, 185, 238, 120, 113, 61, 39, 93, 46, 62, 74, 112, 41, 190, 89, 60, 36, 61, 208, 65, 255, 60, 114, 187, 167, 61, 124, 217, 241, 61, 41, 1, 205, 189, 75, 148, 47, 190, 53, 120, 131, 60, 79, 94, 9, 189, 129, 242, 195, 189, 242, 77, 182, 189, 195, 234, 23, 62, 167, 14, 45, 62, 80, 215, 53, 189, 195, 51, 21, 190, 84, 106, 33, 190, 107, 15, 24, 190, 139, 248, 52, 189, 35, 73, 226, 189, 99, 171, 36, 190, 59, 93, 48, 190, 74, 74, 14, 190, 237, 22, 28, 62, 208, 124, 129, 61, 214, 171, 11, 190, 148, 37, 24, 187, 102, 229, 216, 60, 141, 161, 134, 61, 44, 219, 167, 61, 80, 65, 243, 189, 224, 226, 42, 62, 96, 192, 194, 188, 150, 54, 236, 61, 50, 50, 174, 61, 22, 38, 79, 188, 85, 133, 177, 59, 251, 26, 7, 188, 173, 79, 3, 62, 142, 146, 103, 62, 15, 198, 243, 61, 69, 211, 117, 61, 167, 130, 229, 189, 181, 61, 36, 189, 3, 94, 39, 187, 202, 37, 140, 61, 122, 57, 32, 190, 133, 195, 31, 61, 94, 55, 251, 60, 222, 189, 1, 189, 160, 138, 232, 60, 130, 68, 29, 189, 141, 238, 159, 189, 193, 197, 30, 62, 87, 20, 97, 59, 118, 5, 143, 187, 221, 111, 243, 189, 50, 113, 14, 62, 120, 5, 252, 189, 140, 132, 235, 189, 229, 13, 41, 62, 6, 194, 240, 61, 74, 251, 6, 61, 11, 76, 208, 189, 197, 127, 77, 189, 161, 119, 39, 61, 183, 214, 227, 61, 54, 244, 156, 60, 197, 213, 248, 189, 86, 102, 180, 188, 65, 250, 150, 61, 66, 5, 44, 190, 169, 201, 134, 61, 70, 78, 18, 62, 27, 159, 230, 188, 80, 84, 227, 61, 209, 95, 204, 189, 174, 118, 51, 61, 102, 185, 28, 62, 138, 38, 92, 62, 5, 84, 89, 190, 50, 242, 57, 61, 46, 128, 25, 190, 189, 139, 218, 189, 31, 11, 74, 190, 121, 243, 191, 61, 113, 219, 221, 189, 119, 184, 146, 61, 121, 133, 155, 189, 206, 123, 36, 190, 17, 144, 146, 189, 149, 42, 74, 190, 74, 2, 149, 189, 255, 86, 77, 189, 89, 54, 208, 60, 29, 179, 34, 62, 49, 168, 110, 61, 254, 94, 147, 190, 78, 185, 251, 188, 125, 235, 148, 57, 135, 31, 77, 190, 2, 48, 84, 61, 249, 15, 118, 190, 243, 6, 221, 189, 235, 145, 89, 60, 122, 27, 143, 60, 25, 100, 112, 189, 234, 78, 18, 189, 206, 143, 137, 62, 201, 123, 237, 61, 164, 86, 155, 188, 154, 242, 15, 190, 100, 66, 31, 62, 112, 254, 68, 190, 212, 52, 26, 190, 55, 95, 161, 61, 244, 112, 38, 189, 173, 243, 205, 187, 93, 57, 226, 188, 42, 107, 86, 62, 144, 239, 66, 190, 214, 78, 238, 189, 30, 75, 209, 188, 129, 233, 134, 189, 208, 40, 13, 62, 205, 88, 58, 186, 220, 173, 143, 61, 157, 221, 93, 188, 101, 119, 172, 189, 233, 153, 188, 189, 131, 102, 30, 189, 30, 127, 218, 61, 228, 217, 19, 190, 69, 28, 26, 188, 176, 254, 152, 189, 52, 83, 50, 190, 23, 149, 57, 61, 17, 165, 114, 189, 171, 80, 254, 188, 1, 145, 131, 61, 36, 231, 52, 190, 215, 173, 8, 189, 251, 83, 233, 189, 194, 227, 139, 189, 158, 216, 43, 189, 4, 163, 114, 60, 137, 174, 247, 59, 16, 141, 36, 189, 134, 194, 14, 190, 41, 89, 155, 189, 133, 149, 199, 61, 102, 158, 253, 189, 27, 181, 208, 189, 134, 76, 15, 62, 149, 73, 223, 60, 238, 230, 205, 189, 156, 151, 230, 189, 226, 217, 22, 190, 110, 146, 12, 59, 203, 129, 71, 188, 198, 247, 74, 61, 165, 255, 14, 190, 74, 243, 36, 190, 154, 141, 43, 62, 116, 84, 139, 60, 62, 112, 46, 190, 205, 201, 17, 59, 0, 37, 181, 189, 164, 236, 248, 61, 42, 138, 187, 188, 213, 217, 198, 189, 23, 225, 253, 61, 24, 178, 157, 188, 225, 37, 6, 189, 39, 55, 24, 61, 189, 52, 23, 190, 52, 6, 42, 190, 232, 48, 209, 188, 81, 249, 245, 60, 36, 61, 3, 62, 16, 132, 42, 190, 163, 209, 23, 61, 102, 120, 229, 187, 16, 83, 19, 61, 178, 23, 131, 189, 7, 15, 61, 61, 46, 135, 150, 190, 187, 114, 0, 61, 5, 49, 199, 189, 131, 141, 130, 189, 117, 153, 1, 62, 129, 222, 209, 189, 242, 81, 195, 189, 254, 75, 224, 189, 156, 187, 53, 189, 33, 27, 62, 61, 178, 236, 169, 61, 176, 35, 120, 61, 29, 55, 226, 189, 84, 207, 7, 61, 175, 73, 159, 188, 235, 101, 11, 190, 49, 98, 143, 62, 92, 218, 191, 185, 245, 34, 215, 60, 149, 111, 188, 189, 200, 58, 130, 189, 56, 142, 144, 190, 146, 154, 76, 62, 50, 216, 251, 61, 66, 73, 15, 190, 146, 143, 22, 62, 251, 18, 82, 61, 174, 191, 117, 188, 190, 76, 244, 188, 60, 196, 52, 189, 194, 227, 241, 187, 3, 138, 84, 189, 109, 11, 233, 189, 238, 253, 24, 62, 187, 116, 73, 61, 53, 132, 211, 189, 119, 222, 12, 189, 208, 73, 35, 190, 173, 33, 10, 190, 225, 122, 232, 61, 95, 202, 248, 189, 250, 2, 227, 61, 99, 250, 230, 190, 93, 53, 97, 189, 132, 92, 151, 61, 48, 179, 137, 60, 125, 148, 40, 190, 9, 8, 175, 61, 16, 92, 95, 61, 78, 125, 167, 189, 188, 241, 31, 61, 157, 14, 125, 189, 168, 114, 104, 190, 130, 60, 141, 189, 4, 65, 166, 61, 124, 100, 36, 60, 170, 159, 245, 189, 51, 242, 151, 62, 82, 147, 182, 189, 226, 151, 46, 62, 250, 164, 235, 189, 179, 96, 22, 62, 52, 228, 37, 62, 163, 122, 240, 188, 107, 43, 1, 190, 127, 149, 41, 190, 146, 64, 246, 61, 199, 90, 157, 189, 103, 167, 37, 62, 36, 178, 237, 189, 212, 140, 219, 189, 144, 169, 53, 189, 97, 162, 12, 190, 209, 189, 212, 61, 102, 156, 121, 188, 201, 124, 169, 189, 79, 167, 244, 188, 141, 145, 28, 190, 89, 148, 154, 61, 27, 223, 13, 59, 69, 183, 127, 189, 80, 61, 187, 189, 200, 211, 75, 189, 142, 59, 91, 189, 233, 36, 31, 190, 209, 145, 182, 187, 33, 103, 234, 189, 185, 136, 64, 61, 19, 112, 48, 190, 15, 239, 124, 61, 27, 223, 251, 189, 34, 70, 255, 61, 105, 129, 225, 189, 245, 179, 184, 189, 71, 64, 183, 189, 197, 251, 33, 62, 75, 114, 141, 61, 253, 52, 60, 61, 171, 179, 248, 61, 239, 7, 83, 59, 174, 35, 217, 61, 233, 136, 144, 61, 198, 83, 10, 61, 234, 107, 169, 61, 210, 97, 230, 189, 151, 214, 50, 62, 251, 55, 179, 190, 237, 21, 16, 189, 153, 78, 197, 189, 218, 58, 5, 62, 35, 50, 0, 61, 131, 213, 162, 189, 252, 233, 3, 62, 212, 53, 242, 188, 213, 86, 48, 61, 157, 221, 163, 61, 167, 242, 133, 60, 181, 24, 31, 62, 88, 14, 30, 62, 9, 204, 134, 189, 199, 33, 64, 190, 219, 202, 36, 189, 206, 34, 233, 61, 61, 194, 84, 189, 104, 6, 174, 190, 84, 173, 131, 60, 51, 74, 68, 62, 206, 161, 19, 190, 31, 124, 171, 61, 74, 208, 45, 62, 101, 146, 8, 62, 183, 128, 195, 60, 63, 146, 155, 61, 108, 22, 144, 61, 14, 42, 151, 60, 135, 248, 130, 62, 21, 29, 157, 62, 195, 24, 50, 61, 10, 148, 162, 62, 14, 126, 4, 61, 91, 42, 60, 61, 153, 200, 17, 62, 100, 174, 40, 62, 188, 110, 85, 61, 241, 228, 51, 190, 252, 34, 57, 62, 244, 26, 122, 190, 70, 219, 178, 189, 197, 185, 24, 62, 11, 6, 141, 189, 233, 253, 19, 190, 242, 30, 137, 61, 177, 86, 6, 62, 63, 30, 140, 190, 249, 241, 186, 60, 109, 10, 19, 189, 237, 227, 46, 62, 165, 82, 97, 190, 226, 168, 85, 61, 228, 168, 190, 189, 229, 61, 55, 189, 55, 181, 141, 61, 117, 195, 168, 61, 152, 148, 40, 189, 126, 16, 194, 61, 102, 28, 43, 189, 41, 62, 45, 62, 243, 243, 200, 62, 79, 188, 137, 61, 91, 218, 184, 190, 210, 140, 31, 62, 26, 134, 35, 62, 147, 181, 148, 62, 156, 185, 193, 61, 99, 6, 183, 189, 1, 115, 17, 60, 227, 105, 147, 190, 36, 139, 44, 61, 209, 199, 209, 190, 78, 36, 117, 60, 96, 163, 117, 189, 88, 194, 21, 190, 60, 1, 3, 62, 130, 193, 3, 62, 166, 25, 133, 59, 194, 39, 222, 189, 200, 239, 253, 189, 219, 232, 40, 62, 129, 68, 52, 62, 11, 190, 119, 189, 55, 102, 232, 61, 67, 120, 29, 59, 69, 97, 108, 61, 0, 19, 15, 62, 72, 149, 3, 189, 214, 163, 167, 61, 110, 141, 237, 61, 181, 157, 25, 188, 237, 229, 9, 190, 166, 56, 232, 60, 202, 126, 130, 190, 118, 28, 203, 61, 11, 165, 178, 61, 232, 244, 48, 62, 210, 165, 1, 190, 103, 21, 1, 62, 253, 74, 80, 189, 21, 26, 20, 189, 193, 126, 199, 61, 164, 171, 219, 189, 101, 231, 96, 61, 56, 93, 193, 61, 16, 114, 2, 62, 11, 152, 4, 190, 115, 144, 41, 189, 230, 121, 23, 190, 95, 139, 182, 187, 134, 114, 54, 190, 196, 194, 142, 61, 51, 39, 43, 190, 95, 47, 129, 189, 118, 0, 43, 189, 6, 33, 51, 190, 118, 10, 196, 61, 120, 243, 38, 190, 116, 158, 18, 190, 66, 59, 44, 62, 242, 7, 39, 190, 77, 62, 43, 189, 48, 0, 23, 190, 232, 117, 173, 60, 42, 244, 25, 190, 132, 193, 42, 188, 49, 59, 31, 190, 32, 181, 20, 188, 162, 72, 41, 190, 216, 151, 220, 61, 249, 237, 232, 61, 74, 105, 238, 189, 62, 244, 2, 61, 12, 230, 121, 189, 199, 200, 198, 189, 187, 73, 21, 189, 87, 26, 14, 62, 139, 125, 55, 189, 147, 145, 33, 62, 221, 204, 39, 190, 245, 5, 122, 61, 204, 45, 202, 189, 140, 110, 20, 61, 98, 133, 238, 189, 226, 93, 37, 190, 204, 245, 80, 61, 255, 237, 89, 61, 73, 80, 180, 61, 134, 162, 5, 62, 0, 81, 246, 189, 100, 241, 100, 61, 120, 93, 204, 61, 174, 87, 101, 190, 142, 201, 75, 61, 146, 72, 194, 61, 214, 62, 199, 60, 244, 60, 139, 190, 96, 198, 61, 62, 74, 74, 76, 62, 165, 116, 189, 189, 201, 65, 206, 61, 111, 7, 17, 190, 172, 131, 70, 190, 248, 156, 0, 61, 237, 82, 49, 190, 93, 138, 44, 62, 220, 252, 178, 189, 0, 117, 241, 60, 61, 17, 172, 61, 11, 157, 164, 189, 44, 158, 116, 190, 66, 12, 9, 61, 93, 15, 214, 189, 243, 178, 30, 190, 235, 123, 59, 62, 255, 208, 54, 62, 83, 242, 160, 190, 137, 38, 234, 188, 206, 43, 73, 62, 16, 243, 38, 190, 7, 125, 14, 190, 238, 131, 153, 189, 135, 2, 245, 189, 32, 141, 212, 188, 93, 232, 21, 190, 253, 107, 142, 189, 82, 13, 104, 61, 111, 155, 90, 61, 248, 77, 34, 61, 161, 106, 235, 189, 115, 96, 15, 190, 60, 178, 116, 187, 84, 159, 50, 190, 14, 62, 163, 189, 120, 41, 44, 189, 241, 238, 226, 188, 192, 83, 57, 61, 172, 197, 59, 189, 118, 177, 178, 189, 242, 236, 175, 61, 161, 86, 47, 190, 4, 119, 164, 61, 226, 14, 51, 62, 77, 144, 36, 62, 236, 197, 25, 190, 215, 9, 1, 62, 174, 92, 9, 62, 248, 161, 153, 189, 210, 238, 178, 188, 111, 210, 238, 189, 59, 86, 32, 190, 202, 23, 255, 189, 161, 40, 42, 189, 3, 188, 8, 190, 117, 218, 149, 189, 74, 109, 111, 62, 17, 11, 82, 62, 110, 19, 171, 188, 180, 81, 118, 62, 124, 173, 160, 61, 6, 26, 54, 61, 89, 59, 106, 187, 214, 234, 84, 190, 162, 253, 2, 189, 160, 146, 32, 62, 84, 225, 135, 62, 24, 90, 226, 189, 17, 107, 36, 190, 179, 207, 60, 190, 58, 165, 129, 190, 221, 154, 235, 59, 109, 44, 101, 190, 219, 190, 111, 59, 155, 238, 224, 61, 235, 152, 189, 61, 180, 9, 183, 188, 84, 164, 203, 188, 213, 111, 20, 62, 2, 82, 154, 189, 20, 225, 8, 190, 7, 194, 200, 61, 231, 88, 75, 62, 78, 75, 139, 60, 235, 87, 69, 189, 227, 166, 138, 61, 229, 31, 168, 189, 199, 23, 32, 190, 116, 155, 28, 188, 240, 129, 12, 190, 214, 61, 135, 61, 105, 164, 123, 61, 231, 24, 49, 190, 102, 37, 26, 190, 126, 241, 117, 60, 73, 162, 19, 190, 92, 132, 1, 62, 98, 196, 17, 190, 105, 119, 249, 59, 8, 214, 5, 189, 254, 24, 199, 189, 14, 36, 8, 190, 233, 98, 10, 189, 95, 57, 247, 188, 241, 120, 10, 62, 223, 72, 243, 61, 220, 245, 35, 60, 173, 59, 200, 189, 154, 174, 193, 61, 105, 90, 237, 189, 205, 114, 252, 189, 149, 100, 192, 61, 219, 204, 181, 189, 120, 63, 52, 61, 95, 222, 226, 188, 146, 171, 51, 190, 68, 212, 61, 61, 7, 68, 46, 61, 139, 158, 0, 62, 178, 218, 23, 190, 220, 239, 217, 61, 11, 84, 58, 62, 159, 56, 245, 58, 124, 176, 131, 189, 210, 235, 218, 189, 48, 33, 130, 62, 82, 219, 23, 62, 153, 102, 87, 190, 41, 169, 41, 62, 26, 94, 242, 60, 208, 133, 67, 62, 111, 242, 37, 189, 23, 152, 154, 189, 215, 80, 23, 190, 111, 113, 95, 61, 134, 214, 42, 188, 26, 228, 8, 190, 77, 142, 224, 61, 112, 197, 90, 190, 162, 54, 6, 189, 232, 128, 41, 190, 233, 87, 167, 185, 12, 109, 26, 189, 143, 30, 54, 61, 213, 54, 243, 189, 140, 97, 72, 62, 193, 72, 206, 61, 234, 22, 152, 188, 99, 152, 45, 189, 62, 204, 27, 190, 94, 168, 96, 61, 55, 77, 114, 189, 119, 71, 41, 190, 196, 233, 46, 190, 109, 161, 52, 188, 162, 168, 53, 189, 149, 190, 12, 62, 32, 203, 136, 189, 70, 112, 179, 189, 104, 202, 48, 190, 212, 39, 145, 189, 197, 11, 216, 186, 10, 213, 0, 190, 182, 113, 141, 61, 78, 183, 85, 61, 71, 161, 250, 61, 124, 243, 43, 190, 99, 34, 161, 61, 18, 198, 3, 62, 246, 70, 2, 62, 11, 45, 70, 189, 165, 180, 29, 190, 135, 178, 201, 189, 178, 130, 120, 189, 115, 84, 128, 188, 48, 100, 210, 61, 234, 75, 34, 61, 4, 83, 23, 190, 176, 109, 34, 60, 23, 121, 21, 62, 245, 104, 167, 60, 123, 30, 17, 188, 130, 45, 14, 189, 234, 42, 91, 188, 180, 138, 37, 190, 191, 30, 221, 189, 125, 132, 7, 62, 233, 235, 102, 186, 169, 85, 250, 189, 255, 137, 33, 61, 30, 212, 186, 60, 26, 90, 109, 189, 82, 187, 155, 189, 72, 103, 139, 60, 169, 238, 201, 189, 235, 42, 0, 61, 252, 143, 8, 190, 140, 184, 214, 189, 81, 105, 242, 189, 63, 173, 57, 61, 245, 109, 181, 61, 248, 174, 39, 61, 184, 35, 27, 190, 106, 159, 220, 61, 248, 177, 116, 189, 107, 35, 123, 61, 41, 159, 110, 61, 19, 233, 169, 190, 138, 14, 24, 190, 197, 195, 199, 189, 153, 16, 243, 188, 251, 85, 159, 61, 91, 76, 96, 189, 123, 155, 94, 61, 85, 125, 12, 190, 174, 64, 121, 189, 207, 42, 18, 190, 64, 17, 215, 188, 45, 13, 25, 189, 165, 137, 49, 61, 133, 45, 112, 189, 133, 134, 228, 190, 87, 240, 130, 57, 186, 210, 59, 62, 24, 188, 82, 190, 231, 74, 237, 61, 28, 111, 230, 60, 103, 15, 36, 60, 61, 213, 15, 190, 133, 17, 205, 189, 68, 18, 143, 62, 243, 153, 121, 189, 199, 107, 152, 61, 62, 5, 5, 189, 29, 60, 60, 189, 12, 2, 206, 189, 37, 173, 56, 62, 25, 67, 67, 61, 75, 187, 134, 61, 19, 57, 242, 61, 239, 213, 153, 61, 50, 120, 165, 190, 164, 192, 79, 61, 217, 34, 103, 62, 60, 253, 31, 190, 252, 114, 231, 189, 10, 187, 139, 61, 30, 176, 163, 189, 97, 193, 176, 188, 175, 105, 100, 190, 93, 186, 49, 190, 90, 170, 193, 61, 147, 45, 25, 62, 12, 228, 156, 190, 250, 194, 96, 61, 105, 31, 17, 62, 181, 14, 244, 61, 233, 103, 28, 62, 20, 37, 239, 189, 207, 64, 131, 61, 91, 44, 0, 62, 12, 134, 226, 59, 67, 20, 1, 190, 162, 248, 80, 189, 93, 61, 142, 60, 133, 115, 203, 189, 247, 102, 3, 188, 132, 105, 183, 190, 34, 59, 91, 62, 24, 101, 47, 190, 35, 8, 159, 189, 214, 31, 81, 61, 161, 136, 7, 62, 96, 222, 32, 190, 100, 129, 246, 187, 119, 175, 28, 61, 109, 117, 107, 190, 188, 105, 40, 190, 8, 124, 235, 189, 220, 52, 219, 60, 39, 15, 43, 188, 228, 39, 162, 61, 114, 190, 244, 189, 149, 152, 20, 190, 221, 93, 147, 189, 128, 18, 62, 61, 255, 218, 136, 189, 68, 82, 116, 60, 179, 41, 190, 189, 32, 240, 127, 189, 95, 254, 95, 190, 140, 230, 79, 60, 224, 36, 143, 189, 236, 33, 175, 188, 75, 23, 119, 60, 247, 29, 123, 61, 52, 230, 8, 62, 103, 105, 2, 62, 241, 7, 30, 190, 245, 209, 179, 61, 110, 125, 214, 61, 156, 185, 180, 189, 102, 76, 9, 190, 228, 125, 54, 61, 139, 132, 198, 189, 214, 154, 8, 61, 169, 6, 17, 190, 101, 241, 16, 190, 180, 118, 120, 60, 238, 219, 223, 189, 173, 75, 16, 190, 9, 38, 241, 61, 158, 223, 33, 62, 187, 234, 205, 61, 126, 90, 156, 61, 183, 33, 16, 190, 73, 241, 129, 188, 144, 67, 242, 188, 130, 154, 91, 61, 205, 251, 3, 189, 219, 146, 233, 189, 78, 99, 33, 190, 113, 235, 145, 189, 239, 214, 48, 61, 39, 115, 137, 189, 25, 127, 41, 190, 92, 38, 62, 190, 140, 52, 189, 61, 113, 114, 136, 189, 124, 204, 201, 61, 148, 84, 12, 189, 38, 37, 159, 58, 43, 221, 211, 60, 60, 100, 29, 189, 124, 75, 170, 61, 86, 206, 198, 61, 38, 253, 242, 189, 183, 52, 219, 189, 215, 82, 91, 61, 32, 153, 133, 189, 158, 131, 101, 188, 203, 98, 27, 189, 37, 66, 185, 61, 86, 46, 14, 61, 56, 235, 227, 189, 30, 121, 248, 60, 108, 132, 67, 189, 189, 153, 122, 189, 84, 32, 232, 189, 209, 99, 203, 187, 117, 68, 150, 61, 201, 41, 38, 190, 118, 132, 51, 61, 129, 133, 134, 61, 102, 138, 35, 62, 168, 121, 19, 62, 214, 232, 198, 61, 157, 14, 233, 189, 208, 238, 5, 62, 127, 115, 199, 189, 87, 49, 224, 189, 114, 85, 54, 61, 180, 197, 230, 60, 162, 16, 12, 190, 100, 135, 219, 189, 49, 212, 185, 189, 45, 5, 29, 62, 25, 14, 137, 189, 188, 147, 194, 189, 206, 246, 33, 190, 255, 230, 171, 60, 36, 213, 31, 190, 175, 170, 226, 61, 233, 129, 18, 62, 91, 212, 43, 190, 18, 200, 210, 61, 3, 94, 185, 61, 188, 26, 57, 190, 44, 162, 143, 188, 81, 32, 162, 188, 193, 242, 79, 189, 129, 250, 194, 190, 72, 66, 129, 61, 110, 155, 240, 61, 10, 72, 12, 190, 201, 220, 13, 190, 198, 182, 163, 60, 209, 250, 17, 60, 88, 45, 26, 62, 254, 113, 60, 190, 120, 249, 29, 60, 44, 110, 246, 188, 95, 28, 10, 190, 6, 78, 173, 188, 130, 66, 149, 189, 192, 66, 127, 189, 10, 90, 111, 62, 252, 106, 196, 189, 21, 160, 48, 190, 234, 109, 138, 62, 137, 249, 220, 61, 73, 181, 49, 190, 4, 176, 18, 190, 73, 103, 207, 61, 243, 35, 68, 190, 140, 171, 144, 186, 167, 20, 236, 189, 27, 86, 42, 62, 212, 131, 127, 188, 242, 193, 89, 61, 14, 19, 183, 189, 10, 94, 41, 62, 37, 143, 70, 61, 173, 91, 187, 62, 110, 17, 175, 61, 161, 111, 60, 190, 192, 199, 58, 189, 115, 14, 13, 189, 126, 199, 13, 62, 69, 255, 162, 61, 35, 75, 58, 190, 172, 231, 136, 189, 10, 244, 115, 60, 34, 243, 58, 61, 14, 31, 56, 190, 234, 72, 76, 190, 179, 86, 179, 60, 245, 109, 36, 60, 68, 6, 19, 61, 84, 248, 78, 61, 194, 116, 37, 62, 83, 131, 144, 189, 158, 155, 54, 190, 9, 25, 9, 62, 213, 146, 105, 60, 90, 30, 151, 188, 9, 201, 166, 61, 146, 170, 124, 60, 19, 108, 22, 62, 25, 143, 158, 61, 190, 167, 216, 189, 151, 41, 68, 61, 84, 234, 108, 62, 154, 97, 21, 190, 54, 64, 104, 189, 162, 160, 142, 190, 129, 160, 95, 61, 125, 184, 73, 62, 67, 232, 247, 61, 38, 211, 51, 189, 190, 174, 242, 188, 159, 5, 63, 61, 170, 222, 20, 190, 176, 25, 19, 62, 61, 173, 11, 62, 251, 96, 252, 60, 166, 206, 115, 62, 31, 206, 246, 61, 49, 92, 140, 189, 46, 249, 191, 60, 237, 116, 76, 62, 197, 209, 162, 61, 10, 100, 177, 61, 22, 115, 6, 62, 171, 72, 231, 59, 117, 171, 131, 189, 39, 20, 68, 190, 129, 69, 134, 189, 155, 245, 243, 61, 94, 174, 190, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 49, 160, 188, 183, 116, 28, 61, 29, 73, 42, 62, 101, 244, 28, 190, 76, 47, 228, 61, 239, 218, 147, 189, 247, 34, 165, 187, 36, 123, 93, 59, 96, 124, 155, 61, 100, 242, 243, 61, 209, 164, 58, 62, 147, 213, 238, 189, 26, 167, 217, 188, 22, 27, 40, 61, 99, 99, 115, 62, 27, 140, 75, 190, 10, 42, 211, 189, 83, 67, 1, 61, 84, 74, 142, 61, 26, 222, 38, 62, 142, 184, 168, 59, 186, 107, 5, 62, 189, 201, 51, 190, 252, 169, 21, 189, 47, 246, 26, 62, 103, 72, 71, 62, 133, 217, 155, 189, 115, 163, 149, 189, 124, 101, 68, 190, 40, 103, 70, 61, 184, 164, 15, 62, 216, 130, 203, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 161, 144, 189, 36, 191, 133, 190, 240, 102, 128, 61, 227, 179, 96, 61, 139, 153, 233, 189, 131, 190, 132, 62, 45, 46, 94, 189, 190, 21, 48, 189, 220, 136, 170, 61, 76, 188, 58, 62, 24, 36, 15, 62, 121, 166, 64, 61, 5, 140, 13, 62, 50, 108, 143, 190, 15, 7, 51, 190, 197, 51, 238, 60, 140, 124, 251, 61, 241, 112, 180, 62, 45, 222, 145, 61, 136, 44, 67, 190, 194, 114, 26, 60, 190, 203, 12, 190, 200, 126, 12, 62, 228, 111, 217, 60, 218, 90, 194, 62, 33, 79, 140, 62, 0, 56, 13, 62, 245, 43, 178, 61, 32, 147, 53, 61, 14, 92, 149, 62, 82, 205, 129, 190, 205, 25, 96, 62, 160, 52, 187, 189, 75, 236, 201, 61, 20, 165, 54, 190, 70, 233, 163, 61, 165, 112, 29, 190, 60, 80, 113, 61, 83, 145, 98, 190, 20, 157, 2, 62, 187, 21, 37, 190, 116, 45, 174, 61, 228, 146, 85, 190, 138, 186, 204, 189, 187, 224, 30, 190, 138, 48, 13, 61, 133, 93, 55, 190, 145, 25, 206, 61, 130, 221, 98, 58, 97, 197, 213, 61, 172, 105, 231, 60, 52, 1, 3, 190, 157, 69, 232, 61, 90, 27, 195, 61, 209, 91, 137, 188, 116, 200, 29, 62, 127, 49, 71, 190, 252, 109, 77, 62, 254, 44, 139, 61, 96, 211, 98, 59, 20, 136, 66, 189, 231, 111, 211, 189, 161, 10, 111, 190, 114, 242, 32, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {30, 248, 85, 189, 11, 215, 78, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {126, 22, 108, 191, 115, 17, 107, 63, 41, 242, 137, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {13, 89, 8, 192, 84, 162, 10, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0090/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}