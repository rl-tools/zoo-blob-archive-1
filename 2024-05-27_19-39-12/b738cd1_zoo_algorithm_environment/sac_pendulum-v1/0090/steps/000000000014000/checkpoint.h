// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 23, 132, 63, 62, 131, 65, 63, 57, 246, 153, 62, 178, 1, 3, 189, 106, 194, 29, 191, 6, 138, 68, 62, 250, 76, 246, 190, 195, 0, 151, 62, 159, 210, 145, 190, 11, 225, 144, 190, 165, 135, 76, 191, 187, 206, 84, 191, 130, 231, 15, 63, 76, 16, 202, 189, 231, 41, 19, 191, 115, 50, 36, 191, 188, 17, 129, 62, 173, 140, 27, 62, 80, 6, 254, 62, 142, 64, 22, 190, 194, 181, 180, 187, 6, 84, 252, 62, 129, 130, 66, 63, 72, 73, 245, 190, 156, 20, 48, 191, 252, 172, 150, 63, 161, 207, 147, 62, 208, 97, 240, 61, 48, 210, 57, 191, 105, 47, 128, 62, 240, 52, 87, 61, 237, 193, 141, 63, 248, 177, 116, 62, 71, 73, 7, 62, 253, 235, 200, 188, 38, 242, 29, 60, 222, 91, 225, 62, 60, 202, 104, 191, 34, 203, 135, 190, 218, 153, 39, 191, 127, 59, 165, 190, 134, 127, 190, 190, 78, 249, 217, 62, 250, 31, 15, 63, 84, 135, 76, 62, 118, 58, 86, 62, 145, 209, 96, 63, 50, 168, 40, 191, 209, 123, 232, 62, 105, 92, 64, 191, 10, 30, 212, 62, 136, 78, 101, 62, 94, 101, 131, 63, 249, 154, 217, 62, 166, 169, 85, 191, 89, 154, 73, 191, 190, 39, 18, 62, 12, 127, 59, 63, 144, 105, 67, 191, 38, 243, 221, 190, 103, 163, 24, 61, 231, 106, 125, 63, 155, 113, 69, 62, 226, 68, 22, 191, 97, 9, 38, 191, 254, 163, 166, 191, 43, 176, 141, 62, 74, 46, 248, 189, 137, 120, 44, 63, 138, 244, 41, 63, 44, 242, 171, 63, 9, 106, 153, 62, 136, 187, 186, 62, 159, 44, 50, 63, 233, 136, 174, 62, 83, 190, 11, 190, 81, 209, 4, 191, 155, 141, 40, 188, 9, 30, 25, 191, 149, 204, 141, 191, 84, 180, 43, 190, 182, 52, 85, 188, 170, 164, 53, 63, 231, 227, 73, 191, 154, 59, 14, 191, 136, 16, 143, 63, 59, 244, 218, 61, 11, 57, 169, 190, 57, 42, 141, 187, 138, 232, 60, 63, 76, 66, 183, 189, 209, 45, 86, 191, 154, 162, 184, 62, 113, 0, 23, 190, 185, 49, 142, 190, 58, 222, 209, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 146, 12, 191, 48, 190, 211, 62, 102, 144, 36, 63, 69, 5, 97, 189, 42, 40, 180, 190, 155, 202, 54, 63, 220, 187, 25, 191, 43, 97, 138, 62, 243, 253, 56, 63, 248, 181, 185, 62, 128, 148, 158, 58, 85, 114, 122, 190, 240, 159, 4, 63, 91, 192, 254, 60, 132, 145, 222, 190, 127, 146, 123, 61, 202, 166, 1, 63, 111, 86, 250, 61, 249, 158, 162, 190, 162, 193, 129, 190, 96, 214, 74, 188, 193, 57, 141, 190, 254, 55, 6, 63, 179, 157, 68, 62, 32, 170, 44, 62, 170, 224, 6, 63, 224, 7, 15, 63, 210, 175, 132, 190, 15, 132, 99, 62, 29, 88, 12, 190, 211, 132, 30, 62, 148, 246, 65, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 154, 8, 62, 98, 33, 143, 61, 192, 156, 117, 189, 115, 2, 125, 61, 176, 101, 56, 190, 38, 116, 21, 190, 228, 30, 157, 189, 180, 143, 161, 188, 142, 77, 26, 189, 75, 10, 218, 188, 254, 40, 31, 62, 43, 187, 144, 61, 34, 97, 18, 62, 1, 72, 30, 61, 24, 128, 217, 187, 168, 100, 25, 188, 80, 225, 232, 189, 152, 122, 11, 62, 251, 113, 8, 189, 112, 188, 25, 62, 97, 193, 147, 188, 8, 81, 195, 189, 254, 66, 216, 188, 125, 66, 241, 188, 187, 31, 250, 189, 121, 193, 38, 190, 167, 210, 171, 189, 88, 213, 26, 60, 78, 16, 177, 189, 40, 106, 177, 60, 248, 210, 25, 190, 31, 151, 114, 60, 12, 93, 252, 61, 103, 67, 141, 190, 76, 169, 191, 62, 118, 245, 214, 61, 93, 202, 137, 189, 119, 20, 212, 62, 108, 235, 201, 189, 216, 55, 174, 62, 30, 123, 169, 62, 42, 165, 241, 190, 210, 40, 155, 62, 60, 79, 188, 61, 90, 117, 162, 62, 110, 51, 72, 62, 228, 47, 29, 191, 118, 30, 39, 190, 56, 225, 0, 191, 162, 127, 203, 61, 45, 160, 204, 62, 122, 181, 160, 190, 5, 104, 77, 62, 200, 106, 179, 62, 222, 66, 23, 191, 47, 165, 161, 62, 245, 121, 110, 62, 53, 80, 62, 189, 28, 11, 55, 62, 204, 31, 77, 62, 22, 69, 251, 58, 231, 232, 81, 191, 74, 245, 137, 61, 209, 136, 38, 190, 32, 164, 164, 190, 234, 13, 188, 61, 125, 243, 134, 186, 121, 103, 181, 61, 103, 25, 137, 189, 60, 132, 143, 188, 147, 4, 17, 62, 109, 115, 49, 62, 230, 187, 33, 62, 100, 44, 9, 62, 80, 112, 124, 190, 251, 228, 18, 62, 114, 149, 0, 62, 235, 34, 8, 190, 16, 15, 45, 191, 136, 139, 14, 62, 128, 38, 94, 62, 187, 245, 73, 191, 71, 153, 50, 190, 47, 107, 57, 189, 132, 252, 138, 190, 177, 135, 196, 61, 245, 160, 232, 189, 184, 165, 135, 62, 203, 237, 9, 190, 236, 127, 206, 188, 137, 86, 227, 189, 65, 98, 158, 189, 47, 185, 191, 62, 217, 193, 184, 189, 166, 197, 115, 189, 87, 206, 154, 61, 182, 143, 246, 189, 22, 255, 249, 188, 44, 214, 213, 61, 172, 3, 50, 62, 203, 130, 130, 185, 238, 120, 113, 61, 39, 93, 46, 62, 74, 112, 41, 190, 89, 60, 36, 61, 208, 65, 255, 60, 114, 187, 167, 61, 124, 217, 241, 61, 41, 1, 205, 189, 75, 148, 47, 190, 53, 120, 131, 60, 79, 94, 9, 189, 129, 242, 195, 189, 242, 77, 182, 189, 195, 234, 23, 62, 167, 14, 45, 62, 80, 215, 53, 189, 195, 51, 21, 190, 84, 106, 33, 190, 107, 15, 24, 190, 139, 248, 52, 189, 35, 73, 226, 189, 99, 171, 36, 190, 59, 93, 48, 190, 74, 74, 14, 190, 237, 22, 28, 62, 208, 124, 129, 61, 214, 171, 11, 190, 187, 146, 65, 62, 203, 48, 3, 62, 73, 225, 213, 61, 77, 183, 156, 61, 198, 135, 50, 190, 109, 146, 66, 62, 191, 42, 196, 188, 178, 59, 41, 62, 52, 233, 194, 61, 64, 122, 148, 62, 175, 15, 207, 189, 251, 26, 7, 188, 39, 129, 109, 62, 174, 11, 91, 62, 139, 122, 99, 61, 218, 4, 211, 60, 185, 77, 41, 62, 106, 249, 25, 190, 223, 3, 194, 62, 163, 42, 138, 188, 128, 177, 94, 190, 54, 234, 32, 61, 133, 192, 147, 61, 152, 11, 49, 62, 151, 10, 254, 60, 60, 201, 26, 62, 228, 103, 159, 189, 82, 233, 93, 62, 81, 94, 22, 190, 221, 144, 202, 189, 17, 115, 42, 188, 246, 156, 47, 62, 28, 46, 45, 191, 173, 85, 109, 60, 78, 18, 118, 62, 135, 193, 126, 62, 154, 247, 30, 62, 237, 49, 168, 190, 130, 12, 77, 189, 56, 223, 250, 61, 132, 81, 227, 189, 184, 22, 199, 62, 174, 12, 232, 190, 86, 102, 180, 188, 81, 163, 86, 62, 1, 33, 70, 189, 97, 105, 183, 189, 122, 71, 77, 62, 136, 140, 164, 62, 144, 251, 45, 191, 220, 226, 3, 191, 198, 64, 44, 62, 74, 40, 191, 190, 52, 41, 175, 62, 170, 86, 227, 190, 171, 198, 32, 191, 148, 253, 16, 191, 137, 182, 24, 189, 106, 154, 187, 189, 104, 229, 56, 62, 67, 245, 30, 62, 202, 197, 39, 191, 23, 35, 18, 63, 195, 243, 93, 191, 33, 83, 137, 189, 20, 107, 135, 190, 7, 23, 24, 62, 130, 195, 37, 191, 163, 139, 191, 189, 57, 226, 221, 62, 49, 168, 110, 61, 188, 220, 139, 190, 34, 124, 167, 62, 138, 203, 131, 190, 135, 248, 2, 189, 2, 48, 84, 61, 159, 53, 53, 192, 226, 11, 74, 61, 45, 25, 215, 61, 97, 148, 236, 62, 93, 87, 131, 190, 236, 207, 58, 189, 197, 52, 146, 189, 229, 184, 152, 61, 78, 40, 153, 188, 228, 201, 16, 191, 69, 182, 85, 62, 145, 255, 35, 190, 166, 45, 23, 190, 73, 191, 74, 189, 96, 27, 95, 189, 217, 13, 210, 61, 180, 127, 219, 62, 133, 136, 150, 62, 144, 239, 175, 190, 14, 145, 212, 189, 30, 75, 209, 188, 129, 233, 134, 189, 208, 40, 13, 62, 205, 88, 58, 186, 220, 173, 143, 61, 157, 221, 93, 188, 101, 119, 172, 189, 233, 153, 188, 189, 131, 102, 30, 189, 30, 127, 218, 61, 228, 217, 19, 190, 69, 28, 26, 188, 176, 254, 152, 189, 52, 83, 50, 190, 23, 149, 57, 61, 17, 165, 114, 189, 171, 80, 254, 188, 1, 145, 131, 61, 36, 231, 52, 190, 215, 173, 8, 189, 251, 83, 233, 189, 194, 227, 139, 189, 158, 216, 43, 189, 4, 163, 114, 60, 137, 174, 247, 59, 16, 141, 36, 189, 134, 194, 14, 190, 41, 89, 155, 189, 133, 149, 199, 61, 102, 158, 253, 189, 27, 181, 208, 189, 134, 76, 15, 62, 149, 73, 223, 60, 238, 230, 205, 189, 156, 151, 230, 189, 226, 217, 22, 190, 110, 146, 12, 59, 203, 129, 71, 188, 198, 247, 74, 61, 165, 255, 14, 190, 74, 243, 36, 190, 154, 141, 43, 62, 116, 84, 139, 60, 62, 112, 46, 190, 205, 201, 17, 59, 0, 37, 181, 189, 164, 236, 248, 61, 42, 138, 187, 188, 213, 217, 198, 189, 23, 225, 253, 61, 24, 178, 157, 188, 225, 37, 6, 189, 39, 55, 24, 61, 189, 52, 23, 190, 52, 6, 42, 190, 232, 48, 209, 188, 81, 249, 245, 60, 36, 61, 3, 62, 16, 132, 42, 190, 163, 209, 23, 61, 102, 120, 229, 187, 16, 83, 19, 61, 178, 23, 131, 189, 7, 15, 61, 61, 28, 145, 106, 191, 212, 205, 53, 60, 192, 5, 186, 188, 64, 210, 29, 190, 224, 248, 66, 63, 110, 157, 161, 188, 198, 157, 194, 189, 203, 13, 25, 61, 145, 145, 48, 61, 111, 154, 199, 60, 239, 48, 183, 190, 176, 35, 120, 61, 113, 2, 190, 61, 238, 210, 165, 189, 1, 123, 102, 191, 200, 26, 189, 62, 85, 6, 183, 62, 91, 40, 110, 189, 42, 196, 151, 190, 213, 150, 33, 63, 125, 32, 148, 190, 218, 199, 13, 191, 114, 57, 94, 62, 123, 157, 161, 190, 168, 95, 156, 190, 194, 105, 183, 61, 17, 78, 153, 189, 30, 211, 142, 59, 20, 190, 233, 62, 143, 195, 186, 61, 75, 159, 229, 189, 238, 78, 219, 189, 105, 206, 222, 190, 224, 231, 32, 62, 145, 105, 121, 189, 75, 209, 125, 190, 218, 67, 51, 189, 74, 233, 130, 187, 45, 32, 10, 190, 73, 157, 69, 62, 108, 76, 156, 188, 8, 243, 227, 61, 110, 217, 192, 191, 93, 53, 97, 189, 69, 113, 69, 62, 179, 99, 46, 190, 76, 7, 214, 191, 137, 6, 170, 61, 221, 196, 200, 61, 180, 184, 47, 190, 89, 205, 41, 190, 131, 238, 4, 62, 77, 97, 3, 191, 1, 204, 7, 190, 186, 14, 13, 62, 116, 143, 124, 60, 159, 240, 41, 190, 168, 40, 134, 62, 243, 233, 129, 190, 57, 124, 183, 61, 81, 196, 142, 62, 63, 26, 37, 62, 81, 221, 157, 61, 10, 241, 166, 189, 69, 5, 1, 190, 127, 149, 41, 190, 26, 43, 219, 61, 128, 3, 205, 189, 218, 118, 23, 62, 210, 135, 241, 189, 212, 140, 219, 189, 131, 132, 104, 189, 174, 114, 14, 190, 252, 58, 212, 61, 97, 28, 136, 188, 201, 124, 169, 189, 242, 26, 8, 189, 204, 7, 44, 190, 89, 148, 154, 61, 148, 64, 135, 188, 165, 121, 130, 189, 80, 61, 187, 189, 200, 211, 75, 189, 63, 175, 123, 189, 196, 231, 30, 190, 4, 132, 6, 189, 33, 103, 234, 189, 149, 56, 93, 61, 100, 46, 48, 190, 62, 200, 125, 61, 55, 193, 1, 190, 65, 82, 213, 61, 18, 181, 233, 189, 245, 179, 184, 189, 71, 64, 183, 189, 197, 251, 33, 62, 72, 213, 137, 60, 105, 29, 93, 62, 4, 223, 100, 61, 12, 116, 121, 189, 101, 186, 129, 62, 212, 37, 229, 190, 162, 92, 10, 61, 221, 220, 106, 62, 137, 227, 102, 191, 170, 42, 176, 62, 211, 26, 212, 191, 237, 21, 16, 189, 6, 247, 158, 61, 56, 34, 50, 60, 121, 27, 162, 191, 53, 171, 83, 61, 15, 58, 185, 62, 209, 71, 133, 190, 113, 56, 224, 189, 70, 54, 140, 62, 211, 6, 173, 191, 20, 18, 193, 61, 156, 173, 57, 62, 90, 210, 59, 61, 255, 50, 97, 190, 170, 8, 104, 189, 216, 60, 51, 190, 42, 249, 75, 189, 241, 91, 147, 190, 196, 99, 42, 190, 120, 144, 80, 62, 234, 185, 131, 190, 122, 254, 79, 62, 238, 30, 32, 62, 204, 249, 83, 62, 174, 107, 184, 61, 155, 33, 5, 188, 231, 179, 2, 62, 204, 188, 150, 60, 194, 40, 153, 62, 93, 185, 149, 62, 41, 220, 15, 62, 225, 30, 164, 62, 14, 126, 4, 61, 88, 111, 46, 62, 22, 48, 100, 62, 120, 0, 253, 61, 51, 195, 186, 188, 180, 217, 208, 189, 101, 43, 42, 62, 189, 187, 148, 62, 136, 29, 63, 190, 76, 94, 225, 61, 36, 228, 31, 58, 35, 107, 137, 190, 163, 86, 67, 62, 45, 209, 39, 62, 32, 215, 151, 189, 1, 242, 89, 62, 83, 238, 3, 61, 171, 215, 83, 190, 232, 184, 216, 190, 88, 238, 61, 62, 242, 237, 140, 189, 35, 79, 21, 62, 248, 52, 97, 62, 52, 50, 2, 62, 41, 65, 68, 189, 22, 86, 209, 60, 165, 18, 91, 189, 90, 15, 45, 62, 117, 109, 223, 62, 242, 158, 138, 61, 187, 77, 85, 189, 107, 37, 222, 60, 26, 134, 35, 62, 217, 71, 201, 62, 6, 47, 194, 61, 201, 247, 76, 190, 37, 136, 37, 189, 49, 111, 12, 59, 221, 73, 83, 189, 93, 133, 88, 188, 231, 152, 160, 189, 90, 95, 232, 189, 112, 35, 18, 190, 63, 164, 17, 62, 120, 184, 160, 62, 84, 211, 126, 60, 12, 69, 53, 61, 165, 87, 29, 190, 221, 113, 109, 62, 9, 1, 174, 61, 91, 206, 63, 190, 15, 196, 133, 62, 160, 211, 93, 61, 147, 74, 184, 190, 125, 26, 210, 62, 217, 231, 141, 189, 1, 233, 173, 61, 61, 33, 169, 62, 14, 23, 67, 191, 204, 214, 9, 190, 94, 172, 124, 62, 61, 239, 174, 191, 110, 176, 198, 62, 221, 1, 105, 191, 232, 244, 48, 62, 215, 226, 209, 61, 149, 213, 82, 61, 24, 47, 108, 191, 154, 77, 227, 61, 225, 37, 4, 63, 145, 183, 162, 189, 27, 73, 11, 190, 148, 87, 183, 62, 7, 74, 82, 191, 50, 242, 0, 190, 107, 20, 175, 61, 24, 215, 106, 190, 233, 5, 115, 190, 140, 123, 161, 189, 236, 32, 82, 190, 225, 93, 242, 189, 64, 223, 132, 190, 165, 203, 254, 189, 204, 47, 20, 190, 245, 199, 41, 62, 120, 243, 38, 190, 116, 158, 18, 190, 47, 27, 24, 62, 208, 127, 56, 190, 194, 197, 76, 189, 153, 115, 40, 190, 232, 117, 173, 60, 182, 83, 39, 190, 189, 33, 134, 188, 53, 27, 64, 190, 186, 161, 114, 188, 162, 72, 41, 190, 202, 185, 185, 61, 109, 249, 190, 61, 74, 105, 238, 189, 75, 124, 160, 60, 162, 129, 186, 189, 199, 200, 198, 189, 59, 95, 139, 189, 193, 24, 253, 61, 139, 125, 55, 189, 253, 249, 15, 62, 221, 204, 39, 190, 32, 175, 122, 61, 204, 45, 202, 189, 189, 208, 41, 60, 139, 87, 14, 190, 104, 118, 54, 190, 193, 33, 59, 61, 255, 237, 89, 61, 73, 80, 180, 61, 134, 162, 5, 62, 195, 149, 22, 191, 34, 191, 220, 61, 73, 191, 86, 189, 228, 175, 132, 191, 63, 158, 187, 62, 114, 171, 148, 62, 214, 62, 199, 60, 92, 163, 109, 191, 85, 82, 213, 62, 203, 108, 135, 61, 152, 154, 72, 190, 201, 65, 206, 61, 6, 161, 59, 191, 116, 205, 210, 190, 166, 51, 187, 190, 145, 40, 55, 190, 229, 38, 177, 61, 184, 8, 245, 189, 141, 67, 22, 190, 102, 58, 91, 62, 186, 22, 41, 190, 104, 44, 131, 191, 179, 67, 18, 62, 239, 84, 105, 190, 88, 247, 92, 190, 47, 216, 198, 61, 156, 94, 106, 62, 97, 239, 4, 191, 43, 71, 148, 62, 216, 204, 175, 62, 181, 214, 39, 190, 23, 243, 212, 189, 238, 131, 153, 189, 72, 146, 244, 189, 53, 12, 98, 189, 122, 78, 54, 190, 49, 59, 207, 189, 99, 73, 78, 61, 111, 155, 90, 61, 131, 212, 107, 60, 216, 159, 211, 189, 141, 182, 16, 190, 199, 88, 75, 187, 84, 159, 50, 190, 198, 75, 230, 189, 121, 163, 160, 189, 241, 238, 226, 188, 143, 227, 139, 60, 90, 52, 65, 189, 118, 177, 178, 189, 1, 14, 176, 61, 75, 192, 83, 190, 4, 119, 164, 61, 148, 181, 19, 62, 22, 174, 34, 62, 165, 209, 21, 190, 215, 9, 1, 62, 164, 143, 2, 62, 121, 158, 245, 189, 88, 81, 83, 189, 211, 10, 2, 190, 177, 75, 34, 190, 156, 23, 255, 189, 97, 238, 42, 189, 136, 130, 202, 188, 147, 119, 26, 189, 131, 70, 155, 62, 188, 135, 126, 62, 168, 198, 210, 189, 187, 54, 164, 62, 114, 138, 160, 61, 210, 42, 215, 61, 217, 246, 67, 61, 131, 132, 143, 188, 81, 210, 37, 60, 160, 146, 32, 62, 124, 167, 199, 62, 13, 214, 128, 189, 135, 224, 251, 190, 5, 143, 124, 190, 88, 46, 146, 189, 187, 69, 40, 190, 154, 42, 131, 62, 169, 174, 179, 189, 210, 94, 19, 189, 241, 27, 17, 62, 230, 88, 222, 189, 170, 173, 89, 62, 77, 208, 45, 62, 130, 184, 16, 62, 246, 177, 132, 186, 63, 160, 52, 62, 213, 244, 137, 189, 200, 31, 186, 190, 196, 132, 152, 188, 61, 131, 226, 59, 109, 241, 7, 191, 45, 92, 215, 189, 168, 147, 37, 189, 188, 91, 92, 190, 120, 72, 177, 61, 81, 165, 113, 189, 231, 24, 49, 190, 111, 5, 112, 190, 176, 178, 82, 190, 155, 124, 135, 61, 220, 49, 95, 190, 98, 196, 17, 190, 4, 139, 126, 61, 15, 23, 48, 62, 182, 134, 159, 190, 159, 88, 246, 189, 112, 117, 32, 62, 112, 150, 182, 190, 159, 60, 218, 62, 148, 137, 136, 61, 96, 204, 247, 189, 184, 157, 113, 190, 166, 182, 193, 61, 223, 236, 18, 191, 239, 66, 149, 190, 228, 171, 128, 62, 144, 30, 201, 61, 230, 234, 72, 61, 138, 133, 225, 190, 106, 33, 69, 190, 91, 55, 131, 62, 200, 157, 181, 61, 65, 32, 74, 63, 98, 56, 150, 189, 226, 225, 195, 61, 237, 100, 95, 62, 243, 144, 38, 190, 3, 108, 15, 190, 217, 0, 219, 189, 229, 18, 131, 62, 104, 14, 169, 60, 243, 118, 209, 189, 206, 40, 152, 62, 26, 94, 242, 60, 249, 91, 124, 62, 99, 229, 2, 61, 171, 237, 247, 62, 74, 104, 156, 190, 221, 19, 5, 62, 13, 83, 222, 61, 80, 177, 170, 62, 106, 45, 228, 189, 117, 252, 37, 191, 192, 245, 67, 187, 38, 132, 188, 190, 179, 120, 169, 62, 170, 86, 145, 62, 19, 8, 78, 62, 117, 132, 53, 59, 64, 102, 108, 62, 123, 144, 29, 191, 116, 0, 161, 190, 52, 23, 221, 62, 28, 187, 145, 61, 108, 88, 96, 61, 135, 204, 141, 189, 119, 71, 41, 190, 196, 233, 46, 190, 109, 161, 52, 188, 205, 162, 100, 189, 149, 190, 12, 62, 32, 203, 136, 189, 57, 114, 207, 189, 46, 218, 52, 190, 212, 39, 145, 189, 197, 11, 216, 186, 10, 213, 0, 190, 182, 113, 141, 61, 78, 183, 85, 61, 71, 161, 250, 61, 52, 118, 49, 190, 91, 216, 141, 61, 43, 232, 247, 61, 246, 70, 2, 62, 114, 197, 82, 189, 165, 180, 29, 190, 196, 240, 220, 189, 205, 189, 132, 189, 254, 248, 215, 188, 77, 226, 198, 61, 167, 155, 0, 61, 4, 83, 23, 190, 142, 188, 8, 60, 150, 215, 11, 62, 9, 30, 56, 60, 68, 196, 148, 188, 207, 216, 44, 63, 228, 188, 207, 61, 138, 141, 49, 191, 148, 90, 0, 190, 95, 115, 157, 190, 61, 251, 133, 190, 169, 85, 250, 189, 16, 103, 254, 189, 112, 139, 102, 190, 57, 108, 53, 61, 184, 157, 137, 190, 72, 103, 139, 60, 211, 75, 22, 189, 235, 90, 45, 60, 26, 229, 226, 62, 42, 18, 230, 190, 178, 33, 203, 61, 232, 185, 17, 62, 103, 160, 28, 189, 241, 103, 164, 190, 21, 120, 118, 190, 73, 220, 182, 61, 193, 249, 40, 61, 6, 199, 106, 62, 45, 16, 73, 62, 90, 224, 201, 190, 169, 226, 108, 191, 104, 12, 1, 190, 249, 224, 1, 191, 206, 18, 210, 61, 116, 106, 130, 61, 56, 182, 217, 61, 239, 65, 2, 191, 60, 134, 189, 189, 235, 106, 142, 190, 0, 138, 80, 191, 255, 31, 4, 62, 91, 7, 15, 62, 122, 103, 111, 189, 169, 151, 6, 191, 165, 31, 214, 61, 164, 156, 182, 61, 28, 250, 13, 191, 231, 74, 237, 61, 228, 35, 211, 189, 46, 199, 27, 190, 209, 24, 120, 191, 14, 23, 133, 189, 180, 95, 86, 62, 91, 127, 115, 190, 228, 247, 158, 188, 59, 204, 130, 62, 146, 88, 139, 190, 237, 67, 25, 191, 132, 91, 44, 62, 83, 139, 227, 189, 77, 54, 158, 189, 58, 150, 129, 61, 44, 101, 66, 62, 46, 242, 54, 191, 181, 147, 67, 62, 101, 46, 74, 62, 214, 148, 130, 190, 223, 90, 70, 190, 180, 21, 83, 62, 134, 21, 231, 190, 224, 175, 136, 62, 112, 162, 50, 191, 80, 219, 36, 190, 26, 232, 140, 62, 147, 45, 25, 62, 86, 163, 241, 61, 202, 166, 165, 62, 252, 0, 98, 190, 88, 198, 34, 62, 233, 103, 28, 62, 105, 211, 204, 191, 249, 48, 64, 62, 237, 179, 143, 62, 54, 134, 114, 63, 218, 102, 171, 189, 204, 160, 38, 191, 30, 174, 193, 190, 11, 23, 94, 190, 32, 38, 29, 191, 138, 110, 101, 191, 187, 13, 175, 61, 62, 103, 215, 190, 67, 79, 0, 191, 84, 211, 88, 190, 25, 56, 10, 61, 174, 218, 74, 62, 110, 173, 207, 62, 19, 100, 96, 189, 95, 137, 19, 191, 116, 240, 6, 191, 193, 113, 243, 190, 100, 49, 217, 62, 121, 251, 61, 61, 39, 193, 19, 62, 153, 140, 107, 189, 125, 29, 159, 190, 205, 69, 147, 189, 164, 166, 49, 62, 185, 250, 224, 190, 161, 149, 149, 62, 68, 37, 70, 191, 32, 240, 127, 189, 9, 9, 227, 188, 37, 35, 150, 61, 220, 206, 110, 191, 107, 12, 44, 61, 17, 134, 173, 62, 242, 81, 193, 61, 233, 203, 0, 61, 98, 46, 143, 62, 104, 40, 118, 191, 204, 22, 44, 62, 44, 170, 20, 62, 136, 114, 156, 190, 59, 5, 102, 190, 35, 67, 79, 62, 252, 26, 112, 189, 200, 61, 150, 61, 216, 255, 134, 61, 55, 100, 170, 190, 245, 239, 53, 62, 75, 185, 239, 189, 61, 216, 139, 190, 61, 139, 89, 190, 165, 122, 144, 62, 254, 226, 61, 62, 90, 139, 84, 190, 185, 188, 47, 60, 73, 241, 129, 188, 108, 238, 78, 190, 248, 126, 117, 62, 4, 236, 124, 190, 109, 89, 157, 189, 78, 99, 33, 190, 104, 61, 217, 61, 127, 205, 86, 62, 156, 159, 15, 190, 125, 9, 173, 190, 184, 228, 236, 190, 167, 242, 245, 190, 62, 76, 195, 190, 125, 25, 34, 60, 95, 122, 215, 190, 218, 122, 142, 61, 188, 253, 152, 190, 7, 107, 38, 190, 59, 7, 137, 190, 67, 150, 223, 62, 240, 199, 163, 62, 247, 242, 81, 190, 31, 125, 103, 62, 47, 226, 218, 190, 170, 29, 184, 190, 7, 131, 237, 190, 37, 66, 185, 61, 107, 239, 247, 60, 56, 235, 227, 189, 30, 121, 248, 60, 108, 132, 67, 189, 137, 140, 124, 189, 84, 32, 232, 189, 209, 99, 203, 187, 117, 68, 150, 61, 125, 142, 43, 190, 118, 132, 51, 61, 129, 133, 134, 61, 133, 77, 28, 62, 168, 121, 19, 62, 214, 232, 198, 61, 157, 14, 233, 189, 33, 183, 251, 61, 127, 115, 199, 189, 87, 49, 224, 189, 173, 66, 39, 61, 180, 197, 230, 60, 162, 16, 12, 190, 153, 16, 231, 189, 49, 212, 185, 189, 113, 131, 28, 62, 196, 218, 146, 189, 175, 27, 202, 189, 206, 246, 33, 190, 255, 230, 171, 60, 36, 213, 31, 190, 43, 170, 217, 61, 108, 218, 16, 62, 163, 16, 46, 191, 244, 105, 183, 60, 68, 41, 103, 62, 167, 133, 13, 191, 1, 70, 21, 62, 138, 62, 156, 61, 217, 21, 79, 189, 216, 63, 164, 189, 135, 218, 125, 62, 96, 1, 202, 189, 133, 31, 209, 190, 201, 220, 13, 190, 28, 219, 200, 191, 163, 96, 254, 189, 44, 92, 181, 190, 135, 178, 2, 63, 38, 125, 24, 190, 37, 42, 158, 189, 184, 217, 184, 190, 39, 23, 194, 188, 147, 106, 85, 190, 151, 136, 183, 190, 134, 106, 108, 62, 154, 88, 23, 189, 15, 5, 53, 190, 0, 36, 204, 61, 210, 85, 98, 189, 188, 149, 55, 62, 254, 200, 23, 62, 203, 138, 7, 62, 180, 139, 153, 190, 36, 254, 162, 189, 137, 14, 226, 61, 164, 154, 104, 62, 216, 66, 77, 61, 146, 62, 170, 61, 196, 54, 12, 190, 154, 231, 39, 62, 172, 87, 69, 61, 247, 246, 222, 62, 213, 129, 180, 61, 62, 215, 68, 61, 221, 225, 3, 190, 115, 14, 13, 189, 194, 98, 140, 62, 103, 37, 225, 61, 76, 115, 109, 190, 188, 171, 206, 189, 195, 187, 98, 62, 141, 127, 6, 189, 230, 171, 108, 62, 15, 143, 133, 190, 156, 154, 205, 188, 192, 176, 76, 61, 21, 195, 19, 60, 110, 164, 127, 62, 142, 2, 60, 62, 163, 58, 211, 61, 17, 108, 27, 190, 220, 213, 97, 62, 160, 176, 27, 190, 150, 102, 34, 190, 230, 11, 10, 62, 132, 215, 32, 61, 236, 42, 249, 189, 174, 248, 251, 61, 143, 177, 59, 190, 6, 137, 23, 189, 78, 160, 8, 63, 74, 58, 51, 191, 148, 104, 103, 189, 71, 205, 42, 190, 139, 45, 57, 191, 140, 230, 128, 62, 215, 133, 60, 191, 38, 211, 51, 189, 6, 114, 193, 61, 72, 186, 1, 190, 112, 41, 136, 191, 59, 82, 183, 62, 250, 116, 118, 62, 115, 173, 123, 189, 109, 121, 61, 62, 2, 83, 229, 62, 12, 106, 136, 191, 206, 28, 194, 189, 74, 112, 26, 62, 186, 28, 44, 190, 234, 197, 87, 189, 19, 250, 107, 61, 156, 45, 192, 190, 251, 140, 174, 189, 152, 247, 233, 189, 89, 149, 136, 189, 94, 23, 220, 61, 160, 223, 168, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 75, 226, 188, 7, 234, 13, 62, 197, 107, 45, 62, 101, 244, 28, 190, 174, 105, 134, 62, 198, 173, 220, 189, 6, 142, 21, 62, 36, 123, 93, 59, 96, 124, 155, 61, 117, 15, 51, 62, 181, 151, 141, 62, 247, 235, 237, 189, 49, 57, 229, 187, 235, 241, 11, 62, 135, 183, 177, 62, 211, 190, 44, 190, 227, 90, 6, 190, 160, 59, 251, 61, 203, 102, 97, 61, 129, 16, 165, 62, 36, 144, 133, 58, 36, 60, 67, 62, 235, 126, 61, 190, 30, 12, 67, 190, 69, 11, 62, 62, 158, 13, 135, 62, 216, 169, 167, 60, 88, 210, 211, 61, 175, 234, 73, 190, 63, 199, 218, 61, 30, 210, 132, 62, 28, 220, 43, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 107, 138, 189, 240, 221, 232, 190, 68, 161, 37, 186, 227, 179, 96, 61, 114, 76, 37, 190, 12, 231, 6, 63, 181, 9, 86, 63, 190, 21, 48, 189, 220, 136, 170, 61, 244, 150, 22, 63, 157, 230, 168, 62, 79, 239, 32, 61, 143, 231, 193, 62, 208, 41, 145, 190, 200, 183, 13, 190, 44, 181, 26, 63, 190, 229, 162, 61, 13, 246, 105, 63, 119, 59, 147, 60, 10, 99, 138, 190, 243, 191, 36, 190, 171, 68, 146, 190, 129, 229, 6, 62, 144, 235, 97, 191, 8, 200, 46, 63, 189, 197, 184, 63, 53, 107, 143, 62, 110, 183, 18, 63, 74, 13, 53, 61, 168, 162, 134, 63, 84, 91, 148, 190, 78, 172, 26, 63, 72, 36, 188, 189, 9, 85, 2, 62, 145, 101, 110, 190, 70, 233, 163, 61, 231, 180, 82, 190, 201, 93, 162, 61, 75, 165, 59, 190, 20, 157, 2, 62, 187, 21, 37, 190, 233, 122, 24, 61, 1, 229, 2, 191, 54, 56, 199, 189, 79, 83, 100, 190, 67, 115, 208, 61, 90, 183, 110, 190, 1, 104, 104, 62, 86, 113, 248, 188, 246, 24, 185, 62, 0, 4, 133, 60, 191, 94, 172, 189, 148, 216, 70, 63, 143, 28, 230, 61, 228, 131, 86, 188, 10, 251, 191, 61, 231, 86, 235, 188, 56, 225, 27, 62, 169, 202, 83, 189, 218, 22, 82, 189, 153, 87, 66, 189, 212, 216, 117, 189, 162, 184, 148, 190, 172, 211, 76, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 123, 68, 190, 10, 241, 25, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {177, 79, 37, 62, 185, 58, 125, 191, 122, 251, 182, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {114, 73, 3, 64, 238, 193, 68, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0090/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}