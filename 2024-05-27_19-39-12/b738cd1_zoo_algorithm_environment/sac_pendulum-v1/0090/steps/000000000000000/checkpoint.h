// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 234, 10, 63, 123, 195, 153, 62, 53, 54, 140, 62, 144, 110, 251, 62, 82, 112, 129, 190, 157, 148, 163, 62, 187, 239, 2, 191, 38, 181, 235, 62, 247, 208, 137, 190, 31, 64, 209, 190, 174, 203, 215, 62, 94, 193, 175, 190, 125, 29, 109, 62, 209, 14, 231, 62, 111, 190, 246, 190, 126, 92, 139, 187, 98, 23, 229, 61, 45, 174, 72, 62, 195, 44, 5, 63, 109, 32, 27, 190, 173, 177, 250, 59, 138, 75, 182, 62, 224, 136, 200, 62, 38, 131, 37, 190, 88, 178, 85, 190, 237, 232, 14, 63, 90, 87, 218, 62, 204, 20, 197, 62, 102, 149, 186, 190, 3, 70, 150, 190, 197, 236, 207, 189, 3, 244, 154, 62, 106, 247, 130, 61, 71, 73, 7, 62, 253, 235, 200, 188, 38, 242, 29, 60, 49, 95, 124, 62, 84, 104, 148, 62, 131, 208, 249, 188, 230, 234, 14, 191, 233, 86, 100, 62, 237, 165, 205, 190, 95, 200, 92, 62, 140, 171, 140, 62, 72, 204, 86, 60, 179, 84, 243, 62, 31, 166, 14, 63, 211, 87, 10, 191, 165, 147, 5, 63, 81, 10, 166, 190, 47, 216, 143, 190, 113, 175, 121, 62, 139, 42, 152, 61, 87, 18, 7, 63, 18, 142, 202, 190, 74, 55, 173, 190, 16, 48, 139, 190, 135, 80, 136, 61, 37, 22, 111, 190, 220, 54, 243, 190, 141, 249, 216, 189, 225, 133, 132, 189, 222, 176, 48, 62, 106, 35, 122, 190, 33, 191, 18, 63, 233, 27, 16, 191, 106, 224, 212, 62, 157, 26, 165, 190, 57, 223, 221, 62, 247, 212, 117, 62, 99, 61, 172, 62, 205, 42, 15, 63, 235, 50, 183, 61, 43, 236, 20, 60, 102, 230, 177, 62, 141, 82, 190, 61, 177, 1, 215, 190, 252, 233, 160, 190, 66, 183, 13, 191, 97, 53, 14, 191, 8, 120, 17, 191, 227, 137, 35, 190, 123, 108, 1, 63, 31, 168, 239, 190, 102, 235, 2, 191, 43, 152, 213, 62, 72, 132, 20, 62, 74, 20, 37, 190, 169, 99, 8, 191, 181, 21, 218, 62, 236, 28, 16, 63, 179, 57, 134, 190, 127, 75, 109, 62, 178, 78, 221, 61, 8, 244, 50, 190, 43, 54, 196, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 151, 19, 191, 184, 251, 171, 188, 40, 206, 186, 62, 224, 87, 11, 62, 189, 128, 251, 190, 22, 53, 17, 63, 102, 115, 19, 191, 90, 111, 210, 62, 75, 144, 226, 62, 22, 204, 165, 61, 113, 23, 184, 188, 85, 114, 122, 190, 31, 46, 187, 62, 235, 140, 34, 62, 209, 39, 134, 190, 238, 198, 80, 190, 128, 40, 168, 62, 223, 215, 149, 190, 157, 210, 168, 190, 58, 189, 24, 62, 160, 98, 71, 190, 122, 179, 16, 191, 250, 55, 5, 63, 112, 197, 2, 63, 205, 182, 68, 186, 161, 83, 233, 62, 84, 104, 16, 63, 179, 140, 31, 62, 124, 118, 27, 189, 157, 184, 55, 61, 128, 254, 129, 190, 71, 79, 128, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 103, 15, 62, 112, 130, 156, 61, 102, 142, 107, 189, 100, 176, 130, 61, 189, 28, 52, 190, 212, 129, 13, 190, 228, 30, 157, 189, 82, 130, 8, 188, 244, 195, 215, 188, 223, 52, 191, 188, 126, 248, 33, 62, 43, 187, 144, 61, 60, 24, 32, 62, 1, 72, 30, 61, 55, 241, 210, 187, 14, 219, 222, 187, 170, 214, 218, 189, 180, 215, 18, 62, 251, 113, 8, 189, 180, 144, 32, 62, 251, 215, 130, 188, 115, 213, 197, 189, 215, 175, 105, 188, 215, 181, 52, 188, 186, 56, 233, 189, 105, 75, 34, 190, 203, 63, 171, 189, 64, 115, 50, 60, 22, 209, 170, 189, 73, 247, 198, 60, 133, 47, 24, 190, 2, 62, 155, 60, 46, 185, 209, 188, 129, 137, 195, 186, 65, 232, 237, 60, 195, 22, 34, 190, 47, 97, 225, 61, 37, 121, 25, 62, 115, 205, 201, 189, 157, 229, 105, 189, 42, 161, 30, 62, 13, 33, 8, 61, 131, 123, 34, 189, 60, 79, 188, 61, 187, 103, 64, 188, 233, 5, 184, 189, 117, 205, 42, 190, 98, 120, 148, 189, 49, 193, 168, 189, 8, 41, 194, 188, 142, 18, 222, 61, 151, 174, 246, 189, 40, 7, 37, 61, 66, 117, 204, 61, 128, 247, 144, 189, 174, 185, 253, 60, 66, 74, 248, 61, 5, 109, 153, 61, 124, 75, 189, 61, 5, 63, 106, 189, 169, 86, 11, 62, 188, 209, 37, 190, 3, 180, 68, 61, 3, 147, 19, 189, 36, 190, 29, 190, 108, 152, 215, 60, 92, 115, 229, 60, 29, 112, 45, 62, 16, 214, 35, 190, 113, 213, 142, 61, 96, 27, 17, 62, 161, 30, 239, 61, 219, 178, 254, 61, 94, 157, 71, 188, 191, 104, 121, 189, 251, 228, 18, 62, 174, 9, 227, 61, 163, 118, 253, 188, 134, 187, 127, 61, 62, 163, 217, 187, 48, 173, 193, 61, 158, 67, 37, 190, 63, 159, 6, 189, 179, 186, 15, 190, 36, 83, 8, 190, 216, 87, 4, 62, 248, 161, 148, 189, 10, 145, 178, 186, 253, 230, 171, 61, 118, 145, 58, 61, 153, 74, 198, 61, 153, 120, 244, 189, 32, 162, 28, 62, 11, 147, 24, 62, 27, 5, 15, 187, 56, 99, 187, 61, 182, 143, 246, 189, 22, 255, 249, 188, 44, 214, 213, 61, 172, 3, 50, 62, 203, 130, 130, 185, 238, 120, 113, 61, 39, 93, 46, 62, 74, 112, 41, 190, 89, 60, 36, 61, 208, 65, 255, 60, 114, 187, 167, 61, 124, 217, 241, 61, 41, 1, 205, 189, 75, 148, 47, 190, 53, 120, 131, 60, 79, 94, 9, 189, 129, 242, 195, 189, 242, 77, 182, 189, 195, 234, 23, 62, 167, 14, 45, 62, 80, 215, 53, 189, 195, 51, 21, 190, 84, 106, 33, 190, 107, 15, 24, 190, 139, 248, 52, 189, 35, 73, 226, 189, 99, 171, 36, 190, 59, 93, 48, 190, 74, 74, 14, 190, 237, 22, 28, 62, 208, 124, 129, 61, 214, 171, 11, 190, 242, 165, 253, 188, 212, 133, 22, 61, 104, 55, 179, 188, 202, 148, 13, 60, 39, 78, 151, 189, 138, 135, 100, 188, 96, 192, 194, 188, 199, 204, 50, 189, 196, 142, 41, 189, 163, 50, 84, 61, 89, 246, 197, 189, 251, 26, 7, 188, 100, 44, 7, 186, 9, 115, 48, 62, 39, 100, 251, 61, 249, 10, 141, 61, 15, 173, 115, 189, 155, 165, 162, 188, 222, 36, 127, 61, 180, 186, 90, 61, 50, 61, 42, 190, 181, 13, 127, 188, 26, 245, 19, 188, 165, 192, 210, 189, 193, 174, 9, 61, 175, 60, 239, 188, 205, 184, 194, 189, 252, 246, 138, 61, 247, 56, 18, 190, 199, 95, 45, 189, 191, 25, 84, 189, 223, 162, 17, 62, 203, 145, 175, 189, 14, 190, 181, 189, 241, 215, 40, 62, 108, 190, 187, 61, 228, 136, 108, 189, 108, 204, 126, 189, 197, 127, 77, 189, 250, 163, 203, 59, 144, 93, 26, 62, 92, 208, 77, 61, 234, 190, 3, 190, 86, 102, 180, 188, 189, 96, 100, 61, 139, 214, 49, 190, 21, 232, 133, 61, 190, 58, 135, 61, 248, 152, 25, 189, 76, 145, 8, 62, 111, 57, 8, 189, 161, 252, 33, 59, 182, 227, 52, 62, 61, 229, 42, 62, 92, 210, 46, 190, 71, 166, 154, 61, 177, 220, 242, 189, 65, 232, 158, 189, 129, 107, 50, 190, 251, 41, 121, 61, 131, 247, 181, 189, 235, 216, 185, 61, 94, 201, 133, 189, 25, 148, 17, 190, 73, 68, 218, 59, 222, 77, 0, 190, 245, 11, 212, 189, 229, 102, 158, 60, 176, 0, 138, 61, 159, 151, 191, 61, 49, 168, 110, 61, 115, 17, 140, 189, 223, 36, 150, 189, 219, 64, 244, 188, 54, 222, 8, 190, 2, 48, 84, 61, 178, 78, 14, 190, 199, 25, 5, 190, 235, 145, 89, 60, 103, 52, 194, 61, 188, 97, 142, 189, 230, 37, 2, 61, 214, 16, 43, 62, 223, 78, 25, 62, 76, 216, 158, 60, 123, 90, 172, 189, 82, 163, 16, 62, 72, 55, 31, 190, 104, 71, 229, 189, 13, 117, 193, 60, 38, 8, 12, 190, 83, 195, 196, 61, 189, 144, 134, 61, 104, 102, 45, 62, 189, 240, 153, 189, 169, 251, 147, 189, 57, 133, 99, 188, 216, 3, 74, 189, 215, 8, 36, 62, 33, 89, 128, 59, 220, 173, 143, 61, 21, 217, 11, 60, 101, 119, 172, 189, 165, 211, 160, 189, 204, 242, 136, 188, 30, 127, 218, 61, 173, 248, 248, 189, 69, 28, 26, 188, 197, 54, 80, 189, 167, 137, 49, 190, 23, 149, 57, 61, 17, 165, 114, 189, 171, 80, 254, 188, 119, 129, 169, 61, 36, 231, 52, 190, 215, 173, 8, 189, 205, 219, 195, 189, 194, 227, 139, 189, 255, 156, 186, 188, 136, 0, 19, 61, 128, 213, 223, 60, 137, 124, 35, 189, 177, 245, 13, 190, 9, 198, 164, 189, 103, 117, 246, 61, 145, 237, 216, 189, 171, 95, 179, 189, 44, 31, 34, 62, 149, 73, 223, 60, 238, 230, 205, 189, 156, 151, 230, 189, 226, 217, 22, 190, 110, 146, 12, 59, 203, 129, 71, 188, 198, 247, 74, 61, 165, 255, 14, 190, 74, 243, 36, 190, 154, 141, 43, 62, 116, 84, 139, 60, 62, 112, 46, 190, 205, 201, 17, 59, 0, 37, 181, 189, 164, 236, 248, 61, 42, 138, 187, 188, 213, 217, 198, 189, 23, 225, 253, 61, 24, 178, 157, 188, 225, 37, 6, 189, 39, 55, 24, 61, 189, 52, 23, 190, 52, 6, 42, 190, 232, 48, 209, 188, 81, 249, 245, 60, 36, 61, 3, 62, 16, 132, 42, 190, 163, 209, 23, 61, 102, 120, 229, 187, 16, 83, 19, 61, 178, 23, 131, 189, 7, 15, 61, 61, 36, 129, 45, 190, 199, 43, 4, 62, 11, 164, 142, 189, 129, 204, 224, 60, 73, 240, 47, 62, 219, 114, 3, 190, 242, 81, 195, 189, 144, 210, 221, 61, 37, 246, 77, 189, 110, 212, 252, 189, 152, 182, 21, 62, 176, 35, 120, 61, 218, 245, 78, 189, 133, 222, 168, 60, 30, 180, 197, 188, 129, 118, 184, 189, 179, 37, 231, 61, 76, 108, 217, 61, 45, 92, 189, 189, 118, 200, 254, 189, 149, 70, 218, 60, 56, 213, 4, 190, 5, 41, 42, 62, 171, 137, 11, 62, 97, 36, 150, 189, 234, 92, 104, 188, 202, 62, 137, 189, 231, 60, 229, 61, 90, 179, 229, 187, 148, 135, 168, 189, 91, 78, 99, 61, 248, 149, 203, 60, 66, 232, 37, 61, 71, 114, 48, 62, 168, 50, 152, 61, 62, 179, 175, 189, 29, 131, 205, 189, 177, 25, 194, 189, 173, 33, 10, 190, 118, 50, 49, 62, 47, 35, 176, 60, 171, 89, 28, 61, 122, 157, 27, 190, 93, 53, 97, 189, 80, 233, 198, 61, 55, 38, 154, 60, 37, 19, 48, 190, 33, 137, 113, 60, 126, 43, 142, 189, 128, 145, 59, 59, 68, 123, 158, 60, 69, 25, 251, 189, 255, 178, 18, 190, 101, 75, 180, 189, 190, 201, 215, 60, 189, 129, 142, 61, 54, 8, 136, 189, 199, 108, 44, 62, 100, 54, 46, 190, 221, 217, 51, 62, 24, 64, 191, 61, 203, 182, 165, 61, 151, 44, 49, 62, 143, 94, 188, 186, 107, 43, 1, 190, 127, 149, 41, 190, 143, 137, 4, 62, 116, 248, 137, 189, 134, 132, 46, 62, 36, 178, 237, 189, 212, 140, 219, 189, 3, 85, 33, 189, 97, 162, 12, 190, 54, 172, 219, 61, 102, 156, 121, 188, 201, 124, 169, 189, 127, 245, 219, 188, 212, 7, 17, 190, 89, 148, 154, 61, 77, 213, 91, 60, 56, 200, 110, 189, 80, 61, 187, 189, 95, 71, 60, 189, 7, 123, 55, 189, 233, 36, 31, 190, 14, 141, 175, 59, 33, 103, 234, 189, 185, 136, 64, 61, 19, 112, 48, 190, 56, 206, 137, 61, 42, 55, 225, 189, 201, 208, 11, 62, 105, 128, 225, 189, 245, 179, 184, 189, 71, 64, 183, 189, 197, 251, 33, 62, 105, 73, 25, 62, 15, 181, 186, 60, 136, 200, 32, 62, 30, 153, 230, 60, 98, 190, 71, 61, 160, 184, 134, 61, 198, 83, 10, 61, 197, 143, 16, 62, 235, 233, 173, 59, 118, 72, 218, 61, 149, 103, 216, 189, 237, 21, 16, 189, 124, 93, 166, 189, 240, 162, 15, 62, 120, 178, 195, 60, 51, 180, 12, 190, 129, 3, 208, 60, 45, 156, 241, 60, 3, 207, 98, 60, 100, 108, 214, 60, 241, 20, 201, 61, 193, 170, 28, 62, 62, 52, 155, 187, 88, 149, 101, 189, 37, 227, 52, 190, 247, 206, 5, 190, 14, 13, 131, 61, 164, 83, 10, 189, 78, 73, 14, 190, 126, 65, 13, 190, 181, 198, 34, 62, 21, 167, 18, 190, 216, 93, 156, 60, 216, 154, 9, 62, 102, 24, 176, 60, 9, 114, 69, 189, 182, 40, 48, 62, 163, 18, 62, 189, 14, 42, 151, 60, 94, 102, 138, 61, 248, 29, 47, 62, 244, 234, 51, 62, 69, 75, 3, 62, 14, 126, 4, 61, 96, 199, 230, 189, 71, 187, 182, 61, 110, 154, 50, 62, 134, 214, 243, 61, 169, 21, 58, 189, 88, 9, 245, 61, 211, 208, 223, 189, 0, 255, 49, 189, 10, 170, 153, 61, 124, 74, 149, 189, 252, 6, 205, 189, 220, 69, 154, 187, 43, 78, 139, 61, 121, 163, 52, 190, 246, 70, 127, 61, 19, 253, 218, 189, 59, 104, 223, 188, 94, 106, 20, 190, 188, 150, 217, 60, 115, 30, 0, 190, 14, 77, 48, 61, 230, 240, 37, 61, 148, 95, 47, 189, 41, 157, 252, 189, 59, 203, 25, 62, 176, 134, 14, 190, 41, 62, 45, 62, 34, 72, 49, 62, 93, 24, 93, 187, 141, 102, 7, 190, 11, 247, 194, 61, 26, 134, 35, 62, 191, 85, 219, 61, 23, 61, 42, 61, 233, 62, 176, 189, 105, 111, 152, 60, 71, 203, 28, 190, 86, 221, 38, 61, 82, 107, 17, 190, 175, 232, 120, 61, 150, 133, 153, 189, 39, 227, 48, 190, 116, 10, 233, 61, 101, 46, 183, 61, 89, 232, 198, 188, 38, 193, 174, 189, 238, 231, 240, 189, 106, 199, 133, 61, 198, 116, 162, 61, 7, 19, 63, 189, 147, 51, 27, 62, 212, 51, 141, 188, 69, 97, 108, 61, 127, 66, 9, 62, 140, 212, 96, 60, 17, 57, 242, 61, 242, 176, 10, 62, 148, 1, 50, 62, 237, 229, 9, 190, 78, 167, 234, 61, 61, 41, 227, 189, 197, 141, 163, 61, 19, 238, 250, 61, 232, 244, 48, 62, 68, 77, 19, 189, 186, 171, 32, 62, 11, 110, 80, 189, 192, 115, 163, 58, 174, 206, 203, 61, 164, 171, 219, 189, 255, 72, 9, 61, 17, 75, 220, 61, 16, 114, 2, 62, 123, 195, 215, 189, 99, 140, 159, 189, 62, 159, 7, 190, 30, 77, 131, 187, 140, 149, 46, 190, 145, 196, 174, 61, 171, 94, 1, 190, 56, 48, 172, 61, 232, 100, 167, 189, 69, 194, 48, 190, 132, 89, 206, 61, 120, 243, 38, 190, 116, 158, 18, 190, 66, 59, 44, 62, 242, 7, 39, 190, 77, 62, 43, 189, 48, 0, 23, 190, 232, 117, 173, 60, 42, 244, 25, 190, 132, 193, 42, 188, 49, 59, 31, 190, 32, 181, 20, 188, 162, 72, 41, 190, 216, 151, 220, 61, 249, 237, 232, 61, 74, 105, 238, 189, 62, 244, 2, 61, 12, 230, 121, 189, 199, 200, 198, 189, 187, 73, 21, 189, 87, 26, 14, 62, 139, 125, 55, 189, 147, 145, 33, 62, 221, 204, 39, 190, 245, 5, 122, 61, 204, 45, 202, 189, 140, 110, 20, 61, 98, 133, 238, 189, 226, 93, 37, 190, 204, 245, 80, 61, 255, 237, 89, 61, 73, 80, 180, 61, 134, 162, 5, 62, 42, 0, 110, 61, 172, 248, 136, 61, 98, 108, 236, 61, 129, 221, 168, 189, 198, 115, 4, 62, 231, 232, 74, 189, 214, 62, 199, 60, 28, 228, 145, 61, 16, 163, 4, 62, 206, 124, 29, 62, 187, 98, 223, 60, 201, 65, 206, 61, 37, 153, 32, 190, 205, 241, 47, 190, 248, 156, 0, 61, 227, 139, 246, 189, 51, 203, 188, 61, 93, 226, 149, 61, 26, 182, 156, 60, 66, 216, 9, 62, 12, 187, 142, 61, 250, 39, 52, 59, 239, 211, 232, 189, 210, 41, 224, 189, 179, 14, 139, 189, 56, 128, 183, 61, 83, 134, 253, 61, 193, 74, 205, 189, 15, 83, 100, 189, 128, 213, 32, 61, 202, 245, 13, 190, 56, 147, 177, 189, 238, 131, 153, 189, 135, 2, 245, 189, 32, 141, 212, 188, 93, 232, 21, 190, 253, 107, 142, 189, 82, 13, 104, 61, 111, 155, 90, 61, 248, 77, 34, 61, 161, 106, 235, 189, 115, 96, 15, 190, 60, 178, 116, 187, 84, 159, 50, 190, 14, 62, 163, 189, 120, 41, 44, 189, 241, 238, 226, 188, 192, 83, 57, 61, 172, 197, 59, 189, 118, 177, 178, 189, 242, 236, 175, 61, 161, 86, 47, 190, 4, 119, 164, 61, 226, 14, 51, 62, 77, 144, 36, 62, 236, 197, 25, 190, 215, 9, 1, 62, 174, 92, 9, 62, 248, 161, 153, 189, 210, 238, 178, 188, 111, 210, 238, 189, 59, 86, 32, 190, 202, 23, 255, 189, 161, 40, 42, 189, 14, 90, 9, 190, 72, 154, 225, 189, 132, 140, 16, 62, 35, 212, 25, 62, 201, 205, 159, 61, 139, 73, 220, 61, 124, 173, 160, 61, 60, 62, 21, 190, 117, 181, 249, 189, 7, 222, 79, 189, 68, 33, 41, 190, 160, 146, 32, 62, 195, 99, 220, 61, 133, 44, 17, 190, 237, 60, 31, 190, 105, 113, 246, 189, 211, 112, 245, 189, 1, 188, 214, 188, 248, 217, 239, 188, 61, 229, 111, 61, 49, 242, 129, 61, 157, 116, 186, 61, 188, 65, 194, 188, 72, 44, 183, 189, 20, 168, 188, 61, 14, 30, 252, 59, 113, 0, 179, 189, 185, 35, 237, 60, 161, 205, 12, 61, 247, 3, 68, 61, 38, 9, 240, 188, 240, 61, 11, 61, 229, 31, 168, 189, 199, 23, 32, 190, 116, 155, 28, 188, 240, 129, 12, 190, 214, 61, 135, 61, 105, 164, 123, 61, 231, 24, 49, 190, 102, 37, 26, 190, 126, 241, 117, 60, 73, 162, 19, 190, 92, 132, 1, 62, 98, 196, 17, 190, 105, 119, 249, 59, 8, 214, 5, 189, 254, 24, 199, 189, 14, 36, 8, 190, 233, 98, 10, 189, 95, 57, 247, 188, 241, 120, 10, 62, 223, 72, 243, 61, 220, 245, 35, 60, 173, 59, 200, 189, 154, 174, 193, 61, 105, 90, 237, 189, 205, 114, 252, 189, 149, 100, 192, 61, 219, 204, 181, 189, 120, 63, 52, 61, 95, 222, 226, 188, 146, 171, 51, 190, 68, 212, 61, 61, 7, 68, 46, 61, 134, 94, 147, 61, 186, 36, 234, 189, 5, 131, 94, 61, 76, 31, 27, 62, 187, 30, 199, 61, 226, 22, 21, 189, 210, 235, 218, 189, 98, 104, 48, 62, 240, 104, 22, 62, 42, 194, 48, 190, 194, 228, 219, 61, 26, 94, 242, 60, 64, 178, 29, 62, 217, 97, 167, 189, 37, 121, 152, 189, 248, 163, 87, 189, 193, 136, 230, 61, 246, 140, 201, 60, 241, 171, 24, 190, 109, 174, 49, 62, 137, 92, 38, 190, 188, 240, 72, 188, 244, 67, 214, 187, 67, 91, 103, 61, 58, 205, 225, 60, 113, 244, 220, 61, 2, 92, 204, 189, 25, 18, 49, 62, 41, 47, 138, 61, 59, 52, 45, 62, 30, 161, 225, 189, 164, 207, 159, 189, 223, 53, 137, 61, 158, 119, 52, 189, 119, 71, 41, 190, 196, 233, 46, 190, 109, 161, 52, 188, 0, 182, 3, 189, 149, 190, 12, 62, 32, 203, 136, 189, 226, 15, 142, 189, 104, 202, 48, 190, 225, 19, 138, 189, 197, 11, 216, 186, 10, 213, 0, 190, 182, 113, 141, 61, 78, 183, 85, 61, 71, 161, 250, 61, 126, 222, 43, 190, 173, 200, 204, 61, 18, 198, 3, 62, 246, 70, 2, 62, 203, 235, 35, 189, 165, 180, 29, 190, 79, 110, 147, 189, 45, 165, 28, 189, 196, 74, 21, 59, 208, 150, 210, 61, 234, 75, 34, 61, 4, 83, 23, 190, 99, 181, 101, 60, 52, 163, 48, 62, 171, 235, 235, 60, 199, 74, 11, 60, 37, 43, 156, 189, 147, 240, 222, 60, 255, 212, 218, 189, 87, 126, 32, 190, 125, 132, 7, 62, 6, 126, 103, 61, 169, 85, 250, 189, 51, 183, 239, 61, 189, 119, 134, 61, 134, 159, 153, 61, 152, 132, 103, 189, 72, 103, 139, 60, 110, 159, 160, 188, 232, 40, 226, 188, 14, 209, 10, 190, 179, 153, 227, 189, 99, 224, 38, 60, 65, 45, 133, 61, 220, 2, 179, 61, 139, 67, 71, 61, 142, 172, 10, 190, 106, 159, 220, 61, 252, 140, 69, 59, 174, 244, 213, 61, 23, 189, 186, 61, 125, 112, 51, 190, 173, 206, 95, 189, 2, 239, 39, 190, 104, 84, 220, 187, 29, 13, 3, 62, 21, 168, 130, 189, 30, 73, 181, 61, 95, 232, 131, 61, 140, 213, 151, 189, 129, 126, 228, 189, 215, 208, 204, 61, 234, 248, 21, 61, 30, 45, 35, 190, 133, 45, 112, 189, 246, 95, 37, 190, 174, 78, 168, 189, 63, 203, 228, 61, 76, 222, 234, 189, 231, 74, 237, 61, 50, 185, 164, 188, 237, 117, 54, 61, 69, 235, 15, 190, 132, 125, 133, 189, 149, 56, 44, 62, 171, 42, 156, 60, 110, 146, 159, 61, 41, 85, 223, 188, 239, 6, 3, 60, 42, 69, 116, 61, 94, 57, 138, 188, 189, 96, 18, 189, 75, 198, 113, 61, 247, 144, 129, 187, 252, 203, 73, 60, 247, 143, 51, 190, 90, 157, 70, 61, 25, 121, 239, 60, 12, 239, 2, 190, 252, 6, 5, 190, 214, 109, 26, 62, 242, 224, 7, 61, 208, 240, 215, 187, 46, 244, 195, 189, 254, 38, 18, 190, 59, 45, 74, 61, 147, 45, 25, 62, 209, 185, 193, 59, 86, 77, 121, 60, 154, 74, 244, 61, 125, 181, 15, 62, 233, 103, 28, 62, 158, 146, 67, 189, 166, 71, 160, 61, 91, 44, 0, 62, 59, 61, 156, 61, 221, 71, 30, 190, 28, 58, 16, 61, 35, 170, 59, 189, 116, 48, 245, 57, 58, 202, 167, 61, 115, 185, 235, 189, 190, 108, 37, 62, 63, 0, 35, 190, 105, 56, 41, 188, 75, 190, 178, 59, 110, 101, 222, 61, 197, 151, 123, 61, 224, 76, 181, 188, 33, 222, 196, 188, 167, 57, 18, 190, 138, 228, 176, 189, 39, 15, 234, 189, 94, 164, 30, 61, 10, 56, 116, 61, 43, 33, 1, 62, 99, 34, 13, 190, 216, 97, 3, 61, 221, 93, 147, 189, 27, 126, 10, 62, 218, 247, 196, 61, 112, 72, 151, 188, 240, 198, 45, 61, 32, 240, 127, 189, 179, 148, 4, 190, 45, 61, 118, 61, 210, 129, 143, 189, 190, 58, 51, 188, 253, 25, 19, 188, 90, 10, 139, 61, 16, 4, 255, 61, 147, 90, 238, 61, 3, 154, 25, 190, 151, 226, 230, 61, 184, 187, 155, 61, 236, 130, 130, 189, 69, 148, 9, 190, 96, 125, 62, 61, 66, 90, 154, 189, 136, 144, 165, 61, 249, 5, 234, 59, 176, 177, 51, 190, 246, 40, 254, 59, 124, 63, 205, 189, 92, 207, 169, 189, 223, 8, 30, 62, 193, 151, 44, 62, 215, 70, 226, 61, 110, 66, 178, 61, 139, 172, 224, 189, 73, 241, 129, 188, 79, 228, 124, 188, 85, 146, 178, 61, 122, 126, 191, 188, 155, 50, 160, 189, 78, 99, 33, 190, 249, 154, 83, 189, 38, 43, 88, 61, 39, 115, 137, 189, 195, 57, 28, 190, 212, 208, 51, 190, 210, 174, 7, 62, 150, 24, 109, 189, 255, 105, 224, 61, 130, 87, 124, 59, 21, 73, 102, 60, 132, 181, 106, 61, 226, 230, 145, 187, 12, 175, 243, 61, 219, 165, 211, 61, 225, 249, 225, 189, 20, 140, 194, 189, 24, 190, 178, 61, 100, 11, 13, 189, 32, 46, 188, 60, 164, 192, 87, 187, 232, 217, 205, 61, 152, 113, 71, 61, 146, 119, 213, 189, 30, 121, 248, 60, 108, 132, 67, 189, 117, 114, 67, 189, 84, 32, 232, 189, 10, 234, 13, 188, 50, 226, 175, 61, 201, 41, 38, 190, 80, 74, 116, 61, 129, 133, 134, 61, 203, 171, 38, 62, 168, 121, 19, 62, 235, 129, 198, 61, 157, 14, 233, 189, 208, 16, 6, 62, 21, 140, 173, 189, 87, 49, 224, 189, 114, 85, 54, 61, 221, 249, 59, 61, 162, 16, 12, 190, 59, 4, 193, 189, 223, 68, 162, 189, 10, 234, 43, 62, 25, 14, 137, 189, 188, 147, 194, 189, 206, 246, 33, 190, 185, 196, 25, 61, 119, 157, 14, 190, 92, 1, 252, 61, 122, 134, 34, 62, 141, 123, 73, 61, 34, 78, 5, 62, 18, 88, 37, 62, 249, 15, 144, 189, 105, 115, 232, 60, 66, 203, 32, 189, 193, 242, 79, 189, 187, 90, 19, 190, 78, 145, 241, 61, 198, 184, 121, 61, 190, 184, 160, 61, 201, 220, 13, 190, 118, 43, 209, 61, 250, 17, 114, 61, 77, 246, 23, 62, 219, 135, 27, 190, 81, 9, 170, 189, 4, 197, 131, 61, 99, 135, 22, 190, 34, 94, 66, 188, 34, 235, 148, 60, 249, 75, 103, 61, 103, 93, 11, 62, 73, 194, 169, 189, 90, 209, 8, 190, 255, 65, 45, 62, 103, 195, 133, 61, 91, 174, 72, 189, 193, 55, 189, 188, 202, 23, 145, 187, 98, 99, 49, 190, 128, 175, 197, 60, 98, 251, 193, 189, 186, 169, 4, 62, 65, 63, 1, 190, 147, 12, 189, 188, 31, 1, 67, 188, 241, 231, 147, 61, 37, 143, 70, 61, 226, 3, 31, 62, 38, 167, 184, 186, 109, 137, 44, 60, 162, 49, 14, 190, 115, 14, 13, 189, 72, 38, 213, 188, 84, 78, 37, 61, 169, 199, 49, 190, 91, 104, 40, 189, 222, 196, 50, 62, 219, 245, 61, 60, 11, 243, 104, 61, 67, 108, 29, 190, 31, 106, 225, 188, 99, 222, 168, 188, 161, 69, 206, 60, 247, 202, 10, 188, 154, 235, 216, 61, 193, 55, 201, 60, 71, 54, 255, 189, 227, 134, 43, 61, 162, 202, 211, 189, 208, 203, 0, 188, 55, 37, 220, 61, 181, 27, 207, 188, 253, 100, 9, 62, 155, 51, 213, 61, 97, 208, 179, 189, 52, 83, 165, 61, 71, 84, 38, 62, 244, 112, 39, 190, 54, 64, 104, 189, 158, 198, 37, 190, 226, 212, 91, 61, 52, 100, 233, 61, 183, 39, 13, 62, 38, 211, 51, 189, 29, 130, 129, 187, 87, 140, 44, 61, 241, 18, 31, 190, 92, 225, 197, 61, 113, 148, 46, 61, 167, 112, 74, 61, 182, 187, 45, 62, 52, 239, 185, 61, 36, 72, 109, 189, 92, 7, 95, 61, 62, 237, 26, 62, 252, 211, 142, 61, 81, 177, 194, 61, 250, 56, 59, 61, 253, 130, 62, 189, 179, 251, 109, 188, 116, 218, 51, 190, 82, 16, 6, 190, 15, 150, 238, 61, 69, 157, 52, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 218, 94, 188, 122, 142, 81, 189, 93, 4, 204, 61, 101, 244, 28, 190, 91, 108, 136, 59, 104, 106, 13, 189, 60, 76, 161, 189, 74, 173, 218, 60, 96, 124, 155, 61, 141, 35, 129, 61, 80, 214, 12, 62, 199, 84, 230, 189, 169, 55, 149, 189, 229, 8, 0, 189, 93, 169, 221, 61, 138, 250, 10, 190, 10, 42, 211, 189, 51, 11, 174, 189, 84, 74, 142, 61, 88, 242, 119, 61, 142, 184, 168, 59, 120, 2, 51, 62, 249, 18, 43, 190, 166, 64, 88, 61, 108, 125, 198, 188, 50, 40, 33, 62, 255, 227, 74, 60, 196, 63, 69, 189, 217, 151, 52, 190, 240, 203, 151, 188, 19, 28, 89, 61, 248, 214, 119, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 111, 146, 189, 143, 50, 124, 188, 213, 23, 189, 61, 227, 179, 96, 61, 62, 64, 81, 189, 120, 167, 43, 62, 26, 235, 188, 189, 123, 201, 15, 189, 220, 136, 170, 61, 171, 187, 10, 62, 91, 224, 29, 62, 28, 166, 60, 61, 35, 156, 24, 62, 164, 123, 1, 190, 191, 204, 186, 187, 206, 199, 218, 58, 140, 124, 251, 61, 254, 21, 19, 62, 45, 222, 145, 61, 91, 82, 120, 189, 194, 114, 26, 60, 16, 65, 51, 61, 36, 226, 12, 62, 188, 152, 187, 61, 107, 249, 23, 62, 227, 146, 68, 61, 7, 214, 15, 62, 196, 180, 240, 61, 207, 152, 127, 61, 100, 167, 19, 62, 61, 80, 28, 190, 12, 204, 26, 62, 19, 58, 187, 189, 166, 171, 108, 61, 170, 51, 180, 189, 70, 233, 163, 61, 247, 44, 1, 190, 230, 203, 181, 61, 110, 2, 153, 189, 179, 20, 18, 62, 187, 21, 37, 190, 145, 97, 165, 61, 43, 153, 172, 189, 89, 7, 206, 189, 214, 139, 186, 189, 117, 104, 94, 188, 196, 120, 221, 189, 129, 249, 205, 61, 130, 221, 98, 58, 140, 249, 73, 61, 172, 105, 231, 60, 97, 3, 66, 189, 157, 69, 232, 61, 92, 177, 18, 62, 184, 48, 140, 188, 15, 60, 49, 62, 151, 33, 144, 189, 13, 208, 46, 62, 108, 125, 5, 62, 38, 12, 58, 60, 233, 40, 139, 189, 243, 168, 50, 189, 212, 57, 50, 190, 21, 192, 130, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 179, 124, 188, 178, 183, 128, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {183, 27, 198, 190, 177, 73, 153, 63, 98, 199, 252, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {70, 56, 166, 62, 96, 162, 66, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0090/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}