// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 162, 129, 63, 242, 248, 74, 63, 58, 188, 141, 62, 75, 161, 47, 189, 47, 77, 233, 190, 182, 23, 11, 62, 138, 173, 225, 190, 142, 174, 114, 62, 251, 236, 155, 190, 168, 234, 215, 190, 146, 234, 51, 191, 119, 138, 73, 191, 183, 34, 32, 63, 209, 67, 23, 190, 194, 9, 8, 191, 160, 176, 37, 191, 102, 227, 111, 62, 127, 222, 17, 62, 80, 6, 254, 62, 142, 64, 22, 190, 194, 181, 180, 187, 188, 139, 246, 62, 203, 228, 41, 63, 9, 121, 216, 190, 196, 43, 54, 191, 242, 149, 168, 63, 68, 166, 68, 62, 51, 124, 14, 62, 149, 136, 50, 191, 188, 149, 75, 62, 162, 236, 71, 60, 195, 47, 155, 63, 22, 37, 78, 62, 71, 73, 7, 62, 253, 235, 200, 188, 38, 242, 29, 60, 110, 56, 236, 62, 50, 127, 80, 191, 202, 209, 139, 190, 134, 16, 40, 191, 70, 222, 60, 190, 67, 171, 182, 190, 253, 215, 222, 62, 14, 204, 25, 63, 20, 143, 80, 62, 214, 35, 140, 62, 232, 150, 81, 63, 147, 240, 34, 191, 234, 38, 246, 62, 194, 16, 73, 191, 64, 147, 137, 62, 137, 125, 60, 62, 89, 253, 136, 63, 253, 5, 212, 62, 67, 161, 119, 191, 108, 33, 99, 191, 6, 228, 161, 61, 213, 110, 59, 63, 44, 116, 72, 191, 62, 27, 209, 190, 169, 218, 11, 190, 178, 55, 130, 63, 142, 252, 54, 62, 49, 190, 89, 191, 55, 127, 255, 190, 253, 174, 163, 191, 232, 81, 133, 62, 238, 227, 220, 189, 40, 101, 35, 63, 95, 1, 34, 63, 144, 50, 184, 63, 72, 232, 129, 62, 92, 92, 158, 62, 43, 120, 46, 63, 228, 117, 188, 62, 225, 236, 134, 190, 77, 165, 0, 191, 211, 193, 211, 188, 43, 133, 20, 191, 126, 68, 158, 191, 255, 10, 221, 189, 34, 106, 49, 62, 28, 60, 52, 63, 179, 134, 66, 191, 77, 0, 95, 191, 186, 158, 137, 63, 245, 196, 19, 62, 89, 211, 238, 190, 81, 200, 141, 60, 171, 191, 55, 63, 129, 26, 231, 189, 72, 42, 90, 191, 204, 117, 174, 62, 14, 77, 187, 189, 4, 143, 107, 190, 197, 56, 200, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 105, 29, 191, 197, 228, 211, 62, 67, 77, 23, 63, 52, 173, 28, 190, 229, 79, 152, 190, 17, 106, 54, 63, 220, 187, 25, 191, 111, 103, 148, 62, 7, 134, 57, 63, 85, 54, 186, 62, 34, 154, 151, 187, 85, 114, 122, 190, 157, 42, 214, 62, 112, 2, 133, 189, 170, 104, 227, 190, 70, 30, 180, 61, 182, 43, 13, 63, 223, 239, 219, 61, 93, 243, 145, 190, 55, 200, 130, 190, 193, 64, 155, 189, 222, 61, 130, 190, 120, 24, 4, 63, 35, 93, 52, 62, 138, 89, 3, 62, 192, 151, 242, 62, 110, 159, 13, 63, 202, 139, 4, 190, 176, 110, 2, 62, 242, 31, 13, 190, 113, 78, 111, 61, 101, 55, 89, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 154, 8, 62, 98, 33, 143, 61, 192, 156, 117, 189, 115, 2, 125, 61, 176, 101, 56, 190, 38, 116, 21, 190, 228, 30, 157, 189, 180, 143, 161, 188, 142, 77, 26, 189, 75, 10, 218, 188, 254, 40, 31, 62, 43, 187, 144, 61, 34, 97, 18, 62, 1, 72, 30, 61, 24, 128, 217, 187, 168, 100, 25, 188, 80, 225, 232, 189, 152, 122, 11, 62, 251, 113, 8, 189, 112, 188, 25, 62, 97, 193, 147, 188, 8, 81, 195, 189, 254, 66, 216, 188, 125, 66, 241, 188, 187, 31, 250, 189, 121, 193, 38, 190, 167, 210, 171, 189, 88, 213, 26, 60, 78, 16, 177, 189, 40, 106, 177, 60, 248, 210, 25, 190, 31, 151, 114, 60, 48, 179, 18, 62, 172, 211, 163, 190, 180, 242, 178, 62, 154, 65, 232, 61, 45, 24, 197, 189, 244, 239, 225, 62, 108, 235, 201, 189, 198, 64, 145, 62, 61, 91, 158, 62, 50, 54, 36, 191, 228, 219, 216, 62, 60, 79, 188, 61, 207, 168, 125, 62, 74, 65, 82, 62, 7, 45, 2, 191, 188, 167, 69, 190, 31, 151, 34, 191, 221, 101, 65, 62, 88, 158, 32, 63, 192, 156, 172, 190, 231, 62, 172, 62, 153, 34, 182, 62, 130, 84, 32, 191, 243, 192, 147, 62, 56, 16, 76, 62, 139, 106, 149, 189, 213, 187, 104, 62, 139, 211, 52, 62, 233, 201, 50, 189, 177, 5, 101, 191, 125, 67, 204, 61, 252, 50, 15, 190, 155, 212, 196, 190, 124, 187, 110, 189, 26, 40, 157, 60, 91, 58, 32, 61, 129, 123, 180, 61, 12, 212, 111, 190, 147, 4, 17, 62, 239, 57, 90, 62, 64, 120, 184, 188, 245, 153, 144, 189, 224, 236, 112, 189, 251, 228, 18, 62, 202, 158, 27, 62, 234, 90, 107, 190, 10, 116, 40, 191, 198, 47, 130, 62, 141, 39, 91, 61, 155, 204, 111, 191, 137, 145, 211, 61, 167, 233, 106, 61, 210, 231, 8, 191, 168, 73, 76, 60, 118, 28, 198, 190, 63, 251, 143, 62, 131, 45, 126, 190, 236, 116, 71, 189, 49, 196, 68, 188, 211, 55, 12, 190, 68, 136, 154, 61, 3, 222, 188, 60, 114, 42, 5, 188, 13, 82, 153, 190, 182, 143, 246, 189, 22, 255, 249, 188, 44, 214, 213, 61, 172, 3, 50, 62, 203, 130, 130, 185, 238, 120, 113, 61, 39, 93, 46, 62, 74, 112, 41, 190, 89, 60, 36, 61, 208, 65, 255, 60, 114, 187, 167, 61, 124, 217, 241, 61, 41, 1, 205, 189, 75, 148, 47, 190, 53, 120, 131, 60, 79, 94, 9, 189, 129, 242, 195, 189, 242, 77, 182, 189, 195, 234, 23, 62, 167, 14, 45, 62, 80, 215, 53, 189, 195, 51, 21, 190, 84, 106, 33, 190, 107, 15, 24, 190, 139, 248, 52, 189, 35, 73, 226, 189, 99, 171, 36, 190, 59, 93, 48, 190, 74, 74, 14, 190, 237, 22, 28, 62, 208, 124, 129, 61, 214, 171, 11, 190, 25, 116, 98, 62, 132, 205, 26, 62, 195, 204, 179, 61, 143, 232, 133, 61, 197, 226, 1, 190, 128, 218, 20, 62, 191, 42, 196, 188, 44, 93, 34, 62, 43, 209, 158, 61, 104, 54, 152, 62, 71, 165, 221, 59, 251, 26, 7, 188, 3, 203, 98, 62, 72, 9, 63, 62, 176, 115, 43, 62, 66, 173, 92, 61, 113, 98, 49, 62, 58, 102, 238, 189, 74, 198, 245, 62, 246, 171, 24, 61, 69, 146, 63, 190, 4, 86, 191, 60, 29, 61, 192, 61, 106, 70, 83, 62, 129, 161, 37, 61, 213, 216, 45, 62, 230, 186, 225, 59, 147, 149, 79, 62, 11, 4, 140, 190, 101, 64, 128, 189, 31, 9, 80, 61, 105, 82, 51, 62, 175, 211, 16, 191, 78, 29, 190, 58, 14, 177, 134, 62, 163, 13, 116, 62, 42, 200, 29, 62, 81, 173, 72, 190, 130, 12, 77, 189, 115, 187, 28, 62, 130, 208, 163, 60, 14, 209, 232, 62, 111, 188, 12, 191, 86, 102, 180, 188, 223, 194, 116, 62, 222, 166, 106, 189, 97, 105, 183, 189, 189, 20, 90, 62, 95, 136, 211, 62, 154, 149, 81, 191, 157, 150, 72, 191, 242, 248, 21, 62, 46, 93, 1, 191, 188, 170, 168, 62, 112, 207, 216, 190, 37, 38, 31, 191, 134, 98, 245, 190, 108, 123, 196, 188, 253, 41, 228, 189, 7, 21, 65, 62, 35, 139, 95, 62, 183, 40, 74, 191, 133, 173, 14, 63, 209, 18, 111, 191, 213, 131, 10, 190, 13, 207, 145, 190, 195, 169, 236, 60, 150, 67, 57, 191, 174, 43, 193, 188, 31, 96, 220, 62, 49, 168, 110, 61, 150, 153, 206, 190, 173, 166, 179, 62, 237, 237, 139, 190, 164, 238, 17, 61, 2, 48, 84, 61, 151, 115, 53, 192, 211, 68, 39, 190, 237, 22, 10, 62, 218, 33, 247, 62, 158, 161, 150, 190, 206, 121, 69, 188, 49, 5, 135, 189, 229, 184, 152, 61, 177, 216, 93, 61, 25, 51, 41, 191, 122, 18, 80, 62, 69, 159, 227, 189, 53, 50, 4, 190, 226, 181, 41, 190, 136, 141, 45, 190, 27, 127, 66, 62, 178, 239, 251, 62, 86, 27, 163, 62, 173, 192, 173, 190, 150, 67, 191, 189, 30, 75, 209, 188, 129, 233, 134, 189, 208, 40, 13, 62, 205, 88, 58, 186, 220, 173, 143, 61, 157, 221, 93, 188, 101, 119, 172, 189, 233, 153, 188, 189, 131, 102, 30, 189, 30, 127, 218, 61, 228, 217, 19, 190, 69, 28, 26, 188, 176, 254, 152, 189, 52, 83, 50, 190, 23, 149, 57, 61, 17, 165, 114, 189, 171, 80, 254, 188, 1, 145, 131, 61, 36, 231, 52, 190, 215, 173, 8, 189, 251, 83, 233, 189, 194, 227, 139, 189, 158, 216, 43, 189, 4, 163, 114, 60, 137, 174, 247, 59, 16, 141, 36, 189, 134, 194, 14, 190, 41, 89, 155, 189, 133, 149, 199, 61, 102, 158, 253, 189, 27, 181, 208, 189, 134, 76, 15, 62, 149, 73, 223, 60, 238, 230, 205, 189, 156, 151, 230, 189, 226, 217, 22, 190, 110, 146, 12, 59, 203, 129, 71, 188, 198, 247, 74, 61, 165, 255, 14, 190, 74, 243, 36, 190, 154, 141, 43, 62, 116, 84, 139, 60, 62, 112, 46, 190, 205, 201, 17, 59, 0, 37, 181, 189, 164, 236, 248, 61, 42, 138, 187, 188, 213, 217, 198, 189, 23, 225, 253, 61, 24, 178, 157, 188, 225, 37, 6, 189, 39, 55, 24, 61, 189, 52, 23, 190, 52, 6, 42, 190, 232, 48, 209, 188, 81, 249, 245, 60, 36, 61, 3, 62, 16, 132, 42, 190, 163, 209, 23, 61, 102, 120, 229, 187, 16, 83, 19, 61, 178, 23, 131, 189, 7, 15, 61, 61, 69, 186, 98, 191, 186, 232, 197, 187, 2, 150, 136, 188, 216, 144, 24, 190, 80, 118, 60, 63, 12, 12, 224, 188, 198, 157, 194, 189, 198, 14, 220, 60, 222, 52, 158, 189, 109, 184, 211, 59, 124, 54, 9, 191, 176, 35, 120, 61, 135, 26, 8, 62, 101, 98, 196, 189, 93, 43, 116, 191, 105, 166, 168, 62, 5, 224, 173, 62, 61, 252, 168, 189, 199, 224, 188, 190, 177, 235, 33, 63, 63, 214, 241, 190, 19, 7, 18, 191, 128, 11, 57, 62, 231, 255, 161, 190, 3, 41, 158, 190, 32, 206, 235, 61, 187, 180, 122, 188, 78, 191, 71, 189, 245, 212, 206, 62, 255, 190, 82, 61, 113, 125, 32, 190, 42, 26, 250, 189, 125, 242, 207, 190, 229, 123, 20, 62, 88, 196, 59, 61, 20, 134, 85, 190, 208, 2, 165, 60, 35, 36, 145, 61, 45, 32, 10, 190, 180, 119, 114, 62, 158, 227, 48, 61, 237, 151, 191, 61, 27, 8, 200, 191, 93, 53, 97, 189, 227, 246, 91, 62, 184, 252, 8, 190, 103, 106, 211, 191, 131, 172, 40, 62, 8, 142, 157, 61, 46, 228, 47, 190, 59, 120, 63, 190, 17, 83, 219, 61, 240, 2, 64, 191, 45, 85, 227, 189, 202, 245, 224, 61, 125, 101, 230, 60, 186, 114, 36, 190, 231, 42, 144, 62, 8, 255, 35, 190, 216, 154, 212, 61, 111, 72, 180, 62, 29, 255, 55, 62, 254, 205, 194, 61, 144, 48, 129, 189, 168, 116, 3, 190, 127, 149, 41, 190, 109, 121, 186, 61, 164, 121, 231, 189, 15, 72, 1, 62, 210, 135, 241, 189, 212, 140, 219, 189, 162, 123, 169, 189, 10, 197, 19, 190, 252, 58, 212, 61, 70, 213, 159, 188, 201, 124, 169, 189, 81, 56, 80, 189, 176, 169, 43, 190, 89, 148, 154, 61, 159, 188, 44, 189, 204, 166, 135, 189, 80, 61, 187, 189, 200, 211, 75, 189, 28, 173, 156, 189, 196, 231, 30, 190, 97, 153, 96, 189, 33, 103, 234, 189, 194, 113, 23, 61, 93, 117, 48, 190, 130, 85, 117, 61, 55, 193, 1, 190, 114, 113, 160, 61, 18, 181, 233, 189, 245, 179, 184, 189, 71, 64, 183, 189, 197, 251, 33, 62, 116, 157, 54, 61, 175, 73, 57, 62, 127, 123, 0, 62, 177, 141, 70, 189, 187, 190, 139, 62, 181, 168, 189, 190, 162, 92, 10, 61, 36, 251, 146, 62, 125, 153, 57, 191, 220, 165, 166, 62, 116, 39, 221, 191, 237, 21, 16, 189, 129, 231, 154, 61, 49, 216, 132, 60, 244, 78, 166, 191, 51, 204, 230, 61, 213, 121, 179, 62, 213, 105, 93, 190, 165, 244, 153, 190, 75, 202, 105, 62, 22, 150, 185, 191, 119, 108, 220, 61, 254, 222, 48, 62, 209, 70, 136, 61, 168, 100, 58, 190, 77, 43, 173, 189, 63, 190, 121, 190, 133, 117, 149, 188, 16, 249, 238, 189, 72, 162, 237, 189, 18, 238, 80, 62, 245, 147, 102, 190, 52, 110, 55, 62, 151, 57, 195, 61, 207, 148, 50, 62, 224, 12, 172, 61, 233, 51, 158, 187, 63, 60, 121, 189, 204, 188, 150, 60, 181, 29, 142, 62, 129, 72, 86, 62, 136, 131, 125, 61, 190, 51, 183, 62, 14, 126, 4, 61, 252, 21, 20, 62, 214, 217, 96, 62, 3, 198, 33, 62, 225, 15, 28, 189, 216, 216, 34, 190, 168, 205, 147, 61, 254, 222, 110, 62, 157, 30, 36, 190, 33, 207, 250, 61, 197, 205, 19, 187, 165, 48, 181, 190, 15, 197, 38, 62, 168, 59, 167, 61, 6, 225, 240, 189, 164, 231, 78, 62, 205, 23, 186, 60, 197, 177, 151, 190, 121, 173, 22, 191, 24, 225, 195, 61, 50, 94, 126, 190, 248, 177, 54, 62, 141, 136, 118, 62, 186, 21, 237, 61, 151, 104, 120, 189, 117, 54, 169, 61, 132, 112, 185, 189, 90, 15, 45, 62, 1, 137, 219, 62, 29, 172, 120, 61, 17, 59, 73, 189, 114, 242, 24, 62, 26, 134, 35, 62, 224, 250, 192, 62, 0, 4, 124, 61, 253, 30, 148, 189, 190, 105, 98, 186, 170, 111, 136, 59, 88, 12, 209, 187, 56, 91, 204, 61, 199, 14, 230, 188, 252, 247, 160, 189, 21, 125, 38, 190, 77, 202, 38, 62, 186, 251, 179, 62, 235, 127, 234, 60, 8, 69, 128, 61, 30, 71, 82, 189, 0, 251, 93, 62, 153, 121, 22, 189, 50, 21, 12, 190, 10, 109, 173, 62, 56, 214, 132, 61, 54, 170, 175, 190, 166, 144, 196, 62, 96, 211, 243, 189, 52, 214, 216, 61, 251, 119, 121, 62, 228, 106, 69, 191, 204, 214, 9, 190, 203, 207, 81, 62, 71, 157, 218, 191, 228, 123, 192, 62, 17, 64, 173, 191, 232, 244, 48, 62, 65, 130, 227, 61, 180, 143, 171, 61, 80, 209, 135, 191, 108, 254, 230, 187, 20, 64, 4, 63, 238, 83, 148, 189, 76, 179, 155, 190, 203, 67, 169, 62, 27, 203, 118, 191, 100, 247, 233, 189, 216, 9, 139, 61, 191, 47, 131, 190, 131, 113, 99, 190, 45, 113, 161, 189, 99, 192, 102, 190, 174, 229, 84, 190, 58, 185, 149, 190, 130, 215, 24, 190, 38, 49, 81, 190, 182, 84, 41, 62, 120, 243, 38, 190, 116, 158, 18, 190, 47, 27, 24, 62, 208, 127, 56, 190, 194, 197, 76, 189, 153, 115, 40, 190, 232, 117, 173, 60, 182, 83, 39, 190, 189, 33, 134, 188, 53, 27, 64, 190, 186, 161, 114, 188, 162, 72, 41, 190, 202, 185, 185, 61, 109, 249, 190, 61, 74, 105, 238, 189, 75, 124, 160, 60, 162, 129, 186, 189, 199, 200, 198, 189, 59, 95, 139, 189, 193, 24, 253, 61, 139, 125, 55, 189, 253, 249, 15, 62, 221, 204, 39, 190, 32, 175, 122, 61, 204, 45, 202, 189, 189, 208, 41, 60, 139, 87, 14, 190, 104, 118, 54, 190, 193, 33, 59, 61, 255, 237, 89, 61, 73, 80, 180, 61, 134, 162, 5, 62, 172, 2, 11, 191, 215, 203, 186, 61, 30, 41, 139, 189, 44, 106, 99, 191, 63, 158, 187, 62, 184, 229, 159, 62, 214, 62, 199, 60, 106, 159, 89, 191, 83, 248, 250, 62, 41, 48, 50, 61, 127, 52, 59, 189, 201, 65, 206, 61, 246, 63, 26, 191, 172, 92, 176, 190, 38, 72, 137, 190, 142, 120, 66, 190, 200, 66, 139, 61, 21, 118, 178, 189, 209, 2, 49, 190, 52, 193, 207, 188, 213, 160, 121, 188, 101, 40, 166, 191, 109, 205, 3, 62, 186, 244, 211, 189, 44, 110, 64, 190, 134, 218, 154, 61, 198, 229, 106, 62, 88, 73, 28, 191, 61, 173, 222, 62, 202, 175, 160, 62, 72, 129, 60, 190, 233, 54, 232, 189, 238, 131, 153, 189, 72, 146, 244, 189, 53, 12, 98, 189, 122, 78, 54, 190, 49, 59, 207, 189, 99, 73, 78, 61, 111, 155, 90, 61, 131, 212, 107, 60, 216, 159, 211, 189, 141, 182, 16, 190, 199, 88, 75, 187, 84, 159, 50, 190, 198, 75, 230, 189, 121, 163, 160, 189, 241, 238, 226, 188, 143, 227, 139, 60, 90, 52, 65, 189, 118, 177, 178, 189, 1, 14, 176, 61, 75, 192, 83, 190, 4, 119, 164, 61, 148, 181, 19, 62, 22, 174, 34, 62, 165, 209, 21, 190, 215, 9, 1, 62, 164, 143, 2, 62, 121, 158, 245, 189, 88, 81, 83, 189, 211, 10, 2, 190, 177, 75, 34, 190, 156, 23, 255, 189, 97, 238, 42, 189, 235, 88, 55, 188, 213, 146, 84, 189, 9, 120, 141, 62, 103, 113, 118, 62, 206, 228, 166, 189, 214, 246, 53, 62, 114, 138, 160, 61, 225, 177, 188, 61, 244, 74, 39, 61, 152, 91, 96, 189, 142, 128, 79, 62, 160, 146, 32, 62, 88, 111, 199, 62, 8, 23, 156, 189, 64, 176, 154, 190, 182, 148, 123, 190, 150, 225, 187, 189, 188, 176, 37, 190, 14, 180, 175, 62, 51, 6, 25, 189, 74, 30, 210, 61, 206, 253, 8, 62, 121, 249, 8, 190, 187, 232, 113, 62, 29, 36, 28, 62, 223, 102, 247, 61, 47, 99, 149, 60, 226, 238, 39, 62, 55, 185, 236, 189, 220, 89, 10, 191, 160, 246, 234, 188, 28, 203, 230, 189, 106, 165, 70, 191, 7, 30, 0, 190, 49, 108, 136, 190, 240, 101, 140, 190, 235, 11, 15, 62, 153, 188, 207, 189, 231, 24, 49, 190, 105, 190, 139, 189, 52, 81, 111, 190, 133, 109, 127, 61, 52, 61, 56, 190, 98, 196, 17, 190, 139, 223, 136, 188, 20, 136, 145, 58, 148, 99, 242, 190, 118, 14, 233, 189, 227, 114, 36, 62, 146, 193, 155, 190, 126, 25, 196, 62, 54, 119, 126, 61, 59, 99, 142, 189, 26, 130, 128, 190, 96, 182, 3, 62, 206, 191, 62, 191, 159, 87, 119, 190, 79, 184, 47, 62, 249, 163, 132, 187, 114, 217, 72, 60, 128, 251, 239, 190, 233, 128, 4, 190, 182, 186, 132, 62, 53, 5, 222, 61, 57, 18, 81, 63, 125, 252, 185, 189, 64, 215, 155, 60, 72, 201, 83, 62, 40, 99, 34, 190, 136, 68, 138, 190, 217, 0, 219, 189, 209, 113, 107, 62, 134, 99, 116, 189, 102, 100, 2, 190, 155, 41, 227, 62, 26, 94, 242, 60, 109, 100, 104, 62, 70, 69, 241, 59, 24, 171, 31, 63, 45, 178, 170, 190, 106, 74, 231, 61, 103, 66, 245, 61, 245, 130, 171, 62, 191, 131, 142, 189, 15, 136, 7, 191, 157, 107, 102, 188, 252, 98, 192, 190, 57, 167, 186, 62, 154, 6, 140, 62, 63, 101, 33, 62, 239, 8, 241, 188, 196, 165, 90, 62, 111, 188, 68, 191, 23, 217, 180, 190, 218, 151, 205, 62, 51, 15, 173, 60, 108, 88, 96, 61, 135, 204, 141, 189, 119, 71, 41, 190, 196, 233, 46, 190, 109, 161, 52, 188, 205, 162, 100, 189, 149, 190, 12, 62, 32, 203, 136, 189, 57, 114, 207, 189, 46, 218, 52, 190, 212, 39, 145, 189, 197, 11, 216, 186, 10, 213, 0, 190, 182, 113, 141, 61, 78, 183, 85, 61, 71, 161, 250, 61, 52, 118, 49, 190, 91, 216, 141, 61, 43, 232, 247, 61, 246, 70, 2, 62, 114, 197, 82, 189, 165, 180, 29, 190, 196, 240, 220, 189, 205, 189, 132, 189, 254, 248, 215, 188, 77, 226, 198, 61, 167, 155, 0, 61, 4, 83, 23, 190, 142, 188, 8, 60, 150, 215, 11, 62, 9, 30, 56, 60, 68, 196, 148, 188, 66, 92, 76, 63, 123, 10, 182, 61, 246, 58, 56, 191, 148, 90, 0, 190, 154, 168, 140, 191, 194, 35, 143, 190, 169, 85, 250, 189, 31, 76, 134, 189, 20, 133, 50, 190, 207, 239, 16, 61, 149, 66, 66, 190, 72, 103, 139, 60, 203, 81, 79, 189, 235, 90, 45, 60, 205, 236, 12, 63, 164, 150, 36, 191, 221, 218, 202, 61, 51, 179, 55, 62, 229, 181, 163, 189, 57, 239, 127, 190, 196, 52, 46, 190, 73, 220, 182, 61, 240, 150, 60, 61, 197, 253, 181, 62, 222, 224, 103, 62, 0, 199, 212, 190, 177, 17, 130, 191, 208, 111, 191, 188, 18, 246, 254, 190, 165, 61, 156, 61, 214, 81, 219, 60, 193, 195, 167, 61, 102, 222, 13, 191, 148, 40, 172, 189, 195, 0, 231, 189, 145, 205, 72, 191, 38, 102, 234, 61, 79, 237, 26, 62, 122, 103, 111, 189, 28, 177, 45, 191, 209, 11, 186, 61, 212, 72, 189, 61, 202, 240, 21, 191, 231, 74, 237, 61, 7, 97, 130, 189, 118, 146, 142, 61, 108, 4, 129, 191, 89, 179, 220, 189, 129, 121, 86, 62, 9, 218, 147, 190, 14, 63, 129, 189, 205, 99, 29, 62, 99, 18, 153, 190, 122, 63, 36, 191, 247, 52, 30, 62, 41, 40, 59, 190, 119, 246, 218, 189, 251, 184, 185, 61, 253, 208, 150, 62, 12, 246, 54, 191, 170, 150, 143, 62, 55, 184, 49, 62, 165, 164, 111, 190, 66, 57, 62, 190, 220, 8, 195, 61, 64, 122, 37, 191, 69, 87, 105, 62, 235, 190, 54, 191, 12, 249, 234, 189, 130, 37, 82, 62, 147, 45, 25, 62, 29, 99, 42, 62, 17, 69, 153, 62, 220, 223, 139, 190, 134, 224, 84, 62, 233, 103, 28, 62, 146, 40, 217, 191, 4, 138, 94, 61, 252, 206, 141, 62, 251, 145, 126, 63, 146, 253, 167, 190, 57, 20, 22, 191, 47, 235, 221, 190, 117, 47, 164, 190, 116, 90, 18, 191, 108, 68, 101, 191, 67, 116, 156, 61, 197, 40, 174, 190, 253, 124, 218, 190, 45, 37, 247, 190, 105, 20, 252, 189, 10, 90, 131, 62, 88, 85, 199, 62, 156, 130, 17, 190, 151, 60, 25, 191, 205, 175, 41, 191, 25, 225, 219, 190, 63, 72, 200, 62, 208, 142, 191, 61, 1, 198, 7, 62, 163, 203, 141, 189, 80, 144, 134, 190, 205, 69, 147, 189, 121, 141, 88, 62, 116, 254, 193, 190, 133, 90, 138, 62, 129, 13, 107, 191, 32, 240, 127, 189, 192, 116, 109, 188, 105, 86, 137, 61, 84, 178, 123, 191, 26, 111, 116, 61, 198, 79, 167, 62, 166, 242, 191, 61, 254, 235, 191, 189, 153, 48, 111, 62, 6, 135, 145, 191, 223, 242, 29, 62, 39, 191, 239, 61, 110, 71, 144, 190, 160, 39, 84, 190, 44, 234, 68, 62, 230, 2, 210, 189, 47, 81, 142, 61, 178, 21, 22, 62, 169, 66, 184, 190, 1, 105, 15, 62, 241, 245, 253, 189, 61, 216, 139, 190, 75, 194, 170, 190, 44, 101, 151, 62, 189, 206, 56, 62, 226, 167, 82, 190, 94, 106, 144, 60, 73, 241, 129, 188, 59, 220, 25, 190, 213, 251, 225, 62, 192, 58, 119, 190, 167, 179, 201, 190, 78, 99, 33, 190, 182, 164, 121, 61, 143, 126, 87, 62, 156, 159, 15, 190, 187, 129, 152, 190, 80, 224, 184, 190, 43, 206, 85, 191, 166, 180, 68, 191, 126, 176, 120, 189, 76, 251, 70, 191, 160, 252, 151, 61, 245, 168, 0, 191, 246, 26, 191, 190, 102, 85, 8, 191, 55, 171, 186, 62, 100, 207, 132, 62, 192, 126, 37, 190, 178, 239, 150, 62, 81, 32, 26, 191, 193, 28, 227, 190, 53, 1, 30, 191, 37, 66, 185, 61, 107, 239, 247, 60, 56, 235, 227, 189, 30, 121, 248, 60, 108, 132, 67, 189, 137, 140, 124, 189, 84, 32, 232, 189, 209, 99, 203, 187, 117, 68, 150, 61, 125, 142, 43, 190, 118, 132, 51, 61, 129, 133, 134, 61, 133, 77, 28, 62, 168, 121, 19, 62, 214, 232, 198, 61, 157, 14, 233, 189, 33, 183, 251, 61, 127, 115, 199, 189, 87, 49, 224, 189, 173, 66, 39, 61, 180, 197, 230, 60, 162, 16, 12, 190, 153, 16, 231, 189, 49, 212, 185, 189, 113, 131, 28, 62, 196, 218, 146, 189, 175, 27, 202, 189, 206, 246, 33, 190, 255, 230, 171, 60, 36, 213, 31, 190, 43, 170, 217, 61, 108, 218, 16, 62, 80, 218, 43, 191, 246, 221, 173, 189, 189, 244, 248, 61, 110, 158, 39, 191, 94, 200, 170, 61, 247, 246, 12, 189, 217, 21, 79, 189, 41, 12, 16, 190, 116, 116, 36, 62, 242, 114, 44, 190, 252, 219, 227, 190, 201, 220, 13, 190, 139, 238, 218, 191, 41, 97, 136, 190, 121, 198, 161, 190, 12, 162, 224, 62, 138, 125, 130, 190, 146, 33, 185, 189, 180, 223, 204, 190, 241, 109, 221, 189, 154, 17, 124, 190, 184, 121, 237, 190, 173, 134, 51, 62, 32, 28, 57, 189, 77, 41, 46, 190, 196, 217, 169, 189, 211, 43, 223, 189, 79, 186, 189, 61, 124, 31, 133, 61, 155, 109, 46, 60, 168, 88, 189, 190, 50, 195, 68, 190, 108, 140, 20, 62, 170, 186, 132, 62, 113, 62, 16, 61, 220, 15, 159, 61, 235, 105, 185, 189, 71, 114, 249, 61, 172, 87, 69, 61, 180, 193, 221, 62, 183, 62, 133, 61, 146, 161, 134, 61, 208, 15, 9, 189, 115, 14, 13, 189, 45, 126, 139, 62, 110, 206, 186, 61, 51, 210, 4, 190, 111, 141, 154, 189, 30, 251, 117, 62, 66, 147, 62, 186, 141, 174, 169, 62, 31, 65, 76, 190, 237, 201, 128, 185, 206, 211, 39, 61, 50, 51, 30, 61, 117, 204, 144, 62, 80, 89, 73, 62, 127, 55, 5, 62, 54, 232, 142, 189, 236, 37, 88, 62, 68, 205, 143, 190, 77, 198, 252, 189, 229, 68, 71, 62, 51, 138, 61, 61, 194, 134, 205, 189, 135, 239, 213, 61, 102, 159, 55, 190, 64, 63, 29, 189, 78, 234, 2, 63, 48, 139, 46, 191, 148, 104, 103, 189, 231, 135, 29, 190, 21, 169, 78, 191, 168, 113, 124, 62, 1, 126, 92, 191, 38, 211, 51, 189, 6, 196, 248, 61, 208, 215, 27, 190, 128, 122, 148, 191, 1, 160, 172, 62, 130, 190, 117, 62, 38, 86, 53, 189, 40, 86, 196, 61, 152, 172, 224, 62, 109, 20, 134, 191, 45, 224, 219, 189, 204, 240, 13, 62, 3, 70, 27, 190, 180, 100, 246, 188, 120, 192, 104, 61, 214, 151, 201, 190, 168, 65, 227, 189, 193, 9, 54, 190, 35, 38, 139, 189, 149, 212, 162, 61, 222, 205, 139, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 75, 226, 188, 227, 34, 135, 61, 171, 155, 13, 62, 101, 244, 28, 190, 148, 81, 135, 62, 1, 194, 105, 189, 50, 238, 112, 61, 36, 123, 93, 59, 96, 124, 155, 61, 222, 56, 60, 62, 59, 20, 155, 62, 216, 251, 9, 190, 8, 94, 13, 60, 54, 254, 197, 61, 170, 79, 177, 62, 61, 238, 65, 190, 227, 90, 6, 190, 195, 85, 41, 62, 203, 102, 97, 61, 249, 5, 162, 62, 28, 65, 161, 189, 130, 31, 33, 62, 235, 126, 61, 190, 36, 40, 48, 190, 88, 25, 80, 62, 243, 128, 99, 62, 202, 100, 49, 61, 121, 135, 161, 61, 175, 234, 73, 190, 53, 250, 92, 60, 247, 122, 137, 62, 206, 188, 76, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 107, 138, 189, 63, 124, 229, 190, 58, 109, 10, 189, 227, 179, 96, 61, 196, 217, 18, 190, 199, 9, 6, 63, 192, 200, 94, 63, 190, 21, 48, 189, 220, 136, 170, 61, 177, 92, 249, 62, 249, 85, 148, 62, 113, 231, 123, 60, 166, 228, 155, 62, 218, 150, 128, 190, 101, 71, 233, 189, 26, 176, 24, 63, 190, 229, 162, 61, 198, 135, 72, 63, 119, 59, 147, 60, 110, 113, 106, 190, 192, 187, 85, 190, 183, 85, 141, 190, 129, 229, 6, 62, 219, 57, 121, 191, 84, 39, 30, 63, 13, 217, 184, 63, 164, 116, 77, 62, 96, 195, 241, 62, 74, 13, 53, 61, 243, 63, 131, 63, 42, 223, 134, 190, 54, 186, 4, 63, 72, 36, 188, 189, 155, 14, 39, 62, 102, 127, 183, 190, 70, 233, 163, 61, 207, 103, 118, 190, 113, 108, 165, 61, 205, 166, 71, 190, 20, 157, 2, 62, 187, 21, 37, 190, 160, 127, 15, 189, 215, 36, 255, 190, 218, 76, 199, 189, 236, 27, 52, 190, 170, 158, 248, 187, 134, 47, 158, 190, 249, 167, 22, 63, 86, 113, 248, 188, 54, 191, 206, 62, 0, 4, 133, 60, 88, 159, 148, 189, 139, 92, 60, 63, 76, 230, 220, 60, 228, 131, 86, 188, 150, 217, 90, 190, 135, 63, 111, 190, 253, 162, 110, 60, 141, 17, 60, 61, 164, 198, 13, 190, 153, 87, 66, 189, 27, 153, 184, 189, 192, 246, 167, 190, 163, 171, 88, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 188, 79, 190, 72, 236, 86, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {107, 204, 252, 62, 112, 225, 119, 191, 221, 109, 173, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {188, 54, 45, 64, 189, 42, 160, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0090/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}