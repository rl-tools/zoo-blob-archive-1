// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 244, 124, 63, 197, 234, 29, 63, 89, 105, 167, 62, 90, 60, 204, 188, 134, 198, 9, 191, 221, 249, 142, 62, 31, 189, 251, 190, 71, 201, 191, 62, 18, 135, 180, 190, 220, 225, 106, 190, 96, 72, 244, 190, 226, 51, 109, 191, 191, 166, 6, 63, 85, 180, 153, 189, 211, 28, 24, 191, 250, 149, 11, 191, 216, 32, 175, 62, 43, 51, 245, 61, 80, 6, 254, 62, 142, 64, 22, 190, 194, 181, 180, 187, 59, 193, 244, 62, 92, 125, 48, 63, 45, 174, 10, 191, 98, 131, 35, 191, 231, 10, 124, 63, 7, 251, 134, 62, 135, 201, 34, 62, 132, 246, 25, 191, 198, 113, 108, 62, 6, 197, 83, 61, 200, 181, 101, 63, 106, 76, 48, 62, 71, 73, 7, 62, 253, 235, 200, 188, 38, 242, 29, 60, 31, 110, 225, 62, 16, 2, 70, 191, 215, 234, 132, 190, 155, 88, 15, 191, 51, 91, 88, 190, 183, 205, 237, 190, 1, 66, 216, 62, 250, 197, 206, 62, 108, 160, 7, 62, 109, 136, 80, 61, 188, 126, 87, 63, 141, 140, 44, 191, 199, 243, 1, 63, 41, 223, 33, 191, 206, 167, 149, 62, 155, 167, 23, 62, 128, 191, 88, 63, 93, 115, 10, 63, 251, 63, 60, 191, 129, 130, 73, 191, 199, 57, 39, 62, 0, 12, 53, 63, 165, 69, 58, 191, 213, 228, 238, 190, 187, 124, 205, 187, 143, 160, 69, 63, 85, 164, 69, 62, 100, 76, 32, 191, 146, 10, 198, 190, 36, 23, 171, 191, 90, 203, 174, 62, 183, 249, 127, 189, 156, 83, 33, 63, 232, 86, 49, 63, 174, 74, 161, 63, 144, 3, 141, 62, 199, 110, 176, 62, 47, 38, 16, 63, 139, 191, 221, 62, 210, 252, 205, 60, 83, 38, 219, 190, 80, 237, 3, 60, 212, 249, 31, 191, 170, 165, 105, 191, 3, 54, 0, 190, 135, 176, 84, 61, 54, 141, 18, 63, 92, 82, 84, 191, 105, 55, 2, 191, 137, 238, 133, 63, 2, 161, 90, 61, 63, 172, 136, 190, 253, 15, 141, 189, 100, 189, 61, 63, 92, 206, 198, 189, 158, 10, 75, 191, 69, 150, 203, 62, 62, 116, 111, 190, 87, 106, 128, 190, 76, 84, 235, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {36, 78, 11, 191, 217, 10, 199, 62, 95, 112, 19, 63, 157, 161, 38, 189, 99, 46, 179, 190, 110, 228, 43, 63, 220, 187, 25, 191, 57, 248, 143, 62, 237, 161, 58, 63, 0, 198, 196, 62, 239, 159, 152, 59, 85, 114, 122, 190, 23, 188, 254, 62, 129, 48, 189, 60, 224, 251, 205, 190, 154, 238, 115, 60, 198, 44, 21, 63, 43, 162, 120, 61, 91, 91, 192, 190, 226, 163, 100, 190, 26, 177, 232, 189, 229, 77, 168, 190, 90, 193, 21, 63, 16, 20, 126, 62, 125, 195, 19, 62, 129, 113, 22, 63, 249, 47, 7, 63, 78, 33, 10, 190, 206, 122, 25, 62, 206, 31, 255, 189, 11, 153, 87, 62, 201, 184, 18, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 112, 10, 62, 2, 237, 147, 61, 67, 132, 108, 189, 100, 176, 130, 61, 189, 28, 52, 190, 38, 116, 21, 190, 228, 30, 157, 189, 180, 184, 68, 188, 142, 77, 26, 189, 223, 52, 191, 188, 254, 40, 31, 62, 43, 187, 144, 61, 186, 16, 28, 62, 1, 72, 30, 61, 24, 128, 217, 187, 14, 219, 222, 187, 170, 214, 218, 189, 152, 122, 11, 62, 251, 113, 8, 189, 180, 144, 32, 62, 97, 193, 147, 188, 115, 213, 197, 189, 248, 123, 182, 188, 238, 233, 198, 188, 142, 193, 245, 189, 105, 75, 34, 190, 203, 63, 171, 189, 64, 115, 50, 60, 78, 16, 177, 189, 40, 106, 177, 60, 240, 239, 25, 190, 31, 151, 114, 60, 144, 23, 213, 61, 189, 27, 207, 188, 107, 148, 181, 62, 157, 3, 236, 61, 81, 70, 163, 189, 23, 31, 154, 62, 108, 235, 201, 189, 153, 250, 156, 62, 69, 74, 153, 62, 249, 137, 125, 190, 96, 140, 105, 62, 60, 79, 188, 61, 39, 228, 149, 62, 149, 205, 90, 62, 181, 233, 163, 190, 167, 125, 67, 190, 125, 28, 224, 190, 17, 218, 65, 62, 40, 177, 78, 62, 196, 229, 161, 190, 220, 20, 85, 62, 178, 97, 189, 62, 88, 150, 236, 190, 35, 24, 88, 62, 231, 17, 122, 62, 30, 82, 158, 189, 231, 123, 33, 62, 244, 53, 71, 62, 127, 214, 21, 62, 21, 197, 32, 191, 64, 100, 7, 62, 142, 75, 95, 188, 33, 195, 161, 189, 87, 170, 65, 189, 85, 91, 135, 60, 188, 111, 5, 62, 122, 81, 61, 189, 166, 69, 124, 61, 147, 4, 17, 62, 123, 177, 67, 62, 89, 56, 147, 61, 32, 165, 159, 61, 114, 227, 201, 190, 251, 228, 18, 62, 169, 248, 68, 62, 122, 189, 129, 189, 117, 186, 10, 191, 14, 241, 254, 61, 99, 110, 144, 62, 185, 183, 7, 191, 31, 97, 130, 190, 128, 56, 133, 58, 134, 162, 184, 190, 116, 1, 6, 62, 29, 48, 215, 188, 79, 164, 161, 62, 196, 144, 99, 61, 93, 156, 91, 61, 3, 31, 67, 189, 151, 97, 209, 189, 57, 189, 209, 61, 18, 25, 162, 188, 100, 152, 184, 190, 165, 34, 38, 190, 182, 143, 246, 189, 22, 255, 249, 188, 44, 214, 213, 61, 172, 3, 50, 62, 203, 130, 130, 185, 238, 120, 113, 61, 39, 93, 46, 62, 74, 112, 41, 190, 89, 60, 36, 61, 208, 65, 255, 60, 114, 187, 167, 61, 124, 217, 241, 61, 41, 1, 205, 189, 75, 148, 47, 190, 53, 120, 131, 60, 79, 94, 9, 189, 129, 242, 195, 189, 242, 77, 182, 189, 195, 234, 23, 62, 167, 14, 45, 62, 80, 215, 53, 189, 195, 51, 21, 190, 84, 106, 33, 190, 107, 15, 24, 190, 139, 248, 52, 189, 35, 73, 226, 189, 99, 171, 36, 190, 59, 93, 48, 190, 74, 74, 14, 190, 237, 22, 28, 62, 208, 124, 129, 61, 214, 171, 11, 190, 250, 7, 49, 62, 184, 14, 94, 61, 200, 183, 209, 61, 210, 191, 197, 61, 181, 168, 58, 190, 243, 179, 88, 62, 191, 42, 196, 188, 9, 24, 59, 62, 51, 14, 164, 61, 145, 97, 104, 62, 137, 31, 10, 190, 251, 26, 7, 188, 96, 152, 82, 62, 133, 87, 133, 62, 153, 3, 85, 59, 115, 158, 25, 60, 91, 171, 4, 62, 129, 193, 174, 189, 108, 160, 159, 62, 56, 210, 160, 188, 124, 205, 106, 190, 0, 74, 136, 61, 165, 59, 135, 61, 213, 195, 60, 62, 153, 15, 173, 61, 10, 194, 234, 61, 133, 75, 185, 189, 180, 129, 65, 62, 191, 97, 19, 190, 142, 44, 189, 189, 172, 56, 17, 190, 167, 211, 11, 62, 13, 44, 221, 190, 79, 107, 0, 190, 1, 73, 139, 62, 41, 214, 128, 62, 90, 83, 68, 62, 204, 147, 201, 189, 130, 12, 77, 189, 198, 93, 54, 62, 117, 70, 211, 61, 96, 11, 129, 62, 250, 207, 155, 189, 86, 102, 180, 188, 164, 46, 108, 62, 221, 7, 130, 189, 193, 193, 78, 62, 204, 13, 128, 62, 200, 18, 143, 62, 98, 100, 119, 190, 169, 114, 110, 190, 185, 226, 66, 62, 231, 209, 187, 189, 56, 25, 173, 62, 5, 81, 254, 190, 148, 12, 192, 190, 200, 185, 209, 190, 122, 77, 151, 188, 201, 194, 216, 189, 171, 130, 80, 62, 121, 196, 20, 62, 89, 63, 234, 190, 84, 176, 8, 63, 227, 95, 87, 191, 159, 1, 192, 189, 208, 143, 157, 190, 48, 137, 241, 61, 141, 224, 35, 191, 64, 3, 133, 190, 134, 197, 204, 62, 49, 168, 110, 61, 43, 188, 228, 190, 136, 100, 150, 62, 201, 203, 152, 190, 183, 214, 52, 189, 2, 48, 84, 61, 187, 9, 17, 192, 141, 18, 46, 61, 59, 229, 133, 61, 251, 244, 139, 62, 96, 246, 151, 190, 7, 93, 93, 189, 103, 165, 136, 188, 229, 184, 152, 61, 67, 48, 216, 188, 91, 119, 36, 191, 29, 216, 67, 62, 240, 150, 51, 190, 109, 231, 33, 190, 113, 103, 90, 189, 161, 228, 61, 189, 17, 11, 11, 190, 68, 183, 202, 62, 40, 196, 134, 62, 147, 157, 197, 190, 85, 63, 20, 190, 30, 75, 209, 188, 129, 233, 134, 189, 208, 40, 13, 62, 205, 88, 58, 186, 220, 173, 143, 61, 157, 221, 93, 188, 101, 119, 172, 189, 233, 153, 188, 189, 131, 102, 30, 189, 30, 127, 218, 61, 228, 217, 19, 190, 69, 28, 26, 188, 176, 254, 152, 189, 52, 83, 50, 190, 23, 149, 57, 61, 17, 165, 114, 189, 171, 80, 254, 188, 1, 145, 131, 61, 36, 231, 52, 190, 215, 173, 8, 189, 251, 83, 233, 189, 194, 227, 139, 189, 158, 216, 43, 189, 4, 163, 114, 60, 137, 174, 247, 59, 16, 141, 36, 189, 134, 194, 14, 190, 41, 89, 155, 189, 133, 149, 199, 61, 102, 158, 253, 189, 27, 181, 208, 189, 134, 76, 15, 62, 149, 73, 223, 60, 238, 230, 205, 189, 156, 151, 230, 189, 226, 217, 22, 190, 110, 146, 12, 59, 203, 129, 71, 188, 198, 247, 74, 61, 165, 255, 14, 190, 74, 243, 36, 190, 154, 141, 43, 62, 116, 84, 139, 60, 62, 112, 46, 190, 205, 201, 17, 59, 0, 37, 181, 189, 164, 236, 248, 61, 42, 138, 187, 188, 213, 217, 198, 189, 23, 225, 253, 61, 24, 178, 157, 188, 225, 37, 6, 189, 39, 55, 24, 61, 189, 52, 23, 190, 52, 6, 42, 190, 232, 48, 209, 188, 81, 249, 245, 60, 36, 61, 3, 62, 16, 132, 42, 190, 163, 209, 23, 61, 102, 120, 229, 187, 16, 83, 19, 61, 178, 23, 131, 189, 7, 15, 61, 61, 145, 240, 80, 191, 146, 56, 37, 60, 42, 184, 163, 188, 247, 102, 22, 190, 159, 170, 72, 63, 127, 214, 26, 60, 198, 157, 194, 189, 182, 33, 78, 61, 64, 16, 209, 61, 72, 177, 16, 61, 12, 119, 14, 189, 176, 35, 120, 61, 169, 85, 2, 62, 210, 226, 200, 189, 102, 33, 177, 190, 241, 65, 198, 62, 76, 164, 197, 62, 121, 36, 64, 189, 105, 76, 168, 190, 90, 229, 36, 63, 233, 125, 39, 189, 16, 251, 15, 191, 71, 169, 123, 62, 230, 163, 109, 190, 203, 150, 143, 190, 27, 243, 3, 62, 52, 164, 23, 189, 138, 183, 241, 60, 8, 172, 188, 62, 96, 66, 198, 61, 106, 104, 110, 189, 18, 193, 179, 189, 228, 104, 186, 190, 230, 33, 7, 62, 38, 241, 6, 189, 10, 132, 155, 190, 67, 201, 155, 60, 135, 83, 11, 188, 45, 32, 10, 190, 234, 126, 124, 62, 7, 114, 0, 61, 51, 59, 190, 61, 240, 140, 137, 191, 93, 53, 97, 189, 146, 214, 79, 62, 60, 165, 126, 190, 236, 254, 121, 191, 210, 8, 183, 61, 69, 239, 214, 61, 44, 197, 18, 190, 5, 157, 8, 190, 107, 35, 47, 62, 103, 106, 49, 190, 31, 95, 133, 190, 20, 239, 17, 62, 65, 249, 115, 61, 182, 94, 4, 190, 199, 158, 140, 62, 98, 59, 140, 190, 249, 195, 90, 61, 197, 88, 230, 61, 79, 209, 49, 62, 165, 31, 80, 61, 244, 72, 179, 189, 107, 43, 1, 190, 127, 149, 41, 190, 236, 232, 230, 61, 201, 78, 180, 189, 252, 81, 28, 62, 96, 178, 239, 189, 212, 140, 219, 189, 212, 5, 100, 189, 99, 183, 12, 190, 252, 58, 212, 61, 199, 161, 138, 188, 201, 124, 169, 189, 88, 43, 22, 189, 159, 102, 34, 190, 89, 148, 154, 61, 132, 64, 46, 188, 165, 121, 130, 189, 80, 61, 187, 189, 200, 211, 75, 189, 147, 232, 123, 189, 233, 36, 31, 190, 173, 53, 163, 188, 33, 103, 234, 189, 40, 83, 62, 61, 19, 112, 48, 190, 123, 2, 117, 61, 175, 63, 0, 190, 98, 249, 228, 61, 0, 77, 226, 189, 245, 179, 184, 189, 71, 64, 183, 189, 197, 251, 33, 62, 191, 26, 229, 187, 116, 31, 42, 62, 189, 65, 98, 61, 190, 59, 89, 189, 99, 44, 116, 62, 242, 209, 14, 190, 162, 92, 10, 61, 73, 139, 68, 62, 235, 100, 1, 191, 120, 104, 155, 62, 76, 38, 66, 191, 237, 21, 16, 189, 131, 22, 156, 61, 240, 172, 226, 60, 33, 57, 46, 191, 33, 254, 220, 60, 206, 24, 175, 62, 39, 96, 157, 190, 63, 189, 129, 61, 116, 159, 143, 62, 35, 117, 95, 190, 153, 84, 183, 61, 134, 43, 24, 62, 29, 97, 78, 60, 123, 67, 131, 190, 220, 219, 241, 188, 81, 213, 37, 189, 227, 70, 130, 189, 53, 207, 244, 190, 171, 160, 76, 190, 15, 225, 64, 62, 145, 4, 147, 190, 253, 188, 118, 62, 139, 84, 47, 62, 86, 172, 80, 62, 196, 148, 198, 61, 144, 81, 119, 188, 47, 140, 45, 61, 204, 188, 150, 60, 79, 101, 156, 62, 113, 124, 119, 62, 117, 16, 22, 62, 0, 220, 129, 62, 14, 126, 4, 61, 48, 156, 12, 62, 55, 42, 119, 62, 72, 128, 62, 62, 203, 146, 192, 188, 233, 109, 229, 189, 229, 12, 104, 62, 98, 77, 22, 62, 2, 22, 76, 190, 79, 121, 166, 61, 117, 21, 168, 60, 134, 21, 134, 190, 104, 23, 73, 62, 44, 188, 79, 62, 163, 126, 255, 189, 211, 50, 10, 62, 225, 230, 254, 60, 232, 143, 215, 189, 87, 38, 202, 190, 131, 156, 0, 62, 238, 253, 136, 189, 117, 170, 8, 62, 30, 11, 2, 62, 166, 96, 1, 62, 54, 146, 213, 188, 54, 230, 160, 60, 206, 222, 195, 188, 90, 15, 45, 62, 254, 209, 234, 62, 198, 18, 96, 61, 42, 145, 4, 190, 255, 112, 132, 59, 26, 134, 35, 62, 63, 236, 189, 62, 86, 201, 19, 62, 160, 242, 127, 190, 72, 89, 109, 189, 56, 74, 22, 189, 221, 189, 137, 60, 116, 231, 168, 189, 95, 163, 153, 189, 195, 131, 240, 189, 122, 76, 236, 189, 248, 13, 10, 62, 69, 57, 171, 62, 173, 225, 154, 61, 122, 25, 51, 60, 96, 111, 40, 190, 218, 78, 77, 62, 21, 218, 135, 61, 24, 148, 60, 190, 24, 138, 224, 61, 132, 27, 9, 60, 233, 182, 214, 190, 221, 30, 217, 62, 124, 101, 117, 189, 110, 232, 214, 61, 226, 118, 159, 62, 166, 89, 229, 190, 204, 214, 9, 190, 127, 130, 71, 62, 56, 33, 103, 191, 77, 247, 197, 62, 9, 115, 28, 190, 232, 244, 48, 62, 19, 16, 212, 61, 181, 142, 156, 61, 41, 174, 221, 190, 116, 53, 197, 61, 249, 89, 0, 63, 132, 218, 38, 190, 132, 142, 219, 61, 158, 174, 180, 62, 97, 188, 27, 61, 148, 134, 237, 189, 210, 49, 103, 61, 80, 43, 147, 190, 208, 47, 156, 190, 249, 228, 29, 189, 47, 160, 144, 59, 48, 218, 221, 189, 27, 157, 152, 190, 109, 184, 34, 190, 16, 254, 94, 189, 65, 0, 69, 62, 120, 243, 38, 190, 116, 158, 18, 190, 47, 27, 24, 62, 208, 127, 56, 190, 194, 197, 76, 189, 153, 115, 40, 190, 232, 117, 173, 60, 182, 83, 39, 190, 189, 33, 134, 188, 53, 27, 64, 190, 186, 161, 114, 188, 162, 72, 41, 190, 202, 185, 185, 61, 109, 249, 190, 61, 74, 105, 238, 189, 75, 124, 160, 60, 162, 129, 186, 189, 199, 200, 198, 189, 59, 95, 139, 189, 193, 24, 253, 61, 139, 125, 55, 189, 253, 249, 15, 62, 221, 204, 39, 190, 32, 175, 122, 61, 204, 45, 202, 189, 189, 208, 41, 60, 139, 87, 14, 190, 104, 118, 54, 190, 193, 33, 59, 61, 255, 237, 89, 61, 73, 80, 180, 61, 134, 162, 5, 62, 225, 255, 215, 190, 109, 109, 229, 61, 172, 86, 76, 61, 158, 143, 110, 191, 63, 158, 187, 62, 242, 158, 105, 62, 214, 62, 199, 60, 110, 230, 37, 191, 178, 215, 185, 62, 123, 120, 177, 61, 39, 246, 82, 190, 201, 65, 206, 61, 132, 100, 55, 191, 3, 55, 190, 190, 124, 158, 94, 190, 51, 20, 166, 189, 247, 189, 234, 61, 129, 227, 232, 189, 187, 181, 31, 190, 56, 29, 125, 62, 78, 106, 40, 190, 110, 218, 127, 191, 186, 190, 34, 62, 125, 112, 75, 190, 129, 130, 82, 190, 104, 154, 205, 61, 156, 135, 9, 62, 71, 226, 245, 190, 109, 7, 77, 62, 94, 238, 180, 62, 60, 129, 32, 190, 162, 26, 226, 189, 238, 131, 153, 189, 222, 220, 244, 189, 29, 1, 238, 188, 168, 232, 24, 190, 239, 154, 144, 189, 151, 49, 94, 61, 111, 155, 90, 61, 219, 135, 23, 61, 213, 194, 240, 189, 141, 182, 16, 190, 188, 151, 134, 187, 84, 159, 50, 190, 56, 89, 164, 189, 182, 82, 53, 189, 241, 238, 226, 188, 165, 95, 44, 61, 90, 52, 65, 189, 118, 177, 178, 189, 150, 22, 173, 61, 51, 54, 47, 190, 4, 119, 164, 61, 184, 162, 46, 62, 22, 174, 34, 62, 236, 197, 25, 190, 215, 9, 1, 62, 78, 50, 7, 62, 76, 171, 160, 189, 11, 142, 206, 188, 170, 243, 241, 189, 177, 75, 34, 190, 156, 23, 255, 189, 97, 238, 42, 189, 206, 119, 60, 61, 31, 232, 223, 188, 24, 50, 153, 62, 42, 132, 133, 62, 25, 234, 231, 189, 200, 205, 146, 62, 114, 138, 160, 61, 120, 41, 234, 61, 246, 220, 37, 186, 186, 238, 157, 187, 65, 230, 176, 189, 160, 146, 32, 62, 70, 67, 188, 62, 120, 102, 250, 188, 104, 76, 235, 190, 41, 158, 131, 190, 67, 239, 108, 189, 219, 215, 17, 188, 177, 50, 18, 62, 147, 43, 205, 189, 255, 4, 177, 189, 57, 250, 40, 62, 17, 219, 104, 189, 140, 228, 115, 62, 146, 107, 137, 62, 107, 45, 226, 61, 227, 13, 90, 189, 99, 186, 36, 62, 114, 84, 251, 59, 51, 175, 96, 190, 119, 239, 176, 189, 191, 234, 117, 61, 111, 89, 139, 190, 107, 39, 245, 189, 69, 241, 72, 189, 106, 61, 124, 190, 154, 147, 46, 186, 65, 144, 178, 188, 231, 24, 49, 190, 202, 64, 130, 190, 33, 44, 13, 190, 189, 77, 73, 61, 56, 202, 34, 190, 98, 196, 17, 190, 154, 196, 154, 60, 220, 109, 61, 62, 91, 223, 116, 190, 108, 47, 70, 190, 124, 21, 21, 62, 39, 188, 157, 190, 205, 11, 213, 62, 153, 31, 127, 187, 66, 230, 232, 189, 160, 118, 69, 190, 236, 154, 203, 61, 138, 181, 154, 190, 211, 181, 99, 190, 199, 114, 112, 62, 52, 134, 130, 61, 230, 53, 80, 187, 247, 128, 203, 190, 111, 207, 77, 190, 202, 69, 117, 62, 234, 158, 181, 61, 108, 254, 58, 63, 116, 39, 77, 189, 45, 213, 244, 61, 173, 150, 101, 62, 76, 47, 47, 190, 171, 172, 235, 189, 217, 0, 219, 189, 100, 4, 138, 62, 224, 41, 13, 61, 211, 203, 196, 189, 178, 172, 1, 62, 26, 94, 242, 60, 219, 186, 105, 62, 124, 23, 120, 61, 21, 160, 137, 62, 27, 133, 155, 190, 61, 237, 234, 61, 60, 175, 252, 61, 60, 86, 176, 62, 89, 84, 253, 189, 90, 214, 69, 191, 82, 195, 133, 60, 200, 112, 189, 190, 248, 222, 154, 62, 42, 205, 145, 62, 184, 196, 65, 62, 162, 206, 136, 57, 229, 86, 106, 62, 63, 127, 209, 190, 167, 226, 161, 190, 173, 244, 208, 62, 117, 118, 159, 61, 108, 88, 96, 61, 135, 204, 141, 189, 119, 71, 41, 190, 196, 233, 46, 190, 109, 161, 52, 188, 205, 162, 100, 189, 149, 190, 12, 62, 32, 203, 136, 189, 57, 114, 207, 189, 46, 218, 52, 190, 212, 39, 145, 189, 197, 11, 216, 186, 10, 213, 0, 190, 182, 113, 141, 61, 78, 183, 85, 61, 71, 161, 250, 61, 52, 118, 49, 190, 91, 216, 141, 61, 43, 232, 247, 61, 246, 70, 2, 62, 114, 197, 82, 189, 165, 180, 29, 190, 196, 240, 220, 189, 205, 189, 132, 189, 254, 248, 215, 188, 77, 226, 198, 61, 167, 155, 0, 61, 4, 83, 23, 190, 142, 188, 8, 60, 150, 215, 11, 62, 9, 30, 56, 60, 68, 196, 148, 188, 16, 76, 3, 63, 12, 8, 168, 61, 115, 81, 145, 190, 148, 90, 0, 190, 150, 253, 240, 188, 177, 232, 70, 190, 169, 85, 250, 189, 120, 15, 172, 187, 228, 247, 61, 190, 12, 95, 57, 60, 27, 24, 132, 190, 72, 103, 139, 60, 51, 10, 104, 59, 235, 90, 45, 60, 147, 82, 135, 62, 3, 157, 41, 190, 66, 243, 122, 61, 250, 161, 218, 61, 100, 122, 103, 189, 179, 188, 118, 190, 105, 159, 125, 190, 73, 220, 182, 61, 162, 195, 140, 59, 70, 64, 63, 62, 62, 9, 35, 62, 154, 60, 197, 190, 20, 49, 48, 191, 165, 191, 0, 190, 63, 133, 200, 190, 207, 85, 146, 61, 14, 253, 29, 61, 253, 145, 176, 61, 83, 207, 187, 190, 104, 192, 220, 189, 28, 112, 79, 190, 189, 151, 14, 191, 48, 126, 21, 62, 245, 81, 21, 62, 122, 103, 111, 189, 248, 36, 247, 190, 147, 247, 21, 62, 64, 209, 167, 61, 236, 46, 205, 190, 231, 74, 237, 61, 167, 222, 22, 190, 129, 222, 186, 189, 96, 232, 26, 191, 255, 140, 217, 189, 52, 0, 89, 62, 207, 26, 54, 190, 16, 22, 31, 189, 19, 252, 143, 62, 81, 69, 5, 190, 210, 87, 13, 191, 185, 45, 60, 62, 168, 18, 214, 59, 6, 105, 7, 189, 180, 51, 68, 61, 165, 122, 130, 61, 14, 165, 52, 191, 152, 221, 130, 62, 61, 136, 92, 62, 143, 223, 147, 190, 247, 91, 83, 190, 143, 61, 126, 62, 222, 122, 238, 190, 182, 100, 130, 62, 56, 15, 18, 191, 221, 120, 77, 190, 175, 46, 134, 62, 147, 45, 25, 62, 245, 253, 255, 59, 164, 30, 140, 62, 41, 252, 163, 190, 232, 33, 129, 61, 233, 103, 28, 62, 181, 41, 160, 191, 225, 42, 136, 62, 79, 15, 195, 62, 149, 79, 93, 63, 40, 137, 150, 190, 205, 208, 29, 191, 183, 210, 191, 190, 241, 59, 56, 190, 181, 1, 47, 191, 130, 210, 77, 191, 51, 80, 180, 61, 193, 6, 9, 191, 128, 81, 10, 191, 51, 192, 21, 190, 51, 143, 243, 61, 10, 113, 9, 62, 233, 138, 176, 62, 151, 235, 16, 190, 121, 224, 47, 191, 213, 118, 29, 191, 14, 126, 246, 190, 133, 94, 194, 62, 231, 2, 42, 61, 33, 204, 23, 62, 59, 35, 72, 189, 7, 36, 119, 190, 205, 69, 147, 189, 34, 41, 39, 62, 130, 85, 103, 190, 68, 10, 132, 62, 226, 219, 27, 58, 32, 240, 127, 189, 122, 119, 41, 189, 29, 68, 110, 61, 185, 25, 111, 190, 213, 136, 88, 61, 139, 14, 163, 62, 5, 145, 12, 61, 225, 111, 123, 189, 99, 250, 147, 62, 153, 171, 56, 190, 90, 122, 39, 62, 144, 212, 234, 61, 154, 155, 154, 190, 46, 153, 138, 190, 89, 59, 67, 62, 66, 238, 53, 189, 229, 187, 194, 61, 123, 235, 252, 60, 149, 241, 190, 190, 48, 4, 56, 62, 87, 121, 24, 190, 7, 57, 47, 190, 249, 40, 173, 190, 55, 189, 145, 62, 6, 108, 215, 61, 229, 10, 12, 190, 146, 172, 56, 61, 73, 241, 129, 188, 84, 1, 198, 189, 71, 52, 143, 62, 190, 3, 209, 190, 90, 200, 194, 188, 78, 99, 33, 190, 201, 176, 124, 190, 247, 80, 29, 62, 191, 236, 162, 189, 108, 155, 82, 190, 2, 118, 22, 191, 186, 189, 143, 190, 169, 118, 141, 190, 13, 102, 210, 189, 31, 27, 168, 190, 159, 237, 3, 61, 159, 25, 37, 190, 179, 212, 232, 189, 166, 123, 35, 190, 90, 233, 156, 61, 163, 170, 122, 61, 94, 146, 224, 189, 154, 117, 182, 62, 62, 24, 151, 190, 73, 232, 177, 190, 200, 92, 236, 190, 37, 66, 185, 61, 207, 157, 5, 61, 56, 235, 227, 189, 30, 121, 248, 60, 108, 132, 67, 189, 226, 154, 123, 189, 84, 32, 232, 189, 209, 99, 203, 187, 117, 68, 150, 61, 149, 196, 40, 190, 118, 132, 51, 61, 129, 133, 134, 61, 253, 34, 32, 62, 168, 121, 19, 62, 214, 232, 198, 61, 157, 14, 233, 189, 133, 16, 2, 62, 127, 115, 199, 189, 87, 49, 224, 189, 0, 59, 47, 61, 180, 197, 230, 60, 162, 16, 12, 190, 15, 237, 224, 189, 49, 212, 185, 189, 190, 205, 28, 62, 246, 1, 142, 189, 136, 25, 198, 189, 206, 246, 33, 190, 255, 230, 171, 60, 36, 213, 31, 190, 85, 86, 222, 61, 62, 214, 17, 62, 183, 108, 1, 191, 80, 117, 96, 61, 199, 196, 54, 62, 210, 90, 232, 190, 58, 118, 18, 61, 138, 92, 68, 61, 217, 21, 79, 189, 8, 211, 2, 191, 130, 99, 53, 62, 67, 52, 160, 189, 123, 96, 1, 191, 201, 220, 13, 190, 28, 140, 128, 191, 113, 108, 94, 189, 0, 162, 33, 190, 135, 181, 51, 62, 79, 38, 16, 190, 241, 9, 28, 190, 25, 52, 161, 190, 0, 47, 200, 59, 93, 77, 143, 190, 255, 222, 174, 190, 171, 112, 135, 62, 40, 17, 107, 190, 66, 58, 148, 190, 170, 178, 27, 62, 190, 8, 184, 58, 137, 175, 62, 190, 68, 33, 55, 61, 138, 36, 25, 62, 147, 57, 145, 190, 147, 72, 134, 189, 12, 216, 181, 61, 171, 203, 35, 62, 151, 158, 46, 61, 250, 198, 196, 61, 196, 253, 26, 190, 121, 95, 50, 62, 172, 87, 69, 61, 67, 15, 228, 62, 236, 159, 139, 61, 33, 157, 60, 188, 69, 239, 46, 190, 115, 14, 13, 189, 188, 57, 118, 62, 229, 179, 23, 62, 59, 24, 147, 190, 247, 92, 247, 189, 104, 5, 59, 62, 186, 165, 208, 60, 191, 230, 36, 62, 48, 5, 140, 190, 70, 170, 50, 189, 77, 190, 145, 61, 245, 238, 217, 186, 88, 179, 129, 62, 242, 185, 105, 62, 14, 244, 113, 61, 203, 222, 48, 190, 112, 86, 67, 62, 249, 101, 12, 190, 150, 204, 30, 190, 16, 198, 61, 60, 38, 239, 210, 59, 57, 155, 45, 190, 210, 217, 79, 61, 199, 3, 62, 190, 101, 76, 17, 189, 72, 14, 5, 63, 149, 59, 232, 190, 148, 104, 103, 189, 155, 182, 83, 190, 143, 131, 97, 190, 131, 92, 64, 62, 15, 227, 3, 61, 38, 211, 51, 189, 20, 42, 14, 61, 133, 203, 245, 189, 161, 18, 6, 191, 32, 75, 184, 62, 154, 210, 73, 62, 158, 46, 4, 190, 71, 172, 57, 62, 33, 66, 211, 62, 25, 132, 54, 190, 231, 58, 187, 189, 35, 242, 250, 61, 183, 223, 84, 190, 68, 49, 222, 189, 190, 24, 154, 60, 55, 41, 163, 190, 18, 51, 128, 189, 195, 61, 49, 190, 106, 73, 166, 189, 94, 253, 242, 61, 249, 243, 152, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 49, 160, 188, 58, 10, 171, 61, 23, 146, 90, 62, 101, 244, 28, 190, 4, 213, 122, 62, 143, 234, 182, 188, 148, 92, 221, 61, 36, 123, 93, 59, 96, 124, 155, 61, 189, 162, 82, 62, 4, 52, 150, 62, 157, 89, 246, 189, 160, 196, 47, 188, 210, 200, 224, 61, 41, 77, 170, 62, 124, 151, 42, 190, 227, 90, 6, 190, 69, 14, 170, 61, 145, 203, 135, 61, 148, 252, 155, 62, 137, 110, 155, 60, 67, 255, 76, 62, 235, 126, 61, 190, 73, 125, 22, 190, 230, 135, 55, 62, 169, 86, 114, 62, 114, 8, 217, 59, 166, 224, 48, 189, 77, 14, 71, 190, 241, 9, 111, 61, 162, 224, 112, 62, 134, 36, 248, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 161, 144, 189, 163, 76, 212, 190, 1, 1, 157, 188, 227, 179, 96, 61, 224, 236, 51, 190, 184, 89, 5, 63, 4, 205, 75, 63, 190, 21, 48, 189, 220, 136, 170, 61, 150, 116, 33, 63, 155, 164, 142, 62, 50, 80, 60, 61, 34, 69, 150, 62, 172, 190, 155, 190, 17, 138, 25, 190, 18, 122, 254, 62, 190, 229, 162, 61, 133, 84, 92, 63, 4, 104, 144, 61, 54, 12, 144, 190, 229, 182, 8, 190, 146, 102, 145, 190, 129, 229, 6, 62, 156, 169, 1, 191, 175, 59, 8, 63, 10, 17, 153, 63, 48, 3, 133, 62, 54, 221, 184, 62, 88, 123, 53, 61, 160, 141, 77, 63, 73, 36, 160, 190, 96, 239, 237, 62, 160, 52, 187, 189, 99, 197, 4, 62, 149, 63, 130, 190, 70, 233, 163, 61, 63, 27, 66, 190, 120, 96, 199, 61, 43, 211, 151, 190, 20, 157, 2, 62, 187, 21, 37, 190, 203, 1, 191, 61, 207, 174, 20, 191, 103, 54, 205, 189, 5, 166, 94, 190, 100, 2, 195, 61, 179, 112, 90, 190, 175, 115, 101, 62, 86, 113, 248, 188, 184, 243, 112, 62, 158, 171, 234, 60, 175, 70, 217, 189, 103, 180, 28, 63, 36, 90, 187, 61, 228, 131, 86, 188, 150, 16, 158, 62, 58, 58, 85, 190, 137, 173, 136, 62, 104, 67, 14, 188, 110, 12, 208, 189, 92, 130, 66, 189, 199, 143, 151, 61, 42, 165, 143, 190, 37, 51, 77, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 65, 41, 190, 43, 73, 1, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {192, 82, 19, 63, 174, 105, 20, 191, 69, 253, 42, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {221, 121, 8, 64, 21, 247, 109, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0090/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}