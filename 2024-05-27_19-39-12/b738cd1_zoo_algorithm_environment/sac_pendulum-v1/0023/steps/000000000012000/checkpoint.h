// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {133, 242, 240, 190, 4, 59, 110, 191, 226, 39, 18, 191, 188, 199, 231, 190, 19, 212, 131, 191, 216, 203, 119, 190, 94, 248, 14, 61, 104, 138, 18, 191, 117, 82, 28, 62, 151, 141, 156, 62, 108, 106, 96, 190, 48, 103, 39, 62, 222, 246, 13, 191, 18, 231, 42, 63, 249, 122, 34, 63, 29, 16, 33, 63, 197, 114, 105, 191, 105, 193, 148, 190, 139, 164, 232, 190, 115, 142, 52, 191, 236, 222, 139, 62, 15, 71, 141, 62, 61, 122, 212, 62, 70, 255, 171, 189, 12, 115, 189, 190, 165, 161, 83, 63, 163, 171, 254, 62, 203, 170, 92, 63, 111, 43, 13, 63, 243, 50, 174, 62, 121, 31, 207, 61, 8, 132, 137, 191, 145, 203, 158, 190, 184, 95, 177, 62, 80, 196, 133, 191, 72, 54, 122, 190, 50, 82, 70, 62, 197, 19, 36, 191, 196, 253, 130, 61, 235, 2, 23, 63, 141, 157, 42, 63, 57, 44, 47, 63, 183, 80, 170, 62, 71, 61, 7, 63, 236, 10, 237, 189, 91, 117, 64, 191, 51, 242, 87, 61, 148, 13, 161, 61, 22, 252, 51, 63, 22, 40, 147, 191, 245, 38, 34, 190, 218, 189, 222, 62, 205, 52, 166, 191, 8, 118, 103, 190, 169, 17, 224, 62, 238, 140, 188, 62, 108, 58, 250, 190, 180, 110, 30, 191, 84, 253, 85, 191, 26, 127, 2, 62, 54, 88, 12, 191, 192, 28, 229, 189, 144, 117, 137, 189, 115, 54, 80, 191, 61, 202, 117, 190, 153, 243, 21, 188, 80, 113, 215, 190, 149, 205, 144, 190, 66, 241, 31, 190, 205, 208, 239, 190, 115, 109, 154, 191, 141, 19, 146, 190, 241, 186, 183, 61, 11, 88, 102, 63, 170, 189, 193, 62, 161, 237, 21, 191, 212, 196, 23, 63, 213, 81, 22, 190, 65, 139, 10, 62, 238, 153, 52, 63, 235, 204, 244, 62, 107, 100, 82, 63, 245, 83, 62, 63, 53, 14, 30, 63, 190, 43, 132, 190, 189, 209, 5, 63, 24, 15, 252, 190, 124, 20, 24, 191, 227, 228, 127, 191, 3, 125, 224, 190, 166, 134, 162, 190, 206, 32, 16, 191, 75, 208, 25, 63, 232, 243, 250, 190, 167, 247, 95, 63, 40, 60, 78, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 116, 151, 190, 21, 177, 19, 63, 248, 168, 207, 190, 215, 79, 29, 63, 68, 219, 237, 190, 5, 224, 6, 191, 50, 140, 232, 190, 118, 166, 59, 63, 55, 104, 5, 191, 104, 163, 100, 191, 17, 69, 5, 62, 49, 239, 127, 61, 19, 132, 202, 188, 171, 47, 225, 189, 102, 188, 167, 62, 97, 92, 247, 62, 131, 149, 253, 189, 12, 244, 38, 61, 142, 182, 193, 187, 232, 196, 144, 189, 218, 224, 21, 63, 172, 56, 16, 63, 82, 11, 47, 63, 125, 161, 61, 61, 169, 190, 157, 60, 41, 57, 17, 63, 176, 204, 96, 189, 102, 12, 217, 61, 89, 41, 120, 190, 176, 144, 189, 62, 98, 232, 133, 190, 248, 81, 151, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 200, 170, 189, 82, 67, 30, 189, 200, 93, 67, 191, 221, 156, 19, 190, 70, 181, 235, 191, 17, 39, 24, 191, 46, 139, 47, 191, 94, 104, 123, 62, 112, 20, 135, 190, 91, 126, 63, 190, 249, 49, 73, 190, 134, 238, 90, 190, 249, 9, 55, 191, 115, 136, 249, 190, 0, 203, 200, 61, 25, 209, 199, 61, 58, 46, 72, 61, 112, 90, 20, 190, 37, 222, 76, 189, 239, 213, 151, 190, 23, 255, 3, 62, 227, 51, 252, 188, 219, 231, 138, 189, 239, 214, 49, 190, 95, 136, 54, 190, 31, 129, 24, 62, 132, 245, 14, 191, 226, 45, 134, 190, 37, 114, 140, 61, 68, 64, 46, 62, 211, 141, 28, 191, 208, 248, 121, 61, 41, 228, 38, 190, 120, 23, 178, 62, 133, 33, 172, 62, 228, 252, 120, 62, 107, 119, 135, 61, 185, 239, 31, 191, 175, 196, 57, 190, 57, 159, 14, 62, 182, 187, 135, 189, 111, 240, 240, 190, 47, 225, 49, 189, 67, 192, 130, 62, 84, 43, 109, 62, 198, 60, 7, 61, 132, 142, 143, 190, 35, 144, 83, 189, 15, 11, 152, 62, 94, 97, 159, 62, 108, 166, 98, 62, 119, 44, 151, 60, 142, 9, 123, 60, 89, 202, 215, 61, 184, 102, 58, 62, 116, 96, 152, 191, 78, 166, 65, 61, 15, 77, 26, 190, 246, 28, 144, 189, 206, 155, 181, 188, 215, 169, 228, 190, 228, 235, 237, 190, 121, 68, 69, 61, 164, 170, 60, 62, 106, 238, 215, 190, 3, 60, 215, 188, 65, 174, 49, 62, 170, 238, 4, 60, 168, 176, 161, 62, 82, 79, 131, 62, 229, 36, 172, 62, 124, 249, 177, 61, 227, 252, 130, 62, 140, 177, 91, 62, 59, 98, 228, 61, 252, 70, 95, 62, 185, 158, 74, 62, 20, 3, 29, 189, 248, 86, 188, 62, 244, 24, 55, 62, 90, 52, 86, 190, 16, 4, 170, 61, 74, 132, 116, 190, 20, 85, 149, 62, 82, 61, 114, 189, 180, 145, 248, 190, 72, 146, 180, 60, 121, 142, 252, 62, 189, 119, 228, 59, 188, 244, 41, 62, 43, 252, 7, 62, 218, 129, 98, 190, 19, 61, 55, 191, 133, 80, 236, 188, 139, 51, 78, 62, 58, 81, 133, 189, 167, 204, 171, 61, 104, 154, 34, 62, 131, 16, 176, 61, 107, 234, 94, 189, 153, 72, 42, 190, 216, 130, 149, 189, 245, 162, 214, 61, 199, 49, 133, 61, 15, 25, 249, 189, 101, 6, 141, 61, 125, 241, 226, 59, 148, 159, 148, 189, 40, 239, 13, 190, 41, 38, 53, 60, 105, 143, 252, 189, 228, 203, 138, 189, 183, 70, 145, 61, 247, 53, 47, 190, 42, 216, 21, 62, 178, 249, 75, 61, 73, 137, 20, 190, 164, 111, 175, 61, 61, 49, 66, 190, 11, 193, 63, 190, 130, 216, 131, 60, 222, 183, 14, 189, 120, 91, 62, 61, 96, 22, 32, 190, 60, 245, 126, 189, 152, 178, 161, 189, 154, 58, 10, 62, 66, 15, 29, 190, 70, 244, 247, 61, 23, 29, 33, 60, 205, 7, 137, 189, 193, 34, 144, 61, 119, 177, 142, 191, 31, 44, 208, 190, 226, 142, 6, 189, 233, 221, 157, 62, 123, 121, 117, 191, 255, 233, 174, 190, 161, 132, 50, 62, 88, 215, 168, 61, 131, 233, 82, 190, 200, 12, 206, 186, 116, 152, 154, 62, 162, 183, 38, 61, 105, 242, 105, 62, 33, 97, 134, 59, 45, 149, 68, 62, 232, 249, 84, 62, 156, 127, 124, 189, 172, 113, 106, 62, 134, 62, 48, 62, 41, 233, 15, 62, 177, 85, 183, 190, 130, 47, 206, 189, 7, 129, 59, 191, 178, 1, 204, 61, 55, 244, 11, 190, 174, 72, 24, 62, 172, 64, 2, 191, 195, 132, 109, 190, 19, 43, 173, 60, 42, 204, 68, 189, 92, 108, 173, 189, 240, 143, 238, 189, 53, 248, 137, 61, 206, 198, 33, 190, 149, 242, 151, 61, 169, 47, 78, 190, 188, 190, 53, 190, 254, 244, 8, 190, 107, 132, 156, 189, 235, 233, 114, 189, 38, 79, 14, 189, 253, 205, 194, 60, 129, 65, 62, 61, 57, 232, 131, 61, 254, 136, 160, 189, 230, 207, 9, 61, 2, 100, 206, 189, 137, 21, 45, 190, 39, 10, 194, 61, 205, 195, 174, 61, 175, 8, 139, 189, 26, 254, 239, 61, 57, 222, 40, 60, 115, 123, 95, 59, 98, 110, 172, 187, 149, 89, 139, 189, 200, 44, 48, 61, 55, 5, 93, 187, 199, 101, 195, 189, 160, 215, 135, 60, 77, 38, 17, 190, 61, 85, 240, 188, 196, 51, 103, 189, 79, 43, 203, 189, 113, 138, 11, 62, 178, 185, 195, 188, 145, 194, 162, 61, 192, 67, 10, 189, 66, 15, 139, 189, 255, 2, 147, 61, 225, 208, 2, 62, 18, 47, 1, 62, 253, 218, 19, 190, 122, 17, 7, 190, 229, 6, 208, 189, 202, 18, 110, 189, 16, 2, 48, 188, 146, 64, 158, 189, 158, 122, 99, 61, 138, 122, 32, 190, 155, 236, 135, 60, 104, 37, 145, 61, 42, 234, 40, 190, 250, 45, 0, 189, 37, 54, 9, 62, 221, 235, 55, 61, 41, 201, 76, 60, 202, 93, 137, 61, 75, 232, 5, 61, 193, 89, 29, 190, 103, 216, 179, 189, 24, 72, 52, 190, 225, 187, 250, 61, 16, 182, 18, 62, 76, 127, 91, 62, 52, 134, 16, 59, 108, 74, 5, 61, 39, 66, 64, 190, 249, 28, 181, 190, 207, 49, 23, 190, 236, 209, 31, 62, 249, 62, 34, 191, 253, 62, 218, 61, 180, 103, 111, 62, 107, 63, 211, 61, 29, 31, 20, 190, 87, 160, 196, 189, 26, 156, 130, 62, 192, 7, 149, 62, 20, 254, 217, 61, 138, 7, 140, 62, 233, 166, 54, 190, 82, 200, 58, 62, 230, 74, 80, 62, 235, 95, 66, 62, 208, 249, 230, 190, 127, 239, 1, 190, 26, 247, 83, 190, 219, 171, 30, 62, 10, 81, 51, 189, 57, 175, 182, 61, 218, 150, 104, 188, 30, 240, 181, 61, 79, 250, 169, 62, 225, 133, 133, 190, 78, 63, 131, 190, 31, 213, 130, 190, 239, 249, 79, 62, 67, 184, 127, 191, 132, 13, 98, 191, 163, 56, 205, 62, 72, 236, 69, 62, 145, 151, 45, 191, 234, 113, 132, 59, 223, 34, 180, 190, 229, 174, 27, 190, 70, 66, 64, 190, 161, 110, 181, 62, 111, 216, 236, 62, 49, 237, 81, 189, 125, 197, 236, 190, 81, 0, 242, 190, 255, 189, 75, 190, 72, 49, 241, 189, 74, 223, 45, 61, 102, 175, 132, 189, 84, 152, 64, 61, 154, 76, 188, 62, 59, 105, 216, 61, 32, 170, 74, 62, 48, 205, 70, 61, 182, 214, 174, 62, 199, 95, 127, 62, 219, 145, 184, 62, 233, 89, 28, 189, 40, 111, 153, 190, 20, 27, 229, 189, 162, 111, 163, 191, 251, 177, 33, 62, 5, 81, 104, 62, 171, 98, 156, 61, 122, 136, 172, 191, 100, 131, 201, 187, 215, 87, 132, 62, 49, 153, 132, 189, 252, 13, 39, 190, 86, 78, 162, 189, 174, 63, 65, 189, 65, 23, 242, 189, 185, 28, 32, 62, 158, 29, 176, 62, 185, 168, 155, 61, 33, 168, 5, 62, 180, 140, 217, 60, 101, 137, 71, 62, 196, 103, 229, 61, 199, 181, 99, 190, 12, 67, 8, 191, 230, 64, 183, 190, 12, 200, 97, 191, 12, 193, 227, 61, 83, 133, 1, 191, 57, 248, 60, 61, 217, 80, 96, 62, 13, 69, 23, 190, 8, 164, 165, 190, 177, 155, 72, 61, 131, 100, 14, 190, 168, 195, 228, 189, 217, 201, 11, 60, 60, 9, 158, 60, 5, 6, 213, 61, 222, 171, 209, 189, 120, 173, 127, 61, 89, 93, 217, 61, 13, 2, 172, 189, 30, 115, 10, 62, 204, 83, 146, 61, 94, 237, 48, 190, 96, 217, 164, 61, 91, 53, 2, 190, 10, 58, 33, 190, 238, 75, 24, 190, 101, 79, 143, 189, 167, 110, 66, 189, 154, 155, 49, 62, 142, 75, 79, 185, 201, 79, 62, 190, 98, 60, 59, 190, 99, 99, 247, 61, 253, 147, 164, 189, 212, 75, 147, 61, 118, 82, 247, 61, 32, 69, 212, 61, 40, 34, 23, 189, 10, 126, 133, 189, 53, 214, 52, 190, 248, 119, 70, 61, 13, 96, 22, 189, 85, 113, 20, 62, 203, 187, 42, 190, 91, 90, 132, 190, 116, 20, 192, 190, 162, 104, 32, 62, 248, 97, 36, 191, 12, 140, 87, 191, 235, 31, 49, 189, 92, 123, 22, 62, 197, 49, 91, 190, 134, 249, 234, 59, 132, 143, 155, 190, 77, 21, 50, 190, 115, 239, 188, 189, 65, 159, 176, 62, 236, 69, 167, 62, 189, 118, 118, 61, 39, 53, 169, 190, 230, 254, 186, 189, 95, 50, 130, 59, 70, 65, 70, 61, 164, 77, 12, 61, 124, 134, 170, 61, 153, 149, 5, 62, 160, 182, 33, 62, 49, 174, 15, 190, 126, 86, 176, 188, 32, 57, 160, 61, 9, 201, 80, 62, 149, 30, 19, 62, 187, 64, 39, 61, 217, 34, 35, 190, 212, 115, 131, 190, 246, 7, 70, 189, 123, 179, 154, 61, 188, 110, 180, 62, 66, 110, 65, 62, 156, 34, 87, 62, 70, 30, 122, 186, 71, 11, 216, 190, 55, 19, 100, 62, 226, 247, 15, 61, 102, 4, 239, 190, 33, 83, 179, 189, 155, 38, 6, 62, 205, 104, 129, 62, 201, 146, 137, 187, 37, 252, 231, 61, 93, 11, 49, 61, 73, 57, 182, 61, 55, 85, 129, 187, 171, 3, 117, 62, 113, 64, 245, 189, 72, 196, 107, 62, 137, 12, 183, 61, 56, 21, 156, 62, 123, 128, 15, 190, 206, 168, 162, 188, 86, 110, 88, 190, 175, 114, 26, 62, 6, 216, 226, 189, 1, 21, 88, 189, 162, 44, 56, 189, 108, 209, 221, 61, 100, 148, 151, 62, 212, 53, 130, 60, 232, 252, 114, 61, 164, 135, 19, 62, 127, 70, 8, 190, 40, 147, 108, 189, 141, 255, 243, 61, 188, 179, 206, 57, 0, 210, 10, 190, 182, 36, 182, 189, 126, 150, 101, 61, 208, 91, 66, 190, 8, 230, 59, 61, 237, 183, 194, 61, 197, 241, 24, 190, 125, 227, 135, 189, 7, 193, 0, 190, 25, 227, 4, 62, 0, 73, 74, 190, 234, 214, 164, 186, 65, 66, 67, 190, 120, 96, 115, 61, 220, 127, 64, 190, 135, 241, 157, 189, 212, 136, 252, 61, 109, 148, 211, 189, 241, 211, 69, 189, 148, 134, 3, 190, 225, 115, 202, 189, 98, 219, 55, 190, 78, 247, 30, 61, 152, 6, 16, 190, 63, 8, 106, 60, 241, 223, 135, 189, 7, 224, 80, 190, 118, 241, 13, 190, 154, 53, 143, 61, 103, 204, 54, 190, 137, 208, 209, 188, 126, 136, 241, 61, 159, 60, 226, 189, 196, 221, 3, 190, 197, 3, 27, 190, 242, 73, 24, 62, 237, 81, 5, 61, 87, 219, 137, 189, 114, 196, 224, 188, 7, 88, 220, 188, 111, 239, 236, 189, 140, 206, 194, 189, 56, 236, 221, 61, 173, 114, 17, 190, 177, 41, 130, 61, 241, 107, 242, 61, 150, 132, 218, 61, 167, 8, 221, 189, 223, 141, 48, 190, 225, 192, 59, 190, 27, 237, 187, 61, 156, 6, 110, 187, 196, 236, 9, 189, 186, 87, 186, 189, 228, 62, 0, 61, 142, 77, 22, 189, 27, 102, 200, 60, 34, 220, 55, 188, 221, 201, 167, 62, 198, 160, 230, 61, 101, 57, 131, 188, 35, 101, 111, 62, 106, 128, 190, 62, 238, 57, 67, 61, 243, 54, 75, 61, 195, 100, 234, 189, 227, 185, 92, 191, 104, 252, 8, 62, 89, 159, 52, 61, 180, 40, 64, 62, 48, 174, 53, 190, 221, 146, 76, 190, 77, 38, 210, 61, 189, 177, 194, 62, 112, 35, 3, 62, 49, 60, 180, 188, 71, 152, 79, 62, 93, 134, 248, 61, 21, 134, 204, 61, 178, 167, 144, 62, 220, 140, 105, 190, 30, 190, 127, 59, 206, 210, 218, 189, 162, 119, 33, 189, 242, 54, 124, 190, 241, 110, 38, 62, 75, 136, 67, 190, 186, 45, 164, 61, 1, 157, 4, 190, 56, 26, 223, 186, 204, 160, 23, 188, 121, 86, 188, 60, 22, 45, 8, 189, 123, 123, 225, 189, 117, 42, 139, 61, 147, 119, 190, 61, 150, 106, 1, 188, 15, 214, 27, 61, 9, 114, 15, 190, 187, 18, 163, 189, 6, 62, 6, 61, 91, 12, 50, 189, 177, 88, 14, 190, 89, 164, 176, 189, 14, 25, 13, 190, 51, 136, 29, 190, 11, 55, 47, 190, 67, 251, 190, 60, 130, 20, 252, 60, 71, 91, 160, 189, 241, 203, 9, 190, 28, 120, 232, 61, 143, 121, 249, 189, 171, 54, 209, 189, 146, 206, 184, 189, 173, 42, 117, 189, 126, 181, 1, 190, 20, 216, 7, 62, 50, 241, 52, 190, 207, 203, 175, 188, 32, 170, 89, 189, 71, 141, 73, 61, 79, 105, 33, 62, 39, 113, 59, 190, 153, 144, 66, 62, 171, 114, 146, 190, 185, 3, 7, 62, 194, 33, 174, 62, 80, 243, 209, 189, 122, 158, 114, 190, 245, 133, 94, 62, 232, 113, 145, 60, 93, 246, 27, 190, 49, 220, 177, 61, 127, 155, 175, 62, 73, 44, 28, 189, 126, 196, 157, 188, 158, 76, 154, 60, 217, 36, 55, 190, 158, 95, 218, 189, 49, 116, 69, 62, 143, 181, 9, 190, 41, 25, 222, 188, 44, 2, 64, 61, 41, 30, 1, 63, 18, 158, 203, 61, 22, 209, 8, 61, 140, 44, 25, 189, 15, 122, 123, 62, 47, 28, 193, 189, 56, 226, 146, 62, 111, 211, 173, 60, 88, 234, 145, 190, 140, 4, 218, 61, 60, 193, 13, 62, 193, 124, 160, 60, 172, 180, 24, 62, 7, 234, 11, 60, 46, 128, 126, 190, 151, 2, 202, 190, 170, 0, 249, 61, 194, 73, 139, 61, 27, 136, 97, 190, 34, 166, 205, 61, 50, 242, 36, 62, 21, 91, 134, 189, 37, 244, 37, 61, 13, 70, 191, 60, 164, 209, 71, 62, 239, 252, 134, 186, 10, 123, 44, 62, 81, 157, 11, 190, 103, 241, 11, 190, 147, 174, 251, 61, 212, 172, 109, 62, 211, 189, 221, 61, 181, 171, 101, 190, 24, 220, 192, 61, 66, 254, 185, 190, 164, 212, 137, 61, 196, 229, 111, 189, 211, 190, 58, 190, 82, 245, 92, 59, 222, 89, 23, 61, 3, 212, 1, 62, 164, 118, 182, 190, 92, 184, 181, 62, 228, 109, 243, 190, 45, 59, 133, 188, 171, 63, 160, 191, 168, 6, 68, 191, 159, 29, 50, 63, 237, 38, 175, 61, 7, 209, 111, 191, 213, 156, 22, 62, 169, 32, 88, 190, 128, 46, 159, 190, 97, 102, 136, 191, 2, 188, 206, 61, 211, 239, 200, 61, 108, 227, 177, 60, 209, 43, 158, 190, 100, 113, 33, 190, 55, 194, 184, 59, 90, 226, 37, 62, 25, 192, 229, 61, 93, 76, 98, 62, 23, 65, 127, 62, 89, 192, 33, 62, 34, 125, 146, 190, 232, 136, 100, 62, 181, 179, 53, 191, 217, 113, 48, 62, 160, 56, 151, 61, 200, 102, 178, 61, 216, 19, 184, 190, 110, 156, 41, 191, 176, 192, 62, 62, 151, 164, 171, 191, 18, 173, 51, 188, 233, 214, 154, 61, 74, 99, 226, 189, 107, 187, 57, 191, 127, 62, 239, 61, 92, 6, 214, 62, 66, 60, 130, 189, 124, 232, 194, 62, 238, 34, 148, 61, 245, 4, 18, 191, 3, 161, 206, 61, 173, 148, 127, 62, 2, 14, 247, 62, 21, 153, 153, 188, 97, 0, 80, 61, 125, 225, 11, 191, 118, 87, 87, 62, 250, 94, 87, 190, 66, 46, 84, 190, 147, 35, 25, 191, 146, 26, 129, 190, 63, 151, 180, 62, 183, 205, 248, 188, 197, 239, 148, 61, 63, 52, 129, 61, 131, 251, 190, 62, 203, 199, 20, 62, 198, 154, 188, 60, 126, 151, 186, 61, 122, 102, 109, 190, 171, 145, 33, 62, 255, 168, 173, 190, 173, 143, 143, 189, 29, 99, 55, 190, 147, 25, 58, 190, 190, 30, 199, 62, 74, 188, 129, 190, 56, 6, 208, 60, 184, 34, 78, 190, 226, 45, 3, 63, 82, 95, 205, 189, 109, 74, 171, 190, 31, 220, 39, 190, 71, 205, 214, 62, 190, 77, 25, 62, 211, 46, 0, 191, 113, 219, 54, 191, 52, 119, 203, 190, 255, 217, 50, 62, 37, 146, 45, 191, 127, 161, 150, 190, 37, 170, 58, 189, 35, 87, 178, 190, 121, 134, 9, 62, 99, 166, 205, 62, 157, 200, 228, 61, 211, 27, 204, 188, 130, 53, 121, 62, 15, 2, 159, 62, 63, 32, 27, 62, 241, 120, 11, 62, 233, 99, 204, 62, 67, 79, 176, 62, 151, 180, 10, 191, 46, 25, 102, 62, 130, 18, 240, 61, 28, 3, 106, 62, 3, 136, 33, 63, 104, 54, 191, 61, 80, 198, 183, 189, 185, 121, 198, 61, 236, 240, 118, 62, 4, 254, 132, 62, 65, 126, 197, 61, 164, 49, 139, 62, 16, 143, 9, 62, 232, 162, 34, 189, 198, 117, 226, 190, 147, 225, 100, 62, 104, 174, 90, 188, 182, 99, 133, 60, 46, 45, 141, 190, 107, 228, 136, 190, 213, 20, 123, 191, 36, 229, 83, 191, 176, 4, 251, 62, 58, 236, 237, 61, 219, 144, 161, 191, 182, 243, 131, 61, 112, 144, 10, 59, 187, 27, 83, 190, 121, 88, 130, 62, 76, 69, 109, 62, 218, 65, 50, 189, 212, 142, 30, 62, 151, 176, 255, 62, 61, 230, 234, 189, 204, 137, 136, 62, 180, 85, 23, 189, 199, 50, 105, 191, 59, 89, 222, 61, 113, 124, 170, 188, 249, 186, 167, 61, 192, 200, 75, 191, 34, 174, 253, 61, 121, 141, 139, 62, 29, 93, 40, 189, 245, 5, 141, 190, 25, 119, 27, 61, 36, 122, 118, 62, 219, 15, 245, 62, 201, 25, 248, 61, 63, 242, 13, 62, 88, 216, 95, 62, 245, 199, 82, 62, 130, 233, 114, 62, 174, 39, 241, 61, 214, 85, 154, 191, 149, 149, 193, 189, 237, 164, 7, 191, 81, 231, 118, 190, 180, 43, 215, 189, 136, 20, 1, 190, 247, 147, 243, 190, 61, 170, 43, 62, 132, 135, 99, 61, 173, 169, 176, 62, 217, 101, 234, 189, 89, 250, 47, 61, 213, 58, 23, 191, 231, 114, 39, 62, 97, 19, 158, 62, 54, 64, 117, 190, 185, 93, 185, 189, 182, 216, 26, 62, 207, 103, 43, 62, 237, 224, 30, 62, 217, 209, 143, 61, 205, 67, 237, 190, 104, 79, 222, 189, 44, 143, 167, 60, 32, 226, 121, 191, 207, 138, 154, 62, 113, 67, 144, 60, 129, 159, 58, 62, 150, 173, 14, 189, 58, 78, 16, 190, 221, 250, 55, 61, 43, 243, 66, 190, 39, 18, 114, 187, 184, 57, 57, 190, 165, 61, 154, 189, 223, 188, 153, 189, 234, 81, 53, 189, 37, 173, 188, 188, 104, 76, 68, 62, 157, 207, 49, 190, 215, 36, 134, 190, 164, 105, 25, 190, 145, 173, 2, 189, 220, 58, 38, 62, 50, 212, 88, 188, 129, 128, 102, 62, 246, 39, 165, 62, 55, 235, 200, 190, 129, 164, 94, 189, 63, 180, 72, 62, 202, 251, 11, 191, 129, 86, 181, 61, 83, 113, 51, 62, 135, 77, 157, 61, 102, 2, 83, 190, 58, 203, 183, 190, 252, 127, 87, 62, 30, 136, 34, 62, 88, 152, 227, 61, 87, 76, 25, 62, 238, 207, 95, 190, 74, 104, 15, 59, 97, 224, 232, 59, 253, 205, 17, 189, 189, 228, 234, 190, 100, 48, 61, 61, 138, 94, 27, 62, 190, 100, 152, 189, 6, 111, 174, 189, 98, 188, 164, 61, 184, 157, 80, 190, 148, 131, 144, 61, 21, 120, 180, 62, 57, 109, 115, 190, 35, 143, 169, 62, 134, 153, 215, 62, 9, 115, 155, 62, 206, 217, 194, 61, 7, 11, 168, 190, 152, 217, 175, 189, 74, 124, 123, 189, 5, 142, 143, 62, 74, 85, 47, 190, 98, 75, 29, 61, 38, 99, 166, 62, 254, 205, 167, 62, 131, 119, 14, 189, 221, 229, 204, 190, 71, 60, 26, 189, 196, 56, 182, 62, 218, 144, 7, 62, 185, 252, 117, 62, 117, 242, 243, 61, 216, 209, 120, 189, 225, 109, 203, 61, 217, 69, 164, 62, 223, 219, 118, 191, 161, 176, 242, 187, 51, 181, 33, 188, 149, 169, 119, 62, 119, 101, 148, 190, 104, 86, 148, 189, 233, 49, 18, 191, 130, 10, 207, 188, 223, 73, 7, 62, 61, 169, 248, 188, 243, 198, 101, 189, 60, 113, 8, 62, 89, 242, 235, 61, 144, 123, 190, 61, 8, 19, 124, 191, 114, 183, 131, 62, 163, 47, 9, 60, 98, 215, 174, 188, 199, 208, 23, 191, 100, 226, 50, 190, 60, 187, 179, 189, 202, 233, 145, 189, 114, 182, 108, 189, 43, 79, 43, 62, 220, 149, 114, 189, 63, 208, 81, 62, 92, 100, 126, 61, 237, 172, 29, 62, 212, 239, 118, 62, 219, 202, 7, 188, 43, 156, 27, 60, 221, 25, 161, 188, 21, 18, 160, 190, 166, 208, 7, 190, 133, 81, 119, 190, 162, 121, 34, 59, 234, 20, 203, 61, 130, 183, 64, 189, 27, 221, 99, 190, 253, 133, 17, 190, 175, 159, 33, 191, 250, 245, 32, 190, 244, 255, 109, 190, 208, 107, 43, 190, 92, 38, 35, 60, 207, 184, 21, 191, 131, 14, 119, 191, 98, 43, 149, 61, 18, 228, 26, 61, 94, 118, 216, 190, 49, 135, 165, 189, 157, 205, 153, 190, 39, 145, 168, 61, 152, 148, 139, 190, 236, 92, 137, 62, 4, 0, 127, 62, 55, 38, 16, 60, 98, 248, 0, 190, 148, 139, 113, 61, 227, 31, 236, 189, 29, 140, 221, 189, 252, 112, 176, 61, 78, 146, 223, 61, 225, 214, 58, 62, 156, 1, 115, 61, 231, 1, 84, 189, 140, 62, 155, 61, 35, 181, 33, 61, 106, 164, 149, 62, 77, 63, 0, 187, 83, 110, 209, 60, 145, 68, 69, 61, 110, 73, 151, 190, 55, 33, 157, 61, 143, 121, 144, 62, 120, 239, 28, 62, 91, 9, 84, 62, 66, 0, 167, 189, 176, 238, 225, 190, 129, 116, 155, 190, 209, 108, 14, 190, 205, 147, 181, 61, 182, 41, 203, 190, 129, 9, 229, 61, 200, 246, 170, 189, 66, 179, 7, 61, 96, 29, 140, 61, 174, 176, 152, 190, 40, 135, 17, 190, 222, 248, 16, 59, 74, 95, 29, 62, 87, 188, 53, 188, 12, 133, 53, 190, 94, 229, 27, 62, 34, 4, 125, 62, 53, 88, 136, 62, 106, 59, 3, 191, 121, 210, 93, 62, 133, 171, 54, 189, 98, 78, 136, 189, 218, 117, 96, 186, 215, 110, 181, 190, 129, 105, 81, 190, 179, 189, 13, 62, 1, 152, 116, 60, 167, 241, 186, 189, 24, 171, 209, 60, 9, 118, 55, 191, 212, 66, 165, 60, 13, 237, 88, 191, 177, 238, 124, 59, 93, 165, 177, 190, 168, 190, 136, 62, 91, 50, 156, 190, 212, 95, 100, 189, 241, 64, 17, 189, 174, 195, 150, 61, 110, 117, 72, 190, 93, 140, 197, 62, 175, 126, 109, 62, 160, 21, 8, 62, 8, 39, 183, 61, 60, 124, 210, 60, 16, 16, 76, 190, 143, 6, 23, 62, 147, 172, 10, 62, 213, 37, 132, 60, 82, 5, 10, 62, 76, 165, 32, 62, 112, 238, 136, 189, 107, 74, 11, 190, 231, 183, 130, 62, 133, 175, 180, 62, 135, 236, 202, 61, 136, 233, 77, 62, 50, 109, 116, 190, 242, 117, 109, 190, 245, 207, 168, 190, 199, 99, 227, 61, 217, 53, 75, 191, 144, 22, 18, 190, 114, 142, 81, 191, 93, 217, 19, 191, 189, 195, 77, 63, 130, 245, 74, 62, 150, 47, 75, 191, 69, 171, 59, 190, 31, 180, 20, 61, 67, 186, 239, 188, 96, 252, 98, 191, 82, 175, 88, 190, 57, 157, 28, 62, 182, 70, 98, 61, 12, 23, 152, 189, 36, 247, 136, 190, 14, 8, 73, 190, 16, 65, 240, 62, 100, 47, 138, 62, 15, 192, 90, 62, 207, 194, 16, 61, 35, 159, 71, 62, 78, 187, 167, 190, 34, 42, 31, 62, 169, 107, 102, 191, 220, 42, 50, 189, 37, 197, 130, 62, 4, 107, 188, 60, 93, 135, 97, 190, 165, 228, 191, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 146, 115, 61, 177, 254, 47, 62, 132, 97, 93, 190, 80, 159, 141, 189, 226, 224, 18, 189, 120, 227, 43, 190, 105, 157, 171, 188, 63, 200, 248, 61, 216, 149, 51, 62, 149, 28, 216, 61, 200, 123, 74, 190, 86, 189, 56, 62, 126, 232, 143, 62, 233, 196, 231, 61, 250, 12, 21, 189, 32, 10, 62, 62, 223, 115, 3, 189, 226, 243, 73, 60, 208, 216, 146, 61, 94, 56, 103, 62, 32, 248, 187, 61, 56, 51, 144, 190, 192, 144, 151, 190, 186, 252, 63, 62, 47, 116, 158, 190, 231, 99, 33, 62, 125, 212, 198, 59, 134, 132, 130, 62, 171, 92, 197, 61, 133, 0, 165, 61, 23, 183, 238, 61, 193, 113, 199, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 127, 250, 190, 19, 17, 225, 62, 85, 44, 219, 190, 188, 136, 244, 189, 245, 223, 17, 62, 56, 147, 31, 61, 236, 47, 6, 189, 210, 96, 131, 62, 117, 235, 55, 191, 133, 34, 79, 190, 91, 66, 243, 61, 252, 222, 153, 190, 5, 210, 146, 62, 86, 130, 206, 189, 190, 133, 37, 189, 86, 116, 156, 62, 158, 81, 112, 189, 106, 184, 132, 190, 16, 236, 212, 60, 254, 251, 29, 191, 236, 95, 18, 191, 232, 223, 54, 63, 226, 81, 210, 190, 65, 141, 37, 63, 24, 27, 13, 63, 58, 146, 164, 62, 189, 147, 180, 62, 175, 76, 83, 61, 92, 72, 104, 190, 69, 19, 72, 62, 26, 206, 192, 190, 234, 247, 91, 191, 193, 231, 59, 190, 178, 49, 84, 190, 167, 146, 11, 62, 110, 142, 5, 60, 113, 89, 185, 190, 212, 102, 143, 61, 163, 44, 231, 61, 112, 91, 229, 188, 190, 228, 102, 62, 181, 236, 204, 190, 19, 199, 25, 190, 20, 232, 177, 188, 110, 221, 122, 190, 228, 154, 109, 60, 192, 153, 2, 62, 27, 67, 144, 62, 90, 121, 75, 61, 87, 208, 41, 61, 214, 168, 47, 190, 117, 30, 163, 61, 54, 158, 203, 61, 67, 128, 160, 61, 239, 242, 153, 60, 254, 94, 100, 190, 127, 135, 7, 61, 196, 85, 111, 62, 225, 8, 197, 61, 39, 74, 216, 190, 99, 240, 170, 190, 168, 187, 78, 190, 45, 205, 225, 189, 133, 98, 7, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 23, 115, 62, 247, 137, 33, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {31, 182, 247, 191, 188, 226, 220, 62, 10, 238, 133, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {252, 36, 183, 191, 234, 120, 177, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0023/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}