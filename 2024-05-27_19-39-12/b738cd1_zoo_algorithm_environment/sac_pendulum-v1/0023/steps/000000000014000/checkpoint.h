// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 169, 182, 190, 74, 185, 99, 191, 184, 160, 26, 191, 41, 252, 231, 190, 217, 98, 138, 191, 22, 37, 119, 190, 0, 160, 151, 189, 75, 195, 13, 191, 43, 93, 10, 62, 67, 5, 107, 62, 12, 76, 139, 190, 151, 144, 48, 62, 170, 8, 52, 191, 163, 114, 40, 63, 89, 142, 29, 63, 122, 233, 33, 63, 68, 251, 113, 191, 34, 172, 154, 190, 46, 241, 248, 190, 19, 184, 44, 191, 75, 30, 140, 62, 238, 174, 131, 62, 189, 43, 212, 62, 213, 180, 154, 189, 201, 192, 234, 190, 101, 233, 71, 63, 87, 240, 1, 63, 219, 46, 99, 63, 181, 59, 19, 63, 119, 84, 182, 62, 254, 60, 201, 61, 46, 17, 147, 191, 34, 73, 147, 190, 154, 6, 174, 62, 45, 162, 138, 191, 13, 241, 119, 190, 164, 84, 78, 62, 29, 62, 50, 191, 18, 165, 222, 61, 128, 152, 16, 63, 19, 107, 52, 63, 254, 151, 53, 63, 89, 3, 166, 62, 124, 172, 0, 63, 84, 76, 9, 190, 75, 230, 64, 191, 254, 165, 28, 59, 27, 107, 134, 61, 42, 107, 51, 63, 116, 31, 153, 191, 65, 121, 1, 190, 57, 63, 219, 62, 47, 182, 170, 191, 235, 65, 107, 190, 77, 14, 218, 62, 42, 63, 201, 62, 51, 13, 2, 191, 75, 212, 51, 191, 1, 78, 99, 191, 20, 166, 10, 62, 176, 76, 11, 191, 53, 251, 15, 190, 62, 59, 179, 189, 41, 232, 78, 191, 207, 251, 110, 190, 22, 68, 34, 188, 102, 116, 225, 190, 2, 132, 163, 190, 12, 182, 37, 190, 136, 81, 227, 190, 202, 74, 161, 191, 236, 107, 151, 190, 89, 207, 222, 60, 12, 254, 136, 63, 216, 46, 173, 62, 79, 181, 22, 191, 228, 117, 40, 63, 40, 115, 1, 190, 162, 181, 247, 61, 140, 245, 79, 63, 152, 212, 237, 62, 40, 164, 81, 63, 209, 211, 80, 63, 165, 56, 25, 63, 118, 66, 57, 190, 15, 129, 0, 63, 34, 174, 231, 190, 138, 246, 51, 191, 152, 163, 139, 191, 227, 2, 171, 190, 129, 121, 240, 190, 228, 239, 33, 191, 161, 59, 10, 63, 15, 216, 15, 191, 200, 182, 90, 63, 63, 42, 112, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 177, 145, 190, 87, 11, 21, 63, 161, 128, 220, 190, 102, 125, 13, 63, 5, 44, 229, 190, 20, 98, 8, 191, 184, 77, 0, 191, 252, 138, 53, 63, 227, 150, 234, 190, 112, 175, 100, 191, 243, 114, 230, 61, 100, 227, 120, 61, 82, 132, 18, 188, 50, 179, 12, 190, 201, 232, 161, 62, 48, 58, 3, 63, 68, 174, 244, 189, 233, 148, 55, 61, 113, 0, 9, 189, 87, 66, 148, 188, 244, 212, 21, 63, 212, 206, 21, 63, 32, 101, 44, 63, 145, 116, 166, 61, 35, 211, 22, 61, 125, 57, 22, 63, 178, 160, 51, 189, 195, 232, 205, 61, 221, 71, 69, 190, 174, 180, 155, 62, 207, 44, 155, 190, 210, 207, 149, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 28, 77, 189, 105, 140, 99, 188, 200, 93, 67, 191, 169, 185, 227, 189, 199, 204, 0, 192, 252, 152, 46, 191, 46, 139, 47, 191, 61, 109, 116, 62, 109, 186, 150, 190, 91, 126, 63, 190, 22, 42, 87, 190, 119, 107, 118, 190, 249, 9, 55, 191, 149, 90, 7, 191, 119, 107, 184, 61, 243, 233, 165, 61, 108, 107, 128, 61, 43, 205, 40, 190, 140, 15, 35, 189, 93, 123, 133, 190, 193, 146, 7, 62, 100, 135, 70, 188, 51, 62, 98, 189, 89, 74, 30, 190, 23, 244, 235, 190, 136, 107, 13, 62, 243, 163, 63, 191, 12, 171, 87, 190, 72, 189, 145, 61, 239, 22, 65, 62, 211, 141, 28, 191, 72, 45, 4, 189, 38, 66, 69, 190, 235, 120, 195, 62, 234, 76, 162, 62, 163, 60, 114, 62, 231, 17, 71, 61, 31, 226, 32, 191, 224, 164, 67, 190, 54, 96, 18, 62, 10, 68, 191, 189, 98, 78, 9, 191, 184, 63, 105, 189, 61, 10, 125, 62, 160, 183, 97, 62, 182, 200, 172, 60, 57, 102, 138, 190, 1, 252, 50, 189, 154, 9, 151, 62, 103, 217, 158, 62, 132, 97, 99, 62, 94, 223, 147, 60, 62, 212, 9, 61, 128, 92, 0, 62, 24, 194, 74, 62, 92, 13, 172, 191, 228, 75, 199, 60, 245, 69, 172, 189, 96, 78, 189, 189, 171, 175, 242, 188, 122, 196, 153, 190, 156, 32, 8, 191, 118, 89, 28, 61, 137, 241, 50, 62, 103, 34, 223, 190, 120, 72, 205, 189, 207, 134, 55, 62, 118, 41, 175, 188, 23, 239, 167, 62, 57, 150, 166, 62, 223, 209, 172, 62, 60, 170, 5, 62, 211, 100, 141, 62, 4, 11, 88, 62, 120, 92, 7, 62, 242, 246, 120, 62, 46, 241, 30, 62, 163, 152, 95, 189, 162, 180, 0, 63, 222, 165, 56, 62, 204, 120, 95, 190, 111, 86, 144, 61, 16, 58, 62, 190, 225, 156, 143, 62, 146, 60, 181, 189, 189, 146, 1, 191, 65, 1, 226, 188, 92, 209, 250, 62, 74, 38, 143, 60, 252, 158, 42, 62, 119, 130, 3, 62, 164, 164, 119, 190, 48, 8, 59, 191, 110, 106, 30, 189, 89, 225, 62, 62, 221, 126, 230, 188, 167, 204, 171, 61, 104, 154, 34, 62, 131, 16, 176, 61, 107, 234, 94, 189, 153, 72, 42, 190, 216, 130, 149, 189, 245, 162, 214, 61, 199, 49, 133, 61, 15, 25, 249, 189, 101, 6, 141, 61, 125, 241, 226, 59, 148, 159, 148, 189, 40, 239, 13, 190, 41, 38, 53, 60, 105, 143, 252, 189, 228, 203, 138, 189, 183, 70, 145, 61, 247, 53, 47, 190, 42, 216, 21, 62, 178, 249, 75, 61, 73, 137, 20, 190, 164, 111, 175, 61, 61, 49, 66, 190, 11, 193, 63, 190, 130, 216, 131, 60, 222, 183, 14, 189, 120, 91, 62, 61, 96, 22, 32, 190, 60, 245, 126, 189, 152, 178, 161, 189, 154, 58, 10, 62, 66, 15, 29, 190, 234, 101, 2, 62, 178, 146, 119, 187, 173, 201, 72, 190, 145, 18, 147, 61, 89, 128, 142, 191, 7, 234, 194, 190, 2, 166, 7, 190, 169, 41, 164, 62, 175, 111, 116, 191, 86, 248, 237, 190, 97, 123, 55, 62, 210, 82, 197, 61, 5, 12, 105, 190, 0, 132, 42, 59, 168, 150, 163, 62, 230, 34, 194, 58, 112, 116, 105, 62, 142, 101, 86, 60, 197, 19, 95, 62, 57, 80, 25, 62, 67, 129, 205, 189, 183, 1, 76, 62, 0, 136, 37, 62, 156, 241, 0, 62, 53, 76, 226, 190, 156, 97, 11, 190, 248, 237, 69, 191, 149, 252, 210, 61, 252, 11, 7, 190, 178, 47, 12, 62, 238, 28, 23, 191, 124, 183, 174, 190, 19, 43, 173, 60, 42, 204, 68, 189, 92, 108, 173, 189, 240, 143, 238, 189, 53, 248, 137, 61, 206, 198, 33, 190, 149, 242, 151, 61, 169, 47, 78, 190, 188, 190, 53, 190, 254, 244, 8, 190, 107, 132, 156, 189, 235, 233, 114, 189, 38, 79, 14, 189, 253, 205, 194, 60, 129, 65, 62, 61, 57, 232, 131, 61, 254, 136, 160, 189, 230, 207, 9, 61, 2, 100, 206, 189, 137, 21, 45, 190, 39, 10, 194, 61, 205, 195, 174, 61, 175, 8, 139, 189, 26, 254, 239, 61, 57, 222, 40, 60, 115, 123, 95, 59, 98, 110, 172, 187, 149, 89, 139, 189, 200, 44, 48, 61, 55, 5, 93, 187, 199, 101, 195, 189, 160, 215, 135, 60, 77, 38, 17, 190, 61, 85, 240, 188, 196, 51, 103, 189, 79, 43, 203, 189, 113, 138, 11, 62, 178, 185, 195, 188, 145, 194, 162, 61, 192, 67, 10, 189, 66, 15, 139, 189, 255, 2, 147, 61, 225, 208, 2, 62, 18, 47, 1, 62, 253, 218, 19, 190, 122, 17, 7, 190, 229, 6, 208, 189, 202, 18, 110, 189, 16, 2, 48, 188, 146, 64, 158, 189, 158, 122, 99, 61, 138, 122, 32, 190, 155, 236, 135, 60, 104, 37, 145, 61, 42, 234, 40, 190, 250, 45, 0, 189, 37, 54, 9, 62, 221, 235, 55, 61, 41, 201, 76, 60, 202, 93, 137, 61, 75, 232, 5, 61, 193, 89, 29, 190, 103, 216, 179, 189, 24, 72, 52, 190, 66, 149, 235, 61, 195, 121, 29, 62, 205, 93, 78, 62, 21, 12, 165, 59, 254, 133, 59, 60, 4, 221, 42, 190, 212, 1, 183, 190, 14, 192, 10, 190, 41, 51, 0, 62, 131, 8, 63, 191, 242, 59, 203, 61, 138, 18, 107, 62, 38, 132, 217, 61, 28, 65, 27, 190, 121, 237, 148, 189, 250, 111, 133, 62, 101, 135, 150, 62, 107, 13, 228, 61, 20, 2, 146, 62, 112, 0, 65, 190, 17, 240, 57, 62, 91, 205, 76, 62, 135, 70, 69, 62, 129, 6, 243, 190, 242, 33, 7, 190, 239, 181, 34, 190, 6, 200, 15, 62, 121, 21, 55, 189, 60, 130, 18, 62, 141, 169, 235, 188, 94, 73, 161, 61, 86, 255, 172, 62, 103, 59, 131, 190, 142, 243, 134, 190, 135, 200, 124, 190, 213, 114, 88, 62, 42, 122, 133, 191, 64, 41, 114, 191, 133, 88, 184, 62, 223, 55, 64, 62, 23, 11, 51, 191, 114, 47, 122, 61, 230, 239, 192, 190, 91, 43, 44, 190, 0, 6, 42, 190, 55, 1, 190, 62, 91, 131, 230, 62, 103, 169, 151, 189, 59, 248, 236, 190, 247, 175, 247, 190, 37, 57, 77, 190, 229, 150, 4, 190, 241, 93, 109, 61, 20, 190, 176, 189, 250, 26, 51, 61, 194, 89, 182, 62, 189, 14, 5, 62, 226, 167, 111, 62, 187, 62, 191, 61, 56, 62, 180, 62, 156, 116, 105, 62, 38, 73, 182, 62, 13, 150, 189, 188, 229, 86, 167, 190, 62, 180, 73, 190, 243, 114, 167, 191, 99, 9, 33, 62, 157, 0, 116, 62, 123, 24, 201, 61, 166, 144, 170, 191, 56, 116, 53, 188, 25, 112, 134, 62, 210, 205, 22, 189, 108, 185, 11, 190, 42, 230, 128, 189, 141, 225, 249, 188, 139, 143, 251, 189, 229, 0, 48, 62, 174, 151, 174, 62, 54, 71, 175, 61, 207, 245, 21, 62, 84, 109, 25, 61, 62, 227, 98, 62, 32, 202, 219, 61, 124, 134, 129, 190, 65, 176, 12, 191, 192, 68, 186, 190, 12, 35, 133, 191, 6, 51, 2, 62, 245, 209, 9, 191, 5, 45, 137, 61, 190, 241, 107, 62, 6, 216, 92, 190, 160, 140, 180, 190, 185, 187, 117, 61, 149, 0, 253, 189, 168, 195, 228, 189, 217, 201, 11, 60, 60, 9, 158, 60, 5, 6, 213, 61, 222, 171, 209, 189, 120, 173, 127, 61, 89, 93, 217, 61, 13, 2, 172, 189, 30, 115, 10, 62, 204, 83, 146, 61, 94, 237, 48, 190, 96, 217, 164, 61, 91, 53, 2, 190, 10, 58, 33, 190, 238, 75, 24, 190, 101, 79, 143, 189, 167, 110, 66, 189, 154, 155, 49, 62, 142, 75, 79, 185, 201, 79, 62, 190, 98, 60, 59, 190, 99, 99, 247, 61, 253, 147, 164, 189, 212, 75, 147, 61, 118, 82, 247, 61, 32, 69, 212, 61, 40, 34, 23, 189, 10, 126, 133, 189, 53, 214, 52, 190, 248, 119, 70, 61, 13, 96, 22, 189, 85, 113, 20, 62, 40, 105, 233, 189, 50, 196, 123, 190, 178, 181, 187, 190, 49, 166, 35, 62, 51, 56, 55, 191, 136, 197, 99, 191, 231, 131, 194, 189, 96, 163, 12, 62, 170, 186, 134, 190, 245, 231, 241, 60, 88, 206, 163, 190, 156, 51, 62, 190, 204, 27, 153, 189, 239, 102, 178, 62, 118, 53, 159, 62, 222, 105, 225, 60, 153, 97, 170, 190, 251, 78, 204, 189, 250, 235, 17, 60, 83, 16, 254, 60, 186, 142, 116, 61, 127, 175, 148, 61, 188, 183, 6, 62, 89, 185, 76, 62, 211, 59, 26, 190, 139, 166, 225, 59, 165, 212, 202, 61, 75, 115, 81, 62, 165, 7, 14, 62, 9, 199, 145, 61, 159, 190, 20, 190, 153, 151, 167, 190, 225, 58, 64, 189, 164, 32, 175, 61, 146, 244, 167, 62, 163, 94, 67, 62, 229, 128, 76, 62, 22, 161, 218, 60, 28, 228, 222, 190, 241, 129, 107, 62, 253, 14, 150, 60, 36, 186, 247, 190, 85, 168, 184, 189, 29, 134, 5, 62, 230, 101, 128, 62, 193, 60, 34, 187, 18, 10, 2, 62, 103, 233, 4, 61, 181, 126, 173, 61, 214, 28, 165, 186, 244, 50, 131, 62, 197, 109, 17, 190, 9, 231, 96, 62, 219, 27, 162, 61, 72, 205, 157, 62, 227, 237, 32, 190, 154, 86, 235, 188, 62, 192, 78, 190, 204, 212, 19, 62, 212, 106, 220, 189, 134, 237, 19, 187, 246, 108, 92, 189, 239, 109, 213, 61, 13, 176, 144, 62, 212, 53, 130, 60, 232, 252, 114, 61, 164, 135, 19, 62, 127, 70, 8, 190, 40, 147, 108, 189, 141, 255, 243, 61, 188, 179, 206, 57, 0, 210, 10, 190, 182, 36, 182, 189, 126, 150, 101, 61, 208, 91, 66, 190, 8, 230, 59, 61, 237, 183, 194, 61, 197, 241, 24, 190, 125, 227, 135, 189, 7, 193, 0, 190, 25, 227, 4, 62, 0, 73, 74, 190, 234, 214, 164, 186, 65, 66, 67, 190, 120, 96, 115, 61, 220, 127, 64, 190, 135, 241, 157, 189, 212, 136, 252, 61, 109, 148, 211, 189, 241, 211, 69, 189, 148, 134, 3, 190, 225, 115, 202, 189, 98, 219, 55, 190, 78, 247, 30, 61, 152, 6, 16, 190, 63, 8, 106, 60, 241, 223, 135, 189, 7, 224, 80, 190, 118, 241, 13, 190, 154, 53, 143, 61, 103, 204, 54, 190, 137, 208, 209, 188, 126, 136, 241, 61, 159, 60, 226, 189, 196, 221, 3, 190, 197, 3, 27, 190, 242, 73, 24, 62, 237, 81, 5, 61, 87, 219, 137, 189, 114, 196, 224, 188, 7, 88, 220, 188, 111, 239, 236, 189, 140, 206, 194, 189, 56, 236, 221, 61, 173, 114, 17, 190, 177, 41, 130, 61, 241, 107, 242, 61, 150, 132, 218, 61, 167, 8, 221, 189, 223, 141, 48, 190, 225, 192, 59, 190, 27, 237, 187, 61, 156, 6, 110, 187, 196, 236, 9, 189, 186, 87, 186, 189, 228, 62, 0, 61, 142, 77, 22, 189, 27, 102, 200, 60, 221, 71, 204, 188, 195, 217, 173, 62, 96, 132, 28, 62, 119, 248, 232, 187, 119, 3, 102, 62, 218, 232, 196, 62, 95, 199, 188, 61, 123, 175, 57, 61, 126, 129, 20, 190, 195, 42, 131, 191, 110, 4, 254, 61, 40, 189, 28, 61, 133, 73, 104, 62, 160, 177, 46, 190, 188, 121, 71, 190, 7, 147, 221, 61, 12, 99, 198, 62, 145, 85, 9, 62, 26, 15, 11, 189, 192, 117, 98, 62, 42, 192, 207, 61, 232, 49, 208, 61, 55, 212, 139, 62, 47, 168, 130, 190, 101, 52, 152, 188, 80, 42, 0, 190, 242, 154, 98, 189, 234, 128, 121, 190, 246, 103, 65, 62, 6, 40, 85, 190, 248, 199, 209, 61, 241, 206, 44, 190, 58, 4, 217, 188, 122, 185, 160, 188, 121, 86, 188, 60, 206, 107, 9, 189, 123, 123, 225, 189, 142, 201, 129, 61, 147, 119, 190, 61, 33, 217, 210, 188, 15, 214, 27, 61, 9, 114, 15, 190, 60, 31, 173, 189, 212, 26, 228, 60, 91, 12, 50, 189, 177, 88, 14, 190, 39, 156, 214, 189, 157, 115, 15, 190, 43, 165, 29, 190, 29, 107, 49, 190, 111, 86, 50, 60, 130, 20, 252, 60, 130, 34, 209, 189, 251, 142, 15, 190, 59, 119, 185, 61, 143, 121, 249, 189, 202, 2, 209, 189, 7, 106, 217, 189, 173, 42, 117, 189, 126, 171, 1, 190, 41, 69, 241, 61, 140, 236, 62, 190, 207, 203, 175, 188, 240, 101, 121, 189, 231, 145, 68, 61, 32, 18, 11, 62, 21, 31, 50, 190, 211, 123, 43, 62, 80, 201, 145, 190, 249, 40, 215, 61, 231, 12, 173, 62, 73, 163, 251, 189, 86, 221, 105, 190, 152, 111, 111, 62, 71, 65, 42, 60, 104, 120, 41, 190, 235, 21, 139, 61, 177, 74, 170, 62, 139, 221, 130, 189, 182, 58, 93, 188, 52, 170, 110, 59, 233, 62, 73, 190, 155, 52, 13, 190, 84, 134, 80, 62, 143, 63, 5, 190, 162, 37, 252, 188, 63, 186, 250, 60, 49, 20, 5, 63, 48, 161, 231, 61, 30, 25, 60, 61, 112, 128, 12, 189, 133, 67, 104, 62, 225, 143, 4, 190, 207, 224, 152, 62, 201, 131, 85, 60, 23, 161, 132, 190, 97, 50, 6, 62, 153, 11, 11, 62, 133, 157, 247, 188, 202, 165, 232, 61, 182, 92, 104, 60, 87, 182, 134, 190, 214, 5, 222, 190, 38, 146, 211, 61, 39, 234, 156, 61, 71, 2, 89, 190, 23, 184, 170, 61, 195, 220, 4, 62, 211, 122, 12, 190, 223, 57, 13, 61, 37, 102, 102, 58, 210, 153, 84, 62, 86, 94, 77, 189, 203, 85, 11, 62, 108, 73, 249, 189, 2, 209, 37, 190, 107, 206, 4, 62, 15, 121, 114, 62, 227, 178, 223, 61, 21, 73, 88, 190, 199, 21, 212, 61, 100, 75, 167, 190, 75, 229, 147, 61, 124, 182, 144, 189, 94, 142, 45, 190, 0, 156, 198, 60, 155, 255, 174, 60, 252, 243, 19, 62, 152, 3, 179, 190, 56, 52, 186, 62, 153, 98, 20, 191, 79, 232, 69, 188, 187, 190, 179, 191, 216, 82, 67, 191, 196, 212, 12, 63, 176, 188, 221, 61, 225, 56, 128, 191, 221, 117, 221, 62, 240, 109, 82, 190, 48, 225, 158, 190, 249, 209, 149, 191, 252, 140, 145, 61, 71, 246, 239, 61, 207, 5, 34, 188, 180, 245, 150, 190, 159, 221, 30, 190, 129, 22, 253, 60, 92, 190, 94, 62, 21, 220, 221, 61, 227, 11, 97, 62, 80, 122, 132, 62, 241, 251, 44, 62, 137, 195, 170, 190, 81, 139, 95, 62, 127, 105, 60, 191, 20, 117, 67, 62, 103, 23, 196, 60, 104, 250, 184, 61, 67, 201, 3, 191, 249, 9, 70, 191, 90, 135, 121, 62, 18, 188, 178, 191, 150, 4, 230, 58, 3, 124, 152, 61, 235, 237, 202, 189, 117, 148, 69, 191, 234, 254, 250, 61, 116, 190, 209, 62, 159, 235, 54, 189, 61, 39, 207, 62, 157, 135, 130, 61, 234, 212, 19, 191, 120, 242, 202, 61, 109, 132, 129, 62, 172, 97, 240, 62, 185, 161, 197, 188, 220, 207, 56, 61, 236, 14, 15, 191, 143, 250, 89, 62, 160, 74, 90, 190, 91, 129, 104, 190, 161, 128, 29, 191, 188, 92, 138, 190, 147, 50, 220, 62, 51, 153, 189, 188, 74, 196, 111, 61, 169, 166, 149, 61, 98, 60, 191, 62, 7, 160, 4, 62, 85, 79, 59, 61, 105, 126, 195, 61, 140, 239, 103, 190, 198, 219, 216, 61, 230, 77, 187, 190, 231, 216, 199, 189, 122, 105, 49, 190, 242, 246, 57, 190, 151, 243, 30, 63, 111, 96, 144, 190, 85, 134, 50, 61, 141, 33, 77, 190, 232, 78, 14, 63, 60, 76, 139, 189, 41, 128, 125, 190, 222, 43, 243, 189, 123, 12, 221, 62, 56, 189, 13, 62, 99, 130, 0, 191, 30, 142, 95, 191, 185, 229, 227, 190, 134, 165, 50, 62, 86, 179, 54, 191, 232, 156, 128, 190, 17, 231, 80, 189, 227, 105, 167, 190, 83, 116, 196, 61, 227, 185, 213, 62, 157, 129, 45, 62, 39, 248, 67, 188, 212, 45, 130, 62, 32, 242, 170, 62, 220, 145, 242, 61, 28, 195, 18, 62, 53, 35, 214, 62, 133, 205, 213, 62, 135, 189, 34, 191, 148, 196, 123, 62, 192, 121, 253, 61, 89, 177, 128, 62, 246, 116, 42, 63, 152, 248, 245, 61, 103, 238, 165, 189, 47, 76, 251, 61, 25, 116, 122, 62, 203, 29, 162, 62, 202, 83, 42, 62, 112, 68, 141, 62, 211, 143, 17, 62, 252, 141, 229, 188, 108, 77, 215, 190, 37, 5, 138, 62, 126, 53, 185, 60, 83, 190, 207, 61, 162, 153, 133, 190, 81, 93, 146, 190, 61, 89, 120, 191, 243, 199, 94, 191, 71, 174, 14, 63, 9, 73, 252, 61, 136, 65, 185, 191, 220, 40, 149, 61, 119, 23, 130, 59, 189, 33, 108, 189, 147, 252, 165, 62, 214, 181, 127, 62, 141, 63, 182, 188, 159, 159, 38, 62, 222, 101, 12, 63, 243, 85, 186, 189, 94, 28, 140, 62, 0, 60, 67, 189, 148, 226, 99, 191, 183, 57, 19, 62, 183, 192, 99, 188, 22, 46, 84, 61, 26, 234, 118, 191, 76, 4, 3, 62, 225, 78, 141, 62, 28, 159, 191, 188, 69, 169, 139, 190, 139, 118, 96, 61, 159, 2, 126, 62, 227, 80, 250, 62, 72, 152, 9, 62, 91, 157, 21, 62, 85, 65, 131, 62, 219, 161, 67, 62, 95, 132, 130, 62, 6, 43, 3, 62, 67, 30, 160, 191, 228, 53, 4, 190, 174, 143, 21, 191, 2, 232, 132, 190, 230, 110, 208, 189, 167, 116, 140, 189, 170, 83, 246, 190, 246, 217, 56, 62, 8, 86, 5, 187, 158, 64, 183, 62, 87, 139, 4, 190, 181, 234, 57, 61, 94, 99, 5, 191, 231, 114, 39, 62, 138, 158, 186, 62, 54, 64, 117, 190, 224, 239, 6, 189, 182, 216, 26, 62, 207, 103, 43, 62, 12, 119, 34, 62, 18, 128, 163, 61, 133, 19, 228, 190, 104, 79, 222, 189, 99, 43, 0, 62, 194, 215, 131, 191, 226, 130, 129, 62, 165, 115, 230, 59, 144, 90, 130, 62, 177, 203, 106, 190, 18, 24, 41, 190, 63, 133, 219, 59, 178, 81, 77, 190, 23, 55, 101, 188, 179, 86, 96, 190, 55, 81, 144, 189, 223, 188, 153, 189, 112, 138, 90, 189, 225, 250, 219, 60, 37, 62, 66, 62, 157, 207, 49, 190, 121, 127, 252, 190, 184, 141, 121, 190, 246, 91, 134, 58, 63, 141, 218, 61, 220, 93, 216, 188, 88, 137, 72, 62, 94, 125, 190, 62, 236, 20, 227, 190, 57, 20, 141, 189, 148, 1, 42, 62, 132, 125, 31, 191, 177, 62, 249, 61, 27, 134, 68, 62, 45, 246, 13, 62, 56, 162, 98, 190, 1, 172, 200, 190, 34, 93, 89, 62, 84, 31, 56, 62, 22, 231, 21, 62, 246, 6, 159, 61, 185, 62, 123, 190, 94, 180, 198, 60, 140, 139, 14, 188, 33, 91, 99, 189, 143, 194, 11, 191, 135, 53, 100, 61, 220, 54, 85, 62, 181, 31, 186, 189, 8, 200, 208, 189, 215, 201, 197, 61, 243, 126, 140, 190, 61, 28, 44, 61, 217, 116, 200, 62, 136, 83, 92, 190, 112, 83, 206, 62, 253, 29, 210, 62, 117, 87, 158, 62, 221, 53, 159, 61, 224, 138, 158, 190, 234, 6, 184, 189, 210, 58, 73, 189, 140, 4, 132, 62, 118, 72, 72, 190, 217, 28, 73, 61, 176, 128, 168, 62, 217, 195, 172, 62, 147, 231, 9, 189, 87, 247, 196, 190, 147, 164, 242, 188, 186, 141, 183, 62, 154, 65, 18, 62, 137, 96, 108, 62, 69, 76, 0, 62, 209, 220, 13, 189, 35, 36, 253, 61, 56, 44, 176, 62, 141, 54, 116, 191, 9, 60, 41, 188, 88, 5, 70, 61, 26, 175, 110, 62, 126, 77, 145, 190, 31, 216, 166, 188, 120, 223, 6, 191, 206, 46, 6, 189, 89, 140, 0, 62, 122, 41, 53, 60, 119, 149, 5, 189, 215, 36, 26, 62, 179, 105, 10, 62, 125, 51, 215, 61, 32, 51, 99, 191, 9, 160, 142, 62, 189, 228, 42, 61, 153, 247, 131, 188, 167, 240, 21, 191, 35, 115, 31, 190, 158, 151, 133, 189, 233, 94, 90, 189, 231, 163, 53, 189, 185, 252, 90, 62, 137, 234, 134, 189, 219, 216, 109, 62, 197, 64, 170, 61, 112, 74, 131, 62, 108, 4, 131, 62, 150, 95, 32, 188, 173, 202, 191, 59, 44, 168, 130, 60, 200, 151, 221, 190, 118, 84, 39, 190, 136, 199, 100, 190, 122, 189, 16, 60, 246, 49, 221, 61, 170, 7, 154, 60, 183, 123, 95, 190, 158, 50, 246, 189, 88, 9, 48, 191, 250, 120, 15, 190, 247, 233, 117, 190, 225, 38, 29, 190, 94, 246, 160, 60, 122, 251, 30, 191, 138, 170, 119, 191, 36, 177, 29, 61, 252, 94, 30, 61, 178, 27, 228, 190, 12, 33, 3, 189, 7, 245, 157, 190, 43, 86, 171, 61, 198, 110, 129, 190, 56, 213, 139, 62, 128, 7, 124, 62, 31, 146, 105, 189, 29, 126, 238, 189, 185, 174, 122, 61, 44, 125, 167, 189, 86, 197, 30, 190, 208, 177, 149, 61, 32, 124, 80, 61, 1, 247, 61, 62, 229, 160, 128, 187, 224, 157, 194, 189, 26, 192, 159, 61, 58, 20, 84, 61, 162, 183, 150, 62, 17, 246, 200, 187, 250, 216, 170, 60, 151, 8, 148, 61, 90, 199, 206, 190, 183, 214, 5, 61, 150, 91, 147, 62, 20, 224, 1, 62, 4, 104, 89, 62, 0, 203, 184, 189, 198, 18, 235, 190, 183, 216, 163, 190, 251, 35, 0, 190, 44, 147, 153, 61, 129, 55, 208, 190, 112, 209, 186, 61, 227, 68, 194, 189, 189, 51, 171, 60, 166, 27, 149, 61, 89, 114, 143, 190, 72, 146, 24, 190, 144, 220, 117, 56, 215, 243, 24, 62, 160, 88, 235, 56, 87, 56, 68, 190, 118, 23, 13, 62, 254, 137, 118, 62, 78, 15, 139, 62, 34, 213, 17, 191, 204, 127, 89, 62, 175, 50, 242, 188, 139, 4, 142, 189, 29, 168, 42, 60, 148, 141, 174, 190, 122, 238, 128, 190, 12, 97, 7, 62, 204, 27, 59, 59, 164, 37, 178, 189, 114, 234, 25, 61, 60, 154, 60, 191, 149, 14, 136, 60, 185, 152, 103, 191, 109, 196, 227, 188, 143, 5, 238, 190, 120, 173, 131, 62, 107, 76, 164, 190, 28, 28, 153, 189, 5, 21, 28, 189, 202, 29, 144, 61, 97, 58, 76, 190, 171, 34, 195, 62, 113, 41, 90, 62, 116, 142, 2, 62, 248, 41, 192, 61, 94, 252, 217, 60, 195, 81, 93, 190, 77, 183, 58, 62, 25, 28, 18, 62, 62, 198, 70, 60, 17, 146, 7, 62, 113, 100, 55, 62, 171, 196, 132, 189, 153, 24, 12, 190, 249, 54, 141, 62, 252, 107, 178, 62, 21, 120, 26, 61, 23, 235, 88, 62, 31, 144, 143, 190, 27, 237, 132, 190, 185, 35, 173, 190, 254, 241, 235, 61, 167, 141, 88, 191, 247, 126, 2, 190, 46, 159, 115, 191, 226, 71, 29, 191, 58, 17, 46, 63, 109, 189, 94, 62, 21, 96, 85, 191, 151, 203, 35, 190, 227, 198, 18, 61, 209, 8, 203, 188, 81, 151, 114, 191, 150, 95, 128, 190, 95, 4, 36, 62, 233, 155, 230, 60, 223, 254, 25, 189, 57, 205, 130, 190, 156, 18, 76, 190, 166, 101, 10, 63, 232, 138, 133, 62, 152, 87, 89, 62, 150, 99, 32, 61, 74, 138, 76, 62, 225, 76, 228, 190, 31, 91, 7, 62, 213, 240, 117, 191, 179, 55, 81, 188, 15, 31, 66, 62, 76, 15, 149, 60, 137, 195, 178, 190, 195, 138, 249, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 48, 118, 61, 225, 4, 53, 62, 238, 99, 122, 190, 80, 159, 141, 189, 74, 146, 4, 189, 120, 227, 43, 190, 105, 157, 171, 188, 177, 110, 7, 62, 120, 214, 51, 62, 32, 150, 227, 61, 200, 123, 74, 190, 237, 118, 52, 62, 30, 227, 146, 62, 233, 196, 231, 61, 250, 12, 21, 189, 102, 232, 62, 62, 251, 23, 91, 189, 65, 57, 26, 188, 205, 220, 79, 61, 120, 211, 123, 62, 31, 166, 166, 61, 45, 162, 135, 190, 61, 208, 152, 190, 6, 236, 75, 62, 6, 3, 162, 190, 28, 138, 28, 62, 255, 196, 169, 60, 147, 159, 147, 62, 135, 45, 206, 61, 213, 117, 192, 61, 64, 62, 232, 61, 232, 26, 212, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 195, 5, 191, 192, 193, 219, 62, 198, 145, 225, 190, 188, 136, 244, 189, 105, 3, 4, 62, 56, 147, 31, 61, 236, 47, 6, 189, 230, 48, 113, 62, 185, 132, 55, 191, 99, 168, 82, 190, 91, 66, 243, 61, 244, 159, 149, 190, 216, 158, 139, 62, 86, 130, 206, 189, 190, 133, 37, 189, 249, 92, 156, 62, 43, 214, 130, 189, 144, 180, 90, 190, 142, 136, 145, 59, 34, 10, 47, 191, 63, 79, 18, 191, 103, 161, 64, 63, 76, 39, 242, 190, 214, 180, 43, 63, 99, 106, 28, 63, 86, 234, 212, 62, 209, 173, 160, 62, 32, 49, 87, 61, 236, 82, 95, 190, 161, 61, 17, 62, 111, 243, 189, 190, 31, 98, 99, 191, 174, 145, 255, 189, 168, 224, 100, 190, 110, 204, 15, 62, 110, 142, 5, 60, 63, 83, 210, 190, 212, 102, 143, 61, 163, 44, 231, 61, 148, 89, 184, 188, 93, 170, 164, 62, 173, 190, 216, 190, 19, 199, 25, 190, 214, 68, 166, 60, 86, 24, 135, 190, 228, 154, 109, 60, 192, 153, 2, 62, 211, 143, 151, 62, 158, 1, 183, 60, 60, 3, 230, 60, 166, 251, 49, 190, 251, 36, 223, 61, 148, 233, 167, 61, 245, 44, 97, 61, 55, 98, 188, 60, 8, 82, 91, 190, 174, 142, 98, 61, 164, 36, 152, 62, 65, 134, 193, 61, 152, 186, 249, 190, 76, 11, 164, 190, 186, 28, 72, 190, 56, 149, 215, 189, 19, 92, 117, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 216, 123, 62, 7, 163, 62, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {100, 115, 115, 62, 66, 43, 1, 63, 197, 45, 104, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {197, 59, 90, 191, 110, 249, 225, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0023/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}