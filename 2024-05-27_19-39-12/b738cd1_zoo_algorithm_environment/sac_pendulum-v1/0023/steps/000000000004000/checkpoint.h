// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 28, 48, 189, 189, 162, 250, 190, 133, 216, 27, 191, 84, 241, 82, 190, 82, 72, 110, 191, 69, 69, 94, 189, 75, 239, 161, 189, 207, 226, 55, 191, 27, 212, 166, 62, 11, 2, 191, 62, 130, 216, 103, 190, 51, 70, 136, 62, 32, 205, 15, 191, 32, 57, 247, 190, 248, 55, 37, 63, 106, 213, 64, 62, 189, 216, 20, 191, 73, 236, 125, 190, 236, 252, 61, 190, 128, 72, 54, 191, 119, 14, 125, 62, 80, 76, 156, 62, 37, 115, 6, 63, 97, 47, 7, 190, 47, 65, 16, 191, 149, 234, 168, 61, 62, 26, 0, 63, 104, 165, 187, 55, 197, 126, 33, 63, 50, 8, 199, 62, 99, 87, 162, 62, 218, 149, 221, 190, 47, 138, 193, 190, 150, 250, 179, 62, 27, 12, 87, 191, 146, 78, 210, 189, 203, 184, 77, 61, 39, 46, 48, 191, 212, 252, 90, 62, 182, 36, 35, 63, 138, 67, 223, 62, 135, 66, 29, 63, 78, 217, 121, 62, 128, 134, 42, 63, 218, 243, 47, 190, 156, 95, 218, 190, 133, 148, 86, 62, 204, 74, 191, 61, 203, 53, 94, 63, 20, 173, 10, 191, 109, 41, 120, 190, 41, 143, 242, 62, 146, 200, 124, 191, 118, 116, 16, 190, 38, 61, 16, 63, 105, 222, 212, 62, 248, 217, 244, 190, 155, 155, 224, 190, 193, 115, 18, 191, 213, 92, 17, 61, 126, 91, 9, 191, 73, 88, 142, 187, 121, 162, 37, 61, 238, 191, 253, 190, 63, 18, 118, 62, 145, 194, 43, 190, 150, 247, 196, 189, 132, 43, 12, 190, 154, 197, 210, 189, 153, 120, 164, 190, 41, 234, 223, 190, 33, 118, 50, 190, 121, 202, 167, 189, 11, 39, 226, 62, 149, 16, 189, 62, 168, 226, 242, 190, 9, 71, 248, 62, 65, 117, 137, 190, 152, 56, 13, 188, 128, 134, 236, 190, 197, 11, 49, 63, 67, 63, 103, 63, 149, 189, 0, 63, 248, 112, 20, 63, 245, 75, 203, 190, 175, 138, 0, 63, 204, 152, 193, 190, 140, 238, 15, 191, 143, 21, 173, 190, 147, 250, 17, 191, 53, 114, 178, 190, 171, 104, 105, 191, 72, 181, 132, 63, 168, 225, 248, 190, 47, 131, 25, 63, 164, 22, 84, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 13, 59, 191, 43, 194, 242, 62, 19, 173, 130, 189, 21, 177, 49, 63, 14, 91, 206, 190, 42, 220, 41, 191, 179, 23, 142, 190, 254, 61, 68, 63, 211, 246, 153, 190, 202, 246, 22, 191, 94, 209, 75, 62, 141, 115, 128, 62, 72, 112, 206, 58, 120, 118, 89, 61, 254, 201, 151, 62, 192, 177, 159, 62, 185, 5, 59, 59, 61, 25, 129, 62, 216, 173, 106, 62, 148, 19, 125, 61, 69, 132, 22, 63, 217, 71, 150, 62, 231, 59, 39, 63, 222, 105, 2, 60, 67, 143, 207, 62, 204, 171, 219, 62, 166, 163, 18, 62, 12, 201, 68, 62, 159, 167, 1, 190, 55, 253, 126, 62, 129, 112, 2, 190, 71, 86, 100, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 20, 47, 61, 194, 174, 40, 61, 159, 99, 71, 191, 124, 117, 107, 61, 130, 221, 130, 191, 94, 99, 160, 190, 2, 20, 1, 190, 4, 239, 143, 62, 16, 189, 34, 190, 204, 9, 29, 190, 186, 150, 72, 189, 8, 159, 170, 189, 251, 232, 7, 191, 7, 19, 58, 60, 73, 192, 35, 62, 251, 249, 112, 61, 218, 133, 135, 61, 119, 81, 154, 188, 42, 72, 177, 188, 221, 203, 177, 189, 23, 238, 16, 62, 121, 93, 234, 188, 251, 12, 32, 189, 91, 109, 147, 189, 2, 216, 141, 61, 249, 203, 25, 62, 177, 81, 2, 191, 200, 190, 197, 60, 10, 88, 199, 61, 76, 228, 116, 62, 236, 78, 51, 191, 9, 202, 84, 60, 57, 39, 200, 189, 196, 182, 41, 62, 168, 89, 207, 62, 193, 195, 79, 62, 94, 78, 157, 61, 183, 14, 217, 189, 215, 85, 166, 189, 61, 244, 210, 61, 96, 208, 69, 189, 23, 156, 160, 190, 69, 120, 5, 190, 46, 113, 49, 62, 223, 221, 163, 62, 244, 197, 169, 59, 115, 91, 227, 190, 169, 223, 212, 188, 196, 206, 65, 62, 155, 164, 80, 62, 207, 205, 69, 61, 130, 229, 36, 62, 209, 169, 255, 60, 60, 219, 12, 189, 58, 69, 164, 61, 232, 79, 148, 190, 10, 144, 23, 61, 152, 157, 195, 61, 15, 48, 134, 189, 51, 182, 148, 189, 188, 44, 157, 190, 136, 74, 138, 190, 196, 191, 52, 61, 133, 49, 5, 62, 169, 47, 1, 190, 18, 199, 22, 62, 148, 178, 11, 62, 144, 162, 28, 61, 155, 44, 152, 62, 86, 160, 185, 189, 151, 154, 148, 62, 189, 152, 63, 190, 106, 186, 112, 62, 128, 210, 181, 61, 132, 229, 81, 62, 211, 85, 95, 62, 112, 4, 11, 62, 38, 163, 243, 60, 189, 46, 168, 61, 116, 143, 222, 61, 0, 97, 147, 190, 176, 6, 208, 61, 2, 93, 67, 190, 229, 121, 107, 62, 48, 6, 190, 189, 235, 227, 178, 190, 96, 166, 207, 61, 240, 189, 47, 62, 140, 207, 132, 60, 156, 5, 156, 190, 45, 193, 31, 62, 55, 112, 13, 190, 109, 146, 141, 189, 70, 208, 189, 189, 33, 20, 109, 62, 12, 118, 241, 189, 167, 204, 171, 61, 197, 153, 35, 62, 235, 228, 184, 61, 92, 173, 75, 189, 191, 49, 33, 190, 216, 130, 149, 189, 202, 66, 223, 61, 199, 49, 133, 61, 12, 241, 236, 189, 111, 30, 148, 61, 125, 241, 226, 59, 66, 108, 148, 189, 191, 203, 10, 190, 185, 179, 154, 60, 105, 143, 252, 189, 56, 161, 135, 189, 183, 70, 145, 61, 143, 60, 47, 190, 42, 216, 21, 62, 192, 142, 88, 61, 46, 173, 18, 190, 164, 111, 175, 61, 72, 33, 66, 190, 11, 193, 63, 190, 201, 19, 175, 60, 222, 183, 14, 189, 114, 14, 107, 61, 52, 170, 24, 190, 60, 245, 126, 189, 152, 178, 161, 189, 235, 84, 26, 62, 28, 58, 26, 190, 8, 99, 215, 61, 227, 210, 156, 189, 225, 203, 19, 62, 94, 4, 20, 188, 188, 135, 8, 191, 197, 43, 81, 190, 127, 155, 110, 190, 106, 145, 128, 62, 196, 183, 130, 190, 223, 232, 224, 61, 215, 50, 215, 61, 163, 103, 133, 60, 75, 185, 152, 60, 187, 48, 160, 61, 7, 131, 106, 62, 249, 64, 184, 189, 77, 137, 38, 62, 248, 49, 129, 189, 131, 166, 219, 61, 190, 225, 11, 189, 160, 197, 216, 189, 68, 2, 51, 61, 47, 254, 135, 61, 33, 35, 246, 61, 20, 247, 1, 61, 63, 249, 126, 189, 23, 92, 207, 189, 125, 99, 41, 61, 62, 145, 159, 189, 232, 74, 249, 61, 149, 144, 251, 189, 140, 139, 134, 61, 238, 156, 241, 60, 53, 123, 62, 189, 92, 108, 173, 189, 117, 96, 241, 189, 53, 248, 137, 61, 112, 41, 32, 190, 107, 238, 151, 61, 194, 245, 62, 190, 188, 190, 53, 190, 254, 244, 8, 190, 52, 92, 143, 189, 176, 201, 111, 189, 38, 79, 14, 189, 253, 205, 194, 60, 67, 58, 129, 61, 70, 42, 135, 61, 191, 253, 156, 189, 221, 125, 15, 61, 201, 41, 165, 189, 3, 239, 48, 190, 151, 171, 202, 61, 109, 218, 177, 61, 189, 26, 129, 189, 83, 158, 242, 61, 57, 222, 40, 60, 117, 151, 41, 60, 98, 110, 172, 187, 149, 89, 139, 189, 22, 20, 112, 61, 70, 173, 40, 186, 199, 101, 195, 189, 124, 205, 185, 60, 77, 38, 17, 190, 61, 85, 240, 188, 196, 51, 103, 189, 79, 43, 203, 189, 113, 138, 11, 62, 178, 185, 195, 188, 145, 194, 162, 61, 192, 67, 10, 189, 66, 15, 139, 189, 255, 2, 147, 61, 225, 208, 2, 62, 18, 47, 1, 62, 253, 218, 19, 190, 122, 17, 7, 190, 229, 6, 208, 189, 202, 18, 110, 189, 16, 2, 48, 188, 146, 64, 158, 189, 158, 122, 99, 61, 138, 122, 32, 190, 155, 236, 135, 60, 104, 37, 145, 61, 42, 234, 40, 190, 250, 45, 0, 189, 37, 54, 9, 62, 221, 235, 55, 61, 41, 201, 76, 60, 202, 93, 137, 61, 75, 232, 5, 61, 193, 89, 29, 190, 103, 216, 179, 189, 24, 72, 52, 190, 206, 153, 233, 61, 147, 165, 176, 60, 106, 65, 176, 62, 238, 169, 4, 60, 12, 220, 58, 61, 61, 153, 226, 189, 45, 186, 118, 190, 176, 94, 180, 189, 121, 205, 32, 62, 217, 62, 144, 190, 191, 70, 40, 61, 42, 106, 81, 62, 222, 97, 138, 62, 167, 206, 7, 190, 63, 19, 153, 189, 106, 140, 110, 62, 199, 12, 132, 62, 93, 51, 82, 61, 12, 125, 98, 62, 166, 149, 168, 189, 71, 67, 66, 62, 175, 7, 14, 62, 248, 91, 20, 62, 49, 245, 55, 190, 128, 190, 242, 189, 178, 93, 212, 189, 56, 216, 48, 62, 119, 182, 86, 189, 125, 134, 142, 61, 20, 150, 66, 61, 134, 173, 1, 62, 172, 67, 126, 62, 238, 55, 191, 190, 51, 201, 120, 189, 88, 237, 4, 191, 218, 212, 63, 62, 109, 105, 99, 191, 36, 254, 26, 191, 1, 19, 73, 189, 195, 197, 77, 62, 184, 124, 190, 190, 70, 246, 30, 62, 146, 99, 47, 190, 91, 116, 58, 61, 227, 69, 162, 190, 106, 66, 88, 62, 17, 185, 223, 62, 127, 99, 178, 188, 217, 170, 128, 190, 245, 218, 120, 190, 19, 154, 86, 190, 121, 236, 186, 59, 180, 185, 145, 61, 8, 78, 36, 61, 176, 36, 174, 61, 48, 236, 39, 62, 210, 32, 165, 61, 39, 253, 205, 61, 137, 28, 114, 190, 67, 215, 119, 62, 30, 9, 46, 61, 114, 170, 154, 62, 152, 100, 147, 190, 222, 68, 233, 189, 14, 207, 24, 188, 221, 191, 221, 190, 76, 126, 124, 62, 126, 53, 90, 62, 243, 142, 27, 61, 243, 163, 114, 189, 39, 185, 198, 61, 168, 23, 51, 62, 33, 242, 18, 190, 116, 85, 90, 190, 146, 169, 47, 188, 67, 183, 198, 189, 157, 246, 111, 189, 11, 0, 211, 61, 84, 56, 146, 62, 180, 73, 244, 61, 154, 58, 91, 189, 212, 135, 222, 188, 181, 23, 102, 62, 161, 115, 67, 62, 95, 17, 11, 187, 9, 52, 132, 189, 172, 142, 2, 189, 219, 160, 124, 187, 48, 13, 140, 61, 148, 228, 83, 190, 136, 195, 237, 58, 41, 235, 40, 62, 168, 26, 6, 61, 49, 38, 63, 190, 23, 64, 129, 61, 194, 252, 145, 189, 168, 195, 228, 189, 217, 201, 11, 60, 60, 9, 158, 60, 5, 6, 213, 61, 222, 171, 209, 189, 120, 173, 127, 61, 89, 93, 217, 61, 13, 2, 172, 189, 30, 115, 10, 62, 204, 83, 146, 61, 94, 237, 48, 190, 96, 217, 164, 61, 91, 53, 2, 190, 10, 58, 33, 190, 238, 75, 24, 190, 101, 79, 143, 189, 167, 110, 66, 189, 154, 155, 49, 62, 142, 75, 79, 185, 201, 79, 62, 190, 98, 60, 59, 190, 99, 99, 247, 61, 253, 147, 164, 189, 212, 75, 147, 61, 118, 82, 247, 61, 32, 69, 212, 61, 40, 34, 23, 189, 10, 126, 133, 189, 53, 214, 52, 190, 248, 119, 70, 61, 13, 96, 22, 189, 85, 113, 20, 62, 155, 31, 43, 190, 161, 81, 2, 190, 134, 94, 11, 191, 243, 45, 144, 61, 60, 127, 164, 190, 209, 228, 138, 190, 20, 5, 161, 61, 101, 202, 226, 61, 195, 248, 18, 61, 129, 89, 136, 62, 0, 192, 124, 189, 74, 38, 241, 189, 119, 213, 146, 190, 187, 51, 146, 62, 63, 235, 159, 62, 173, 134, 58, 61, 118, 39, 137, 190, 240, 254, 194, 188, 78, 166, 228, 61, 71, 129, 69, 61, 158, 204, 244, 188, 17, 242, 254, 61, 225, 41, 183, 61, 142, 71, 122, 61, 32, 254, 17, 190, 187, 243, 129, 189, 159, 224, 20, 61, 142, 0, 16, 62, 243, 23, 213, 61, 200, 145, 84, 61, 166, 163, 220, 189, 185, 43, 201, 189, 205, 92, 152, 189, 7, 150, 17, 189, 5, 220, 221, 62, 21, 207, 38, 62, 159, 181, 99, 62, 191, 235, 208, 61, 83, 205, 172, 190, 234, 108, 135, 62, 89, 33, 110, 61, 71, 64, 154, 190, 181, 72, 27, 190, 251, 8, 195, 61, 249, 6, 194, 62, 76, 246, 32, 189, 146, 37, 234, 61, 117, 2, 189, 61, 130, 88, 109, 61, 102, 62, 124, 189, 107, 189, 28, 62, 157, 203, 69, 189, 67, 217, 138, 62, 147, 110, 194, 60, 62, 224, 129, 62, 211, 216, 216, 61, 118, 77, 91, 188, 110, 66, 10, 189, 15, 56, 32, 62, 216, 150, 44, 190, 11, 53, 136, 189, 78, 157, 227, 186, 144, 241, 209, 61, 22, 21, 156, 62, 135, 172, 3, 61, 6, 96, 152, 61, 85, 229, 22, 62, 255, 22, 12, 190, 40, 147, 108, 189, 99, 135, 16, 62, 103, 240, 229, 59, 170, 218, 253, 189, 182, 36, 182, 189, 126, 150, 101, 61, 197, 68, 54, 190, 70, 210, 112, 61, 202, 200, 205, 61, 197, 241, 24, 190, 26, 85, 129, 189, 215, 102, 228, 189, 207, 53, 13, 62, 0, 235, 63, 190, 132, 136, 130, 60, 221, 160, 42, 190, 98, 70, 172, 61, 112, 157, 40, 190, 237, 95, 112, 189, 38, 111, 14, 62, 109, 148, 211, 189, 86, 170, 166, 188, 40, 142, 3, 190, 48, 245, 204, 189, 159, 133, 23, 190, 75, 42, 89, 61, 189, 4, 14, 190, 63, 8, 106, 60, 241, 223, 135, 189, 7, 224, 80, 190, 118, 241, 13, 190, 154, 53, 143, 61, 103, 204, 54, 190, 137, 208, 209, 188, 126, 136, 241, 61, 159, 60, 226, 189, 196, 221, 3, 190, 197, 3, 27, 190, 242, 73, 24, 62, 237, 81, 5, 61, 87, 219, 137, 189, 114, 196, 224, 188, 7, 88, 220, 188, 111, 239, 236, 189, 140, 206, 194, 189, 56, 236, 221, 61, 173, 114, 17, 190, 177, 41, 130, 61, 241, 107, 242, 61, 150, 132, 218, 61, 167, 8, 221, 189, 223, 141, 48, 190, 225, 192, 59, 190, 27, 237, 187, 61, 156, 6, 110, 187, 196, 236, 9, 189, 186, 87, 186, 189, 228, 62, 0, 61, 142, 77, 22, 189, 27, 102, 200, 60, 159, 225, 227, 187, 82, 51, 202, 61, 104, 248, 31, 58, 142, 12, 18, 190, 45, 242, 87, 62, 96, 105, 169, 62, 85, 136, 4, 190, 159, 91, 183, 61, 163, 4, 240, 189, 67, 10, 49, 190, 136, 245, 3, 61, 218, 187, 221, 189, 248, 75, 199, 61, 88, 222, 121, 189, 212, 84, 37, 190, 222, 190, 26, 61, 232, 138, 112, 62, 40, 3, 124, 189, 147, 34, 131, 189, 37, 112, 41, 189, 190, 74, 38, 61, 4, 120, 43, 61, 9, 129, 66, 62, 152, 250, 231, 60, 177, 115, 108, 61, 182, 176, 135, 61, 113, 208, 63, 61, 21, 136, 17, 190, 115, 9, 4, 62, 61, 96, 238, 189, 142, 116, 154, 60, 59, 187, 236, 188, 190, 128, 90, 60, 67, 73, 13, 188, 121, 86, 188, 60, 145, 108, 8, 189, 123, 123, 225, 189, 117, 42, 139, 61, 147, 119, 190, 61, 157, 172, 136, 60, 15, 214, 27, 61, 9, 114, 15, 190, 232, 37, 144, 189, 222, 187, 3, 61, 91, 12, 50, 189, 177, 88, 14, 190, 229, 130, 130, 189, 56, 148, 8, 190, 50, 182, 29, 190, 179, 103, 47, 190, 148, 96, 63, 61, 130, 20, 252, 60, 69, 135, 147, 189, 235, 109, 6, 190, 180, 206, 0, 62, 232, 127, 249, 189, 57, 123, 208, 189, 4, 150, 135, 189, 173, 42, 117, 189, 90, 38, 1, 190, 40, 248, 34, 62, 134, 177, 30, 190, 207, 203, 175, 188, 87, 65, 57, 189, 95, 71, 205, 61, 111, 61, 27, 62, 60, 229, 179, 190, 245, 86, 24, 62, 65, 147, 156, 190, 253, 82, 77, 60, 59, 176, 108, 62, 24, 198, 130, 189, 6, 129, 248, 189, 162, 166, 18, 187, 203, 65, 156, 61, 153, 93, 75, 190, 170, 254, 216, 189, 245, 77, 109, 62, 99, 140, 136, 61, 114, 168, 168, 184, 88, 81, 144, 59, 59, 104, 78, 190, 31, 214, 129, 188, 60, 203, 164, 61, 182, 130, 0, 190, 81, 38, 18, 61, 15, 69, 177, 61, 104, 20, 81, 62, 116, 21, 243, 61, 215, 5, 134, 61, 230, 200, 22, 190, 248, 136, 49, 62, 61, 99, 149, 60, 71, 222, 16, 62, 216, 175, 176, 189, 50, 124, 202, 189, 5, 115, 193, 60, 141, 162, 241, 60, 95, 27, 33, 62, 46, 164, 39, 62, 236, 208, 42, 60, 162, 104, 120, 189, 201, 9, 138, 190, 253, 120, 98, 62, 174, 29, 154, 61, 40, 211, 70, 189, 153, 86, 76, 61, 54, 204, 242, 61, 112, 191, 198, 61, 238, 230, 183, 59, 14, 54, 220, 61, 5, 15, 91, 62, 11, 209, 78, 189, 28, 112, 210, 61, 195, 160, 42, 190, 134, 102, 93, 189, 134, 27, 31, 62, 184, 182, 31, 62, 28, 32, 155, 61, 188, 32, 100, 189, 146, 35, 205, 61, 65, 179, 182, 189, 7, 129, 140, 61, 54, 86, 218, 189, 34, 37, 103, 189, 96, 190, 221, 186, 14, 198, 64, 61, 80, 22, 27, 62, 130, 78, 213, 190, 225, 141, 135, 62, 161, 197, 98, 191, 0, 165, 246, 61, 181, 154, 155, 191, 194, 110, 10, 191, 6, 172, 140, 59, 34, 209, 34, 62, 30, 92, 79, 190, 82, 132, 11, 190, 117, 202, 52, 190, 96, 55, 123, 190, 208, 239, 130, 191, 3, 36, 70, 62, 220, 42, 246, 61, 53, 135, 29, 62, 7, 61, 50, 190, 83, 168, 87, 189, 42, 170, 227, 189, 201, 183, 161, 61, 217, 236, 47, 62, 141, 250, 108, 62, 84, 163, 129, 62, 33, 71, 75, 59, 164, 153, 238, 60, 187, 131, 123, 62, 103, 113, 39, 191, 75, 141, 116, 62, 28, 97, 65, 59, 42, 23, 159, 58, 63, 70, 130, 191, 22, 118, 163, 190, 76, 78, 26, 61, 164, 162, 82, 191, 139, 79, 52, 190, 242, 87, 54, 61, 39, 166, 155, 189, 196, 36, 174, 190, 64, 240, 72, 61, 134, 190, 145, 62, 197, 171, 92, 189, 83, 124, 126, 62, 223, 63, 18, 62, 209, 91, 237, 190, 150, 110, 24, 190, 115, 190, 65, 62, 22, 81, 205, 62, 69, 246, 203, 61, 73, 140, 188, 60, 157, 24, 223, 190, 104, 121, 139, 62, 62, 120, 127, 190, 224, 10, 199, 189, 241, 16, 117, 190, 135, 62, 80, 189, 40, 200, 185, 61, 132, 106, 159, 189, 7, 87, 15, 190, 69, 146, 162, 60, 58, 47, 161, 62, 25, 3, 17, 61, 10, 238, 210, 189, 159, 58, 184, 61, 235, 82, 247, 189, 141, 0, 196, 61, 194, 59, 133, 190, 50, 105, 9, 190, 229, 187, 147, 190, 78, 88, 48, 190, 197, 190, 143, 61, 55, 159, 204, 189, 156, 149, 0, 62, 33, 180, 39, 190, 120, 221, 164, 62, 145, 73, 124, 189, 35, 193, 239, 189, 32, 56, 170, 190, 121, 108, 119, 62, 129, 251, 137, 62, 10, 60, 47, 190, 82, 42, 202, 189, 90, 247, 213, 189, 25, 207, 93, 62, 253, 119, 163, 190, 163, 118, 112, 189, 200, 48, 0, 62, 236, 175, 46, 190, 162, 74, 1, 62, 2, 113, 150, 62, 158, 15, 246, 61, 176, 138, 210, 189, 49, 183, 60, 61, 22, 104, 151, 62, 165, 139, 26, 62, 221, 32, 138, 61, 106, 176, 228, 62, 9, 198, 107, 62, 226, 186, 226, 61, 11, 233, 116, 62, 112, 20, 95, 62, 247, 161, 117, 62, 178, 123, 140, 62, 45, 176, 252, 61, 3, 37, 236, 189, 233, 37, 217, 61, 217, 65, 24, 62, 18, 1, 96, 62, 38, 33, 119, 60, 244, 237, 133, 62, 57, 72, 52, 62, 33, 1, 70, 61, 164, 64, 86, 190, 212, 118, 161, 61, 83, 149, 137, 189, 233, 215, 4, 62, 75, 226, 64, 190, 53, 184, 138, 61, 59, 226, 135, 190, 131, 129, 140, 190, 110, 38, 53, 62, 32, 25, 43, 62, 223, 41, 215, 190, 108, 67, 241, 61, 187, 191, 137, 61, 232, 109, 239, 60, 47, 72, 5, 60, 87, 95, 148, 62, 205, 174, 7, 62, 131, 230, 41, 189, 27, 60, 116, 61, 7, 29, 38, 190, 121, 21, 45, 62, 253, 18, 195, 189, 199, 37, 170, 59, 248, 123, 107, 189, 52, 82, 250, 186, 222, 11, 2, 188, 49, 255, 233, 189, 110, 55, 35, 190, 11, 111, 242, 60, 119, 26, 92, 189, 217, 235, 44, 190, 255, 108, 60, 61, 46, 14, 19, 188, 220, 2, 49, 62, 48, 149, 51, 190, 39, 127, 155, 187, 254, 216, 152, 60, 183, 105, 130, 188, 204, 95, 158, 188, 32, 170, 7, 190, 55, 217, 16, 190, 24, 223, 242, 189, 204, 78, 43, 189, 57, 194, 168, 189, 211, 167, 111, 189, 40, 242, 43, 62, 136, 242, 52, 190, 168, 185, 47, 62, 169, 223, 194, 189, 131, 247, 119, 62, 41, 1, 153, 189, 188, 212, 163, 61, 239, 42, 18, 190, 231, 114, 39, 62, 90, 116, 143, 59, 188, 28, 49, 190, 208, 248, 182, 189, 182, 216, 26, 62, 207, 103, 43, 62, 199, 35, 215, 61, 18, 41, 59, 61, 168, 181, 54, 189, 104, 79, 222, 189, 45, 72, 120, 189, 203, 243, 67, 191, 151, 116, 103, 62, 104, 210, 96, 188, 250, 165, 150, 61, 2, 79, 52, 62, 26, 105, 83, 189, 38, 213, 211, 61, 156, 97, 26, 190, 100, 103, 85, 189, 184, 57, 57, 190, 55, 153, 205, 189, 84, 188, 153, 189, 234, 81, 53, 189, 25, 222, 25, 190, 97, 80, 18, 62, 157, 207, 49, 190, 69, 154, 31, 190, 88, 226, 189, 61, 139, 146, 68, 189, 64, 23, 144, 62, 174, 37, 235, 186, 36, 83, 146, 62, 114, 229, 142, 62, 19, 123, 150, 190, 222, 196, 91, 189, 26, 53, 103, 62, 213, 213, 144, 190, 110, 44, 1, 62, 54, 214, 9, 62, 189, 179, 71, 62, 248, 205, 216, 189, 137, 102, 176, 190, 36, 76, 239, 61, 17, 219, 130, 61, 106, 249, 84, 61, 21, 0, 21, 62, 53, 40, 9, 189, 93, 144, 153, 189, 80, 143, 228, 189, 4, 148, 8, 190, 27, 16, 34, 60, 249, 141, 161, 61, 187, 72, 186, 188, 31, 36, 52, 188, 243, 39, 171, 187, 234, 80, 81, 60, 186, 107, 119, 60, 104, 55, 25, 62, 97, 31, 42, 62, 2, 56, 227, 61, 159, 94, 131, 62, 34, 89, 237, 62, 30, 149, 150, 62, 227, 67, 248, 61, 36, 225, 109, 189, 210, 184, 146, 59, 4, 253, 57, 188, 16, 218, 138, 62, 70, 77, 232, 188, 53, 222, 23, 188, 140, 69, 143, 62, 100, 126, 204, 62, 236, 239, 123, 188, 188, 219, 192, 190, 0, 192, 1, 189, 13, 167, 169, 62, 82, 254, 145, 61, 236, 103, 95, 62, 27, 82, 141, 62, 219, 25, 41, 189, 167, 3, 7, 61, 63, 4, 117, 62, 17, 189, 55, 190, 234, 186, 146, 59, 48, 99, 249, 188, 33, 15, 131, 62, 250, 63, 150, 190, 75, 103, 184, 189, 89, 233, 96, 190, 235, 180, 1, 60, 65, 193, 7, 61, 48, 36, 94, 61, 87, 42, 168, 61, 112, 160, 80, 61, 101, 9, 1, 61, 192, 152, 132, 61, 140, 134, 142, 189, 83, 212, 157, 61, 7, 63, 145, 59, 250, 91, 235, 61, 243, 138, 74, 188, 28, 20, 226, 60, 185, 15, 173, 189, 67, 4, 197, 189, 213, 228, 228, 188, 156, 50, 236, 61, 112, 39, 242, 189, 78, 66, 187, 61, 218, 200, 71, 61, 74, 78, 40, 61, 152, 240, 175, 61, 143, 146, 33, 60, 45, 245, 65, 189, 166, 164, 216, 60, 172, 226, 229, 61, 53, 232, 154, 60, 15, 187, 44, 188, 29, 127, 113, 61, 50, 34, 207, 61, 87, 33, 115, 61, 197, 138, 129, 189, 49, 135, 58, 190, 63, 228, 72, 190, 245, 80, 178, 189, 93, 50, 35, 190, 186, 93, 185, 189, 215, 155, 118, 189, 113, 227, 209, 190, 223, 101, 139, 190, 23, 15, 70, 62, 79, 16, 49, 61, 181, 243, 71, 190, 229, 191, 54, 62, 16, 212, 238, 189, 60, 218, 197, 61, 207, 72, 156, 190, 147, 99, 49, 62, 153, 75, 152, 62, 23, 115, 56, 189, 210, 100, 49, 190, 53, 195, 150, 61, 151, 242, 165, 189, 176, 126, 238, 189, 183, 127, 156, 61, 132, 180, 190, 61, 27, 201, 32, 62, 43, 215, 166, 60, 131, 104, 74, 60, 77, 59, 241, 61, 56, 106, 74, 189, 83, 249, 90, 62, 69, 242, 75, 61, 118, 192, 141, 60, 173, 169, 225, 60, 91, 80, 94, 189, 58, 115, 18, 62, 253, 59, 85, 62, 35, 189, 123, 62, 230, 243, 60, 62, 164, 70, 141, 189, 66, 157, 63, 190, 218, 42, 86, 190, 215, 212, 64, 189, 228, 165, 220, 61, 17, 104, 100, 190, 72, 210, 11, 62, 14, 239, 126, 189, 243, 128, 56, 62, 180, 124, 16, 61, 109, 15, 107, 190, 88, 188, 216, 189, 43, 192, 203, 60, 7, 185, 27, 62, 58, 202, 112, 187, 55, 191, 203, 189, 161, 43, 78, 62, 19, 240, 57, 62, 92, 131, 131, 62, 185, 125, 84, 190, 192, 148, 97, 62, 82, 15, 107, 62, 206, 218, 122, 189, 96, 63, 128, 189, 97, 102, 71, 190, 211, 201, 94, 189, 26, 194, 11, 62, 180, 146, 18, 61, 196, 71, 110, 189, 68, 89, 12, 61, 127, 54, 20, 191, 178, 88, 137, 187, 119, 222, 40, 191, 115, 14, 233, 187, 60, 89, 236, 189, 228, 224, 133, 62, 107, 32, 35, 190, 190, 99, 177, 61, 122, 231, 108, 61, 98, 101, 44, 60, 216, 206, 158, 190, 126, 45, 183, 62, 90, 85, 128, 62, 7, 25, 232, 61, 174, 61, 80, 61, 88, 130, 4, 189, 220, 138, 211, 189, 105, 172, 67, 62, 255, 98, 212, 61, 60, 63, 110, 61, 253, 44, 220, 61, 141, 141, 118, 188, 112, 158, 144, 189, 107, 84, 135, 189, 128, 61, 55, 62, 162, 249, 176, 62, 97, 16, 93, 62, 239, 70, 51, 62, 180, 10, 24, 190, 93, 215, 222, 189, 215, 239, 160, 190, 137, 79, 87, 60, 89, 224, 141, 191, 188, 230, 43, 190, 150, 79, 106, 191, 122, 5, 1, 191, 50, 201, 100, 62, 121, 86, 23, 62, 31, 192, 25, 190, 74, 165, 61, 190, 132, 48, 158, 61, 167, 184, 81, 189, 46, 136, 98, 191, 46, 76, 56, 190, 76, 192, 188, 61, 85, 156, 191, 61, 206, 64, 3, 190, 195, 11, 137, 190, 142, 162, 169, 190, 0, 108, 187, 62, 206, 195, 139, 62, 60, 254, 87, 62, 33, 129, 207, 187, 229, 96, 240, 61, 230, 186, 176, 189, 68, 127, 27, 62, 180, 58, 72, 191, 65, 35, 110, 190, 223, 10, 85, 62, 71, 26, 246, 187, 114, 255, 125, 191, 30, 142, 138, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 234, 157, 61, 10, 52, 206, 61, 173, 115, 66, 190, 1, 250, 137, 189, 177, 63, 217, 189, 157, 44, 37, 190, 105, 157, 171, 188, 11, 197, 195, 61, 161, 189, 42, 62, 102, 177, 22, 62, 200, 123, 74, 190, 212, 25, 236, 61, 76, 52, 119, 62, 94, 95, 2, 62, 250, 12, 21, 189, 115, 140, 185, 61, 154, 50, 143, 188, 60, 33, 204, 60, 120, 97, 139, 61, 31, 144, 142, 62, 152, 218, 215, 61, 64, 58, 68, 190, 49, 138, 163, 189, 79, 223, 91, 61, 0, 238, 63, 190, 191, 156, 200, 61, 6, 87, 38, 189, 151, 68, 100, 62, 215, 92, 77, 61, 223, 162, 125, 61, 42, 230, 154, 61, 47, 133, 166, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {172, 119, 204, 190, 194, 83, 181, 62, 84, 229, 205, 190, 4, 144, 244, 189, 125, 7, 223, 61, 237, 24, 76, 61, 236, 47, 6, 189, 53, 253, 107, 62, 159, 47, 231, 190, 190, 182, 25, 190, 91, 66, 243, 61, 103, 193, 22, 190, 152, 66, 177, 62, 39, 31, 8, 190, 190, 133, 37, 189, 67, 219, 0, 62, 186, 192, 33, 189, 201, 224, 93, 190, 252, 177, 164, 61, 150, 196, 19, 191, 139, 35, 192, 190, 155, 29, 193, 62, 242, 203, 116, 190, 48, 200, 121, 61, 51, 235, 92, 62, 114, 151, 90, 62, 34, 82, 186, 62, 146, 182, 73, 188, 80, 153, 17, 190, 207, 95, 81, 62, 63, 177, 158, 190, 101, 220, 104, 191, 5, 142, 58, 190, 225, 74, 252, 189, 111, 96, 26, 62, 65, 240, 4, 60, 128, 119, 22, 190, 180, 13, 146, 61, 163, 44, 231, 61, 61, 67, 76, 189, 242, 115, 138, 61, 234, 12, 61, 190, 19, 199, 25, 190, 244, 114, 195, 60, 240, 215, 93, 190, 94, 113, 39, 61, 192, 153, 2, 62, 131, 146, 254, 61, 139, 182, 139, 61, 41, 174, 47, 61, 147, 93, 216, 189, 65, 193, 164, 61, 110, 36, 119, 61, 34, 104, 20, 62, 107, 251, 150, 59, 93, 219, 150, 188, 246, 238, 181, 61, 108, 119, 8, 62, 246, 163, 8, 61, 209, 152, 81, 189, 167, 201, 53, 190, 210, 116, 61, 190, 120, 115, 24, 60, 25, 27, 91, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 161, 80, 62, 34, 242, 138, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {120, 68, 181, 63, 183, 124, 152, 190, 29, 189, 4, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {71, 217, 88, 63, 42, 122, 92, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0023/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}