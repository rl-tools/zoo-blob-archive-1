// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 132, 226, 190, 74, 156, 86, 191, 249, 26, 29, 191, 132, 178, 225, 190, 235, 112, 122, 191, 216, 121, 80, 190, 239, 128, 232, 59, 75, 35, 33, 191, 240, 164, 64, 62, 245, 141, 187, 62, 114, 204, 74, 190, 162, 99, 59, 62, 220, 242, 237, 190, 203, 57, 215, 62, 154, 109, 31, 63, 132, 177, 12, 63, 202, 178, 92, 191, 158, 72, 87, 190, 246, 35, 157, 190, 12, 13, 67, 191, 2, 192, 132, 62, 56, 52, 137, 62, 250, 42, 1, 63, 236, 180, 4, 190, 30, 225, 181, 190, 108, 188, 82, 63, 146, 150, 0, 63, 71, 121, 11, 63, 228, 23, 17, 63, 78, 29, 170, 62, 51, 204, 30, 62, 81, 32, 74, 191, 135, 52, 187, 190, 155, 83, 200, 62, 168, 131, 105, 191, 49, 58, 99, 190, 146, 99, 68, 62, 39, 163, 42, 191, 178, 218, 189, 61, 151, 53, 24, 63, 155, 130, 43, 63, 107, 196, 37, 63, 40, 11, 158, 62, 97, 255, 53, 63, 180, 205, 222, 189, 161, 77, 52, 191, 88, 97, 35, 61, 107, 169, 141, 61, 141, 104, 54, 63, 118, 226, 132, 191, 175, 37, 99, 190, 224, 159, 250, 62, 181, 141, 147, 191, 123, 107, 122, 190, 240, 85, 230, 62, 83, 132, 184, 62, 106, 69, 247, 190, 76, 190, 240, 190, 155, 154, 87, 191, 116, 230, 24, 62, 59, 30, 11, 191, 116, 188, 28, 190, 133, 75, 123, 187, 18, 182, 70, 191, 43, 57, 152, 190, 249, 175, 234, 186, 61, 48, 188, 190, 80, 92, 133, 190, 120, 232, 18, 190, 94, 175, 214, 190, 156, 226, 135, 191, 3, 139, 136, 190, 217, 185, 90, 62, 240, 120, 75, 63, 243, 15, 226, 62, 245, 218, 12, 191, 221, 62, 223, 62, 23, 157, 86, 190, 100, 122, 5, 62, 189, 58, 56, 63, 131, 208, 6, 63, 191, 76, 82, 63, 157, 196, 57, 63, 18, 179, 24, 63, 167, 137, 177, 190, 16, 24, 15, 63, 240, 95, 217, 190, 183, 126, 8, 191, 8, 246, 101, 191, 122, 79, 3, 191, 100, 212, 117, 190, 179, 100, 239, 190, 93, 217, 86, 63, 82, 112, 210, 190, 250, 190, 103, 63, 104, 35, 63, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 253, 167, 190, 171, 178, 11, 63, 96, 51, 156, 190, 179, 120, 46, 63, 16, 167, 15, 191, 32, 148, 12, 191, 160, 216, 221, 190, 128, 26, 67, 63, 186, 120, 230, 190, 83, 16, 89, 191, 185, 213, 63, 62, 111, 25, 169, 61, 55, 199, 87, 189, 89, 46, 138, 189, 187, 5, 181, 62, 228, 61, 198, 62, 113, 30, 221, 189, 19, 74, 96, 61, 122, 97, 30, 62, 132, 27, 178, 189, 251, 3, 17, 63, 219, 197, 230, 62, 70, 31, 46, 63, 250, 0, 44, 61, 173, 175, 4, 62, 31, 24, 9, 63, 25, 195, 144, 188, 51, 155, 15, 62, 79, 241, 36, 190, 200, 254, 181, 62, 56, 100, 124, 190, 179, 94, 125, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 151, 96, 189, 218, 14, 12, 60, 200, 93, 67, 191, 41, 163, 64, 190, 168, 45, 155, 191, 41, 131, 243, 190, 48, 138, 20, 191, 106, 30, 78, 62, 147, 53, 44, 190, 91, 126, 63, 190, 171, 176, 40, 190, 87, 234, 103, 190, 16, 150, 50, 191, 41, 226, 17, 190, 163, 125, 101, 61, 216, 199, 181, 61, 235, 113, 96, 189, 153, 196, 39, 190, 145, 183, 165, 189, 66, 42, 56, 190, 159, 217, 15, 62, 100, 9, 248, 188, 199, 217, 147, 189, 180, 72, 223, 189, 45, 11, 184, 188, 109, 178, 14, 62, 35, 241, 216, 190, 30, 236, 255, 189, 130, 230, 119, 61, 108, 149, 76, 62, 255, 3, 50, 191, 84, 176, 67, 61, 164, 6, 216, 189, 135, 74, 135, 62, 181, 128, 169, 62, 7, 35, 109, 62, 156, 214, 133, 61, 19, 122, 43, 191, 98, 73, 33, 190, 37, 202, 1, 62, 148, 137, 91, 189, 161, 78, 190, 190, 11, 135, 141, 189, 219, 217, 119, 62, 28, 166, 122, 62, 122, 217, 170, 60, 132, 3, 152, 190, 58, 238, 29, 189, 135, 73, 149, 62, 129, 172, 147, 62, 210, 188, 66, 62, 110, 187, 206, 60, 1, 77, 86, 59, 1, 133, 168, 61, 82, 81, 23, 62, 222, 144, 103, 191, 26, 43, 87, 61, 207, 123, 28, 190, 68, 211, 152, 189, 134, 85, 38, 189, 16, 3, 231, 190, 22, 17, 210, 190, 51, 202, 14, 61, 221, 174, 54, 62, 91, 209, 170, 190, 53, 191, 0, 61, 167, 78, 66, 62, 78, 215, 45, 61, 223, 206, 157, 62, 4, 250, 85, 62, 144, 33, 171, 62, 109, 212, 104, 61, 90, 167, 114, 62, 119, 23, 0, 62, 42, 236, 9, 62, 229, 250, 86, 62, 31, 243, 84, 62, 194, 106, 41, 57, 48, 169, 155, 62, 12, 103, 27, 62, 29, 9, 118, 190, 17, 64, 178, 61, 49, 36, 24, 190, 52, 229, 148, 62, 196, 48, 83, 189, 39, 161, 241, 190, 199, 173, 130, 61, 154, 16, 230, 62, 167, 174, 125, 59, 210, 84, 38, 62, 240, 70, 21, 62, 118, 70, 48, 190, 57, 67, 159, 190, 154, 81, 94, 188, 36, 235, 108, 62, 99, 219, 2, 190, 167, 204, 171, 61, 104, 154, 34, 62, 131, 16, 176, 61, 107, 234, 94, 189, 153, 72, 42, 190, 216, 130, 149, 189, 245, 162, 214, 61, 199, 49, 133, 61, 15, 25, 249, 189, 101, 6, 141, 61, 125, 241, 226, 59, 148, 159, 148, 189, 40, 239, 13, 190, 41, 38, 53, 60, 105, 143, 252, 189, 228, 203, 138, 189, 183, 70, 145, 61, 247, 53, 47, 190, 42, 216, 21, 62, 178, 249, 75, 61, 73, 137, 20, 190, 164, 111, 175, 61, 61, 49, 66, 190, 11, 193, 63, 190, 130, 216, 131, 60, 222, 183, 14, 189, 120, 91, 62, 61, 96, 22, 32, 190, 60, 245, 126, 189, 152, 178, 161, 189, 154, 58, 10, 62, 66, 15, 29, 190, 121, 90, 12, 62, 132, 196, 152, 60, 126, 144, 242, 60, 81, 183, 225, 61, 118, 35, 126, 191, 170, 136, 227, 190, 243, 21, 17, 61, 50, 47, 157, 62, 139, 59, 74, 191, 28, 201, 230, 189, 230, 97, 64, 62, 228, 197, 184, 61, 120, 3, 184, 189, 156, 106, 51, 61, 129, 187, 151, 62, 54, 17, 30, 188, 21, 91, 92, 62, 20, 10, 203, 59, 115, 103, 56, 62, 62, 220, 242, 61, 106, 250, 129, 189, 207, 61, 63, 62, 219, 48, 43, 62, 135, 14, 19, 62, 84, 97, 117, 190, 255, 113, 181, 189, 165, 166, 18, 191, 43, 53, 6, 62, 183, 96, 130, 189, 219, 167, 22, 62, 112, 13, 218, 190, 252, 42, 135, 190, 238, 156, 241, 60, 53, 123, 62, 189, 92, 108, 173, 189, 117, 96, 241, 189, 53, 248, 137, 61, 112, 41, 32, 190, 107, 238, 151, 61, 194, 245, 62, 190, 188, 190, 53, 190, 254, 244, 8, 190, 52, 92, 143, 189, 176, 201, 111, 189, 38, 79, 14, 189, 253, 205, 194, 60, 67, 58, 129, 61, 70, 42, 135, 61, 191, 253, 156, 189, 221, 125, 15, 61, 201, 41, 165, 189, 3, 239, 48, 190, 151, 171, 202, 61, 109, 218, 177, 61, 189, 26, 129, 189, 83, 158, 242, 61, 57, 222, 40, 60, 117, 151, 41, 60, 98, 110, 172, 187, 149, 89, 139, 189, 22, 20, 112, 61, 70, 173, 40, 186, 199, 101, 195, 189, 124, 205, 185, 60, 77, 38, 17, 190, 61, 85, 240, 188, 196, 51, 103, 189, 79, 43, 203, 189, 113, 138, 11, 62, 178, 185, 195, 188, 145, 194, 162, 61, 192, 67, 10, 189, 66, 15, 139, 189, 255, 2, 147, 61, 225, 208, 2, 62, 18, 47, 1, 62, 253, 218, 19, 190, 122, 17, 7, 190, 229, 6, 208, 189, 202, 18, 110, 189, 16, 2, 48, 188, 146, 64, 158, 189, 158, 122, 99, 61, 138, 122, 32, 190, 155, 236, 135, 60, 104, 37, 145, 61, 42, 234, 40, 190, 250, 45, 0, 189, 37, 54, 9, 62, 221, 235, 55, 61, 41, 201, 76, 60, 202, 93, 137, 61, 75, 232, 5, 61, 193, 89, 29, 190, 103, 216, 179, 189, 24, 72, 52, 190, 82, 155, 19, 62, 56, 21, 251, 61, 127, 61, 115, 62, 53, 84, 27, 188, 84, 107, 177, 60, 29, 93, 109, 190, 180, 15, 173, 190, 87, 190, 55, 190, 188, 187, 15, 62, 54, 51, 190, 190, 74, 238, 227, 61, 241, 212, 128, 62, 135, 42, 25, 62, 145, 113, 38, 190, 205, 3, 29, 190, 16, 248, 94, 62, 227, 213, 149, 62, 64, 153, 226, 61, 8, 181, 108, 62, 73, 138, 56, 190, 109, 105, 37, 62, 214, 223, 75, 62, 41, 129, 60, 62, 207, 116, 181, 190, 231, 95, 32, 190, 186, 237, 124, 190, 234, 204, 8, 62, 137, 205, 147, 189, 112, 117, 168, 61, 104, 218, 190, 60, 156, 193, 182, 61, 74, 32, 128, 62, 154, 149, 175, 190, 48, 136, 58, 190, 17, 163, 92, 190, 69, 229, 54, 62, 105, 208, 97, 191, 179, 37, 57, 191, 216, 136, 243, 62, 251, 9, 59, 62, 124, 127, 22, 191, 91, 232, 174, 61, 39, 178, 168, 190, 63, 55, 25, 190, 98, 38, 125, 190, 148, 39, 157, 62, 254, 145, 234, 62, 46, 42, 210, 60, 248, 9, 242, 190, 125, 27, 239, 190, 218, 187, 69, 190, 141, 152, 196, 59, 15, 217, 178, 61, 28, 31, 18, 61, 155, 211, 160, 61, 161, 188, 170, 62, 48, 7, 134, 61, 117, 84, 57, 62, 15, 84, 54, 58, 110, 82, 156, 62, 185, 42, 55, 62, 70, 144, 170, 62, 190, 160, 24, 188, 148, 38, 74, 190, 159, 65, 56, 190, 182, 21, 112, 191, 24, 79, 79, 62, 190, 225, 97, 62, 30, 40, 119, 61, 205, 100, 54, 191, 3, 135, 240, 60, 179, 7, 137, 62, 198, 126, 194, 189, 177, 219, 50, 190, 5, 90, 43, 189, 125, 86, 87, 189, 229, 232, 0, 190, 161, 185, 4, 62, 159, 26, 197, 62, 248, 171, 187, 61, 163, 36, 180, 61, 25, 114, 207, 60, 15, 129, 114, 62, 194, 165, 31, 62, 38, 110, 253, 189, 27, 199, 225, 190, 52, 212, 108, 190, 149, 238, 0, 191, 11, 189, 181, 61, 3, 83, 165, 190, 6, 195, 183, 60, 183, 208, 74, 62, 20, 198, 63, 189, 135, 216, 190, 190, 89, 148, 95, 61, 56, 13, 229, 189, 168, 195, 228, 189, 217, 201, 11, 60, 60, 9, 158, 60, 5, 6, 213, 61, 222, 171, 209, 189, 120, 173, 127, 61, 89, 93, 217, 61, 13, 2, 172, 189, 30, 115, 10, 62, 204, 83, 146, 61, 94, 237, 48, 190, 96, 217, 164, 61, 91, 53, 2, 190, 10, 58, 33, 190, 238, 75, 24, 190, 101, 79, 143, 189, 167, 110, 66, 189, 154, 155, 49, 62, 142, 75, 79, 185, 201, 79, 62, 190, 98, 60, 59, 190, 99, 99, 247, 61, 253, 147, 164, 189, 212, 75, 147, 61, 118, 82, 247, 61, 32, 69, 212, 61, 40, 34, 23, 189, 10, 126, 133, 189, 53, 214, 52, 190, 248, 119, 70, 61, 13, 96, 22, 189, 85, 113, 20, 62, 35, 20, 47, 190, 90, 46, 130, 190, 7, 18, 7, 191, 102, 54, 235, 61, 203, 254, 237, 190, 32, 44, 4, 191, 146, 13, 210, 189, 35, 67, 29, 62, 146, 145, 112, 189, 222, 93, 20, 62, 82, 65, 112, 190, 146, 86, 46, 190, 1, 50, 140, 190, 246, 127, 161, 62, 58, 60, 182, 62, 59, 216, 144, 61, 196, 130, 180, 190, 51, 44, 197, 189, 89, 207, 119, 61, 98, 14, 3, 190, 9, 254, 171, 59, 222, 18, 188, 61, 165, 125, 248, 61, 222, 79, 7, 62, 83, 160, 1, 190, 252, 164, 18, 189, 180, 196, 162, 61, 86, 200, 57, 62, 36, 160, 42, 62, 34, 90, 230, 60, 221, 19, 21, 190, 249, 226, 7, 190, 217, 206, 13, 189, 167, 192, 136, 61, 16, 90, 186, 62, 193, 175, 67, 62, 222, 219, 87, 62, 86, 72, 75, 189, 165, 105, 204, 190, 123, 164, 96, 62, 200, 218, 63, 61, 144, 168, 181, 190, 133, 234, 161, 189, 182, 209, 24, 62, 121, 163, 151, 62, 189, 126, 152, 188, 204, 164, 203, 61, 81, 53, 119, 61, 149, 41, 204, 61, 73, 163, 152, 59, 148, 220, 75, 62, 238, 201, 232, 189, 41, 200, 118, 62, 235, 165, 181, 61, 178, 66, 156, 62, 12, 63, 130, 189, 231, 30, 81, 188, 125, 32, 73, 190, 104, 52, 22, 62, 168, 173, 4, 190, 8, 234, 64, 189, 76, 230, 196, 188, 164, 217, 190, 61, 105, 29, 153, 62, 212, 53, 130, 60, 232, 252, 114, 61, 164, 135, 19, 62, 127, 70, 8, 190, 40, 147, 108, 189, 141, 255, 243, 61, 188, 179, 206, 57, 0, 210, 10, 190, 182, 36, 182, 189, 126, 150, 101, 61, 208, 91, 66, 190, 8, 230, 59, 61, 237, 183, 194, 61, 197, 241, 24, 190, 125, 227, 135, 189, 7, 193, 0, 190, 25, 227, 4, 62, 0, 73, 74, 190, 234, 214, 164, 186, 65, 66, 67, 190, 120, 96, 115, 61, 220, 127, 64, 190, 135, 241, 157, 189, 212, 136, 252, 61, 109, 148, 211, 189, 241, 211, 69, 189, 148, 134, 3, 190, 225, 115, 202, 189, 98, 219, 55, 190, 78, 247, 30, 61, 152, 6, 16, 190, 63, 8, 106, 60, 241, 223, 135, 189, 7, 224, 80, 190, 118, 241, 13, 190, 154, 53, 143, 61, 103, 204, 54, 190, 137, 208, 209, 188, 126, 136, 241, 61, 159, 60, 226, 189, 196, 221, 3, 190, 197, 3, 27, 190, 242, 73, 24, 62, 237, 81, 5, 61, 87, 219, 137, 189, 114, 196, 224, 188, 7, 88, 220, 188, 111, 239, 236, 189, 140, 206, 194, 189, 56, 236, 221, 61, 173, 114, 17, 190, 177, 41, 130, 61, 241, 107, 242, 61, 150, 132, 218, 61, 167, 8, 221, 189, 223, 141, 48, 190, 225, 192, 59, 190, 27, 237, 187, 61, 156, 6, 110, 187, 196, 236, 9, 189, 186, 87, 186, 189, 228, 62, 0, 61, 142, 77, 22, 189, 27, 102, 200, 60, 196, 198, 241, 59, 134, 71, 150, 62, 185, 93, 42, 61, 39, 48, 83, 189, 10, 235, 110, 62, 154, 233, 170, 62, 29, 31, 222, 188, 21, 31, 67, 61, 110, 170, 186, 189, 38, 243, 246, 190, 211, 188, 224, 61, 212, 25, 3, 61, 118, 99, 46, 62, 126, 24, 54, 190, 237, 80, 100, 190, 78, 45, 236, 61, 49, 185, 183, 62, 64, 125, 218, 61, 87, 88, 142, 189, 95, 164, 24, 62, 250, 18, 26, 62, 163, 92, 232, 61, 179, 4, 147, 62, 234, 8, 11, 190, 5, 136, 109, 61, 134, 73, 10, 189, 70, 198, 58, 187, 211, 13, 134, 190, 49, 61, 21, 62, 213, 57, 24, 190, 156, 235, 53, 61, 146, 84, 181, 187, 56, 26, 223, 186, 204, 160, 23, 188, 121, 86, 188, 60, 22, 45, 8, 189, 123, 123, 225, 189, 117, 42, 139, 61, 147, 119, 190, 61, 150, 106, 1, 188, 15, 214, 27, 61, 9, 114, 15, 190, 187, 18, 163, 189, 6, 62, 6, 61, 91, 12, 50, 189, 177, 88, 14, 190, 89, 164, 176, 189, 14, 25, 13, 190, 51, 136, 29, 190, 11, 55, 47, 190, 67, 251, 190, 60, 130, 20, 252, 60, 71, 91, 160, 189, 241, 203, 9, 190, 28, 120, 232, 61, 143, 121, 249, 189, 171, 54, 209, 189, 146, 206, 184, 189, 173, 42, 117, 189, 126, 181, 1, 190, 20, 216, 7, 62, 50, 241, 52, 190, 207, 203, 175, 188, 32, 170, 89, 189, 142, 216, 77, 61, 114, 254, 38, 62, 166, 52, 38, 190, 14, 246, 74, 62, 21, 214, 143, 190, 71, 60, 18, 62, 6, 126, 178, 62, 91, 243, 205, 189, 61, 14, 125, 190, 147, 38, 19, 62, 160, 159, 206, 60, 130, 76, 48, 190, 222, 163, 134, 61, 59, 52, 181, 62, 15, 246, 162, 188, 232, 160, 33, 189, 105, 244, 166, 187, 248, 57, 72, 190, 83, 227, 60, 189, 217, 83, 79, 62, 173, 95, 26, 190, 52, 193, 158, 188, 172, 29, 79, 61, 236, 6, 215, 62, 106, 117, 174, 61, 117, 98, 78, 60, 162, 96, 23, 189, 163, 9, 134, 62, 27, 148, 65, 189, 30, 178, 121, 62, 198, 221, 88, 61, 3, 39, 166, 190, 18, 244, 227, 60, 93, 131, 210, 61, 98, 62, 149, 61, 94, 177, 58, 62, 109, 11, 192, 187, 189, 51, 133, 190, 64, 225, 175, 190, 133, 93, 35, 62, 13, 137, 111, 61, 6, 190, 214, 189, 10, 232, 198, 61, 22, 8, 50, 62, 110, 232, 149, 187, 56, 233, 190, 60, 16, 148, 180, 61, 135, 122, 49, 62, 223, 233, 248, 59, 173, 224, 49, 62, 216, 182, 17, 190, 94, 216, 0, 190, 16, 145, 215, 61, 23, 127, 68, 62, 51, 230, 198, 61, 199, 163, 115, 190, 247, 255, 182, 61, 14, 141, 175, 190, 149, 102, 76, 61, 89, 131, 138, 189, 249, 141, 231, 189, 209, 99, 115, 189, 242, 161, 231, 60, 220, 117, 246, 61, 23, 220, 191, 190, 148, 50, 200, 62, 25, 39, 253, 190, 124, 32, 5, 188, 81, 90, 168, 191, 124, 138, 19, 191, 179, 99, 36, 63, 69, 214, 49, 61, 16, 119, 73, 191, 110, 204, 43, 190, 124, 57, 41, 190, 250, 149, 132, 190, 7, 251, 109, 191, 195, 202, 201, 61, 206, 175, 186, 60, 235, 139, 68, 61, 181, 233, 96, 190, 87, 152, 184, 189, 0, 2, 112, 189, 174, 31, 85, 62, 28, 211, 6, 62, 96, 107, 109, 62, 6, 30, 131, 62, 121, 52, 38, 62, 14, 1, 185, 190, 117, 66, 67, 62, 133, 102, 98, 191, 9, 68, 19, 62, 141, 36, 253, 60, 167, 201, 180, 61, 202, 189, 9, 191, 18, 206, 37, 191, 74, 91, 63, 62, 110, 194, 142, 191, 19, 124, 69, 189, 44, 148, 109, 61, 183, 107, 219, 189, 11, 144, 224, 190, 129, 15, 214, 61, 237, 209, 222, 62, 24, 190, 153, 189, 140, 161, 151, 62, 63, 221, 251, 61, 78, 21, 17, 191, 183, 71, 131, 60, 195, 78, 95, 62, 4, 220, 5, 63, 138, 13, 69, 61, 168, 65, 8, 61, 55, 100, 10, 191, 255, 44, 149, 62, 91, 215, 74, 190, 139, 12, 196, 189, 178, 209, 239, 190, 249, 14, 4, 190, 57, 154, 173, 62, 195, 70, 94, 189, 228, 4, 56, 62, 188, 203, 54, 61, 45, 189, 176, 62, 204, 243, 105, 62, 119, 179, 139, 61, 78, 30, 194, 61, 67, 172, 58, 190, 254, 87, 78, 62, 226, 20, 153, 190, 29, 6, 15, 190, 121, 216, 91, 190, 223, 218, 39, 190, 197, 144, 157, 62, 226, 165, 88, 190, 182, 122, 68, 61, 116, 137, 49, 190, 159, 193, 224, 62, 253, 138, 29, 189, 42, 175, 86, 190, 43, 117, 136, 190, 74, 201, 195, 62, 224, 118, 62, 62, 46, 89, 214, 190, 121, 187, 140, 190, 164, 88, 95, 190, 174, 36, 103, 62, 243, 136, 33, 191, 96, 239, 144, 190, 18, 176, 59, 188, 179, 74, 157, 190, 34, 214, 24, 62, 63, 189, 197, 62, 78, 56, 130, 61, 77, 142, 60, 189, 202, 127, 76, 62, 165, 237, 154, 62, 184, 213, 60, 62, 112, 192, 225, 61, 254, 190, 209, 62, 24, 126, 148, 62, 90, 229, 140, 190, 126, 20, 98, 62, 173, 179, 12, 62, 178, 234, 64, 62, 168, 107, 15, 63, 54, 57, 99, 61, 91, 24, 83, 189, 107, 73, 62, 61, 154, 45, 71, 62, 108, 17, 86, 62, 228, 20, 209, 60, 90, 135, 129, 62, 47, 148, 3, 62, 83, 185, 207, 60, 240, 111, 228, 190, 225, 111, 2, 62, 42, 63, 130, 189, 212, 147, 104, 61, 215, 87, 144, 190, 222, 246, 63, 190, 192, 87, 107, 191, 25, 54, 36, 191, 114, 7, 194, 62, 249, 223, 218, 61, 57, 249, 53, 191, 182, 169, 96, 61, 139, 132, 75, 60, 198, 189, 96, 189, 51, 247, 249, 61, 209, 128, 97, 62, 143, 112, 54, 189, 101, 17, 177, 60, 171, 163, 195, 62, 122, 135, 19, 190, 6, 180, 134, 62, 11, 62, 48, 189, 209, 240, 118, 191, 132, 35, 148, 61, 211, 130, 182, 188, 39, 117, 183, 61, 229, 194, 157, 190, 230, 61, 130, 61, 88, 31, 118, 62, 246, 129, 51, 189, 255, 34, 133, 190, 148, 109, 182, 60, 162, 70, 69, 62, 241, 61, 230, 62, 139, 230, 148, 61, 185, 76, 218, 61, 75, 60, 40, 62, 107, 6, 30, 62, 120, 9, 41, 62, 4, 1, 127, 61, 9, 115, 130, 191, 192, 189, 132, 189, 169, 163, 248, 190, 76, 177, 100, 190, 41, 75, 193, 189, 187, 211, 182, 189, 75, 167, 250, 190, 205, 157, 26, 62, 164, 37, 35, 61, 121, 254, 163, 62, 157, 27, 202, 189, 176, 140, 118, 61, 63, 184, 228, 190, 231, 114, 39, 62, 6, 125, 16, 62, 118, 110, 117, 190, 252, 150, 178, 189, 182, 216, 26, 62, 207, 103, 43, 62, 46, 146, 11, 62, 100, 172, 1, 61, 90, 127, 201, 190, 104, 79, 222, 189, 232, 159, 242, 188, 209, 29, 91, 191, 155, 144, 107, 62, 102, 19, 193, 188, 158, 134, 253, 61, 173, 24, 176, 61, 216, 18, 169, 189, 7, 13, 233, 61, 111, 83, 40, 190, 8, 176, 230, 187, 184, 57, 57, 190, 158, 13, 124, 189, 223, 188, 153, 189, 234, 81, 53, 189, 169, 177, 125, 189, 98, 119, 62, 62, 157, 207, 49, 190, 199, 32, 45, 190, 84, 250, 239, 60, 46, 217, 24, 188, 49, 21, 115, 62, 17, 105, 157, 59, 161, 130, 113, 62, 202, 76, 143, 62, 179, 198, 169, 190, 55, 223, 187, 189, 155, 28, 70, 62, 100, 30, 199, 190, 250, 249, 26, 62, 52, 118, 89, 62, 212, 253, 46, 62, 70, 183, 49, 190, 196, 227, 207, 190, 83, 239, 15, 62, 177, 120, 56, 62, 123, 110, 14, 62, 46, 142, 48, 62, 93, 191, 34, 190, 240, 8, 127, 189, 104, 218, 232, 187, 3, 110, 29, 189, 125, 157, 128, 190, 44, 117, 38, 61, 36, 36, 179, 187, 132, 248, 138, 189, 20, 29, 122, 189, 224, 197, 87, 61, 213, 228, 179, 189, 64, 162, 216, 61, 8, 82, 94, 62, 73, 170, 183, 189, 216, 122, 144, 62, 250, 10, 205, 62, 66, 250, 145, 62, 212, 214, 199, 61, 65, 100, 236, 190, 224, 59, 129, 189, 45, 168, 218, 189, 191, 185, 142, 62, 172, 132, 214, 189, 91, 12, 52, 188, 9, 151, 151, 62, 248, 14, 172, 62, 169, 74, 67, 189, 243, 192, 239, 190, 0, 209, 155, 186, 255, 71, 175, 62, 215, 146, 198, 61, 0, 4, 69, 62, 190, 91, 24, 62, 128, 69, 55, 189, 89, 172, 7, 62, 242, 65, 153, 62, 63, 166, 34, 191, 188, 134, 105, 188, 226, 95, 175, 189, 185, 159, 110, 62, 78, 211, 160, 190, 33, 60, 34, 189, 234, 247, 217, 190, 250, 224, 162, 188, 202, 202, 210, 61, 182, 104, 162, 189, 80, 12, 67, 61, 225, 174, 15, 62, 154, 90, 242, 61, 4, 105, 220, 61, 42, 156, 54, 191, 88, 65, 130, 62, 122, 214, 31, 189, 252, 159, 114, 60, 129, 100, 162, 190, 3, 165, 173, 189, 26, 102, 49, 189, 4, 63, 17, 189, 65, 101, 81, 189, 245, 4, 202, 61, 190, 81, 128, 189, 127, 223, 82, 62, 107, 91, 195, 61, 9, 135, 79, 61, 226, 33, 113, 62, 78, 1, 165, 59, 143, 44, 200, 58, 178, 198, 136, 60, 230, 225, 243, 189, 109, 26, 244, 189, 42, 4, 101, 190, 92, 145, 36, 60, 105, 1, 212, 61, 102, 114, 135, 189, 239, 88, 56, 190, 126, 241, 13, 190, 233, 109, 15, 191, 203, 30, 6, 190, 95, 52, 47, 190, 201, 201, 57, 190, 63, 200, 222, 188, 59, 190, 253, 190, 83, 169, 10, 191, 204, 157, 254, 61, 181, 27, 28, 61, 113, 219, 176, 190, 62, 62, 8, 60, 190, 149, 76, 190, 45, 142, 213, 61, 143, 54, 185, 190, 174, 127, 62, 62, 171, 100, 138, 62, 242, 55, 205, 187, 124, 154, 22, 190, 219, 250, 143, 61, 169, 10, 166, 189, 147, 78, 249, 189, 231, 129, 182, 61, 154, 127, 242, 61, 29, 146, 70, 62, 46, 123, 222, 61, 68, 179, 134, 189, 190, 90, 166, 61, 41, 162, 30, 189, 234, 82, 123, 62, 61, 151, 234, 60, 128, 154, 189, 60, 231, 215, 57, 59, 95, 234, 94, 190, 105, 183, 232, 61, 154, 36, 153, 62, 8, 60, 45, 62, 96, 200, 84, 62, 100, 18, 169, 189, 250, 127, 174, 190, 82, 13, 142, 190, 215, 141, 15, 190, 145, 29, 195, 61, 12, 58, 144, 190, 254, 199, 35, 62, 225, 208, 212, 188, 123, 196, 180, 61, 24, 50, 90, 61, 180, 77, 157, 190, 208, 253, 21, 190, 76, 170, 87, 61, 191, 255, 80, 62, 241, 26, 10, 189, 75, 223, 43, 190, 33, 53, 33, 62, 209, 179, 106, 62, 172, 211, 139, 62, 127, 69, 208, 190, 64, 43, 95, 62, 108, 195, 44, 189, 162, 158, 150, 189, 134, 108, 185, 188, 208, 210, 160, 190, 104, 165, 22, 190, 14, 4, 0, 62, 18, 123, 179, 60, 235, 22, 204, 189, 83, 116, 250, 60, 7, 110, 44, 191, 236, 254, 118, 58, 95, 168, 70, 191, 115, 125, 143, 61, 63, 126, 135, 190, 144, 72, 147, 62, 111, 146, 138, 190, 79, 130, 100, 189, 251, 108, 139, 188, 106, 98, 98, 61, 32, 105, 158, 190, 222, 169, 174, 62, 238, 184, 139, 62, 162, 146, 65, 62, 152, 100, 128, 61, 154, 232, 199, 58, 245, 106, 6, 190, 112, 128, 43, 62, 179, 95, 36, 62, 178, 171, 110, 61, 103, 29, 30, 62, 214, 110, 199, 61, 146, 3, 212, 189, 18, 193, 156, 189, 178, 125, 73, 62, 83, 115, 170, 62, 163, 175, 46, 62, 248, 53, 57, 62, 20, 175, 84, 190, 229, 145, 16, 190, 162, 95, 172, 190, 208, 207, 220, 61, 161, 126, 92, 191, 123, 117, 140, 190, 167, 48, 95, 191, 221, 107, 1, 191, 48, 139, 44, 63, 52, 144, 195, 61, 185, 87, 41, 191, 115, 250, 66, 190, 109, 24, 6, 61, 71, 133, 163, 189, 8, 242, 114, 191, 143, 57, 103, 190, 14, 63, 17, 61, 226, 88, 52, 61, 5, 137, 18, 190, 90, 223, 162, 190, 132, 78, 132, 190, 238, 155, 234, 62, 85, 96, 129, 62, 176, 88, 72, 62, 143, 254, 34, 59, 250, 199, 62, 62, 205, 134, 199, 190, 144, 106, 0, 62, 98, 84, 132, 191, 1, 162, 148, 190, 188, 97, 96, 62, 77, 138, 188, 60, 185, 201, 240, 190, 56, 110, 218, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 61, 221, 60, 125, 236, 24, 62, 21, 23, 62, 190, 80, 159, 141, 189, 209, 170, 9, 189, 157, 44, 37, 190, 105, 157, 171, 188, 214, 152, 174, 61, 146, 175, 43, 62, 191, 56, 249, 61, 200, 123, 74, 190, 4, 85, 35, 62, 195, 79, 139, 62, 233, 196, 231, 61, 250, 12, 21, 189, 244, 155, 45, 62, 223, 115, 3, 189, 55, 217, 157, 60, 1, 64, 169, 61, 199, 115, 94, 62, 151, 93, 235, 61, 232, 198, 139, 190, 25, 252, 112, 190, 54, 115, 38, 62, 135, 53, 129, 190, 41, 192, 7, 62, 154, 140, 223, 188, 2, 143, 112, 62, 143, 227, 159, 61, 81, 136, 147, 61, 117, 102, 244, 61, 250, 127, 155, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 214, 199, 190, 85, 201, 212, 62, 214, 175, 212, 190, 188, 136, 244, 189, 240, 244, 17, 62, 237, 24, 76, 61, 236, 47, 6, 189, 26, 30, 126, 62, 128, 245, 36, 191, 56, 39, 40, 190, 91, 66, 243, 61, 165, 238, 129, 190, 31, 30, 157, 62, 86, 130, 206, 189, 190, 133, 37, 189, 227, 104, 143, 62, 158, 81, 112, 189, 182, 48, 157, 190, 62, 244, 141, 61, 77, 229, 30, 191, 107, 81, 6, 191, 190, 186, 30, 63, 194, 41, 146, 190, 131, 92, 6, 63, 136, 174, 180, 62, 222, 112, 72, 62, 9, 102, 186, 62, 148, 108, 7, 61, 62, 210, 59, 190, 164, 227, 109, 62, 181, 219, 187, 190, 206, 164, 106, 191, 2, 206, 48, 190, 111, 215, 57, 190, 206, 205, 3, 62, 110, 142, 5, 60, 14, 121, 173, 190, 180, 13, 146, 61, 163, 44, 231, 61, 243, 230, 193, 188, 243, 158, 102, 62, 152, 100, 174, 190, 19, 199, 25, 190, 247, 106, 55, 59, 103, 72, 89, 190, 228, 154, 109, 60, 192, 153, 2, 62, 211, 209, 133, 62, 90, 121, 75, 61, 250, 186, 42, 61, 86, 131, 244, 189, 15, 206, 156, 61, 254, 215, 224, 61, 107, 10, 248, 61, 68, 166, 188, 188, 246, 170, 140, 190, 227, 246, 22, 62, 89, 158, 47, 62, 37, 8, 162, 61, 174, 177, 153, 190, 152, 11, 131, 190, 138, 58, 36, 190, 10, 52, 254, 189, 100, 38, 40, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 240, 101, 62, 30, 203, 0, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {222, 96, 50, 63, 77, 156, 123, 63, 49, 23, 36, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {220, 142, 250, 191, 38, 224, 38, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0023/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}