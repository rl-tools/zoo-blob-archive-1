// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 154, 52, 191, 63, 19, 140, 191, 87, 31, 9, 191, 232, 209, 230, 190, 104, 31, 144, 191, 225, 64, 107, 190, 107, 194, 24, 190, 12, 174, 180, 190, 220, 126, 53, 62, 226, 247, 133, 61, 111, 154, 252, 190, 187, 222, 85, 62, 68, 102, 13, 191, 198, 78, 253, 62, 121, 57, 45, 63, 221, 17, 32, 63, 187, 154, 125, 191, 39, 27, 137, 190, 42, 155, 24, 191, 183, 201, 54, 191, 139, 20, 155, 62, 204, 80, 114, 62, 192, 115, 167, 62, 13, 243, 179, 189, 224, 77, 189, 190, 20, 147, 35, 63, 32, 75, 12, 63, 249, 238, 117, 63, 144, 170, 29, 63, 5, 87, 194, 62, 89, 237, 17, 61, 216, 86, 165, 191, 143, 50, 166, 190, 195, 230, 149, 62, 157, 168, 145, 191, 192, 158, 117, 190, 51, 9, 86, 62, 14, 39, 22, 191, 118, 19, 90, 189, 57, 14, 11, 63, 162, 225, 18, 63, 206, 31, 65, 63, 6, 250, 160, 62, 82, 34, 175, 62, 149, 165, 1, 189, 234, 176, 52, 191, 152, 6, 16, 190, 219, 30, 116, 62, 42, 53, 47, 63, 204, 245, 144, 191, 194, 130, 52, 190, 233, 145, 199, 62, 157, 208, 172, 191, 83, 71, 95, 190, 206, 95, 165, 62, 12, 98, 43, 63, 116, 192, 25, 191, 227, 150, 105, 191, 239, 60, 113, 191, 44, 205, 146, 62, 107, 129, 23, 191, 49, 174, 57, 190, 246, 202, 254, 189, 139, 160, 66, 191, 190, 209, 194, 190, 68, 135, 74, 60, 34, 189, 242, 190, 39, 52, 201, 190, 12, 42, 37, 190, 68, 222, 50, 191, 19, 72, 169, 191, 190, 247, 217, 190, 246, 57, 177, 188, 28, 210, 157, 63, 78, 67, 174, 62, 35, 79, 12, 191, 134, 82, 71, 63, 56, 231, 209, 189, 66, 211, 34, 62, 149, 151, 123, 63, 229, 148, 192, 62, 236, 71, 76, 63, 83, 61, 38, 63, 116, 28, 44, 63, 26, 215, 186, 190, 17, 206, 199, 62, 101, 54, 195, 190, 77, 118, 129, 191, 79, 246, 143, 191, 204, 155, 184, 190, 72, 117, 76, 189, 21, 117, 53, 191, 119, 217, 255, 62, 175, 228, 11, 191, 2, 108, 117, 63, 231, 159, 91, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 16, 184, 190, 134, 63, 23, 63, 187, 201, 18, 191, 250, 50, 188, 62, 112, 7, 47, 191, 62, 86, 12, 191, 176, 35, 225, 190, 27, 124, 40, 63, 181, 157, 44, 191, 140, 179, 86, 191, 195, 180, 128, 61, 93, 44, 134, 60, 62, 191, 251, 59, 56, 195, 52, 190, 9, 118, 153, 62, 229, 241, 45, 63, 240, 86, 7, 190, 233, 52, 188, 60, 91, 165, 250, 189, 145, 140, 236, 61, 205, 221, 12, 63, 179, 60, 18, 63, 166, 108, 37, 63, 32, 210, 150, 61, 202, 143, 129, 189, 199, 19, 17, 63, 202, 46, 124, 189, 193, 185, 130, 61, 226, 80, 182, 190, 4, 210, 176, 62, 66, 21, 51, 190, 164, 24, 175, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 125, 58, 190, 221, 195, 65, 190, 200, 93, 67, 191, 20, 28, 65, 190, 250, 168, 233, 191, 71, 18, 63, 191, 242, 238, 47, 191, 36, 53, 109, 62, 233, 91, 122, 190, 91, 126, 63, 190, 18, 164, 245, 190, 87, 124, 201, 190, 82, 170, 143, 191, 139, 227, 18, 191, 15, 202, 167, 61, 113, 251, 174, 62, 183, 190, 20, 190, 72, 227, 182, 190, 54, 191, 89, 189, 229, 169, 83, 190, 86, 24, 173, 61, 5, 20, 193, 61, 165, 170, 157, 189, 161, 243, 248, 190, 18, 1, 39, 191, 169, 58, 223, 61, 73, 249, 129, 191, 115, 96, 202, 190, 176, 87, 185, 60, 143, 221, 75, 61, 211, 141, 28, 191, 6, 43, 176, 189, 180, 226, 228, 190, 247, 76, 218, 62, 22, 47, 169, 62, 147, 159, 106, 62, 94, 70, 110, 60, 193, 235, 17, 191, 204, 203, 37, 190, 59, 176, 87, 62, 159, 64, 19, 190, 9, 0, 34, 191, 218, 205, 101, 189, 3, 200, 109, 62, 210, 98, 92, 62, 185, 229, 101, 188, 154, 112, 60, 190, 167, 11, 239, 189, 170, 22, 148, 62, 216, 41, 155, 62, 160, 52, 181, 62, 58, 71, 151, 61, 176, 40, 148, 61, 217, 40, 181, 61, 50, 98, 83, 62, 229, 78, 207, 191, 105, 8, 189, 61, 134, 57, 126, 60, 5, 18, 160, 189, 114, 164, 231, 188, 14, 6, 100, 190, 246, 33, 116, 191, 202, 188, 60, 61, 132, 140, 69, 62, 250, 114, 7, 191, 44, 223, 64, 190, 201, 216, 62, 62, 2, 136, 226, 189, 137, 193, 163, 62, 99, 54, 225, 62, 139, 205, 166, 62, 38, 241, 116, 189, 134, 184, 144, 62, 191, 168, 34, 62, 71, 18, 150, 62, 59, 85, 167, 62, 123, 39, 61, 61, 55, 101, 243, 189, 167, 24, 147, 62, 23, 26, 39, 62, 4, 15, 133, 190, 27, 33, 212, 61, 255, 99, 236, 190, 10, 14, 139, 62, 86, 49, 20, 190, 158, 46, 255, 190, 72, 121, 18, 190, 91, 58, 49, 63, 141, 207, 13, 61, 49, 33, 4, 61, 251, 163, 215, 61, 102, 239, 173, 190, 216, 107, 109, 191, 27, 21, 52, 62, 239, 205, 25, 62, 1, 243, 137, 59, 111, 11, 158, 61, 3, 184, 32, 62, 131, 16, 176, 61, 34, 173, 95, 189, 153, 72, 42, 190, 101, 186, 153, 189, 245, 162, 214, 61, 234, 189, 113, 61, 15, 25, 249, 189, 101, 6, 141, 61, 98, 78, 139, 59, 217, 151, 154, 189, 20, 36, 14, 190, 41, 38, 53, 60, 73, 76, 5, 190, 228, 203, 138, 189, 121, 163, 143, 61, 219, 63, 49, 190, 65, 202, 15, 62, 178, 249, 75, 61, 119, 68, 24, 190, 164, 111, 175, 61, 114, 97, 72, 190, 31, 148, 63, 190, 161, 233, 138, 60, 188, 144, 46, 189, 120, 91, 62, 61, 96, 22, 32, 190, 80, 235, 139, 189, 208, 148, 160, 189, 154, 58, 10, 62, 252, 76, 30, 190, 63, 210, 130, 188, 178, 45, 179, 189, 211, 41, 133, 190, 195, 60, 146, 61, 96, 67, 142, 191, 216, 226, 181, 190, 76, 70, 126, 190, 201, 79, 158, 62, 175, 111, 116, 191, 221, 37, 0, 191, 97, 160, 13, 62, 25, 46, 186, 61, 56, 120, 124, 190, 238, 145, 24, 189, 4, 9, 160, 62, 55, 29, 175, 189, 71, 154, 114, 62, 191, 246, 67, 60, 182, 203, 1, 62, 117, 116, 12, 62, 158, 169, 145, 190, 239, 152, 5, 62, 96, 245, 98, 61, 222, 40, 226, 188, 246, 240, 21, 191, 209, 56, 200, 190, 223, 31, 75, 191, 187, 108, 208, 61, 31, 16, 172, 190, 77, 122, 26, 188, 187, 196, 121, 190, 159, 176, 11, 191, 19, 43, 173, 60, 42, 204, 68, 189, 92, 108, 173, 189, 240, 143, 238, 189, 53, 248, 137, 61, 206, 198, 33, 190, 149, 242, 151, 61, 169, 47, 78, 190, 188, 190, 53, 190, 254, 244, 8, 190, 107, 132, 156, 189, 235, 233, 114, 189, 38, 79, 14, 189, 253, 205, 194, 60, 129, 65, 62, 61, 57, 232, 131, 61, 254, 136, 160, 189, 230, 207, 9, 61, 2, 100, 206, 189, 137, 21, 45, 190, 39, 10, 194, 61, 205, 195, 174, 61, 175, 8, 139, 189, 26, 254, 239, 61, 57, 222, 40, 60, 115, 123, 95, 59, 98, 110, 172, 187, 149, 89, 139, 189, 200, 44, 48, 61, 55, 5, 93, 187, 199, 101, 195, 189, 160, 215, 135, 60, 77, 38, 17, 190, 61, 85, 240, 188, 196, 51, 103, 189, 79, 43, 203, 189, 113, 138, 11, 62, 178, 185, 195, 188, 145, 194, 162, 61, 192, 67, 10, 189, 66, 15, 139, 189, 255, 2, 147, 61, 225, 208, 2, 62, 18, 47, 1, 62, 253, 218, 19, 190, 122, 17, 7, 190, 229, 6, 208, 189, 202, 18, 110, 189, 16, 2, 48, 188, 146, 64, 158, 189, 158, 122, 99, 61, 138, 122, 32, 190, 155, 236, 135, 60, 104, 37, 145, 61, 42, 234, 40, 190, 250, 45, 0, 189, 37, 54, 9, 62, 221, 235, 55, 61, 41, 201, 76, 60, 202, 93, 137, 61, 75, 232, 5, 61, 193, 89, 29, 190, 103, 216, 179, 189, 24, 72, 52, 190, 211, 204, 50, 188, 241, 66, 207, 61, 134, 45, 134, 62, 156, 76, 39, 189, 197, 103, 70, 61, 100, 164, 149, 190, 90, 79, 136, 190, 101, 87, 87, 190, 181, 127, 23, 62, 1, 157, 123, 191, 49, 34, 134, 188, 190, 17, 209, 61, 58, 69, 169, 188, 188, 47, 49, 190, 203, 61, 5, 190, 169, 126, 126, 62, 227, 186, 47, 62, 174, 63, 34, 188, 174, 188, 137, 62, 22, 95, 236, 189, 52, 152, 8, 62, 203, 200, 60, 62, 219, 59, 179, 61, 207, 115, 40, 191, 51, 247, 207, 189, 11, 149, 0, 190, 15, 201, 12, 62, 119, 15, 140, 189, 80, 59, 10, 62, 51, 145, 93, 190, 51, 128, 25, 62, 235, 198, 192, 62, 75, 246, 192, 190, 127, 37, 22, 190, 121, 208, 161, 190, 142, 39, 116, 62, 135, 163, 131, 191, 165, 122, 95, 191, 74, 50, 171, 62, 202, 106, 24, 62, 27, 25, 48, 191, 66, 223, 38, 61, 232, 123, 162, 190, 186, 209, 236, 189, 254, 67, 150, 189, 195, 243, 201, 62, 20, 103, 201, 62, 168, 248, 36, 62, 55, 49, 210, 190, 132, 180, 221, 190, 67, 84, 137, 190, 119, 62, 198, 189, 223, 192, 202, 58, 162, 72, 22, 189, 199, 213, 146, 61, 43, 240, 216, 61, 237, 22, 142, 189, 133, 215, 26, 62, 203, 7, 52, 59, 197, 205, 174, 62, 73, 92, 24, 62, 131, 135, 111, 62, 94, 44, 53, 189, 28, 110, 253, 190, 8, 220, 31, 61, 171, 70, 178, 191, 74, 191, 1, 62, 232, 165, 111, 62, 2, 223, 204, 61, 49, 232, 166, 191, 135, 72, 142, 187, 33, 167, 128, 62, 88, 97, 156, 188, 249, 49, 100, 190, 187, 255, 228, 188, 117, 104, 7, 60, 164, 164, 244, 189, 172, 140, 30, 62, 116, 16, 167, 62, 52, 211, 232, 61, 209, 218, 34, 62, 116, 235, 106, 61, 136, 160, 118, 62, 39, 153, 169, 61, 250, 93, 133, 190, 142, 247, 12, 191, 18, 122, 177, 190, 108, 104, 132, 191, 234, 153, 141, 61, 94, 192, 247, 190, 84, 199, 194, 60, 165, 97, 82, 62, 252, 215, 253, 189, 24, 138, 6, 191, 140, 37, 3, 61, 254, 29, 3, 190, 168, 195, 228, 189, 217, 201, 11, 60, 60, 9, 158, 60, 5, 6, 213, 61, 222, 171, 209, 189, 120, 173, 127, 61, 89, 93, 217, 61, 13, 2, 172, 189, 30, 115, 10, 62, 204, 83, 146, 61, 94, 237, 48, 190, 96, 217, 164, 61, 91, 53, 2, 190, 10, 58, 33, 190, 238, 75, 24, 190, 101, 79, 143, 189, 167, 110, 66, 189, 154, 155, 49, 62, 142, 75, 79, 185, 201, 79, 62, 190, 98, 60, 59, 190, 99, 99, 247, 61, 253, 147, 164, 189, 212, 75, 147, 61, 118, 82, 247, 61, 32, 69, 212, 61, 40, 34, 23, 189, 10, 126, 133, 189, 53, 214, 52, 190, 248, 119, 70, 61, 13, 96, 22, 189, 85, 113, 20, 62, 223, 54, 58, 190, 116, 131, 19, 190, 41, 198, 250, 190, 40, 224, 55, 62, 1, 251, 42, 191, 216, 204, 85, 191, 207, 41, 39, 190, 44, 30, 192, 61, 204, 229, 79, 190, 14, 120, 151, 60, 209, 24, 145, 190, 3, 106, 21, 190, 83, 220, 254, 59, 246, 219, 192, 62, 157, 151, 128, 62, 200, 87, 125, 62, 73, 135, 149, 190, 183, 236, 121, 189, 27, 143, 77, 189, 73, 41, 153, 60, 190, 15, 91, 188, 181, 127, 179, 61, 4, 80, 20, 62, 18, 212, 21, 187, 149, 215, 172, 190, 197, 160, 137, 189, 6, 233, 165, 60, 150, 197, 69, 62, 103, 1, 120, 61, 185, 198, 9, 189, 235, 42, 48, 190, 192, 2, 248, 190, 49, 75, 135, 190, 21, 63, 164, 188, 152, 107, 160, 62, 58, 57, 48, 62, 126, 227, 48, 62, 229, 209, 17, 190, 66, 88, 220, 190, 15, 224, 136, 62, 45, 81, 165, 188, 53, 77, 243, 190, 95, 214, 125, 190, 247, 152, 33, 61, 220, 190, 73, 62, 66, 40, 190, 188, 14, 191, 65, 62, 209, 174, 127, 189, 172, 117, 209, 60, 159, 3, 162, 189, 174, 188, 137, 62, 110, 180, 28, 190, 45, 84, 26, 62, 95, 255, 135, 187, 74, 176, 103, 62, 2, 139, 209, 190, 155, 158, 240, 60, 135, 28, 75, 190, 130, 174, 42, 62, 253, 2, 199, 189, 34, 104, 119, 189, 249, 87, 154, 190, 100, 116, 219, 61, 36, 6, 139, 62, 198, 201, 93, 183, 147, 7, 97, 61, 164, 135, 19, 62, 6, 93, 4, 190, 40, 147, 108, 189, 167, 119, 243, 61, 188, 179, 206, 57, 58, 161, 9, 190, 182, 36, 182, 189, 126, 150, 101, 61, 187, 102, 69, 190, 117, 166, 58, 61, 71, 115, 199, 61, 197, 241, 24, 190, 160, 101, 131, 189, 116, 49, 1, 190, 118, 210, 9, 62, 2, 23, 72, 190, 40, 120, 131, 188, 217, 232, 67, 190, 81, 242, 87, 61, 229, 27, 69, 190, 254, 38, 169, 189, 113, 91, 230, 61, 109, 148, 211, 189, 147, 141, 98, 189, 148, 134, 3, 190, 225, 115, 202, 189, 146, 76, 72, 190, 84, 232, 210, 60, 152, 6, 16, 190, 63, 8, 106, 60, 241, 223, 135, 189, 7, 224, 80, 190, 118, 241, 13, 190, 154, 53, 143, 61, 103, 204, 54, 190, 137, 208, 209, 188, 126, 136, 241, 61, 159, 60, 226, 189, 196, 221, 3, 190, 197, 3, 27, 190, 242, 73, 24, 62, 237, 81, 5, 61, 87, 219, 137, 189, 114, 196, 224, 188, 7, 88, 220, 188, 111, 239, 236, 189, 140, 206, 194, 189, 56, 236, 221, 61, 173, 114, 17, 190, 177, 41, 130, 61, 241, 107, 242, 61, 150, 132, 218, 61, 167, 8, 221, 189, 223, 141, 48, 190, 225, 192, 59, 190, 27, 237, 187, 61, 156, 6, 110, 187, 196, 236, 9, 189, 186, 87, 186, 189, 228, 62, 0, 61, 142, 77, 22, 189, 27, 102, 200, 60, 160, 202, 31, 59, 171, 110, 196, 62, 233, 247, 119, 62, 223, 40, 136, 189, 80, 21, 131, 62, 141, 142, 151, 62, 132, 166, 37, 62, 245, 225, 48, 189, 234, 181, 21, 190, 147, 84, 172, 191, 12, 172, 136, 61, 128, 54, 99, 189, 96, 104, 34, 62, 152, 191, 74, 190, 241, 115, 144, 190, 248, 193, 7, 62, 212, 155, 147, 62, 230, 195, 44, 61, 42, 191, 192, 189, 192, 25, 147, 62, 123, 249, 0, 62, 246, 138, 18, 62, 71, 93, 124, 62, 122, 186, 149, 190, 93, 124, 31, 190, 253, 167, 33, 190, 37, 183, 233, 189, 219, 158, 146, 190, 40, 195, 226, 61, 158, 96, 106, 190, 108, 63, 58, 62, 184, 25, 133, 190, 58, 4, 217, 188, 122, 185, 160, 188, 121, 86, 188, 60, 206, 107, 9, 189, 123, 123, 225, 189, 142, 201, 129, 61, 147, 119, 190, 61, 33, 217, 210, 188, 15, 214, 27, 61, 9, 114, 15, 190, 60, 31, 173, 189, 212, 26, 228, 60, 91, 12, 50, 189, 177, 88, 14, 190, 39, 156, 214, 189, 157, 115, 15, 190, 43, 165, 29, 190, 29, 107, 49, 190, 111, 86, 50, 60, 130, 20, 252, 60, 130, 34, 209, 189, 251, 142, 15, 190, 59, 119, 185, 61, 143, 121, 249, 189, 202, 2, 209, 189, 7, 106, 217, 189, 173, 42, 117, 189, 126, 171, 1, 190, 41, 69, 241, 61, 140, 236, 62, 190, 207, 203, 175, 188, 240, 101, 121, 189, 62, 187, 25, 190, 89, 206, 248, 61, 104, 127, 129, 190, 79, 94, 38, 62, 148, 72, 186, 190, 40, 85, 83, 62, 118, 62, 141, 62, 156, 57, 47, 190, 226, 115, 153, 190, 158, 191, 6, 62, 212, 143, 118, 61, 7, 29, 242, 189, 165, 166, 182, 61, 130, 123, 139, 62, 180, 175, 240, 189, 157, 163, 151, 189, 77, 92, 18, 61, 214, 247, 25, 190, 205, 149, 160, 190, 157, 60, 21, 62, 131, 22, 145, 190, 48, 12, 0, 190, 237, 113, 144, 188, 162, 200, 198, 62, 137, 7, 206, 60, 231, 169, 245, 189, 49, 164, 2, 190, 225, 33, 48, 62, 254, 54, 161, 190, 141, 76, 63, 62, 195, 48, 130, 189, 234, 176, 151, 190, 24, 198, 216, 189, 55, 206, 16, 62, 164, 144, 122, 189, 160, 198, 193, 61, 164, 2, 29, 188, 114, 22, 231, 189, 50, 56, 202, 190, 159, 49, 203, 61, 243, 91, 134, 61, 225, 212, 197, 190, 164, 21, 202, 61, 102, 96, 24, 62, 32, 206, 19, 190, 80, 221, 131, 189, 133, 15, 61, 187, 40, 18, 164, 62, 253, 127, 32, 189, 140, 11, 31, 62, 92, 72, 192, 190, 70, 11, 3, 190, 45, 251, 116, 62, 210, 243, 167, 62, 207, 253, 37, 62, 120, 128, 155, 190, 56, 40, 1, 62, 118, 181, 41, 190, 51, 96, 88, 60, 105, 143, 56, 190, 154, 212, 134, 190, 223, 99, 91, 188, 23, 19, 12, 189, 227, 64, 169, 62, 143, 241, 193, 190, 104, 96, 71, 62, 53, 74, 200, 190, 182, 201, 209, 189, 106, 177, 160, 191, 172, 150, 64, 191, 239, 110, 9, 63, 124, 133, 196, 61, 187, 105, 101, 191, 58, 45, 177, 62, 169, 118, 187, 190, 28, 239, 212, 190, 29, 43, 172, 191, 72, 105, 46, 61, 136, 35, 248, 61, 70, 164, 162, 59, 131, 42, 219, 190, 19, 62, 145, 190, 184, 99, 154, 61, 8, 117, 91, 61, 128, 220, 142, 60, 127, 193, 206, 61, 118, 3, 85, 62, 179, 32, 52, 61, 227, 240, 3, 191, 135, 13, 91, 62, 23, 145, 117, 191, 229, 25, 254, 61, 191, 98, 216, 60, 69, 49, 85, 189, 128, 121, 230, 190, 120, 67, 98, 191, 93, 251, 241, 62, 132, 213, 177, 191, 252, 237, 196, 59, 53, 228, 196, 61, 237, 137, 104, 189, 10, 78, 31, 191, 41, 19, 19, 62, 225, 162, 186, 62, 198, 11, 75, 60, 224, 20, 185, 62, 206, 240, 73, 62, 125, 111, 1, 191, 77, 139, 19, 62, 106, 45, 145, 62, 20, 162, 210, 62, 164, 99, 190, 60, 74, 252, 177, 61, 170, 34, 1, 191, 93, 68, 69, 62, 67, 115, 81, 190, 190, 67, 175, 190, 189, 214, 29, 191, 4, 197, 144, 190, 77, 138, 28, 63, 86, 31, 226, 189, 207, 144, 178, 189, 145, 49, 75, 61, 146, 16, 191, 62, 168, 64, 24, 62, 147, 221, 189, 61, 123, 30, 222, 61, 236, 21, 141, 190, 241, 253, 217, 188, 143, 21, 246, 190, 31, 66, 148, 190, 26, 146, 132, 190, 53, 78, 147, 190, 198, 71, 11, 63, 77, 7, 239, 190, 128, 57, 252, 61, 63, 25, 154, 190, 130, 253, 44, 63, 182, 173, 72, 190, 242, 241, 229, 190, 18, 254, 148, 190, 225, 229, 189, 62, 95, 215, 88, 62, 252, 53, 62, 191, 13, 150, 145, 191, 142, 147, 32, 191, 39, 172, 33, 62, 117, 231, 120, 191, 160, 213, 137, 190, 72, 223, 142, 190, 9, 171, 187, 190, 115, 7, 74, 189, 194, 114, 4, 63, 234, 42, 114, 62, 114, 33, 163, 58, 64, 218, 123, 62, 105, 189, 165, 62, 40, 95, 121, 60, 202, 1, 98, 61, 39, 45, 234, 62, 236, 108, 4, 63, 6, 228, 37, 191, 96, 97, 144, 62, 121, 253, 240, 61, 135, 227, 159, 62, 182, 73, 117, 63, 247, 84, 60, 62, 161, 223, 145, 189, 124, 155, 70, 62, 190, 197, 24, 62, 89, 116, 15, 63, 160, 84, 173, 62, 85, 238, 122, 62, 3, 121, 18, 62, 166, 145, 190, 188, 196, 236, 160, 190, 198, 93, 164, 62, 141, 251, 12, 62, 156, 138, 252, 61, 191, 102, 60, 190, 40, 159, 105, 190, 101, 72, 97, 191, 37, 4, 84, 191, 117, 238, 73, 63, 180, 208, 29, 62, 17, 22, 183, 191, 160, 65, 148, 61, 196, 235, 44, 189, 228, 37, 28, 62, 62, 221, 243, 62, 34, 43, 147, 62, 98, 149, 156, 61, 46, 120, 93, 59, 162, 5, 3, 63, 191, 41, 116, 189, 71, 220, 133, 62, 255, 23, 141, 189, 222, 87, 84, 191, 160, 114, 36, 62, 89, 223, 5, 59, 254, 50, 151, 185, 208, 111, 135, 191, 99, 42, 171, 61, 142, 151, 121, 62, 108, 63, 9, 189, 4, 203, 146, 190, 152, 246, 168, 61, 91, 81, 85, 62, 181, 102, 245, 62, 215, 39, 224, 61, 161, 22, 63, 62, 136, 31, 139, 62, 249, 156, 44, 62, 229, 4, 97, 62, 20, 72, 195, 61, 213, 170, 210, 191, 162, 101, 113, 190, 232, 63, 40, 191, 14, 1, 149, 190, 166, 232, 199, 189, 237, 1, 203, 60, 135, 212, 104, 191, 230, 19, 84, 62, 3, 121, 254, 189, 154, 225, 180, 62, 167, 117, 184, 189, 181, 234, 57, 61, 151, 52, 8, 191, 231, 114, 39, 62, 206, 113, 179, 62, 54, 64, 117, 190, 118, 80, 75, 190, 182, 216, 26, 62, 207, 103, 43, 62, 42, 194, 34, 62, 104, 46, 152, 61, 22, 1, 188, 190, 104, 79, 222, 189, 37, 149, 44, 189, 37, 81, 132, 191, 126, 81, 118, 62, 196, 72, 207, 60, 41, 192, 174, 61, 78, 254, 53, 190, 132, 24, 75, 190, 144, 41, 205, 61, 144, 1, 126, 190, 239, 129, 74, 60, 24, 83, 134, 190, 24, 231, 94, 190, 223, 188, 153, 189, 122, 12, 126, 189, 250, 208, 194, 189, 176, 186, 128, 62, 157, 207, 49, 190, 195, 5, 38, 191, 188, 187, 255, 190, 77, 9, 168, 61, 205, 221, 146, 61, 117, 83, 205, 189, 151, 248, 86, 62, 248, 37, 25, 63, 137, 209, 225, 190, 9, 93, 194, 189, 87, 191, 61, 62, 199, 223, 62, 191, 248, 64, 155, 62, 209, 215, 84, 62, 160, 206, 134, 61, 29, 169, 140, 190, 141, 48, 211, 190, 220, 42, 132, 60, 42, 196, 19, 62, 235, 17, 37, 62, 199, 125, 33, 62, 76, 238, 129, 190, 97, 7, 28, 189, 107, 249, 101, 190, 116, 135, 233, 189, 147, 13, 99, 191, 211, 41, 200, 61, 102, 219, 133, 62, 52, 176, 222, 189, 81, 130, 51, 190, 130, 12, 106, 62, 135, 82, 76, 191, 188, 76, 217, 61, 155, 17, 226, 62, 166, 57, 214, 190, 1, 140, 200, 62, 55, 52, 218, 62, 78, 204, 148, 62, 118, 225, 134, 61, 59, 167, 146, 190, 184, 157, 180, 189, 77, 134, 194, 188, 51, 255, 108, 62, 149, 82, 45, 190, 175, 186, 54, 60, 12, 46, 148, 62, 244, 226, 162, 62, 251, 100, 32, 189, 27, 156, 177, 190, 126, 221, 231, 189, 12, 137, 173, 62, 78, 184, 233, 61, 30, 75, 155, 62, 197, 222, 11, 62, 0, 75, 104, 189, 67, 144, 44, 61, 226, 191, 159, 62, 188, 55, 172, 191, 45, 67, 156, 60, 20, 195, 146, 61, 186, 201, 127, 62, 231, 130, 142, 190, 49, 73, 57, 61, 132, 147, 125, 191, 164, 79, 196, 187, 69, 191, 223, 61, 105, 122, 108, 61, 32, 101, 148, 61, 81, 28, 3, 62, 93, 7, 247, 61, 104, 162, 20, 62, 144, 137, 26, 191, 71, 89, 161, 62, 202, 171, 211, 61, 120, 142, 2, 61, 244, 209, 33, 191, 103, 226, 210, 187, 94, 184, 92, 60, 253, 5, 122, 189, 118, 67, 167, 189, 151, 157, 143, 62, 143, 219, 231, 188, 35, 65, 108, 62, 221, 73, 255, 61, 232, 179, 187, 62, 70, 22, 147, 62, 102, 181, 144, 61, 186, 219, 162, 61, 220, 104, 202, 61, 120, 134, 170, 190, 184, 217, 158, 189, 82, 245, 66, 190, 117, 46, 94, 61, 163, 108, 171, 61, 243, 255, 248, 60, 129, 238, 18, 190, 204, 76, 201, 189, 10, 224, 20, 191, 12, 237, 111, 189, 66, 139, 20, 190, 137, 142, 151, 190, 205, 130, 46, 61, 235, 36, 47, 191, 68, 13, 120, 191, 106, 66, 65, 60, 212, 131, 172, 60, 222, 70, 5, 191, 146, 143, 188, 189, 247, 16, 151, 190, 38, 56, 246, 61, 20, 71, 53, 190, 168, 209, 144, 62, 183, 47, 97, 62, 225, 57, 41, 62, 21, 105, 170, 189, 6, 13, 195, 61, 131, 31, 89, 189, 179, 245, 54, 190, 40, 184, 143, 60, 94, 177, 177, 188, 25, 218, 100, 62, 210, 122, 148, 189, 167, 168, 155, 190, 201, 198, 86, 61, 53, 169, 79, 189, 105, 65, 143, 62, 203, 253, 134, 60, 29, 91, 226, 189, 178, 111, 9, 62, 106, 173, 38, 191, 235, 187, 43, 188, 141, 167, 175, 62, 92, 51, 229, 61, 1, 120, 56, 62, 16, 231, 194, 189, 1, 76, 179, 190, 132, 94, 161, 190, 2, 239, 32, 190, 140, 126, 140, 61, 122, 96, 254, 190, 124, 188, 232, 61, 69, 178, 235, 189, 144, 141, 172, 187, 119, 184, 32, 61, 111, 113, 156, 190, 255, 48, 47, 190, 137, 100, 183, 188, 10, 145, 5, 62, 87, 190, 202, 188, 146, 123, 60, 190, 203, 50, 182, 61, 216, 190, 93, 62, 226, 96, 121, 62, 191, 114, 31, 191, 134, 40, 53, 62, 223, 134, 141, 189, 240, 253, 198, 189, 206, 244, 212, 188, 142, 192, 198, 190, 254, 6, 206, 190, 185, 101, 15, 62, 56, 151, 219, 188, 33, 55, 66, 190, 249, 90, 30, 62, 5, 158, 66, 191, 236, 128, 98, 61, 166, 126, 90, 191, 133, 138, 230, 61, 34, 170, 162, 190, 8, 119, 86, 62, 113, 234, 125, 190, 42, 221, 26, 190, 220, 62, 202, 60, 220, 34, 14, 62, 243, 37, 197, 189, 106, 200, 194, 62, 242, 217, 19, 62, 180, 125, 7, 63, 47, 139, 31, 62, 215, 54, 198, 61, 250, 24, 149, 190, 248, 201, 218, 62, 208, 29, 77, 62, 3, 108, 99, 62, 207, 34, 69, 62, 198, 158, 25, 62, 159, 15, 54, 190, 51, 75, 225, 189, 109, 60, 81, 62, 135, 64, 161, 62, 78, 163, 56, 189, 244, 207, 92, 62, 234, 109, 144, 190, 238, 64, 30, 190, 253, 60, 180, 190, 54, 45, 181, 61, 244, 15, 209, 190, 151, 209, 7, 190, 38, 36, 79, 191, 150, 28, 7, 191, 224, 87, 126, 63, 161, 192, 146, 62, 125, 195, 54, 191, 74, 214, 199, 190, 178, 162, 118, 59, 86, 136, 75, 188, 55, 219, 92, 191, 15, 62, 251, 190, 42, 89, 107, 62, 224, 187, 160, 62, 16, 191, 131, 188, 35, 139, 130, 190, 64, 50, 128, 189, 20, 67, 86, 63, 140, 152, 160, 62, 84, 74, 164, 62, 229, 170, 254, 61, 148, 60, 81, 62, 151, 178, 221, 190, 206, 90, 73, 62, 137, 194, 128, 191, 147, 33, 46, 190, 75, 168, 115, 62, 192, 154, 154, 60, 213, 40, 20, 188, 226, 49, 238, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 125, 136, 61, 46, 229, 100, 62, 42, 235, 203, 190, 56, 20, 158, 189, 128, 229, 53, 189, 120, 227, 43, 190, 105, 157, 171, 188, 175, 148, 86, 61, 62, 191, 39, 62, 180, 178, 204, 61, 200, 123, 74, 190, 255, 208, 33, 62, 159, 63, 155, 62, 76, 241, 238, 61, 250, 12, 21, 189, 251, 178, 230, 61, 251, 23, 91, 189, 104, 41, 77, 189, 49, 38, 124, 61, 144, 11, 96, 62, 113, 106, 81, 61, 127, 120, 118, 190, 234, 159, 168, 190, 253, 105, 81, 62, 106, 35, 232, 190, 149, 19, 172, 61, 179, 97, 226, 60, 173, 101, 176, 62, 14, 143, 204, 61, 238, 4, 125, 61, 245, 149, 219, 61, 157, 37, 0, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 198, 74, 191, 46, 95, 225, 62, 186, 211, 2, 191, 134, 138, 215, 189, 140, 141, 11, 61, 56, 147, 31, 61, 236, 47, 6, 189, 59, 88, 58, 62, 87, 71, 16, 191, 188, 50, 10, 190, 91, 66, 243, 61, 137, 193, 73, 190, 49, 163, 105, 62, 98, 230, 189, 189, 190, 133, 37, 189, 153, 72, 211, 62, 43, 214, 130, 189, 149, 90, 16, 190, 143, 24, 239, 189, 50, 120, 71, 191, 12, 157, 231, 190, 100, 28, 134, 63, 31, 213, 1, 191, 76, 155, 37, 63, 220, 242, 47, 63, 188, 247, 106, 63, 149, 45, 123, 62, 87, 135, 0, 61, 206, 166, 55, 190, 20, 131, 212, 61, 216, 84, 178, 190, 42, 144, 138, 191, 201, 246, 120, 189, 178, 121, 109, 190, 5, 172, 130, 61, 95, 50, 31, 60, 29, 131, 2, 191, 212, 102, 143, 61, 163, 44, 231, 61, 32, 107, 159, 189, 9, 117, 131, 62, 2, 144, 249, 190, 19, 199, 25, 190, 194, 77, 86, 189, 139, 237, 191, 190, 19, 234, 214, 60, 192, 153, 2, 62, 7, 95, 130, 62, 158, 1, 183, 60, 39, 158, 142, 61, 198, 143, 84, 190, 119, 187, 146, 62, 5, 162, 101, 59, 149, 109, 191, 61, 180, 2, 13, 61, 173, 35, 83, 190, 36, 149, 129, 189, 72, 210, 178, 62, 82, 241, 23, 62, 242, 169, 253, 190, 100, 186, 165, 190, 104, 81, 225, 186, 55, 27, 77, 190, 248, 154, 141, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 220, 135, 62, 185, 203, 168, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {76, 91, 17, 64, 142, 160, 167, 191, 97, 47, 59, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {167, 114, 131, 62, 96, 19, 44, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0023/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}