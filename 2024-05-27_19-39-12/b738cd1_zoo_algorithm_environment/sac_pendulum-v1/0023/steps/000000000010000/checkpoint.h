// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 59, 235, 190, 183, 179, 101, 191, 185, 33, 24, 191, 148, 157, 234, 190, 2, 102, 130, 191, 152, 159, 107, 190, 196, 214, 106, 61, 235, 116, 26, 191, 170, 55, 47, 62, 95, 215, 175, 62, 103, 87, 84, 190, 239, 58, 50, 62, 84, 109, 254, 190, 214, 83, 36, 63, 123, 39, 30, 63, 64, 176, 27, 63, 118, 141, 92, 191, 87, 252, 128, 190, 26, 190, 238, 190, 57, 219, 53, 191, 96, 196, 141, 62, 28, 22, 150, 62, 88, 24, 214, 62, 106, 125, 233, 189, 34, 193, 178, 190, 88, 164, 85, 63, 184, 24, 7, 63, 126, 25, 59, 63, 146, 168, 11, 63, 2, 128, 168, 62, 186, 247, 215, 61, 105, 61, 118, 191, 206, 241, 167, 190, 29, 39, 182, 62, 220, 44, 122, 191, 244, 228, 130, 190, 110, 148, 66, 62, 127, 83, 37, 191, 31, 211, 146, 61, 225, 150, 26, 63, 105, 207, 43, 63, 78, 56, 39, 63, 183, 102, 172, 62, 50, 204, 18, 63, 232, 200, 45, 190, 162, 80, 67, 191, 81, 23, 6, 60, 229, 111, 122, 61, 124, 78, 51, 63, 158, 37, 141, 191, 6, 4, 60, 190, 35, 100, 230, 62, 130, 50, 157, 191, 91, 94, 125, 190, 208, 163, 232, 62, 0, 192, 181, 62, 3, 134, 237, 190, 228, 234, 16, 191, 92, 170, 77, 191, 80, 244, 75, 62, 188, 135, 10, 191, 9, 183, 31, 190, 184, 205, 220, 188, 187, 244, 71, 191, 233, 188, 149, 190, 81, 219, 0, 59, 78, 193, 205, 190, 99, 2, 146, 190, 3, 27, 21, 190, 246, 40, 248, 190, 98, 23, 147, 191, 167, 190, 142, 190, 115, 16, 21, 62, 162, 111, 100, 63, 163, 179, 205, 62, 230, 90, 19, 191, 10, 18, 243, 62, 52, 196, 74, 190, 255, 37, 26, 62, 14, 62, 56, 63, 205, 226, 250, 62, 127, 217, 84, 63, 85, 5, 61, 63, 123, 190, 24, 63, 139, 167, 131, 190, 136, 146, 19, 63, 254, 127, 227, 190, 158, 67, 12, 191, 206, 202, 121, 191, 208, 207, 235, 190, 153, 87, 105, 190, 166, 54, 237, 190, 158, 109, 48, 63, 222, 214, 241, 190, 167, 252, 98, 63, 224, 94, 63, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {223, 40, 157, 190, 128, 32, 15, 63, 190, 45, 200, 190, 205, 245, 38, 63, 100, 63, 5, 191, 102, 171, 13, 191, 44, 107, 205, 190, 104, 26, 66, 63, 46, 95, 230, 190, 98, 222, 106, 191, 205, 230, 19, 62, 153, 70, 122, 61, 213, 66, 27, 189, 150, 111, 174, 189, 171, 21, 171, 62, 119, 231, 207, 62, 91, 177, 3, 190, 191, 163, 10, 61, 142, 248, 83, 61, 244, 40, 128, 189, 60, 226, 20, 63, 161, 177, 2, 63, 9, 192, 47, 63, 103, 121, 57, 61, 61, 8, 139, 61, 91, 134, 12, 63, 111, 176, 158, 188, 254, 48, 2, 62, 236, 210, 117, 190, 112, 210, 191, 62, 37, 98, 144, 190, 159, 192, 142, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 204, 119, 189, 159, 243, 34, 188, 200, 93, 67, 191, 197, 133, 69, 190, 202, 101, 207, 191, 22, 99, 18, 191, 163, 65, 41, 191, 229, 199, 107, 62, 181, 187, 128, 190, 91, 126, 63, 190, 158, 194, 38, 190, 195, 253, 65, 190, 243, 79, 54, 191, 4, 144, 190, 190, 138, 233, 177, 61, 178, 112, 181, 61, 179, 116, 2, 189, 237, 99, 250, 189, 160, 178, 70, 189, 255, 187, 140, 190, 89, 133, 11, 62, 240, 176, 2, 189, 60, 37, 130, 189, 205, 58, 238, 189, 120, 178, 10, 190, 210, 118, 29, 62, 148, 115, 10, 191, 166, 83, 134, 190, 46, 214, 167, 61, 96, 189, 72, 62, 178, 26, 31, 191, 73, 133, 89, 61, 135, 102, 135, 189, 199, 155, 160, 62, 14, 161, 180, 62, 8, 156, 117, 62, 192, 52, 138, 61, 137, 142, 40, 191, 122, 183, 41, 190, 86, 139, 15, 62, 179, 144, 99, 189, 235, 8, 226, 190, 101, 158, 76, 189, 58, 105, 127, 62, 1, 21, 133, 62, 132, 23, 10, 61, 52, 20, 140, 190, 49, 49, 50, 189, 216, 217, 148, 62, 220, 154, 153, 62, 248, 205, 91, 62, 55, 216, 199, 60, 190, 125, 154, 59, 50, 132, 174, 61, 129, 142, 48, 62, 4, 35, 139, 191, 245, 74, 117, 61, 117, 196, 8, 190, 116, 189, 132, 189, 197, 5, 211, 188, 119, 105, 217, 190, 209, 164, 222, 190, 228, 212, 49, 61, 251, 202, 70, 62, 100, 94, 195, 190, 250, 94, 151, 59, 108, 96, 42, 62, 254, 194, 186, 60, 25, 146, 158, 62, 27, 10, 106, 62, 164, 47, 170, 62, 162, 89, 45, 61, 80, 131, 119, 62, 72, 229, 65, 62, 176, 180, 242, 61, 143, 171, 93, 62, 2, 62, 65, 62, 119, 95, 207, 188, 114, 174, 138, 62, 217, 156, 44, 62, 238, 182, 94, 190, 127, 179, 185, 61, 151, 197, 88, 190, 1, 85, 148, 62, 190, 99, 42, 189, 204, 36, 237, 190, 240, 135, 49, 61, 84, 178, 249, 62, 57, 84, 147, 187, 47, 242, 40, 62, 254, 174, 7, 62, 72, 194, 80, 190, 110, 126, 243, 190, 225, 192, 149, 188, 150, 123, 92, 62, 39, 41, 213, 189, 167, 204, 171, 61, 104, 154, 34, 62, 131, 16, 176, 61, 107, 234, 94, 189, 153, 72, 42, 190, 216, 130, 149, 189, 245, 162, 214, 61, 199, 49, 133, 61, 15, 25, 249, 189, 101, 6, 141, 61, 125, 241, 226, 59, 148, 159, 148, 189, 40, 239, 13, 190, 41, 38, 53, 60, 105, 143, 252, 189, 228, 203, 138, 189, 183, 70, 145, 61, 247, 53, 47, 190, 42, 216, 21, 62, 178, 249, 75, 61, 73, 137, 20, 190, 164, 111, 175, 61, 61, 49, 66, 190, 11, 193, 63, 190, 130, 216, 131, 60, 222, 183, 14, 189, 120, 91, 62, 61, 96, 22, 32, 190, 60, 245, 126, 189, 152, 178, 161, 189, 154, 58, 10, 62, 66, 15, 29, 190, 47, 67, 233, 61, 162, 93, 111, 59, 25, 250, 43, 189, 45, 183, 178, 61, 70, 53, 144, 191, 216, 67, 222, 190, 148, 83, 13, 61, 133, 147, 158, 62, 2, 18, 108, 191, 187, 95, 34, 190, 177, 63, 45, 62, 101, 243, 150, 61, 175, 224, 44, 190, 106, 123, 150, 60, 232, 117, 157, 62, 159, 1, 35, 61, 121, 75, 94, 62, 232, 243, 243, 187, 133, 54, 63, 62, 4, 76, 47, 62, 124, 235, 128, 189, 6, 124, 88, 62, 64, 235, 42, 62, 138, 84, 252, 61, 68, 8, 156, 190, 216, 206, 197, 189, 226, 123, 45, 191, 85, 102, 227, 61, 10, 183, 213, 189, 115, 28, 13, 62, 81, 52, 4, 191, 6, 22, 104, 190, 19, 43, 173, 60, 42, 204, 68, 189, 92, 108, 173, 189, 240, 143, 238, 189, 53, 248, 137, 61, 206, 198, 33, 190, 149, 242, 151, 61, 169, 47, 78, 190, 188, 190, 53, 190, 254, 244, 8, 190, 107, 132, 156, 189, 235, 233, 114, 189, 38, 79, 14, 189, 253, 205, 194, 60, 129, 65, 62, 61, 57, 232, 131, 61, 254, 136, 160, 189, 230, 207, 9, 61, 2, 100, 206, 189, 137, 21, 45, 190, 39, 10, 194, 61, 205, 195, 174, 61, 175, 8, 139, 189, 26, 254, 239, 61, 57, 222, 40, 60, 115, 123, 95, 59, 98, 110, 172, 187, 149, 89, 139, 189, 200, 44, 48, 61, 55, 5, 93, 187, 199, 101, 195, 189, 160, 215, 135, 60, 77, 38, 17, 190, 61, 85, 240, 188, 196, 51, 103, 189, 79, 43, 203, 189, 113, 138, 11, 62, 178, 185, 195, 188, 145, 194, 162, 61, 192, 67, 10, 189, 66, 15, 139, 189, 255, 2, 147, 61, 225, 208, 2, 62, 18, 47, 1, 62, 253, 218, 19, 190, 122, 17, 7, 190, 229, 6, 208, 189, 202, 18, 110, 189, 16, 2, 48, 188, 146, 64, 158, 189, 158, 122, 99, 61, 138, 122, 32, 190, 155, 236, 135, 60, 104, 37, 145, 61, 42, 234, 40, 190, 250, 45, 0, 189, 37, 54, 9, 62, 221, 235, 55, 61, 41, 201, 76, 60, 202, 93, 137, 61, 75, 232, 5, 61, 193, 89, 29, 190, 103, 216, 179, 189, 24, 72, 52, 190, 176, 11, 17, 62, 216, 62, 22, 62, 104, 35, 133, 62, 80, 145, 63, 185, 33, 157, 186, 60, 159, 189, 79, 190, 56, 182, 173, 190, 170, 180, 48, 190, 159, 163, 17, 62, 13, 131, 4, 191, 163, 146, 230, 61, 21, 103, 118, 62, 168, 136, 30, 62, 42, 228, 23, 190, 70, 83, 9, 190, 89, 94, 111, 62, 65, 149, 148, 62, 207, 28, 216, 61, 178, 201, 118, 62, 135, 206, 43, 190, 216, 127, 47, 62, 0, 121, 80, 62, 202, 115, 64, 62, 29, 191, 213, 190, 140, 219, 23, 190, 72, 216, 126, 190, 27, 28, 20, 62, 151, 30, 103, 189, 23, 80, 151, 61, 180, 60, 51, 60, 239, 98, 199, 61, 241, 126, 135, 62, 131, 246, 151, 190, 18, 241, 103, 190, 165, 54, 135, 190, 50, 62, 73, 62, 22, 195, 114, 191, 250, 40, 82, 191, 54, 40, 224, 62, 162, 5, 76, 62, 237, 176, 36, 191, 87, 213, 158, 60, 50, 161, 166, 190, 247, 22, 13, 190, 39, 216, 93, 190, 60, 42, 168, 62, 226, 200, 242, 62, 4, 55, 164, 188, 149, 163, 236, 190, 56, 7, 235, 190, 50, 197, 55, 190, 229, 50, 172, 189, 235, 67, 131, 61, 219, 102, 173, 188, 81, 28, 141, 61, 186, 70, 197, 62, 223, 125, 166, 61, 242, 148, 68, 62, 213, 129, 150, 60, 17, 195, 166, 62, 228, 142, 115, 62, 160, 209, 181, 62, 180, 13, 222, 188, 117, 143, 134, 190, 44, 170, 201, 189, 158, 31, 151, 191, 47, 62, 46, 62, 40, 154, 100, 62, 70, 236, 131, 61, 249, 181, 154, 191, 211, 162, 205, 59, 251, 29, 139, 62, 22, 132, 172, 189, 77, 242, 32, 190, 77, 254, 59, 189, 65, 227, 57, 189, 67, 110, 22, 190, 181, 213, 14, 62, 230, 63, 194, 62, 141, 14, 128, 61, 121, 92, 228, 61, 97, 202, 206, 60, 247, 166, 119, 62, 205, 251, 244, 61, 143, 102, 56, 190, 130, 139, 253, 190, 127, 154, 150, 190, 36, 171, 48, 191, 250, 137, 184, 61, 127, 213, 215, 190, 93, 221, 211, 60, 41, 149, 83, 62, 5, 120, 216, 188, 81, 244, 158, 190, 212, 139, 59, 61, 80, 216, 25, 190, 168, 195, 228, 189, 217, 201, 11, 60, 60, 9, 158, 60, 5, 6, 213, 61, 222, 171, 209, 189, 120, 173, 127, 61, 89, 93, 217, 61, 13, 2, 172, 189, 30, 115, 10, 62, 204, 83, 146, 61, 94, 237, 48, 190, 96, 217, 164, 61, 91, 53, 2, 190, 10, 58, 33, 190, 238, 75, 24, 190, 101, 79, 143, 189, 167, 110, 66, 189, 154, 155, 49, 62, 142, 75, 79, 185, 201, 79, 62, 190, 98, 60, 59, 190, 99, 99, 247, 61, 253, 147, 164, 189, 212, 75, 147, 61, 118, 82, 247, 61, 32, 69, 212, 61, 40, 34, 23, 189, 10, 126, 133, 189, 53, 214, 52, 190, 248, 119, 70, 61, 13, 96, 22, 189, 85, 113, 20, 62, 118, 203, 111, 190, 207, 2, 134, 190, 226, 100, 225, 190, 171, 204, 25, 62, 213, 75, 19, 191, 39, 178, 64, 191, 31, 131, 35, 189, 195, 225, 29, 62, 49, 1, 41, 190, 247, 55, 159, 61, 185, 129, 141, 190, 54, 190, 36, 190, 130, 140, 23, 190, 52, 227, 167, 62, 50, 39, 174, 62, 147, 198, 30, 61, 23, 236, 168, 190, 90, 80, 166, 189, 201, 38, 182, 60, 196, 101, 148, 59, 48, 113, 39, 60, 121, 84, 161, 61, 17, 89, 8, 62, 186, 227, 19, 62, 75, 186, 27, 190, 27, 211, 122, 189, 142, 17, 118, 61, 89, 4, 73, 62, 53, 208, 247, 61, 4, 3, 239, 57, 157, 74, 26, 190, 135, 13, 114, 190, 181, 218, 45, 189, 230, 84, 150, 61, 213, 4, 192, 62, 233, 154, 68, 62, 197, 232, 89, 62, 164, 124, 205, 188, 127, 95, 208, 190, 223, 78, 102, 62, 107, 136, 56, 61, 137, 190, 218, 190, 169, 9, 174, 189, 246, 38, 8, 62, 9, 165, 147, 62, 34, 8, 125, 187, 159, 14, 239, 61, 110, 232, 105, 61, 138, 108, 182, 61, 88, 76, 255, 187, 27, 179, 96, 62, 15, 142, 229, 189, 47, 121, 110, 62, 144, 16, 175, 61, 78, 8, 158, 62, 113, 50, 251, 189, 136, 213, 21, 188, 96, 253, 76, 190, 204, 12, 31, 62, 87, 112, 233, 189, 6, 204, 88, 189, 124, 148, 13, 189, 105, 253, 209, 61, 80, 38, 156, 62, 212, 53, 130, 60, 232, 252, 114, 61, 164, 135, 19, 62, 127, 70, 8, 190, 40, 147, 108, 189, 141, 255, 243, 61, 188, 179, 206, 57, 0, 210, 10, 190, 182, 36, 182, 189, 126, 150, 101, 61, 208, 91, 66, 190, 8, 230, 59, 61, 237, 183, 194, 61, 197, 241, 24, 190, 125, 227, 135, 189, 7, 193, 0, 190, 25, 227, 4, 62, 0, 73, 74, 190, 234, 214, 164, 186, 65, 66, 67, 190, 120, 96, 115, 61, 220, 127, 64, 190, 135, 241, 157, 189, 212, 136, 252, 61, 109, 148, 211, 189, 241, 211, 69, 189, 148, 134, 3, 190, 225, 115, 202, 189, 98, 219, 55, 190, 78, 247, 30, 61, 152, 6, 16, 190, 63, 8, 106, 60, 241, 223, 135, 189, 7, 224, 80, 190, 118, 241, 13, 190, 154, 53, 143, 61, 103, 204, 54, 190, 137, 208, 209, 188, 126, 136, 241, 61, 159, 60, 226, 189, 196, 221, 3, 190, 197, 3, 27, 190, 242, 73, 24, 62, 237, 81, 5, 61, 87, 219, 137, 189, 114, 196, 224, 188, 7, 88, 220, 188, 111, 239, 236, 189, 140, 206, 194, 189, 56, 236, 221, 61, 173, 114, 17, 190, 177, 41, 130, 61, 241, 107, 242, 61, 150, 132, 218, 61, 167, 8, 221, 189, 223, 141, 48, 190, 225, 192, 59, 190, 27, 237, 187, 61, 156, 6, 110, 187, 196, 236, 9, 189, 186, 87, 186, 189, 228, 62, 0, 61, 142, 77, 22, 189, 27, 102, 200, 60, 33, 54, 147, 60, 184, 219, 170, 62, 103, 173, 197, 61, 103, 199, 5, 189, 135, 251, 106, 62, 62, 76, 192, 62, 131, 241, 13, 60, 1, 241, 29, 61, 62, 46, 220, 189, 92, 17, 44, 191, 252, 126, 10, 62, 124, 150, 60, 61, 142, 112, 68, 62, 131, 215, 52, 190, 177, 28, 105, 190, 113, 35, 224, 61, 127, 167, 192, 62, 202, 18, 0, 62, 93, 234, 80, 189, 157, 75, 57, 62, 150, 197, 19, 62, 152, 139, 230, 61, 180, 219, 148, 62, 102, 105, 59, 190, 31, 114, 4, 61, 153, 112, 148, 189, 14, 158, 139, 188, 121, 214, 130, 190, 82, 144, 30, 62, 148, 62, 32, 190, 58, 240, 135, 61, 105, 6, 176, 189, 56, 26, 223, 186, 204, 160, 23, 188, 121, 86, 188, 60, 22, 45, 8, 189, 123, 123, 225, 189, 117, 42, 139, 61, 147, 119, 190, 61, 150, 106, 1, 188, 15, 214, 27, 61, 9, 114, 15, 190, 187, 18, 163, 189, 6, 62, 6, 61, 91, 12, 50, 189, 177, 88, 14, 190, 89, 164, 176, 189, 14, 25, 13, 190, 51, 136, 29, 190, 11, 55, 47, 190, 67, 251, 190, 60, 130, 20, 252, 60, 71, 91, 160, 189, 241, 203, 9, 190, 28, 120, 232, 61, 143, 121, 249, 189, 171, 54, 209, 189, 146, 206, 184, 189, 173, 42, 117, 189, 126, 181, 1, 190, 20, 216, 7, 62, 50, 241, 52, 190, 207, 203, 175, 188, 32, 170, 89, 189, 10, 157, 61, 61, 84, 109, 41, 62, 174, 27, 65, 190, 119, 248, 72, 62, 62, 229, 140, 190, 129, 10, 21, 62, 75, 8, 175, 62, 29, 238, 225, 189, 130, 147, 112, 190, 148, 175, 76, 62, 92, 88, 165, 60, 168, 224, 29, 190, 246, 108, 119, 61, 200, 61, 179, 62, 220, 62, 75, 189, 225, 104, 12, 188, 205, 128, 102, 60, 166, 100, 54, 190, 119, 213, 193, 189, 250, 129, 72, 62, 125, 118, 251, 189, 62, 63, 188, 59, 175, 18, 78, 61, 195, 155, 245, 62, 178, 29, 189, 61, 82, 39, 103, 60, 96, 244, 18, 189, 48, 30, 130, 62, 42, 94, 188, 189, 240, 200, 137, 62, 157, 52, 33, 61, 187, 245, 151, 190, 65, 118, 85, 61, 46, 146, 234, 61, 19, 158, 128, 61, 30, 240, 49, 62, 238, 23, 195, 57, 112, 135, 138, 190, 47, 193, 184, 190, 22, 138, 17, 62, 251, 89, 124, 61, 51, 41, 48, 190, 223, 8, 186, 61, 24, 113, 30, 62, 112, 239, 226, 188, 103, 83, 30, 61, 232, 229, 143, 61, 243, 207, 57, 62, 188, 28, 38, 188, 84, 176, 31, 62, 91, 131, 14, 190, 160, 237, 2, 190, 178, 231, 216, 61, 251, 185, 85, 62, 122, 234, 208, 61, 78, 128, 132, 190, 67, 210, 180, 61, 26, 73, 190, 190, 101, 167, 109, 61, 116, 84, 100, 189, 208, 135, 30, 190, 26, 102, 28, 189, 76, 240, 11, 61, 19, 174, 224, 61, 227, 40, 197, 190, 149, 208, 188, 62, 39, 186, 253, 190, 244, 197, 179, 59, 253, 239, 158, 191, 169, 154, 50, 191, 8, 111, 56, 63, 31, 232, 169, 61, 224, 32, 101, 191, 176, 162, 41, 190, 120, 137, 61, 190, 7, 223, 139, 190, 228, 144, 118, 191, 4, 10, 169, 61, 16, 194, 176, 61, 26, 234, 242, 60, 220, 63, 134, 190, 42, 113, 228, 189, 26, 140, 70, 188, 3, 29, 88, 62, 126, 252, 242, 61, 28, 61, 97, 62, 223, 72, 130, 62, 94, 14, 32, 62, 240, 70, 181, 190, 114, 104, 83, 62, 108, 17, 83, 191, 44, 170, 37, 62, 201, 228, 80, 61, 237, 169, 160, 61, 200, 127, 204, 190, 202, 78, 37, 191, 21, 168, 249, 61, 145, 101, 163, 191, 7, 36, 253, 188, 166, 108, 154, 61, 156, 196, 233, 189, 110, 137, 41, 191, 22, 22, 231, 61, 212, 127, 217, 62, 2, 4, 158, 189, 186, 67, 183, 62, 43, 214, 165, 61, 223, 152, 16, 191, 65, 202, 121, 61, 93, 205, 114, 62, 23, 120, 253, 62, 16, 148, 191, 187, 158, 29, 79, 61, 227, 39, 9, 191, 19, 232, 114, 62, 110, 145, 85, 190, 20, 228, 33, 190, 86, 249, 11, 191, 141, 90, 89, 190, 178, 171, 157, 62, 105, 191, 56, 189, 174, 182, 210, 61, 154, 229, 83, 61, 36, 143, 186, 62, 190, 127, 40, 62, 97, 13, 41, 187, 138, 235, 195, 61, 137, 157, 104, 190, 65, 16, 58, 62, 126, 5, 167, 190, 71, 128, 239, 189, 123, 62, 76, 190, 115, 183, 69, 190, 75, 251, 181, 62, 146, 219, 142, 190, 130, 26, 142, 61, 7, 131, 80, 190, 222, 36, 235, 62, 100, 117, 188, 189, 22, 119, 163, 190, 68, 234, 38, 190, 231, 50, 203, 62, 53, 95, 88, 62, 226, 250, 245, 190, 96, 20, 232, 190, 67, 156, 173, 190, 227, 125, 74, 62, 62, 32, 53, 191, 240, 234, 161, 190, 170, 201, 158, 189, 107, 224, 167, 190, 125, 123, 227, 61, 143, 215, 202, 62, 235, 19, 216, 61, 220, 64, 37, 189, 216, 125, 100, 62, 10, 111, 154, 62, 167, 162, 39, 62, 241, 142, 207, 61, 105, 218, 211, 62, 138, 253, 188, 62, 46, 38, 233, 190, 244, 252, 74, 62, 21, 29, 4, 62, 238, 157, 95, 62, 32, 154, 31, 63, 78, 227, 119, 61, 2, 7, 111, 189, 185, 92, 175, 61, 25, 12, 128, 62, 190, 76, 124, 62, 196, 100, 136, 61, 116, 190, 111, 62, 6, 128, 20, 62, 226, 247, 46, 188, 169, 151, 229, 190, 67, 197, 60, 62, 81, 15, 1, 189, 192, 231, 222, 60, 198, 106, 154, 190, 105, 200, 98, 190, 152, 174, 116, 191, 57, 219, 67, 191, 60, 78, 240, 62, 65, 82, 3, 62, 70, 1, 95, 191, 30, 151, 149, 61, 239, 3, 182, 60, 181, 169, 49, 189, 215, 56, 104, 62, 103, 217, 98, 62, 50, 87, 212, 188, 89, 78, 47, 62, 70, 68, 223, 62, 204, 238, 247, 189, 57, 72, 131, 62, 138, 219, 0, 189, 23, 166, 108, 191, 184, 103, 193, 61, 31, 184, 6, 189, 141, 85, 204, 61, 234, 74, 20, 191, 207, 149, 209, 61, 169, 29, 133, 62, 117, 148, 66, 189, 186, 234, 138, 190, 62, 176, 181, 60, 102, 27, 95, 62, 4, 145, 236, 62, 146, 132, 202, 61, 111, 29, 254, 61, 128, 220, 68, 62, 55, 69, 51, 62, 112, 245, 74, 62, 77, 16, 167, 61, 104, 63, 150, 191, 177, 252, 158, 189, 92, 251, 11, 191, 186, 19, 106, 190, 196, 20, 222, 189, 9, 4, 167, 189, 178, 65, 254, 190, 169, 35, 37, 62, 182, 53, 109, 61, 103, 64, 159, 62, 4, 150, 246, 189, 99, 148, 48, 61, 9, 249, 4, 191, 231, 114, 39, 62, 100, 6, 114, 62, 54, 64, 117, 190, 132, 59, 190, 189, 182, 216, 26, 62, 207, 103, 43, 62, 15, 96, 10, 62, 57, 225, 71, 61, 2, 255, 233, 190, 104, 79, 222, 189, 9, 26, 181, 188, 57, 123, 109, 191, 160, 183, 146, 62, 215, 198, 172, 186, 160, 72, 5, 62, 210, 104, 99, 61, 121, 81, 7, 190, 45, 168, 124, 61, 29, 89, 69, 190, 211, 255, 172, 188, 184, 57, 57, 190, 76, 115, 184, 189, 223, 188, 153, 189, 234, 81, 53, 189, 125, 107, 147, 189, 56, 31, 49, 62, 157, 207, 49, 190, 122, 90, 86, 190, 150, 221, 11, 189, 8, 58, 9, 189, 218, 242, 99, 62, 243, 32, 83, 188, 101, 0, 89, 62, 41, 184, 152, 62, 87, 252, 188, 190, 88, 32, 164, 189, 23, 23, 54, 62, 63, 159, 244, 190, 25, 253, 222, 61, 63, 3, 59, 62, 114, 52, 14, 62, 70, 115, 75, 190, 4, 189, 198, 190, 242, 149, 34, 62, 68, 132, 32, 62, 148, 13, 228, 61, 5, 239, 34, 62, 5, 127, 81, 190, 119, 43, 93, 189, 12, 161, 154, 188, 237, 253, 65, 189, 169, 107, 195, 190, 189, 161, 229, 60, 3, 60, 137, 61, 35, 130, 168, 189, 254, 25, 170, 189, 66, 99, 139, 61, 115, 124, 22, 190, 219, 99, 165, 61, 149, 133, 134, 62, 7, 126, 32, 190, 25, 154, 153, 62, 216, 121, 218, 62, 233, 222, 149, 62, 225, 185, 200, 61, 98, 59, 210, 190, 188, 220, 146, 189, 29, 51, 163, 189, 240, 158, 145, 62, 23, 160, 30, 190, 21, 179, 125, 60, 127, 6, 159, 62, 147, 90, 180, 62, 32, 175, 36, 189, 211, 33, 216, 190, 16, 131, 140, 188, 44, 211, 177, 62, 95, 39, 234, 61, 182, 230, 106, 62, 141, 110, 7, 62, 216, 143, 124, 189, 171, 253, 206, 61, 147, 127, 159, 62, 200, 125, 89, 191, 253, 10, 229, 187, 236, 154, 12, 189, 93, 47, 119, 62, 207, 70, 155, 190, 103, 50, 13, 61, 73, 95, 3, 191, 137, 26, 156, 188, 55, 22, 4, 62, 212, 150, 188, 187, 117, 181, 34, 188, 230, 246, 7, 62, 189, 239, 227, 61, 34, 135, 242, 61, 225, 89, 97, 191, 89, 50, 136, 62, 231, 189, 181, 187, 200, 121, 172, 60, 174, 176, 0, 191, 128, 113, 212, 189, 252, 54, 128, 189, 86, 205, 140, 189, 20, 125, 93, 189, 21, 3, 32, 62, 255, 153, 233, 188, 218, 64, 73, 62, 162, 29, 153, 61, 204, 178, 231, 61, 94, 103, 126, 62, 242, 212, 143, 60, 98, 116, 17, 61, 42, 60, 14, 60, 99, 123, 79, 190, 96, 33, 244, 189, 116, 60, 130, 190, 9, 188, 221, 59, 218, 212, 204, 61, 26, 209, 16, 189, 63, 125, 58, 190, 39, 164, 17, 190, 247, 134, 17, 191, 84, 90, 60, 190, 89, 7, 98, 190, 153, 116, 137, 190, 108, 19, 171, 186, 54, 117, 12, 191, 207, 28, 85, 191, 65, 1, 58, 61, 225, 111, 79, 61, 53, 59, 192, 190, 251, 109, 71, 189, 111, 234, 128, 190, 101, 32, 206, 61, 18, 218, 168, 190, 235, 150, 105, 62, 181, 76, 140, 62, 112, 4, 214, 55, 204, 152, 3, 190, 177, 210, 143, 61, 155, 40, 194, 189, 228, 6, 33, 190, 29, 96, 164, 61, 29, 56, 219, 61, 128, 6, 64, 62, 50, 69, 150, 61, 51, 156, 132, 189, 241, 237, 135, 61, 155, 95, 56, 188, 124, 99, 140, 62, 230, 208, 70, 59, 103, 56, 170, 59, 150, 196, 182, 188, 43, 239, 125, 190, 231, 136, 186, 61, 219, 189, 149, 62, 84, 27, 55, 62, 194, 189, 87, 62, 196, 4, 166, 189, 105, 191, 193, 190, 73, 150, 146, 190, 184, 45, 13, 190, 5, 184, 193, 61, 18, 148, 182, 190, 93, 188, 17, 62, 232, 203, 97, 189, 58, 195, 160, 61, 229, 113, 132, 61, 114, 219, 150, 190, 188, 230, 20, 190, 144, 211, 202, 60, 211, 49, 53, 62, 246, 50, 166, 188, 129, 245, 43, 190, 45, 31, 24, 62, 156, 1, 110, 62, 55, 210, 139, 62, 221, 33, 242, 190, 41, 216, 96, 62, 233, 150, 98, 189, 0, 19, 137, 189, 97, 245, 7, 188, 61, 4, 181, 190, 230, 206, 55, 190, 109, 166, 8, 62, 252, 230, 144, 60, 146, 217, 225, 189, 208, 131, 183, 60, 132, 171, 53, 191, 196, 25, 155, 60, 19, 140, 88, 191, 115, 156, 196, 60, 173, 169, 138, 190, 33, 10, 143, 62, 178, 110, 171, 190, 253, 109, 199, 189, 121, 54, 243, 188, 67, 158, 150, 61, 94, 6, 104, 190, 133, 11, 181, 62, 118, 110, 130, 62, 135, 210, 26, 62, 90, 204, 172, 61, 104, 195, 191, 60, 232, 97, 41, 190, 236, 106, 46, 62, 248, 115, 21, 62, 112, 195, 16, 61, 159, 201, 23, 62, 207, 44, 8, 62, 219, 253, 233, 189, 65, 226, 243, 189, 137, 201, 70, 62, 59, 65, 174, 62, 32, 252, 7, 62, 201, 239, 57, 62, 9, 76, 103, 190, 105, 58, 97, 190, 146, 107, 175, 190, 185, 98, 218, 61, 76, 143, 87, 191, 224, 229, 49, 190, 161, 201, 78, 191, 25, 78, 17, 191, 22, 136, 74, 63, 30, 170, 44, 62, 25, 179, 63, 191, 115, 250, 66, 190, 69, 170, 14, 61, 225, 170, 40, 189, 212, 108, 100, 191, 131, 24, 153, 190, 52, 67, 254, 61, 210, 176, 79, 61, 9, 57, 218, 189, 197, 184, 142, 190, 103, 2, 84, 190, 18, 126, 243, 62, 29, 8, 135, 62, 58, 5, 81, 62, 60, 85, 193, 60, 188, 209, 68, 62, 2, 167, 190, 190, 190, 211, 24, 62, 62, 115, 125, 191, 151, 50, 221, 189, 38, 246, 122, 62, 87, 112, 160, 60, 69, 222, 144, 190, 36, 225, 192, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 223, 51, 61, 232, 60, 41, 62, 191, 53, 84, 190, 80, 159, 141, 189, 154, 232, 12, 189, 120, 227, 43, 190, 105, 157, 171, 188, 143, 111, 206, 61, 206, 170, 54, 62, 46, 157, 233, 61, 200, 123, 74, 190, 55, 162, 55, 62, 145, 14, 143, 62, 233, 196, 231, 61, 250, 12, 21, 189, 228, 8, 52, 62, 223, 115, 3, 189, 128, 198, 129, 60, 174, 33, 162, 61, 172, 102, 111, 62, 174, 195, 214, 61, 187, 178, 138, 190, 89, 203, 134, 190, 251, 91, 42, 62, 121, 0, 145, 190, 98, 177, 6, 62, 89, 77, 43, 188, 64, 91, 124, 62, 33, 175, 196, 61, 90, 115, 160, 61, 210, 191, 251, 61, 244, 50, 185, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 27, 232, 190, 211, 82, 224, 62, 248, 122, 211, 190, 188, 136, 244, 189, 60, 242, 15, 62, 56, 147, 31, 61, 236, 47, 6, 189, 220, 200, 131, 62, 189, 89, 50, 191, 168, 178, 61, 190, 91, 66, 243, 61, 15, 223, 149, 190, 110, 208, 155, 62, 86, 130, 206, 189, 190, 133, 37, 189, 242, 245, 157, 62, 158, 81, 112, 189, 207, 171, 144, 190, 5, 250, 77, 61, 249, 21, 29, 191, 183, 224, 14, 191, 220, 23, 50, 63, 63, 220, 180, 190, 214, 214, 24, 63, 11, 119, 224, 62, 240, 6, 106, 62, 220, 146, 190, 62, 199, 212, 73, 61, 255, 201, 95, 190, 52, 229, 97, 62, 158, 78, 192, 190, 233, 121, 98, 191, 121, 147, 55, 190, 240, 61, 64, 190, 80, 217, 3, 62, 110, 142, 5, 60, 59, 126, 181, 190, 212, 102, 143, 61, 163, 44, 231, 61, 7, 61, 99, 188, 153, 231, 101, 62, 114, 46, 194, 190, 19, 199, 25, 190, 234, 177, 159, 188, 118, 197, 98, 190, 228, 154, 109, 60, 192, 153, 2, 62, 114, 170, 141, 62, 90, 121, 75, 61, 6, 232, 47, 61, 66, 7, 11, 190, 200, 253, 103, 61, 243, 179, 197, 61, 197, 112, 167, 61, 15, 164, 143, 187, 213, 99, 141, 190, 115, 72, 182, 61, 103, 189, 57, 62, 156, 167, 200, 61, 75, 118, 184, 190, 3, 217, 157, 190, 177, 181, 56, 190, 1, 168, 242, 189, 250, 57, 116, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 111, 111, 62, 59, 157, 15, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {68, 87, 143, 191, 126, 200, 9, 191, 105, 91, 0, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {146, 2, 61, 192, 28, 175, 199, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0023/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}