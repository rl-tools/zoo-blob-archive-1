// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 219, 211, 190, 57, 109, 108, 191, 5, 24, 22, 191, 227, 65, 232, 190, 219, 137, 146, 191, 241, 137, 94, 190, 174, 247, 92, 60, 86, 142, 14, 191, 229, 55, 55, 62, 223, 85, 75, 62, 185, 160, 170, 190, 218, 132, 53, 62, 226, 58, 17, 191, 117, 54, 6, 63, 204, 72, 49, 63, 8, 105, 32, 63, 53, 204, 122, 191, 75, 6, 161, 190, 88, 166, 6, 191, 95, 154, 43, 191, 201, 113, 138, 62, 154, 123, 115, 62, 241, 128, 212, 62, 41, 198, 167, 189, 66, 183, 205, 190, 195, 125, 49, 63, 49, 191, 8, 63, 83, 94, 111, 63, 229, 171, 32, 63, 100, 192, 185, 62, 6, 56, 162, 61, 138, 150, 153, 191, 17, 178, 156, 190, 138, 227, 168, 62, 134, 82, 142, 191, 183, 189, 126, 190, 18, 246, 104, 62, 112, 133, 35, 191, 164, 83, 6, 60, 134, 219, 13, 63, 6, 240, 69, 63, 6, 78, 61, 63, 188, 206, 162, 62, 91, 102, 241, 62, 244, 199, 201, 189, 53, 132, 45, 191, 90, 110, 211, 189, 198, 72, 153, 61, 122, 117, 50, 63, 28, 236, 153, 191, 6, 64, 224, 189, 19, 176, 216, 62, 59, 192, 173, 191, 70, 5, 103, 190, 237, 170, 205, 62, 218, 36, 234, 62, 101, 230, 8, 191, 91, 224, 46, 191, 201, 48, 129, 191, 178, 198, 56, 62, 232, 47, 12, 191, 211, 23, 45, 190, 209, 154, 175, 189, 30, 77, 64, 191, 159, 78, 143, 190, 56, 73, 192, 60, 31, 170, 224, 190, 58, 216, 188, 190, 181, 35, 47, 190, 68, 73, 17, 191, 227, 243, 172, 191, 186, 6, 176, 190, 21, 105, 221, 60, 92, 42, 149, 63, 18, 221, 166, 62, 251, 77, 36, 191, 72, 173, 65, 63, 150, 16, 10, 190, 59, 69, 25, 62, 161, 205, 105, 63, 31, 8, 235, 62, 119, 43, 78, 63, 131, 54, 90, 63, 190, 109, 34, 63, 194, 172, 67, 190, 15, 239, 19, 63, 23, 161, 229, 190, 71, 51, 79, 191, 113, 26, 153, 191, 152, 118, 159, 190, 252, 242, 200, 190, 130, 167, 32, 191, 62, 239, 18, 63, 54, 26, 25, 191, 99, 12, 95, 63, 165, 63, 105, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 133, 169, 190, 237, 53, 22, 63, 134, 75, 210, 190, 35, 123, 4, 63, 16, 85, 252, 190, 250, 251, 10, 191, 101, 109, 5, 191, 143, 54, 48, 63, 143, 135, 1, 191, 46, 41, 91, 191, 217, 120, 189, 61, 168, 93, 87, 61, 116, 160, 154, 60, 68, 144, 27, 190, 10, 159, 160, 62, 233, 206, 16, 63, 200, 56, 251, 189, 188, 20, 56, 61, 222, 75, 127, 189, 141, 131, 110, 61, 168, 138, 21, 63, 105, 60, 29, 63, 247, 222, 41, 63, 13, 86, 198, 61, 188, 111, 9, 61, 215, 200, 9, 63, 113, 19, 169, 188, 51, 57, 171, 61, 168, 89, 60, 190, 214, 196, 164, 62, 188, 126, 163, 190, 136, 255, 151, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 192, 238, 189, 198, 122, 63, 189, 200, 93, 67, 191, 76, 20, 184, 189, 100, 108, 240, 191, 31, 133, 42, 191, 46, 139, 47, 191, 237, 210, 145, 62, 205, 159, 143, 190, 91, 126, 63, 190, 106, 86, 131, 190, 91, 40, 123, 190, 138, 29, 72, 191, 172, 227, 18, 191, 232, 6, 8, 62, 237, 39, 142, 61, 214, 135, 127, 61, 0, 44, 49, 190, 240, 64, 180, 187, 58, 117, 86, 190, 13, 203, 3, 62, 75, 215, 234, 188, 159, 109, 48, 189, 200, 89, 133, 190, 83, 152, 6, 191, 29, 84, 29, 62, 12, 155, 98, 191, 3, 128, 130, 190, 166, 214, 163, 61, 189, 95, 15, 62, 211, 141, 28, 191, 127, 252, 54, 189, 205, 205, 135, 190, 210, 238, 218, 62, 168, 248, 174, 62, 117, 10, 119, 62, 245, 118, 38, 61, 141, 108, 28, 191, 11, 192, 48, 190, 68, 176, 21, 62, 166, 30, 231, 189, 71, 119, 23, 191, 142, 110, 104, 189, 176, 224, 125, 62, 58, 3, 106, 62, 219, 84, 7, 60, 217, 55, 134, 190, 2, 247, 35, 189, 80, 188, 154, 62, 41, 172, 162, 62, 191, 154, 117, 62, 28, 53, 107, 61, 160, 30, 85, 60, 165, 154, 4, 62, 104, 227, 75, 62, 203, 146, 189, 191, 212, 188, 47, 187, 54, 12, 228, 189, 3, 123, 231, 189, 149, 197, 237, 188, 6, 60, 176, 190, 83, 226, 51, 191, 51, 253, 116, 61, 230, 116, 27, 62, 255, 194, 159, 190, 148, 67, 180, 189, 118, 213, 44, 62, 28, 110, 157, 189, 152, 15, 167, 62, 211, 77, 252, 62, 45, 11, 169, 62, 162, 8, 84, 61, 126, 10, 145, 62, 132, 5, 61, 62, 39, 78, 140, 62, 206, 238, 176, 62, 25, 52, 220, 61, 47, 111, 181, 189, 163, 93, 220, 62, 106, 59, 53, 62, 163, 83, 98, 190, 131, 120, 4, 62, 31, 59, 79, 190, 183, 8, 137, 62, 85, 100, 92, 189, 228, 161, 254, 190, 40, 139, 131, 186, 221, 88, 41, 63, 93, 189, 206, 60, 91, 12, 167, 61, 232, 180, 233, 61, 172, 58, 150, 190, 38, 8, 48, 191, 40, 250, 223, 61, 72, 255, 42, 62, 4, 106, 122, 188, 167, 204, 171, 61, 104, 154, 34, 62, 131, 16, 176, 61, 107, 234, 94, 189, 153, 72, 42, 190, 216, 130, 149, 189, 245, 162, 214, 61, 199, 49, 133, 61, 15, 25, 249, 189, 101, 6, 141, 61, 125, 241, 226, 59, 148, 159, 148, 189, 40, 239, 13, 190, 41, 38, 53, 60, 105, 143, 252, 189, 228, 203, 138, 189, 183, 70, 145, 61, 247, 53, 47, 190, 42, 216, 21, 62, 178, 249, 75, 61, 73, 137, 20, 190, 164, 111, 175, 61, 61, 49, 66, 190, 11, 193, 63, 190, 130, 216, 131, 60, 222, 183, 14, 189, 120, 91, 62, 61, 96, 22, 32, 190, 60, 245, 126, 189, 152, 178, 161, 189, 154, 58, 10, 62, 66, 15, 29, 190, 217, 33, 196, 61, 43, 139, 57, 189, 85, 231, 150, 190, 115, 24, 128, 61, 21, 210, 140, 191, 15, 253, 201, 190, 51, 112, 121, 190, 196, 249, 160, 62, 175, 111, 116, 191, 143, 164, 4, 191, 186, 158, 26, 62, 190, 235, 167, 61, 85, 137, 137, 190, 66, 171, 131, 188, 93, 153, 161, 62, 35, 85, 21, 189, 84, 72, 91, 62, 164, 84, 54, 187, 104, 54, 78, 62, 195, 65, 1, 62, 136, 41, 41, 190, 29, 148, 31, 62, 100, 210, 245, 61, 230, 133, 148, 61, 142, 216, 5, 191, 78, 255, 84, 190, 176, 148, 83, 191, 195, 179, 207, 61, 132, 194, 70, 190, 74, 254, 187, 61, 19, 104, 40, 191, 12, 135, 207, 190, 19, 43, 173, 60, 42, 204, 68, 189, 92, 108, 173, 189, 240, 143, 238, 189, 53, 248, 137, 61, 206, 198, 33, 190, 149, 242, 151, 61, 169, 47, 78, 190, 188, 190, 53, 190, 254, 244, 8, 190, 107, 132, 156, 189, 235, 233, 114, 189, 38, 79, 14, 189, 253, 205, 194, 60, 129, 65, 62, 61, 57, 232, 131, 61, 254, 136, 160, 189, 230, 207, 9, 61, 2, 100, 206, 189, 137, 21, 45, 190, 39, 10, 194, 61, 205, 195, 174, 61, 175, 8, 139, 189, 26, 254, 239, 61, 57, 222, 40, 60, 115, 123, 95, 59, 98, 110, 172, 187, 149, 89, 139, 189, 200, 44, 48, 61, 55, 5, 93, 187, 199, 101, 195, 189, 160, 215, 135, 60, 77, 38, 17, 190, 61, 85, 240, 188, 196, 51, 103, 189, 79, 43, 203, 189, 113, 138, 11, 62, 178, 185, 195, 188, 145, 194, 162, 61, 192, 67, 10, 189, 66, 15, 139, 189, 255, 2, 147, 61, 225, 208, 2, 62, 18, 47, 1, 62, 253, 218, 19, 190, 122, 17, 7, 190, 229, 6, 208, 189, 202, 18, 110, 189, 16, 2, 48, 188, 146, 64, 158, 189, 158, 122, 99, 61, 138, 122, 32, 190, 155, 236, 135, 60, 104, 37, 145, 61, 42, 234, 40, 190, 250, 45, 0, 189, 37, 54, 9, 62, 221, 235, 55, 61, 41, 201, 76, 60, 202, 93, 137, 61, 75, 232, 5, 61, 193, 89, 29, 190, 103, 216, 179, 189, 24, 72, 52, 190, 203, 89, 197, 61, 183, 112, 6, 62, 155, 60, 93, 62, 69, 58, 37, 186, 27, 232, 4, 59, 186, 161, 82, 190, 238, 19, 177, 190, 111, 138, 12, 190, 69, 34, 216, 61, 244, 198, 79, 191, 201, 55, 113, 61, 236, 186, 78, 62, 120, 43, 182, 61, 137, 63, 43, 190, 233, 10, 136, 189, 4, 101, 125, 62, 160, 147, 142, 62, 194, 183, 179, 61, 220, 142, 153, 62, 153, 140, 57, 190, 191, 168, 17, 62, 4, 185, 51, 62, 179, 246, 43, 62, 164, 21, 8, 191, 41, 102, 32, 190, 35, 11, 36, 190, 87, 34, 242, 61, 252, 12, 64, 189, 158, 62, 11, 62, 7, 186, 166, 189, 98, 171, 190, 61, 30, 242, 160, 62, 108, 91, 142, 190, 44, 21, 134, 190, 15, 128, 155, 190, 231, 227, 96, 62, 134, 76, 138, 191, 216, 232, 122, 191, 219, 163, 157, 62, 69, 109, 60, 62, 163, 215, 53, 191, 128, 153, 218, 61, 253, 160, 200, 190, 16, 250, 49, 190, 34, 189, 11, 190, 21, 237, 204, 62, 116, 246, 225, 62, 113, 198, 145, 189, 144, 96, 236, 190, 223, 82, 249, 190, 94, 169, 97, 190, 127, 203, 72, 190, 73, 86, 163, 61, 249, 178, 183, 189, 138, 98, 63, 61, 108, 178, 167, 62, 188, 8, 10, 62, 142, 200, 139, 62, 45, 184, 8, 62, 40, 209, 183, 62, 46, 47, 127, 62, 209, 108, 182, 62, 39, 38, 155, 189, 147, 183, 169, 190, 147, 251, 204, 189, 95, 245, 176, 191, 200, 144, 9, 62, 36, 13, 110, 62, 43, 49, 204, 61, 172, 74, 173, 191, 219, 56, 172, 188, 248, 141, 137, 62, 66, 59, 197, 188, 213, 80, 7, 190, 17, 77, 139, 189, 11, 119, 6, 189, 247, 195, 10, 190, 73, 66, 53, 62, 19, 218, 177, 62, 62, 149, 174, 61, 50, 89, 11, 62, 48, 245, 216, 60, 20, 113, 97, 62, 1, 30, 163, 61, 47, 6, 93, 190, 40, 7, 15, 191, 78, 54, 185, 190, 228, 196, 137, 191, 109, 223, 23, 62, 56, 14, 228, 190, 187, 139, 161, 61, 248, 45, 105, 62, 164, 100, 222, 189, 163, 185, 193, 190, 177, 151, 4, 61, 156, 249, 189, 189, 168, 195, 228, 189, 217, 201, 11, 60, 60, 9, 158, 60, 5, 6, 213, 61, 222, 171, 209, 189, 120, 173, 127, 61, 89, 93, 217, 61, 13, 2, 172, 189, 30, 115, 10, 62, 204, 83, 146, 61, 94, 237, 48, 190, 96, 217, 164, 61, 91, 53, 2, 190, 10, 58, 33, 190, 238, 75, 24, 190, 101, 79, 143, 189, 167, 110, 66, 189, 154, 155, 49, 62, 142, 75, 79, 185, 201, 79, 62, 190, 98, 60, 59, 190, 99, 99, 247, 61, 253, 147, 164, 189, 212, 75, 147, 61, 118, 82, 247, 61, 32, 69, 212, 61, 40, 34, 23, 189, 10, 126, 133, 189, 53, 214, 52, 190, 248, 119, 70, 61, 13, 96, 22, 189, 85, 113, 20, 62, 31, 251, 30, 190, 213, 192, 131, 190, 193, 98, 229, 190, 95, 133, 40, 62, 242, 212, 62, 191, 122, 67, 109, 191, 230, 3, 38, 190, 151, 19, 5, 62, 147, 247, 129, 190, 169, 146, 164, 61, 189, 93, 175, 190, 36, 199, 72, 190, 20, 204, 69, 189, 58, 213, 192, 62, 0, 174, 152, 62, 255, 69, 226, 60, 219, 240, 171, 190, 12, 62, 220, 189, 222, 44, 158, 188, 149, 135, 109, 189, 139, 165, 140, 61, 147, 16, 108, 61, 173, 188, 1, 62, 139, 0, 12, 62, 98, 223, 13, 190, 124, 49, 20, 61, 250, 200, 19, 62, 144, 233, 85, 62, 140, 137, 21, 62, 202, 182, 80, 61, 203, 136, 89, 190, 18, 131, 160, 190, 65, 45, 146, 189, 154, 148, 134, 61, 70, 175, 172, 62, 13, 243, 67, 62, 7, 112, 78, 62, 24, 84, 128, 187, 81, 105, 219, 190, 128, 160, 112, 62, 150, 245, 87, 60, 27, 169, 252, 190, 84, 105, 4, 190, 218, 37, 216, 61, 118, 169, 114, 62, 18, 88, 44, 187, 64, 97, 13, 62, 54, 117, 5, 61, 91, 97, 143, 61, 2, 148, 184, 188, 97, 23, 137, 62, 243, 10, 7, 190, 208, 89, 60, 62, 223, 210, 131, 61, 221, 87, 146, 62, 0, 169, 92, 190, 200, 139, 216, 188, 103, 219, 70, 190, 182, 15, 21, 62, 16, 184, 201, 189, 240, 69, 212, 188, 22, 4, 218, 189, 125, 230, 242, 61, 228, 137, 146, 62, 212, 53, 130, 60, 232, 252, 114, 61, 164, 135, 19, 62, 127, 70, 8, 190, 40, 147, 108, 189, 141, 255, 243, 61, 188, 179, 206, 57, 0, 210, 10, 190, 182, 36, 182, 189, 126, 150, 101, 61, 208, 91, 66, 190, 8, 230, 59, 61, 237, 183, 194, 61, 197, 241, 24, 190, 125, 227, 135, 189, 7, 193, 0, 190, 25, 227, 4, 62, 0, 73, 74, 190, 234, 214, 164, 186, 65, 66, 67, 190, 120, 96, 115, 61, 220, 127, 64, 190, 135, 241, 157, 189, 212, 136, 252, 61, 109, 148, 211, 189, 241, 211, 69, 189, 148, 134, 3, 190, 225, 115, 202, 189, 98, 219, 55, 190, 78, 247, 30, 61, 152, 6, 16, 190, 63, 8, 106, 60, 241, 223, 135, 189, 7, 224, 80, 190, 118, 241, 13, 190, 154, 53, 143, 61, 103, 204, 54, 190, 137, 208, 209, 188, 126, 136, 241, 61, 159, 60, 226, 189, 196, 221, 3, 190, 197, 3, 27, 190, 242, 73, 24, 62, 237, 81, 5, 61, 87, 219, 137, 189, 114, 196, 224, 188, 7, 88, 220, 188, 111, 239, 236, 189, 140, 206, 194, 189, 56, 236, 221, 61, 173, 114, 17, 190, 177, 41, 130, 61, 241, 107, 242, 61, 150, 132, 218, 61, 167, 8, 221, 189, 223, 141, 48, 190, 225, 192, 59, 190, 27, 237, 187, 61, 156, 6, 110, 187, 196, 236, 9, 189, 186, 87, 186, 189, 228, 62, 0, 61, 142, 77, 22, 189, 27, 102, 200, 60, 209, 191, 17, 189, 35, 215, 161, 62, 130, 167, 95, 62, 228, 148, 206, 188, 128, 4, 118, 62, 64, 39, 172, 62, 13, 195, 11, 62, 234, 182, 143, 60, 102, 133, 23, 190, 94, 82, 149, 191, 231, 8, 158, 61, 64, 210, 220, 187, 2, 184, 88, 62, 188, 102, 64, 190, 186, 227, 92, 190, 62, 231, 235, 61, 246, 27, 182, 62, 48, 140, 193, 61, 176, 169, 21, 189, 47, 35, 132, 62, 126, 70, 139, 61, 125, 222, 195, 61, 226, 55, 113, 62, 128, 111, 157, 190, 216, 160, 140, 189, 35, 5, 9, 190, 40, 146, 174, 189, 92, 114, 133, 190, 59, 80, 65, 62, 243, 21, 132, 190, 13, 115, 29, 62, 176, 90, 76, 190, 58, 4, 217, 188, 122, 185, 160, 188, 121, 86, 188, 60, 206, 107, 9, 189, 123, 123, 225, 189, 142, 201, 129, 61, 147, 119, 190, 61, 33, 217, 210, 188, 15, 214, 27, 61, 9, 114, 15, 190, 60, 31, 173, 189, 212, 26, 228, 60, 91, 12, 50, 189, 177, 88, 14, 190, 39, 156, 214, 189, 157, 115, 15, 190, 43, 165, 29, 190, 29, 107, 49, 190, 111, 86, 50, 60, 130, 20, 252, 60, 130, 34, 209, 189, 251, 142, 15, 190, 59, 119, 185, 61, 143, 121, 249, 189, 202, 2, 209, 189, 7, 106, 217, 189, 173, 42, 117, 189, 126, 171, 1, 190, 41, 69, 241, 61, 140, 236, 62, 190, 207, 203, 175, 188, 240, 101, 121, 189, 95, 49, 115, 61, 55, 21, 19, 62, 192, 218, 68, 190, 208, 239, 40, 62, 191, 249, 148, 190, 236, 113, 33, 62, 77, 89, 168, 62, 23, 212, 5, 190, 191, 171, 102, 190, 134, 68, 112, 62, 126, 86, 88, 61, 171, 250, 12, 190, 16, 53, 156, 61, 142, 201, 166, 62, 252, 242, 157, 189, 66, 72, 235, 188, 152, 36, 152, 60, 35, 241, 48, 190, 5, 34, 48, 190, 44, 0, 69, 62, 209, 175, 242, 189, 93, 214, 21, 189, 36, 206, 21, 61, 4, 221, 17, 63, 122, 211, 241, 61, 70, 170, 79, 188, 8, 197, 16, 189, 40, 71, 94, 62, 204, 39, 34, 190, 189, 28, 171, 62, 68, 152, 33, 188, 188, 93, 130, 190, 185, 0, 212, 61, 215, 247, 3, 62, 188, 10, 41, 189, 70, 104, 199, 61, 7, 60, 192, 60, 167, 234, 135, 190, 40, 139, 221, 190, 70, 27, 203, 61, 32, 116, 184, 61, 7, 251, 82, 190, 139, 192, 127, 61, 245, 145, 210, 61, 203, 155, 37, 190, 152, 66, 16, 61, 43, 71, 228, 187, 49, 55, 132, 62, 57, 147, 182, 189, 122, 151, 221, 61, 98, 48, 74, 190, 112, 116, 15, 190, 94, 136, 45, 62, 13, 31, 142, 62, 167, 103, 240, 61, 12, 36, 88, 190, 249, 111, 17, 62, 11, 160, 130, 190, 232, 233, 188, 61, 191, 59, 159, 189, 162, 20, 87, 190, 163, 175, 0, 61, 106, 82, 31, 60, 223, 232, 92, 62, 250, 127, 185, 190, 234, 46, 187, 62, 235, 142, 234, 190, 98, 229, 68, 189, 93, 141, 169, 191, 188, 158, 67, 191, 106, 140, 25, 63, 205, 241, 219, 61, 68, 2, 120, 191, 71, 7, 165, 62, 82, 207, 95, 190, 182, 166, 170, 190, 46, 43, 158, 191, 24, 126, 24, 61, 21, 5, 242, 61, 238, 112, 93, 60, 64, 2, 174, 190, 99, 7, 60, 190, 194, 113, 86, 61, 19, 89, 129, 62, 137, 143, 254, 61, 40, 76, 118, 62, 193, 237, 137, 62, 69, 32, 38, 62, 143, 84, 186, 190, 139, 250, 125, 62, 133, 1, 79, 191, 12, 225, 17, 62, 10, 157, 25, 61, 124, 4, 188, 61, 125, 168, 227, 190, 111, 35, 71, 191, 16, 224, 134, 62, 192, 12, 185, 191, 29, 159, 33, 188, 175, 174, 156, 61, 48, 85, 184, 189, 85, 252, 78, 191, 248, 126, 250, 61, 29, 42, 206, 62, 181, 77, 225, 188, 149, 161, 214, 62, 19, 253, 117, 61, 145, 36, 20, 191, 250, 86, 222, 61, 31, 107, 137, 62, 222, 180, 234, 62, 190, 226, 249, 188, 176, 199, 46, 61, 59, 88, 16, 191, 184, 226, 71, 62, 169, 126, 102, 190, 34, 50, 101, 190, 136, 182, 31, 191, 162, 40, 143, 190, 230, 79, 236, 62, 222, 115, 154, 188, 187, 89, 54, 61, 184, 19, 181, 61, 251, 239, 191, 62, 117, 35, 37, 62, 182, 135, 82, 61, 248, 0, 179, 61, 198, 230, 99, 190, 250, 199, 161, 61, 236, 250, 201, 190, 166, 126, 33, 190, 220, 18, 70, 190, 250, 65, 54, 190, 80, 179, 38, 63, 64, 138, 161, 190, 173, 200, 129, 60, 77, 124, 70, 190, 189, 250, 24, 63, 15, 176, 185, 189, 97, 241, 145, 190, 194, 138, 30, 190, 161, 100, 226, 62, 66, 197, 197, 61, 97, 19, 255, 190, 40, 98, 111, 191, 24, 60, 244, 190, 41, 225, 2, 62, 199, 90, 67, 191, 253, 251, 127, 190, 16, 113, 108, 189, 14, 157, 179, 190, 77, 79, 66, 61, 93, 162, 229, 62, 253, 83, 76, 62, 182, 81, 151, 59, 238, 57, 136, 62, 92, 146, 167, 62, 217, 71, 184, 61, 42, 68, 11, 62, 106, 191, 233, 62, 233, 197, 17, 63, 110, 143, 38, 191, 134, 168, 112, 62, 200, 78, 170, 61, 105, 131, 136, 62, 235, 78, 81, 63, 56, 202, 250, 61, 178, 21, 244, 189, 60, 236, 21, 62, 28, 191, 110, 62, 8, 196, 218, 62, 139, 206, 104, 62, 176, 202, 113, 62, 88, 144, 251, 61, 197, 62, 142, 189, 155, 210, 210, 190, 149, 232, 133, 62, 107, 170, 61, 61, 7, 10, 91, 61, 181, 57, 136, 190, 139, 233, 122, 190, 235, 123, 115, 191, 186, 247, 89, 191, 170, 197, 63, 63, 35, 54, 12, 62, 67, 60, 205, 191, 205, 128, 146, 61, 233, 52, 11, 189, 200, 220, 2, 60, 233, 248, 1, 63, 113, 13, 119, 62, 248, 103, 246, 59, 211, 115, 193, 61, 105, 59, 12, 63, 221, 205, 61, 189, 239, 23, 143, 62, 167, 102, 56, 189, 196, 227, 100, 191, 77, 22, 51, 62, 93, 144, 34, 188, 96, 239, 17, 61, 232, 63, 134, 191, 212, 48, 199, 61, 233, 122, 134, 62, 150, 240, 167, 188, 126, 241, 140, 190, 253, 83, 133, 61, 142, 241, 127, 62, 182, 85, 249, 62, 219, 246, 1, 62, 5, 247, 43, 62, 113, 78, 150, 62, 60, 87, 7, 62, 73, 199, 126, 62, 45, 205, 230, 61, 208, 82, 183, 191, 108, 166, 48, 190, 160, 31, 37, 191, 47, 83, 142, 190, 88, 50, 192, 189, 241, 189, 3, 190, 159, 169, 37, 191, 60, 165, 92, 62, 89, 108, 49, 189, 96, 199, 172, 62, 234, 205, 30, 190, 181, 234, 57, 61, 130, 82, 17, 191, 231, 114, 39, 62, 165, 145, 175, 62, 54, 64, 117, 190, 166, 155, 155, 189, 182, 216, 26, 62, 207, 103, 43, 62, 113, 141, 8, 62, 179, 22, 83, 61, 239, 69, 8, 191, 104, 79, 222, 189, 63, 185, 185, 61, 247, 40, 134, 191, 134, 193, 61, 62, 180, 233, 189, 188, 142, 59, 97, 62, 116, 201, 142, 190, 188, 219, 73, 190, 46, 78, 141, 188, 222, 41, 112, 190, 209, 104, 21, 189, 190, 149, 133, 190, 242, 251, 216, 189, 223, 188, 153, 189, 122, 12, 126, 189, 38, 86, 53, 58, 207, 33, 45, 62, 157, 207, 49, 190, 239, 73, 25, 191, 84, 76, 141, 190, 239, 191, 52, 59, 143, 32, 129, 61, 167, 50, 3, 189, 61, 33, 79, 62, 128, 65, 215, 62, 154, 208, 239, 190, 78, 213, 165, 189, 244, 228, 53, 62, 196, 176, 36, 191, 44, 131, 34, 62, 3, 255, 80, 62, 255, 187, 13, 62, 245, 236, 113, 190, 238, 232, 207, 190, 106, 8, 46, 62, 63, 127, 69, 62, 68, 159, 42, 62, 253, 75, 143, 61, 121, 147, 135, 190, 190, 151, 27, 189, 65, 222, 161, 189, 154, 194, 198, 189, 94, 67, 44, 191, 130, 34, 154, 61, 135, 170, 72, 62, 6, 32, 199, 189, 206, 34, 202, 189, 14, 27, 173, 61, 242, 151, 228, 190, 156, 119, 58, 61, 43, 144, 209, 62, 166, 72, 140, 190, 224, 89, 208, 62, 240, 211, 220, 62, 227, 107, 160, 62, 243, 177, 157, 61, 178, 139, 157, 190, 122, 180, 166, 189, 246, 161, 64, 189, 203, 49, 126, 62, 147, 84, 80, 190, 135, 105, 226, 60, 38, 68, 163, 62, 155, 80, 173, 62, 242, 177, 4, 189, 188, 5, 194, 190, 248, 33, 46, 189, 116, 192, 183, 62, 201, 40, 15, 62, 24, 218, 124, 62, 88, 164, 17, 62, 108, 247, 209, 189, 103, 141, 200, 61, 9, 242, 165, 62, 29, 28, 151, 191, 33, 207, 143, 188, 22, 17, 154, 60, 26, 191, 105, 62, 85, 116, 140, 190, 37, 142, 121, 189, 228, 151, 66, 191, 30, 14, 24, 188, 179, 195, 218, 61, 32, 140, 88, 61, 94, 224, 175, 59, 79, 211, 30, 62, 240, 109, 10, 62, 46, 233, 252, 61, 200, 97, 76, 191, 184, 202, 150, 62, 248, 105, 57, 61, 173, 0, 49, 59, 91, 95, 21, 191, 111, 14, 244, 189, 155, 26, 66, 189, 163, 202, 105, 189, 137, 63, 75, 189, 20, 225, 97, 62, 136, 84, 108, 189, 82, 31, 106, 62, 142, 106, 178, 61, 177, 80, 141, 62, 27, 88, 137, 62, 9, 141, 214, 187, 226, 172, 139, 60, 1, 223, 220, 60, 114, 224, 200, 190, 242, 162, 62, 190, 105, 235, 120, 190, 136, 104, 245, 59, 110, 209, 210, 61, 51, 5, 168, 60, 163, 27, 57, 190, 178, 251, 229, 189, 109, 223, 48, 191, 241, 130, 19, 190, 161, 236, 130, 190, 39, 83, 137, 190, 170, 93, 186, 60, 90, 15, 51, 191, 206, 65, 126, 191, 7, 243, 99, 189, 17, 216, 2, 61, 51, 136, 239, 190, 97, 160, 139, 60, 72, 47, 164, 190, 172, 243, 162, 61, 138, 56, 109, 190, 191, 144, 150, 62, 174, 112, 113, 62, 38, 229, 30, 190, 176, 180, 242, 189, 221, 71, 100, 61, 139, 142, 207, 189, 200, 181, 169, 190, 10, 28, 62, 61, 251, 124, 89, 189, 236, 254, 51, 62, 114, 240, 91, 189, 99, 208, 8, 190, 247, 158, 135, 61, 76, 253, 159, 61, 220, 128, 151, 62, 5, 232, 91, 187, 148, 42, 68, 59, 201, 20, 171, 188, 21, 56, 253, 190, 195, 4, 187, 60, 74, 107, 160, 62, 249, 221, 4, 62, 81, 185, 89, 62, 130, 212, 186, 189, 188, 220, 221, 190, 109, 8, 162, 190, 162, 114, 236, 189, 9, 165, 141, 61, 112, 252, 216, 190, 235, 113, 178, 61, 157, 35, 203, 189, 3, 128, 139, 60, 199, 210, 137, 61, 238, 24, 136, 190, 29, 77, 19, 190, 92, 38, 43, 187, 3, 148, 22, 62, 194, 28, 254, 60, 59, 13, 55, 190, 118, 138, 10, 62, 192, 115, 120, 62, 191, 109, 142, 62, 132, 57, 26, 191, 30, 184, 87, 62, 31, 205, 165, 60, 104, 107, 148, 189, 70, 165, 47, 60, 18, 46, 170, 190, 196, 165, 151, 190, 141, 227, 13, 62, 214, 155, 19, 59, 186, 224, 150, 189, 164, 178, 180, 61, 219, 59, 78, 191, 47, 207, 187, 60, 148, 171, 115, 191, 120, 52, 255, 59, 70, 114, 0, 191, 238, 4, 129, 62, 201, 98, 166, 190, 121, 221, 36, 189, 194, 189, 130, 187, 85, 114, 185, 61, 40, 72, 35, 190, 213, 121, 203, 62, 49, 60, 77, 62, 46, 139, 45, 62, 239, 179, 220, 61, 214, 127, 67, 61, 120, 39, 119, 190, 71, 191, 107, 62, 71, 91, 66, 62, 219, 224, 101, 61, 17, 139, 35, 62, 169, 210, 115, 62, 199, 38, 91, 189, 16, 114, 247, 189, 38, 95, 159, 62, 81, 124, 176, 62, 41, 22, 15, 61, 0, 1, 137, 62, 159, 63, 184, 190, 52, 186, 118, 190, 216, 190, 180, 190, 168, 129, 8, 62, 195, 1, 30, 191, 7, 194, 36, 190, 118, 7, 107, 191, 111, 120, 33, 191, 217, 219, 79, 63, 209, 82, 77, 62, 107, 215, 88, 191, 233, 93, 135, 190, 18, 27, 11, 61, 206, 49, 30, 189, 219, 26, 113, 191, 99, 243, 152, 190, 207, 57, 18, 62, 181, 217, 139, 61, 205, 77, 151, 189, 96, 22, 138, 190, 199, 146, 72, 190, 251, 54, 38, 63, 209, 48, 145, 62, 221, 64, 126, 62, 74, 58, 91, 61, 40, 234, 87, 62, 117, 2, 244, 190, 81, 225, 23, 62, 174, 214, 132, 191, 72, 19, 173, 189, 125, 112, 72, 62, 65, 209, 12, 61, 203, 229, 65, 190, 27, 110, 2, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 21, 223, 61, 137, 213, 58, 62, 196, 169, 158, 190, 80, 159, 141, 189, 68, 255, 51, 189, 120, 227, 43, 190, 105, 157, 171, 188, 247, 184, 1, 62, 141, 187, 53, 62, 150, 21, 228, 61, 200, 123, 74, 190, 205, 144, 50, 62, 139, 208, 147, 62, 233, 196, 231, 61, 250, 12, 21, 189, 19, 72, 34, 62, 251, 23, 91, 189, 157, 159, 118, 188, 81, 30, 80, 61, 61, 180, 120, 62, 95, 71, 155, 61, 16, 90, 151, 190, 51, 123, 175, 190, 33, 211, 80, 62, 212, 28, 188, 190, 155, 173, 13, 62, 127, 188, 184, 60, 52, 7, 150, 62, 65, 213, 198, 61, 157, 209, 208, 61, 55, 89, 242, 61, 110, 208, 207, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 181, 28, 191, 89, 109, 225, 62, 21, 128, 243, 190, 188, 136, 244, 189, 49, 189, 242, 61, 56, 147, 31, 61, 236, 47, 6, 189, 52, 44, 76, 62, 96, 73, 58, 191, 2, 19, 76, 190, 91, 66, 243, 61, 252, 27, 151, 190, 113, 115, 133, 62, 86, 130, 206, 189, 190, 133, 37, 189, 168, 240, 148, 62, 43, 214, 130, 189, 153, 33, 70, 190, 81, 248, 135, 188, 94, 82, 61, 191, 73, 69, 18, 191, 101, 197, 78, 63, 200, 13, 20, 191, 47, 94, 52, 63, 23, 22, 26, 63, 254, 86, 247, 62, 26, 83, 159, 62, 203, 216, 128, 61, 127, 140, 97, 190, 119, 35, 190, 61, 193, 67, 194, 190, 163, 214, 114, 191, 107, 23, 208, 189, 19, 20, 89, 190, 37, 207, 236, 61, 110, 142, 5, 60, 148, 57, 218, 190, 212, 102, 143, 61, 163, 44, 231, 61, 181, 212, 223, 188, 45, 233, 162, 62, 40, 186, 226, 190, 19, 199, 25, 190, 155, 239, 31, 60, 1, 152, 146, 190, 228, 154, 109, 60, 192, 153, 2, 62, 15, 139, 153, 62, 158, 1, 183, 60, 134, 109, 222, 60, 167, 47, 85, 190, 60, 255, 34, 62, 191, 20, 85, 61, 92, 186, 44, 61, 141, 96, 23, 61, 121, 7, 61, 190, 50, 3, 49, 61, 86, 69, 184, 62, 207, 226, 251, 61, 120, 195, 245, 190, 142, 162, 170, 190, 120, 134, 32, 190, 202, 107, 15, 190, 103, 215, 56, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 115, 126, 62, 185, 0, 97, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {189, 223, 30, 191, 225, 185, 24, 63, 150, 203, 207, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {255, 209, 142, 190, 176, 72, 212, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0023/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}