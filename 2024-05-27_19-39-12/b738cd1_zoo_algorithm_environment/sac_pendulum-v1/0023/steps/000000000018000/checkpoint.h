// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 117, 7, 191, 78, 16, 130, 191, 11, 123, 9, 191, 240, 181, 242, 190, 39, 177, 152, 191, 234, 107, 48, 190, 45, 162, 13, 187, 2, 193, 252, 190, 69, 8, 70, 62, 119, 207, 34, 62, 210, 242, 212, 190, 170, 50, 70, 62, 140, 34, 224, 190, 104, 53, 222, 62, 37, 12, 65, 63, 238, 89, 30, 63, 132, 134, 128, 191, 224, 43, 135, 190, 72, 1, 1, 191, 174, 117, 57, 191, 249, 106, 138, 62, 86, 226, 96, 62, 94, 184, 176, 62, 127, 222, 197, 189, 147, 103, 175, 190, 160, 254, 27, 63, 98, 18, 14, 63, 55, 212, 122, 63, 15, 79, 53, 63, 208, 136, 181, 62, 110, 67, 87, 61, 140, 88, 161, 191, 8, 144, 139, 190, 67, 98, 156, 62, 172, 239, 147, 191, 251, 12, 87, 190, 17, 207, 133, 62, 127, 174, 15, 191, 185, 72, 202, 186, 151, 112, 21, 63, 52, 242, 78, 63, 59, 232, 51, 63, 78, 20, 157, 62, 245, 64, 201, 62, 27, 184, 164, 189, 174, 52, 36, 191, 217, 172, 76, 190, 245, 67, 6, 62, 203, 106, 47, 63, 255, 41, 150, 191, 180, 118, 2, 190, 175, 199, 208, 62, 226, 57, 173, 191, 150, 174, 90, 190, 25, 94, 155, 62, 161, 162, 39, 63, 240, 107, 30, 191, 47, 118, 54, 191, 59, 154, 134, 191, 233, 222, 82, 62, 170, 138, 21, 191, 16, 94, 58, 190, 32, 122, 241, 189, 203, 134, 44, 191, 248, 53, 178, 190, 84, 215, 27, 61, 246, 95, 234, 190, 249, 249, 211, 190, 153, 137, 44, 190, 95, 179, 30, 191, 221, 142, 169, 191, 239, 80, 220, 190, 149, 104, 25, 62, 198, 42, 160, 63, 72, 229, 157, 62, 196, 112, 54, 191, 29, 102, 75, 63, 138, 116, 17, 190, 109, 153, 102, 62, 34, 118, 128, 63, 182, 170, 187, 62, 45, 203, 75, 63, 142, 172, 56, 63, 250, 166, 55, 63, 126, 69, 177, 190, 103, 79, 218, 62, 214, 78, 219, 190, 196, 89, 109, 191, 159, 12, 155, 191, 107, 37, 146, 190, 79, 156, 54, 61, 103, 67, 80, 191, 61, 88, 45, 63, 39, 77, 242, 190, 12, 39, 117, 63, 57, 46, 75, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 235, 189, 190, 243, 54, 20, 63, 238, 99, 238, 190, 220, 6, 237, 62, 29, 235, 250, 190, 87, 136, 14, 191, 103, 33, 1, 191, 147, 246, 41, 63, 167, 91, 9, 191, 31, 186, 79, 191, 131, 192, 149, 61, 217, 188, 246, 60, 18, 242, 102, 61, 136, 188, 3, 190, 226, 227, 152, 62, 71, 186, 32, 63, 72, 129, 8, 190, 149, 189, 6, 61, 231, 29, 26, 190, 107, 55, 187, 61, 104, 71, 18, 63, 136, 120, 42, 63, 246, 152, 39, 63, 180, 131, 179, 61, 203, 15, 187, 61, 48, 52, 227, 62, 99, 88, 147, 60, 238, 57, 132, 61, 17, 42, 162, 190, 133, 254, 172, 62, 26, 238, 63, 189, 253, 163, 189, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 171, 15, 190, 54, 247, 14, 189, 200, 93, 67, 191, 207, 73, 90, 190, 189, 117, 233, 191, 21, 139, 34, 191, 46, 139, 47, 191, 108, 164, 139, 62, 196, 76, 130, 190, 91, 126, 63, 190, 146, 163, 143, 190, 5, 15, 133, 190, 128, 88, 133, 191, 139, 227, 18, 191, 180, 182, 243, 61, 182, 128, 75, 62, 29, 12, 220, 188, 148, 239, 95, 190, 24, 76, 10, 60, 238, 122, 64, 190, 202, 99, 44, 62, 160, 131, 114, 61, 139, 133, 39, 188, 250, 79, 193, 190, 105, 37, 35, 191, 234, 112, 51, 62, 57, 177, 135, 191, 53, 173, 222, 190, 35, 213, 228, 61, 191, 125, 254, 61, 211, 141, 28, 191, 255, 10, 32, 189, 79, 131, 169, 190, 186, 253, 228, 62, 35, 21, 170, 62, 138, 204, 110, 62, 6, 128, 208, 59, 202, 100, 31, 191, 16, 117, 58, 190, 58, 214, 45, 62, 132, 250, 30, 190, 242, 255, 35, 191, 138, 224, 134, 189, 181, 243, 110, 62, 184, 209, 96, 62, 243, 234, 189, 188, 208, 178, 109, 190, 84, 77, 141, 189, 163, 77, 148, 62, 134, 45, 156, 62, 224, 249, 156, 62, 240, 120, 109, 61, 117, 136, 238, 60, 165, 87, 226, 61, 172, 173, 84, 62, 41, 203, 194, 191, 54, 66, 25, 61, 217, 182, 12, 189, 225, 90, 241, 189, 71, 27, 54, 189, 206, 35, 166, 190, 104, 50, 74, 191, 192, 128, 147, 61, 198, 209, 35, 62, 157, 185, 208, 190, 120, 229, 23, 190, 157, 162, 59, 62, 166, 91, 171, 189, 105, 134, 163, 62, 21, 197, 235, 62, 72, 240, 166, 62, 14, 69, 212, 188, 129, 96, 142, 62, 202, 140, 50, 62, 11, 147, 138, 62, 234, 29, 176, 62, 152, 193, 198, 61, 208, 35, 199, 189, 167, 222, 174, 62, 70, 74, 42, 62, 188, 65, 84, 190, 24, 173, 14, 62, 85, 163, 185, 190, 36, 33, 138, 62, 225, 42, 188, 189, 169, 231, 1, 191, 64, 175, 189, 189, 209, 231, 40, 63, 73, 119, 187, 60, 195, 24, 151, 59, 128, 146, 221, 61, 149, 184, 159, 190, 15, 234, 80, 191, 236, 255, 201, 61, 164, 96, 40, 62, 187, 228, 174, 188, 111, 11, 158, 61, 3, 184, 32, 62, 131, 16, 176, 61, 34, 173, 95, 189, 153, 72, 42, 190, 101, 186, 153, 189, 245, 162, 214, 61, 234, 189, 113, 61, 15, 25, 249, 189, 101, 6, 141, 61, 98, 78, 139, 59, 217, 151, 154, 189, 20, 36, 14, 190, 41, 38, 53, 60, 73, 76, 5, 190, 228, 203, 138, 189, 121, 163, 143, 61, 219, 63, 49, 190, 65, 202, 15, 62, 178, 249, 75, 61, 119, 68, 24, 190, 164, 111, 175, 61, 114, 97, 72, 190, 31, 148, 63, 190, 161, 233, 138, 60, 188, 144, 46, 189, 120, 91, 62, 61, 96, 22, 32, 190, 80, 235, 139, 189, 208, 148, 160, 189, 154, 58, 10, 62, 252, 76, 30, 190, 91, 191, 93, 61, 183, 177, 29, 189, 105, 57, 124, 190, 12, 221, 130, 61, 188, 2, 141, 191, 253, 25, 176, 190, 181, 206, 132, 190, 215, 79, 153, 62, 175, 111, 116, 191, 68, 159, 15, 191, 188, 88, 46, 62, 177, 29, 196, 61, 238, 74, 133, 190, 16, 76, 21, 189, 65, 252, 152, 62, 209, 50, 75, 188, 158, 82, 103, 62, 47, 13, 69, 60, 92, 8, 56, 62, 11, 46, 10, 62, 76, 245, 86, 190, 55, 101, 40, 62, 158, 145, 194, 61, 253, 18, 219, 60, 90, 197, 34, 191, 105, 160, 141, 190, 43, 240, 95, 191, 48, 55, 182, 61, 43, 40, 130, 190, 36, 227, 49, 61, 162, 231, 62, 190, 26, 121, 242, 190, 19, 43, 173, 60, 42, 204, 68, 189, 92, 108, 173, 189, 240, 143, 238, 189, 53, 248, 137, 61, 206, 198, 33, 190, 149, 242, 151, 61, 169, 47, 78, 190, 188, 190, 53, 190, 254, 244, 8, 190, 107, 132, 156, 189, 235, 233, 114, 189, 38, 79, 14, 189, 253, 205, 194, 60, 129, 65, 62, 61, 57, 232, 131, 61, 254, 136, 160, 189, 230, 207, 9, 61, 2, 100, 206, 189, 137, 21, 45, 190, 39, 10, 194, 61, 205, 195, 174, 61, 175, 8, 139, 189, 26, 254, 239, 61, 57, 222, 40, 60, 115, 123, 95, 59, 98, 110, 172, 187, 149, 89, 139, 189, 200, 44, 48, 61, 55, 5, 93, 187, 199, 101, 195, 189, 160, 215, 135, 60, 77, 38, 17, 190, 61, 85, 240, 188, 196, 51, 103, 189, 79, 43, 203, 189, 113, 138, 11, 62, 178, 185, 195, 188, 145, 194, 162, 61, 192, 67, 10, 189, 66, 15, 139, 189, 255, 2, 147, 61, 225, 208, 2, 62, 18, 47, 1, 62, 253, 218, 19, 190, 122, 17, 7, 190, 229, 6, 208, 189, 202, 18, 110, 189, 16, 2, 48, 188, 146, 64, 158, 189, 158, 122, 99, 61, 138, 122, 32, 190, 155, 236, 135, 60, 104, 37, 145, 61, 42, 234, 40, 190, 250, 45, 0, 189, 37, 54, 9, 62, 221, 235, 55, 61, 41, 201, 76, 60, 202, 93, 137, 61, 75, 232, 5, 61, 193, 89, 29, 190, 103, 216, 179, 189, 24, 72, 52, 190, 208, 108, 184, 61, 147, 127, 232, 61, 148, 250, 86, 62, 204, 12, 185, 188, 47, 194, 91, 188, 149, 248, 113, 190, 129, 36, 174, 190, 33, 30, 4, 190, 125, 123, 175, 61, 215, 138, 98, 191, 32, 163, 9, 61, 90, 64, 49, 62, 110, 45, 82, 61, 127, 16, 76, 190, 80, 49, 83, 189, 129, 21, 101, 62, 148, 162, 126, 62, 226, 232, 108, 61, 250, 193, 173, 62, 164, 145, 59, 190, 93, 58, 23, 62, 132, 233, 33, 62, 130, 204, 33, 62, 160, 232, 10, 191, 231, 197, 0, 190, 170, 218, 1, 190, 241, 254, 229, 61, 1, 71, 137, 189, 205, 76, 6, 62, 26, 45, 209, 189, 159, 146, 202, 61, 94, 80, 167, 62, 182, 23, 160, 190, 47, 8, 115, 190, 45, 242, 183, 190, 49, 100, 112, 62, 203, 151, 139, 191, 165, 193, 114, 191, 123, 137, 154, 62, 177, 237, 39, 62, 21, 1, 51, 191, 109, 33, 225, 61, 50, 15, 193, 190, 238, 215, 25, 190, 188, 230, 208, 189, 199, 123, 211, 62, 164, 156, 212, 62, 207, 64, 162, 189, 189, 123, 223, 190, 22, 47, 237, 190, 180, 134, 148, 190, 79, 43, 92, 190, 195, 6, 175, 60, 171, 247, 245, 189, 82, 171, 50, 61, 54, 144, 117, 62, 148, 64, 146, 59, 114, 21, 44, 62, 233, 173, 149, 61, 26, 171, 186, 62, 118, 56, 84, 62, 2, 6, 171, 62, 0, 53, 126, 190, 75, 149, 221, 190, 47, 24, 145, 188, 239, 27, 182, 191, 187, 81, 0, 62, 40, 2, 100, 62, 90, 116, 228, 61, 87, 33, 163, 191, 244, 56, 107, 186, 77, 8, 127, 62, 68, 118, 48, 187, 197, 189, 55, 190, 201, 66, 0, 189, 32, 120, 96, 188, 4, 38, 26, 190, 164, 119, 45, 62, 226, 158, 168, 62, 202, 51, 206, 61, 2, 85, 13, 62, 178, 14, 17, 61, 69, 180, 69, 62, 139, 175, 162, 61, 25, 63, 84, 190, 211, 191, 13, 191, 97, 54, 189, 190, 176, 115, 141, 191, 10, 195, 221, 61, 140, 221, 243, 190, 183, 188, 105, 61, 21, 182, 93, 62, 39, 134, 167, 189, 186, 225, 241, 190, 89, 149, 38, 60, 23, 249, 181, 189, 168, 195, 228, 189, 217, 201, 11, 60, 60, 9, 158, 60, 5, 6, 213, 61, 222, 171, 209, 189, 120, 173, 127, 61, 89, 93, 217, 61, 13, 2, 172, 189, 30, 115, 10, 62, 204, 83, 146, 61, 94, 237, 48, 190, 96, 217, 164, 61, 91, 53, 2, 190, 10, 58, 33, 190, 238, 75, 24, 190, 101, 79, 143, 189, 167, 110, 66, 189, 154, 155, 49, 62, 142, 75, 79, 185, 201, 79, 62, 190, 98, 60, 59, 190, 99, 99, 247, 61, 253, 147, 164, 189, 212, 75, 147, 61, 118, 82, 247, 61, 32, 69, 212, 61, 40, 34, 23, 189, 10, 126, 133, 189, 53, 214, 52, 190, 248, 119, 70, 61, 13, 96, 22, 189, 85, 113, 20, 62, 6, 138, 51, 190, 171, 10, 104, 190, 15, 251, 3, 191, 60, 87, 50, 62, 103, 28, 60, 191, 28, 176, 98, 191, 83, 65, 43, 190, 239, 81, 229, 61, 159, 105, 97, 190, 5, 218, 162, 61, 79, 28, 166, 190, 76, 201, 49, 190, 209, 208, 172, 188, 236, 198, 198, 62, 116, 155, 140, 62, 176, 176, 158, 61, 13, 141, 161, 190, 35, 100, 177, 189, 90, 193, 148, 189, 159, 6, 158, 189, 72, 185, 72, 61, 18, 167, 150, 61, 214, 236, 8, 62, 21, 157, 46, 61, 189, 7, 129, 190, 240, 65, 183, 188, 209, 161, 187, 61, 23, 214, 88, 62, 23, 176, 7, 62, 59, 160, 31, 61, 124, 84, 196, 190, 170, 71, 188, 190, 242, 213, 188, 189, 198, 97, 104, 61, 209, 117, 168, 62, 162, 10, 54, 62, 230, 214, 77, 62, 38, 117, 67, 188, 128, 38, 215, 190, 181, 241, 131, 62, 133, 224, 38, 60, 35, 139, 2, 191, 139, 39, 24, 190, 59, 83, 168, 61, 60, 167, 86, 62, 109, 145, 123, 188, 105, 151, 44, 62, 28, 213, 20, 61, 106, 33, 59, 61, 115, 238, 64, 189, 154, 51, 169, 62, 79, 113, 4, 190, 169, 191, 86, 62, 174, 19, 135, 61, 53, 190, 148, 62, 154, 89, 117, 190, 187, 9, 29, 61, 8, 2, 230, 189, 22, 201, 42, 62, 77, 208, 213, 189, 70, 134, 126, 188, 111, 207, 14, 190, 138, 118, 16, 62, 212, 5, 172, 62, 212, 53, 130, 60, 232, 252, 114, 61, 164, 135, 19, 62, 127, 70, 8, 190, 40, 147, 108, 189, 141, 255, 243, 61, 188, 179, 206, 57, 0, 210, 10, 190, 182, 36, 182, 189, 126, 150, 101, 61, 208, 91, 66, 190, 8, 230, 59, 61, 237, 183, 194, 61, 197, 241, 24, 190, 125, 227, 135, 189, 7, 193, 0, 190, 25, 227, 4, 62, 0, 73, 74, 190, 234, 214, 164, 186, 65, 66, 67, 190, 120, 96, 115, 61, 220, 127, 64, 190, 135, 241, 157, 189, 212, 136, 252, 61, 109, 148, 211, 189, 241, 211, 69, 189, 148, 134, 3, 190, 225, 115, 202, 189, 98, 219, 55, 190, 78, 247, 30, 61, 152, 6, 16, 190, 63, 8, 106, 60, 241, 223, 135, 189, 7, 224, 80, 190, 118, 241, 13, 190, 154, 53, 143, 61, 103, 204, 54, 190, 137, 208, 209, 188, 126, 136, 241, 61, 159, 60, 226, 189, 196, 221, 3, 190, 197, 3, 27, 190, 242, 73, 24, 62, 237, 81, 5, 61, 87, 219, 137, 189, 114, 196, 224, 188, 7, 88, 220, 188, 111, 239, 236, 189, 140, 206, 194, 189, 56, 236, 221, 61, 173, 114, 17, 190, 177, 41, 130, 61, 241, 107, 242, 61, 150, 132, 218, 61, 167, 8, 221, 189, 223, 141, 48, 190, 225, 192, 59, 190, 27, 237, 187, 61, 156, 6, 110, 187, 196, 236, 9, 189, 186, 87, 186, 189, 228, 62, 0, 61, 142, 77, 22, 189, 27, 102, 200, 60, 49, 73, 155, 188, 98, 248, 178, 62, 13, 165, 129, 62, 34, 229, 22, 188, 187, 51, 132, 62, 208, 240, 171, 62, 88, 130, 38, 62, 31, 214, 78, 60, 115, 152, 19, 190, 108, 179, 157, 191, 45, 25, 167, 61, 163, 133, 105, 187, 229, 15, 109, 62, 67, 30, 52, 190, 213, 48, 99, 190, 159, 177, 2, 62, 33, 113, 186, 62, 73, 49, 208, 61, 83, 222, 95, 189, 246, 193, 146, 62, 80, 165, 114, 61, 195, 162, 224, 61, 107, 101, 111, 62, 202, 174, 155, 190, 239, 12, 250, 189, 158, 118, 55, 190, 95, 203, 185, 189, 106, 164, 123, 190, 229, 184, 18, 62, 230, 166, 135, 190, 100, 112, 73, 62, 3, 25, 127, 190, 58, 4, 217, 188, 122, 185, 160, 188, 121, 86, 188, 60, 206, 107, 9, 189, 123, 123, 225, 189, 142, 201, 129, 61, 147, 119, 190, 61, 33, 217, 210, 188, 15, 214, 27, 61, 9, 114, 15, 190, 60, 31, 173, 189, 212, 26, 228, 60, 91, 12, 50, 189, 177, 88, 14, 190, 39, 156, 214, 189, 157, 115, 15, 190, 43, 165, 29, 190, 29, 107, 49, 190, 111, 86, 50, 60, 130, 20, 252, 60, 130, 34, 209, 189, 251, 142, 15, 190, 59, 119, 185, 61, 143, 121, 249, 189, 202, 2, 209, 189, 7, 106, 217, 189, 173, 42, 117, 189, 126, 171, 1, 190, 41, 69, 241, 61, 140, 236, 62, 190, 207, 203, 175, 188, 240, 101, 121, 189, 19, 229, 54, 61, 96, 47, 14, 62, 36, 192, 90, 190, 177, 186, 57, 62, 1, 110, 164, 190, 72, 247, 87, 62, 223, 41, 158, 62, 61, 55, 213, 189, 59, 3, 127, 190, 71, 35, 87, 62, 188, 107, 177, 61, 49, 105, 203, 189, 30, 53, 220, 61, 250, 157, 158, 62, 3, 132, 66, 189, 236, 68, 161, 189, 251, 121, 90, 61, 33, 4, 11, 190, 214, 57, 19, 190, 57, 116, 46, 62, 89, 76, 25, 190, 111, 129, 173, 189, 253, 254, 85, 61, 171, 48, 18, 63, 56, 65, 215, 61, 10, 160, 94, 189, 172, 49, 110, 189, 204, 174, 95, 62, 128, 150, 42, 190, 168, 79, 168, 62, 214, 41, 124, 189, 124, 100, 144, 190, 217, 34, 14, 60, 72, 105, 215, 61, 217, 229, 106, 189, 21, 174, 140, 61, 166, 1, 173, 60, 155, 51, 79, 190, 218, 88, 208, 190, 102, 72, 192, 61, 86, 87, 207, 61, 221, 179, 157, 190, 142, 43, 130, 61, 104, 161, 210, 61, 72, 24, 67, 190, 43, 204, 64, 188, 85, 203, 0, 188, 151, 150, 168, 62, 4, 90, 182, 189, 27, 152, 217, 61, 151, 213, 154, 190, 42, 115, 1, 190, 84, 255, 117, 62, 64, 17, 173, 62, 101, 156, 9, 62, 212, 228, 129, 190, 17, 10, 49, 62, 213, 207, 44, 190, 54, 14, 155, 61, 198, 151, 10, 190, 234, 222, 105, 190, 55, 64, 5, 60, 211, 30, 59, 188, 140, 129, 171, 62, 186, 88, 180, 190, 86, 229, 178, 62, 29, 172, 198, 190, 81, 46, 254, 189, 240, 137, 158, 191, 170, 195, 57, 191, 88, 78, 28, 63, 70, 23, 181, 61, 51, 223, 103, 191, 177, 92, 167, 62, 218, 223, 110, 190, 94, 107, 181, 190, 236, 84, 172, 191, 147, 239, 22, 61, 100, 1, 210, 61, 124, 83, 54, 61, 80, 6, 205, 190, 63, 222, 102, 190, 220, 231, 168, 61, 36, 181, 55, 62, 189, 143, 15, 62, 89, 83, 128, 62, 128, 95, 144, 62, 7, 71, 4, 62, 155, 8, 241, 190, 169, 208, 143, 62, 149, 137, 116, 191, 246, 140, 138, 61, 227, 154, 203, 61, 169, 77, 155, 61, 20, 170, 208, 190, 130, 30, 68, 191, 211, 166, 156, 62, 59, 4, 187, 191, 236, 183, 9, 188, 161, 77, 173, 61, 209, 72, 152, 189, 40, 210, 65, 191, 46, 207, 8, 62, 176, 167, 196, 62, 64, 207, 179, 187, 91, 67, 209, 62, 5, 222, 190, 61, 41, 40, 13, 191, 21, 217, 248, 61, 250, 40, 143, 62, 8, 200, 223, 62, 27, 102, 242, 188, 123, 209, 123, 61, 7, 179, 10, 191, 107, 154, 31, 62, 20, 228, 97, 190, 23, 62, 134, 190, 149, 139, 33, 191, 235, 145, 148, 190, 163, 211, 228, 62, 64, 41, 162, 189, 173, 73, 113, 189, 132, 149, 145, 61, 247, 35, 194, 62, 186, 136, 38, 62, 200, 165, 122, 60, 23, 151, 139, 61, 190, 57, 130, 190, 210, 138, 188, 60, 92, 234, 244, 190, 132, 116, 86, 190, 168, 216, 60, 190, 36, 217, 73, 190, 180, 62, 30, 63, 32, 64, 181, 190, 47, 236, 201, 61, 62, 227, 85, 190, 164, 238, 43, 63, 157, 27, 23, 190, 200, 110, 189, 190, 29, 43, 20, 190, 51, 239, 229, 62, 236, 14, 57, 62, 109, 147, 18, 191, 44, 156, 121, 191, 4, 124, 9, 191, 177, 30, 22, 62, 13, 83, 82, 191, 198, 102, 158, 190, 66, 188, 23, 190, 177, 73, 197, 190, 15, 9, 167, 188, 44, 48, 11, 63, 14, 43, 112, 62, 188, 228, 92, 61, 142, 233, 156, 62, 186, 208, 162, 62, 251, 13, 149, 187, 92, 64, 235, 61, 188, 242, 254, 62, 235, 158, 23, 63, 115, 107, 38, 191, 231, 34, 113, 62, 97, 48, 127, 61, 16, 158, 138, 62, 241, 246, 83, 63, 75, 142, 8, 62, 52, 252, 56, 190, 111, 89, 31, 62, 189, 240, 58, 62, 197, 111, 245, 62, 72, 158, 123, 62, 132, 28, 70, 62, 242, 154, 208, 61, 253, 140, 21, 190, 23, 83, 200, 190, 47, 239, 112, 62, 47, 102, 89, 61, 208, 186, 146, 188, 77, 24, 122, 190, 112, 156, 56, 190, 98, 29, 107, 191, 113, 201, 83, 191, 235, 207, 89, 63, 214, 182, 8, 62, 21, 92, 209, 191, 54, 27, 110, 61, 228, 148, 145, 189, 151, 30, 66, 59, 209, 29, 31, 63, 200, 153, 111, 62, 209, 222, 175, 60, 168, 19, 232, 60, 47, 120, 8, 63, 53, 87, 36, 189, 8, 61, 137, 62, 151, 4, 61, 189, 4, 128, 108, 191, 166, 6, 59, 62, 87, 26, 220, 188, 245, 206, 195, 60, 225, 217, 140, 191, 64, 116, 110, 61, 62, 13, 113, 62, 227, 35, 42, 189, 217, 13, 149, 190, 196, 47, 72, 61, 38, 247, 134, 62, 30, 114, 238, 62, 192, 131, 206, 61, 196, 146, 35, 62, 123, 84, 153, 62, 153, 156, 250, 61, 4, 10, 134, 62, 206, 137, 185, 61, 253, 145, 200, 191, 248, 59, 83, 190, 21, 104, 44, 191, 133, 166, 151, 190, 117, 184, 222, 189, 85, 63, 60, 190, 200, 151, 68, 191, 253, 202, 125, 62, 14, 160, 115, 189, 23, 153, 150, 62, 186, 197, 44, 190, 181, 234, 57, 61, 2, 213, 13, 191, 231, 114, 39, 62, 249, 183, 179, 62, 54, 64, 117, 190, 157, 26, 228, 189, 182, 216, 26, 62, 207, 103, 43, 62, 204, 3, 245, 61, 109, 20, 72, 61, 19, 86, 213, 190, 104, 79, 222, 189, 116, 129, 102, 61, 106, 92, 135, 191, 15, 23, 115, 62, 7, 195, 234, 187, 213, 111, 39, 62, 103, 253, 114, 190, 53, 111, 117, 190, 119, 57, 8, 189, 135, 146, 139, 190, 207, 150, 133, 189, 24, 83, 134, 190, 217, 232, 48, 190, 223, 188, 153, 189, 122, 12, 126, 189, 222, 85, 120, 189, 172, 78, 19, 62, 157, 207, 49, 190, 205, 5, 38, 191, 233, 93, 198, 190, 121, 98, 34, 188, 22, 59, 117, 61, 126, 216, 187, 188, 172, 195, 89, 62, 108, 116, 224, 62, 29, 225, 240, 190, 76, 147, 79, 189, 60, 8, 66, 62, 163, 47, 40, 191, 151, 80, 51, 62, 165, 189, 89, 62, 120, 224, 30, 62, 189, 126, 127, 190, 98, 9, 189, 190, 159, 30, 176, 61, 93, 164, 88, 62, 223, 146, 60, 62, 70, 246, 234, 61, 57, 4, 142, 190, 110, 57, 230, 189, 247, 70, 43, 190, 99, 32, 249, 189, 254, 29, 83, 191, 69, 34, 200, 61, 90, 214, 63, 62, 0, 235, 194, 189, 98, 168, 201, 189, 20, 26, 149, 61, 176, 64, 44, 191, 213, 224, 165, 61, 116, 25, 208, 62, 246, 150, 179, 190, 171, 4, 216, 62, 202, 100, 227, 62, 27, 217, 158, 62, 108, 218, 169, 61, 101, 178, 180, 190, 161, 38, 152, 189, 52, 145, 68, 189, 180, 123, 123, 62, 2, 225, 70, 190, 238, 85, 99, 187, 123, 60, 151, 62, 110, 23, 170, 62, 46, 84, 5, 189, 211, 120, 193, 190, 242, 220, 49, 189, 188, 135, 176, 62, 230, 46, 249, 61, 228, 214, 136, 62, 196, 86, 36, 62, 176, 96, 236, 189, 189, 71, 199, 61, 25, 25, 160, 62, 191, 111, 162, 191, 100, 48, 65, 60, 31, 112, 33, 61, 48, 160, 121, 62, 118, 212, 141, 190, 191, 115, 163, 189, 180, 161, 92, 191, 248, 122, 11, 61, 110, 185, 239, 61, 53, 94, 168, 61, 97, 93, 158, 60, 124, 227, 3, 62, 60, 132, 209, 61, 96, 31, 14, 62, 67, 238, 43, 191, 160, 222, 153, 62, 65, 224, 126, 61, 99, 36, 227, 60, 232, 195, 37, 191, 68, 153, 121, 189, 204, 231, 7, 189, 108, 112, 203, 189, 231, 101, 180, 189, 241, 97, 122, 62, 177, 150, 25, 189, 194, 44, 78, 62, 252, 44, 167, 61, 6, 147, 180, 62, 120, 56, 134, 62, 171, 222, 98, 61, 116, 238, 24, 61, 211, 170, 127, 61, 57, 160, 174, 190, 151, 25, 28, 190, 222, 110, 69, 190, 92, 206, 189, 58, 40, 255, 129, 61, 175, 35, 99, 61, 162, 102, 31, 190, 199, 149, 212, 189, 6, 41, 29, 191, 164, 191, 81, 189, 11, 157, 91, 190, 38, 110, 187, 190, 2, 203, 203, 60, 146, 19, 64, 191, 71, 177, 109, 191, 172, 87, 127, 189, 255, 194, 231, 60, 172, 87, 239, 190, 115, 228, 8, 189, 73, 212, 144, 190, 32, 62, 215, 61, 53, 110, 85, 190, 41, 4, 146, 62, 17, 135, 108, 62, 13, 212, 47, 190, 29, 248, 205, 189, 87, 243, 157, 61, 52, 153, 171, 189, 170, 190, 201, 190, 72, 215, 151, 61, 211, 226, 201, 189, 116, 120, 86, 62, 197, 63, 182, 186, 129, 73, 139, 190, 30, 153, 144, 61, 54, 24, 27, 188, 53, 221, 146, 62, 147, 125, 159, 61, 169, 69, 220, 59, 80, 3, 47, 190, 158, 90, 20, 191, 18, 194, 7, 60, 109, 241, 171, 62, 250, 242, 243, 61, 206, 47, 76, 62, 215, 175, 198, 189, 5, 80, 212, 190, 66, 222, 161, 190, 166, 214, 16, 190, 101, 147, 123, 61, 212, 244, 217, 190, 7, 26, 185, 61, 49, 242, 225, 189, 97, 99, 30, 60, 19, 209, 114, 61, 151, 15, 150, 190, 135, 142, 28, 190, 68, 68, 111, 188, 49, 20, 12, 62, 203, 14, 91, 188, 109, 111, 57, 190, 75, 82, 215, 61, 200, 111, 111, 62, 251, 47, 129, 62, 136, 253, 22, 191, 180, 199, 68, 62, 93, 75, 185, 188, 165, 83, 162, 189, 53, 135, 154, 187, 252, 190, 185, 190, 227, 62, 170, 190, 131, 147, 29, 62, 13, 59, 147, 188, 229, 18, 203, 189, 196, 156, 247, 61, 139, 97, 94, 191, 15, 127, 246, 60, 98, 19, 113, 191, 152, 194, 119, 61, 221, 112, 227, 190, 244, 158, 106, 62, 161, 58, 139, 190, 235, 97, 138, 189, 51, 12, 182, 60, 207, 51, 237, 61, 244, 177, 8, 190, 205, 251, 200, 62, 113, 114, 47, 62, 178, 3, 138, 62, 153, 223, 1, 62, 81, 152, 143, 61, 126, 85, 156, 190, 98, 219, 147, 62, 241, 207, 85, 62, 178, 4, 255, 61, 139, 219, 50, 62, 110, 165, 108, 62, 38, 16, 12, 190, 166, 113, 21, 190, 9, 247, 134, 62, 89, 177, 170, 62, 90, 148, 164, 60, 196, 167, 146, 62, 48, 150, 6, 191, 212, 192, 93, 190, 157, 211, 171, 190, 86, 175, 50, 62, 232, 115, 11, 191, 151, 115, 92, 190, 45, 192, 118, 191, 54, 0, 16, 191, 187, 2, 83, 63, 13, 41, 61, 62, 96, 101, 95, 191, 29, 103, 135, 190, 204, 146, 140, 61, 70, 124, 175, 188, 196, 88, 111, 191, 66, 77, 181, 190, 136, 249, 250, 61, 222, 133, 14, 62, 164, 143, 172, 189, 195, 12, 132, 190, 25, 230, 45, 190, 71, 161, 52, 63, 107, 10, 173, 62, 173, 166, 155, 62, 54, 171, 199, 61, 68, 156, 108, 62, 10, 145, 2, 191, 202, 139, 81, 62, 110, 14, 140, 191, 128, 184, 76, 190, 250, 13, 135, 62, 47, 17, 132, 61, 189, 117, 249, 189, 140, 49, 228, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 94, 197, 61, 83, 122, 72, 62, 136, 215, 180, 190, 56, 20, 158, 189, 202, 153, 97, 189, 120, 227, 43, 190, 105, 157, 171, 188, 168, 204, 252, 61, 102, 254, 44, 62, 147, 100, 191, 61, 200, 123, 74, 190, 163, 123, 42, 62, 152, 242, 153, 62, 233, 196, 231, 61, 250, 12, 21, 189, 165, 3, 38, 62, 251, 23, 91, 189, 80, 55, 206, 59, 249, 170, 71, 61, 90, 238, 89, 62, 167, 7, 131, 61, 86, 143, 110, 190, 11, 18, 194, 190, 129, 178, 64, 62, 186, 197, 201, 190, 250, 20, 31, 62, 92, 93, 168, 60, 112, 88, 151, 62, 22, 140, 194, 61, 56, 52, 162, 61, 83, 97, 222, 61, 242, 122, 202, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 45, 68, 191, 154, 111, 230, 62, 75, 119, 251, 190, 134, 138, 215, 189, 146, 15, 185, 61, 56, 147, 31, 61, 236, 47, 6, 189, 175, 249, 50, 62, 105, 214, 44, 191, 191, 192, 54, 190, 91, 66, 243, 61, 73, 109, 138, 190, 106, 3, 135, 62, 86, 130, 206, 189, 190, 133, 37, 189, 134, 154, 178, 62, 43, 214, 130, 189, 29, 121, 43, 190, 226, 24, 11, 189, 86, 189, 74, 191, 124, 87, 7, 191, 243, 55, 117, 63, 37, 31, 22, 191, 254, 161, 57, 63, 186, 66, 18, 63, 171, 59, 29, 63, 107, 174, 156, 62, 133, 37, 106, 61, 14, 239, 95, 190, 117, 171, 179, 61, 151, 126, 196, 190, 17, 135, 130, 191, 66, 248, 250, 189, 190, 64, 39, 190, 65, 249, 118, 61, 95, 50, 31, 60, 207, 185, 226, 190, 212, 102, 143, 61, 163, 44, 231, 61, 168, 180, 248, 189, 72, 119, 168, 62, 178, 39, 215, 190, 19, 199, 25, 190, 65, 101, 218, 60, 96, 200, 179, 190, 228, 154, 109, 60, 192, 153, 2, 62, 112, 239, 153, 62, 158, 1, 183, 60, 145, 25, 162, 61, 250, 36, 138, 190, 227, 115, 78, 62, 74, 75, 93, 61, 238, 109, 26, 61, 156, 87, 33, 61, 203, 21, 9, 190, 214, 222, 155, 60, 47, 48, 156, 62, 44, 172, 32, 62, 167, 0, 219, 190, 122, 54, 135, 190, 83, 162, 118, 189, 183, 151, 27, 190, 242, 6, 65, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 186, 131, 62, 208, 234, 136, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {141, 204, 133, 63, 192, 223, 177, 62, 177, 46, 53, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 211, 143, 191, 135, 162, 47, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0023/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}