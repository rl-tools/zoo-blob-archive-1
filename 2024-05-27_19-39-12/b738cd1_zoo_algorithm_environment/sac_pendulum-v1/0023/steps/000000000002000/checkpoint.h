// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {142, 131, 187, 189, 157, 4, 192, 190, 76, 107, 27, 191, 18, 76, 36, 190, 237, 78, 64, 191, 238, 200, 242, 189, 109, 73, 24, 190, 73, 163, 78, 191, 230, 36, 34, 62, 230, 99, 214, 62, 82, 93, 161, 190, 54, 204, 102, 62, 97, 241, 11, 191, 141, 25, 79, 191, 22, 85, 106, 62, 127, 170, 113, 61, 116, 219, 195, 190, 71, 192, 44, 190, 53, 14, 47, 61, 195, 202, 16, 191, 16, 10, 126, 62, 3, 79, 154, 62, 164, 159, 11, 63, 11, 15, 53, 190, 3, 204, 27, 191, 185, 57, 166, 189, 144, 217, 188, 62, 153, 157, 111, 189, 62, 250, 244, 62, 225, 60, 205, 62, 70, 108, 137, 62, 158, 138, 157, 190, 1, 0, 208, 190, 120, 248, 132, 62, 114, 177, 46, 191, 165, 83, 45, 190, 110, 226, 22, 188, 124, 87, 30, 191, 166, 9, 6, 62, 86, 115, 244, 62, 56, 157, 169, 62, 181, 238, 28, 63, 153, 95, 10, 62, 190, 191, 39, 63, 136, 170, 10, 190, 116, 212, 233, 190, 85, 91, 81, 62, 46, 29, 207, 61, 227, 5, 54, 63, 209, 253, 84, 190, 251, 153, 174, 190, 98, 35, 154, 62, 186, 237, 83, 191, 163, 157, 107, 190, 142, 165, 56, 63, 98, 24, 230, 62, 12, 213, 220, 190, 110, 20, 217, 190, 34, 131, 147, 190, 201, 218, 139, 61, 223, 50, 8, 191, 93, 194, 232, 60, 185, 26, 36, 61, 206, 42, 232, 190, 125, 66, 201, 62, 214, 16, 228, 189, 140, 37, 228, 189, 238, 58, 120, 189, 232, 106, 198, 189, 211, 48, 157, 190, 248, 251, 66, 190, 119, 210, 65, 190, 77, 210, 5, 190, 98, 186, 151, 62, 40, 25, 238, 62, 233, 72, 239, 190, 208, 1, 20, 63, 84, 105, 123, 190, 209, 216, 70, 60, 37, 186, 66, 191, 159, 211, 134, 62, 166, 16, 93, 63, 43, 115, 199, 62, 126, 163, 17, 63, 203, 26, 221, 190, 171, 154, 23, 63, 205, 9, 159, 190, 186, 104, 25, 191, 195, 240, 208, 189, 95, 160, 252, 190, 113, 64, 164, 190, 1, 22, 160, 191, 135, 198, 253, 62, 35, 117, 212, 190, 227, 64, 52, 62, 68, 155, 91, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 39, 44, 191, 23, 150, 185, 62, 186, 169, 14, 60, 11, 38, 42, 63, 192, 174, 179, 190, 130, 228, 42, 191, 138, 19, 137, 190, 218, 68, 48, 63, 133, 252, 120, 190, 108, 150, 235, 190, 89, 125, 168, 62, 74, 47, 210, 62, 131, 111, 225, 61, 133, 90, 77, 62, 132, 162, 156, 62, 84, 235, 143, 62, 175, 44, 43, 62, 197, 47, 231, 62, 183, 3, 8, 62, 42, 255, 195, 61, 208, 171, 6, 63, 234, 112, 158, 62, 141, 203, 30, 63, 249, 26, 235, 189, 11, 231, 233, 62, 167, 123, 232, 62, 18, 97, 75, 62, 147, 21, 132, 62, 80, 154, 198, 189, 9, 249, 155, 62, 66, 142, 150, 189, 253, 51, 44, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 9, 108, 61, 80, 66, 199, 188, 107, 1, 13, 191, 36, 198, 40, 61, 227, 187, 5, 191, 137, 116, 135, 189, 6, 166, 27, 190, 52, 119, 138, 62, 57, 132, 216, 188, 186, 38, 7, 190, 110, 173, 49, 189, 153, 176, 242, 189, 11, 203, 171, 190, 168, 232, 99, 187, 148, 79, 41, 62, 183, 212, 175, 61, 76, 232, 184, 61, 24, 242, 16, 189, 68, 208, 20, 189, 210, 56, 41, 190, 213, 157, 18, 62, 202, 79, 2, 189, 159, 223, 137, 189, 128, 147, 222, 189, 74, 129, 5, 62, 104, 18, 25, 62, 179, 22, 143, 190, 232, 106, 22, 189, 189, 247, 197, 61, 116, 33, 95, 62, 146, 250, 158, 190, 28, 77, 38, 62, 250, 113, 231, 189, 103, 74, 55, 62, 213, 61, 210, 62, 23, 170, 46, 62, 1, 41, 110, 61, 108, 119, 225, 189, 34, 129, 192, 187, 70, 232, 201, 61, 65, 4, 182, 189, 222, 29, 125, 190, 61, 142, 222, 189, 195, 30, 80, 62, 235, 120, 162, 62, 247, 52, 185, 60, 46, 48, 142, 190, 78, 169, 105, 189, 29, 59, 16, 62, 44, 44, 96, 62, 73, 252, 5, 188, 184, 39, 80, 62, 221, 162, 21, 61, 127, 65, 131, 189, 180, 101, 189, 61, 187, 149, 23, 190, 143, 83, 89, 188, 137, 153, 156, 61, 133, 209, 188, 189, 203, 173, 129, 189, 234, 216, 66, 190, 225, 161, 33, 190, 31, 147, 91, 60, 176, 149, 175, 61, 70, 16, 29, 190, 190, 156, 5, 62, 67, 192, 45, 61, 228, 162, 5, 61, 85, 2, 83, 62, 34, 32, 8, 187, 18, 118, 103, 62, 133, 54, 92, 188, 219, 83, 45, 62, 180, 4, 118, 60, 226, 63, 0, 62, 245, 132, 6, 62, 74, 32, 104, 61, 5, 29, 151, 60, 217, 208, 208, 61, 110, 16, 175, 61, 239, 45, 110, 190, 22, 158, 125, 60, 78, 92, 99, 189, 217, 100, 29, 62, 173, 187, 22, 190, 50, 135, 92, 190, 212, 128, 196, 61, 139, 253, 208, 61, 139, 35, 44, 188, 79, 56, 30, 190, 156, 99, 203, 61, 193, 52, 220, 189, 141, 237, 20, 60, 40, 78, 9, 190, 82, 194, 40, 62, 149, 107, 39, 190, 167, 204, 171, 61, 197, 153, 35, 62, 235, 228, 184, 61, 92, 173, 75, 189, 191, 49, 33, 190, 216, 130, 149, 189, 202, 66, 223, 61, 199, 49, 133, 61, 12, 241, 236, 189, 111, 30, 148, 61, 125, 241, 226, 59, 66, 108, 148, 189, 191, 203, 10, 190, 185, 179, 154, 60, 105, 143, 252, 189, 56, 161, 135, 189, 183, 70, 145, 61, 143, 60, 47, 190, 42, 216, 21, 62, 192, 142, 88, 61, 46, 173, 18, 190, 164, 111, 175, 61, 72, 33, 66, 190, 11, 193, 63, 190, 201, 19, 175, 60, 222, 183, 14, 189, 114, 14, 107, 61, 52, 170, 24, 190, 60, 245, 126, 189, 152, 178, 161, 189, 235, 84, 26, 62, 28, 58, 26, 190, 239, 228, 2, 62, 234, 82, 222, 189, 194, 126, 105, 62, 161, 71, 88, 189, 96, 61, 129, 190, 98, 145, 65, 190, 179, 60, 50, 190, 42, 8, 92, 62, 183, 138, 185, 189, 86, 20, 209, 61, 249, 195, 198, 61, 76, 208, 43, 189, 13, 209, 140, 60, 131, 107, 100, 60, 174, 108, 99, 62, 58, 254, 131, 189, 23, 212, 19, 62, 91, 63, 240, 189, 0, 230, 15, 62, 170, 67, 171, 188, 196, 87, 249, 189, 20, 201, 42, 61, 27, 82, 47, 61, 58, 213, 218, 61, 224, 204, 31, 61, 193, 96, 131, 189, 238, 27, 214, 188, 185, 162, 82, 189, 216, 251, 168, 189, 120, 24, 250, 61, 93, 163, 29, 61, 217, 238, 42, 61, 238, 156, 241, 60, 53, 123, 62, 189, 92, 108, 173, 189, 117, 96, 241, 189, 53, 248, 137, 61, 112, 41, 32, 190, 107, 238, 151, 61, 194, 245, 62, 190, 188, 190, 53, 190, 254, 244, 8, 190, 52, 92, 143, 189, 176, 201, 111, 189, 38, 79, 14, 189, 253, 205, 194, 60, 67, 58, 129, 61, 70, 42, 135, 61, 191, 253, 156, 189, 221, 125, 15, 61, 201, 41, 165, 189, 3, 239, 48, 190, 151, 171, 202, 61, 109, 218, 177, 61, 189, 26, 129, 189, 83, 158, 242, 61, 57, 222, 40, 60, 117, 151, 41, 60, 98, 110, 172, 187, 149, 89, 139, 189, 22, 20, 112, 61, 70, 173, 40, 186, 199, 101, 195, 189, 124, 205, 185, 60, 77, 38, 17, 190, 61, 85, 240, 188, 196, 51, 103, 189, 79, 43, 203, 189, 113, 138, 11, 62, 178, 185, 195, 188, 145, 194, 162, 61, 192, 67, 10, 189, 66, 15, 139, 189, 255, 2, 147, 61, 225, 208, 2, 62, 18, 47, 1, 62, 253, 218, 19, 190, 122, 17, 7, 190, 229, 6, 208, 189, 202, 18, 110, 189, 16, 2, 48, 188, 146, 64, 158, 189, 158, 122, 99, 61, 138, 122, 32, 190, 155, 236, 135, 60, 104, 37, 145, 61, 42, 234, 40, 190, 250, 45, 0, 189, 37, 54, 9, 62, 221, 235, 55, 61, 41, 201, 76, 60, 202, 93, 137, 61, 75, 232, 5, 61, 193, 89, 29, 190, 103, 216, 179, 189, 24, 72, 52, 190, 185, 32, 8, 62, 144, 191, 168, 59, 225, 148, 178, 62, 155, 94, 190, 187, 190, 3, 243, 60, 250, 69, 91, 190, 174, 226, 44, 190, 66, 0, 223, 189, 104, 126, 11, 62, 107, 135, 87, 190, 141, 64, 152, 61, 27, 205, 116, 62, 33, 148, 136, 62, 75, 42, 200, 189, 52, 207, 222, 188, 200, 63, 39, 62, 178, 223, 127, 62, 21, 138, 160, 61, 96, 50, 129, 62, 144, 20, 156, 189, 35, 214, 12, 62, 52, 170, 109, 61, 155, 145, 233, 61, 164, 29, 23, 190, 41, 135, 29, 190, 14, 195, 42, 190, 86, 95, 23, 62, 184, 68, 154, 188, 193, 39, 151, 61, 70, 163, 121, 61, 30, 133, 202, 61, 55, 105, 23, 62, 166, 207, 160, 190, 9, 134, 13, 190, 10, 73, 220, 190, 65, 45, 131, 61, 122, 131, 2, 191, 213, 17, 73, 190, 197, 69, 203, 189, 187, 124, 41, 62, 96, 172, 110, 190, 157, 43, 232, 61, 153, 78, 18, 190, 170, 175, 154, 60, 233, 45, 121, 190, 111, 170, 160, 61, 236, 253, 224, 62, 218, 110, 235, 59, 170, 163, 62, 190, 90, 165, 117, 190, 98, 178, 80, 190, 97, 132, 161, 189, 22, 29, 149, 61, 90, 52, 64, 61, 20, 50, 73, 61, 218, 198, 3, 62, 7, 133, 227, 61, 213, 74, 224, 61, 195, 7, 78, 190, 231, 182, 97, 61, 194, 189, 88, 61, 71, 64, 143, 62, 191, 137, 1, 190, 103, 204, 50, 61, 202, 13, 78, 61, 127, 255, 121, 190, 117, 12, 134, 62, 11, 64, 126, 62, 234, 213, 44, 188, 154, 64, 186, 61, 67, 66, 235, 61, 76, 109, 227, 61, 197, 233, 72, 190, 129, 107, 84, 190, 152, 84, 235, 188, 234, 101, 6, 187, 166, 7, 142, 188, 243, 154, 10, 62, 99, 41, 76, 62, 182, 230, 146, 61, 175, 12, 2, 190, 109, 60, 135, 61, 163, 214, 232, 61, 195, 40, 22, 62, 5, 60, 129, 189, 224, 204, 150, 189, 53, 76, 143, 189, 129, 181, 25, 61, 151, 126, 114, 61, 11, 206, 93, 190, 121, 117, 157, 60, 162, 210, 88, 62, 238, 169, 218, 58, 0, 103, 57, 190, 218, 193, 117, 61, 17, 172, 217, 189, 168, 195, 228, 189, 217, 201, 11, 60, 60, 9, 158, 60, 5, 6, 213, 61, 222, 171, 209, 189, 120, 173, 127, 61, 89, 93, 217, 61, 13, 2, 172, 189, 30, 115, 10, 62, 204, 83, 146, 61, 94, 237, 48, 190, 96, 217, 164, 61, 91, 53, 2, 190, 10, 58, 33, 190, 238, 75, 24, 190, 101, 79, 143, 189, 167, 110, 66, 189, 154, 155, 49, 62, 142, 75, 79, 185, 201, 79, 62, 190, 98, 60, 59, 190, 99, 99, 247, 61, 253, 147, 164, 189, 212, 75, 147, 61, 118, 82, 247, 61, 32, 69, 212, 61, 40, 34, 23, 189, 10, 126, 133, 189, 53, 214, 52, 190, 248, 119, 70, 61, 13, 96, 22, 189, 85, 113, 20, 62, 112, 244, 71, 190, 26, 173, 44, 190, 63, 167, 246, 190, 188, 98, 222, 61, 153, 236, 94, 190, 9, 222, 176, 189, 188, 145, 151, 61, 76, 113, 207, 61, 218, 148, 178, 61, 45, 54, 109, 62, 134, 153, 183, 189, 9, 242, 12, 190, 166, 35, 83, 190, 97, 183, 130, 62, 251, 199, 152, 62, 33, 12, 179, 61, 212, 9, 114, 190, 203, 124, 42, 189, 207, 46, 143, 61, 32, 171, 150, 188, 142, 98, 131, 188, 48, 150, 8, 62, 208, 162, 166, 61, 67, 24, 84, 189, 72, 49, 201, 189, 147, 229, 112, 189, 69, 109, 211, 61, 151, 91, 190, 61, 16, 10, 145, 61, 90, 241, 229, 188, 142, 18, 36, 189, 76, 0, 218, 59, 199, 127, 101, 189, 2, 45, 116, 189, 236, 214, 226, 62, 5, 248, 3, 62, 177, 35, 83, 62, 154, 72, 20, 61, 201, 61, 133, 190, 78, 173, 76, 62, 97, 158, 208, 60, 44, 26, 124, 190, 4, 187, 252, 189, 224, 33, 238, 61, 240, 250, 194, 62, 96, 145, 5, 189, 89, 148, 9, 62, 60, 235, 14, 188, 79, 233, 82, 61, 199, 46, 72, 189, 58, 173, 56, 62, 54, 70, 114, 189, 22, 10, 67, 62, 123, 127, 166, 189, 241, 14, 74, 62, 7, 221, 6, 62, 185, 140, 163, 189, 59, 167, 240, 189, 74, 99, 11, 62, 21, 73, 47, 190, 93, 220, 116, 189, 208, 61, 61, 60, 103, 245, 161, 61, 16, 78, 57, 62, 135, 172, 3, 61, 6, 96, 152, 61, 85, 229, 22, 62, 255, 22, 12, 190, 40, 147, 108, 189, 99, 135, 16, 62, 103, 240, 229, 59, 170, 218, 253, 189, 182, 36, 182, 189, 126, 150, 101, 61, 197, 68, 54, 190, 70, 210, 112, 61, 202, 200, 205, 61, 197, 241, 24, 190, 26, 85, 129, 189, 215, 102, 228, 189, 207, 53, 13, 62, 0, 235, 63, 190, 132, 136, 130, 60, 221, 160, 42, 190, 98, 70, 172, 61, 112, 157, 40, 190, 237, 95, 112, 189, 38, 111, 14, 62, 109, 148, 211, 189, 86, 170, 166, 188, 40, 142, 3, 190, 48, 245, 204, 189, 159, 133, 23, 190, 75, 42, 89, 61, 189, 4, 14, 190, 63, 8, 106, 60, 121, 93, 129, 189, 43, 34, 76, 190, 177, 215, 11, 190, 89, 26, 143, 61, 155, 196, 54, 190, 137, 208, 209, 188, 126, 136, 241, 61, 120, 153, 219, 189, 117, 52, 3, 190, 197, 3, 27, 190, 18, 155, 27, 62, 99, 168, 23, 61, 134, 217, 134, 189, 114, 196, 224, 188, 247, 105, 197, 188, 141, 111, 226, 189, 94, 156, 191, 189, 130, 66, 231, 61, 147, 71, 16, 190, 79, 186, 141, 61, 141, 41, 254, 61, 111, 45, 228, 61, 189, 103, 211, 189, 76, 172, 43, 190, 11, 20, 59, 190, 200, 17, 198, 61, 214, 224, 84, 187, 196, 236, 9, 189, 101, 76, 176, 189, 17, 22, 23, 61, 31, 36, 23, 189, 89, 241, 216, 60, 230, 137, 94, 60, 139, 185, 249, 61, 37, 48, 240, 59, 135, 216, 36, 190, 158, 204, 94, 62, 47, 137, 26, 62, 224, 206, 129, 189, 253, 162, 115, 61, 227, 175, 180, 189, 242, 20, 7, 188, 77, 166, 134, 61, 5, 168, 107, 189, 185, 143, 188, 61, 88, 227, 144, 60, 91, 124, 44, 190, 231, 87, 157, 60, 245, 144, 63, 62, 10, 87, 48, 188, 15, 207, 113, 189, 212, 222, 171, 186, 182, 224, 214, 60, 249, 57, 170, 58, 68, 189, 51, 62, 190, 221, 149, 61, 61, 236, 135, 61, 243, 101, 228, 60, 83, 88, 21, 61, 39, 28, 133, 189, 111, 130, 247, 61, 62, 109, 209, 189, 138, 97, 149, 60, 91, 183, 168, 189, 190, 128, 90, 60, 67, 73, 13, 188, 121, 86, 188, 60, 145, 108, 8, 189, 123, 123, 225, 189, 117, 42, 139, 61, 147, 119, 190, 61, 157, 172, 136, 60, 15, 214, 27, 61, 9, 114, 15, 190, 232, 37, 144, 189, 222, 187, 3, 61, 91, 12, 50, 189, 177, 88, 14, 190, 229, 130, 130, 189, 56, 148, 8, 190, 50, 182, 29, 190, 179, 103, 47, 190, 148, 96, 63, 61, 130, 20, 252, 60, 69, 135, 147, 189, 235, 109, 6, 190, 180, 206, 0, 62, 232, 127, 249, 189, 57, 123, 208, 189, 4, 150, 135, 189, 173, 42, 117, 189, 90, 38, 1, 190, 40, 248, 34, 62, 134, 177, 30, 190, 207, 203, 175, 188, 87, 65, 57, 189, 246, 20, 188, 61, 22, 79, 217, 61, 216, 234, 166, 190, 56, 188, 4, 62, 113, 68, 69, 190, 177, 13, 226, 61, 95, 195, 67, 62, 141, 227, 172, 189, 174, 224, 116, 189, 237, 161, 253, 188, 186, 116, 117, 61, 168, 117, 107, 190, 18, 52, 167, 189, 15, 205, 56, 62, 75, 65, 96, 61, 0, 33, 9, 61, 25, 45, 253, 187, 150, 221, 99, 190, 196, 4, 95, 189, 142, 159, 123, 60, 81, 243, 224, 189, 131, 114, 33, 61, 200, 211, 133, 61, 101, 170, 19, 62, 136, 11, 27, 62, 30, 197, 144, 61, 248, 126, 234, 189, 60, 138, 190, 61, 9, 76, 159, 59, 172, 151, 187, 61, 101, 178, 26, 189, 223, 99, 220, 59, 56, 159, 84, 61, 194, 146, 108, 60, 189, 199, 74, 62, 78, 111, 33, 62, 151, 216, 157, 60, 96, 55, 54, 189, 246, 26, 59, 190, 133, 246, 45, 62, 206, 77, 94, 61, 185, 41, 57, 188, 29, 107, 154, 61, 50, 170, 2, 62, 247, 179, 6, 62, 229, 188, 210, 60, 39, 212, 20, 62, 134, 83, 16, 62, 22, 140, 65, 189, 254, 217, 207, 61, 201, 252, 4, 190, 159, 227, 139, 189, 144, 75, 184, 61, 206, 35, 163, 61, 224, 202, 252, 60, 52, 58, 228, 188, 40, 132, 114, 61, 237, 110, 20, 190, 19, 120, 165, 61, 70, 100, 194, 189, 218, 130, 195, 188, 225, 76, 215, 60, 67, 57, 90, 61, 179, 174, 151, 61, 189, 121, 172, 190, 141, 174, 54, 62, 117, 91, 45, 191, 228, 172, 157, 60, 1, 47, 20, 191, 196, 182, 232, 189, 97, 122, 38, 190, 128, 206, 18, 62, 100, 86, 93, 189, 82, 231, 14, 190, 50, 91, 3, 190, 35, 184, 125, 190, 83, 150, 87, 191, 203, 99, 250, 61, 54, 152, 14, 62, 181, 230, 29, 62, 169, 215, 162, 189, 112, 199, 203, 188, 98, 29, 185, 189, 193, 54, 21, 189, 219, 89, 22, 62, 127, 16, 103, 62, 94, 108, 86, 62, 54, 53, 212, 188, 54, 171, 195, 61, 251, 61, 125, 62, 25, 132, 176, 190, 84, 203, 173, 61, 171, 215, 132, 60, 255, 168, 106, 188, 60, 197, 4, 191, 182, 253, 32, 190, 108, 242, 194, 60, 43, 35, 152, 190, 62, 72, 166, 189, 174, 190, 196, 61, 212, 162, 81, 189, 245, 67, 40, 190, 35, 84, 238, 61, 40, 66, 23, 62, 65, 159, 193, 189, 95, 70, 81, 62, 72, 61, 136, 61, 9, 47, 107, 190, 174, 196, 26, 189, 61, 186, 70, 62, 210, 92, 129, 62, 174, 139, 102, 61, 232, 145, 8, 190, 14, 114, 101, 190, 187, 78, 112, 61, 65, 248, 58, 190, 215, 242, 251, 189, 33, 82, 148, 190, 76, 122, 43, 189, 160, 20, 20, 62, 61, 106, 194, 189, 206, 132, 85, 190, 137, 87, 181, 61, 111, 56, 166, 62, 77, 66, 152, 189, 230, 15, 53, 190, 8, 218, 14, 62, 34, 34, 37, 190, 197, 5, 230, 61, 81, 17, 101, 190, 231, 143, 80, 189, 41, 29, 129, 190, 120, 143, 192, 189, 99, 135, 29, 190, 127, 107, 62, 188, 64, 147, 238, 61, 214, 91, 214, 189, 31, 155, 161, 61, 222, 70, 93, 189, 19, 169, 98, 189, 193, 29, 146, 190, 100, 29, 213, 61, 78, 70, 127, 62, 180, 197, 114, 190, 182, 43, 88, 189, 20, 121, 99, 189, 1, 131, 134, 62, 58, 214, 56, 190, 151, 217, 163, 189, 115, 200, 143, 61, 242, 20, 43, 190, 128, 3, 192, 61, 131, 103, 129, 62, 159, 28, 139, 61, 39, 39, 29, 190, 21, 244, 183, 189, 138, 219, 125, 62, 107, 27, 236, 61, 202, 37, 72, 61, 103, 201, 128, 62, 100, 145, 141, 61, 251, 23, 224, 61, 21, 35, 52, 62, 240, 114, 105, 62, 71, 184, 27, 62, 208, 180, 157, 61, 2, 151, 177, 61, 150, 77, 40, 188, 70, 195, 26, 61, 168, 38, 5, 62, 141, 118, 205, 61, 15, 63, 152, 189, 59, 244, 93, 62, 19, 29, 70, 62, 90, 60, 34, 61, 84, 202, 124, 190, 227, 206, 228, 60, 7, 225, 32, 190, 194, 22, 19, 61, 203, 197, 144, 190, 141, 99, 125, 187, 125, 196, 66, 190, 175, 111, 161, 190, 144, 1, 201, 188, 165, 47, 26, 62, 61, 70, 153, 190, 48, 254, 165, 61, 118, 114, 235, 61, 101, 103, 20, 59, 114, 253, 43, 190, 89, 72, 115, 62, 135, 19, 173, 61, 131, 230, 41, 189, 27, 60, 116, 61, 7, 29, 38, 190, 85, 127, 46, 62, 253, 18, 195, 189, 199, 37, 170, 59, 248, 123, 107, 189, 178, 7, 184, 59, 222, 11, 2, 188, 49, 255, 233, 189, 109, 122, 32, 190, 24, 165, 243, 60, 119, 26, 92, 189, 182, 143, 44, 190, 197, 157, 83, 61, 199, 27, 2, 188, 167, 202, 51, 62, 17, 95, 51, 190, 156, 185, 220, 58, 254, 216, 152, 60, 26, 18, 107, 188, 180, 69, 133, 188, 194, 118, 4, 190, 55, 217, 16, 190, 71, 45, 241, 189, 165, 131, 21, 189, 57, 194, 168, 189, 232, 219, 104, 189, 152, 57, 47, 62, 177, 72, 50, 190, 168, 185, 47, 62, 169, 223, 194, 189, 177, 42, 75, 62, 127, 159, 49, 190, 210, 13, 189, 61, 206, 29, 35, 190, 39, 98, 44, 62, 46, 141, 250, 189, 162, 23, 25, 190, 112, 150, 44, 60, 182, 216, 26, 62, 207, 103, 43, 62, 161, 27, 172, 61, 200, 253, 125, 189, 200, 23, 189, 189, 14, 81, 215, 189, 236, 180, 168, 61, 215, 23, 201, 190, 41, 136, 59, 62, 137, 27, 229, 189, 159, 47, 6, 62, 201, 252, 156, 61, 76, 50, 81, 59, 199, 219, 57, 62, 151, 228, 2, 190, 107, 55, 224, 189, 138, 132, 44, 190, 108, 189, 218, 188, 248, 216, 166, 60, 2, 45, 252, 188, 0, 122, 174, 189, 94, 142, 19, 62, 139, 28, 13, 190, 48, 169, 26, 190, 163, 104, 162, 61, 250, 74, 21, 189, 164, 177, 142, 62, 166, 237, 77, 189, 7, 179, 143, 62, 93, 121, 161, 61, 129, 236, 111, 190, 110, 50, 202, 188, 235, 191, 49, 62, 44, 109, 96, 190, 214, 120, 54, 62, 149, 109, 58, 62, 160, 153, 56, 62, 194, 24, 144, 189, 60, 230, 129, 190, 80, 131, 200, 61, 249, 162, 16, 189, 228, 25, 188, 61, 45, 206, 8, 62, 110, 210, 64, 58, 8, 106, 131, 189, 164, 123, 4, 190, 167, 77, 229, 189, 158, 40, 247, 61, 75, 98, 135, 60, 74, 88, 8, 189, 132, 232, 10, 189, 196, 171, 212, 60, 7, 55, 160, 61, 138, 232, 193, 61, 5, 121, 250, 61, 115, 75, 147, 61, 4, 175, 66, 61, 209, 93, 105, 62, 167, 114, 237, 62, 42, 121, 134, 62, 168, 185, 212, 61, 35, 46, 61, 190, 219, 8, 149, 61, 222, 53, 117, 187, 130, 105, 105, 62, 5, 192, 1, 61, 99, 220, 135, 188, 153, 63, 141, 62, 71, 225, 199, 62, 143, 174, 36, 60, 212, 149, 127, 190, 128, 81, 72, 189, 246, 73, 138, 62, 125, 125, 90, 61, 131, 238, 63, 62, 180, 140, 152, 62, 37, 190, 61, 189, 37, 24, 139, 188, 52, 148, 112, 62, 95, 204, 243, 189, 7, 93, 63, 189, 106, 80, 146, 189, 180, 134, 103, 62, 14, 119, 138, 190, 191, 106, 19, 189, 85, 243, 48, 190, 6, 117, 206, 188, 190, 56, 119, 188, 169, 227, 153, 61, 69, 162, 152, 61, 42, 159, 193, 61, 80, 121, 90, 61, 102, 200, 165, 61, 24, 109, 142, 61, 184, 217, 2, 62, 142, 144, 179, 60, 106, 170, 213, 61, 108, 147, 192, 60, 11, 27, 26, 61, 58, 181, 197, 189, 224, 160, 97, 189, 75, 105, 197, 59, 232, 179, 41, 62, 213, 107, 2, 190, 244, 73, 226, 61, 157, 104, 5, 61, 110, 41, 151, 61, 154, 167, 55, 61, 70, 58, 61, 188, 112, 30, 28, 189, 144, 220, 139, 60, 67, 245, 228, 61, 125, 154, 168, 60, 96, 219, 58, 60, 94, 75, 188, 61, 220, 25, 12, 62, 83, 177, 220, 61, 157, 21, 34, 189, 211, 180, 33, 190, 214, 229, 55, 190, 101, 131, 227, 189, 147, 243, 26, 190, 9, 75, 154, 188, 70, 244, 74, 189, 160, 50, 168, 190, 223, 25, 155, 189, 112, 211, 68, 62, 124, 13, 75, 61, 232, 44, 30, 190, 37, 117, 8, 62, 137, 58, 20, 190, 3, 162, 57, 61, 124, 48, 100, 190, 60, 3, 249, 61, 76, 160, 154, 62, 77, 205, 187, 60, 38, 228, 49, 190, 151, 185, 197, 60, 254, 110, 214, 189, 255, 50, 229, 189, 134, 91, 7, 62, 68, 70, 16, 62, 73, 11, 60, 62, 213, 16, 138, 187, 84, 44, 14, 61, 229, 95, 38, 62, 16, 108, 223, 188, 176, 51, 25, 62, 22, 58, 124, 61, 178, 93, 136, 60, 66, 232, 133, 61, 85, 227, 91, 61, 141, 182, 40, 62, 8, 238, 62, 62, 49, 231, 133, 62, 64, 23, 30, 62, 125, 244, 164, 189, 48, 244, 90, 190, 150, 230, 8, 190, 213, 44, 229, 189, 225, 153, 152, 61, 84, 129, 56, 190, 3, 115, 38, 62, 81, 78, 67, 189, 240, 65, 65, 62, 227, 194, 34, 61, 149, 217, 84, 190, 39, 195, 77, 190, 64, 47, 177, 60, 103, 4, 34, 62, 136, 8, 195, 60, 63, 9, 233, 189, 64, 26, 252, 61, 104, 82, 177, 61, 198, 87, 80, 62, 72, 19, 57, 190, 116, 152, 32, 62, 180, 248, 31, 62, 191, 131, 152, 189, 57, 245, 139, 189, 42, 179, 55, 190, 162, 200, 16, 189, 86, 157, 243, 61, 94, 107, 154, 189, 221, 122, 94, 189, 130, 193, 147, 188, 149, 102, 33, 191, 200, 158, 34, 190, 173, 81, 204, 190, 61, 3, 4, 62, 143, 101, 21, 190, 22, 135, 95, 62, 189, 0, 155, 189, 16, 130, 100, 188, 246, 199, 131, 61, 83, 114, 4, 188, 118, 20, 176, 190, 244, 202, 33, 62, 57, 203, 111, 62, 65, 119, 10, 62, 84, 107, 149, 61, 25, 6, 5, 189, 131, 32, 246, 189, 82, 202, 227, 61, 245, 247, 217, 61, 121, 9, 111, 61, 240, 9, 154, 61, 85, 103, 123, 189, 86, 135, 194, 189, 111, 143, 123, 189, 185, 217, 187, 61, 247, 147, 199, 61, 165, 155, 89, 62, 220, 234, 16, 62, 212, 254, 236, 189, 50, 146, 140, 60, 0, 118, 136, 190, 187, 52, 184, 189, 61, 175, 96, 191, 237, 245, 188, 189, 6, 196, 187, 190, 132, 13, 251, 189, 24, 200, 255, 61, 205, 97, 32, 62, 116, 117, 91, 59, 69, 19, 19, 190, 201, 169, 206, 61, 220, 181, 74, 189, 39, 143, 27, 191, 111, 51, 164, 189, 23, 42, 238, 61, 133, 204, 177, 61, 205, 234, 167, 188, 77, 194, 128, 190, 27, 196, 159, 190, 244, 87, 122, 62, 140, 57, 118, 62, 134, 21, 69, 62, 58, 245, 52, 189, 47, 11, 154, 61, 42, 85, 156, 60, 181, 226, 14, 62, 41, 216, 127, 190, 209, 202, 55, 190, 25, 53, 87, 62, 241, 125, 15, 189, 205, 48, 214, 190, 112, 83, 10, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {4, 28, 75, 61, 74, 173, 186, 61, 54, 137, 60, 190, 1, 250, 137, 189, 132, 175, 22, 190, 157, 44, 37, 190, 105, 157, 171, 188, 84, 183, 108, 61, 148, 250, 230, 61, 165, 246, 202, 61, 200, 123, 74, 190, 193, 123, 249, 61, 26, 109, 42, 62, 94, 95, 2, 62, 72, 179, 1, 189, 48, 212, 152, 61, 154, 50, 143, 188, 144, 5, 253, 59, 36, 166, 190, 59, 92, 106, 95, 62, 12, 91, 177, 61, 151, 199, 46, 190, 84, 36, 191, 189, 206, 10, 112, 61, 69, 160, 4, 190, 221, 154, 224, 61, 22, 40, 80, 189, 75, 230, 79, 62, 24, 28, 153, 61, 234, 189, 81, 188, 254, 125, 180, 60, 16, 229, 148, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 19, 154, 190, 113, 11, 161, 62, 50, 223, 144, 190, 4, 144, 244, 189, 251, 13, 190, 61, 237, 24, 76, 61, 236, 47, 6, 189, 172, 172, 95, 62, 20, 241, 145, 190, 48, 70, 14, 190, 91, 66, 243, 61, 6, 234, 216, 189, 40, 227, 149, 62, 39, 31, 8, 190, 104, 102, 10, 189, 239, 245, 202, 61, 186, 192, 33, 189, 183, 154, 23, 190, 228, 188, 64, 61, 98, 24, 159, 190, 147, 49, 136, 190, 56, 57, 156, 62, 208, 123, 84, 190, 16, 34, 122, 61, 212, 156, 11, 62, 103, 61, 66, 62, 80, 218, 166, 62, 42, 48, 31, 59, 161, 240, 7, 190, 126, 66, 48, 62, 254, 133, 97, 190, 4, 94, 30, 191, 212, 170, 66, 190, 66, 119, 25, 190, 251, 125, 117, 61, 65, 240, 4, 60, 221, 74, 48, 190, 180, 13, 146, 61, 163, 44, 231, 61, 131, 65, 52, 189, 205, 168, 16, 61, 155, 232, 83, 190, 19, 199, 25, 190, 199, 99, 134, 59, 37, 5, 89, 190, 94, 113, 39, 61, 141, 6, 5, 62, 191, 131, 10, 62, 139, 182, 139, 61, 152, 61, 160, 187, 50, 250, 200, 189, 19, 254, 103, 61, 211, 88, 156, 188, 189, 130, 207, 61, 32, 109, 224, 188, 156, 53, 151, 188, 91, 217, 18, 190, 195, 141, 10, 62, 192, 43, 28, 60, 151, 152, 186, 189, 84, 176, 66, 190, 28, 26, 41, 190, 77, 202, 202, 60, 228, 129, 159, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 72, 25, 62, 127, 247, 223, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {182, 132, 147, 60, 63, 81, 136, 61, 23, 127, 84, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {33, 194, 1, 190, 71, 31, 253, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0023/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}