// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 96, 53, 190, 251, 163, 17, 63, 171, 69, 4, 63, 148, 45, 3, 63, 223, 5, 142, 63, 100, 12, 174, 62, 28, 90, 243, 62, 152, 49, 100, 191, 113, 116, 49, 63, 163, 148, 59, 191, 75, 187, 193, 190, 28, 105, 174, 61, 26, 156, 3, 62, 251, 166, 6, 191, 245, 199, 188, 190, 56, 186, 112, 190, 237, 23, 187, 190, 89, 171, 254, 62, 64, 254, 87, 61, 112, 42, 150, 63, 235, 236, 47, 191, 216, 177, 134, 190, 210, 180, 80, 61, 203, 22, 37, 191, 199, 122, 85, 63, 102, 247, 61, 61, 155, 29, 10, 62, 145, 219, 175, 62, 84, 111, 34, 191, 17, 216, 113, 191, 188, 136, 122, 63, 42, 242, 142, 189, 216, 75, 178, 61, 124, 176, 169, 62, 223, 79, 24, 63, 145, 26, 96, 62, 242, 56, 207, 189, 208, 78, 78, 190, 75, 201, 28, 191, 145, 6, 129, 190, 246, 0, 46, 63, 255, 63, 16, 190, 172, 90, 178, 60, 192, 122, 143, 190, 15, 84, 130, 63, 208, 226, 201, 62, 239, 180, 154, 191, 15, 5, 58, 191, 252, 223, 9, 191, 29, 159, 147, 63, 8, 189, 20, 62, 101, 184, 30, 62, 89, 59, 120, 191, 103, 242, 243, 190, 182, 120, 77, 62, 155, 74, 139, 190, 182, 21, 186, 190, 194, 52, 203, 190, 231, 248, 100, 63, 1, 98, 21, 190, 55, 33, 44, 62, 2, 224, 167, 63, 17, 97, 159, 189, 246, 48, 53, 61, 80, 168, 134, 63, 242, 150, 209, 62, 230, 194, 52, 63, 16, 34, 50, 190, 5, 119, 168, 190, 104, 151, 159, 61, 83, 210, 0, 191, 17, 250, 168, 190, 130, 9, 211, 190, 79, 80, 109, 63, 52, 79, 162, 190, 59, 61, 211, 185, 124, 112, 141, 191, 188, 181, 75, 61, 126, 227, 56, 191, 170, 19, 31, 62, 76, 239, 173, 190, 175, 95, 184, 190, 227, 208, 63, 191, 142, 177, 7, 190, 42, 170, 38, 191, 139, 49, 155, 59, 41, 144, 165, 189, 227, 140, 45, 62, 107, 54, 152, 191, 80, 250, 201, 190, 97, 211, 212, 190, 83, 2, 58, 191, 175, 15, 220, 189, 8, 162, 245, 61, 159, 186, 174, 191, 205, 145, 87, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 200, 24, 191, 110, 31, 5, 61, 126, 41, 187, 62, 67, 138, 191, 60, 50, 243, 166, 190, 148, 138, 175, 190, 76, 79, 10, 191, 171, 67, 199, 190, 180, 141, 91, 190, 54, 244, 147, 62, 43, 220, 174, 61, 204, 115, 54, 191, 48, 250, 105, 190, 118, 100, 205, 62, 169, 24, 56, 62, 142, 160, 0, 63, 70, 118, 188, 190, 19, 87, 132, 62, 184, 200, 130, 189, 35, 176, 128, 190, 186, 35, 2, 59, 254, 51, 207, 62, 72, 85, 46, 63, 211, 101, 1, 191, 216, 97, 215, 62, 92, 204, 209, 62, 21, 125, 64, 62, 216, 115, 244, 62, 189, 58, 16, 63, 87, 44, 150, 190, 68, 91, 243, 62, 138, 88, 192, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 104, 89, 190, 189, 236, 197, 61, 3, 112, 17, 191, 206, 107, 183, 61, 120, 191, 109, 59, 116, 231, 100, 191, 125, 196, 63, 61, 205, 29, 218, 189, 149, 137, 85, 190, 120, 9, 100, 62, 92, 9, 164, 189, 171, 167, 9, 190, 131, 104, 88, 190, 187, 209, 213, 189, 203, 241, 19, 191, 22, 167, 83, 62, 53, 214, 201, 190, 191, 35, 106, 62, 9, 158, 1, 190, 139, 60, 9, 62, 135, 144, 203, 190, 198, 78, 117, 191, 157, 149, 158, 189, 79, 42, 48, 190, 152, 77, 187, 61, 16, 23, 116, 60, 60, 144, 4, 62, 24, 125, 159, 62, 23, 181, 116, 189, 172, 27, 231, 190, 242, 36, 50, 62, 17, 37, 24, 62, 199, 190, 13, 190, 82, 163, 12, 62, 214, 63, 118, 61, 20, 205, 242, 61, 213, 104, 237, 60, 47, 180, 242, 186, 13, 143, 159, 189, 200, 128, 168, 61, 15, 13, 206, 189, 68, 101, 135, 61, 236, 246, 119, 62, 207, 5, 239, 190, 188, 201, 146, 189, 191, 181, 34, 190, 11, 238, 14, 61, 229, 75, 253, 60, 189, 4, 13, 190, 108, 43, 65, 61, 31, 143, 128, 190, 215, 152, 82, 189, 46, 115, 66, 61, 72, 34, 17, 189, 9, 4, 248, 189, 33, 101, 100, 190, 65, 102, 204, 61, 141, 111, 177, 189, 28, 47, 198, 61, 215, 21, 177, 189, 87, 66, 167, 61, 106, 109, 3, 189, 166, 102, 250, 61, 48, 248, 188, 61, 80, 66, 18, 190, 35, 188, 5, 62, 41, 173, 223, 61, 113, 70, 111, 61, 7, 218, 30, 62, 36, 226, 8, 189, 116, 248, 188, 189, 123, 63, 226, 189, 209, 133, 8, 190, 145, 90, 211, 60, 70, 68, 213, 189, 78, 14, 243, 61, 75, 96, 30, 189, 222, 166, 170, 188, 185, 86, 35, 190, 218, 13, 182, 189, 46, 12, 231, 189, 87, 185, 137, 61, 69, 28, 37, 62, 255, 19, 150, 61, 67, 81, 22, 190, 187, 125, 34, 189, 173, 130, 213, 188, 136, 142, 161, 61, 9, 72, 4, 190, 29, 96, 187, 61, 35, 159, 31, 190, 26, 134, 2, 190, 211, 210, 31, 190, 189, 115, 21, 62, 49, 226, 182, 61, 239, 209, 55, 190, 61, 175, 101, 190, 240, 221, 79, 190, 184, 244, 3, 62, 192, 45, 236, 189, 169, 37, 79, 190, 43, 32, 197, 61, 235, 98, 253, 189, 78, 41, 11, 189, 138, 179, 175, 188, 213, 202, 35, 190, 123, 237, 78, 62, 178, 151, 146, 190, 223, 88, 139, 188, 86, 41, 135, 61, 148, 233, 37, 189, 164, 225, 166, 61, 235, 66, 104, 190, 171, 182, 16, 190, 178, 211, 187, 61, 154, 56, 208, 188, 219, 31, 153, 61, 255, 201, 231, 58, 108, 169, 126, 189, 125, 127, 188, 190, 67, 208, 152, 61, 143, 156, 31, 62, 110, 130, 162, 189, 76, 22, 205, 188, 37, 73, 90, 62, 70, 112, 125, 61, 63, 127, 67, 62, 224, 249, 34, 62, 174, 184, 161, 190, 214, 98, 29, 60, 29, 59, 138, 61, 120, 192, 141, 189, 191, 170, 110, 61, 69, 157, 131, 61, 43, 2, 178, 189, 120, 108, 148, 189, 209, 89, 153, 187, 137, 35, 55, 62, 182, 179, 27, 62, 242, 241, 140, 190, 196, 111, 65, 62, 9, 231, 172, 61, 136, 18, 95, 62, 223, 142, 49, 62, 67, 141, 134, 188, 35, 135, 39, 60, 240, 200, 219, 61, 27, 87, 54, 190, 135, 184, 28, 62, 237, 32, 24, 190, 76, 206, 145, 62, 98, 239, 1, 190, 4, 13, 133, 61, 30, 247, 250, 61, 139, 209, 216, 189, 225, 97, 67, 62, 254, 112, 142, 189, 99, 244, 17, 190, 173, 100, 85, 62, 167, 220, 165, 60, 113, 241, 156, 61, 46, 63, 12, 189, 137, 200, 233, 61, 128, 98, 48, 62, 232, 79, 252, 61, 11, 127, 27, 190, 18, 135, 3, 62, 45, 140, 187, 188, 103, 217, 231, 189, 166, 4, 19, 62, 216, 128, 161, 60, 43, 223, 135, 61, 57, 189, 143, 189, 193, 247, 22, 190, 117, 151, 20, 190, 224, 242, 18, 189, 112, 212, 37, 190, 10, 63, 0, 190, 121, 132, 15, 62, 174, 87, 37, 190, 157, 195, 194, 61, 105, 67, 153, 189, 138, 186, 48, 190, 221, 31, 227, 189, 137, 161, 218, 60, 195, 104, 221, 189, 65, 88, 191, 189, 193, 209, 23, 190, 138, 120, 164, 60, 15, 225, 19, 62, 59, 51, 22, 60, 58, 223, 145, 189, 102, 95, 34, 190, 193, 173, 73, 61, 91, 25, 1, 190, 214, 173, 139, 189, 98, 129, 126, 189, 203, 86, 188, 61, 215, 147, 251, 189, 209, 78, 46, 62, 141, 253, 192, 188, 104, 62, 10, 61, 43, 227, 27, 62, 240, 87, 149, 189, 133, 248, 51, 62, 83, 152, 128, 189, 132, 13, 21, 61, 241, 175, 48, 189, 107, 168, 17, 62, 200, 176, 4, 189, 123, 19, 225, 59, 220, 90, 44, 190, 246, 76, 195, 189, 22, 5, 175, 189, 120, 91, 50, 190, 90, 39, 232, 60, 246, 132, 111, 61, 159, 156, 133, 189, 167, 150, 249, 189, 210, 170, 253, 189, 10, 227, 17, 188, 99, 126, 205, 189, 19, 112, 104, 61, 180, 197, 6, 190, 126, 105, 145, 62, 229, 200, 7, 63, 37, 131, 69, 191, 11, 77, 226, 61, 59, 233, 126, 190, 34, 48, 249, 190, 188, 90, 117, 62, 0, 106, 109, 190, 2, 7, 21, 190, 24, 66, 130, 61, 231, 187, 52, 62, 225, 209, 91, 61, 67, 23, 81, 190, 79, 192, 234, 188, 243, 143, 33, 191, 5, 245, 67, 62, 28, 71, 154, 189, 21, 211, 107, 62, 224, 237, 60, 190, 88, 215, 242, 60, 50, 98, 14, 191, 64, 191, 214, 190, 232, 114, 224, 189, 88, 180, 163, 190, 238, 54, 78, 62, 30, 217, 27, 61, 182, 78, 24, 60, 159, 205, 198, 189, 81, 42, 169, 188, 244, 91, 40, 190, 247, 232, 28, 60, 23, 54, 166, 60, 121, 27, 139, 187, 84, 13, 41, 62, 165, 94, 216, 60, 140, 233, 225, 190, 4, 100, 134, 189, 233, 172, 221, 189, 86, 35, 30, 62, 33, 43, 214, 188, 210, 26, 1, 62, 10, 55, 95, 189, 95, 7, 1, 61, 156, 62, 203, 62, 119, 25, 158, 61, 200, 77, 134, 189, 102, 36, 91, 189, 182, 188, 149, 190, 123, 180, 12, 62, 147, 211, 105, 189, 125, 132, 167, 61, 213, 105, 5, 62, 79, 215, 48, 62, 197, 78, 33, 62, 237, 134, 51, 61, 55, 226, 168, 60, 255, 129, 124, 190, 98, 99, 73, 188, 108, 106, 105, 190, 28, 204, 37, 62, 34, 116, 126, 190, 9, 111, 49, 62, 92, 220, 82, 62, 45, 180, 185, 62, 196, 151, 172, 190, 103, 214, 57, 190, 51, 82, 72, 62, 243, 51, 46, 190, 53, 27, 202, 60, 179, 86, 198, 61, 223, 127, 164, 62, 194, 233, 15, 188, 60, 76, 176, 190, 14, 109, 138, 190, 144, 156, 54, 62, 209, 2, 199, 189, 135, 194, 72, 61, 131, 116, 141, 62, 228, 73, 159, 189, 80, 48, 6, 191, 242, 112, 99, 62, 52, 149, 20, 191, 225, 57, 191, 190, 220, 19, 206, 62, 182, 10, 37, 189, 234, 174, 236, 61, 10, 171, 78, 62, 126, 2, 193, 188, 238, 108, 178, 61, 75, 200, 10, 62, 74, 206, 72, 62, 150, 93, 157, 189, 166, 180, 37, 61, 30, 37, 148, 62, 31, 192, 4, 60, 226, 66, 121, 188, 98, 44, 70, 61, 143, 123, 84, 190, 193, 123, 99, 61, 202, 172, 13, 62, 147, 89, 219, 61, 213, 205, 121, 62, 222, 140, 83, 191, 128, 168, 37, 63, 81, 239, 146, 190, 42, 61, 42, 191, 242, 164, 135, 190, 204, 247, 152, 61, 97, 93, 209, 62, 45, 32, 116, 62, 237, 142, 47, 189, 198, 47, 140, 191, 0, 203, 8, 61, 184, 156, 150, 191, 90, 221, 255, 189, 108, 196, 237, 61, 11, 9, 154, 190, 169, 10, 163, 62, 155, 157, 198, 190, 134, 16, 149, 61, 243, 151, 54, 187, 197, 18, 141, 190, 206, 80, 41, 62, 47, 136, 129, 62, 182, 146, 149, 62, 248, 4, 126, 62, 49, 29, 19, 62, 132, 217, 98, 191, 213, 1, 27, 190, 162, 200, 149, 188, 95, 239, 241, 61, 199, 46, 73, 62, 9, 221, 53, 62, 72, 182, 131, 62, 190, 225, 141, 191, 39, 188, 2, 62, 81, 160, 187, 188, 221, 172, 88, 191, 206, 112, 148, 190, 220, 127, 26, 62, 13, 106, 24, 61, 70, 220, 24, 62, 151, 83, 60, 62, 16, 25, 161, 191, 72, 73, 193, 189, 82, 221, 123, 191, 96, 138, 143, 62, 179, 246, 111, 62, 157, 145, 215, 189, 89, 241, 93, 189, 231, 3, 44, 62, 43, 50, 140, 60, 152, 187, 69, 188, 64, 187, 3, 62, 216, 175, 221, 61, 144, 6, 186, 61, 57, 2, 134, 62, 82, 245, 16, 63, 54, 82, 64, 62, 106, 71, 19, 191, 177, 88, 88, 59, 55, 95, 227, 61, 111, 107, 236, 61, 215, 176, 115, 189, 217, 237, 244, 188, 98, 120, 130, 61, 39, 179, 161, 60, 147, 87, 111, 188, 0, 69, 8, 190, 226, 95, 180, 61, 197, 12, 205, 60, 6, 77, 230, 190, 145, 73, 106, 61, 136, 130, 10, 189, 157, 161, 50, 190, 183, 14, 127, 61, 110, 216, 187, 61, 146, 226, 60, 190, 223, 139, 65, 190, 61, 228, 253, 61, 114, 168, 251, 189, 160, 90, 27, 62, 125, 243, 183, 188, 152, 76, 1, 190, 101, 141, 17, 62, 142, 46, 171, 61, 169, 41, 171, 189, 193, 178, 33, 61, 135, 12, 107, 62, 107, 175, 191, 190, 70, 230, 25, 62, 76, 188, 135, 62, 211, 186, 141, 190, 165, 234, 224, 190, 235, 79, 59, 62, 242, 75, 30, 58, 85, 151, 10, 62, 107, 68, 252, 61, 174, 120, 26, 189, 228, 209, 230, 61, 153, 231, 83, 189, 78, 0, 217, 189, 224, 0, 153, 189, 188, 72, 142, 190, 90, 103, 208, 188, 203, 249, 230, 61, 103, 79, 106, 62, 63, 196, 22, 190, 84, 255, 23, 190, 218, 118, 216, 61, 13, 146, 216, 61, 197, 143, 105, 190, 87, 22, 170, 62, 0, 125, 4, 189, 162, 231, 119, 62, 160, 112, 36, 62, 228, 62, 162, 61, 55, 103, 37, 62, 117, 206, 119, 61, 123, 158, 96, 188, 179, 230, 20, 190, 201, 246, 8, 62, 80, 110, 191, 61, 250, 108, 97, 189, 243, 167, 133, 190, 23, 112, 226, 190, 162, 158, 157, 60, 43, 6, 56, 190, 55, 118, 215, 61, 52, 78, 134, 62, 188, 40, 44, 189, 252, 165, 31, 61, 78, 203, 246, 189, 51, 59, 84, 61, 95, 17, 225, 62, 115, 42, 196, 190, 227, 196, 238, 188, 0, 92, 34, 62, 229, 21, 77, 62, 64, 178, 148, 189, 1, 221, 118, 61, 242, 185, 221, 60, 221, 142, 217, 61, 180, 28, 110, 190, 29, 52, 135, 62, 134, 62, 204, 188, 116, 141, 188, 61, 238, 109, 166, 62, 108, 12, 246, 61, 189, 142, 7, 62, 139, 205, 33, 61, 49, 131, 211, 186, 134, 136, 224, 60, 244, 252, 60, 62, 82, 165, 172, 60, 253, 136, 96, 190, 76, 110, 123, 62, 133, 19, 158, 62, 216, 130, 31, 190, 135, 247, 242, 190, 245, 27, 148, 61, 199, 21, 221, 60, 61, 83, 189, 60, 254, 255, 202, 189, 135, 25, 139, 190, 82, 24, 235, 190, 225, 8, 157, 190, 75, 179, 13, 190, 21, 66, 11, 190, 108, 28, 45, 62, 198, 89, 5, 61, 205, 60, 167, 190, 63, 154, 142, 62, 21, 215, 49, 190, 112, 33, 155, 189, 36, 165, 7, 63, 10, 215, 148, 190, 85, 193, 167, 188, 223, 101, 173, 190, 100, 179, 60, 190, 28, 250, 5, 62, 22, 40, 54, 190, 233, 205, 165, 62, 29, 144, 186, 190, 49, 46, 116, 61, 82, 130, 189, 59, 176, 176, 93, 190, 122, 42, 60, 190, 41, 142, 70, 190, 195, 27, 80, 190, 145, 2, 188, 62, 40, 118, 232, 60, 248, 186, 153, 189, 236, 95, 129, 61, 44, 10, 136, 191, 53, 83, 150, 59, 28, 75, 245, 189, 135, 203, 188, 190, 19, 59, 58, 62, 7, 87, 53, 190, 116, 166, 241, 61, 110, 57, 193, 189, 174, 71, 142, 62, 135, 73, 14, 190, 224, 175, 149, 62, 144, 110, 181, 190, 33, 112, 112, 60, 137, 58, 89, 189, 27, 53, 86, 190, 202, 9, 151, 62, 49, 200, 83, 62, 60, 120, 180, 190, 199, 225, 8, 190, 196, 113, 6, 62, 134, 8, 158, 190, 192, 137, 221, 61, 37, 20, 194, 189, 190, 97, 102, 62, 238, 213, 195, 61, 146, 192, 70, 61, 143, 159, 18, 190, 206, 184, 185, 190, 4, 28, 95, 62, 73, 75, 127, 190, 106, 155, 143, 190, 32, 157, 49, 190, 108, 222, 247, 190, 162, 228, 158, 190, 72, 168, 253, 60, 195, 41, 97, 60, 1, 13, 129, 62, 153, 131, 214, 190, 205, 29, 75, 190, 151, 115, 28, 191, 26, 94, 199, 189, 109, 120, 10, 62, 115, 242, 233, 188, 94, 139, 212, 188, 195, 147, 160, 190, 129, 75, 22, 62, 188, 2, 241, 190, 47, 54, 34, 188, 222, 122, 197, 61, 140, 57, 202, 190, 238, 60, 143, 190, 29, 212, 197, 62, 83, 171, 161, 190, 176, 178, 33, 62, 88, 136, 230, 189, 197, 178, 87, 62, 15, 14, 49, 62, 231, 223, 243, 62, 195, 78, 85, 62, 39, 233, 2, 63, 110, 83, 21, 62, 218, 101, 253, 190, 4, 57, 248, 188, 13, 212, 9, 190, 193, 111, 31, 62, 208, 43, 42, 62, 127, 84, 60, 62, 82, 183, 38, 190, 10, 56, 160, 62, 254, 45, 103, 190, 140, 16, 249, 61, 244, 160, 75, 61, 35, 226, 78, 62, 125, 107, 3, 189, 240, 156, 100, 62, 97, 167, 109, 61, 134, 39, 194, 62, 64, 38, 3, 63, 38, 1, 205, 61, 181, 239, 164, 61, 144, 87, 2, 62, 238, 118, 183, 190, 46, 225, 142, 62, 198, 218, 156, 190, 94, 158, 244, 189, 25, 106, 104, 191, 25, 201, 132, 60, 49, 155, 66, 190, 159, 67, 79, 191, 137, 47, 139, 190, 137, 2, 163, 62, 171, 176, 140, 62, 70, 40, 59, 191, 250, 194, 221, 189, 173, 164, 132, 190, 51, 19, 214, 190, 154, 82, 72, 61, 235, 88, 102, 190, 177, 43, 220, 188, 234, 185, 61, 62, 223, 199, 235, 61, 153, 129, 59, 189, 213, 126, 143, 190, 248, 23, 54, 62, 253, 213, 18, 191, 86, 230, 58, 189, 226, 210, 24, 190, 73, 227, 100, 62, 249, 51, 186, 190, 0, 99, 32, 62, 92, 181, 5, 191, 239, 151, 165, 190, 183, 246, 144, 190, 190, 11, 125, 190, 119, 104, 85, 61, 78, 131, 114, 190, 132, 195, 43, 62, 43, 31, 201, 188, 24, 95, 138, 61, 58, 151, 64, 190, 166, 122, 154, 61, 151, 168, 141, 61, 46, 94, 221, 190, 175, 154, 141, 190, 175, 226, 127, 62, 240, 202, 22, 189, 142, 153, 166, 60, 61, 179, 50, 62, 229, 247, 222, 60, 216, 64, 150, 61, 230, 240, 183, 61, 249, 216, 24, 190, 26, 108, 132, 62, 80, 178, 172, 190, 2, 83, 44, 62, 208, 9, 60, 189, 76, 33, 128, 59, 144, 213, 227, 61, 201, 92, 9, 62, 49, 184, 3, 189, 20, 56, 229, 189, 253, 251, 103, 190, 214, 237, 186, 188, 168, 22, 177, 189, 93, 236, 30, 62, 106, 15, 59, 190, 141, 76, 113, 60, 255, 7, 165, 58, 110, 210, 84, 62, 101, 155, 37, 62, 124, 111, 195, 188, 19, 48, 135, 189, 17, 208, 152, 61, 174, 52, 69, 62, 232, 50, 235, 61, 152, 181, 156, 61, 236, 38, 138, 191, 156, 228, 39, 190, 18, 245, 172, 190, 9, 118, 107, 191, 42, 242, 35, 62, 24, 162, 101, 190, 199, 173, 201, 189, 101, 66, 231, 61, 202, 252, 6, 190, 145, 255, 159, 189, 121, 68, 68, 190, 229, 23, 27, 62, 38, 54, 128, 191, 180, 50, 96, 62, 154, 191, 19, 191, 235, 213, 143, 61, 240, 227, 22, 190, 187, 131, 138, 62, 109, 93, 32, 191, 115, 43, 117, 191, 201, 194, 216, 187, 28, 209, 112, 190, 86, 8, 70, 62, 190, 172, 31, 190, 57, 32, 33, 62, 5, 29, 10, 62, 208, 186, 111, 59, 148, 12, 165, 190, 164, 63, 10, 190, 252, 187, 21, 190, 215, 20, 115, 60, 252, 58, 94, 189, 170, 254, 38, 189, 153, 43, 156, 189, 106, 67, 243, 188, 9, 95, 219, 60, 0, 188, 26, 61, 80, 167, 190, 61, 251, 208, 225, 189, 61, 165, 215, 61, 36, 199, 31, 190, 149, 140, 181, 189, 114, 114, 24, 61, 90, 126, 116, 190, 215, 204, 229, 60, 189, 221, 249, 188, 98, 82, 60, 189, 55, 245, 24, 190, 238, 171, 168, 189, 173, 153, 229, 189, 194, 231, 31, 190, 195, 28, 110, 61, 30, 95, 197, 61, 151, 41, 198, 189, 215, 2, 63, 190, 177, 143, 67, 190, 164, 12, 61, 61, 130, 148, 77, 190, 233, 47, 237, 189, 221, 130, 195, 189, 5, 240, 207, 60, 59, 174, 30, 62, 166, 150, 214, 59, 252, 30, 161, 189, 251, 131, 233, 62, 95, 116, 20, 63, 213, 84, 68, 190, 44, 77, 155, 62, 103, 170, 236, 188, 13, 129, 216, 190, 71, 208, 67, 62, 137, 145, 7, 190, 209, 12, 88, 189, 138, 169, 243, 189, 250, 120, 0, 191, 27, 30, 24, 190, 166, 118, 146, 62, 50, 68, 75, 190, 215, 189, 245, 190, 167, 3, 249, 189, 247, 145, 62, 190, 86, 177, 225, 190, 197, 28, 21, 190, 232, 202, 37, 62, 111, 180, 244, 190, 15, 109, 194, 190, 248, 80, 175, 190, 237, 204, 135, 62, 33, 255, 45, 62, 43, 5, 194, 62, 161, 95, 28, 62, 253, 117, 33, 191, 104, 18, 233, 62, 84, 57, 135, 189, 115, 26, 71, 62, 130, 108, 139, 62, 53, 250, 152, 60, 223, 202, 213, 190, 208, 51, 37, 62, 95, 187, 208, 189, 230, 158, 28, 190, 7, 43, 107, 189, 197, 74, 146, 62, 244, 45, 24, 190, 243, 104, 44, 62, 86, 153, 220, 62, 6, 232, 139, 189, 152, 149, 156, 190, 74, 123, 251, 188, 90, 143, 138, 189, 89, 25, 4, 61, 140, 132, 246, 189, 169, 254, 20, 61, 218, 155, 241, 188, 255, 237, 147, 62, 167, 213, 188, 188, 70, 128, 131, 189, 152, 194, 13, 62, 56, 207, 131, 190, 121, 178, 172, 190, 0, 219, 1, 190, 161, 153, 52, 62, 236, 90, 43, 191, 201, 232, 181, 189, 109, 227, 232, 189, 171, 99, 198, 188, 152, 235, 186, 60, 152, 244, 238, 189, 245, 231, 32, 190, 65, 212, 254, 188, 193, 34, 45, 190, 221, 15, 235, 188, 118, 195, 4, 190, 34, 189, 60, 188, 145, 71, 13, 62, 34, 4, 27, 189, 37, 214, 0, 61, 114, 100, 71, 187, 175, 235, 157, 61, 244, 192, 16, 190, 25, 20, 41, 190, 74, 59, 244, 189, 142, 233, 40, 62, 94, 18, 248, 61, 228, 234, 140, 188, 161, 130, 105, 189, 63, 123, 213, 189, 129, 168, 146, 61, 72, 168, 134, 59, 250, 217, 153, 188, 113, 140, 84, 190, 228, 24, 227, 188, 41, 26, 85, 190, 132, 197, 15, 61, 122, 124, 177, 61, 3, 230, 172, 189, 121, 236, 104, 61, 238, 238, 199, 61, 186, 47, 35, 62, 132, 99, 0, 63, 54, 159, 15, 190, 178, 73, 61, 190, 14, 24, 10, 190, 238, 243, 96, 189, 183, 67, 123, 62, 223, 30, 132, 190, 52, 178, 129, 62, 75, 179, 58, 60, 214, 197, 153, 62, 227, 163, 236, 188, 237, 78, 100, 190, 212, 63, 174, 186, 215, 171, 31, 61, 172, 187, 92, 62, 160, 70, 17, 62, 199, 49, 87, 62, 152, 47, 218, 189, 141, 95, 9, 62, 180, 37, 10, 190, 48, 5, 161, 62, 178, 52, 8, 190, 76, 1, 27, 190, 85, 46, 158, 60, 11, 212, 254, 59, 81, 49, 17, 62, 254, 28, 225, 190, 31, 191, 43, 190, 74, 69, 251, 190, 10, 239, 71, 190, 13, 34, 131, 189, 17, 245, 228, 189, 55, 156, 44, 190, 86, 19, 12, 190, 90, 6, 6, 62, 178, 56, 72, 189, 65, 229, 117, 61, 246, 226, 133, 189, 124, 232, 200, 61, 23, 191, 10, 62, 217, 157, 158, 60, 72, 201, 244, 61, 72, 148, 11, 190, 143, 53, 203, 61, 249, 115, 131, 59, 90, 233, 1, 60, 37, 127, 62, 189, 66, 86, 24, 190, 195, 118, 142, 185, 85, 195, 129, 61, 74, 97, 5, 62, 75, 103, 252, 188, 13, 54, 73, 189, 15, 188, 136, 189, 224, 122, 216, 61, 200, 135, 107, 189, 9, 98, 0, 190, 182, 23, 116, 61, 13, 7, 42, 189, 218, 87, 35, 190, 62, 168, 35, 190, 131, 159, 53, 190, 172, 86, 41, 60, 89, 232, 56, 61, 11, 227, 138, 190, 189, 131, 181, 61, 121, 179, 134, 190, 140, 83, 226, 61, 18, 174, 157, 189, 53, 254, 180, 190, 238, 54, 44, 189, 126, 57, 241, 189, 72, 200, 196, 61, 18, 50, 99, 62, 84, 66, 7, 190, 91, 26, 14, 62, 251, 163, 7, 191, 121, 143, 183, 61, 118, 155, 32, 62, 149, 195, 228, 190, 167, 15, 40, 189, 171, 115, 192, 60, 241, 196, 146, 190, 127, 190, 40, 189, 196, 77, 213, 189, 186, 173, 3, 62, 220, 192, 140, 62, 7, 130, 100, 190, 226, 35, 7, 62, 246, 178, 150, 190, 79, 227, 116, 189, 183, 185, 185, 189, 216, 61, 222, 62, 236, 222, 26, 61, 90, 214, 25, 189, 128, 52, 168, 189, 75, 169, 173, 188, 212, 59, 147, 61, 61, 161, 69, 62, 202, 176, 152, 189, 98, 239, 156, 189, 241, 86, 240, 189, 25, 76, 7, 189, 38, 136, 107, 62, 184, 155, 59, 62, 112, 247, 132, 62, 12, 185, 159, 190, 221, 80, 83, 60, 161, 140, 158, 190, 83, 138, 3, 189, 162, 52, 98, 62, 9, 44, 158, 190, 250, 220, 2, 62, 149, 35, 24, 61, 231, 42, 175, 189, 63, 225, 200, 61, 49, 188, 75, 190, 91, 55, 165, 62, 186, 66, 121, 190, 137, 165, 14, 189, 98, 247, 239, 61, 240, 152, 68, 61, 11, 57, 188, 61, 183, 46, 155, 189, 9, 2, 44, 190, 52, 121, 22, 190, 25, 84, 102, 62, 239, 244, 153, 189, 238, 197, 36, 189, 223, 118, 128, 62, 66, 130, 83, 189, 45, 132, 139, 189, 61, 33, 36, 62, 14, 113, 55, 191, 251, 126, 18, 190, 131, 225, 208, 189, 192, 98, 7, 191, 11, 233, 39, 62, 7, 218, 1, 191, 213, 124, 23, 189, 128, 45, 6, 61, 218, 96, 95, 61, 103, 109, 187, 190, 229, 119, 73, 62, 7, 157, 47, 190, 104, 253, 182, 190, 210, 134, 247, 189, 25, 14, 142, 62, 145, 72, 153, 61, 211, 248, 80, 189, 206, 254, 182, 59, 198, 42, 191, 189, 73, 122, 20, 61, 173, 34, 153, 61, 140, 59, 39, 190, 5, 180, 26, 61, 183, 194, 232, 59, 3, 217, 147, 61, 86, 14, 209, 61, 24, 14, 205, 190, 138, 248, 15, 191, 117, 83, 130, 62, 153, 141, 30, 190, 220, 232, 118, 62, 84, 0, 42, 62, 87, 244, 23, 191, 197, 196, 7, 190, 96, 194, 163, 189, 128, 170, 173, 190, 36, 238, 11, 61, 221, 115, 120, 190, 108, 11, 155, 61, 153, 25, 63, 189, 186, 55, 24, 62, 48, 215, 172, 189, 162, 200, 236, 61, 171, 124, 29, 190, 183, 205, 11, 62, 24, 204, 186, 61, 217, 154, 255, 189, 29, 180, 175, 62, 31, 4, 126, 62, 141, 118, 165, 62, 185, 188, 5, 189, 156, 71, 97, 62, 250, 154, 99, 190, 111, 68, 214, 61, 165, 218, 226, 189, 125, 179, 231, 62, 163, 148, 149, 189, 70, 117, 26, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 146, 44, 61, 129, 8, 3, 190, 235, 237, 151, 58, 147, 76, 46, 62, 28, 254, 2, 62, 221, 11, 216, 189, 87, 181, 221, 60, 162, 230, 0, 62, 15, 210, 38, 189, 154, 18, 143, 61, 160, 21, 143, 62, 120, 152, 255, 188, 251, 145, 132, 62, 212, 11, 159, 61, 231, 75, 255, 189, 2, 106, 139, 189, 53, 208, 38, 62, 112, 96, 7, 62, 16, 226, 230, 61, 131, 112, 46, 190, 21, 24, 82, 62, 72, 187, 11, 60, 235, 248, 126, 190, 95, 236, 132, 188, 199, 209, 148, 190, 163, 94, 236, 188, 59, 201, 106, 62, 66, 199, 255, 60, 157, 246, 198, 190, 255, 235, 232, 189, 156, 85, 69, 62, 222, 188, 131, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 6, 158, 190, 85, 30, 160, 187, 246, 156, 15, 62, 133, 121, 62, 61, 250, 74, 183, 61, 222, 67, 163, 188, 52, 241, 20, 190, 87, 34, 245, 190, 66, 177, 51, 62, 107, 235, 157, 62, 103, 252, 131, 63, 96, 181, 82, 63, 164, 248, 131, 187, 166, 86, 48, 62, 206, 201, 244, 61, 243, 186, 62, 190, 210, 85, 248, 62, 114, 78, 26, 63, 122, 91, 233, 190, 36, 239, 13, 191, 112, 52, 216, 61, 16, 227, 80, 191, 15, 92, 206, 60, 163, 213, 48, 191, 70, 97, 118, 190, 45, 53, 32, 190, 135, 192, 208, 190, 6, 101, 220, 61, 182, 214, 4, 190, 105, 152, 230, 61, 5, 21, 224, 60, 122, 73, 160, 62, 209, 37, 123, 190, 27, 209, 38, 189, 19, 98, 40, 190, 203, 254, 213, 189, 69, 201, 73, 190, 151, 84, 208, 189, 136, 66, 228, 61, 30, 47, 133, 62, 30, 91, 239, 62, 22, 17, 117, 61, 17, 52, 236, 61, 203, 156, 224, 61, 221, 167, 111, 190, 238, 250, 131, 59, 99, 11, 16, 62, 22, 154, 10, 190, 46, 147, 121, 190, 120, 96, 10, 62, 35, 204, 67, 190, 13, 140, 133, 62, 8, 14, 83, 190, 216, 180, 100, 190, 15, 221, 79, 61, 38, 218, 241, 61, 241, 44, 45, 63, 161, 183, 195, 60, 205, 119, 246, 189, 250, 216, 126, 61, 109, 102, 220, 62, 255, 0, 94, 190, 147, 7, 171, 190, 112, 85, 73, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 77, 120, 61, 142, 211, 175, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {136, 141, 6, 62, 83, 231, 104, 190, 176, 244, 10, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {110, 104, 35, 63, 172, 120, 143, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0062/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}