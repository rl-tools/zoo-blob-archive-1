// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 31, 52, 190, 91, 208, 10, 63, 102, 56, 4, 63, 109, 181, 1, 63, 2, 181, 139, 63, 143, 180, 176, 62, 255, 134, 251, 62, 117, 207, 91, 191, 192, 75, 41, 63, 16, 203, 59, 191, 128, 143, 166, 190, 102, 169, 47, 188, 106, 134, 213, 61, 182, 166, 16, 191, 13, 136, 207, 190, 173, 118, 139, 190, 5, 207, 134, 190, 81, 79, 239, 62, 234, 80, 90, 61, 211, 25, 155, 63, 139, 174, 48, 191, 68, 29, 65, 190, 100, 211, 213, 189, 178, 136, 41, 191, 166, 230, 73, 63, 80, 99, 211, 189, 236, 171, 72, 62, 174, 171, 111, 62, 86, 151, 66, 191, 92, 90, 105, 191, 125, 50, 140, 63, 172, 173, 46, 190, 185, 148, 152, 60, 161, 151, 209, 62, 30, 88, 28, 63, 177, 196, 55, 62, 71, 164, 19, 189, 85, 18, 163, 190, 102, 122, 29, 191, 71, 168, 192, 190, 169, 6, 55, 63, 182, 236, 92, 189, 202, 22, 183, 61, 193, 73, 129, 190, 229, 160, 93, 63, 166, 246, 166, 62, 91, 47, 161, 191, 58, 124, 56, 191, 146, 107, 216, 190, 84, 156, 152, 63, 123, 39, 6, 62, 99, 164, 202, 61, 176, 200, 141, 191, 90, 251, 210, 190, 112, 217, 45, 62, 128, 110, 196, 190, 54, 6, 193, 190, 10, 70, 209, 190, 64, 24, 103, 63, 244, 6, 59, 190, 179, 1, 227, 61, 174, 246, 161, 63, 61, 23, 29, 190, 105, 135, 81, 62, 35, 64, 139, 63, 184, 23, 208, 62, 231, 95, 38, 63, 108, 137, 142, 190, 113, 89, 196, 190, 163, 82, 47, 62, 117, 223, 16, 191, 68, 239, 170, 190, 213, 143, 201, 190, 218, 234, 106, 63, 246, 215, 185, 190, 235, 159, 126, 61, 166, 112, 140, 191, 106, 45, 247, 60, 17, 50, 22, 191, 82, 127, 39, 62, 154, 153, 190, 190, 54, 5, 219, 190, 179, 208, 42, 191, 0, 224, 8, 190, 0, 197, 40, 191, 161, 37, 20, 62, 41, 245, 198, 189, 109, 226, 175, 61, 180, 197, 155, 191, 255, 21, 179, 190, 157, 185, 233, 190, 115, 140, 42, 191, 234, 180, 227, 189, 231, 183, 150, 61, 185, 128, 171, 191, 20, 9, 92, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 105, 34, 191, 63, 190, 166, 59, 88, 20, 209, 62, 214, 31, 66, 188, 88, 2, 143, 190, 34, 15, 161, 190, 145, 197, 5, 191, 237, 134, 221, 190, 2, 114, 132, 190, 146, 5, 212, 62, 42, 124, 175, 189, 254, 67, 66, 191, 64, 59, 149, 190, 127, 254, 199, 62, 99, 88, 157, 61, 84, 106, 2, 63, 226, 74, 242, 190, 65, 80, 142, 62, 67, 209, 172, 189, 117, 234, 125, 190, 22, 240, 5, 189, 193, 36, 148, 62, 20, 219, 33, 63, 174, 148, 6, 191, 149, 29, 219, 62, 170, 201, 225, 62, 209, 74, 36, 62, 83, 218, 9, 63, 216, 95, 25, 63, 102, 172, 136, 190, 70, 54, 1, 63, 0, 59, 213, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 104, 89, 190, 85, 8, 207, 61, 248, 2, 249, 190, 116, 194, 4, 61, 204, 79, 81, 60, 168, 134, 149, 191, 147, 61, 15, 61, 108, 148, 233, 189, 155, 84, 12, 191, 207, 106, 106, 62, 120, 20, 121, 189, 171, 167, 9, 190, 205, 99, 90, 190, 81, 157, 214, 189, 248, 48, 31, 191, 156, 27, 98, 62, 192, 178, 247, 190, 10, 222, 118, 62, 103, 115, 244, 189, 179, 167, 11, 62, 49, 251, 204, 190, 121, 81, 133, 191, 178, 72, 92, 189, 187, 184, 45, 190, 183, 69, 162, 61, 35, 100, 108, 61, 188, 104, 219, 61, 165, 50, 160, 62, 118, 93, 159, 189, 207, 200, 216, 190, 182, 18, 50, 62, 120, 76, 56, 62, 42, 96, 25, 190, 165, 91, 233, 61, 75, 14, 223, 60, 22, 51, 207, 61, 76, 8, 131, 188, 171, 230, 94, 189, 73, 153, 66, 190, 3, 135, 134, 188, 90, 28, 160, 189, 12, 196, 170, 61, 37, 238, 101, 62, 59, 64, 243, 190, 94, 201, 18, 190, 13, 204, 154, 190, 243, 92, 217, 188, 17, 101, 204, 61, 125, 226, 21, 190, 203, 97, 253, 61, 134, 149, 139, 190, 71, 1, 10, 190, 154, 207, 74, 61, 132, 4, 168, 189, 74, 198, 225, 189, 139, 47, 168, 190, 216, 165, 161, 188, 111, 157, 80, 189, 210, 83, 216, 60, 177, 165, 164, 189, 15, 7, 200, 60, 244, 173, 163, 61, 52, 106, 254, 61, 75, 204, 30, 62, 80, 66, 18, 190, 35, 188, 5, 62, 144, 163, 220, 61, 246, 12, 114, 61, 87, 121, 28, 62, 36, 226, 8, 189, 116, 248, 188, 189, 7, 118, 227, 189, 64, 170, 8, 190, 128, 8, 148, 60, 164, 38, 218, 189, 78, 14, 243, 61, 156, 62, 40, 189, 222, 166, 170, 188, 185, 86, 35, 190, 116, 24, 200, 189, 46, 12, 231, 189, 69, 196, 123, 61, 244, 128, 34, 62, 255, 19, 150, 61, 67, 81, 22, 190, 187, 125, 34, 189, 145, 38, 2, 189, 244, 196, 158, 61, 9, 72, 4, 190, 49, 8, 179, 61, 205, 241, 31, 190, 247, 214, 5, 190, 186, 111, 32, 190, 116, 27, 17, 62, 156, 211, 176, 61, 83, 231, 61, 190, 117, 101, 108, 190, 21, 141, 115, 190, 253, 51, 0, 62, 28, 110, 212, 189, 250, 200, 147, 190, 250, 27, 185, 61, 173, 226, 52, 190, 91, 108, 1, 190, 156, 101, 228, 59, 179, 194, 42, 190, 99, 206, 122, 62, 107, 78, 201, 190, 247, 123, 191, 189, 226, 6, 70, 189, 9, 154, 91, 189, 104, 97, 173, 61, 1, 255, 153, 190, 21, 81, 21, 190, 146, 151, 140, 61, 26, 221, 179, 189, 86, 24, 47, 185, 154, 80, 20, 189, 20, 239, 53, 188, 206, 63, 4, 191, 97, 245, 195, 59, 202, 68, 38, 62, 255, 95, 181, 189, 7, 230, 52, 189, 93, 233, 48, 62, 16, 94, 195, 60, 209, 173, 48, 62, 231, 116, 27, 62, 161, 130, 148, 190, 152, 5, 34, 60, 245, 4, 154, 61, 29, 179, 45, 189, 92, 250, 227, 59, 59, 48, 153, 61, 128, 136, 204, 189, 225, 160, 203, 189, 237, 47, 42, 59, 206, 27, 52, 62, 191, 158, 5, 62, 29, 8, 148, 190, 138, 133, 38, 62, 153, 140, 43, 61, 186, 128, 102, 62, 155, 146, 53, 62, 20, 191, 186, 188, 244, 50, 5, 60, 252, 245, 183, 61, 217, 211, 79, 190, 250, 71, 93, 62, 240, 105, 28, 190, 98, 244, 150, 62, 179, 205, 88, 190, 105, 24, 132, 60, 87, 3, 21, 62, 40, 243, 229, 189, 58, 207, 64, 62, 89, 220, 170, 189, 236, 113, 57, 190, 8, 178, 88, 62, 250, 54, 246, 186, 113, 241, 156, 61, 46, 63, 12, 189, 137, 200, 233, 61, 254, 184, 47, 62, 4, 94, 245, 61, 11, 127, 27, 190, 238, 55, 245, 61, 136, 94, 249, 188, 103, 217, 231, 189, 248, 123, 8, 62, 216, 128, 161, 60, 43, 223, 135, 61, 123, 49, 157, 189, 148, 75, 26, 190, 117, 151, 20, 190, 115, 165, 48, 189, 194, 243, 37, 190, 18, 60, 4, 190, 11, 1, 12, 62, 186, 96, 41, 190, 170, 170, 188, 61, 105, 67, 153, 189, 231, 135, 52, 190, 149, 47, 231, 189, 170, 218, 158, 60, 195, 104, 221, 189, 188, 185, 204, 189, 185, 211, 26, 190, 150, 91, 130, 60, 76, 190, 17, 62, 183, 191, 212, 59, 206, 252, 148, 189, 102, 95, 34, 190, 193, 173, 73, 61, 91, 25, 1, 190, 214, 173, 139, 189, 98, 129, 126, 189, 203, 86, 188, 61, 215, 147, 251, 189, 209, 78, 46, 62, 141, 253, 192, 188, 104, 62, 10, 61, 43, 227, 27, 62, 240, 87, 149, 189, 133, 248, 51, 62, 83, 152, 128, 189, 132, 13, 21, 61, 241, 175, 48, 189, 107, 168, 17, 62, 200, 176, 4, 189, 123, 19, 225, 59, 220, 90, 44, 190, 246, 76, 195, 189, 22, 5, 175, 189, 120, 91, 50, 190, 90, 39, 232, 60, 246, 132, 111, 61, 159, 156, 133, 189, 167, 150, 249, 189, 210, 170, 253, 189, 10, 227, 17, 188, 99, 126, 205, 189, 19, 112, 104, 61, 180, 197, 6, 190, 126, 105, 145, 62, 45, 116, 9, 63, 60, 223, 64, 191, 142, 81, 59, 62, 71, 162, 133, 190, 124, 199, 2, 191, 85, 189, 80, 62, 19, 61, 117, 190, 31, 183, 97, 190, 1, 17, 68, 61, 118, 81, 31, 62, 225, 209, 91, 61, 139, 78, 93, 190, 222, 140, 208, 186, 235, 18, 26, 191, 5, 122, 54, 62, 9, 136, 52, 190, 47, 115, 100, 62, 87, 168, 86, 190, 212, 111, 1, 60, 159, 150, 36, 191, 230, 170, 228, 190, 171, 25, 22, 190, 87, 200, 161, 190, 171, 153, 89, 62, 49, 90, 216, 60, 54, 149, 218, 60, 189, 123, 132, 189, 28, 19, 150, 60, 136, 23, 52, 190, 149, 66, 55, 61, 157, 170, 239, 60, 151, 13, 64, 189, 62, 183, 24, 62, 26, 202, 85, 61, 208, 104, 35, 191, 7, 244, 1, 190, 199, 145, 0, 190, 7, 210, 193, 62, 140, 34, 242, 61, 191, 193, 76, 62, 144, 141, 130, 189, 225, 35, 204, 61, 187, 154, 204, 62, 241, 175, 46, 62, 223, 51, 235, 189, 222, 32, 94, 189, 174, 140, 182, 190, 71, 190, 187, 61, 235, 130, 24, 190, 43, 174, 194, 61, 27, 128, 26, 62, 178, 57, 55, 62, 39, 9, 1, 62, 121, 167, 128, 61, 252, 77, 49, 60, 210, 117, 140, 190, 190, 67, 149, 61, 188, 29, 97, 190, 213, 222, 19, 62, 25, 169, 175, 190, 39, 52, 192, 60, 54, 38, 59, 62, 100, 62, 213, 62, 112, 63, 182, 190, 170, 130, 112, 190, 204, 109, 82, 62, 73, 77, 6, 190, 59, 215, 126, 60, 131, 17, 201, 61, 35, 92, 140, 62, 167, 69, 37, 188, 24, 55, 185, 190, 253, 211, 138, 190, 59, 194, 73, 62, 117, 59, 45, 190, 204, 42, 127, 61, 112, 216, 49, 62, 146, 4, 150, 189, 121, 186, 253, 190, 76, 75, 66, 62, 7, 132, 13, 191, 18, 105, 169, 190, 24, 59, 162, 62, 73, 102, 52, 190, 21, 3, 154, 61, 31, 225, 77, 62, 6, 32, 189, 189, 180, 196, 156, 188, 226, 150, 42, 62, 41, 21, 244, 61, 253, 250, 82, 189, 131, 71, 149, 60, 139, 120, 173, 62, 30, 158, 77, 61, 222, 20, 104, 61, 189, 71, 83, 61, 9, 48, 58, 190, 78, 48, 27, 61, 41, 183, 226, 61, 147, 89, 219, 61, 250, 137, 98, 62, 70, 162, 108, 191, 133, 44, 60, 63, 227, 139, 177, 190, 80, 167, 50, 191, 94, 203, 137, 190, 101, 70, 205, 61, 219, 89, 7, 63, 201, 26, 137, 62, 225, 1, 70, 189, 87, 105, 159, 191, 144, 230, 141, 61, 174, 189, 178, 191, 110, 244, 43, 61, 55, 52, 58, 61, 225, 13, 107, 190, 189, 114, 172, 62, 68, 142, 35, 191, 134, 16, 149, 61, 134, 81, 226, 189, 4, 115, 165, 190, 93, 170, 189, 61, 0, 67, 89, 62, 196, 184, 163, 62, 248, 4, 126, 62, 23, 228, 240, 61, 156, 201, 109, 191, 228, 42, 31, 190, 73, 67, 39, 188, 102, 117, 232, 61, 7, 183, 63, 62, 9, 221, 53, 62, 108, 235, 117, 62, 213, 57, 141, 191, 25, 187, 179, 62, 8, 92, 45, 189, 3, 181, 108, 191, 208, 129, 146, 190, 152, 191, 18, 62, 240, 183, 128, 62, 56, 34, 63, 62, 46, 200, 58, 62, 1, 4, 161, 191, 247, 199, 84, 189, 24, 4, 121, 191, 96, 138, 143, 62, 201, 152, 93, 62, 105, 136, 160, 189, 157, 140, 54, 189, 140, 91, 55, 62, 43, 50, 140, 60, 2, 14, 186, 189, 140, 60, 14, 62, 191, 107, 17, 62, 79, 211, 253, 61, 230, 44, 173, 62, 78, 71, 29, 63, 181, 236, 103, 62, 24, 96, 4, 191, 179, 239, 98, 61, 34, 107, 204, 61, 28, 189, 8, 62, 5, 19, 64, 189, 94, 171, 203, 189, 31, 94, 197, 61, 188, 225, 2, 60, 179, 53, 83, 189, 107, 210, 2, 190, 96, 38, 203, 61, 226, 194, 206, 188, 179, 138, 242, 190, 83, 1, 175, 60, 222, 81, 178, 189, 222, 43, 41, 190, 77, 139, 187, 61, 57, 94, 23, 61, 48, 155, 37, 190, 0, 90, 92, 190, 29, 237, 25, 62, 71, 209, 38, 189, 93, 190, 10, 62, 167, 59, 176, 60, 182, 211, 134, 190, 251, 139, 245, 61, 25, 11, 1, 62, 173, 222, 201, 189, 97, 27, 216, 60, 61, 18, 42, 62, 68, 96, 195, 190, 78, 14, 16, 62, 199, 108, 114, 62, 171, 77, 143, 190, 237, 15, 233, 190, 142, 179, 56, 62, 154, 225, 76, 61, 207, 177, 228, 61, 87, 7, 243, 61, 172, 233, 90, 189, 181, 240, 209, 61, 2, 174, 46, 189, 17, 68, 231, 189, 17, 62, 49, 189, 156, 81, 175, 190, 169, 94, 18, 189, 12, 94, 144, 61, 97, 5, 107, 62, 155, 230, 31, 190, 124, 203, 16, 190, 234, 88, 191, 61, 86, 76, 207, 61, 166, 117, 142, 190, 37, 249, 124, 62, 119, 62, 46, 189, 229, 16, 114, 62, 191, 24, 4, 62, 108, 125, 30, 61, 32, 180, 31, 62, 55, 14, 93, 61, 240, 206, 75, 188, 56, 234, 253, 189, 171, 182, 182, 61, 202, 92, 200, 61, 44, 51, 135, 189, 29, 27, 167, 190, 218, 250, 2, 191, 109, 53, 201, 59, 160, 37, 102, 190, 223, 192, 108, 61, 111, 209, 101, 62, 208, 227, 109, 189, 99, 79, 36, 60, 33, 18, 223, 189, 64, 34, 135, 60, 58, 102, 239, 62, 38, 129, 216, 190, 77, 180, 129, 189, 229, 145, 227, 61, 150, 33, 49, 62, 94, 177, 239, 189, 55, 208, 228, 188, 93, 99, 183, 188, 69, 86, 146, 61, 69, 7, 145, 190, 34, 233, 83, 62, 227, 34, 187, 189, 77, 161, 120, 61, 6, 243, 146, 62, 150, 161, 166, 61, 77, 197, 213, 61, 59, 253, 103, 58, 11, 146, 31, 189, 176, 175, 188, 188, 171, 47, 251, 61, 236, 239, 148, 188, 122, 115, 118, 190, 141, 126, 94, 62, 109, 64, 126, 62, 37, 249, 48, 190, 128, 36, 250, 190, 11, 29, 110, 61, 139, 57, 203, 60, 138, 155, 119, 62, 26, 117, 242, 60, 223, 237, 139, 190, 200, 100, 214, 190, 112, 41, 174, 190, 164, 206, 53, 190, 237, 23, 155, 189, 238, 4, 51, 62, 105, 138, 2, 60, 145, 105, 245, 190, 87, 27, 133, 62, 175, 202, 162, 190, 168, 78, 45, 190, 79, 93, 52, 63, 93, 95, 170, 190, 216, 224, 124, 189, 136, 77, 91, 190, 94, 9, 124, 190, 41, 209, 138, 62, 54, 107, 82, 190, 176, 10, 244, 62, 10, 169, 231, 190, 20, 18, 146, 61, 167, 209, 129, 59, 104, 203, 187, 190, 4, 212, 174, 190, 197, 197, 65, 190, 58, 241, 72, 190, 234, 193, 184, 62, 250, 50, 79, 61, 248, 179, 251, 189, 2, 250, 105, 61, 143, 31, 140, 191, 39, 83, 150, 59, 50, 184, 16, 190, 112, 244, 201, 190, 209, 201, 42, 62, 191, 204, 67, 190, 110, 22, 8, 62, 119, 240, 96, 189, 149, 23, 143, 62, 72, 228, 53, 190, 188, 118, 167, 62, 104, 176, 201, 190, 233, 212, 203, 60, 202, 161, 155, 189, 224, 145, 51, 190, 12, 238, 154, 62, 107, 179, 26, 62, 246, 128, 191, 190, 166, 139, 78, 190, 143, 34, 12, 62, 30, 254, 36, 190, 41, 194, 9, 62, 10, 227, 192, 187, 199, 116, 2, 62, 198, 163, 5, 62, 229, 253, 64, 61, 201, 200, 57, 190, 189, 254, 171, 190, 121, 209, 102, 62, 3, 124, 49, 190, 13, 1, 218, 190, 224, 24, 67, 190, 232, 174, 219, 190, 231, 123, 197, 190, 190, 236, 197, 61, 115, 147, 131, 189, 164, 105, 174, 62, 142, 200, 225, 190, 95, 35, 148, 190, 37, 131, 222, 190, 210, 108, 195, 189, 156, 248, 84, 61, 196, 247, 17, 189, 103, 86, 219, 189, 240, 68, 214, 190, 49, 215, 79, 190, 99, 48, 183, 190, 5, 139, 178, 59, 244, 212, 244, 61, 178, 159, 16, 191, 173, 246, 226, 189, 70, 207, 195, 62, 122, 230, 74, 190, 245, 37, 43, 62, 57, 150, 80, 186, 222, 190, 88, 61, 144, 66, 61, 62, 160, 7, 233, 62, 78, 112, 102, 62, 17, 191, 2, 63, 122, 211, 59, 62, 241, 132, 252, 190, 100, 244, 20, 189, 94, 40, 191, 189, 88, 118, 48, 62, 195, 195, 23, 62, 202, 27, 103, 62, 115, 46, 79, 190, 218, 19, 161, 62, 56, 198, 99, 190, 14, 74, 195, 61, 177, 151, 88, 61, 202, 65, 103, 62, 129, 63, 179, 189, 176, 152, 81, 62, 180, 65, 158, 60, 178, 243, 170, 62, 55, 68, 18, 63, 152, 158, 12, 62, 70, 80, 186, 61, 172, 135, 238, 61, 200, 154, 172, 190, 56, 68, 175, 62, 153, 99, 135, 190, 91, 116, 213, 189, 137, 177, 112, 191, 39, 0, 59, 189, 40, 155, 28, 190, 148, 1, 87, 191, 1, 172, 134, 190, 201, 121, 121, 62, 233, 5, 220, 62, 9, 67, 40, 191, 132, 196, 98, 189, 43, 228, 138, 190, 142, 26, 234, 190, 39, 36, 217, 61, 233, 2, 62, 190, 6, 137, 237, 188, 185, 2, 71, 62, 107, 165, 153, 61, 153, 129, 59, 189, 252, 59, 133, 190, 180, 199, 138, 62, 107, 58, 31, 191, 59, 244, 103, 189, 106, 27, 32, 190, 149, 74, 80, 62, 237, 30, 194, 190, 89, 81, 127, 62, 121, 25, 212, 190, 150, 192, 151, 190, 61, 163, 130, 190, 219, 212, 70, 190, 236, 238, 9, 62, 236, 201, 135, 190, 113, 252, 107, 62, 94, 146, 81, 60, 208, 219, 12, 62, 182, 241, 153, 190, 206, 49, 230, 61, 160, 199, 61, 61, 244, 158, 223, 190, 108, 106, 165, 190, 38, 137, 121, 62, 200, 97, 33, 188, 236, 19, 199, 188, 206, 233, 46, 62, 12, 117, 214, 60, 16, 49, 88, 61, 162, 36, 206, 61, 240, 31, 26, 190, 208, 144, 132, 62, 222, 221, 236, 190, 95, 192, 22, 62, 23, 43, 193, 189, 127, 253, 10, 188, 35, 249, 233, 61, 11, 192, 158, 61, 12, 151, 13, 189, 81, 134, 255, 189, 79, 40, 94, 190, 84, 88, 194, 59, 59, 161, 4, 190, 146, 158, 51, 62, 35, 51, 132, 190, 67, 4, 225, 185, 178, 131, 91, 60, 244, 245, 92, 62, 6, 175, 33, 62, 137, 193, 255, 188, 160, 219, 215, 189, 69, 234, 146, 61, 158, 107, 51, 62, 232, 50, 235, 61, 123, 2, 146, 61, 169, 191, 142, 191, 187, 194, 202, 189, 221, 214, 181, 190, 47, 19, 106, 191, 241, 136, 9, 62, 117, 101, 115, 190, 199, 173, 201, 189, 211, 140, 193, 61, 46, 93, 1, 190, 145, 255, 159, 189, 86, 229, 84, 190, 34, 111, 55, 62, 7, 150, 117, 191, 66, 56, 73, 62, 104, 21, 27, 191, 158, 135, 68, 61, 30, 209, 42, 190, 129, 55, 137, 62, 75, 133, 37, 191, 17, 94, 92, 191, 235, 43, 233, 188, 42, 81, 121, 190, 108, 204, 82, 62, 101, 0, 48, 190, 209, 28, 43, 62, 215, 39, 33, 62, 230, 223, 27, 61, 232, 158, 182, 190, 5, 170, 223, 189, 112, 215, 32, 190, 215, 20, 115, 60, 252, 58, 94, 189, 170, 254, 38, 189, 153, 43, 156, 189, 106, 67, 243, 188, 9, 95, 219, 60, 0, 188, 26, 61, 80, 167, 190, 61, 251, 208, 225, 189, 61, 165, 215, 61, 36, 199, 31, 190, 149, 140, 181, 189, 114, 114, 24, 61, 90, 126, 116, 190, 215, 204, 229, 60, 189, 221, 249, 188, 98, 82, 60, 189, 55, 245, 24, 190, 238, 171, 168, 189, 173, 153, 229, 189, 194, 231, 31, 190, 195, 28, 110, 61, 30, 95, 197, 61, 151, 41, 198, 189, 215, 2, 63, 190, 177, 143, 67, 190, 164, 12, 61, 61, 130, 148, 77, 190, 233, 47, 237, 189, 221, 130, 195, 189, 5, 240, 207, 60, 59, 174, 30, 62, 188, 184, 13, 60, 87, 213, 166, 189, 24, 100, 236, 62, 173, 196, 15, 63, 56, 221, 248, 189, 141, 96, 158, 62, 207, 112, 103, 61, 195, 218, 0, 191, 246, 143, 88, 62, 105, 21, 110, 189, 194, 233, 31, 189, 141, 147, 236, 189, 92, 57, 26, 191, 238, 65, 19, 190, 226, 246, 145, 62, 81, 139, 246, 189, 183, 89, 255, 190, 122, 24, 144, 189, 8, 224, 226, 189, 77, 160, 131, 190, 23, 188, 23, 190, 113, 250, 36, 62, 190, 15, 191, 190, 0, 157, 165, 190, 171, 246, 60, 190, 9, 55, 133, 62, 108, 203, 199, 61, 85, 158, 178, 62, 205, 221, 183, 61, 51, 32, 9, 191, 253, 43, 212, 62, 232, 251, 142, 189, 71, 32, 71, 62, 123, 42, 123, 62, 119, 57, 197, 60, 125, 234, 209, 190, 208, 51, 37, 62, 120, 119, 163, 189, 119, 103, 25, 190, 7, 43, 107, 189, 40, 78, 160, 62, 165, 216, 38, 190, 197, 189, 64, 62, 229, 209, 237, 62, 6, 232, 139, 189, 37, 229, 241, 190, 112, 35, 2, 189, 222, 37, 214, 189, 29, 145, 197, 189, 92, 97, 1, 190, 70, 15, 20, 61, 96, 189, 101, 189, 193, 171, 30, 62, 196, 1, 109, 189, 196, 18, 230, 189, 152, 194, 13, 62, 227, 254, 132, 190, 85, 87, 195, 190, 0, 219, 1, 190, 193, 101, 45, 62, 54, 51, 95, 191, 201, 232, 181, 189, 188, 33, 10, 190, 90, 232, 173, 189, 152, 235, 186, 60, 152, 244, 238, 189, 245, 231, 32, 190, 65, 212, 254, 188, 193, 34, 45, 190, 221, 15, 235, 188, 118, 195, 4, 190, 34, 189, 60, 188, 145, 71, 13, 62, 34, 4, 27, 189, 37, 214, 0, 61, 114, 100, 71, 187, 175, 235, 157, 61, 244, 192, 16, 190, 25, 20, 41, 190, 74, 59, 244, 189, 142, 233, 40, 62, 94, 18, 248, 61, 228, 234, 140, 188, 161, 130, 105, 189, 63, 123, 213, 189, 129, 168, 146, 61, 72, 168, 134, 59, 250, 217, 153, 188, 113, 140, 84, 190, 228, 24, 227, 188, 41, 26, 85, 190, 132, 197, 15, 61, 122, 124, 177, 61, 3, 230, 172, 189, 121, 236, 104, 61, 238, 238, 199, 61, 150, 82, 44, 62, 124, 160, 255, 62, 59, 37, 233, 189, 22, 45, 58, 190, 118, 187, 109, 190, 134, 154, 203, 188, 3, 111, 150, 62, 146, 150, 141, 190, 12, 159, 148, 62, 220, 137, 123, 189, 72, 31, 154, 62, 228, 251, 208, 188, 18, 30, 135, 190, 236, 82, 26, 61, 102, 184, 96, 61, 16, 89, 211, 61, 168, 110, 8, 62, 86, 82, 1, 62, 135, 128, 95, 190, 43, 193, 123, 62, 207, 191, 173, 189, 79, 160, 165, 62, 254, 130, 23, 190, 13, 44, 72, 190, 19, 62, 16, 62, 161, 42, 0, 61, 178, 160, 87, 62, 78, 1, 238, 190, 88, 246, 77, 190, 213, 60, 12, 191, 98, 56, 94, 190, 244, 252, 179, 189, 17, 245, 228, 189, 63, 65, 102, 190, 154, 106, 30, 190, 12, 104, 209, 61, 110, 81, 57, 189, 65, 229, 117, 61, 243, 167, 164, 59, 184, 109, 13, 62, 137, 176, 230, 61, 247, 49, 78, 61, 122, 49, 129, 60, 72, 148, 11, 190, 63, 2, 8, 62, 176, 221, 111, 61, 90, 233, 1, 60, 111, 136, 255, 188, 15, 73, 13, 190, 162, 172, 55, 185, 46, 68, 180, 61, 0, 44, 87, 62, 189, 205, 128, 61, 108, 217, 223, 189, 19, 40, 36, 189, 219, 223, 169, 61, 175, 107, 211, 186, 62, 155, 136, 190, 224, 233, 202, 61, 122, 45, 53, 189, 192, 2, 4, 190, 184, 62, 95, 190, 31, 169, 60, 190, 188, 152, 143, 189, 159, 117, 146, 60, 131, 207, 131, 190, 72, 236, 213, 61, 183, 26, 200, 190, 88, 193, 211, 61, 199, 1, 178, 189, 46, 221, 136, 190, 50, 231, 45, 189, 212, 185, 0, 190, 232, 226, 128, 61, 198, 202, 126, 62, 223, 59, 27, 190, 8, 146, 8, 62, 92, 123, 7, 191, 123, 24, 197, 61, 174, 157, 11, 62, 127, 195, 228, 190, 209, 163, 128, 189, 114, 95, 233, 58, 119, 20, 41, 190, 188, 114, 176, 189, 39, 88, 206, 189, 221, 117, 238, 61, 1, 210, 154, 62, 94, 34, 131, 190, 146, 179, 8, 62, 13, 116, 189, 190, 35, 96, 185, 189, 245, 174, 46, 190, 160, 42, 220, 62, 181, 231, 135, 59, 149, 228, 27, 189, 70, 74, 132, 189, 23, 238, 41, 189, 223, 216, 139, 61, 204, 187, 120, 62, 162, 3, 2, 190, 26, 108, 144, 189, 74, 141, 180, 189, 246, 149, 74, 189, 68, 111, 125, 62, 67, 17, 67, 62, 163, 85, 134, 62, 48, 232, 15, 191, 53, 34, 228, 187, 216, 211, 152, 190, 244, 85, 33, 189, 251, 255, 107, 62, 16, 206, 84, 190, 179, 31, 7, 62, 117, 106, 163, 60, 55, 80, 216, 188, 149, 133, 105, 62, 119, 45, 98, 190, 181, 236, 187, 62, 78, 237, 169, 190, 249, 92, 213, 187, 5, 169, 6, 62, 143, 190, 157, 61, 16, 177, 184, 61, 52, 143, 85, 189, 239, 147, 87, 190, 232, 176, 22, 190, 27, 162, 84, 62, 21, 92, 176, 188, 158, 53, 237, 188, 166, 74, 134, 62, 0, 23, 54, 189, 45, 132, 139, 189, 249, 40, 66, 62, 23, 251, 80, 191, 190, 77, 204, 186, 37, 251, 4, 190, 124, 93, 2, 191, 87, 155, 149, 61, 140, 205, 8, 191, 112, 198, 212, 187, 99, 1, 253, 188, 211, 60, 143, 61, 143, 215, 163, 190, 98, 123, 32, 62, 206, 64, 6, 190, 147, 216, 183, 190, 139, 84, 52, 190, 120, 152, 170, 62, 222, 55, 156, 61, 26, 111, 89, 189, 206, 254, 182, 59, 17, 33, 14, 190, 118, 34, 47, 61, 247, 210, 41, 61, 158, 242, 93, 190, 73, 137, 129, 189, 156, 114, 184, 61, 78, 28, 1, 61, 253, 83, 208, 60, 227, 95, 226, 190, 78, 56, 22, 191, 69, 115, 109, 62, 121, 31, 25, 190, 94, 191, 18, 62, 117, 107, 2, 62, 242, 65, 22, 191, 206, 88, 104, 190, 248, 199, 146, 189, 25, 125, 211, 190, 11, 7, 201, 61, 95, 159, 150, 190, 70, 45, 47, 188, 200, 240, 25, 189, 203, 41, 1, 62, 243, 211, 47, 190, 183, 242, 208, 61, 45, 140, 112, 190, 54, 70, 167, 61, 132, 241, 29, 189, 15, 86, 48, 190, 36, 164, 163, 62, 110, 135, 100, 62, 121, 43, 88, 62, 185, 111, 3, 190, 174, 183, 87, 62, 203, 209, 249, 189, 104, 168, 15, 62, 160, 184, 198, 188, 250, 24, 149, 62, 2, 149, 17, 189, 252, 114, 41, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 92, 44, 61, 233, 20, 29, 190, 22, 115, 2, 187, 252, 126, 45, 62, 193, 98, 14, 62, 54, 213, 219, 189, 87, 181, 221, 60, 25, 130, 22, 62, 177, 8, 38, 189, 217, 193, 101, 61, 226, 222, 154, 62, 161, 26, 53, 60, 129, 190, 120, 62, 225, 53, 195, 61, 135, 140, 37, 190, 126, 103, 230, 189, 159, 3, 76, 62, 157, 112, 89, 62, 59, 19, 201, 61, 239, 66, 206, 189, 77, 66, 82, 62, 146, 113, 53, 61, 235, 248, 126, 190, 23, 144, 28, 189, 181, 207, 177, 190, 163, 94, 236, 188, 39, 168, 98, 62, 111, 164, 72, 61, 45, 104, 209, 190, 241, 156, 176, 189, 8, 20, 28, 62, 107, 227, 89, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 244, 156, 190, 52, 230, 203, 59, 87, 106, 15, 62, 138, 16, 163, 61, 229, 185, 143, 61, 243, 83, 160, 188, 52, 241, 20, 190, 209, 113, 8, 191, 147, 21, 96, 62, 92, 249, 61, 62, 110, 132, 134, 63, 79, 225, 76, 63, 221, 133, 93, 59, 207, 162, 14, 62, 124, 155, 209, 61, 72, 190, 115, 190, 127, 33, 246, 62, 234, 27, 27, 63, 1, 55, 242, 190, 227, 79, 23, 191, 145, 152, 227, 61, 96, 242, 76, 191, 15, 92, 206, 60, 182, 72, 45, 191, 224, 230, 129, 190, 45, 53, 32, 190, 34, 176, 209, 190, 64, 89, 60, 61, 63, 78, 88, 190, 40, 252, 237, 61, 130, 71, 1, 61, 23, 244, 149, 62, 124, 55, 134, 190, 101, 236, 253, 189, 122, 106, 39, 190, 245, 79, 135, 189, 25, 93, 98, 190, 169, 45, 207, 189, 136, 66, 228, 61, 188, 65, 137, 62, 3, 155, 9, 63, 39, 2, 79, 62, 96, 33, 214, 61, 77, 87, 151, 61, 183, 123, 87, 190, 82, 111, 47, 189, 124, 243, 50, 62, 41, 120, 106, 189, 98, 250, 129, 190, 120, 191, 8, 62, 3, 46, 86, 190, 180, 190, 135, 62, 117, 188, 65, 190, 194, 235, 136, 190, 15, 221, 79, 61, 31, 220, 179, 61, 145, 221, 63, 63, 161, 183, 195, 60, 197, 115, 220, 189, 51, 195, 65, 190, 227, 95, 192, 62, 254, 201, 133, 190, 53, 217, 177, 190, 232, 245, 71, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 223, 158, 61, 157, 49, 179, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {238, 216, 15, 63, 110, 111, 159, 63, 140, 232, 145, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {250, 15, 7, 192, 72, 193, 102, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0062/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}