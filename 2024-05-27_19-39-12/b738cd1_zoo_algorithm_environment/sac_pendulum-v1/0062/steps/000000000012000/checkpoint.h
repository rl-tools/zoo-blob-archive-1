// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 22, 70, 190, 147, 94, 21, 63, 220, 220, 244, 62, 231, 174, 27, 63, 55, 6, 133, 63, 244, 60, 176, 62, 127, 50, 31, 63, 117, 197, 117, 191, 30, 202, 18, 63, 133, 120, 77, 191, 202, 17, 9, 191, 134, 62, 61, 60, 93, 142, 199, 61, 175, 84, 68, 191, 178, 159, 184, 190, 99, 70, 105, 190, 199, 118, 69, 190, 17, 79, 226, 62, 240, 89, 1, 190, 34, 135, 128, 63, 134, 84, 90, 191, 124, 15, 75, 190, 107, 19, 164, 189, 156, 181, 41, 191, 36, 71, 100, 63, 16, 72, 248, 188, 126, 25, 76, 62, 105, 246, 222, 61, 7, 57, 69, 191, 157, 186, 85, 191, 38, 208, 155, 63, 88, 110, 123, 189, 50, 68, 228, 189, 50, 149, 231, 62, 146, 223, 250, 62, 255, 38, 127, 62, 23, 121, 49, 190, 44, 173, 142, 190, 85, 209, 28, 191, 15, 148, 11, 191, 143, 226, 59, 63, 56, 121, 119, 189, 209, 234, 141, 62, 40, 152, 129, 61, 104, 215, 75, 63, 91, 246, 154, 61, 48, 186, 149, 191, 57, 53, 62, 191, 116, 86, 1, 191, 65, 31, 143, 63, 13, 72, 202, 61, 226, 218, 218, 61, 125, 146, 118, 191, 53, 183, 176, 190, 254, 127, 187, 61, 194, 114, 221, 190, 66, 12, 181, 190, 247, 113, 222, 190, 128, 235, 85, 63, 16, 68, 119, 190, 17, 51, 183, 61, 136, 162, 147, 63, 186, 192, 114, 190, 89, 182, 161, 62, 71, 171, 123, 63, 102, 133, 203, 62, 105, 135, 9, 63, 217, 166, 178, 189, 48, 16, 10, 191, 63, 156, 189, 62, 249, 87, 234, 190, 174, 80, 169, 190, 195, 201, 198, 190, 207, 232, 87, 63, 248, 231, 230, 190, 230, 111, 26, 62, 16, 2, 128, 191, 226, 93, 69, 189, 173, 230, 36, 191, 206, 162, 69, 60, 226, 177, 221, 190, 171, 72, 5, 191, 115, 174, 18, 191, 222, 71, 68, 190, 105, 82, 67, 191, 65, 207, 108, 189, 51, 73, 188, 189, 154, 175, 5, 62, 21, 226, 175, 191, 140, 12, 141, 190, 251, 140, 1, 191, 134, 174, 52, 191, 163, 3, 149, 189, 52, 175, 131, 189, 87, 235, 157, 191, 248, 88, 117, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 240, 51, 191, 131, 16, 132, 189, 112, 157, 250, 62, 231, 207, 71, 62, 122, 80, 138, 190, 146, 162, 185, 190, 146, 74, 204, 190, 97, 79, 223, 190, 233, 255, 163, 190, 248, 193, 10, 63, 26, 44, 72, 189, 32, 240, 53, 191, 17, 72, 140, 190, 248, 50, 154, 62, 242, 179, 4, 61, 195, 23, 26, 63, 36, 39, 242, 190, 86, 193, 6, 63, 87, 151, 68, 190, 183, 226, 146, 190, 246, 84, 80, 190, 125, 36, 136, 62, 90, 163, 14, 63, 204, 245, 23, 191, 152, 223, 224, 62, 142, 117, 224, 62, 210, 62, 131, 61, 122, 217, 5, 63, 250, 199, 34, 63, 75, 124, 62, 190, 164, 90, 5, 63, 66, 176, 203, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 104, 89, 190, 223, 106, 150, 61, 191, 158, 182, 190, 14, 182, 224, 189, 53, 104, 150, 189, 105, 219, 149, 191, 99, 68, 25, 189, 154, 92, 77, 190, 46, 134, 88, 191, 255, 253, 21, 62, 92, 100, 43, 62, 171, 167, 9, 190, 110, 18, 156, 190, 6, 140, 248, 189, 114, 114, 213, 190, 133, 7, 15, 62, 181, 79, 201, 190, 104, 88, 35, 62, 26, 151, 68, 190, 134, 65, 107, 61, 251, 234, 186, 190, 83, 215, 108, 191, 247, 218, 206, 189, 253, 126, 129, 190, 147, 111, 149, 60, 172, 102, 204, 60, 211, 106, 236, 58, 129, 106, 104, 62, 213, 50, 40, 190, 187, 232, 1, 191, 100, 195, 183, 61, 14, 161, 228, 61, 1, 227, 227, 190, 154, 126, 21, 62, 132, 123, 178, 60, 70, 242, 45, 62, 18, 44, 23, 190, 226, 140, 147, 190, 152, 4, 161, 190, 121, 31, 3, 190, 139, 93, 9, 62, 180, 144, 193, 61, 174, 76, 218, 62, 197, 72, 44, 191, 71, 145, 102, 190, 114, 219, 37, 191, 243, 91, 4, 190, 50, 11, 20, 62, 240, 225, 13, 190, 118, 135, 100, 62, 209, 227, 175, 190, 189, 236, 141, 190, 196, 121, 125, 189, 17, 51, 0, 189, 198, 214, 165, 61, 152, 69, 212, 190, 68, 236, 66, 190, 104, 204, 27, 58, 178, 36, 111, 61, 51, 85, 11, 189, 220, 150, 37, 61, 54, 191, 31, 61, 106, 56, 57, 62, 131, 244, 97, 62, 80, 66, 18, 190, 35, 188, 5, 62, 144, 199, 160, 61, 64, 9, 86, 61, 136, 92, 19, 62, 36, 226, 8, 189, 116, 248, 188, 189, 7, 118, 227, 189, 64, 170, 8, 190, 242, 132, 22, 188, 89, 22, 232, 189, 78, 14, 243, 61, 118, 99, 43, 189, 222, 166, 170, 188, 116, 20, 36, 190, 6, 114, 4, 190, 46, 12, 231, 189, 199, 40, 245, 60, 106, 50, 29, 62, 255, 19, 150, 61, 67, 81, 22, 190, 187, 125, 34, 189, 96, 25, 75, 189, 244, 196, 158, 61, 9, 72, 4, 190, 13, 143, 102, 61, 205, 241, 31, 190, 120, 50, 29, 190, 33, 39, 42, 190, 252, 106, 238, 61, 169, 46, 130, 61, 217, 83, 94, 190, 85, 231, 87, 190, 180, 155, 116, 190, 33, 202, 246, 61, 11, 243, 236, 189, 2, 147, 185, 190, 33, 87, 174, 61, 146, 220, 208, 190, 86, 55, 111, 190, 28, 97, 62, 61, 84, 246, 248, 189, 11, 69, 178, 62, 189, 31, 212, 190, 186, 115, 19, 190, 102, 113, 91, 190, 145, 74, 112, 189, 178, 99, 10, 62, 189, 103, 172, 190, 78, 214, 174, 189, 220, 192, 79, 61, 66, 138, 129, 189, 237, 180, 8, 189, 47, 244, 199, 188, 3, 171, 227, 61, 182, 181, 20, 191, 84, 102, 198, 189, 148, 82, 39, 62, 38, 95, 127, 189, 20, 71, 91, 189, 63, 113, 43, 62, 101, 57, 81, 60, 118, 156, 57, 62, 37, 227, 56, 62, 27, 202, 140, 190, 192, 218, 42, 59, 141, 32, 144, 61, 238, 22, 9, 189, 244, 90, 73, 189, 128, 80, 110, 61, 102, 189, 21, 190, 1, 108, 13, 190, 73, 165, 73, 61, 67, 196, 3, 62, 2, 23, 40, 62, 26, 99, 131, 190, 200, 64, 241, 61, 38, 29, 222, 188, 129, 102, 96, 62, 188, 128, 18, 62, 10, 137, 203, 188, 144, 48, 72, 59, 136, 254, 236, 60, 62, 18, 54, 190, 99, 50, 242, 61, 104, 54, 23, 190, 132, 113, 139, 62, 194, 245, 132, 190, 26, 57, 68, 189, 160, 96, 5, 62, 254, 224, 201, 189, 156, 183, 54, 62, 238, 34, 208, 189, 73, 51, 117, 190, 74, 166, 91, 62, 212, 135, 72, 188, 113, 241, 156, 61, 46, 63, 12, 189, 137, 200, 233, 61, 152, 179, 47, 62, 162, 22, 245, 61, 11, 127, 27, 190, 6, 109, 244, 61, 71, 229, 251, 188, 103, 217, 231, 189, 1, 9, 8, 62, 216, 128, 161, 60, 43, 223, 135, 61, 66, 191, 157, 189, 123, 112, 26, 190, 117, 151, 20, 190, 126, 229, 49, 189, 223, 244, 37, 190, 126, 100, 4, 190, 227, 218, 11, 62, 233, 139, 41, 190, 24, 91, 188, 61, 105, 67, 153, 189, 64, 184, 52, 190, 71, 87, 231, 189, 233, 66, 156, 60, 195, 104, 221, 189, 178, 66, 205, 189, 7, 239, 26, 190, 76, 8, 129, 60, 44, 172, 17, 62, 52, 191, 209, 59, 249, 22, 149, 189, 102, 95, 34, 190, 193, 173, 73, 61, 91, 25, 1, 190, 214, 173, 139, 189, 98, 129, 126, 189, 203, 86, 188, 61, 215, 147, 251, 189, 209, 78, 46, 62, 141, 253, 192, 188, 104, 62, 10, 61, 43, 227, 27, 62, 240, 87, 149, 189, 133, 248, 51, 62, 83, 152, 128, 189, 132, 13, 21, 61, 241, 175, 48, 189, 107, 168, 17, 62, 200, 176, 4, 189, 123, 19, 225, 59, 220, 90, 44, 190, 246, 76, 195, 189, 22, 5, 175, 189, 120, 91, 50, 190, 90, 39, 232, 60, 246, 132, 111, 61, 159, 156, 133, 189, 167, 150, 249, 189, 210, 170, 253, 189, 10, 227, 17, 188, 99, 126, 205, 189, 19, 112, 104, 61, 180, 197, 6, 190, 196, 26, 140, 62, 89, 74, 245, 62, 7, 84, 120, 191, 80, 97, 129, 62, 145, 210, 137, 190, 238, 47, 233, 190, 218, 41, 29, 62, 108, 66, 111, 190, 116, 105, 168, 190, 67, 84, 31, 61, 105, 226, 128, 62, 134, 224, 83, 61, 222, 126, 93, 190, 203, 112, 172, 60, 180, 166, 56, 191, 145, 52, 38, 62, 0, 27, 25, 190, 205, 32, 81, 62, 6, 28, 88, 190, 119, 226, 201, 189, 133, 24, 61, 191, 144, 214, 9, 191, 89, 165, 45, 190, 27, 198, 158, 190, 8, 209, 104, 62, 50, 242, 45, 188, 103, 233, 58, 61, 220, 123, 91, 189, 119, 246, 57, 61, 249, 93, 64, 190, 209, 68, 110, 61, 126, 179, 233, 60, 88, 1, 177, 188, 185, 103, 14, 62, 78, 136, 16, 61, 253, 199, 131, 191, 106, 30, 54, 190, 178, 11, 48, 189, 119, 137, 251, 62, 41, 184, 252, 61, 189, 2, 49, 62, 235, 124, 215, 188, 87, 202, 181, 61, 57, 60, 202, 62, 138, 134, 47, 62, 220, 68, 215, 189, 93, 81, 51, 189, 203, 30, 189, 190, 132, 242, 102, 61, 211, 71, 159, 190, 44, 51, 240, 61, 196, 93, 124, 62, 58, 207, 92, 62, 101, 18, 236, 61, 235, 114, 98, 189, 20, 51, 116, 188, 106, 208, 54, 190, 79, 45, 91, 188, 153, 173, 87, 190, 175, 126, 178, 188, 42, 54, 138, 190, 107, 64, 249, 188, 109, 200, 26, 61, 134, 249, 121, 62, 91, 175, 178, 190, 97, 22, 149, 190, 2, 34, 95, 62, 21, 194, 125, 190, 177, 145, 208, 189, 203, 50, 5, 62, 254, 88, 164, 62, 77, 61, 48, 59, 72, 161, 206, 190, 247, 157, 173, 190, 155, 229, 71, 62, 229, 195, 128, 189, 171, 20, 160, 61, 22, 161, 58, 62, 156, 122, 129, 189, 154, 74, 254, 190, 251, 52, 109, 62, 97, 216, 222, 190, 78, 45, 166, 190, 180, 182, 190, 62, 179, 239, 124, 189, 55, 229, 83, 61, 136, 128, 145, 188, 6, 32, 189, 189, 92, 176, 38, 61, 7, 25, 90, 62, 44, 76, 139, 61, 94, 225, 133, 189, 221, 181, 122, 61, 14, 60, 39, 63, 21, 54, 137, 61, 244, 27, 76, 62, 35, 172, 46, 61, 124, 157, 90, 190, 234, 42, 22, 61, 6, 157, 7, 62, 147, 89, 219, 61, 218, 91, 94, 62, 152, 52, 16, 191, 250, 70, 59, 63, 221, 214, 244, 190, 216, 122, 123, 191, 125, 71, 113, 190, 103, 43, 128, 188, 69, 70, 7, 63, 178, 80, 130, 62, 135, 186, 79, 189, 143, 82, 194, 191, 157, 85, 143, 61, 8, 119, 218, 191, 110, 244, 43, 61, 32, 32, 19, 62, 255, 197, 120, 190, 53, 19, 165, 62, 235, 142, 4, 191, 134, 16, 149, 61, 221, 22, 248, 189, 185, 16, 160, 190, 210, 110, 141, 61, 92, 175, 136, 62, 187, 180, 210, 62, 80, 2, 56, 63, 108, 3, 24, 62, 145, 76, 63, 191, 106, 164, 19, 190, 190, 130, 176, 187, 141, 94, 255, 61, 151, 23, 25, 62, 9, 221, 53, 62, 191, 109, 122, 62, 187, 22, 157, 191, 195, 75, 178, 62, 112, 27, 106, 189, 240, 130, 158, 191, 113, 240, 59, 190, 53, 135, 3, 62, 211, 183, 128, 62, 244, 159, 232, 61, 54, 152, 69, 62, 253, 175, 164, 191, 75, 142, 187, 189, 108, 44, 95, 191, 96, 138, 143, 62, 27, 86, 148, 61, 160, 248, 80, 190, 20, 142, 28, 189, 119, 116, 99, 62, 43, 50, 140, 60, 112, 181, 157, 190, 71, 200, 0, 62, 104, 187, 186, 61, 125, 90, 209, 61, 255, 147, 197, 62, 176, 2, 32, 63, 108, 177, 112, 62, 38, 168, 236, 190, 14, 186, 69, 61, 89, 130, 239, 61, 120, 180, 5, 62, 176, 158, 58, 189, 236, 165, 96, 190, 119, 35, 175, 60, 166, 165, 200, 189, 244, 19, 26, 190, 172, 220, 145, 59, 53, 142, 214, 188, 28, 97, 7, 188, 215, 162, 204, 190, 153, 93, 187, 189, 61, 35, 212, 189, 180, 153, 59, 190, 81, 151, 29, 186, 18, 81, 147, 61, 157, 9, 45, 190, 168, 121, 174, 190, 148, 118, 37, 62, 250, 10, 106, 189, 102, 166, 31, 62, 112, 191, 124, 187, 60, 181, 187, 190, 91, 108, 111, 61, 27, 150, 28, 62, 11, 215, 206, 189, 1, 226, 132, 60, 38, 92, 175, 61, 239, 239, 3, 191, 131, 135, 5, 62, 215, 178, 86, 62, 230, 26, 123, 190, 129, 244, 218, 190, 167, 139, 60, 62, 229, 132, 204, 60, 61, 232, 85, 61, 160, 44, 6, 62, 56, 32, 180, 189, 112, 45, 113, 61, 100, 11, 106, 188, 227, 30, 229, 189, 207, 59, 62, 61, 238, 74, 99, 190, 56, 177, 149, 189, 8, 70, 173, 188, 242, 49, 118, 62, 161, 38, 35, 190, 125, 168, 255, 189, 48, 225, 199, 61, 51, 27, 132, 61, 165, 174, 144, 190, 169, 140, 148, 62, 189, 51, 128, 188, 78, 49, 140, 62, 116, 89, 174, 61, 104, 142, 207, 187, 74, 159, 5, 62, 120, 82, 234, 60, 7, 182, 73, 189, 27, 90, 14, 190, 206, 209, 125, 61, 239, 114, 162, 61, 232, 91, 148, 189, 211, 255, 181, 190, 236, 36, 39, 191, 237, 0, 31, 61, 100, 195, 221, 190, 70, 234, 109, 60, 193, 216, 130, 62, 8, 66, 131, 188, 193, 28, 161, 60, 103, 62, 110, 189, 183, 7, 175, 61, 144, 109, 18, 63, 111, 34, 185, 61, 91, 159, 153, 189, 161, 97, 152, 61, 105, 122, 63, 62, 241, 82, 141, 189, 124, 175, 191, 189, 50, 91, 164, 58, 20, 245, 179, 61, 83, 87, 143, 190, 217, 156, 126, 62, 86, 183, 49, 190, 79, 70, 227, 189, 156, 209, 143, 62, 68, 162, 233, 61, 45, 107, 46, 62, 28, 247, 41, 60, 45, 152, 127, 188, 196, 239, 68, 60, 234, 72, 62, 62, 167, 50, 205, 186, 233, 60, 205, 189, 41, 47, 106, 62, 63, 134, 119, 62, 166, 139, 41, 190, 43, 4, 248, 190, 169, 31, 149, 188, 50, 222, 11, 61, 137, 205, 161, 62, 237, 5, 142, 61, 215, 33, 71, 190, 156, 166, 160, 190, 41, 89, 143, 190, 37, 235, 225, 189, 207, 112, 60, 189, 199, 173, 58, 62, 31, 68, 94, 60, 42, 239, 220, 190, 89, 106, 140, 62, 4, 196, 167, 190, 222, 254, 37, 190, 91, 41, 68, 63, 175, 72, 164, 190, 12, 87, 144, 189, 17, 51, 7, 190, 102, 63, 7, 191, 78, 130, 179, 62, 238, 118, 133, 190, 118, 33, 23, 63, 16, 117, 165, 190, 2, 219, 95, 61, 29, 174, 73, 189, 57, 8, 159, 190, 83, 11, 27, 191, 51, 218, 49, 190, 89, 183, 91, 190, 63, 249, 182, 62, 107, 8, 74, 187, 58, 43, 12, 191, 187, 61, 119, 61, 72, 160, 83, 191, 39, 83, 150, 59, 228, 58, 25, 190, 247, 170, 197, 190, 8, 125, 116, 62, 4, 218, 69, 190, 78, 227, 15, 62, 252, 228, 217, 189, 29, 5, 144, 62, 42, 68, 93, 190, 180, 68, 164, 62, 186, 0, 229, 190, 193, 138, 165, 59, 104, 94, 149, 61, 23, 240, 150, 190, 0, 132, 153, 62, 118, 56, 41, 62, 235, 223, 198, 190, 58, 59, 158, 190, 196, 117, 207, 61, 146, 53, 223, 189, 149, 67, 152, 61, 121, 148, 88, 60, 72, 230, 140, 61, 80, 242, 209, 61, 77, 136, 155, 60, 166, 208, 42, 190, 229, 150, 152, 190, 212, 134, 92, 62, 141, 139, 133, 190, 127, 174, 216, 190, 163, 135, 70, 190, 178, 193, 37, 191, 134, 133, 198, 190, 45, 118, 29, 62, 99, 249, 76, 61, 28, 41, 226, 62, 20, 208, 254, 61, 245, 197, 132, 190, 219, 244, 47, 191, 181, 132, 211, 189, 171, 119, 11, 62, 123, 128, 62, 190, 19, 75, 40, 189, 247, 180, 190, 190, 248, 118, 195, 188, 220, 227, 144, 189, 207, 142, 243, 60, 234, 249, 105, 62, 219, 61, 10, 191, 143, 103, 215, 189, 183, 117, 189, 62, 142, 48, 218, 189, 68, 227, 36, 62, 56, 113, 34, 188, 185, 129, 224, 61, 109, 31, 70, 62, 234, 188, 2, 63, 215, 241, 94, 62, 238, 168, 4, 63, 243, 5, 106, 62, 110, 255, 3, 191, 82, 119, 81, 189, 53, 233, 178, 189, 204, 112, 38, 62, 193, 174, 28, 62, 222, 0, 175, 62, 205, 253, 120, 190, 39, 222, 155, 62, 102, 71, 71, 190, 225, 32, 201, 61, 240, 249, 0, 61, 255, 77, 126, 62, 173, 55, 1, 190, 10, 119, 89, 62, 147, 255, 215, 60, 5, 87, 163, 62, 230, 207, 16, 63, 110, 45, 59, 62, 180, 71, 200, 61, 131, 213, 33, 62, 40, 79, 182, 190, 208, 32, 179, 62, 242, 26, 47, 190, 95, 163, 195, 189, 245, 58, 117, 191, 115, 102, 113, 190, 51, 138, 127, 190, 254, 171, 95, 191, 86, 203, 72, 190, 0, 8, 9, 62, 178, 205, 153, 62, 11, 82, 202, 190, 189, 69, 150, 189, 74, 169, 168, 190, 138, 63, 11, 191, 25, 234, 251, 61, 16, 106, 68, 190, 20, 70, 252, 188, 230, 10, 56, 62, 250, 242, 196, 189, 66, 252, 61, 189, 237, 202, 142, 190, 80, 53, 125, 62, 161, 134, 105, 191, 232, 218, 178, 189, 167, 233, 11, 190, 215, 202, 56, 62, 95, 89, 206, 190, 31, 31, 129, 62, 71, 142, 200, 190, 193, 41, 213, 190, 90, 144, 136, 190, 155, 104, 79, 190, 251, 198, 253, 61, 120, 190, 143, 190, 97, 57, 99, 62, 224, 93, 173, 185, 245, 216, 239, 61, 24, 231, 210, 190, 122, 47, 194, 61, 197, 70, 149, 60, 153, 209, 214, 190, 108, 87, 170, 190, 81, 137, 121, 62, 131, 141, 34, 60, 68, 42, 209, 188, 148, 27, 41, 62, 91, 232, 187, 60, 137, 55, 126, 61, 254, 14, 21, 62, 236, 156, 25, 190, 121, 55, 160, 62, 101, 192, 44, 191, 78, 19, 28, 62, 212, 159, 49, 190, 70, 167, 43, 188, 164, 179, 251, 61, 214, 145, 26, 188, 238, 30, 115, 187, 18, 205, 9, 190, 221, 140, 53, 190, 202, 236, 234, 189, 220, 101, 243, 189, 7, 11, 68, 62, 80, 125, 119, 190, 17, 248, 185, 188, 213, 66, 10, 60, 177, 185, 131, 62, 150, 143, 40, 62, 29, 57, 202, 188, 28, 110, 228, 189, 134, 0, 194, 61, 15, 203, 70, 62, 232, 50, 235, 61, 152, 125, 149, 61, 51, 137, 114, 191, 91, 193, 3, 189, 107, 135, 184, 190, 187, 155, 53, 191, 99, 246, 1, 62, 124, 101, 119, 190, 131, 34, 192, 189, 3, 65, 209, 61, 56, 79, 143, 62, 145, 255, 159, 189, 92, 167, 87, 190, 116, 113, 98, 62, 216, 79, 130, 191, 186, 35, 79, 62, 119, 2, 239, 190, 165, 42, 98, 61, 218, 88, 39, 190, 244, 129, 133, 62, 118, 179, 25, 191, 163, 142, 100, 191, 17, 194, 109, 188, 70, 155, 152, 190, 3, 125, 103, 62, 142, 30, 148, 189, 100, 41, 59, 62, 226, 71, 82, 62, 65, 231, 188, 61, 11, 85, 181, 190, 241, 168, 93, 189, 20, 49, 8, 190, 215, 20, 115, 60, 252, 58, 94, 189, 170, 254, 38, 189, 153, 43, 156, 189, 106, 67, 243, 188, 9, 95, 219, 60, 0, 188, 26, 61, 80, 167, 190, 61, 251, 208, 225, 189, 61, 165, 215, 61, 36, 199, 31, 190, 149, 140, 181, 189, 114, 114, 24, 61, 90, 126, 116, 190, 215, 204, 229, 60, 189, 221, 249, 188, 98, 82, 60, 189, 55, 245, 24, 190, 238, 171, 168, 189, 173, 153, 229, 189, 194, 231, 31, 190, 195, 28, 110, 61, 30, 95, 197, 61, 151, 41, 198, 189, 215, 2, 63, 190, 177, 143, 67, 190, 164, 12, 61, 61, 130, 148, 77, 190, 233, 47, 237, 189, 221, 130, 195, 189, 5, 240, 207, 60, 59, 174, 30, 62, 227, 202, 45, 188, 88, 39, 139, 189, 54, 82, 237, 62, 145, 132, 25, 63, 141, 86, 31, 62, 246, 135, 152, 62, 232, 102, 7, 63, 232, 229, 205, 190, 63, 236, 98, 62, 18, 59, 85, 60, 24, 26, 242, 189, 170, 167, 218, 189, 73, 74, 17, 191, 241, 237, 181, 189, 225, 150, 142, 62, 83, 4, 42, 189, 5, 74, 241, 190, 227, 28, 235, 60, 80, 110, 164, 60, 50, 95, 122, 190, 116, 30, 177, 189, 255, 17, 40, 62, 154, 186, 160, 190, 103, 173, 155, 60, 42, 233, 253, 188, 38, 56, 161, 62, 145, 239, 246, 61, 193, 147, 216, 62, 186, 166, 143, 61, 51, 166, 163, 190, 197, 249, 232, 62, 33, 153, 26, 187, 25, 141, 157, 62, 254, 17, 106, 62, 116, 123, 162, 61, 84, 113, 45, 190, 208, 51, 37, 62, 184, 232, 135, 61, 119, 103, 25, 190, 7, 43, 107, 189, 54, 213, 141, 62, 15, 9, 19, 190, 210, 180, 64, 62, 245, 14, 10, 63, 6, 232, 139, 189, 168, 219, 0, 191, 119, 148, 21, 61, 73, 27, 206, 189, 62, 32, 37, 189, 67, 78, 115, 62, 70, 15, 20, 61, 21, 61, 130, 189, 36, 205, 40, 60, 104, 142, 70, 189, 44, 134, 231, 190, 152, 194, 13, 62, 207, 234, 58, 62, 41, 166, 193, 190, 0, 219, 1, 190, 156, 212, 138, 61, 7, 73, 71, 191, 139, 148, 209, 189, 234, 124, 245, 190, 46, 66, 219, 190, 152, 235, 186, 60, 152, 244, 238, 189, 245, 231, 32, 190, 65, 212, 254, 188, 193, 34, 45, 190, 221, 15, 235, 188, 118, 195, 4, 190, 34, 189, 60, 188, 145, 71, 13, 62, 34, 4, 27, 189, 37, 214, 0, 61, 114, 100, 71, 187, 175, 235, 157, 61, 244, 192, 16, 190, 25, 20, 41, 190, 74, 59, 244, 189, 142, 233, 40, 62, 94, 18, 248, 61, 228, 234, 140, 188, 161, 130, 105, 189, 63, 123, 213, 189, 129, 168, 146, 61, 72, 168, 134, 59, 250, 217, 153, 188, 113, 140, 84, 190, 228, 24, 227, 188, 41, 26, 85, 190, 132, 197, 15, 61, 122, 124, 177, 61, 3, 230, 172, 189, 121, 236, 104, 61, 238, 238, 199, 61, 249, 244, 33, 62, 250, 252, 0, 63, 11, 81, 170, 189, 133, 17, 75, 190, 68, 17, 172, 190, 167, 219, 199, 188, 203, 207, 163, 62, 131, 23, 128, 190, 153, 174, 197, 62, 219, 154, 12, 190, 81, 138, 141, 62, 125, 125, 85, 186, 148, 0, 117, 190, 14, 254, 37, 61, 101, 7, 142, 61, 96, 48, 227, 187, 150, 131, 20, 62, 101, 233, 76, 61, 39, 47, 132, 190, 245, 39, 140, 62, 238, 100, 107, 188, 84, 214, 166, 62, 11, 119, 9, 190, 185, 211, 254, 190, 148, 134, 82, 62, 153, 209, 194, 61, 134, 88, 143, 62, 0, 82, 4, 191, 206, 243, 197, 190, 167, 166, 127, 191, 57, 212, 133, 190, 106, 213, 195, 189, 52, 44, 186, 189, 92, 19, 140, 190, 103, 210, 57, 190, 144, 137, 23, 62, 7, 158, 6, 189, 5, 83, 23, 62, 167, 75, 40, 60, 198, 212, 19, 62, 60, 34, 202, 61, 96, 118, 141, 60, 8, 44, 128, 191, 240, 32, 132, 190, 214, 147, 3, 62, 203, 39, 31, 62, 151, 163, 55, 62, 39, 116, 182, 189, 186, 174, 72, 60, 164, 190, 83, 189, 188, 177, 124, 61, 142, 179, 149, 62, 69, 69, 146, 61, 37, 222, 53, 188, 171, 174, 23, 190, 241, 68, 57, 60, 119, 195, 190, 60, 63, 54, 58, 191, 229, 49, 22, 62, 46, 177, 98, 60, 160, 249, 173, 188, 109, 62, 167, 190, 24, 249, 210, 189, 101, 161, 16, 190, 234, 240, 155, 189, 21, 226, 69, 190, 169, 195, 10, 62, 196, 214, 145, 190, 170, 141, 205, 61, 95, 89, 13, 190, 10, 61, 165, 190, 164, 50, 11, 190, 181, 62, 82, 190, 35, 196, 152, 59, 53, 96, 143, 62, 79, 229, 111, 190, 36, 97, 84, 61, 3, 239, 79, 191, 97, 118, 180, 61, 194, 207, 15, 62, 127, 195, 228, 190, 225, 230, 51, 189, 12, 169, 30, 189, 247, 101, 68, 191, 242, 126, 54, 189, 56, 138, 182, 189, 250, 80, 31, 62, 132, 58, 169, 62, 58, 94, 223, 190, 19, 124, 75, 62, 148, 197, 33, 191, 90, 72, 76, 189, 230, 117, 64, 190, 155, 184, 0, 63, 167, 239, 90, 61, 99, 51, 51, 61, 61, 0, 30, 188, 216, 158, 21, 189, 101, 11, 200, 61, 183, 150, 133, 62, 15, 136, 42, 190, 128, 182, 88, 189, 193, 255, 234, 189, 203, 99, 142, 189, 204, 142, 172, 62, 120, 49, 41, 62, 134, 30, 174, 62, 77, 187, 34, 191, 238, 32, 5, 189, 112, 200, 212, 190, 173, 147, 163, 188, 78, 160, 91, 62, 163, 222, 202, 190, 189, 101, 20, 62, 181, 92, 188, 188, 14, 245, 156, 59, 97, 255, 208, 61, 31, 214, 67, 190, 198, 35, 192, 62, 152, 135, 181, 190, 167, 98, 116, 189, 85, 135, 14, 62, 135, 229, 184, 61, 140, 163, 160, 61, 63, 32, 169, 189, 67, 109, 129, 190, 130, 104, 4, 190, 159, 198, 100, 62, 16, 86, 200, 188, 138, 206, 152, 60, 135, 82, 134, 62, 72, 45, 71, 190, 136, 186, 224, 189, 6, 74, 251, 61, 136, 190, 128, 191, 190, 77, 204, 186, 240, 224, 73, 188, 253, 29, 244, 190, 100, 3, 26, 62, 78, 7, 236, 190, 112, 198, 212, 187, 138, 231, 193, 189, 237, 18, 84, 61, 162, 234, 123, 190, 13, 246, 37, 62, 6, 244, 241, 58, 44, 1, 189, 190, 158, 29, 117, 189, 49, 197, 223, 62, 151, 141, 202, 61, 117, 13, 136, 62, 153, 219, 175, 59, 198, 25, 0, 190, 148, 86, 150, 61, 234, 96, 173, 60, 9, 244, 187, 190, 78, 167, 211, 190, 187, 222, 161, 60, 185, 181, 211, 189, 225, 210, 121, 60, 146, 119, 209, 190, 206, 13, 16, 191, 16, 27, 111, 62, 251, 161, 64, 190, 237, 171, 133, 189, 128, 139, 24, 62, 28, 99, 2, 191, 172, 175, 131, 190, 124, 42, 188, 189, 14, 143, 201, 190, 215, 190, 38, 62, 132, 27, 130, 190, 47, 20, 33, 189, 23, 173, 187, 60, 67, 222, 18, 62, 231, 131, 138, 190, 172, 162, 245, 61, 175, 83, 195, 190, 221, 171, 124, 61, 5, 30, 240, 61, 32, 71, 72, 190, 57, 216, 177, 62, 54, 69, 5, 62, 170, 39, 26, 62, 113, 11, 1, 190, 51, 224, 18, 62, 239, 120, 201, 188, 219, 194, 200, 61, 162, 98, 210, 61, 62, 246, 100, 62, 83, 31, 50, 189, 48, 173, 242, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {4, 222, 145, 60, 192, 84, 72, 188, 56, 174, 188, 188, 104, 15, 93, 62, 188, 14, 17, 62, 34, 4, 220, 189, 87, 181, 221, 60, 15, 182, 10, 62, 172, 141, 182, 189, 195, 97, 29, 61, 64, 77, 169, 62, 196, 135, 252, 60, 183, 238, 136, 62, 221, 212, 245, 61, 154, 37, 47, 190, 64, 233, 1, 190, 159, 131, 82, 62, 37, 136, 129, 62, 51, 108, 194, 61, 204, 54, 4, 190, 138, 214, 93, 62, 154, 229, 246, 61, 235, 248, 126, 190, 203, 88, 30, 189, 203, 150, 212, 190, 163, 94, 236, 188, 197, 176, 88, 62, 142, 146, 122, 61, 85, 175, 188, 190, 209, 31, 145, 189, 160, 144, 39, 62, 67, 118, 168, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 105, 96, 190, 137, 54, 188, 61, 255, 2, 15, 62, 110, 71, 176, 61, 152, 116, 114, 61, 24, 20, 160, 188, 52, 241, 20, 190, 44, 101, 255, 190, 197, 56, 78, 62, 185, 48, 120, 62, 211, 28, 134, 63, 178, 85, 72, 63, 104, 36, 91, 60, 65, 109, 212, 61, 73, 37, 188, 62, 75, 168, 92, 190, 105, 167, 241, 62, 14, 168, 34, 63, 199, 57, 1, 191, 61, 229, 31, 191, 18, 20, 189, 61, 226, 141, 49, 191, 15, 92, 206, 60, 35, 146, 42, 191, 38, 37, 183, 190, 45, 53, 32, 190, 41, 207, 219, 190, 171, 146, 144, 60, 13, 250, 182, 190, 85, 139, 9, 62, 179, 76, 39, 60, 253, 181, 139, 62, 128, 44, 71, 190, 103, 187, 212, 190, 235, 100, 39, 190, 76, 75, 22, 190, 186, 163, 18, 190, 104, 36, 207, 189, 136, 66, 228, 61, 123, 158, 204, 62, 209, 127, 249, 62, 232, 148, 130, 62, 231, 90, 167, 61, 2, 95, 4, 62, 190, 59, 88, 190, 15, 236, 150, 189, 118, 105, 178, 62, 143, 145, 100, 60, 174, 18, 146, 190, 249, 102, 32, 61, 251, 143, 36, 190, 55, 249, 161, 62, 90, 126, 92, 190, 61, 53, 26, 190, 15, 221, 79, 61, 255, 239, 136, 61, 168, 12, 61, 63, 161, 183, 195, 60, 123, 212, 3, 190, 222, 23, 186, 190, 162, 170, 206, 62, 217, 13, 125, 190, 129, 36, 200, 190, 84, 126, 54, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 85, 215, 61, 62, 221, 197, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {188, 92, 108, 190, 122, 43, 140, 63, 123, 74, 141, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {16, 96, 201, 191, 162, 93, 54, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0062/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}