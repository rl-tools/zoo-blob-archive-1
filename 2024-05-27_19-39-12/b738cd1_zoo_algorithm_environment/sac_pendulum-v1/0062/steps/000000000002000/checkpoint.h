// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 28, 93, 190, 209, 102, 200, 62, 246, 45, 252, 62, 161, 117, 107, 62, 143, 175, 89, 63, 4, 190, 207, 62, 66, 192, 166, 62, 126, 254, 139, 191, 10, 155, 181, 62, 60, 155, 225, 190, 88, 176, 32, 191, 207, 177, 192, 189, 205, 244, 138, 61, 155, 181, 211, 189, 220, 219, 206, 190, 81, 2, 175, 190, 136, 132, 63, 191, 49, 222, 116, 62, 43, 219, 221, 190, 81, 239, 150, 63, 229, 229, 172, 190, 153, 227, 247, 189, 141, 221, 202, 61, 211, 91, 31, 191, 160, 113, 11, 63, 17, 147, 9, 190, 185, 41, 120, 62, 218, 112, 81, 62, 80, 73, 102, 62, 192, 232, 50, 191, 94, 99, 46, 63, 163, 146, 1, 188, 194, 29, 0, 60, 114, 8, 0, 62, 118, 178, 249, 62, 55, 245, 160, 62, 127, 15, 171, 60, 177, 84, 17, 189, 79, 133, 26, 191, 102, 39, 157, 190, 42, 113, 197, 62, 173, 226, 159, 189, 145, 71, 152, 188, 110, 119, 86, 191, 250, 162, 15, 63, 204, 51, 217, 62, 165, 220, 8, 62, 166, 180, 7, 191, 57, 84, 7, 191, 135, 2, 47, 63, 154, 247, 90, 62, 204, 220, 203, 61, 166, 6, 70, 62, 144, 29, 176, 190, 75, 142, 72, 62, 32, 156, 131, 61, 51, 18, 187, 190, 231, 224, 255, 190, 58, 71, 91, 63, 97, 18, 217, 60, 156, 197, 97, 62, 116, 76, 134, 63, 105, 156, 21, 190, 116, 216, 69, 61, 106, 55, 207, 60, 51, 150, 76, 62, 77, 234, 34, 63, 251, 19, 112, 62, 133, 57, 169, 190, 118, 52, 70, 189, 165, 54, 127, 190, 200, 218, 136, 190, 126, 9, 26, 191, 133, 251, 85, 63, 181, 64, 210, 190, 213, 146, 217, 188, 122, 60, 111, 191, 204, 220, 29, 190, 242, 227, 51, 191, 176, 235, 138, 62, 203, 238, 210, 190, 31, 88, 134, 190, 233, 187, 39, 191, 92, 73, 130, 190, 249, 209, 2, 191, 216, 69, 54, 190, 81, 19, 187, 190, 216, 120, 140, 61, 228, 75, 13, 191, 193, 71, 179, 190, 193, 107, 159, 190, 67, 24, 47, 191, 176, 158, 164, 190, 3, 204, 169, 62, 197, 34, 30, 191, 196, 253, 212, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 81, 25, 191, 113, 0, 41, 62, 171, 181, 247, 62, 186, 209, 43, 190, 224, 147, 143, 190, 52, 141, 91, 190, 118, 202, 23, 190, 11, 240, 3, 191, 108, 199, 137, 188, 66, 136, 233, 62, 151, 180, 120, 62, 228, 127, 13, 191, 239, 101, 164, 190, 244, 127, 10, 63, 143, 63, 123, 62, 12, 151, 15, 63, 119, 48, 171, 190, 44, 34, 148, 62, 48, 64, 214, 189, 126, 161, 59, 190, 102, 115, 100, 188, 62, 34, 173, 62, 234, 169, 22, 63, 196, 31, 16, 191, 162, 116, 7, 63, 225, 92, 203, 62, 153, 85, 103, 62, 248, 129, 170, 62, 120, 25, 236, 62, 119, 85, 33, 191, 210, 151, 177, 62, 128, 54, 161, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 133, 62, 190, 1, 38, 110, 62, 174, 26, 174, 190, 130, 150, 190, 187, 113, 0, 120, 61, 147, 53, 42, 191, 9, 221, 122, 61, 101, 151, 163, 189, 79, 243, 59, 188, 56, 16, 81, 62, 56, 213, 58, 189, 101, 208, 47, 190, 36, 247, 64, 190, 106, 78, 113, 189, 1, 247, 142, 190, 78, 183, 58, 62, 58, 154, 35, 62, 189, 149, 88, 62, 100, 29, 192, 189, 146, 229, 128, 62, 0, 220, 251, 189, 192, 187, 217, 189, 185, 137, 181, 188, 8, 6, 142, 189, 7, 41, 3, 62, 7, 21, 253, 189, 148, 197, 8, 62, 196, 143, 93, 62, 187, 9, 184, 189, 63, 114, 177, 190, 161, 242, 164, 61, 152, 30, 222, 60, 155, 227, 202, 60, 132, 154, 93, 62, 70, 2, 67, 62, 36, 83, 64, 61, 227, 219, 168, 61, 134, 15, 1, 62, 113, 168, 167, 61, 26, 70, 2, 62, 64, 216, 237, 187, 243, 239, 7, 62, 85, 178, 116, 62, 206, 37, 130, 190, 222, 193, 240, 188, 182, 218, 48, 190, 28, 76, 25, 62, 209, 12, 49, 61, 201, 255, 137, 189, 93, 194, 175, 61, 110, 196, 79, 190, 173, 25, 15, 60, 209, 231, 48, 62, 139, 90, 11, 61, 133, 137, 91, 189, 129, 10, 31, 190, 223, 147, 225, 61, 28, 184, 252, 189, 36, 33, 145, 61, 158, 157, 10, 190, 14, 193, 51, 61, 248, 22, 26, 189, 182, 150, 148, 61, 145, 161, 49, 61, 80, 66, 18, 190, 35, 188, 5, 62, 197, 189, 0, 62, 147, 191, 128, 61, 244, 16, 37, 62, 174, 233, 5, 189, 116, 248, 188, 189, 235, 87, 224, 189, 207, 50, 8, 190, 139, 62, 60, 61, 78, 46, 198, 189, 78, 14, 243, 61, 223, 57, 3, 189, 18, 230, 154, 188, 136, 58, 32, 190, 175, 156, 133, 189, 46, 12, 231, 189, 215, 79, 160, 61, 217, 164, 43, 62, 255, 19, 150, 61, 67, 81, 22, 190, 125, 185, 31, 189, 99, 111, 26, 188, 197, 41, 165, 61, 92, 23, 4, 190, 17, 173, 231, 61, 125, 152, 29, 190, 141, 242, 224, 189, 80, 50, 19, 190, 160, 83, 33, 62, 232, 178, 219, 61, 152, 237, 29, 190, 238, 77, 212, 189, 208, 37, 233, 188, 72, 227, 18, 62, 247, 176, 30, 190, 210, 173, 162, 189, 200, 3, 26, 62, 121, 96, 104, 189, 122, 133, 80, 188, 46, 179, 65, 61, 232, 68, 221, 189, 2, 57, 76, 62, 93, 18, 18, 190, 83, 86, 177, 60, 155, 140, 218, 60, 162, 190, 154, 188, 15, 146, 34, 62, 196, 17, 177, 190, 79, 113, 82, 189, 243, 228, 61, 62, 243, 136, 210, 189, 29, 255, 102, 62, 56, 0, 47, 61, 188, 164, 84, 189, 229, 172, 100, 190, 87, 153, 82, 61, 36, 8, 15, 62, 91, 69, 23, 190, 69, 254, 123, 189, 231, 72, 47, 62, 140, 129, 158, 61, 25, 217, 32, 62, 211, 72, 249, 61, 8, 213, 88, 190, 36, 251, 1, 62, 21, 17, 133, 61, 250, 63, 233, 189, 62, 203, 150, 61, 203, 247, 223, 61, 132, 143, 17, 188, 114, 104, 155, 189, 46, 199, 193, 61, 103, 100, 99, 62, 97, 238, 19, 62, 255, 233, 223, 189, 154, 211, 67, 62, 187, 224, 46, 61, 20, 14, 90, 62, 163, 129, 96, 62, 58, 140, 45, 190, 131, 83, 141, 61, 108, 116, 15, 62, 247, 25, 98, 190, 0, 3, 83, 62, 165, 0, 44, 190, 185, 8, 147, 62, 218, 42, 247, 189, 15, 28, 109, 61, 43, 29, 161, 61, 181, 50, 4, 190, 41, 61, 31, 62, 89, 32, 211, 189, 100, 154, 50, 190, 34, 238, 56, 62, 177, 204, 144, 188, 113, 241, 156, 61, 46, 63, 12, 189, 137, 200, 233, 61, 128, 98, 48, 62, 232, 79, 252, 61, 11, 127, 27, 190, 18, 135, 3, 62, 45, 140, 187, 188, 103, 217, 231, 189, 166, 4, 19, 62, 216, 128, 161, 60, 43, 223, 135, 61, 57, 189, 143, 189, 193, 247, 22, 190, 117, 151, 20, 190, 224, 242, 18, 189, 112, 212, 37, 190, 10, 63, 0, 190, 121, 132, 15, 62, 174, 87, 37, 190, 157, 195, 194, 61, 105, 67, 153, 189, 138, 186, 48, 190, 221, 31, 227, 189, 137, 161, 218, 60, 195, 104, 221, 189, 65, 88, 191, 189, 193, 209, 23, 190, 138, 120, 164, 60, 15, 225, 19, 62, 59, 51, 22, 60, 58, 223, 145, 189, 102, 95, 34, 190, 193, 173, 73, 61, 91, 25, 1, 190, 214, 173, 139, 189, 98, 129, 126, 189, 203, 86, 188, 61, 215, 147, 251, 189, 209, 78, 46, 62, 141, 253, 192, 188, 104, 62, 10, 61, 43, 227, 27, 62, 240, 87, 149, 189, 133, 248, 51, 62, 83, 152, 128, 189, 132, 13, 21, 61, 241, 175, 48, 189, 107, 168, 17, 62, 200, 176, 4, 189, 123, 19, 225, 59, 220, 90, 44, 190, 246, 76, 195, 189, 22, 5, 175, 189, 120, 91, 50, 190, 90, 39, 232, 60, 246, 132, 111, 61, 159, 156, 133, 189, 167, 150, 249, 189, 210, 170, 253, 189, 10, 227, 17, 188, 99, 126, 205, 189, 19, 112, 104, 61, 180, 197, 6, 190, 253, 62, 209, 188, 24, 68, 132, 62, 140, 119, 4, 191, 246, 122, 58, 61, 221, 130, 90, 190, 217, 246, 64, 190, 206, 110, 53, 62, 224, 82, 130, 190, 127, 86, 223, 189, 36, 137, 65, 189, 186, 69, 23, 189, 146, 121, 153, 59, 94, 91, 102, 190, 197, 20, 139, 61, 168, 159, 181, 190, 247, 207, 106, 61, 241, 82, 43, 62, 228, 195, 215, 61, 94, 208, 68, 190, 235, 104, 41, 62, 62, 54, 184, 190, 130, 235, 153, 61, 83, 108, 186, 189, 236, 226, 87, 190, 27, 31, 138, 62, 81, 145, 7, 190, 182, 201, 63, 61, 245, 42, 8, 190, 251, 146, 194, 60, 8, 63, 168, 188, 197, 27, 171, 188, 238, 253, 128, 190, 77, 115, 133, 188, 245, 172, 208, 61, 63, 169, 110, 60, 81, 249, 5, 190, 182, 13, 164, 189, 249, 252, 159, 188, 157, 133, 214, 60, 193, 76, 142, 189, 104, 15, 164, 61, 205, 211, 208, 187, 224, 53, 52, 188, 228, 180, 149, 62, 233, 25, 101, 61, 224, 150, 229, 189, 101, 218, 105, 189, 147, 126, 42, 190, 215, 246, 29, 60, 168, 36, 160, 60, 40, 68, 98, 60, 128, 184, 165, 61, 168, 70, 133, 61, 199, 215, 235, 61, 125, 94, 15, 190, 23, 211, 144, 188, 90, 50, 134, 190, 140, 86, 24, 60, 39, 220, 185, 60, 116, 186, 12, 190, 146, 129, 65, 190, 121, 23, 218, 61, 93, 89, 108, 61, 73, 174, 21, 190, 148, 53, 109, 190, 88, 145, 96, 188, 255, 115, 44, 62, 187, 10, 50, 189, 166, 91, 254, 61, 205, 184, 17, 62, 163, 32, 97, 60, 76, 103, 201, 189, 206, 81, 20, 190, 126, 49, 17, 190, 46, 73, 97, 62, 152, 64, 147, 60, 6, 93, 144, 61, 163, 67, 209, 61, 67, 206, 157, 189, 170, 215, 213, 60, 105, 164, 37, 61, 219, 163, 162, 61, 72, 147, 197, 189, 192, 225, 209, 60, 145, 210, 155, 60, 92, 212, 221, 61, 125, 233, 144, 189, 123, 10, 156, 60, 182, 182, 189, 189, 50, 177, 35, 62, 134, 239, 213, 61, 10, 80, 23, 190, 213, 104, 45, 188, 137, 136, 135, 61, 203, 109, 75, 189, 52, 175, 70, 189, 37, 158, 139, 57, 61, 130, 83, 190, 31, 231, 203, 61, 253, 112, 115, 62, 193, 50, 145, 61, 20, 12, 131, 62, 104, 215, 28, 191, 121, 178, 12, 58, 97, 71, 176, 61, 245, 17, 175, 190, 19, 93, 135, 190, 87, 81, 28, 188, 239, 169, 128, 189, 70, 254, 254, 60, 50, 91, 137, 189, 49, 228, 98, 190, 102, 229, 37, 190, 115, 233, 158, 190, 99, 135, 26, 190, 62, 79, 219, 189, 85, 202, 128, 61, 46, 142, 47, 62, 115, 232, 179, 190, 156, 186, 138, 61, 87, 41, 1, 190, 105, 68, 42, 61, 185, 158, 172, 61, 138, 105, 142, 62, 183, 59, 90, 62, 218, 15, 14, 189, 201, 97, 21, 62, 114, 226, 154, 190, 226, 249, 105, 189, 107, 12, 195, 61, 120, 121, 16, 62, 41, 231, 172, 62, 113, 112, 77, 188, 96, 49, 153, 62, 187, 79, 103, 191, 149, 36, 70, 189, 79, 197, 1, 62, 157, 12, 194, 190, 204, 67, 194, 190, 70, 96, 100, 62, 56, 159, 139, 189, 103, 201, 238, 60, 138, 75, 86, 62, 249, 102, 8, 191, 199, 216, 51, 190, 145, 63, 7, 190, 244, 15, 214, 61, 205, 181, 206, 186, 51, 225, 11, 189, 121, 76, 144, 189, 246, 38, 187, 190, 103, 125, 252, 189, 247, 116, 165, 189, 152, 94, 90, 62, 109, 237, 61, 62, 236, 72, 45, 62, 162, 39, 147, 62, 59, 119, 133, 61, 82, 20, 145, 62, 247, 154, 221, 190, 8, 73, 143, 61, 224, 234, 2, 62, 65, 226, 55, 62, 221, 114, 95, 190, 200, 227, 145, 61, 239, 60, 235, 61, 182, 0, 17, 62, 72, 252, 70, 187, 174, 64, 22, 189, 196, 140, 8, 62, 5, 71, 83, 60, 199, 248, 79, 190, 101, 13, 172, 61, 107, 96, 6, 190, 240, 134, 26, 190, 78, 96, 168, 61, 172, 40, 27, 61, 211, 173, 24, 190, 201, 4, 5, 190, 204, 165, 186, 61, 227, 96, 16, 60, 11, 50, 2, 62, 129, 98, 50, 61, 162, 47, 125, 188, 228, 75, 180, 61, 195, 137, 251, 60, 79, 180, 48, 190, 13, 225, 37, 189, 176, 128, 248, 61, 3, 169, 144, 190, 204, 195, 131, 61, 8, 84, 101, 62, 53, 140, 33, 190, 172, 95, 142, 190, 9, 160, 9, 62, 69, 194, 120, 61, 14, 56, 244, 61, 17, 228, 20, 62, 210, 118, 189, 185, 168, 169, 233, 61, 30, 193, 138, 60, 186, 196, 142, 189, 71, 109, 244, 189, 96, 132, 247, 189, 254, 159, 191, 188, 255, 241, 8, 62, 214, 158, 83, 62, 67, 190, 197, 189, 226, 55, 116, 190, 155, 165, 39, 62, 19, 132, 251, 61, 94, 110, 133, 190, 161, 212, 172, 62, 105, 82, 36, 189, 168, 122, 75, 62, 33, 77, 253, 61, 227, 244, 219, 61, 104, 61, 26, 62, 80, 191, 165, 61, 96, 180, 12, 60, 46, 129, 215, 189, 204, 105, 43, 61, 94, 218, 4, 62, 71, 192, 137, 189, 180, 84, 142, 189, 65, 180, 171, 190, 74, 249, 48, 189, 130, 10, 163, 189, 197, 240, 188, 61, 84, 233, 168, 62, 14, 151, 103, 188, 78, 53, 142, 61, 71, 105, 65, 190, 22, 241, 198, 61, 232, 194, 72, 189, 180, 49, 168, 189, 152, 41, 167, 55, 91, 216, 37, 62, 77, 210, 72, 62, 246, 174, 121, 188, 11, 161, 65, 61, 51, 194, 189, 61, 19, 209, 11, 62, 128, 70, 145, 190, 58, 248, 231, 61, 171, 87, 127, 189, 134, 62, 44, 188, 23, 126, 145, 62, 173, 215, 2, 62, 77, 212, 2, 62, 37, 8, 154, 61, 182, 197, 49, 61, 84, 242, 130, 61, 32, 27, 173, 61, 174, 35, 159, 61, 176, 147, 70, 190, 230, 76, 142, 62, 216, 70, 185, 62, 225, 233, 132, 189, 203, 36, 180, 190, 245, 27, 148, 61, 104, 12, 170, 61, 25, 202, 63, 61, 18, 238, 61, 61, 129, 214, 100, 190, 133, 229, 225, 189, 2, 188, 53, 190, 115, 12, 142, 55, 21, 139, 204, 188, 7, 63, 227, 61, 137, 161, 193, 61, 177, 177, 26, 190, 222, 239, 130, 62, 215, 48, 13, 190, 65, 164, 129, 189, 220, 83, 127, 62, 63, 98, 99, 190, 106, 158, 138, 60, 37, 39, 136, 190, 100, 179, 60, 190, 83, 171, 222, 189, 238, 196, 35, 190, 187, 3, 121, 61, 214, 41, 130, 189, 177, 61, 5, 188, 82, 130, 189, 59, 117, 209, 32, 60, 182, 43, 62, 190, 126, 67, 237, 189, 220, 176, 43, 190, 220, 35, 179, 62, 26, 24, 24, 62, 223, 23, 240, 188, 3, 162, 218, 61, 199, 81, 48, 191, 166, 244, 104, 189, 85, 28, 204, 186, 25, 2, 13, 190, 183, 238, 56, 62, 69, 39, 177, 189, 43, 165, 151, 61, 49, 79, 215, 189, 101, 117, 127, 62, 3, 145, 244, 61, 186, 201, 169, 61, 6, 107, 72, 189, 166, 98, 6, 61, 67, 159, 92, 190, 237, 30, 84, 190, 31, 243, 111, 62, 50, 19, 5, 62, 67, 190, 79, 190, 124, 156, 145, 189, 201, 99, 32, 62, 225, 199, 233, 189, 153, 201, 92, 62, 114, 222, 150, 60, 35, 77, 218, 61, 96, 113, 104, 62, 17, 154, 91, 61, 12, 151, 13, 62, 34, 221, 247, 189, 230, 218, 23, 189, 189, 21, 6, 190, 159, 131, 224, 189, 6, 0, 25, 189, 22, 75, 61, 190, 50, 176, 59, 190, 7, 231, 7, 190, 18, 95, 13, 188, 53, 8, 49, 188, 121, 101, 23, 190, 227, 136, 228, 189, 169, 142, 74, 190, 163, 123, 37, 190, 247, 230, 145, 61, 30, 183, 64, 187, 192, 242, 238, 60, 228, 96, 33, 190, 244, 37, 40, 62, 129, 173, 179, 189, 118, 202, 235, 61, 12, 42, 247, 189, 241, 218, 213, 189, 194, 219, 32, 189, 233, 245, 63, 61, 129, 70, 29, 190, 97, 179, 93, 61, 171, 222, 119, 60, 17, 162, 212, 187, 168, 109, 228, 61, 55, 36, 10, 60, 177, 234, 50, 62, 3, 231, 190, 62, 115, 246, 18, 62, 81, 233, 141, 190, 9, 174, 86, 61, 101, 212, 183, 189, 79, 252, 184, 61, 59, 25, 89, 60, 72, 12, 149, 189, 163, 61, 145, 190, 208, 113, 26, 61, 50, 161, 109, 190, 156, 232, 16, 189, 205, 50, 82, 189, 23, 153, 85, 62, 112, 100, 158, 190, 240, 245, 86, 62, 245, 35, 15, 190, 62, 101, 6, 62, 149, 237, 169, 62, 172, 80, 29, 190, 45, 82, 252, 59, 153, 248, 229, 189, 108, 74, 45, 190, 121, 236, 6, 62, 28, 81, 5, 190, 34, 9, 53, 190, 151, 31, 179, 190, 110, 90, 10, 62, 36, 198, 143, 189, 85, 203, 179, 190, 119, 56, 115, 188, 0, 67, 126, 62, 108, 38, 101, 62, 135, 63, 221, 190, 56, 34, 218, 189, 99, 15, 48, 190, 25, 127, 241, 189, 74, 138, 62, 188, 218, 242, 80, 190, 18, 119, 218, 60, 209, 143, 243, 61, 117, 162, 245, 187, 176, 55, 124, 186, 199, 133, 129, 190, 93, 52, 121, 62, 23, 33, 17, 190, 254, 214, 227, 189, 17, 42, 56, 62, 127, 100, 36, 62, 231, 26, 163, 190, 74, 78, 106, 62, 13, 194, 166, 190, 64, 224, 51, 62, 99, 163, 134, 190, 184, 38, 147, 189, 97, 110, 177, 61, 113, 231, 124, 190, 182, 23, 70, 62, 209, 20, 0, 189, 210, 192, 189, 61, 175, 217, 129, 61, 212, 208, 132, 61, 112, 15, 50, 189, 117, 128, 140, 190, 114, 83, 249, 189, 28, 160, 140, 62, 186, 210, 119, 189, 14, 254, 253, 60, 110, 120, 124, 62, 87, 208, 181, 61, 119, 20, 134, 61, 199, 81, 46, 62, 75, 167, 226, 189, 133, 1, 119, 62, 139, 54, 183, 189, 221, 32, 42, 62, 26, 32, 221, 189, 136, 158, 10, 61, 177, 131, 30, 62, 155, 132, 79, 59, 174, 143, 196, 60, 197, 221, 170, 189, 201, 227, 159, 190, 78, 67, 129, 59, 200, 48, 143, 189, 154, 212, 11, 62, 56, 138, 59, 190, 185, 25, 177, 188, 19, 234, 4, 189, 222, 122, 33, 62, 36, 136, 3, 62, 51, 179, 134, 189, 8, 117, 210, 189, 229, 52, 72, 61, 44, 136, 29, 62, 158, 2, 212, 61, 134, 33, 51, 62, 115, 106, 32, 191, 249, 45, 13, 190, 201, 67, 140, 190, 235, 105, 230, 190, 229, 155, 247, 61, 137, 173, 92, 190, 104, 16, 214, 189, 101, 183, 142, 61, 252, 208, 144, 190, 103, 248, 242, 189, 237, 51, 54, 190, 217, 12, 80, 62, 107, 142, 162, 190, 224, 162, 57, 62, 92, 104, 73, 59, 48, 130, 10, 61, 76, 237, 1, 190, 19, 129, 173, 62, 66, 217, 205, 190, 72, 251, 229, 189, 36, 25, 173, 60, 81, 64, 218, 189, 148, 150, 99, 62, 235, 84, 234, 189, 227, 104, 43, 62, 109, 92, 239, 61, 142, 39, 198, 60, 228, 63, 6, 190, 206, 65, 33, 190, 66, 197, 82, 190, 122, 242, 21, 61, 230, 113, 29, 189, 193, 237, 123, 188, 76, 49, 57, 189, 203, 136, 153, 188, 89, 188, 87, 61, 77, 41, 168, 61, 192, 173, 246, 61, 129, 117, 217, 189, 200, 151, 3, 62, 78, 30, 31, 190, 142, 36, 177, 189, 250, 227, 121, 61, 140, 237, 54, 190, 180, 194, 70, 61, 172, 15, 139, 188, 158, 51, 75, 188, 11, 220, 9, 190, 21, 128, 109, 189, 94, 1, 74, 189, 35, 209, 166, 189, 46, 32, 159, 61, 39, 36, 6, 62, 42, 71, 183, 189, 100, 10, 5, 190, 24, 9, 40, 190, 115, 17, 173, 61, 95, 137, 53, 190, 153, 72, 145, 189, 95, 218, 227, 189, 192, 210, 79, 61, 179, 61, 26, 62, 216, 27, 202, 60, 197, 152, 219, 188, 40, 149, 223, 62, 226, 250, 119, 62, 6, 111, 4, 189, 79, 110, 37, 62, 202, 115, 215, 189, 184, 247, 37, 189, 224, 238, 223, 61, 33, 36, 152, 189, 146, 41, 34, 188, 155, 146, 52, 190, 31, 25, 142, 189, 10, 156, 80, 190, 89, 12, 130, 62, 152, 96, 44, 190, 27, 144, 83, 190, 174, 151, 43, 190, 230, 48, 153, 60, 109, 197, 57, 190, 144, 129, 227, 189, 187, 33, 65, 62, 229, 47, 32, 190, 1, 170, 129, 190, 105, 118, 7, 191, 225, 133, 86, 62, 65, 27, 52, 190, 155, 223, 75, 62, 215, 255, 154, 189, 33, 165, 210, 189, 89, 19, 121, 62, 6, 3, 85, 62, 79, 34, 43, 62, 226, 130, 247, 61, 50, 197, 98, 61, 157, 31, 69, 60, 208, 51, 37, 62, 179, 63, 236, 60, 230, 195, 21, 190, 7, 43, 107, 189, 218, 210, 141, 189, 242, 125, 231, 189, 85, 3, 231, 189, 91, 66, 191, 61, 6, 232, 139, 189, 114, 27, 92, 190, 135, 25, 94, 60, 87, 29, 148, 189, 68, 249, 43, 61, 97, 118, 251, 189, 34, 242, 92, 61, 180, 72, 19, 62, 127, 5, 235, 60, 131, 99, 75, 189, 46, 85, 163, 59, 152, 194, 13, 62, 105, 13, 206, 189, 42, 34, 2, 190, 119, 173, 114, 59, 217, 197, 239, 61, 71, 166, 82, 190, 133, 88, 181, 189, 246, 120, 245, 189, 216, 103, 154, 60, 152, 235, 186, 60, 152, 244, 238, 189, 245, 231, 32, 190, 65, 212, 254, 188, 193, 34, 45, 190, 221, 15, 235, 188, 118, 195, 4, 190, 34, 189, 60, 188, 145, 71, 13, 62, 34, 4, 27, 189, 37, 214, 0, 61, 114, 100, 71, 187, 175, 235, 157, 61, 244, 192, 16, 190, 25, 20, 41, 190, 74, 59, 244, 189, 142, 233, 40, 62, 94, 18, 248, 61, 228, 234, 140, 188, 161, 130, 105, 189, 63, 123, 213, 189, 129, 168, 146, 61, 72, 168, 134, 59, 250, 217, 153, 188, 113, 140, 84, 190, 228, 24, 227, 188, 41, 26, 85, 190, 132, 197, 15, 61, 122, 124, 177, 61, 3, 230, 172, 189, 121, 236, 104, 61, 238, 238, 199, 61, 186, 168, 200, 61, 95, 84, 183, 62, 100, 162, 31, 190, 237, 147, 118, 190, 23, 129, 195, 59, 114, 152, 255, 188, 16, 25, 130, 62, 228, 183, 50, 190, 1, 104, 53, 59, 157, 250, 62, 60, 174, 20, 114, 61, 88, 220, 58, 189, 231, 167, 3, 190, 169, 162, 134, 188, 147, 22, 12, 61, 238, 88, 3, 62, 223, 84, 58, 62, 19, 171, 26, 62, 151, 208, 13, 190, 86, 187, 172, 61, 171, 221, 61, 190, 213, 212, 102, 62, 123, 154, 52, 190, 53, 240, 160, 61, 195, 246, 144, 188, 8, 90, 175, 189, 130, 228, 21, 62, 136, 8, 132, 190, 138, 83, 192, 189, 16, 76, 89, 190, 202, 79, 76, 189, 228, 23, 165, 188, 17, 245, 228, 189, 43, 21, 41, 190, 164, 39, 3, 190, 90, 6, 6, 62, 228, 195, 70, 189, 65, 229, 117, 61, 246, 226, 133, 189, 124, 232, 200, 61, 83, 92, 17, 62, 176, 129, 28, 61, 169, 125, 11, 62, 72, 148, 11, 190, 71, 62, 205, 61, 230, 8, 25, 60, 90, 233, 1, 60, 225, 222, 196, 188, 66, 86, 24, 190, 217, 48, 38, 60, 169, 184, 140, 61, 74, 97, 5, 62, 171, 244, 200, 188, 152, 239, 54, 189, 218, 178, 43, 189, 224, 122, 216, 61, 3, 147, 91, 189, 194, 92, 243, 189, 182, 23, 116, 61, 253, 249, 29, 189, 172, 235, 32, 190, 62, 168, 35, 190, 186, 168, 50, 190, 71, 31, 204, 60, 42, 131, 142, 61, 247, 136, 97, 189, 158, 5, 11, 190, 181, 114, 34, 190, 165, 227, 202, 61, 73, 54, 186, 189, 108, 253, 2, 190, 157, 142, 198, 61, 133, 98, 9, 190, 232, 98, 37, 62, 240, 90, 186, 61, 171, 169, 129, 189, 160, 196, 98, 62, 229, 55, 116, 190, 204, 122, 9, 189, 55, 56, 12, 62, 168, 238, 32, 190, 85, 170, 16, 188, 3, 205, 23, 61, 101, 166, 120, 189, 201, 29, 148, 60, 21, 152, 214, 189, 71, 94, 233, 61, 67, 56, 149, 62, 139, 177, 50, 61, 165, 44, 229, 60, 83, 58, 126, 189, 25, 75, 104, 189, 84, 80, 50, 187, 177, 231, 138, 62, 214, 255, 80, 61, 236, 39, 178, 189, 55, 235, 2, 62, 113, 60, 203, 61, 218, 9, 234, 188, 254, 109, 227, 61, 107, 227, 77, 189, 174, 163, 59, 187, 7, 199, 160, 189, 146, 86, 9, 189, 241, 65, 225, 61, 46, 84, 72, 62, 169, 186, 3, 62, 251, 67, 178, 189, 12, 44, 134, 60, 204, 52, 49, 190, 10, 240, 55, 189, 165, 213, 101, 62, 137, 250, 198, 189, 142, 81, 26, 62, 227, 85, 143, 61, 79, 88, 21, 61, 254, 66, 9, 62, 253, 72, 181, 189, 43, 153, 148, 62, 173, 180, 103, 190, 6, 253, 145, 61, 221, 171, 59, 189, 15, 255, 213, 61, 129, 138, 142, 61, 26, 97, 161, 188, 104, 117, 60, 190, 115, 85, 29, 190, 251, 134, 188, 61, 110, 78, 52, 61, 121, 26, 193, 189, 250, 179, 152, 62, 134, 16, 25, 187, 232, 57, 86, 188, 126, 77, 83, 62, 116, 92, 25, 190, 61, 122, 8, 190, 45, 26, 200, 61, 25, 234, 68, 190, 6, 240, 69, 62, 140, 64, 27, 190, 4, 205, 229, 187, 43, 47, 193, 189, 50, 55, 137, 61, 158, 91, 25, 190, 77, 126, 178, 60, 138, 197, 251, 61, 166, 103, 25, 190, 43, 75, 200, 190, 99, 20, 107, 189, 224, 2, 56, 188, 203, 201, 157, 189, 229, 103, 90, 60, 76, 104, 53, 190, 194, 147, 236, 61, 156, 181, 214, 61, 6, 14, 162, 189, 210, 200, 85, 61, 231, 201, 247, 189, 39, 164, 28, 62, 192, 207, 75, 62, 42, 255, 130, 190, 183, 248, 221, 190, 98, 98, 11, 62, 236, 64, 246, 60, 58, 135, 23, 62, 131, 188, 87, 62, 122, 171, 172, 190, 172, 200, 40, 190, 73, 83, 202, 189, 176, 239, 93, 190, 155, 97, 142, 190, 156, 91, 124, 188, 220, 153, 106, 60, 69, 241, 194, 187, 86, 92, 194, 61, 230, 15, 139, 61, 17, 154, 86, 61, 15, 90, 19, 61, 21, 236, 203, 60, 176, 185, 32, 60, 142, 144, 208, 61, 108, 203, 147, 62, 138, 246, 157, 59, 69, 29, 100, 62, 92, 13, 205, 61, 224, 135, 56, 62, 175, 190, 141, 189, 197, 47, 62, 62, 77, 220, 232, 60, 19, 2, 40, 62, 48, 69, 18, 61, 191, 226, 150, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 17, 95, 61, 66, 118, 36, 190, 201, 35, 140, 60, 44, 47, 13, 62, 50, 29, 164, 61, 221, 11, 216, 189, 87, 181, 221, 60, 209, 184, 93, 62, 41, 250, 168, 189, 255, 208, 174, 188, 100, 87, 58, 62, 106, 223, 146, 189, 15, 80, 19, 62, 244, 116, 187, 61, 78, 230, 19, 190, 244, 188, 147, 189, 33, 148, 24, 62, 67, 151, 64, 61, 25, 208, 188, 60, 8, 6, 193, 189, 46, 14, 32, 62, 35, 16, 172, 61, 238, 9, 60, 190, 196, 44, 65, 188, 30, 44, 98, 190, 163, 94, 236, 188, 214, 21, 25, 62, 233, 161, 69, 61, 73, 159, 150, 190, 55, 197, 150, 189, 57, 82, 228, 61, 7, 54, 102, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 216, 30, 190, 6, 41, 186, 60, 224, 0, 16, 62, 58, 14, 144, 61, 32, 29, 35, 62, 222, 67, 163, 188, 52, 241, 20, 190, 158, 200, 210, 190, 105, 147, 56, 62, 221, 24, 218, 60, 215, 198, 208, 62, 140, 218, 32, 63, 146, 108, 3, 58, 96, 228, 74, 62, 225, 109, 14, 62, 199, 218, 89, 190, 140, 17, 184, 62, 131, 199, 238, 59, 221, 125, 131, 190, 22, 34, 168, 190, 137, 56, 22, 62, 199, 214, 2, 191, 75, 134, 9, 189, 249, 53, 13, 191, 89, 174, 181, 61, 45, 53, 32, 190, 2, 143, 132, 190, 74, 87, 222, 61, 79, 243, 9, 60, 148, 130, 201, 61, 229, 78, 97, 187, 197, 23, 189, 61, 252, 67, 89, 190, 153, 21, 226, 189, 232, 115, 40, 190, 45, 2, 56, 189, 253, 113, 47, 190, 151, 84, 208, 189, 136, 66, 228, 61, 103, 1, 22, 62, 240, 109, 19, 62, 196, 221, 195, 59, 35, 135, 243, 61, 60, 16, 188, 61, 101, 176, 74, 190, 57, 4, 252, 60, 54, 2, 60, 62, 71, 25, 174, 189, 149, 99, 125, 190, 88, 151, 141, 60, 57, 66, 113, 190, 15, 56, 19, 62, 171, 18, 18, 190, 197, 135, 116, 190, 1, 66, 23, 188, 245, 39, 115, 189, 189, 173, 148, 62, 161, 183, 195, 60, 198, 136, 58, 190, 90, 254, 126, 61, 18, 82, 147, 62, 173, 88, 44, 190, 139, 45, 139, 190, 203, 70, 67, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 19, 145, 61, 18, 234, 62, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {155, 122, 184, 191, 217, 38, 113, 190, 88, 22, 1, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {43, 134, 158, 63, 116, 202, 19, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0062/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}