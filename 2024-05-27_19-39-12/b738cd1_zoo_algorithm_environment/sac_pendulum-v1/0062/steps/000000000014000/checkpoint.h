// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 108, 144, 188, 19, 65, 34, 63, 183, 211, 249, 62, 209, 221, 35, 63, 214, 151, 131, 63, 70, 183, 177, 62, 158, 129, 28, 63, 231, 251, 125, 191, 206, 95, 14, 63, 190, 180, 78, 191, 58, 208, 27, 191, 193, 163, 132, 188, 162, 41, 214, 61, 53, 8, 90, 191, 245, 53, 171, 190, 86, 213, 34, 190, 189, 148, 29, 190, 78, 233, 223, 62, 197, 166, 89, 190, 30, 239, 120, 63, 175, 10, 88, 191, 241, 8, 97, 190, 8, 112, 182, 189, 179, 68, 36, 191, 73, 239, 99, 63, 156, 138, 2, 188, 57, 224, 89, 62, 89, 184, 7, 62, 167, 98, 81, 191, 41, 229, 91, 191, 16, 64, 156, 63, 62, 15, 240, 61, 96, 165, 57, 190, 83, 173, 3, 63, 43, 235, 250, 62, 171, 213, 135, 62, 204, 207, 96, 190, 142, 11, 150, 190, 150, 98, 25, 191, 178, 110, 254, 190, 63, 190, 98, 63, 171, 121, 206, 59, 179, 254, 153, 62, 234, 168, 130, 59, 10, 241, 61, 63, 252, 113, 255, 188, 212, 36, 146, 191, 207, 92, 70, 191, 252, 208, 193, 190, 32, 3, 156, 63, 28, 250, 254, 61, 27, 32, 139, 61, 87, 208, 113, 191, 190, 113, 200, 190, 120, 6, 204, 61, 53, 104, 19, 191, 127, 50, 143, 190, 197, 0, 17, 191, 133, 211, 96, 63, 174, 103, 137, 190, 209, 174, 70, 62, 9, 29, 143, 63, 44, 194, 132, 190, 117, 194, 175, 62, 35, 73, 133, 63, 10, 155, 191, 62, 16, 243, 15, 63, 131, 113, 248, 189, 156, 156, 6, 191, 29, 24, 8, 63, 106, 12, 7, 191, 115, 31, 167, 190, 18, 14, 173, 190, 113, 15, 101, 63, 155, 177, 214, 190, 68, 26, 24, 62, 173, 72, 128, 191, 128, 129, 76, 189, 81, 253, 57, 191, 37, 124, 138, 189, 24, 13, 220, 190, 32, 113, 24, 191, 125, 188, 29, 191, 186, 208, 64, 190, 122, 149, 57, 191, 59, 81, 151, 189, 51, 168, 172, 189, 199, 61, 211, 60, 173, 83, 173, 191, 84, 23, 150, 190, 112, 63, 48, 191, 184, 122, 51, 191, 70, 81, 154, 189, 122, 211, 25, 189, 58, 98, 150, 191, 232, 183, 134, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 3, 38, 191, 31, 238, 178, 189, 183, 250, 236, 62, 138, 121, 45, 62, 169, 217, 141, 190, 19, 10, 160, 190, 37, 9, 227, 190, 120, 10, 232, 190, 3, 200, 164, 190, 46, 94, 246, 62, 74, 134, 152, 189, 68, 158, 51, 191, 86, 166, 134, 190, 117, 50, 149, 62, 115, 173, 111, 61, 193, 8, 8, 63, 233, 53, 231, 190, 184, 151, 254, 62, 57, 25, 91, 190, 251, 7, 150, 190, 201, 53, 88, 190, 74, 125, 133, 62, 11, 9, 26, 63, 60, 66, 15, 191, 101, 125, 229, 62, 154, 177, 239, 62, 170, 49, 140, 61, 0, 255, 2, 63, 126, 85, 45, 63, 104, 17, 124, 190, 111, 198, 239, 62, 253, 187, 202, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 104, 89, 190, 223, 106, 150, 61, 10, 222, 186, 190, 32, 116, 16, 190, 223, 234, 161, 189, 157, 219, 149, 191, 71, 219, 28, 189, 187, 212, 79, 190, 46, 134, 88, 191, 165, 54, 13, 62, 92, 100, 43, 62, 171, 167, 9, 190, 68, 131, 158, 190, 62, 54, 11, 190, 114, 114, 213, 190, 253, 164, 3, 62, 76, 99, 202, 190, 130, 44, 22, 62, 117, 22, 72, 190, 101, 97, 90, 61, 49, 230, 186, 190, 83, 215, 108, 191, 6, 189, 219, 189, 253, 126, 129, 190, 7, 39, 21, 60, 54, 96, 23, 60, 1, 11, 58, 188, 144, 102, 83, 62, 169, 54, 63, 190, 3, 85, 4, 191, 242, 80, 140, 61, 218, 166, 198, 61, 5, 93, 33, 191, 63, 200, 57, 62, 130, 113, 38, 61, 107, 113, 1, 62, 15, 30, 38, 190, 78, 36, 137, 190, 155, 210, 185, 190, 48, 150, 37, 190, 114, 36, 76, 62, 217, 209, 190, 61, 175, 59, 235, 62, 12, 40, 57, 191, 147, 44, 109, 190, 173, 53, 82, 191, 176, 45, 223, 189, 90, 78, 10, 62, 4, 173, 68, 190, 128, 70, 86, 62, 240, 136, 182, 190, 111, 17, 140, 190, 118, 41, 132, 189, 40, 231, 5, 60, 65, 57, 206, 61, 25, 1, 236, 190, 183, 235, 85, 190, 13, 172, 82, 60, 253, 164, 144, 61, 240, 59, 120, 189, 44, 165, 236, 59, 157, 96, 156, 60, 213, 222, 19, 62, 112, 64, 76, 62, 80, 66, 18, 190, 35, 188, 5, 62, 144, 199, 160, 61, 64, 9, 86, 61, 136, 92, 19, 62, 36, 226, 8, 189, 116, 248, 188, 189, 7, 118, 227, 189, 64, 170, 8, 190, 242, 132, 22, 188, 89, 22, 232, 189, 78, 14, 243, 61, 118, 99, 43, 189, 222, 166, 170, 188, 116, 20, 36, 190, 6, 114, 4, 190, 46, 12, 231, 189, 199, 40, 245, 60, 106, 50, 29, 62, 255, 19, 150, 61, 67, 81, 22, 190, 187, 125, 34, 189, 96, 25, 75, 189, 244, 196, 158, 61, 9, 72, 4, 190, 13, 143, 102, 61, 205, 241, 31, 190, 120, 50, 29, 190, 33, 39, 42, 190, 252, 106, 238, 61, 169, 46, 130, 61, 217, 83, 94, 190, 128, 140, 116, 190, 133, 207, 147, 190, 179, 76, 210, 61, 245, 45, 203, 189, 76, 163, 188, 190, 175, 111, 158, 61, 99, 95, 123, 190, 212, 110, 84, 190, 76, 141, 234, 60, 172, 214, 128, 189, 164, 57, 177, 62, 143, 79, 36, 191, 67, 221, 158, 189, 233, 8, 162, 190, 120, 143, 157, 189, 147, 164, 39, 62, 202, 76, 201, 190, 22, 128, 181, 189, 23, 30, 129, 61, 32, 60, 205, 60, 171, 149, 209, 61, 153, 75, 98, 189, 188, 0, 74, 62, 49, 33, 28, 191, 74, 255, 25, 61, 137, 79, 36, 62, 241, 20, 35, 61, 146, 168, 85, 189, 245, 109, 31, 62, 18, 227, 91, 59, 18, 194, 68, 62, 134, 108, 74, 62, 118, 107, 146, 190, 158, 73, 148, 189, 52, 177, 77, 61, 235, 238, 118, 187, 125, 221, 161, 189, 167, 245, 107, 61, 238, 107, 53, 190, 168, 87, 44, 190, 186, 231, 252, 59, 80, 203, 218, 61, 44, 85, 195, 61, 154, 160, 216, 190, 119, 166, 192, 61, 201, 249, 179, 189, 206, 53, 77, 62, 97, 49, 242, 61, 241, 232, 33, 189, 151, 108, 220, 188, 14, 214, 22, 59, 116, 120, 76, 190, 6, 253, 74, 61, 117, 131, 73, 190, 161, 40, 126, 62, 130, 187, 161, 190, 40, 95, 162, 189, 173, 57, 233, 61, 87, 63, 222, 189, 58, 92, 40, 62, 11, 226, 231, 189, 102, 87, 142, 190, 176, 73, 100, 62, 183, 247, 166, 188, 113, 241, 156, 61, 46, 63, 12, 189, 137, 200, 233, 61, 152, 179, 47, 62, 162, 22, 245, 61, 11, 127, 27, 190, 6, 109, 244, 61, 71, 229, 251, 188, 103, 217, 231, 189, 1, 9, 8, 62, 216, 128, 161, 60, 43, 223, 135, 61, 66, 191, 157, 189, 123, 112, 26, 190, 117, 151, 20, 190, 126, 229, 49, 189, 223, 244, 37, 190, 126, 100, 4, 190, 227, 218, 11, 62, 233, 139, 41, 190, 24, 91, 188, 61, 105, 67, 153, 189, 64, 184, 52, 190, 71, 87, 231, 189, 233, 66, 156, 60, 195, 104, 221, 189, 178, 66, 205, 189, 7, 239, 26, 190, 76, 8, 129, 60, 44, 172, 17, 62, 52, 191, 209, 59, 249, 22, 149, 189, 102, 95, 34, 190, 193, 173, 73, 61, 91, 25, 1, 190, 214, 173, 139, 189, 98, 129, 126, 189, 203, 86, 188, 61, 215, 147, 251, 189, 209, 78, 46, 62, 141, 253, 192, 188, 104, 62, 10, 61, 43, 227, 27, 62, 240, 87, 149, 189, 133, 248, 51, 62, 83, 152, 128, 189, 132, 13, 21, 61, 241, 175, 48, 189, 107, 168, 17, 62, 200, 176, 4, 189, 123, 19, 225, 59, 220, 90, 44, 190, 246, 76, 195, 189, 22, 5, 175, 189, 120, 91, 50, 190, 90, 39, 232, 60, 246, 132, 111, 61, 159, 156, 133, 189, 167, 150, 249, 189, 210, 170, 253, 189, 10, 227, 17, 188, 99, 126, 205, 189, 19, 112, 104, 61, 180, 197, 6, 190, 196, 26, 140, 62, 176, 183, 232, 62, 72, 248, 127, 191, 88, 155, 71, 62, 122, 141, 149, 190, 94, 110, 231, 190, 202, 76, 8, 62, 98, 205, 129, 190, 85, 141, 181, 190, 217, 111, 34, 60, 145, 156, 111, 62, 134, 224, 83, 61, 18, 158, 117, 190, 106, 51, 34, 188, 109, 171, 55, 191, 197, 106, 5, 62, 113, 50, 16, 190, 34, 23, 46, 62, 238, 44, 108, 190, 155, 87, 230, 189, 210, 90, 63, 191, 112, 252, 15, 191, 95, 243, 74, 190, 217, 54, 163, 190, 71, 179, 73, 62, 133, 210, 62, 189, 231, 73, 43, 60, 176, 39, 198, 189, 98, 252, 146, 186, 15, 175, 91, 190, 142, 103, 89, 60, 247, 32, 175, 187, 238, 181, 61, 189, 9, 136, 7, 62, 184, 68, 80, 60, 238, 133, 153, 191, 67, 233, 43, 190, 84, 151, 129, 189, 196, 94, 6, 63, 248, 69, 19, 62, 200, 126, 63, 62, 70, 67, 67, 60, 124, 90, 235, 61, 199, 208, 201, 62, 185, 55, 70, 62, 190, 206, 12, 190, 25, 224, 136, 189, 167, 228, 172, 190, 233, 125, 210, 60, 105, 191, 172, 190, 223, 107, 4, 62, 112, 110, 142, 62, 195, 198, 96, 62, 236, 78, 207, 61, 191, 178, 90, 188, 82, 1, 74, 188, 229, 211, 28, 190, 175, 245, 65, 189, 39, 221, 56, 190, 190, 0, 117, 59, 201, 14, 128, 190, 161, 112, 56, 189, 61, 136, 16, 189, 226, 235, 237, 61, 76, 155, 180, 190, 196, 86, 163, 190, 183, 231, 110, 62, 234, 95, 98, 190, 82, 134, 162, 190, 19, 126, 13, 62, 232, 196, 166, 62, 79, 153, 172, 60, 112, 224, 202, 190, 54, 125, 188, 190, 117, 207, 72, 62, 65, 224, 231, 189, 106, 192, 200, 61, 196, 107, 5, 62, 209, 84, 69, 189, 57, 233, 6, 191, 72, 40, 68, 62, 188, 57, 252, 190, 14, 11, 201, 190, 109, 136, 199, 62, 77, 179, 134, 189, 146, 193, 42, 61, 4, 93, 246, 189, 150, 110, 221, 189, 87, 249, 2, 61, 203, 208, 107, 62, 1, 152, 155, 61, 54, 23, 165, 59, 74, 125, 151, 61, 32, 77, 55, 63, 222, 111, 176, 61, 99, 154, 97, 62, 157, 11, 74, 61, 137, 2, 61, 190, 93, 179, 14, 61, 43, 59, 11, 62, 147, 89, 219, 61, 202, 195, 85, 62, 31, 194, 246, 190, 128, 59, 54, 63, 130, 59, 242, 190, 133, 107, 106, 191, 105, 124, 149, 190, 48, 42, 179, 187, 218, 117, 1, 63, 54, 160, 147, 62, 100, 0, 65, 189, 6, 239, 189, 191, 61, 207, 218, 61, 107, 128, 226, 191, 110, 244, 43, 61, 127, 50, 87, 62, 164, 97, 132, 190, 149, 237, 173, 62, 125, 237, 40, 191, 134, 16, 149, 61, 77, 96, 250, 189, 21, 233, 164, 190, 41, 126, 157, 61, 243, 102, 148, 62, 163, 15, 213, 62, 255, 229, 49, 63, 148, 155, 33, 62, 176, 32, 50, 191, 131, 6, 22, 190, 61, 32, 60, 59, 170, 108, 255, 61, 43, 202, 39, 62, 100, 210, 47, 62, 185, 16, 118, 62, 54, 140, 160, 191, 195, 75, 178, 62, 180, 192, 109, 189, 43, 239, 150, 191, 213, 212, 64, 190, 238, 193, 204, 61, 211, 183, 128, 62, 160, 255, 9, 62, 238, 255, 70, 62, 16, 86, 162, 191, 140, 246, 78, 189, 136, 239, 99, 191, 96, 138, 143, 62, 26, 155, 16, 62, 248, 232, 96, 190, 152, 58, 248, 188, 90, 108, 138, 62, 43, 50, 140, 60, 135, 22, 147, 190, 206, 78, 5, 62, 59, 226, 140, 61, 228, 230, 14, 62, 66, 145, 204, 62, 71, 141, 34, 63, 128, 245, 128, 62, 36, 2, 213, 190, 164, 187, 90, 61, 207, 238, 240, 61, 176, 94, 241, 61, 15, 133, 143, 189, 176, 131, 117, 190, 197, 40, 98, 60, 101, 190, 225, 189, 207, 29, 36, 190, 28, 92, 157, 60, 211, 51, 128, 189, 71, 193, 8, 190, 152, 209, 201, 190, 183, 8, 212, 189, 88, 87, 185, 189, 72, 233, 64, 190, 98, 195, 52, 189, 137, 181, 208, 61, 170, 158, 69, 190, 30, 238, 179, 190, 125, 129, 98, 62, 10, 167, 69, 189, 131, 167, 31, 62, 140, 70, 59, 189, 208, 224, 186, 190, 34, 146, 173, 61, 81, 148, 28, 62, 114, 185, 233, 189, 19, 73, 80, 189, 121, 221, 108, 58, 34, 103, 16, 191, 211, 82, 255, 61, 2, 56, 105, 62, 116, 168, 92, 190, 91, 10, 227, 190, 143, 61, 52, 62, 197, 49, 17, 61, 128, 169, 5, 189, 131, 197, 29, 62, 48, 89, 105, 189, 45, 73, 172, 60, 47, 123, 44, 189, 186, 241, 0, 190, 252, 23, 95, 61, 159, 185, 153, 190, 66, 71, 211, 189, 38, 209, 211, 60, 146, 156, 124, 62, 30, 97, 75, 190, 167, 131, 161, 187, 112, 245, 48, 61, 193, 247, 224, 59, 23, 155, 153, 190, 115, 248, 186, 62, 23, 3, 117, 188, 164, 28, 160, 62, 121, 106, 12, 61, 113, 66, 78, 60, 147, 133, 204, 61, 148, 208, 51, 187, 197, 248, 228, 189, 16, 87, 13, 190, 187, 160, 1, 189, 103, 103, 98, 61, 34, 147, 239, 189, 210, 184, 189, 190, 78, 146, 40, 191, 194, 116, 13, 61, 21, 50, 209, 190, 13, 240, 18, 189, 50, 86, 132, 62, 95, 245, 48, 189, 94, 82, 253, 188, 158, 61, 109, 189, 148, 213, 194, 61, 203, 46, 41, 63, 143, 237, 110, 61, 120, 127, 255, 189, 57, 17, 2, 189, 28, 124, 65, 62, 6, 222, 157, 189, 252, 24, 255, 189, 53, 244, 191, 188, 242, 83, 72, 61, 93, 38, 218, 190, 95, 48, 129, 62, 30, 28, 43, 190, 163, 170, 183, 189, 187, 148, 151, 62, 243, 31, 254, 61, 53, 179, 46, 62, 116, 246, 143, 189, 38, 194, 230, 58, 252, 169, 132, 188, 111, 133, 81, 62, 148, 112, 95, 58, 162, 76, 233, 189, 249, 35, 79, 62, 202, 99, 79, 62, 62, 75, 82, 190, 49, 51, 5, 191, 184, 206, 109, 189, 24, 226, 174, 60, 246, 181, 169, 62, 48, 59, 152, 61, 24, 30, 191, 190, 113, 202, 154, 190, 45, 173, 140, 61, 202, 75, 50, 190, 248, 182, 45, 189, 202, 212, 62, 62, 177, 73, 150, 188, 113, 202, 217, 190, 109, 170, 137, 62, 172, 226, 165, 190, 37, 124, 52, 190, 173, 233, 66, 63, 32, 154, 137, 190, 21, 90, 209, 189, 217, 88, 151, 189, 106, 33, 11, 191, 217, 165, 196, 62, 205, 148, 138, 190, 45, 229, 23, 63, 208, 67, 168, 190, 243, 217, 138, 61, 37, 7, 42, 190, 240, 119, 222, 190, 2, 211, 36, 191, 70, 204, 48, 190, 76, 39, 104, 190, 200, 47, 179, 62, 111, 176, 123, 187, 74, 136, 48, 191, 94, 220, 112, 61, 167, 116, 108, 191, 39, 83, 150, 59, 211, 215, 29, 190, 243, 134, 201, 190, 253, 85, 78, 62, 8, 17, 101, 190, 78, 227, 15, 62, 52, 62, 233, 189, 61, 36, 142, 62, 216, 165, 128, 190, 66, 128, 186, 62, 178, 136, 249, 190, 103, 154, 34, 190, 250, 61, 49, 62, 102, 93, 221, 190, 223, 183, 149, 62, 174, 153, 44, 62, 247, 104, 152, 190, 234, 211, 187, 190, 202, 72, 195, 61, 236, 207, 249, 189, 117, 47, 160, 61, 48, 110, 126, 188, 141, 205, 156, 61, 153, 112, 234, 61, 217, 238, 1, 61, 106, 89, 43, 190, 3, 199, 168, 190, 47, 32, 90, 62, 120, 205, 97, 190, 40, 128, 238, 190, 80, 212, 51, 190, 74, 15, 23, 191, 12, 96, 211, 190, 35, 43, 25, 62, 23, 170, 160, 61, 160, 249, 234, 62, 177, 182, 184, 187, 139, 224, 131, 190, 18, 250, 84, 191, 14, 152, 211, 189, 82, 248, 16, 62, 249, 235, 191, 190, 213, 29, 117, 189, 133, 166, 203, 190, 80, 179, 219, 61, 88, 8, 171, 61, 146, 101, 122, 60, 100, 173, 153, 62, 14, 193, 24, 191, 150, 25, 46, 60, 231, 244, 189, 62, 135, 229, 142, 189, 212, 202, 57, 62, 25, 163, 207, 60, 186, 20, 164, 61, 176, 250, 90, 62, 47, 249, 0, 63, 224, 122, 90, 62, 193, 20, 6, 63, 227, 96, 119, 62, 80, 196, 17, 191, 144, 227, 157, 189, 15, 254, 187, 189, 70, 143, 14, 62, 112, 56, 24, 62, 150, 80, 190, 62, 249, 84, 158, 190, 96, 240, 150, 62, 74, 61, 39, 190, 188, 100, 182, 61, 54, 11, 7, 61, 239, 48, 130, 62, 212, 22, 60, 190, 171, 211, 55, 62, 101, 203, 32, 60, 38, 178, 153, 62, 109, 255, 18, 63, 166, 94, 67, 62, 16, 177, 206, 61, 188, 86, 170, 61, 59, 184, 204, 190, 231, 203, 169, 62, 84, 171, 37, 190, 87, 72, 192, 189, 210, 158, 136, 191, 4, 248, 153, 190, 121, 200, 167, 190, 230, 1, 107, 191, 27, 43, 95, 190, 6, 172, 10, 62, 251, 246, 123, 62, 11, 82, 202, 190, 20, 132, 181, 189, 222, 161, 192, 190, 203, 52, 11, 191, 163, 81, 255, 61, 206, 226, 62, 190, 20, 70, 252, 188, 220, 107, 56, 62, 211, 128, 75, 190, 66, 252, 61, 189, 152, 129, 140, 190, 177, 15, 116, 62, 22, 104, 102, 191, 189, 247, 180, 189, 69, 116, 21, 190, 165, 242, 49, 62, 113, 92, 215, 190, 253, 11, 128, 62, 34, 99, 200, 190, 94, 174, 248, 190, 18, 216, 136, 190, 1, 110, 134, 190, 231, 148, 243, 61, 182, 187, 165, 190, 165, 88, 95, 62, 21, 250, 11, 188, 150, 97, 218, 61, 105, 213, 3, 191, 170, 121, 170, 61, 35, 248, 147, 188, 153, 120, 212, 190, 118, 201, 183, 190, 213, 152, 122, 62, 37, 118, 118, 61, 34, 165, 32, 189, 187, 197, 56, 62, 77, 117, 167, 60, 166, 12, 94, 61, 148, 227, 13, 62, 96, 229, 29, 190, 163, 28, 147, 62, 1, 175, 94, 191, 122, 187, 24, 62, 103, 29, 87, 190, 221, 108, 231, 187, 165, 179, 233, 61, 183, 57, 58, 190, 147, 93, 171, 188, 188, 156, 19, 190, 200, 166, 41, 190, 88, 116, 230, 189, 94, 14, 1, 190, 253, 110, 76, 62, 121, 119, 141, 190, 105, 229, 150, 188, 206, 230, 57, 59, 142, 148, 137, 62, 21, 172, 36, 62, 41, 79, 161, 188, 34, 250, 19, 190, 139, 159, 246, 61, 127, 123, 72, 62, 232, 50, 235, 61, 24, 24, 26, 185, 241, 112, 127, 191, 240, 240, 53, 189, 119, 41, 176, 190, 36, 147, 53, 191, 156, 111, 20, 62, 120, 45, 93, 190, 245, 119, 66, 190, 37, 109, 210, 61, 169, 26, 132, 61, 145, 255, 159, 189, 7, 41, 65, 190, 38, 27, 104, 62, 78, 136, 129, 191, 164, 119, 78, 62, 49, 106, 251, 190, 108, 158, 52, 61, 246, 111, 22, 190, 147, 218, 150, 62, 7, 18, 23, 191, 67, 64, 123, 191, 246, 230, 219, 188, 83, 175, 143, 190, 165, 244, 106, 62, 23, 220, 16, 190, 110, 159, 76, 62, 111, 31, 83, 62, 109, 50, 186, 61, 234, 62, 176, 190, 166, 1, 114, 189, 158, 249, 21, 190, 215, 20, 115, 60, 252, 58, 94, 189, 170, 254, 38, 189, 153, 43, 156, 189, 106, 67, 243, 188, 9, 95, 219, 60, 0, 188, 26, 61, 80, 167, 190, 61, 251, 208, 225, 189, 61, 165, 215, 61, 36, 199, 31, 190, 149, 140, 181, 189, 114, 114, 24, 61, 90, 126, 116, 190, 215, 204, 229, 60, 189, 221, 249, 188, 98, 82, 60, 189, 55, 245, 24, 190, 238, 171, 168, 189, 173, 153, 229, 189, 194, 231, 31, 190, 195, 28, 110, 61, 30, 95, 197, 61, 151, 41, 198, 189, 215, 2, 63, 190, 177, 143, 67, 190, 164, 12, 61, 61, 130, 148, 77, 190, 233, 47, 237, 189, 221, 130, 195, 189, 5, 240, 207, 60, 59, 174, 30, 62, 195, 96, 34, 188, 202, 85, 137, 189, 72, 122, 241, 62, 171, 94, 21, 63, 240, 7, 66, 62, 235, 70, 152, 62, 5, 88, 3, 63, 65, 101, 204, 190, 166, 41, 99, 62, 213, 215, 187, 60, 155, 222, 199, 189, 152, 167, 170, 189, 14, 28, 17, 191, 249, 92, 210, 189, 253, 193, 143, 62, 207, 230, 182, 188, 19, 206, 252, 190, 130, 219, 137, 61, 45, 168, 40, 61, 13, 200, 152, 190, 108, 88, 153, 189, 103, 189, 39, 62, 150, 30, 161, 190, 229, 155, 152, 61, 73, 66, 52, 189, 216, 196, 173, 62, 80, 196, 194, 61, 208, 20, 212, 62, 111, 178, 133, 61, 255, 133, 140, 190, 253, 83, 228, 62, 35, 184, 148, 60, 96, 214, 159, 62, 178, 119, 104, 62, 211, 50, 229, 61, 217, 173, 77, 190, 208, 51, 37, 62, 32, 172, 181, 61, 46, 19, 24, 190, 7, 43, 107, 189, 216, 144, 149, 62, 15, 9, 19, 190, 244, 51, 118, 62, 63, 166, 6, 63, 6, 232, 139, 189, 184, 132, 244, 190, 182, 254, 112, 61, 73, 27, 206, 189, 213, 82, 137, 189, 190, 86, 188, 61, 70, 15, 20, 61, 34, 248, 131, 189, 155, 116, 97, 62, 244, 125, 37, 189, 152, 20, 23, 191, 152, 194, 13, 62, 238, 109, 52, 63, 54, 209, 177, 190, 0, 219, 1, 190, 135, 218, 172, 189, 237, 180, 53, 191, 155, 37, 197, 189, 131, 157, 5, 191, 31, 254, 242, 190, 152, 235, 186, 60, 152, 244, 238, 189, 245, 231, 32, 190, 65, 212, 254, 188, 193, 34, 45, 190, 221, 15, 235, 188, 118, 195, 4, 190, 34, 189, 60, 188, 145, 71, 13, 62, 34, 4, 27, 189, 37, 214, 0, 61, 114, 100, 71, 187, 175, 235, 157, 61, 244, 192, 16, 190, 25, 20, 41, 190, 74, 59, 244, 189, 142, 233, 40, 62, 94, 18, 248, 61, 228, 234, 140, 188, 161, 130, 105, 189, 63, 123, 213, 189, 129, 168, 146, 61, 72, 168, 134, 59, 250, 217, 153, 188, 113, 140, 84, 190, 228, 24, 227, 188, 41, 26, 85, 190, 132, 197, 15, 61, 122, 124, 177, 61, 3, 230, 172, 189, 121, 236, 104, 61, 238, 238, 199, 61, 170, 25, 30, 62, 145, 116, 2, 63, 38, 118, 142, 189, 18, 77, 124, 190, 50, 105, 158, 190, 221, 21, 232, 188, 105, 50, 190, 62, 236, 165, 29, 190, 104, 57, 213, 62, 24, 26, 33, 190, 26, 59, 144, 62, 156, 139, 245, 60, 168, 245, 25, 190, 72, 69, 142, 61, 110, 20, 155, 61, 105, 167, 197, 185, 103, 70, 243, 61, 61, 108, 190, 61, 54, 32, 90, 190, 61, 98, 184, 62, 219, 104, 143, 61, 108, 213, 168, 62, 21, 68, 43, 190, 60, 208, 255, 190, 100, 246, 133, 62, 136, 146, 221, 61, 177, 231, 193, 62, 65, 209, 29, 191, 36, 48, 219, 190, 68, 39, 133, 191, 41, 227, 151, 190, 159, 140, 199, 189, 83, 155, 243, 189, 185, 83, 106, 190, 9, 249, 134, 190, 28, 196, 27, 62, 157, 86, 109, 60, 198, 191, 151, 61, 167, 102, 48, 188, 11, 210, 20, 62, 166, 151, 172, 61, 152, 112, 43, 60, 66, 201, 148, 191, 125, 211, 230, 190, 51, 3, 6, 62, 179, 101, 44, 62, 108, 39, 37, 62, 58, 246, 184, 189, 219, 184, 230, 60, 163, 150, 74, 189, 145, 188, 182, 61, 18, 200, 150, 62, 125, 54, 111, 61, 8, 121, 253, 60, 217, 81, 59, 190, 178, 145, 115, 61, 234, 85, 167, 60, 25, 172, 80, 191, 241, 21, 15, 62, 6, 254, 214, 60, 247, 125, 255, 187, 125, 217, 155, 190, 19, 78, 167, 189, 151, 216, 209, 189, 219, 2, 17, 190, 249, 198, 54, 190, 55, 71, 20, 62, 107, 245, 163, 190, 42, 158, 243, 61, 85, 158, 54, 190, 145, 202, 50, 190, 198, 248, 178, 189, 160, 229, 90, 190, 240, 232, 193, 60, 61, 181, 170, 62, 73, 61, 174, 190, 227, 117, 103, 61, 104, 78, 83, 191, 217, 70, 163, 61, 117, 5, 42, 62, 127, 195, 228, 190, 168, 155, 16, 188, 202, 136, 204, 188, 210, 155, 65, 191, 29, 4, 185, 61, 174, 177, 187, 189, 44, 198, 88, 62, 52, 214, 213, 62, 3, 97, 190, 190, 10, 201, 94, 62, 238, 122, 47, 191, 147, 160, 132, 189, 18, 187, 83, 190, 163, 53, 1, 63, 68, 68, 39, 61, 73, 53, 145, 61, 98, 74, 26, 189, 9, 166, 166, 189, 123, 213, 175, 61, 28, 203, 150, 62, 146, 252, 66, 190, 34, 109, 100, 189, 49, 203, 243, 189, 140, 90, 170, 189, 240, 39, 168, 62, 70, 219, 32, 62, 62, 124, 164, 62, 187, 54, 96, 191, 216, 128, 43, 189, 88, 21, 230, 190, 49, 48, 9, 189, 17, 115, 77, 62, 164, 228, 44, 191, 19, 223, 248, 61, 114, 234, 38, 189, 111, 145, 120, 60, 16, 153, 209, 61, 210, 37, 94, 190, 142, 11, 195, 62, 33, 186, 203, 190, 222, 10, 99, 189, 44, 152, 1, 62, 116, 166, 199, 61, 14, 203, 148, 61, 159, 226, 175, 189, 214, 185, 150, 190, 91, 142, 242, 189, 170, 213, 94, 62, 86, 57, 153, 188, 52, 160, 193, 60, 32, 14, 136, 62, 255, 176, 81, 190, 104, 187, 251, 189, 63, 248, 249, 61, 220, 194, 125, 191, 190, 77, 204, 186, 206, 206, 120, 60, 185, 150, 22, 191, 106, 3, 5, 61, 35, 17, 231, 190, 112, 198, 212, 187, 210, 139, 172, 189, 70, 237, 97, 61, 223, 212, 159, 190, 16, 42, 57, 62, 224, 69, 187, 60, 139, 0, 193, 190, 46, 10, 231, 61, 50, 163, 251, 62, 177, 215, 208, 61, 149, 8, 129, 62, 66, 107, 143, 59, 135, 235, 188, 188, 233, 21, 216, 61, 99, 237, 30, 61, 251, 21, 228, 190, 28, 223, 5, 191, 165, 85, 237, 188, 203, 108, 167, 189, 235, 78, 176, 61, 139, 171, 214, 190, 218, 132, 22, 191, 181, 48, 98, 62, 112, 61, 55, 190, 190, 167, 87, 190, 218, 235, 22, 62, 167, 87, 1, 191, 172, 175, 131, 190, 53, 20, 246, 189, 100, 7, 202, 190, 16, 134, 36, 62, 212, 60, 164, 190, 47, 20, 33, 189, 241, 209, 146, 60, 79, 127, 8, 62, 122, 94, 155, 190, 19, 39, 21, 62, 155, 93, 223, 190, 199, 3, 202, 188, 33, 0, 141, 61, 217, 15, 111, 190, 102, 104, 169, 62, 159, 81, 40, 62, 112, 11, 82, 62, 102, 6, 26, 190, 237, 115, 2, 62, 155, 17, 3, 189, 51, 255, 15, 62, 87, 183, 248, 61, 209, 36, 139, 62, 188, 73, 12, 189, 40, 166, 241, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 81, 65, 187, 128, 219, 135, 60, 56, 174, 188, 188, 73, 5, 92, 62, 95, 225, 215, 61, 34, 4, 220, 189, 87, 181, 221, 60, 53, 112, 177, 61, 99, 232, 195, 189, 112, 83, 50, 61, 227, 30, 179, 62, 95, 211, 73, 61, 235, 10, 124, 62, 39, 248, 242, 61, 110, 64, 19, 190, 164, 121, 15, 190, 196, 231, 76, 62, 118, 111, 135, 62, 200, 168, 158, 61, 146, 102, 19, 190, 213, 171, 96, 62, 241, 30, 112, 61, 235, 248, 126, 190, 72, 96, 33, 189, 119, 183, 203, 190, 163, 94, 236, 188, 211, 89, 83, 62, 126, 30, 127, 61, 2, 192, 180, 190, 9, 196, 152, 189, 44, 134, 33, 62, 229, 180, 156, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 228, 94, 190, 60, 124, 239, 61, 255, 2, 15, 62, 77, 162, 240, 61, 232, 201, 107, 61, 24, 20, 160, 188, 52, 241, 20, 190, 196, 148, 228, 190, 174, 232, 98, 62, 215, 140, 152, 62, 32, 125, 133, 63, 183, 181, 70, 63, 71, 73, 48, 60, 65, 176, 220, 61, 53, 130, 210, 62, 224, 47, 103, 190, 76, 230, 239, 62, 51, 208, 36, 63, 66, 100, 10, 191, 246, 240, 29, 191, 27, 235, 205, 61, 50, 197, 34, 191, 15, 92, 206, 60, 213, 219, 41, 191, 8, 97, 190, 190, 45, 53, 32, 190, 26, 46, 232, 190, 7, 167, 189, 60, 231, 76, 218, 190, 243, 7, 19, 62, 109, 227, 181, 187, 238, 131, 141, 62, 153, 2, 69, 190, 234, 73, 224, 190, 235, 100, 39, 190, 15, 152, 18, 190, 90, 247, 2, 190, 104, 36, 207, 189, 136, 66, 228, 61, 149, 103, 227, 62, 12, 80, 251, 62, 93, 204, 84, 62, 187, 166, 208, 61, 73, 74, 20, 62, 159, 125, 80, 190, 181, 55, 190, 189, 141, 200, 231, 62, 6, 187, 153, 61, 224, 170, 144, 190, 55, 187, 79, 61, 185, 23, 27, 190, 209, 134, 174, 62, 201, 134, 118, 190, 183, 251, 210, 189, 15, 221, 79, 61, 191, 113, 87, 61, 171, 89, 59, 63, 161, 183, 195, 60, 111, 229, 0, 190, 42, 134, 180, 190, 157, 65, 203, 62, 221, 246, 138, 190, 117, 59, 210, 190, 227, 40, 43, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 91, 222, 61, 168, 85, 195, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {244, 58, 32, 63, 202, 159, 234, 59, 52, 218, 218, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {160, 232, 157, 63, 222, 2, 128, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0062/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}