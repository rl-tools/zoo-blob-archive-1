// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 112, 43, 190, 40, 32, 15, 63, 186, 104, 253, 62, 38, 108, 15, 63, 131, 182, 136, 63, 81, 95, 174, 62, 179, 71, 13, 63, 146, 19, 91, 191, 137, 254, 34, 63, 90, 24, 79, 191, 19, 100, 173, 190, 140, 212, 104, 60, 254, 255, 202, 61, 24, 109, 39, 191, 224, 59, 195, 190, 28, 244, 148, 190, 207, 171, 92, 190, 205, 90, 235, 62, 106, 23, 174, 189, 122, 229, 158, 63, 185, 2, 65, 191, 15, 114, 73, 190, 164, 104, 11, 190, 143, 218, 42, 191, 56, 94, 85, 63, 111, 251, 98, 189, 71, 25, 76, 62, 236, 202, 245, 61, 124, 147, 45, 191, 93, 68, 105, 191, 16, 75, 155, 63, 197, 239, 199, 189, 181, 80, 146, 189, 253, 15, 228, 62, 38, 237, 9, 63, 62, 253, 83, 62, 32, 75, 15, 190, 233, 13, 172, 190, 38, 158, 33, 191, 10, 175, 212, 190, 71, 17, 52, 63, 162, 18, 155, 189, 95, 84, 0, 62, 59, 73, 71, 189, 30, 3, 95, 63, 7, 94, 104, 62, 242, 187, 142, 191, 19, 69, 69, 191, 26, 11, 199, 190, 75, 223, 142, 63, 96, 171, 237, 61, 39, 26, 207, 61, 97, 59, 135, 191, 14, 67, 180, 190, 45, 54, 229, 61, 46, 202, 174, 190, 197, 7, 194, 190, 155, 140, 195, 190, 122, 195, 76, 63, 65, 50, 108, 190, 19, 181, 165, 61, 240, 134, 153, 63, 252, 167, 53, 190, 6, 141, 148, 62, 138, 9, 129, 63, 89, 152, 210, 62, 14, 119, 21, 63, 54, 241, 81, 190, 148, 113, 239, 190, 33, 192, 134, 62, 125, 156, 237, 190, 59, 11, 176, 190, 91, 56, 164, 190, 189, 220, 76, 63, 113, 65, 238, 190, 185, 133, 181, 61, 116, 193, 133, 191, 85, 32, 63, 60, 79, 57, 40, 191, 171, 93, 212, 61, 103, 140, 194, 190, 226, 145, 232, 190, 31, 232, 35, 191, 213, 91, 19, 190, 7, 52, 64, 191, 32, 248, 51, 61, 237, 93, 222, 189, 162, 13, 31, 62, 146, 207, 169, 191, 241, 79, 159, 190, 68, 20, 0, 191, 70, 141, 39, 191, 0, 66, 190, 189, 210, 126, 5, 189, 244, 90, 165, 191, 63, 221, 85, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 178, 43, 191, 109, 223, 231, 188, 192, 216, 221, 62, 203, 215, 167, 61, 121, 230, 152, 190, 195, 173, 152, 190, 37, 5, 180, 190, 86, 166, 229, 190, 117, 182, 147, 190, 134, 23, 4, 63, 54, 236, 68, 188, 19, 79, 60, 191, 195, 177, 152, 190, 24, 115, 194, 62, 194, 254, 202, 61, 81, 188, 26, 63, 175, 240, 11, 191, 110, 210, 202, 62, 126, 108, 23, 190, 50, 52, 145, 190, 214, 188, 1, 190, 131, 183, 143, 62, 11, 46, 17, 63, 132, 102, 29, 191, 118, 124, 202, 62, 143, 66, 229, 62, 191, 192, 236, 61, 26, 247, 11, 63, 123, 159, 24, 63, 109, 109, 89, 190, 165, 243, 5, 63, 165, 10, 227, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 104, 89, 190, 172, 215, 205, 61, 62, 90, 187, 190, 193, 21, 181, 189, 205, 21, 84, 189, 144, 4, 160, 191, 53, 232, 193, 188, 22, 114, 60, 190, 5, 170, 69, 191, 255, 205, 55, 62, 122, 198, 53, 62, 171, 167, 9, 190, 166, 86, 144, 190, 248, 75, 228, 189, 6, 76, 241, 190, 5, 174, 52, 62, 217, 36, 196, 190, 145, 46, 73, 62, 224, 59, 49, 190, 201, 28, 186, 61, 58, 187, 180, 190, 66, 245, 119, 191, 165, 34, 137, 189, 230, 8, 110, 190, 154, 46, 29, 61, 144, 218, 117, 61, 59, 15, 248, 60, 79, 197, 132, 62, 89, 200, 14, 190, 143, 217, 241, 190, 183, 126, 244, 61, 99, 55, 24, 62, 162, 147, 169, 190, 194, 160, 23, 62, 104, 92, 22, 61, 149, 125, 234, 61, 48, 90, 175, 189, 67, 121, 71, 190, 236, 157, 206, 190, 238, 107, 246, 189, 130, 48, 192, 61, 241, 206, 213, 61, 87, 75, 179, 62, 171, 74, 193, 190, 212, 112, 87, 190, 140, 121, 24, 191, 54, 237, 191, 189, 134, 77, 22, 62, 125, 226, 21, 190, 9, 142, 58, 62, 168, 63, 158, 190, 165, 7, 145, 190, 140, 183, 162, 189, 166, 31, 242, 188, 225, 97, 254, 186, 141, 136, 222, 190, 151, 224, 89, 190, 31, 42, 60, 188, 0, 187, 145, 60, 248, 121, 102, 189, 191, 65, 146, 188, 80, 86, 174, 61, 203, 10, 20, 62, 116, 79, 75, 62, 80, 66, 18, 190, 35, 188, 5, 62, 144, 163, 220, 61, 246, 12, 114, 61, 87, 121, 28, 62, 36, 226, 8, 189, 116, 248, 188, 189, 7, 118, 227, 189, 64, 170, 8, 190, 128, 8, 148, 60, 164, 38, 218, 189, 78, 14, 243, 61, 156, 62, 40, 189, 222, 166, 170, 188, 185, 86, 35, 190, 116, 24, 200, 189, 46, 12, 231, 189, 69, 196, 123, 61, 244, 128, 34, 62, 255, 19, 150, 61, 67, 81, 22, 190, 187, 125, 34, 189, 145, 38, 2, 189, 244, 196, 158, 61, 9, 72, 4, 190, 49, 8, 179, 61, 205, 241, 31, 190, 247, 214, 5, 190, 186, 111, 32, 190, 116, 27, 17, 62, 156, 211, 176, 61, 83, 231, 61, 190, 229, 145, 73, 190, 26, 88, 91, 190, 224, 78, 14, 62, 49, 20, 178, 189, 144, 193, 146, 190, 46, 192, 215, 61, 214, 8, 181, 190, 84, 59, 35, 190, 204, 5, 83, 61, 114, 124, 219, 189, 104, 153, 151, 62, 246, 63, 96, 190, 89, 70, 173, 189, 64, 103, 224, 189, 249, 229, 27, 189, 255, 80, 26, 62, 51, 231, 157, 190, 171, 229, 186, 189, 85, 42, 217, 61, 199, 22, 128, 189, 111, 247, 206, 189, 135, 70, 171, 187, 250, 17, 123, 61, 22, 175, 15, 191, 200, 78, 59, 189, 85, 55, 50, 62, 192, 132, 214, 188, 20, 120, 8, 189, 89, 50, 64, 62, 135, 106, 53, 61, 102, 112, 62, 62, 204, 125, 46, 62, 198, 11, 148, 190, 159, 190, 194, 59, 70, 60, 151, 61, 158, 253, 10, 189, 3, 117, 134, 188, 251, 162, 120, 61, 43, 107, 237, 189, 124, 7, 227, 189, 145, 196, 36, 61, 245, 187, 33, 62, 69, 150, 0, 62, 247, 0, 144, 190, 212, 122, 22, 62, 101, 63, 201, 60, 91, 229, 97, 62, 72, 63, 45, 62, 11, 160, 177, 188, 188, 209, 70, 60, 163, 151, 117, 61, 44, 162, 45, 190, 123, 61, 62, 62, 112, 172, 22, 190, 83, 115, 145, 62, 100, 242, 130, 190, 53, 82, 17, 188, 170, 103, 22, 62, 205, 194, 167, 189, 175, 104, 66, 62, 163, 163, 180, 189, 109, 25, 69, 190, 106, 205, 89, 62, 181, 21, 60, 188, 113, 241, 156, 61, 46, 63, 12, 189, 137, 200, 233, 61, 152, 179, 47, 62, 162, 22, 245, 61, 11, 127, 27, 190, 6, 109, 244, 61, 71, 229, 251, 188, 103, 217, 231, 189, 1, 9, 8, 62, 216, 128, 161, 60, 43, 223, 135, 61, 66, 191, 157, 189, 123, 112, 26, 190, 117, 151, 20, 190, 126, 229, 49, 189, 223, 244, 37, 190, 126, 100, 4, 190, 227, 218, 11, 62, 233, 139, 41, 190, 24, 91, 188, 61, 105, 67, 153, 189, 64, 184, 52, 190, 71, 87, 231, 189, 233, 66, 156, 60, 195, 104, 221, 189, 178, 66, 205, 189, 7, 239, 26, 190, 76, 8, 129, 60, 44, 172, 17, 62, 52, 191, 209, 59, 249, 22, 149, 189, 102, 95, 34, 190, 193, 173, 73, 61, 91, 25, 1, 190, 214, 173, 139, 189, 98, 129, 126, 189, 203, 86, 188, 61, 215, 147, 251, 189, 209, 78, 46, 62, 141, 253, 192, 188, 104, 62, 10, 61, 43, 227, 27, 62, 240, 87, 149, 189, 133, 248, 51, 62, 83, 152, 128, 189, 132, 13, 21, 61, 241, 175, 48, 189, 107, 168, 17, 62, 200, 176, 4, 189, 123, 19, 225, 59, 220, 90, 44, 190, 246, 76, 195, 189, 22, 5, 175, 189, 120, 91, 50, 190, 90, 39, 232, 60, 246, 132, 111, 61, 159, 156, 133, 189, 167, 150, 249, 189, 210, 170, 253, 189, 10, 227, 17, 188, 99, 126, 205, 189, 19, 112, 104, 61, 180, 197, 6, 190, 196, 26, 140, 62, 190, 43, 32, 63, 88, 82, 90, 191, 26, 30, 116, 62, 153, 223, 138, 190, 184, 186, 34, 191, 159, 73, 38, 62, 247, 212, 128, 190, 158, 222, 24, 190, 253, 170, 103, 61, 209, 132, 171, 62, 134, 224, 83, 61, 45, 221, 105, 190, 104, 55, 172, 60, 140, 193, 79, 191, 166, 86, 59, 62, 64, 133, 1, 190, 155, 208, 106, 62, 178, 249, 90, 190, 114, 131, 141, 189, 132, 202, 44, 191, 125, 195, 204, 190, 37, 26, 7, 190, 171, 123, 153, 190, 64, 253, 113, 62, 192, 99, 252, 60, 23, 218, 30, 61, 135, 13, 59, 189, 118, 230, 54, 61, 175, 157, 47, 190, 163, 7, 133, 61, 65, 94, 56, 61, 113, 89, 78, 189, 134, 30, 2, 62, 34, 8, 91, 61, 249, 36, 55, 191, 35, 153, 27, 190, 217, 76, 215, 189, 245, 239, 241, 62, 101, 103, 15, 62, 211, 117, 72, 62, 67, 55, 18, 189, 41, 125, 217, 61, 17, 210, 175, 62, 242, 134, 63, 62, 227, 76, 237, 189, 185, 186, 93, 189, 138, 84, 182, 190, 94, 137, 74, 61, 174, 2, 83, 190, 80, 232, 241, 61, 130, 230, 133, 62, 157, 237, 64, 62, 8, 32, 221, 61, 38, 118, 16, 189, 233, 13, 41, 188, 217, 10, 67, 190, 163, 99, 141, 61, 48, 19, 49, 190, 219, 101, 190, 61, 99, 29, 133, 190, 60, 186, 214, 188, 189, 233, 24, 62, 237, 55, 186, 62, 56, 57, 167, 190, 147, 29, 130, 190, 158, 148, 65, 62, 158, 225, 39, 190, 63, 198, 134, 60, 224, 118, 243, 61, 191, 210, 149, 62, 159, 204, 167, 58, 134, 35, 223, 190, 127, 90, 152, 190, 41, 146, 220, 61, 36, 78, 75, 190, 250, 164, 159, 61, 65, 185, 76, 62, 1, 171, 156, 189, 51, 163, 249, 190, 61, 6, 125, 62, 174, 165, 7, 191, 225, 7, 157, 190, 113, 6, 168, 62, 247, 140, 214, 189, 2, 126, 133, 61, 75, 121, 138, 61, 6, 32, 189, 189, 9, 81, 12, 188, 204, 104, 37, 62, 186, 253, 151, 61, 197, 89, 151, 189, 6, 239, 17, 61, 242, 36, 232, 62, 22, 107, 48, 61, 14, 54, 166, 61, 159, 91, 32, 61, 213, 199, 65, 190, 3, 196, 8, 61, 121, 164, 224, 61, 147, 89, 219, 61, 75, 240, 87, 62, 240, 139, 84, 191, 250, 70, 59, 63, 123, 122, 202, 190, 132, 196, 113, 191, 9, 212, 14, 190, 237, 11, 3, 61, 69, 70, 7, 63, 66, 141, 139, 62, 83, 161, 89, 189, 89, 12, 175, 191, 22, 156, 112, 61, 92, 132, 184, 191, 110, 244, 43, 61, 59, 46, 139, 61, 8, 248, 85, 190, 23, 78, 170, 62, 45, 51, 15, 191, 134, 16, 149, 61, 75, 118, 248, 189, 31, 127, 161, 190, 5, 78, 232, 60, 73, 24, 85, 62, 10, 67, 187, 62, 248, 4, 126, 62, 48, 70, 220, 61, 175, 177, 89, 191, 164, 19, 27, 190, 96, 187, 155, 188, 176, 85, 244, 61, 54, 206, 55, 62, 9, 221, 53, 62, 248, 77, 122, 62, 173, 87, 164, 191, 195, 75, 178, 62, 65, 115, 108, 189, 203, 193, 151, 191, 187, 11, 137, 190, 128, 167, 213, 61, 211, 183, 128, 62, 230, 96, 33, 62, 202, 202, 64, 62, 41, 31, 162, 191, 241, 125, 169, 189, 121, 166, 90, 191, 96, 138, 143, 62, 45, 6, 12, 62, 19, 92, 250, 189, 232, 251, 71, 189, 27, 77, 177, 61, 43, 50, 140, 60, 19, 137, 60, 190, 237, 161, 19, 62, 66, 100, 174, 61, 221, 176, 251, 61, 207, 57, 185, 62, 111, 107, 64, 63, 3, 228, 106, 62, 177, 3, 255, 190, 100, 15, 14, 61, 134, 50, 189, 61, 105, 143, 250, 61, 177, 93, 156, 189, 59, 22, 28, 190, 83, 227, 49, 61, 39, 42, 213, 187, 224, 111, 171, 189, 71, 9, 159, 189, 91, 56, 139, 61, 144, 64, 87, 188, 250, 25, 231, 190, 19, 66, 167, 188, 16, 28, 192, 189, 138, 244, 64, 190, 54, 220, 140, 61, 177, 242, 65, 61, 113, 213, 49, 190, 67, 177, 136, 190, 204, 128, 66, 62, 151, 197, 89, 188, 192, 13, 11, 62, 229, 51, 85, 61, 40, 154, 179, 190, 205, 240, 208, 61, 44, 134, 247, 61, 136, 99, 176, 189, 208, 93, 217, 59, 170, 38, 233, 61, 184, 154, 218, 190, 45, 67, 241, 61, 64, 188, 80, 62, 209, 119, 134, 190, 16, 200, 225, 190, 111, 177, 61, 62, 134, 201, 98, 61, 123, 99, 164, 61, 117, 23, 0, 62, 85, 220, 161, 189, 49, 137, 174, 61, 180, 189, 170, 187, 15, 217, 0, 190, 169, 23, 250, 188, 41, 222, 120, 190, 31, 130, 86, 189, 225, 189, 22, 61, 134, 17, 114, 62, 142, 74, 44, 190, 230, 168, 24, 190, 37, 149, 169, 61, 176, 83, 156, 61, 137, 42, 140, 190, 229, 157, 95, 62, 132, 228, 237, 188, 74, 75, 90, 62, 141, 83, 166, 61, 176, 255, 91, 60, 85, 218, 20, 62, 194, 127, 137, 61, 89, 218, 183, 188, 234, 204, 255, 189, 186, 40, 132, 61, 217, 43, 181, 61, 144, 71, 173, 189, 16, 216, 169, 190, 23, 92, 21, 191, 162, 232, 191, 60, 20, 214, 145, 190, 198, 70, 51, 188, 99, 126, 116, 62, 100, 208, 199, 189, 145, 92, 19, 189, 180, 22, 185, 189, 98, 104, 166, 186, 176, 85, 244, 62, 67, 7, 182, 190, 31, 31, 245, 189, 199, 241, 192, 61, 8, 184, 50, 62, 14, 72, 240, 189, 51, 173, 233, 188, 21, 140, 166, 187, 110, 6, 161, 60, 115, 79, 148, 190, 112, 233, 45, 62, 163, 76, 13, 190, 163, 86, 42, 189, 65, 22, 76, 62, 56, 133, 54, 61, 196, 208, 17, 62, 189, 78, 134, 188, 119, 149, 124, 188, 152, 139, 216, 187, 182, 157, 6, 62, 87, 44, 136, 59, 105, 77, 44, 190, 123, 64, 79, 62, 6, 56, 102, 62, 177, 31, 61, 190, 53, 110, 3, 191, 80, 86, 65, 61, 174, 98, 252, 59, 184, 97, 145, 62, 102, 173, 43, 61, 186, 212, 31, 190, 91, 54, 180, 190, 208, 25, 186, 190, 59, 7, 226, 189, 181, 7, 143, 189, 140, 163, 21, 62, 212, 137, 54, 188, 187, 5, 235, 190, 213, 133, 116, 62, 213, 242, 165, 190, 204, 31, 47, 190, 204, 54, 61, 63, 36, 8, 193, 190, 111, 176, 182, 189, 147, 140, 53, 190, 21, 163, 209, 190, 142, 71, 159, 62, 250, 76, 133, 190, 140, 140, 19, 63, 121, 136, 147, 190, 222, 133, 8, 61, 158, 227, 104, 188, 177, 117, 101, 190, 89, 90, 204, 190, 111, 171, 61, 190, 82, 136, 84, 190, 105, 193, 183, 62, 103, 212, 18, 61, 173, 199, 176, 190, 207, 89, 103, 61, 97, 19, 109, 191, 39, 83, 150, 59, 176, 232, 14, 190, 139, 252, 207, 190, 214, 132, 88, 62, 35, 201, 111, 190, 78, 227, 15, 62, 237, 70, 62, 189, 161, 125, 143, 62, 117, 112, 76, 190, 17, 201, 161, 62, 201, 63, 230, 190, 179, 118, 163, 60, 80, 42, 17, 61, 203, 179, 70, 190, 10, 113, 154, 62, 68, 54, 8, 62, 235, 223, 198, 190, 85, 193, 66, 190, 139, 164, 246, 61, 78, 59, 136, 189, 84, 117, 181, 61, 45, 238, 191, 60, 68, 236, 189, 60, 109, 248, 189, 61, 84, 188, 255, 186, 80, 91, 49, 190, 89, 250, 156, 190, 121, 233, 95, 62, 140, 157, 45, 190, 254, 36, 203, 190, 161, 239, 75, 190, 251, 117, 14, 191, 177, 143, 174, 190, 123, 138, 18, 62, 6, 205, 188, 60, 158, 209, 198, 62, 45, 243, 20, 189, 142, 14, 107, 190, 15, 125, 229, 190, 198, 31, 207, 189, 154, 249, 252, 61, 160, 175, 65, 190, 59, 91, 83, 189, 225, 143, 184, 190, 141, 182, 151, 189, 101, 169, 133, 190, 253, 49, 182, 60, 19, 24, 42, 62, 47, 109, 17, 191, 210, 240, 14, 189, 243, 211, 193, 62, 28, 120, 16, 189, 55, 133, 73, 62, 29, 164, 111, 61, 17, 60, 162, 61, 195, 70, 86, 62, 70, 55, 251, 62, 77, 7, 102, 62, 5, 115, 4, 63, 56, 93, 84, 62, 45, 11, 2, 191, 66, 198, 144, 189, 151, 132, 174, 189, 89, 16, 26, 62, 255, 127, 238, 61, 56, 252, 146, 62, 93, 100, 98, 190, 103, 37, 182, 62, 189, 237, 53, 190, 60, 96, 135, 61, 121, 70, 137, 60, 8, 192, 115, 62, 104, 90, 222, 189, 38, 91, 89, 62, 150, 64, 194, 60, 23, 4, 159, 62, 64, 227, 3, 63, 96, 91, 23, 62, 120, 167, 196, 61, 148, 96, 79, 62, 11, 160, 194, 190, 210, 116, 167, 62, 181, 242, 94, 190, 79, 122, 13, 190, 96, 134, 114, 191, 151, 149, 41, 190, 200, 28, 114, 190, 87, 220, 88, 191, 7, 254, 57, 190, 252, 139, 10, 62, 254, 49, 184, 62, 239, 108, 254, 190, 61, 72, 20, 189, 234, 216, 163, 190, 166, 95, 23, 191, 70, 71, 125, 61, 44, 98, 114, 190, 20, 70, 252, 188, 98, 27, 26, 62, 100, 86, 170, 188, 66, 252, 61, 189, 42, 118, 162, 190, 126, 180, 128, 62, 248, 27, 100, 191, 162, 146, 226, 189, 169, 191, 26, 190, 44, 138, 47, 62, 59, 242, 223, 190, 198, 249, 101, 62, 202, 1, 230, 190, 231, 33, 172, 190, 241, 230, 159, 190, 96, 209, 59, 190, 244, 117, 222, 61, 75, 154, 137, 190, 202, 108, 86, 62, 125, 93, 25, 60, 139, 112, 5, 62, 111, 145, 189, 190, 38, 9, 227, 61, 54, 22, 26, 61, 192, 111, 212, 190, 75, 144, 165, 190, 198, 252, 129, 62, 85, 114, 194, 60, 254, 189, 65, 188, 10, 71, 54, 62, 172, 134, 38, 61, 129, 0, 155, 61, 173, 253, 16, 62, 37, 125, 14, 190, 113, 8, 128, 62, 85, 142, 246, 190, 249, 124, 42, 62, 208, 210, 246, 189, 224, 88, 200, 57, 249, 167, 6, 62, 107, 218, 113, 61, 100, 228, 12, 188, 45, 154, 248, 189, 81, 105, 44, 190, 227, 144, 156, 189, 53, 124, 232, 189, 90, 25, 54, 62, 142, 33, 133, 190, 209, 113, 5, 59, 23, 244, 157, 60, 118, 11, 139, 62, 116, 224, 53, 62, 114, 43, 250, 187, 2, 128, 180, 189, 119, 48, 193, 61, 140, 98, 59, 62, 232, 50, 235, 61, 147, 17, 81, 62, 201, 63, 71, 191, 26, 56, 38, 189, 5, 250, 184, 190, 70, 30, 89, 191, 115, 33, 16, 62, 229, 113, 119, 190, 220, 18, 113, 61, 226, 98, 214, 61, 43, 73, 187, 62, 145, 255, 159, 189, 156, 225, 88, 190, 248, 82, 98, 62, 3, 141, 135, 191, 45, 20, 80, 62, 251, 174, 7, 191, 235, 204, 81, 61, 153, 66, 39, 190, 60, 136, 141, 62, 25, 189, 23, 191, 52, 7, 67, 191, 194, 136, 4, 187, 105, 33, 135, 190, 93, 148, 109, 62, 190, 54, 4, 190, 54, 252, 55, 62, 88, 31, 64, 62, 47, 12, 156, 61, 16, 255, 191, 190, 130, 22, 162, 189, 176, 179, 25, 190, 215, 20, 115, 60, 252, 58, 94, 189, 170, 254, 38, 189, 153, 43, 156, 189, 106, 67, 243, 188, 9, 95, 219, 60, 0, 188, 26, 61, 80, 167, 190, 61, 251, 208, 225, 189, 61, 165, 215, 61, 36, 199, 31, 190, 149, 140, 181, 189, 114, 114, 24, 61, 90, 126, 116, 190, 215, 204, 229, 60, 189, 221, 249, 188, 98, 82, 60, 189, 55, 245, 24, 190, 238, 171, 168, 189, 173, 153, 229, 189, 194, 231, 31, 190, 195, 28, 110, 61, 30, 95, 197, 61, 151, 41, 198, 189, 215, 2, 63, 190, 177, 143, 67, 190, 164, 12, 61, 61, 130, 148, 77, 190, 233, 47, 237, 189, 221, 130, 195, 189, 5, 240, 207, 60, 59, 174, 30, 62, 162, 189, 223, 58, 202, 209, 149, 189, 67, 25, 237, 62, 155, 32, 17, 63, 151, 207, 62, 188, 61, 106, 156, 62, 150, 5, 15, 63, 144, 174, 236, 190, 14, 235, 89, 62, 47, 108, 88, 188, 231, 247, 150, 189, 80, 18, 157, 189, 28, 244, 34, 191, 126, 112, 225, 189, 123, 239, 143, 62, 25, 68, 166, 189, 250, 72, 243, 190, 241, 54, 159, 188, 82, 194, 160, 189, 169, 232, 20, 190, 247, 53, 165, 189, 82, 50, 39, 62, 170, 139, 153, 190, 98, 220, 58, 190, 144, 109, 82, 189, 202, 57, 142, 62, 148, 39, 234, 61, 109, 206, 202, 62, 148, 105, 164, 61, 196, 11, 223, 190, 209, 246, 230, 62, 222, 23, 221, 188, 109, 131, 137, 62, 13, 247, 135, 62, 131, 173, 247, 60, 41, 201, 239, 190, 208, 51, 37, 62, 100, 210, 62, 188, 119, 103, 25, 190, 7, 43, 107, 189, 12, 234, 158, 62, 15, 9, 19, 190, 90, 222, 248, 61, 0, 145, 24, 63, 6, 232, 139, 189, 252, 55, 225, 190, 188, 90, 137, 187, 73, 27, 206, 189, 68, 202, 225, 188, 49, 30, 8, 190, 70, 15, 20, 61, 21, 61, 130, 189, 96, 236, 20, 62, 180, 83, 16, 189, 75, 183, 131, 190, 152, 194, 13, 62, 146, 228, 147, 189, 79, 20, 219, 190, 0, 219, 1, 190, 144, 221, 30, 61, 156, 101, 115, 191, 201, 232, 181, 189, 209, 28, 146, 190, 232, 48, 12, 190, 152, 235, 186, 60, 152, 244, 238, 189, 245, 231, 32, 190, 65, 212, 254, 188, 193, 34, 45, 190, 221, 15, 235, 188, 118, 195, 4, 190, 34, 189, 60, 188, 145, 71, 13, 62, 34, 4, 27, 189, 37, 214, 0, 61, 114, 100, 71, 187, 175, 235, 157, 61, 244, 192, 16, 190, 25, 20, 41, 190, 74, 59, 244, 189, 142, 233, 40, 62, 94, 18, 248, 61, 228, 234, 140, 188, 161, 130, 105, 189, 63, 123, 213, 189, 129, 168, 146, 61, 72, 168, 134, 59, 250, 217, 153, 188, 113, 140, 84, 190, 228, 24, 227, 188, 41, 26, 85, 190, 132, 197, 15, 61, 122, 124, 177, 61, 3, 230, 172, 189, 121, 236, 104, 61, 238, 238, 199, 61, 51, 221, 40, 62, 89, 4, 1, 63, 172, 235, 211, 189, 224, 113, 70, 190, 21, 56, 134, 190, 151, 199, 184, 188, 194, 99, 165, 62, 20, 64, 146, 190, 169, 48, 170, 62, 237, 141, 152, 189, 5, 251, 152, 62, 234, 188, 151, 60, 249, 137, 138, 190, 99, 110, 11, 61, 213, 118, 115, 61, 253, 233, 250, 60, 87, 133, 20, 62, 184, 78, 22, 61, 175, 130, 114, 190, 167, 31, 116, 62, 42, 117, 68, 189, 20, 177, 166, 62, 157, 101, 170, 189, 29, 152, 132, 190, 122, 199, 59, 62, 85, 71, 68, 61, 244, 143, 123, 62, 177, 81, 243, 190, 172, 147, 148, 190, 153, 164, 103, 191, 178, 102, 104, 190, 71, 12, 155, 189, 91, 3, 0, 190, 122, 181, 182, 190, 183, 120, 21, 190, 129, 4, 3, 62, 185, 79, 167, 189, 201, 110, 2, 62, 102, 122, 51, 60, 63, 153, 250, 61, 69, 136, 214, 61, 215, 29, 200, 60, 46, 86, 180, 190, 72, 148, 11, 190, 67, 23, 222, 61, 76, 95, 228, 61, 194, 235, 207, 61, 22, 81, 165, 189, 184, 136, 178, 189, 93, 64, 71, 189, 253, 12, 43, 61, 79, 148, 133, 62, 35, 135, 162, 61, 118, 13, 246, 189, 129, 12, 217, 189, 189, 29, 135, 188, 224, 41, 160, 60, 46, 132, 250, 190, 233, 0, 4, 62, 194, 159, 149, 188, 165, 64, 151, 189, 165, 72, 168, 190, 77, 212, 26, 190, 160, 188, 38, 190, 70, 58, 127, 189, 52, 100, 74, 190, 28, 112, 234, 61, 124, 234, 12, 191, 67, 63, 37, 62, 10, 236, 22, 190, 92, 146, 108, 190, 9, 242, 29, 189, 161, 156, 42, 190, 12, 141, 149, 61, 221, 50, 168, 62, 11, 242, 74, 190, 176, 246, 17, 62, 144, 47, 89, 191, 84, 207, 172, 61, 223, 45, 51, 62, 127, 195, 228, 190, 163, 134, 157, 188, 152, 244, 40, 61, 97, 86, 54, 191, 8, 125, 74, 189, 166, 246, 170, 189, 225, 142, 92, 62, 197, 215, 219, 62, 147, 176, 174, 190, 52, 5, 55, 62, 35, 233, 7, 191, 24, 124, 174, 189, 25, 233, 142, 190, 152, 248, 3, 63, 48, 47, 13, 185, 219, 229, 225, 60, 61, 249, 40, 189, 130, 241, 69, 189, 250, 188, 174, 61, 80, 59, 122, 62, 138, 57, 13, 190, 85, 247, 142, 189, 79, 97, 199, 189, 189, 108, 76, 189, 214, 191, 159, 62, 146, 24, 58, 62, 49, 119, 137, 62, 247, 223, 24, 191, 210, 42, 54, 188, 108, 218, 189, 190, 52, 88, 9, 189, 178, 184, 107, 62, 43, 252, 139, 190, 81, 39, 21, 62, 248, 67, 22, 58, 6, 116, 13, 60, 174, 168, 9, 62, 102, 235, 86, 190, 250, 178, 185, 62, 120, 151, 185, 190, 167, 156, 14, 189, 139, 139, 14, 62, 33, 41, 216, 61, 129, 138, 178, 61, 203, 178, 162, 189, 62, 149, 89, 190, 54, 32, 23, 190, 188, 58, 90, 62, 231, 150, 18, 189, 76, 235, 40, 188, 115, 76, 123, 62, 235, 2, 10, 190, 46, 255, 141, 189, 151, 175, 22, 62, 197, 216, 96, 191, 190, 77, 204, 186, 180, 201, 212, 189, 140, 191, 240, 190, 217, 92, 172, 61, 102, 114, 5, 191, 112, 198, 212, 187, 117, 142, 79, 189, 63, 189, 69, 61, 84, 173, 137, 190, 99, 223, 44, 62, 164, 127, 201, 189, 219, 216, 183, 190, 2, 83, 15, 190, 40, 133, 221, 62, 16, 210, 169, 61, 17, 217, 226, 61, 206, 254, 182, 59, 200, 252, 248, 189, 0, 29, 12, 61, 142, 23, 18, 61, 230, 161, 157, 190, 184, 183, 103, 190, 228, 226, 195, 61, 91, 114, 109, 189, 94, 0, 184, 187, 165, 77, 212, 190, 238, 33, 15, 191, 145, 176, 122, 62, 107, 60, 19, 190, 233, 196, 41, 59, 42, 9, 22, 62, 70, 38, 8, 191, 172, 175, 131, 190, 225, 10, 67, 189, 156, 253, 225, 190, 27, 250, 27, 62, 98, 105, 133, 190, 47, 20, 33, 189, 119, 101, 18, 61, 219, 135, 21, 62, 184, 218, 115, 190, 204, 65, 224, 61, 9, 147, 170, 190, 119, 139, 80, 61, 111, 63, 157, 61, 181, 242, 58, 190, 243, 194, 177, 62, 15, 0, 16, 62, 170, 39, 26, 62, 170, 99, 114, 189, 200, 78, 61, 62, 64, 124, 155, 60, 215, 247, 230, 61, 51, 172, 118, 61, 201, 86, 13, 62, 59, 144, 101, 189, 45, 214, 214, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 56, 62, 61, 93, 115, 142, 189, 22, 115, 2, 187, 94, 186, 88, 62, 63, 142, 20, 62, 34, 4, 220, 189, 87, 181, 221, 60, 251, 55, 65, 62, 221, 250, 92, 189, 98, 21, 157, 60, 231, 26, 167, 62, 248, 249, 117, 60, 62, 27, 124, 62, 181, 68, 207, 61, 23, 218, 40, 190, 138, 215, 23, 190, 229, 97, 87, 62, 154, 170, 128, 62, 18, 6, 216, 61, 8, 50, 230, 189, 132, 131, 90, 62, 143, 214, 244, 61, 235, 248, 126, 190, 76, 141, 16, 189, 229, 1, 205, 190, 163, 94, 236, 188, 35, 161, 92, 62, 234, 142, 126, 61, 147, 224, 192, 190, 2, 175, 191, 189, 10, 63, 21, 62, 135, 10, 178, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 110, 125, 190, 172, 142, 156, 61, 87, 106, 15, 62, 157, 70, 163, 61, 134, 143, 115, 61, 24, 20, 160, 188, 52, 241, 20, 190, 200, 180, 18, 191, 94, 175, 34, 62, 84, 173, 21, 62, 227, 119, 133, 63, 214, 174, 76, 63, 224, 237, 204, 59, 119, 166, 235, 61, 241, 196, 40, 62, 227, 112, 79, 190, 179, 104, 244, 62, 90, 80, 27, 63, 232, 182, 249, 190, 143, 231, 50, 191, 180, 108, 204, 61, 254, 135, 63, 191, 15, 92, 206, 60, 215, 156, 43, 191, 252, 117, 187, 190, 45, 53, 32, 190, 2, 118, 214, 190, 159, 131, 197, 59, 46, 132, 233, 190, 232, 12, 218, 61, 188, 149, 209, 60, 152, 174, 145, 62, 163, 84, 84, 190, 168, 117, 156, 190, 122, 106, 39, 190, 193, 194, 204, 189, 39, 148, 73, 190, 104, 36, 207, 189, 136, 66, 228, 61, 222, 152, 208, 62, 135, 215, 250, 62, 189, 103, 72, 62, 252, 150, 128, 61, 76, 37, 200, 61, 165, 170, 68, 190, 81, 41, 133, 189, 68, 183, 54, 62, 127, 54, 214, 59, 168, 6, 131, 190, 77, 108, 111, 61, 79, 53, 41, 190, 70, 218, 153, 62, 44, 10, 86, 190, 180, 56, 83, 190, 15, 221, 79, 61, 234, 24, 220, 61, 225, 71, 81, 63, 161, 183, 195, 60, 133, 90, 185, 189, 92, 241, 151, 190, 205, 17, 161, 62, 211, 25, 149, 190, 111, 82, 179, 190, 180, 200, 67, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {19, 60, 188, 61, 15, 116, 184, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {26, 18, 254, 190, 72, 252, 171, 190, 94, 215, 13, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 89, 161, 190, 150, 175, 138, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0062/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}