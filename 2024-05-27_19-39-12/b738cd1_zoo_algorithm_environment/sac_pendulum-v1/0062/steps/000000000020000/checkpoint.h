// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 11, 226, 189, 140, 41, 50, 63, 132, 234, 221, 62, 185, 216, 36, 63, 206, 81, 136, 63, 180, 204, 166, 62, 205, 91, 57, 63, 170, 38, 141, 191, 101, 28, 243, 62, 89, 171, 122, 191, 43, 90, 55, 191, 41, 27, 109, 188, 244, 100, 101, 189, 197, 90, 132, 191, 63, 198, 134, 190, 150, 103, 147, 61, 16, 100, 170, 189, 191, 65, 203, 62, 72, 11, 47, 191, 5, 213, 82, 63, 39, 184, 76, 191, 245, 22, 235, 190, 15, 134, 139, 189, 191, 56, 49, 191, 192, 104, 116, 63, 11, 182, 32, 61, 37, 82, 72, 62, 239, 127, 82, 61, 181, 179, 10, 191, 195, 20, 97, 191, 149, 8, 151, 63, 98, 64, 234, 61, 162, 98, 5, 190, 252, 57, 38, 63, 157, 32, 12, 63, 49, 96, 135, 62, 63, 84, 206, 190, 87, 181, 141, 190, 71, 23, 31, 191, 238, 191, 210, 190, 206, 54, 75, 63, 254, 21, 7, 61, 111, 199, 214, 62, 29, 158, 201, 189, 29, 124, 19, 63, 232, 19, 0, 190, 105, 138, 71, 191, 31, 238, 84, 191, 142, 232, 131, 190, 97, 184, 151, 63, 18, 122, 200, 61, 7, 209, 76, 189, 121, 9, 130, 191, 210, 0, 195, 190, 58, 106, 130, 189, 165, 177, 73, 191, 224, 24, 115, 190, 107, 13, 135, 191, 37, 83, 108, 63, 247, 45, 170, 190, 39, 6, 194, 62, 180, 138, 135, 63, 120, 131, 215, 190, 199, 133, 207, 62, 17, 205, 139, 63, 245, 104, 157, 62, 212, 61, 255, 62, 163, 248, 170, 190, 110, 21, 1, 191, 183, 176, 21, 63, 181, 214, 37, 191, 85, 13, 138, 190, 182, 220, 73, 191, 62, 102, 51, 63, 51, 13, 246, 190, 65, 78, 217, 60, 185, 132, 132, 191, 136, 112, 180, 189, 221, 140, 121, 191, 255, 51, 48, 59, 7, 158, 214, 190, 77, 153, 38, 191, 226, 95, 61, 191, 124, 117, 86, 190, 194, 149, 56, 191, 148, 111, 32, 189, 201, 19, 215, 189, 25, 25, 80, 61, 114, 14, 180, 191, 89, 164, 170, 190, 102, 33, 72, 191, 112, 219, 53, 191, 137, 187, 138, 189, 68, 57, 33, 61, 20, 138, 142, 191, 209, 230, 166, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 65, 60, 191, 221, 34, 5, 190, 170, 136, 186, 62, 248, 63, 4, 62, 122, 10, 174, 190, 19, 67, 147, 190, 197, 83, 1, 191, 233, 7, 253, 190, 231, 76, 198, 190, 166, 91, 180, 62, 247, 108, 210, 189, 11, 216, 44, 191, 174, 238, 143, 190, 116, 221, 223, 62, 101, 169, 111, 187, 241, 249, 234, 62, 153, 133, 16, 191, 118, 165, 224, 62, 253, 219, 135, 190, 112, 193, 120, 190, 155, 206, 245, 189, 42, 2, 17, 62, 169, 138, 16, 63, 237, 57, 44, 191, 12, 137, 150, 62, 7, 183, 221, 62, 64, 221, 160, 62, 111, 214, 228, 62, 42, 74, 57, 63, 158, 123, 131, 190, 171, 206, 3, 63, 12, 16, 204, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 104, 89, 190, 223, 106, 150, 61, 119, 255, 178, 190, 56, 112, 29, 187, 169, 223, 233, 189, 143, 3, 149, 191, 241, 82, 37, 190, 103, 65, 141, 190, 146, 111, 89, 191, 83, 40, 202, 61, 130, 135, 92, 62, 171, 167, 9, 190, 247, 213, 187, 190, 45, 83, 177, 189, 76, 14, 178, 190, 133, 151, 246, 61, 190, 20, 207, 190, 193, 240, 48, 62, 20, 249, 106, 190, 40, 21, 163, 60, 67, 63, 201, 190, 134, 129, 109, 191, 157, 97, 44, 190, 165, 79, 161, 190, 195, 179, 13, 61, 118, 15, 174, 61, 157, 88, 77, 61, 244, 18, 146, 62, 0, 83, 183, 189, 64, 101, 6, 191, 251, 28, 53, 62, 46, 168, 3, 62, 232, 246, 43, 191, 102, 99, 242, 61, 56, 64, 193, 61, 126, 35, 132, 61, 240, 150, 18, 190, 109, 196, 44, 190, 137, 239, 180, 190, 109, 185, 26, 190, 169, 242, 130, 62, 133, 1, 221, 61, 84, 108, 219, 62, 53, 224, 132, 191, 236, 41, 59, 190, 36, 84, 1, 192, 96, 208, 131, 189, 144, 204, 17, 62, 235, 190, 76, 190, 248, 61, 81, 62, 214, 39, 170, 190, 111, 85, 131, 190, 239, 106, 249, 190, 28, 20, 21, 189, 186, 196, 112, 61, 117, 43, 7, 191, 237, 243, 76, 190, 59, 202, 160, 61, 14, 42, 218, 61, 123, 221, 183, 189, 20, 45, 39, 189, 173, 43, 74, 189, 52, 182, 170, 61, 156, 184, 125, 62, 80, 66, 18, 190, 35, 188, 5, 62, 144, 199, 160, 61, 64, 9, 86, 61, 136, 92, 19, 62, 36, 226, 8, 189, 116, 248, 188, 189, 7, 118, 227, 189, 64, 170, 8, 190, 242, 132, 22, 188, 89, 22, 232, 189, 78, 14, 243, 61, 118, 99, 43, 189, 222, 166, 170, 188, 116, 20, 36, 190, 6, 114, 4, 190, 46, 12, 231, 189, 199, 40, 245, 60, 106, 50, 29, 62, 255, 19, 150, 61, 67, 81, 22, 190, 187, 125, 34, 189, 96, 25, 75, 189, 244, 196, 158, 61, 9, 72, 4, 190, 13, 143, 102, 61, 205, 241, 31, 190, 120, 50, 29, 190, 33, 39, 42, 190, 252, 106, 238, 61, 169, 46, 130, 61, 217, 83, 94, 190, 149, 149, 155, 190, 95, 12, 169, 190, 8, 18, 182, 61, 12, 182, 1, 190, 200, 255, 243, 190, 89, 90, 106, 61, 162, 26, 12, 190, 6, 34, 128, 190, 250, 193, 223, 60, 50, 178, 20, 189, 112, 125, 183, 62, 183, 7, 114, 191, 147, 1, 171, 189, 104, 87, 143, 190, 153, 8, 189, 189, 55, 139, 54, 62, 26, 25, 11, 191, 184, 30, 210, 189, 210, 160, 247, 188, 163, 25, 143, 62, 21, 99, 180, 62, 112, 248, 154, 189, 11, 124, 80, 62, 235, 19, 80, 191, 120, 165, 115, 62, 143, 44, 26, 62, 52, 12, 106, 61, 126, 240, 128, 189, 105, 71, 79, 62, 234, 104, 231, 189, 114, 183, 43, 62, 17, 165, 73, 62, 134, 38, 44, 190, 179, 244, 190, 189, 79, 236, 104, 61, 199, 174, 200, 61, 8, 171, 12, 190, 158, 195, 2, 62, 179, 36, 42, 190, 62, 101, 135, 190, 144, 156, 136, 189, 96, 86, 230, 61, 31, 186, 140, 61, 62, 190, 14, 191, 241, 79, 27, 61, 202, 64, 33, 190, 140, 44, 116, 62, 106, 113, 207, 61, 18, 64, 193, 189, 240, 107, 164, 189, 166, 156, 65, 189, 200, 192, 129, 190, 123, 86, 219, 61, 148, 158, 68, 190, 80, 17, 96, 62, 29, 154, 224, 190, 81, 196, 133, 60, 148, 236, 153, 61, 121, 184, 59, 190, 31, 102, 165, 61, 35, 22, 118, 189, 7, 220, 197, 190, 243, 185, 135, 62, 56, 77, 133, 189, 113, 241, 156, 61, 46, 63, 12, 189, 137, 200, 233, 61, 152, 179, 47, 62, 162, 22, 245, 61, 11, 127, 27, 190, 6, 109, 244, 61, 71, 229, 251, 188, 103, 217, 231, 189, 1, 9, 8, 62, 216, 128, 161, 60, 43, 223, 135, 61, 66, 191, 157, 189, 123, 112, 26, 190, 117, 151, 20, 190, 126, 229, 49, 189, 223, 244, 37, 190, 126, 100, 4, 190, 227, 218, 11, 62, 233, 139, 41, 190, 24, 91, 188, 61, 105, 67, 153, 189, 64, 184, 52, 190, 71, 87, 231, 189, 233, 66, 156, 60, 195, 104, 221, 189, 178, 66, 205, 189, 7, 239, 26, 190, 76, 8, 129, 60, 44, 172, 17, 62, 52, 191, 209, 59, 249, 22, 149, 189, 102, 95, 34, 190, 193, 173, 73, 61, 91, 25, 1, 190, 214, 173, 139, 189, 98, 129, 126, 189, 203, 86, 188, 61, 215, 147, 251, 189, 209, 78, 46, 62, 141, 253, 192, 188, 104, 62, 10, 61, 43, 227, 27, 62, 240, 87, 149, 189, 133, 248, 51, 62, 83, 152, 128, 189, 132, 13, 21, 61, 241, 175, 48, 189, 107, 168, 17, 62, 200, 176, 4, 189, 123, 19, 225, 59, 220, 90, 44, 190, 246, 76, 195, 189, 22, 5, 175, 189, 120, 91, 50, 190, 90, 39, 232, 60, 246, 132, 111, 61, 159, 156, 133, 189, 167, 150, 249, 189, 210, 170, 253, 189, 10, 227, 17, 188, 99, 126, 205, 189, 19, 112, 104, 61, 180, 197, 6, 190, 196, 26, 140, 62, 176, 183, 232, 62, 223, 177, 126, 191, 52, 245, 88, 62, 47, 91, 154, 190, 34, 169, 231, 190, 124, 47, 180, 61, 83, 150, 146, 190, 85, 141, 181, 190, 119, 18, 242, 187, 145, 156, 111, 62, 134, 224, 83, 61, 210, 254, 133, 190, 12, 241, 26, 189, 34, 23, 55, 191, 156, 244, 246, 61, 247, 67, 86, 190, 114, 13, 50, 62, 196, 74, 117, 190, 228, 24, 33, 190, 103, 232, 61, 191, 5, 151, 29, 191, 171, 77, 94, 190, 152, 253, 168, 190, 157, 66, 51, 62, 40, 255, 141, 188, 217, 5, 157, 59, 120, 27, 185, 189, 90, 7, 210, 187, 149, 221, 98, 190, 251, 193, 200, 60, 76, 239, 107, 57, 187, 156, 194, 189, 240, 255, 24, 62, 180, 168, 137, 60, 199, 243, 141, 191, 6, 190, 82, 190, 63, 155, 104, 189, 197, 132, 12, 63, 201, 159, 3, 62, 166, 128, 82, 62, 28, 218, 35, 60, 100, 35, 174, 61, 7, 150, 188, 62, 91, 196, 60, 62, 184, 67, 120, 189, 135, 77, 138, 189, 67, 114, 174, 190, 142, 169, 183, 187, 47, 55, 210, 190, 178, 210, 205, 61, 227, 67, 159, 62, 37, 169, 169, 62, 133, 152, 252, 61, 64, 53, 89, 60, 12, 172, 155, 189, 159, 56, 63, 189, 30, 71, 72, 189, 111, 197, 35, 190, 22, 232, 189, 60, 177, 224, 25, 190, 204, 207, 184, 189, 214, 246, 28, 61, 207, 155, 139, 188, 166, 81, 200, 190, 172, 84, 190, 190, 166, 86, 137, 62, 249, 141, 132, 190, 155, 15, 55, 191, 58, 9, 241, 61, 179, 125, 235, 62, 99, 251, 215, 61, 111, 94, 183, 190, 26, 226, 200, 190, 42, 140, 110, 62, 3, 10, 86, 190, 20, 234, 78, 62, 116, 250, 90, 59, 104, 3, 227, 188, 192, 149, 238, 190, 71, 23, 36, 62, 104, 174, 223, 190, 64, 226, 89, 191, 198, 9, 198, 62, 55, 116, 78, 190, 67, 150, 20, 188, 102, 209, 180, 189, 218, 180, 162, 189, 175, 100, 153, 60, 197, 235, 147, 62, 24, 82, 32, 61, 255, 19, 252, 61, 127, 71, 169, 60, 215, 176, 103, 63, 115, 136, 28, 61, 171, 49, 150, 62, 129, 79, 132, 61, 5, 224, 238, 189, 52, 181, 248, 60, 159, 188, 27, 62, 147, 89, 219, 61, 152, 165, 72, 62, 25, 195, 27, 191, 117, 191, 51, 63, 81, 221, 6, 191, 187, 59, 37, 191, 47, 50, 143, 189, 158, 77, 3, 61, 56, 62, 247, 62, 89, 68, 127, 62, 102, 235, 41, 189, 241, 102, 184, 191, 13, 4, 244, 61, 102, 146, 15, 192, 110, 244, 43, 61, 166, 203, 72, 190, 51, 125, 39, 189, 80, 150, 188, 62, 69, 190, 239, 190, 134, 16, 149, 61, 96, 142, 81, 190, 235, 48, 176, 190, 25, 213, 171, 190, 28, 77, 148, 62, 7, 237, 149, 62, 18, 42, 218, 62, 71, 172, 250, 61, 96, 160, 35, 191, 49, 166, 26, 190, 214, 15, 26, 188, 68, 246, 1, 62, 194, 233, 3, 62, 58, 109, 179, 62, 215, 186, 96, 62, 224, 44, 173, 191, 195, 75, 178, 62, 213, 34, 141, 189, 148, 16, 137, 191, 213, 140, 69, 190, 177, 168, 207, 61, 211, 183, 128, 62, 159, 44, 175, 60, 124, 37, 67, 62, 59, 176, 139, 191, 222, 179, 69, 189, 38, 243, 83, 191, 32, 119, 3, 63, 197, 149, 176, 190, 112, 242, 215, 190, 94, 245, 114, 189, 214, 184, 140, 62, 43, 50, 140, 60, 81, 228, 237, 190, 23, 70, 18, 62, 7, 241, 171, 190, 243, 81, 42, 62, 56, 51, 131, 62, 36, 184, 68, 63, 141, 117, 67, 62, 5, 200, 173, 190, 230, 87, 156, 61, 102, 195, 32, 62, 36, 157, 235, 61, 236, 57, 17, 189, 194, 166, 120, 190, 246, 54, 122, 60, 91, 200, 49, 190, 15, 125, 168, 190, 195, 36, 97, 61, 242, 240, 152, 61, 178, 166, 177, 189, 157, 213, 180, 190, 110, 0, 126, 190, 119, 73, 21, 190, 85, 104, 58, 190, 15, 197, 136, 61, 136, 188, 76, 61, 35, 12, 43, 190, 208, 253, 182, 190, 77, 208, 192, 62, 42, 4, 76, 190, 216, 116, 65, 62, 181, 201, 85, 190, 164, 188, 227, 190, 85, 147, 175, 61, 172, 81, 255, 61, 128, 163, 137, 189, 69, 74, 159, 190, 50, 48, 151, 189, 242, 193, 155, 191, 229, 108, 249, 61, 229, 90, 135, 62, 61, 164, 68, 190, 178, 170, 248, 190, 129, 187, 22, 62, 168, 62, 169, 59, 215, 163, 49, 190, 39, 129, 29, 62, 174, 103, 181, 61, 162, 134, 81, 61, 84, 136, 212, 189, 143, 252, 149, 189, 166, 203, 102, 61, 5, 43, 221, 190, 146, 147, 142, 189, 8, 26, 63, 61, 214, 40, 113, 62, 196, 162, 51, 190, 236, 229, 32, 60, 27, 167, 156, 60, 58, 192, 187, 189, 143, 183, 54, 190, 201, 146, 9, 63, 223, 70, 29, 189, 125, 14, 168, 62, 70, 11, 94, 60, 87, 174, 111, 62, 116, 103, 91, 61, 173, 104, 83, 59, 164, 93, 65, 190, 170, 64, 242, 189, 90, 126, 86, 190, 190, 16, 210, 59, 215, 109, 20, 190, 251, 163, 189, 190, 202, 84, 58, 191, 58, 185, 28, 61, 218, 240, 189, 190, 80, 241, 224, 188, 178, 210, 142, 62, 53, 152, 99, 188, 51, 208, 206, 59, 8, 176, 145, 189, 39, 194, 174, 61, 218, 7, 32, 63, 121, 226, 70, 61, 50, 172, 171, 189, 146, 220, 117, 189, 232, 36, 100, 62, 114, 138, 171, 189, 203, 141, 85, 190, 180, 85, 83, 189, 252, 17, 110, 61, 151, 233, 5, 191, 195, 243, 102, 62, 67, 193, 90, 190, 82, 162, 22, 190, 163, 24, 237, 62, 13, 193, 39, 62, 179, 43, 45, 62, 207, 31, 157, 189, 211, 194, 120, 61, 15, 175, 214, 187, 95, 145, 155, 62, 176, 244, 85, 60, 225, 187, 1, 190, 8, 118, 111, 62, 133, 124, 252, 61, 50, 72, 88, 190, 115, 25, 75, 191, 88, 2, 119, 190, 110, 48, 140, 61, 46, 248, 185, 62, 195, 108, 187, 61, 44, 180, 194, 190, 33, 70, 131, 190, 87, 206, 131, 62, 59, 181, 56, 190, 122, 244, 160, 188, 18, 228, 96, 62, 35, 127, 119, 188, 144, 224, 199, 190, 161, 87, 162, 62, 78, 61, 161, 190, 123, 185, 160, 190, 187, 170, 82, 63, 229, 60, 145, 190, 1, 23, 24, 190, 164, 128, 69, 188, 88, 95, 44, 191, 115, 101, 219, 62, 71, 128, 188, 190, 63, 42, 27, 63, 153, 42, 177, 190, 44, 226, 22, 62, 47, 248, 233, 190, 126, 160, 21, 191, 47, 4, 40, 191, 13, 203, 42, 190, 143, 201, 145, 190, 71, 103, 178, 62, 27, 20, 140, 188, 120, 77, 83, 191, 185, 178, 68, 61, 223, 119, 109, 191, 39, 83, 150, 59, 51, 125, 62, 190, 191, 242, 220, 190, 68, 124, 10, 62, 236, 126, 75, 190, 78, 227, 15, 62, 10, 203, 136, 190, 234, 157, 141, 62, 189, 123, 107, 190, 63, 79, 169, 62, 36, 129, 230, 190, 72, 192, 190, 190, 68, 227, 60, 190, 143, 163, 133, 191, 45, 246, 105, 62, 173, 112, 153, 61, 249, 96, 165, 62, 220, 142, 235, 190, 151, 44, 211, 61, 175, 92, 204, 190, 70, 10, 30, 62, 83, 228, 29, 190, 144, 43, 126, 62, 46, 208, 146, 61, 141, 166, 167, 61, 16, 98, 246, 189, 220, 232, 174, 190, 71, 182, 90, 62, 75, 228, 36, 190, 119, 51, 37, 191, 214, 24, 19, 190, 157, 121, 7, 191, 86, 85, 31, 191, 179, 252, 2, 62, 148, 137, 122, 61, 78, 226, 240, 62, 231, 31, 20, 190, 187, 87, 196, 190, 250, 207, 31, 191, 112, 34, 177, 189, 220, 173, 202, 61, 171, 155, 60, 190, 228, 97, 220, 189, 100, 9, 16, 191, 238, 37, 67, 62, 82, 174, 10, 63, 0, 5, 220, 60, 122, 254, 151, 62, 122, 76, 73, 191, 113, 105, 151, 62, 248, 63, 183, 62, 108, 121, 121, 190, 177, 145, 45, 62, 50, 46, 3, 62, 107, 233, 51, 188, 102, 134, 98, 62, 249, 178, 241, 62, 178, 62, 33, 62, 217, 74, 246, 62, 83, 86, 122, 62, 247, 4, 47, 191, 83, 41, 212, 189, 113, 165, 225, 189, 50, 10, 48, 62, 192, 189, 100, 62, 14, 234, 221, 62, 20, 228, 160, 190, 193, 156, 155, 62, 241, 117, 27, 190, 52, 30, 29, 62, 9, 242, 230, 189, 210, 95, 112, 62, 198, 135, 71, 190, 110, 79, 158, 61, 67, 130, 196, 188, 65, 99, 143, 62, 230, 122, 50, 63, 212, 172, 2, 62, 32, 4, 77, 61, 32, 127, 163, 61, 130, 188, 236, 190, 180, 109, 148, 62, 62, 70, 43, 190, 59, 234, 194, 187, 200, 199, 168, 191, 229, 181, 239, 190, 108, 122, 81, 191, 177, 66, 130, 191, 199, 219, 138, 190, 6, 53, 9, 63, 188, 175, 140, 62, 79, 73, 236, 189, 196, 200, 74, 61, 232, 75, 221, 190, 93, 196, 250, 189, 215, 199, 232, 189, 199, 195, 169, 190, 130, 18, 242, 189, 52, 180, 30, 187, 133, 194, 173, 190, 23, 113, 4, 191, 253, 250, 216, 190, 26, 83, 170, 62, 150, 20, 0, 191, 162, 231, 138, 190, 15, 145, 240, 60, 56, 101, 29, 61, 251, 99, 234, 190, 123, 131, 78, 62, 80, 228, 43, 191, 65, 21, 168, 190, 254, 5, 247, 190, 182, 106, 142, 190, 151, 129, 184, 60, 89, 182, 222, 190, 192, 201, 140, 61, 237, 200, 193, 189, 223, 255, 101, 62, 184, 141, 22, 191, 61, 10, 139, 62, 109, 194, 22, 190, 42, 210, 184, 190, 106, 75, 220, 190, 80, 241, 115, 62, 23, 172, 182, 61, 156, 160, 37, 189, 141, 52, 82, 62, 72, 27, 154, 60, 222, 0, 32, 61, 159, 243, 185, 61, 145, 43, 28, 190, 175, 72, 142, 62, 66, 21, 141, 191, 161, 202, 19, 62, 129, 103, 188, 190, 239, 82, 103, 59, 163, 172, 232, 61, 202, 124, 11, 191, 30, 182, 220, 188, 45, 161, 17, 190, 43, 19, 75, 190, 244, 53, 32, 190, 168, 220, 43, 190, 245, 79, 57, 62, 133, 124, 144, 190, 206, 85, 148, 188, 73, 56, 136, 188, 206, 223, 125, 62, 85, 34, 7, 62, 185, 55, 160, 188, 104, 5, 43, 190, 184, 197, 4, 62, 71, 43, 71, 62, 101, 149, 195, 61, 148, 218, 140, 62, 182, 110, 73, 191, 169, 0, 72, 189, 60, 147, 180, 190, 253, 117, 66, 191, 247, 223, 62, 62, 99, 249, 56, 190, 8, 21, 76, 190, 208, 226, 247, 61, 203, 185, 6, 61, 145, 255, 159, 189, 126, 130, 34, 190, 245, 46, 142, 62, 30, 5, 143, 191, 128, 194, 87, 62, 82, 206, 241, 190, 124, 192, 5, 61, 101, 193, 27, 190, 216, 40, 177, 62, 59, 59, 2, 191, 232, 20, 93, 191, 193, 116, 37, 188, 39, 185, 118, 190, 238, 29, 133, 62, 42, 71, 92, 190, 21, 212, 91, 62, 159, 223, 67, 62, 20, 133, 194, 61, 48, 116, 190, 190, 240, 30, 179, 189, 125, 57, 45, 190, 215, 20, 115, 60, 252, 58, 94, 189, 170, 254, 38, 189, 153, 43, 156, 189, 106, 67, 243, 188, 9, 95, 219, 60, 0, 188, 26, 61, 80, 167, 190, 61, 251, 208, 225, 189, 61, 165, 215, 61, 36, 199, 31, 190, 149, 140, 181, 189, 114, 114, 24, 61, 90, 126, 116, 190, 215, 204, 229, 60, 189, 221, 249, 188, 98, 82, 60, 189, 55, 245, 24, 190, 238, 171, 168, 189, 173, 153, 229, 189, 194, 231, 31, 190, 195, 28, 110, 61, 30, 95, 197, 61, 151, 41, 198, 189, 215, 2, 63, 190, 177, 143, 67, 190, 164, 12, 61, 61, 130, 148, 77, 190, 233, 47, 237, 189, 221, 130, 195, 189, 5, 240, 207, 60, 59, 174, 30, 62, 35, 4, 129, 188, 192, 166, 96, 188, 192, 143, 248, 62, 210, 130, 26, 63, 233, 208, 72, 62, 112, 27, 157, 62, 186, 179, 183, 62, 232, 109, 244, 190, 118, 85, 135, 62, 69, 135, 177, 60, 110, 209, 215, 188, 56, 236, 142, 189, 191, 20, 35, 191, 129, 134, 210, 188, 203, 62, 145, 62, 225, 76, 180, 188, 65, 239, 1, 191, 93, 48, 173, 61, 180, 209, 29, 61, 223, 89, 232, 190, 130, 251, 49, 189, 220, 73, 97, 62, 133, 136, 124, 190, 1, 193, 176, 61, 61, 209, 30, 190, 249, 210, 189, 62, 117, 171, 47, 61, 93, 132, 206, 62, 230, 28, 247, 61, 85, 176, 141, 190, 130, 147, 0, 63, 89, 214, 2, 61, 223, 200, 161, 62, 215, 12, 126, 62, 135, 116, 59, 62, 53, 54, 144, 190, 123, 10, 8, 62, 101, 126, 11, 62, 57, 14, 33, 190, 102, 136, 191, 60, 60, 107, 211, 62, 0, 173, 134, 190, 159, 82, 70, 62, 178, 95, 25, 63, 226, 135, 160, 187, 205, 227, 243, 190, 48, 100, 216, 61, 94, 209, 58, 190, 23, 74, 28, 189, 82, 121, 137, 190, 58, 87, 21, 60, 43, 108, 199, 186, 112, 33, 226, 62, 86, 34, 198, 188, 212, 42, 180, 190, 47, 239, 231, 61, 58, 119, 27, 63, 43, 18, 128, 190, 107, 127, 220, 188, 146, 204, 235, 190, 138, 218, 95, 191, 87, 43, 172, 189, 143, 164, 13, 191, 240, 244, 34, 191, 152, 235, 186, 60, 152, 244, 238, 189, 245, 231, 32, 190, 65, 212, 254, 188, 193, 34, 45, 190, 221, 15, 235, 188, 118, 195, 4, 190, 34, 189, 60, 188, 145, 71, 13, 62, 34, 4, 27, 189, 37, 214, 0, 61, 114, 100, 71, 187, 175, 235, 157, 61, 244, 192, 16, 190, 25, 20, 41, 190, 74, 59, 244, 189, 142, 233, 40, 62, 94, 18, 248, 61, 228, 234, 140, 188, 161, 130, 105, 189, 63, 123, 213, 189, 129, 168, 146, 61, 72, 168, 134, 59, 250, 217, 153, 188, 113, 140, 84, 190, 228, 24, 227, 188, 41, 26, 85, 190, 132, 197, 15, 61, 122, 124, 177, 61, 3, 230, 172, 189, 121, 236, 104, 61, 238, 238, 199, 61, 56, 200, 248, 61, 120, 148, 247, 62, 51, 15, 132, 189, 142, 165, 169, 190, 96, 219, 171, 190, 244, 221, 30, 189, 104, 172, 199, 62, 200, 176, 206, 189, 139, 85, 244, 62, 147, 20, 47, 190, 46, 188, 151, 62, 180, 127, 255, 60, 132, 60, 218, 189, 242, 133, 180, 59, 8, 105, 131, 61, 6, 49, 166, 188, 60, 187, 135, 61, 224, 137, 137, 61, 125, 231, 103, 190, 90, 77, 241, 62, 201, 189, 81, 60, 169, 23, 156, 62, 72, 244, 44, 190, 203, 188, 15, 191, 57, 75, 112, 62, 139, 11, 209, 61, 29, 224, 230, 62, 203, 137, 73, 191, 207, 153, 254, 190, 123, 191, 184, 191, 90, 179, 181, 190, 20, 29, 13, 190, 57, 91, 21, 190, 91, 12, 112, 189, 195, 151, 224, 190, 97, 14, 209, 189, 126, 137, 23, 61, 7, 155, 196, 189, 80, 129, 131, 60, 218, 67, 48, 62, 225, 236, 32, 61, 108, 43, 61, 60, 93, 226, 148, 191, 228, 186, 68, 190, 198, 230, 25, 62, 69, 14, 131, 62, 64, 83, 5, 62, 47, 25, 190, 189, 112, 197, 179, 61, 172, 150, 103, 189, 123, 77, 249, 61, 3, 120, 178, 62, 88, 118, 222, 61, 159, 123, 37, 62, 217, 63, 70, 190, 225, 220, 192, 61, 8, 149, 117, 61, 132, 143, 158, 191, 134, 78, 34, 62, 97, 248, 224, 60, 33, 20, 248, 187, 73, 89, 210, 190, 174, 193, 51, 190, 79, 205, 11, 190, 203, 90, 148, 190, 36, 85, 41, 190, 46, 24, 34, 62, 202, 252, 250, 190, 43, 152, 199, 61, 150, 56, 246, 189, 162, 255, 133, 190, 159, 203, 83, 190, 162, 105, 102, 190, 24, 185, 54, 187, 93, 181, 192, 62, 50, 64, 44, 191, 181, 94, 181, 189, 91, 36, 123, 191, 138, 74, 150, 61, 148, 214, 248, 61, 127, 195, 228, 190, 27, 213, 89, 189, 231, 9, 111, 189, 94, 225, 107, 191, 232, 12, 208, 62, 149, 176, 166, 189, 175, 22, 102, 62, 42, 90, 189, 62, 75, 114, 246, 190, 218, 9, 104, 62, 64, 9, 99, 191, 225, 86, 98, 190, 224, 161, 192, 190, 14, 207, 204, 62, 213, 99, 85, 189, 88, 69, 144, 61, 18, 111, 133, 189, 91, 243, 247, 189, 135, 12, 192, 61, 169, 190, 120, 62, 224, 202, 67, 190, 144, 82, 76, 189, 190, 228, 243, 189, 220, 252, 213, 189, 219, 191, 174, 62, 111, 137, 42, 62, 10, 49, 177, 62, 120, 144, 153, 191, 142, 35, 82, 189, 104, 0, 13, 191, 34, 23, 201, 188, 41, 13, 82, 62, 189, 195, 133, 191, 175, 222, 238, 61, 51, 201, 29, 189, 75, 99, 245, 188, 143, 235, 189, 61, 146, 115, 116, 190, 28, 110, 193, 62, 80, 177, 207, 190, 21, 228, 62, 189, 17, 49, 18, 62, 239, 125, 138, 61, 3, 134, 87, 61, 241, 198, 241, 189, 148, 112, 159, 190, 150, 255, 21, 190, 174, 143, 107, 62, 80, 43, 133, 60, 185, 233, 93, 61, 28, 84, 147, 62, 178, 236, 252, 189, 197, 251, 228, 190, 83, 45, 28, 62, 1, 28, 129, 191, 190, 77, 204, 186, 211, 72, 131, 61, 8, 21, 165, 190, 253, 247, 178, 61, 56, 37, 207, 190, 121, 186, 49, 188, 71, 213, 63, 190, 174, 114, 171, 61, 207, 204, 33, 190, 149, 83, 159, 61, 63, 54, 200, 59, 235, 37, 12, 191, 233, 236, 63, 62, 167, 237, 135, 62, 131, 47, 252, 61, 91, 151, 159, 61, 60, 247, 149, 190, 77, 46, 107, 190, 65, 18, 179, 61, 64, 115, 69, 61, 195, 230, 111, 191, 4, 200, 43, 191, 59, 128, 118, 191, 10, 51, 107, 189, 207, 192, 206, 61, 176, 56, 215, 190, 251, 162, 32, 191, 157, 240, 108, 62, 119, 0, 108, 190, 165, 228, 6, 191, 162, 206, 8, 62, 55, 86, 4, 191, 172, 175, 131, 190, 215, 151, 8, 190, 250, 142, 236, 190, 208, 167, 5, 62, 120, 242, 153, 190, 47, 20, 33, 189, 118, 180, 185, 188, 134, 24, 18, 62, 150, 90, 146, 190, 98, 102, 98, 62, 244, 152, 199, 190, 180, 154, 216, 190, 42, 180, 2, 191, 135, 241, 83, 191, 78, 27, 149, 62, 130, 194, 226, 61, 153, 24, 12, 63, 86, 230, 247, 190, 80, 171, 12, 62, 34, 204, 149, 190, 33, 32, 172, 62, 45, 154, 135, 61, 37, 88, 17, 63, 28, 50, 199, 189, 109, 232, 51, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 135, 160, 61, 7, 113, 11, 60, 56, 174, 188, 188, 146, 47, 106, 62, 137, 201, 158, 61, 34, 4, 220, 189, 87, 181, 221, 60, 150, 199, 174, 61, 235, 69, 96, 189, 19, 163, 135, 61, 45, 15, 180, 62, 100, 16, 224, 60, 16, 255, 121, 62, 21, 146, 192, 61, 85, 39, 48, 190, 50, 1, 31, 190, 82, 3, 24, 62, 145, 107, 146, 62, 195, 155, 12, 61, 241, 215, 153, 189, 148, 159, 56, 62, 14, 151, 39, 61, 235, 248, 126, 190, 241, 54, 153, 60, 148, 41, 193, 190, 163, 94, 236, 188, 204, 168, 62, 62, 123, 177, 163, 61, 224, 201, 171, 190, 181, 15, 155, 189, 14, 15, 17, 62, 218, 26, 120, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 179, 198, 190, 35, 199, 152, 61, 255, 2, 15, 62, 142, 62, 38, 62, 170, 53, 64, 61, 24, 20, 160, 188, 52, 241, 20, 190, 23, 97, 234, 190, 60, 154, 142, 62, 220, 31, 163, 62, 110, 98, 128, 63, 186, 51, 57, 63, 248, 203, 10, 189, 152, 158, 196, 61, 252, 110, 209, 62, 64, 169, 174, 190, 228, 80, 233, 62, 152, 112, 39, 63, 224, 220, 24, 191, 228, 190, 91, 191, 138, 16, 175, 61, 103, 174, 10, 191, 15, 92, 206, 60, 140, 126, 44, 191, 211, 32, 29, 191, 45, 53, 32, 190, 76, 108, 247, 190, 171, 136, 249, 61, 121, 156, 5, 191, 106, 37, 13, 62, 48, 49, 31, 189, 39, 126, 145, 62, 2, 48, 50, 190, 187, 141, 52, 191, 235, 100, 39, 190, 32, 115, 78, 190, 159, 168, 85, 190, 104, 36, 207, 189, 136, 66, 228, 61, 136, 96, 224, 62, 147, 235, 148, 62, 21, 209, 195, 62, 204, 96, 219, 60, 230, 32, 42, 62, 106, 18, 150, 190, 8, 6, 247, 189, 57, 219, 24, 63, 191, 210, 61, 62, 192, 38, 155, 190, 19, 207, 0, 62, 127, 199, 46, 190, 59, 238, 175, 61, 99, 244, 124, 190, 253, 236, 64, 189, 15, 221, 79, 61, 33, 225, 217, 187, 175, 149, 61, 63, 161, 183, 195, 60, 181, 142, 52, 190, 93, 128, 190, 190, 188, 33, 181, 62, 164, 35, 177, 190, 134, 36, 227, 190, 172, 71, 107, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 69, 231, 61, 85, 244, 203, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {17, 79, 158, 190, 128, 249, 90, 191, 125, 113, 106, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {204, 251, 8, 189, 120, 233, 243, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0062/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}