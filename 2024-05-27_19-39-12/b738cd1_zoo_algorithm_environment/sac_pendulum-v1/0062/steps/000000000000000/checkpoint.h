// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 254, 123, 190, 167, 229, 243, 61, 130, 128, 233, 62, 121, 17, 174, 62, 161, 26, 9, 63, 185, 185, 158, 62, 19, 0, 228, 62, 37, 163, 200, 190, 213, 249, 131, 62, 216, 87, 190, 190, 253, 250, 27, 190, 17, 102, 24, 190, 70, 6, 142, 188, 57, 219, 203, 190, 156, 210, 170, 190, 152, 240, 137, 190, 213, 54, 233, 190, 190, 238, 10, 62, 110, 108, 179, 190, 131, 176, 173, 62, 171, 50, 179, 190, 68, 35, 192, 190, 104, 28, 49, 190, 7, 87, 14, 191, 125, 236, 16, 63, 148, 250, 21, 190, 31, 93, 83, 62, 71, 237, 53, 62, 162, 223, 152, 189, 253, 248, 14, 191, 171, 224, 236, 62, 45, 144, 2, 61, 55, 123, 54, 189, 198, 81, 187, 61, 76, 55, 173, 62, 114, 217, 139, 62, 194, 26, 230, 187, 121, 73, 121, 190, 75, 50, 238, 190, 172, 220, 85, 190, 202, 20, 30, 62, 49, 16, 62, 188, 36, 148, 119, 61, 13, 0, 130, 190, 140, 142, 186, 62, 184, 117, 168, 62, 141, 170, 249, 60, 132, 7, 237, 190, 50, 88, 224, 190, 229, 233, 157, 62, 233, 154, 127, 62, 234, 219, 44, 62, 18, 177, 82, 61, 21, 204, 176, 190, 174, 183, 166, 61, 243, 225, 20, 190, 147, 214, 141, 190, 85, 203, 203, 190, 134, 135, 12, 63, 112, 125, 216, 60, 176, 79, 235, 62, 228, 179, 19, 63, 72, 138, 22, 190, 149, 165, 62, 62, 163, 90, 11, 190, 235, 156, 109, 62, 122, 231, 13, 63, 58, 43, 98, 62, 156, 133, 110, 190, 208, 160, 65, 190, 39, 159, 153, 190, 155, 56, 112, 190, 57, 81, 15, 191, 19, 11, 10, 63, 54, 46, 195, 190, 142, 151, 200, 188, 60, 206, 239, 190, 35, 225, 156, 190, 162, 150, 15, 191, 99, 221, 115, 61, 88, 229, 246, 190, 38, 112, 226, 189, 11, 158, 184, 190, 196, 100, 211, 190, 41, 192, 226, 190, 59, 7, 31, 190, 89, 119, 5, 191, 64, 146, 228, 189, 154, 230, 11, 191, 58, 92, 167, 190, 32, 154, 109, 190, 81, 225, 183, 190, 149, 51, 236, 190, 19, 66, 129, 62, 232, 218, 243, 190, 15, 251, 227, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 167, 19, 191, 179, 36, 152, 61, 222, 205, 174, 62, 108, 101, 48, 190, 212, 163, 128, 190, 72, 146, 106, 190, 94, 106, 98, 190, 3, 168, 172, 190, 17, 91, 35, 61, 253, 154, 210, 62, 59, 12, 150, 61, 41, 77, 6, 191, 124, 193, 188, 190, 203, 211, 13, 63, 209, 16, 50, 62, 119, 198, 17, 63, 193, 236, 201, 190, 145, 76, 119, 62, 13, 97, 79, 189, 218, 9, 129, 190, 69, 115, 205, 190, 48, 249, 107, 62, 171, 180, 9, 63, 163, 58, 228, 190, 159, 76, 8, 63, 228, 2, 207, 62, 237, 252, 89, 62, 140, 105, 73, 62, 159, 180, 1, 63, 155, 123, 0, 191, 41, 100, 137, 62, 33, 115, 100, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {100, 54, 51, 190, 72, 185, 9, 62, 118, 42, 24, 190, 29, 91, 39, 188, 86, 204, 25, 62, 22, 60, 140, 189, 116, 79, 212, 188, 58, 3, 189, 187, 148, 189, 148, 189, 174, 101, 50, 62, 231, 158, 165, 189, 183, 253, 233, 189, 161, 234, 223, 189, 143, 140, 39, 190, 49, 12, 113, 189, 251, 69, 34, 62, 154, 175, 182, 61, 199, 91, 29, 62, 188, 84, 0, 61, 121, 2, 11, 62, 161, 37, 200, 61, 253, 168, 192, 189, 197, 230, 141, 60, 139, 70, 31, 62, 230, 83, 245, 60, 248, 52, 12, 190, 198, 120, 80, 61, 240, 208, 46, 62, 127, 134, 42, 190, 12, 14, 244, 189, 161, 139, 7, 61, 91, 34, 37, 61, 46, 51, 27, 60, 134, 173, 220, 61, 96, 69, 208, 61, 190, 39, 221, 61, 219, 182, 5, 62, 239, 242, 33, 62, 38, 200, 138, 61, 169, 57, 253, 61, 53, 63, 170, 189, 100, 55, 214, 61, 83, 63, 222, 61, 72, 210, 203, 189, 35, 52, 5, 188, 200, 24, 47, 190, 76, 62, 32, 62, 31, 192, 137, 59, 9, 169, 105, 189, 119, 125, 133, 61, 91, 197, 45, 190, 80, 216, 235, 186, 228, 206, 39, 62, 64, 140, 141, 61, 203, 147, 33, 190, 237, 167, 175, 60, 99, 151, 227, 61, 252, 69, 172, 189, 159, 191, 186, 61, 82, 123, 192, 189, 98, 59, 137, 61, 29, 216, 7, 62, 46, 47, 235, 61, 194, 172, 19, 59, 62, 14, 9, 190, 39, 231, 29, 62, 184, 64, 3, 62, 147, 191, 128, 61, 244, 16, 37, 62, 118, 107, 8, 189, 116, 248, 188, 189, 235, 87, 224, 189, 204, 160, 6, 190, 139, 62, 60, 61, 255, 186, 197, 189, 152, 139, 1, 62, 223, 57, 3, 189, 246, 69, 189, 59, 185, 174, 22, 190, 135, 160, 113, 189, 22, 27, 200, 189, 127, 15, 161, 61, 217, 164, 43, 62, 197, 224, 190, 61, 178, 19, 22, 190, 215, 49, 158, 188, 158, 243, 135, 59, 197, 41, 165, 61, 38, 46, 215, 189, 17, 173, 231, 61, 89, 39, 26, 190, 141, 242, 224, 189, 39, 52, 14, 190, 160, 83, 33, 62, 232, 178, 219, 61, 152, 237, 29, 190, 2, 99, 208, 60, 64, 134, 179, 61, 174, 147, 146, 60, 38, 64, 27, 190, 157, 114, 167, 189, 172, 251, 194, 61, 121, 134, 57, 189, 242, 107, 118, 189, 67, 103, 227, 60, 86, 1, 17, 190, 201, 155, 13, 62, 86, 111, 221, 188, 43, 89, 73, 60, 46, 199, 146, 61, 144, 198, 131, 188, 207, 240, 230, 61, 116, 57, 51, 190, 237, 107, 124, 189, 33, 223, 32, 62, 163, 56, 128, 61, 25, 217, 159, 61, 152, 255, 238, 61, 133, 114, 39, 190, 129, 248, 32, 190, 55, 38, 160, 61, 126, 58, 233, 61, 224, 217, 13, 190, 209, 204, 132, 189, 146, 251, 51, 62, 62, 233, 7, 62, 25, 56, 28, 62, 112, 204, 140, 61, 213, 254, 210, 189, 52, 76, 37, 62, 175, 207, 253, 189, 153, 30, 5, 190, 30, 22, 108, 61, 117, 54, 30, 188, 240, 211, 134, 188, 184, 87, 14, 190, 217, 170, 191, 186, 226, 248, 47, 62, 195, 112, 141, 61, 151, 6, 176, 60, 173, 186, 38, 62, 129, 112, 26, 61, 225, 183, 14, 62, 19, 56, 32, 62, 227, 178, 40, 189, 2, 126, 38, 61, 48, 183, 199, 61, 252, 198, 202, 189, 21, 44, 154, 61, 24, 72, 22, 190, 90, 177, 32, 62, 38, 106, 52, 189, 25, 183, 78, 61, 239, 250, 11, 61, 124, 243, 22, 190, 140, 166, 3, 62, 129, 20, 1, 190, 224, 27, 227, 189, 243, 59, 30, 62, 214, 60, 188, 189, 113, 241, 156, 61, 46, 63, 12, 189, 137, 200, 233, 61, 128, 98, 48, 62, 232, 79, 252, 61, 11, 127, 27, 190, 18, 135, 3, 62, 45, 140, 187, 188, 103, 217, 231, 189, 166, 4, 19, 62, 216, 128, 161, 60, 43, 223, 135, 61, 57, 189, 143, 189, 193, 247, 22, 190, 117, 151, 20, 190, 224, 242, 18, 189, 112, 212, 37, 190, 10, 63, 0, 190, 121, 132, 15, 62, 174, 87, 37, 190, 157, 195, 194, 61, 105, 67, 153, 189, 138, 186, 48, 190, 221, 31, 227, 189, 137, 161, 218, 60, 195, 104, 221, 189, 65, 88, 191, 189, 193, 209, 23, 190, 138, 120, 164, 60, 15, 225, 19, 62, 59, 51, 22, 60, 58, 223, 145, 189, 102, 95, 34, 190, 193, 173, 73, 61, 91, 25, 1, 190, 214, 173, 139, 189, 98, 129, 126, 189, 203, 86, 188, 61, 215, 147, 251, 189, 209, 78, 46, 62, 141, 253, 192, 188, 104, 62, 10, 61, 43, 227, 27, 62, 240, 87, 149, 189, 133, 248, 51, 62, 83, 152, 128, 189, 132, 13, 21, 61, 241, 175, 48, 189, 107, 168, 17, 62, 200, 176, 4, 189, 123, 19, 225, 59, 220, 90, 44, 190, 246, 76, 195, 189, 22, 5, 175, 189, 120, 91, 50, 190, 90, 39, 232, 60, 246, 132, 111, 61, 159, 156, 133, 189, 167, 150, 249, 189, 210, 170, 253, 189, 10, 227, 17, 188, 99, 126, 205, 189, 19, 112, 104, 61, 180, 197, 6, 190, 183, 200, 186, 189, 209, 250, 31, 62, 88, 195, 162, 189, 139, 182, 49, 59, 203, 63, 7, 189, 48, 229, 234, 61, 43, 202, 214, 61, 219, 55, 11, 190, 14, 247, 127, 60, 248, 158, 238, 189, 34, 211, 161, 61, 32, 194, 153, 61, 162, 1, 3, 188, 15, 116, 29, 189, 137, 249, 6, 190, 152, 59, 91, 60, 202, 194, 6, 61, 251, 131, 62, 59, 39, 104, 139, 61, 61, 5, 78, 189, 80, 149, 65, 188, 195, 87, 237, 61, 55, 50, 30, 61, 145, 3, 26, 187, 212, 213, 205, 61, 237, 252, 167, 189, 68, 143, 196, 189, 251, 110, 40, 190, 122, 144, 163, 189, 219, 179, 19, 62, 19, 93, 120, 189, 205, 64, 38, 190, 79, 128, 17, 189, 23, 87, 247, 61, 119, 179, 109, 61, 235, 222, 208, 189, 182, 13, 164, 189, 158, 187, 153, 60, 34, 132, 12, 61, 193, 76, 142, 189, 96, 49, 51, 187, 143, 223, 235, 59, 231, 130, 135, 61, 232, 185, 29, 62, 233, 25, 101, 61, 69, 107, 11, 189, 212, 215, 201, 188, 183, 141, 199, 189, 18, 110, 107, 60, 107, 187, 0, 61, 247, 60, 99, 60, 50, 14, 232, 61, 211, 189, 9, 62, 9, 246, 17, 62, 147, 0, 202, 187, 23, 211, 144, 188, 254, 206, 17, 190, 58, 163, 12, 61, 246, 201, 153, 61, 72, 240, 225, 189, 204, 53, 16, 190, 121, 23, 218, 61, 35, 188, 187, 61, 129, 95, 6, 190, 21, 209, 47, 190, 113, 148, 254, 59, 46, 112, 235, 61, 97, 250, 16, 189, 28, 167, 21, 62, 69, 202, 3, 62, 143, 36, 47, 61, 127, 81, 236, 189, 159, 99, 238, 189, 93, 55, 15, 190, 140, 88, 31, 62, 57, 253, 252, 61, 228, 217, 206, 61, 56, 5, 252, 61, 77, 157, 145, 189, 13, 143, 157, 60, 41, 185, 215, 61, 205, 56, 206, 61, 47, 203, 186, 189, 31, 205, 157, 61, 247, 80, 129, 189, 241, 212, 2, 62, 195, 214, 4, 190, 5, 130, 137, 61, 142, 164, 159, 189, 101, 10, 29, 62, 113, 44, 239, 61, 3, 113, 15, 190, 21, 6, 159, 187, 229, 131, 217, 61, 227, 210, 48, 189, 215, 219, 131, 189, 115, 211, 168, 61, 144, 70, 201, 189, 146, 173, 198, 60, 116, 225, 3, 189, 122, 167, 23, 62, 249, 207, 199, 61, 117, 80, 65, 188, 157, 130, 28, 61, 2, 125, 26, 62, 115, 242, 97, 189, 149, 119, 215, 189, 50, 13, 245, 189, 85, 24, 107, 188, 3, 111, 41, 189, 63, 191, 21, 190, 51, 255, 187, 61, 99, 210, 209, 189, 45, 188, 218, 189, 79, 170, 139, 189, 178, 78, 81, 61, 77, 17, 131, 61, 203, 94, 209, 61, 49, 191, 129, 189, 109, 224, 4, 62, 11, 124, 30, 190, 101, 69, 3, 190, 207, 100, 19, 188, 69, 6, 249, 61, 52, 26, 188, 61, 64, 115, 101, 61, 88, 177, 132, 188, 252, 104, 130, 186, 206, 77, 118, 189, 69, 22, 33, 62, 70, 161, 127, 61, 97, 55, 151, 189, 79, 198, 22, 60, 226, 92, 40, 62, 31, 102, 162, 188, 194, 81, 11, 190, 147, 220, 250, 61, 130, 108, 13, 189, 219, 100, 244, 189, 98, 39, 161, 61, 114, 110, 2, 190, 3, 222, 134, 188, 64, 14, 9, 62, 48, 149, 29, 190, 197, 146, 52, 190, 42, 221, 148, 61, 16, 130, 6, 62, 144, 250, 214, 61, 235, 33, 156, 58, 154, 114, 7, 190, 118, 14, 242, 60, 133, 197, 5, 190, 76, 104, 26, 189, 238, 225, 255, 187, 30, 235, 155, 189, 15, 205, 41, 189, 115, 197, 233, 61, 184, 158, 150, 61, 147, 218, 63, 61, 240, 127, 10, 190, 3, 152, 180, 60, 120, 17, 59, 188, 192, 236, 166, 61, 161, 35, 19, 190, 159, 60, 236, 61, 224, 7, 30, 62, 48, 250, 214, 61, 227, 11, 53, 188, 149, 68, 215, 189, 58, 209, 206, 61, 233, 116, 30, 190, 210, 128, 199, 188, 125, 3, 219, 61, 108, 180, 246, 189, 209, 40, 22, 190, 74, 87, 39, 61, 184, 102, 55, 61, 12, 9, 46, 190, 85, 42, 203, 189, 29, 130, 148, 61, 67, 6, 39, 61, 248, 40, 36, 62, 98, 57, 108, 189, 84, 53, 27, 62, 113, 32, 195, 61, 145, 234, 148, 61, 129, 148, 21, 190, 42, 28, 122, 59, 223, 34, 24, 62, 131, 72, 251, 189, 231, 97, 225, 61, 103, 246, 48, 62, 4, 8, 140, 189, 102, 14, 255, 189, 164, 80, 192, 189, 52, 51, 172, 60, 215, 54, 188, 61, 226, 48, 177, 189, 251, 184, 35, 61, 111, 161, 63, 61, 237, 105, 29, 60, 24, 120, 196, 189, 172, 229, 3, 190, 71, 17, 3, 189, 180, 36, 80, 189, 41, 231, 237, 61, 112, 103, 32, 61, 56, 99, 10, 190, 125, 154, 15, 190, 33, 94, 40, 62, 118, 21, 119, 61, 26, 52, 14, 190, 133, 150, 36, 62, 117, 192, 214, 189, 98, 63, 192, 61, 115, 232, 7, 62, 180, 214, 207, 61, 153, 120, 195, 61, 63, 16, 144, 61, 5, 216, 160, 188, 214, 186, 2, 190, 92, 252, 17, 61, 30, 193, 204, 61, 254, 23, 233, 189, 255, 232, 13, 62, 81, 210, 215, 188, 229, 191, 13, 190, 156, 253, 42, 190, 1, 103, 183, 60, 62, 139, 192, 61, 41, 45, 184, 61, 105, 100, 53, 60, 125, 2, 218, 61, 222, 13, 1, 62, 24, 142, 30, 61, 208, 10, 102, 61, 185, 73, 125, 189, 100, 220, 12, 62, 153, 121, 156, 61, 106, 16, 83, 60, 169, 23, 14, 62, 228, 70, 12, 62, 125, 72, 26, 61, 15, 221, 23, 190, 192, 150, 35, 59, 192, 235, 244, 189, 11, 72, 56, 187, 219, 54, 238, 61, 161, 16, 244, 61, 71, 158, 75, 61, 162, 107, 95, 61, 26, 62, 22, 188, 230, 21, 227, 60, 161, 137, 177, 189, 197, 50, 191, 60, 112, 80, 51, 190, 85, 40, 52, 62, 199, 146, 50, 62, 146, 247, 144, 188, 43, 127, 166, 189, 114, 187, 247, 61, 151, 197, 190, 61, 92, 28, 47, 61, 150, 38, 218, 61, 184, 84, 6, 190, 255, 117, 215, 188, 195, 42, 216, 189, 139, 91, 22, 62, 55, 161, 241, 60, 57, 36, 94, 61, 85, 228, 61, 61, 189, 65, 91, 189, 113, 126, 252, 61, 93, 20, 152, 189, 224, 210, 130, 187, 188, 130, 152, 61, 157, 90, 216, 59, 100, 90, 59, 189, 146, 198, 10, 190, 39, 151, 21, 190, 120, 239, 41, 190, 151, 9, 147, 60, 254, 176, 176, 61, 168, 194, 210, 61, 70, 9, 254, 60, 60, 207, 85, 61, 168, 30, 28, 62, 66, 93, 23, 190, 237, 34, 0, 189, 143, 58, 55, 189, 120, 239, 46, 62, 197, 222, 188, 60, 238, 2, 229, 186, 196, 238, 167, 188, 210, 238, 51, 190, 185, 73, 184, 188, 85, 162, 18, 190, 150, 198, 164, 189, 145, 236, 209, 61, 146, 100, 234, 189, 179, 14, 4, 62, 63, 3, 42, 190, 124, 29, 40, 62, 40, 233, 33, 62, 52, 177, 23, 62, 142, 204, 107, 60, 21, 214, 102, 61, 4, 78, 109, 60, 236, 0, 43, 190, 176, 141, 39, 62, 6, 121, 6, 62, 158, 164, 247, 189, 82, 248, 139, 189, 98, 133, 205, 60, 99, 67, 10, 190, 82, 40, 8, 62, 90, 134, 61, 189, 120, 29, 21, 62, 177, 246, 17, 62, 206, 69, 19, 61, 196, 150, 24, 62, 250, 92, 239, 189, 46, 177, 218, 186, 160, 77, 228, 189, 12, 126, 206, 189, 213, 162, 232, 187, 150, 179, 49, 190, 210, 74, 44, 190, 170, 247, 2, 190, 4, 220, 203, 60, 109, 72, 8, 188, 121, 101, 23, 190, 228, 93, 222, 189, 138, 129, 49, 190, 181, 213, 16, 190, 169, 51, 219, 61, 112, 116, 26, 60, 52, 136, 79, 61, 128, 136, 25, 190, 119, 250, 50, 62, 129, 173, 179, 189, 199, 49, 13, 62, 5, 227, 216, 189, 102, 227, 210, 189, 4, 74, 162, 188, 191, 188, 182, 61, 211, 8, 7, 190, 118, 16, 192, 61, 105, 30, 48, 61, 150, 90, 76, 183, 176, 92, 24, 62, 126, 182, 71, 61, 187, 6, 105, 61, 191, 212, 37, 62, 111, 179, 20, 62, 9, 64, 125, 61, 249, 98, 120, 61, 98, 42, 198, 189, 120, 17, 187, 61, 224, 194, 95, 61, 46, 86, 206, 188, 77, 56, 254, 189, 138, 52, 84, 61, 65, 237, 135, 189, 76, 67, 229, 188, 156, 49, 13, 190, 223, 54, 239, 61, 56, 222, 34, 190, 136, 49, 76, 61, 224, 107, 119, 189, 57, 75, 44, 62, 105, 26, 29, 62, 253, 142, 169, 61, 207, 168, 197, 189, 94, 15, 34, 59, 21, 40, 34, 190, 207, 240, 117, 61, 80, 228, 245, 61, 186, 147, 36, 190, 156, 93, 142, 189, 23, 249, 39, 62, 121, 55, 93, 189, 233, 255, 15, 190, 81, 251, 209, 60, 110, 141, 27, 62, 202, 0, 178, 61, 65, 190, 189, 189, 239, 228, 176, 189, 107, 89, 195, 185, 112, 52, 208, 61, 188, 64, 167, 189, 48, 242, 150, 189, 49, 3, 217, 61, 197, 214, 150, 61, 54, 181, 155, 61, 30, 162, 166, 61, 224, 211, 123, 189, 119, 147, 244, 61, 135, 209, 147, 58, 102, 1, 13, 190, 124, 125, 211, 60, 160, 160, 185, 61, 134, 155, 208, 189, 171, 27, 40, 189, 134, 120, 43, 188, 86, 240, 47, 62, 11, 53, 0, 190, 226, 173, 151, 61, 200, 148, 203, 189, 235, 163, 33, 190, 205, 188, 69, 61, 206, 180, 12, 189, 91, 173, 94, 187, 224, 43, 45, 62, 170, 25, 123, 61, 124, 152, 159, 61, 239, 151, 41, 190, 13, 74, 218, 188, 143, 61, 209, 61, 197, 217, 138, 189, 216, 184, 151, 60, 49, 243, 26, 62, 219, 95, 200, 61, 114, 194, 149, 59, 217, 96, 188, 61, 7, 232, 29, 190, 136, 54, 45, 62, 221, 81, 25, 61, 140, 164, 16, 62, 112, 185, 157, 189, 192, 133, 83, 188, 151, 98, 201, 61, 15, 254, 42, 62, 23, 141, 206, 59, 224, 218, 253, 189, 64, 148, 10, 190, 169, 154, 208, 189, 179, 207, 89, 188, 82, 135, 53, 60, 10, 5, 220, 189, 216, 171, 117, 187, 212, 75, 145, 189, 183, 220, 31, 62, 254, 124, 229, 61, 136, 169, 150, 189, 212, 91, 35, 189, 145, 107, 3, 61, 34, 184, 171, 61, 184, 12, 76, 61, 175, 200, 104, 61, 71, 149, 0, 190, 102, 26, 175, 189, 234, 221, 25, 190, 96, 228, 2, 59, 63, 168, 160, 188, 68, 84, 201, 189, 255, 219, 123, 189, 117, 152, 47, 188, 112, 134, 46, 190, 21, 0, 220, 187, 132, 174, 103, 189, 122, 211, 85, 61, 155, 83, 8, 190, 179, 216, 203, 61, 35, 254, 14, 190, 5, 54, 132, 189, 153, 152, 117, 61, 52, 5, 246, 61, 32, 223, 42, 190, 175, 240, 19, 190, 52, 64, 76, 61, 193, 73, 51, 62, 4, 143, 61, 61, 41, 4, 226, 187, 123, 160, 34, 61, 191, 111, 22, 62, 69, 211, 182, 189, 43, 210, 239, 61, 253, 204, 5, 190, 58, 183, 38, 190, 210, 251, 61, 61, 179, 224, 249, 188, 254, 126, 185, 187, 115, 47, 22, 189, 147, 26, 250, 187, 73, 1, 115, 61, 129, 224, 194, 61, 162, 151, 19, 62, 69, 191, 209, 189, 7, 25, 28, 62, 80, 49, 31, 190, 139, 110, 169, 189, 120, 206, 155, 61, 226, 212, 45, 190, 72, 173, 129, 61, 177, 98, 77, 59, 162, 223, 242, 187, 68, 29, 248, 189, 27, 18, 64, 189, 5, 55, 68, 189, 111, 35, 168, 189, 177, 134, 171, 61, 254, 232, 15, 62, 174, 158, 165, 189, 42, 144, 219, 189, 148, 229, 21, 190, 60, 70, 223, 61, 19, 118, 32, 190, 41, 9, 55, 189, 212, 2, 201, 189, 153, 58, 152, 61, 48, 31, 45, 62, 148, 232, 209, 58, 104, 145, 60, 61, 130, 228, 46, 62, 247, 19, 225, 60, 126, 124, 24, 61, 253, 91, 198, 189, 255, 78, 173, 189, 252, 244, 165, 61, 163, 47, 58, 61, 137, 224, 104, 189, 182, 89, 198, 61, 39, 5, 65, 60, 119, 47, 95, 60, 50, 209, 30, 190, 93, 251, 141, 61, 166, 123, 6, 190, 27, 233, 65, 189, 129, 177, 48, 190, 204, 83, 235, 61, 24, 18, 236, 61, 15, 180, 23, 190, 179, 234, 31, 62, 197, 62, 86, 189, 158, 148, 48, 190, 25, 39, 30, 190, 50, 75, 112, 60, 63, 82, 145, 61, 6, 85, 75, 61, 43, 220, 113, 189, 189, 197, 229, 59, 39, 188, 243, 61, 52, 38, 46, 62, 47, 53, 1, 62, 19, 96, 173, 61, 20, 179, 231, 61, 207, 49, 44, 61, 208, 51, 37, 62, 149, 243, 163, 61, 59, 247, 24, 190, 7, 43, 107, 189, 191, 234, 227, 189, 242, 125, 231, 189, 167, 76, 218, 189, 221, 13, 234, 188, 6, 232, 139, 189, 58, 93, 35, 190, 5, 112, 30, 61, 87, 29, 148, 189, 90, 171, 250, 59, 97, 118, 251, 189, 34, 242, 92, 61, 169, 35, 184, 61, 131, 120, 117, 61, 83, 20, 37, 189, 56, 242, 46, 61, 152, 194, 13, 62, 117, 164, 93, 188, 202, 55, 245, 188, 170, 180, 11, 60, 214, 168, 252, 61, 27, 184, 4, 190, 133, 88, 181, 189, 190, 253, 236, 189, 216, 103, 154, 60, 152, 235, 186, 60, 212, 116, 231, 189, 61, 196, 43, 190, 190, 121, 123, 60, 16, 8, 1, 190, 42, 166, 165, 188, 143, 203, 177, 189, 74, 41, 0, 61, 98, 8, 22, 62, 46, 236, 129, 58, 150, 43, 47, 61, 114, 100, 71, 187, 227, 62, 5, 62, 254, 57, 223, 189, 37, 232, 33, 190, 97, 83, 170, 189, 142, 233, 40, 62, 64, 53, 36, 62, 37, 190, 185, 60, 131, 119, 93, 189, 251, 6, 218, 189, 231, 254, 170, 61, 204, 209, 247, 60, 196, 48, 211, 60, 180, 106, 46, 190, 121, 125, 119, 59, 171, 168, 45, 190, 192, 201, 142, 61, 196, 28, 247, 61, 3, 139, 51, 189, 17, 108, 187, 61, 57, 182, 5, 62, 241, 147, 202, 188, 243, 179, 38, 62, 107, 29, 37, 189, 207, 23, 211, 189, 212, 197, 138, 61, 125, 90, 74, 61, 15, 200, 43, 62, 187, 211, 253, 189, 147, 15, 192, 61, 13, 30, 108, 60, 79, 157, 240, 60, 185, 229, 189, 61, 31, 192, 127, 189, 115, 142, 137, 189, 200, 124, 7, 61, 243, 86, 31, 62, 139, 223, 171, 60, 64, 173, 3, 62, 55, 226, 75, 189, 228, 44, 169, 189, 79, 5, 115, 61, 26, 120, 35, 62, 10, 173, 170, 189, 226, 213, 243, 61, 199, 203, 134, 189, 36, 70, 115, 61, 160, 131, 13, 62, 114, 123, 37, 190, 1, 248, 156, 189, 19, 26, 52, 190, 33, 100, 5, 61, 130, 101, 33, 61, 17, 245, 228, 189, 43, 21, 41, 190, 164, 39, 3, 190, 90, 6, 6, 62, 228, 195, 70, 189, 65, 229, 117, 61, 246, 226, 133, 189, 124, 232, 200, 61, 83, 92, 17, 62, 176, 129, 28, 61, 169, 125, 11, 62, 72, 148, 11, 190, 71, 62, 205, 61, 230, 8, 25, 60, 90, 233, 1, 60, 225, 222, 196, 188, 66, 86, 24, 190, 217, 48, 38, 60, 169, 184, 140, 61, 74, 97, 5, 62, 171, 244, 200, 188, 152, 239, 54, 189, 218, 178, 43, 189, 224, 122, 216, 61, 3, 147, 91, 189, 194, 92, 243, 189, 182, 23, 116, 61, 253, 249, 29, 189, 172, 235, 32, 190, 62, 168, 35, 190, 186, 168, 50, 190, 71, 31, 204, 60, 42, 131, 142, 61, 231, 110, 169, 188, 240, 200, 147, 189, 128, 124, 235, 189, 76, 177, 191, 187, 61, 79, 7, 189, 183, 12, 8, 190, 33, 59, 70, 61, 166, 15, 6, 190, 137, 116, 35, 62, 198, 31, 41, 61, 171, 169, 129, 189, 124, 198, 230, 61, 189, 99, 241, 189, 0, 85, 109, 188, 146, 30, 14, 62, 115, 250, 1, 190, 86, 6, 140, 187, 49, 6, 71, 189, 169, 160, 109, 61, 97, 13, 76, 189, 229, 60, 138, 189, 13, 144, 200, 61, 27, 198, 10, 62, 248, 8, 238, 61, 69, 209, 127, 61, 80, 124, 58, 188, 24, 167, 228, 188, 255, 217, 89, 61, 118, 30, 248, 61, 24, 119, 174, 61, 232, 31, 10, 190, 30, 30, 46, 62, 33, 92, 18, 61, 88, 44, 8, 190, 127, 19, 17, 62, 78, 84, 14, 189, 224, 222, 94, 61, 55, 99, 19, 190, 185, 84, 148, 189, 10, 201, 147, 56, 116, 137, 253, 61, 155, 191, 130, 184, 236, 241, 82, 60, 67, 167, 133, 60, 17, 12, 25, 190, 217, 65, 173, 60, 146, 247, 14, 62, 110, 69, 74, 187, 34, 159, 202, 61, 169, 135, 123, 61, 68, 70, 150, 61, 249, 241, 34, 61, 231, 32, 32, 61, 127, 46, 24, 62, 67, 57, 173, 189, 227, 191, 144, 61, 150, 150, 60, 189, 122, 0, 204, 61, 150, 83, 153, 61, 57, 255, 130, 188, 99, 89, 107, 189, 7, 168, 22, 190, 242, 219, 136, 60, 244, 228, 199, 61, 173, 155, 61, 189, 214, 41, 33, 62, 152, 208, 199, 189, 197, 0, 7, 188, 1, 203, 213, 61, 149, 156, 45, 62, 3, 142, 12, 190, 162, 172, 127, 186, 181, 199, 3, 190, 198, 179, 248, 61, 72, 57, 160, 189, 166, 144, 147, 188, 29, 69, 221, 189, 8, 233, 58, 188, 197, 99, 225, 189, 190, 134, 247, 61, 112, 80, 47, 62, 159, 141, 253, 189, 143, 213, 8, 190, 219, 27, 206, 189, 224, 217, 41, 189, 148, 23, 187, 189, 57, 200, 210, 61, 138, 180, 19, 190, 0, 78, 139, 60, 78, 115, 6, 62, 77, 104, 9, 190, 22, 86, 24, 61, 74, 85, 178, 187, 75, 27, 208, 61, 101, 5, 49, 62, 118, 243, 143, 189, 101, 73, 242, 189, 230, 156, 68, 61, 172, 172, 88, 189, 80, 77, 230, 61, 121, 215, 231, 189, 2, 152, 23, 190, 86, 119, 42, 190, 188, 113, 21, 62, 36, 79, 228, 189, 91, 235, 24, 190, 169, 143, 81, 187, 186, 81, 51, 187, 86, 172, 206, 188, 157, 65, 220, 189, 191, 228, 51, 62, 249, 211, 171, 61, 41, 111, 18, 62, 12, 192, 151, 188, 199, 232, 19, 62, 58, 224, 25, 62, 101, 255, 21, 62, 41, 27, 7, 62, 25, 187, 172, 60, 9, 47, 246, 61, 15, 231, 231, 61, 8, 74, 115, 189, 35, 204, 28, 62, 125, 181, 107, 60, 223, 117, 20, 189, 162, 185, 117, 186, 156, 71, 31, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 247, 21, 189, 218, 131, 47, 190, 180, 22, 43, 61, 146, 212, 41, 62, 81, 153, 106, 61, 221, 11, 216, 189, 87, 181, 221, 60, 107, 43, 30, 62, 27, 40, 240, 186, 6, 241, 47, 188, 29, 180, 250, 61, 133, 40, 215, 189, 173, 74, 15, 62, 210, 140, 117, 61, 196, 233, 45, 190, 88, 33, 248, 189, 248, 76, 132, 61, 219, 255, 157, 61, 148, 145, 120, 189, 18, 225, 51, 190, 183, 190, 42, 62, 251, 168, 44, 189, 89, 34, 46, 190, 237, 121, 56, 189, 51, 108, 28, 190, 173, 225, 49, 57, 211, 89, 240, 61, 233, 161, 69, 61, 107, 185, 52, 190, 67, 171, 137, 189, 3, 218, 130, 61, 178, 155, 34, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 19, 157, 189, 38, 153, 46, 188, 176, 0, 21, 62, 222, 122, 133, 61, 235, 14, 206, 61, 222, 67, 163, 188, 52, 241, 20, 190, 97, 72, 8, 190, 126, 117, 229, 61, 18, 100, 33, 61, 98, 3, 206, 60, 123, 229, 43, 62, 204, 202, 183, 187, 167, 38, 5, 62, 218, 181, 214, 61, 105, 186, 164, 189, 84, 192, 14, 62, 183, 21, 25, 188, 120, 157, 115, 189, 99, 13, 253, 189, 226, 117, 180, 61, 85, 190, 160, 189, 17, 216, 38, 189, 177, 1, 2, 190, 253, 40, 235, 189, 232, 235, 32, 190, 152, 233, 50, 190, 74, 87, 222, 61, 226, 60, 29, 189, 60, 24, 58, 61, 88, 188, 160, 189, 101, 245, 188, 60, 222, 3, 241, 189, 225, 67, 252, 189, 41, 198, 45, 190, 207, 161, 90, 189, 167, 32, 17, 190, 151, 84, 208, 189, 136, 66, 228, 61, 12, 68, 202, 61, 237, 239, 245, 188, 200, 152, 88, 189, 10, 0, 159, 61, 34, 8, 254, 189, 96, 248, 47, 190, 228, 227, 21, 189, 55, 33, 18, 62, 186, 228, 135, 189, 229, 144, 221, 189, 39, 212, 11, 61, 202, 21, 126, 189, 107, 223, 71, 61, 139, 21, 229, 189, 234, 21, 21, 190, 16, 28, 66, 188, 108, 124, 144, 189, 74, 181, 178, 61, 65, 232, 21, 61, 122, 91, 149, 189, 90, 254, 126, 61, 240, 197, 18, 62, 72, 240, 228, 189, 177, 217, 63, 188, 159, 206, 0, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 236, 200, 61, 169, 60, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {45, 21, 20, 192, 175, 67, 41, 63, 246, 18, 77, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {226, 132, 38, 62, 6, 125, 119, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0062/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}