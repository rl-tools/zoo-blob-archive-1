// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 222, 39, 189, 89, 255, 42, 63, 79, 219, 233, 62, 75, 158, 36, 63, 254, 206, 134, 63, 29, 100, 174, 62, 108, 249, 45, 63, 67, 215, 131, 191, 104, 68, 2, 63, 249, 107, 95, 191, 135, 49, 54, 191, 126, 170, 3, 60, 10, 1, 151, 59, 244, 75, 115, 191, 248, 197, 148, 190, 53, 51, 95, 187, 86, 84, 189, 189, 48, 138, 209, 62, 92, 178, 0, 191, 118, 15, 95, 63, 198, 65, 78, 191, 187, 198, 197, 190, 29, 28, 23, 190, 42, 3, 37, 191, 138, 112, 110, 63, 236, 134, 52, 186, 110, 171, 80, 62, 171, 29, 171, 61, 152, 20, 35, 191, 254, 222, 103, 191, 253, 160, 152, 63, 29, 109, 220, 61, 42, 134, 19, 190, 164, 31, 31, 63, 50, 76, 4, 63, 86, 141, 136, 62, 20, 42, 161, 190, 121, 98, 148, 190, 178, 40, 28, 191, 244, 85, 199, 190, 205, 18, 102, 63, 193, 75, 25, 61, 215, 189, 190, 62, 50, 47, 51, 189, 224, 164, 32, 63, 135, 187, 185, 189, 165, 80, 102, 191, 152, 216, 84, 191, 19, 46, 146, 190, 202, 255, 158, 63, 89, 108, 246, 61, 43, 177, 24, 189, 11, 47, 128, 191, 1, 216, 202, 190, 131, 102, 213, 187, 245, 144, 55, 191, 51, 192, 128, 190, 126, 110, 101, 191, 242, 150, 100, 63, 150, 124, 175, 190, 185, 151, 204, 62, 141, 29, 127, 63, 52, 47, 197, 190, 232, 180, 206, 62, 140, 202, 143, 63, 252, 79, 170, 62, 163, 16, 4, 63, 88, 230, 166, 190, 136, 133, 254, 190, 203, 56, 10, 63, 134, 43, 22, 191, 107, 100, 138, 190, 189, 111, 42, 191, 8, 58, 59, 63, 224, 137, 244, 190, 11, 44, 86, 61, 147, 80, 134, 191, 36, 232, 116, 189, 189, 178, 113, 191, 15, 58, 28, 190, 45, 81, 214, 190, 179, 63, 25, 191, 185, 101, 50, 191, 31, 83, 81, 190, 125, 172, 51, 191, 4, 28, 5, 189, 227, 211, 223, 189, 56, 34, 120, 61, 188, 168, 175, 191, 190, 45, 161, 190, 219, 63, 77, 191, 167, 175, 52, 191, 131, 45, 58, 189, 244, 88, 19, 61, 34, 237, 141, 191, 209, 14, 169, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 53, 52, 191, 100, 192, 245, 189, 72, 183, 203, 62, 116, 36, 3, 62, 197, 171, 183, 190, 158, 108, 140, 190, 228, 172, 243, 190, 40, 91, 5, 191, 44, 253, 189, 190, 100, 103, 192, 62, 66, 112, 208, 189, 101, 150, 47, 191, 242, 17, 136, 190, 121, 9, 210, 62, 114, 181, 135, 60, 193, 211, 1, 63, 54, 124, 252, 190, 201, 217, 225, 62, 25, 95, 138, 190, 45, 107, 119, 190, 121, 130, 255, 189, 193, 135, 71, 62, 91, 108, 18, 63, 38, 152, 44, 191, 45, 183, 172, 62, 218, 150, 225, 62, 39, 106, 45, 62, 70, 222, 244, 62, 89, 93, 55, 63, 9, 186, 126, 190, 176, 233, 232, 62, 131, 85, 213, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 104, 89, 190, 223, 106, 150, 61, 229, 96, 147, 190, 233, 4, 88, 189, 245, 233, 165, 189, 220, 186, 149, 191, 39, 251, 14, 190, 48, 152, 135, 190, 48, 241, 88, 191, 230, 204, 244, 61, 45, 25, 23, 62, 171, 167, 9, 190, 30, 214, 180, 190, 76, 92, 20, 190, 106, 63, 201, 190, 17, 240, 4, 62, 190, 20, 207, 190, 227, 232, 50, 62, 57, 129, 75, 190, 153, 14, 42, 188, 129, 247, 196, 190, 90, 59, 109, 191, 185, 200, 10, 190, 222, 155, 153, 190, 44, 159, 152, 188, 163, 213, 162, 61, 191, 225, 28, 60, 168, 63, 132, 62, 213, 158, 12, 190, 39, 40, 255, 190, 91, 118, 13, 62, 15, 93, 8, 62, 246, 239, 19, 191, 212, 253, 237, 61, 4, 196, 232, 61, 139, 25, 136, 61, 135, 175, 39, 190, 123, 82, 1, 190, 196, 186, 192, 190, 225, 115, 56, 190, 87, 185, 130, 62, 96, 106, 214, 61, 238, 144, 218, 62, 168, 72, 116, 191, 11, 215, 92, 190, 74, 101, 221, 191, 41, 22, 48, 189, 5, 218, 19, 62, 235, 190, 76, 190, 54, 88, 89, 62, 78, 25, 181, 190, 214, 184, 92, 190, 162, 33, 171, 190, 253, 127, 22, 189, 158, 136, 137, 61, 199, 106, 248, 190, 122, 89, 104, 190, 159, 69, 189, 61, 251, 163, 139, 61, 46, 33, 238, 189, 144, 111, 120, 189, 80, 94, 3, 189, 84, 9, 195, 61, 112, 99, 128, 62, 80, 66, 18, 190, 35, 188, 5, 62, 144, 199, 160, 61, 64, 9, 86, 61, 136, 92, 19, 62, 36, 226, 8, 189, 116, 248, 188, 189, 7, 118, 227, 189, 64, 170, 8, 190, 242, 132, 22, 188, 89, 22, 232, 189, 78, 14, 243, 61, 118, 99, 43, 189, 222, 166, 170, 188, 116, 20, 36, 190, 6, 114, 4, 190, 46, 12, 231, 189, 199, 40, 245, 60, 106, 50, 29, 62, 255, 19, 150, 61, 67, 81, 22, 190, 187, 125, 34, 189, 96, 25, 75, 189, 244, 196, 158, 61, 9, 72, 4, 190, 13, 143, 102, 61, 205, 241, 31, 190, 120, 50, 29, 190, 33, 39, 42, 190, 252, 106, 238, 61, 169, 46, 130, 61, 217, 83, 94, 190, 239, 92, 129, 190, 154, 48, 178, 190, 237, 151, 206, 61, 74, 28, 180, 189, 184, 175, 247, 190, 89, 209, 142, 61, 75, 160, 22, 190, 248, 133, 125, 190, 52, 108, 0, 61, 149, 202, 73, 189, 104, 120, 181, 62, 131, 200, 96, 191, 99, 174, 168, 189, 18, 35, 178, 190, 116, 56, 167, 189, 191, 98, 45, 62, 70, 16, 21, 191, 215, 74, 205, 189, 57, 106, 34, 189, 49, 115, 142, 62, 11, 4, 163, 62, 227, 207, 198, 189, 132, 204, 72, 62, 148, 175, 69, 191, 37, 104, 89, 62, 148, 187, 37, 62, 111, 182, 100, 61, 179, 220, 156, 189, 1, 16, 63, 62, 32, 149, 0, 190, 23, 166, 56, 62, 163, 188, 77, 62, 96, 99, 97, 190, 72, 97, 231, 189, 154, 19, 81, 61, 43, 61, 145, 61, 122, 94, 15, 190, 183, 186, 189, 61, 81, 120, 40, 190, 171, 186, 90, 190, 101, 53, 44, 189, 179, 95, 206, 61, 231, 174, 180, 61, 157, 123, 19, 191, 207, 129, 142, 61, 204, 27, 5, 190, 122, 33, 95, 62, 77, 17, 211, 61, 58, 16, 198, 189, 172, 44, 106, 189, 118, 143, 80, 189, 181, 184, 64, 190, 99, 250, 215, 61, 18, 191, 84, 190, 221, 128, 111, 62, 180, 195, 194, 190, 85, 8, 207, 188, 206, 105, 179, 61, 119, 252, 18, 190, 68, 43, 224, 61, 198, 182, 109, 189, 195, 86, 188, 190, 117, 144, 131, 62, 53, 51, 56, 189, 113, 241, 156, 61, 46, 63, 12, 189, 137, 200, 233, 61, 152, 179, 47, 62, 162, 22, 245, 61, 11, 127, 27, 190, 6, 109, 244, 61, 71, 229, 251, 188, 103, 217, 231, 189, 1, 9, 8, 62, 216, 128, 161, 60, 43, 223, 135, 61, 66, 191, 157, 189, 123, 112, 26, 190, 117, 151, 20, 190, 126, 229, 49, 189, 223, 244, 37, 190, 126, 100, 4, 190, 227, 218, 11, 62, 233, 139, 41, 190, 24, 91, 188, 61, 105, 67, 153, 189, 64, 184, 52, 190, 71, 87, 231, 189, 233, 66, 156, 60, 195, 104, 221, 189, 178, 66, 205, 189, 7, 239, 26, 190, 76, 8, 129, 60, 44, 172, 17, 62, 52, 191, 209, 59, 249, 22, 149, 189, 102, 95, 34, 190, 193, 173, 73, 61, 91, 25, 1, 190, 214, 173, 139, 189, 98, 129, 126, 189, 203, 86, 188, 61, 215, 147, 251, 189, 209, 78, 46, 62, 141, 253, 192, 188, 104, 62, 10, 61, 43, 227, 27, 62, 240, 87, 149, 189, 133, 248, 51, 62, 83, 152, 128, 189, 132, 13, 21, 61, 241, 175, 48, 189, 107, 168, 17, 62, 200, 176, 4, 189, 123, 19, 225, 59, 220, 90, 44, 190, 246, 76, 195, 189, 22, 5, 175, 189, 120, 91, 50, 190, 90, 39, 232, 60, 246, 132, 111, 61, 159, 156, 133, 189, 167, 150, 249, 189, 210, 170, 253, 189, 10, 227, 17, 188, 99, 126, 205, 189, 19, 112, 104, 61, 180, 197, 6, 190, 196, 26, 140, 62, 176, 183, 232, 62, 48, 16, 128, 191, 80, 221, 30, 62, 235, 65, 150, 190, 94, 110, 231, 190, 6, 115, 241, 61, 232, 106, 133, 190, 85, 141, 181, 190, 88, 81, 220, 186, 145, 156, 111, 62, 134, 224, 83, 61, 235, 13, 127, 190, 194, 202, 131, 189, 109, 171, 55, 191, 255, 241, 237, 61, 5, 168, 40, 190, 68, 224, 31, 62, 47, 48, 109, 190, 168, 184, 43, 190, 75, 194, 63, 191, 161, 180, 17, 191, 99, 161, 84, 190, 217, 54, 163, 190, 129, 150, 39, 62, 159, 57, 106, 189, 64, 74, 170, 188, 20, 233, 1, 190, 124, 33, 56, 189, 78, 87, 94, 190, 80, 83, 174, 188, 232, 20, 139, 188, 236, 147, 149, 189, 37, 164, 2, 62, 173, 222, 240, 60, 195, 151, 134, 191, 178, 196, 58, 190, 103, 127, 60, 189, 100, 249, 12, 63, 120, 69, 19, 62, 95, 220, 84, 62, 83, 51, 153, 60, 13, 56, 142, 61, 5, 92, 196, 62, 138, 66, 76, 62, 204, 9, 3, 190, 42, 209, 110, 189, 72, 18, 168, 190, 30, 236, 187, 187, 35, 25, 195, 190, 194, 24, 247, 61, 113, 194, 161, 62, 213, 114, 141, 62, 8, 15, 203, 61, 247, 178, 6, 187, 6, 34, 124, 189, 189, 20, 143, 189, 136, 251, 237, 188, 99, 148, 30, 190, 24, 85, 225, 60, 199, 43, 50, 190, 9, 239, 102, 189, 169, 254, 80, 61, 113, 208, 173, 60, 193, 87, 207, 190, 114, 126, 169, 190, 88, 5, 131, 62, 145, 78, 135, 190, 140, 79, 9, 191, 231, 30, 203, 61, 158, 198, 224, 62, 137, 254, 14, 62, 237, 43, 181, 190, 217, 85, 198, 190, 99, 11, 131, 62, 5, 42, 44, 190, 234, 45, 114, 62, 17, 249, 22, 189, 30, 98, 44, 189, 146, 122, 239, 190, 207, 255, 188, 61, 57, 202, 222, 190, 187, 17, 45, 191, 217, 24, 177, 62, 112, 250, 34, 190, 233, 242, 165, 60, 120, 146, 150, 189, 244, 183, 7, 189, 216, 31, 74, 188, 103, 141, 140, 62, 9, 134, 210, 60, 157, 237, 205, 61, 89, 24, 125, 188, 194, 43, 96, 63, 40, 9, 3, 61, 3, 101, 151, 62, 196, 125, 106, 61, 154, 218, 1, 190, 126, 20, 10, 61, 235, 16, 39, 62, 147, 89, 219, 61, 46, 116, 72, 62, 146, 225, 10, 191, 117, 191, 51, 63, 190, 236, 251, 190, 159, 168, 104, 191, 54, 66, 109, 189, 146, 218, 173, 59, 56, 62, 247, 62, 247, 46, 146, 62, 9, 211, 34, 189, 91, 200, 192, 191, 92, 205, 251, 61, 198, 197, 5, 192, 110, 244, 43, 61, 11, 137, 78, 189, 112, 92, 33, 190, 233, 5, 191, 62, 137, 220, 3, 191, 134, 16, 149, 61, 184, 59, 86, 190, 233, 85, 181, 190, 239, 167, 117, 190, 19, 2, 171, 62, 64, 247, 193, 62, 127, 31, 224, 62, 78, 27, 22, 62, 49, 214, 44, 191, 46, 112, 28, 190, 153, 37, 220, 187, 191, 232, 238, 61, 7, 244, 26, 62, 37, 106, 113, 62, 86, 220, 92, 62, 224, 44, 173, 191, 195, 75, 178, 62, 19, 252, 146, 189, 111, 194, 142, 191, 222, 139, 53, 190, 90, 233, 113, 61, 211, 183, 128, 62, 250, 40, 155, 61, 99, 191, 60, 62, 40, 189, 154, 191, 78, 3, 245, 188, 252, 159, 89, 191, 32, 140, 181, 62, 151, 251, 18, 190, 61, 121, 233, 190, 135, 130, 61, 189, 50, 190, 147, 62, 43, 50, 140, 60, 236, 10, 176, 190, 251, 176, 0, 62, 193, 49, 46, 190, 221, 12, 42, 62, 2, 170, 185, 62, 70, 100, 36, 63, 151, 147, 96, 62, 94, 23, 188, 190, 80, 113, 134, 61, 93, 28, 243, 61, 158, 127, 240, 61, 147, 212, 87, 188, 40, 4, 123, 190, 180, 162, 138, 60, 218, 104, 16, 190, 147, 42, 119, 190, 158, 143, 243, 60, 236, 24, 213, 60, 75, 161, 202, 189, 152, 48, 195, 190, 16, 239, 50, 190, 243, 98, 23, 190, 52, 142, 65, 190, 88, 13, 10, 61, 188, 17, 199, 60, 143, 193, 35, 190, 100, 140, 183, 190, 15, 181, 154, 62, 129, 189, 3, 190, 25, 195, 29, 62, 212, 159, 30, 190, 50, 226, 215, 190, 49, 188, 143, 61, 240, 159, 18, 62, 96, 53, 4, 189, 76, 142, 8, 190, 2, 194, 76, 189, 121, 247, 101, 191, 128, 18, 34, 62, 125, 197, 132, 62, 103, 22, 99, 190, 107, 37, 5, 191, 91, 55, 16, 62, 175, 156, 52, 60, 94, 178, 62, 190, 224, 113, 6, 62, 4, 150, 148, 61, 166, 157, 58, 61, 146, 244, 194, 189, 231, 167, 192, 189, 222, 116, 81, 61, 91, 220, 236, 190, 120, 205, 151, 189, 249, 240, 93, 188, 13, 30, 97, 62, 220, 105, 67, 190, 135, 59, 145, 60, 112, 100, 172, 60, 246, 220, 221, 189, 9, 70, 65, 190, 130, 201, 251, 62, 89, 205, 142, 189, 17, 122, 162, 62, 74, 204, 68, 188, 215, 101, 75, 62, 65, 115, 129, 61, 239, 198, 30, 187, 67, 66, 78, 190, 91, 81, 9, 190, 171, 151, 111, 190, 254, 170, 182, 59, 251, 53, 15, 190, 106, 247, 172, 190, 232, 230, 46, 191, 59, 19, 25, 61, 49, 235, 175, 190, 125, 179, 194, 188, 184, 76, 140, 62, 201, 225, 14, 189, 202, 219, 156, 187, 7, 178, 123, 189, 131, 5, 190, 61, 180, 209, 37, 63, 74, 152, 84, 61, 144, 158, 186, 189, 104, 62, 172, 188, 245, 95, 90, 62, 113, 145, 159, 189, 141, 74, 93, 190, 10, 214, 64, 189, 172, 255, 121, 61, 53, 198, 249, 190, 211, 89, 134, 62, 7, 117, 50, 190, 17, 16, 251, 189, 116, 26, 195, 62, 245, 224, 34, 62, 131, 169, 45, 62, 231, 26, 94, 189, 16, 93, 109, 61, 158, 142, 179, 60, 27, 8, 138, 62, 74, 82, 16, 61, 182, 241, 250, 189, 155, 104, 99, 62, 149, 158, 53, 62, 199, 74, 108, 190, 178, 249, 64, 191, 42, 252, 26, 190, 232, 49, 53, 61, 133, 127, 161, 62, 44, 98, 95, 61, 35, 30, 187, 190, 82, 119, 160, 190, 129, 29, 20, 62, 138, 143, 40, 190, 75, 250, 112, 189, 134, 236, 89, 62, 188, 127, 190, 188, 35, 240, 225, 190, 240, 117, 163, 62, 139, 249, 177, 190, 4, 194, 130, 190, 212, 42, 73, 63, 128, 59, 171, 190, 166, 130, 229, 189, 50, 50, 148, 189, 108, 207, 29, 191, 64, 31, 202, 62, 206, 142, 152, 190, 231, 114, 22, 63, 16, 82, 158, 190, 163, 38, 0, 62, 181, 219, 179, 190, 218, 69, 6, 191, 10, 249, 45, 191, 69, 185, 48, 190, 238, 17, 137, 190, 165, 11, 176, 62, 209, 12, 57, 59, 49, 70, 84, 191, 32, 127, 54, 61, 223, 119, 109, 191, 39, 83, 150, 59, 93, 91, 56, 190, 126, 153, 226, 190, 119, 64, 35, 62, 89, 179, 126, 190, 78, 227, 15, 62, 66, 181, 76, 190, 142, 90, 139, 62, 90, 10, 128, 190, 138, 177, 177, 62, 92, 69, 238, 190, 186, 157, 196, 190, 192, 205, 186, 189, 144, 183, 78, 191, 217, 61, 129, 62, 109, 101, 199, 61, 216, 151, 208, 61, 195, 119, 212, 190, 122, 185, 189, 61, 40, 231, 81, 190, 138, 201, 0, 62, 121, 101, 139, 189, 98, 35, 26, 62, 245, 32, 196, 61, 115, 245, 140, 61, 163, 153, 29, 190, 192, 164, 181, 190, 191, 152, 88, 62, 9, 2, 65, 190, 196, 246, 25, 191, 149, 89, 45, 190, 14, 154, 249, 190, 182, 55, 5, 191, 87, 169, 17, 62, 87, 82, 133, 61, 218, 226, 237, 62, 37, 33, 138, 189, 165, 21, 157, 190, 177, 178, 72, 191, 105, 64, 199, 189, 172, 66, 239, 61, 4, 71, 149, 190, 217, 38, 179, 189, 167, 222, 6, 191, 221, 66, 182, 62, 54, 183, 210, 62, 68, 75, 221, 59, 14, 108, 147, 62, 208, 195, 60, 191, 217, 167, 133, 62, 19, 77, 184, 62, 79, 139, 14, 190, 254, 121, 52, 62, 2, 227, 190, 61, 48, 229, 185, 187, 128, 36, 86, 62, 115, 104, 249, 62, 146, 94, 71, 62, 77, 207, 5, 63, 4, 32, 116, 62, 113, 9, 39, 191, 96, 1, 81, 189, 51, 70, 197, 189, 113, 211, 31, 62, 63, 102, 73, 62, 191, 5, 210, 62, 44, 228, 162, 190, 3, 142, 154, 62, 91, 103, 17, 190, 82, 110, 3, 62, 107, 133, 66, 187, 155, 214, 120, 62, 180, 141, 78, 190, 228, 31, 251, 61, 108, 9, 226, 188, 93, 38, 164, 62, 195, 87, 41, 63, 101, 57, 45, 62, 35, 162, 193, 61, 197, 137, 173, 61, 180, 152, 217, 190, 229, 80, 158, 62, 250, 166, 50, 190, 40, 70, 199, 188, 108, 137, 155, 191, 157, 97, 199, 190, 135, 178, 40, 191, 180, 8, 121, 191, 35, 40, 140, 190, 10, 161, 221, 62, 10, 187, 154, 62, 140, 195, 194, 190, 37, 130, 215, 189, 232, 75, 221, 190, 203, 54, 169, 190, 78, 73, 152, 60, 208, 150, 126, 190, 20, 70, 252, 188, 45, 9, 181, 61, 110, 136, 157, 190, 38, 152, 87, 189, 114, 87, 177, 190, 44, 70, 150, 62, 223, 18, 28, 191, 93, 70, 61, 190, 240, 164, 197, 59, 138, 115, 183, 61, 47, 164, 233, 190, 228, 95, 92, 62, 153, 126, 255, 190, 119, 230, 176, 190, 126, 196, 196, 190, 182, 106, 142, 190, 253, 29, 155, 61, 186, 210, 212, 190, 137, 149, 35, 62, 150, 177, 32, 189, 189, 223, 12, 62, 127, 198, 19, 191, 208, 50, 245, 61, 84, 86, 229, 189, 141, 80, 176, 190, 174, 185, 209, 190, 45, 138, 126, 62, 190, 93, 249, 61, 7, 185, 33, 189, 149, 162, 94, 62, 232, 204, 135, 60, 114, 45, 36, 61, 61, 163, 195, 61, 75, 240, 25, 190, 53, 214, 148, 62, 85, 139, 136, 191, 171, 60, 20, 62, 16, 128, 142, 190, 180, 120, 78, 60, 120, 238, 238, 61, 169, 236, 192, 190, 233, 10, 157, 188, 117, 62, 18, 190, 18, 136, 75, 190, 146, 61, 7, 190, 237, 32, 18, 190, 127, 144, 72, 62, 150, 113, 133, 190, 161, 1, 142, 188, 123, 85, 23, 187, 60, 105, 128, 62, 214, 141, 12, 62, 21, 46, 22, 60, 141, 200, 38, 190, 88, 220, 29, 62, 115, 92, 80, 62, 232, 50, 235, 61, 190, 236, 159, 60, 79, 197, 100, 191, 149, 28, 120, 189, 41, 208, 169, 190, 59, 87, 57, 191, 33, 167, 53, 62, 254, 90, 60, 190, 81, 28, 73, 190, 77, 15, 236, 61, 231, 10, 163, 188, 145, 255, 159, 189, 55, 128, 37, 190, 187, 113, 126, 62, 38, 209, 135, 191, 160, 118, 85, 62, 125, 111, 242, 190, 6, 136, 34, 61, 51, 26, 9, 190, 172, 234, 172, 62, 82, 7, 11, 191, 48, 130, 126, 191, 219, 196, 170, 188, 118, 61, 112, 190, 235, 22, 128, 62, 34, 17, 79, 190, 7, 217, 92, 62, 215, 71, 80, 62, 51, 96, 188, 61, 253, 225, 177, 190, 59, 71, 151, 189, 38, 184, 34, 190, 215, 20, 115, 60, 252, 58, 94, 189, 170, 254, 38, 189, 153, 43, 156, 189, 106, 67, 243, 188, 9, 95, 219, 60, 0, 188, 26, 61, 80, 167, 190, 61, 251, 208, 225, 189, 61, 165, 215, 61, 36, 199, 31, 190, 149, 140, 181, 189, 114, 114, 24, 61, 90, 126, 116, 190, 215, 204, 229, 60, 189, 221, 249, 188, 98, 82, 60, 189, 55, 245, 24, 190, 238, 171, 168, 189, 173, 153, 229, 189, 194, 231, 31, 190, 195, 28, 110, 61, 30, 95, 197, 61, 151, 41, 198, 189, 215, 2, 63, 190, 177, 143, 67, 190, 164, 12, 61, 61, 130, 148, 77, 190, 233, 47, 237, 189, 221, 130, 195, 189, 5, 240, 207, 60, 59, 174, 30, 62, 233, 46, 98, 188, 32, 122, 34, 189, 14, 55, 247, 62, 117, 120, 20, 63, 126, 42, 80, 62, 193, 140, 158, 62, 31, 115, 216, 62, 156, 28, 227, 190, 98, 64, 127, 62, 112, 79, 186, 60, 104, 138, 98, 189, 10, 55, 91, 189, 201, 87, 28, 191, 72, 90, 186, 189, 89, 29, 145, 62, 106, 70, 183, 188, 244, 141, 6, 191, 221, 227, 159, 61, 93, 113, 71, 61, 175, 228, 219, 190, 193, 120, 175, 189, 154, 135, 65, 62, 130, 8, 138, 190, 66, 70, 141, 61, 221, 98, 2, 190, 148, 64, 188, 62, 85, 156, 86, 61, 239, 110, 206, 62, 87, 31, 103, 61, 24, 28, 132, 190, 93, 210, 240, 62, 116, 242, 199, 60, 72, 175, 162, 62, 219, 229, 127, 62, 198, 141, 38, 62, 72, 95, 129, 190, 123, 10, 8, 62, 148, 24, 240, 61, 209, 223, 32, 190, 102, 136, 191, 60, 75, 148, 198, 62, 163, 92, 109, 190, 79, 42, 105, 62, 14, 26, 19, 63, 226, 135, 160, 187, 42, 67, 241, 190, 181, 30, 186, 61, 55, 221, 56, 190, 192, 62, 127, 189, 183, 186, 118, 190, 58, 87, 21, 60, 168, 201, 124, 186, 191, 146, 217, 62, 145, 198, 182, 188, 143, 51, 169, 190, 47, 239, 231, 61, 197, 35, 66, 63, 158, 144, 137, 190, 107, 127, 220, 188, 252, 26, 166, 190, 192, 29, 83, 191, 119, 65, 210, 189, 45, 135, 12, 191, 99, 61, 28, 191, 152, 235, 186, 60, 152, 244, 238, 189, 245, 231, 32, 190, 65, 212, 254, 188, 193, 34, 45, 190, 221, 15, 235, 188, 118, 195, 4, 190, 34, 189, 60, 188, 145, 71, 13, 62, 34, 4, 27, 189, 37, 214, 0, 61, 114, 100, 71, 187, 175, 235, 157, 61, 244, 192, 16, 190, 25, 20, 41, 190, 74, 59, 244, 189, 142, 233, 40, 62, 94, 18, 248, 61, 228, 234, 140, 188, 161, 130, 105, 189, 63, 123, 213, 189, 129, 168, 146, 61, 72, 168, 134, 59, 250, 217, 153, 188, 113, 140, 84, 190, 228, 24, 227, 188, 41, 26, 85, 190, 132, 197, 15, 61, 122, 124, 177, 61, 3, 230, 172, 189, 121, 236, 104, 61, 238, 238, 199, 61, 252, 64, 22, 62, 73, 201, 3, 63, 145, 111, 129, 189, 94, 146, 154, 190, 176, 180, 147, 190, 30, 188, 173, 188, 231, 162, 196, 62, 219, 253, 235, 189, 189, 212, 234, 62, 34, 113, 46, 190, 76, 43, 150, 62, 43, 35, 84, 61, 179, 106, 245, 189, 156, 87, 135, 61, 250, 55, 154, 61, 87, 180, 176, 188, 36, 121, 162, 61, 253, 49, 132, 61, 206, 131, 69, 190, 56, 66, 229, 62, 18, 31, 87, 61, 5, 40, 171, 62, 81, 110, 39, 190, 148, 210, 2, 191, 74, 57, 130, 62, 126, 5, 215, 61, 19, 177, 227, 62, 64, 130, 54, 191, 140, 186, 237, 190, 28, 81, 168, 191, 221, 73, 162, 190, 48, 143, 16, 190, 59, 109, 36, 190, 103, 219, 75, 190, 163, 86, 164, 190, 227, 184, 67, 61, 170, 15, 1, 60, 53, 46, 210, 187, 244, 44, 47, 60, 254, 253, 34, 62, 246, 62, 166, 61, 83, 125, 146, 60, 131, 42, 133, 191, 7, 64, 208, 190, 0, 80, 16, 62, 155, 2, 93, 62, 182, 127, 248, 61, 82, 59, 181, 189, 12, 83, 182, 60, 83, 158, 102, 189, 216, 227, 192, 61, 225, 138, 169, 62, 103, 28, 219, 61, 201, 224, 101, 61, 22, 228, 48, 190, 153, 175, 150, 61, 252, 93, 84, 61, 140, 202, 138, 191, 223, 207, 26, 62, 182, 99, 150, 60, 238, 150, 82, 187, 66, 173, 218, 190, 209, 86, 9, 190, 209, 220, 9, 190, 70, 5, 131, 190, 221, 21, 57, 190, 135, 88, 28, 62, 85, 29, 228, 190, 33, 125, 105, 61, 11, 202, 223, 189, 121, 76, 82, 190, 159, 175, 22, 190, 235, 173, 106, 190, 121, 247, 223, 186, 191, 231, 183, 62, 171, 124, 29, 191, 158, 84, 29, 189, 239, 97, 119, 191, 46, 165, 166, 61, 163, 237, 247, 61, 127, 195, 228, 190, 103, 254, 112, 189, 51, 208, 179, 189, 105, 218, 112, 191, 19, 94, 159, 62, 63, 10, 196, 189, 193, 122, 85, 62, 217, 25, 197, 62, 126, 239, 206, 190, 244, 236, 93, 62, 250, 136, 87, 191, 38, 40, 55, 190, 162, 75, 168, 190, 76, 195, 205, 62, 49, 119, 97, 189, 13, 213, 91, 61, 28, 225, 74, 189, 226, 254, 252, 189, 92, 45, 195, 61, 215, 243, 134, 62, 11, 145, 67, 190, 168, 57, 100, 189, 77, 41, 245, 189, 117, 232, 197, 189, 237, 171, 175, 62, 26, 26, 40, 62, 1, 124, 177, 62, 156, 26, 144, 191, 19, 9, 56, 189, 232, 152, 11, 191, 74, 39, 230, 188, 41, 141, 82, 62, 145, 179, 96, 191, 12, 45, 255, 61, 153, 193, 34, 189, 148, 4, 173, 188, 69, 91, 196, 61, 220, 190, 120, 190, 135, 84, 196, 62, 148, 19, 197, 190, 215, 154, 76, 189, 177, 53, 26, 62, 31, 229, 158, 61, 95, 71, 78, 61, 161, 0, 237, 189, 205, 108, 158, 190, 83, 143, 14, 190, 224, 58, 116, 62, 228, 123, 192, 59, 17, 151, 12, 61, 223, 193, 144, 62, 236, 160, 8, 190, 13, 241, 184, 190, 104, 241, 18, 62, 160, 157, 121, 191, 190, 77, 204, 186, 12, 198, 40, 61, 37, 198, 204, 190, 10, 193, 161, 61, 14, 213, 220, 190, 112, 198, 212, 187, 248, 119, 30, 190, 114, 120, 146, 61, 194, 206, 73, 190, 180, 2, 199, 61, 63, 149, 38, 61, 160, 159, 2, 191, 123, 253, 58, 62, 85, 161, 197, 62, 204, 150, 223, 61, 91, 177, 11, 62, 56, 193, 63, 190, 154, 204, 32, 190, 245, 43, 219, 61, 64, 115, 69, 61, 59, 192, 58, 191, 180, 203, 28, 191, 150, 1, 27, 191, 203, 179, 70, 189, 141, 100, 246, 61, 205, 240, 207, 190, 195, 125, 23, 191, 82, 20, 104, 62, 163, 234, 75, 190, 11, 46, 205, 190, 5, 39, 17, 62, 55, 86, 4, 191, 172, 175, 131, 190, 160, 133, 3, 190, 71, 6, 2, 191, 167, 158, 15, 62, 61, 59, 145, 190, 47, 20, 33, 189, 56, 111, 59, 61, 126, 254, 20, 62, 52, 44, 174, 190, 50, 223, 110, 62, 139, 65, 217, 190, 109, 120, 152, 190, 5, 190, 192, 190, 1, 92, 49, 191, 45, 167, 167, 62, 221, 26, 221, 61, 254, 119, 240, 62, 36, 20, 218, 190, 77, 143, 245, 61, 187, 44, 221, 189, 97, 52, 148, 62, 64, 218, 11, 62, 197, 108, 235, 62, 72, 20, 133, 189, 184, 191, 23, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 241, 73, 61, 204, 125, 147, 60, 56, 174, 188, 188, 250, 10, 99, 62, 49, 247, 184, 61, 34, 4, 220, 189, 87, 181, 221, 60, 85, 218, 66, 61, 135, 139, 160, 189, 93, 246, 138, 61, 20, 145, 192, 62, 142, 139, 46, 61, 2, 121, 109, 62, 145, 131, 173, 61, 227, 233, 27, 190, 226, 120, 39, 190, 194, 145, 45, 62, 48, 207, 139, 62, 212, 221, 93, 61, 235, 97, 228, 189, 125, 208, 80, 62, 221, 247, 158, 60, 235, 248, 126, 190, 249, 233, 79, 188, 211, 67, 192, 190, 163, 94, 236, 188, 161, 112, 76, 62, 113, 146, 171, 61, 24, 249, 177, 190, 221, 246, 148, 189, 193, 62, 23, 62, 108, 186, 144, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 77, 137, 190, 163, 238, 189, 61, 255, 2, 15, 62, 215, 186, 42, 62, 255, 94, 72, 61, 24, 20, 160, 188, 52, 241, 20, 190, 121, 245, 229, 190, 214, 46, 124, 62, 91, 199, 155, 62, 95, 159, 132, 63, 28, 133, 60, 63, 199, 143, 137, 188, 46, 155, 196, 61, 20, 83, 196, 62, 176, 26, 173, 190, 163, 179, 232, 62, 137, 255, 37, 63, 170, 74, 19, 191, 253, 22, 58, 191, 23, 95, 210, 61, 228, 109, 17, 191, 15, 92, 206, 60, 86, 127, 43, 191, 129, 42, 7, 191, 45, 53, 32, 190, 191, 35, 245, 190, 12, 94, 185, 61, 224, 33, 254, 190, 196, 176, 30, 62, 123, 50, 242, 188, 32, 20, 144, 62, 100, 17, 85, 190, 82, 34, 28, 191, 235, 100, 39, 190, 30, 112, 74, 190, 64, 167, 70, 190, 104, 36, 207, 189, 136, 66, 228, 61, 58, 152, 205, 62, 255, 4, 179, 62, 99, 151, 159, 62, 137, 195, 122, 61, 50, 35, 35, 62, 166, 153, 94, 190, 157, 124, 6, 190, 124, 251, 245, 62, 130, 212, 38, 62, 145, 69, 147, 190, 176, 142, 196, 61, 30, 221, 23, 190, 174, 173, 45, 62, 223, 129, 119, 190, 192, 165, 59, 189, 15, 221, 79, 61, 80, 220, 11, 60, 74, 121, 60, 63, 161, 183, 195, 60, 187, 51, 15, 190, 240, 210, 151, 190, 62, 190, 175, 62, 212, 37, 169, 190, 200, 123, 215, 190, 114, 200, 90, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 148, 215, 61, 73, 216, 194, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {241, 243, 70, 190, 75, 79, 144, 190, 14, 224, 152, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {50, 58, 120, 63, 228, 158, 24, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0062/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}