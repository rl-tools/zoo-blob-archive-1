// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 10, 50, 190, 49, 142, 233, 62, 121, 245, 254, 62, 216, 97, 242, 62, 78, 132, 133, 63, 168, 155, 179, 62, 212, 252, 144, 62, 30, 17, 142, 191, 245, 80, 50, 63, 239, 39, 8, 191, 102, 250, 39, 191, 77, 187, 124, 61, 158, 89, 67, 62, 7, 3, 149, 190, 106, 204, 204, 190, 154, 104, 183, 190, 213, 204, 38, 191, 25, 202, 234, 62, 14, 255, 109, 190, 42, 162, 162, 63, 155, 86, 55, 191, 162, 241, 23, 190, 180, 76, 55, 62, 233, 127, 38, 191, 234, 184, 29, 63, 50, 165, 10, 61, 203, 63, 45, 62, 140, 195, 133, 62, 231, 35, 146, 62, 236, 80, 124, 191, 50, 156, 96, 63, 117, 237, 212, 61, 90, 124, 66, 61, 19, 238, 144, 62, 48, 14, 255, 62, 139, 211, 107, 62, 201, 117, 19, 61, 93, 216, 153, 188, 68, 85, 30, 191, 68, 192, 134, 190, 231, 196, 2, 63, 145, 220, 5, 190, 194, 223, 149, 189, 38, 48, 81, 191, 29, 211, 115, 63, 210, 145, 204, 62, 144, 211, 250, 189, 149, 13, 65, 191, 66, 236, 175, 190, 107, 255, 115, 63, 189, 163, 20, 62, 69, 2, 62, 62, 225, 221, 13, 62, 207, 253, 15, 191, 211, 87, 116, 62, 194, 84, 196, 188, 187, 157, 196, 190, 112, 144, 232, 190, 6, 82, 83, 63, 28, 15, 23, 190, 155, 204, 39, 62, 248, 127, 160, 63, 66, 73, 32, 190, 125, 28, 14, 61, 58, 206, 171, 62, 64, 23, 141, 62, 251, 187, 57, 63, 174, 75, 47, 62, 148, 20, 157, 190, 201, 207, 126, 61, 224, 157, 133, 190, 225, 127, 188, 190, 63, 168, 11, 191, 201, 102, 117, 63, 160, 18, 172, 190, 207, 195, 64, 189, 22, 129, 145, 191, 128, 36, 139, 61, 196, 146, 68, 191, 131, 84, 128, 62, 243, 58, 150, 190, 98, 53, 159, 190, 109, 253, 47, 191, 27, 14, 15, 190, 96, 177, 21, 191, 236, 215, 45, 190, 206, 52, 108, 190, 41, 131, 139, 62, 234, 152, 127, 191, 175, 85, 200, 190, 136, 203, 196, 190, 29, 92, 33, 191, 213, 86, 28, 190, 49, 149, 171, 61, 112, 31, 113, 191, 143, 143, 125, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 108, 47, 191, 128, 86, 178, 60, 182, 77, 251, 62, 167, 44, 221, 189, 81, 194, 179, 190, 159, 194, 95, 190, 40, 120, 176, 190, 250, 96, 252, 190, 64, 74, 232, 189, 129, 246, 187, 62, 0, 169, 106, 62, 173, 131, 50, 191, 215, 205, 175, 190, 232, 111, 3, 63, 235, 40, 144, 62, 180, 77, 9, 63, 90, 205, 231, 190, 253, 52, 106, 62, 234, 252, 198, 189, 56, 236, 91, 190, 155, 74, 61, 188, 126, 102, 158, 62, 93, 236, 21, 63, 28, 69, 0, 191, 238, 182, 5, 63, 146, 208, 191, 62, 190, 81, 138, 62, 115, 123, 232, 62, 42, 117, 4, 63, 54, 76, 236, 190, 102, 207, 227, 62, 67, 126, 225, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 103, 89, 190, 60, 213, 78, 62, 173, 222, 83, 191, 62, 215, 133, 60, 194, 207, 219, 60, 12, 69, 148, 191, 150, 34, 73, 61, 53, 6, 217, 189, 64, 231, 134, 189, 229, 111, 102, 62, 105, 45, 164, 60, 171, 167, 9, 190, 80, 200, 82, 190, 229, 193, 138, 189, 34, 196, 88, 191, 111, 208, 76, 62, 239, 67, 114, 61, 35, 175, 102, 62, 108, 136, 253, 189, 108, 217, 67, 62, 4, 200, 192, 190, 114, 36, 153, 190, 42, 65, 142, 189, 227, 20, 14, 190, 107, 208, 0, 62, 79, 132, 216, 189, 15, 250, 22, 62, 96, 205, 143, 62, 89, 220, 112, 189, 8, 166, 201, 190, 55, 70, 20, 62, 84, 179, 216, 61, 1, 38, 181, 189, 172, 35, 83, 62, 90, 151, 211, 61, 152, 31, 160, 61, 177, 165, 182, 61, 166, 57, 22, 61, 136, 172, 66, 189, 156, 165, 203, 61, 105, 144, 100, 189, 110, 190, 147, 61, 107, 162, 153, 62, 198, 0, 208, 190, 173, 122, 76, 189, 193, 88, 15, 190, 168, 123, 184, 61, 100, 191, 211, 185, 41, 48, 87, 189, 88, 60, 208, 60, 175, 34, 106, 190, 63, 144, 22, 189, 72, 210, 144, 61, 16, 249, 135, 61, 131, 129, 114, 189, 166, 175, 11, 190, 147, 196, 241, 61, 217, 199, 8, 190, 201, 70, 178, 61, 196, 133, 251, 189, 244, 30, 135, 61, 116, 75, 209, 60, 19, 20, 175, 61, 212, 249, 192, 60, 80, 66, 18, 190, 35, 188, 5, 62, 30, 84, 230, 61, 248, 22, 115, 61, 238, 196, 32, 62, 36, 226, 8, 189, 116, 248, 188, 189, 50, 28, 226, 189, 209, 133, 8, 190, 239, 214, 255, 60, 180, 54, 210, 189, 78, 14, 243, 61, 48, 253, 23, 189, 143, 145, 168, 188, 185, 86, 35, 190, 132, 248, 167, 189, 46, 12, 231, 189, 117, 204, 144, 61, 130, 6, 39, 62, 255, 19, 150, 61, 67, 81, 22, 190, 187, 125, 34, 189, 242, 155, 178, 188, 216, 64, 163, 61, 9, 72, 4, 190, 70, 151, 198, 61, 176, 73, 31, 190, 219, 170, 251, 189, 217, 254, 28, 190, 180, 215, 25, 62, 56, 188, 191, 61, 180, 235, 48, 190, 237, 75, 44, 190, 235, 152, 78, 189, 195, 191, 21, 62, 130, 215, 50, 190, 143, 218, 119, 189, 248, 20, 216, 61, 107, 229, 7, 190, 182, 230, 70, 188, 240, 233, 143, 61, 240, 179, 29, 190, 252, 238, 135, 62, 40, 159, 10, 190, 208, 63, 198, 60, 102, 25, 247, 60, 56, 207, 32, 188, 123, 239, 3, 62, 224, 46, 143, 190, 41, 57, 204, 189, 144, 55, 53, 62, 242, 253, 215, 189, 242, 230, 130, 62, 51, 87, 175, 61, 58, 70, 70, 189, 51, 232, 71, 190, 73, 223, 37, 61, 137, 40, 23, 62, 92, 149, 29, 190, 203, 68, 150, 189, 215, 182, 44, 62, 164, 160, 54, 62, 57, 118, 18, 62, 43, 181, 239, 61, 0, 156, 151, 190, 201, 95, 223, 61, 245, 12, 139, 61, 132, 54, 244, 189, 234, 200, 211, 61, 56, 7, 103, 61, 139, 245, 166, 189, 74, 110, 138, 189, 213, 40, 237, 61, 218, 249, 58, 62, 194, 135, 107, 62, 44, 64, 24, 190, 109, 18, 78, 62, 19, 103, 136, 61, 130, 230, 98, 62, 73, 229, 72, 62, 87, 211, 218, 189, 23, 237, 222, 60, 152, 151, 13, 62, 90, 1, 95, 190, 124, 205, 116, 62, 102, 177, 227, 189, 155, 174, 155, 62, 95, 110, 165, 189, 214, 136, 115, 61, 224, 126, 200, 61, 153, 167, 0, 190, 211, 245, 29, 62, 152, 166, 196, 189, 59, 119, 169, 189, 138, 74, 52, 62, 73, 137, 155, 188, 113, 241, 156, 61, 46, 63, 12, 189, 137, 200, 233, 61, 128, 98, 48, 62, 232, 79, 252, 61, 11, 127, 27, 190, 18, 135, 3, 62, 45, 140, 187, 188, 103, 217, 231, 189, 166, 4, 19, 62, 216, 128, 161, 60, 43, 223, 135, 61, 57, 189, 143, 189, 193, 247, 22, 190, 117, 151, 20, 190, 224, 242, 18, 189, 112, 212, 37, 190, 10, 63, 0, 190, 121, 132, 15, 62, 174, 87, 37, 190, 157, 195, 194, 61, 105, 67, 153, 189, 138, 186, 48, 190, 221, 31, 227, 189, 137, 161, 218, 60, 195, 104, 221, 189, 65, 88, 191, 189, 193, 209, 23, 190, 138, 120, 164, 60, 15, 225, 19, 62, 59, 51, 22, 60, 58, 223, 145, 189, 102, 95, 34, 190, 193, 173, 73, 61, 91, 25, 1, 190, 214, 173, 139, 189, 98, 129, 126, 189, 203, 86, 188, 61, 215, 147, 251, 189, 209, 78, 46, 62, 141, 253, 192, 188, 104, 62, 10, 61, 43, 227, 27, 62, 240, 87, 149, 189, 133, 248, 51, 62, 83, 152, 128, 189, 132, 13, 21, 61, 241, 175, 48, 189, 107, 168, 17, 62, 200, 176, 4, 189, 123, 19, 225, 59, 220, 90, 44, 190, 246, 76, 195, 189, 22, 5, 175, 189, 120, 91, 50, 190, 90, 39, 232, 60, 246, 132, 111, 61, 159, 156, 133, 189, 167, 150, 249, 189, 210, 170, 253, 189, 10, 227, 17, 188, 99, 126, 205, 189, 19, 112, 104, 61, 180, 197, 6, 190, 206, 140, 43, 62, 36, 201, 240, 62, 194, 5, 91, 191, 0, 197, 184, 61, 245, 56, 159, 190, 176, 240, 9, 191, 61, 144, 76, 62, 50, 177, 151, 190, 226, 140, 97, 189, 53, 175, 160, 60, 136, 76, 161, 62, 230, 35, 107, 61, 148, 98, 133, 190, 156, 138, 99, 61, 48, 62, 52, 191, 24, 228, 1, 62, 53, 176, 41, 62, 216, 22, 41, 62, 203, 1, 124, 190, 178, 231, 249, 61, 213, 186, 1, 191, 91, 183, 175, 189, 29, 221, 207, 189, 121, 66, 205, 190, 70, 215, 135, 62, 236, 88, 140, 189, 254, 160, 63, 61, 30, 7, 187, 189, 167, 79, 9, 61, 195, 64, 81, 190, 241, 100, 172, 60, 234, 131, 200, 189, 236, 96, 127, 187, 186, 47, 13, 62, 25, 84, 83, 61, 203, 183, 161, 190, 111, 70, 163, 189, 53, 212, 136, 189, 50, 116, 226, 187, 193, 76, 142, 189, 208, 220, 69, 62, 142, 239, 173, 189, 123, 178, 123, 61, 90, 97, 186, 62, 233, 25, 101, 61, 86, 80, 13, 190, 93, 94, 53, 189, 119, 164, 96, 190, 160, 56, 151, 59, 33, 95, 77, 189, 26, 246, 137, 60, 85, 171, 158, 61, 250, 172, 1, 62, 240, 147, 10, 62, 230, 183, 29, 190, 23, 211, 144, 188, 113, 27, 148, 190, 91, 117, 135, 61, 118, 134, 227, 189, 50, 193, 202, 61, 205, 143, 161, 190, 250, 81, 26, 62, 108, 234, 57, 62, 64, 171, 78, 62, 12, 0, 155, 190, 192, 201, 169, 189, 67, 217, 71, 62, 152, 155, 182, 189, 168, 243, 202, 61, 100, 127, 221, 61, 40, 76, 50, 190, 59, 154, 207, 189, 51, 69, 48, 190, 187, 226, 179, 190, 145, 234, 133, 62, 37, 13, 196, 59, 20, 159, 129, 61, 82, 111, 24, 62, 72, 148, 137, 189, 72, 61, 236, 189, 254, 206, 190, 61, 30, 190, 11, 190, 104, 5, 39, 190, 234, 242, 216, 61, 81, 75, 80, 188, 214, 188, 2, 62, 206, 247, 191, 189, 105, 249, 22, 60, 65, 236, 92, 189, 51, 26, 75, 62, 250, 215, 17, 62, 161, 182, 237, 189, 252, 228, 241, 60, 85, 108, 72, 62, 40, 119, 189, 188, 2, 186, 169, 188, 163, 141, 136, 189, 6, 146, 144, 190, 16, 228, 40, 60, 75, 229, 44, 62, 147, 89, 219, 61, 76, 41, 65, 62, 238, 245, 138, 191, 220, 66, 247, 187, 204, 143, 102, 189, 101, 144, 62, 191, 227, 1, 47, 190, 84, 103, 165, 189, 168, 60, 165, 189, 128, 39, 29, 62, 154, 133, 219, 189, 23, 176, 21, 191, 173, 164, 182, 189, 144, 54, 42, 191, 197, 59, 0, 190, 102, 209, 73, 59, 200, 40, 151, 190, 109, 8, 92, 62, 156, 185, 149, 190, 134, 16, 149, 61, 255, 57, 217, 188, 90, 46, 171, 189, 158, 161, 31, 62, 241, 236, 137, 62, 122, 222, 141, 62, 28, 21, 150, 62, 195, 189, 19, 62, 34, 132, 24, 191, 10, 37, 24, 190, 254, 96, 91, 186, 17, 167, 241, 61, 33, 153, 146, 62, 209, 146, 49, 62, 10, 97, 130, 62, 22, 67, 169, 191, 96, 65, 161, 189, 143, 107, 227, 61, 239, 62, 48, 191, 66, 243, 78, 190, 132, 227, 69, 62, 16, 214, 246, 188, 103, 35, 158, 61, 121, 163, 57, 62, 73, 19, 65, 191, 130, 73, 86, 190, 60, 31, 217, 190, 18, 41, 142, 62, 246, 138, 190, 60, 78, 33, 244, 189, 173, 135, 152, 189, 192, 173, 79, 190, 43, 50, 140, 60, 50, 30, 138, 189, 91, 217, 80, 62, 33, 20, 78, 62, 166, 189, 63, 62, 24, 63, 167, 62, 166, 107, 26, 63, 208, 221, 154, 62, 48, 192, 8, 191, 160, 34, 141, 60, 21, 73, 62, 62, 0, 234, 236, 61, 177, 57, 11, 190, 59, 54, 195, 61, 224, 132, 113, 61, 223, 47, 251, 60, 85, 109, 131, 188, 88, 64, 129, 189, 65, 252, 187, 61, 116, 97, 192, 61, 62, 11, 171, 190, 243, 249, 163, 61, 204, 207, 140, 189, 247, 254, 44, 190, 67, 144, 95, 61, 42, 6, 157, 61, 180, 36, 66, 190, 151, 254, 16, 190, 253, 151, 105, 61, 243, 70, 2, 190, 231, 153, 90, 62, 163, 39, 72, 61, 122, 92, 205, 60, 150, 252, 251, 61, 165, 248, 20, 61, 46, 165, 255, 189, 165, 8, 76, 59, 48, 167, 50, 62, 160, 161, 83, 190, 50, 113, 224, 61, 27, 193, 91, 62, 160, 66, 136, 190, 179, 232, 207, 190, 245, 3, 28, 62, 228, 126, 83, 188, 82, 76, 16, 62, 109, 199, 217, 61, 117, 98, 17, 189, 101, 0, 253, 61, 8, 120, 225, 188, 151, 50, 203, 189, 134, 167, 218, 189, 149, 96, 130, 190, 83, 89, 128, 188, 218, 93, 254, 61, 78, 54, 88, 62, 1, 252, 229, 189, 34, 99, 91, 190, 210, 61, 7, 62, 76, 80, 1, 62, 68, 69, 89, 190, 1, 57, 214, 62, 241, 81, 99, 189, 239, 192, 88, 62, 104, 123, 33, 62, 4, 235, 197, 61, 24, 15, 50, 62, 206, 147, 117, 61, 93, 192, 238, 188, 169, 62, 4, 190, 111, 170, 2, 62, 156, 140, 178, 61, 91, 8, 141, 189, 55, 173, 56, 190, 43, 190, 213, 190, 235, 254, 143, 60, 107, 52, 61, 190, 39, 53, 185, 61, 55, 141, 153, 62, 81, 104, 235, 188, 122, 199, 137, 61, 2, 184, 1, 190, 4, 134, 149, 61, 41, 204, 169, 62, 208, 79, 119, 190, 60, 240, 212, 187, 96, 112, 28, 62, 108, 155, 91, 62, 122, 199, 199, 188, 103, 5, 97, 60, 7, 164, 137, 61, 66, 37, 6, 62, 0, 189, 108, 190, 243, 116, 148, 62, 18, 196, 161, 189, 73, 247, 44, 61, 106, 255, 150, 62, 241, 22, 232, 61, 160, 85, 17, 62, 71, 150, 55, 61, 16, 131, 230, 187, 154, 194, 251, 60, 43, 6, 4, 62, 34, 209, 204, 60, 252, 10, 88, 190, 135, 198, 157, 62, 175, 71, 176, 62, 36, 90, 2, 190, 161, 192, 1, 191, 245, 27, 148, 61, 33, 82, 109, 61, 68, 62, 187, 61, 196, 15, 61, 61, 45, 125, 183, 190, 144, 219, 227, 189, 45, 226, 187, 190, 120, 157, 88, 189, 93, 223, 204, 188, 172, 36, 230, 61, 231, 205, 139, 61, 12, 10, 42, 190, 114, 91, 157, 62, 190, 243, 164, 189, 65, 164, 129, 189, 138, 137, 170, 62, 96, 38, 199, 190, 17, 81, 53, 187, 84, 248, 178, 190, 100, 179, 60, 190, 119, 98, 65, 189, 81, 164, 138, 190, 198, 147, 152, 61, 134, 134, 123, 190, 149, 49, 120, 189, 82, 130, 189, 59, 106, 219, 20, 190, 122, 42, 60, 190, 150, 218, 63, 190, 168, 31, 56, 190, 30, 136, 188, 62, 10, 114, 187, 61, 11, 151, 52, 60, 6, 152, 99, 61, 79, 156, 134, 191, 18, 14, 38, 60, 100, 186, 215, 60, 178, 79, 152, 190, 181, 24, 143, 62, 8, 38, 163, 189, 251, 21, 255, 61, 186, 255, 156, 189, 192, 126, 139, 62, 230, 30, 244, 59, 168, 35, 34, 62, 204, 189, 95, 190, 249, 177, 32, 61, 223, 79, 61, 190, 213, 134, 70, 190, 19, 60, 151, 62, 47, 88, 24, 62, 47, 142, 102, 190, 239, 190, 164, 189, 111, 149, 30, 62, 242, 30, 8, 190, 173, 209, 78, 62, 91, 245, 48, 60, 251, 141, 135, 62, 22, 34, 85, 62, 26, 189, 227, 60, 165, 120, 164, 61, 134, 222, 165, 190, 254, 219, 62, 62, 11, 129, 131, 190, 143, 44, 63, 190, 194, 72, 199, 189, 251, 44, 96, 190, 85, 247, 131, 190, 86, 55, 92, 189, 213, 118, 221, 60, 247, 124, 14, 62, 229, 193, 74, 190, 18, 53, 43, 190, 23, 49, 12, 191, 12, 11, 180, 189, 251, 118, 79, 62, 184, 149, 29, 189, 247, 255, 113, 60, 80, 14, 128, 190, 0, 227, 24, 62, 224, 107, 211, 190, 107, 132, 136, 60, 105, 244, 216, 188, 79, 50, 133, 190, 22, 221, 110, 190, 194, 54, 154, 62, 159, 131, 174, 190, 121, 53, 198, 61, 89, 120, 214, 189, 173, 39, 119, 62, 171, 199, 4, 62, 154, 84, 175, 62, 117, 104, 78, 62, 229, 197, 230, 62, 195, 178, 220, 61, 214, 24, 241, 190, 41, 98, 204, 188, 110, 253, 19, 190, 190, 20, 29, 62, 168, 171, 13, 62, 251, 33, 30, 188, 68, 172, 37, 190, 121, 170, 55, 62, 93, 132, 143, 190, 55, 29, 185, 61, 164, 12, 2, 188, 28, 226, 57, 62, 217, 12, 171, 189, 171, 98, 130, 62, 126, 205, 17, 61, 207, 113, 170, 62, 113, 187, 208, 62, 97, 122, 89, 189, 225, 137, 5, 61, 172, 55, 23, 62, 62, 81, 166, 190, 29, 246, 70, 62, 137, 14, 187, 190, 245, 33, 75, 190, 35, 135, 52, 191, 110, 252, 172, 60, 146, 90, 33, 190, 2, 29, 42, 191, 243, 18, 60, 190, 193, 162, 161, 62, 207, 1, 151, 62, 241, 162, 65, 191, 120, 75, 23, 190, 229, 59, 109, 190, 97, 54, 215, 190, 50, 131, 117, 61, 222, 241, 89, 190, 81, 161, 223, 188, 27, 17, 68, 62, 45, 221, 197, 61, 12, 247, 59, 189, 58, 156, 133, 190, 98, 40, 97, 62, 89, 30, 254, 190, 130, 98, 50, 189, 231, 82, 205, 61, 81, 132, 103, 62, 85, 43, 175, 190, 36, 147, 88, 62, 103, 109, 238, 190, 55, 82, 55, 189, 211, 241, 137, 190, 70, 253, 105, 190, 86, 82, 179, 61, 33, 89, 144, 190, 201, 234, 69, 62, 121, 188, 186, 188, 209, 66, 181, 61, 205, 111, 2, 190, 252, 81, 162, 61, 57, 54, 117, 61, 71, 68, 179, 190, 118, 153, 1, 190, 212, 101, 141, 62, 153, 83, 140, 189, 5, 9, 129, 61, 210, 124, 73, 62, 97, 145, 143, 60, 1, 185, 154, 61, 26, 164, 61, 62, 33, 223, 24, 190, 97, 40, 164, 62, 59, 132, 4, 190, 157, 90, 54, 62, 179, 78, 171, 189, 163, 5, 57, 61, 217, 223, 7, 62, 117, 33, 154, 61, 46, 211, 139, 188, 29, 253, 169, 189, 162, 65, 153, 190, 85, 36, 32, 61, 197, 45, 67, 188, 248, 173, 30, 62, 55, 61, 15, 190, 71, 215, 167, 188, 213, 146, 132, 188, 173, 109, 36, 62, 55, 142, 0, 62, 53, 34, 115, 189, 147, 49, 5, 188, 4, 27, 47, 61, 144, 55, 28, 62, 84, 71, 221, 61, 50, 248, 24, 62, 38, 23, 150, 191, 222, 51, 2, 190, 79, 163, 176, 190, 235, 215, 112, 191, 232, 12, 2, 62, 153, 131, 132, 190, 93, 10, 158, 189, 189, 35, 179, 61, 20, 131, 56, 60, 145, 255, 159, 189, 130, 17, 96, 190, 76, 166, 70, 62, 105, 36, 103, 191, 194, 93, 71, 62, 22, 100, 14, 190, 253, 240, 69, 61, 23, 202, 53, 190, 186, 100, 154, 62, 97, 4, 25, 191, 144, 191, 175, 190, 254, 54, 227, 188, 247, 248, 113, 190, 201, 151, 98, 62, 180, 229, 247, 189, 55, 244, 53, 62, 195, 25, 37, 62, 165, 224, 54, 61, 134, 184, 141, 190, 202, 124, 228, 189, 82, 14, 24, 190, 215, 20, 115, 60, 140, 50, 94, 189, 22, 125, 36, 189, 162, 147, 104, 189, 148, 166, 173, 188, 9, 95, 219, 60, 104, 201, 156, 61, 90, 190, 236, 61, 137, 242, 225, 189, 159, 42, 247, 61, 88, 61, 31, 190, 149, 140, 181, 189, 10, 221, 102, 61, 47, 150, 60, 190, 215, 204, 229, 60, 123, 237, 186, 188, 11, 51, 137, 188, 171, 12, 14, 190, 121, 163, 120, 189, 2, 102, 83, 189, 226, 241, 171, 189, 124, 50, 110, 61, 191, 107, 2, 62, 100, 123, 185, 189, 108, 200, 12, 190, 197, 146, 56, 190, 3, 216, 162, 61, 23, 254, 55, 190, 10, 207, 153, 189, 89, 45, 230, 189, 160, 72, 68, 61, 3, 144, 23, 62, 117, 237, 94, 59, 10, 235, 188, 189, 89, 22, 242, 62, 200, 171, 0, 63, 114, 200, 30, 190, 94, 222, 163, 62, 186, 142, 221, 189, 182, 135, 7, 190, 54, 201, 122, 61, 92, 147, 120, 190, 117, 52, 19, 190, 67, 63, 86, 190, 188, 8, 77, 190, 84, 81, 102, 190, 214, 237, 155, 62, 55, 43, 196, 190, 137, 52, 174, 190, 84, 25, 158, 190, 217, 200, 127, 189, 124, 112, 193, 190, 78, 104, 33, 190, 220, 80, 54, 62, 234, 53, 154, 190, 207, 210, 180, 190, 178, 236, 7, 191, 36, 191, 133, 62, 228, 248, 137, 189, 151, 90, 147, 62, 174, 108, 44, 59, 160, 121, 0, 191, 106, 189, 172, 62, 85, 152, 245, 59, 3, 63, 90, 62, 236, 148, 37, 62, 59, 224, 69, 61, 24, 233, 34, 190, 208, 51, 37, 62, 190, 193, 25, 188, 142, 84, 32, 190, 7, 43, 107, 189, 140, 190, 177, 61, 242, 125, 231, 189, 71, 239, 85, 189, 77, 30, 119, 62, 6, 232, 139, 189, 139, 226, 150, 190, 145, 35, 254, 59, 87, 29, 148, 189, 147, 67, 122, 61, 97, 118, 251, 189, 34, 242, 92, 61, 12, 139, 201, 61, 49, 206, 153, 61, 218, 155, 82, 189, 97, 123, 251, 189, 152, 194, 13, 62, 150, 91, 86, 190, 7, 201, 96, 190, 126, 197, 162, 189, 69, 28, 13, 62, 133, 39, 143, 190, 133, 88, 181, 189, 242, 172, 0, 190, 5, 228, 164, 60, 152, 235, 186, 60, 152, 244, 238, 189, 245, 231, 32, 190, 65, 212, 254, 188, 193, 34, 45, 190, 221, 15, 235, 188, 118, 195, 4, 190, 34, 189, 60, 188, 145, 71, 13, 62, 34, 4, 27, 189, 37, 214, 0, 61, 114, 100, 71, 187, 175, 235, 157, 61, 244, 192, 16, 190, 25, 20, 41, 190, 74, 59, 244, 189, 142, 233, 40, 62, 94, 18, 248, 61, 228, 234, 140, 188, 161, 130, 105, 189, 63, 123, 213, 189, 129, 168, 146, 61, 72, 168, 134, 59, 250, 217, 153, 188, 113, 140, 84, 190, 228, 24, 227, 188, 41, 26, 85, 190, 132, 197, 15, 61, 122, 124, 177, 61, 3, 230, 172, 189, 121, 236, 104, 61, 238, 238, 199, 61, 223, 113, 15, 62, 226, 167, 220, 62, 198, 226, 82, 190, 115, 181, 45, 190, 80, 50, 177, 189, 140, 117, 178, 189, 197, 102, 115, 62, 35, 85, 155, 190, 124, 27, 41, 61, 13, 117, 121, 60, 137, 61, 29, 62, 59, 243, 171, 189, 33, 254, 133, 190, 184, 138, 111, 59, 117, 240, 160, 187, 205, 20, 40, 62, 244, 5, 68, 62, 164, 245, 53, 62, 89, 56, 16, 190, 198, 63, 188, 61, 203, 235, 126, 190, 77, 212, 137, 62, 69, 68, 210, 189, 197, 152, 177, 189, 112, 79, 15, 58, 156, 246, 202, 189, 163, 44, 9, 62, 231, 144, 161, 190, 32, 109, 245, 189, 76, 13, 187, 190, 9, 55, 191, 189, 118, 123, 127, 189, 17, 245, 228, 189, 55, 156, 44, 190, 86, 19, 12, 190, 90, 6, 6, 62, 178, 56, 72, 189, 65, 229, 117, 61, 246, 226, 133, 189, 124, 232, 200, 61, 23, 191, 10, 62, 217, 157, 158, 60, 72, 201, 244, 61, 72, 148, 11, 190, 143, 53, 203, 61, 249, 115, 131, 59, 90, 233, 1, 60, 37, 127, 62, 189, 66, 86, 24, 190, 195, 118, 142, 185, 85, 195, 129, 61, 74, 97, 5, 62, 75, 103, 252, 188, 13, 54, 73, 189, 15, 188, 136, 189, 224, 122, 216, 61, 200, 135, 107, 189, 9, 98, 0, 190, 182, 23, 116, 61, 13, 7, 42, 189, 218, 87, 35, 190, 62, 168, 35, 190, 131, 159, 53, 190, 172, 86, 41, 60, 227, 114, 188, 60, 237, 237, 136, 190, 163, 238, 220, 61, 60, 199, 102, 190, 70, 140, 210, 61, 12, 9, 108, 189, 42, 181, 79, 190, 168, 16, 78, 61, 218, 198, 30, 189, 53, 123, 5, 62, 98, 142, 157, 62, 117, 120, 43, 190, 20, 197, 68, 62, 130, 255, 179, 190, 16, 162, 235, 61, 194, 221, 6, 62, 64, 113, 111, 190, 92, 217, 51, 189, 80, 248, 62, 61, 237, 212, 217, 189, 62, 87, 160, 60, 76, 80, 164, 189, 77, 207, 27, 62, 9, 241, 148, 62, 247, 94, 99, 189, 117, 226, 199, 61, 114, 128, 42, 190, 47, 250, 173, 189, 247, 219, 149, 189, 101, 111, 166, 62, 81, 236, 132, 60, 88, 77, 87, 189, 206, 102, 100, 61, 61, 186, 185, 61, 200, 30, 145, 61, 81, 194, 43, 62, 68, 107, 151, 188, 107, 141, 104, 189, 206, 192, 2, 190, 243, 11, 236, 188, 105, 8, 104, 62, 2, 107, 52, 62, 64, 194, 118, 62, 171, 127, 181, 189, 232, 175, 201, 60, 185, 134, 143, 190, 203, 193, 160, 59, 225, 234, 100, 62, 239, 183, 164, 190, 72, 70, 0, 62, 127, 224, 132, 61, 142, 137, 221, 189, 86, 236, 247, 61, 171, 85, 188, 189, 222, 200, 155, 62, 23, 46, 62, 190, 162, 1, 164, 188, 241, 166, 112, 61, 92, 145, 43, 61, 31, 108, 139, 61, 34, 234, 129, 189, 115, 217, 189, 189, 160, 196, 37, 190, 48, 130, 43, 62, 119, 222, 90, 189, 128, 127, 189, 60, 250, 12, 132, 62, 150, 188, 4, 189, 139, 177, 134, 189, 52, 63, 38, 62, 191, 246, 24, 191, 241, 237, 17, 190, 223, 184, 95, 61, 97, 31, 230, 190, 78, 214, 154, 62, 247, 198, 182, 190, 90, 253, 8, 189, 175, 15, 243, 59, 62, 167, 129, 61, 129, 166, 168, 190, 120, 146, 186, 61, 145, 7, 252, 189, 138, 166, 144, 190, 149, 143, 142, 190, 120, 187, 109, 62, 10, 229, 184, 61, 124, 212, 18, 59, 206, 254, 182, 59, 5, 168, 224, 189, 114, 156, 172, 60, 167, 183, 4, 62, 176, 95, 11, 190, 36, 81, 97, 61, 73, 31, 255, 189, 30, 216, 207, 61, 254, 163, 246, 60, 85, 120, 201, 190, 66, 120, 24, 191, 49, 12, 98, 62, 11, 116, 151, 189, 191, 11, 135, 62, 1, 136, 41, 62, 175, 70, 4, 191, 142, 71, 238, 189, 20, 255, 126, 189, 19, 212, 147, 190, 233, 173, 151, 188, 52, 48, 84, 190, 57, 152, 154, 61, 96, 137, 236, 188, 152, 102, 238, 61, 9, 85, 76, 61, 0, 232, 51, 61, 63, 73, 55, 189, 130, 43, 22, 62, 207, 55, 70, 61, 117, 222, 32, 190, 87, 32, 149, 62, 157, 90, 201, 61, 130, 24, 186, 62, 4, 13, 133, 61, 140, 187, 136, 62, 26, 23, 253, 189, 209, 236, 51, 62, 209, 79, 168, 187, 75, 125, 245, 62, 69, 152, 106, 60, 93, 71, 41, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 169, 96, 61, 60, 193, 247, 189, 230, 93, 170, 59, 55, 108, 27, 62, 172, 84, 231, 61, 221, 11, 216, 189, 87, 181, 221, 60, 75, 103, 96, 62, 226, 136, 148, 189, 216, 192, 185, 60, 152, 140, 118, 62, 76, 23, 45, 189, 67, 221, 101, 62, 191, 176, 141, 61, 183, 169, 31, 190, 31, 27, 210, 189, 79, 174, 66, 62, 100, 210, 49, 61, 148, 93, 118, 61, 184, 224, 5, 190, 107, 33, 64, 62, 164, 171, 161, 61, 120, 21, 75, 190, 184, 104, 33, 189, 160, 35, 147, 190, 163, 94, 236, 188, 101, 231, 75, 62, 66, 199, 255, 60, 219, 42, 171, 190, 195, 245, 237, 189, 18, 21, 66, 62, 30, 13, 20, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 111, 156, 190, 179, 106, 21, 187, 179, 195, 15, 62, 13, 10, 75, 61, 35, 248, 3, 62, 222, 67, 163, 188, 52, 241, 20, 190, 150, 101, 36, 191, 141, 226, 101, 62, 5, 146, 226, 61, 54, 226, 71, 63, 101, 75, 77, 63, 180, 216, 78, 188, 208, 64, 69, 62, 214, 187, 242, 61, 138, 173, 152, 190, 194, 122, 242, 62, 167, 169, 212, 62, 68, 119, 188, 190, 76, 112, 5, 191, 104, 209, 238, 61, 14, 130, 69, 191, 174, 137, 21, 188, 54, 215, 47, 191, 76, 234, 45, 61, 45, 53, 32, 190, 245, 190, 168, 190, 6, 101, 220, 61, 16, 54, 97, 188, 224, 120, 197, 61, 156, 170, 150, 60, 130, 95, 133, 62, 145, 76, 47, 190, 223, 68, 93, 189, 255, 94, 40, 190, 156, 178, 155, 189, 161, 238, 55, 190, 151, 84, 208, 189, 136, 66, 228, 61, 210, 47, 133, 62, 246, 79, 161, 62, 56, 202, 215, 188, 144, 39, 140, 61, 251, 106, 149, 61, 9, 76, 78, 190, 235, 79, 200, 60, 10, 194, 38, 62, 128, 71, 74, 189, 72, 84, 117, 190, 171, 118, 87, 62, 192, 39, 111, 190, 159, 22, 133, 62, 180, 97, 39, 190, 126, 217, 207, 189, 145, 100, 193, 59, 124, 224, 18, 62, 205, 116, 1, 63, 161, 183, 195, 60, 252, 47, 86, 190, 250, 216, 126, 61, 250, 106, 192, 62, 228, 20, 68, 190, 104, 166, 171, 190, 109, 208, 85, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 251, 131, 61, 17, 81, 146, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {187, 246, 96, 63, 91, 125, 153, 191, 159, 254, 6, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {173, 70, 55, 64, 239, 254, 49, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0062/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}