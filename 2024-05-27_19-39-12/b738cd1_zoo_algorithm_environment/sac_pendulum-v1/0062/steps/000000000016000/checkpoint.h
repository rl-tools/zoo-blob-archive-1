// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 131, 10, 189, 134, 106, 40, 63, 10, 221, 244, 62, 26, 58, 36, 63, 6, 167, 134, 63, 143, 216, 176, 62, 57, 124, 34, 63, 215, 12, 128, 191, 181, 232, 8, 63, 133, 40, 89, 191, 139, 56, 37, 191, 88, 166, 185, 186, 3, 48, 161, 61, 212, 121, 98, 191, 88, 79, 168, 190, 244, 52, 116, 188, 131, 41, 218, 189, 121, 14, 221, 62, 235, 249, 202, 190, 172, 49, 109, 63, 59, 242, 82, 191, 5, 32, 131, 190, 77, 93, 27, 190, 76, 75, 36, 191, 130, 57, 103, 63, 23, 94, 145, 59, 169, 110, 88, 62, 233, 111, 80, 61, 72, 239, 72, 191, 247, 216, 100, 191, 92, 202, 153, 63, 158, 17, 161, 61, 104, 230, 48, 190, 140, 173, 20, 63, 237, 62, 7, 63, 131, 113, 135, 62, 53, 6, 97, 190, 115, 179, 156, 190, 242, 139, 26, 191, 104, 118, 182, 190, 76, 185, 119, 63, 56, 149, 40, 61, 122, 231, 179, 62, 168, 47, 176, 60, 247, 175, 45, 63, 86, 237, 198, 189, 167, 194, 132, 191, 5, 164, 76, 191, 242, 248, 154, 190, 115, 199, 164, 63, 51, 216, 1, 62, 47, 48, 63, 188, 0, 8, 128, 191, 49, 207, 199, 190, 253, 201, 114, 61, 27, 140, 38, 191, 230, 170, 141, 190, 208, 2, 48, 191, 72, 127, 97, 63, 86, 152, 161, 190, 214, 54, 195, 62, 22, 222, 133, 63, 228, 194, 161, 190, 119, 238, 191, 62, 92, 198, 140, 63, 117, 145, 185, 62, 145, 121, 9, 63, 43, 0, 154, 190, 162, 86, 254, 190, 116, 203, 8, 63, 116, 97, 20, 191, 53, 117, 158, 190, 231, 212, 225, 190, 39, 88, 74, 63, 90, 181, 248, 190, 187, 228, 210, 61, 50, 88, 132, 191, 31, 182, 130, 189, 235, 173, 102, 191, 182, 187, 13, 190, 13, 239, 207, 190, 216, 107, 21, 191, 174, 173, 36, 191, 61, 132, 82, 190, 204, 78, 63, 191, 210, 196, 85, 189, 107, 131, 207, 189, 8, 101, 18, 61, 99, 78, 173, 191, 17, 106, 152, 190, 49, 102, 83, 191, 255, 251, 36, 191, 186, 98, 137, 189, 60, 10, 224, 60, 191, 196, 146, 191, 59, 47, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 153, 43, 191, 113, 169, 209, 189, 228, 37, 213, 62, 246, 123, 254, 61, 52, 181, 163, 190, 142, 76, 128, 190, 92, 181, 220, 190, 74, 56, 253, 190, 162, 36, 177, 190, 7, 166, 203, 62, 13, 105, 192, 189, 29, 145, 47, 191, 25, 42, 135, 190, 181, 135, 204, 62, 12, 142, 10, 61, 6, 114, 7, 63, 91, 239, 222, 190, 3, 76, 236, 62, 234, 219, 111, 190, 221, 229, 130, 190, 54, 236, 11, 190, 214, 9, 108, 62, 83, 60, 21, 63, 64, 99, 22, 191, 196, 146, 207, 62, 20, 195, 229, 62, 89, 13, 163, 61, 108, 168, 253, 62, 115, 37, 46, 63, 93, 118, 130, 190, 248, 129, 217, 62, 40, 15, 221, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 104, 89, 190, 223, 106, 150, 61, 73, 0, 187, 190, 220, 185, 17, 190, 34, 179, 164, 189, 157, 219, 149, 191, 87, 172, 50, 189, 107, 128, 82, 190, 46, 134, 88, 191, 71, 97, 9, 62, 92, 100, 43, 62, 171, 167, 9, 190, 165, 192, 160, 190, 38, 2, 13, 190, 114, 114, 213, 190, 81, 186, 255, 61, 76, 99, 202, 190, 102, 30, 19, 62, 255, 6, 73, 190, 117, 65, 61, 61, 49, 230, 186, 190, 83, 215, 108, 191, 5, 16, 229, 189, 253, 126, 129, 190, 31, 247, 143, 59, 158, 243, 10, 60, 122, 176, 123, 188, 217, 218, 80, 62, 106, 182, 65, 190, 147, 5, 5, 191, 84, 243, 136, 61, 73, 80, 194, 61, 158, 114, 27, 191, 215, 139, 235, 61, 54, 42, 208, 61, 1, 206, 24, 61, 23, 89, 66, 190, 198, 43, 16, 190, 38, 73, 192, 190, 187, 169, 77, 190, 41, 42, 119, 62, 180, 97, 169, 61, 125, 168, 217, 62, 61, 235, 90, 191, 171, 211, 125, 190, 80, 104, 180, 191, 100, 39, 106, 189, 185, 184, 1, 62, 235, 190, 76, 190, 122, 171, 87, 62, 94, 134, 195, 190, 43, 195, 137, 190, 37, 152, 200, 189, 30, 175, 51, 189, 71, 230, 92, 61, 157, 66, 243, 190, 77, 3, 99, 190, 221, 23, 158, 61, 190, 198, 5, 61, 6, 116, 8, 190, 183, 61, 159, 189, 124, 120, 0, 189, 54, 101, 111, 61, 31, 244, 113, 62, 80, 66, 18, 190, 35, 188, 5, 62, 144, 199, 160, 61, 64, 9, 86, 61, 136, 92, 19, 62, 36, 226, 8, 189, 116, 248, 188, 189, 7, 118, 227, 189, 64, 170, 8, 190, 242, 132, 22, 188, 89, 22, 232, 189, 78, 14, 243, 61, 118, 99, 43, 189, 222, 166, 170, 188, 116, 20, 36, 190, 6, 114, 4, 190, 46, 12, 231, 189, 199, 40, 245, 60, 106, 50, 29, 62, 255, 19, 150, 61, 67, 81, 22, 190, 187, 125, 34, 189, 96, 25, 75, 189, 244, 196, 158, 61, 9, 72, 4, 190, 13, 143, 102, 61, 205, 241, 31, 190, 120, 50, 29, 190, 33, 39, 42, 190, 252, 106, 238, 61, 169, 46, 130, 61, 217, 83, 94, 190, 159, 160, 140, 190, 55, 197, 160, 190, 214, 67, 218, 61, 51, 60, 8, 190, 52, 237, 236, 190, 111, 153, 133, 61, 229, 250, 45, 190, 189, 244, 116, 190, 226, 245, 68, 61, 84, 54, 124, 189, 33, 92, 187, 62, 160, 184, 56, 191, 78, 174, 179, 189, 232, 13, 202, 190, 112, 59, 163, 189, 138, 73, 35, 62, 251, 72, 3, 191, 151, 21, 209, 189, 231, 200, 186, 188, 253, 12, 131, 62, 108, 90, 154, 62, 20, 16, 155, 189, 95, 118, 65, 62, 202, 112, 50, 191, 140, 222, 33, 62, 206, 62, 39, 62, 222, 191, 71, 61, 183, 146, 210, 189, 6, 19, 13, 62, 58, 228, 213, 189, 127, 225, 7, 62, 35, 219, 75, 62, 78, 246, 142, 190, 192, 4, 234, 189, 20, 134, 66, 61, 231, 82, 61, 60, 208, 35, 1, 190, 183, 14, 130, 61, 28, 250, 50, 190, 68, 85, 72, 190, 186, 78, 111, 188, 226, 164, 181, 61, 23, 146, 194, 61, 144, 131, 7, 191, 63, 170, 147, 61, 223, 40, 4, 190, 224, 193, 76, 62, 21, 239, 198, 61, 229, 26, 99, 189, 28, 102, 72, 189, 94, 240, 30, 189, 67, 147, 67, 190, 170, 255, 249, 61, 230, 32, 97, 190, 30, 140, 103, 62, 160, 38, 176, 190, 231, 165, 138, 189, 48, 65, 209, 61, 86, 205, 16, 190, 25, 247, 232, 61, 219, 189, 230, 189, 3, 193, 175, 190, 22, 151, 82, 62, 106, 104, 26, 189, 113, 241, 156, 61, 46, 63, 12, 189, 137, 200, 233, 61, 152, 179, 47, 62, 162, 22, 245, 61, 11, 127, 27, 190, 6, 109, 244, 61, 71, 229, 251, 188, 103, 217, 231, 189, 1, 9, 8, 62, 216, 128, 161, 60, 43, 223, 135, 61, 66, 191, 157, 189, 123, 112, 26, 190, 117, 151, 20, 190, 126, 229, 49, 189, 223, 244, 37, 190, 126, 100, 4, 190, 227, 218, 11, 62, 233, 139, 41, 190, 24, 91, 188, 61, 105, 67, 153, 189, 64, 184, 52, 190, 71, 87, 231, 189, 233, 66, 156, 60, 195, 104, 221, 189, 178, 66, 205, 189, 7, 239, 26, 190, 76, 8, 129, 60, 44, 172, 17, 62, 52, 191, 209, 59, 249, 22, 149, 189, 102, 95, 34, 190, 193, 173, 73, 61, 91, 25, 1, 190, 214, 173, 139, 189, 98, 129, 126, 189, 203, 86, 188, 61, 215, 147, 251, 189, 209, 78, 46, 62, 141, 253, 192, 188, 104, 62, 10, 61, 43, 227, 27, 62, 240, 87, 149, 189, 133, 248, 51, 62, 83, 152, 128, 189, 132, 13, 21, 61, 241, 175, 48, 189, 107, 168, 17, 62, 200, 176, 4, 189, 123, 19, 225, 59, 220, 90, 44, 190, 246, 76, 195, 189, 22, 5, 175, 189, 120, 91, 50, 190, 90, 39, 232, 60, 246, 132, 111, 61, 159, 156, 133, 189, 167, 150, 249, 189, 210, 170, 253, 189, 10, 227, 17, 188, 99, 126, 205, 189, 19, 112, 104, 61, 180, 197, 6, 190, 196, 26, 140, 62, 176, 183, 232, 62, 48, 16, 128, 191, 227, 44, 49, 62, 235, 65, 150, 190, 94, 110, 231, 190, 91, 37, 4, 62, 138, 217, 130, 190, 85, 141, 181, 190, 220, 139, 153, 59, 145, 156, 111, 62, 134, 224, 83, 61, 150, 42, 121, 190, 22, 85, 20, 189, 109, 171, 55, 191, 216, 102, 253, 61, 2, 164, 34, 190, 98, 209, 38, 62, 170, 42, 109, 190, 224, 225, 7, 190, 170, 191, 63, 191, 145, 110, 17, 191, 206, 61, 79, 190, 217, 54, 163, 190, 131, 169, 58, 62, 23, 10, 91, 189, 24, 247, 114, 187, 176, 141, 230, 189, 92, 31, 194, 188, 136, 73, 94, 190, 173, 180, 163, 187, 173, 97, 66, 188, 218, 126, 142, 189, 37, 48, 247, 61, 60, 174, 30, 61, 17, 32, 144, 191, 133, 38, 56, 190, 38, 177, 52, 189, 231, 108, 9, 63, 168, 59, 21, 62, 11, 89, 95, 62, 174, 174, 162, 60, 151, 38, 176, 61, 12, 110, 200, 62, 110, 36, 75, 62, 108, 240, 50, 190, 72, 84, 108, 189, 162, 85, 168, 190, 17, 39, 128, 188, 35, 64, 186, 190, 62, 191, 252, 61, 189, 44, 152, 62, 223, 0, 117, 62, 250, 82, 181, 61, 180, 235, 157, 188, 21, 142, 196, 188, 221, 109, 245, 189, 188, 13, 84, 188, 190, 223, 44, 190, 212, 179, 116, 60, 159, 240, 112, 190, 28, 56, 53, 189, 202, 212, 217, 187, 202, 85, 119, 61, 202, 150, 196, 190, 50, 154, 154, 190, 161, 90, 121, 62, 10, 77, 132, 190, 100, 253, 190, 190, 134, 121, 243, 61, 85, 167, 175, 62, 161, 90, 34, 61, 247, 92, 187, 190, 57, 165, 188, 190, 18, 235, 123, 62, 188, 255, 213, 189, 220, 136, 242, 61, 33, 65, 15, 61, 181, 75, 52, 189, 97, 38, 253, 190, 92, 158, 238, 61, 96, 48, 253, 190, 13, 169, 248, 190, 225, 205, 170, 62, 73, 26, 150, 189, 121, 126, 64, 61, 26, 226, 205, 189, 160, 127, 91, 189, 96, 224, 145, 188, 150, 205, 122, 62, 26, 89, 195, 59, 170, 167, 45, 188, 43, 28, 165, 59, 195, 27, 59, 63, 87, 9, 4, 61, 64, 110, 126, 62, 55, 141, 104, 61, 100, 78, 27, 190, 139, 123, 45, 61, 146, 110, 29, 62, 147, 89, 219, 61, 32, 229, 83, 62, 10, 98, 1, 191, 117, 191, 51, 63, 144, 245, 239, 190, 74, 201, 109, 191, 192, 219, 36, 190, 160, 39, 182, 187, 56, 62, 247, 62, 132, 38, 145, 62, 173, 159, 23, 189, 22, 137, 194, 191, 149, 62, 220, 61, 187, 5, 246, 191, 110, 244, 43, 61, 109, 78, 116, 61, 4, 22, 113, 190, 93, 185, 184, 62, 86, 245, 51, 191, 134, 16, 149, 61, 73, 38, 81, 190, 95, 244, 170, 190, 57, 129, 240, 189, 117, 43, 149, 62, 9, 165, 208, 62, 253, 114, 11, 63, 139, 229, 30, 62, 222, 66, 47, 191, 142, 174, 29, 190, 122, 150, 181, 59, 1, 230, 250, 61, 109, 161, 30, 62, 113, 237, 67, 62, 183, 139, 106, 62, 189, 39, 173, 191, 195, 75, 178, 62, 7, 249, 107, 189, 146, 135, 141, 191, 120, 107, 50, 190, 248, 247, 149, 61, 211, 183, 128, 62, 199, 77, 238, 61, 241, 198, 67, 62, 221, 184, 160, 191, 136, 88, 14, 189, 155, 94, 100, 191, 61, 2, 145, 62, 117, 209, 83, 59, 164, 131, 125, 190, 172, 183, 252, 188, 181, 166, 136, 62, 43, 50, 140, 60, 173, 63, 154, 190, 3, 182, 3, 62, 49, 41, 196, 189, 122, 38, 237, 61, 226, 166, 202, 62, 219, 56, 21, 63, 49, 77, 96, 62, 190, 217, 202, 190, 24, 175, 120, 61, 82, 83, 211, 61, 253, 47, 225, 61, 21, 45, 132, 189, 109, 21, 124, 190, 54, 58, 95, 60, 62, 236, 169, 189, 83, 53, 42, 190, 12, 57, 1, 59, 222, 87, 20, 189, 72, 191, 7, 190, 106, 27, 205, 190, 230, 83, 216, 189, 180, 198, 222, 189, 80, 144, 70, 190, 90, 143, 18, 188, 26, 57, 179, 61, 28, 241, 14, 190, 228, 128, 182, 190, 152, 82, 131, 62, 176, 209, 130, 189, 26, 94, 18, 62, 212, 179, 166, 189, 24, 65, 206, 190, 54, 133, 187, 61, 73, 23, 30, 62, 226, 10, 158, 189, 48, 110, 197, 189, 1, 75, 172, 188, 136, 211, 42, 191, 166, 52, 232, 61, 224, 201, 136, 62, 65, 4, 113, 190, 137, 53, 1, 191, 96, 239, 25, 62, 219, 147, 211, 59, 68, 34, 218, 189, 137, 125, 10, 62, 89, 222, 142, 60, 157, 81, 0, 61, 117, 67, 153, 189, 237, 134, 207, 189, 220, 164, 72, 61, 98, 58, 202, 190, 109, 255, 176, 189, 143, 204, 3, 189, 162, 78, 101, 62, 188, 13, 65, 190, 243, 22, 186, 60, 207, 247, 24, 61, 9, 239, 63, 189, 125, 63, 135, 190, 130, 165, 231, 62, 227, 86, 128, 189, 234, 104, 157, 62, 60, 69, 58, 61, 187, 175, 233, 61, 31, 49, 169, 61, 241, 187, 172, 188, 176, 96, 57, 190, 3, 123, 31, 190, 204, 206, 11, 190, 161, 101, 209, 186, 213, 6, 255, 189, 124, 143, 195, 190, 15, 190, 37, 191, 50, 20, 20, 61, 172, 7, 195, 190, 180, 61, 15, 189, 82, 37, 130, 62, 15, 113, 7, 189, 18, 115, 166, 187, 175, 32, 53, 189, 142, 35, 198, 61, 234, 60, 40, 63, 164, 211, 220, 61, 208, 23, 201, 189, 180, 164, 91, 188, 22, 236, 75, 62, 81, 118, 153, 189, 51, 22, 37, 190, 206, 236, 69, 189, 205, 67, 77, 61, 15, 98, 223, 190, 11, 230, 131, 62, 87, 180, 27, 190, 50, 191, 235, 189, 81, 126, 156, 62, 67, 101, 26, 62, 118, 41, 41, 62, 66, 141, 4, 189, 58, 210, 30, 61, 104, 222, 200, 60, 230, 35, 101, 62, 19, 93, 167, 59, 189, 214, 248, 189, 180, 164, 98, 62, 97, 207, 87, 62, 48, 127, 87, 190, 218, 22, 23, 191, 252, 0, 161, 189, 63, 19, 45, 61, 163, 215, 153, 62, 225, 101, 68, 61, 8, 2, 184, 190, 231, 232, 168, 190, 230, 170, 253, 61, 219, 157, 31, 190, 40, 252, 140, 189, 153, 249, 92, 62, 147, 217, 59, 188, 115, 170, 232, 190, 113, 39, 159, 62, 202, 67, 180, 190, 20, 156, 74, 190, 15, 239, 65, 63, 209, 167, 159, 190, 208, 227, 178, 189, 108, 231, 176, 189, 18, 89, 12, 191, 141, 94, 198, 62, 144, 140, 141, 190, 156, 235, 19, 63, 146, 61, 162, 190, 130, 219, 203, 61, 75, 165, 70, 190, 232, 44, 226, 190, 180, 14, 43, 191, 11, 49, 52, 190, 11, 66, 128, 190, 244, 34, 177, 62, 235, 124, 35, 188, 187, 247, 66, 191, 246, 106, 86, 61, 223, 119, 109, 191, 39, 83, 150, 59, 55, 191, 43, 190, 254, 194, 195, 190, 33, 84, 55, 62, 239, 1, 131, 190, 78, 227, 15, 62, 47, 39, 22, 190, 173, 238, 139, 62, 3, 49, 100, 190, 64, 202, 190, 62, 71, 119, 241, 190, 62, 213, 150, 190, 168, 45, 136, 61, 123, 217, 251, 190, 139, 93, 139, 62, 32, 28, 252, 61, 52, 80, 107, 189, 113, 13, 199, 190, 201, 173, 196, 61, 163, 16, 89, 190, 99, 100, 109, 61, 66, 240, 229, 188, 221, 192, 125, 61, 37, 47, 172, 61, 9, 29, 113, 61, 116, 136, 44, 190, 107, 212, 186, 190, 155, 24, 88, 62, 2, 134, 83, 190, 115, 225, 9, 191, 158, 11, 47, 190, 67, 9, 8, 191, 115, 57, 233, 190, 202, 1, 19, 62, 19, 200, 164, 61, 228, 238, 228, 62, 34, 110, 73, 189, 214, 109, 140, 190, 88, 252, 118, 191, 45, 59, 215, 189, 57, 148, 14, 62, 54, 75, 198, 190, 167, 3, 147, 189, 83, 85, 239, 190, 54, 193, 209, 62, 244, 252, 149, 62, 176, 198, 38, 188, 69, 24, 141, 62, 29, 156, 44, 191, 73, 99, 20, 62, 153, 2, 189, 62, 96, 91, 143, 189, 125, 20, 58, 62, 84, 68, 139, 61, 196, 175, 193, 60, 208, 147, 75, 62, 122, 188, 255, 62, 23, 6, 91, 62, 224, 92, 10, 63, 73, 68, 116, 62, 87, 122, 28, 191, 198, 208, 42, 189, 108, 199, 193, 189, 88, 41, 26, 62, 200, 17, 52, 62, 51, 211, 199, 62, 161, 17, 167, 190, 219, 101, 155, 62, 196, 14, 12, 190, 5, 74, 228, 61, 32, 72, 60, 61, 176, 185, 128, 62, 36, 102, 84, 190, 95, 53, 37, 62, 3, 134, 135, 188, 72, 61, 167, 62, 32, 64, 33, 63, 6, 100, 67, 62, 75, 251, 231, 61, 90, 142, 195, 61, 49, 195, 208, 190, 114, 184, 172, 62, 189, 114, 51, 190, 81, 154, 80, 189, 159, 20, 145, 191, 79, 232, 176, 190, 43, 146, 229, 190, 113, 193, 109, 191, 161, 26, 134, 190, 73, 140, 171, 62, 141, 61, 151, 62, 101, 243, 199, 190, 204, 123, 116, 189, 17, 157, 217, 190, 202, 226, 249, 190, 230, 155, 158, 61, 27, 111, 94, 190, 20, 70, 252, 188, 149, 209, 16, 62, 248, 170, 155, 190, 66, 252, 61, 189, 209, 165, 156, 190, 94, 65, 150, 62, 134, 208, 52, 191, 222, 142, 255, 189, 73, 242, 221, 188, 116, 68, 16, 62, 215, 125, 232, 190, 154, 169, 128, 62, 69, 237, 223, 190, 192, 134, 195, 190, 244, 51, 166, 190, 182, 106, 142, 190, 48, 186, 237, 61, 159, 85, 177, 190, 207, 81, 85, 62, 63, 6, 172, 59, 209, 180, 28, 62, 94, 223, 11, 191, 233, 52, 10, 62, 35, 175, 102, 189, 223, 193, 205, 190, 125, 110, 204, 190, 236, 58, 124, 62, 214, 80, 146, 61, 4, 201, 55, 189, 71, 245, 67, 62, 16, 48, 158, 60, 250, 187, 61, 61, 96, 138, 247, 61, 176, 127, 32, 190, 142, 210, 148, 62, 247, 142, 126, 191, 34, 61, 20, 62, 252, 94, 138, 190, 107, 6, 71, 187, 125, 193, 227, 61, 50, 196, 103, 190, 74, 222, 182, 188, 92, 180, 24, 190, 207, 247, 54, 190, 81, 251, 211, 189, 204, 21, 22, 190, 133, 67, 66, 62, 153, 212, 132, 190, 142, 24, 187, 188, 170, 157, 112, 59, 52, 198, 130, 62, 9, 14, 9, 62, 152, 235, 193, 188, 63, 136, 38, 190, 184, 179, 227, 61, 157, 34, 76, 62, 232, 50, 235, 61, 128, 239, 84, 189, 226, 248, 132, 191, 185, 235, 233, 188, 114, 207, 168, 190, 36, 147, 53, 191, 35, 189, 32, 62, 200, 225, 76, 190, 81, 28, 73, 190, 211, 70, 222, 61, 183, 87, 184, 188, 145, 255, 159, 189, 169, 163, 50, 190, 92, 126, 110, 62, 124, 76, 129, 191, 101, 130, 83, 62, 74, 25, 4, 191, 237, 47, 64, 61, 78, 205, 8, 190, 22, 101, 161, 62, 168, 13, 22, 191, 8, 146, 130, 191, 82, 250, 230, 188, 161, 4, 140, 190, 246, 198, 114, 62, 113, 16, 39, 190, 61, 138, 91, 62, 87, 188, 94, 62, 142, 27, 210, 61, 215, 251, 172, 190, 56, 203, 65, 189, 89, 2, 21, 190, 215, 20, 115, 60, 252, 58, 94, 189, 170, 254, 38, 189, 153, 43, 156, 189, 106, 67, 243, 188, 9, 95, 219, 60, 0, 188, 26, 61, 80, 167, 190, 61, 251, 208, 225, 189, 61, 165, 215, 61, 36, 199, 31, 190, 149, 140, 181, 189, 114, 114, 24, 61, 90, 126, 116, 190, 215, 204, 229, 60, 189, 221, 249, 188, 98, 82, 60, 189, 55, 245, 24, 190, 238, 171, 168, 189, 173, 153, 229, 189, 194, 231, 31, 190, 195, 28, 110, 61, 30, 95, 197, 61, 151, 41, 198, 189, 215, 2, 63, 190, 177, 143, 67, 190, 164, 12, 61, 61, 130, 148, 77, 190, 233, 47, 237, 189, 221, 130, 195, 189, 5, 240, 207, 60, 59, 174, 30, 62, 36, 192, 252, 187, 215, 139, 94, 189, 158, 37, 244, 62, 70, 0, 21, 63, 148, 16, 69, 62, 247, 35, 155, 62, 165, 6, 250, 62, 4, 74, 211, 190, 153, 73, 112, 62, 191, 28, 138, 60, 117, 152, 154, 189, 185, 77, 99, 189, 83, 43, 21, 191, 92, 73, 215, 189, 218, 227, 144, 62, 11, 158, 230, 188, 128, 219, 4, 191, 17, 121, 140, 61, 182, 134, 42, 61, 113, 10, 171, 190, 37, 43, 22, 190, 151, 75, 50, 62, 62, 252, 146, 190, 13, 33, 127, 61, 0, 66, 147, 189, 150, 114, 178, 62, 47, 56, 163, 61, 238, 55, 211, 62, 96, 16, 81, 61, 244, 27, 135, 190, 238, 48, 239, 62, 153, 123, 94, 60, 239, 103, 164, 62, 50, 105, 132, 62, 247, 180, 2, 62, 154, 173, 98, 190, 166, 165, 9, 62, 37, 35, 196, 61, 239, 53, 254, 189, 198, 58, 73, 60, 13, 70, 172, 62, 249, 126, 7, 190, 186, 227, 134, 62, 7, 136, 15, 63, 60, 67, 5, 188, 131, 144, 229, 190, 135, 142, 145, 61, 56, 226, 231, 189, 38, 206, 148, 189, 166, 153, 15, 190, 201, 206, 39, 60, 196, 115, 55, 60, 64, 247, 210, 62, 40, 45, 107, 188, 35, 74, 187, 190, 254, 93, 225, 61, 170, 200, 89, 63, 54, 74, 173, 190, 201, 50, 69, 189, 204, 172, 84, 190, 227, 111, 67, 191, 71, 108, 220, 189, 117, 156, 4, 191, 231, 121, 21, 191, 152, 235, 186, 60, 152, 244, 238, 189, 245, 231, 32, 190, 65, 212, 254, 188, 193, 34, 45, 190, 221, 15, 235, 188, 118, 195, 4, 190, 34, 189, 60, 188, 145, 71, 13, 62, 34, 4, 27, 189, 37, 214, 0, 61, 114, 100, 71, 187, 175, 235, 157, 61, 244, 192, 16, 190, 25, 20, 41, 190, 74, 59, 244, 189, 142, 233, 40, 62, 94, 18, 248, 61, 228, 234, 140, 188, 161, 130, 105, 189, 63, 123, 213, 189, 129, 168, 146, 61, 72, 168, 134, 59, 250, 217, 153, 188, 113, 140, 84, 190, 228, 24, 227, 188, 41, 26, 85, 190, 132, 197, 15, 61, 122, 124, 177, 61, 3, 230, 172, 189, 121, 236, 104, 61, 238, 238, 199, 61, 48, 214, 32, 62, 155, 37, 7, 63, 77, 113, 145, 189, 74, 239, 143, 190, 219, 127, 152, 190, 5, 226, 239, 188, 122, 123, 185, 62, 41, 89, 28, 190, 232, 7, 223, 62, 103, 189, 70, 190, 255, 27, 150, 62, 144, 223, 101, 61, 190, 47, 29, 190, 207, 25, 189, 61, 122, 89, 153, 61, 82, 110, 52, 189, 56, 137, 226, 61, 160, 2, 109, 61, 5, 224, 82, 190, 136, 146, 202, 62, 93, 249, 111, 61, 240, 16, 177, 62, 75, 232, 37, 190, 22, 4, 3, 191, 205, 103, 132, 62, 80, 138, 198, 61, 19, 67, 203, 62, 67, 41, 47, 191, 214, 248, 236, 190, 162, 177, 148, 191, 163, 244, 154, 190, 149, 122, 18, 190, 56, 127, 19, 190, 108, 243, 130, 190, 54, 7, 149, 190, 148, 211, 152, 61, 28, 248, 15, 57, 23, 69, 52, 61, 205, 224, 182, 187, 250, 73, 19, 62, 194, 83, 169, 61, 37, 238, 219, 59, 25, 6, 138, 191, 37, 216, 237, 190, 212, 18, 2, 62, 19, 23, 44, 62, 229, 198, 8, 62, 163, 205, 202, 189, 96, 36, 0, 59, 105, 104, 133, 189, 237, 69, 164, 61, 6, 166, 154, 62, 28, 81, 159, 61, 42, 26, 208, 59, 159, 143, 58, 190, 111, 43, 178, 61, 28, 248, 204, 60, 118, 12, 120, 191, 2, 60, 8, 62, 226, 22, 198, 58, 42, 57, 234, 188, 24, 121, 200, 190, 176, 228, 7, 190, 190, 121, 13, 190, 24, 71, 45, 190, 22, 239, 57, 190, 95, 223, 24, 62, 216, 31, 186, 190, 89, 179, 180, 61, 185, 41, 24, 190, 34, 136, 71, 190, 5, 250, 1, 190, 106, 134, 104, 190, 53, 130, 197, 59, 194, 139, 181, 62, 57, 99, 4, 191, 189, 196, 181, 59, 166, 144, 126, 191, 83, 149, 165, 61, 36, 233, 15, 62, 127, 195, 228, 190, 123, 167, 248, 188, 220, 235, 92, 189, 126, 58, 112, 191, 6, 156, 38, 62, 73, 184, 195, 189, 253, 64, 96, 62, 119, 248, 211, 62, 215, 145, 198, 190, 154, 42, 98, 62, 28, 132, 71, 191, 232, 183, 210, 189, 140, 150, 125, 190, 25, 137, 239, 62, 138, 36, 141, 60, 163, 192, 134, 61, 73, 74, 166, 189, 138, 138, 207, 189, 70, 87, 192, 61, 234, 175, 113, 62, 154, 174, 73, 190, 192, 150, 139, 189, 188, 196, 248, 189, 201, 183, 187, 189, 59, 132, 180, 62, 157, 173, 29, 62, 120, 148, 173, 62, 89, 123, 119, 191, 120, 7, 63, 189, 97, 85, 2, 191, 109, 161, 11, 189, 95, 66, 74, 62, 66, 22, 61, 191, 101, 97, 245, 61, 153, 235, 62, 189, 130, 139, 160, 58, 233, 5, 222, 61, 247, 210, 109, 190, 187, 214, 189, 62, 225, 114, 196, 190, 40, 193, 117, 189, 27, 178, 18, 62, 197, 207, 174, 61, 45, 20, 50, 61, 114, 11, 252, 189, 33, 55, 159, 190, 38, 170, 42, 190, 252, 130, 108, 62, 179, 187, 185, 187, 239, 251, 86, 60, 11, 118, 137, 62, 208, 52, 62, 190, 41, 28, 100, 190, 136, 136, 6, 62, 12, 44, 127, 191, 190, 77, 204, 186, 167, 49, 1, 60, 100, 156, 20, 191, 40, 170, 13, 61, 39, 193, 231, 190, 112, 198, 212, 187, 22, 233, 233, 189, 43, 29, 113, 61, 205, 51, 143, 190, 126, 30, 37, 62, 86, 29, 197, 61, 171, 0, 215, 190, 188, 218, 208, 61, 157, 138, 212, 62, 47, 39, 190, 61, 22, 229, 63, 62, 6, 113, 244, 189, 109, 226, 219, 189, 173, 203, 248, 61, 64, 115, 69, 61, 229, 28, 10, 191, 95, 70, 14, 191, 240, 134, 112, 190, 102, 81, 173, 189, 14, 116, 24, 62, 90, 64, 206, 190, 252, 95, 24, 191, 88, 14, 97, 62, 113, 192, 68, 190, 182, 66, 161, 190, 189, 232, 30, 62, 236, 250, 3, 191, 172, 175, 131, 190, 167, 112, 9, 190, 112, 93, 218, 190, 34, 132, 10, 62, 226, 66, 160, 190, 47, 20, 33, 189, 223, 158, 36, 61, 169, 166, 14, 62, 146, 186, 160, 190, 178, 158, 94, 62, 160, 139, 230, 190, 70, 151, 62, 190, 66, 31, 17, 190, 7, 118, 222, 190, 232, 103, 167, 62, 107, 148, 235, 61, 53, 236, 190, 62, 105, 52, 138, 190, 208, 189, 238, 61, 50, 55, 242, 189, 122, 74, 28, 62, 117, 127, 21, 62, 80, 20, 149, 62, 236, 224, 138, 189, 43, 170, 254, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 101, 155, 187, 99, 207, 19, 60, 56, 174, 188, 188, 94, 134, 98, 62, 8, 123, 186, 61, 34, 4, 220, 189, 87, 181, 221, 60, 175, 26, 135, 61, 115, 224, 184, 189, 149, 44, 103, 61, 27, 217, 190, 62, 109, 107, 94, 61, 192, 253, 101, 62, 43, 234, 182, 61, 20, 248, 16, 190, 30, 167, 12, 190, 206, 155, 62, 62, 185, 76, 132, 62, 178, 119, 141, 61, 102, 24, 201, 189, 166, 53, 82, 62, 229, 134, 37, 61, 235, 248, 126, 190, 73, 166, 253, 188, 139, 74, 193, 190, 163, 94, 236, 188, 165, 27, 80, 62, 143, 169, 63, 61, 11, 61, 176, 190, 95, 111, 154, 189, 194, 74, 13, 62, 105, 219, 132, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 246, 94, 190, 157, 79, 235, 61, 255, 2, 15, 62, 203, 101, 30, 62, 110, 22, 102, 61, 24, 20, 160, 188, 52, 241, 20, 190, 62, 204, 224, 190, 203, 58, 105, 62, 114, 49, 145, 62, 67, 159, 133, 63, 45, 138, 65, 63, 51, 29, 149, 187, 197, 102, 202, 61, 252, 116, 186, 62, 239, 13, 144, 190, 30, 241, 233, 62, 102, 22, 38, 63, 112, 200, 16, 191, 182, 7, 52, 191, 77, 152, 211, 61, 99, 221, 27, 191, 15, 92, 206, 60, 87, 134, 42, 191, 241, 156, 215, 190, 45, 53, 32, 190, 134, 38, 244, 190, 198, 116, 68, 61, 208, 120, 251, 190, 64, 85, 24, 62, 30, 108, 163, 188, 194, 171, 138, 62, 26, 94, 71, 190, 136, 1, 0, 191, 235, 100, 39, 190, 54, 177, 59, 190, 173, 150, 36, 190, 104, 36, 207, 189, 136, 66, 228, 61, 104, 223, 220, 62, 248, 62, 225, 62, 103, 170, 88, 62, 209, 71, 172, 61, 22, 69, 37, 62, 13, 12, 59, 190, 2, 168, 0, 190, 142, 6, 196, 62, 203, 119, 172, 61, 62, 189, 144, 190, 225, 136, 134, 61, 237, 131, 18, 190, 149, 249, 133, 62, 54, 96, 128, 190, 229, 20, 155, 189, 15, 221, 79, 61, 125, 131, 59, 61, 6, 84, 61, 63, 161, 183, 195, 60, 249, 250, 246, 189, 178, 65, 159, 190, 88, 237, 161, 62, 143, 114, 158, 190, 20, 217, 208, 190, 245, 249, 57, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 168, 189, 61, 48, 226, 188, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {53, 211, 224, 62, 235, 44, 24, 192, 234, 194, 82, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {141, 213, 231, 191, 117, 22, 195, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0062/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}