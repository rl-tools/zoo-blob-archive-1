// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 119, 29, 63, 219, 119, 169, 190, 180, 4, 140, 190, 59, 31, 120, 190, 210, 130, 138, 190, 63, 189, 207, 62, 153, 49, 238, 190, 94, 206, 179, 62, 20, 161, 255, 61, 209, 241, 102, 190, 168, 137, 219, 63, 34, 232, 147, 62, 241, 109, 54, 63, 68, 194, 145, 63, 177, 239, 212, 62, 84, 122, 57, 63, 84, 199, 140, 63, 43, 226, 108, 62, 208, 31, 245, 61, 14, 41, 26, 191, 145, 224, 146, 62, 20, 93, 31, 63, 23, 24, 158, 191, 159, 223, 206, 190, 5, 215, 52, 63, 233, 236, 55, 63, 170, 253, 227, 62, 91, 146, 56, 63, 187, 179, 93, 191, 9, 25, 209, 189, 215, 13, 175, 188, 169, 13, 90, 62, 161, 30, 134, 190, 165, 156, 239, 62, 41, 218, 212, 62, 149, 219, 207, 62, 128, 254, 223, 189, 178, 208, 158, 191, 104, 161, 209, 190, 138, 27, 254, 190, 63, 215, 35, 62, 252, 99, 179, 61, 100, 206, 128, 63, 12, 107, 137, 191, 38, 227, 3, 190, 114, 251, 118, 62, 21, 191, 67, 191, 14, 108, 240, 190, 80, 130, 202, 62, 78, 27, 101, 63, 66, 50, 199, 62, 221, 55, 157, 189, 250, 142, 198, 190, 185, 198, 54, 63, 169, 156, 0, 63, 36, 48, 15, 62, 50, 118, 229, 62, 138, 113, 150, 62, 76, 209, 149, 190, 194, 0, 45, 63, 176, 157, 111, 191, 21, 227, 65, 191, 25, 16, 163, 60, 121, 130, 16, 63, 0, 47, 87, 63, 114, 24, 162, 62, 172, 247, 153, 191, 233, 150, 102, 190, 124, 137, 16, 62, 44, 174, 202, 189, 242, 250, 160, 191, 95, 206, 218, 189, 244, 255, 85, 191, 198, 166, 5, 190, 137, 20, 37, 190, 226, 22, 30, 191, 103, 112, 154, 63, 101, 205, 196, 62, 254, 65, 239, 190, 210, 250, 166, 63, 161, 77, 235, 62, 184, 180, 9, 62, 8, 237, 53, 191, 214, 171, 234, 62, 17, 157, 174, 190, 126, 46, 67, 63, 52, 133, 243, 190, 46, 63, 102, 63, 137, 164, 32, 63, 97, 89, 127, 62, 140, 157, 182, 190, 104, 55, 115, 190, 135, 217, 62, 188, 11, 85, 99, 61, 150, 124, 181, 190, 83, 246, 229, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 75, 68, 191, 64, 34, 172, 62, 68, 89, 35, 63, 106, 183, 220, 190, 237, 52, 249, 190, 228, 19, 158, 62, 247, 20, 186, 189, 31, 134, 239, 189, 58, 223, 109, 191, 160, 238, 243, 61, 52, 248, 177, 62, 184, 132, 61, 190, 97, 71, 159, 62, 198, 177, 38, 63, 167, 162, 182, 62, 163, 233, 92, 190, 243, 17, 182, 62, 0, 117, 213, 190, 90, 32, 139, 190, 222, 73, 23, 189, 200, 7, 44, 63, 3, 232, 194, 190, 54, 92, 69, 63, 180, 156, 48, 63, 113, 28, 152, 190, 5, 217, 61, 190, 104, 26, 135, 187, 135, 169, 97, 191, 102, 142, 199, 62, 252, 228, 101, 190, 24, 80, 27, 191, 196, 43, 145, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 168, 158, 190, 29, 221, 37, 190, 25, 158, 12, 61, 13, 241, 42, 191, 200, 102, 63, 62, 169, 206, 165, 62, 66, 38, 205, 188, 42, 146, 108, 61, 137, 179, 184, 61, 214, 56, 26, 187, 248, 3, 39, 61, 122, 94, 16, 62, 124, 215, 147, 189, 255, 235, 125, 62, 180, 115, 248, 189, 111, 243, 174, 187, 32, 231, 34, 62, 170, 232, 50, 190, 224, 177, 110, 61, 38, 85, 14, 190, 207, 53, 153, 62, 88, 4, 150, 61, 33, 192, 124, 59, 226, 206, 210, 61, 148, 17, 138, 190, 147, 171, 51, 191, 50, 109, 227, 190, 211, 88, 98, 190, 214, 42, 189, 60, 123, 92, 184, 62, 63, 189, 102, 61, 147, 68, 202, 61, 212, 67, 47, 190, 92, 61, 9, 62, 10, 119, 40, 60, 92, 196, 241, 189, 62, 81, 184, 61, 185, 128, 136, 188, 140, 104, 164, 61, 183, 214, 5, 190, 64, 17, 59, 62, 16, 35, 158, 61, 5, 209, 2, 190, 220, 45, 208, 189, 2, 34, 0, 190, 28, 148, 27, 190, 141, 215, 68, 190, 30, 93, 46, 62, 54, 104, 41, 62, 231, 244, 109, 189, 153, 101, 164, 61, 68, 230, 4, 62, 64, 215, 7, 190, 71, 221, 65, 62, 180, 162, 20, 61, 188, 1, 23, 61, 50, 163, 13, 190, 215, 14, 174, 62, 170, 254, 216, 189, 173, 236, 92, 62, 33, 161, 129, 61, 139, 96, 225, 62, 112, 186, 210, 61, 208, 114, 121, 62, 69, 53, 210, 62, 130, 245, 145, 62, 25, 115, 4, 62, 135, 233, 56, 63, 77, 103, 14, 191, 167, 98, 66, 189, 89, 122, 73, 62, 205, 121, 146, 62, 35, 10, 215, 190, 97, 3, 206, 62, 217, 177, 218, 189, 200, 121, 209, 190, 193, 14, 162, 190, 126, 98, 136, 189, 87, 199, 201, 62, 164, 21, 91, 61, 109, 62, 51, 188, 190, 36, 178, 61, 201, 138, 225, 190, 58, 47, 38, 62, 218, 224, 214, 62, 171, 173, 213, 190, 71, 86, 61, 62, 178, 250, 14, 62, 54, 212, 198, 61, 65, 209, 151, 62, 178, 191, 181, 61, 115, 151, 207, 190, 121, 84, 41, 190, 127, 202, 172, 190, 208, 194, 52, 190, 157, 147, 88, 61, 157, 37, 176, 60, 42, 64, 25, 61, 52, 61, 15, 190, 107, 149, 177, 189, 99, 170, 234, 61, 52, 250, 186, 189, 6, 65, 164, 60, 148, 226, 29, 190, 73, 97, 22, 62, 239, 26, 177, 189, 41, 247, 205, 61, 183, 138, 189, 189, 138, 149, 209, 60, 40, 186, 20, 61, 77, 9, 243, 189, 149, 168, 47, 62, 56, 134, 20, 190, 108, 37, 214, 60, 165, 42, 7, 62, 164, 240, 169, 187, 249, 66, 57, 189, 174, 96, 227, 189, 118, 57, 72, 190, 48, 170, 58, 190, 138, 29, 33, 190, 172, 229, 83, 190, 144, 253, 49, 190, 171, 249, 138, 61, 20, 123, 31, 190, 131, 41, 23, 62, 199, 49, 30, 190, 165, 251, 23, 61, 223, 209, 39, 62, 98, 97, 132, 190, 102, 207, 227, 190, 80, 196, 183, 191, 137, 103, 139, 190, 123, 140, 189, 61, 142, 64, 58, 190, 141, 70, 68, 189, 64, 166, 74, 191, 95, 64, 80, 62, 219, 126, 59, 62, 172, 135, 186, 190, 5, 132, 22, 62, 235, 137, 0, 189, 233, 56, 174, 62, 222, 247, 66, 61, 202, 217, 76, 189, 44, 27, 166, 190, 1, 171, 46, 190, 146, 36, 218, 190, 253, 34, 134, 189, 24, 165, 2, 190, 24, 79, 128, 191, 169, 57, 228, 189, 117, 178, 190, 190, 210, 136, 162, 190, 78, 122, 67, 191, 226, 9, 120, 61, 211, 241, 47, 62, 177, 2, 126, 62, 167, 220, 13, 62, 188, 119, 113, 62, 61, 205, 68, 62, 100, 85, 134, 62, 67, 157, 227, 190, 69, 143, 228, 191, 55, 223, 175, 189, 160, 13, 23, 62, 219, 17, 200, 61, 142, 195, 37, 190, 254, 132, 60, 62, 159, 59, 188, 187, 249, 69, 58, 188, 154, 115, 152, 61, 193, 229, 186, 189, 159, 120, 0, 191, 236, 152, 164, 62, 73, 241, 86, 190, 202, 90, 228, 188, 87, 158, 46, 61, 217, 134, 218, 61, 228, 211, 121, 62, 191, 85, 48, 191, 32, 70, 228, 61, 109, 92, 253, 190, 171, 79, 253, 188, 43, 20, 58, 190, 170, 203, 12, 190, 93, 147, 20, 190, 134, 137, 34, 190, 184, 4, 210, 190, 203, 216, 179, 62, 124, 17, 17, 62, 138, 43, 29, 190, 200, 32, 178, 190, 163, 137, 203, 61, 76, 182, 122, 62, 156, 42, 95, 191, 31, 218, 60, 190, 167, 24, 117, 62, 248, 95, 212, 188, 101, 94, 208, 59, 110, 189, 175, 190, 28, 4, 38, 190, 26, 205, 47, 62, 34, 39, 19, 191, 12, 155, 178, 61, 205, 40, 127, 61, 109, 97, 43, 190, 49, 159, 236, 189, 1, 94, 145, 191, 124, 1, 122, 62, 35, 147, 8, 191, 243, 242, 39, 62, 27, 195, 212, 62, 16, 199, 90, 190, 26, 48, 99, 61, 244, 245, 215, 62, 132, 241, 97, 190, 77, 215, 143, 191, 8, 45, 221, 191, 26, 73, 203, 62, 187, 73, 227, 188, 52, 104, 50, 190, 43, 229, 178, 189, 216, 35, 70, 61, 30, 63, 43, 62, 207, 123, 133, 189, 255, 201, 5, 190, 144, 232, 237, 60, 26, 74, 31, 190, 78, 239, 195, 61, 196, 71, 92, 188, 52, 178, 63, 189, 235, 224, 153, 61, 187, 168, 166, 189, 214, 50, 26, 190, 163, 151, 14, 190, 126, 152, 18, 62, 248, 131, 32, 62, 70, 50, 0, 190, 184, 211, 208, 189, 176, 252, 152, 189, 129, 150, 219, 188, 14, 206, 178, 189, 214, 18, 253, 189, 101, 119, 177, 189, 90, 233, 202, 189, 244, 132, 12, 61, 115, 209, 103, 189, 224, 240, 29, 190, 173, 247, 53, 189, 86, 245, 46, 61, 144, 47, 41, 190, 36, 149, 87, 189, 1, 6, 92, 187, 78, 2, 18, 62, 24, 112, 150, 61, 214, 91, 163, 62, 85, 232, 160, 61, 59, 157, 9, 61, 218, 213, 148, 62, 164, 223, 232, 190, 169, 223, 139, 191, 107, 149, 119, 62, 146, 59, 9, 63, 218, 146, 75, 191, 39, 47, 248, 62, 197, 156, 26, 190, 231, 219, 24, 191, 63, 98, 154, 62, 38, 219, 93, 62, 85, 59, 67, 62, 65, 123, 139, 62, 75, 225, 11, 190, 69, 232, 48, 62, 152, 206, 55, 191, 108, 102, 4, 62, 254, 75, 168, 62, 30, 239, 25, 191, 232, 134, 167, 62, 95, 138, 75, 62, 248, 68, 197, 190, 210, 211, 184, 62, 38, 225, 127, 189, 55, 250, 218, 190, 106, 62, 209, 190, 19, 169, 214, 191, 69, 92, 155, 61, 101, 230, 30, 62, 149, 16, 244, 189, 98, 28, 117, 189, 82, 77, 240, 189, 41, 54, 181, 61, 123, 24, 11, 62, 16, 109, 17, 190, 148, 184, 30, 190, 173, 92, 254, 61, 245, 163, 104, 61, 5, 34, 254, 189, 150, 223, 96, 189, 112, 138, 35, 60, 100, 74, 199, 189, 100, 15, 36, 190, 169, 108, 207, 61, 191, 191, 42, 190, 152, 166, 174, 61, 126, 28, 251, 189, 66, 12, 24, 190, 7, 233, 180, 61, 227, 174, 23, 61, 1, 223, 140, 59, 184, 209, 7, 62, 115, 175, 29, 190, 239, 192, 53, 189, 100, 48, 51, 190, 90, 179, 17, 61, 90, 37, 24, 62, 165, 52, 3, 189, 221, 243, 180, 61, 61, 149, 169, 61, 186, 85, 212, 61, 50, 115, 101, 189, 159, 172, 139, 60, 17, 16, 47, 190, 25, 162, 8, 60, 199, 61, 29, 62, 197, 85, 255, 189, 170, 93, 190, 61, 6, 64, 218, 189, 147, 62, 186, 60, 84, 11, 175, 189, 201, 123, 169, 188, 95, 196, 51, 190, 114, 149, 4, 190, 2, 167, 74, 60, 59, 68, 165, 187, 46, 102, 176, 61, 22, 38, 50, 190, 162, 92, 173, 189, 150, 91, 46, 187, 22, 36, 43, 190, 131, 152, 249, 60, 93, 155, 9, 62, 193, 176, 95, 61, 158, 67, 28, 61, 240, 73, 27, 190, 169, 250, 21, 187, 26, 105, 152, 61, 250, 18, 221, 189, 141, 18, 48, 190, 241, 15, 89, 61, 18, 207, 131, 61, 161, 152, 51, 62, 183, 243, 83, 191, 199, 191, 31, 62, 20, 215, 183, 61, 43, 219, 180, 191, 208, 87, 71, 62, 7, 52, 145, 62, 87, 131, 114, 188, 146, 29, 189, 190, 254, 6, 41, 62, 17, 100, 88, 190, 86, 145, 9, 62, 22, 52, 251, 61, 188, 163, 101, 188, 102, 161, 219, 61, 217, 203, 65, 190, 111, 41, 145, 190, 129, 4, 6, 190, 226, 186, 168, 190, 139, 143, 128, 62, 174, 82, 64, 189, 185, 38, 144, 61, 63, 114, 60, 62, 59, 239, 4, 190, 241, 22, 11, 62, 10, 202, 178, 190, 111, 72, 71, 191, 121, 53, 17, 191, 137, 154, 140, 188, 28, 251, 87, 62, 30, 16, 255, 62, 115, 19, 17, 62, 116, 54, 9, 60, 133, 171, 219, 60, 239, 211, 42, 62, 103, 177, 56, 62, 188, 240, 25, 191, 131, 45, 251, 61, 215, 77, 81, 190, 46, 49, 59, 191, 38, 205, 138, 190, 35, 40, 22, 190, 100, 103, 180, 189, 148, 111, 131, 190, 244, 134, 121, 190, 20, 100, 34, 190, 56, 241, 184, 189, 162, 57, 46, 191, 178, 0, 179, 190, 110, 189, 119, 191, 169, 255, 58, 191, 223, 222, 67, 190, 165, 36, 184, 190, 216, 193, 9, 62, 76, 167, 72, 61, 77, 177, 139, 61, 103, 127, 134, 61, 146, 88, 114, 62, 1, 215, 89, 191, 238, 110, 111, 191, 25, 140, 78, 190, 246, 177, 130, 190, 216, 33, 142, 190, 72, 124, 248, 61, 23, 76, 181, 190, 154, 204, 90, 189, 48, 21, 247, 189, 39, 117, 136, 189, 190, 52, 17, 190, 42, 27, 201, 60, 26, 82, 76, 185, 237, 57, 190, 189, 14, 210, 37, 190, 107, 223, 224, 60, 139, 58, 247, 188, 115, 244, 0, 62, 214, 208, 52, 190, 33, 188, 144, 188, 6, 104, 42, 61, 213, 135, 215, 189, 146, 86, 136, 61, 167, 128, 6, 190, 227, 199, 108, 188, 52, 139, 50, 187, 147, 197, 49, 62, 211, 145, 189, 189, 251, 77, 156, 189, 12, 23, 236, 188, 92, 16, 43, 187, 152, 236, 240, 188, 35, 27, 172, 188, 104, 250, 206, 61, 182, 236, 213, 61, 121, 61, 40, 190, 149, 160, 179, 189, 35, 178, 30, 190, 212, 234, 120, 189, 62, 162, 233, 190, 11, 224, 0, 190, 155, 174, 163, 61, 20, 163, 24, 191, 104, 112, 148, 190, 64, 30, 28, 62, 79, 31, 227, 189, 207, 95, 10, 189, 49, 58, 235, 189, 247, 92, 10, 62, 252, 44, 66, 62, 141, 55, 138, 190, 149, 191, 162, 61, 21, 57, 87, 60, 200, 33, 80, 62, 1, 220, 243, 61, 209, 51, 41, 190, 188, 1, 1, 191, 240, 81, 62, 190, 86, 228, 59, 190, 230, 10, 17, 61, 232, 218, 105, 190, 36, 226, 219, 190, 116, 156, 34, 62, 48, 137, 24, 191, 216, 22, 228, 189, 19, 35, 127, 190, 32, 79, 211, 190, 238, 75, 47, 60, 195, 74, 220, 61, 241, 147, 50, 62, 222, 174, 191, 189, 66, 196, 84, 191, 36, 201, 168, 61, 188, 84, 19, 62, 128, 57, 100, 191, 176, 151, 145, 61, 72, 184, 239, 62, 192, 193, 31, 60, 199, 21, 130, 190, 105, 151, 13, 63, 60, 217, 9, 190, 233, 64, 81, 62, 22, 173, 6, 190, 241, 126, 119, 62, 239, 163, 44, 62, 155, 252, 132, 190, 197, 138, 72, 190, 190, 174, 17, 191, 162, 192, 224, 190, 21, 167, 234, 187, 43, 237, 25, 191, 153, 223, 234, 62, 84, 104, 3, 61, 53, 241, 247, 61, 77, 26, 172, 62, 135, 50, 229, 60, 181, 91, 227, 191, 205, 80, 172, 191, 177, 184, 18, 62, 197, 92, 218, 61, 70, 136, 17, 61, 103, 146, 131, 61, 201, 84, 25, 189, 135, 50, 4, 190, 22, 240, 158, 189, 65, 240, 142, 190, 115, 189, 17, 191, 107, 58, 34, 59, 171, 17, 54, 62, 221, 161, 41, 62, 0, 52, 191, 190, 96, 56, 172, 62, 172, 226, 200, 190, 51, 78, 67, 62, 235, 106, 8, 62, 85, 89, 137, 190, 228, 185, 226, 190, 228, 20, 128, 190, 254, 146, 60, 61, 144, 201, 159, 189, 40, 175, 74, 62, 132, 25, 46, 60, 233, 105, 3, 62, 135, 6, 208, 190, 118, 158, 207, 61, 86, 166, 12, 190, 9, 84, 35, 190, 162, 225, 73, 191, 241, 104, 26, 61, 73, 90, 100, 189, 237, 106, 148, 62, 152, 62, 48, 62, 238, 50, 56, 63, 37, 131, 32, 62, 126, 47, 101, 62, 227, 212, 132, 62, 66, 177, 7, 62, 87, 133, 32, 61, 38, 209, 67, 59, 88, 7, 88, 191, 249, 110, 97, 190, 186, 14, 231, 62, 241, 94, 83, 62, 134, 44, 46, 191, 43, 58, 71, 62, 15, 138, 255, 61, 247, 220, 24, 190, 174, 138, 126, 188, 140, 253, 117, 189, 62, 102, 20, 63, 252, 32, 245, 61, 196, 71, 178, 189, 138, 70, 62, 61, 176, 205, 110, 190, 114, 183, 178, 62, 39, 154, 174, 62, 186, 218, 172, 190, 184, 94, 117, 61, 198, 188, 146, 62, 98, 165, 160, 62, 77, 247, 171, 189, 14, 124, 229, 189, 6, 201, 200, 189, 210, 116, 143, 189, 126, 25, 203, 190, 82, 57, 155, 189, 62, 76, 21, 62, 166, 253, 220, 190, 50, 119, 160, 188, 20, 97, 38, 190, 168, 41, 11, 62, 241, 206, 162, 60, 88, 214, 132, 190, 119, 121, 134, 62, 120, 239, 178, 61, 172, 40, 56, 61, 16, 46, 73, 62, 10, 202, 129, 189, 53, 139, 61, 60, 92, 192, 50, 62, 37, 122, 231, 60, 70, 20, 186, 62, 230, 163, 130, 189, 140, 100, 78, 61, 205, 195, 162, 62, 248, 74, 93, 61, 70, 240, 135, 62, 195, 225, 71, 62, 104, 105, 216, 189, 64, 143, 70, 188, 108, 94, 143, 62, 51, 234, 128, 191, 97, 142, 8, 62, 81, 171, 101, 61, 211, 217, 89, 61, 221, 120, 40, 191, 74, 238, 200, 189, 10, 205, 206, 60, 231, 151, 83, 190, 202, 197, 86, 62, 154, 243, 80, 62, 46, 143, 150, 60, 18, 46, 221, 58, 47, 117, 192, 188, 27, 237, 166, 60, 132, 201, 205, 61, 137, 186, 4, 190, 86, 216, 86, 62, 210, 135, 100, 190, 129, 81, 154, 190, 11, 189, 115, 61, 137, 115, 232, 190, 32, 90, 31, 190, 73, 159, 137, 62, 168, 115, 32, 191, 140, 254, 32, 62, 118, 93, 125, 62, 62, 107, 1, 190, 231, 227, 91, 62, 21, 178, 158, 189, 26, 177, 138, 189, 66, 78, 238, 60, 9, 161, 230, 61, 147, 184, 211, 190, 85, 225, 165, 189, 101, 150, 237, 189, 81, 102, 150, 188, 247, 105, 247, 190, 239, 238, 0, 61, 180, 184, 179, 61, 79, 72, 77, 191, 184, 135, 14, 63, 120, 207, 54, 189, 245, 73, 54, 191, 24, 82, 68, 189, 21, 211, 61, 61, 4, 129, 158, 187, 165, 146, 57, 189, 102, 7, 189, 62, 130, 198, 94, 190, 182, 248, 151, 62, 205, 119, 37, 62, 28, 245, 147, 61, 59, 249, 59, 62, 106, 192, 236, 190, 185, 168, 189, 62, 227, 252, 85, 62, 156, 3, 145, 189, 246, 188, 94, 62, 138, 179, 188, 61, 117, 101, 222, 188, 98, 213, 65, 191, 100, 111, 164, 61, 8, 199, 169, 191, 114, 103, 147, 189, 135, 102, 148, 61, 103, 7, 86, 61, 215, 126, 44, 59, 75, 3, 77, 62, 79, 218, 33, 189, 51, 239, 41, 190, 76, 202, 6, 189, 139, 106, 62, 62, 111, 25, 21, 62, 17, 100, 103, 62, 149, 59, 189, 188, 68, 157, 71, 62, 156, 147, 93, 190, 216, 101, 209, 189, 47, 91, 190, 61, 166, 80, 81, 61, 86, 85, 128, 190, 124, 237, 46, 62, 167, 83, 162, 62, 218, 237, 129, 61, 253, 194, 175, 189, 1, 151, 100, 62, 215, 173, 166, 62, 31, 192, 166, 189, 187, 67, 75, 61, 17, 178, 210, 60, 164, 25, 234, 59, 107, 46, 55, 62, 97, 60, 154, 61, 68, 154, 143, 190, 74, 118, 118, 189, 123, 241, 135, 62, 237, 19, 139, 59, 32, 82, 190, 61, 204, 73, 145, 189, 119, 220, 101, 189, 249, 93, 126, 62, 88, 214, 72, 62, 56, 168, 48, 61, 47, 118, 44, 62, 194, 1, 65, 188, 142, 94, 127, 61, 148, 121, 131, 62, 167, 161, 179, 62, 113, 45, 14, 62, 7, 83, 107, 188, 215, 30, 202, 190, 23, 177, 146, 190, 118, 136, 181, 60, 225, 52, 9, 190, 66, 227, 13, 189, 98, 105, 62, 189, 46, 23, 34, 190, 19, 212, 172, 62, 235, 3, 44, 190, 126, 20, 11, 191, 92, 12, 74, 59, 73, 189, 13, 190, 154, 6, 89, 190, 86, 72, 16, 61, 119, 26, 154, 61, 27, 47, 196, 61, 252, 255, 239, 61, 165, 174, 131, 190, 45, 206, 67, 63, 106, 100, 187, 61, 208, 106, 87, 62, 146, 155, 142, 190, 92, 7, 89, 190, 218, 99, 136, 61, 51, 241, 9, 61, 141, 75, 51, 190, 23, 49, 111, 62, 61, 123, 110, 189, 142, 191, 103, 62, 0, 107, 162, 62, 46, 173, 210, 188, 50, 174, 11, 190, 254, 188, 85, 188, 202, 89, 28, 62, 128, 139, 198, 189, 16, 173, 29, 60, 209, 176, 43, 60, 227, 89, 135, 189, 222, 239, 217, 189, 154, 33, 154, 61, 20, 46, 249, 188, 10, 81, 164, 61, 1, 37, 63, 61, 177, 44, 109, 61, 244, 93, 43, 190, 193, 103, 0, 62, 222, 247, 179, 61, 160, 59, 176, 61, 23, 165, 209, 60, 41, 216, 176, 189, 17, 182, 118, 62, 243, 235, 89, 189, 162, 201, 122, 189, 33, 191, 163, 190, 162, 70, 143, 61, 76, 192, 143, 61, 118, 117, 36, 62, 61, 175, 227, 61, 88, 61, 245, 61, 191, 85, 145, 61, 31, 218, 84, 189, 125, 143, 77, 56, 65, 188, 161, 190, 57, 51, 46, 190, 65, 174, 161, 62, 69, 60, 92, 189, 42, 138, 179, 190, 247, 72, 223, 61, 63, 40, 120, 190, 185, 190, 47, 190, 53, 168, 247, 190, 39, 33, 75, 190, 39, 247, 35, 62, 60, 163, 17, 61, 77, 184, 76, 62, 1, 201, 141, 61, 228, 181, 144, 189, 244, 89, 154, 62, 22, 137, 169, 188, 174, 126, 161, 190, 100, 141, 50, 190, 254, 132, 1, 62, 3, 26, 115, 189, 66, 84, 228, 61, 182, 51, 158, 188, 98, 240, 145, 190, 239, 12, 145, 189, 71, 7, 137, 61, 252, 134, 185, 61, 71, 180, 26, 190, 52, 121, 151, 61, 185, 223, 166, 188, 147, 188, 255, 189, 69, 42, 169, 188, 18, 108, 254, 61, 18, 248, 35, 190, 216, 242, 45, 60, 17, 16, 215, 189, 148, 116, 136, 60, 21, 176, 107, 189, 219, 48, 251, 189, 153, 44, 37, 62, 196, 6, 235, 188, 61, 97, 110, 61, 106, 147, 20, 190, 1, 83, 5, 190, 218, 114, 246, 189, 158, 5, 42, 190, 162, 22, 69, 60, 195, 229, 100, 189, 114, 170, 38, 62, 219, 87, 108, 61, 184, 142, 136, 188, 89, 163, 27, 190, 107, 179, 159, 189, 134, 23, 250, 60, 31, 55, 187, 61, 47, 0, 28, 190, 219, 104, 159, 188, 1, 158, 93, 188, 201, 189, 132, 187, 93, 42, 27, 62, 244, 161, 204, 190, 208, 180, 134, 62, 196, 106, 57, 189, 100, 252, 3, 60, 45, 225, 22, 191, 21, 81, 249, 189, 23, 203, 85, 62, 23, 30, 118, 61, 66, 73, 45, 191, 162, 211, 227, 62, 163, 234, 61, 62, 28, 142, 107, 190, 31, 137, 210, 190, 20, 86, 98, 62, 240, 168, 202, 62, 13, 218, 22, 190, 153, 212, 182, 60, 36, 183, 36, 188, 156, 223, 58, 190, 145, 64, 225, 61, 194, 99, 160, 62, 36, 198, 30, 191, 143, 154, 134, 62, 4, 237, 217, 62, 193, 226, 22, 63, 225, 150, 76, 189, 209, 55, 202, 189, 188, 28, 170, 186, 203, 108, 147, 190, 5, 118, 31, 191, 70, 253, 16, 187, 119, 45, 32, 62, 73, 61, 108, 190, 37, 235, 30, 62, 171, 227, 92, 62, 86, 72, 241, 189, 124, 218, 203, 189, 143, 54, 225, 189, 154, 14, 76, 187, 216, 217, 61, 190, 116, 253, 70, 189, 168, 5, 202, 60, 224, 235, 177, 62, 7, 90, 5, 189, 246, 1, 64, 190, 94, 175, 138, 62, 225, 39, 222, 60, 109, 235, 221, 189, 195, 58, 226, 61, 82, 68, 197, 61, 81, 165, 253, 61, 187, 163, 253, 189, 83, 185, 45, 62, 178, 135, 48, 190, 133, 213, 247, 188, 201, 96, 59, 62, 97, 124, 91, 190, 88, 218, 147, 61, 230, 51, 230, 189, 229, 87, 196, 189, 120, 29, 138, 62, 106, 218, 87, 62, 152, 152, 229, 189, 195, 251, 85, 60, 168, 162, 131, 191, 58, 27, 74, 188, 144, 65, 240, 62, 200, 204, 124, 62, 227, 54, 123, 61, 229, 207, 131, 62, 25, 60, 156, 190, 243, 250, 100, 191, 36, 170, 238, 189, 212, 76, 138, 191, 71, 200, 173, 188, 200, 238, 44, 61, 98, 108, 9, 62, 225, 7, 107, 62, 4, 78, 172, 190, 61, 91, 206, 190, 245, 70, 87, 62, 188, 254, 43, 190, 68, 177, 139, 190, 110, 147, 224, 189, 48, 209, 20, 61, 59, 79, 68, 61, 143, 2, 125, 62, 43, 167, 21, 190, 187, 214, 200, 62, 64, 178, 167, 61, 221, 135, 43, 62, 154, 220, 109, 190, 157, 173, 50, 190, 242, 206, 218, 62, 70, 250, 191, 61, 206, 171, 201, 59, 162, 122, 96, 191, 230, 12, 207, 190, 21, 207, 202, 62, 20, 47, 232, 188, 184, 240, 161, 188, 236, 61, 6, 63, 213, 227, 158, 190, 83, 58, 22, 191, 201, 169, 32, 191, 45, 163, 238, 190, 16, 203, 143, 62, 113, 198, 173, 190, 92, 122, 72, 190, 26, 198, 36, 62, 23, 61, 145, 190, 138, 42, 50, 190, 88, 23, 55, 189, 161, 102, 136, 190, 62, 217, 173, 190, 50, 22, 40, 190, 249, 64, 178, 61, 37, 188, 125, 190, 136, 217, 32, 62, 171, 226, 124, 191, 109, 32, 197, 190, 100, 251, 77, 190, 136, 138, 161, 190, 184, 236, 229, 189, 207, 213, 101, 62, 168, 211, 173, 62, 41, 124, 23, 62, 51, 236, 73, 188, 133, 93, 193, 188, 37, 218, 51, 189, 184, 251, 171, 61, 189, 171, 120, 61, 164, 97, 14, 62, 202, 17, 195, 189, 53, 66, 247, 61, 27, 61, 180, 190, 192, 80, 69, 62, 201, 22, 41, 191, 153, 193, 107, 190, 121, 77, 7, 61, 59, 65, 74, 191, 25, 162, 192, 61, 94, 19, 235, 190, 100, 161, 227, 190, 48, 127, 143, 60, 57, 68, 69, 61, 45, 80, 28, 61, 128, 187, 245, 61, 13, 163, 57, 190, 239, 116, 101, 61, 214, 161, 34, 62, 91, 86, 136, 190, 250, 148, 62, 62, 203, 128, 146, 62, 145, 7, 144, 188, 130, 209, 39, 62, 32, 66, 130, 62, 249, 252, 32, 190, 171, 28, 51, 61, 15, 254, 176, 190, 146, 148, 102, 191, 80, 224, 251, 188, 9, 29, 131, 61, 225, 178, 240, 189, 185, 187, 162, 62, 106, 224, 240, 62, 108, 50, 125, 190, 241, 159, 148, 190, 146, 206, 199, 61, 40, 235, 14, 190, 180, 244, 220, 61, 122, 193, 191, 62, 24, 92, 148, 188, 209, 210, 5, 62, 199, 168, 105, 190, 229, 73, 86, 189, 54, 21, 229, 61, 67, 99, 7, 191, 10, 185, 198, 61, 240, 201, 62, 190, 165, 92, 39, 62, 56, 214, 186, 61, 9, 252, 64, 190, 170, 38, 78, 62, 132, 166, 183, 190, 21, 248, 109, 191, 116, 232, 165, 190, 186, 115, 221, 189, 121, 241, 136, 62, 93, 71, 240, 62, 88, 209, 37, 190, 3, 68, 143, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 15, 195, 62, 81, 50, 161, 60, 71, 144, 104, 62, 37, 11, 71, 190, 205, 76, 172, 61, 191, 70, 229, 59, 134, 112, 17, 62, 224, 116, 50, 190, 230, 113, 94, 60, 218, 163, 192, 189, 218, 89, 4, 190, 14, 115, 162, 62, 192, 26, 57, 61, 62, 59, 36, 190, 48, 151, 125, 62, 59, 182, 130, 61, 93, 163, 61, 190, 87, 86, 116, 62, 125, 127, 174, 189, 172, 42, 27, 62, 157, 233, 132, 190, 89, 219, 91, 62, 124, 230, 89, 62, 197, 165, 46, 62, 27, 4, 75, 59, 215, 140, 12, 190, 172, 198, 157, 62, 199, 81, 207, 61, 223, 117, 155, 62, 188, 179, 150, 61, 111, 122, 162, 190, 35, 208, 108, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 110, 176, 190, 94, 137, 255, 189, 175, 17, 35, 63, 100, 253, 12, 62, 97, 249, 5, 62, 159, 197, 218, 190, 66, 133, 88, 191, 180, 141, 248, 189, 72, 171, 177, 191, 226, 186, 152, 187, 10, 206, 218, 60, 169, 9, 74, 191, 249, 100, 95, 191, 96, 236, 50, 190, 209, 4, 212, 189, 55, 96, 145, 191, 75, 51, 7, 191, 246, 155, 26, 63, 2, 131, 204, 190, 151, 106, 198, 189, 195, 39, 48, 63, 122, 134, 174, 61, 156, 236, 123, 62, 235, 66, 42, 61, 18, 10, 31, 62, 150, 13, 24, 189, 215, 165, 112, 63, 122, 195, 81, 60, 24, 115, 204, 62, 61, 126, 123, 191, 171, 201, 136, 190, 94, 156, 25, 191, 63, 99, 54, 190, 9, 197, 16, 61, 177, 22, 216, 61, 142, 150, 0, 190, 218, 239, 11, 191, 92, 183, 179, 61, 244, 179, 170, 189, 166, 49, 15, 190, 78, 205, 111, 62, 45, 2, 189, 189, 73, 47, 5, 190, 217, 91, 14, 61, 90, 225, 246, 60, 11, 229, 64, 61, 210, 156, 164, 190, 163, 145, 29, 62, 35, 70, 50, 61, 243, 236, 11, 188, 238, 182, 136, 61, 121, 75, 101, 190, 241, 235, 51, 62, 49, 113, 104, 190, 163, 8, 17, 189, 117, 13, 190, 189, 101, 82, 32, 190, 17, 234, 46, 61, 120, 67, 12, 190, 68, 100, 85, 190, 249, 125, 3, 61, 167, 102, 220, 189, 225, 129, 255, 58, 200, 174, 121, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 117, 129, 62, 54, 87, 105, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {189, 15, 198, 191, 152, 86, 242, 190, 13, 211, 144, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {215, 31, 141, 191, 120, 91, 254, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0087/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}