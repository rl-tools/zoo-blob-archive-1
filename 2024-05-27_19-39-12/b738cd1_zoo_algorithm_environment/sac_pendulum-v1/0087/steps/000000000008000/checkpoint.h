// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 113, 222, 62, 67, 193, 123, 190, 244, 178, 124, 190, 18, 8, 218, 189, 236, 248, 174, 190, 170, 133, 223, 62, 227, 42, 205, 190, 79, 32, 161, 62, 124, 92, 198, 61, 217, 207, 254, 190, 49, 154, 149, 63, 130, 92, 153, 62, 181, 142, 48, 63, 144, 175, 132, 63, 27, 145, 238, 62, 147, 213, 51, 63, 140, 49, 99, 63, 148, 64, 160, 62, 189, 191, 240, 61, 214, 90, 54, 191, 81, 83, 109, 62, 38, 69, 44, 63, 153, 110, 125, 191, 242, 252, 199, 190, 170, 89, 41, 63, 147, 247, 34, 63, 126, 73, 228, 62, 189, 219, 58, 63, 124, 32, 14, 191, 201, 173, 81, 190, 146, 252, 57, 59, 245, 221, 0, 62, 239, 253, 156, 190, 68, 147, 201, 62, 240, 53, 200, 62, 12, 171, 229, 62, 176, 182, 68, 190, 132, 232, 98, 191, 29, 16, 246, 190, 230, 161, 192, 190, 197, 141, 18, 62, 162, 112, 152, 61, 155, 73, 132, 63, 48, 12, 117, 191, 44, 48, 225, 189, 135, 137, 131, 62, 72, 145, 20, 191, 82, 189, 243, 190, 236, 201, 179, 62, 198, 233, 90, 63, 242, 28, 12, 63, 100, 3, 215, 189, 98, 244, 4, 191, 151, 183, 86, 63, 122, 59, 217, 62, 105, 242, 165, 61, 120, 175, 246, 62, 234, 216, 163, 62, 58, 205, 156, 190, 109, 41, 66, 63, 120, 227, 92, 191, 166, 181, 250, 190, 100, 105, 93, 61, 208, 247, 6, 63, 101, 174, 58, 63, 7, 162, 184, 62, 216, 142, 137, 191, 24, 132, 31, 61, 210, 147, 16, 62, 79, 7, 216, 189, 198, 96, 127, 191, 103, 78, 240, 60, 22, 167, 25, 191, 192, 11, 46, 62, 167, 250, 224, 189, 164, 107, 22, 191, 184, 16, 38, 63, 73, 207, 9, 63, 58, 40, 154, 190, 108, 255, 120, 63, 210, 110, 246, 62, 116, 21, 53, 62, 40, 7, 66, 191, 237, 178, 220, 62, 118, 205, 173, 190, 145, 41, 41, 63, 99, 248, 20, 191, 227, 56, 109, 63, 195, 153, 7, 63, 234, 119, 95, 62, 140, 157, 182, 190, 104, 55, 115, 190, 135, 217, 62, 188, 147, 251, 20, 61, 162, 207, 124, 190, 71, 72, 232, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 53, 40, 191, 95, 212, 167, 62, 116, 4, 26, 63, 231, 52, 194, 190, 129, 235, 204, 190, 194, 183, 146, 62, 221, 33, 103, 189, 105, 156, 68, 189, 115, 118, 57, 191, 226, 51, 173, 61, 34, 19, 177, 62, 69, 174, 34, 190, 50, 64, 165, 62, 149, 179, 36, 63, 81, 245, 185, 62, 156, 34, 4, 190, 218, 52, 216, 62, 216, 83, 239, 190, 222, 144, 124, 190, 122, 92, 17, 61, 185, 99, 34, 63, 213, 14, 159, 190, 243, 253, 22, 63, 179, 31, 48, 63, 61, 68, 218, 190, 212, 24, 196, 190, 190, 85, 55, 190, 253, 15, 35, 191, 115, 95, 187, 62, 29, 254, 83, 190, 24, 80, 27, 191, 141, 216, 137, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 26, 133, 57, 28, 236, 4, 190, 97, 32, 163, 61, 64, 208, 211, 190, 90, 241, 120, 62, 1, 21, 151, 62, 117, 214, 252, 188, 135, 36, 112, 61, 247, 26, 183, 59, 166, 78, 23, 189, 162, 87, 72, 61, 234, 196, 81, 62, 41, 32, 108, 189, 142, 167, 144, 62, 152, 91, 19, 190, 32, 52, 251, 185, 195, 158, 68, 62, 235, 170, 107, 190, 219, 92, 219, 61, 40, 118, 16, 190, 91, 173, 74, 62, 163, 157, 10, 62, 59, 81, 186, 60, 52, 203, 210, 60, 36, 87, 43, 190, 219, 59, 19, 191, 155, 159, 98, 190, 31, 20, 77, 190, 91, 52, 72, 61, 59, 48, 196, 62, 63, 189, 102, 61, 165, 240, 199, 61, 98, 34, 15, 189, 17, 139, 34, 62, 29, 104, 116, 61, 22, 225, 195, 188, 190, 152, 226, 61, 72, 245, 8, 188, 35, 226, 208, 61, 58, 230, 243, 189, 180, 49, 191, 61, 145, 27, 206, 61, 31, 128, 27, 190, 77, 180, 46, 189, 182, 126, 189, 189, 170, 131, 206, 189, 104, 229, 30, 190, 185, 237, 74, 62, 59, 186, 76, 62, 223, 204, 124, 189, 174, 56, 8, 62, 17, 155, 29, 62, 220, 222, 20, 190, 18, 153, 98, 62, 163, 254, 230, 60, 199, 156, 226, 61, 25, 58, 220, 189, 40, 87, 146, 62, 8, 190, 210, 189, 160, 43, 77, 62, 243, 210, 79, 61, 32, 181, 220, 62, 112, 186, 210, 61, 154, 171, 134, 62, 117, 213, 44, 62, 55, 58, 157, 62, 166, 26, 157, 61, 192, 244, 2, 63, 117, 81, 7, 191, 180, 4, 215, 189, 64, 4, 154, 62, 202, 110, 141, 62, 133, 185, 117, 190, 157, 45, 184, 62, 252, 97, 232, 189, 15, 48, 207, 190, 100, 17, 159, 190, 149, 171, 222, 189, 50, 58, 176, 62, 86, 180, 8, 61, 9, 205, 36, 186, 212, 147, 44, 62, 111, 148, 213, 190, 94, 248, 86, 62, 1, 237, 229, 62, 4, 32, 203, 190, 249, 121, 40, 62, 67, 65, 18, 62, 253, 68, 46, 62, 27, 34, 182, 62, 83, 217, 168, 61, 41, 121, 128, 190, 157, 225, 65, 190, 62, 112, 169, 190, 208, 194, 52, 190, 188, 19, 9, 61, 157, 37, 176, 60, 209, 46, 109, 61, 34, 232, 218, 189, 200, 36, 129, 189, 15, 8, 5, 62, 172, 160, 181, 189, 137, 23, 61, 61, 148, 226, 29, 190, 63, 1, 41, 62, 139, 249, 180, 189, 41, 247, 205, 61, 107, 8, 152, 189, 138, 149, 209, 60, 106, 207, 141, 61, 70, 82, 1, 190, 149, 168, 47, 62, 251, 137, 4, 190, 246, 155, 36, 61, 95, 224, 24, 62, 243, 50, 199, 59, 166, 82, 197, 187, 15, 27, 189, 189, 199, 15, 34, 190, 210, 3, 25, 190, 138, 29, 33, 190, 34, 9, 51, 190, 113, 75, 21, 190, 146, 8, 188, 61, 20, 123, 31, 190, 100, 255, 12, 62, 199, 49, 30, 190, 165, 251, 23, 61, 170, 178, 7, 62, 120, 78, 110, 190, 227, 62, 170, 190, 90, 61, 0, 191, 89, 70, 3, 190, 132, 247, 121, 62, 155, 91, 18, 190, 150, 150, 188, 189, 123, 197, 3, 191, 64, 250, 96, 62, 200, 230, 165, 61, 137, 216, 76, 190, 97, 230, 117, 61, 156, 196, 8, 61, 159, 92, 197, 62, 165, 180, 131, 189, 27, 24, 14, 62, 60, 55, 173, 190, 142, 8, 199, 189, 224, 8, 191, 190, 51, 27, 219, 188, 153, 159, 111, 60, 106, 124, 20, 191, 236, 135, 29, 189, 142, 44, 140, 190, 210, 136, 162, 190, 69, 12, 233, 190, 116, 71, 30, 61, 55, 19, 35, 61, 122, 219, 191, 62, 167, 220, 13, 62, 207, 29, 226, 61, 124, 14, 77, 62, 226, 112, 111, 62, 57, 16, 226, 190, 236, 91, 132, 191, 37, 247, 251, 189, 255, 127, 23, 62, 105, 77, 150, 61, 211, 17, 161, 189, 117, 2, 219, 60, 153, 20, 196, 60, 226, 248, 254, 60, 75, 6, 49, 61, 165, 164, 22, 62, 209, 211, 249, 190, 124, 93, 177, 62, 58, 188, 98, 188, 247, 176, 163, 189, 249, 43, 122, 189, 232, 16, 220, 61, 238, 166, 85, 62, 78, 11, 34, 191, 141, 55, 174, 61, 23, 136, 15, 191, 123, 68, 186, 188, 178, 215, 64, 190, 1, 56, 178, 189, 227, 40, 12, 190, 109, 131, 138, 190, 155, 222, 100, 190, 41, 114, 179, 62, 124, 17, 17, 62, 232, 179, 136, 61, 160, 63, 139, 189, 20, 252, 75, 62, 152, 76, 56, 62, 156, 53, 47, 191, 223, 148, 21, 190, 220, 215, 246, 189, 31, 45, 52, 190, 226, 191, 147, 60, 134, 233, 148, 190, 29, 243, 6, 190, 65, 154, 61, 62, 87, 234, 193, 190, 37, 234, 143, 61, 65, 223, 35, 188, 42, 8, 67, 190, 185, 169, 220, 189, 44, 87, 64, 191, 130, 149, 16, 62, 57, 162, 245, 190, 24, 240, 8, 62, 255, 49, 137, 62, 12, 2, 128, 190, 26, 130, 50, 188, 109, 117, 140, 62, 222, 100, 46, 190, 118, 39, 57, 191, 64, 30, 131, 191, 203, 107, 159, 62, 171, 158, 180, 188, 222, 39, 128, 62, 43, 229, 178, 189, 128, 25, 43, 61, 30, 63, 43, 62, 207, 123, 133, 189, 255, 201, 5, 190, 144, 232, 237, 60, 26, 74, 31, 190, 78, 239, 195, 61, 196, 71, 92, 188, 52, 178, 63, 189, 235, 224, 153, 61, 187, 168, 166, 189, 214, 50, 26, 190, 163, 151, 14, 190, 126, 152, 18, 62, 248, 131, 32, 62, 70, 50, 0, 190, 184, 211, 208, 189, 176, 252, 152, 189, 129, 150, 219, 188, 14, 206, 178, 189, 214, 18, 253, 189, 101, 119, 177, 189, 90, 233, 202, 189, 244, 132, 12, 61, 115, 209, 103, 189, 224, 240, 29, 190, 173, 247, 53, 189, 86, 245, 46, 61, 144, 47, 41, 190, 36, 149, 87, 189, 1, 6, 92, 187, 78, 2, 18, 62, 24, 112, 150, 61, 231, 103, 165, 62, 41, 166, 174, 61, 148, 13, 4, 188, 46, 215, 242, 61, 163, 190, 135, 190, 199, 126, 12, 191, 8, 87, 66, 62, 183, 189, 214, 62, 87, 161, 247, 190, 22, 139, 195, 62, 148, 230, 46, 190, 160, 208, 188, 190, 188, 41, 34, 62, 88, 176, 14, 62, 17, 129, 248, 61, 145, 99, 24, 62, 74, 162, 214, 189, 111, 62, 120, 62, 130, 114, 4, 191, 221, 10, 50, 62, 62, 76, 66, 62, 128, 217, 200, 190, 89, 71, 103, 62, 164, 50, 99, 61, 157, 252, 21, 191, 74, 141, 194, 62, 150, 5, 52, 189, 0, 11, 144, 190, 39, 212, 233, 190, 87, 140, 149, 191, 69, 92, 155, 61, 181, 116, 242, 60, 149, 16, 244, 189, 15, 28, 117, 189, 36, 77, 240, 189, 64, 54, 181, 61, 174, 24, 11, 62, 203, 108, 17, 190, 148, 184, 30, 190, 173, 92, 254, 61, 98, 164, 104, 61, 4, 34, 254, 189, 140, 223, 96, 189, 195, 140, 35, 60, 100, 74, 199, 189, 82, 15, 36, 190, 200, 108, 207, 61, 191, 191, 42, 190, 46, 167, 174, 61, 125, 28, 251, 189, 41, 12, 24, 190, 82, 233, 180, 61, 227, 174, 23, 61, 255, 227, 140, 59, 184, 209, 7, 62, 115, 175, 29, 190, 239, 192, 53, 189, 96, 48, 51, 190, 209, 179, 17, 61, 90, 37, 24, 62, 165, 52, 3, 189, 52, 244, 180, 61, 61, 149, 169, 61, 186, 85, 212, 61, 50, 115, 101, 189, 159, 172, 139, 60, 17, 16, 47, 190, 25, 162, 8, 60, 199, 61, 29, 62, 197, 85, 255, 189, 170, 93, 190, 61, 6, 64, 218, 189, 147, 62, 186, 60, 84, 11, 175, 189, 201, 123, 169, 188, 95, 196, 51, 190, 114, 149, 4, 190, 2, 167, 74, 60, 59, 68, 165, 187, 46, 102, 176, 61, 22, 38, 50, 190, 162, 92, 173, 189, 150, 91, 46, 187, 22, 36, 43, 190, 131, 152, 249, 60, 93, 155, 9, 62, 193, 176, 95, 61, 158, 67, 28, 61, 240, 73, 27, 190, 169, 250, 21, 187, 26, 105, 152, 61, 250, 18, 221, 189, 141, 18, 48, 190, 241, 15, 89, 61, 18, 207, 131, 61, 161, 152, 51, 62, 101, 174, 245, 190, 189, 142, 83, 62, 147, 199, 202, 60, 191, 79, 130, 191, 73, 253, 228, 61, 202, 180, 227, 61, 14, 26, 38, 58, 10, 199, 153, 190, 43, 175, 237, 189, 195, 249, 109, 190, 29, 81, 203, 61, 67, 191, 10, 62, 124, 59, 201, 61, 117, 254, 153, 61, 48, 109, 103, 190, 226, 117, 91, 190, 5, 157, 70, 190, 209, 187, 172, 190, 120, 75, 151, 62, 201, 100, 118, 189, 218, 249, 227, 61, 91, 181, 255, 61, 120, 53, 198, 189, 165, 99, 51, 62, 34, 4, 131, 190, 112, 102, 20, 191, 147, 197, 180, 190, 203, 163, 235, 59, 84, 144, 78, 62, 161, 161, 221, 62, 115, 19, 17, 62, 234, 71, 79, 61, 133, 171, 219, 60, 191, 231, 60, 62, 147, 74, 85, 62, 170, 221, 206, 190, 131, 45, 251, 61, 215, 77, 81, 190, 35, 31, 28, 191, 198, 26, 7, 190, 35, 40, 22, 190, 182, 104, 34, 189, 152, 221, 86, 190, 244, 134, 121, 190, 221, 234, 121, 59, 238, 66, 79, 189, 255, 0, 0, 191, 127, 176, 83, 190, 190, 67, 76, 191, 59, 79, 117, 191, 223, 222, 67, 190, 47, 116, 9, 191, 107, 189, 79, 62, 76, 167, 72, 61, 250, 230, 224, 61, 185, 30, 73, 62, 115, 155, 121, 62, 221, 123, 72, 191, 182, 255, 40, 191, 90, 200, 79, 190, 113, 87, 122, 190, 216, 33, 142, 190, 72, 124, 248, 61, 189, 243, 132, 190, 154, 204, 90, 189, 48, 21, 247, 189, 39, 117, 136, 189, 190, 52, 17, 190, 42, 27, 201, 60, 26, 82, 76, 185, 237, 57, 190, 189, 14, 210, 37, 190, 107, 223, 224, 60, 139, 58, 247, 188, 115, 244, 0, 62, 214, 208, 52, 190, 33, 188, 144, 188, 6, 104, 42, 61, 213, 135, 215, 189, 146, 86, 136, 61, 167, 128, 6, 190, 227, 199, 108, 188, 52, 139, 50, 187, 147, 197, 49, 62, 211, 145, 189, 189, 251, 77, 156, 189, 12, 23, 236, 188, 92, 16, 43, 187, 152, 236, 240, 188, 35, 27, 172, 188, 104, 250, 206, 61, 182, 236, 213, 61, 121, 61, 40, 190, 149, 160, 179, 189, 35, 178, 30, 190, 212, 234, 120, 189, 75, 190, 138, 189, 97, 58, 84, 60, 116, 147, 239, 60, 67, 120, 142, 190, 231, 255, 108, 190, 22, 152, 233, 61, 135, 229, 3, 61, 81, 55, 31, 189, 158, 119, 18, 190, 83, 132, 24, 62, 182, 15, 250, 61, 47, 206, 16, 190, 8, 95, 149, 61, 118, 18, 43, 189, 53, 8, 83, 62, 156, 124, 180, 61, 177, 177, 246, 189, 99, 159, 146, 190, 78, 81, 61, 188, 237, 231, 39, 189, 240, 51, 248, 189, 160, 138, 27, 190, 180, 1, 167, 190, 0, 47, 202, 61, 143, 229, 66, 190, 219, 21, 175, 189, 9, 178, 59, 190, 219, 112, 70, 190, 177, 26, 242, 188, 92, 138, 49, 62, 241, 147, 50, 62, 176, 39, 6, 190, 192, 49, 7, 191, 107, 188, 42, 62, 20, 147, 184, 61, 209, 52, 31, 191, 103, 68, 245, 188, 117, 37, 117, 62, 195, 146, 190, 190, 182, 169, 101, 190, 231, 243, 235, 61, 14, 208, 119, 189, 128, 209, 85, 62, 59, 3, 80, 190, 38, 33, 96, 62, 71, 116, 229, 61, 59, 96, 103, 190, 75, 138, 76, 190, 70, 128, 225, 190, 222, 188, 20, 191, 29, 15, 199, 189, 156, 212, 35, 191, 2, 52, 138, 62, 233, 211, 91, 189, 29, 123, 135, 61, 204, 95, 94, 62, 95, 241, 171, 61, 146, 32, 183, 191, 107, 92, 78, 191, 225, 72, 211, 61, 117, 254, 201, 61, 208, 205, 70, 62, 103, 146, 131, 61, 12, 128, 100, 189, 251, 17, 24, 62, 61, 158, 198, 189, 149, 242, 219, 189, 119, 82, 8, 190, 25, 134, 212, 60, 106, 22, 252, 61, 178, 41, 44, 61, 250, 224, 83, 190, 101, 61, 35, 62, 248, 129, 151, 190, 201, 53, 141, 61, 187, 139, 236, 61, 227, 9, 232, 189, 164, 120, 137, 190, 10, 255, 49, 190, 109, 238, 140, 61, 9, 220, 78, 59, 203, 180, 157, 61, 96, 10, 116, 189, 33, 170, 135, 61, 0, 52, 179, 190, 221, 252, 241, 61, 133, 156, 93, 59, 126, 255, 78, 189, 182, 26, 120, 190, 216, 141, 162, 61, 234, 78, 164, 61, 9, 40, 169, 61, 197, 200, 208, 60, 236, 121, 55, 63, 37, 131, 32, 62, 106, 115, 67, 62, 23, 215, 83, 186, 232, 24, 153, 61, 59, 77, 131, 61, 104, 67, 186, 61, 203, 92, 61, 191, 76, 31, 32, 190, 103, 224, 205, 62, 98, 220, 58, 62, 226, 33, 196, 190, 142, 81, 188, 61, 31, 72, 224, 61, 169, 79, 64, 190, 175, 177, 110, 188, 180, 199, 141, 189, 143, 170, 243, 62, 144, 67, 242, 61, 49, 208, 137, 189, 202, 186, 20, 61, 10, 121, 146, 190, 158, 230, 159, 62, 77, 238, 176, 62, 239, 30, 136, 190, 70, 242, 132, 61, 116, 138, 103, 62, 175, 191, 138, 62, 34, 221, 138, 61, 248, 183, 123, 61, 3, 58, 1, 190, 245, 39, 139, 189, 175, 84, 217, 190, 82, 57, 155, 189, 191, 106, 21, 62, 77, 27, 36, 189, 114, 252, 34, 188, 36, 177, 18, 190, 155, 144, 131, 61, 121, 31, 43, 189, 166, 243, 156, 190, 110, 118, 136, 62, 139, 54, 45, 189, 214, 29, 219, 189, 230, 160, 4, 62, 144, 76, 2, 190, 191, 97, 222, 60, 230, 228, 34, 62, 220, 80, 59, 61, 211, 248, 175, 62, 12, 197, 166, 189, 182, 117, 149, 60, 41, 230, 149, 62, 24, 65, 160, 61, 140, 155, 137, 62, 95, 173, 84, 62, 171, 208, 24, 190, 156, 131, 175, 188, 56, 19, 153, 62, 133, 57, 154, 190, 9, 215, 131, 60, 130, 204, 70, 189, 106, 194, 2, 61, 155, 254, 5, 191, 170, 177, 36, 190, 10, 205, 206, 60, 126, 244, 2, 190, 161, 197, 86, 62, 2, 66, 84, 62, 170, 181, 217, 61, 218, 73, 195, 61, 38, 147, 38, 189, 52, 84, 64, 61, 59, 112, 240, 61, 185, 82, 189, 189, 40, 67, 199, 61, 178, 196, 59, 190, 208, 167, 145, 190, 120, 69, 135, 61, 246, 164, 8, 190, 196, 152, 106, 189, 58, 254, 178, 62, 224, 130, 9, 191, 33, 155, 49, 62, 183, 52, 88, 62, 223, 121, 5, 190, 138, 142, 79, 62, 12, 214, 79, 188, 113, 29, 168, 189, 210, 59, 151, 61, 47, 88, 76, 62, 251, 141, 184, 190, 104, 10, 228, 189, 9, 46, 222, 189, 159, 179, 43, 189, 167, 162, 163, 190, 117, 37, 127, 60, 180, 184, 179, 61, 237, 101, 28, 191, 15, 11, 47, 62, 181, 13, 115, 190, 47, 156, 15, 191, 135, 69, 206, 60, 158, 153, 135, 188, 137, 231, 152, 61, 64, 129, 8, 190, 69, 24, 161, 62, 181, 54, 111, 190, 176, 249, 126, 62, 40, 122, 21, 62, 124, 94, 113, 189, 57, 237, 14, 62, 213, 172, 172, 190, 5, 237, 179, 62, 124, 216, 22, 62, 183, 124, 138, 189, 130, 48, 222, 189, 160, 174, 14, 190, 105, 38, 77, 190, 47, 168, 221, 190, 23, 248, 191, 187, 112, 177, 112, 191, 16, 62, 64, 61, 0, 195, 251, 189, 103, 7, 86, 61, 244, 42, 28, 59, 26, 226, 19, 186, 191, 244, 161, 189, 166, 185, 86, 190, 76, 202, 6, 189, 117, 70, 2, 62, 140, 236, 175, 61, 78, 23, 89, 62, 14, 73, 140, 189, 81, 139, 39, 62, 97, 36, 75, 190, 60, 70, 85, 189, 192, 79, 223, 61, 40, 166, 210, 61, 99, 149, 84, 190, 133, 100, 103, 62, 33, 88, 147, 62, 230, 193, 12, 61, 32, 103, 123, 189, 33, 49, 58, 62, 8, 0, 194, 62, 145, 98, 189, 189, 248, 7, 156, 61, 251, 22, 3, 61, 157, 230, 5, 189, 210, 98, 47, 62, 200, 149, 238, 61, 231, 106, 141, 190, 64, 68, 226, 188, 103, 97, 139, 62, 211, 199, 41, 62, 184, 11, 28, 62, 185, 71, 105, 189, 31, 90, 167, 188, 169, 189, 66, 62, 20, 24, 127, 62, 56, 168, 48, 61, 40, 101, 14, 62, 194, 1, 65, 188, 78, 191, 186, 61, 205, 97, 244, 61, 110, 15, 128, 62, 160, 59, 198, 61, 36, 102, 8, 190, 235, 3, 151, 190, 129, 211, 7, 190, 139, 60, 187, 61, 128, 101, 131, 189, 116, 221, 149, 190, 183, 44, 47, 189, 40, 124, 94, 190, 117, 177, 87, 62, 192, 226, 89, 190, 42, 61, 124, 190, 250, 121, 31, 189, 217, 86, 143, 189, 46, 55, 46, 190, 7, 15, 182, 61, 74, 53, 19, 61, 230, 33, 119, 61, 86, 169, 60, 61, 13, 65, 166, 190, 116, 196, 3, 63, 172, 61, 189, 61, 66, 190, 35, 62, 218, 41, 27, 190, 112, 181, 206, 190, 86, 104, 96, 61, 51, 241, 9, 61, 130, 218, 7, 190, 139, 51, 235, 61, 128, 205, 148, 189, 191, 57, 81, 62, 196, 14, 142, 62, 72, 65, 105, 60, 240, 66, 109, 189, 195, 100, 204, 187, 84, 23, 100, 62, 95, 143, 221, 185, 105, 98, 135, 61, 77, 16, 220, 60, 80, 149, 166, 189, 87, 26, 135, 189, 0, 50, 96, 61, 222, 22, 78, 60, 207, 74, 206, 61, 55, 43, 162, 61, 20, 83, 156, 61, 167, 9, 66, 190, 64, 120, 0, 62, 248, 68, 16, 62, 203, 119, 230, 61, 113, 149, 89, 61, 211, 113, 141, 189, 175, 211, 163, 62, 37, 148, 201, 60, 70, 47, 18, 189, 212, 18, 148, 190, 54, 155, 109, 61, 145, 15, 9, 62, 118, 117, 36, 62, 60, 198, 249, 61, 20, 183, 144, 60, 255, 143, 136, 61, 13, 69, 18, 188, 168, 153, 68, 61, 5, 23, 67, 190, 17, 133, 177, 189, 48, 131, 159, 62, 166, 180, 175, 61, 54, 185, 69, 190, 225, 99, 61, 62, 189, 174, 8, 190, 210, 227, 41, 190, 178, 168, 119, 190, 66, 197, 25, 190, 109, 11, 84, 62, 57, 176, 11, 62, 98, 141, 140, 62, 37, 8, 142, 61, 71, 48, 179, 189, 158, 252, 152, 62, 164, 62, 45, 61, 33, 97, 91, 190, 37, 165, 4, 190, 60, 17, 81, 62, 99, 128, 113, 189, 216, 3, 69, 62, 63, 161, 95, 61, 28, 15, 146, 190, 248, 175, 128, 189, 47, 103, 53, 62, 252, 134, 185, 61, 31, 246, 253, 189, 52, 121, 151, 61, 185, 223, 166, 188, 147, 188, 255, 189, 69, 42, 169, 188, 18, 108, 254, 61, 18, 248, 35, 190, 216, 242, 45, 60, 17, 16, 215, 189, 148, 116, 136, 60, 21, 176, 107, 189, 219, 48, 251, 189, 153, 44, 37, 62, 196, 6, 235, 188, 61, 97, 110, 61, 106, 147, 20, 190, 1, 83, 5, 190, 218, 114, 246, 189, 158, 5, 42, 190, 162, 22, 69, 60, 195, 229, 100, 189, 114, 170, 38, 62, 219, 87, 108, 61, 184, 142, 136, 188, 89, 163, 27, 190, 107, 179, 159, 189, 134, 23, 250, 60, 31, 55, 187, 61, 47, 0, 28, 190, 219, 104, 159, 188, 1, 158, 93, 188, 201, 189, 132, 187, 93, 42, 27, 62, 249, 88, 6, 191, 35, 24, 90, 62, 147, 114, 148, 189, 83, 147, 224, 61, 159, 172, 214, 190, 193, 187, 224, 189, 55, 246, 32, 62, 153, 186, 161, 61, 174, 153, 206, 190, 180, 170, 204, 62, 52, 76, 14, 62, 172, 1, 118, 190, 186, 69, 192, 190, 211, 203, 57, 62, 21, 194, 167, 62, 20, 237, 14, 190, 68, 20, 169, 61, 5, 22, 227, 188, 187, 35, 102, 190, 243, 198, 166, 61, 16, 48, 122, 62, 158, 210, 249, 190, 72, 29, 104, 62, 59, 162, 179, 62, 234, 8, 209, 62, 170, 12, 220, 61, 93, 79, 150, 61, 238, 220, 15, 189, 11, 203, 202, 190, 163, 192, 25, 191, 70, 253, 16, 187, 92, 42, 0, 62, 14, 67, 10, 190, 239, 237, 26, 62, 94, 1, 72, 62, 143, 125, 155, 189, 92, 19, 155, 189, 59, 84, 131, 189, 28, 17, 74, 60, 36, 19, 230, 189, 45, 251, 178, 189, 130, 153, 221, 61, 154, 5, 155, 62, 198, 197, 44, 189, 42, 48, 13, 190, 172, 102, 130, 62, 145, 18, 3, 62, 147, 94, 245, 189, 40, 85, 38, 62, 199, 206, 165, 61, 247, 181, 182, 61, 108, 139, 10, 190, 179, 211, 72, 62, 72, 112, 33, 190, 154, 23, 165, 60, 55, 15, 79, 62, 230, 214, 149, 61, 3, 185, 218, 61, 51, 108, 179, 189, 12, 9, 153, 189, 195, 83, 71, 62, 223, 92, 146, 62, 152, 152, 229, 189, 246, 219, 11, 189, 31, 215, 24, 191, 59, 242, 67, 61, 85, 238, 195, 62, 186, 149, 27, 62, 217, 250, 65, 187, 177, 117, 174, 61, 113, 168, 56, 190, 220, 179, 42, 191, 69, 177, 127, 189, 18, 115, 29, 191, 62, 148, 212, 60, 157, 177, 109, 61, 114, 7, 29, 62, 114, 81, 30, 62, 127, 236, 170, 190, 48, 3, 61, 190, 149, 39, 42, 62, 191, 94, 103, 189, 204, 28, 89, 190, 63, 69, 221, 188, 183, 188, 137, 61, 105, 167, 189, 187, 208, 189, 130, 62, 12, 137, 71, 190, 253, 244, 23, 63, 188, 123, 0, 62, 24, 218, 5, 62, 42, 248, 151, 189, 228, 199, 205, 189, 87, 80, 154, 62, 70, 250, 191, 61, 65, 14, 80, 62, 100, 164, 8, 191, 70, 110, 188, 190, 33, 160, 164, 62, 9, 3, 99, 62, 110, 31, 228, 61, 98, 103, 207, 62, 84, 236, 187, 189, 117, 211, 185, 190, 69, 82, 144, 190, 239, 17, 119, 190, 175, 142, 124, 62, 148, 20, 100, 190, 188, 30, 201, 189, 94, 68, 226, 61, 18, 98, 62, 190, 5, 210, 194, 189, 237, 239, 91, 61, 59, 91, 45, 190, 219, 133, 145, 190, 137, 239, 40, 190, 31, 99, 54, 189, 251, 176, 238, 189, 198, 201, 161, 61, 101, 2, 24, 191, 187, 1, 105, 190, 137, 77, 25, 190, 236, 7, 17, 189, 73, 37, 237, 189, 139, 77, 44, 62, 246, 42, 3, 63, 41, 124, 23, 62, 221, 99, 159, 188, 133, 93, 193, 188, 229, 178, 24, 189, 222, 111, 9, 62, 209, 247, 227, 61, 170, 224, 60, 62, 229, 149, 225, 61, 38, 161, 5, 62, 157, 126, 168, 190, 92, 112, 235, 61, 161, 211, 160, 190, 23, 56, 180, 189, 170, 175, 144, 61, 101, 198, 36, 191, 118, 184, 19, 62, 226, 13, 128, 189, 70, 136, 160, 190, 86, 76, 188, 61, 1, 35, 243, 60, 12, 184, 99, 61, 220, 220, 5, 62, 233, 232, 92, 190, 191, 119, 204, 61, 167, 137, 230, 61, 31, 252, 9, 190, 7, 75, 7, 190, 162, 47, 76, 62, 64, 168, 87, 189, 146, 101, 7, 62, 140, 199, 80, 62, 42, 126, 13, 60, 171, 28, 51, 61, 221, 181, 158, 190, 192, 101, 15, 191, 127, 138, 49, 60, 242, 107, 24, 62, 245, 223, 27, 62, 216, 24, 203, 62, 148, 27, 205, 62, 41, 231, 213, 190, 147, 76, 116, 190, 103, 204, 147, 61, 61, 177, 59, 190, 130, 236, 238, 61, 208, 223, 210, 62, 173, 98, 226, 61, 186, 60, 93, 62, 216, 224, 145, 190, 168, 144, 149, 60, 168, 158, 0, 62, 134, 31, 38, 191, 188, 105, 205, 61, 173, 126, 115, 190, 67, 220, 93, 62, 179, 192, 45, 62, 121, 16, 76, 189, 165, 127, 63, 62, 142, 95, 84, 190, 58, 94, 74, 191, 51, 37, 165, 189, 227, 185, 143, 190, 18, 130, 152, 62, 183, 166, 235, 62, 88, 209, 37, 190, 252, 252, 104, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 198, 191, 62, 47, 84, 143, 61, 35, 33, 34, 62, 107, 169, 45, 190, 93, 25, 184, 61, 111, 61, 6, 61, 143, 79, 197, 61, 224, 116, 50, 190, 161, 81, 128, 58, 139, 163, 192, 189, 218, 89, 4, 190, 229, 56, 123, 62, 159, 103, 217, 61, 62, 59, 36, 190, 207, 19, 68, 62, 201, 21, 202, 60, 225, 121, 220, 189, 8, 116, 71, 62, 56, 142, 174, 189, 65, 29, 106, 62, 230, 93, 99, 190, 54, 243, 52, 62, 105, 22, 229, 60, 161, 163, 44, 62, 23, 27, 144, 61, 215, 140, 12, 190, 49, 30, 128, 62, 71, 27, 170, 61, 198, 243, 32, 62, 122, 160, 11, 61, 90, 61, 230, 189, 255, 50, 91, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 16, 176, 190, 116, 251, 66, 190, 156, 152, 28, 63, 226, 49, 192, 61, 32, 52, 47, 62, 7, 102, 230, 190, 131, 146, 18, 191, 180, 141, 248, 189, 105, 130, 143, 191, 8, 187, 152, 187, 10, 206, 218, 60, 143, 170, 24, 191, 35, 47, 63, 191, 96, 236, 50, 190, 142, 209, 114, 189, 245, 4, 86, 191, 122, 206, 163, 189, 209, 188, 251, 62, 99, 20, 215, 190, 80, 49, 40, 190, 28, 20, 243, 62, 30, 148, 217, 61, 173, 120, 52, 62, 108, 59, 225, 61, 32, 253, 100, 62, 150, 13, 24, 189, 204, 95, 68, 63, 30, 130, 204, 60, 159, 168, 109, 62, 230, 35, 229, 190, 142, 203, 89, 190, 85, 184, 31, 191, 162, 43, 37, 190, 70, 9, 201, 61, 207, 153, 100, 61, 179, 107, 37, 190, 41, 170, 209, 190, 229, 221, 173, 60, 102, 156, 29, 190, 166, 49, 15, 190, 203, 160, 148, 62, 45, 2, 189, 189, 73, 47, 5, 190, 30, 131, 13, 62, 15, 60, 253, 61, 11, 229, 64, 61, 203, 99, 107, 190, 226, 24, 81, 62, 35, 45, 126, 61, 97, 175, 150, 60, 15, 2, 238, 61, 167, 40, 92, 190, 52, 126, 110, 62, 115, 108, 60, 190, 228, 112, 146, 188, 244, 14, 154, 189, 231, 242, 19, 190, 17, 234, 46, 61, 212, 227, 146, 189, 86, 125, 48, 190, 105, 100, 103, 61, 223, 76, 253, 61, 148, 6, 54, 61, 184, 129, 191, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 158, 102, 62, 124, 114, 252, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {248, 28, 114, 63, 93, 83, 253, 190, 195, 17, 175, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {207, 94, 16, 64, 188, 46, 91, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0087/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}