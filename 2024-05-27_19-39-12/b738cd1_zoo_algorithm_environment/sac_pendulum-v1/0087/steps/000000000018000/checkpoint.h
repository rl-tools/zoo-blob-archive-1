// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 49, 24, 63, 13, 117, 176, 190, 50, 242, 140, 190, 77, 207, 155, 190, 236, 155, 142, 190, 234, 248, 204, 62, 236, 207, 226, 190, 1, 246, 180, 62, 10, 136, 245, 61, 23, 96, 137, 190, 251, 12, 222, 63, 187, 148, 154, 62, 217, 38, 56, 63, 244, 136, 148, 63, 229, 237, 214, 62, 154, 81, 59, 63, 220, 153, 143, 63, 63, 209, 90, 62, 196, 189, 186, 61, 232, 101, 47, 191, 124, 36, 156, 62, 174, 154, 26, 63, 246, 174, 162, 191, 145, 165, 199, 190, 226, 156, 59, 63, 63, 190, 53, 63, 71, 84, 236, 62, 120, 248, 52, 63, 184, 61, 105, 191, 22, 60, 188, 189, 38, 166, 177, 186, 224, 157, 96, 62, 118, 75, 134, 190, 28, 65, 233, 62, 223, 63, 209, 62, 147, 16, 223, 62, 225, 153, 8, 190, 198, 68, 159, 191, 143, 2, 215, 190, 98, 159, 244, 190, 216, 67, 42, 62, 45, 254, 175, 61, 125, 136, 124, 63, 205, 48, 144, 191, 44, 52, 190, 189, 96, 69, 143, 62, 75, 178, 70, 191, 161, 175, 236, 190, 190, 225, 226, 62, 230, 183, 97, 63, 32, 248, 213, 62, 71, 89, 1, 62, 222, 3, 194, 190, 65, 128, 55, 63, 245, 221, 254, 62, 134, 30, 44, 62, 232, 213, 236, 62, 12, 185, 121, 62, 173, 169, 109, 190, 108, 253, 44, 63, 63, 244, 109, 191, 111, 74, 76, 191, 21, 121, 30, 61, 223, 58, 17, 63, 131, 58, 95, 63, 185, 6, 164, 62, 162, 225, 151, 191, 8, 231, 131, 190, 151, 230, 6, 62, 145, 4, 227, 189, 91, 100, 161, 191, 41, 195, 248, 189, 58, 183, 82, 191, 172, 208, 249, 189, 0, 82, 48, 190, 203, 86, 13, 191, 191, 199, 161, 63, 232, 51, 215, 62, 173, 225, 229, 190, 111, 240, 162, 63, 53, 95, 6, 63, 37, 134, 11, 62, 76, 169, 51, 191, 75, 234, 237, 62, 55, 192, 152, 190, 106, 203, 64, 63, 207, 89, 245, 190, 229, 161, 101, 63, 228, 214, 30, 63, 206, 24, 133, 62, 140, 157, 182, 190, 104, 55, 115, 190, 135, 217, 62, 188, 130, 239, 210, 61, 39, 70, 168, 190, 24, 208, 229, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 110, 67, 191, 61, 140, 142, 62, 136, 122, 39, 63, 55, 104, 225, 190, 66, 242, 248, 190, 224, 10, 160, 62, 230, 210, 210, 189, 96, 200, 3, 190, 121, 40, 109, 191, 228, 163, 186, 61, 136, 154, 170, 62, 147, 251, 69, 190, 47, 230, 161, 62, 90, 57, 41, 63, 238, 39, 171, 62, 186, 59, 71, 190, 105, 224, 156, 62, 197, 245, 129, 190, 230, 11, 142, 190, 241, 46, 181, 189, 112, 240, 43, 63, 144, 103, 196, 190, 171, 165, 76, 63, 193, 1, 53, 63, 207, 98, 151, 190, 220, 168, 12, 190, 127, 173, 137, 188, 78, 123, 101, 191, 156, 7, 210, 62, 226, 21, 109, 190, 24, 80, 27, 191, 146, 164, 76, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 247, 148, 190, 137, 17, 27, 190, 139, 252, 195, 60, 190, 119, 91, 191, 82, 252, 37, 62, 140, 134, 167, 62, 119, 218, 3, 189, 161, 85, 125, 61, 112, 218, 10, 62, 230, 61, 103, 60, 49, 104, 82, 61, 21, 222, 5, 62, 188, 75, 167, 189, 116, 47, 119, 62, 60, 39, 217, 189, 128, 255, 96, 186, 66, 158, 23, 62, 133, 95, 28, 190, 211, 14, 132, 61, 173, 190, 227, 189, 214, 247, 163, 62, 9, 251, 58, 61, 103, 162, 197, 60, 226, 128, 225, 61, 56, 0, 139, 190, 246, 78, 93, 191, 82, 119, 19, 191, 103, 230, 72, 190, 31, 179, 222, 60, 238, 222, 178, 62, 63, 189, 102, 61, 60, 18, 220, 61, 40, 59, 15, 190, 82, 71, 244, 61, 155, 24, 186, 188, 241, 245, 42, 190, 153, 171, 153, 61, 222, 226, 189, 188, 57, 106, 97, 61, 3, 242, 253, 189, 54, 156, 77, 62, 254, 43, 145, 61, 23, 210, 238, 189, 127, 102, 226, 189, 143, 189, 6, 190, 53, 39, 60, 190, 195, 58, 75, 190, 162, 22, 63, 62, 105, 62, 23, 62, 34, 214, 116, 189, 160, 28, 158, 61, 67, 35, 4, 62, 55, 53, 25, 190, 195, 146, 47, 62, 225, 220, 161, 60, 148, 191, 248, 59, 78, 87, 12, 190, 183, 138, 166, 62, 186, 50, 254, 189, 205, 35, 98, 62, 202, 12, 132, 61, 60, 47, 216, 62, 112, 186, 210, 61, 100, 120, 133, 62, 118, 111, 197, 62, 175, 193, 145, 62, 162, 51, 243, 61, 136, 32, 59, 63, 107, 235, 17, 191, 65, 20, 97, 189, 137, 199, 86, 62, 133, 130, 144, 62, 104, 158, 225, 190, 161, 82, 203, 62, 224, 157, 7, 190, 87, 62, 211, 190, 187, 14, 157, 190, 66, 101, 157, 189, 150, 154, 199, 62, 170, 250, 44, 61, 161, 112, 102, 188, 47, 83, 179, 61, 71, 154, 227, 190, 40, 85, 29, 62, 169, 204, 210, 62, 39, 100, 218, 190, 27, 39, 52, 62, 65, 251, 25, 62, 49, 29, 170, 61, 215, 15, 146, 62, 178, 68, 162, 61, 126, 13, 209, 190, 153, 37, 57, 190, 149, 8, 172, 190, 208, 194, 52, 190, 39, 112, 19, 61, 157, 37, 176, 60, 42, 64, 25, 61, 52, 61, 15, 190, 107, 149, 177, 189, 99, 170, 234, 61, 52, 250, 186, 189, 6, 65, 164, 60, 148, 226, 29, 190, 73, 97, 22, 62, 239, 26, 177, 189, 41, 247, 205, 61, 183, 138, 189, 189, 138, 149, 209, 60, 40, 186, 20, 61, 77, 9, 243, 189, 149, 168, 47, 62, 56, 134, 20, 190, 108, 37, 214, 60, 165, 42, 7, 62, 164, 240, 169, 187, 249, 66, 57, 189, 174, 96, 227, 189, 118, 57, 72, 190, 48, 170, 58, 190, 138, 29, 33, 190, 172, 229, 83, 190, 144, 253, 49, 190, 171, 249, 138, 61, 20, 123, 31, 190, 131, 41, 23, 62, 199, 49, 30, 190, 165, 251, 23, 61, 126, 39, 47, 62, 238, 155, 154, 190, 131, 28, 241, 190, 3, 174, 193, 191, 49, 13, 169, 190, 251, 151, 137, 61, 94, 193, 34, 190, 128, 211, 73, 189, 229, 184, 74, 191, 172, 229, 60, 62, 166, 81, 66, 62, 145, 135, 227, 190, 180, 10, 31, 62, 133, 161, 125, 189, 239, 183, 164, 62, 155, 156, 103, 61, 176, 221, 168, 189, 13, 213, 160, 190, 140, 205, 142, 190, 220, 159, 22, 191, 24, 219, 249, 189, 23, 48, 59, 190, 67, 54, 138, 191, 143, 74, 26, 190, 79, 66, 197, 190, 210, 136, 162, 190, 140, 129, 67, 191, 226, 9, 120, 61, 99, 197, 64, 62, 193, 223, 99, 62, 167, 220, 13, 62, 63, 208, 125, 62, 142, 121, 54, 62, 49, 13, 95, 62, 210, 247, 234, 190, 224, 30, 225, 191, 45, 124, 153, 189, 84, 57, 22, 62, 136, 53, 165, 60, 198, 89, 52, 190, 182, 239, 88, 62, 146, 235, 88, 188, 127, 237, 58, 188, 9, 80, 140, 61, 213, 84, 86, 190, 51, 126, 5, 191, 193, 101, 160, 62, 123, 93, 155, 190, 212, 64, 242, 188, 228, 49, 176, 60, 98, 35, 195, 61, 30, 215, 110, 62, 6, 129, 57, 191, 219, 69, 240, 61, 4, 103, 4, 191, 234, 117, 87, 189, 43, 20, 58, 190, 172, 118, 40, 190, 180, 169, 238, 189, 48, 40, 47, 190, 20, 133, 15, 191, 253, 255, 178, 62, 124, 17, 17, 62, 8, 94, 176, 190, 101, 176, 169, 190, 252, 64, 221, 61, 159, 131, 130, 62, 231, 3, 108, 191, 171, 192, 73, 190, 155, 55, 156, 62, 147, 99, 126, 188, 154, 218, 56, 60, 169, 8, 182, 190, 102, 5, 33, 190, 4, 119, 55, 62, 189, 152, 42, 191, 215, 244, 181, 61, 116, 236, 143, 61, 71, 207, 28, 190, 46, 229, 230, 189, 129, 217, 156, 191, 105, 141, 84, 62, 193, 34, 21, 191, 149, 129, 24, 62, 185, 148, 220, 62, 69, 182, 101, 190, 27, 180, 132, 61, 200, 14, 216, 62, 69, 153, 99, 190, 77, 145, 137, 191, 130, 232, 221, 191, 2, 71, 180, 62, 136, 64, 134, 188, 15, 180, 149, 190, 43, 229, 178, 189, 67, 207, 90, 61, 30, 63, 43, 62, 207, 123, 133, 189, 255, 201, 5, 190, 144, 232, 237, 60, 26, 74, 31, 190, 78, 239, 195, 61, 196, 71, 92, 188, 52, 178, 63, 189, 235, 224, 153, 61, 187, 168, 166, 189, 214, 50, 26, 190, 163, 151, 14, 190, 126, 152, 18, 62, 248, 131, 32, 62, 70, 50, 0, 190, 184, 211, 208, 189, 176, 252, 152, 189, 129, 150, 219, 188, 14, 206, 178, 189, 214, 18, 253, 189, 101, 119, 177, 189, 90, 233, 202, 189, 244, 132, 12, 61, 115, 209, 103, 189, 224, 240, 29, 190, 173, 247, 53, 189, 86, 245, 46, 61, 144, 47, 41, 190, 36, 149, 87, 189, 1, 6, 92, 187, 78, 2, 18, 62, 24, 112, 150, 61, 91, 9, 155, 62, 106, 254, 170, 61, 158, 128, 96, 61, 36, 39, 146, 62, 29, 192, 210, 190, 63, 100, 155, 191, 113, 112, 128, 62, 81, 79, 9, 63, 10, 211, 73, 191, 209, 16, 0, 63, 171, 36, 24, 190, 98, 138, 42, 191, 122, 21, 162, 62, 123, 3, 120, 62, 86, 166, 78, 62, 8, 38, 137, 62, 242, 224, 94, 190, 95, 95, 11, 62, 88, 2, 66, 191, 241, 70, 233, 61, 244, 250, 182, 62, 251, 57, 17, 191, 153, 46, 181, 62, 132, 238, 90, 62, 64, 62, 174, 190, 213, 37, 197, 62, 129, 133, 164, 189, 163, 252, 239, 190, 250, 234, 201, 190, 244, 63, 235, 191, 69, 92, 155, 61, 14, 219, 27, 62, 149, 16, 244, 189, 98, 28, 117, 189, 82, 77, 240, 189, 41, 54, 181, 61, 123, 24, 11, 62, 16, 109, 17, 190, 148, 184, 30, 190, 173, 92, 254, 61, 245, 163, 104, 61, 5, 34, 254, 189, 150, 223, 96, 189, 112, 138, 35, 60, 100, 74, 199, 189, 100, 15, 36, 190, 169, 108, 207, 61, 191, 191, 42, 190, 152, 166, 174, 61, 126, 28, 251, 189, 66, 12, 24, 190, 7, 233, 180, 61, 227, 174, 23, 61, 1, 223, 140, 59, 184, 209, 7, 62, 115, 175, 29, 190, 239, 192, 53, 189, 100, 48, 51, 190, 90, 179, 17, 61, 90, 37, 24, 62, 165, 52, 3, 189, 221, 243, 180, 61, 61, 149, 169, 61, 186, 85, 212, 61, 50, 115, 101, 189, 159, 172, 139, 60, 17, 16, 47, 190, 25, 162, 8, 60, 199, 61, 29, 62, 197, 85, 255, 189, 170, 93, 190, 61, 6, 64, 218, 189, 147, 62, 186, 60, 84, 11, 175, 189, 201, 123, 169, 188, 95, 196, 51, 190, 114, 149, 4, 190, 2, 167, 74, 60, 59, 68, 165, 187, 46, 102, 176, 61, 22, 38, 50, 190, 162, 92, 173, 189, 150, 91, 46, 187, 22, 36, 43, 190, 131, 152, 249, 60, 93, 155, 9, 62, 193, 176, 95, 61, 158, 67, 28, 61, 240, 73, 27, 190, 169, 250, 21, 187, 26, 105, 152, 61, 250, 18, 221, 189, 141, 18, 48, 190, 241, 15, 89, 61, 18, 207, 131, 61, 161, 152, 51, 62, 11, 74, 78, 191, 172, 95, 17, 62, 197, 21, 177, 61, 113, 17, 192, 191, 216, 43, 91, 62, 141, 232, 157, 62, 69, 77, 95, 189, 51, 63, 190, 190, 95, 126, 103, 62, 93, 178, 79, 190, 201, 241, 21, 62, 10, 241, 8, 62, 132, 75, 39, 189, 181, 221, 196, 61, 105, 115, 55, 190, 237, 203, 144, 190, 40, 232, 240, 189, 232, 131, 159, 190, 227, 211, 136, 62, 176, 50, 176, 188, 161, 200, 64, 61, 211, 223, 74, 62, 170, 27, 33, 190, 239, 197, 1, 62, 24, 14, 197, 190, 170, 192, 109, 191, 188, 241, 19, 191, 174, 17, 59, 60, 36, 169, 86, 62, 41, 228, 0, 63, 115, 19, 17, 62, 157, 35, 64, 60, 133, 171, 219, 60, 158, 171, 74, 62, 96, 172, 93, 62, 188, 240, 25, 191, 131, 45, 251, 61, 215, 77, 81, 190, 132, 221, 56, 191, 227, 26, 141, 190, 35, 40, 22, 190, 8, 175, 185, 189, 163, 73, 80, 190, 244, 134, 121, 190, 58, 4, 236, 189, 194, 5, 93, 189, 178, 105, 47, 191, 88, 224, 183, 190, 110, 189, 119, 191, 170, 52, 61, 191, 223, 222, 67, 190, 0, 58, 188, 190, 216, 47, 47, 62, 76, 167, 72, 61, 149, 252, 213, 61, 174, 18, 211, 61, 143, 141, 143, 62, 246, 206, 82, 191, 76, 183, 104, 191, 25, 140, 78, 190, 154, 92, 77, 190, 216, 33, 142, 190, 72, 124, 248, 61, 138, 241, 189, 190, 154, 204, 90, 189, 48, 21, 247, 189, 39, 117, 136, 189, 190, 52, 17, 190, 42, 27, 201, 60, 26, 82, 76, 185, 237, 57, 190, 189, 14, 210, 37, 190, 107, 223, 224, 60, 139, 58, 247, 188, 115, 244, 0, 62, 214, 208, 52, 190, 33, 188, 144, 188, 6, 104, 42, 61, 213, 135, 215, 189, 146, 86, 136, 61, 167, 128, 6, 190, 227, 199, 108, 188, 52, 139, 50, 187, 147, 197, 49, 62, 211, 145, 189, 189, 251, 77, 156, 189, 12, 23, 236, 188, 92, 16, 43, 187, 152, 236, 240, 188, 35, 27, 172, 188, 104, 250, 206, 61, 182, 236, 213, 61, 121, 61, 40, 190, 149, 160, 179, 189, 35, 178, 30, 190, 212, 234, 120, 189, 164, 7, 217, 190, 24, 241, 50, 190, 18, 217, 208, 61, 251, 53, 210, 190, 226, 204, 146, 190, 247, 51, 56, 62, 197, 127, 112, 190, 81, 139, 202, 188, 224, 32, 240, 189, 195, 188, 8, 62, 221, 10, 103, 62, 188, 215, 152, 190, 92, 138, 156, 61, 98, 80, 194, 60, 190, 251, 82, 62, 128, 175, 13, 62, 205, 95, 32, 190, 30, 12, 40, 191, 41, 88, 108, 190, 183, 163, 99, 190, 166, 169, 172, 60, 29, 103, 106, 190, 7, 180, 233, 190, 254, 233, 15, 62, 240, 198, 28, 191, 144, 126, 241, 189, 254, 161, 222, 189, 228, 36, 217, 190, 2, 106, 45, 61, 248, 125, 223, 61, 241, 147, 50, 62, 106, 233, 136, 189, 81, 88, 78, 191, 75, 221, 30, 62, 240, 106, 49, 62, 15, 176, 72, 191, 44, 180, 103, 59, 143, 29, 246, 62, 109, 59, 203, 61, 101, 126, 113, 190, 105, 151, 13, 63, 106, 160, 244, 189, 68, 33, 90, 62, 132, 195, 142, 190, 104, 68, 131, 62, 79, 69, 76, 62, 36, 104, 122, 190, 243, 199, 61, 190, 96, 154, 31, 191, 191, 37, 209, 190, 203, 109, 24, 186, 215, 153, 11, 191, 55, 91, 5, 63, 37, 213, 69, 189, 131, 1, 47, 62, 19, 210, 198, 62, 172, 75, 242, 60, 119, 46, 216, 191, 147, 60, 163, 191, 45, 215, 36, 62, 226, 12, 244, 61, 7, 31, 91, 189, 103, 146, 131, 61, 102, 149, 216, 188, 20, 213, 199, 189, 103, 177, 107, 189, 81, 122, 142, 190, 92, 213, 26, 191, 233, 179, 186, 60, 19, 204, 78, 62, 192, 171, 68, 62, 78, 42, 194, 190, 143, 206, 195, 62, 59, 138, 212, 190, 250, 127, 91, 62, 1, 95, 24, 62, 192, 36, 138, 190, 235, 97, 227, 190, 65, 85, 135, 190, 238, 233, 113, 61, 16, 211, 159, 189, 163, 144, 99, 62, 84, 130, 3, 61, 14, 56, 28, 62, 90, 141, 206, 190, 131, 230, 246, 61, 206, 242, 7, 190, 149, 32, 41, 190, 255, 9, 86, 191, 217, 184, 22, 61, 189, 66, 85, 189, 160, 25, 162, 62, 219, 201, 74, 62, 217, 146, 52, 63, 37, 131, 32, 62, 34, 151, 126, 62, 166, 48, 120, 62, 226, 160, 17, 62, 192, 110, 36, 61, 159, 201, 150, 60, 190, 108, 95, 191, 131, 183, 118, 190, 101, 90, 240, 62, 246, 43, 78, 62, 146, 106, 57, 191, 192, 85, 66, 62, 186, 254, 227, 61, 147, 135, 29, 190, 37, 7, 12, 188, 93, 215, 104, 189, 166, 9, 19, 63, 16, 232, 235, 61, 15, 243, 187, 189, 5, 61, 91, 61, 149, 176, 115, 190, 209, 10, 176, 62, 196, 132, 176, 62, 81, 204, 184, 190, 39, 72, 139, 61, 91, 120, 148, 62, 217, 58, 159, 62, 173, 253, 167, 189, 124, 225, 228, 189, 182, 130, 204, 189, 151, 106, 154, 189, 104, 40, 206, 190, 82, 57, 155, 189, 138, 135, 15, 62, 64, 11, 242, 190, 82, 103, 135, 188, 153, 151, 32, 190, 49, 247, 22, 62, 0, 229, 116, 61, 159, 165, 111, 190, 36, 253, 132, 62, 167, 84, 217, 61, 10, 247, 173, 61, 83, 255, 94, 62, 247, 90, 40, 189, 110, 15, 1, 61, 182, 4, 33, 62, 126, 196, 251, 60, 189, 27, 196, 62, 161, 180, 145, 189, 109, 205, 154, 61, 240, 156, 168, 62, 66, 242, 143, 61, 23, 201, 145, 62, 32, 183, 72, 62, 43, 225, 143, 189, 203, 231, 103, 188, 216, 218, 142, 62, 52, 117, 130, 191, 52, 30, 28, 62, 81, 183, 153, 61, 30, 18, 142, 61, 122, 207, 59, 191, 215, 172, 150, 189, 10, 205, 206, 60, 112, 67, 121, 190, 202, 197, 86, 62, 175, 8, 82, 62, 136, 29, 31, 60, 50, 215, 214, 59, 13, 55, 14, 60, 137, 14, 40, 61, 216, 200, 206, 61, 183, 163, 213, 189, 35, 7, 133, 62, 132, 248, 75, 190, 204, 182, 145, 190, 48, 139, 161, 61, 34, 49, 236, 190, 209, 4, 45, 190, 205, 38, 148, 62, 90, 104, 245, 190, 166, 182, 52, 62, 213, 146, 132, 62, 196, 91, 221, 189, 165, 150, 107, 62, 46, 108, 214, 189, 236, 218, 26, 189, 244, 73, 171, 59, 187, 188, 236, 61, 190, 90, 214, 190, 114, 144, 150, 189, 162, 134, 222, 189, 29, 214, 76, 188, 234, 206, 2, 191, 195, 113, 97, 61, 180, 184, 179, 61, 50, 200, 40, 191, 212, 227, 8, 63, 165, 77, 27, 189, 251, 179, 55, 191, 167, 132, 120, 189, 155, 129, 221, 60, 171, 1, 221, 188, 237, 211, 253, 60, 216, 232, 184, 62, 82, 101, 176, 190, 38, 49, 148, 62, 13, 5, 26, 62, 187, 136, 86, 61, 107, 160, 70, 62, 138, 114, 238, 190, 3, 21, 185, 62, 161, 87, 77, 62, 144, 56, 174, 189, 58, 95, 58, 62, 119, 71, 134, 61, 104, 253, 152, 189, 186, 210, 72, 191, 41, 197, 133, 61, 18, 189, 170, 191, 45, 202, 165, 189, 167, 208, 154, 61, 103, 7, 86, 61, 94, 119, 21, 59, 63, 187, 37, 62, 185, 77, 42, 189, 101, 1, 49, 190, 76, 202, 6, 189, 164, 187, 53, 62, 246, 29, 19, 62, 188, 32, 100, 62, 170, 25, 192, 188, 73, 132, 108, 62, 220, 210, 72, 190, 109, 211, 159, 189, 199, 70, 209, 61, 186, 105, 103, 61, 203, 38, 121, 190, 253, 108, 65, 62, 223, 195, 160, 62, 93, 158, 144, 61, 45, 189, 179, 189, 128, 247, 91, 62, 252, 96, 175, 62, 45, 120, 171, 189, 53, 98, 149, 61, 25, 7, 156, 60, 242, 180, 240, 59, 26, 130, 42, 62, 156, 158, 241, 60, 234, 68, 131, 190, 105, 252, 199, 189, 192, 6, 137, 62, 209, 74, 158, 188, 177, 57, 186, 61, 154, 14, 141, 189, 221, 52, 158, 189, 241, 161, 130, 62, 150, 237, 109, 62, 56, 168, 48, 61, 104, 212, 43, 62, 194, 1, 65, 188, 219, 76, 77, 61, 63, 44, 136, 62, 164, 195, 208, 62, 31, 7, 68, 62, 180, 206, 128, 61, 160, 197, 205, 190, 63, 194, 170, 190, 88, 127, 231, 60, 29, 101, 83, 190, 70, 108, 38, 189, 70, 204, 249, 188, 219, 0, 85, 190, 179, 206, 172, 62, 102, 15, 100, 190, 171, 128, 19, 191, 147, 228, 53, 61, 226, 234, 22, 190, 156, 141, 86, 190, 154, 198, 244, 60, 25, 242, 35, 61, 190, 230, 23, 62, 71, 194, 182, 61, 81, 127, 140, 190, 63, 255, 49, 63, 198, 205, 220, 61, 92, 147, 112, 62, 101, 167, 147, 190, 233, 57, 91, 190, 48, 92, 12, 62, 51, 241, 9, 61, 106, 227, 122, 190, 37, 240, 97, 62, 3, 103, 99, 189, 239, 131, 100, 62, 255, 141, 176, 62, 202, 73, 32, 188, 227, 190, 250, 189, 0, 186, 150, 59, 62, 69, 21, 62, 18, 108, 177, 189, 75, 244, 144, 60, 223, 19, 17, 187, 122, 67, 112, 189, 186, 144, 243, 189, 134, 218, 132, 61, 97, 198, 187, 188, 137, 27, 138, 61, 21, 95, 130, 61, 20, 219, 103, 61, 31, 205, 39, 190, 120, 65, 245, 61, 78, 96, 67, 61, 221, 48, 215, 61, 153, 191, 241, 187, 175, 19, 179, 189, 35, 185, 88, 62, 206, 200, 99, 189, 95, 46, 114, 189, 48, 243, 169, 190, 27, 199, 134, 61, 21, 234, 194, 61, 118, 117, 36, 62, 112, 63, 204, 61, 148, 162, 245, 61, 168, 1, 166, 61, 122, 217, 78, 189, 17, 1, 183, 188, 45, 157, 185, 190, 233, 105, 59, 190, 69, 45, 169, 62, 118, 187, 136, 189, 100, 37, 202, 190, 88, 97, 231, 61, 44, 53, 144, 190, 51, 221, 46, 190, 70, 44, 7, 191, 38, 75, 70, 190, 51, 203, 38, 62, 197, 87, 79, 189, 152, 60, 70, 62, 34, 206, 136, 61, 215, 226, 128, 189, 56, 4, 159, 62, 196, 88, 213, 188, 147, 188, 182, 190, 26, 49, 47, 190, 229, 117, 15, 62, 26, 75, 253, 188, 70, 170, 187, 61, 244, 111, 35, 189, 145, 49, 153, 190, 101, 180, 226, 189, 244, 81, 122, 61, 252, 134, 185, 61, 104, 118, 70, 190, 52, 121, 151, 61, 185, 223, 166, 188, 147, 188, 255, 189, 69, 42, 169, 188, 18, 108, 254, 61, 18, 248, 35, 190, 216, 242, 45, 60, 17, 16, 215, 189, 148, 116, 136, 60, 21, 176, 107, 189, 219, 48, 251, 189, 153, 44, 37, 62, 196, 6, 235, 188, 61, 97, 110, 61, 106, 147, 20, 190, 1, 83, 5, 190, 218, 114, 246, 189, 158, 5, 42, 190, 162, 22, 69, 60, 195, 229, 100, 189, 114, 170, 38, 62, 219, 87, 108, 61, 184, 142, 136, 188, 89, 163, 27, 190, 107, 179, 159, 189, 134, 23, 250, 60, 31, 55, 187, 61, 47, 0, 28, 190, 219, 104, 159, 188, 1, 158, 93, 188, 201, 189, 132, 187, 93, 42, 27, 62, 242, 230, 209, 190, 168, 230, 137, 62, 182, 185, 63, 189, 109, 136, 82, 60, 224, 161, 30, 191, 100, 147, 248, 189, 30, 126, 102, 62, 131, 123, 113, 61, 7, 200, 56, 191, 55, 90, 228, 62, 77, 180, 47, 62, 131, 102, 114, 190, 197, 191, 212, 190, 255, 147, 93, 62, 152, 130, 204, 62, 97, 83, 27, 190, 158, 130, 153, 60, 34, 96, 195, 187, 23, 189, 65, 190, 119, 113, 209, 61, 194, 3, 157, 62, 154, 17, 37, 191, 67, 174, 132, 62, 236, 111, 217, 62, 38, 76, 0, 63, 231, 16, 96, 189, 32, 108, 213, 189, 111, 251, 170, 187, 159, 53, 144, 190, 127, 87, 32, 191, 70, 253, 16, 187, 33, 65, 32, 62, 125, 24, 93, 190, 147, 83, 35, 62, 66, 22, 83, 62, 248, 42, 213, 189, 131, 71, 159, 189, 81, 125, 158, 189, 211, 30, 79, 60, 130, 23, 54, 190, 243, 169, 244, 187, 29, 99, 96, 61, 47, 10, 180, 62, 238, 10, 178, 188, 16, 116, 84, 190, 44, 177, 128, 62, 172, 236, 98, 61, 47, 155, 231, 189, 24, 102, 7, 62, 151, 251, 202, 61, 16, 54, 9, 62, 10, 3, 254, 189, 75, 169, 240, 61, 214, 24, 24, 190, 164, 64, 153, 189, 245, 34, 54, 62, 124, 116, 133, 190, 233, 152, 133, 61, 54, 94, 242, 189, 108, 116, 233, 189, 55, 37, 145, 62, 112, 204, 122, 62, 152, 152, 229, 189, 155, 54, 153, 60, 65, 177, 131, 191, 42, 111, 37, 188, 51, 142, 252, 62, 231, 162, 151, 62, 250, 166, 228, 61, 118, 67, 184, 62, 163, 41, 151, 190, 15, 186, 93, 191, 27, 226, 248, 189, 164, 49, 146, 191, 168, 171, 221, 188, 174, 65, 124, 61, 246, 122, 218, 61, 100, 242, 124, 62, 153, 238, 157, 190, 211, 186, 227, 190, 30, 60, 134, 62, 193, 98, 42, 190, 136, 37, 136, 190, 198, 123, 213, 189, 28, 217, 234, 60, 204, 230, 201, 61, 65, 86, 116, 62, 165, 134, 213, 189, 234, 44, 160, 62, 48, 144, 193, 61, 176, 114, 67, 62, 243, 6, 111, 190, 248, 245, 65, 190, 202, 44, 6, 63, 70, 250, 191, 61, 242, 130, 159, 189, 253, 53, 87, 191, 26, 160, 223, 190, 15, 153, 180, 62, 99, 35, 48, 190, 140, 229, 63, 190, 81, 40, 2, 63, 213, 227, 158, 190, 33, 184, 22, 191, 224, 32, 58, 191, 199, 220, 251, 190, 158, 38, 145, 62, 136, 57, 1, 191, 134, 3, 81, 190, 140, 110, 246, 61, 12, 108, 149, 190, 104, 147, 44, 190, 167, 63, 27, 190, 173, 195, 136, 190, 79, 186, 225, 190, 6, 21, 61, 190, 105, 49, 60, 61, 71, 30, 215, 190, 175, 211, 215, 61, 119, 220, 138, 191, 80, 48, 213, 190, 160, 69, 200, 190, 61, 82, 254, 190, 184, 236, 229, 189, 125, 208, 105, 62, 110, 15, 114, 62, 41, 124, 23, 62, 222, 182, 197, 186, 133, 93, 193, 188, 200, 33, 179, 188, 100, 82, 174, 61, 114, 162, 93, 61, 85, 205, 27, 62, 29, 159, 226, 189, 59, 103, 24, 62, 27, 61, 180, 190, 46, 199, 102, 62, 182, 249, 43, 191, 12, 58, 131, 190, 146, 166, 94, 61, 5, 132, 73, 191, 206, 208, 196, 61, 129, 183, 238, 190, 100, 161, 227, 190, 163, 242, 202, 60, 184, 178, 149, 61, 105, 125, 127, 61, 210, 120, 20, 62, 237, 153, 43, 190, 23, 117, 140, 61, 130, 202, 45, 62, 47, 187, 141, 190, 177, 167, 68, 62, 175, 80, 153, 62, 95, 162, 164, 187, 112, 87, 68, 62, 196, 54, 112, 62, 27, 111, 25, 190, 171, 28, 51, 61, 76, 192, 167, 190, 159, 91, 98, 191, 90, 60, 94, 189, 14, 207, 218, 60, 168, 50, 155, 190, 92, 50, 139, 62, 30, 64, 240, 62, 255, 126, 165, 190, 46, 5, 149, 190, 0, 118, 114, 61, 157, 95, 254, 189, 251, 130, 215, 61, 41, 116, 181, 62, 74, 68, 78, 189, 69, 206, 193, 61, 20, 115, 90, 190, 106, 173, 116, 189, 189, 4, 193, 61, 88, 131, 1, 191, 214, 228, 192, 61, 134, 104, 36, 190, 148, 250, 41, 62, 148, 215, 48, 61, 108, 70, 77, 190, 140, 90, 83, 62, 222, 209, 205, 190, 239, 194, 143, 191, 179, 209, 5, 191, 222, 160, 154, 189, 166, 23, 129, 62, 170, 94, 232, 62, 88, 209, 37, 190, 58, 118, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 1, 200, 62, 176, 124, 248, 59, 182, 20, 95, 62, 37, 11, 71, 190, 33, 221, 134, 61, 83, 176, 229, 186, 243, 169, 39, 62, 224, 116, 50, 190, 95, 45, 211, 60, 218, 163, 192, 189, 218, 89, 4, 190, 22, 115, 169, 62, 93, 198, 168, 61, 62, 59, 36, 190, 143, 11, 138, 62, 159, 238, 184, 61, 108, 3, 52, 190, 17, 143, 104, 62, 51, 239, 144, 189, 224, 133, 38, 62, 6, 148, 140, 190, 119, 117, 102, 62, 21, 24, 106, 62, 121, 160, 47, 62, 62, 161, 176, 58, 215, 140, 12, 190, 75, 233, 157, 62, 113, 54, 240, 61, 30, 244, 183, 62, 87, 16, 138, 61, 228, 89, 170, 190, 214, 94, 109, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 35, 177, 190, 223, 149, 195, 189, 201, 154, 27, 63, 100, 253, 12, 62, 77, 163, 221, 61, 28, 190, 216, 190, 152, 165, 93, 191, 180, 141, 248, 189, 67, 19, 179, 191, 226, 186, 152, 187, 10, 206, 218, 60, 72, 60, 75, 191, 245, 110, 102, 191, 96, 236, 50, 190, 158, 9, 226, 189, 146, 43, 146, 191, 250, 178, 39, 191, 34, 88, 25, 63, 249, 39, 207, 190, 101, 20, 199, 189, 29, 253, 38, 63, 114, 254, 136, 61, 253, 191, 142, 62, 222, 172, 150, 60, 128, 37, 79, 62, 150, 13, 24, 189, 169, 214, 110, 63, 143, 100, 51, 59, 187, 72, 232, 62, 162, 251, 130, 191, 110, 52, 147, 190, 147, 78, 22, 191, 221, 188, 85, 190, 210, 23, 17, 188, 26, 135, 191, 61, 142, 150, 0, 190, 166, 245, 31, 191, 97, 21, 75, 61, 178, 19, 88, 189, 166, 49, 15, 190, 228, 139, 130, 62, 45, 2, 189, 189, 73, 47, 5, 190, 82, 227, 56, 187, 253, 107, 160, 60, 11, 229, 64, 61, 95, 69, 188, 190, 168, 187, 58, 62, 169, 164, 141, 58, 61, 215, 6, 189, 94, 177, 56, 61, 211, 231, 118, 190, 164, 252, 152, 61, 35, 166, 135, 190, 142, 129, 32, 189, 171, 219, 212, 189, 117, 6, 94, 190, 17, 234, 46, 61, 235, 53, 22, 190, 241, 74, 103, 190, 78, 205, 197, 60, 28, 27, 218, 189, 234, 132, 179, 186, 36, 166, 147, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 166, 126, 62, 137, 206, 138, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {158, 63, 221, 191, 66, 8, 228, 191, 188, 97, 148, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {111, 173, 217, 192, 18, 237, 114, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0087/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}