// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 166, 13, 63, 186, 44, 139, 190, 44, 15, 129, 190, 182, 210, 50, 190, 85, 163, 164, 190, 174, 117, 216, 62, 8, 226, 216, 190, 90, 64, 158, 62, 224, 250, 211, 61, 227, 229, 206, 190, 232, 228, 191, 63, 231, 189, 158, 62, 27, 119, 52, 63, 238, 144, 132, 63, 250, 70, 234, 62, 255, 92, 56, 63, 17, 106, 121, 63, 154, 165, 132, 62, 126, 46, 43, 62, 10, 63, 52, 191, 177, 206, 78, 62, 242, 200, 42, 63, 199, 10, 140, 191, 17, 124, 204, 190, 205, 162, 55, 63, 226, 114, 43, 63, 216, 196, 226, 62, 223, 156, 62, 63, 26, 134, 42, 191, 152, 228, 38, 190, 116, 179, 131, 61, 252, 117, 32, 62, 9, 178, 148, 190, 97, 178, 220, 62, 45, 81, 178, 62, 81, 93, 230, 62, 67, 13, 101, 190, 215, 164, 128, 191, 78, 91, 236, 190, 169, 197, 208, 190, 166, 74, 11, 62, 78, 53, 187, 61, 59, 53, 132, 63, 130, 99, 115, 191, 145, 120, 41, 190, 62, 155, 135, 62, 13, 223, 40, 191, 27, 14, 247, 190, 155, 78, 182, 62, 159, 14, 121, 63, 88, 156, 245, 62, 195, 60, 13, 190, 209, 222, 195, 190, 139, 44, 76, 63, 241, 246, 230, 62, 180, 82, 122, 61, 210, 70, 248, 62, 142, 101, 168, 62, 255, 254, 166, 190, 52, 217, 51, 63, 88, 191, 93, 191, 173, 123, 15, 191, 242, 7, 238, 60, 227, 235, 12, 63, 199, 37, 59, 63, 158, 223, 183, 62, 244, 129, 136, 191, 123, 51, 15, 189, 195, 25, 26, 62, 27, 93, 175, 189, 55, 253, 139, 191, 78, 90, 255, 187, 66, 78, 22, 191, 173, 91, 38, 62, 76, 158, 0, 190, 201, 58, 11, 191, 121, 107, 101, 63, 186, 170, 252, 62, 198, 120, 121, 190, 39, 242, 153, 63, 155, 73, 233, 62, 139, 122, 61, 62, 146, 97, 62, 191, 176, 158, 223, 62, 254, 243, 200, 190, 208, 151, 53, 63, 38, 223, 11, 191, 56, 94, 111, 63, 21, 198, 18, 63, 106, 150, 80, 62, 140, 157, 182, 190, 104, 55, 115, 190, 135, 217, 62, 188, 119, 223, 37, 61, 226, 171, 156, 190, 229, 61, 229, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 226, 58, 191, 216, 92, 200, 62, 186, 157, 33, 63, 168, 18, 160, 190, 3, 172, 229, 190, 138, 136, 160, 62, 165, 234, 196, 188, 102, 33, 131, 189, 191, 47, 77, 191, 77, 255, 196, 61, 31, 160, 195, 62, 103, 20, 55, 190, 98, 92, 123, 62, 23, 17, 35, 63, 245, 20, 190, 62, 23, 64, 3, 190, 23, 251, 173, 62, 255, 79, 0, 191, 18, 48, 141, 190, 147, 254, 50, 60, 184, 107, 40, 63, 6, 113, 178, 190, 183, 56, 46, 63, 117, 141, 47, 63, 14, 239, 218, 190, 18, 113, 219, 190, 156, 36, 59, 190, 0, 206, 64, 191, 230, 6, 190, 62, 87, 66, 94, 190, 24, 80, 27, 191, 94, 149, 173, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 207, 223, 189, 84, 22, 27, 190, 87, 187, 158, 61, 15, 149, 242, 190, 205, 32, 126, 62, 172, 162, 157, 62, 180, 226, 56, 189, 52, 79, 130, 61, 115, 72, 68, 61, 88, 206, 217, 188, 113, 50, 43, 61, 118, 174, 85, 62, 58, 193, 81, 189, 94, 138, 143, 62, 139, 54, 19, 190, 239, 155, 69, 59, 23, 199, 62, 62, 117, 85, 99, 190, 113, 127, 247, 61, 27, 204, 4, 190, 110, 16, 95, 62, 252, 141, 17, 62, 187, 104, 34, 60, 155, 64, 10, 61, 111, 171, 55, 190, 177, 100, 23, 191, 4, 63, 131, 190, 213, 124, 101, 190, 86, 56, 78, 61, 7, 76, 202, 62, 63, 189, 102, 61, 112, 61, 215, 61, 156, 202, 248, 189, 112, 160, 29, 62, 102, 189, 252, 60, 35, 89, 176, 189, 152, 20, 242, 61, 251, 70, 59, 188, 91, 218, 210, 61, 4, 212, 26, 190, 235, 249, 15, 62, 73, 5, 173, 61, 93, 21, 69, 190, 75, 130, 64, 189, 62, 109, 245, 189, 79, 81, 4, 190, 158, 116, 55, 190, 228, 61, 37, 62, 96, 165, 66, 62, 208, 222, 127, 189, 179, 113, 9, 62, 66, 7, 32, 62, 15, 95, 26, 190, 54, 74, 105, 62, 221, 192, 120, 60, 245, 15, 185, 61, 6, 48, 191, 189, 45, 53, 148, 62, 182, 234, 240, 189, 182, 91, 80, 62, 57, 146, 68, 60, 233, 39, 239, 62, 112, 186, 210, 61, 217, 171, 108, 62, 213, 109, 89, 62, 170, 239, 155, 62, 238, 215, 210, 61, 244, 102, 31, 63, 19, 118, 8, 191, 12, 10, 159, 189, 15, 182, 129, 62, 54, 85, 148, 62, 60, 183, 156, 190, 235, 222, 196, 62, 100, 166, 202, 189, 91, 186, 210, 190, 22, 10, 158, 190, 125, 7, 172, 189, 222, 236, 188, 62, 155, 240, 37, 61, 126, 8, 180, 59, 137, 21, 17, 62, 45, 190, 224, 190, 86, 239, 63, 62, 177, 222, 232, 62, 138, 243, 205, 190, 201, 121, 67, 62, 145, 32, 16, 62, 187, 83, 64, 62, 187, 176, 186, 62, 81, 30, 219, 61, 48, 231, 156, 190, 196, 90, 80, 190, 218, 110, 175, 190, 208, 194, 52, 190, 157, 205, 247, 60, 157, 37, 176, 60, 209, 46, 109, 61, 34, 232, 218, 189, 200, 36, 129, 189, 15, 8, 5, 62, 172, 160, 181, 189, 137, 23, 61, 61, 148, 226, 29, 190, 63, 1, 41, 62, 139, 249, 180, 189, 41, 247, 205, 61, 107, 8, 152, 189, 138, 149, 209, 60, 106, 207, 141, 61, 70, 82, 1, 190, 149, 168, 47, 62, 251, 137, 4, 190, 246, 155, 36, 61, 95, 224, 24, 62, 243, 50, 199, 59, 166, 82, 197, 187, 15, 27, 189, 189, 199, 15, 34, 190, 210, 3, 25, 190, 138, 29, 33, 190, 34, 9, 51, 190, 113, 75, 21, 190, 146, 8, 188, 61, 20, 123, 31, 190, 100, 255, 12, 62, 199, 49, 30, 190, 165, 251, 23, 61, 114, 5, 50, 62, 89, 127, 171, 190, 2, 128, 227, 190, 238, 201, 4, 191, 80, 30, 117, 190, 228, 221, 30, 62, 47, 70, 146, 190, 69, 83, 178, 189, 214, 174, 40, 191, 197, 181, 78, 62, 107, 150, 223, 61, 183, 108, 170, 190, 94, 39, 165, 61, 217, 241, 71, 189, 137, 21, 174, 62, 181, 79, 249, 188, 243, 205, 243, 60, 101, 242, 154, 190, 42, 101, 94, 190, 80, 19, 251, 190, 100, 150, 104, 189, 161, 39, 206, 189, 133, 79, 50, 191, 182, 205, 198, 189, 150, 19, 162, 190, 210, 136, 162, 190, 41, 56, 236, 190, 100, 230, 129, 61, 226, 150, 174, 61, 224, 12, 146, 62, 167, 220, 13, 62, 103, 179, 21, 62, 253, 134, 68, 62, 52, 181, 122, 62, 84, 89, 218, 190, 176, 228, 162, 191, 20, 212, 215, 189, 171, 38, 22, 62, 217, 50, 213, 61, 225, 98, 252, 189, 64, 140, 145, 59, 161, 116, 228, 59, 45, 37, 149, 188, 46, 154, 86, 61, 57, 60, 228, 61, 130, 215, 244, 190, 140, 207, 171, 62, 49, 65, 163, 189, 165, 19, 110, 189, 62, 178, 150, 189, 35, 96, 217, 61, 245, 167, 94, 62, 25, 223, 33, 191, 206, 38, 204, 61, 117, 150, 22, 191, 2, 26, 72, 188, 43, 20, 58, 190, 255, 213, 18, 190, 255, 240, 88, 190, 4, 230, 142, 190, 24, 112, 145, 190, 242, 189, 179, 62, 124, 17, 17, 62, 32, 193, 13, 60, 84, 200, 64, 190, 174, 237, 8, 62, 15, 233, 65, 62, 23, 49, 116, 191, 241, 159, 175, 190, 143, 166, 101, 61, 7, 88, 59, 190, 43, 195, 16, 61, 251, 30, 0, 191, 102, 50, 243, 189, 16, 209, 57, 62, 233, 254, 176, 190, 41, 23, 161, 61, 85, 31, 103, 58, 73, 34, 33, 190, 128, 227, 206, 189, 199, 243, 94, 191, 206, 194, 128, 62, 231, 193, 211, 190, 198, 109, 61, 62, 8, 172, 151, 62, 88, 166, 221, 190, 186, 220, 136, 188, 254, 53, 166, 62, 51, 186, 58, 190, 191, 99, 73, 191, 120, 153, 162, 191, 88, 181, 198, 62, 36, 47, 248, 188, 38, 156, 101, 62, 43, 229, 178, 189, 108, 16, 66, 61, 30, 63, 43, 62, 207, 123, 133, 189, 255, 201, 5, 190, 144, 232, 237, 60, 26, 74, 31, 190, 78, 239, 195, 61, 196, 71, 92, 188, 52, 178, 63, 189, 235, 224, 153, 61, 187, 168, 166, 189, 214, 50, 26, 190, 163, 151, 14, 190, 126, 152, 18, 62, 248, 131, 32, 62, 70, 50, 0, 190, 184, 211, 208, 189, 176, 252, 152, 189, 129, 150, 219, 188, 14, 206, 178, 189, 214, 18, 253, 189, 101, 119, 177, 189, 90, 233, 202, 189, 244, 132, 12, 61, 115, 209, 103, 189, 224, 240, 29, 190, 173, 247, 53, 189, 86, 245, 46, 61, 144, 47, 41, 190, 36, 149, 87, 189, 1, 6, 92, 187, 78, 2, 18, 62, 24, 112, 150, 61, 107, 66, 182, 62, 20, 83, 142, 61, 111, 164, 163, 60, 246, 190, 93, 62, 54, 24, 200, 190, 185, 77, 20, 191, 148, 49, 12, 62, 222, 59, 245, 62, 3, 170, 42, 191, 51, 199, 219, 62, 251, 253, 26, 190, 165, 217, 227, 190, 194, 67, 77, 62, 213, 143, 39, 62, 93, 111, 41, 62, 15, 127, 89, 62, 43, 119, 142, 189, 150, 96, 95, 62, 218, 88, 26, 191, 253, 159, 30, 62, 171, 206, 90, 62, 89, 48, 8, 191, 45, 155, 121, 62, 245, 36, 165, 61, 20, 230, 18, 191, 244, 27, 204, 62, 219, 25, 150, 188, 234, 73, 194, 190, 157, 73, 223, 190, 164, 190, 175, 191, 69, 92, 155, 61, 194, 202, 189, 61, 149, 16, 244, 189, 98, 28, 117, 189, 82, 77, 240, 189, 41, 54, 181, 61, 123, 24, 11, 62, 16, 109, 17, 190, 148, 184, 30, 190, 173, 92, 254, 61, 245, 163, 104, 61, 5, 34, 254, 189, 150, 223, 96, 189, 112, 138, 35, 60, 100, 74, 199, 189, 100, 15, 36, 190, 169, 108, 207, 61, 191, 191, 42, 190, 152, 166, 174, 61, 126, 28, 251, 189, 66, 12, 24, 190, 7, 233, 180, 61, 227, 174, 23, 61, 1, 223, 140, 59, 184, 209, 7, 62, 115, 175, 29, 190, 239, 192, 53, 189, 100, 48, 51, 190, 90, 179, 17, 61, 90, 37, 24, 62, 165, 52, 3, 189, 221, 243, 180, 61, 61, 149, 169, 61, 186, 85, 212, 61, 50, 115, 101, 189, 159, 172, 139, 60, 17, 16, 47, 190, 25, 162, 8, 60, 199, 61, 29, 62, 197, 85, 255, 189, 170, 93, 190, 61, 6, 64, 218, 189, 147, 62, 186, 60, 84, 11, 175, 189, 201, 123, 169, 188, 95, 196, 51, 190, 114, 149, 4, 190, 2, 167, 74, 60, 59, 68, 165, 187, 46, 102, 176, 61, 22, 38, 50, 190, 162, 92, 173, 189, 150, 91, 46, 187, 22, 36, 43, 190, 131, 152, 249, 60, 93, 155, 9, 62, 193, 176, 95, 61, 158, 67, 28, 61, 240, 73, 27, 190, 169, 250, 21, 187, 26, 105, 152, 61, 250, 18, 221, 189, 141, 18, 48, 190, 241, 15, 89, 61, 18, 207, 131, 61, 161, 152, 51, 62, 66, 52, 29, 191, 108, 15, 75, 62, 68, 239, 12, 61, 122, 211, 165, 191, 132, 128, 16, 62, 4, 157, 31, 62, 108, 164, 182, 187, 230, 243, 157, 190, 5, 123, 129, 189, 122, 110, 95, 190, 90, 244, 204, 61, 131, 32, 31, 62, 173, 150, 171, 61, 158, 74, 168, 61, 192, 98, 90, 190, 189, 32, 103, 190, 156, 241, 62, 190, 196, 14, 176, 190, 89, 212, 158, 62, 234, 31, 42, 189, 184, 120, 217, 61, 136, 24, 28, 62, 249, 244, 204, 189, 55, 51, 38, 62, 166, 209, 106, 190, 57, 230, 21, 191, 169, 44, 1, 191, 91, 61, 127, 188, 189, 53, 78, 62, 183, 50, 235, 62, 115, 19, 17, 62, 114, 74, 58, 61, 133, 171, 219, 60, 76, 21, 109, 62, 240, 21, 101, 62, 51, 226, 18, 191, 131, 45, 251, 61, 215, 77, 81, 190, 83, 26, 44, 191, 38, 166, 64, 190, 35, 40, 22, 190, 95, 188, 75, 189, 67, 59, 129, 190, 244, 134, 121, 190, 254, 71, 149, 189, 176, 44, 49, 189, 158, 142, 21, 191, 199, 170, 143, 190, 44, 226, 114, 191, 171, 120, 61, 191, 223, 222, 67, 190, 46, 118, 186, 190, 77, 94, 71, 62, 76, 167, 72, 61, 173, 30, 243, 61, 154, 244, 28, 62, 197, 46, 135, 62, 116, 221, 71, 191, 130, 116, 79, 191, 80, 221, 86, 190, 166, 59, 137, 190, 216, 33, 142, 190, 72, 124, 248, 61, 247, 95, 172, 190, 154, 204, 90, 189, 48, 21, 247, 189, 39, 117, 136, 189, 190, 52, 17, 190, 42, 27, 201, 60, 26, 82, 76, 185, 237, 57, 190, 189, 14, 210, 37, 190, 107, 223, 224, 60, 139, 58, 247, 188, 115, 244, 0, 62, 214, 208, 52, 190, 33, 188, 144, 188, 6, 104, 42, 61, 213, 135, 215, 189, 146, 86, 136, 61, 167, 128, 6, 190, 227, 199, 108, 188, 52, 139, 50, 187, 147, 197, 49, 62, 211, 145, 189, 189, 251, 77, 156, 189, 12, 23, 236, 188, 92, 16, 43, 187, 152, 236, 240, 188, 35, 27, 172, 188, 104, 250, 206, 61, 182, 236, 213, 61, 121, 61, 40, 190, 149, 160, 179, 189, 35, 178, 30, 190, 212, 234, 120, 189, 140, 136, 30, 190, 105, 178, 56, 189, 143, 58, 228, 60, 188, 137, 199, 190, 134, 93, 130, 190, 64, 174, 200, 61, 112, 207, 79, 188, 11, 160, 26, 189, 153, 67, 250, 189, 101, 127, 13, 62, 13, 184, 251, 61, 213, 199, 58, 190, 2, 143, 199, 61, 176, 23, 24, 189, 45, 82, 68, 62, 168, 122, 212, 61, 46, 124, 37, 190, 143, 59, 138, 190, 118, 161, 129, 189, 102, 209, 197, 189, 11, 96, 73, 189, 206, 250, 53, 190, 4, 111, 164, 190, 159, 145, 251, 61, 245, 28, 157, 190, 219, 21, 175, 189, 211, 105, 75, 190, 140, 69, 73, 190, 238, 44, 202, 188, 5, 244, 4, 62, 241, 147, 50, 62, 202, 84, 244, 189, 47, 37, 46, 191, 254, 92, 86, 61, 240, 24, 230, 61, 247, 192, 73, 191, 122, 123, 60, 61, 108, 32, 215, 62, 63, 219, 241, 190, 62, 130, 109, 190, 30, 173, 42, 62, 114, 242, 117, 189, 71, 153, 86, 62, 253, 127, 3, 189, 251, 50, 87, 62, 153, 101, 4, 62, 195, 151, 94, 190, 54, 117, 85, 190, 242, 81, 253, 190, 82, 107, 18, 191, 198, 180, 144, 61, 231, 219, 41, 191, 66, 48, 145, 62, 143, 186, 243, 60, 218, 189, 133, 61, 34, 56, 86, 62, 133, 73, 155, 61, 204, 64, 193, 191, 208, 114, 125, 191, 159, 161, 168, 187, 125, 95, 198, 61, 223, 37, 121, 62, 103, 146, 131, 61, 114, 50, 115, 189, 251, 89, 128, 61, 241, 0, 179, 189, 92, 95, 81, 190, 112, 143, 139, 190, 107, 254, 141, 61, 129, 39, 23, 62, 153, 160, 189, 61, 54, 77, 129, 190, 151, 100, 141, 62, 189, 15, 146, 190, 216, 75, 238, 61, 45, 239, 22, 62, 34, 252, 11, 190, 142, 229, 186, 190, 170, 27, 86, 190, 181, 27, 156, 61, 233, 59, 0, 188, 101, 31, 3, 62, 60, 193, 70, 188, 20, 124, 200, 61, 193, 223, 211, 190, 74, 147, 38, 62, 38, 253, 172, 189, 6, 97, 199, 189, 102, 55, 203, 190, 106, 158, 191, 61, 64, 54, 128, 61, 193, 209, 47, 62, 174, 211, 174, 61, 157, 29, 78, 63, 37, 131, 32, 62, 68, 241, 87, 62, 236, 102, 208, 61, 73, 19, 177, 61, 54, 126, 102, 187, 220, 1, 8, 188, 16, 137, 75, 191, 222, 175, 55, 190, 43, 145, 213, 62, 101, 118, 76, 62, 121, 158, 253, 190, 129, 60, 17, 62, 94, 167, 234, 61, 226, 204, 71, 190, 88, 195, 183, 188, 102, 137, 228, 189, 26, 244, 7, 63, 5, 247, 233, 61, 48, 231, 179, 189, 176, 175, 255, 60, 53, 164, 147, 190, 76, 13, 159, 62, 195, 128, 166, 62, 164, 177, 158, 190, 209, 134, 183, 60, 139, 212, 134, 62, 100, 250, 133, 62, 143, 229, 8, 60, 210, 54, 6, 189, 151, 40, 237, 189, 165, 228, 182, 189, 49, 87, 214, 190, 82, 57, 155, 189, 58, 195, 9, 62, 170, 181, 33, 190, 66, 213, 66, 188, 14, 186, 12, 190, 188, 228, 174, 61, 235, 194, 17, 189, 253, 239, 170, 190, 176, 9, 134, 62, 182, 199, 43, 189, 231, 116, 135, 189, 73, 154, 224, 61, 107, 79, 35, 190, 155, 67, 160, 60, 9, 113, 45, 62, 143, 157, 77, 61, 45, 44, 153, 62, 251, 36, 90, 189, 67, 59, 33, 60, 144, 91, 151, 62, 112, 251, 150, 61, 113, 196, 136, 62, 161, 63, 99, 62, 243, 45, 22, 190, 183, 93, 142, 59, 27, 43, 142, 62, 35, 90, 141, 190, 146, 19, 69, 61, 58, 145, 139, 188, 183, 196, 241, 60, 122, 24, 3, 191, 235, 169, 49, 190, 10, 205, 206, 60, 90, 46, 223, 189, 161, 197, 86, 62, 157, 48, 86, 62, 230, 242, 164, 61, 137, 234, 85, 61, 53, 67, 189, 188, 116, 221, 47, 61, 113, 146, 226, 61, 170, 243, 15, 190, 55, 154, 19, 62, 14, 8, 77, 190, 136, 92, 161, 190, 38, 243, 150, 61, 204, 186, 84, 190, 61, 71, 177, 189, 132, 77, 157, 62, 173, 203, 32, 191, 38, 101, 47, 62, 187, 72, 98, 62, 62, 203, 239, 189, 68, 63, 87, 62, 181, 30, 31, 189, 17, 89, 131, 189, 136, 239, 61, 61, 19, 15, 41, 62, 25, 133, 173, 190, 84, 34, 228, 189, 138, 1, 244, 189, 152, 202, 11, 189, 241, 210, 136, 190, 230, 201, 64, 61, 180, 184, 179, 61, 0, 162, 34, 191, 84, 135, 167, 62, 246, 65, 67, 190, 202, 42, 37, 191, 165, 86, 192, 60, 39, 20, 67, 187, 74, 15, 132, 61, 151, 74, 107, 190, 170, 72, 175, 62, 60, 60, 107, 190, 220, 75, 143, 62, 223, 25, 42, 62, 214, 115, 182, 188, 101, 235, 8, 62, 43, 106, 207, 190, 160, 80, 188, 62, 10, 83, 45, 62, 78, 48, 94, 189, 43, 227, 194, 189, 20, 51, 155, 189, 48, 242, 28, 190, 208, 122, 21, 191, 69, 146, 100, 60, 159, 166, 140, 191, 126, 9, 128, 188, 196, 33, 88, 189, 103, 7, 86, 61, 244, 42, 28, 59, 199, 149, 140, 60, 126, 94, 129, 189, 152, 98, 58, 190, 76, 202, 6, 189, 190, 197, 23, 62, 141, 237, 3, 62, 144, 177, 97, 62, 13, 71, 85, 189, 125, 118, 66, 62, 122, 41, 83, 190, 127, 209, 133, 189, 213, 243, 205, 61, 121, 252, 186, 61, 109, 225, 113, 190, 35, 86, 93, 62, 179, 244, 150, 62, 61, 28, 18, 61, 180, 244, 117, 189, 43, 58, 75, 62, 19, 83, 189, 62, 46, 202, 184, 189, 80, 155, 146, 61, 179, 30, 1, 61, 60, 138, 10, 189, 249, 248, 40, 62, 63, 164, 254, 61, 51, 72, 144, 190, 97, 98, 170, 188, 105, 25, 146, 62, 227, 229, 183, 61, 20, 119, 17, 62, 185, 241, 97, 189, 31, 115, 217, 188, 250, 125, 81, 62, 123, 130, 83, 62, 56, 168, 48, 61, 54, 51, 16, 62, 194, 1, 65, 188, 137, 166, 190, 61, 114, 33, 46, 62, 124, 99, 151, 62, 121, 137, 223, 61, 73, 151, 234, 189, 220, 11, 156, 190, 129, 211, 7, 190, 220, 24, 88, 61, 16, 162, 213, 61, 30, 187, 64, 190, 189, 98, 248, 188, 130, 151, 89, 190, 163, 4, 132, 62, 103, 136, 70, 189, 173, 57, 124, 190, 216, 129, 145, 188, 94, 66, 150, 189, 86, 193, 47, 190, 212, 187, 174, 61, 77, 135, 120, 61, 178, 70, 144, 61, 11, 123, 182, 61, 46, 170, 159, 190, 132, 200, 38, 63, 92, 42, 227, 61, 102, 32, 63, 62, 179, 24, 35, 190, 246, 174, 179, 190, 128, 94, 198, 187, 51, 241, 9, 61, 183, 237, 43, 190, 222, 224, 55, 62, 131, 120, 125, 189, 12, 16, 95, 62, 73, 119, 158, 62, 154, 56, 183, 187, 220, 58, 157, 189, 83, 138, 238, 187, 207, 182, 84, 62, 89, 104, 83, 189, 63, 157, 88, 61, 46, 240, 230, 60, 198, 196, 174, 189, 187, 126, 148, 189, 103, 210, 141, 61, 124, 129, 56, 60, 232, 7, 197, 61, 178, 207, 153, 61, 174, 231, 149, 61, 209, 244, 72, 190, 103, 6, 243, 61, 251, 19, 21, 62, 107, 227, 193, 61, 157, 91, 131, 61, 82, 176, 101, 189, 76, 111, 141, 62, 251, 63, 85, 60, 173, 23, 16, 189, 213, 156, 150, 190, 44, 198, 119, 61, 249, 82, 178, 61, 118, 117, 36, 62, 169, 44, 236, 61, 74, 191, 221, 60, 88, 159, 140, 61, 227, 191, 157, 188, 125, 248, 116, 61, 240, 194, 106, 190, 198, 90, 217, 189, 167, 97, 155, 62, 59, 88, 162, 61, 75, 150, 122, 190, 226, 222, 51, 62, 106, 213, 18, 190, 89, 76, 52, 190, 212, 205, 128, 190, 163, 48, 34, 190, 87, 44, 90, 62, 176, 174, 11, 62, 28, 93, 128, 62, 22, 142, 135, 61, 168, 5, 196, 189, 126, 224, 148, 62, 215, 29, 43, 61, 247, 217, 125, 190, 89, 221, 4, 190, 43, 227, 84, 62, 142, 107, 168, 189, 187, 36, 55, 62, 195, 203, 43, 61, 185, 166, 150, 190, 83, 196, 160, 189, 90, 8, 255, 61, 252, 134, 185, 61, 28, 53, 4, 190, 52, 121, 151, 61, 185, 223, 166, 188, 147, 188, 255, 189, 69, 42, 169, 188, 18, 108, 254, 61, 18, 248, 35, 190, 216, 242, 45, 60, 17, 16, 215, 189, 148, 116, 136, 60, 21, 176, 107, 189, 219, 48, 251, 189, 153, 44, 37, 62, 196, 6, 235, 188, 61, 97, 110, 61, 106, 147, 20, 190, 1, 83, 5, 190, 218, 114, 246, 189, 158, 5, 42, 190, 162, 22, 69, 60, 195, 229, 100, 189, 114, 170, 38, 62, 219, 87, 108, 61, 184, 142, 136, 188, 89, 163, 27, 190, 107, 179, 159, 189, 134, 23, 250, 60, 31, 55, 187, 61, 47, 0, 28, 190, 219, 104, 159, 188, 1, 158, 93, 188, 201, 189, 132, 187, 93, 42, 27, 62, 53, 221, 231, 190, 248, 226, 104, 62, 115, 140, 222, 189, 122, 214, 70, 61, 29, 190, 253, 190, 142, 65, 239, 189, 143, 146, 55, 62, 173, 157, 173, 61, 21, 68, 254, 190, 170, 229, 222, 62, 245, 170, 28, 62, 165, 125, 130, 190, 1, 31, 211, 190, 212, 115, 31, 62, 51, 239, 190, 62, 177, 141, 38, 190, 22, 252, 72, 61, 112, 116, 177, 188, 191, 90, 103, 190, 214, 152, 166, 61, 116, 251, 115, 62, 102, 95, 13, 191, 117, 254, 78, 62, 65, 15, 196, 62, 243, 9, 190, 62, 194, 208, 126, 61, 126, 228, 129, 58, 240, 199, 133, 188, 24, 248, 225, 190, 79, 46, 28, 191, 70, 253, 16, 187, 70, 251, 157, 61, 20, 104, 9, 190, 151, 144, 29, 62, 132, 88, 79, 62, 102, 204, 161, 189, 180, 56, 152, 189, 244, 78, 149, 189, 102, 4, 225, 58, 88, 115, 251, 189, 61, 89, 164, 189, 63, 158, 205, 61, 202, 176, 156, 62, 101, 184, 27, 189, 129, 30, 7, 190, 68, 83, 134, 62, 102, 47, 215, 61, 32, 67, 234, 189, 232, 173, 28, 62, 228, 251, 174, 61, 129, 231, 194, 61, 216, 51, 13, 190, 42, 32, 82, 62, 125, 180, 29, 190, 121, 253, 125, 60, 42, 81, 92, 62, 206, 207, 243, 188, 161, 187, 196, 61, 35, 117, 190, 189, 154, 146, 156, 189, 17, 190, 89, 62, 253, 227, 133, 62, 152, 152, 229, 189, 32, 205, 221, 188, 241, 25, 90, 191, 169, 78, 168, 60, 148, 166, 214, 62, 55, 37, 70, 62, 37, 131, 199, 60, 1, 5, 30, 62, 220, 229, 100, 190, 255, 166, 65, 191, 165, 252, 186, 189, 193, 252, 45, 191, 244, 10, 109, 61, 227, 185, 89, 61, 130, 42, 66, 62, 64, 175, 64, 62, 57, 102, 79, 190, 241, 123, 98, 190, 201, 126, 64, 62, 229, 131, 198, 189, 230, 13, 115, 190, 110, 32, 117, 189, 164, 6, 118, 61, 88, 221, 118, 60, 23, 164, 130, 62, 204, 223, 58, 190, 178, 78, 6, 63, 187, 183, 228, 61, 252, 103, 19, 62, 101, 177, 253, 189, 26, 12, 213, 189, 224, 227, 168, 62, 70, 250, 191, 61, 183, 5, 42, 62, 242, 136, 57, 191, 212, 218, 6, 191, 105, 221, 174, 62, 253, 228, 226, 61, 141, 50, 177, 60, 133, 56, 233, 62, 244, 93, 163, 190, 159, 0, 208, 190, 122, 63, 226, 190, 72, 22, 95, 190, 250, 127, 146, 62, 114, 132, 153, 190, 64, 99, 232, 189, 3, 206, 3, 62, 234, 49, 33, 190, 116, 209, 2, 190, 200, 27, 29, 60, 21, 186, 154, 190, 227, 183, 192, 190, 24, 165, 116, 190, 33, 200, 18, 188, 207, 254, 78, 190, 46, 182, 191, 61, 97, 231, 44, 191, 63, 231, 76, 190, 90, 171, 129, 190, 84, 129, 66, 190, 184, 236, 229, 189, 215, 175, 87, 62, 114, 147, 3, 63, 41, 124, 23, 62, 18, 186, 67, 188, 133, 93, 193, 188, 116, 185, 84, 189, 217, 79, 218, 61, 197, 46, 171, 61, 162, 51, 47, 62, 108, 244, 88, 61, 199, 222, 229, 61, 143, 17, 180, 190, 255, 201, 34, 62, 230, 197, 184, 190, 129, 147, 32, 190, 40, 106, 89, 61, 215, 90, 41, 191, 14, 207, 235, 61, 82, 133, 31, 190, 210, 199, 198, 190, 216, 93, 128, 61, 228, 233, 197, 60, 231, 251, 66, 61, 169, 155, 244, 61, 131, 247, 94, 190, 40, 79, 180, 61, 115, 67, 237, 61, 222, 48, 58, 190, 181, 69, 36, 188, 5, 244, 85, 62, 68, 112, 87, 189, 143, 93, 4, 62, 155, 38, 104, 62, 16, 47, 118, 60, 171, 28, 51, 61, 36, 199, 162, 190, 54, 97, 57, 191, 210, 149, 1, 188, 144, 151, 218, 61, 31, 56, 148, 60, 45, 113, 195, 62, 209, 213, 212, 62, 130, 175, 153, 190, 72, 34, 129, 190, 250, 78, 224, 61, 55, 24, 51, 190, 18, 54, 199, 61, 199, 249, 215, 62, 245, 186, 182, 61, 69, 0, 60, 62, 126, 179, 137, 190, 66, 21, 15, 188, 199, 206, 222, 61, 175, 151, 31, 191, 25, 21, 17, 62, 182, 253, 72, 190, 174, 102, 81, 62, 217, 160, 36, 62, 104, 157, 230, 189, 113, 223, 80, 62, 14, 66, 94, 190, 245, 242, 94, 191, 39, 113, 54, 190, 99, 252, 58, 190, 67, 142, 145, 62, 150, 31, 247, 62, 88, 209, 37, 190, 165, 238, 124, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 77, 191, 62, 106, 148, 20, 61, 20, 98, 69, 62, 107, 169, 45, 190, 65, 73, 75, 61, 114, 88, 170, 60, 80, 211, 221, 61, 224, 116, 50, 190, 224, 114, 133, 60, 218, 163, 192, 189, 218, 89, 4, 190, 255, 161, 132, 62, 208, 48, 199, 61, 62, 59, 36, 190, 52, 19, 63, 62, 188, 65, 64, 61, 198, 145, 40, 190, 37, 110, 85, 62, 215, 168, 233, 189, 68, 66, 78, 62, 232, 136, 105, 190, 237, 222, 71, 62, 124, 18, 156, 61, 180, 41, 58, 62, 101, 218, 137, 61, 215, 140, 12, 190, 227, 45, 136, 62, 155, 164, 192, 61, 160, 210, 101, 62, 29, 76, 147, 61, 241, 94, 55, 190, 117, 29, 88, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 68, 182, 190, 10, 142, 72, 190, 202, 159, 42, 63, 226, 49, 192, 61, 183, 197, 57, 62, 196, 51, 232, 190, 18, 211, 42, 191, 180, 141, 248, 189, 164, 153, 161, 191, 226, 186, 152, 187, 10, 206, 218, 60, 84, 84, 48, 191, 26, 31, 97, 191, 96, 236, 50, 190, 66, 153, 82, 189, 55, 3, 119, 191, 77, 54, 110, 190, 167, 61, 14, 63, 222, 8, 204, 190, 18, 253, 29, 190, 219, 81, 24, 63, 21, 58, 217, 61, 207, 45, 57, 62, 53, 46, 196, 61, 188, 99, 95, 62, 150, 13, 24, 189, 233, 103, 96, 63, 226, 7, 218, 60, 208, 79, 146, 62, 246, 97, 39, 191, 150, 99, 86, 190, 75, 215, 33, 191, 28, 249, 33, 190, 57, 250, 166, 61, 17, 109, 88, 61, 179, 107, 37, 190, 203, 91, 216, 190, 45, 157, 211, 61, 244, 59, 10, 190, 166, 49, 15, 190, 121, 200, 92, 62, 45, 2, 189, 189, 73, 47, 5, 190, 130, 75, 2, 62, 195, 126, 144, 61, 11, 229, 64, 61, 108, 127, 111, 190, 88, 169, 48, 62, 95, 213, 46, 61, 107, 20, 107, 188, 245, 103, 250, 61, 245, 231, 80, 190, 198, 120, 92, 62, 3, 65, 61, 190, 110, 221, 29, 189, 182, 109, 150, 189, 241, 172, 227, 189, 17, 234, 46, 61, 177, 208, 80, 189, 216, 206, 45, 190, 55, 111, 242, 60, 4, 172, 142, 61, 23, 178, 22, 61, 226, 30, 167, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 119, 116, 62, 186, 50, 22, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {220, 151, 114, 191, 99, 52, 59, 191, 60, 23, 26, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {142, 73, 33, 192, 102, 22, 184, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0087/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}