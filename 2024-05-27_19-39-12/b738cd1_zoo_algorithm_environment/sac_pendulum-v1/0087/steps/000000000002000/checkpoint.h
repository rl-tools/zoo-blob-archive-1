// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 26, 227, 61, 207, 0, 67, 189, 180, 134, 124, 190, 240, 4, 182, 189, 133, 245, 228, 190, 32, 147, 168, 62, 13, 76, 143, 190, 36, 20, 15, 63, 254, 19, 217, 61, 27, 131, 30, 191, 110, 163, 71, 62, 249, 197, 255, 61, 175, 126, 225, 62, 224, 133, 215, 62, 190, 163, 2, 63, 70, 50, 150, 62, 55, 173, 45, 63, 2, 98, 200, 62, 231, 225, 38, 189, 167, 1, 105, 191, 132, 103, 23, 62, 63, 119, 247, 62, 206, 74, 34, 191, 83, 139, 234, 190, 215, 86, 10, 190, 242, 10, 184, 62, 165, 4, 0, 63, 44, 59, 172, 62, 9, 39, 242, 190, 211, 248, 149, 190, 95, 0, 248, 60, 243, 30, 115, 62, 247, 175, 129, 190, 110, 218, 100, 62, 198, 173, 44, 62, 192, 68, 217, 62, 11, 91, 112, 190, 212, 33, 54, 190, 57, 204, 248, 190, 136, 213, 168, 190, 126, 22, 168, 62, 194, 231, 252, 61, 77, 63, 23, 63, 9, 180, 81, 191, 0, 197, 43, 190, 205, 78, 210, 61, 20, 57, 194, 190, 243, 47, 2, 191, 239, 210, 67, 62, 244, 201, 244, 189, 56, 166, 10, 63, 108, 161, 133, 190, 220, 251, 129, 191, 155, 177, 215, 62, 236, 56, 114, 62, 148, 198, 5, 62, 169, 235, 235, 62, 43, 136, 163, 61, 92, 65, 117, 191, 34, 20, 198, 62, 147, 192, 49, 191, 207, 20, 113, 190, 33, 103, 146, 59, 229, 222, 173, 61, 72, 167, 201, 62, 47, 98, 205, 62, 207, 192, 24, 191, 226, 81, 168, 62, 166, 122, 146, 62, 1, 19, 155, 189, 11, 194, 99, 191, 23, 209, 161, 61, 218, 109, 10, 191, 191, 80, 157, 62, 175, 253, 248, 60, 231, 39, 246, 190, 241, 40, 32, 191, 218, 117, 146, 62, 164, 105, 249, 190, 81, 76, 63, 61, 194, 166, 228, 62, 237, 117, 119, 62, 58, 198, 9, 191, 158, 21, 222, 62, 196, 153, 54, 190, 7, 67, 65, 63, 152, 180, 4, 191, 152, 102, 15, 63, 137, 148, 45, 63, 109, 144, 202, 188, 234, 17, 187, 190, 29, 40, 119, 190, 198, 136, 184, 188, 119, 44, 33, 62, 184, 26, 23, 190, 100, 108, 245, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 101, 14, 191, 248, 209, 251, 62, 92, 199, 6, 63, 74, 47, 216, 190, 108, 254, 193, 190, 228, 238, 206, 62, 29, 90, 17, 62, 18, 153, 47, 61, 236, 104, 224, 190, 253, 77, 134, 62, 144, 233, 248, 62, 140, 119, 45, 190, 218, 223, 249, 62, 242, 126, 12, 63, 168, 87, 30, 63, 88, 15, 38, 189, 181, 63, 0, 63, 51, 107, 106, 186, 238, 129, 68, 190, 132, 205, 182, 62, 255, 242, 13, 63, 112, 199, 92, 190, 19, 211, 249, 62, 108, 103, 4, 63, 240, 214, 140, 190, 8, 1, 137, 190, 192, 207, 34, 189, 20, 34, 3, 191, 198, 209, 3, 63, 92, 33, 149, 190, 12, 207, 24, 191, 231, 242, 9, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 40, 125, 187, 33, 245, 60, 190, 14, 2, 211, 60, 250, 29, 44, 190, 36, 120, 104, 62, 248, 82, 100, 62, 169, 116, 143, 190, 200, 218, 236, 61, 34, 135, 38, 62, 145, 224, 254, 60, 182, 214, 107, 61, 231, 253, 61, 62, 137, 48, 218, 189, 25, 194, 113, 62, 181, 67, 80, 190, 73, 101, 88, 60, 51, 45, 56, 62, 11, 177, 190, 189, 103, 171, 231, 61, 110, 150, 52, 190, 234, 75, 30, 62, 89, 81, 17, 62, 12, 136, 155, 60, 175, 32, 98, 190, 249, 162, 188, 188, 165, 28, 136, 190, 179, 238, 164, 189, 193, 151, 132, 189, 204, 245, 19, 61, 89, 174, 146, 62, 69, 141, 104, 61, 249, 127, 193, 61, 5, 232, 220, 189, 246, 91, 4, 62, 249, 170, 59, 61, 115, 239, 143, 189, 148, 38, 240, 61, 222, 69, 165, 61, 143, 82, 167, 189, 86, 107, 44, 190, 48, 87, 135, 61, 217, 22, 4, 62, 21, 8, 197, 189, 164, 95, 140, 188, 15, 9, 238, 189, 245, 204, 217, 189, 140, 241, 28, 190, 212, 204, 232, 61, 62, 20, 60, 62, 25, 151, 20, 190, 221, 162, 28, 62, 238, 85, 190, 61, 251, 178, 71, 190, 16, 78, 107, 62, 44, 54, 67, 189, 208, 180, 95, 61, 176, 61, 176, 60, 60, 168, 59, 62, 61, 141, 30, 190, 69, 31, 14, 62, 91, 153, 129, 60, 92, 108, 252, 62, 109, 97, 212, 61, 248, 136, 8, 62, 164, 22, 71, 62, 167, 193, 141, 62, 169, 159, 77, 189, 101, 120, 206, 61, 233, 178, 142, 190, 108, 147, 68, 188, 71, 81, 201, 62, 247, 225, 16, 62, 253, 93, 10, 188, 195, 63, 4, 62, 148, 52, 230, 189, 95, 204, 147, 190, 13, 79, 39, 190, 12, 171, 121, 190, 59, 234, 187, 61, 0, 223, 235, 60, 232, 184, 111, 189, 68, 124, 17, 62, 193, 240, 152, 190, 195, 113, 68, 62, 85, 15, 160, 62, 129, 176, 58, 190, 153, 195, 244, 188, 237, 216, 208, 61, 52, 118, 217, 61, 200, 83, 128, 62, 109, 28, 142, 189, 58, 83, 21, 190, 165, 3, 165, 189, 221, 101, 163, 61, 116, 42, 53, 190, 108, 30, 36, 61, 157, 37, 176, 60, 209, 46, 109, 61, 34, 232, 218, 189, 200, 36, 129, 189, 15, 8, 5, 62, 172, 160, 181, 189, 137, 23, 61, 61, 148, 226, 29, 190, 63, 1, 41, 62, 139, 249, 180, 189, 41, 247, 205, 61, 107, 8, 152, 189, 138, 149, 209, 60, 106, 207, 141, 61, 70, 82, 1, 190, 149, 168, 47, 62, 251, 137, 4, 190, 246, 155, 36, 61, 95, 224, 24, 62, 243, 50, 199, 59, 166, 82, 197, 187, 15, 27, 189, 189, 199, 15, 34, 190, 210, 3, 25, 190, 138, 29, 33, 190, 34, 9, 51, 190, 113, 75, 21, 190, 146, 8, 188, 61, 20, 123, 31, 190, 100, 255, 12, 62, 199, 49, 30, 190, 165, 251, 23, 61, 184, 71, 49, 62, 35, 126, 126, 189, 217, 138, 106, 190, 159, 219, 15, 190, 222, 54, 201, 189, 13, 194, 233, 60, 244, 82, 115, 62, 12, 129, 164, 189, 90, 24, 35, 190, 9, 183, 28, 62, 84, 199, 230, 57, 203, 2, 250, 189, 239, 29, 215, 61, 127, 6, 152, 61, 71, 173, 162, 62, 128, 153, 193, 188, 93, 151, 6, 62, 18, 21, 250, 189, 233, 7, 108, 61, 188, 115, 250, 189, 192, 153, 20, 62, 100, 252, 151, 61, 193, 112, 91, 189, 218, 171, 90, 61, 45, 247, 132, 190, 79, 8, 85, 190, 96, 118, 97, 190, 139, 87, 249, 61, 168, 112, 39, 61, 22, 58, 106, 62, 109, 71, 13, 62, 130, 227, 49, 62, 33, 251, 159, 189, 104, 155, 10, 62, 105, 64, 64, 189, 80, 108, 25, 61, 166, 13, 250, 189, 210, 153, 62, 62, 178, 84, 43, 190, 239, 39, 17, 190, 113, 102, 177, 61, 139, 209, 26, 61, 79, 197, 56, 62, 205, 230, 96, 60, 147, 172, 16, 62, 157, 117, 244, 189, 167, 179, 15, 60, 20, 167, 184, 189, 16, 225, 10, 190, 217, 146, 25, 190, 79, 10, 114, 61, 206, 192, 39, 61, 139, 253, 137, 190, 182, 203, 203, 61, 21, 75, 15, 187, 94, 85, 72, 190, 76, 236, 22, 189, 178, 154, 244, 188, 28, 149, 4, 189, 131, 224, 149, 190, 147, 41, 25, 190, 175, 182, 194, 62, 139, 135, 17, 62, 237, 215, 203, 188, 91, 86, 71, 189, 183, 74, 208, 60, 32, 153, 128, 62, 116, 78, 181, 60, 46, 137, 238, 60, 90, 153, 207, 61, 94, 47, 141, 190, 186, 79, 175, 61, 240, 70, 94, 190, 77, 48, 213, 58, 46, 224, 84, 62, 172, 23, 107, 59, 62, 132, 112, 188, 227, 98, 152, 60, 5, 80, 195, 187, 90, 187, 196, 189, 203, 193, 0, 190, 92, 21, 57, 190, 225, 110, 1, 190, 60, 180, 138, 189, 68, 186, 173, 61, 193, 12, 216, 189, 236, 252, 104, 60, 94, 33, 141, 189, 198, 249, 254, 189, 135, 85, 159, 190, 14, 57, 39, 190, 79, 138, 254, 61, 195, 67, 78, 58, 169, 76, 191, 62, 163, 236, 177, 189, 169, 237, 77, 61, 30, 63, 43, 62, 207, 123, 133, 189, 255, 201, 5, 190, 144, 232, 237, 60, 26, 74, 31, 190, 78, 239, 195, 61, 196, 71, 92, 188, 52, 178, 63, 189, 235, 224, 153, 61, 187, 168, 166, 189, 214, 50, 26, 190, 163, 151, 14, 190, 126, 152, 18, 62, 248, 131, 32, 62, 70, 50, 0, 190, 184, 211, 208, 189, 176, 252, 152, 189, 129, 150, 219, 188, 14, 206, 178, 189, 214, 18, 253, 189, 101, 119, 177, 189, 90, 233, 202, 189, 244, 132, 12, 61, 115, 209, 103, 189, 224, 240, 29, 190, 173, 247, 53, 189, 86, 245, 46, 61, 144, 47, 41, 190, 36, 149, 87, 189, 1, 6, 92, 187, 78, 2, 18, 62, 24, 112, 150, 61, 217, 11, 55, 59, 131, 157, 121, 188, 58, 63, 32, 186, 173, 128, 219, 61, 247, 91, 236, 61, 61, 155, 183, 189, 85, 244, 55, 62, 164, 255, 244, 61, 85, 52, 241, 189, 244, 161, 17, 62, 211, 156, 168, 189, 241, 114, 247, 188, 161, 239, 129, 60, 23, 239, 187, 61, 70, 3, 57, 61, 169, 51, 162, 189, 48, 222, 125, 189, 134, 52, 48, 62, 89, 115, 251, 189, 152, 181, 10, 62, 205, 7, 161, 189, 179, 101, 20, 189, 241, 172, 241, 61, 49, 221, 236, 189, 220, 71, 81, 190, 65, 179, 37, 62, 64, 212, 223, 189, 213, 190, 3, 188, 171, 197, 77, 190, 19, 208, 204, 189, 69, 92, 155, 61, 51, 11, 220, 189, 149, 16, 244, 189, 129, 5, 115, 189, 244, 24, 239, 189, 240, 212, 181, 61, 188, 108, 12, 62, 224, 169, 15, 190, 148, 184, 30, 190, 173, 92, 254, 61, 56, 104, 107, 61, 25, 1, 254, 189, 30, 137, 96, 189, 234, 26, 50, 60, 100, 74, 199, 189, 97, 136, 35, 190, 227, 69, 208, 61, 191, 191, 42, 190, 82, 97, 178, 61, 101, 250, 250, 189, 217, 92, 23, 190, 10, 211, 182, 61, 227, 174, 23, 61, 63, 40, 172, 59, 184, 209, 7, 62, 42, 174, 29, 190, 239, 192, 53, 189, 21, 2, 51, 190, 6, 180, 20, 61, 90, 37, 24, 62, 165, 52, 3, 189, 180, 38, 183, 61, 61, 149, 169, 61, 186, 85, 212, 61, 50, 115, 101, 189, 159, 172, 139, 60, 17, 16, 47, 190, 25, 162, 8, 60, 199, 61, 29, 62, 197, 85, 255, 189, 170, 93, 190, 61, 6, 64, 218, 189, 147, 62, 186, 60, 84, 11, 175, 189, 201, 123, 169, 188, 95, 196, 51, 190, 114, 149, 4, 190, 2, 167, 74, 60, 59, 68, 165, 187, 46, 102, 176, 61, 22, 38, 50, 190, 162, 92, 173, 189, 150, 91, 46, 187, 22, 36, 43, 190, 131, 152, 249, 60, 93, 155, 9, 62, 193, 176, 95, 61, 158, 67, 28, 61, 240, 73, 27, 190, 169, 250, 21, 187, 26, 105, 152, 61, 250, 18, 221, 189, 141, 18, 48, 190, 241, 15, 89, 61, 18, 207, 131, 61, 161, 152, 51, 62, 192, 37, 176, 190, 14, 43, 203, 61, 96, 104, 245, 61, 193, 0, 68, 190, 51, 161, 255, 59, 187, 228, 123, 61, 245, 96, 143, 190, 211, 6, 12, 190, 250, 22, 208, 189, 137, 190, 187, 188, 122, 68, 38, 62, 237, 162, 91, 61, 174, 73, 119, 60, 37, 191, 227, 61, 246, 35, 65, 190, 246, 154, 49, 190, 119, 125, 1, 190, 154, 82, 108, 190, 197, 65, 83, 62, 119, 195, 253, 189, 227, 189, 144, 60, 132, 29, 145, 61, 109, 119, 37, 189, 132, 19, 255, 189, 121, 136, 5, 190, 242, 159, 32, 190, 79, 131, 128, 60, 151, 46, 229, 61, 174, 245, 102, 62, 34, 65, 110, 62, 125, 11, 18, 62, 190, 33, 107, 61, 82, 219, 150, 61, 121, 56, 77, 190, 222, 83, 177, 62, 159, 24, 38, 61, 208, 90, 20, 189, 55, 233, 13, 190, 84, 124, 247, 190, 106, 145, 50, 61, 38, 64, 12, 190, 30, 194, 209, 61, 162, 171, 137, 188, 101, 14, 134, 190, 77, 224, 16, 62, 21, 33, 118, 61, 189, 22, 103, 190, 47, 153, 9, 188, 84, 129, 105, 190, 33, 195, 47, 191, 46, 45, 46, 190, 100, 79, 202, 190, 119, 253, 91, 62, 91, 51, 161, 188, 218, 144, 41, 62, 167, 161, 85, 61, 239, 246, 180, 62, 201, 81, 122, 190, 169, 127, 205, 188, 223, 123, 71, 190, 71, 209, 83, 189, 192, 207, 149, 190, 127, 216, 251, 61, 129, 36, 63, 189, 154, 204, 90, 189, 48, 21, 247, 189, 39, 117, 136, 189, 190, 52, 17, 190, 42, 27, 201, 60, 26, 82, 76, 185, 237, 57, 190, 189, 14, 210, 37, 190, 107, 223, 224, 60, 139, 58, 247, 188, 115, 244, 0, 62, 214, 208, 52, 190, 33, 188, 144, 188, 6, 104, 42, 61, 213, 135, 215, 189, 146, 86, 136, 61, 167, 128, 6, 190, 227, 199, 108, 188, 52, 139, 50, 187, 147, 197, 49, 62, 211, 145, 189, 189, 251, 77, 156, 189, 12, 23, 236, 188, 92, 16, 43, 187, 152, 236, 240, 188, 35, 27, 172, 188, 104, 250, 206, 61, 182, 236, 213, 61, 121, 61, 40, 190, 149, 160, 179, 189, 35, 178, 30, 190, 212, 234, 120, 189, 188, 132, 33, 189, 77, 180, 253, 61, 50, 164, 34, 62, 93, 208, 50, 60, 97, 88, 121, 189, 234, 196, 57, 62, 135, 255, 58, 62, 210, 158, 95, 188, 130, 7, 168, 59, 250, 94, 19, 62, 130, 16, 158, 61, 69, 17, 99, 188, 224, 112, 169, 59, 5, 223, 96, 61, 127, 120, 184, 61, 16, 252, 142, 61, 87, 6, 136, 187, 173, 216, 54, 190, 113, 23, 235, 61, 120, 236, 93, 61, 52, 235, 215, 189, 246, 131, 221, 58, 88, 234, 23, 190, 246, 58, 21, 61, 155, 50, 253, 189, 228, 50, 250, 187, 114, 137, 189, 188, 190, 226, 48, 189, 175, 238, 23, 189, 209, 210, 131, 62, 241, 147, 50, 62, 191, 47, 44, 190, 15, 175, 170, 190, 62, 71, 117, 61, 88, 20, 82, 62, 30, 119, 64, 60, 139, 131, 2, 62, 226, 54, 124, 60, 171, 179, 204, 190, 62, 120, 39, 190, 45, 82, 193, 61, 83, 92, 18, 189, 133, 8, 59, 62, 137, 119, 192, 189, 239, 47, 34, 62, 87, 125, 53, 62, 49, 34, 28, 190, 225, 72, 43, 190, 181, 34, 0, 61, 105, 246, 33, 191, 149, 90, 199, 189, 150, 109, 24, 191, 165, 100, 121, 62, 154, 228, 238, 61, 131, 74, 82, 62, 217, 110, 117, 189, 31, 35, 48, 62, 144, 188, 10, 191, 117, 218, 156, 189, 34, 21, 93, 189, 173, 243, 210, 61, 98, 178, 87, 190, 103, 146, 131, 61, 65, 72, 9, 189, 174, 176, 42, 62, 221, 148, 112, 189, 180, 83, 155, 188, 79, 135, 141, 189, 65, 206, 103, 61, 171, 220, 76, 62, 72, 249, 52, 189, 192, 196, 84, 190, 186, 141, 35, 62, 5, 154, 75, 190, 131, 167, 6, 62, 20, 77, 39, 62, 140, 56, 236, 189, 160, 92, 50, 190, 47, 237, 225, 189, 198, 253, 239, 188, 197, 42, 58, 61, 123, 47, 126, 61, 150, 175, 177, 188, 93, 145, 166, 61, 167, 31, 146, 190, 25, 221, 18, 62, 39, 93, 169, 61, 221, 225, 111, 59, 81, 16, 59, 190, 152, 30, 173, 61, 120, 39, 244, 61, 221, 3, 84, 61, 54, 90, 46, 188, 95, 120, 250, 62, 47, 201, 32, 62, 209, 143, 96, 61, 165, 248, 36, 61, 150, 106, 56, 61, 211, 73, 149, 60, 188, 195, 176, 60, 145, 247, 195, 190, 123, 112, 172, 60, 82, 64, 187, 62, 117, 122, 50, 62, 0, 0, 186, 189, 129, 85, 52, 59, 21, 70, 133, 61, 148, 113, 73, 189, 174, 219, 232, 60, 177, 52, 54, 190, 17, 227, 151, 62, 188, 102, 27, 62, 16, 80, 32, 189, 95, 208, 43, 188, 10, 254, 65, 190, 16, 221, 142, 62, 4, 88, 16, 62, 43, 91, 26, 61, 240, 241, 151, 189, 42, 166, 201, 61, 97, 230, 129, 188, 221, 247, 165, 61, 7, 94, 201, 61, 250, 120, 15, 190, 184, 164, 145, 189, 72, 180, 147, 187, 146, 249, 155, 189, 123, 160, 67, 62, 119, 116, 237, 61, 55, 0, 249, 189, 221, 33, 208, 189, 66, 209, 171, 61, 220, 201, 127, 61, 194, 204, 13, 190, 210, 108, 36, 60, 13, 48, 47, 190, 3, 158, 238, 189, 253, 249, 27, 189, 143, 74, 238, 60, 52, 187, 181, 61, 115, 34, 151, 60, 45, 180, 94, 188, 200, 148, 11, 62, 212, 30, 217, 189, 119, 16, 117, 59, 215, 63, 231, 61, 167, 67, 246, 61, 43, 201, 25, 62, 120, 250, 227, 189, 34, 18, 183, 189, 26, 218, 255, 189, 48, 14, 109, 61, 203, 227, 38, 190, 180, 179, 64, 190, 228, 192, 227, 189, 53, 189, 101, 189, 48, 26, 153, 189, 33, 186, 194, 189, 10, 205, 206, 60, 92, 159, 68, 189, 7, 17, 35, 60, 247, 57, 28, 62, 112, 125, 191, 61, 120, 176, 128, 61, 144, 200, 183, 60, 3, 210, 162, 61, 11, 239, 56, 189, 76, 104, 133, 59, 68, 181, 11, 62, 26, 247, 33, 190, 27, 54, 46, 190, 104, 183, 225, 61, 214, 199, 137, 60, 86, 189, 190, 189, 169, 127, 232, 61, 135, 220, 215, 189, 30, 25, 16, 62, 205, 186, 16, 62, 121, 140, 192, 189, 237, 3, 255, 61, 87, 61, 92, 190, 51, 48, 10, 189, 68, 138, 251, 188, 254, 22, 42, 61, 201, 183, 38, 190, 88, 75, 51, 190, 121, 225, 255, 189, 192, 238, 133, 189, 178, 47, 8, 190, 60, 126, 125, 62, 180, 184, 179, 61, 130, 129, 15, 190, 58, 86, 124, 61, 79, 9, 254, 189, 124, 56, 66, 190, 159, 34, 193, 61, 85, 73, 25, 62, 187, 29, 192, 61, 164, 39, 129, 61, 129, 91, 55, 62, 41, 154, 49, 190, 97, 68, 165, 60, 40, 198, 129, 61, 101, 222, 83, 61, 48, 198, 34, 62, 24, 37, 135, 188, 165, 134, 186, 61, 70, 86, 39, 61, 27, 82, 231, 60, 213, 64, 148, 189, 243, 159, 40, 189, 215, 41, 112, 189, 212, 64, 17, 61, 236, 116, 17, 62, 30, 204, 74, 190, 179, 243, 99, 62, 137, 46, 14, 188, 42, 72, 1, 62, 73, 147, 110, 61, 251, 205, 109, 189, 171, 40, 20, 190, 27, 122, 51, 190, 39, 38, 7, 189, 31, 150, 254, 60, 73, 28, 228, 61, 125, 122, 72, 62, 219, 245, 88, 190, 166, 127, 84, 61, 160, 252, 35, 190, 23, 167, 1, 190, 104, 28, 118, 62, 32, 45, 230, 61, 11, 252, 23, 190, 229, 117, 36, 62, 115, 179, 57, 62, 170, 40, 73, 61, 71, 132, 218, 188, 97, 16, 128, 61, 105, 145, 185, 62, 207, 129, 92, 189, 131, 255, 61, 61, 172, 162, 82, 61, 152, 177, 118, 188, 37, 147, 54, 62, 190, 52, 142, 61, 27, 61, 123, 190, 233, 68, 148, 189, 220, 88, 155, 62, 28, 116, 194, 189, 47, 226, 44, 62, 107, 37, 164, 189, 130, 78, 128, 61, 95, 158, 35, 62, 244, 245, 82, 62, 142, 217, 45, 61, 31, 200, 58, 62, 26, 93, 55, 188, 236, 138, 30, 62, 198, 170, 25, 61, 147, 167, 0, 62, 246, 66, 179, 61, 116, 226, 29, 190, 76, 185, 138, 189, 98, 177, 206, 188, 201, 116, 240, 61, 236, 169, 146, 61, 41, 144, 131, 190, 97, 169, 104, 188, 194, 56, 222, 61, 49, 76, 63, 62, 96, 14, 186, 61, 96, 104, 118, 189, 249, 28, 30, 189, 203, 202, 29, 60, 115, 19, 253, 189, 209, 199, 25, 62, 105, 181, 33, 62, 134, 169, 107, 61, 143, 1, 26, 61, 185, 24, 152, 189, 243, 195, 133, 61, 166, 122, 4, 62, 31, 128, 4, 62, 99, 84, 205, 60, 166, 103, 177, 190, 130, 166, 43, 189, 51, 241, 9, 61, 248, 22, 125, 188, 153, 166, 37, 62, 230, 104, 144, 189, 16, 102, 164, 61, 71, 144, 72, 62, 143, 90, 82, 61, 141, 178, 237, 189, 130, 147, 12, 62, 241, 34, 116, 62, 175, 20, 137, 61, 100, 234, 145, 60, 178, 50, 95, 189, 56, 198, 97, 189, 23, 128, 208, 188, 163, 225, 59, 189, 75, 6, 179, 60, 87, 242, 20, 62, 58, 96, 132, 61, 194, 201, 240, 61, 20, 135, 33, 190, 107, 86, 24, 62, 224, 76, 251, 61, 42, 78, 24, 62, 189, 54, 161, 60, 28, 90, 229, 187, 121, 90, 106, 61, 132, 47, 119, 61, 210, 30, 43, 189, 206, 192, 56, 190, 29, 139, 47, 61, 89, 224, 6, 61, 209, 221, 35, 62, 54, 132, 51, 62, 18, 113, 129, 60, 160, 193, 73, 61, 241, 128, 188, 188, 241, 81, 192, 189, 216, 90, 51, 190, 165, 47, 59, 190, 206, 54, 233, 62, 59, 163, 242, 59, 235, 144, 27, 190, 94, 0, 145, 61, 28, 240, 240, 189, 67, 115, 38, 190, 248, 242, 194, 189, 187, 69, 26, 190, 120, 32, 48, 62, 50, 13, 21, 62, 134, 166, 96, 62, 43, 67, 182, 61, 38, 81, 154, 189, 13, 122, 155, 62, 128, 71, 17, 62, 207, 184, 81, 190, 86, 216, 163, 189, 44, 42, 149, 62, 95, 236, 200, 189, 237, 21, 81, 62, 161, 197, 5, 187, 102, 67, 60, 190, 43, 86, 70, 61, 13, 134, 22, 62, 252, 134, 185, 61, 156, 163, 190, 189, 52, 121, 151, 61, 185, 223, 166, 188, 147, 188, 255, 189, 69, 42, 169, 188, 18, 108, 254, 61, 18, 248, 35, 190, 216, 242, 45, 60, 17, 16, 215, 189, 148, 116, 136, 60, 21, 176, 107, 189, 219, 48, 251, 189, 153, 44, 37, 62, 196, 6, 235, 188, 61, 97, 110, 61, 106, 147, 20, 190, 1, 83, 5, 190, 218, 114, 246, 189, 158, 5, 42, 190, 162, 22, 69, 60, 195, 229, 100, 189, 114, 170, 38, 62, 219, 87, 108, 61, 184, 142, 136, 188, 89, 163, 27, 190, 107, 179, 159, 189, 134, 23, 250, 60, 31, 55, 187, 61, 47, 0, 28, 190, 219, 104, 159, 188, 1, 158, 93, 188, 201, 189, 132, 187, 93, 42, 27, 62, 233, 30, 23, 190, 199, 51, 21, 62, 245, 73, 184, 189, 168, 172, 88, 61, 246, 206, 5, 190, 181, 233, 201, 59, 83, 204, 1, 62, 223, 158, 79, 189, 118, 121, 57, 190, 139, 94, 75, 62, 18, 238, 193, 60, 9, 163, 24, 190, 128, 164, 205, 189, 241, 102, 250, 61, 182, 15, 230, 61, 139, 225, 75, 190, 19, 154, 158, 61, 68, 51, 218, 189, 76, 232, 47, 190, 64, 68, 181, 60, 241, 241, 199, 61, 136, 244, 121, 190, 211, 227, 7, 62, 200, 184, 113, 62, 161, 244, 13, 190, 41, 149, 117, 61, 244, 54, 125, 61, 225, 192, 75, 189, 173, 103, 184, 190, 71, 77, 87, 190, 70, 253, 16, 187, 170, 244, 9, 190, 27, 164, 156, 189, 97, 110, 29, 62, 64, 52, 38, 62, 54, 188, 181, 189, 119, 129, 17, 59, 70, 225, 202, 189, 145, 28, 249, 61, 28, 23, 186, 189, 229, 112, 157, 187, 179, 215, 16, 61, 154, 82, 107, 62, 47, 126, 48, 58, 77, 93, 216, 189, 6, 62, 89, 62, 192, 232, 67, 61, 188, 26, 165, 189, 197, 237, 36, 62, 21, 225, 248, 61, 230, 83, 5, 62, 20, 251, 226, 189, 85, 224, 33, 62, 194, 186, 196, 189, 238, 152, 81, 61, 131, 64, 61, 62, 155, 23, 24, 189, 68, 61, 32, 62, 55, 16, 89, 189, 13, 132, 22, 187, 44, 52, 75, 62, 221, 199, 140, 62, 196, 181, 230, 189, 32, 111, 132, 60, 234, 52, 5, 190, 24, 10, 164, 61, 232, 48, 62, 62, 176, 96, 133, 61, 32, 67, 148, 189, 237, 19, 25, 189, 27, 35, 248, 60, 90, 155, 80, 190, 251, 102, 116, 189, 212, 45, 6, 61, 204, 189, 29, 190, 245, 87, 36, 61, 250, 72, 148, 61, 46, 49, 136, 60, 88, 212, 138, 189, 198, 228, 14, 189, 15, 136, 0, 62, 66, 182, 158, 59, 49, 14, 82, 190, 217, 201, 55, 60, 68, 31, 66, 61, 109, 194, 126, 189, 36, 167, 56, 62, 22, 23, 197, 188, 82, 191, 175, 186, 203, 28, 29, 62, 253, 49, 200, 61, 37, 139, 184, 61, 90, 234, 128, 190, 111, 77, 74, 190, 70, 250, 191, 61, 33, 186, 43, 187, 45, 208, 9, 190, 244, 7, 87, 190, 226, 153, 55, 62, 244, 70, 188, 60, 103, 254, 45, 62, 212, 20, 33, 62, 58, 133, 26, 190, 152, 76, 92, 190, 178, 121, 149, 60, 178, 14, 100, 190, 37, 27, 104, 62, 46, 44, 252, 189, 23, 144, 143, 60, 226, 145, 20, 61, 17, 7, 61, 190, 42, 58, 96, 61, 182, 239, 25, 61, 38, 74, 53, 188, 182, 142, 97, 189, 82, 212, 50, 61, 95, 161, 3, 62, 24, 229, 177, 188, 166, 11, 182, 61, 168, 48, 146, 190, 247, 54, 3, 61, 23, 245, 24, 190, 14, 164, 220, 189, 30, 240, 220, 189, 177, 50, 38, 62, 191, 142, 179, 188, 138, 14, 24, 62, 70, 38, 151, 61, 133, 93, 193, 188, 132, 56, 228, 188, 2, 143, 190, 61, 231, 5, 144, 188, 176, 43, 92, 62, 157, 240, 66, 62, 178, 173, 141, 60, 121, 48, 217, 189, 48, 170, 189, 61, 155, 201, 8, 190, 62, 245, 43, 188, 98, 162, 229, 61, 112, 98, 98, 190, 159, 255, 236, 61, 202, 42, 199, 187, 196, 255, 70, 190, 80, 249, 173, 61, 248, 95, 88, 188, 187, 98, 183, 61, 180, 132, 232, 61, 105, 33, 144, 190, 169, 92, 2, 62, 49, 199, 186, 60, 48, 155, 221, 189, 240, 156, 232, 189, 64, 44, 248, 61, 156, 210, 1, 190, 115, 180, 180, 61, 152, 88, 153, 188, 40, 86, 98, 62, 171, 28, 51, 61, 101, 200, 29, 190, 141, 70, 198, 190, 191, 113, 220, 189, 163, 67, 100, 61, 82, 246, 252, 61, 191, 135, 6, 62, 152, 194, 121, 62, 219, 142, 51, 191, 71, 220, 77, 190, 131, 160, 242, 189, 110, 105, 29, 190, 209, 28, 17, 62, 102, 131, 12, 62, 16, 123, 207, 61, 36, 157, 250, 61, 16, 74, 128, 190, 180, 140, 81, 61, 189, 66, 98, 61, 31, 151, 141, 190, 82, 59, 26, 190, 2, 244, 128, 190, 212, 241, 64, 62, 102, 63, 155, 189, 81, 241, 237, 189, 211, 205, 226, 60, 55, 44, 38, 189, 131, 27, 145, 190, 146, 242, 183, 189, 181, 140, 133, 190, 0, 201, 161, 62, 82, 2, 198, 62, 195, 30, 37, 190, 153, 66, 84, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 23, 145, 62, 44, 79, 14, 62, 188, 86, 225, 60, 107, 169, 45, 190, 230, 237, 40, 60, 213, 119, 30, 62, 56, 241, 163, 61, 224, 116, 50, 190, 199, 165, 152, 189, 7, 163, 190, 189, 218, 89, 4, 190, 14, 78, 82, 62, 142, 14, 68, 62, 62, 59, 36, 190, 192, 190, 46, 62, 65, 122, 73, 189, 219, 235, 19, 61, 238, 22, 154, 61, 197, 212, 249, 189, 25, 221, 52, 62, 223, 168, 70, 190, 135, 204, 17, 61, 251, 225, 139, 61, 90, 114, 72, 61, 108, 25, 253, 60, 215, 140, 12, 190, 38, 59, 8, 62, 187, 130, 52, 189, 162, 46, 3, 61, 61, 198, 166, 189, 130, 218, 73, 189, 56, 28, 243, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 191, 136, 190, 127, 34, 73, 190, 248, 244, 64, 62, 226, 49, 192, 61, 21, 99, 184, 61, 207, 85, 212, 189, 60, 65, 77, 190, 180, 141, 248, 189, 18, 255, 24, 190, 50, 190, 153, 187, 10, 206, 218, 60, 3, 85, 150, 190, 77, 67, 199, 190, 96, 236, 50, 190, 58, 138, 75, 188, 115, 181, 239, 190, 212, 141, 143, 189, 130, 87, 43, 62, 152, 173, 42, 190, 91, 34, 251, 189, 122, 74, 43, 62, 103, 158, 41, 62, 239, 40, 228, 61, 8, 29, 25, 62, 137, 115, 146, 62, 150, 13, 24, 189, 200, 148, 126, 62, 153, 125, 195, 59, 222, 255, 234, 61, 103, 250, 0, 190, 100, 156, 101, 190, 105, 156, 217, 190, 64, 63, 25, 190, 99, 210, 13, 62, 79, 82, 164, 61, 179, 107, 37, 190, 180, 113, 72, 190, 124, 112, 69, 189, 189, 242, 95, 190, 166, 49, 15, 190, 69, 186, 4, 62, 244, 4, 189, 189, 73, 47, 5, 190, 67, 213, 47, 188, 119, 251, 222, 61, 11, 229, 64, 61, 51, 119, 18, 190, 133, 0, 143, 61, 249, 186, 14, 61, 189, 129, 130, 61, 75, 11, 238, 61, 145, 58, 63, 190, 138, 222, 3, 62, 81, 5, 2, 190, 9, 252, 22, 188, 221, 134, 123, 189, 140, 188, 251, 189, 17, 234, 46, 61, 17, 122, 50, 189, 33, 76, 44, 190, 60, 6, 72, 188, 40, 180, 206, 61, 40, 153, 83, 61, 97, 216, 138, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 149, 247, 61, 41, 220, 251, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {195, 82, 232, 62, 183, 20, 222, 63, 7, 232, 227, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {195, 31, 26, 192, 149, 129, 151, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0087/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}