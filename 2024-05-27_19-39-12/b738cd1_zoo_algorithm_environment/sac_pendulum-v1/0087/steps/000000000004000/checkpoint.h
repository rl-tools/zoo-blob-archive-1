// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 170, 4, 189, 211, 76, 250, 190, 155, 61, 118, 190, 166, 162, 184, 60, 219, 179, 189, 190, 134, 51, 227, 62, 229, 246, 144, 190, 53, 240, 11, 63, 104, 25, 191, 61, 76, 55, 37, 191, 125, 63, 236, 62, 182, 128, 109, 62, 127, 135, 214, 62, 194, 157, 30, 63, 71, 78, 5, 63, 246, 210, 44, 63, 13, 251, 8, 63, 120, 15, 208, 62, 58, 252, 15, 189, 74, 36, 119, 191, 105, 28, 91, 62, 206, 61, 239, 62, 189, 157, 95, 191, 216, 176, 214, 190, 168, 225, 211, 60, 188, 151, 178, 62, 217, 71, 252, 62, 226, 156, 252, 62, 175, 243, 25, 191, 157, 117, 45, 190, 205, 132, 145, 61, 120, 90, 30, 62, 222, 61, 148, 190, 115, 81, 82, 62, 36, 238, 60, 62, 97, 70, 239, 62, 64, 223, 30, 190, 234, 88, 152, 190, 89, 239, 8, 191, 189, 90, 158, 190, 161, 73, 151, 62, 211, 172, 223, 61, 64, 122, 41, 63, 127, 26, 133, 191, 72, 120, 183, 189, 119, 74, 111, 62, 11, 174, 187, 190, 162, 108, 0, 191, 204, 49, 31, 62, 106, 152, 148, 189, 238, 28, 37, 63, 188, 44, 193, 190, 138, 126, 133, 191, 146, 228, 66, 63, 218, 46, 74, 62, 37, 165, 140, 61, 193, 76, 2, 63, 10, 77, 25, 188, 44, 127, 70, 191, 91, 226, 61, 63, 228, 242, 46, 191, 218, 28, 136, 190, 183, 216, 74, 61, 182, 87, 115, 62, 56, 63, 211, 62, 145, 68, 207, 62, 86, 126, 59, 191, 195, 213, 174, 62, 169, 131, 46, 62, 40, 147, 140, 189, 166, 180, 96, 191, 31, 109, 3, 62, 197, 170, 20, 191, 198, 151, 122, 62, 161, 182, 165, 189, 141, 63, 29, 191, 153, 98, 236, 190, 93, 147, 26, 63, 43, 119, 235, 190, 91, 28, 72, 62, 202, 152, 7, 63, 113, 146, 229, 189, 162, 200, 48, 191, 154, 212, 241, 62, 112, 79, 161, 189, 171, 26, 27, 63, 252, 231, 34, 191, 212, 254, 113, 63, 167, 163, 31, 63, 71, 104, 29, 189, 140, 157, 182, 190, 104, 55, 115, 190, 135, 217, 62, 188, 89, 118, 60, 62, 21, 58, 245, 60, 240, 208, 247, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 35, 10, 191, 103, 32, 210, 62, 30, 39, 7, 63, 17, 183, 148, 190, 215, 170, 195, 190, 82, 52, 145, 62, 76, 174, 231, 61, 156, 79, 140, 189, 178, 34, 21, 191, 30, 123, 37, 62, 70, 95, 241, 62, 175, 145, 51, 190, 49, 185, 208, 62, 145, 179, 10, 63, 120, 71, 239, 62, 49, 146, 16, 190, 231, 21, 10, 63, 103, 16, 190, 59, 88, 8, 80, 190, 21, 51, 208, 62, 28, 60, 26, 63, 71, 121, 149, 190, 32, 79, 220, 62, 35, 54, 9, 63, 66, 173, 149, 190, 69, 219, 118, 190, 96, 130, 134, 189, 231, 252, 218, 190, 36, 22, 220, 62, 190, 231, 66, 190, 24, 80, 27, 191, 49, 175, 26, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 115, 169, 188, 124, 252, 86, 190, 95, 198, 61, 189, 210, 170, 180, 190, 18, 95, 126, 62, 226, 94, 126, 62, 16, 184, 138, 190, 130, 161, 232, 61, 213, 149, 2, 62, 254, 156, 93, 61, 38, 95, 133, 61, 111, 0, 81, 62, 255, 77, 134, 189, 137, 146, 49, 62, 115, 231, 35, 189, 127, 140, 179, 60, 214, 62, 10, 62, 202, 62, 99, 190, 24, 148, 9, 62, 199, 35, 100, 190, 101, 155, 4, 62, 4, 184, 22, 62, 91, 37, 100, 189, 236, 47, 30, 190, 127, 65, 176, 187, 183, 208, 11, 191, 216, 171, 103, 190, 229, 88, 236, 189, 44, 167, 50, 61, 6, 97, 241, 62, 63, 189, 102, 61, 245, 18, 176, 61, 169, 134, 17, 189, 30, 224, 40, 62, 102, 79, 168, 187, 179, 252, 150, 189, 146, 171, 204, 61, 67, 222, 199, 60, 191, 121, 193, 60, 30, 170, 161, 189, 32, 97, 127, 61, 243, 167, 73, 62, 107, 85, 226, 189, 25, 225, 254, 188, 130, 90, 211, 189, 240, 57, 15, 190, 49, 250, 155, 189, 100, 248, 61, 62, 34, 72, 72, 62, 244, 85, 134, 189, 15, 250, 19, 62, 145, 169, 24, 62, 176, 115, 54, 190, 140, 188, 90, 62, 219, 153, 99, 189, 83, 69, 248, 61, 25, 199, 179, 189, 55, 94, 139, 62, 232, 31, 7, 190, 172, 124, 46, 62, 8, 119, 192, 60, 204, 247, 92, 63, 112, 186, 210, 61, 80, 175, 93, 62, 249, 64, 165, 62, 173, 196, 163, 62, 40, 242, 102, 189, 178, 223, 38, 62, 173, 148, 199, 190, 211, 166, 145, 188, 234, 184, 210, 62, 190, 118, 121, 62, 42, 98, 250, 189, 69, 24, 87, 62, 134, 165, 12, 190, 151, 165, 187, 190, 34, 192, 71, 190, 69, 231, 107, 190, 81, 2, 89, 62, 215, 87, 130, 61, 74, 49, 34, 188, 154, 66, 31, 62, 143, 34, 192, 190, 112, 132, 104, 62, 170, 230, 175, 62, 247, 59, 145, 190, 15, 176, 194, 188, 210, 146, 51, 62, 133, 157, 55, 62, 132, 251, 125, 62, 91, 59, 14, 189, 83, 119, 104, 190, 48, 59, 22, 190, 76, 193, 71, 190, 208, 194, 52, 190, 215, 70, 169, 61, 157, 37, 176, 60, 209, 46, 109, 61, 34, 232, 218, 189, 200, 36, 129, 189, 15, 8, 5, 62, 172, 160, 181, 189, 137, 23, 61, 61, 148, 226, 29, 190, 63, 1, 41, 62, 139, 249, 180, 189, 41, 247, 205, 61, 107, 8, 152, 189, 138, 149, 209, 60, 106, 207, 141, 61, 70, 82, 1, 190, 149, 168, 47, 62, 251, 137, 4, 190, 246, 155, 36, 61, 95, 224, 24, 62, 243, 50, 199, 59, 166, 82, 197, 187, 15, 27, 189, 189, 199, 15, 34, 190, 210, 3, 25, 190, 138, 29, 33, 190, 34, 9, 51, 190, 113, 75, 21, 190, 146, 8, 188, 61, 20, 123, 31, 190, 100, 255, 12, 62, 199, 49, 30, 190, 165, 251, 23, 61, 204, 94, 225, 61, 65, 164, 129, 189, 13, 82, 142, 190, 128, 106, 47, 190, 103, 78, 184, 189, 241, 208, 176, 61, 42, 204, 91, 62, 37, 212, 237, 189, 188, 242, 46, 190, 84, 48, 3, 62, 126, 2, 193, 188, 242, 146, 170, 189, 90, 59, 164, 61, 44, 55, 49, 61, 42, 25, 167, 62, 163, 182, 85, 189, 214, 56, 45, 62, 210, 222, 23, 190, 199, 57, 205, 61, 97, 227, 216, 189, 177, 247, 248, 61, 155, 10, 132, 61, 32, 199, 201, 189, 128, 138, 63, 61, 125, 101, 78, 190, 108, 201, 130, 190, 66, 25, 125, 190, 141, 110, 27, 62, 210, 238, 54, 60, 195, 141, 103, 61, 167, 220, 13, 62, 6, 183, 15, 62, 122, 191, 89, 61, 14, 155, 53, 62, 156, 50, 38, 190, 249, 98, 222, 189, 140, 107, 200, 189, 52, 183, 67, 62, 201, 72, 80, 190, 209, 160, 222, 186, 150, 30, 160, 61, 21, 7, 17, 62, 6, 170, 45, 62, 218, 7, 56, 61, 253, 41, 45, 62, 53, 139, 123, 190, 241, 21, 80, 62, 27, 102, 74, 60, 74, 160, 192, 189, 90, 212, 255, 189, 106, 13, 193, 61, 0, 102, 0, 62, 35, 255, 231, 190, 250, 183, 230, 61, 105, 185, 252, 189, 116, 176, 60, 190, 29, 54, 46, 189, 218, 170, 151, 189, 221, 137, 56, 189, 81, 2, 164, 190, 151, 146, 31, 190, 229, 110, 3, 63, 124, 17, 17, 62, 3, 177, 141, 61, 41, 200, 135, 189, 216, 21, 210, 188, 101, 65, 87, 62, 93, 217, 236, 60, 10, 159, 206, 189, 90, 149, 232, 60, 135, 204, 164, 190, 208, 30, 193, 61, 201, 197, 148, 190, 2, 184, 40, 61, 189, 28, 109, 62, 184, 77, 176, 189, 178, 149, 244, 60, 126, 174, 102, 186, 234, 91, 183, 61, 91, 244, 175, 189, 230, 15, 150, 190, 163, 64, 9, 191, 179, 119, 69, 190, 130, 171, 144, 190, 209, 1, 29, 62, 210, 168, 96, 190, 255, 211, 179, 60, 46, 236, 7, 61, 184, 24, 3, 189, 65, 106, 97, 191, 74, 117, 205, 190, 206, 140, 251, 61, 83, 109, 61, 60, 93, 67, 205, 62, 43, 229, 178, 189, 151, 83, 28, 61, 30, 63, 43, 62, 207, 123, 133, 189, 255, 201, 5, 190, 144, 232, 237, 60, 26, 74, 31, 190, 78, 239, 195, 61, 196, 71, 92, 188, 52, 178, 63, 189, 235, 224, 153, 61, 187, 168, 166, 189, 214, 50, 26, 190, 163, 151, 14, 190, 126, 152, 18, 62, 248, 131, 32, 62, 70, 50, 0, 190, 184, 211, 208, 189, 176, 252, 152, 189, 129, 150, 219, 188, 14, 206, 178, 189, 214, 18, 253, 189, 101, 119, 177, 189, 90, 233, 202, 189, 244, 132, 12, 61, 115, 209, 103, 189, 224, 240, 29, 190, 173, 247, 53, 189, 86, 245, 46, 61, 144, 47, 41, 190, 36, 149, 87, 189, 1, 6, 92, 187, 78, 2, 18, 62, 24, 112, 150, 61, 231, 42, 222, 61, 107, 241, 128, 187, 48, 130, 59, 189, 212, 132, 209, 61, 155, 62, 16, 190, 168, 145, 175, 190, 38, 131, 131, 62, 217, 223, 110, 62, 56, 71, 133, 190, 161, 62, 86, 62, 91, 138, 139, 190, 112, 175, 78, 190, 177, 196, 52, 189, 151, 197, 206, 61, 165, 130, 47, 61, 194, 32, 189, 60, 55, 191, 215, 189, 59, 0, 113, 62, 1, 21, 145, 190, 148, 238, 32, 62, 201, 167, 154, 61, 38, 167, 113, 190, 72, 66, 31, 62, 219, 72, 76, 189, 60, 90, 201, 190, 237, 180, 130, 62, 73, 74, 216, 189, 47, 157, 174, 189, 79, 49, 5, 191, 186, 46, 108, 190, 69, 92, 155, 61, 178, 131, 128, 189, 149, 16, 244, 189, 129, 5, 115, 189, 244, 24, 239, 189, 240, 212, 181, 61, 188, 108, 12, 62, 224, 169, 15, 190, 148, 184, 30, 190, 173, 92, 254, 61, 56, 104, 107, 61, 25, 1, 254, 189, 30, 137, 96, 189, 234, 26, 50, 60, 100, 74, 199, 189, 97, 136, 35, 190, 227, 69, 208, 61, 191, 191, 42, 190, 82, 97, 178, 61, 101, 250, 250, 189, 217, 92, 23, 190, 10, 211, 182, 61, 227, 174, 23, 61, 63, 40, 172, 59, 184, 209, 7, 62, 42, 174, 29, 190, 239, 192, 53, 189, 21, 2, 51, 190, 6, 180, 20, 61, 90, 37, 24, 62, 165, 52, 3, 189, 180, 38, 183, 61, 61, 149, 169, 61, 186, 85, 212, 61, 50, 115, 101, 189, 159, 172, 139, 60, 17, 16, 47, 190, 25, 162, 8, 60, 199, 61, 29, 62, 197, 85, 255, 189, 170, 93, 190, 61, 6, 64, 218, 189, 147, 62, 186, 60, 84, 11, 175, 189, 201, 123, 169, 188, 95, 196, 51, 190, 114, 149, 4, 190, 2, 167, 74, 60, 59, 68, 165, 187, 46, 102, 176, 61, 22, 38, 50, 190, 162, 92, 173, 189, 150, 91, 46, 187, 22, 36, 43, 190, 131, 152, 249, 60, 93, 155, 9, 62, 193, 176, 95, 61, 158, 67, 28, 61, 240, 73, 27, 190, 169, 250, 21, 187, 26, 105, 152, 61, 250, 18, 221, 189, 141, 18, 48, 190, 241, 15, 89, 61, 18, 207, 131, 61, 161, 152, 51, 62, 42, 1, 215, 190, 151, 113, 9, 62, 203, 140, 159, 61, 25, 41, 191, 190, 26, 185, 33, 62, 146, 107, 54, 62, 214, 110, 138, 190, 47, 83, 50, 190, 132, 59, 124, 189, 152, 220, 234, 188, 108, 124, 29, 62, 90, 215, 58, 62, 215, 192, 0, 61, 118, 106, 163, 61, 183, 10, 109, 189, 246, 99, 69, 190, 221, 102, 223, 189, 19, 215, 198, 190, 73, 217, 170, 62, 68, 37, 16, 190, 218, 75, 230, 187, 115, 42, 50, 62, 25, 216, 192, 189, 103, 88, 59, 189, 85, 246, 2, 190, 108, 77, 14, 191, 78, 149, 219, 189, 253, 220, 3, 62, 23, 94, 96, 62, 249, 12, 2, 63, 115, 19, 17, 62, 126, 162, 198, 60, 185, 215, 120, 61, 59, 18, 141, 190, 95, 73, 165, 62, 73, 158, 248, 60, 108, 63, 228, 61, 66, 96, 67, 190, 186, 111, 43, 191, 9, 183, 199, 186, 35, 40, 22, 190, 20, 111, 100, 61, 149, 173, 17, 189, 159, 167, 124, 190, 88, 132, 17, 62, 114, 248, 48, 61, 206, 72, 159, 190, 56, 123, 41, 189, 51, 128, 10, 191, 168, 210, 165, 191, 163, 232, 67, 190, 108, 138, 127, 191, 161, 98, 101, 62, 249, 167, 47, 61, 123, 12, 58, 62, 88, 19, 86, 61, 171, 110, 216, 62, 251, 171, 116, 191, 93, 82, 147, 190, 223, 123, 71, 190, 122, 166, 137, 189, 25, 196, 166, 190, 72, 124, 248, 61, 82, 238, 193, 189, 154, 204, 90, 189, 48, 21, 247, 189, 39, 117, 136, 189, 190, 52, 17, 190, 42, 27, 201, 60, 26, 82, 76, 185, 237, 57, 190, 189, 14, 210, 37, 190, 107, 223, 224, 60, 139, 58, 247, 188, 115, 244, 0, 62, 214, 208, 52, 190, 33, 188, 144, 188, 6, 104, 42, 61, 213, 135, 215, 189, 146, 86, 136, 61, 167, 128, 6, 190, 227, 199, 108, 188, 52, 139, 50, 187, 147, 197, 49, 62, 211, 145, 189, 189, 251, 77, 156, 189, 12, 23, 236, 188, 92, 16, 43, 187, 152, 236, 240, 188, 35, 27, 172, 188, 104, 250, 206, 61, 182, 236, 213, 61, 121, 61, 40, 190, 149, 160, 179, 189, 35, 178, 30, 190, 212, 234, 120, 189, 161, 92, 24, 190, 4, 94, 16, 62, 228, 158, 47, 62, 145, 40, 51, 61, 41, 188, 174, 189, 187, 88, 82, 62, 89, 101, 48, 62, 32, 178, 24, 189, 121, 3, 163, 188, 235, 89, 10, 62, 48, 61, 110, 61, 7, 113, 157, 188, 134, 201, 212, 185, 160, 116, 163, 61, 41, 22, 31, 62, 88, 160, 128, 61, 55, 166, 132, 60, 44, 50, 75, 190, 155, 163, 222, 61, 95, 158, 134, 61, 15, 229, 122, 189, 158, 168, 61, 188, 132, 236, 4, 190, 1, 42, 148, 61, 96, 175, 127, 189, 149, 74, 62, 189, 16, 236, 19, 189, 67, 10, 195, 189, 175, 221, 149, 189, 170, 187, 62, 62, 241, 147, 50, 62, 100, 178, 64, 190, 152, 61, 204, 190, 139, 125, 77, 189, 239, 18, 19, 62, 145, 69, 5, 189, 37, 158, 18, 62, 85, 174, 105, 189, 175, 78, 15, 191, 219, 178, 86, 190, 153, 83, 21, 62, 235, 115, 136, 189, 128, 145, 49, 62, 144, 145, 195, 189, 17, 133, 61, 62, 211, 91, 9, 62, 66, 116, 73, 190, 115, 198, 76, 190, 15, 97, 76, 190, 187, 61, 147, 191, 194, 138, 174, 189, 83, 164, 141, 191, 141, 118, 141, 62, 163, 111, 4, 62, 17, 223, 58, 62, 92, 80, 10, 59, 36, 210, 105, 62, 113, 109, 156, 191, 85, 121, 152, 190, 167, 224, 164, 60, 125, 242, 190, 61, 193, 57, 129, 190, 103, 146, 131, 61, 212, 233, 178, 189, 124, 111, 87, 62, 215, 224, 83, 189, 173, 200, 30, 189, 162, 235, 59, 189, 17, 160, 95, 60, 231, 43, 9, 62, 208, 222, 208, 187, 157, 73, 185, 189, 225, 185, 11, 62, 37, 247, 40, 190, 134, 152, 29, 62, 82, 52, 0, 62, 141, 183, 32, 189, 174, 128, 61, 190, 198, 13, 13, 190, 135, 118, 241, 61, 43, 117, 9, 61, 21, 43, 196, 61, 81, 170, 98, 189, 112, 126, 184, 61, 186, 118, 112, 190, 61, 88, 218, 61, 123, 153, 190, 61, 134, 214, 193, 60, 64, 250, 77, 190, 15, 220, 14, 62, 233, 88, 11, 62, 178, 146, 65, 61, 102, 105, 97, 61, 153, 8, 90, 63, 37, 131, 32, 62, 224, 241, 89, 62, 150, 181, 219, 60, 215, 227, 137, 61, 123, 217, 239, 61, 199, 244, 172, 61, 69, 213, 252, 190, 8, 189, 8, 59, 47, 35, 193, 62, 204, 74, 19, 62, 141, 231, 71, 190, 131, 53, 170, 188, 131, 6, 190, 61, 178, 69, 250, 189, 192, 105, 201, 60, 164, 28, 176, 189, 152, 121, 159, 62, 109, 61, 241, 61, 106, 58, 173, 188, 234, 182, 62, 187, 22, 71, 132, 190, 237, 250, 156, 62, 221, 49, 84, 62, 139, 36, 128, 189, 129, 43, 244, 187, 163, 240, 7, 62, 125, 222, 241, 61, 186, 72, 151, 61, 156, 63, 232, 61, 36, 20, 84, 190, 212, 180, 113, 189, 74, 246, 62, 190, 82, 57, 155, 189, 86, 90, 54, 62, 236, 63, 4, 62, 126, 21, 12, 189, 115, 137, 160, 189, 8, 18, 19, 62, 67, 210, 79, 189, 127, 20, 136, 190, 150, 156, 34, 62, 223, 110, 52, 190, 177, 243, 23, 190, 35, 164, 247, 189, 20, 241, 122, 190, 218, 64, 18, 61, 2, 164, 134, 189, 130, 39, 139, 61, 46, 197, 241, 61, 138, 127, 78, 189, 88, 31, 29, 61, 247, 119, 134, 62, 142, 254, 157, 61, 150, 137, 123, 62, 71, 181, 0, 62, 16, 164, 33, 190, 104, 115, 212, 188, 18, 187, 63, 62, 11, 97, 120, 190, 33, 88, 147, 59, 173, 61, 175, 188, 54, 236, 197, 188, 58, 5, 1, 191, 209, 68, 240, 61, 10, 205, 206, 60, 140, 59, 27, 189, 97, 161, 188, 61, 76, 237, 56, 62, 98, 187, 179, 61, 219, 130, 65, 61, 184, 10, 44, 189, 239, 98, 134, 61, 112, 197, 33, 61, 218, 101, 157, 61, 39, 143, 159, 61, 212, 18, 210, 189, 230, 107, 77, 190, 136, 225, 143, 61, 111, 238, 177, 60, 228, 112, 173, 189, 14, 164, 158, 62, 94, 111, 128, 189, 35, 160, 30, 62, 235, 77, 46, 62, 183, 35, 5, 190, 109, 149, 47, 62, 155, 137, 9, 190, 63, 15, 174, 189, 139, 77, 187, 188, 235, 178, 26, 62, 47, 42, 32, 190, 95, 194, 42, 190, 115, 236, 19, 190, 21, 139, 230, 189, 143, 107, 74, 190, 55, 42, 177, 62, 180, 184, 179, 61, 214, 226, 7, 190, 169, 31, 202, 61, 149, 186, 2, 190, 129, 229, 167, 190, 36, 149, 37, 61, 218, 72, 198, 61, 196, 138, 184, 61, 117, 50, 202, 61, 154, 87, 97, 62, 202, 45, 112, 190, 22, 158, 159, 61, 34, 141, 202, 60, 99, 236, 43, 61, 197, 104, 34, 62, 102, 100, 169, 189, 227, 135, 130, 62, 187, 107, 44, 61, 5, 132, 0, 61, 137, 83, 157, 189, 237, 247, 51, 189, 33, 32, 42, 189, 120, 61, 132, 61, 164, 226, 200, 61, 247, 126, 123, 190, 58, 238, 179, 62, 218, 172, 218, 189, 88, 235, 82, 61, 95, 164, 67, 60, 98, 196, 46, 189, 226, 104, 69, 190, 58, 253, 209, 190, 76, 202, 6, 189, 218, 134, 35, 60, 219, 213, 141, 61, 75, 38, 105, 62, 45, 118, 37, 189, 180, 72, 70, 62, 107, 180, 33, 190, 225, 189, 116, 189, 242, 205, 91, 62, 7, 225, 158, 61, 68, 211, 29, 190, 72, 173, 13, 62, 53, 142, 107, 62, 108, 202, 72, 61, 9, 237, 154, 188, 38, 250, 80, 62, 4, 127, 174, 62, 51, 91, 171, 189, 164, 91, 188, 61, 174, 13, 82, 61, 153, 119, 173, 188, 83, 193, 73, 62, 125, 25, 37, 62, 244, 46, 118, 190, 87, 19, 29, 61, 213, 234, 155, 62, 62, 94, 239, 61, 253, 208, 48, 62, 124, 234, 224, 188, 227, 37, 32, 60, 236, 3, 55, 62, 195, 14, 12, 190, 56, 168, 48, 61, 130, 122, 38, 62, 226, 0, 65, 188, 225, 168, 40, 62, 112, 244, 240, 61, 153, 120, 111, 62, 127, 25, 164, 61, 132, 47, 15, 190, 191, 143, 241, 189, 33, 98, 185, 189, 168, 124, 212, 61, 236, 149, 12, 61, 164, 144, 145, 190, 171, 143, 9, 189, 214, 30, 210, 188, 100, 5, 125, 62, 123, 150, 131, 56, 246, 246, 108, 190, 40, 147, 119, 188, 192, 216, 122, 56, 148, 222, 23, 190, 107, 98, 20, 62, 35, 131, 47, 62, 55, 191, 69, 61, 241, 210, 204, 61, 229, 163, 238, 189, 38, 229, 54, 62, 104, 115, 9, 62, 20, 250, 49, 62, 18, 113, 249, 188, 235, 195, 245, 190, 91, 246, 171, 190, 51, 241, 9, 61, 109, 137, 238, 189, 155, 40, 247, 61, 196, 137, 69, 189, 156, 232, 115, 62, 33, 155, 161, 62, 208, 173, 75, 61, 141, 79, 133, 189, 109, 234, 218, 61, 86, 46, 78, 62, 9, 25, 90, 61, 71, 30, 149, 187, 247, 211, 86, 187, 29, 47, 129, 189, 132, 40, 187, 188, 62, 206, 174, 61, 15, 40, 132, 188, 249, 144, 224, 61, 175, 191, 206, 61, 66, 181, 231, 61, 156, 222, 47, 190, 77, 87, 37, 62, 73, 253, 77, 62, 182, 127, 21, 62, 218, 127, 245, 61, 197, 161, 133, 188, 234, 212, 102, 62, 151, 26, 132, 61, 138, 47, 51, 59, 254, 132, 111, 190, 93, 221, 129, 61, 138, 184, 130, 190, 118, 117, 36, 62, 146, 71, 28, 62, 43, 133, 155, 61, 101, 48, 186, 61, 25, 118, 7, 61, 97, 135, 112, 61, 6, 238, 33, 190, 182, 222, 237, 189, 92, 191, 219, 62, 65, 166, 138, 61, 148, 247, 12, 190, 204, 162, 230, 61, 159, 255, 17, 190, 4, 190, 28, 190, 135, 42, 7, 190, 163, 107, 203, 189, 76, 168, 53, 62, 55, 255, 46, 62, 224, 21, 145, 62, 178, 34, 204, 61, 106, 127, 149, 189, 97, 176, 169, 62, 220, 77, 34, 62, 74, 226, 60, 190, 67, 207, 188, 188, 21, 93, 146, 62, 22, 72, 172, 188, 176, 124, 102, 62, 68, 65, 166, 61, 128, 240, 110, 190, 215, 251, 67, 188, 207, 216, 137, 190, 252, 134, 185, 61, 106, 229, 113, 189, 52, 121, 151, 61, 185, 223, 166, 188, 147, 188, 255, 189, 69, 42, 169, 188, 18, 108, 254, 61, 18, 248, 35, 190, 216, 242, 45, 60, 17, 16, 215, 189, 148, 116, 136, 60, 21, 176, 107, 189, 219, 48, 251, 189, 153, 44, 37, 62, 196, 6, 235, 188, 61, 97, 110, 61, 106, 147, 20, 190, 1, 83, 5, 190, 218, 114, 246, 189, 158, 5, 42, 190, 162, 22, 69, 60, 195, 229, 100, 189, 114, 170, 38, 62, 219, 87, 108, 61, 184, 142, 136, 188, 89, 163, 27, 190, 107, 179, 159, 189, 134, 23, 250, 60, 31, 55, 187, 61, 47, 0, 28, 190, 219, 104, 159, 188, 1, 158, 93, 188, 201, 189, 132, 187, 93, 42, 27, 62, 180, 248, 67, 190, 128, 230, 69, 62, 158, 191, 75, 189, 92, 95, 203, 61, 42, 63, 65, 190, 87, 109, 21, 61, 125, 204, 15, 62, 55, 134, 129, 189, 43, 110, 125, 190, 65, 195, 104, 62, 54, 155, 6, 189, 91, 22, 62, 190, 70, 77, 135, 190, 68, 255, 34, 62, 133, 187, 55, 62, 181, 131, 171, 190, 11, 87, 5, 62, 107, 114, 174, 189, 246, 186, 85, 190, 235, 116, 131, 61, 113, 101, 197, 61, 199, 189, 151, 190, 97, 207, 33, 62, 176, 209, 136, 62, 120, 252, 234, 59, 218, 122, 144, 61, 119, 5, 194, 61, 70, 65, 210, 189, 137, 2, 11, 191, 254, 0, 228, 190, 70, 253, 16, 187, 113, 70, 75, 190, 44, 24, 51, 190, 135, 189, 36, 62, 159, 11, 101, 62, 86, 145, 10, 189, 220, 105, 20, 189, 241, 182, 152, 189, 58, 187, 180, 61, 166, 150, 12, 190, 37, 19, 58, 189, 216, 45, 87, 60, 249, 125, 115, 62, 204, 25, 199, 188, 72, 87, 216, 189, 105, 170, 140, 62, 108, 181, 163, 61, 238, 239, 221, 189, 195, 102, 49, 62, 80, 114, 176, 61, 71, 178, 207, 61, 81, 161, 244, 189, 186, 86, 108, 62, 116, 127, 251, 189, 186, 31, 187, 61, 253, 100, 80, 62, 59, 91, 232, 61, 163, 219, 228, 61, 23, 134, 129, 189, 237, 143, 160, 189, 13, 216, 53, 62, 142, 195, 63, 61, 152, 152, 229, 189, 113, 100, 153, 188, 63, 126, 33, 190, 31, 147, 178, 61, 135, 178, 182, 62, 22, 113, 70, 62, 150, 169, 120, 189, 212, 171, 107, 60, 200, 118, 30, 189, 78, 208, 234, 190, 247, 126, 147, 189, 202, 133, 238, 189, 250, 3, 248, 60, 15, 153, 234, 60, 255, 74, 46, 61, 139, 113, 15, 62, 52, 14, 138, 190, 97, 124, 79, 190, 193, 199, 26, 62, 243, 96, 3, 188, 72, 88, 103, 190, 76, 211, 132, 187, 88, 50, 160, 61, 91, 174, 106, 189, 28, 158, 136, 62, 139, 253, 222, 189, 72, 219, 38, 62, 237, 131, 41, 62, 223, 70, 23, 62, 109, 204, 215, 60, 94, 246, 4, 190, 48, 183, 81, 190, 70, 250, 191, 61, 158, 137, 86, 62, 12, 51, 39, 190, 6, 141, 134, 190, 141, 23, 1, 62, 86, 46, 32, 189, 0, 251, 19, 62, 127, 60, 168, 61, 178, 31, 40, 190, 40, 112, 80, 190, 43, 68, 107, 60, 224, 186, 64, 190, 121, 113, 133, 62, 13, 184, 29, 190, 144, 52, 140, 61, 57, 154, 55, 187, 31, 77, 3, 190, 214, 239, 93, 61, 192, 223, 209, 189, 109, 218, 23, 190, 205, 231, 151, 189, 91, 39, 220, 189, 221, 94, 10, 62, 106, 26, 70, 189, 242, 140, 139, 61, 174, 95, 120, 190, 4, 178, 166, 60, 43, 247, 185, 190, 86, 82, 114, 190, 185, 64, 203, 189, 94, 124, 67, 62, 198, 143, 241, 61, 41, 124, 23, 62, 72, 77, 129, 61, 133, 93, 193, 188, 191, 186, 214, 58, 132, 223, 205, 61, 61, 20, 113, 60, 169, 234, 64, 62, 21, 191, 31, 62, 255, 39, 158, 61, 186, 224, 122, 190, 158, 206, 166, 61, 227, 95, 140, 190, 162, 185, 246, 189, 253, 23, 192, 61, 242, 183, 133, 190, 232, 136, 13, 62, 54, 22, 6, 189, 217, 222, 131, 190, 228, 194, 199, 61, 250, 177, 15, 61, 3, 29, 156, 61, 150, 78, 23, 62, 156, 141, 58, 190, 209, 242, 215, 61, 170, 189, 101, 61, 175, 155, 66, 189, 114, 66, 217, 189, 152, 232, 60, 62, 248, 190, 205, 189, 248, 230, 197, 61, 199, 151, 232, 189, 147, 253, 214, 62, 171, 28, 51, 61, 9, 178, 146, 190, 103, 101, 229, 190, 164, 230, 186, 189, 52, 8, 147, 60, 199, 164, 173, 61, 170, 225, 166, 62, 68, 10, 169, 62, 79, 237, 91, 191, 146, 122, 84, 190, 14, 209, 189, 61, 19, 169, 0, 190, 176, 119, 4, 62, 164, 192, 170, 62, 36, 147, 243, 61, 200, 221, 190, 61, 90, 165, 51, 190, 73, 191, 75, 61, 126, 191, 87, 61, 30, 199, 34, 191, 234, 40, 101, 61, 194, 201, 196, 190, 212, 188, 54, 62, 14, 109, 208, 61, 179, 96, 12, 190, 119, 20, 12, 61, 111, 138, 229, 188, 246, 133, 84, 191, 130, 166, 24, 190, 242, 169, 140, 189, 247, 192, 154, 62, 127, 109, 234, 62, 88, 209, 37, 190, 103, 226, 105, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 101, 157, 62, 130, 7, 1, 62, 226, 42, 169, 61, 107, 169, 45, 190, 98, 48, 190, 59, 80, 160, 8, 62, 185, 102, 243, 61, 224, 116, 50, 190, 87, 39, 173, 189, 7, 163, 190, 189, 218, 89, 4, 190, 195, 96, 128, 62, 239, 51, 52, 62, 62, 59, 36, 190, 142, 148, 98, 62, 157, 193, 96, 189, 132, 197, 138, 60, 23, 47, 29, 62, 150, 116, 201, 189, 29, 140, 128, 62, 207, 114, 64, 190, 25, 63, 15, 62, 57, 166, 187, 61, 138, 156, 19, 62, 76, 98, 102, 61, 215, 140, 12, 190, 216, 154, 73, 62, 177, 203, 27, 61, 172, 169, 249, 61, 121, 100, 150, 189, 215, 253, 6, 189, 143, 78, 3, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 88, 187, 190, 90, 59, 97, 190, 223, 191, 170, 62, 226, 49, 192, 61, 128, 42, 132, 61, 189, 246, 120, 190, 140, 149, 214, 190, 180, 141, 248, 189, 198, 75, 44, 191, 50, 190, 153, 187, 10, 206, 218, 60, 150, 186, 239, 190, 217, 205, 50, 191, 96, 236, 50, 190, 109, 168, 216, 188, 243, 27, 75, 191, 237, 253, 136, 189, 130, 126, 101, 62, 206, 44, 184, 190, 38, 47, 42, 190, 202, 54, 140, 62, 96, 217, 30, 62, 96, 84, 39, 62, 36, 144, 57, 62, 66, 81, 151, 62, 150, 13, 24, 189, 92, 65, 213, 62, 42, 133, 118, 61, 237, 93, 80, 62, 208, 44, 44, 190, 49, 217, 82, 190, 198, 53, 19, 191, 67, 61, 6, 190, 255, 248, 20, 62, 23, 170, 188, 61, 179, 107, 37, 190, 31, 84, 72, 190, 166, 232, 157, 59, 161, 11, 42, 190, 166, 49, 15, 190, 123, 234, 65, 62, 244, 4, 189, 189, 73, 47, 5, 190, 210, 37, 107, 61, 91, 41, 159, 61, 11, 229, 64, 61, 130, 214, 21, 190, 255, 49, 139, 61, 64, 130, 106, 61, 47, 242, 175, 60, 253, 211, 238, 61, 226, 233, 85, 190, 215, 154, 68, 62, 11, 190, 12, 190, 108, 78, 153, 57, 198, 216, 144, 189, 193, 27, 247, 189, 17, 234, 46, 61, 10, 111, 75, 189, 219, 117, 40, 190, 137, 66, 238, 187, 159, 145, 241, 61, 206, 161, 105, 61, 42, 144, 93, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 225, 77, 62, 225, 72, 41, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {133, 193, 72, 63, 210, 160, 150, 191, 209, 56, 73, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {11, 182, 20, 64, 123, 42, 22, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0087/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}