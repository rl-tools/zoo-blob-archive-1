// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 56, 26, 63, 71, 248, 155, 190, 221, 112, 134, 190, 16, 143, 76, 190, 153, 210, 149, 190, 210, 16, 211, 62, 166, 92, 223, 190, 81, 219, 162, 62, 166, 59, 236, 61, 109, 9, 200, 190, 116, 208, 210, 63, 1, 59, 164, 62, 86, 61, 54, 63, 77, 170, 136, 63, 9, 171, 223, 62, 100, 126, 60, 63, 84, 248, 133, 63, 239, 132, 115, 62, 75, 211, 60, 62, 101, 92, 11, 191, 226, 37, 130, 62, 21, 159, 37, 63, 210, 75, 149, 191, 7, 202, 209, 190, 12, 88, 58, 63, 67, 134, 51, 63, 130, 227, 226, 62, 115, 40, 58, 63, 174, 32, 70, 191, 51, 5, 11, 190, 203, 88, 137, 61, 104, 37, 48, 62, 84, 233, 141, 190, 45, 236, 228, 62, 202, 226, 187, 62, 2, 111, 222, 62, 101, 143, 26, 190, 177, 67, 148, 191, 62, 160, 220, 190, 228, 71, 222, 190, 190, 48, 15, 62, 11, 76, 182, 61, 245, 188, 131, 63, 66, 179, 123, 191, 43, 159, 47, 190, 116, 60, 118, 62, 176, 219, 53, 191, 23, 43, 246, 190, 253, 179, 192, 62, 17, 57, 110, 63, 105, 129, 224, 62, 106, 118, 119, 189, 161, 33, 188, 190, 178, 20, 66, 63, 82, 240, 248, 62, 187, 60, 201, 61, 94, 80, 239, 62, 95, 211, 178, 62, 17, 255, 159, 190, 230, 211, 43, 63, 251, 0, 102, 191, 251, 134, 37, 191, 18, 69, 143, 60, 188, 231, 14, 63, 18, 142, 67, 63, 200, 41, 175, 62, 253, 9, 143, 191, 88, 92, 218, 189, 183, 76, 13, 62, 224, 149, 6, 190, 230, 59, 150, 191, 56, 146, 185, 189, 104, 106, 49, 191, 51, 31, 80, 189, 0, 178, 53, 190, 70, 207, 13, 191, 180, 157, 145, 63, 6, 194, 205, 62, 25, 1, 183, 190, 16, 38, 171, 63, 177, 233, 216, 62, 190, 43, 78, 62, 176, 224, 61, 191, 220, 182, 222, 62, 98, 21, 180, 190, 167, 55, 62, 63, 215, 62, 0, 191, 251, 231, 109, 63, 143, 45, 32, 63, 194, 224, 84, 62, 140, 157, 182, 190, 104, 55, 115, 190, 135, 217, 62, 188, 112, 225, 138, 60, 68, 224, 161, 190, 239, 248, 234, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 243, 66, 191, 132, 244, 193, 62, 31, 47, 37, 63, 20, 188, 138, 190, 239, 188, 243, 190, 115, 253, 162, 62, 34, 194, 43, 189, 215, 101, 191, 189, 146, 151, 91, 191, 173, 114, 217, 61, 144, 127, 197, 62, 48, 110, 65, 190, 93, 195, 149, 62, 235, 34, 39, 63, 159, 64, 187, 62, 38, 222, 63, 190, 123, 124, 189, 62, 181, 204, 255, 190, 196, 73, 138, 190, 204, 197, 67, 188, 169, 67, 47, 63, 34, 156, 190, 190, 84, 236, 65, 63, 165, 123, 45, 63, 229, 156, 155, 190, 136, 170, 157, 190, 40, 16, 88, 189, 71, 143, 82, 191, 136, 189, 191, 62, 142, 152, 78, 190, 24, 80, 27, 191, 167, 113, 140, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 202, 109, 190, 29, 209, 45, 190, 228, 135, 26, 61, 255, 229, 24, 191, 162, 247, 74, 62, 46, 91, 154, 62, 16, 38, 41, 189, 3, 7, 148, 61, 191, 245, 215, 60, 192, 77, 8, 188, 182, 167, 11, 61, 5, 118, 36, 62, 69, 67, 45, 189, 162, 112, 129, 62, 45, 41, 5, 190, 223, 117, 101, 60, 191, 237, 25, 62, 245, 6, 89, 190, 7, 19, 156, 61, 25, 225, 27, 190, 34, 77, 140, 62, 151, 157, 186, 61, 74, 73, 162, 59, 65, 216, 169, 61, 90, 197, 98, 190, 138, 129, 31, 191, 1, 150, 183, 190, 98, 110, 133, 190, 35, 44, 238, 60, 141, 243, 190, 62, 63, 189, 102, 61, 184, 180, 219, 61, 160, 118, 40, 190, 68, 82, 19, 62, 145, 112, 150, 60, 62, 226, 214, 189, 170, 224, 230, 61, 206, 65, 26, 188, 72, 152, 187, 61, 171, 12, 14, 190, 27, 249, 40, 62, 90, 154, 196, 61, 35, 82, 55, 190, 234, 211, 143, 189, 186, 168, 232, 189, 2, 91, 17, 190, 63, 202, 55, 190, 117, 5, 39, 62, 69, 89, 53, 62, 42, 215, 142, 189, 168, 129, 225, 61, 70, 107, 17, 62, 62, 210, 23, 190, 121, 146, 95, 62, 193, 168, 132, 60, 229, 107, 164, 61, 224, 162, 10, 190, 1, 92, 156, 62, 40, 154, 243, 189, 199, 87, 68, 62, 190, 220, 105, 60, 32, 80, 240, 62, 112, 186, 210, 61, 121, 53, 94, 62, 182, 158, 144, 62, 171, 250, 153, 62, 101, 245, 21, 62, 164, 198, 57, 63, 216, 220, 8, 191, 149, 40, 84, 189, 218, 59, 96, 62, 205, 159, 140, 62, 225, 142, 182, 190, 191, 157, 199, 62, 69, 184, 175, 189, 230, 255, 208, 190, 171, 134, 173, 190, 66, 46, 79, 189, 238, 139, 192, 62, 64, 47, 106, 60, 76, 195, 96, 60, 2, 181, 250, 61, 246, 90, 225, 190, 228, 239, 55, 62, 25, 205, 227, 62, 136, 150, 206, 190, 44, 21, 90, 62, 98, 249, 251, 61, 36, 70, 31, 62, 83, 94, 182, 62, 26, 238, 6, 62, 93, 199, 178, 190, 219, 37, 49, 190, 18, 239, 175, 190, 208, 194, 52, 190, 194, 121, 170, 60, 157, 37, 176, 60, 42, 64, 25, 61, 52, 61, 15, 190, 107, 149, 177, 189, 99, 170, 234, 61, 52, 250, 186, 189, 6, 65, 164, 60, 148, 226, 29, 190, 73, 97, 22, 62, 239, 26, 177, 189, 41, 247, 205, 61, 183, 138, 189, 189, 138, 149, 209, 60, 40, 186, 20, 61, 77, 9, 243, 189, 149, 168, 47, 62, 56, 134, 20, 190, 108, 37, 214, 60, 165, 42, 7, 62, 164, 240, 169, 187, 249, 66, 57, 189, 174, 96, 227, 189, 118, 57, 72, 190, 48, 170, 58, 190, 138, 29, 33, 190, 172, 229, 83, 190, 144, 253, 49, 190, 171, 249, 138, 61, 20, 123, 31, 190, 131, 41, 23, 62, 199, 49, 30, 190, 165, 251, 23, 61, 78, 137, 28, 62, 198, 38, 171, 190, 209, 37, 222, 190, 47, 150, 72, 191, 88, 58, 121, 190, 154, 168, 13, 62, 217, 92, 145, 190, 140, 45, 143, 189, 228, 243, 65, 191, 47, 42, 91, 62, 91, 11, 26, 62, 61, 243, 189, 190, 58, 35, 202, 61, 225, 9, 241, 188, 85, 143, 182, 62, 146, 123, 6, 188, 91, 36, 111, 186, 203, 241, 154, 190, 35, 254, 112, 190, 33, 155, 0, 191, 25, 67, 136, 189, 202, 117, 215, 189, 242, 17, 83, 191, 126, 9, 207, 189, 91, 89, 178, 190, 210, 136, 162, 190, 39, 209, 35, 191, 100, 230, 129, 61, 27, 124, 0, 62, 59, 5, 145, 62, 167, 220, 13, 62, 72, 176, 53, 62, 81, 143, 63, 62, 92, 129, 131, 62, 229, 91, 227, 190, 24, 32, 205, 191, 176, 75, 213, 189, 219, 205, 2, 62, 183, 243, 242, 61, 220, 50, 37, 190, 69, 131, 57, 61, 7, 206, 119, 188, 17, 227, 92, 189, 103, 179, 141, 61, 251, 41, 89, 61, 32, 47, 252, 190, 43, 224, 160, 62, 229, 99, 232, 189, 19, 24, 86, 189, 72, 154, 211, 188, 154, 66, 234, 61, 81, 228, 109, 62, 17, 205, 34, 191, 215, 253, 206, 61, 219, 206, 2, 191, 185, 235, 160, 188, 43, 20, 58, 190, 104, 140, 34, 190, 129, 180, 107, 190, 150, 132, 102, 190, 54, 152, 183, 190, 150, 175, 171, 62, 124, 17, 17, 62, 17, 103, 171, 189, 158, 130, 151, 190, 131, 183, 246, 61, 212, 198, 99, 62, 111, 171, 128, 191, 129, 30, 186, 190, 53, 250, 250, 61, 117, 149, 186, 189, 193, 102, 207, 60, 85, 227, 6, 191, 253, 222, 14, 190, 52, 56, 45, 62, 101, 151, 1, 191, 12, 227, 195, 61, 207, 133, 36, 61, 123, 6, 54, 190, 105, 201, 218, 189, 63, 238, 132, 191, 181, 161, 140, 62, 160, 156, 1, 191, 17, 162, 53, 62, 236, 251, 190, 62, 166, 21, 230, 190, 193, 37, 236, 60, 231, 100, 205, 62, 253, 21, 73, 190, 97, 186, 112, 191, 62, 203, 194, 191, 236, 30, 203, 62, 109, 219, 28, 189, 217, 189, 137, 61, 43, 229, 178, 189, 70, 197, 66, 61, 30, 63, 43, 62, 207, 123, 133, 189, 255, 201, 5, 190, 144, 232, 237, 60, 26, 74, 31, 190, 78, 239, 195, 61, 196, 71, 92, 188, 52, 178, 63, 189, 235, 224, 153, 61, 187, 168, 166, 189, 214, 50, 26, 190, 163, 151, 14, 190, 126, 152, 18, 62, 248, 131, 32, 62, 70, 50, 0, 190, 184, 211, 208, 189, 176, 252, 152, 189, 129, 150, 219, 188, 14, 206, 178, 189, 214, 18, 253, 189, 101, 119, 177, 189, 90, 233, 202, 189, 244, 132, 12, 61, 115, 209, 103, 189, 224, 240, 29, 190, 173, 247, 53, 189, 86, 245, 46, 61, 144, 47, 41, 190, 36, 149, 87, 189, 1, 6, 92, 187, 78, 2, 18, 62, 24, 112, 150, 61, 102, 91, 194, 62, 226, 54, 157, 61, 71, 248, 31, 61, 65, 215, 136, 62, 57, 240, 216, 190, 150, 169, 60, 191, 29, 57, 63, 62, 200, 209, 5, 63, 53, 205, 56, 191, 229, 16, 232, 62, 190, 181, 14, 190, 186, 160, 5, 191, 13, 189, 132, 62, 45, 220, 65, 62, 59, 150, 65, 62, 124, 140, 131, 62, 237, 104, 154, 189, 45, 169, 80, 62, 108, 165, 42, 191, 120, 168, 13, 62, 219, 230, 133, 62, 125, 149, 18, 191, 162, 180, 138, 62, 92, 112, 20, 62, 97, 37, 0, 191, 92, 124, 201, 62, 148, 102, 69, 188, 55, 224, 200, 190, 136, 90, 213, 190, 251, 122, 195, 191, 69, 92, 155, 61, 125, 219, 15, 62, 149, 16, 244, 189, 98, 28, 117, 189, 82, 77, 240, 189, 41, 54, 181, 61, 123, 24, 11, 62, 16, 109, 17, 190, 148, 184, 30, 190, 173, 92, 254, 61, 245, 163, 104, 61, 5, 34, 254, 189, 150, 223, 96, 189, 112, 138, 35, 60, 100, 74, 199, 189, 100, 15, 36, 190, 169, 108, 207, 61, 191, 191, 42, 190, 152, 166, 174, 61, 126, 28, 251, 189, 66, 12, 24, 190, 7, 233, 180, 61, 227, 174, 23, 61, 1, 223, 140, 59, 184, 209, 7, 62, 115, 175, 29, 190, 239, 192, 53, 189, 100, 48, 51, 190, 90, 179, 17, 61, 90, 37, 24, 62, 165, 52, 3, 189, 221, 243, 180, 61, 61, 149, 169, 61, 186, 85, 212, 61, 50, 115, 101, 189, 159, 172, 139, 60, 17, 16, 47, 190, 25, 162, 8, 60, 199, 61, 29, 62, 197, 85, 255, 189, 170, 93, 190, 61, 6, 64, 218, 189, 147, 62, 186, 60, 84, 11, 175, 189, 201, 123, 169, 188, 95, 196, 51, 190, 114, 149, 4, 190, 2, 167, 74, 60, 59, 68, 165, 187, 46, 102, 176, 61, 22, 38, 50, 190, 162, 92, 173, 189, 150, 91, 46, 187, 22, 36, 43, 190, 131, 152, 249, 60, 93, 155, 9, 62, 193, 176, 95, 61, 158, 67, 28, 61, 240, 73, 27, 190, 169, 250, 21, 187, 26, 105, 152, 61, 250, 18, 221, 189, 141, 18, 48, 190, 241, 15, 89, 61, 18, 207, 131, 61, 161, 152, 51, 62, 222, 199, 68, 191, 132, 59, 46, 62, 24, 85, 152, 61, 102, 198, 170, 191, 85, 156, 42, 62, 158, 206, 112, 62, 85, 191, 154, 58, 135, 136, 172, 190, 0, 75, 133, 60, 239, 131, 88, 190, 206, 29, 244, 61, 134, 243, 251, 61, 176, 103, 72, 61, 136, 170, 224, 61, 83, 215, 78, 190, 156, 41, 126, 190, 230, 230, 36, 190, 176, 40, 187, 190, 181, 169, 133, 62, 229, 186, 111, 189, 33, 47, 207, 61, 90, 201, 41, 62, 252, 208, 219, 189, 12, 135, 30, 62, 97, 18, 140, 190, 147, 182, 33, 191, 3, 164, 11, 191, 99, 178, 78, 189, 11, 183, 90, 62, 69, 250, 250, 62, 115, 19, 17, 62, 39, 193, 206, 60, 133, 171, 219, 60, 2, 254, 72, 62, 45, 159, 73, 62, 107, 245, 25, 191, 131, 45, 251, 61, 215, 77, 81, 190, 37, 43, 43, 191, 203, 180, 125, 190, 35, 40, 22, 190, 3, 40, 147, 189, 202, 232, 146, 190, 244, 134, 121, 190, 30, 167, 49, 190, 60, 91, 154, 189, 116, 30, 39, 191, 20, 27, 174, 190, 70, 177, 118, 191, 8, 176, 36, 191, 223, 222, 67, 190, 248, 229, 142, 190, 216, 38, 22, 62, 76, 167, 72, 61, 99, 46, 169, 61, 236, 56, 151, 61, 141, 58, 112, 62, 205, 113, 72, 191, 55, 5, 90, 191, 25, 140, 78, 190, 239, 112, 144, 190, 216, 33, 142, 190, 72, 124, 248, 61, 230, 236, 188, 190, 154, 204, 90, 189, 48, 21, 247, 189, 39, 117, 136, 189, 190, 52, 17, 190, 42, 27, 201, 60, 26, 82, 76, 185, 237, 57, 190, 189, 14, 210, 37, 190, 107, 223, 224, 60, 139, 58, 247, 188, 115, 244, 0, 62, 214, 208, 52, 190, 33, 188, 144, 188, 6, 104, 42, 61, 213, 135, 215, 189, 146, 86, 136, 61, 167, 128, 6, 190, 227, 199, 108, 188, 52, 139, 50, 187, 147, 197, 49, 62, 211, 145, 189, 189, 251, 77, 156, 189, 12, 23, 236, 188, 92, 16, 43, 187, 152, 236, 240, 188, 35, 27, 172, 188, 104, 250, 206, 61, 182, 236, 213, 61, 121, 61, 40, 190, 149, 160, 179, 189, 35, 178, 30, 190, 212, 234, 120, 189, 40, 216, 185, 190, 11, 122, 182, 189, 3, 80, 210, 61, 81, 219, 226, 190, 85, 157, 128, 190, 83, 41, 25, 62, 150, 95, 236, 188, 217, 239, 41, 189, 104, 204, 200, 189, 191, 203, 30, 62, 86, 151, 29, 62, 191, 14, 95, 190, 89, 245, 177, 61, 129, 172, 27, 61, 77, 71, 92, 62, 215, 109, 193, 61, 166, 145, 19, 190, 34, 84, 152, 190, 172, 148, 0, 190, 100, 17, 32, 190, 48, 170, 194, 60, 222, 69, 58, 190, 210, 71, 156, 190, 187, 72, 40, 62, 110, 143, 242, 190, 226, 109, 177, 189, 21, 70, 66, 190, 132, 156, 123, 190, 241, 73, 128, 188, 134, 236, 20, 62, 241, 147, 50, 62, 42, 46, 8, 190, 103, 190, 75, 191, 122, 17, 140, 61, 31, 98, 12, 62, 191, 235, 100, 191, 147, 190, 152, 61, 225, 121, 245, 62, 116, 76, 108, 190, 99, 176, 122, 190, 223, 206, 242, 62, 140, 78, 172, 189, 126, 1, 90, 62, 218, 230, 57, 189, 194, 19, 109, 62, 194, 156, 33, 62, 85, 203, 113, 190, 93, 1, 79, 190, 166, 205, 0, 191, 95, 86, 218, 190, 225, 155, 4, 61, 62, 114, 36, 191, 118, 136, 183, 62, 63, 186, 48, 61, 97, 214, 171, 61, 252, 181, 135, 62, 244, 117, 73, 61, 170, 223, 204, 191, 252, 158, 152, 191, 203, 242, 3, 62, 6, 126, 214, 61, 122, 67, 61, 62, 103, 146, 131, 61, 160, 202, 55, 189, 216, 39, 148, 189, 97, 204, 170, 189, 4, 157, 104, 190, 211, 41, 196, 190, 188, 180, 73, 61, 47, 56, 63, 62, 106, 175, 244, 61, 55, 253, 160, 190, 53, 40, 163, 62, 101, 228, 153, 190, 188, 65, 48, 62, 138, 152, 17, 62, 229, 246, 86, 190, 234, 248, 200, 190, 172, 17, 110, 190, 80, 130, 137, 61, 221, 76, 247, 188, 221, 153, 44, 62, 50, 30, 28, 186, 172, 207, 226, 61, 183, 150, 210, 190, 33, 247, 18, 62, 22, 86, 215, 189, 226, 93, 4, 190, 170, 134, 40, 191, 94, 212, 193, 61, 48, 191, 216, 60, 23, 65, 103, 62, 185, 178, 23, 62, 68, 50, 75, 63, 37, 131, 32, 62, 205, 120, 99, 62, 193, 190, 71, 62, 96, 227, 207, 61, 40, 8, 10, 58, 92, 19, 182, 188, 145, 140, 82, 191, 4, 190, 77, 190, 40, 8, 214, 62, 185, 8, 75, 62, 0, 48, 26, 191, 80, 72, 46, 62, 94, 239, 241, 61, 146, 194, 54, 190, 243, 24, 37, 189, 30, 200, 211, 189, 51, 60, 16, 63, 136, 4, 204, 61, 30, 213, 174, 189, 92, 189, 243, 60, 133, 254, 138, 190, 22, 76, 165, 62, 145, 195, 160, 62, 181, 149, 167, 190, 243, 192, 181, 60, 82, 19, 137, 62, 23, 52, 142, 62, 252, 254, 65, 189, 194, 208, 189, 189, 105, 113, 236, 189, 243, 159, 184, 189, 85, 130, 208, 190, 82, 57, 155, 189, 250, 123, 3, 62, 201, 88, 149, 190, 75, 7, 182, 188, 52, 88, 20, 190, 227, 82, 5, 62, 120, 201, 90, 186, 131, 165, 151, 190, 249, 23, 131, 62, 143, 65, 169, 60, 166, 135, 2, 188, 66, 250, 19, 62, 59, 239, 13, 190, 52, 13, 103, 60, 137, 200, 76, 62, 13, 207, 50, 61, 166, 17, 161, 62, 213, 154, 134, 188, 241, 193, 177, 60, 189, 37, 151, 62, 36, 54, 129, 61, 157, 187, 132, 62, 63, 239, 85, 62, 10, 92, 243, 189, 241, 15, 52, 187, 191, 231, 146, 62, 28, 0, 41, 191, 191, 173, 169, 61, 54, 158, 202, 60, 245, 88, 171, 60, 76, 29, 20, 191, 172, 148, 6, 190, 10, 205, 206, 60, 27, 210, 4, 190, 202, 197, 86, 62, 186, 185, 81, 62, 199, 238, 147, 61, 228, 86, 103, 61, 97, 100, 120, 188, 253, 14, 34, 61, 173, 196, 200, 61, 196, 69, 10, 190, 29, 218, 50, 62, 181, 19, 86, 190, 140, 113, 158, 190, 250, 92, 140, 61, 90, 52, 121, 190, 77, 40, 202, 189, 186, 56, 146, 62, 54, 106, 8, 191, 58, 197, 45, 62, 75, 222, 106, 62, 188, 118, 251, 189, 121, 219, 82, 62, 188, 170, 54, 189, 112, 177, 106, 189, 205, 72, 93, 61, 40, 92, 23, 62, 50, 190, 192, 190, 107, 174, 171, 189, 43, 9, 216, 189, 182, 203, 42, 189, 97, 0, 130, 190, 93, 167, 57, 61, 180, 184, 179, 61, 26, 194, 43, 191, 176, 119, 244, 62, 24, 80, 220, 189, 22, 203, 51, 191, 232, 179, 173, 60, 210, 215, 208, 60, 128, 77, 187, 60, 9, 101, 66, 190, 63, 253, 185, 62, 47, 255, 98, 190, 88, 147, 146, 62, 54, 242, 45, 62, 152, 178, 160, 60, 183, 112, 31, 62, 123, 46, 233, 190, 238, 201, 189, 62, 172, 0, 66, 62, 174, 54, 131, 189, 154, 7, 254, 188, 34, 7, 244, 58, 176, 19, 183, 189, 128, 55, 44, 191, 244, 36, 73, 61, 179, 11, 156, 191, 111, 67, 72, 189, 151, 77, 173, 60, 103, 7, 86, 61, 244, 42, 28, 59, 91, 7, 110, 61, 44, 10, 81, 189, 76, 26, 56, 190, 76, 202, 6, 189, 187, 34, 51, 62, 42, 122, 255, 61, 114, 63, 104, 62, 244, 177, 8, 189, 88, 41, 84, 62, 85, 14, 80, 190, 79, 107, 136, 189, 22, 70, 205, 61, 124, 18, 143, 61, 99, 85, 125, 190, 60, 93, 82, 62, 80, 176, 156, 62, 221, 116, 88, 61, 18, 63, 189, 189, 112, 147, 92, 62, 110, 64, 188, 62, 33, 223, 218, 189, 77, 223, 166, 61, 133, 121, 37, 61, 33, 222, 97, 188, 118, 241, 50, 62, 87, 155, 213, 61, 156, 212, 140, 190, 210, 246, 252, 188, 253, 136, 141, 62, 6, 195, 110, 60, 65, 21, 9, 62, 117, 26, 78, 189, 72, 148, 210, 188, 172, 172, 93, 62, 18, 231, 87, 62, 56, 168, 48, 61, 108, 153, 7, 62, 194, 1, 65, 188, 47, 13, 160, 61, 225, 50, 103, 62, 143, 71, 163, 62, 155, 168, 207, 61, 114, 225, 164, 189, 168, 193, 171, 190, 18, 133, 98, 190, 210, 8, 167, 60, 164, 8, 53, 61, 240, 137, 138, 60, 118, 57, 55, 189, 254, 27, 43, 190, 88, 208, 158, 62, 233, 192, 98, 189, 83, 138, 227, 190, 33, 146, 68, 188, 41, 210, 194, 189, 66, 92, 68, 190, 45, 2, 131, 61, 165, 9, 179, 61, 162, 176, 118, 61, 162, 193, 247, 61, 6, 107, 157, 190, 91, 63, 61, 63, 139, 40, 197, 61, 197, 120, 75, 62, 1, 64, 61, 190, 121, 224, 46, 190, 124, 235, 242, 187, 51, 241, 9, 61, 54, 207, 20, 190, 141, 196, 87, 62, 32, 100, 91, 189, 25, 25, 110, 62, 44, 11, 166, 62, 149, 188, 98, 188, 136, 175, 191, 189, 187, 255, 57, 187, 144, 156, 59, 62, 97, 223, 166, 189, 121, 17, 34, 61, 67, 103, 225, 60, 203, 154, 148, 189, 157, 232, 206, 189, 167, 25, 170, 61, 166, 110, 255, 59, 33, 23, 154, 61, 206, 249, 160, 61, 209, 254, 156, 61, 76, 122, 56, 190, 222, 32, 3, 62, 205, 68, 2, 62, 138, 112, 185, 61, 117, 224, 113, 61, 27, 8, 135, 189, 162, 58, 123, 62, 49, 82, 28, 188, 242, 76, 28, 189, 234, 203, 147, 190, 204, 250, 135, 61, 94, 17, 166, 61, 118, 117, 36, 62, 156, 76, 210, 61, 74, 229, 69, 61, 251, 98, 140, 61, 187, 226, 47, 189, 157, 194, 47, 61, 72, 174, 130, 190, 39, 99, 248, 189, 63, 57, 156, 62, 106, 170, 247, 60, 81, 176, 143, 190, 168, 185, 32, 62, 141, 240, 55, 190, 246, 247, 43, 190, 32, 120, 180, 190, 212, 128, 62, 190, 21, 205, 81, 62, 149, 79, 176, 61, 6, 252, 118, 62, 82, 131, 141, 61, 176, 83, 166, 189, 219, 164, 152, 62, 107, 63, 21, 188, 135, 75, 136, 190, 86, 201, 46, 190, 9, 229, 44, 62, 4, 53, 147, 189, 237, 241, 30, 62, 3, 177, 137, 60, 92, 95, 147, 190, 21, 249, 205, 189, 128, 211, 230, 61, 252, 134, 185, 61, 233, 208, 26, 190, 52, 121, 151, 61, 185, 223, 166, 188, 147, 188, 255, 189, 69, 42, 169, 188, 18, 108, 254, 61, 18, 248, 35, 190, 216, 242, 45, 60, 17, 16, 215, 189, 148, 116, 136, 60, 21, 176, 107, 189, 219, 48, 251, 189, 153, 44, 37, 62, 196, 6, 235, 188, 61, 97, 110, 61, 106, 147, 20, 190, 1, 83, 5, 190, 218, 114, 246, 189, 158, 5, 42, 190, 162, 22, 69, 60, 195, 229, 100, 189, 114, 170, 38, 62, 219, 87, 108, 61, 184, 142, 136, 188, 89, 163, 27, 190, 107, 179, 159, 189, 134, 23, 250, 60, 31, 55, 187, 61, 47, 0, 28, 190, 219, 104, 159, 188, 1, 158, 93, 188, 201, 189, 132, 187, 93, 42, 27, 62, 82, 198, 209, 190, 123, 251, 119, 62, 248, 94, 169, 189, 71, 220, 16, 61, 251, 217, 12, 191, 88, 63, 1, 190, 128, 186, 59, 62, 118, 22, 156, 61, 167, 187, 23, 191, 124, 134, 226, 62, 114, 223, 65, 62, 131, 51, 125, 190, 175, 155, 210, 190, 24, 189, 58, 62, 166, 202, 197, 62, 121, 117, 35, 190, 57, 125, 4, 61, 98, 189, 147, 188, 49, 248, 87, 190, 112, 145, 190, 61, 144, 165, 139, 62, 20, 252, 23, 191, 16, 230, 106, 62, 52, 29, 205, 62, 66, 110, 24, 63, 26, 232, 25, 60, 15, 95, 109, 189, 115, 231, 67, 188, 158, 131, 177, 190, 169, 2, 31, 191, 70, 253, 16, 187, 109, 135, 2, 62, 82, 232, 80, 190, 35, 66, 30, 62, 41, 21, 87, 62, 43, 75, 167, 189, 229, 164, 142, 189, 144, 246, 132, 189, 228, 20, 62, 186, 224, 15, 20, 190, 126, 150, 140, 189, 207, 249, 187, 61, 203, 21, 163, 62, 171, 209, 221, 188, 178, 76, 44, 190, 54, 237, 137, 62, 17, 176, 203, 61, 249, 193, 3, 190, 30, 2, 34, 62, 4, 190, 203, 61, 31, 177, 225, 61, 53, 24, 7, 190, 83, 41, 65, 62, 247, 173, 22, 190, 78, 238, 82, 187, 210, 56, 89, 62, 197, 242, 33, 190, 196, 249, 209, 61, 159, 14, 187, 189, 103, 142, 164, 189, 236, 202, 94, 62, 179, 209, 134, 62, 152, 152, 229, 189, 106, 210, 20, 189, 43, 95, 130, 191, 149, 252, 4, 188, 32, 117, 230, 62, 53, 228, 94, 62, 137, 7, 199, 60, 161, 7, 64, 62, 139, 78, 135, 190, 31, 48, 87, 191, 20, 70, 230, 189, 13, 38, 102, 191, 76, 151, 148, 61, 22, 114, 26, 61, 82, 175, 62, 62, 136, 224, 91, 62, 233, 17, 126, 190, 92, 100, 155, 190, 215, 169, 64, 62, 217, 231, 9, 190, 178, 70, 133, 190, 174, 246, 188, 189, 252, 171, 88, 61, 68, 49, 73, 60, 100, 35, 132, 62, 66, 97, 74, 190, 241, 98, 242, 62, 245, 194, 174, 61, 59, 107, 30, 62, 87, 46, 36, 190, 153, 97, 167, 189, 58, 15, 178, 62, 70, 250, 191, 61, 44, 129, 192, 61, 134, 74, 94, 191, 10, 165, 241, 190, 221, 157, 170, 62, 219, 233, 139, 189, 152, 107, 156, 59, 167, 91, 0, 63, 85, 203, 164, 190, 230, 47, 1, 191, 173, 133, 19, 191, 233, 170, 129, 190, 26, 211, 138, 62, 209, 250, 140, 190, 69, 41, 33, 190, 36, 244, 240, 61, 21, 253, 51, 190, 216, 215, 43, 190, 221, 115, 8, 188, 115, 213, 154, 190, 206, 141, 167, 190, 51, 56, 65, 190, 82, 124, 85, 61, 74, 224, 91, 190, 121, 102, 187, 61, 206, 43, 59, 191, 33, 200, 154, 190, 174, 247, 142, 190, 0, 213, 182, 190, 184, 236, 229, 189, 78, 120, 73, 62, 167, 199, 252, 62, 41, 124, 23, 62, 75, 177, 201, 188, 133, 93, 193, 188, 27, 93, 99, 189, 154, 51, 169, 61, 143, 98, 142, 61, 251, 141, 42, 62, 55, 0, 79, 188, 59, 70, 207, 61, 27, 61, 180, 190, 157, 154, 63, 62, 52, 31, 222, 190, 47, 85, 173, 190, 132, 144, 53, 61, 12, 95, 41, 191, 141, 30, 188, 61, 139, 51, 130, 190, 229, 93, 202, 190, 47, 52, 34, 61, 254, 46, 199, 60, 207, 85, 41, 61, 55, 125, 230, 61, 141, 162, 89, 190, 248, 234, 171, 61, 124, 26, 254, 61, 242, 113, 87, 190, 104, 227, 47, 62, 205, 126, 116, 62, 151, 121, 50, 189, 27, 18, 1, 62, 159, 98, 0, 62, 75, 68, 20, 189, 171, 28, 51, 61, 88, 253, 210, 190, 55, 58, 89, 191, 208, 142, 98, 188, 7, 86, 149, 61, 107, 226, 228, 188, 113, 161, 185, 62, 14, 12, 226, 62, 73, 221, 132, 190, 169, 227, 133, 190, 220, 106, 249, 61, 149, 143, 26, 190, 177, 108, 191, 61, 168, 2, 210, 62, 88, 97, 91, 61, 238, 221, 24, 62, 180, 42, 126, 190, 121, 61, 132, 188, 248, 135, 213, 61, 46, 231, 22, 191, 173, 212, 2, 62, 248, 58, 70, 190, 201, 162, 59, 62, 34, 126, 16, 62, 141, 226, 31, 190, 236, 54, 76, 62, 227, 125, 141, 190, 253, 45, 86, 191, 227, 248, 96, 190, 176, 23, 119, 190, 219, 217, 137, 62, 137, 254, 246, 62, 88, 209, 37, 190, 87, 74, 133, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 27, 188, 62, 45, 34, 249, 60, 217, 3, 98, 62, 37, 11, 71, 190, 151, 126, 171, 61, 106, 55, 194, 186, 217, 183, 238, 61, 224, 116, 50, 190, 121, 226, 246, 60, 218, 163, 192, 189, 218, 89, 4, 190, 90, 129, 150, 62, 129, 223, 103, 61, 62, 59, 36, 190, 127, 68, 117, 62, 192, 107, 129, 61, 165, 31, 43, 190, 125, 191, 102, 62, 247, 35, 220, 189, 53, 248, 60, 62, 163, 251, 122, 190, 116, 92, 95, 62, 85, 31, 34, 62, 132, 241, 69, 62, 61, 248, 55, 61, 215, 140, 12, 190, 10, 205, 147, 62, 228, 106, 230, 61, 213, 156, 135, 62, 128, 114, 141, 61, 32, 208, 129, 190, 134, 92, 87, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 59, 181, 190, 247, 160, 57, 190, 225, 158, 48, 63, 100, 253, 12, 62, 1, 147, 40, 62, 74, 162, 226, 190, 121, 23, 78, 191, 180, 141, 248, 189, 100, 187, 172, 191, 226, 186, 152, 187, 10, 206, 218, 60, 230, 97, 72, 191, 155, 207, 82, 191, 96, 236, 50, 190, 56, 25, 192, 189, 138, 70, 140, 191, 81, 134, 176, 190, 77, 146, 22, 63, 105, 215, 200, 190, 167, 59, 4, 190, 66, 55, 45, 63, 104, 122, 214, 61, 228, 192, 69, 62, 198, 8, 167, 61, 254, 151, 93, 62, 150, 13, 24, 189, 211, 27, 111, 63, 12, 60, 237, 60, 191, 78, 173, 62, 42, 158, 73, 191, 169, 33, 95, 190, 182, 79, 27, 191, 39, 245, 44, 190, 169, 89, 111, 61, 246, 26, 154, 61, 142, 150, 0, 190, 122, 17, 251, 190, 156, 157, 249, 61, 68, 56, 169, 189, 166, 49, 15, 190, 14, 41, 86, 62, 45, 2, 189, 189, 73, 47, 5, 190, 215, 94, 142, 61, 108, 221, 207, 61, 11, 229, 64, 61, 144, 111, 157, 190, 36, 17, 17, 62, 12, 66, 77, 61, 66, 197, 148, 187, 24, 204, 181, 61, 139, 24, 81, 190, 244, 138, 118, 62, 212, 185, 68, 190, 163, 195, 68, 189, 233, 184, 129, 189, 29, 208, 212, 189, 17, 234, 46, 61, 180, 60, 182, 189, 34, 109, 57, 190, 207, 54, 41, 61, 173, 243, 145, 60, 237, 94, 145, 60, 79, 222, 158, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 16, 129, 62, 45, 195, 54, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {226, 203, 233, 190, 105, 159, 237, 190, 77, 193, 17, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {82, 197, 17, 192, 84, 10, 246, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0087/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}