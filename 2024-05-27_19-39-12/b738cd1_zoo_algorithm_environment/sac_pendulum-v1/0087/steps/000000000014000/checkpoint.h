// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 216, 26, 63, 165, 42, 164, 190, 38, 62, 138, 190, 49, 102, 77, 190, 167, 162, 147, 190, 157, 19, 208, 62, 240, 227, 237, 190, 202, 244, 177, 62, 87, 13, 255, 61, 253, 112, 137, 190, 18, 109, 215, 63, 54, 241, 154, 62, 205, 144, 51, 63, 157, 152, 139, 63, 128, 87, 220, 62, 117, 202, 57, 63, 8, 144, 139, 63, 197, 99, 108, 62, 197, 197, 44, 62, 199, 134, 8, 191, 243, 191, 132, 62, 88, 196, 34, 63, 168, 224, 153, 191, 19, 228, 210, 190, 203, 190, 51, 63, 205, 2, 55, 63, 233, 195, 227, 62, 219, 250, 57, 63, 32, 155, 89, 191, 77, 242, 187, 189, 84, 3, 228, 60, 184, 233, 85, 62, 179, 124, 135, 190, 112, 93, 232, 62, 177, 107, 188, 62, 122, 24, 217, 62, 103, 181, 253, 189, 16, 145, 154, 191, 109, 2, 214, 190, 144, 96, 243, 190, 5, 116, 28, 62, 213, 194, 176, 61, 225, 207, 130, 63, 79, 11, 131, 191, 51, 207, 38, 190, 207, 58, 102, 62, 145, 31, 62, 191, 65, 66, 244, 190, 144, 1, 215, 62, 170, 98, 112, 63, 136, 196, 181, 62, 107, 198, 169, 189, 170, 51, 184, 190, 1, 225, 59, 63, 195, 39, 252, 62, 140, 39, 189, 61, 156, 244, 234, 62, 222, 213, 172, 62, 145, 238, 158, 190, 87, 73, 40, 63, 195, 172, 103, 191, 167, 49, 52, 191, 72, 189, 119, 58, 237, 174, 12, 63, 175, 215, 72, 63, 135, 215, 171, 62, 82, 223, 151, 191, 227, 100, 39, 190, 206, 37, 250, 61, 128, 211, 198, 189, 108, 145, 159, 191, 169, 11, 180, 189, 245, 30, 66, 191, 106, 51, 243, 189, 95, 43, 49, 190, 203, 156, 29, 191, 214, 246, 149, 63, 227, 160, 191, 62, 27, 212, 223, 190, 141, 19, 167, 63, 31, 15, 224, 62, 122, 243, 40, 62, 112, 175, 56, 191, 173, 198, 228, 62, 247, 170, 179, 190, 181, 225, 71, 63, 16, 117, 248, 190, 173, 48, 104, 63, 234, 13, 36, 63, 252, 142, 105, 62, 140, 157, 182, 190, 104, 55, 115, 190, 135, 217, 62, 188, 145, 88, 171, 60, 38, 137, 182, 190, 137, 161, 227, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 20, 70, 191, 27, 10, 192, 62, 213, 119, 36, 63, 234, 41, 184, 190, 58, 157, 251, 190, 128, 220, 164, 62, 210, 210, 111, 189, 0, 172, 218, 189, 144, 163, 103, 191, 213, 67, 243, 61, 97, 76, 194, 62, 252, 187, 69, 190, 180, 45, 154, 62, 190, 197, 40, 63, 36, 228, 192, 62, 62, 39, 96, 190, 253, 41, 206, 62, 67, 137, 242, 190, 184, 148, 142, 190, 44, 192, 52, 188, 47, 33, 50, 63, 86, 229, 198, 190, 37, 121, 73, 63, 243, 236, 43, 63, 44, 177, 151, 190, 79, 252, 111, 190, 198, 17, 230, 188, 170, 31, 97, 191, 34, 5, 196, 62, 220, 144, 87, 190, 24, 80, 27, 191, 14, 174, 178, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 164, 152, 190, 177, 221, 55, 190, 98, 160, 57, 61, 66, 41, 26, 191, 245, 30, 59, 62, 87, 11, 162, 62, 165, 66, 187, 188, 92, 129, 129, 61, 111, 34, 23, 61, 132, 193, 147, 187, 104, 128, 22, 61, 104, 59, 23, 62, 3, 243, 109, 189, 131, 226, 131, 62, 106, 38, 0, 190, 154, 23, 189, 58, 152, 185, 31, 62, 168, 151, 80, 190, 136, 22, 136, 61, 171, 172, 25, 190, 93, 218, 143, 62, 233, 36, 149, 61, 34, 119, 225, 186, 39, 68, 198, 61, 190, 81, 129, 190, 66, 249, 34, 191, 178, 66, 192, 190, 130, 145, 130, 190, 237, 150, 224, 60, 247, 130, 186, 62, 63, 189, 102, 61, 191, 127, 209, 61, 172, 83, 72, 190, 129, 85, 9, 62, 226, 241, 123, 59, 246, 107, 240, 189, 25, 60, 192, 61, 197, 132, 172, 188, 185, 37, 188, 61, 217, 145, 7, 190, 34, 74, 54, 62, 187, 49, 169, 61, 93, 75, 31, 190, 209, 6, 188, 189, 119, 255, 232, 189, 249, 179, 32, 190, 232, 178, 67, 190, 44, 219, 25, 62, 20, 241, 40, 62, 143, 216, 139, 189, 239, 133, 189, 61, 127, 8, 8, 62, 115, 78, 29, 190, 198, 117, 73, 62, 175, 46, 107, 60, 189, 47, 127, 61, 174, 104, 20, 190, 9, 93, 163, 62, 169, 17, 240, 189, 108, 77, 80, 62, 83, 181, 31, 61, 166, 232, 231, 62, 112, 186, 210, 61, 4, 123, 89, 62, 214, 163, 184, 62, 89, 228, 153, 62, 102, 72, 16, 62, 118, 221, 56, 63, 174, 149, 10, 191, 127, 122, 53, 189, 203, 139, 77, 62, 100, 75, 143, 62, 39, 18, 204, 190, 150, 203, 208, 62, 169, 220, 205, 189, 185, 236, 207, 190, 217, 150, 171, 190, 19, 200, 93, 189, 207, 80, 203, 62, 205, 158, 237, 60, 154, 86, 86, 59, 187, 237, 214, 61, 196, 216, 225, 190, 36, 212, 49, 62, 61, 70, 228, 62, 80, 80, 208, 190, 4, 197, 85, 62, 158, 111, 7, 62, 203, 21, 223, 61, 104, 120, 165, 62, 44, 111, 218, 61, 58, 196, 197, 190, 84, 57, 63, 190, 114, 20, 173, 190, 208, 194, 52, 190, 10, 13, 241, 60, 157, 37, 176, 60, 42, 64, 25, 61, 52, 61, 15, 190, 107, 149, 177, 189, 99, 170, 234, 61, 52, 250, 186, 189, 6, 65, 164, 60, 148, 226, 29, 190, 73, 97, 22, 62, 239, 26, 177, 189, 41, 247, 205, 61, 183, 138, 189, 189, 138, 149, 209, 60, 40, 186, 20, 61, 77, 9, 243, 189, 149, 168, 47, 62, 56, 134, 20, 190, 108, 37, 214, 60, 165, 42, 7, 62, 164, 240, 169, 187, 249, 66, 57, 189, 174, 96, 227, 189, 118, 57, 72, 190, 48, 170, 58, 190, 138, 29, 33, 190, 172, 229, 83, 190, 144, 253, 49, 190, 171, 249, 138, 61, 20, 123, 31, 190, 131, 41, 23, 62, 199, 49, 30, 190, 165, 251, 23, 61, 206, 178, 22, 62, 117, 20, 154, 190, 150, 253, 217, 190, 84, 87, 142, 191, 250, 199, 100, 190, 189, 121, 11, 62, 163, 69, 138, 190, 248, 182, 66, 189, 31, 33, 73, 191, 21, 209, 102, 62, 35, 58, 51, 62, 27, 196, 178, 190, 25, 143, 2, 62, 232, 73, 101, 188, 70, 245, 188, 62, 90, 205, 171, 60, 222, 119, 54, 188, 49, 239, 155, 190, 213, 10, 67, 190, 3, 214, 236, 190, 84, 255, 228, 188, 122, 251, 167, 189, 161, 19, 103, 191, 21, 149, 175, 189, 231, 240, 194, 190, 210, 136, 162, 190, 194, 178, 59, 191, 116, 230, 129, 61, 95, 108, 24, 62, 136, 32, 144, 62, 167, 220, 13, 62, 107, 187, 83, 62, 180, 186, 73, 62, 52, 106, 129, 62, 161, 86, 233, 190, 160, 101, 237, 191, 73, 115, 231, 189, 18, 161, 4, 62, 222, 185, 242, 61, 45, 91, 35, 190, 44, 72, 187, 61, 104, 57, 86, 188, 59, 220, 47, 189, 2, 141, 123, 61, 196, 225, 211, 60, 185, 92, 1, 191, 143, 12, 161, 62, 51, 57, 19, 190, 230, 247, 68, 189, 164, 78, 253, 187, 13, 116, 206, 61, 104, 19, 108, 62, 252, 191, 47, 191, 115, 25, 182, 61, 17, 207, 4, 191, 132, 180, 208, 188, 43, 20, 58, 190, 42, 217, 43, 190, 37, 7, 84, 190, 234, 86, 87, 190, 244, 215, 199, 190, 130, 234, 171, 62, 124, 17, 17, 62, 209, 222, 235, 189, 71, 13, 177, 190, 151, 186, 188, 61, 190, 69, 121, 62, 143, 139, 97, 191, 53, 219, 95, 190, 113, 181, 50, 62, 248, 43, 133, 189, 166, 39, 75, 59, 102, 209, 194, 190, 234, 183, 40, 190, 75, 217, 41, 62, 163, 165, 248, 190, 166, 227, 168, 61, 146, 118, 103, 61, 252, 34, 70, 190, 39, 171, 239, 189, 126, 226, 137, 191, 235, 108, 144, 62, 168, 225, 247, 190, 227, 27, 50, 62, 75, 70, 200, 62, 220, 55, 135, 190, 166, 38, 40, 61, 220, 52, 208, 62, 64, 219, 86, 190, 100, 116, 132, 191, 133, 139, 205, 191, 165, 162, 220, 62, 58, 191, 21, 189, 44, 73, 112, 189, 43, 229, 178, 189, 64, 140, 55, 61, 30, 63, 43, 62, 207, 123, 133, 189, 255, 201, 5, 190, 144, 232, 237, 60, 26, 74, 31, 190, 78, 239, 195, 61, 196, 71, 92, 188, 52, 178, 63, 189, 235, 224, 153, 61, 187, 168, 166, 189, 214, 50, 26, 190, 163, 151, 14, 190, 126, 152, 18, 62, 248, 131, 32, 62, 70, 50, 0, 190, 184, 211, 208, 189, 176, 252, 152, 189, 129, 150, 219, 188, 14, 206, 178, 189, 214, 18, 253, 189, 101, 119, 177, 189, 90, 233, 202, 189, 244, 132, 12, 61, 115, 209, 103, 189, 224, 240, 29, 190, 173, 247, 53, 189, 86, 245, 46, 61, 144, 47, 41, 190, 36, 149, 87, 189, 1, 6, 92, 187, 78, 2, 18, 62, 24, 112, 150, 61, 224, 123, 183, 62, 218, 240, 116, 61, 238, 144, 50, 61, 192, 35, 150, 62, 37, 245, 239, 190, 13, 163, 113, 191, 252, 122, 72, 62, 1, 226, 9, 63, 104, 162, 73, 191, 41, 27, 240, 62, 154, 193, 8, 190, 74, 64, 13, 191, 86, 194, 147, 62, 117, 45, 85, 62, 205, 54, 60, 62, 156, 110, 143, 62, 135, 77, 161, 189, 119, 1, 62, 62, 42, 71, 49, 191, 173, 36, 248, 61, 59, 115, 148, 62, 203, 85, 29, 191, 73, 222, 150, 62, 2, 161, 47, 62, 200, 222, 211, 190, 29, 92, 195, 62, 188, 206, 201, 188, 206, 164, 209, 190, 138, 178, 204, 190, 238, 246, 193, 191, 69, 92, 155, 61, 32, 100, 41, 62, 149, 16, 244, 189, 98, 28, 117, 189, 82, 77, 240, 189, 41, 54, 181, 61, 123, 24, 11, 62, 16, 109, 17, 190, 148, 184, 30, 190, 173, 92, 254, 61, 245, 163, 104, 61, 5, 34, 254, 189, 150, 223, 96, 189, 112, 138, 35, 60, 100, 74, 199, 189, 100, 15, 36, 190, 169, 108, 207, 61, 191, 191, 42, 190, 152, 166, 174, 61, 126, 28, 251, 189, 66, 12, 24, 190, 7, 233, 180, 61, 227, 174, 23, 61, 1, 223, 140, 59, 184, 209, 7, 62, 115, 175, 29, 190, 239, 192, 53, 189, 100, 48, 51, 190, 90, 179, 17, 61, 90, 37, 24, 62, 165, 52, 3, 189, 221, 243, 180, 61, 61, 149, 169, 61, 186, 85, 212, 61, 50, 115, 101, 189, 159, 172, 139, 60, 17, 16, 47, 190, 25, 162, 8, 60, 199, 61, 29, 62, 197, 85, 255, 189, 170, 93, 190, 61, 6, 64, 218, 189, 147, 62, 186, 60, 84, 11, 175, 189, 201, 123, 169, 188, 95, 196, 51, 190, 114, 149, 4, 190, 2, 167, 74, 60, 59, 68, 165, 187, 46, 102, 176, 61, 22, 38, 50, 190, 162, 92, 173, 189, 150, 91, 46, 187, 22, 36, 43, 190, 131, 152, 249, 60, 93, 155, 9, 62, 193, 176, 95, 61, 158, 67, 28, 61, 240, 73, 27, 190, 169, 250, 21, 187, 26, 105, 152, 61, 250, 18, 221, 189, 141, 18, 48, 190, 241, 15, 89, 61, 18, 207, 131, 61, 161, 152, 51, 62, 148, 116, 83, 191, 126, 163, 36, 62, 77, 229, 172, 61, 236, 109, 171, 191, 223, 120, 52, 62, 139, 119, 135, 62, 133, 135, 120, 60, 132, 112, 186, 190, 39, 3, 221, 61, 188, 215, 90, 190, 118, 230, 250, 61, 70, 155, 0, 62, 139, 15, 217, 59, 26, 195, 219, 61, 222, 24, 74, 190, 77, 23, 141, 190, 143, 41, 19, 190, 209, 106, 178, 190, 75, 2, 134, 62, 91, 111, 66, 189, 156, 67, 113, 61, 24, 228, 46, 62, 174, 113, 13, 190, 216, 211, 10, 62, 249, 113, 165, 190, 126, 64, 43, 191, 74, 238, 3, 191, 131, 120, 15, 189, 141, 195, 88, 62, 195, 175, 252, 62, 115, 19, 17, 62, 255, 200, 48, 60, 133, 171, 219, 60, 165, 164, 52, 62, 248, 21, 54, 62, 188, 240, 25, 191, 131, 45, 251, 61, 215, 77, 81, 190, 157, 53, 44, 191, 184, 231, 128, 190, 35, 40, 22, 190, 76, 63, 147, 189, 143, 255, 151, 190, 244, 134, 121, 190, 104, 251, 63, 190, 65, 230, 193, 189, 114, 83, 40, 191, 162, 52, 176, 190, 246, 87, 118, 191, 195, 36, 39, 191, 223, 222, 67, 190, 111, 33, 147, 190, 2, 144, 2, 62, 76, 167, 72, 61, 199, 106, 128, 61, 67, 226, 96, 61, 246, 120, 84, 62, 217, 69, 78, 191, 177, 49, 98, 191, 25, 140, 78, 190, 199, 89, 149, 190, 216, 33, 142, 190, 72, 124, 248, 61, 232, 164, 190, 190, 154, 204, 90, 189, 48, 21, 247, 189, 39, 117, 136, 189, 190, 52, 17, 190, 42, 27, 201, 60, 26, 82, 76, 185, 237, 57, 190, 189, 14, 210, 37, 190, 107, 223, 224, 60, 139, 58, 247, 188, 115, 244, 0, 62, 214, 208, 52, 190, 33, 188, 144, 188, 6, 104, 42, 61, 213, 135, 215, 189, 146, 86, 136, 61, 167, 128, 6, 190, 227, 199, 108, 188, 52, 139, 50, 187, 147, 197, 49, 62, 211, 145, 189, 189, 251, 77, 156, 189, 12, 23, 236, 188, 92, 16, 43, 187, 152, 236, 240, 188, 35, 27, 172, 188, 104, 250, 206, 61, 182, 236, 213, 61, 121, 61, 40, 190, 149, 160, 179, 189, 35, 178, 30, 190, 212, 234, 120, 189, 48, 116, 229, 190, 199, 241, 255, 189, 76, 151, 217, 61, 234, 116, 0, 191, 87, 164, 135, 190, 143, 192, 37, 62, 94, 5, 73, 189, 215, 136, 220, 188, 41, 5, 191, 189, 170, 56, 27, 62, 44, 196, 60, 62, 119, 192, 116, 190, 197, 127, 202, 61, 118, 65, 42, 61, 194, 155, 94, 62, 185, 131, 243, 61, 34, 0, 26, 190, 121, 205, 230, 190, 15, 32, 26, 190, 108, 107, 50, 190, 171, 202, 58, 61, 157, 7, 76, 190, 230, 248, 193, 190, 81, 221, 52, 62, 254, 227, 12, 191, 15, 129, 199, 189, 101, 120, 78, 190, 226, 61, 184, 190, 130, 64, 21, 60, 153, 179, 4, 62, 241, 147, 50, 62, 205, 209, 205, 189, 14, 24, 85, 191, 185, 25, 248, 60, 110, 58, 14, 62, 49, 186, 105, 191, 201, 59, 154, 61, 216, 72, 246, 62, 227, 215, 4, 190, 232, 28, 132, 190, 105, 151, 13, 63, 146, 113, 240, 189, 248, 175, 84, 62, 81, 169, 147, 189, 199, 152, 109, 62, 59, 213, 32, 62, 157, 21, 132, 190, 139, 198, 76, 190, 225, 150, 7, 191, 223, 101, 232, 190, 80, 198, 77, 60, 59, 102, 39, 191, 241, 0, 204, 62, 33, 45, 42, 61, 6, 149, 171, 61, 95, 174, 147, 62, 180, 6, 27, 61, 142, 89, 221, 191, 56, 78, 167, 191, 34, 55, 248, 61, 85, 116, 217, 61, 190, 49, 243, 61, 103, 146, 131, 61, 217, 114, 37, 189, 27, 29, 18, 190, 134, 208, 164, 189, 57, 11, 127, 190, 71, 28, 236, 190, 223, 45, 34, 61, 253, 211, 79, 62, 9, 134, 16, 62, 35, 91, 183, 190, 44, 39, 176, 62, 10, 82, 186, 190, 236, 225, 54, 62, 50, 222, 16, 62, 53, 173, 133, 190, 23, 251, 213, 190, 5, 194, 127, 190, 222, 184, 32, 61, 114, 192, 49, 189, 7, 170, 67, 62, 210, 9, 236, 59, 251, 53, 246, 61, 216, 38, 208, 190, 73, 130, 10, 62, 214, 121, 237, 189, 114, 136, 32, 190, 210, 169, 61, 191, 215, 244, 187, 61, 140, 128, 195, 58, 78, 151, 136, 62, 166, 112, 29, 62, 170, 145, 71, 63, 37, 131, 32, 62, 252, 216, 86, 62, 247, 240, 124, 62, 75, 17, 230, 61, 64, 12, 32, 60, 183, 54, 20, 189, 201, 41, 82, 191, 6, 25, 78, 190, 30, 229, 216, 62, 162, 65, 84, 62, 137, 2, 38, 191, 32, 214, 74, 62, 121, 251, 2, 62, 168, 166, 38, 190, 224, 62, 225, 188, 88, 92, 184, 189, 139, 81, 22, 63, 140, 161, 228, 61, 161, 242, 163, 189, 251, 123, 246, 60, 57, 127, 130, 190, 175, 18, 170, 62, 238, 231, 163, 62, 21, 14, 164, 190, 25, 190, 210, 60, 40, 125, 144, 62, 199, 58, 151, 62, 205, 84, 219, 189, 200, 236, 12, 190, 66, 46, 229, 189, 52, 158, 161, 189, 206, 228, 198, 190, 82, 57, 155, 189, 64, 31, 13, 62, 31, 200, 179, 190, 62, 126, 241, 188, 143, 102, 50, 190, 164, 254, 247, 61, 255, 20, 138, 186, 168, 113, 147, 190, 65, 127, 133, 62, 197, 176, 140, 61, 187, 182, 211, 60, 243, 105, 45, 62, 43, 102, 212, 189, 126, 43, 204, 59, 52, 255, 82, 62, 220, 7, 149, 60, 40, 122, 172, 62, 219, 30, 199, 188, 69, 141, 188, 60, 160, 23, 154, 62, 221, 53, 99, 61, 77, 65, 131, 62, 132, 1, 64, 62, 227, 72, 249, 189, 225, 167, 192, 188, 123, 58, 148, 62, 234, 20, 93, 191, 176, 191, 207, 61, 46, 14, 6, 61, 233, 6, 16, 61, 177, 234, 32, 191, 193, 45, 242, 189, 10, 205, 206, 60, 27, 225, 29, 190, 202, 197, 86, 62, 19, 212, 75, 62, 32, 69, 6, 61, 234, 214, 169, 60, 139, 246, 192, 188, 113, 244, 190, 60, 156, 122, 211, 61, 124, 35, 12, 190, 58, 177, 64, 62, 120, 50, 104, 190, 20, 122, 159, 190, 46, 48, 131, 61, 34, 38, 194, 190, 222, 113, 15, 190, 208, 160, 136, 62, 154, 105, 21, 191, 15, 39, 34, 62, 164, 192, 114, 62, 84, 58, 252, 189, 98, 47, 85, 62, 216, 215, 150, 189, 227, 240, 133, 189, 69, 29, 229, 60, 137, 152, 3, 62, 60, 56, 226, 190, 119, 7, 177, 189, 189, 215, 237, 189, 91, 123, 246, 188, 55, 117, 197, 190, 173, 53, 9, 61, 180, 184, 179, 61, 63, 62, 65, 191, 79, 212, 10, 63, 149, 216, 151, 189, 204, 58, 54, 191, 6, 219, 76, 186, 65, 96, 84, 61, 234, 246, 70, 60, 187, 161, 44, 190, 214, 34, 188, 62, 131, 125, 83, 190, 201, 8, 150, 62, 65, 238, 46, 62, 132, 252, 95, 61, 151, 75, 39, 62, 32, 253, 237, 190, 97, 232, 190, 62, 217, 215, 76, 62, 123, 67, 122, 189, 155, 252, 62, 62, 64, 181, 92, 61, 176, 195, 94, 189, 147, 213, 59, 191, 10, 148, 164, 61, 9, 62, 165, 191, 107, 57, 151, 189, 146, 58, 86, 61, 103, 7, 86, 61, 244, 42, 28, 59, 238, 74, 51, 62, 126, 41, 47, 189, 253, 64, 41, 190, 76, 202, 6, 189, 190, 185, 57, 62, 95, 54, 6, 62, 106, 243, 112, 62, 10, 22, 196, 188, 193, 80, 77, 62, 166, 181, 72, 190, 194, 231, 141, 189, 158, 2, 200, 61, 109, 16, 138, 61, 121, 161, 132, 190, 171, 181, 79, 62, 42, 230, 159, 62, 74, 54, 145, 61, 205, 169, 182, 189, 128, 34, 102, 62, 229, 166, 185, 62, 244, 239, 191, 189, 248, 7, 167, 61, 145, 117, 41, 61, 162, 238, 161, 59, 56, 147, 61, 62, 49, 139, 217, 61, 180, 52, 135, 190, 194, 0, 39, 189, 75, 51, 145, 62, 88, 71, 129, 188, 15, 106, 232, 61, 139, 249, 108, 189, 229, 210, 27, 189, 105, 167, 102, 62, 186, 152, 88, 62, 56, 168, 48, 61, 165, 141, 23, 62, 194, 1, 65, 188, 22, 163, 156, 61, 221, 176, 124, 62, 186, 52, 166, 62, 71, 156, 205, 61, 204, 95, 136, 189, 18, 227, 194, 190, 186, 213, 115, 190, 129, 218, 94, 188, 100, 81, 209, 188, 41, 166, 109, 189, 214, 27, 92, 189, 62, 229, 17, 190, 84, 81, 170, 62, 42, 88, 207, 189, 21, 108, 4, 191, 197, 59, 53, 188, 1, 24, 252, 189, 6, 79, 91, 190, 14, 219, 51, 61, 244, 215, 218, 61, 142, 201, 108, 61, 82, 42, 12, 62, 207, 81, 146, 190, 221, 78, 59, 63, 228, 252, 194, 61, 201, 169, 79, 62, 126, 135, 131, 190, 105, 23, 125, 190, 213, 244, 42, 188, 51, 241, 9, 61, 72, 179, 71, 190, 4, 213, 104, 62, 193, 110, 50, 189, 82, 162, 112, 62, 219, 40, 163, 62, 69, 128, 228, 187, 158, 117, 216, 189, 2, 173, 149, 187, 104, 50, 49, 62, 106, 42, 200, 189, 132, 134, 31, 61, 227, 237, 139, 60, 152, 71, 101, 189, 43, 19, 212, 189, 28, 27, 177, 61, 101, 227, 73, 59, 189, 249, 158, 61, 56, 165, 156, 61, 197, 182, 156, 61, 203, 40, 40, 190, 225, 84, 12, 62, 114, 42, 1, 62, 153, 72, 207, 61, 141, 185, 86, 61, 253, 228, 131, 189, 20, 69, 107, 62, 79, 30, 3, 189, 141, 57, 68, 189, 74, 41, 153, 190, 251, 153, 118, 61, 241, 142, 172, 61, 118, 117, 36, 62, 78, 150, 212, 61, 91, 189, 193, 61, 219, 139, 130, 61, 207, 215, 61, 189, 150, 240, 182, 60, 139, 60, 144, 190, 206, 205, 6, 190, 174, 145, 153, 62, 26, 15, 77, 59, 70, 35, 166, 190, 159, 99, 27, 62, 31, 222, 60, 190, 205, 248, 46, 190, 102, 95, 207, 190, 121, 206, 68, 190, 241, 200, 77, 62, 94, 177, 187, 61, 208, 144, 105, 62, 109, 203, 132, 61, 34, 154, 162, 189, 133, 77, 151, 62, 9, 44, 143, 188, 167, 201, 146, 190, 95, 192, 58, 190, 76, 252, 32, 62, 142, 3, 187, 189, 114, 100, 242, 61, 214, 154, 133, 188, 244, 223, 147, 190, 105, 77, 58, 189, 16, 32, 206, 61, 252, 134, 185, 61, 98, 181, 246, 189, 52, 121, 151, 61, 185, 223, 166, 188, 147, 188, 255, 189, 69, 42, 169, 188, 18, 108, 254, 61, 18, 248, 35, 190, 216, 242, 45, 60, 17, 16, 215, 189, 148, 116, 136, 60, 21, 176, 107, 189, 219, 48, 251, 189, 153, 44, 37, 62, 196, 6, 235, 188, 61, 97, 110, 61, 106, 147, 20, 190, 1, 83, 5, 190, 218, 114, 246, 189, 158, 5, 42, 190, 162, 22, 69, 60, 195, 229, 100, 189, 114, 170, 38, 62, 219, 87, 108, 61, 184, 142, 136, 188, 89, 163, 27, 190, 107, 179, 159, 189, 134, 23, 250, 60, 31, 55, 187, 61, 47, 0, 28, 190, 219, 104, 159, 188, 1, 158, 93, 188, 201, 189, 132, 187, 93, 42, 27, 62, 239, 29, 223, 190, 157, 195, 128, 62, 165, 56, 142, 189, 197, 106, 90, 60, 73, 223, 14, 191, 250, 62, 248, 189, 254, 155, 64, 62, 59, 10, 108, 61, 184, 53, 35, 191, 224, 55, 230, 62, 126, 140, 54, 62, 27, 171, 113, 190, 107, 7, 213, 190, 162, 153, 75, 62, 5, 131, 202, 62, 199, 171, 42, 190, 159, 138, 247, 60, 105, 73, 144, 188, 37, 190, 73, 190, 72, 55, 206, 61, 164, 38, 153, 62, 19, 101, 24, 191, 161, 90, 120, 62, 132, 210, 215, 62, 72, 96, 34, 63, 164, 93, 74, 189, 71, 72, 212, 189, 215, 242, 21, 188, 41, 81, 174, 190, 85, 111, 29, 191, 70, 253, 16, 187, 59, 52, 254, 61, 12, 222, 120, 190, 136, 3, 35, 62, 72, 217, 94, 62, 246, 147, 199, 189, 76, 43, 149, 189, 173, 69, 135, 189, 186, 223, 3, 59, 64, 110, 31, 190, 48, 231, 142, 189, 254, 86, 149, 61, 246, 105, 171, 62, 184, 142, 135, 188, 57, 239, 53, 190, 218, 2, 141, 62, 197, 89, 163, 61, 26, 187, 246, 189, 164, 7, 29, 62, 177, 97, 217, 61, 140, 101, 1, 62, 243, 161, 247, 189, 82, 162, 69, 62, 197, 26, 23, 190, 229, 16, 145, 188, 73, 6, 97, 62, 56, 150, 104, 190, 237, 69, 181, 61, 240, 33, 200, 189, 47, 69, 172, 189, 17, 105, 112, 62, 16, 201, 123, 62, 152, 152, 229, 189, 125, 72, 142, 188, 168, 162, 131, 191, 202, 214, 99, 57, 247, 140, 238, 62, 75, 77, 99, 62, 242, 37, 203, 60, 226, 86, 68, 62, 154, 82, 148, 190, 161, 90, 86, 191, 240, 103, 15, 190, 242, 31, 128, 191, 219, 91, 137, 188, 96, 184, 19, 61, 64, 44, 60, 62, 131, 179, 109, 62, 92, 103, 154, 190, 131, 152, 169, 190, 116, 45, 67, 62, 136, 131, 25, 190, 114, 147, 139, 190, 12, 248, 206, 189, 81, 137, 151, 61, 150, 180, 70, 60, 175, 123, 140, 62, 73, 106, 55, 190, 20, 73, 218, 62, 148, 238, 182, 61, 238, 219, 39, 62, 147, 145, 83, 190, 0, 24, 47, 190, 238, 118, 172, 62, 70, 250, 191, 61, 75, 238, 57, 61, 192, 219, 98, 191, 126, 42, 232, 190, 38, 34, 216, 62, 103, 13, 73, 60, 90, 160, 95, 59, 72, 223, 9, 63, 91, 255, 161, 190, 89, 221, 14, 191, 137, 7, 43, 191, 65, 119, 186, 190, 8, 102, 149, 62, 150, 134, 159, 190, 94, 104, 50, 190, 174, 112, 68, 62, 172, 177, 113, 190, 22, 53, 42, 190, 200, 220, 149, 59, 175, 185, 160, 190, 206, 74, 177, 190, 19, 75, 71, 190, 147, 117, 2, 62, 83, 100, 101, 190, 109, 151, 79, 62, 50, 83, 91, 191, 146, 219, 169, 190, 220, 111, 43, 190, 194, 142, 142, 190, 184, 236, 229, 189, 222, 175, 108, 62, 1, 84, 217, 62, 41, 124, 23, 62, 156, 65, 254, 187, 133, 93, 193, 188, 194, 69, 109, 189, 45, 227, 165, 61, 63, 228, 134, 61, 13, 34, 28, 62, 201, 236, 77, 189, 128, 38, 223, 61, 27, 61, 180, 190, 81, 4, 75, 62, 52, 209, 23, 191, 131, 211, 71, 190, 201, 59, 9, 61, 155, 148, 56, 191, 99, 233, 183, 61, 99, 82, 198, 190, 75, 214, 227, 190, 119, 45, 189, 60, 250, 45, 9, 61, 194, 8, 23, 61, 102, 90, 228, 61, 198, 79, 81, 190, 8, 7, 143, 61, 53, 151, 11, 62, 51, 20, 106, 190, 54, 185, 136, 62, 191, 49, 133, 62, 52, 178, 11, 189, 69, 176, 23, 62, 107, 4, 148, 62, 27, 3, 184, 189, 171, 28, 51, 61, 14, 23, 160, 190, 232, 70, 102, 191, 227, 221, 145, 188, 169, 100, 160, 61, 141, 7, 55, 189, 40, 159, 170, 62, 158, 147, 237, 62, 200, 155, 64, 190, 108, 7, 146, 190, 37, 45, 231, 61, 24, 69, 16, 190, 3, 173, 207, 61, 72, 183, 201, 62, 245, 7, 220, 59, 223, 235, 21, 62, 208, 43, 112, 190, 2, 150, 47, 189, 159, 60, 231, 61, 152, 77, 13, 191, 202, 100, 251, 61, 140, 41, 50, 190, 152, 145, 15, 62, 140, 236, 224, 61, 129, 13, 71, 190, 72, 44, 75, 62, 43, 165, 167, 190, 241, 50, 93, 191, 9, 201, 129, 190, 11, 78, 52, 190, 249, 61, 140, 62, 154, 221, 243, 62, 88, 209, 37, 190, 112, 106, 140, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 235, 192, 62, 81, 115, 138, 60, 216, 39, 108, 62, 37, 11, 71, 190, 105, 254, 214, 61, 80, 82, 87, 187, 179, 16, 252, 61, 224, 116, 50, 190, 5, 97, 195, 60, 218, 163, 192, 189, 218, 89, 4, 190, 223, 13, 156, 62, 103, 149, 29, 61, 62, 59, 36, 190, 164, 117, 131, 62, 106, 201, 117, 61, 251, 2, 56, 190, 121, 72, 118, 62, 179, 113, 219, 189, 12, 251, 32, 62, 65, 89, 128, 190, 76, 229, 107, 62, 72, 9, 67, 62, 233, 96, 69, 62, 204, 153, 33, 61, 215, 140, 12, 190, 216, 86, 153, 62, 250, 146, 255, 61, 86, 86, 142, 62, 178, 165, 192, 61, 209, 72, 146, 190, 185, 75, 103, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 240, 177, 190, 101, 119, 35, 190, 245, 214, 47, 63, 100, 253, 12, 62, 164, 146, 28, 62, 175, 205, 223, 190, 193, 8, 80, 191, 180, 141, 248, 189, 84, 32, 175, 191, 226, 186, 152, 187, 10, 206, 218, 60, 64, 42, 75, 191, 40, 40, 81, 191, 96, 236, 50, 190, 16, 251, 210, 189, 253, 251, 143, 191, 33, 233, 228, 190, 113, 38, 26, 63, 247, 216, 203, 190, 154, 169, 221, 189, 55, 19, 50, 63, 144, 242, 200, 61, 244, 109, 116, 62, 81, 240, 131, 61, 171, 85, 67, 62, 150, 13, 24, 189, 127, 113, 114, 63, 219, 23, 172, 60, 207, 109, 189, 62, 155, 204, 118, 191, 241, 228, 121, 190, 141, 153, 27, 191, 243, 167, 61, 190, 43, 177, 51, 61, 221, 166, 209, 61, 142, 150, 0, 190, 145, 109, 6, 191, 98, 28, 227, 61, 147, 141, 152, 189, 166, 49, 15, 190, 42, 217, 99, 62, 45, 2, 189, 189, 73, 47, 5, 190, 225, 113, 7, 61, 32, 167, 187, 61, 11, 229, 64, 61, 40, 215, 174, 190, 25, 91, 37, 62, 138, 160, 145, 61, 49, 65, 169, 187, 115, 47, 129, 61, 3, 8, 94, 190, 109, 76, 111, 62, 137, 239, 91, 190, 249, 11, 10, 189, 154, 71, 150, 189, 220, 195, 252, 189, 17, 234, 46, 61, 200, 175, 235, 189, 136, 148, 77, 190, 204, 189, 29, 61, 215, 157, 128, 189, 74, 90, 143, 60, 142, 245, 178, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 65, 131, 62, 52, 93, 92, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {10, 202, 145, 191, 126, 182, 99, 189, 192, 221, 231, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {119, 100, 78, 64, 211, 64, 181, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0087/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}