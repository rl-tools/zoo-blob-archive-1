// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 3, 239, 189, 72, 45, 139, 63, 230, 76, 207, 62, 198, 182, 33, 63, 238, 245, 11, 63, 216, 222, 86, 62, 79, 38, 39, 63, 152, 217, 152, 187, 49, 63, 191, 62, 53, 186, 20, 63, 76, 130, 133, 62, 90, 143, 9, 191, 220, 177, 247, 190, 120, 164, 185, 191, 223, 238, 150, 190, 59, 93, 13, 191, 111, 20, 128, 191, 147, 217, 192, 62, 56, 178, 12, 63, 223, 173, 204, 190, 221, 62, 5, 191, 35, 227, 47, 63, 144, 245, 206, 62, 167, 249, 27, 63, 60, 29, 1, 63, 153, 253, 44, 63, 222, 31, 29, 61, 116, 79, 223, 62, 153, 50, 144, 190, 67, 52, 190, 189, 51, 2, 220, 62, 83, 6, 144, 190, 182, 188, 239, 62, 50, 104, 142, 61, 178, 70, 73, 61, 248, 29, 245, 190, 15, 166, 20, 190, 69, 219, 231, 191, 65, 237, 154, 190, 76, 208, 151, 62, 80, 109, 9, 63, 29, 137, 214, 62, 168, 181, 241, 190, 52, 65, 108, 191, 201, 70, 40, 191, 205, 165, 132, 62, 90, 236, 255, 62, 254, 181, 184, 190, 18, 204, 154, 190, 36, 0, 4, 63, 177, 45, 202, 61, 149, 208, 137, 190, 121, 3, 139, 60, 163, 71, 163, 60, 142, 229, 168, 190, 40, 201, 100, 191, 106, 215, 29, 63, 206, 31, 205, 62, 38, 156, 201, 62, 59, 74, 230, 190, 77, 99, 133, 191, 106, 206, 206, 61, 32, 7, 5, 63, 73, 232, 167, 62, 12, 145, 102, 191, 68, 238, 75, 190, 52, 5, 57, 191, 227, 13, 137, 63, 90, 251, 134, 60, 209, 134, 142, 190, 118, 112, 198, 191, 65, 197, 86, 189, 254, 32, 110, 191, 84, 191, 59, 191, 115, 69, 155, 190, 225, 67, 31, 63, 234, 243, 3, 190, 104, 53, 41, 191, 125, 70, 253, 62, 82, 6, 6, 63, 152, 145, 163, 61, 64, 179, 50, 63, 236, 244, 217, 61, 225, 221, 138, 62, 41, 244, 54, 191, 71, 246, 158, 61, 36, 118, 207, 190, 205, 45, 152, 62, 134, 76, 167, 191, 194, 15, 113, 190, 180, 242, 27, 63, 27, 120, 195, 191, 154, 204, 180, 190, 220, 19, 251, 190, 173, 182, 203, 62, 20, 71, 79, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 226, 158, 190, 131, 128, 154, 190, 152, 201, 140, 188, 89, 111, 113, 191, 47, 225, 165, 190, 178, 242, 136, 189, 115, 53, 25, 190, 250, 112, 209, 190, 49, 211, 68, 190, 234, 168, 226, 61, 218, 79, 99, 190, 172, 170, 134, 191, 249, 85, 93, 62, 4, 179, 74, 191, 119, 241, 137, 189, 121, 224, 35, 187, 207, 187, 194, 62, 238, 42, 237, 190, 113, 211, 85, 62, 9, 22, 14, 63, 193, 29, 146, 190, 238, 211, 153, 188, 57, 66, 40, 63, 200, 102, 182, 62, 24, 168, 34, 191, 117, 7, 238, 190, 68, 124, 131, 60, 14, 119, 103, 191, 159, 248, 200, 189, 87, 80, 207, 61, 190, 4, 134, 189, 103, 13, 77, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 118, 19, 189, 203, 121, 24, 190, 52, 63, 22, 190, 25, 80, 161, 60, 250, 15, 240, 60, 161, 114, 170, 60, 208, 66, 4, 61, 157, 3, 204, 186, 68, 199, 58, 59, 172, 144, 46, 62, 54, 84, 53, 189, 94, 125, 41, 190, 30, 217, 186, 189, 210, 211, 131, 188, 193, 54, 215, 59, 45, 137, 156, 61, 78, 145, 34, 62, 112, 250, 0, 189, 216, 143, 21, 61, 64, 216, 154, 189, 198, 96, 141, 189, 173, 168, 12, 62, 253, 180, 105, 189, 149, 107, 1, 190, 251, 202, 22, 189, 250, 184, 210, 188, 97, 15, 143, 61, 24, 116, 250, 189, 120, 51, 27, 190, 178, 78, 196, 60, 234, 119, 92, 61, 248, 149, 207, 189, 191, 108, 3, 189, 135, 2, 174, 189, 196, 168, 196, 189, 171, 211, 43, 61, 12, 68, 23, 191, 202, 213, 62, 188, 158, 12, 204, 188, 188, 234, 169, 61, 182, 22, 158, 190, 245, 193, 36, 191, 181, 1, 131, 189, 181, 137, 36, 61, 251, 222, 195, 190, 109, 36, 147, 189, 209, 86, 227, 190, 71, 194, 188, 190, 216, 33, 51, 189, 38, 99, 157, 61, 171, 19, 125, 62, 5, 195, 3, 191, 221, 196, 125, 62, 0, 144, 55, 191, 233, 203, 34, 61, 169, 167, 51, 62, 89, 221, 7, 191, 84, 254, 162, 62, 201, 113, 90, 190, 73, 162, 154, 62, 18, 170, 91, 191, 214, 189, 71, 191, 137, 235, 89, 191, 198, 111, 93, 190, 127, 43, 59, 62, 170, 168, 149, 62, 213, 34, 128, 62, 235, 50, 39, 62, 153, 204, 222, 190, 104, 123, 173, 186, 250, 72, 111, 191, 127, 6, 157, 62, 158, 46, 185, 62, 203, 115, 56, 191, 231, 121, 153, 62, 163, 40, 91, 189, 96, 63, 147, 190, 253, 238, 4, 62, 190, 84, 120, 60, 34, 14, 87, 62, 217, 31, 15, 62, 38, 216, 93, 57, 197, 246, 60, 190, 30, 6, 55, 62, 214, 40, 169, 190, 156, 92, 145, 191, 159, 212, 110, 190, 84, 28, 232, 190, 154, 202, 173, 190, 219, 137, 31, 191, 23, 225, 198, 62, 189, 76, 167, 62, 15, 194, 11, 63, 178, 137, 146, 191, 190, 26, 163, 191, 41, 58, 176, 62, 19, 4, 120, 190, 150, 212, 201, 62, 103, 2, 37, 62, 125, 36, 15, 62, 147, 178, 70, 191, 245, 217, 165, 59, 242, 68, 241, 188, 82, 79, 51, 62, 139, 1, 173, 62, 182, 214, 110, 62, 169, 180, 99, 59, 113, 217, 174, 61, 163, 37, 54, 191, 31, 215, 48, 62, 8, 225, 48, 189, 208, 49, 232, 62, 209, 93, 173, 61, 44, 170, 12, 61, 46, 158, 70, 62, 122, 197, 159, 62, 136, 202, 126, 60, 111, 240, 123, 191, 3, 13, 103, 62, 101, 215, 203, 190, 106, 148, 246, 190, 56, 161, 168, 189, 31, 188, 247, 62, 54, 49, 231, 62, 191, 237, 54, 190, 227, 51, 226, 191, 7, 209, 149, 191, 200, 142, 172, 60, 61, 162, 16, 191, 203, 36, 55, 191, 92, 195, 95, 189, 32, 215, 142, 62, 38, 97, 38, 62, 75, 250, 88, 63, 100, 132, 174, 189, 222, 70, 63, 190, 166, 100, 115, 190, 133, 150, 120, 190, 216, 249, 137, 190, 35, 226, 19, 62, 128, 118, 72, 62, 161, 34, 107, 189, 0, 237, 55, 62, 54, 150, 7, 189, 66, 200, 182, 190, 160, 99, 230, 189, 114, 208, 146, 62, 124, 92, 183, 189, 154, 203, 28, 191, 205, 184, 47, 190, 38, 36, 57, 60, 208, 145, 197, 61, 124, 125, 44, 62, 83, 41, 1, 190, 172, 93, 89, 189, 85, 135, 163, 190, 215, 103, 3, 190, 1, 92, 23, 189, 50, 25, 62, 61, 162, 171, 22, 62, 201, 145, 15, 190, 139, 129, 110, 62, 129, 105, 214, 189, 26, 146, 248, 189, 244, 78, 237, 62, 68, 23, 33, 190, 33, 244, 16, 189, 14, 138, 157, 61, 240, 134, 174, 61, 235, 114, 110, 188, 203, 242, 54, 61, 163, 153, 187, 190, 230, 176, 92, 62, 232, 142, 175, 190, 56, 232, 81, 62, 229, 19, 38, 62, 56, 157, 185, 62, 61, 15, 31, 62, 231, 172, 31, 191, 46, 39, 40, 62, 79, 75, 215, 190, 192, 123, 157, 190, 155, 165, 50, 62, 236, 53, 165, 62, 185, 42, 179, 61, 58, 36, 223, 189, 184, 63, 181, 62, 200, 164, 114, 62, 71, 31, 147, 61, 99, 81, 6, 191, 117, 249, 9, 191, 225, 147, 79, 62, 45, 94, 43, 62, 26, 238, 214, 190, 96, 174, 51, 190, 80, 195, 162, 190, 172, 248, 122, 61, 210, 6, 100, 188, 114, 132, 50, 62, 210, 95, 142, 190, 77, 220, 27, 62, 133, 195, 240, 61, 88, 151, 104, 190, 79, 214, 153, 190, 127, 161, 87, 190, 222, 162, 120, 190, 92, 119, 223, 189, 95, 223, 176, 61, 134, 152, 123, 61, 11, 207, 178, 189, 216, 52, 230, 61, 178, 121, 8, 62, 148, 26, 214, 62, 67, 243, 82, 62, 33, 120, 116, 190, 223, 8, 99, 61, 240, 75, 83, 190, 206, 140, 134, 62, 125, 86, 143, 190, 235, 218, 35, 191, 53, 104, 246, 190, 96, 20, 71, 62, 74, 129, 166, 62, 53, 7, 76, 191, 158, 0, 157, 62, 101, 174, 138, 189, 1, 221, 62, 190, 99, 149, 124, 188, 167, 132, 17, 62, 167, 145, 132, 190, 93, 129, 157, 60, 172, 84, 44, 190, 130, 204, 67, 191, 100, 118, 148, 190, 214, 40, 176, 60, 30, 109, 151, 60, 249, 201, 187, 62, 109, 235, 9, 191, 39, 52, 140, 62, 6, 47, 192, 190, 222, 117, 96, 190, 247, 225, 219, 188, 20, 244, 10, 190, 102, 165, 64, 190, 102, 152, 254, 62, 3, 248, 173, 189, 68, 225, 31, 60, 48, 168, 168, 60, 56, 38, 213, 62, 117, 96, 245, 189, 70, 94, 192, 190, 203, 234, 45, 191, 14, 148, 118, 62, 163, 102, 49, 190, 182, 251, 37, 190, 89, 167, 142, 61, 192, 124, 26, 191, 8, 66, 83, 190, 45, 110, 0, 62, 124, 13, 190, 190, 227, 130, 251, 61, 138, 174, 112, 62, 234, 228, 195, 61, 14, 164, 150, 190, 131, 141, 141, 62, 239, 224, 19, 188, 251, 141, 233, 190, 130, 103, 57, 191, 251, 5, 175, 60, 36, 249, 3, 62, 127, 237, 78, 190, 68, 21, 122, 62, 23, 224, 172, 189, 226, 250, 247, 189, 80, 18, 142, 62, 29, 137, 76, 62, 41, 22, 175, 189, 200, 19, 116, 62, 163, 124, 41, 191, 206, 176, 25, 62, 6, 228, 190, 189, 212, 158, 190, 188, 8, 253, 58, 189, 127, 176, 7, 190, 31, 60, 111, 191, 171, 3, 135, 62, 227, 69, 110, 62, 73, 165, 87, 191, 166, 243, 168, 61, 97, 112, 207, 60, 193, 61, 205, 61, 185, 74, 233, 61, 255, 120, 231, 60, 12, 219, 153, 188, 73, 205, 44, 62, 137, 110, 222, 61, 120, 206, 168, 61, 26, 205, 26, 189, 164, 98, 112, 60, 189, 92, 177, 185, 237, 216, 5, 189, 163, 107, 126, 189, 67, 143, 213, 61, 240, 201, 129, 188, 13, 89, 30, 190, 230, 144, 7, 190, 193, 214, 138, 189, 57, 184, 111, 190, 198, 96, 245, 189, 238, 122, 6, 190, 172, 115, 202, 190, 6, 186, 233, 189, 1, 16, 119, 189, 249, 5, 2, 190, 68, 34, 70, 189, 50, 28, 254, 189, 203, 75, 44, 190, 193, 53, 37, 190, 187, 56, 135, 60, 196, 75, 30, 189, 211, 75, 207, 189, 74, 20, 232, 61, 122, 64, 195, 189, 187, 101, 8, 190, 58, 3, 14, 62, 28, 110, 162, 61, 148, 79, 86, 61, 119, 9, 160, 188, 118, 255, 134, 189, 30, 49, 39, 62, 209, 249, 1, 60, 102, 144, 16, 62, 49, 210, 162, 189, 169, 194, 22, 190, 142, 200, 35, 62, 233, 133, 251, 189, 159, 53, 153, 189, 186, 8, 13, 189, 90, 162, 13, 61, 49, 110, 94, 189, 241, 240, 6, 190, 47, 77, 22, 190, 38, 65, 141, 187, 209, 128, 237, 188, 157, 79, 124, 189, 131, 199, 67, 189, 10, 230, 23, 190, 99, 33, 250, 61, 208, 39, 204, 189, 29, 253, 16, 190, 77, 99, 35, 190, 16, 226, 111, 188, 30, 229, 5, 191, 205, 142, 163, 62, 21, 15, 56, 62, 153, 231, 9, 191, 108, 17, 16, 63, 111, 25, 227, 190, 12, 122, 3, 191, 70, 233, 194, 189, 123, 113, 182, 189, 123, 221, 104, 191, 172, 19, 133, 62, 76, 222, 130, 190, 202, 247, 15, 190, 16, 19, 27, 63, 39, 216, 157, 62, 15, 213, 90, 62, 25, 17, 133, 62, 216, 197, 167, 189, 235, 97, 230, 190, 20, 231, 139, 59, 81, 134, 28, 191, 89, 166, 241, 190, 189, 183, 114, 61, 102, 140, 154, 190, 86, 236, 246, 61, 207, 135, 1, 191, 137, 4, 36, 190, 235, 47, 8, 190, 88, 1, 14, 63, 240, 51, 247, 62, 246, 73, 233, 190, 246, 99, 164, 62, 176, 205, 161, 190, 172, 103, 111, 62, 136, 241, 39, 62, 60, 52, 87, 190, 10, 66, 139, 62, 135, 56, 139, 190, 255, 117, 54, 61, 172, 225, 184, 187, 68, 233, 141, 62, 35, 205, 145, 61, 213, 241, 4, 62, 246, 150, 169, 190, 156, 255, 128, 61, 234, 55, 200, 189, 219, 133, 90, 62, 253, 226, 238, 61, 238, 247, 69, 61, 245, 43, 155, 189, 222, 223, 130, 190, 202, 123, 166, 60, 164, 63, 59, 191, 210, 16, 70, 190, 221, 183, 162, 62, 209, 197, 213, 62, 79, 245, 134, 62, 40, 124, 142, 190, 253, 67, 142, 62, 172, 23, 240, 62, 108, 200, 128, 62, 174, 241, 97, 190, 134, 107, 151, 190, 215, 144, 250, 60, 172, 104, 213, 61, 231, 166, 46, 191, 27, 63, 7, 190, 120, 234, 198, 61, 40, 70, 238, 190, 21, 133, 239, 61, 91, 255, 180, 62, 214, 33, 232, 189, 218, 131, 88, 62, 109, 188, 180, 62, 189, 77, 69, 190, 165, 158, 86, 62, 218, 255, 155, 190, 93, 230, 235, 189, 85, 250, 53, 190, 24, 16, 49, 62, 27, 186, 248, 189, 156, 93, 236, 61, 95, 122, 32, 62, 233, 158, 42, 62, 154, 21, 177, 61, 179, 162, 246, 61, 135, 36, 174, 189, 132, 209, 102, 190, 121, 124, 197, 190, 158, 89, 76, 62, 22, 178, 120, 190, 184, 250, 224, 190, 186, 157, 30, 60, 111, 45, 129, 61, 77, 206, 213, 62, 231, 238, 77, 189, 246, 122, 253, 187, 127, 86, 175, 62, 45, 153, 76, 62, 22, 79, 122, 190, 71, 200, 77, 62, 119, 219, 218, 190, 64, 21, 198, 188, 202, 36, 72, 62, 193, 184, 145, 61, 93, 130, 208, 61, 13, 252, 148, 62, 212, 220, 20, 189, 65, 197, 14, 62, 198, 97, 48, 191, 211, 242, 142, 62, 4, 38, 188, 59, 174, 40, 83, 62, 138, 141, 50, 188, 57, 199, 144, 189, 19, 139, 244, 61, 73, 38, 104, 191, 225, 203, 56, 189, 217, 104, 53, 62, 246, 222, 120, 62, 247, 124, 43, 62, 60, 117, 14, 190, 232, 142, 104, 62, 208, 146, 175, 62, 228, 198, 167, 62, 58, 195, 157, 61, 100, 149, 25, 188, 223, 94, 35, 62, 73, 70, 18, 190, 18, 112, 7, 62, 97, 177, 182, 61, 91, 134, 155, 190, 167, 142, 235, 62, 115, 178, 202, 190, 15, 110, 126, 188, 10, 108, 64, 190, 78, 194, 132, 189, 34, 141, 98, 61, 200, 169, 148, 60, 39, 156, 47, 190, 191, 70, 100, 59, 197, 179, 182, 190, 226, 104, 22, 61, 89, 0, 227, 60, 246, 21, 43, 62, 46, 135, 0, 62, 43, 105, 15, 190, 8, 41, 165, 61, 93, 254, 238, 190, 230, 187, 18, 190, 193, 113, 42, 188, 21, 122, 147, 61, 191, 67, 131, 62, 9, 150, 167, 190, 107, 109, 131, 62, 223, 199, 153, 61, 158, 83, 87, 62, 235, 252, 56, 190, 132, 148, 43, 190, 140, 230, 41, 62, 242, 152, 42, 61, 91, 122, 5, 61, 210, 38, 67, 62, 141, 33, 157, 62, 86, 155, 239, 190, 234, 139, 251, 189, 156, 82, 83, 62, 35, 95, 209, 188, 91, 44, 1, 62, 133, 5, 240, 61, 96, 95, 68, 62, 53, 121, 117, 190, 104, 59, 199, 190, 122, 60, 65, 61, 18, 140, 168, 189, 65, 70, 154, 189, 225, 44, 120, 60, 123, 115, 240, 61, 42, 154, 194, 61, 89, 65, 219, 60, 113, 172, 167, 61, 149, 116, 58, 61, 244, 32, 242, 190, 142, 240, 78, 188, 141, 97, 148, 189, 1, 96, 52, 62, 208, 88, 238, 61, 219, 208, 194, 61, 31, 85, 222, 190, 31, 177, 90, 61, 4, 199, 193, 189, 32, 121, 12, 188, 51, 186, 17, 191, 45, 30, 24, 191, 127, 233, 94, 189, 218, 102, 77, 61, 181, 110, 172, 191, 63, 102, 171, 190, 238, 77, 153, 62, 148, 115, 163, 190, 133, 107, 88, 62, 2, 42, 132, 189, 212, 102, 154, 190, 225, 135, 146, 189, 147, 150, 161, 191, 190, 184, 102, 61, 218, 140, 155, 191, 246, 137, 136, 190, 189, 252, 146, 62, 174, 0, 96, 60, 7, 248, 220, 61, 137, 209, 191, 60, 193, 56, 191, 62, 171, 85, 128, 62, 250, 245, 218, 190, 86, 214, 60, 189, 132, 223, 119, 191, 9, 10, 191, 62, 80, 20, 136, 190, 199, 164, 185, 190, 110, 175, 1, 190, 70, 26, 167, 188, 85, 188, 133, 62, 124, 59, 233, 190, 187, 171, 252, 188, 255, 59, 131, 191, 60, 2, 1, 62, 188, 187, 23, 61, 190, 18, 201, 191, 21, 144, 217, 190, 233, 137, 58, 190, 232, 145, 125, 190, 207, 183, 74, 60, 167, 18, 60, 61, 46, 155, 85, 61, 17, 69, 227, 61, 3, 155, 14, 191, 41, 7, 1, 61, 204, 198, 124, 191, 79, 228, 211, 191, 104, 59, 129, 62, 29, 29, 123, 189, 237, 8, 26, 62, 176, 226, 186, 190, 237, 247, 186, 62, 60, 222, 43, 63, 117, 180, 25, 63, 205, 186, 161, 60, 48, 49, 57, 191, 226, 107, 161, 190, 49, 224, 2, 191, 177, 249, 115, 191, 66, 51, 214, 62, 205, 13, 26, 63, 224, 128, 220, 62, 24, 254, 151, 61, 211, 117, 113, 189, 96, 26, 123, 191, 4, 114, 145, 190, 141, 183, 195, 62, 49, 191, 190, 190, 147, 167, 170, 62, 21, 125, 56, 189, 133, 95, 104, 190, 173, 52, 212, 61, 210, 171, 102, 62, 101, 42, 175, 190, 7, 46, 100, 62, 178, 23, 22, 62, 123, 30, 162, 188, 73, 222, 77, 60, 148, 78, 240, 61, 118, 61, 171, 190, 130, 110, 131, 188, 250, 213, 1, 63, 53, 9, 13, 61, 41, 133, 80, 62, 181, 83, 54, 62, 8, 126, 132, 190, 234, 169, 79, 62, 251, 227, 93, 190, 40, 94, 133, 62, 196, 220, 178, 186, 237, 11, 7, 191, 241, 28, 161, 189, 89, 235, 74, 62, 78, 74, 160, 60, 93, 108, 115, 190, 16, 191, 209, 189, 70, 224, 226, 62, 178, 214, 187, 189, 199, 219, 21, 62, 80, 213, 210, 190, 23, 159, 203, 61, 97, 164, 9, 62, 141, 110, 154, 189, 61, 83, 181, 190, 145, 220, 105, 62, 83, 75, 151, 61, 79, 28, 247, 61, 235, 229, 131, 189, 173, 21, 55, 62, 198, 255, 4, 190, 247, 77, 42, 189, 3, 94, 75, 61, 133, 223, 39, 61, 41, 24, 130, 62, 59, 107, 152, 189, 205, 118, 218, 62, 192, 79, 232, 186, 205, 102, 195, 188, 241, 147, 38, 60, 59, 187, 20, 189, 156, 188, 150, 62, 103, 194, 194, 190, 137, 191, 171, 62, 63, 94, 159, 190, 70, 130, 1, 62, 161, 17, 132, 61, 59, 144, 159, 190, 178, 230, 179, 190, 55, 17, 53, 62, 8, 167, 161, 62, 255, 47, 198, 190, 139, 231, 158, 62, 45, 108, 6, 61, 59, 234, 62, 190, 68, 16, 173, 62, 79, 188, 198, 62, 82, 47, 144, 189, 246, 233, 179, 62, 93, 8, 193, 190, 143, 188, 155, 62, 197, 96, 134, 62, 66, 204, 136, 62, 67, 153, 149, 61, 2, 68, 17, 190, 48, 185, 136, 61, 79, 254, 154, 190, 232, 250, 158, 61, 140, 190, 213, 190, 1, 65, 165, 190, 162, 165, 106, 61, 33, 134, 3, 62, 188, 254, 9, 62, 82, 193, 116, 190, 68, 227, 150, 62, 19, 79, 48, 63, 55, 32, 79, 62, 8, 235, 188, 190, 210, 192, 134, 190, 28, 208, 112, 62, 113, 189, 7, 191, 117, 72, 62, 191, 53, 199, 116, 190, 246, 208, 117, 62, 82, 203, 169, 190, 155, 148, 137, 62, 133, 128, 146, 62, 86, 156, 50, 191, 14, 205, 144, 61, 209, 57, 130, 62, 244, 145, 10, 191, 142, 205, 10, 62, 55, 2, 148, 61, 237, 4, 162, 190, 18, 42, 82, 190, 203, 98, 225, 189, 251, 36, 224, 190, 65, 93, 216, 189, 27, 35, 21, 63, 165, 189, 169, 61, 12, 75, 11, 63, 92, 41, 121, 62, 213, 45, 7, 190, 155, 9, 45, 190, 109, 124, 144, 190, 247, 251, 58, 62, 155, 0, 150, 190, 192, 99, 29, 191, 19, 134, 27, 190, 107, 172, 13, 62, 204, 124, 185, 62, 38, 165, 166, 188, 157, 192, 20, 62, 88, 114, 200, 61, 58, 203, 71, 60, 55, 33, 147, 190, 30, 53, 106, 191, 163, 141, 158, 190, 163, 47, 36, 190, 252, 168, 118, 62, 30, 189, 205, 62, 140, 110, 38, 190, 254, 174, 108, 61, 211, 200, 11, 190, 155, 73, 223, 189, 104, 195, 140, 61, 0, 18, 48, 191, 132, 160, 219, 191, 137, 152, 0, 63, 52, 89, 89, 189, 142, 71, 132, 61, 10, 118, 9, 191, 139, 95, 8, 62, 7, 157, 45, 62, 207, 167, 171, 62, 221, 170, 157, 188, 34, 154, 75, 191, 235, 24, 51, 190, 188, 152, 179, 61, 144, 168, 239, 190, 107, 62, 25, 63, 235, 172, 182, 62, 32, 131, 179, 61, 118, 53, 156, 61, 44, 229, 28, 189, 34, 69, 145, 62, 208, 97, 187, 61, 22, 220, 79, 62, 205, 170, 50, 190, 93, 109, 56, 62, 31, 11, 75, 60, 203, 28, 206, 61, 162, 82, 149, 62, 201, 245, 10, 190, 126, 193, 189, 189, 72, 242, 59, 62, 225, 102, 250, 190, 163, 81, 166, 62, 219, 145, 97, 62, 49, 233, 4, 63, 148, 0, 96, 190, 74, 158, 3, 62, 244, 180, 18, 191, 4, 39, 251, 61, 100, 33, 4, 191, 252, 241, 142, 190, 241, 244, 173, 190, 1, 189, 42, 191, 110, 241, 130, 62, 74, 82, 56, 189, 97, 71, 6, 62, 199, 63, 234, 60, 76, 231, 117, 188, 80, 234, 79, 190, 221, 189, 144, 61, 169, 173, 50, 62, 38, 236, 116, 190, 80, 155, 253, 61, 117, 20, 232, 61, 39, 239, 198, 190, 164, 129, 139, 62, 42, 98, 28, 190, 216, 59, 62, 190, 97, 244, 117, 61, 69, 124, 244, 61, 84, 121, 128, 61, 231, 212, 84, 62, 138, 19, 180, 190, 242, 204, 48, 62, 152, 37, 18, 191, 244, 157, 71, 62, 253, 214, 76, 61, 195, 232, 219, 60, 75, 152, 3, 62, 53, 47, 78, 189, 76, 18, 212, 61, 245, 49, 34, 191, 139, 23, 109, 190, 200, 243, 181, 62, 243, 182, 141, 62, 183, 172, 30, 62, 113, 11, 150, 189, 110, 218, 126, 62, 204, 171, 173, 62, 79, 94, 210, 61, 143, 85, 159, 190, 95, 122, 55, 190, 123, 116, 37, 62, 194, 40, 158, 190, 33, 197, 36, 189, 146, 90, 154, 62, 229, 51, 172, 190, 19, 106, 38, 61, 69, 199, 235, 62, 223, 90, 66, 190, 232, 96, 61, 62, 51, 156, 91, 59, 35, 93, 7, 62, 161, 204, 59, 62, 154, 10, 163, 190, 68, 254, 238, 187, 106, 175, 142, 191, 37, 78, 154, 189, 86, 125, 242, 188, 215, 121, 209, 60, 138, 105, 24, 190, 55, 136, 99, 190, 58, 16, 74, 62, 30, 6, 128, 191, 215, 144, 201, 190, 226, 135, 251, 62, 41, 74, 68, 62, 17, 199, 149, 189, 86, 20, 132, 190, 246, 205, 118, 62, 46, 236, 164, 61, 161, 81, 178, 62, 33, 52, 0, 191, 17, 45, 188, 190, 123, 216, 133, 62, 18, 224, 40, 191, 110, 158, 54, 191, 98, 63, 211, 61, 49, 50, 147, 190, 53, 171, 137, 61, 114, 95, 43, 62, 210, 124, 117, 62, 145, 160, 8, 191, 76, 167, 103, 62, 120, 203, 39, 62, 17, 49, 129, 190, 77, 20, 139, 190, 163, 86, 26, 189, 226, 91, 31, 190, 167, 32, 123, 189, 14, 232, 13, 189, 200, 94, 7, 189, 73, 1, 178, 61, 55, 37, 129, 62, 178, 35, 19, 62, 206, 138, 24, 62, 137, 40, 62, 62, 133, 153, 100, 191, 255, 51, 85, 62, 80, 65, 133, 190, 125, 154, 65, 62, 152, 238, 165, 190, 248, 127, 205, 190, 62, 12, 96, 191, 46, 228, 159, 61, 70, 114, 175, 61, 187, 32, 84, 191, 71, 196, 148, 62, 156, 160, 212, 62, 26, 11, 18, 62, 120, 6, 226, 190, 101, 78, 50, 190, 62, 69, 198, 187, 164, 64, 139, 61, 138, 160, 64, 62, 50, 66, 179, 62, 203, 48, 6, 62, 46, 39, 196, 61, 101, 65, 192, 190, 64, 190, 243, 191, 15, 134, 11, 60, 178, 107, 56, 190, 89, 176, 73, 62, 153, 126, 181, 62, 65, 72, 167, 61, 215, 132, 145, 189, 216, 13, 128, 62, 28, 123, 32, 190, 193, 181, 39, 190, 173, 5, 55, 190, 205, 50, 6, 191, 195, 220, 203, 190, 231, 35, 25, 190, 76, 32, 209, 62, 47, 53, 95, 190, 18, 213, 38, 63, 26, 105, 128, 190, 61, 139, 45, 190, 197, 208, 13, 190, 124, 52, 149, 59, 94, 72, 185, 189, 219, 109, 10, 62, 60, 60, 121, 61, 55, 122, 134, 62, 171, 189, 34, 61, 1, 106, 9, 62, 121, 46, 151, 189, 84, 33, 190, 62, 44, 170, 151, 189, 163, 100, 39, 62, 176, 236, 135, 189, 231, 42, 183, 61, 217, 249, 242, 61, 9, 131, 29, 190, 196, 252, 63, 189, 175, 92, 7, 187, 210, 241, 219, 61, 185, 167, 53, 62, 148, 31, 64, 62, 249, 136, 39, 190, 123, 153, 101, 61, 106, 0, 91, 62, 187, 226, 223, 62, 20, 210, 123, 190, 32, 171, 7, 62, 130, 147, 19, 61, 199, 100, 48, 190, 52, 117, 200, 189, 114, 231, 231, 61, 131, 36, 14, 62, 53, 216, 124, 61, 185, 11, 18, 61, 8, 211, 147, 189, 254, 104, 39, 62, 67, 250, 114, 61, 28, 219, 214, 190, 7, 167, 16, 189, 183, 26, 62, 61, 168, 73, 51, 186, 173, 201, 22, 63, 236, 31, 179, 62, 54, 194, 85, 61, 244, 245, 178, 60, 213, 19, 218, 190, 127, 9, 216, 188, 34, 130, 82, 190, 75, 241, 145, 62, 247, 229, 157, 61, 252, 233, 1, 62, 224, 229, 154, 61, 74, 37, 106, 62, 148, 88, 141, 61, 201, 168, 100, 190, 196, 51, 128, 189, 52, 27, 156, 62, 231, 114, 175, 190, 137, 244, 21, 62, 38, 219, 219, 62, 32, 218, 189, 59, 76, 248, 167, 189, 180, 237, 155, 190, 175, 79, 196, 189, 63, 230, 88, 61, 109, 129, 72, 188, 126, 50, 135, 189, 57, 89, 97, 62, 151, 191, 129, 190, 235, 140, 197, 190, 196, 50, 186, 61, 226, 59, 81, 190, 199, 13, 198, 60, 45, 166, 156, 61, 145, 226, 232, 61, 14, 207, 14, 189, 50, 115, 134, 187, 40, 149, 52, 62, 205, 224, 238, 189, 7, 88, 250, 61, 18, 210, 197, 62, 32, 71, 16, 62, 98, 202, 19, 61, 86, 87, 2, 62, 111, 190, 96, 62, 211, 151, 200, 189, 69, 127, 161, 190, 251, 36, 104, 62, 23, 12, 163, 62, 112, 147, 248, 189, 10, 102, 124, 190, 44, 156, 213, 61, 249, 190, 23, 62, 87, 87, 35, 190, 65, 53, 192, 190, 245, 157, 137, 190, 252, 122, 40, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 200, 25, 190, 6, 145, 39, 190, 128, 130, 183, 60, 198, 243, 39, 62, 106, 87, 255, 189, 238, 48, 95, 61, 102, 122, 198, 61, 216, 154, 186, 189, 231, 143, 69, 62, 31, 113, 59, 190, 28, 87, 235, 189, 252, 178, 248, 61, 186, 246, 7, 62, 151, 179, 10, 62, 17, 165, 167, 187, 246, 105, 30, 189, 162, 209, 31, 62, 213, 176, 189, 62, 4, 158, 177, 62, 5, 186, 147, 188, 172, 248, 233, 190, 132, 136, 141, 62, 153, 130, 252, 189, 134, 66, 167, 62, 173, 4, 139, 61, 236, 75, 80, 61, 198, 62, 145, 62, 87, 0, 158, 62, 10, 26, 52, 62, 202, 25, 15, 62, 152, 208, 196, 62, 170, 36, 217, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 122, 187, 61, 114, 99, 175, 190, 127, 29, 102, 63, 224, 128, 141, 191, 205, 38, 254, 62, 252, 38, 251, 190, 44, 186, 145, 62, 94, 240, 5, 191, 173, 106, 134, 62, 212, 143, 160, 61, 142, 115, 34, 190, 73, 221, 156, 63, 104, 145, 213, 190, 230, 31, 172, 62, 18, 69, 152, 190, 15, 201, 191, 189, 73, 171, 24, 61, 18, 170, 67, 63, 60, 62, 211, 63, 3, 31, 67, 63, 70, 180, 137, 190, 124, 139, 48, 191, 58, 55, 20, 63, 40, 49, 79, 63, 83, 204, 216, 62, 5, 102, 190, 190, 181, 240, 15, 191, 100, 149, 223, 62, 146, 102, 56, 63, 126, 41, 49, 187, 198, 236, 133, 60, 83, 31, 81, 189, 32, 241, 225, 189, 162, 65, 25, 189, 47, 221, 55, 62, 0, 227, 23, 61, 26, 153, 97, 189, 237, 245, 158, 60, 34, 247, 186, 62, 10, 126, 4, 62, 225, 206, 24, 190, 176, 168, 228, 60, 251, 42, 166, 188, 65, 129, 211, 60, 81, 54, 60, 189, 178, 194, 147, 190, 6, 9, 79, 190, 191, 214, 45, 62, 105, 211, 179, 190, 186, 200, 165, 61, 79, 95, 129, 61, 250, 175, 131, 61, 45, 23, 154, 62, 0, 214, 82, 61, 46, 32, 136, 62, 127, 146, 178, 189, 234, 192, 247, 60, 141, 117, 1, 187, 139, 253, 38, 61, 71, 181, 97, 189, 10, 145, 218, 62, 226, 83, 171, 190, 110, 222, 251, 190, 55, 188, 112, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 182, 179, 58, 15, 114, 49, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {40, 107, 28, 63, 155, 92, 78, 62, 69, 82, 255, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {13, 203, 156, 63, 106, 228, 255, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0016/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}