// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 202, 167, 189, 52, 206, 127, 63, 87, 134, 176, 62, 204, 241, 32, 63, 9, 225, 16, 63, 186, 170, 70, 62, 238, 182, 54, 63, 106, 126, 66, 62, 239, 193, 160, 62, 53, 237, 251, 62, 156, 238, 155, 62, 238, 238, 15, 191, 64, 10, 252, 190, 100, 244, 176, 191, 113, 174, 143, 190, 13, 184, 48, 191, 43, 182, 99, 191, 37, 92, 174, 62, 248, 43, 16, 63, 58, 231, 2, 191, 90, 144, 247, 190, 102, 100, 43, 63, 53, 111, 35, 63, 99, 38, 9, 63, 246, 201, 15, 63, 123, 37, 249, 62, 153, 41, 54, 61, 0, 245, 247, 62, 141, 90, 199, 190, 191, 29, 234, 189, 121, 0, 196, 62, 116, 205, 52, 62, 156, 42, 198, 62, 130, 131, 201, 61, 128, 132, 140, 61, 28, 109, 3, 191, 253, 77, 21, 190, 177, 152, 167, 191, 70, 215, 192, 190, 230, 31, 180, 62, 146, 53, 119, 62, 124, 49, 226, 62, 40, 107, 217, 190, 117, 166, 113, 191, 151, 194, 41, 191, 30, 211, 44, 62, 27, 143, 183, 62, 155, 244, 190, 190, 33, 165, 150, 190, 17, 66, 236, 62, 114, 220, 104, 61, 149, 208, 137, 190, 121, 3, 139, 60, 163, 71, 163, 60, 106, 198, 221, 189, 107, 40, 61, 191, 191, 63, 21, 63, 214, 228, 246, 62, 172, 138, 179, 62, 177, 6, 213, 190, 91, 60, 81, 191, 147, 203, 179, 60, 212, 226, 5, 63, 10, 141, 182, 62, 119, 136, 92, 191, 229, 206, 55, 190, 234, 201, 55, 191, 163, 130, 103, 63, 236, 106, 15, 188, 221, 150, 110, 189, 57, 135, 128, 191, 1, 177, 137, 189, 135, 43, 69, 191, 213, 2, 55, 191, 5, 245, 156, 190, 224, 210, 39, 63, 112, 57, 133, 190, 164, 109, 32, 191, 55, 99, 2, 63, 117, 72, 9, 63, 93, 65, 230, 60, 253, 1, 50, 63, 41, 211, 47, 61, 248, 7, 130, 62, 103, 11, 41, 191, 84, 104, 143, 189, 117, 99, 191, 190, 149, 144, 147, 62, 75, 100, 156, 191, 126, 215, 130, 190, 21, 109, 35, 63, 180, 53, 187, 191, 26, 253, 181, 190, 7, 124, 236, 190, 236, 244, 85, 62, 175, 51, 71, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 227, 185, 190, 35, 112, 155, 190, 162, 162, 107, 61, 254, 97, 103, 191, 72, 27, 18, 190, 230, 186, 162, 190, 160, 213, 217, 189, 213, 23, 211, 190, 208, 187, 23, 190, 129, 10, 55, 62, 37, 92, 126, 190, 244, 44, 112, 191, 218, 93, 97, 62, 110, 48, 74, 191, 87, 105, 14, 189, 130, 106, 101, 189, 70, 52, 199, 62, 238, 42, 237, 190, 98, 164, 157, 62, 178, 168, 41, 63, 45, 162, 176, 190, 89, 169, 103, 188, 246, 150, 21, 63, 46, 27, 2, 63, 11, 54, 10, 191, 5, 67, 192, 190, 135, 20, 140, 59, 24, 168, 92, 191, 19, 184, 43, 190, 243, 186, 96, 61, 170, 15, 21, 189, 55, 76, 153, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 118, 19, 189, 203, 121, 24, 190, 52, 63, 22, 190, 25, 80, 161, 60, 250, 15, 240, 60, 161, 114, 170, 60, 208, 66, 4, 61, 157, 3, 204, 186, 68, 199, 58, 59, 172, 144, 46, 62, 54, 84, 53, 189, 94, 125, 41, 190, 30, 217, 186, 189, 210, 211, 131, 188, 193, 54, 215, 59, 45, 137, 156, 61, 78, 145, 34, 62, 112, 250, 0, 189, 216, 143, 21, 61, 64, 216, 154, 189, 198, 96, 141, 189, 173, 168, 12, 62, 253, 180, 105, 189, 149, 107, 1, 190, 251, 202, 22, 189, 250, 184, 210, 188, 97, 15, 143, 61, 24, 116, 250, 189, 120, 51, 27, 190, 178, 78, 196, 60, 234, 119, 92, 61, 248, 149, 207, 189, 121, 19, 239, 189, 85, 20, 244, 189, 212, 146, 157, 189, 171, 211, 43, 61, 65, 204, 226, 190, 0, 156, 14, 60, 158, 12, 204, 188, 154, 41, 160, 61, 164, 22, 82, 190, 100, 30, 244, 190, 191, 7, 99, 189, 181, 137, 36, 61, 190, 34, 94, 188, 13, 157, 174, 189, 209, 86, 227, 190, 57, 91, 185, 190, 199, 115, 176, 189, 38, 99, 157, 61, 76, 166, 130, 62, 221, 235, 150, 190, 209, 216, 105, 62, 72, 247, 240, 190, 198, 160, 39, 61, 41, 115, 98, 62, 106, 214, 7, 191, 84, 254, 162, 62, 170, 57, 103, 190, 217, 205, 120, 62, 248, 104, 93, 191, 62, 129, 225, 190, 127, 76, 20, 191, 250, 178, 95, 190, 114, 215, 203, 61, 52, 90, 63, 62, 5, 231, 29, 62, 80, 140, 255, 61, 121, 38, 140, 190, 248, 145, 25, 62, 193, 224, 49, 191, 154, 240, 78, 62, 16, 68, 156, 62, 223, 218, 167, 190, 62, 103, 103, 62, 227, 215, 146, 58, 170, 154, 131, 189, 129, 199, 158, 61, 19, 231, 24, 189, 146, 55, 191, 62, 196, 168, 178, 60, 38, 216, 93, 57, 250, 23, 21, 190, 221, 254, 142, 62, 91, 36, 161, 190, 47, 40, 138, 191, 208, 104, 197, 190, 20, 113, 144, 190, 63, 162, 38, 190, 139, 58, 14, 191, 92, 75, 155, 62, 175, 56, 171, 62, 172, 115, 115, 62, 66, 51, 148, 191, 34, 130, 154, 191, 185, 159, 26, 62, 60, 167, 103, 190, 239, 137, 146, 62, 130, 169, 41, 62, 238, 107, 225, 61, 166, 146, 173, 190, 165, 27, 255, 188, 8, 25, 91, 189, 253, 25, 40, 62, 238, 191, 44, 62, 67, 135, 65, 62, 110, 36, 136, 187, 39, 139, 214, 61, 133, 151, 31, 191, 187, 94, 72, 62, 152, 183, 10, 58, 177, 6, 195, 62, 225, 49, 38, 189, 44, 170, 12, 61, 66, 209, 47, 62, 111, 81, 100, 62, 165, 185, 144, 187, 144, 84, 55, 191, 145, 52, 20, 62, 246, 133, 204, 190, 171, 151, 149, 190, 14, 239, 214, 189, 84, 250, 169, 62, 1, 31, 172, 62, 136, 168, 236, 189, 167, 71, 158, 191, 13, 96, 108, 191, 107, 42, 232, 59, 155, 5, 179, 190, 107, 135, 9, 191, 42, 208, 143, 189, 21, 124, 142, 62, 182, 16, 212, 61, 250, 76, 76, 63, 123, 142, 128, 189, 26, 153, 38, 190, 86, 49, 79, 190, 9, 226, 152, 190, 2, 158, 135, 190, 78, 155, 13, 62, 35, 239, 166, 61, 67, 7, 119, 60, 69, 165, 55, 62, 166, 78, 184, 188, 100, 73, 150, 190, 160, 99, 230, 189, 39, 231, 112, 62, 71, 53, 151, 189, 163, 126, 9, 191, 241, 235, 154, 190, 125, 229, 21, 61, 242, 101, 7, 189, 36, 158, 60, 62, 192, 170, 224, 189, 137, 36, 76, 189, 186, 43, 85, 190, 88, 68, 227, 189, 57, 34, 110, 190, 16, 70, 160, 189, 64, 89, 46, 62, 89, 38, 128, 189, 96, 53, 7, 62, 101, 249, 75, 59, 139, 110, 228, 189, 23, 130, 165, 62, 222, 248, 176, 188, 96, 11, 96, 189, 178, 35, 181, 61, 90, 189, 113, 189, 199, 165, 168, 188, 244, 113, 20, 62, 130, 181, 167, 190, 231, 208, 9, 62, 183, 162, 1, 188, 99, 214, 53, 62, 35, 124, 255, 61, 27, 162, 76, 62, 61, 15, 31, 62, 201, 26, 123, 190, 33, 244, 214, 61, 108, 10, 157, 190, 100, 139, 69, 190, 4, 155, 123, 61, 193, 198, 129, 62, 225, 194, 161, 60, 180, 195, 242, 189, 244, 155, 112, 62, 139, 133, 42, 62, 211, 66, 148, 61, 202, 5, 192, 190, 127, 218, 206, 190, 245, 52, 47, 62, 52, 192, 92, 62, 140, 131, 246, 190, 7, 185, 42, 190, 48, 40, 110, 189, 69, 54, 25, 190, 188, 182, 237, 189, 199, 174, 41, 62, 213, 183, 108, 190, 127, 49, 214, 61, 189, 57, 213, 61, 8, 197, 233, 189, 53, 252, 28, 190, 18, 233, 225, 58, 95, 87, 109, 190, 88, 243, 24, 190, 238, 161, 226, 189, 14, 97, 84, 60, 11, 207, 178, 189, 171, 249, 129, 61, 132, 199, 198, 61, 4, 216, 207, 62, 180, 12, 113, 62, 57, 42, 168, 61, 248, 166, 33, 62, 42, 170, 76, 190, 27, 155, 78, 62, 88, 182, 174, 190, 39, 163, 236, 190, 122, 67, 153, 190, 169, 229, 90, 62, 128, 232, 176, 62, 138, 36, 228, 190, 47, 213, 73, 62, 195, 92, 71, 190, 215, 231, 90, 190, 196, 212, 178, 61, 85, 62, 3, 61, 217, 53, 80, 189, 245, 96, 195, 59, 80, 178, 100, 190, 234, 136, 231, 190, 171, 244, 130, 190, 188, 154, 42, 188, 232, 40, 162, 61, 171, 232, 155, 62, 118, 235, 16, 191, 230, 228, 103, 62, 186, 252, 158, 190, 135, 246, 52, 190, 247, 225, 219, 188, 6, 80, 102, 61, 160, 128, 24, 190, 162, 1, 212, 62, 201, 130, 10, 190, 113, 212, 132, 61, 124, 110, 149, 183, 188, 202, 144, 62, 35, 244, 201, 189, 245, 118, 176, 190, 121, 183, 29, 191, 86, 130, 77, 62, 219, 20, 107, 190, 92, 217, 78, 190, 88, 231, 113, 61, 190, 211, 226, 190, 177, 224, 116, 190, 15, 108, 17, 62, 102, 102, 109, 190, 159, 54, 158, 189, 178, 188, 216, 61, 73, 120, 148, 61, 130, 105, 129, 190, 166, 173, 129, 62, 112, 79, 43, 188, 15, 173, 195, 190, 126, 101, 222, 190, 123, 175, 218, 61, 55, 160, 242, 61, 145, 219, 137, 190, 66, 130, 43, 188, 250, 151, 184, 189, 226, 250, 247, 189, 125, 180, 61, 62, 216, 151, 36, 62, 37, 30, 188, 189, 66, 93, 130, 62, 92, 82, 35, 60, 236, 207, 30, 62, 35, 222, 9, 189, 138, 145, 34, 190, 238, 144, 172, 189, 34, 88, 60, 190, 10, 236, 20, 191, 4, 69, 131, 62, 66, 190, 117, 62, 91, 36, 12, 191, 166, 243, 168, 61, 97, 112, 207, 60, 193, 61, 205, 61, 185, 74, 233, 61, 255, 120, 231, 60, 12, 219, 153, 188, 73, 205, 44, 62, 137, 110, 222, 61, 120, 206, 168, 61, 26, 205, 26, 189, 164, 98, 112, 60, 189, 92, 177, 185, 237, 216, 5, 189, 163, 107, 126, 189, 67, 143, 213, 61, 240, 201, 129, 188, 13, 89, 30, 190, 230, 144, 7, 190, 193, 214, 138, 189, 57, 184, 111, 190, 198, 96, 245, 189, 238, 122, 6, 190, 172, 115, 202, 190, 6, 186, 233, 189, 1, 16, 119, 189, 249, 5, 2, 190, 68, 34, 70, 189, 50, 28, 254, 189, 203, 75, 44, 190, 193, 53, 37, 190, 187, 56, 135, 60, 196, 75, 30, 189, 211, 75, 207, 189, 74, 20, 232, 61, 122, 64, 195, 189, 187, 101, 8, 190, 58, 3, 14, 62, 28, 110, 162, 61, 148, 79, 86, 61, 119, 9, 160, 188, 118, 255, 134, 189, 30, 49, 39, 62, 209, 249, 1, 60, 102, 144, 16, 62, 49, 210, 162, 189, 169, 194, 22, 190, 142, 200, 35, 62, 233, 133, 251, 189, 159, 53, 153, 189, 186, 8, 13, 189, 90, 162, 13, 61, 49, 110, 94, 189, 241, 240, 6, 190, 47, 77, 22, 190, 38, 65, 141, 187, 209, 128, 237, 188, 157, 79, 124, 189, 131, 199, 67, 189, 10, 230, 23, 190, 99, 33, 250, 61, 208, 39, 204, 189, 29, 253, 16, 190, 77, 99, 35, 190, 16, 226, 111, 188, 15, 18, 229, 190, 37, 159, 190, 62, 193, 52, 22, 62, 138, 183, 226, 190, 222, 232, 193, 62, 61, 0, 123, 190, 50, 190, 9, 191, 189, 133, 41, 190, 16, 218, 64, 60, 12, 203, 4, 191, 50, 95, 32, 62, 8, 73, 255, 189, 238, 72, 120, 190, 75, 229, 230, 62, 166, 10, 123, 62, 110, 170, 126, 62, 137, 225, 154, 62, 216, 197, 167, 189, 158, 21, 200, 190, 15, 62, 136, 61, 189, 96, 30, 191, 71, 121, 21, 191, 176, 92, 175, 61, 71, 114, 157, 190, 180, 151, 131, 61, 116, 162, 12, 191, 102, 164, 56, 189, 226, 125, 246, 61, 241, 235, 184, 62, 156, 174, 199, 62, 33, 216, 12, 191, 163, 244, 69, 62, 214, 60, 66, 190, 75, 227, 153, 62, 156, 44, 42, 62, 59, 182, 94, 190, 89, 164, 131, 62, 67, 194, 15, 190, 63, 56, 99, 61, 89, 77, 197, 188, 107, 188, 152, 62, 140, 80, 164, 61, 249, 244, 23, 59, 193, 196, 159, 190, 20, 254, 199, 189, 232, 97, 227, 60, 30, 230, 80, 62, 119, 165, 58, 62, 170, 127, 174, 61, 245, 43, 155, 189, 17, 53, 68, 190, 51, 214, 50, 61, 14, 133, 22, 191, 43, 7, 99, 190, 21, 104, 97, 62, 168, 136, 144, 62, 123, 73, 110, 62, 58, 237, 114, 190, 88, 132, 165, 62, 143, 88, 106, 62, 142, 2, 124, 62, 20, 53, 130, 190, 206, 204, 154, 190, 203, 197, 5, 188, 12, 114, 215, 61, 150, 31, 53, 191, 73, 241, 219, 189, 96, 1, 191, 61, 132, 207, 248, 190, 206, 149, 207, 61, 158, 20, 168, 62, 118, 198, 148, 189, 20, 97, 89, 62, 176, 247, 175, 62, 50, 2, 227, 189, 52, 193, 70, 62, 237, 135, 29, 190, 141, 118, 251, 189, 70, 95, 66, 190, 83, 82, 198, 61, 150, 10, 227, 189, 156, 93, 236, 61, 54, 91, 16, 62, 222, 161, 16, 62, 71, 231, 168, 61, 44, 120, 22, 62, 119, 99, 43, 59, 4, 138, 183, 189, 95, 63, 197, 190, 117, 236, 15, 62, 96, 196, 139, 190, 71, 57, 163, 190, 237, 232, 79, 59, 230, 30, 191, 61, 204, 161, 216, 62, 117, 118, 24, 189, 229, 128, 171, 61, 144, 46, 204, 62, 47, 195, 51, 62, 25, 0, 129, 190, 225, 219, 65, 62, 52, 60, 173, 190, 46, 132, 97, 188, 13, 174, 239, 61, 6, 255, 195, 61, 0, 238, 209, 61, 147, 73, 174, 61, 163, 112, 111, 188, 134, 167, 32, 189, 224, 140, 24, 191, 120, 72, 140, 62, 217, 232, 153, 61, 173, 223, 121, 62, 138, 141, 50, 188, 173, 211, 247, 189, 50, 37, 21, 62, 36, 177, 82, 191, 128, 86, 193, 189, 39, 181, 166, 61, 204, 158, 109, 61, 7, 144, 13, 62, 133, 181, 204, 189, 19, 176, 136, 62, 153, 114, 6, 189, 236, 37, 168, 62, 245, 21, 128, 60, 77, 216, 14, 189, 136, 120, 253, 61, 209, 235, 50, 61, 157, 35, 19, 62, 212, 14, 240, 61, 183, 86, 127, 190, 33, 17, 157, 62, 1, 151, 64, 190, 137, 40, 135, 60, 78, 202, 33, 190, 3, 192, 165, 189, 247, 8, 155, 61, 200, 16, 177, 61, 92, 201, 243, 189, 149, 233, 204, 189, 194, 148, 240, 189, 114, 134, 5, 58, 57, 144, 185, 61, 46, 136, 68, 62, 46, 135, 0, 62, 18, 49, 105, 61, 72, 39, 211, 61, 242, 249, 151, 190, 166, 124, 223, 189, 138, 241, 2, 189, 226, 126, 149, 60, 118, 142, 49, 62, 60, 114, 135, 190, 124, 59, 138, 62, 244, 220, 224, 61, 80, 35, 70, 62, 47, 161, 24, 190, 187, 110, 247, 189, 234, 77, 29, 62, 170, 129, 111, 61, 192, 31, 5, 61, 24, 221, 71, 62, 161, 17, 226, 61, 228, 167, 131, 190, 74, 218, 148, 189, 115, 78, 57, 62, 103, 45, 102, 189, 91, 132, 38, 62, 103, 26, 5, 62, 51, 58, 8, 62, 14, 178, 16, 190, 31, 89, 9, 191, 215, 225, 117, 61, 24, 176, 2, 190, 51, 150, 8, 190, 4, 97, 186, 61, 123, 115, 240, 61, 62, 187, 55, 61, 78, 112, 239, 60, 110, 5, 37, 62, 149, 222, 14, 61, 105, 65, 247, 190, 83, 10, 140, 189, 97, 3, 251, 59, 99, 101, 67, 61, 53, 170, 205, 61, 74, 11, 172, 187, 205, 132, 151, 190, 220, 84, 160, 60, 172, 214, 225, 189, 227, 24, 92, 190, 25, 225, 1, 191, 189, 161, 38, 191, 57, 178, 31, 189, 241, 111, 82, 62, 19, 156, 135, 191, 155, 4, 162, 190, 6, 140, 142, 62, 217, 213, 141, 190, 251, 210, 56, 62, 5, 141, 88, 189, 138, 24, 46, 190, 53, 1, 229, 188, 60, 121, 240, 190, 152, 63, 142, 61, 87, 133, 148, 191, 155, 110, 0, 191, 130, 89, 123, 62, 174, 0, 96, 60, 159, 54, 226, 61, 219, 79, 24, 188, 248, 71, 207, 62, 176, 95, 170, 62, 192, 97, 71, 61, 36, 19, 69, 62, 27, 117, 119, 191, 5, 0, 128, 62, 224, 24, 160, 190, 65, 93, 183, 190, 40, 26, 52, 190, 199, 145, 171, 61, 186, 208, 168, 62, 98, 122, 158, 190, 1, 2, 73, 189, 34, 237, 133, 191, 69, 162, 216, 61, 188, 187, 23, 61, 148, 190, 160, 191, 153, 244, 207, 190, 92, 95, 75, 190, 38, 242, 128, 190, 65, 201, 11, 190, 75, 135, 140, 188, 88, 30, 66, 61, 17, 69, 227, 61, 132, 31, 83, 191, 70, 32, 44, 61, 142, 195, 112, 191, 164, 193, 163, 191, 38, 6, 59, 62, 29, 29, 123, 189, 223, 229, 34, 62, 25, 42, 195, 190, 205, 138, 183, 62, 219, 87, 22, 63, 159, 11, 225, 62, 19, 96, 170, 187, 160, 29, 68, 191, 120, 237, 77, 190, 243, 42, 25, 191, 30, 240, 66, 191, 132, 139, 22, 62, 76, 19, 245, 62, 112, 145, 180, 62, 220, 164, 2, 190, 6, 214, 180, 189, 176, 66, 123, 191, 147, 144, 132, 190, 227, 219, 186, 62, 129, 201, 169, 190, 193, 210, 131, 62, 252, 249, 141, 189, 100, 240, 23, 190, 11, 214, 135, 61, 242, 143, 49, 62, 213, 54, 132, 190, 188, 203, 69, 62, 243, 62, 243, 61, 31, 165, 38, 189, 224, 254, 167, 60, 135, 75, 106, 61, 232, 127, 191, 190, 130, 110, 131, 188, 20, 97, 220, 62, 135, 246, 30, 187, 131, 63, 57, 62, 106, 234, 27, 62, 141, 22, 140, 190, 46, 195, 118, 62, 8, 187, 36, 190, 213, 39, 100, 62, 8, 10, 215, 188, 246, 103, 202, 190, 57, 199, 132, 189, 20, 63, 28, 62, 195, 213, 171, 188, 96, 223, 92, 190, 40, 114, 118, 190, 150, 230, 136, 62, 235, 34, 34, 190, 104, 65, 80, 62, 208, 94, 176, 190, 183, 59, 8, 62, 104, 58, 17, 62, 229, 115, 18, 190, 130, 58, 92, 190, 171, 31, 72, 62, 32, 84, 173, 60, 4, 65, 46, 62, 80, 16, 213, 61, 235, 80, 19, 62, 119, 66, 118, 189, 122, 1, 42, 61, 238, 150, 33, 189, 133, 223, 39, 61, 235, 113, 118, 62, 72, 226, 43, 61, 67, 118, 195, 62, 251, 70, 114, 187, 154, 128, 140, 59, 174, 59, 41, 61, 121, 79, 167, 188, 82, 208, 145, 62, 107, 65, 4, 191, 77, 134, 135, 62, 104, 77, 144, 190, 205, 191, 64, 62, 168, 116, 89, 61, 49, 125, 138, 190, 79, 59, 149, 190, 136, 104, 130, 62, 191, 3, 170, 62, 101, 174, 199, 190, 43, 36, 153, 62, 187, 232, 190, 61, 97, 9, 52, 190, 246, 140, 177, 62, 211, 33, 211, 62, 180, 120, 129, 189, 223, 0, 156, 62, 103, 134, 181, 190, 237, 11, 37, 62, 238, 148, 156, 62, 242, 191, 133, 62, 249, 248, 15, 62, 69, 117, 196, 189, 48, 185, 136, 61, 54, 249, 132, 190, 241, 156, 199, 61, 126, 75, 195, 190, 13, 247, 178, 190, 26, 120, 48, 188, 96, 126, 223, 60, 176, 171, 237, 61, 191, 128, 69, 190, 85, 159, 176, 62, 15, 86, 21, 63, 3, 31, 80, 62, 91, 145, 197, 190, 111, 41, 139, 190, 242, 221, 78, 62, 141, 174, 223, 190, 167, 151, 90, 191, 138, 232, 67, 190, 87, 68, 117, 62, 118, 170, 148, 190, 24, 241, 12, 61, 18, 156, 130, 62, 137, 8, 187, 190, 84, 227, 132, 187, 170, 158, 59, 62, 30, 166, 32, 190, 153, 130, 232, 61, 138, 72, 201, 61, 223, 32, 134, 190, 145, 211, 64, 190, 218, 166, 45, 190, 182, 115, 242, 190, 65, 93, 216, 189, 143, 204, 169, 62, 148, 142, 13, 61, 32, 105, 11, 63, 94, 112, 115, 62, 35, 22, 223, 189, 43, 142, 175, 189, 123, 106, 123, 190, 23, 250, 17, 62, 53, 54, 190, 190, 76, 249, 3, 191, 49, 149, 14, 190, 15, 69, 11, 62, 244, 7, 173, 62, 73, 58, 111, 60, 82, 47, 234, 61, 193, 255, 76, 189, 200, 67, 128, 189, 55, 33, 147, 190, 68, 13, 118, 191, 250, 67, 156, 190, 189, 9, 146, 189, 162, 245, 59, 62, 143, 47, 31, 62, 253, 145, 132, 190, 11, 37, 139, 60, 211, 200, 11, 190, 45, 127, 218, 190, 33, 103, 93, 61, 168, 212, 67, 191, 184, 10, 162, 191, 1, 174, 217, 62, 52, 89, 89, 189, 183, 80, 115, 61, 175, 160, 13, 191, 239, 97, 6, 62, 156, 139, 91, 61, 62, 145, 75, 62, 30, 226, 84, 189, 123, 86, 84, 191, 78, 137, 17, 62, 80, 81, 199, 189, 122, 31, 174, 190, 80, 66, 159, 62, 78, 20, 48, 62, 78, 60, 160, 188, 168, 23, 142, 189, 187, 195, 240, 189, 98, 221, 113, 62, 120, 179, 239, 61, 185, 41, 82, 62, 83, 30, 70, 190, 216, 202, 54, 62, 107, 128, 179, 188, 236, 55, 64, 62, 22, 30, 144, 62, 88, 14, 254, 189, 211, 132, 39, 62, 20, 192, 27, 62, 178, 151, 67, 190, 186, 156, 58, 61, 134, 138, 70, 62, 58, 69, 222, 62, 53, 99, 75, 190, 74, 158, 3, 62, 188, 79, 232, 190, 98, 246, 202, 61, 53, 185, 231, 190, 253, 15, 89, 190, 87, 13, 62, 190, 207, 166, 178, 190, 54, 250, 50, 62, 243, 24, 236, 189, 148, 180, 200, 61, 129, 228, 171, 61, 62, 42, 86, 189, 3, 169, 239, 189, 37, 206, 224, 61, 17, 142, 58, 62, 83, 98, 255, 189, 207, 237, 57, 62, 248, 200, 220, 61, 60, 247, 201, 190, 44, 151, 139, 62, 27, 250, 125, 189, 10, 251, 49, 190, 6, 208, 172, 60, 134, 99, 12, 62, 217, 234, 144, 61, 150, 241, 137, 61, 146, 165, 171, 190, 124, 17, 243, 60, 207, 19, 212, 190, 215, 47, 64, 62, 234, 188, 237, 61, 251, 51, 87, 61, 75, 152, 3, 62, 42, 204, 160, 57, 95, 11, 2, 62, 224, 127, 3, 191, 103, 208, 131, 190, 172, 100, 129, 62, 14, 108, 35, 62, 163, 142, 247, 61, 150, 20, 251, 188, 170, 118, 148, 62, 131, 247, 143, 61, 69, 109, 192, 61, 0, 21, 174, 190, 190, 120, 59, 190, 121, 234, 252, 61, 30, 126, 50, 190, 97, 96, 211, 60, 130, 149, 166, 62, 85, 23, 176, 190, 213, 111, 190, 60, 24, 26, 4, 63, 220, 189, 32, 190, 122, 205, 107, 62, 90, 54, 181, 60, 210, 0, 12, 62, 129, 121, 14, 62, 81, 87, 150, 190, 126, 14, 80, 190, 208, 147, 82, 191, 108, 66, 63, 189, 47, 127, 72, 61, 13, 8, 97, 61, 138, 105, 24, 190, 102, 214, 36, 190, 23, 229, 103, 62, 177, 175, 54, 191, 245, 19, 215, 190, 174, 10, 191, 62, 42, 195, 203, 61, 119, 21, 156, 188, 186, 118, 65, 190, 211, 161, 144, 62, 24, 44, 225, 61, 6, 135, 197, 62, 144, 227, 6, 191, 44, 202, 189, 190, 78, 147, 130, 62, 200, 95, 241, 190, 20, 115, 65, 191, 163, 195, 231, 61, 221, 6, 82, 188, 85, 162, 194, 189, 89, 97, 184, 60, 32, 104, 128, 62, 228, 189, 244, 190, 19, 61, 79, 62, 54, 64, 39, 62, 176, 40, 27, 190, 124, 253, 31, 60, 188, 130, 188, 61, 122, 160, 213, 189, 91, 129, 29, 189, 98, 214, 96, 190, 7, 147, 131, 189, 73, 1, 178, 61, 241, 171, 26, 62, 167, 40, 246, 61, 65, 157, 60, 62, 174, 154, 88, 62, 185, 102, 101, 190, 130, 123, 107, 62, 76, 37, 76, 190, 9, 135, 12, 62, 243, 154, 188, 190, 25, 195, 173, 190, 205, 30, 15, 191, 11, 151, 174, 61, 173, 49, 213, 61, 94, 225, 221, 190, 144, 101, 150, 62, 8, 254, 114, 62, 244, 94, 56, 61, 143, 14, 65, 190, 108, 138, 43, 190, 87, 227, 23, 61, 19, 45, 106, 189, 69, 67, 242, 61, 178, 98, 95, 62, 229, 29, 16, 61, 217, 134, 234, 61, 191, 140, 77, 190, 196, 107, 71, 191, 115, 39, 10, 61, 253, 24, 3, 190, 164, 179, 71, 189, 87, 238, 141, 62, 65, 72, 167, 61, 94, 6, 141, 189, 27, 192, 9, 62, 215, 68, 244, 189, 253, 114, 100, 190, 120, 96, 242, 188, 58, 19, 164, 190, 57, 203, 159, 190, 246, 183, 182, 190, 201, 90, 129, 62, 246, 63, 56, 190, 119, 230, 242, 62, 174, 150, 150, 190, 21, 156, 120, 190, 172, 63, 252, 60, 111, 41, 87, 61, 242, 170, 140, 189, 129, 55, 61, 62, 41, 50, 32, 61, 33, 6, 44, 62, 120, 251, 142, 61, 197, 89, 11, 62, 83, 83, 151, 189, 21, 19, 194, 62, 229, 154, 149, 189, 139, 242, 5, 62, 93, 165, 73, 61, 9, 66, 79, 189, 83, 117, 45, 62, 16, 195, 26, 190, 224, 56, 77, 189, 32, 135, 124, 61, 210, 241, 219, 61, 255, 183, 224, 61, 224, 164, 80, 62, 235, 88, 212, 188, 237, 98, 111, 59, 34, 8, 105, 62, 15, 179, 133, 62, 21, 59, 76, 190, 178, 16, 189, 61, 94, 61, 74, 60, 91, 163, 142, 190, 56, 6, 159, 60, 64, 136, 246, 60, 99, 235, 173, 61, 68, 39, 160, 61, 34, 104, 135, 61, 140, 113, 176, 189, 17, 228, 25, 62, 150, 235, 164, 186, 173, 126, 52, 190, 25, 172, 213, 60, 184, 74, 92, 60, 102, 155, 18, 189, 255, 114, 15, 63, 148, 101, 163, 62, 184, 255, 229, 188, 97, 88, 220, 61, 154, 162, 1, 191, 133, 54, 37, 187, 97, 14, 14, 190, 190, 252, 118, 62, 108, 26, 11, 62, 252, 233, 1, 62, 30, 0, 130, 60, 19, 126, 74, 62, 205, 198, 49, 62, 8, 160, 125, 190, 223, 176, 119, 189, 167, 246, 78, 62, 5, 69, 47, 190, 10, 223, 137, 61, 255, 172, 183, 62, 224, 2, 233, 189, 151, 140, 6, 61, 226, 41, 172, 190, 49, 151, 6, 190, 239, 122, 241, 60, 79, 169, 242, 60, 144, 54, 252, 186, 36, 230, 109, 62, 90, 87, 139, 190, 135, 128, 122, 190, 30, 190, 1, 62, 239, 22, 49, 190, 236, 250, 172, 60, 54, 88, 207, 61, 6, 17, 232, 61, 30, 111, 219, 189, 21, 173, 97, 61, 153, 185, 96, 189, 82, 217, 126, 189, 183, 202, 62, 62, 192, 225, 229, 62, 133, 74, 71, 62, 98, 202, 19, 61, 117, 133, 182, 61, 145, 95, 126, 62, 57, 125, 210, 188, 42, 124, 180, 190, 130, 115, 31, 62, 139, 251, 16, 62, 228, 198, 1, 61, 53, 156, 82, 190, 62, 73, 6, 62, 19, 184, 36, 61, 62, 164, 140, 189, 22, 245, 214, 190, 198, 126, 147, 190, 7, 173, 31, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 200, 25, 190, 24, 187, 226, 189, 248, 8, 25, 189, 199, 62, 87, 61, 123, 238, 25, 190, 16, 47, 24, 189, 236, 216, 146, 61, 249, 163, 153, 188, 141, 64, 44, 62, 31, 113, 59, 190, 28, 87, 235, 189, 235, 248, 75, 62, 232, 247, 8, 62, 185, 192, 23, 62, 115, 246, 98, 188, 249, 68, 164, 188, 231, 209, 39, 62, 18, 11, 196, 62, 96, 154, 143, 62, 180, 89, 59, 189, 199, 251, 219, 190, 170, 57, 145, 62, 91, 2, 41, 190, 57, 114, 100, 62, 112, 156, 215, 61, 100, 4, 81, 61, 29, 214, 143, 62, 114, 216, 144, 62, 179, 164, 177, 61, 194, 11, 249, 61, 176, 52, 181, 62, 100, 41, 194, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 122, 187, 61, 98, 27, 162, 190, 39, 218, 52, 63, 153, 152, 48, 191, 126, 113, 241, 62, 251, 222, 128, 190, 216, 197, 149, 62, 172, 192, 186, 190, 247, 49, 70, 62, 212, 143, 160, 61, 142, 115, 34, 190, 106, 201, 138, 63, 14, 231, 238, 190, 122, 19, 179, 62, 182, 99, 163, 190, 213, 248, 149, 189, 48, 223, 122, 188, 139, 78, 56, 63, 84, 107, 187, 63, 240, 208, 38, 63, 54, 210, 136, 190, 141, 209, 65, 191, 89, 217, 248, 62, 215, 30, 53, 63, 20, 199, 161, 62, 171, 240, 228, 190, 111, 200, 26, 191, 86, 102, 180, 62, 147, 160, 168, 62, 212, 224, 163, 60, 88, 28, 138, 188, 54, 177, 45, 190, 32, 241, 225, 189, 158, 90, 7, 190, 228, 247, 112, 62, 43, 48, 128, 62, 5, 42, 167, 189, 79, 110, 129, 61, 243, 52, 134, 62, 36, 101, 245, 61, 157, 99, 46, 190, 176, 168, 228, 60, 251, 42, 166, 188, 117, 86, 106, 61, 142, 255, 183, 188, 67, 140, 94, 190, 118, 18, 4, 190, 224, 15, 204, 60, 91, 168, 193, 190, 9, 29, 195, 60, 171, 250, 123, 61, 215, 155, 210, 61, 56, 241, 105, 62, 59, 115, 245, 61, 230, 97, 192, 62, 75, 2, 17, 61, 252, 70, 16, 61, 2, 59, 208, 61, 242, 219, 217, 61, 124, 176, 212, 189, 91, 47, 49, 62, 129, 75, 97, 190, 1, 150, 214, 190, 142, 45, 63, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {150, 220, 89, 185, 42, 133, 15, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {85, 214, 167, 63, 10, 86, 214, 61, 157, 75, 163, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {202, 52, 247, 63, 74, 13, 218, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0016/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}