// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 229, 167, 190, 199, 200, 68, 63, 219, 67, 182, 62, 84, 217, 225, 62, 10, 254, 5, 63, 188, 238, 142, 61, 15, 8, 2, 63, 220, 79, 132, 62, 8, 159, 195, 62, 212, 243, 178, 62, 129, 64, 214, 62, 17, 92, 13, 191, 170, 248, 244, 190, 7, 243, 139, 62, 63, 176, 190, 190, 124, 233, 220, 187, 197, 142, 39, 191, 192, 106, 205, 62, 113, 124, 39, 63, 57, 144, 219, 58, 164, 14, 216, 190, 214, 234, 250, 62, 66, 56, 78, 62, 0, 1, 19, 63, 116, 85, 0, 63, 119, 74, 117, 61, 54, 228, 137, 61, 247, 70, 19, 63, 96, 55, 160, 62, 71, 97, 152, 190, 216, 101, 133, 62, 143, 29, 65, 188, 173, 204, 201, 62, 167, 252, 111, 61, 88, 78, 93, 62, 28, 30, 5, 191, 213, 29, 37, 189, 145, 134, 79, 191, 246, 130, 179, 190, 254, 169, 54, 62, 146, 210, 176, 190, 219, 74, 215, 62, 1, 147, 151, 190, 85, 93, 48, 61, 130, 46, 9, 191, 14, 191, 228, 58, 58, 69, 49, 63, 113, 230, 20, 190, 48, 188, 12, 190, 233, 224, 172, 62, 123, 68, 151, 61, 149, 208, 137, 190, 121, 3, 139, 60, 163, 71, 163, 60, 234, 166, 17, 190, 199, 37, 131, 191, 71, 92, 195, 62, 133, 197, 253, 62, 201, 228, 212, 62, 249, 36, 206, 190, 84, 245, 46, 191, 33, 138, 68, 191, 171, 2, 103, 62, 148, 1, 136, 62, 66, 120, 78, 190, 249, 97, 14, 190, 145, 150, 2, 191, 70, 125, 182, 62, 31, 80, 138, 190, 81, 180, 51, 62, 53, 97, 118, 191, 215, 4, 184, 189, 139, 177, 199, 190, 19, 133, 60, 62, 78, 166, 233, 190, 3, 230, 49, 63, 72, 86, 118, 62, 8, 70, 22, 191, 214, 26, 66, 62, 66, 22, 16, 63, 130, 207, 147, 61, 219, 6, 140, 189, 94, 169, 13, 190, 133, 178, 151, 62, 191, 221, 246, 190, 74, 18, 194, 62, 13, 164, 130, 190, 180, 51, 198, 61, 192, 225, 62, 191, 116, 4, 66, 190, 69, 212, 180, 62, 35, 47, 76, 191, 238, 196, 246, 190, 167, 245, 9, 191, 222, 80, 77, 63, 233, 50, 250, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 30, 225, 190, 135, 26, 146, 190, 165, 130, 118, 62, 123, 10, 23, 191, 41, 19, 50, 190, 229, 121, 203, 190, 163, 0, 143, 189, 117, 130, 187, 190, 108, 24, 240, 61, 165, 123, 151, 62, 248, 106, 138, 190, 12, 222, 28, 191, 59, 20, 127, 62, 7, 10, 14, 191, 85, 33, 102, 190, 13, 247, 237, 61, 21, 128, 175, 62, 238, 42, 237, 190, 176, 123, 223, 62, 224, 187, 54, 63, 37, 203, 161, 190, 52, 9, 233, 61, 98, 182, 54, 63, 238, 80, 41, 63, 174, 32, 14, 191, 58, 147, 183, 190, 125, 19, 148, 62, 225, 86, 19, 191, 172, 170, 203, 189, 173, 8, 165, 62, 216, 36, 246, 61, 24, 213, 77, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 118, 19, 189, 203, 121, 24, 190, 52, 63, 22, 190, 25, 80, 161, 60, 250, 15, 240, 60, 161, 114, 170, 60, 208, 66, 4, 61, 157, 3, 204, 186, 68, 199, 58, 59, 172, 144, 46, 62, 54, 84, 53, 189, 94, 125, 41, 190, 30, 217, 186, 189, 210, 211, 131, 188, 193, 54, 215, 59, 45, 137, 156, 61, 78, 145, 34, 62, 112, 250, 0, 189, 216, 143, 21, 61, 64, 216, 154, 189, 198, 96, 141, 189, 173, 168, 12, 62, 253, 180, 105, 189, 149, 107, 1, 190, 251, 202, 22, 189, 250, 184, 210, 188, 97, 15, 143, 61, 24, 116, 250, 189, 120, 51, 27, 190, 178, 78, 196, 60, 234, 119, 92, 61, 248, 149, 207, 189, 19, 241, 173, 59, 241, 102, 157, 189, 102, 28, 43, 188, 125, 80, 201, 189, 161, 83, 205, 189, 221, 75, 6, 189, 171, 191, 77, 190, 191, 248, 10, 62, 37, 141, 13, 190, 23, 246, 103, 190, 150, 140, 155, 58, 76, 184, 121, 61, 192, 21, 180, 60, 214, 110, 242, 189, 190, 115, 40, 189, 208, 38, 79, 190, 9, 216, 92, 189, 38, 99, 157, 61, 175, 121, 65, 62, 250, 35, 47, 61, 235, 183, 176, 61, 174, 75, 6, 62, 75, 149, 137, 189, 48, 255, 46, 62, 158, 102, 110, 188, 88, 197, 142, 189, 146, 10, 204, 189, 103, 250, 164, 60, 157, 62, 154, 190, 152, 163, 14, 62, 116, 204, 51, 187, 2, 237, 172, 61, 206, 63, 32, 62, 0, 182, 95, 189, 231, 104, 83, 61, 154, 157, 192, 188, 137, 185, 56, 190, 236, 185, 84, 61, 228, 108, 246, 61, 24, 177, 218, 61, 250, 88, 11, 190, 136, 36, 90, 189, 75, 153, 24, 62, 135, 18, 15, 190, 89, 117, 73, 61, 233, 242, 173, 61, 28, 202, 50, 190, 161, 196, 5, 62, 7, 226, 104, 61, 38, 216, 93, 57, 49, 144, 208, 189, 169, 79, 108, 61, 80, 149, 13, 190, 138, 40, 253, 186, 34, 179, 191, 190, 101, 194, 16, 190, 59, 224, 141, 189, 0, 114, 63, 190, 199, 86, 183, 61, 91, 1, 19, 62, 193, 198, 15, 190, 215, 97, 43, 190, 106, 138, 202, 189, 176, 29, 109, 189, 200, 18, 110, 188, 231, 42, 14, 62, 236, 128, 225, 61, 10, 60, 20, 190, 189, 75, 211, 189, 45, 123, 10, 189, 213, 245, 87, 61, 12, 252, 30, 62, 181, 252, 190, 61, 214, 195, 204, 61, 203, 212, 172, 188, 88, 232, 172, 61, 103, 85, 17, 61, 248, 109, 137, 60, 236, 253, 16, 62, 3, 247, 57, 62, 178, 170, 186, 189, 44, 170, 12, 61, 141, 61, 35, 62, 108, 121, 200, 61, 52, 137, 180, 61, 6, 149, 39, 189, 10, 127, 108, 190, 75, 103, 155, 190, 180, 239, 3, 190, 38, 156, 181, 189, 106, 103, 14, 61, 49, 175, 213, 189, 142, 61, 232, 60, 12, 174, 14, 190, 228, 193, 12, 190, 64, 96, 218, 189, 174, 37, 21, 190, 20, 239, 25, 61, 207, 246, 31, 189, 112, 59, 33, 62, 59, 201, 130, 61, 199, 52, 68, 61, 48, 183, 17, 61, 84, 160, 48, 189, 33, 186, 19, 61, 209, 134, 241, 189, 165, 210, 13, 190, 96, 86, 245, 60, 193, 52, 166, 60, 135, 60, 193, 61, 142, 13, 221, 61, 190, 77, 227, 189, 69, 116, 48, 188, 160, 99, 230, 189, 46, 204, 214, 61, 191, 70, 158, 189, 86, 225, 222, 189, 45, 161, 188, 189, 36, 92, 139, 61, 212, 203, 249, 189, 8, 46, 16, 62, 6, 19, 161, 189, 207, 190, 239, 61, 26, 202, 204, 189, 73, 162, 56, 190, 104, 169, 31, 190, 155, 236, 105, 61, 9, 106, 196, 61, 209, 253, 53, 62, 205, 32, 254, 61, 120, 156, 249, 61, 116, 122, 62, 61, 223, 195, 227, 61, 78, 190, 215, 60, 180, 6, 14, 61, 254, 52, 17, 62, 68, 175, 250, 188, 46, 141, 195, 60, 106, 122, 56, 62, 33, 174, 23, 190, 193, 200, 122, 61, 252, 157, 209, 187, 111, 60, 233, 61, 242, 102, 92, 62, 98, 250, 128, 62, 61, 15, 31, 62, 231, 210, 228, 189, 115, 225, 4, 62, 84, 77, 187, 189, 39, 76, 171, 61, 228, 87, 194, 188, 35, 142, 107, 189, 67, 11, 226, 189, 80, 245, 1, 189, 191, 198, 99, 62, 55, 236, 143, 60, 249, 118, 63, 61, 9, 152, 10, 190, 116, 24, 27, 190, 120, 213, 56, 62, 96, 4, 167, 61, 13, 216, 80, 189, 12, 92, 62, 190, 222, 120, 243, 59, 0, 83, 169, 189, 167, 227, 137, 187, 22, 205, 174, 61, 195, 17, 123, 190, 69, 99, 3, 188, 111, 235, 176, 61, 222, 179, 10, 190, 95, 119, 89, 189, 228, 159, 57, 189, 196, 83, 210, 189, 21, 36, 41, 188, 36, 236, 209, 188, 188, 211, 228, 189, 11, 207, 178, 189, 98, 61, 230, 61, 143, 218, 183, 61, 87, 215, 208, 62, 22, 46, 118, 188, 175, 98, 240, 61, 211, 113, 56, 62, 210, 117, 174, 189, 179, 87, 41, 62, 187, 78, 136, 190, 48, 147, 14, 183, 152, 199, 178, 186, 154, 123, 193, 188, 185, 184, 17, 62, 2, 124, 14, 190, 4, 81, 43, 190, 207, 173, 155, 189, 64, 88, 230, 60, 52, 158, 11, 62, 11, 198, 200, 189, 100, 161, 43, 61, 41, 132, 147, 188, 48, 98, 139, 59, 190, 138, 31, 190, 246, 78, 219, 189, 92, 65, 213, 61, 97, 47, 151, 61, 212, 204, 189, 61, 240, 87, 21, 189, 132, 113, 74, 61, 114, 229, 70, 190, 131, 137, 106, 190, 247, 225, 219, 188, 220, 205, 196, 61, 39, 139, 64, 61, 83, 20, 170, 61, 158, 249, 129, 61, 140, 224, 69, 61, 204, 158, 101, 60, 126, 238, 1, 62, 110, 246, 46, 190, 142, 197, 107, 189, 84, 91, 31, 189, 247, 131, 168, 61, 24, 89, 212, 189, 56, 85, 229, 189, 235, 215, 72, 61, 196, 74, 64, 190, 68, 2, 146, 189, 154, 177, 166, 61, 108, 25, 228, 189, 232, 201, 201, 189, 40, 12, 49, 189, 190, 119, 252, 61, 83, 8, 227, 189, 6, 144, 197, 61, 148, 39, 30, 189, 24, 150, 126, 190, 24, 139, 244, 189, 114, 73, 22, 62, 234, 39, 34, 61, 206, 159, 108, 189, 246, 138, 23, 188, 83, 231, 134, 189, 226, 250, 247, 189, 44, 157, 98, 62, 74, 155, 43, 62, 7, 51, 79, 61, 15, 73, 36, 62, 139, 229, 54, 62, 39, 8, 178, 61, 140, 104, 164, 61, 93, 56, 5, 189, 234, 110, 145, 190, 57, 107, 182, 60, 221, 129, 36, 190, 122, 74, 46, 62, 142, 57, 60, 62, 140, 4, 133, 59, 70, 103, 10, 62, 227, 1, 164, 188, 213, 92, 221, 61, 185, 74, 233, 61, 255, 120, 231, 60, 21, 114, 109, 61, 165, 184, 44, 62, 135, 248, 3, 62, 18, 4, 137, 189, 96, 202, 46, 190, 157, 197, 53, 61, 189, 92, 177, 185, 235, 195, 21, 189, 184, 219, 37, 189, 67, 143, 213, 61, 144, 236, 58, 61, 169, 223, 96, 189, 230, 144, 7, 190, 119, 191, 161, 57, 21, 139, 40, 190, 120, 255, 17, 60, 9, 74, 248, 189, 148, 45, 221, 189, 82, 182, 3, 190, 1, 16, 119, 189, 249, 5, 2, 190, 30, 81, 133, 189, 53, 216, 149, 189, 7, 77, 44, 190, 60, 108, 233, 189, 234, 75, 134, 60, 110, 216, 29, 189, 211, 75, 207, 189, 19, 5, 233, 61, 98, 125, 170, 189, 241, 91, 0, 190, 99, 41, 23, 62, 38, 81, 226, 61, 200, 177, 115, 61, 155, 208, 213, 187, 118, 255, 134, 189, 212, 187, 41, 62, 214, 48, 181, 60, 42, 253, 23, 62, 158, 237, 155, 189, 87, 154, 15, 190, 251, 56, 45, 62, 80, 5, 235, 189, 155, 67, 119, 189, 186, 8, 13, 189, 64, 182, 134, 61, 185, 158, 63, 189, 222, 253, 205, 189, 83, 107, 21, 190, 216, 77, 72, 60, 219, 18, 159, 187, 25, 215, 84, 189, 227, 219, 31, 189, 10, 230, 23, 190, 197, 9, 9, 62, 11, 46, 189, 189, 29, 253, 16, 190, 59, 215, 30, 190, 229, 12, 153, 187, 6, 28, 241, 60, 14, 160, 38, 62, 252, 185, 19, 62, 94, 62, 43, 61, 162, 244, 23, 62, 217, 130, 186, 61, 204, 245, 205, 60, 61, 168, 219, 189, 78, 53, 43, 61, 240, 6, 3, 189, 11, 32, 18, 62, 224, 39, 43, 62, 41, 55, 20, 190, 87, 38, 0, 62, 145, 228, 88, 61, 84, 122, 14, 62, 91, 114, 213, 61, 216, 197, 167, 189, 81, 219, 37, 190, 201, 156, 194, 189, 242, 39, 198, 189, 112, 5, 214, 58, 47, 134, 39, 190, 81, 41, 102, 190, 251, 85, 20, 190, 65, 1, 164, 189, 179, 160, 148, 59, 59, 25, 43, 62, 230, 242, 28, 188, 133, 208, 176, 61, 80, 46, 12, 190, 24, 244, 4, 190, 108, 89, 128, 61, 226, 6, 135, 62, 240, 194, 244, 61, 45, 89, 156, 189, 136, 68, 82, 61, 1, 212, 116, 60, 252, 114, 216, 61, 157, 176, 3, 189, 120, 11, 139, 62, 255, 194, 20, 61, 102, 36, 59, 189, 193, 75, 39, 190, 161, 251, 82, 190, 165, 146, 45, 62, 45, 74, 136, 61, 197, 73, 148, 62, 144, 148, 85, 62, 245, 43, 155, 189, 61, 142, 55, 190, 41, 73, 90, 60, 49, 152, 45, 190, 235, 146, 200, 189, 29, 164, 59, 62, 143, 63, 47, 187, 116, 111, 140, 61, 22, 195, 19, 190, 168, 215, 176, 62, 213, 195, 64, 61, 228, 105, 42, 62, 201, 199, 17, 190, 93, 68, 57, 190, 74, 37, 92, 189, 71, 21, 146, 61, 208, 119, 131, 190, 77, 193, 134, 189, 78, 184, 188, 189, 254, 127, 18, 190, 91, 90, 221, 61, 107, 195, 7, 62, 51, 29, 79, 59, 234, 169, 175, 61, 145, 21, 90, 62, 255, 86, 185, 189, 137, 3, 152, 61, 92, 110, 21, 189, 198, 243, 53, 190, 19, 120, 230, 58, 51, 244, 61, 189, 245, 9, 198, 189, 156, 93, 236, 61, 149, 196, 73, 62, 51, 156, 137, 60, 20, 107, 49, 61, 132, 186, 12, 190, 65, 185, 59, 61, 169, 202, 98, 188, 26, 193, 156, 189, 41, 87, 163, 189, 137, 114, 34, 190, 4, 74, 221, 189, 50, 169, 94, 61, 156, 55, 244, 189, 251, 251, 29, 62, 87, 98, 112, 189, 238, 88, 21, 62, 55, 13, 139, 62, 134, 130, 148, 61, 69, 92, 61, 190, 115, 136, 102, 189, 244, 78, 57, 190, 228, 175, 129, 60, 100, 94, 170, 187, 18, 107, 241, 61, 135, 195, 201, 61, 20, 179, 152, 188, 147, 227, 54, 61, 148, 92, 2, 190, 172, 212, 142, 190, 37, 232, 25, 62, 152, 130, 56, 62, 110, 43, 140, 62, 138, 141, 50, 188, 220, 72, 12, 190, 13, 214, 53, 62, 214, 139, 198, 190, 198, 161, 163, 188, 136, 74, 177, 61, 57, 152, 34, 190, 187, 144, 117, 188, 240, 27, 120, 189, 128, 119, 157, 62, 53, 239, 7, 190, 201, 124, 125, 62, 106, 119, 123, 61, 7, 89, 75, 61, 110, 19, 167, 61, 155, 48, 33, 62, 208, 39, 216, 61, 43, 246, 39, 62, 142, 230, 80, 190, 33, 119, 59, 62, 128, 108, 70, 61, 145, 80, 100, 61, 113, 77, 227, 189, 59, 194, 43, 189, 213, 243, 148, 61, 141, 246, 221, 61, 26, 66, 71, 189, 76, 157, 229, 189, 49, 6, 196, 61, 158, 87, 169, 189, 1, 201, 26, 62, 204, 80, 96, 62, 46, 135, 0, 62, 81, 213, 147, 61, 192, 101, 197, 61, 239, 89, 132, 189, 211, 145, 40, 61, 143, 64, 209, 189, 160, 147, 19, 190, 109, 98, 145, 61, 130, 82, 107, 190, 115, 84, 148, 62, 239, 104, 112, 61, 241, 220, 1, 62, 211, 76, 42, 58, 23, 133, 136, 60, 203, 182, 186, 61, 9, 227, 210, 188, 188, 39, 167, 187, 187, 204, 190, 61, 195, 138, 176, 61, 1, 142, 139, 189, 56, 95, 202, 186, 55, 228, 22, 62, 55, 63, 150, 189, 148, 184, 33, 61, 91, 227, 10, 60, 180, 86, 217, 61, 244, 142, 28, 190, 240, 118, 145, 189, 246, 247, 225, 60, 143, 18, 133, 61, 151, 40, 215, 188, 165, 245, 99, 62, 123, 115, 240, 61, 255, 35, 81, 59, 1, 172, 234, 61, 228, 233, 14, 62, 96, 23, 182, 189, 158, 248, 225, 189, 148, 57, 28, 190, 205, 162, 127, 61, 155, 194, 219, 61, 63, 27, 146, 61, 69, 236, 190, 59, 194, 47, 94, 190, 20, 49, 29, 61, 84, 97, 202, 189, 79, 59, 5, 190, 163, 23, 218, 190, 144, 161, 40, 190, 108, 31, 149, 189, 28, 77, 63, 189, 160, 83, 67, 61, 78, 202, 123, 190, 13, 124, 212, 61, 247, 31, 97, 190, 198, 144, 176, 61, 114, 113, 7, 190, 196, 136, 37, 190, 39, 157, 18, 190, 140, 67, 194, 61, 207, 106, 41, 189, 173, 247, 104, 190, 186, 226, 28, 191, 108, 118, 222, 61, 174, 0, 96, 60, 180, 78, 89, 62, 73, 22, 155, 189, 85, 97, 207, 62, 210, 204, 2, 62, 219, 20, 190, 61, 178, 112, 161, 62, 248, 232, 79, 190, 142, 235, 155, 60, 13, 155, 134, 190, 147, 158, 145, 190, 183, 237, 253, 189, 155, 145, 105, 61, 202, 194, 70, 62, 54, 175, 136, 190, 235, 116, 64, 190, 201, 87, 128, 190, 50, 148, 231, 61, 89, 0, 1, 62, 216, 82, 5, 190, 219, 100, 85, 190, 175, 239, 3, 190, 123, 42, 103, 190, 230, 199, 98, 62, 48, 226, 80, 189, 247, 81, 195, 60, 64, 56, 8, 62, 107, 147, 28, 190, 183, 104, 173, 61, 255, 108, 103, 190, 152, 25, 33, 191, 36, 49, 215, 189, 29, 29, 123, 189, 102, 181, 32, 62, 74, 89, 124, 188, 82, 162, 168, 62, 197, 96, 50, 62, 89, 60, 43, 62, 95, 231, 21, 62, 86, 249, 195, 189, 137, 167, 164, 189, 157, 249, 155, 190, 206, 30, 122, 190, 44, 72, 172, 61, 153, 146, 204, 61, 24, 116, 219, 60, 45, 106, 213, 188, 100, 138, 159, 59, 243, 200, 159, 190, 232, 60, 73, 190, 226, 132, 60, 62, 92, 20, 62, 189, 7, 140, 99, 61, 106, 169, 196, 189, 66, 249, 72, 186, 17, 168, 89, 60, 46, 129, 55, 62, 231, 129, 93, 190, 125, 111, 14, 62, 199, 217, 4, 62, 233, 252, 69, 188, 109, 222, 26, 62, 156, 101, 149, 187, 123, 24, 201, 189, 130, 110, 131, 188, 8, 247, 117, 62, 159, 190, 59, 61, 168, 109, 90, 62, 83, 242, 6, 60, 201, 165, 164, 189, 120, 219, 102, 62, 114, 146, 173, 61, 2, 108, 0, 62, 43, 208, 69, 61, 134, 2, 25, 189, 122, 250, 249, 61, 117, 219, 66, 61, 234, 6, 234, 189, 230, 61, 18, 190, 184, 35, 64, 190, 213, 113, 33, 190, 57, 210, 92, 190, 39, 97, 203, 61, 186, 250, 2, 190, 21, 79, 2, 62, 25, 76, 182, 189, 122, 101, 18, 190, 129, 190, 20, 62, 221, 52, 247, 60, 114, 89, 236, 59, 114, 60, 36, 61, 226, 199, 246, 61, 32, 15, 128, 61, 64, 196, 46, 61, 53, 67, 193, 60, 237, 112, 68, 189, 133, 223, 39, 61, 24, 217, 26, 62, 58, 222, 202, 61, 139, 30, 71, 62, 115, 95, 26, 190, 129, 158, 134, 61, 172, 175, 178, 61, 169, 69, 18, 62, 75, 39, 131, 61, 17, 161, 22, 190, 82, 137, 27, 61, 223, 157, 34, 190, 244, 91, 20, 62, 150, 157, 208, 189, 16, 42, 79, 190, 123, 99, 220, 189, 224, 134, 214, 61, 214, 35, 81, 62, 39, 133, 129, 190, 250, 175, 194, 61, 60, 195, 34, 61, 11, 233, 10, 190, 220, 203, 54, 62, 62, 13, 134, 62, 174, 196, 252, 189, 28, 195, 28, 62, 182, 67, 37, 190, 55, 235, 104, 61, 205, 225, 34, 189, 73, 118, 10, 62, 84, 243, 88, 62, 187, 13, 18, 62, 48, 185, 136, 61, 243, 151, 101, 190, 213, 82, 24, 61, 11, 120, 115, 190, 204, 170, 17, 190, 98, 252, 4, 188, 186, 16, 129, 190, 14, 57, 10, 187, 170, 241, 232, 189, 109, 215, 139, 62, 210, 85, 95, 61, 192, 84, 27, 62, 18, 227, 95, 190, 19, 45, 197, 189, 251, 68, 46, 62, 39, 185, 149, 190, 45, 147, 7, 190, 214, 129, 51, 190, 246, 152, 195, 61, 99, 133, 106, 188, 14, 254, 2, 189, 162, 22, 65, 62, 233, 150, 132, 190, 205, 104, 203, 187, 57, 7, 32, 62, 33, 40, 13, 190, 57, 168, 202, 60, 106, 112, 50, 62, 87, 213, 125, 190, 206, 80, 95, 189, 3, 247, 73, 190, 79, 183, 28, 189, 65, 93, 216, 189, 249, 17, 139, 62, 243, 57, 183, 61, 193, 222, 20, 63, 134, 33, 30, 60, 89, 219, 39, 62, 231, 248, 132, 61, 92, 57, 183, 189, 23, 174, 85, 61, 153, 80, 114, 190, 70, 155, 99, 190, 134, 174, 144, 188, 154, 61, 112, 188, 107, 50, 52, 62, 3, 241, 196, 61, 38, 105, 116, 189, 8, 124, 8, 62, 37, 138, 136, 189, 180, 125, 134, 189, 208, 169, 209, 189, 111, 51, 40, 190, 65, 159, 28, 62, 172, 254, 18, 62, 33, 156, 29, 62, 103, 226, 62, 189, 129, 26, 87, 189, 62, 97, 74, 190, 197, 243, 70, 62, 26, 25, 53, 61, 83, 139, 116, 188, 181, 225, 0, 191, 224, 225, 16, 62, 52, 89, 89, 189, 120, 221, 19, 61, 125, 164, 71, 190, 142, 12, 173, 61, 250, 250, 0, 190, 186, 147, 129, 189, 99, 3, 40, 62, 44, 40, 187, 189, 65, 156, 26, 62, 247, 67, 242, 188, 228, 60, 200, 188, 121, 158, 83, 62, 131, 27, 10, 189, 250, 137, 8, 190, 86, 207, 158, 187, 43, 67, 211, 61, 37, 64, 252, 61, 9, 233, 147, 61, 54, 73, 64, 62, 195, 47, 91, 189, 216, 189, 246, 189, 117, 143, 80, 61, 86, 33, 254, 60, 219, 107, 100, 62, 193, 39, 202, 189, 155, 198, 128, 187, 208, 202, 1, 62, 252, 202, 12, 190, 225, 229, 130, 189, 211, 204, 46, 62, 43, 33, 131, 62, 42, 123, 164, 189, 74, 158, 3, 62, 9, 37, 3, 190, 95, 97, 125, 60, 124, 188, 128, 188, 5, 146, 15, 190, 29, 46, 2, 190, 80, 147, 117, 190, 139, 201, 70, 62, 104, 3, 164, 189, 177, 109, 175, 189, 197, 31, 237, 61, 61, 248, 26, 190, 201, 237, 7, 190, 153, 151, 239, 61, 178, 3, 182, 61, 223, 83, 26, 62, 40, 226, 32, 62, 16, 253, 162, 61, 215, 134, 126, 190, 34, 63, 188, 61, 210, 221, 110, 61, 107, 91, 26, 190, 50, 158, 197, 61, 173, 35, 139, 60, 172, 102, 161, 188, 13, 177, 246, 61, 46, 124, 49, 190, 223, 145, 89, 189, 243, 104, 166, 189, 85, 142, 159, 61, 141, 31, 85, 62, 179, 85, 140, 61, 75, 152, 3, 62, 166, 180, 7, 61, 203, 53, 116, 61, 21, 112, 151, 190, 200, 145, 234, 189, 230, 187, 24, 62, 155, 58, 10, 190, 16, 29, 24, 189, 101, 71, 40, 61, 10, 115, 142, 62, 186, 84, 40, 190, 5, 123, 92, 60, 63, 129, 61, 190, 107, 30, 19, 189, 193, 82, 167, 61, 151, 32, 194, 60, 5, 214, 18, 190, 52, 238, 42, 62, 136, 56, 148, 190, 106, 5, 72, 188, 12, 29, 36, 190, 33, 232, 68, 189, 147, 38, 146, 61, 99, 196, 207, 189, 57, 109, 32, 62, 197, 32, 9, 188, 69, 126, 65, 190, 113, 11, 34, 190, 201, 65, 157, 190, 245, 88, 246, 189, 178, 142, 236, 61, 40, 180, 251, 60, 138, 105, 24, 190, 192, 56, 155, 190, 97, 164, 76, 62, 3, 26, 222, 190, 131, 23, 222, 189, 71, 153, 105, 62, 45, 113, 53, 190, 32, 196, 228, 189, 237, 50, 162, 189, 142, 94, 108, 62, 197, 126, 35, 190, 122, 201, 164, 62, 26, 157, 124, 190, 102, 84, 210, 189, 117, 143, 78, 62, 235, 50, 106, 190, 20, 59, 159, 190, 124, 23, 187, 61, 235, 109, 44, 61, 83, 122, 180, 189, 164, 8, 49, 189, 39, 152, 61, 62, 182, 70, 192, 190, 254, 91, 183, 61, 27, 59, 18, 62, 109, 20, 141, 189, 62, 204, 59, 62, 169, 186, 162, 61, 77, 167, 240, 189, 254, 233, 8, 62, 46, 13, 137, 190, 18, 88, 166, 188, 73, 1, 178, 61, 178, 40, 61, 62, 107, 116, 171, 61, 115, 132, 144, 62, 115, 248, 247, 60, 27, 216, 128, 61, 239, 248, 76, 62, 82, 164, 230, 189, 51, 118, 204, 61, 108, 23, 201, 190, 209, 175, 133, 190, 185, 156, 34, 190, 145, 72, 114, 189, 97, 86, 63, 189, 232, 130, 213, 189, 0, 124, 251, 61, 211, 212, 66, 189, 210, 30, 82, 189, 84, 34, 1, 62, 188, 168, 129, 189, 190, 141, 28, 62, 196, 109, 179, 61, 136, 7, 215, 188, 43, 213, 192, 189, 252, 67, 46, 190, 110, 244, 22, 61, 99, 92, 253, 189, 11, 152, 51, 60, 88, 130, 52, 62, 233, 102, 48, 190, 167, 48, 190, 188, 56, 19, 250, 188, 65, 72, 167, 61, 32, 175, 203, 60, 150, 198, 97, 61, 113, 86, 225, 189, 128, 9, 10, 190, 11, 169, 129, 190, 57, 105, 34, 190, 110, 195, 46, 190, 161, 185, 229, 188, 60, 236, 27, 60, 45, 42, 131, 188, 10, 73, 213, 61, 88, 77, 16, 190, 187, 206, 8, 190, 171, 251, 177, 189, 70, 217, 97, 189, 255, 120, 126, 60, 238, 223, 42, 62, 249, 203, 160, 61, 15, 106, 38, 62, 235, 182, 192, 61, 135, 247, 46, 62, 255, 106, 164, 189, 106, 75, 68, 62, 197, 226, 172, 189, 174, 98, 195, 61, 196, 35, 232, 61, 107, 183, 254, 60, 211, 85, 218, 61, 134, 195, 205, 189, 255, 29, 135, 189, 76, 35, 17, 187, 210, 241, 219, 61, 203, 84, 194, 61, 10, 134, 62, 62, 51, 212, 193, 188, 248, 43, 151, 188, 253, 130, 67, 62, 59, 212, 131, 62, 232, 133, 22, 190, 27, 105, 19, 62, 163, 102, 27, 190, 95, 33, 37, 190, 139, 200, 186, 60, 156, 101, 252, 60, 213, 158, 179, 61, 1, 237, 177, 61, 117, 136, 221, 60, 161, 177, 3, 190, 117, 154, 145, 61, 49, 160, 107, 189, 140, 31, 46, 61, 67, 240, 167, 61, 238, 237, 212, 187, 255, 52, 216, 188, 239, 163, 129, 62, 44, 93, 104, 62, 216, 90, 24, 189, 205, 243, 190, 61, 121, 123, 25, 190, 95, 21, 117, 189, 224, 15, 43, 189, 204, 194, 47, 62, 126, 191, 165, 61, 252, 233, 1, 62, 71, 218, 51, 188, 90, 100, 1, 62, 174, 228, 43, 62, 170, 105, 107, 189, 170, 181, 210, 189, 53, 202, 84, 62, 91, 140, 3, 60, 5, 67, 60, 61, 191, 187, 38, 62, 247, 153, 231, 189, 167, 4, 19, 60, 180, 254, 0, 189, 46, 3, 163, 61, 197, 27, 27, 189, 110, 149, 39, 62, 159, 51, 143, 189, 2, 41, 61, 62, 255, 32, 143, 190, 91, 210, 28, 190, 209, 229, 48, 62, 236, 161, 27, 190, 166, 204, 132, 61, 93, 46, 208, 188, 202, 93, 10, 61, 166, 169, 106, 189, 100, 243, 190, 61, 69, 70, 254, 61, 7, 52, 84, 189, 251, 176, 86, 62, 175, 102, 234, 62, 36, 151, 55, 62, 98, 202, 19, 61, 101, 35, 16, 61, 78, 6, 62, 62, 153, 145, 3, 189, 235, 179, 70, 189, 213, 181, 127, 60, 206, 68, 93, 188, 236, 68, 68, 61, 1, 118, 49, 190, 248, 232, 152, 61, 146, 238, 23, 190, 132, 217, 170, 189, 231, 254, 156, 189, 144, 184, 14, 189, 225, 177, 190, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 200, 25, 190, 188, 170, 156, 189, 75, 157, 9, 189, 212, 96, 142, 58, 41, 80, 15, 190, 157, 178, 178, 189, 78, 43, 37, 189, 106, 178, 202, 60, 43, 114, 243, 61, 33, 11, 197, 189, 14, 233, 172, 189, 35, 108, 113, 60, 113, 52, 192, 61, 208, 239, 157, 61, 91, 47, 218, 188, 8, 150, 14, 189, 73, 21, 51, 62, 33, 222, 153, 62, 81, 70, 22, 62, 204, 167, 196, 187, 169, 73, 138, 190, 75, 153, 143, 62, 9, 143, 252, 59, 112, 213, 239, 61, 112, 149, 74, 61, 190, 136, 26, 189, 212, 17, 53, 62, 40, 164, 83, 62, 32, 171, 153, 187, 236, 25, 250, 60, 197, 229, 121, 62, 64, 243, 84, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 122, 187, 61, 121, 98, 254, 189, 102, 105, 208, 61, 134, 77, 212, 189, 218, 46, 10, 62, 42, 80, 145, 189, 238, 171, 99, 62, 13, 39, 213, 187, 237, 232, 200, 61, 133, 31, 77, 60, 188, 158, 34, 190, 192, 79, 13, 62, 91, 205, 174, 190, 228, 63, 136, 61, 21, 248, 166, 190, 98, 56, 19, 190, 90, 78, 35, 189, 22, 13, 13, 63, 17, 113, 200, 62, 102, 67, 11, 62, 206, 29, 214, 189, 151, 96, 223, 190, 206, 252, 107, 62, 210, 254, 22, 62, 209, 137, 71, 62, 174, 101, 143, 190, 178, 73, 173, 190, 100, 202, 107, 62, 176, 193, 221, 60, 167, 13, 218, 61, 6, 88, 118, 60, 207, 56, 28, 190, 32, 241, 225, 189, 238, 210, 41, 190, 68, 116, 2, 62, 223, 160, 28, 62, 209, 177, 24, 190, 108, 98, 117, 60, 129, 66, 221, 61, 39, 179, 165, 61, 156, 227, 219, 189, 79, 161, 201, 61, 75, 65, 165, 188, 245, 167, 155, 61, 34, 47, 151, 189, 57, 17, 156, 189, 133, 42, 223, 188, 150, 198, 17, 188, 193, 131, 78, 190, 252, 85, 101, 60, 230, 167, 83, 189, 210, 50, 7, 189, 134, 150, 225, 61, 245, 55, 42, 61, 91, 148, 253, 61, 113, 158, 49, 61, 87, 33, 52, 60, 161, 209, 139, 189, 120, 3, 151, 61, 63, 124, 220, 189, 4, 52, 45, 62, 41, 75, 255, 189, 251, 43, 73, 190, 199, 220, 57, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 180, 152, 60, 183, 126, 154, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {36, 52, 15, 191, 64, 90, 8, 63, 61, 8, 234, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {68, 209, 184, 191, 142, 53, 14, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0016/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}