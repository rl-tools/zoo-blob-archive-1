// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 134, 42, 189, 233, 240, 140, 63, 121, 18, 195, 62, 78, 124, 34, 63, 120, 16, 9, 63, 35, 189, 83, 62, 200, 236, 46, 63, 216, 192, 158, 188, 58, 14, 177, 62, 169, 23, 15, 63, 3, 63, 137, 62, 237, 210, 11, 191, 241, 160, 249, 190, 220, 51, 185, 191, 117, 145, 148, 190, 189, 112, 32, 191, 129, 6, 114, 191, 214, 40, 199, 62, 173, 224, 12, 63, 216, 108, 197, 190, 49, 142, 6, 191, 193, 40, 47, 63, 247, 87, 195, 62, 209, 175, 25, 63, 194, 23, 7, 63, 82, 136, 25, 63, 159, 251, 58, 60, 24, 9, 204, 62, 49, 158, 182, 190, 114, 247, 19, 190, 31, 103, 230, 62, 222, 30, 141, 190, 203, 195, 233, 62, 37, 215, 186, 61, 32, 21, 123, 61, 26, 190, 254, 190, 92, 197, 16, 190, 16, 177, 206, 191, 67, 67, 162, 190, 233, 217, 171, 62, 79, 8, 34, 63, 224, 52, 223, 62, 154, 151, 225, 190, 54, 7, 101, 191, 186, 58, 46, 191, 69, 224, 136, 62, 116, 192, 200, 62, 207, 241, 199, 190, 193, 155, 156, 190, 230, 132, 244, 62, 95, 220, 174, 61, 149, 208, 137, 190, 121, 3, 139, 60, 163, 71, 163, 60, 236, 235, 150, 190, 165, 10, 89, 191, 167, 135, 31, 63, 174, 160, 206, 62, 78, 203, 165, 62, 35, 167, 236, 190, 185, 160, 116, 191, 35, 15, 42, 62, 129, 80, 7, 63, 173, 29, 174, 62, 190, 235, 92, 191, 46, 32, 68, 190, 21, 131, 69, 191, 156, 173, 119, 63, 121, 183, 150, 187, 192, 154, 91, 190, 197, 62, 186, 191, 9, 123, 219, 60, 92, 29, 114, 191, 204, 92, 62, 191, 215, 44, 147, 190, 52, 29, 30, 63, 67, 138, 7, 190, 95, 121, 42, 191, 128, 222, 255, 62, 129, 229, 232, 62, 247, 223, 236, 61, 250, 125, 51, 63, 65, 175, 2, 62, 221, 179, 138, 62, 27, 96, 58, 191, 181, 75, 80, 60, 103, 21, 198, 190, 184, 130, 151, 62, 251, 156, 163, 191, 195, 180, 91, 190, 105, 154, 30, 63, 32, 202, 189, 191, 203, 253, 179, 190, 43, 225, 249, 190, 151, 175, 196, 62, 250, 231, 81, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 42, 139, 190, 68, 17, 156, 190, 129, 77, 50, 60, 202, 182, 113, 191, 83, 35, 137, 190, 201, 64, 12, 190, 76, 82, 18, 190, 18, 250, 213, 190, 62, 187, 47, 190, 107, 240, 169, 61, 78, 253, 80, 190, 216, 252, 130, 191, 179, 15, 94, 62, 6, 87, 58, 191, 14, 44, 214, 187, 90, 249, 128, 60, 22, 205, 201, 62, 238, 42, 237, 190, 80, 123, 69, 62, 98, 249, 18, 63, 60, 173, 158, 190, 224, 224, 94, 188, 111, 214, 32, 63, 227, 8, 214, 62, 201, 97, 19, 191, 172, 55, 232, 190, 6, 170, 132, 59, 218, 54, 101, 191, 253, 118, 192, 189, 91, 161, 177, 61, 35, 10, 119, 189, 84, 0, 4, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 118, 19, 189, 203, 121, 24, 190, 52, 63, 22, 190, 25, 80, 161, 60, 250, 15, 240, 60, 161, 114, 170, 60, 208, 66, 4, 61, 157, 3, 204, 186, 68, 199, 58, 59, 172, 144, 46, 62, 54, 84, 53, 189, 94, 125, 41, 190, 30, 217, 186, 189, 210, 211, 131, 188, 193, 54, 215, 59, 45, 137, 156, 61, 78, 145, 34, 62, 112, 250, 0, 189, 216, 143, 21, 61, 64, 216, 154, 189, 198, 96, 141, 189, 173, 168, 12, 62, 253, 180, 105, 189, 149, 107, 1, 190, 251, 202, 22, 189, 250, 184, 210, 188, 97, 15, 143, 61, 24, 116, 250, 189, 120, 51, 27, 190, 178, 78, 196, 60, 234, 119, 92, 61, 248, 149, 207, 189, 32, 34, 162, 60, 208, 181, 240, 187, 238, 118, 177, 189, 171, 211, 43, 61, 162, 51, 20, 191, 35, 180, 159, 188, 158, 12, 204, 188, 55, 147, 208, 61, 4, 237, 56, 190, 112, 119, 35, 191, 191, 52, 120, 189, 181, 137, 36, 61, 140, 49, 184, 190, 59, 169, 18, 189, 209, 86, 227, 190, 71, 194, 188, 190, 199, 255, 242, 59, 38, 99, 157, 61, 116, 161, 122, 62, 93, 77, 244, 190, 210, 88, 133, 62, 82, 250, 53, 191, 44, 142, 14, 62, 239, 177, 25, 62, 89, 221, 7, 191, 84, 254, 162, 62, 226, 181, 217, 189, 248, 113, 164, 62, 239, 238, 91, 191, 108, 183, 68, 191, 174, 225, 83, 191, 198, 111, 93, 190, 193, 101, 34, 62, 24, 87, 152, 62, 12, 253, 114, 62, 106, 73, 159, 61, 31, 75, 210, 190, 213, 11, 138, 189, 66, 156, 107, 191, 199, 91, 136, 62, 29, 149, 216, 62, 228, 27, 32, 191, 93, 194, 106, 62, 132, 155, 140, 189, 80, 255, 123, 190, 116, 6, 72, 61, 6, 125, 10, 189, 1, 126, 132, 62, 250, 213, 6, 62, 38, 216, 93, 57, 79, 5, 144, 190, 32, 51, 127, 62, 45, 175, 218, 190, 255, 197, 151, 191, 49, 142, 122, 190, 232, 111, 218, 190, 139, 106, 175, 190, 198, 81, 44, 191, 178, 53, 219, 62, 63, 24, 66, 62, 26, 147, 229, 62, 249, 53, 153, 191, 231, 242, 169, 191, 158, 41, 145, 62, 160, 190, 111, 190, 90, 178, 164, 62, 190, 168, 247, 61, 216, 148, 21, 62, 21, 187, 43, 191, 138, 75, 164, 188, 135, 136, 186, 188, 106, 39, 29, 62, 198, 187, 136, 62, 139, 68, 108, 62, 2, 98, 196, 186, 84, 237, 184, 61, 127, 136, 45, 191, 189, 78, 69, 62, 78, 57, 175, 188, 66, 253, 224, 62, 11, 11, 35, 61, 44, 170, 12, 61, 225, 186, 55, 62, 108, 153, 150, 62, 200, 5, 124, 60, 52, 181, 97, 191, 83, 23, 86, 62, 195, 103, 225, 190, 14, 163, 203, 190, 218, 35, 154, 189, 197, 131, 219, 62, 17, 97, 239, 62, 17, 143, 33, 190, 104, 212, 201, 191, 246, 139, 136, 191, 160, 28, 23, 61, 187, 176, 1, 191, 137, 99, 62, 191, 121, 216, 140, 189, 5, 129, 160, 62, 6, 5, 36, 62, 136, 125, 87, 63, 27, 199, 29, 189, 29, 48, 60, 190, 77, 175, 54, 190, 187, 124, 95, 190, 189, 200, 139, 190, 214, 60, 45, 62, 55, 136, 26, 62, 154, 204, 148, 188, 123, 255, 80, 62, 248, 94, 141, 59, 227, 182, 167, 190, 160, 99, 230, 189, 94, 91, 142, 62, 64, 206, 72, 189, 152, 35, 19, 191, 92, 79, 50, 190, 105, 173, 248, 60, 55, 136, 128, 61, 95, 121, 41, 62, 149, 234, 171, 189, 255, 197, 13, 189, 190, 161, 159, 190, 229, 26, 219, 189, 9, 10, 170, 189, 195, 173, 64, 61, 5, 61, 58, 62, 100, 196, 97, 190, 82, 151, 8, 62, 147, 16, 3, 190, 224, 235, 242, 189, 228, 206, 218, 62, 210, 81, 83, 189, 15, 99, 24, 189, 208, 246, 160, 187, 177, 164, 158, 60, 247, 116, 139, 187, 80, 214, 252, 61, 204, 229, 190, 190, 91, 105, 72, 62, 93, 84, 202, 190, 177, 221, 75, 62, 148, 142, 25, 62, 198, 7, 146, 62, 61, 15, 31, 62, 7, 165, 248, 190, 28, 244, 25, 62, 165, 212, 211, 190, 7, 188, 115, 190, 29, 95, 7, 62, 82, 163, 173, 62, 134, 229, 169, 61, 160, 219, 228, 189, 116, 30, 154, 62, 32, 168, 64, 62, 163, 58, 144, 61, 185, 12, 218, 190, 109, 207, 239, 190, 62, 218, 79, 62, 21, 68, 57, 62, 110, 209, 225, 190, 167, 205, 57, 190, 219, 190, 164, 190, 141, 89, 4, 189, 155, 179, 38, 188, 21, 108, 41, 62, 134, 81, 139, 190, 34, 128, 25, 62, 148, 90, 197, 61, 25, 100, 95, 190, 219, 106, 133, 190, 104, 241, 67, 190, 201, 55, 103, 190, 91, 40, 49, 190, 84, 163, 146, 61, 28, 153, 175, 61, 11, 207, 178, 189, 10, 91, 251, 61, 147, 37, 249, 61, 250, 98, 223, 62, 159, 204, 48, 62, 122, 193, 19, 190, 98, 127, 180, 61, 79, 107, 132, 190, 192, 155, 132, 62, 31, 7, 154, 190, 234, 62, 23, 191, 109, 102, 249, 190, 95, 204, 19, 62, 221, 106, 148, 62, 124, 31, 72, 191, 220, 238, 161, 62, 247, 61, 113, 189, 255, 111, 67, 190, 150, 165, 188, 188, 74, 255, 1, 62, 221, 56, 42, 190, 15, 46, 133, 188, 224, 82, 49, 190, 6, 62, 57, 191, 106, 223, 155, 190, 196, 116, 111, 60, 80, 230, 224, 184, 234, 244, 187, 62, 111, 99, 9, 191, 218, 44, 128, 62, 57, 231, 196, 190, 136, 115, 18, 190, 247, 225, 219, 188, 46, 52, 117, 189, 127, 118, 78, 190, 83, 117, 0, 63, 45, 46, 200, 189, 16, 74, 106, 61, 5, 230, 118, 61, 45, 194, 192, 62, 151, 199, 22, 190, 96, 199, 179, 190, 29, 235, 42, 191, 83, 15, 96, 62, 104, 19, 51, 190, 121, 172, 52, 190, 242, 176, 53, 61, 65, 81, 16, 191, 44, 169, 93, 190, 173, 70, 241, 61, 238, 215, 215, 190, 179, 100, 72, 61, 150, 239, 93, 62, 61, 35, 202, 61, 100, 239, 154, 190, 57, 70, 145, 62, 203, 27, 112, 188, 182, 103, 240, 190, 6, 41, 52, 191, 94, 1, 17, 61, 94, 9, 25, 62, 193, 66, 130, 190, 65, 11, 116, 62, 233, 84, 14, 189, 226, 250, 247, 189, 253, 174, 132, 62, 126, 32, 76, 62, 27, 2, 137, 189, 61, 222, 96, 62, 124, 197, 221, 190, 37, 221, 19, 62, 118, 80, 21, 190, 0, 78, 14, 189, 97, 151, 90, 189, 110, 138, 14, 190, 107, 136, 113, 191, 102, 0, 106, 62, 134, 214, 88, 62, 50, 11, 89, 191, 166, 243, 168, 61, 97, 112, 207, 60, 193, 61, 205, 61, 185, 74, 233, 61, 255, 120, 231, 60, 12, 219, 153, 188, 73, 205, 44, 62, 137, 110, 222, 61, 120, 206, 168, 61, 26, 205, 26, 189, 164, 98, 112, 60, 189, 92, 177, 185, 237, 216, 5, 189, 163, 107, 126, 189, 67, 143, 213, 61, 240, 201, 129, 188, 13, 89, 30, 190, 230, 144, 7, 190, 193, 214, 138, 189, 57, 184, 111, 190, 198, 96, 245, 189, 238, 122, 6, 190, 172, 115, 202, 190, 6, 186, 233, 189, 1, 16, 119, 189, 249, 5, 2, 190, 68, 34, 70, 189, 50, 28, 254, 189, 203, 75, 44, 190, 193, 53, 37, 190, 187, 56, 135, 60, 196, 75, 30, 189, 211, 75, 207, 189, 74, 20, 232, 61, 122, 64, 195, 189, 187, 101, 8, 190, 58, 3, 14, 62, 28, 110, 162, 61, 148, 79, 86, 61, 119, 9, 160, 188, 118, 255, 134, 189, 30, 49, 39, 62, 209, 249, 1, 60, 102, 144, 16, 62, 49, 210, 162, 189, 169, 194, 22, 190, 142, 200, 35, 62, 233, 133, 251, 189, 159, 53, 153, 189, 186, 8, 13, 189, 90, 162, 13, 61, 49, 110, 94, 189, 241, 240, 6, 190, 47, 77, 22, 190, 38, 65, 141, 187, 209, 128, 237, 188, 157, 79, 124, 189, 131, 199, 67, 189, 10, 230, 23, 190, 99, 33, 250, 61, 208, 39, 204, 189, 29, 253, 16, 190, 77, 99, 35, 190, 16, 226, 111, 188, 92, 80, 231, 190, 99, 115, 203, 62, 7, 40, 128, 62, 64, 129, 11, 191, 239, 133, 241, 62, 199, 226, 249, 190, 24, 34, 12, 191, 154, 95, 199, 188, 210, 201, 252, 187, 193, 130, 74, 191, 95, 22, 165, 62, 206, 125, 128, 190, 167, 215, 103, 190, 182, 64, 42, 63, 176, 191, 115, 62, 86, 206, 98, 62, 228, 150, 151, 62, 216, 197, 167, 189, 216, 27, 214, 190, 132, 106, 11, 61, 146, 151, 19, 191, 71, 197, 250, 190, 0, 232, 158, 61, 178, 107, 167, 190, 37, 84, 92, 61, 33, 25, 10, 191, 150, 247, 158, 189, 128, 30, 154, 189, 254, 241, 231, 62, 174, 241, 232, 62, 75, 189, 243, 190, 154, 48, 132, 62, 44, 218, 201, 190, 245, 10, 104, 62, 118, 97, 42, 62, 109, 152, 86, 190, 90, 36, 140, 62, 10, 55, 51, 190, 247, 187, 59, 61, 173, 100, 126, 188, 105, 28, 134, 62, 59, 28, 169, 61, 87, 168, 15, 62, 215, 120, 173, 190, 61, 235, 144, 60, 86, 207, 30, 190, 53, 29, 92, 62, 176, 218, 248, 61, 31, 241, 140, 60, 245, 43, 155, 189, 173, 207, 87, 190, 211, 115, 200, 60, 197, 209, 53, 191, 66, 39, 54, 190, 36, 189, 142, 62, 39, 25, 204, 62, 102, 9, 137, 62, 183, 143, 141, 190, 15, 179, 143, 62, 123, 5, 220, 62, 32, 109, 128, 62, 52, 137, 74, 190, 15, 45, 141, 190, 79, 169, 247, 60, 86, 172, 236, 61, 243, 113, 47, 191, 2, 111, 252, 189, 180, 168, 197, 61, 165, 89, 223, 190, 137, 205, 16, 62, 66, 183, 179, 62, 167, 91, 197, 189, 252, 221, 99, 62, 19, 63, 177, 62, 172, 120, 54, 190, 16, 189, 94, 62, 254, 179, 101, 190, 164, 49, 206, 189, 242, 108, 50, 190, 65, 240, 43, 62, 212, 4, 212, 189, 156, 93, 236, 61, 241, 118, 56, 62, 144, 91, 39, 62, 236, 114, 225, 61, 218, 66, 236, 61, 10, 83, 133, 189, 149, 61, 29, 190, 186, 78, 195, 190, 195, 215, 71, 62, 26, 48, 129, 190, 233, 94, 211, 190, 78, 52, 105, 60, 159, 143, 102, 61, 161, 191, 208, 62, 228, 235, 79, 189, 68, 14, 151, 189, 249, 179, 169, 62, 127, 112, 68, 62, 154, 224, 120, 190, 62, 132, 78, 62, 153, 218, 209, 190, 19, 48, 178, 188, 8, 253, 41, 62, 72, 236, 96, 61, 197, 146, 225, 61, 156, 188, 141, 62, 48, 120, 43, 189, 195, 248, 174, 61, 237, 253, 61, 191, 42, 197, 144, 62, 108, 172, 56, 60, 235, 212, 51, 62, 138, 141, 50, 188, 140, 129, 156, 189, 10, 163, 253, 61, 211, 86, 107, 191, 230, 58, 16, 189, 101, 123, 14, 62, 53, 220, 78, 62, 58, 64, 47, 62, 187, 2, 12, 190, 194, 155, 103, 62, 239, 148, 143, 62, 168, 215, 168, 62, 246, 66, 187, 61, 150, 71, 190, 59, 94, 196, 36, 62, 77, 182, 136, 189, 182, 218, 246, 61, 6, 65, 246, 61, 155, 230, 132, 190, 57, 67, 164, 62, 109, 109, 210, 190, 85, 76, 229, 58, 236, 151, 17, 190, 132, 61, 187, 189, 20, 201, 150, 61, 38, 29, 7, 62, 200, 236, 13, 190, 114, 189, 188, 189, 32, 11, 139, 190, 60, 36, 157, 60, 181, 188, 222, 60, 222, 101, 38, 62, 46, 135, 0, 62, 184, 136, 181, 189, 133, 64, 178, 61, 244, 155, 213, 190, 150, 45, 208, 189, 205, 172, 75, 59, 26, 140, 2, 60, 27, 228, 69, 62, 11, 106, 159, 190, 44, 195, 126, 62, 215, 179, 173, 61, 46, 115, 97, 62, 66, 65, 14, 190, 139, 248, 254, 189, 1, 136, 60, 62, 120, 79, 174, 61, 85, 228, 217, 59, 185, 134, 59, 62, 214, 237, 165, 62, 142, 201, 221, 190, 45, 28, 154, 189, 65, 104, 107, 62, 23, 68, 243, 188, 216, 62, 227, 61, 244, 239, 231, 61, 81, 60, 62, 62, 211, 24, 38, 190, 148, 199, 182, 190, 157, 28, 177, 61, 64, 144, 6, 189, 254, 9, 140, 189, 142, 26, 101, 61, 123, 115, 240, 61, 252, 92, 210, 61, 183, 13, 21, 61, 210, 83, 35, 62, 83, 229, 53, 61, 231, 183, 219, 190, 41, 145, 60, 188, 153, 1, 205, 188, 147, 188, 55, 62, 53, 209, 182, 61, 197, 220, 143, 61, 62, 129, 178, 190, 34, 203, 51, 61, 137, 39, 197, 189, 33, 252, 137, 60, 234, 32, 17, 191, 189, 240, 27, 191, 56, 177, 89, 189, 68, 159, 249, 60, 117, 89, 172, 191, 67, 65, 171, 190, 217, 233, 152, 62, 2, 126, 171, 190, 235, 218, 86, 62, 115, 238, 128, 189, 131, 50, 152, 190, 253, 123, 157, 189, 223, 3, 122, 191, 190, 184, 102, 61, 219, 138, 158, 191, 184, 254, 145, 190, 166, 135, 154, 62, 174, 0, 96, 60, 240, 82, 8, 62, 110, 201, 164, 60, 133, 184, 191, 62, 112, 206, 136, 62, 221, 214, 135, 190, 132, 1, 170, 61, 132, 223, 119, 191, 36, 209, 183, 62, 93, 109, 140, 190, 199, 164, 185, 190, 131, 21, 5, 190, 8, 38, 188, 185, 243, 158, 140, 62, 115, 107, 243, 190, 89, 193, 88, 189, 147, 34, 133, 191, 40, 176, 0, 62, 188, 187, 23, 61, 236, 98, 202, 191, 63, 138, 218, 190, 208, 231, 61, 190, 207, 200, 129, 190, 239, 228, 25, 185, 3, 33, 72, 61, 42, 152, 79, 61, 17, 69, 227, 61, 252, 119, 21, 191, 195, 144, 30, 60, 99, 200, 131, 191, 62, 108, 210, 191, 34, 211, 103, 62, 29, 29, 123, 189, 24, 199, 27, 62, 135, 123, 192, 190, 187, 109, 178, 62, 248, 117, 44, 63, 164, 98, 14, 63, 131, 233, 235, 60, 149, 27, 67, 191, 69, 128, 152, 190, 136, 26, 5, 191, 240, 64, 114, 191, 27, 156, 153, 62, 24, 123, 26, 63, 117, 225, 219, 62, 253, 6, 168, 188, 190, 52, 130, 189, 160, 146, 121, 191, 183, 114, 135, 190, 241, 94, 196, 62, 170, 12, 188, 190, 44, 237, 163, 62, 129, 201, 43, 189, 200, 8, 87, 190, 72, 76, 208, 61, 21, 78, 104, 62, 35, 163, 166, 190, 14, 117, 109, 62, 132, 202, 250, 61, 79, 119, 185, 188, 236, 92, 129, 60, 153, 246, 220, 61, 109, 245, 180, 190, 130, 110, 131, 188, 104, 77, 0, 63, 166, 9, 247, 60, 183, 93, 82, 62, 199, 10, 61, 62, 173, 234, 143, 190, 252, 99, 78, 62, 197, 68, 90, 190, 230, 134, 132, 62, 81, 61, 51, 188, 21, 94, 2, 191, 243, 159, 142, 189, 135, 236, 65, 62, 76, 103, 169, 60, 174, 60, 110, 190, 11, 93, 151, 189, 146, 12, 253, 62, 60, 7, 154, 189, 152, 218, 21, 62, 78, 150, 208, 190, 154, 45, 203, 61, 117, 9, 6, 62, 197, 133, 110, 189, 171, 249, 128, 190, 69, 11, 122, 62, 195, 239, 173, 61, 79, 28, 247, 61, 197, 193, 84, 60, 74, 94, 81, 62, 85, 140, 2, 190, 198, 225, 43, 189, 234, 163, 146, 61, 133, 223, 39, 61, 127, 32, 132, 62, 224, 68, 110, 189, 227, 158, 221, 62, 85, 154, 3, 61, 246, 154, 7, 61, 212, 44, 63, 60, 39, 222, 8, 189, 202, 135, 150, 62, 178, 166, 165, 190, 165, 21, 182, 62, 120, 214, 158, 190, 104, 215, 48, 62, 230, 21, 206, 61, 207, 153, 159, 190, 124, 77, 172, 190, 132, 61, 74, 62, 47, 176, 167, 62, 229, 201, 198, 190, 127, 203, 157, 62, 145, 143, 53, 61, 57, 110, 65, 190, 14, 72, 181, 62, 238, 152, 193, 62, 145, 154, 124, 189, 153, 192, 187, 62, 116, 252, 196, 190, 94, 142, 136, 62, 25, 151, 146, 62, 182, 83, 136, 62, 222, 52, 154, 61, 21, 4, 13, 190, 48, 185, 136, 61, 33, 23, 147, 190, 183, 130, 161, 61, 250, 79, 207, 190, 124, 199, 158, 190, 175, 224, 67, 61, 58, 215, 213, 61, 239, 73, 14, 62, 50, 199, 117, 190, 20, 24, 158, 62, 79, 215, 53, 63, 198, 239, 77, 62, 117, 255, 175, 190, 116, 92, 124, 190, 167, 155, 110, 62, 224, 67, 248, 190, 164, 103, 64, 191, 144, 77, 77, 190, 146, 185, 120, 62, 116, 138, 164, 190, 63, 249, 230, 61, 47, 19, 149, 62, 75, 167, 27, 191, 8, 36, 140, 61, 185, 152, 131, 62, 30, 93, 228, 190, 29, 164, 20, 62, 63, 93, 154, 61, 65, 229, 150, 190, 17, 211, 76, 190, 4, 229, 242, 189, 252, 149, 235, 190, 65, 93, 216, 189, 105, 108, 213, 62, 29, 51, 163, 61, 39, 113, 6, 63, 80, 96, 135, 62, 142, 159, 17, 190, 165, 209, 53, 190, 178, 195, 140, 190, 136, 133, 58, 62, 163, 229, 156, 190, 201, 156, 28, 191, 203, 111, 17, 190, 248, 88, 29, 62, 198, 52, 193, 62, 189, 176, 92, 188, 47, 231, 6, 62, 194, 11, 141, 61, 82, 165, 4, 59, 55, 33, 147, 190, 240, 54, 110, 191, 4, 143, 159, 190, 23, 17, 184, 189, 186, 238, 98, 62, 127, 182, 211, 62, 111, 190, 16, 190, 60, 114, 52, 61, 211, 200, 11, 190, 34, 209, 243, 189, 193, 94, 45, 61, 1, 226, 60, 191, 180, 117, 209, 191, 38, 47, 249, 62, 52, 89, 89, 189, 76, 70, 106, 61, 115, 75, 0, 191, 218, 74, 242, 61, 223, 222, 68, 62, 162, 119, 154, 62, 24, 128, 12, 188, 87, 10, 86, 191, 14, 165, 82, 187, 178, 175, 167, 61, 173, 73, 252, 190, 40, 180, 244, 62, 95, 195, 184, 62, 179, 22, 226, 61, 120, 174, 50, 59, 212, 123, 95, 60, 248, 184, 148, 62, 46, 202, 190, 61, 56, 126, 77, 62, 85, 214, 37, 190, 93, 109, 56, 62, 225, 104, 182, 59, 190, 105, 229, 61, 88, 43, 158, 62, 46, 244, 20, 190, 60, 207, 196, 189, 122, 246, 60, 62, 245, 76, 186, 190, 77, 116, 180, 62, 31, 247, 90, 62, 163, 126, 3, 63, 232, 210, 50, 190, 74, 158, 3, 62, 46, 4, 13, 191, 178, 107, 245, 61, 7, 34, 213, 190, 192, 208, 148, 190, 56, 56, 148, 190, 211, 30, 9, 191, 168, 40, 111, 62, 174, 103, 85, 189, 25, 93, 5, 62, 107, 92, 162, 61, 120, 170, 157, 188, 12, 108, 94, 190, 50, 71, 92, 61, 163, 186, 45, 62, 151, 199, 160, 190, 118, 79, 241, 61, 163, 230, 237, 61, 23, 38, 200, 190, 210, 50, 141, 62, 172, 13, 195, 189, 2, 180, 63, 190, 197, 143, 83, 61, 47, 216, 210, 61, 10, 95, 147, 61, 82, 228, 95, 62, 28, 44, 185, 190, 121, 159, 4, 62, 52, 243, 30, 191, 25, 208, 70, 62, 111, 135, 85, 61, 51, 176, 164, 187, 75, 152, 3, 62, 16, 101, 118, 188, 142, 33, 216, 61, 39, 244, 30, 191, 205, 158, 95, 190, 242, 209, 160, 62, 253, 100, 134, 62, 167, 91, 35, 62, 51, 21, 152, 189, 209, 95, 128, 62, 69, 43, 163, 62, 147, 79, 204, 61, 210, 146, 148, 190, 158, 130, 37, 190, 234, 79, 34, 62, 22, 104, 201, 190, 166, 48, 64, 189, 202, 162, 160, 62, 164, 213, 170, 190, 126, 194, 4, 62, 178, 106, 8, 63, 36, 83, 58, 190, 56, 49, 76, 62, 213, 1, 117, 188, 102, 177, 18, 62, 205, 81, 95, 62, 2, 189, 163, 190, 3, 119, 54, 188, 132, 177, 144, 191, 164, 216, 89, 189, 222, 49, 188, 188, 91, 105, 12, 188, 138, 105, 24, 190, 174, 1, 45, 190, 8, 24, 80, 62, 158, 156, 116, 191, 41, 118, 187, 190, 30, 20, 228, 62, 253, 71, 94, 62, 94, 50, 106, 188, 215, 182, 127, 190, 61, 177, 117, 62, 144, 204, 201, 61, 76, 53, 186, 62, 165, 115, 234, 190, 24, 248, 171, 190, 190, 234, 138, 62, 60, 124, 23, 191, 138, 228, 56, 191, 74, 165, 195, 61, 28, 106, 152, 190, 21, 123, 59, 59, 199, 86, 22, 62, 48, 242, 122, 62, 2, 188, 8, 191, 2, 56, 114, 62, 33, 80, 30, 62, 58, 151, 132, 190, 131, 119, 82, 190, 54, 132, 173, 188, 47, 144, 213, 189, 233, 186, 201, 189, 154, 159, 32, 189, 170, 106, 138, 60, 73, 1, 178, 61, 25, 211, 116, 62, 33, 238, 20, 62, 190, 125, 68, 62, 121, 237, 38, 62, 75, 125, 40, 191, 165, 103, 86, 62, 45, 69, 154, 190, 129, 2, 71, 62, 29, 40, 170, 190, 34, 192, 188, 190, 185, 140, 93, 191, 57, 186, 39, 61, 234, 121, 122, 61, 2, 193, 74, 191, 13, 11, 138, 62, 133, 131, 196, 62, 194, 250, 228, 61, 190, 92, 237, 190, 247, 248, 50, 190, 67, 75, 30, 189, 8, 16, 75, 61, 132, 118, 2, 62, 56, 88, 181, 62, 141, 161, 219, 61, 137, 97, 241, 60, 28, 38, 199, 190, 38, 128, 204, 191, 69, 244, 32, 189, 92, 253, 94, 190, 205, 168, 60, 62, 244, 12, 184, 62, 65, 72, 167, 61, 246, 218, 11, 190, 136, 59, 117, 62, 77, 230, 78, 190, 241, 82, 70, 190, 121, 26, 9, 190, 90, 62, 217, 190, 27, 104, 204, 190, 185, 8, 49, 190, 184, 212, 198, 62, 134, 56, 162, 190, 245, 233, 28, 63, 95, 14, 146, 190, 178, 228, 80, 190, 253, 233, 42, 190, 220, 58, 140, 61, 214, 83, 235, 189, 213, 246, 4, 62, 194, 75, 137, 61, 217, 97, 119, 62, 3, 222, 194, 61, 199, 209, 30, 62, 222, 149, 131, 189, 108, 93, 178, 62, 202, 181, 165, 189, 204, 144, 45, 62, 24, 52, 19, 189, 135, 28, 114, 61, 44, 18, 75, 62, 239, 202, 12, 190, 102, 190, 17, 189, 167, 176, 15, 61, 210, 241, 219, 61, 104, 149, 64, 62, 171, 136, 73, 62, 99, 22, 28, 189, 157, 243, 56, 61, 203, 147, 115, 62, 231, 242, 202, 62, 174, 114, 132, 190, 143, 15, 12, 62, 13, 174, 13, 60, 231, 165, 57, 190, 11, 129, 114, 189, 109, 127, 195, 61, 130, 214, 5, 62, 42, 116, 178, 61, 35, 72, 179, 61, 105, 159, 213, 189, 77, 14, 22, 62, 230, 18, 181, 61, 117, 170, 207, 190, 80, 14, 203, 60, 241, 118, 152, 61, 104, 223, 142, 187, 103, 159, 16, 63, 70, 175, 171, 62, 32, 200, 46, 61, 213, 245, 154, 61, 119, 156, 225, 190, 229, 78, 3, 61, 213, 41, 36, 190, 195, 35, 155, 62, 197, 193, 228, 61, 252, 233, 1, 62, 164, 238, 174, 61, 221, 116, 116, 62, 253, 184, 45, 62, 61, 163, 112, 190, 145, 190, 238, 188, 55, 21, 142, 62, 249, 186, 169, 190, 119, 200, 38, 62, 153, 87, 202, 62, 53, 0, 134, 188, 239, 198, 196, 188, 168, 203, 165, 190, 19, 220, 217, 189, 146, 249, 185, 61, 252, 156, 38, 61, 202, 133, 136, 189, 233, 200, 102, 62, 186, 207, 111, 190, 212, 86, 155, 190, 251, 231, 9, 62, 81, 46, 56, 190, 18, 143, 69, 61, 213, 241, 102, 61, 27, 198, 236, 61, 3, 48, 87, 188, 108, 202, 220, 60, 187, 180, 20, 62, 58, 135, 81, 189, 106, 238, 48, 62, 156, 125, 207, 62, 161, 19, 44, 62, 98, 202, 19, 61, 1, 162, 25, 62, 156, 96, 111, 62, 208, 238, 184, 188, 188, 136, 153, 190, 196, 201, 116, 62, 49, 158, 143, 62, 2, 62, 2, 189, 142, 120, 103, 190, 53, 44, 199, 61, 245, 235, 46, 62, 154, 133, 215, 189, 212, 15, 180, 190, 202, 208, 125, 190, 215, 173, 169, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 200, 25, 190, 8, 114, 24, 190, 197, 121, 113, 61, 168, 85, 2, 62, 118, 149, 244, 189, 223, 133, 36, 61, 250, 148, 160, 61, 18, 11, 246, 188, 233, 240, 56, 62, 31, 113, 59, 190, 28, 87, 235, 189, 222, 102, 46, 62, 85, 1, 17, 62, 152, 145, 12, 62, 150, 105, 5, 187, 62, 24, 194, 188, 7, 213, 27, 62, 7, 214, 191, 62, 93, 3, 175, 62, 88, 118, 209, 188, 137, 221, 223, 190, 167, 103, 147, 62, 121, 242, 6, 190, 49, 157, 169, 62, 111, 205, 147, 61, 25, 224, 111, 61, 64, 85, 151, 62, 111, 43, 151, 62, 87, 10, 37, 62, 209, 42, 1, 62, 217, 93, 189, 62, 102, 57, 222, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 122, 187, 61, 100, 241, 174, 190, 207, 0, 112, 63, 19, 115, 118, 191, 61, 137, 247, 62, 252, 207, 210, 190, 238, 230, 158, 62, 33, 128, 246, 190, 147, 202, 128, 62, 212, 143, 160, 61, 142, 115, 34, 190, 39, 36, 156, 63, 61, 9, 215, 190, 246, 1, 171, 62, 128, 48, 155, 190, 171, 247, 158, 59, 40, 27, 196, 60, 128, 124, 54, 63, 48, 17, 211, 63, 19, 139, 67, 63, 8, 91, 147, 190, 55, 160, 54, 191, 29, 169, 21, 63, 61, 122, 72, 63, 233, 177, 207, 62, 56, 9, 198, 190, 43, 222, 19, 191, 233, 157, 212, 62, 61, 204, 38, 63, 198, 47, 10, 187, 83, 180, 148, 60, 207, 196, 80, 189, 32, 241, 225, 189, 231, 143, 252, 189, 0, 181, 95, 62, 97, 126, 159, 61, 20, 64, 14, 189, 196, 162, 30, 61, 172, 198, 158, 62, 150, 125, 15, 62, 178, 187, 17, 190, 176, 168, 228, 60, 251, 42, 166, 188, 90, 83, 8, 61, 130, 7, 56, 188, 235, 58, 145, 190, 5, 18, 40, 190, 4, 118, 241, 61, 108, 129, 166, 190, 71, 106, 208, 61, 63, 28, 135, 61, 32, 70, 156, 61, 214, 156, 96, 62, 202, 106, 227, 61, 103, 162, 152, 62, 142, 219, 71, 189, 175, 128, 118, 61, 68, 179, 124, 61, 251, 117, 173, 61, 155, 60, 171, 189, 239, 218, 230, 62, 96, 184, 157, 190, 89, 18, 242, 190, 191, 97, 96, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 96, 21, 188, 249, 76, 39, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {175, 34, 170, 191, 52, 65, 92, 62, 79, 208, 197, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {187, 128, 72, 192, 80, 32, 223, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0016/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}