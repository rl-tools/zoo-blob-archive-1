// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 131, 254, 59, 86, 140, 62, 63, 128, 58, 172, 62, 52, 68, 27, 63, 105, 212, 1, 63, 16, 115, 78, 62, 211, 155, 55, 63, 218, 232, 98, 62, 205, 4, 172, 62, 218, 147, 117, 62, 104, 153, 101, 62, 218, 79, 18, 191, 103, 148, 5, 191, 34, 42, 144, 191, 103, 10, 137, 190, 240, 105, 18, 191, 16, 6, 120, 191, 59, 101, 193, 62, 55, 241, 10, 63, 123, 92, 24, 191, 196, 114, 252, 190, 74, 163, 40, 63, 32, 12, 44, 63, 156, 85, 2, 63, 251, 10, 14, 63, 170, 183, 199, 62, 184, 235, 148, 188, 201, 162, 50, 63, 62, 255, 80, 190, 96, 42, 60, 190, 184, 232, 192, 62, 180, 36, 170, 62, 128, 49, 168, 62, 190, 57, 131, 189, 81, 39, 176, 189, 242, 38, 8, 191, 172, 65, 16, 190, 231, 35, 160, 191, 82, 35, 193, 190, 37, 35, 249, 62, 234, 214, 108, 190, 229, 126, 228, 62, 129, 155, 253, 190, 123, 191, 118, 191, 162, 29, 21, 191, 26, 75, 144, 62, 218, 190, 172, 62, 171, 233, 165, 190, 37, 232, 116, 190, 208, 126, 164, 62, 220, 168, 142, 61, 149, 208, 137, 190, 121, 3, 139, 60, 163, 71, 163, 60, 94, 33, 113, 188, 108, 74, 30, 191, 193, 215, 39, 63, 9, 116, 13, 63, 230, 104, 5, 62, 182, 152, 223, 190, 54, 79, 232, 190, 163, 166, 131, 189, 105, 22, 9, 63, 32, 86, 202, 62, 70, 25, 50, 191, 253, 193, 48, 190, 106, 213, 42, 191, 34, 220, 84, 63, 64, 180, 110, 189, 131, 163, 156, 61, 53, 129, 120, 191, 53, 59, 230, 60, 109, 134, 61, 191, 146, 16, 65, 191, 3, 165, 175, 190, 150, 23, 15, 63, 178, 241, 174, 190, 218, 199, 47, 191, 169, 78, 0, 63, 22, 201, 27, 63, 8, 191, 85, 61, 126, 131, 98, 62, 173, 235, 214, 189, 41, 155, 106, 62, 46, 47, 23, 191, 102, 95, 72, 190, 152, 7, 181, 190, 246, 187, 193, 62, 146, 131, 121, 191, 66, 45, 130, 190, 158, 171, 40, 63, 53, 38, 160, 191, 85, 32, 206, 190, 222, 36, 118, 190, 186, 106, 141, 62, 23, 30, 67, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 65, 2, 191, 125, 178, 138, 190, 175, 198, 103, 61, 53, 113, 31, 191, 92, 97, 79, 190, 24, 29, 9, 190, 186, 180, 13, 189, 29, 239, 226, 190, 234, 234, 90, 189, 14, 248, 120, 62, 128, 47, 135, 190, 225, 37, 33, 191, 22, 101, 29, 62, 144, 239, 37, 191, 235, 156, 221, 188, 2, 53, 133, 189, 249, 189, 201, 62, 238, 42, 237, 190, 246, 89, 127, 62, 213, 187, 35, 63, 121, 153, 20, 191, 97, 255, 97, 188, 129, 55, 51, 63, 130, 131, 8, 63, 138, 118, 229, 190, 127, 45, 152, 190, 35, 215, 44, 61, 182, 241, 63, 191, 41, 118, 195, 189, 33, 171, 99, 188, 172, 141, 10, 189, 16, 228, 168, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 118, 19, 189, 203, 121, 24, 190, 52, 63, 22, 190, 25, 80, 161, 60, 250, 15, 240, 60, 161, 114, 170, 60, 208, 66, 4, 61, 157, 3, 204, 186, 68, 199, 58, 59, 172, 144, 46, 62, 54, 84, 53, 189, 94, 125, 41, 190, 30, 217, 186, 189, 210, 211, 131, 188, 193, 54, 215, 59, 45, 137, 156, 61, 78, 145, 34, 62, 112, 250, 0, 189, 216, 143, 21, 61, 64, 216, 154, 189, 198, 96, 141, 189, 173, 168, 12, 62, 253, 180, 105, 189, 149, 107, 1, 190, 251, 202, 22, 189, 250, 184, 210, 188, 97, 15, 143, 61, 24, 116, 250, 189, 120, 51, 27, 190, 178, 78, 196, 60, 234, 119, 92, 61, 248, 149, 207, 189, 177, 162, 35, 58, 179, 0, 31, 190, 231, 21, 157, 189, 171, 211, 43, 61, 248, 202, 77, 190, 221, 97, 235, 59, 17, 97, 56, 188, 67, 7, 218, 61, 94, 171, 109, 190, 42, 123, 18, 191, 76, 12, 47, 189, 181, 137, 36, 61, 87, 185, 156, 62, 143, 160, 249, 189, 149, 96, 40, 190, 19, 128, 171, 190, 51, 174, 178, 59, 38, 99, 157, 61, 42, 7, 129, 62, 81, 153, 90, 190, 201, 117, 98, 62, 212, 16, 83, 190, 143, 65, 48, 62, 57, 79, 133, 62, 220, 255, 81, 190, 102, 254, 162, 62, 149, 145, 185, 189, 167, 160, 92, 61, 46, 139, 48, 191, 179, 138, 210, 60, 84, 91, 22, 190, 112, 108, 94, 190, 222, 107, 191, 61, 174, 128, 149, 61, 214, 58, 154, 61, 234, 181, 49, 189, 137, 185, 56, 190, 228, 34, 133, 189, 211, 192, 248, 189, 159, 97, 233, 61, 255, 226, 44, 62, 232, 251, 21, 62, 185, 233, 20, 62, 135, 18, 15, 190, 77, 165, 79, 61, 188, 204, 215, 60, 28, 202, 50, 190, 232, 29, 54, 62, 161, 131, 11, 60, 38, 216, 93, 57, 105, 101, 55, 190, 158, 13, 61, 62, 61, 81, 161, 190, 21, 51, 182, 190, 65, 177, 245, 190, 18, 175, 108, 190, 59, 224, 141, 189, 224, 172, 159, 190, 2, 175, 75, 62, 173, 254, 163, 61, 49, 156, 15, 190, 84, 66, 23, 191, 116, 200, 227, 190, 20, 48, 235, 189, 25, 66, 9, 189, 148, 120, 153, 62, 105, 7, 63, 62, 166, 138, 193, 61, 100, 197, 98, 190, 42, 195, 158, 189, 105, 8, 30, 189, 144, 215, 115, 62, 244, 120, 136, 61, 237, 123, 5, 62, 119, 106, 5, 61, 60, 107, 42, 62, 129, 224, 192, 190, 89, 119, 34, 62, 14, 113, 247, 61, 117, 37, 141, 62, 154, 232, 6, 189, 44, 170, 12, 61, 75, 73, 27, 62, 163, 175, 215, 61, 93, 171, 1, 61, 23, 66, 133, 190, 160, 67, 165, 61, 10, 66, 203, 190, 79, 147, 108, 190, 174, 146, 4, 190, 161, 231, 112, 62, 134, 132, 87, 189, 105, 170, 33, 188, 202, 105, 12, 191, 190, 237, 251, 190, 192, 130, 202, 188, 41, 39, 12, 190, 124, 80, 53, 190, 187, 123, 20, 189, 245, 250, 17, 62, 59, 30, 235, 61, 9, 39, 142, 62, 50, 230, 71, 189, 47, 125, 46, 189, 58, 90, 172, 190, 70, 5, 142, 190, 165, 210, 13, 190, 192, 8, 46, 61, 12, 0, 108, 61, 135, 60, 193, 61, 52, 150, 50, 62, 238, 75, 217, 189, 42, 37, 220, 189, 160, 99, 230, 189, 139, 105, 78, 190, 202, 74, 154, 189, 31, 189, 249, 190, 84, 179, 120, 190, 133, 167, 44, 62, 5, 42, 27, 190, 11, 19, 93, 62, 8, 122, 20, 190, 32, 89, 34, 190, 26, 202, 204, 189, 5, 170, 153, 189, 22, 128, 95, 190, 39, 50, 188, 188, 215, 77, 34, 62, 81, 24, 2, 61, 204, 210, 73, 62, 110, 19, 235, 61, 96, 158, 139, 60, 220, 54, 85, 62, 224, 190, 36, 62, 121, 229, 123, 189, 210, 128, 234, 61, 79, 66, 251, 189, 143, 41, 15, 189, 45, 114, 255, 61, 15, 41, 60, 190, 237, 180, 14, 62, 56, 226, 2, 189, 213, 243, 54, 62, 83, 255, 20, 62, 164, 2, 251, 61, 61, 15, 31, 62, 202, 146, 220, 189, 119, 142, 138, 61, 210, 58, 84, 190, 164, 217, 196, 189, 212, 160, 140, 189, 76, 11, 104, 62, 11, 63, 99, 189, 16, 218, 204, 189, 122, 50, 28, 62, 192, 253, 131, 60, 209, 52, 207, 61, 209, 4, 137, 190, 7, 27, 161, 190, 59, 243, 43, 62, 157, 28, 55, 62, 185, 122, 250, 190, 160, 80, 39, 190, 99, 58, 138, 188, 73, 60, 131, 190, 36, 146, 9, 190, 129, 247, 53, 62, 139, 245, 97, 190, 151, 194, 196, 60, 103, 141, 149, 61, 42, 250, 141, 189, 197, 248, 146, 189, 123, 223, 7, 190, 238, 69, 223, 189, 110, 87, 5, 190, 208, 146, 7, 190, 95, 77, 229, 60, 11, 207, 178, 189, 248, 220, 2, 62, 46, 124, 167, 61, 91, 202, 245, 62, 182, 65, 97, 62, 25, 47, 90, 62, 232, 121, 198, 61, 14, 6, 123, 190, 94, 45, 110, 62, 196, 110, 227, 190, 43, 115, 22, 188, 245, 63, 197, 189, 78, 75, 38, 62, 249, 74, 166, 62, 34, 158, 95, 190, 29, 226, 76, 62, 85, 139, 5, 61, 230, 226, 130, 190, 176, 92, 57, 62, 131, 66, 25, 61, 1, 153, 201, 61, 245, 119, 81, 189, 182, 65, 90, 190, 140, 163, 118, 190, 186, 86, 101, 190, 32, 195, 3, 190, 143, 126, 230, 61, 245, 30, 168, 62, 223, 191, 1, 191, 202, 183, 48, 62, 234, 151, 144, 190, 156, 72, 28, 190, 247, 225, 219, 188, 183, 117, 22, 62, 251, 37, 32, 190, 250, 109, 70, 62, 211, 181, 223, 189, 183, 92, 157, 61, 147, 240, 183, 61, 57, 27, 78, 62, 149, 3, 252, 189, 78, 127, 18, 188, 94, 243, 204, 190, 225, 180, 222, 61, 160, 41, 65, 190, 171, 246, 80, 190, 12, 48, 129, 187, 210, 117, 172, 190, 238, 219, 37, 190, 13, 1, 78, 62, 220, 17, 139, 190, 1, 61, 103, 190, 120, 152, 113, 190, 121, 213, 8, 62, 198, 154, 20, 190, 155, 230, 129, 62, 16, 139, 7, 61, 138, 152, 142, 190, 215, 188, 97, 190, 137, 50, 206, 60, 74, 206, 229, 61, 255, 78, 65, 190, 236, 208, 163, 189, 242, 228, 168, 189, 226, 250, 247, 189, 206, 118, 240, 61, 167, 161, 79, 62, 91, 24, 10, 190, 220, 131, 147, 62, 33, 215, 36, 62, 211, 235, 109, 61, 242, 221, 76, 189, 74, 247, 202, 189, 47, 59, 189, 189, 48, 160, 153, 60, 145, 187, 61, 190, 43, 241, 121, 62, 151, 190, 135, 62, 90, 174, 213, 189, 205, 71, 192, 61, 241, 144, 20, 61, 234, 56, 226, 61, 185, 74, 233, 61, 255, 120, 231, 60, 180, 220, 179, 188, 73, 205, 44, 62, 186, 124, 243, 61, 165, 76, 186, 61, 208, 216, 17, 189, 216, 188, 199, 60, 189, 92, 177, 185, 237, 216, 5, 189, 250, 144, 102, 189, 67, 143, 213, 61, 240, 201, 129, 188, 67, 197, 16, 190, 230, 144, 7, 190, 28, 156, 116, 189, 218, 165, 112, 190, 149, 30, 230, 189, 238, 122, 6, 190, 201, 26, 186, 190, 102, 147, 254, 189, 1, 16, 119, 189, 249, 5, 2, 190, 20, 80, 9, 189, 169, 193, 244, 189, 203, 75, 44, 190, 193, 53, 37, 190, 187, 56, 135, 60, 196, 75, 30, 189, 211, 75, 207, 189, 74, 20, 232, 61, 122, 64, 195, 189, 187, 101, 8, 190, 58, 3, 14, 62, 28, 110, 162, 61, 148, 79, 86, 61, 119, 9, 160, 188, 118, 255, 134, 189, 30, 49, 39, 62, 209, 249, 1, 60, 102, 144, 16, 62, 49, 210, 162, 189, 169, 194, 22, 190, 142, 200, 35, 62, 233, 133, 251, 189, 159, 53, 153, 189, 186, 8, 13, 189, 90, 162, 13, 61, 49, 110, 94, 189, 241, 240, 6, 190, 47, 77, 22, 190, 38, 65, 141, 187, 209, 128, 237, 188, 157, 79, 124, 189, 131, 199, 67, 189, 10, 230, 23, 190, 99, 33, 250, 61, 208, 39, 204, 189, 29, 253, 16, 190, 77, 99, 35, 190, 16, 226, 111, 188, 59, 153, 157, 190, 140, 3, 158, 62, 214, 121, 7, 62, 179, 2, 107, 190, 66, 241, 135, 62, 20, 243, 35, 190, 223, 229, 179, 190, 119, 226, 64, 190, 83, 63, 177, 60, 130, 49, 11, 190, 232, 6, 134, 61, 209, 38, 140, 60, 153, 203, 170, 190, 97, 168, 125, 62, 135, 17, 41, 62, 9, 223, 112, 62, 170, 23, 168, 62, 216, 197, 167, 189, 5, 78, 188, 190, 41, 248, 120, 61, 232, 145, 241, 190, 164, 124, 138, 190, 116, 100, 205, 61, 241, 5, 176, 190, 8, 116, 26, 189, 154, 44, 219, 190, 222, 63, 114, 60, 99, 191, 194, 61, 123, 110, 143, 62, 127, 77, 205, 62, 100, 24, 170, 190, 202, 98, 3, 62, 111, 182, 145, 61, 74, 248, 155, 62, 45, 74, 253, 61, 220, 132, 185, 189, 249, 9, 44, 62, 158, 211, 149, 62, 101, 238, 96, 61, 207, 21, 220, 188, 248, 168, 142, 62, 107, 2, 67, 61, 86, 106, 155, 189, 120, 244, 80, 190, 186, 175, 114, 189, 108, 251, 199, 186, 98, 148, 60, 62, 65, 182, 137, 62, 66, 24, 244, 61, 245, 43, 155, 189, 18, 249, 66, 190, 182, 139, 18, 61, 55, 75, 167, 190, 32, 150, 119, 190, 238, 201, 41, 62, 85, 189, 105, 62, 87, 72, 15, 62, 201, 69, 74, 190, 2, 126, 163, 62, 210, 36, 166, 187, 44, 77, 92, 62, 202, 213, 128, 190, 235, 176, 157, 190, 228, 46, 228, 188, 142, 77, 150, 61, 78, 184, 35, 191, 214, 89, 152, 189, 63, 183, 147, 60, 87, 174, 219, 190, 212, 180, 103, 60, 252, 38, 157, 62, 183, 197, 107, 189, 112, 247, 83, 62, 232, 74, 180, 62, 66, 62, 205, 189, 215, 239, 19, 62, 177, 11, 54, 190, 171, 176, 51, 190, 122, 82, 86, 190, 195, 225, 64, 61, 125, 179, 23, 188, 156, 93, 236, 61, 94, 113, 73, 62, 67, 210, 22, 62, 34, 9, 167, 61, 176, 188, 3, 62, 125, 40, 4, 62, 187, 75, 150, 189, 52, 9, 192, 190, 236, 181, 206, 61, 2, 42, 149, 190, 50, 253, 211, 189, 192, 43, 254, 59, 132, 73, 112, 61, 138, 243, 198, 62, 135, 173, 234, 188, 253, 6, 100, 62, 112, 195, 211, 62, 92, 222, 59, 62, 59, 38, 57, 190, 177, 8, 27, 61, 237, 237, 67, 62, 155, 240, 0, 189, 72, 120, 20, 62, 147, 203, 225, 61, 27, 84, 172, 61, 53, 252, 179, 61, 68, 135, 35, 61, 4, 141, 171, 189, 30, 9, 17, 191, 1, 141, 104, 62, 106, 13, 10, 62, 166, 55, 129, 62, 138, 141, 50, 188, 42, 62, 160, 189, 188, 242, 22, 62, 36, 135, 7, 191, 23, 157, 9, 190, 209, 69, 42, 61, 75, 50, 178, 57, 118, 81, 89, 61, 230, 48, 191, 189, 200, 213, 148, 62, 239, 166, 82, 190, 208, 85, 153, 62, 102, 202, 2, 189, 111, 23, 133, 189, 131, 15, 196, 61, 140, 111, 44, 62, 70, 250, 33, 62, 180, 181, 220, 61, 149, 166, 51, 190, 69, 35, 155, 62, 45, 172, 237, 61, 50, 143, 4, 61, 146, 136, 32, 190, 179, 52, 239, 189, 105, 150, 134, 61, 67, 30, 226, 60, 144, 33, 20, 189, 20, 204, 35, 188, 158, 133, 11, 190, 131, 114, 1, 61, 252, 192, 10, 62, 103, 212, 41, 62, 46, 135, 0, 62, 41, 212, 2, 61, 135, 46, 202, 61, 77, 238, 33, 190, 71, 91, 149, 189, 34, 249, 230, 189, 101, 58, 163, 60, 104, 191, 36, 62, 104, 238, 112, 190, 87, 76, 115, 62, 183, 157, 81, 189, 18, 224, 89, 62, 219, 162, 173, 189, 51, 86, 155, 189, 92, 222, 13, 62, 140, 106, 22, 187, 143, 217, 198, 60, 204, 169, 58, 62, 179, 200, 154, 189, 151, 37, 70, 190, 173, 4, 215, 188, 171, 21, 58, 62, 70, 127, 199, 189, 118, 157, 80, 62, 71, 4, 48, 62, 152, 92, 146, 61, 134, 221, 105, 190, 202, 85, 223, 190, 60, 251, 36, 188, 97, 96, 38, 190, 171, 215, 128, 190, 135, 249, 241, 61, 123, 115, 240, 61, 129, 42, 40, 60, 136, 126, 233, 61, 164, 76, 38, 62, 80, 127, 38, 61, 78, 172, 235, 190, 188, 135, 36, 189, 97, 3, 251, 59, 34, 29, 193, 188, 238, 206, 7, 62, 240, 42, 208, 60, 229, 130, 151, 190, 198, 111, 191, 59, 252, 22, 198, 189, 170, 228, 179, 190, 153, 45, 227, 190, 174, 164, 43, 191, 235, 77, 148, 189, 166, 174, 1, 190, 247, 25, 5, 191, 200, 17, 175, 190, 114, 165, 116, 62, 175, 98, 143, 190, 38, 254, 206, 61, 234, 90, 162, 189, 184, 153, 45, 190, 162, 214, 175, 189, 186, 3, 128, 190, 172, 93, 57, 60, 42, 105, 59, 191, 155, 207, 61, 191, 246, 235, 100, 62, 174, 0, 96, 60, 4, 118, 87, 62, 123, 192, 160, 189, 80, 173, 222, 62, 138, 6, 182, 62, 164, 114, 12, 62, 107, 132, 82, 62, 241, 188, 68, 191, 66, 176, 37, 62, 23, 231, 212, 190, 2, 113, 98, 190, 186, 232, 95, 190, 248, 167, 246, 61, 13, 18, 175, 62, 212, 119, 157, 190, 253, 115, 16, 190, 23, 3, 105, 191, 244, 217, 195, 61, 46, 197, 147, 61, 9, 11, 85, 191, 96, 64, 165, 190, 71, 233, 150, 190, 18, 198, 141, 190, 161, 230, 135, 61, 255, 43, 172, 189, 106, 236, 166, 60, 246, 189, 250, 61, 139, 91, 75, 191, 166, 100, 148, 61, 189, 49, 59, 191, 188, 193, 93, 191, 248, 91, 49, 62, 29, 29, 123, 189, 242, 225, 56, 62, 18, 137, 77, 189, 239, 220, 193, 62, 6, 151, 209, 62, 114, 93, 220, 62, 195, 59, 249, 59, 33, 88, 33, 191, 56, 75, 41, 190, 53, 227, 21, 191, 10, 77, 141, 190, 195, 92, 90, 62, 102, 242, 77, 62, 121, 145, 6, 62, 66, 26, 21, 62, 177, 250, 201, 188, 148, 161, 53, 191, 113, 208, 122, 190, 105, 105, 46, 62, 75, 59, 116, 190, 245, 174, 32, 189, 33, 254, 48, 189, 42, 210, 207, 189, 30, 58, 160, 61, 128, 58, 80, 62, 242, 116, 135, 190, 162, 113, 144, 61, 166, 255, 103, 61, 19, 50, 143, 189, 9, 227, 207, 60, 118, 229, 35, 189, 216, 31, 97, 190, 130, 110, 131, 188, 24, 68, 104, 62, 87, 102, 35, 61, 179, 41, 80, 62, 120, 246, 17, 62, 230, 46, 67, 190, 67, 229, 37, 62, 76, 145, 250, 189, 134, 89, 54, 62, 205, 172, 151, 188, 149, 29, 188, 189, 33, 47, 92, 189, 142, 32, 218, 61, 46, 152, 3, 189, 126, 90, 104, 190, 132, 83, 172, 190, 203, 231, 203, 61, 197, 142, 146, 190, 216, 159, 54, 62, 214, 3, 235, 189, 20, 182, 103, 62, 3, 118, 26, 60, 253, 46, 89, 190, 78, 65, 1, 62, 27, 57, 49, 61, 186, 184, 129, 189, 161, 138, 173, 61, 124, 55, 87, 62, 187, 229, 112, 61, 63, 68, 43, 61, 155, 31, 122, 61, 104, 6, 158, 60, 133, 223, 39, 61, 175, 125, 121, 62, 251, 1, 59, 61, 248, 122, 144, 62, 161, 161, 23, 190, 151, 247, 14, 62, 105, 85, 49, 62, 195, 151, 25, 62, 140, 96, 58, 62, 153, 114, 203, 189, 86, 226, 201, 188, 105, 92, 128, 190, 238, 21, 29, 62, 76, 225, 169, 189, 244, 98, 132, 190, 111, 208, 48, 190, 2, 168, 122, 62, 99, 6, 156, 62, 211, 3, 129, 190, 164, 152, 45, 62, 140, 130, 63, 62, 169, 183, 58, 190, 210, 230, 156, 62, 99, 19, 210, 62, 207, 41, 183, 189, 215, 35, 127, 62, 33, 205, 106, 190, 26, 26, 39, 62, 35, 156, 29, 62, 16, 210, 111, 62, 121, 87, 107, 62, 2, 71, 59, 189, 48, 185, 136, 61, 40, 96, 133, 190, 98, 166, 166, 61, 243, 148, 195, 190, 211, 7, 188, 190, 253, 9, 43, 189, 127, 90, 165, 188, 96, 158, 160, 60, 224, 158, 26, 190, 211, 83, 184, 62, 56, 183, 100, 62, 70, 209, 61, 62, 179, 35, 197, 190, 177, 236, 139, 190, 254, 177, 73, 62, 200, 2, 151, 190, 153, 147, 28, 191, 252, 138, 71, 190, 67, 21, 232, 61, 55, 41, 45, 190, 115, 251, 188, 189, 220, 89, 129, 62, 224, 246, 143, 190, 189, 149, 184, 60, 67, 74, 49, 62, 194, 35, 228, 189, 5, 248, 169, 60, 9, 4, 159, 61, 63, 23, 112, 190, 209, 88, 48, 190, 81, 150, 95, 190, 83, 83, 75, 190, 65, 93, 216, 189, 37, 93, 138, 62, 162, 51, 120, 61, 211, 117, 33, 63, 147, 128, 52, 62, 157, 67, 46, 61, 163, 177, 201, 189, 158, 246, 102, 190, 0, 188, 231, 61, 33, 74, 176, 190, 95, 52, 67, 190, 89, 142, 14, 190, 39, 139, 148, 61, 118, 153, 146, 62, 161, 148, 185, 60, 61, 28, 29, 189, 73, 25, 77, 189, 92, 94, 140, 189, 115, 54, 123, 190, 237, 147, 64, 191, 56, 233, 139, 190, 247, 1, 34, 61, 23, 74, 10, 62, 245, 125, 43, 62, 10, 135, 155, 189, 84, 54, 215, 188, 143, 119, 0, 190, 115, 82, 226, 190, 246, 54, 121, 61, 73, 126, 13, 191, 150, 3, 83, 191, 232, 80, 201, 62, 52, 89, 89, 189, 115, 93, 150, 61, 49, 101, 123, 190, 108, 99, 218, 61, 50, 122, 156, 61, 110, 154, 78, 62, 213, 34, 14, 61, 102, 149, 42, 191, 236, 242, 33, 62, 159, 97, 33, 190, 119, 197, 120, 189, 228, 224, 198, 62, 53, 20, 29, 61, 14, 11, 135, 189, 103, 230, 92, 62, 218, 67, 99, 189, 133, 10, 14, 62, 35, 19, 75, 61, 63, 53, 17, 62, 82, 104, 31, 187, 3, 118, 118, 61, 134, 211, 173, 188, 83, 168, 124, 60, 206, 41, 79, 62, 101, 170, 14, 190, 202, 223, 1, 188, 40, 54, 208, 61, 116, 201, 175, 189, 116, 120, 144, 61, 184, 92, 105, 62, 148, 6, 180, 62, 42, 94, 8, 61, 74, 158, 3, 62, 117, 134, 166, 190, 65, 98, 146, 61, 141, 126, 192, 190, 65, 160, 55, 190, 81, 17, 132, 60, 0, 253, 134, 190, 47, 195, 120, 62, 97, 106, 14, 190, 250, 108, 139, 60, 171, 108, 6, 62, 159, 219, 28, 189, 242, 224, 90, 189, 202, 145, 7, 62, 240, 117, 48, 62, 218, 204, 232, 61, 67, 139, 58, 62, 127, 0, 150, 61, 126, 205, 132, 190, 30, 185, 66, 62, 153, 200, 147, 62, 124, 85, 61, 190, 141, 139, 103, 61, 119, 212, 213, 61, 227, 32, 50, 61, 78, 164, 67, 61, 78, 135, 102, 190, 146, 253, 161, 61, 62, 23, 190, 190, 177, 103, 50, 62, 6, 129, 77, 62, 7, 171, 33, 61, 75, 152, 3, 62, 204, 103, 203, 60, 193, 16, 224, 61, 135, 216, 206, 190, 135, 126, 135, 190, 128, 52, 54, 62, 47, 182, 6, 62, 40, 168, 101, 60, 245, 84, 72, 59, 242, 161, 140, 62, 104, 189, 155, 190, 111, 123, 106, 61, 121, 68, 165, 190, 40, 159, 57, 190, 210, 252, 216, 61, 50, 182, 196, 61, 210, 107, 2, 61, 246, 103, 153, 62, 143, 63, 156, 190, 185, 78, 13, 62, 108, 152, 41, 63, 232, 224, 23, 190, 26, 39, 150, 62, 15, 158, 136, 188, 221, 114, 253, 61, 177, 36, 30, 62, 191, 76, 122, 190, 46, 94, 143, 60, 116, 77, 59, 191, 148, 245, 163, 60, 144, 33, 196, 61, 249, 13, 129, 60, 138, 105, 24, 190, 145, 82, 112, 190, 139, 90, 84, 62, 205, 36, 41, 191, 232, 231, 187, 190, 53, 209, 139, 62, 254, 49, 10, 62, 56, 180, 239, 188, 137, 65, 34, 190, 149, 66, 134, 62, 182, 249, 184, 190, 170, 104, 207, 62, 63, 2, 212, 190, 4, 232, 156, 190, 205, 52, 124, 62, 186, 160, 206, 189, 55, 226, 55, 191, 65, 14, 13, 62, 222, 127, 58, 186, 96, 209, 149, 190, 137, 74, 45, 190, 71, 9, 136, 62, 191, 102, 198, 190, 75, 104, 241, 61, 127, 45, 31, 62, 166, 247, 68, 189, 4, 138, 31, 62, 144, 174, 108, 189, 153, 140, 208, 189, 184, 197, 36, 189, 115, 154, 185, 190, 242, 161, 108, 59, 73, 1, 178, 61, 236, 63, 47, 62, 96, 101, 164, 61, 247, 103, 155, 62, 95, 243, 94, 62, 137, 120, 218, 59, 77, 181, 199, 61, 240, 61, 151, 190, 127, 93, 19, 62, 131, 138, 241, 190, 235, 66, 82, 190, 214, 32, 160, 190, 237, 174, 68, 61, 83, 132, 209, 61, 204, 99, 99, 190, 14, 218, 52, 62, 169, 17, 242, 61, 238, 206, 211, 59, 169, 220, 167, 61, 134, 35, 145, 189, 100, 123, 4, 62, 135, 11, 233, 60, 57, 90, 216, 60, 26, 45, 19, 62, 90, 27, 67, 61, 233, 42, 153, 61, 149, 90, 251, 189, 160, 47, 9, 190, 236, 215, 208, 61, 229, 129, 51, 190, 136, 44, 139, 188, 191, 97, 103, 61, 65, 72, 167, 61, 100, 7, 153, 60, 52, 4, 181, 61, 254, 12, 21, 190, 99, 78, 27, 190, 42, 183, 121, 190, 28, 255, 83, 190, 110, 195, 46, 190, 108, 180, 19, 190, 141, 229, 27, 62, 50, 16, 176, 189, 204, 138, 213, 61, 136, 135, 76, 190, 220, 34, 59, 190, 83, 13, 199, 189, 43, 10, 115, 188, 203, 106, 108, 189, 48, 206, 111, 62, 187, 204, 23, 61, 242, 216, 158, 61, 200, 24, 86, 60, 190, 71, 37, 62, 189, 133, 191, 189, 167, 229, 169, 62, 108, 239, 33, 189, 81, 110, 206, 61, 206, 106, 229, 61, 69, 231, 232, 189, 42, 22, 240, 61, 5, 122, 59, 190, 6, 76, 121, 189, 72, 224, 161, 60, 210, 241, 219, 61, 117, 228, 159, 61, 210, 222, 108, 62, 234, 97, 17, 189, 221, 237, 242, 60, 240, 29, 55, 62, 228, 201, 71, 62, 10, 215, 69, 190, 245, 7, 207, 61, 160, 54, 89, 189, 230, 212, 17, 190, 22, 187, 70, 61, 34, 14, 210, 60, 3, 90, 207, 61, 252, 129, 197, 61, 219, 106, 131, 61, 150, 236, 163, 189, 177, 138, 52, 62, 10, 169, 214, 189, 94, 32, 122, 188, 46, 111, 34, 61, 184, 83, 244, 188, 142, 164, 32, 189, 191, 74, 249, 62, 65, 121, 176, 62, 8, 160, 88, 189, 29, 24, 155, 61, 207, 223, 173, 190, 248, 67, 146, 189, 189, 121, 220, 189, 26, 154, 16, 62, 131, 116, 208, 61, 252, 233, 1, 62, 21, 44, 225, 187, 138, 19, 50, 62, 15, 111, 38, 62, 239, 109, 202, 189, 159, 86, 5, 190, 234, 28, 136, 62, 99, 223, 93, 188, 122, 15, 236, 188, 173, 158, 150, 62, 83, 107, 166, 189, 94, 217, 42, 61, 172, 3, 11, 190, 225, 27, 65, 58, 122, 147, 47, 189, 20, 175, 28, 62, 55, 79, 100, 59, 48, 232, 95, 62, 151, 64, 145, 190, 0, 31, 207, 189, 215, 62, 87, 62, 135, 137, 57, 190, 221, 210, 120, 61, 168, 241, 159, 61, 176, 61, 186, 61, 242, 159, 194, 189, 172, 43, 145, 61, 206, 112, 35, 62, 97, 57, 189, 189, 14, 107, 132, 62, 99, 190, 234, 62, 157, 155, 62, 62, 98, 202, 19, 61, 184, 70, 98, 61, 114, 146, 98, 62, 194, 26, 178, 188, 226, 239, 144, 190, 104, 249, 130, 61, 169, 127, 60, 62, 203, 74, 209, 61, 225, 54, 88, 190, 172, 193, 5, 62, 134, 222, 8, 190, 10, 178, 68, 189, 225, 119, 138, 190, 157, 249, 82, 190, 79, 4, 144, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 200, 25, 190, 206, 20, 186, 188, 61, 213, 93, 189, 9, 81, 178, 188, 45, 231, 229, 189, 143, 247, 228, 189, 249, 68, 223, 60, 39, 94, 108, 61, 26, 151, 33, 62, 15, 195, 45, 190, 28, 87, 235, 189, 22, 107, 94, 62, 252, 188, 177, 61, 22, 59, 68, 62, 126, 103, 26, 189, 146, 15, 98, 189, 223, 119, 79, 62, 82, 127, 182, 62, 44, 253, 149, 62, 197, 138, 47, 189, 124, 187, 130, 190, 126, 119, 130, 62, 109, 85, 192, 189, 220, 154, 137, 62, 55, 31, 38, 62, 183, 232, 178, 58, 208, 219, 117, 62, 81, 165, 100, 62, 252, 78, 15, 61, 113, 211, 155, 61, 243, 194, 172, 62, 198, 91, 144, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 122, 187, 61, 231, 109, 145, 190, 49, 206, 137, 62, 190, 18, 163, 190, 115, 175, 134, 62, 42, 167, 217, 189, 85, 68, 198, 62, 101, 28, 187, 190, 152, 144, 43, 62, 16, 71, 187, 61, 142, 115, 34, 190, 189, 36, 82, 63, 105, 243, 209, 190, 128, 52, 191, 62, 131, 93, 163, 190, 170, 42, 211, 189, 75, 160, 140, 188, 185, 253, 83, 63, 68, 82, 135, 63, 78, 249, 49, 62, 163, 209, 93, 190, 172, 61, 41, 191, 79, 229, 150, 62, 94, 106, 16, 63, 74, 111, 123, 62, 184, 245, 208, 190, 14, 139, 10, 191, 228, 40, 180, 62, 43, 138, 118, 61, 76, 147, 114, 61, 159, 5, 49, 188, 109, 181, 87, 190, 32, 241, 225, 189, 175, 149, 24, 190, 199, 32, 76, 62, 162, 211, 121, 62, 117, 23, 16, 190, 114, 112, 174, 60, 65, 192, 130, 62, 118, 111, 252, 61, 21, 215, 44, 190, 140, 234, 95, 61, 251, 42, 166, 188, 195, 255, 71, 62, 202, 161, 154, 189, 40, 191, 33, 190, 192, 138, 240, 189, 185, 87, 64, 189, 19, 143, 217, 190, 94, 45, 35, 189, 14, 244, 159, 188, 209, 145, 26, 62, 235, 37, 51, 62, 58, 169, 213, 61, 222, 82, 144, 62, 145, 9, 151, 61, 53, 157, 232, 60, 78, 19, 29, 61, 123, 25, 66, 61, 27, 108, 153, 189, 36, 77, 10, 62, 82, 8, 51, 190, 131, 251, 178, 190, 199, 159, 67, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 61, 15, 60, 40, 55, 221, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {67, 124, 59, 191, 249, 30, 200, 62, 83, 187, 6, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {151, 133, 3, 64, 188, 101, 24, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0016/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}