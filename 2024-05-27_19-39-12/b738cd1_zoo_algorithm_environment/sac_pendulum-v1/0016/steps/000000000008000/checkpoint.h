// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 205, 130, 189, 25, 41, 91, 63, 60, 254, 166, 62, 110, 7, 34, 63, 208, 0, 0, 63, 172, 127, 60, 62, 152, 37, 59, 63, 156, 197, 87, 62, 225, 111, 162, 62, 113, 108, 181, 62, 127, 205, 176, 62, 230, 45, 14, 191, 31, 190, 2, 191, 180, 127, 157, 191, 214, 189, 136, 190, 218, 93, 252, 190, 83, 194, 128, 191, 103, 213, 164, 62, 57, 182, 11, 63, 6, 164, 13, 191, 46, 146, 248, 190, 228, 14, 41, 63, 57, 126, 31, 63, 181, 221, 6, 63, 37, 60, 11, 63, 245, 187, 232, 62, 241, 108, 17, 61, 187, 17, 12, 63, 9, 183, 214, 190, 247, 131, 12, 190, 156, 182, 185, 62, 168, 21, 134, 62, 71, 254, 186, 62, 36, 248, 226, 61, 214, 242, 162, 61, 155, 117, 8, 191, 235, 0, 25, 190, 13, 140, 162, 191, 203, 7, 200, 190, 32, 244, 207, 62, 96, 179, 118, 60, 39, 132, 219, 62, 2, 183, 15, 191, 193, 234, 97, 191, 94, 32, 27, 191, 167, 175, 74, 62, 160, 47, 195, 62, 33, 162, 198, 190, 146, 93, 138, 190, 24, 98, 174, 62, 174, 12, 137, 61, 149, 208, 137, 190, 121, 3, 139, 60, 163, 71, 163, 60, 176, 33, 28, 189, 125, 204, 43, 191, 132, 82, 27, 63, 93, 68, 244, 62, 183, 84, 131, 62, 89, 137, 230, 190, 163, 29, 19, 191, 149, 26, 232, 188, 161, 169, 4, 63, 199, 168, 197, 62, 14, 222, 69, 191, 131, 16, 62, 190, 73, 6, 30, 191, 117, 17, 92, 63, 204, 106, 179, 188, 188, 215, 56, 61, 213, 195, 121, 191, 215, 138, 173, 188, 2, 41, 60, 191, 206, 108, 75, 191, 244, 62, 147, 190, 179, 190, 25, 63, 78, 243, 151, 190, 70, 223, 40, 191, 92, 79, 1, 63, 0, 228, 17, 63, 170, 25, 168, 60, 25, 213, 244, 62, 210, 189, 206, 189, 5, 129, 102, 62, 19, 77, 47, 191, 19, 155, 34, 190, 161, 182, 174, 190, 162, 181, 173, 62, 46, 79, 142, 191, 6, 78, 128, 190, 95, 64, 40, 63, 5, 28, 178, 191, 141, 149, 180, 190, 255, 250, 172, 190, 223, 221, 150, 62, 247, 210, 68, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 87, 2, 191, 81, 162, 141, 190, 80, 60, 146, 61, 165, 199, 77, 191, 88, 120, 98, 190, 181, 224, 164, 190, 52, 150, 107, 189, 176, 67, 216, 190, 43, 182, 196, 189, 51, 182, 100, 62, 59, 252, 137, 190, 242, 189, 58, 191, 113, 245, 61, 62, 181, 42, 64, 191, 71, 127, 11, 61, 252, 137, 32, 189, 67, 177, 188, 62, 238, 42, 237, 190, 146, 99, 148, 62, 212, 24, 39, 63, 235, 164, 5, 191, 97, 94, 25, 188, 137, 213, 20, 63, 109, 171, 253, 62, 101, 156, 1, 191, 9, 171, 155, 190, 54, 190, 250, 60, 229, 0, 84, 191, 68, 81, 75, 190, 64, 21, 88, 60, 45, 88, 77, 188, 174, 226, 18, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 118, 19, 189, 203, 121, 24, 190, 52, 63, 22, 190, 25, 80, 161, 60, 250, 15, 240, 60, 161, 114, 170, 60, 208, 66, 4, 61, 157, 3, 204, 186, 68, 199, 58, 59, 172, 144, 46, 62, 54, 84, 53, 189, 94, 125, 41, 190, 30, 217, 186, 189, 210, 211, 131, 188, 193, 54, 215, 59, 45, 137, 156, 61, 78, 145, 34, 62, 112, 250, 0, 189, 216, 143, 21, 61, 64, 216, 154, 189, 198, 96, 141, 189, 173, 168, 12, 62, 253, 180, 105, 189, 149, 107, 1, 190, 251, 202, 22, 189, 250, 184, 210, 188, 97, 15, 143, 61, 24, 116, 250, 189, 120, 51, 27, 190, 178, 78, 196, 60, 234, 119, 92, 61, 248, 149, 207, 189, 13, 37, 204, 189, 107, 85, 20, 190, 112, 207, 117, 189, 171, 211, 43, 61, 250, 163, 170, 190, 178, 85, 132, 60, 158, 12, 204, 188, 251, 137, 181, 61, 47, 232, 8, 190, 166, 71, 0, 191, 164, 85, 75, 189, 181, 137, 36, 61, 250, 213, 241, 61, 130, 190, 209, 189, 115, 6, 162, 190, 57, 91, 185, 190, 70, 40, 95, 189, 38, 99, 157, 61, 180, 93, 131, 62, 31, 158, 128, 190, 89, 6, 87, 62, 128, 68, 189, 190, 245, 35, 166, 61, 238, 193, 139, 62, 172, 163, 186, 190, 84, 254, 162, 62, 241, 73, 243, 189, 139, 2, 11, 62, 228, 52, 71, 191, 209, 155, 96, 190, 251, 112, 181, 190, 250, 178, 95, 190, 182, 209, 223, 61, 116, 101, 224, 61, 51, 205, 182, 61, 160, 95, 250, 189, 137, 185, 56, 190, 52, 19, 94, 59, 248, 221, 223, 190, 15, 31, 13, 62, 48, 134, 125, 62, 31, 229, 106, 61, 166, 80, 40, 62, 174, 37, 13, 190, 77, 165, 79, 61, 69, 188, 149, 60, 28, 202, 50, 190, 136, 191, 99, 62, 79, 3, 54, 61, 38, 216, 93, 57, 233, 235, 69, 190, 158, 128, 143, 62, 232, 122, 155, 190, 245, 240, 34, 191, 105, 12, 196, 190, 162, 122, 182, 190, 59, 224, 141, 189, 34, 240, 14, 191, 97, 32, 130, 62, 107, 203, 31, 62, 208, 230, 11, 190, 89, 25, 82, 191, 164, 121, 65, 191, 123, 189, 237, 189, 118, 52, 39, 190, 120, 146, 158, 62, 197, 18, 93, 62, 17, 248, 162, 61, 17, 164, 159, 190, 53, 164, 179, 189, 237, 64, 129, 189, 142, 211, 81, 62, 98, 68, 183, 61, 120, 158, 38, 62, 174, 100, 99, 60, 60, 114, 0, 62, 161, 4, 255, 190, 71, 218, 75, 62, 229, 149, 94, 61, 183, 204, 160, 62, 91, 198, 70, 189, 44, 170, 12, 61, 165, 209, 19, 62, 20, 194, 22, 62, 79, 251, 141, 188, 77, 237, 192, 190, 224, 174, 225, 61, 105, 6, 189, 190, 211, 83, 131, 190, 100, 175, 7, 190, 39, 23, 128, 62, 38, 68, 191, 61, 150, 237, 136, 188, 91, 6, 63, 191, 137, 84, 33, 191, 6, 198, 123, 188, 152, 134, 19, 190, 124, 80, 53, 190, 178, 13, 226, 189, 214, 248, 67, 62, 237, 55, 217, 61, 89, 82, 22, 63, 12, 136, 102, 189, 247, 248, 126, 190, 49, 80, 136, 190, 119, 137, 131, 190, 220, 41, 166, 190, 13, 129, 134, 61, 241, 65, 149, 61, 200, 250, 164, 189, 104, 108, 53, 62, 85, 38, 147, 189, 139, 92, 64, 190, 160, 99, 230, 189, 58, 204, 134, 61, 227, 188, 148, 189, 45, 182, 16, 191, 131, 155, 122, 190, 116, 183, 218, 61, 132, 47, 167, 189, 63, 194, 72, 62, 228, 154, 12, 190, 29, 170, 3, 190, 26, 202, 204, 189, 48, 252, 188, 189, 195, 121, 100, 190, 151, 242, 255, 188, 181, 140, 37, 62, 101, 182, 165, 189, 117, 19, 97, 62, 62, 222, 241, 61, 118, 37, 16, 189, 68, 27, 107, 62, 249, 118, 245, 61, 182, 48, 116, 189, 151, 142, 181, 61, 222, 69, 207, 189, 98, 1, 218, 188, 122, 34, 228, 61, 55, 105, 104, 190, 120, 209, 209, 61, 17, 37, 174, 187, 75, 10, 36, 62, 51, 41, 16, 62, 104, 87, 33, 62, 61, 15, 31, 62, 112, 223, 4, 190, 173, 193, 174, 61, 180, 227, 98, 190, 142, 210, 34, 190, 23, 230, 188, 187, 17, 144, 105, 62, 161, 83, 3, 189, 84, 255, 207, 189, 209, 141, 71, 62, 217, 8, 225, 61, 255, 29, 203, 61, 22, 1, 174, 190, 71, 174, 187, 190, 38, 4, 46, 62, 71, 187, 138, 62, 151, 247, 240, 190, 183, 189, 30, 190, 180, 125, 4, 189, 69, 154, 67, 190, 100, 192, 10, 190, 145, 253, 39, 62, 237, 9, 54, 190, 96, 50, 77, 61, 100, 138, 182, 61, 226, 142, 44, 189, 49, 178, 255, 189, 55, 53, 52, 189, 231, 175, 23, 190, 70, 95, 227, 189, 181, 67, 31, 190, 88, 238, 169, 60, 11, 207, 178, 189, 231, 234, 251, 61, 104, 83, 154, 61, 229, 26, 236, 62, 48, 37, 127, 62, 215, 128, 42, 62, 212, 46, 2, 62, 58, 125, 92, 190, 141, 228, 78, 62, 149, 223, 204, 190, 172, 152, 49, 190, 109, 116, 50, 190, 134, 8, 85, 62, 180, 144, 181, 62, 100, 95, 146, 190, 147, 174, 92, 62, 66, 188, 150, 189, 178, 177, 116, 190, 211, 11, 48, 62, 40, 47, 225, 60, 195, 218, 70, 61, 210, 53, 174, 188, 119, 34, 87, 190, 96, 33, 67, 190, 198, 95, 138, 190, 122, 7, 161, 189, 177, 224, 11, 62, 37, 211, 151, 62, 189, 0, 6, 191, 53, 28, 64, 62, 61, 10, 142, 190, 70, 169, 31, 190, 247, 225, 219, 188, 50, 50, 3, 62, 211, 163, 22, 190, 182, 15, 143, 62, 121, 68, 40, 190, 166, 135, 175, 61, 97, 201, 172, 59, 100, 129, 111, 62, 93, 92, 185, 189, 224, 49, 184, 189, 246, 225, 242, 190, 32, 77, 23, 62, 250, 124, 113, 190, 4, 55, 110, 190, 67, 198, 32, 61, 165, 157, 153, 190, 148, 102, 74, 190, 177, 113, 43, 62, 33, 29, 182, 190, 202, 123, 157, 189, 191, 28, 184, 189, 183, 252, 194, 61, 31, 197, 68, 190, 173, 202, 110, 62, 208, 128, 54, 60, 86, 11, 175, 190, 112, 194, 166, 190, 153, 84, 251, 61, 166, 147, 50, 61, 73, 24, 15, 190, 57, 105, 45, 190, 120, 84, 202, 189, 226, 250, 247, 189, 49, 53, 29, 62, 1, 62, 30, 62, 160, 127, 7, 190, 146, 19, 157, 62, 177, 26, 184, 61, 98, 156, 1, 62, 100, 188, 25, 61, 28, 3, 46, 190, 82, 13, 231, 189, 100, 4, 188, 189, 110, 54, 140, 190, 150, 185, 150, 62, 87, 143, 146, 62, 203, 149, 138, 190, 166, 243, 168, 61, 97, 112, 207, 60, 193, 61, 205, 61, 185, 74, 233, 61, 255, 120, 231, 60, 12, 219, 153, 188, 73, 205, 44, 62, 137, 110, 222, 61, 120, 206, 168, 61, 26, 205, 26, 189, 164, 98, 112, 60, 189, 92, 177, 185, 237, 216, 5, 189, 163, 107, 126, 189, 67, 143, 213, 61, 240, 201, 129, 188, 13, 89, 30, 190, 230, 144, 7, 190, 193, 214, 138, 189, 57, 184, 111, 190, 198, 96, 245, 189, 238, 122, 6, 190, 172, 115, 202, 190, 6, 186, 233, 189, 1, 16, 119, 189, 249, 5, 2, 190, 68, 34, 70, 189, 50, 28, 254, 189, 203, 75, 44, 190, 193, 53, 37, 190, 187, 56, 135, 60, 196, 75, 30, 189, 211, 75, 207, 189, 74, 20, 232, 61, 122, 64, 195, 189, 187, 101, 8, 190, 58, 3, 14, 62, 28, 110, 162, 61, 148, 79, 86, 61, 119, 9, 160, 188, 118, 255, 134, 189, 30, 49, 39, 62, 209, 249, 1, 60, 102, 144, 16, 62, 49, 210, 162, 189, 169, 194, 22, 190, 142, 200, 35, 62, 233, 133, 251, 189, 159, 53, 153, 189, 186, 8, 13, 189, 90, 162, 13, 61, 49, 110, 94, 189, 241, 240, 6, 190, 47, 77, 22, 190, 38, 65, 141, 187, 209, 128, 237, 188, 157, 79, 124, 189, 131, 199, 67, 189, 10, 230, 23, 190, 99, 33, 250, 61, 208, 39, 204, 189, 29, 253, 16, 190, 77, 99, 35, 190, 16, 226, 111, 188, 208, 209, 175, 190, 41, 243, 188, 62, 196, 118, 48, 62, 106, 4, 138, 190, 150, 44, 177, 62, 252, 83, 228, 189, 169, 242, 223, 190, 61, 148, 32, 190, 77, 162, 72, 61, 222, 34, 129, 190, 231, 24, 201, 61, 228, 32, 129, 60, 124, 142, 103, 190, 252, 192, 138, 62, 24, 172, 137, 62, 49, 104, 99, 62, 89, 227, 147, 62, 216, 197, 167, 189, 124, 230, 169, 190, 129, 250, 68, 61, 140, 48, 7, 191, 244, 114, 5, 191, 58, 202, 114, 61, 150, 71, 126, 190, 90, 38, 67, 61, 141, 175, 241, 190, 132, 11, 8, 60, 43, 65, 122, 61, 100, 91, 166, 62, 3, 138, 187, 62, 41, 144, 1, 191, 240, 8, 10, 62, 87, 217, 55, 189, 209, 11, 152, 62, 73, 111, 15, 62, 35, 113, 24, 190, 172, 65, 64, 62, 60, 249, 70, 62, 245, 188, 93, 61, 197, 195, 150, 189, 74, 13, 144, 62, 7, 189, 70, 61, 211, 83, 208, 189, 178, 86, 115, 190, 73, 202, 214, 189, 189, 205, 148, 59, 179, 91, 46, 62, 104, 181, 111, 62, 229, 243, 16, 62, 245, 43, 155, 189, 172, 5, 72, 190, 16, 149, 21, 61, 16, 253, 172, 190, 15, 4, 131, 190, 204, 170, 90, 62, 233, 48, 109, 62, 147, 118, 54, 62, 198, 46, 87, 190, 151, 109, 164, 62, 23, 171, 156, 188, 1, 90, 114, 62, 19, 191, 142, 190, 199, 87, 166, 190, 255, 186, 190, 188, 3, 78, 190, 61, 125, 46, 47, 191, 35, 87, 211, 189, 105, 229, 93, 61, 1, 52, 220, 190, 189, 187, 61, 61, 141, 131, 158, 62, 202, 251, 140, 189, 39, 57, 83, 62, 10, 82, 178, 62, 60, 117, 238, 189, 88, 118, 38, 62, 10, 255, 25, 190, 207, 34, 75, 190, 36, 86, 67, 190, 57, 71, 118, 61, 252, 45, 179, 189, 156, 93, 236, 61, 183, 17, 58, 62, 12, 156, 8, 62, 20, 157, 123, 61, 148, 238, 28, 62, 135, 8, 50, 61, 254, 50, 130, 189, 196, 251, 198, 190, 182, 149, 227, 61, 120, 70, 148, 190, 114, 35, 73, 190, 153, 121, 138, 188, 140, 191, 200, 61, 17, 81, 213, 62, 225, 92, 6, 189, 187, 141, 70, 62, 238, 214, 219, 62, 202, 246, 71, 62, 215, 96, 94, 190, 169, 56, 136, 61, 215, 170, 189, 189, 228, 59, 243, 188, 158, 200, 7, 62, 16, 176, 225, 61, 105, 128, 174, 61, 38, 34, 147, 61, 47, 184, 205, 60, 81, 89, 199, 189, 22, 124, 14, 191, 143, 137, 96, 62, 240, 184, 223, 61, 243, 161, 139, 62, 138, 141, 50, 188, 113, 29, 2, 190, 210, 62, 18, 62, 20, 39, 36, 191, 102, 188, 3, 190, 53, 27, 146, 61, 53, 20, 87, 188, 166, 246, 164, 61, 202, 167, 200, 189, 93, 183, 149, 62, 231, 126, 21, 190, 93, 145, 159, 62, 150, 220, 226, 188, 145, 239, 124, 189, 38, 0, 203, 61, 77, 12, 239, 61, 13, 220, 42, 62, 163, 249, 252, 61, 15, 99, 74, 190, 100, 127, 133, 62, 252, 72, 254, 188, 255, 0, 15, 61, 68, 0, 56, 190, 2, 172, 181, 189, 229, 222, 145, 61, 85, 210, 126, 60, 46, 176, 89, 189, 10, 152, 188, 189, 199, 137, 243, 189, 164, 5, 1, 188, 146, 135, 10, 62, 26, 217, 60, 62, 46, 135, 0, 62, 187, 119, 81, 59, 121, 134, 227, 61, 99, 222, 64, 190, 100, 17, 206, 189, 245, 79, 155, 189, 69, 130, 177, 188, 169, 234, 28, 62, 131, 70, 110, 190, 51, 135, 139, 62, 127, 68, 70, 189, 138, 69, 82, 62, 253, 221, 7, 190, 107, 17, 212, 189, 50, 210, 25, 62, 63, 74, 8, 61, 113, 18, 42, 61, 52, 153, 70, 62, 11, 137, 13, 190, 66, 245, 231, 189, 118, 144, 201, 188, 42, 4, 31, 62, 196, 93, 163, 189, 231, 136, 81, 62, 36, 93, 11, 62, 11, 111, 184, 61, 102, 141, 117, 190, 35, 96, 27, 191, 179, 81, 36, 58, 18, 93, 107, 190, 226, 239, 157, 190, 217, 179, 10, 62, 123, 115, 240, 61, 100, 183, 200, 60, 102, 142, 127, 61, 19, 175, 46, 62, 39, 101, 132, 60, 8, 99, 241, 190, 13, 101, 78, 189, 97, 3, 251, 59, 25, 220, 134, 189, 193, 101, 9, 62, 215, 66, 229, 186, 229, 130, 151, 190, 47, 219, 117, 188, 158, 136, 251, 189, 66, 67, 223, 190, 12, 76, 236, 190, 58, 193, 38, 191, 6, 193, 89, 189, 40, 13, 51, 189, 97, 154, 50, 191, 151, 186, 175, 190, 213, 216, 99, 62, 179, 162, 142, 190, 9, 242, 19, 62, 14, 155, 146, 189, 30, 154, 56, 190, 111, 33, 182, 189, 32, 170, 213, 190, 16, 227, 63, 57, 220, 91, 130, 191, 4, 243, 42, 191, 121, 150, 106, 62, 174, 0, 96, 60, 137, 247, 52, 62, 226, 27, 120, 189, 68, 24, 201, 62, 109, 96, 175, 62, 67, 249, 197, 61, 171, 163, 75, 62, 236, 70, 96, 191, 128, 47, 30, 62, 104, 137, 181, 190, 77, 137, 137, 190, 203, 239, 150, 190, 112, 48, 204, 61, 15, 131, 167, 62, 91, 228, 242, 190, 101, 210, 75, 189, 192, 55, 110, 191, 164, 145, 214, 61, 188, 187, 23, 61, 154, 100, 147, 191, 154, 64, 194, 190, 231, 177, 168, 190, 220, 216, 123, 190, 133, 66, 124, 189, 49, 168, 158, 187, 161, 158, 60, 61, 17, 69, 227, 61, 166, 156, 111, 191, 31, 209, 134, 61, 154, 117, 84, 191, 222, 126, 139, 191, 67, 19, 0, 62, 29, 29, 123, 189, 176, 154, 40, 62, 105, 64, 130, 190, 200, 61, 193, 62, 99, 201, 12, 63, 251, 58, 187, 62, 44, 230, 69, 189, 214, 175, 49, 191, 117, 145, 92, 190, 245, 54, 27, 191, 44, 124, 229, 190, 107, 0, 184, 61, 92, 184, 195, 62, 10, 149, 160, 62, 225, 211, 242, 189, 195, 141, 49, 190, 129, 222, 97, 191, 203, 102, 151, 190, 193, 88, 135, 62, 156, 159, 130, 190, 22, 5, 183, 61, 14, 18, 75, 189, 214, 233, 37, 190, 103, 204, 184, 61, 100, 169, 78, 62, 249, 164, 154, 190, 217, 156, 206, 61, 160, 122, 235, 61, 27, 16, 128, 189, 47, 73, 251, 60, 164, 33, 169, 60, 247, 8, 162, 190, 130, 110, 131, 188, 146, 121, 150, 62, 189, 51, 228, 60, 168, 129, 10, 62, 37, 237, 42, 62, 23, 176, 113, 190, 197, 138, 117, 62, 132, 237, 29, 190, 174, 51, 83, 62, 103, 147, 84, 188, 89, 126, 54, 190, 108, 148, 158, 189, 234, 68, 21, 62, 128, 208, 2, 188, 106, 108, 85, 190, 223, 124, 175, 190, 38, 36, 50, 62, 190, 131, 95, 190, 106, 225, 33, 62, 214, 82, 69, 190, 12, 147, 70, 62, 53, 174, 218, 60, 246, 106, 45, 190, 3, 199, 92, 61, 190, 94, 132, 61, 21, 139, 63, 188, 234, 13, 178, 61, 67, 147, 29, 62, 195, 157, 2, 62, 57, 162, 100, 59, 98, 245, 36, 61, 27, 145, 249, 188, 133, 223, 39, 61, 105, 183, 127, 62, 180, 153, 19, 61, 164, 107, 166, 62, 185, 135, 25, 190, 19, 120, 89, 61, 114, 50, 3, 62, 91, 128, 214, 61, 188, 15, 68, 62, 108, 120, 118, 190, 186, 151, 206, 61, 245, 175, 139, 190, 205, 199, 254, 61, 85, 52, 176, 189, 43, 177, 137, 190, 196, 49, 143, 190, 247, 117, 131, 62, 237, 15, 167, 62, 154, 186, 163, 190, 169, 46, 110, 62, 240, 183, 15, 62, 182, 33, 51, 190, 172, 97, 155, 62, 46, 44, 208, 62, 21, 157, 168, 189, 186, 148, 129, 62, 23, 87, 140, 190, 252, 159, 39, 62, 124, 207, 100, 62, 135, 83, 116, 62, 250, 197, 67, 62, 87, 54, 148, 189, 48, 185, 136, 61, 29, 88, 136, 190, 89, 226, 176, 61, 240, 162, 201, 190, 118, 2, 183, 190, 72, 161, 245, 188, 72, 35, 166, 59, 234, 75, 161, 61, 174, 68, 39, 190, 151, 157, 178, 62, 192, 199, 190, 62, 204, 141, 90, 62, 12, 16, 193, 190, 67, 136, 137, 190, 73, 155, 70, 62, 142, 41, 231, 190, 242, 245, 58, 191, 164, 186, 82, 190, 58, 237, 29, 62, 196, 9, 91, 190, 238, 251, 15, 189, 102, 114, 131, 62, 147, 148, 165, 190, 125, 73, 17, 61, 136, 11, 65, 62, 142, 60, 16, 190, 13, 139, 239, 60, 195, 46, 188, 61, 94, 58, 102, 190, 139, 43, 65, 190, 109, 144, 68, 190, 146, 8, 179, 190, 65, 93, 216, 189, 64, 167, 147, 62, 119, 53, 104, 61, 112, 199, 14, 63, 31, 213, 93, 62, 218, 175, 61, 189, 85, 23, 49, 189, 229, 194, 132, 190, 255, 149, 1, 62, 156, 170, 173, 190, 238, 3, 121, 190, 88, 231, 44, 190, 186, 83, 228, 61, 210, 164, 162, 62, 197, 114, 138, 60, 154, 57, 141, 61, 121, 193, 59, 189, 92, 109, 133, 189, 55, 33, 147, 190, 128, 145, 119, 191, 173, 90, 143, 190, 242, 41, 216, 188, 93, 49, 43, 62, 210, 213, 238, 61, 99, 148, 8, 190, 195, 152, 151, 59, 211, 200, 11, 190, 79, 80, 1, 191, 66, 65, 119, 61, 176, 77, 41, 191, 48, 188, 132, 191, 218, 132, 189, 62, 52, 89, 89, 189, 5, 172, 164, 61, 54, 86, 211, 190, 182, 38, 18, 62, 75, 197, 211, 61, 35, 244, 16, 62, 235, 123, 166, 188, 104, 52, 64, 191, 78, 137, 17, 62, 116, 130, 26, 190, 27, 52, 50, 190, 26, 54, 131, 62, 56, 189, 13, 62, 204, 19, 108, 187, 236, 4, 79, 189, 146, 119, 162, 189, 76, 212, 73, 62, 144, 96, 199, 61, 65, 27, 56, 62, 147, 120, 19, 190, 22, 212, 204, 61, 86, 47, 12, 189, 130, 6, 26, 62, 81, 204, 133, 62, 33, 132, 251, 189, 142, 238, 18, 62, 193, 74, 241, 61, 242, 126, 66, 190, 128, 75, 108, 61, 215, 31, 53, 62, 151, 164, 196, 62, 85, 221, 189, 189, 74, 158, 3, 62, 76, 14, 168, 190, 48, 232, 174, 61, 202, 107, 217, 190, 91, 53, 89, 190, 139, 162, 191, 189, 211, 141, 160, 190, 2, 220, 34, 62, 162, 19, 19, 190, 17, 255, 151, 61, 113, 241, 137, 61, 198, 24, 191, 189, 5, 42, 233, 189, 163, 78, 201, 61, 223, 97, 45, 62, 116, 196, 123, 60, 221, 165, 64, 62, 135, 215, 196, 61, 23, 161, 166, 190, 35, 98, 97, 62, 198, 3, 52, 62, 139, 214, 53, 190, 215, 205, 76, 60, 253, 28, 249, 61, 113, 5, 83, 61, 137, 34, 225, 60, 108, 230, 135, 190, 221, 135, 43, 61, 145, 10, 187, 190, 165, 166, 36, 62, 65, 114, 42, 62, 175, 4, 148, 61, 75, 152, 3, 62, 180, 212, 111, 60, 38, 68, 242, 61, 193, 135, 202, 190, 59, 99, 139, 190, 253, 159, 101, 62, 158, 99, 7, 62, 190, 118, 132, 61, 77, 145, 174, 187, 24, 22, 148, 62, 168, 44, 80, 190, 179, 15, 164, 61, 188, 128, 174, 190, 49, 175, 65, 190, 239, 136, 217, 61, 252, 213, 52, 60, 89, 86, 28, 61, 51, 56, 161, 62, 210, 180, 181, 190, 129, 46, 255, 61, 0, 61, 22, 63, 45, 222, 26, 190, 151, 198, 132, 62, 195, 12, 147, 185, 211, 11, 252, 61, 207, 237, 19, 62, 221, 156, 147, 190, 147, 36, 142, 189, 172, 197, 50, 191, 102, 75, 177, 188, 36, 159, 132, 61, 123, 235, 91, 61, 138, 105, 24, 190, 162, 161, 108, 190, 121, 22, 87, 62, 21, 72, 34, 191, 167, 237, 201, 190, 126, 221, 163, 62, 133, 255, 233, 61, 89, 122, 150, 188, 239, 60, 51, 190, 140, 210, 141, 62, 6, 132, 5, 190, 58, 48, 204, 62, 250, 216, 235, 190, 193, 139, 171, 190, 249, 243, 113, 62, 245, 159, 108, 190, 44, 34, 64, 191, 170, 133, 244, 61, 89, 13, 15, 189, 82, 69, 42, 190, 117, 209, 195, 189, 12, 203, 124, 62, 58, 255, 217, 190, 44, 126, 19, 62, 103, 237, 30, 62, 203, 92, 185, 189, 227, 163, 137, 61, 59, 244, 7, 61, 246, 199, 229, 189, 39, 195, 117, 185, 98, 31, 184, 190, 181, 113, 186, 188, 73, 1, 178, 61, 82, 28, 43, 62, 113, 91, 173, 61, 112, 42, 120, 62, 247, 24, 107, 62, 27, 209, 75, 189, 176, 248, 48, 62, 45, 44, 109, 190, 63, 128, 224, 61, 237, 150, 221, 190, 243, 85, 118, 190, 148, 68, 189, 190, 183, 5, 168, 61, 234, 214, 239, 61, 149, 212, 136, 190, 144, 174, 113, 62, 50, 55, 50, 62, 97, 168, 201, 60, 74, 203, 55, 188, 122, 194, 116, 189, 130, 91, 155, 61, 37, 22, 151, 59, 216, 108, 99, 61, 220, 114, 69, 62, 33, 9, 153, 61, 110, 152, 181, 61, 107, 250, 72, 190, 41, 18, 195, 190, 129, 89, 55, 61, 17, 92, 115, 190, 145, 150, 205, 188, 111, 209, 235, 61, 65, 72, 167, 61, 59, 135, 168, 188, 202, 127, 12, 62, 254, 28, 1, 190, 222, 71, 40, 190, 134, 90, 70, 190, 39, 194, 137, 190, 110, 195, 46, 190, 170, 98, 131, 190, 155, 158, 93, 62, 94, 105, 24, 190, 107, 6, 158, 61, 94, 211, 98, 190, 39, 47, 66, 190, 222, 76, 214, 189, 123, 13, 4, 61, 26, 231, 84, 189, 194, 29, 91, 62, 19, 61, 27, 61, 98, 250, 9, 62, 107, 63, 36, 61, 221, 220, 32, 62, 221, 205, 165, 189, 114, 249, 184, 62, 5, 188, 102, 189, 239, 52, 217, 61, 110, 49, 213, 61, 143, 212, 158, 189, 118, 170, 220, 61, 110, 121, 19, 190, 195, 147, 130, 189, 71, 36, 225, 60, 210, 241, 219, 61, 140, 171, 163, 61, 58, 65, 102, 62, 148, 59, 16, 189, 52, 132, 35, 61, 125, 138, 62, 62, 245, 219, 97, 62, 180, 94, 43, 190, 24, 58, 196, 61, 35, 116, 21, 188, 143, 179, 100, 190, 116, 215, 100, 61, 11, 125, 78, 61, 188, 177, 235, 61, 113, 100, 207, 61, 126, 108, 100, 61, 11, 147, 157, 189, 251, 25, 40, 62, 12, 134, 149, 189, 201, 248, 168, 189, 86, 180, 4, 61, 240, 9, 216, 188, 71, 9, 70, 189, 162, 224, 7, 63, 84, 191, 158, 62, 234, 2, 125, 189, 157, 145, 220, 61, 243, 13, 232, 190, 68, 3, 139, 189, 94, 234, 254, 189, 165, 40, 50, 62, 218, 174, 213, 61, 252, 233, 1, 62, 162, 123, 137, 188, 170, 248, 58, 62, 90, 217, 35, 62, 150, 234, 46, 190, 139, 118, 232, 189, 132, 106, 87, 62, 109, 17, 76, 189, 27, 192, 186, 187, 192, 243, 170, 62, 239, 227, 226, 189, 67, 145, 81, 61, 179, 154, 100, 190, 59, 117, 135, 189, 123, 95, 152, 59, 78, 189, 135, 61, 62, 81, 155, 186, 70, 197, 99, 62, 177, 253, 157, 190, 166, 152, 44, 190, 251, 155, 33, 62, 177, 221, 60, 190, 9, 245, 185, 60, 136, 139, 174, 61, 42, 122, 176, 61, 67, 60, 252, 189, 108, 183, 85, 61, 78, 214, 29, 61, 104, 155, 161, 189, 222, 169, 85, 62, 24, 222, 226, 62, 174, 43, 50, 62, 98, 202, 19, 61, 253, 252, 19, 61, 0, 194, 102, 62, 78, 220, 5, 189, 84, 189, 168, 190, 181, 59, 168, 61, 190, 49, 19, 62, 50, 204, 158, 61, 105, 70, 95, 190, 175, 194, 3, 62, 115, 232, 133, 189, 152, 100, 102, 189, 98, 171, 178, 190, 173, 77, 130, 190, 180, 161, 132, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 200, 25, 190, 199, 144, 89, 189, 78, 99, 25, 189, 152, 134, 67, 60, 50, 101, 7, 190, 68, 130, 148, 189, 46, 193, 69, 61, 201, 30, 71, 60, 51, 189, 35, 62, 31, 113, 59, 190, 28, 87, 235, 189, 47, 103, 78, 62, 105, 11, 211, 61, 72, 35, 44, 62, 47, 61, 15, 189, 1, 10, 71, 189, 216, 255, 72, 62, 211, 219, 188, 62, 191, 7, 100, 62, 41, 104, 200, 188, 217, 32, 171, 190, 249, 211, 135, 62, 130, 124, 208, 189, 97, 217, 80, 62, 2, 110, 9, 62, 181, 191, 204, 60, 203, 165, 130, 62, 61, 242, 130, 62, 52, 129, 111, 61, 227, 164, 187, 61, 240, 54, 166, 62, 180, 140, 119, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 122, 187, 61, 152, 117, 148, 190, 78, 22, 247, 62, 166, 186, 205, 190, 189, 208, 146, 62, 175, 5, 244, 189, 21, 65, 173, 62, 67, 77, 174, 190, 128, 240, 53, 62, 212, 143, 160, 61, 142, 115, 34, 190, 216, 9, 96, 63, 110, 47, 218, 190, 220, 195, 187, 62, 174, 134, 162, 190, 236, 177, 183, 189, 154, 208, 231, 188, 196, 170, 69, 63, 1, 90, 153, 63, 11, 62, 203, 62, 166, 1, 89, 190, 127, 130, 51, 191, 240, 232, 184, 62, 241, 155, 29, 63, 38, 115, 141, 62, 150, 19, 210, 190, 22, 71, 14, 191, 197, 126, 171, 62, 180, 210, 24, 62, 126, 46, 53, 61, 11, 212, 171, 188, 3, 17, 57, 190, 32, 241, 225, 189, 26, 204, 31, 190, 9, 102, 95, 62, 254, 63, 141, 62, 7, 56, 209, 189, 8, 104, 73, 61, 151, 136, 138, 62, 189, 108, 13, 62, 66, 0, 44, 190, 176, 168, 228, 60, 251, 42, 166, 188, 34, 76, 249, 61, 249, 89, 127, 189, 137, 157, 39, 190, 26, 20, 30, 190, 61, 50, 44, 189, 217, 129, 219, 190, 113, 249, 127, 188, 144, 178, 84, 60, 45, 40, 27, 62, 13, 133, 28, 62, 36, 59, 228, 61, 63, 101, 157, 62, 161, 18, 137, 61, 200, 94, 159, 60, 160, 118, 148, 61, 95, 18, 137, 61, 118, 55, 164, 189, 53, 18, 8, 62, 170, 103, 59, 190, 32, 87, 187, 190, 177, 238, 51, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {241, 30, 149, 60, 3, 40, 239, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {239, 58, 226, 62, 41, 5, 186, 62, 177, 223, 35, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {167, 32, 207, 191, 74, 254, 120, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0016/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}