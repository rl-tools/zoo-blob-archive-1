// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 116, 134, 189, 29, 114, 142, 63, 66, 149, 186, 62, 220, 234, 32, 63, 103, 189, 5, 63, 204, 148, 80, 62, 37, 98, 49, 63, 189, 16, 145, 188, 109, 120, 183, 62, 175, 152, 15, 63, 102, 254, 145, 62, 28, 15, 12, 191, 147, 169, 210, 190, 129, 102, 187, 191, 45, 241, 139, 190, 39, 187, 66, 191, 88, 234, 124, 191, 199, 99, 194, 62, 141, 188, 15, 63, 220, 38, 205, 190, 119, 185, 3, 191, 33, 37, 48, 63, 101, 71, 230, 62, 191, 22, 21, 63, 84, 108, 12, 63, 83, 133, 14, 63, 48, 123, 80, 60, 187, 35, 239, 62, 18, 201, 149, 190, 47, 142, 6, 190, 22, 9, 232, 62, 247, 78, 21, 190, 117, 121, 218, 62, 56, 71, 174, 61, 73, 252, 129, 61, 159, 247, 252, 190, 27, 151, 36, 190, 186, 118, 189, 191, 157, 10, 177, 190, 21, 230, 168, 62, 37, 54, 231, 62, 193, 235, 230, 62, 67, 230, 244, 190, 162, 61, 100, 191, 187, 76, 45, 191, 132, 249, 70, 62, 189, 15, 231, 62, 52, 177, 176, 190, 216, 185, 157, 190, 0, 112, 238, 62, 46, 155, 144, 61, 149, 208, 137, 190, 121, 3, 139, 60, 163, 71, 163, 60, 110, 74, 131, 190, 59, 90, 86, 191, 33, 200, 27, 63, 165, 156, 232, 62, 229, 82, 176, 62, 31, 130, 226, 190, 101, 231, 81, 191, 172, 85, 183, 61, 73, 123, 11, 63, 28, 47, 177, 62, 87, 67, 92, 191, 4, 111, 62, 190, 33, 88, 67, 191, 139, 237, 115, 63, 208, 33, 45, 59, 251, 136, 33, 190, 11, 161, 159, 191, 247, 8, 50, 188, 231, 170, 87, 191, 96, 96, 52, 191, 21, 173, 159, 190, 51, 178, 37, 63, 141, 16, 30, 190, 143, 112, 38, 191, 157, 130, 255, 62, 193, 143, 245, 62, 165, 6, 170, 61, 107, 22, 30, 63, 241, 193, 230, 61, 42, 254, 128, 62, 18, 248, 33, 191, 164, 45, 98, 188, 233, 91, 202, 190, 135, 94, 150, 62, 162, 233, 159, 191, 86, 55, 111, 190, 123, 178, 32, 63, 175, 155, 188, 191, 119, 53, 178, 190, 119, 131, 2, 191, 24, 183, 172, 62, 203, 57, 78, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 205, 158, 190, 144, 217, 155, 190, 10, 246, 195, 60, 234, 39, 111, 191, 209, 46, 105, 190, 75, 105, 42, 190, 79, 210, 3, 190, 46, 250, 207, 190, 208, 178, 36, 190, 48, 2, 24, 62, 241, 242, 68, 190, 65, 198, 130, 191, 102, 143, 71, 62, 253, 134, 63, 191, 58, 179, 179, 188, 170, 204, 101, 60, 185, 86, 191, 62, 238, 42, 237, 190, 164, 129, 120, 62, 248, 115, 38, 63, 52, 123, 147, 190, 104, 8, 175, 187, 156, 202, 21, 63, 68, 19, 236, 62, 93, 230, 18, 191, 219, 133, 214, 190, 236, 178, 21, 186, 38, 149, 110, 191, 71, 95, 19, 190, 153, 100, 202, 61, 168, 49, 69, 189, 145, 220, 139, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 118, 19, 189, 203, 121, 24, 190, 52, 63, 22, 190, 25, 80, 161, 60, 250, 15, 240, 60, 161, 114, 170, 60, 208, 66, 4, 61, 157, 3, 204, 186, 68, 199, 58, 59, 172, 144, 46, 62, 54, 84, 53, 189, 94, 125, 41, 190, 30, 217, 186, 189, 210, 211, 131, 188, 193, 54, 215, 59, 45, 137, 156, 61, 78, 145, 34, 62, 112, 250, 0, 189, 216, 143, 21, 61, 64, 216, 154, 189, 198, 96, 141, 189, 173, 168, 12, 62, 253, 180, 105, 189, 149, 107, 1, 190, 251, 202, 22, 189, 250, 184, 210, 188, 97, 15, 143, 61, 24, 116, 250, 189, 120, 51, 27, 190, 178, 78, 196, 60, 234, 119, 92, 61, 248, 149, 207, 189, 121, 253, 36, 188, 47, 136, 208, 188, 244, 212, 79, 189, 171, 211, 43, 61, 186, 188, 4, 191, 240, 166, 172, 60, 158, 12, 204, 188, 88, 29, 253, 61, 213, 96, 86, 190, 206, 99, 15, 191, 188, 53, 205, 188, 181, 137, 36, 61, 69, 253, 217, 189, 7, 72, 15, 189, 209, 86, 227, 190, 54, 184, 186, 190, 144, 190, 178, 186, 38, 99, 157, 61, 176, 145, 142, 62, 189, 77, 167, 190, 222, 107, 140, 62, 230, 105, 17, 191, 189, 1, 253, 61, 122, 154, 90, 62, 89, 221, 7, 191, 84, 254, 162, 62, 136, 136, 5, 190, 127, 49, 172, 62, 34, 33, 94, 191, 118, 159, 30, 191, 226, 94, 45, 191, 184, 45, 99, 190, 148, 179, 55, 62, 19, 30, 147, 62, 247, 187, 59, 62, 49, 83, 173, 61, 123, 247, 126, 190, 147, 191, 51, 188, 148, 57, 89, 191, 161, 180, 116, 62, 44, 22, 224, 62, 215, 182, 27, 191, 226, 140, 98, 62, 80, 63, 201, 60, 53, 50, 72, 189, 162, 198, 119, 61, 45, 182, 193, 60, 75, 164, 165, 62, 122, 82, 252, 61, 38, 216, 93, 57, 83, 45, 105, 190, 233, 227, 133, 62, 16, 60, 195, 190, 116, 244, 154, 191, 88, 23, 128, 190, 182, 150, 195, 190, 85, 76, 17, 190, 126, 124, 36, 191, 58, 164, 224, 62, 53, 227, 139, 62, 248, 119, 178, 62, 234, 123, 156, 191, 158, 129, 174, 191, 241, 224, 122, 62, 242, 69, 126, 190, 33, 182, 134, 62, 63, 146, 240, 61, 171, 80, 3, 62, 252, 245, 18, 191, 39, 218, 138, 188, 118, 38, 205, 188, 186, 121, 8, 62, 179, 161, 104, 62, 247, 249, 99, 62, 67, 206, 186, 188, 39, 29, 164, 61, 90, 89, 44, 191, 109, 69, 70, 62, 24, 148, 159, 188, 85, 57, 218, 62, 66, 244, 155, 60, 44, 170, 12, 61, 171, 124, 53, 62, 140, 192, 143, 62, 36, 48, 25, 60, 125, 70, 84, 191, 233, 173, 70, 62, 198, 29, 228, 190, 230, 192, 192, 190, 89, 22, 156, 189, 159, 178, 199, 62, 49, 201, 224, 62, 231, 63, 25, 190, 99, 41, 185, 191, 248, 145, 129, 191, 18, 68, 227, 60, 196, 42, 236, 190, 32, 94, 47, 191, 44, 219, 90, 189, 152, 179, 161, 62, 74, 105, 53, 62, 169, 87, 93, 63, 5, 173, 15, 189, 49, 255, 38, 190, 79, 246, 34, 190, 114, 242, 93, 190, 154, 164, 131, 190, 172, 133, 43, 62, 182, 25, 33, 62, 111, 217, 167, 59, 57, 187, 88, 62, 152, 36, 9, 60, 140, 114, 153, 190, 160, 99, 230, 189, 75, 218, 151, 62, 60, 165, 49, 189, 13, 89, 13, 191, 153, 159, 53, 190, 164, 226, 25, 61, 61, 250, 189, 61, 201, 171, 63, 62, 184, 2, 166, 189, 36, 69, 120, 188, 109, 212, 133, 190, 65, 230, 202, 189, 209, 6, 195, 189, 90, 32, 36, 61, 206, 194, 64, 62, 236, 29, 30, 190, 155, 113, 228, 61, 124, 129, 214, 189, 175, 170, 246, 189, 218, 225, 193, 62, 177, 189, 59, 190, 156, 103, 254, 188, 230, 208, 68, 59, 151, 123, 21, 188, 73, 145, 141, 185, 131, 179, 153, 61, 42, 224, 187, 190, 115, 191, 31, 62, 192, 102, 76, 190, 130, 252, 68, 62, 114, 233, 20, 62, 15, 116, 137, 62, 61, 15, 31, 62, 112, 155, 2, 191, 87, 88, 19, 62, 146, 161, 204, 190, 33, 42, 88, 190, 155, 252, 255, 61, 0, 44, 124, 62, 102, 141, 105, 61, 27, 51, 210, 189, 177, 208, 144, 62, 156, 97, 95, 62, 207, 22, 148, 61, 186, 47, 205, 190, 189, 62, 222, 190, 168, 123, 75, 62, 124, 239, 57, 62, 247, 11, 239, 190, 81, 149, 65, 190, 135, 191, 60, 190, 214, 75, 250, 189, 61, 139, 64, 189, 74, 62, 39, 62, 232, 159, 138, 190, 226, 205, 10, 62, 117, 72, 190, 61, 97, 81, 66, 190, 188, 202, 125, 190, 222, 5, 239, 189, 141, 58, 111, 190, 135, 51, 93, 190, 22, 183, 41, 61, 173, 226, 130, 61, 11, 207, 178, 189, 174, 169, 188, 61, 221, 195, 231, 61, 129, 218, 213, 62, 65, 61, 57, 62, 247, 245, 44, 189, 210, 182, 249, 61, 160, 195, 145, 190, 252, 150, 122, 62, 176, 167, 161, 190, 12, 203, 14, 191, 113, 203, 247, 190, 187, 159, 29, 62, 141, 44, 152, 62, 215, 85, 37, 191, 131, 4, 175, 62, 81, 215, 55, 189, 87, 87, 36, 190, 194, 60, 226, 59, 164, 154, 102, 61, 73, 38, 48, 190, 24, 48, 65, 188, 26, 78, 25, 190, 151, 79, 37, 191, 90, 239, 156, 190, 185, 31, 53, 61, 24, 242, 186, 60, 176, 127, 156, 62, 10, 151, 4, 191, 194, 194, 100, 62, 11, 43, 187, 190, 85, 107, 242, 189, 247, 225, 219, 188, 51, 54, 68, 189, 77, 17, 67, 190, 12, 248, 3, 63, 120, 250, 8, 190, 174, 17, 184, 61, 155, 222, 223, 188, 4, 197, 166, 62, 230, 151, 8, 190, 19, 150, 170, 190, 192, 64, 26, 191, 173, 60, 81, 62, 0, 173, 108, 190, 142, 227, 82, 190, 38, 107, 56, 61, 253, 88, 19, 191, 238, 141, 89, 190, 185, 204, 255, 61, 69, 194, 214, 190, 10, 232, 93, 61, 64, 31, 64, 62, 142, 249, 183, 61, 104, 177, 152, 190, 167, 149, 146, 62, 101, 168, 45, 188, 130, 100, 235, 190, 240, 237, 50, 191, 171, 211, 164, 61, 161, 215, 12, 62, 120, 225, 130, 190, 91, 9, 73, 62, 137, 181, 105, 188, 226, 250, 247, 189, 48, 139, 82, 62, 21, 103, 68, 62, 157, 203, 199, 189, 5, 164, 108, 62, 102, 242, 131, 190, 129, 199, 36, 62, 13, 97, 119, 189, 201, 3, 206, 189, 218, 114, 81, 189, 90, 54, 21, 190, 201, 186, 83, 191, 137, 0, 119, 62, 114, 186, 97, 62, 231, 119, 78, 191, 166, 243, 168, 61, 97, 112, 207, 60, 193, 61, 205, 61, 185, 74, 233, 61, 255, 120, 231, 60, 12, 219, 153, 188, 73, 205, 44, 62, 137, 110, 222, 61, 120, 206, 168, 61, 26, 205, 26, 189, 164, 98, 112, 60, 189, 92, 177, 185, 237, 216, 5, 189, 163, 107, 126, 189, 67, 143, 213, 61, 240, 201, 129, 188, 13, 89, 30, 190, 230, 144, 7, 190, 193, 214, 138, 189, 57, 184, 111, 190, 198, 96, 245, 189, 238, 122, 6, 190, 172, 115, 202, 190, 6, 186, 233, 189, 1, 16, 119, 189, 249, 5, 2, 190, 68, 34, 70, 189, 50, 28, 254, 189, 203, 75, 44, 190, 193, 53, 37, 190, 187, 56, 135, 60, 196, 75, 30, 189, 211, 75, 207, 189, 74, 20, 232, 61, 122, 64, 195, 189, 187, 101, 8, 190, 58, 3, 14, 62, 28, 110, 162, 61, 148, 79, 86, 61, 119, 9, 160, 188, 118, 255, 134, 189, 30, 49, 39, 62, 209, 249, 1, 60, 102, 144, 16, 62, 49, 210, 162, 189, 169, 194, 22, 190, 142, 200, 35, 62, 233, 133, 251, 189, 159, 53, 153, 189, 186, 8, 13, 189, 90, 162, 13, 61, 49, 110, 94, 189, 241, 240, 6, 190, 47, 77, 22, 190, 38, 65, 141, 187, 209, 128, 237, 188, 157, 79, 124, 189, 131, 199, 67, 189, 10, 230, 23, 190, 99, 33, 250, 61, 208, 39, 204, 189, 29, 253, 16, 190, 77, 99, 35, 190, 16, 226, 111, 188, 176, 255, 245, 190, 153, 13, 184, 62, 144, 30, 243, 61, 249, 25, 255, 190, 137, 90, 221, 62, 91, 92, 175, 190, 22, 197, 3, 191, 242, 134, 29, 190, 46, 104, 184, 59, 172, 189, 59, 191, 161, 119, 54, 62, 158, 249, 52, 190, 86, 73, 87, 190, 187, 60, 7, 63, 9, 63, 142, 62, 133, 238, 144, 62, 253, 142, 129, 62, 216, 197, 167, 189, 75, 229, 198, 190, 29, 243, 39, 61, 19, 124, 33, 191, 209, 73, 9, 191, 80, 76, 51, 61, 224, 119, 147, 190, 157, 239, 224, 61, 118, 75, 6, 191, 14, 98, 146, 189, 160, 114, 201, 61, 62, 227, 195, 62, 250, 221, 220, 62, 218, 202, 4, 191, 252, 173, 107, 62, 227, 149, 185, 190, 181, 229, 126, 62, 208, 185, 45, 62, 210, 86, 91, 190, 79, 143, 130, 62, 156, 197, 160, 190, 182, 17, 82, 61, 232, 160, 192, 188, 196, 203, 137, 62, 198, 102, 179, 61, 176, 121, 195, 61, 247, 6, 171, 190, 204, 121, 46, 189, 137, 172, 4, 190, 1, 115, 90, 62, 86, 200, 8, 62, 208, 61, 196, 60, 245, 43, 155, 189, 82, 192, 95, 190, 37, 105, 13, 61, 114, 62, 62, 191, 43, 59, 64, 190, 181, 213, 135, 62, 250, 232, 167, 62, 90, 82, 126, 62, 70, 227, 133, 190, 45, 171, 150, 62, 90, 220, 142, 62, 182, 198, 129, 62, 204, 214, 91, 190, 119, 79, 143, 190, 138, 88, 200, 60, 132, 232, 23, 62, 156, 141, 44, 191, 147, 238, 237, 189, 201, 187, 189, 61, 186, 155, 3, 191, 67, 158, 9, 62, 161, 164, 174, 62, 112, 69, 177, 189, 248, 65, 117, 62, 224, 205, 175, 62, 200, 27, 42, 190, 207, 125, 87, 62, 234, 180, 121, 190, 205, 144, 189, 189, 41, 142, 76, 190, 77, 68, 28, 62, 250, 185, 189, 189, 156, 93, 236, 61, 55, 53, 13, 62, 114, 66, 34, 62, 68, 178, 233, 61, 42, 3, 220, 61, 179, 188, 131, 189, 4, 25, 26, 190, 198, 183, 212, 190, 244, 53, 47, 62, 52, 40, 123, 190, 114, 233, 189, 190, 105, 219, 151, 187, 81, 117, 45, 61, 97, 98, 202, 62, 230, 182, 119, 189, 154, 206, 120, 189, 183, 55, 182, 62, 89, 152, 66, 62, 82, 199, 127, 190, 28, 239, 59, 62, 166, 191, 27, 191, 143, 88, 136, 188, 113, 133, 14, 62, 47, 25, 133, 61, 148, 135, 233, 61, 17, 139, 81, 62, 112, 180, 9, 189, 99, 27, 78, 60, 203, 77, 63, 191, 65, 103, 144, 62, 73, 150, 188, 60, 12, 19, 58, 62, 138, 141, 50, 188, 14, 165, 24, 190, 4, 76, 10, 62, 238, 156, 124, 191, 104, 241, 87, 189, 135, 86, 247, 61, 81, 58, 217, 61, 162, 84, 31, 62, 115, 230, 253, 189, 91, 87, 117, 62, 11, 67, 24, 61, 201, 57, 172, 62, 125, 182, 130, 61, 60, 59, 180, 187, 150, 52, 29, 62, 48, 203, 241, 188, 34, 166, 192, 61, 85, 209, 224, 61, 34, 74, 125, 190, 129, 144, 166, 62, 19, 149, 206, 190, 160, 121, 159, 59, 101, 6, 35, 190, 193, 206, 232, 189, 187, 154, 141, 61, 5, 243, 20, 62, 148, 116, 4, 190, 204, 153, 74, 189, 61, 249, 134, 190, 39, 138, 235, 60, 144, 211, 245, 60, 96, 240, 43, 62, 46, 135, 0, 62, 117, 255, 195, 60, 159, 142, 172, 61, 154, 84, 208, 190, 80, 221, 182, 189, 22, 231, 43, 61, 196, 244, 38, 61, 2, 29, 70, 62, 81, 105, 151, 190, 32, 47, 109, 62, 28, 142, 189, 61, 129, 152, 107, 62, 48, 39, 248, 189, 232, 253, 226, 189, 37, 247, 75, 62, 33, 131, 147, 61, 33, 49, 137, 61, 140, 110, 93, 62, 29, 185, 236, 61, 145, 163, 198, 190, 51, 126, 148, 189, 48, 164, 96, 62, 118, 91, 34, 189, 23, 155, 58, 62, 133, 250, 19, 62, 185, 222, 26, 62, 246, 89, 76, 190, 106, 103, 22, 191, 255, 168, 160, 61, 26, 61, 51, 190, 50, 135, 212, 189, 120, 25, 154, 61, 123, 115, 240, 61, 143, 148, 233, 60, 253, 13, 131, 61, 108, 142, 51, 62, 110, 11, 41, 61, 153, 159, 1, 191, 235, 194, 173, 189, 97, 3, 251, 59, 161, 76, 115, 61, 172, 196, 6, 62, 236, 30, 226, 60, 65, 102, 197, 190, 219, 193, 173, 60, 199, 59, 207, 189, 28, 42, 66, 190, 185, 116, 16, 191, 20, 97, 30, 191, 161, 207, 71, 189, 34, 206, 242, 61, 56, 21, 169, 191, 156, 243, 163, 190, 140, 108, 159, 62, 20, 150, 160, 190, 225, 211, 92, 62, 1, 214, 95, 189, 9, 161, 128, 190, 219, 139, 101, 189, 169, 172, 79, 191, 61, 60, 118, 61, 158, 58, 157, 191, 237, 37, 150, 190, 2, 208, 163, 62, 174, 0, 96, 60, 97, 134, 183, 61, 2, 140, 211, 60, 240, 135, 198, 62, 154, 111, 147, 62, 56, 11, 4, 190, 225, 232, 13, 62, 132, 223, 119, 191, 252, 185, 179, 62, 65, 51, 141, 190, 72, 177, 185, 190, 190, 198, 24, 190, 195, 189, 201, 60, 67, 73, 150, 62, 176, 119, 196, 190, 92, 178, 73, 189, 72, 172, 131, 191, 87, 239, 252, 61, 188, 187, 23, 61, 94, 29, 196, 191, 109, 184, 219, 190, 173, 233, 25, 190, 195, 95, 125, 190, 79, 85, 44, 189, 122, 105, 17, 61, 57, 201, 82, 61, 17, 69, 227, 61, 61, 53, 38, 191, 112, 210, 210, 60, 227, 246, 137, 191, 100, 210, 204, 191, 206, 165, 56, 62, 29, 29, 123, 189, 156, 171, 30, 62, 186, 154, 227, 190, 70, 244, 175, 62, 4, 182, 41, 63, 161, 205, 244, 62, 106, 155, 134, 60, 113, 187, 68, 191, 85, 209, 58, 190, 101, 208, 7, 191, 54, 218, 96, 191, 221, 10, 221, 61, 135, 243, 21, 63, 69, 42, 213, 62, 213, 18, 98, 190, 22, 143, 143, 189, 53, 163, 114, 191, 195, 134, 133, 190, 41, 153, 195, 62, 234, 107, 172, 190, 139, 34, 160, 62, 123, 109, 98, 189, 254, 146, 66, 190, 235, 173, 207, 61, 140, 189, 87, 62, 211, 40, 159, 190, 63, 207, 102, 62, 80, 246, 253, 61, 114, 145, 225, 188, 138, 110, 151, 60, 100, 83, 199, 61, 123, 163, 177, 190, 130, 110, 131, 188, 98, 130, 1, 63, 20, 111, 144, 60, 18, 94, 65, 62, 47, 162, 42, 62, 225, 223, 142, 190, 218, 252, 111, 62, 32, 9, 67, 190, 211, 162, 126, 62, 95, 207, 25, 188, 3, 19, 236, 190, 30, 91, 133, 189, 100, 71, 47, 62, 80, 89, 156, 187, 230, 2, 107, 190, 173, 24, 215, 189, 52, 238, 219, 62, 137, 116, 190, 189, 199, 253, 19, 62, 149, 153, 194, 190, 39, 108, 227, 61, 60, 45, 46, 62, 101, 246, 164, 189, 109, 251, 140, 190, 28, 49, 125, 62, 246, 20, 147, 61, 142, 2, 244, 61, 239, 244, 175, 61, 37, 82, 67, 62, 117, 209, 210, 189, 162, 36, 212, 188, 145, 122, 51, 61, 133, 223, 39, 61, 135, 124, 127, 62, 247, 92, 188, 187, 141, 36, 222, 62, 97, 195, 101, 61, 219, 40, 27, 60, 207, 122, 197, 60, 229, 120, 3, 189, 46, 8, 162, 62, 200, 218, 197, 190, 48, 25, 161, 62, 205, 214, 158, 190, 229, 246, 82, 62, 156, 111, 2, 62, 42, 176, 157, 190, 90, 7, 164, 190, 212, 17, 87, 62, 27, 200, 170, 62, 255, 253, 201, 190, 175, 247, 143, 62, 96, 45, 131, 61, 115, 253, 64, 190, 174, 200, 184, 62, 234, 89, 194, 62, 161, 242, 128, 189, 180, 239, 182, 62, 44, 250, 195, 190, 99, 40, 82, 62, 128, 68, 155, 62, 200, 60, 133, 62, 91, 205, 171, 61, 170, 102, 255, 189, 48, 185, 136, 61, 181, 75, 133, 190, 91, 224, 172, 61, 123, 2, 193, 190, 107, 5, 167, 190, 31, 28, 40, 61, 225, 192, 109, 61, 69, 155, 242, 61, 131, 141, 105, 190, 8, 115, 161, 62, 83, 220, 41, 63, 148, 215, 77, 62, 86, 250, 185, 190, 92, 241, 131, 190, 22, 185, 102, 62, 163, 26, 243, 190, 8, 62, 69, 191, 194, 206, 71, 190, 233, 29, 128, 62, 201, 197, 177, 190, 205, 83, 107, 61, 136, 36, 146, 62, 205, 143, 3, 191, 212, 86, 144, 61, 76, 234, 128, 62, 143, 177, 167, 190, 234, 95, 16, 62, 118, 199, 139, 61, 67, 47, 151, 190, 252, 225, 85, 190, 216, 21, 3, 190, 77, 138, 238, 190, 65, 93, 216, 189, 77, 142, 187, 62, 0, 131, 151, 61, 185, 175, 6, 63, 99, 239, 131, 62, 26, 197, 10, 190, 203, 230, 11, 190, 95, 80, 145, 190, 241, 167, 51, 62, 153, 25, 160, 190, 127, 162, 28, 191, 162, 146, 21, 190, 218, 44, 12, 62, 63, 195, 186, 62, 177, 204, 200, 187, 139, 148, 12, 62, 171, 214, 213, 60, 159, 103, 233, 188, 55, 33, 147, 190, 82, 46, 109, 191, 22, 231, 163, 190, 156, 74, 147, 188, 241, 195, 77, 62, 27, 254, 168, 62, 90, 166, 38, 190, 10, 58, 215, 60, 211, 200, 11, 190, 171, 187, 54, 190, 218, 221, 69, 61, 145, 208, 81, 191, 56, 112, 193, 191, 171, 172, 229, 62, 52, 89, 89, 189, 213, 45, 82, 61, 198, 181, 20, 191, 88, 128, 235, 61, 150, 142, 58, 62, 226, 53, 130, 62, 17, 133, 243, 188, 167, 12, 85, 191, 150, 207, 114, 62, 85, 199, 8, 61, 108, 61, 224, 190, 100, 86, 139, 62, 9, 174, 172, 62, 136, 167, 207, 61, 111, 122, 35, 190, 248, 43, 168, 60, 116, 51, 139, 62, 86, 82, 193, 61, 203, 61, 78, 62, 190, 155, 108, 190, 93, 109, 56, 62, 12, 56, 11, 188, 237, 176, 4, 62, 221, 86, 157, 62, 111, 15, 18, 190, 224, 209, 223, 188, 138, 122, 44, 62, 38, 244, 161, 190, 184, 136, 26, 62, 84, 79, 69, 62, 232, 56, 254, 62, 243, 32, 24, 190, 74, 158, 3, 62, 234, 16, 14, 191, 159, 184, 236, 61, 78, 180, 195, 190, 209, 76, 142, 190, 239, 63, 124, 190, 108, 189, 230, 190, 200, 22, 57, 62, 105, 205, 156, 189, 155, 34, 252, 61, 25, 58, 121, 61, 121, 82, 40, 189, 132, 129, 77, 190, 246, 92, 121, 61, 42, 184, 44, 62, 145, 172, 133, 190, 36, 85, 9, 62, 163, 5, 229, 61, 71, 53, 202, 190, 218, 132, 133, 62, 199, 31, 133, 190, 216, 117, 59, 190, 166, 184, 14, 61, 196, 23, 220, 61, 158, 12, 149, 61, 238, 90, 43, 62, 30, 162, 183, 190, 228, 228, 153, 61, 216, 176, 21, 191, 232, 149, 69, 62, 198, 151, 128, 61, 194, 195, 38, 59, 75, 152, 3, 62, 223, 212, 9, 189, 26, 15, 232, 61, 201, 24, 37, 191, 15, 91, 108, 190, 229, 21, 156, 62, 55, 79, 70, 62, 29, 113, 16, 62, 100, 154, 115, 189, 212, 67, 133, 62, 60, 228, 239, 61, 115, 211, 206, 61, 18, 101, 158, 190, 64, 11, 44, 190, 68, 50, 29, 62, 226, 39, 163, 190, 136, 13, 192, 188, 109, 13, 169, 62, 69, 222, 169, 190, 230, 39, 191, 61, 226, 116, 22, 63, 6, 246, 50, 190, 210, 159, 114, 62, 99, 237, 15, 188, 1, 36, 17, 62, 236, 60, 105, 62, 169, 110, 156, 190, 169, 46, 181, 189, 219, 141, 130, 191, 121, 11, 58, 189, 180, 252, 202, 187, 111, 176, 78, 60, 138, 105, 24, 190, 230, 237, 183, 189, 43, 29, 90, 62, 220, 203, 82, 191, 115, 124, 196, 190, 254, 235, 223, 62, 182, 242, 45, 62, 198, 70, 54, 59, 26, 170, 105, 190, 116, 25, 129, 62, 245, 76, 241, 61, 139, 252, 194, 62, 26, 48, 245, 190, 216, 56, 178, 190, 43, 167, 141, 62, 76, 9, 22, 191, 202, 78, 57, 191, 217, 228, 203, 61, 245, 97, 96, 190, 77, 254, 139, 188, 49, 3, 213, 61, 219, 132, 121, 62, 1, 217, 5, 191, 90, 95, 115, 62, 18, 240, 33, 62, 252, 38, 116, 190, 56, 112, 52, 190, 22, 154, 162, 60, 140, 78, 215, 189, 32, 118, 207, 189, 125, 157, 140, 189, 83, 235, 247, 60, 73, 1, 178, 61, 184, 196, 49, 62, 242, 234, 16, 62, 53, 242, 46, 62, 11, 86, 49, 62, 229, 188, 250, 190, 7, 106, 101, 62, 119, 179, 132, 190, 217, 1, 33, 62, 247, 128, 170, 190, 155, 32, 171, 190, 124, 16, 74, 191, 16, 34, 73, 61, 74, 93, 142, 61, 82, 71, 50, 191, 111, 43, 166, 62, 63, 223, 166, 62, 10, 182, 137, 61, 154, 28, 208, 190, 234, 26, 42, 190, 128, 208, 116, 187, 232, 12, 189, 60, 61, 157, 225, 61, 179, 74, 161, 62, 223, 108, 150, 61, 137, 34, 64, 61, 146, 214, 204, 190, 45, 138, 173, 191, 122, 241, 52, 187, 86, 192, 137, 190, 31, 239, 16, 62, 14, 27, 182, 62, 65, 72, 167, 61, 84, 6, 18, 190, 204, 169, 80, 62, 223, 60, 27, 190, 225, 75, 87, 190, 232, 202, 136, 189, 151, 6, 192, 190, 145, 240, 174, 190, 121, 159, 93, 190, 62, 58, 175, 62, 68, 178, 152, 190, 245, 143, 225, 62, 215, 53, 150, 190, 186, 34, 100, 190, 34, 191, 22, 190, 81, 198, 42, 61, 144, 166, 54, 189, 30, 243, 52, 62, 114, 58, 196, 60, 55, 188, 85, 62, 201, 98, 191, 61, 75, 48, 29, 62, 219, 225, 149, 189, 6, 184, 214, 62, 82, 7, 79, 189, 140, 65, 0, 62, 195, 172, 168, 59, 212, 140, 15, 189, 115, 131, 68, 62, 18, 169, 27, 190, 135, 92, 43, 189, 129, 239, 26, 61, 210, 241, 219, 61, 51, 125, 202, 61, 132, 86, 104, 62, 106, 114, 159, 188, 236, 90, 83, 60, 123, 203, 61, 62, 13, 177, 145, 62, 59, 92, 129, 190, 4, 73, 188, 61, 246, 9, 89, 61, 9, 36, 129, 190, 95, 139, 202, 188, 89, 0, 46, 61, 229, 192, 200, 61, 64, 111, 88, 61, 209, 3, 112, 61, 49, 94, 77, 189, 93, 135, 53, 62, 81, 128, 214, 60, 38, 165, 189, 190, 180, 87, 202, 60, 1, 53, 152, 61, 198, 166, 161, 188, 211, 60, 31, 63, 158, 198, 187, 62, 189, 147, 214, 187, 153, 246, 190, 61, 236, 88, 27, 191, 63, 2, 183, 60, 226, 230, 45, 190, 141, 11, 142, 62, 102, 179, 217, 61, 252, 233, 1, 62, 19, 222, 141, 186, 145, 34, 132, 62, 186, 42, 61, 62, 12, 110, 123, 190, 251, 253, 196, 189, 70, 20, 57, 62, 145, 62, 167, 190, 91, 45, 220, 61, 121, 95, 217, 62, 213, 96, 159, 189, 136, 164, 67, 187, 181, 248, 182, 190, 181, 198, 242, 189, 231, 96, 25, 61, 61, 139, 78, 60, 219, 122, 222, 188, 43, 203, 123, 62, 236, 222, 130, 190, 254, 173, 128, 190, 125, 126, 14, 62, 222, 167, 48, 190, 116, 183, 31, 61, 9, 30, 174, 61, 165, 176, 5, 62, 85, 209, 94, 189, 228, 7, 43, 61, 37, 75, 228, 60, 101, 119, 97, 189, 238, 119, 59, 62, 242, 236, 209, 62, 228, 173, 44, 62, 98, 202, 19, 61, 203, 19, 222, 61, 49, 179, 128, 62, 247, 184, 12, 188, 190, 168, 159, 190, 53, 10, 68, 62, 228, 220, 72, 62, 101, 56, 57, 59, 38, 65, 106, 190, 160, 234, 244, 61, 32, 45, 215, 61, 22, 191, 163, 189, 72, 167, 192, 190, 225, 229, 130, 190, 12, 30, 155, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 200, 25, 190, 79, 219, 204, 189, 128, 100, 27, 61, 104, 75, 230, 61, 90, 255, 191, 189, 37, 190, 164, 60, 38, 248, 143, 61, 21, 79, 76, 189, 120, 140, 61, 62, 31, 113, 59, 190, 28, 87, 235, 189, 5, 56, 13, 62, 184, 0, 16, 62, 160, 28, 13, 62, 84, 123, 205, 187, 240, 54, 220, 188, 146, 160, 51, 62, 59, 190, 196, 62, 179, 241, 155, 62, 54, 64, 187, 188, 76, 111, 226, 190, 140, 128, 146, 62, 114, 57, 9, 190, 197, 156, 142, 62, 186, 134, 168, 61, 186, 76, 91, 61, 88, 200, 151, 62, 59, 162, 151, 62, 39, 12, 1, 62, 46, 101, 17, 62, 161, 248, 194, 62, 80, 127, 237, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 122, 187, 61, 203, 152, 179, 190, 101, 139, 98, 63, 42, 216, 96, 191, 19, 57, 2, 63, 172, 43, 188, 190, 18, 49, 146, 62, 236, 89, 207, 190, 187, 95, 109, 62, 212, 143, 160, 61, 142, 115, 34, 190, 19, 96, 143, 63, 159, 189, 220, 190, 97, 206, 173, 62, 224, 197, 160, 190, 230, 53, 119, 188, 191, 113, 155, 60, 75, 51, 51, 63, 180, 103, 202, 63, 180, 224, 64, 63, 38, 20, 152, 190, 171, 16, 56, 191, 100, 6, 17, 63, 78, 186, 63, 63, 5, 222, 193, 62, 124, 237, 207, 190, 212, 129, 23, 191, 132, 109, 195, 62, 108, 187, 9, 63, 43, 198, 50, 60, 187, 36, 144, 60, 242, 126, 154, 189, 32, 241, 225, 189, 125, 147, 29, 190, 95, 236, 130, 62, 17, 2, 92, 62, 164, 203, 44, 189, 72, 42, 210, 61, 190, 99, 136, 62, 152, 244, 11, 62, 33, 51, 105, 190, 176, 168, 228, 60, 251, 42, 166, 188, 112, 78, 87, 61, 119, 143, 152, 189, 153, 146, 134, 190, 204, 112, 50, 190, 190, 96, 208, 60, 151, 54, 208, 190, 116, 174, 217, 185, 207, 92, 66, 62, 118, 79, 252, 61, 14, 165, 103, 62, 159, 172, 136, 61, 231, 160, 233, 62, 139, 44, 159, 61, 225, 219, 167, 59, 1, 114, 137, 61, 188, 172, 128, 61, 68, 219, 24, 190, 72, 98, 101, 62, 147, 137, 131, 190, 127, 158, 255, 190, 222, 230, 88, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 116, 130, 187, 181, 149, 35, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {17, 228, 248, 63, 60, 40, 162, 63, 139, 171, 31, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {19, 237, 142, 190, 192, 176, 79, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0016/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}