// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 173, 172, 188, 209, 160, 45, 63, 91, 174, 133, 62, 70, 195, 2, 63, 42, 253, 49, 63, 6, 50, 253, 61, 166, 212, 41, 63, 124, 144, 146, 62, 203, 233, 202, 62, 136, 115, 73, 62, 57, 179, 174, 62, 184, 240, 31, 191, 60, 178, 239, 190, 28, 53, 4, 190, 143, 153, 14, 191, 51, 175, 190, 190, 130, 213, 98, 191, 138, 117, 208, 62, 60, 6, 19, 63, 241, 222, 158, 190, 71, 24, 1, 191, 98, 156, 33, 63, 146, 166, 232, 62, 45, 209, 14, 63, 19, 116, 31, 63, 152, 161, 22, 62, 34, 125, 94, 189, 244, 41, 85, 63, 56, 182, 26, 61, 253, 109, 29, 190, 40, 67, 177, 62, 162, 39, 41, 62, 102, 208, 200, 62, 74, 179, 1, 190, 156, 84, 207, 61, 22, 30, 16, 191, 85, 226, 67, 61, 70, 255, 75, 191, 124, 38, 167, 190, 169, 14, 140, 62, 235, 138, 174, 190, 188, 136, 167, 62, 52, 129, 241, 190, 152, 172, 154, 190, 41, 132, 52, 191, 139, 186, 59, 62, 88, 225, 241, 62, 164, 180, 184, 190, 19, 232, 48, 190, 218, 237, 150, 62, 99, 85, 61, 61, 149, 208, 137, 190, 121, 3, 139, 60, 163, 71, 163, 60, 211, 143, 122, 189, 66, 134, 74, 191, 206, 46, 38, 63, 78, 135, 13, 63, 202, 173, 86, 62, 87, 69, 224, 190, 200, 231, 32, 191, 173, 227, 178, 190, 119, 93, 2, 63, 205, 25, 191, 62, 59, 120, 21, 191, 144, 3, 254, 189, 136, 37, 23, 191, 166, 30, 14, 63, 156, 121, 80, 190, 79, 80, 8, 62, 27, 4, 90, 191, 201, 96, 216, 60, 113, 197, 36, 191, 168, 162, 243, 60, 121, 78, 45, 191, 145, 132, 15, 63, 12, 70, 189, 189, 29, 164, 53, 191, 238, 177, 234, 62, 159, 142, 6, 63, 152, 238, 118, 61, 105, 182, 197, 188, 217, 250, 230, 189, 159, 194, 156, 62, 87, 84, 4, 191, 100, 200, 208, 188, 220, 77, 187, 190, 32, 22, 183, 62, 198, 245, 94, 191, 201, 232, 46, 190, 100, 55, 34, 63, 254, 239, 132, 191, 104, 186, 220, 190, 74, 205, 211, 190, 9, 143, 205, 62, 164, 161, 60, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 240, 44, 191, 100, 25, 135, 190, 183, 116, 159, 61, 234, 128, 232, 190, 32, 217, 94, 190, 33, 91, 63, 190, 144, 58, 230, 188, 31, 119, 206, 190, 138, 88, 15, 61, 114, 121, 45, 62, 50, 15, 126, 190, 135, 14, 10, 191, 114, 115, 26, 62, 191, 85, 50, 191, 121, 255, 227, 189, 25, 140, 83, 60, 212, 39, 179, 62, 238, 42, 237, 190, 31, 37, 165, 62, 74, 208, 45, 63, 69, 213, 202, 190, 188, 178, 224, 187, 183, 252, 43, 63, 252, 227, 37, 63, 58, 82, 221, 190, 82, 170, 150, 190, 144, 16, 246, 60, 68, 249, 12, 191, 104, 114, 193, 189, 188, 71, 134, 186, 83, 124, 53, 189, 37, 192, 130, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 118, 19, 189, 203, 121, 24, 190, 52, 63, 22, 190, 25, 80, 161, 60, 250, 15, 240, 60, 161, 114, 170, 60, 208, 66, 4, 61, 157, 3, 204, 186, 68, 199, 58, 59, 172, 144, 46, 62, 54, 84, 53, 189, 94, 125, 41, 190, 30, 217, 186, 189, 210, 211, 131, 188, 193, 54, 215, 59, 45, 137, 156, 61, 78, 145, 34, 62, 112, 250, 0, 189, 216, 143, 21, 61, 64, 216, 154, 189, 198, 96, 141, 189, 173, 168, 12, 62, 253, 180, 105, 189, 149, 107, 1, 190, 251, 202, 22, 189, 250, 184, 210, 188, 97, 15, 143, 61, 24, 116, 250, 189, 120, 51, 27, 190, 178, 78, 196, 60, 234, 119, 92, 61, 248, 149, 207, 189, 199, 196, 101, 61, 115, 201, 106, 190, 139, 217, 140, 189, 29, 163, 242, 60, 69, 62, 211, 190, 161, 160, 203, 60, 114, 127, 58, 188, 9, 202, 228, 61, 211, 180, 168, 190, 101, 177, 182, 190, 184, 219, 217, 188, 251, 50, 92, 61, 201, 147, 17, 62, 198, 99, 19, 190, 76, 80, 135, 190, 216, 190, 120, 190, 177, 253, 98, 60, 38, 99, 157, 61, 157, 154, 135, 62, 239, 237, 191, 189, 105, 232, 120, 62, 118, 95, 197, 61, 28, 202, 100, 61, 33, 127, 120, 62, 212, 16, 182, 190, 201, 32, 100, 62, 243, 189, 222, 189, 109, 132, 183, 60, 141, 252, 50, 191, 151, 85, 110, 62, 62, 80, 135, 61, 49, 98, 77, 190, 19, 182, 31, 62, 25, 7, 243, 60, 34, 14, 147, 61, 154, 157, 192, 188, 137, 185, 56, 190, 220, 117, 112, 59, 179, 149, 211, 61, 49, 206, 4, 62, 26, 161, 127, 189, 12, 252, 232, 189, 49, 87, 44, 62, 135, 18, 15, 190, 89, 117, 73, 61, 227, 91, 209, 61, 28, 202, 50, 190, 254, 180, 146, 60, 219, 57, 84, 60, 38, 216, 93, 57, 23, 85, 240, 189, 57, 13, 194, 189, 60, 133, 108, 190, 208, 210, 63, 188, 216, 114, 7, 191, 44, 243, 41, 190, 59, 224, 141, 189, 118, 55, 63, 190, 209, 59, 231, 61, 91, 102, 4, 62, 49, 156, 15, 190, 213, 161, 140, 190, 99, 217, 202, 189, 41, 129, 192, 189, 251, 108, 78, 61, 164, 86, 120, 62, 196, 241, 35, 62, 27, 91, 153, 189, 170, 31, 230, 189, 124, 198, 217, 189, 154, 197, 135, 61, 228, 156, 77, 62, 9, 108, 208, 61, 88, 254, 75, 62, 186, 247, 140, 187, 240, 65, 12, 62, 60, 251, 15, 190, 45, 208, 82, 60, 155, 237, 47, 62, 13, 161, 43, 62, 152, 160, 212, 189, 44, 170, 12, 61, 154, 35, 228, 61, 81, 245, 1, 62, 27, 206, 52, 61, 50, 220, 91, 189, 76, 255, 157, 190, 17, 79, 211, 190, 25, 35, 16, 190, 52, 99, 238, 189, 127, 196, 76, 62, 151, 94, 230, 189, 222, 113, 221, 188, 251, 4, 141, 190, 168, 79, 122, 190, 1, 202, 28, 190, 174, 37, 21, 190, 107, 80, 53, 190, 207, 246, 31, 189, 76, 221, 215, 61, 153, 72, 176, 61, 8, 167, 148, 59, 162, 81, 42, 188, 84, 160, 48, 189, 195, 161, 184, 190, 171, 145, 115, 190, 165, 210, 13, 190, 161, 201, 84, 60, 211, 224, 82, 61, 135, 60, 193, 61, 237, 111, 7, 62, 234, 12, 38, 190, 218, 147, 239, 189, 160, 99, 230, 189, 59, 60, 160, 189, 167, 33, 226, 189, 52, 248, 114, 190, 32, 254, 176, 189, 224, 210, 177, 61, 59, 251, 148, 189, 98, 42, 45, 62, 113, 16, 8, 190, 104, 99, 207, 189, 26, 202, 204, 189, 165, 229, 19, 190, 217, 135, 207, 189, 186, 155, 139, 61, 16, 224, 197, 61, 53, 158, 40, 62, 96, 135, 1, 62, 123, 14, 216, 61, 31, 195, 184, 60, 227, 229, 56, 62, 184, 46, 9, 61, 71, 95, 244, 188, 219, 115, 14, 62, 13, 210, 205, 189, 120, 208, 32, 60, 131, 90, 35, 62, 123, 218, 50, 190, 105, 70, 222, 61, 69, 217, 206, 189, 178, 102, 65, 62, 249, 81, 37, 62, 123, 156, 81, 62, 61, 15, 31, 62, 135, 5, 44, 190, 85, 173, 240, 61, 218, 83, 59, 190, 248, 123, 235, 188, 177, 219, 226, 187, 79, 255, 164, 61, 36, 241, 112, 189, 175, 105, 176, 189, 78, 104, 218, 61, 67, 50, 218, 188, 39, 160, 243, 61, 247, 248, 71, 190, 248, 22, 119, 190, 19, 82, 77, 62, 185, 228, 225, 60, 63, 2, 196, 190, 242, 64, 20, 190, 19, 132, 22, 61, 60, 80, 28, 190, 66, 139, 76, 189, 119, 36, 46, 62, 58, 142, 125, 190, 102, 226, 45, 61, 154, 143, 174, 61, 1, 21, 234, 189, 82, 35, 173, 186, 149, 9, 108, 189, 202, 166, 135, 189, 46, 137, 164, 189, 163, 144, 254, 189, 107, 80, 134, 189, 11, 207, 178, 189, 215, 194, 44, 62, 234, 107, 132, 61, 234, 23, 237, 62, 186, 170, 26, 62, 68, 181, 20, 62, 108, 13, 63, 62, 209, 137, 35, 190, 92, 140, 107, 62, 71, 114, 218, 190, 0, 17, 29, 61, 227, 241, 234, 188, 242, 67, 173, 61, 50, 154, 135, 62, 80, 104, 83, 190, 21, 23, 154, 190, 62, 18, 227, 189, 224, 20, 247, 189, 70, 91, 192, 61, 26, 25, 150, 189, 233, 184, 77, 61, 92, 44, 174, 189, 180, 220, 26, 190, 163, 5, 68, 190, 172, 169, 18, 190, 161, 136, 24, 189, 250, 24, 220, 60, 149, 234, 221, 61, 245, 133, 38, 190, 172, 179, 177, 61, 218, 216, 152, 190, 170, 203, 94, 190, 247, 225, 219, 188, 248, 188, 192, 61, 186, 49, 35, 188, 70, 73, 199, 61, 134, 163, 92, 189, 116, 192, 171, 61, 182, 78, 224, 61, 235, 124, 15, 62, 94, 105, 97, 190, 88, 230, 23, 190, 76, 112, 53, 190, 155, 247, 220, 61, 182, 243, 56, 190, 21, 198, 73, 190, 7, 93, 155, 60, 37, 221, 7, 190, 165, 210, 5, 190, 225, 0, 3, 62, 40, 51, 14, 190, 244, 148, 32, 190, 243, 219, 86, 190, 39, 74, 1, 62, 22, 1, 0, 190, 171, 41, 93, 62, 210, 70, 107, 188, 23, 229, 136, 190, 82, 160, 16, 190, 222, 92, 215, 61, 215, 66, 93, 60, 56, 239, 3, 190, 71, 78, 233, 59, 199, 2, 94, 189, 226, 250, 247, 189, 45, 106, 21, 62, 92, 229, 57, 62, 222, 123, 128, 189, 172, 255, 79, 62, 107, 82, 51, 62, 127, 209, 154, 58, 41, 208, 118, 60, 192, 41, 49, 189, 123, 117, 227, 189, 96, 235, 181, 188, 120, 22, 79, 190, 13, 51, 59, 62, 57, 74, 79, 62, 126, 226, 243, 188, 246, 209, 254, 61, 22, 47, 65, 61, 232, 188, 236, 61, 185, 74, 233, 61, 255, 120, 231, 60, 27, 47, 30, 188, 73, 205, 44, 62, 209, 9, 5, 62, 33, 48, 89, 61, 208, 179, 237, 189, 20, 92, 13, 61, 189, 92, 177, 185, 237, 216, 5, 189, 11, 157, 67, 189, 67, 143, 213, 61, 240, 201, 129, 188, 29, 224, 214, 189, 230, 144, 7, 190, 196, 98, 62, 189, 1, 7, 132, 190, 79, 9, 183, 189, 14, 121, 241, 189, 6, 92, 131, 190, 57, 218, 21, 190, 1, 16, 119, 189, 249, 5, 2, 190, 212, 37, 232, 188, 181, 224, 225, 189, 203, 75, 44, 190, 240, 151, 32, 190, 187, 56, 135, 60, 196, 75, 30, 189, 211, 75, 207, 189, 74, 20, 232, 61, 122, 64, 195, 189, 187, 101, 8, 190, 58, 3, 14, 62, 28, 110, 162, 61, 148, 79, 86, 61, 119, 9, 160, 188, 118, 255, 134, 189, 30, 49, 39, 62, 209, 249, 1, 60, 102, 144, 16, 62, 49, 210, 162, 189, 169, 194, 22, 190, 142, 200, 35, 62, 233, 133, 251, 189, 159, 53, 153, 189, 186, 8, 13, 189, 90, 162, 13, 61, 49, 110, 94, 189, 241, 240, 6, 190, 47, 77, 22, 190, 38, 65, 141, 187, 209, 128, 237, 188, 157, 79, 124, 189, 131, 199, 67, 189, 10, 230, 23, 190, 99, 33, 250, 61, 208, 39, 204, 189, 29, 253, 16, 190, 77, 99, 35, 190, 16, 226, 111, 188, 97, 181, 10, 189, 184, 122, 190, 62, 17, 93, 40, 62, 145, 69, 250, 189, 116, 249, 118, 62, 202, 117, 240, 188, 109, 109, 129, 190, 120, 3, 203, 189, 234, 53, 1, 62, 137, 191, 177, 189, 194, 190, 25, 62, 64, 178, 177, 187, 131, 52, 146, 190, 159, 252, 42, 62, 2, 251, 191, 61, 38, 137, 174, 62, 42, 6, 137, 62, 216, 197, 167, 189, 111, 53, 115, 190, 20, 78, 64, 61, 234, 192, 150, 190, 60, 219, 153, 190, 122, 99, 119, 60, 254, 218, 212, 190, 137, 171, 198, 189, 175, 75, 159, 190, 193, 8, 48, 62, 66, 51, 6, 62, 17, 134, 17, 62, 127, 211, 44, 188, 206, 213, 199, 190, 94, 233, 223, 61, 190, 91, 150, 61, 200, 62, 141, 62, 57, 59, 11, 62, 234, 100, 208, 189, 23, 9, 2, 62, 183, 73, 220, 61, 218, 7, 121, 61, 8, 122, 186, 59, 56, 123, 136, 62, 119, 41, 81, 61, 86, 241, 150, 188, 113, 248, 74, 190, 196, 214, 7, 190, 5, 159, 19, 62, 11, 39, 41, 62, 135, 104, 135, 62, 202, 231, 152, 61, 245, 43, 155, 189, 112, 177, 142, 190, 185, 161, 3, 61, 53, 83, 165, 190, 194, 17, 92, 190, 94, 58, 11, 62, 206, 199, 226, 61, 65, 217, 14, 62, 79, 110, 65, 190, 190, 24, 139, 62, 22, 214, 132, 61, 91, 62, 84, 62, 53, 8, 86, 190, 69, 244, 131, 190, 216, 193, 221, 188, 46, 91, 119, 61, 170, 212, 6, 191, 4, 143, 179, 189, 8, 150, 39, 185, 229, 140, 158, 190, 231, 64, 239, 60, 119, 33, 119, 62, 65, 67, 42, 189, 8, 119, 58, 62, 78, 100, 161, 62, 237, 12, 225, 189, 127, 137, 185, 61, 227, 151, 139, 189, 36, 28, 82, 190, 69, 118, 40, 190, 192, 225, 158, 59, 100, 119, 221, 60, 156, 93, 236, 61, 161, 21, 85, 62, 250, 180, 185, 61, 158, 93, 149, 61, 147, 85, 54, 59, 131, 213, 36, 62, 62, 145, 77, 189, 144, 95, 168, 190, 110, 108, 38, 61, 59, 118, 135, 190, 128, 133, 207, 189, 140, 85, 204, 187, 63, 123, 137, 189, 20, 245, 133, 62, 137, 186, 230, 189, 172, 249, 35, 62, 132, 228, 186, 62, 159, 168, 27, 62, 48, 74, 69, 190, 168, 168, 75, 59, 6, 253, 93, 189, 243, 200, 29, 189, 64, 219, 233, 61, 21, 81, 245, 61, 69, 174, 183, 61, 2, 83, 148, 61, 10, 212, 217, 60, 210, 136, 228, 189, 101, 197, 186, 190, 54, 68, 90, 62, 164, 114, 26, 62, 32, 179, 99, 62, 138, 141, 50, 188, 122, 89, 88, 190, 98, 47, 40, 62, 90, 203, 32, 191, 170, 136, 19, 190, 148, 126, 155, 61, 106, 113, 146, 189, 159, 9, 251, 60, 211, 28, 203, 189, 203, 7, 132, 62, 251, 247, 52, 190, 132, 228, 151, 62, 152, 169, 248, 188, 11, 16, 100, 189, 7, 133, 211, 61, 62, 49, 26, 62, 41, 236, 2, 62, 85, 222, 238, 61, 145, 140, 79, 190, 20, 9, 139, 62, 148, 43, 164, 60, 142, 242, 250, 60, 165, 118, 6, 190, 217, 120, 218, 189, 31, 243, 164, 61, 27, 176, 145, 61, 171, 23, 110, 189, 194, 112, 9, 189, 182, 234, 66, 187, 32, 214, 172, 60, 124, 199, 9, 62, 206, 87, 38, 62, 46, 135, 0, 62, 75, 20, 237, 188, 42, 155, 242, 61, 142, 18, 47, 190, 126, 135, 79, 189, 207, 113, 138, 189, 119, 106, 33, 189, 115, 124, 17, 62, 58, 60, 124, 190, 42, 120, 77, 62, 141, 38, 51, 60, 120, 224, 84, 62, 63, 133, 80, 189, 54, 184, 34, 189, 53, 75, 10, 62, 51, 124, 173, 60, 16, 66, 135, 188, 178, 159, 194, 61, 1, 59, 215, 61, 209, 45, 219, 189, 94, 55, 33, 189, 22, 74, 88, 62, 137, 184, 201, 189, 246, 156, 239, 61, 191, 73, 198, 61, 225, 136, 148, 61, 180, 168, 17, 190, 13, 98, 166, 189, 122, 52, 128, 189, 14, 120, 6, 61, 177, 239, 143, 189, 73, 196, 112, 62, 123, 115, 240, 61, 223, 181, 19, 188, 10, 205, 9, 62, 118, 39, 40, 62, 162, 197, 196, 188, 101, 225, 19, 190, 205, 170, 52, 190, 247, 212, 7, 61, 50, 25, 28, 62, 202, 231, 216, 61, 229, 10, 174, 188, 112, 88, 148, 190, 245, 139, 221, 60, 33, 195, 176, 189, 187, 103, 74, 190, 126, 109, 198, 190, 233, 2, 7, 191, 189, 12, 88, 189, 28, 218, 183, 61, 211, 92, 95, 190, 33, 176, 163, 190, 155, 139, 130, 62, 69, 129, 95, 190, 22, 22, 15, 62, 152, 187, 87, 189, 105, 201, 12, 190, 237, 195, 101, 189, 46, 28, 39, 187, 249, 131, 170, 187, 230, 85, 3, 191, 169, 32, 67, 191, 202, 253, 103, 62, 174, 0, 96, 60, 92, 6, 124, 62, 94, 131, 184, 189, 76, 224, 230, 62, 71, 209, 154, 62, 91, 223, 48, 62, 142, 147, 129, 62, 142, 126, 33, 191, 223, 173, 69, 62, 51, 91, 184, 190, 3, 195, 99, 190, 187, 9, 90, 190, 133, 122, 133, 61, 43, 57, 156, 62, 208, 218, 224, 190, 155, 63, 75, 190, 150, 197, 26, 191, 210, 57, 244, 61, 10, 126, 193, 61, 38, 146, 199, 190, 170, 102, 155, 190, 136, 169, 249, 189, 11, 186, 132, 190, 244, 24, 129, 62, 75, 15, 85, 189, 16, 142, 92, 60, 26, 239, 11, 62, 204, 0, 142, 190, 94, 250, 169, 61, 75, 221, 14, 191, 179, 3, 120, 191, 181, 13, 55, 61, 29, 29, 123, 189, 13, 82, 61, 62, 60, 128, 206, 189, 201, 224, 181, 62, 153, 227, 138, 62, 36, 27, 161, 62, 247, 83, 213, 61, 142, 114, 8, 191, 78, 64, 156, 189, 26, 22, 211, 190, 64, 80, 114, 190, 158, 72, 199, 61, 53, 82, 180, 61, 224, 93, 146, 61, 191, 139, 92, 190, 126, 117, 169, 60, 182, 110, 0, 191, 238, 86, 77, 190, 171, 112, 35, 62, 89, 185, 8, 190, 197, 14, 13, 189, 12, 1, 140, 189, 122, 148, 78, 189, 122, 222, 136, 61, 240, 83, 69, 62, 17, 225, 126, 190, 45, 150, 1, 62, 220, 190, 190, 61, 44, 254, 132, 189, 92, 88, 129, 61, 247, 160, 238, 189, 115, 145, 247, 189, 130, 110, 131, 188, 162, 90, 116, 62, 21, 53, 12, 60, 44, 78, 103, 62, 4, 234, 212, 61, 61, 77, 26, 190, 253, 126, 56, 62, 186, 52, 67, 188, 76, 38, 7, 62, 24, 239, 63, 188, 163, 119, 115, 189, 108, 203, 55, 61, 7, 49, 151, 61, 30, 151, 125, 189, 18, 119, 113, 190, 170, 140, 147, 190, 180, 167, 145, 188, 82, 87, 123, 190, 132, 202, 66, 62, 39, 210, 36, 190, 129, 174, 100, 62, 118, 74, 100, 188, 144, 252, 66, 190, 70, 193, 30, 62, 178, 171, 84, 61, 159, 135, 14, 189, 113, 66, 238, 61, 144, 138, 196, 61, 191, 160, 96, 61, 104, 112, 172, 60, 50, 254, 140, 61, 106, 83, 12, 189, 133, 223, 39, 61, 40, 163, 123, 62, 63, 2, 133, 61, 29, 5, 143, 62, 1, 197, 29, 190, 49, 98, 189, 61, 39, 154, 252, 61, 107, 150, 26, 62, 190, 110, 34, 62, 218, 247, 184, 189, 148, 103, 48, 189, 185, 230, 106, 190, 181, 200, 6, 62, 218, 252, 191, 189, 36, 210, 87, 190, 81, 113, 72, 189, 210, 204, 61, 62, 69, 115, 157, 62, 32, 205, 151, 190, 107, 250, 39, 62, 14, 115, 19, 62, 5, 173, 51, 190, 58, 244, 159, 62, 66, 227, 193, 62, 35, 232, 186, 189, 134, 5, 135, 62, 53, 74, 104, 190, 236, 77, 10, 62, 222, 68, 146, 61, 113, 203, 103, 62, 198, 241, 59, 62, 236, 183, 1, 61, 48, 185, 136, 61, 27, 172, 147, 190, 43, 159, 148, 61, 53, 174, 169, 190, 60, 211, 144, 190, 245, 213, 78, 189, 118, 181, 7, 190, 86, 181, 65, 61, 93, 219, 38, 190, 17, 175, 152, 62, 60, 104, 49, 62, 144, 131, 69, 62, 107, 83, 140, 190, 20, 151, 63, 190, 215, 0, 65, 62, 17, 211, 174, 190, 87, 84, 213, 190, 148, 207, 18, 190, 4, 245, 207, 61, 117, 68, 169, 189, 181, 153, 198, 189, 205, 43, 103, 62, 194, 245, 128, 190, 22, 21, 102, 188, 158, 221, 28, 62, 97, 176, 226, 189, 254, 70, 60, 61, 1, 95, 253, 61, 2, 26, 87, 190, 17, 64, 1, 190, 172, 148, 133, 190, 220, 168, 188, 189, 65, 93, 216, 189, 188, 76, 147, 62, 205, 155, 64, 61, 204, 210, 30, 63, 21, 72, 4, 62, 30, 203, 202, 61, 211, 79, 6, 189, 109, 120, 32, 190, 117, 254, 159, 61, 212, 49, 153, 190, 147, 19, 45, 190, 130, 127, 152, 189, 47, 107, 17, 61, 207, 227, 124, 62, 76, 14, 9, 61, 53, 59, 206, 189, 17, 42, 34, 61, 96, 26, 131, 189, 73, 241, 0, 190, 197, 192, 176, 190, 88, 191, 142, 190, 178, 140, 60, 62, 185, 130, 4, 62, 141, 60, 125, 62, 40, 115, 126, 189, 120, 96, 68, 189, 191, 204, 12, 190, 38, 88, 10, 61, 202, 3, 155, 61, 81, 252, 182, 190, 172, 159, 98, 191, 49, 211, 136, 62, 52, 89, 89, 189, 56, 58, 119, 61, 125, 134, 159, 190, 221, 135, 140, 61, 15, 0, 83, 188, 37, 24, 199, 61, 36, 50, 7, 62, 253, 197, 7, 191, 89, 206, 68, 62, 22, 99, 231, 189, 206, 38, 186, 188, 216, 234, 151, 62, 44, 178, 131, 189, 170, 196, 144, 189, 153, 87, 39, 190, 62, 146, 196, 61, 25, 200, 42, 62, 191, 96, 148, 61, 215, 86, 39, 62, 119, 249, 168, 60, 78, 209, 99, 190, 108, 137, 70, 187, 3, 67, 104, 61, 255, 64, 21, 62, 238, 16, 47, 190, 225, 192, 7, 61, 144, 55, 0, 62, 233, 235, 179, 189, 206, 95, 255, 60, 40, 181, 104, 62, 80, 197, 174, 62, 205, 162, 80, 188, 74, 158, 3, 62, 137, 49, 118, 190, 98, 180, 62, 61, 26, 132, 131, 190, 60, 17, 18, 190, 68, 61, 127, 189, 7, 62, 144, 190, 206, 211, 132, 62, 243, 19, 249, 189, 215, 138, 194, 60, 188, 68, 10, 62, 147, 224, 112, 189, 159, 33, 160, 188, 209, 169, 22, 62, 160, 25, 49, 62, 56, 96, 18, 62, 122, 12, 45, 62, 250, 73, 182, 61, 206, 107, 142, 190, 97, 116, 38, 62, 29, 172, 243, 61, 206, 30, 53, 190, 34, 69, 213, 61, 131, 109, 167, 61, 129, 95, 37, 61, 119, 140, 236, 61, 87, 220, 96, 190, 210, 105, 227, 60, 169, 24, 26, 190, 198, 8, 43, 62, 35, 162, 61, 62, 104, 150, 247, 188, 75, 152, 3, 62, 99, 85, 115, 189, 94, 35, 214, 61, 141, 140, 223, 190, 64, 193, 90, 190, 49, 40, 7, 62, 216, 171, 30, 61, 245, 75, 170, 60, 217, 25, 167, 59, 72, 82, 95, 62, 105, 173, 61, 190, 181, 71, 114, 61, 97, 107, 126, 190, 184, 17, 225, 189, 152, 20, 214, 61, 200, 3, 147, 61, 89, 2, 130, 60, 74, 82, 168, 62, 106, 183, 172, 190, 212, 45, 174, 61, 217, 187, 49, 62, 150, 113, 7, 190, 136, 53, 166, 62, 169, 200, 111, 188, 218, 17, 22, 62, 248, 109, 80, 62, 10, 168, 126, 190, 110, 46, 117, 189, 73, 53, 198, 190, 251, 119, 178, 187, 10, 63, 158, 61, 239, 75, 75, 189, 138, 105, 24, 190, 202, 56, 221, 190, 175, 68, 91, 62, 151, 98, 86, 191, 236, 164, 148, 190, 56, 81, 106, 62, 21, 53, 39, 61, 85, 102, 37, 189, 135, 8, 33, 190, 55, 103, 95, 62, 157, 187, 87, 190, 135, 226, 202, 62, 61, 194, 166, 190, 124, 76, 99, 190, 16, 93, 116, 62, 134, 10, 148, 189, 12, 155, 29, 191, 81, 99, 14, 62, 31, 179, 159, 61, 157, 38, 54, 190, 73, 210, 3, 190, 36, 215, 132, 62, 219, 9, 178, 190, 152, 229, 227, 61, 84, 99, 20, 62, 12, 26, 251, 188, 218, 245, 104, 62, 211, 58, 93, 61, 27, 141, 205, 189, 7, 41, 72, 61, 199, 20, 172, 190, 54, 18, 236, 60, 73, 1, 178, 61, 254, 125, 86, 62, 60, 201, 124, 61, 24, 80, 169, 62, 214, 198, 21, 62, 163, 216, 94, 61, 200, 158, 249, 61, 211, 159, 75, 190, 112, 243, 39, 62, 218, 130, 241, 190, 130, 1, 68, 190, 109, 172, 108, 190, 58, 144, 147, 188, 218, 163, 62, 61, 184, 141, 55, 190, 30, 140, 20, 62, 53, 220, 160, 61, 241, 21, 173, 187, 84, 34, 1, 62, 188, 168, 129, 189, 6, 37, 9, 62, 23, 245, 176, 61, 104, 107, 84, 60, 120, 74, 176, 60, 107, 47, 40, 190, 208, 156, 135, 61, 99, 92, 253, 189, 46, 70, 16, 60, 242, 66, 76, 62, 233, 102, 48, 190, 28, 220, 149, 189, 62, 235, 19, 189, 65, 72, 167, 61, 123, 243, 213, 60, 172, 191, 75, 189, 135, 56, 27, 190, 71, 172, 13, 190, 243, 208, 178, 190, 254, 6, 17, 190, 110, 195, 46, 190, 161, 185, 229, 188, 21, 148, 151, 61, 11, 86, 81, 188, 10, 73, 213, 61, 65, 211, 31, 190, 30, 20, 9, 190, 159, 215, 183, 189, 237, 181, 42, 189, 201, 78, 38, 189, 117, 201, 55, 62, 108, 107, 14, 61, 253, 142, 215, 61, 34, 211, 100, 60, 48, 173, 26, 62, 128, 77, 212, 189, 50, 137, 138, 62, 54, 100, 163, 189, 68, 35, 172, 61, 176, 32, 162, 61, 14, 245, 124, 188, 119, 71, 178, 61, 97, 254, 47, 190, 32, 141, 146, 189, 12, 160, 61, 61, 210, 241, 219, 61, 185, 11, 155, 61, 136, 119, 64, 62, 185, 255, 39, 189, 164, 99, 64, 60, 28, 53, 68, 62, 208, 68, 71, 62, 41, 2, 88, 190, 17, 114, 226, 61, 167, 74, 171, 189, 233, 135, 38, 190, 65, 176, 95, 188, 238, 173, 18, 61, 41, 104, 188, 61, 114, 38, 70, 61, 198, 3, 150, 61, 41, 6, 4, 190, 209, 255, 170, 61, 34, 178, 210, 189, 191, 151, 223, 60, 213, 2, 219, 60, 151, 13, 17, 189, 69, 41, 71, 189, 212, 138, 176, 62, 232, 7, 125, 62, 175, 233, 116, 189, 69, 156, 84, 61, 118, 146, 46, 190, 133, 227, 254, 189, 203, 253, 135, 189, 9, 31, 22, 62, 33, 141, 4, 62, 252, 233, 1, 62, 159, 57, 0, 189, 53, 29, 14, 62, 69, 83, 34, 62, 14, 87, 157, 189, 195, 175, 167, 189, 131, 13, 71, 62, 160, 132, 215, 187, 175, 123, 149, 58, 34, 151, 83, 62, 56, 189, 3, 190, 124, 215, 143, 58, 67, 78, 47, 189, 1, 241, 62, 61, 168, 187, 123, 189, 176, 99, 83, 62, 49, 44, 107, 189, 227, 133, 63, 62, 56, 25, 157, 190, 188, 10, 237, 189, 48, 221, 88, 62, 118, 129, 71, 190, 14, 40, 132, 61, 66, 92, 109, 60, 182, 185, 85, 61, 220, 5, 156, 189, 77, 247, 87, 61, 157, 55, 50, 62, 53, 200, 252, 189, 188, 106, 132, 62, 203, 196, 226, 62, 114, 83, 60, 62, 98, 202, 19, 61, 92, 79, 220, 60, 247, 195, 71, 62, 16, 178, 66, 188, 154, 127, 91, 190, 144, 249, 17, 61, 74, 49, 199, 61, 149, 213, 185, 61, 118, 27, 93, 190, 50, 226, 144, 61, 177, 221, 49, 190, 224, 26, 142, 189, 35, 88, 29, 190, 163, 195, 13, 190, 141, 232, 179, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 200, 25, 190, 154, 111, 184, 188, 171, 51, 169, 189, 38, 223, 75, 189, 53, 82, 16, 190, 56, 182, 166, 189, 241, 228, 30, 59, 60, 69, 133, 61, 192, 190, 223, 61, 16, 137, 26, 190, 28, 87, 235, 189, 61, 79, 2, 62, 166, 7, 26, 61, 159, 218, 47, 62, 28, 228, 11, 189, 246, 55, 33, 189, 246, 185, 80, 62, 6, 162, 185, 62, 211, 5, 121, 62, 164, 171, 250, 188, 170, 196, 133, 190, 30, 152, 126, 62, 225, 214, 130, 189, 43, 116, 91, 62, 164, 250, 133, 61, 31, 180, 57, 189, 93, 157, 80, 62, 183, 132, 86, 62, 145, 224, 82, 188, 142, 167, 68, 61, 138, 180, 152, 62, 177, 38, 9, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 122, 187, 61, 63, 207, 152, 190, 202, 201, 19, 62, 199, 244, 113, 190, 251, 91, 69, 62, 121, 16, 210, 189, 21, 59, 170, 62, 145, 201, 66, 190, 93, 236, 193, 61, 254, 175, 35, 61, 142, 115, 34, 190, 1, 24, 31, 63, 128, 22, 195, 190, 244, 208, 142, 62, 204, 168, 182, 190, 164, 226, 2, 190, 14, 223, 174, 188, 127, 43, 67, 63, 218, 200, 50, 63, 86, 223, 239, 61, 87, 126, 65, 190, 4, 146, 28, 191, 45, 183, 122, 62, 78, 114, 197, 62, 12, 208, 132, 62, 245, 49, 177, 190, 238, 139, 1, 191, 229, 167, 154, 62, 249, 89, 230, 60, 244, 167, 158, 61, 169, 13, 123, 187, 158, 46, 65, 190, 32, 241, 225, 189, 35, 22, 30, 190, 187, 192, 58, 62, 149, 233, 5, 62, 19, 85, 210, 189, 198, 147, 216, 60, 154, 24, 44, 62, 196, 151, 178, 61, 47, 93, 243, 189, 250, 234, 243, 61, 251, 42, 166, 188, 11, 4, 185, 61, 83, 72, 132, 189, 146, 41, 218, 189, 230, 51, 58, 189, 207, 199, 171, 58, 182, 118, 143, 190, 214, 87, 223, 58, 233, 165, 50, 189, 22, 142, 99, 60, 130, 108, 38, 62, 43, 181, 166, 61, 77, 46, 32, 62, 186, 57, 65, 61, 135, 161, 132, 61, 35, 231, 255, 188, 226, 197, 150, 61, 145, 101, 142, 189, 187, 117, 44, 62, 237, 208, 237, 189, 234, 51, 97, 190, 221, 103, 69, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 18, 199, 59, 107, 244, 187, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {141, 102, 19, 192, 93, 40, 173, 191, 34, 150, 7, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {238, 21, 46, 63, 27, 29, 47, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0016/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}