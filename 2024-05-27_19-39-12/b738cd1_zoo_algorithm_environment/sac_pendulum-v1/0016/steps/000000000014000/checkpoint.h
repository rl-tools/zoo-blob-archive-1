// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 55, 206, 189, 228, 181, 135, 63, 76, 12, 190, 62, 189, 107, 30, 63, 176, 91, 11, 63, 93, 240, 65, 62, 151, 187, 50, 63, 189, 251, 226, 61, 70, 13, 171, 62, 201, 225, 250, 62, 110, 228, 153, 62, 125, 13, 13, 191, 253, 22, 235, 190, 157, 62, 184, 191, 101, 51, 151, 190, 164, 138, 73, 191, 44, 216, 107, 191, 20, 250, 171, 62, 200, 69, 14, 63, 227, 81, 220, 190, 4, 247, 3, 191, 22, 39, 41, 63, 248, 215, 13, 63, 120, 102, 15, 63, 70, 56, 10, 63, 100, 30, 4, 63, 55, 214, 189, 60, 134, 249, 243, 62, 193, 38, 177, 190, 48, 166, 139, 189, 39, 163, 208, 62, 241, 250, 65, 61, 10, 118, 212, 62, 71, 59, 116, 61, 238, 70, 155, 61, 37, 242, 254, 190, 167, 72, 66, 190, 92, 223, 174, 191, 95, 177, 184, 190, 118, 103, 229, 62, 151, 138, 144, 62, 109, 185, 250, 62, 248, 196, 219, 190, 22, 94, 105, 191, 22, 247, 46, 191, 175, 57, 38, 62, 150, 189, 220, 62, 127, 249, 170, 190, 154, 139, 165, 190, 209, 90, 235, 62, 44, 107, 146, 61, 149, 208, 137, 190, 121, 3, 139, 60, 163, 71, 163, 60, 237, 126, 112, 190, 189, 131, 74, 191, 31, 36, 25, 63, 157, 199, 219, 62, 244, 5, 192, 62, 181, 223, 228, 190, 63, 237, 68, 191, 59, 153, 19, 61, 27, 238, 12, 63, 233, 64, 184, 62, 115, 251, 92, 191, 129, 153, 55, 190, 204, 65, 54, 191, 230, 4, 112, 63, 153, 164, 19, 60, 214, 162, 193, 189, 69, 147, 140, 191, 216, 211, 103, 189, 207, 137, 82, 191, 210, 25, 49, 191, 186, 60, 173, 190, 66, 165, 37, 63, 18, 212, 62, 190, 180, 9, 38, 191, 219, 99, 255, 62, 35, 36, 2, 63, 201, 67, 96, 61, 190, 197, 30, 63, 112, 246, 160, 61, 107, 236, 121, 62, 64, 136, 28, 191, 238, 39, 55, 189, 148, 108, 198, 190, 207, 115, 152, 62, 33, 188, 157, 191, 179, 10, 125, 190, 226, 61, 35, 63, 38, 102, 187, 191, 178, 145, 179, 190, 88, 166, 215, 190, 252, 62, 154, 62, 237, 155, 78, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 215, 171, 190, 2, 162, 162, 190, 190, 168, 9, 61, 163, 74, 114, 191, 186, 198, 21, 190, 25, 3, 148, 190, 44, 201, 255, 189, 115, 251, 220, 190, 205, 150, 41, 190, 62, 59, 55, 62, 118, 112, 111, 190, 220, 19, 129, 191, 143, 137, 46, 62, 118, 186, 48, 191, 247, 232, 139, 60, 23, 62, 162, 187, 166, 215, 185, 62, 238, 42, 237, 190, 111, 77, 102, 62, 192, 32, 36, 63, 86, 26, 152, 190, 178, 61, 95, 59, 139, 77, 28, 63, 177, 114, 2, 63, 170, 209, 4, 191, 13, 164, 206, 190, 74, 148, 185, 187, 221, 52, 111, 191, 155, 26, 8, 190, 85, 220, 163, 61, 228, 63, 30, 189, 247, 194, 43, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 118, 19, 189, 203, 121, 24, 190, 52, 63, 22, 190, 25, 80, 161, 60, 250, 15, 240, 60, 161, 114, 170, 60, 208, 66, 4, 61, 157, 3, 204, 186, 68, 199, 58, 59, 172, 144, 46, 62, 54, 84, 53, 189, 94, 125, 41, 190, 30, 217, 186, 189, 210, 211, 131, 188, 193, 54, 215, 59, 45, 137, 156, 61, 78, 145, 34, 62, 112, 250, 0, 189, 216, 143, 21, 61, 64, 216, 154, 189, 198, 96, 141, 189, 173, 168, 12, 62, 253, 180, 105, 189, 149, 107, 1, 190, 251, 202, 22, 189, 250, 184, 210, 188, 97, 15, 143, 61, 24, 116, 250, 189, 120, 51, 27, 190, 178, 78, 196, 60, 234, 119, 92, 61, 248, 149, 207, 189, 211, 52, 205, 189, 67, 85, 216, 189, 214, 243, 118, 189, 171, 211, 43, 61, 52, 234, 248, 190, 2, 151, 183, 60, 158, 12, 204, 188, 133, 228, 199, 61, 97, 36, 111, 190, 110, 21, 10, 191, 17, 78, 21, 189, 181, 137, 36, 61, 217, 113, 53, 189, 103, 145, 128, 189, 209, 86, 227, 190, 57, 91, 185, 190, 89, 222, 160, 189, 38, 99, 157, 61, 113, 92, 139, 62, 244, 28, 150, 190, 249, 186, 126, 62, 78, 18, 9, 191, 45, 154, 179, 60, 73, 86, 118, 62, 89, 221, 7, 191, 84, 254, 162, 62, 131, 105, 120, 190, 134, 215, 153, 62, 48, 82, 93, 191, 214, 29, 5, 191, 215, 34, 37, 191, 250, 178, 95, 190, 12, 149, 20, 62, 64, 236, 111, 62, 216, 90, 46, 62, 135, 223, 252, 61, 223, 175, 136, 190, 106, 184, 165, 61, 109, 0, 60, 191, 107, 23, 103, 62, 224, 145, 180, 62, 240, 209, 224, 190, 78, 11, 111, 62, 245, 188, 48, 188, 187, 242, 171, 189, 137, 198, 163, 61, 182, 208, 107, 189, 69, 234, 189, 62, 131, 211, 139, 61, 38, 216, 93, 57, 28, 252, 35, 190, 117, 80, 120, 62, 50, 120, 165, 190, 213, 51, 149, 191, 211, 175, 163, 190, 52, 137, 173, 190, 202, 73, 66, 190, 5, 222, 15, 191, 126, 38, 187, 62, 153, 96, 163, 62, 247, 183, 97, 62, 211, 142, 154, 191, 221, 145, 167, 191, 69, 83, 24, 62, 29, 201, 122, 190, 57, 93, 122, 62, 232, 177, 10, 62, 41, 74, 236, 61, 140, 27, 249, 190, 251, 32, 49, 188, 32, 126, 48, 189, 223, 47, 29, 62, 6, 179, 65, 62, 153, 216, 67, 62, 215, 12, 131, 187, 178, 49, 163, 61, 61, 146, 37, 191, 187, 54, 80, 62, 143, 205, 135, 188, 31, 131, 203, 62, 33, 153, 82, 188, 44, 170, 12, 61, 221, 165, 61, 62, 26, 36, 127, 62, 157, 30, 173, 59, 198, 160, 71, 191, 79, 200, 44, 62, 104, 24, 210, 190, 96, 205, 160, 190, 16, 109, 191, 189, 246, 113, 179, 62, 75, 238, 213, 62, 254, 254, 21, 190, 110, 74, 171, 191, 9, 199, 119, 191, 221, 180, 115, 60, 193, 48, 227, 190, 105, 203, 32, 191, 251, 3, 137, 189, 128, 22, 162, 62, 240, 217, 199, 61, 85, 89, 82, 63, 157, 118, 22, 189, 38, 127, 48, 190, 235, 206, 21, 190, 220, 7, 121, 190, 243, 186, 136, 190, 50, 221, 41, 62, 7, 202, 175, 61, 148, 70, 141, 186, 226, 23, 74, 62, 19, 60, 96, 60, 33, 169, 143, 190, 160, 99, 230, 189, 55, 140, 131, 62, 147, 229, 31, 189, 182, 251, 13, 191, 186, 125, 144, 190, 183, 224, 102, 61, 182, 200, 237, 187, 122, 98, 31, 62, 240, 54, 162, 189, 18, 153, 37, 59, 190, 116, 128, 190, 52, 221, 198, 189, 114, 5, 91, 190, 19, 19, 100, 189, 165, 247, 71, 62, 15, 52, 200, 189, 15, 73, 157, 61, 228, 165, 231, 189, 49, 198, 252, 189, 49, 158, 201, 62, 22, 74, 189, 189, 218, 157, 27, 189, 179, 191, 132, 60, 80, 118, 25, 189, 213, 235, 92, 188, 239, 243, 152, 61, 31, 175, 184, 190, 53, 129, 55, 62, 124, 90, 123, 189, 245, 153, 68, 62, 190, 167, 7, 62, 187, 217, 116, 62, 61, 15, 31, 62, 249, 67, 181, 190, 117, 41, 0, 62, 15, 111, 177, 190, 225, 170, 42, 190, 37, 35, 202, 61, 139, 122, 147, 62, 47, 216, 147, 61, 97, 211, 220, 189, 143, 77, 128, 62, 156, 97, 95, 62, 54, 242, 139, 61, 74, 91, 176, 190, 25, 187, 197, 190, 201, 167, 62, 62, 30, 114, 101, 62, 78, 84, 246, 190, 220, 167, 56, 190, 206, 223, 233, 189, 133, 84, 32, 190, 77, 236, 137, 189, 18, 236, 44, 62, 137, 19, 131, 190, 182, 38, 242, 61, 213, 193, 196, 61, 82, 255, 32, 190, 52, 222, 94, 190, 27, 72, 29, 189, 253, 101, 94, 190, 68, 149, 76, 190, 75, 210, 241, 187, 65, 101, 56, 61, 11, 207, 178, 189, 59, 24, 122, 61, 94, 121, 215, 61, 21, 137, 219, 62, 61, 227, 80, 62, 116, 246, 10, 61, 112, 83, 14, 62, 250, 79, 128, 190, 85, 26, 119, 62, 228, 148, 168, 190, 230, 246, 0, 191, 180, 203, 209, 190, 225, 130, 55, 62, 0, 92, 163, 62, 6, 233, 16, 191, 116, 197, 98, 62, 255, 36, 120, 190, 194, 250, 80, 190, 141, 106, 23, 61, 251, 92, 139, 61, 121, 57, 220, 189, 105, 248, 85, 58, 253, 90, 94, 190, 50, 72, 6, 191, 44, 100, 138, 190, 129, 116, 98, 59, 48, 166, 55, 61, 145, 52, 165, 62, 192, 9, 20, 191, 92, 65, 111, 62, 244, 92, 175, 190, 3, 235, 27, 190, 247, 225, 219, 188, 83, 79, 195, 58, 157, 177, 47, 190, 39, 214, 235, 62, 11, 184, 228, 189, 172, 192, 151, 61, 67, 40, 207, 60, 44, 143, 164, 62, 115, 124, 237, 189, 63, 80, 210, 190, 142, 203, 37, 191, 23, 158, 86, 62, 207, 156, 85, 190, 69, 107, 60, 190, 194, 228, 88, 61, 188, 54, 6, 191, 111, 179, 109, 190, 247, 190, 9, 62, 16, 201, 141, 190, 72, 183, 120, 59, 10, 197, 44, 62, 225, 58, 201, 61, 170, 91, 144, 190, 100, 151, 139, 62, 95, 178, 187, 187, 10, 125, 216, 190, 142, 6, 25, 191, 88, 87, 4, 62, 46, 70, 24, 62, 216, 55, 120, 190, 54, 129, 35, 62, 232, 76, 40, 189, 226, 250, 247, 189, 249, 197, 74, 62, 201, 130, 60, 62, 176, 165, 170, 189, 14, 207, 127, 62, 229, 198, 188, 189, 152, 232, 48, 62, 8, 110, 174, 188, 10, 40, 174, 189, 110, 37, 130, 189, 187, 11, 44, 190, 41, 26, 48, 191, 174, 248, 131, 62, 183, 182, 115, 62, 247, 103, 35, 191, 166, 243, 168, 61, 97, 112, 207, 60, 193, 61, 205, 61, 185, 74, 233, 61, 255, 120, 231, 60, 12, 219, 153, 188, 73, 205, 44, 62, 137, 110, 222, 61, 120, 206, 168, 61, 26, 205, 26, 189, 164, 98, 112, 60, 189, 92, 177, 185, 237, 216, 5, 189, 163, 107, 126, 189, 67, 143, 213, 61, 240, 201, 129, 188, 13, 89, 30, 190, 230, 144, 7, 190, 193, 214, 138, 189, 57, 184, 111, 190, 198, 96, 245, 189, 238, 122, 6, 190, 172, 115, 202, 190, 6, 186, 233, 189, 1, 16, 119, 189, 249, 5, 2, 190, 68, 34, 70, 189, 50, 28, 254, 189, 203, 75, 44, 190, 193, 53, 37, 190, 187, 56, 135, 60, 196, 75, 30, 189, 211, 75, 207, 189, 74, 20, 232, 61, 122, 64, 195, 189, 187, 101, 8, 190, 58, 3, 14, 62, 28, 110, 162, 61, 148, 79, 86, 61, 119, 9, 160, 188, 118, 255, 134, 189, 30, 49, 39, 62, 209, 249, 1, 60, 102, 144, 16, 62, 49, 210, 162, 189, 169, 194, 22, 190, 142, 200, 35, 62, 233, 133, 251, 189, 159, 53, 153, 189, 186, 8, 13, 189, 90, 162, 13, 61, 49, 110, 94, 189, 241, 240, 6, 190, 47, 77, 22, 190, 38, 65, 141, 187, 209, 128, 237, 188, 157, 79, 124, 189, 131, 199, 67, 189, 10, 230, 23, 190, 99, 33, 250, 61, 208, 39, 204, 189, 29, 253, 16, 190, 77, 99, 35, 190, 16, 226, 111, 188, 230, 99, 253, 190, 149, 96, 186, 62, 148, 109, 252, 61, 175, 238, 232, 190, 91, 56, 203, 62, 5, 245, 140, 190, 112, 240, 7, 191, 99, 191, 41, 190, 138, 201, 19, 188, 213, 31, 33, 191, 54, 242, 35, 62, 133, 12, 10, 190, 233, 156, 106, 190, 209, 116, 246, 62, 6, 150, 130, 62, 185, 32, 120, 62, 212, 5, 102, 62, 216, 197, 167, 189, 17, 120, 199, 190, 91, 141, 59, 60, 195, 5, 42, 191, 172, 249, 19, 191, 54, 50, 59, 60, 194, 77, 163, 190, 227, 98, 171, 61, 155, 117, 10, 191, 82, 178, 171, 189, 160, 114, 201, 61, 120, 133, 177, 62, 247, 79, 204, 62, 226, 209, 11, 191, 20, 252, 56, 62, 171, 57, 136, 190, 49, 138, 143, 62, 90, 221, 43, 62, 210, 75, 94, 190, 236, 230, 141, 62, 178, 203, 104, 190, 74, 181, 93, 61, 242, 185, 51, 188, 10, 43, 149, 62, 178, 100, 177, 61, 213, 97, 132, 61, 96, 194, 168, 190, 245, 63, 143, 189, 153, 135, 113, 189, 178, 167, 91, 62, 218, 72, 24, 62, 69, 49, 141, 61, 245, 43, 155, 189, 14, 70, 52, 190, 1, 225, 48, 61, 250, 72, 41, 191, 180, 238, 74, 190, 118, 125, 130, 62, 34, 106, 156, 62, 186, 42, 135, 62, 135, 35, 131, 190, 170, 208, 160, 62, 125, 88, 134, 62, 104, 215, 127, 62, 120, 231, 104, 190, 177, 107, 146, 190, 146, 90, 99, 60, 87, 15, 184, 61, 216, 44, 51, 191, 198, 56, 238, 189, 168, 157, 185, 61, 88, 111, 6, 191, 230, 9, 250, 61, 204, 37, 171, 62, 202, 93, 201, 189, 28, 151, 100, 62, 187, 255, 173, 62, 141, 254, 25, 190, 70, 148, 76, 62, 211, 238, 73, 190, 96, 230, 211, 189, 229, 178, 79, 190, 218, 106, 11, 62, 2, 70, 247, 189, 156, 93, 236, 61, 54, 125, 253, 61, 211, 251, 22, 62, 235, 69, 184, 61, 171, 136, 240, 61, 178, 220, 59, 189, 238, 151, 243, 189, 94, 3, 222, 190, 155, 71, 39, 62, 219, 95, 134, 190, 227, 117, 184, 190, 129, 74, 172, 187, 51, 69, 111, 61, 37, 230, 204, 62, 139, 100, 97, 189, 136, 57, 135, 60, 40, 104, 194, 62, 241, 182, 54, 62, 77, 85, 129, 190, 235, 16, 98, 62, 106, 113, 251, 190, 168, 85, 81, 188, 244, 131, 5, 62, 78, 78, 173, 61, 51, 140, 226, 61, 73, 182, 23, 62, 35, 62, 237, 188, 14, 118, 80, 187, 54, 97, 53, 191, 244, 85, 147, 62, 215, 43, 33, 61, 83, 61, 97, 62, 138, 141, 50, 188, 132, 67, 233, 189, 115, 226, 18, 62, 120, 143, 107, 191, 78, 112, 127, 189, 254, 76, 217, 61, 204, 61, 173, 61, 219, 182, 48, 62, 229, 190, 240, 189, 226, 33, 130, 62, 76, 61, 197, 188, 104, 236, 170, 62, 230, 221, 89, 61, 235, 58, 41, 188, 70, 139, 19, 62, 60, 175, 199, 187, 13, 150, 242, 61, 141, 179, 237, 61, 155, 86, 128, 190, 242, 50, 174, 62, 230, 220, 156, 190, 24, 39, 103, 59, 137, 154, 23, 190, 220, 82, 214, 189, 19, 133, 143, 61, 63, 88, 13, 62, 85, 139, 241, 189, 44, 109, 127, 189, 152, 249, 112, 190, 221, 60, 243, 60, 118, 50, 35, 61, 62, 229, 46, 62, 46, 135, 0, 62, 210, 134, 140, 61, 229, 248, 179, 61, 44, 212, 193, 190, 192, 202, 188, 189, 75, 197, 75, 60, 175, 118, 29, 61, 231, 239, 94, 62, 253, 211, 151, 190, 160, 13, 121, 62, 93, 127, 172, 61, 249, 121, 105, 62, 105, 21, 254, 189, 31, 228, 226, 189, 59, 87, 62, 62, 84, 142, 103, 61, 214, 201, 38, 61, 227, 124, 76, 62, 34, 238, 17, 62, 177, 95, 157, 190, 203, 76, 140, 189, 218, 245, 88, 62, 28, 4, 90, 189, 243, 100, 52, 62, 179, 83, 6, 62, 151, 147, 16, 62, 180, 239, 59, 190, 93, 106, 20, 191, 67, 7, 158, 61, 157, 23, 42, 190, 187, 142, 150, 189, 209, 61, 166, 61, 123, 115, 240, 61, 233, 22, 86, 61, 107, 132, 62, 61, 209, 43, 42, 62, 170, 49, 238, 60, 165, 12, 254, 190, 169, 84, 156, 189, 97, 3, 251, 59, 114, 139, 188, 61, 193, 36, 234, 61, 108, 120, 132, 60, 30, 15, 185, 190, 227, 19, 68, 60, 219, 35, 241, 189, 170, 86, 35, 190, 57, 102, 20, 191, 205, 38, 36, 191, 195, 136, 51, 189, 239, 21, 50, 62, 187, 210, 151, 191, 95, 49, 154, 190, 213, 48, 157, 62, 55, 245, 156, 190, 59, 165, 76, 62, 154, 126, 81, 189, 94, 83, 91, 190, 148, 231, 95, 189, 188, 2, 12, 191, 23, 53, 175, 61, 124, 10, 153, 191, 154, 170, 178, 190, 196, 127, 132, 62, 174, 0, 96, 60, 211, 235, 178, 61, 175, 184, 88, 60, 163, 65, 204, 62, 169, 249, 159, 62, 84, 151, 132, 189, 26, 139, 54, 62, 132, 223, 119, 191, 216, 102, 170, 62, 113, 202, 149, 190, 30, 166, 183, 190, 188, 161, 76, 190, 56, 102, 107, 61, 120, 106, 161, 62, 212, 64, 178, 190, 169, 122, 41, 188, 14, 157, 119, 191, 152, 35, 22, 62, 188, 187, 23, 61, 200, 65, 174, 191, 97, 0, 220, 190, 23, 107, 70, 190, 164, 144, 94, 190, 208, 170, 0, 189, 88, 30, 83, 61, 144, 41, 149, 61, 17, 69, 227, 61, 207, 36, 60, 191, 222, 25, 58, 61, 232, 49, 131, 191, 20, 142, 188, 191, 150, 90, 79, 62, 29, 29, 123, 189, 112, 121, 45, 62, 65, 152, 229, 190, 145, 57, 181, 62, 8, 129, 43, 63, 195, 161, 243, 62, 213, 77, 68, 60, 113, 187, 68, 191, 236, 76, 31, 190, 158, 242, 251, 190, 235, 142, 90, 191, 207, 131, 140, 61, 135, 45, 19, 63, 201, 245, 216, 62, 252, 211, 128, 190, 189, 83, 160, 189, 105, 77, 108, 191, 246, 143, 88, 190, 252, 145, 194, 62, 128, 255, 188, 190, 226, 190, 137, 62, 205, 229, 143, 189, 76, 58, 19, 190, 168, 138, 164, 61, 161, 5, 91, 62, 27, 226, 129, 190, 37, 87, 98, 62, 102, 1, 225, 61, 111, 64, 48, 189, 174, 219, 137, 60, 94, 206, 144, 61, 114, 203, 186, 190, 130, 110, 131, 188, 96, 90, 237, 62, 0, 157, 166, 59, 69, 155, 45, 62, 74, 138, 50, 62, 114, 199, 133, 190, 101, 207, 129, 62, 1, 57, 74, 190, 21, 25, 104, 62, 8, 120, 214, 187, 203, 184, 231, 190, 68, 180, 100, 189, 179, 169, 47, 62, 101, 158, 102, 187, 80, 145, 96, 190, 221, 181, 58, 190, 47, 12, 150, 62, 185, 97, 21, 190, 77, 49, 74, 62, 61, 75, 167, 190, 235, 135, 7, 62, 235, 226, 59, 62, 157, 89, 0, 190, 32, 50, 160, 190, 98, 46, 87, 62, 177, 212, 12, 61, 223, 129, 53, 62, 114, 234, 7, 62, 7, 187, 38, 62, 144, 223, 91, 189, 39, 72, 174, 60, 49, 96, 71, 188, 133, 223, 39, 61, 85, 75, 121, 62, 254, 193, 5, 61, 78, 56, 212, 62, 215, 199, 71, 61, 30, 29, 143, 188, 138, 217, 55, 61, 127, 210, 29, 188, 160, 162, 163, 62, 246, 151, 17, 191, 244, 116, 151, 62, 100, 81, 144, 190, 184, 137, 98, 62, 133, 62, 243, 61, 7, 227, 143, 190, 170, 225, 163, 190, 230, 248, 111, 62, 44, 134, 169, 62, 207, 0, 202, 190, 83, 37, 164, 62, 12, 240, 159, 61, 248, 158, 55, 190, 91, 88, 182, 62, 134, 179, 205, 62, 34, 110, 120, 189, 43, 235, 170, 62, 36, 211, 192, 190, 28, 80, 65, 62, 163, 197, 151, 62, 203, 19, 138, 62, 138, 37, 208, 61, 194, 152, 224, 189, 48, 185, 136, 61, 29, 114, 130, 190, 136, 18, 196, 61, 54, 87, 197, 190, 108, 218, 168, 190, 66, 15, 147, 60, 252, 245, 70, 61, 0, 98, 22, 62, 174, 113, 93, 190, 111, 121, 170, 62, 7, 172, 34, 63, 76, 200, 79, 62, 235, 165, 186, 190, 185, 200, 131, 190, 8, 221, 96, 62, 180, 253, 243, 190, 31, 240, 72, 191, 255, 252, 22, 190, 99, 193, 126, 62, 91, 248, 179, 190, 122, 83, 222, 60, 118, 7, 134, 62, 112, 88, 210, 190, 115, 44, 8, 61, 140, 197, 111, 62, 142, 232, 75, 190, 124, 195, 9, 62, 40, 4, 146, 61, 58, 160, 154, 190, 202, 180, 83, 190, 14, 112, 34, 190, 114, 135, 244, 190, 65, 93, 216, 189, 178, 140, 167, 62, 71, 29, 82, 61, 75, 24, 4, 63, 32, 234, 129, 62, 231, 67, 228, 189, 250, 103, 199, 189, 76, 60, 148, 190, 239, 59, 24, 62, 245, 211, 170, 190, 201, 65, 26, 191, 170, 195, 15, 190, 69, 185, 12, 62, 8, 196, 180, 62, 145, 58, 23, 59, 250, 46, 12, 62, 208, 89, 217, 59, 106, 213, 241, 188, 55, 33, 147, 190, 92, 214, 108, 191, 145, 108, 163, 190, 224, 163, 254, 189, 121, 150, 84, 62, 116, 184, 113, 62, 147, 220, 41, 190, 76, 232, 14, 61, 211, 200, 11, 190, 89, 90, 157, 190, 207, 1, 96, 61, 103, 152, 82, 191, 190, 172, 179, 191, 230, 241, 222, 62, 52, 89, 89, 189, 30, 244, 135, 61, 97, 32, 36, 191, 119, 44, 254, 61, 202, 190, 40, 62, 105, 224, 100, 62, 209, 41, 27, 189, 167, 12, 85, 191, 78, 137, 17, 62, 130, 229, 93, 188, 160, 43, 207, 190, 55, 210, 114, 62, 235, 82, 153, 62, 109, 114, 169, 61, 181, 207, 60, 190, 245, 244, 139, 189, 23, 239, 111, 62, 234, 202, 179, 61, 87, 224, 79, 62, 109, 112, 109, 190, 15, 133, 55, 62, 36, 187, 133, 188, 110, 181, 211, 61, 174, 99, 145, 62, 111, 66, 21, 190, 124, 160, 68, 187, 253, 149, 39, 62, 217, 116, 118, 190, 183, 122, 14, 61, 48, 108, 63, 62, 231, 43, 244, 62, 106, 132, 48, 190, 74, 158, 3, 62, 126, 240, 33, 191, 129, 132, 213, 61, 108, 250, 229, 190, 74, 0, 135, 190, 1, 48, 89, 190, 226, 170, 210, 190, 130, 35, 26, 62, 160, 47, 183, 189, 137, 191, 204, 61, 25, 58, 121, 61, 13, 170, 53, 189, 141, 38, 55, 190, 177, 126, 143, 61, 204, 208, 48, 62, 231, 200, 65, 190, 214, 82, 38, 62, 179, 67, 226, 61, 254, 241, 202, 190, 145, 192, 146, 62, 242, 141, 45, 190, 109, 173, 54, 190, 198, 141, 33, 61, 211, 135, 3, 62, 253, 232, 152, 61, 15, 57, 8, 62, 88, 166, 180, 190, 43, 45, 83, 61, 159, 250, 10, 191, 96, 33, 72, 62, 179, 235, 160, 61, 219, 114, 28, 61, 75, 152, 3, 62, 144, 225, 249, 59, 229, 240, 252, 61, 17, 90, 21, 191, 109, 190, 114, 190, 24, 63, 148, 62, 190, 24, 53, 62, 72, 224, 33, 62, 255, 1, 89, 189, 58, 22, 143, 62, 138, 219, 141, 61, 132, 209, 200, 61, 114, 106, 162, 190, 200, 3, 46, 190, 144, 15, 19, 62, 147, 56, 105, 190, 130, 14, 161, 59, 235, 33, 166, 62, 247, 70, 178, 190, 89, 58, 152, 60, 134, 45, 7, 63, 109, 92, 52, 190, 135, 74, 115, 62, 182, 50, 84, 60, 145, 59, 14, 62, 203, 176, 61, 62, 85, 207, 163, 190, 103, 89, 64, 190, 116, 227, 120, 191, 46, 24, 129, 189, 68, 160, 219, 185, 84, 184, 65, 61, 138, 105, 24, 190, 150, 245, 250, 189, 139, 33, 94, 62, 1, 28, 68, 191, 4, 139, 206, 190, 118, 247, 210, 62, 39, 124, 249, 61, 54, 131, 140, 188, 34, 158, 105, 190, 137, 188, 138, 62, 155, 108, 153, 61, 146, 15, 185, 62, 147, 253, 1, 191, 116, 233, 185, 190, 76, 13, 131, 62, 181, 173, 12, 191, 106, 22, 63, 191, 241, 41, 218, 61, 64, 252, 223, 189, 197, 43, 140, 189, 152, 153, 144, 61, 138, 173, 130, 62, 95, 176, 2, 191, 143, 235, 97, 62, 216, 71, 38, 62, 59, 192, 76, 190, 170, 82, 253, 189, 8, 15, 145, 61, 249, 231, 181, 189, 197, 15, 172, 189, 54, 88, 216, 189, 68, 60, 205, 188, 73, 1, 178, 61, 255, 148, 26, 62, 240, 204, 8, 62, 9, 194, 56, 62, 43, 230, 69, 62, 65, 101, 187, 190, 23, 41, 111, 62, 20, 91, 111, 190, 23, 8, 51, 62, 21, 159, 178, 190, 198, 109, 173, 190, 3, 60, 48, 191, 236, 173, 139, 61, 56, 79, 181, 61, 139, 154, 17, 191, 45, 19, 173, 62, 192, 54, 134, 62, 195, 87, 78, 61, 249, 221, 140, 190, 234, 26, 42, 190, 229, 114, 250, 60, 226, 60, 198, 188, 129, 188, 242, 61, 255, 118, 124, 62, 223, 203, 71, 61, 77, 102, 184, 61, 127, 219, 90, 190, 10, 120, 85, 191, 58, 90, 44, 61, 121, 163, 80, 190, 179, 35, 234, 60, 112, 56, 155, 62, 65, 72, 167, 61, 231, 204, 183, 189, 82, 165, 25, 62, 15, 45, 216, 189, 196, 195, 85, 190, 211, 34, 239, 188, 181, 24, 174, 190, 208, 103, 178, 190, 41, 228, 146, 190, 187, 98, 143, 62, 218, 62, 91, 190, 103, 70, 211, 62, 168, 175, 143, 190, 188, 55, 102, 190, 203, 213, 174, 189, 106, 126, 141, 60, 73, 221, 142, 189, 43, 204, 45, 62, 132, 247, 219, 60, 147, 185, 70, 62, 134, 171, 189, 61, 231, 160, 21, 62, 153, 126, 183, 189, 52, 92, 208, 62, 71, 180, 140, 189, 5, 97, 243, 61, 22, 60, 119, 60, 44, 254, 40, 189, 85, 182, 61, 62, 178, 35, 25, 190, 47, 231, 172, 188, 34, 97, 37, 61, 210, 241, 219, 61, 15, 0, 237, 61, 55, 157, 97, 62, 184, 1, 18, 189, 48, 246, 211, 187, 48, 71, 74, 62, 34, 142, 145, 62, 170, 251, 109, 190, 62, 139, 210, 61, 216, 62, 11, 61, 78, 49, 135, 190, 205, 228, 254, 57, 71, 250, 217, 60, 189, 48, 156, 61, 150, 193, 147, 61, 113, 91, 6, 61, 146, 39, 175, 189, 229, 179, 26, 62, 123, 217, 44, 61, 81, 32, 148, 190, 204, 46, 232, 60, 197, 190, 141, 61, 19, 112, 46, 189, 113, 16, 25, 63, 250, 72, 173, 62, 222, 61, 207, 188, 72, 136, 251, 61, 133, 131, 14, 191, 169, 0, 118, 60, 231, 151, 8, 190, 137, 151, 156, 62, 229, 46, 221, 61, 252, 233, 1, 62, 239, 143, 149, 60, 14, 241, 123, 62, 184, 137, 41, 62, 177, 203, 135, 190, 134, 145, 168, 189, 186, 255, 64, 62, 21, 23, 122, 190, 210, 58, 2, 62, 186, 167, 199, 62, 250, 186, 187, 189, 187, 96, 45, 61, 155, 210, 187, 190, 207, 242, 17, 190, 89, 116, 145, 61, 117, 125, 165, 186, 28, 106, 142, 188, 75, 254, 112, 62, 29, 77, 136, 190, 245, 78, 128, 190, 240, 125, 16, 62, 210, 56, 51, 190, 112, 164, 220, 60, 117, 116, 201, 61, 78, 171, 245, 61, 133, 42, 167, 189, 159, 81, 23, 61, 22, 47, 15, 189, 122, 58, 119, 189, 36, 165, 56, 62, 132, 1, 216, 62, 220, 16, 55, 62, 98, 202, 19, 61, 96, 85, 233, 61, 200, 208, 128, 62, 60, 88, 192, 188, 44, 128, 172, 190, 173, 4, 48, 62, 56, 208, 46, 62, 97, 0, 192, 60, 212, 148, 101, 190, 93, 140, 0, 62, 131, 66, 168, 61, 123, 208, 167, 189, 35, 188, 206, 190, 114, 97, 142, 190, 238, 77, 220, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 200, 25, 190, 23, 82, 219, 189, 61, 142, 56, 188, 192, 240, 170, 61, 150, 171, 226, 189, 29, 168, 39, 58, 221, 119, 141, 61, 206, 106, 145, 188, 58, 67, 59, 62, 31, 113, 59, 190, 28, 87, 235, 189, 113, 96, 242, 61, 183, 96, 20, 62, 39, 41, 11, 62, 144, 33, 177, 187, 146, 17, 190, 188, 253, 190, 42, 62, 152, 22, 197, 62, 103, 12, 163, 62, 219, 153, 161, 188, 234, 132, 230, 190, 131, 253, 148, 62, 153, 231, 16, 190, 39, 213, 131, 62, 137, 172, 164, 61, 164, 206, 114, 61, 14, 75, 149, 62, 227, 221, 148, 62, 113, 75, 193, 61, 208, 192, 7, 62, 223, 75, 185, 62, 112, 71, 221, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 122, 187, 61, 249, 21, 176, 190, 134, 124, 63, 63, 171, 27, 69, 191, 123, 203, 252, 62, 255, 157, 162, 190, 65, 147, 154, 62, 169, 113, 205, 190, 83, 112, 89, 62, 212, 143, 160, 61, 142, 115, 34, 190, 171, 120, 135, 63, 31, 57, 232, 190, 67, 76, 176, 62, 70, 21, 165, 190, 4, 75, 151, 189, 158, 225, 136, 187, 17, 16, 53, 63, 170, 233, 201, 63, 81, 62, 44, 63, 88, 37, 149, 190, 101, 134, 63, 191, 73, 29, 251, 62, 20, 69, 66, 63, 207, 98, 182, 62, 232, 37, 224, 190, 75, 87, 27, 191, 47, 143, 190, 62, 124, 66, 165, 62, 44, 112, 12, 60, 155, 80, 23, 58, 35, 74, 250, 189, 32, 241, 225, 189, 203, 76, 2, 190, 64, 112, 110, 62, 108, 36, 111, 62, 165, 162, 173, 189, 208, 116, 120, 61, 68, 153, 131, 62, 131, 31, 27, 62, 247, 241, 93, 190, 176, 168, 228, 60, 251, 42, 166, 188, 80, 149, 243, 60, 185, 45, 46, 189, 48, 105, 130, 190, 14, 73, 17, 190, 63, 3, 59, 61, 108, 66, 206, 190, 110, 200, 30, 59, 17, 246, 37, 62, 125, 117, 187, 61, 133, 115, 130, 62, 8, 189, 190, 61, 92, 135, 225, 62, 236, 95, 156, 61, 172, 130, 199, 187, 12, 232, 168, 61, 161, 200, 173, 61, 46, 238, 30, 190, 67, 51, 72, 62, 132, 42, 127, 190, 70, 231, 244, 190, 50, 15, 90, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {66, 99, 5, 188, 213, 103, 26, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {109, 187, 164, 63, 248, 151, 185, 190, 86, 121, 64, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {178, 80, 80, 64, 38, 158, 173, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0016/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}