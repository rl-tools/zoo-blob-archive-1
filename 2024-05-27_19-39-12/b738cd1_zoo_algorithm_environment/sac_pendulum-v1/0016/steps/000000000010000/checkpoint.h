// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 218, 126, 189, 241, 39, 98, 63, 207, 235, 170, 62, 188, 30, 33, 63, 17, 243, 9, 63, 194, 113, 78, 62, 14, 21, 57, 63, 13, 119, 73, 62, 187, 134, 166, 62, 78, 213, 238, 62, 88, 101, 177, 62, 232, 121, 17, 191, 222, 68, 250, 190, 94, 44, 168, 191, 54, 82, 145, 190, 6, 176, 24, 191, 244, 87, 111, 191, 52, 38, 174, 62, 224, 28, 16, 63, 35, 42, 2, 191, 255, 195, 243, 190, 218, 126, 45, 63, 201, 151, 35, 63, 207, 71, 7, 63, 187, 86, 21, 63, 44, 91, 249, 62, 153, 173, 12, 61, 116, 238, 250, 62, 112, 7, 201, 190, 45, 194, 4, 190, 80, 212, 175, 62, 249, 199, 91, 62, 111, 34, 195, 62, 74, 58, 38, 62, 78, 238, 216, 61, 190, 90, 7, 191, 164, 183, 23, 190, 150, 97, 163, 191, 131, 33, 202, 190, 24, 245, 200, 62, 200, 153, 4, 62, 253, 149, 217, 62, 97, 123, 7, 191, 16, 255, 116, 191, 208, 153, 31, 191, 6, 14, 42, 62, 139, 29, 173, 62, 185, 54, 203, 190, 3, 10, 150, 190, 194, 197, 217, 62, 57, 138, 121, 61, 149, 208, 137, 190, 121, 3, 139, 60, 163, 71, 163, 60, 136, 139, 125, 189, 99, 196, 57, 191, 221, 104, 21, 63, 133, 46, 248, 62, 229, 134, 150, 62, 139, 182, 222, 190, 250, 31, 44, 191, 208, 165, 78, 188, 63, 153, 0, 63, 6, 237, 189, 62, 87, 109, 81, 191, 20, 87, 52, 190, 201, 52, 36, 191, 209, 20, 95, 63, 66, 179, 138, 188, 107, 163, 16, 189, 171, 42, 121, 191, 54, 241, 131, 189, 249, 118, 64, 191, 57, 190, 61, 191, 233, 108, 166, 190, 128, 46, 37, 63, 206, 89, 132, 190, 155, 80, 34, 191, 58, 173, 2, 63, 238, 168, 8, 63, 172, 90, 27, 60, 111, 127, 23, 63, 56, 47, 112, 187, 67, 246, 120, 62, 225, 178, 51, 191, 116, 190, 8, 190, 64, 253, 183, 190, 104, 235, 157, 62, 19, 182, 149, 191, 68, 252, 130, 190, 25, 10, 38, 63, 60, 72, 180, 191, 213, 109, 186, 190, 237, 74, 241, 190, 225, 197, 60, 62, 130, 251, 64, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 7, 226, 190, 104, 37, 150, 190, 144, 127, 138, 61, 85, 125, 93, 191, 136, 110, 29, 190, 230, 37, 161, 190, 103, 48, 166, 189, 32, 194, 206, 190, 5, 109, 205, 189, 195, 118, 73, 62, 131, 207, 145, 190, 50, 43, 87, 191, 35, 245, 89, 62, 224, 44, 71, 191, 103, 63, 216, 188, 94, 55, 87, 189, 2, 170, 183, 62, 238, 42, 237, 190, 125, 149, 162, 62, 116, 205, 40, 63, 89, 71, 239, 190, 252, 72, 67, 188, 128, 27, 27, 63, 49, 163, 2, 63, 198, 45, 251, 190, 189, 142, 172, 190, 37, 37, 153, 59, 137, 164, 92, 191, 176, 178, 52, 190, 231, 203, 61, 61, 216, 95, 245, 188, 7, 141, 21, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 118, 19, 189, 203, 121, 24, 190, 52, 63, 22, 190, 25, 80, 161, 60, 250, 15, 240, 60, 161, 114, 170, 60, 208, 66, 4, 61, 157, 3, 204, 186, 68, 199, 58, 59, 172, 144, 46, 62, 54, 84, 53, 189, 94, 125, 41, 190, 30, 217, 186, 189, 210, 211, 131, 188, 193, 54, 215, 59, 45, 137, 156, 61, 78, 145, 34, 62, 112, 250, 0, 189, 216, 143, 21, 61, 64, 216, 154, 189, 198, 96, 141, 189, 173, 168, 12, 62, 253, 180, 105, 189, 149, 107, 1, 190, 251, 202, 22, 189, 250, 184, 210, 188, 97, 15, 143, 61, 24, 116, 250, 189, 120, 51, 27, 190, 178, 78, 196, 60, 234, 119, 92, 61, 248, 149, 207, 189, 29, 35, 235, 189, 254, 115, 237, 189, 34, 53, 109, 189, 171, 211, 43, 61, 199, 37, 222, 190, 221, 56, 112, 59, 158, 12, 204, 188, 11, 183, 183, 61, 95, 25, 23, 190, 116, 80, 218, 190, 160, 164, 60, 189, 181, 137, 36, 61, 152, 41, 143, 60, 143, 229, 181, 189, 203, 138, 218, 190, 57, 91, 185, 190, 207, 52, 169, 189, 38, 99, 157, 61, 75, 150, 131, 62, 94, 148, 146, 190, 68, 104, 93, 62, 89, 225, 190, 190, 228, 109, 99, 61, 117, 76, 115, 62, 233, 85, 0, 191, 84, 254, 162, 62, 76, 118, 36, 190, 240, 13, 63, 62, 226, 195, 88, 191, 166, 207, 160, 190, 180, 21, 210, 190, 250, 178, 95, 190, 10, 174, 224, 61, 108, 17, 32, 62, 106, 219, 6, 62, 49, 53, 236, 188, 137, 185, 56, 190, 99, 251, 57, 62, 206, 56, 17, 191, 123, 128, 53, 62, 16, 186, 146, 62, 125, 63, 38, 189, 58, 84, 81, 62, 27, 0, 212, 189, 77, 165, 79, 61, 208, 153, 128, 61, 81, 147, 44, 190, 82, 65, 146, 62, 149, 165, 7, 61, 38, 216, 93, 57, 144, 47, 29, 190, 232, 80, 165, 62, 193, 138, 148, 190, 74, 164, 81, 191, 147, 183, 202, 190, 156, 118, 167, 190, 59, 224, 141, 189, 201, 48, 18, 191, 77, 138, 142, 62, 139, 143, 147, 62, 65, 26, 195, 59, 160, 222, 119, 191, 123, 188, 106, 191, 22, 71, 77, 58, 53, 146, 47, 190, 136, 149, 171, 62, 51, 211, 87, 62, 94, 94, 205, 61, 121, 59, 185, 190, 240, 230, 95, 189, 48, 191, 118, 189, 120, 6, 85, 62, 94, 231, 2, 62, 71, 230, 39, 62, 164, 233, 190, 60, 251, 27, 5, 62, 124, 204, 18, 191, 182, 213, 98, 62, 80, 42, 24, 61, 248, 47, 182, 62, 121, 217, 249, 188, 44, 170, 12, 61, 134, 230, 44, 62, 141, 180, 59, 62, 218, 189, 185, 59, 37, 178, 22, 191, 12, 212, 23, 62, 21, 219, 197, 190, 214, 98, 135, 190, 126, 116, 234, 189, 43, 167, 148, 62, 170, 154, 100, 62, 203, 13, 76, 189, 222, 243, 132, 191, 81, 47, 83, 191, 237, 73, 222, 59, 39, 181, 134, 190, 246, 82, 202, 190, 137, 156, 124, 189, 173, 115, 130, 62, 153, 87, 248, 61, 255, 186, 62, 63, 71, 237, 100, 189, 120, 51, 38, 190, 162, 31, 71, 190, 89, 23, 139, 190, 197, 143, 133, 190, 96, 211, 237, 61, 197, 73, 177, 61, 61, 188, 56, 60, 137, 21, 58, 62, 229, 154, 8, 189, 205, 117, 137, 190, 160, 99, 230, 189, 65, 113, 73, 62, 234, 39, 134, 189, 13, 21, 10, 191, 145, 224, 136, 190, 151, 155, 115, 61, 4, 217, 59, 189, 65, 99, 82, 62, 56, 225, 238, 189, 129, 96, 129, 189, 171, 229, 30, 190, 186, 7, 212, 189, 51, 54, 97, 190, 40, 65, 75, 189, 226, 1, 52, 62, 137, 108, 222, 189, 135, 139, 42, 62, 235, 238, 173, 61, 202, 44, 178, 189, 85, 197, 130, 62, 3, 97, 105, 61, 33, 226, 68, 189, 242, 218, 184, 61, 60, 123, 181, 189, 240, 117, 27, 188, 35, 7, 7, 62, 30, 50, 145, 190, 112, 113, 221, 61, 47, 156, 220, 60, 52, 104, 45, 62, 84, 71, 7, 62, 10, 84, 36, 62, 61, 15, 31, 62, 57, 54, 60, 190, 156, 57, 199, 61, 143, 197, 117, 190, 135, 18, 51, 190, 62, 198, 146, 60, 213, 183, 127, 62, 197, 108, 162, 188, 209, 98, 210, 189, 167, 116, 87, 62, 150, 187, 23, 62, 164, 217, 180, 61, 233, 71, 186, 190, 183, 150, 197, 190, 135, 249, 42, 62, 112, 75, 105, 62, 138, 161, 248, 190, 138, 93, 39, 190, 74, 152, 74, 60, 211, 41, 81, 190, 89, 31, 242, 189, 86, 41, 31, 62, 171, 113, 84, 190, 175, 15, 177, 61, 175, 54, 199, 61, 57, 148, 154, 189, 115, 148, 29, 190, 191, 41, 88, 189, 105, 101, 81, 190, 134, 149, 44, 190, 194, 122, 11, 190, 131, 183, 132, 60, 11, 207, 178, 189, 178, 107, 210, 61, 217, 246, 189, 61, 108, 46, 215, 62, 212, 58, 111, 62, 237, 32, 6, 62, 126, 176, 15, 62, 238, 29, 116, 190, 11, 213, 65, 62, 68, 186, 183, 190, 22, 48, 157, 190, 129, 151, 146, 190, 83, 3, 75, 62, 93, 83, 174, 62, 42, 37, 169, 190, 131, 241, 79, 62, 138, 239, 25, 190, 118, 150, 129, 190, 30, 160, 234, 61, 90, 186, 41, 61, 74, 80, 159, 188, 244, 0, 18, 60, 142, 47, 106, 190, 29, 178, 162, 190, 68, 50, 106, 190, 140, 143, 124, 189, 91, 208, 198, 61, 30, 80, 160, 62, 226, 40, 11, 191, 238, 5, 93, 62, 134, 245, 153, 190, 253, 89, 26, 190, 247, 225, 219, 188, 38, 204, 152, 61, 99, 88, 14, 190, 63, 242, 183, 62, 65, 34, 240, 189, 239, 109, 164, 61, 167, 60, 157, 60, 0, 97, 132, 62, 194, 48, 175, 189, 58, 58, 96, 190, 216, 23, 9, 191, 218, 26, 55, 62, 71, 180, 84, 190, 163, 2, 63, 190, 45, 28, 58, 61, 136, 153, 176, 190, 183, 231, 90, 190, 11, 82, 36, 62, 155, 161, 144, 190, 141, 149, 185, 189, 184, 89, 177, 60, 191, 138, 137, 61, 78, 79, 83, 190, 28, 201, 128, 62, 130, 162, 83, 58, 215, 64, 177, 190, 180, 24, 216, 190, 3, 211, 185, 61, 63, 140, 144, 61, 224, 132, 108, 190, 251, 21, 19, 190, 220, 35, 167, 189, 226, 250, 247, 189, 85, 243, 61, 62, 50, 91, 30, 62, 60, 64, 245, 189, 185, 114, 142, 62, 154, 184, 124, 61, 131, 38, 19, 62, 127, 92, 181, 188, 246, 109, 73, 190, 46, 8, 185, 189, 112, 18, 61, 190, 93, 40, 243, 190, 199, 213, 138, 62, 41, 167, 132, 62, 1, 39, 212, 190, 166, 243, 168, 61, 97, 112, 207, 60, 193, 61, 205, 61, 185, 74, 233, 61, 255, 120, 231, 60, 12, 219, 153, 188, 73, 205, 44, 62, 137, 110, 222, 61, 120, 206, 168, 61, 26, 205, 26, 189, 164, 98, 112, 60, 189, 92, 177, 185, 237, 216, 5, 189, 163, 107, 126, 189, 67, 143, 213, 61, 240, 201, 129, 188, 13, 89, 30, 190, 230, 144, 7, 190, 193, 214, 138, 189, 57, 184, 111, 190, 198, 96, 245, 189, 238, 122, 6, 190, 172, 115, 202, 190, 6, 186, 233, 189, 1, 16, 119, 189, 249, 5, 2, 190, 68, 34, 70, 189, 50, 28, 254, 189, 203, 75, 44, 190, 193, 53, 37, 190, 187, 56, 135, 60, 196, 75, 30, 189, 211, 75, 207, 189, 74, 20, 232, 61, 122, 64, 195, 189, 187, 101, 8, 190, 58, 3, 14, 62, 28, 110, 162, 61, 148, 79, 86, 61, 119, 9, 160, 188, 118, 255, 134, 189, 30, 49, 39, 62, 209, 249, 1, 60, 102, 144, 16, 62, 49, 210, 162, 189, 169, 194, 22, 190, 142, 200, 35, 62, 233, 133, 251, 189, 159, 53, 153, 189, 186, 8, 13, 189, 90, 162, 13, 61, 49, 110, 94, 189, 241, 240, 6, 190, 47, 77, 22, 190, 38, 65, 141, 187, 209, 128, 237, 188, 157, 79, 124, 189, 131, 199, 67, 189, 10, 230, 23, 190, 99, 33, 250, 61, 208, 39, 204, 189, 29, 253, 16, 190, 77, 99, 35, 190, 16, 226, 111, 188, 78, 176, 196, 190, 107, 105, 188, 62, 89, 78, 31, 62, 49, 56, 201, 190, 213, 58, 186, 62, 125, 55, 89, 190, 34, 61, 4, 191, 22, 92, 52, 190, 192, 48, 55, 61, 32, 31, 189, 190, 62, 120, 199, 61, 86, 146, 172, 189, 158, 147, 110, 190, 118, 11, 143, 62, 12, 148, 126, 62, 41, 76, 129, 62, 142, 11, 159, 62, 216, 197, 167, 189, 77, 225, 202, 190, 193, 14, 191, 61, 204, 36, 36, 191, 154, 69, 22, 191, 1, 95, 182, 61, 216, 210, 156, 190, 169, 155, 114, 61, 84, 92, 10, 191, 96, 250, 255, 59, 15, 176, 39, 61, 223, 150, 169, 62, 87, 187, 196, 62, 157, 138, 14, 191, 254, 233, 46, 62, 109, 111, 219, 189, 61, 189, 153, 62, 135, 91, 29, 62, 1, 240, 83, 190, 209, 60, 107, 62, 225, 236, 54, 187, 177, 120, 122, 61, 183, 95, 135, 189, 138, 93, 147, 62, 169, 141, 139, 61, 14, 50, 174, 189, 96, 174, 145, 190, 159, 219, 189, 189, 112, 223, 79, 61, 25, 60, 72, 62, 37, 123, 84, 62, 213, 255, 240, 61, 245, 43, 155, 189, 234, 1, 116, 190, 205, 166, 33, 61, 203, 252, 218, 190, 217, 178, 110, 190, 210, 31, 95, 62, 126, 48, 137, 62, 23, 194, 87, 62, 129, 164, 96, 190, 38, 165, 163, 62, 63, 2, 95, 61, 210, 51, 129, 62, 249, 35, 133, 190, 88, 87, 157, 190, 152, 108, 200, 188, 236, 98, 139, 61, 158, 119, 50, 191, 185, 6, 211, 189, 248, 63, 173, 61, 157, 155, 236, 190, 37, 209, 161, 61, 15, 166, 157, 62, 153, 7, 137, 189, 154, 218, 93, 62, 229, 163, 174, 62, 86, 186, 224, 189, 69, 10, 56, 62, 27, 160, 42, 190, 40, 157, 53, 190, 190, 4, 76, 190, 51, 162, 141, 61, 72, 124, 250, 189, 156, 93, 236, 61, 53, 244, 43, 62, 209, 13, 9, 62, 249, 226, 88, 61, 161, 152, 18, 62, 52, 41, 5, 60, 72, 175, 167, 189, 140, 238, 192, 190, 131, 16, 234, 61, 239, 249, 140, 190, 49, 148, 137, 190, 3, 36, 68, 188, 217, 148, 178, 61, 92, 238, 210, 62, 223, 113, 9, 189, 0, 195, 219, 61, 48, 105, 208, 62, 149, 45, 52, 62, 84, 147, 127, 190, 187, 123, 28, 62, 170, 176, 99, 190, 149, 245, 21, 188, 194, 92, 184, 61, 132, 40, 194, 61, 68, 1, 200, 61, 58, 249, 211, 60, 104, 70, 158, 59, 14, 83, 53, 189, 150, 167, 9, 191, 63, 179, 135, 62, 182, 103, 198, 61, 108, 49, 126, 62, 138, 141, 50, 188, 228, 187, 45, 190, 44, 176, 20, 62, 102, 165, 55, 191, 110, 150, 209, 189, 0, 2, 121, 61, 73, 11, 53, 61, 252, 187, 247, 61, 13, 219, 178, 189, 239, 44, 138, 62, 159, 109, 194, 189, 231, 235, 171, 62, 52, 170, 221, 59, 248, 216, 23, 189, 17, 225, 223, 61, 112, 191, 167, 61, 220, 23, 32, 62, 31, 11, 246, 61, 81, 188, 115, 190, 155, 228, 149, 62, 224, 147, 255, 189, 172, 181, 27, 61, 23, 117, 63, 190, 83, 161, 165, 189, 72, 247, 166, 61, 8, 109, 141, 60, 52, 189, 185, 189, 104, 217, 172, 189, 170, 171, 166, 189, 24, 111, 189, 59, 215, 157, 245, 61, 117, 233, 74, 62, 46, 135, 0, 62, 192, 249, 14, 187, 96, 18, 231, 61, 128, 237, 84, 190, 130, 237, 199, 189, 131, 226, 84, 189, 51, 101, 130, 60, 185, 156, 42, 62, 202, 181, 114, 190, 49, 214, 140, 62, 91, 209, 5, 187, 20, 121, 85, 62, 127, 198, 8, 190, 149, 37, 212, 189, 40, 221, 23, 62, 44, 75, 134, 61, 82, 20, 90, 61, 75, 213, 86, 62, 7, 180, 15, 190, 52, 44, 4, 190, 110, 31, 85, 189, 124, 208, 47, 62, 173, 0, 104, 189, 37, 213, 73, 62, 148, 13, 15, 62, 194, 59, 236, 61, 234, 95, 120, 190, 241, 178, 26, 191, 99, 26, 246, 60, 14, 53, 112, 190, 142, 74, 129, 190, 255, 123, 21, 62, 123, 115, 240, 61, 229, 109, 18, 61, 17, 11, 71, 61, 97, 192, 49, 62, 180, 31, 7, 61, 246, 193, 228, 190, 208, 140, 68, 189, 97, 3, 251, 59, 166, 135, 124, 188, 104, 124, 9, 62, 217, 25, 16, 189, 229, 130, 151, 190, 101, 56, 24, 60, 106, 33, 225, 189, 101, 141, 229, 190, 120, 49, 239, 190, 109, 145, 37, 191, 67, 236, 50, 189, 39, 35, 136, 62, 187, 186, 100, 191, 227, 171, 179, 190, 166, 161, 127, 62, 43, 20, 136, 190, 246, 50, 48, 62, 101, 127, 117, 189, 158, 109, 41, 190, 83, 2, 137, 61, 80, 40, 248, 190, 250, 209, 78, 60, 160, 191, 140, 191, 170, 219, 22, 191, 48, 239, 128, 62, 174, 0, 96, 60, 48, 114, 15, 62, 63, 222, 231, 188, 29, 233, 195, 62, 96, 49, 172, 62, 78, 161, 197, 61, 119, 127, 62, 62, 118, 85, 114, 191, 100, 36, 77, 62, 11, 120, 165, 190, 216, 28, 182, 190, 98, 56, 113, 190, 223, 255, 178, 61, 63, 50, 167, 62, 175, 173, 121, 190, 18, 221, 156, 189, 7, 127, 134, 191, 87, 215, 164, 61, 188, 187, 23, 61, 125, 94, 151, 191, 226, 15, 200, 190, 92, 141, 177, 190, 28, 181, 139, 190, 110, 82, 61, 190, 130, 37, 52, 189, 184, 4, 229, 60, 17, 69, 227, 61, 10, 39, 104, 191, 220, 207, 26, 61, 42, 21, 111, 191, 79, 201, 147, 191, 82, 246, 9, 62, 29, 29, 123, 189, 187, 188, 29, 62, 86, 170, 176, 190, 89, 148, 182, 62, 156, 230, 9, 63, 248, 244, 194, 62, 28, 28, 210, 188, 160, 1, 61, 191, 124, 30, 112, 190, 116, 49, 38, 191, 19, 233, 28, 191, 137, 254, 202, 61, 204, 98, 208, 62, 225, 64, 155, 62, 44, 8, 24, 190, 55, 210, 8, 190, 85, 19, 117, 191, 41, 104, 147, 190, 193, 103, 172, 62, 204, 73, 156, 190, 56, 2, 77, 62, 205, 125, 126, 189, 111, 190, 43, 190, 147, 173, 221, 61, 234, 51, 56, 62, 209, 147, 145, 190, 42, 24, 29, 62, 44, 159, 209, 61, 211, 75, 132, 189, 152, 53, 105, 60, 6, 199, 75, 61, 65, 250, 182, 190, 130, 110, 131, 188, 181, 213, 193, 62, 127, 209, 104, 60, 121, 202, 35, 62, 102, 238, 15, 62, 184, 98, 133, 190, 16, 97, 98, 62, 132, 140, 31, 190, 153, 192, 96, 62, 44, 224, 105, 59, 73, 152, 165, 190, 165, 133, 162, 189, 166, 25, 3, 62, 45, 112, 252, 188, 177, 205, 86, 190, 119, 5, 151, 190, 36, 74, 94, 62, 31, 157, 64, 190, 159, 77, 45, 62, 17, 232, 143, 190, 117, 253, 13, 62, 128, 131, 218, 61, 47, 146, 31, 190, 250, 253, 234, 189, 217, 101, 19, 62, 108, 144, 124, 59, 83, 128, 2, 62, 17, 20, 252, 61, 4, 143, 10, 62, 10, 141, 213, 188, 73, 117, 18, 61, 132, 79, 38, 189, 133, 223, 39, 61, 54, 199, 108, 62, 21, 132, 38, 61, 201, 58, 182, 62, 148, 177, 91, 189, 231, 194, 208, 60, 25, 192, 119, 61, 157, 129, 69, 61, 52, 172, 128, 62, 81, 222, 224, 190, 175, 43, 73, 62, 214, 184, 135, 190, 226, 119, 43, 62, 224, 105, 80, 59, 187, 48, 134, 190, 12, 16, 140, 190, 40, 28, 134, 62, 95, 58, 170, 62, 183, 192, 194, 190, 38, 44, 136, 62, 51, 72, 247, 61, 10, 10, 50, 190, 34, 53, 168, 62, 103, 94, 210, 62, 105, 88, 146, 189, 46, 68, 144, 62, 211, 157, 168, 190, 82, 99, 40, 62, 143, 125, 149, 62, 184, 68, 126, 62, 174, 131, 40, 62, 20, 185, 139, 189, 48, 185, 136, 61, 61, 223, 135, 190, 172, 61, 183, 61, 193, 135, 188, 190, 21, 240, 181, 190, 106, 191, 50, 188, 185, 85, 249, 60, 3, 251, 180, 61, 14, 134, 53, 190, 60, 114, 178, 62, 244, 135, 251, 62, 79, 96, 84, 62, 52, 109, 196, 190, 218, 191, 139, 190, 182, 226, 59, 62, 150, 253, 223, 190, 58, 187, 80, 191, 161, 188, 87, 190, 127, 204, 93, 62, 142, 71, 129, 190, 59, 82, 244, 60, 121, 136, 133, 62, 197, 209, 177, 190, 61, 165, 47, 61, 36, 50, 54, 62, 215, 21, 20, 190, 138, 160, 157, 61, 102, 17, 183, 61, 184, 249, 113, 190, 108, 1, 70, 190, 126, 208, 43, 190, 190, 155, 218, 190, 65, 93, 216, 189, 245, 92, 166, 62, 199, 244, 76, 61, 193, 91, 16, 63, 60, 236, 91, 62, 163, 218, 174, 189, 144, 222, 167, 189, 247, 57, 124, 190, 240, 20, 21, 62, 180, 245, 171, 190, 226, 232, 195, 190, 150, 219, 33, 190, 123, 245, 227, 61, 246, 105, 162, 62, 13, 6, 165, 60, 66, 23, 142, 61, 29, 116, 184, 189, 62, 57, 168, 189, 55, 33, 147, 190, 14, 221, 117, 191, 55, 195, 146, 190, 112, 222, 145, 189, 44, 169, 28, 62, 149, 114, 184, 61, 121, 110, 77, 190, 2, 156, 196, 187, 211, 200, 11, 190, 205, 108, 220, 190, 120, 171, 40, 61, 227, 246, 67, 191, 20, 161, 142, 191, 242, 148, 192, 62, 52, 89, 89, 189, 196, 104, 130, 61, 101, 116, 237, 190, 8, 206, 255, 61, 76, 148, 162, 61, 241, 168, 19, 62, 175, 174, 221, 188, 55, 178, 78, 191, 78, 137, 17, 62, 219, 5, 29, 190, 213, 215, 126, 190, 1, 157, 130, 62, 133, 131, 44, 62, 86, 153, 210, 56, 202, 207, 187, 189, 78, 246, 9, 190, 223, 172, 103, 62, 246, 186, 243, 61, 242, 82, 86, 62, 203, 252, 47, 190, 94, 57, 55, 62, 114, 49, 228, 188, 30, 170, 84, 62, 161, 235, 143, 62, 61, 101, 245, 189, 92, 9, 99, 62, 197, 134, 16, 62, 210, 238, 70, 190, 177, 222, 101, 61, 45, 85, 62, 62, 119, 187, 209, 62, 163, 213, 35, 190, 74, 158, 3, 62, 244, 142, 176, 190, 73, 252, 199, 61, 5, 197, 222, 190, 17, 23, 86, 190, 118, 85, 11, 190, 179, 37, 173, 190, 79, 72, 51, 62, 78, 133, 6, 190, 142, 50, 190, 61, 190, 146, 199, 61, 84, 10, 138, 189, 66, 21, 236, 189, 139, 137, 217, 61, 59, 244, 65, 62, 117, 65, 67, 189, 164, 14, 60, 62, 23, 224, 206, 61, 1, 136, 196, 190, 214, 207, 129, 62, 180, 135, 163, 61, 225, 226, 46, 190, 202, 69, 164, 187, 4, 185, 1, 62, 133, 77, 127, 61, 179, 54, 169, 60, 180, 87, 159, 190, 54, 112, 45, 61, 133, 75, 174, 190, 48, 246, 53, 62, 5, 147, 16, 62, 123, 129, 156, 61, 75, 152, 3, 62, 217, 246, 181, 187, 71, 74, 247, 61, 76, 167, 197, 190, 181, 41, 135, 190, 8, 210, 120, 62, 85, 81, 36, 62, 140, 237, 188, 61, 57, 246, 97, 188, 164, 123, 146, 62, 130, 96, 90, 189, 42, 19, 195, 61, 27, 66, 173, 190, 238, 193, 60, 190, 126, 25, 214, 61, 219, 116, 129, 189, 228, 220, 5, 61, 67, 26, 163, 62, 66, 51, 181, 190, 103, 61, 162, 61, 11, 247, 17, 63, 89, 124, 23, 190, 79, 27, 106, 62, 84, 131, 48, 60, 224, 183, 2, 62, 198, 254, 252, 61, 123, 57, 146, 190, 10, 198, 9, 190, 105, 179, 51, 191, 68, 85, 221, 188, 196, 217, 139, 61, 166, 185, 147, 61, 138, 105, 24, 190, 109, 223, 82, 190, 193, 129, 95, 62, 194, 169, 29, 191, 18, 167, 212, 190, 58, 116, 184, 62, 108, 28, 221, 61, 198, 158, 129, 188, 109, 17, 48, 190, 96, 200, 142, 62, 117, 120, 161, 60, 80, 11, 209, 62, 135, 32, 1, 191, 59, 90, 184, 190, 169, 183, 120, 62, 113, 236, 191, 190, 204, 73, 63, 191, 24, 231, 243, 61, 250, 41, 216, 60, 10, 114, 36, 190, 2, 105, 52, 189, 104, 147, 116, 62, 70, 136, 229, 190, 126, 113, 69, 62, 242, 45, 39, 62, 9, 178, 242, 189, 167, 213, 166, 60, 228, 119, 212, 60, 38, 189, 7, 190, 16, 144, 106, 189, 99, 58, 156, 190, 115, 12, 105, 189, 73, 1, 178, 61, 169, 97, 35, 62, 103, 7, 224, 61, 167, 140, 60, 62, 117, 201, 90, 62, 81, 71, 17, 190, 14, 100, 73, 62, 246, 167, 127, 190, 192, 1, 217, 61, 80, 50, 195, 190, 229, 195, 171, 190, 121, 136, 6, 191, 88, 192, 146, 61, 25, 245, 209, 61, 167, 205, 167, 190, 253, 147, 125, 62, 143, 191, 86, 62, 93, 244, 58, 61, 200, 125, 201, 189, 181, 38, 222, 189, 166, 33, 139, 61, 198, 138, 155, 188, 218, 9, 173, 61, 28, 54, 94, 62, 17, 77, 143, 61, 239, 135, 199, 61, 116, 181, 122, 190, 63, 250, 21, 191, 203, 144, 210, 60, 231, 30, 25, 190, 73, 58, 125, 189, 124, 185, 86, 62, 65, 72, 167, 61, 106, 171, 44, 189, 100, 103, 35, 62, 23, 92, 4, 190, 223, 209, 59, 190, 204, 40, 207, 189, 188, 102, 140, 190, 92, 107, 102, 190, 61, 187, 165, 190, 158, 182, 125, 62, 160, 8, 9, 190, 18, 6, 193, 62, 64, 244, 126, 190, 13, 107, 82, 190, 170, 119, 82, 60, 115, 79, 11, 61, 13, 192, 83, 189, 240, 46, 87, 62, 203, 63, 134, 60, 234, 18, 13, 62, 245, 242, 124, 61, 114, 181, 241, 61, 242, 122, 151, 189, 37, 82, 193, 62, 250, 141, 152, 189, 117, 57, 240, 61, 119, 187, 125, 61, 102, 137, 176, 189, 160, 248, 4, 62, 103, 22, 37, 190, 57, 196, 176, 189, 101, 56, 34, 61, 210, 241, 219, 61, 168, 162, 197, 61, 148, 114, 79, 62, 113, 156, 31, 189, 248, 92, 26, 59, 177, 92, 73, 62, 95, 241, 117, 62, 220, 230, 56, 190, 143, 211, 116, 61, 179, 196, 173, 59, 157, 8, 149, 190, 88, 43, 8, 61, 200, 7, 140, 60, 121, 104, 161, 61, 83, 157, 147, 61, 5, 85, 111, 61, 238, 89, 145, 189, 235, 54, 43, 62, 162, 173, 115, 189, 169, 251, 129, 189, 245, 242, 4, 61, 97, 194, 96, 188, 218, 147, 31, 189, 179, 158, 12, 63, 203, 217, 159, 62, 228, 66, 62, 189, 220, 133, 221, 61, 39, 15, 237, 190, 139, 5, 20, 189, 153, 80, 214, 189, 96, 105, 69, 62, 158, 108, 1, 62, 252, 233, 1, 62, 239, 72, 90, 186, 143, 155, 60, 62, 30, 206, 43, 62, 149, 48, 88, 190, 63, 104, 179, 189, 79, 131, 107, 62, 254, 151, 66, 189, 61, 208, 155, 60, 127, 96, 176, 62, 95, 52, 21, 190, 214, 55, 150, 61, 33, 147, 144, 190, 161, 35, 212, 189, 170, 120, 118, 60, 0, 46, 125, 61, 133, 200, 62, 60, 124, 87, 112, 62, 118, 16, 153, 190, 174, 63, 112, 190, 103, 15, 2, 62, 245, 216, 48, 190, 199, 230, 196, 60, 146, 249, 200, 61, 237, 153, 208, 61, 201, 169, 241, 189, 140, 126, 112, 61, 111, 76, 219, 188, 71, 171, 108, 189, 124, 141, 72, 62, 194, 75, 231, 62, 245, 235, 71, 62, 98, 202, 19, 61, 193, 113, 82, 61, 206, 110, 115, 62, 198, 72, 151, 188, 46, 44, 178, 190, 60, 54, 3, 62, 15, 201, 8, 62, 32, 5, 65, 61, 87, 234, 81, 190, 52, 64, 8, 62, 200, 219, 211, 188, 101, 7, 85, 189, 37, 155, 205, 190, 146, 145, 142, 190, 239, 30, 110, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 200, 25, 190, 239, 252, 173, 189, 182, 196, 217, 188, 59, 5, 0, 61, 62, 96, 14, 190, 177, 63, 115, 189, 9, 210, 133, 61, 7, 156, 90, 60, 137, 95, 47, 62, 31, 113, 59, 190, 28, 87, 235, 189, 22, 4, 91, 62, 154, 80, 246, 61, 80, 158, 31, 62, 5, 136, 207, 188, 0, 207, 208, 188, 173, 204, 78, 62, 126, 176, 194, 62, 213, 30, 110, 62, 223, 150, 22, 189, 131, 34, 207, 190, 109, 106, 143, 62, 101, 16, 12, 190, 136, 227, 76, 62, 92, 158, 253, 61, 164, 106, 45, 61, 224, 229, 137, 62, 247, 182, 140, 62, 165, 83, 193, 61, 220, 34, 225, 61, 116, 127, 179, 62, 13, 218, 160, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 122, 187, 61, 4, 65, 152, 190, 251, 100, 28, 63, 105, 219, 20, 191, 83, 202, 213, 62, 151, 141, 48, 190, 47, 239, 151, 62, 159, 114, 170, 190, 239, 33, 61, 62, 212, 143, 160, 61, 142, 115, 34, 190, 156, 151, 133, 63, 177, 44, 234, 190, 112, 11, 181, 62, 196, 237, 163, 190, 134, 71, 170, 189, 135, 48, 178, 188, 115, 3, 61, 63, 151, 38, 170, 63, 32, 201, 15, 63, 46, 154, 105, 190, 168, 229, 62, 191, 27, 17, 225, 62, 232, 157, 31, 63, 24, 145, 158, 62, 209, 219, 221, 190, 242, 100, 19, 191, 212, 21, 173, 62, 95, 17, 105, 62, 161, 77, 214, 60, 172, 239, 151, 188, 214, 177, 67, 190, 32, 241, 225, 189, 136, 95, 22, 190, 148, 253, 93, 62, 150, 173, 144, 62, 15, 138, 224, 189, 32, 44, 53, 61, 96, 103, 140, 62, 116, 5, 203, 61, 63, 144, 66, 190, 176, 168, 228, 60, 251, 42, 166, 188, 64, 115, 143, 61, 252, 166, 130, 189, 60, 161, 41, 190, 227, 31, 12, 190, 153, 212, 249, 188, 121, 243, 213, 190, 169, 116, 164, 60, 113, 227, 65, 61, 44, 236, 0, 62, 242, 107, 59, 62, 170, 251, 193, 61, 236, 230, 183, 62, 210, 167, 99, 61, 229, 121, 240, 60, 145, 175, 143, 61, 102, 180, 173, 61, 159, 54, 198, 189, 176, 127, 32, 62, 231, 187, 69, 190, 22, 237, 198, 190, 87, 32, 56, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 223, 112, 59, 49, 170, 4, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {227, 130, 1, 63, 3, 22, 112, 63, 127, 23, 22, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {178, 187, 44, 192, 254, 84, 30, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0016/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}