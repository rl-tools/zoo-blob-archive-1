// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 41, 104, 190, 160, 144, 219, 62, 118, 71, 91, 188, 216, 53, 28, 191, 162, 67, 124, 62, 208, 56, 51, 63, 167, 85, 3, 190, 248, 161, 169, 63, 213, 191, 188, 62, 150, 209, 12, 63, 62, 89, 156, 191, 140, 112, 127, 190, 255, 205, 242, 190, 109, 66, 237, 62, 87, 87, 1, 62, 11, 112, 130, 190, 41, 211, 220, 191, 80, 222, 139, 190, 184, 144, 192, 62, 28, 19, 150, 190, 87, 188, 68, 190, 50, 180, 8, 191, 199, 12, 248, 62, 73, 54, 200, 190, 120, 126, 100, 62, 0, 70, 143, 191, 41, 35, 146, 190, 114, 26, 212, 62, 175, 39, 156, 62, 225, 144, 200, 190, 109, 209, 174, 190, 111, 166, 8, 191, 24, 207, 30, 63, 182, 240, 6, 63, 223, 17, 212, 61, 188, 62, 3, 191, 177, 220, 184, 62, 205, 85, 174, 190, 195, 94, 177, 62, 248, 238, 113, 61, 16, 107, 28, 63, 180, 21, 204, 190, 128, 230, 132, 189, 92, 168, 137, 62, 240, 216, 97, 60, 245, 251, 35, 63, 137, 24, 189, 63, 59, 74, 207, 62, 91, 192, 196, 190, 113, 205, 132, 190, 241, 191, 105, 190, 181, 149, 124, 63, 184, 0, 80, 63, 155, 224, 33, 62, 118, 155, 6, 63, 34, 205, 159, 190, 153, 5, 84, 186, 94, 218, 22, 190, 185, 61, 220, 191, 247, 219, 176, 190, 63, 86, 180, 190, 243, 67, 41, 191, 150, 38, 134, 188, 37, 61, 18, 63, 199, 197, 75, 191, 229, 228, 226, 190, 76, 70, 70, 190, 153, 48, 162, 63, 35, 160, 130, 62, 64, 11, 91, 62, 123, 30, 54, 63, 143, 183, 137, 190, 58, 69, 65, 190, 73, 104, 87, 62, 242, 75, 237, 190, 73, 184, 63, 62, 177, 17, 135, 191, 215, 236, 70, 190, 1, 11, 118, 190, 159, 51, 145, 191, 172, 126, 128, 62, 114, 146, 34, 190, 209, 39, 180, 63, 155, 64, 114, 62, 43, 167, 197, 190, 41, 196, 194, 190, 93, 41, 210, 190, 163, 35, 56, 189, 231, 239, 88, 63, 59, 35, 172, 190, 115, 250, 76, 63, 114, 211, 42, 191, 171, 112, 37, 190, 130, 101, 83, 63, 229, 184, 175, 62, 140, 225, 21, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 102, 25, 191, 1, 121, 5, 189, 40, 168, 129, 62, 46, 216, 169, 62, 47, 94, 250, 62, 92, 65, 175, 190, 67, 106, 113, 191, 66, 222, 167, 190, 237, 81, 84, 190, 229, 56, 106, 190, 158, 252, 191, 190, 153, 202, 109, 190, 48, 253, 51, 63, 19, 150, 18, 189, 145, 151, 198, 190, 154, 0, 31, 190, 185, 121, 48, 190, 97, 135, 116, 62, 41, 148, 229, 62, 106, 196, 142, 190, 167, 144, 206, 62, 80, 213, 255, 189, 174, 30, 204, 62, 57, 120, 53, 62, 51, 177, 48, 191, 240, 203, 214, 61, 147, 221, 38, 63, 163, 195, 96, 62, 162, 204, 147, 62, 192, 108, 59, 62, 173, 90, 205, 190, 155, 138, 45, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 30, 42, 62, 102, 22, 130, 61, 154, 246, 141, 190, 50, 71, 139, 62, 12, 140, 152, 190, 224, 35, 22, 189, 165, 196, 255, 60, 84, 114, 27, 61, 220, 237, 21, 61, 38, 120, 189, 61, 208, 190, 100, 189, 223, 42, 12, 62, 167, 151, 224, 62, 253, 112, 34, 62, 29, 143, 147, 61, 206, 202, 228, 190, 39, 58, 21, 189, 143, 229, 183, 190, 122, 199, 53, 61, 14, 237, 96, 188, 105, 56, 135, 62, 48, 213, 155, 61, 109, 23, 126, 191, 65, 201, 165, 189, 46, 54, 75, 62, 233, 105, 43, 63, 126, 16, 23, 63, 192, 177, 165, 191, 12, 227, 43, 188, 132, 240, 170, 59, 5, 228, 106, 62, 43, 23, 178, 190, 191, 154, 168, 61, 76, 236, 48, 190, 152, 244, 72, 61, 232, 223, 60, 188, 58, 77, 226, 60, 137, 105, 150, 188, 193, 193, 133, 61, 161, 45, 195, 189, 218, 130, 209, 189, 151, 108, 3, 190, 144, 217, 187, 189, 234, 55, 33, 190, 139, 72, 157, 61, 51, 194, 13, 190, 173, 89, 123, 189, 184, 84, 91, 189, 98, 158, 38, 188, 158, 36, 100, 189, 178, 45, 126, 61, 34, 108, 163, 189, 48, 111, 14, 190, 207, 27, 195, 189, 106, 192, 199, 189, 2, 61, 72, 189, 167, 151, 13, 62, 222, 75, 80, 61, 157, 161, 244, 189, 172, 107, 21, 59, 149, 5, 123, 61, 246, 250, 253, 60, 183, 72, 75, 190, 170, 104, 30, 189, 219, 146, 188, 60, 78, 15, 104, 189, 178, 159, 87, 62, 32, 58, 205, 188, 47, 209, 129, 62, 142, 167, 211, 191, 66, 217, 71, 187, 207, 9, 127, 189, 61, 178, 129, 60, 16, 146, 156, 190, 220, 85, 134, 190, 158, 222, 31, 190, 26, 41, 121, 190, 99, 204, 146, 188, 38, 49, 88, 189, 89, 121, 8, 62, 66, 104, 252, 60, 128, 243, 109, 190, 147, 215, 79, 191, 110, 163, 174, 191, 108, 181, 6, 190, 125, 230, 94, 190, 15, 113, 139, 62, 248, 155, 39, 61, 170, 138, 21, 191, 72, 229, 237, 190, 19, 153, 213, 190, 135, 0, 194, 62, 117, 178, 132, 61, 99, 18, 165, 62, 175, 243, 48, 190, 124, 93, 253, 57, 70, 253, 48, 62, 126, 187, 74, 62, 193, 123, 177, 61, 82, 73, 10, 62, 94, 135, 137, 188, 82, 247, 64, 62, 245, 120, 239, 62, 230, 130, 42, 61, 33, 170, 247, 62, 115, 37, 117, 190, 174, 82, 93, 62, 255, 78, 12, 62, 170, 4, 81, 190, 33, 111, 34, 61, 167, 129, 137, 61, 139, 92, 83, 190, 231, 25, 19, 190, 127, 189, 121, 189, 58, 136, 127, 62, 17, 167, 29, 63, 22, 128, 3, 62, 169, 185, 204, 62, 100, 108, 75, 190, 159, 31, 0, 191, 113, 22, 168, 189, 45, 96, 162, 61, 231, 58, 141, 62, 70, 246, 66, 190, 241, 236, 132, 62, 17, 39, 248, 190, 108, 96, 198, 61, 215, 51, 14, 62, 152, 161, 157, 61, 205, 19, 81, 61, 94, 54, 23, 190, 59, 214, 128, 61, 75, 98, 71, 62, 85, 109, 143, 191, 15, 136, 251, 190, 136, 33, 247, 190, 183, 33, 17, 190, 15, 199, 29, 62, 114, 219, 10, 62, 128, 111, 161, 62, 249, 79, 195, 61, 111, 1, 97, 189, 179, 39, 17, 190, 31, 182, 178, 189, 117, 200, 21, 190, 68, 151, 127, 189, 188, 220, 9, 189, 251, 52, 73, 191, 111, 24, 10, 190, 99, 168, 126, 62, 214, 124, 155, 61, 18, 80, 128, 189, 149, 237, 232, 190, 228, 123, 76, 62, 83, 141, 131, 62, 77, 95, 80, 189, 95, 143, 175, 190, 18, 122, 218, 61, 100, 40, 165, 62, 82, 105, 213, 58, 176, 131, 235, 61, 154, 12, 4, 62, 55, 186, 158, 190, 209, 227, 97, 62, 237, 86, 35, 191, 221, 255, 210, 189, 91, 126, 52, 190, 124, 144, 40, 62, 75, 204, 0, 60, 36, 157, 45, 62, 152, 50, 158, 61, 230, 184, 90, 62, 43, 106, 126, 62, 227, 198, 69, 62, 51, 206, 191, 186, 224, 236, 2, 61, 162, 87, 32, 190, 9, 87, 98, 190, 73, 170, 53, 62, 26, 64, 227, 189, 175, 78, 20, 190, 224, 175, 145, 61, 30, 5, 93, 191, 195, 153, 201, 189, 196, 115, 130, 189, 65, 238, 20, 62, 249, 40, 164, 61, 2, 160, 160, 191, 58, 233, 168, 188, 202, 137, 68, 62, 150, 187, 8, 60, 197, 76, 120, 60, 146, 184, 130, 61, 53, 109, 171, 188, 30, 127, 46, 190, 5, 5, 202, 189, 153, 222, 144, 190, 39, 17, 186, 62, 190, 252, 162, 190, 110, 191, 146, 61, 106, 230, 140, 189, 10, 236, 63, 62, 140, 179, 61, 189, 84, 33, 30, 190, 191, 150, 179, 189, 136, 245, 32, 62, 198, 111, 19, 62, 122, 70, 242, 61, 214, 94, 3, 190, 134, 93, 166, 62, 128, 194, 30, 62, 211, 32, 229, 60, 142, 112, 163, 189, 230, 48, 117, 190, 132, 208, 63, 62, 231, 18, 47, 62, 226, 99, 98, 61, 234, 177, 50, 191, 35, 1, 40, 191, 199, 246, 248, 61, 93, 85, 218, 61, 102, 146, 36, 62, 240, 29, 177, 190, 100, 240, 218, 61, 174, 221, 166, 61, 139, 79, 174, 189, 144, 198, 242, 61, 187, 145, 205, 190, 248, 197, 227, 61, 134, 163, 176, 61, 162, 144, 59, 191, 213, 176, 231, 189, 203, 210, 48, 191, 105, 196, 59, 189, 69, 200, 2, 190, 109, 166, 10, 190, 226, 192, 202, 61, 65, 29, 60, 62, 123, 144, 45, 190, 56, 249, 107, 62, 143, 164, 167, 61, 43, 150, 39, 63, 205, 91, 15, 62, 29, 5, 133, 190, 73, 147, 201, 60, 138, 228, 56, 190, 216, 196, 192, 62, 210, 40, 109, 62, 206, 235, 73, 61, 236, 44, 53, 191, 149, 134, 120, 189, 191, 242, 61, 62, 164, 28, 200, 188, 138, 50, 104, 62, 102, 206, 76, 190, 218, 115, 134, 62, 238, 100, 248, 189, 102, 139, 45, 191, 223, 5, 182, 190, 28, 197, 71, 191, 161, 112, 150, 62, 252, 141, 233, 61, 14, 25, 163, 190, 142, 134, 168, 189, 77, 152, 248, 190, 104, 74, 230, 189, 37, 30, 109, 191, 52, 9, 89, 190, 208, 223, 136, 190, 106, 34, 52, 189, 72, 115, 146, 189, 61, 195, 236, 190, 211, 105, 238, 61, 108, 104, 177, 190, 118, 43, 242, 190, 242, 74, 167, 187, 53, 79, 70, 62, 148, 218, 178, 190, 49, 166, 203, 61, 245, 217, 189, 188, 176, 89, 191, 188, 28, 110, 137, 191, 73, 255, 209, 61, 158, 94, 149, 190, 101, 105, 150, 62, 109, 241, 175, 61, 92, 203, 49, 62, 70, 49, 205, 190, 209, 224, 234, 189, 116, 0, 58, 62, 184, 157, 152, 189, 33, 82, 153, 62, 22, 74, 238, 189, 203, 39, 205, 190, 40, 69, 145, 62, 41, 203, 196, 61, 248, 111, 28, 61, 8, 219, 46, 190, 83, 29, 206, 60, 40, 82, 57, 62, 38, 175, 56, 61, 170, 178, 61, 190, 246, 174, 20, 189, 51, 184, 178, 190, 0, 245, 219, 60, 254, 33, 19, 191, 105, 169, 83, 62, 95, 141, 163, 190, 93, 86, 164, 61, 219, 40, 65, 62, 46, 175, 85, 190, 69, 143, 94, 189, 153, 183, 213, 190, 168, 239, 114, 62, 241, 9, 128, 62, 181, 63, 69, 190, 94, 174, 45, 60, 92, 18, 179, 61, 148, 155, 235, 62, 32, 136, 50, 190, 39, 77, 9, 61, 90, 176, 123, 189, 33, 50, 240, 188, 167, 177, 26, 190, 94, 57, 49, 190, 72, 162, 118, 189, 24, 82, 180, 189, 152, 77, 138, 60, 234, 18, 10, 61, 227, 221, 6, 62, 68, 241, 188, 189, 99, 71, 216, 61, 31, 132, 124, 61, 157, 218, 12, 190, 87, 191, 17, 189, 125, 205, 35, 62, 10, 248, 185, 61, 18, 36, 34, 190, 36, 62, 254, 189, 13, 240, 100, 189, 124, 71, 3, 62, 21, 86, 35, 190, 195, 82, 135, 189, 207, 35, 144, 61, 166, 114, 65, 190, 40, 78, 79, 189, 48, 52, 191, 189, 190, 199, 112, 189, 185, 157, 208, 189, 32, 43, 35, 62, 44, 173, 217, 189, 255, 255, 206, 185, 144, 63, 215, 61, 117, 122, 52, 190, 114, 237, 28, 62, 80, 79, 246, 189, 176, 121, 40, 62, 183, 53, 117, 187, 34, 139, 99, 191, 88, 251, 185, 189, 22, 230, 8, 191, 115, 13, 28, 189, 160, 19, 158, 187, 191, 154, 198, 60, 212, 84, 218, 61, 99, 146, 67, 188, 207, 105, 22, 61, 211, 146, 188, 62, 79, 95, 183, 189, 18, 129, 14, 63, 101, 240, 204, 189, 167, 200, 133, 190, 193, 34, 60, 190, 65, 190, 25, 190, 95, 77, 156, 62, 28, 0, 45, 61, 173, 10, 112, 62, 176, 139, 50, 191, 189, 168, 119, 187, 156, 4, 140, 189, 221, 9, 134, 189, 134, 85, 169, 62, 117, 172, 13, 191, 214, 35, 151, 62, 194, 44, 204, 188, 51, 34, 140, 61, 14, 27, 198, 189, 85, 178, 254, 189, 67, 15, 237, 60, 226, 172, 4, 190, 248, 12, 156, 189, 28, 104, 135, 189, 86, 16, 31, 187, 95, 28, 9, 190, 13, 143, 54, 189, 87, 22, 187, 61, 41, 47, 18, 190, 190, 79, 247, 189, 66, 68, 52, 190, 118, 68, 32, 62, 18, 182, 59, 61, 47, 193, 38, 190, 32, 12, 207, 189, 172, 217, 12, 61, 183, 52, 231, 189, 250, 55, 245, 61, 222, 115, 233, 188, 165, 32, 215, 61, 78, 36, 37, 62, 248, 57, 22, 62, 72, 3, 242, 186, 245, 1, 164, 61, 190, 69, 44, 189, 146, 79, 2, 190, 23, 41, 34, 190, 39, 118, 143, 187, 24, 180, 37, 190, 88, 8, 49, 190, 48, 15, 37, 190, 217, 246, 34, 59, 216, 65, 164, 61, 45, 68, 233, 189, 248, 230, 51, 61, 202, 210, 115, 189, 239, 55, 39, 190, 225, 247, 9, 190, 87, 170, 159, 61, 129, 29, 118, 60, 138, 37, 24, 190, 182, 6, 139, 61, 180, 156, 4, 61, 227, 15, 110, 60, 190, 147, 69, 190, 192, 33, 86, 188, 205, 61, 210, 61, 8, 15, 1, 62, 100, 110, 213, 189, 45, 126, 36, 190, 233, 225, 203, 60, 165, 42, 51, 60, 217, 239, 254, 60, 5, 21, 119, 61, 227, 254, 22, 190, 129, 255, 148, 189, 202, 111, 198, 61, 87, 32, 141, 60, 125, 27, 160, 189, 177, 22, 3, 190, 197, 63, 112, 61, 208, 121, 230, 61, 84, 161, 119, 62, 74, 107, 107, 191, 56, 224, 157, 62, 196, 139, 243, 191, 162, 14, 186, 189, 164, 202, 140, 189, 220, 239, 181, 61, 76, 48, 104, 190, 141, 150, 195, 60, 224, 21, 39, 62, 183, 236, 10, 190, 226, 19, 156, 61, 115, 149, 46, 62, 136, 114, 147, 189, 16, 116, 29, 62, 69, 135, 52, 191, 138, 106, 242, 190, 56, 122, 208, 191, 6, 33, 142, 189, 240, 152, 35, 190, 209, 174, 110, 62, 175, 75, 88, 62, 56, 87, 128, 61, 117, 173, 181, 190, 69, 114, 18, 62, 198, 7, 206, 62, 142, 234, 120, 189, 86, 71, 190, 61, 147, 238, 68, 190, 37, 54, 235, 189, 166, 225, 18, 190, 183, 199, 204, 61, 171, 67, 55, 62, 210, 121, 56, 191, 192, 157, 99, 62, 9, 93, 218, 191, 117, 5, 149, 61, 244, 10, 122, 62, 18, 22, 48, 190, 47, 104, 49, 191, 197, 40, 73, 61, 138, 157, 195, 190, 46, 26, 146, 190, 62, 0, 153, 61, 140, 19, 210, 61, 20, 1, 167, 189, 220, 50, 236, 61, 24, 87, 225, 190, 238, 60, 189, 190, 59, 239, 154, 191, 11, 102, 57, 62, 189, 123, 13, 191, 38, 155, 106, 62, 113, 17, 27, 186, 149, 127, 209, 190, 220, 240, 0, 190, 60, 236, 83, 189, 41, 159, 209, 62, 108, 75, 203, 190, 38, 211, 218, 62, 202, 103, 78, 61, 79, 45, 95, 190, 249, 67, 90, 60, 93, 69, 142, 189, 29, 234, 3, 61, 85, 56, 79, 62, 127, 154, 33, 62, 6, 110, 46, 190, 125, 253, 130, 190, 207, 16, 131, 188, 14, 232, 56, 61, 19, 85, 151, 61, 13, 40, 239, 61, 245, 229, 161, 61, 78, 202, 74, 189, 201, 190, 75, 190, 42, 15, 113, 60, 11, 254, 78, 189, 12, 213, 231, 188, 21, 210, 127, 190, 240, 111, 230, 61, 67, 108, 177, 190, 81, 17, 39, 190, 200, 113, 56, 62, 6, 35, 120, 62, 86, 206, 79, 61, 40, 230, 92, 190, 40, 91, 30, 60, 150, 16, 71, 62, 171, 74, 245, 61, 254, 213, 193, 61, 43, 192, 89, 62, 222, 193, 78, 190, 78, 23, 42, 190, 66, 248, 184, 189, 251, 1, 21, 191, 167, 73, 12, 190, 248, 204, 46, 190, 38, 83, 189, 60, 161, 62, 197, 62, 247, 85, 248, 190, 147, 177, 160, 189, 232, 139, 99, 190, 19, 123, 129, 61, 138, 23, 40, 191, 236, 114, 199, 189, 245, 14, 173, 187, 137, 88, 31, 189, 8, 228, 160, 61, 108, 110, 241, 188, 46, 32, 9, 62, 61, 24, 249, 62, 187, 249, 181, 61, 223, 49, 195, 62, 136, 160, 88, 188, 121, 147, 163, 190, 181, 208, 102, 62, 106, 162, 205, 61, 68, 247, 172, 189, 76, 32, 188, 190, 184, 152, 253, 61, 168, 84, 184, 62, 177, 138, 98, 62, 82, 230, 203, 188, 178, 67, 162, 190, 214, 249, 178, 61, 154, 3, 233, 189, 140, 197, 136, 62, 229, 6, 173, 61, 31, 195, 231, 188, 126, 246, 169, 189, 49, 217, 125, 62, 237, 109, 151, 62, 134, 114, 134, 190, 232, 74, 142, 62, 165, 224, 249, 189, 224, 174, 66, 60, 185, 149, 33, 188, 60, 85, 177, 188, 3, 210, 216, 189, 212, 104, 11, 62, 123, 160, 93, 190, 49, 230, 143, 187, 47, 55, 20, 192, 217, 145, 9, 190, 40, 148, 150, 61, 77, 35, 144, 62, 181, 227, 169, 188, 87, 217, 159, 62, 89, 16, 99, 189, 16, 239, 65, 190, 193, 163, 192, 62, 169, 88, 179, 62, 89, 19, 106, 191, 81, 202, 139, 186, 32, 201, 98, 61, 118, 93, 104, 190, 114, 212, 192, 191, 161, 232, 118, 61, 76, 50, 96, 188, 157, 246, 54, 190, 217, 28, 231, 62, 223, 164, 164, 62, 254, 83, 63, 191, 88, 229, 190, 61, 174, 208, 190, 60, 184, 16, 108, 189, 31, 213, 197, 61, 215, 229, 13, 62, 38, 94, 244, 62, 102, 161, 193, 188, 225, 185, 197, 189, 204, 163, 39, 189, 133, 204, 3, 191, 228, 217, 251, 190, 58, 179, 31, 191, 120, 70, 132, 62, 130, 5, 223, 190, 186, 200, 117, 62, 37, 146, 132, 62, 154, 254, 66, 190, 217, 21, 214, 189, 58, 58, 78, 191, 39, 4, 27, 63, 57, 138, 70, 62, 202, 252, 62, 190, 222, 144, 89, 190, 20, 149, 76, 61, 206, 199, 159, 62, 162, 182, 52, 190, 35, 46, 144, 189, 188, 215, 111, 61, 181, 129, 229, 61, 34, 217, 3, 61, 154, 30, 131, 61, 61, 184, 176, 191, 15, 91, 179, 60, 195, 174, 147, 189, 155, 151, 22, 62, 94, 66, 36, 189, 62, 151, 128, 61, 223, 131, 12, 190, 123, 123, 132, 190, 67, 223, 24, 62, 63, 45, 27, 62, 208, 94, 191, 61, 187, 158, 144, 61, 223, 49, 16, 190, 110, 119, 133, 190, 13, 199, 173, 191, 126, 239, 234, 189, 133, 221, 184, 190, 230, 186, 12, 62, 53, 57, 115, 62, 198, 80, 101, 190, 131, 58, 70, 62, 192, 229, 198, 60, 211, 206, 240, 62, 238, 137, 8, 190, 133, 239, 140, 62, 142, 98, 14, 191, 151, 28, 116, 188, 144, 14, 36, 62, 83, 32, 181, 190, 217, 212, 184, 190, 29, 192, 48, 189, 148, 149, 190, 190, 51, 175, 253, 62, 176, 187, 128, 62, 21, 214, 129, 190, 165, 230, 184, 62, 22, 46, 50, 190, 4, 141, 89, 189, 78, 1, 91, 190, 159, 186, 56, 62, 167, 163, 100, 190, 97, 154, 236, 61, 49, 119, 84, 62, 116, 78, 221, 61, 198, 204, 14, 62, 65, 8, 237, 60, 185, 148, 27, 63, 176, 44, 107, 61, 254, 142, 62, 62, 140, 165, 221, 188, 63, 69, 37, 189, 47, 173, 27, 61, 159, 34, 238, 61, 204, 193, 88, 62, 16, 132, 103, 191, 118, 240, 66, 62, 238, 236, 95, 190, 41, 70, 33, 62, 76, 162, 124, 62, 144, 21, 219, 61, 90, 72, 129, 191, 154, 127, 31, 191, 195, 54, 78, 190, 238, 97, 96, 189, 14, 46, 96, 190, 143, 20, 50, 191, 223, 139, 129, 189, 26, 246, 3, 191, 27, 175, 19, 62, 79, 191, 80, 191, 130, 251, 227, 189, 193, 91, 179, 189, 58, 114, 131, 62, 158, 106, 24, 190, 202, 121, 197, 61, 200, 204, 124, 61, 132, 206, 226, 62, 107, 135, 136, 62, 169, 193, 242, 190, 30, 190, 14, 190, 24, 92, 140, 190, 10, 3, 147, 62, 5, 243, 52, 62, 111, 207, 104, 189, 124, 132, 125, 191, 56, 79, 18, 191, 120, 117, 1, 62, 254, 16, 8, 61, 18, 52, 95, 62, 228, 91, 184, 190, 210, 185, 186, 189, 157, 21, 194, 189, 41, 186, 192, 188, 231, 148, 56, 62, 233, 31, 29, 62, 22, 52, 4, 62, 209, 197, 95, 191, 188, 171, 1, 62, 102, 177, 184, 61, 99, 41, 139, 190, 57, 63, 32, 191, 129, 204, 9, 189, 138, 108, 101, 191, 99, 26, 41, 61, 143, 134, 103, 190, 201, 222, 103, 189, 243, 66, 175, 60, 21, 237, 195, 62, 148, 83, 127, 189, 109, 112, 222, 189, 29, 213, 22, 191, 212, 185, 7, 62, 24, 97, 252, 190, 230, 146, 72, 61, 198, 172, 85, 190, 156, 92, 13, 61, 115, 206, 193, 62, 20, 78, 134, 61, 194, 6, 188, 62, 199, 121, 196, 61, 189, 161, 211, 62, 220, 53, 96, 190, 62, 95, 148, 61, 142, 183, 142, 188, 19, 2, 132, 190, 77, 151, 101, 190, 90, 250, 132, 62, 184, 33, 23, 191, 165, 167, 246, 190, 71, 43, 178, 190, 85, 123, 182, 190, 233, 2, 188, 190, 238, 124, 98, 190, 202, 37, 181, 190, 129, 228, 7, 190, 117, 17, 138, 62, 175, 108, 165, 190, 137, 4, 216, 61, 177, 180, 149, 189, 96, 10, 93, 189, 190, 231, 218, 61, 178, 22, 167, 62, 227, 237, 241, 191, 239, 220, 8, 191, 245, 233, 202, 188, 33, 220, 204, 190, 63, 196, 164, 189, 169, 168, 25, 61, 78, 39, 141, 189, 201, 16, 109, 62, 51, 250, 202, 191, 78, 52, 210, 60, 83, 228, 189, 190, 3, 61, 163, 59, 246, 63, 11, 62, 238, 65, 13, 190, 43, 212, 54, 189, 103, 92, 151, 189, 129, 197, 99, 62, 19, 16, 12, 62, 235, 88, 219, 189, 88, 141, 228, 190, 203, 150, 17, 189, 112, 151, 24, 190, 230, 128, 46, 62, 204, 163, 76, 60, 159, 7, 133, 60, 190, 209, 5, 61, 120, 5, 169, 60, 55, 104, 39, 190, 53, 40, 14, 62, 99, 95, 141, 190, 78, 49, 237, 60, 171, 133, 209, 62, 217, 3, 205, 189, 252, 128, 164, 61, 218, 69, 83, 62, 143, 101, 175, 62, 26, 142, 186, 58, 229, 37, 84, 190, 69, 164, 49, 190, 48, 18, 81, 62, 143, 133, 164, 60, 11, 55, 92, 188, 182, 95, 146, 189, 29, 33, 226, 61, 132, 184, 231, 189, 190, 217, 22, 62, 82, 27, 39, 62, 170, 127, 212, 61, 247, 63, 44, 62, 80, 45, 144, 61, 189, 1, 206, 190, 196, 255, 94, 190, 58, 82, 80, 189, 45, 101, 20, 189, 32, 79, 77, 61, 15, 93, 243, 188, 82, 246, 18, 62, 51, 76, 47, 190, 232, 44, 126, 61, 8, 81, 23, 62, 164, 242, 110, 190, 150, 61, 242, 189, 234, 3, 213, 190, 157, 12, 71, 62, 29, 20, 253, 190, 35, 230, 1, 62, 201, 63, 32, 60, 7, 240, 170, 189, 54, 234, 130, 62, 97, 33, 163, 61, 189, 249, 147, 62, 23, 73, 105, 62, 63, 114, 172, 60, 33, 6, 6, 62, 245, 165, 207, 189, 121, 11, 138, 62, 137, 10, 27, 61, 38, 58, 65, 189, 156, 95, 202, 61, 51, 72, 84, 189, 82, 24, 102, 189, 63, 99, 179, 190, 182, 39, 110, 189, 234, 194, 33, 188, 141, 229, 138, 188, 155, 176, 160, 60, 167, 87, 222, 61, 93, 64, 97, 190, 19, 21, 65, 189, 103, 114, 15, 190, 198, 182, 216, 189, 8, 209, 224, 61, 84, 125, 193, 189, 115, 51, 69, 61, 154, 1, 38, 190, 54, 84, 5, 190, 189, 13, 221, 189, 206, 227, 123, 189, 70, 93, 235, 61, 53, 119, 169, 190, 106, 50, 108, 190, 246, 114, 150, 190, 106, 209, 227, 61, 251, 174, 87, 62, 33, 27, 41, 191, 16, 126, 133, 61, 1, 235, 208, 61, 229, 138, 230, 189, 27, 175, 170, 190, 95, 140, 187, 188, 125, 115, 14, 190, 121, 93, 38, 62, 103, 168, 164, 191, 209, 44, 206, 189, 141, 49, 115, 191, 129, 146, 188, 189, 42, 167, 134, 188, 162, 201, 61, 190, 36, 239, 102, 62, 4, 202, 16, 187, 4, 222, 28, 61, 124, 178, 76, 58, 135, 78, 47, 61, 94, 131, 38, 62, 48, 0, 180, 62, 126, 10, 22, 62, 226, 176, 3, 63, 71, 21, 79, 190, 231, 182, 63, 191, 84, 143, 128, 190, 97, 216, 0, 191, 58, 103, 22, 61, 243, 11, 201, 187, 40, 220, 208, 60, 77, 50, 43, 191, 7, 216, 142, 190, 51, 219, 130, 62, 150, 101, 194, 61, 175, 17, 90, 62, 242, 140, 169, 191, 59, 138, 177, 61, 252, 86, 122, 61, 173, 254, 165, 61, 222, 123, 138, 188, 25, 238, 229, 62, 203, 193, 130, 61, 216, 133, 11, 191, 132, 185, 81, 188, 89, 27, 163, 62, 111, 9, 28, 190, 126, 42, 185, 189, 210, 164, 192, 61, 129, 162, 91, 62, 215, 24, 33, 62, 143, 121, 15, 59, 67, 82, 254, 61, 87, 7, 152, 190, 201, 177, 156, 189, 171, 150, 77, 191, 83, 174, 90, 61, 163, 178, 11, 191, 1, 85, 190, 61, 106, 210, 133, 62, 68, 144, 32, 190, 129, 185, 29, 62, 46, 17, 189, 190, 139, 194, 34, 62, 145, 108, 129, 62, 101, 178, 206, 190, 151, 197, 179, 189, 252, 144, 72, 62, 0, 91, 216, 62, 14, 254, 140, 190, 44, 125, 71, 61, 199, 105, 130, 190, 121, 160, 195, 190, 32, 188, 212, 61, 40, 192, 64, 190, 140, 124, 172, 190, 138, 170, 96, 190, 182, 148, 2, 190, 77, 82, 116, 190, 70, 83, 85, 189, 73, 85, 23, 190, 34, 148, 164, 60, 69, 84, 26, 62, 214, 135, 238, 61, 93, 4, 34, 62, 167, 20, 150, 190, 214, 169, 145, 59, 144, 0, 230, 188, 209, 152, 43, 62, 90, 81, 68, 190, 113, 191, 55, 62, 151, 206, 64, 61, 12, 64, 92, 190, 146, 22, 154, 61, 97, 201, 116, 188, 39, 113, 208, 60, 250, 92, 219, 61, 8, 17, 24, 191, 244, 208, 38, 62, 198, 18, 24, 62, 149, 121, 94, 62, 201, 33, 38, 190, 221, 19, 33, 62, 2, 65, 148, 61, 40, 105, 208, 189, 62, 56, 136, 62, 128, 1, 229, 60, 141, 173, 242, 190, 203, 13, 65, 191, 115, 193, 173, 187, 148, 40, 15, 189, 74, 51, 47, 190, 71, 19, 10, 62, 190, 178, 7, 62, 173, 85, 5, 190, 124, 73, 231, 61, 106, 255, 220, 61, 117, 107, 169, 190, 27, 69, 228, 190, 126, 12, 130, 189, 28, 243, 18, 62, 39, 145, 162, 190, 9, 128, 199, 62, 83, 90, 24, 62, 25, 158, 84, 190, 19, 88, 221, 188, 221, 255, 232, 190, 250, 12, 235, 62, 12, 90, 90, 62, 137, 2, 254, 190, 1, 29, 102, 190, 254, 6, 173, 61, 67, 198, 95, 62, 134, 2, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 118, 253, 61, 38, 137, 223, 61, 2, 57, 16, 62, 52, 238, 133, 190, 203, 111, 126, 62, 226, 1, 36, 189, 72, 205, 168, 61, 230, 227, 25, 189, 120, 27, 161, 62, 203, 131, 72, 62, 163, 192, 179, 189, 62, 172, 21, 62, 156, 195, 27, 190, 80, 171, 162, 189, 234, 154, 100, 59, 231, 165, 45, 62, 247, 225, 147, 62, 56, 75, 190, 62, 129, 177, 175, 62, 77, 170, 176, 62, 243, 86, 244, 189, 97, 246, 138, 62, 215, 4, 54, 62, 155, 4, 68, 61, 146, 40, 190, 189, 135, 55, 142, 62, 89, 231, 122, 62, 167, 202, 195, 189, 212, 128, 173, 189, 155, 127, 157, 62, 228, 215, 91, 62, 39, 50, 132, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 232, 250, 62, 180, 198, 147, 61, 116, 94, 114, 63, 51, 106, 201, 190, 80, 246, 143, 62, 7, 31, 58, 62, 198, 12, 118, 190, 118, 9, 244, 190, 237, 244, 99, 191, 14, 96, 187, 62, 116, 103, 33, 190, 137, 65, 160, 190, 21, 202, 23, 61, 51, 198, 249, 189, 143, 15, 63, 63, 2, 55, 66, 63, 98, 192, 229, 60, 153, 107, 57, 191, 220, 129, 82, 62, 120, 56, 151, 63, 52, 185, 196, 62, 57, 189, 244, 190, 217, 145, 74, 191, 60, 30, 239, 61, 152, 185, 82, 189, 126, 15, 115, 189, 245, 218, 33, 61, 144, 102, 235, 61, 1, 20, 17, 63, 84, 96, 56, 63, 79, 97, 62, 59, 73, 165, 5, 63, 53, 191, 216, 61, 173, 243, 35, 61, 75, 168, 2, 190, 128, 100, 4, 62, 191, 0, 171, 190, 103, 155, 223, 190, 199, 156, 92, 190, 141, 98, 147, 61, 190, 212, 46, 62, 201, 180, 115, 187, 7, 46, 140, 188, 226, 86, 144, 188, 236, 28, 251, 61, 118, 184, 167, 189, 38, 186, 191, 61, 43, 170, 47, 62, 160, 131, 40, 190, 43, 245, 84, 62, 227, 109, 130, 190, 240, 218, 2, 190, 57, 19, 164, 188, 174, 29, 28, 190, 25, 1, 78, 59, 126, 173, 200, 190, 51, 246, 71, 191, 139, 161, 151, 190, 67, 55, 164, 190, 228, 77, 221, 59, 171, 133, 225, 189, 36, 46, 136, 190, 204, 199, 200, 190, 223, 119, 67, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 220, 67, 190, 174, 84, 93, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {243, 225, 129, 191, 15, 151, 14, 191, 30, 184, 138, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {236, 96, 51, 63, 123, 25, 130, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0024/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}