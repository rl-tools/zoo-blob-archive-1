// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 41, 104, 190, 160, 144, 219, 62, 118, 71, 91, 188, 173, 82, 251, 190, 118, 45, 113, 62, 54, 137, 49, 63, 143, 130, 162, 189, 170, 135, 149, 63, 89, 174, 211, 62, 163, 146, 28, 63, 107, 219, 141, 191, 210, 218, 124, 190, 9, 208, 237, 190, 26, 121, 209, 62, 103, 130, 231, 61, 48, 121, 133, 190, 122, 124, 192, 191, 139, 90, 182, 190, 231, 30, 225, 62, 39, 118, 181, 190, 233, 12, 128, 190, 4, 205, 192, 190, 106, 53, 216, 62, 210, 98, 224, 190, 146, 152, 168, 62, 51, 184, 132, 191, 216, 152, 138, 190, 80, 131, 40, 63, 11, 62, 128, 62, 177, 72, 238, 190, 153, 87, 76, 190, 64, 23, 196, 190, 37, 190, 49, 63, 222, 196, 0, 63, 100, 155, 27, 62, 45, 45, 6, 191, 199, 153, 239, 62, 19, 79, 160, 190, 119, 179, 227, 62, 117, 236, 193, 62, 129, 122, 19, 63, 120, 110, 228, 190, 128, 230, 132, 189, 92, 168, 137, 62, 240, 216, 97, 60, 202, 154, 48, 63, 185, 48, 174, 63, 11, 195, 197, 62, 239, 191, 155, 190, 177, 40, 103, 190, 52, 139, 122, 190, 196, 18, 110, 63, 82, 66, 73, 63, 70, 181, 33, 62, 179, 246, 10, 63, 48, 33, 185, 190, 183, 180, 131, 61, 145, 186, 38, 190, 153, 63, 197, 191, 102, 158, 186, 190, 205, 7, 206, 190, 231, 90, 34, 191, 59, 17, 101, 61, 246, 86, 30, 63, 253, 245, 58, 191, 74, 210, 226, 190, 249, 202, 107, 190, 66, 70, 139, 63, 98, 187, 113, 62, 145, 241, 135, 62, 67, 37, 34, 63, 166, 27, 171, 190, 206, 218, 164, 188, 137, 51, 218, 62, 55, 183, 2, 191, 51, 174, 116, 62, 82, 89, 111, 191, 53, 235, 60, 190, 153, 206, 26, 190, 108, 246, 122, 191, 216, 100, 146, 62, 211, 170, 170, 190, 131, 242, 158, 63, 68, 15, 87, 62, 184, 115, 2, 191, 82, 195, 186, 190, 123, 4, 216, 190, 160, 36, 207, 189, 184, 87, 68, 63, 3, 247, 179, 190, 144, 234, 82, 63, 16, 165, 22, 191, 7, 196, 100, 190, 202, 150, 73, 63, 104, 58, 127, 62, 110, 81, 30, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 102, 25, 191, 58, 200, 201, 189, 24, 127, 207, 62, 8, 191, 169, 62, 243, 239, 13, 63, 140, 173, 109, 190, 147, 39, 80, 191, 35, 124, 156, 190, 94, 150, 42, 190, 109, 55, 116, 189, 59, 125, 178, 190, 139, 92, 115, 190, 208, 189, 62, 63, 179, 10, 74, 62, 145, 151, 198, 190, 145, 67, 136, 189, 180, 201, 188, 189, 189, 24, 86, 62, 247, 146, 14, 63, 183, 93, 241, 189, 133, 15, 206, 62, 249, 121, 137, 189, 88, 238, 224, 62, 251, 7, 133, 62, 198, 246, 18, 191, 145, 238, 221, 61, 117, 50, 51, 63, 95, 241, 70, 62, 55, 32, 183, 62, 80, 242, 234, 61, 208, 235, 160, 190, 131, 216, 14, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 30, 42, 62, 129, 237, 0, 189, 120, 137, 73, 190, 184, 78, 151, 62, 42, 113, 51, 191, 118, 115, 11, 61, 179, 179, 174, 62, 205, 183, 14, 60, 206, 150, 181, 61, 242, 32, 222, 61, 10, 145, 31, 190, 198, 142, 41, 62, 135, 43, 215, 62, 239, 54, 30, 62, 29, 143, 147, 61, 90, 115, 189, 190, 177, 14, 212, 189, 118, 122, 143, 190, 185, 59, 137, 61, 60, 164, 157, 60, 211, 16, 217, 61, 151, 216, 9, 62, 6, 111, 86, 191, 249, 232, 209, 189, 76, 146, 66, 62, 143, 252, 45, 63, 26, 172, 8, 63, 243, 178, 101, 191, 112, 216, 139, 189, 44, 125, 62, 60, 21, 249, 145, 62, 32, 179, 168, 190, 191, 154, 168, 61, 76, 236, 48, 190, 152, 244, 72, 61, 232, 223, 60, 188, 58, 77, 226, 60, 137, 105, 150, 188, 193, 193, 133, 61, 161, 45, 195, 189, 218, 130, 209, 189, 151, 108, 3, 190, 144, 217, 187, 189, 234, 55, 33, 190, 139, 72, 157, 61, 51, 194, 13, 190, 173, 89, 123, 189, 184, 84, 91, 189, 98, 158, 38, 188, 158, 36, 100, 189, 178, 45, 126, 61, 34, 108, 163, 189, 48, 111, 14, 190, 207, 27, 195, 189, 106, 192, 199, 189, 2, 61, 72, 189, 167, 151, 13, 62, 222, 75, 80, 61, 157, 161, 244, 189, 172, 107, 21, 59, 149, 5, 123, 61, 246, 250, 253, 60, 183, 72, 75, 190, 170, 104, 30, 189, 219, 146, 188, 60, 167, 79, 137, 189, 246, 42, 45, 62, 132, 178, 144, 189, 92, 84, 104, 62, 117, 205, 182, 191, 66, 217, 71, 187, 170, 189, 172, 189, 31, 134, 237, 60, 194, 6, 38, 191, 239, 144, 130, 190, 234, 198, 251, 190, 11, 137, 88, 190, 49, 77, 13, 190, 38, 49, 88, 189, 193, 12, 94, 61, 159, 211, 131, 188, 117, 135, 154, 190, 110, 55, 221, 190, 200, 132, 139, 191, 88, 199, 52, 62, 206, 236, 135, 190, 186, 186, 95, 62, 72, 86, 94, 60, 47, 118, 70, 191, 146, 52, 232, 190, 250, 83, 162, 190, 78, 115, 162, 62, 169, 114, 102, 61, 237, 156, 140, 62, 81, 141, 37, 190, 35, 7, 120, 59, 70, 253, 48, 62, 27, 165, 124, 62, 159, 70, 230, 61, 248, 244, 19, 62, 241, 34, 228, 61, 104, 8, 136, 61, 228, 105, 156, 61, 186, 235, 104, 61, 68, 0, 206, 62, 168, 190, 31, 190, 243, 114, 139, 62, 148, 138, 74, 62, 93, 154, 42, 190, 136, 115, 245, 61, 167, 129, 137, 61, 62, 171, 0, 190, 71, 188, 60, 190, 148, 201, 39, 189, 73, 154, 135, 62, 8, 124, 0, 63, 14, 20, 236, 61, 178, 243, 198, 62, 210, 102, 31, 190, 125, 185, 176, 190, 188, 200, 214, 189, 33, 246, 148, 61, 237, 97, 149, 62, 72, 182, 0, 190, 86, 239, 134, 62, 221, 96, 202, 190, 139, 7, 169, 61, 28, 91, 48, 62, 152, 161, 157, 61, 155, 5, 155, 60, 14, 159, 207, 189, 47, 135, 236, 60, 219, 170, 60, 62, 95, 216, 117, 191, 157, 35, 53, 190, 205, 51, 187, 190, 150, 42, 181, 190, 216, 222, 28, 62, 222, 77, 205, 61, 236, 40, 154, 62, 19, 8, 217, 61, 181, 94, 7, 189, 179, 39, 17, 190, 166, 167, 129, 189, 93, 91, 187, 189, 214, 85, 57, 189, 209, 177, 104, 188, 219, 188, 1, 191, 236, 197, 20, 190, 74, 251, 110, 62, 29, 55, 227, 61, 115, 172, 146, 189, 28, 249, 225, 190, 194, 188, 214, 61, 115, 142, 117, 62, 147, 74, 8, 189, 29, 26, 191, 190, 111, 192, 34, 62, 82, 16, 159, 62, 122, 156, 33, 60, 176, 131, 235, 61, 125, 4, 182, 61, 176, 36, 48, 190, 87, 197, 85, 62, 198, 84, 74, 191, 141, 123, 164, 61, 101, 48, 4, 62, 73, 207, 23, 62, 19, 119, 99, 61, 5, 144, 23, 62, 240, 22, 122, 60, 2, 111, 75, 62, 87, 102, 104, 62, 252, 136, 45, 62, 51, 206, 191, 186, 254, 153, 178, 61, 131, 84, 33, 190, 92, 12, 64, 190, 213, 41, 32, 62, 247, 192, 15, 61, 47, 96, 232, 189, 70, 56, 164, 61, 120, 109, 42, 191, 232, 156, 30, 190, 154, 122, 168, 189, 233, 114, 33, 62, 28, 154, 84, 61, 222, 67, 63, 191, 19, 55, 15, 189, 87, 18, 41, 62, 47, 219, 19, 187, 233, 215, 247, 187, 146, 184, 130, 61, 112, 176, 6, 190, 72, 26, 135, 190, 180, 137, 237, 189, 231, 217, 5, 190, 205, 128, 115, 62, 48, 142, 25, 191, 103, 148, 145, 61, 244, 222, 46, 190, 159, 125, 46, 62, 0, 99, 77, 189, 141, 23, 75, 190, 150, 201, 84, 188, 98, 200, 31, 62, 198, 111, 19, 62, 192, 254, 101, 61, 86, 126, 148, 189, 0, 222, 76, 62, 253, 0, 32, 62, 38, 153, 105, 58, 227, 121, 9, 187, 67, 47, 152, 190, 144, 157, 5, 61, 103, 53, 45, 62, 217, 154, 95, 61, 99, 84, 50, 191, 76, 67, 170, 190, 94, 72, 91, 189, 244, 194, 15, 62, 208, 224, 21, 62, 232, 162, 221, 190, 161, 65, 153, 61, 174, 221, 166, 61, 132, 219, 129, 189, 252, 48, 154, 61, 184, 125, 190, 190, 214, 208, 190, 61, 142, 233, 148, 62, 245, 214, 22, 191, 117, 131, 2, 190, 232, 197, 237, 190, 186, 14, 111, 189, 105, 52, 184, 189, 194, 72, 25, 190, 65, 246, 159, 61, 25, 154, 37, 62, 123, 144, 45, 190, 237, 43, 88, 62, 35, 68, 34, 62, 251, 18, 23, 63, 181, 163, 211, 61, 167, 159, 47, 61, 185, 132, 160, 188, 22, 45, 64, 190, 77, 187, 157, 62, 41, 126, 105, 62, 47, 141, 101, 61, 75, 192, 21, 191, 68, 18, 144, 189, 79, 138, 27, 62, 236, 26, 8, 187, 108, 182, 59, 62, 250, 52, 91, 190, 47, 26, 129, 62, 238, 100, 248, 189, 50, 71, 81, 191, 59, 158, 183, 190, 202, 29, 5, 191, 152, 148, 40, 62, 82, 30, 17, 61, 14, 25, 163, 190, 19, 130, 91, 190, 95, 57, 164, 190, 98, 182, 122, 190, 81, 244, 122, 191, 177, 43, 195, 190, 113, 105, 227, 190, 33, 153, 88, 190, 72, 115, 146, 189, 180, 22, 237, 190, 86, 148, 6, 189, 181, 62, 175, 190, 185, 252, 210, 190, 114, 0, 184, 189, 243, 1, 193, 61, 73, 100, 156, 190, 75, 0, 185, 188, 17, 77, 36, 190, 211, 52, 115, 190, 48, 238, 89, 191, 96, 75, 42, 60, 38, 97, 194, 190, 186, 201, 33, 62, 115, 2, 209, 188, 92, 203, 49, 62, 70, 49, 205, 190, 209, 224, 234, 189, 41, 170, 28, 62, 119, 88, 18, 189, 125, 214, 123, 62, 104, 76, 103, 190, 28, 43, 160, 190, 26, 134, 153, 62, 122, 74, 43, 62, 178, 123, 65, 61, 55, 29, 12, 190, 212, 72, 185, 187, 176, 78, 123, 62, 116, 28, 39, 59, 240, 220, 238, 189, 246, 174, 20, 189, 138, 163, 162, 190, 123, 166, 150, 61, 68, 71, 13, 191, 131, 233, 57, 62, 148, 96, 134, 190, 252, 228, 73, 61, 162, 83, 95, 62, 79, 182, 249, 189, 124, 179, 33, 189, 2, 168, 176, 190, 210, 214, 57, 62, 85, 83, 92, 62, 204, 169, 131, 189, 229, 137, 145, 61, 190, 65, 70, 62, 171, 230, 214, 62, 227, 182, 41, 190, 39, 77, 9, 61, 90, 176, 123, 189, 33, 50, 240, 188, 167, 177, 26, 190, 94, 57, 49, 190, 72, 162, 118, 189, 24, 82, 180, 189, 152, 77, 138, 60, 234, 18, 10, 61, 227, 221, 6, 62, 68, 241, 188, 189, 99, 71, 216, 61, 31, 132, 124, 61, 157, 218, 12, 190, 87, 191, 17, 189, 125, 205, 35, 62, 10, 248, 185, 61, 18, 36, 34, 190, 36, 62, 254, 189, 13, 240, 100, 189, 124, 71, 3, 62, 21, 86, 35, 190, 195, 82, 135, 189, 207, 35, 144, 61, 166, 114, 65, 190, 40, 78, 79, 189, 48, 52, 191, 189, 190, 199, 112, 189, 185, 157, 208, 189, 32, 43, 35, 62, 44, 173, 217, 189, 255, 255, 206, 185, 144, 63, 215, 61, 144, 19, 33, 190, 76, 154, 226, 61, 195, 48, 179, 189, 54, 252, 23, 62, 25, 150, 121, 62, 13, 148, 62, 191, 200, 200, 198, 189, 47, 63, 164, 190, 137, 104, 77, 189, 187, 59, 3, 61, 13, 200, 45, 60, 192, 206, 183, 61, 226, 99, 2, 189, 207, 105, 22, 61, 2, 60, 180, 62, 0, 53, 197, 53, 228, 40, 253, 62, 249, 194, 8, 190, 242, 15, 107, 61, 219, 142, 102, 190, 193, 246, 33, 190, 91, 164, 112, 62, 98, 206, 35, 61, 238, 39, 123, 62, 4, 186, 17, 191, 191, 187, 75, 188, 198, 234, 209, 189, 232, 109, 18, 189, 224, 89, 148, 62, 195, 62, 17, 191, 234, 170, 147, 62, 194, 44, 204, 188, 51, 34, 140, 61, 14, 27, 198, 189, 85, 178, 254, 189, 67, 15, 237, 60, 226, 172, 4, 190, 248, 12, 156, 189, 28, 104, 135, 189, 86, 16, 31, 187, 95, 28, 9, 190, 13, 143, 54, 189, 87, 22, 187, 61, 41, 47, 18, 190, 190, 79, 247, 189, 66, 68, 52, 190, 118, 68, 32, 62, 18, 182, 59, 61, 47, 193, 38, 190, 32, 12, 207, 189, 172, 217, 12, 61, 183, 52, 231, 189, 250, 55, 245, 61, 222, 115, 233, 188, 165, 32, 215, 61, 78, 36, 37, 62, 248, 57, 22, 62, 72, 3, 242, 186, 245, 1, 164, 61, 190, 69, 44, 189, 146, 79, 2, 190, 23, 41, 34, 190, 39, 118, 143, 187, 24, 180, 37, 190, 88, 8, 49, 190, 48, 15, 37, 190, 217, 246, 34, 59, 216, 65, 164, 61, 45, 68, 233, 189, 248, 230, 51, 61, 202, 210, 115, 189, 239, 55, 39, 190, 225, 247, 9, 190, 87, 170, 159, 61, 129, 29, 118, 60, 138, 37, 24, 190, 182, 6, 139, 61, 180, 156, 4, 61, 227, 15, 110, 60, 190, 147, 69, 190, 192, 33, 86, 188, 205, 61, 210, 61, 8, 15, 1, 62, 100, 110, 213, 189, 45, 126, 36, 190, 233, 225, 203, 60, 165, 42, 51, 60, 217, 239, 254, 60, 5, 21, 119, 61, 227, 254, 22, 190, 129, 255, 148, 189, 202, 111, 198, 61, 87, 32, 141, 60, 125, 27, 160, 189, 177, 22, 3, 190, 197, 63, 112, 61, 213, 90, 148, 61, 228, 155, 77, 62, 228, 143, 70, 191, 201, 230, 151, 62, 95, 93, 213, 191, 162, 14, 186, 189, 136, 195, 220, 189, 145, 81, 9, 61, 1, 52, 152, 190, 115, 52, 166, 187, 168, 198, 22, 60, 230, 154, 18, 190, 98, 50, 185, 61, 115, 149, 46, 62, 115, 61, 20, 190, 39, 190, 101, 61, 170, 19, 46, 191, 226, 84, 191, 190, 134, 195, 174, 191, 43, 34, 52, 60, 97, 147, 62, 190, 66, 77, 60, 62, 181, 6, 142, 62, 103, 156, 147, 189, 91, 162, 111, 190, 101, 146, 37, 62, 186, 241, 172, 62, 105, 250, 189, 189, 117, 145, 215, 61, 7, 217, 80, 190, 8, 160, 28, 190, 166, 225, 18, 190, 176, 28, 186, 61, 199, 237, 30, 62, 26, 2, 4, 191, 63, 253, 99, 62, 175, 99, 195, 191, 117, 5, 149, 61, 169, 89, 21, 62, 18, 22, 48, 190, 94, 121, 72, 191, 144, 115, 94, 61, 146, 13, 41, 191, 159, 207, 128, 190, 145, 92, 158, 61, 140, 19, 210, 61, 55, 145, 17, 190, 121, 246, 6, 189, 92, 47, 220, 190, 180, 77, 45, 190, 89, 99, 130, 191, 133, 16, 157, 62, 190, 94, 227, 190, 177, 135, 69, 62, 192, 174, 70, 61, 122, 236, 47, 191, 146, 189, 20, 189, 46, 144, 32, 60, 242, 146, 179, 62, 206, 253, 237, 190, 161, 93, 214, 62, 202, 103, 78, 61, 59, 209, 100, 190, 249, 67, 90, 60, 40, 137, 245, 189, 76, 111, 116, 60, 158, 119, 134, 62, 101, 240, 7, 62, 141, 137, 234, 189, 22, 122, 3, 190, 31, 61, 139, 188, 204, 107, 22, 61, 162, 166, 248, 61, 186, 128, 165, 61, 97, 246, 157, 61, 16, 138, 206, 187, 176, 161, 46, 190, 42, 15, 113, 60, 68, 215, 60, 189, 192, 14, 144, 188, 42, 159, 32, 190, 64, 33, 65, 62, 202, 126, 138, 190, 172, 31, 58, 190, 134, 168, 72, 62, 231, 104, 89, 62, 164, 113, 143, 61, 128, 50, 106, 190, 164, 165, 132, 61, 134, 67, 43, 62, 115, 235, 199, 61, 221, 103, 130, 61, 0, 10, 54, 62, 124, 142, 60, 190, 41, 148, 59, 190, 66, 248, 184, 189, 250, 178, 155, 190, 166, 119, 86, 190, 13, 40, 67, 190, 225, 148, 159, 62, 188, 65, 65, 62, 105, 82, 78, 191, 154, 181, 65, 189, 153, 96, 138, 190, 179, 76, 166, 61, 179, 99, 141, 190, 91, 201, 198, 189, 140, 123, 44, 60, 14, 5, 114, 188, 8, 228, 160, 61, 24, 158, 152, 189, 249, 143, 23, 62, 121, 154, 224, 62, 92, 232, 141, 61, 194, 47, 123, 62, 219, 25, 188, 60, 46, 2, 174, 190, 10, 47, 11, 62, 86, 235, 25, 62, 185, 178, 127, 189, 168, 131, 198, 190, 11, 109, 33, 62, 200, 251, 137, 62, 1, 179, 113, 62, 253, 54, 217, 187, 51, 97, 169, 190, 199, 182, 16, 61, 154, 3, 233, 189, 125, 144, 143, 61, 15, 133, 126, 190, 252, 14, 81, 189, 191, 22, 193, 190, 108, 39, 151, 62, 246, 119, 142, 62, 222, 83, 216, 189, 34, 165, 142, 62, 202, 39, 33, 190, 59, 113, 158, 189, 132, 183, 128, 188, 242, 166, 200, 189, 195, 67, 131, 189, 212, 104, 11, 62, 23, 176, 71, 190, 179, 196, 25, 62, 44, 204, 163, 191, 229, 139, 120, 190, 16, 181, 233, 61, 31, 201, 132, 62, 47, 9, 44, 189, 226, 31, 172, 189, 201, 133, 33, 189, 136, 194, 32, 189, 97, 98, 192, 62, 191, 212, 136, 62, 105, 100, 155, 191, 168, 172, 129, 61, 209, 158, 11, 62, 145, 47, 196, 190, 2, 247, 33, 191, 161, 232, 118, 61, 8, 177, 116, 189, 34, 205, 193, 189, 121, 131, 218, 62, 174, 85, 122, 62, 212, 164, 32, 191, 18, 163, 47, 61, 139, 89, 253, 61, 165, 225, 136, 189, 62, 124, 22, 61, 210, 71, 179, 61, 29, 125, 215, 62, 121, 203, 130, 188, 11, 117, 1, 190, 204, 163, 39, 189, 74, 110, 221, 190, 103, 219, 141, 190, 48, 23, 25, 191, 138, 225, 135, 62, 213, 169, 161, 190, 175, 240, 120, 62, 6, 86, 119, 62, 228, 59, 18, 190, 133, 98, 48, 190, 129, 160, 70, 191, 243, 124, 21, 63, 38, 62, 72, 62, 245, 175, 218, 189, 99, 105, 246, 189, 160, 67, 136, 61, 215, 93, 132, 62, 96, 31, 13, 190, 35, 46, 144, 189, 114, 150, 159, 61, 24, 117, 224, 61, 164, 152, 175, 61, 124, 79, 192, 61, 21, 117, 144, 191, 215, 124, 181, 60, 39, 129, 25, 189, 144, 172, 218, 61, 46, 19, 64, 190, 11, 199, 164, 61, 81, 121, 132, 190, 55, 153, 81, 190, 183, 21, 205, 61, 63, 45, 27, 62, 39, 206, 92, 61, 128, 219, 193, 61, 115, 63, 211, 189, 97, 47, 173, 189, 210, 183, 135, 191, 137, 169, 199, 60, 134, 10, 115, 190, 213, 73, 247, 61, 2, 59, 138, 62, 157, 40, 149, 190, 34, 117, 54, 62, 145, 243, 161, 61, 70, 147, 213, 62, 222, 197, 139, 189, 168, 101, 150, 62, 240, 103, 121, 190, 201, 183, 89, 60, 144, 14, 36, 62, 12, 182, 122, 190, 116, 192, 180, 190, 139, 217, 28, 189, 57, 186, 76, 189, 45, 94, 206, 62, 143, 230, 32, 190, 82, 166, 74, 190, 35, 62, 159, 62, 128, 96, 4, 190, 147, 5, 69, 61, 3, 210, 61, 190, 233, 169, 79, 62, 124, 95, 36, 190, 97, 154, 236, 61, 113, 251, 39, 62, 180, 209, 204, 61, 109, 227, 236, 61, 212, 150, 159, 60, 102, 37, 6, 63, 236, 152, 27, 62, 80, 15, 44, 62, 217, 229, 75, 187, 165, 132, 98, 61, 79, 177, 108, 61, 51, 124, 254, 61, 26, 96, 133, 62, 48, 78, 88, 191, 202, 161, 109, 62, 216, 142, 47, 190, 48, 229, 15, 62, 179, 62, 130, 62, 144, 21, 219, 61, 124, 210, 91, 191, 197, 52, 37, 191, 112, 106, 90, 190, 25, 36, 159, 188, 99, 26, 28, 61, 86, 91, 7, 191, 134, 179, 152, 189, 26, 254, 152, 190, 148, 4, 206, 61, 242, 47, 97, 191, 122, 120, 39, 190, 254, 219, 30, 189, 104, 90, 96, 62, 158, 106, 24, 190, 11, 232, 251, 61, 200, 124, 29, 62, 31, 194, 161, 62, 196, 114, 103, 62, 30, 110, 231, 189, 184, 251, 165, 189, 169, 29, 158, 190, 41, 85, 50, 62, 54, 12, 13, 62, 99, 184, 76, 189, 141, 94, 76, 191, 98, 237, 209, 190, 121, 43, 58, 60, 165, 69, 150, 61, 89, 67, 46, 62, 122, 141, 214, 190, 51, 219, 52, 61, 157, 21, 194, 189, 18, 189, 78, 189, 192, 196, 25, 62, 17, 115, 122, 62, 141, 149, 191, 61, 162, 70, 24, 191, 188, 171, 1, 62, 103, 184, 25, 189, 216, 17, 69, 190, 118, 171, 216, 190, 26, 139, 124, 189, 23, 123, 34, 191, 165, 233, 151, 61, 155, 212, 244, 189, 201, 222, 103, 189, 98, 112, 109, 187, 19, 72, 128, 62, 192, 23, 187, 60, 239, 241, 89, 59, 64, 32, 155, 190, 23, 29, 47, 62, 164, 247, 156, 190, 232, 135, 161, 60, 39, 84, 28, 190, 97, 111, 128, 190, 115, 160, 219, 62, 29, 47, 192, 61, 143, 179, 155, 62, 237, 49, 168, 188, 197, 50, 150, 62, 204, 245, 176, 189, 102, 103, 145, 61, 142, 183, 142, 188, 75, 9, 10, 190, 58, 214, 112, 189, 222, 158, 46, 62, 32, 59, 81, 190, 195, 151, 151, 189, 71, 43, 178, 190, 85, 123, 182, 190, 152, 229, 73, 191, 64, 158, 14, 190, 75, 218, 128, 190, 162, 203, 229, 188, 151, 137, 94, 62, 63, 137, 66, 190, 137, 4, 216, 61, 98, 206, 66, 189, 96, 10, 93, 189, 83, 190, 170, 61, 28, 86, 134, 62, 28, 39, 155, 191, 102, 115, 240, 190, 116, 159, 174, 189, 83, 163, 66, 190, 243, 85, 115, 61, 169, 168, 25, 61, 125, 216, 99, 190, 171, 110, 47, 62, 210, 136, 226, 190, 177, 146, 29, 61, 205, 95, 5, 190, 147, 18, 149, 189, 145, 108, 213, 61, 238, 65, 13, 190, 74, 198, 62, 189, 106, 179, 221, 189, 172, 156, 126, 62, 91, 239, 27, 62, 102, 36, 204, 187, 87, 93, 177, 190, 65, 72, 23, 188, 40, 157, 218, 189, 9, 89, 75, 62, 111, 8, 6, 61, 40, 34, 120, 60, 44, 104, 37, 61, 101, 2, 11, 61, 55, 104, 39, 190, 41, 96, 245, 61, 227, 143, 70, 190, 75, 157, 47, 60, 15, 192, 204, 62, 182, 33, 3, 61, 178, 252, 144, 61, 41, 206, 76, 62, 92, 242, 143, 62, 83, 219, 140, 60, 22, 200, 64, 190, 209, 62, 201, 189, 137, 152, 61, 62, 148, 104, 205, 188, 157, 61, 155, 60, 139, 240, 224, 189, 79, 228, 174, 61, 28, 212, 16, 190, 190, 217, 22, 62, 74, 189, 250, 61, 85, 66, 62, 62, 68, 21, 17, 62, 188, 62, 208, 61, 24, 54, 157, 190, 173, 38, 42, 189, 142, 125, 10, 189, 136, 25, 91, 189, 81, 214, 183, 61, 160, 46, 178, 189, 62, 31, 25, 62, 23, 27, 55, 190, 125, 102, 200, 61, 8, 81, 23, 62, 100, 71, 54, 190, 36, 170, 202, 189, 1, 162, 161, 190, 89, 221, 59, 62, 233, 129, 202, 190, 246, 241, 223, 61, 135, 144, 76, 188, 14, 145, 50, 60, 116, 89, 139, 62, 139, 46, 173, 61, 174, 12, 136, 62, 134, 62, 13, 62, 250, 11, 25, 62, 13, 176, 223, 61, 33, 27, 205, 189, 116, 54, 86, 62, 17, 111, 207, 187, 38, 58, 65, 189, 156, 95, 202, 61, 51, 72, 84, 189, 25, 24, 82, 189, 234, 94, 179, 190, 204, 226, 85, 189, 234, 194, 33, 188, 141, 229, 138, 188, 46, 102, 190, 60, 178, 137, 222, 61, 93, 64, 97, 190, 210, 218, 60, 189, 70, 163, 14, 190, 187, 126, 216, 189, 8, 209, 224, 61, 84, 125, 193, 189, 187, 103, 77, 61, 154, 1, 38, 190, 126, 114, 3, 190, 164, 94, 208, 189, 244, 170, 111, 189, 75, 113, 242, 61, 53, 119, 169, 190, 106, 50, 108, 190, 246, 114, 150, 190, 68, 177, 235, 61, 189, 159, 91, 62, 33, 27, 41, 191, 202, 212, 142, 61, 1, 235, 208, 61, 76, 234, 227, 189, 27, 175, 170, 190, 95, 140, 187, 188, 12, 247, 21, 190, 147, 160, 1, 62, 227, 65, 79, 191, 124, 244, 164, 189, 43, 214, 49, 191, 201, 31, 186, 189, 23, 128, 60, 60, 191, 207, 85, 190, 1, 178, 49, 61, 236, 184, 119, 188, 201, 109, 250, 189, 124, 254, 128, 60, 234, 139, 9, 189, 94, 131, 38, 62, 135, 175, 124, 62, 252, 90, 68, 62, 146, 244, 205, 62, 249, 2, 21, 61, 121, 8, 208, 190, 154, 219, 174, 60, 84, 69, 226, 190, 16, 4, 62, 187, 130, 182, 42, 187, 170, 66, 125, 189, 249, 232, 7, 191, 110, 67, 95, 190, 51, 57, 82, 62, 216, 107, 38, 62, 3, 197, 76, 62, 142, 150, 82, 191, 165, 185, 95, 61, 252, 86, 122, 61, 92, 193, 23, 61, 251, 206, 237, 60, 132, 39, 219, 62, 106, 131, 5, 190, 182, 166, 197, 190, 151, 167, 104, 62, 20, 204, 136, 62, 139, 44, 251, 189, 228, 132, 241, 189, 68, 226, 67, 61, 251, 74, 73, 62, 106, 244, 6, 62, 16, 171, 216, 188, 67, 82, 254, 61, 13, 219, 117, 190, 226, 60, 244, 189, 249, 83, 61, 191, 83, 8, 84, 61, 49, 6, 224, 190, 138, 120, 163, 61, 21, 180, 136, 62, 43, 224, 159, 189, 54, 142, 193, 61, 129, 79, 215, 190, 59, 93, 16, 62, 201, 75, 101, 62, 150, 158, 152, 190, 243, 19, 249, 189, 210, 201, 43, 62, 240, 104, 213, 62, 213, 168, 134, 190, 44, 125, 71, 61, 198, 251, 52, 190, 23, 232, 195, 189, 56, 242, 9, 62, 98, 114, 219, 189, 32, 34, 46, 190, 95, 255, 219, 189, 176, 65, 217, 189, 230, 28, 71, 190, 114, 16, 244, 188, 108, 121, 109, 189, 105, 2, 99, 60, 166, 253, 113, 62, 243, 241, 19, 62, 93, 4, 34, 62, 49, 214, 216, 189, 189, 183, 175, 61, 243, 201, 148, 61, 93, 175, 70, 62, 73, 162, 51, 188, 40, 144, 142, 62, 72, 69, 77, 61, 140, 78, 127, 189, 229, 222, 211, 61, 115, 234, 9, 188, 16, 61, 177, 61, 243, 234, 218, 61, 29, 97, 133, 190, 85, 126, 56, 62, 21, 106, 12, 62, 201, 179, 37, 62, 68, 23, 161, 189, 221, 19, 33, 62, 42, 201, 12, 61, 189, 137, 192, 60, 19, 118, 91, 62, 11, 174, 18, 189, 170, 44, 229, 190, 127, 136, 254, 190, 62, 228, 6, 61, 225, 190, 57, 190, 81, 188, 76, 190, 8, 78, 176, 61, 223, 88, 190, 61, 30, 105, 224, 189, 253, 152, 240, 61, 106, 255, 220, 61, 137, 194, 108, 190, 177, 193, 150, 190, 135, 250, 242, 188, 22, 78, 24, 62, 224, 153, 144, 190, 182, 214, 178, 62, 126, 187, 209, 61, 20, 141, 205, 189, 108, 165, 134, 189, 81, 69, 214, 190, 72, 152, 187, 62, 169, 101, 73, 62, 15, 178, 104, 190, 74, 214, 96, 190, 33, 105, 213, 61, 144, 108, 42, 62, 97, 154, 111, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 215, 175, 61, 38, 137, 223, 61, 120, 172, 41, 62, 124, 5, 53, 190, 60, 118, 129, 62, 7, 118, 148, 189, 88, 16, 250, 61, 67, 134, 153, 189, 169, 180, 61, 62, 241, 159, 30, 62, 163, 192, 179, 189, 169, 250, 229, 61, 156, 195, 27, 190, 80, 171, 162, 189, 110, 180, 95, 61, 218, 135, 122, 62, 202, 248, 174, 62, 1, 9, 204, 62, 19, 117, 122, 62, 107, 104, 174, 62, 24, 225, 154, 56, 103, 251, 169, 62, 212, 8, 19, 62, 217, 138, 3, 62, 66, 211, 245, 189, 128, 101, 147, 62, 14, 168, 133, 62, 156, 250, 189, 189, 180, 188, 237, 187, 159, 219, 135, 62, 137, 146, 138, 62, 38, 173, 128, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 62, 244, 62, 180, 198, 147, 61, 7, 43, 95, 63, 44, 217, 194, 190, 23, 191, 175, 62, 22, 158, 135, 62, 225, 152, 166, 190, 253, 2, 222, 190, 131, 1, 31, 191, 111, 33, 188, 62, 116, 103, 33, 190, 219, 139, 150, 190, 21, 202, 23, 61, 51, 198, 249, 189, 186, 195, 56, 63, 184, 49, 76, 63, 15, 133, 186, 188, 115, 195, 76, 191, 199, 83, 63, 62, 7, 185, 134, 63, 57, 44, 175, 62, 77, 184, 242, 190, 13, 78, 37, 191, 251, 249, 41, 62, 103, 54, 186, 189, 45, 230, 191, 189, 211, 21, 22, 61, 3, 116, 235, 61, 27, 152, 216, 62, 35, 136, 22, 63, 155, 97, 46, 188, 238, 101, 255, 62, 122, 14, 112, 62, 173, 243, 35, 61, 121, 75, 34, 61, 146, 123, 1, 62, 29, 68, 77, 190, 50, 152, 36, 190, 51, 21, 162, 189, 233, 141, 117, 61, 48, 240, 169, 62, 142, 146, 73, 62, 7, 46, 140, 188, 108, 34, 172, 187, 236, 28, 251, 61, 118, 184, 167, 189, 64, 217, 95, 61, 57, 5, 227, 61, 206, 183, 32, 190, 138, 43, 180, 61, 122, 157, 78, 190, 149, 41, 172, 61, 128, 4, 110, 60, 11, 61, 36, 190, 44, 67, 23, 189, 129, 169, 77, 190, 51, 221, 175, 190, 199, 86, 119, 190, 112, 96, 119, 190, 138, 118, 221, 59, 79, 250, 236, 188, 103, 64, 78, 188, 107, 114, 162, 190, 72, 212, 0, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 107, 73, 190, 102, 57, 18, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {9, 152, 171, 63, 31, 145, 4, 64, 203, 185, 95, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {173, 154, 161, 192, 146, 130, 5, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0024/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}