// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 194, 104, 190, 37, 186, 219, 62, 145, 7, 138, 188, 49, 72, 218, 190, 68, 172, 231, 190, 87, 110, 20, 63, 38, 188, 18, 61, 200, 148, 188, 62, 63, 249, 242, 62, 105, 151, 231, 62, 60, 130, 242, 190, 114, 65, 154, 190, 226, 103, 72, 190, 165, 14, 201, 62, 24, 7, 18, 62, 227, 2, 217, 190, 212, 181, 86, 62, 233, 89, 149, 190, 202, 118, 56, 190, 20, 90, 104, 190, 222, 84, 119, 190, 213, 219, 20, 62, 154, 219, 159, 62, 249, 84, 243, 190, 235, 210, 254, 189, 169, 194, 194, 190, 84, 60, 154, 190, 108, 221, 165, 62, 63, 238, 251, 62, 175, 58, 173, 190, 109, 161, 169, 190, 156, 41, 56, 191, 141, 241, 228, 62, 180, 46, 236, 62, 151, 23, 137, 62, 149, 75, 211, 190, 65, 147, 53, 63, 29, 163, 212, 190, 8, 185, 246, 62, 145, 233, 78, 62, 119, 84, 55, 63, 85, 183, 192, 190, 215, 143, 138, 189, 232, 24, 136, 62, 32, 116, 133, 60, 50, 67, 198, 62, 16, 218, 14, 63, 242, 188, 248, 62, 44, 127, 132, 190, 168, 171, 195, 62, 61, 19, 126, 190, 235, 199, 33, 63, 234, 164, 50, 62, 174, 189, 96, 62, 96, 198, 214, 62, 106, 216, 78, 190, 210, 119, 230, 61, 139, 185, 127, 190, 115, 218, 67, 191, 122, 205, 65, 190, 245, 108, 198, 190, 225, 139, 6, 191, 190, 203, 84, 190, 21, 132, 175, 62, 53, 203, 200, 190, 203, 253, 222, 190, 2, 140, 253, 189, 161, 223, 55, 63, 149, 67, 24, 62, 62, 81, 49, 62, 103, 61, 54, 63, 214, 248, 140, 190, 229, 211, 1, 191, 202, 144, 33, 63, 99, 36, 69, 190, 140, 213, 254, 188, 26, 18, 49, 191, 180, 85, 88, 60, 195, 126, 135, 190, 231, 58, 130, 191, 212, 90, 154, 62, 195, 205, 82, 190, 220, 171, 77, 63, 11, 158, 7, 62, 189, 16, 81, 190, 56, 105, 250, 60, 60, 26, 247, 190, 78, 77, 92, 190, 101, 235, 161, 62, 193, 151, 162, 190, 139, 141, 253, 62, 228, 64, 8, 191, 32, 133, 175, 189, 130, 26, 59, 63, 156, 178, 97, 189, 18, 169, 20, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 66, 25, 191, 170, 25, 127, 190, 135, 68, 29, 63, 60, 129, 194, 62, 51, 71, 1, 63, 185, 22, 54, 189, 180, 108, 213, 190, 12, 195, 101, 190, 247, 27, 24, 190, 128, 3, 5, 63, 197, 87, 44, 190, 89, 55, 136, 190, 164, 221, 215, 62, 99, 233, 47, 63, 124, 70, 199, 190, 26, 161, 16, 62, 10, 117, 141, 61, 233, 185, 78, 62, 88, 86, 28, 63, 102, 117, 3, 62, 134, 24, 142, 62, 133, 144, 99, 62, 98, 184, 37, 63, 94, 45, 5, 63, 30, 89, 141, 190, 74, 227, 53, 62, 117, 102, 7, 63, 51, 119, 67, 62, 158, 222, 204, 62, 63, 165, 6, 63, 88, 136, 102, 190, 145, 155, 218, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 222, 41, 62, 119, 194, 79, 190, 48, 247, 61, 189, 36, 16, 20, 62, 151, 149, 154, 190, 210, 192, 123, 61, 192, 59, 179, 61, 105, 54, 68, 60, 237, 53, 221, 61, 191, 98, 140, 61, 226, 212, 126, 190, 109, 124, 236, 61, 116, 196, 136, 61, 132, 195, 15, 62, 29, 143, 147, 61, 82, 239, 233, 189, 141, 134, 168, 189, 66, 143, 7, 190, 218, 210, 172, 189, 202, 145, 40, 60, 55, 243, 76, 189, 227, 242, 161, 61, 241, 160, 148, 190, 246, 47, 253, 189, 30, 97, 45, 62, 161, 61, 178, 62, 161, 17, 161, 62, 224, 250, 162, 190, 118, 100, 73, 189, 6, 161, 231, 60, 40, 171, 155, 188, 38, 147, 162, 190, 191, 154, 168, 61, 76, 236, 48, 190, 152, 244, 72, 61, 232, 223, 60, 188, 58, 77, 226, 60, 137, 105, 150, 188, 193, 193, 133, 61, 161, 45, 195, 189, 218, 130, 209, 189, 151, 108, 3, 190, 144, 217, 187, 189, 234, 55, 33, 190, 139, 72, 157, 61, 51, 194, 13, 190, 173, 89, 123, 189, 184, 84, 91, 189, 98, 158, 38, 188, 158, 36, 100, 189, 178, 45, 126, 61, 34, 108, 163, 189, 48, 111, 14, 190, 207, 27, 195, 189, 106, 192, 199, 189, 2, 61, 72, 189, 167, 151, 13, 62, 222, 75, 80, 61, 157, 161, 244, 189, 172, 107, 21, 59, 149, 5, 123, 61, 246, 250, 253, 60, 183, 72, 75, 190, 170, 104, 30, 189, 219, 146, 188, 60, 28, 46, 7, 62, 32, 136, 222, 61, 57, 45, 25, 62, 85, 112, 247, 60, 206, 25, 34, 190, 153, 171, 161, 187, 63, 194, 214, 60, 116, 230, 224, 61, 98, 78, 10, 190, 99, 70, 142, 189, 255, 2, 73, 189, 236, 38, 191, 61, 168, 224, 130, 189, 38, 49, 88, 189, 141, 146, 63, 189, 35, 86, 155, 61, 40, 196, 149, 190, 18, 30, 19, 190, 178, 40, 4, 62, 141, 91, 14, 62, 247, 176, 69, 190, 30, 86, 102, 59, 155, 135, 133, 189, 45, 144, 236, 189, 57, 23, 120, 189, 84, 16, 168, 189, 50, 150, 2, 60, 21, 27, 195, 187, 49, 173, 26, 61, 204, 187, 2, 189, 112, 237, 36, 61, 70, 253, 48, 62, 105, 203, 51, 62, 122, 68, 28, 61, 210, 34, 232, 189, 3, 171, 222, 188, 2, 41, 232, 187, 229, 186, 174, 189, 182, 122, 169, 61, 3, 68, 36, 189, 111, 248, 19, 190, 36, 40, 75, 62, 168, 174, 4, 62, 234, 133, 243, 189, 186, 185, 49, 62, 253, 86, 136, 61, 31, 21, 226, 189, 101, 214, 5, 190, 145, 210, 91, 57, 244, 169, 76, 62, 181, 35, 152, 189, 147, 64, 8, 190, 193, 194, 131, 189, 8, 99, 132, 190, 132, 6, 45, 190, 23, 15, 111, 189, 248, 223, 119, 189, 197, 2, 55, 62, 143, 87, 189, 189, 179, 241, 34, 190, 147, 222, 214, 190, 34, 65, 25, 190, 249, 146, 60, 62, 152, 161, 157, 61, 25, 18, 99, 60, 161, 73, 246, 189, 128, 89, 164, 189, 206, 212, 12, 62, 148, 207, 13, 190, 124, 45, 120, 189, 127, 20, 82, 190, 72, 35, 139, 61, 242, 145, 155, 61, 204, 227, 229, 61, 209, 36, 14, 61, 122, 115, 250, 61, 81, 131, 24, 190, 148, 127, 16, 190, 180, 249, 189, 188, 118, 104, 105, 189, 149, 139, 10, 189, 122, 35, 68, 189, 116, 124, 73, 62, 123, 186, 141, 189, 65, 246, 5, 62, 135, 129, 77, 61, 169, 116, 100, 190, 250, 76, 20, 190, 110, 108, 12, 62, 91, 151, 154, 62, 166, 242, 51, 190, 218, 103, 157, 189, 236, 6, 210, 60, 202, 130, 53, 62, 164, 181, 129, 61, 131, 145, 235, 61, 129, 193, 159, 188, 170, 201, 165, 189, 44, 128, 77, 62, 103, 199, 43, 190, 25, 249, 7, 62, 139, 204, 124, 188, 64, 190, 12, 62, 139, 124, 248, 61, 242, 50, 8, 62, 128, 121, 145, 189, 86, 139, 60, 62, 204, 128, 20, 61, 34, 4, 41, 62, 51, 206, 191, 186, 170, 191, 193, 61, 143, 210, 22, 190, 235, 95, 47, 190, 157, 137, 14, 62, 181, 209, 11, 62, 209, 54, 104, 189, 65, 74, 170, 61, 190, 194, 244, 189, 224, 136, 36, 190, 183, 34, 31, 190, 62, 182, 3, 62, 224, 164, 39, 189, 61, 184, 187, 187, 47, 159, 74, 60, 142, 213, 18, 62, 87, 197, 241, 188, 102, 79, 22, 190, 152, 24, 131, 61, 116, 139, 255, 61, 240, 111, 217, 61, 198, 221, 180, 189, 141, 204, 110, 189, 169, 75, 21, 62, 164, 51, 53, 190, 246, 62, 208, 61, 105, 97, 140, 60, 159, 112, 36, 62, 95, 241, 21, 62, 191, 151, 15, 190, 55, 218, 29, 60, 114, 138, 20, 62, 183, 245, 18, 62, 217, 208, 30, 62, 123, 36, 143, 189, 235, 225, 79, 60, 40, 142, 221, 61, 118, 100, 3, 190, 13, 138, 93, 189, 253, 161, 105, 190, 247, 37, 146, 61, 42, 42, 50, 62, 91, 6, 204, 61, 99, 229, 163, 190, 203, 149, 65, 190, 159, 159, 174, 61, 117, 71, 202, 61, 187, 16, 255, 61, 45, 43, 248, 188, 132, 156, 148, 61, 13, 61, 167, 61, 51, 5, 187, 189, 24, 212, 3, 62, 111, 123, 56, 190, 28, 122, 166, 61, 129, 62, 113, 62, 25, 66, 167, 189, 144, 107, 239, 189, 120, 12, 54, 190, 8, 98, 167, 189, 210, 188, 165, 189, 208, 230, 186, 189, 67, 114, 1, 61, 150, 25, 23, 62, 176, 61, 46, 190, 103, 83, 192, 61, 75, 65, 61, 62, 155, 2, 175, 62, 82, 97, 201, 61, 20, 172, 213, 189, 182, 171, 157, 61, 136, 232, 147, 189, 167, 178, 118, 62, 123, 1, 106, 62, 33, 122, 128, 61, 201, 31, 107, 190, 125, 221, 229, 189, 232, 10, 88, 62, 165, 202, 88, 189, 82, 172, 38, 62, 9, 141, 222, 61, 169, 39, 238, 61, 238, 100, 248, 189, 8, 131, 143, 190, 77, 221, 88, 62, 68, 201, 2, 189, 230, 148, 137, 62, 71, 207, 222, 61, 69, 159, 26, 190, 224, 86, 64, 189, 47, 8, 0, 188, 238, 64, 104, 189, 235, 235, 204, 190, 96, 179, 239, 189, 233, 30, 232, 190, 82, 35, 1, 189, 72, 115, 146, 189, 69, 205, 144, 190, 28, 159, 227, 61, 10, 182, 55, 190, 79, 163, 188, 189, 7, 195, 79, 190, 206, 224, 160, 188, 225, 157, 168, 189, 254, 79, 33, 62, 227, 196, 177, 61, 106, 139, 213, 189, 29, 236, 159, 190, 156, 200, 7, 190, 168, 243, 188, 61, 206, 242, 38, 62, 107, 228, 154, 60, 128, 85, 59, 62, 214, 29, 179, 190, 209, 224, 234, 189, 122, 120, 25, 62, 154, 184, 45, 189, 216, 217, 213, 60, 115, 233, 48, 190, 151, 135, 242, 189, 21, 209, 213, 186, 131, 202, 89, 61, 0, 233, 93, 61, 32, 198, 76, 190, 193, 162, 234, 188, 3, 16, 164, 61, 11, 173, 143, 189, 182, 160, 49, 190, 185, 141, 10, 189, 147, 176, 11, 189, 155, 187, 240, 61, 225, 224, 76, 190, 134, 10, 182, 61, 119, 199, 193, 187, 110, 225, 24, 60, 126, 27, 221, 61, 166, 95, 77, 61, 242, 12, 248, 189, 69, 192, 100, 190, 7, 125, 28, 61, 184, 123, 67, 62, 188, 80, 216, 61, 222, 89, 4, 62, 50, 107, 222, 61, 31, 36, 114, 60, 208, 76, 85, 189, 39, 77, 9, 61, 90, 176, 123, 189, 33, 50, 240, 188, 167, 177, 26, 190, 94, 57, 49, 190, 72, 162, 118, 189, 24, 82, 180, 189, 152, 77, 138, 60, 234, 18, 10, 61, 227, 221, 6, 62, 68, 241, 188, 189, 99, 71, 216, 61, 31, 132, 124, 61, 157, 218, 12, 190, 87, 191, 17, 189, 125, 205, 35, 62, 10, 248, 185, 61, 18, 36, 34, 190, 36, 62, 254, 189, 13, 240, 100, 189, 124, 71, 3, 62, 21, 86, 35, 190, 195, 82, 135, 189, 207, 35, 144, 61, 166, 114, 65, 190, 40, 78, 79, 189, 48, 52, 191, 189, 190, 199, 112, 189, 185, 157, 208, 189, 32, 43, 35, 62, 44, 173, 217, 189, 255, 255, 206, 185, 210, 121, 215, 61, 195, 184, 95, 190, 140, 66, 24, 62, 34, 25, 231, 61, 88, 206, 241, 61, 194, 253, 177, 61, 239, 88, 112, 190, 197, 15, 89, 189, 72, 37, 229, 189, 117, 235, 100, 58, 226, 214, 68, 59, 121, 68, 255, 61, 22, 20, 93, 188, 121, 9, 122, 60, 196, 150, 20, 61, 44, 203, 84, 62, 137, 135, 101, 60, 143, 34, 94, 62, 11, 40, 163, 189, 85, 181, 35, 190, 161, 87, 74, 190, 161, 250, 32, 188, 121, 243, 72, 62, 137, 192, 212, 61, 76, 205, 145, 62, 200, 62, 162, 190, 44, 128, 252, 189, 54, 191, 101, 188, 87, 84, 127, 189, 101, 118, 159, 62, 55, 30, 173, 189, 134, 141, 211, 61, 194, 44, 204, 188, 51, 34, 140, 61, 14, 27, 198, 189, 85, 178, 254, 189, 67, 15, 237, 60, 226, 172, 4, 190, 248, 12, 156, 189, 28, 104, 135, 189, 86, 16, 31, 187, 95, 28, 9, 190, 13, 143, 54, 189, 87, 22, 187, 61, 41, 47, 18, 190, 190, 79, 247, 189, 66, 68, 52, 190, 118, 68, 32, 62, 18, 182, 59, 61, 47, 193, 38, 190, 32, 12, 207, 189, 172, 217, 12, 61, 183, 52, 231, 189, 250, 55, 245, 61, 222, 115, 233, 188, 165, 32, 215, 61, 78, 36, 37, 62, 248, 57, 22, 62, 72, 3, 242, 186, 245, 1, 164, 61, 190, 69, 44, 189, 146, 79, 2, 190, 23, 41, 34, 190, 39, 118, 143, 187, 24, 180, 37, 190, 88, 8, 49, 190, 48, 247, 35, 190, 217, 246, 34, 59, 164, 89, 202, 61, 105, 203, 207, 189, 248, 230, 51, 61, 150, 0, 52, 189, 81, 220, 38, 190, 222, 46, 254, 189, 87, 170, 159, 61, 223, 139, 167, 60, 138, 37, 24, 190, 251, 72, 181, 61, 180, 156, 4, 61, 227, 15, 110, 60, 13, 205, 55, 190, 192, 33, 86, 188, 35, 223, 210, 61, 187, 244, 10, 62, 136, 69, 178, 189, 150, 163, 35, 190, 167, 212, 41, 61, 223, 20, 232, 60, 25, 240, 59, 61, 5, 21, 119, 61, 223, 143, 21, 190, 66, 86, 121, 189, 246, 188, 2, 62, 245, 138, 38, 61, 125, 27, 160, 189, 177, 22, 3, 190, 197, 63, 112, 61, 43, 27, 111, 187, 35, 60, 237, 61, 81, 240, 65, 61, 160, 14, 43, 62, 84, 54, 240, 189, 9, 134, 176, 189, 219, 90, 34, 190, 199, 215, 208, 61, 14, 83, 18, 190, 135, 208, 175, 189, 150, 146, 209, 61, 213, 37, 147, 189, 12, 104, 188, 59, 120, 182, 46, 62, 165, 231, 181, 189, 185, 146, 7, 60, 163, 90, 91, 190, 254, 68, 196, 189, 243, 11, 136, 188, 65, 131, 74, 61, 181, 15, 72, 189, 209, 195, 68, 61, 187, 118, 188, 61, 77, 20, 144, 187, 52, 15, 45, 190, 44, 34, 71, 62, 18, 75, 8, 62, 200, 126, 165, 61, 89, 159, 87, 60, 247, 195, 252, 189, 42, 231, 220, 189, 166, 225, 18, 190, 205, 192, 248, 61, 84, 168, 247, 61, 230, 126, 81, 60, 32, 187, 159, 61, 110, 1, 46, 190, 246, 47, 189, 61, 144, 22, 144, 189, 204, 184, 168, 61, 127, 208, 129, 190, 215, 10, 117, 61, 62, 86, 18, 190, 62, 215, 40, 190, 58, 141, 233, 189, 140, 19, 210, 61, 210, 176, 28, 61, 94, 143, 52, 189, 243, 89, 152, 188, 96, 133, 8, 189, 210, 170, 94, 62, 57, 135, 58, 62, 193, 165, 243, 189, 17, 4, 71, 61, 209, 16, 130, 190, 106, 203, 123, 189, 235, 45, 37, 61, 39, 172, 105, 61, 13, 240, 35, 62, 217, 253, 154, 190, 251, 205, 45, 60, 91, 235, 181, 187, 149, 215, 210, 189, 227, 251, 91, 60, 34, 184, 7, 190, 50, 90, 126, 188, 177, 10, 48, 62, 214, 73, 2, 62, 234, 51, 90, 189, 209, 86, 153, 188, 123, 123, 174, 60, 144, 67, 184, 61, 68, 144, 176, 61, 140, 174, 196, 61, 0, 145, 56, 61, 254, 191, 36, 61, 15, 222, 61, 190, 124, 225, 111, 60, 254, 92, 37, 188, 167, 147, 223, 60, 188, 20, 20, 190, 114, 54, 15, 62, 149, 145, 186, 189, 88, 241, 57, 190, 33, 104, 1, 62, 20, 234, 23, 62, 115, 55, 128, 61, 154, 16, 44, 190, 133, 66, 175, 60, 92, 38, 49, 62, 216, 172, 128, 60, 103, 128, 154, 61, 1, 165, 33, 62, 239, 12, 75, 190, 79, 254, 29, 190, 24, 80, 184, 189, 20, 117, 160, 190, 230, 45, 250, 60, 105, 80, 28, 190, 5, 247, 133, 62, 11, 82, 212, 188, 131, 188, 46, 190, 86, 144, 81, 59, 15, 151, 206, 189, 66, 55, 154, 61, 172, 140, 134, 190, 196, 93, 15, 188, 65, 164, 55, 188, 98, 209, 206, 187, 8, 228, 160, 61, 222, 122, 152, 189, 142, 179, 32, 62, 65, 133, 107, 62, 8, 44, 40, 189, 206, 238, 121, 189, 102, 154, 207, 189, 87, 129, 121, 190, 128, 145, 20, 61, 5, 91, 51, 62, 166, 70, 75, 188, 168, 160, 58, 190, 236, 204, 246, 189, 122, 130, 137, 62, 27, 42, 56, 62, 193, 214, 171, 59, 50, 151, 148, 189, 60, 77, 93, 188, 71, 236, 232, 189, 67, 79, 144, 189, 119, 18, 42, 190, 123, 229, 138, 189, 98, 120, 145, 190, 168, 167, 62, 62, 56, 162, 239, 61, 122, 204, 195, 188, 209, 95, 50, 62, 221, 244, 226, 189, 42, 85, 37, 190, 83, 49, 100, 61, 182, 253, 207, 189, 87, 131, 235, 187, 212, 104, 11, 62, 251, 246, 250, 189, 3, 226, 39, 62, 250, 53, 33, 189, 50, 252, 58, 190, 231, 132, 6, 190, 39, 143, 229, 60, 120, 50, 152, 189, 25, 63, 50, 189, 219, 17, 44, 61, 106, 211, 187, 188, 218, 18, 96, 188, 200, 152, 89, 61, 31, 174, 216, 190, 184, 243, 171, 188, 223, 150, 12, 62, 151, 14, 236, 189, 244, 192, 34, 62, 161, 232, 118, 61, 246, 214, 154, 189, 8, 182, 114, 60, 105, 28, 12, 62, 88, 127, 124, 62, 197, 68, 82, 189, 20, 113, 204, 189, 233, 65, 168, 189, 147, 179, 16, 190, 106, 103, 143, 188, 185, 168, 19, 61, 42, 158, 162, 61, 92, 246, 15, 59, 59, 209, 108, 190, 179, 18, 31, 189, 63, 229, 236, 189, 107, 80, 129, 190, 228, 12, 158, 190, 127, 128, 103, 62, 129, 124, 38, 62, 248, 238, 17, 62, 64, 205, 148, 187, 178, 9, 107, 189, 133, 62, 152, 190, 83, 208, 226, 190, 225, 1, 200, 62, 150, 150, 60, 62, 133, 187, 201, 59, 53, 17, 4, 61, 195, 106, 192, 188, 69, 129, 188, 189, 98, 210, 36, 188, 35, 46, 144, 189, 161, 56, 229, 61, 68, 221, 58, 59, 184, 119, 93, 60, 126, 181, 47, 189, 168, 109, 12, 62, 250, 104, 53, 61, 151, 125, 141, 189, 106, 96, 49, 189, 241, 64, 166, 189, 39, 116, 238, 61, 220, 216, 250, 189, 166, 230, 59, 190, 243, 175, 57, 189, 245, 168, 27, 62, 60, 142, 146, 61, 190, 172, 184, 60, 190, 253, 89, 189, 107, 67, 195, 189, 100, 104, 165, 188, 118, 81, 34, 61, 79, 158, 83, 61, 186, 240, 111, 189, 248, 231, 15, 61, 128, 69, 133, 190, 102, 78, 19, 62, 78, 135, 35, 62, 37, 19, 75, 59, 119, 240, 28, 62, 251, 89, 247, 61, 117, 40, 53, 62, 208, 53, 130, 61, 144, 14, 36, 62, 166, 179, 3, 190, 193, 185, 74, 190, 203, 188, 83, 189, 152, 255, 131, 189, 214, 150, 20, 62, 222, 247, 10, 190, 60, 135, 171, 189, 252, 130, 27, 62, 128, 127, 3, 190, 218, 220, 231, 61, 124, 248, 165, 189, 34, 165, 57, 62, 164, 174, 17, 190, 97, 154, 236, 61, 37, 37, 128, 189, 11, 130, 155, 60, 177, 229, 128, 189, 217, 67, 214, 189, 135, 211, 9, 62, 6, 82, 139, 60, 251, 195, 5, 62, 184, 157, 27, 61, 227, 103, 3, 62, 180, 37, 225, 61, 2, 228, 35, 61, 242, 126, 176, 61, 130, 214, 117, 190, 44, 113, 129, 61, 54, 124, 42, 190, 90, 9, 194, 189, 246, 11, 225, 61, 160, 172, 219, 61, 245, 147, 216, 189, 51, 160, 197, 189, 8, 111, 19, 190, 98, 229, 11, 62, 67, 14, 116, 61, 57, 234, 235, 189, 76, 36, 128, 188, 90, 3, 118, 60, 245, 132, 195, 61, 131, 93, 174, 190, 60, 213, 209, 189, 12, 104, 197, 189, 7, 194, 100, 62, 158, 106, 24, 190, 2, 11, 29, 62, 74, 124, 90, 62, 34, 142, 191, 188, 191, 241, 1, 62, 144, 168, 191, 189, 152, 115, 41, 189, 213, 210, 92, 190, 115, 145, 108, 62, 223, 239, 31, 62, 226, 229, 137, 57, 17, 70, 94, 190, 189, 193, 142, 190, 168, 73, 90, 62, 108, 255, 217, 61, 83, 61, 43, 62, 136, 105, 120, 60, 14, 50, 159, 187, 157, 21, 194, 189, 49, 207, 202, 187, 167, 0, 2, 62, 140, 107, 31, 187, 65, 111, 139, 189, 218, 145, 33, 62, 185, 135, 12, 62, 212, 76, 83, 190, 141, 8, 30, 190, 223, 162, 225, 61, 119, 162, 246, 187, 123, 234, 83, 61, 29, 23, 220, 61, 223, 191, 222, 189, 90, 29, 104, 189, 190, 185, 206, 60, 228, 166, 200, 189, 61, 245, 143, 61, 44, 240, 92, 60, 136, 45, 71, 62, 139, 170, 200, 60, 98, 76, 44, 190, 188, 222, 224, 189, 30, 252, 117, 190, 242, 115, 115, 188, 56, 161, 173, 62, 218, 81, 184, 61, 60, 170, 105, 58, 162, 130, 218, 189, 104, 205, 232, 61, 185, 170, 154, 188, 244, 231, 0, 62, 161, 126, 141, 188, 103, 208, 136, 189, 102, 246, 27, 62, 90, 19, 32, 61, 55, 125, 165, 61, 116, 180, 167, 61, 8, 246, 203, 189, 147, 107, 133, 190, 252, 112, 115, 190, 61, 209, 36, 189, 235, 117, 67, 190, 80, 39, 59, 61, 113, 0, 104, 62, 91, 51, 125, 189, 37, 84, 215, 61, 95, 183, 154, 61, 136, 24, 136, 61, 99, 146, 197, 61, 240, 70, 72, 62, 82, 149, 207, 190, 17, 117, 88, 190, 78, 22, 164, 188, 199, 125, 180, 61, 213, 72, 106, 62, 166, 24, 99, 62, 233, 247, 198, 189, 165, 159, 230, 61, 78, 48, 245, 188, 127, 193, 25, 62, 155, 252, 54, 61, 226, 228, 80, 189, 104, 198, 255, 61, 189, 62, 13, 190, 240, 176, 148, 189, 186, 43, 234, 189, 119, 8, 19, 62, 184, 179, 182, 61, 249, 17, 216, 60, 152, 168, 162, 189, 27, 149, 32, 61, 108, 176, 217, 60, 154, 204, 242, 61, 125, 172, 40, 61, 50, 154, 168, 188, 62, 95, 146, 61, 11, 235, 41, 187, 56, 176, 39, 190, 165, 9, 8, 62, 149, 9, 243, 189, 106, 254, 174, 189, 163, 167, 131, 62, 252, 191, 4, 62, 64, 83, 117, 61, 123, 105, 20, 62, 130, 99, 37, 62, 145, 3, 162, 187, 89, 34, 185, 189, 116, 142, 199, 189, 59, 230, 252, 61, 90, 87, 145, 189, 116, 65, 179, 60, 150, 193, 14, 190, 85, 131, 163, 60, 117, 12, 13, 190, 137, 219, 22, 62, 169, 184, 2, 62, 73, 35, 23, 62, 183, 229, 55, 61, 242, 4, 2, 62, 0, 220, 31, 190, 225, 25, 132, 189, 17, 60, 183, 189, 86, 168, 63, 187, 194, 104, 190, 59, 70, 174, 143, 189, 129, 110, 78, 61, 23, 35, 38, 190, 98, 255, 81, 60, 87, 92, 23, 62, 189, 69, 33, 190, 148, 102, 229, 189, 207, 226, 112, 190, 28, 156, 51, 62, 17, 93, 160, 189, 212, 103, 54, 62, 253, 206, 192, 189, 83, 39, 5, 188, 248, 241, 42, 62, 49, 111, 147, 61, 195, 150, 132, 62, 252, 144, 56, 62, 191, 179, 83, 60, 207, 49, 30, 62, 242, 128, 34, 190, 20, 63, 42, 62, 57, 249, 249, 60, 221, 108, 65, 189, 203, 5, 69, 62, 41, 131, 230, 188, 125, 157, 10, 61, 36, 148, 108, 190, 198, 26, 85, 60, 200, 14, 155, 58, 101, 200, 183, 60, 25, 239, 181, 61, 66, 193, 52, 62, 95, 9, 197, 189, 197, 127, 62, 187, 210, 200, 161, 189, 207, 122, 18, 189, 8, 209, 224, 61, 113, 223, 179, 189, 112, 133, 242, 61, 50, 154, 143, 190, 223, 89, 76, 188, 174, 84, 57, 60, 141, 82, 249, 60, 197, 130, 67, 62, 17, 241, 120, 190, 66, 27, 37, 190, 238, 136, 72, 190, 43, 201, 152, 62, 31, 126, 201, 62, 232, 93, 18, 191, 64, 198, 17, 62, 107, 50, 38, 62, 174, 104, 142, 189, 84, 51, 162, 190, 95, 140, 187, 188, 111, 46, 235, 189, 226, 45, 179, 60, 102, 230, 173, 189, 237, 133, 52, 190, 63, 149, 40, 190, 61, 240, 110, 189, 137, 117, 210, 188, 19, 88, 198, 189, 161, 129, 39, 61, 185, 57, 134, 60, 79, 225, 20, 189, 173, 39, 55, 61, 202, 51, 245, 189, 94, 131, 38, 62, 150, 78, 221, 60, 51, 48, 161, 61, 110, 43, 31, 62, 148, 213, 114, 61, 236, 13, 208, 61, 94, 223, 200, 61, 183, 218, 25, 190, 89, 216, 21, 190, 151, 172, 211, 189, 74, 220, 215, 189, 218, 1, 42, 190, 224, 162, 204, 189, 149, 26, 185, 60, 201, 97, 73, 61, 222, 110, 144, 61, 92, 67, 44, 190, 1, 220, 69, 187, 252, 86, 122, 61, 64, 7, 20, 61, 172, 112, 165, 61, 101, 110, 87, 62, 195, 33, 188, 189, 194, 103, 253, 189, 208, 240, 116, 61, 77, 61, 225, 61, 77, 229, 189, 189, 18, 41, 21, 190, 57, 96, 29, 59, 210, 255, 200, 60, 55, 209, 188, 61, 114, 188, 145, 189, 16, 70, 1, 62, 136, 166, 94, 61, 77, 84, 12, 190, 60, 209, 185, 190, 183, 173, 25, 59, 110, 89, 36, 61, 112, 24, 219, 59, 214, 113, 40, 62, 1, 87, 198, 61, 108, 227, 242, 60, 136, 15, 126, 190, 21, 46, 59, 60, 123, 95, 10, 62, 160, 218, 253, 189, 33, 132, 136, 189, 129, 191, 179, 61, 123, 187, 16, 62, 152, 95, 46, 190, 243, 148, 72, 61, 76, 98, 50, 190, 157, 89, 126, 61, 236, 236, 22, 61, 68, 110, 16, 190, 201, 134, 30, 190, 74, 21, 121, 60, 85, 23, 178, 189, 101, 232, 178, 189, 219, 91, 239, 189, 25, 171, 234, 188, 169, 62, 232, 188, 128, 207, 43, 62, 188, 128, 182, 61, 93, 4, 34, 62, 205, 29, 172, 61, 128, 65, 216, 61, 97, 194, 223, 188, 68, 242, 24, 61, 88, 94, 190, 61, 206, 30, 4, 62, 170, 214, 164, 187, 223, 208, 11, 190, 70, 63, 135, 61, 208, 177, 232, 59, 136, 79, 165, 61, 194, 31, 93, 189, 120, 85, 17, 190, 131, 210, 14, 62, 54, 125, 131, 61, 58, 123, 232, 61, 144, 31, 199, 189, 221, 19, 33, 62, 163, 147, 145, 189, 125, 45, 37, 60, 11, 77, 227, 61, 48, 48, 253, 189, 121, 18, 145, 61, 76, 142, 35, 190, 165, 50, 221, 189, 123, 77, 64, 59, 52, 124, 40, 190, 58, 41, 132, 58, 154, 188, 159, 189, 203, 96, 231, 189, 36, 42, 198, 61, 100, 234, 222, 61, 172, 243, 99, 189, 31, 173, 65, 190, 122, 101, 213, 61, 223, 184, 46, 62, 81, 76, 71, 62, 231, 146, 113, 62, 215, 254, 209, 60, 80, 140, 9, 190, 1, 81, 243, 189, 73, 9, 31, 190, 174, 241, 169, 62, 231, 25, 17, 62, 254, 109, 195, 190, 149, 49, 47, 189, 103, 192, 83, 189, 112, 33, 141, 61, 69, 94, 53, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 42, 68, 61, 38, 137, 223, 61, 3, 54, 145, 61, 56, 135, 123, 190, 100, 218, 90, 62, 47, 45, 245, 188, 201, 234, 252, 61, 32, 199, 158, 189, 67, 177, 101, 62, 78, 244, 173, 61, 163, 192, 179, 189, 185, 160, 12, 62, 156, 195, 27, 190, 17, 231, 101, 189, 233, 255, 138, 61, 133, 253, 22, 62, 25, 58, 120, 62, 167, 38, 132, 62, 88, 135, 207, 61, 177, 223, 138, 62, 199, 135, 160, 189, 142, 106, 82, 62, 229, 111, 46, 62, 70, 54, 80, 189, 129, 249, 196, 188, 211, 113, 245, 61, 184, 28, 106, 62, 255, 250, 170, 60, 78, 241, 205, 188, 5, 232, 60, 62, 212, 223, 200, 61, 112, 18, 121, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 220, 50, 62, 180, 198, 147, 61, 195, 113, 226, 60, 68, 132, 121, 190, 45, 11, 153, 62, 71, 147, 60, 62, 244, 31, 56, 190, 245, 95, 138, 190, 145, 23, 76, 190, 252, 155, 53, 62, 116, 103, 33, 190, 95, 152, 57, 190, 21, 202, 23, 61, 195, 214, 251, 189, 185, 145, 76, 60, 193, 242, 34, 62, 70, 7, 81, 61, 232, 87, 223, 190, 2, 192, 104, 61, 46, 101, 4, 63, 84, 86, 21, 62, 240, 47, 60, 59, 220, 15, 135, 190, 216, 162, 231, 60, 186, 115, 228, 189, 172, 200, 79, 61, 207, 219, 244, 61, 152, 175, 48, 62, 193, 80, 72, 189, 191, 35, 223, 61, 211, 23, 61, 61, 81, 130, 202, 62, 76, 231, 9, 62, 173, 243, 35, 61, 32, 225, 11, 60, 217, 86, 157, 61, 90, 244, 93, 190, 84, 231, 242, 189, 171, 156, 200, 189, 223, 106, 48, 189, 113, 79, 59, 61, 211, 13, 203, 61, 7, 46, 140, 188, 93, 200, 161, 188, 236, 28, 251, 61, 169, 229, 168, 189, 226, 22, 154, 189, 254, 82, 199, 187, 78, 33, 183, 189, 117, 178, 215, 189, 163, 152, 138, 189, 167, 231, 66, 189, 228, 72, 104, 61, 82, 196, 35, 190, 127, 157, 49, 190, 112, 173, 57, 190, 1, 191, 150, 189, 62, 94, 41, 190, 225, 252, 220, 189, 59, 242, 201, 188, 153, 252, 81, 61, 148, 36, 37, 188, 50, 46, 65, 190, 17, 74, 198, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 59, 11, 190, 201, 151, 142, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {91, 122, 42, 63, 73, 219, 118, 63, 128, 53, 219, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {227, 30, 246, 191, 7, 196, 81, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0024/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}