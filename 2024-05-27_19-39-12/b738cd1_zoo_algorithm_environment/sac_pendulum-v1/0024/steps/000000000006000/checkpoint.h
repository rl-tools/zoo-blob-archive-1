// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 41, 104, 190, 160, 144, 219, 62, 118, 71, 91, 188, 204, 49, 244, 190, 25, 85, 163, 61, 100, 16, 71, 63, 175, 244, 168, 189, 171, 25, 133, 63, 230, 28, 235, 62, 10, 68, 47, 63, 229, 87, 85, 191, 204, 80, 136, 190, 209, 48, 224, 190, 50, 50, 221, 62, 236, 12, 227, 61, 39, 87, 155, 190, 78, 60, 139, 191, 42, 50, 182, 190, 236, 142, 67, 62, 98, 156, 149, 190, 184, 177, 136, 190, 200, 41, 20, 190, 253, 32, 2, 63, 121, 201, 1, 191, 12, 103, 137, 62, 158, 85, 80, 191, 211, 165, 157, 190, 150, 238, 48, 63, 156, 15, 153, 62, 207, 121, 236, 190, 225, 249, 158, 190, 140, 150, 195, 190, 244, 95, 82, 63, 98, 20, 11, 63, 55, 51, 169, 61, 189, 120, 5, 191, 142, 70, 19, 63, 230, 213, 178, 190, 54, 249, 242, 62, 190, 122, 212, 62, 249, 79, 246, 62, 156, 109, 9, 191, 128, 230, 132, 189, 92, 168, 137, 62, 240, 216, 97, 60, 184, 14, 64, 63, 59, 244, 137, 63, 64, 202, 225, 62, 32, 89, 122, 190, 227, 27, 61, 190, 251, 146, 160, 190, 149, 75, 97, 63, 188, 74, 69, 63, 166, 26, 63, 62, 17, 113, 14, 63, 15, 5, 23, 190, 115, 240, 31, 61, 69, 215, 51, 190, 24, 185, 154, 191, 74, 216, 160, 190, 20, 162, 232, 190, 28, 153, 167, 190, 30, 24, 63, 189, 71, 155, 26, 63, 85, 51, 33, 191, 144, 7, 240, 190, 199, 237, 121, 190, 135, 29, 76, 63, 19, 86, 83, 62, 123, 67, 148, 62, 3, 124, 14, 63, 238, 155, 197, 190, 69, 14, 177, 189, 120, 241, 189, 62, 220, 97, 12, 191, 195, 184, 117, 62, 196, 27, 103, 191, 200, 166, 25, 189, 44, 69, 61, 190, 35, 83, 100, 191, 226, 181, 180, 62, 224, 181, 172, 190, 89, 202, 140, 63, 209, 185, 254, 61, 90, 171, 204, 190, 196, 123, 25, 191, 118, 219, 227, 190, 93, 26, 57, 61, 20, 39, 16, 63, 241, 12, 164, 190, 178, 161, 79, 63, 87, 145, 2, 191, 171, 163, 57, 190, 213, 221, 66, 63, 25, 235, 112, 62, 92, 118, 31, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 102, 25, 191, 167, 153, 51, 190, 27, 77, 6, 63, 98, 93, 134, 62, 144, 254, 21, 63, 145, 163, 114, 190, 69, 93, 44, 191, 169, 128, 97, 190, 143, 240, 73, 190, 219, 67, 251, 61, 119, 196, 105, 190, 199, 109, 240, 189, 150, 202, 43, 63, 148, 41, 163, 62, 145, 151, 198, 190, 88, 20, 242, 188, 144, 137, 149, 189, 192, 30, 15, 62, 139, 64, 32, 63, 187, 147, 165, 58, 253, 11, 215, 62, 2, 253, 172, 188, 45, 137, 20, 63, 77, 185, 142, 62, 57, 167, 23, 191, 52, 164, 199, 61, 176, 6, 22, 63, 6, 169, 151, 62, 63, 122, 174, 62, 86, 19, 181, 62, 108, 207, 143, 190, 154, 113, 71, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 30, 42, 62, 100, 203, 171, 60, 36, 93, 237, 189, 52, 78, 152, 62, 14, 93, 64, 191, 228, 7, 76, 61, 143, 226, 49, 62, 233, 137, 101, 60, 169, 127, 41, 62, 223, 232, 241, 61, 186, 115, 244, 189, 158, 196, 60, 62, 40, 141, 184, 62, 60, 120, 46, 62, 29, 143, 147, 61, 188, 156, 162, 190, 196, 76, 219, 189, 145, 150, 134, 190, 57, 225, 142, 61, 61, 234, 31, 61, 32, 202, 122, 189, 102, 95, 61, 62, 67, 37, 49, 191, 111, 240, 196, 189, 19, 88, 45, 62, 117, 230, 56, 63, 18, 136, 237, 62, 164, 16, 6, 191, 240, 164, 100, 189, 255, 27, 42, 60, 189, 81, 118, 62, 88, 65, 136, 190, 191, 154, 168, 61, 76, 236, 48, 190, 152, 244, 72, 61, 232, 223, 60, 188, 58, 77, 226, 60, 137, 105, 150, 188, 193, 193, 133, 61, 161, 45, 195, 189, 218, 130, 209, 189, 151, 108, 3, 190, 144, 217, 187, 189, 234, 55, 33, 190, 139, 72, 157, 61, 51, 194, 13, 190, 173, 89, 123, 189, 184, 84, 91, 189, 98, 158, 38, 188, 158, 36, 100, 189, 178, 45, 126, 61, 34, 108, 163, 189, 48, 111, 14, 190, 207, 27, 195, 189, 106, 192, 199, 189, 2, 61, 72, 189, 167, 151, 13, 62, 222, 75, 80, 61, 157, 161, 244, 189, 172, 107, 21, 59, 149, 5, 123, 61, 246, 250, 253, 60, 183, 72, 75, 190, 170, 104, 30, 189, 219, 146, 188, 60, 106, 29, 147, 188, 115, 193, 67, 62, 132, 178, 144, 189, 189, 166, 113, 62, 28, 168, 74, 191, 66, 217, 71, 187, 103, 68, 102, 60, 31, 134, 237, 60, 0, 156, 251, 190, 158, 204, 135, 190, 27, 186, 140, 190, 175, 87, 120, 190, 126, 170, 164, 189, 38, 49, 88, 189, 53, 25, 22, 190, 28, 187, 126, 189, 70, 29, 0, 191, 103, 98, 228, 190, 84, 48, 17, 191, 98, 99, 48, 62, 123, 119, 135, 190, 87, 101, 115, 62, 247, 123, 168, 61, 154, 117, 43, 191, 128, 128, 202, 190, 139, 35, 172, 190, 121, 154, 183, 62, 171, 193, 159, 188, 160, 244, 177, 62, 81, 141, 37, 190, 117, 241, 24, 190, 70, 253, 48, 62, 71, 50, 102, 62, 123, 6, 209, 61, 0, 249, 174, 61, 92, 141, 3, 62, 139, 107, 103, 188, 91, 5, 104, 61, 206, 174, 175, 61, 74, 131, 136, 62, 10, 131, 47, 190, 244, 176, 134, 62, 203, 113, 56, 62, 41, 199, 25, 190, 103, 134, 238, 61, 167, 129, 137, 61, 154, 119, 178, 189, 31, 69, 78, 190, 251, 144, 204, 58, 129, 204, 115, 62, 198, 29, 202, 62, 109, 128, 12, 62, 218, 78, 152, 62, 204, 134, 2, 190, 181, 231, 166, 190, 216, 72, 133, 189, 114, 211, 24, 188, 146, 158, 143, 62, 160, 145, 131, 189, 23, 10, 100, 62, 112, 33, 177, 190, 224, 143, 24, 189, 228, 166, 33, 62, 152, 161, 157, 61, 220, 4, 115, 61, 91, 16, 140, 189, 45, 191, 8, 188, 187, 29, 56, 62, 225, 53, 70, 191, 90, 190, 202, 189, 124, 47, 167, 190, 60, 248, 120, 190, 134, 83, 20, 62, 58, 165, 8, 62, 48, 9, 140, 62, 217, 84, 235, 61, 63, 167, 129, 189, 179, 39, 17, 190, 82, 5, 215, 189, 129, 221, 73, 190, 241, 159, 189, 189, 142, 86, 249, 188, 205, 224, 155, 190, 123, 25, 56, 190, 162, 41, 124, 62, 56, 20, 243, 61, 128, 89, 211, 189, 241, 48, 28, 191, 8, 123, 93, 61, 206, 18, 132, 62, 250, 147, 123, 189, 157, 55, 200, 190, 59, 33, 130, 61, 194, 171, 169, 62, 97, 202, 20, 61, 176, 131, 235, 61, 120, 121, 38, 189, 86, 135, 235, 189, 200, 125, 120, 62, 87, 196, 253, 190, 91, 241, 26, 62, 63, 4, 15, 60, 106, 156, 205, 61, 175, 145, 229, 61, 255, 207, 11, 62, 58, 63, 37, 190, 94, 219, 47, 62, 130, 26, 53, 62, 43, 125, 35, 62, 51, 206, 191, 186, 218, 140, 19, 62, 249, 255, 42, 190, 26, 4, 248, 189, 169, 255, 71, 62, 25, 232, 13, 62, 36, 191, 122, 189, 174, 156, 219, 61, 33, 136, 233, 190, 212, 101, 47, 190, 254, 119, 40, 190, 212, 243, 97, 62, 211, 104, 141, 188, 232, 159, 215, 190, 132, 235, 46, 60, 97, 253, 254, 61, 190, 74, 38, 60, 188, 195, 48, 189, 146, 184, 130, 61, 240, 243, 66, 189, 115, 86, 245, 189, 246, 152, 163, 189, 148, 153, 43, 190, 210, 223, 39, 62, 17, 197, 160, 190, 170, 214, 27, 61, 161, 58, 139, 189, 232, 210, 56, 62, 180, 33, 74, 189, 63, 144, 72, 190, 129, 86, 202, 188, 205, 72, 31, 62, 198, 111, 19, 62, 81, 67, 5, 62, 204, 33, 182, 189, 45, 95, 12, 62, 64, 5, 17, 62, 34, 240, 136, 189, 55, 172, 160, 189, 138, 156, 136, 190, 38, 10, 132, 186, 242, 190, 44, 62, 203, 228, 92, 61, 130, 241, 29, 191, 149, 143, 146, 190, 13, 56, 153, 189, 86, 40, 228, 61, 71, 228, 4, 62, 38, 187, 18, 190, 212, 105, 23, 61, 174, 221, 166, 61, 135, 4, 185, 189, 200, 62, 112, 61, 106, 23, 136, 190, 242, 90, 244, 61, 82, 116, 163, 62, 7, 156, 171, 190, 67, 193, 63, 190, 232, 36, 164, 190, 138, 1, 171, 189, 246, 7, 203, 189, 147, 202, 48, 190, 169, 155, 186, 61, 254, 27, 16, 62, 123, 144, 45, 190, 109, 38, 108, 62, 143, 165, 49, 62, 124, 0, 21, 63, 166, 85, 13, 62, 242, 206, 228, 61, 82, 134, 17, 62, 34, 90, 58, 190, 13, 21, 139, 62, 93, 7, 83, 62, 99, 136, 68, 60, 11, 221, 212, 190, 101, 170, 8, 189, 138, 143, 249, 61, 185, 70, 169, 60, 117, 186, 44, 62, 235, 68, 225, 189, 73, 60, 115, 62, 238, 100, 248, 189, 172, 228, 74, 191, 33, 74, 162, 190, 47, 111, 32, 190, 167, 93, 43, 62, 85, 153, 74, 62, 14, 25, 163, 190, 148, 67, 167, 190, 132, 205, 10, 190, 8, 104, 114, 190, 206, 14, 122, 191, 39, 209, 183, 190, 105, 139, 173, 190, 226, 72, 144, 190, 72, 115, 146, 189, 180, 22, 237, 190, 46, 39, 77, 59, 181, 62, 175, 190, 251, 84, 70, 190, 223, 99, 126, 61, 35, 150, 16, 62, 35, 208, 86, 190, 203, 17, 94, 189, 80, 230, 113, 190, 151, 9, 116, 190, 254, 102, 195, 190, 196, 119, 243, 61, 110, 100, 228, 190, 99, 134, 74, 62, 26, 7, 158, 189, 23, 74, 44, 62, 70, 49, 205, 190, 209, 224, 234, 189, 236, 141, 30, 62, 130, 66, 151, 187, 64, 236, 139, 62, 169, 65, 142, 190, 168, 197, 110, 190, 83, 206, 216, 61, 213, 5, 0, 62, 155, 120, 22, 62, 13, 240, 9, 190, 40, 229, 198, 188, 221, 135, 128, 62, 71, 251, 33, 189, 226, 16, 239, 189, 246, 174, 20, 189, 157, 147, 118, 190, 210, 77, 62, 61, 149, 145, 241, 190, 1, 107, 100, 62, 156, 1, 39, 190, 91, 8, 247, 188, 192, 77, 144, 62, 159, 33, 102, 189, 18, 0, 91, 189, 99, 192, 206, 190, 46, 189, 134, 62, 240, 192, 57, 62, 248, 150, 103, 61, 48, 249, 178, 61, 158, 156, 19, 62, 183, 64, 207, 62, 45, 110, 7, 190, 39, 77, 9, 61, 90, 176, 123, 189, 33, 50, 240, 188, 167, 177, 26, 190, 94, 57, 49, 190, 72, 162, 118, 189, 24, 82, 180, 189, 152, 77, 138, 60, 234, 18, 10, 61, 227, 221, 6, 62, 68, 241, 188, 189, 99, 71, 216, 61, 31, 132, 124, 61, 157, 218, 12, 190, 87, 191, 17, 189, 125, 205, 35, 62, 10, 248, 185, 61, 18, 36, 34, 190, 36, 62, 254, 189, 13, 240, 100, 189, 124, 71, 3, 62, 21, 86, 35, 190, 195, 82, 135, 189, 207, 35, 144, 61, 166, 114, 65, 190, 40, 78, 79, 189, 48, 52, 191, 189, 190, 199, 112, 189, 185, 157, 208, 189, 32, 43, 35, 62, 44, 173, 217, 189, 255, 255, 206, 185, 144, 63, 215, 61, 79, 194, 75, 190, 184, 112, 188, 61, 242, 217, 12, 189, 219, 33, 234, 61, 97, 209, 12, 62, 22, 49, 198, 190, 201, 253, 11, 190, 227, 222, 98, 190, 214, 116, 111, 189, 119, 87, 241, 59, 157, 83, 90, 60, 217, 189, 141, 61, 253, 199, 37, 189, 207, 105, 22, 61, 147, 136, 186, 62, 233, 69, 149, 187, 135, 24, 238, 62, 178, 224, 16, 190, 14, 24, 92, 189, 39, 207, 83, 190, 134, 233, 30, 190, 98, 142, 67, 62, 97, 149, 255, 60, 24, 183, 118, 62, 243, 20, 5, 191, 156, 78, 19, 189, 241, 164, 246, 189, 142, 89, 104, 189, 181, 154, 146, 62, 93, 183, 244, 190, 230, 194, 135, 62, 194, 44, 204, 188, 51, 34, 140, 61, 14, 27, 198, 189, 85, 178, 254, 189, 67, 15, 237, 60, 226, 172, 4, 190, 248, 12, 156, 189, 28, 104, 135, 189, 86, 16, 31, 187, 95, 28, 9, 190, 13, 143, 54, 189, 87, 22, 187, 61, 41, 47, 18, 190, 190, 79, 247, 189, 66, 68, 52, 190, 118, 68, 32, 62, 18, 182, 59, 61, 47, 193, 38, 190, 32, 12, 207, 189, 172, 217, 12, 61, 183, 52, 231, 189, 250, 55, 245, 61, 222, 115, 233, 188, 165, 32, 215, 61, 78, 36, 37, 62, 248, 57, 22, 62, 72, 3, 242, 186, 245, 1, 164, 61, 190, 69, 44, 189, 146, 79, 2, 190, 23, 41, 34, 190, 39, 118, 143, 187, 24, 180, 37, 190, 88, 8, 49, 190, 44, 15, 37, 190, 217, 246, 34, 59, 80, 196, 183, 61, 31, 77, 227, 189, 248, 230, 51, 61, 76, 173, 72, 189, 239, 55, 39, 190, 45, 160, 5, 190, 87, 170, 159, 61, 127, 224, 151, 60, 138, 37, 24, 190, 204, 100, 159, 61, 180, 156, 4, 61, 227, 15, 110, 60, 92, 142, 63, 190, 192, 33, 86, 188, 128, 121, 210, 61, 64, 186, 3, 62, 189, 212, 199, 189, 18, 80, 36, 190, 250, 31, 2, 61, 254, 147, 164, 60, 183, 235, 23, 61, 5, 21, 119, 61, 227, 254, 22, 190, 232, 234, 135, 189, 137, 126, 230, 61, 42, 128, 233, 60, 125, 27, 160, 189, 177, 22, 3, 190, 197, 63, 112, 61, 91, 245, 145, 61, 203, 111, 90, 62, 45, 75, 144, 190, 32, 244, 156, 62, 21, 191, 81, 191, 132, 79, 182, 189, 112, 145, 243, 189, 72, 91, 128, 61, 10, 138, 161, 190, 202, 186, 211, 188, 51, 201, 28, 189, 20, 48, 28, 190, 4, 135, 54, 61, 115, 149, 46, 62, 8, 140, 17, 190, 238, 15, 158, 58, 39, 125, 17, 191, 84, 71, 177, 190, 160, 238, 40, 191, 43, 67, 208, 60, 249, 140, 132, 190, 55, 6, 66, 62, 171, 211, 116, 62, 98, 140, 220, 189, 243, 219, 69, 190, 21, 131, 35, 62, 133, 122, 184, 62, 159, 62, 32, 189, 112, 43, 227, 61, 171, 165, 66, 190, 2, 121, 20, 190, 166, 225, 18, 190, 15, 49, 226, 61, 103, 116, 54, 62, 94, 238, 26, 190, 146, 232, 82, 62, 65, 149, 96, 191, 117, 5, 149, 61, 210, 231, 12, 62, 18, 22, 48, 190, 108, 163, 53, 191, 18, 226, 113, 61, 142, 176, 225, 190, 164, 104, 107, 190, 133, 121, 173, 60, 140, 19, 210, 61, 129, 33, 226, 189, 111, 214, 18, 190, 115, 186, 150, 190, 53, 103, 198, 189, 160, 42, 1, 191, 80, 95, 140, 62, 190, 94, 227, 190, 136, 176, 70, 62, 16, 103, 144, 54, 43, 178, 26, 191, 85, 115, 135, 61, 73, 102, 186, 60, 240, 225, 183, 62, 189, 247, 244, 190, 122, 108, 201, 62, 202, 103, 78, 61, 126, 111, 55, 190, 249, 67, 90, 60, 223, 206, 224, 189, 88, 209, 167, 60, 21, 55, 86, 62, 221, 225, 68, 62, 171, 155, 209, 189, 73, 244, 136, 189, 48, 156, 51, 188, 73, 175, 243, 187, 104, 37, 232, 61, 12, 120, 192, 61, 233, 144, 172, 60, 127, 251, 23, 61, 253, 81, 46, 190, 42, 15, 113, 60, 109, 104, 142, 189, 49, 72, 223, 187, 113, 117, 41, 190, 207, 174, 52, 62, 27, 235, 106, 190, 128, 52, 35, 190, 6, 50, 1, 62, 207, 179, 86, 62, 23, 216, 152, 61, 69, 210, 116, 190, 237, 76, 115, 60, 123, 232, 25, 62, 47, 251, 157, 61, 83, 103, 38, 61, 243, 147, 53, 62, 162, 52, 52, 190, 3, 238, 65, 190, 66, 248, 184, 189, 104, 0, 159, 190, 67, 244, 145, 190, 180, 76, 81, 190, 230, 50, 129, 62, 115, 14, 43, 61, 227, 128, 223, 190, 81, 203, 162, 189, 238, 248, 118, 190, 77, 43, 170, 61, 60, 84, 29, 190, 165, 182, 186, 189, 12, 48, 242, 188, 123, 51, 255, 187, 8, 228, 160, 61, 251, 14, 77, 189, 175, 60, 13, 62, 214, 94, 207, 62, 250, 5, 246, 60, 151, 24, 0, 62, 229, 101, 72, 61, 238, 65, 170, 190, 205, 178, 201, 60, 127, 104, 33, 62, 125, 52, 146, 189, 109, 246, 211, 190, 250, 149, 211, 61, 155, 82, 199, 61, 157, 55, 103, 62, 97, 235, 233, 59, 128, 29, 104, 190, 82, 128, 76, 60, 154, 3, 233, 189, 233, 205, 104, 190, 18, 103, 177, 190, 126, 13, 66, 57, 178, 177, 10, 191, 211, 70, 136, 62, 214, 62, 15, 62, 21, 125, 31, 190, 79, 204, 147, 62, 152, 88, 78, 190, 169, 42, 148, 190, 147, 37, 111, 189, 85, 17, 148, 189, 219, 188, 192, 189, 212, 104, 11, 62, 186, 113, 254, 189, 74, 144, 10, 62, 116, 149, 65, 190, 19, 70, 234, 189, 211, 28, 189, 61, 222, 180, 104, 62, 254, 126, 70, 189, 243, 158, 191, 190, 15, 9, 159, 189, 248, 124, 220, 189, 163, 197, 210, 62, 167, 163, 93, 62, 242, 226, 104, 191, 215, 198, 54, 61, 252, 103, 220, 61, 67, 200, 218, 190, 101, 97, 147, 189, 161, 232, 118, 61, 234, 196, 135, 189, 73, 149, 217, 60, 64, 180, 157, 62, 97, 73, 155, 62, 228, 227, 15, 191, 157, 120, 92, 190, 143, 52, 24, 62, 172, 111, 25, 190, 211, 197, 188, 60, 137, 67, 29, 61, 181, 121, 194, 62, 79, 57, 72, 189, 131, 6, 0, 190, 204, 163, 39, 189, 16, 127, 187, 190, 43, 13, 166, 190, 38, 163, 15, 191, 111, 67, 111, 62, 189, 11, 139, 190, 185, 174, 4, 62, 40, 46, 72, 62, 24, 153, 215, 186, 17, 194, 40, 190, 223, 31, 94, 191, 227, 64, 233, 62, 34, 206, 19, 62, 99, 223, 46, 62, 126, 244, 238, 189, 223, 252, 193, 61, 134, 137, 40, 62, 135, 35, 11, 190, 35, 46, 144, 189, 225, 134, 21, 62, 17, 77, 228, 61, 69, 220, 203, 189, 72, 206, 154, 61, 118, 228, 237, 190, 227, 126, 94, 61, 137, 38, 184, 188, 101, 16, 168, 189, 167, 142, 90, 190, 18, 108, 18, 62, 131, 141, 90, 190, 225, 49, 54, 190, 179, 12, 59, 61, 63, 45, 27, 62, 186, 104, 37, 60, 195, 188, 133, 61, 140, 16, 58, 190, 49, 12, 234, 189, 28, 37, 10, 191, 82, 113, 130, 61, 161, 48, 158, 187, 42, 176, 169, 61, 200, 79, 88, 62, 89, 164, 154, 190, 242, 215, 176, 61, 125, 185, 9, 62, 124, 154, 149, 62, 213, 230, 31, 189, 0, 40, 123, 62, 60, 173, 116, 60, 205, 3, 81, 61, 144, 14, 36, 62, 29, 243, 139, 190, 101, 233, 193, 190, 172, 108, 187, 189, 247, 11, 160, 60, 70, 250, 160, 62, 204, 133, 26, 190, 155, 50, 34, 190, 182, 198, 47, 62, 242, 4, 1, 190, 57, 151, 141, 60, 55, 29, 60, 190, 28, 124, 75, 62, 11, 22, 27, 190, 97, 154, 236, 61, 217, 20, 225, 61, 53, 71, 162, 61, 243, 230, 233, 61, 60, 186, 212, 188, 182, 107, 214, 62, 190, 23, 66, 62, 203, 96, 193, 61, 224, 76, 74, 61, 142, 114, 174, 61, 157, 150, 241, 61, 165, 243, 30, 61, 49, 41, 111, 62, 208, 26, 52, 191, 138, 103, 74, 62, 169, 161, 203, 189, 253, 32, 154, 61, 94, 94, 60, 62, 144, 21, 219, 61, 142, 41, 0, 191, 43, 173, 247, 190, 150, 75, 51, 190, 114, 65, 231, 188, 114, 229, 170, 61, 226, 98, 99, 190, 125, 113, 165, 189, 246, 40, 119, 189, 147, 197, 178, 61, 243, 109, 91, 191, 77, 38, 43, 190, 142, 136, 183, 189, 207, 91, 85, 62, 158, 106, 24, 190, 40, 161, 23, 62, 9, 66, 68, 62, 125, 84, 38, 62, 177, 234, 17, 62, 57, 218, 67, 189, 91, 130, 70, 189, 52, 154, 138, 190, 8, 170, 242, 61, 136, 72, 254, 61, 37, 181, 2, 189, 171, 247, 4, 191, 41, 115, 218, 190, 241, 47, 178, 188, 19, 54, 199, 61, 24, 154, 30, 62, 88, 203, 23, 190, 229, 13, 173, 58, 157, 21, 194, 189, 141, 226, 53, 60, 119, 253, 35, 62, 241, 175, 178, 189, 122, 60, 116, 61, 180, 153, 118, 190, 188, 171, 1, 62, 249, 58, 54, 189, 165, 47, 86, 190, 245, 73, 168, 189, 151, 160, 97, 188, 244, 4, 0, 190, 162, 11, 230, 60, 203, 70, 204, 60, 201, 222, 103, 189, 234, 39, 161, 189, 92, 75, 42, 62, 96, 23, 33, 190, 98, 36, 20, 190, 197, 128, 81, 188, 178, 24, 210, 61, 123, 60, 130, 190, 175, 35, 54, 60, 204, 159, 130, 189, 169, 172, 201, 189, 69, 97, 100, 62, 116, 187, 122, 61, 132, 51, 108, 62, 29, 88, 6, 190, 78, 215, 130, 62, 29, 100, 32, 190, 233, 91, 100, 61, 142, 183, 142, 188, 142, 70, 100, 190, 109, 129, 201, 188, 205, 190, 106, 62, 208, 129, 185, 189, 125, 232, 254, 188, 123, 158, 177, 190, 46, 230, 201, 190, 76, 148, 3, 191, 160, 46, 53, 189, 144, 40, 176, 190, 128, 80, 34, 61, 250, 120, 118, 62, 52, 208, 177, 189, 137, 4, 216, 61, 62, 210, 217, 59, 250, 192, 67, 189, 33, 150, 37, 62, 108, 5, 165, 62, 55, 150, 17, 191, 98, 186, 177, 190, 246, 203, 101, 187, 237, 56, 165, 189, 68, 130, 55, 62, 195, 62, 167, 60, 230, 181, 46, 190, 56, 57, 9, 62, 33, 142, 182, 190, 181, 95, 197, 61, 1, 98, 194, 188, 113, 88, 26, 188, 190, 163, 204, 61, 238, 65, 13, 190, 188, 53, 68, 189, 60, 128, 228, 189, 181, 238, 67, 62, 254, 90, 76, 62, 135, 68, 151, 60, 183, 70, 89, 190, 152, 218, 11, 61, 93, 253, 13, 190, 233, 23, 72, 62, 253, 4, 42, 61, 188, 251, 113, 188, 24, 100, 150, 61, 68, 133, 64, 61, 55, 104, 39, 190, 171, 150, 223, 61, 6, 77, 12, 190, 194, 233, 119, 188, 20, 20, 180, 62, 172, 174, 146, 61, 214, 253, 242, 61, 141, 157, 13, 62, 24, 222, 133, 62, 70, 242, 18, 61, 204, 74, 23, 190, 176, 125, 30, 190, 234, 68, 30, 62, 117, 52, 90, 189, 46, 248, 5, 61, 184, 44, 165, 189, 22, 95, 146, 61, 194, 180, 31, 190, 190, 217, 22, 62, 90, 110, 26, 62, 201, 105, 76, 62, 136, 145, 253, 61, 62, 189, 26, 62, 173, 212, 133, 190, 213, 116, 125, 189, 151, 236, 104, 189, 147, 14, 87, 189, 75, 199, 170, 61, 119, 77, 132, 189, 109, 78, 215, 61, 167, 20, 28, 190, 244, 87, 178, 61, 8, 81, 23, 62, 150, 165, 98, 190, 111, 65, 233, 189, 143, 114, 162, 190, 28, 208, 76, 62, 123, 62, 162, 190, 241, 249, 235, 61, 115, 211, 21, 189, 29, 217, 187, 60, 140, 116, 131, 62, 214, 130, 12, 61, 176, 37, 134, 62, 132, 83, 10, 62, 115, 37, 16, 62, 106, 62, 185, 61, 24, 163, 12, 190, 20, 246, 102, 62, 112, 142, 142, 59, 38, 58, 65, 189, 156, 95, 202, 61, 51, 72, 84, 189, 25, 24, 82, 189, 234, 94, 179, 190, 204, 226, 85, 189, 234, 194, 33, 188, 141, 229, 138, 188, 46, 102, 190, 60, 178, 137, 222, 61, 93, 64, 97, 190, 210, 218, 60, 189, 70, 163, 14, 190, 187, 126, 216, 189, 8, 209, 224, 61, 84, 125, 193, 189, 187, 103, 77, 61, 154, 1, 38, 190, 126, 114, 3, 190, 164, 94, 208, 189, 244, 170, 111, 189, 75, 113, 242, 61, 53, 119, 169, 190, 106, 50, 108, 190, 246, 114, 150, 190, 68, 177, 235, 61, 189, 159, 91, 62, 33, 27, 41, 191, 202, 212, 142, 61, 1, 235, 208, 61, 76, 234, 227, 189, 27, 175, 170, 190, 95, 140, 187, 188, 132, 91, 238, 189, 96, 136, 156, 60, 43, 164, 171, 189, 144, 25, 54, 190, 63, 149, 40, 190, 61, 240, 110, 189, 137, 117, 210, 188, 19, 88, 198, 189, 102, 96, 41, 61, 21, 166, 125, 60, 157, 196, 20, 189, 205, 75, 48, 61, 206, 206, 243, 189, 94, 131, 38, 62, 203, 251, 201, 60, 51, 48, 161, 61, 65, 29, 30, 62, 178, 121, 112, 61, 236, 13, 208, 61, 94, 223, 200, 61, 255, 218, 25, 190, 38, 121, 23, 190, 178, 23, 211, 189, 74, 220, 215, 189, 237, 233, 41, 190, 127, 106, 205, 189, 201, 169, 174, 60, 201, 97, 73, 61, 79, 235, 145, 61, 11, 20, 44, 190, 22, 202, 183, 187, 252, 86, 122, 61, 40, 127, 125, 61, 25, 145, 232, 61, 106, 133, 189, 62, 164, 128, 194, 189, 6, 217, 135, 190, 183, 121, 33, 62, 191, 40, 135, 62, 48, 67, 167, 189, 19, 240, 202, 189, 111, 68, 196, 60, 229, 106, 99, 62, 186, 198, 165, 61, 224, 229, 139, 188, 67, 82, 254, 61, 237, 159, 61, 190, 77, 212, 8, 190, 136, 53, 45, 191, 204, 120, 199, 60, 166, 48, 155, 190, 172, 26, 217, 188, 160, 126, 154, 62, 67, 115, 116, 61, 101, 211, 196, 61, 121, 6, 216, 190, 109, 22, 208, 61, 66, 66, 26, 62, 201, 71, 158, 189, 207, 81, 231, 189, 98, 9, 24, 62, 65, 189, 193, 62, 63, 164, 136, 190, 44, 125, 71, 61, 199, 168, 138, 190, 233, 112, 248, 189, 160, 209, 184, 61, 230, 58, 35, 190, 194, 192, 2, 190, 69, 27, 103, 189, 22, 26, 201, 189, 81, 164, 86, 190, 0, 184, 35, 189, 64, 60, 237, 189, 133, 49, 4, 189, 207, 152, 153, 62, 150, 25, 22, 62, 93, 4, 34, 62, 6, 154, 94, 61, 89, 79, 232, 61, 196, 232, 112, 62, 110, 13, 97, 62, 162, 206, 111, 61, 44, 123, 72, 62, 94, 63, 108, 186, 174, 118, 26, 190, 219, 97, 231, 61, 230, 34, 71, 188, 108, 228, 129, 61, 163, 136, 221, 188, 179, 16, 195, 190, 90, 251, 42, 62, 72, 118, 2, 62, 174, 73, 34, 62, 41, 157, 138, 188, 221, 19, 33, 62, 12, 214, 175, 60, 172, 129, 1, 62, 58, 107, 52, 62, 125, 36, 79, 189, 63, 28, 155, 190, 183, 229, 92, 190, 46, 191, 24, 190, 233, 73, 151, 188, 186, 193, 71, 190, 77, 116, 19, 61, 234, 249, 178, 61, 187, 48, 6, 190, 228, 139, 219, 61, 106, 255, 220, 61, 76, 15, 21, 190, 18, 197, 119, 190, 2, 241, 201, 60, 124, 165, 23, 62, 135, 142, 24, 190, 157, 108, 48, 62, 170, 29, 23, 62, 189, 117, 212, 188, 152, 36, 187, 189, 92, 0, 1, 191, 125, 149, 153, 62, 66, 234, 249, 61, 175, 133, 133, 189, 163, 170, 108, 190, 79, 222, 69, 189, 48, 179, 62, 62, 180, 207, 88, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 120, 51, 61, 38, 137, 223, 61, 62, 115, 47, 62, 52, 43, 48, 190, 176, 204, 107, 62, 192, 24, 198, 187, 224, 43, 208, 61, 148, 212, 222, 188, 14, 133, 94, 62, 23, 253, 26, 62, 163, 192, 179, 189, 54, 197, 193, 61, 156, 195, 27, 190, 165, 185, 140, 189, 122, 33, 156, 61, 95, 104, 119, 62, 215, 70, 185, 62, 11, 97, 178, 62, 6, 154, 137, 62, 48, 162, 171, 62, 50, 115, 2, 189, 226, 79, 177, 62, 138, 168, 221, 61, 254, 121, 243, 59, 20, 40, 30, 189, 12, 20, 152, 62, 96, 235, 141, 62, 156, 250, 189, 189, 197, 119, 210, 188, 201, 53, 119, 62, 250, 119, 128, 62, 6, 27, 108, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 219, 200, 62, 180, 198, 147, 61, 159, 212, 49, 63, 13, 89, 156, 190, 142, 23, 196, 62, 135, 82, 115, 62, 102, 39, 84, 190, 63, 116, 201, 190, 9, 182, 26, 191, 67, 141, 186, 62, 116, 103, 33, 190, 67, 252, 127, 190, 21, 202, 23, 61, 103, 164, 250, 189, 183, 196, 245, 62, 164, 220, 21, 63, 124, 158, 138, 186, 193, 95, 48, 191, 43, 159, 97, 62, 223, 92, 92, 63, 92, 55, 138, 62, 59, 149, 199, 190, 220, 109, 188, 190, 67, 14, 151, 61, 133, 47, 237, 189, 240, 200, 152, 189, 150, 184, 170, 61, 3, 116, 235, 61, 198, 102, 62, 189, 41, 176, 195, 62, 6, 2, 12, 189, 104, 10, 195, 62, 11, 155, 140, 62, 173, 243, 35, 61, 128, 77, 7, 62, 74, 31, 13, 62, 192, 63, 89, 190, 178, 128, 207, 189, 102, 201, 83, 189, 24, 182, 19, 61, 20, 242, 54, 62, 164, 114, 142, 62, 7, 46, 140, 188, 134, 162, 156, 60, 236, 28, 251, 61, 193, 44, 168, 189, 36, 100, 155, 189, 101, 20, 236, 60, 156, 191, 42, 190, 33, 104, 35, 61, 150, 130, 136, 190, 58, 7, 144, 61, 237, 243, 192, 60, 7, 190, 108, 190, 241, 91, 20, 190, 87, 8, 254, 189, 77, 18, 174, 190, 235, 101, 128, 190, 146, 40, 110, 190, 138, 118, 221, 59, 181, 50, 94, 61, 120, 93, 141, 60, 87, 27, 197, 190, 61, 117, 17, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {124, 79, 61, 190, 135, 195, 6, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {118, 5, 107, 63, 16, 191, 85, 63, 97, 136, 204, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {108, 195, 224, 191, 152, 204, 166, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0024/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}