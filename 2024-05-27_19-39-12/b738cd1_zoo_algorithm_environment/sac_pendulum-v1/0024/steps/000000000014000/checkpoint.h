// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 41, 104, 190, 160, 144, 219, 62, 118, 71, 91, 188, 14, 173, 228, 190, 91, 77, 171, 62, 26, 184, 50, 63, 214, 168, 250, 189, 234, 191, 159, 63, 190, 73, 201, 62, 151, 68, 21, 63, 179, 212, 150, 191, 55, 253, 128, 190, 136, 67, 246, 190, 204, 154, 226, 62, 39, 254, 4, 62, 112, 250, 161, 190, 122, 245, 212, 191, 176, 162, 179, 190, 92, 4, 213, 62, 123, 64, 137, 190, 210, 175, 122, 190, 173, 166, 230, 190, 35, 203, 239, 62, 188, 201, 212, 190, 15, 174, 107, 62, 247, 166, 136, 191, 99, 141, 152, 190, 140, 165, 11, 63, 139, 90, 169, 62, 63, 189, 201, 190, 214, 27, 52, 190, 17, 26, 180, 190, 83, 245, 45, 63, 103, 106, 254, 62, 94, 202, 35, 62, 11, 149, 5, 191, 249, 95, 210, 62, 183, 232, 167, 190, 214, 135, 199, 62, 6, 33, 77, 62, 244, 211, 29, 63, 156, 156, 199, 190, 128, 230, 132, 189, 92, 168, 137, 62, 240, 216, 97, 60, 231, 66, 42, 63, 11, 25, 183, 63, 185, 174, 204, 62, 192, 157, 213, 190, 142, 54, 123, 190, 244, 19, 127, 190, 154, 40, 120, 63, 132, 43, 76, 63, 81, 84, 37, 62, 172, 36, 4, 63, 169, 99, 205, 190, 253, 92, 197, 60, 29, 104, 91, 190, 49, 86, 214, 191, 134, 86, 193, 190, 194, 24, 237, 190, 244, 216, 35, 191, 27, 239, 203, 60, 174, 41, 28, 63, 171, 42, 75, 191, 159, 222, 218, 190, 38, 117, 82, 190, 155, 38, 153, 63, 164, 71, 136, 62, 121, 154, 129, 62, 163, 88, 33, 63, 29, 156, 146, 190, 190, 137, 149, 189, 249, 224, 142, 62, 107, 246, 241, 190, 102, 142, 90, 62, 19, 41, 129, 191, 196, 228, 72, 190, 75, 43, 81, 190, 118, 212, 134, 191, 12, 23, 118, 62, 2, 220, 92, 190, 195, 40, 168, 63, 252, 116, 126, 62, 248, 80, 5, 191, 107, 198, 187, 190, 86, 137, 217, 190, 170, 116, 59, 188, 153, 245, 81, 63, 100, 248, 168, 190, 214, 107, 78, 63, 163, 189, 36, 191, 138, 76, 114, 190, 22, 16, 82, 63, 142, 244, 146, 62, 112, 39, 28, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 102, 25, 191, 241, 145, 183, 189, 58, 194, 153, 62, 237, 154, 169, 62, 178, 145, 5, 63, 67, 122, 86, 190, 138, 175, 101, 191, 95, 167, 181, 190, 152, 206, 93, 190, 97, 178, 12, 190, 84, 89, 197, 190, 6, 193, 133, 190, 116, 247, 57, 63, 96, 129, 42, 61, 145, 151, 198, 190, 121, 226, 3, 190, 165, 4, 113, 189, 254, 31, 128, 62, 98, 130, 231, 62, 50, 73, 38, 190, 81, 86, 178, 62, 27, 33, 197, 189, 67, 63, 209, 62, 181, 168, 112, 62, 10, 42, 34, 191, 136, 137, 212, 61, 65, 221, 44, 63, 72, 32, 85, 62, 183, 85, 198, 62, 51, 105, 17, 62, 228, 136, 180, 190, 181, 5, 61, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 30, 42, 62, 251, 16, 135, 187, 60, 129, 128, 190, 10, 252, 150, 62, 212, 202, 22, 191, 93, 126, 202, 188, 70, 204, 174, 62, 140, 221, 210, 59, 96, 59, 161, 61, 245, 119, 208, 61, 119, 224, 255, 189, 9, 175, 28, 62, 101, 112, 221, 62, 19, 241, 31, 62, 29, 143, 147, 61, 38, 21, 216, 190, 10, 231, 207, 189, 7, 57, 164, 190, 41, 36, 122, 61, 91, 40, 112, 188, 190, 164, 52, 62, 43, 81, 240, 61, 151, 147, 115, 191, 108, 173, 199, 189, 79, 189, 64, 62, 80, 215, 46, 63, 222, 235, 14, 63, 198, 222, 144, 191, 226, 195, 146, 189, 221, 186, 228, 59, 170, 170, 145, 62, 210, 125, 183, 190, 191, 154, 168, 61, 76, 236, 48, 190, 152, 244, 72, 61, 232, 223, 60, 188, 58, 77, 226, 60, 137, 105, 150, 188, 193, 193, 133, 61, 161, 45, 195, 189, 218, 130, 209, 189, 151, 108, 3, 190, 144, 217, 187, 189, 234, 55, 33, 190, 139, 72, 157, 61, 51, 194, 13, 190, 173, 89, 123, 189, 184, 84, 91, 189, 98, 158, 38, 188, 158, 36, 100, 189, 178, 45, 126, 61, 34, 108, 163, 189, 48, 111, 14, 190, 207, 27, 195, 189, 106, 192, 199, 189, 2, 61, 72, 189, 167, 151, 13, 62, 222, 75, 80, 61, 157, 161, 244, 189, 172, 107, 21, 59, 149, 5, 123, 61, 246, 250, 253, 60, 183, 72, 75, 190, 170, 104, 30, 189, 219, 146, 188, 60, 105, 186, 137, 189, 39, 90, 68, 62, 240, 126, 135, 189, 105, 85, 130, 62, 208, 91, 208, 191, 66, 217, 71, 187, 106, 52, 40, 189, 31, 134, 237, 60, 218, 50, 222, 190, 110, 28, 147, 190, 232, 150, 124, 190, 177, 161, 61, 190, 156, 75, 172, 189, 38, 49, 88, 189, 24, 42, 250, 61, 90, 128, 216, 61, 61, 34, 91, 190, 17, 252, 206, 190, 80, 198, 164, 191, 45, 53, 184, 61, 145, 1, 137, 190, 81, 253, 129, 62, 76, 22, 23, 61, 92, 58, 16, 191, 236, 173, 232, 190, 126, 32, 192, 190, 162, 39, 180, 62, 78, 205, 198, 61, 176, 207, 137, 62, 213, 239, 37, 190, 112, 80, 2, 61, 70, 253, 48, 62, 164, 12, 119, 62, 170, 145, 245, 61, 185, 111, 254, 61, 121, 148, 131, 61, 116, 73, 19, 62, 184, 240, 8, 62, 204, 201, 104, 61, 106, 180, 216, 62, 198, 215, 47, 190, 143, 103, 137, 62, 97, 118, 65, 62, 79, 225, 55, 190, 154, 190, 194, 61, 167, 129, 137, 61, 226, 121, 244, 189, 126, 133, 15, 190, 217, 10, 26, 189, 56, 123, 132, 62, 23, 13, 20, 63, 215, 64, 0, 62, 32, 219, 198, 62, 67, 158, 45, 190, 234, 152, 196, 190, 92, 127, 214, 189, 9, 54, 113, 61, 202, 248, 146, 62, 215, 26, 59, 190, 138, 143, 153, 62, 172, 103, 217, 190, 112, 229, 123, 61, 172, 180, 58, 62, 152, 161, 157, 61, 31, 17, 188, 60, 167, 76, 9, 190, 222, 69, 103, 61, 21, 107, 90, 62, 147, 82, 130, 191, 237, 83, 231, 190, 70, 74, 227, 190, 20, 124, 125, 190, 16, 169, 16, 62, 29, 127, 203, 61, 80, 54, 157, 62, 105, 106, 205, 61, 10, 205, 79, 189, 179, 39, 17, 190, 54, 179, 183, 189, 108, 211, 7, 190, 191, 67, 113, 189, 42, 207, 198, 188, 212, 179, 46, 191, 78, 194, 208, 189, 105, 88, 112, 62, 151, 196, 185, 61, 92, 13, 187, 189, 76, 200, 227, 190, 39, 61, 63, 62, 60, 191, 129, 62, 102, 89, 102, 188, 203, 124, 198, 190, 146, 33, 252, 61, 125, 243, 164, 62, 111, 102, 94, 188, 176, 131, 235, 61, 124, 193, 215, 61, 150, 41, 122, 190, 108, 205, 95, 62, 43, 195, 81, 191, 207, 101, 137, 188, 99, 161, 229, 61, 143, 97, 29, 62, 255, 95, 76, 61, 218, 1, 27, 62, 13, 142, 89, 61, 32, 255, 78, 62, 39, 194, 125, 62, 18, 4, 55, 62, 51, 206, 191, 186, 41, 114, 39, 61, 29, 197, 44, 190, 34, 94, 102, 190, 185, 201, 41, 62, 202, 85, 46, 189, 252, 103, 253, 189, 171, 239, 149, 61, 200, 73, 81, 191, 79, 219, 17, 190, 195, 70, 123, 189, 92, 192, 35, 62, 104, 141, 168, 61, 112, 3, 128, 191, 203, 235, 81, 189, 33, 134, 58, 62, 49, 22, 199, 59, 8, 120, 58, 60, 146, 184, 130, 61, 21, 97, 209, 188, 174, 250, 68, 190, 97, 243, 207, 189, 86, 159, 5, 190, 81, 68, 172, 62, 153, 17, 41, 191, 5, 245, 167, 61, 124, 35, 13, 190, 90, 236, 51, 62, 177, 77, 152, 188, 5, 71, 54, 190, 149, 176, 178, 189, 131, 110, 39, 62, 198, 111, 19, 62, 64, 128, 149, 61, 60, 97, 187, 189, 91, 97, 141, 62, 212, 33, 13, 62, 88, 196, 253, 60, 147, 159, 255, 60, 135, 79, 139, 190, 6, 59, 41, 62, 74, 119, 52, 62, 13, 19, 92, 61, 70, 19, 51, 191, 144, 249, 1, 191, 170, 58, 199, 61, 5, 2, 15, 62, 45, 216, 43, 62, 10, 152, 218, 190, 151, 153, 93, 61, 174, 221, 166, 61, 58, 128, 130, 189, 200, 130, 221, 61, 253, 7, 203, 190, 126, 56, 190, 61, 27, 83, 70, 62, 192, 53, 62, 191, 222, 133, 9, 190, 80, 215, 35, 191, 114, 38, 93, 189, 23, 12, 191, 189, 208, 13, 34, 190, 92, 41, 199, 61, 69, 160, 41, 62, 123, 144, 45, 190, 32, 222, 115, 62, 70, 134, 191, 61, 250, 253, 35, 63, 233, 161, 4, 62, 106, 162, 15, 190, 147, 19, 194, 188, 231, 180, 67, 190, 153, 19, 183, 62, 228, 104, 114, 62, 78, 165, 25, 61, 49, 198, 48, 191, 42, 203, 97, 189, 243, 241, 26, 62, 156, 172, 182, 188, 37, 60, 74, 62, 61, 70, 97, 190, 103, 216, 141, 62, 238, 100, 248, 189, 230, 3, 50, 191, 223, 138, 178, 190, 254, 196, 38, 191, 248, 249, 76, 62, 118, 108, 188, 61, 14, 25, 163, 190, 179, 152, 76, 190, 134, 176, 168, 190, 224, 177, 122, 190, 81, 244, 122, 191, 202, 39, 193, 190, 59, 177, 158, 190, 105, 213, 81, 190, 72, 115, 146, 189, 180, 22, 237, 190, 41, 98, 212, 59, 181, 62, 175, 190, 249, 112, 229, 190, 106, 46, 30, 189, 179, 160, 14, 62, 71, 5, 157, 190, 73, 138, 10, 59, 64, 19, 31, 190, 49, 58, 93, 190, 79, 94, 129, 191, 105, 202, 138, 61, 13, 69, 185, 190, 64, 86, 69, 62, 150, 163, 128, 188, 92, 203, 49, 62, 70, 49, 205, 190, 209, 224, 234, 189, 123, 226, 29, 62, 32, 241, 110, 189, 128, 181, 148, 62, 241, 212, 40, 190, 77, 77, 198, 190, 171, 227, 153, 62, 10, 94, 31, 62, 117, 248, 82, 61, 98, 5, 19, 190, 43, 172, 138, 187, 136, 84, 99, 62, 24, 113, 213, 60, 117, 205, 244, 189, 246, 174, 20, 189, 220, 156, 175, 190, 193, 212, 123, 61, 92, 255, 17, 191, 15, 137, 73, 62, 132, 62, 159, 190, 70, 126, 112, 61, 183, 189, 92, 62, 222, 37, 66, 190, 30, 29, 15, 189, 228, 15, 184, 190, 152, 251, 101, 62, 157, 44, 102, 62, 226, 183, 197, 189, 160, 202, 63, 61, 14, 189, 51, 62, 59, 248, 235, 62, 225, 205, 61, 190, 39, 77, 9, 61, 90, 176, 123, 189, 33, 50, 240, 188, 167, 177, 26, 190, 94, 57, 49, 190, 72, 162, 118, 189, 24, 82, 180, 189, 152, 77, 138, 60, 234, 18, 10, 61, 227, 221, 6, 62, 68, 241, 188, 189, 99, 71, 216, 61, 31, 132, 124, 61, 157, 218, 12, 190, 87, 191, 17, 189, 125, 205, 35, 62, 10, 248, 185, 61, 18, 36, 34, 190, 36, 62, 254, 189, 13, 240, 100, 189, 124, 71, 3, 62, 21, 86, 35, 190, 195, 82, 135, 189, 207, 35, 144, 61, 166, 114, 65, 190, 40, 78, 79, 189, 48, 52, 191, 189, 190, 199, 112, 189, 185, 157, 208, 189, 32, 43, 35, 62, 44, 173, 217, 189, 255, 255, 206, 185, 144, 63, 215, 61, 162, 208, 32, 190, 53, 216, 16, 62, 218, 255, 236, 189, 116, 197, 21, 62, 92, 117, 0, 62, 200, 35, 104, 191, 10, 136, 243, 189, 190, 62, 0, 191, 220, 84, 87, 189, 137, 95, 231, 60, 28, 177, 196, 187, 144, 219, 215, 61, 62, 80, 18, 189, 207, 105, 22, 61, 79, 206, 191, 62, 84, 178, 171, 189, 196, 39, 11, 63, 160, 48, 224, 189, 234, 4, 19, 190, 149, 154, 104, 190, 140, 209, 43, 190, 5, 248, 145, 62, 243, 61, 40, 61, 79, 231, 91, 62, 150, 50, 46, 191, 183, 0, 34, 59, 48, 230, 210, 189, 194, 55, 142, 189, 227, 68, 151, 62, 87, 234, 18, 191, 237, 42, 158, 62, 194, 44, 204, 188, 51, 34, 140, 61, 14, 27, 198, 189, 85, 178, 254, 189, 67, 15, 237, 60, 226, 172, 4, 190, 248, 12, 156, 189, 28, 104, 135, 189, 86, 16, 31, 187, 95, 28, 9, 190, 13, 143, 54, 189, 87, 22, 187, 61, 41, 47, 18, 190, 190, 79, 247, 189, 66, 68, 52, 190, 118, 68, 32, 62, 18, 182, 59, 61, 47, 193, 38, 190, 32, 12, 207, 189, 172, 217, 12, 61, 183, 52, 231, 189, 250, 55, 245, 61, 222, 115, 233, 188, 165, 32, 215, 61, 78, 36, 37, 62, 248, 57, 22, 62, 72, 3, 242, 186, 245, 1, 164, 61, 190, 69, 44, 189, 146, 79, 2, 190, 23, 41, 34, 190, 39, 118, 143, 187, 24, 180, 37, 190, 88, 8, 49, 190, 48, 15, 37, 190, 217, 246, 34, 59, 216, 65, 164, 61, 45, 68, 233, 189, 248, 230, 51, 61, 202, 210, 115, 189, 239, 55, 39, 190, 225, 247, 9, 190, 87, 170, 159, 61, 129, 29, 118, 60, 138, 37, 24, 190, 182, 6, 139, 61, 180, 156, 4, 61, 227, 15, 110, 60, 190, 147, 69, 190, 192, 33, 86, 188, 205, 61, 210, 61, 8, 15, 1, 62, 100, 110, 213, 189, 45, 126, 36, 190, 233, 225, 203, 60, 165, 42, 51, 60, 217, 239, 254, 60, 5, 21, 119, 61, 227, 254, 22, 190, 129, 255, 148, 189, 202, 111, 198, 61, 87, 32, 141, 60, 125, 27, 160, 189, 177, 22, 3, 190, 197, 63, 112, 61, 254, 241, 191, 61, 115, 237, 93, 62, 200, 24, 115, 191, 153, 138, 162, 62, 141, 69, 241, 191, 162, 14, 186, 189, 159, 187, 197, 189, 145, 81, 9, 61, 188, 115, 168, 190, 185, 242, 52, 57, 217, 224, 89, 61, 186, 111, 19, 190, 216, 221, 222, 59, 115, 149, 46, 62, 72, 232, 4, 190, 194, 6, 30, 62, 147, 196, 64, 191, 29, 132, 227, 190, 128, 5, 201, 191, 108, 211, 34, 188, 247, 39, 131, 190, 3, 43, 87, 62, 5, 103, 52, 62, 222, 232, 189, 59, 77, 88, 168, 190, 238, 55, 20, 62, 64, 168, 190, 62, 186, 77, 183, 189, 188, 163, 171, 60, 7, 217, 80, 190, 175, 18, 24, 190, 166, 225, 18, 190, 246, 21, 238, 61, 255, 16, 37, 62, 197, 26, 52, 191, 71, 236, 122, 62, 201, 179, 219, 191, 117, 5, 149, 61, 51, 213, 83, 62, 18, 22, 48, 190, 170, 99, 66, 191, 142, 191, 138, 61, 186, 114, 240, 190, 34, 103, 125, 190, 180, 186, 128, 60, 140, 19, 210, 61, 193, 6, 29, 190, 12, 19, 207, 61, 130, 236, 9, 191, 32, 237, 108, 190, 215, 98, 152, 191, 87, 38, 154, 62, 190, 94, 227, 190, 69, 134, 85, 62, 8, 9, 55, 189, 200, 66, 234, 190, 27, 209, 209, 189, 171, 193, 195, 59, 218, 70, 190, 62, 208, 7, 225, 190, 217, 134, 178, 62, 202, 103, 78, 61, 224, 176, 96, 190, 249, 67, 90, 60, 120, 253, 251, 189, 240, 149, 31, 60, 107, 52, 128, 62, 204, 197, 233, 61, 126, 192, 208, 189, 52, 47, 70, 190, 107, 92, 32, 188, 34, 188, 73, 61, 66, 42, 185, 61, 30, 131, 148, 61, 125, 109, 163, 61, 52, 173, 23, 189, 203, 76, 66, 190, 42, 15, 113, 60, 211, 119, 96, 189, 3, 55, 147, 188, 2, 78, 92, 190, 26, 88, 25, 62, 225, 250, 144, 190, 64, 206, 45, 190, 187, 84, 67, 62, 33, 243, 96, 62, 71, 64, 74, 61, 156, 132, 78, 190, 64, 28, 109, 61, 235, 33, 70, 62, 227, 137, 247, 61, 42, 27, 176, 61, 142, 61, 82, 62, 121, 229, 91, 190, 41, 2, 60, 190, 66, 248, 184, 189, 109, 24, 235, 190, 244, 111, 50, 190, 154, 114, 59, 190, 242, 233, 139, 62, 180, 177, 182, 62, 140, 25, 93, 191, 11, 200, 148, 189, 65, 2, 131, 190, 171, 245, 137, 61, 137, 59, 239, 190, 146, 180, 216, 189, 230, 211, 224, 188, 30, 208, 5, 189, 8, 228, 160, 61, 50, 110, 161, 189, 43, 123, 32, 62, 142, 67, 231, 62, 240, 10, 140, 61, 215, 226, 187, 62, 180, 74, 21, 61, 203, 54, 174, 190, 67, 138, 87, 62, 128, 238, 3, 62, 111, 196, 195, 189, 209, 163, 194, 190, 49, 210, 13, 62, 63, 135, 168, 62, 234, 244, 130, 62, 75, 99, 183, 188, 143, 61, 177, 190, 72, 11, 191, 60, 154, 3, 233, 189, 98, 104, 72, 62, 214, 3, 130, 189, 222, 102, 217, 188, 186, 219, 158, 190, 126, 254, 134, 62, 132, 73, 174, 62, 36, 68, 94, 190, 222, 149, 148, 62, 79, 20, 48, 190, 36, 30, 81, 59, 81, 87, 85, 189, 94, 237, 186, 188, 50, 64, 216, 189, 212, 104, 11, 62, 23, 176, 71, 190, 138, 12, 21, 61, 235, 238, 9, 192, 71, 142, 18, 190, 71, 182, 178, 61, 229, 212, 133, 62, 171, 121, 162, 188, 216, 128, 215, 61, 178, 179, 155, 189, 182, 163, 240, 189, 203, 152, 196, 62, 45, 1, 171, 62, 76, 128, 147, 191, 13, 197, 28, 188, 120, 79, 128, 61, 100, 202, 136, 190, 87, 209, 128, 191, 161, 232, 118, 61, 108, 177, 64, 189, 40, 78, 25, 190, 50, 115, 229, 62, 134, 54, 130, 62, 121, 32, 58, 191, 164, 80, 188, 61, 83, 48, 137, 61, 247, 40, 111, 189, 105, 133, 127, 61, 152, 162, 214, 61, 77, 26, 229, 62, 114, 204, 207, 188, 102, 76, 196, 189, 204, 163, 39, 189, 29, 179, 247, 190, 136, 6, 224, 190, 247, 124, 29, 191, 205, 20, 133, 62, 60, 198, 213, 190, 242, 174, 102, 62, 64, 191, 130, 62, 103, 106, 53, 190, 216, 179, 14, 190, 162, 141, 71, 191, 42, 1, 26, 63, 106, 76, 52, 62, 147, 181, 172, 189, 202, 63, 106, 190, 48, 192, 169, 61, 169, 59, 156, 62, 30, 150, 47, 190, 35, 46, 144, 189, 14, 111, 87, 61, 125, 172, 228, 61, 86, 65, 178, 61, 108, 19, 189, 61, 187, 253, 175, 191, 215, 124, 181, 60, 193, 148, 132, 189, 114, 229, 73, 62, 176, 18, 224, 189, 137, 147, 46, 61, 219, 131, 79, 190, 127, 138, 115, 190, 126, 230, 224, 61, 63, 45, 27, 62, 166, 233, 163, 61, 20, 130, 230, 61, 196, 15, 194, 189, 168, 240, 9, 190, 238, 68, 166, 191, 72, 147, 10, 189, 159, 7, 184, 190, 239, 150, 20, 62, 5, 109, 134, 62, 163, 87, 127, 190, 123, 214, 129, 62, 89, 145, 255, 60, 213, 82, 241, 62, 237, 29, 189, 189, 181, 3, 134, 62, 157, 149, 228, 190, 0, 247, 124, 188, 144, 14, 36, 62, 239, 101, 132, 190, 131, 93, 173, 190, 217, 101, 68, 189, 51, 216, 1, 190, 113, 114, 245, 62, 220, 16, 146, 189, 81, 43, 64, 190, 24, 237, 172, 62, 135, 5, 19, 190, 52, 112, 38, 61, 7, 164, 65, 190, 1, 249, 82, 62, 133, 77, 62, 190, 97, 154, 236, 61, 10, 247, 65, 62, 74, 224, 29, 62, 170, 63, 239, 61, 79, 132, 210, 60, 39, 109, 25, 63, 246, 228, 29, 62, 221, 186, 48, 62, 98, 170, 214, 188, 148, 141, 150, 60, 137, 161, 144, 61, 25, 182, 241, 61, 8, 26, 139, 62, 241, 52, 122, 191, 157, 41, 137, 62, 141, 54, 68, 190, 33, 41, 253, 61, 114, 19, 144, 62, 144, 21, 219, 61, 14, 116, 132, 191, 92, 199, 31, 191, 12, 204, 78, 190, 211, 11, 55, 188, 129, 11, 206, 189, 105, 138, 54, 191, 10, 25, 180, 189, 173, 128, 242, 190, 105, 69, 237, 61, 114, 202, 106, 191, 82, 117, 25, 190, 54, 27, 164, 189, 53, 171, 110, 62, 158, 106, 24, 190, 59, 132, 188, 61, 135, 70, 139, 61, 210, 221, 210, 62, 217, 17, 131, 62, 163, 7, 185, 190, 185, 37, 198, 189, 159, 144, 153, 190, 203, 212, 146, 62, 212, 40, 32, 62, 69, 221, 150, 189, 185, 113, 114, 191, 42, 122, 244, 190, 10, 216, 255, 61, 32, 112, 238, 60, 201, 255, 64, 62, 117, 155, 199, 190, 91, 79, 195, 189, 157, 21, 194, 189, 137, 130, 111, 189, 33, 101, 24, 62, 242, 80, 103, 62, 110, 226, 242, 61, 196, 240, 63, 191, 188, 171, 1, 62, 250, 227, 45, 59, 238, 55, 70, 190, 250, 49, 38, 191, 244, 253, 147, 189, 84, 71, 105, 191, 98, 138, 102, 61, 72, 16, 143, 190, 201, 222, 103, 189, 164, 156, 183, 188, 98, 133, 148, 62, 57, 72, 8, 189, 22, 21, 64, 189, 121, 176, 242, 190, 46, 63, 50, 62, 114, 108, 230, 190, 107, 119, 185, 60, 43, 198, 158, 190, 170, 81, 130, 189, 13, 121, 236, 62, 239, 36, 163, 61, 125, 213, 179, 62, 183, 171, 122, 187, 61, 25, 161, 62, 95, 29, 24, 190, 18, 146, 84, 61, 142, 183, 142, 188, 85, 25, 41, 190, 193, 140, 169, 189, 6, 189, 87, 62, 251, 121, 183, 190, 141, 63, 183, 190, 71, 43, 178, 190, 85, 123, 182, 190, 219, 112, 57, 191, 54, 160, 130, 190, 15, 236, 132, 190, 71, 249, 103, 190, 176, 135, 137, 62, 131, 145, 175, 190, 137, 4, 216, 61, 220, 222, 82, 189, 96, 10, 93, 189, 32, 157, 174, 61, 199, 223, 151, 62, 163, 2, 219, 191, 86, 220, 252, 190, 25, 123, 230, 189, 80, 20, 157, 190, 45, 252, 192, 189, 169, 168, 25, 61, 137, 102, 18, 190, 98, 65, 129, 62, 104, 163, 87, 191, 30, 14, 252, 60, 46, 241, 198, 190, 42, 162, 129, 189, 244, 124, 45, 62, 238, 65, 13, 190, 173, 174, 128, 189, 152, 139, 222, 189, 31, 57, 124, 62, 51, 24, 236, 61, 74, 2, 84, 188, 243, 6, 208, 190, 159, 219, 32, 189, 104, 231, 0, 190, 65, 49, 58, 62, 108, 15, 134, 60, 207, 217, 68, 60, 244, 43, 224, 60, 101, 37, 140, 60, 55, 104, 39, 190, 180, 1, 240, 61, 43, 16, 127, 190, 54, 202, 114, 60, 150, 3, 208, 62, 149, 223, 103, 187, 56, 156, 142, 61, 95, 18, 76, 62, 55, 137, 153, 62, 129, 63, 24, 59, 112, 10, 79, 190, 67, 169, 1, 190, 139, 131, 87, 62, 28, 148, 95, 188, 45, 184, 178, 185, 35, 188, 199, 189, 22, 204, 175, 61, 96, 250, 8, 190, 190, 217, 22, 62, 235, 170, 250, 61, 154, 166, 33, 62, 42, 115, 47, 62, 197, 130, 186, 61, 118, 93, 164, 190, 228, 253, 168, 189, 19, 224, 246, 188, 13, 62, 227, 188, 209, 150, 133, 61, 226, 13, 173, 189, 64, 116, 24, 62, 157, 62, 56, 190, 140, 125, 170, 61, 8, 81, 23, 62, 180, 16, 76, 190, 237, 55, 201, 189, 41, 138, 197, 190, 183, 167, 59, 62, 34, 135, 215, 190, 166, 149, 1, 62, 14, 220, 91, 187, 11, 200, 133, 188, 153, 114, 132, 62, 188, 194, 223, 61, 221, 55, 154, 62, 35, 82, 70, 62, 244, 86, 19, 62, 18, 68, 0, 62, 134, 244, 157, 189, 169, 254, 93, 62, 102, 76, 227, 58, 38, 58, 65, 189, 156, 95, 202, 61, 51, 72, 84, 189, 25, 24, 82, 189, 234, 94, 179, 190, 204, 226, 85, 189, 234, 194, 33, 188, 141, 229, 138, 188, 46, 102, 190, 60, 178, 137, 222, 61, 93, 64, 97, 190, 210, 218, 60, 189, 70, 163, 14, 190, 187, 126, 216, 189, 8, 209, 224, 61, 84, 125, 193, 189, 187, 103, 77, 61, 154, 1, 38, 190, 126, 114, 3, 190, 164, 94, 208, 189, 244, 170, 111, 189, 75, 113, 242, 61, 53, 119, 169, 190, 106, 50, 108, 190, 246, 114, 150, 190, 68, 177, 235, 61, 189, 159, 91, 62, 33, 27, 41, 191, 202, 212, 142, 61, 1, 235, 208, 61, 76, 234, 227, 189, 27, 175, 170, 190, 95, 140, 187, 188, 38, 43, 26, 190, 214, 204, 18, 62, 247, 172, 164, 191, 188, 17, 163, 189, 86, 186, 100, 191, 201, 31, 186, 189, 139, 0, 164, 188, 226, 32, 77, 190, 131, 239, 186, 61, 241, 13, 213, 188, 95, 194, 169, 189, 255, 87, 37, 61, 123, 251, 31, 189, 94, 131, 38, 62, 127, 162, 163, 62, 202, 135, 104, 62, 219, 166, 6, 63, 38, 166, 197, 61, 69, 77, 29, 191, 2, 9, 63, 189, 192, 230, 20, 191, 78, 93, 153, 60, 145, 149, 199, 188, 228, 27, 155, 188, 203, 142, 33, 191, 42, 59, 107, 190, 157, 74, 99, 62, 87, 165, 29, 62, 44, 90, 37, 62, 233, 188, 157, 191, 36, 81, 185, 61, 252, 86, 122, 61, 104, 71, 107, 61, 33, 58, 85, 60, 61, 126, 229, 62, 3, 219, 140, 189, 221, 116, 1, 191, 193, 234, 140, 62, 211, 89, 158, 62, 25, 186, 234, 189, 26, 253, 200, 189, 122, 145, 137, 61, 250, 170, 93, 62, 131, 120, 20, 62, 139, 74, 158, 185, 67, 82, 254, 61, 214, 139, 145, 190, 70, 181, 220, 189, 99, 94, 75, 191, 170, 165, 53, 61, 101, 214, 5, 191, 46, 166, 116, 61, 156, 149, 141, 62, 31, 6, 249, 189, 93, 2, 255, 61, 205, 126, 188, 190, 138, 61, 37, 62, 77, 229, 108, 62, 166, 64, 143, 190, 141, 153, 2, 190, 120, 119, 78, 62, 236, 135, 224, 62, 46, 90, 143, 190, 44, 125, 71, 61, 190, 230, 105, 190, 236, 206, 78, 190, 248, 29, 23, 62, 30, 243, 59, 190, 71, 175, 81, 190, 78, 224, 21, 190, 242, 118, 241, 189, 233, 163, 72, 190, 21, 151, 57, 189, 118, 189, 206, 189, 2, 113, 152, 60, 75, 227, 89, 62, 151, 100, 249, 61, 93, 4, 34, 62, 74, 39, 60, 190, 54, 218, 91, 61, 165, 255, 137, 60, 211, 22, 76, 62, 0, 239, 130, 189, 195, 16, 131, 62, 65, 91, 90, 61, 100, 17, 21, 190, 64, 116, 149, 61, 3, 66, 4, 60, 95, 237, 176, 61, 59, 42, 26, 62, 102, 231, 179, 190, 87, 156, 52, 62, 45, 14, 22, 62, 186, 41, 48, 62, 214, 232, 181, 189, 221, 19, 33, 62, 173, 11, 142, 60, 77, 231, 130, 189, 122, 26, 131, 62, 24, 77, 62, 189, 107, 120, 245, 190, 168, 90, 78, 191, 159, 234, 137, 61, 92, 94, 135, 189, 1, 189, 75, 190, 214, 5, 160, 61, 251, 79, 216, 61, 31, 14, 5, 190, 190, 35, 255, 61, 106, 255, 220, 61, 208, 184, 159, 190, 123, 144, 193, 190, 15, 59, 102, 189, 244, 9, 19, 62, 36, 211, 166, 190, 211, 210, 195, 62, 240, 226, 12, 62, 148, 78, 55, 190, 208, 203, 90, 189, 48, 175, 210, 190, 139, 79, 226, 62, 82, 3, 73, 62, 189, 239, 153, 190, 144, 136, 112, 190, 16, 96, 9, 62, 71, 84, 82, 62, 225, 67, 143, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {36, 199, 203, 61, 38, 137, 223, 61, 201, 158, 82, 62, 81, 228, 79, 190, 195, 63, 133, 62, 19, 246, 150, 189, 218, 12, 2, 62, 154, 119, 90, 189, 52, 206, 98, 62, 108, 97, 61, 62, 163, 192, 179, 189, 189, 154, 5, 62, 156, 195, 27, 190, 80, 171, 162, 189, 172, 142, 22, 61, 230, 240, 109, 62, 71, 203, 156, 62, 64, 12, 204, 62, 40, 75, 142, 62, 110, 81, 170, 62, 33, 46, 197, 188, 209, 212, 159, 62, 79, 52, 49, 62, 155, 243, 194, 61, 11, 227, 235, 189, 223, 175, 140, 62, 107, 85, 130, 62, 156, 250, 189, 189, 240, 28, 38, 60, 255, 75, 138, 62, 28, 4, 120, 62, 162, 198, 129, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 90, 2, 63, 180, 198, 147, 61, 68, 127, 101, 63, 146, 176, 197, 190, 52, 128, 163, 62, 23, 15, 136, 62, 52, 56, 148, 190, 3, 87, 253, 190, 194, 143, 51, 191, 1, 87, 199, 62, 116, 103, 33, 190, 133, 207, 174, 190, 21, 202, 23, 61, 51, 198, 249, 189, 208, 122, 79, 63, 235, 165, 83, 63, 215, 242, 215, 59, 70, 135, 83, 191, 13, 233, 41, 62, 98, 100, 147, 63, 99, 207, 187, 62, 59, 196, 254, 190, 73, 248, 74, 191, 5, 12, 47, 62, 242, 153, 170, 189, 89, 204, 167, 189, 61, 13, 61, 61, 3, 116, 235, 61, 57, 49, 12, 63, 72, 21, 58, 63, 192, 116, 171, 59, 235, 246, 11, 63, 230, 242, 30, 62, 173, 243, 35, 61, 64, 166, 167, 189, 194, 237, 207, 61, 46, 17, 124, 190, 158, 0, 131, 190, 5, 232, 104, 190, 247, 210, 201, 61, 78, 195, 165, 62, 161, 215, 29, 62, 7, 46, 140, 188, 93, 23, 141, 60, 236, 28, 251, 61, 118, 184, 167, 189, 80, 197, 187, 61, 21, 93, 15, 62, 170, 193, 41, 190, 182, 96, 32, 62, 20, 129, 140, 190, 252, 89, 35, 61, 249, 123, 34, 188, 127, 130, 53, 190, 250, 136, 199, 189, 114, 7, 174, 190, 170, 115, 34, 191, 46, 218, 130, 190, 167, 211, 137, 190, 138, 118, 221, 59, 46, 178, 26, 189, 88, 150, 65, 189, 233, 11, 179, 190, 106, 78, 251, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 132, 86, 190, 103, 84, 49, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {161, 158, 52, 62, 48, 73, 128, 63, 60, 6, 118, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {170, 5, 155, 191, 8, 199, 34, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0024/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}