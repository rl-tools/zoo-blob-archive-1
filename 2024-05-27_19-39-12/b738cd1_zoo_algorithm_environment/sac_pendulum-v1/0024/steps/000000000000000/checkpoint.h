// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 37, 122, 190, 55, 166, 230, 62, 50, 156, 31, 189, 107, 34, 246, 188, 148, 123, 191, 190, 110, 105, 11, 63, 57, 225, 28, 190, 145, 11, 207, 61, 22, 125, 15, 63, 211, 96, 215, 62, 184, 70, 65, 190, 157, 59, 152, 190, 167, 210, 181, 190, 130, 239, 201, 61, 64, 66, 74, 62, 99, 128, 195, 190, 33, 173, 132, 62, 167, 89, 141, 190, 225, 49, 193, 190, 64, 133, 109, 190, 235, 193, 51, 190, 255, 198, 12, 61, 41, 139, 152, 62, 215, 142, 3, 191, 206, 70, 185, 190, 62, 164, 231, 189, 109, 230, 173, 190, 187, 140, 242, 62, 104, 34, 163, 62, 103, 178, 216, 190, 82, 198, 150, 61, 30, 36, 0, 191, 198, 102, 197, 62, 221, 127, 187, 62, 139, 246, 171, 62, 252, 7, 226, 190, 52, 144, 242, 62, 4, 156, 199, 190, 10, 10, 3, 63, 89, 83, 220, 62, 171, 94, 14, 63, 3, 109, 199, 190, 215, 143, 138, 189, 232, 24, 136, 62, 32, 116, 133, 60, 196, 178, 5, 62, 70, 204, 240, 62, 175, 167, 12, 63, 28, 13, 50, 190, 56, 162, 53, 62, 40, 248, 136, 190, 176, 54, 203, 62, 52, 55, 167, 60, 247, 226, 244, 61, 94, 57, 204, 62, 5, 137, 151, 190, 137, 107, 3, 62, 116, 143, 146, 190, 116, 156, 8, 191, 72, 199, 144, 190, 92, 77, 216, 190, 226, 77, 244, 189, 240, 161, 170, 190, 166, 13, 141, 62, 144, 53, 223, 189, 244, 156, 215, 190, 147, 231, 168, 190, 194, 5, 195, 62, 28, 224, 58, 62, 1, 48, 196, 62, 182, 66, 164, 62, 227, 49, 207, 190, 78, 163, 8, 191, 249, 181, 137, 62, 254, 34, 8, 190, 65, 10, 106, 62, 215, 0, 189, 190, 13, 188, 69, 189, 195, 175, 118, 190, 237, 5, 2, 191, 200, 239, 192, 62, 123, 182, 51, 189, 220, 8, 227, 62, 47, 34, 117, 62, 205, 230, 136, 190, 190, 88, 15, 62, 144, 186, 4, 191, 132, 68, 86, 190, 113, 106, 217, 62, 150, 124, 141, 190, 130, 157, 215, 62, 203, 68, 251, 190, 108, 177, 40, 190, 158, 34, 145, 62, 73, 160, 120, 189, 123, 36, 19, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {108, 190, 19, 191, 137, 205, 85, 190, 31, 154, 14, 63, 211, 17, 162, 62, 46, 202, 164, 62, 131, 161, 148, 189, 167, 116, 204, 190, 77, 133, 236, 189, 201, 5, 145, 61, 215, 204, 186, 62, 67, 145, 191, 190, 184, 182, 122, 190, 252, 218, 187, 62, 196, 90, 3, 63, 124, 70, 199, 190, 4, 140, 9, 62, 211, 87, 68, 62, 135, 131, 101, 62, 203, 120, 252, 62, 234, 189, 231, 60, 252, 20, 103, 62, 185, 201, 115, 62, 156, 203, 15, 63, 165, 206, 162, 62, 86, 24, 106, 190, 8, 100, 159, 189, 149, 200, 202, 62, 135, 16, 36, 190, 60, 141, 215, 62, 105, 21, 18, 63, 17, 42, 133, 190, 243, 67, 75, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {241, 191, 30, 62, 130, 126, 235, 189, 206, 192, 143, 189, 165, 21, 187, 61, 181, 213, 40, 190, 196, 131, 82, 61, 241, 215, 139, 61, 157, 2, 22, 187, 168, 92, 136, 61, 126, 23, 130, 61, 226, 141, 2, 190, 65, 252, 182, 61, 251, 118, 11, 62, 94, 35, 18, 62, 29, 143, 147, 61, 135, 80, 239, 60, 53, 88, 203, 189, 244, 195, 131, 60, 121, 174, 8, 190, 251, 134, 142, 189, 171, 232, 207, 189, 179, 235, 17, 61, 117, 27, 43, 190, 146, 222, 252, 189, 94, 210, 50, 62, 104, 58, 46, 62, 39, 202, 167, 61, 30, 137, 240, 189, 253, 82, 158, 189, 214, 161, 108, 60, 172, 52, 25, 190, 114, 22, 220, 189, 191, 154, 168, 61, 197, 153, 23, 190, 100, 155, 151, 61, 50, 89, 114, 60, 68, 59, 107, 61, 155, 86, 146, 60, 115, 134, 135, 61, 80, 90, 175, 189, 47, 129, 159, 189, 104, 229, 1, 190, 36, 172, 141, 189, 205, 30, 33, 190, 158, 69, 200, 61, 42, 178, 4, 190, 173, 89, 123, 189, 77, 15, 49, 189, 87, 80, 228, 60, 250, 228, 41, 189, 203, 103, 172, 61, 191, 97, 139, 189, 213, 31, 200, 189, 158, 181, 150, 189, 249, 56, 151, 189, 224, 6, 44, 189, 115, 84, 49, 62, 221, 128, 161, 61, 239, 190, 178, 189, 236, 8, 249, 59, 179, 222, 203, 61, 46, 160, 87, 61, 164, 116, 49, 190, 69, 145, 176, 188, 207, 141, 162, 60, 215, 197, 205, 61, 88, 152, 230, 61, 69, 245, 46, 62, 71, 16, 42, 61, 127, 119, 199, 189, 76, 199, 159, 60, 237, 88, 129, 61, 3, 120, 2, 62, 48, 9, 158, 189, 187, 101, 193, 189, 113, 101, 186, 188, 207, 165, 2, 62, 154, 164, 248, 60, 38, 49, 88, 189, 156, 189, 237, 188, 142, 239, 21, 62, 96, 171, 52, 190, 57, 150, 185, 189, 10, 177, 167, 61, 9, 148, 13, 62, 235, 127, 46, 190, 6, 156, 108, 61, 24, 125, 120, 60, 26, 111, 3, 188, 33, 221, 252, 189, 229, 224, 7, 190, 121, 151, 240, 60, 204, 9, 60, 61, 78, 248, 242, 61, 115, 38, 200, 189, 131, 1, 139, 61, 70, 253, 48, 62, 134, 141, 22, 62, 176, 249, 84, 61, 98, 174, 180, 189, 169, 241, 14, 61, 60, 39, 233, 187, 229, 186, 174, 189, 182, 122, 169, 61, 112, 194, 33, 189, 196, 0, 253, 189, 191, 100, 14, 62, 168, 174, 4, 62, 214, 103, 39, 190, 17, 137, 50, 62, 253, 86, 136, 61, 141, 169, 241, 189, 123, 85, 6, 190, 245, 133, 153, 189, 50, 6, 45, 62, 114, 68, 246, 61, 163, 219, 189, 61, 128, 33, 4, 189, 53, 162, 47, 190, 68, 16, 45, 190, 199, 174, 112, 189, 220, 66, 229, 189, 97, 147, 45, 62, 14, 210, 164, 188, 178, 113, 30, 190, 206, 238, 47, 190, 236, 100, 5, 190, 164, 157, 20, 62, 122, 161, 157, 61, 185, 90, 69, 189, 211, 74, 37, 190, 132, 197, 16, 190, 204, 68, 173, 61, 47, 147, 94, 189, 125, 161, 105, 189, 8, 107, 43, 190, 184, 183, 159, 61, 16, 29, 220, 61, 136, 148, 136, 61, 114, 94, 178, 61, 253, 205, 166, 61, 177, 193, 141, 189, 148, 127, 16, 190, 80, 240, 226, 188, 108, 239, 11, 61, 26, 28, 178, 60, 169, 129, 33, 190, 153, 214, 252, 61, 110, 49, 157, 189, 201, 8, 214, 61, 250, 75, 234, 60, 17, 83, 16, 190, 206, 169, 30, 187, 80, 88, 0, 189, 202, 55, 36, 62, 123, 224, 43, 190, 175, 226, 225, 188, 140, 60, 151, 61, 252, 123, 32, 62, 207, 172, 143, 61, 244, 43, 246, 61, 28, 30, 109, 60, 246, 177, 170, 187, 2, 53, 5, 62, 16, 141, 16, 189, 91, 174, 5, 62, 86, 6, 8, 189, 27, 63, 234, 61, 144, 87, 172, 61, 118, 27, 243, 61, 158, 220, 0, 189, 208, 224, 36, 62, 226, 180, 125, 61, 62, 245, 41, 62, 51, 206, 191, 186, 53, 210, 29, 62, 119, 192, 29, 190, 13, 50, 251, 189, 126, 210, 251, 61, 98, 157, 144, 61, 240, 14, 187, 189, 221, 116, 216, 60, 29, 128, 220, 60, 115, 190, 37, 190, 68, 210, 4, 190, 199, 188, 2, 59, 168, 206, 115, 189, 79, 97, 24, 62, 117, 78, 17, 188, 195, 225, 16, 62, 232, 253, 40, 189, 106, 76, 207, 189, 201, 248, 146, 61, 135, 172, 35, 62, 179, 93, 196, 61, 40, 150, 39, 188, 93, 236, 176, 189, 208, 164, 235, 61, 120, 192, 237, 189, 77, 224, 15, 62, 156, 194, 141, 61, 233, 158, 46, 62, 185, 76, 37, 62, 130, 176, 185, 189, 115, 9, 92, 189, 223, 80, 213, 61, 183, 245, 18, 62, 120, 70, 252, 61, 236, 53, 206, 189, 224, 17, 46, 190, 14, 18, 44, 61, 136, 248, 201, 59, 213, 250, 188, 58, 38, 230, 38, 190, 215, 127, 123, 59, 131, 46, 27, 62, 12, 76, 68, 60, 5, 110, 36, 190, 125, 249, 1, 190, 254, 107, 107, 61, 69, 38, 188, 61, 242, 204, 182, 61, 219, 53, 10, 61, 178, 168, 119, 60, 13, 61, 167, 61, 23, 207, 54, 189, 160, 156, 0, 62, 187, 14, 26, 190, 47, 43, 94, 61, 3, 138, 33, 62, 132, 109, 111, 61, 74, 115, 179, 189, 221, 39, 240, 189, 213, 9, 17, 190, 203, 93, 88, 189, 255, 206, 25, 189, 208, 226, 209, 188, 64, 224, 150, 60, 176, 61, 46, 190, 121, 157, 123, 61, 209, 171, 141, 61, 20, 152, 22, 62, 190, 78, 175, 60, 175, 249, 211, 61, 42, 197, 208, 61, 112, 110, 28, 189, 162, 153, 48, 62, 72, 241, 250, 61, 175, 173, 159, 189, 104, 132, 14, 190, 236, 255, 27, 189, 94, 68, 52, 62, 255, 33, 25, 190, 1, 8, 239, 60, 254, 164, 216, 60, 153, 207, 113, 61, 231, 61, 247, 189, 172, 80, 45, 61, 98, 63, 39, 62, 238, 252, 119, 61, 68, 163, 17, 61, 73, 40, 176, 61, 107, 30, 23, 189, 54, 224, 80, 61, 122, 104, 120, 61, 167, 23, 9, 188, 14, 181, 168, 61, 180, 221, 65, 188, 128, 103, 50, 190, 119, 69, 19, 189, 72, 115, 146, 189, 88, 150, 251, 189, 212, 19, 184, 61, 153, 212, 192, 189, 247, 121, 9, 61, 108, 84, 44, 190, 230, 37, 21, 189, 172, 112, 198, 59, 15, 237, 42, 189, 0, 131, 192, 61, 68, 138, 50, 190, 53, 244, 18, 190, 76, 159, 215, 188, 120, 28, 170, 189, 115, 37, 33, 62, 43, 128, 205, 188, 70, 234, 52, 62, 150, 144, 244, 189, 82, 120, 254, 189, 79, 172, 247, 61, 103, 241, 29, 189, 253, 8, 161, 188, 212, 122, 42, 190, 24, 192, 159, 189, 85, 207, 182, 188, 218, 48, 121, 61, 77, 72, 173, 60, 163, 4, 38, 190, 134, 215, 9, 189, 47, 90, 169, 61, 164, 94, 177, 188, 253, 82, 187, 189, 185, 141, 10, 189, 220, 202, 22, 188, 159, 249, 46, 62, 75, 40, 7, 189, 114, 21, 13, 62, 92, 84, 30, 190, 43, 141, 112, 189, 213, 206, 149, 61, 33, 228, 204, 61, 204, 173, 84, 189, 163, 65, 224, 189, 169, 164, 254, 189, 101, 212, 232, 61, 96, 241, 253, 61, 250, 47, 25, 62, 92, 214, 35, 62, 113, 22, 80, 189, 163, 194, 14, 188, 184, 249, 28, 61, 90, 176, 123, 189, 128, 6, 151, 188, 117, 130, 11, 190, 166, 110, 47, 190, 174, 55, 58, 189, 45, 130, 147, 189, 37, 17, 3, 61, 15, 63, 71, 61, 230, 251, 21, 62, 68, 241, 188, 189, 88, 142, 247, 61, 31, 132, 124, 61, 133, 253, 251, 189, 87, 191, 17, 189, 112, 56, 47, 62, 29, 144, 215, 61, 45, 85, 30, 190, 116, 210, 227, 189, 60, 203, 41, 189, 94, 175, 18, 62, 251, 24, 20, 190, 166, 228, 112, 189, 219, 106, 174, 61, 216, 210, 49, 190, 228, 93, 80, 189, 48, 52, 191, 189, 181, 30, 88, 189, 103, 53, 178, 189, 31, 236, 49, 62, 126, 14, 197, 189, 255, 255, 206, 185, 210, 121, 215, 61, 66, 241, 37, 190, 76, 201, 23, 62, 141, 36, 20, 62, 30, 95, 191, 61, 23, 116, 113, 60, 225, 119, 29, 190, 185, 142, 133, 189, 100, 110, 245, 188, 139, 124, 154, 189, 98, 210, 45, 61, 181, 215, 247, 61, 216, 1, 125, 189, 34, 189, 254, 189, 196, 150, 20, 61, 134, 211, 50, 62, 228, 195, 223, 189, 121, 88, 144, 60, 90, 67, 8, 190, 23, 195, 165, 61, 158, 46, 15, 190, 167, 108, 23, 60, 31, 225, 253, 61, 43, 213, 148, 188, 222, 51, 245, 61, 72, 20, 36, 190, 82, 125, 247, 188, 148, 73, 100, 189, 33, 62, 38, 190, 18, 141, 45, 62, 144, 211, 145, 189, 229, 234, 65, 61, 194, 44, 204, 188, 51, 34, 140, 61, 14, 27, 198, 189, 85, 178, 254, 189, 67, 15, 237, 60, 226, 172, 4, 190, 248, 12, 156, 189, 28, 104, 135, 189, 86, 16, 31, 187, 95, 28, 9, 190, 13, 143, 54, 189, 87, 22, 187, 61, 41, 47, 18, 190, 190, 79, 247, 189, 66, 68, 52, 190, 118, 68, 32, 62, 18, 182, 59, 61, 47, 193, 38, 190, 32, 12, 207, 189, 172, 217, 12, 61, 183, 52, 231, 189, 250, 55, 245, 61, 222, 115, 233, 188, 165, 32, 215, 61, 78, 36, 37, 62, 248, 57, 22, 62, 72, 3, 242, 186, 245, 1, 164, 61, 190, 69, 44, 189, 146, 79, 2, 190, 23, 41, 34, 190, 39, 118, 143, 187, 24, 180, 37, 190, 88, 8, 49, 190, 53, 23, 25, 190, 238, 156, 100, 60, 217, 25, 224, 61, 45, 63, 185, 189, 248, 230, 51, 61, 217, 213, 2, 189, 165, 191, 34, 190, 113, 96, 227, 189, 87, 170, 159, 61, 184, 225, 3, 61, 74, 19, 19, 190, 192, 86, 209, 61, 180, 156, 4, 61, 114, 76, 204, 60, 29, 235, 43, 190, 24, 107, 9, 187, 208, 234, 232, 61, 187, 244, 10, 62, 248, 180, 156, 189, 182, 203, 23, 190, 133, 137, 93, 61, 248, 192, 41, 61, 25, 240, 59, 61, 5, 21, 119, 61, 223, 143, 21, 190, 93, 206, 87, 189, 80, 130, 15, 62, 66, 214, 90, 61, 125, 27, 160, 189, 81, 103, 253, 189, 25, 157, 135, 61, 1, 88, 136, 189, 36, 213, 174, 61, 245, 77, 83, 61, 227, 198, 1, 62, 228, 103, 245, 189, 131, 66, 191, 189, 102, 39, 34, 190, 34, 240, 212, 61, 66, 174, 4, 190, 186, 41, 40, 190, 124, 7, 241, 61, 241, 37, 234, 189, 0, 187, 122, 60, 120, 182, 46, 62, 231, 104, 196, 189, 109, 80, 149, 59, 115, 184, 11, 190, 11, 65, 199, 189, 134, 255, 50, 187, 82, 236, 105, 61, 179, 97, 66, 189, 78, 199, 128, 60, 95, 118, 209, 61, 169, 153, 108, 188, 139, 47, 47, 190, 221, 56, 228, 61, 192, 175, 17, 62, 236, 240, 171, 61, 141, 245, 43, 60, 117, 247, 199, 188, 190, 29, 12, 190, 166, 225, 18, 190, 68, 175, 210, 61, 129, 120, 238, 61, 211, 196, 209, 61, 72, 85, 209, 60, 129, 164, 188, 189, 9, 163, 218, 61, 83, 97, 251, 188, 182, 54, 192, 61, 103, 155, 20, 190, 139, 151, 132, 61, 234, 245, 236, 189, 44, 106, 171, 189, 163, 5, 136, 61, 140, 19, 210, 61, 242, 225, 151, 61, 197, 72, 31, 62, 105, 180, 48, 62, 10, 43, 146, 61, 240, 91, 146, 189, 143, 8, 167, 189, 244, 74, 38, 189, 140, 61, 94, 60, 67, 55, 130, 189, 167, 236, 45, 62, 134, 20, 62, 61, 188, 35, 65, 60, 177, 130, 11, 62, 170, 74, 43, 190, 118, 209, 2, 61, 252, 94, 181, 61, 221, 167, 250, 188, 178, 36, 174, 60, 26, 151, 39, 190, 123, 49, 226, 188, 225, 8, 25, 62, 126, 118, 3, 62, 57, 143, 204, 188, 188, 247, 94, 188, 118, 181, 202, 60, 222, 237, 216, 61, 96, 245, 198, 61, 96, 148, 84, 61, 127, 187, 99, 61, 71, 199, 205, 59, 172, 231, 42, 190, 124, 225, 111, 60, 22, 195, 132, 58, 111, 203, 89, 61, 169, 169, 229, 189, 111, 133, 101, 61, 216, 160, 160, 189, 14, 206, 31, 190, 113, 233, 247, 61, 69, 205, 28, 62, 102, 145, 177, 61, 33, 54, 3, 190, 129, 125, 186, 189, 196, 23, 189, 61, 123, 31, 88, 61, 71, 193, 203, 61, 7, 27, 46, 62, 117, 50, 38, 190, 178, 75, 18, 190, 222, 58, 166, 189, 25, 44, 40, 190, 165, 161, 12, 189, 252, 45, 76, 189, 233, 222, 239, 61, 186, 46, 155, 189, 218, 204, 80, 188, 43, 54, 127, 61, 97, 231, 185, 188, 197, 36, 158, 61, 136, 170, 167, 189, 153, 48, 144, 61, 73, 123, 48, 189, 254, 94, 152, 189, 8, 228, 160, 61, 42, 34, 41, 190, 35, 12, 203, 61, 56, 181, 164, 60, 229, 84, 156, 189, 142, 1, 211, 61, 244, 192, 151, 189, 206, 87, 34, 190, 184, 52, 47, 190, 152, 77, 8, 62, 236, 121, 6, 190, 53, 251, 129, 61, 129, 241, 214, 60, 175, 34, 214, 61, 63, 100, 27, 62, 125, 234, 160, 189, 246, 233, 43, 189, 96, 68, 144, 189, 206, 24, 241, 189, 248, 180, 178, 189, 243, 135, 217, 188, 72, 151, 225, 189, 153, 12, 238, 189, 209, 13, 51, 62, 149, 42, 189, 61, 12, 8, 82, 189, 207, 171, 22, 62, 188, 228, 2, 190, 155, 20, 52, 190, 140, 249, 243, 60, 56, 40, 172, 189, 29, 216, 124, 188, 212, 104, 11, 62, 189, 136, 107, 189, 65, 45, 30, 62, 113, 100, 217, 60, 53, 188, 50, 190, 247, 133, 39, 190, 246, 126, 42, 60, 92, 217, 227, 189, 254, 230, 185, 61, 106, 97, 5, 61, 3, 179, 138, 187, 186, 70, 155, 189, 114, 154, 153, 189, 244, 110, 9, 190, 121, 34, 19, 189, 192, 245, 10, 62, 132, 182, 50, 188, 100, 82, 43, 62, 161, 232, 118, 61, 60, 82, 26, 190, 221, 52, 255, 188, 113, 242, 178, 60, 233, 66, 21, 62, 97, 22, 140, 61, 74, 67, 250, 189, 140, 178, 155, 186, 95, 145, 41, 190, 199, 175, 37, 61, 137, 147, 212, 188, 5, 125, 31, 62, 117, 213, 87, 188, 174, 74, 167, 189, 179, 18, 31, 189, 6, 206, 118, 189, 241, 44, 5, 190, 27, 142, 30, 190, 77, 2, 3, 62, 8, 161, 76, 189, 182, 225, 38, 61, 196, 178, 147, 189, 142, 45, 228, 189, 193, 142, 8, 190, 153, 18, 33, 190, 84, 55, 49, 62, 169, 224, 164, 188, 209, 119, 167, 61, 195, 166, 146, 61, 206, 46, 176, 59, 23, 125, 19, 190, 86, 166, 21, 61, 168, 149, 157, 189, 99, 190, 150, 61, 117, 12, 165, 58, 48, 37, 74, 189, 158, 168, 169, 188, 199, 107, 48, 62, 168, 96, 48, 60, 170, 45, 180, 189, 23, 155, 166, 189, 216, 208, 136, 189, 45, 110, 206, 61, 67, 113, 23, 190, 128, 249, 32, 190, 179, 219, 106, 60, 245, 168, 27, 62, 109, 220, 171, 61, 17, 110, 120, 61, 100, 7, 166, 61, 147, 181, 146, 189, 183, 178, 1, 190, 136, 227, 148, 186, 83, 108, 176, 57, 36, 74, 159, 186, 2, 139, 165, 61, 49, 236, 45, 190, 186, 174, 138, 188, 16, 217, 172, 61, 248, 88, 226, 60, 67, 61, 43, 62, 223, 110, 45, 62, 103, 244, 232, 61, 83, 19, 183, 61, 7, 103, 47, 62, 181, 173, 183, 189, 97, 180, 43, 190, 227, 247, 231, 188, 218, 76, 1, 189, 4, 252, 4, 62, 195, 97, 29, 190, 60, 187, 123, 189, 59, 167, 36, 62, 78, 154, 192, 189, 140, 159, 9, 62, 246, 176, 251, 188, 174, 167, 38, 62, 14, 232, 244, 189, 97, 154, 236, 61, 146, 35, 182, 188, 221, 173, 189, 60, 51, 221, 224, 189, 77, 70, 37, 190, 208, 64, 24, 62, 34, 24, 239, 60, 134, 170, 31, 62, 121, 117, 155, 61, 168, 23, 35, 62, 84, 132, 198, 61, 111, 33, 21, 189, 132, 177, 158, 61, 54, 43, 42, 190, 236, 80, 157, 61, 180, 75, 31, 190, 98, 234, 227, 187, 153, 58, 1, 62, 12, 147, 244, 61, 207, 80, 70, 188, 104, 247, 17, 190, 217, 183, 167, 189, 208, 126, 70, 187, 62, 196, 219, 59, 15, 140, 129, 189, 179, 11, 141, 58, 79, 78, 96, 61, 130, 90, 181, 61, 198, 26, 50, 190, 209, 49, 136, 189, 209, 2, 214, 189, 183, 161, 38, 62, 158, 106, 24, 190, 243, 231, 243, 61, 18, 164, 35, 62, 134, 103, 190, 189, 27, 153, 19, 62, 129, 30, 255, 187, 5, 110, 28, 189, 202, 151, 50, 190, 54, 113, 77, 61, 122, 26, 233, 61, 239, 141, 213, 189, 237, 194, 167, 60, 151, 209, 51, 190, 178, 121, 171, 61, 192, 17, 159, 61, 85, 148, 184, 61, 242, 99, 11, 62, 31, 1, 140, 188, 157, 21, 194, 189, 52, 241, 136, 187, 72, 62, 242, 61, 176, 49, 80, 189, 8, 30, 188, 189, 249, 3, 51, 62, 28, 126, 44, 62, 130, 118, 244, 189, 71, 176, 8, 190, 119, 72, 44, 62, 225, 220, 190, 188, 86, 242, 31, 62, 15, 250, 171, 61, 25, 30, 78, 189, 90, 29, 104, 189, 136, 78, 49, 61, 64, 104, 153, 189, 201, 57, 120, 61, 18, 1, 76, 189, 3, 10, 5, 62, 18, 249, 21, 61, 254, 168, 32, 190, 213, 112, 2, 190, 226, 130, 45, 190, 94, 141, 141, 60, 53, 160, 21, 62, 186, 78, 33, 61, 167, 165, 21, 61, 200, 235, 162, 189, 205, 14, 247, 61, 121, 71, 13, 190, 232, 81, 4, 62, 161, 126, 141, 188, 133, 129, 230, 188, 68, 170, 15, 62, 77, 130, 15, 62, 189, 64, 88, 61, 250, 79, 153, 189, 109, 175, 6, 62, 50, 190, 44, 190, 75, 96, 205, 189, 187, 188, 32, 189, 121, 124, 47, 190, 106, 14, 4, 62, 151, 95, 45, 62, 32, 133, 34, 190, 37, 84, 215, 61, 57, 70, 53, 61, 29, 107, 112, 189, 94, 61, 180, 189, 186, 183, 250, 61, 178, 217, 30, 190, 253, 30, 250, 189, 242, 154, 208, 61, 192, 209, 184, 60, 255, 238, 48, 62, 171, 218, 123, 189, 0, 43, 45, 60, 213, 159, 30, 62, 46, 60, 85, 189, 157, 129, 170, 61, 137, 99, 198, 189, 128, 121, 221, 60, 133, 190, 141, 61, 205, 165, 0, 190, 1, 77, 172, 189, 255, 30, 9, 190, 15, 40, 16, 62, 75, 114, 150, 61, 150, 6, 23, 61, 254, 127, 162, 189, 98, 202, 37, 61, 142, 44, 64, 61, 41, 42, 242, 61, 7, 26, 58, 60, 118, 172, 75, 188, 196, 41, 147, 60, 75, 250, 28, 188, 56, 176, 39, 190, 162, 219, 4, 62, 16, 60, 222, 189, 235, 53, 25, 190, 152, 30, 42, 62, 99, 41, 51, 62, 251, 81, 189, 61, 118, 155, 26, 62, 226, 248, 4, 62, 159, 63, 130, 186, 233, 231, 172, 189, 249, 159, 25, 190, 144, 126, 172, 61, 110, 128, 57, 189, 214, 37, 22, 61, 18, 252, 21, 190, 248, 81, 166, 61, 206, 144, 31, 190, 137, 219, 22, 62, 198, 193, 212, 61, 216, 4, 28, 62, 43, 140, 16, 189, 190, 54, 20, 62, 62, 18, 30, 190, 221, 2, 128, 189, 72, 35, 250, 189, 119, 101, 18, 189, 66, 11, 137, 188, 61, 2, 183, 189, 103, 122, 209, 60, 92, 204, 23, 190, 233, 239, 78, 60, 87, 92, 23, 62, 141, 209, 252, 189, 46, 205, 235, 189, 26, 75, 240, 189, 26, 109, 18, 62, 0, 63, 26, 190, 236, 201, 16, 62, 30, 64, 31, 190, 96, 202, 234, 60, 67, 15, 41, 62, 241, 218, 210, 61, 187, 44, 209, 61, 89, 66, 204, 61, 183, 2, 133, 61, 56, 65, 13, 62, 191, 167, 52, 190, 246, 103, 17, 62, 6, 115, 158, 61, 224, 178, 76, 189, 115, 25, 222, 61, 75, 58, 206, 61, 188, 8, 50, 189, 31, 221, 165, 189, 226, 106, 78, 60, 235, 62, 1, 189, 10, 67, 186, 185, 122, 197, 33, 61, 186, 110, 48, 62, 186, 69, 29, 190, 166, 155, 1, 189, 139, 107, 148, 189, 119, 128, 199, 188, 8, 209, 224, 61, 114, 39, 0, 62, 195, 99, 235, 61, 225, 39, 164, 189, 144, 125, 231, 189, 233, 247, 192, 189, 25, 206, 26, 189, 174, 67, 3, 62, 112, 119, 206, 189, 255, 110, 24, 190, 5, 115, 37, 190, 99, 61, 225, 61, 85, 226, 128, 61, 54, 25, 14, 190, 16, 18, 240, 61, 224, 109, 25, 62, 63, 189, 233, 189, 90, 5, 40, 190, 95, 140, 187, 188, 111, 46, 235, 189, 226, 45, 179, 60, 102, 230, 173, 189, 237, 133, 52, 190, 63, 149, 40, 190, 61, 240, 110, 189, 137, 117, 210, 188, 19, 88, 198, 189, 161, 129, 39, 61, 185, 57, 134, 60, 79, 225, 20, 189, 173, 39, 55, 61, 202, 51, 245, 189, 94, 131, 38, 62, 150, 78, 221, 60, 51, 48, 161, 61, 110, 43, 31, 62, 148, 213, 114, 61, 236, 13, 208, 61, 94, 223, 200, 61, 183, 218, 25, 190, 89, 216, 21, 190, 151, 172, 211, 189, 74, 220, 215, 189, 218, 1, 42, 190, 224, 162, 204, 189, 149, 26, 185, 60, 201, 97, 73, 61, 222, 110, 144, 61, 92, 67, 44, 190, 1, 220, 69, 187, 114, 103, 102, 61, 253, 94, 12, 60, 176, 62, 202, 61, 75, 67, 27, 62, 64, 44, 143, 189, 133, 35, 197, 189, 56, 214, 5, 61, 246, 123, 205, 61, 15, 228, 9, 190, 88, 48, 244, 189, 14, 180, 184, 187, 234, 204, 133, 60, 220, 10, 28, 62, 202, 14, 81, 187, 16, 70, 1, 62, 211, 231, 216, 61, 239, 228, 197, 189, 13, 238, 32, 190, 242, 197, 40, 61, 244, 185, 181, 189, 46, 42, 106, 189, 153, 166, 238, 61, 104, 147, 41, 62, 227, 28, 184, 61, 78, 235, 32, 190, 130, 99, 11, 190, 142, 228, 56, 61, 254, 24, 118, 189, 231, 222, 104, 189, 27, 33, 252, 61, 55, 185, 236, 61, 76, 77, 193, 189, 37, 155, 99, 61, 250, 121, 34, 190, 219, 88, 231, 61, 53, 63, 179, 188, 187, 69, 92, 189, 158, 182, 30, 190, 253, 197, 181, 59, 178, 253, 214, 189, 0, 172, 207, 189, 114, 61, 16, 190, 222, 219, 248, 188, 246, 37, 22, 189, 249, 214, 19, 62, 110, 15, 142, 61, 93, 4, 34, 62, 191, 91, 255, 61, 19, 170, 201, 61, 94, 11, 133, 188, 184, 64, 125, 188, 252, 64, 144, 61, 56, 129, 3, 62, 136, 85, 54, 189, 128, 117, 66, 189, 178, 66, 85, 61, 10, 184, 174, 60, 76, 61, 51, 189, 151, 163, 157, 189, 3, 96, 160, 188, 174, 11, 2, 62, 135, 8, 70, 61, 241, 124, 243, 61, 186, 81, 181, 189, 221, 19, 33, 62, 131, 23, 188, 189, 5, 253, 247, 60, 41, 217, 149, 60, 53, 47, 33, 190, 116, 81, 218, 61, 212, 22, 47, 190, 173, 200, 146, 189, 121, 146, 2, 189, 14, 254, 14, 190, 170, 186, 114, 189, 154, 73, 194, 188, 115, 69, 28, 190, 64, 41, 11, 62, 100, 234, 222, 61, 92, 194, 165, 61, 44, 10, 39, 190, 174, 10, 45, 62, 67, 190, 94, 61, 31, 209, 37, 61, 61, 193, 30, 62, 157, 177, 1, 189, 23, 160, 145, 189, 36, 197, 143, 189, 84, 99, 67, 189, 76, 54, 4, 62, 129, 45, 209, 189, 17, 214, 254, 189, 245, 119, 101, 189, 54, 206, 114, 189, 81, 223, 134, 60, 186, 221, 252, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 189, 1, 60, 69, 185, 20, 62, 55, 102, 15, 62, 11, 121, 34, 190, 244, 122, 161, 61, 225, 2, 205, 188, 237, 100, 194, 61, 88, 155, 27, 190, 18, 171, 20, 62, 161, 168, 186, 61, 234, 93, 153, 189, 222, 120, 167, 61, 156, 195, 27, 190, 1, 102, 50, 189, 179, 180, 9, 61, 240, 233, 0, 62, 145, 234, 41, 62, 230, 3, 47, 62, 91, 3, 238, 61, 40, 6, 225, 61, 188, 83, 140, 189, 164, 130, 44, 62, 181, 159, 160, 61, 128, 56, 28, 190, 23, 153, 204, 189, 141, 46, 33, 61, 31, 159, 34, 62, 212, 105, 69, 189, 78, 241, 205, 188, 60, 209, 45, 62, 137, 200, 90, 61, 120, 24, 209, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 133, 190, 61, 246, 55, 198, 61, 157, 78, 29, 188, 114, 169, 23, 190, 182, 212, 4, 62, 228, 141, 30, 62, 193, 77, 17, 190, 108, 3, 41, 190, 96, 169, 80, 189, 111, 104, 227, 61, 159, 107, 51, 190, 53, 225, 196, 189, 21, 202, 23, 61, 19, 14, 3, 190, 216, 251, 23, 59, 164, 253, 175, 61, 98, 201, 42, 60, 16, 115, 42, 190, 106, 142, 135, 61, 16, 233, 45, 62, 163, 185, 45, 62, 32, 140, 45, 189, 49, 29, 99, 189, 166, 98, 102, 61, 105, 74, 139, 189, 195, 113, 104, 189, 72, 76, 214, 61, 111, 178, 145, 61, 193, 80, 72, 189, 175, 222, 128, 61, 201, 143, 200, 61, 112, 13, 2, 62, 232, 79, 25, 62, 216, 187, 175, 61, 47, 232, 183, 60, 101, 131, 140, 61, 205, 198, 38, 190, 30, 151, 220, 189, 121, 66, 185, 189, 230, 58, 125, 189, 169, 62, 178, 60, 81, 91, 244, 61, 215, 82, 253, 188, 79, 194, 141, 187, 236, 28, 251, 61, 109, 165, 190, 189, 166, 94, 148, 189, 31, 0, 17, 61, 182, 209, 93, 189, 156, 73, 13, 190, 252, 240, 254, 187, 234, 59, 89, 61, 170, 238, 126, 61, 243, 194, 221, 189, 65, 249, 31, 190, 165, 20, 50, 190, 134, 10, 222, 188, 126, 196, 46, 190, 51, 48, 197, 189, 211, 104, 165, 188, 153, 252, 81, 61, 141, 72, 188, 60, 161, 108, 20, 190, 36, 146, 242, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {28, 133, 27, 190, 46, 226, 36, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {77, 3, 148, 63, 207, 139, 188, 62, 119, 95, 8, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {180, 69, 200, 189, 0, 69, 78, 188};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0024/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}