// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 41, 104, 190, 160, 144, 219, 62, 118, 71, 91, 188, 186, 18, 238, 190, 230, 232, 151, 62, 254, 230, 47, 63, 207, 102, 186, 189, 120, 207, 153, 63, 233, 189, 202, 62, 228, 114, 24, 63, 45, 73, 147, 191, 130, 249, 129, 190, 202, 195, 244, 190, 33, 247, 216, 62, 220, 212, 1, 62, 56, 16, 140, 190, 244, 56, 209, 191, 38, 115, 176, 190, 62, 140, 252, 62, 131, 42, 152, 190, 115, 249, 116, 190, 136, 7, 217, 190, 156, 48, 227, 62, 42, 255, 214, 190, 235, 216, 163, 62, 115, 22, 135, 191, 255, 42, 141, 190, 50, 33, 34, 63, 236, 2, 151, 62, 107, 234, 213, 190, 218, 228, 217, 189, 204, 0, 183, 190, 171, 182, 53, 63, 204, 34, 244, 62, 107, 42, 38, 62, 60, 84, 6, 191, 149, 4, 230, 62, 163, 115, 140, 190, 104, 12, 213, 62, 122, 188, 171, 62, 148, 25, 21, 63, 87, 231, 206, 190, 128, 230, 132, 189, 92, 168, 137, 62, 240, 216, 97, 60, 60, 162, 45, 63, 226, 38, 180, 63, 109, 100, 202, 62, 168, 48, 185, 190, 197, 160, 119, 190, 124, 216, 129, 190, 24, 77, 118, 63, 238, 104, 72, 63, 115, 26, 31, 62, 215, 158, 12, 63, 75, 138, 204, 190, 156, 24, 170, 60, 153, 186, 54, 190, 89, 197, 208, 191, 125, 30, 195, 190, 240, 80, 226, 190, 103, 164, 41, 191, 153, 208, 253, 60, 185, 65, 33, 63, 145, 219, 69, 191, 23, 159, 218, 190, 116, 77, 99, 190, 189, 83, 147, 63, 195, 114, 130, 62, 198, 248, 127, 62, 177, 178, 34, 63, 168, 196, 160, 190, 100, 124, 104, 188, 43, 185, 179, 62, 212, 247, 250, 190, 168, 107, 106, 62, 120, 183, 122, 191, 92, 55, 70, 190, 36, 89, 73, 190, 134, 90, 131, 191, 95, 149, 127, 62, 134, 54, 154, 190, 245, 124, 161, 63, 75, 92, 110, 62, 197, 230, 20, 191, 25, 46, 194, 190, 145, 96, 210, 190, 175, 47, 119, 189, 117, 121, 68, 63, 82, 207, 182, 190, 225, 103, 82, 63, 190, 215, 32, 191, 42, 74, 101, 190, 156, 42, 82, 63, 245, 41, 141, 62, 247, 71, 28, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 102, 25, 191, 158, 111, 2, 190, 139, 200, 182, 62, 23, 193, 170, 62, 135, 61, 8, 63, 98, 99, 66, 190, 108, 38, 96, 191, 8, 46, 170, 190, 133, 69, 56, 190, 78, 164, 222, 189, 80, 160, 170, 190, 244, 245, 141, 190, 96, 50, 65, 63, 62, 164, 4, 62, 145, 151, 198, 190, 27, 232, 228, 189, 117, 161, 4, 189, 9, 72, 122, 62, 183, 254, 247, 62, 185, 161, 241, 189, 153, 56, 189, 62, 235, 59, 149, 189, 85, 181, 211, 62, 199, 66, 112, 62, 168, 84, 28, 191, 65, 17, 218, 61, 7, 216, 47, 63, 186, 47, 63, 62, 38, 106, 187, 62, 111, 172, 227, 61, 157, 20, 172, 190, 159, 225, 48, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 30, 42, 62, 238, 219, 5, 189, 131, 119, 106, 190, 32, 47, 155, 62, 226, 21, 39, 191, 166, 127, 63, 60, 187, 78, 200, 62, 220, 78, 35, 188, 217, 98, 191, 61, 6, 3, 199, 61, 151, 27, 28, 190, 45, 11, 26, 62, 198, 194, 220, 62, 228, 199, 18, 62, 29, 143, 147, 61, 101, 72, 203, 190, 190, 24, 234, 189, 214, 0, 151, 190, 241, 20, 144, 61, 195, 182, 186, 59, 87, 18, 32, 62, 167, 130, 3, 62, 160, 164, 103, 191, 176, 245, 226, 189, 73, 130, 48, 62, 163, 11, 49, 63, 224, 179, 11, 63, 174, 172, 131, 191, 156, 6, 172, 189, 158, 123, 9, 58, 80, 145, 154, 62, 165, 75, 181, 190, 191, 154, 168, 61, 76, 236, 48, 190, 152, 244, 72, 61, 232, 223, 60, 188, 58, 77, 226, 60, 137, 105, 150, 188, 193, 193, 133, 61, 161, 45, 195, 189, 218, 130, 209, 189, 151, 108, 3, 190, 144, 217, 187, 189, 234, 55, 33, 190, 139, 72, 157, 61, 51, 194, 13, 190, 173, 89, 123, 189, 184, 84, 91, 189, 98, 158, 38, 188, 158, 36, 100, 189, 178, 45, 126, 61, 34, 108, 163, 189, 48, 111, 14, 190, 207, 27, 195, 189, 106, 192, 199, 189, 2, 61, 72, 189, 167, 151, 13, 62, 222, 75, 80, 61, 157, 161, 244, 189, 172, 107, 21, 59, 149, 5, 123, 61, 246, 250, 253, 60, 183, 72, 75, 190, 170, 104, 30, 189, 219, 146, 188, 60, 15, 58, 168, 189, 70, 216, 39, 62, 24, 166, 149, 189, 116, 95, 106, 62, 53, 231, 203, 191, 66, 217, 71, 187, 22, 77, 72, 189, 31, 134, 237, 60, 47, 147, 14, 191, 246, 11, 141, 190, 38, 195, 200, 190, 57, 225, 70, 190, 41, 116, 230, 189, 38, 49, 88, 189, 66, 28, 185, 61, 255, 143, 133, 61, 131, 45, 126, 190, 41, 169, 191, 190, 106, 181, 159, 191, 7, 157, 40, 62, 206, 236, 135, 190, 248, 105, 96, 62, 17, 226, 52, 60, 43, 143, 43, 191, 236, 173, 232, 190, 199, 124, 170, 190, 51, 9, 161, 62, 160, 247, 187, 61, 159, 210, 131, 62, 81, 141, 37, 190, 244, 192, 225, 60, 70, 253, 48, 62, 179, 44, 118, 62, 15, 167, 237, 61, 210, 199, 17, 62, 67, 161, 181, 61, 70, 242, 217, 61, 17, 227, 152, 61, 224, 180, 92, 61, 217, 129, 208, 62, 255, 167, 20, 190, 239, 203, 135, 62, 33, 234, 79, 62, 217, 74, 49, 190, 183, 163, 1, 62, 167, 129, 137, 61, 191, 187, 234, 189, 109, 98, 40, 190, 175, 69, 205, 188, 205, 2, 139, 62, 101, 109, 11, 63, 232, 223, 224, 61, 97, 10, 203, 62, 218, 183, 35, 190, 244, 93, 175, 190, 40, 219, 222, 189, 128, 131, 137, 61, 14, 183, 147, 62, 115, 245, 45, 190, 205, 140, 148, 62, 251, 185, 209, 190, 73, 65, 162, 61, 110, 6, 54, 62, 152, 161, 157, 61, 97, 72, 171, 60, 5, 115, 4, 190, 87, 140, 87, 61, 75, 82, 67, 62, 238, 179, 134, 191, 150, 197, 180, 190, 89, 199, 212, 190, 8, 45, 123, 190, 199, 169, 14, 62, 52, 160, 210, 61, 173, 135, 156, 62, 20, 57, 221, 61, 115, 189, 94, 189, 179, 39, 17, 190, 210, 29, 184, 189, 9, 208, 193, 189, 202, 39, 115, 189, 69, 126, 128, 188, 246, 91, 38, 191, 252, 105, 216, 189, 12, 49, 123, 62, 213, 169, 170, 61, 246, 195, 199, 189, 237, 61, 230, 190, 216, 25, 47, 62, 245, 57, 131, 62, 226, 51, 3, 189, 92, 71, 200, 190, 185, 146, 24, 62, 214, 1, 166, 62, 255, 223, 86, 187, 176, 131, 235, 61, 21, 122, 179, 61, 141, 188, 97, 190, 124, 249, 90, 62, 137, 101, 85, 191, 87, 54, 242, 60, 198, 233, 22, 62, 17, 5, 14, 62, 85, 176, 114, 61, 249, 127, 12, 62, 27, 63, 251, 60, 9, 189, 68, 62, 50, 88, 118, 62, 30, 184, 34, 62, 51, 206, 191, 186, 21, 3, 93, 61, 147, 54, 48, 190, 128, 197, 86, 190, 33, 116, 37, 62, 76, 115, 45, 188, 218, 238, 224, 189, 125, 42, 149, 61, 67, 246, 68, 191, 229, 40, 40, 190, 147, 28, 167, 189, 95, 221, 36, 62, 79, 57, 136, 61, 59, 197, 94, 191, 85, 203, 109, 189, 89, 177, 43, 62, 139, 65, 191, 59, 0, 44, 168, 182, 146, 184, 130, 61, 12, 233, 6, 189, 9, 105, 77, 190, 114, 88, 253, 189, 149, 233, 237, 189, 251, 240, 141, 62, 135, 253, 46, 191, 151, 41, 165, 61, 34, 217, 49, 190, 148, 226, 47, 62, 28, 96, 6, 189, 203, 177, 65, 190, 25, 170, 99, 189, 66, 170, 33, 62, 198, 111, 19, 62, 246, 123, 147, 61, 95, 70, 169, 189, 181, 94, 108, 62, 23, 36, 1, 62, 62, 178, 242, 59, 195, 67, 41, 189, 76, 8, 149, 190, 242, 183, 252, 61, 70, 220, 47, 62, 62, 94, 121, 61, 169, 124, 57, 191, 5, 43, 204, 190, 85, 237, 95, 61, 60, 26, 12, 62, 144, 4, 33, 62, 40, 205, 239, 190, 185, 230, 145, 61, 174, 221, 166, 61, 57, 111, 138, 189, 80, 148, 209, 61, 36, 42, 199, 190, 0, 0, 196, 61, 158, 216, 126, 62, 137, 153, 48, 191, 119, 99, 0, 190, 174, 237, 21, 191, 121, 209, 68, 189, 83, 116, 205, 189, 83, 99, 27, 190, 155, 17, 179, 61, 207, 14, 48, 62, 123, 144, 45, 190, 189, 94, 119, 62, 77, 246, 6, 62, 6, 103, 33, 63, 123, 167, 243, 61, 129, 188, 16, 189, 40, 146, 67, 189, 234, 224, 69, 190, 230, 14, 178, 62, 57, 42, 120, 62, 154, 254, 102, 61, 220, 130, 41, 191, 68, 121, 142, 189, 198, 202, 33, 62, 100, 22, 212, 187, 120, 42, 63, 62, 12, 118, 101, 190, 213, 185, 137, 62, 238, 100, 248, 189, 170, 106, 65, 191, 125, 237, 183, 190, 23, 213, 38, 191, 190, 208, 59, 62, 1, 42, 93, 61, 14, 25, 163, 190, 110, 210, 78, 190, 183, 170, 168, 190, 49, 71, 124, 190, 81, 244, 122, 191, 80, 165, 198, 190, 146, 35, 193, 190, 248, 175, 87, 190, 72, 115, 146, 189, 180, 22, 237, 190, 143, 22, 66, 188, 181, 62, 175, 190, 5, 113, 230, 190, 23, 220, 143, 189, 195, 20, 239, 61, 71, 5, 157, 190, 160, 12, 28, 188, 130, 224, 33, 190, 4, 13, 113, 190, 242, 212, 130, 191, 253, 79, 28, 61, 155, 221, 188, 190, 238, 51, 53, 62, 183, 212, 140, 188, 92, 203, 49, 62, 70, 49, 205, 190, 209, 224, 234, 189, 242, 82, 17, 62, 89, 157, 98, 189, 216, 160, 145, 62, 24, 219, 68, 190, 53, 119, 175, 190, 206, 188, 179, 62, 152, 103, 39, 62, 238, 190, 141, 61, 233, 71, 20, 190, 222, 169, 97, 188, 175, 30, 108, 62, 184, 11, 148, 60, 143, 140, 250, 189, 246, 174, 20, 189, 41, 135, 174, 190, 192, 137, 151, 61, 11, 198, 15, 191, 156, 49, 71, 62, 217, 100, 144, 190, 187, 124, 129, 61, 252, 78, 101, 62, 204, 200, 39, 190, 77, 98, 41, 189, 209, 37, 182, 190, 170, 255, 101, 62, 57, 164, 95, 62, 251, 70, 110, 189, 162, 79, 124, 61, 179, 148, 64, 62, 127, 90, 237, 62, 235, 242, 58, 190, 39, 77, 9, 61, 90, 176, 123, 189, 33, 50, 240, 188, 167, 177, 26, 190, 94, 57, 49, 190, 72, 162, 118, 189, 24, 82, 180, 189, 152, 77, 138, 60, 234, 18, 10, 61, 227, 221, 6, 62, 68, 241, 188, 189, 99, 71, 216, 61, 31, 132, 124, 61, 157, 218, 12, 190, 87, 191, 17, 189, 125, 205, 35, 62, 10, 248, 185, 61, 18, 36, 34, 190, 36, 62, 254, 189, 13, 240, 100, 189, 124, 71, 3, 62, 21, 86, 35, 190, 195, 82, 135, 189, 207, 35, 144, 61, 166, 114, 65, 190, 40, 78, 79, 189, 48, 52, 191, 189, 190, 199, 112, 189, 185, 157, 208, 189, 32, 43, 35, 62, 44, 173, 217, 189, 255, 255, 206, 185, 144, 63, 215, 61, 60, 24, 36, 190, 212, 221, 11, 62, 221, 0, 220, 189, 13, 32, 26, 62, 165, 201, 69, 62, 120, 35, 92, 191, 186, 36, 216, 189, 107, 10, 227, 190, 121, 11, 64, 189, 51, 89, 186, 60, 234, 10, 158, 58, 147, 89, 200, 61, 221, 178, 236, 188, 207, 105, 22, 61, 159, 65, 194, 62, 242, 235, 30, 189, 34, 147, 8, 63, 146, 79, 243, 189, 18, 28, 241, 188, 234, 99, 128, 190, 94, 77, 46, 190, 205, 170, 140, 62, 90, 75, 65, 61, 135, 216, 113, 62, 120, 98, 38, 191, 248, 18, 41, 188, 64, 200, 196, 189, 42, 194, 75, 189, 153, 153, 146, 62, 105, 155, 20, 191, 199, 91, 155, 62, 194, 44, 204, 188, 51, 34, 140, 61, 14, 27, 198, 189, 85, 178, 254, 189, 67, 15, 237, 60, 226, 172, 4, 190, 248, 12, 156, 189, 28, 104, 135, 189, 86, 16, 31, 187, 95, 28, 9, 190, 13, 143, 54, 189, 87, 22, 187, 61, 41, 47, 18, 190, 190, 79, 247, 189, 66, 68, 52, 190, 118, 68, 32, 62, 18, 182, 59, 61, 47, 193, 38, 190, 32, 12, 207, 189, 172, 217, 12, 61, 183, 52, 231, 189, 250, 55, 245, 61, 222, 115, 233, 188, 165, 32, 215, 61, 78, 36, 37, 62, 248, 57, 22, 62, 72, 3, 242, 186, 245, 1, 164, 61, 190, 69, 44, 189, 146, 79, 2, 190, 23, 41, 34, 190, 39, 118, 143, 187, 24, 180, 37, 190, 88, 8, 49, 190, 48, 15, 37, 190, 217, 246, 34, 59, 216, 65, 164, 61, 45, 68, 233, 189, 248, 230, 51, 61, 202, 210, 115, 189, 239, 55, 39, 190, 225, 247, 9, 190, 87, 170, 159, 61, 129, 29, 118, 60, 138, 37, 24, 190, 182, 6, 139, 61, 180, 156, 4, 61, 227, 15, 110, 60, 190, 147, 69, 190, 192, 33, 86, 188, 205, 61, 210, 61, 8, 15, 1, 62, 100, 110, 213, 189, 45, 126, 36, 190, 233, 225, 203, 60, 165, 42, 51, 60, 217, 239, 254, 60, 5, 21, 119, 61, 227, 254, 22, 190, 129, 255, 148, 189, 202, 111, 198, 61, 87, 32, 141, 60, 125, 27, 160, 189, 177, 22, 3, 190, 197, 63, 112, 61, 193, 87, 173, 61, 11, 181, 67, 62, 146, 43, 112, 191, 67, 237, 151, 62, 8, 98, 240, 191, 162, 14, 186, 189, 180, 0, 225, 189, 145, 81, 9, 61, 242, 35, 178, 190, 88, 161, 181, 59, 209, 200, 163, 188, 113, 95, 20, 190, 183, 229, 178, 60, 115, 149, 46, 62, 124, 92, 48, 190, 227, 144, 194, 61, 206, 81, 77, 191, 73, 96, 213, 190, 17, 36, 199, 191, 55, 33, 163, 60, 154, 93, 126, 190, 134, 8, 50, 62, 108, 81, 68, 62, 227, 115, 158, 189, 203, 112, 151, 190, 57, 69, 39, 62, 32, 98, 168, 62, 212, 82, 218, 189, 30, 176, 13, 61, 7, 217, 80, 190, 159, 63, 31, 190, 166, 225, 18, 190, 191, 232, 216, 61, 254, 186, 19, 62, 56, 111, 52, 191, 192, 63, 110, 62, 119, 95, 216, 191, 117, 5, 149, 61, 118, 220, 75, 62, 18, 22, 48, 190, 251, 128, 66, 191, 42, 48, 141, 61, 47, 90, 16, 191, 63, 63, 128, 190, 141, 184, 86, 61, 140, 19, 210, 61, 178, 167, 57, 190, 150, 253, 28, 61, 145, 152, 15, 191, 71, 104, 88, 190, 68, 174, 149, 191, 127, 167, 166, 62, 190, 94, 227, 190, 251, 215, 61, 62, 56, 57, 203, 187, 7, 177, 16, 191, 88, 48, 128, 189, 28, 30, 155, 60, 63, 25, 176, 62, 118, 150, 231, 190, 110, 31, 195, 62, 202, 103, 78, 61, 128, 14, 106, 190, 249, 67, 90, 60, 140, 45, 1, 190, 184, 3, 212, 59, 134, 201, 128, 62, 181, 150, 223, 61, 112, 119, 246, 189, 122, 191, 80, 190, 10, 23, 110, 188, 238, 103, 5, 61, 162, 113, 197, 61, 92, 123, 158, 61, 199, 190, 154, 61, 168, 79, 140, 188, 137, 120, 64, 190, 42, 15, 113, 60, 120, 167, 98, 189, 238, 239, 181, 188, 165, 32, 60, 190, 152, 103, 49, 62, 138, 142, 149, 190, 206, 212, 51, 190, 88, 70, 58, 62, 130, 133, 83, 62, 152, 42, 93, 61, 108, 145, 90, 190, 143, 30, 83, 61, 192, 227, 66, 62, 60, 221, 217, 61, 60, 187, 135, 61, 143, 184, 68, 62, 131, 46, 100, 190, 6, 199, 51, 190, 66, 248, 184, 189, 25, 217, 192, 190, 236, 43, 74, 190, 62, 151, 67, 190, 138, 245, 159, 62, 159, 229, 161, 62, 48, 60, 99, 191, 99, 37, 118, 189, 252, 95, 137, 190, 71, 54, 148, 61, 171, 101, 205, 190, 108, 98, 218, 189, 112, 230, 180, 188, 237, 35, 205, 188, 8, 228, 160, 61, 243, 232, 195, 189, 180, 203, 38, 62, 243, 105, 222, 62, 182, 201, 120, 61, 208, 67, 176, 62, 81, 35, 73, 61, 24, 175, 176, 190, 252, 215, 51, 62, 175, 87, 14, 62, 25, 212, 160, 189, 145, 135, 198, 190, 223, 141, 23, 62, 103, 30, 145, 62, 58, 85, 131, 62, 142, 62, 204, 188, 216, 96, 183, 190, 49, 83, 14, 60, 154, 3, 233, 189, 42, 69, 29, 62, 17, 229, 12, 190, 66, 41, 20, 189, 161, 109, 177, 190, 35, 7, 149, 62, 130, 13, 185, 62, 92, 113, 12, 190, 62, 99, 152, 62, 227, 149, 20, 190, 46, 194, 107, 187, 176, 199, 74, 188, 0, 110, 161, 189, 48, 202, 134, 189, 212, 104, 11, 62, 23, 176, 71, 190, 199, 160, 237, 61, 243, 112, 241, 191, 76, 175, 79, 190, 52, 219, 229, 61, 232, 143, 133, 62, 88, 249, 148, 188, 173, 8, 144, 60, 108, 1, 44, 189, 102, 170, 86, 189, 234, 90, 197, 62, 74, 183, 148, 62, 121, 96, 152, 191, 75, 139, 34, 61, 144, 232, 236, 61, 149, 148, 155, 190, 52, 108, 73, 191, 161, 232, 118, 61, 11, 28, 80, 189, 5, 38, 0, 190, 75, 174, 223, 62, 168, 138, 122, 62, 144, 113, 51, 191, 230, 125, 24, 61, 179, 221, 190, 61, 234, 132, 140, 189, 168, 12, 62, 61, 109, 59, 210, 61, 174, 112, 221, 62, 159, 65, 145, 188, 13, 171, 231, 189, 204, 163, 39, 189, 29, 167, 235, 190, 239, 124, 186, 190, 113, 30, 27, 191, 129, 202, 133, 62, 88, 176, 201, 190, 199, 30, 114, 62, 193, 71, 124, 62, 70, 221, 38, 190, 147, 75, 32, 190, 78, 106, 73, 191, 141, 227, 22, 63, 201, 212, 59, 62, 147, 173, 163, 189, 252, 183, 71, 190, 197, 166, 194, 61, 124, 94, 144, 62, 10, 102, 32, 190, 35, 46, 144, 189, 235, 65, 155, 61, 20, 253, 227, 61, 206, 155, 184, 61, 69, 7, 222, 61, 222, 163, 168, 191, 215, 124, 181, 60, 125, 141, 25, 189, 164, 73, 76, 62, 129, 0, 51, 190, 205, 61, 149, 61, 139, 244, 130, 190, 171, 223, 88, 190, 184, 85, 197, 61, 63, 45, 27, 62, 240, 125, 106, 61, 166, 3, 8, 62, 39, 93, 255, 189, 182, 18, 219, 189, 5, 137, 157, 191, 129, 201, 195, 60, 234, 12, 161, 190, 16, 199, 8, 62, 83, 52, 127, 62, 188, 189, 140, 190, 3, 150, 121, 62, 33, 235, 146, 61, 27, 109, 229, 62, 10, 144, 130, 189, 108, 121, 135, 62, 243, 244, 196, 190, 203, 52, 152, 59, 144, 14, 36, 62, 158, 205, 124, 190, 36, 174, 176, 190, 236, 64, 55, 189, 53, 165, 175, 189, 118, 94, 226, 62, 168, 100, 27, 190, 185, 230, 60, 190, 131, 99, 162, 62, 96, 65, 5, 190, 168, 252, 74, 61, 224, 148, 60, 190, 173, 133, 84, 62, 23, 199, 40, 190, 97, 154, 236, 61, 35, 123, 56, 62, 55, 40, 10, 62, 89, 169, 237, 61, 115, 52, 213, 60, 180, 216, 16, 63, 97, 142, 29, 62, 168, 126, 43, 62, 220, 113, 175, 188, 118, 197, 54, 61, 7, 97, 146, 61, 75, 26, 236, 61, 86, 171, 140, 62, 35, 99, 115, 191, 25, 173, 133, 62, 3, 184, 62, 190, 138, 141, 251, 61, 186, 249, 141, 62, 144, 21, 219, 61, 113, 49, 104, 191, 220, 7, 36, 191, 56, 220, 105, 190, 74, 226, 8, 189, 97, 10, 24, 189, 39, 179, 35, 191, 235, 159, 154, 189, 14, 218, 208, 190, 70, 143, 217, 61, 49, 203, 104, 191, 227, 164, 33, 190, 85, 140, 148, 189, 95, 245, 100, 62, 158, 106, 24, 190, 103, 101, 225, 61, 125, 248, 229, 61, 42, 141, 180, 62, 255, 162, 96, 62, 2, 143, 116, 190, 51, 184, 16, 190, 96, 24, 160, 190, 55, 191, 96, 62, 226, 30, 19, 62, 98, 228, 80, 189, 111, 220, 105, 191, 233, 101, 210, 190, 143, 159, 125, 61, 30, 109, 66, 61, 3, 115, 52, 62, 173, 20, 225, 190, 201, 248, 145, 60, 157, 21, 194, 189, 163, 109, 101, 189, 138, 140, 21, 62, 239, 105, 137, 62, 29, 167, 203, 61, 163, 121, 61, 191, 188, 171, 1, 62, 116, 8, 181, 60, 239, 185, 17, 190, 42, 157, 20, 191, 36, 20, 127, 189, 203, 78, 84, 191, 212, 189, 176, 61, 252, 34, 114, 190, 201, 222, 103, 189, 55, 254, 58, 188, 49, 115, 142, 62, 101, 107, 8, 60, 4, 26, 133, 59, 39, 180, 229, 190, 182, 192, 57, 62, 142, 253, 180, 190, 134, 204, 80, 60, 167, 39, 126, 190, 160, 210, 231, 189, 49, 165, 251, 62, 168, 207, 211, 61, 252, 10, 167, 62, 23, 40, 235, 188, 39, 169, 162, 62, 196, 37, 183, 189, 189, 179, 159, 61, 142, 183, 142, 188, 192, 245, 239, 189, 252, 253, 139, 189, 209, 243, 55, 62, 175, 113, 141, 190, 241, 66, 240, 189, 71, 43, 178, 190, 85, 123, 182, 190, 81, 41, 60, 191, 129, 102, 105, 190, 233, 169, 94, 190, 183, 116, 32, 190, 86, 205, 124, 62, 177, 68, 151, 190, 137, 4, 216, 61, 114, 206, 129, 189, 96, 10, 93, 189, 7, 144, 137, 61, 251, 254, 138, 62, 132, 33, 173, 191, 82, 235, 227, 190, 162, 149, 6, 190, 128, 215, 135, 190, 46, 69, 89, 189, 169, 168, 25, 61, 244, 18, 61, 190, 138, 204, 111, 62, 171, 196, 228, 190, 142, 127, 29, 61, 32, 127, 155, 190, 151, 142, 189, 189, 104, 51, 28, 62, 238, 65, 13, 190, 66, 161, 92, 189, 46, 21, 216, 189, 140, 202, 124, 62, 88, 101, 3, 62, 60, 255, 79, 188, 25, 88, 215, 190, 0, 242, 92, 188, 250, 238, 245, 189, 50, 55, 70, 62, 128, 130, 215, 60, 189, 17, 175, 60, 30, 245, 19, 61, 92, 140, 0, 61, 55, 104, 39, 190, 100, 237, 251, 61, 53, 244, 90, 190, 133, 112, 137, 60, 212, 252, 207, 62, 229, 3, 49, 60, 215, 31, 134, 61, 160, 157, 73, 62, 22, 125, 149, 62, 231, 176, 134, 60, 61, 63, 56, 190, 162, 227, 241, 189, 208, 101, 82, 62, 37, 210, 115, 188, 92, 22, 114, 60, 192, 40, 198, 189, 223, 241, 139, 61, 165, 17, 5, 190, 190, 217, 22, 62, 114, 217, 247, 61, 209, 85, 41, 62, 183, 35, 26, 62, 46, 243, 170, 61, 244, 19, 164, 190, 174, 37, 160, 189, 42, 9, 8, 189, 182, 173, 35, 189, 176, 111, 119, 61, 191, 69, 163, 189, 212, 158, 17, 62, 246, 130, 50, 190, 105, 245, 155, 61, 8, 81, 23, 62, 108, 160, 73, 190, 110, 136, 201, 189, 234, 131, 184, 190, 225, 244, 58, 62, 57, 74, 214, 190, 8, 19, 5, 62, 165, 132, 159, 188, 190, 82, 128, 188, 105, 164, 128, 62, 248, 77, 197, 61, 244, 236, 143, 62, 208, 77, 51, 62, 98, 141, 20, 62, 83, 116, 222, 61, 144, 228, 181, 189, 6, 4, 70, 62, 97, 26, 196, 59, 38, 58, 65, 189, 156, 95, 202, 61, 51, 72, 84, 189, 25, 24, 82, 189, 234, 94, 179, 190, 204, 226, 85, 189, 234, 194, 33, 188, 141, 229, 138, 188, 46, 102, 190, 60, 178, 137, 222, 61, 93, 64, 97, 190, 210, 218, 60, 189, 70, 163, 14, 190, 187, 126, 216, 189, 8, 209, 224, 61, 84, 125, 193, 189, 187, 103, 77, 61, 154, 1, 38, 190, 126, 114, 3, 190, 164, 94, 208, 189, 244, 170, 111, 189, 75, 113, 242, 61, 53, 119, 169, 190, 106, 50, 108, 190, 246, 114, 150, 190, 68, 177, 235, 61, 189, 159, 91, 62, 33, 27, 41, 191, 202, 212, 142, 61, 1, 235, 208, 61, 76, 234, 227, 189, 27, 175, 170, 190, 95, 140, 187, 188, 139, 224, 32, 190, 25, 213, 242, 61, 166, 195, 142, 191, 84, 227, 171, 189, 143, 244, 80, 191, 201, 31, 186, 189, 7, 25, 22, 61, 147, 118, 65, 190, 240, 25, 128, 61, 15, 217, 159, 188, 18, 169, 193, 189, 79, 231, 29, 61, 72, 128, 204, 188, 94, 131, 38, 62, 240, 34, 143, 62, 36, 160, 141, 62, 21, 31, 240, 62, 124, 181, 232, 61, 3, 120, 3, 191, 32, 245, 222, 60, 18, 217, 0, 191, 181, 147, 20, 188, 75, 246, 92, 188, 13, 214, 7, 188, 251, 247, 25, 191, 69, 16, 79, 190, 58, 96, 67, 62, 171, 164, 84, 62, 170, 183, 64, 62, 61, 146, 140, 191, 68, 243, 169, 61, 252, 86, 122, 61, 9, 145, 67, 61, 23, 170, 126, 60, 167, 66, 225, 62, 174, 71, 217, 189, 250, 164, 223, 190, 165, 187, 151, 62, 43, 221, 147, 62, 209, 96, 193, 189, 95, 31, 238, 189, 33, 84, 117, 61, 79, 76, 84, 62, 191, 188, 8, 62, 63, 191, 184, 188, 67, 82, 254, 61, 194, 24, 145, 190, 122, 34, 222, 189, 63, 120, 73, 191, 221, 39, 28, 61, 53, 53, 243, 190, 173, 132, 170, 61, 47, 171, 141, 62, 182, 92, 216, 189, 169, 252, 203, 61, 78, 249, 201, 190, 146, 103, 38, 62, 4, 25, 100, 62, 144, 94, 130, 190, 202, 225, 1, 190, 110, 183, 68, 62, 215, 244, 221, 62, 92, 130, 144, 190, 44, 125, 71, 61, 2, 214, 60, 190, 209, 2, 29, 190, 104, 47, 9, 62, 238, 191, 25, 190, 12, 5, 73, 190, 107, 111, 31, 190, 43, 43, 229, 189, 160, 104, 74, 190, 183, 204, 81, 189, 233, 0, 104, 189, 161, 69, 61, 60, 194, 208, 105, 62, 103, 47, 244, 61, 93, 4, 34, 62, 150, 170, 46, 190, 248, 107, 143, 61, 140, 149, 190, 60, 180, 24, 65, 62, 89, 83, 74, 189, 205, 228, 143, 62, 251, 68, 36, 61, 204, 194, 248, 189, 45, 11, 146, 61, 112, 29, 95, 59, 148, 233, 163, 61, 211, 89, 21, 62, 196, 229, 150, 190, 190, 116, 50, 62, 131, 102, 11, 62, 135, 177, 19, 62, 111, 131, 142, 189, 221, 19, 33, 62, 34, 107, 41, 60, 178, 227, 11, 189, 23, 199, 120, 62, 154, 93, 70, 189, 143, 29, 244, 190, 167, 70, 80, 191, 56, 184, 149, 61, 31, 77, 189, 189, 168, 68, 83, 190, 60, 40, 142, 61, 143, 216, 201, 61, 27, 124, 3, 190, 253, 244, 232, 61, 106, 255, 220, 61, 69, 69, 149, 190, 108, 136, 156, 190, 201, 71, 88, 189, 131, 208, 15, 62, 79, 231, 163, 190, 121, 255, 188, 62, 243, 218, 4, 62, 225, 211, 25, 190, 207, 159, 132, 189, 194, 193, 215, 190, 93, 198, 215, 62, 222, 123, 66, 62, 21, 250, 100, 190, 34, 16, 99, 190, 181, 210, 27, 62, 175, 217, 65, 62, 188, 11, 140, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 43, 197, 61, 38, 137, 223, 61, 62, 75, 58, 62, 140, 24, 54, 190, 113, 214, 131, 62, 130, 139, 166, 189, 232, 237, 244, 61, 81, 155, 119, 189, 10, 123, 80, 62, 213, 196, 52, 62, 163, 192, 179, 189, 10, 186, 254, 61, 156, 195, 27, 190, 80, 171, 162, 189, 239, 213, 244, 60, 220, 113, 111, 62, 55, 149, 163, 62, 127, 61, 204, 62, 9, 227, 127, 62, 228, 162, 170, 62, 86, 86, 170, 57, 43, 152, 166, 62, 187, 207, 16, 62, 38, 188, 5, 62, 227, 66, 6, 190, 31, 148, 144, 62, 38, 44, 125, 62, 156, 250, 189, 189, 210, 135, 132, 60, 9, 185, 131, 62, 110, 138, 119, 62, 124, 219, 127, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 220, 1, 63, 180, 198, 147, 61, 161, 251, 94, 63, 6, 24, 196, 190, 161, 243, 175, 62, 156, 237, 139, 62, 73, 96, 163, 190, 91, 47, 255, 190, 86, 206, 48, 191, 243, 228, 213, 62, 116, 103, 33, 190, 184, 40, 179, 190, 21, 202, 23, 61, 51, 198, 249, 189, 107, 144, 80, 63, 34, 93, 92, 63, 107, 68, 92, 188, 73, 182, 88, 191, 67, 214, 52, 62, 120, 244, 143, 63, 224, 253, 185, 62, 41, 187, 253, 190, 225, 55, 60, 191, 121, 189, 68, 62, 212, 58, 196, 189, 36, 255, 195, 189, 13, 74, 13, 61, 3, 116, 235, 61, 17, 252, 252, 62, 5, 185, 49, 63, 34, 40, 23, 188, 127, 124, 13, 63, 210, 54, 79, 62, 173, 243, 35, 61, 235, 9, 49, 189, 213, 131, 228, 61, 118, 49, 95, 190, 104, 12, 72, 190, 82, 204, 47, 190, 178, 137, 188, 61, 199, 167, 167, 62, 186, 39, 62, 62, 7, 46, 140, 188, 172, 124, 41, 60, 236, 28, 251, 61, 118, 184, 167, 189, 29, 200, 205, 61, 219, 123, 28, 62, 229, 85, 25, 190, 220, 18, 15, 62, 154, 71, 109, 190, 203, 59, 128, 61, 219, 244, 220, 59, 236, 202, 42, 190, 68, 111, 118, 189, 36, 182, 153, 190, 63, 134, 247, 190, 37, 216, 108, 190, 219, 223, 118, 190, 138, 118, 221, 59, 185, 249, 49, 189, 232, 170, 163, 188, 159, 21, 163, 190, 145, 77, 51, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {196, 214, 88, 190, 88, 156, 17, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {247, 233, 241, 186, 230, 101, 228, 190, 225, 207, 171, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {237, 239, 8, 64, 188, 89, 126, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0024/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}