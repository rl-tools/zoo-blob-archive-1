// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 41, 104, 190, 160, 144, 219, 62, 118, 71, 91, 188, 227, 242, 242, 190, 8, 232, 250, 190, 44, 32, 83, 63, 214, 115, 134, 188, 149, 18, 40, 63, 134, 113, 238, 62, 166, 188, 43, 63, 71, 175, 12, 191, 76, 218, 148, 190, 84, 195, 78, 190, 220, 239, 224, 62, 158, 249, 218, 61, 161, 104, 238, 190, 28, 34, 27, 190, 14, 227, 200, 190, 28, 170, 246, 189, 249, 172, 165, 190, 104, 181, 132, 190, 57, 21, 112, 60, 115, 74, 7, 63, 96, 216, 3, 191, 43, 7, 169, 187, 136, 189, 43, 191, 78, 64, 144, 190, 186, 136, 220, 62, 111, 228, 4, 63, 198, 193, 232, 190, 167, 230, 206, 190, 190, 200, 66, 191, 83, 220, 87, 63, 233, 173, 210, 62, 64, 241, 149, 62, 38, 148, 12, 191, 5, 43, 58, 63, 241, 205, 243, 190, 161, 178, 241, 62, 46, 215, 179, 62, 24, 26, 34, 63, 218, 211, 11, 191, 128, 230, 132, 189, 92, 168, 137, 62, 240, 216, 97, 60, 163, 94, 58, 63, 129, 88, 61, 63, 198, 40, 229, 62, 222, 171, 133, 190, 25, 68, 130, 62, 51, 6, 181, 190, 188, 171, 63, 63, 59, 80, 19, 63, 181, 150, 107, 62, 75, 253, 17, 63, 127, 11, 14, 190, 27, 240, 88, 61, 209, 9, 124, 190, 191, 155, 74, 191, 209, 215, 28, 190, 138, 182, 198, 190, 145, 127, 182, 190, 127, 250, 120, 189, 119, 213, 8, 63, 11, 210, 254, 190, 62, 171, 236, 190, 62, 227, 55, 190, 152, 137, 51, 63, 243, 234, 228, 61, 186, 203, 139, 62, 132, 129, 36, 63, 230, 242, 202, 190, 173, 33, 244, 190, 150, 1, 14, 63, 194, 206, 12, 191, 248, 37, 55, 62, 79, 0, 74, 191, 211, 158, 47, 61, 196, 104, 37, 190, 166, 185, 115, 191, 55, 232, 201, 62, 15, 0, 246, 189, 158, 108, 85, 63, 226, 25, 44, 61, 12, 251, 96, 190, 29, 152, 133, 190, 135, 49, 249, 190, 153, 187, 244, 189, 195, 236, 204, 62, 9, 210, 160, 190, 214, 207, 93, 63, 161, 236, 230, 190, 113, 178, 146, 189, 143, 135, 65, 63, 194, 92, 131, 61, 210, 95, 29, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 102, 25, 191, 125, 75, 36, 190, 180, 124, 4, 63, 226, 229, 98, 62, 159, 201, 12, 63, 131, 109, 27, 190, 78, 75, 10, 191, 87, 40, 130, 190, 210, 55, 143, 190, 188, 149, 183, 62, 36, 44, 205, 189, 194, 225, 5, 190, 237, 90, 17, 63, 170, 11, 233, 62, 145, 151, 198, 190, 199, 11, 145, 60, 188, 38, 14, 190, 148, 20, 243, 61, 183, 162, 35, 63, 137, 19, 79, 62, 12, 0, 209, 62, 136, 60, 218, 59, 122, 176, 37, 63, 47, 224, 189, 62, 54, 118, 209, 190, 78, 175, 2, 62, 168, 3, 245, 62, 36, 0, 126, 62, 161, 163, 204, 62, 60, 181, 227, 62, 10, 213, 157, 190, 246, 11, 203, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 30, 42, 62, 94, 156, 36, 188, 191, 197, 162, 59, 176, 25, 77, 62, 94, 92, 8, 191, 49, 128, 38, 61, 138, 196, 208, 61, 8, 7, 195, 187, 34, 104, 250, 61, 6, 102, 128, 61, 108, 220, 29, 190, 103, 182, 13, 62, 159, 216, 145, 62, 219, 79, 6, 62, 29, 143, 147, 61, 31, 148, 251, 189, 207, 87, 232, 189, 40, 69, 201, 189, 222, 4, 232, 60, 31, 185, 165, 60, 175, 31, 162, 189, 201, 190, 223, 61, 212, 18, 252, 190, 136, 65, 10, 190, 213, 113, 17, 62, 44, 242, 230, 62, 158, 37, 158, 62, 225, 98, 222, 190, 80, 69, 111, 189, 177, 12, 240, 58, 94, 78, 145, 62, 179, 155, 70, 190, 191, 154, 168, 61, 76, 236, 48, 190, 152, 244, 72, 61, 232, 223, 60, 188, 58, 77, 226, 60, 137, 105, 150, 188, 193, 193, 133, 61, 161, 45, 195, 189, 218, 130, 209, 189, 151, 108, 3, 190, 144, 217, 187, 189, 234, 55, 33, 190, 139, 72, 157, 61, 51, 194, 13, 190, 173, 89, 123, 189, 184, 84, 91, 189, 98, 158, 38, 188, 158, 36, 100, 189, 178, 45, 126, 61, 34, 108, 163, 189, 48, 111, 14, 190, 207, 27, 195, 189, 106, 192, 199, 189, 2, 61, 72, 189, 167, 151, 13, 62, 222, 75, 80, 61, 157, 161, 244, 189, 172, 107, 21, 59, 149, 5, 123, 61, 246, 250, 253, 60, 183, 72, 75, 190, 170, 104, 30, 189, 219, 146, 188, 60, 120, 112, 20, 62, 244, 125, 60, 62, 164, 231, 183, 60, 175, 145, 39, 62, 115, 145, 173, 190, 66, 217, 71, 187, 177, 160, 200, 60, 52, 134, 237, 60, 173, 211, 211, 190, 167, 153, 188, 189, 177, 57, 66, 189, 163, 193, 8, 190, 51, 185, 140, 190, 38, 49, 88, 189, 112, 4, 160, 189, 114, 35, 51, 190, 250, 178, 220, 190, 224, 239, 179, 190, 110, 0, 142, 190, 233, 248, 23, 62, 124, 22, 132, 190, 206, 243, 38, 62, 127, 39, 83, 190, 31, 57, 52, 191, 21, 95, 185, 190, 100, 181, 16, 190, 225, 100, 89, 62, 244, 204, 158, 189, 247, 160, 26, 62, 81, 141, 37, 190, 158, 188, 147, 189, 70, 253, 48, 62, 171, 106, 87, 62, 86, 218, 126, 61, 71, 231, 166, 61, 4, 58, 223, 60, 182, 102, 157, 189, 156, 163, 234, 59, 201, 14, 154, 61, 39, 226, 100, 62, 43, 6, 35, 190, 162, 232, 126, 62, 105, 161, 29, 62, 10, 142, 253, 189, 14, 15, 13, 62, 167, 129, 137, 61, 123, 71, 242, 189, 38, 11, 92, 190, 54, 47, 6, 189, 41, 141, 102, 62, 77, 199, 159, 62, 125, 212, 176, 61, 201, 164, 145, 62, 240, 4, 91, 190, 74, 194, 152, 190, 58, 157, 122, 189, 254, 213, 76, 61, 249, 126, 127, 62, 252, 55, 84, 189, 228, 81, 40, 62, 218, 138, 188, 190, 177, 16, 85, 190, 54, 127, 32, 62, 152, 161, 157, 61, 22, 53, 142, 61, 190, 61, 138, 189, 89, 0, 46, 189, 20, 47, 62, 62, 235, 19, 171, 190, 70, 123, 157, 189, 125, 99, 175, 189, 125, 223, 3, 60, 137, 220, 82, 61, 90, 182, 29, 62, 216, 127, 129, 62, 197, 49, 214, 61, 144, 56, 59, 190, 179, 39, 17, 190, 252, 168, 152, 189, 110, 126, 84, 190, 42, 227, 139, 189, 17, 83, 255, 188, 98, 67, 111, 188, 245, 33, 245, 189, 166, 35, 71, 62, 80, 162, 219, 61, 206, 164, 128, 190, 94, 213, 18, 191, 204, 186, 230, 61, 109, 245, 158, 62, 12, 102, 252, 189, 188, 188, 30, 190, 89, 168, 59, 61, 14, 112, 156, 62, 18, 201, 47, 61, 176, 131, 235, 61, 195, 23, 175, 188, 94, 74, 0, 190, 180, 130, 86, 62, 246, 220, 157, 190, 7, 251, 17, 62, 142, 232, 244, 188, 200, 134, 251, 61, 196, 229, 233, 61, 119, 46, 10, 62, 215, 109, 0, 190, 155, 85, 58, 62, 104, 192, 28, 61, 52, 15, 43, 62, 51, 206, 191, 186, 79, 120, 143, 60, 112, 143, 30, 190, 198, 94, 77, 190, 38, 249, 32, 62, 65, 85, 21, 62, 59, 222, 59, 189, 125, 23, 186, 61, 243, 156, 161, 190, 251, 224, 37, 190, 146, 126, 43, 190, 125, 245, 163, 61, 130, 252, 0, 190, 81, 37, 132, 190, 230, 204, 209, 60, 144, 145, 24, 62, 59, 14, 163, 61, 154, 138, 46, 190, 146, 184, 130, 61, 24, 148, 231, 59, 197, 77, 204, 187, 44, 17, 209, 189, 71, 148, 0, 190, 159, 103, 47, 62, 252, 103, 121, 190, 160, 42, 240, 60, 149, 176, 191, 188, 115, 84, 29, 62, 37, 82, 123, 188, 97, 31, 85, 190, 74, 74, 205, 188, 106, 70, 14, 62, 198, 111, 19, 62, 84, 176, 29, 62, 134, 119, 156, 189, 158, 225, 122, 61, 181, 190, 31, 61, 120, 194, 162, 189, 220, 104, 103, 189, 128, 180, 136, 190, 57, 113, 105, 60, 183, 33, 31, 62, 4, 148, 121, 61, 121, 254, 24, 191, 114, 191, 140, 190, 100, 170, 98, 188, 29, 195, 238, 61, 239, 74, 243, 61, 227, 63, 144, 190, 1, 90, 120, 61, 174, 221, 166, 61, 220, 89, 14, 190, 100, 106, 132, 61, 194, 225, 44, 190, 44, 136, 81, 61, 28, 89, 128, 62, 151, 198, 99, 190, 18, 252, 75, 190, 201, 119, 129, 190, 250, 193, 120, 189, 119, 94, 35, 190, 58, 166, 31, 190, 84, 201, 192, 61, 157, 117, 42, 62, 123, 144, 45, 190, 22, 17, 66, 62, 113, 17, 52, 62, 155, 167, 0, 63, 47, 105, 254, 61, 191, 191, 157, 189, 120, 141, 54, 61, 66, 243, 223, 189, 56, 43, 95, 62, 137, 21, 114, 62, 131, 93, 111, 60, 109, 178, 213, 190, 253, 13, 253, 189, 156, 186, 8, 62, 79, 52, 217, 188, 30, 199, 39, 62, 45, 193, 252, 188, 229, 3, 93, 62, 238, 100, 248, 189, 178, 40, 101, 191, 2, 165, 118, 189, 143, 87, 9, 190, 225, 203, 155, 62, 56, 184, 48, 62, 25, 229, 155, 190, 247, 30, 140, 190, 218, 186, 128, 189, 159, 251, 75, 190, 194, 176, 161, 191, 223, 182, 177, 190, 49, 169, 7, 191, 208, 103, 18, 190, 72, 115, 146, 189, 252, 124, 235, 190, 110, 147, 162, 61, 161, 124, 173, 190, 100, 93, 87, 190, 161, 87, 122, 60, 204, 130, 59, 62, 36, 227, 59, 190, 194, 59, 194, 61, 118, 169, 101, 189, 189, 14, 61, 190, 233, 138, 178, 190, 7, 86, 14, 61, 105, 146, 76, 190, 52, 243, 107, 62, 20, 233, 16, 61, 206, 165, 235, 61, 70, 49, 205, 190, 209, 224, 234, 189, 41, 63, 49, 62, 197, 37, 92, 188, 110, 167, 69, 62, 54, 222, 54, 190, 89, 137, 97, 190, 191, 71, 58, 60, 151, 138, 8, 62, 146, 102, 139, 61, 44, 233, 20, 190, 66, 173, 35, 188, 147, 106, 129, 62, 108, 77, 2, 190, 230, 42, 12, 190, 246, 174, 20, 189, 174, 121, 28, 190, 233, 54, 20, 61, 121, 249, 176, 190, 87, 207, 75, 62, 109, 242, 252, 189, 15, 67, 130, 188, 179, 183, 110, 62, 87, 144, 5, 61, 17, 44, 153, 189, 64, 17, 217, 190, 61, 148, 133, 61, 118, 241, 59, 62, 154, 71, 207, 61, 28, 6, 227, 61, 55, 4, 16, 62, 156, 115, 210, 62, 39, 26, 9, 190, 39, 77, 9, 61, 90, 176, 123, 189, 33, 50, 240, 188, 167, 177, 26, 190, 94, 57, 49, 190, 72, 162, 118, 189, 24, 82, 180, 189, 152, 77, 138, 60, 234, 18, 10, 61, 227, 221, 6, 62, 68, 241, 188, 189, 99, 71, 216, 61, 31, 132, 124, 61, 157, 218, 12, 190, 87, 191, 17, 189, 125, 205, 35, 62, 10, 248, 185, 61, 18, 36, 34, 190, 36, 62, 254, 189, 13, 240, 100, 189, 124, 71, 3, 62, 21, 86, 35, 190, 195, 82, 135, 189, 207, 35, 144, 61, 166, 114, 65, 190, 40, 78, 79, 189, 48, 52, 191, 189, 190, 199, 112, 189, 185, 157, 208, 189, 32, 43, 35, 62, 44, 173, 217, 189, 255, 255, 206, 185, 144, 63, 215, 61, 84, 58, 132, 190, 205, 247, 199, 61, 56, 139, 130, 61, 180, 122, 205, 61, 9, 118, 12, 62, 101, 199, 148, 190, 126, 19, 1, 190, 95, 226, 22, 190, 45, 78, 177, 188, 213, 4, 137, 189, 141, 30, 58, 61, 97, 176, 46, 61, 200, 187, 20, 184, 207, 105, 22, 61, 185, 107, 160, 62, 36, 83, 221, 60, 223, 241, 192, 62, 149, 217, 27, 190, 161, 220, 196, 189, 80, 95, 71, 190, 209, 20, 153, 189, 64, 225, 54, 62, 229, 113, 154, 61, 146, 100, 133, 62, 122, 131, 5, 191, 206, 135, 234, 189, 85, 114, 177, 189, 211, 37, 35, 189, 144, 113, 155, 62, 209, 8, 201, 190, 178, 249, 91, 62, 194, 44, 204, 188, 51, 34, 140, 61, 14, 27, 198, 189, 85, 178, 254, 189, 67, 15, 237, 60, 226, 172, 4, 190, 248, 12, 156, 189, 28, 104, 135, 189, 86, 16, 31, 187, 95, 28, 9, 190, 13, 143, 54, 189, 87, 22, 187, 61, 41, 47, 18, 190, 190, 79, 247, 189, 66, 68, 52, 190, 118, 68, 32, 62, 18, 182, 59, 61, 47, 193, 38, 190, 32, 12, 207, 189, 172, 217, 12, 61, 183, 52, 231, 189, 250, 55, 245, 61, 222, 115, 233, 188, 165, 32, 215, 61, 78, 36, 37, 62, 248, 57, 22, 62, 72, 3, 242, 186, 245, 1, 164, 61, 190, 69, 44, 189, 146, 79, 2, 190, 23, 41, 34, 190, 39, 118, 143, 187, 24, 180, 37, 190, 88, 8, 49, 190, 80, 194, 36, 190, 217, 246, 34, 59, 88, 47, 192, 61, 204, 120, 218, 189, 248, 230, 51, 61, 194, 122, 63, 189, 186, 4, 39, 190, 211, 224, 3, 190, 87, 170, 159, 61, 97, 34, 159, 60, 138, 37, 24, 190, 91, 225, 167, 61, 180, 156, 4, 61, 227, 15, 110, 60, 76, 47, 60, 190, 192, 33, 86, 188, 38, 165, 210, 61, 6, 67, 8, 62, 134, 110, 189, 189, 214, 16, 36, 190, 150, 49, 18, 61, 88, 106, 190, 60, 54, 41, 36, 61, 5, 21, 119, 61, 153, 205, 21, 190, 120, 38, 131, 189, 108, 47, 245, 61, 166, 74, 8, 61, 125, 27, 160, 189, 177, 22, 3, 190, 197, 63, 112, 61, 47, 73, 132, 61, 102, 3, 58, 62, 179, 56, 128, 188, 155, 206, 113, 62, 43, 253, 131, 190, 245, 116, 179, 189, 9, 27, 25, 190, 190, 126, 128, 61, 214, 187, 95, 190, 206, 164, 54, 189, 94, 240, 194, 61, 170, 56, 71, 190, 119, 110, 137, 189, 115, 149, 46, 62, 242, 10, 185, 189, 4, 62, 188, 189, 180, 232, 188, 190, 63, 62, 141, 190, 229, 201, 183, 190, 75, 183, 96, 189, 23, 28, 186, 189, 206, 209, 252, 61, 198, 35, 51, 61, 1, 231, 42, 190, 3, 41, 199, 190, 23, 34, 25, 62, 88, 130, 142, 62, 69, 131, 32, 189, 230, 203, 21, 188, 111, 239, 59, 190, 30, 248, 35, 190, 166, 225, 18, 190, 222, 134, 221, 61, 29, 61, 248, 61, 122, 108, 99, 190, 125, 85, 16, 62, 158, 133, 146, 190, 117, 5, 149, 61, 247, 9, 150, 189, 74, 175, 29, 190, 77, 244, 58, 191, 111, 94, 70, 61, 67, 86, 18, 190, 179, 179, 150, 190, 162, 51, 198, 190, 140, 19, 210, 61, 120, 186, 162, 189, 67, 174, 158, 190, 238, 1, 71, 190, 145, 39, 5, 190, 35, 117, 240, 189, 240, 179, 141, 62, 150, 213, 224, 190, 93, 19, 230, 61, 35, 49, 253, 190, 199, 101, 64, 191, 79, 114, 184, 186, 56, 203, 84, 61, 96, 192, 93, 62, 254, 71, 185, 190, 126, 82, 54, 62, 202, 103, 78, 61, 192, 3, 90, 190, 249, 67, 90, 60, 223, 104, 205, 189, 211, 154, 145, 60, 134, 31, 61, 62, 106, 50, 47, 62, 167, 54, 107, 189, 145, 103, 59, 189, 126, 149, 126, 187, 226, 142, 120, 61, 29, 74, 191, 61, 220, 242, 228, 61, 107, 170, 134, 60, 174, 186, 248, 60, 108, 76, 59, 190, 42, 15, 113, 60, 169, 222, 87, 189, 203, 201, 186, 187, 24, 57, 34, 190, 133, 136, 47, 62, 176, 79, 22, 190, 103, 207, 26, 190, 138, 102, 254, 61, 207, 197, 51, 62, 26, 93, 108, 61, 60, 178, 122, 190, 126, 208, 221, 188, 116, 131, 36, 62, 39, 180, 129, 59, 21, 8, 156, 61, 223, 110, 68, 62, 164, 9, 234, 189, 248, 135, 56, 190, 66, 248, 184, 189, 253, 159, 21, 191, 137, 243, 15, 190, 75, 44, 28, 190, 11, 236, 105, 62, 31, 118, 146, 187, 106, 201, 150, 190, 185, 222, 140, 189, 181, 235, 55, 190, 84, 189, 196, 61, 40, 200, 38, 191, 44, 161, 140, 189, 126, 254, 42, 61, 177, 210, 94, 60, 8, 228, 160, 61, 73, 195, 63, 189, 6, 250, 31, 62, 235, 130, 175, 62, 117, 78, 5, 60, 192, 194, 5, 189, 121, 238, 92, 189, 125, 17, 146, 190, 193, 60, 29, 60, 117, 101, 62, 62, 109, 192, 54, 189, 81, 16, 206, 190, 109, 251, 210, 189, 231, 38, 20, 62, 74, 111, 79, 62, 115, 143, 173, 60, 16, 16, 41, 190, 88, 9, 92, 61, 154, 3, 233, 189, 220, 255, 27, 190, 118, 136, 98, 190, 96, 235, 239, 189, 21, 109, 201, 190, 186, 139, 127, 62, 140, 246, 35, 62, 96, 69, 128, 189, 211, 139, 97, 62, 39, 224, 58, 190, 193, 198, 109, 190, 36, 74, 227, 188, 251, 123, 86, 189, 212, 212, 126, 189, 212, 104, 11, 62, 251, 246, 250, 189, 55, 210, 53, 62, 0, 243, 43, 189, 57, 3, 216, 190, 122, 192, 37, 59, 182, 168, 52, 62, 145, 7, 200, 189, 102, 84, 163, 190, 154, 69, 218, 188, 31, 65, 136, 188, 239, 85, 213, 61, 188, 43, 253, 61, 204, 161, 80, 191, 217, 16, 200, 60, 68, 163, 34, 62, 147, 79, 59, 191, 244, 192, 34, 62, 161, 232, 118, 61, 81, 123, 88, 189, 111, 187, 215, 60, 114, 175, 137, 62, 210, 159, 132, 62, 12, 160, 148, 190, 236, 210, 51, 190, 37, 210, 22, 62, 189, 44, 65, 190, 189, 90, 97, 60, 214, 53, 110, 61, 62, 239, 216, 62, 241, 139, 75, 189, 198, 49, 98, 190, 204, 163, 39, 189, 248, 66, 118, 190, 242, 195, 233, 190, 233, 121, 210, 190, 181, 66, 142, 62, 22, 144, 125, 189, 190, 98, 188, 61, 83, 20, 9, 62, 218, 200, 41, 189, 46, 117, 146, 190, 219, 177, 129, 191, 76, 133, 204, 62, 40, 138, 59, 62, 0, 159, 210, 59, 40, 226, 50, 189, 16, 124, 114, 60, 8, 200, 52, 62, 42, 28, 175, 189, 35, 46, 144, 189, 114, 224, 28, 62, 23, 1, 143, 61, 27, 195, 174, 188, 210, 171, 119, 60, 28, 42, 213, 187, 227, 126, 94, 61, 230, 113, 142, 189, 119, 246, 173, 189, 249, 104, 29, 190, 246, 186, 26, 62, 107, 16, 221, 189, 189, 79, 68, 190, 66, 184, 226, 189, 63, 45, 27, 62, 104, 236, 95, 61, 232, 214, 145, 189, 191, 154, 167, 189, 202, 1, 146, 189, 153, 98, 122, 190, 223, 193, 229, 59, 168, 43, 155, 60, 199, 98, 17, 60, 38, 176, 177, 187, 35, 55, 220, 190, 120, 112, 248, 61, 251, 38, 55, 62, 234, 38, 203, 61, 150, 145, 62, 61, 218, 157, 216, 61, 164, 230, 78, 62, 154, 127, 105, 61, 144, 14, 36, 62, 255, 98, 89, 190, 196, 125, 136, 190, 46, 105, 112, 189, 210, 168, 192, 61, 79, 134, 106, 62, 79, 214, 53, 190, 49, 205, 66, 190, 166, 142, 44, 62, 117, 207, 14, 190, 123, 137, 12, 61, 246, 23, 89, 190, 85, 191, 47, 62, 160, 106, 16, 190, 97, 154, 236, 61, 79, 215, 196, 189, 235, 153, 61, 61, 194, 85, 177, 189, 31, 225, 125, 189, 117, 172, 163, 62, 49, 101, 91, 62, 1, 50, 231, 61, 49, 191, 7, 62, 47, 210, 214, 61, 85, 191, 167, 61, 9, 144, 17, 62, 129, 225, 78, 62, 175, 60, 183, 190, 52, 4, 28, 62, 82, 225, 186, 189, 143, 72, 17, 60, 246, 139, 170, 61, 144, 21, 219, 61, 64, 62, 209, 190, 173, 208, 130, 190, 224, 212, 34, 190, 14, 225, 216, 61, 207, 212, 190, 61, 135, 2, 36, 190, 175, 225, 189, 189, 220, 95, 120, 188, 254, 174, 152, 61, 171, 136, 85, 191, 60, 2, 51, 190, 97, 7, 76, 189, 143, 198, 83, 62, 158, 106, 24, 190, 12, 72, 47, 62, 1, 118, 85, 62, 223, 139, 157, 61, 42, 92, 219, 61, 139, 123, 235, 188, 141, 250, 2, 61, 232, 65, 132, 190, 53, 136, 72, 62, 49, 176, 0, 62, 6, 150, 3, 189, 122, 96, 207, 190, 162, 128, 122, 190, 216, 155, 140, 61, 126, 53, 254, 61, 75, 126, 44, 62, 233, 93, 34, 190, 58, 196, 112, 61, 157, 21, 194, 189, 198, 233, 185, 60, 232, 254, 30, 62, 116, 78, 109, 189, 40, 31, 148, 187, 109, 70, 207, 61, 188, 171, 1, 62, 111, 81, 85, 190, 23, 44, 82, 190, 174, 163, 145, 61, 115, 47, 26, 59, 254, 225, 79, 61, 143, 203, 148, 61, 233, 107, 13, 190, 201, 222, 103, 189, 140, 246, 137, 187, 215, 212, 31, 190, 23, 17, 226, 58, 193, 219, 32, 189, 74, 206, 44, 61, 54, 231, 4, 60, 4, 42, 103, 190, 76, 4, 49, 189, 231, 211, 132, 190, 247, 18, 116, 190, 190, 54, 133, 62, 191, 196, 176, 61, 137, 196, 152, 61, 9, 83, 49, 190, 87, 7, 35, 62, 228, 5, 89, 189, 180, 112, 215, 61, 142, 183, 142, 188, 202, 208, 48, 190, 106, 40, 175, 61, 91, 235, 50, 62, 87, 199, 245, 60, 244, 196, 169, 61, 210, 22, 95, 190, 199, 126, 193, 190, 68, 44, 140, 190, 41, 79, 12, 189, 44, 166, 174, 190, 211, 44, 44, 61, 198, 24, 76, 62, 110, 238, 113, 189, 137, 4, 216, 61, 42, 22, 105, 61, 209, 61, 75, 60, 148, 218, 0, 62, 5, 60, 112, 62, 142, 215, 132, 190, 118, 56, 51, 190, 131, 127, 188, 60, 217, 67, 27, 61, 191, 178, 88, 62, 15, 133, 155, 61, 35, 217, 154, 190, 69, 33, 156, 61, 240, 40, 251, 189, 52, 193, 67, 62, 220, 146, 52, 61, 143, 102, 17, 190, 21, 223, 204, 61, 238, 65, 13, 190, 134, 47, 95, 189, 2, 204, 231, 189, 13, 80, 46, 62, 60, 178, 9, 62, 54, 117, 197, 60, 218, 81, 21, 190, 56, 91, 5, 188, 221, 5, 255, 188, 9, 162, 7, 62, 232, 106, 40, 61, 112, 86, 130, 189, 51, 213, 148, 61, 22, 157, 149, 59, 55, 104, 39, 190, 170, 55, 193, 61, 242, 232, 29, 190, 54, 6, 156, 189, 59, 100, 155, 62, 244, 173, 214, 61, 17, 239, 232, 61, 200, 99, 10, 62, 209, 142, 65, 62, 207, 132, 26, 188, 157, 170, 61, 190, 86, 43, 23, 190, 222, 6, 13, 62, 159, 248, 232, 189, 142, 179, 255, 60, 34, 54, 216, 189, 132, 40, 124, 61, 171, 132, 32, 190, 190, 217, 22, 62, 235, 88, 38, 62, 161, 11, 65, 62, 202, 207, 146, 61, 131, 198, 29, 62, 172, 182, 114, 190, 31, 42, 14, 190, 102, 4, 166, 189, 222, 109, 97, 189, 147, 77, 64, 61, 220, 157, 55, 189, 111, 129, 163, 61, 59, 127, 51, 190, 114, 248, 45, 61, 8, 81, 23, 62, 250, 168, 69, 190, 74, 0, 40, 190, 209, 154, 137, 190, 89, 15, 90, 62, 166, 166, 109, 190, 221, 54, 227, 61, 58, 154, 163, 189, 241, 131, 169, 60, 13, 222, 82, 62, 31, 140, 200, 188, 250, 219, 84, 62, 36, 66, 27, 62, 44, 96, 132, 61, 246, 134, 222, 61, 134, 59, 23, 190, 95, 97, 162, 62, 93, 78, 23, 60, 38, 58, 65, 189, 210, 118, 197, 61, 51, 72, 84, 189, 12, 224, 15, 189, 23, 147, 179, 190, 10, 97, 39, 189, 84, 171, 245, 187, 198, 189, 140, 188, 127, 100, 18, 61, 189, 95, 230, 61, 175, 245, 100, 190, 23, 223, 47, 189, 23, 110, 7, 190, 110, 55, 207, 189, 8, 209, 224, 61, 84, 125, 193, 189, 220, 162, 95, 61, 154, 1, 38, 190, 21, 154, 220, 189, 224, 84, 167, 189, 66, 220, 66, 189, 242, 147, 4, 62, 112, 223, 169, 190, 139, 191, 105, 190, 142, 223, 151, 190, 251, 124, 18, 62, 191, 222, 110, 62, 33, 27, 41, 191, 95, 174, 165, 61, 182, 199, 215, 61, 89, 17, 219, 189, 252, 162, 170, 190, 95, 140, 187, 188, 125, 105, 236, 189, 89, 98, 154, 60, 102, 230, 173, 189, 185, 231, 53, 190, 63, 149, 40, 190, 61, 240, 110, 189, 137, 117, 210, 188, 19, 88, 198, 189, 49, 68, 37, 61, 24, 183, 132, 60, 79, 225, 20, 189, 51, 205, 42, 61, 247, 240, 245, 189, 94, 131, 38, 62, 154, 200, 194, 60, 51, 48, 161, 61, 186, 185, 28, 62, 147, 231, 106, 61, 236, 13, 208, 61, 94, 223, 200, 61, 183, 218, 25, 190, 171, 206, 23, 190, 18, 187, 212, 189, 74, 220, 215, 189, 218, 1, 42, 190, 7, 34, 206, 189, 26, 107, 175, 60, 201, 97, 73, 61, 222, 110, 144, 61, 92, 67, 44, 190, 159, 93, 205, 187, 252, 86, 122, 61, 1, 117, 197, 61, 145, 151, 0, 62, 182, 222, 160, 62, 115, 129, 144, 189, 123, 10, 130, 190, 6, 164, 188, 185, 112, 123, 118, 62, 144, 154, 15, 190, 113, 84, 222, 189, 216, 220, 99, 61, 138, 242, 89, 62, 100, 125, 1, 61, 107, 242, 71, 189, 67, 82, 254, 61, 49, 190, 135, 189, 39, 222, 84, 190, 109, 105, 5, 191, 15, 250, 45, 61, 174, 76, 69, 190, 183, 163, 147, 189, 191, 164, 133, 62, 50, 212, 207, 61, 240, 166, 108, 61, 37, 129, 0, 191, 96, 160, 79, 189, 146, 104, 28, 62, 237, 12, 234, 189, 6, 186, 214, 189, 110, 156, 4, 62, 116, 84, 228, 62, 25, 73, 120, 190, 44, 125, 71, 61, 30, 91, 119, 190, 141, 88, 149, 57, 106, 126, 138, 61, 58, 31, 30, 190, 9, 38, 226, 189, 177, 219, 184, 187, 245, 116, 234, 189, 99, 236, 216, 189, 180, 108, 157, 189, 229, 107, 221, 189, 74, 51, 102, 189, 150, 172, 108, 62, 225, 7, 2, 62, 93, 4, 34, 62, 233, 2, 171, 61, 135, 153, 228, 61, 124, 190, 22, 62, 92, 68, 14, 62, 74, 32, 1, 62, 211, 97, 71, 62, 22, 42, 103, 58, 44, 76, 31, 190, 19, 247, 188, 61, 12, 4, 253, 188, 42, 123, 99, 60, 192, 175, 186, 189, 135, 115, 161, 190, 162, 13, 62, 62, 254, 235, 245, 61, 130, 106, 42, 62, 114, 37, 82, 189, 221, 19, 33, 62, 91, 95, 204, 60, 89, 75, 40, 62, 223, 233, 189, 61, 244, 159, 236, 188, 178, 167, 3, 190, 124, 174, 47, 190, 220, 252, 156, 189, 72, 203, 152, 189, 159, 113, 140, 190, 8, 71, 54, 61, 15, 210, 246, 60, 31, 158, 248, 189, 71, 253, 247, 187, 106, 255, 220, 61, 185, 164, 7, 189, 100, 9, 176, 190, 68, 48, 35, 62, 9, 51, 55, 62, 3, 106, 4, 189, 212, 89, 28, 62, 180, 16, 214, 60, 31, 197, 154, 59, 202, 168, 92, 190, 3, 147, 253, 190, 73, 140, 128, 62, 149, 255, 7, 62, 35, 161, 195, 189, 29, 117, 35, 190, 30, 250, 170, 189, 99, 193, 38, 62, 220, 253, 34, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 130, 178, 60, 38, 137, 223, 61, 31, 212, 251, 61, 14, 1, 105, 190, 94, 114, 126, 62, 86, 159, 131, 188, 53, 131, 166, 61, 142, 93, 174, 189, 22, 171, 149, 62, 10, 123, 32, 62, 163, 192, 179, 189, 125, 14, 195, 61, 156, 195, 27, 190, 224, 233, 128, 189, 177, 250, 196, 60, 49, 184, 80, 62, 7, 136, 168, 62, 210, 74, 150, 62, 121, 205, 44, 62, 136, 239, 163, 62, 51, 224, 95, 189, 142, 118, 180, 62, 185, 208, 50, 62, 160, 108, 212, 188, 217, 59, 145, 188, 6, 50, 98, 62, 140, 190, 135, 62, 189, 20, 160, 189, 1, 222, 219, 188, 150, 95, 101, 62, 193, 223, 76, 62, 149, 81, 123, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 245, 95, 62, 180, 198, 147, 61, 181, 68, 160, 62, 181, 67, 148, 190, 53, 187, 193, 62, 41, 210, 79, 62, 81, 23, 66, 190, 242, 120, 178, 190, 93, 1, 40, 191, 16, 221, 178, 62, 116, 103, 33, 190, 41, 206, 111, 190, 21, 202, 23, 61, 74, 181, 251, 189, 229, 177, 62, 62, 209, 76, 195, 62, 31, 93, 40, 61, 90, 172, 34, 191, 237, 123, 32, 62, 29, 213, 54, 63, 164, 192, 85, 62, 154, 29, 140, 190, 23, 24, 170, 190, 253, 41, 119, 61, 173, 207, 9, 190, 240, 83, 101, 188, 224, 203, 1, 62, 128, 125, 249, 61, 218, 48, 71, 189, 182, 186, 173, 62, 52, 175, 104, 188, 41, 53, 194, 62, 126, 98, 32, 62, 173, 243, 35, 61, 98, 225, 73, 59, 76, 115, 236, 61, 90, 109, 35, 190, 186, 65, 6, 190, 230, 250, 90, 189, 28, 191, 79, 61, 145, 215, 37, 61, 65, 59, 35, 62, 7, 46, 140, 188, 178, 105, 55, 61, 236, 28, 251, 61, 130, 197, 168, 189, 42, 123, 51, 190, 227, 5, 187, 188, 198, 44, 253, 189, 221, 187, 185, 188, 66, 169, 133, 190, 131, 182, 106, 61, 101, 8, 62, 61, 66, 228, 113, 190, 198, 18, 34, 190, 27, 190, 254, 189, 61, 71, 219, 189, 190, 189, 101, 190, 140, 214, 44, 190, 156, 81, 237, 58, 159, 160, 82, 61, 43, 139, 23, 188, 76, 8, 173, 190, 161, 189, 130, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 196, 19, 190, 18, 36, 118, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {227, 68, 59, 63, 192, 43, 99, 63, 226, 124, 172, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {135, 170, 254, 191, 150, 76, 72, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0024/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}