// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 41, 104, 190, 160, 144, 219, 62, 118, 71, 91, 188, 22, 37, 1, 191, 3, 214, 178, 62, 99, 55, 48, 63, 163, 2, 4, 190, 14, 156, 165, 63, 136, 34, 189, 62, 23, 167, 21, 63, 174, 84, 153, 191, 37, 224, 129, 190, 240, 141, 242, 190, 87, 249, 232, 62, 77, 238, 238, 61, 198, 138, 202, 190, 41, 24, 218, 191, 30, 93, 163, 190, 34, 86, 175, 62, 191, 99, 139, 190, 85, 163, 115, 190, 53, 30, 217, 190, 5, 108, 251, 62, 109, 131, 204, 190, 211, 159, 120, 62, 7, 204, 138, 191, 116, 190, 154, 190, 163, 44, 235, 62, 103, 13, 181, 62, 187, 255, 200, 190, 47, 7, 131, 190, 68, 186, 163, 190, 5, 39, 36, 63, 177, 125, 254, 62, 49, 158, 244, 61, 38, 17, 7, 191, 21, 50, 177, 62, 26, 125, 193, 190, 27, 37, 209, 62, 80, 130, 16, 62, 88, 127, 30, 63, 94, 147, 197, 190, 128, 230, 132, 189, 92, 168, 137, 62, 240, 216, 97, 60, 208, 134, 36, 63, 233, 71, 188, 63, 208, 28, 204, 62, 155, 43, 242, 190, 28, 228, 128, 190, 51, 198, 116, 190, 254, 71, 119, 63, 157, 116, 85, 63, 116, 130, 9, 62, 222, 8, 248, 62, 172, 107, 198, 190, 131, 50, 46, 60, 75, 220, 151, 190, 148, 84, 218, 191, 240, 4, 186, 190, 53, 194, 173, 190, 130, 27, 38, 191, 26, 197, 81, 59, 15, 39, 26, 63, 44, 51, 79, 191, 165, 28, 222, 190, 196, 55, 82, 190, 137, 238, 157, 63, 195, 45, 137, 62, 177, 239, 113, 62, 38, 234, 43, 63, 56, 40, 137, 190, 151, 89, 39, 190, 230, 222, 128, 62, 200, 131, 235, 190, 85, 247, 93, 62, 13, 248, 130, 191, 18, 128, 83, 190, 63, 57, 99, 190, 199, 161, 140, 191, 52, 217, 124, 62, 199, 41, 20, 190, 203, 213, 172, 63, 156, 27, 129, 62, 234, 64, 14, 191, 102, 250, 190, 190, 135, 233, 213, 190, 88, 9, 80, 188, 43, 43, 76, 63, 142, 16, 156, 190, 202, 38, 78, 63, 31, 49, 41, 191, 241, 15, 121, 190, 82, 104, 77, 63, 208, 244, 165, 62, 238, 154, 25, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 102, 25, 191, 86, 22, 4, 190, 62, 131, 118, 62, 144, 174, 167, 62, 224, 127, 253, 62, 143, 129, 91, 190, 73, 199, 104, 191, 199, 7, 186, 190, 201, 98, 71, 190, 217, 15, 43, 190, 115, 180, 214, 190, 189, 165, 134, 190, 115, 222, 57, 63, 227, 194, 40, 60, 145, 151, 198, 190, 32, 13, 21, 190, 13, 96, 195, 189, 146, 131, 111, 62, 230, 140, 222, 62, 118, 40, 45, 190, 98, 207, 194, 62, 147, 74, 223, 189, 22, 164, 202, 62, 210, 84, 87, 62, 216, 113, 43, 191, 43, 132, 212, 61, 130, 177, 39, 63, 234, 210, 87, 62, 215, 243, 188, 62, 244, 95, 5, 62, 131, 233, 181, 190, 16, 70, 62, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 30, 42, 62, 251, 204, 234, 60, 98, 121, 134, 190, 36, 170, 152, 62, 238, 199, 6, 191, 248, 26, 89, 189, 249, 136, 108, 62, 244, 175, 112, 60, 100, 72, 163, 61, 120, 247, 227, 61, 79, 204, 194, 189, 114, 101, 36, 62, 189, 161, 225, 62, 155, 247, 41, 62, 29, 143, 147, 61, 161, 66, 219, 190, 182, 148, 185, 189, 46, 152, 167, 190, 93, 112, 131, 61, 202, 45, 247, 188, 240, 14, 60, 62, 212, 157, 252, 61, 235, 85, 119, 191, 233, 252, 169, 189, 59, 10, 74, 62, 29, 90, 47, 63, 125, 33, 18, 63, 233, 96, 153, 191, 118, 130, 99, 189, 12, 189, 39, 60, 226, 151, 144, 62, 254, 202, 175, 190, 191, 154, 168, 61, 76, 236, 48, 190, 152, 244, 72, 61, 232, 223, 60, 188, 58, 77, 226, 60, 137, 105, 150, 188, 193, 193, 133, 61, 161, 45, 195, 189, 218, 130, 209, 189, 151, 108, 3, 190, 144, 217, 187, 189, 234, 55, 33, 190, 139, 72, 157, 61, 51, 194, 13, 190, 173, 89, 123, 189, 184, 84, 91, 189, 98, 158, 38, 188, 158, 36, 100, 189, 178, 45, 126, 61, 34, 108, 163, 189, 48, 111, 14, 190, 207, 27, 195, 189, 106, 192, 199, 189, 2, 61, 72, 189, 167, 151, 13, 62, 222, 75, 80, 61, 157, 161, 244, 189, 172, 107, 21, 59, 149, 5, 123, 61, 246, 250, 253, 60, 183, 72, 75, 190, 170, 104, 30, 189, 219, 146, 188, 60, 198, 67, 165, 189, 181, 163, 64, 62, 191, 153, 7, 189, 103, 149, 83, 62, 43, 167, 212, 191, 66, 217, 71, 187, 148, 122, 209, 189, 31, 134, 237, 60, 87, 92, 195, 190, 31, 215, 151, 190, 113, 69, 90, 190, 6, 132, 102, 190, 160, 157, 185, 189, 38, 49, 88, 189, 187, 222, 35, 62, 71, 246, 25, 61, 3, 199, 42, 190, 59, 129, 17, 191, 52, 7, 170, 191, 74, 249, 2, 190, 181, 104, 103, 190, 16, 4, 122, 62, 188, 245, 201, 187, 107, 245, 24, 191, 236, 173, 232, 190, 103, 136, 241, 190, 65, 254, 179, 62, 89, 172, 223, 60, 243, 14, 118, 62, 27, 99, 47, 190, 212, 195, 22, 61, 70, 253, 48, 62, 245, 173, 129, 62, 192, 15, 9, 62, 28, 131, 179, 61, 131, 221, 232, 61, 42, 225, 56, 62, 151, 105, 132, 62, 4, 145, 175, 61, 106, 77, 222, 62, 174, 251, 74, 190, 3, 12, 138, 62, 179, 116, 52, 62, 81, 27, 82, 190, 65, 133, 177, 61, 167, 129, 137, 61, 198, 138, 57, 190, 59, 5, 215, 189, 25, 157, 213, 189, 31, 84, 87, 62, 36, 31, 28, 63, 143, 211, 49, 62, 60, 90, 184, 62, 53, 172, 25, 190, 172, 150, 218, 190, 149, 198, 143, 189, 6, 52, 36, 61, 37, 44, 148, 62, 3, 29, 17, 190, 88, 74, 163, 62, 35, 42, 216, 190, 192, 14, 159, 60, 128, 223, 16, 62, 152, 161, 157, 61, 120, 206, 133, 60, 99, 171, 33, 190, 9, 50, 132, 61, 180, 163, 45, 62, 2, 186, 133, 191, 15, 136, 251, 190, 32, 230, 224, 190, 100, 26, 62, 190, 146, 10, 24, 62, 110, 98, 207, 61, 132, 72, 162, 62, 51, 43, 196, 61, 73, 184, 37, 189, 179, 39, 17, 190, 166, 172, 159, 189, 102, 124, 8, 190, 58, 33, 67, 189, 91, 119, 177, 188, 240, 203, 56, 191, 87, 118, 14, 190, 119, 132, 122, 62, 219, 21, 126, 61, 195, 160, 164, 189, 139, 44, 216, 190, 24, 51, 78, 62, 207, 25, 123, 62, 121, 21, 76, 189, 190, 78, 179, 190, 157, 198, 2, 62, 208, 84, 167, 62, 220, 80, 97, 58, 176, 131, 235, 61, 108, 67, 240, 61, 173, 181, 139, 190, 20, 251, 104, 62, 130, 38, 76, 191, 136, 27, 144, 189, 57, 172, 21, 59, 25, 213, 32, 62, 109, 197, 60, 61, 158, 226, 45, 62, 114, 216, 128, 61, 65, 4, 95, 62, 158, 8, 128, 62, 54, 21, 71, 62, 51, 206, 191, 186, 156, 216, 9, 61, 158, 5, 55, 190, 98, 9, 100, 190, 229, 185, 49, 62, 104, 219, 168, 189, 206, 219, 26, 190, 8, 18, 180, 61, 169, 240, 87, 191, 170, 181, 244, 189, 66, 27, 95, 189, 131, 216, 35, 62, 107, 94, 175, 61, 192, 219, 144, 191, 28, 80, 41, 189, 15, 133, 69, 62, 102, 191, 152, 60, 201, 232, 188, 60, 146, 184, 130, 61, 40, 37, 173, 189, 182, 86, 74, 190, 176, 206, 192, 189, 113, 89, 43, 190, 73, 0, 192, 62, 251, 79, 4, 191, 78, 144, 174, 61, 32, 135, 245, 189, 23, 134, 50, 62, 142, 23, 205, 189, 9, 236, 49, 190, 65, 178, 169, 189, 92, 117, 38, 62, 198, 111, 19, 62, 39, 6, 156, 61, 223, 247, 194, 189, 23, 133, 155, 62, 20, 184, 37, 62, 234, 71, 41, 61, 231, 84, 128, 61, 46, 103, 135, 190, 105, 104, 43, 62, 220, 50, 56, 62, 78, 135, 77, 61, 85, 64, 49, 191, 160, 189, 16, 191, 187, 106, 192, 61, 247, 146, 13, 62, 185, 159, 49, 62, 184, 26, 197, 190, 13, 235, 130, 61, 174, 221, 166, 61, 230, 13, 85, 189, 231, 146, 19, 62, 129, 249, 209, 190, 61, 165, 28, 62, 24, 212, 54, 62, 6, 111, 61, 191, 19, 16, 5, 190, 12, 236, 49, 191, 210, 74, 101, 189, 103, 202, 190, 189, 14, 134, 31, 190, 177, 49, 199, 61, 150, 216, 43, 62, 123, 144, 45, 190, 26, 103, 104, 62, 159, 22, 174, 61, 230, 10, 34, 63, 154, 233, 250, 61, 237, 17, 71, 190, 246, 93, 171, 60, 160, 160, 75, 190, 187, 86, 207, 62, 153, 99, 113, 62, 243, 125, 243, 60, 78, 204, 54, 191, 241, 146, 77, 189, 203, 161, 83, 62, 73, 167, 213, 188, 102, 47, 87, 62, 28, 35, 98, 190, 22, 7, 134, 62, 238, 100, 248, 189, 78, 120, 50, 191, 88, 168, 174, 190, 164, 107, 30, 191, 126, 193, 110, 62, 12, 74, 47, 62, 14, 25, 163, 190, 178, 170, 9, 190, 205, 227, 161, 190, 138, 198, 70, 190, 81, 244, 122, 191, 12, 26, 156, 190, 157, 7, 154, 190, 47, 181, 240, 189, 72, 115, 146, 189, 180, 22, 237, 190, 152, 146, 143, 61, 181, 62, 175, 190, 232, 70, 227, 190, 14, 27, 53, 61, 26, 205, 48, 62, 141, 205, 153, 190, 198, 81, 196, 60, 230, 211, 181, 189, 194, 51, 238, 189, 73, 122, 119, 191, 58, 188, 183, 61, 96, 230, 177, 190, 41, 62, 121, 62, 106, 50, 25, 61, 92, 203, 49, 62, 70, 49, 205, 190, 209, 224, 234, 189, 200, 199, 50, 62, 21, 131, 124, 189, 124, 124, 154, 62, 116, 84, 44, 190, 201, 103, 211, 190, 250, 3, 144, 62, 123, 70, 227, 61, 229, 56, 63, 61, 105, 213, 39, 190, 155, 45, 139, 60, 236, 65, 68, 62, 46, 12, 56, 61, 43, 75, 27, 190, 246, 174, 20, 189, 2, 42, 169, 190, 75, 245, 175, 60, 17, 107, 16, 191, 97, 165, 89, 62, 30, 237, 168, 190, 232, 131, 103, 61, 230, 221, 86, 62, 208, 231, 79, 190, 70, 154, 83, 189, 10, 90, 204, 190, 81, 178, 111, 62, 10, 183, 117, 62, 39, 197, 31, 190, 86, 176, 43, 60, 174, 36, 7, 62, 230, 194, 242, 62, 213, 120, 36, 190, 39, 77, 9, 61, 90, 176, 123, 189, 33, 50, 240, 188, 167, 177, 26, 190, 94, 57, 49, 190, 72, 162, 118, 189, 24, 82, 180, 189, 152, 77, 138, 60, 234, 18, 10, 61, 227, 221, 6, 62, 68, 241, 188, 189, 99, 71, 216, 61, 31, 132, 124, 61, 157, 218, 12, 190, 87, 191, 17, 189, 125, 205, 35, 62, 10, 248, 185, 61, 18, 36, 34, 190, 36, 62, 254, 189, 13, 240, 100, 189, 124, 71, 3, 62, 21, 86, 35, 190, 195, 82, 135, 189, 207, 35, 144, 61, 166, 114, 65, 190, 40, 78, 79, 189, 48, 52, 191, 189, 190, 199, 112, 189, 185, 157, 208, 189, 32, 43, 35, 62, 44, 173, 217, 189, 255, 255, 206, 185, 144, 63, 215, 61, 96, 179, 19, 190, 31, 18, 55, 62, 90, 193, 5, 190, 146, 196, 82, 62, 76, 7, 219, 61, 167, 166, 103, 191, 233, 165, 237, 189, 187, 174, 13, 191, 245, 141, 102, 189, 102, 73, 237, 60, 239, 133, 167, 187, 142, 72, 214, 61, 59, 147, 16, 189, 207, 105, 22, 61, 67, 198, 186, 62, 95, 220, 191, 189, 160, 14, 9, 63, 11, 244, 240, 189, 238, 112, 72, 190, 206, 177, 60, 190, 142, 173, 52, 190, 234, 122, 170, 62, 157, 19, 30, 61, 211, 224, 82, 62, 191, 130, 52, 191, 229, 179, 204, 59, 179, 60, 65, 189, 220, 115, 152, 189, 28, 240, 156, 62, 166, 118, 19, 191, 12, 149, 150, 62, 194, 44, 204, 188, 51, 34, 140, 61, 14, 27, 198, 189, 85, 178, 254, 189, 67, 15, 237, 60, 226, 172, 4, 190, 248, 12, 156, 189, 28, 104, 135, 189, 86, 16, 31, 187, 95, 28, 9, 190, 13, 143, 54, 189, 87, 22, 187, 61, 41, 47, 18, 190, 190, 79, 247, 189, 66, 68, 52, 190, 118, 68, 32, 62, 18, 182, 59, 61, 47, 193, 38, 190, 32, 12, 207, 189, 172, 217, 12, 61, 183, 52, 231, 189, 250, 55, 245, 61, 222, 115, 233, 188, 165, 32, 215, 61, 78, 36, 37, 62, 248, 57, 22, 62, 72, 3, 242, 186, 245, 1, 164, 61, 190, 69, 44, 189, 146, 79, 2, 190, 23, 41, 34, 190, 39, 118, 143, 187, 24, 180, 37, 190, 88, 8, 49, 190, 48, 15, 37, 190, 217, 246, 34, 59, 216, 65, 164, 61, 45, 68, 233, 189, 248, 230, 51, 61, 202, 210, 115, 189, 239, 55, 39, 190, 225, 247, 9, 190, 87, 170, 159, 61, 129, 29, 118, 60, 138, 37, 24, 190, 182, 6, 139, 61, 180, 156, 4, 61, 227, 15, 110, 60, 190, 147, 69, 190, 192, 33, 86, 188, 205, 61, 210, 61, 8, 15, 1, 62, 100, 110, 213, 189, 45, 126, 36, 190, 233, 225, 203, 60, 165, 42, 51, 60, 217, 239, 254, 60, 5, 21, 119, 61, 227, 254, 22, 190, 129, 255, 148, 189, 202, 111, 198, 61, 87, 32, 141, 60, 125, 27, 160, 189, 177, 22, 3, 190, 197, 63, 112, 61, 181, 204, 183, 61, 67, 4, 87, 62, 232, 68, 118, 191, 165, 229, 135, 62, 116, 0, 243, 191, 162, 14, 186, 189, 2, 236, 26, 190, 145, 81, 9, 61, 90, 105, 175, 190, 196, 252, 127, 59, 233, 78, 84, 61, 122, 28, 14, 190, 37, 77, 232, 188, 115, 149, 46, 62, 201, 132, 147, 189, 147, 70, 210, 61, 73, 88, 37, 191, 147, 16, 207, 190, 43, 96, 204, 191, 168, 180, 142, 189, 224, 136, 103, 190, 192, 59, 69, 62, 110, 204, 4, 62, 209, 44, 164, 188, 234, 132, 199, 190, 79, 206, 1, 62, 226, 168, 183, 62, 104, 41, 20, 190, 196, 226, 129, 188, 7, 217, 80, 190, 65, 231, 233, 189, 166, 225, 18, 190, 124, 39, 122, 61, 220, 135, 7, 62, 210, 121, 56, 191, 213, 77, 45, 62, 227, 105, 218, 191, 117, 5, 149, 61, 4, 139, 50, 62, 18, 22, 48, 190, 78, 201, 67, 191, 247, 29, 60, 60, 218, 9, 229, 190, 79, 96, 156, 190, 80, 178, 200, 187, 140, 19, 210, 61, 159, 136, 218, 189, 232, 53, 170, 61, 195, 192, 212, 190, 33, 242, 143, 190, 113, 128, 153, 191, 105, 145, 51, 62, 190, 94, 227, 190, 44, 12, 54, 62, 76, 61, 143, 189, 212, 5, 232, 190, 56, 1, 252, 189, 187, 213, 174, 189, 77, 122, 182, 62, 111, 89, 240, 190, 112, 32, 169, 62, 202, 103, 78, 61, 237, 49, 118, 190, 249, 67, 90, 60, 234, 120, 210, 189, 10, 229, 2, 61, 171, 165, 91, 62, 13, 42, 227, 61, 95, 170, 2, 190, 134, 212, 75, 190, 232, 167, 118, 188, 4, 125, 102, 61, 226, 83, 163, 61, 90, 156, 174, 61, 237, 34, 164, 61, 88, 173, 111, 189, 135, 243, 69, 190, 42, 15, 113, 60, 123, 192, 44, 189, 14, 235, 5, 189, 165, 186, 116, 190, 27, 233, 233, 61, 172, 87, 157, 190, 94, 61, 65, 190, 70, 97, 59, 62, 211, 92, 110, 62, 67, 97, 25, 61, 186, 150, 81, 190, 64, 185, 209, 60, 128, 56, 53, 62, 77, 228, 6, 62, 144, 83, 182, 61, 71, 152, 90, 62, 194, 10, 103, 190, 206, 13, 47, 190, 66, 248, 184, 189, 104, 38, 8, 191, 78, 23, 40, 190, 127, 137, 68, 190, 128, 193, 105, 62, 211, 30, 201, 62, 97, 88, 50, 191, 89, 97, 120, 189, 78, 27, 133, 190, 236, 163, 127, 61, 185, 193, 6, 191, 152, 179, 214, 189, 213, 84, 1, 189, 247, 164, 255, 188, 8, 228, 160, 61, 70, 225, 155, 189, 85, 75, 48, 62, 126, 177, 232, 62, 158, 3, 134, 61, 154, 121, 199, 62, 200, 16, 113, 61, 66, 78, 178, 190, 11, 178, 93, 62, 216, 191, 253, 61, 163, 188, 183, 189, 138, 96, 197, 190, 128, 162, 3, 62, 208, 79, 173, 62, 82, 75, 134, 62, 231, 231, 48, 188, 197, 4, 181, 190, 125, 218, 174, 60, 154, 3, 233, 189, 226, 107, 82, 62, 206, 75, 217, 59, 50, 243, 199, 188, 114, 130, 136, 190, 132, 97, 128, 62, 231, 13, 163, 62, 170, 111, 131, 190, 32, 136, 149, 62, 244, 177, 47, 190, 7, 105, 221, 188, 144, 229, 97, 189, 37, 143, 64, 189, 109, 30, 254, 189, 212, 104, 11, 62, 23, 176, 71, 190, 213, 191, 150, 59, 181, 54, 18, 192, 85, 21, 10, 190, 183, 227, 156, 61, 177, 214, 121, 62, 174, 219, 8, 188, 14, 251, 79, 62, 125, 124, 166, 189, 54, 228, 41, 190, 65, 181, 194, 62, 201, 249, 162, 62, 54, 211, 135, 191, 151, 122, 154, 188, 247, 1, 33, 61, 164, 131, 110, 190, 31, 59, 155, 191, 161, 232, 118, 61, 245, 64, 60, 189, 27, 223, 60, 190, 53, 87, 233, 62, 146, 124, 114, 62, 148, 144, 63, 191, 91, 106, 187, 61, 53, 118, 32, 61, 230, 102, 63, 189, 187, 95, 139, 61, 4, 193, 221, 61, 137, 206, 231, 62, 128, 133, 209, 188, 139, 253, 204, 189, 204, 163, 39, 189, 76, 245, 254, 190, 67, 60, 247, 190, 111, 207, 29, 191, 13, 130, 135, 62, 90, 202, 222, 190, 206, 232, 85, 62, 232, 90, 136, 62, 0, 249, 89, 190, 40, 226, 7, 190, 249, 250, 74, 191, 23, 12, 28, 63, 134, 227, 51, 62, 56, 160, 66, 190, 193, 232, 113, 190, 162, 133, 118, 61, 115, 32, 164, 62, 197, 8, 42, 190, 35, 46, 144, 189, 172, 209, 139, 58, 208, 188, 123, 61, 234, 153, 160, 61, 141, 128, 63, 59, 230, 168, 178, 191, 215, 124, 181, 60, 168, 245, 203, 189, 38, 215, 69, 62, 161, 209, 139, 189, 40, 230, 103, 58, 80, 207, 33, 190, 42, 207, 149, 190, 185, 137, 237, 61, 63, 45, 27, 62, 211, 25, 161, 61, 156, 116, 125, 61, 246, 147, 129, 189, 105, 138, 47, 190, 6, 227, 169, 191, 147, 245, 12, 190, 131, 1, 179, 190, 40, 31, 178, 61, 107, 90, 107, 62, 136, 37, 124, 190, 138, 207, 129, 62, 42, 232, 20, 189, 40, 107, 216, 62, 146, 199, 16, 190, 82, 197, 122, 62, 70, 48, 242, 190, 158, 29, 51, 189, 144, 14, 36, 62, 170, 69, 156, 190, 75, 188, 179, 190, 145, 91, 120, 189, 221, 1, 58, 190, 115, 169, 1, 63, 239, 140, 87, 61, 78, 57, 48, 190, 237, 115, 172, 62, 230, 1, 26, 190, 78, 108, 229, 186, 140, 149, 68, 190, 120, 143, 60, 62, 197, 135, 60, 190, 97, 154, 236, 61, 207, 34, 64, 62, 226, 219, 54, 62, 249, 209, 229, 61, 149, 44, 68, 60, 214, 52, 31, 63, 46, 139, 7, 62, 29, 57, 37, 62, 244, 116, 23, 189, 164, 173, 167, 59, 151, 230, 179, 61, 224, 210, 220, 61, 158, 198, 120, 62, 21, 132, 118, 191, 204, 1, 140, 62, 123, 159, 50, 190, 80, 67, 228, 61, 111, 26, 129, 62, 144, 21, 219, 61, 160, 143, 133, 191, 47, 241, 20, 191, 102, 179, 74, 190, 163, 147, 132, 59, 231, 53, 196, 189, 88, 205, 54, 191, 53, 50, 180, 189, 113, 22, 4, 191, 233, 198, 231, 61, 184, 74, 103, 191, 246, 129, 25, 190, 169, 2, 133, 189, 195, 94, 109, 62, 158, 106, 24, 190, 91, 1, 210, 61, 161, 151, 102, 61, 153, 68, 222, 62, 126, 211, 138, 62, 182, 202, 210, 190, 71, 69, 83, 188, 112, 141, 154, 190, 150, 140, 164, 62, 198, 67, 32, 62, 38, 175, 174, 189, 191, 64, 119, 191, 99, 120, 254, 190, 46, 171, 28, 62, 249, 129, 183, 60, 243, 58, 69, 62, 135, 41, 190, 190, 250, 30, 157, 189, 157, 21, 194, 189, 152, 194, 103, 189, 148, 124, 27, 62, 138, 5, 130, 62, 52, 36, 172, 61, 255, 232, 76, 191, 188, 171, 1, 62, 92, 84, 192, 188, 172, 62, 41, 190, 104, 234, 39, 191, 232, 200, 133, 189, 112, 120, 104, 191, 143, 72, 144, 61, 32, 251, 153, 190, 201, 222, 103, 189, 31, 254, 31, 61, 135, 81, 141, 62, 25, 30, 17, 61, 189, 48, 169, 188, 78, 105, 6, 191, 147, 80, 10, 62, 36, 50, 208, 190, 249, 103, 143, 60, 23, 123, 143, 190, 52, 157, 149, 189, 38, 102, 248, 62, 222, 190, 154, 61, 53, 243, 173, 62, 169, 35, 177, 188, 240, 53, 157, 62, 164, 126, 231, 189, 19, 64, 179, 61, 142, 183, 142, 188, 230, 166, 60, 190, 217, 0, 229, 189, 134, 81, 80, 62, 231, 19, 226, 190, 28, 178, 226, 190, 71, 43, 178, 190, 85, 123, 182, 190, 201, 58, 46, 191, 41, 164, 139, 190, 34, 124, 142, 190, 4, 224, 112, 190, 161, 18, 132, 62, 39, 95, 185, 190, 137, 4, 216, 61, 248, 34, 143, 189, 96, 10, 93, 189, 64, 20, 143, 61, 138, 28, 147, 62, 96, 247, 234, 191, 128, 183, 5, 191, 47, 176, 237, 189, 191, 226, 180, 190, 209, 17, 1, 190, 169, 168, 25, 61, 124, 87, 16, 190, 22, 212, 122, 62, 114, 213, 161, 191, 208, 84, 226, 60, 83, 93, 214, 190, 198, 181, 136, 189, 221, 35, 30, 62, 238, 65, 13, 190, 92, 228, 9, 189, 12, 112, 114, 189, 174, 225, 101, 62, 94, 177, 42, 62, 77, 84, 228, 188, 154, 58, 224, 190, 4, 137, 5, 189, 18, 42, 15, 190, 95, 30, 52, 62, 75, 141, 249, 60, 193, 232, 83, 60, 15, 135, 218, 60, 12, 93, 175, 60, 55, 104, 39, 190, 68, 180, 5, 62, 213, 84, 129, 190, 123, 238, 34, 60, 40, 52, 201, 62, 133, 134, 195, 188, 217, 226, 199, 61, 61, 72, 65, 62, 217, 201, 178, 62, 94, 237, 228, 58, 251, 215, 80, 190, 98, 253, 30, 190, 228, 241, 93, 62, 113, 56, 26, 61, 225, 136, 246, 59, 179, 159, 154, 189, 240, 115, 151, 61, 102, 240, 1, 190, 190, 217, 22, 62, 47, 102, 224, 61, 105, 96, 193, 61, 212, 51, 42, 62, 248, 181, 122, 60, 210, 188, 178, 190, 186, 132, 4, 190, 147, 222, 42, 189, 42, 92, 123, 188, 106, 132, 109, 61, 224, 212, 170, 189, 173, 243, 24, 62, 176, 158, 84, 190, 35, 93, 154, 61, 8, 81, 23, 62, 80, 27, 129, 190, 229, 42, 237, 189, 10, 227, 216, 190, 76, 227, 46, 62, 185, 158, 227, 190, 113, 231, 204, 61, 93, 93, 11, 60, 20, 104, 209, 189, 43, 108, 122, 62, 29, 119, 207, 61, 151, 133, 153, 62, 180, 98, 65, 62, 122, 38, 26, 61, 101, 241, 5, 62, 67, 103, 177, 189, 244, 253, 109, 62, 252, 72, 13, 59, 38, 58, 65, 189, 156, 95, 202, 61, 51, 72, 84, 189, 82, 24, 102, 189, 63, 99, 179, 190, 182, 39, 110, 189, 234, 194, 33, 188, 141, 229, 138, 188, 155, 176, 160, 60, 167, 87, 222, 61, 93, 64, 97, 190, 19, 21, 65, 189, 103, 114, 15, 190, 198, 182, 216, 189, 8, 209, 224, 61, 84, 125, 193, 189, 115, 51, 69, 61, 154, 1, 38, 190, 54, 84, 5, 190, 189, 13, 221, 189, 206, 227, 123, 189, 70, 93, 235, 61, 53, 119, 169, 190, 106, 50, 108, 190, 246, 114, 150, 190, 106, 209, 227, 61, 251, 174, 87, 62, 33, 27, 41, 191, 16, 126, 133, 61, 1, 235, 208, 61, 229, 138, 230, 189, 27, 175, 170, 190, 95, 140, 187, 188, 183, 36, 25, 190, 122, 166, 23, 62, 51, 234, 167, 191, 7, 132, 231, 189, 139, 24, 114, 191, 201, 31, 186, 189, 87, 39, 137, 189, 248, 82, 78, 190, 23, 38, 18, 62, 46, 89, 178, 188, 85, 231, 5, 189, 223, 6, 155, 60, 123, 146, 13, 189, 94, 131, 38, 62, 73, 61, 184, 62, 61, 47, 27, 62, 118, 222, 17, 63, 24, 255, 13, 188, 215, 94, 45, 191, 117, 203, 45, 190, 114, 96, 12, 191, 252, 186, 151, 60, 151, 42, 113, 189, 53, 224, 200, 188, 63, 130, 33, 191, 75, 200, 141, 190, 83, 172, 108, 62, 92, 54, 163, 61, 216, 221, 16, 62, 244, 35, 161, 191, 242, 198, 207, 61, 252, 86, 122, 61, 70, 203, 126, 61, 155, 117, 158, 188, 230, 77, 236, 62, 157, 144, 157, 189, 241, 123, 9, 191, 19, 109, 60, 62, 0, 35, 158, 62, 177, 100, 214, 189, 198, 7, 178, 189, 140, 248, 155, 61, 58, 74, 101, 62, 151, 84, 30, 62, 42, 105, 157, 59, 67, 82, 254, 61, 59, 219, 146, 190, 109, 216, 222, 189, 157, 58, 75, 191, 213, 18, 107, 61, 227, 63, 10, 191, 207, 94, 67, 61, 70, 21, 149, 62, 174, 24, 42, 190, 177, 196, 12, 62, 28, 107, 185, 190, 223, 74, 49, 62, 125, 138, 119, 62, 215, 22, 197, 190, 116, 140, 244, 189, 169, 240, 73, 62, 0, 185, 230, 62, 2, 12, 135, 190, 44, 125, 71, 61, 141, 114, 91, 190, 147, 168, 132, 190, 116, 125, 230, 61, 9, 29, 90, 190, 56, 179, 130, 190, 126, 185, 54, 190, 31, 21, 5, 190, 7, 237, 84, 190, 111, 27, 104, 189, 13, 197, 196, 189, 23, 103, 111, 60, 85, 40, 44, 62, 19, 211, 231, 61, 93, 4, 34, 62, 139, 227, 131, 190, 222, 135, 147, 60, 7, 103, 18, 189, 169, 27, 36, 62, 144, 153, 230, 189, 97, 80, 106, 62, 146, 40, 49, 61, 83, 146, 90, 190, 79, 116, 83, 61, 242, 155, 104, 187, 222, 119, 95, 61, 23, 172, 19, 62, 107, 55, 2, 191, 112, 207, 44, 62, 137, 116, 18, 62, 61, 228, 44, 62, 130, 47, 237, 189, 221, 19, 33, 62, 210, 53, 159, 60, 83, 140, 195, 189, 5, 104, 139, 62, 209, 253, 121, 189, 53, 146, 244, 190, 181, 135, 66, 191, 240, 232, 19, 61, 75, 200, 204, 188, 164, 79, 66, 190, 22, 237, 164, 61, 206, 89, 244, 61, 98, 159, 6, 190, 99, 26, 251, 61, 106, 255, 220, 61, 20, 236, 164, 190, 88, 57, 210, 190, 81, 230, 100, 189, 156, 30, 25, 62, 177, 186, 163, 190, 24, 36, 189, 62, 96, 200, 35, 62, 134, 127, 84, 190, 25, 168, 56, 189, 42, 183, 216, 190, 191, 124, 237, 62, 27, 222, 72, 62, 1, 145, 222, 190, 65, 234, 102, 190, 142, 79, 229, 61, 43, 85, 106, 62, 31, 101, 141, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 62, 220, 61, 38, 137, 223, 61, 213, 27, 0, 62, 198, 146, 107, 190, 110, 77, 128, 62, 199, 129, 131, 189, 68, 29, 7, 62, 104, 90, 44, 189, 132, 14, 133, 62, 75, 134, 65, 62, 163, 192, 179, 189, 124, 31, 15, 62, 156, 195, 27, 190, 80, 171, 162, 189, 137, 94, 148, 188, 249, 106, 13, 62, 107, 50, 139, 62, 163, 217, 200, 62, 64, 32, 146, 62, 247, 4, 170, 62, 250, 171, 2, 190, 200, 51, 151, 62, 174, 95, 62, 62, 112, 71, 189, 61, 195, 66, 5, 190, 27, 112, 141, 62, 113, 54, 86, 62, 167, 202, 195, 189, 80, 114, 128, 189, 162, 72, 142, 62, 165, 203, 76, 62, 82, 203, 130, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 196, 1, 63, 180, 198, 147, 61, 82, 210, 103, 63, 210, 246, 201, 190, 20, 46, 150, 62, 215, 163, 132, 62, 25, 99, 139, 190, 168, 206, 252, 190, 197, 76, 71, 191, 246, 68, 195, 62, 116, 103, 33, 190, 177, 56, 169, 190, 21, 202, 23, 61, 51, 198, 249, 189, 80, 92, 46, 63, 159, 33, 43, 63, 255, 129, 57, 187, 107, 23, 80, 191, 59, 46, 31, 62, 244, 174, 149, 63, 223, 9, 173, 62, 203, 10, 246, 190, 74, 58, 72, 191, 47, 92, 14, 62, 147, 25, 40, 189, 49, 128, 158, 189, 121, 6, 10, 61, 144, 102, 235, 61, 120, 184, 22, 63, 4, 233, 61, 63, 193, 182, 133, 60, 156, 82, 10, 63, 108, 7, 2, 62, 173, 243, 35, 61, 60, 25, 241, 189, 222, 107, 229, 61, 235, 41, 138, 190, 160, 235, 172, 190, 250, 98, 113, 190, 192, 232, 153, 61, 99, 36, 125, 62, 130, 90, 170, 61, 7, 46, 140, 188, 140, 1, 68, 188, 236, 28, 251, 61, 118, 184, 167, 189, 40, 22, 241, 61, 161, 205, 36, 62, 74, 177, 21, 190, 77, 207, 69, 62, 56, 186, 151, 190, 207, 251, 2, 188, 61, 217, 21, 189, 167, 197, 30, 190, 136, 95, 65, 189, 32, 222, 191, 190, 232, 92, 42, 191, 73, 69, 131, 190, 205, 24, 140, 190, 228, 77, 221, 59, 227, 7, 212, 189, 126, 195, 21, 190, 236, 95, 174, 190, 157, 100, 152, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 31, 97, 190, 93, 168, 58, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {159, 82, 8, 63, 0, 165, 62, 191, 123, 69, 49, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {155, 110, 62, 64, 125, 109, 207, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0024/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}