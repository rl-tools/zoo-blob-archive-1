// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 22, 248, 62, 25, 32, 226, 61, 44, 27, 167, 62, 99, 62, 190, 62, 228, 103, 249, 190, 188, 118, 150, 189, 17, 111, 225, 190, 84, 213, 99, 191, 25, 193, 95, 190, 28, 125, 47, 190, 152, 168, 193, 190, 148, 72, 253, 62, 197, 220, 49, 191, 115, 195, 230, 62, 17, 244, 82, 62, 189, 13, 106, 62, 228, 202, 214, 190, 71, 215, 26, 191, 90, 238, 120, 61, 51, 199, 92, 63, 65, 213, 17, 191, 145, 183, 122, 190, 165, 73, 251, 60, 51, 121, 105, 62, 155, 234, 219, 190, 105, 38, 44, 63, 35, 167, 42, 191, 179, 22, 170, 62, 171, 188, 17, 63, 183, 101, 143, 62, 142, 117, 222, 189, 121, 210, 60, 191, 54, 66, 5, 190, 220, 55, 232, 190, 133, 188, 186, 191, 68, 206, 242, 190, 231, 162, 194, 62, 207, 217, 86, 63, 189, 119, 204, 61, 254, 242, 60, 63, 142, 180, 134, 190, 126, 177, 59, 191, 223, 2, 218, 62, 172, 170, 100, 191, 51, 29, 52, 62, 37, 213, 238, 62, 238, 219, 62, 191, 102, 21, 189, 62, 30, 19, 128, 190, 92, 223, 166, 63, 94, 46, 8, 63, 106, 124, 23, 191, 171, 112, 188, 190, 91, 187, 12, 189, 220, 215, 214, 190, 226, 109, 128, 63, 57, 72, 81, 62, 129, 222, 91, 190, 190, 70, 126, 190, 221, 53, 66, 191, 52, 18, 4, 189, 22, 210, 64, 63, 2, 92, 106, 190, 158, 93, 200, 190, 109, 51, 79, 191, 67, 156, 35, 191, 33, 244, 6, 191, 133, 191, 125, 191, 239, 160, 37, 190, 114, 254, 33, 191, 90, 200, 211, 61, 214, 254, 96, 190, 170, 100, 101, 190, 4, 152, 134, 63, 101, 236, 104, 62, 119, 60, 253, 190, 176, 144, 178, 189, 231, 11, 190, 62, 158, 63, 44, 63, 197, 31, 104, 62, 81, 115, 0, 62, 127, 217, 161, 62, 197, 138, 118, 191, 180, 172, 149, 190, 109, 96, 114, 190, 64, 21, 149, 190, 97, 46, 14, 191, 211, 97, 23, 191, 123, 127, 222, 62, 237, 91, 56, 62, 127, 237, 7, 63, 68, 89, 221, 190, 156, 19, 233, 62, 222, 81, 57, 62, 96, 154, 18, 191, 159, 249, 0, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {132, 214, 28, 191, 205, 199, 234, 62, 30, 45, 200, 190, 16, 114, 61, 62, 86, 5, 86, 63, 172, 99, 203, 62, 197, 156, 23, 190, 44, 67, 59, 62, 153, 192, 249, 190, 37, 54, 49, 191, 131, 82, 161, 62, 128, 128, 182, 190, 19, 49, 196, 62, 197, 96, 102, 190, 13, 220, 137, 62, 161, 121, 188, 62, 115, 205, 111, 189, 60, 202, 201, 62, 184, 186, 50, 63, 147, 195, 83, 190, 31, 1, 18, 190, 31, 206, 130, 190, 158, 247, 240, 62, 76, 64, 12, 191, 63, 126, 167, 189, 2, 206, 180, 190, 226, 182, 41, 189, 217, 196, 16, 63, 241, 250, 147, 62, 95, 194, 52, 63, 121, 78, 15, 63, 2, 80, 187, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 211, 77, 61, 148, 18, 111, 61, 56, 162, 222, 190, 190, 153, 140, 59, 108, 46, 109, 190, 151, 99, 158, 61, 205, 138, 132, 61, 192, 138, 7, 189, 128, 217, 188, 189, 200, 151, 245, 189, 104, 130, 218, 189, 222, 126, 31, 190, 117, 23, 248, 190, 214, 115, 143, 62, 8, 40, 164, 60, 55, 214, 61, 62, 68, 222, 187, 59, 213, 175, 29, 191, 249, 114, 37, 191, 181, 209, 229, 61, 95, 121, 65, 190, 89, 216, 2, 62, 155, 195, 50, 190, 51, 160, 1, 191, 202, 177, 0, 60, 75, 94, 59, 61, 162, 47, 142, 190, 248, 126, 235, 61, 41, 3, 43, 190, 41, 230, 69, 190, 149, 78, 242, 61, 191, 37, 59, 62, 105, 80, 168, 61, 255, 76, 170, 62, 223, 143, 251, 60, 47, 133, 58, 62, 56, 163, 48, 189, 23, 255, 213, 189, 119, 10, 99, 190, 219, 188, 243, 61, 234, 108, 133, 190, 95, 61, 110, 190, 60, 70, 83, 62, 56, 36, 198, 62, 184, 127, 141, 190, 231, 96, 18, 62, 161, 100, 163, 62, 152, 81, 147, 62, 109, 1, 75, 61, 19, 37, 177, 60, 191, 8, 10, 190, 43, 201, 25, 190, 203, 242, 39, 61, 185, 150, 100, 190, 26, 63, 60, 190, 66, 160, 43, 191, 156, 76, 34, 190, 30, 185, 55, 190, 206, 213, 0, 63, 51, 199, 198, 189, 125, 17, 131, 190, 40, 93, 83, 189, 26, 233, 70, 62, 251, 74, 56, 61, 245, 128, 179, 61, 58, 29, 218, 61, 145, 159, 104, 191, 240, 255, 70, 62, 193, 151, 119, 189, 11, 110, 59, 62, 36, 191, 249, 188, 73, 185, 6, 61, 15, 190, 200, 190, 39, 237, 87, 61, 154, 196, 12, 62, 29, 124, 17, 191, 109, 194, 52, 190, 168, 182, 33, 63, 167, 92, 64, 62, 95, 122, 16, 62, 14, 241, 66, 62, 253, 249, 255, 61, 201, 18, 211, 189, 63, 65, 10, 190, 142, 103, 59, 60, 187, 30, 134, 190, 115, 190, 214, 61, 238, 72, 141, 62, 9, 64, 146, 62, 29, 159, 27, 190, 175, 77, 18, 190, 192, 254, 144, 62, 113, 119, 44, 62, 121, 67, 77, 189, 145, 145, 135, 190, 194, 2, 13, 63, 139, 149, 249, 61, 129, 226, 207, 189, 74, 75, 166, 189, 184, 190, 25, 61, 134, 14, 39, 62, 198, 145, 112, 61, 195, 140, 34, 60, 60, 222, 197, 61, 203, 95, 7, 189, 48, 77, 6, 190, 74, 49, 65, 191, 113, 176, 180, 189, 89, 52, 204, 62, 143, 125, 72, 62, 3, 255, 64, 188, 125, 218, 108, 62, 160, 245, 4, 62, 20, 178, 38, 190, 241, 150, 194, 62, 126, 208, 36, 61, 255, 186, 128, 61, 155, 231, 190, 187, 103, 216, 110, 191, 141, 225, 209, 190, 95, 24, 133, 189, 90, 156, 17, 190, 82, 61, 95, 62, 68, 15, 62, 190, 240, 6, 174, 189, 16, 202, 206, 61, 88, 228, 174, 62, 250, 49, 97, 62, 127, 147, 23, 60, 17, 85, 29, 190, 164, 128, 170, 59, 228, 14, 193, 61, 169, 131, 55, 190, 167, 96, 220, 189, 182, 226, 229, 189, 42, 111, 15, 189, 172, 220, 158, 61, 88, 242, 234, 61, 233, 247, 143, 61, 53, 241, 190, 61, 7, 64, 79, 188, 0, 160, 190, 61, 3, 149, 9, 190, 34, 144, 133, 189, 175, 141, 45, 61, 54, 61, 19, 190, 150, 200, 30, 190, 125, 213, 102, 189, 12, 46, 125, 188, 229, 40, 182, 189, 217, 117, 180, 189, 235, 80, 3, 187, 208, 78, 247, 189, 133, 56, 184, 61, 7, 125, 9, 190, 70, 101, 255, 61, 173, 75, 25, 61, 72, 179, 22, 60, 61, 87, 135, 61, 119, 191, 216, 187, 233, 12, 164, 190, 49, 75, 68, 61, 242, 217, 129, 61, 242, 95, 209, 190, 39, 43, 103, 62, 81, 47, 104, 59, 158, 247, 10, 62, 208, 173, 63, 190, 196, 214, 77, 62, 69, 20, 180, 190, 190, 205, 212, 59, 223, 37, 32, 62, 107, 99, 145, 62, 198, 169, 209, 190, 65, 138, 227, 190, 106, 130, 209, 190, 135, 227, 95, 190, 154, 39, 120, 62, 72, 145, 20, 62, 146, 219, 147, 61, 63, 59, 23, 61, 204, 230, 131, 61, 253, 24, 140, 189, 180, 204, 78, 62, 178, 14, 33, 190, 18, 133, 0, 62, 94, 13, 235, 61, 106, 29, 125, 62, 167, 127, 141, 62, 42, 149, 68, 62, 12, 149, 13, 62, 122, 153, 226, 190, 117, 196, 95, 61, 239, 251, 191, 61, 125, 252, 205, 61, 226, 92, 24, 191, 130, 229, 10, 62, 73, 66, 127, 62, 241, 236, 8, 190, 22, 54, 107, 190, 146, 179, 33, 62, 37, 104, 185, 189, 216, 95, 122, 61, 139, 200, 63, 62, 163, 203, 156, 61, 167, 13, 178, 189, 29, 178, 22, 191, 70, 8, 192, 190, 226, 180, 160, 191, 248, 0, 107, 62, 19, 69, 77, 189, 20, 70, 82, 62, 119, 100, 59, 62, 214, 145, 109, 62, 134, 169, 54, 62, 169, 37, 177, 189, 119, 255, 115, 191, 192, 204, 179, 62, 97, 152, 132, 190, 176, 107, 22, 62, 203, 243, 202, 61, 91, 142, 48, 62, 181, 168, 54, 61, 199, 22, 159, 190, 88, 25, 233, 189, 198, 74, 60, 189, 224, 7, 145, 191, 254, 179, 174, 61, 43, 60, 217, 61, 208, 255, 129, 190, 82, 74, 72, 191, 201, 226, 15, 62, 163, 50, 228, 190, 59, 17, 140, 190, 223, 155, 132, 62, 26, 214, 37, 191, 231, 215, 243, 189, 62, 236, 11, 62, 151, 211, 37, 62, 128, 129, 13, 189, 124, 124, 67, 61, 237, 96, 62, 62, 66, 222, 57, 189, 202, 148, 183, 190, 243, 23, 125, 190, 252, 219, 249, 190, 187, 68, 213, 189, 58, 78, 70, 62, 182, 164, 112, 61, 164, 145, 41, 190, 22, 248, 122, 191, 33, 57, 46, 189, 26, 221, 203, 190, 135, 170, 154, 62, 245, 194, 105, 188, 159, 93, 50, 190, 129, 177, 158, 189, 100, 17, 37, 190, 226, 190, 148, 189, 96, 170, 212, 61, 234, 149, 142, 189, 241, 170, 97, 61, 173, 179, 205, 189, 123, 99, 212, 185, 108, 116, 22, 62, 48, 14, 174, 189, 233, 241, 164, 188, 66, 46, 255, 189, 41, 74, 98, 190, 73, 55, 22, 190, 238, 178, 17, 62, 81, 45, 212, 188, 160, 19, 172, 189, 245, 48, 137, 189, 222, 54, 50, 189, 44, 203, 125, 189, 58, 99, 121, 189, 144, 37, 183, 188, 6, 201, 127, 189, 200, 145, 39, 190, 66, 178, 218, 61, 63, 118, 24, 190, 149, 231, 127, 61, 181, 52, 41, 190, 159, 244, 86, 188, 234, 206, 42, 60, 204, 240, 170, 189, 231, 232, 217, 189, 14, 6, 133, 190, 76, 29, 141, 188, 141, 233, 113, 191, 187, 249, 15, 62, 134, 1, 160, 61, 245, 2, 18, 190, 66, 108, 237, 190, 217, 228, 15, 61, 133, 172, 215, 190, 2, 220, 153, 190, 104, 73, 64, 62, 221, 133, 29, 191, 241, 198, 153, 189, 119, 54, 69, 190, 80, 115, 29, 61, 4, 78, 64, 61, 37, 179, 131, 186, 89, 157, 1, 189, 208, 112, 70, 62, 12, 143, 87, 190, 107, 163, 10, 62, 190, 54, 16, 191, 144, 250, 140, 189, 132, 56, 136, 62, 216, 242, 6, 61, 249, 102, 120, 189, 208, 135, 42, 191, 22, 246, 133, 190, 227, 37, 154, 189, 156, 75, 164, 61, 197, 76, 121, 61, 130, 20, 81, 190, 182, 125, 195, 189, 35, 86, 14, 62, 96, 246, 211, 61, 36, 162, 189, 189, 78, 104, 97, 62, 42, 22, 2, 62, 236, 109, 19, 188, 83, 91, 6, 190, 20, 76, 250, 61, 201, 36, 210, 190, 200, 126, 171, 190, 179, 106, 101, 62, 18, 145, 175, 62, 42, 145, 225, 190, 165, 61, 192, 189, 237, 142, 0, 61, 54, 62, 39, 190, 221, 47, 31, 62, 219, 249, 61, 62, 44, 152, 182, 188, 151, 237, 158, 62, 250, 159, 58, 61, 225, 211, 20, 61, 180, 108, 204, 188, 246, 191, 129, 190, 225, 65, 151, 190, 157, 10, 38, 189, 218, 18, 116, 190, 47, 195, 50, 62, 30, 61, 68, 62, 143, 101, 202, 61, 128, 218, 190, 190, 176, 125, 18, 190, 240, 165, 68, 190, 169, 85, 135, 62, 70, 222, 225, 189, 161, 237, 213, 62, 206, 165, 47, 189, 151, 139, 125, 189, 195, 242, 138, 190, 187, 30, 4, 61, 234, 236, 41, 189, 73, 228, 102, 62, 120, 214, 47, 190, 105, 7, 12, 62, 9, 111, 20, 191, 11, 21, 93, 62, 71, 219, 132, 60, 73, 207, 129, 190, 211, 53, 116, 62, 152, 82, 93, 62, 177, 64, 56, 61, 94, 25, 167, 62, 106, 60, 27, 61, 84, 236, 49, 62, 115, 50, 87, 61, 201, 155, 239, 61, 3, 73, 45, 191, 212, 252, 150, 60, 110, 226, 142, 189, 249, 145, 87, 62, 154, 157, 95, 62, 66, 124, 127, 190, 4, 127, 216, 190, 219, 247, 46, 190, 27, 19, 18, 190, 189, 177, 0, 190, 211, 77, 29, 190, 50, 44, 0, 62, 158, 111, 239, 61, 187, 219, 126, 189, 60, 218, 81, 190, 204, 115, 38, 189, 176, 238, 150, 187, 108, 234, 22, 62, 89, 137, 64, 190, 89, 150, 137, 189, 100, 190, 49, 61, 61, 188, 0, 62, 38, 51, 193, 189, 162, 152, 164, 188, 166, 112, 14, 190, 7, 141, 166, 61, 100, 133, 237, 189, 186, 254, 29, 190, 225, 3, 62, 61, 197, 131, 197, 61, 122, 109, 21, 188, 115, 248, 138, 60, 250, 59, 42, 62, 21, 71, 26, 190, 4, 95, 153, 61, 251, 115, 225, 189, 250, 171, 70, 190, 205, 18, 164, 60, 253, 31, 230, 189, 100, 137, 164, 189, 54, 61, 105, 189, 41, 133, 210, 60, 155, 184, 6, 190, 203, 225, 135, 189, 183, 242, 103, 188, 11, 104, 158, 59, 67, 123, 141, 189, 34, 231, 152, 187, 108, 63, 130, 61, 55, 188, 187, 61, 12, 141, 3, 190, 200, 16, 217, 187, 31, 221, 12, 61, 14, 81, 107, 189, 27, 8, 96, 188, 22, 51, 194, 187, 253, 90, 195, 61, 30, 54, 48, 190, 14, 27, 217, 189, 151, 196, 6, 190, 56, 193, 2, 190, 42, 187, 164, 188, 97, 101, 236, 60, 170, 247, 156, 189, 113, 231, 40, 190, 197, 85, 204, 188, 76, 237, 190, 61, 116, 113, 201, 189, 10, 70, 130, 61, 88, 54, 75, 189, 59, 0, 32, 190, 191, 130, 71, 190, 133, 8, 108, 62, 23, 25, 47, 191, 117, 60, 224, 60, 215, 241, 46, 62, 26, 11, 245, 189, 93, 203, 32, 191, 155, 171, 130, 61, 60, 53, 50, 191, 171, 244, 167, 190, 179, 101, 251, 62, 249, 216, 130, 190, 38, 16, 130, 60, 107, 235, 13, 63, 154, 147, 89, 61, 197, 197, 110, 62, 194, 114, 40, 60, 170, 140, 119, 62, 175, 254, 193, 61, 99, 55, 52, 191, 249, 29, 49, 191, 199, 248, 15, 191, 235, 182, 80, 62, 114, 64, 218, 61, 120, 189, 182, 185, 164, 30, 44, 189, 82, 41, 86, 191, 122, 119, 168, 62, 163, 150, 181, 190, 77, 153, 11, 190, 107, 181, 157, 190, 15, 198, 49, 190, 209, 214, 127, 62, 189, 226, 133, 189, 79, 254, 23, 62, 243, 37, 100, 61, 192, 173, 218, 189, 125, 168, 63, 189, 169, 147, 94, 62, 176, 49, 46, 190, 214, 193, 161, 61, 242, 126, 80, 62, 79, 100, 55, 190, 48, 24, 120, 62, 72, 98, 9, 62, 116, 199, 4, 61, 227, 43, 113, 188, 200, 139, 202, 60, 85, 198, 53, 62, 213, 22, 165, 190, 177, 144, 59, 190, 128, 32, 61, 189, 188, 139, 55, 62, 198, 12, 128, 188, 145, 53, 187, 190, 75, 24, 36, 61, 168, 244, 28, 62, 211, 76, 237, 188, 114, 98, 73, 61, 180, 134, 198, 188, 10, 61, 56, 62, 66, 255, 212, 60, 208, 235, 54, 62, 188, 178, 31, 61, 109, 203, 196, 61, 176, 211, 29, 190, 108, 120, 164, 61, 193, 139, 242, 189, 113, 223, 60, 190, 30, 232, 16, 61, 121, 220, 84, 190, 10, 220, 38, 62, 238, 176, 7, 190, 48, 108, 160, 61, 191, 176, 210, 61, 223, 135, 163, 61, 73, 9, 7, 190, 219, 201, 155, 188, 199, 216, 160, 184, 232, 157, 146, 189, 16, 53, 24, 190, 117, 2, 245, 189, 88, 225, 27, 190, 104, 148, 27, 61, 3, 12, 167, 61, 98, 150, 214, 60, 124, 170, 180, 189, 54, 37, 226, 189, 132, 112, 172, 61, 245, 191, 2, 62, 212, 169, 194, 188, 239, 245, 118, 61, 133, 63, 92, 61, 49, 158, 3, 60, 106, 125, 234, 61, 59, 194, 81, 190, 194, 129, 216, 188, 23, 248, 12, 190, 212, 34, 31, 191, 156, 60, 7, 62, 125, 66, 79, 62, 56, 171, 44, 190, 57, 19, 202, 190, 39, 117, 247, 61, 238, 1, 179, 190, 39, 246, 120, 62, 108, 121, 213, 59, 55, 185, 32, 191, 70, 146, 20, 62, 189, 83, 100, 61, 197, 98, 128, 189, 152, 123, 57, 62, 82, 112, 37, 62, 86, 224, 244, 60, 184, 182, 31, 62, 76, 140, 129, 190, 209, 225, 144, 190, 215, 74, 2, 191, 230, 158, 6, 62, 16, 96, 139, 62, 178, 149, 125, 62, 49, 67, 24, 61, 209, 51, 181, 190, 193, 84, 14, 190, 246, 164, 111, 190, 113, 85, 107, 61, 98, 224, 37, 190, 112, 232, 207, 189, 97, 218, 203, 188, 30, 82, 23, 190, 28, 95, 115, 191, 164, 144, 68, 189, 22, 18, 132, 62, 250, 78, 95, 190, 215, 98, 78, 61, 150, 174, 39, 62, 44, 187, 10, 62, 200, 28, 144, 190, 135, 197, 214, 189, 82, 215, 108, 191, 93, 198, 134, 62, 29, 79, 106, 62, 65, 100, 132, 190, 6, 249, 23, 189, 184, 170, 15, 62, 239, 160, 135, 61, 111, 200, 64, 62, 164, 206, 130, 190, 50, 122, 163, 60, 109, 77, 23, 191, 248, 251, 229, 61, 226, 123, 207, 61, 127, 28, 94, 62, 113, 88, 185, 59, 87, 140, 91, 191, 131, 194, 198, 190, 15, 181, 157, 190, 75, 73, 148, 62, 101, 4, 37, 189, 170, 226, 193, 60, 228, 175, 14, 186, 132, 84, 234, 60, 171, 24, 37, 62, 200, 55, 67, 190, 189, 165, 29, 62, 135, 243, 119, 61, 224, 221, 6, 62, 104, 245, 6, 190, 10, 87, 66, 62, 75, 93, 76, 189, 134, 142, 223, 187, 112, 233, 168, 61, 108, 173, 122, 62, 199, 198, 213, 190, 188, 254, 168, 189, 171, 108, 4, 57, 48, 7, 204, 187, 194, 89, 40, 62, 21, 161, 99, 62, 128, 233, 73, 62, 152, 106, 106, 187, 115, 97, 142, 189, 137, 78, 146, 60, 76, 223, 143, 61, 211, 240, 65, 188, 29, 118, 0, 61, 109, 56, 252, 61, 186, 127, 213, 188, 1, 32, 157, 189, 217, 12, 109, 61, 149, 187, 143, 62, 66, 243, 232, 190, 189, 134, 7, 191, 133, 106, 79, 60, 123, 228, 152, 191, 242, 129, 61, 189, 123, 194, 202, 61, 80, 42, 155, 190, 41, 57, 7, 191, 140, 107, 171, 59, 28, 54, 59, 191, 176, 86, 11, 191, 96, 146, 69, 62, 52, 199, 26, 191, 114, 21, 104, 190, 155, 131, 51, 190, 96, 107, 209, 62, 238, 216, 31, 62, 99, 69, 203, 59, 37, 70, 179, 61, 45, 230, 20, 62, 209, 105, 198, 190, 173, 248, 4, 191, 19, 215, 80, 191, 138, 55, 138, 62, 85, 211, 76, 189, 172, 180, 100, 62, 213, 166, 148, 189, 47, 0, 104, 191, 64, 126, 72, 62, 68, 59, 175, 190, 43, 152, 176, 61, 172, 171, 66, 190, 161, 48, 179, 186, 171, 224, 195, 61, 5, 172, 19, 62, 209, 44, 222, 61, 143, 45, 65, 62, 76, 57, 40, 190, 134, 140, 14, 190, 98, 104, 29, 188, 62, 187, 231, 61, 202, 211, 173, 61, 249, 81, 39, 189, 39, 201, 211, 190, 71, 233, 255, 61, 231, 233, 186, 61, 86, 57, 214, 62, 174, 42, 237, 61, 167, 114, 150, 189, 1, 97, 48, 60, 252, 134, 212, 190, 232, 28, 245, 189, 62, 167, 190, 188, 177, 215, 166, 189, 99, 44, 70, 61, 246, 11, 206, 190, 125, 163, 42, 191, 251, 89, 210, 61, 70, 153, 228, 61, 159, 216, 174, 61, 189, 126, 10, 190, 120, 233, 243, 189, 216, 239, 180, 189, 93, 5, 37, 62, 107, 160, 57, 62, 222, 63, 230, 189, 73, 54, 193, 189, 85, 174, 18, 188, 156, 183, 140, 190, 233, 39, 149, 60, 232, 28, 36, 62, 159, 186, 22, 189, 228, 24, 207, 59, 117, 101, 16, 62, 187, 2, 213, 188, 61, 228, 154, 190, 18, 30, 152, 189, 234, 81, 171, 62, 222, 81, 224, 190, 200, 96, 151, 190, 23, 142, 248, 189, 38, 84, 183, 190, 187, 21, 67, 61, 203, 252, 135, 61, 225, 49, 44, 62, 142, 60, 228, 62, 67, 190, 108, 62, 107, 60, 135, 190, 102, 26, 95, 62, 7, 5, 85, 190, 140, 59, 158, 189, 231, 90, 35, 62, 111, 72, 207, 189, 35, 115, 143, 61, 92, 74, 126, 62, 63, 181, 17, 62, 201, 33, 32, 191, 32, 104, 52, 190, 91, 11, 247, 188, 28, 161, 163, 189, 156, 107, 204, 190, 23, 5, 211, 61, 131, 198, 255, 61, 185, 21, 0, 187, 104, 170, 183, 187, 245, 133, 13, 62, 115, 150, 148, 190, 8, 12, 215, 189, 229, 229, 51, 60, 12, 159, 184, 62, 145, 223, 239, 190, 119, 94, 162, 190, 77, 191, 228, 190, 115, 182, 174, 190, 241, 1, 159, 62, 36, 101, 50, 62, 95, 110, 213, 61, 201, 231, 49, 61, 66, 130, 113, 62, 16, 118, 252, 187, 64, 158, 89, 60, 222, 143, 156, 190, 224, 62, 67, 187, 156, 237, 9, 62, 211, 106, 141, 60, 169, 191, 1, 62, 185, 207, 202, 62, 61, 22, 198, 61, 34, 204, 26, 191, 196, 248, 211, 188, 55, 68, 245, 61, 46, 229, 239, 190, 13, 15, 157, 188, 242, 150, 198, 189, 252, 95, 215, 62, 199, 94, 5, 62, 75, 200, 34, 190, 179, 51, 9, 190, 187, 125, 10, 189, 125, 107, 64, 62, 1, 128, 77, 191, 69, 120, 159, 62, 183, 95, 26, 62, 83, 14, 100, 62, 162, 70, 100, 62, 210, 115, 121, 190, 193, 16, 133, 190, 224, 172, 129, 190, 255, 3, 95, 61, 184, 75, 135, 62, 124, 96, 10, 190, 212, 26, 138, 61, 49, 180, 196, 61, 212, 205, 119, 189, 62, 27, 60, 61, 50, 155, 164, 189, 23, 173, 137, 62, 121, 244, 235, 61, 158, 95, 58, 189, 252, 104, 122, 62, 22, 174, 62, 61, 143, 190, 124, 190, 142, 216, 179, 187, 135, 126, 104, 190, 205, 20, 222, 61, 161, 134, 91, 190, 85, 248, 232, 189, 89, 149, 103, 61, 249, 3, 204, 60, 0, 42, 145, 189, 203, 150, 89, 190, 192, 174, 92, 62, 127, 44, 203, 189, 94, 8, 71, 189, 97, 27, 175, 62, 29, 251, 109, 62, 4, 226, 172, 61, 226, 212, 226, 61, 136, 162, 201, 188, 95, 48, 162, 61, 196, 206, 176, 61, 146, 117, 158, 190, 240, 123, 195, 61, 187, 71, 66, 62, 110, 239, 138, 188, 108, 243, 8, 61, 101, 186, 158, 61, 69, 42, 241, 189, 222, 245, 89, 62, 230, 135, 19, 189, 106, 31, 156, 187, 246, 228, 175, 188, 129, 103, 211, 60, 111, 172, 72, 190, 186, 241, 100, 188, 134, 145, 225, 190, 36, 85, 115, 187, 214, 20, 120, 62, 231, 26, 216, 190, 184, 69, 71, 190, 120, 163, 244, 188, 80, 85, 123, 190, 180, 231, 243, 190, 86, 89, 9, 188, 98, 247, 237, 190, 5, 184, 135, 61, 204, 166, 240, 189, 156, 227, 200, 189, 172, 217, 95, 190, 33, 252, 176, 189, 60, 13, 208, 61, 170, 182, 149, 60, 115, 46, 169, 190, 110, 35, 38, 62, 103, 252, 224, 190, 146, 62, 222, 61, 27, 199, 191, 190, 153, 244, 160, 61, 112, 183, 141, 60, 191, 190, 227, 189, 46, 138, 185, 190, 41, 0, 108, 189, 44, 224, 154, 189, 11, 242, 169, 190, 121, 89, 111, 190, 253, 117, 155, 62, 155, 124, 176, 189, 167, 64, 176, 189, 27, 202, 250, 61, 140, 117, 175, 188, 229, 64, 162, 189, 116, 44, 83, 61, 167, 174, 73, 189, 252, 210, 30, 190, 221, 95, 229, 61, 232, 164, 132, 190, 8, 103, 196, 59, 196, 210, 28, 61, 199, 58, 186, 61, 205, 236, 20, 62, 51, 93, 155, 61, 196, 126, 59, 189, 105, 4, 43, 190, 160, 154, 40, 60, 136, 154, 5, 189, 147, 177, 128, 189, 215, 37, 109, 61, 42, 160, 186, 189, 178, 65, 3, 62, 131, 181, 173, 60, 23, 70, 47, 61, 84, 103, 145, 62, 150, 53, 117, 189, 1, 164, 248, 61, 224, 15, 78, 190, 47, 136, 102, 189, 140, 220, 55, 61, 39, 186, 128, 190, 91, 209, 96, 62, 24, 90, 20, 190, 120, 161, 197, 189, 133, 3, 85, 191, 201, 0, 5, 62, 213, 211, 197, 61, 126, 153, 15, 62, 115, 226, 167, 189, 200, 154, 250, 190, 255, 131, 241, 61, 208, 35, 215, 189, 92, 3, 30, 190, 183, 76, 162, 62, 250, 17, 7, 62, 22, 237, 150, 62, 254, 237, 158, 189, 216, 113, 42, 189, 173, 197, 0, 191, 165, 200, 91, 61, 213, 6, 107, 190, 14, 31, 216, 189, 232, 128, 75, 188, 226, 236, 27, 61, 130, 80, 104, 190, 134, 225, 249, 61, 82, 9, 175, 61, 246, 21, 190, 62, 171, 8, 49, 189, 19, 63, 140, 191, 3, 121, 71, 62, 5, 162, 77, 62, 77, 211, 32, 190, 187, 107, 129, 62, 2, 174, 143, 189, 40, 155, 107, 189, 188, 52, 45, 62, 51, 147, 11, 189, 125, 198, 243, 61, 12, 135, 41, 61, 120, 168, 188, 61, 33, 117, 193, 190, 181, 190, 190, 61, 222, 165, 41, 62, 87, 47, 204, 62, 249, 80, 5, 191, 37, 160, 57, 61, 101, 239, 93, 190, 145, 192, 36, 190, 82, 202, 56, 61, 81, 103, 17, 62, 16, 249, 135, 61, 30, 158, 155, 62, 221, 96, 243, 187, 233, 15, 9, 62, 99, 95, 153, 61, 62, 0, 149, 190, 17, 118, 237, 190, 189, 80, 182, 61, 249, 245, 153, 189, 220, 83, 208, 59, 133, 243, 130, 62, 199, 152, 28, 61, 48, 216, 90, 190, 178, 50, 114, 61, 38, 198, 142, 61, 197, 51, 12, 191, 201, 81, 68, 190, 48, 47, 39, 191, 196, 118, 132, 62, 26, 13, 241, 61, 131, 69, 175, 61, 184, 29, 0, 59, 168, 82, 92, 62, 159, 213, 72, 190, 238, 218, 240, 190, 5, 15, 213, 189, 50, 26, 24, 62, 9, 141, 243, 188, 247, 227, 29, 62, 253, 226, 79, 190, 212, 118, 12, 191, 60, 112, 132, 190, 15, 159, 20, 190, 125, 107, 165, 62, 171, 3, 62, 190, 216, 223, 125, 190, 46, 66, 138, 62, 173, 195, 196, 189, 74, 118, 238, 189, 52, 169, 99, 190, 226, 134, 194, 62, 34, 28, 204, 61, 20, 237, 206, 190, 202, 224, 39, 62, 58, 191, 136, 189, 206, 183, 47, 189, 136, 146, 217, 189, 31, 215, 145, 62, 206, 243, 30, 190, 135, 30, 60, 190, 26, 177, 31, 188, 30, 151, 107, 62, 172, 157, 45, 190, 44, 35, 81, 62, 186, 166, 113, 187, 187, 166, 154, 190, 119, 222, 222, 188, 54, 117, 48, 62, 95, 98, 19, 62, 110, 94, 88, 189, 166, 206, 199, 190, 222, 68, 27, 190, 229, 47, 16, 186, 188, 154, 161, 61, 39, 113, 173, 60, 36, 178, 68, 62, 118, 148, 159, 61, 100, 68, 175, 61, 235, 60, 3, 62, 255, 83, 50, 62, 51, 236, 50, 190, 15, 173, 66, 62, 150, 221, 8, 190, 73, 254, 26, 188, 58, 113, 30, 189, 107, 43, 52, 189, 225, 61, 20, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 79, 90, 188, 177, 71, 206, 61, 102, 20, 160, 188, 224, 85, 233, 61, 81, 193, 31, 189, 169, 95, 125, 61, 116, 83, 85, 188, 6, 106, 197, 61, 13, 255, 41, 61, 232, 212, 204, 61, 46, 171, 158, 62, 108, 18, 9, 62, 45, 225, 48, 190, 160, 70, 197, 60, 167, 152, 105, 62, 217, 166, 41, 190, 242, 112, 169, 189, 156, 156, 132, 189, 51, 170, 12, 190, 222, 128, 186, 62, 206, 149, 45, 62, 238, 81, 153, 189, 229, 100, 94, 61, 170, 59, 65, 62, 250, 47, 10, 60, 171, 107, 232, 61, 193, 151, 30, 187, 240, 79, 88, 190, 253, 191, 35, 62, 161, 187, 198, 62, 46, 39, 240, 189, 73, 29, 144, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 227, 51, 191, 120, 78, 193, 190, 244, 46, 183, 62, 71, 185, 238, 190, 60, 109, 182, 189, 98, 188, 152, 190, 91, 192, 208, 190, 146, 108, 189, 62, 214, 100, 117, 61, 173, 231, 34, 62, 110, 190, 240, 190, 132, 117, 70, 63, 107, 183, 40, 188, 84, 150, 37, 62, 176, 19, 66, 63, 40, 212, 16, 189, 218, 254, 16, 190, 171, 72, 130, 62, 127, 199, 202, 62, 85, 195, 53, 190, 60, 35, 68, 63, 223, 101, 142, 190, 196, 229, 205, 190, 187, 94, 31, 191, 241, 177, 161, 62, 230, 222, 187, 61, 188, 114, 17, 190, 18, 252, 142, 189, 106, 177, 28, 63, 115, 5, 167, 190, 209, 172, 222, 62, 111, 238, 138, 62, 169, 53, 211, 62, 253, 223, 187, 189, 28, 254, 235, 61, 136, 78, 15, 190, 133, 247, 253, 189, 241, 138, 41, 189, 185, 79, 35, 61, 96, 250, 185, 189, 142, 52, 21, 62, 129, 213, 54, 190, 252, 194, 8, 189, 152, 0, 142, 62, 223, 158, 150, 189, 32, 15, 212, 189, 180, 111, 240, 61, 57, 81, 105, 62, 19, 153, 213, 189, 213, 136, 43, 62, 93, 140, 201, 188, 164, 188, 51, 190, 144, 145, 54, 62, 147, 174, 163, 60, 73, 65, 196, 61, 61, 42, 4, 190, 250, 29, 187, 190, 191, 79, 149, 189, 150, 164, 125, 190, 253, 225, 11, 62, 22, 213, 242, 189, 28, 148, 248, 189, 198, 107, 6, 62, 175, 200, 139, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 96, 4, 189, 150, 1, 189, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {52, 207, 239, 62, 128, 254, 11, 64, 41, 40, 218, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {248, 235, 4, 192, 192, 112, 136, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0042/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}