// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 217, 27, 62, 165, 132, 209, 189, 189, 246, 169, 62, 226, 222, 56, 189, 28, 206, 62, 191, 197, 228, 77, 190, 86, 227, 227, 190, 1, 24, 67, 62, 227, 32, 3, 190, 93, 46, 109, 189, 241, 252, 254, 190, 39, 118, 228, 62, 37, 226, 180, 190, 140, 156, 147, 62, 118, 32, 100, 62, 50, 104, 57, 187, 158, 16, 17, 190, 176, 245, 11, 191, 225, 230, 186, 189, 220, 40, 42, 63, 85, 166, 9, 191, 133, 67, 163, 190, 107, 54, 247, 190, 225, 90, 134, 62, 212, 188, 20, 191, 6, 152, 61, 63, 70, 45, 3, 191, 175, 4, 182, 61, 145, 245, 250, 61, 176, 47, 86, 62, 124, 247, 170, 190, 82, 129, 47, 191, 124, 74, 135, 189, 166, 124, 32, 191, 124, 240, 160, 190, 198, 244, 231, 190, 97, 116, 57, 62, 0, 126, 94, 63, 146, 31, 51, 61, 147, 92, 227, 62, 108, 204, 9, 190, 105, 81, 35, 191, 101, 62, 46, 62, 219, 125, 70, 191, 129, 119, 87, 62, 210, 38, 62, 62, 84, 69, 99, 191, 177, 59, 140, 62, 93, 52, 242, 189, 236, 134, 99, 61, 124, 114, 247, 62, 65, 224, 245, 190, 49, 243, 206, 189, 244, 251, 57, 189, 55, 227, 146, 190, 183, 94, 34, 63, 5, 168, 154, 62, 49, 43, 191, 190, 16, 33, 213, 62, 64, 8, 13, 191, 196, 114, 159, 189, 51, 188, 44, 63, 169, 40, 200, 189, 177, 226, 11, 191, 0, 12, 91, 62, 111, 212, 240, 190, 232, 218, 209, 190, 19, 236, 58, 191, 38, 236, 85, 190, 128, 203, 37, 191, 97, 251, 160, 61, 234, 250, 36, 190, 96, 189, 22, 190, 131, 145, 174, 62, 88, 88, 160, 62, 145, 43, 123, 190, 30, 88, 230, 189, 99, 38, 49, 62, 105, 241, 244, 60, 21, 144, 192, 62, 13, 139, 43, 190, 120, 81, 244, 189, 253, 239, 64, 191, 57, 33, 166, 190, 116, 212, 28, 190, 253, 55, 197, 62, 86, 112, 217, 190, 140, 203, 206, 190, 230, 69, 48, 63, 211, 52, 190, 61, 168, 244, 44, 63, 106, 251, 178, 190, 112, 130, 219, 62, 56, 43, 248, 61, 21, 178, 130, 190, 227, 170, 226, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {196, 43, 6, 191, 171, 149, 219, 62, 177, 39, 177, 190, 191, 109, 102, 62, 164, 249, 18, 63, 219, 176, 10, 63, 58, 79, 53, 62, 214, 130, 186, 62, 91, 38, 62, 190, 51, 2, 219, 190, 30, 206, 120, 62, 201, 85, 255, 190, 129, 167, 245, 62, 32, 33, 142, 190, 212, 168, 207, 62, 232, 48, 220, 62, 239, 11, 15, 190, 198, 1, 166, 62, 255, 16, 25, 63, 78, 8, 190, 187, 133, 158, 15, 62, 76, 210, 46, 190, 90, 88, 38, 63, 118, 199, 190, 190, 150, 252, 5, 62, 54, 83, 25, 191, 128, 108, 33, 62, 61, 93, 30, 63, 146, 126, 174, 62, 42, 200, 1, 63, 18, 99, 168, 62, 165, 199, 177, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 78, 95, 61, 153, 47, 11, 190, 10, 68, 41, 190, 101, 44, 78, 188, 101, 88, 146, 189, 194, 201, 122, 60, 128, 19, 60, 61, 56, 2, 129, 187, 62, 154, 138, 189, 184, 185, 181, 189, 210, 245, 79, 189, 29, 174, 82, 189, 235, 66, 26, 190, 102, 151, 13, 62, 220, 130, 59, 189, 55, 195, 157, 189, 51, 236, 222, 60, 48, 197, 19, 190, 40, 151, 151, 189, 63, 11, 217, 61, 172, 239, 51, 190, 248, 125, 23, 62, 141, 238, 145, 189, 92, 41, 0, 189, 51, 178, 1, 61, 2, 230, 164, 61, 169, 109, 35, 190, 75, 4, 239, 188, 51, 2, 67, 190, 43, 196, 159, 61, 255, 42, 58, 60, 185, 164, 88, 61, 58, 180, 54, 62, 61, 213, 26, 62, 227, 175, 213, 189, 238, 11, 18, 62, 136, 102, 50, 189, 88, 240, 39, 189, 210, 12, 183, 61, 107, 211, 147, 61, 99, 150, 184, 60, 229, 103, 229, 189, 212, 34, 69, 62, 207, 202, 82, 62, 24, 86, 106, 190, 132, 246, 189, 61, 237, 113, 81, 62, 57, 63, 56, 62, 19, 31, 180, 61, 98, 33, 118, 186, 158, 115, 39, 190, 194, 202, 38, 189, 255, 34, 149, 187, 27, 198, 50, 190, 14, 14, 39, 190, 113, 215, 75, 190, 0, 105, 187, 189, 225, 254, 239, 189, 49, 251, 226, 61, 7, 82, 247, 189, 221, 174, 164, 189, 241, 232, 217, 60, 179, 186, 53, 62, 143, 14, 208, 189, 63, 129, 36, 61, 219, 108, 94, 62, 62, 110, 134, 190, 224, 50, 72, 62, 216, 91, 125, 58, 216, 166, 208, 60, 244, 154, 38, 190, 26, 55, 66, 61, 172, 43, 168, 190, 168, 135, 84, 189, 49, 202, 208, 61, 23, 171, 6, 190, 25, 182, 168, 190, 236, 52, 29, 62, 227, 167, 116, 62, 178, 168, 84, 62, 159, 245, 189, 61, 244, 227, 19, 62, 48, 173, 126, 189, 219, 162, 24, 190, 230, 198, 18, 190, 46, 159, 215, 189, 60, 101, 50, 61, 177, 84, 120, 61, 200, 221, 0, 62, 51, 45, 57, 190, 166, 15, 111, 189, 68, 33, 96, 62, 51, 123, 248, 60, 132, 75, 247, 188, 127, 157, 92, 190, 188, 70, 110, 62, 113, 1, 26, 62, 233, 1, 205, 189, 174, 160, 27, 190, 213, 229, 215, 188, 251, 54, 148, 59, 51, 92, 213, 61, 36, 64, 184, 189, 181, 254, 146, 60, 76, 225, 35, 190, 14, 43, 207, 187, 106, 237, 54, 190, 182, 204, 85, 190, 18, 224, 148, 62, 18, 121, 137, 61, 32, 223, 252, 189, 162, 77, 222, 61, 73, 227, 4, 62, 46, 50, 68, 190, 1, 248, 97, 62, 237, 184, 134, 188, 4, 253, 152, 189, 135, 79, 137, 189, 43, 103, 207, 190, 155, 74, 200, 190, 255, 42, 18, 189, 157, 194, 71, 189, 45, 182, 136, 188, 191, 138, 46, 61, 164, 185, 215, 189, 133, 85, 127, 189, 28, 180, 71, 62, 243, 51, 137, 61, 218, 42, 23, 61, 62, 254, 26, 190, 164, 128, 170, 59, 23, 204, 242, 61, 249, 198, 40, 190, 167, 96, 220, 189, 182, 226, 229, 189, 212, 162, 84, 188, 172, 220, 158, 61, 6, 188, 13, 62, 0, 101, 169, 61, 53, 241, 190, 61, 228, 125, 248, 187, 0, 160, 190, 61, 122, 65, 217, 189, 146, 253, 25, 189, 223, 49, 130, 61, 38, 97, 13, 190, 83, 37, 19, 190, 125, 213, 102, 189, 25, 249, 124, 188, 229, 40, 182, 189, 166, 205, 166, 189, 235, 80, 3, 187, 92, 147, 210, 189, 202, 243, 236, 61, 30, 125, 9, 190, 86, 98, 255, 61, 173, 75, 25, 61, 14, 16, 172, 60, 236, 18, 190, 61, 119, 191, 216, 187, 188, 197, 45, 190, 208, 45, 168, 189, 4, 50, 21, 61, 113, 206, 29, 190, 160, 136, 28, 62, 96, 56, 127, 189, 202, 6, 254, 61, 168, 206, 169, 189, 43, 29, 55, 62, 230, 157, 178, 189, 246, 248, 175, 189, 185, 254, 187, 58, 57, 152, 173, 62, 24, 63, 157, 190, 146, 150, 130, 190, 36, 115, 139, 190, 253, 173, 120, 61, 158, 231, 6, 62, 124, 176, 16, 62, 64, 196, 106, 60, 37, 152, 95, 61, 2, 224, 183, 188, 235, 250, 29, 190, 23, 41, 63, 62, 148, 112, 232, 61, 53, 217, 36, 62, 106, 118, 110, 62, 174, 14, 19, 62, 238, 96, 108, 62, 237, 200, 46, 62, 108, 71, 24, 62, 51, 215, 176, 190, 187, 145, 146, 59, 84, 172, 225, 189, 160, 117, 172, 61, 85, 23, 145, 190, 116, 227, 42, 62, 56, 217, 251, 61, 37, 124, 85, 190, 240, 180, 81, 189, 24, 241, 219, 61, 131, 255, 175, 189, 251, 35, 106, 189, 191, 130, 179, 61, 148, 42, 131, 62, 179, 101, 235, 189, 139, 24, 195, 190, 73, 225, 192, 190, 35, 116, 25, 190, 193, 222, 129, 62, 64, 244, 180, 61, 56, 101, 252, 61, 30, 49, 5, 62, 191, 125, 19, 62, 189, 111, 205, 61, 230, 126, 222, 59, 175, 230, 81, 189, 221, 125, 147, 189, 109, 61, 48, 190, 208, 145, 62, 189, 137, 131, 172, 59, 152, 237, 128, 62, 109, 246, 191, 61, 90, 186, 158, 190, 80, 36, 161, 189, 32, 4, 37, 61, 86, 233, 61, 189, 128, 134, 251, 61, 232, 161, 158, 61, 101, 57, 167, 189, 221, 211, 135, 190, 223, 138, 48, 62, 12, 3, 129, 190, 188, 0, 29, 190, 186, 36, 116, 62, 78, 246, 105, 61, 232, 62, 103, 190, 60, 66, 112, 59, 104, 44, 86, 62, 180, 234, 205, 60, 30, 218, 7, 61, 142, 148, 97, 62, 253, 110, 199, 189, 147, 193, 101, 190, 77, 108, 226, 189, 230, 88, 84, 61, 33, 16, 202, 189, 196, 236, 69, 189, 241, 22, 41, 60, 219, 107, 248, 189, 95, 24, 148, 190, 19, 253, 151, 188, 16, 130, 127, 190, 47, 84, 91, 62, 219, 145, 37, 61, 40, 40, 136, 190, 120, 138, 139, 189, 98, 65, 35, 190, 226, 190, 148, 189, 102, 20, 233, 61, 247, 174, 110, 189, 66, 134, 101, 61, 173, 179, 205, 189, 237, 71, 10, 60, 108, 116, 22, 62, 110, 69, 117, 189, 253, 85, 41, 189, 66, 46, 255, 189, 136, 231, 57, 190, 73, 55, 22, 190, 181, 107, 22, 62, 145, 229, 165, 188, 231, 58, 145, 189, 207, 219, 134, 189, 30, 39, 1, 189, 44, 203, 125, 189, 107, 67, 117, 189, 144, 37, 183, 188, 254, 94, 168, 189, 247, 131, 39, 190, 147, 214, 245, 61, 225, 165, 20, 190, 0, 137, 127, 61, 97, 228, 27, 190, 159, 244, 86, 188, 76, 17, 241, 60, 14, 146, 143, 189, 231, 232, 217, 189, 42, 180, 59, 190, 73, 111, 241, 61, 96, 180, 174, 61, 129, 16, 88, 62, 48, 126, 55, 61, 4, 153, 203, 189, 14, 89, 38, 190, 112, 59, 177, 61, 216, 56, 166, 190, 179, 73, 63, 190, 152, 194, 98, 62, 153, 115, 172, 61, 221, 131, 228, 189, 133, 195, 147, 190, 154, 195, 27, 62, 3, 142, 33, 62, 139, 216, 249, 185, 253, 26, 93, 187, 107, 26, 255, 61, 25, 240, 30, 190, 207, 33, 81, 61, 135, 142, 23, 190, 150, 202, 61, 189, 138, 198, 42, 61, 153, 71, 221, 188, 13, 132, 38, 60, 221, 236, 173, 59, 186, 139, 23, 190, 6, 57, 188, 189, 248, 244, 145, 188, 86, 80, 32, 62, 31, 185, 87, 190, 192, 207, 163, 189, 169, 48, 196, 61, 208, 196, 215, 61, 123, 113, 17, 189, 124, 58, 170, 61, 124, 30, 23, 62, 196, 83, 108, 186, 200, 102, 219, 189, 199, 232, 245, 61, 43, 224, 13, 190, 252, 251, 149, 190, 164, 201, 16, 62, 57, 103, 117, 62, 53, 166, 149, 190, 111, 122, 172, 189, 33, 118, 90, 187, 128, 192, 196, 60, 239, 117, 64, 61, 172, 104, 115, 61, 173, 20, 77, 189, 112, 203, 165, 62, 148, 64, 208, 186, 38, 103, 50, 61, 71, 111, 100, 189, 26, 253, 230, 187, 27, 92, 148, 189, 155, 156, 212, 189, 85, 18, 60, 190, 236, 92, 42, 62, 188, 106, 220, 61, 97, 105, 199, 189, 232, 129, 122, 190, 161, 193, 18, 62, 171, 44, 197, 189, 31, 201, 171, 59, 67, 59, 209, 60, 155, 27, 44, 62, 240, 217, 101, 60, 139, 232, 196, 189, 101, 38, 40, 190, 144, 69, 128, 60, 20, 122, 45, 62, 159, 217, 147, 60, 148, 161, 50, 190, 97, 191, 233, 189, 208, 52, 5, 190, 122, 190, 39, 62, 223, 82, 250, 61, 29, 214, 27, 190, 166, 210, 135, 188, 38, 184, 45, 188, 214, 0, 243, 61, 70, 27, 7, 62, 154, 38, 154, 61, 8, 127, 173, 189, 31, 92, 174, 61, 235, 141, 216, 60, 15, 183, 33, 190, 110, 57, 34, 189, 153, 33, 171, 189, 50, 99, 59, 62, 94, 15, 30, 189, 92, 240, 224, 189, 39, 12, 209, 61, 131, 58, 46, 190, 244, 177, 19, 190, 61, 218, 253, 189, 193, 180, 246, 189, 3, 128, 32, 62, 151, 41, 223, 61, 163, 85, 63, 189, 111, 45, 56, 190, 162, 243, 4, 189, 176, 238, 150, 187, 11, 70, 32, 62, 67, 207, 45, 190, 250, 180, 124, 189, 189, 21, 57, 61, 237, 175, 1, 62, 173, 142, 190, 189, 239, 223, 112, 59, 92, 209, 233, 189, 56, 204, 240, 61, 64, 46, 198, 189, 151, 168, 27, 190, 17, 7, 132, 61, 166, 166, 201, 61, 10, 7, 80, 187, 218, 75, 4, 61, 184, 110, 42, 62, 47, 209, 20, 190, 249, 195, 149, 61, 229, 202, 209, 189, 126, 250, 40, 190, 96, 66, 131, 60, 130, 68, 220, 189, 100, 137, 164, 189, 54, 61, 105, 189, 41, 133, 210, 60, 155, 184, 6, 190, 203, 225, 135, 189, 183, 242, 103, 188, 11, 104, 158, 59, 67, 123, 141, 189, 34, 231, 152, 187, 108, 63, 130, 61, 55, 188, 187, 61, 12, 141, 3, 190, 200, 16, 217, 187, 31, 221, 12, 61, 14, 81, 107, 189, 27, 8, 96, 188, 22, 51, 194, 187, 253, 90, 195, 61, 30, 54, 48, 190, 14, 27, 217, 189, 151, 196, 6, 190, 56, 193, 2, 190, 42, 187, 164, 188, 97, 101, 236, 60, 170, 247, 156, 189, 113, 231, 40, 190, 197, 85, 204, 188, 76, 237, 190, 61, 116, 113, 201, 189, 10, 70, 130, 61, 88, 54, 75, 189, 59, 0, 32, 190, 26, 228, 102, 189, 50, 86, 78, 62, 5, 179, 88, 188, 200, 238, 25, 61, 134, 30, 5, 62, 12, 127, 155, 189, 81, 142, 128, 190, 117, 250, 151, 61, 2, 85, 2, 191, 19, 213, 108, 188, 122, 198, 192, 62, 247, 130, 239, 61, 82, 80, 222, 189, 14, 33, 110, 62, 132, 144, 83, 61, 88, 25, 119, 62, 193, 118, 141, 188, 188, 244, 76, 62, 27, 192, 156, 61, 244, 89, 170, 190, 217, 17, 220, 190, 224, 131, 61, 190, 60, 151, 14, 62, 21, 245, 50, 61, 120, 54, 200, 189, 100, 33, 57, 189, 162, 170, 179, 190, 38, 153, 137, 62, 173, 243, 66, 190, 163, 158, 91, 190, 242, 75, 144, 190, 115, 22, 136, 61, 185, 37, 120, 61, 91, 248, 146, 189, 228, 103, 36, 189, 164, 202, 136, 188, 76, 205, 17, 189, 68, 35, 79, 190, 171, 28, 140, 61, 231, 177, 28, 190, 126, 103, 84, 189, 147, 53, 59, 188, 131, 129, 2, 190, 92, 89, 223, 60, 196, 56, 170, 60, 245, 143, 142, 189, 30, 165, 87, 189, 204, 190, 82, 189, 51, 80, 33, 62, 248, 122, 164, 188, 221, 185, 1, 190, 234, 62, 86, 190, 231, 155, 133, 61, 117, 176, 57, 190, 185, 229, 117, 190, 15, 245, 57, 61, 34, 69, 6, 62, 114, 59, 128, 61, 183, 37, 65, 190, 200, 240, 98, 60, 151, 47, 161, 60, 142, 196, 181, 61, 110, 65, 168, 61, 241, 152, 252, 189, 40, 155, 11, 62, 35, 216, 25, 190, 241, 26, 180, 61, 31, 167, 177, 189, 176, 244, 46, 190, 220, 102, 45, 61, 39, 211, 64, 190, 156, 77, 58, 62, 76, 115, 238, 189, 134, 147, 199, 61, 215, 61, 230, 61, 233, 120, 175, 61, 112, 44, 6, 190, 30, 2, 103, 187, 152, 121, 216, 60, 125, 238, 43, 189, 22, 227, 254, 189, 254, 168, 242, 189, 35, 163, 12, 190, 42, 4, 72, 61, 122, 13, 184, 61, 216, 163, 15, 61, 5, 143, 173, 189, 67, 212, 199, 189, 116, 129, 209, 61, 101, 1, 23, 62, 161, 221, 193, 188, 162, 133, 134, 61, 38, 52, 128, 61, 11, 250, 150, 60, 139, 219, 18, 62, 208, 228, 69, 190, 236, 171, 16, 190, 48, 97, 46, 62, 44, 48, 201, 61, 223, 253, 218, 61, 73, 202, 238, 61, 161, 67, 117, 61, 138, 245, 147, 190, 174, 71, 241, 61, 41, 86, 114, 190, 137, 96, 93, 61, 62, 73, 40, 188, 48, 111, 26, 60, 93, 18, 18, 190, 75, 219, 154, 186, 23, 16, 16, 188, 246, 185, 102, 62, 176, 228, 177, 59, 15, 96, 137, 61, 232, 26, 166, 58, 113, 100, 33, 190, 161, 193, 93, 190, 45, 88, 203, 189, 189, 50, 24, 62, 250, 198, 237, 187, 141, 47, 9, 61, 90, 62, 217, 60, 14, 163, 19, 190, 203, 19, 207, 61, 190, 198, 138, 188, 204, 255, 162, 189, 101, 12, 21, 190, 239, 82, 18, 190, 61, 230, 24, 60, 40, 167, 26, 62, 177, 196, 198, 60, 223, 74, 204, 60, 50, 111, 42, 62, 83, 68, 14, 189, 44, 7, 16, 190, 70, 118, 97, 62, 102, 174, 184, 189, 235, 81, 141, 190, 26, 78, 30, 189, 233, 58, 239, 189, 237, 97, 118, 189, 46, 70, 21, 190, 167, 174, 178, 189, 218, 147, 247, 61, 12, 15, 140, 61, 53, 66, 233, 61, 106, 142, 95, 60, 138, 186, 99, 190, 214, 229, 129, 190, 47, 84, 75, 189, 180, 101, 81, 62, 119, 50, 52, 190, 114, 202, 106, 61, 97, 225, 160, 61, 214, 72, 194, 190, 1, 250, 213, 189, 203, 138, 58, 190, 236, 102, 243, 61, 59, 60, 182, 61, 134, 205, 174, 61, 198, 33, 244, 61, 231, 1, 17, 190, 171, 99, 63, 62, 26, 11, 0, 190, 59, 230, 234, 61, 113, 149, 65, 61, 60, 184, 39, 62, 122, 243, 214, 189, 86, 182, 94, 62, 20, 199, 14, 62, 206, 189, 129, 188, 151, 45, 182, 60, 61, 11, 130, 62, 49, 132, 157, 190, 239, 247, 235, 189, 86, 217, 144, 188, 246, 147, 15, 62, 239, 37, 221, 61, 24, 9, 71, 62, 15, 214, 69, 62, 59, 206, 24, 61, 182, 113, 176, 189, 229, 99, 193, 60, 44, 94, 12, 61, 120, 119, 62, 62, 97, 200, 16, 62, 72, 102, 135, 60, 92, 234, 198, 189, 112, 104, 156, 189, 34, 221, 147, 61, 182, 203, 112, 62, 184, 109, 171, 190, 255, 228, 221, 190, 202, 219, 44, 188, 147, 32, 69, 190, 112, 33, 140, 189, 9, 80, 96, 61, 206, 147, 115, 189, 178, 153, 233, 189, 195, 67, 132, 187, 180, 51, 196, 190, 121, 102, 92, 190, 6, 189, 14, 62, 199, 225, 1, 188, 160, 140, 163, 190, 144, 111, 197, 189, 208, 25, 191, 62, 158, 97, 14, 62, 219, 133, 73, 189, 249, 121, 237, 61, 189, 56, 206, 61, 98, 197, 52, 190, 7, 190, 229, 190, 213, 4, 157, 190, 177, 129, 133, 62, 34, 252, 81, 190, 221, 112, 6, 62, 11, 85, 165, 189, 214, 26, 177, 190, 133, 211, 106, 62, 235, 127, 98, 188, 48, 139, 116, 57, 69, 247, 57, 190, 165, 208, 188, 61, 78, 28, 197, 61, 144, 10, 214, 61, 165, 64, 39, 62, 113, 204, 43, 62, 236, 88, 250, 189, 50, 52, 61, 190, 72, 168, 219, 189, 12, 46, 252, 61, 24, 207, 191, 61, 151, 232, 61, 189, 95, 45, 95, 190, 102, 18, 40, 61, 4, 229, 97, 62, 94, 99, 27, 62, 51, 240, 214, 61, 235, 34, 177, 189, 189, 188, 48, 60, 114, 49, 164, 189, 139, 157, 155, 189, 254, 166, 168, 189, 172, 3, 142, 189, 66, 88, 138, 59, 243, 57, 15, 190, 225, 140, 31, 190, 203, 124, 252, 61, 191, 170, 60, 62, 208, 204, 12, 190, 155, 20, 8, 190, 23, 181, 90, 190, 231, 33, 13, 188, 112, 53, 77, 62, 109, 251, 229, 189, 62, 104, 255, 188, 49, 158, 137, 189, 215, 0, 102, 62, 59, 11, 15, 190, 208, 41, 222, 58, 222, 61, 32, 62, 28, 65, 49, 190, 200, 86, 139, 61, 238, 84, 28, 61, 243, 206, 59, 62, 198, 99, 247, 189, 52, 231, 192, 61, 123, 65, 124, 62, 204, 191, 179, 190, 223, 171, 84, 190, 169, 87, 61, 189, 3, 88, 1, 189, 47, 74, 129, 61, 75, 180, 243, 60, 178, 201, 253, 61, 130, 130, 157, 62, 60, 57, 124, 62, 80, 21, 40, 190, 18, 254, 47, 62, 130, 156, 235, 61, 50, 187, 192, 187, 150, 222, 58, 62, 24, 40, 63, 189, 163, 247, 92, 61, 225, 32, 123, 62, 109, 243, 243, 61, 255, 223, 227, 190, 181, 189, 20, 190, 57, 56, 182, 189, 139, 117, 160, 189, 2, 161, 146, 190, 80, 216, 0, 189, 169, 168, 221, 61, 172, 236, 8, 61, 85, 209, 43, 61, 167, 11, 42, 62, 164, 78, 1, 190, 195, 52, 53, 190, 77, 129, 155, 189, 221, 88, 182, 62, 229, 123, 166, 190, 48, 219, 16, 190, 73, 12, 183, 190, 205, 36, 117, 189, 84, 254, 61, 62, 95, 101, 1, 62, 73, 24, 218, 61, 139, 34, 216, 61, 249, 202, 93, 62, 103, 5, 163, 189, 9, 48, 139, 60, 141, 85, 50, 189, 219, 61, 47, 190, 182, 194, 62, 62, 177, 62, 2, 189, 28, 122, 7, 62, 228, 136, 162, 62, 58, 24, 103, 189, 224, 238, 231, 190, 54, 158, 32, 188, 57, 130, 245, 189, 156, 166, 146, 61, 249, 174, 154, 188, 38, 83, 219, 60, 245, 52, 252, 188, 6, 204, 231, 189, 67, 20, 23, 190, 212, 118, 254, 188, 222, 79, 177, 61, 73, 92, 255, 61, 221, 230, 6, 190, 22, 64, 78, 61, 3, 131, 211, 189, 246, 105, 34, 62, 72, 37, 35, 62, 68, 16, 57, 190, 233, 150, 14, 190, 102, 42, 16, 190, 66, 171, 148, 61, 239, 71, 178, 189, 194, 5, 185, 61, 202, 70, 203, 189, 41, 154, 16, 190, 210, 238, 80, 60, 96, 97, 169, 61, 208, 175, 69, 189, 150, 139, 5, 190, 123, 123, 92, 189, 249, 163, 212, 61, 225, 81, 4, 62, 131, 211, 51, 62, 76, 163, 119, 190, 55, 167, 26, 189, 204, 27, 62, 190, 42, 90, 188, 61, 75, 13, 6, 190, 128, 224, 131, 189, 60, 129, 23, 62, 196, 50, 235, 60, 102, 9, 87, 60, 11, 138, 12, 189, 220, 2, 138, 62, 165, 114, 107, 60, 57, 138, 80, 190, 89, 79, 181, 62, 101, 197, 45, 62, 77, 107, 46, 61, 231, 47, 134, 61, 226, 99, 237, 188, 179, 29, 252, 61, 34, 76, 45, 62, 62, 69, 82, 190, 227, 106, 61, 62, 1, 212, 88, 62, 95, 226, 174, 189, 51, 208, 221, 188, 159, 119, 103, 188, 209, 137, 225, 189, 178, 204, 128, 62, 70, 246, 8, 61, 117, 152, 24, 61, 245, 235, 177, 189, 242, 150, 112, 61, 52, 122, 13, 62, 156, 33, 234, 59, 59, 252, 95, 190, 4, 157, 46, 62, 7, 16, 80, 62, 243, 19, 10, 190, 194, 182, 219, 189, 63, 200, 221, 60, 32, 104, 103, 190, 120, 39, 190, 189, 243, 169, 213, 187, 201, 73, 71, 189, 222, 195, 23, 62, 125, 14, 144, 189, 152, 107, 19, 61, 172, 182, 6, 189, 91, 221, 160, 61, 170, 192, 69, 190, 141, 88, 250, 60, 48, 145, 128, 190, 29, 107, 106, 62, 131, 19, 66, 61, 177, 107, 161, 189, 145, 193, 169, 190, 233, 144, 57, 62, 58, 118, 3, 62, 243, 179, 17, 189, 233, 211, 225, 189, 238, 77, 157, 61, 167, 76, 8, 190, 164, 99, 212, 189, 121, 89, 111, 190, 63, 78, 174, 61, 120, 244, 232, 188, 15, 211, 220, 189, 23, 248, 155, 61, 21, 51, 14, 62, 176, 157, 12, 189, 113, 133, 130, 61, 48, 172, 182, 60, 185, 7, 38, 190, 112, 171, 32, 190, 160, 114, 14, 190, 58, 17, 166, 60, 166, 60, 185, 59, 183, 93, 105, 61, 184, 245, 76, 61, 44, 12, 77, 60, 44, 122, 132, 189, 252, 81, 81, 61, 117, 65, 11, 62, 127, 222, 182, 188, 46, 20, 14, 189, 195, 142, 129, 61, 5, 191, 116, 61, 101, 50, 24, 62, 86, 174, 85, 61, 148, 149, 125, 61, 153, 95, 143, 61, 29, 234, 103, 60, 253, 227, 20, 62, 254, 42, 95, 189, 134, 60, 132, 189, 147, 169, 167, 188, 108, 179, 113, 190, 232, 164, 166, 59, 107, 183, 84, 188, 90, 218, 44, 190, 202, 126, 73, 190, 241, 137, 153, 61, 234, 224, 4, 62, 50, 170, 188, 61, 57, 56, 233, 188, 123, 95, 10, 190, 248, 252, 203, 61, 214, 198, 244, 188, 222, 6, 44, 190, 230, 216, 138, 62, 186, 162, 183, 189, 144, 116, 247, 61, 176, 48, 57, 61, 38, 171, 73, 61, 123, 10, 218, 189, 208, 139, 231, 61, 254, 220, 24, 190, 225, 115, 143, 188, 248, 115, 166, 188, 199, 211, 0, 190, 63, 204, 56, 61, 234, 87, 103, 188, 246, 77, 229, 60, 56, 123, 109, 62, 165, 151, 146, 59, 190, 172, 187, 190, 172, 124, 145, 189, 181, 209, 93, 62, 232, 50, 58, 61, 197, 105, 20, 62, 32, 21, 70, 189, 198, 197, 105, 61, 24, 117, 169, 60, 254, 101, 41, 189, 54, 20, 10, 62, 21, 7, 181, 61, 62, 152, 174, 61, 21, 156, 1, 190, 228, 249, 152, 61, 16, 201, 169, 61, 176, 49, 162, 62, 161, 202, 183, 190, 96, 56, 121, 61, 210, 27, 104, 190, 38, 143, 68, 188, 158, 187, 197, 189, 241, 219, 165, 188, 26, 46, 70, 61, 177, 179, 149, 62, 166, 123, 34, 189, 81, 138, 230, 61, 231, 69, 87, 189, 177, 142, 189, 189, 252, 50, 36, 190, 36, 166, 97, 188, 89, 17, 240, 189, 20, 6, 3, 185, 182, 57, 32, 62, 89, 238, 115, 60, 41, 229, 128, 189, 24, 40, 145, 188, 110, 151, 247, 60, 68, 168, 20, 190, 109, 56, 53, 190, 108, 179, 5, 190, 179, 122, 49, 190, 40, 173, 92, 189, 121, 188, 10, 62, 147, 198, 19, 62, 87, 53, 229, 61, 33, 143, 18, 189, 43, 75, 145, 61, 186, 173, 222, 189, 136, 117, 39, 190, 100, 67, 21, 189, 139, 97, 224, 61, 157, 198, 62, 190, 231, 159, 65, 190, 8, 16, 162, 61, 106, 80, 7, 190, 46, 165, 10, 62, 137, 140, 158, 188, 217, 44, 47, 190, 240, 222, 6, 62, 245, 69, 35, 189, 191, 93, 196, 189, 61, 50, 27, 190, 64, 95, 58, 61, 159, 34, 102, 189, 80, 156, 149, 61, 40, 39, 225, 61, 37, 84, 32, 189, 190, 224, 157, 61, 252, 216, 149, 185, 64, 55, 198, 61, 114, 143, 43, 189, 144, 14, 87, 188, 42, 116, 0, 190, 39, 178, 64, 61, 254, 177, 255, 187, 156, 159, 35, 187, 197, 102, 234, 189, 217, 144, 251, 189, 98, 172, 0, 190, 249, 217, 160, 60, 203, 30, 160, 61, 223, 108, 40, 190, 76, 104, 90, 190, 80, 168, 59, 190, 190, 72, 240, 188, 182, 183, 227, 61, 233, 4, 18, 190, 35, 118, 148, 61, 76, 129, 97, 189, 212, 153, 216, 61, 59, 214, 128, 189, 162, 115, 64, 61, 53, 197, 108, 188, 214, 192, 144, 189, 145, 85, 159, 189, 231, 99, 3, 190, 0, 197, 76, 61, 26, 170, 0, 190, 91, 163, 233, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 149, 185, 61, 198, 184, 222, 59, 166, 17, 122, 187, 223, 135, 103, 189, 65, 174, 177, 188, 81, 140, 128, 188, 73, 102, 89, 188, 255, 215, 174, 61, 203, 132, 92, 61, 147, 20, 221, 61, 33, 142, 49, 62, 125, 78, 187, 189, 253, 128, 47, 190, 160, 70, 197, 60, 183, 45, 18, 62, 188, 170, 93, 189, 44, 8, 146, 189, 206, 210, 107, 189, 246, 27, 6, 190, 74, 80, 108, 62, 218, 233, 195, 61, 9, 224, 60, 61, 148, 184, 185, 60, 87, 72, 217, 61, 28, 238, 33, 190, 16, 254, 89, 61, 52, 207, 154, 188, 167, 245, 66, 189, 95, 207, 91, 61, 192, 65, 100, 62, 56, 84, 192, 188, 197, 20, 119, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 144, 164, 189, 151, 57, 130, 190, 254, 211, 131, 62, 148, 207, 88, 190, 65, 243, 208, 189, 95, 191, 85, 190, 249, 170, 52, 190, 140, 216, 90, 62, 211, 34, 134, 61, 22, 174, 206, 61, 14, 207, 97, 190, 158, 215, 197, 61, 176, 31, 18, 61, 84, 150, 37, 62, 201, 232, 196, 62, 206, 206, 85, 189, 99, 170, 26, 190, 24, 196, 5, 62, 87, 240, 24, 62, 67, 19, 85, 190, 29, 179, 171, 62, 235, 26, 62, 190, 115, 242, 76, 190, 61, 125, 235, 190, 104, 198, 254, 61, 180, 78, 66, 62, 89, 130, 144, 189, 161, 31, 4, 61, 200, 132, 90, 62, 184, 125, 9, 190, 119, 107, 203, 61, 217, 104, 210, 61, 89, 187, 237, 61, 17, 211, 115, 189, 167, 81, 94, 61, 78, 93, 60, 61, 29, 37, 250, 189, 220, 233, 211, 188, 153, 192, 219, 61, 135, 63, 47, 190, 128, 205, 24, 62, 29, 123, 59, 190, 113, 97, 151, 189, 167, 153, 11, 62, 202, 198, 2, 190, 32, 15, 212, 189, 156, 217, 201, 60, 32, 122, 14, 62, 229, 170, 218, 189, 45, 231, 216, 61, 37, 251, 231, 189, 232, 83, 7, 190, 239, 198, 11, 61, 24, 171, 192, 61, 167, 141, 144, 61, 155, 170, 62, 190, 89, 168, 253, 189, 150, 208, 211, 189, 58, 1, 248, 189, 33, 114, 218, 61, 131, 120, 31, 190, 13, 28, 31, 189, 26, 246, 200, 61, 180, 142, 17, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 160, 16, 61, 21, 229, 254, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {77, 232, 248, 190, 71, 36, 133, 191, 179, 232, 237, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {28, 96, 21, 64, 48, 70, 198, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0042/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}