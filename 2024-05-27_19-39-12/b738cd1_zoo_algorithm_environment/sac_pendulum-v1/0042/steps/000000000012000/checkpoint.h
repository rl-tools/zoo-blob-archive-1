// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 193, 33, 63, 43, 5, 119, 62, 250, 27, 145, 62, 110, 254, 244, 62, 169, 162, 26, 191, 80, 66, 238, 189, 114, 1, 180, 190, 155, 17, 131, 191, 83, 57, 93, 190, 147, 187, 32, 190, 180, 213, 211, 190, 5, 77, 4, 63, 32, 12, 54, 191, 113, 166, 231, 62, 220, 17, 77, 62, 57, 206, 182, 62, 65, 197, 242, 190, 251, 140, 250, 190, 18, 237, 39, 62, 51, 193, 80, 63, 252, 212, 3, 191, 172, 18, 218, 190, 146, 199, 27, 62, 99, 48, 170, 61, 253, 201, 176, 190, 88, 224, 75, 63, 14, 204, 33, 191, 137, 26, 244, 62, 69, 52, 84, 63, 190, 84, 173, 62, 172, 6, 186, 189, 132, 144, 105, 191, 208, 224, 53, 190, 82, 142, 102, 190, 219, 104, 224, 191, 79, 21, 186, 190, 59, 152, 205, 62, 157, 148, 115, 63, 206, 187, 240, 61, 162, 100, 67, 63, 204, 237, 115, 190, 23, 223, 55, 191, 229, 243, 0, 63, 158, 194, 139, 191, 156, 122, 114, 61, 126, 213, 4, 63, 253, 175, 35, 191, 148, 71, 177, 62, 6, 181, 199, 190, 93, 174, 202, 63, 208, 27, 208, 62, 244, 185, 58, 191, 229, 15, 251, 190, 30, 186, 7, 59, 149, 213, 216, 190, 55, 176, 149, 63, 230, 108, 91, 62, 125, 40, 38, 190, 169, 34, 203, 190, 254, 65, 49, 191, 235, 71, 148, 60, 190, 106, 83, 63, 141, 20, 39, 190, 44, 195, 128, 190, 98, 101, 112, 191, 61, 66, 30, 191, 172, 30, 0, 191, 118, 120, 139, 191, 235, 31, 94, 190, 107, 24, 46, 191, 142, 165, 43, 62, 59, 17, 24, 190, 154, 26, 176, 190, 31, 73, 154, 63, 67, 75, 116, 62, 121, 78, 52, 191, 132, 153, 235, 189, 121, 236, 218, 62, 25, 9, 39, 63, 217, 124, 118, 62, 60, 151, 34, 62, 208, 45, 160, 62, 134, 112, 149, 191, 90, 110, 110, 190, 176, 40, 184, 190, 99, 200, 140, 189, 187, 10, 254, 190, 67, 189, 24, 191, 81, 16, 231, 62, 190, 86, 63, 62, 181, 246, 244, 62, 209, 4, 235, 190, 3, 89, 217, 62, 66, 48, 109, 62, 0, 146, 19, 191, 76, 57, 0, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 2, 65, 191, 176, 87, 185, 62, 164, 130, 203, 190, 88, 74, 99, 62, 8, 207, 97, 63, 130, 222, 178, 62, 47, 82, 100, 190, 139, 158, 118, 61, 182, 196, 250, 190, 251, 162, 34, 191, 144, 19, 148, 62, 211, 113, 169, 190, 233, 36, 202, 62, 95, 33, 136, 190, 87, 125, 130, 62, 150, 122, 184, 62, 67, 215, 95, 61, 46, 93, 210, 62, 241, 24, 51, 63, 239, 68, 173, 190, 166, 251, 243, 189, 119, 234, 143, 190, 155, 180, 2, 63, 96, 27, 30, 191, 121, 52, 251, 188, 178, 32, 178, 190, 191, 117, 11, 190, 18, 61, 6, 63, 210, 113, 171, 62, 17, 36, 63, 63, 16, 210, 18, 63, 210, 84, 194, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 14, 154, 188, 94, 60, 224, 61, 111, 3, 13, 191, 201, 54, 182, 189, 170, 236, 156, 190, 103, 110, 182, 61, 113, 25, 199, 60, 140, 4, 238, 189, 179, 48, 181, 189, 4, 126, 63, 62, 130, 217, 141, 189, 55, 205, 8, 190, 223, 194, 0, 191, 5, 56, 140, 62, 55, 114, 25, 62, 115, 56, 182, 62, 31, 102, 32, 62, 18, 235, 42, 191, 67, 246, 54, 191, 109, 224, 154, 61, 218, 201, 50, 190, 171, 249, 223, 61, 96, 96, 48, 190, 208, 151, 66, 190, 46, 253, 217, 190, 247, 225, 157, 61, 110, 91, 98, 190, 176, 128, 22, 62, 187, 45, 73, 190, 49, 117, 142, 190, 73, 61, 135, 62, 229, 68, 38, 62, 85, 2, 6, 62, 138, 29, 174, 62, 13, 177, 127, 59, 155, 22, 34, 62, 119, 112, 74, 189, 28, 126, 187, 189, 248, 193, 15, 191, 218, 78, 231, 61, 16, 69, 252, 190, 251, 242, 58, 190, 252, 236, 95, 62, 49, 168, 223, 62, 101, 6, 149, 190, 81, 166, 11, 62, 95, 161, 166, 62, 171, 127, 149, 62, 164, 105, 17, 60, 116, 158, 240, 61, 98, 90, 237, 189, 175, 96, 29, 190, 189, 13, 57, 190, 52, 14, 42, 190, 75, 58, 44, 190, 183, 61, 30, 191, 35, 191, 111, 190, 181, 85, 28, 190, 225, 186, 4, 63, 61, 97, 163, 189, 231, 38, 54, 190, 162, 219, 110, 189, 206, 8, 64, 62, 224, 148, 77, 61, 221, 41, 49, 61, 201, 228, 245, 61, 121, 23, 108, 191, 225, 182, 107, 62, 124, 70, 99, 189, 16, 56, 35, 62, 246, 27, 11, 189, 140, 86, 133, 61, 178, 84, 204, 190, 41, 187, 180, 188, 101, 167, 49, 62, 3, 102, 24, 191, 0, 18, 132, 190, 114, 77, 30, 63, 30, 32, 128, 62, 231, 40, 28, 62, 208, 145, 54, 62, 167, 104, 14, 62, 145, 135, 46, 190, 141, 147, 24, 190, 133, 100, 74, 188, 109, 75, 140, 190, 139, 149, 32, 62, 84, 94, 143, 62, 5, 188, 148, 62, 29, 162, 31, 190, 93, 94, 29, 190, 226, 126, 145, 62, 4, 36, 32, 62, 9, 139, 62, 189, 11, 129, 123, 190, 43, 23, 11, 63, 57, 222, 33, 62, 183, 157, 0, 190, 163, 26, 132, 189, 118, 96, 172, 185, 93, 133, 70, 62, 51, 10, 53, 61, 248, 157, 79, 60, 106, 86, 206, 61, 51, 174, 14, 59, 131, 76, 3, 190, 133, 150, 116, 191, 150, 135, 72, 190, 235, 23, 199, 62, 4, 75, 47, 62, 111, 179, 232, 188, 197, 156, 90, 62, 17, 22, 182, 61, 83, 87, 67, 189, 15, 67, 213, 62, 79, 148, 15, 60, 54, 23, 103, 61, 170, 112, 151, 189, 245, 70, 145, 191, 227, 113, 204, 190, 14, 255, 252, 189, 172, 118, 14, 190, 193, 2, 71, 62, 3, 211, 103, 190, 27, 100, 137, 189, 48, 24, 5, 62, 90, 230, 151, 62, 245, 242, 23, 62, 127, 147, 23, 60, 17, 85, 29, 190, 164, 128, 170, 59, 228, 14, 193, 61, 169, 131, 55, 190, 167, 96, 220, 189, 182, 226, 229, 189, 42, 111, 15, 189, 172, 220, 158, 61, 88, 242, 234, 61, 233, 247, 143, 61, 53, 241, 190, 61, 7, 64, 79, 188, 0, 160, 190, 61, 3, 149, 9, 190, 34, 144, 133, 189, 175, 141, 45, 61, 54, 61, 19, 190, 150, 200, 30, 190, 125, 213, 102, 189, 12, 46, 125, 188, 229, 40, 182, 189, 217, 117, 180, 189, 235, 80, 3, 187, 208, 78, 247, 189, 133, 56, 184, 61, 7, 125, 9, 190, 70, 101, 255, 61, 173, 75, 25, 61, 72, 179, 22, 60, 61, 87, 135, 61, 119, 191, 216, 187, 64, 23, 124, 190, 110, 155, 36, 61, 34, 119, 198, 61, 124, 216, 7, 191, 191, 24, 144, 62, 144, 201, 137, 188, 37, 125, 4, 62, 45, 34, 41, 190, 91, 136, 72, 62, 185, 173, 54, 191, 140, 113, 175, 188, 127, 175, 34, 62, 174, 43, 163, 62, 144, 201, 215, 190, 212, 170, 14, 191, 47, 186, 218, 190, 55, 92, 181, 190, 112, 120, 167, 62, 31, 5, 79, 62, 8, 93, 68, 61, 7, 122, 253, 60, 246, 215, 26, 61, 77, 102, 119, 189, 252, 19, 73, 62, 223, 32, 153, 190, 85, 232, 120, 61, 201, 127, 208, 61, 174, 186, 102, 62, 108, 3, 141, 62, 212, 104, 125, 62, 211, 2, 186, 61, 50, 123, 235, 190, 117, 196, 95, 61, 162, 150, 166, 61, 68, 22, 224, 61, 114, 175, 50, 191, 127, 23, 36, 62, 141, 76, 118, 62, 251, 135, 16, 190, 137, 225, 114, 190, 216, 160, 23, 62, 23, 136, 185, 189, 105, 246, 115, 61, 85, 46, 70, 62, 126, 43, 65, 62, 69, 56, 187, 189, 6, 111, 70, 191, 92, 144, 179, 190, 151, 17, 225, 191, 144, 102, 113, 62, 51, 78, 105, 61, 164, 149, 65, 62, 45, 77, 76, 62, 123, 193, 89, 62, 61, 128, 67, 62, 3, 53, 194, 189, 218, 244, 170, 191, 234, 214, 206, 62, 193, 233, 216, 190, 122, 254, 15, 62, 46, 74, 192, 61, 73, 2, 81, 62, 180, 157, 80, 61, 156, 14, 163, 190, 224, 95, 85, 190, 201, 204, 2, 62, 250, 68, 156, 191, 150, 10, 118, 61, 51, 216, 172, 61, 86, 145, 109, 190, 146, 78, 112, 191, 174, 24, 211, 61, 78, 57, 188, 190, 138, 131, 236, 190, 171, 14, 195, 62, 16, 143, 95, 191, 198, 153, 202, 189, 174, 125, 210, 61, 91, 150, 53, 62, 181, 138, 4, 189, 226, 150, 38, 187, 122, 18, 19, 62, 177, 32, 174, 189, 108, 199, 108, 190, 112, 191, 198, 190, 103, 225, 62, 191, 176, 16, 178, 188, 15, 214, 253, 62, 172, 121, 15, 61, 136, 75, 117, 190, 243, 3, 100, 191, 249, 8, 58, 62, 147, 13, 177, 190, 220, 176, 143, 62, 234, 27, 186, 58, 111, 196, 16, 190, 129, 177, 158, 189, 100, 17, 37, 190, 226, 190, 148, 189, 96, 170, 212, 61, 234, 149, 142, 189, 241, 170, 97, 61, 173, 179, 205, 189, 123, 99, 212, 185, 108, 116, 22, 62, 48, 14, 174, 189, 233, 241, 164, 188, 66, 46, 255, 189, 41, 74, 98, 190, 73, 55, 22, 190, 238, 178, 17, 62, 81, 45, 212, 188, 160, 19, 172, 189, 245, 48, 137, 189, 222, 54, 50, 189, 44, 203, 125, 189, 58, 99, 121, 189, 144, 37, 183, 188, 6, 201, 127, 189, 200, 145, 39, 190, 66, 178, 218, 61, 63, 118, 24, 190, 149, 231, 127, 61, 181, 52, 41, 190, 159, 244, 86, 188, 234, 206, 42, 60, 204, 240, 170, 189, 231, 232, 217, 189, 230, 101, 159, 190, 0, 62, 65, 61, 51, 22, 141, 191, 24, 153, 187, 61, 5, 122, 149, 61, 40, 71, 54, 190, 99, 221, 57, 190, 210, 202, 192, 188, 106, 34, 132, 190, 240, 128, 181, 190, 19, 50, 152, 62, 224, 248, 89, 191, 96, 141, 184, 61, 214, 115, 184, 190, 134, 188, 150, 187, 209, 64, 164, 60, 5, 169, 97, 188, 162, 239, 203, 189, 144, 118, 103, 62, 206, 96, 30, 190, 190, 208, 194, 62, 207, 69, 47, 191, 9, 182, 146, 60, 120, 85, 235, 62, 195, 23, 93, 61, 149, 14, 45, 190, 191, 221, 0, 191, 31, 108, 11, 190, 92, 207, 247, 60, 10, 133, 160, 61, 78, 48, 112, 61, 139, 72, 78, 190, 208, 230, 196, 189, 88, 41, 22, 62, 125, 34, 6, 61, 41, 198, 0, 190, 195, 235, 136, 62, 181, 179, 9, 62, 203, 213, 30, 61, 78, 91, 185, 189, 230, 214, 34, 62, 45, 127, 40, 191, 61, 60, 251, 190, 207, 21, 220, 61, 150, 61, 193, 62, 67, 65, 205, 190, 84, 241, 191, 189, 199, 117, 224, 60, 57, 169, 171, 190, 167, 209, 86, 62, 93, 16, 128, 62, 98, 204, 12, 189, 11, 19, 179, 62, 175, 204, 158, 186, 76, 172, 191, 189, 98, 47, 71, 189, 167, 228, 251, 190, 193, 226, 122, 190, 65, 246, 50, 189, 137, 146, 149, 190, 68, 193, 78, 62, 231, 14, 113, 62, 25, 1, 143, 61, 46, 191, 196, 190, 104, 232, 81, 189, 53, 108, 155, 190, 171, 80, 232, 62, 83, 65, 30, 190, 38, 219, 203, 62, 217, 229, 251, 188, 35, 33, 174, 189, 181, 19, 209, 190, 5, 7, 100, 60, 129, 135, 29, 62, 247, 144, 199, 62, 147, 111, 138, 60, 192, 234, 90, 62, 201, 193, 63, 191, 24, 142, 13, 62, 25, 78, 252, 188, 58, 113, 75, 190, 221, 236, 124, 62, 95, 176, 72, 62, 220, 205, 115, 61, 247, 241, 172, 62, 161, 204, 187, 61, 158, 243, 155, 62, 204, 245, 120, 61, 248, 251, 84, 62, 248, 185, 124, 191, 242, 211, 201, 60, 126, 119, 101, 59, 97, 152, 86, 62, 209, 221, 77, 62, 217, 195, 116, 190, 9, 201, 2, 191, 219, 247, 46, 190, 27, 19, 18, 190, 189, 177, 0, 190, 211, 77, 29, 190, 50, 44, 0, 62, 158, 111, 239, 61, 187, 219, 126, 189, 60, 218, 81, 190, 204, 115, 38, 189, 176, 238, 150, 187, 108, 234, 22, 62, 89, 137, 64, 190, 89, 150, 137, 189, 100, 190, 49, 61, 61, 188, 0, 62, 38, 51, 193, 189, 162, 152, 164, 188, 166, 112, 14, 190, 7, 141, 166, 61, 100, 133, 237, 189, 186, 254, 29, 190, 225, 3, 62, 61, 197, 131, 197, 61, 122, 109, 21, 188, 115, 248, 138, 60, 250, 59, 42, 62, 21, 71, 26, 190, 4, 95, 153, 61, 251, 115, 225, 189, 250, 171, 70, 190, 205, 18, 164, 60, 253, 31, 230, 189, 100, 137, 164, 189, 54, 61, 105, 189, 41, 133, 210, 60, 155, 184, 6, 190, 203, 225, 135, 189, 183, 242, 103, 188, 11, 104, 158, 59, 67, 123, 141, 189, 34, 231, 152, 187, 108, 63, 130, 61, 55, 188, 187, 61, 12, 141, 3, 190, 200, 16, 217, 187, 31, 221, 12, 61, 14, 81, 107, 189, 27, 8, 96, 188, 22, 51, 194, 187, 253, 90, 195, 61, 30, 54, 48, 190, 14, 27, 217, 189, 151, 196, 6, 190, 56, 193, 2, 190, 42, 187, 164, 188, 97, 101, 236, 60, 170, 247, 156, 189, 113, 231, 40, 190, 197, 85, 204, 188, 76, 237, 190, 61, 116, 113, 201, 189, 10, 70, 130, 61, 88, 54, 75, 189, 59, 0, 32, 190, 55, 105, 168, 190, 36, 95, 136, 62, 109, 83, 13, 191, 214, 75, 49, 61, 240, 251, 56, 62, 250, 147, 2, 190, 10, 0, 246, 190, 207, 140, 91, 61, 238, 2, 208, 190, 233, 187, 19, 191, 200, 107, 16, 63, 224, 5, 144, 190, 238, 218, 138, 60, 41, 112, 2, 63, 69, 245, 147, 61, 247, 193, 126, 62, 147, 113, 199, 60, 174, 209, 134, 62, 36, 224, 131, 61, 51, 50, 89, 191, 181, 126, 43, 191, 6, 205, 52, 191, 16, 84, 152, 62, 41, 107, 146, 62, 254, 68, 139, 61, 137, 177, 81, 189, 170, 189, 91, 191, 88, 156, 191, 62, 56, 66, 214, 190, 45, 65, 4, 190, 124, 239, 145, 190, 247, 22, 151, 190, 184, 232, 107, 62, 117, 189, 44, 189, 231, 221, 26, 62, 92, 6, 139, 61, 49, 83, 179, 189, 174, 69, 65, 189, 135, 169, 118, 62, 213, 49, 49, 190, 238, 198, 153, 61, 71, 107, 48, 62, 175, 166, 127, 190, 226, 4, 121, 62, 99, 20, 113, 62, 21, 224, 247, 60, 253, 66, 34, 189, 56, 97, 61, 60, 14, 192, 26, 62, 233, 46, 178, 190, 76, 33, 2, 190, 237, 91, 48, 189, 240, 224, 90, 62, 117, 188, 195, 188, 247, 212, 213, 190, 210, 32, 3, 60, 243, 52, 235, 61, 70, 199, 250, 188, 69, 213, 154, 61, 168, 183, 152, 189, 91, 170, 58, 62, 174, 173, 79, 61, 110, 79, 52, 62, 128, 231, 16, 61, 109, 203, 196, 61, 176, 211, 29, 190, 108, 120, 164, 61, 193, 139, 242, 189, 113, 223, 60, 190, 30, 232, 16, 61, 121, 220, 84, 190, 10, 220, 38, 62, 238, 176, 7, 190, 48, 108, 160, 61, 191, 176, 210, 61, 223, 135, 163, 61, 73, 9, 7, 190, 219, 201, 155, 188, 199, 216, 160, 184, 232, 157, 146, 189, 16, 53, 24, 190, 117, 2, 245, 189, 88, 225, 27, 190, 104, 148, 27, 61, 3, 12, 167, 61, 98, 150, 214, 60, 124, 170, 180, 189, 54, 37, 226, 189, 132, 112, 172, 61, 245, 191, 2, 62, 212, 169, 194, 188, 239, 245, 118, 61, 133, 63, 92, 61, 49, 158, 3, 60, 106, 125, 234, 61, 59, 194, 81, 190, 219, 33, 145, 189, 170, 44, 53, 190, 104, 150, 42, 191, 167, 21, 209, 61, 38, 78, 77, 62, 152, 111, 106, 190, 65, 207, 221, 190, 27, 37, 195, 61, 211, 129, 21, 191, 164, 249, 116, 62, 128, 58, 211, 59, 6, 22, 43, 191, 138, 246, 145, 62, 241, 103, 129, 188, 231, 29, 3, 190, 195, 131, 21, 62, 94, 13, 64, 62, 77, 101, 173, 189, 212, 237, 75, 62, 39, 214, 155, 190, 177, 14, 102, 190, 224, 173, 204, 190, 209, 252, 255, 61, 219, 127, 163, 62, 230, 38, 144, 62, 97, 227, 174, 188, 62, 177, 132, 190, 229, 124, 168, 190, 7, 103, 172, 190, 103, 245, 114, 61, 141, 104, 35, 190, 112, 232, 207, 189, 199, 193, 46, 190, 128, 109, 42, 190, 9, 138, 139, 191, 76, 199, 243, 189, 118, 58, 144, 62, 187, 52, 112, 190, 66, 221, 140, 61, 37, 172, 241, 61, 224, 30, 135, 61, 82, 230, 179, 190, 231, 83, 179, 189, 20, 109, 133, 191, 70, 156, 231, 62, 225, 102, 24, 62, 36, 28, 223, 190, 203, 211, 219, 189, 23, 108, 30, 62, 32, 39, 227, 55, 140, 254, 133, 62, 139, 149, 92, 190, 104, 183, 5, 62, 16, 186, 248, 190, 65, 163, 33, 62, 30, 75, 72, 62, 249, 110, 128, 62, 185, 199, 219, 189, 183, 244, 61, 191, 174, 140, 220, 190, 244, 159, 131, 190, 21, 71, 162, 62, 111, 40, 97, 189, 111, 69, 162, 61, 243, 63, 65, 61, 88, 181, 61, 61, 15, 236, 95, 62, 72, 215, 105, 190, 61, 225, 31, 62, 55, 141, 155, 61, 210, 112, 228, 61, 198, 217, 4, 190, 100, 167, 76, 62, 132, 216, 29, 189, 153, 204, 217, 188, 224, 110, 211, 61, 23, 209, 134, 62, 49, 116, 198, 190, 133, 13, 225, 189, 169, 101, 158, 187, 124, 124, 105, 189, 60, 90, 122, 62, 159, 76, 129, 62, 208, 21, 82, 62, 12, 34, 100, 189, 56, 133, 110, 189, 86, 94, 191, 59, 88, 157, 213, 61, 185, 245, 172, 189, 209, 166, 85, 61, 157, 90, 37, 62, 96, 156, 140, 59, 184, 211, 109, 189, 6, 98, 118, 61, 209, 150, 131, 62, 203, 62, 224, 190, 134, 165, 39, 191, 143, 1, 7, 62, 232, 195, 147, 191, 255, 145, 23, 189, 0, 91, 182, 61, 157, 168, 149, 190, 47, 83, 17, 191, 217, 216, 16, 188, 178, 142, 228, 190, 81, 19, 84, 191, 211, 113, 168, 62, 244, 202, 43, 191, 130, 204, 167, 190, 179, 51, 164, 190, 57, 141, 235, 62, 39, 67, 61, 62, 142, 22, 241, 187, 204, 60, 205, 61, 212, 25, 158, 61, 140, 189, 204, 190, 245, 16, 27, 191, 243, 88, 128, 191, 133, 68, 186, 62, 24, 196, 115, 62, 63, 206, 129, 62, 155, 119, 188, 189, 214, 86, 121, 191, 51, 48, 186, 62, 117, 135, 195, 190, 4, 171, 150, 61, 215, 161, 36, 190, 48, 154, 250, 190, 141, 173, 45, 62, 23, 3, 27, 62, 153, 99, 12, 62, 88, 61, 79, 62, 65, 156, 50, 190, 25, 2, 17, 190, 118, 58, 231, 60, 16, 253, 221, 61, 26, 14, 235, 61, 111, 241, 189, 187, 34, 25, 16, 191, 167, 115, 24, 62, 172, 167, 248, 61, 75, 89, 213, 62, 73, 155, 13, 62, 235, 64, 79, 189, 1, 123, 127, 188, 16, 87, 243, 190, 197, 95, 205, 189, 20, 211, 210, 188, 58, 174, 47, 189, 28, 245, 164, 60, 134, 176, 34, 191, 54, 250, 65, 191, 207, 169, 93, 61, 176, 198, 20, 62, 222, 242, 189, 61, 38, 97, 22, 190, 194, 130, 0, 190, 11, 223, 198, 189, 50, 240, 38, 62, 68, 235, 33, 62, 112, 46, 219, 61, 9, 18, 178, 189, 225, 72, 145, 189, 23, 28, 129, 190, 36, 193, 146, 61, 253, 15, 23, 62, 172, 212, 137, 60, 236, 151, 137, 186, 198, 205, 31, 62, 55, 75, 149, 190, 163, 155, 34, 191, 101, 138, 60, 190, 100, 124, 208, 62, 120, 96, 222, 190, 95, 186, 188, 190, 29, 176, 37, 190, 146, 155, 244, 190, 239, 247, 214, 61, 35, 124, 32, 62, 35, 49, 20, 62, 195, 245, 1, 63, 79, 234, 24, 62, 150, 173, 222, 190, 26, 84, 8, 62, 32, 172, 177, 190, 20, 168, 140, 189, 75, 254, 7, 62, 223, 218, 57, 190, 134, 73, 158, 61, 248, 98, 155, 62, 164, 108, 105, 61, 90, 13, 39, 191, 133, 129, 207, 62, 139, 94, 157, 61, 15, 242, 251, 60, 129, 244, 9, 191, 255, 45, 7, 62, 233, 148, 28, 62, 15, 48, 13, 189, 173, 211, 189, 188, 116, 161, 230, 61, 203, 243, 19, 191, 37, 108, 78, 189, 221, 247, 126, 61, 90, 152, 222, 62, 182, 43, 231, 190, 235, 100, 145, 190, 108, 243, 201, 190, 55, 37, 1, 191, 179, 208, 214, 62, 169, 183, 130, 62, 60, 111, 204, 61, 222, 75, 215, 188, 236, 140, 120, 62, 214, 121, 32, 61, 76, 112, 243, 188, 244, 128, 254, 190, 70, 197, 238, 189, 142, 48, 76, 62, 213, 126, 177, 61, 66, 192, 23, 62, 46, 53, 218, 62, 147, 5, 236, 61, 95, 223, 23, 191, 183, 7, 118, 189, 117, 3, 19, 62, 198, 108, 218, 190, 24, 87, 87, 60, 211, 108, 39, 190, 22, 138, 213, 62, 123, 49, 219, 61, 150, 232, 252, 189, 13, 68, 19, 190, 172, 128, 165, 190, 187, 165, 92, 62, 3, 190, 78, 191, 222, 54, 97, 62, 129, 88, 41, 62, 245, 134, 149, 62, 249, 20, 108, 62, 58, 184, 197, 190, 147, 158, 109, 190, 67, 137, 3, 191, 135, 80, 91, 61, 86, 222, 68, 62, 174, 71, 2, 190, 155, 96, 141, 61, 17, 74, 150, 61, 173, 153, 151, 190, 227, 199, 212, 61, 61, 23, 205, 188, 28, 49, 152, 62, 221, 253, 186, 61, 8, 168, 255, 189, 25, 59, 137, 62, 163, 115, 59, 61, 81, 149, 173, 190, 164, 222, 172, 57, 254, 115, 128, 190, 21, 63, 163, 61, 18, 152, 139, 190, 241, 164, 10, 190, 132, 242, 255, 60, 65, 100, 46, 188, 12, 67, 197, 189, 73, 70, 238, 190, 215, 18, 59, 62, 116, 177, 29, 190, 75, 77, 171, 189, 229, 82, 168, 62, 245, 99, 132, 62, 127, 33, 116, 61, 241, 63, 21, 61, 98, 241, 160, 189, 157, 153, 99, 189, 181, 5, 129, 61, 93, 46, 187, 190, 253, 198, 142, 61, 94, 133, 17, 62, 35, 128, 60, 189, 247, 212, 13, 189, 34, 37, 60, 61, 228, 179, 133, 189, 233, 92, 80, 62, 119, 123, 158, 189, 58, 105, 140, 189, 166, 70, 243, 188, 45, 14, 116, 187, 169, 134, 84, 190, 227, 7, 191, 60, 191, 21, 93, 191, 46, 91, 15, 189, 236, 39, 156, 62, 254, 95, 70, 191, 64, 6, 131, 189, 220, 63, 167, 60, 10, 23, 230, 188, 12, 51, 82, 191, 52, 167, 244, 60, 34, 152, 121, 191, 19, 232, 138, 61, 203, 236, 229, 189, 39, 52, 180, 62, 254, 144, 240, 188, 6, 96, 152, 189, 90, 131, 86, 62, 204, 111, 131, 61, 238, 52, 35, 191, 127, 6, 148, 62, 187, 164, 124, 191, 116, 193, 17, 62, 154, 135, 219, 190, 165, 81, 203, 61, 104, 180, 218, 188, 248, 84, 203, 190, 181, 14, 20, 191, 126, 63, 240, 58, 90, 125, 133, 188, 56, 84, 200, 190, 121, 89, 111, 190, 138, 157, 164, 62, 56, 41, 150, 61, 167, 64, 176, 189, 2, 107, 203, 61, 252, 200, 183, 189, 164, 18, 15, 190, 1, 221, 175, 60, 93, 113, 185, 189, 165, 204, 42, 190, 220, 110, 89, 61, 243, 199, 41, 191, 246, 136, 54, 59, 52, 55, 237, 61, 237, 202, 236, 60, 187, 174, 120, 62, 33, 120, 5, 62, 130, 143, 54, 190, 194, 46, 97, 190, 167, 162, 42, 189, 37, 163, 72, 189, 184, 245, 165, 61, 215, 37, 109, 61, 239, 90, 231, 190, 178, 65, 3, 62, 111, 204, 132, 190, 119, 150, 133, 60, 221, 118, 229, 62, 196, 249, 66, 190, 167, 175, 27, 188, 86, 249, 138, 190, 66, 236, 227, 187, 202, 6, 145, 60, 43, 8, 161, 190, 42, 16, 94, 62, 28, 219, 103, 190, 190, 128, 119, 189, 140, 184, 129, 191, 89, 165, 8, 62, 93, 123, 14, 62, 5, 184, 217, 61, 240, 176, 105, 189, 63, 37, 135, 191, 192, 86, 175, 60, 86, 224, 81, 190, 128, 110, 8, 190, 14, 181, 178, 62, 70, 216, 25, 62, 80, 2, 141, 62, 63, 187, 35, 190, 47, 95, 119, 190, 23, 248, 27, 191, 203, 93, 119, 61, 226, 220, 73, 190, 245, 21, 236, 189, 247, 155, 13, 190, 56, 184, 3, 61, 113, 32, 195, 190, 100, 173, 238, 61, 62, 13, 41, 62, 85, 138, 175, 62, 218, 98, 84, 189, 58, 248, 162, 191, 75, 29, 80, 62, 196, 98, 79, 62, 184, 74, 31, 190, 60, 171, 145, 62, 2, 80, 169, 60, 136, 33, 15, 190, 209, 206, 80, 62, 158, 171, 28, 189, 15, 32, 169, 61, 203, 171, 137, 61, 55, 148, 179, 61, 156, 148, 32, 191, 219, 96, 196, 61, 159, 10, 105, 62, 117, 109, 204, 62, 206, 244, 6, 191, 149, 14, 68, 61, 166, 22, 69, 190, 74, 196, 180, 190, 32, 44, 76, 62, 238, 26, 82, 62, 30, 235, 118, 61, 184, 37, 128, 62, 139, 154, 30, 186, 99, 61, 47, 62, 123, 112, 205, 61, 215, 159, 10, 191, 215, 112, 231, 190, 42, 233, 166, 61, 190, 100, 137, 189, 157, 42, 169, 60, 44, 42, 148, 62, 126, 149, 226, 60, 68, 74, 88, 190, 129, 198, 105, 60, 90, 192, 169, 61, 54, 43, 15, 191, 120, 194, 75, 61, 178, 135, 67, 191, 6, 104, 109, 62, 48, 120, 169, 61, 126, 24, 15, 62, 129, 156, 209, 188, 12, 102, 106, 190, 255, 71, 20, 190, 113, 242, 25, 191, 15, 29, 8, 190, 130, 94, 236, 61, 135, 139, 74, 60, 191, 13, 83, 62, 232, 3, 132, 190, 71, 111, 4, 191, 172, 2, 207, 190, 237, 67, 27, 190, 227, 140, 141, 62, 55, 150, 47, 190, 143, 238, 217, 189, 156, 129, 208, 62, 251, 246, 103, 190, 118, 189, 16, 61, 125, 237, 39, 190, 173, 21, 199, 62, 145, 151, 170, 61, 224, 16, 5, 191, 153, 50, 101, 62, 218, 156, 137, 189, 0, 27, 97, 61, 44, 119, 176, 189, 128, 37, 145, 62, 197, 169, 88, 188, 19, 38, 133, 190, 177, 8, 69, 58, 225, 213, 98, 62, 209, 206, 83, 190, 41, 61, 67, 62, 209, 65, 212, 62, 59, 76, 133, 190, 215, 41, 167, 188, 49, 159, 27, 62, 163, 198, 30, 62, 218, 180, 81, 62, 3, 232, 214, 190, 67, 133, 63, 187, 252, 136, 176, 189, 200, 97, 207, 60, 75, 170, 11, 61, 159, 89, 53, 62, 2, 86, 206, 61, 150, 15, 187, 61, 8, 82, 212, 61, 237, 236, 155, 62, 92, 207, 203, 190, 53, 134, 168, 62, 99, 187, 228, 189, 9, 243, 7, 188, 84, 255, 232, 189, 100, 238, 18, 61, 80, 12, 85, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 93, 16, 60, 76, 14, 239, 61, 163, 56, 229, 188, 23, 79, 229, 61, 81, 193, 31, 189, 30, 217, 151, 61, 68, 75, 232, 187, 187, 161, 24, 62, 13, 255, 41, 61, 210, 172, 55, 62, 54, 209, 174, 62, 225, 52, 6, 62, 45, 225, 48, 190, 160, 70, 197, 60, 74, 147, 119, 62, 170, 18, 24, 190, 242, 112, 169, 189, 0, 227, 188, 188, 42, 17, 159, 188, 22, 208, 196, 62, 68, 224, 71, 62, 158, 34, 161, 189, 127, 222, 175, 61, 147, 5, 140, 62, 43, 60, 195, 187, 67, 128, 195, 61, 127, 4, 129, 61, 209, 177, 11, 190, 145, 19, 25, 62, 9, 215, 217, 62, 191, 163, 253, 189, 87, 156, 166, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 179, 64, 191, 96, 163, 192, 190, 59, 53, 177, 62, 240, 39, 247, 190, 60, 109, 182, 189, 85, 38, 195, 190, 165, 90, 224, 190, 66, 154, 241, 62, 214, 100, 117, 61, 36, 198, 64, 62, 181, 87, 30, 191, 244, 78, 110, 63, 107, 183, 40, 188, 84, 150, 37, 62, 237, 148, 86, 63, 11, 124, 239, 58, 218, 254, 16, 190, 81, 195, 145, 62, 141, 31, 244, 62, 19, 237, 10, 190, 43, 222, 135, 63, 95, 115, 178, 190, 215, 165, 32, 191, 208, 93, 63, 191, 245, 199, 162, 62, 200, 54, 200, 61, 87, 45, 214, 190, 252, 55, 211, 189, 144, 53, 51, 63, 189, 31, 202, 190, 109, 131, 242, 62, 189, 81, 136, 62, 50, 162, 241, 62, 9, 2, 68, 189, 112, 222, 21, 62, 192, 107, 19, 190, 133, 247, 253, 189, 247, 41, 192, 188, 104, 155, 134, 61, 219, 183, 194, 188, 142, 52, 21, 62, 30, 66, 217, 189, 126, 217, 118, 189, 138, 131, 152, 62, 223, 158, 150, 189, 32, 15, 212, 189, 235, 180, 193, 61, 179, 242, 96, 62, 19, 153, 213, 189, 29, 9, 45, 62, 148, 76, 94, 60, 247, 175, 81, 190, 60, 21, 108, 62, 148, 170, 89, 189, 180, 101, 173, 62, 206, 169, 3, 190, 202, 204, 201, 190, 228, 192, 60, 189, 243, 190, 171, 190, 124, 38, 224, 62, 247, 65, 12, 190, 145, 219, 13, 190, 26, 13, 16, 62, 95, 35, 50, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 7, 180, 188, 201, 206, 208, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {251, 31, 160, 63, 233, 27, 45, 61, 15, 59, 224, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {83, 3, 10, 192, 120, 149, 108, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0042/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}