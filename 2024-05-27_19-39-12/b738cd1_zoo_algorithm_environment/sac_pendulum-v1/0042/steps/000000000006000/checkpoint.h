// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 164, 50, 62, 195, 161, 136, 61, 218, 236, 168, 62, 65, 167, 145, 62, 78, 104, 55, 191, 66, 244, 186, 189, 171, 244, 7, 191, 192, 192, 75, 191, 37, 230, 149, 190, 14, 119, 225, 189, 125, 231, 152, 190, 201, 208, 9, 63, 128, 221, 33, 191, 161, 44, 3, 63, 246, 236, 210, 61, 248, 24, 1, 62, 97, 249, 14, 191, 234, 59, 23, 191, 202, 148, 181, 61, 222, 137, 68, 63, 185, 28, 37, 191, 37, 48, 129, 190, 32, 184, 56, 190, 194, 81, 76, 62, 119, 14, 181, 190, 128, 79, 40, 63, 73, 59, 55, 191, 214, 251, 120, 62, 36, 167, 13, 63, 195, 149, 114, 62, 70, 185, 101, 190, 193, 240, 35, 191, 125, 125, 143, 189, 223, 162, 51, 191, 189, 44, 182, 191, 68, 67, 230, 190, 224, 149, 207, 62, 179, 105, 88, 63, 214, 156, 55, 61, 65, 101, 4, 63, 6, 172, 175, 190, 250, 229, 59, 191, 229, 95, 14, 63, 6, 201, 70, 191, 197, 138, 57, 62, 254, 83, 242, 62, 248, 55, 62, 191, 1, 111, 184, 62, 86, 112, 68, 190, 49, 148, 139, 63, 234, 87, 15, 63, 112, 120, 4, 191, 63, 162, 161, 190, 110, 131, 48, 189, 40, 17, 188, 190, 205, 63, 126, 63, 164, 103, 255, 61, 234, 25, 113, 190, 68, 146, 45, 190, 169, 43, 74, 191, 167, 219, 1, 62, 169, 4, 86, 63, 66, 241, 87, 190, 248, 180, 6, 191, 139, 87, 56, 191, 175, 192, 38, 191, 93, 135, 2, 191, 228, 210, 97, 191, 88, 154, 3, 190, 127, 54, 40, 191, 86, 11, 156, 62, 153, 9, 90, 190, 31, 77, 52, 190, 146, 122, 106, 63, 118, 78, 136, 62, 129, 236, 208, 190, 150, 21, 148, 190, 184, 165, 79, 62, 167, 54, 14, 63, 106, 169, 145, 62, 88, 3, 163, 61, 232, 239, 149, 62, 30, 78, 95, 191, 131, 180, 154, 190, 41, 169, 224, 189, 201, 50, 187, 190, 66, 254, 23, 191, 182, 66, 8, 191, 10, 15, 5, 63, 28, 147, 151, 61, 81, 7, 244, 62, 187, 73, 237, 190, 38, 95, 226, 62, 197, 170, 241, 60, 75, 186, 29, 191, 88, 127, 1, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 221, 9, 191, 113, 161, 3, 63, 167, 147, 168, 190, 241, 213, 120, 61, 69, 89, 82, 63, 75, 171, 234, 62, 59, 231, 204, 189, 1, 174, 76, 62, 132, 78, 7, 191, 12, 166, 14, 191, 6, 179, 185, 62, 10, 9, 164, 190, 56, 10, 197, 62, 53, 121, 46, 190, 14, 217, 108, 62, 89, 197, 171, 62, 83, 241, 4, 190, 245, 75, 186, 62, 99, 91, 55, 63, 220, 165, 53, 190, 138, 62, 3, 190, 82, 7, 67, 190, 215, 101, 40, 63, 157, 110, 237, 190, 102, 169, 245, 59, 160, 96, 205, 190, 64, 151, 195, 61, 161, 73, 18, 63, 202, 140, 116, 62, 207, 179, 51, 63, 130, 39, 22, 63, 105, 242, 159, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 51, 225, 60, 6, 71, 67, 59, 27, 66, 125, 190, 175, 207, 24, 189, 12, 36, 194, 189, 0, 213, 58, 61, 66, 143, 204, 60, 222, 49, 86, 189, 232, 151, 242, 189, 200, 151, 245, 189, 99, 103, 171, 189, 177, 172, 145, 189, 248, 136, 161, 190, 105, 7, 93, 62, 167, 151, 228, 189, 204, 192, 224, 189, 68, 222, 187, 59, 79, 61, 178, 190, 119, 97, 149, 189, 126, 205, 193, 61, 17, 131, 118, 190, 188, 84, 8, 62, 146, 15, 233, 189, 230, 96, 212, 190, 26, 192, 2, 60, 20, 65, 48, 61, 18, 8, 144, 190, 217, 88, 132, 61, 166, 59, 62, 190, 134, 151, 138, 61, 150, 248, 29, 190, 107, 164, 9, 62, 67, 18, 110, 61, 255, 85, 191, 62, 247, 195, 4, 62, 166, 133, 69, 62, 119, 73, 181, 187, 16, 124, 132, 189, 99, 20, 47, 190, 32, 179, 22, 62, 77, 174, 131, 190, 243, 188, 117, 190, 187, 239, 176, 62, 95, 243, 231, 62, 5, 102, 175, 190, 31, 18, 252, 61, 77, 55, 167, 62, 193, 85, 150, 62, 55, 220, 63, 61, 132, 179, 26, 62, 54, 145, 40, 190, 245, 199, 101, 190, 8, 66, 188, 188, 202, 147, 121, 190, 125, 37, 93, 189, 153, 222, 43, 191, 5, 151, 12, 190, 10, 0, 28, 190, 249, 213, 188, 62, 253, 9, 138, 188, 45, 138, 128, 190, 174, 129, 99, 188, 5, 36, 72, 62, 254, 240, 141, 189, 187, 231, 239, 61, 82, 130, 1, 62, 168, 195, 130, 191, 47, 166, 64, 62, 94, 212, 218, 58, 89, 112, 29, 62, 229, 174, 77, 189, 100, 51, 199, 60, 120, 0, 222, 190, 186, 88, 27, 61, 233, 147, 210, 61, 61, 186, 37, 191, 68, 162, 18, 190, 77, 97, 22, 63, 49, 108, 92, 62, 194, 239, 40, 62, 158, 223, 46, 62, 59, 202, 210, 61, 185, 246, 5, 189, 57, 170, 47, 190, 188, 43, 56, 188, 12, 99, 152, 190, 254, 31, 192, 61, 124, 18, 56, 62, 163, 237, 111, 62, 108, 173, 46, 190, 66, 160, 111, 189, 44, 111, 137, 62, 117, 99, 18, 62, 143, 97, 17, 60, 167, 44, 128, 190, 178, 107, 2, 63, 226, 240, 177, 61, 184, 6, 167, 189, 181, 135, 100, 189, 145, 110, 137, 60, 217, 23, 218, 61, 134, 115, 152, 61, 26, 134, 26, 189, 31, 138, 143, 61, 68, 168, 220, 189, 215, 11, 228, 189, 124, 194, 56, 191, 10, 209, 169, 189, 9, 197, 222, 62, 122, 93, 83, 62, 237, 52, 133, 189, 210, 65, 59, 62, 100, 66, 42, 62, 43, 91, 147, 190, 125, 130, 177, 62, 162, 38, 22, 188, 94, 196, 228, 60, 116, 138, 154, 189, 245, 173, 129, 191, 230, 200, 10, 191, 124, 221, 190, 60, 231, 53, 3, 190, 149, 255, 66, 62, 63, 100, 19, 190, 149, 130, 239, 189, 206, 87, 60, 61, 202, 99, 158, 62, 219, 0, 61, 62, 127, 147, 23, 60, 17, 85, 29, 190, 164, 128, 170, 59, 228, 14, 193, 61, 169, 131, 55, 190, 167, 96, 220, 189, 182, 226, 229, 189, 42, 111, 15, 189, 172, 220, 158, 61, 88, 242, 234, 61, 233, 247, 143, 61, 53, 241, 190, 61, 7, 64, 79, 188, 0, 160, 190, 61, 3, 149, 9, 190, 34, 144, 133, 189, 175, 141, 45, 61, 54, 61, 19, 190, 150, 200, 30, 190, 125, 213, 102, 189, 12, 46, 125, 188, 229, 40, 182, 189, 217, 117, 180, 189, 235, 80, 3, 187, 208, 78, 247, 189, 133, 56, 184, 61, 7, 125, 9, 190, 70, 101, 255, 61, 173, 75, 25, 61, 72, 179, 22, 60, 61, 87, 135, 61, 119, 191, 216, 187, 234, 71, 171, 190, 141, 164, 24, 61, 214, 81, 80, 61, 102, 74, 151, 190, 91, 184, 49, 62, 33, 39, 132, 188, 169, 58, 17, 62, 134, 31, 228, 189, 177, 132, 79, 62, 23, 128, 149, 190, 129, 167, 141, 188, 100, 52, 10, 62, 138, 50, 176, 62, 187, 59, 219, 190, 112, 158, 173, 190, 75, 5, 171, 190, 165, 27, 52, 190, 95, 155, 71, 62, 232, 225, 236, 61, 74, 239, 80, 61, 204, 6, 157, 61, 17, 38, 11, 61, 40, 28, 231, 189, 45, 151, 83, 62, 150, 88, 150, 189, 15, 220, 8, 62, 249, 208, 60, 62, 163, 156, 105, 62, 40, 244, 130, 62, 20, 96, 25, 62, 140, 198, 108, 62, 245, 242, 246, 190, 117, 196, 95, 61, 255, 150, 124, 61, 36, 245, 192, 61, 216, 193, 217, 190, 211, 177, 233, 61, 182, 132, 105, 62, 166, 80, 8, 190, 134, 129, 150, 189, 38, 171, 33, 62, 37, 104, 185, 189, 203, 219, 235, 60, 177, 142, 47, 62, 154, 235, 213, 61, 225, 234, 214, 189, 235, 121, 11, 191, 69, 159, 173, 190, 223, 108, 134, 191, 253, 112, 124, 62, 121, 37, 25, 189, 160, 32, 64, 62, 140, 231, 83, 62, 239, 227, 85, 62, 27, 80, 28, 62, 50, 77, 140, 189, 4, 61, 55, 191, 140, 102, 200, 62, 126, 179, 34, 190, 150, 53, 228, 61, 219, 148, 164, 61, 20, 89, 41, 62, 178, 83, 13, 62, 111, 247, 175, 190, 159, 93, 154, 189, 29, 162, 28, 190, 67, 115, 119, 191, 109, 151, 184, 61, 123, 70, 255, 61, 204, 88, 134, 190, 67, 2, 26, 191, 214, 146, 23, 62, 127, 242, 251, 190, 118, 250, 35, 190, 107, 250, 88, 62, 70, 85, 5, 191, 254, 65, 48, 190, 62, 236, 11, 62, 5, 255, 10, 62, 80, 33, 73, 189, 68, 14, 138, 61, 26, 163, 99, 62, 28, 72, 218, 188, 207, 1, 223, 190, 238, 29, 143, 190, 14, 36, 184, 190, 239, 18, 198, 189, 48, 219, 7, 62, 106, 39, 142, 61, 200, 18, 22, 190, 20, 224, 108, 191, 161, 9, 73, 190, 51, 107, 219, 190, 125, 42, 164, 62, 192, 81, 15, 189, 159, 93, 50, 190, 129, 177, 158, 189, 100, 17, 37, 190, 226, 190, 148, 189, 96, 170, 212, 61, 234, 149, 142, 189, 241, 170, 97, 61, 173, 179, 205, 189, 123, 99, 212, 185, 108, 116, 22, 62, 48, 14, 174, 189, 233, 241, 164, 188, 66, 46, 255, 189, 41, 74, 98, 190, 73, 55, 22, 190, 238, 178, 17, 62, 81, 45, 212, 188, 160, 19, 172, 189, 245, 48, 137, 189, 222, 54, 50, 189, 44, 203, 125, 189, 58, 99, 121, 189, 144, 37, 183, 188, 6, 201, 127, 189, 200, 145, 39, 190, 66, 178, 218, 61, 63, 118, 24, 190, 149, 231, 127, 61, 181, 52, 41, 190, 159, 244, 86, 188, 234, 206, 42, 60, 204, 240, 170, 189, 231, 232, 217, 189, 107, 245, 104, 190, 214, 180, 99, 59, 175, 170, 67, 191, 17, 122, 44, 62, 106, 97, 178, 61, 105, 102, 88, 190, 36, 13, 204, 190, 211, 226, 105, 61, 124, 225, 230, 190, 192, 104, 125, 190, 160, 171, 43, 62, 12, 220, 248, 190, 94, 94, 128, 189, 216, 40, 70, 190, 176, 248, 168, 61, 93, 213, 184, 61, 240, 104, 226, 59, 173, 161, 142, 188, 7, 242, 69, 62, 210, 111, 164, 190, 45, 102, 189, 60, 159, 54, 3, 191, 216, 26, 137, 189, 217, 59, 71, 62, 30, 99, 79, 60, 35, 160, 47, 189, 182, 92, 249, 190, 50, 42, 129, 190, 241, 207, 96, 190, 27, 204, 179, 61, 238, 178, 195, 61, 130, 20, 81, 190, 231, 212, 69, 190, 14, 64, 69, 62, 122, 30, 246, 61, 134, 72, 174, 189, 80, 30, 21, 62, 243, 120, 27, 62, 162, 248, 187, 187, 211, 206, 168, 189, 6, 67, 241, 61, 110, 211, 187, 190, 132, 111, 140, 190, 173, 129, 125, 62, 249, 188, 146, 62, 37, 73, 211, 190, 147, 242, 130, 189, 155, 223, 8, 61, 105, 112, 29, 190, 249, 227, 3, 62, 214, 45, 148, 61, 211, 179, 25, 189, 183, 184, 170, 62, 11, 217, 241, 60, 175, 96, 90, 61, 195, 221, 48, 189, 212, 6, 46, 190, 31, 224, 214, 189, 146, 48, 248, 189, 142, 244, 48, 190, 255, 51, 47, 62, 80, 224, 247, 61, 44, 48, 200, 61, 191, 24, 197, 190, 47, 239, 143, 189, 52, 213, 224, 190, 4, 156, 51, 61, 60, 142, 45, 189, 102, 173, 212, 62, 20, 45, 198, 189, 17, 167, 176, 189, 45, 45, 106, 190, 189, 178, 37, 61, 171, 67, 105, 59, 53, 147, 227, 60, 164, 7, 224, 190, 240, 20, 200, 61, 251, 116, 231, 190, 230, 1, 0, 189, 84, 192, 55, 59, 153, 170, 39, 190, 47, 15, 59, 62, 231, 94, 129, 62, 178, 137, 170, 61, 232, 58, 131, 62, 70, 147, 229, 59, 234, 65, 50, 61, 195, 138, 1, 62, 105, 95, 242, 61, 86, 82, 221, 190, 80, 213, 210, 61, 178, 218, 147, 190, 159, 28, 31, 62, 100, 142, 93, 62, 8, 59, 105, 190, 36, 179, 130, 190, 219, 247, 46, 190, 27, 19, 18, 190, 189, 177, 0, 190, 211, 77, 29, 190, 50, 44, 0, 62, 158, 111, 239, 61, 187, 219, 126, 189, 60, 218, 81, 190, 204, 115, 38, 189, 176, 238, 150, 187, 108, 234, 22, 62, 89, 137, 64, 190, 89, 150, 137, 189, 100, 190, 49, 61, 61, 188, 0, 62, 38, 51, 193, 189, 162, 152, 164, 188, 166, 112, 14, 190, 7, 141, 166, 61, 100, 133, 237, 189, 186, 254, 29, 190, 225, 3, 62, 61, 197, 131, 197, 61, 122, 109, 21, 188, 115, 248, 138, 60, 250, 59, 42, 62, 21, 71, 26, 190, 4, 95, 153, 61, 251, 115, 225, 189, 250, 171, 70, 190, 205, 18, 164, 60, 253, 31, 230, 189, 100, 137, 164, 189, 54, 61, 105, 189, 41, 133, 210, 60, 155, 184, 6, 190, 203, 225, 135, 189, 183, 242, 103, 188, 11, 104, 158, 59, 67, 123, 141, 189, 34, 231, 152, 187, 108, 63, 130, 61, 55, 188, 187, 61, 12, 141, 3, 190, 200, 16, 217, 187, 31, 221, 12, 61, 14, 81, 107, 189, 27, 8, 96, 188, 22, 51, 194, 187, 253, 90, 195, 61, 30, 54, 48, 190, 14, 27, 217, 189, 151, 196, 6, 190, 56, 193, 2, 190, 42, 187, 164, 188, 97, 101, 236, 60, 170, 247, 156, 189, 113, 231, 40, 190, 197, 85, 204, 188, 76, 237, 190, 61, 116, 113, 201, 189, 10, 70, 130, 61, 88, 54, 75, 189, 59, 0, 32, 190, 58, 133, 194, 189, 112, 59, 4, 62, 40, 168, 117, 191, 190, 87, 76, 61, 249, 86, 34, 62, 117, 66, 155, 190, 200, 162, 16, 191, 81, 78, 161, 61, 189, 37, 79, 191, 15, 190, 61, 190, 29, 251, 164, 62, 229, 188, 235, 190, 115, 166, 189, 188, 108, 89, 173, 62, 110, 121, 97, 61, 8, 65, 120, 62, 171, 70, 24, 61, 10, 37, 29, 62, 19, 26, 241, 61, 71, 229, 35, 191, 147, 58, 23, 191, 81, 203, 28, 191, 198, 237, 181, 61, 180, 43, 142, 61, 86, 162, 158, 188, 5, 207, 185, 188, 17, 171, 48, 191, 148, 208, 246, 61, 155, 158, 245, 190, 28, 216, 22, 190, 248, 246, 155, 190, 162, 106, 45, 62, 30, 119, 25, 62, 73, 133, 73, 189, 133, 215, 241, 61, 80, 203, 206, 187, 253, 171, 11, 190, 64, 207, 51, 189, 101, 175, 89, 62, 157, 190, 81, 190, 95, 64, 175, 61, 96, 140, 219, 61, 80, 37, 89, 190, 170, 156, 74, 62, 143, 67, 55, 62, 215, 17, 250, 60, 238, 10, 104, 60, 253, 240, 129, 60, 221, 66, 7, 62, 21, 176, 150, 190, 36, 250, 70, 190, 225, 137, 133, 189, 13, 169, 87, 62, 154, 34, 61, 189, 51, 82, 198, 190, 206, 18, 198, 61, 169, 221, 216, 61, 74, 50, 15, 189, 177, 196, 240, 61, 88, 67, 86, 59, 151, 5, 33, 62, 189, 169, 17, 60, 72, 15, 64, 62, 135, 92, 215, 186, 109, 203, 196, 61, 176, 211, 29, 190, 108, 120, 164, 61, 193, 139, 242, 189, 113, 223, 60, 190, 30, 232, 16, 61, 121, 220, 84, 190, 10, 220, 38, 62, 238, 176, 7, 190, 48, 108, 160, 61, 191, 176, 210, 61, 223, 135, 163, 61, 73, 9, 7, 190, 219, 201, 155, 188, 199, 216, 160, 184, 232, 157, 146, 189, 16, 53, 24, 190, 117, 2, 245, 189, 88, 225, 27, 190, 104, 148, 27, 61, 3, 12, 167, 61, 98, 150, 214, 60, 124, 170, 180, 189, 54, 37, 226, 189, 132, 112, 172, 61, 245, 191, 2, 62, 212, 169, 194, 188, 239, 245, 118, 61, 133, 63, 92, 61, 49, 158, 3, 60, 106, 125, 234, 61, 59, 194, 81, 190, 87, 107, 17, 189, 230, 172, 68, 190, 155, 72, 1, 191, 187, 59, 214, 61, 98, 193, 66, 62, 16, 250, 36, 190, 198, 235, 209, 190, 40, 111, 216, 61, 22, 228, 157, 190, 226, 254, 80, 62, 230, 20, 237, 59, 199, 62, 10, 191, 184, 238, 35, 188, 255, 133, 98, 61, 227, 180, 175, 189, 45, 35, 25, 62, 252, 93, 206, 61, 96, 142, 204, 61, 194, 6, 223, 61, 89, 116, 150, 190, 143, 178, 200, 190, 24, 222, 224, 190, 109, 119, 69, 62, 98, 192, 129, 62, 162, 199, 37, 62, 198, 164, 11, 61, 175, 74, 215, 190, 123, 12, 41, 190, 101, 22, 48, 190, 127, 199, 49, 61, 162, 228, 81, 190, 112, 232, 207, 189, 159, 103, 197, 60, 211, 100, 49, 190, 164, 246, 79, 191, 8, 5, 52, 188, 69, 83, 143, 62, 17, 100, 153, 190, 17, 58, 118, 189, 153, 131, 78, 62, 225, 169, 169, 61, 2, 80, 113, 190, 78, 162, 147, 189, 36, 176, 84, 191, 144, 18, 239, 61, 236, 31, 79, 190, 207, 244, 82, 190, 76, 249, 22, 60, 0, 78, 10, 62, 13, 105, 42, 62, 37, 44, 44, 62, 169, 86, 168, 190, 207, 173, 46, 190, 61, 65, 6, 191, 179, 223, 91, 62, 140, 145, 13, 62, 30, 71, 51, 62, 164, 208, 91, 61, 150, 31, 77, 191, 85, 132, 218, 190, 212, 30, 173, 190, 166, 50, 158, 62, 84, 8, 55, 188, 135, 109, 133, 60, 170, 93, 164, 188, 35, 12, 27, 61, 133, 15, 58, 62, 247, 198, 28, 190, 40, 21, 53, 62, 252, 236, 140, 61, 99, 233, 23, 62, 103, 109, 148, 189, 9, 110, 69, 62, 173, 61, 144, 188, 205, 112, 124, 61, 203, 35, 217, 61, 213, 222, 113, 62, 45, 214, 207, 190, 90, 112, 203, 189, 36, 243, 170, 187, 20, 194, 54, 61, 157, 229, 68, 62, 2, 65, 90, 62, 54, 49, 68, 62, 108, 37, 230, 60, 200, 36, 157, 189, 89, 167, 118, 61, 71, 84, 54, 61, 155, 80, 196, 61, 1, 116, 153, 61, 220, 81, 147, 60, 131, 240, 217, 187, 210, 31, 149, 189, 65, 27, 171, 61, 127, 135, 142, 62, 115, 115, 236, 190, 140, 128, 226, 190, 175, 172, 123, 189, 112, 86, 153, 191, 221, 15, 0, 189, 200, 221, 231, 61, 226, 96, 143, 190, 223, 14, 190, 190, 59, 218, 193, 60, 123, 239, 30, 191, 126, 225, 191, 190, 190, 57, 207, 61, 40, 65, 31, 191, 76, 1, 128, 190, 80, 196, 47, 61, 65, 161, 207, 62, 10, 195, 41, 62, 129, 93, 26, 61, 6, 108, 171, 61, 58, 113, 51, 62, 94, 18, 219, 190, 170, 127, 23, 191, 41, 248, 61, 191, 8, 43, 106, 62, 65, 63, 175, 189, 226, 211, 112, 62, 245, 218, 57, 189, 157, 43, 58, 191, 247, 188, 157, 61, 40, 79, 141, 190, 214, 59, 204, 61, 220, 248, 65, 190, 157, 112, 84, 62, 192, 26, 43, 61, 97, 158, 18, 62, 30, 70, 202, 61, 0, 221, 45, 62, 68, 177, 13, 190, 121, 29, 236, 189, 58, 203, 231, 58, 3, 23, 231, 61, 6, 30, 220, 61, 70, 223, 187, 189, 155, 45, 184, 190, 207, 146, 171, 61, 140, 46, 29, 62, 33, 173, 218, 62, 6, 35, 196, 61, 55, 215, 179, 189, 227, 234, 28, 60, 210, 9, 128, 190, 189, 203, 170, 189, 35, 33, 253, 188, 212, 203, 19, 189, 123, 244, 183, 60, 240, 109, 177, 190, 177, 133, 11, 191, 176, 160, 245, 61, 98, 185, 12, 62, 248, 125, 94, 61, 51, 246, 0, 190, 181, 59, 1, 190, 70, 42, 78, 189, 82, 229, 31, 62, 192, 53, 18, 62, 17, 2, 37, 190, 20, 220, 76, 61, 247, 42, 186, 61, 7, 14, 132, 190, 113, 92, 208, 188, 236, 126, 41, 62, 52, 4, 238, 189, 232, 1, 12, 61, 186, 205, 72, 61, 171, 11, 106, 188, 62, 195, 79, 190, 45, 136, 7, 61, 176, 170, 188, 62, 88, 148, 227, 190, 86, 241, 114, 190, 153, 242, 197, 189, 84, 94, 145, 190, 176, 88, 58, 187, 180, 80, 216, 60, 220, 84, 251, 61, 209, 100, 189, 62, 69, 159, 80, 62, 16, 203, 130, 190, 139, 60, 244, 61, 249, 127, 206, 189, 121, 168, 147, 188, 172, 250, 146, 62, 81, 141, 144, 186, 174, 125, 43, 61, 89, 206, 79, 62, 26, 74, 82, 62, 56, 85, 36, 191, 25, 166, 36, 190, 204, 78, 202, 188, 167, 236, 144, 189, 197, 149, 196, 190, 66, 238, 141, 187, 216, 159, 21, 62, 190, 47, 8, 61, 205, 78, 130, 60, 249, 43, 43, 62, 134, 38, 19, 190, 164, 38, 232, 189, 160, 238, 5, 61, 74, 241, 195, 62, 64, 79, 223, 190, 121, 79, 155, 190, 93, 51, 233, 190, 45, 141, 135, 190, 93, 54, 112, 62, 147, 252, 223, 61, 27, 104, 0, 62, 99, 194, 220, 61, 180, 195, 128, 62, 143, 252, 79, 189, 141, 142, 217, 60, 85, 35, 62, 190, 137, 91, 183, 189, 67, 195, 35, 62, 218, 175, 12, 61, 23, 180, 21, 62, 97, 171, 154, 62, 122, 147, 239, 61, 88, 152, 21, 191, 41, 162, 24, 61, 56, 113, 166, 61, 15, 138, 40, 191, 222, 8, 129, 60, 41, 180, 28, 189, 173, 167, 193, 62, 101, 224, 139, 61, 198, 186, 8, 190, 235, 140, 112, 190, 103, 240, 155, 61, 187, 224, 27, 62, 75, 109, 93, 191, 92, 53, 78, 62, 182, 178, 223, 61, 242, 147, 98, 62, 149, 230, 95, 62, 12, 241, 57, 190, 164, 69, 182, 190, 95, 250, 77, 190, 210, 51, 25, 60, 250, 170, 40, 62, 15, 90, 46, 190, 70, 252, 21, 61, 71, 235, 101, 190, 125, 254, 34, 188, 243, 152, 156, 61, 4, 191, 29, 190, 196, 243, 98, 62, 0, 107, 200, 61, 124, 125, 170, 59, 252, 174, 106, 62, 181, 54, 59, 61, 28, 161, 93, 190, 11, 7, 42, 189, 61, 27, 93, 190, 58, 200, 227, 61, 164, 206, 89, 190, 101, 34, 208, 189, 118, 101, 145, 61, 251, 235, 166, 59, 196, 99, 115, 189, 204, 131, 50, 190, 83, 136, 92, 62, 173, 21, 142, 189, 106, 83, 15, 190, 20, 133, 183, 62, 158, 33, 77, 62, 17, 109, 127, 61, 73, 238, 232, 61, 255, 98, 94, 189, 216, 229, 124, 61, 24, 144, 241, 61, 56, 73, 165, 190, 132, 36, 9, 62, 203, 86, 72, 62, 63, 237, 26, 189, 21, 244, 114, 59, 1, 63, 68, 61, 130, 14, 36, 190, 202, 169, 80, 62, 165, 124, 152, 187, 104, 182, 79, 188, 156, 81, 90, 189, 153, 89, 159, 61, 101, 45, 63, 190, 201, 129, 129, 61, 113, 70, 136, 190, 67, 19, 158, 59, 219, 216, 126, 62, 177, 140, 154, 190, 226, 102, 24, 190, 9, 33, 82, 189, 104, 83, 135, 190, 39, 54, 197, 190, 131, 132, 82, 188, 171, 195, 252, 189, 172, 85, 67, 62, 255, 177, 10, 190, 124, 42, 248, 189, 83, 248, 107, 190, 66, 198, 141, 187, 76, 76, 136, 189, 51, 31, 135, 61, 4, 109, 166, 190, 37, 203, 131, 62, 14, 246, 8, 189, 34, 81, 221, 187, 112, 116, 218, 190, 116, 5, 38, 62, 140, 93, 27, 188, 48, 192, 9, 189, 51, 135, 76, 190, 63, 48, 17, 188, 99, 53, 136, 189, 152, 209, 145, 190, 121, 89, 111, 190, 12, 112, 114, 62, 140, 87, 62, 190, 167, 64, 176, 189, 12, 236, 203, 61, 197, 22, 0, 61, 144, 93, 162, 189, 194, 54, 83, 61, 100, 116, 59, 189, 252, 210, 30, 190, 24, 144, 13, 61, 239, 7, 58, 190, 8, 103, 196, 59, 161, 24, 204, 186, 199, 58, 186, 61, 166, 148, 93, 61, 245, 58, 252, 59, 82, 156, 59, 189, 22, 126, 66, 189, 58, 23, 88, 61, 136, 154, 5, 189, 46, 80, 130, 189, 215, 37, 109, 61, 255, 72, 150, 60, 178, 65, 3, 62, 241, 89, 79, 61, 138, 162, 143, 61, 202, 245, 252, 61, 131, 89, 146, 189, 1, 164, 248, 61, 74, 38, 21, 190, 113, 107, 231, 189, 140, 220, 55, 61, 73, 29, 115, 190, 49, 62, 106, 62, 167, 156, 208, 189, 253, 133, 32, 190, 48, 71, 39, 191, 199, 137, 217, 61, 144, 152, 46, 60, 137, 2, 157, 61, 63, 177, 35, 190, 240, 175, 160, 190, 207, 177, 49, 62, 211, 216, 74, 189, 24, 12, 127, 190, 215, 30, 135, 62, 105, 45, 159, 61, 97, 67, 123, 62, 205, 78, 137, 189, 131, 209, 69, 58, 230, 205, 0, 191, 71, 147, 218, 60, 38, 82, 201, 190, 104, 21, 188, 189, 139, 239, 50, 61, 253, 151, 68, 189, 85, 116, 227, 189, 207, 230, 216, 189, 218, 155, 158, 61, 70, 92, 195, 62, 222, 7, 75, 189, 254, 140, 116, 191, 60, 222, 16, 62, 7, 201, 78, 62, 29, 89, 54, 190, 128, 137, 174, 62, 68, 66, 241, 188, 234, 237, 198, 188, 181, 77, 160, 61, 232, 185, 131, 188, 195, 9, 183, 61, 245, 105, 181, 61, 4, 60, 38, 61, 47, 77, 187, 190, 216, 198, 75, 62, 26, 169, 82, 62, 88, 81, 170, 62, 100, 122, 1, 191, 193, 238, 174, 61, 162, 44, 93, 190, 190, 39, 62, 190, 3, 183, 8, 61, 64, 198, 21, 59, 52, 25, 11, 61, 135, 104, 138, 62, 31, 96, 4, 189, 158, 230, 65, 62, 100, 250, 22, 189, 183, 115, 122, 190, 53, 193, 175, 190, 63, 179, 0, 187, 249, 86, 251, 58, 62, 59, 148, 187, 210, 216, 35, 62, 178, 178, 227, 60, 23, 175, 109, 190, 248, 245, 178, 61, 130, 15, 197, 61, 49, 71, 49, 191, 43, 152, 60, 190, 40, 134, 167, 190, 193, 87, 132, 62, 214, 27, 170, 61, 214, 77, 183, 61, 103, 41, 131, 189, 168, 82, 92, 62, 223, 223, 152, 189, 193, 117, 250, 190, 242, 221, 32, 190, 110, 56, 10, 62, 60, 227, 53, 189, 253, 89, 193, 61, 97, 215, 67, 190, 119, 117, 0, 191, 170, 116, 225, 189, 42, 234, 43, 190, 87, 222, 132, 62, 110, 23, 72, 190, 159, 183, 188, 189, 218, 49, 216, 60, 170, 194, 43, 189, 111, 219, 237, 189, 172, 55, 181, 190, 157, 64, 204, 62, 32, 132, 213, 61, 167, 149, 16, 190, 245, 238, 177, 61, 204, 214, 126, 189, 253, 203, 172, 188, 73, 86, 85, 189, 235, 184, 151, 62, 254, 124, 53, 190, 108, 159, 148, 189, 40, 180, 76, 60, 219, 37, 116, 62, 249, 199, 60, 190, 3, 250, 88, 62, 148, 164, 141, 189, 125, 194, 129, 190, 226, 95, 3, 188, 105, 71, 48, 62, 132, 79, 36, 62, 173, 99, 38, 189, 200, 72, 137, 190, 171, 251, 79, 190, 25, 45, 107, 61, 108, 94, 228, 61, 70, 69, 25, 61, 243, 123, 42, 62, 156, 253, 209, 61, 84, 43, 21, 62, 142, 231, 253, 61, 168, 243, 229, 61, 152, 142, 243, 189, 243, 119, 53, 62, 59, 209, 194, 189, 17, 23, 40, 60, 193, 216, 102, 61, 0, 29, 40, 60, 152, 7, 128, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 32, 58, 60, 117, 229, 240, 61, 114, 241, 250, 60, 164, 187, 158, 61, 81, 193, 31, 189, 176, 161, 118, 61, 188, 152, 169, 187, 37, 145, 153, 61, 13, 255, 41, 61, 142, 220, 5, 62, 245, 47, 144, 62, 87, 91, 167, 61, 45, 225, 48, 190, 160, 70, 197, 60, 251, 199, 49, 62, 119, 16, 203, 189, 242, 112, 169, 189, 104, 159, 186, 189, 120, 114, 5, 190, 124, 101, 181, 62, 45, 162, 33, 62, 234, 128, 191, 188, 195, 221, 182, 61, 103, 61, 34, 62, 201, 125, 66, 189, 164, 219, 122, 61, 100, 166, 236, 60, 232, 110, 101, 190, 2, 254, 19, 62, 141, 94, 188, 62, 92, 49, 213, 189, 246, 18, 239, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 155, 94, 190, 58, 204, 207, 190, 204, 15, 202, 62, 167, 48, 251, 190, 60, 109, 182, 189, 248, 164, 158, 190, 35, 193, 195, 190, 41, 64, 181, 62, 214, 100, 117, 61, 121, 80, 20, 62, 26, 80, 196, 190, 237, 203, 49, 63, 107, 183, 40, 188, 84, 150, 37, 62, 167, 28, 24, 63, 162, 249, 150, 189, 218, 254, 16, 190, 225, 177, 118, 62, 151, 154, 196, 62, 104, 107, 91, 190, 66, 170, 30, 63, 97, 209, 98, 190, 55, 45, 157, 190, 27, 231, 16, 191, 60, 121, 189, 62, 189, 123, 1, 62, 5, 117, 19, 190, 253, 198, 39, 188, 172, 13, 14, 63, 206, 208, 156, 190, 225, 221, 185, 62, 92, 232, 145, 62, 75, 118, 47, 62, 90, 28, 18, 189, 209, 114, 206, 61, 207, 124, 214, 189, 133, 247, 253, 189, 194, 169, 109, 188, 65, 147, 37, 61, 4, 46, 9, 190, 142, 52, 21, 62, 82, 141, 65, 190, 194, 128, 28, 189, 119, 109, 111, 62, 223, 158, 150, 189, 32, 15, 212, 189, 46, 228, 248, 61, 187, 48, 90, 62, 19, 153, 213, 189, 216, 59, 24, 62, 153, 50, 81, 189, 43, 149, 24, 190, 141, 22, 1, 62, 49, 151, 35, 61, 109, 49, 225, 61, 84, 98, 2, 190, 233, 198, 136, 190, 59, 33, 168, 189, 135, 146, 84, 190, 213, 157, 192, 61, 98, 255, 171, 189, 53, 20, 169, 189, 156, 145, 31, 61, 92, 4, 151, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 171, 83, 189, 110, 164, 143, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {145, 85, 162, 63, 151, 34, 195, 62, 72, 234, 19, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {166, 235, 18, 192, 135, 94, 73, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0042/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}