// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 237, 28, 63, 144, 87, 62, 62, 152, 222, 150, 62, 225, 110, 237, 62, 140, 183, 8, 191, 157, 153, 231, 189, 115, 153, 173, 190, 32, 247, 117, 191, 128, 193, 106, 190, 49, 30, 29, 190, 56, 147, 172, 190, 228, 180, 0, 63, 153, 243, 57, 191, 190, 9, 223, 62, 33, 69, 59, 62, 38, 134, 177, 62, 236, 96, 236, 190, 172, 222, 11, 191, 98, 161, 42, 62, 145, 193, 87, 63, 76, 251, 5, 191, 88, 169, 140, 190, 240, 88, 164, 61, 176, 16, 2, 62, 83, 196, 176, 190, 27, 116, 58, 63, 106, 74, 37, 191, 200, 116, 4, 63, 121, 231, 38, 63, 205, 71, 170, 62, 229, 31, 182, 189, 85, 78, 82, 191, 39, 69, 31, 190, 79, 203, 104, 190, 9, 5, 208, 191, 59, 233, 215, 190, 2, 154, 186, 62, 194, 19, 109, 63, 232, 169, 160, 61, 90, 183, 66, 63, 18, 39, 134, 190, 36, 195, 56, 191, 235, 205, 246, 62, 68, 104, 121, 191, 157, 52, 22, 62, 135, 31, 253, 62, 48, 248, 26, 191, 251, 79, 205, 62, 109, 235, 207, 190, 95, 23, 186, 63, 18, 236, 244, 62, 196, 248, 42, 191, 150, 177, 227, 190, 41, 194, 55, 60, 28, 129, 222, 190, 89, 190, 141, 63, 25, 76, 89, 62, 78, 29, 36, 190, 128, 115, 204, 190, 127, 100, 59, 191, 64, 196, 42, 61, 63, 62, 71, 63, 95, 79, 92, 190, 146, 152, 95, 190, 204, 157, 106, 191, 186, 86, 33, 191, 70, 96, 248, 190, 109, 13, 136, 191, 169, 75, 51, 190, 76, 170, 52, 191, 77, 224, 48, 62, 220, 66, 42, 190, 41, 63, 176, 190, 40, 125, 144, 63, 84, 52, 119, 62, 38, 195, 15, 191, 135, 232, 25, 190, 123, 118, 215, 62, 251, 147, 40, 63, 66, 91, 108, 62, 32, 74, 17, 62, 223, 48, 165, 62, 245, 115, 132, 191, 63, 107, 151, 190, 121, 166, 141, 190, 171, 4, 73, 190, 73, 30, 4, 191, 162, 213, 29, 191, 243, 135, 209, 62, 183, 182, 36, 62, 43, 201, 247, 62, 88, 71, 235, 190, 9, 9, 221, 62, 187, 140, 120, 62, 164, 60, 16, 191, 162, 159, 0, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 236, 52, 191, 202, 164, 197, 62, 215, 221, 221, 190, 79, 188, 79, 62, 189, 174, 97, 63, 79, 10, 178, 62, 202, 255, 38, 190, 136, 177, 84, 62, 33, 247, 3, 191, 145, 33, 35, 191, 163, 236, 158, 62, 112, 146, 201, 190, 239, 70, 203, 62, 206, 224, 130, 190, 120, 154, 110, 62, 125, 158, 166, 62, 35, 135, 146, 61, 73, 48, 224, 62, 138, 215, 49, 63, 117, 41, 109, 190, 152, 252, 207, 189, 244, 154, 162, 190, 142, 18, 244, 62, 215, 253, 25, 191, 148, 38, 209, 188, 196, 10, 174, 190, 32, 122, 242, 189, 212, 11, 10, 63, 255, 118, 151, 62, 189, 120, 62, 63, 47, 63, 22, 63, 43, 45, 192, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 32, 43, 60, 121, 205, 187, 61, 219, 199, 243, 190, 243, 242, 87, 189, 105, 251, 151, 190, 201, 141, 165, 61, 16, 55, 55, 61, 16, 164, 227, 189, 116, 147, 191, 189, 49, 151, 7, 62, 58, 113, 182, 189, 133, 51, 18, 190, 28, 40, 254, 190, 87, 57, 145, 62, 207, 162, 215, 61, 63, 92, 162, 62, 51, 79, 31, 62, 95, 146, 52, 191, 14, 120, 57, 191, 17, 174, 189, 61, 20, 110, 83, 190, 40, 167, 243, 61, 130, 170, 59, 190, 44, 83, 213, 190, 2, 235, 124, 190, 145, 162, 193, 61, 15, 209, 93, 190, 125, 24, 5, 62, 8, 40, 63, 190, 124, 155, 134, 190, 54, 34, 110, 62, 253, 67, 59, 62, 80, 70, 207, 61, 238, 255, 171, 62, 23, 145, 49, 61, 189, 218, 47, 62, 242, 4, 2, 189, 47, 164, 205, 189, 40, 125, 208, 190, 59, 101, 238, 61, 135, 53, 182, 190, 85, 223, 96, 190, 244, 196, 99, 62, 254, 3, 220, 62, 115, 177, 145, 190, 157, 98, 3, 62, 31, 233, 163, 62, 32, 65, 147, 62, 85, 42, 239, 60, 179, 22, 217, 61, 201, 43, 240, 189, 15, 153, 27, 190, 253, 87, 251, 189, 172, 181, 52, 190, 37, 216, 25, 190, 38, 203, 29, 191, 168, 58, 76, 190, 124, 220, 43, 190, 128, 118, 3, 63, 179, 80, 179, 189, 159, 177, 90, 190, 8, 115, 41, 189, 78, 207, 65, 62, 70, 205, 56, 61, 35, 109, 113, 61, 8, 117, 206, 61, 104, 151, 110, 191, 171, 163, 87, 62, 147, 51, 136, 189, 34, 161, 38, 62, 249, 131, 20, 189, 238, 240, 80, 61, 2, 247, 201, 190, 7, 215, 46, 60, 46, 111, 24, 62, 151, 196, 24, 191, 99, 39, 123, 190, 227, 107, 29, 63, 41, 224, 107, 62, 136, 252, 22, 62, 203, 189, 51, 62, 208, 58, 15, 62, 211, 79, 24, 190, 88, 141, 22, 190, 6, 129, 110, 59, 183, 112, 142, 190, 157, 89, 0, 62, 201, 176, 160, 62, 49, 135, 142, 62, 244, 97, 35, 190, 212, 101, 36, 190, 241, 187, 138, 62, 226, 240, 39, 62, 152, 86, 102, 189, 88, 148, 132, 190, 70, 183, 8, 63, 92, 184, 14, 62, 110, 194, 10, 190, 190, 143, 128, 189, 204, 4, 65, 60, 252, 34, 64, 62, 177, 172, 15, 61, 234, 103, 167, 59, 204, 225, 186, 61, 247, 168, 138, 188, 21, 221, 11, 190, 190, 46, 100, 191, 235, 35, 19, 190, 241, 52, 193, 62, 125, 6, 43, 62, 99, 126, 22, 189, 213, 35, 87, 62, 117, 97, 184, 61, 38, 136, 88, 189, 136, 242, 204, 62, 219, 98, 189, 60, 196, 157, 73, 61, 71, 188, 46, 189, 19, 100, 127, 191, 84, 16, 205, 190, 166, 59, 240, 189, 184, 205, 23, 190, 203, 185, 77, 62, 177, 20, 111, 190, 190, 168, 163, 189, 13, 178, 0, 62, 231, 6, 158, 62, 209, 66, 47, 62, 127, 147, 23, 60, 17, 85, 29, 190, 164, 128, 170, 59, 228, 14, 193, 61, 169, 131, 55, 190, 167, 96, 220, 189, 182, 226, 229, 189, 42, 111, 15, 189, 172, 220, 158, 61, 88, 242, 234, 61, 233, 247, 143, 61, 53, 241, 190, 61, 7, 64, 79, 188, 0, 160, 190, 61, 3, 149, 9, 190, 34, 144, 133, 189, 175, 141, 45, 61, 54, 61, 19, 190, 150, 200, 30, 190, 125, 213, 102, 189, 12, 46, 125, 188, 229, 40, 182, 189, 217, 117, 180, 189, 235, 80, 3, 187, 208, 78, 247, 189, 133, 56, 184, 61, 7, 125, 9, 190, 70, 101, 255, 61, 173, 75, 25, 61, 72, 179, 22, 60, 61, 87, 135, 61, 119, 191, 216, 187, 169, 22, 134, 190, 227, 147, 146, 61, 234, 102, 152, 61, 133, 233, 229, 190, 242, 213, 129, 62, 206, 148, 82, 187, 137, 193, 248, 61, 36, 16, 81, 190, 66, 8, 64, 62, 23, 196, 2, 191, 217, 132, 156, 187, 239, 101, 28, 62, 227, 48, 163, 62, 92, 125, 214, 190, 32, 57, 239, 190, 166, 183, 190, 190, 248, 212, 163, 190, 125, 11, 140, 62, 105, 100, 48, 62, 101, 225, 89, 61, 65, 117, 143, 60, 16, 19, 59, 61, 32, 11, 140, 189, 85, 220, 43, 62, 29, 63, 132, 190, 9, 70, 201, 61, 83, 47, 8, 62, 199, 77, 124, 62, 86, 168, 134, 62, 55, 143, 91, 62, 231, 150, 30, 62, 117, 198, 235, 190, 117, 196, 95, 61, 202, 143, 223, 61, 109, 66, 244, 61, 162, 149, 12, 191, 102, 37, 32, 62, 207, 22, 124, 62, 41, 201, 10, 190, 13, 252, 129, 190, 141, 175, 24, 62, 37, 104, 185, 189, 2, 58, 157, 61, 94, 127, 76, 62, 125, 164, 37, 62, 216, 11, 183, 189, 83, 228, 46, 191, 68, 125, 145, 190, 174, 208, 209, 191, 236, 73, 103, 62, 252, 141, 206, 188, 49, 237, 71, 62, 124, 242, 61, 62, 82, 73, 101, 62, 12, 112, 71, 62, 235, 76, 0, 190, 189, 194, 152, 191, 241, 18, 198, 62, 245, 242, 177, 190, 161, 113, 32, 62, 103, 67, 188, 61, 210, 203, 62, 62, 224, 108, 239, 61, 166, 17, 161, 190, 68, 14, 36, 190, 125, 180, 73, 61, 227, 72, 146, 191, 11, 125, 116, 61, 146, 212, 193, 61, 26, 7, 96, 190, 58, 234, 100, 191, 185, 77, 237, 61, 78, 121, 193, 190, 47, 25, 185, 190, 22, 214, 181, 62, 246, 30, 49, 191, 147, 211, 159, 189, 118, 24, 85, 61, 243, 79, 37, 62, 155, 108, 47, 189, 211, 222, 56, 60, 115, 86, 40, 62, 188, 224, 105, 189, 187, 104, 70, 190, 21, 46, 182, 190, 96, 59, 13, 191, 161, 210, 193, 188, 117, 89, 229, 62, 39, 111, 34, 61, 87, 89, 98, 190, 73, 175, 105, 191, 130, 108, 244, 61, 73, 68, 134, 190, 212, 239, 148, 62, 55, 161, 74, 188, 178, 112, 61, 190, 129, 177, 158, 189, 100, 17, 37, 190, 226, 190, 148, 189, 96, 170, 212, 61, 234, 149, 142, 189, 241, 170, 97, 61, 173, 179, 205, 189, 123, 99, 212, 185, 108, 116, 22, 62, 48, 14, 174, 189, 233, 241, 164, 188, 66, 46, 255, 189, 41, 74, 98, 190, 73, 55, 22, 190, 238, 178, 17, 62, 81, 45, 212, 188, 160, 19, 172, 189, 245, 48, 137, 189, 222, 54, 50, 189, 44, 203, 125, 189, 58, 99, 121, 189, 144, 37, 183, 188, 6, 201, 127, 189, 200, 145, 39, 190, 66, 178, 218, 61, 63, 118, 24, 190, 149, 231, 127, 61, 181, 52, 41, 190, 159, 244, 86, 188, 234, 206, 42, 60, 204, 240, 170, 189, 231, 232, 217, 189, 84, 154, 145, 190, 176, 53, 42, 188, 240, 129, 126, 191, 133, 246, 230, 61, 216, 22, 215, 61, 34, 16, 217, 189, 234, 190, 72, 190, 124, 154, 199, 60, 16, 178, 121, 190, 227, 23, 168, 190, 104, 250, 127, 62, 156, 184, 48, 191, 95, 94, 47, 61, 238, 53, 169, 190, 143, 254, 234, 58, 36, 89, 171, 60, 33, 86, 87, 60, 197, 157, 82, 189, 132, 235, 124, 62, 69, 249, 98, 190, 21, 138, 166, 62, 214, 110, 26, 191, 15, 6, 5, 187, 84, 182, 222, 62, 163, 77, 158, 61, 220, 177, 214, 189, 25, 100, 29, 191, 220, 185, 65, 190, 52, 2, 202, 61, 103, 56, 224, 61, 142, 233, 70, 61, 108, 149, 80, 190, 253, 67, 139, 189, 5, 87, 1, 62, 117, 17, 129, 61, 116, 63, 156, 189, 99, 91, 123, 62, 240, 213, 244, 61, 79, 186, 138, 60, 50, 28, 228, 189, 203, 59, 19, 62, 182, 19, 8, 191, 202, 226, 226, 190, 58, 92, 42, 62, 6, 43, 181, 62, 186, 203, 219, 190, 122, 125, 196, 189, 110, 1, 6, 61, 73, 188, 133, 190, 241, 50, 54, 62, 58, 139, 99, 62, 182, 194, 182, 188, 89, 243, 169, 62, 176, 78, 217, 60, 118, 187, 219, 188, 14, 122, 27, 189, 118, 95, 202, 190, 176, 142, 127, 190, 197, 245, 55, 189, 63, 96, 151, 190, 26, 179, 54, 62, 112, 223, 93, 62, 159, 170, 177, 61, 72, 93, 195, 190, 166, 3, 17, 190, 85, 124, 151, 190, 231, 164, 176, 62, 7, 50, 38, 190, 110, 196, 223, 62, 124, 130, 57, 189, 73, 43, 75, 189, 118, 238, 164, 190, 14, 196, 136, 61, 240, 149, 5, 61, 49, 232, 143, 62, 180, 159, 223, 189, 184, 77, 78, 62, 146, 185, 46, 191, 45, 23, 172, 61, 62, 202, 74, 189, 205, 157, 74, 190, 165, 5, 108, 62, 160, 24, 111, 62, 247, 170, 157, 61, 126, 14, 178, 62, 76, 114, 181, 61, 121, 69, 94, 62, 59, 176, 16, 62, 92, 124, 74, 62, 143, 83, 86, 191, 186, 92, 135, 60, 155, 183, 85, 189, 80, 55, 118, 62, 76, 159, 117, 62, 237, 160, 133, 190, 60, 172, 234, 190, 219, 247, 46, 190, 27, 19, 18, 190, 189, 177, 0, 190, 211, 77, 29, 190, 50, 44, 0, 62, 158, 111, 239, 61, 187, 219, 126, 189, 60, 218, 81, 190, 204, 115, 38, 189, 176, 238, 150, 187, 108, 234, 22, 62, 89, 137, 64, 190, 89, 150, 137, 189, 100, 190, 49, 61, 61, 188, 0, 62, 38, 51, 193, 189, 162, 152, 164, 188, 166, 112, 14, 190, 7, 141, 166, 61, 100, 133, 237, 189, 186, 254, 29, 190, 225, 3, 62, 61, 197, 131, 197, 61, 122, 109, 21, 188, 115, 248, 138, 60, 250, 59, 42, 62, 21, 71, 26, 190, 4, 95, 153, 61, 251, 115, 225, 189, 250, 171, 70, 190, 205, 18, 164, 60, 253, 31, 230, 189, 100, 137, 164, 189, 54, 61, 105, 189, 41, 133, 210, 60, 155, 184, 6, 190, 203, 225, 135, 189, 183, 242, 103, 188, 11, 104, 158, 59, 67, 123, 141, 189, 34, 231, 152, 187, 108, 63, 130, 61, 55, 188, 187, 61, 12, 141, 3, 190, 200, 16, 217, 187, 31, 221, 12, 61, 14, 81, 107, 189, 27, 8, 96, 188, 22, 51, 194, 187, 253, 90, 195, 61, 30, 54, 48, 190, 14, 27, 217, 189, 151, 196, 6, 190, 56, 193, 2, 190, 42, 187, 164, 188, 97, 101, 236, 60, 170, 247, 156, 189, 113, 231, 40, 190, 197, 85, 204, 188, 76, 237, 190, 61, 116, 113, 201, 189, 10, 70, 130, 61, 88, 54, 75, 189, 59, 0, 32, 190, 32, 198, 132, 190, 227, 21, 119, 62, 10, 231, 44, 191, 193, 14, 27, 61, 251, 9, 54, 62, 255, 3, 8, 190, 165, 5, 9, 191, 165, 226, 132, 61, 200, 205, 225, 190, 158, 165, 232, 190, 50, 114, 4, 63, 205, 247, 167, 190, 254, 22, 113, 60, 2, 122, 5, 63, 218, 35, 121, 61, 143, 112, 119, 62, 90, 18, 179, 60, 212, 9, 125, 62, 83, 68, 166, 61, 235, 172, 80, 191, 206, 122, 36, 191, 82, 56, 51, 191, 52, 194, 101, 62, 121, 158, 115, 62, 245, 107, 63, 61, 36, 237, 33, 189, 153, 141, 91, 191, 48, 248, 176, 62, 27, 119, 191, 190, 50, 125, 5, 190, 223, 245, 151, 190, 85, 102, 165, 190, 47, 119, 142, 62, 47, 125, 143, 189, 147, 145, 46, 62, 51, 105, 172, 61, 199, 147, 206, 189, 6, 161, 77, 189, 185, 71, 114, 62, 195, 57, 52, 190, 60, 210, 169, 61, 69, 191, 74, 62, 192, 178, 72, 190, 60, 80, 131, 62, 98, 194, 36, 62, 92, 168, 255, 60, 151, 229, 114, 188, 10, 50, 231, 60, 27, 2, 35, 62, 223, 21, 175, 190, 117, 155, 43, 190, 4, 67, 4, 189, 7, 24, 81, 62, 124, 63, 229, 187, 200, 161, 188, 190, 76, 193, 20, 61, 105, 40, 246, 61, 68, 92, 72, 189, 62, 166, 124, 61, 134, 212, 88, 189, 91, 7, 69, 62, 39, 146, 9, 61, 36, 132, 59, 62, 17, 59, 73, 61, 109, 203, 196, 61, 176, 211, 29, 190, 108, 120, 164, 61, 193, 139, 242, 189, 113, 223, 60, 190, 30, 232, 16, 61, 121, 220, 84, 190, 10, 220, 38, 62, 238, 176, 7, 190, 48, 108, 160, 61, 191, 176, 210, 61, 223, 135, 163, 61, 73, 9, 7, 190, 219, 201, 155, 188, 199, 216, 160, 184, 232, 157, 146, 189, 16, 53, 24, 190, 117, 2, 245, 189, 88, 225, 27, 190, 104, 148, 27, 61, 3, 12, 167, 61, 98, 150, 214, 60, 124, 170, 180, 189, 54, 37, 226, 189, 132, 112, 172, 61, 245, 191, 2, 62, 212, 169, 194, 188, 239, 245, 118, 61, 133, 63, 92, 61, 49, 158, 3, 60, 106, 125, 234, 61, 59, 194, 81, 190, 235, 61, 35, 189, 68, 228, 16, 190, 244, 128, 29, 191, 224, 23, 251, 61, 185, 127, 106, 62, 185, 105, 13, 190, 59, 75, 193, 190, 252, 229, 252, 61, 17, 195, 234, 190, 176, 99, 122, 62, 82, 103, 50, 60, 11, 31, 26, 191, 191, 78, 138, 62, 10, 89, 35, 61, 227, 133, 175, 189, 222, 248, 46, 62, 180, 113, 77, 62, 188, 157, 40, 189, 44, 41, 92, 62, 174, 250, 140, 190, 149, 224, 84, 190, 65, 64, 185, 190, 219, 154, 19, 62, 14, 157, 174, 62, 249, 164, 152, 62, 30, 107, 58, 60, 145, 12, 145, 190, 123, 232, 68, 190, 93, 67, 97, 190, 87, 55, 178, 61, 160, 130, 24, 190, 112, 232, 207, 189, 137, 72, 211, 189, 9, 129, 10, 190, 156, 62, 119, 191, 48, 102, 216, 189, 156, 145, 139, 62, 101, 229, 140, 190, 31, 84, 224, 60, 180, 197, 13, 62, 145, 64, 7, 61, 240, 154, 181, 190, 172, 223, 36, 189, 238, 197, 106, 191, 44, 215, 189, 62, 134, 3, 155, 61, 19, 115, 176, 190, 206, 131, 202, 189, 166, 177, 19, 62, 56, 47, 59, 60, 172, 181, 109, 62, 158, 217, 168, 190, 209, 97, 123, 61, 150, 141, 3, 191, 23, 241, 35, 62, 232, 112, 48, 62, 173, 200, 113, 62, 100, 142, 148, 189, 129, 121, 82, 191, 90, 22, 166, 190, 27, 22, 120, 190, 234, 32, 157, 62, 43, 226, 149, 189, 173, 177, 69, 189, 205, 80, 32, 60, 37, 92, 129, 61, 214, 152, 95, 62, 41, 15, 102, 190, 133, 151, 23, 62, 83, 215, 159, 61, 116, 244, 222, 61, 149, 48, 21, 190, 10, 169, 57, 62, 50, 212, 94, 189, 150, 11, 190, 59, 79, 129, 254, 61, 27, 38, 134, 62, 203, 120, 204, 190, 156, 190, 187, 189, 123, 17, 14, 188, 247, 156, 86, 189, 81, 152, 112, 62, 210, 134, 115, 62, 168, 135, 73, 62, 184, 12, 85, 189, 171, 210, 118, 189, 182, 245, 41, 61, 73, 207, 99, 61, 207, 158, 147, 189, 109, 2, 26, 61, 148, 235, 25, 62, 48, 183, 89, 60, 193, 153, 145, 189, 12, 111, 80, 61, 63, 148, 135, 62, 133, 40, 227, 190, 28, 145, 25, 191, 237, 128, 201, 61, 224, 207, 151, 191, 219, 79, 70, 189, 130, 121, 166, 61, 8, 148, 136, 190, 48, 101, 26, 191, 149, 164, 50, 188, 244, 93, 16, 191, 253, 253, 54, 191, 128, 215, 141, 62, 254, 219, 39, 191, 70, 231, 136, 190, 105, 175, 150, 190, 34, 25, 226, 62, 242, 92, 51, 62, 32, 64, 251, 188, 158, 149, 187, 61, 38, 152, 199, 61, 155, 216, 195, 190, 184, 233, 29, 191, 217, 20, 113, 191, 6, 182, 166, 62, 4, 157, 28, 62, 0, 111, 75, 62, 21, 212, 182, 189, 60, 49, 109, 191, 228, 122, 165, 62, 76, 215, 163, 190, 182, 254, 135, 61, 221, 126, 46, 190, 246, 94, 254, 190, 109, 105, 20, 62, 40, 34, 25, 62, 69, 147, 20, 62, 174, 160, 69, 62, 61, 85, 43, 190, 7, 103, 8, 190, 91, 20, 27, 61, 194, 191, 206, 61, 182, 250, 3, 62, 94, 101, 227, 188, 131, 106, 248, 190, 214, 1, 19, 62, 255, 142, 247, 61, 83, 17, 220, 62, 187, 113, 10, 62, 37, 96, 110, 189, 151, 115, 59, 188, 26, 33, 237, 190, 47, 32, 213, 189, 232, 192, 19, 58, 217, 178, 229, 188, 102, 222, 121, 61, 178, 75, 0, 191, 214, 86, 49, 191, 100, 90, 146, 61, 64, 81, 224, 61, 76, 104, 201, 61, 233, 187, 14, 190, 236, 146, 199, 189, 67, 216, 185, 189, 92, 198, 42, 62, 116, 244, 66, 62, 97, 208, 172, 61, 93, 98, 236, 189, 0, 100, 6, 189, 243, 14, 111, 190, 107, 209, 31, 61, 84, 136, 39, 62, 97, 164, 21, 60, 83, 20, 248, 188, 36, 254, 54, 62, 70, 74, 184, 189, 13, 230, 236, 190, 43, 160, 238, 189, 185, 87, 185, 62, 170, 91, 218, 190, 11, 170, 164, 190, 189, 56, 254, 189, 253, 101, 227, 190, 169, 163, 70, 61, 101, 208, 223, 61, 208, 82, 62, 62, 213, 148, 253, 62, 227, 14, 98, 62, 232, 75, 170, 190, 15, 3, 105, 62, 66, 235, 152, 190, 99, 195, 187, 189, 192, 210, 28, 62, 51, 1, 27, 190, 242, 67, 187, 61, 192, 193, 138, 62, 24, 195, 252, 61, 218, 202, 31, 191, 106, 230, 243, 61, 22, 144, 90, 61, 92, 192, 153, 187, 31, 168, 234, 190, 94, 2, 10, 62, 164, 77, 18, 62, 20, 136, 9, 189, 35, 129, 185, 188, 17, 129, 218, 61, 63, 99, 225, 190, 122, 208, 33, 189, 36, 74, 98, 61, 175, 244, 207, 62, 56, 32, 240, 190, 239, 79, 140, 190, 9, 57, 209, 190, 60, 176, 230, 190, 154, 130, 211, 62, 53, 70, 98, 62, 167, 31, 189, 61, 64, 137, 55, 188, 109, 11, 113, 62, 120, 192, 139, 61, 80, 84, 57, 189, 187, 232, 217, 190, 175, 84, 2, 189, 51, 61, 46, 62, 90, 240, 148, 61, 26, 232, 6, 62, 125, 144, 216, 62, 76, 101, 237, 61, 214, 34, 28, 191, 120, 21, 56, 189, 116, 77, 18, 62, 78, 104, 226, 190, 245, 65, 30, 187, 217, 141, 20, 190, 126, 95, 218, 62, 94, 141, 228, 61, 248, 57, 6, 190, 2, 235, 16, 190, 121, 252, 1, 190, 47, 102, 76, 62, 127, 72, 75, 191, 190, 14, 143, 62, 33, 22, 40, 62, 130, 116, 139, 62, 205, 248, 114, 62, 240, 153, 147, 190, 134, 173, 96, 190, 138, 222, 184, 190, 178, 122, 93, 61, 207, 239, 106, 62, 201, 235, 3, 190, 52, 71, 138, 61, 133, 0, 208, 61, 64, 12, 10, 190, 182, 126, 214, 61, 142, 108, 11, 189, 205, 202, 148, 62, 8, 49, 207, 61, 175, 79, 198, 189, 136, 63, 138, 62, 10, 8, 66, 61, 145, 131, 153, 190, 255, 100, 28, 188, 210, 137, 121, 190, 69, 42, 160, 61, 183, 202, 123, 190, 117, 118, 250, 189, 26, 81, 34, 61, 90, 98, 238, 59, 152, 198, 165, 189, 75, 138, 160, 190, 163, 203, 70, 62, 233, 242, 255, 189, 130, 159, 151, 189, 32, 230, 171, 62, 88, 199, 121, 62, 163, 169, 127, 61, 124, 202, 148, 61, 28, 2, 254, 188, 245, 59, 244, 60, 110, 102, 155, 61, 171, 170, 171, 190, 128, 175, 168, 61, 150, 245, 43, 62, 107, 226, 43, 187, 182, 231, 6, 60, 56, 161, 115, 61, 113, 85, 190, 189, 240, 13, 83, 62, 36, 248, 82, 189, 105, 63, 17, 189, 199, 38, 12, 189, 178, 226, 17, 60, 186, 54, 100, 190, 181, 166, 94, 189, 6, 9, 73, 191, 58, 67, 53, 61, 171, 81, 135, 62, 88, 113, 46, 191, 140, 32, 56, 190, 250, 133, 215, 59, 71, 75, 52, 190, 194, 232, 27, 191, 137, 225, 221, 60, 242, 16, 107, 191, 230, 208, 39, 188, 204, 166, 240, 189, 189, 169, 57, 62, 83, 72, 88, 189, 95, 171, 247, 189, 49, 223, 88, 62, 90, 5, 40, 60, 95, 199, 18, 191, 12, 122, 35, 62, 12, 228, 93, 191, 33, 186, 52, 62, 129, 163, 219, 190, 214, 153, 41, 61, 70, 87, 163, 61, 103, 75, 126, 190, 28, 108, 15, 191, 104, 119, 186, 189, 184, 209, 102, 189, 45, 216, 173, 190, 121, 89, 111, 190, 196, 97, 181, 62, 140, 153, 93, 60, 167, 64, 176, 189, 159, 171, 251, 61, 148, 67, 157, 189, 50, 56, 92, 190, 205, 75, 58, 61, 18, 64, 160, 189, 252, 210, 30, 190, 181, 10, 208, 61, 195, 143, 236, 190, 8, 103, 196, 59, 17, 19, 158, 61, 156, 132, 136, 189, 224, 71, 95, 62, 37, 178, 249, 61, 163, 170, 210, 189, 201, 11, 131, 190, 235, 44, 37, 189, 13, 146, 5, 189, 102, 147, 77, 189, 215, 37, 109, 61, 62, 183, 152, 190, 178, 65, 3, 62, 83, 251, 230, 189, 178, 51, 192, 187, 151, 160, 213, 62, 163, 144, 255, 189, 108, 193, 245, 61, 85, 49, 132, 190, 41, 154, 141, 188, 183, 7, 56, 61, 75, 13, 182, 190, 237, 101, 92, 62, 137, 37, 67, 190, 119, 150, 8, 190, 36, 220, 128, 191, 48, 227, 11, 62, 231, 155, 247, 61, 38, 66, 215, 61, 141, 3, 140, 189, 218, 62, 62, 191, 216, 64, 106, 61, 172, 141, 28, 190, 156, 104, 16, 190, 152, 62, 172, 62, 154, 248, 19, 62, 12, 204, 136, 62, 158, 58, 20, 190, 89, 119, 9, 190, 205, 101, 18, 191, 24, 187, 95, 61, 186, 55, 73, 190, 64, 152, 236, 189, 184, 191, 190, 189, 87, 71, 75, 61, 57, 103, 128, 190, 53, 228, 205, 61, 120, 154, 252, 61, 131, 62, 182, 62, 60, 121, 74, 189, 131, 255, 160, 191, 216, 123, 60, 62, 111, 115, 72, 62, 31, 149, 42, 190, 204, 12, 141, 62, 110, 190, 61, 188, 28, 96, 158, 189, 36, 54, 75, 62, 88, 59, 23, 189, 179, 177, 200, 61, 210, 240, 53, 61, 119, 28, 179, 61, 33, 18, 12, 191, 69, 122, 198, 61, 246, 178, 78, 62, 12, 123, 203, 62, 3, 216, 7, 191, 9, 182, 93, 61, 212, 144, 72, 190, 45, 42, 148, 190, 191, 101, 31, 62, 191, 243, 50, 62, 34, 122, 117, 61, 188, 142, 136, 62, 183, 66, 164, 187, 129, 85, 54, 62, 24, 251, 148, 61, 227, 127, 234, 190, 202, 136, 217, 190, 255, 124, 182, 61, 220, 68, 151, 189, 233, 96, 38, 60, 137, 189, 143, 62, 96, 0, 36, 61, 162, 222, 95, 190, 35, 162, 71, 60, 118, 220, 154, 61, 98, 155, 16, 191, 81, 16, 153, 188, 54, 157, 64, 191, 178, 156, 118, 62, 53, 176, 210, 61, 71, 117, 0, 62, 24, 198, 37, 188, 34, 203, 37, 61, 247, 210, 37, 190, 8, 48, 3, 191, 240, 52, 2, 190, 107, 173, 0, 62, 126, 182, 103, 187, 157, 246, 60, 62, 249, 44, 100, 190, 242, 119, 4, 191, 150, 113, 181, 190, 123, 134, 27, 190, 176, 133, 157, 62, 33, 166, 64, 190, 247, 204, 93, 190, 184, 0, 172, 62, 226, 218, 47, 190, 44, 237, 203, 188, 13, 230, 69, 190, 206, 171, 195, 62, 146, 27, 185, 61, 49, 170, 2, 191, 158, 230, 70, 62, 131, 211, 155, 189, 102, 157, 11, 189, 199, 152, 187, 189, 216, 65, 152, 62, 215, 206, 200, 189, 20, 58, 129, 190, 30, 84, 185, 187, 77, 75, 97, 62, 208, 2, 41, 190, 75, 132, 71, 62, 27, 215, 54, 62, 129, 139, 135, 190, 164, 62, 230, 187, 168, 98, 232, 61, 223, 123, 20, 62, 89, 178, 62, 62, 55, 255, 199, 190, 127, 9, 105, 189, 43, 80, 181, 187, 0, 0, 172, 60, 11, 149, 226, 60, 187, 229, 59, 62, 238, 228, 193, 61, 88, 254, 214, 61, 206, 51, 14, 62, 145, 114, 123, 62, 17, 155, 51, 190, 182, 71, 100, 62, 57, 234, 232, 189, 28, 65, 203, 187, 81, 148, 207, 189, 184, 142, 171, 187, 38, 176, 58, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 231, 132, 188, 135, 47, 235, 61, 194, 131, 236, 188, 209, 221, 217, 61, 81, 193, 31, 189, 208, 65, 163, 61, 90, 161, 74, 188, 140, 159, 11, 62, 13, 255, 41, 61, 248, 4, 34, 62, 34, 150, 161, 62, 188, 68, 15, 62, 45, 225, 48, 190, 160, 70, 197, 60, 62, 181, 109, 62, 192, 214, 57, 190, 242, 112, 169, 189, 188, 167, 11, 188, 57, 245, 153, 189, 141, 52, 198, 62, 90, 216, 69, 62, 116, 137, 143, 189, 76, 77, 106, 61, 225, 194, 129, 62, 123, 200, 162, 60, 201, 188, 228, 61, 228, 233, 45, 60, 100, 217, 60, 190, 215, 41, 31, 62, 245, 223, 212, 62, 194, 215, 255, 189, 95, 172, 146, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 78, 62, 191, 188, 227, 190, 190, 135, 209, 180, 62, 119, 90, 234, 190, 60, 109, 182, 189, 210, 245, 158, 190, 90, 168, 215, 190, 139, 68, 191, 62, 214, 100, 117, 61, 227, 231, 67, 62, 106, 232, 10, 191, 188, 113, 93, 63, 107, 183, 40, 188, 84, 150, 37, 62, 233, 199, 76, 63, 173, 147, 43, 188, 218, 254, 16, 190, 210, 48, 146, 62, 64, 19, 225, 62, 5, 192, 31, 190, 183, 249, 109, 63, 59, 2, 161, 190, 31, 212, 9, 191, 28, 132, 53, 191, 36, 96, 160, 62, 162, 206, 163, 61, 32, 252, 145, 190, 79, 220, 215, 189, 197, 29, 45, 63, 229, 180, 190, 190, 61, 4, 235, 62, 139, 109, 132, 62, 116, 156, 237, 62, 50, 158, 140, 189, 178, 73, 9, 62, 199, 230, 40, 190, 133, 247, 253, 189, 137, 139, 167, 188, 148, 32, 135, 61, 84, 30, 52, 189, 142, 52, 21, 62, 147, 111, 19, 190, 208, 247, 162, 189, 250, 179, 161, 62, 223, 158, 150, 189, 32, 15, 212, 189, 204, 185, 13, 62, 160, 105, 117, 62, 19, 153, 213, 189, 95, 106, 49, 62, 108, 12, 59, 189, 1, 199, 78, 190, 108, 19, 101, 62, 82, 179, 95, 189, 138, 130, 108, 62, 106, 197, 18, 190, 245, 252, 192, 190, 114, 221, 140, 189, 145, 4, 184, 190, 11, 214, 165, 62, 195, 167, 1, 190, 218, 110, 37, 190, 93, 243, 79, 62, 31, 86, 41, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 197, 206, 188, 106, 100, 210, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {135, 93, 135, 63, 126, 201, 95, 191, 20, 19, 137, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {137, 140, 22, 64, 153, 249, 104, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0042/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}