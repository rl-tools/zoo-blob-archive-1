// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 41, 68, 63, 157, 71, 140, 62, 144, 47, 135, 62, 121, 25, 182, 62, 178, 142, 97, 191, 18, 69, 6, 190, 107, 194, 43, 190, 42, 139, 166, 191, 91, 57, 107, 190, 145, 184, 20, 190, 45, 72, 220, 190, 230, 199, 17, 63, 78, 85, 59, 191, 188, 197, 11, 63, 148, 196, 50, 62, 32, 98, 151, 62, 19, 29, 58, 191, 158, 134, 8, 191, 86, 63, 158, 188, 254, 207, 37, 63, 53, 132, 2, 191, 22, 225, 108, 191, 114, 161, 210, 62, 71, 20, 204, 188, 106, 114, 55, 191, 56, 45, 90, 63, 110, 6, 22, 191, 146, 64, 29, 63, 139, 90, 128, 63, 230, 129, 178, 62, 29, 235, 114, 189, 254, 139, 126, 191, 37, 19, 98, 190, 66, 181, 64, 190, 225, 26, 241, 191, 152, 215, 172, 190, 13, 94, 187, 62, 102, 73, 134, 63, 150, 19, 170, 61, 176, 45, 60, 63, 121, 11, 26, 190, 17, 118, 66, 191, 99, 123, 11, 63, 159, 194, 143, 191, 206, 79, 65, 61, 105, 133, 250, 62, 110, 255, 11, 191, 27, 242, 124, 62, 108, 169, 10, 191, 65, 50, 221, 63, 115, 16, 213, 62, 151, 213, 86, 191, 210, 65, 246, 190, 104, 56, 70, 61, 50, 38, 214, 190, 155, 252, 157, 63, 74, 76, 130, 62, 181, 62, 57, 190, 247, 225, 35, 191, 24, 236, 25, 191, 77, 110, 162, 189, 96, 247, 102, 63, 159, 148, 35, 190, 156, 152, 155, 190, 131, 50, 136, 191, 243, 167, 17, 191, 170, 210, 4, 191, 140, 89, 155, 191, 242, 236, 73, 190, 58, 65, 93, 191, 4, 105, 136, 61, 236, 207, 170, 189, 141, 89, 207, 190, 207, 96, 171, 63, 110, 243, 129, 62, 125, 162, 37, 191, 219, 173, 3, 63, 165, 217, 2, 63, 42, 121, 39, 63, 48, 146, 150, 62, 135, 76, 24, 62, 149, 57, 149, 62, 34, 48, 165, 191, 83, 198, 118, 190, 0, 60, 224, 190, 211, 186, 3, 61, 35, 89, 235, 190, 245, 177, 31, 191, 30, 30, 11, 63, 10, 205, 37, 62, 48, 185, 233, 62, 65, 4, 6, 191, 188, 24, 211, 62, 95, 129, 168, 62, 211, 200, 16, 191, 202, 187, 251, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 203, 52, 191, 82, 175, 61, 62, 85, 25, 227, 190, 120, 245, 145, 62, 185, 81, 94, 63, 29, 230, 4, 62, 147, 125, 150, 190, 52, 103, 147, 62, 60, 101, 10, 191, 164, 97, 17, 191, 161, 5, 149, 62, 130, 39, 241, 190, 207, 135, 174, 62, 37, 207, 166, 190, 186, 16, 32, 62, 58, 222, 208, 62, 91, 178, 2, 189, 21, 145, 146, 62, 74, 12, 48, 63, 11, 68, 3, 191, 70, 42, 49, 190, 156, 190, 169, 190, 59, 129, 235, 62, 135, 53, 21, 191, 1, 227, 253, 189, 130, 113, 105, 60, 49, 157, 37, 190, 21, 116, 240, 62, 239, 93, 118, 62, 80, 191, 56, 63, 237, 39, 0, 63, 96, 249, 205, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 222, 229, 189, 0, 190, 250, 61, 235, 15, 13, 191, 185, 217, 48, 190, 27, 241, 239, 190, 245, 177, 251, 61, 105, 245, 203, 189, 30, 102, 27, 190, 248, 4, 71, 190, 58, 167, 69, 61, 186, 127, 9, 61, 227, 120, 94, 189, 119, 146, 22, 191, 166, 215, 132, 62, 93, 57, 60, 62, 169, 195, 179, 62, 6, 249, 99, 62, 232, 155, 25, 191, 140, 86, 85, 191, 169, 82, 39, 188, 254, 193, 234, 189, 52, 208, 170, 61, 233, 134, 181, 189, 133, 230, 106, 190, 149, 113, 16, 191, 165, 76, 180, 61, 227, 120, 173, 190, 33, 85, 57, 62, 63, 171, 122, 190, 43, 180, 235, 190, 32, 0, 91, 62, 50, 225, 6, 62, 1, 189, 60, 62, 149, 190, 205, 62, 17, 15, 93, 58, 195, 109, 62, 62, 205, 98, 179, 188, 149, 22, 88, 188, 58, 25, 18, 191, 168, 141, 16, 62, 187, 11, 28, 191, 71, 221, 16, 189, 26, 186, 143, 62, 80, 23, 2, 63, 159, 108, 104, 190, 16, 143, 89, 62, 25, 120, 205, 62, 108, 47, 188, 62, 1, 221, 132, 61, 162, 186, 164, 61, 220, 198, 198, 188, 220, 243, 0, 190, 176, 47, 14, 189, 231, 150, 226, 189, 231, 0, 20, 190, 57, 150, 202, 190, 59, 156, 124, 190, 114, 200, 3, 190, 255, 66, 11, 63, 146, 33, 222, 187, 33, 150, 6, 190, 188, 59, 221, 188, 178, 182, 109, 62, 21, 14, 33, 62, 118, 199, 167, 61, 140, 13, 174, 61, 179, 159, 144, 191, 30, 96, 98, 62, 254, 191, 82, 189, 81, 228, 196, 61, 181, 119, 187, 189, 161, 32, 56, 61, 133, 5, 232, 190, 139, 67, 95, 61, 6, 238, 150, 60, 227, 56, 76, 191, 175, 130, 141, 190, 244, 123, 26, 63, 208, 149, 76, 62, 97, 41, 235, 61, 247, 30, 77, 62, 157, 107, 137, 61, 54, 212, 72, 190, 21, 99, 104, 190, 251, 205, 194, 189, 109, 139, 201, 190, 164, 96, 233, 188, 133, 5, 82, 62, 142, 14, 201, 62, 35, 169, 7, 190, 173, 101, 225, 189, 2, 197, 93, 62, 241, 157, 132, 61, 183, 174, 37, 189, 105, 171, 123, 190, 213, 155, 235, 62, 33, 105, 70, 62, 84, 199, 236, 189, 14, 247, 41, 190, 26, 240, 83, 61, 144, 242, 109, 62, 144, 131, 116, 61, 34, 144, 130, 61, 237, 45, 41, 62, 237, 152, 164, 61, 53, 191, 34, 190, 206, 41, 121, 191, 135, 89, 203, 190, 102, 166, 207, 62, 213, 111, 45, 62, 103, 222, 184, 60, 148, 1, 133, 62, 107, 226, 196, 61, 73, 135, 140, 188, 206, 98, 236, 62, 2, 170, 4, 61, 185, 122, 206, 61, 20, 9, 119, 189, 220, 99, 149, 191, 43, 98, 204, 190, 192, 24, 49, 190, 44, 94, 241, 189, 73, 117, 55, 62, 168, 93, 73, 190, 37, 214, 18, 188, 200, 79, 39, 62, 83, 219, 160, 62, 95, 137, 21, 62, 127, 147, 23, 60, 17, 85, 29, 190, 164, 128, 170, 59, 228, 14, 193, 61, 169, 131, 55, 190, 167, 96, 220, 189, 182, 226, 229, 189, 42, 111, 15, 189, 172, 220, 158, 61, 88, 242, 234, 61, 233, 247, 143, 61, 53, 241, 190, 61, 7, 64, 79, 188, 0, 160, 190, 61, 3, 149, 9, 190, 34, 144, 133, 189, 175, 141, 45, 61, 54, 61, 19, 190, 150, 200, 30, 190, 125, 213, 102, 189, 12, 46, 125, 188, 229, 40, 182, 189, 217, 117, 180, 189, 235, 80, 3, 187, 208, 78, 247, 189, 133, 56, 184, 61, 7, 125, 9, 190, 70, 101, 255, 61, 173, 75, 25, 61, 72, 179, 22, 60, 61, 87, 135, 61, 119, 191, 216, 187, 153, 140, 179, 190, 204, 93, 38, 61, 219, 225, 39, 62, 119, 13, 56, 191, 169, 104, 199, 62, 225, 219, 0, 188, 203, 4, 8, 62, 0, 51, 161, 61, 132, 155, 89, 62, 53, 1, 179, 191, 180, 53, 255, 59, 144, 60, 85, 62, 68, 118, 161, 62, 208, 162, 214, 190, 105, 205, 68, 191, 195, 80, 26, 191, 148, 43, 211, 190, 139, 215, 227, 62, 221, 123, 98, 62, 157, 87, 79, 61, 176, 172, 176, 185, 23, 91, 45, 61, 51, 96, 115, 188, 112, 194, 47, 62, 246, 33, 180, 190, 30, 206, 156, 61, 85, 218, 66, 189, 162, 150, 132, 62, 62, 228, 153, 62, 69, 50, 175, 62, 108, 179, 225, 189, 92, 174, 231, 190, 117, 196, 95, 61, 125, 132, 35, 62, 58, 89, 4, 62, 111, 148, 107, 191, 230, 85, 180, 61, 56, 23, 126, 62, 118, 193, 64, 190, 192, 83, 103, 190, 94, 15, 0, 62, 122, 155, 148, 189, 120, 162, 6, 62, 215, 195, 121, 62, 103, 211, 174, 61, 67, 66, 229, 189, 185, 223, 26, 191, 138, 201, 59, 189, 240, 63, 230, 191, 112, 200, 46, 62, 242, 220, 62, 60, 78, 214, 42, 62, 13, 112, 38, 62, 209, 110, 84, 62, 27, 110, 122, 62, 197, 201, 239, 189, 90, 47, 165, 191, 21, 210, 103, 62, 89, 250, 89, 191, 103, 18, 94, 62, 35, 16, 148, 61, 127, 15, 37, 62, 197, 130, 159, 62, 231, 19, 161, 190, 134, 179, 169, 189, 192, 197, 84, 62, 219, 125, 144, 191, 141, 11, 239, 61, 163, 118, 249, 61, 164, 201, 238, 190, 123, 111, 121, 191, 13, 109, 83, 62, 221, 6, 11, 191, 131, 39, 157, 190, 250, 67, 20, 63, 215, 87, 49, 191, 193, 117, 169, 190, 247, 153, 101, 190, 109, 64, 77, 62, 181, 79, 25, 188, 22, 181, 73, 60, 149, 66, 47, 62, 45, 9, 216, 189, 52, 253, 57, 58, 218, 18, 7, 191, 94, 151, 224, 190, 152, 196, 10, 62, 45, 162, 37, 63, 248, 238, 25, 62, 223, 76, 96, 190, 190, 68, 98, 191, 22, 140, 148, 62, 95, 161, 89, 190, 91, 219, 162, 62, 214, 33, 54, 61, 196, 65, 2, 63, 129, 177, 158, 189, 100, 17, 37, 190, 226, 190, 148, 189, 96, 170, 212, 61, 234, 149, 142, 189, 241, 170, 97, 61, 173, 179, 205, 189, 123, 99, 212, 185, 108, 116, 22, 62, 48, 14, 174, 189, 233, 241, 164, 188, 66, 46, 255, 189, 41, 74, 98, 190, 73, 55, 22, 190, 238, 178, 17, 62, 81, 45, 212, 188, 160, 19, 172, 189, 245, 48, 137, 189, 222, 54, 50, 189, 44, 203, 125, 189, 58, 99, 121, 189, 144, 37, 183, 188, 6, 201, 127, 189, 200, 145, 39, 190, 66, 178, 218, 61, 63, 118, 24, 190, 149, 231, 127, 61, 181, 52, 41, 190, 159, 244, 86, 188, 234, 206, 42, 60, 204, 240, 170, 189, 231, 232, 217, 189, 15, 185, 34, 190, 127, 14, 99, 61, 184, 199, 127, 191, 81, 9, 8, 62, 129, 36, 135, 61, 4, 108, 77, 191, 188, 222, 64, 62, 93, 240, 246, 189, 195, 117, 197, 190, 7, 69, 67, 190, 76, 172, 227, 62, 17, 196, 65, 191, 73, 178, 26, 62, 39, 135, 96, 191, 129, 78, 241, 60, 112, 171, 146, 61, 255, 39, 49, 189, 179, 110, 8, 190, 190, 138, 107, 62, 187, 88, 226, 189, 69, 27, 56, 63, 130, 56, 71, 191, 157, 249, 129, 60, 26, 139, 207, 62, 114, 155, 134, 61, 141, 39, 93, 190, 159, 22, 168, 190, 200, 110, 16, 190, 141, 160, 27, 188, 80, 124, 145, 61, 107, 189, 4, 62, 124, 99, 83, 190, 49, 14, 129, 189, 149, 15, 47, 62, 231, 169, 184, 61, 6, 26, 30, 190, 209, 146, 64, 62, 214, 210, 52, 62, 73, 135, 176, 61, 102, 120, 241, 61, 39, 167, 107, 62, 65, 100, 140, 191, 219, 144, 255, 190, 66, 218, 188, 61, 117, 52, 177, 62, 181, 232, 194, 190, 255, 121, 132, 189, 179, 15, 10, 61, 141, 102, 17, 191, 111, 89, 24, 62, 107, 104, 63, 62, 72, 22, 10, 187, 5, 80, 187, 62, 232, 140, 174, 60, 76, 242, 66, 190, 83, 36, 140, 188, 101, 86, 62, 191, 103, 57, 93, 190, 44, 97, 166, 189, 137, 23, 130, 190, 10, 6, 133, 62, 242, 107, 18, 62, 102, 112, 32, 61, 45, 111, 182, 190, 76, 250, 88, 190, 65, 226, 231, 190, 255, 91, 28, 63, 185, 84, 142, 190, 177, 41, 169, 62, 50, 16, 218, 189, 45, 245, 184, 189, 211, 164, 107, 191, 78, 149, 66, 190, 245, 153, 183, 62, 35, 156, 2, 63, 193, 94, 34, 62, 199, 199, 130, 62, 98, 43, 94, 191, 165, 22, 167, 61, 58, 65, 77, 190, 100, 102, 46, 190, 248, 157, 157, 62, 207, 111, 98, 62, 252, 200, 148, 61, 223, 234, 254, 62, 205, 146, 24, 62, 42, 187, 216, 62, 33, 122, 120, 190, 238, 72, 132, 62, 120, 127, 172, 191, 4, 216, 190, 60, 69, 74, 159, 189, 133, 93, 59, 62, 4, 27, 13, 62, 196, 183, 223, 190, 137, 32, 254, 190, 219, 247, 46, 190, 161, 255, 21, 190, 162, 218, 0, 190, 236, 86, 29, 190, 50, 44, 0, 62, 223, 193, 230, 61, 187, 219, 126, 189, 60, 218, 81, 190, 204, 115, 38, 189, 176, 238, 150, 187, 18, 224, 19, 62, 236, 71, 66, 190, 209, 28, 139, 189, 185, 44, 35, 61, 243, 201, 248, 61, 249, 63, 200, 189, 162, 152, 164, 188, 224, 125, 14, 190, 7, 141, 166, 61, 250, 228, 237, 189, 186, 254, 29, 190, 242, 203, 57, 61, 22, 58, 192, 61, 122, 109, 21, 188, 115, 248, 138, 60, 250, 59, 42, 62, 118, 18, 27, 190, 173, 27, 142, 61, 160, 63, 227, 189, 250, 171, 70, 190, 238, 44, 137, 60, 226, 110, 233, 189, 100, 137, 164, 189, 54, 61, 105, 189, 41, 133, 210, 60, 155, 184, 6, 190, 203, 225, 135, 189, 183, 242, 103, 188, 11, 104, 158, 59, 67, 123, 141, 189, 34, 231, 152, 187, 108, 63, 130, 61, 55, 188, 187, 61, 12, 141, 3, 190, 200, 16, 217, 187, 31, 221, 12, 61, 14, 81, 107, 189, 27, 8, 96, 188, 22, 51, 194, 187, 253, 90, 195, 61, 30, 54, 48, 190, 14, 27, 217, 189, 151, 196, 6, 190, 56, 193, 2, 190, 42, 187, 164, 188, 97, 101, 236, 60, 170, 247, 156, 189, 113, 231, 40, 190, 197, 85, 204, 188, 76, 237, 190, 61, 116, 113, 201, 189, 10, 70, 130, 61, 88, 54, 75, 189, 59, 0, 32, 190, 93, 98, 198, 190, 254, 170, 133, 62, 166, 163, 65, 191, 226, 213, 208, 60, 108, 112, 103, 62, 176, 58, 29, 190, 201, 108, 220, 190, 143, 157, 25, 62, 176, 179, 0, 191, 120, 175, 32, 191, 176, 248, 5, 63, 41, 68, 249, 190, 237, 22, 133, 60, 89, 24, 0, 63, 132, 202, 229, 60, 142, 59, 93, 62, 130, 170, 204, 60, 20, 49, 152, 62, 179, 94, 157, 61, 109, 33, 166, 191, 96, 105, 80, 191, 97, 7, 115, 191, 117, 166, 153, 62, 21, 51, 246, 62, 193, 63, 54, 62, 209, 42, 95, 189, 103, 184, 87, 191, 193, 182, 185, 62, 97, 141, 6, 191, 112, 250, 159, 189, 79, 45, 147, 190, 177, 177, 36, 191, 117, 215, 205, 61, 150, 127, 187, 189, 228, 162, 58, 188, 99, 20, 86, 61, 26, 178, 56, 189, 114, 70, 154, 189, 120, 72, 96, 62, 180, 20, 85, 189, 82, 107, 156, 61, 50, 64, 74, 62, 139, 66, 228, 190, 146, 80, 8, 62, 137, 14, 110, 62, 116, 189, 46, 60, 178, 21, 9, 190, 251, 115, 240, 188, 135, 176, 98, 62, 83, 83, 169, 190, 246, 181, 206, 189, 211, 161, 101, 189, 218, 170, 74, 62, 94, 1, 114, 189, 79, 133, 16, 191, 180, 15, 60, 189, 155, 54, 74, 62, 167, 180, 196, 61, 184, 18, 100, 61, 38, 127, 65, 190, 23, 13, 2, 62, 190, 108, 196, 61, 181, 228, 48, 62, 128, 34, 172, 59, 109, 203, 196, 61, 154, 88, 62, 190, 74, 149, 74, 61, 193, 139, 242, 189, 113, 223, 60, 190, 193, 40, 109, 59, 121, 220, 84, 190, 10, 220, 38, 62, 238, 176, 7, 190, 48, 108, 160, 61, 34, 166, 145, 61, 122, 249, 68, 61, 73, 9, 7, 190, 21, 95, 58, 189, 30, 100, 2, 189, 240, 184, 186, 189, 16, 53, 24, 190, 158, 167, 10, 190, 88, 225, 27, 190, 175, 150, 111, 60, 3, 12, 167, 61, 94, 73, 182, 187, 169, 181, 245, 189, 54, 37, 226, 189, 132, 112, 172, 61, 245, 191, 2, 62, 212, 169, 194, 188, 43, 189, 233, 60, 115, 85, 7, 61, 49, 158, 3, 60, 199, 61, 202, 61, 20, 86, 105, 190, 104, 140, 49, 190, 18, 73, 1, 191, 32, 229, 40, 191, 172, 99, 112, 61, 10, 187, 82, 62, 120, 238, 206, 190, 125, 116, 47, 190, 240, 120, 86, 61, 134, 57, 52, 191, 40, 233, 156, 62, 51, 201, 13, 190, 181, 122, 41, 191, 72, 94, 205, 62, 34, 216, 215, 189, 105, 238, 154, 190, 17, 76, 142, 61, 91, 233, 131, 62, 26, 137, 246, 189, 187, 84, 137, 62, 98, 73, 156, 190, 57, 207, 193, 59, 58, 66, 194, 190, 234, 59, 21, 59, 219, 133, 195, 62, 221, 21, 190, 62, 8, 35, 13, 189, 72, 168, 97, 190, 81, 60, 129, 191, 223, 177, 176, 190, 168, 124, 152, 61, 67, 96, 79, 190, 163, 50, 5, 190, 87, 186, 150, 190, 92, 183, 39, 191, 47, 191, 139, 191, 197, 247, 198, 189, 155, 254, 173, 62, 140, 127, 31, 191, 6, 150, 9, 62, 12, 181, 6, 62, 177, 9, 137, 61, 182, 79, 131, 190, 1, 44, 227, 189, 166, 221, 122, 191, 127, 145, 5, 63, 80, 97, 75, 190, 70, 122, 25, 191, 223, 139, 184, 189, 93, 158, 112, 62, 200, 39, 66, 61, 133, 3, 175, 62, 88, 46, 78, 61, 40, 70, 128, 62, 109, 92, 128, 189, 7, 170, 17, 62, 103, 178, 176, 62, 29, 89, 170, 62, 218, 105, 173, 189, 23, 24, 41, 191, 12, 254, 179, 191, 152, 58, 165, 190, 144, 197, 194, 62, 247, 178, 91, 59, 113, 18, 61, 62, 19, 37, 37, 62, 137, 210, 25, 61, 62, 129, 138, 62, 5, 118, 51, 190, 202, 4, 51, 62, 198, 29, 73, 61, 64, 223, 201, 61, 200, 47, 33, 190, 126, 179, 31, 62, 201, 62, 129, 189, 166, 12, 176, 188, 11, 212, 1, 62, 212, 24, 144, 62, 240, 112, 213, 190, 194, 49, 186, 189, 176, 229, 243, 60, 216, 50, 152, 189, 190, 37, 129, 62, 202, 232, 133, 62, 173, 98, 36, 62, 110, 184, 139, 189, 189, 83, 182, 189, 254, 55, 173, 186, 81, 73, 112, 60, 194, 160, 36, 190, 35, 47, 64, 61, 15, 142, 18, 62, 203, 23, 161, 60, 33, 160, 110, 189, 219, 160, 154, 61, 228, 187, 135, 62, 133, 20, 233, 190, 38, 216, 17, 191, 18, 12, 88, 62, 222, 122, 152, 191, 51, 124, 22, 188, 61, 26, 227, 61, 47, 212, 250, 190, 149, 55, 33, 191, 128, 23, 177, 61, 176, 160, 19, 191, 170, 153, 46, 191, 116, 44, 253, 62, 96, 128, 35, 191, 232, 43, 3, 191, 192, 166, 27, 191, 135, 156, 237, 62, 61, 167, 65, 62, 229, 107, 163, 60, 150, 180, 199, 61, 229, 184, 114, 61, 19, 181, 205, 190, 212, 180, 74, 191, 71, 162, 105, 191, 218, 122, 243, 62, 20, 99, 222, 62, 221, 216, 210, 62, 160, 251, 184, 189, 8, 133, 121, 191, 251, 168, 238, 62, 183, 59, 164, 190, 152, 248, 196, 61, 244, 195, 13, 190, 114, 112, 42, 189, 155, 208, 245, 61, 251, 121, 35, 62, 190, 167, 139, 189, 17, 64, 66, 62, 133, 217, 98, 190, 148, 253, 2, 190, 165, 244, 208, 61, 218, 115, 32, 62, 138, 212, 88, 62, 255, 218, 120, 189, 151, 145, 30, 191, 254, 199, 31, 189, 91, 147, 17, 62, 110, 109, 213, 62, 41, 73, 22, 62, 95, 218, 7, 189, 21, 197, 229, 189, 190, 215, 11, 191, 85, 243, 232, 189, 0, 22, 251, 59, 96, 229, 222, 60, 229, 58, 1, 61, 217, 97, 64, 191, 59, 95, 56, 191, 138, 140, 115, 189, 185, 130, 174, 61, 223, 167, 179, 61, 122, 89, 10, 190, 145, 181, 153, 189, 49, 34, 27, 190, 136, 93, 27, 62, 166, 70, 26, 62, 101, 16, 159, 190, 120, 251, 134, 189, 72, 51, 118, 190, 71, 90, 250, 190, 228, 119, 127, 61, 174, 117, 35, 62, 16, 167, 12, 61, 198, 195, 133, 62, 168, 91, 76, 62, 247, 75, 92, 191, 89, 169, 85, 191, 17, 239, 6, 191, 110, 45, 181, 62, 166, 189, 211, 190, 106, 4, 147, 190, 76, 198, 109, 190, 85, 7, 44, 191, 89, 48, 125, 61, 42, 100, 13, 62, 105, 238, 14, 62, 232, 196, 2, 63, 91, 5, 242, 61, 215, 77, 16, 191, 164, 145, 8, 60, 39, 132, 9, 191, 154, 40, 36, 62, 247, 189, 246, 188, 98, 113, 39, 190, 167, 82, 184, 61, 104, 69, 151, 62, 170, 205, 160, 189, 72, 174, 41, 191, 31, 125, 0, 63, 71, 186, 82, 61, 9, 28, 229, 61, 207, 225, 80, 191, 201, 7, 185, 61, 17, 131, 253, 61, 195, 165, 111, 189, 161, 186, 36, 62, 236, 108, 184, 61, 164, 83, 130, 191, 137, 162, 217, 189, 61, 157, 213, 61, 48, 158, 213, 62, 214, 233, 235, 190, 169, 98, 204, 190, 204, 108, 250, 190, 111, 131, 31, 191, 28, 184, 209, 62, 73, 17, 119, 62, 203, 138, 170, 61, 246, 114, 229, 189, 196, 199, 99, 62, 105, 251, 166, 186, 63, 31, 2, 190, 183, 194, 32, 191, 76, 64, 178, 189, 160, 92, 249, 61, 6, 129, 119, 61, 230, 226, 17, 62, 92, 125, 197, 62, 39, 226, 151, 58, 151, 191, 23, 191, 130, 237, 222, 61, 87, 147, 11, 62, 5, 194, 187, 190, 3, 130, 169, 61, 21, 229, 71, 190, 11, 99, 213, 62, 30, 68, 213, 61, 157, 75, 70, 190, 249, 217, 40, 190, 194, 187, 52, 191, 119, 125, 105, 62, 98, 173, 75, 191, 231, 210, 243, 61, 148, 145, 71, 62, 156, 5, 158, 62, 4, 39, 79, 62, 222, 204, 10, 191, 102, 226, 87, 190, 152, 16, 51, 191, 109, 213, 137, 61, 37, 180, 14, 62, 180, 76, 227, 189, 94, 201, 155, 61, 142, 25, 105, 61, 215, 105, 13, 191, 199, 228, 15, 62, 220, 205, 182, 188, 79, 198, 149, 62, 181, 68, 213, 61, 173, 115, 45, 190, 178, 9, 136, 62, 245, 192, 106, 61, 106, 64, 165, 190, 141, 71, 25, 189, 57, 223, 127, 190, 211, 150, 173, 61, 130, 71, 156, 190, 156, 56, 17, 190, 87, 111, 153, 61, 80, 150, 200, 189, 89, 110, 206, 189, 80, 227, 80, 191, 77, 80, 15, 62, 182, 229, 61, 190, 93, 100, 5, 190, 189, 215, 181, 62, 210, 140, 92, 62, 116, 133, 42, 188, 159, 230, 108, 189, 221, 43, 216, 189, 63, 98, 32, 190, 122, 137, 130, 61, 247, 206, 168, 190, 186, 12, 140, 61, 29, 142, 4, 62, 242, 100, 113, 189, 115, 138, 1, 190, 47, 132, 3, 61, 204, 87, 160, 189, 251, 23, 31, 62, 253, 99, 91, 189, 153, 203, 211, 189, 207, 0, 163, 189, 59, 35, 8, 60, 66, 139, 160, 190, 24, 150, 203, 189, 56, 36, 102, 191, 20, 188, 24, 190, 231, 192, 224, 62, 239, 110, 98, 191, 7, 149, 121, 189, 129, 224, 102, 62, 101, 12, 169, 61, 155, 88, 152, 191, 78, 32, 194, 61, 188, 102, 136, 191, 125, 219, 5, 62, 156, 241, 140, 190, 231, 152, 151, 62, 98, 93, 71, 189, 25, 33, 167, 61, 174, 222, 146, 62, 65, 235, 64, 62, 74, 222, 76, 191, 219, 168, 206, 62, 21, 18, 131, 191, 179, 40, 187, 61, 16, 246, 216, 190, 178, 174, 133, 62, 60, 112, 45, 187, 169, 120, 86, 191, 2, 175, 15, 191, 98, 147, 243, 61, 148, 72, 242, 61, 147, 253, 6, 191, 250, 15, 16, 190, 232, 240, 135, 62, 248, 205, 22, 61, 167, 64, 176, 189, 37, 156, 184, 188, 183, 184, 202, 189, 252, 114, 247, 189, 132, 32, 224, 60, 104, 35, 114, 189, 148, 212, 133, 189, 72, 22, 107, 62, 161, 166, 143, 191, 2, 60, 100, 59, 99, 61, 94, 62, 103, 249, 111, 188, 235, 49, 39, 62, 205, 168, 206, 61, 122, 214, 247, 190, 164, 101, 75, 190, 250, 252, 172, 61, 196, 94, 132, 189, 55, 255, 210, 59, 215, 37, 109, 61, 146, 217, 83, 191, 178, 65, 3, 62, 3, 64, 34, 191, 8, 96, 4, 61, 237, 33, 251, 62, 150, 140, 137, 190, 219, 99, 142, 190, 171, 51, 138, 190, 195, 195, 43, 189, 26, 201, 140, 190, 246, 41, 140, 190, 95, 16, 86, 62, 185, 221, 130, 190, 199, 160, 38, 61, 101, 123, 117, 191, 148, 250, 21, 62, 193, 21, 46, 62, 120, 141, 140, 187, 245, 209, 70, 189, 6, 96, 171, 191, 237, 240, 75, 189, 117, 20, 134, 190, 146, 60, 221, 189, 65, 211, 210, 62, 120, 144, 7, 62, 244, 216, 132, 62, 225, 21, 48, 190, 67, 97, 73, 190, 46, 94, 32, 191, 75, 248, 175, 61, 169, 165, 72, 190, 248, 75, 227, 189, 228, 243, 51, 190, 107, 50, 41, 61, 208, 53, 88, 191, 81, 248, 196, 62, 178, 234, 106, 62, 55, 248, 158, 62, 148, 165, 15, 189, 216, 117, 155, 191, 83, 132, 101, 62, 90, 149, 94, 62, 90, 108, 18, 186, 110, 179, 183, 62, 194, 80, 221, 61, 98, 122, 16, 190, 217, 5, 243, 61, 8, 183, 69, 188, 240, 159, 200, 60, 81, 159, 117, 62, 172, 236, 205, 59, 147, 30, 131, 191, 161, 58, 35, 62, 168, 164, 162, 62, 83, 6, 194, 62, 49, 242, 11, 191, 126, 33, 206, 61, 245, 95, 32, 190, 159, 183, 27, 191, 237, 73, 57, 62, 58, 90, 38, 62, 96, 204, 34, 60, 125, 100, 28, 62, 210, 173, 178, 188, 181, 165, 53, 62, 185, 48, 12, 189, 110, 84, 84, 191, 173, 194, 185, 190, 147, 97, 246, 60, 254, 115, 189, 60, 200, 170, 231, 58, 116, 50, 65, 62, 69, 219, 188, 60, 197, 144, 81, 190, 34, 158, 201, 189, 153, 198, 6, 62, 13, 206, 97, 191, 250, 236, 243, 60, 8, 54, 57, 191, 65, 5, 139, 62, 197, 109, 147, 61, 106, 242, 163, 60, 85, 84, 188, 189, 249, 182, 252, 190, 85, 206, 20, 190, 231, 172, 93, 191, 136, 9, 155, 189, 20, 124, 58, 62, 74, 140, 42, 61, 52, 4, 100, 62, 73, 39, 188, 190, 11, 151, 179, 190, 108, 146, 190, 190, 166, 64, 94, 190, 108, 86, 135, 62, 162, 218, 131, 190, 85, 72, 33, 189, 17, 223, 188, 62, 194, 230, 218, 190, 212, 29, 238, 61, 180, 17, 237, 189, 243, 73, 218, 62, 166, 193, 153, 61, 18, 207, 236, 190, 231, 230, 133, 62, 215, 160, 150, 189, 117, 14, 50, 60, 39, 114, 148, 189, 69, 40, 191, 62, 21, 75, 85, 190, 2, 200, 191, 190, 21, 196, 174, 60, 179, 189, 128, 62, 106, 46, 31, 191, 16, 4, 71, 62, 23, 30, 20, 63, 253, 107, 80, 190, 24, 73, 104, 61, 165, 176, 41, 62, 53, 99, 60, 62, 230, 231, 54, 62, 60, 195, 20, 191, 82, 21, 21, 62, 183, 121, 16, 190, 45, 141, 45, 60, 102, 20, 176, 61, 210, 166, 104, 62, 158, 0, 31, 62, 74, 176, 244, 61, 165, 9, 206, 61, 111, 31, 237, 62, 64, 215, 61, 191, 123, 44, 177, 62, 135, 55, 244, 189, 16, 118, 172, 60, 178, 109, 86, 190, 156, 251, 222, 189, 119, 234, 224, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 177, 15, 188, 99, 155, 62, 62, 150, 51, 135, 189, 237, 54, 15, 62, 81, 193, 31, 189, 231, 71, 161, 61, 32, 98, 173, 60, 113, 74, 27, 62, 13, 255, 41, 61, 229, 250, 130, 62, 36, 43, 174, 62, 171, 84, 193, 61, 158, 175, 52, 190, 160, 70, 197, 60, 174, 111, 117, 62, 224, 85, 63, 190, 78, 127, 226, 189, 253, 118, 100, 59, 67, 51, 57, 61, 137, 42, 201, 62, 33, 159, 71, 62, 156, 217, 132, 189, 107, 156, 99, 61, 89, 200, 95, 62, 197, 104, 117, 189, 184, 46, 53, 61, 175, 15, 9, 62, 61, 199, 242, 189, 62, 95, 24, 62, 147, 240, 224, 62, 248, 132, 164, 189, 144, 55, 115, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 91, 100, 191, 103, 96, 211, 190, 11, 200, 155, 62, 201, 12, 241, 190, 60, 109, 182, 189, 180, 231, 16, 191, 52, 70, 205, 190, 243, 141, 15, 63, 214, 100, 117, 61, 22, 44, 146, 62, 142, 127, 20, 191, 191, 214, 177, 63, 138, 102, 30, 188, 84, 150, 37, 62, 65, 37, 84, 63, 94, 46, 8, 60, 114, 246, 16, 190, 157, 225, 218, 62, 41, 194, 49, 63, 19, 175, 195, 189, 10, 147, 145, 63, 103, 249, 132, 190, 124, 206, 110, 191, 134, 186, 77, 191, 242, 50, 152, 62, 48, 77, 179, 59, 245, 194, 61, 191, 213, 109, 1, 191, 96, 147, 37, 63, 117, 252, 199, 190, 85, 149, 234, 62, 113, 212, 176, 62, 37, 117, 146, 62, 143, 91, 1, 190, 46, 178, 66, 60, 129, 137, 109, 190, 133, 247, 253, 189, 212, 51, 86, 188, 201, 234, 91, 61, 28, 68, 8, 61, 142, 52, 21, 62, 107, 254, 138, 190, 187, 17, 161, 189, 205, 227, 238, 61, 167, 121, 150, 189, 32, 15, 212, 189, 128, 124, 101, 61, 29, 250, 106, 62, 204, 146, 213, 189, 224, 163, 63, 62, 230, 82, 200, 61, 28, 170, 119, 190, 190, 132, 175, 62, 70, 47, 139, 189, 72, 229, 207, 62, 214, 219, 219, 189, 96, 172, 235, 190, 14, 225, 13, 190, 82, 152, 66, 190, 0, 215, 81, 63, 217, 245, 128, 190, 216, 11, 26, 190, 247, 239, 252, 189, 235, 248, 45, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 58, 65, 189, 209, 116, 2, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {19, 106, 7, 64, 235, 85, 178, 191, 117, 175, 137, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {205, 47, 201, 191, 36, 26, 83, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0042/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}