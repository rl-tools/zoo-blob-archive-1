// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 182, 60, 63, 81, 201, 115, 62, 140, 104, 139, 62, 158, 93, 193, 62, 241, 86, 86, 191, 161, 162, 35, 190, 233, 10, 81, 190, 191, 145, 156, 191, 156, 255, 82, 190, 7, 218, 220, 189, 205, 2, 22, 191, 112, 229, 14, 63, 46, 43, 47, 191, 140, 47, 9, 63, 69, 68, 96, 62, 245, 69, 139, 62, 157, 245, 50, 191, 218, 137, 240, 190, 50, 190, 148, 189, 225, 206, 80, 63, 167, 132, 6, 191, 87, 146, 59, 191, 81, 212, 187, 62, 184, 176, 31, 62, 163, 67, 33, 191, 165, 226, 97, 63, 251, 56, 26, 191, 188, 105, 35, 63, 150, 94, 121, 63, 219, 169, 181, 62, 244, 27, 173, 189, 37, 119, 124, 191, 21, 154, 76, 190, 66, 18, 75, 190, 228, 6, 238, 191, 127, 168, 179, 190, 6, 91, 217, 62, 100, 139, 131, 63, 93, 61, 203, 61, 154, 190, 65, 63, 152, 109, 93, 190, 178, 159, 55, 191, 129, 32, 3, 63, 47, 117, 143, 191, 106, 83, 142, 61, 129, 1, 1, 63, 119, 76, 28, 191, 45, 179, 143, 62, 214, 186, 233, 190, 92, 64, 220, 63, 197, 236, 208, 62, 196, 33, 68, 191, 128, 123, 9, 191, 220, 53, 84, 61, 195, 57, 193, 190, 254, 156, 158, 63, 16, 188, 129, 62, 210, 7, 36, 190, 164, 194, 250, 190, 111, 206, 45, 191, 50, 126, 238, 189, 181, 3, 100, 63, 234, 186, 15, 190, 40, 156, 153, 190, 246, 186, 124, 191, 133, 93, 28, 191, 49, 139, 7, 191, 60, 181, 147, 191, 241, 190, 116, 190, 155, 179, 59, 191, 190, 95, 36, 62, 53, 21, 226, 189, 238, 183, 169, 190, 196, 97, 169, 63, 90, 176, 130, 62, 46, 32, 73, 191, 23, 19, 149, 62, 40, 54, 255, 62, 27, 222, 44, 63, 126, 70, 135, 62, 112, 82, 29, 62, 190, 190, 147, 62, 154, 199, 161, 191, 29, 126, 118, 190, 220, 25, 199, 190, 96, 140, 76, 61, 1, 186, 243, 190, 114, 152, 22, 191, 220, 35, 13, 63, 206, 160, 66, 62, 135, 168, 235, 62, 46, 154, 2, 191, 195, 173, 204, 62, 101, 180, 117, 62, 22, 119, 14, 191, 228, 100, 0, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {30, 208, 58, 191, 34, 90, 94, 62, 253, 193, 204, 190, 153, 126, 149, 62, 220, 194, 97, 63, 116, 111, 72, 62, 15, 237, 112, 190, 124, 55, 25, 62, 236, 100, 206, 190, 206, 47, 14, 191, 89, 162, 140, 62, 196, 240, 212, 190, 217, 98, 211, 62, 34, 223, 143, 190, 146, 44, 90, 62, 170, 162, 221, 62, 167, 48, 152, 59, 136, 35, 182, 62, 77, 3, 55, 63, 40, 136, 208, 190, 123, 227, 234, 189, 133, 209, 98, 190, 243, 74, 236, 62, 219, 250, 38, 191, 175, 162, 132, 189, 17, 246, 202, 188, 156, 221, 21, 190, 100, 70, 243, 62, 240, 46, 193, 62, 165, 31, 60, 63, 216, 77, 9, 63, 126, 181, 196, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 27, 21, 60, 179, 177, 206, 61, 54, 125, 11, 191, 4, 101, 0, 190, 159, 231, 203, 190, 230, 209, 188, 61, 219, 161, 16, 189, 56, 27, 141, 189, 81, 32, 7, 190, 110, 81, 115, 62, 219, 222, 48, 59, 52, 36, 105, 189, 160, 30, 21, 191, 89, 165, 128, 62, 171, 211, 49, 62, 107, 80, 178, 62, 2, 31, 100, 62, 202, 61, 242, 190, 168, 232, 76, 191, 180, 208, 62, 61, 198, 236, 159, 189, 67, 163, 245, 61, 19, 103, 151, 189, 136, 79, 53, 190, 149, 113, 16, 191, 131, 84, 200, 61, 56, 236, 159, 190, 136, 147, 34, 62, 150, 127, 62, 190, 162, 218, 192, 190, 100, 134, 104, 62, 17, 234, 27, 62, 207, 142, 17, 62, 218, 60, 203, 62, 18, 46, 18, 61, 208, 182, 22, 62, 66, 245, 62, 189, 120, 196, 128, 188, 160, 133, 41, 191, 191, 191, 16, 62, 230, 41, 43, 191, 5, 112, 0, 190, 99, 210, 140, 62, 127, 227, 7, 63, 13, 78, 128, 190, 234, 6, 123, 62, 65, 21, 191, 62, 92, 0, 170, 62, 61, 57, 98, 60, 76, 41, 187, 61, 163, 112, 118, 189, 123, 208, 175, 189, 145, 17, 64, 190, 147, 120, 164, 189, 93, 56, 12, 190, 45, 102, 8, 191, 218, 5, 127, 190, 126, 154, 22, 190, 227, 27, 9, 63, 154, 241, 135, 188, 147, 115, 229, 189, 3, 116, 83, 189, 18, 97, 82, 62, 82, 229, 19, 62, 91, 5, 170, 61, 15, 36, 161, 61, 153, 218, 130, 191, 20, 20, 129, 62, 90, 233, 72, 189, 199, 61, 7, 62, 230, 233, 58, 187, 126, 173, 203, 61, 97, 79, 187, 190, 87, 133, 192, 59, 255, 171, 209, 61, 249, 53, 51, 191, 2, 209, 159, 190, 161, 9, 28, 63, 192, 120, 95, 62, 196, 41, 254, 61, 250, 98, 78, 62, 164, 184, 192, 61, 133, 8, 106, 190, 176, 134, 9, 190, 17, 139, 227, 187, 187, 120, 142, 190, 30, 124, 224, 61, 207, 206, 170, 62, 137, 146, 168, 62, 146, 6, 254, 189, 227, 30, 17, 190, 81, 169, 106, 62, 136, 90, 31, 62, 109, 218, 43, 189, 52, 208, 125, 190, 112, 86, 12, 63, 182, 74, 20, 62, 135, 154, 221, 189, 100, 27, 131, 189, 19, 19, 50, 60, 34, 223, 89, 62, 211, 141, 180, 61, 147, 237, 137, 61, 136, 193, 36, 62, 75, 220, 165, 61, 230, 247, 84, 190, 194, 96, 123, 191, 9, 147, 148, 190, 125, 179, 206, 62, 176, 219, 108, 62, 126, 104, 118, 186, 94, 64, 108, 62, 180, 48, 110, 61, 129, 35, 240, 188, 226, 3, 228, 62, 49, 0, 86, 61, 142, 182, 211, 61, 13, 54, 67, 189, 120, 159, 154, 191, 236, 216, 213, 190, 63, 138, 45, 190, 3, 136, 13, 190, 177, 68, 49, 62, 11, 74, 74, 190, 19, 54, 141, 58, 148, 183, 22, 62, 112, 193, 150, 62, 98, 178, 41, 62, 127, 147, 23, 60, 17, 85, 29, 190, 164, 128, 170, 59, 228, 14, 193, 61, 169, 131, 55, 190, 167, 96, 220, 189, 182, 226, 229, 189, 42, 111, 15, 189, 172, 220, 158, 61, 88, 242, 234, 61, 233, 247, 143, 61, 53, 241, 190, 61, 7, 64, 79, 188, 0, 160, 190, 61, 3, 149, 9, 190, 34, 144, 133, 189, 175, 141, 45, 61, 54, 61, 19, 190, 150, 200, 30, 190, 125, 213, 102, 189, 12, 46, 125, 188, 229, 40, 182, 189, 217, 117, 180, 189, 235, 80, 3, 187, 208, 78, 247, 189, 133, 56, 184, 61, 7, 125, 9, 190, 70, 101, 255, 61, 173, 75, 25, 61, 72, 179, 22, 60, 61, 87, 135, 61, 119, 191, 216, 187, 153, 140, 179, 190, 126, 45, 79, 61, 23, 87, 51, 62, 226, 5, 39, 191, 156, 213, 172, 62, 116, 67, 71, 188, 22, 217, 239, 61, 218, 224, 139, 60, 30, 166, 67, 62, 117, 87, 160, 191, 116, 96, 205, 187, 197, 61, 98, 62, 138, 253, 172, 62, 227, 113, 209, 190, 222, 210, 81, 191, 7, 62, 31, 191, 6, 212, 205, 190, 250, 176, 201, 62, 29, 225, 129, 62, 234, 91, 73, 61, 254, 203, 164, 188, 87, 11, 32, 61, 240, 177, 58, 189, 72, 46, 13, 62, 148, 166, 181, 190, 11, 111, 3, 62, 101, 139, 235, 188, 126, 226, 125, 62, 63, 76, 144, 62, 26, 214, 155, 62, 112, 32, 209, 189, 85, 236, 228, 190, 117, 196, 95, 61, 65, 179, 17, 62, 56, 234, 27, 62, 31, 79, 101, 191, 18, 116, 199, 61, 236, 72, 129, 62, 124, 242, 61, 190, 243, 183, 133, 190, 201, 12, 233, 61, 166, 177, 149, 189, 60, 25, 242, 61, 240, 63, 130, 62, 242, 50, 77, 62, 103, 102, 198, 189, 8, 3, 51, 191, 178, 121, 35, 190, 110, 14, 222, 191, 209, 229, 135, 62, 242, 88, 227, 61, 9, 4, 50, 62, 50, 103, 42, 62, 7, 102, 86, 62, 113, 187, 111, 62, 216, 205, 20, 190, 90, 174, 178, 191, 223, 215, 207, 62, 196, 249, 57, 191, 82, 251, 78, 62, 188, 112, 167, 61, 244, 88, 36, 62, 155, 65, 13, 62, 58, 222, 159, 190, 56, 41, 89, 190, 255, 231, 28, 62, 33, 247, 145, 191, 47, 72, 189, 61, 76, 0, 214, 61, 249, 92, 129, 190, 67, 18, 129, 191, 227, 25, 10, 62, 250, 65, 35, 191, 220, 168, 221, 190, 253, 82, 255, 62, 115, 54, 77, 191, 42, 114, 125, 190, 221, 125, 231, 61, 70, 28, 53, 62, 211, 154, 239, 188, 194, 29, 133, 60, 152, 193, 57, 62, 11, 224, 224, 189, 51, 235, 35, 190, 251, 40, 26, 191, 59, 4, 47, 191, 3, 93, 201, 61, 253, 167, 227, 62, 213, 247, 139, 61, 59, 188, 82, 190, 158, 199, 111, 191, 191, 138, 109, 62, 190, 246, 231, 190, 38, 68, 153, 62, 223, 206, 133, 60, 154, 103, 164, 62, 129, 177, 158, 189, 100, 17, 37, 190, 226, 190, 148, 189, 96, 170, 212, 61, 234, 149, 142, 189, 241, 170, 97, 61, 173, 179, 205, 189, 123, 99, 212, 185, 108, 116, 22, 62, 48, 14, 174, 189, 233, 241, 164, 188, 66, 46, 255, 189, 41, 74, 98, 190, 73, 55, 22, 190, 238, 178, 17, 62, 81, 45, 212, 188, 160, 19, 172, 189, 245, 48, 137, 189, 222, 54, 50, 189, 44, 203, 125, 189, 58, 99, 121, 189, 144, 37, 183, 188, 6, 201, 127, 189, 200, 145, 39, 190, 66, 178, 218, 61, 63, 118, 24, 190, 149, 231, 127, 61, 181, 52, 41, 190, 159, 244, 86, 188, 234, 206, 42, 60, 204, 240, 170, 189, 231, 232, 217, 189, 166, 88, 130, 190, 194, 175, 182, 59, 106, 168, 130, 191, 29, 120, 254, 61, 178, 204, 176, 61, 73, 2, 6, 191, 165, 122, 82, 61, 168, 97, 213, 189, 172, 2, 158, 190, 98, 77, 106, 190, 52, 63, 186, 62, 48, 165, 72, 191, 51, 191, 35, 62, 153, 149, 52, 191, 233, 62, 158, 59, 3, 145, 105, 61, 125, 197, 219, 59, 15, 28, 190, 189, 91, 205, 129, 62, 89, 62, 230, 189, 134, 167, 25, 63, 3, 159, 77, 191, 251, 102, 146, 61, 198, 34, 198, 62, 155, 249, 143, 61, 105, 148, 47, 190, 38, 192, 204, 190, 217, 6, 60, 190, 169, 242, 217, 189, 19, 110, 190, 61, 147, 212, 226, 61, 191, 171, 82, 190, 253, 128, 85, 189, 7, 129, 44, 62, 73, 241, 246, 187, 25, 10, 17, 190, 182, 60, 132, 62, 127, 32, 35, 62, 147, 196, 79, 61, 199, 151, 155, 61, 2, 191, 62, 62, 95, 94, 133, 191, 196, 155, 5, 191, 127, 230, 5, 61, 244, 243, 188, 62, 188, 181, 187, 190, 19, 173, 126, 189, 4, 175, 20, 61, 137, 182, 3, 191, 43, 149, 100, 62, 106, 88, 114, 62, 145, 57, 29, 189, 147, 137, 177, 62, 162, 72, 171, 188, 166, 139, 57, 190, 222, 244, 190, 189, 38, 234, 49, 191, 52, 151, 92, 190, 126, 246, 135, 189, 121, 191, 134, 190, 63, 48, 110, 62, 60, 173, 98, 62, 127, 200, 92, 61, 135, 253, 205, 190, 188, 18, 189, 189, 181, 44, 230, 190, 207, 248, 9, 63, 187, 32, 41, 190, 248, 23, 189, 62, 95, 238, 238, 189, 23, 59, 34, 189, 82, 92, 60, 191, 137, 143, 49, 60, 76, 102, 172, 62, 108, 44, 230, 62, 192, 22, 186, 61, 211, 35, 128, 62, 80, 226, 101, 191, 83, 245, 49, 61, 128, 156, 9, 190, 229, 18, 48, 190, 32, 196, 139, 62, 77, 112, 77, 62, 226, 179, 144, 61, 12, 139, 226, 62, 109, 202, 249, 61, 60, 135, 190, 62, 171, 92, 182, 189, 168, 187, 127, 62, 254, 25, 162, 191, 183, 14, 7, 61, 1, 171, 175, 189, 75, 95, 58, 62, 184, 85, 49, 62, 72, 143, 148, 190, 181, 240, 6, 191, 219, 247, 46, 190, 34, 234, 19, 190, 84, 178, 0, 190, 236, 86, 29, 190, 50, 44, 0, 62, 202, 180, 235, 61, 187, 219, 126, 189, 60, 218, 81, 190, 204, 115, 38, 189, 176, 238, 150, 187, 253, 161, 21, 62, 139, 122, 65, 190, 251, 49, 138, 189, 87, 25, 44, 61, 244, 104, 253, 61, 98, 113, 196, 189, 162, 152, 164, 188, 224, 125, 14, 190, 7, 141, 166, 61, 6, 162, 237, 189, 186, 254, 29, 190, 166, 20, 60, 61, 240, 7, 195, 61, 122, 109, 21, 188, 115, 248, 138, 60, 250, 59, 42, 62, 208, 159, 26, 190, 139, 106, 148, 61, 173, 88, 226, 189, 250, 171, 70, 190, 33, 234, 150, 60, 133, 64, 231, 189, 100, 137, 164, 189, 54, 61, 105, 189, 41, 133, 210, 60, 155, 184, 6, 190, 203, 225, 135, 189, 183, 242, 103, 188, 11, 104, 158, 59, 67, 123, 141, 189, 34, 231, 152, 187, 108, 63, 130, 61, 55, 188, 187, 61, 12, 141, 3, 190, 200, 16, 217, 187, 31, 221, 12, 61, 14, 81, 107, 189, 27, 8, 96, 188, 22, 51, 194, 187, 253, 90, 195, 61, 30, 54, 48, 190, 14, 27, 217, 189, 151, 196, 6, 190, 56, 193, 2, 190, 42, 187, 164, 188, 97, 101, 236, 60, 170, 247, 156, 189, 113, 231, 40, 190, 197, 85, 204, 188, 76, 237, 190, 61, 116, 113, 201, 189, 10, 70, 130, 61, 88, 54, 75, 189, 59, 0, 32, 190, 194, 58, 190, 190, 96, 225, 138, 62, 114, 96, 25, 191, 174, 254, 136, 61, 127, 250, 82, 62, 223, 64, 14, 190, 182, 185, 135, 190, 182, 164, 102, 61, 138, 251, 36, 191, 185, 36, 34, 191, 122, 236, 15, 63, 218, 16, 188, 190, 227, 246, 106, 60, 124, 93, 243, 62, 196, 68, 124, 61, 129, 0, 123, 62, 200, 84, 223, 60, 96, 219, 154, 62, 164, 81, 100, 61, 127, 109, 150, 191, 208, 181, 42, 191, 248, 23, 95, 191, 178, 178, 169, 62, 0, 11, 128, 62, 164, 63, 175, 61, 29, 136, 26, 189, 61, 206, 89, 191, 63, 56, 194, 62, 199, 151, 5, 191, 19, 89, 217, 189, 188, 73, 138, 190, 52, 141, 228, 190, 12, 180, 47, 62, 164, 194, 56, 189, 134, 124, 11, 61, 122, 222, 7, 61, 179, 148, 134, 189, 27, 117, 94, 188, 101, 221, 139, 62, 117, 181, 225, 189, 85, 19, 227, 61, 44, 118, 116, 62, 198, 239, 170, 190, 129, 250, 58, 62, 98, 76, 148, 62, 231, 203, 127, 61, 153, 118, 230, 189, 159, 0, 205, 187, 5, 107, 71, 62, 85, 127, 194, 190, 231, 242, 199, 189, 17, 103, 75, 188, 103, 58, 127, 62, 137, 46, 47, 187, 235, 161, 244, 190, 135, 18, 145, 61, 233, 93, 48, 62, 35, 197, 14, 61, 253, 170, 4, 62, 83, 234, 244, 189, 62, 128, 64, 62, 107, 238, 152, 61, 108, 19, 52, 62, 204, 63, 132, 61, 109, 203, 196, 61, 176, 211, 29, 190, 108, 120, 164, 61, 193, 139, 242, 189, 113, 223, 60, 190, 30, 232, 16, 61, 121, 220, 84, 190, 10, 220, 38, 62, 238, 176, 7, 190, 48, 108, 160, 61, 191, 176, 210, 61, 223, 135, 163, 61, 73, 9, 7, 190, 219, 201, 155, 188, 199, 216, 160, 184, 232, 157, 146, 189, 16, 53, 24, 190, 117, 2, 245, 189, 88, 225, 27, 190, 104, 148, 27, 61, 3, 12, 167, 61, 98, 150, 214, 60, 124, 170, 180, 189, 54, 37, 226, 189, 132, 112, 172, 61, 245, 191, 2, 62, 212, 169, 194, 188, 239, 245, 118, 61, 133, 63, 92, 61, 49, 158, 3, 60, 106, 125, 234, 61, 59, 194, 81, 190, 122, 129, 110, 189, 168, 63, 174, 190, 32, 229, 40, 191, 222, 191, 54, 61, 154, 114, 45, 62, 89, 63, 194, 190, 241, 185, 133, 190, 187, 173, 255, 186, 113, 27, 38, 191, 111, 61, 182, 62, 140, 25, 229, 189, 181, 122, 41, 191, 169, 247, 215, 62, 85, 134, 22, 190, 41, 205, 124, 190, 52, 80, 190, 61, 116, 14, 98, 62, 24, 10, 55, 190, 103, 121, 110, 62, 81, 99, 156, 190, 194, 143, 131, 189, 16, 221, 199, 190, 68, 43, 46, 60, 243, 36, 181, 62, 127, 2, 168, 62, 180, 70, 137, 189, 161, 169, 20, 190, 129, 177, 69, 191, 106, 179, 203, 190, 239, 91, 14, 61, 125, 182, 69, 190, 112, 232, 207, 189, 21, 164, 58, 190, 5, 4, 247, 190, 41, 158, 140, 191, 136, 230, 220, 189, 190, 167, 157, 62, 21, 229, 7, 191, 179, 169, 1, 62, 192, 223, 110, 61, 118, 186, 221, 61, 224, 93, 107, 190, 218, 191, 73, 190, 62, 141, 132, 191, 211, 169, 14, 63, 220, 97, 32, 190, 28, 193, 10, 191, 73, 116, 142, 189, 244, 140, 83, 62, 45, 25, 196, 187, 244, 141, 162, 62, 65, 181, 13, 189, 72, 5, 109, 62, 75, 37, 126, 190, 51, 61, 22, 62, 185, 81, 71, 62, 64, 118, 154, 62, 8, 141, 229, 189, 222, 229, 26, 191, 100, 159, 148, 191, 54, 196, 170, 190, 83, 53, 177, 62, 158, 252, 61, 60, 30, 62, 45, 62, 34, 250, 204, 61, 168, 112, 117, 61, 66, 30, 137, 62, 52, 176, 77, 190, 16, 168, 47, 62, 108, 112, 181, 61, 167, 242, 222, 61, 115, 143, 201, 189, 20, 10, 77, 62, 117, 37, 197, 189, 126, 162, 184, 188, 70, 32, 5, 62, 59, 193, 143, 62, 113, 37, 181, 190, 49, 3, 200, 189, 114, 68, 137, 60, 184, 143, 156, 189, 62, 217, 131, 62, 0, 197, 141, 62, 218, 190, 88, 62, 108, 96, 158, 189, 58, 56, 93, 189, 112, 101, 167, 188, 64, 205, 38, 61, 214, 166, 255, 189, 122, 108, 100, 61, 62, 211, 17, 62, 34, 96, 254, 60, 14, 204, 42, 189, 185, 192, 155, 61, 146, 197, 134, 62, 252, 159, 217, 190, 224, 255, 45, 191, 210, 1, 40, 62, 46, 249, 139, 191, 124, 177, 173, 188, 125, 234, 201, 61, 108, 4, 133, 190, 229, 160, 48, 191, 108, 39, 164, 60, 125, 201, 50, 191, 115, 71, 74, 191, 16, 58, 228, 62, 67, 186, 23, 191, 52, 250, 239, 190, 230, 93, 110, 190, 208, 238, 229, 62, 203, 109, 51, 62, 124, 142, 9, 61, 10, 43, 248, 61, 210, 89, 101, 61, 155, 117, 167, 190, 25, 188, 89, 191, 236, 187, 110, 191, 162, 152, 240, 62, 107, 31, 74, 62, 54, 18, 166, 62, 181, 109, 131, 189, 63, 232, 132, 191, 7, 127, 213, 62, 151, 69, 248, 190, 118, 123, 169, 61, 75, 58, 35, 190, 174, 73, 235, 188, 104, 104, 7, 62, 69, 115, 29, 62, 26, 234, 22, 189, 214, 241, 70, 62, 124, 254, 72, 190, 20, 46, 235, 189, 179, 79, 191, 61, 81, 145, 221, 61, 156, 227, 77, 62, 205, 74, 106, 189, 142, 79, 34, 191, 211, 99, 208, 60, 219, 80, 18, 62, 57, 60, 235, 62, 106, 168, 20, 62, 51, 181, 31, 189, 156, 111, 191, 189, 169, 244, 254, 190, 88, 137, 204, 189, 131, 64, 117, 60, 152, 235, 147, 60, 194, 246, 14, 61, 202, 184, 58, 191, 209, 168, 62, 191, 205, 220, 40, 189, 178, 116, 244, 61, 234, 19, 176, 61, 242, 176, 17, 190, 76, 109, 154, 189, 251, 157, 249, 189, 35, 197, 33, 62, 49, 145, 34, 62, 177, 98, 125, 190, 124, 199, 92, 187, 109, 246, 7, 190, 168, 151, 193, 190, 78, 189, 202, 61, 238, 121, 70, 62, 201, 144, 71, 61, 149, 175, 93, 62, 241, 174, 65, 62, 93, 247, 69, 191, 36, 13, 65, 191, 223, 236, 160, 190, 205, 220, 211, 62, 227, 130, 195, 190, 200, 170, 148, 190, 101, 145, 95, 190, 60, 86, 27, 191, 252, 174, 63, 62, 195, 202, 53, 62, 199, 224, 28, 62, 75, 81, 8, 63, 177, 241, 7, 62, 13, 170, 3, 191, 83, 164, 93, 61, 254, 75, 247, 190, 254, 143, 42, 62, 69, 221, 212, 60, 10, 29, 224, 189, 138, 180, 225, 61, 200, 11, 169, 62, 188, 238, 97, 189, 171, 218, 36, 191, 122, 14, 215, 62, 156, 176, 154, 61, 43, 76, 156, 61, 216, 75, 65, 191, 146, 144, 173, 61, 64, 106, 33, 62, 132, 188, 88, 189, 232, 133, 43, 62, 10, 72, 210, 61, 210, 171, 130, 191, 131, 105, 160, 189, 232, 207, 168, 61, 162, 238, 217, 62, 133, 30, 216, 190, 245, 57, 178, 190, 49, 134, 224, 190, 45, 31, 32, 191, 176, 231, 195, 62, 188, 5, 127, 62, 213, 205, 208, 61, 103, 221, 204, 189, 39, 186, 114, 62, 86, 235, 245, 187, 2, 182, 220, 189, 29, 66, 33, 191, 194, 18, 143, 189, 185, 29, 27, 62, 18, 104, 180, 61, 74, 48, 26, 62, 108, 172, 196, 62, 205, 51, 87, 61, 243, 112, 20, 191, 103, 97, 69, 61, 14, 217, 252, 61, 54, 163, 218, 190, 72, 171, 176, 61, 64, 68, 47, 190, 65, 117, 202, 62, 99, 16, 251, 61, 14, 126, 237, 189, 132, 175, 13, 190, 205, 174, 42, 191, 21, 186, 88, 62, 93, 11, 88, 191, 186, 200, 247, 61, 24, 114, 33, 62, 167, 230, 159, 62, 237, 46, 90, 62, 222, 156, 248, 190, 165, 249, 116, 190, 159, 55, 44, 191, 110, 203, 106, 61, 58, 212, 41, 62, 71, 146, 2, 190, 55, 162, 85, 61, 173, 246, 173, 61, 77, 255, 241, 190, 38, 204, 16, 62, 140, 234, 14, 189, 201, 155, 144, 62, 167, 232, 192, 61, 73, 188, 17, 190, 84, 88, 138, 62, 104, 171, 53, 61, 186, 25, 164, 190, 22, 214, 170, 188, 54, 197, 148, 190, 57, 237, 208, 61, 178, 73, 147, 190, 48, 88, 31, 190, 83, 53, 128, 61, 197, 251, 76, 189, 184, 10, 181, 189, 28, 177, 53, 191, 179, 39, 17, 62, 58, 150, 94, 190, 191, 193, 238, 189, 145, 170, 165, 62, 207, 172, 126, 62, 236, 212, 226, 60, 56, 27, 246, 188, 89, 65, 6, 190, 230, 21, 19, 190, 129, 8, 108, 61, 198, 185, 177, 190, 172, 67, 92, 61, 37, 245, 213, 61, 28, 205, 18, 189, 151, 30, 244, 189, 20, 31, 8, 61, 92, 24, 104, 189, 247, 145, 47, 62, 102, 247, 161, 189, 3, 6, 181, 189, 198, 197, 43, 189, 221, 221, 98, 188, 20, 90, 154, 190, 42, 13, 143, 189, 227, 28, 91, 191, 202, 120, 8, 190, 121, 78, 204, 62, 146, 242, 97, 191, 191, 133, 246, 189, 88, 45, 54, 62, 122, 188, 234, 59, 237, 14, 153, 191, 145, 38, 42, 62, 55, 38, 125, 191, 96, 211, 161, 61, 15, 5, 145, 190, 7, 99, 198, 62, 255, 118, 49, 189, 227, 211, 184, 59, 173, 73, 162, 62, 183, 227, 11, 62, 190, 73, 73, 191, 109, 218, 173, 62, 162, 104, 114, 191, 139, 217, 29, 62, 181, 245, 187, 190, 34, 186, 57, 62, 6, 237, 27, 189, 136, 174, 63, 191, 226, 84, 228, 190, 84, 254, 185, 61, 66, 127, 156, 61, 166, 237, 6, 191, 126, 55, 119, 190, 251, 249, 106, 62, 6, 100, 39, 61, 167, 64, 176, 189, 37, 92, 2, 61, 204, 246, 137, 189, 8, 64, 243, 189, 243, 195, 221, 61, 122, 139, 111, 189, 176, 168, 225, 189, 236, 47, 22, 62, 148, 196, 126, 191, 2, 60, 100, 59, 0, 149, 74, 62, 236, 158, 20, 61, 251, 15, 54, 62, 255, 199, 207, 61, 169, 101, 161, 190, 70, 127, 69, 190, 246, 165, 156, 61, 211, 30, 104, 189, 221, 254, 237, 61, 215, 37, 109, 61, 38, 28, 33, 191, 178, 65, 3, 62, 0, 98, 229, 190, 139, 167, 19, 61, 199, 249, 241, 62, 204, 139, 134, 190, 248, 111, 21, 190, 174, 122, 117, 190, 214, 10, 23, 189, 25, 241, 93, 190, 156, 96, 136, 190, 21, 94, 74, 62, 45, 72, 162, 190, 38, 6, 58, 61, 142, 162, 125, 191, 191, 31, 245, 61, 179, 111, 59, 62, 246, 219, 28, 62, 145, 204, 0, 189, 251, 253, 170, 191, 93, 135, 85, 189, 143, 42, 159, 190, 88, 226, 12, 190, 61, 143, 184, 62, 97, 247, 15, 62, 204, 127, 136, 62, 225, 21, 48, 190, 11, 192, 183, 190, 152, 67, 42, 191, 19, 13, 141, 61, 141, 186, 47, 190, 40, 244, 2, 190, 211, 251, 82, 190, 83, 93, 162, 61, 3, 238, 17, 191, 140, 27, 144, 62, 133, 27, 87, 62, 192, 44, 155, 62, 144, 24, 63, 189, 26, 121, 160, 191, 131, 78, 98, 62, 243, 66, 79, 62, 46, 84, 234, 189, 136, 22, 170, 62, 92, 186, 205, 61, 7, 19, 115, 190, 66, 111, 30, 62, 33, 184, 188, 187, 227, 147, 26, 61, 186, 221, 134, 62, 117, 123, 99, 61, 100, 62, 129, 191, 224, 229, 8, 62, 59, 194, 156, 62, 174, 75, 201, 62, 182, 237, 254, 190, 185, 175, 133, 61, 69, 105, 65, 190, 34, 36, 2, 191, 29, 67, 96, 62, 8, 81, 88, 62, 68, 146, 87, 61, 69, 214, 59, 62, 18, 205, 102, 59, 58, 152, 52, 62, 198, 2, 163, 60, 47, 77, 55, 191, 56, 18, 237, 190, 86, 196, 255, 60, 151, 202, 254, 187, 88, 172, 204, 60, 47, 230, 120, 62, 160, 234, 17, 187, 238, 208, 76, 190, 43, 1, 134, 189, 85, 10, 1, 62, 208, 25, 50, 191, 155, 84, 97, 61, 37, 228, 63, 191, 101, 209, 129, 62, 11, 95, 138, 61, 152, 78, 5, 62, 142, 235, 155, 189, 208, 124, 251, 190, 203, 94, 209, 189, 26, 11, 70, 191, 186, 144, 215, 189, 237, 114, 246, 61, 156, 248, 71, 61, 52, 222, 107, 62, 96, 246, 199, 190, 47, 35, 211, 190, 221, 203, 210, 190, 210, 224, 75, 190, 79, 183, 132, 62, 207, 19, 94, 190, 209, 177, 142, 188, 65, 236, 210, 62, 216, 89, 139, 190, 88, 21, 140, 61, 124, 61, 3, 190, 179, 135, 220, 62, 183, 251, 138, 61, 56, 144, 1, 191, 124, 254, 131, 62, 59, 65, 161, 189, 194, 241, 112, 61, 23, 21, 224, 189, 35, 184, 141, 62, 235, 198, 21, 190, 238, 98, 152, 190, 121, 139, 92, 60, 208, 141, 136, 62, 224, 226, 237, 190, 42, 25, 95, 62, 127, 151, 12, 63, 34, 153, 121, 190, 5, 255, 204, 188, 127, 254, 23, 62, 26, 195, 59, 62, 133, 149, 39, 62, 15, 221, 7, 191, 99, 101, 200, 61, 247, 141, 89, 190, 31, 112, 160, 60, 188, 136, 144, 61, 159, 152, 114, 62, 30, 238, 10, 62, 76, 49, 198, 61, 192, 199, 21, 62, 64, 59, 215, 62, 250, 83, 28, 191, 109, 221, 182, 62, 159, 98, 16, 190, 241, 48, 180, 60, 166, 14, 15, 190, 67, 208, 14, 189, 139, 189, 198, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 250, 94, 188, 19, 113, 41, 62, 236, 237, 146, 189, 188, 64, 10, 62, 81, 193, 31, 189, 87, 124, 88, 61, 61, 109, 193, 60, 90, 172, 8, 62, 13, 255, 41, 61, 89, 233, 110, 62, 195, 249, 180, 62, 245, 86, 210, 61, 119, 132, 50, 190, 160, 70, 197, 60, 128, 92, 122, 62, 110, 118, 8, 190, 242, 112, 169, 189, 253, 48, 192, 187, 60, 138, 58, 61, 161, 119, 201, 62, 59, 33, 49, 62, 47, 236, 132, 189, 222, 20, 248, 61, 176, 219, 118, 62, 48, 132, 92, 189, 156, 198, 137, 61, 10, 210, 228, 61, 45, 174, 249, 189, 27, 251, 13, 62, 246, 112, 220, 62, 130, 181, 186, 189, 241, 219, 149, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 173, 73, 191, 103, 15, 211, 190, 15, 93, 173, 62, 233, 54, 252, 190, 60, 109, 182, 189, 245, 69, 9, 191, 93, 169, 230, 190, 42, 109, 13, 63, 214, 100, 117, 61, 66, 181, 120, 62, 143, 217, 42, 191, 119, 86, 161, 63, 132, 168, 40, 188, 84, 150, 37, 62, 63, 69, 89, 63, 99, 178, 129, 61, 218, 254, 16, 190, 49, 44, 194, 62, 15, 84, 24, 63, 75, 37, 202, 189, 163, 153, 145, 63, 236, 16, 191, 190, 47, 250, 95, 191, 33, 100, 66, 191, 178, 251, 166, 62, 167, 201, 120, 61, 187, 125, 43, 191, 254, 211, 140, 190, 3, 176, 53, 63, 82, 102, 210, 190, 71, 229, 3, 63, 13, 211, 172, 62, 149, 167, 227, 62, 26, 87, 186, 189, 78, 49, 242, 61, 16, 13, 97, 190, 133, 247, 253, 189, 145, 28, 79, 189, 113, 218, 114, 61, 112, 56, 61, 188, 142, 52, 21, 62, 2, 90, 75, 190, 48, 144, 211, 189, 213, 83, 123, 62, 82, 140, 150, 189, 32, 15, 212, 189, 104, 146, 114, 61, 204, 251, 129, 62, 19, 153, 213, 189, 30, 202, 53, 62, 53, 128, 58, 61, 76, 214, 104, 190, 223, 222, 150, 62, 206, 170, 73, 189, 209, 217, 152, 62, 26, 51, 211, 189, 161, 122, 210, 190, 169, 169, 128, 189, 71, 104, 147, 190, 201, 98, 42, 63, 72, 234, 17, 190, 255, 32, 164, 189, 195, 197, 195, 60, 75, 241, 17, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 233, 251, 188, 129, 63, 230, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {237, 176, 112, 191, 156, 18, 73, 191, 213, 101, 208, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {84, 24, 205, 190, 158, 45, 52, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0042/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}