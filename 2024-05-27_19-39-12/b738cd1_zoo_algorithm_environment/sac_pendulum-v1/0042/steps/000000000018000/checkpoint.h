// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 25, 63, 63, 132, 207, 128, 62, 87, 79, 137, 62, 84, 48, 191, 62, 7, 35, 87, 191, 230, 170, 39, 190, 104, 12, 30, 190, 51, 207, 153, 191, 189, 213, 62, 190, 179, 132, 228, 189, 255, 90, 16, 191, 245, 18, 15, 63, 3, 178, 52, 191, 166, 73, 12, 63, 41, 122, 71, 62, 150, 226, 146, 62, 171, 255, 37, 191, 227, 35, 11, 191, 116, 167, 242, 189, 91, 13, 37, 63, 46, 49, 13, 191, 65, 89, 85, 191, 222, 174, 204, 62, 22, 202, 110, 60, 84, 253, 37, 191, 164, 70, 98, 63, 37, 86, 30, 191, 61, 46, 25, 63, 184, 165, 122, 63, 229, 30, 183, 62, 247, 222, 145, 189, 14, 59, 128, 191, 185, 8, 84, 190, 172, 103, 63, 190, 196, 0, 229, 191, 93, 186, 170, 190, 16, 109, 204, 62, 125, 80, 133, 63, 94, 253, 160, 61, 76, 253, 64, 63, 60, 97, 77, 190, 144, 249, 60, 191, 28, 150, 3, 63, 216, 212, 149, 191, 237, 118, 28, 61, 9, 120, 2, 63, 112, 126, 21, 191, 233, 207, 128, 62, 117, 88, 4, 191, 224, 125, 220, 63, 107, 4, 216, 62, 19, 208, 77, 191, 13, 116, 248, 190, 123, 31, 90, 61, 97, 16, 207, 190, 208, 128, 159, 63, 107, 92, 110, 62, 238, 116, 20, 190, 190, 198, 244, 190, 207, 45, 44, 191, 162, 238, 219, 189, 98, 166, 100, 63, 180, 172, 21, 190, 122, 86, 146, 190, 181, 114, 105, 191, 161, 119, 27, 191, 15, 249, 6, 191, 252, 123, 151, 191, 96, 1, 103, 190, 129, 220, 72, 191, 17, 246, 236, 61, 119, 45, 202, 189, 222, 15, 195, 190, 2, 31, 173, 63, 6, 147, 113, 62, 187, 44, 46, 191, 197, 89, 233, 62, 67, 52, 255, 62, 32, 212, 42, 63, 111, 12, 137, 62, 117, 192, 28, 62, 233, 167, 149, 62, 62, 107, 163, 191, 158, 54, 128, 190, 224, 2, 209, 190, 209, 218, 163, 61, 125, 168, 241, 190, 7, 188, 27, 191, 120, 219, 15, 63, 184, 195, 39, 62, 245, 30, 243, 62, 241, 185, 249, 190, 59, 106, 203, 62, 56, 40, 129, 62, 90, 9, 21, 191, 227, 38, 252, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 60, 57, 191, 210, 209, 63, 62, 202, 204, 233, 190, 239, 83, 161, 62, 245, 204, 96, 63, 134, 232, 29, 62, 47, 24, 123, 190, 69, 19, 116, 62, 2, 22, 213, 190, 36, 39, 21, 191, 39, 77, 145, 62, 25, 250, 243, 190, 59, 36, 193, 62, 159, 94, 149, 190, 116, 204, 81, 62, 129, 213, 231, 62, 177, 79, 8, 189, 244, 31, 173, 62, 54, 48, 52, 63, 80, 60, 236, 190, 218, 141, 28, 190, 74, 218, 151, 190, 168, 8, 239, 62, 123, 153, 31, 191, 203, 149, 188, 189, 198, 106, 251, 187, 121, 123, 30, 190, 165, 122, 244, 62, 131, 225, 155, 62, 163, 146, 58, 63, 237, 226, 3, 63, 131, 131, 208, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 148, 129, 189, 122, 168, 237, 61, 191, 71, 19, 191, 130, 42, 39, 190, 208, 183, 220, 190, 232, 45, 243, 61, 16, 8, 116, 189, 40, 124, 131, 189, 114, 79, 29, 190, 223, 123, 7, 62, 42, 137, 83, 60, 101, 250, 165, 189, 69, 166, 17, 191, 51, 118, 141, 62, 220, 236, 55, 62, 62, 30, 181, 62, 6, 249, 99, 62, 26, 11, 5, 191, 168, 106, 78, 191, 127, 173, 68, 60, 132, 191, 168, 189, 26, 169, 175, 61, 113, 239, 223, 189, 207, 115, 57, 190, 149, 113, 16, 191, 166, 208, 189, 61, 228, 233, 160, 190, 86, 201, 49, 62, 206, 58, 87, 190, 68, 32, 212, 190, 247, 43, 101, 62, 118, 26, 4, 62, 174, 79, 34, 62, 246, 161, 194, 62, 92, 49, 138, 189, 65, 55, 35, 62, 225, 87, 61, 189, 140, 30, 50, 189, 167, 22, 54, 191, 41, 27, 5, 62, 60, 215, 57, 191, 107, 203, 168, 189, 111, 154, 104, 62, 41, 243, 223, 62, 69, 92, 117, 190, 104, 107, 89, 62, 82, 0, 193, 62, 171, 26, 177, 62, 74, 170, 221, 60, 84, 22, 128, 61, 132, 88, 67, 189, 151, 8, 52, 190, 27, 219, 19, 190, 193, 102, 50, 190, 103, 220, 96, 190, 25, 244, 9, 191, 244, 95, 133, 190, 67, 9, 16, 190, 219, 88, 10, 63, 190, 56, 16, 189, 245, 73, 84, 190, 125, 204, 78, 189, 160, 238, 92, 62, 6, 101, 154, 61, 228, 103, 162, 61, 41, 238, 149, 61, 12, 227, 136, 191, 205, 90, 115, 62, 165, 217, 53, 189, 212, 14, 207, 61, 32, 60, 55, 189, 29, 141, 201, 61, 14, 157, 209, 190, 26, 241, 210, 60, 209, 14, 46, 61, 192, 168, 63, 191, 238, 89, 151, 190, 221, 33, 23, 63, 138, 52, 81, 62, 10, 35, 241, 61, 30, 155, 84, 62, 80, 63, 150, 61, 224, 105, 81, 190, 0, 2, 57, 190, 56, 81, 54, 189, 81, 164, 168, 190, 54, 80, 34, 61, 121, 230, 137, 62, 32, 150, 186, 62, 218, 237, 2, 190, 74, 126, 255, 189, 184, 3, 89, 62, 194, 1, 226, 61, 6, 69, 15, 189, 12, 48, 126, 190, 135, 219, 255, 62, 166, 27, 42, 62, 27, 18, 208, 189, 109, 214, 183, 189, 192, 21, 237, 60, 215, 28, 96, 62, 60, 153, 205, 61, 116, 48, 159, 61, 192, 144, 46, 62, 250, 105, 191, 61, 148, 2, 65, 190, 196, 107, 116, 191, 254, 17, 153, 190, 208, 231, 210, 62, 204, 165, 106, 62, 33, 238, 124, 60, 252, 11, 126, 62, 10, 167, 125, 61, 128, 104, 148, 188, 53, 5, 230, 62, 116, 23, 125, 61, 96, 22, 233, 61, 250, 120, 23, 189, 57, 249, 149, 191, 234, 116, 196, 190, 10, 243, 65, 190, 228, 36, 5, 190, 15, 248, 54, 62, 11, 29, 60, 190, 30, 145, 101, 60, 185, 203, 26, 62, 165, 175, 156, 62, 89, 94, 53, 62, 127, 147, 23, 60, 17, 85, 29, 190, 164, 128, 170, 59, 228, 14, 193, 61, 169, 131, 55, 190, 167, 96, 220, 189, 182, 226, 229, 189, 42, 111, 15, 189, 172, 220, 158, 61, 88, 242, 234, 61, 233, 247, 143, 61, 53, 241, 190, 61, 7, 64, 79, 188, 0, 160, 190, 61, 3, 149, 9, 190, 34, 144, 133, 189, 175, 141, 45, 61, 54, 61, 19, 190, 150, 200, 30, 190, 125, 213, 102, 189, 12, 46, 125, 188, 229, 40, 182, 189, 217, 117, 180, 189, 235, 80, 3, 187, 208, 78, 247, 189, 133, 56, 184, 61, 7, 125, 9, 190, 70, 101, 255, 61, 173, 75, 25, 61, 72, 179, 22, 60, 61, 87, 135, 61, 119, 191, 216, 187, 153, 140, 179, 190, 242, 140, 17, 61, 76, 18, 2, 62, 216, 146, 62, 191, 185, 96, 184, 62, 103, 159, 32, 188, 245, 17, 2, 62, 249, 155, 53, 61, 166, 106, 79, 62, 255, 223, 169, 191, 245, 5, 179, 188, 251, 196, 53, 62, 8, 154, 177, 62, 213, 13, 209, 190, 66, 97, 92, 191, 114, 242, 33, 191, 3, 216, 216, 190, 30, 132, 205, 62, 229, 112, 118, 62, 100, 147, 61, 61, 116, 205, 66, 187, 191, 40, 247, 60, 93, 201, 98, 189, 239, 89, 37, 62, 247, 211, 193, 190, 152, 60, 222, 61, 80, 67, 220, 188, 253, 176, 118, 62, 71, 108, 149, 62, 30, 69, 165, 62, 254, 82, 15, 190, 16, 226, 232, 190, 117, 196, 95, 61, 190, 149, 231, 61, 100, 213, 167, 61, 201, 21, 128, 191, 160, 11, 165, 61, 41, 153, 117, 62, 101, 67, 58, 190, 222, 106, 131, 190, 162, 103, 247, 61, 120, 226, 159, 189, 40, 27, 163, 61, 165, 60, 72, 62, 136, 122, 71, 62, 77, 242, 206, 189, 15, 105, 55, 191, 81, 205, 31, 190, 20, 92, 223, 191, 227, 180, 46, 62, 11, 229, 184, 61, 46, 164, 36, 62, 110, 252, 57, 62, 136, 141, 63, 62, 69, 106, 68, 62, 117, 101, 5, 190, 90, 108, 184, 191, 243, 227, 164, 62, 95, 77, 64, 191, 76, 70, 47, 62, 219, 150, 151, 61, 109, 42, 33, 62, 222, 184, 24, 62, 66, 50, 166, 190, 73, 205, 22, 190, 145, 134, 69, 62, 76, 28, 130, 191, 205, 166, 218, 61, 99, 81, 239, 61, 66, 89, 164, 190, 131, 234, 129, 191, 255, 33, 31, 62, 239, 178, 41, 191, 72, 99, 183, 190, 139, 48, 17, 63, 241, 169, 30, 191, 41, 47, 150, 190, 55, 190, 61, 189, 131, 121, 68, 62, 52, 24, 150, 188, 81, 222, 3, 61, 184, 206, 55, 62, 207, 167, 213, 189, 60, 52, 159, 61, 55, 254, 19, 191, 152, 47, 205, 190, 61, 77, 18, 62, 232, 44, 243, 62, 19, 75, 4, 62, 84, 149, 84, 190, 160, 192, 106, 191, 169, 134, 139, 62, 89, 9, 150, 190, 64, 216, 159, 62, 209, 211, 252, 60, 201, 134, 3, 63, 129, 177, 158, 189, 100, 17, 37, 190, 226, 190, 148, 189, 96, 170, 212, 61, 234, 149, 142, 189, 241, 170, 97, 61, 173, 179, 205, 189, 123, 99, 212, 185, 108, 116, 22, 62, 48, 14, 174, 189, 233, 241, 164, 188, 66, 46, 255, 189, 41, 74, 98, 190, 73, 55, 22, 190, 238, 178, 17, 62, 81, 45, 212, 188, 160, 19, 172, 189, 245, 48, 137, 189, 222, 54, 50, 189, 44, 203, 125, 189, 58, 99, 121, 189, 144, 37, 183, 188, 6, 201, 127, 189, 200, 145, 39, 190, 66, 178, 218, 61, 63, 118, 24, 190, 149, 231, 127, 61, 181, 52, 41, 190, 159, 244, 86, 188, 234, 206, 42, 60, 204, 240, 170, 189, 231, 232, 217, 189, 251, 222, 76, 190, 41, 160, 2, 61, 189, 159, 130, 191, 232, 28, 1, 62, 110, 23, 151, 61, 221, 56, 41, 191, 98, 85, 231, 61, 232, 145, 2, 190, 33, 144, 174, 190, 131, 88, 70, 190, 131, 98, 201, 62, 109, 214, 72, 191, 202, 28, 42, 62, 189, 70, 82, 191, 117, 75, 124, 60, 162, 59, 130, 61, 90, 111, 190, 186, 84, 231, 255, 189, 112, 85, 123, 62, 134, 197, 210, 189, 45, 39, 39, 63, 106, 221, 87, 191, 55, 173, 6, 60, 95, 143, 179, 62, 244, 121, 179, 61, 78, 248, 71, 190, 61, 14, 184, 190, 96, 54, 45, 190, 219, 17, 187, 189, 246, 215, 163, 61, 216, 95, 245, 61, 10, 72, 83, 190, 55, 185, 161, 189, 127, 201, 47, 62, 111, 143, 161, 60, 229, 148, 51, 190, 78, 101, 92, 62, 134, 125, 55, 62, 59, 175, 139, 61, 213, 12, 177, 61, 133, 26, 84, 62, 110, 189, 135, 191, 203, 226, 3, 191, 39, 106, 82, 61, 101, 128, 185, 62, 51, 179, 183, 190, 69, 240, 144, 189, 141, 83, 224, 60, 232, 51, 12, 191, 150, 65, 65, 62, 203, 126, 90, 62, 160, 101, 144, 188, 250, 95, 182, 62, 45, 183, 194, 186, 21, 214, 79, 190, 221, 97, 78, 189, 106, 168, 59, 191, 136, 250, 93, 190, 141, 171, 158, 189, 120, 21, 132, 190, 229, 228, 127, 62, 162, 99, 53, 62, 65, 231, 26, 61, 220, 155, 192, 190, 93, 209, 15, 190, 11, 238, 225, 190, 225, 216, 24, 63, 194, 60, 242, 189, 167, 237, 182, 62, 244, 72, 4, 190, 59, 64, 154, 189, 159, 49, 82, 191, 230, 89, 154, 189, 175, 89, 168, 62, 240, 104, 1, 63, 188, 195, 23, 62, 81, 134, 112, 62, 46, 34, 111, 191, 80, 96, 221, 61, 235, 91, 21, 190, 116, 213, 42, 190, 102, 216, 157, 62, 96, 177, 71, 62, 202, 48, 78, 61, 68, 218, 238, 62, 182, 191, 6, 62, 147, 10, 214, 62, 4, 217, 98, 190, 154, 83, 133, 62, 238, 148, 168, 191, 31, 238, 8, 59, 26, 231, 138, 189, 20, 81, 34, 62, 158, 60, 35, 62, 163, 164, 162, 190, 61, 236, 5, 191, 219, 247, 46, 190, 34, 234, 19, 190, 84, 178, 0, 190, 236, 86, 29, 190, 50, 44, 0, 62, 202, 180, 235, 61, 187, 219, 126, 189, 60, 218, 81, 190, 204, 115, 38, 189, 176, 238, 150, 187, 253, 161, 21, 62, 139, 122, 65, 190, 251, 49, 138, 189, 87, 25, 44, 61, 244, 104, 253, 61, 98, 113, 196, 189, 162, 152, 164, 188, 224, 125, 14, 190, 7, 141, 166, 61, 6, 162, 237, 189, 186, 254, 29, 190, 166, 20, 60, 61, 240, 7, 195, 61, 122, 109, 21, 188, 115, 248, 138, 60, 250, 59, 42, 62, 208, 159, 26, 190, 139, 106, 148, 61, 173, 88, 226, 189, 250, 171, 70, 190, 33, 234, 150, 60, 133, 64, 231, 189, 100, 137, 164, 189, 54, 61, 105, 189, 41, 133, 210, 60, 155, 184, 6, 190, 203, 225, 135, 189, 183, 242, 103, 188, 11, 104, 158, 59, 67, 123, 141, 189, 34, 231, 152, 187, 108, 63, 130, 61, 55, 188, 187, 61, 12, 141, 3, 190, 200, 16, 217, 187, 31, 221, 12, 61, 14, 81, 107, 189, 27, 8, 96, 188, 22, 51, 194, 187, 253, 90, 195, 61, 30, 54, 48, 190, 14, 27, 217, 189, 151, 196, 6, 190, 56, 193, 2, 190, 42, 187, 164, 188, 97, 101, 236, 60, 170, 247, 156, 189, 113, 231, 40, 190, 197, 85, 204, 188, 76, 237, 190, 61, 116, 113, 201, 189, 10, 70, 130, 61, 88, 54, 75, 189, 59, 0, 32, 190, 57, 254, 190, 190, 252, 87, 141, 62, 188, 224, 25, 191, 109, 237, 100, 61, 195, 147, 99, 62, 141, 205, 11, 190, 79, 83, 138, 190, 172, 33, 156, 61, 107, 40, 46, 191, 84, 241, 29, 191, 54, 192, 13, 63, 5, 242, 185, 190, 13, 202, 194, 60, 28, 66, 253, 62, 175, 208, 79, 61, 99, 13, 115, 62, 14, 56, 20, 61, 102, 64, 156, 62, 171, 199, 159, 61, 116, 60, 156, 191, 78, 18, 44, 191, 229, 177, 93, 191, 74, 229, 173, 62, 96, 37, 144, 62, 176, 146, 9, 62, 243, 116, 37, 189, 38, 29, 87, 191, 160, 184, 194, 62, 23, 222, 247, 190, 109, 72, 177, 189, 183, 55, 139, 190, 166, 208, 251, 190, 58, 214, 12, 62, 118, 66, 111, 189, 93, 241, 201, 187, 99, 103, 47, 61, 62, 36, 60, 189, 180, 154, 234, 188, 28, 211, 124, 62, 182, 37, 162, 189, 171, 179, 172, 61, 27, 93, 110, 62, 67, 167, 211, 190, 230, 8, 15, 62, 204, 193, 153, 62, 199, 177, 127, 61, 72, 137, 237, 189, 166, 3, 64, 187, 209, 110, 79, 62, 134, 192, 181, 190, 150, 205, 148, 189, 24, 224, 61, 189, 53, 108, 103, 62, 202, 4, 57, 189, 27, 155, 10, 191, 79, 240, 114, 188, 76, 7, 54, 62, 117, 250, 160, 61, 19, 28, 255, 61, 98, 140, 20, 190, 1, 132, 27, 62, 126, 200, 195, 61, 149, 75, 62, 62, 255, 199, 3, 61, 109, 203, 196, 61, 176, 211, 29, 190, 108, 120, 164, 61, 193, 139, 242, 189, 113, 223, 60, 190, 30, 232, 16, 61, 121, 220, 84, 190, 10, 220, 38, 62, 238, 176, 7, 190, 48, 108, 160, 61, 191, 176, 210, 61, 223, 135, 163, 61, 73, 9, 7, 190, 219, 201, 155, 188, 199, 216, 160, 184, 232, 157, 146, 189, 16, 53, 24, 190, 117, 2, 245, 189, 88, 225, 27, 190, 104, 148, 27, 61, 3, 12, 167, 61, 98, 150, 214, 60, 124, 170, 180, 189, 54, 37, 226, 189, 132, 112, 172, 61, 245, 191, 2, 62, 212, 169, 194, 188, 239, 245, 118, 61, 133, 63, 92, 61, 49, 158, 3, 60, 106, 125, 234, 61, 59, 194, 81, 190, 186, 118, 213, 189, 62, 4, 224, 190, 32, 229, 40, 191, 103, 234, 96, 61, 114, 206, 70, 62, 202, 122, 229, 190, 30, 157, 99, 190, 207, 105, 206, 60, 101, 45, 38, 191, 198, 89, 176, 62, 125, 82, 255, 189, 181, 122, 41, 191, 60, 0, 210, 62, 59, 200, 50, 190, 153, 136, 141, 190, 58, 255, 164, 61, 230, 84, 129, 62, 97, 7, 21, 190, 137, 220, 130, 62, 147, 117, 156, 190, 171, 216, 15, 189, 235, 29, 199, 190, 201, 10, 4, 60, 46, 237, 194, 62, 61, 207, 186, 62, 57, 149, 60, 189, 106, 73, 59, 190, 65, 150, 110, 191, 248, 180, 195, 190, 173, 118, 122, 61, 104, 181, 72, 190, 112, 232, 207, 189, 4, 230, 100, 190, 48, 108, 27, 191, 121, 187, 139, 191, 248, 251, 188, 189, 21, 135, 168, 62, 111, 198, 22, 191, 146, 99, 54, 62, 62, 160, 182, 61, 126, 149, 33, 62, 217, 194, 113, 190, 207, 82, 74, 190, 133, 240, 125, 191, 156, 74, 9, 63, 37, 205, 56, 190, 88, 195, 17, 191, 141, 152, 163, 189, 125, 198, 113, 62, 71, 77, 210, 60, 251, 81, 170, 62, 198, 130, 180, 61, 97, 167, 135, 62, 161, 47, 195, 189, 238, 159, 5, 62, 148, 89, 81, 62, 230, 7, 171, 62, 114, 217, 179, 189, 86, 13, 38, 191, 59, 58, 174, 191, 209, 41, 156, 190, 102, 182, 188, 62, 58, 181, 64, 60, 238, 168, 167, 62, 117, 75, 13, 62, 98, 166, 76, 61, 151, 248, 102, 62, 220, 6, 64, 190, 221, 162, 49, 62, 95, 3, 150, 61, 4, 151, 219, 61, 113, 210, 212, 189, 35, 72, 76, 62, 137, 242, 166, 189, 81, 42, 208, 188, 83, 184, 188, 61, 166, 108, 143, 62, 15, 16, 194, 190, 196, 231, 177, 189, 202, 223, 3, 61, 244, 171, 157, 189, 233, 103, 122, 62, 135, 144, 134, 62, 92, 118, 75, 62, 46, 52, 139, 189, 26, 101, 142, 189, 228, 35, 15, 189, 54, 15, 149, 61, 79, 79, 15, 190, 115, 176, 71, 61, 185, 251, 26, 62, 6, 85, 215, 60, 42, 102, 56, 189, 235, 226, 154, 61, 15, 251, 139, 62, 86, 179, 226, 190, 165, 216, 33, 191, 202, 177, 76, 62, 45, 243, 129, 191, 45, 163, 110, 188, 38, 182, 220, 61, 125, 76, 166, 190, 72, 17, 53, 191, 250, 200, 32, 61, 97, 12, 56, 191, 117, 121, 58, 191, 188, 158, 4, 63, 128, 212, 254, 190, 177, 120, 3, 191, 38, 61, 214, 190, 194, 166, 233, 62, 91, 196, 53, 62, 59, 161, 50, 61, 177, 123, 247, 61, 132, 209, 95, 61, 177, 137, 155, 190, 158, 29, 88, 191, 58, 86, 81, 191, 81, 202, 7, 63, 187, 241, 112, 62, 70, 46, 199, 62, 82, 201, 151, 189, 163, 150, 131, 191, 59, 214, 233, 62, 121, 29, 182, 190, 103, 200, 188, 61, 177, 74, 29, 190, 187, 82, 6, 61, 82, 186, 241, 61, 129, 115, 36, 62, 49, 225, 161, 189, 67, 136, 56, 62, 1, 157, 94, 190, 10, 189, 229, 189, 39, 200, 182, 61, 179, 71, 231, 61, 113, 2, 71, 62, 122, 248, 62, 189, 113, 133, 33, 191, 56, 146, 135, 188, 15, 153, 25, 62, 235, 52, 230, 62, 120, 86, 16, 62, 57, 36, 39, 189, 10, 17, 207, 189, 166, 223, 4, 191, 46, 61, 220, 189, 230, 170, 136, 59, 16, 13, 101, 60, 69, 77, 169, 60, 239, 212, 68, 191, 189, 235, 65, 191, 167, 165, 99, 189, 103, 180, 209, 61, 198, 51, 176, 61, 223, 86, 12, 190, 43, 228, 166, 189, 122, 202, 19, 190, 7, 212, 24, 62, 34, 149, 27, 62, 105, 46, 168, 190, 237, 225, 56, 60, 23, 155, 77, 190, 83, 216, 226, 190, 148, 48, 161, 61, 208, 79, 69, 62, 109, 63, 56, 61, 133, 11, 100, 62, 221, 222, 65, 62, 173, 231, 75, 191, 143, 96, 75, 191, 202, 160, 206, 190, 84, 32, 210, 62, 250, 116, 194, 190, 181, 192, 167, 190, 25, 178, 104, 190, 189, 189, 37, 191, 229, 77, 31, 62, 137, 36, 42, 62, 33, 248, 22, 62, 43, 15, 7, 63, 223, 112, 249, 61, 80, 41, 12, 191, 203, 9, 190, 60, 81, 12, 7, 191, 12, 114, 49, 62, 95, 54, 73, 60, 192, 157, 208, 189, 194, 144, 212, 61, 167, 218, 158, 62, 28, 1, 145, 189, 228, 64, 37, 191, 122, 80, 228, 62, 55, 98, 4, 61, 113, 112, 7, 61, 181, 160, 82, 191, 91, 40, 185, 61, 9, 89, 16, 62, 91, 226, 5, 189, 214, 248, 75, 62, 88, 197, 2, 62, 160, 82, 129, 191, 53, 53, 237, 189, 73, 103, 51, 61, 223, 31, 205, 62, 40, 136, 221, 190, 201, 224, 203, 190, 112, 193, 244, 190, 182, 130, 35, 191, 184, 223, 190, 62, 182, 216, 107, 62, 189, 233, 230, 61, 167, 218, 153, 189, 148, 216, 118, 62, 81, 134, 151, 188, 68, 113, 139, 189, 205, 143, 38, 191, 239, 213, 150, 189, 243, 125, 246, 61, 139, 145, 56, 61, 239, 180, 41, 62, 55, 60, 201, 62, 71, 61, 133, 60, 107, 39, 19, 191, 163, 137, 184, 61, 188, 50, 18, 62, 7, 59, 181, 190, 48, 203, 172, 61, 193, 157, 68, 190, 219, 34, 208, 62, 2, 218, 223, 61, 37, 205, 27, 190, 192, 9, 27, 190, 87, 238, 50, 191, 153, 75, 127, 62, 209, 18, 72, 191, 40, 84, 224, 61, 12, 111, 38, 62, 119, 243, 164, 62, 45, 18, 90, 62, 15, 119, 4, 191, 207, 158, 109, 190, 5, 109, 52, 191, 140, 12, 143, 61, 74, 202, 11, 62, 114, 79, 207, 189, 25, 141, 189, 61, 27, 175, 167, 61, 121, 165, 248, 190, 84, 196, 252, 61, 208, 121, 206, 188, 87, 163, 154, 62, 29, 11, 205, 61, 109, 154, 44, 190, 243, 61, 139, 62, 63, 144, 105, 61, 230, 182, 152, 190, 18, 191, 6, 188, 89, 26, 119, 190, 58, 172, 216, 61, 151, 30, 150, 190, 196, 66, 25, 190, 225, 243, 93, 61, 188, 70, 188, 189, 171, 84, 201, 189, 218, 50, 61, 191, 114, 97, 40, 62, 55, 96, 52, 190, 30, 21, 241, 189, 249, 181, 167, 62, 192, 23, 131, 62, 53, 238, 237, 60, 75, 73, 90, 189, 65, 180, 226, 189, 134, 72, 28, 190, 136, 161, 131, 61, 214, 196, 186, 190, 190, 116, 142, 61, 158, 201, 8, 62, 25, 39, 60, 189, 107, 147, 246, 189, 37, 222, 184, 60, 18, 0, 69, 189, 228, 142, 60, 62, 166, 106, 155, 189, 116, 129, 199, 189, 57, 60, 27, 189, 95, 200, 221, 187, 128, 77, 156, 190, 100, 136, 194, 189, 9, 9, 101, 191, 147, 144, 12, 190, 88, 56, 217, 62, 253, 250, 86, 191, 178, 163, 193, 189, 197, 212, 84, 62, 105, 227, 81, 61, 250, 121, 155, 191, 68, 53, 42, 62, 109, 201, 134, 191, 121, 83, 208, 61, 43, 142, 129, 190, 168, 127, 183, 62, 0, 5, 7, 189, 55, 5, 36, 61, 241, 86, 166, 62, 254, 44, 40, 62, 201, 172, 64, 191, 171, 0, 190, 62, 234, 16, 110, 191, 143, 162, 12, 62, 117, 131, 176, 190, 255, 72, 94, 62, 119, 187, 62, 188, 239, 194, 75, 191, 166, 201, 236, 190, 14, 248, 240, 61, 71, 95, 209, 61, 217, 166, 8, 191, 153, 160, 54, 190, 247, 153, 98, 62, 226, 93, 166, 60, 167, 64, 176, 189, 140, 163, 100, 188, 138, 27, 172, 189, 227, 196, 4, 190, 125, 138, 157, 61, 104, 35, 114, 189, 180, 31, 167, 189, 34, 31, 72, 62, 146, 14, 142, 191, 2, 60, 100, 59, 106, 64, 82, 62, 36, 42, 155, 60, 47, 208, 22, 62, 13, 92, 168, 61, 83, 243, 209, 190, 164, 101, 75, 190, 218, 229, 175, 61, 196, 94, 132, 189, 73, 102, 129, 61, 215, 37, 109, 61, 225, 157, 44, 191, 178, 65, 3, 62, 50, 72, 13, 191, 160, 220, 250, 60, 240, 53, 241, 62, 84, 209, 146, 190, 246, 219, 94, 190, 100, 205, 128, 190, 95, 5, 111, 189, 78, 19, 131, 190, 89, 13, 145, 190, 92, 79, 91, 62, 140, 219, 112, 190, 51, 163, 33, 61, 140, 213, 123, 191, 98, 91, 13, 62, 209, 158, 52, 62, 47, 221, 41, 61, 161, 186, 27, 189, 98, 250, 174, 191, 6, 81, 177, 188, 95, 233, 117, 190, 58, 107, 5, 190, 189, 50, 195, 62, 145, 78, 19, 62, 105, 0, 136, 62, 225, 21, 48, 190, 139, 10, 139, 190, 225, 225, 39, 191, 61, 168, 184, 61, 47, 92, 76, 190, 226, 28, 197, 189, 223, 31, 28, 190, 99, 10, 143, 61, 71, 18, 24, 191, 52, 115, 143, 62, 224, 18, 98, 62, 166, 171, 163, 62, 14, 94, 16, 189, 96, 185, 159, 191, 96, 123, 101, 62, 101, 135, 101, 62, 140, 199, 139, 189, 118, 84, 166, 62, 195, 106, 57, 61, 218, 184, 98, 190, 98, 103, 245, 61, 4, 104, 217, 188, 77, 250, 92, 60, 35, 138, 141, 62, 97, 147, 27, 61, 170, 98, 130, 191, 218, 108, 215, 61, 152, 238, 130, 62, 51, 143, 193, 62, 170, 161, 7, 191, 248, 196, 133, 61, 40, 64, 58, 190, 4, 239, 18, 191, 171, 205, 45, 62, 83, 172, 48, 62, 46, 134, 179, 60, 213, 20, 31, 62, 124, 114, 8, 189, 160, 45, 0, 62, 38, 179, 211, 60, 137, 221, 73, 191, 226, 28, 217, 190, 162, 198, 216, 60, 189, 214, 126, 188, 77, 215, 75, 187, 190, 80, 79, 62, 109, 197, 12, 58, 42, 188, 108, 190, 106, 40, 224, 189, 63, 139, 255, 61, 17, 170, 62, 191, 74, 188, 142, 60, 149, 2, 63, 191, 244, 9, 129, 62, 199, 104, 92, 61, 255, 120, 192, 61, 170, 160, 190, 189, 226, 4, 6, 191, 56, 163, 0, 190, 103, 32, 77, 191, 36, 254, 194, 189, 216, 74, 8, 62, 2, 151, 30, 61, 19, 40, 98, 62, 96, 246, 199, 190, 4, 91, 234, 190, 226, 106, 204, 190, 104, 74, 95, 190, 241, 111, 121, 62, 5, 8, 116, 190, 85, 122, 205, 188, 15, 238, 210, 62, 216, 89, 139, 190, 162, 174, 172, 60, 229, 116, 250, 189, 112, 84, 217, 62, 57, 80, 98, 61, 212, 62, 254, 190, 132, 250, 128, 62, 160, 179, 198, 189, 54, 148, 94, 61, 98, 116, 183, 189, 42, 84, 180, 62, 45, 3, 70, 190, 75, 66, 180, 190, 6, 201, 161, 60, 209, 252, 133, 62, 13, 56, 19, 191, 14, 151, 85, 62, 239, 78, 11, 63, 31, 89, 85, 190, 197, 38, 33, 61, 253, 168, 13, 62, 226, 127, 61, 62, 224, 105, 62, 62, 45, 157, 16, 191, 215, 197, 236, 61, 211, 31, 69, 190, 240, 108, 27, 60, 179, 90, 175, 61, 123, 85, 100, 62, 184, 79, 33, 62, 208, 144, 249, 61, 165, 162, 248, 61, 162, 145, 227, 62, 70, 98, 51, 191, 91, 123, 177, 62, 204, 180, 0, 190, 239, 78, 190, 60, 36, 94, 67, 190, 2, 93, 155, 189, 76, 157, 237, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 154, 116, 186, 207, 30, 41, 62, 102, 194, 150, 189, 24, 243, 20, 62, 81, 193, 31, 189, 27, 137, 152, 61, 9, 202, 148, 60, 155, 113, 19, 62, 13, 255, 41, 61, 37, 31, 120, 62, 187, 152, 177, 62, 94, 89, 192, 61, 119, 132, 50, 190, 160, 70, 197, 60, 188, 95, 128, 62, 74, 117, 10, 190, 242, 112, 169, 189, 237, 138, 154, 187, 207, 203, 23, 61, 6, 190, 203, 62, 183, 34, 56, 62, 95, 108, 130, 189, 129, 138, 230, 61, 138, 185, 91, 62, 91, 43, 106, 189, 242, 102, 139, 61, 15, 139, 4, 62, 128, 115, 6, 190, 85, 47, 19, 62, 160, 185, 215, 62, 41, 191, 185, 189, 249, 1, 80, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 54, 86, 191, 204, 204, 207, 190, 135, 151, 148, 62, 47, 56, 248, 190, 60, 109, 182, 189, 134, 46, 19, 191, 133, 29, 213, 190, 183, 67, 9, 63, 214, 100, 117, 61, 176, 124, 136, 62, 249, 130, 33, 191, 60, 87, 174, 63, 132, 168, 40, 188, 84, 150, 37, 62, 99, 171, 84, 63, 124, 189, 9, 61, 218, 254, 16, 190, 127, 8, 218, 62, 112, 144, 43, 63, 49, 59, 187, 189, 164, 242, 144, 63, 209, 2, 173, 190, 224, 136, 106, 191, 176, 1, 77, 191, 69, 60, 159, 62, 17, 61, 32, 61, 119, 100, 53, 191, 132, 4, 201, 190, 189, 207, 46, 63, 23, 223, 192, 190, 5, 195, 245, 62, 235, 35, 180, 62, 146, 77, 192, 62, 255, 111, 3, 190, 106, 78, 176, 61, 37, 59, 95, 190, 133, 247, 253, 189, 212, 239, 63, 189, 13, 133, 134, 61, 48, 163, 39, 61, 142, 52, 21, 62, 252, 5, 113, 190, 19, 31, 137, 189, 32, 69, 52, 62, 82, 140, 150, 189, 32, 15, 212, 189, 73, 231, 40, 61, 223, 11, 132, 62, 19, 153, 213, 189, 59, 136, 46, 62, 97, 57, 86, 61, 208, 60, 125, 190, 98, 99, 177, 62, 234, 238, 195, 188, 138, 164, 165, 62, 82, 221, 229, 189, 78, 242, 230, 190, 205, 89, 229, 189, 253, 2, 95, 190, 86, 198, 81, 63, 204, 98, 104, 190, 88, 174, 236, 189, 187, 233, 223, 189, 148, 216, 202, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 175, 24, 189, 110, 146, 244, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {39, 222, 231, 191, 50, 93, 245, 63, 4, 192, 126, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {22, 199, 157, 61, 168, 191, 220, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0042/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}