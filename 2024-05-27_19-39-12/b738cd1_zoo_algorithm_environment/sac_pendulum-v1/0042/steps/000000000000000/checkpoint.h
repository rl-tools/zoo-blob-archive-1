// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {170, 154, 56, 62, 200, 184, 41, 188, 191, 56, 131, 62, 79, 110, 200, 189, 226, 6, 13, 191, 36, 147, 182, 190, 144, 54, 182, 190, 121, 9, 50, 188, 52, 54, 67, 190, 191, 126, 125, 188, 147, 215, 109, 190, 10, 212, 163, 62, 70, 205, 71, 190, 94, 88, 120, 188, 54, 61, 221, 62, 240, 176, 19, 61, 188, 190, 77, 190, 158, 53, 17, 191, 79, 191, 58, 62, 78, 89, 6, 63, 72, 137, 225, 190, 44, 55, 206, 190, 33, 151, 210, 190, 166, 75, 162, 62, 137, 176, 7, 191, 21, 41, 51, 62, 210, 41, 228, 190, 209, 163, 242, 60, 118, 131, 7, 62, 54, 202, 119, 62, 86, 0, 148, 190, 131, 158, 251, 190, 197, 245, 249, 189, 59, 105, 221, 190, 77, 214, 200, 190, 35, 68, 7, 191, 245, 19, 157, 62, 107, 195, 7, 63, 76, 217, 72, 61, 29, 198, 189, 62, 243, 19, 116, 189, 113, 31, 201, 190, 143, 163, 234, 61, 198, 224, 238, 190, 63, 146, 246, 61, 6, 246, 101, 62, 194, 8, 177, 190, 23, 33, 129, 62, 193, 31, 153, 190, 184, 236, 131, 189, 199, 96, 237, 62, 249, 97, 194, 190, 60, 206, 15, 61, 148, 84, 171, 60, 89, 102, 115, 190, 56, 7, 165, 62, 146, 71, 11, 63, 141, 201, 204, 190, 159, 233, 144, 62, 226, 94, 225, 190, 126, 57, 1, 190, 50, 145, 87, 62, 167, 241, 244, 61, 125, 0, 254, 190, 142, 105, 58, 62, 28, 171, 181, 190, 73, 70, 172, 190, 71, 181, 11, 191, 217, 2, 194, 190, 157, 195, 253, 190, 163, 48, 194, 189, 39, 49, 17, 190, 87, 65, 186, 190, 189, 180, 190, 61, 136, 255, 213, 62, 244, 100, 224, 190, 184, 52, 49, 190, 222, 192, 70, 62, 0, 236, 191, 61, 209, 101, 130, 59, 182, 21, 186, 189, 144, 141, 154, 189, 242, 0, 248, 190, 169, 52, 191, 190, 111, 117, 106, 190, 8, 223, 217, 62, 200, 206, 172, 190, 31, 235, 207, 190, 244, 120, 137, 62, 13, 36, 0, 62, 16, 172, 181, 62, 11, 89, 219, 190, 237, 255, 185, 62, 4, 102, 210, 60, 150, 128, 73, 190, 146, 94, 89, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 179, 19, 191, 96, 204, 241, 62, 181, 153, 171, 190, 196, 222, 136, 62, 91, 126, 212, 62, 13, 149, 5, 63, 226, 196, 7, 190, 49, 95, 229, 62, 30, 167, 125, 190, 63, 81, 175, 190, 146, 12, 17, 62, 129, 71, 15, 191, 219, 236, 133, 62, 203, 254, 162, 190, 0, 116, 248, 62, 30, 136, 236, 62, 228, 234, 175, 189, 217, 21, 150, 62, 193, 16, 245, 62, 242, 18, 51, 189, 25, 93, 227, 61, 37, 138, 67, 190, 42, 233, 12, 63, 197, 59, 240, 190, 4, 193, 129, 62, 110, 19, 234, 190, 90, 4, 2, 62, 97, 73, 14, 63, 10, 54, 205, 62, 159, 191, 218, 62, 54, 236, 243, 62, 97, 144, 203, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 78, 95, 61, 4, 30, 2, 190, 133, 18, 39, 190, 101, 44, 78, 188, 101, 88, 146, 189, 115, 97, 2, 61, 100, 91, 121, 61, 56, 2, 129, 187, 124, 7, 98, 189, 184, 185, 181, 189, 76, 25, 75, 189, 52, 127, 53, 189, 82, 31, 23, 190, 159, 252, 21, 62, 220, 130, 59, 189, 55, 195, 157, 189, 51, 236, 222, 60, 240, 114, 17, 190, 40, 151, 151, 189, 199, 57, 247, 61, 55, 205, 50, 190, 227, 29, 36, 62, 32, 102, 122, 189, 37, 169, 233, 188, 51, 178, 1, 61, 2, 230, 164, 61, 58, 208, 31, 190, 224, 205, 148, 188, 123, 154, 51, 190, 114, 186, 166, 61, 255, 42, 58, 60, 194, 164, 99, 61, 182, 37, 174, 61, 163, 155, 173, 61, 63, 165, 202, 189, 159, 235, 196, 61, 5, 151, 104, 189, 217, 80, 14, 190, 90, 45, 175, 61, 197, 192, 79, 61, 51, 88, 76, 61, 122, 3, 23, 190, 235, 202, 39, 62, 15, 205, 43, 62, 123, 215, 32, 190, 55, 192, 151, 61, 13, 27, 10, 62, 176, 63, 224, 61, 174, 70, 126, 61, 152, 135, 226, 60, 74, 83, 42, 190, 245, 250, 147, 188, 188, 21, 206, 61, 191, 146, 30, 190, 252, 126, 45, 190, 252, 231, 176, 189, 174, 243, 200, 189, 240, 188, 22, 190, 3, 238, 184, 61, 221, 223, 46, 190, 238, 173, 170, 189, 40, 112, 185, 61, 126, 123, 229, 61, 220, 179, 249, 189, 229, 81, 8, 62, 101, 0, 20, 62, 245, 153, 211, 189, 130, 161, 13, 62, 235, 48, 92, 188, 36, 186, 54, 61, 28, 237, 220, 189, 246, 194, 152, 188, 109, 152, 38, 190, 133, 120, 23, 61, 221, 12, 172, 188, 46, 114, 13, 190, 28, 83, 9, 190, 149, 152, 151, 188, 231, 142, 219, 61, 147, 93, 216, 61, 66, 66, 139, 61, 119, 168, 24, 62, 87, 2, 47, 189, 116, 46, 48, 189, 243, 101, 197, 61, 163, 235, 199, 188, 42, 75, 44, 189, 157, 144, 14, 62, 214, 104, 232, 61, 28, 14, 17, 190, 149, 167, 215, 60, 24, 25, 25, 62, 158, 163, 219, 61, 3, 71, 128, 61, 17, 33, 44, 190, 112, 51, 152, 61, 181, 45, 234, 60, 194, 112, 245, 188, 133, 92, 193, 189, 201, 244, 165, 189, 164, 158, 31, 189, 102, 186, 47, 62, 144, 150, 67, 189, 99, 177, 118, 60, 136, 19, 168, 189, 107, 108, 232, 189, 174, 140, 221, 60, 63, 211, 5, 190, 62, 130, 18, 62, 173, 200, 19, 62, 101, 106, 15, 190, 190, 163, 134, 61, 200, 29, 146, 61, 245, 130, 18, 190, 136, 68, 39, 62, 170, 11, 24, 61, 171, 213, 12, 190, 84, 17, 142, 58, 131, 193, 43, 190, 218, 85, 39, 190, 41, 6, 178, 189, 220, 159, 162, 189, 113, 167, 162, 61, 35, 78, 39, 62, 232, 51, 93, 189, 55, 195, 170, 189, 244, 60, 236, 61, 217, 186, 40, 62, 84, 177, 66, 61, 39, 69, 29, 190, 164, 128, 170, 59, 189, 6, 255, 61, 243, 25, 27, 190, 167, 96, 220, 189, 182, 226, 229, 189, 105, 169, 166, 187, 172, 220, 158, 61, 163, 85, 32, 62, 227, 253, 176, 61, 53, 241, 190, 61, 10, 204, 220, 60, 0, 160, 190, 61, 129, 113, 207, 189, 186, 61, 9, 189, 179, 78, 149, 61, 190, 1, 242, 189, 199, 249, 4, 190, 125, 213, 102, 189, 174, 68, 155, 187, 229, 40, 182, 189, 147, 235, 159, 189, 235, 80, 3, 187, 134, 78, 182, 189, 96, 18, 5, 62, 143, 130, 9, 190, 89, 172, 248, 61, 173, 75, 25, 61, 83, 178, 44, 61, 73, 130, 204, 61, 119, 191, 216, 187, 4, 208, 36, 190, 155, 171, 59, 189, 89, 64, 189, 188, 33, 254, 149, 189, 247, 16, 27, 62, 86, 64, 235, 189, 137, 187, 30, 62, 239, 239, 50, 189, 251, 137, 209, 61, 152, 20, 190, 189, 108, 148, 211, 188, 149, 178, 161, 61, 128, 57, 189, 61, 129, 53, 150, 61, 146, 100, 19, 190, 124, 254, 34, 190, 203, 95, 210, 61, 13, 143, 50, 61, 132, 100, 230, 61, 243, 190, 156, 189, 225, 217, 234, 189, 252, 141, 196, 189, 241, 189, 252, 189, 48, 217, 35, 62, 1, 150, 5, 62, 200, 74, 49, 62, 242, 79, 42, 62, 20, 185, 32, 62, 189, 118, 200, 61, 5, 202, 255, 60, 238, 47, 231, 61, 68, 200, 164, 61, 26, 177, 152, 189, 250, 9, 161, 189, 118, 62, 25, 60, 49, 222, 5, 190, 93, 245, 23, 62, 60, 186, 16, 62, 6, 49, 206, 189, 119, 54, 83, 188, 70, 243, 127, 61, 26, 139, 49, 190, 88, 10, 67, 189, 102, 107, 16, 62, 7, 146, 23, 62, 206, 1, 12, 62, 95, 182, 24, 190, 249, 20, 17, 190, 131, 244, 117, 189, 174, 125, 50, 62, 234, 27, 52, 61, 24, 116, 224, 61, 185, 99, 211, 188, 131, 213, 236, 61, 129, 66, 216, 61, 150, 64, 190, 189, 229, 189, 178, 188, 180, 39, 160, 189, 76, 161, 37, 190, 252, 209, 232, 188, 27, 133, 63, 188, 23, 135, 227, 61, 13, 192, 205, 61, 184, 126, 149, 189, 66, 190, 99, 61, 131, 231, 78, 61, 75, 184, 210, 61, 211, 117, 86, 61, 96, 211, 186, 187, 223, 137, 60, 188, 237, 95, 78, 188, 63, 193, 154, 61, 10, 156, 30, 61, 255, 95, 151, 189, 13, 95, 248, 61, 187, 238, 12, 61, 200, 3, 4, 190, 178, 197, 34, 62, 198, 59, 21, 62, 226, 123, 18, 189, 117, 211, 183, 188, 19, 115, 199, 61, 239, 12, 37, 190, 208, 140, 127, 189, 114, 213, 68, 61, 43, 245, 21, 62, 137, 35, 46, 190, 130, 1, 243, 188, 155, 188, 73, 189, 100, 151, 229, 189, 229, 40, 134, 189, 61, 33, 184, 188, 200, 127, 48, 190, 81, 153, 247, 61, 144, 61, 116, 61, 36, 53, 14, 190, 140, 150, 164, 189, 84, 55, 0, 190, 226, 190, 148, 189, 19, 153, 7, 62, 131, 252, 26, 189, 103, 35, 187, 61, 224, 236, 158, 189, 133, 31, 255, 60, 223, 189, 36, 62, 116, 186, 104, 189, 81, 167, 139, 57, 64, 108, 244, 189, 57, 10, 34, 190, 73, 55, 22, 190, 75, 42, 50, 62, 8, 175, 91, 58, 152, 170, 107, 189, 69, 0, 14, 189, 170, 175, 84, 188, 33, 245, 14, 189, 195, 155, 70, 189, 108, 47, 116, 187, 242, 35, 50, 189, 247, 131, 39, 190, 199, 214, 13, 62, 140, 232, 8, 190, 209, 233, 196, 61, 67, 170, 234, 189, 180, 7, 132, 60, 180, 192, 100, 61, 104, 117, 75, 189, 231, 232, 217, 189, 181, 14, 148, 189, 27, 56, 252, 61, 198, 78, 21, 62, 83, 89, 249, 61, 12, 1, 152, 189, 160, 225, 187, 189, 228, 116, 37, 188, 121, 116, 185, 188, 236, 58, 128, 189, 157, 55, 27, 190, 89, 3, 229, 61, 164, 31, 172, 189, 15, 31, 192, 189, 75, 25, 33, 190, 29, 112, 199, 61, 206, 72, 199, 61, 100, 13, 209, 189, 15, 125, 31, 190, 112, 89, 47, 60, 36, 34, 168, 189, 131, 68, 0, 62, 136, 80, 18, 190, 61, 99, 14, 190, 91, 26, 6, 189, 47, 239, 6, 190, 70, 221, 245, 188, 176, 185, 197, 61, 98, 156, 44, 190, 91, 114, 92, 189, 179, 32, 39, 190, 32, 58, 14, 62, 248, 50, 3, 190, 92, 152, 183, 189, 84, 236, 38, 62, 201, 191, 31, 61, 95, 90, 199, 59, 182, 141, 149, 61, 82, 38, 9, 62, 77, 228, 203, 188, 109, 249, 109, 189, 215, 236, 40, 61, 85, 121, 48, 190, 216, 248, 48, 190, 144, 125, 12, 62, 29, 193, 230, 59, 104, 193, 172, 189, 61, 190, 193, 60, 107, 70, 197, 61, 109, 178, 208, 60, 164, 99, 138, 60, 156, 94, 170, 60, 4, 240, 2, 190, 178, 104, 37, 62, 123, 239, 132, 189, 229, 30, 0, 62, 90, 105, 163, 189, 39, 206, 129, 188, 7, 50, 179, 189, 42, 244, 21, 190, 19, 202, 243, 189, 144, 218, 185, 61, 216, 20, 73, 188, 181, 252, 26, 190, 8, 5, 50, 186, 87, 221, 13, 62, 63, 101, 136, 189, 186, 45, 110, 60, 123, 206, 184, 60, 22, 25, 22, 62, 84, 152, 55, 60, 204, 24, 223, 189, 217, 77, 30, 190, 75, 18, 165, 59, 13, 65, 43, 62, 32, 12, 113, 61, 38, 96, 35, 190, 219, 60, 24, 190, 163, 47, 4, 190, 224, 190, 51, 62, 121, 205, 5, 62, 152, 121, 35, 190, 182, 144, 70, 188, 25, 115, 56, 189, 65, 47, 227, 61, 233, 135, 231, 61, 155, 104, 148, 61, 224, 150, 142, 189, 121, 171, 196, 61, 1, 31, 2, 60, 40, 93, 38, 190, 75, 215, 84, 189, 168, 102, 138, 189, 217, 120, 49, 62, 151, 31, 126, 189, 190, 219, 221, 189, 255, 177, 224, 61, 68, 59, 46, 190, 39, 39, 12, 190, 61, 218, 253, 189, 38, 86, 235, 189, 248, 209, 38, 62, 12, 182, 238, 61, 212, 65, 61, 189, 61, 96, 46, 190, 162, 243, 4, 189, 67, 7, 132, 187, 158, 175, 39, 62, 55, 46, 44, 190, 250, 180, 124, 189, 117, 235, 63, 61, 141, 222, 10, 62, 229, 193, 172, 189, 222, 237, 4, 60, 42, 20, 226, 189, 124, 26, 252, 61, 121, 118, 197, 189, 119, 100, 27, 190, 41, 37, 132, 61, 154, 53, 218, 61, 10, 7, 80, 187, 57, 110, 23, 61, 13, 128, 43, 62, 72, 17, 20, 190, 161, 61, 166, 61, 153, 20, 206, 189, 92, 53, 38, 190, 68, 146, 201, 60, 236, 41, 218, 189, 100, 137, 164, 189, 54, 61, 105, 189, 41, 133, 210, 60, 155, 184, 6, 190, 203, 225, 135, 189, 183, 242, 103, 188, 11, 104, 158, 59, 67, 123, 141, 189, 34, 231, 152, 187, 108, 63, 130, 61, 55, 188, 187, 61, 12, 141, 3, 190, 200, 16, 217, 187, 31, 221, 12, 61, 14, 81, 107, 189, 27, 8, 96, 188, 22, 51, 194, 187, 253, 90, 195, 61, 30, 54, 48, 190, 14, 27, 217, 189, 151, 196, 6, 190, 56, 193, 2, 190, 42, 187, 164, 188, 97, 101, 236, 60, 170, 247, 156, 189, 113, 231, 40, 190, 197, 85, 204, 188, 76, 237, 190, 61, 116, 113, 201, 189, 10, 70, 130, 61, 88, 54, 75, 189, 59, 0, 32, 190, 137, 18, 32, 62, 128, 122, 220, 60, 38, 91, 22, 62, 128, 47, 126, 59, 181, 83, 8, 62, 174, 100, 190, 189, 221, 19, 242, 189, 33, 87, 112, 187, 187, 248, 241, 189, 126, 202, 34, 62, 217, 133, 203, 61, 190, 6, 6, 61, 27, 39, 47, 62, 162, 170, 95, 61, 128, 33, 118, 189, 197, 41, 36, 62, 186, 150, 206, 187, 200, 121, 214, 61, 124, 139, 236, 61, 68, 160, 21, 190, 6, 234, 48, 189, 18, 43, 167, 189, 122, 84, 176, 189, 237, 73, 13, 61, 175, 184, 166, 189, 98, 243, 56, 61, 203, 63, 52, 190, 81, 145, 182, 61, 212, 152, 225, 189, 70, 198, 41, 190, 166, 83, 45, 190, 6, 161, 11, 190, 36, 130, 0, 60, 87, 16, 74, 189, 228, 103, 36, 189, 65, 185, 178, 188, 217, 135, 39, 189, 115, 147, 237, 189, 209, 139, 45, 62, 229, 106, 27, 190, 143, 55, 192, 59, 37, 115, 83, 189, 77, 112, 130, 188, 92, 89, 223, 60, 27, 229, 210, 60, 245, 143, 142, 189, 238, 58, 18, 189, 85, 163, 44, 189, 144, 162, 15, 62, 253, 175, 56, 185, 150, 246, 6, 190, 250, 212, 26, 190, 30, 38, 147, 61, 43, 101, 30, 190, 189, 245, 154, 189, 217, 62, 61, 61, 46, 190, 250, 61, 229, 21, 83, 61, 231, 64, 132, 189, 234, 91, 132, 61, 158, 194, 192, 61, 151, 100, 199, 61, 136, 36, 167, 61, 241, 152, 252, 189, 85, 198, 39, 62, 76, 245, 0, 190, 70, 75, 250, 61, 82, 163, 197, 189, 255, 93, 51, 190, 131, 190, 143, 61, 213, 200, 40, 190, 148, 234, 45, 62, 62, 46, 177, 189, 191, 81, 255, 61, 150, 218, 6, 62, 172, 198, 253, 61, 205, 183, 34, 190, 227, 121, 28, 61, 251, 227, 52, 60, 154, 145, 96, 189, 11, 46, 218, 189, 200, 61, 221, 189, 185, 2, 5, 190, 109, 42, 158, 61, 196, 79, 203, 61, 8, 199, 136, 61, 122, 129, 125, 189, 7, 34, 72, 189, 165, 200, 214, 61, 167, 177, 44, 62, 54, 169, 84, 59, 165, 221, 185, 61, 22, 174, 176, 61, 95, 74, 29, 60, 24, 27, 6, 62, 182, 198, 7, 190, 47, 245, 14, 190, 243, 171, 31, 62, 181, 59, 43, 62, 228, 255, 142, 61, 118, 223, 180, 61, 248, 107, 254, 61, 241, 66, 39, 190, 187, 151, 132, 61, 13, 193, 224, 189, 231, 135, 10, 61, 140, 136, 172, 189, 3, 30, 161, 61, 46, 198, 151, 189, 35, 16, 226, 60, 81, 192, 128, 189, 252, 127, 44, 62, 87, 155, 87, 58, 24, 166, 13, 61, 25, 190, 148, 188, 71, 245, 72, 189, 26, 23, 203, 189, 48, 127, 148, 188, 24, 66, 208, 61, 58, 36, 47, 59, 181, 49, 110, 60, 44, 129, 29, 61, 219, 105, 59, 188, 71, 146, 165, 61, 83, 16, 129, 61, 81, 236, 160, 189, 172, 197, 205, 189, 34, 45, 219, 189, 2, 178, 26, 62, 244, 231, 36, 62, 58, 116, 42, 62, 46, 188, 11, 60, 252, 80, 29, 62, 78, 56, 61, 61, 210, 240, 142, 60, 180, 90, 42, 62, 77, 77, 15, 62, 236, 53, 39, 190, 72, 236, 36, 190, 197, 184, 184, 189, 184, 57, 225, 61, 75, 147, 96, 189, 99, 188, 8, 190, 135, 236, 202, 61, 18, 165, 138, 61, 48, 226, 116, 61, 89, 53, 205, 60, 111, 213, 141, 189, 57, 31, 137, 189, 111, 111, 129, 61, 251, 100, 17, 62, 146, 217, 232, 189, 195, 231, 129, 61, 35, 76, 225, 61, 33, 139, 47, 190, 102, 26, 212, 189, 70, 118, 184, 189, 76, 81, 246, 61, 34, 145, 26, 62, 56, 210, 50, 62, 104, 87, 212, 61, 71, 88, 154, 189, 76, 223, 19, 62, 7, 175, 212, 189, 119, 221, 194, 61, 16, 69, 64, 61, 78, 75, 33, 62, 244, 255, 148, 189, 182, 192, 43, 62, 56, 97, 229, 61, 31, 57, 198, 61, 193, 17, 225, 60, 167, 240, 161, 60, 60, 218, 200, 189, 211, 192, 29, 189, 17, 175, 84, 61, 9, 250, 4, 62, 71, 175, 149, 61, 127, 237, 24, 62, 217, 182, 15, 62, 129, 0, 233, 189, 132, 10, 254, 189, 70, 194, 215, 61, 190, 20, 33, 61, 13, 226, 43, 62, 126, 8, 3, 62, 248, 137, 207, 187, 98, 12, 238, 188, 49, 140, 6, 190, 84, 211, 65, 189, 23, 196, 52, 62, 44, 229, 189, 189, 166, 247, 50, 190, 209, 42, 175, 189, 151, 114, 249, 60, 207, 207, 45, 190, 118, 185, 15, 61, 203, 2, 93, 60, 149, 188, 182, 61, 204, 120, 12, 190, 31, 145, 97, 189, 172, 138, 38, 61, 202, 178, 88, 189, 205, 177, 106, 60, 255, 170, 129, 188, 73, 3, 35, 190, 255, 225, 23, 62, 162, 214, 33, 189, 100, 213, 191, 189, 159, 183, 169, 61, 187, 250, 20, 62, 49, 89, 22, 61, 210, 181, 247, 188, 79, 180, 30, 190, 20, 40, 29, 62, 124, 163, 207, 189, 171, 76, 7, 62, 206, 11, 90, 60, 24, 0, 253, 189, 97, 132, 36, 62, 83, 183, 21, 62, 238, 22, 220, 61, 12, 188, 4, 190, 64, 18, 74, 60, 233, 54, 135, 188, 218, 170, 3, 62, 149, 152, 25, 62, 84, 222, 24, 62, 191, 1, 0, 190, 5, 192, 48, 190, 184, 204, 222, 189, 166, 231, 38, 62, 18, 227, 189, 61, 38, 40, 23, 190, 18, 205, 134, 189, 93, 90, 146, 60, 227, 197, 196, 61, 74, 107, 23, 62, 37, 18, 3, 62, 16, 44, 194, 189, 79, 41, 137, 188, 147, 184, 190, 60, 67, 6, 192, 189, 116, 102, 142, 189, 30, 191, 244, 189, 112, 83, 95, 60, 250, 238, 49, 188, 168, 0, 192, 189, 194, 152, 225, 61, 30, 148, 39, 62, 217, 162, 39, 190, 42, 239, 150, 189, 206, 86, 26, 190, 167, 253, 240, 60, 49, 135, 33, 62, 25, 145, 250, 189, 176, 123, 245, 189, 43, 141, 170, 188, 235, 243, 221, 61, 153, 119, 43, 189, 179, 180, 170, 187, 102, 84, 255, 61, 165, 95, 12, 190, 246, 181, 18, 62, 111, 167, 154, 189, 216, 28, 167, 61, 242, 171, 133, 188, 162, 39, 229, 61, 157, 137, 149, 60, 210, 211, 179, 189, 218, 156, 243, 188, 102, 189, 245, 61, 171, 3, 202, 59, 68, 25, 196, 60, 214, 62, 170, 188, 22, 219, 237, 60, 126, 16, 184, 61, 203, 58, 28, 62, 147, 205, 228, 189, 12, 176, 36, 61, 77, 233, 240, 61, 26, 220, 174, 188, 116, 90, 221, 61, 55, 64, 61, 188, 113, 234, 19, 189, 88, 150, 230, 61, 206, 213, 218, 61, 153, 234, 46, 190, 237, 181, 219, 59, 246, 127, 188, 189, 88, 58, 11, 190, 28, 115, 19, 190, 101, 147, 251, 188, 148, 244, 60, 61, 24, 155, 237, 187, 58, 182, 216, 61, 180, 250, 166, 61, 202, 235, 76, 189, 98, 236, 197, 189, 121, 241, 45, 189, 154, 242, 179, 61, 98, 190, 52, 189, 233, 211, 234, 61, 193, 18, 195, 189, 2, 42, 78, 60, 113, 43, 125, 61, 15, 29, 172, 61, 55, 170, 57, 60, 150, 148, 218, 189, 34, 161, 15, 62, 95, 12, 188, 189, 123, 139, 10, 61, 152, 240, 219, 188, 84, 93, 209, 189, 28, 157, 225, 61, 57, 4, 78, 189, 63, 130, 150, 59, 50, 41, 251, 61, 219, 245, 90, 189, 91, 11, 153, 189, 33, 230, 141, 61, 76, 248, 214, 189, 156, 166, 146, 61, 201, 47, 38, 58, 37, 45, 70, 61, 183, 227, 193, 186, 6, 204, 231, 189, 36, 210, 9, 190, 212, 118, 254, 188, 233, 159, 5, 62, 69, 75, 207, 61, 221, 230, 6, 190, 4, 99, 25, 62, 3, 131, 211, 189, 124, 179, 42, 62, 154, 81, 51, 62, 92, 78, 33, 190, 12, 22, 252, 189, 173, 234, 234, 189, 66, 171, 148, 61, 117, 58, 95, 189, 194, 5, 185, 61, 40, 31, 239, 189, 41, 154, 16, 190, 157, 18, 18, 61, 121, 2, 211, 61, 99, 10, 55, 189, 239, 78, 241, 189, 196, 108, 96, 189, 132, 127, 5, 62, 230, 252, 20, 62, 131, 211, 51, 62, 40, 66, 148, 188, 98, 110, 238, 189, 57, 122, 6, 190, 120, 212, 52, 61, 204, 154, 233, 189, 88, 163, 246, 189, 98, 10, 66, 61, 33, 20, 143, 186, 195, 194, 28, 61, 164, 190, 242, 61, 142, 77, 51, 62, 219, 173, 130, 189, 65, 99, 197, 189, 233, 234, 226, 61, 63, 155, 50, 61, 241, 136, 58, 189, 244, 84, 34, 61, 251, 174, 54, 187, 208, 192, 48, 62, 181, 87, 35, 62, 126, 180, 31, 189, 5, 9, 51, 62, 170, 210, 13, 62, 136, 199, 52, 189, 6, 99, 3, 189, 216, 111, 89, 61, 182, 63, 42, 190, 241, 230, 52, 62, 131, 243, 168, 60, 124, 130, 19, 62, 35, 230, 52, 189, 4, 21, 45, 190, 102, 159, 15, 62, 4, 2, 26, 62, 7, 24, 38, 190, 17, 150, 12, 62, 221, 9, 40, 62, 26, 182, 32, 189, 58, 74, 133, 189, 130, 50, 54, 61, 62, 82, 36, 190, 28, 181, 232, 189, 36, 176, 47, 62, 71, 236, 203, 58, 246, 129, 110, 188, 141, 244, 214, 187, 32, 101, 102, 61, 150, 79, 233, 188, 139, 150, 45, 61, 155, 62, 6, 190, 254, 94, 186, 188, 252, 105, 50, 190, 187, 37, 34, 62, 215, 13, 18, 62, 246, 207, 216, 61, 58, 37, 30, 190, 15, 228, 9, 62, 158, 237, 243, 61, 62, 142, 73, 188, 148, 227, 141, 61, 236, 140, 42, 62, 164, 100, 52, 190, 132, 98, 27, 190, 152, 216, 39, 190, 155, 141, 142, 61, 9, 204, 34, 189, 250, 60, 13, 190, 163, 114, 194, 61, 60, 120, 33, 62, 183, 9, 170, 188, 82, 113, 207, 61, 243, 178, 226, 60, 229, 159, 48, 190, 86, 109, 46, 190, 61, 35, 41, 190, 66, 67, 249, 60, 91, 253, 33, 62, 103, 30, 236, 60, 130, 8, 124, 61, 137, 119, 141, 60, 46, 40, 234, 188, 54, 25, 152, 61, 245, 244, 34, 62, 98, 252, 212, 187, 251, 237, 186, 59, 152, 244, 132, 61, 217, 165, 30, 61, 38, 190, 170, 61, 134, 238, 154, 61, 43, 181, 155, 61, 37, 193, 163, 61, 0, 114, 227, 58, 98, 127, 49, 62, 151, 190, 78, 59, 38, 23, 76, 188, 50, 42, 101, 189, 192, 55, 91, 189, 25, 216, 143, 189, 53, 5, 84, 61, 139, 46, 241, 189, 20, 151, 157, 189, 223, 12, 229, 60, 195, 54, 98, 61, 235, 2, 15, 62, 77, 121, 141, 60, 213, 200, 109, 188, 38, 222, 230, 60, 26, 237, 214, 189, 104, 131, 157, 61, 235, 44, 71, 61, 53, 11, 20, 190, 59, 250, 239, 61, 197, 90, 190, 61, 96, 235, 29, 62, 95, 248, 57, 61, 79, 0, 242, 61, 226, 184, 171, 61, 162, 139, 147, 188, 109, 242, 138, 189, 244, 95, 132, 189, 58, 244, 4, 62, 40, 148, 92, 61, 169, 89, 13, 187, 152, 33, 42, 62, 234, 251, 98, 60, 219, 239, 22, 190, 177, 60, 250, 59, 14, 160, 18, 60, 49, 132, 94, 61, 11, 99, 46, 62, 215, 169, 16, 190, 20, 140, 186, 61, 157, 126, 173, 60, 210, 76, 165, 189, 235, 69, 44, 61, 147, 69, 5, 62, 244, 184, 9, 189, 60, 152, 9, 190, 132, 94, 21, 62, 106, 108, 144, 61, 29, 49, 218, 61, 20, 111, 22, 190, 32, 118, 7, 62, 179, 4, 33, 190, 18, 186, 101, 59, 228, 251, 3, 190, 154, 30, 45, 189, 114, 202, 138, 189, 28, 250, 31, 62, 253, 171, 255, 189, 34, 86, 33, 62, 208, 178, 175, 189, 172, 10, 177, 189, 251, 219, 24, 190, 17, 150, 159, 189, 76, 174, 182, 189, 94, 59, 229, 189, 2, 35, 102, 61, 249, 250, 224, 188, 255, 213, 38, 62, 172, 218, 143, 188, 133, 40, 165, 61, 64, 153, 20, 190, 245, 99, 26, 190, 185, 101, 218, 189, 231, 43, 0, 190, 158, 159, 64, 189, 53, 170, 34, 62, 78, 122, 26, 62, 105, 109, 0, 62, 49, 125, 141, 59, 109, 119, 189, 61, 143, 158, 128, 189, 136, 117, 39, 190, 145, 70, 97, 59, 81, 51, 19, 62, 51, 32, 46, 190, 134, 107, 45, 190, 238, 55, 206, 61, 138, 65, 244, 189, 203, 199, 25, 62, 187, 222, 191, 187, 190, 31, 254, 189, 141, 37, 7, 62, 166, 228, 162, 188, 231, 27, 183, 189, 245, 63, 184, 189, 225, 180, 191, 61, 167, 231, 131, 189, 148, 69, 199, 61, 58, 121, 23, 62, 37, 84, 32, 189, 49, 150, 177, 61, 74, 2, 212, 60, 54, 134, 193, 61, 249, 69, 80, 59, 169, 0, 215, 60, 36, 215, 2, 190, 238, 91, 56, 188, 98, 64, 4, 61, 109, 168, 38, 189, 53, 86, 144, 189, 64, 191, 208, 189, 62, 169, 0, 190, 209, 58, 71, 61, 203, 30, 160, 61, 246, 197, 253, 189, 132, 10, 48, 190, 45, 126, 14, 190, 101, 3, 0, 60, 174, 180, 25, 62, 145, 226, 46, 190, 59, 143, 198, 61, 175, 37, 37, 189, 160, 229, 241, 61, 163, 110, 131, 189, 2, 134, 179, 61, 213, 231, 34, 60, 239, 238, 243, 189, 55, 49, 247, 188, 2, 153, 28, 190, 29, 181, 167, 61, 173, 181, 173, 189, 91, 163, 233, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 172, 201, 61, 79, 158, 155, 187, 206, 195, 235, 57, 145, 235, 120, 189, 38, 40, 190, 187, 6, 238, 31, 190, 57, 45, 72, 189, 109, 58, 223, 187, 34, 211, 192, 61, 145, 8, 84, 188, 227, 148, 228, 61, 14, 82, 204, 189, 29, 139, 38, 190, 160, 70, 197, 60, 109, 90, 176, 61, 86, 145, 31, 188, 188, 144, 139, 189, 195, 12, 116, 189, 239, 88, 29, 190, 191, 142, 36, 62, 231, 30, 164, 61, 82, 234, 216, 61, 184, 72, 169, 188, 123, 234, 131, 189, 191, 253, 18, 190, 96, 97, 33, 61, 208, 191, 30, 188, 82, 221, 131, 60, 59, 128, 1, 62, 123, 38, 26, 62, 96, 90, 173, 60, 168, 221, 185, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 173, 164, 189, 138, 155, 34, 190, 174, 235, 168, 61, 203, 58, 233, 188, 18, 13, 20, 190, 164, 232, 27, 187, 1, 204, 2, 189, 182, 56, 137, 186, 174, 27, 168, 61, 151, 86, 174, 60, 153, 175, 240, 189, 105, 170, 211, 61, 181, 57, 17, 61, 84, 150, 37, 62, 200, 48, 4, 61, 246, 236, 128, 61, 67, 107, 27, 190, 133, 48, 144, 188, 156, 49, 204, 61, 144, 173, 241, 189, 150, 33, 192, 61, 216, 35, 236, 189, 82, 100, 137, 189, 74, 37, 250, 188, 3, 92, 27, 62, 198, 148, 205, 61, 70, 162, 61, 189, 22, 145, 83, 61, 177, 145, 17, 62, 50, 221, 154, 189, 212, 9, 1, 62, 15, 205, 8, 62, 71, 195, 237, 61, 69, 113, 78, 189, 176, 119, 200, 60, 66, 184, 212, 61, 146, 133, 28, 190, 118, 172, 176, 189, 96, 172, 45, 61, 30, 218, 9, 190, 20, 168, 40, 62, 83, 228, 23, 190, 19, 200, 224, 189, 182, 40, 38, 62, 150, 153, 3, 190, 32, 15, 212, 189, 127, 78, 168, 189, 130, 141, 240, 61, 175, 211, 10, 190, 175, 40, 151, 61, 51, 142, 1, 190, 74, 75, 10, 190, 90, 180, 165, 188, 155, 215, 28, 62, 225, 193, 45, 61, 111, 0, 19, 190, 126, 84, 211, 189, 32, 174, 224, 189, 19, 108, 136, 189, 115, 178, 24, 62, 12, 229, 224, 189, 67, 143, 115, 189, 102, 127, 213, 61, 6, 52, 8, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 32, 160, 61, 84, 215, 185, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 233, 188, 61, 98, 4, 131, 191, 130, 204, 227, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {8, 255, 221, 60, 60, 58, 144, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0042/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}