// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 112, 127, 62, 176, 12, 35, 191, 16, 45, 130, 190, 169, 178, 23, 190, 143, 207, 62, 63, 205, 242, 141, 190, 195, 99, 169, 188, 26, 167, 141, 62, 215, 195, 178, 62, 91, 107, 141, 62, 192, 41, 143, 191, 71, 193, 170, 190, 20, 235, 48, 190, 28, 41, 43, 190, 156, 102, 115, 62, 53, 185, 32, 60, 92, 216, 229, 191, 104, 41, 232, 190, 92, 79, 98, 190, 134, 244, 22, 191, 53, 70, 32, 191, 63, 220, 53, 191, 234, 227, 240, 190, 120, 139, 142, 186, 33, 128, 238, 62, 42, 66, 155, 189, 78, 223, 205, 190, 230, 106, 134, 190, 16, 87, 169, 62, 111, 78, 143, 190, 188, 225, 154, 61, 35, 201, 20, 63, 208, 129, 28, 191, 220, 75, 74, 63, 108, 80, 81, 191, 36, 132, 148, 190, 134, 167, 175, 62, 12, 109, 115, 191, 124, 172, 197, 190, 90, 165, 88, 62, 93, 249, 87, 190, 43, 93, 156, 62, 101, 254, 7, 63, 43, 41, 33, 61, 215, 139, 156, 61, 128, 248, 51, 190, 65, 66, 163, 63, 6, 140, 133, 62, 129, 203, 242, 62, 115, 67, 64, 63, 144, 16, 22, 62, 254, 149, 82, 63, 112, 59, 133, 191, 25, 201, 100, 190, 57, 136, 5, 191, 127, 42, 0, 191, 198, 245, 64, 62, 231, 37, 250, 190, 131, 234, 94, 63, 32, 131, 221, 62, 200, 163, 0, 191, 255, 230, 166, 189, 207, 231, 201, 190, 163, 11, 104, 191, 121, 152, 133, 191, 190, 98, 192, 190, 238, 214, 159, 61, 228, 148, 95, 191, 164, 73, 30, 189, 12, 1, 103, 63, 174, 79, 31, 63, 99, 41, 173, 62, 95, 91, 238, 62, 2, 75, 76, 63, 54, 78, 50, 62, 92, 188, 90, 62, 192, 228, 204, 190, 208, 237, 8, 191, 168, 107, 46, 63, 101, 120, 162, 191, 54, 92, 162, 190, 235, 121, 251, 60, 147, 183, 228, 190, 15, 60, 8, 63, 206, 201, 7, 63, 123, 200, 132, 63, 254, 64, 132, 62, 161, 240, 34, 62, 81, 183, 224, 189, 194, 67, 235, 190, 144, 177, 145, 62, 12, 153, 98, 191, 181, 102, 231, 62, 185, 177, 242, 62, 10, 127, 65, 60, 206, 2, 76, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 195, 132, 191, 117, 193, 151, 189, 76, 33, 58, 191, 28, 104, 171, 189, 150, 236, 30, 63, 8, 188, 244, 61, 144, 248, 0, 191, 34, 102, 137, 62, 148, 95, 86, 62, 155, 100, 183, 190, 157, 249, 172, 62, 103, 129, 9, 191, 45, 68, 168, 62, 49, 28, 166, 62, 74, 237, 144, 189, 221, 171, 136, 190, 139, 42, 219, 188, 220, 98, 232, 62, 44, 39, 165, 190, 98, 44, 202, 61, 247, 163, 49, 191, 120, 249, 193, 62, 64, 19, 209, 62, 94, 129, 95, 191, 70, 1, 231, 60, 22, 43, 216, 189, 124, 222, 125, 190, 82, 232, 130, 61, 218, 75, 88, 190, 144, 129, 79, 190, 70, 161, 140, 62, 119, 85, 43, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 25, 187, 189, 251, 123, 65, 62, 53, 15, 30, 190, 190, 121, 42, 191, 115, 209, 4, 191, 236, 22, 223, 190, 127, 222, 254, 189, 109, 176, 220, 61, 41, 166, 123, 62, 59, 203, 200, 189, 136, 116, 136, 62, 194, 139, 100, 191, 19, 238, 224, 189, 44, 190, 243, 190, 10, 75, 207, 61, 70, 58, 132, 62, 117, 224, 15, 61, 7, 167, 36, 61, 71, 242, 10, 61, 143, 66, 196, 190, 196, 187, 181, 190, 63, 128, 195, 190, 75, 219, 224, 189, 230, 237, 61, 191, 64, 193, 176, 62, 64, 82, 159, 61, 216, 139, 160, 191, 247, 192, 100, 190, 23, 213, 12, 190, 102, 44, 63, 62, 189, 181, 38, 62, 192, 195, 21, 62, 23, 170, 17, 191, 176, 240, 152, 188, 14, 52, 111, 188, 106, 205, 38, 189, 111, 237, 165, 190, 5, 233, 78, 62, 78, 236, 170, 62, 166, 228, 239, 61, 7, 233, 22, 190, 175, 178, 87, 62, 109, 89, 106, 62, 108, 221, 120, 60, 118, 59, 49, 62, 51, 224, 60, 62, 122, 3, 185, 190, 217, 193, 214, 62, 126, 222, 195, 62, 30, 111, 11, 191, 123, 123, 128, 62, 219, 55, 3, 190, 6, 120, 53, 62, 228, 102, 214, 61, 89, 189, 251, 190, 93, 216, 223, 62, 98, 135, 194, 62, 154, 140, 110, 60, 204, 128, 186, 190, 219, 197, 227, 61, 133, 30, 53, 63, 112, 191, 233, 188, 149, 20, 216, 190, 163, 54, 140, 188, 168, 91, 108, 187, 111, 55, 33, 190, 240, 171, 175, 189, 72, 225, 209, 60, 65, 112, 232, 61, 107, 73, 164, 60, 38, 205, 37, 190, 240, 17, 158, 189, 96, 43, 234, 189, 81, 174, 53, 190, 121, 179, 87, 60, 245, 165, 137, 186, 142, 45, 213, 60, 18, 160, 26, 190, 53, 117, 43, 60, 73, 52, 41, 190, 192, 189, 41, 190, 24, 103, 111, 60, 24, 56, 242, 189, 200, 191, 41, 61, 11, 198, 187, 60, 233, 183, 44, 190, 60, 2, 233, 189, 37, 146, 88, 61, 157, 228, 161, 61, 110, 44, 170, 188, 14, 207, 51, 62, 38, 5, 46, 188, 12, 167, 24, 61, 195, 180, 85, 60, 15, 175, 51, 187, 39, 210, 146, 61, 227, 138, 207, 62, 93, 199, 163, 61, 161, 211, 71, 62, 240, 165, 95, 189, 166, 167, 142, 61, 48, 26, 125, 62, 154, 56, 131, 189, 129, 162, 5, 62, 4, 67, 184, 61, 162, 163, 111, 62, 11, 223, 146, 62, 22, 103, 171, 190, 200, 216, 26, 62, 213, 163, 7, 62, 40, 145, 77, 62, 81, 180, 181, 189, 239, 32, 178, 62, 243, 217, 56, 62, 201, 233, 84, 190, 207, 210, 165, 190, 217, 118, 142, 188, 48, 138, 149, 62, 114, 130, 73, 61, 124, 49, 49, 190, 77, 244, 238, 62, 31, 49, 66, 190, 204, 198, 63, 189, 115, 240, 109, 62, 19, 120, 26, 62, 136, 244, 54, 190, 100, 80, 237, 190, 10, 109, 254, 189, 94, 146, 74, 190, 172, 61, 231, 61, 3, 219, 158, 190, 58, 247, 122, 190, 67, 234, 39, 62, 218, 100, 241, 190, 52, 35, 207, 190, 110, 212, 94, 189, 228, 212, 214, 189, 5, 73, 89, 191, 114, 59, 250, 60, 90, 188, 40, 62, 56, 101, 5, 190, 71, 128, 129, 62, 18, 227, 86, 62, 32, 99, 139, 190, 82, 249, 123, 62, 58, 135, 59, 62, 84, 231, 123, 190, 224, 159, 143, 62, 119, 231, 204, 190, 73, 131, 215, 190, 182, 111, 5, 60, 73, 81, 142, 190, 107, 18, 194, 62, 63, 254, 58, 190, 49, 151, 170, 62, 170, 152, 86, 190, 109, 8, 87, 190, 219, 83, 154, 189, 16, 252, 36, 62, 8, 238, 4, 191, 163, 150, 27, 191, 241, 230, 9, 187, 164, 249, 23, 61, 186, 253, 211, 190, 165, 12, 44, 61, 7, 0, 161, 62, 173, 235, 224, 189, 177, 25, 75, 60, 70, 194, 115, 187, 10, 108, 147, 190, 43, 138, 174, 189, 171, 136, 205, 62, 101, 254, 24, 190, 222, 137, 3, 62, 142, 24, 71, 62, 211, 199, 250, 62, 97, 217, 68, 62, 181, 49, 183, 190, 91, 253, 238, 189, 83, 34, 247, 61, 185, 199, 37, 190, 88, 62, 28, 191, 108, 255, 51, 190, 226, 94, 45, 62, 73, 13, 55, 62, 190, 110, 9, 190, 101, 232, 151, 62, 99, 236, 15, 190, 138, 117, 166, 62, 145, 181, 121, 62, 186, 170, 124, 190, 216, 241, 82, 190, 224, 155, 228, 188, 111, 65, 62, 191, 253, 45, 212, 188, 144, 165, 114, 191, 41, 218, 94, 62, 14, 247, 176, 190, 225, 67, 167, 189, 242, 38, 33, 190, 55, 128, 107, 62, 1, 233, 243, 189, 184, 227, 49, 190, 253, 94, 14, 191, 179, 200, 122, 190, 210, 34, 29, 62, 75, 36, 78, 60, 21, 177, 197, 189, 100, 102, 164, 189, 102, 3, 100, 62, 28, 9, 77, 61, 62, 10, 105, 61, 56, 194, 123, 61, 253, 84, 155, 62, 9, 110, 173, 189, 178, 88, 59, 62, 156, 13, 155, 61, 90, 207, 171, 190, 10, 254, 44, 191, 162, 70, 144, 187, 119, 132, 66, 190, 158, 38, 166, 61, 247, 98, 44, 62, 142, 105, 129, 62, 152, 248, 148, 61, 29, 220, 173, 189, 140, 44, 14, 62, 14, 67, 201, 190, 10, 191, 24, 61, 62, 164, 38, 61, 109, 111, 193, 61, 214, 77, 166, 62, 158, 113, 126, 61, 13, 139, 218, 61, 241, 203, 85, 62, 151, 111, 89, 191, 165, 169, 168, 61, 94, 223, 78, 62, 255, 74, 16, 62, 255, 45, 30, 191, 41, 183, 20, 62, 4, 151, 27, 189, 249, 107, 3, 63, 71, 15, 9, 191, 127, 126, 24, 62, 36, 155, 125, 62, 15, 147, 188, 189, 130, 246, 116, 190, 214, 107, 185, 62, 179, 17, 136, 190, 40, 240, 33, 191, 114, 203, 143, 190, 252, 112, 147, 61, 55, 206, 144, 190, 35, 224, 160, 190, 184, 172, 77, 62, 85, 71, 225, 62, 219, 23, 131, 190, 212, 94, 30, 62, 242, 238, 254, 189, 251, 180, 11, 189, 172, 232, 104, 62, 2, 134, 190, 62, 159, 11, 100, 61, 106, 240, 195, 190, 217, 219, 106, 62, 52, 75, 98, 62, 153, 169, 54, 190, 10, 141, 34, 61, 111, 127, 140, 62, 211, 61, 131, 62, 204, 237, 100, 190, 169, 114, 189, 190, 202, 55, 5, 191, 56, 141, 41, 63, 96, 85, 116, 190, 156, 105, 223, 62, 240, 21, 162, 62, 89, 224, 71, 189, 67, 247, 229, 62, 202, 102, 155, 190, 120, 55, 7, 189, 240, 129, 3, 187, 108, 239, 191, 61, 199, 205, 122, 190, 57, 153, 100, 190, 219, 197, 27, 190, 184, 201, 231, 62, 9, 116, 180, 188, 133, 39, 93, 189, 209, 185, 199, 61, 145, 209, 12, 190, 247, 239, 224, 189, 95, 49, 183, 189, 29, 136, 145, 189, 192, 175, 205, 188, 131, 184, 141, 61, 204, 9, 44, 190, 103, 174, 182, 189, 248, 227, 235, 189, 229, 21, 16, 190, 138, 17, 169, 60, 235, 39, 36, 190, 91, 63, 206, 59, 130, 206, 239, 189, 155, 92, 73, 188, 65, 58, 19, 189, 187, 96, 252, 61, 224, 113, 18, 62, 115, 193, 51, 60, 23, 120, 42, 190, 153, 129, 48, 60, 35, 14, 163, 189, 189, 130, 39, 190, 51, 146, 11, 190, 195, 187, 9, 190, 92, 236, 159, 189, 15, 103, 11, 60, 163, 171, 29, 62, 88, 118, 118, 189, 32, 57, 7, 191, 237, 25, 88, 189, 26, 58, 232, 189, 213, 196, 69, 61, 135, 199, 72, 62, 236, 147, 131, 189, 118, 239, 143, 190, 180, 79, 209, 189, 11, 138, 96, 62, 121, 229, 36, 191, 39, 217, 141, 189, 43, 112, 59, 62, 188, 53, 38, 62, 36, 188, 135, 189, 242, 6, 195, 61, 87, 87, 110, 190, 53, 121, 79, 190, 194, 9, 129, 62, 176, 96, 208, 189, 126, 252, 30, 190, 135, 202, 56, 191, 225, 187, 178, 189, 99, 60, 159, 62, 208, 236, 62, 191, 64, 173, 30, 190, 112, 80, 74, 62, 21, 109, 70, 62, 139, 142, 98, 190, 31, 17, 75, 191, 65, 109, 46, 61, 202, 194, 244, 62, 14, 208, 162, 190, 163, 41, 24, 191, 50, 169, 84, 62, 225, 172, 232, 189, 171, 17, 182, 190, 31, 246, 24, 190, 172, 92, 59, 190, 6, 111, 16, 189, 110, 203, 82, 190, 224, 29, 36, 62, 130, 135, 43, 62, 185, 30, 120, 62, 195, 207, 179, 190, 241, 138, 103, 190, 214, 41, 53, 61, 54, 89, 198, 61, 222, 211, 161, 189, 255, 156, 47, 62, 220, 238, 181, 189, 4, 73, 152, 62, 46, 166, 45, 62, 128, 15, 85, 190, 206, 159, 171, 188, 57, 235, 70, 190, 55, 44, 147, 189, 90, 18, 83, 62, 186, 3, 132, 62, 227, 30, 188, 190, 34, 221, 172, 189, 118, 73, 96, 60, 187, 205, 171, 62, 54, 102, 129, 61, 119, 170, 90, 61, 187, 205, 103, 191, 75, 187, 24, 62, 21, 77, 172, 190, 63, 0, 161, 61, 191, 42, 160, 61, 27, 125, 169, 190, 59, 19, 50, 61, 126, 13, 228, 188, 239, 237, 72, 62, 6, 174, 32, 190, 213, 31, 228, 189, 254, 150, 215, 62, 138, 4, 25, 62, 200, 138, 26, 190, 235, 165, 128, 62, 123, 77, 14, 191, 139, 53, 130, 190, 110, 67, 164, 62, 142, 12, 105, 188, 100, 117, 167, 61, 201, 201, 224, 190, 25, 241, 103, 190, 180, 17, 21, 189, 144, 164, 190, 190, 147, 226, 171, 190, 4, 9, 158, 61, 170, 64, 187, 62, 38, 234, 160, 189, 205, 166, 46, 191, 182, 103, 112, 60, 203, 49, 158, 62, 33, 158, 130, 190, 158, 6, 185, 190, 4, 69, 1, 62, 133, 40, 168, 190, 19, 237, 172, 190, 232, 178, 183, 62, 154, 156, 58, 191, 168, 184, 121, 190, 203, 95, 200, 61, 144, 184, 77, 61, 46, 136, 78, 191, 70, 148, 241, 61, 205, 8, 150, 62, 205, 171, 28, 61, 221, 88, 132, 189, 9, 103, 166, 62, 92, 198, 233, 189, 237, 21, 130, 190, 229, 104, 111, 62, 245, 228, 171, 190, 235, 203, 151, 62, 141, 204, 205, 189, 168, 58, 69, 191, 4, 0, 25, 62, 130, 11, 89, 191, 17, 203, 207, 190, 148, 94, 240, 61, 175, 89, 136, 62, 126, 194, 93, 190, 7, 44, 6, 191, 100, 192, 236, 62, 138, 9, 232, 62, 255, 217, 63, 191, 7, 226, 215, 188, 47, 218, 14, 61, 23, 13, 131, 62, 238, 203, 50, 191, 11, 105, 195, 189, 239, 99, 120, 190, 197, 161, 158, 188, 136, 219, 252, 190, 132, 141, 140, 189, 63, 180, 3, 62, 242, 113, 159, 62, 47, 224, 108, 191, 146, 87, 58, 62, 176, 104, 10, 62, 165, 37, 140, 62, 248, 78, 18, 190, 77, 241, 150, 62, 162, 12, 186, 61, 8, 113, 187, 60, 129, 152, 70, 61, 107, 29, 47, 189, 205, 177, 35, 61, 255, 60, 50, 61, 147, 145, 5, 189, 216, 179, 207, 61, 173, 11, 138, 190, 153, 2, 63, 191, 127, 3, 21, 62, 25, 213, 62, 62, 74, 102, 46, 190, 62, 233, 107, 190, 114, 218, 21, 62, 121, 124, 20, 62, 65, 78, 6, 62, 158, 120, 246, 189, 18, 187, 28, 191, 155, 40, 30, 61, 77, 39, 77, 191, 122, 89, 222, 189, 247, 118, 31, 191, 237, 2, 178, 61, 199, 97, 156, 189, 75, 228, 187, 62, 166, 218, 71, 191, 125, 66, 142, 190, 75, 225, 174, 61, 236, 47, 100, 62, 105, 178, 202, 190, 171, 56, 131, 62, 207, 38, 208, 61, 184, 158, 214, 61, 217, 0, 238, 190, 63, 159, 179, 189, 94, 228, 165, 190, 196, 112, 5, 188, 140, 74, 128, 60, 69, 37, 127, 61, 65, 152, 138, 188, 34, 63, 93, 191, 51, 227, 103, 190, 166, 48, 38, 62, 176, 171, 237, 61, 106, 100, 91, 189, 227, 22, 236, 60, 61, 16, 22, 191, 84, 236, 25, 189, 97, 131, 47, 190, 137, 112, 37, 60, 221, 219, 37, 62, 21, 14, 38, 190, 225, 68, 191, 61, 73, 113, 212, 189, 206, 24, 26, 62, 82, 26, 4, 190, 11, 114, 136, 61, 76, 75, 239, 61, 154, 126, 67, 61, 217, 157, 240, 61, 6, 210, 60, 62, 182, 33, 43, 191, 61, 193, 26, 190, 68, 214, 159, 62, 54, 219, 29, 190, 69, 155, 106, 189, 166, 92, 248, 190, 133, 7, 42, 190, 36, 125, 155, 59, 13, 88, 16, 191, 118, 35, 177, 190, 67, 193, 157, 188, 155, 235, 237, 189, 83, 148, 229, 189, 220, 64, 72, 191, 31, 242, 63, 62, 144, 146, 83, 62, 236, 65, 91, 188, 216, 243, 166, 62, 87, 229, 83, 190, 239, 99, 47, 190, 42, 145, 48, 190, 148, 193, 211, 60, 101, 217, 133, 189, 250, 147, 73, 62, 248, 62, 148, 62, 153, 137, 133, 61, 128, 250, 210, 62, 193, 48, 120, 189, 94, 143, 193, 190, 193, 206, 183, 61, 79, 70, 186, 62, 90, 253, 73, 62, 211, 16, 99, 191, 249, 117, 239, 61, 42, 214, 102, 190, 240, 38, 79, 63, 168, 189, 20, 191, 225, 76, 69, 62, 1, 131, 119, 62, 59, 204, 54, 62, 176, 96, 164, 190, 234, 119, 188, 62, 183, 18, 128, 190, 156, 187, 243, 190, 44, 58, 80, 190, 50, 111, 192, 62, 143, 243, 75, 190, 34, 143, 9, 191, 91, 141, 215, 62, 14, 179, 131, 62, 176, 240, 138, 190, 19, 151, 224, 62, 253, 128, 144, 190, 97, 82, 253, 189, 129, 199, 186, 61, 231, 237, 196, 62, 168, 241, 1, 190, 98, 72, 38, 190, 254, 203, 156, 61, 1, 93, 179, 62, 18, 39, 60, 191, 92, 116, 49, 62, 87, 219, 182, 61, 17, 18, 104, 62, 83, 227, 133, 189, 89, 188, 126, 62, 83, 95, 152, 188, 14, 150, 214, 62, 121, 217, 188, 190, 134, 152, 254, 62, 217, 172, 230, 61, 209, 217, 9, 62, 203, 47, 239, 62, 28, 162, 139, 62, 235, 39, 108, 190, 211, 229, 67, 191, 28, 97, 38, 61, 26, 71, 216, 60, 151, 29, 135, 190, 102, 65, 39, 190, 91, 114, 148, 62, 51, 216, 226, 189, 197, 194, 226, 62, 92, 65, 73, 190, 138, 188, 207, 190, 28, 26, 50, 190, 17, 212, 7, 192, 32, 95, 190, 190, 93, 84, 144, 62, 37, 32, 113, 61, 59, 0, 32, 62, 116, 180, 84, 62, 88, 222, 173, 189, 173, 54, 118, 191, 23, 36, 43, 191, 54, 158, 79, 61, 73, 226, 102, 191, 6, 87, 37, 190, 232, 229, 8, 191, 221, 192, 223, 190, 188, 88, 202, 187, 246, 75, 116, 190, 202, 244, 110, 62, 28, 4, 40, 190, 12, 214, 145, 190, 198, 248, 92, 190, 39, 72, 150, 60, 55, 22, 231, 189, 187, 72, 182, 190, 174, 254, 13, 189, 251, 170, 220, 187, 209, 83, 172, 190, 205, 100, 247, 187, 232, 203, 123, 191, 14, 56, 168, 186, 98, 198, 160, 190, 230, 72, 199, 60, 123, 133, 40, 62, 114, 236, 126, 189, 248, 27, 75, 190, 126, 236, 222, 60, 85, 178, 161, 62, 39, 200, 148, 190, 148, 113, 43, 189, 244, 125, 15, 62, 43, 18, 52, 62, 29, 251, 221, 189, 123, 189, 83, 60, 143, 171, 210, 190, 250, 177, 78, 190, 67, 71, 154, 62, 44, 184, 186, 189, 64, 168, 126, 190, 218, 149, 200, 190, 100, 27, 156, 189, 6, 242, 37, 61, 94, 84, 216, 190, 110, 106, 180, 190, 68, 125, 44, 62, 179, 168, 53, 62, 202, 184, 168, 189, 243, 53, 24, 191, 191, 197, 7, 61, 195, 146, 221, 62, 223, 15, 198, 190, 116, 195, 52, 189, 89, 78, 8, 61, 2, 103, 170, 188, 47, 223, 120, 61, 157, 76, 1, 62, 59, 146, 48, 62, 133, 218, 206, 58, 206, 104, 253, 59, 30, 204, 6, 190, 145, 176, 198, 61, 109, 235, 4, 189, 92, 174, 2, 62, 51, 152, 3, 190, 87, 126, 110, 188, 170, 53, 4, 60, 21, 10, 17, 190, 255, 89, 141, 189, 108, 101, 144, 58, 155, 205, 5, 62, 48, 163, 26, 190, 163, 11, 168, 61, 217, 198, 14, 190, 228, 155, 98, 189, 54, 170, 240, 59, 198, 206, 72, 61, 140, 67, 40, 190, 212, 241, 252, 189, 95, 128, 182, 189, 112, 170, 92, 189, 254, 24, 185, 186, 10, 102, 62, 189, 47, 79, 196, 61, 218, 144, 34, 62, 174, 131, 106, 61, 44, 175, 42, 190, 207, 6, 111, 62, 5, 30, 147, 62, 75, 202, 234, 62, 231, 145, 93, 191, 81, 184, 35, 62, 233, 131, 177, 60, 238, 254, 169, 190, 218, 93, 5, 191, 82, 23, 32, 190, 214, 143, 162, 189, 114, 235, 190, 59, 192, 249, 151, 61, 107, 125, 6, 191, 135, 72, 73, 61, 105, 113, 220, 61, 19, 230, 74, 62, 124, 140, 195, 189, 244, 13, 169, 189, 189, 62, 236, 62, 209, 169, 146, 62, 158, 63, 95, 189, 61, 162, 61, 189, 18, 53, 240, 190, 131, 201, 191, 190, 211, 91, 15, 190, 153, 117, 50, 62, 238, 128, 55, 191, 130, 216, 164, 62, 232, 34, 4, 62, 83, 244, 6, 62, 195, 127, 77, 189, 28, 41, 185, 61, 240, 210, 230, 187, 146, 74, 20, 189, 218, 223, 87, 191, 108, 172, 137, 189, 155, 133, 162, 189, 179, 123, 130, 62, 66, 25, 55, 62, 25, 208, 38, 62, 121, 244, 71, 191, 244, 206, 34, 190, 86, 254, 240, 189, 225, 64, 1, 62, 108, 252, 130, 188, 200, 142, 116, 59, 28, 231, 250, 61, 162, 49, 140, 190, 63, 150, 149, 61, 4, 242, 195, 61, 106, 206, 214, 190, 213, 229, 63, 190, 247, 194, 35, 62, 133, 196, 186, 189, 10, 189, 18, 61, 7, 204, 201, 190, 84, 128, 140, 188, 127, 180, 9, 189, 27, 117, 46, 61, 18, 112, 36, 62, 247, 115, 112, 61, 216, 94, 252, 190, 8, 232, 187, 189, 2, 158, 57, 189, 25, 26, 80, 190, 216, 106, 10, 62, 83, 98, 184, 61, 69, 45, 172, 61, 229, 2, 25, 62, 85, 171, 163, 61, 208, 80, 39, 189, 193, 75, 82, 62, 92, 167, 212, 190, 29, 1, 110, 62, 152, 134, 238, 61, 204, 166, 146, 60, 165, 94, 187, 189, 175, 143, 110, 62, 82, 171, 172, 61, 219, 83, 86, 62, 218, 10, 49, 190, 73, 163, 18, 190, 220, 35, 83, 61, 121, 205, 185, 62, 233, 3, 243, 60, 190, 12, 126, 62, 246, 37, 163, 189, 139, 47, 133, 190, 99, 238, 240, 59, 162, 139, 126, 60, 128, 179, 156, 61, 80, 31, 167, 61, 35, 248, 231, 186, 49, 139, 59, 191, 106, 177, 55, 61, 207, 205, 102, 189, 243, 125, 3, 189, 38, 111, 139, 62, 132, 46, 194, 190, 19, 205, 26, 190, 105, 47, 12, 190, 106, 105, 125, 62, 223, 34, 163, 189, 88, 68, 237, 189, 92, 15, 185, 62, 114, 48, 6, 190, 227, 138, 99, 189, 67, 121, 76, 62, 221, 155, 179, 62, 222, 175, 221, 189, 104, 53, 124, 62, 199, 195, 175, 190, 250, 215, 216, 62, 126, 14, 5, 190, 113, 162, 207, 190, 54, 15, 189, 189, 50, 3, 75, 191, 245, 149, 191, 190, 138, 108, 96, 62, 138, 130, 143, 62, 141, 246, 71, 190, 155, 90, 16, 191, 248, 48, 204, 62, 119, 58, 27, 62, 77, 212, 235, 190, 247, 205, 28, 190, 143, 37, 149, 61, 204, 13, 202, 61, 190, 206, 87, 190, 78, 235, 218, 189, 174, 37, 76, 191, 154, 61, 0, 188, 118, 46, 52, 191, 50, 24, 83, 189, 248, 55, 60, 62, 216, 197, 238, 61, 69, 17, 90, 191, 67, 54, 68, 190, 244, 2, 217, 61, 35, 204, 154, 62, 35, 185, 164, 190, 20, 223, 150, 62, 243, 170, 12, 190, 97, 33, 177, 62, 134, 126, 213, 189, 174, 118, 51, 188, 138, 149, 149, 190, 32, 208, 25, 60, 69, 225, 192, 61, 74, 248, 140, 62, 116, 248, 147, 190, 52, 33, 95, 191, 229, 155, 185, 61, 171, 1, 122, 62, 96, 52, 34, 190, 95, 158, 98, 190, 70, 61, 16, 189, 240, 51, 154, 61, 100, 29, 5, 190, 81, 155, 90, 188, 237, 79, 29, 191, 29, 218, 193, 61, 26, 254, 12, 190, 250, 183, 76, 189, 14, 225, 7, 62, 80, 205, 131, 60, 199, 173, 166, 189, 54, 211, 196, 62, 167, 120, 134, 191, 212, 212, 33, 62, 241, 171, 15, 62, 136, 175, 2, 62, 94, 219, 6, 189, 63, 216, 178, 60, 83, 149, 34, 60, 160, 144, 221, 61, 230, 237, 253, 60, 77, 253, 127, 62, 22, 205, 252, 60, 219, 203, 92, 61, 245, 213, 57, 60, 26, 126, 132, 61, 228, 197, 2, 189, 79, 15, 39, 191, 22, 211, 1, 62, 127, 8, 157, 189, 238, 3, 167, 190, 137, 67, 193, 190, 199, 221, 116, 62, 155, 69, 140, 61, 14, 180, 161, 189, 11, 19, 175, 189, 69, 252, 48, 190, 78, 39, 181, 189, 90, 246, 57, 61, 154, 165, 16, 62, 9, 123, 71, 189, 190, 44, 250, 189, 252, 181, 33, 62, 134, 248, 31, 190, 7, 131, 191, 189, 46, 147, 227, 189, 142, 128, 34, 190, 172, 205, 170, 61, 162, 232, 29, 190, 87, 126, 185, 61, 236, 114, 14, 190, 89, 10, 171, 188, 92, 214, 16, 60, 23, 227, 234, 189, 28, 228, 108, 61, 168, 7, 6, 62, 174, 34, 5, 190, 123, 37, 25, 62, 149, 100, 43, 190, 54, 32, 34, 62, 218, 252, 11, 62, 224, 238, 200, 189, 193, 246, 96, 187, 244, 135, 15, 189, 190, 29, 227, 189, 118, 178, 132, 60, 116, 212, 160, 61, 199, 221, 133, 190, 32, 89, 101, 62, 231, 25, 48, 62, 126, 39, 140, 191, 109, 48, 235, 60, 197, 250, 24, 62, 161, 98, 138, 61, 255, 21, 86, 190, 178, 117, 175, 189, 56, 184, 51, 63, 140, 146, 243, 190, 6, 195, 99, 61, 208, 6, 75, 61, 133, 249, 128, 190, 117, 10, 26, 191, 254, 194, 146, 62, 47, 101, 21, 189, 82, 70, 76, 62, 82, 47, 71, 190, 233, 149, 175, 190, 86, 177, 121, 62, 117, 222, 155, 191, 7, 218, 89, 191, 70, 76, 232, 61, 71, 173, 200, 62, 12, 42, 129, 61, 168, 57, 153, 191, 47, 248, 145, 61, 149, 68, 128, 62, 58, 221, 13, 191, 152, 39, 49, 61, 157, 85, 209, 62, 183, 81, 193, 187, 230, 77, 77, 190, 115, 162, 116, 62, 18, 175, 10, 192, 68, 162, 219, 190, 20, 68, 209, 62, 248, 199, 45, 191, 233, 228, 134, 190, 38, 26, 206, 190, 5, 5, 180, 190, 123, 216, 131, 191, 199, 244, 143, 190, 131, 127, 55, 191, 233, 182, 133, 61, 185, 101, 155, 190, 54, 69, 24, 189, 166, 239, 241, 189, 42, 235, 247, 62, 67, 183, 141, 190, 89, 244, 127, 190, 96, 120, 181, 190, 101, 50, 206, 190, 243, 108, 197, 190, 253, 94, 139, 60, 82, 230, 81, 189, 238, 22, 179, 189, 165, 171, 78, 190, 66, 102, 129, 188, 181, 195, 33, 62, 141, 246, 6, 191, 230, 49, 130, 190, 5, 69, 152, 190, 82, 4, 134, 62, 50, 199, 203, 190, 157, 106, 66, 189, 206, 29, 129, 190, 123, 192, 35, 62, 150, 7, 42, 189, 134, 22, 122, 190, 248, 50, 87, 62, 49, 199, 223, 62, 118, 96, 255, 190, 34, 196, 106, 62, 2, 128, 177, 61, 169, 84, 57, 62, 94, 254, 124, 62, 211, 195, 34, 61, 125, 12, 20, 62, 93, 229, 53, 190, 227, 22, 10, 187, 122, 95, 15, 62, 194, 72, 169, 190, 204, 12, 217, 189, 171, 129, 14, 190, 115, 104, 87, 61, 96, 186, 16, 190, 194, 244, 242, 190, 226, 40, 191, 189, 35, 54, 110, 62, 29, 100, 172, 190, 179, 71, 139, 190, 185, 152, 91, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {13, 247, 181, 61, 25, 168, 110, 189, 237, 17, 45, 190, 107, 5, 12, 62, 31, 117, 95, 62, 236, 10, 226, 189, 112, 103, 248, 61, 4, 192, 119, 62, 97, 220, 74, 190, 48, 72, 68, 190, 34, 252, 68, 61, 54, 189, 57, 62, 112, 19, 225, 61, 103, 61, 52, 62, 194, 73, 219, 61, 234, 6, 153, 189, 91, 219, 32, 62, 63, 198, 194, 61, 71, 88, 65, 61, 56, 124, 4, 189, 247, 60, 240, 61, 184, 115, 244, 189, 207, 135, 109, 188, 159, 112, 41, 190, 170, 67, 221, 62, 110, 15, 1, 62, 188, 24, 29, 189, 16, 38, 144, 61, 152, 77, 250, 189, 16, 77, 135, 61, 164, 110, 136, 59, 102, 118, 59, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 132, 146, 191, 43, 146, 22, 63, 23, 135, 34, 189, 161, 20, 102, 190, 56, 225, 188, 62, 148, 218, 211, 62, 106, 117, 188, 189, 176, 85, 23, 191, 117, 70, 82, 191, 252, 217, 238, 189, 49, 141, 208, 62, 16, 175, 113, 187, 99, 160, 130, 62, 53, 93, 97, 63, 186, 26, 199, 190, 238, 102, 36, 191, 232, 250, 203, 61, 95, 125, 191, 190, 145, 50, 44, 191, 165, 90, 171, 63, 75, 111, 211, 62, 225, 62, 211, 189, 38, 193, 8, 191, 149, 75, 158, 189, 28, 210, 37, 189, 147, 24, 21, 63, 142, 175, 60, 61, 59, 160, 137, 190, 27, 183, 27, 62, 52, 79, 148, 63, 104, 178, 130, 63, 86, 111, 26, 190, 204, 170, 248, 189, 165, 6, 221, 61, 88, 97, 240, 61, 12, 182, 212, 190, 223, 60, 156, 190, 75, 219, 170, 189, 141, 235, 84, 190, 198, 89, 8, 62, 75, 36, 239, 62, 224, 84, 10, 61, 236, 54, 1, 190, 60, 52, 101, 190, 137, 144, 38, 62, 123, 184, 2, 190, 106, 13, 51, 190, 100, 9, 142, 62, 210, 17, 118, 190, 254, 63, 218, 62, 106, 29, 191, 61, 13, 122, 45, 190, 215, 162, 245, 186, 97, 152, 137, 189, 118, 203, 163, 189, 152, 104, 108, 188, 190, 116, 223, 190, 103, 106, 28, 62, 222, 229, 21, 63, 215, 28, 138, 189, 13, 200, 14, 189, 139, 154, 130, 62, 143, 139, 46, 61, 124, 184, 45, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 60, 241, 189, 108, 6, 208, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {234, 67, 17, 190, 67, 113, 185, 190, 232, 120, 194, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {77, 205, 145, 62, 103, 183, 220, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0039/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}