// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {36, 195, 215, 62, 230, 142, 45, 191, 40, 167, 117, 190, 147, 100, 194, 189, 49, 193, 49, 63, 209, 23, 201, 190, 110, 111, 49, 62, 67, 35, 67, 62, 44, 160, 202, 62, 152, 178, 115, 62, 149, 191, 118, 191, 131, 0, 172, 190, 131, 223, 56, 190, 74, 181, 10, 190, 38, 135, 142, 62, 201, 102, 0, 62, 168, 138, 203, 191, 112, 46, 244, 190, 151, 149, 239, 189, 196, 192, 14, 191, 11, 45, 45, 191, 28, 174, 32, 191, 48, 247, 159, 190, 44, 94, 74, 188, 157, 10, 254, 62, 163, 186, 48, 189, 229, 180, 237, 190, 124, 117, 11, 190, 202, 22, 27, 62, 196, 105, 146, 190, 58, 232, 138, 61, 147, 47, 31, 63, 16, 220, 29, 191, 184, 191, 77, 63, 158, 233, 56, 191, 217, 198, 138, 190, 131, 189, 219, 62, 160, 84, 106, 191, 209, 90, 1, 191, 249, 131, 167, 62, 223, 171, 105, 190, 243, 170, 175, 62, 221, 184, 49, 63, 44, 178, 246, 61, 44, 202, 165, 61, 218, 228, 160, 190, 149, 42, 114, 63, 231, 155, 124, 62, 100, 234, 11, 63, 137, 177, 39, 63, 46, 150, 18, 62, 224, 220, 79, 63, 76, 172, 123, 191, 114, 220, 12, 190, 234, 8, 8, 191, 138, 246, 32, 191, 183, 237, 38, 62, 59, 156, 43, 191, 120, 94, 34, 63, 206, 146, 233, 62, 234, 188, 211, 190, 31, 146, 96, 189, 14, 60, 186, 190, 23, 229, 221, 190, 26, 101, 118, 191, 220, 188, 200, 190, 249, 74, 154, 61, 152, 16, 78, 191, 220, 152, 219, 188, 241, 253, 96, 63, 57, 22, 10, 63, 189, 212, 175, 62, 212, 34, 5, 63, 189, 189, 48, 63, 35, 113, 19, 62, 128, 175, 133, 62, 42, 243, 174, 190, 40, 109, 4, 191, 77, 148, 48, 63, 104, 199, 141, 191, 127, 191, 146, 190, 67, 200, 220, 61, 225, 110, 216, 190, 76, 167, 23, 63, 247, 232, 9, 63, 225, 178, 121, 63, 69, 20, 129, 62, 20, 54, 177, 61, 108, 253, 213, 60, 40, 145, 240, 190, 95, 44, 146, 62, 12, 53, 74, 191, 72, 198, 235, 62, 39, 13, 129, 62, 169, 171, 154, 60, 171, 187, 64, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 145, 117, 191, 60, 219, 87, 61, 164, 157, 245, 190, 229, 198, 29, 190, 92, 65, 34, 63, 64, 56, 159, 61, 54, 43, 152, 190, 2, 109, 167, 62, 104, 48, 129, 62, 225, 194, 174, 190, 120, 90, 176, 62, 185, 182, 244, 190, 40, 226, 204, 62, 141, 5, 203, 62, 113, 44, 21, 62, 254, 21, 146, 190, 147, 248, 121, 61, 110, 135, 234, 62, 22, 252, 146, 190, 164, 54, 29, 61, 68, 48, 35, 191, 58, 20, 120, 62, 247, 218, 206, 62, 155, 136, 86, 191, 24, 220, 192, 61, 215, 101, 203, 188, 155, 135, 133, 190, 26, 105, 232, 61, 99, 136, 33, 190, 193, 253, 33, 190, 141, 71, 162, 62, 220, 224, 22, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 25, 187, 189, 65, 146, 3, 62, 53, 15, 30, 190, 230, 250, 249, 190, 128, 104, 213, 190, 100, 237, 55, 190, 234, 9, 48, 189, 136, 159, 129, 61, 120, 168, 47, 62, 78, 121, 139, 189, 135, 201, 83, 62, 211, 144, 20, 191, 186, 188, 29, 190, 91, 50, 88, 190, 220, 41, 191, 188, 181, 151, 242, 62, 241, 209, 57, 189, 123, 174, 208, 189, 71, 242, 10, 61, 246, 94, 166, 190, 149, 199, 96, 190, 85, 132, 89, 190, 14, 52, 98, 189, 13, 175, 194, 190, 71, 137, 130, 62, 100, 118, 128, 61, 153, 253, 96, 191, 114, 137, 88, 190, 71, 224, 192, 189, 114, 108, 40, 62, 163, 201, 203, 189, 192, 195, 21, 62, 247, 20, 255, 190, 223, 39, 53, 188, 174, 237, 232, 61, 16, 102, 133, 187, 184, 243, 155, 190, 221, 204, 110, 62, 135, 103, 182, 62, 138, 98, 215, 60, 234, 58, 224, 188, 130, 132, 104, 62, 214, 81, 134, 62, 252, 154, 152, 59, 168, 21, 139, 62, 30, 26, 119, 62, 121, 106, 175, 190, 66, 187, 129, 62, 85, 61, 163, 62, 130, 37, 175, 190, 251, 42, 116, 62, 54, 188, 27, 190, 107, 6, 72, 62, 129, 244, 6, 62, 73, 73, 159, 190, 116, 85, 236, 62, 252, 138, 158, 62, 216, 18, 94, 61, 148, 167, 164, 190, 251, 244, 79, 62, 224, 213, 31, 63, 108, 250, 21, 60, 104, 163, 143, 190, 43, 80, 114, 62, 168, 91, 108, 187, 111, 55, 33, 190, 240, 171, 175, 189, 72, 225, 209, 60, 65, 112, 232, 61, 107, 73, 164, 60, 38, 205, 37, 190, 240, 17, 158, 189, 96, 43, 234, 189, 81, 174, 53, 190, 121, 179, 87, 60, 245, 165, 137, 186, 142, 45, 213, 60, 18, 160, 26, 190, 53, 117, 43, 60, 73, 52, 41, 190, 192, 189, 41, 190, 24, 103, 111, 60, 24, 56, 242, 189, 200, 191, 41, 61, 11, 198, 187, 60, 233, 183, 44, 190, 60, 2, 233, 189, 37, 146, 88, 61, 157, 228, 161, 61, 110, 44, 170, 188, 14, 207, 51, 62, 38, 5, 46, 188, 12, 167, 24, 61, 195, 180, 85, 60, 15, 175, 51, 187, 39, 210, 146, 61, 169, 199, 5, 63, 55, 99, 84, 61, 195, 109, 187, 61, 75, 118, 149, 189, 190, 133, 80, 61, 202, 40, 69, 62, 103, 31, 98, 188, 4, 7, 21, 61, 11, 155, 53, 61, 19, 80, 132, 62, 44, 239, 145, 62, 171, 201, 125, 190, 25, 13, 250, 61, 253, 247, 79, 62, 197, 12, 136, 62, 231, 85, 180, 189, 24, 111, 205, 62, 40, 29, 2, 62, 43, 7, 76, 189, 221, 10, 198, 190, 148, 78, 84, 61, 159, 52, 73, 62, 144, 166, 102, 61, 78, 230, 38, 190, 176, 26, 4, 63, 212, 99, 66, 190, 167, 66, 78, 189, 47, 47, 134, 62, 252, 32, 71, 62, 210, 203, 53, 190, 77, 48, 234, 190, 44, 236, 46, 190, 94, 146, 74, 190, 206, 210, 168, 59, 14, 8, 95, 190, 54, 85, 219, 190, 212, 116, 54, 62, 35, 195, 7, 191, 189, 154, 108, 190, 169, 134, 239, 189, 66, 48, 34, 60, 177, 123, 248, 190, 38, 182, 195, 61, 138, 71, 12, 62, 58, 97, 198, 189, 9, 206, 97, 62, 15, 199, 70, 62, 246, 118, 200, 190, 230, 151, 72, 62, 204, 69, 113, 62, 117, 248, 149, 190, 112, 140, 147, 62, 201, 76, 27, 191, 29, 241, 13, 190, 15, 171, 15, 60, 10, 127, 132, 190, 163, 46, 166, 62, 1, 134, 204, 189, 21, 122, 143, 62, 83, 193, 106, 190, 197, 64, 139, 190, 67, 134, 216, 189, 11, 232, 57, 62, 208, 236, 147, 190, 1, 122, 138, 190, 30, 4, 185, 188, 140, 240, 11, 62, 151, 37, 238, 190, 99, 137, 145, 61, 47, 117, 134, 62, 77, 84, 123, 189, 89, 58, 103, 190, 39, 26, 23, 62, 116, 28, 255, 189, 121, 223, 3, 61, 181, 114, 215, 62, 242, 84, 49, 189, 235, 227, 27, 62, 114, 113, 91, 62, 39, 14, 177, 62, 171, 71, 26, 62, 71, 198, 93, 190, 62, 254, 45, 190, 134, 80, 178, 61, 171, 26, 58, 190, 30, 58, 245, 190, 160, 44, 17, 189, 56, 217, 1, 62, 69, 13, 9, 62, 143, 68, 22, 189, 228, 37, 163, 62, 30, 165, 228, 189, 64, 206, 122, 62, 4, 124, 136, 62, 96, 108, 37, 190, 110, 145, 186, 59, 224, 155, 228, 188, 215, 228, 241, 190, 213, 175, 220, 189, 245, 7, 14, 191, 218, 37, 88, 62, 199, 65, 174, 189, 159, 68, 194, 188, 234, 10, 134, 189, 24, 26, 244, 189, 236, 43, 12, 190, 110, 140, 253, 190, 212, 52, 11, 191, 255, 133, 196, 190, 134, 82, 53, 62, 243, 82, 218, 188, 129, 19, 232, 188, 247, 83, 136, 189, 106, 49, 243, 61, 14, 163, 237, 61, 180, 7, 74, 61, 160, 35, 113, 61, 8, 189, 119, 61, 144, 230, 237, 189, 229, 109, 164, 61, 171, 222, 198, 61, 129, 7, 192, 190, 206, 120, 35, 191, 93, 74, 123, 60, 106, 33, 53, 190, 68, 58, 253, 60, 118, 205, 42, 62, 135, 253, 237, 60, 252, 40, 196, 189, 202, 243, 130, 189, 162, 160, 30, 62, 252, 78, 126, 190, 9, 130, 39, 59, 138, 4, 5, 62, 138, 221, 13, 62, 17, 47, 227, 61, 92, 71, 96, 187, 121, 72, 38, 62, 10, 4, 83, 62, 79, 54, 61, 191, 65, 130, 225, 61, 68, 211, 110, 62, 37, 38, 216, 61, 5, 162, 55, 58, 22, 42, 192, 61, 252, 208, 129, 189, 207, 192, 233, 62, 209, 124, 0, 191, 66, 11, 133, 62, 44, 124, 85, 62, 82, 200, 98, 189, 141, 23, 130, 190, 145, 219, 158, 62, 138, 46, 148, 190, 195, 157, 1, 191, 30, 160, 174, 189, 42, 154, 155, 60, 243, 240, 151, 190, 112, 2, 145, 190, 44, 49, 73, 61, 209, 73, 182, 62, 187, 116, 151, 190, 102, 232, 209, 61, 177, 212, 32, 190, 11, 238, 25, 189, 13, 137, 79, 62, 105, 46, 159, 62, 78, 68, 31, 61, 197, 84, 207, 190, 158, 104, 28, 62, 83, 104, 84, 62, 92, 144, 107, 190, 86, 9, 24, 61, 81, 225, 123, 62, 134, 42, 61, 62, 44, 1, 87, 189, 147, 92, 188, 189, 182, 246, 226, 190, 96, 68, 29, 63, 181, 112, 120, 190, 6, 22, 153, 62, 153, 35, 142, 62, 198, 65, 148, 189, 11, 157, 128, 62, 194, 143, 40, 187, 245, 90, 175, 189, 244, 33, 33, 189, 205, 212, 84, 61, 211, 92, 28, 190, 157, 33, 153, 190, 5, 61, 87, 190, 162, 46, 97, 62, 9, 116, 180, 188, 133, 39, 93, 189, 80, 210, 200, 61, 145, 209, 12, 190, 221, 247, 217, 189, 95, 49, 183, 189, 29, 136, 145, 189, 204, 105, 168, 188, 131, 184, 141, 61, 204, 9, 44, 190, 103, 174, 182, 189, 248, 227, 235, 189, 229, 21, 16, 190, 54, 141, 201, 60, 117, 8, 36, 190, 151, 24, 90, 186, 20, 49, 248, 189, 155, 92, 73, 188, 114, 82, 248, 188, 147, 34, 254, 61, 224, 113, 18, 62, 115, 193, 51, 60, 64, 186, 33, 190, 11, 4, 197, 59, 243, 220, 171, 189, 189, 130, 39, 190, 51, 146, 11, 190, 245, 178, 4, 190, 19, 128, 173, 189, 15, 103, 11, 60, 167, 161, 35, 62, 154, 220, 120, 189, 244, 119, 20, 191, 214, 184, 193, 61, 227, 128, 125, 189, 131, 104, 55, 61, 103, 14, 103, 62, 32, 34, 2, 189, 190, 148, 150, 190, 192, 109, 77, 189, 27, 101, 83, 62, 167, 250, 201, 190, 194, 28, 129, 189, 69, 72, 11, 62, 69, 218, 239, 61, 129, 66, 199, 189, 194, 45, 146, 61, 63, 155, 96, 190, 173, 139, 103, 190, 251, 194, 87, 62, 1, 16, 63, 190, 203, 13, 246, 189, 11, 72, 225, 190, 217, 75, 241, 186, 141, 222, 116, 62, 52, 149, 38, 191, 218, 7, 53, 190, 27, 197, 57, 62, 216, 170, 58, 62, 43, 8, 132, 190, 134, 196, 69, 191, 20, 131, 0, 61, 98, 192, 255, 62, 116, 2, 34, 190, 36, 207, 140, 190, 37, 101, 206, 59, 4, 101, 231, 189, 38, 240, 156, 190, 237, 3, 244, 189, 232, 205, 0, 189, 96, 5, 135, 189, 19, 172, 150, 190, 216, 40, 31, 62, 169, 135, 182, 61, 126, 104, 20, 62, 191, 57, 86, 190, 42, 204, 40, 190, 191, 75, 218, 61, 103, 254, 60, 62, 138, 101, 99, 189, 103, 251, 120, 62, 151, 17, 42, 61, 197, 219, 94, 62, 170, 93, 45, 62, 233, 219, 87, 190, 183, 232, 245, 187, 54, 138, 20, 189, 107, 203, 222, 189, 226, 205, 135, 62, 186, 247, 36, 62, 36, 135, 34, 190, 215, 234, 214, 189, 149, 7, 162, 61, 168, 74, 49, 62, 1, 77, 210, 61, 56, 242, 163, 59, 178, 188, 94, 191, 171, 198, 73, 62, 31, 205, 145, 190, 97, 184, 190, 61, 62, 87, 225, 61, 173, 207, 139, 190, 75, 124, 70, 186, 235, 236, 137, 61, 156, 47, 46, 62, 46, 119, 19, 190, 79, 12, 10, 190, 209, 254, 181, 62, 135, 248, 227, 61, 41, 220, 74, 190, 87, 46, 83, 62, 253, 124, 100, 190, 90, 20, 140, 190, 167, 137, 144, 62, 181, 243, 169, 189, 40, 84, 21, 62, 32, 71, 223, 190, 110, 252, 24, 190, 104, 170, 192, 189, 205, 137, 161, 190, 78, 198, 179, 190, 152, 59, 153, 61, 218, 3, 185, 62, 184, 50, 221, 189, 141, 204, 42, 191, 79, 255, 192, 59, 182, 179, 165, 62, 86, 138, 5, 190, 93, 198, 187, 190, 245, 81, 193, 61, 206, 161, 138, 190, 119, 188, 164, 190, 201, 234, 183, 62, 187, 103, 16, 191, 223, 23, 187, 190, 13, 87, 241, 61, 135, 127, 184, 60, 35, 91, 16, 191, 24, 142, 158, 61, 241, 234, 132, 62, 127, 154, 29, 189, 106, 10, 2, 190, 104, 21, 148, 62, 152, 132, 68, 190, 69, 163, 155, 190, 44, 45, 49, 62, 26, 65, 195, 190, 254, 202, 155, 62, 216, 32, 184, 190, 213, 202, 227, 190, 137, 229, 144, 61, 37, 118, 46, 191, 77, 183, 233, 190, 230, 176, 88, 61, 177, 172, 111, 62, 31, 115, 138, 190, 55, 247, 12, 191, 62, 226, 152, 62, 69, 201, 228, 62, 109, 70, 242, 190, 157, 242, 187, 187, 96, 121, 75, 61, 203, 143, 242, 60, 29, 21, 248, 190, 195, 3, 2, 190, 243, 196, 126, 189, 188, 126, 39, 61, 9, 141, 172, 190, 106, 192, 1, 190, 205, 75, 31, 62, 46, 251, 153, 62, 191, 131, 74, 191, 216, 139, 71, 62, 121, 168, 35, 62, 69, 220, 163, 62, 113, 113, 15, 190, 222, 169, 176, 62, 150, 102, 93, 61, 255, 54, 124, 61, 32, 90, 103, 189, 237, 130, 62, 61, 138, 35, 224, 61, 11, 192, 194, 61, 190, 228, 137, 188, 156, 57, 22, 62, 49, 156, 134, 190, 22, 35, 37, 191, 102, 255, 194, 61, 186, 120, 104, 62, 1, 185, 29, 190, 188, 106, 140, 190, 188, 79, 165, 59, 121, 124, 20, 62, 115, 15, 64, 62, 158, 8, 236, 189, 239, 97, 152, 190, 196, 51, 201, 61, 216, 62, 1, 191, 247, 233, 192, 188, 116, 78, 214, 190, 210, 129, 233, 58, 232, 216, 67, 189, 252, 68, 177, 62, 132, 230, 33, 191, 0, 239, 138, 190, 210, 77, 29, 62, 212, 190, 108, 62, 70, 122, 203, 57, 234, 199, 154, 62, 88, 154, 54, 61, 22, 74, 169, 61, 121, 16, 83, 190, 242, 233, 22, 60, 110, 172, 92, 190, 149, 104, 108, 60, 42, 242, 76, 62, 207, 29, 233, 61, 107, 57, 247, 187, 71, 4, 55, 191, 84, 116, 163, 189, 107, 254, 129, 62, 101, 177, 44, 62, 78, 35, 209, 188, 0, 49, 124, 61, 160, 53, 9, 191, 193, 64, 0, 188, 47, 140, 13, 190, 0, 138, 69, 60, 103, 22, 76, 62, 84, 215, 0, 190, 177, 169, 174, 61, 84, 179, 178, 188, 154, 52, 29, 62, 94, 94, 127, 189, 75, 178, 149, 61, 18, 4, 163, 61, 64, 36, 162, 60, 47, 178, 233, 61, 25, 213, 83, 62, 153, 205, 8, 191, 245, 56, 5, 190, 112, 103, 151, 62, 25, 180, 107, 190, 243, 248, 213, 187, 206, 31, 181, 190, 86, 126, 206, 189, 221, 98, 19, 189, 190, 63, 4, 191, 170, 236, 164, 190, 13, 10, 40, 189, 146, 78, 216, 189, 230, 106, 31, 190, 78, 204, 54, 191, 3, 114, 28, 62, 160, 16, 110, 62, 225, 53, 143, 61, 115, 128, 1, 62, 178, 242, 17, 190, 5, 50, 105, 190, 233, 75, 218, 189, 108, 252, 246, 185, 213, 51, 113, 189, 18, 31, 58, 62, 208, 52, 252, 61, 160, 195, 25, 61, 191, 159, 200, 62, 254, 115, 211, 188, 55, 22, 133, 190, 122, 144, 8, 62, 42, 29, 184, 62, 39, 76, 31, 62, 209, 205, 219, 59, 4, 40, 139, 61, 151, 76, 101, 190, 160, 155, 51, 63, 198, 102, 4, 191, 63, 67, 230, 61, 138, 232, 42, 62, 110, 15, 89, 62, 64, 139, 178, 190, 219, 228, 164, 62, 115, 37, 118, 190, 233, 160, 187, 190, 183, 170, 57, 189, 100, 207, 156, 62, 181, 36, 48, 190, 58, 9, 14, 191, 130, 32, 21, 62, 160, 53, 115, 189, 144, 54, 132, 190, 205, 244, 168, 62, 27, 4, 128, 190, 176, 125, 203, 189, 150, 222, 238, 61, 114, 69, 182, 62, 10, 143, 38, 188, 169, 32, 105, 190, 72, 192, 7, 61, 189, 192, 172, 62, 228, 209, 48, 191, 146, 199, 58, 62, 146, 24, 15, 62, 237, 224, 133, 62, 158, 187, 38, 61, 249, 155, 155, 62, 160, 204, 203, 188, 198, 48, 244, 62, 160, 200, 201, 190, 163, 136, 222, 62, 163, 155, 168, 61, 236, 95, 49, 62, 193, 27, 223, 62, 232, 170, 168, 62, 140, 62, 139, 190, 156, 192, 56, 191, 136, 130, 110, 61, 14, 150, 158, 61, 248, 227, 151, 190, 197, 157, 37, 190, 226, 201, 54, 61, 51, 216, 226, 189, 106, 71, 226, 62, 92, 65, 73, 190, 223, 87, 69, 190, 203, 182, 11, 59, 171, 88, 208, 191, 93, 75, 194, 190, 178, 54, 201, 62, 212, 63, 58, 61, 71, 230, 185, 61, 6, 252, 71, 62, 3, 98, 146, 189, 35, 252, 65, 191, 0, 115, 211, 190, 54, 29, 4, 61, 100, 197, 52, 191, 67, 14, 110, 190, 49, 84, 145, 190, 81, 243, 117, 190, 84, 145, 242, 61, 236, 172, 166, 190, 74, 203, 143, 62, 106, 235, 11, 61, 12, 214, 145, 190, 219, 27, 120, 190, 206, 105, 201, 60, 155, 191, 185, 189, 161, 255, 19, 190, 254, 160, 6, 190, 51, 131, 116, 59, 97, 119, 226, 189, 205, 100, 247, 187, 185, 153, 130, 191, 24, 143, 157, 61, 62, 101, 128, 190, 83, 58, 208, 59, 164, 5, 77, 62, 38, 94, 37, 189, 85, 18, 139, 190, 174, 212, 148, 61, 79, 196, 146, 62, 175, 39, 21, 190, 39, 166, 157, 189, 31, 163, 179, 61, 47, 202, 251, 61, 103, 68, 12, 190, 119, 159, 164, 188, 161, 254, 155, 190, 115, 41, 104, 190, 218, 108, 133, 62, 24, 114, 40, 190, 91, 52, 74, 190, 205, 249, 151, 190, 54, 5, 168, 188, 220, 238, 218, 188, 95, 49, 177, 190, 138, 45, 191, 190, 48, 10, 243, 61, 86, 200, 41, 62, 35, 215, 215, 189, 156, 3, 20, 191, 189, 243, 31, 188, 62, 38, 236, 62, 229, 224, 132, 190, 116, 195, 52, 189, 89, 78, 8, 61, 2, 103, 170, 188, 47, 223, 120, 61, 157, 76, 1, 62, 59, 146, 48, 62, 133, 218, 206, 58, 206, 104, 253, 59, 30, 204, 6, 190, 145, 176, 198, 61, 109, 235, 4, 189, 92, 174, 2, 62, 51, 152, 3, 190, 87, 126, 110, 188, 170, 53, 4, 60, 21, 10, 17, 190, 255, 89, 141, 189, 108, 101, 144, 58, 155, 205, 5, 62, 48, 163, 26, 190, 163, 11, 168, 61, 217, 198, 14, 190, 228, 155, 98, 189, 54, 170, 240, 59, 198, 206, 72, 61, 140, 67, 40, 190, 212, 241, 252, 189, 95, 128, 182, 189, 112, 170, 92, 189, 254, 24, 185, 186, 10, 102, 62, 189, 47, 79, 196, 61, 146, 83, 14, 62, 231, 75, 225, 186, 239, 14, 6, 190, 232, 37, 225, 61, 199, 239, 129, 62, 88, 197, 156, 62, 149, 229, 200, 190, 110, 35, 239, 61, 144, 151, 135, 189, 112, 123, 192, 190, 95, 254, 12, 191, 21, 171, 119, 190, 27, 70, 250, 189, 215, 111, 185, 59, 50, 100, 22, 189, 91, 105, 174, 190, 63, 87, 56, 189, 188, 79, 26, 61, 105, 129, 125, 62, 191, 43, 67, 189, 41, 195, 235, 60, 65, 131, 161, 62, 60, 53, 115, 62, 92, 105, 54, 190, 214, 140, 10, 190, 97, 80, 133, 190, 115, 182, 246, 190, 33, 173, 231, 189, 115, 78, 192, 61, 132, 24, 208, 190, 36, 117, 154, 62, 205, 121, 128, 61, 221, 10, 7, 62, 114, 3, 70, 190, 15, 3, 149, 60, 155, 136, 202, 61, 71, 4, 137, 60, 4, 202, 207, 190, 3, 33, 216, 189, 204, 203, 5, 62, 241, 25, 154, 189, 35, 156, 15, 62, 53, 84, 212, 190, 152, 145, 1, 191, 73, 236, 100, 190, 110, 247, 82, 189, 122, 75, 75, 62, 93, 128, 203, 60, 112, 95, 101, 61, 127, 53, 223, 61, 121, 31, 86, 190, 57, 208, 142, 61, 91, 169, 249, 61, 48, 84, 197, 190, 182, 215, 20, 190, 252, 121, 186, 61, 126, 222, 240, 188, 124, 157, 37, 189, 196, 153, 118, 190, 130, 54, 63, 60, 173, 173, 33, 188, 248, 48, 178, 189, 78, 60, 72, 62, 19, 141, 255, 189, 49, 31, 86, 190, 159, 31, 36, 190, 11, 36, 229, 189, 0, 206, 100, 190, 130, 203, 207, 61, 45, 164, 86, 61, 241, 203, 23, 62, 34, 24, 0, 61, 137, 74, 34, 61, 200, 88, 239, 60, 220, 99, 60, 62, 214, 132, 156, 190, 223, 227, 68, 62, 38, 35, 21, 62, 237, 207, 129, 61, 84, 120, 151, 187, 126, 132, 144, 62, 26, 16, 0, 61, 214, 65, 31, 62, 14, 114, 49, 190, 66, 226, 239, 60, 49, 241, 149, 188, 65, 200, 160, 62, 81, 192, 89, 189, 114, 81, 149, 62, 191, 248, 198, 189, 65, 159, 127, 190, 216, 232, 6, 189, 27, 50, 148, 61, 226, 214, 84, 61, 132, 37, 43, 61, 33, 230, 47, 190, 20, 252, 51, 191, 21, 226, 194, 61, 14, 192, 108, 189, 21, 97, 93, 59, 97, 20, 154, 62, 175, 55, 111, 190, 245, 5, 50, 190, 62, 101, 51, 189, 52, 237, 131, 62, 255, 242, 133, 189, 29, 220, 205, 189, 181, 152, 138, 62, 205, 140, 20, 190, 204, 59, 178, 189, 138, 150, 80, 62, 72, 165, 43, 62, 10, 112, 228, 189, 110, 160, 107, 62, 225, 169, 211, 190, 94, 49, 190, 62, 181, 89, 238, 189, 183, 49, 67, 190, 230, 172, 147, 189, 185, 238, 27, 191, 99, 142, 194, 190, 245, 90, 113, 62, 131, 171, 135, 62, 112, 163, 102, 190, 199, 241, 14, 191, 130, 139, 198, 62, 178, 30, 61, 62, 3, 161, 28, 190, 247, 205, 28, 190, 63, 98, 128, 61, 171, 221, 128, 61, 16, 186, 11, 190, 85, 219, 211, 189, 226, 96, 12, 191, 64, 221, 126, 189, 242, 25, 3, 191, 31, 161, 74, 189, 78, 190, 186, 61, 84, 240, 164, 61, 155, 57, 89, 191, 101, 119, 13, 190, 196, 8, 243, 61, 82, 222, 171, 62, 89, 183, 188, 190, 214, 155, 142, 62, 36, 193, 136, 189, 116, 152, 132, 62, 236, 225, 43, 190, 101, 49, 3, 190, 58, 199, 155, 190, 177, 178, 54, 61, 49, 18, 212, 61, 80, 21, 132, 62, 90, 121, 95, 190, 159, 84, 79, 191, 24, 128, 204, 61, 196, 9, 91, 62, 213, 29, 213, 189, 224, 177, 68, 190, 103, 205, 192, 189, 115, 212, 236, 61, 91, 181, 1, 190, 225, 84, 211, 189, 105, 75, 207, 190, 20, 214, 9, 62, 37, 68, 172, 61, 48, 122, 57, 61, 148, 239, 102, 62, 252, 22, 148, 189, 51, 217, 26, 189, 128, 6, 180, 62, 158, 8, 118, 191, 223, 89, 41, 62, 35, 74, 99, 62, 168, 70, 38, 62, 247, 82, 218, 61, 194, 195, 141, 61, 183, 185, 157, 187, 159, 168, 59, 62, 132, 209, 12, 61, 230, 184, 196, 62, 216, 244, 127, 61, 26, 160, 238, 61, 236, 149, 193, 188, 2, 28, 236, 61, 135, 38, 12, 189, 253, 113, 13, 191, 190, 104, 61, 62, 143, 67, 72, 188, 216, 223, 161, 190, 158, 90, 172, 190, 2, 240, 233, 60, 155, 69, 140, 61, 14, 180, 161, 189, 11, 19, 175, 189, 69, 252, 48, 190, 78, 39, 181, 189, 90, 246, 57, 61, 154, 165, 16, 62, 9, 123, 71, 189, 190, 44, 250, 189, 252, 181, 33, 62, 134, 248, 31, 190, 7, 131, 191, 189, 46, 147, 227, 189, 142, 128, 34, 190, 172, 205, 170, 61, 162, 232, 29, 190, 87, 126, 185, 61, 236, 114, 14, 190, 89, 10, 171, 188, 92, 214, 16, 60, 23, 227, 234, 189, 28, 228, 108, 61, 168, 7, 6, 62, 174, 34, 5, 190, 123, 37, 25, 62, 149, 100, 43, 190, 54, 32, 34, 62, 218, 252, 11, 62, 224, 238, 200, 189, 193, 246, 96, 187, 244, 135, 15, 189, 190, 29, 227, 189, 105, 94, 167, 60, 220, 5, 38, 62, 62, 205, 153, 190, 186, 137, 93, 190, 157, 45, 23, 62, 213, 168, 141, 191, 191, 14, 3, 188, 172, 97, 31, 62, 100, 190, 107, 189, 190, 140, 218, 189, 51, 156, 156, 188, 26, 80, 233, 62, 70, 136, 228, 190, 114, 202, 133, 188, 185, 107, 195, 61, 172, 100, 76, 190, 167, 222, 152, 190, 202, 204, 37, 62, 225, 132, 16, 190, 53, 149, 91, 62, 68, 34, 118, 190, 244, 20, 50, 189, 100, 8, 28, 62, 20, 35, 77, 191, 247, 30, 12, 191, 182, 151, 221, 61, 222, 142, 115, 62, 195, 243, 128, 188, 108, 209, 81, 191, 49, 220, 29, 62, 218, 93, 57, 62, 190, 241, 189, 190, 152, 39, 49, 61, 154, 230, 4, 63, 38, 64, 69, 189, 230, 77, 77, 190, 59, 61, 121, 62, 255, 246, 215, 191, 62, 38, 227, 190, 36, 155, 195, 62, 190, 91, 205, 190, 216, 219, 134, 61, 219, 167, 132, 190, 5, 5, 180, 190, 178, 197, 110, 191, 84, 17, 144, 190, 36, 211, 133, 190, 44, 23, 139, 188, 48, 121, 251, 189, 60, 178, 148, 188, 41, 117, 96, 190, 193, 171, 215, 62, 134, 185, 147, 190, 244, 194, 40, 62, 175, 214, 2, 190, 184, 93, 224, 189, 191, 211, 118, 190, 120, 178, 219, 61, 179, 203, 82, 189, 238, 235, 236, 189, 27, 89, 8, 190, 48, 12, 45, 62, 49, 26, 40, 62, 254, 200, 139, 190, 251, 97, 113, 190, 136, 49, 132, 190, 163, 69, 249, 61, 214, 1, 54, 190, 148, 45, 135, 189, 82, 87, 76, 189, 253, 20, 63, 62, 65, 232, 138, 62, 211, 253, 161, 190, 221, 139, 74, 62, 54, 18, 230, 62, 175, 54, 206, 190, 188, 229, 114, 62, 78, 170, 208, 61, 111, 174, 88, 62, 146, 79, 149, 62, 104, 17, 166, 61, 207, 171, 186, 61, 24, 84, 228, 189, 60, 107, 36, 189, 232, 177, 88, 62, 157, 52, 71, 190, 218, 84, 170, 189, 13, 119, 212, 189, 19, 7, 194, 61, 176, 167, 8, 190, 170, 212, 189, 190, 76, 50, 218, 189, 174, 51, 142, 62, 97, 38, 160, 190, 47, 215, 162, 190, 98, 29, 18, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 204, 213, 188, 172, 167, 138, 189, 237, 17, 45, 190, 26, 47, 14, 62, 60, 225, 75, 62, 140, 0, 178, 189, 147, 88, 5, 62, 128, 12, 64, 62, 210, 15, 235, 189, 1, 205, 63, 190, 208, 172, 4, 61, 21, 111, 96, 62, 69, 68, 207, 61, 208, 48, 13, 62, 237, 94, 16, 62, 167, 60, 122, 189, 190, 48, 54, 62, 86, 27, 157, 61, 35, 248, 221, 61, 168, 157, 184, 60, 236, 122, 204, 61, 184, 115, 244, 189, 109, 243, 197, 189, 101, 88, 27, 189, 57, 215, 206, 62, 129, 224, 24, 62, 59, 132, 219, 188, 91, 115, 219, 61, 152, 77, 250, 189, 31, 68, 174, 61, 15, 92, 16, 62, 230, 113, 140, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 230, 47, 191, 180, 149, 1, 63, 23, 135, 34, 189, 157, 210, 157, 190, 104, 27, 211, 62, 23, 100, 162, 62, 162, 207, 20, 190, 189, 90, 4, 191, 85, 98, 56, 191, 23, 180, 245, 189, 15, 242, 237, 62, 52, 45, 110, 60, 1, 3, 169, 62, 250, 83, 110, 63, 154, 9, 242, 190, 193, 2, 194, 190, 157, 97, 64, 62, 124, 165, 180, 190, 241, 119, 87, 191, 228, 144, 139, 63, 39, 159, 12, 63, 225, 62, 211, 189, 148, 101, 247, 190, 150, 72, 133, 189, 179, 9, 167, 189, 234, 115, 42, 63, 153, 214, 150, 189, 150, 255, 203, 190, 27, 183, 27, 62, 5, 193, 51, 63, 162, 149, 43, 63, 251, 68, 174, 190, 53, 181, 78, 189, 53, 215, 243, 61, 88, 97, 240, 61, 37, 50, 182, 190, 211, 30, 145, 190, 13, 132, 15, 190, 201, 149, 27, 190, 137, 30, 135, 61, 38, 237, 12, 62, 64, 51, 9, 61, 81, 221, 71, 188, 58, 58, 16, 190, 212, 52, 117, 62, 179, 47, 128, 189, 110, 64, 195, 189, 219, 163, 194, 62, 212, 158, 49, 190, 189, 97, 130, 62, 171, 72, 166, 61, 21, 220, 46, 189, 123, 190, 158, 61, 97, 152, 137, 189, 118, 243, 72, 61, 115, 161, 198, 187, 156, 154, 192, 190, 174, 209, 82, 62, 167, 19, 16, 63, 89, 212, 8, 189, 13, 200, 14, 189, 115, 243, 217, 61, 245, 100, 164, 60, 122, 62, 6, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 183, 5, 190, 11, 187, 142, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {214, 133, 106, 191, 42, 177, 167, 63, 240, 232, 64, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {173, 62, 164, 191, 144, 92, 192, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0039/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}