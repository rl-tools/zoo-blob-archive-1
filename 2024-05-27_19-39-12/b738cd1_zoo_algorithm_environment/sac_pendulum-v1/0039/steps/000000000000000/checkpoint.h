// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 254, 140, 190, 20, 12, 163, 190, 221, 21, 54, 190, 163, 191, 152, 62, 178, 182, 225, 62, 161, 53, 204, 190, 43, 196, 4, 190, 128, 22, 61, 190, 107, 143, 163, 62, 162, 122, 10, 190, 222, 189, 213, 190, 176, 115, 184, 190, 240, 27, 99, 190, 242, 44, 65, 190, 109, 95, 77, 62, 190, 151, 9, 189, 30, 174, 139, 61, 39, 10, 167, 190, 184, 253, 249, 190, 128, 44, 83, 62, 58, 237, 202, 190, 83, 185, 5, 191, 100, 34, 206, 189, 181, 129, 100, 188, 187, 164, 235, 62, 212, 36, 134, 189, 151, 30, 219, 190, 166, 1, 144, 190, 90, 78, 39, 62, 98, 66, 6, 62, 179, 26, 106, 190, 160, 70, 240, 62, 96, 62, 216, 190, 227, 224, 240, 62, 41, 180, 138, 190, 217, 23, 4, 190, 111, 242, 77, 189, 108, 240, 60, 62, 120, 0, 231, 190, 60, 179, 18, 63, 88, 1, 25, 190, 214, 134, 61, 62, 184, 45, 240, 62, 4, 178, 27, 190, 234, 25, 183, 189, 12, 165, 188, 190, 197, 88, 51, 62, 37, 126, 154, 62, 146, 41, 153, 62, 94, 95, 44, 62, 156, 231, 24, 62, 181, 2, 5, 63, 222, 112, 11, 191, 149, 208, 30, 190, 221, 61, 121, 61, 240, 85, 183, 190, 193, 15, 184, 61, 2, 207, 18, 191, 234, 124, 58, 189, 254, 50, 182, 62, 62, 123, 15, 191, 213, 71, 31, 62, 212, 186, 52, 61, 205, 40, 188, 190, 225, 77, 113, 189, 30, 238, 14, 191, 12, 217, 74, 61, 8, 158, 75, 190, 93, 26, 146, 190, 177, 95, 18, 61, 240, 232, 42, 62, 255, 146, 200, 62, 123, 176, 61, 62, 120, 55, 161, 62, 194, 231, 8, 62, 130, 28, 128, 62, 58, 169, 89, 188, 174, 232, 216, 190, 212, 126, 216, 62, 74, 182, 238, 190, 193, 74, 82, 190, 148, 212, 1, 63, 166, 212, 168, 190, 60, 58, 255, 62, 36, 31, 25, 62, 9, 5, 18, 63, 57, 181, 86, 62, 48, 85, 62, 60, 47, 12, 209, 61, 12, 66, 167, 190, 143, 238, 14, 63, 0, 171, 224, 190, 93, 161, 169, 61, 71, 140, 253, 189, 183, 83, 150, 60, 163, 11, 228, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 181, 19, 191, 223, 215, 95, 190, 51, 0, 194, 190, 130, 136, 154, 190, 253, 138, 204, 62, 191, 209, 107, 62, 250, 244, 204, 62, 234, 129, 37, 62, 155, 73, 14, 187, 204, 237, 101, 190, 0, 148, 225, 62, 137, 216, 1, 191, 178, 114, 241, 62, 3, 173, 79, 60, 193, 229, 57, 189, 214, 144, 185, 190, 240, 76, 34, 189, 83, 187, 242, 62, 83, 95, 246, 190, 248, 150, 36, 62, 164, 250, 228, 190, 227, 232, 135, 62, 61, 100, 13, 63, 24, 204, 7, 191, 238, 159, 158, 188, 55, 87, 20, 188, 224, 161, 207, 190, 15, 67, 16, 190, 9, 52, 187, 190, 153, 60, 1, 190, 176, 20, 37, 62, 120, 59, 251, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 245, 145, 61, 56, 8, 236, 187, 213, 52, 23, 190, 203, 42, 48, 190, 145, 59, 178, 189, 220, 62, 195, 188, 178, 216, 80, 59, 227, 68, 49, 62, 29, 75, 17, 62, 194, 56, 145, 187, 100, 229, 233, 61, 92, 27, 23, 61, 224, 97, 205, 189, 9, 7, 184, 189, 71, 64, 26, 62, 165, 254, 114, 189, 150, 65, 88, 189, 89, 58, 122, 61, 71, 242, 10, 61, 198, 57, 22, 190, 120, 19, 107, 60, 184, 80, 177, 60, 154, 193, 162, 188, 119, 23, 38, 190, 210, 128, 49, 62, 205, 125, 195, 61, 4, 100, 238, 189, 129, 57, 28, 190, 252, 220, 34, 190, 91, 70, 4, 62, 129, 132, 8, 190, 192, 195, 21, 62, 9, 45, 210, 60, 16, 243, 5, 190, 56, 36, 4, 190, 212, 200, 28, 190, 160, 85, 31, 190, 109, 241, 130, 61, 192, 159, 16, 62, 114, 93, 253, 188, 182, 204, 182, 189, 253, 131, 214, 188, 223, 92, 135, 61, 169, 177, 139, 187, 255, 6, 248, 61, 65, 116, 36, 61, 117, 190, 8, 190, 238, 122, 10, 189, 156, 203, 123, 189, 196, 82, 208, 189, 211, 32, 46, 62, 150, 181, 19, 190, 152, 243, 77, 189, 55, 186, 168, 189, 146, 46, 29, 190, 17, 52, 31, 61, 141, 7, 229, 189, 59, 68, 79, 189, 86, 51, 51, 190, 84, 4, 190, 188, 189, 200, 253, 61, 193, 137, 189, 189, 65, 81, 47, 190, 162, 152, 146, 61, 168, 91, 108, 187, 111, 55, 33, 190, 232, 230, 137, 189, 3, 12, 212, 60, 21, 163, 48, 62, 59, 145, 171, 60, 75, 16, 21, 190, 90, 71, 164, 187, 96, 43, 234, 189, 240, 161, 34, 190, 81, 105, 210, 60, 245, 165, 137, 186, 182, 34, 224, 60, 110, 74, 3, 190, 22, 20, 177, 60, 228, 40, 28, 190, 102, 88, 30, 190, 8, 14, 19, 61, 250, 135, 224, 189, 23, 230, 195, 61, 1, 6, 54, 61, 128, 150, 42, 190, 73, 192, 172, 189, 252, 53, 116, 61, 183, 239, 190, 61, 110, 44, 170, 188, 66, 214, 52, 62, 174, 161, 62, 60, 187, 11, 28, 61, 195, 180, 85, 60, 135, 49, 167, 60, 115, 0, 150, 61, 70, 146, 46, 62, 245, 117, 111, 61, 245, 241, 67, 61, 193, 229, 17, 61, 80, 195, 186, 61, 167, 94, 196, 60, 232, 252, 47, 190, 99, 198, 215, 60, 149, 161, 47, 61, 100, 221, 246, 61, 198, 61, 59, 61, 159, 45, 250, 60, 197, 168, 173, 189, 27, 235, 0, 61, 103, 188, 145, 61, 190, 111, 169, 189, 166, 248, 25, 61, 237, 79, 99, 188, 37, 58, 40, 62, 38, 210, 0, 190, 214, 20, 203, 189, 123, 9, 95, 61, 246, 102, 44, 190, 65, 74, 40, 190, 107, 39, 29, 62, 127, 52, 19, 190, 84, 103, 193, 61, 130, 75, 151, 61, 135, 251, 144, 189, 72, 242, 200, 189, 106, 163, 209, 189, 222, 68, 122, 188, 24, 165, 254, 189, 184, 39, 204, 61, 138, 229, 166, 189, 65, 87, 174, 60, 200, 159, 229, 189, 42, 167, 156, 60, 95, 140, 114, 60, 205, 127, 186, 189, 222, 76, 153, 60, 118, 190, 21, 190, 209, 119, 17, 62, 147, 85, 8, 61, 205, 122, 194, 61, 100, 58, 135, 61, 77, 182, 72, 189, 213, 255, 25, 190, 203, 140, 82, 189, 202, 59, 16, 62, 55, 200, 154, 189, 107, 81, 187, 61, 154, 36, 137, 188, 161, 118, 122, 61, 75, 2, 119, 189, 207, 212, 189, 61, 62, 74, 209, 61, 79, 37, 114, 188, 25, 35, 26, 62, 52, 100, 38, 190, 231, 201, 25, 190, 22, 112, 4, 190, 170, 30, 138, 189, 152, 130, 202, 59, 119, 245, 97, 189, 189, 78, 29, 190, 88, 39, 200, 61, 223, 46, 33, 189, 219, 101, 246, 61, 104, 142, 210, 61, 9, 56, 253, 61, 7, 112, 10, 190, 234, 86, 203, 61, 215, 195, 107, 189, 70, 127, 175, 189, 135, 49, 27, 62, 197, 241, 23, 190, 171, 211, 181, 61, 45, 159, 50, 62, 41, 253, 142, 61, 255, 23, 131, 58, 167, 192, 36, 190, 6, 193, 248, 189, 36, 145, 226, 59, 184, 226, 226, 189, 96, 186, 9, 190, 158, 155, 160, 61, 54, 54, 60, 188, 101, 245, 251, 188, 230, 189, 3, 189, 83, 107, 49, 60, 162, 13, 164, 189, 186, 98, 173, 60, 176, 42, 75, 61, 154, 36, 251, 188, 139, 162, 1, 190, 31, 116, 15, 60, 204, 183, 161, 61, 36, 171, 192, 189, 161, 217, 83, 189, 224, 198, 223, 61, 143, 206, 159, 61, 35, 162, 7, 62, 103, 10, 40, 190, 101, 125, 153, 59, 222, 178, 237, 189, 86, 195, 5, 190, 62, 192, 209, 61, 240, 111, 248, 189, 234, 114, 6, 62, 87, 27, 35, 190, 57, 104, 166, 60, 192, 195, 0, 190, 46, 118, 239, 61, 110, 16, 210, 61, 185, 215, 208, 188, 177, 67, 26, 61, 66, 52, 3, 62, 185, 84, 239, 188, 243, 138, 134, 61, 233, 151, 132, 188, 221, 121, 26, 190, 5, 178, 198, 189, 247, 21, 103, 188, 177, 80, 47, 190, 187, 18, 220, 61, 222, 249, 182, 61, 5, 225, 115, 61, 201, 69, 239, 189, 190, 243, 13, 61, 54, 147, 41, 62, 124, 175, 158, 61, 135, 36, 250, 61, 239, 226, 154, 61, 221, 68, 110, 61, 202, 187, 219, 61, 209, 181, 5, 62, 244, 139, 187, 61, 15, 242, 188, 61, 97, 116, 195, 189, 207, 68, 133, 61, 107, 201, 10, 62, 42, 222, 202, 188, 33, 191, 160, 189, 99, 93, 135, 189, 28, 160, 71, 188, 165, 25, 147, 189, 42, 65, 28, 190, 64, 158, 105, 61, 191, 228, 236, 61, 88, 93, 231, 189, 93, 41, 250, 189, 93, 94, 251, 61, 246, 212, 238, 189, 40, 61, 237, 61, 103, 161, 219, 189, 39, 162, 6, 60, 141, 54, 5, 190, 189, 144, 130, 189, 161, 237, 4, 62, 28, 93, 178, 189, 99, 36, 29, 189, 85, 39, 173, 61, 36, 247, 123, 61, 253, 234, 188, 61, 214, 65, 1, 61, 253, 167, 64, 61, 134, 125, 200, 188, 86, 16, 26, 190, 6, 167, 71, 189, 212, 54, 56, 189, 194, 137, 134, 60, 231, 218, 208, 189, 239, 207, 70, 61, 78, 68, 8, 62, 7, 1, 162, 188, 142, 7, 7, 189, 110, 156, 54, 189, 188, 14, 252, 189, 158, 7, 245, 61, 84, 69, 40, 190, 53, 17, 237, 61, 8, 38, 209, 189, 107, 156, 235, 61, 200, 242, 0, 189, 194, 29, 35, 62, 23, 229, 9, 62, 247, 74, 44, 190, 146, 104, 12, 190, 166, 155, 154, 189, 197, 227, 216, 61, 216, 46, 2, 62, 9, 116, 180, 188, 133, 39, 93, 189, 43, 175, 235, 61, 145, 209, 12, 190, 38, 127, 183, 189, 95, 49, 183, 189, 29, 136, 145, 189, 224, 246, 14, 188, 131, 184, 141, 61, 115, 4, 29, 190, 103, 174, 182, 189, 248, 227, 235, 189, 229, 21, 16, 190, 162, 71, 249, 60, 117, 8, 36, 190, 57, 255, 168, 60, 150, 144, 236, 189, 110, 223, 142, 188, 85, 139, 221, 188, 80, 234, 16, 62, 220, 52, 29, 62, 115, 193, 51, 60, 1, 236, 33, 190, 2, 82, 188, 60, 71, 150, 141, 189, 189, 130, 39, 190, 51, 146, 11, 190, 105, 92, 245, 189, 74, 120, 161, 189, 15, 103, 11, 60, 39, 49, 42, 62, 104, 235, 73, 189, 218, 102, 43, 62, 26, 244, 253, 59, 115, 208, 22, 62, 38, 61, 205, 61, 180, 29, 218, 188, 143, 16, 213, 61, 238, 53, 26, 190, 144, 200, 129, 60, 142, 250, 45, 61, 243, 209, 107, 61, 94, 43, 42, 189, 59, 52, 136, 60, 213, 53, 9, 62, 24, 246, 185, 189, 27, 233, 38, 190, 188, 189, 43, 62, 20, 244, 161, 189, 69, 160, 144, 189, 173, 129, 158, 186, 119, 135, 48, 190, 36, 217, 149, 188, 81, 73, 33, 62, 223, 17, 29, 62, 73, 201, 227, 189, 50, 255, 206, 189, 97, 88, 195, 61, 142, 237, 200, 61, 252, 249, 72, 189, 80, 197, 50, 190, 222, 162, 36, 189, 67, 144, 191, 61, 89, 95, 52, 62, 69, 45, 8, 62, 32, 250, 168, 189, 18, 244, 165, 189, 100, 48, 131, 188, 223, 168, 200, 189, 198, 193, 4, 62, 203, 40, 189, 58, 197, 12, 15, 190, 249, 25, 110, 61, 128, 214, 1, 62, 236, 35, 50, 62, 169, 156, 92, 189, 32, 104, 9, 190, 76, 139, 70, 61, 99, 71, 191, 61, 224, 217, 30, 189, 153, 210, 18, 62, 57, 182, 234, 187, 186, 56, 52, 62, 67, 208, 40, 62, 194, 73, 64, 189, 18, 130, 247, 61, 92, 172, 176, 60, 172, 176, 157, 61, 215, 25, 175, 61, 61, 183, 7, 62, 124, 133, 3, 62, 165, 9, 255, 189, 211, 98, 111, 61, 34, 83, 193, 61, 20, 196, 8, 62, 229, 115, 37, 61, 82, 114, 21, 190, 88, 206, 151, 61, 181, 143, 244, 189, 176, 39, 244, 61, 72, 59, 167, 61, 124, 86, 207, 189, 39, 150, 0, 62, 11, 26, 17, 62, 189, 232, 0, 61, 237, 50, 8, 61, 107, 116, 218, 189, 142, 238, 226, 61, 9, 89, 36, 62, 53, 165, 33, 190, 138, 255, 11, 189, 46, 209, 150, 61, 166, 222, 211, 189, 16, 28, 108, 61, 12, 148, 175, 61, 163, 243, 36, 62, 200, 194, 20, 190, 66, 125, 114, 60, 88, 77, 27, 190, 238, 229, 7, 62, 122, 110, 118, 189, 68, 9, 81, 188, 130, 254, 49, 62, 142, 193, 180, 60, 6, 210, 2, 189, 125, 197, 199, 189, 167, 243, 192, 187, 21, 63, 232, 60, 148, 131, 28, 190, 159, 84, 42, 61, 236, 179, 127, 189, 16, 121, 3, 62, 176, 19, 15, 62, 166, 73, 3, 61, 238, 29, 218, 189, 30, 28, 97, 61, 66, 201, 23, 190, 144, 178, 17, 190, 147, 14, 183, 61, 6, 100, 132, 60, 75, 7, 181, 61, 167, 197, 88, 188, 83, 186, 134, 60, 245, 128, 135, 189, 170, 25, 188, 189, 174, 142, 30, 189, 195, 47, 134, 189, 151, 111, 227, 61, 131, 157, 94, 61, 248, 66, 6, 190, 224, 164, 81, 61, 210, 148, 253, 60, 125, 64, 50, 190, 193, 117, 28, 188, 195, 11, 98, 60, 108, 121, 72, 189, 117, 1, 242, 61, 49, 122, 247, 61, 174, 174, 250, 61, 248, 56, 188, 189, 223, 177, 16, 62, 125, 227, 143, 61, 239, 156, 36, 189, 192, 231, 40, 190, 220, 34, 55, 189, 236, 30, 32, 190, 163, 155, 233, 189, 171, 213, 22, 190, 66, 39, 166, 189, 103, 23, 227, 61, 152, 24, 99, 61, 235, 2, 5, 190, 142, 55, 132, 61, 197, 23, 50, 188, 204, 10, 197, 61, 17, 217, 241, 189, 149, 39, 232, 61, 229, 225, 229, 189, 179, 237, 172, 60, 93, 139, 48, 62, 115, 230, 174, 189, 138, 136, 206, 61, 166, 43, 39, 188, 213, 48, 87, 188, 137, 69, 4, 190, 128, 175, 43, 190, 226, 178, 141, 189, 3, 161, 162, 188, 179, 178, 202, 61, 72, 16, 152, 188, 221, 154, 20, 190, 62, 76, 203, 61, 116, 59, 35, 62, 59, 194, 169, 189, 230, 14, 7, 190, 90, 208, 108, 61, 109, 122, 22, 62, 160, 107, 229, 189, 1, 9, 157, 189, 150, 39, 97, 188, 236, 79, 199, 189, 224, 40, 1, 190, 46, 111, 34, 187, 51, 111, 127, 61, 238, 85, 45, 190, 61, 58, 145, 61, 18, 85, 79, 188, 193, 181, 29, 62, 68, 62, 18, 62, 97, 103, 234, 60, 24, 118, 161, 61, 81, 196, 161, 189, 255, 145, 61, 61, 190, 96, 40, 61, 52, 182, 105, 61, 31, 65, 21, 62, 16, 57, 62, 189, 205, 120, 224, 61, 227, 217, 255, 61, 105, 60, 205, 189, 154, 18, 79, 61, 244, 15, 177, 61, 165, 176, 15, 189, 96, 227, 2, 62, 182, 112, 15, 62, 23, 122, 107, 188, 145, 226, 162, 189, 62, 88, 127, 61, 0, 35, 46, 62, 43, 168, 150, 187, 249, 184, 30, 62, 67, 39, 21, 62, 11, 221, 129, 61, 5, 237, 245, 61, 175, 120, 242, 61, 112, 142, 91, 61, 157, 248, 57, 61, 213, 150, 249, 61, 134, 153, 4, 62, 118, 231, 213, 189, 36, 243, 171, 188, 206, 100, 139, 61, 92, 158, 33, 190, 21, 17, 82, 61, 96, 176, 16, 187, 50, 123, 138, 60, 16, 92, 19, 190, 97, 197, 5, 61, 5, 188, 45, 190, 7, 250, 225, 189, 59, 78, 204, 189, 232, 35, 189, 189, 158, 216, 180, 189, 98, 25, 195, 61, 195, 77, 29, 190, 97, 43, 36, 62, 58, 36, 64, 61, 102, 96, 122, 188, 59, 221, 36, 190, 86, 193, 43, 62, 87, 177, 27, 62, 98, 226, 175, 189, 170, 35, 32, 62, 243, 194, 131, 61, 172, 214, 15, 62, 2, 184, 34, 62, 167, 43, 204, 188, 200, 75, 158, 61, 122, 218, 220, 61, 188, 135, 3, 62, 212, 206, 160, 60, 148, 226, 92, 61, 154, 101, 35, 190, 231, 19, 20, 190, 14, 185, 177, 189, 146, 62, 169, 189, 91, 155, 29, 190, 102, 126, 10, 62, 121, 211, 235, 61, 82, 94, 13, 189, 119, 88, 221, 61, 147, 17, 154, 189, 238, 62, 131, 189, 195, 134, 26, 190, 212, 3, 12, 62, 44, 248, 160, 188, 46, 63, 2, 189, 110, 3, 10, 62, 31, 187, 61, 188, 94, 43, 51, 190, 92, 131, 9, 62, 233, 184, 143, 189, 121, 184, 22, 188, 43, 131, 223, 189, 123, 125, 237, 188, 30, 60, 63, 189, 50, 43, 29, 190, 208, 162, 201, 189, 9, 56, 214, 189, 112, 57, 4, 190, 45, 11, 203, 189, 24, 182, 46, 60, 153, 249, 242, 188, 8, 94, 102, 60, 164, 120, 16, 62, 43, 68, 130, 189, 80, 136, 224, 61, 47, 9, 174, 189, 135, 82, 251, 61, 76, 19, 18, 190, 17, 105, 209, 189, 180, 28, 179, 61, 153, 21, 46, 62, 197, 108, 32, 190, 37, 22, 31, 190, 82, 144, 222, 189, 51, 51, 181, 188, 21, 232, 47, 190, 245, 76, 88, 189, 85, 65, 248, 189, 1, 131, 164, 189, 29, 84, 23, 62, 0, 72, 102, 61, 220, 58, 17, 190, 229, 189, 105, 188, 23, 230, 137, 189, 0, 222, 84, 61, 184, 18, 51, 62, 218, 26, 90, 61, 0, 245, 204, 61, 10, 129, 10, 62, 142, 78, 141, 189, 148, 237, 105, 60, 78, 66, 195, 189, 137, 170, 199, 189, 133, 180, 26, 62, 9, 63, 0, 189, 154, 19, 17, 190, 160, 194, 228, 60, 80, 147, 43, 62, 236, 99, 244, 60, 88, 113, 123, 61, 249, 196, 141, 61, 224, 194, 219, 189, 216, 64, 137, 187, 237, 39, 41, 189, 216, 91, 138, 189, 165, 45, 42, 62, 10, 60, 162, 61, 221, 154, 199, 189, 145, 217, 91, 189, 181, 120, 40, 62, 131, 69, 34, 190, 146, 178, 113, 189, 31, 144, 8, 189, 36, 7, 222, 60, 109, 22, 19, 62, 47, 130, 202, 61, 174, 97, 35, 190, 151, 145, 218, 61, 235, 72, 240, 61, 116, 249, 15, 62, 196, 144, 176, 189, 63, 178, 5, 190, 227, 174, 12, 62, 22, 125, 75, 188, 194, 47, 21, 190, 232, 145, 202, 61, 129, 213, 19, 188, 40, 177, 193, 60, 214, 23, 12, 188, 39, 80, 43, 190, 252, 94, 9, 61, 108, 83, 218, 61, 152, 52, 221, 189, 102, 163, 40, 62, 132, 131, 194, 189, 67, 122, 7, 60, 113, 85, 237, 60, 95, 242, 162, 61, 86, 237, 185, 61, 204, 127, 241, 189, 237, 40, 22, 62, 93, 60, 10, 189, 116, 195, 52, 189, 89, 78, 8, 61, 2, 103, 170, 188, 47, 223, 120, 61, 157, 76, 1, 62, 59, 146, 48, 62, 133, 218, 206, 58, 206, 104, 253, 59, 30, 204, 6, 190, 145, 176, 198, 61, 109, 235, 4, 189, 92, 174, 2, 62, 51, 152, 3, 190, 87, 126, 110, 188, 170, 53, 4, 60, 21, 10, 17, 190, 255, 89, 141, 189, 108, 101, 144, 58, 155, 205, 5, 62, 48, 163, 26, 190, 163, 11, 168, 61, 217, 198, 14, 190, 228, 155, 98, 189, 54, 170, 240, 59, 198, 206, 72, 61, 140, 67, 40, 190, 212, 241, 252, 189, 95, 128, 182, 189, 112, 170, 92, 189, 254, 24, 185, 186, 10, 102, 62, 189, 47, 79, 196, 61, 166, 116, 31, 62, 17, 48, 33, 62, 157, 27, 82, 189, 223, 96, 42, 190, 149, 14, 48, 62, 206, 196, 60, 61, 30, 222, 134, 189, 154, 65, 51, 190, 58, 218, 251, 61, 244, 190, 15, 189, 97, 229, 207, 189, 174, 120, 16, 62, 138, 99, 122, 189, 39, 240, 82, 60, 162, 248, 24, 60, 122, 53, 105, 189, 190, 54, 25, 62, 66, 61, 232, 189, 54, 23, 255, 61, 77, 149, 187, 60, 250, 46, 43, 190, 48, 88, 32, 61, 78, 122, 211, 188, 129, 227, 133, 189, 196, 42, 165, 61, 94, 30, 150, 189, 44, 25, 51, 190, 87, 126, 232, 189, 150, 117, 35, 62, 90, 235, 222, 61, 125, 211, 228, 61, 186, 4, 25, 62, 56, 145, 42, 62, 107, 135, 203, 61, 180, 93, 170, 61, 66, 38, 42, 62, 110, 135, 39, 189, 170, 162, 223, 189, 47, 125, 180, 60, 180, 67, 2, 62, 33, 68, 214, 61, 146, 10, 39, 62, 191, 200, 18, 190, 35, 215, 139, 189, 49, 194, 231, 60, 255, 248, 56, 189, 208, 88, 176, 61, 208, 64, 214, 61, 155, 44, 105, 61, 128, 88, 124, 61, 111, 156, 235, 189, 244, 190, 254, 60, 211, 98, 192, 61, 210, 113, 20, 190, 236, 47, 200, 189, 193, 63, 241, 61, 51, 154, 160, 189, 29, 135, 105, 61, 41, 116, 201, 61, 99, 61, 189, 60, 230, 186, 74, 61, 139, 31, 95, 189, 35, 50, 44, 62, 85, 220, 38, 189, 111, 1, 129, 189, 121, 182, 26, 190, 247, 240, 191, 189, 217, 112, 192, 189, 102, 48, 73, 61, 10, 157, 96, 188, 4, 197, 213, 61, 121, 177, 183, 188, 78, 191, 133, 60, 83, 68, 49, 61, 221, 237, 234, 61, 134, 42, 242, 60, 151, 193, 192, 61, 2, 155, 131, 61, 8, 84, 162, 189, 51, 57, 17, 61, 124, 66, 29, 62, 72, 101, 52, 190, 204, 94, 36, 62, 139, 140, 17, 190, 42, 82, 85, 61, 241, 21, 173, 189, 82, 147, 17, 62, 79, 85, 237, 60, 44, 142, 160, 61, 242, 150, 182, 189, 90, 18, 144, 189, 82, 92, 68, 189, 253, 88, 222, 60, 153, 110, 189, 61, 9, 117, 1, 60, 29, 8, 12, 190, 4, 115, 194, 189, 101, 11, 46, 190, 211, 225, 212, 61, 219, 19, 244, 61, 160, 143, 28, 62, 208, 166, 193, 60, 155, 151, 187, 189, 254, 103, 229, 189, 189, 169, 34, 61, 0, 200, 110, 189, 188, 0, 180, 189, 240, 72, 98, 189, 164, 91, 158, 189, 225, 211, 185, 61, 240, 240, 1, 62, 21, 236, 207, 61, 91, 71, 151, 61, 4, 27, 25, 62, 71, 26, 252, 189, 89, 71, 211, 61, 220, 96, 43, 61, 4, 198, 193, 187, 172, 175, 34, 189, 240, 83, 23, 189, 225, 61, 204, 189, 233, 17, 160, 61, 9, 51, 46, 62, 186, 252, 23, 189, 142, 215, 190, 60, 95, 68, 30, 62, 95, 180, 193, 61, 60, 15, 141, 61, 212, 222, 28, 190, 22, 161, 27, 190, 205, 56, 137, 61, 152, 43, 75, 61, 136, 71, 130, 188, 237, 86, 3, 58, 255, 104, 132, 189, 9, 232, 35, 190, 91, 214, 178, 188, 214, 103, 162, 61, 2, 104, 220, 189, 204, 34, 182, 59, 69, 234, 165, 61, 31, 151, 99, 61, 198, 144, 5, 62, 13, 13, 38, 190, 144, 49, 9, 62, 19, 114, 51, 188, 46, 87, 251, 61, 24, 68, 212, 59, 209, 30, 174, 188, 107, 48, 18, 190, 218, 145, 27, 62, 233, 139, 136, 60, 245, 122, 4, 62, 170, 233, 106, 61, 43, 104, 254, 61, 196, 104, 140, 61, 7, 244, 51, 61, 211, 111, 52, 190, 193, 151, 37, 190, 209, 85, 253, 189, 46, 140, 43, 62, 189, 126, 151, 189, 70, 218, 32, 190, 196, 213, 214, 189, 221, 120, 241, 61, 92, 254, 120, 188, 86, 79, 32, 190, 203, 36, 19, 189, 42, 211, 201, 61, 167, 230, 231, 189, 230, 101, 148, 61, 109, 116, 32, 190, 18, 34, 121, 61, 116, 30, 13, 62, 183, 123, 142, 61, 177, 222, 192, 61, 12, 59, 130, 189, 97, 199, 70, 61, 155, 137, 133, 187, 205, 26, 198, 61, 209, 49, 238, 61, 194, 157, 45, 189, 152, 137, 125, 60, 57, 72, 7, 190, 43, 102, 167, 189, 235, 252, 15, 62, 167, 79, 11, 62, 89, 244, 196, 61, 66, 199, 5, 190, 125, 193, 24, 190, 156, 201, 22, 190, 141, 128, 118, 188, 48, 52, 142, 61, 39, 17, 159, 189, 46, 141, 145, 189, 232, 82, 47, 190, 209, 163, 13, 189, 120, 104, 96, 61, 9, 218, 29, 62, 58, 106, 188, 187, 87, 241, 244, 189, 57, 157, 47, 62, 155, 44, 26, 190, 7, 131, 191, 189, 192, 131, 215, 189, 62, 245, 31, 190, 172, 205, 170, 61, 9, 194, 8, 190, 87, 126, 185, 61, 51, 146, 15, 190, 104, 165, 55, 188, 226, 83, 103, 61, 68, 117, 185, 189, 241, 85, 159, 61, 136, 125, 30, 62, 174, 34, 5, 190, 123, 37, 25, 62, 100, 102, 35, 190, 54, 32, 34, 62, 226, 161, 17, 62, 224, 238, 200, 189, 95, 234, 221, 59, 45, 141, 177, 188, 190, 29, 227, 189, 186, 212, 95, 61, 38, 38, 189, 189, 246, 9, 36, 190, 18, 212, 154, 189, 76, 246, 132, 61, 162, 110, 191, 61, 118, 37, 34, 62, 249, 46, 0, 62, 13, 7, 224, 189, 208, 78, 101, 188, 139, 177, 235, 189, 26, 219, 123, 61, 196, 150, 112, 187, 250, 202, 47, 62, 88, 91, 58, 189, 94, 211, 129, 61, 246, 132, 39, 62, 222, 239, 152, 189, 129, 113, 250, 60, 137, 23, 216, 61, 33, 217, 101, 189, 125, 183, 26, 62, 173, 181, 34, 62, 102, 139, 50, 190, 154, 197, 12, 62, 185, 61, 243, 60, 78, 120, 51, 190, 239, 252, 26, 62, 195, 105, 119, 60, 254, 228, 78, 189, 184, 24, 128, 189, 24, 224, 236, 189, 175, 90, 91, 61, 211, 226, 157, 189, 160, 238, 152, 61, 66, 27, 144, 189, 106, 5, 164, 60, 20, 216, 145, 189, 190, 11, 199, 189, 86, 134, 125, 189, 3, 239, 1, 190, 242, 36, 181, 60, 249, 91, 107, 61, 193, 171, 40, 190, 28, 149, 178, 189, 3, 190, 134, 189, 156, 157, 22, 62, 135, 35, 186, 60, 38, 225, 82, 61, 19, 105, 26, 62, 152, 146, 166, 61, 95, 155, 23, 62, 52, 27, 235, 60, 222, 43, 216, 61, 148, 249, 227, 189, 35, 4, 243, 61, 238, 85, 147, 189, 209, 169, 19, 61, 144, 208, 179, 189, 187, 18, 153, 61, 237, 109, 216, 60, 165, 47, 235, 188, 147, 91, 172, 61, 251, 179, 217, 189, 181, 132, 12, 190, 10, 138, 228, 189, 97, 154, 171, 61, 216, 88, 132, 61, 157, 249, 142, 187, 37, 46, 23, 190, 38, 63, 198, 189, 253, 255, 7, 62, 41, 215, 32, 190, 10, 24, 194, 61, 247, 218, 167, 61, 24, 130, 139, 61, 252, 153, 151, 61, 105, 39, 246, 188, 154, 128, 19, 190, 174, 207, 40, 62, 13, 125, 172, 189, 226, 177, 191, 61, 108, 84, 36, 190, 175, 15, 205, 61, 117, 167, 143, 189, 55, 125, 32, 190, 67, 180, 24, 190, 97, 241, 204, 187, 215, 183, 228, 189, 3, 41, 244, 60, 32, 236, 106, 189, 68, 170, 39, 190, 191, 163, 33, 62, 98, 172, 115, 189, 167, 171, 19, 188, 203, 22, 38, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 70, 191, 189, 220, 72, 32, 190, 186, 202, 192, 189, 214, 223, 157, 189, 35, 87, 79, 189, 135, 105, 154, 189, 20, 8, 204, 188, 137, 69, 21, 62, 9, 237, 120, 188, 2, 130, 48, 190, 185, 229, 30, 190, 124, 46, 42, 62, 119, 57, 153, 61, 98, 32, 215, 189, 36, 7, 151, 60, 235, 168, 60, 189, 129, 177, 181, 61, 149, 2, 198, 61, 43, 66, 22, 60, 200, 208, 17, 190, 217, 154, 105, 187, 184, 115, 244, 189, 34, 219, 249, 189, 111, 87, 13, 190, 10, 40, 34, 62, 106, 90, 201, 61, 177, 89, 158, 61, 165, 86, 230, 189, 230, 200, 154, 189, 62, 45, 194, 61, 16, 3, 187, 189, 28, 77, 172, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 107, 45, 190, 245, 189, 244, 61, 1, 189, 79, 189, 224, 73, 44, 60, 44, 151, 35, 189, 65, 19, 17, 62, 215, 221, 77, 189, 216, 205, 178, 189, 72, 86, 239, 189, 144, 232, 15, 190, 254, 86, 222, 61, 151, 145, 67, 189, 215, 214, 193, 61, 47, 75, 232, 61, 254, 157, 1, 189, 212, 68, 225, 189, 79, 33, 85, 61, 136, 27, 36, 190, 101, 251, 16, 190, 31, 165, 41, 62, 63, 89, 41, 62, 225, 62, 211, 189, 85, 25, 254, 189, 221, 168, 131, 188, 68, 138, 52, 187, 53, 36, 122, 60, 51, 250, 163, 189, 104, 236, 128, 189, 7, 77, 45, 62, 183, 200, 133, 61, 174, 125, 248, 61, 78, 95, 53, 189, 103, 143, 128, 61, 165, 205, 255, 60, 154, 100, 17, 62, 54, 4, 13, 190, 28, 59, 30, 190, 209, 92, 21, 62, 113, 98, 30, 189, 35, 45, 130, 189, 181, 66, 16, 62, 229, 116, 103, 60, 189, 70, 31, 190, 207, 42, 45, 189, 190, 142, 184, 61, 22, 159, 47, 189, 220, 251, 164, 189, 157, 156, 38, 62, 243, 220, 249, 189, 173, 140, 199, 61, 195, 205, 67, 189, 144, 136, 38, 190, 74, 112, 212, 187, 97, 152, 137, 189, 255, 192, 139, 61, 6, 4, 252, 188, 19, 5, 25, 190, 152, 58, 237, 61, 141, 21, 40, 62, 86, 206, 71, 59, 110, 239, 196, 188, 154, 184, 147, 61, 158, 214, 97, 189, 3, 153, 80, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 56, 12, 190, 88, 47, 38, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {5, 239, 131, 63, 77, 92, 74, 63, 121, 201, 105, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {76, 186, 104, 190, 130, 212, 48, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0039/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}