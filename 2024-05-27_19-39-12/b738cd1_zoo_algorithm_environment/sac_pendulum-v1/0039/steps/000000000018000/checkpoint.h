// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 124, 132, 62, 165, 96, 57, 191, 38, 239, 84, 190, 230, 239, 131, 186, 186, 98, 67, 63, 189, 208, 169, 190, 248, 178, 162, 189, 231, 20, 179, 62, 213, 197, 176, 62, 7, 217, 140, 62, 186, 136, 152, 191, 159, 6, 167, 190, 244, 113, 61, 190, 197, 140, 5, 190, 218, 85, 105, 62, 161, 61, 250, 60, 17, 215, 234, 191, 172, 116, 225, 190, 45, 29, 162, 190, 109, 105, 40, 191, 255, 62, 26, 191, 251, 14, 41, 191, 118, 110, 1, 191, 53, 40, 184, 187, 49, 180, 218, 62, 59, 28, 134, 189, 132, 49, 232, 190, 32, 241, 131, 190, 90, 184, 158, 62, 253, 140, 137, 190, 52, 52, 136, 61, 41, 53, 18, 63, 228, 67, 20, 191, 113, 163, 70, 63, 92, 210, 92, 191, 213, 200, 159, 190, 13, 131, 61, 62, 164, 68, 117, 191, 180, 90, 190, 190, 221, 246, 65, 62, 159, 46, 214, 189, 125, 70, 165, 62, 57, 190, 223, 62, 222, 177, 154, 61, 82, 1, 53, 61, 89, 172, 4, 189, 147, 154, 162, 63, 77, 160, 96, 62, 110, 169, 235, 62, 42, 170, 74, 63, 156, 242, 11, 62, 72, 171, 74, 63, 144, 148, 137, 191, 145, 152, 101, 190, 232, 203, 18, 191, 160, 12, 215, 190, 245, 208, 61, 62, 46, 170, 215, 190, 93, 136, 105, 63, 198, 82, 213, 62, 206, 219, 25, 191, 114, 46, 85, 190, 46, 199, 189, 190, 181, 189, 108, 191, 189, 238, 143, 191, 18, 130, 168, 190, 80, 189, 78, 189, 118, 163, 105, 191, 140, 12, 89, 189, 206, 243, 104, 63, 29, 183, 44, 63, 173, 149, 175, 62, 108, 190, 232, 62, 34, 254, 87, 63, 101, 66, 36, 62, 177, 54, 94, 62, 191, 148, 224, 190, 97, 115, 14, 191, 56, 159, 43, 63, 27, 40, 170, 191, 6, 205, 161, 190, 138, 96, 215, 58, 170, 2, 188, 190, 241, 104, 12, 63, 255, 249, 5, 63, 217, 161, 139, 63, 46, 14, 134, 62, 253, 97, 61, 62, 167, 9, 33, 189, 38, 105, 246, 190, 64, 24, 141, 62, 211, 195, 110, 191, 103, 182, 228, 62, 209, 38, 0, 63, 7, 127, 28, 188, 208, 12, 84, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 232, 135, 191, 12, 14, 176, 189, 144, 12, 61, 191, 143, 189, 195, 189, 61, 106, 28, 63, 107, 170, 167, 61, 150, 18, 224, 190, 167, 249, 137, 62, 88, 9, 43, 62, 125, 53, 188, 190, 249, 37, 171, 62, 125, 5, 15, 191, 63, 31, 146, 62, 1, 238, 157, 62, 229, 48, 1, 190, 240, 233, 157, 190, 249, 27, 48, 189, 62, 51, 227, 62, 210, 41, 192, 190, 121, 236, 4, 62, 9, 202, 39, 191, 217, 211, 195, 62, 187, 72, 222, 62, 196, 226, 93, 191, 167, 212, 93, 60, 253, 231, 216, 189, 214, 205, 134, 190, 155, 46, 128, 61, 153, 115, 97, 190, 25, 162, 55, 190, 31, 151, 133, 62, 2, 180, 40, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 25, 187, 189, 92, 226, 59, 62, 53, 15, 30, 190, 14, 14, 45, 191, 90, 213, 51, 191, 7, 255, 242, 190, 166, 157, 239, 189, 85, 95, 50, 62, 132, 19, 130, 62, 52, 3, 212, 189, 132, 248, 133, 62, 107, 66, 103, 191, 5, 106, 194, 189, 160, 155, 28, 191, 171, 193, 175, 61, 248, 50, 219, 60, 37, 124, 33, 189, 56, 182, 45, 61, 71, 242, 10, 61, 118, 175, 22, 191, 57, 189, 180, 190, 249, 143, 181, 190, 58, 140, 51, 190, 255, 54, 58, 191, 166, 37, 134, 62, 146, 12, 228, 61, 165, 253, 164, 191, 247, 192, 100, 190, 100, 83, 140, 190, 41, 5, 93, 62, 16, 207, 15, 62, 192, 195, 21, 62, 155, 200, 18, 191, 151, 27, 84, 60, 16, 68, 12, 188, 126, 126, 95, 189, 127, 236, 197, 190, 49, 118, 56, 62, 78, 201, 179, 62, 182, 43, 148, 186, 105, 19, 19, 190, 192, 68, 130, 62, 238, 190, 125, 62, 89, 241, 254, 60, 205, 114, 26, 62, 168, 166, 28, 62, 212, 123, 195, 190, 182, 181, 180, 62, 219, 85, 162, 62, 235, 198, 22, 191, 144, 35, 146, 62, 202, 159, 81, 190, 180, 116, 82, 62, 95, 12, 161, 61, 39, 211, 22, 191, 218, 234, 250, 62, 151, 138, 158, 62, 227, 249, 127, 60, 164, 240, 194, 190, 145, 164, 211, 61, 206, 5, 37, 63, 152, 62, 141, 188, 138, 67, 202, 190, 194, 237, 9, 61, 168, 91, 108, 187, 111, 55, 33, 190, 240, 171, 175, 189, 72, 225, 209, 60, 65, 112, 232, 61, 107, 73, 164, 60, 38, 205, 37, 190, 240, 17, 158, 189, 96, 43, 234, 189, 81, 174, 53, 190, 121, 179, 87, 60, 245, 165, 137, 186, 142, 45, 213, 60, 18, 160, 26, 190, 53, 117, 43, 60, 73, 52, 41, 190, 192, 189, 41, 190, 24, 103, 111, 60, 24, 56, 242, 189, 200, 191, 41, 61, 11, 198, 187, 60, 233, 183, 44, 190, 60, 2, 233, 189, 37, 146, 88, 61, 157, 228, 161, 61, 110, 44, 170, 188, 14, 207, 51, 62, 38, 5, 46, 188, 12, 167, 24, 61, 195, 180, 85, 60, 15, 175, 51, 187, 39, 210, 146, 61, 90, 84, 214, 62, 108, 175, 133, 61, 3, 255, 28, 62, 101, 221, 54, 189, 96, 70, 190, 61, 78, 40, 142, 62, 35, 66, 100, 189, 235, 142, 44, 62, 119, 61, 139, 61, 158, 2, 90, 62, 94, 91, 139, 62, 213, 178, 182, 190, 37, 190, 21, 62, 110, 28, 10, 62, 108, 150, 62, 62, 86, 176, 147, 188, 57, 149, 178, 62, 3, 153, 56, 62, 93, 224, 164, 190, 62, 221, 133, 190, 7, 122, 81, 188, 8, 115, 165, 62, 145, 41, 128, 61, 106, 70, 36, 190, 59, 27, 241, 62, 167, 134, 63, 190, 123, 148, 44, 189, 94, 39, 135, 62, 22, 181, 40, 62, 35, 22, 46, 190, 93, 39, 232, 190, 86, 63, 235, 189, 94, 146, 74, 190, 160, 74, 63, 62, 215, 135, 175, 190, 93, 27, 92, 190, 84, 32, 11, 62, 95, 90, 249, 190, 90, 250, 0, 191, 205, 65, 135, 189, 178, 162, 210, 189, 239, 251, 70, 191, 204, 55, 41, 61, 213, 161, 68, 62, 101, 48, 3, 190, 149, 92, 128, 62, 132, 63, 99, 62, 185, 10, 180, 190, 172, 192, 110, 62, 196, 199, 64, 62, 79, 106, 111, 190, 118, 203, 78, 62, 119, 231, 204, 190, 233, 201, 217, 190, 187, 70, 213, 60, 155, 89, 142, 190, 249, 165, 185, 62, 6, 233, 59, 190, 30, 205, 175, 62, 39, 146, 82, 190, 95, 154, 120, 190, 120, 8, 143, 189, 233, 232, 39, 62, 93, 162, 4, 191, 163, 150, 27, 191, 27, 75, 206, 61, 105, 16, 5, 61, 254, 174, 229, 190, 224, 218, 184, 188, 68, 238, 146, 62, 148, 198, 120, 190, 58, 249, 80, 188, 39, 178, 17, 61, 65, 216, 107, 190, 165, 244, 195, 60, 140, 98, 197, 62, 104, 177, 43, 190, 195, 152, 175, 61, 98, 138, 97, 62, 238, 165, 220, 62, 247, 129, 55, 62, 160, 180, 181, 190, 71, 196, 198, 189, 113, 217, 55, 61, 57, 118, 116, 190, 10, 55, 3, 191, 82, 222, 69, 190, 102, 82, 76, 62, 196, 142, 33, 62, 51, 27, 31, 190, 2, 153, 150, 62, 89, 93, 37, 190, 99, 158, 149, 62, 78, 72, 139, 62, 208, 130, 128, 190, 45, 185, 47, 190, 224, 155, 228, 188, 68, 238, 10, 191, 252, 111, 159, 188, 228, 232, 137, 191, 74, 99, 130, 62, 42, 95, 225, 190, 196, 144, 169, 189, 38, 117, 57, 190, 13, 210, 97, 62, 119, 1, 243, 189, 115, 192, 46, 190, 82, 131, 28, 191, 14, 64, 132, 190, 13, 128, 44, 62, 93, 222, 159, 60, 230, 118, 140, 188, 12, 48, 88, 189, 154, 67, 102, 62, 197, 173, 158, 60, 118, 217, 227, 61, 139, 159, 121, 61, 180, 140, 153, 62, 203, 245, 179, 189, 245, 130, 97, 62, 229, 184, 221, 61, 203, 215, 212, 190, 46, 103, 48, 191, 32, 59, 91, 60, 10, 62, 18, 190, 13, 119, 62, 61, 195, 90, 59, 62, 23, 2, 153, 62, 39, 72, 252, 189, 74, 41, 177, 189, 140, 44, 14, 62, 187, 29, 0, 191, 32, 132, 30, 61, 119, 30, 71, 61, 250, 156, 226, 61, 90, 107, 4, 63, 41, 34, 132, 61, 220, 245, 219, 61, 243, 33, 92, 62, 112, 181, 109, 191, 168, 187, 126, 61, 136, 149, 59, 62, 46, 225, 3, 62, 68, 61, 70, 191, 96, 12, 19, 62, 160, 95, 85, 189, 241, 9, 11, 63, 73, 93, 13, 191, 191, 229, 57, 62, 56, 157, 183, 62, 244, 236, 232, 189, 122, 170, 87, 190, 134, 194, 184, 62, 64, 34, 137, 190, 166, 152, 49, 191, 23, 45, 176, 190, 226, 153, 163, 61, 214, 166, 138, 190, 143, 20, 167, 190, 19, 84, 48, 62, 88, 244, 231, 62, 155, 248, 158, 190, 253, 139, 93, 62, 70, 236, 206, 189, 87, 166, 203, 188, 113, 8, 126, 62, 92, 43, 187, 62, 73, 107, 208, 61, 196, 42, 202, 190, 66, 194, 52, 62, 174, 210, 72, 62, 175, 220, 39, 190, 29, 255, 86, 61, 222, 225, 139, 62, 41, 4, 93, 62, 79, 142, 22, 190, 253, 129, 150, 190, 8, 196, 5, 191, 208, 182, 46, 63, 109, 225, 53, 190, 39, 107, 206, 62, 163, 75, 169, 62, 162, 36, 27, 189, 7, 88, 5, 63, 47, 25, 118, 190, 142, 51, 35, 189, 252, 2, 219, 60, 55, 174, 209, 61, 185, 9, 30, 190, 193, 66, 117, 190, 52, 198, 37, 190, 80, 77, 245, 62, 9, 116, 180, 188, 133, 39, 93, 189, 209, 185, 199, 61, 145, 209, 12, 190, 247, 239, 224, 189, 95, 49, 183, 189, 29, 136, 145, 189, 192, 175, 205, 188, 131, 184, 141, 61, 204, 9, 44, 190, 103, 174, 182, 189, 248, 227, 235, 189, 229, 21, 16, 190, 138, 17, 169, 60, 235, 39, 36, 190, 91, 63, 206, 59, 130, 206, 239, 189, 155, 92, 73, 188, 65, 58, 19, 189, 187, 96, 252, 61, 224, 113, 18, 62, 115, 193, 51, 60, 23, 120, 42, 190, 153, 129, 48, 60, 35, 14, 163, 189, 189, 130, 39, 190, 51, 146, 11, 190, 195, 187, 9, 190, 92, 236, 159, 189, 15, 103, 11, 60, 163, 171, 29, 62, 88, 118, 118, 189, 211, 146, 2, 191, 176, 122, 36, 189, 122, 219, 255, 189, 194, 255, 140, 61, 168, 90, 65, 62, 27, 38, 66, 189, 82, 162, 134, 190, 191, 69, 236, 188, 25, 253, 104, 62, 237, 151, 30, 191, 207, 165, 141, 189, 169, 91, 69, 62, 97, 37, 57, 62, 10, 145, 125, 189, 167, 210, 209, 61, 82, 217, 109, 190, 17, 60, 78, 190, 200, 10, 132, 62, 22, 190, 144, 189, 161, 180, 27, 190, 252, 143, 58, 191, 49, 113, 57, 189, 205, 80, 171, 62, 168, 44, 66, 191, 15, 119, 31, 190, 167, 84, 99, 62, 195, 47, 77, 62, 254, 97, 92, 190, 208, 38, 78, 191, 212, 49, 70, 61, 57, 84, 241, 62, 244, 164, 165, 190, 190, 20, 37, 191, 249, 23, 121, 62, 250, 50, 12, 190, 211, 130, 191, 190, 72, 217, 73, 190, 182, 48, 52, 190, 155, 236, 38, 189, 193, 241, 58, 190, 122, 111, 27, 62, 214, 37, 41, 62, 54, 104, 131, 62, 198, 129, 210, 190, 58, 55, 123, 190, 133, 72, 172, 188, 221, 97, 138, 61, 187, 85, 138, 189, 44, 111, 36, 62, 39, 213, 5, 190, 182, 159, 142, 62, 51, 157, 37, 62, 57, 45, 87, 190, 139, 57, 164, 186, 156, 151, 117, 190, 134, 125, 211, 189, 245, 160, 69, 62, 63, 239, 134, 62, 169, 132, 221, 190, 236, 175, 232, 189, 242, 194, 130, 187, 169, 72, 178, 62, 195, 158, 64, 59, 92, 14, 143, 61, 51, 54, 108, 191, 59, 1, 66, 62, 193, 106, 169, 190, 211, 204, 175, 61, 37, 46, 140, 61, 200, 54, 172, 190, 144, 227, 150, 61, 90, 152, 51, 57, 255, 116, 91, 62, 218, 18, 200, 189, 156, 116, 185, 189, 70, 96, 222, 62, 146, 75, 37, 62, 60, 22, 24, 190, 183, 145, 129, 62, 1, 115, 30, 191, 153, 199, 135, 190, 182, 12, 162, 62, 157, 105, 51, 61, 166, 145, 211, 61, 17, 198, 200, 190, 112, 144, 84, 190, 179, 132, 21, 189, 117, 250, 207, 190, 91, 16, 178, 190, 137, 5, 218, 61, 66, 46, 184, 62, 81, 207, 164, 189, 102, 132, 51, 191, 169, 30, 20, 61, 142, 67, 153, 62, 8, 224, 136, 190, 192, 244, 148, 190, 59, 103, 183, 61, 243, 194, 181, 190, 4, 118, 173, 190, 150, 177, 173, 62, 0, 114, 75, 191, 225, 235, 135, 190, 54, 56, 164, 61, 32, 151, 53, 61, 168, 168, 84, 191, 162, 17, 194, 61, 246, 48, 166, 62, 60, 232, 21, 61, 119, 75, 129, 189, 81, 209, 170, 62, 221, 52, 56, 190, 108, 156, 133, 190, 3, 125, 113, 62, 47, 226, 170, 190, 193, 32, 133, 62, 170, 105, 28, 190, 231, 108, 82, 191, 141, 37, 33, 62, 226, 45, 96, 191, 85, 67, 212, 190, 247, 159, 206, 61, 194, 89, 138, 62, 178, 20, 95, 190, 17, 59, 11, 191, 22, 125, 221, 62, 243, 127, 225, 62, 155, 51, 71, 191, 7, 226, 215, 188, 212, 216, 123, 61, 109, 238, 140, 62, 246, 143, 71, 191, 87, 238, 132, 189, 209, 41, 137, 190, 114, 83, 169, 186, 94, 131, 237, 190, 216, 214, 151, 189, 204, 253, 8, 62, 220, 159, 162, 62, 219, 36, 121, 191, 45, 147, 43, 62, 55, 20, 14, 62, 146, 39, 132, 62, 75, 85, 150, 189, 181, 222, 153, 62, 143, 96, 161, 61, 133, 51, 157, 60, 30, 67, 251, 61, 137, 213, 85, 189, 146, 61, 67, 61, 253, 149, 222, 60, 186, 187, 214, 188, 215, 34, 227, 61, 11, 191, 121, 190, 226, 32, 71, 191, 63, 242, 41, 62, 63, 35, 85, 62, 190, 95, 4, 190, 141, 5, 97, 190, 151, 231, 43, 62, 121, 124, 20, 62, 128, 123, 248, 61, 158, 120, 246, 189, 192, 51, 61, 191, 253, 160, 53, 61, 88, 226, 99, 191, 247, 111, 193, 189, 172, 142, 6, 191, 45, 187, 1, 62, 4, 29, 146, 189, 15, 254, 200, 62, 186, 233, 77, 191, 60, 103, 139, 190, 210, 42, 155, 61, 240, 51, 112, 62, 247, 24, 49, 191, 209, 142, 140, 62, 123, 112, 237, 61, 184, 158, 214, 61, 159, 173, 58, 191, 196, 239, 113, 189, 42, 182, 137, 190, 26, 58, 241, 188, 66, 50, 26, 61, 236, 180, 163, 61, 58, 11, 74, 185, 208, 149, 103, 191, 15, 123, 188, 190, 76, 161, 60, 62, 169, 48, 13, 62, 193, 243, 128, 189, 25, 21, 49, 189, 137, 201, 42, 191, 199, 194, 183, 186, 80, 24, 41, 190, 56, 19, 58, 188, 243, 139, 32, 62, 82, 27, 55, 190, 30, 61, 217, 61, 145, 22, 143, 189, 5, 133, 12, 62, 67, 240, 202, 189, 6, 24, 125, 61, 138, 221, 152, 61, 84, 7, 11, 61, 16, 50, 246, 61, 150, 85, 56, 62, 132, 135, 51, 191, 180, 108, 41, 190, 102, 131, 147, 62, 125, 101, 251, 189, 21, 138, 41, 189, 104, 59, 239, 190, 81, 218, 20, 190, 118, 222, 135, 187, 151, 142, 11, 191, 28, 39, 184, 190, 255, 238, 191, 187, 86, 253, 33, 190, 114, 168, 167, 189, 163, 144, 76, 191, 77, 164, 76, 62, 192, 180, 83, 62, 65, 194, 153, 60, 54, 60, 76, 62, 231, 99, 100, 190, 114, 108, 55, 190, 115, 184, 69, 190, 29, 175, 73, 61, 183, 93, 165, 188, 11, 168, 101, 62, 12, 117, 217, 62, 217, 41, 148, 61, 107, 10, 214, 62, 84, 234, 106, 189, 180, 103, 222, 190, 153, 124, 173, 61, 82, 145, 186, 62, 132, 225, 72, 62, 224, 56, 129, 191, 2, 169, 1, 62, 62, 194, 101, 190, 106, 82, 74, 63, 213, 249, 7, 191, 18, 207, 90, 62, 9, 104, 166, 62, 245, 218, 58, 62, 90, 151, 136, 190, 131, 43, 194, 62, 201, 105, 132, 190, 134, 49, 1, 191, 12, 131, 141, 190, 245, 105, 203, 62, 196, 238, 83, 190, 33, 70, 7, 191, 174, 2, 204, 62, 103, 100, 90, 62, 177, 25, 167, 190, 157, 228, 237, 62, 234, 2, 171, 190, 221, 179, 228, 189, 191, 150, 156, 61, 142, 138, 183, 62, 131, 76, 182, 189, 160, 117, 64, 190, 78, 33, 64, 61, 168, 84, 161, 62, 68, 158, 77, 191, 210, 22, 24, 62, 11, 81, 178, 61, 3, 34, 88, 62, 6, 40, 153, 189, 2, 1, 112, 62, 148, 199, 9, 189, 120, 158, 214, 62, 72, 204, 179, 190, 179, 34, 236, 62, 202, 107, 220, 61, 110, 17, 0, 62, 215, 11, 235, 62, 67, 45, 134, 62, 88, 128, 135, 190, 174, 113, 76, 191, 152, 195, 62, 61, 218, 79, 176, 60, 187, 100, 152, 190, 121, 244, 30, 190, 239, 72, 154, 62, 51, 216, 226, 189, 20, 1, 232, 62, 92, 65, 73, 190, 75, 214, 207, 190, 118, 245, 55, 190, 127, 197, 9, 192, 166, 93, 5, 191, 151, 232, 51, 62, 255, 233, 68, 61, 2, 98, 251, 61, 165, 150, 84, 62, 88, 222, 173, 189, 47, 79, 140, 191, 214, 220, 55, 191, 121, 55, 158, 60, 243, 184, 75, 191, 228, 206, 60, 61, 219, 42, 13, 191, 244, 244, 243, 190, 116, 14, 109, 61, 102, 197, 193, 190, 177, 228, 198, 61, 194, 173, 149, 190, 176, 46, 147, 190, 217, 42, 170, 188, 101, 79, 191, 189, 55, 22, 231, 189, 109, 214, 186, 190, 102, 34, 131, 62, 69, 126, 136, 189, 209, 83, 172, 190, 205, 100, 247, 187, 182, 10, 130, 191, 48, 105, 17, 60, 58, 10, 163, 190, 89, 200, 77, 185, 116, 182, 35, 62, 80, 84, 199, 189, 57, 197, 95, 190, 14, 131, 132, 60, 156, 33, 159, 62, 44, 193, 141, 190, 72, 49, 85, 189, 8, 115, 5, 62, 5, 101, 40, 62, 149, 76, 208, 189, 152, 151, 157, 60, 158, 130, 223, 190, 7, 33, 84, 190, 209, 51, 150, 62, 147, 56, 67, 189, 179, 237, 114, 190, 129, 119, 213, 190, 123, 31, 206, 189, 17, 182, 17, 61, 118, 136, 223, 190, 28, 143, 183, 190, 178, 171, 33, 62, 253, 131, 28, 62, 40, 11, 153, 189, 78, 99, 27, 191, 137, 53, 104, 60, 155, 162, 219, 62, 35, 147, 197, 190, 116, 195, 52, 189, 89, 78, 8, 61, 2, 103, 170, 188, 47, 223, 120, 61, 157, 76, 1, 62, 59, 146, 48, 62, 133, 218, 206, 58, 206, 104, 253, 59, 30, 204, 6, 190, 145, 176, 198, 61, 109, 235, 4, 189, 92, 174, 2, 62, 51, 152, 3, 190, 87, 126, 110, 188, 170, 53, 4, 60, 21, 10, 17, 190, 255, 89, 141, 189, 108, 101, 144, 58, 155, 205, 5, 62, 48, 163, 26, 190, 163, 11, 168, 61, 217, 198, 14, 190, 228, 155, 98, 189, 54, 170, 240, 59, 198, 206, 72, 61, 140, 67, 40, 190, 212, 241, 252, 189, 95, 128, 182, 189, 112, 170, 92, 189, 254, 24, 185, 186, 10, 102, 62, 189, 47, 79, 196, 61, 213, 122, 172, 62, 184, 165, 54, 62, 89, 104, 3, 190, 38, 41, 122, 62, 82, 52, 156, 62, 82, 0, 243, 62, 197, 78, 80, 191, 124, 135, 240, 61, 9, 14, 39, 61, 162, 119, 160, 190, 8, 107, 240, 190, 97, 7, 247, 189, 26, 22, 148, 189, 74, 127, 116, 60, 43, 53, 161, 61, 87, 215, 10, 191, 12, 141, 97, 61, 28, 128, 251, 61, 251, 126, 75, 62, 7, 168, 171, 189, 146, 70, 200, 61, 226, 34, 221, 62, 215, 122, 145, 62, 194, 236, 17, 189, 163, 203, 26, 189, 27, 26, 225, 190, 214, 47, 176, 190, 123, 126, 0, 190, 44, 38, 67, 62, 155, 105, 4, 191, 120, 59, 173, 62, 57, 68, 40, 62, 83, 244, 6, 62, 77, 64, 22, 189, 34, 242, 176, 61, 115, 216, 217, 188, 178, 163, 136, 189, 73, 158, 111, 191, 38, 203, 152, 189, 127, 213, 198, 188, 64, 108, 143, 62, 203, 208, 41, 62, 239, 51, 53, 62, 133, 81, 68, 191, 192, 39, 6, 190, 138, 13, 16, 190, 23, 155, 9, 62, 80, 157, 217, 189, 49, 133, 191, 188, 51, 187, 22, 62, 214, 24, 144, 190, 134, 223, 254, 60, 106, 22, 139, 61, 127, 170, 206, 190, 240, 150, 91, 190, 129, 104, 30, 62, 125, 48, 255, 189, 180, 234, 156, 61, 182, 250, 207, 190, 93, 239, 203, 188, 62, 104, 209, 189, 169, 142, 160, 61, 198, 196, 27, 62, 205, 18, 63, 61, 194, 94, 249, 190, 187, 110, 93, 189, 62, 232, 72, 189, 83, 128, 65, 190, 131, 250, 15, 62, 171, 9, 2, 62, 117, 159, 229, 61, 220, 11, 71, 62, 129, 136, 108, 61, 246, 24, 250, 188, 179, 136, 88, 62, 239, 218, 230, 190, 32, 229, 105, 62, 176, 41, 233, 61, 92, 167, 19, 187, 188, 96, 137, 189, 135, 132, 102, 62, 158, 154, 134, 61, 151, 52, 64, 62, 151, 29, 28, 190, 213, 208, 248, 189, 165, 15, 204, 61, 236, 246, 190, 62, 83, 80, 224, 61, 217, 91, 122, 62, 169, 166, 87, 189, 29, 10, 137, 190, 82, 181, 137, 61, 153, 91, 160, 60, 119, 207, 231, 61, 139, 227, 208, 61, 115, 157, 210, 61, 233, 19, 79, 191, 92, 86, 247, 61, 31, 193, 43, 57, 195, 117, 22, 188, 243, 168, 120, 62, 66, 177, 200, 190, 207, 142, 163, 189, 222, 51, 26, 190, 172, 58, 143, 62, 27, 204, 62, 59, 229, 160, 108, 189, 61, 211, 200, 62, 35, 53, 235, 189, 147, 87, 110, 189, 221, 40, 71, 62, 213, 52, 128, 62, 135, 77, 17, 190, 79, 169, 110, 62, 230, 234, 127, 190, 75, 245, 202, 62, 222, 29, 74, 189, 229, 225, 204, 190, 241, 102, 208, 189, 8, 64, 95, 191, 24, 83, 209, 190, 193, 148, 142, 62, 202, 201, 140, 62, 229, 185, 30, 190, 6, 225, 29, 191, 55, 24, 238, 62, 243, 92, 26, 62, 95, 4, 209, 190, 247, 205, 28, 190, 165, 196, 160, 61, 178, 132, 200, 61, 98, 243, 157, 190, 199, 105, 15, 190, 68, 101, 74, 191, 102, 220, 162, 60, 6, 90, 63, 191, 227, 174, 151, 188, 44, 119, 128, 62, 149, 155, 51, 62, 174, 48, 101, 191, 180, 95, 68, 190, 64, 139, 208, 61, 200, 198, 164, 62, 2, 197, 185, 190, 245, 225, 153, 62, 46, 189, 0, 190, 168, 157, 187, 62, 198, 194, 36, 190, 20, 123, 80, 61, 108, 13, 137, 190, 219, 7, 62, 60, 254, 122, 214, 61, 197, 112, 141, 62, 134, 74, 147, 190, 130, 165, 97, 191, 66, 49, 74, 61, 209, 55, 116, 62, 120, 200, 230, 189, 45, 176, 108, 190, 13, 172, 211, 188, 85, 154, 171, 61, 181, 159, 216, 189, 204, 183, 25, 189, 74, 23, 50, 191, 168, 254, 220, 61, 137, 88, 35, 190, 5, 173, 160, 188, 95, 191, 44, 62, 214, 247, 136, 61, 193, 50, 135, 189, 121, 52, 218, 62, 82, 44, 139, 191, 216, 251, 50, 62, 124, 220, 247, 61, 50, 245, 10, 62, 168, 40, 31, 61, 213, 0, 153, 61, 177, 57, 184, 60, 81, 108, 66, 61, 50, 14, 172, 61, 72, 32, 149, 62, 147, 181, 215, 61, 98, 24, 111, 60, 169, 180, 130, 187, 8, 103, 243, 61, 119, 136, 101, 59, 227, 101, 49, 191, 145, 249, 121, 61, 184, 175, 9, 188, 197, 110, 147, 190, 89, 255, 216, 190, 237, 206, 44, 62, 155, 69, 140, 61, 14, 180, 161, 189, 11, 19, 175, 189, 69, 252, 48, 190, 78, 39, 181, 189, 90, 246, 57, 61, 154, 165, 16, 62, 9, 123, 71, 189, 190, 44, 250, 189, 252, 181, 33, 62, 134, 248, 31, 190, 7, 131, 191, 189, 46, 147, 227, 189, 142, 128, 34, 190, 172, 205, 170, 61, 162, 232, 29, 190, 87, 126, 185, 61, 236, 114, 14, 190, 89, 10, 171, 188, 92, 214, 16, 60, 23, 227, 234, 189, 28, 228, 108, 61, 168, 7, 6, 62, 174, 34, 5, 190, 123, 37, 25, 62, 149, 100, 43, 190, 54, 32, 34, 62, 218, 252, 11, 62, 224, 238, 200, 189, 193, 246, 96, 187, 244, 135, 15, 189, 190, 29, 227, 189, 118, 178, 132, 60, 90, 52, 239, 58, 205, 67, 133, 190, 122, 220, 31, 62, 7, 7, 63, 62, 34, 214, 139, 191, 69, 174, 169, 60, 139, 113, 32, 62, 117, 235, 74, 62, 107, 203, 129, 190, 44, 249, 43, 190, 228, 77, 62, 63, 231, 89, 9, 191, 155, 118, 152, 61, 7, 197, 71, 61, 209, 64, 58, 190, 116, 114, 41, 191, 175, 121, 155, 62, 100, 135, 70, 188, 152, 196, 93, 62, 143, 86, 73, 190, 27, 207, 219, 190, 179, 152, 132, 62, 197, 157, 164, 191, 29, 20, 97, 191, 141, 21, 35, 62, 253, 144, 159, 62, 154, 40, 171, 61, 36, 11, 158, 191, 170, 24, 179, 61, 42, 171, 136, 62, 52, 244, 18, 191, 152, 39, 49, 61, 38, 71, 171, 62, 201, 57, 50, 60, 230, 77, 77, 190, 203, 17, 73, 62, 30, 193, 11, 192, 68, 162, 219, 190, 229, 169, 177, 62, 49, 76, 42, 191, 38, 200, 127, 190, 59, 48, 233, 190, 5, 5, 180, 190, 42, 101, 132, 191, 164, 82, 153, 190, 94, 148, 61, 191, 132, 50, 224, 60, 59, 53, 187, 190, 130, 113, 139, 189, 30, 40, 0, 190, 218, 122, 229, 62, 67, 183, 141, 190, 127, 228, 196, 190, 65, 95, 212, 190, 109, 158, 209, 190, 154, 21, 226, 190, 253, 94, 139, 60, 82, 230, 81, 189, 7, 203, 194, 189, 216, 85, 116, 190, 66, 102, 129, 188, 136, 221, 22, 62, 223, 42, 17, 191, 230, 49, 130, 190, 205, 79, 155, 190, 2, 170, 82, 62, 235, 78, 3, 191, 16, 12, 210, 188, 252, 43, 175, 190, 47, 157, 83, 62, 23, 127, 154, 189, 228, 178, 107, 190, 28, 154, 99, 62, 233, 175, 223, 62, 132, 47, 10, 191, 49, 175, 97, 62, 73, 223, 165, 61, 228, 152, 52, 62, 48, 230, 146, 62, 196, 72, 128, 61, 125, 166, 21, 62, 182, 53, 174, 190, 252, 59, 36, 61, 104, 192, 73, 62, 116, 164, 159, 190, 145, 223, 255, 189, 35, 165, 31, 190, 71, 38, 156, 61, 49, 113, 251, 189, 26, 166, 4, 191, 12, 132, 31, 190, 164, 142, 136, 62, 113, 148, 156, 190, 14, 227, 152, 190, 32, 191, 215, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 156, 74, 61, 139, 135, 9, 190, 237, 17, 45, 190, 4, 251, 19, 62, 207, 240, 88, 62, 173, 108, 252, 189, 208, 78, 18, 62, 87, 108, 121, 62, 146, 112, 70, 190, 48, 72, 68, 190, 95, 135, 91, 61, 121, 76, 37, 62, 125, 250, 217, 61, 81, 241, 43, 62, 198, 87, 233, 61, 93, 187, 111, 189, 109, 36, 18, 62, 125, 27, 230, 61, 106, 250, 27, 61, 135, 180, 195, 188, 5, 198, 229, 61, 184, 115, 244, 189, 127, 70, 36, 187, 28, 194, 42, 190, 18, 30, 220, 62, 219, 110, 226, 61, 58, 113, 24, 189, 34, 39, 224, 61, 152, 77, 250, 189, 211, 214, 151, 61, 176, 21, 206, 189, 32, 31, 128, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 181, 153, 191, 87, 248, 24, 63, 23, 135, 34, 189, 66, 170, 85, 190, 245, 16, 181, 62, 78, 215, 177, 62, 69, 71, 196, 189, 201, 119, 39, 191, 79, 48, 76, 191, 252, 217, 238, 189, 197, 224, 199, 62, 230, 103, 0, 60, 237, 16, 103, 62, 209, 31, 95, 63, 44, 106, 193, 190, 26, 168, 71, 191, 144, 170, 149, 61, 159, 182, 196, 190, 97, 162, 30, 191, 242, 218, 162, 63, 233, 185, 195, 62, 225, 62, 211, 189, 52, 140, 241, 190, 167, 38, 10, 190, 244, 102, 5, 189, 61, 67, 32, 63, 139, 59, 9, 62, 242, 63, 175, 190, 27, 183, 27, 62, 170, 238, 161, 63, 109, 136, 125, 63, 55, 134, 43, 190, 159, 4, 81, 190, 149, 101, 131, 61, 88, 97, 240, 61, 141, 132, 224, 190, 80, 134, 156, 190, 66, 160, 211, 189, 3, 252, 155, 190, 118, 29, 36, 62, 32, 35, 215, 62, 224, 84, 10, 61, 75, 139, 181, 189, 128, 85, 146, 190, 64, 161, 106, 62, 76, 106, 232, 189, 253, 114, 118, 190, 26, 191, 48, 62, 114, 24, 39, 190, 81, 111, 227, 62, 54, 247, 163, 61, 144, 238, 137, 190, 62, 134, 235, 60, 97, 152, 137, 189, 146, 201, 23, 190, 146, 70, 173, 189, 180, 221, 236, 190, 35, 33, 134, 62, 89, 52, 24, 63, 129, 123, 9, 190, 13, 200, 14, 189, 54, 21, 177, 62, 24, 121, 211, 61, 116, 14, 43, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 100, 253, 189, 130, 156, 219, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {25, 70, 76, 59, 31, 156, 231, 190, 132, 145, 73, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {170, 163, 152, 190, 104, 22, 215, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0039/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}