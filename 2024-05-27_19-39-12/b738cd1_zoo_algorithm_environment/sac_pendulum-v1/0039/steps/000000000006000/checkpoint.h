// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 224, 62, 62, 165, 239, 23, 191, 226, 221, 128, 190, 144, 50, 6, 188, 174, 186, 62, 63, 73, 0, 217, 190, 52, 174, 70, 61, 201, 107, 225, 61, 228, 129, 203, 62, 84, 254, 220, 61, 128, 170, 92, 191, 224, 189, 184, 190, 179, 152, 51, 190, 151, 46, 195, 189, 133, 242, 165, 62, 143, 211, 11, 62, 122, 2, 162, 191, 34, 155, 5, 191, 131, 33, 43, 190, 204, 175, 215, 190, 242, 73, 59, 191, 164, 5, 16, 191, 29, 134, 49, 190, 188, 139, 21, 189, 93, 216, 233, 62, 31, 152, 51, 60, 32, 5, 6, 191, 248, 138, 83, 190, 143, 66, 107, 61, 151, 75, 154, 190, 157, 51, 38, 61, 35, 74, 55, 63, 77, 132, 25, 191, 69, 145, 79, 63, 60, 33, 45, 191, 137, 47, 138, 190, 249, 33, 212, 62, 168, 73, 51, 191, 140, 88, 25, 191, 222, 135, 189, 62, 85, 96, 95, 190, 86, 18, 170, 62, 97, 7, 72, 63, 46, 53, 212, 60, 26, 95, 254, 59, 97, 198, 192, 190, 127, 18, 0, 63, 114, 142, 132, 62, 151, 97, 19, 63, 198, 83, 8, 63, 154, 96, 45, 62, 232, 154, 84, 63, 27, 229, 94, 191, 68, 2, 233, 189, 199, 45, 245, 190, 169, 135, 44, 191, 154, 53, 45, 62, 95, 219, 34, 191, 140, 198, 25, 63, 2, 175, 243, 62, 165, 193, 255, 190, 86, 44, 239, 188, 178, 184, 190, 190, 80, 144, 188, 190, 112, 127, 97, 191, 192, 144, 201, 190, 98, 238, 196, 61, 132, 4, 32, 191, 206, 124, 116, 61, 205, 138, 83, 63, 124, 155, 249, 62, 113, 92, 182, 62, 165, 238, 15, 63, 213, 16, 29, 63, 247, 147, 225, 61, 240, 148, 142, 62, 126, 185, 153, 190, 186, 80, 7, 191, 69, 131, 51, 63, 183, 127, 117, 191, 193, 0, 147, 190, 114, 190, 214, 61, 166, 241, 209, 190, 62, 114, 29, 63, 40, 63, 16, 63, 162, 184, 102, 63, 243, 41, 129, 62, 159, 5, 153, 61, 101, 123, 165, 61, 122, 109, 243, 190, 18, 255, 141, 62, 16, 145, 64, 191, 130, 50, 243, 62, 235, 225, 30, 59, 106, 111, 247, 60, 8, 230, 69, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 61, 108, 191, 96, 30, 182, 61, 134, 152, 223, 190, 5, 238, 79, 190, 96, 243, 33, 63, 216, 22, 15, 62, 23, 89, 87, 190, 126, 183, 179, 62, 71, 158, 103, 62, 86, 119, 150, 190, 130, 15, 166, 62, 15, 114, 227, 190, 202, 108, 218, 62, 111, 118, 206, 62, 237, 204, 245, 61, 56, 215, 180, 190, 215, 147, 37, 61, 75, 141, 227, 62, 2, 134, 142, 190, 231, 34, 173, 61, 33, 23, 17, 191, 0, 108, 135, 62, 42, 203, 228, 62, 45, 11, 77, 191, 74, 59, 21, 61, 142, 146, 238, 60, 128, 226, 140, 190, 139, 159, 187, 61, 47, 162, 27, 190, 62, 137, 211, 189, 26, 177, 179, 62, 246, 146, 12, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 51, 201, 189, 213, 93, 205, 61, 238, 148, 25, 190, 187, 50, 235, 190, 110, 233, 150, 190, 114, 234, 6, 190, 82, 89, 162, 188, 88, 55, 244, 61, 120, 248, 53, 62, 17, 58, 157, 189, 56, 164, 69, 62, 245, 175, 249, 190, 168, 168, 247, 189, 219, 145, 214, 189, 70, 70, 230, 61, 246, 77, 15, 61, 248, 195, 193, 61, 53, 165, 120, 189, 71, 242, 10, 61, 181, 240, 208, 190, 178, 106, 53, 190, 145, 172, 214, 189, 115, 37, 37, 189, 82, 198, 82, 190, 242, 124, 179, 62, 113, 109, 149, 61, 19, 255, 63, 191, 22, 7, 45, 190, 192, 67, 216, 61, 170, 177, 30, 62, 162, 164, 216, 189, 192, 195, 21, 62, 150, 65, 233, 190, 184, 223, 156, 188, 44, 193, 157, 61, 97, 225, 63, 189, 142, 162, 177, 190, 128, 129, 79, 62, 61, 100, 170, 62, 232, 136, 80, 189, 52, 108, 242, 188, 185, 163, 100, 62, 187, 203, 128, 62, 229, 81, 63, 188, 108, 95, 131, 62, 28, 211, 112, 62, 15, 81, 171, 190, 50, 139, 54, 62, 150, 149, 154, 62, 31, 67, 161, 190, 11, 81, 123, 62, 55, 190, 104, 190, 154, 181, 60, 62, 157, 24, 207, 61, 174, 178, 128, 190, 35, 78, 235, 62, 8, 204, 152, 62, 208, 34, 215, 60, 178, 162, 174, 190, 5, 142, 50, 62, 12, 0, 20, 63, 153, 110, 18, 188, 96, 81, 139, 190, 137, 218, 88, 62, 168, 91, 108, 187, 111, 55, 33, 190, 240, 171, 175, 189, 72, 225, 209, 60, 65, 112, 232, 61, 107, 73, 164, 60, 38, 205, 37, 190, 240, 17, 158, 189, 96, 43, 234, 189, 81, 174, 53, 190, 121, 179, 87, 60, 245, 165, 137, 186, 142, 45, 213, 60, 18, 160, 26, 190, 53, 117, 43, 60, 73, 52, 41, 190, 192, 189, 41, 190, 24, 103, 111, 60, 24, 56, 242, 189, 200, 191, 41, 61, 11, 198, 187, 60, 233, 183, 44, 190, 60, 2, 233, 189, 37, 146, 88, 61, 157, 228, 161, 61, 110, 44, 170, 188, 14, 207, 51, 62, 38, 5, 46, 188, 12, 167, 24, 61, 195, 180, 85, 60, 15, 175, 51, 187, 39, 210, 146, 61, 8, 234, 252, 62, 110, 75, 95, 61, 215, 252, 186, 61, 65, 189, 136, 189, 194, 227, 141, 61, 66, 192, 52, 62, 60, 199, 69, 188, 4, 248, 56, 61, 154, 254, 253, 60, 232, 7, 136, 62, 79, 153, 142, 62, 151, 219, 132, 190, 239, 179, 235, 61, 12, 244, 101, 62, 135, 64, 136, 62, 233, 30, 187, 189, 62, 96, 204, 62, 83, 43, 247, 61, 55, 158, 139, 187, 254, 161, 186, 190, 224, 85, 147, 61, 71, 245, 47, 62, 162, 115, 13, 61, 233, 247, 59, 190, 241, 230, 1, 63, 154, 244, 75, 190, 102, 99, 85, 189, 197, 59, 153, 62, 93, 174, 73, 62, 63, 51, 52, 190, 253, 190, 224, 190, 76, 28, 14, 190, 94, 146, 74, 190, 80, 92, 52, 189, 140, 52, 123, 190, 38, 145, 142, 190, 123, 221, 43, 62, 250, 170, 182, 190, 20, 82, 200, 190, 22, 197, 2, 190, 226, 190, 80, 60, 38, 85, 245, 190, 180, 178, 195, 61, 49, 191, 10, 62, 120, 201, 175, 189, 85, 36, 74, 62, 191, 168, 67, 62, 163, 207, 179, 190, 92, 215, 60, 62, 138, 221, 129, 62, 110, 44, 177, 190, 212, 181, 137, 62, 170, 68, 61, 191, 243, 178, 241, 189, 184, 1, 209, 59, 194, 3, 78, 190, 49, 145, 159, 62, 85, 0, 167, 189, 10, 172, 148, 62, 1, 99, 141, 190, 250, 159, 143, 190, 236, 136, 141, 190, 254, 212, 42, 62, 202, 137, 192, 190, 158, 136, 149, 189, 97, 139, 79, 190, 225, 3, 19, 62, 12, 245, 192, 190, 131, 255, 98, 61, 41, 249, 128, 62, 181, 59, 41, 190, 93, 14, 231, 190, 177, 75, 0, 62, 180, 95, 103, 190, 242, 15, 196, 188, 130, 166, 206, 62, 6, 255, 135, 189, 111, 73, 36, 62, 140, 49, 93, 62, 80, 242, 135, 62, 205, 107, 243, 61, 236, 206, 55, 190, 164, 49, 37, 190, 180, 127, 150, 60, 242, 77, 31, 190, 30, 238, 167, 190, 144, 193, 1, 61, 79, 93, 18, 62, 214, 143, 189, 61, 248, 199, 59, 189, 106, 28, 164, 62, 112, 33, 240, 189, 113, 121, 73, 62, 233, 234, 14, 188, 37, 235, 0, 190, 244, 216, 202, 188, 224, 155, 228, 188, 237, 68, 153, 190, 126, 221, 231, 189, 234, 1, 25, 190, 4, 34, 83, 62, 23, 192, 239, 188, 77, 104, 192, 189, 18, 0, 49, 189, 196, 226, 0, 190, 236, 43, 12, 190, 161, 226, 234, 190, 54, 123, 1, 191, 155, 233, 193, 190, 113, 184, 51, 62, 119, 57, 147, 189, 174, 196, 184, 60, 65, 40, 166, 189, 83, 89, 245, 61, 112, 231, 194, 61, 10, 180, 140, 61, 160, 35, 113, 61, 67, 186, 162, 189, 1, 162, 42, 190, 151, 53, 147, 60, 183, 248, 187, 61, 229, 2, 191, 190, 191, 255, 14, 191, 144, 60, 159, 60, 181, 193, 46, 190, 68, 58, 253, 60, 53, 128, 34, 62, 229, 71, 79, 60, 73, 40, 153, 189, 123, 31, 166, 189, 201, 110, 253, 61, 54, 118, 78, 190, 135, 69, 136, 60, 54, 247, 233, 61, 196, 31, 6, 62, 1, 175, 63, 61, 76, 162, 170, 188, 179, 217, 22, 62, 52, 223, 53, 62, 160, 112, 46, 191, 198, 19, 239, 61, 154, 30, 134, 62, 213, 87, 241, 61, 184, 103, 66, 190, 96, 251, 191, 61, 43, 14, 249, 188, 135, 163, 227, 62, 13, 39, 5, 191, 251, 6, 125, 62, 146, 54, 59, 62, 45, 77, 50, 189, 181, 115, 109, 190, 134, 148, 153, 62, 183, 18, 157, 190, 95, 27, 218, 190, 85, 89, 181, 59, 153, 222, 188, 60, 238, 110, 155, 190, 176, 125, 124, 190, 191, 61, 76, 61, 206, 95, 160, 62, 97, 31, 139, 190, 32, 248, 112, 61, 41, 159, 21, 190, 204, 32, 35, 189, 178, 132, 46, 62, 231, 118, 149, 62, 132, 140, 186, 60, 70, 49, 209, 190, 97, 252, 11, 62, 204, 117, 109, 62, 206, 34, 130, 190, 99, 47, 12, 61, 151, 171, 125, 62, 252, 99, 43, 62, 176, 198, 36, 189, 108, 248, 0, 190, 157, 41, 170, 190, 218, 108, 13, 63, 249, 207, 128, 190, 221, 242, 135, 62, 163, 58, 126, 62, 71, 38, 159, 189, 220, 224, 38, 62, 92, 33, 125, 188, 140, 203, 202, 189, 44, 20, 170, 188, 119, 139, 186, 60, 250, 124, 87, 190, 249, 228, 161, 190, 94, 23, 89, 190, 178, 117, 26, 62, 9, 116, 180, 188, 133, 39, 93, 189, 80, 210, 200, 61, 145, 209, 12, 190, 221, 247, 217, 189, 95, 49, 183, 189, 29, 136, 145, 189, 204, 105, 168, 188, 131, 184, 141, 61, 204, 9, 44, 190, 103, 174, 182, 189, 248, 227, 235, 189, 229, 21, 16, 190, 54, 141, 201, 60, 117, 8, 36, 190, 151, 24, 90, 186, 20, 49, 248, 189, 155, 92, 73, 188, 114, 82, 248, 188, 147, 34, 254, 61, 224, 113, 18, 62, 115, 193, 51, 60, 64, 186, 33, 190, 11, 4, 197, 59, 243, 220, 171, 189, 189, 130, 39, 190, 51, 146, 11, 190, 245, 178, 4, 190, 19, 128, 173, 189, 15, 103, 11, 60, 167, 161, 35, 62, 154, 220, 120, 189, 218, 49, 200, 190, 22, 105, 209, 61, 31, 130, 129, 188, 19, 225, 45, 61, 80, 142, 111, 62, 209, 27, 160, 188, 177, 124, 151, 190, 125, 96, 154, 189, 250, 74, 75, 62, 145, 107, 174, 190, 134, 14, 102, 189, 46, 95, 59, 62, 243, 243, 200, 61, 253, 211, 219, 189, 150, 38, 141, 61, 236, 156, 210, 189, 6, 79, 115, 190, 91, 199, 52, 62, 113, 117, 135, 190, 60, 4, 141, 189, 49, 46, 186, 190, 110, 86, 97, 186, 8, 78, 65, 62, 63, 236, 4, 191, 57, 155, 72, 190, 75, 162, 74, 62, 218, 113, 66, 62, 198, 41, 139, 190, 94, 235, 61, 191, 128, 24, 4, 61, 19, 65, 252, 62, 232, 133, 1, 190, 154, 114, 246, 189, 135, 251, 243, 187, 141, 142, 197, 189, 123, 42, 134, 190, 231, 216, 227, 189, 228, 125, 27, 61, 95, 13, 125, 189, 211, 122, 142, 190, 107, 158, 20, 62, 215, 95, 196, 61, 207, 57, 18, 62, 230, 44, 105, 190, 124, 186, 40, 190, 180, 7, 231, 61, 123, 217, 61, 62, 217, 5, 103, 57, 203, 204, 124, 62, 76, 113, 178, 60, 152, 136, 71, 62, 195, 243, 69, 62, 128, 151, 42, 190, 106, 91, 7, 188, 47, 26, 129, 189, 133, 31, 179, 189, 160, 255, 131, 62, 179, 229, 41, 62, 43, 162, 26, 190, 196, 30, 208, 189, 211, 177, 221, 61, 59, 175, 34, 62, 17, 187, 212, 61, 89, 114, 46, 59, 18, 130, 38, 191, 232, 179, 32, 62, 254, 39, 115, 190, 48, 69, 238, 61, 225, 2, 5, 62, 15, 71, 110, 190, 107, 155, 35, 188, 146, 134, 127, 61, 232, 118, 44, 62, 222, 7, 25, 190, 138, 12, 33, 190, 138, 172, 205, 62, 6, 55, 211, 61, 106, 60, 82, 190, 202, 139, 79, 62, 183, 67, 48, 189, 213, 135, 139, 190, 100, 112, 130, 62, 103, 142, 4, 190, 144, 193, 101, 62, 110, 252, 224, 190, 235, 16, 25, 190, 116, 137, 246, 189, 214, 35, 62, 190, 219, 141, 180, 190, 119, 18, 193, 61, 52, 39, 194, 62, 98, 43, 239, 189, 21, 46, 34, 191, 252, 235, 39, 188, 225, 243, 161, 62, 42, 241, 164, 189, 93, 198, 187, 190, 223, 108, 44, 62, 60, 175, 104, 190, 2, 255, 87, 190, 216, 173, 186, 62, 181, 124, 208, 190, 232, 183, 248, 190, 162, 63, 226, 61, 14, 203, 92, 60, 104, 214, 12, 191, 157, 50, 0, 62, 186, 191, 104, 62, 158, 179, 145, 189, 21, 0, 12, 190, 4, 72, 136, 62, 181, 243, 83, 190, 222, 38, 165, 190, 31, 40, 13, 62, 238, 53, 190, 190, 173, 145, 156, 62, 103, 1, 24, 191, 145, 6, 234, 190, 160, 198, 147, 61, 201, 65, 0, 191, 168, 177, 244, 190, 146, 203, 163, 61, 47, 120, 74, 62, 127, 234, 135, 190, 237, 155, 16, 191, 81, 126, 157, 62, 110, 255, 237, 62, 253, 119, 202, 190, 144, 240, 255, 60, 178, 243, 85, 61, 249, 249, 202, 58, 12, 121, 224, 190, 215, 72, 6, 190, 217, 169, 147, 189, 49, 206, 58, 61, 13, 92, 146, 190, 129, 212, 3, 190, 108, 203, 29, 62, 150, 113, 148, 62, 74, 114, 56, 191, 248, 161, 84, 62, 25, 108, 24, 62, 164, 46, 166, 62, 136, 68, 15, 190, 234, 186, 176, 62, 179, 56, 13, 61, 123, 41, 24, 61, 190, 10, 189, 188, 164, 205, 118, 61, 233, 116, 226, 61, 33, 64, 84, 61, 30, 20, 246, 188, 129, 168, 14, 62, 236, 225, 135, 190, 193, 183, 21, 191, 28, 179, 176, 61, 73, 208, 110, 62, 12, 194, 17, 190, 199, 236, 155, 190, 7, 34, 101, 61, 226, 208, 26, 62, 45, 107, 75, 62, 127, 4, 36, 190, 21, 81, 93, 190, 253, 62, 177, 61, 37, 251, 210, 190, 222, 93, 34, 61, 119, 213, 141, 190, 27, 124, 180, 58, 241, 215, 4, 189, 147, 168, 163, 62, 8, 121, 15, 191, 116, 211, 105, 190, 209, 224, 9, 62, 202, 12, 106, 62, 51, 108, 66, 60, 24, 241, 150, 62, 198, 33, 249, 60, 76, 241, 204, 61, 5, 213, 82, 190, 100, 142, 69, 61, 192, 163, 199, 189, 154, 139, 47, 188, 98, 54, 48, 62, 102, 233, 208, 61, 108, 20, 237, 57, 219, 186, 34, 191, 120, 207, 178, 189, 254, 186, 122, 62, 120, 234, 96, 62, 219, 20, 92, 189, 213, 173, 166, 61, 5, 165, 232, 190, 12, 195, 197, 60, 62, 145, 38, 190, 11, 77, 78, 187, 1, 243, 108, 62, 243, 154, 238, 189, 202, 39, 112, 61, 18, 37, 249, 59, 71, 19, 34, 62, 238, 29, 68, 189, 51, 198, 213, 61, 240, 12, 177, 61, 188, 187, 232, 59, 50, 146, 247, 61, 107, 169, 129, 62, 3, 242, 157, 190, 216, 216, 178, 189, 119, 29, 151, 62, 223, 199, 168, 190, 9, 51, 61, 61, 22, 222, 166, 190, 123, 109, 247, 189, 31, 146, 145, 189, 148, 22, 195, 190, 112, 157, 139, 190, 204, 231, 57, 189, 253, 9, 235, 189, 122, 89, 69, 190, 87, 198, 30, 191, 124, 130, 11, 62, 189, 94, 96, 62, 21, 36, 70, 60, 152, 186, 42, 62, 226, 207, 212, 189, 176, 25, 106, 190, 57, 229, 170, 189, 19, 111, 31, 60, 64, 155, 242, 189, 77, 56, 59, 62, 107, 3, 202, 61, 129, 178, 245, 60, 224, 90, 201, 62, 184, 134, 71, 187, 33, 138, 75, 190, 18, 179, 252, 61, 190, 45, 177, 62, 15, 118, 33, 62, 122, 24, 235, 61, 23, 149, 140, 61, 255, 119, 105, 190, 158, 54, 243, 62, 82, 193, 209, 190, 241, 142, 213, 61, 81, 182, 5, 62, 185, 171, 27, 62, 180, 236, 146, 190, 246, 150, 161, 62, 62, 78, 120, 190, 62, 78, 163, 190, 53, 71, 52, 188, 188, 216, 162, 62, 200, 180, 28, 190, 111, 75, 27, 191, 150, 118, 21, 62, 101, 204, 74, 189, 69, 53, 132, 190, 43, 4, 152, 62, 206, 243, 101, 190, 161, 103, 185, 189, 233, 235, 182, 61, 114, 156, 172, 62, 112, 243, 131, 60, 54, 167, 113, 190, 231, 14, 30, 60, 149, 199, 165, 62, 130, 161, 30, 191, 114, 116, 66, 62, 79, 1, 22, 62, 152, 34, 140, 62, 19, 237, 210, 60, 126, 127, 145, 62, 150, 108, 215, 59, 14, 230, 246, 62, 192, 69, 199, 190, 46, 71, 210, 62, 225, 206, 37, 61, 232, 3, 41, 62, 111, 228, 180, 62, 251, 228, 157, 62, 171, 219, 148, 190, 213, 141, 36, 191, 60, 196, 139, 61, 189, 148, 65, 61, 136, 96, 156, 190, 76, 105, 36, 190, 254, 125, 109, 60, 51, 216, 226, 189, 61, 253, 11, 63, 55, 186, 72, 190, 219, 197, 91, 190, 126, 91, 190, 58, 154, 178, 157, 191, 98, 210, 204, 190, 124, 59, 184, 62, 192, 254, 201, 61, 139, 135, 182, 61, 76, 115, 143, 62, 3, 98, 146, 189, 54, 132, 59, 191, 82, 194, 233, 190, 32, 148, 140, 190, 8, 35, 43, 190, 249, 59, 73, 190, 115, 244, 185, 190, 61, 52, 154, 190, 76, 22, 45, 62, 55, 38, 228, 190, 121, 80, 30, 62, 116, 22, 55, 59, 180, 108, 146, 190, 246, 60, 11, 190, 156, 177, 243, 60, 155, 191, 185, 189, 84, 120, 61, 190, 172, 240, 231, 189, 167, 10, 17, 61, 171, 155, 36, 190, 205, 100, 247, 187, 192, 244, 63, 191, 173, 20, 147, 61, 196, 65, 75, 190, 214, 208, 193, 187, 190, 121, 92, 62, 212, 105, 182, 188, 26, 197, 143, 190, 238, 228, 26, 61, 19, 227, 146, 62, 180, 77, 251, 189, 85, 141, 160, 189, 4, 24, 2, 62, 77, 99, 222, 61, 53, 143, 15, 190, 101, 169, 102, 188, 245, 189, 246, 189, 89, 186, 100, 190, 124, 233, 109, 62, 190, 113, 122, 190, 43, 166, 8, 190, 11, 50, 140, 190, 140, 158, 18, 189, 150, 245, 130, 189, 117, 136, 79, 190, 134, 167, 189, 190, 252, 175, 14, 62, 33, 251, 45, 62, 131, 71, 232, 189, 142, 207, 9, 191, 178, 234, 34, 188, 224, 194, 234, 62, 30, 131, 105, 190, 116, 195, 52, 189, 89, 78, 8, 61, 2, 103, 170, 188, 47, 223, 120, 61, 157, 76, 1, 62, 59, 146, 48, 62, 133, 218, 206, 58, 206, 104, 253, 59, 30, 204, 6, 190, 145, 176, 198, 61, 109, 235, 4, 189, 92, 174, 2, 62, 51, 152, 3, 190, 87, 126, 110, 188, 170, 53, 4, 60, 21, 10, 17, 190, 255, 89, 141, 189, 108, 101, 144, 58, 155, 205, 5, 62, 48, 163, 26, 190, 163, 11, 168, 61, 217, 198, 14, 190, 228, 155, 98, 189, 54, 170, 240, 59, 198, 206, 72, 61, 140, 67, 40, 190, 212, 241, 252, 189, 95, 128, 182, 189, 112, 170, 92, 189, 254, 24, 185, 186, 10, 102, 62, 189, 47, 79, 196, 61, 166, 217, 19, 62, 10, 21, 8, 60, 222, 13, 8, 190, 185, 143, 65, 62, 27, 127, 131, 62, 244, 73, 151, 62, 231, 167, 154, 190, 83, 104, 202, 61, 174, 55, 233, 60, 229, 204, 205, 190, 57, 26, 9, 191, 196, 255, 58, 190, 161, 189, 83, 189, 61, 126, 204, 60, 195, 153, 21, 187, 134, 176, 146, 190, 147, 91, 57, 60, 127, 170, 206, 61, 55, 162, 110, 62, 22, 120, 14, 189, 216, 43, 230, 187, 169, 25, 148, 62, 189, 51, 112, 62, 113, 252, 90, 190, 218, 41, 87, 189, 212, 75, 79, 190, 162, 140, 205, 190, 151, 224, 226, 189, 253, 58, 34, 62, 153, 226, 143, 190, 188, 92, 154, 62, 87, 100, 52, 61, 221, 10, 7, 62, 247, 20, 24, 190, 43, 214, 178, 60, 46, 166, 203, 61, 0, 47, 120, 60, 117, 75, 138, 190, 3, 33, 216, 189, 103, 133, 92, 62, 11, 122, 125, 188, 35, 156, 15, 62, 114, 27, 214, 190, 39, 115, 220, 190, 176, 27, 42, 190, 140, 58, 116, 189, 68, 243, 28, 62, 255, 189, 109, 61, 196, 234, 46, 61, 248, 98, 133, 61, 101, 220, 81, 190, 236, 178, 184, 61, 91, 169, 249, 61, 18, 208, 167, 190, 54, 75, 65, 190, 219, 252, 28, 61, 141, 218, 12, 189, 133, 157, 35, 189, 119, 7, 120, 190, 36, 18, 31, 60, 26, 245, 227, 187, 248, 48, 178, 189, 65, 17, 59, 62, 156, 56, 255, 189, 98, 37, 60, 190, 196, 3, 39, 190, 133, 252, 227, 189, 180, 26, 114, 190, 36, 216, 233, 61, 245, 175, 242, 60, 176, 31, 254, 61, 142, 16, 121, 60, 31, 43, 67, 60, 235, 70, 17, 61, 9, 198, 47, 62, 154, 150, 162, 190, 238, 36, 41, 62, 253, 24, 36, 62, 51, 0, 145, 61, 244, 127, 59, 61, 107, 240, 141, 62, 179, 91, 116, 60, 29, 73, 8, 62, 88, 241, 22, 190, 15, 46, 100, 61, 232, 84, 133, 189, 38, 87, 129, 62, 99, 152, 161, 189, 118, 240, 142, 62, 90, 70, 250, 189, 32, 22, 135, 190, 1, 55, 163, 188, 149, 173, 186, 61, 183, 212, 8, 61, 51, 196, 68, 61, 255, 130, 65, 190, 72, 174, 10, 191, 14, 187, 154, 61, 75, 222, 184, 188, 71, 7, 15, 61, 35, 158, 148, 62, 114, 126, 33, 190, 158, 195, 100, 190, 123, 65, 58, 189, 100, 217, 127, 62, 8, 249, 250, 189, 231, 137, 213, 189, 215, 119, 143, 62, 133, 27, 33, 190, 173, 49, 195, 189, 152, 28, 82, 62, 208, 101, 251, 187, 31, 22, 21, 190, 22, 101, 97, 62, 229, 35, 200, 190, 128, 243, 156, 62, 152, 27, 83, 190, 136, 149, 44, 190, 200, 93, 188, 188, 41, 108, 210, 190, 252, 89, 212, 190, 146, 165, 104, 62, 155, 72, 141, 62, 119, 54, 106, 190, 180, 190, 30, 191, 245, 189, 178, 62, 91, 92, 90, 62, 26, 3, 71, 189, 247, 205, 28, 190, 220, 40, 108, 61, 182, 215, 53, 61, 246, 106, 12, 190, 55, 48, 203, 189, 55, 223, 229, 190, 141, 137, 36, 188, 118, 255, 241, 190, 50, 84, 224, 188, 177, 192, 15, 62, 186, 26, 135, 61, 3, 9, 58, 191, 57, 138, 148, 189, 72, 211, 209, 61, 132, 62, 160, 62, 254, 18, 134, 190, 203, 10, 150, 62, 202, 11, 122, 189, 194, 230, 88, 62, 77, 247, 252, 189, 160, 124, 143, 189, 229, 28, 91, 190, 12, 63, 197, 59, 43, 134, 151, 61, 183, 33, 142, 62, 158, 211, 49, 190, 28, 12, 42, 191, 230, 19, 157, 61, 49, 131, 113, 62, 71, 185, 164, 189, 198, 160, 107, 190, 106, 222, 7, 190, 236, 63, 21, 62, 178, 119, 9, 190, 231, 164, 246, 189, 4, 128, 184, 190, 177, 191, 6, 62, 3, 216, 159, 61, 236, 91, 61, 61, 246, 87, 72, 62, 21, 46, 158, 189, 93, 76, 44, 189, 194, 184, 169, 62, 107, 217, 101, 191, 176, 211, 52, 62, 180, 122, 108, 62, 248, 231, 42, 62, 58, 248, 232, 61, 79, 39, 145, 61, 32, 99, 145, 60, 167, 28, 51, 62, 25, 37, 22, 61, 73, 110, 196, 62, 108, 235, 45, 61, 41, 29, 201, 61, 235, 75, 189, 189, 205, 99, 240, 61, 107, 165, 35, 189, 243, 250, 244, 190, 95, 40, 74, 62, 229, 94, 43, 59, 215, 21, 159, 190, 112, 153, 173, 190, 136, 212, 24, 60, 155, 69, 140, 61, 14, 180, 161, 189, 11, 19, 175, 189, 69, 252, 48, 190, 78, 39, 181, 189, 90, 246, 57, 61, 154, 165, 16, 62, 9, 123, 71, 189, 190, 44, 250, 189, 252, 181, 33, 62, 134, 248, 31, 190, 7, 131, 191, 189, 46, 147, 227, 189, 142, 128, 34, 190, 172, 205, 170, 61, 162, 232, 29, 190, 87, 126, 185, 61, 236, 114, 14, 190, 89, 10, 171, 188, 92, 214, 16, 60, 23, 227, 234, 189, 28, 228, 108, 61, 168, 7, 6, 62, 174, 34, 5, 190, 123, 37, 25, 62, 149, 100, 43, 190, 54, 32, 34, 62, 218, 252, 11, 62, 224, 238, 200, 189, 193, 246, 96, 187, 244, 135, 15, 189, 190, 29, 227, 189, 105, 94, 167, 60, 40, 98, 25, 62, 46, 177, 152, 190, 212, 65, 159, 190, 49, 79, 39, 62, 33, 230, 74, 191, 104, 144, 70, 190, 18, 56, 34, 62, 149, 218, 140, 59, 49, 100, 142, 190, 112, 65, 79, 189, 194, 3, 1, 63, 93, 214, 210, 190, 230, 115, 157, 188, 1, 199, 19, 62, 103, 182, 164, 189, 217, 156, 63, 190, 249, 102, 209, 61, 28, 213, 13, 190, 27, 243, 121, 62, 234, 128, 19, 191, 172, 222, 206, 189, 91, 238, 25, 62, 112, 40, 23, 191, 166, 195, 194, 190, 78, 140, 22, 61, 122, 24, 78, 62, 109, 13, 197, 188, 156, 225, 45, 191, 236, 139, 213, 61, 122, 233, 54, 62, 59, 193, 158, 190, 152, 39, 49, 61, 232, 173, 21, 63, 105, 90, 219, 187, 228, 170, 71, 190, 130, 60, 138, 62, 101, 150, 156, 191, 23, 148, 32, 191, 18, 133, 172, 62, 9, 253, 127, 190, 243, 89, 42, 189, 28, 240, 91, 190, 17, 166, 180, 190, 245, 230, 105, 191, 31, 224, 123, 190, 246, 72, 58, 190, 229, 22, 249, 59, 199, 51, 140, 189, 65, 251, 17, 189, 105, 42, 29, 190, 233, 132, 223, 62, 77, 144, 23, 191, 202, 231, 219, 61, 77, 93, 138, 189, 238, 6, 158, 60, 129, 133, 57, 190, 19, 130, 164, 60, 83, 176, 42, 190, 241, 43, 164, 189, 161, 183, 182, 189, 228, 168, 65, 62, 112, 182, 89, 62, 112, 74, 89, 190, 10, 186, 52, 190, 161, 165, 135, 190, 168, 139, 239, 61, 8, 189, 29, 190, 248, 104, 134, 189, 2, 85, 193, 189, 67, 74, 63, 62, 92, 103, 128, 62, 118, 74, 168, 190, 33, 27, 71, 62, 80, 121, 221, 62, 173, 242, 178, 190, 125, 158, 108, 62, 95, 182, 227, 61, 199, 67, 90, 62, 70, 61, 118, 62, 195, 20, 158, 61, 205, 113, 181, 61, 175, 61, 167, 189, 214, 193, 45, 189, 77, 110, 88, 62, 130, 54, 70, 190, 158, 35, 188, 189, 3, 173, 7, 190, 66, 237, 166, 61, 174, 147, 10, 190, 47, 147, 166, 190, 101, 108, 141, 189, 34, 93, 141, 62, 124, 114, 153, 190, 145, 161, 157, 190, 27, 174, 0, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 230, 138, 60, 109, 227, 164, 189, 237, 17, 45, 190, 177, 17, 1, 62, 239, 91, 78, 62, 209, 149, 234, 189, 123, 215, 216, 61, 132, 213, 53, 62, 161, 253, 151, 189, 1, 205, 63, 190, 45, 136, 50, 60, 96, 228, 82, 62, 32, 142, 193, 61, 68, 205, 1, 62, 4, 130, 10, 62, 196, 209, 137, 189, 238, 232, 103, 62, 159, 63, 169, 61, 26, 172, 236, 61, 139, 146, 69, 61, 147, 185, 181, 61, 184, 115, 244, 189, 146, 122, 143, 189, 63, 101, 67, 189, 77, 102, 193, 62, 174, 43, 14, 62, 180, 217, 159, 186, 68, 126, 190, 61, 152, 77, 250, 189, 4, 245, 239, 61, 84, 191, 40, 62, 130, 191, 81, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 58, 22, 191, 239, 100, 243, 62, 23, 135, 34, 189, 4, 36, 168, 190, 13, 253, 218, 62, 107, 85, 149, 62, 245, 158, 8, 190, 207, 58, 239, 190, 55, 207, 34, 191, 23, 180, 245, 189, 165, 15, 209, 62, 175, 251, 83, 60, 171, 147, 165, 62, 145, 107, 107, 63, 227, 236, 233, 190, 3, 190, 139, 190, 180, 243, 66, 62, 69, 199, 165, 190, 236, 212, 71, 191, 89, 193, 119, 63, 226, 115, 248, 62, 225, 62, 211, 189, 217, 36, 232, 190, 185, 157, 99, 189, 86, 225, 185, 189, 74, 82, 43, 63, 102, 69, 197, 189, 237, 133, 196, 190, 27, 183, 27, 62, 60, 247, 4, 63, 229, 229, 27, 63, 27, 130, 164, 190, 151, 243, 172, 188, 15, 152, 11, 62, 88, 97, 240, 61, 215, 75, 164, 190, 100, 60, 128, 190, 220, 129, 1, 190, 211, 227, 35, 190, 216, 91, 245, 60, 45, 121, 2, 62, 64, 51, 9, 61, 142, 254, 113, 189, 196, 190, 0, 190, 157, 240, 52, 62, 239, 79, 138, 189, 65, 66, 155, 189, 247, 247, 207, 62, 244, 117, 50, 190, 179, 57, 82, 62, 215, 81, 168, 61, 165, 80, 152, 187, 50, 149, 88, 60, 97, 152, 137, 189, 250, 39, 92, 61, 185, 7, 61, 189, 49, 49, 182, 190, 155, 1, 14, 62, 232, 59, 246, 62, 167, 61, 90, 189, 13, 200, 14, 189, 54, 136, 180, 61, 187, 40, 163, 188, 113, 141, 229, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 40, 239, 189, 163, 51, 120, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {183, 87, 35, 63, 75, 253, 64, 192, 89, 11, 5, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {2, 168, 155, 63, 118, 242, 125, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0039/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}