// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 127, 62, 62, 194, 51, 73, 191, 60, 34, 87, 190, 92, 234, 166, 61, 238, 5, 55, 63, 243, 89, 167, 190, 219, 248, 124, 189, 163, 254, 206, 62, 212, 240, 151, 62, 144, 124, 160, 62, 132, 27, 153, 191, 0, 7, 161, 190, 136, 91, 71, 190, 255, 166, 3, 190, 87, 49, 121, 62, 246, 165, 150, 189, 144, 144, 242, 191, 217, 12, 205, 190, 244, 61, 204, 190, 117, 34, 41, 191, 208, 104, 26, 191, 145, 253, 46, 191, 17, 168, 12, 191, 208, 167, 215, 60, 193, 47, 188, 62, 157, 9, 198, 189, 138, 227, 239, 190, 37, 158, 131, 190, 228, 239, 159, 62, 165, 179, 131, 190, 174, 30, 136, 58, 132, 111, 17, 63, 181, 37, 16, 191, 178, 248, 72, 63, 56, 101, 93, 191, 67, 143, 164, 190, 25, 238, 158, 61, 108, 22, 117, 191, 252, 38, 181, 190, 236, 215, 26, 62, 8, 236, 1, 190, 184, 92, 155, 62, 142, 85, 165, 62, 53, 173, 223, 189, 190, 88, 227, 61, 61, 12, 103, 189, 173, 71, 161, 63, 244, 1, 167, 62, 108, 119, 218, 62, 62, 133, 84, 63, 176, 29, 26, 62, 83, 160, 76, 63, 192, 197, 130, 191, 206, 55, 113, 190, 159, 238, 27, 191, 193, 70, 224, 190, 33, 123, 84, 62, 88, 231, 179, 190, 123, 101, 114, 63, 163, 240, 217, 62, 33, 187, 48, 191, 67, 129, 141, 190, 119, 55, 183, 190, 20, 166, 136, 191, 46, 0, 147, 191, 25, 248, 153, 190, 252, 152, 102, 61, 21, 236, 94, 191, 210, 201, 54, 189, 224, 225, 105, 63, 185, 242, 55, 63, 150, 70, 177, 62, 251, 201, 217, 62, 242, 136, 101, 63, 78, 216, 21, 62, 146, 148, 113, 62, 90, 97, 222, 190, 89, 231, 12, 191, 83, 200, 46, 63, 252, 187, 170, 191, 212, 172, 164, 190, 144, 35, 158, 61, 27, 133, 80, 190, 43, 6, 243, 62, 6, 61, 3, 63, 12, 51, 149, 63, 134, 123, 133, 62, 208, 228, 91, 62, 86, 203, 251, 188, 98, 77, 247, 190, 222, 58, 145, 62, 199, 187, 106, 191, 221, 133, 233, 62, 4, 25, 239, 62, 160, 2, 54, 61, 139, 86, 79, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 83, 131, 191, 181, 181, 251, 189, 73, 64, 83, 191, 248, 96, 160, 189, 38, 67, 22, 63, 147, 114, 185, 61, 188, 216, 196, 190, 241, 231, 213, 62, 210, 2, 202, 61, 210, 116, 169, 190, 172, 17, 158, 62, 132, 18, 15, 191, 56, 218, 150, 62, 2, 174, 138, 62, 88, 124, 106, 190, 129, 231, 181, 190, 77, 222, 122, 189, 60, 203, 218, 62, 128, 165, 180, 190, 123, 205, 221, 61, 47, 205, 34, 191, 38, 49, 220, 62, 187, 125, 243, 62, 87, 229, 91, 191, 252, 201, 144, 58, 150, 2, 195, 189, 29, 16, 131, 190, 33, 109, 13, 62, 123, 186, 102, 190, 241, 95, 55, 190, 83, 215, 134, 62, 250, 194, 44, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 25, 187, 189, 169, 249, 72, 62, 53, 15, 30, 190, 51, 203, 45, 191, 84, 26, 62, 191, 20, 137, 1, 191, 107, 213, 7, 190, 192, 151, 97, 62, 51, 63, 140, 62, 171, 24, 5, 190, 196, 101, 140, 62, 192, 130, 101, 191, 40, 230, 138, 189, 142, 207, 44, 191, 210, 90, 228, 61, 16, 116, 155, 189, 132, 97, 38, 189, 216, 79, 161, 61, 71, 242, 10, 61, 99, 36, 46, 191, 53, 12, 168, 190, 174, 115, 143, 190, 6, 147, 88, 190, 186, 17, 59, 191, 81, 166, 132, 62, 173, 137, 10, 62, 36, 192, 164, 191, 247, 192, 100, 190, 63, 55, 132, 190, 135, 62, 115, 62, 94, 199, 247, 61, 192, 195, 21, 62, 231, 91, 19, 191, 160, 110, 169, 59, 68, 199, 39, 62, 50, 14, 114, 189, 124, 125, 200, 190, 36, 243, 53, 62, 62, 187, 191, 62, 71, 157, 21, 189, 223, 66, 28, 190, 106, 184, 149, 62, 255, 69, 114, 62, 50, 173, 40, 61, 54, 199, 6, 62, 82, 10, 70, 62, 124, 90, 239, 190, 60, 20, 186, 62, 7, 91, 133, 62, 55, 116, 42, 191, 224, 51, 241, 62, 96, 222, 69, 190, 76, 166, 92, 62, 179, 153, 81, 61, 50, 62, 39, 191, 132, 88, 5, 63, 67, 67, 127, 62, 144, 230, 16, 60, 110, 207, 201, 190, 20, 245, 65, 62, 152, 132, 24, 63, 19, 116, 162, 188, 98, 220, 151, 190, 183, 150, 5, 61, 168, 91, 108, 187, 111, 55, 33, 190, 240, 171, 175, 189, 72, 225, 209, 60, 65, 112, 232, 61, 107, 73, 164, 60, 38, 205, 37, 190, 240, 17, 158, 189, 96, 43, 234, 189, 81, 174, 53, 190, 121, 179, 87, 60, 245, 165, 137, 186, 142, 45, 213, 60, 18, 160, 26, 190, 53, 117, 43, 60, 73, 52, 41, 190, 192, 189, 41, 190, 24, 103, 111, 60, 24, 56, 242, 189, 200, 191, 41, 61, 11, 198, 187, 60, 233, 183, 44, 190, 60, 2, 233, 189, 37, 146, 88, 61, 157, 228, 161, 61, 110, 44, 170, 188, 14, 207, 51, 62, 38, 5, 46, 188, 12, 167, 24, 61, 195, 180, 85, 60, 15, 175, 51, 187, 39, 210, 146, 61, 78, 123, 195, 62, 34, 231, 106, 61, 124, 114, 177, 189, 189, 245, 229, 188, 67, 191, 4, 62, 207, 95, 149, 62, 7, 77, 158, 189, 142, 35, 137, 62, 220, 188, 101, 61, 153, 122, 42, 62, 100, 184, 131, 62, 18, 34, 181, 190, 95, 75, 29, 62, 212, 103, 5, 62, 109, 254, 70, 62, 161, 211, 4, 61, 124, 50, 182, 62, 242, 53, 73, 62, 93, 7, 197, 190, 235, 169, 86, 190, 83, 108, 148, 188, 109, 59, 186, 62, 67, 48, 196, 61, 245, 204, 67, 190, 43, 168, 247, 62, 78, 17, 66, 190, 191, 136, 192, 188, 75, 142, 122, 62, 31, 171, 50, 62, 1, 218, 48, 190, 232, 17, 229, 190, 181, 2, 91, 190, 94, 146, 74, 190, 120, 214, 61, 62, 39, 180, 169, 190, 34, 176, 15, 190, 190, 61, 198, 61, 141, 65, 204, 190, 121, 220, 26, 191, 165, 236, 230, 189, 141, 157, 222, 189, 71, 115, 80, 191, 108, 225, 88, 61, 208, 110, 88, 62, 33, 248, 2, 190, 136, 126, 119, 62, 2, 132, 92, 62, 148, 193, 247, 190, 76, 41, 68, 62, 111, 234, 52, 62, 155, 222, 96, 190, 211, 217, 243, 61, 247, 53, 205, 190, 249, 18, 241, 190, 39, 114, 34, 61, 53, 133, 161, 190, 224, 94, 162, 62, 98, 86, 51, 190, 156, 198, 180, 62, 241, 43, 65, 190, 21, 26, 153, 190, 172, 250, 143, 189, 154, 213, 45, 62, 149, 247, 226, 190, 163, 150, 27, 191, 234, 180, 154, 61, 168, 63, 42, 62, 199, 13, 242, 190, 36, 237, 112, 189, 104, 27, 152, 62, 143, 47, 152, 190, 110, 45, 202, 189, 5, 73, 37, 61, 184, 85, 129, 190, 209, 97, 161, 60, 243, 62, 194, 62, 235, 27, 54, 190, 138, 143, 195, 61, 61, 57, 104, 62, 114, 142, 210, 62, 153, 255, 55, 62, 169, 18, 183, 190, 51, 203, 5, 61, 156, 6, 106, 60, 125, 138, 129, 190, 29, 194, 44, 191, 253, 9, 73, 190, 61, 91, 78, 62, 153, 66, 28, 62, 103, 160, 64, 190, 37, 157, 160, 62, 219, 133, 17, 190, 118, 203, 152, 62, 87, 138, 120, 62, 38, 196, 104, 190, 202, 224, 75, 190, 224, 155, 228, 188, 53, 74, 16, 191, 185, 163, 228, 189, 79, 192, 133, 191, 214, 253, 130, 62, 246, 223, 182, 190, 241, 143, 239, 189, 209, 48, 231, 189, 254, 75, 46, 62, 227, 133, 179, 189, 193, 24, 125, 190, 253, 158, 35, 191, 40, 189, 141, 190, 107, 211, 11, 62, 51, 61, 153, 60, 121, 50, 175, 59, 9, 126, 166, 189, 246, 40, 77, 62, 239, 127, 248, 187, 171, 219, 232, 61, 62, 8, 45, 61, 237, 245, 244, 62, 250, 246, 215, 189, 78, 150, 61, 62, 17, 152, 172, 61, 75, 169, 253, 190, 124, 29, 51, 191, 114, 66, 190, 188, 148, 233, 47, 190, 87, 66, 106, 60, 155, 89, 37, 62, 67, 254, 121, 62, 98, 152, 36, 190, 225, 111, 121, 189, 127, 198, 161, 188, 175, 246, 248, 190, 168, 121, 67, 61, 123, 241, 236, 61, 113, 241, 31, 62, 13, 161, 52, 63, 184, 131, 45, 61, 58, 6, 26, 62, 222, 136, 81, 62, 219, 25, 128, 191, 204, 35, 109, 61, 176, 117, 39, 62, 227, 240, 216, 61, 162, 184, 82, 191, 152, 82, 161, 61, 48, 4, 191, 189, 60, 123, 33, 63, 189, 2, 254, 190, 72, 248, 111, 62, 203, 38, 239, 62, 162, 246, 220, 189, 2, 150, 130, 190, 191, 231, 152, 62, 178, 11, 129, 190, 101, 157, 62, 191, 184, 215, 52, 190, 253, 51, 97, 60, 180, 206, 121, 190, 12, 109, 147, 190, 110, 68, 14, 62, 24, 92, 226, 62, 174, 167, 183, 190, 105, 35, 91, 62, 219, 123, 212, 189, 174, 255, 166, 188, 139, 196, 130, 62, 21, 239, 180, 62, 181, 217, 16, 62, 107, 31, 211, 190, 90, 255, 7, 62, 230, 101, 51, 62, 47, 126, 51, 190, 239, 232, 42, 61, 32, 126, 149, 62, 181, 1, 104, 62, 220, 122, 62, 190, 221, 15, 187, 190, 131, 248, 4, 191, 7, 27, 54, 63, 215, 205, 69, 190, 128, 239, 200, 62, 65, 46, 174, 62, 246, 144, 105, 187, 32, 216, 3, 63, 245, 215, 153, 190, 10, 25, 93, 189, 31, 113, 178, 60, 27, 92, 1, 62, 91, 194, 70, 190, 58, 186, 130, 190, 191, 78, 16, 190, 171, 164, 251, 62, 9, 116, 180, 188, 133, 39, 93, 189, 209, 185, 199, 61, 145, 209, 12, 190, 247, 239, 224, 189, 95, 49, 183, 189, 29, 136, 145, 189, 192, 175, 205, 188, 131, 184, 141, 61, 204, 9, 44, 190, 103, 174, 182, 189, 248, 227, 235, 189, 229, 21, 16, 190, 138, 17, 169, 60, 235, 39, 36, 190, 91, 63, 206, 59, 130, 206, 239, 189, 155, 92, 73, 188, 65, 58, 19, 189, 187, 96, 252, 61, 224, 113, 18, 62, 115, 193, 51, 60, 23, 120, 42, 190, 153, 129, 48, 60, 35, 14, 163, 189, 189, 130, 39, 190, 51, 146, 11, 190, 195, 187, 9, 190, 92, 236, 159, 189, 15, 103, 11, 60, 163, 171, 29, 62, 88, 118, 118, 189, 89, 128, 252, 190, 179, 244, 149, 60, 169, 171, 246, 189, 25, 18, 100, 61, 201, 108, 71, 62, 147, 175, 137, 189, 108, 78, 117, 190, 72, 221, 83, 189, 5, 15, 109, 62, 236, 29, 2, 191, 102, 201, 27, 189, 74, 5, 53, 62, 181, 218, 48, 62, 126, 175, 75, 189, 226, 215, 202, 61, 199, 243, 121, 190, 0, 216, 80, 190, 226, 61, 122, 62, 139, 104, 175, 189, 76, 1, 164, 189, 44, 91, 63, 191, 43, 78, 145, 189, 29, 99, 164, 62, 54, 114, 60, 191, 79, 33, 35, 190, 155, 123, 120, 62, 123, 69, 52, 62, 221, 184, 57, 190, 126, 133, 81, 191, 70, 138, 146, 61, 196, 3, 243, 62, 79, 38, 100, 190, 87, 230, 24, 191, 201, 165, 138, 62, 231, 54, 60, 190, 166, 166, 189, 190, 243, 156, 120, 190, 39, 122, 48, 190, 134, 118, 164, 189, 41, 163, 28, 190, 158, 247, 25, 62, 204, 224, 253, 61, 19, 134, 140, 62, 13, 171, 209, 190, 58, 32, 130, 190, 229, 163, 218, 189, 141, 86, 85, 61, 248, 149, 237, 188, 242, 129, 63, 62, 179, 109, 13, 190, 222, 43, 130, 62, 30, 117, 54, 62, 191, 114, 110, 190, 254, 30, 175, 59, 129, 139, 136, 190, 209, 196, 73, 190, 25, 18, 100, 62, 229, 228, 132, 62, 230, 149, 226, 190, 91, 181, 53, 190, 2, 29, 9, 60, 102, 98, 178, 62, 180, 235, 168, 189, 49, 72, 218, 60, 44, 155, 100, 191, 239, 172, 73, 62, 56, 86, 147, 190, 135, 176, 147, 61, 207, 159, 187, 60, 1, 75, 178, 190, 48, 154, 184, 61, 52, 125, 159, 188, 217, 199, 69, 62, 117, 117, 99, 189, 50, 51, 200, 189, 201, 4, 214, 62, 57, 231, 15, 62, 33, 214, 71, 190, 190, 74, 105, 62, 94, 131, 26, 191, 194, 248, 163, 190, 155, 103, 131, 62, 11, 252, 67, 61, 231, 87, 44, 62, 200, 91, 201, 190, 82, 168, 108, 190, 125, 235, 189, 189, 0, 11, 238, 190, 148, 17, 207, 190, 23, 27, 208, 61, 157, 64, 164, 62, 123, 191, 207, 189, 172, 10, 69, 191, 227, 232, 0, 61, 103, 6, 126, 62, 203, 115, 95, 190, 215, 51, 171, 190, 230, 205, 163, 61, 142, 198, 180, 190, 82, 196, 156, 190, 140, 142, 172, 62, 151, 240, 77, 191, 105, 218, 95, 190, 62, 69, 206, 60, 164, 47, 36, 61, 60, 168, 72, 191, 206, 138, 205, 61, 118, 122, 171, 62, 17, 44, 20, 61, 169, 119, 31, 189, 56, 83, 170, 62, 249, 28, 152, 190, 49, 125, 135, 190, 67, 237, 115, 62, 229, 174, 181, 190, 229, 242, 131, 62, 22, 243, 8, 190, 124, 196, 110, 191, 14, 201, 46, 62, 191, 120, 88, 191, 0, 24, 216, 190, 0, 66, 236, 61, 87, 97, 140, 62, 42, 69, 54, 190, 19, 102, 15, 191, 243, 251, 222, 62, 182, 150, 232, 62, 176, 219, 47, 191, 7, 226, 215, 188, 137, 130, 240, 61, 175, 184, 67, 62, 69, 192, 57, 191, 62, 193, 57, 189, 179, 145, 125, 190, 60, 145, 203, 60, 115, 220, 207, 190, 80, 23, 87, 189, 95, 181, 34, 62, 166, 52, 175, 62, 107, 175, 115, 191, 138, 20, 74, 62, 216, 253, 252, 61, 163, 160, 137, 62, 209, 193, 163, 188, 139, 199, 161, 62, 89, 181, 194, 61, 212, 176, 25, 189, 91, 147, 28, 62, 107, 123, 189, 60, 199, 182, 66, 62, 97, 30, 165, 60, 46, 182, 16, 189, 178, 245, 6, 62, 153, 105, 79, 190, 64, 61, 65, 191, 66, 45, 0, 62, 205, 249, 106, 62, 251, 183, 165, 189, 160, 69, 113, 190, 87, 38, 237, 61, 121, 124, 20, 62, 209, 244, 223, 61, 158, 120, 246, 189, 34, 16, 68, 191, 141, 95, 204, 60, 206, 118, 103, 191, 97, 243, 197, 189, 148, 55, 238, 190, 242, 13, 219, 61, 182, 132, 195, 189, 217, 28, 185, 62, 117, 175, 85, 191, 1, 13, 143, 190, 111, 82, 85, 61, 120, 139, 101, 62, 47, 57, 89, 191, 221, 25, 110, 62, 217, 44, 189, 61, 184, 158, 214, 61, 46, 13, 100, 191, 170, 112, 7, 188, 117, 45, 49, 190, 254, 237, 112, 189, 3, 104, 213, 60, 98, 222, 28, 61, 228, 155, 59, 186, 111, 161, 111, 191, 18, 61, 153, 190, 220, 143, 21, 62, 251, 188, 18, 62, 196, 158, 86, 189, 49, 247, 169, 189, 24, 12, 45, 191, 123, 166, 129, 188, 66, 48, 8, 190, 228, 65, 140, 60, 227, 7, 54, 62, 247, 211, 40, 190, 240, 106, 211, 61, 225, 206, 19, 189, 69, 105, 10, 62, 90, 254, 247, 189, 25, 143, 106, 61, 78, 193, 175, 61, 197, 208, 50, 61, 124, 96, 18, 62, 106, 182, 53, 62, 224, 255, 40, 191, 119, 141, 20, 190, 53, 179, 156, 62, 24, 63, 245, 189, 148, 4, 216, 60, 240, 8, 3, 191, 166, 88, 9, 190, 244, 82, 199, 60, 24, 138, 1, 191, 74, 252, 173, 190, 207, 241, 156, 187, 111, 133, 9, 190, 205, 104, 59, 189, 42, 176, 72, 191, 198, 106, 62, 62, 167, 237, 99, 62, 224, 147, 191, 61, 34, 196, 83, 62, 198, 173, 140, 190, 149, 99, 132, 190, 196, 242, 74, 190, 75, 64, 113, 61, 66, 133, 121, 60, 142, 3, 94, 62, 107, 253, 3, 63, 96, 222, 252, 60, 47, 71, 201, 62, 71, 91, 225, 189, 243, 79, 246, 190, 247, 212, 130, 61, 74, 224, 185, 62, 94, 44, 57, 62, 221, 160, 134, 191, 126, 136, 201, 61, 150, 42, 124, 190, 51, 56, 85, 63, 185, 108, 249, 190, 212, 163, 81, 62, 70, 140, 184, 62, 31, 147, 70, 62, 42, 212, 129, 190, 213, 218, 179, 62, 144, 21, 152, 190, 162, 242, 6, 191, 158, 172, 19, 190, 183, 62, 190, 62, 80, 73, 121, 190, 226, 115, 253, 190, 93, 241, 196, 62, 21, 203, 9, 62, 24, 10, 134, 190, 101, 19, 216, 62, 155, 166, 183, 190, 239, 44, 17, 190, 37, 160, 43, 61, 54, 200, 201, 62, 176, 109, 22, 190, 168, 89, 48, 190, 114, 65, 205, 61, 45, 248, 172, 62, 52, 194, 89, 191, 205, 117, 27, 62, 108, 112, 109, 61, 246, 150, 77, 62, 44, 58, 235, 189, 144, 226, 94, 62, 226, 92, 91, 189, 17, 214, 198, 62, 211, 220, 201, 190, 16, 251, 243, 62, 71, 74, 218, 61, 35, 52, 159, 61, 181, 249, 229, 62, 77, 5, 125, 62, 130, 96, 99, 190, 99, 254, 89, 191, 12, 7, 172, 60, 216, 214, 147, 58, 214, 0, 117, 190, 35, 159, 52, 190, 236, 40, 136, 62, 51, 216, 226, 189, 85, 165, 231, 62, 92, 65, 73, 190, 123, 31, 208, 190, 228, 215, 133, 190, 127, 197, 9, 192, 57, 104, 24, 191, 100, 89, 40, 61, 218, 238, 75, 61, 184, 234, 228, 61, 200, 189, 77, 62, 166, 111, 211, 189, 243, 158, 170, 191, 27, 127, 71, 191, 81, 242, 157, 189, 187, 150, 65, 191, 150, 128, 222, 61, 100, 151, 88, 191, 244, 244, 243, 190, 103, 174, 37, 61, 8, 57, 228, 190, 4, 202, 206, 187, 238, 17, 155, 190, 3, 30, 149, 190, 159, 7, 9, 61, 126, 187, 32, 190, 55, 22, 231, 189, 207, 94, 196, 190, 249, 158, 172, 62, 174, 209, 137, 189, 209, 83, 172, 190, 205, 100, 247, 187, 118, 20, 129, 191, 129, 39, 62, 60, 58, 25, 159, 190, 12, 103, 64, 188, 143, 81, 39, 62, 110, 193, 224, 189, 59, 12, 89, 190, 41, 135, 64, 60, 92, 199, 150, 62, 6, 236, 125, 190, 195, 202, 90, 189, 232, 86, 216, 61, 175, 126, 25, 62, 231, 41, 185, 189, 182, 93, 120, 60, 92, 121, 244, 190, 0, 9, 89, 190, 71, 88, 141, 62, 124, 247, 132, 189, 67, 48, 35, 190, 83, 160, 224, 190, 155, 35, 237, 189, 17, 113, 213, 60, 71, 200, 211, 190, 127, 207, 186, 190, 171, 110, 24, 62, 175, 122, 4, 62, 157, 235, 42, 189, 3, 242, 30, 191, 254, 6, 147, 186, 87, 200, 220, 62, 120, 175, 144, 190, 116, 195, 52, 189, 89, 78, 8, 61, 2, 103, 170, 188, 47, 223, 120, 61, 157, 76, 1, 62, 59, 146, 48, 62, 133, 218, 206, 58, 206, 104, 253, 59, 30, 204, 6, 190, 145, 176, 198, 61, 109, 235, 4, 189, 92, 174, 2, 62, 51, 152, 3, 190, 87, 126, 110, 188, 170, 53, 4, 60, 21, 10, 17, 190, 255, 89, 141, 189, 108, 101, 144, 58, 155, 205, 5, 62, 48, 163, 26, 190, 163, 11, 168, 61, 217, 198, 14, 190, 228, 155, 98, 189, 54, 170, 240, 59, 198, 206, 72, 61, 140, 67, 40, 190, 212, 241, 252, 189, 95, 128, 182, 189, 112, 170, 92, 189, 254, 24, 185, 186, 10, 102, 62, 189, 47, 79, 196, 61, 67, 38, 25, 63, 205, 78, 61, 62, 72, 114, 22, 190, 18, 229, 135, 62, 216, 6, 167, 62, 22, 156, 246, 62, 62, 161, 80, 191, 165, 127, 192, 61, 49, 177, 149, 61, 127, 59, 117, 190, 198, 7, 237, 190, 238, 46, 3, 189, 103, 72, 79, 189, 48, 230, 245, 60, 172, 91, 198, 61, 24, 161, 7, 191, 67, 239, 171, 61, 164, 239, 33, 62, 248, 104, 88, 62, 39, 73, 203, 189, 154, 100, 62, 62, 152, 213, 212, 62, 180, 52, 154, 62, 202, 14, 193, 58, 21, 117, 198, 187, 29, 81, 203, 190, 151, 225, 152, 190, 247, 58, 3, 190, 193, 196, 102, 62, 117, 54, 191, 190, 152, 50, 183, 62, 253, 241, 247, 61, 83, 244, 6, 62, 251, 207, 15, 189, 34, 242, 176, 61, 51, 169, 61, 189, 226, 172, 155, 189, 141, 62, 129, 191, 21, 192, 254, 189, 181, 55, 168, 60, 203, 194, 148, 62, 165, 111, 215, 61, 75, 244, 55, 62, 199, 150, 65, 191, 214, 86, 238, 189, 121, 225, 35, 190, 202, 79, 36, 62, 133, 250, 48, 190, 242, 149, 229, 187, 241, 11, 62, 62, 214, 24, 144, 190, 173, 200, 52, 188, 101, 159, 113, 61, 253, 115, 181, 190, 142, 180, 100, 190, 187, 137, 28, 62, 90, 48, 225, 189, 221, 184, 176, 61, 156, 8, 202, 190, 212, 196, 204, 188, 148, 196, 113, 189, 68, 198, 177, 61, 188, 124, 25, 62, 205, 18, 63, 61, 178, 255, 8, 191, 129, 140, 12, 189, 69, 161, 254, 189, 244, 160, 37, 190, 83, 61, 10, 62, 52, 15, 12, 62, 166, 12, 194, 61, 21, 190, 118, 62, 231, 250, 24, 61, 231, 23, 132, 189, 63, 124, 81, 62, 247, 14, 227, 190, 18, 132, 112, 62, 52, 217, 134, 61, 23, 207, 134, 187, 43, 157, 141, 188, 119, 138, 83, 62, 167, 53, 110, 61, 69, 169, 36, 62, 198, 121, 240, 189, 67, 58, 11, 190, 83, 45, 1, 62, 239, 194, 193, 62, 133, 147, 119, 61, 89, 104, 110, 62, 96, 62, 40, 189, 59, 198, 126, 190, 242, 137, 47, 61, 128, 239, 129, 187, 198, 100, 255, 61, 207, 133, 164, 61, 30, 135, 187, 61, 61, 141, 49, 191, 44, 121, 6, 62, 27, 61, 187, 61, 192, 110, 141, 188, 145, 65, 75, 62, 57, 36, 208, 190, 248, 173, 234, 188, 196, 22, 127, 190, 38, 222, 143, 62, 85, 129, 125, 61, 179, 250, 81, 189, 58, 122, 213, 62, 113, 153, 1, 190, 127, 103, 101, 189, 227, 113, 54, 62, 98, 244, 17, 62, 56, 173, 64, 190, 100, 12, 70, 62, 143, 8, 254, 189, 74, 179, 176, 62, 123, 182, 214, 187, 222, 41, 227, 190, 93, 213, 18, 190, 67, 24, 109, 191, 188, 194, 235, 190, 94, 70, 155, 62, 178, 56, 129, 62, 111, 239, 139, 189, 181, 24, 46, 191, 117, 193, 255, 62, 183, 89, 37, 62, 45, 8, 204, 190, 247, 205, 28, 190, 254, 180, 129, 61, 110, 173, 243, 61, 86, 169, 156, 190, 83, 231, 17, 190, 22, 255, 85, 191, 211, 91, 187, 61, 148, 29, 86, 191, 137, 8, 78, 61, 168, 42, 159, 62, 239, 170, 110, 62, 216, 173, 88, 191, 37, 140, 38, 190, 230, 244, 3, 62, 7, 193, 164, 62, 161, 136, 212, 190, 114, 221, 181, 62, 72, 223, 86, 189, 143, 162, 204, 62, 87, 228, 129, 190, 67, 56, 128, 61, 86, 164, 211, 190, 30, 168, 209, 61, 232, 127, 173, 61, 137, 39, 168, 62, 210, 138, 148, 190, 120, 30, 70, 191, 223, 55, 78, 189, 99, 76, 140, 62, 96, 236, 240, 189, 175, 159, 132, 190, 30, 32, 202, 189, 85, 154, 171, 61, 48, 138, 203, 189, 133, 134, 54, 190, 107, 179, 57, 191, 92, 136, 202, 61, 133, 43, 43, 190, 220, 183, 16, 189, 53, 38, 148, 62, 35, 52, 2, 61, 41, 189, 169, 189, 66, 42, 207, 62, 90, 157, 146, 191, 22, 140, 28, 62, 190, 16, 114, 61, 173, 95, 230, 61, 76, 67, 154, 61, 170, 49, 192, 60, 144, 235, 167, 188, 59, 83, 112, 189, 238, 227, 3, 62, 7, 25, 168, 62, 169, 204, 77, 62, 34, 69, 253, 188, 83, 127, 241, 189, 163, 42, 146, 61, 31, 14, 242, 187, 97, 87, 62, 191, 35, 148, 36, 188, 224, 103, 108, 189, 10, 191, 149, 190, 14, 8, 2, 191, 125, 7, 232, 61, 155, 69, 140, 61, 14, 180, 161, 189, 11, 19, 175, 189, 69, 252, 48, 190, 78, 39, 181, 189, 90, 246, 57, 61, 154, 165, 16, 62, 9, 123, 71, 189, 190, 44, 250, 189, 252, 181, 33, 62, 134, 248, 31, 190, 7, 131, 191, 189, 46, 147, 227, 189, 142, 128, 34, 190, 172, 205, 170, 61, 162, 232, 29, 190, 87, 126, 185, 61, 236, 114, 14, 190, 89, 10, 171, 188, 92, 214, 16, 60, 23, 227, 234, 189, 28, 228, 108, 61, 168, 7, 6, 62, 174, 34, 5, 190, 123, 37, 25, 62, 149, 100, 43, 190, 54, 32, 34, 62, 218, 252, 11, 62, 224, 238, 200, 189, 193, 246, 96, 187, 244, 135, 15, 189, 190, 29, 227, 189, 118, 178, 132, 60, 45, 135, 1, 189, 139, 29, 155, 190, 134, 185, 31, 62, 147, 113, 48, 62, 31, 248, 147, 191, 53, 88, 71, 190, 223, 244, 167, 61, 88, 38, 142, 62, 67, 127, 175, 190, 93, 200, 4, 190, 207, 73, 65, 63, 104, 62, 11, 191, 177, 37, 164, 61, 243, 203, 149, 61, 48, 176, 133, 190, 3, 6, 51, 191, 24, 20, 171, 62, 92, 73, 148, 189, 110, 80, 72, 62, 81, 201, 75, 190, 110, 22, 24, 191, 38, 39, 129, 62, 141, 163, 165, 191, 23, 5, 105, 191, 238, 42, 232, 61, 76, 241, 172, 62, 236, 11, 171, 61, 191, 248, 166, 191, 219, 108, 163, 61, 130, 140, 136, 62, 237, 68, 9, 191, 152, 39, 49, 61, 178, 165, 146, 62, 157, 113, 135, 61, 230, 77, 77, 190, 102, 251, 80, 62, 131, 132, 13, 192, 68, 162, 219, 190, 41, 2, 174, 62, 49, 76, 42, 191, 165, 190, 129, 190, 134, 66, 11, 191, 5, 5, 180, 190, 42, 101, 132, 191, 18, 2, 137, 190, 33, 236, 81, 191, 194, 236, 1, 61, 41, 181, 177, 190, 177, 252, 156, 189, 167, 128, 139, 189, 239, 175, 232, 62, 67, 183, 141, 190, 130, 177, 191, 190, 205, 168, 203, 190, 227, 114, 239, 190, 73, 139, 228, 190, 253, 94, 139, 60, 82, 230, 81, 189, 245, 108, 102, 189, 227, 239, 90, 190, 66, 102, 129, 188, 157, 202, 65, 62, 133, 17, 45, 191, 230, 49, 130, 190, 59, 1, 161, 190, 130, 130, 135, 61, 177, 179, 12, 191, 38, 168, 139, 184, 47, 108, 181, 190, 134, 218, 96, 62, 29, 234, 65, 62, 230, 66, 135, 190, 55, 218, 107, 62, 197, 35, 207, 62, 182, 39, 20, 191, 225, 56, 75, 62, 14, 98, 137, 61, 190, 48, 39, 62, 139, 77, 167, 62, 208, 231, 36, 61, 106, 228, 247, 61, 47, 185, 254, 190, 194, 222, 218, 61, 111, 72, 101, 62, 5, 62, 50, 190, 165, 37, 21, 190, 128, 106, 62, 190, 77, 71, 106, 61, 200, 38, 13, 190, 218, 206, 12, 191, 251, 56, 41, 190, 39, 253, 120, 62, 16, 254, 161, 190, 161, 208, 165, 190, 12, 160, 238, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 156, 155, 61, 244, 0, 116, 190, 237, 17, 45, 190, 236, 102, 64, 62, 53, 29, 55, 62, 168, 130, 39, 190, 77, 166, 9, 62, 84, 185, 95, 62, 241, 160, 67, 190, 48, 72, 68, 190, 25, 254, 69, 61, 250, 216, 52, 62, 51, 236, 45, 61, 219, 169, 36, 62, 97, 144, 28, 62, 181, 18, 180, 189, 4, 150, 34, 62, 111, 182, 190, 61, 215, 198, 230, 60, 17, 212, 68, 189, 35, 168, 202, 61, 184, 115, 244, 189, 135, 28, 240, 60, 5, 93, 15, 190, 134, 14, 228, 62, 21, 42, 54, 61, 117, 221, 103, 60, 186, 80, 201, 61, 152, 77, 250, 189, 163, 97, 152, 61, 89, 126, 27, 190, 208, 49, 131, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 155, 154, 191, 124, 157, 33, 63, 23, 135, 34, 189, 244, 159, 89, 190, 176, 18, 162, 62, 217, 208, 164, 62, 218, 82, 162, 189, 235, 171, 31, 191, 162, 59, 79, 191, 252, 217, 238, 189, 241, 223, 159, 62, 20, 186, 236, 59, 201, 57, 75, 62, 11, 176, 81, 63, 247, 101, 167, 190, 159, 87, 56, 191, 64, 25, 158, 60, 207, 207, 157, 190, 233, 191, 21, 191, 171, 167, 171, 63, 222, 251, 148, 62, 225, 62, 211, 189, 201, 224, 232, 190, 235, 31, 212, 189, 20, 103, 56, 189, 90, 10, 38, 63, 241, 146, 27, 62, 221, 87, 204, 190, 27, 183, 27, 62, 214, 119, 175, 63, 201, 208, 130, 63, 149, 188, 46, 190, 68, 33, 157, 190, 102, 11, 75, 61, 88, 97, 240, 61, 213, 7, 229, 190, 159, 59, 169, 190, 198, 33, 29, 190, 254, 10, 130, 190, 58, 213, 141, 62, 50, 82, 209, 62, 224, 84, 10, 61, 129, 223, 76, 190, 221, 150, 187, 190, 13, 235, 91, 62, 149, 93, 132, 190, 163, 163, 45, 190, 125, 61, 69, 62, 250, 141, 76, 190, 45, 200, 20, 63, 68, 189, 213, 61, 4, 254, 174, 190, 224, 119, 151, 189, 97, 152, 137, 189, 254, 208, 30, 190, 105, 33, 45, 190, 231, 12, 242, 190, 224, 12, 122, 62, 80, 74, 13, 63, 179, 113, 75, 190, 13, 200, 14, 189, 113, 239, 232, 62, 127, 122, 103, 61, 252, 253, 2, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 237, 42, 190, 121, 85, 243, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {118, 164, 127, 63, 41, 78, 168, 62, 226, 166, 27, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {40, 142, 11, 191, 249, 148, 245, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0039/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}