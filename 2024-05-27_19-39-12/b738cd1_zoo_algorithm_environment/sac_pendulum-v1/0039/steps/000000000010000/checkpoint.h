// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 26, 205, 62, 30, 80, 58, 191, 152, 82, 109, 190, 147, 108, 29, 190, 253, 207, 50, 63, 174, 230, 187, 190, 55, 7, 91, 62, 13, 76, 106, 62, 190, 131, 196, 62, 132, 138, 98, 62, 58, 1, 125, 191, 41, 13, 172, 190, 98, 208, 39, 190, 243, 142, 246, 189, 199, 23, 135, 62, 24, 38, 207, 61, 210, 159, 220, 191, 228, 91, 237, 190, 43, 227, 231, 189, 156, 183, 16, 191, 124, 28, 43, 191, 118, 124, 31, 191, 150, 184, 199, 190, 91, 114, 56, 58, 148, 21, 4, 63, 176, 17, 99, 189, 169, 215, 219, 190, 75, 241, 244, 189, 83, 149, 67, 62, 248, 165, 150, 190, 229, 150, 155, 61, 159, 28, 22, 63, 127, 98, 33, 191, 254, 65, 79, 63, 117, 162, 54, 191, 22, 128, 141, 190, 140, 188, 209, 62, 89, 175, 118, 191, 22, 190, 246, 190, 89, 223, 152, 62, 162, 41, 137, 190, 5, 26, 170, 62, 5, 59, 60, 63, 41, 15, 106, 61, 26, 250, 185, 61, 4, 210, 136, 190, 144, 40, 140, 63, 187, 9, 139, 62, 65, 181, 7, 63, 65, 20, 44, 63, 34, 153, 20, 62, 188, 207, 84, 63, 227, 226, 126, 191, 100, 248, 30, 190, 159, 128, 9, 191, 167, 101, 18, 191, 121, 16, 53, 62, 253, 151, 36, 191, 99, 127, 51, 63, 17, 42, 232, 62, 201, 34, 235, 190, 191, 185, 232, 188, 206, 71, 183, 190, 140, 19, 12, 191, 23, 154, 128, 191, 83, 57, 199, 190, 139, 185, 164, 61, 181, 1, 77, 191, 29, 112, 42, 189, 208, 121, 99, 63, 219, 3, 17, 63, 16, 145, 168, 62, 252, 223, 254, 62, 45, 128, 57, 63, 171, 81, 19, 62, 138, 217, 124, 62, 117, 12, 180, 190, 247, 78, 2, 191, 208, 140, 49, 63, 231, 3, 147, 191, 147, 243, 144, 190, 213, 35, 180, 61, 209, 186, 236, 190, 86, 195, 16, 63, 223, 240, 7, 63, 5, 149, 124, 63, 186, 132, 127, 62, 206, 135, 188, 61, 1, 120, 112, 60, 239, 171, 242, 190, 124, 168, 148, 62, 163, 149, 79, 191, 242, 33, 232, 62, 161, 194, 223, 62, 71, 64, 153, 60, 171, 172, 51, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 113, 117, 191, 9, 78, 204, 60, 32, 24, 9, 191, 43, 210, 32, 190, 217, 245, 35, 63, 201, 153, 210, 61, 144, 201, 166, 190, 148, 179, 156, 62, 51, 103, 129, 62, 194, 104, 175, 190, 44, 171, 175, 62, 70, 83, 251, 190, 27, 159, 212, 62, 132, 68, 196, 62, 206, 243, 6, 62, 148, 21, 129, 190, 117, 34, 31, 61, 134, 60, 240, 62, 176, 205, 166, 190, 11, 159, 44, 61, 62, 247, 38, 191, 196, 58, 131, 62, 72, 156, 222, 62, 125, 186, 91, 191, 144, 255, 178, 61, 58, 106, 129, 189, 203, 150, 119, 190, 0, 174, 216, 61, 32, 185, 58, 190, 240, 240, 52, 190, 229, 37, 158, 62, 214, 232, 29, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 25, 187, 189, 33, 102, 40, 62, 53, 15, 30, 190, 180, 15, 8, 191, 114, 145, 245, 190, 233, 219, 106, 190, 237, 161, 26, 189, 245, 238, 213, 61, 3, 195, 77, 62, 54, 254, 82, 189, 240, 144, 118, 62, 214, 179, 44, 191, 46, 70, 2, 190, 81, 72, 154, 190, 124, 203, 179, 188, 191, 60, 221, 62, 39, 64, 171, 189, 151, 239, 120, 189, 71, 242, 10, 61, 95, 107, 157, 190, 222, 170, 89, 190, 241, 246, 101, 190, 119, 213, 189, 189, 30, 176, 4, 191, 111, 69, 105, 62, 83, 49, 192, 61, 245, 31, 125, 191, 247, 192, 100, 190, 5, 107, 66, 190, 204, 5, 75, 62, 132, 44, 208, 189, 192, 195, 21, 62, 196, 243, 255, 190, 191, 78, 94, 186, 220, 55, 241, 61, 43, 211, 122, 60, 116, 99, 139, 190, 230, 144, 126, 62, 1, 108, 185, 62, 211, 205, 63, 61, 156, 191, 20, 189, 187, 212, 105, 62, 37, 47, 139, 62, 117, 135, 77, 61, 128, 107, 139, 62, 252, 108, 109, 62, 176, 203, 191, 190, 75, 6, 172, 62, 33, 223, 169, 62, 56, 98, 194, 190, 6, 105, 129, 62, 250, 217, 207, 189, 207, 0, 57, 62, 212, 200, 9, 62, 4, 121, 171, 190, 226, 246, 221, 62, 126, 38, 167, 62, 37, 115, 126, 61, 69, 237, 156, 190, 172, 245, 77, 62, 47, 201, 39, 63, 148, 50, 92, 60, 98, 187, 157, 190, 198, 183, 49, 62, 168, 91, 108, 187, 111, 55, 33, 190, 240, 171, 175, 189, 72, 225, 209, 60, 65, 112, 232, 61, 107, 73, 164, 60, 38, 205, 37, 190, 240, 17, 158, 189, 96, 43, 234, 189, 81, 174, 53, 190, 121, 179, 87, 60, 245, 165, 137, 186, 142, 45, 213, 60, 18, 160, 26, 190, 53, 117, 43, 60, 73, 52, 41, 190, 192, 189, 41, 190, 24, 103, 111, 60, 24, 56, 242, 189, 200, 191, 41, 61, 11, 198, 187, 60, 233, 183, 44, 190, 60, 2, 233, 189, 37, 146, 88, 61, 157, 228, 161, 61, 110, 44, 170, 188, 14, 207, 51, 62, 38, 5, 46, 188, 12, 167, 24, 61, 195, 180, 85, 60, 15, 175, 51, 187, 39, 210, 146, 61, 112, 29, 0, 63, 210, 220, 61, 61, 203, 6, 223, 61, 121, 37, 94, 189, 8, 17, 49, 61, 207, 194, 97, 62, 45, 48, 136, 188, 39, 187, 152, 61, 181, 111, 112, 61, 67, 213, 127, 62, 186, 172, 147, 62, 99, 50, 136, 190, 32, 117, 16, 62, 79, 115, 72, 62, 155, 94, 137, 62, 219, 113, 247, 189, 248, 180, 202, 62, 65, 105, 28, 62, 205, 29, 155, 189, 99, 190, 206, 190, 157, 235, 74, 61, 104, 233, 118, 62, 219, 82, 155, 61, 79, 106, 1, 190, 202, 199, 2, 63, 228, 193, 52, 190, 94, 117, 0, 189, 249, 200, 127, 62, 181, 67, 62, 62, 141, 7, 53, 190, 188, 248, 230, 190, 184, 155, 182, 189, 94, 146, 74, 190, 90, 175, 151, 61, 118, 77, 105, 190, 186, 66, 218, 190, 225, 61, 57, 62, 5, 30, 25, 191, 196, 0, 114, 190, 251, 207, 223, 189, 189, 158, 80, 188, 116, 237, 10, 191, 202, 99, 157, 61, 11, 153, 14, 62, 175, 199, 236, 189, 232, 172, 106, 62, 50, 181, 62, 62, 16, 254, 172, 190, 157, 185, 82, 62, 130, 212, 96, 62, 14, 126, 144, 190, 225, 1, 156, 62, 77, 56, 3, 191, 142, 90, 38, 190, 83, 233, 93, 60, 118, 39, 143, 190, 244, 182, 172, 62, 218, 100, 33, 190, 150, 235, 143, 62, 19, 109, 92, 190, 111, 239, 128, 190, 6, 150, 185, 189, 23, 244, 54, 62, 131, 126, 174, 190, 160, 206, 10, 191, 134, 97, 97, 61, 48, 5, 255, 61, 34, 73, 209, 190, 221, 64, 144, 61, 60, 27, 152, 62, 114, 87, 8, 189, 145, 66, 99, 190, 204, 16, 13, 62, 152, 70, 176, 189, 114, 178, 235, 60, 42, 144, 223, 62, 87, 129, 47, 189, 253, 46, 28, 62, 130, 77, 89, 62, 45, 216, 206, 62, 170, 137, 50, 62, 199, 37, 116, 190, 167, 15, 65, 190, 94, 158, 225, 61, 185, 170, 34, 190, 105, 219, 250, 190, 199, 83, 89, 189, 0, 20, 22, 62, 131, 30, 36, 62, 163, 101, 100, 189, 102, 199, 167, 62, 100, 68, 223, 189, 57, 243, 143, 62, 79, 21, 161, 62, 131, 61, 56, 190, 163, 167, 0, 189, 224, 155, 228, 188, 72, 166, 252, 190, 27, 187, 192, 189, 64, 202, 41, 191, 216, 237, 86, 62, 32, 241, 26, 190, 225, 199, 140, 189, 101, 95, 129, 189, 38, 152, 58, 189, 236, 43, 12, 190, 155, 113, 174, 190, 180, 165, 33, 191, 87, 191, 195, 190, 244, 11, 47, 62, 102, 162, 43, 60, 152, 188, 145, 189, 145, 176, 111, 189, 13, 111, 8, 62, 88, 114, 223, 61, 254, 114, 23, 61, 160, 35, 113, 61, 143, 141, 50, 62, 164, 119, 235, 189, 126, 251, 26, 62, 182, 102, 202, 61, 214, 9, 192, 190, 108, 117, 50, 191, 55, 22, 14, 60, 123, 55, 51, 190, 68, 58, 253, 60, 90, 113, 42, 62, 40, 14, 11, 62, 165, 74, 53, 61, 131, 19, 163, 189, 42, 205, 79, 62, 82, 184, 133, 190, 76, 144, 118, 60, 248, 244, 25, 62, 217, 104, 0, 62, 120, 91, 69, 62, 241, 3, 61, 59, 251, 17, 29, 62, 86, 203, 83, 62, 46, 133, 69, 191, 215, 138, 221, 61, 232, 149, 115, 62, 113, 96, 236, 61, 21, 239, 178, 189, 207, 241, 210, 61, 151, 54, 109, 189, 95, 151, 255, 62, 83, 58, 254, 190, 201, 105, 136, 62, 236, 36, 118, 62, 226, 89, 66, 189, 55, 205, 128, 190, 237, 27, 164, 62, 149, 199, 145, 190, 152, 5, 6, 191, 238, 152, 227, 189, 88, 163, 226, 60, 41, 136, 158, 190, 199, 167, 139, 190, 233, 204, 139, 61, 58, 131, 198, 62, 35, 137, 149, 190, 213, 74, 235, 61, 48, 29, 8, 190, 88, 37, 118, 189, 25, 81, 122, 62, 69, 139, 170, 62, 52, 235, 103, 61, 181, 37, 204, 190, 146, 63, 48, 62, 75, 54, 83, 62, 46, 151, 107, 190, 203, 255, 101, 61, 90, 225, 126, 62, 74, 52, 65, 62, 157, 158, 207, 189, 183, 48, 16, 190, 239, 142, 234, 190, 141, 239, 31, 63, 62, 53, 134, 190, 40, 51, 173, 62, 57, 134, 160, 62, 97, 123, 50, 189, 10, 11, 156, 62, 153, 120, 136, 189, 138, 73, 139, 189, 210, 60, 106, 188, 161, 185, 118, 61, 20, 52, 49, 190, 93, 240, 141, 190, 236, 115, 73, 190, 231, 199, 142, 62, 9, 116, 180, 188, 133, 39, 93, 189, 64, 119, 203, 61, 145, 209, 12, 190, 220, 99, 220, 189, 95, 49, 183, 189, 29, 136, 145, 189, 218, 73, 200, 188, 131, 184, 141, 61, 204, 9, 44, 190, 103, 174, 182, 189, 248, 227, 235, 189, 229, 21, 16, 190, 199, 124, 186, 60, 164, 15, 36, 190, 175, 221, 0, 60, 149, 225, 238, 189, 155, 92, 73, 188, 177, 149, 13, 189, 237, 112, 1, 62, 224, 113, 18, 62, 115, 193, 51, 60, 23, 120, 42, 190, 127, 133, 59, 60, 177, 243, 161, 189, 189, 130, 39, 190, 51, 146, 11, 190, 170, 19, 6, 190, 81, 46, 158, 189, 15, 103, 11, 60, 212, 176, 32, 62, 192, 73, 117, 189, 33, 54, 25, 191, 196, 193, 196, 61, 118, 247, 181, 189, 67, 139, 72, 61, 139, 179, 107, 62, 10, 69, 25, 189, 94, 149, 139, 190, 14, 155, 14, 189, 121, 231, 102, 62, 108, 232, 217, 190, 13, 178, 109, 189, 37, 127, 12, 62, 49, 68, 9, 62, 116, 94, 174, 189, 147, 209, 167, 61, 145, 46, 119, 190, 55, 186, 88, 190, 226, 138, 107, 62, 206, 118, 17, 190, 156, 130, 2, 190, 127, 249, 1, 191, 222, 38, 105, 188, 105, 30, 136, 62, 203, 41, 51, 191, 30, 8, 37, 190, 14, 30, 61, 62, 112, 69, 53, 62, 108, 72, 120, 190, 14, 25, 70, 191, 214, 253, 77, 61, 24, 6, 0, 63, 78, 173, 107, 190, 37, 144, 198, 190, 16, 7, 132, 61, 186, 39, 216, 189, 61, 153, 152, 190, 193, 54, 251, 189, 240, 234, 179, 189, 37, 183, 237, 188, 186, 12, 149, 190, 196, 146, 60, 62, 28, 177, 13, 62, 40, 30, 54, 62, 156, 110, 86, 190, 246, 189, 36, 190, 204, 145, 201, 61, 135, 64, 39, 62, 120, 4, 163, 189, 134, 218, 97, 62, 88, 42, 149, 60, 11, 106, 128, 62, 148, 40, 46, 62, 129, 94, 55, 190, 99, 111, 77, 60, 198, 20, 111, 189, 49, 2, 153, 189, 199, 209, 122, 62, 156, 88, 74, 62, 216, 127, 90, 190, 171, 122, 198, 189, 100, 205, 94, 61, 234, 162, 109, 62, 221, 175, 211, 61, 182, 92, 169, 61, 101, 202, 101, 191, 15, 161, 62, 62, 103, 38, 156, 190, 64, 78, 217, 61, 230, 221, 220, 61, 28, 18, 141, 190, 199, 252, 0, 61, 120, 232, 221, 60, 205, 70, 61, 62, 240, 128, 22, 190, 198, 68, 10, 190, 130, 209, 192, 62, 78, 136, 3, 62, 35, 137, 48, 190, 136, 154, 107, 62, 201, 122, 233, 190, 125, 220, 131, 190, 174, 172, 158, 62, 84, 241, 111, 189, 204, 46, 184, 61, 124, 154, 219, 190, 91, 238, 41, 190, 98, 218, 135, 189, 82, 203, 170, 190, 24, 60, 172, 190, 104, 8, 146, 61, 233, 157, 188, 62, 97, 219, 170, 189, 74, 222, 40, 191, 41, 244, 134, 60, 61, 83, 173, 62, 110, 235, 65, 190, 93, 198, 187, 190, 10, 227, 155, 61, 127, 57, 160, 190, 251, 86, 180, 190, 44, 33, 182, 62, 85, 86, 35, 191, 108, 121, 179, 190, 52, 143, 202, 61, 34, 83, 13, 61, 74, 235, 45, 191, 3, 164, 122, 61, 221, 10, 139, 62, 128, 84, 158, 188, 75, 131, 228, 189, 53, 7, 156, 62, 198, 4, 68, 190, 233, 65, 144, 190, 213, 128, 76, 62, 3, 56, 194, 190, 23, 184, 146, 62, 7, 254, 173, 190, 140, 58, 251, 190, 10, 65, 188, 61, 237, 118, 66, 191, 157, 208, 221, 190, 162, 229, 130, 60, 253, 13, 124, 62, 66, 61, 136, 190, 145, 192, 7, 191, 237, 117, 152, 62, 5, 46, 227, 62, 81, 86, 23, 191, 7, 226, 215, 188, 127, 203, 42, 61, 45, 111, 93, 61, 210, 122, 9, 191, 69, 23, 12, 190, 240, 251, 187, 189, 41, 99, 22, 61, 156, 241, 193, 190, 51, 148, 228, 189, 84, 248, 28, 62, 79, 60, 161, 62, 146, 198, 83, 191, 58, 24, 74, 62, 177, 112, 32, 62, 59, 185, 166, 62, 139, 39, 63, 190, 170, 10, 173, 62, 85, 127, 152, 61, 128, 140, 180, 60, 155, 157, 190, 189, 71, 234, 47, 61, 194, 33, 236, 61, 40, 201, 191, 61, 80, 154, 69, 58, 2, 133, 14, 62, 15, 189, 122, 190, 24, 220, 41, 191, 229, 208, 183, 61, 115, 40, 90, 62, 174, 172, 30, 190, 106, 222, 134, 190, 198, 179, 119, 61, 121, 124, 20, 62, 84, 154, 33, 62, 1, 160, 197, 189, 75, 5, 182, 190, 218, 224, 167, 61, 250, 176, 12, 191, 231, 60, 252, 188, 217, 114, 5, 191, 121, 31, 33, 60, 17, 146, 29, 189, 83, 0, 186, 62, 49, 112, 42, 191, 102, 45, 142, 190, 103, 112, 17, 62, 68, 109, 106, 62, 160, 236, 51, 189, 95, 184, 147, 62, 212, 93, 95, 61, 167, 178, 1, 61, 5, 227, 112, 190, 98, 4, 222, 60, 94, 179, 65, 190, 147, 155, 160, 59, 19, 205, 65, 62, 210, 0, 202, 61, 127, 202, 154, 60, 50, 115, 59, 191, 212, 82, 206, 189, 129, 165, 113, 62, 134, 23, 27, 62, 30, 199, 248, 188, 109, 190, 162, 61, 111, 147, 19, 191, 81, 91, 83, 188, 248, 182, 12, 190, 8, 117, 194, 60, 137, 102, 70, 62, 209, 12, 8, 190, 185, 40, 239, 61, 189, 106, 3, 189, 184, 172, 32, 62, 229, 196, 78, 189, 243, 253, 126, 61, 164, 158, 186, 61, 251, 133, 208, 60, 196, 228, 231, 61, 76, 104, 61, 62, 214, 99, 32, 191, 75, 241, 28, 190, 147, 146, 148, 62, 218, 235, 50, 190, 33, 69, 212, 187, 236, 2, 183, 190, 19, 224, 204, 189, 164, 121, 221, 188, 132, 133, 16, 191, 137, 113, 177, 190, 42, 223, 231, 188, 94, 53, 241, 189, 194, 26, 9, 190, 174, 94, 65, 191, 129, 192, 54, 62, 168, 32, 109, 62, 44, 203, 88, 61, 81, 91, 96, 62, 37, 233, 33, 190, 211, 8, 10, 189, 171, 81, 223, 189, 102, 177, 22, 188, 76, 159, 30, 189, 53, 146, 71, 62, 93, 192, 42, 62, 6, 93, 57, 61, 98, 118, 207, 62, 242, 30, 187, 188, 164, 186, 150, 190, 182, 38, 5, 62, 189, 50, 185, 62, 179, 241, 35, 62, 157, 188, 209, 189, 161, 155, 161, 61, 232, 117, 110, 190, 75, 56, 65, 63, 69, 19, 2, 191, 218, 249, 27, 62, 178, 214, 73, 62, 75, 218, 82, 62, 46, 7, 183, 190, 84, 161, 170, 62, 100, 144, 96, 190, 126, 31, 203, 190, 74, 56, 143, 189, 58, 148, 165, 62, 35, 20, 44, 190, 67, 53, 13, 191, 184, 222, 79, 62, 153, 156, 177, 61, 99, 119, 139, 190, 99, 166, 173, 62, 182, 169, 112, 190, 11, 177, 228, 189, 187, 6, 22, 62, 165, 241, 186, 62, 42, 83, 162, 187, 215, 19, 93, 190, 238, 220, 61, 61, 131, 173, 174, 62, 215, 190, 53, 191, 243, 98, 70, 62, 254, 86, 8, 62, 17, 82, 137, 62, 220, 249, 89, 188, 245, 207, 154, 62, 3, 134, 109, 188, 127, 34, 234, 62, 45, 199, 212, 190, 48, 90, 239, 62, 155, 154, 8, 62, 88, 32, 59, 62, 147, 9, 246, 62, 37, 31, 167, 62, 73, 229, 127, 190, 210, 133, 54, 191, 190, 155, 60, 61, 165, 71, 149, 61, 80, 48, 148, 190, 79, 201, 34, 190, 215, 254, 1, 62, 51, 216, 226, 189, 51, 140, 194, 62, 92, 65, 73, 190, 230, 53, 70, 190, 1, 255, 152, 188, 201, 211, 244, 191, 113, 36, 202, 190, 184, 81, 195, 62, 210, 107, 121, 186, 234, 38, 91, 61, 75, 192, 16, 62, 3, 98, 146, 189, 202, 155, 76, 191, 42, 215, 226, 190, 100, 80, 126, 61, 105, 160, 105, 191, 177, 207, 103, 190, 93, 190, 140, 190, 62, 177, 127, 190, 155, 101, 175, 61, 147, 35, 165, 190, 56, 200, 150, 62, 44, 107, 228, 60, 12, 214, 145, 190, 205, 29, 140, 190, 19, 34, 181, 187, 155, 191, 185, 189, 211, 117, 52, 190, 178, 54, 228, 189, 154, 18, 40, 189, 163, 245, 46, 190, 205, 100, 247, 187, 199, 242, 137, 191, 196, 6, 158, 61, 88, 230, 141, 190, 225, 36, 128, 59, 115, 152, 84, 62, 15, 217, 104, 189, 185, 253, 131, 190, 31, 98, 181, 61, 231, 101, 153, 62, 225, 251, 52, 190, 215, 211, 151, 189, 76, 48, 180, 61, 227, 168, 8, 62, 29, 251, 251, 189, 58, 252, 251, 187, 53, 56, 181, 190, 4, 195, 91, 190, 188, 134, 142, 62, 17, 214, 244, 189, 73, 76, 80, 190, 5, 22, 182, 190, 238, 230, 32, 189, 148, 251, 127, 187, 207, 189, 197, 190, 129, 147, 184, 190, 55, 139, 226, 61, 71, 239, 29, 62, 3, 48, 182, 189, 197, 152, 20, 191, 219, 221, 90, 187, 79, 74, 237, 62, 228, 109, 163, 190, 116, 195, 52, 189, 89, 78, 8, 61, 2, 103, 170, 188, 47, 223, 120, 61, 157, 76, 1, 62, 59, 146, 48, 62, 133, 218, 206, 58, 206, 104, 253, 59, 30, 204, 6, 190, 145, 176, 198, 61, 109, 235, 4, 189, 92, 174, 2, 62, 51, 152, 3, 190, 87, 126, 110, 188, 170, 53, 4, 60, 21, 10, 17, 190, 255, 89, 141, 189, 108, 101, 144, 58, 155, 205, 5, 62, 48, 163, 26, 190, 163, 11, 168, 61, 217, 198, 14, 190, 228, 155, 98, 189, 54, 170, 240, 59, 198, 206, 72, 61, 140, 67, 40, 190, 212, 241, 252, 189, 95, 128, 182, 189, 112, 170, 92, 189, 254, 24, 185, 186, 10, 102, 62, 189, 47, 79, 196, 61, 30, 34, 17, 62, 124, 226, 163, 189, 125, 112, 19, 190, 73, 37, 11, 62, 22, 40, 134, 62, 211, 222, 185, 62, 6, 95, 17, 191, 211, 67, 243, 61, 131, 86, 20, 190, 17, 69, 195, 190, 32, 221, 41, 191, 30, 119, 139, 190, 120, 235, 0, 190, 178, 23, 239, 59, 165, 125, 40, 188, 145, 255, 190, 190, 237, 46, 1, 189, 70, 14, 75, 61, 174, 46, 103, 62, 189, 79, 121, 189, 32, 24, 133, 189, 230, 85, 173, 62, 255, 58, 125, 62, 200, 172, 4, 190, 150, 166, 255, 189, 128, 161, 183, 190, 95, 12, 225, 190, 255, 161, 239, 189, 213, 189, 213, 61, 180, 250, 13, 191, 105, 242, 156, 62, 33, 67, 149, 61, 221, 10, 7, 62, 18, 175, 92, 190, 199, 42, 162, 60, 94, 117, 201, 61, 105, 174, 251, 59, 137, 234, 13, 191, 3, 33, 216, 189, 72, 191, 127, 61, 44, 147, 40, 189, 35, 156, 15, 62, 131, 44, 124, 190, 222, 114, 30, 191, 102, 208, 108, 190, 166, 15, 105, 189, 217, 63, 104, 62, 148, 66, 71, 188, 62, 99, 119, 61, 59, 198, 21, 62, 183, 59, 114, 190, 20, 115, 74, 61, 91, 169, 249, 61, 225, 191, 195, 190, 153, 102, 21, 190, 119, 196, 28, 62, 246, 212, 253, 188, 124, 157, 37, 189, 216, 170, 126, 190, 174, 82, 212, 59, 7, 35, 17, 188, 248, 48, 178, 189, 99, 232, 73, 62, 167, 55, 69, 189, 47, 161, 141, 190, 77, 38, 31, 190, 239, 150, 189, 189, 233, 188, 83, 190, 72, 194, 212, 61, 82, 145, 129, 61, 192, 67, 26, 62, 84, 216, 139, 61, 114, 104, 116, 61, 13, 210, 136, 60, 220, 186, 65, 62, 102, 28, 167, 190, 35, 4, 89, 62, 12, 195, 18, 62, 74, 173, 130, 61, 196, 127, 77, 189, 102, 19, 141, 62, 118, 88, 101, 61, 186, 108, 60, 62, 100, 51, 55, 190, 214, 190, 250, 59, 171, 23, 172, 60, 97, 8, 177, 62, 84, 87, 73, 59, 15, 226, 145, 62, 140, 223, 166, 189, 162, 10, 120, 190, 214, 100, 221, 188, 13, 84, 104, 61, 23, 85, 120, 61, 147, 63, 97, 61, 11, 118, 107, 189, 185, 0, 49, 191, 91, 122, 219, 61, 147, 181, 166, 189, 248, 95, 119, 59, 87, 65, 159, 62, 199, 24, 136, 190, 29, 231, 22, 190, 220, 211, 206, 189, 85, 143, 135, 62, 64, 60, 236, 188, 200, 61, 211, 189, 10, 133, 155, 62, 45, 34, 16, 190, 159, 152, 134, 189, 146, 235, 84, 62, 46, 22, 157, 62, 142, 124, 169, 189, 182, 34, 122, 62, 47, 165, 217, 190, 99, 7, 207, 62, 172, 16, 178, 189, 162, 101, 113, 190, 222, 204, 157, 189, 243, 207, 40, 191, 110, 188, 178, 190, 139, 133, 111, 62, 75, 171, 138, 62, 175, 128, 83, 190, 43, 160, 3, 191, 195, 13, 211, 62, 46, 198, 59, 62, 209, 167, 146, 190, 247, 205, 28, 190, 138, 101, 155, 61, 155, 85, 170, 61, 208, 195, 53, 190, 251, 199, 195, 189, 19, 24, 44, 191, 130, 183, 121, 189, 87, 133, 10, 191, 182, 3, 5, 189, 178, 47, 0, 62, 247, 89, 250, 61, 111, 216, 92, 191, 118, 96, 21, 190, 252, 98, 236, 61, 196, 86, 170, 62, 38, 224, 173, 190, 93, 155, 153, 62, 101, 106, 218, 189, 153, 209, 155, 62, 165, 217, 8, 190, 227, 88, 204, 189, 97, 244, 148, 190, 87, 240, 195, 60, 82, 45, 196, 61, 243, 57, 144, 62, 141, 50, 90, 190, 223, 87, 92, 191, 9, 225, 181, 61, 138, 230, 120, 62, 10, 121, 239, 189, 43, 2, 87, 190, 130, 180, 218, 189, 52, 98, 200, 61, 216, 76, 23, 190, 66, 59, 185, 189, 1, 52, 232, 190, 61, 192, 5, 62, 174, 110, 99, 61, 150, 192, 52, 60, 176, 61, 112, 62, 236, 197, 138, 189, 32, 216, 129, 189, 179, 218, 178, 62, 184, 60, 126, 191, 224, 255, 36, 62, 139, 49, 90, 62, 122, 142, 46, 62, 39, 59, 101, 61, 2, 167, 120, 61, 48, 209, 226, 59, 124, 164, 42, 62, 62, 67, 169, 60, 170, 215, 179, 62, 93, 212, 129, 61, 151, 163, 235, 61, 170, 63, 173, 60, 128, 70, 215, 61, 126, 104, 37, 189, 252, 75, 16, 191, 141, 89, 48, 62, 235, 158, 251, 188, 54, 36, 174, 190, 210, 164, 170, 190, 198, 249, 225, 61, 155, 69, 140, 61, 14, 180, 161, 189, 11, 19, 175, 189, 69, 252, 48, 190, 78, 39, 181, 189, 90, 246, 57, 61, 154, 165, 16, 62, 9, 123, 71, 189, 190, 44, 250, 189, 252, 181, 33, 62, 134, 248, 31, 190, 7, 131, 191, 189, 46, 147, 227, 189, 142, 128, 34, 190, 172, 205, 170, 61, 162, 232, 29, 190, 87, 126, 185, 61, 236, 114, 14, 190, 89, 10, 171, 188, 92, 214, 16, 60, 23, 227, 234, 189, 28, 228, 108, 61, 168, 7, 6, 62, 174, 34, 5, 190, 123, 37, 25, 62, 149, 100, 43, 190, 54, 32, 34, 62, 218, 252, 11, 62, 224, 238, 200, 189, 193, 246, 96, 187, 244, 135, 15, 189, 190, 29, 227, 189, 105, 94, 167, 60, 177, 118, 7, 62, 107, 214, 150, 190, 111, 100, 67, 190, 87, 58, 27, 62, 227, 73, 152, 191, 172, 49, 74, 61, 132, 203, 10, 62, 229, 176, 4, 190, 185, 42, 31, 190, 140, 157, 217, 188, 213, 197, 199, 62, 97, 166, 239, 190, 137, 41, 140, 60, 3, 108, 220, 61, 215, 122, 189, 190, 232, 0, 199, 190, 192, 251, 133, 62, 33, 65, 240, 189, 111, 188, 46, 62, 158, 11, 68, 190, 203, 100, 113, 189, 84, 247, 94, 62, 69, 236, 113, 191, 229, 55, 42, 191, 153, 197, 148, 61, 212, 96, 150, 62, 150, 146, 130, 60, 63, 223, 123, 191, 155, 198, 223, 61, 148, 247, 93, 62, 59, 104, 219, 190, 152, 39, 49, 61, 159, 152, 5, 63, 3, 83, 111, 189, 230, 77, 77, 190, 196, 5, 110, 62, 58, 223, 1, 192, 89, 117, 199, 190, 241, 55, 191, 62, 149, 197, 237, 190, 166, 124, 155, 60, 161, 143, 136, 190, 5, 5, 180, 190, 133, 65, 121, 191, 196, 168, 152, 190, 104, 97, 202, 190, 97, 58, 186, 60, 83, 173, 237, 189, 29, 68, 40, 189, 237, 139, 114, 190, 197, 111, 224, 62, 67, 42, 84, 190, 202, 241, 22, 62, 40, 58, 67, 190, 35, 239, 68, 190, 246, 65, 104, 190, 138, 73, 169, 61, 82, 230, 81, 189, 100, 47, 5, 190, 144, 171, 234, 189, 152, 243, 251, 61, 55, 65, 9, 62, 38, 88, 178, 190, 45, 212, 129, 190, 180, 40, 139, 190, 53, 233, 16, 62, 127, 176, 123, 190, 146, 118, 129, 189, 97, 221, 197, 189, 89, 85, 43, 62, 171, 1, 137, 62, 218, 174, 153, 190, 174, 231, 65, 62, 71, 112, 233, 62, 164, 25, 221, 190, 16, 149, 114, 62, 211, 107, 219, 61, 127, 179, 100, 62, 232, 17, 134, 62, 94, 136, 157, 61, 208, 184, 227, 61, 206, 209, 230, 189, 6, 106, 80, 189, 219, 243, 77, 62, 177, 194, 98, 190, 217, 78, 178, 189, 181, 77, 183, 189, 157, 233, 182, 61, 71, 120, 4, 190, 164, 75, 202, 190, 38, 241, 228, 189, 69, 101, 135, 62, 94, 36, 168, 190, 142, 192, 152, 190, 72, 101, 172, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 86, 94, 59, 202, 68, 80, 189, 237, 17, 45, 190, 6, 100, 21, 62, 22, 29, 79, 62, 113, 214, 166, 189, 137, 15, 8, 62, 27, 232, 81, 62, 85, 248, 22, 190, 176, 122, 67, 190, 27, 194, 72, 61, 16, 98, 86, 62, 60, 70, 213, 61, 181, 1, 26, 62, 209, 39, 11, 62, 19, 253, 148, 189, 37, 46, 33, 62, 226, 214, 155, 61, 95, 85, 208, 61, 230, 126, 114, 188, 138, 26, 235, 61, 184, 115, 244, 189, 103, 196, 161, 189, 77, 139, 99, 189, 21, 241, 212, 62, 166, 90, 29, 62, 190, 1, 102, 188, 129, 57, 222, 61, 152, 77, 250, 189, 145, 241, 149, 61, 200, 224, 251, 61, 190, 59, 151, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 240, 77, 191, 105, 78, 6, 63, 23, 135, 34, 189, 80, 91, 154, 190, 99, 222, 204, 62, 14, 193, 175, 62, 60, 219, 18, 190, 109, 168, 9, 191, 16, 142, 71, 191, 211, 226, 238, 189, 206, 44, 236, 62, 176, 221, 186, 60, 75, 245, 164, 62, 196, 11, 108, 63, 89, 143, 241, 190, 151, 157, 202, 190, 196, 222, 62, 62, 74, 153, 181, 190, 199, 178, 86, 191, 139, 51, 158, 63, 3, 43, 10, 63, 225, 62, 211, 189, 196, 7, 3, 191, 10, 42, 144, 189, 210, 150, 161, 189, 201, 61, 39, 63, 212, 9, 183, 189, 165, 30, 188, 190, 27, 183, 27, 62, 31, 28, 107, 63, 204, 186, 66, 63, 132, 102, 150, 190, 165, 251, 170, 189, 6, 13, 232, 61, 88, 97, 240, 61, 237, 54, 184, 190, 76, 203, 147, 190, 215, 217, 12, 190, 58, 252, 40, 190, 238, 219, 196, 61, 83, 94, 103, 62, 223, 63, 10, 61, 123, 40, 24, 188, 177, 198, 33, 190, 19, 44, 129, 62, 13, 113, 188, 189, 108, 13, 226, 189, 150, 253, 171, 62, 38, 194, 39, 190, 63, 69, 154, 62, 145, 243, 154, 61, 20, 180, 160, 189, 130, 179, 201, 61, 97, 152, 137, 189, 43, 153, 0, 61, 200, 139, 245, 188, 134, 158, 196, 190, 132, 183, 107, 62, 231, 92, 21, 63, 150, 153, 209, 188, 13, 200, 14, 189, 10, 128, 195, 61, 144, 250, 232, 60, 155, 247, 67, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 32, 17, 190, 145, 10, 154, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {46, 249, 11, 64, 199, 253, 159, 190, 98, 65, 121, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {140, 214, 33, 64, 208, 105, 142, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0039/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}