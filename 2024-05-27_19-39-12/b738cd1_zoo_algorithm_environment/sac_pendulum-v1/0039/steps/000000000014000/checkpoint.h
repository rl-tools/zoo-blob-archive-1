// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 133, 77, 62, 145, 238, 62, 191, 238, 38, 96, 190, 103, 67, 12, 190, 132, 23, 58, 63, 128, 179, 159, 190, 52, 66, 179, 60, 239, 238, 103, 62, 154, 7, 201, 62, 208, 61, 152, 62, 83, 144, 134, 191, 64, 127, 168, 190, 217, 53, 52, 190, 119, 1, 35, 190, 247, 89, 126, 62, 115, 52, 65, 188, 234, 19, 227, 191, 250, 230, 229, 190, 144, 15, 64, 190, 156, 223, 23, 191, 207, 108, 44, 191, 175, 224, 64, 191, 180, 48, 231, 190, 133, 50, 220, 188, 232, 236, 241, 62, 50, 244, 182, 189, 146, 47, 207, 190, 180, 93, 100, 190, 106, 50, 140, 62, 201, 28, 171, 190, 106, 43, 151, 61, 7, 75, 11, 63, 85, 227, 37, 191, 233, 105, 77, 63, 178, 114, 75, 191, 236, 13, 135, 190, 171, 19, 211, 62, 96, 108, 127, 191, 159, 32, 190, 190, 120, 239, 129, 62, 210, 254, 123, 190, 207, 72, 164, 62, 66, 68, 21, 63, 148, 33, 168, 188, 215, 120, 232, 61, 177, 23, 70, 190, 220, 132, 161, 63, 188, 145, 144, 62, 113, 73, 1, 63, 199, 60, 56, 63, 47, 157, 27, 62, 131, 246, 84, 63, 255, 152, 133, 191, 88, 240, 60, 190, 199, 43, 240, 190, 124, 242, 3, 191, 26, 107, 75, 62, 234, 250, 0, 191, 39, 128, 90, 63, 70, 15, 221, 62, 51, 190, 0, 191, 140, 159, 129, 189, 194, 174, 205, 190, 30, 10, 74, 191, 98, 166, 130, 191, 130, 152, 189, 190, 73, 96, 5, 62, 28, 214, 85, 191, 227, 87, 150, 189, 73, 222, 104, 63, 104, 229, 27, 63, 1, 43, 174, 62, 226, 212, 249, 62, 109, 2, 72, 63, 104, 213, 36, 62, 228, 221, 84, 62, 225, 42, 211, 190, 146, 116, 2, 191, 24, 168, 45, 63, 196, 245, 155, 191, 29, 161, 169, 190, 34, 173, 78, 61, 165, 68, 215, 190, 226, 74, 12, 63, 155, 66, 13, 63, 111, 18, 130, 63, 233, 135, 132, 62, 122, 157, 57, 62, 106, 225, 141, 189, 2, 149, 232, 190, 206, 203, 138, 62, 245, 197, 92, 191, 191, 35, 231, 62, 111, 170, 225, 62, 154, 63, 44, 61, 247, 192, 66, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 224, 119, 191, 2, 219, 25, 189, 112, 173, 32, 191, 166, 126, 162, 189, 33, 197, 31, 63, 137, 236, 169, 61, 112, 21, 208, 190, 100, 234, 123, 62, 31, 98, 94, 62, 171, 175, 162, 190, 2, 230, 174, 62, 252, 96, 5, 191, 140, 0, 209, 62, 111, 156, 177, 62, 140, 214, 187, 57, 76, 129, 63, 190, 180, 217, 175, 59, 245, 84, 232, 62, 241, 240, 173, 190, 17, 89, 216, 61, 239, 173, 30, 191, 19, 252, 167, 62, 44, 101, 217, 62, 170, 96, 92, 191, 141, 116, 130, 61, 131, 4, 223, 189, 152, 207, 125, 190, 224, 73, 158, 61, 234, 130, 62, 190, 23, 216, 76, 190, 132, 22, 139, 62, 220, 180, 44, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 25, 187, 189, 25, 155, 72, 62, 53, 15, 30, 190, 233, 138, 33, 191, 82, 128, 2, 191, 10, 192, 183, 190, 144, 190, 166, 189, 31, 236, 58, 62, 182, 43, 115, 62, 37, 200, 121, 189, 89, 149, 138, 62, 124, 237, 98, 191, 145, 188, 236, 189, 134, 199, 220, 190, 67, 203, 144, 61, 181, 236, 145, 62, 53, 82, 180, 188, 12, 249, 1, 60, 71, 242, 10, 61, 135, 214, 180, 190, 244, 36, 152, 190, 190, 88, 155, 190, 97, 104, 229, 189, 63, 176, 32, 191, 236, 30, 149, 62, 32, 102, 182, 61, 96, 69, 159, 191, 247, 192, 100, 190, 59, 198, 73, 190, 251, 36, 75, 62, 121, 179, 53, 62, 192, 195, 21, 62, 81, 20, 248, 190, 95, 189, 192, 187, 18, 25, 236, 59, 222, 226, 47, 60, 88, 100, 151, 190, 111, 255, 119, 62, 148, 150, 182, 62, 242, 221, 167, 61, 92, 73, 209, 189, 156, 250, 93, 62, 139, 154, 129, 62, 234, 35, 224, 61, 114, 12, 102, 62, 125, 218, 84, 62, 112, 147, 171, 190, 123, 125, 212, 62, 154, 172, 205, 62, 110, 160, 238, 190, 247, 147, 137, 62, 17, 222, 238, 189, 218, 51, 68, 62, 2, 161, 246, 61, 13, 124, 220, 190, 49, 234, 225, 62, 190, 129, 204, 62, 169, 72, 84, 61, 146, 25, 149, 190, 15, 144, 8, 62, 192, 80, 60, 63, 17, 185, 161, 59, 134, 96, 201, 190, 16, 228, 200, 59, 168, 91, 108, 187, 111, 55, 33, 190, 240, 171, 175, 189, 72, 225, 209, 60, 65, 112, 232, 61, 107, 73, 164, 60, 38, 205, 37, 190, 240, 17, 158, 189, 96, 43, 234, 189, 81, 174, 53, 190, 121, 179, 87, 60, 245, 165, 137, 186, 142, 45, 213, 60, 18, 160, 26, 190, 53, 117, 43, 60, 73, 52, 41, 190, 192, 189, 41, 190, 24, 103, 111, 60, 24, 56, 242, 189, 200, 191, 41, 61, 11, 198, 187, 60, 233, 183, 44, 190, 60, 2, 233, 189, 37, 146, 88, 61, 157, 228, 161, 61, 110, 44, 170, 188, 14, 207, 51, 62, 38, 5, 46, 188, 12, 167, 24, 61, 195, 180, 85, 60, 15, 175, 51, 187, 39, 210, 146, 61, 102, 14, 251, 62, 11, 136, 108, 61, 47, 126, 118, 62, 104, 214, 9, 189, 41, 229, 162, 61, 138, 7, 127, 62, 73, 158, 238, 188, 224, 39, 11, 62, 48, 26, 204, 61, 216, 204, 108, 62, 238, 34, 151, 62, 107, 163, 152, 190, 106, 217, 44, 62, 117, 24, 47, 62, 242, 72, 97, 62, 1, 11, 138, 189, 148, 134, 186, 62, 27, 239, 66, 62, 111, 3, 7, 190, 194, 194, 143, 190, 100, 254, 23, 188, 144, 89, 147, 62, 249, 47, 164, 61, 227, 194, 4, 190, 6, 98, 247, 62, 211, 223, 41, 190, 2, 155, 235, 188, 234, 207, 143, 62, 81, 48, 39, 62, 117, 93, 41, 190, 123, 237, 222, 190, 207, 38, 105, 189, 94, 146, 74, 190, 98, 130, 56, 62, 174, 22, 151, 190, 143, 139, 161, 190, 163, 58, 38, 62, 235, 121, 17, 191, 29, 230, 155, 190, 205, 98, 14, 189, 23, 18, 201, 189, 122, 80, 62, 191, 179, 162, 113, 61, 203, 34, 7, 62, 22, 188, 25, 190, 149, 3, 106, 62, 46, 181, 67, 62, 226, 53, 138, 190, 227, 5, 107, 62, 10, 2, 42, 62, 38, 115, 126, 190, 25, 13, 151, 62, 193, 58, 188, 190, 243, 92, 168, 190, 159, 2, 209, 188, 190, 253, 151, 190, 221, 86, 186, 62, 27, 157, 25, 190, 164, 142, 152, 62, 54, 45, 99, 190, 158, 173, 100, 190, 109, 36, 139, 188, 34, 150, 25, 62, 33, 22, 255, 190, 163, 150, 27, 191, 200, 138, 177, 60, 106, 107, 51, 61, 210, 155, 210, 190, 39, 60, 61, 61, 7, 0, 161, 62, 174, 43, 219, 189, 174, 30, 84, 188, 38, 159, 84, 60, 48, 119, 115, 190, 6, 131, 121, 189, 18, 225, 207, 62, 78, 224, 7, 190, 157, 248, 5, 62, 108, 54, 72, 62, 205, 118, 249, 62, 214, 222, 66, 62, 238, 36, 174, 190, 11, 105, 1, 190, 158, 149, 247, 61, 15, 223, 24, 190, 34, 190, 16, 191, 232, 39, 27, 190, 192, 172, 43, 62, 47, 139, 54, 62, 229, 92, 3, 190, 45, 127, 154, 62, 99, 231, 13, 190, 127, 222, 163, 62, 244, 143, 130, 62, 106, 164, 117, 190, 173, 94, 71, 190, 224, 155, 228, 188, 233, 198, 37, 191, 91, 144, 186, 188, 95, 18, 104, 191, 198, 35, 107, 62, 143, 254, 146, 190, 51, 155, 162, 189, 13, 81, 9, 190, 44, 133, 78, 62, 207, 235, 10, 190, 165, 29, 79, 190, 227, 237, 16, 191, 113, 2, 129, 190, 65, 152, 56, 62, 124, 57, 30, 60, 250, 225, 150, 189, 52, 116, 159, 189, 123, 98, 89, 62, 174, 168, 159, 61, 3, 184, 150, 61, 165, 226, 117, 61, 32, 65, 135, 62, 11, 235, 127, 189, 130, 109, 68, 62, 166, 54, 158, 61, 79, 233, 185, 190, 23, 87, 47, 191, 174, 221, 251, 60, 59, 157, 63, 190, 227, 103, 10, 61, 32, 178, 68, 62, 122, 154, 130, 62, 245, 197, 246, 61, 185, 117, 0, 190, 14, 95, 35, 62, 86, 114, 170, 190, 233, 137, 38, 61, 246, 213, 189, 61, 144, 22, 195, 61, 105, 47, 141, 62, 115, 71, 29, 61, 45, 202, 229, 61, 89, 157, 66, 62, 10, 37, 85, 191, 158, 68, 188, 61, 220, 183, 111, 62, 123, 110, 24, 62, 2, 230, 0, 191, 25, 217, 12, 62, 152, 215, 5, 189, 144, 3, 1, 63, 44, 215, 17, 191, 91, 227, 85, 62, 145, 16, 110, 62, 82, 238, 103, 189, 6, 85, 104, 190, 82, 239, 181, 62, 54, 246, 159, 190, 57, 194, 24, 191, 187, 141, 75, 190, 75, 125, 128, 61, 122, 139, 176, 190, 138, 162, 141, 190, 5, 91, 133, 62, 40, 167, 191, 62, 92, 193, 133, 190, 51, 114, 1, 62, 105, 114, 18, 190, 136, 63, 88, 189, 149, 167, 113, 62, 44, 125, 181, 62, 34, 150, 168, 61, 97, 105, 203, 190, 229, 237, 89, 62, 19, 184, 94, 62, 146, 142, 134, 190, 210, 82, 21, 61, 21, 243, 133, 62, 113, 79, 81, 62, 187, 142, 90, 190, 102, 142, 153, 190, 116, 49, 7, 191, 127, 27, 39, 63, 18, 215, 134, 190, 20, 235, 208, 62, 104, 11, 166, 62, 140, 119, 26, 189, 143, 227, 183, 62, 205, 243, 126, 190, 120, 129, 92, 189, 125, 133, 30, 189, 214, 30, 164, 61, 7, 152, 138, 190, 59, 157, 125, 190, 51, 0, 42, 190, 146, 39, 188, 62, 9, 116, 180, 188, 133, 39, 93, 189, 209, 185, 199, 61, 145, 209, 12, 190, 247, 239, 224, 189, 95, 49, 183, 189, 29, 136, 145, 189, 192, 175, 205, 188, 131, 184, 141, 61, 204, 9, 44, 190, 103, 174, 182, 189, 248, 227, 235, 189, 229, 21, 16, 190, 138, 17, 169, 60, 235, 39, 36, 190, 91, 63, 206, 59, 130, 206, 239, 189, 155, 92, 73, 188, 65, 58, 19, 189, 187, 96, 252, 61, 224, 113, 18, 62, 115, 193, 51, 60, 23, 120, 42, 190, 153, 129, 48, 60, 35, 14, 163, 189, 189, 130, 39, 190, 51, 146, 11, 190, 195, 187, 9, 190, 92, 236, 159, 189, 15, 103, 11, 60, 163, 171, 29, 62, 88, 118, 118, 189, 124, 79, 2, 191, 201, 5, 105, 60, 175, 186, 201, 189, 103, 211, 112, 61, 19, 88, 95, 62, 176, 245, 8, 189, 78, 113, 149, 190, 180, 52, 99, 189, 50, 57, 86, 62, 175, 20, 8, 191, 224, 145, 148, 189, 49, 90, 36, 62, 153, 152, 29, 62, 239, 165, 139, 189, 80, 5, 171, 61, 69, 124, 104, 190, 153, 103, 100, 190, 17, 107, 122, 62, 162, 89, 209, 189, 37, 72, 20, 190, 184, 249, 20, 191, 128, 164, 76, 189, 200, 135, 154, 62, 5, 175, 69, 191, 112, 184, 49, 190, 120, 226, 55, 62, 241, 113, 74, 62, 140, 184, 91, 190, 188, 5, 78, 191, 48, 181, 6, 61, 222, 187, 254, 62, 147, 190, 155, 190, 4, 235, 225, 190, 172, 131, 26, 62, 94, 47, 228, 189, 145, 61, 175, 190, 129, 255, 16, 190, 159, 131, 60, 190, 33, 26, 46, 189, 238, 126, 115, 190, 104, 212, 7, 62, 6, 26, 20, 62, 58, 243, 70, 62, 24, 126, 157, 190, 123, 240, 99, 190, 151, 154, 143, 61, 166, 136, 218, 61, 103, 26, 149, 189, 68, 133, 39, 62, 218, 237, 157, 189, 33, 216, 146, 62, 59, 241, 48, 62, 3, 133, 89, 190, 126, 82, 73, 189, 101, 99, 32, 190, 15, 184, 144, 189, 91, 228, 71, 62, 250, 172, 105, 62, 239, 62, 168, 190, 183, 183, 151, 189, 226, 34, 148, 59, 238, 221, 152, 62, 244, 109, 183, 61, 58, 30, 88, 61, 218, 241, 88, 191, 68, 208, 32, 62, 189, 153, 171, 190, 230, 92, 197, 61, 95, 93, 187, 61, 182, 107, 150, 190, 12, 79, 2, 61, 29, 143, 40, 188, 61, 250, 64, 62, 169, 192, 23, 190, 218, 250, 252, 189, 133, 195, 213, 62, 136, 152, 21, 62, 221, 140, 32, 190, 245, 187, 124, 62, 128, 203, 15, 191, 47, 95, 133, 190, 231, 47, 165, 62, 195, 100, 32, 189, 218, 118, 114, 61, 43, 64, 205, 190, 16, 109, 81, 190, 10, 79, 57, 189, 85, 52, 202, 190, 8, 122, 174, 190, 226, 131, 132, 61, 169, 212, 195, 62, 42, 202, 171, 189, 124, 85, 45, 191, 217, 110, 203, 59, 47, 48, 164, 62, 51, 203, 135, 190, 217, 4, 188, 190, 140, 99, 171, 61, 83, 121, 173, 190, 109, 242, 168, 190, 72, 130, 181, 62, 108, 175, 32, 191, 36, 248, 222, 190, 207, 187, 238, 61, 123, 14, 243, 60, 108, 244, 112, 191, 25, 23, 174, 61, 174, 29, 135, 62, 137, 67, 152, 60, 106, 6, 185, 189, 51, 126, 159, 62, 35, 24, 17, 190, 165, 231, 140, 190, 159, 186, 98, 62, 189, 121, 185, 190, 19, 114, 143, 62, 197, 182, 166, 190, 50, 7, 35, 191, 251, 32, 5, 62, 111, 114, 95, 191, 49, 51, 218, 190, 54, 41, 50, 61, 192, 215, 135, 62, 123, 5, 120, 190, 8, 180, 9, 191, 138, 180, 191, 62, 168, 126, 226, 62, 252, 163, 61, 191, 7, 226, 215, 188, 235, 69, 30, 61, 26, 96, 85, 62, 117, 167, 31, 191, 70, 23, 223, 189, 64, 237, 69, 190, 63, 213, 72, 60, 212, 41, 7, 191, 244, 41, 111, 189, 158, 30, 32, 62, 210, 72, 165, 62, 229, 177, 97, 191, 52, 166, 87, 62, 2, 138, 19, 62, 80, 2, 149, 62, 163, 26, 18, 190, 32, 171, 159, 62, 210, 58, 223, 61, 215, 177, 34, 189, 89, 198, 140, 60, 22, 180, 16, 188, 75, 176, 170, 61, 160, 135, 140, 61, 118, 228, 60, 188, 90, 97, 238, 61, 74, 142, 128, 190, 43, 113, 53, 191, 56, 213, 254, 61, 48, 12, 73, 62, 60, 157, 36, 190, 112, 51, 122, 190, 28, 37, 1, 62, 121, 124, 20, 62, 144, 115, 17, 62, 80, 85, 207, 189, 97, 176, 1, 191, 157, 201, 135, 61, 137, 252, 37, 191, 82, 222, 24, 189, 246, 217, 6, 191, 30, 199, 87, 61, 36, 101, 127, 188, 181, 195, 185, 62, 213, 242, 66, 191, 109, 238, 141, 190, 8, 63, 7, 62, 197, 100, 99, 62, 163, 186, 187, 190, 239, 147, 93, 62, 202, 111, 194, 61, 249, 223, 244, 61, 187, 227, 206, 190, 232, 100, 106, 58, 132, 63, 95, 190, 198, 209, 9, 61, 111, 240, 128, 61, 86, 8, 182, 60, 144, 116, 150, 59, 115, 104, 82, 191, 54, 138, 216, 189, 203, 135, 236, 61, 25, 75, 12, 62, 223, 217, 70, 60, 70, 13, 26, 62, 99, 135, 9, 191, 11, 164, 228, 188, 189, 38, 12, 190, 158, 126, 38, 61, 157, 36, 69, 62, 157, 140, 247, 189, 113, 252, 223, 61, 199, 253, 67, 189, 16, 239, 9, 62, 15, 195, 186, 189, 110, 26, 100, 61, 108, 11, 240, 61, 254, 255, 46, 61, 42, 227, 5, 62, 186, 59, 49, 62, 254, 149, 36, 191, 146, 111, 60, 190, 185, 166, 154, 62, 113, 14, 4, 190, 71, 46, 178, 188, 127, 121, 211, 190, 128, 227, 241, 189, 72, 116, 40, 60, 108, 35, 24, 191, 105, 58, 193, 190, 115, 45, 174, 188, 151, 211, 204, 189, 245, 39, 178, 189, 110, 29, 78, 191, 173, 218, 61, 62, 2, 171, 119, 62, 118, 142, 170, 60, 23, 48, 171, 62, 23, 189, 34, 190, 117, 43, 27, 190, 208, 201, 244, 189, 42, 16, 77, 60, 226, 4, 34, 189, 42, 140, 116, 62, 79, 210, 118, 62, 184, 181, 198, 61, 235, 53, 236, 62, 172, 120, 243, 187, 80, 232, 173, 190, 215, 133, 6, 62, 202, 209, 194, 62, 244, 212, 85, 62, 206, 215, 74, 191, 155, 96, 2, 62, 211, 10, 82, 190, 153, 220, 57, 63, 22, 123, 48, 191, 51, 162, 116, 62, 145, 153, 119, 62, 243, 160, 78, 62, 205, 72, 167, 190, 194, 102, 194, 62, 235, 143, 78, 190, 99, 233, 223, 190, 45, 14, 51, 190, 118, 209, 192, 62, 216, 0, 29, 190, 55, 191, 7, 191, 155, 21, 215, 62, 160, 160, 141, 62, 201, 87, 133, 190, 223, 153, 219, 62, 109, 142, 122, 190, 93, 199, 205, 189, 140, 116, 3, 62, 17, 203, 205, 62, 171, 4, 113, 189, 145, 165, 25, 190, 131, 141, 196, 61, 207, 27, 188, 62, 122, 216, 55, 191, 226, 171, 82, 62, 240, 15, 2, 62, 63, 63, 127, 62, 96, 186, 84, 189, 196, 21, 140, 62, 85, 0, 254, 59, 172, 98, 224, 62, 151, 213, 185, 190, 224, 144, 4, 63, 160, 134, 34, 62, 139, 159, 59, 62, 5, 181, 251, 62, 195, 6, 152, 62, 163, 12, 95, 190, 178, 190, 60, 191, 0, 61, 137, 61, 107, 199, 49, 61, 8, 176, 130, 190, 129, 195, 11, 190, 10, 30, 142, 62, 51, 216, 226, 189, 167, 115, 220, 62, 92, 65, 73, 190, 196, 13, 186, 190, 138, 183, 1, 190, 254, 184, 2, 192, 195, 194, 164, 190, 126, 215, 162, 62, 224, 176, 161, 61, 213, 127, 18, 62, 190, 91, 78, 62, 88, 222, 173, 189, 37, 179, 73, 191, 9, 75, 28, 191, 190, 158, 83, 61, 79, 125, 114, 191, 152, 90, 5, 190, 112, 148, 232, 190, 63, 48, 182, 190, 67, 113, 69, 188, 32, 181, 104, 190, 88, 119, 142, 62, 52, 19, 78, 189, 12, 214, 145, 190, 14, 168, 88, 190, 123, 133, 170, 61, 12, 14, 231, 189, 87, 78, 168, 190, 118, 181, 106, 187, 38, 163, 19, 61, 209, 226, 164, 190, 205, 100, 247, 187, 199, 210, 130, 191, 129, 135, 75, 60, 70, 133, 156, 190, 235, 14, 11, 188, 36, 140, 60, 62, 31, 78, 144, 189, 12, 141, 145, 190, 185, 205, 118, 61, 63, 0, 145, 62, 216, 45, 136, 190, 138, 79, 173, 189, 200, 110, 169, 61, 153, 169, 19, 62, 247, 218, 231, 189, 154, 126, 27, 59, 218, 133, 203, 190, 60, 223, 93, 190, 139, 230, 145, 62, 215, 134, 201, 189, 221, 184, 121, 190, 228, 159, 183, 190, 186, 137, 172, 189, 164, 47, 157, 60, 220, 250, 231, 190, 235, 192, 186, 190, 73, 227, 184, 61, 47, 193, 28, 62, 250, 53, 166, 189, 153, 193, 25, 191, 188, 190, 23, 189, 219, 52, 229, 62, 207, 200, 199, 190, 116, 195, 52, 189, 89, 78, 8, 61, 2, 103, 170, 188, 47, 223, 120, 61, 157, 76, 1, 62, 59, 146, 48, 62, 133, 218, 206, 58, 206, 104, 253, 59, 30, 204, 6, 190, 145, 176, 198, 61, 109, 235, 4, 189, 92, 174, 2, 62, 51, 152, 3, 190, 87, 126, 110, 188, 170, 53, 4, 60, 21, 10, 17, 190, 255, 89, 141, 189, 108, 101, 144, 58, 155, 205, 5, 62, 48, 163, 26, 190, 163, 11, 168, 61, 217, 198, 14, 190, 228, 155, 98, 189, 54, 170, 240, 59, 198, 206, 72, 61, 140, 67, 40, 190, 212, 241, 252, 189, 95, 128, 182, 189, 112, 170, 92, 189, 254, 24, 185, 186, 10, 102, 62, 189, 47, 79, 196, 61, 193, 174, 9, 62, 146, 95, 185, 189, 76, 18, 60, 190, 240, 218, 190, 61, 59, 108, 129, 62, 18, 235, 160, 62, 114, 155, 77, 191, 53, 105, 165, 61, 111, 59, 86, 187, 103, 35, 200, 190, 118, 127, 11, 191, 5, 96, 102, 190, 162, 223, 0, 190, 134, 243, 245, 185, 9, 22, 139, 61, 34, 159, 9, 191, 2, 54, 111, 61, 42, 237, 150, 61, 1, 111, 70, 62, 6, 229, 233, 189, 202, 109, 230, 189, 20, 161, 160, 62, 119, 15, 128, 62, 247, 112, 89, 189, 172, 47, 33, 189, 54, 6, 0, 191, 213, 151, 239, 190, 195, 78, 23, 190, 39, 44, 53, 62, 16, 83, 39, 191, 34, 121, 152, 62, 207, 15, 200, 61, 221, 10, 7, 62, 140, 66, 0, 190, 14, 84, 182, 61, 190, 160, 130, 60, 158, 165, 19, 188, 199, 0, 70, 191, 37, 201, 203, 189, 205, 17, 129, 189, 214, 9, 104, 62, 35, 95, 23, 62, 206, 76, 232, 61, 109, 176, 66, 191, 107, 171, 27, 190, 67, 220, 164, 189, 158, 21, 32, 62, 88, 31, 207, 188, 217, 224, 9, 188, 204, 28, 31, 62, 15, 129, 137, 190, 107, 83, 146, 61, 166, 27, 252, 61, 72, 55, 194, 190, 228, 86, 22, 190, 198, 44, 66, 62, 167, 213, 209, 189, 176, 194, 215, 188, 78, 249, 178, 190, 168, 99, 63, 60, 138, 180, 48, 189, 171, 41, 3, 189, 111, 253, 72, 62, 192, 19, 191, 61, 237, 231, 130, 190, 250, 90, 7, 190, 181, 77, 24, 189, 195, 255, 32, 190, 211, 224, 11, 62, 224, 224, 242, 61, 126, 52, 0, 62, 209, 190, 34, 62, 100, 157, 152, 61, 13, 95, 29, 189, 115, 227, 68, 62, 58, 191, 180, 190, 95, 107, 124, 62, 124, 57, 11, 62, 243, 71, 155, 60, 7, 155, 159, 189, 47, 67, 100, 62, 66, 170, 175, 61, 123, 102, 103, 62, 74, 221, 26, 190, 174, 73, 223, 189, 8, 48, 138, 61, 11, 24, 201, 62, 139, 103, 214, 60, 188, 249, 113, 62, 199, 175, 124, 189, 90, 250, 96, 190, 46, 152, 195, 60, 104, 148, 70, 59, 46, 124, 166, 61, 68, 183, 192, 61, 15, 179, 17, 60, 19, 217, 40, 191, 55, 114, 160, 61, 99, 90, 152, 189, 213, 115, 144, 188, 85, 105, 155, 62, 207, 141, 164, 190, 50, 246, 21, 190, 231, 232, 228, 189, 229, 21, 124, 62, 123, 75, 47, 189, 197, 89, 228, 189, 177, 111, 177, 62, 216, 42, 9, 190, 190, 40, 59, 189, 36, 109, 83, 62, 160, 221, 174, 62, 244, 73, 213, 189, 131, 206, 128, 62, 71, 102, 189, 190, 120, 237, 212, 62, 129, 94, 125, 189, 157, 131, 168, 190, 100, 233, 180, 189, 81, 209, 67, 191, 42, 38, 189, 190, 28, 132, 97, 62, 43, 80, 148, 62, 95, 137, 60, 190, 138, 254, 11, 191, 62, 23, 208, 62, 135, 149, 56, 62, 183, 239, 217, 190, 247, 205, 28, 190, 217, 244, 138, 61, 159, 108, 198, 61, 248, 136, 52, 190, 158, 212, 180, 189, 206, 68, 76, 191, 207, 160, 226, 188, 88, 106, 49, 191, 61, 230, 160, 188, 63, 123, 60, 62, 86, 84, 12, 62, 196, 96, 81, 191, 234, 102, 34, 190, 49, 226, 247, 61, 246, 33, 168, 62, 103, 98, 165, 190, 147, 99, 162, 62, 37, 15, 212, 189, 190, 19, 177, 62, 5, 2, 214, 189, 176, 29, 212, 188, 142, 175, 133, 190, 159, 149, 5, 61, 52, 170, 201, 61, 235, 203, 152, 62, 214, 52, 141, 190, 229, 148, 86, 191, 80, 211, 179, 61, 116, 164, 133, 62, 142, 210, 43, 190, 218, 253, 87, 190, 176, 29, 76, 189, 153, 154, 162, 61, 31, 140, 8, 190, 183, 210, 156, 188, 6, 195, 18, 191, 163, 93, 236, 61, 139, 200, 124, 189, 88, 167, 126, 187, 143, 132, 12, 62, 55, 170, 175, 188, 33, 58, 21, 189, 61, 223, 185, 62, 6, 18, 135, 191, 27, 205, 22, 62, 103, 221, 53, 62, 97, 57, 4, 62, 230, 7, 164, 188, 14, 65, 67, 59, 134, 150, 246, 59, 115, 79, 1, 62, 144, 95, 13, 61, 26, 20, 161, 62, 131, 212, 71, 61, 61, 32, 185, 61, 192, 109, 198, 60, 163, 160, 60, 61, 143, 187, 28, 189, 204, 222, 35, 191, 254, 223, 43, 62, 180, 201, 192, 189, 120, 236, 168, 190, 195, 195, 171, 190, 24, 49, 127, 62, 155, 69, 140, 61, 14, 180, 161, 189, 11, 19, 175, 189, 69, 252, 48, 190, 78, 39, 181, 189, 90, 246, 57, 61, 154, 165, 16, 62, 9, 123, 71, 189, 190, 44, 250, 189, 252, 181, 33, 62, 134, 248, 31, 190, 7, 131, 191, 189, 46, 147, 227, 189, 142, 128, 34, 190, 172, 205, 170, 61, 162, 232, 29, 190, 87, 126, 185, 61, 236, 114, 14, 190, 89, 10, 171, 188, 92, 214, 16, 60, 23, 227, 234, 189, 28, 228, 108, 61, 168, 7, 6, 62, 174, 34, 5, 190, 123, 37, 25, 62, 149, 100, 43, 190, 54, 32, 34, 62, 218, 252, 11, 62, 224, 238, 200, 189, 193, 246, 96, 187, 244, 135, 15, 189, 190, 29, 227, 189, 105, 94, 167, 60, 167, 191, 248, 61, 238, 226, 141, 190, 7, 8, 188, 61, 89, 62, 30, 62, 9, 145, 153, 191, 146, 137, 133, 61, 222, 123, 19, 62, 0, 216, 19, 190, 12, 100, 50, 190, 86, 234, 210, 188, 57, 133, 227, 62, 175, 53, 3, 191, 181, 99, 235, 60, 29, 241, 134, 61, 169, 136, 151, 190, 135, 246, 19, 191, 58, 123, 132, 62, 35, 186, 158, 189, 5, 196, 64, 62, 55, 66, 49, 190, 191, 112, 139, 190, 164, 71, 87, 62, 68, 182, 149, 191, 3, 213, 85, 191, 53, 14, 95, 61, 3, 254, 182, 62, 2, 168, 9, 61, 166, 115, 151, 191, 214, 160, 200, 61, 200, 252, 99, 62, 184, 231, 8, 191, 152, 39, 49, 61, 10, 180, 213, 62, 92, 115, 152, 188, 230, 77, 77, 190, 196, 226, 126, 62, 3, 56, 11, 192, 68, 162, 219, 190, 17, 88, 231, 62, 68, 182, 44, 191, 77, 139, 128, 190, 219, 46, 196, 190, 5, 5, 180, 190, 186, 169, 130, 191, 60, 34, 147, 190, 85, 61, 43, 191, 243, 248, 70, 61, 18, 225, 152, 190, 156, 12, 34, 186, 35, 185, 9, 190, 113, 91, 247, 62, 132, 233, 134, 190, 243, 127, 141, 188, 131, 195, 166, 190, 214, 157, 180, 190, 116, 128, 197, 190, 253, 94, 139, 60, 82, 230, 81, 189, 168, 217, 198, 189, 107, 89, 80, 190, 131, 138, 125, 188, 95, 160, 27, 62, 68, 45, 241, 190, 230, 49, 130, 190, 216, 248, 158, 190, 47, 159, 136, 62, 158, 79, 174, 190, 215, 79, 27, 189, 87, 33, 68, 190, 2, 95, 26, 62, 143, 168, 83, 61, 65, 251, 128, 190, 78, 163, 83, 62, 245, 224, 227, 62, 227, 107, 243, 190, 49, 171, 116, 62, 8, 180, 216, 61, 191, 180, 67, 62, 85, 68, 132, 62, 240, 142, 40, 61, 110, 83, 22, 62, 4, 76, 10, 190, 174, 135, 25, 60, 7, 124, 40, 62, 75, 63, 142, 190, 95, 213, 180, 189, 179, 151, 5, 190, 103, 45, 95, 61, 178, 246, 30, 190, 44, 234, 227, 190, 116, 83, 153, 189, 115, 206, 110, 62, 131, 204, 184, 190, 101, 210, 133, 190, 214, 244, 186, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 73, 140, 61, 71, 231, 210, 188, 237, 17, 45, 190, 38, 173, 19, 62, 61, 37, 88, 62, 69, 224, 204, 189, 250, 13, 245, 61, 209, 1, 114, 62, 61, 137, 62, 190, 48, 72, 68, 190, 24, 118, 58, 61, 233, 214, 39, 62, 69, 125, 216, 61, 77, 227, 40, 62, 96, 173, 245, 61, 24, 53, 185, 189, 47, 236, 24, 62, 169, 243, 222, 61, 123, 117, 163, 61, 135, 19, 219, 188, 35, 70, 222, 61, 184, 115, 244, 189, 68, 99, 67, 189, 238, 206, 26, 190, 99, 101, 214, 62, 234, 90, 13, 62, 50, 8, 224, 187, 150, 138, 126, 61, 152, 77, 250, 189, 33, 123, 121, 61, 230, 169, 83, 61, 180, 240, 84, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 231, 136, 191, 204, 214, 20, 63, 23, 135, 34, 189, 120, 155, 132, 190, 113, 229, 190, 62, 74, 195, 200, 62, 14, 2, 6, 190, 30, 91, 24, 191, 165, 32, 90, 191, 252, 217, 238, 189, 21, 116, 225, 62, 205, 160, 6, 59, 253, 207, 147, 62, 161, 165, 103, 63, 223, 161, 217, 190, 177, 191, 8, 191, 96, 226, 13, 62, 157, 15, 210, 190, 98, 224, 64, 191, 189, 96, 170, 63, 116, 59, 238, 62, 225, 62, 211, 189, 98, 97, 2, 191, 99, 112, 154, 189, 35, 65, 129, 189, 19, 192, 29, 63, 122, 249, 230, 60, 24, 3, 141, 190, 27, 183, 27, 62, 196, 111, 143, 63, 17, 24, 130, 63, 133, 182, 63, 190, 13, 120, 241, 189, 66, 102, 230, 61, 88, 97, 240, 61, 143, 188, 196, 190, 62, 173, 130, 190, 110, 97, 225, 189, 77, 200, 94, 190, 9, 250, 44, 62, 62, 136, 197, 62, 224, 84, 10, 61, 243, 202, 216, 189, 164, 143, 50, 190, 213, 146, 74, 62, 32, 50, 209, 189, 221, 33, 4, 190, 225, 212, 147, 62, 44, 200, 119, 190, 242, 213, 223, 62, 58, 100, 224, 61, 235, 114, 182, 189, 244, 75, 42, 61, 97, 152, 137, 189, 236, 126, 189, 189, 186, 199, 72, 189, 199, 227, 208, 190, 210, 4, 64, 62, 59, 154, 22, 63, 136, 88, 135, 189, 13, 200, 14, 189, 30, 153, 9, 62, 84, 138, 130, 188, 92, 215, 68, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 216, 4, 190, 46, 106, 180, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {183, 112, 3, 64, 165, 189, 68, 190, 238, 186, 50, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {246, 95, 14, 64, 240, 197, 184, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0039/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}