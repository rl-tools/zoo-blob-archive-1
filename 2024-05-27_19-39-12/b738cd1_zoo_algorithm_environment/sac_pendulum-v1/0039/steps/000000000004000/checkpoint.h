// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {19, 102, 51, 190, 36, 151, 206, 190, 171, 45, 45, 190, 59, 133, 197, 61, 77, 199, 56, 63, 226, 6, 229, 190, 49, 5, 130, 61, 204, 48, 15, 190, 249, 140, 196, 62, 62, 246, 5, 62, 88, 237, 29, 191, 237, 181, 186, 190, 190, 238, 35, 190, 141, 104, 63, 190, 128, 85, 193, 62, 63, 157, 209, 61, 49, 145, 215, 190, 239, 51, 218, 190, 157, 183, 172, 190, 143, 128, 45, 61, 237, 18, 52, 191, 119, 64, 235, 190, 87, 126, 22, 190, 119, 253, 117, 60, 24, 144, 255, 62, 41, 101, 101, 62, 143, 33, 2, 191, 75, 231, 139, 190, 193, 17, 108, 62, 143, 182, 142, 190, 144, 173, 53, 187, 88, 143, 66, 63, 10, 151, 20, 191, 169, 155, 76, 63, 128, 25, 5, 191, 165, 20, 145, 190, 118, 96, 178, 62, 209, 136, 126, 190, 105, 201, 12, 191, 63, 244, 238, 62, 79, 192, 12, 190, 51, 152, 163, 62, 51, 178, 59, 63, 123, 44, 68, 61, 226, 166, 227, 189, 65, 33, 29, 190, 16, 143, 147, 62, 112, 235, 106, 62, 61, 125, 8, 63, 38, 119, 236, 62, 196, 185, 62, 62, 189, 207, 50, 63, 192, 175, 55, 191, 108, 133, 18, 190, 32, 181, 190, 190, 117, 138, 12, 191, 238, 105, 79, 62, 135, 207, 30, 191, 143, 154, 80, 62, 232, 44, 245, 62, 175, 72, 13, 191, 195, 94, 129, 62, 217, 211, 180, 190, 114, 218, 193, 190, 42, 245, 12, 191, 192, 226, 188, 190, 164, 85, 160, 61, 153, 45, 246, 190, 46, 250, 87, 61, 132, 87, 12, 63, 149, 145, 190, 62, 43, 115, 164, 62, 58, 90, 242, 62, 248, 41, 46, 63, 11, 95, 209, 61, 227, 4, 160, 62, 179, 225, 171, 189, 194, 162, 2, 191, 5, 53, 51, 63, 59, 155, 43, 191, 17, 148, 145, 190, 71, 99, 78, 62, 89, 201, 230, 190, 64, 148, 27, 63, 3, 48, 236, 62, 160, 220, 134, 63, 7, 163, 36, 62, 172, 171, 56, 61, 120, 152, 139, 62, 196, 212, 231, 190, 106, 226, 115, 62, 91, 85, 100, 191, 209, 186, 250, 62, 176, 106, 16, 190, 236, 201, 13, 62, 161, 49, 86, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {134, 199, 93, 191, 147, 230, 192, 187, 182, 72, 152, 190, 52, 196, 5, 190, 174, 121, 30, 63, 189, 251, 134, 62, 126, 217, 120, 189, 218, 51, 176, 62, 136, 3, 69, 62, 119, 44, 112, 190, 90, 149, 182, 62, 48, 22, 218, 190, 206, 218, 6, 63, 183, 30, 166, 62, 226, 115, 194, 60, 164, 5, 8, 191, 229, 232, 236, 61, 206, 0, 248, 62, 12, 30, 194, 190, 153, 120, 163, 61, 226, 197, 1, 191, 30, 179, 136, 62, 82, 106, 7, 63, 11, 118, 63, 191, 38, 44, 97, 61, 9, 189, 152, 61, 130, 108, 154, 190, 213, 246, 231, 59, 246, 117, 65, 190, 113, 210, 5, 190, 115, 164, 203, 62, 230, 160, 231, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {19, 229, 153, 186, 4, 9, 19, 61, 185, 16, 23, 190, 249, 44, 180, 190, 16, 65, 176, 190, 195, 49, 97, 189, 220, 236, 58, 188, 112, 165, 156, 61, 251, 96, 32, 62, 147, 23, 154, 189, 141, 101, 22, 62, 64, 182, 96, 190, 109, 247, 209, 189, 161, 198, 34, 190, 151, 3, 14, 62, 82, 59, 130, 189, 153, 240, 78, 61, 125, 162, 155, 185, 71, 242, 10, 61, 185, 33, 179, 190, 253, 71, 32, 190, 107, 26, 8, 189, 198, 17, 23, 189, 221, 168, 65, 190, 112, 27, 147, 62, 0, 236, 163, 61, 46, 232, 231, 190, 89, 28, 62, 190, 26, 40, 145, 61, 123, 253, 10, 62, 200, 248, 71, 190, 192, 195, 21, 62, 149, 94, 247, 189, 1, 237, 242, 60, 232, 255, 36, 61, 131, 197, 229, 189, 74, 48, 182, 190, 27, 217, 22, 62, 43, 231, 160, 62, 116, 141, 3, 190, 126, 202, 27, 188, 106, 119, 102, 62, 108, 199, 139, 62, 228, 29, 66, 61, 151, 245, 117, 62, 111, 245, 114, 62, 180, 94, 158, 190, 153, 25, 91, 61, 252, 121, 140, 62, 25, 164, 142, 190, 13, 25, 238, 60, 37, 67, 143, 190, 233, 98, 63, 62, 116, 99, 231, 60, 172, 36, 129, 190, 14, 127, 200, 62, 255, 145, 133, 62, 193, 111, 200, 60, 90, 7, 152, 190, 51, 117, 31, 62, 100, 146, 251, 62, 162, 142, 204, 59, 32, 164, 118, 190, 138, 95, 0, 62, 168, 91, 108, 187, 111, 55, 33, 190, 240, 171, 175, 189, 72, 225, 209, 60, 30, 65, 14, 62, 107, 73, 164, 60, 38, 205, 37, 190, 209, 146, 78, 189, 96, 43, 234, 189, 81, 174, 53, 190, 181, 75, 163, 60, 245, 165, 137, 186, 142, 45, 213, 60, 147, 128, 21, 190, 53, 117, 43, 60, 73, 52, 41, 190, 166, 62, 41, 190, 24, 103, 111, 60, 24, 56, 242, 189, 62, 229, 135, 61, 11, 198, 187, 60, 233, 183, 44, 190, 249, 18, 216, 189, 37, 146, 88, 61, 11, 56, 164, 61, 110, 44, 170, 188, 14, 207, 51, 62, 251, 56, 113, 187, 0, 213, 28, 61, 195, 180, 85, 60, 150, 162, 90, 59, 39, 210, 146, 61, 61, 182, 148, 62, 147, 177, 251, 60, 16, 189, 146, 188, 88, 252, 242, 187, 143, 221, 73, 61, 176, 175, 37, 62, 194, 234, 178, 188, 18, 123, 147, 61, 247, 119, 20, 61, 205, 238, 130, 62, 92, 253, 143, 62, 214, 248, 90, 190, 234, 150, 224, 61, 140, 206, 73, 62, 94, 115, 143, 62, 48, 144, 4, 190, 249, 249, 186, 62, 91, 77, 26, 62, 75, 159, 36, 60, 153, 72, 179, 190, 37, 200, 104, 61, 85, 88, 16, 62, 6, 187, 248, 60, 168, 113, 172, 190, 59, 37, 248, 62, 145, 148, 55, 190, 164, 110, 82, 59, 253, 157, 107, 62, 89, 126, 44, 62, 36, 225, 53, 190, 189, 176, 5, 191, 30, 107, 118, 190, 94, 146, 74, 190, 185, 149, 94, 61, 155, 73, 131, 190, 237, 56, 22, 190, 72, 33, 16, 62, 115, 104, 18, 190, 33, 91, 154, 190, 49, 129, 209, 189, 188, 228, 99, 61, 153, 220, 207, 190, 103, 213, 169, 61, 29, 130, 87, 61, 254, 98, 114, 188, 170, 44, 21, 62, 27, 76, 72, 62, 204, 197, 95, 190, 224, 255, 55, 62, 49, 252, 76, 62, 43, 182, 230, 190, 158, 142, 142, 62, 173, 88, 39, 191, 91, 70, 163, 189, 232, 72, 108, 189, 140, 56, 35, 189, 122, 2, 171, 62, 39, 121, 88, 189, 161, 228, 85, 62, 181, 93, 165, 190, 61, 147, 113, 190, 85, 179, 105, 190, 222, 98, 240, 61, 175, 92, 115, 190, 158, 136, 149, 189, 227, 250, 118, 190, 223, 135, 19, 62, 109, 2, 146, 190, 70, 238, 238, 60, 17, 38, 41, 62, 154, 93, 48, 190, 28, 237, 35, 191, 26, 218, 3, 62, 58, 23, 109, 190, 165, 51, 62, 189, 168, 117, 177, 62, 93, 207, 189, 189, 45, 188, 57, 62, 162, 50, 111, 62, 138, 49, 120, 61, 129, 248, 179, 61, 126, 108, 234, 189, 251, 12, 69, 190, 125, 125, 195, 189, 242, 77, 31, 190, 186, 85, 153, 190, 128, 175, 229, 61, 119, 122, 17, 62, 124, 106, 201, 60, 6, 56, 72, 189, 172, 61, 118, 62, 7, 85, 192, 189, 41, 119, 152, 61, 79, 182, 2, 190, 118, 25, 63, 189, 242, 235, 251, 189, 224, 155, 228, 188, 197, 60, 30, 190, 200, 7, 184, 189, 23, 101, 58, 190, 113, 163, 93, 62, 142, 93, 46, 190, 99, 65, 178, 189, 29, 240, 131, 189, 106, 162, 241, 189, 174, 245, 11, 190, 215, 60, 188, 190, 49, 104, 192, 190, 215, 131, 186, 190, 154, 73, 64, 62, 223, 31, 144, 189, 168, 171, 245, 61, 168, 81, 134, 189, 198, 194, 252, 61, 183, 8, 85, 62, 176, 49, 203, 61, 242, 75, 113, 61, 232, 114, 93, 190, 95, 218, 76, 190, 221, 32, 164, 188, 212, 112, 216, 61, 128, 11, 192, 190, 229, 201, 188, 190, 186, 206, 11, 61, 31, 152, 251, 189, 68, 58, 253, 60, 115, 68, 29, 62, 185, 81, 84, 61, 243, 219, 84, 189, 78, 61, 0, 190, 224, 245, 37, 62, 96, 77, 132, 189, 229, 66, 209, 60, 64, 138, 200, 61, 122, 220, 3, 62, 220, 10, 194, 60, 155, 134, 19, 189, 60, 6, 30, 62, 4, 91, 42, 62, 212, 173, 18, 191, 67, 231, 199, 61, 197, 234, 140, 62, 232, 230, 219, 61, 179, 195, 168, 189, 147, 31, 13, 62, 138, 230, 211, 188, 197, 134, 9, 60, 163, 101, 171, 190, 33, 101, 136, 62, 201, 239, 5, 62, 13, 191, 248, 189, 176, 245, 83, 190, 125, 49, 167, 62, 63, 116, 144, 190, 115, 102, 149, 190, 155, 148, 236, 59, 169, 194, 235, 61, 2, 63, 157, 190, 144, 216, 174, 190, 194, 115, 123, 61, 10, 72, 142, 186, 105, 43, 130, 190, 51, 61, 237, 61, 4, 152, 84, 189, 145, 237, 140, 189, 73, 65, 35, 62, 237, 46, 152, 62, 153, 238, 142, 61, 5, 138, 194, 190, 199, 86, 13, 62, 68, 196, 138, 62, 26, 251, 152, 190, 160, 145, 52, 61, 154, 94, 135, 61, 188, 94, 18, 62, 86, 97, 234, 60, 124, 154, 129, 189, 232, 129, 106, 190, 109, 116, 249, 188, 44, 204, 16, 190, 27, 187, 130, 62, 166, 171, 128, 62, 219, 154, 187, 189, 242, 75, 55, 62, 41, 195, 83, 189, 205, 136, 92, 189, 167, 71, 140, 188, 110, 34, 11, 190, 241, 20, 52, 190, 17, 225, 151, 190, 209, 37, 243, 190, 164, 195, 88, 62, 9, 116, 180, 188, 133, 39, 93, 189, 80, 210, 200, 61, 145, 209, 12, 190, 221, 247, 217, 189, 95, 49, 183, 189, 29, 136, 145, 189, 204, 105, 168, 188, 131, 184, 141, 61, 204, 9, 44, 190, 103, 174, 182, 189, 248, 227, 235, 189, 229, 21, 16, 190, 54, 141, 201, 60, 117, 8, 36, 190, 151, 24, 90, 186, 20, 49, 248, 189, 155, 92, 73, 188, 114, 82, 248, 188, 147, 34, 254, 61, 224, 113, 18, 62, 115, 193, 51, 60, 64, 186, 33, 190, 11, 4, 197, 59, 243, 220, 171, 189, 189, 130, 39, 190, 51, 146, 11, 190, 245, 178, 4, 190, 19, 128, 173, 189, 15, 103, 11, 60, 167, 161, 35, 62, 154, 220, 120, 189, 148, 52, 26, 189, 117, 156, 213, 61, 1, 240, 95, 61, 34, 28, 173, 61, 167, 44, 149, 62, 49, 186, 104, 61, 24, 166, 130, 190, 86, 239, 13, 189, 156, 216, 60, 62, 68, 97, 144, 190, 29, 242, 181, 189, 235, 175, 48, 62, 48, 168, 225, 61, 117, 131, 188, 189, 164, 90, 227, 60, 43, 145, 25, 61, 68, 21, 77, 190, 154, 37, 165, 61, 121, 95, 114, 190, 74, 154, 154, 60, 198, 167, 144, 190, 254, 57, 128, 61, 250, 81, 35, 62, 111, 247, 143, 190, 193, 162, 53, 190, 230, 60, 68, 62, 228, 165, 36, 62, 185, 48, 106, 190, 104, 218, 40, 191, 64, 238, 66, 61, 199, 59, 7, 63, 170, 58, 77, 189, 130, 31, 183, 61, 25, 239, 18, 189, 86, 17, 158, 189, 114, 116, 74, 190, 253, 35, 218, 189, 180, 19, 157, 61, 0, 181, 191, 189, 210, 110, 154, 190, 171, 143, 2, 62, 114, 178, 94, 61, 219, 51, 251, 61, 175, 43, 64, 190, 18, 24, 38, 190, 208, 174, 240, 61, 118, 194, 111, 62, 38, 95, 108, 61, 59, 7, 144, 62, 7, 14, 189, 60, 172, 148, 79, 62, 22, 79, 92, 62, 31, 241, 80, 190, 254, 19, 213, 188, 168, 28, 178, 189, 190, 116, 9, 188, 246, 8, 134, 62, 232, 130, 17, 62, 202, 76, 177, 189, 148, 130, 206, 189, 151, 243, 242, 61, 113, 117, 231, 61, 30, 240, 188, 61, 15, 72, 96, 61, 27, 40, 150, 190, 224, 96, 29, 62, 150, 208, 96, 190, 135, 212, 30, 62, 242, 159, 51, 62, 164, 244, 8, 190, 154, 58, 68, 61, 210, 239, 1, 62, 79, 89, 32, 62, 235, 160, 196, 189, 139, 87, 51, 190, 107, 95, 189, 62, 196, 184, 6, 62, 92, 218, 69, 190, 0, 207, 45, 62, 206, 59, 82, 189, 240, 78, 129, 190, 229, 197, 81, 62, 50, 146, 173, 189, 151, 54, 114, 62, 176, 209, 187, 190, 230, 8, 231, 188, 147, 219, 170, 189, 108, 171, 56, 60, 177, 106, 170, 190, 126, 201, 180, 61, 130, 29, 172, 62, 23, 40, 197, 189, 164, 56, 24, 191, 198, 20, 227, 58, 234, 48, 183, 62, 5, 169, 140, 189, 93, 198, 187, 190, 183, 59, 7, 62, 219, 227, 91, 190, 104, 91, 9, 188, 184, 215, 186, 62, 128, 240, 0, 190, 104, 224, 208, 190, 239, 183, 152, 61, 239, 210, 8, 59, 45, 151, 29, 191, 139, 115, 182, 60, 71, 94, 11, 62, 54, 143, 91, 188, 143, 91, 3, 190, 28, 95, 133, 62, 145, 107, 106, 190, 118, 131, 143, 190, 4, 153, 213, 61, 59, 237, 166, 190, 186, 138, 137, 62, 20, 101, 40, 191, 176, 224, 150, 190, 183, 85, 199, 61, 68, 205, 83, 190, 141, 22, 214, 190, 126, 196, 97, 61, 148, 119, 232, 61, 128, 72, 132, 190, 200, 128, 254, 190, 108, 65, 37, 62, 252, 103, 254, 62, 200, 206, 180, 190, 54, 1, 29, 62, 113, 232, 49, 188, 83, 114, 146, 60, 75, 253, 135, 190, 102, 12, 207, 189, 180, 1, 52, 189, 11, 145, 19, 61, 84, 185, 82, 190, 200, 104, 26, 190, 77, 132, 29, 62, 80, 229, 129, 62, 251, 232, 30, 191, 131, 59, 80, 62, 65, 33, 15, 62, 75, 49, 153, 62, 2, 58, 255, 188, 150, 1, 171, 62, 205, 144, 29, 60, 43, 147, 74, 62, 140, 57, 129, 61, 115, 173, 158, 61, 112, 188, 16, 62, 159, 128, 189, 60, 26, 223, 35, 189, 105, 62, 238, 61, 208, 71, 128, 190, 108, 6, 228, 190, 122, 148, 196, 61, 216, 214, 130, 62, 141, 184, 31, 190, 232, 116, 168, 190, 104, 124, 233, 61, 127, 43, 26, 62, 202, 76, 128, 61, 72, 204, 6, 190, 133, 182, 65, 190, 95, 92, 225, 61, 122, 57, 143, 190, 183, 247, 25, 188, 12, 190, 66, 190, 248, 154, 41, 189, 219, 66, 230, 189, 208, 88, 91, 62, 234, 85, 155, 190, 238, 217, 72, 190, 16, 14, 243, 61, 38, 233, 62, 62, 16, 91, 23, 62, 99, 90, 150, 62, 231, 126, 105, 189, 63, 172, 1, 62, 64, 49, 254, 189, 210, 176, 28, 188, 75, 223, 161, 189, 171, 34, 159, 189, 113, 81, 63, 62, 39, 199, 210, 61, 58, 121, 112, 59, 109, 219, 172, 190, 145, 185, 164, 189, 162, 3, 147, 62, 16, 128, 24, 62, 71, 61, 167, 189, 228, 30, 35, 62, 83, 207, 140, 189, 165, 52, 138, 61, 113, 157, 56, 190, 59, 84, 106, 60, 198, 216, 143, 62, 223, 113, 47, 189, 83, 49, 159, 61, 164, 41, 219, 61, 11, 106, 47, 62, 53, 230, 251, 188, 174, 59, 234, 61, 78, 231, 4, 62, 154, 111, 34, 61, 55, 38, 140, 61, 202, 152, 144, 62, 218, 25, 227, 189, 125, 219, 22, 189, 20, 219, 75, 62, 228, 220, 205, 190, 27, 190, 22, 62, 62, 173, 153, 190, 53, 42, 108, 189, 239, 13, 13, 190, 18, 3, 242, 189, 103, 216, 55, 190, 122, 37, 70, 189, 242, 80, 182, 189, 48, 51, 126, 190, 181, 147, 224, 190, 85, 26, 18, 62, 169, 140, 32, 62, 251, 125, 158, 61, 117, 12, 51, 62, 62, 161, 37, 190, 126, 39, 163, 189, 134, 23, 53, 61, 158, 193, 241, 60, 14, 34, 219, 189, 29, 234, 47, 62, 42, 170, 248, 61, 104, 205, 70, 188, 0, 122, 201, 62, 56, 116, 17, 189, 87, 10, 20, 190, 138, 81, 181, 61, 119, 224, 182, 62, 194, 253, 187, 61, 36, 17, 39, 62, 103, 184, 193, 61, 247, 247, 125, 190, 22, 254, 234, 187, 34, 185, 130, 190, 125, 6, 249, 61, 154, 195, 14, 62, 21, 230, 199, 61, 217, 10, 50, 189, 222, 123, 156, 62, 185, 64, 106, 190, 253, 127, 104, 190, 211, 252, 136, 61, 113, 140, 196, 62, 243, 130, 40, 190, 106, 80, 39, 191, 90, 173, 34, 62, 160, 53, 204, 188, 34, 94, 158, 190, 148, 147, 19, 62, 204, 133, 184, 189, 90, 235, 230, 189, 12, 57, 127, 61, 190, 49, 166, 62, 78, 9, 112, 61, 150, 131, 130, 190, 124, 120, 14, 60, 212, 54, 157, 62, 71, 33, 254, 190, 22, 194, 42, 62, 0, 121, 213, 61, 228, 163, 129, 62, 179, 65, 116, 187, 56, 192, 130, 62, 13, 149, 245, 60, 120, 10, 105, 62, 138, 101, 150, 190, 130, 205, 216, 62, 219, 243, 15, 189, 210, 54, 189, 61, 157, 100, 65, 61, 73, 185, 151, 62, 204, 143, 138, 190, 155, 60, 247, 190, 20, 123, 26, 189, 105, 102, 103, 61, 52, 86, 162, 190, 43, 187, 159, 190, 231, 136, 60, 190, 51, 216, 226, 189, 177, 214, 130, 62, 216, 49, 223, 189, 217, 202, 61, 190, 96, 86, 95, 61, 159, 207, 0, 191, 227, 110, 161, 190, 183, 92, 154, 62, 53, 67, 78, 61, 134, 147, 57, 61, 122, 204, 102, 61, 49, 251, 149, 189, 153, 246, 185, 190, 113, 128, 159, 190, 169, 209, 197, 189, 238, 220, 135, 61, 203, 185, 212, 189, 109, 5, 181, 190, 243, 239, 149, 190, 2, 247, 124, 62, 199, 194, 199, 190, 148, 48, 183, 60, 220, 30, 120, 60, 135, 169, 119, 190, 111, 123, 226, 188, 199, 22, 101, 189, 155, 191, 185, 189, 21, 89, 39, 189, 165, 145, 126, 188, 104, 93, 203, 189, 46, 87, 148, 189, 47, 249, 247, 60, 174, 8, 226, 190, 73, 84, 82, 61, 194, 68, 16, 190, 147, 26, 9, 59, 4, 182, 136, 62, 204, 237, 98, 61, 84, 89, 132, 190, 87, 71, 143, 61, 186, 184, 134, 62, 217, 52, 210, 189, 126, 69, 10, 190, 106, 127, 144, 61, 125, 138, 236, 61, 167, 232, 8, 190, 90, 223, 31, 189, 172, 205, 139, 60, 152, 214, 58, 190, 204, 119, 10, 62, 164, 177, 114, 190, 117, 58, 98, 189, 162, 36, 125, 190, 89, 243, 147, 60, 210, 142, 187, 189, 176, 160, 14, 61, 142, 65, 165, 190, 242, 213, 237, 61, 45, 135, 187, 61, 245, 187, 169, 189, 231, 12, 220, 190, 180, 46, 139, 188, 166, 104, 247, 62, 75, 143, 38, 190, 116, 195, 52, 189, 89, 78, 8, 61, 2, 103, 170, 188, 47, 223, 120, 61, 157, 76, 1, 62, 59, 146, 48, 62, 133, 218, 206, 58, 206, 104, 253, 59, 30, 204, 6, 190, 145, 176, 198, 61, 109, 235, 4, 189, 92, 174, 2, 62, 51, 152, 3, 190, 87, 126, 110, 188, 170, 53, 4, 60, 21, 10, 17, 190, 255, 89, 141, 189, 108, 101, 144, 58, 155, 205, 5, 62, 48, 163, 26, 190, 163, 11, 168, 61, 217, 198, 14, 190, 228, 155, 98, 189, 54, 170, 240, 59, 198, 206, 72, 61, 140, 67, 40, 190, 212, 241, 252, 189, 95, 128, 182, 189, 112, 170, 92, 189, 254, 24, 185, 186, 10, 102, 62, 189, 47, 79, 196, 61, 181, 27, 26, 62, 240, 0, 223, 59, 179, 187, 231, 189, 179, 35, 192, 60, 252, 47, 131, 62, 45, 216, 128, 60, 41, 179, 15, 191, 227, 0, 192, 60, 83, 17, 29, 61, 112, 136, 25, 191, 23, 153, 237, 190, 83, 63, 160, 189, 21, 140, 13, 190, 249, 14, 25, 61, 250, 47, 58, 188, 209, 51, 79, 190, 159, 95, 199, 60, 8, 15, 193, 61, 145, 251, 142, 62, 103, 130, 52, 59, 210, 176, 158, 190, 210, 15, 134, 188, 58, 250, 50, 62, 5, 1, 150, 190, 43, 19, 247, 188, 26, 218, 44, 190, 242, 82, 155, 190, 8, 18, 199, 189, 60, 140, 99, 62, 169, 168, 96, 189, 69, 130, 143, 62, 20, 121, 133, 61, 221, 10, 7, 62, 225, 72, 91, 189, 35, 54, 104, 61, 45, 221, 203, 61, 47, 99, 29, 61, 89, 192, 115, 190, 87, 128, 139, 189, 27, 238, 124, 62, 240, 77, 26, 188, 219, 239, 15, 62, 227, 111, 183, 190, 251, 22, 187, 190, 71, 4, 240, 189, 253, 167, 52, 189, 157, 163, 7, 62, 1, 54, 44, 62, 158, 150, 132, 61, 254, 17, 222, 60, 228, 52, 121, 189, 235, 128, 9, 62, 87, 195, 249, 61, 141, 47, 104, 190, 192, 226, 86, 190, 226, 41, 136, 60, 15, 174, 98, 188, 235, 115, 33, 189, 171, 61, 8, 190, 110, 129, 5, 61, 67, 206, 83, 61, 248, 48, 178, 189, 37, 188, 61, 62, 175, 6, 144, 189, 217, 167, 9, 190, 54, 187, 53, 190, 221, 41, 210, 189, 181, 156, 28, 190, 115, 229, 234, 61, 13, 179, 104, 61, 33, 47, 252, 61, 240, 182, 116, 58, 146, 146, 199, 60, 38, 70, 1, 61, 238, 143, 51, 62, 192, 132, 90, 190, 90, 159, 53, 62, 196, 61, 27, 62, 74, 165, 224, 61, 141, 150, 0, 62, 136, 244, 147, 62, 36, 109, 225, 60, 86, 197, 50, 62, 77, 151, 220, 189, 103, 128, 75, 61, 85, 81, 144, 189, 140, 15, 86, 62, 30, 22, 163, 189, 246, 172, 138, 62, 228, 69, 202, 189, 136, 92, 40, 190, 62, 66, 219, 188, 53, 205, 217, 61, 182, 111, 15, 61, 157, 242, 61, 60, 211, 247, 29, 190, 121, 0, 124, 190, 204, 201, 103, 61, 171, 180, 164, 188, 52, 131, 148, 61, 226, 217, 147, 62, 159, 21, 128, 189, 213, 66, 84, 190, 156, 217, 151, 189, 228, 60, 120, 62, 5, 196, 247, 189, 132, 52, 31, 190, 29, 35, 93, 62, 9, 56, 7, 190, 102, 23, 210, 189, 62, 77, 72, 62, 67, 64, 233, 188, 102, 248, 250, 189, 89, 206, 39, 62, 208, 80, 178, 190, 124, 74, 139, 62, 18, 155, 75, 190, 245, 23, 189, 189, 247, 83, 156, 188, 109, 172, 47, 190, 142, 36, 191, 190, 54, 108, 91, 62, 74, 137, 79, 62, 49, 104, 112, 190, 145, 158, 15, 191, 140, 165, 170, 62, 54, 106, 104, 62, 191, 245, 133, 186, 247, 205, 28, 190, 114, 38, 39, 189, 0, 144, 169, 61, 247, 185, 210, 189, 59, 79, 113, 189, 115, 223, 133, 190, 91, 38, 53, 189, 232, 106, 194, 190, 46, 140, 112, 189, 98, 121, 201, 61, 30, 168, 252, 187, 92, 145, 227, 190, 152, 58, 35, 189, 226, 222, 214, 61, 79, 158, 135, 62, 251, 79, 12, 190, 161, 228, 157, 62, 241, 45, 22, 190, 185, 34, 22, 62, 158, 161, 3, 189, 169, 46, 146, 189, 154, 94, 128, 190, 16, 92, 51, 189, 176, 194, 223, 61, 159, 35, 153, 62, 85, 125, 19, 190, 208, 115, 171, 190, 36, 126, 198, 61, 107, 175, 145, 62, 168, 255, 7, 190, 118, 178, 106, 190, 111, 77, 94, 189, 141, 132, 39, 62, 42, 60, 37, 190, 7, 62, 211, 189, 205, 145, 127, 190, 99, 251, 241, 61, 86, 85, 55, 61, 19, 20, 62, 61, 75, 18, 12, 62, 216, 107, 156, 189, 62, 170, 186, 188, 52, 238, 166, 62, 202, 247, 75, 191, 120, 27, 33, 62, 3, 183, 106, 62, 184, 254, 25, 62, 11, 228, 72, 62, 101, 120, 139, 61, 163, 150, 155, 60, 154, 67, 107, 62, 3, 35, 143, 61, 248, 129, 209, 62, 19, 12, 78, 188, 32, 17, 234, 60, 87, 253, 34, 190, 44, 155, 211, 61, 59, 25, 219, 187, 60, 125, 187, 190, 174, 89, 82, 62, 144, 172, 65, 61, 94, 46, 151, 190, 209, 218, 188, 190, 92, 11, 16, 61, 155, 69, 140, 61, 14, 180, 161, 189, 11, 19, 175, 189, 178, 235, 48, 190, 227, 133, 136, 189, 119, 113, 97, 61, 173, 82, 20, 62, 51, 67, 209, 188, 190, 44, 250, 189, 252, 181, 33, 62, 134, 248, 31, 190, 7, 131, 191, 189, 162, 129, 215, 189, 62, 245, 31, 190, 172, 205, 170, 61, 162, 232, 29, 190, 87, 126, 185, 61, 142, 189, 11, 190, 104, 165, 55, 188, 93, 5, 179, 60, 23, 227, 234, 189, 146, 164, 164, 61, 224, 151, 23, 62, 174, 34, 5, 190, 123, 37, 25, 62, 149, 100, 43, 190, 54, 32, 34, 62, 189, 163, 16, 62, 224, 238, 200, 189, 193, 246, 96, 187, 45, 141, 177, 188, 190, 29, 227, 189, 105, 94, 167, 60, 44, 174, 41, 189, 213, 203, 130, 190, 35, 215, 15, 190, 114, 129, 41, 62, 12, 182, 19, 190, 72, 158, 203, 189, 227, 231, 230, 61, 58, 145, 226, 188, 89, 137, 173, 190, 0, 103, 128, 190, 77, 61, 147, 62, 74, 171, 87, 190, 228, 217, 64, 188, 101, 61, 95, 59, 246, 61, 151, 189, 198, 185, 6, 190, 118, 158, 143, 189, 32, 153, 165, 189, 237, 156, 120, 62, 117, 17, 25, 191, 91, 43, 82, 60, 128, 105, 30, 62, 16, 65, 149, 190, 230, 80, 137, 190, 93, 235, 126, 61, 21, 207, 150, 189, 220, 243, 6, 59, 237, 90, 20, 191, 140, 247, 68, 186, 33, 35, 88, 62, 200, 148, 126, 190, 152, 39, 49, 61, 236, 94, 192, 61, 142, 148, 122, 188, 229, 215, 202, 189, 188, 91, 125, 62, 234, 86, 244, 190, 237, 204, 2, 191, 195, 103, 144, 62, 135, 73, 174, 190, 22, 98, 150, 189, 134, 127, 215, 190, 178, 120, 193, 190, 75, 171, 7, 191, 127, 34, 116, 190, 60, 233, 144, 189, 146, 228, 137, 189, 7, 11, 103, 189, 48, 37, 3, 187, 72, 92, 99, 190, 9, 121, 195, 62, 125, 249, 23, 191, 196, 211, 44, 62, 189, 44, 88, 188, 65, 209, 212, 61, 47, 61, 66, 190, 22, 172, 148, 188, 156, 159, 153, 190, 246, 18, 166, 189, 101, 76, 33, 190, 21, 65, 152, 189, 170, 244, 115, 62, 130, 182, 104, 190, 205, 254, 249, 189, 227, 133, 166, 190, 247, 238, 19, 62, 218, 89, 149, 188, 79, 56, 155, 189, 146, 43, 166, 189, 80, 144, 59, 62, 171, 124, 96, 62, 235, 21, 179, 190, 92, 96, 78, 62, 155, 211, 206, 62, 112, 207, 144, 190, 92, 19, 92, 62, 210, 161, 3, 62, 199, 148, 70, 62, 255, 236, 125, 62, 214, 221, 219, 61, 28, 163, 193, 61, 15, 150, 62, 61, 2, 27, 19, 189, 187, 46, 110, 62, 43, 65, 7, 190, 68, 161, 193, 189, 168, 140, 171, 188, 232, 123, 184, 61, 115, 74, 234, 189, 70, 244, 112, 190, 146, 161, 86, 189, 164, 42, 164, 62, 129, 201, 155, 190, 114, 36, 157, 190, 135, 32, 252, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 24, 44, 189, 247, 125, 191, 189, 14, 198, 16, 190, 134, 207, 22, 62, 217, 217, 46, 62, 174, 199, 20, 190, 57, 1, 210, 61, 47, 45, 52, 62, 27, 130, 144, 188, 1, 205, 63, 190, 222, 167, 31, 188, 171, 253, 63, 62, 142, 103, 222, 61, 112, 86, 215, 61, 233, 23, 13, 62, 24, 150, 167, 189, 98, 143, 133, 62, 188, 149, 146, 61, 232, 150, 11, 62, 207, 227, 137, 60, 21, 166, 149, 61, 184, 115, 244, 189, 19, 250, 200, 189, 217, 53, 14, 189, 115, 25, 186, 62, 244, 19, 222, 61, 187, 161, 159, 60, 247, 115, 66, 61, 148, 40, 198, 189, 1, 251, 92, 61, 220, 201, 255, 61, 164, 187, 243, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 28, 185, 190, 144, 106, 209, 62, 133, 155, 34, 189, 143, 151, 173, 190, 26, 101, 181, 62, 59, 131, 150, 62, 95, 24, 41, 190, 71, 88, 197, 190, 192, 4, 24, 191, 23, 180, 245, 189, 225, 83, 158, 62, 191, 57, 98, 188, 18, 90, 138, 62, 4, 217, 49, 63, 8, 61, 201, 190, 113, 184, 34, 190, 169, 35, 41, 62, 155, 156, 166, 190, 38, 228, 34, 191, 4, 201, 251, 62, 213, 202, 192, 62, 225, 62, 211, 189, 125, 185, 223, 190, 102, 17, 159, 189, 106, 133, 203, 189, 116, 147, 251, 62, 144, 175, 78, 189, 44, 21, 201, 190, 122, 251, 27, 62, 17, 200, 130, 62, 209, 227, 1, 63, 160, 110, 186, 190, 173, 35, 249, 60, 138, 209, 65, 62, 198, 110, 240, 61, 240, 48, 177, 190, 150, 142, 167, 190, 38, 71, 126, 60, 172, 243, 17, 190, 146, 129, 177, 188, 92, 100, 36, 62, 64, 51, 9, 61, 232, 37, 120, 189, 190, 178, 10, 190, 211, 170, 22, 62, 11, 216, 226, 188, 219, 13, 165, 189, 199, 241, 181, 62, 73, 138, 41, 190, 159, 219, 20, 62, 189, 143, 133, 61, 43, 236, 68, 190, 158, 72, 186, 60, 97, 152, 137, 189, 160, 192, 227, 61, 247, 112, 116, 189, 108, 98, 172, 190, 203, 28, 241, 61, 117, 108, 209, 62, 192, 216, 117, 189, 108, 46, 15, 189, 183, 169, 8, 62, 81, 161, 85, 189, 48, 26, 67, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 89, 207, 189, 50, 106, 100, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {242, 243, 115, 191, 19, 244, 2, 64, 76, 137, 71, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {25, 230, 27, 192, 254, 41, 216, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0039/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}