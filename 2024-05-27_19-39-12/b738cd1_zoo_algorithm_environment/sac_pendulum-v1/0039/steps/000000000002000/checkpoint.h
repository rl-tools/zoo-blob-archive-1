// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 157, 164, 190, 224, 38, 234, 190, 239, 222, 54, 190, 81, 64, 101, 62, 128, 51, 230, 62, 210, 66, 186, 190, 34, 26, 166, 59, 94, 56, 150, 189, 247, 36, 180, 62, 252, 82, 3, 190, 247, 79, 46, 191, 94, 173, 185, 190, 238, 30, 251, 189, 104, 177, 215, 190, 251, 47, 117, 62, 250, 207, 89, 60, 71, 226, 128, 190, 57, 249, 150, 190, 27, 159, 249, 190, 78, 45, 201, 62, 196, 54, 210, 190, 136, 251, 193, 190, 220, 9, 143, 190, 200, 157, 114, 189, 39, 30, 3, 63, 171, 198, 17, 61, 248, 155, 222, 190, 211, 190, 187, 190, 57, 58, 254, 62, 152, 179, 199, 188, 63, 160, 243, 189, 36, 134, 105, 63, 125, 6, 212, 190, 41, 167, 5, 63, 152, 246, 210, 190, 228, 208, 171, 190, 243, 2, 145, 61, 181, 209, 216, 188, 242, 164, 231, 190, 38, 161, 35, 63, 39, 218, 171, 189, 193, 43, 128, 62, 200, 233, 9, 63, 168, 224, 97, 61, 63, 237, 237, 187, 30, 5, 5, 190, 181, 94, 142, 62, 90, 48, 131, 62, 85, 36, 244, 62, 193, 226, 200, 62, 174, 137, 75, 62, 140, 85, 243, 62, 47, 243, 60, 191, 132, 188, 33, 190, 70, 41, 221, 189, 129, 32, 243, 190, 152, 43, 62, 62, 0, 203, 238, 190, 255, 59, 6, 61, 250, 64, 176, 62, 122, 54, 34, 191, 248, 65, 25, 63, 211, 31, 182, 189, 176, 159, 138, 190, 21, 213, 190, 190, 93, 169, 196, 190, 196, 47, 221, 61, 18, 22, 27, 191, 53, 207, 32, 190, 224, 131, 35, 62, 202, 127, 116, 62, 135, 214, 192, 62, 46, 100, 176, 62, 52, 225, 247, 62, 171, 19, 74, 62, 25, 70, 145, 62, 112, 219, 27, 190, 165, 194, 221, 190, 64, 97, 20, 63, 249, 104, 53, 191, 147, 13, 92, 189, 147, 18, 210, 62, 227, 130, 153, 190, 239, 180, 245, 62, 179, 252, 163, 62, 239, 76, 72, 63, 171, 35, 26, 62, 124, 209, 29, 62, 29, 69, 183, 61, 95, 117, 183, 190, 249, 14, 28, 62, 241, 83, 127, 191, 102, 78, 136, 62, 158, 239, 148, 189, 16, 244, 135, 61, 28, 66, 73, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 224, 64, 191, 213, 49, 140, 190, 128, 78, 227, 190, 104, 20, 48, 189, 29, 129, 25, 63, 49, 6, 169, 62, 217, 10, 1, 62, 194, 159, 159, 62, 172, 125, 244, 187, 174, 147, 14, 190, 145, 197, 2, 63, 9, 5, 157, 190, 105, 62, 34, 63, 98, 83, 58, 62, 128, 178, 131, 189, 63, 118, 243, 190, 112, 214, 76, 62, 78, 50, 42, 63, 144, 120, 220, 190, 44, 194, 19, 62, 107, 147, 211, 190, 74, 139, 207, 62, 231, 120, 14, 63, 214, 116, 34, 191, 20, 50, 54, 62, 74, 188, 185, 189, 204, 145, 182, 190, 143, 234, 75, 190, 182, 103, 32, 190, 12, 185, 147, 190, 111, 220, 238, 62, 195, 239, 248, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 74, 12, 61, 128, 50, 183, 188, 185, 16, 23, 190, 153, 181, 91, 190, 61, 122, 159, 189, 225, 178, 72, 189, 117, 144, 149, 188, 100, 23, 21, 62, 41, 112, 231, 61, 153, 79, 170, 188, 85, 7, 198, 61, 85, 219, 19, 189, 57, 32, 254, 189, 164, 79, 151, 189, 35, 63, 220, 61, 245, 249, 119, 189, 70, 58, 195, 60, 69, 122, 51, 60, 71, 242, 10, 61, 34, 7, 38, 190, 249, 138, 248, 59, 43, 241, 171, 187, 55, 63, 72, 189, 205, 145, 40, 190, 238, 87, 97, 62, 150, 209, 135, 61, 232, 168, 60, 190, 49, 184, 23, 190, 40, 34, 18, 190, 88, 152, 215, 61, 211, 212, 44, 190, 192, 195, 21, 62, 252, 67, 33, 60, 225, 117, 127, 189, 56, 36, 4, 190, 47, 210, 52, 190, 98, 136, 99, 190, 147, 171, 161, 61, 249, 61, 67, 62, 237, 32, 130, 189, 25, 166, 41, 189, 29, 99, 110, 60, 173, 48, 24, 62, 40, 205, 49, 59, 151, 111, 43, 62, 249, 144, 83, 61, 75, 37, 1, 190, 238, 122, 10, 189, 31, 83, 187, 187, 122, 144, 18, 190, 211, 32, 46, 62, 138, 46, 76, 190, 56, 50, 7, 188, 112, 113, 140, 189, 233, 152, 63, 190, 17, 52, 31, 61, 39, 210, 29, 189, 41, 204, 188, 188, 92, 223, 64, 190, 84, 4, 190, 188, 26, 5, 68, 62, 106, 150, 115, 189, 125, 91, 76, 190, 162, 152, 146, 61, 168, 91, 108, 187, 111, 55, 33, 190, 61, 166, 175, 189, 72, 225, 209, 60, 199, 68, 14, 62, 107, 73, 164, 60, 187, 204, 37, 190, 103, 133, 78, 189, 96, 43, 234, 189, 220, 168, 53, 190, 153, 81, 163, 60, 245, 165, 137, 186, 142, 45, 213, 60, 45, 126, 21, 190, 53, 117, 43, 60, 208, 48, 41, 190, 106, 58, 41, 190, 48, 55, 111, 60, 118, 55, 242, 189, 1, 238, 135, 61, 16, 206, 187, 60, 200, 183, 44, 190, 179, 26, 216, 189, 163, 148, 88, 61, 106, 68, 164, 61, 110, 44, 170, 188, 14, 207, 51, 62, 208, 205, 112, 187, 0, 213, 28, 61, 195, 180, 85, 60, 195, 23, 91, 59, 10, 210, 146, 61, 47, 234, 98, 62, 29, 49, 228, 61, 187, 244, 252, 189, 69, 113, 88, 61, 130, 235, 39, 61, 208, 129, 233, 61, 24, 15, 127, 189, 42, 124, 51, 61, 92, 81, 177, 61, 224, 48, 102, 62, 54, 126, 142, 62, 178, 112, 227, 189, 113, 244, 142, 61, 27, 6, 178, 61, 144, 208, 7, 62, 216, 65, 17, 190, 118, 157, 151, 62, 59, 61, 2, 61, 42, 62, 232, 61, 205, 18, 91, 190, 142, 33, 31, 60, 89, 208, 205, 61, 56, 74, 145, 189, 192, 242, 147, 190, 102, 196, 220, 62, 154, 152, 252, 189, 249, 237, 166, 61, 112, 166, 137, 60, 183, 3, 14, 62, 10, 1, 233, 189, 64, 144, 178, 190, 127, 59, 50, 190, 210, 114, 75, 190, 112, 113, 194, 61, 58, 216, 14, 190, 90, 0, 247, 188, 199, 46, 89, 61, 127, 244, 176, 188, 98, 126, 14, 189, 144, 230, 19, 190, 208, 190, 190, 58, 202, 85, 141, 190, 125, 129, 222, 61, 28, 83, 123, 189, 103, 183, 119, 61, 144, 49, 27, 62, 96, 71, 115, 189, 47, 114, 63, 190, 231, 3, 230, 60, 124, 80, 46, 62, 163, 85, 224, 189, 166, 242, 25, 62, 165, 59, 75, 190, 151, 99, 75, 60, 89, 171, 158, 189, 127, 161, 167, 188, 253, 9, 91, 62, 45, 80, 38, 189, 216, 168, 180, 61, 88, 247, 253, 189, 78, 91, 200, 189, 118, 79, 35, 190, 171, 69, 19, 62, 190, 83, 56, 190, 119, 245, 97, 189, 189, 78, 29, 190, 90, 112, 179, 61, 223, 46, 33, 189, 147, 44, 225, 61, 104, 142, 210, 61, 9, 56, 253, 61, 245, 2, 20, 190, 234, 86, 203, 61, 154, 54, 141, 189, 70, 127, 175, 189, 135, 49, 27, 62, 197, 241, 23, 190, 192, 165, 160, 61, 45, 159, 50, 62, 37, 13, 113, 61, 178, 124, 47, 188, 185, 3, 34, 190, 80, 62, 4, 190, 90, 122, 114, 187, 82, 72, 239, 189, 96, 186, 9, 190, 158, 155, 160, 61, 85, 115, 184, 188, 254, 73, 47, 189, 230, 189, 3, 189, 83, 107, 49, 60, 198, 41, 185, 189, 182, 65, 17, 60, 176, 42, 75, 61, 139, 52, 28, 189, 65, 7, 10, 190, 224, 155, 228, 188, 212, 32, 133, 61, 225, 42, 141, 189, 75, 185, 122, 190, 201, 221, 51, 62, 111, 209, 3, 190, 0, 4, 173, 60, 149, 185, 62, 190, 221, 148, 7, 189, 94, 134, 172, 189, 4, 137, 223, 189, 126, 133, 90, 189, 247, 208, 143, 190, 91, 148, 112, 62, 198, 147, 167, 189, 86, 133, 143, 61, 72, 167, 1, 189, 28, 130, 180, 61, 208, 228, 84, 62, 122, 76, 0, 61, 193, 119, 215, 61, 241, 29, 255, 189, 112, 76, 53, 190, 116, 172, 148, 61, 251, 190, 224, 61, 173, 252, 139, 190, 97, 88, 89, 190, 247, 134, 67, 61, 140, 31, 239, 189, 255, 128, 34, 61, 105, 73, 33, 62, 0, 192, 250, 60, 198, 12, 113, 190, 29, 47, 94, 188, 157, 126, 65, 62, 174, 176, 97, 188, 36, 148, 251, 61, 67, 117, 24, 61, 49, 143, 133, 61, 238, 191, 237, 186, 88, 153, 81, 61, 21, 81, 39, 62, 103, 184, 40, 62, 158, 252, 200, 190, 227, 178, 90, 61, 156, 143, 136, 62, 73, 136, 224, 59, 83, 73, 3, 189, 239, 112, 255, 61, 171, 51, 244, 189, 83, 163, 94, 61, 107, 206, 28, 190, 35, 107, 109, 62, 134, 88, 129, 61, 149, 154, 93, 190, 9, 231, 205, 189, 237, 247, 163, 62, 228, 9, 74, 190, 153, 144, 45, 189, 3, 111, 185, 188, 163, 166, 232, 61, 151, 115, 101, 190, 200, 155, 44, 190, 239, 119, 25, 62, 187, 137, 88, 190, 145, 251, 11, 190, 76, 147, 231, 61, 103, 133, 78, 189, 89, 253, 41, 61, 57, 141, 51, 61, 109, 15, 78, 62, 0, 49, 239, 187, 210, 56, 149, 190, 181, 92, 214, 61, 16, 84, 116, 62, 142, 184, 69, 190, 85, 23, 37, 189, 250, 34, 184, 61, 54, 189, 61, 62, 8, 140, 157, 60, 85, 73, 27, 61, 5, 159, 125, 190, 79, 150, 137, 188, 30, 181, 165, 61, 149, 21, 29, 62, 214, 207, 4, 62, 8, 238, 76, 190, 46, 94, 48, 62, 83, 125, 13, 61, 121, 82, 206, 60, 55, 164, 151, 61, 83, 78, 10, 190, 208, 215, 201, 189, 76, 235, 91, 190, 219, 105, 30, 190, 122, 76, 91, 62, 9, 116, 180, 188, 133, 39, 93, 189, 80, 210, 200, 61, 145, 209, 12, 190, 221, 247, 217, 189, 95, 49, 183, 189, 29, 136, 145, 189, 204, 105, 168, 188, 131, 184, 141, 61, 204, 9, 44, 190, 103, 174, 182, 189, 248, 227, 235, 189, 229, 21, 16, 190, 54, 141, 201, 60, 117, 8, 36, 190, 151, 24, 90, 186, 20, 49, 248, 189, 155, 92, 73, 188, 114, 82, 248, 188, 147, 34, 254, 61, 224, 113, 18, 62, 115, 193, 51, 60, 64, 186, 33, 190, 11, 4, 197, 59, 243, 220, 171, 189, 189, 130, 39, 190, 51, 146, 11, 190, 245, 178, 4, 190, 19, 128, 173, 189, 15, 103, 11, 60, 167, 161, 35, 62, 154, 220, 120, 189, 189, 88, 141, 61, 158, 9, 240, 60, 15, 15, 166, 61, 105, 245, 236, 61, 230, 222, 136, 62, 126, 184, 253, 61, 175, 100, 41, 190, 226, 189, 119, 61, 116, 180, 189, 61, 251, 200, 77, 190, 101, 219, 131, 189, 221, 207, 183, 61, 166, 114, 27, 62, 118, 246, 186, 189, 48, 179, 181, 189, 90, 88, 45, 188, 48, 43, 146, 190, 86, 87, 159, 61, 222, 115, 6, 190, 89, 165, 187, 189, 11, 30, 30, 190, 239, 78, 46, 62, 208, 19, 106, 62, 13, 32, 130, 190, 101, 147, 108, 190, 39, 115, 8, 62, 245, 231, 29, 62, 248, 253, 25, 190, 28, 9, 155, 190, 151, 42, 138, 188, 147, 237, 254, 62, 177, 44, 198, 189, 195, 178, 227, 61, 226, 151, 190, 189, 144, 68, 82, 189, 62, 133, 227, 189, 206, 220, 237, 189, 246, 111, 65, 61, 68, 34, 167, 189, 63, 22, 166, 190, 137, 84, 233, 60, 106, 29, 212, 61, 160, 146, 13, 62, 224, 64, 41, 190, 150, 189, 82, 190, 180, 61, 23, 62, 232, 226, 246, 61, 158, 93, 1, 59, 172, 147, 144, 62, 138, 216, 134, 189, 161, 67, 143, 62, 247, 81, 51, 62, 105, 91, 244, 189, 134, 135, 187, 60, 124, 84, 165, 189, 185, 15, 185, 61, 169, 176, 115, 62, 230, 51, 156, 61, 219, 13, 42, 60, 133, 115, 136, 189, 176, 47, 1, 62, 246, 181, 67, 61, 41, 79, 8, 62, 95, 192, 15, 61, 168, 72, 72, 190, 52, 130, 232, 61, 72, 9, 76, 190, 65, 188, 26, 62, 246, 108, 10, 62, 10, 126, 132, 189, 98, 182, 244, 61, 254, 79, 64, 62, 61, 57, 211, 61, 97, 75, 73, 189, 95, 126, 5, 190, 11, 152, 141, 62, 11, 73, 64, 62, 52, 210, 129, 190, 14, 49, 127, 61, 162, 35, 142, 188, 172, 200, 145, 190, 46, 180, 59, 62, 178, 47, 50, 189, 174, 51, 38, 62, 69, 164, 151, 190, 190, 150, 76, 61, 175, 222, 116, 189, 202, 11, 79, 61, 168, 55, 139, 190, 129, 171, 36, 61, 167, 17, 138, 62, 70, 128, 143, 189, 147, 158, 59, 190, 76, 49, 57, 189, 187, 103, 116, 62, 220, 5, 106, 189, 20, 151, 182, 190, 73, 77, 157, 61, 0, 247, 4, 190, 172, 78, 224, 61, 118, 58, 163, 62, 5, 135, 45, 61, 14, 149, 17, 190, 0, 101, 178, 61, 252, 117, 203, 189, 28, 137, 204, 190, 222, 250, 84, 61, 231, 166, 217, 60, 9, 119, 199, 61, 28, 251, 123, 189, 153, 191, 129, 61, 59, 223, 58, 190, 132, 203, 148, 190, 89, 181, 225, 61, 61, 186, 98, 190, 175, 111, 26, 62, 176, 141, 88, 190, 75, 227, 8, 190, 133, 116, 9, 62, 159, 69, 217, 189, 117, 66, 196, 190, 160, 159, 194, 60, 235, 151, 105, 60, 180, 112, 243, 189, 206, 208, 253, 189, 10, 133, 13, 62, 134, 45, 250, 62, 36, 16, 165, 190, 76, 141, 217, 60, 111, 175, 159, 61, 14, 99, 111, 188, 5, 62, 63, 190, 44, 7, 2, 189, 104, 163, 216, 189, 53, 28, 202, 188, 200, 111, 43, 190, 167, 203, 180, 189, 188, 203, 42, 62, 64, 242, 119, 62, 27, 136, 239, 190, 3, 194, 25, 62, 176, 122, 178, 61, 239, 4, 48, 62, 133, 230, 155, 189, 212, 245, 143, 62, 74, 179, 229, 189, 168, 27, 40, 62, 193, 148, 45, 62, 217, 231, 66, 61, 123, 214, 246, 61, 238, 213, 181, 188, 179, 202, 9, 59, 227, 102, 136, 61, 176, 61, 52, 190, 170, 70, 68, 190, 73, 176, 186, 60, 121, 138, 78, 62, 167, 83, 174, 189, 254, 128, 61, 190, 189, 80, 177, 61, 116, 59, 35, 62, 90, 178, 226, 188, 245, 104, 215, 189, 83, 96, 182, 189, 177, 233, 7, 62, 57, 196, 242, 189, 135, 98, 134, 189, 99, 19, 173, 189, 71, 77, 203, 187, 226, 111, 253, 189, 63, 200, 82, 62, 43, 70, 187, 60, 127, 100, 207, 189, 150, 157, 2, 62, 127, 179, 77, 62, 127, 62, 71, 62, 186, 219, 128, 62, 188, 138, 157, 188, 167, 40, 35, 62, 37, 181, 165, 189, 179, 132, 32, 61, 166, 84, 52, 189, 183, 102, 71, 188, 171, 170, 73, 62, 0, 166, 35, 61, 185, 184, 109, 61, 94, 178, 44, 61, 46, 230, 159, 189, 150, 21, 216, 61, 129, 238, 126, 61, 152, 120, 143, 189, 6, 124, 96, 62, 224, 168, 50, 61, 40, 1, 200, 185, 203, 150, 3, 190, 210, 215, 81, 61, 243, 215, 137, 62, 99, 134, 20, 188, 162, 74, 252, 61, 65, 166, 12, 62, 250, 51, 184, 61, 153, 188, 83, 189, 84, 83, 177, 61, 126, 2, 137, 61, 242, 87, 46, 61, 148, 193, 192, 61, 215, 204, 34, 62, 43, 194, 36, 190, 143, 226, 223, 189, 6, 29, 61, 62, 144, 7, 129, 190, 5, 194, 116, 61, 180, 246, 136, 190, 102, 91, 81, 59, 217, 134, 208, 189, 9, 58, 64, 189, 138, 2, 105, 190, 234, 101, 195, 189, 28, 248, 177, 189, 242, 128, 6, 190, 120, 22, 26, 190, 59, 47, 201, 61, 74, 46, 40, 62, 200, 153, 109, 60, 212, 18, 198, 61, 177, 185, 97, 189, 236, 32, 89, 190, 83, 84, 13, 62, 39, 77, 240, 60, 31, 100, 219, 189, 69, 101, 33, 62, 15, 71, 140, 61, 80, 186, 179, 61, 154, 62, 199, 62, 187, 146, 96, 188, 123, 44, 110, 60, 82, 236, 184, 61, 86, 116, 114, 62, 228, 99, 131, 186, 188, 181, 38, 61, 102, 115, 58, 189, 92, 44, 108, 190, 112, 54, 184, 189, 64, 158, 6, 190, 232, 57, 203, 61, 4, 158, 238, 61, 236, 168, 142, 61, 113, 243, 159, 189, 96, 12, 50, 62, 196, 4, 247, 189, 84, 17, 187, 189, 237, 216, 59, 190, 41, 105, 38, 62, 196, 63, 129, 189, 49, 70, 206, 190, 204, 82, 129, 61, 34, 69, 66, 190, 153, 51, 80, 190, 26, 67, 52, 62, 48, 41, 91, 189, 136, 204, 59, 60, 24, 156, 95, 188, 54, 78, 122, 62, 175, 96, 61, 61, 89, 205, 53, 190, 60, 146, 52, 60, 177, 41, 145, 62, 79, 32, 166, 190, 62, 108, 220, 61, 64, 227, 230, 61, 106, 72, 17, 62, 32, 55, 131, 61, 87, 232, 128, 62, 52, 239, 57, 189, 59, 71, 136, 62, 199, 168, 180, 189, 246, 201, 198, 62, 208, 60, 245, 189, 130, 194, 63, 59, 213, 233, 4, 62, 246, 236, 149, 62, 142, 145, 73, 190, 142, 27, 44, 190, 152, 188, 71, 189, 107, 219, 21, 61, 114, 33, 121, 190, 12, 224, 4, 190, 47, 226, 170, 189, 51, 216, 226, 189, 67, 11, 254, 61, 233, 214, 84, 60, 204, 240, 50, 190, 107, 253, 237, 188, 141, 104, 239, 189, 238, 109, 9, 188, 107, 217, 23, 62, 147, 253, 216, 60, 111, 108, 174, 61, 76, 200, 150, 61, 76, 121, 147, 189, 108, 190, 38, 189, 171, 239, 19, 190, 16, 241, 1, 190, 167, 76, 248, 61, 32, 196, 80, 189, 40, 147, 53, 190, 53, 232, 214, 189, 181, 127, 31, 62, 99, 214, 191, 188, 202, 215, 88, 60, 217, 222, 193, 60, 248, 172, 29, 190, 45, 183, 74, 188, 33, 160, 139, 189, 109, 55, 185, 189, 88, 93, 252, 61, 217, 30, 156, 61, 15, 27, 0, 190, 180, 190, 143, 189, 134, 32, 185, 61, 31, 112, 177, 190, 170, 109, 193, 188, 56, 215, 7, 190, 99, 173, 0, 61, 187, 62, 125, 62, 52, 152, 8, 62, 11, 208, 41, 190, 210, 101, 41, 62, 90, 122, 53, 62, 27, 223, 204, 188, 102, 199, 210, 189, 11, 231, 200, 188, 108, 129, 44, 62, 89, 138, 245, 189, 29, 166, 207, 189, 114, 121, 89, 188, 34, 125, 72, 190, 12, 85, 28, 62, 118, 194, 40, 190, 19, 223, 35, 190, 138, 166, 254, 189, 4, 197, 6, 62, 158, 154, 89, 188, 70, 93, 85, 61, 89, 130, 149, 190, 83, 150, 99, 61, 243, 182, 142, 61, 237, 30, 209, 188, 237, 237, 83, 189, 25, 14, 173, 189, 120, 12, 222, 62, 183, 216, 79, 190, 116, 195, 52, 189, 89, 78, 8, 61, 2, 103, 170, 188, 47, 223, 120, 61, 157, 76, 1, 62, 59, 146, 48, 62, 133, 218, 206, 58, 206, 104, 253, 59, 30, 204, 6, 190, 145, 176, 198, 61, 109, 235, 4, 189, 92, 174, 2, 62, 51, 152, 3, 190, 87, 126, 110, 188, 170, 53, 4, 60, 21, 10, 17, 190, 255, 89, 141, 189, 108, 101, 144, 58, 155, 205, 5, 62, 48, 163, 26, 190, 163, 11, 168, 61, 217, 198, 14, 190, 228, 155, 98, 189, 54, 170, 240, 59, 198, 206, 72, 61, 140, 67, 40, 190, 212, 241, 252, 189, 95, 128, 182, 189, 112, 170, 92, 189, 254, 24, 185, 186, 10, 102, 62, 189, 47, 79, 196, 61, 166, 116, 31, 62, 236, 75, 6, 62, 207, 244, 221, 189, 18, 9, 129, 190, 93, 67, 16, 62, 54, 41, 155, 61, 147, 96, 4, 190, 28, 125, 58, 190, 210, 92, 79, 62, 240, 33, 209, 189, 198, 207, 165, 189, 232, 239, 240, 61, 102, 110, 129, 59, 228, 173, 10, 61, 220, 27, 17, 62, 49, 253, 9, 190, 61, 74, 49, 62, 8, 26, 217, 188, 165, 153, 197, 61, 81, 57, 96, 189, 33, 227, 48, 190, 166, 213, 63, 59, 39, 182, 233, 60, 111, 68, 25, 190, 91, 25, 169, 61, 242, 66, 189, 189, 184, 120, 93, 190, 249, 97, 50, 190, 185, 13, 20, 62, 122, 50, 36, 61, 43, 255, 235, 61, 72, 51, 0, 62, 221, 10, 7, 62, 11, 103, 163, 61, 66, 158, 201, 61, 171, 213, 190, 61, 97, 54, 94, 187, 64, 82, 62, 190, 9, 123, 65, 188, 35, 64, 176, 61, 214, 217, 127, 61, 247, 81, 57, 62, 206, 132, 240, 189, 70, 123, 63, 190, 133, 184, 31, 189, 122, 129, 144, 60, 125, 19, 210, 61, 215, 123, 11, 62, 36, 160, 221, 61, 169, 173, 175, 185, 113, 75, 149, 188, 154, 61, 139, 61, 131, 62, 36, 62, 29, 77, 102, 190, 83, 78, 77, 190, 234, 164, 250, 61, 199, 241, 48, 187, 200, 37, 108, 59, 62, 145, 226, 187, 218, 31, 138, 61, 102, 164, 148, 61, 203, 248, 163, 189, 81, 25, 83, 62, 62, 27, 132, 189, 109, 193, 2, 190, 89, 216, 5, 190, 181, 194, 173, 189, 222, 41, 198, 189, 80, 215, 146, 61, 230, 41, 28, 188, 129, 25, 213, 61, 35, 67, 210, 189, 112, 209, 158, 60, 239, 114, 191, 60, 101, 24, 40, 62, 193, 212, 40, 190, 238, 172, 230, 61, 63, 166, 32, 62, 230, 173, 15, 189, 84, 100, 97, 61, 28, 73, 137, 62, 139, 193, 217, 189, 56, 238, 109, 62, 219, 181, 20, 190, 118, 160, 245, 60, 117, 93, 210, 189, 137, 128, 3, 62, 170, 195, 128, 60, 248, 63, 102, 62, 197, 142, 164, 189, 239, 242, 238, 189, 7, 41, 156, 187, 171, 255, 192, 61, 212, 38, 147, 61, 55, 188, 194, 61, 161, 202, 71, 190, 29, 25, 188, 189, 98, 119, 60, 189, 130, 188, 123, 61, 205, 0, 8, 62, 100, 26, 102, 62, 12, 2, 57, 61, 59, 12, 231, 189, 105, 86, 34, 189, 133, 67, 11, 62, 33, 190, 111, 189, 21, 199, 17, 190, 242, 189, 137, 61, 110, 51, 131, 189, 154, 121, 187, 188, 128, 109, 13, 62, 43, 147, 141, 61, 117, 78, 102, 59, 210, 186, 68, 62, 246, 105, 142, 190, 43, 189, 39, 62, 236, 127, 129, 189, 232, 34, 111, 60, 70, 144, 157, 60, 125, 35, 148, 189, 16, 169, 59, 190, 8, 255, 17, 62, 27, 246, 46, 62, 106, 200, 233, 189, 56, 78, 250, 188, 61, 86, 115, 62, 189, 180, 46, 62, 154, 32, 62, 61, 247, 205, 28, 190, 179, 165, 1, 190, 84, 1, 174, 61, 139, 114, 41, 189, 209, 139, 42, 189, 123, 40, 170, 59, 75, 206, 143, 189, 212, 242, 118, 190, 72, 240, 63, 61, 61, 54, 173, 61, 185, 226, 108, 188, 223, 62, 20, 189, 14, 107, 242, 61, 31, 96, 180, 61, 156, 190, 145, 62, 60, 132, 253, 189, 18, 166, 102, 62, 107, 183, 133, 189, 19, 54, 62, 62, 128, 221, 88, 58, 71, 164, 39, 189, 199, 9, 61, 190, 205, 224, 153, 61, 114, 119, 122, 61, 211, 98, 75, 62, 25, 55, 57, 61, 200, 231, 208, 60, 210, 100, 158, 61, 35, 53, 173, 61, 104, 159, 78, 190, 74, 208, 76, 190, 141, 34, 18, 189, 216, 149, 127, 189, 33, 25, 101, 189, 29, 213, 238, 189, 175, 151, 89, 190, 107, 30, 22, 62, 149, 111, 245, 188, 28, 87, 172, 188, 71, 173, 28, 61, 75, 7, 45, 186, 76, 133, 104, 187, 63, 63, 163, 62, 7, 31, 34, 191, 222, 67, 209, 61, 23, 225, 126, 62, 61, 33, 1, 62, 145, 27, 33, 62, 45, 28, 178, 61, 242, 111, 223, 188, 232, 118, 32, 62, 216, 78, 215, 61, 110, 149, 192, 62, 190, 90, 165, 189, 49, 129, 56, 189, 88, 110, 189, 189, 196, 82, 182, 61, 28, 96, 137, 61, 22, 40, 102, 189, 13, 162, 41, 62, 230, 27, 50, 189, 5, 181, 93, 190, 47, 47, 114, 190, 216, 109, 203, 60, 155, 69, 140, 61, 14, 180, 161, 189, 11, 19, 175, 189, 178, 235, 48, 190, 227, 133, 136, 189, 119, 113, 97, 61, 173, 82, 20, 62, 51, 67, 209, 188, 190, 44, 250, 189, 252, 181, 33, 62, 134, 248, 31, 190, 7, 131, 191, 189, 162, 129, 215, 189, 62, 245, 31, 190, 172, 205, 170, 61, 162, 232, 29, 190, 87, 126, 185, 61, 142, 189, 11, 190, 104, 165, 55, 188, 93, 5, 179, 60, 23, 227, 234, 189, 146, 164, 164, 61, 224, 151, 23, 62, 174, 34, 5, 190, 123, 37, 25, 62, 149, 100, 43, 190, 54, 32, 34, 62, 189, 163, 16, 62, 224, 238, 200, 189, 193, 246, 96, 187, 45, 141, 177, 188, 190, 29, 227, 189, 150, 72, 19, 59, 78, 191, 142, 189, 89, 116, 101, 190, 144, 172, 89, 189, 85, 202, 207, 61, 110, 183, 226, 61, 232, 103, 13, 62, 160, 125, 39, 62, 69, 4, 128, 189, 223, 15, 234, 189, 25, 213, 44, 190, 43, 78, 96, 62, 34, 199, 215, 186, 231, 134, 214, 60, 24, 216, 37, 189, 89, 188, 180, 188, 47, 178, 164, 189, 110, 60, 31, 187, 133, 143, 92, 189, 172, 145, 231, 61, 10, 34, 102, 190, 77, 130, 48, 62, 91, 212, 95, 62, 140, 97, 124, 190, 226, 163, 7, 190, 160, 47, 138, 61, 81, 61, 184, 189, 151, 203, 129, 61, 50, 140, 61, 190, 114, 15, 58, 188, 19, 141, 2, 62, 1, 156, 102, 190, 169, 23, 6, 61, 245, 47, 207, 189, 113, 115, 230, 60, 1, 4, 28, 189, 205, 51, 38, 62, 3, 87, 200, 189, 204, 85, 49, 190, 253, 103, 18, 62, 108, 100, 129, 190, 186, 173, 180, 60, 217, 24, 134, 190, 3, 12, 126, 190, 79, 235, 31, 190, 152, 247, 216, 189, 29, 26, 121, 61, 64, 175, 173, 188, 50, 247, 1, 61, 192, 198, 116, 62, 39, 172, 133, 189, 72, 49, 130, 62, 244, 78, 221, 189, 67, 214, 17, 62, 149, 13, 118, 60, 99, 179, 114, 61, 182, 62, 160, 189, 100, 161, 34, 188, 153, 214, 16, 190, 179, 59, 227, 60, 140, 15, 168, 60, 116, 28, 150, 189, 197, 117, 94, 62, 35, 0, 90, 190, 107, 33, 165, 190, 3, 232, 92, 190, 115, 165, 4, 62, 110, 34, 187, 60, 181, 29, 51, 61, 236, 125, 36, 190, 81, 153, 235, 61, 230, 104, 129, 62, 167, 81, 145, 190, 232, 41, 98, 62, 82, 188, 199, 62, 39, 226, 4, 190, 40, 94, 26, 62, 94, 154, 142, 61, 155, 147, 212, 188, 249, 4, 102, 62, 212, 44, 21, 61, 243, 60, 20, 189, 124, 219, 1, 61, 229, 86, 254, 61, 104, 210, 75, 62, 86, 91, 52, 190, 91, 181, 25, 190, 145, 131, 31, 61, 142, 78, 227, 60, 73, 33, 42, 189, 95, 2, 178, 189, 251, 93, 217, 189, 100, 217, 103, 62, 215, 82, 103, 190, 93, 32, 4, 190, 149, 235, 2, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 178, 239, 189, 144, 208, 0, 190, 113, 193, 16, 190, 142, 184, 217, 61, 56, 7, 149, 60, 64, 217, 176, 189, 158, 91, 162, 61, 79, 139, 67, 62, 230, 239, 9, 60, 1, 205, 63, 190, 55, 214, 227, 187, 12, 143, 31, 62, 61, 219, 236, 61, 193, 95, 50, 61, 139, 116, 42, 62, 228, 38, 109, 189, 220, 139, 73, 62, 243, 255, 70, 61, 75, 29, 33, 62, 171, 34, 26, 190, 73, 68, 204, 61, 184, 115, 244, 189, 169, 88, 227, 189, 228, 123, 158, 189, 27, 173, 136, 62, 39, 179, 185, 61, 46, 124, 81, 61, 177, 133, 28, 61, 148, 40, 198, 189, 164, 46, 136, 61, 74, 26, 55, 61, 253, 103, 151, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 85, 36, 190, 109, 227, 66, 62, 32, 122, 34, 189, 179, 157, 134, 190, 47, 7, 139, 61, 105, 120, 7, 62, 182, 205, 202, 189, 198, 21, 79, 190, 166, 147, 140, 190, 23, 180, 245, 189, 198, 45, 121, 62, 68, 34, 82, 189, 59, 106, 74, 62, 230, 234, 193, 62, 49, 83, 110, 190, 250, 223, 77, 190, 196, 178, 252, 61, 135, 203, 66, 190, 172, 223, 190, 190, 48, 168, 2, 62, 160, 190, 163, 62, 225, 62, 211, 189, 160, 87, 60, 190, 177, 21, 28, 189, 84, 227, 212, 189, 41, 207, 58, 62, 14, 117, 41, 190, 71, 218, 130, 190, 122, 251, 27, 62, 150, 255, 210, 61, 118, 182, 120, 62, 241, 124, 120, 190, 167, 44, 163, 61, 43, 244, 134, 61, 249, 111, 240, 61, 109, 126, 145, 190, 123, 163, 35, 190, 114, 52, 13, 62, 8, 222, 57, 190, 219, 45, 142, 189, 221, 232, 51, 62, 64, 51, 9, 61, 102, 26, 242, 189, 166, 36, 179, 189, 154, 96, 212, 61, 64, 236, 246, 189, 192, 250, 209, 189, 247, 238, 71, 62, 255, 71, 204, 189, 198, 106, 212, 61, 236, 10, 88, 60, 24, 82, 37, 190, 216, 222, 221, 188, 97, 152, 137, 189, 49, 164, 99, 61, 20, 45, 127, 189, 110, 148, 134, 190, 213, 142, 60, 61, 99, 31, 37, 62, 142, 172, 19, 189, 108, 46, 15, 189, 61, 131, 134, 61, 136, 210, 144, 189, 203, 99, 173, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 215, 214, 189, 130, 192, 204, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {196, 17, 232, 191, 2, 251, 194, 62, 232, 208, 255, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {207, 5, 27, 191, 249, 216, 150, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0039/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}