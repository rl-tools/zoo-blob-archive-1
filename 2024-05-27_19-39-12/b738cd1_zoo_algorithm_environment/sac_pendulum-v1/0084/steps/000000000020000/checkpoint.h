// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 48, 112, 191, 66, 133, 170, 62, 213, 160, 16, 63, 118, 53, 215, 62, 31, 100, 165, 63, 13, 133, 156, 62, 54, 212, 98, 61, 127, 114, 191, 190, 208, 10, 196, 190, 174, 40, 66, 63, 116, 2, 56, 191, 231, 140, 41, 191, 131, 49, 59, 63, 23, 131, 8, 63, 233, 142, 87, 62, 236, 14, 77, 62, 170, 48, 198, 191, 153, 148, 207, 190, 239, 12, 21, 63, 13, 47, 128, 63, 165, 124, 78, 189, 43, 193, 154, 190, 78, 113, 255, 189, 164, 66, 144, 62, 94, 202, 178, 190, 251, 124, 90, 63, 1, 90, 199, 62, 237, 252, 60, 63, 38, 105, 117, 191, 55, 219, 138, 190, 146, 252, 214, 61, 71, 71, 142, 61, 66, 9, 218, 189, 162, 252, 110, 190, 210, 64, 152, 190, 225, 65, 237, 190, 21, 29, 2, 191, 193, 60, 96, 191, 20, 94, 122, 62, 103, 135, 243, 189, 24, 132, 61, 191, 141, 219, 211, 190, 28, 252, 40, 189, 237, 214, 166, 191, 199, 136, 157, 190, 128, 161, 18, 63, 160, 252, 147, 62, 253, 224, 19, 191, 93, 99, 22, 63, 216, 119, 110, 63, 144, 66, 117, 62, 111, 14, 8, 191, 171, 155, 73, 63, 102, 63, 229, 61, 195, 254, 202, 62, 235, 12, 42, 191, 191, 78, 182, 62, 66, 117, 17, 191, 139, 179, 154, 62, 13, 35, 34, 61, 236, 94, 6, 62, 64, 116, 230, 189, 20, 215, 158, 186, 131, 49, 80, 190, 71, 138, 123, 63, 66, 20, 122, 62, 205, 226, 191, 62, 234, 206, 28, 61, 86, 45, 231, 190, 2, 8, 132, 60, 45, 82, 54, 63, 149, 204, 243, 61, 50, 222, 197, 190, 56, 110, 50, 62, 213, 237, 146, 190, 21, 36, 19, 63, 228, 104, 49, 191, 73, 43, 243, 190, 52, 148, 132, 190, 170, 234, 177, 190, 244, 6, 206, 62, 212, 225, 135, 189, 235, 10, 4, 191, 91, 151, 142, 62, 112, 37, 145, 189, 32, 54, 119, 191, 94, 248, 157, 62, 29, 16, 114, 191, 112, 43, 84, 59, 183, 41, 251, 190, 71, 55, 174, 189, 218, 80, 142, 191, 164, 153, 117, 190, 156, 151, 249, 188, 130, 35, 89, 191, 214, 40, 211, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 66, 13, 191, 30, 46, 56, 190, 23, 123, 45, 187, 232, 71, 175, 61, 66, 103, 60, 191, 106, 55, 149, 190, 129, 67, 135, 62, 58, 215, 58, 190, 91, 84, 2, 190, 18, 16, 142, 62, 196, 190, 180, 62, 13, 57, 139, 190, 63, 90, 2, 190, 87, 75, 37, 191, 164, 74, 213, 190, 125, 119, 47, 62, 173, 57, 219, 62, 88, 210, 255, 62, 133, 104, 133, 62, 203, 210, 63, 63, 203, 171, 120, 190, 86, 181, 245, 62, 78, 196, 203, 60, 153, 175, 2, 62, 155, 147, 72, 191, 99, 183, 26, 61, 14, 150, 12, 191, 70, 227, 62, 190, 194, 215, 56, 190, 176, 233, 155, 62, 187, 148, 164, 190, 172, 217, 166, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 83, 16, 188, 224, 119, 32, 190, 166, 103, 87, 61, 243, 117, 131, 62, 230, 65, 10, 63, 125, 14, 41, 62, 247, 177, 130, 62, 132, 106, 16, 190, 233, 248, 209, 189, 254, 23, 100, 62, 166, 154, 6, 62, 95, 153, 78, 190, 203, 167, 218, 190, 109, 34, 206, 189, 206, 239, 85, 190, 4, 159, 4, 61, 218, 181, 189, 189, 175, 70, 23, 191, 224, 162, 114, 190, 139, 43, 237, 190, 98, 223, 205, 186, 232, 158, 23, 191, 122, 162, 182, 61, 190, 238, 14, 188, 188, 236, 161, 62, 100, 220, 144, 60, 87, 209, 56, 190, 233, 101, 57, 61, 112, 234, 172, 189, 23, 173, 20, 189, 156, 82, 158, 190, 123, 129, 137, 190, 156, 209, 19, 190, 108, 208, 165, 189, 226, 216, 1, 189, 135, 248, 201, 60, 76, 94, 179, 189, 135, 7, 27, 190, 216, 38, 135, 188, 190, 252, 5, 62, 76, 175, 252, 189, 22, 28, 198, 189, 113, 218, 178, 61, 152, 184, 207, 61, 82, 100, 38, 190, 12, 137, 33, 190, 67, 212, 100, 59, 31, 192, 8, 189, 160, 235, 251, 187, 52, 160, 145, 61, 94, 222, 97, 61, 208, 190, 230, 188, 83, 120, 188, 61, 105, 212, 255, 189, 242, 110, 101, 189, 164, 138, 199, 189, 131, 34, 192, 61, 150, 118, 214, 189, 26, 74, 173, 189, 3, 182, 236, 189, 120, 70, 32, 190, 190, 193, 50, 190, 24, 231, 40, 190, 107, 138, 40, 187, 10, 209, 12, 189, 58, 41, 137, 189, 109, 1, 27, 62, 76, 114, 18, 190, 191, 24, 183, 189, 151, 153, 226, 61, 158, 114, 148, 60, 61, 184, 69, 61, 198, 34, 101, 61, 121, 106, 154, 61, 166, 151, 51, 62, 203, 111, 79, 61, 16, 211, 22, 62, 78, 18, 63, 190, 4, 45, 48, 61, 54, 236, 33, 191, 137, 131, 16, 190, 25, 223, 108, 62, 105, 111, 152, 190, 226, 209, 191, 62, 101, 144, 238, 61, 230, 216, 41, 189, 199, 13, 0, 190, 77, 200, 72, 190, 94, 146, 129, 61, 73, 146, 36, 190, 109, 94, 39, 189, 124, 167, 1, 190, 215, 143, 162, 189, 97, 56, 174, 62, 20, 153, 122, 62, 25, 7, 120, 62, 125, 47, 96, 62, 110, 88, 72, 191, 228, 220, 120, 60, 218, 137, 206, 62, 46, 80, 46, 191, 38, 193, 1, 62, 114, 17, 178, 61, 110, 176, 71, 190, 181, 241, 142, 62, 117, 19, 200, 61, 52, 110, 218, 61, 225, 72, 41, 190, 85, 238, 21, 63, 217, 0, 206, 61, 153, 97, 73, 190, 240, 8, 55, 61, 101, 76, 171, 190, 116, 108, 249, 189, 59, 73, 37, 63, 31, 48, 160, 190, 38, 13, 215, 60, 12, 230, 192, 190, 100, 229, 54, 190, 156, 78, 238, 189, 60, 178, 136, 62, 24, 215, 230, 62, 84, 20, 155, 190, 236, 97, 211, 62, 177, 69, 159, 190, 118, 37, 207, 189, 83, 80, 146, 190, 62, 65, 41, 191, 38, 220, 240, 188, 156, 212, 84, 62, 106, 132, 191, 62, 182, 255, 97, 190, 185, 153, 95, 61, 40, 160, 165, 61, 111, 21, 101, 62, 54, 250, 137, 61, 162, 190, 104, 61, 33, 33, 31, 191, 88, 0, 134, 190, 24, 122, 160, 61, 250, 52, 66, 62, 151, 62, 37, 61, 91, 133, 132, 190, 175, 249, 128, 191, 6, 213, 160, 62, 192, 231, 1, 63, 110, 15, 129, 62, 222, 173, 41, 62, 133, 102, 33, 62, 225, 221, 64, 62, 159, 131, 31, 191, 165, 138, 129, 62, 135, 34, 85, 190, 253, 82, 113, 190, 252, 106, 13, 189, 74, 252, 114, 189, 12, 173, 63, 191, 173, 152, 17, 188, 89, 219, 111, 190, 219, 248, 189, 191, 200, 149, 148, 61, 71, 194, 232, 190, 247, 116, 228, 60, 111, 163, 165, 62, 9, 186, 45, 191, 87, 250, 38, 190, 173, 5, 5, 59, 102, 119, 227, 60, 64, 42, 99, 62, 216, 252, 19, 62, 236, 233, 242, 61, 24, 202, 141, 188, 181, 184, 245, 60, 108, 199, 32, 190, 50, 215, 24, 190, 214, 225, 13, 62, 71, 194, 189, 62, 16, 149, 111, 190, 218, 179, 45, 189, 122, 112, 129, 61, 13, 209, 41, 190, 191, 30, 221, 61, 83, 94, 39, 190, 224, 2, 244, 61, 43, 171, 144, 189, 62, 109, 83, 61, 146, 83, 147, 190, 227, 166, 138, 189, 110, 192, 131, 61, 223, 103, 128, 188, 226, 14, 154, 189, 8, 83, 170, 189, 132, 244, 11, 62, 112, 160, 157, 60, 238, 244, 184, 61, 102, 225, 35, 191, 52, 50, 80, 61, 182, 183, 100, 191, 163, 182, 234, 62, 98, 223, 138, 60, 48, 140, 23, 189, 191, 136, 130, 61, 250, 152, 113, 62, 191, 25, 75, 62, 250, 228, 183, 189, 135, 222, 56, 191, 12, 164, 227, 190, 224, 128, 125, 62, 164, 225, 140, 62, 213, 68, 46, 62, 59, 81, 179, 190, 66, 18, 43, 62, 241, 184, 28, 62, 192, 56, 23, 62, 3, 95, 83, 61, 67, 223, 5, 62, 56, 44, 2, 191, 171, 24, 12, 191, 70, 210, 177, 61, 175, 150, 177, 189, 31, 24, 255, 62, 115, 12, 7, 63, 184, 25, 231, 60, 205, 147, 253, 60, 159, 54, 68, 191, 209, 118, 29, 191, 82, 106, 28, 188, 192, 97, 142, 62, 233, 50, 226, 190, 79, 19, 17, 190, 31, 240, 72, 62, 121, 38, 204, 190, 77, 226, 65, 189, 87, 192, 23, 62, 23, 137, 101, 62, 77, 185, 245, 188, 229, 0, 78, 62, 37, 67, 38, 62, 124, 59, 34, 190, 202, 181, 211, 189, 118, 68, 17, 190, 157, 116, 133, 191, 118, 216, 242, 62, 154, 210, 138, 189, 92, 160, 170, 189, 163, 165, 80, 191, 242, 198, 243, 61, 90, 130, 77, 61, 230, 134, 130, 62, 179, 109, 43, 62, 156, 25, 7, 191, 33, 52, 217, 62, 140, 27, 135, 61, 253, 92, 1, 189, 67, 12, 10, 190, 113, 249, 123, 190, 202, 6, 137, 61, 164, 151, 24, 61, 162, 214, 68, 190, 114, 9, 176, 60, 154, 178, 4, 189, 25, 28, 223, 189, 137, 116, 49, 190, 154, 195, 35, 62, 185, 84, 121, 189, 186, 147, 244, 190, 183, 198, 14, 190, 50, 135, 135, 61, 174, 109, 89, 62, 180, 153, 217, 189, 125, 214, 29, 61, 197, 156, 209, 189, 31, 123, 148, 189, 101, 75, 224, 60, 21, 21, 78, 62, 91, 178, 15, 190, 233, 218, 34, 62, 109, 175, 53, 61, 78, 87, 199, 60, 80, 217, 76, 190, 8, 133, 82, 188, 104, 74, 63, 189, 124, 39, 198, 187, 72, 123, 126, 60, 132, 180, 41, 62, 165, 14, 84, 62, 248, 43, 184, 189, 174, 53, 231, 61, 7, 107, 249, 59, 28, 19, 1, 62, 24, 211, 170, 59, 11, 63, 89, 188, 42, 63, 48, 63, 82, 95, 242, 189, 102, 38, 191, 62, 236, 199, 125, 62, 243, 161, 96, 189, 17, 186, 144, 190, 102, 106, 157, 61, 231, 42, 148, 61, 67, 175, 119, 191, 216, 236, 144, 61, 123, 88, 143, 188, 167, 190, 138, 62, 59, 21, 186, 189, 74, 29, 215, 188, 162, 65, 229, 190, 192, 252, 83, 190, 64, 245, 165, 61, 141, 150, 192, 190, 46, 105, 126, 62, 199, 168, 241, 189, 45, 22, 194, 62, 115, 251, 32, 62, 48, 192, 9, 62, 1, 131, 50, 191, 119, 135, 136, 190, 57, 121, 14, 190, 152, 139, 79, 189, 39, 30, 37, 61, 92, 250, 8, 190, 213, 185, 93, 190, 214, 13, 134, 189, 186, 238, 104, 61, 93, 228, 134, 190, 101, 224, 119, 190, 27, 206, 77, 60, 249, 133, 152, 189, 158, 129, 148, 61, 230, 190, 146, 62, 152, 57, 68, 62, 215, 243, 174, 61, 239, 248, 3, 62, 61, 211, 121, 188, 253, 254, 140, 62, 71, 160, 43, 62, 153, 99, 167, 62, 59, 32, 243, 189, 250, 74, 148, 189, 37, 136, 145, 62, 83, 183, 11, 190, 114, 58, 145, 62, 119, 32, 185, 61, 53, 87, 141, 61, 179, 142, 182, 189, 242, 8, 69, 190, 182, 250, 71, 189, 192, 98, 94, 189, 146, 210, 141, 62, 105, 64, 246, 61, 240, 126, 19, 62, 245, 90, 143, 61, 19, 25, 10, 191, 251, 208, 36, 191, 39, 146, 213, 60, 201, 67, 44, 61, 136, 9, 153, 191, 143, 233, 140, 60, 187, 146, 15, 62, 127, 3, 149, 190, 254, 201, 199, 190, 47, 136, 57, 62, 65, 157, 170, 189, 42, 50, 231, 61, 161, 95, 91, 189, 173, 240, 217, 189, 59, 134, 224, 189, 139, 126, 27, 62, 141, 141, 157, 62, 187, 224, 131, 191, 190, 144, 134, 62, 159, 176, 160, 190, 32, 90, 229, 189, 73, 77, 239, 60, 143, 108, 28, 62, 87, 92, 40, 62, 35, 19, 43, 60, 48, 17, 23, 62, 17, 27, 215, 190, 85, 101, 223, 189, 249, 191, 186, 62, 0, 176, 81, 190, 42, 128, 184, 61, 35, 233, 96, 61, 118, 97, 235, 190, 201, 191, 50, 62, 234, 9, 77, 62, 22, 72, 163, 188, 72, 232, 55, 190, 163, 121, 44, 189, 49, 179, 49, 187, 237, 213, 36, 188, 171, 139, 100, 190, 37, 126, 0, 189, 104, 123, 39, 62, 187, 27, 163, 62, 228, 35, 6, 191, 72, 81, 71, 61, 211, 218, 119, 62, 53, 248, 244, 189, 171, 241, 190, 62, 239, 226, 132, 62, 74, 186, 177, 190, 96, 247, 186, 61, 235, 117, 246, 61, 219, 78, 177, 62, 74, 234, 186, 189, 41, 74, 38, 190, 43, 220, 148, 190, 13, 14, 142, 190, 4, 148, 128, 190, 97, 62, 1, 191, 75, 141, 255, 61, 183, 11, 110, 62, 41, 243, 185, 62, 61, 206, 185, 62, 121, 241, 60, 191, 61, 205, 124, 191, 89, 46, 2, 190, 85, 168, 157, 62, 63, 180, 38, 191, 131, 183, 61, 189, 81, 154, 77, 62, 99, 125, 176, 190, 88, 249, 78, 61, 90, 155, 34, 62, 8, 56, 27, 62, 244, 28, 37, 190, 72, 169, 235, 62, 222, 191, 14, 189, 126, 125, 214, 190, 5, 207, 101, 60, 4, 52, 57, 190, 142, 9, 74, 191, 131, 218, 26, 63, 60, 223, 74, 190, 101, 110, 161, 61, 179, 200, 47, 191, 25, 220, 252, 60, 170, 33, 31, 189, 239, 150, 25, 62, 19, 16, 156, 62, 115, 41, 108, 190, 186, 38, 182, 62, 3, 10, 157, 61, 163, 14, 50, 190, 49, 21, 155, 190, 48, 136, 136, 190, 119, 30, 15, 188, 234, 72, 230, 61, 129, 165, 129, 189, 84, 11, 220, 189, 27, 87, 14, 62, 250, 89, 174, 61, 139, 232, 65, 190, 100, 7, 38, 190, 46, 15, 79, 61, 65, 69, 191, 61, 202, 3, 200, 188, 28, 131, 41, 190, 182, 160, 12, 190, 7, 18, 183, 189, 207, 13, 2, 190, 31, 245, 44, 62, 170, 167, 42, 61, 16, 153, 95, 189, 12, 144, 116, 188, 82, 35, 18, 189, 59, 52, 35, 190, 184, 205, 70, 190, 79, 43, 180, 189, 31, 148, 100, 189, 220, 94, 245, 189, 91, 21, 38, 190, 172, 216, 63, 61, 104, 60, 68, 190, 189, 60, 220, 61, 94, 140, 216, 189, 193, 100, 29, 190, 213, 187, 205, 61, 127, 23, 114, 189, 70, 156, 117, 190, 43, 209, 67, 189, 18, 118, 11, 62, 66, 194, 219, 190, 236, 154, 168, 190, 126, 177, 129, 62, 201, 59, 192, 189, 91, 56, 197, 61, 88, 77, 148, 61, 43, 249, 142, 62, 115, 154, 206, 189, 135, 237, 228, 189, 30, 247, 181, 61, 236, 157, 239, 189, 199, 213, 43, 62, 138, 19, 207, 62, 220, 93, 163, 190, 42, 105, 15, 61, 12, 224, 88, 190, 7, 233, 173, 61, 161, 167, 46, 61, 183, 39, 65, 189, 164, 230, 204, 61, 121, 165, 82, 61, 56, 238, 46, 62, 198, 126, 207, 60, 179, 42, 88, 190, 198, 70, 95, 62, 60, 148, 8, 190, 175, 108, 55, 189, 146, 25, 193, 189, 10, 169, 205, 61, 173, 21, 242, 60, 160, 46, 242, 61, 128, 71, 30, 62, 207, 77, 207, 189, 198, 130, 103, 61, 11, 132, 160, 189, 18, 40, 230, 61, 232, 167, 226, 189, 216, 86, 39, 190, 70, 31, 18, 189, 61, 7, 67, 61, 207, 23, 3, 62, 13, 114, 148, 189, 206, 195, 246, 61, 49, 195, 137, 189, 238, 229, 124, 61, 114, 21, 28, 190, 73, 130, 234, 189, 43, 82, 6, 61, 121, 170, 216, 61, 221, 66, 2, 60, 43, 45, 210, 60, 19, 203, 49, 190, 222, 240, 114, 61, 204, 55, 44, 190, 130, 96, 10, 188, 59, 208, 85, 190, 13, 5, 9, 61, 79, 30, 4, 190, 173, 159, 2, 190, 64, 46, 23, 60, 65, 72, 254, 59, 161, 209, 17, 62, 70, 132, 120, 62, 179, 159, 98, 189, 155, 49, 158, 61, 41, 51, 182, 189, 34, 204, 66, 190, 162, 176, 206, 61, 209, 146, 149, 190, 166, 66, 187, 61, 90, 10, 74, 62, 87, 64, 84, 62, 149, 86, 209, 190, 229, 179, 209, 188, 68, 138, 225, 59, 4, 44, 42, 61, 15, 131, 70, 62, 164, 87, 109, 62, 54, 180, 29, 191, 223, 157, 94, 62, 25, 173, 250, 188, 157, 254, 246, 61, 101, 78, 203, 188, 213, 244, 208, 61, 197, 63, 3, 190, 10, 182, 154, 190, 248, 28, 188, 61, 211, 98, 0, 190, 157, 119, 198, 62, 21, 46, 183, 62, 250, 242, 77, 62, 129, 97, 111, 62, 47, 220, 97, 189, 186, 94, 50, 190, 183, 9, 184, 189, 143, 2, 150, 188, 187, 71, 172, 190, 51, 32, 3, 61, 6, 88, 77, 188, 84, 18, 180, 189, 20, 14, 228, 186, 219, 104, 8, 62, 95, 171, 75, 62, 59, 249, 16, 62, 49, 32, 45, 189, 85, 0, 98, 61, 252, 220, 243, 188, 73, 53, 223, 189, 235, 161, 157, 62, 180, 18, 81, 61, 234, 233, 29, 190, 8, 48, 154, 62, 19, 64, 242, 61, 69, 161, 182, 62, 64, 156, 30, 61, 128, 83, 171, 189, 99, 138, 126, 190, 227, 57, 172, 189, 187, 224, 100, 189, 46, 153, 134, 189, 179, 76, 194, 62, 167, 234, 163, 61, 123, 175, 202, 62, 46, 74, 37, 62, 230, 151, 111, 190, 72, 23, 154, 190, 224, 213, 22, 190, 113, 47, 201, 190, 215, 132, 107, 191, 203, 198, 96, 191, 214, 7, 93, 62, 126, 141, 83, 190, 183, 55, 221, 61, 243, 226, 186, 190, 189, 102, 9, 187, 75, 198, 61, 190, 23, 100, 165, 62, 186, 233, 255, 190, 217, 210, 106, 191, 200, 80, 6, 191, 19, 120, 66, 189, 200, 194, 99, 62, 249, 230, 42, 62, 68, 61, 210, 62, 182, 181, 22, 188, 135, 107, 181, 62, 75, 75, 130, 191, 152, 173, 69, 60, 233, 206, 168, 62, 148, 83, 193, 190, 182, 234, 254, 189, 70, 205, 94, 62, 52, 181, 130, 190, 121, 137, 212, 60, 202, 113, 43, 191, 80, 112, 251, 191, 172, 1, 101, 189, 2, 55, 12, 190, 79, 50, 81, 190, 204, 184, 32, 190, 140, 4, 153, 189, 236, 125, 248, 189, 197, 57, 161, 188, 178, 65, 32, 189, 23, 115, 42, 188, 234, 206, 221, 59, 4, 22, 254, 59, 105, 234, 160, 189, 145, 214, 33, 189, 239, 208, 189, 189, 84, 30, 179, 60, 208, 29, 178, 61, 210, 95, 169, 61, 160, 8, 50, 190, 73, 220, 41, 190, 202, 22, 60, 187, 82, 220, 12, 62, 72, 247, 9, 60, 180, 13, 13, 190, 34, 142, 28, 60, 36, 201, 3, 62, 34, 123, 175, 60, 42, 119, 19, 190, 11, 13, 242, 189, 30, 221, 13, 190, 255, 162, 165, 61, 172, 61, 237, 189, 205, 61, 75, 189, 10, 222, 152, 189, 57, 58, 24, 191, 248, 88, 46, 56, 48, 178, 156, 62, 186, 70, 133, 191, 247, 145, 164, 190, 14, 186, 137, 187, 85, 116, 107, 190, 152, 126, 152, 61, 99, 247, 236, 60, 190, 210, 144, 61, 127, 21, 7, 190, 38, 34, 63, 62, 130, 46, 238, 189, 165, 48, 66, 191, 22, 134, 38, 191, 153, 215, 42, 190, 74, 75, 162, 61, 88, 80, 12, 62, 65, 44, 235, 61, 35, 143, 239, 189, 3, 194, 211, 188, 68, 115, 4, 191, 136, 122, 137, 190, 226, 136, 244, 61, 181, 170, 5, 63, 118, 168, 14, 190, 96, 3, 103, 62, 198, 50, 149, 190, 35, 200, 66, 62, 37, 239, 59, 191, 64, 79, 220, 191, 136, 5, 77, 190, 208, 249, 52, 191, 168, 55, 127, 190, 71, 241, 168, 189, 168, 153, 27, 191, 159, 202, 74, 191, 212, 11, 167, 188, 192, 227, 255, 189, 26, 144, 217, 61, 197, 188, 243, 190, 237, 61, 202, 60, 26, 210, 211, 61, 68, 39, 16, 63, 239, 36, 214, 190, 156, 162, 98, 191, 249, 42, 224, 61, 102, 129, 19, 190, 5, 113, 167, 189, 39, 30, 241, 62, 12, 164, 84, 62, 242, 249, 24, 62, 64, 166, 51, 61, 54, 171, 214, 61, 206, 206, 107, 61, 184, 162, 8, 63, 226, 48, 198, 189, 252, 121, 157, 190, 70, 72, 217, 62, 170, 62, 148, 189, 104, 45, 136, 62, 63, 216, 52, 191, 179, 133, 32, 191, 178, 155, 7, 191, 248, 40, 238, 190, 75, 61, 180, 60, 63, 81, 176, 62, 14, 131, 174, 190, 191, 40, 48, 62, 198, 179, 20, 61, 40, 84, 197, 189, 177, 72, 225, 188, 2, 121, 141, 62, 210, 109, 181, 189, 130, 47, 89, 190, 16, 52, 183, 60, 194, 120, 83, 189, 212, 174, 199, 188, 54, 236, 167, 188, 14, 211, 137, 189, 249, 122, 102, 191, 22, 47, 220, 62, 161, 89, 4, 190, 150, 174, 197, 189, 101, 25, 118, 191, 85, 224, 133, 60, 234, 237, 77, 61, 74, 163, 233, 61, 201, 254, 187, 62, 188, 88, 164, 190, 82, 219, 69, 62, 76, 3, 77, 189, 96, 162, 66, 189, 32, 48, 228, 189, 234, 49, 181, 189, 103, 61, 181, 190, 182, 149, 5, 62, 113, 208, 3, 190, 174, 59, 56, 189, 167, 110, 210, 189, 119, 164, 218, 62, 229, 122, 213, 190, 241, 69, 205, 61, 162, 117, 135, 191, 80, 244, 69, 61, 143, 122, 2, 190, 38, 130, 61, 62, 17, 181, 223, 189, 253, 212, 147, 62, 223, 88, 227, 62, 35, 50, 100, 189, 140, 128, 231, 62, 185, 186, 215, 190, 204, 63, 166, 62, 200, 227, 168, 190, 43, 95, 6, 190, 190, 232, 124, 62, 112, 245, 218, 61, 68, 55, 189, 62, 134, 120, 51, 62, 243, 172, 200, 60, 203, 242, 100, 190, 216, 23, 205, 61, 252, 148, 163, 62, 85, 2, 154, 61, 2, 148, 73, 62, 162, 139, 29, 62, 84, 76, 129, 190, 138, 146, 59, 62, 252, 49, 201, 61, 127, 241, 11, 190, 82, 119, 163, 190, 221, 180, 157, 189, 189, 47, 197, 188, 104, 220, 247, 189, 133, 165, 119, 188, 153, 89, 119, 62, 212, 98, 97, 61, 127, 199, 135, 62, 251, 134, 156, 190, 255, 87, 49, 189, 81, 26, 238, 61, 177, 101, 152, 58, 106, 34, 187, 62, 218, 94, 18, 63, 183, 222, 13, 191, 84, 230, 138, 62, 21, 255, 215, 189, 196, 254, 247, 62, 55, 176, 35, 62, 28, 68, 155, 60, 113, 123, 232, 190, 17, 93, 230, 189, 30, 28, 160, 190, 115, 106, 25, 191, 153, 167, 161, 190, 254, 214, 80, 62, 81, 239, 215, 62, 13, 186, 84, 62, 135, 26, 243, 189, 220, 134, 150, 190, 111, 143, 2, 190, 53, 152, 114, 191, 103, 109, 246, 190, 110, 222, 36, 190, 173, 255, 175, 190, 90, 120, 149, 61, 145, 211, 245, 189, 206, 135, 141, 58, 182, 209, 88, 62, 94, 89, 95, 190, 253, 194, 131, 62, 154, 255, 31, 191, 75, 170, 60, 190, 2, 168, 8, 190, 60, 126, 208, 189, 151, 192, 34, 62, 203, 231, 36, 62, 186, 217, 228, 62, 72, 99, 31, 190, 166, 85, 169, 189, 214, 249, 58, 190, 46, 227, 167, 190, 79, 74, 223, 190, 228, 45, 102, 191, 249, 14, 33, 190, 38, 134, 62, 62, 176, 209, 163, 62, 104, 248, 190, 62, 126, 199, 193, 190, 82, 87, 244, 190, 124, 59, 174, 60, 235, 122, 81, 62, 229, 197, 44, 60, 18, 201, 129, 190, 21, 104, 2, 189, 215, 239, 106, 191, 161, 151, 205, 62, 245, 31, 20, 190, 88, 253, 163, 190, 87, 162, 27, 61, 246, 118, 6, 62, 4, 46, 76, 62, 68, 19, 59, 189, 21, 31, 10, 191, 165, 182, 228, 190, 141, 108, 69, 61, 148, 44, 133, 62, 199, 129, 147, 62, 82, 53, 166, 190, 161, 41, 17, 62, 199, 247, 248, 189, 46, 34, 163, 62, 173, 124, 222, 60, 172, 11, 2, 190, 186, 138, 38, 189, 101, 20, 223, 190, 51, 136, 34, 61, 30, 209, 6, 190, 223, 227, 142, 62, 51, 105, 79, 62, 33, 146, 224, 61, 144, 29, 149, 61, 176, 39, 11, 191, 180, 15, 139, 62, 184, 66, 152, 189, 18, 236, 251, 190, 195, 24, 49, 61, 130, 170, 145, 191, 142, 47, 38, 63, 73, 81, 181, 190, 163, 141, 133, 62, 48, 3, 186, 191, 226, 87, 181, 62, 237, 242, 167, 60, 127, 32, 154, 189, 138, 172, 148, 62, 22, 17, 165, 191, 182, 160, 221, 61, 244, 243, 29, 62, 206, 169, 134, 62, 122, 249, 151, 189, 212, 82, 239, 60, 23, 77, 70, 61, 204, 185, 174, 62, 231, 78, 157, 190, 45, 40, 145, 189, 122, 249, 69, 63, 149, 106, 22, 191, 142, 191, 220, 190, 146, 50, 119, 62, 215, 243, 18, 191, 59, 72, 76, 62, 255, 174, 6, 191, 141, 185, 199, 191, 161, 28, 76, 61, 208, 80, 42, 189, 161, 143, 179, 61, 76, 189, 201, 189, 39, 74, 237, 61, 118, 79, 171, 189, 146, 208, 15, 190, 238, 135, 29, 190, 240, 240, 10, 189, 240, 148, 171, 189, 129, 121, 251, 189, 99, 215, 69, 190, 218, 146, 17, 190, 232, 99, 92, 189, 124, 178, 221, 61, 22, 4, 223, 189, 17, 105, 238, 189, 93, 98, 33, 62, 162, 163, 211, 188, 81, 251, 34, 189, 120, 12, 90, 189, 199, 117, 218, 189, 23, 165, 201, 61, 182, 250, 164, 61, 222, 143, 235, 189, 164, 140, 6, 62, 215, 120, 4, 190, 147, 55, 135, 61, 146, 16, 251, 189, 154, 228, 193, 61, 123, 109, 158, 61, 32, 162, 4, 62, 234, 3, 36, 60, 165, 64, 211, 61, 50, 8, 132, 189, 142, 253, 186, 61, 27, 66, 5, 190, 232, 5, 73, 190, 206, 104, 164, 189, 249, 73, 6, 61, 245, 105, 233, 61, 39, 13, 211, 61, 184, 93, 144, 189, 68, 146, 19, 62, 50, 132, 193, 189, 51, 48, 39, 190, 21, 31, 135, 61, 73, 133, 228, 60, 59, 150, 39, 190, 244, 128, 18, 189, 19, 119, 136, 188, 79, 210, 228, 187, 176, 39, 170, 61, 32, 43, 46, 190, 194, 185, 169, 60, 83, 57, 250, 189, 174, 9, 179, 189, 229, 252, 245, 189, 169, 89, 30, 190, 36, 12, 146, 188, 28, 1, 88, 61, 72, 116, 167, 61, 26, 232, 131, 189, 23, 215, 91, 190, 207, 212, 103, 190, 2, 168, 76, 191, 109, 216, 45, 191, 72, 97, 66, 190, 245, 170, 71, 191, 161, 12, 182, 62, 175, 94, 195, 188, 198, 21, 37, 190, 234, 41, 217, 61, 202, 24, 211, 61, 79, 221, 180, 59, 48, 53, 115, 62, 200, 129, 76, 62, 87, 67, 45, 190, 115, 247, 60, 190, 216, 3, 100, 190, 27, 219, 211, 188, 150, 84, 156, 189, 123, 24, 108, 62, 127, 129, 116, 61, 48, 175, 62, 189, 41, 3, 17, 61, 253, 5, 187, 190, 26, 169, 171, 190, 217, 25, 157, 62, 241, 154, 167, 61, 218, 166, 52, 190, 99, 40, 95, 62, 124, 204, 249, 189, 180, 184, 28, 62, 125, 109, 247, 190, 154, 118, 92, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 66, 107, 190, 144, 226, 5, 189, 18, 140, 93, 61, 140, 136, 40, 62, 58, 149, 166, 59, 175, 210, 37, 62, 1, 133, 18, 62, 224, 235, 85, 60, 193, 59, 76, 190, 181, 228, 145, 189, 95, 188, 2, 62, 157, 170, 160, 61, 2, 220, 133, 62, 221, 208, 19, 61, 215, 152, 141, 189, 9, 118, 89, 62, 188, 57, 70, 190, 155, 96, 152, 189, 217, 204, 90, 62, 104, 32, 229, 62, 170, 236, 94, 190, 27, 130, 127, 62, 135, 50, 131, 61, 67, 121, 28, 189, 36, 5, 61, 190, 123, 5, 80, 62, 161, 8, 158, 61, 199, 3, 32, 62, 43, 177, 157, 62, 205, 84, 29, 190, 60, 170, 86, 190, 105, 238, 81, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 76, 14, 63, 240, 217, 41, 190, 135, 15, 151, 190, 85, 99, 12, 63, 39, 134, 36, 63, 54, 106, 182, 57, 231, 11, 26, 191, 24, 70, 231, 62, 68, 39, 254, 61, 118, 148, 189, 62, 143, 12, 234, 189, 39, 180, 66, 60, 43, 145, 166, 190, 71, 210, 35, 63, 150, 112, 6, 190, 160, 92, 16, 187, 75, 135, 244, 189, 20, 105, 126, 190, 161, 57, 231, 189, 223, 143, 132, 63, 0, 105, 207, 61, 249, 177, 86, 63, 7, 251, 14, 63, 95, 212, 174, 62, 122, 25, 91, 190, 128, 106, 184, 190, 194, 123, 240, 62, 229, 14, 203, 190, 126, 81, 168, 63, 239, 2, 220, 187, 119, 100, 18, 190, 253, 7, 241, 62, 205, 87, 101, 190, 72, 178, 7, 190, 148, 32, 104, 190, 105, 174, 43, 61, 136, 33, 190, 188, 116, 4, 166, 190, 77, 201, 168, 61, 81, 109, 188, 189, 50, 196, 8, 62, 179, 10, 19, 189, 4, 118, 162, 190, 57, 66, 7, 191, 130, 179, 236, 61, 163, 87, 108, 61, 171, 226, 206, 189, 20, 221, 207, 190, 216, 14, 7, 61, 33, 37, 139, 62, 218, 239, 128, 190, 49, 71, 202, 61, 134, 253, 177, 61, 237, 122, 158, 62, 200, 226, 8, 62, 87, 147, 115, 62, 177, 130, 135, 60, 18, 150, 25, 189, 104, 247, 148, 190, 173, 186, 142, 60, 182, 159, 204, 60, 200, 37, 178, 189, 77, 43, 160, 189, 131, 11, 138, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 169, 133, 190, 171, 240, 184, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {42, 118, 25, 63, 166, 222, 146, 63, 121, 47, 129, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {22, 152, 187, 63, 242, 84, 73, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0084/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}