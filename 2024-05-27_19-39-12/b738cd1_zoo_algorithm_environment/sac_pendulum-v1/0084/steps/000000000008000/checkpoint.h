// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 109, 213, 190, 193, 193, 167, 62, 238, 76, 24, 63, 18, 149, 185, 62, 167, 106, 141, 63, 58, 186, 90, 62, 12, 29, 2, 61, 86, 171, 228, 190, 3, 122, 227, 190, 23, 183, 62, 63, 249, 238, 9, 191, 88, 117, 39, 191, 230, 15, 210, 62, 95, 26, 34, 63, 104, 85, 68, 62, 201, 238, 157, 189, 117, 166, 166, 191, 108, 121, 228, 190, 62, 47, 239, 62, 112, 42, 107, 63, 248, 34, 127, 189, 164, 42, 21, 60, 241, 219, 41, 190, 219, 190, 180, 62, 228, 90, 34, 191, 2, 65, 47, 63, 219, 231, 191, 62, 215, 150, 136, 62, 169, 68, 86, 191, 47, 150, 97, 190, 161, 40, 140, 62, 139, 208, 209, 61, 224, 163, 96, 190, 175, 200, 139, 190, 168, 195, 74, 190, 3, 113, 240, 190, 187, 44, 249, 190, 205, 207, 76, 191, 180, 102, 165, 62, 130, 42, 212, 189, 124, 46, 64, 191, 215, 86, 223, 190, 173, 233, 7, 190, 156, 225, 134, 191, 253, 42, 172, 190, 24, 218, 8, 63, 142, 151, 205, 62, 93, 52, 72, 191, 161, 96, 40, 63, 184, 102, 44, 63, 21, 123, 137, 62, 139, 205, 230, 190, 81, 203, 47, 63, 32, 228, 197, 61, 151, 84, 188, 62, 180, 125, 89, 191, 67, 60, 155, 62, 109, 22, 255, 190, 150, 235, 144, 62, 30, 120, 91, 61, 236, 94, 6, 62, 64, 116, 230, 189, 20, 215, 158, 186, 66, 110, 169, 189, 133, 149, 61, 63, 0, 115, 14, 62, 213, 8, 189, 62, 176, 95, 150, 61, 93, 172, 74, 191, 7, 255, 207, 62, 190, 111, 247, 62, 74, 47, 155, 62, 142, 179, 227, 190, 135, 57, 189, 62, 109, 185, 176, 190, 4, 209, 16, 63, 42, 156, 0, 191, 116, 191, 242, 190, 241, 83, 160, 189, 25, 43, 150, 190, 44, 232, 246, 62, 128, 128, 158, 189, 94, 225, 24, 191, 117, 128, 173, 62, 44, 205, 247, 189, 12, 90, 136, 191, 96, 20, 156, 62, 37, 46, 71, 191, 157, 43, 174, 189, 60, 67, 9, 191, 160, 202, 211, 189, 116, 4, 75, 191, 252, 206, 151, 190, 214, 215, 136, 190, 167, 97, 47, 191, 158, 56, 217, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 43, 17, 191, 63, 201, 129, 190, 6, 126, 21, 61, 1, 231, 19, 62, 55, 173, 35, 191, 66, 154, 136, 188, 130, 33, 232, 62, 240, 187, 241, 189, 177, 145, 42, 190, 219, 31, 169, 62, 169, 26, 64, 63, 187, 6, 162, 190, 35, 155, 152, 190, 51, 23, 250, 190, 207, 72, 143, 189, 37, 178, 214, 62, 74, 255, 234, 62, 50, 85, 203, 62, 44, 79, 129, 62, 154, 33, 60, 63, 203, 171, 120, 190, 156, 155, 14, 63, 159, 141, 127, 62, 7, 106, 190, 62, 215, 168, 198, 190, 105, 204, 208, 61, 219, 1, 212, 190, 202, 101, 218, 189, 167, 181, 217, 189, 48, 225, 38, 62, 29, 28, 171, 189, 179, 150, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {28, 248, 65, 57, 183, 79, 195, 62, 108, 233, 240, 188, 100, 202, 72, 62, 16, 218, 26, 63, 62, 3, 142, 61, 40, 114, 126, 62, 26, 63, 0, 190, 171, 7, 232, 189, 142, 111, 21, 62, 96, 42, 3, 62, 126, 86, 41, 190, 223, 184, 222, 190, 170, 35, 75, 189, 22, 229, 87, 189, 48, 81, 5, 188, 72, 176, 42, 189, 222, 26, 153, 190, 91, 1, 6, 190, 233, 91, 162, 190, 98, 223, 205, 186, 80, 211, 148, 190, 202, 71, 45, 61, 146, 186, 17, 62, 204, 82, 133, 62, 241, 6, 57, 189, 21, 116, 50, 190, 53, 157, 60, 189, 189, 220, 46, 191, 201, 201, 37, 61, 154, 102, 167, 189, 203, 87, 104, 190, 156, 209, 19, 190, 108, 208, 165, 189, 226, 216, 1, 189, 135, 248, 201, 60, 76, 94, 179, 189, 135, 7, 27, 190, 216, 38, 135, 188, 190, 252, 5, 62, 76, 175, 252, 189, 22, 28, 198, 189, 113, 218, 178, 61, 152, 184, 207, 61, 82, 100, 38, 190, 12, 137, 33, 190, 67, 212, 100, 59, 31, 192, 8, 189, 160, 235, 251, 187, 52, 160, 145, 61, 94, 222, 97, 61, 208, 190, 230, 188, 83, 120, 188, 61, 105, 212, 255, 189, 242, 110, 101, 189, 164, 138, 199, 189, 131, 34, 192, 61, 150, 118, 214, 189, 26, 74, 173, 189, 3, 182, 236, 189, 120, 70, 32, 190, 190, 193, 50, 190, 24, 231, 40, 190, 107, 138, 40, 187, 191, 221, 181, 60, 94, 106, 133, 61, 23, 105, 36, 189, 232, 101, 129, 190, 72, 6, 53, 190, 184, 131, 221, 188, 198, 55, 121, 61, 114, 35, 8, 62, 201, 211, 127, 61, 251, 45, 246, 189, 183, 114, 92, 61, 195, 45, 35, 190, 72, 225, 201, 61, 16, 203, 132, 189, 67, 134, 36, 190, 53, 179, 253, 190, 208, 253, 8, 189, 201, 66, 65, 62, 90, 101, 132, 190, 126, 184, 145, 62, 101, 144, 238, 61, 224, 111, 186, 188, 2, 135, 201, 190, 50, 176, 28, 190, 119, 163, 60, 190, 107, 70, 139, 190, 86, 212, 106, 61, 102, 140, 147, 189, 114, 50, 5, 189, 224, 174, 188, 61, 77, 23, 180, 188, 46, 11, 221, 61, 47, 108, 5, 62, 55, 33, 215, 190, 73, 243, 38, 189, 157, 205, 203, 62, 33, 225, 20, 191, 42, 3, 188, 61, 223, 217, 234, 61, 47, 189, 174, 190, 32, 160, 236, 61, 76, 71, 162, 61, 28, 223, 242, 61, 161, 253, 47, 190, 147, 144, 16, 63, 138, 44, 10, 62, 3, 190, 29, 189, 166, 130, 13, 61, 202, 58, 154, 190, 52, 86, 202, 187, 223, 113, 13, 63, 94, 44, 160, 190, 38, 13, 215, 60, 26, 54, 142, 190, 11, 195, 71, 190, 173, 111, 205, 189, 248, 39, 39, 62, 69, 221, 229, 62, 176, 253, 208, 190, 113, 181, 173, 62, 110, 33, 12, 191, 190, 191, 200, 189, 156, 79, 175, 189, 13, 143, 33, 191, 191, 172, 9, 189, 4, 61, 182, 189, 187, 16, 35, 189, 174, 134, 199, 61, 172, 245, 12, 189, 163, 129, 135, 190, 24, 227, 253, 61, 134, 74, 105, 61, 246, 145, 60, 189, 213, 190, 68, 61, 194, 39, 19, 190, 128, 70, 1, 191, 112, 220, 128, 62, 147, 75, 56, 62, 198, 247, 192, 190, 217, 148, 80, 191, 180, 43, 141, 62, 158, 152, 158, 62, 53, 163, 203, 62, 194, 221, 238, 61, 133, 102, 33, 62, 152, 252, 189, 61, 161, 28, 217, 190, 226, 125, 87, 62, 192, 231, 132, 189, 173, 20, 131, 61, 36, 105, 127, 189, 93, 29, 161, 188, 89, 243, 53, 191, 206, 194, 113, 190, 182, 179, 34, 190, 146, 130, 173, 191, 187, 105, 140, 61, 192, 22, 239, 190, 162, 83, 151, 188, 191, 75, 144, 62, 234, 72, 244, 190, 112, 24, 168, 189, 162, 245, 147, 60, 83, 64, 32, 61, 113, 187, 38, 62, 96, 186, 204, 61, 112, 109, 31, 62, 107, 85, 178, 60, 16, 95, 187, 187, 7, 125, 40, 190, 64, 245, 2, 190, 61, 179, 53, 62, 48, 203, 216, 62, 137, 252, 119, 190, 177, 106, 156, 60, 238, 155, 38, 62, 13, 209, 41, 190, 148, 171, 11, 62, 232, 38, 29, 190, 232, 62, 248, 61, 84, 41, 100, 189, 134, 35, 75, 187, 1, 59, 145, 190, 28, 102, 47, 189, 240, 170, 33, 189, 145, 76, 33, 61, 128, 236, 192, 189, 248, 20, 174, 189, 55, 176, 65, 62, 127, 114, 65, 61, 23, 87, 100, 62, 60, 92, 20, 191, 250, 126, 225, 59, 16, 130, 186, 190, 184, 65, 218, 62, 233, 41, 54, 61, 53, 230, 244, 61, 207, 248, 163, 61, 33, 111, 82, 62, 82, 233, 89, 62, 224, 133, 16, 190, 26, 121, 35, 191, 96, 227, 165, 190, 249, 100, 127, 62, 222, 19, 111, 62, 40, 59, 194, 61, 54, 61, 230, 190, 252, 165, 207, 61, 241, 184, 28, 62, 217, 132, 200, 61, 54, 202, 155, 61, 174, 215, 232, 61, 64, 206, 236, 190, 198, 73, 246, 190, 238, 189, 1, 62, 209, 54, 1, 190, 204, 67, 251, 62, 237, 134, 226, 62, 73, 70, 170, 189, 190, 47, 19, 62, 93, 129, 4, 191, 147, 155, 142, 190, 211, 24, 176, 189, 213, 70, 116, 62, 95, 215, 188, 189, 197, 152, 69, 190, 124, 106, 76, 62, 116, 232, 187, 190, 187, 41, 6, 61, 116, 1, 235, 61, 137, 73, 95, 62, 37, 129, 9, 189, 39, 122, 237, 62, 208, 28, 50, 62, 85, 99, 237, 188, 249, 154, 18, 190, 88, 59, 22, 190, 154, 198, 78, 191, 175, 115, 227, 62, 103, 95, 26, 60, 92, 160, 170, 189, 30, 23, 50, 191, 29, 190, 153, 61, 75, 136, 32, 61, 245, 120, 35, 62, 81, 182, 6, 62, 179, 10, 0, 191, 12, 113, 4, 63, 226, 107, 139, 187, 211, 206, 234, 187, 198, 222, 8, 61, 218, 248, 110, 190, 65, 42, 98, 60, 0, 210, 149, 61, 172, 138, 57, 190, 232, 68, 14, 61, 187, 220, 186, 189, 247, 253, 37, 190, 132, 121, 172, 189, 252, 69, 210, 61, 209, 247, 156, 189, 35, 110, 76, 190, 224, 238, 210, 189, 72, 236, 146, 61, 101, 1, 235, 61, 197, 74, 167, 189, 103, 195, 72, 60, 244, 95, 190, 189, 157, 180, 84, 189, 146, 5, 194, 61, 184, 181, 233, 61, 136, 160, 201, 189, 233, 218, 34, 62, 25, 145, 167, 61, 70, 158, 41, 61, 142, 149, 51, 190, 28, 210, 99, 60, 6, 31, 187, 188, 103, 71, 183, 189, 132, 238, 143, 189, 67, 44, 36, 61, 40, 222, 199, 61, 254, 125, 11, 190, 186, 67, 5, 62, 201, 45, 219, 60, 232, 35, 135, 62, 4, 176, 21, 189, 171, 124, 80, 187, 132, 137, 28, 63, 222, 236, 70, 190, 247, 17, 202, 62, 156, 227, 84, 62, 22, 2, 85, 190, 139, 6, 111, 190, 58, 233, 254, 61, 176, 78, 158, 61, 67, 19, 115, 191, 12, 6, 139, 61, 159, 32, 196, 60, 124, 239, 146, 62, 250, 53, 46, 189, 238, 100, 49, 62, 209, 90, 193, 190, 6, 18, 192, 189, 64, 245, 165, 61, 43, 140, 137, 190, 223, 189, 132, 62, 211, 217, 146, 189, 161, 19, 162, 62, 205, 17, 48, 62, 107, 27, 137, 62, 1, 40, 12, 191, 111, 33, 212, 190, 165, 247, 157, 189, 147, 92, 29, 60, 126, 119, 31, 61, 36, 17, 234, 189, 57, 196, 118, 190, 136, 251, 54, 189, 7, 49, 63, 61, 8, 82, 20, 190, 162, 77, 33, 190, 161, 62, 107, 60, 209, 127, 189, 188, 28, 156, 188, 61, 24, 79, 94, 62, 37, 7, 51, 62, 107, 145, 205, 61, 131, 226, 242, 60, 64, 253, 13, 189, 114, 148, 75, 62, 70, 39, 62, 62, 215, 98, 175, 62, 227, 252, 52, 190, 9, 50, 140, 189, 163, 220, 144, 62, 83, 183, 11, 190, 173, 107, 129, 62, 52, 95, 205, 61, 180, 56, 142, 61, 18, 132, 22, 188, 213, 187, 88, 190, 170, 153, 209, 59, 210, 144, 69, 189, 233, 166, 119, 62, 2, 237, 211, 61, 161, 228, 54, 60, 97, 9, 83, 61, 16, 209, 185, 190, 243, 65, 125, 190, 21, 165, 77, 189, 243, 33, 89, 189, 188, 217, 76, 191, 106, 16, 181, 61, 217, 83, 56, 62, 159, 103, 47, 190, 103, 173, 174, 190, 102, 8, 174, 61, 216, 128, 103, 189, 93, 28, 18, 62, 92, 211, 48, 188, 57, 48, 9, 190, 143, 134, 219, 189, 11, 215, 8, 62, 74, 156, 181, 62, 252, 102, 23, 191, 210, 224, 70, 62, 32, 57, 90, 61, 32, 90, 229, 189, 57, 135, 138, 62, 112, 208, 232, 61, 204, 66, 41, 62, 79, 67, 209, 60, 205, 195, 40, 61, 157, 207, 162, 190, 95, 231, 136, 189, 123, 162, 65, 62, 104, 157, 217, 189, 83, 12, 99, 61, 220, 134, 1, 61, 165, 22, 143, 190, 92, 107, 27, 62, 72, 141, 132, 62, 231, 47, 172, 58, 190, 254, 196, 190, 84, 34, 15, 188, 56, 37, 59, 188, 87, 27, 185, 61, 92, 82, 170, 60, 185, 39, 179, 189, 249, 250, 244, 61, 106, 33, 164, 62, 9, 128, 189, 190, 134, 207, 37, 61, 175, 122, 222, 61, 180, 4, 223, 189, 45, 183, 180, 62, 78, 34, 62, 62, 243, 185, 204, 190, 210, 4, 159, 60, 235, 117, 246, 61, 243, 21, 150, 62, 50, 224, 151, 189, 44, 142, 40, 190, 81, 103, 74, 190, 105, 151, 133, 190, 29, 246, 181, 188, 162, 85, 21, 191, 251, 167, 193, 62, 243, 198, 52, 62, 230, 34, 78, 62, 216, 62, 178, 62, 122, 247, 32, 191, 75, 214, 28, 191, 209, 199, 44, 190, 141, 184, 154, 62, 181, 88, 90, 190, 173, 75, 147, 187, 146, 27, 92, 62, 187, 246, 202, 190, 54, 76, 192, 189, 171, 54, 11, 62, 196, 100, 36, 62, 103, 109, 8, 190, 57, 79, 22, 63, 236, 224, 35, 61, 166, 227, 22, 190, 132, 81, 54, 187, 247, 236, 46, 190, 211, 217, 17, 191, 63, 24, 10, 63, 157, 165, 6, 190, 101, 110, 161, 61, 115, 218, 14, 191, 151, 75, 80, 60, 71, 81, 28, 189, 32, 166, 82, 61, 179, 158, 155, 62, 201, 168, 132, 190, 204, 252, 194, 62, 38, 55, 160, 189, 0, 205, 1, 190, 38, 60, 84, 60, 196, 24, 66, 190, 119, 30, 15, 188, 234, 72, 230, 61, 129, 165, 129, 189, 84, 11, 220, 189, 27, 87, 14, 62, 250, 89, 174, 61, 139, 232, 65, 190, 100, 7, 38, 190, 46, 15, 79, 61, 65, 69, 191, 61, 202, 3, 200, 188, 28, 131, 41, 190, 182, 160, 12, 190, 7, 18, 183, 189, 207, 13, 2, 190, 31, 245, 44, 62, 170, 167, 42, 61, 16, 153, 95, 189, 12, 144, 116, 188, 82, 35, 18, 189, 59, 52, 35, 190, 184, 205, 70, 190, 79, 43, 180, 189, 31, 148, 100, 189, 220, 94, 245, 189, 91, 21, 38, 190, 172, 216, 63, 61, 104, 60, 68, 190, 189, 60, 220, 61, 94, 140, 216, 189, 193, 100, 29, 190, 213, 187, 205, 61, 19, 231, 203, 188, 61, 126, 136, 190, 76, 6, 172, 189, 210, 79, 171, 61, 131, 181, 36, 190, 25, 42, 106, 190, 77, 33, 126, 62, 140, 79, 245, 188, 208, 22, 90, 61, 218, 70, 248, 59, 39, 149, 157, 62, 164, 83, 68, 189, 230, 8, 130, 189, 134, 82, 181, 61, 143, 21, 168, 189, 115, 198, 69, 62, 158, 26, 230, 62, 5, 175, 132, 190, 128, 253, 10, 62, 97, 227, 242, 185, 7, 233, 173, 61, 249, 94, 183, 61, 100, 135, 61, 189, 248, 50, 237, 61, 148, 174, 158, 61, 41, 208, 216, 61, 107, 15, 144, 61, 140, 202, 11, 190, 156, 144, 65, 62, 248, 194, 200, 188, 210, 130, 55, 189, 81, 255, 169, 189, 10, 169, 205, 61, 173, 21, 242, 60, 160, 46, 242, 61, 128, 71, 30, 62, 207, 77, 207, 189, 198, 130, 103, 61, 11, 132, 160, 189, 18, 40, 230, 61, 232, 167, 226, 189, 216, 86, 39, 190, 70, 31, 18, 189, 61, 7, 67, 61, 207, 23, 3, 62, 13, 114, 148, 189, 206, 195, 246, 61, 49, 195, 137, 189, 238, 229, 124, 61, 114, 21, 28, 190, 73, 130, 234, 189, 43, 82, 6, 61, 121, 170, 216, 61, 221, 66, 2, 60, 43, 45, 210, 60, 19, 203, 49, 190, 222, 240, 114, 61, 204, 55, 44, 190, 130, 96, 10, 188, 59, 208, 85, 190, 13, 5, 9, 61, 79, 30, 4, 190, 173, 159, 2, 190, 64, 46, 23, 60, 37, 79, 173, 61, 228, 252, 156, 62, 228, 207, 104, 62, 116, 235, 23, 189, 74, 25, 132, 189, 43, 54, 191, 189, 85, 127, 34, 190, 171, 180, 14, 62, 181, 104, 238, 189, 187, 8, 242, 61, 198, 146, 48, 62, 70, 73, 89, 62, 180, 165, 187, 190, 215, 209, 203, 188, 199, 13, 155, 189, 107, 95, 131, 60, 74, 71, 101, 62, 42, 205, 132, 62, 110, 9, 245, 190, 226, 209, 56, 62, 25, 173, 250, 188, 222, 42, 0, 62, 126, 254, 60, 189, 119, 44, 5, 62, 77, 187, 21, 189, 103, 37, 142, 190, 66, 62, 30, 62, 242, 18, 2, 190, 103, 0, 225, 62, 110, 61, 157, 62, 95, 165, 196, 61, 109, 128, 120, 62, 22, 231, 186, 188, 159, 219, 61, 190, 112, 162, 125, 189, 190, 97, 157, 188, 152, 166, 105, 190, 171, 103, 227, 61, 48, 129, 134, 187, 55, 249, 240, 188, 84, 139, 61, 61, 26, 16, 154, 61, 189, 138, 60, 62, 109, 47, 26, 62, 0, 64, 16, 190, 172, 18, 10, 61, 45, 197, 248, 189, 218, 190, 184, 189, 49, 33, 169, 62, 56, 46, 73, 58, 142, 20, 26, 190, 189, 145, 151, 62, 19, 64, 242, 61, 174, 22, 171, 62, 193, 99, 83, 61, 96, 255, 145, 189, 133, 32, 44, 190, 131, 237, 189, 189, 110, 140, 244, 59, 209, 172, 131, 189, 246, 247, 183, 62, 35, 147, 91, 61, 101, 232, 126, 62, 203, 221, 14, 62, 170, 43, 41, 190, 167, 124, 243, 190, 56, 173, 195, 190, 83, 12, 132, 190, 223, 120, 24, 191, 189, 69, 115, 191, 239, 139, 81, 189, 53, 191, 77, 190, 34, 94, 56, 62, 233, 99, 135, 190, 50, 185, 29, 190, 63, 141, 142, 190, 199, 70, 164, 62, 95, 72, 236, 190, 255, 2, 68, 191, 249, 244, 32, 191, 38, 168, 22, 190, 140, 112, 46, 62, 235, 240, 90, 62, 90, 243, 188, 62, 182, 181, 22, 188, 130, 14, 158, 62, 74, 42, 76, 191, 28, 233, 41, 189, 5, 145, 38, 63, 109, 50, 112, 190, 177, 62, 254, 189, 62, 6, 131, 62, 223, 8, 146, 190, 89, 160, 182, 189, 4, 195, 240, 190, 148, 7, 230, 191, 172, 1, 101, 189, 2, 55, 12, 190, 79, 50, 81, 190, 204, 184, 32, 190, 140, 4, 153, 189, 236, 125, 248, 189, 197, 57, 161, 188, 178, 65, 32, 189, 23, 115, 42, 188, 234, 206, 221, 59, 4, 22, 254, 59, 105, 234, 160, 189, 145, 214, 33, 189, 239, 208, 189, 189, 84, 30, 179, 60, 208, 29, 178, 61, 210, 95, 169, 61, 160, 8, 50, 190, 73, 220, 41, 190, 202, 22, 60, 187, 82, 220, 12, 62, 72, 247, 9, 60, 180, 13, 13, 190, 34, 142, 28, 60, 36, 201, 3, 62, 34, 123, 175, 60, 42, 119, 19, 190, 11, 13, 242, 189, 30, 221, 13, 190, 255, 162, 165, 61, 172, 61, 237, 189, 205, 61, 75, 189, 85, 223, 203, 187, 93, 35, 182, 190, 135, 164, 241, 189, 33, 201, 98, 189, 69, 168, 198, 190, 28, 103, 44, 191, 13, 105, 143, 61, 152, 249, 65, 190, 184, 238, 61, 62, 101, 68, 104, 190, 232, 183, 111, 186, 77, 230, 55, 190, 227, 48, 139, 62, 37, 28, 96, 188, 31, 146, 24, 191, 105, 104, 37, 191, 220, 40, 255, 189, 59, 159, 2, 62, 50, 134, 41, 62, 54, 81, 31, 62, 35, 143, 239, 189, 251, 202, 13, 62, 39, 66, 204, 190, 159, 68, 17, 190, 246, 26, 195, 62, 159, 70, 245, 61, 44, 162, 149, 189, 114, 205, 174, 62, 13, 152, 155, 190, 249, 206, 10, 62, 0, 74, 236, 190, 209, 26, 187, 191, 190, 104, 94, 190, 214, 108, 15, 191, 73, 162, 67, 190, 216, 97, 176, 189, 53, 96, 126, 190, 234, 40, 196, 190, 19, 190, 230, 189, 63, 12, 88, 190, 11, 139, 21, 62, 69, 106, 189, 190, 50, 224, 143, 188, 221, 73, 44, 62, 69, 173, 8, 63, 13, 10, 58, 190, 130, 149, 226, 190, 92, 117, 182, 61, 224, 162, 68, 190, 245, 94, 79, 190, 31, 54, 195, 62, 238, 175, 75, 62, 242, 249, 24, 62, 57, 108, 147, 189, 239, 212, 215, 61, 96, 194, 140, 189, 122, 216, 25, 63, 17, 133, 177, 189, 57, 68, 186, 190, 172, 65, 205, 62, 34, 176, 32, 190, 62, 211, 136, 62, 106, 71, 167, 190, 147, 38, 216, 190, 225, 144, 106, 190, 242, 4, 212, 189, 191, 82, 22, 189, 158, 172, 147, 62, 117, 0, 138, 62, 7, 149, 177, 61, 155, 129, 150, 60, 91, 157, 74, 61, 76, 59, 238, 61, 214, 190, 65, 62, 221, 3, 253, 189, 132, 178, 36, 190, 171, 246, 148, 62, 100, 83, 21, 59, 85, 212, 172, 61, 49, 32, 141, 189, 3, 127, 206, 189, 20, 71, 254, 190, 121, 147, 5, 63, 160, 100, 142, 189, 150, 174, 197, 189, 174, 31, 77, 191, 163, 124, 215, 188, 16, 1, 204, 61, 248, 127, 221, 61, 82, 193, 159, 62, 230, 166, 59, 190, 93, 67, 213, 62, 80, 56, 105, 187, 176, 222, 95, 60, 210, 87, 70, 61, 149, 13, 6, 189, 13, 12, 137, 190, 251, 8, 91, 62, 88, 249, 206, 189, 13, 130, 109, 189, 217, 127, 33, 190, 210, 191, 163, 62, 22, 34, 178, 190, 15, 126, 210, 61, 120, 117, 254, 190, 136, 92, 21, 189, 140, 22, 6, 190, 118, 156, 215, 61, 2, 30, 101, 190, 106, 158, 50, 62, 33, 142, 132, 62, 70, 196, 213, 188, 55, 180, 253, 62, 39, 199, 216, 188, 112, 241, 105, 62, 33, 190, 114, 190, 43, 95, 6, 190, 226, 50, 202, 62, 213, 237, 254, 61, 238, 61, 228, 62, 6, 52, 42, 62, 6, 154, 83, 186, 19, 79, 114, 190, 29, 21, 27, 59, 54, 205, 152, 62, 71, 5, 199, 188, 144, 186, 212, 58, 47, 139, 192, 60, 217, 2, 117, 190, 161, 85, 18, 62, 10, 51, 35, 62, 40, 8, 232, 189, 62, 58, 213, 190, 228, 160, 168, 188, 29, 109, 11, 189, 38, 163, 199, 189, 164, 150, 249, 60, 158, 35, 86, 62, 58, 107, 153, 60, 29, 51, 135, 62, 65, 39, 224, 190, 67, 239, 91, 189, 101, 218, 56, 188, 54, 58, 95, 60, 101, 191, 174, 62, 208, 200, 210, 62, 30, 178, 20, 191, 88, 39, 43, 62, 21, 255, 215, 189, 83, 27, 205, 62, 174, 107, 56, 62, 170, 164, 69, 187, 244, 244, 185, 190, 218, 142, 191, 189, 71, 136, 62, 190, 96, 246, 61, 191, 7, 178, 242, 61, 161, 163, 20, 62, 186, 50, 122, 62, 4, 88, 68, 62, 65, 64, 153, 189, 230, 226, 230, 61, 192, 80, 228, 61, 90, 6, 122, 190, 49, 184, 23, 190, 198, 77, 61, 62, 80, 248, 35, 190, 83, 94, 168, 60, 219, 157, 145, 189, 205, 10, 9, 61, 85, 192, 104, 190, 234, 145, 15, 190, 85, 241, 115, 62, 90, 91, 95, 190, 175, 126, 36, 62, 119, 220, 161, 189, 203, 76, 107, 190, 9, 85, 23, 189, 142, 93, 209, 61, 212, 119, 131, 62, 72, 99, 31, 190, 243, 229, 57, 190, 21, 227, 223, 60, 185, 183, 191, 190, 174, 76, 70, 190, 104, 80, 131, 190, 223, 53, 73, 190, 179, 105, 39, 62, 176, 95, 130, 62, 245, 236, 31, 190, 206, 215, 235, 60, 131, 178, 43, 188, 122, 133, 191, 61, 140, 14, 130, 62, 230, 157, 1, 62, 248, 51, 88, 190, 165, 179, 129, 188, 254, 45, 148, 190, 1, 200, 181, 62, 30, 140, 205, 189, 215, 162, 35, 190, 198, 174, 8, 61, 114, 103, 178, 61, 208, 93, 64, 62, 211, 146, 88, 189, 246, 113, 238, 190, 144, 148, 87, 190, 164, 113, 3, 61, 156, 85, 95, 62, 169, 90, 104, 62, 161, 31, 216, 190, 134, 94, 197, 61, 199, 247, 248, 189, 157, 202, 138, 62, 173, 25, 10, 61, 145, 215, 17, 190, 4, 118, 12, 189, 221, 135, 198, 190, 88, 103, 212, 61, 155, 196, 26, 190, 49, 39, 144, 62, 129, 25, 200, 61, 10, 244, 161, 61, 87, 53, 49, 62, 204, 23, 198, 190, 91, 47, 211, 189, 11, 82, 51, 190, 225, 51, 25, 191, 139, 111, 31, 60, 150, 188, 186, 191, 236, 119, 167, 62, 230, 86, 161, 190, 227, 63, 182, 62, 36, 177, 226, 190, 177, 89, 51, 62, 209, 223, 28, 189, 216, 236, 92, 62, 76, 92, 16, 62, 38, 243, 190, 191, 88, 131, 197, 188, 37, 244, 241, 189, 175, 102, 145, 62, 144, 172, 48, 188, 65, 174, 222, 61, 23, 77, 70, 61, 195, 3, 134, 62, 72, 117, 177, 190, 15, 153, 75, 190, 216, 195, 70, 63, 182, 53, 42, 191, 165, 49, 191, 190, 162, 239, 190, 62, 198, 252, 20, 191, 172, 142, 148, 62, 77, 21, 20, 191, 139, 241, 202, 191, 161, 28, 76, 61, 208, 80, 42, 189, 82, 135, 187, 61, 181, 229, 195, 189, 39, 74, 237, 61, 28, 251, 160, 189, 146, 208, 15, 190, 238, 135, 29, 190, 240, 240, 10, 189, 255, 45, 166, 189, 24, 177, 244, 189, 29, 51, 66, 190, 52, 113, 17, 190, 170, 144, 82, 189, 225, 83, 229, 61, 178, 11, 216, 189, 17, 105, 238, 189, 21, 88, 36, 62, 162, 163, 211, 188, 111, 117, 11, 189, 120, 12, 90, 189, 40, 194, 217, 189, 3, 174, 210, 61, 182, 250, 164, 61, 128, 24, 234, 189, 36, 188, 8, 62, 215, 120, 4, 190, 147, 55, 135, 61, 146, 16, 251, 189, 241, 244, 212, 61, 42, 172, 164, 61, 79, 139, 8, 62, 234, 3, 36, 60, 231, 45, 23, 62, 220, 138, 111, 189, 177, 55, 220, 61, 27, 66, 5, 190, 112, 236, 62, 190, 225, 110, 107, 189, 249, 73, 6, 61, 245, 105, 233, 61, 201, 131, 20, 62, 24, 25, 65, 189, 66, 235, 10, 62, 223, 128, 193, 189, 239, 159, 23, 190, 142, 38, 197, 61, 132, 158, 45, 61, 129, 80, 244, 189, 55, 225, 209, 188, 105, 0, 208, 60, 14, 3, 139, 60, 176, 39, 170, 61, 40, 153, 7, 190, 73, 237, 252, 60, 234, 13, 154, 189, 184, 122, 157, 189, 105, 28, 207, 189, 169, 89, 30, 190, 36, 12, 146, 188, 238, 0, 74, 61, 13, 12, 152, 61, 122, 215, 242, 188, 134, 191, 87, 190, 65, 111, 62, 189, 107, 78, 34, 191, 206, 196, 146, 190, 92, 99, 10, 190, 226, 192, 135, 190, 176, 186, 68, 190, 249, 245, 21, 62, 226, 68, 244, 189, 108, 98, 168, 62, 108, 63, 202, 189, 143, 224, 60, 61, 218, 235, 136, 61, 216, 142, 148, 62, 148, 128, 32, 190, 93, 255, 132, 190, 124, 245, 195, 189, 91, 226, 36, 60, 111, 218, 143, 189, 168, 44, 66, 62, 98, 102, 132, 61, 48, 175, 62, 189, 208, 58, 71, 62, 88, 142, 89, 190, 186, 104, 116, 190, 56, 185, 248, 62, 148, 119, 225, 61, 23, 252, 231, 189, 118, 169, 156, 62, 217, 247, 69, 190, 141, 78, 158, 189, 220, 51, 177, 190, 81, 145, 61, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 93, 64, 190, 144, 226, 5, 189, 202, 37, 205, 188, 40, 93, 54, 62, 127, 100, 190, 61, 150, 53, 116, 62, 149, 174, 204, 61, 161, 197, 8, 61, 23, 44, 48, 190, 4, 214, 65, 60, 210, 216, 220, 61, 189, 190, 48, 62, 230, 217, 62, 62, 9, 188, 126, 61, 215, 152, 141, 189, 231, 101, 168, 62, 188, 57, 70, 190, 16, 85, 198, 189, 92, 64, 71, 62, 78, 166, 192, 62, 170, 236, 94, 190, 241, 229, 81, 62, 206, 45, 26, 61, 39, 210, 101, 189, 50, 169, 84, 190, 132, 32, 8, 62, 33, 122, 251, 189, 122, 212, 229, 61, 193, 26, 130, 62, 180, 179, 23, 190, 122, 108, 51, 190, 188, 71, 53, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 184, 161, 62, 240, 217, 41, 190, 45, 243, 159, 190, 128, 206, 5, 63, 182, 183, 10, 63, 97, 103, 2, 60, 130, 144, 1, 191, 23, 227, 189, 62, 180, 194, 25, 61, 135, 97, 213, 62, 93, 49, 8, 190, 237, 130, 51, 189, 50, 149, 177, 190, 128, 198, 2, 63, 150, 112, 6, 190, 78, 119, 229, 59, 75, 135, 244, 189, 87, 198, 148, 190, 129, 206, 28, 190, 222, 236, 136, 63, 0, 105, 207, 61, 178, 246, 54, 63, 58, 144, 157, 62, 221, 157, 117, 62, 85, 4, 71, 190, 172, 246, 174, 190, 1, 134, 105, 62, 5, 137, 169, 190, 12, 15, 154, 63, 177, 168, 220, 187, 220, 147, 25, 190, 77, 216, 194, 62, 111, 200, 128, 61, 72, 178, 7, 190, 144, 254, 0, 189, 207, 5, 18, 62, 185, 113, 207, 188, 72, 41, 161, 190, 184, 168, 30, 62, 41, 45, 31, 60, 176, 217, 18, 62, 154, 27, 0, 62, 128, 171, 143, 190, 55, 28, 190, 190, 236, 103, 221, 61, 37, 70, 251, 61, 171, 226, 206, 189, 200, 218, 183, 190, 216, 14, 7, 61, 53, 80, 74, 62, 51, 165, 122, 190, 172, 208, 162, 188, 134, 253, 177, 61, 239, 26, 124, 62, 165, 226, 132, 62, 12, 252, 117, 62, 71, 116, 194, 188, 253, 68, 152, 188, 193, 181, 81, 190, 97, 154, 177, 61, 62, 217, 244, 59, 30, 119, 178, 189, 200, 55, 228, 189, 4, 105, 14, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 68, 73, 190, 93, 221, 152, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {76, 107, 38, 192, 221, 164, 193, 62, 209, 254, 183, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {246, 229, 176, 64, 96, 223, 77, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0084/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}