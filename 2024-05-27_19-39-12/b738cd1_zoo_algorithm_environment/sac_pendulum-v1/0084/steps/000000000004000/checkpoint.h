// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 79, 158, 190, 132, 46, 167, 189, 127, 13, 32, 63, 218, 17, 202, 62, 242, 8, 52, 63, 230, 220, 156, 62, 180, 179, 90, 189, 254, 209, 216, 61, 124, 132, 242, 190, 166, 228, 8, 63, 242, 198, 185, 190, 184, 37, 40, 191, 131, 32, 41, 62, 158, 214, 235, 62, 173, 209, 164, 62, 228, 35, 141, 189, 47, 120, 92, 191, 187, 9, 210, 190, 21, 62, 165, 62, 140, 83, 6, 63, 208, 25, 28, 60, 158, 27, 160, 61, 169, 115, 150, 190, 156, 202, 201, 62, 46, 239, 35, 191, 233, 58, 169, 62, 114, 94, 201, 62, 254, 37, 112, 190, 204, 219, 42, 191, 100, 151, 148, 190, 35, 171, 152, 61, 114, 132, 105, 190, 19, 156, 181, 190, 32, 84, 206, 190, 240, 150, 152, 62, 207, 72, 234, 190, 7, 91, 250, 190, 50, 238, 81, 191, 50, 62, 149, 62, 16, 112, 235, 189, 112, 52, 229, 190, 238, 116, 249, 190, 75, 95, 57, 190, 115, 207, 32, 191, 198, 113, 156, 190, 60, 62, 178, 62, 3, 176, 51, 63, 20, 149, 87, 191, 222, 60, 52, 63, 80, 164, 200, 62, 101, 200, 69, 62, 121, 52, 186, 190, 196, 214, 4, 63, 224, 2, 226, 61, 252, 230, 15, 62, 169, 154, 101, 191, 210, 215, 179, 62, 35, 154, 162, 190, 69, 188, 119, 62, 64, 188, 30, 61, 61, 210, 20, 62, 209, 68, 15, 190, 109, 5, 55, 60, 159, 189, 88, 189, 127, 113, 183, 62, 142, 85, 16, 62, 44, 47, 30, 62, 13, 70, 20, 63, 218, 34, 107, 191, 21, 85, 254, 62, 4, 151, 196, 61, 44, 68, 224, 62, 243, 50, 108, 190, 12, 102, 231, 62, 167, 98, 203, 190, 252, 92, 203, 62, 182, 134, 173, 190, 182, 215, 244, 190, 170, 224, 189, 189, 63, 30, 225, 190, 20, 170, 6, 63, 35, 212, 226, 189, 215, 226, 22, 191, 129, 136, 160, 62, 224, 101, 20, 188, 91, 97, 106, 191, 231, 70, 170, 62, 230, 150, 32, 191, 3, 36, 104, 187, 232, 223, 14, 191, 167, 171, 36, 190, 69, 39, 239, 190, 89, 139, 137, 190, 47, 253, 184, 190, 249, 207, 114, 62, 243, 78, 221, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 248, 35, 191, 219, 58, 172, 190, 214, 157, 98, 62, 92, 227, 53, 62, 213, 16, 0, 191, 167, 253, 136, 188, 191, 110, 6, 63, 141, 17, 207, 189, 123, 83, 68, 190, 94, 23, 225, 62, 199, 32, 57, 63, 152, 91, 100, 190, 79, 180, 186, 190, 5, 198, 226, 190, 34, 97, 9, 190, 217, 127, 28, 63, 33, 198, 227, 62, 93, 65, 135, 62, 61, 203, 60, 62, 213, 119, 50, 63, 253, 165, 87, 190, 41, 91, 10, 63, 216, 18, 229, 62, 126, 161, 59, 62, 62, 51, 174, 190, 18, 219, 15, 62, 146, 81, 200, 190, 158, 108, 0, 190, 182, 59, 49, 190, 226, 253, 84, 61, 172, 189, 82, 62, 230, 33, 74, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 3, 45, 62, 214, 30, 119, 62, 1, 28, 55, 189, 133, 118, 3, 62, 138, 97, 244, 62, 154, 152, 235, 61, 179, 185, 213, 61, 123, 92, 146, 187, 102, 127, 11, 61, 148, 136, 43, 62, 141, 176, 237, 61, 20, 211, 22, 190, 112, 178, 78, 190, 222, 70, 59, 189, 202, 101, 2, 61, 198, 146, 88, 189, 83, 177, 106, 61, 103, 208, 99, 190, 79, 216, 6, 190, 187, 232, 152, 189, 158, 63, 153, 183, 144, 57, 6, 190, 14, 132, 49, 60, 195, 103, 219, 61, 131, 201, 127, 62, 162, 150, 232, 189, 100, 90, 103, 189, 144, 102, 58, 61, 202, 132, 1, 191, 19, 203, 223, 61, 26, 190, 93, 189, 223, 108, 61, 190, 156, 209, 19, 190, 225, 253, 161, 189, 79, 49, 255, 188, 13, 255, 77, 61, 76, 94, 179, 189, 135, 7, 27, 190, 202, 182, 82, 60, 191, 88, 8, 62, 76, 175, 252, 189, 92, 55, 159, 189, 28, 100, 242, 61, 152, 184, 207, 61, 82, 100, 38, 190, 12, 137, 33, 190, 67, 212, 100, 59, 98, 238, 181, 187, 73, 1, 197, 60, 52, 160, 145, 61, 104, 187, 151, 61, 165, 206, 157, 188, 83, 120, 188, 61, 253, 199, 222, 189, 169, 107, 31, 189, 85, 161, 147, 189, 131, 34, 192, 61, 68, 247, 174, 189, 26, 74, 173, 189, 3, 182, 236, 189, 120, 70, 32, 190, 190, 193, 50, 190, 24, 231, 40, 190, 107, 138, 40, 187, 204, 117, 151, 189, 50, 151, 4, 62, 238, 194, 204, 61, 153, 63, 99, 189, 176, 19, 17, 190, 170, 143, 183, 60, 202, 207, 135, 61, 151, 123, 19, 62, 254, 170, 7, 190, 78, 192, 77, 189, 114, 13, 5, 61, 177, 49, 131, 61, 175, 83, 164, 61, 181, 88, 211, 61, 0, 182, 222, 189, 144, 114, 45, 190, 194, 91, 59, 59, 137, 14, 12, 189, 158, 174, 42, 190, 156, 66, 12, 62, 158, 167, 238, 61, 62, 218, 30, 190, 175, 235, 32, 190, 93, 107, 36, 190, 128, 233, 49, 61, 216, 168, 135, 189, 16, 120, 51, 61, 142, 65, 42, 189, 228, 69, 112, 60, 130, 10, 76, 61, 75, 68, 174, 60, 61, 253, 182, 61, 68, 117, 57, 62, 35, 212, 93, 190, 139, 9, 126, 189, 189, 34, 160, 62, 213, 19, 25, 191, 245, 30, 23, 62, 181, 17, 118, 189, 253, 30, 142, 190, 169, 0, 247, 61, 26, 102, 248, 61, 42, 66, 239, 61, 231, 130, 40, 190, 181, 67, 244, 62, 80, 124, 8, 62, 205, 115, 103, 61, 138, 147, 13, 189, 188, 203, 161, 189, 43, 221, 154, 61, 115, 245, 241, 62, 76, 179, 24, 190, 243, 32, 240, 60, 68, 166, 147, 189, 16, 108, 126, 190, 148, 4, 52, 189, 40, 205, 230, 61, 116, 109, 186, 62, 102, 6, 181, 190, 43, 150, 151, 62, 192, 124, 32, 191, 138, 7, 1, 189, 124, 50, 244, 188, 55, 232, 25, 191, 47, 213, 211, 185, 249, 135, 42, 190, 239, 251, 137, 189, 118, 211, 123, 62, 211, 58, 159, 189, 46, 42, 220, 189, 48, 113, 67, 61, 92, 99, 152, 61, 14, 80, 162, 188, 139, 118, 24, 62, 254, 12, 200, 188, 242, 255, 8, 191, 150, 243, 175, 62, 41, 93, 55, 62, 165, 225, 42, 190, 36, 68, 47, 191, 23, 148, 141, 62, 60, 98, 148, 62, 72, 196, 234, 62, 27, 230, 248, 61, 183, 78, 38, 62, 157, 105, 177, 61, 130, 99, 196, 190, 79, 13, 107, 62, 218, 128, 190, 189, 88, 62, 62, 62, 48, 58, 36, 189, 176, 255, 9, 61, 114, 106, 39, 191, 234, 51, 96, 190, 212, 243, 89, 189, 220, 1, 128, 191, 164, 17, 50, 62, 189, 133, 67, 190, 69, 139, 213, 60, 119, 2, 108, 62, 24, 15, 163, 190, 82, 231, 71, 61, 41, 160, 241, 189, 18, 143, 10, 62, 201, 167, 117, 62, 153, 56, 5, 62, 141, 221, 1, 62, 200, 64, 84, 61, 148, 150, 231, 188, 118, 168, 217, 189, 66, 214, 182, 59, 54, 81, 25, 62, 32, 45, 45, 62, 39, 86, 139, 61, 208, 167, 219, 60, 190, 149, 92, 62, 199, 236, 40, 190, 218, 52, 215, 61, 254, 51, 33, 190, 96, 86, 3, 62, 232, 144, 134, 189, 110, 125, 104, 189, 12, 82, 59, 190, 74, 130, 214, 186, 79, 233, 158, 188, 80, 148, 180, 61, 95, 214, 144, 60, 157, 35, 45, 189, 129, 79, 40, 62, 17, 230, 182, 61, 124, 106, 112, 62, 234, 48, 19, 191, 107, 213, 91, 61, 226, 32, 109, 190, 26, 247, 167, 62, 7, 84, 51, 61, 238, 10, 187, 61, 40, 128, 87, 62, 14, 219, 54, 62, 3, 64, 97, 62, 246, 79, 91, 190, 64, 251, 3, 191, 255, 38, 45, 190, 230, 234, 66, 62, 69, 19, 77, 62, 225, 86, 144, 60, 13, 168, 234, 190, 21, 107, 85, 61, 221, 145, 25, 62, 159, 29, 20, 61, 227, 121, 35, 61, 21, 70, 16, 62, 6, 200, 14, 191, 192, 241, 235, 190, 47, 179, 244, 61, 108, 90, 29, 190, 31, 177, 241, 62, 21, 109, 218, 62, 203, 226, 129, 60, 117, 111, 54, 62, 88, 68, 153, 190, 221, 104, 209, 189, 126, 182, 197, 189, 179, 203, 64, 62, 138, 59, 161, 189, 71, 90, 31, 190, 23, 217, 13, 188, 154, 180, 134, 190, 237, 239, 28, 62, 5, 94, 213, 61, 107, 78, 62, 62, 206, 243, 187, 58, 204, 102, 152, 62, 186, 146, 89, 62, 44, 226, 16, 61, 219, 125, 55, 190, 1, 38, 5, 190, 36, 23, 25, 191, 96, 219, 160, 62, 126, 49, 187, 61, 136, 143, 160, 189, 91, 6, 235, 190, 196, 201, 81, 61, 230, 219, 183, 189, 228, 118, 48, 62, 76, 187, 163, 61, 19, 241, 202, 190, 37, 70, 224, 62, 239, 205, 43, 190, 162, 58, 90, 61, 178, 239, 95, 61, 35, 115, 68, 190, 65, 42, 98, 60, 0, 210, 149, 61, 172, 138, 57, 190, 232, 68, 14, 61, 187, 220, 186, 189, 247, 253, 37, 190, 132, 121, 172, 189, 252, 69, 210, 61, 209, 247, 156, 189, 35, 110, 76, 190, 224, 238, 210, 189, 72, 236, 146, 61, 101, 1, 235, 61, 197, 74, 167, 189, 103, 195, 72, 60, 244, 95, 190, 189, 157, 180, 84, 189, 146, 5, 194, 61, 184, 181, 233, 61, 136, 160, 201, 189, 233, 218, 34, 62, 25, 145, 167, 61, 70, 158, 41, 61, 142, 149, 51, 190, 28, 210, 99, 60, 6, 31, 187, 188, 103, 71, 183, 189, 132, 238, 143, 189, 67, 44, 36, 61, 40, 222, 199, 61, 254, 125, 11, 190, 186, 67, 5, 62, 143, 40, 14, 62, 1, 117, 70, 62, 247, 174, 178, 188, 178, 145, 122, 59, 112, 212, 8, 63, 154, 35, 232, 189, 19, 180, 138, 62, 143, 53, 151, 62, 122, 92, 33, 190, 15, 98, 59, 190, 218, 224, 10, 62, 94, 56, 227, 61, 202, 49, 65, 191, 86, 201, 0, 62, 207, 54, 7, 62, 212, 177, 144, 62, 90, 132, 172, 61, 125, 215, 202, 61, 216, 22, 130, 190, 19, 204, 69, 189, 11, 83, 170, 61, 52, 63, 71, 190, 183, 83, 134, 62, 235, 235, 128, 189, 16, 145, 170, 62, 95, 212, 57, 62, 82, 5, 189, 62, 243, 55, 208, 190, 169, 21, 246, 189, 30, 158, 244, 188, 176, 102, 147, 61, 18, 141, 204, 61, 73, 76, 188, 189, 144, 206, 179, 189, 82, 128, 194, 188, 104, 139, 102, 61, 22, 206, 30, 189, 61, 100, 30, 190, 220, 177, 184, 61, 177, 97, 200, 60, 168, 132, 207, 61, 160, 251, 87, 62, 233, 57, 46, 62, 208, 203, 178, 61, 66, 78, 137, 188, 54, 49, 50, 189, 214, 126, 52, 62, 120, 186, 75, 62, 103, 238, 84, 62, 74, 140, 38, 189, 226, 253, 68, 189, 163, 219, 134, 62, 248, 245, 12, 190, 192, 235, 61, 62, 74, 24, 234, 61, 154, 211, 188, 61, 57, 26, 133, 188, 113, 230, 78, 190, 182, 241, 68, 61, 125, 52, 211, 188, 25, 93, 135, 62, 88, 193, 156, 61, 175, 40, 139, 60, 124, 46, 220, 60, 32, 144, 101, 190, 49, 117, 8, 62, 55, 69, 127, 188, 79, 156, 102, 189, 242, 37, 175, 190, 244, 218, 10, 62, 249, 56, 46, 62, 214, 201, 224, 189, 76, 198, 7, 190, 58, 165, 185, 61, 245, 107, 109, 189, 137, 113, 13, 62, 69, 128, 188, 189, 125, 72, 255, 189, 51, 205, 167, 189, 99, 121, 16, 62, 18, 116, 16, 189, 52, 152, 25, 190, 164, 61, 96, 61, 148, 216, 230, 61, 75, 64, 230, 189, 34, 97, 21, 62, 234, 190, 3, 62, 250, 48, 76, 61, 192, 111, 113, 60, 158, 170, 23, 61, 230, 97, 47, 190, 135, 154, 154, 189, 67, 130, 48, 62, 151, 49, 219, 189, 32, 26, 200, 61, 17, 59, 188, 60, 195, 135, 41, 190, 10, 43, 146, 62, 244, 232, 132, 62, 116, 251, 238, 60, 223, 32, 17, 190, 110, 2, 173, 189, 152, 167, 23, 62, 209, 117, 247, 61, 99, 62, 99, 61, 183, 26, 8, 190, 9, 103, 234, 61, 223, 206, 153, 62, 208, 60, 129, 190, 172, 118, 84, 60, 130, 70, 246, 59, 107, 191, 168, 189, 74, 128, 142, 62, 173, 233, 217, 61, 243, 16, 211, 190, 50, 223, 163, 189, 100, 229, 240, 61, 152, 108, 50, 62, 104, 21, 108, 189, 163, 216, 228, 189, 12, 216, 68, 190, 25, 241, 110, 190, 173, 107, 226, 61, 36, 145, 226, 190, 137, 103, 188, 62, 94, 236, 4, 62, 27, 81, 12, 62, 145, 86, 158, 62, 197, 217, 198, 190, 74, 236, 135, 190, 247, 175, 79, 190, 140, 29, 89, 62, 145, 231, 95, 190, 200, 239, 77, 61, 102, 160, 154, 188, 19, 195, 139, 190, 79, 50, 135, 61, 190, 168, 27, 62, 32, 116, 251, 61, 131, 86, 1, 190, 76, 81, 226, 62, 10, 187, 126, 61, 48, 26, 89, 189, 212, 154, 184, 189, 14, 3, 230, 59, 188, 34, 202, 190, 82, 99, 215, 62, 255, 252, 21, 61, 67, 3, 174, 61, 125, 102, 154, 190, 135, 121, 100, 189, 17, 155, 253, 188, 38, 139, 16, 188, 118, 30, 92, 62, 242, 39, 252, 189, 133, 219, 155, 62, 169, 63, 86, 190, 199, 250, 141, 189, 137, 167, 97, 61, 57, 244, 35, 190, 119, 30, 15, 188, 234, 72, 230, 61, 129, 165, 129, 189, 84, 11, 220, 189, 27, 87, 14, 62, 20, 84, 179, 61, 9, 64, 62, 190, 88, 134, 5, 190, 46, 15, 79, 61, 196, 37, 0, 62, 22, 63, 240, 59, 28, 131, 41, 190, 60, 218, 224, 189, 7, 18, 183, 189, 207, 13, 2, 190, 31, 245, 44, 62, 132, 89, 150, 61, 16, 153, 95, 189, 30, 214, 137, 60, 204, 27, 156, 188, 59, 52, 35, 190, 229, 148, 51, 190, 79, 43, 180, 189, 200, 28, 197, 188, 220, 94, 245, 189, 95, 47, 33, 190, 91, 234, 160, 61, 24, 186, 35, 190, 165, 161, 14, 62, 94, 140, 216, 189, 193, 100, 29, 190, 213, 187, 205, 61, 157, 30, 126, 61, 199, 81, 245, 187, 227, 123, 66, 189, 138, 55, 59, 61, 15, 146, 212, 186, 188, 130, 4, 190, 253, 72, 55, 62, 25, 101, 120, 61, 141, 246, 244, 61, 135, 124, 162, 60, 26, 152, 143, 62, 78, 107, 32, 189, 234, 44, 228, 189, 174, 71, 0, 62, 240, 29, 18, 60, 171, 57, 50, 62, 206, 85, 91, 62, 175, 236, 171, 60, 153, 45, 12, 62, 67, 176, 8, 61, 28, 127, 175, 61, 31, 126, 52, 61, 129, 51, 69, 189, 61, 212, 253, 61, 20, 242, 97, 61, 194, 221, 135, 61, 251, 173, 35, 62, 113, 100, 214, 189, 62, 155, 73, 62, 172, 198, 165, 187, 165, 187, 25, 61, 56, 252, 134, 189, 46, 250, 0, 62, 84, 136, 111, 61, 160, 46, 242, 61, 128, 71, 30, 62, 36, 112, 145, 189, 198, 130, 103, 61, 218, 6, 139, 189, 139, 206, 12, 62, 113, 79, 170, 189, 236, 159, 40, 190, 70, 31, 18, 189, 61, 7, 67, 61, 43, 65, 28, 62, 13, 114, 148, 189, 206, 195, 246, 61, 49, 195, 137, 189, 147, 213, 184, 61, 144, 44, 242, 189, 207, 181, 185, 189, 193, 198, 131, 61, 121, 170, 216, 61, 150, 49, 27, 61, 43, 45, 210, 60, 150, 67, 23, 190, 222, 240, 114, 61, 204, 55, 44, 190, 162, 169, 133, 60, 98, 196, 60, 190, 169, 94, 106, 61, 79, 30, 4, 190, 173, 159, 2, 190, 64, 46, 23, 60, 168, 128, 47, 61, 41, 65, 158, 62, 9, 109, 107, 62, 163, 171, 254, 58, 39, 241, 98, 189, 98, 253, 46, 190, 19, 37, 91, 61, 20, 245, 240, 61, 75, 218, 30, 190, 70, 218, 171, 61, 240, 252, 54, 62, 254, 191, 69, 62, 76, 195, 212, 190, 184, 46, 78, 189, 131, 114, 55, 190, 85, 250, 82, 61, 20, 8, 77, 62, 202, 209, 46, 62, 85, 101, 242, 190, 132, 83, 217, 61, 163, 139, 15, 189, 250, 201, 129, 61, 232, 199, 187, 188, 113, 200, 31, 62, 56, 133, 243, 188, 91, 88, 116, 190, 211, 235, 1, 62, 76, 3, 26, 190, 53, 226, 220, 62, 203, 191, 132, 62, 57, 233, 243, 60, 26, 180, 80, 62, 1, 71, 60, 187, 90, 116, 51, 189, 91, 196, 56, 189, 96, 34, 38, 188, 159, 18, 5, 190, 117, 78, 218, 61, 154, 52, 151, 61, 172, 73, 120, 60, 244, 213, 96, 61, 57, 8, 141, 61, 62, 76, 55, 62, 162, 67, 11, 62, 87, 85, 52, 190, 8, 63, 183, 60, 254, 0, 26, 190, 15, 106, 161, 189, 91, 192, 86, 62, 118, 156, 248, 61, 125, 90, 251, 189, 40, 105, 141, 62, 78, 73, 239, 61, 109, 199, 139, 62, 207, 85, 129, 61, 4, 52, 53, 189, 29, 153, 51, 190, 72, 9, 171, 189, 249, 248, 62, 61, 63, 245, 33, 189, 60, 64, 199, 62, 213, 71, 200, 60, 36, 254, 126, 62, 253, 152, 230, 61, 98, 216, 72, 190, 88, 195, 251, 190, 74, 181, 169, 190, 198, 62, 108, 190, 211, 60, 24, 191, 139, 92, 194, 190, 188, 221, 221, 189, 111, 9, 106, 190, 150, 110, 21, 62, 213, 208, 232, 188, 54, 119, 5, 190, 80, 140, 253, 190, 90, 7, 176, 62, 99, 26, 231, 190, 140, 54, 9, 190, 23, 70, 119, 191, 125, 148, 220, 189, 159, 106, 208, 61, 135, 67, 117, 62, 243, 41, 168, 62, 188, 211, 61, 187, 57, 254, 135, 62, 128, 145, 128, 191, 143, 137, 0, 189, 149, 11, 208, 61, 214, 67, 121, 190, 35, 35, 36, 190, 104, 188, 132, 62, 241, 234, 139, 190, 72, 40, 224, 189, 65, 32, 17, 190, 244, 35, 146, 191, 172, 1, 101, 189, 242, 141, 10, 190, 87, 125, 27, 190, 4, 189, 233, 189, 34, 11, 153, 189, 236, 125, 248, 189, 223, 197, 197, 59, 98, 44, 35, 189, 23, 115, 42, 188, 222, 122, 96, 61, 211, 22, 46, 61, 105, 234, 160, 189, 145, 214, 33, 189, 239, 208, 189, 189, 84, 30, 179, 60, 20, 63, 248, 61, 14, 98, 213, 61, 241, 167, 47, 190, 121, 253, 48, 190, 194, 114, 4, 61, 82, 220, 12, 62, 30, 134, 27, 61, 223, 101, 191, 189, 187, 236, 234, 60, 140, 189, 4, 62, 122, 97, 134, 61, 42, 119, 19, 190, 11, 13, 242, 189, 30, 221, 13, 190, 255, 162, 165, 61, 114, 93, 222, 189, 205, 61, 75, 189, 233, 73, 139, 189, 61, 235, 195, 190, 150, 238, 211, 189, 52, 114, 61, 186, 5, 214, 207, 190, 216, 11, 80, 190, 109, 56, 31, 60, 204, 135, 124, 190, 200, 63, 237, 61, 135, 48, 152, 188, 185, 30, 9, 62, 146, 204, 209, 190, 197, 50, 168, 62, 46, 222, 64, 60, 237, 131, 169, 189, 39, 198, 99, 191, 77, 82, 226, 189, 218, 113, 202, 60, 137, 148, 83, 62, 57, 104, 205, 61, 90, 55, 231, 189, 94, 128, 135, 61, 185, 142, 51, 191, 246, 176, 33, 190, 71, 198, 25, 190, 60, 220, 33, 62, 57, 189, 1, 190, 211, 73, 185, 62, 79, 20, 130, 190, 126, 28, 159, 61, 44, 8, 50, 190, 44, 171, 115, 191, 90, 172, 86, 190, 148, 2, 186, 190, 239, 210, 147, 190, 158, 123, 164, 187, 133, 204, 103, 190, 69, 252, 5, 189, 133, 68, 28, 189, 253, 65, 86, 190, 64, 199, 84, 62, 182, 213, 23, 190, 133, 134, 119, 60, 85, 19, 20, 190, 202, 136, 15, 63, 19, 147, 146, 189, 149, 58, 194, 189, 4, 254, 134, 189, 240, 49, 119, 61, 6, 84, 119, 190, 226, 161, 208, 62, 160, 58, 62, 62, 118, 231, 25, 62, 35, 17, 8, 189, 191, 97, 227, 189, 244, 33, 145, 61, 114, 23, 220, 61, 68, 96, 4, 61, 13, 83, 197, 190, 138, 88, 205, 62, 69, 86, 28, 190, 109, 3, 16, 61, 119, 69, 152, 189, 92, 185, 206, 190, 107, 211, 188, 190, 49, 64, 230, 188, 187, 25, 113, 189, 189, 182, 104, 62, 87, 174, 186, 188, 130, 59, 205, 61, 222, 253, 246, 189, 151, 100, 109, 189, 157, 100, 61, 62, 18, 198, 35, 62, 128, 54, 22, 190, 15, 9, 238, 189, 136, 115, 19, 62, 87, 109, 31, 61, 230, 36, 5, 62, 239, 225, 210, 189, 185, 12, 135, 61, 137, 49, 141, 190, 177, 201, 169, 62, 181, 128, 124, 61, 234, 15, 192, 189, 53, 151, 191, 190, 49, 95, 91, 189, 14, 81, 140, 189, 134, 145, 21, 62, 2, 167, 125, 62, 65, 171, 167, 190, 144, 43, 136, 62, 94, 134, 70, 190, 65, 62, 164, 61, 233, 171, 79, 61, 197, 170, 97, 60, 24, 202, 108, 61, 173, 108, 116, 188, 252, 69, 176, 189, 243, 241, 24, 60, 160, 116, 53, 61, 9, 248, 75, 62, 53, 105, 33, 61, 94, 147, 80, 188, 76, 156, 142, 189, 188, 241, 250, 189, 251, 171, 204, 189, 141, 186, 176, 61, 178, 225, 74, 190, 124, 98, 221, 61, 99, 213, 184, 61, 87, 150, 132, 61, 139, 194, 182, 62, 44, 93, 91, 190, 212, 225, 126, 190, 107, 43, 190, 190, 41, 147, 7, 190, 230, 30, 247, 61, 144, 66, 67, 62, 48, 218, 18, 62, 161, 85, 99, 62, 127, 192, 110, 61, 208, 177, 205, 189, 44, 91, 122, 189, 62, 229, 11, 190, 116, 25, 169, 189, 144, 0, 194, 189, 3, 4, 40, 189, 124, 54, 137, 190, 3, 50, 56, 62, 245, 30, 41, 62, 101, 169, 168, 189, 54, 51, 131, 190, 45, 139, 172, 189, 51, 8, 162, 61, 113, 211, 2, 190, 54, 35, 67, 189, 171, 221, 55, 62, 109, 19, 191, 60, 42, 107, 121, 62, 129, 235, 232, 190, 243, 23, 169, 189, 116, 27, 212, 189, 139, 73, 41, 61, 114, 32, 27, 62, 206, 76, 163, 62, 86, 234, 27, 191, 184, 240, 17, 61, 174, 227, 220, 189, 227, 76, 77, 62, 150, 204, 75, 62, 241, 66, 95, 189, 199, 208, 185, 190, 125, 243, 127, 189, 231, 90, 176, 189, 9, 71, 34, 191, 29, 10, 201, 189, 198, 6, 198, 61, 57, 1, 70, 62, 237, 144, 23, 62, 239, 240, 99, 188, 28, 70, 243, 61, 111, 2, 31, 62, 189, 171, 103, 189, 35, 209, 17, 190, 11, 94, 192, 61, 178, 236, 198, 189, 209, 194, 143, 61, 179, 105, 154, 188, 114, 65, 139, 187, 66, 55, 51, 190, 55, 64, 112, 189, 116, 187, 52, 61, 68, 56, 50, 190, 72, 153, 122, 61, 119, 87, 101, 61, 79, 201, 21, 62, 124, 130, 154, 189, 176, 210, 50, 61, 127, 189, 159, 61, 72, 99, 31, 190, 75, 68, 26, 190, 102, 43, 33, 62, 68, 251, 222, 189, 71, 29, 19, 190, 147, 200, 178, 189, 105, 86, 33, 190, 47, 23, 135, 61, 37, 212, 229, 61, 132, 180, 56, 190, 191, 49, 6, 189, 23, 158, 161, 188, 79, 22, 226, 61, 210, 128, 163, 62, 15, 217, 23, 62, 112, 89, 46, 190, 218, 6, 74, 61, 233, 68, 119, 190, 32, 74, 156, 62, 207, 155, 52, 189, 104, 5, 40, 190, 121, 31, 220, 61, 205, 129, 117, 61, 184, 208, 78, 62, 192, 210, 2, 190, 114, 129, 184, 190, 60, 199, 50, 190, 253, 116, 133, 60, 247, 225, 106, 62, 153, 70, 18, 62, 210, 121, 194, 190, 66, 180, 120, 60, 155, 140, 254, 189, 106, 81, 117, 62, 170, 141, 255, 60, 172, 129, 104, 189, 234, 51, 179, 189, 17, 234, 171, 190, 106, 243, 27, 62, 121, 10, 15, 190, 214, 230, 135, 62, 202, 104, 134, 61, 236, 36, 226, 61, 181, 34, 68, 62, 75, 186, 143, 190, 62, 77, 149, 190, 45, 223, 27, 190, 84, 124, 26, 189, 50, 25, 92, 190, 138, 14, 158, 190, 30, 70, 96, 61, 182, 129, 167, 190, 99, 201, 150, 62, 201, 174, 11, 190, 38, 53, 19, 61, 25, 58, 135, 190, 106, 129, 132, 62, 81, 175, 9, 62, 156, 216, 208, 190, 129, 232, 244, 190, 1, 254, 228, 189, 126, 73, 23, 62, 16, 231, 10, 61, 33, 248, 150, 60, 23, 77, 70, 61, 251, 37, 226, 61, 217, 183, 24, 191, 132, 143, 25, 190, 43, 124, 164, 189, 233, 77, 14, 190, 115, 37, 0, 191, 205, 83, 49, 62, 132, 226, 255, 190, 165, 72, 47, 62, 223, 192, 141, 60, 78, 238, 116, 191, 161, 28, 76, 61, 208, 80, 42, 189, 54, 169, 196, 61, 221, 180, 181, 189, 39, 74, 237, 61, 7, 202, 152, 189, 146, 208, 15, 190, 238, 135, 29, 190, 240, 240, 10, 189, 87, 187, 160, 189, 146, 233, 238, 189, 247, 51, 61, 190, 52, 113, 17, 190, 18, 135, 56, 189, 194, 249, 236, 61, 186, 171, 198, 189, 17, 105, 238, 189, 21, 88, 36, 62, 162, 163, 211, 188, 192, 69, 9, 189, 120, 12, 90, 189, 40, 194, 217, 189, 115, 116, 224, 61, 182, 250, 164, 61, 15, 195, 222, 189, 246, 160, 14, 62, 215, 120, 4, 190, 147, 55, 135, 61, 146, 16, 251, 189, 255, 149, 221, 61, 4, 201, 171, 61, 62, 78, 16, 62, 234, 3, 36, 60, 231, 45, 23, 62, 220, 138, 111, 189, 177, 55, 220, 61, 27, 66, 5, 190, 112, 236, 62, 190, 225, 110, 107, 189, 249, 73, 6, 61, 245, 105, 233, 61, 201, 131, 20, 62, 24, 25, 65, 189, 66, 235, 10, 62, 223, 128, 193, 189, 239, 159, 23, 190, 142, 38, 197, 61, 132, 158, 45, 61, 129, 80, 244, 189, 55, 225, 209, 188, 105, 0, 208, 60, 14, 3, 139, 60, 176, 39, 170, 61, 40, 153, 7, 190, 73, 237, 252, 60, 234, 13, 154, 189, 184, 122, 157, 189, 105, 28, 207, 189, 169, 89, 30, 190, 36, 12, 146, 188, 238, 0, 74, 61, 13, 12, 152, 61, 122, 215, 242, 188, 134, 191, 87, 190, 183, 121, 105, 189, 57, 151, 23, 191, 85, 72, 128, 190, 100, 129, 124, 189, 110, 178, 138, 190, 78, 220, 69, 61, 11, 172, 18, 62, 10, 163, 255, 189, 171, 110, 143, 62, 59, 76, 2, 61, 237, 165, 214, 61, 65, 8, 129, 190, 125, 177, 167, 62, 121, 200, 30, 190, 219, 90, 82, 60, 197, 220, 23, 190, 134, 93, 14, 62, 160, 221, 95, 190, 180, 30, 128, 62, 234, 11, 143, 188, 168, 52, 48, 189, 21, 32, 34, 62, 206, 43, 135, 190, 45, 118, 47, 190, 250, 111, 142, 61, 235, 128, 54, 62, 249, 57, 10, 190, 145, 226, 162, 62, 36, 34, 53, 190, 69, 139, 64, 190, 27, 121, 27, 190, 193, 49, 228, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 208, 187, 189, 19, 198, 152, 186, 156, 104, 183, 189, 28, 110, 136, 62, 33, 131, 210, 61, 157, 117, 86, 62, 67, 128, 203, 61, 154, 180, 225, 59, 23, 44, 48, 190, 226, 211, 37, 61, 91, 200, 191, 61, 45, 216, 34, 62, 196, 166, 0, 62, 231, 115, 220, 61, 215, 36, 25, 189, 103, 95, 153, 62, 190, 11, 39, 190, 77, 39, 221, 189, 137, 139, 59, 62, 50, 94, 183, 62, 241, 186, 68, 190, 129, 150, 61, 62, 145, 160, 158, 61, 207, 245, 128, 189, 25, 163, 154, 190, 65, 56, 143, 61, 245, 157, 85, 190, 186, 53, 208, 61, 235, 21, 54, 62, 51, 41, 22, 190, 122, 108, 51, 190, 28, 252, 44, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 53, 0, 62, 235, 225, 41, 190, 68, 62, 50, 190, 55, 153, 215, 62, 72, 254, 14, 63, 152, 109, 81, 60, 40, 45, 243, 190, 173, 48, 148, 62, 180, 194, 25, 61, 15, 135, 205, 62, 168, 115, 30, 190, 154, 84, 178, 189, 212, 29, 153, 190, 0, 47, 165, 62, 248, 63, 9, 190, 120, 194, 33, 189, 129, 155, 38, 190, 107, 111, 161, 190, 60, 130, 38, 190, 114, 18, 128, 63, 3, 131, 8, 62, 142, 202, 47, 63, 140, 172, 32, 62, 204, 208, 89, 62, 171, 40, 15, 190, 69, 163, 165, 190, 8, 136, 66, 60, 231, 186, 157, 190, 164, 121, 64, 63, 52, 236, 221, 187, 220, 147, 25, 190, 51, 83, 227, 62, 236, 95, 236, 61, 241, 178, 7, 190, 117, 145, 22, 62, 83, 152, 150, 61, 108, 117, 27, 190, 48, 150, 105, 190, 195, 31, 15, 62, 52, 14, 119, 188, 176, 217, 18, 62, 195, 115, 36, 62, 103, 136, 98, 190, 159, 57, 75, 190, 6, 96, 126, 61, 41, 214, 150, 61, 31, 52, 206, 189, 99, 2, 132, 190, 26, 107, 17, 61, 168, 194, 9, 62, 25, 218, 121, 190, 235, 145, 23, 61, 73, 52, 239, 61, 114, 37, 150, 62, 16, 183, 46, 62, 101, 114, 74, 61, 219, 109, 82, 62, 141, 246, 73, 189, 235, 32, 170, 189, 99, 3, 229, 61, 230, 21, 227, 187, 74, 151, 178, 189, 200, 55, 228, 189, 230, 65, 136, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 68, 70, 190, 15, 136, 114, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {225, 105, 207, 187, 217, 247, 192, 190, 218, 57, 192, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {208, 135, 172, 189, 84, 255, 126, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0084/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}