// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 164, 124, 190, 194, 9, 45, 190, 210, 66, 16, 63, 255, 53, 170, 62, 176, 16, 229, 62, 12, 225, 146, 62, 180, 17, 90, 190, 222, 43, 144, 62, 85, 225, 194, 190, 47, 182, 26, 63, 169, 14, 130, 189, 64, 203, 24, 191, 203, 119, 27, 62, 64, 30, 90, 62, 173, 159, 136, 62, 4, 110, 36, 190, 39, 30, 50, 191, 237, 125, 229, 190, 78, 242, 154, 62, 199, 22, 17, 63, 208, 34, 162, 61, 253, 165, 141, 62, 130, 32, 212, 190, 127, 141, 173, 62, 3, 220, 10, 191, 46, 131, 61, 62, 71, 158, 192, 62, 147, 145, 147, 190, 216, 75, 20, 191, 121, 2, 202, 190, 156, 20, 77, 61, 159, 246, 42, 190, 52, 32, 204, 190, 154, 207, 255, 190, 2, 98, 230, 62, 84, 170, 168, 190, 13, 49, 27, 191, 117, 61, 78, 191, 210, 150, 76, 62, 191, 28, 22, 189, 109, 164, 78, 190, 247, 211, 212, 190, 93, 93, 154, 190, 40, 213, 14, 191, 79, 166, 166, 190, 48, 183, 191, 62, 49, 210, 79, 63, 83, 146, 197, 190, 125, 207, 9, 63, 168, 70, 131, 62, 69, 176, 133, 62, 128, 221, 185, 190, 236, 3, 12, 63, 81, 5, 49, 62, 40, 35, 224, 188, 70, 239, 107, 191, 85, 57, 68, 62, 4, 80, 117, 190, 158, 133, 90, 62, 249, 61, 36, 188, 61, 210, 20, 62, 209, 68, 15, 190, 109, 5, 55, 60, 25, 100, 41, 188, 123, 227, 157, 62, 173, 202, 35, 62, 109, 158, 13, 62, 19, 222, 39, 63, 51, 250, 226, 190, 253, 192, 238, 62, 229, 169, 34, 190, 89, 137, 239, 62, 121, 50, 155, 61, 107, 66, 247, 62, 197, 131, 151, 190, 132, 122, 221, 62, 15, 187, 27, 190, 238, 243, 219, 190, 64, 85, 39, 62, 147, 239, 26, 191, 238, 25, 227, 62, 130, 5, 132, 190, 153, 241, 26, 191, 22, 196, 45, 62, 31, 50, 83, 62, 73, 42, 103, 191, 141, 25, 143, 62, 26, 45, 51, 191, 171, 187, 185, 62, 109, 146, 239, 190, 244, 40, 63, 190, 49, 58, 123, 190, 148, 144, 107, 190, 6, 28, 181, 190, 106, 16, 16, 63, 144, 16, 14, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 83, 49, 191, 211, 177, 192, 190, 254, 115, 146, 62, 136, 86, 17, 62, 38, 249, 4, 191, 97, 151, 135, 61, 55, 61, 9, 63, 40, 76, 66, 190, 115, 142, 57, 190, 15, 102, 221, 62, 82, 197, 38, 63, 210, 5, 204, 189, 93, 28, 147, 190, 245, 187, 247, 190, 27, 133, 129, 189, 245, 132, 33, 63, 19, 91, 2, 63, 204, 229, 35, 62, 99, 174, 125, 62, 216, 253, 27, 63, 253, 165, 87, 190, 211, 73, 222, 62, 71, 181, 253, 62, 22, 69, 87, 62, 25, 52, 15, 191, 90, 102, 29, 62, 251, 110, 1, 191, 65, 225, 78, 189, 130, 106, 88, 190, 121, 83, 13, 62, 114, 62, 146, 62, 57, 128, 66, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 71, 30, 62, 25, 104, 255, 58, 125, 171, 230, 188, 250, 108, 251, 61, 91, 27, 108, 62, 49, 133, 226, 61, 170, 220, 203, 61, 130, 63, 49, 189, 6, 61, 13, 61, 121, 43, 42, 62, 10, 239, 10, 62, 125, 214, 2, 190, 4, 198, 255, 187, 59, 20, 143, 189, 245, 96, 44, 61, 23, 194, 78, 59, 1, 229, 24, 61, 80, 159, 57, 190, 116, 126, 205, 189, 229, 88, 167, 188, 158, 63, 153, 183, 92, 243, 108, 189, 104, 37, 103, 61, 28, 252, 44, 61, 158, 201, 131, 62, 192, 62, 241, 189, 37, 204, 71, 189, 110, 154, 9, 62, 92, 25, 164, 190, 32, 192, 253, 61, 229, 108, 122, 189, 54, 89, 53, 190, 156, 209, 19, 190, 225, 253, 161, 189, 79, 49, 255, 188, 13, 255, 77, 61, 76, 94, 179, 189, 135, 7, 27, 190, 202, 182, 82, 60, 191, 88, 8, 62, 76, 175, 252, 189, 92, 55, 159, 189, 28, 100, 242, 61, 152, 184, 207, 61, 82, 100, 38, 190, 12, 137, 33, 190, 67, 212, 100, 59, 98, 238, 181, 187, 73, 1, 197, 60, 52, 160, 145, 61, 104, 187, 151, 61, 165, 206, 157, 188, 83, 120, 188, 61, 253, 199, 222, 189, 169, 107, 31, 189, 85, 161, 147, 189, 131, 34, 192, 61, 68, 247, 174, 189, 26, 74, 173, 189, 3, 182, 236, 189, 120, 70, 32, 190, 190, 193, 50, 190, 24, 231, 40, 190, 107, 138, 40, 187, 204, 117, 151, 189, 50, 151, 4, 62, 238, 194, 204, 61, 153, 63, 99, 189, 176, 19, 17, 190, 170, 143, 183, 60, 202, 207, 135, 61, 151, 123, 19, 62, 254, 170, 7, 190, 78, 192, 77, 189, 114, 13, 5, 61, 177, 49, 131, 61, 175, 83, 164, 61, 181, 88, 211, 61, 0, 182, 222, 189, 144, 114, 45, 190, 194, 91, 59, 59, 137, 14, 12, 189, 158, 174, 42, 190, 156, 66, 12, 62, 158, 167, 238, 61, 62, 218, 30, 190, 175, 235, 32, 190, 93, 107, 36, 190, 128, 233, 49, 61, 216, 168, 135, 189, 16, 120, 51, 61, 142, 65, 42, 189, 228, 69, 112, 60, 130, 10, 76, 61, 75, 68, 174, 60, 61, 253, 182, 61, 209, 103, 94, 62, 157, 141, 79, 189, 143, 94, 66, 189, 70, 71, 201, 61, 148, 103, 252, 190, 197, 22, 15, 62, 18, 57, 69, 190, 224, 182, 140, 190, 192, 238, 101, 61, 20, 161, 7, 62, 17, 247, 178, 61, 164, 240, 25, 189, 175, 21, 240, 62, 78, 74, 58, 189, 17, 166, 182, 61, 202, 67, 246, 188, 196, 121, 230, 189, 128, 113, 166, 60, 139, 25, 222, 62, 151, 17, 39, 190, 243, 32, 240, 60, 94, 246, 224, 189, 26, 13, 97, 190, 154, 179, 41, 189, 203, 81, 24, 62, 92, 99, 35, 62, 138, 74, 176, 190, 57, 156, 135, 62, 6, 32, 24, 191, 165, 28, 4, 60, 245, 251, 200, 188, 2, 111, 195, 190, 104, 187, 9, 61, 102, 38, 72, 190, 84, 151, 110, 61, 154, 214, 188, 61, 223, 176, 61, 189, 201, 206, 71, 189, 101, 244, 63, 190, 54, 200, 154, 61, 175, 71, 144, 189, 89, 246, 107, 62, 181, 99, 2, 61, 7, 215, 145, 190, 109, 173, 211, 62, 163, 119, 2, 61, 246, 99, 146, 189, 162, 23, 183, 190, 32, 33, 208, 61, 123, 10, 64, 62, 61, 164, 227, 62, 68, 145, 163, 61, 183, 78, 38, 62, 67, 226, 80, 188, 181, 188, 173, 189, 13, 157, 37, 62, 151, 80, 195, 189, 73, 118, 27, 61, 31, 149, 172, 59, 140, 45, 128, 61, 149, 81, 15, 191, 62, 249, 242, 189, 98, 92, 54, 61, 92, 178, 134, 190, 116, 215, 33, 62, 228, 103, 23, 189, 76, 200, 247, 60, 11, 10, 94, 62, 134, 110, 81, 190, 216, 182, 214, 60, 197, 17, 162, 189, 43, 91, 44, 62, 111, 250, 41, 62, 14, 206, 217, 61, 15, 242, 222, 61, 120, 174, 137, 61, 115, 128, 207, 60, 41, 28, 26, 190, 0, 212, 171, 188, 221, 1, 89, 62, 75, 200, 61, 62, 64, 104, 55, 60, 22, 221, 154, 61, 244, 232, 32, 62, 199, 236, 40, 190, 247, 28, 164, 61, 205, 72, 236, 189, 192, 82, 19, 62, 66, 136, 135, 189, 167, 11, 147, 189, 139, 132, 21, 190, 146, 236, 71, 61, 174, 23, 224, 61, 34, 190, 135, 61, 148, 252, 154, 187, 122, 167, 61, 61, 203, 194, 29, 62, 211, 26, 250, 188, 176, 154, 64, 62, 11, 29, 5, 191, 207, 40, 143, 60, 251, 70, 89, 190, 248, 53, 159, 62, 193, 235, 150, 61, 223, 57, 10, 62, 243, 72, 12, 62, 157, 84, 212, 61, 68, 38, 91, 62, 94, 56, 74, 190, 6, 248, 186, 190, 161, 109, 36, 190, 47, 118, 186, 61, 250, 22, 56, 62, 228, 162, 24, 61, 197, 237, 174, 190, 70, 233, 140, 60, 221, 145, 25, 62, 126, 161, 3, 61, 187, 209, 25, 189, 49, 29, 35, 62, 32, 253, 242, 190, 63, 173, 204, 190, 117, 218, 221, 61, 47, 89, 143, 189, 152, 15, 0, 63, 36, 180, 200, 62, 16, 104, 86, 189, 232, 58, 60, 62, 221, 138, 60, 190, 63, 240, 198, 189, 237, 128, 205, 189, 84, 173, 199, 61, 39, 126, 1, 189, 248, 110, 28, 190, 216, 112, 123, 189, 144, 61, 118, 190, 187, 35, 247, 61, 149, 210, 225, 61, 188, 41, 57, 62, 80, 150, 139, 60, 214, 174, 203, 62, 228, 37, 8, 62, 139, 36, 113, 61, 176, 0, 50, 190, 145, 95, 67, 190, 121, 241, 2, 191, 32, 190, 168, 62, 204, 158, 5, 62, 136, 143, 160, 189, 133, 8, 168, 190, 221, 229, 115, 61, 191, 116, 207, 189, 90, 53, 191, 61, 232, 11, 176, 187, 165, 45, 184, 190, 227, 155, 240, 62, 186, 227, 187, 188, 40, 73, 101, 61, 174, 72, 86, 61, 40, 38, 37, 190, 65, 42, 98, 60, 0, 210, 149, 61, 127, 111, 27, 190, 222, 242, 131, 61, 187, 220, 186, 189, 153, 250, 6, 190, 82, 44, 96, 189, 252, 69, 210, 61, 209, 247, 156, 189, 151, 242, 45, 190, 4, 121, 150, 189, 229, 60, 207, 61, 101, 1, 235, 61, 113, 23, 83, 189, 93, 169, 34, 61, 199, 81, 131, 189, 148, 109, 68, 189, 238, 68, 213, 61, 184, 181, 233, 61, 94, 34, 158, 189, 233, 218, 34, 62, 228, 251, 186, 61, 69, 223, 143, 61, 142, 149, 51, 190, 119, 136, 50, 61, 164, 190, 230, 59, 103, 71, 183, 189, 132, 238, 143, 189, 67, 44, 36, 61, 171, 226, 1, 62, 140, 238, 217, 189, 114, 128, 35, 62, 88, 148, 160, 61, 10, 70, 185, 61, 122, 253, 154, 189, 17, 159, 213, 188, 116, 17, 124, 62, 17, 94, 44, 190, 0, 172, 123, 62, 106, 143, 25, 62, 244, 193, 195, 189, 21, 59, 77, 190, 104, 198, 218, 61, 220, 224, 19, 61, 230, 107, 138, 190, 175, 19, 138, 61, 148, 130, 198, 61, 82, 44, 126, 62, 47, 13, 191, 61, 74, 32, 155, 61, 255, 235, 118, 190, 45, 199, 27, 189, 11, 83, 170, 61, 199, 247, 17, 190, 79, 49, 98, 62, 218, 114, 19, 190, 158, 132, 137, 62, 249, 117, 25, 62, 201, 126, 166, 62, 9, 207, 82, 190, 211, 219, 181, 189, 175, 158, 174, 189, 11, 117, 62, 61, 182, 0, 79, 189, 145, 92, 252, 189, 30, 105, 156, 189, 162, 220, 37, 189, 125, 196, 159, 61, 27, 148, 162, 187, 83, 180, 57, 190, 54, 23, 235, 61, 143, 51, 45, 61, 12, 119, 102, 61, 40, 87, 17, 62, 76, 115, 252, 61, 227, 184, 181, 61, 13, 149, 189, 189, 73, 44, 130, 188, 53, 67, 2, 62, 138, 220, 64, 62, 149, 10, 79, 62, 61, 190, 153, 189, 22, 254, 152, 188, 38, 48, 64, 62, 248, 245, 12, 190, 40, 124, 2, 62, 59, 190, 210, 61, 208, 86, 211, 61, 127, 39, 7, 61, 108, 27, 59, 190, 13, 144, 17, 61, 184, 186, 43, 189, 57, 124, 135, 62, 167, 150, 69, 61, 225, 151, 49, 189, 74, 52, 150, 61, 153, 155, 57, 190, 151, 227, 249, 61, 77, 150, 229, 188, 211, 94, 108, 189, 252, 60, 162, 189, 112, 41, 227, 61, 166, 46, 76, 62, 106, 141, 22, 189, 201, 152, 160, 189, 210, 79, 206, 60, 103, 215, 199, 189, 142, 184, 18, 62, 162, 107, 32, 190, 171, 64, 6, 190, 199, 171, 254, 189, 194, 213, 23, 62, 199, 249, 171, 189, 6, 150, 255, 189, 44, 21, 173, 61, 181, 49, 140, 61, 75, 64, 230, 189, 65, 148, 237, 61, 217, 6, 5, 62, 148, 52, 51, 61, 90, 192, 25, 61, 100, 77, 21, 61, 207, 93, 232, 189, 224, 40, 39, 189, 227, 229, 90, 62, 157, 151, 8, 190, 175, 110, 55, 61, 116, 213, 174, 61, 189, 143, 19, 190, 57, 182, 103, 62, 112, 248, 116, 62, 44, 50, 92, 61, 213, 129, 254, 189, 255, 108, 145, 189, 16, 149, 37, 62, 49, 76, 47, 62, 9, 31, 14, 62, 126, 134, 25, 190, 11, 6, 189, 61, 113, 101, 148, 62, 25, 184, 88, 190, 235, 109, 142, 61, 28, 139, 255, 59, 63, 108, 18, 190, 106, 156, 118, 62, 111, 167, 25, 62, 160, 66, 129, 190, 69, 118, 105, 189, 100, 229, 240, 61, 140, 196, 55, 62, 111, 233, 218, 189, 193, 158, 175, 189, 2, 136, 3, 190, 92, 190, 84, 190, 233, 52, 243, 61, 156, 106, 161, 190, 80, 42, 209, 62, 130, 251, 239, 61, 244, 138, 243, 61, 224, 77, 165, 62, 19, 39, 156, 190, 211, 86, 250, 189, 252, 87, 37, 190, 199, 141, 56, 62, 82, 74, 4, 190, 11, 237, 130, 61, 213, 31, 49, 61, 68, 237, 166, 190, 73, 31, 129, 189, 126, 5, 31, 62, 136, 220, 18, 62, 52, 218, 127, 189, 187, 112, 250, 62, 44, 7, 86, 60, 226, 241, 170, 188, 13, 110, 235, 59, 53, 30, 226, 60, 77, 217, 200, 190, 11, 74, 180, 62, 157, 231, 85, 61, 67, 3, 174, 61, 176, 143, 107, 190, 66, 94, 8, 61, 5, 107, 173, 189, 19, 26, 253, 59, 215, 50, 58, 62, 200, 18, 7, 190, 214, 153, 133, 62, 159, 155, 42, 190, 76, 3, 26, 189, 68, 244, 112, 61, 31, 225, 137, 189, 174, 82, 61, 59, 158, 60, 242, 61, 129, 165, 129, 189, 84, 11, 220, 189, 30, 222, 19, 62, 20, 84, 179, 61, 15, 13, 59, 190, 130, 69, 253, 189, 206, 31, 121, 61, 196, 37, 0, 62, 22, 63, 240, 59, 28, 131, 41, 190, 153, 248, 216, 189, 7, 18, 183, 189, 207, 13, 2, 190, 31, 245, 44, 62, 255, 39, 159, 61, 191, 54, 74, 189, 47, 116, 186, 60, 98, 4, 113, 188, 59, 52, 35, 190, 148, 142, 46, 190, 79, 43, 180, 189, 56, 177, 119, 188, 220, 94, 245, 189, 95, 47, 33, 190, 44, 92, 178, 61, 177, 172, 30, 190, 3, 124, 19, 62, 94, 140, 216, 189, 193, 100, 29, 190, 213, 187, 205, 61, 186, 58, 17, 61, 42, 18, 143, 61, 189, 59, 126, 189, 131, 84, 233, 60, 131, 230, 147, 61, 191, 8, 46, 190, 97, 57, 85, 62, 254, 115, 188, 61, 105, 166, 94, 61, 5, 131, 43, 189, 115, 217, 112, 62, 252, 149, 10, 189, 54, 109, 253, 189, 167, 84, 187, 61, 14, 87, 57, 189, 167, 80, 71, 62, 191, 81, 97, 62, 119, 25, 220, 188, 58, 32, 65, 62, 133, 107, 52, 189, 28, 127, 175, 61, 83, 166, 188, 186, 94, 37, 28, 189, 165, 34, 16, 62, 218, 70, 155, 61, 201, 12, 67, 61, 207, 175, 47, 62, 157, 252, 168, 189, 147, 118, 138, 62, 80, 54, 30, 189, 45, 192, 147, 188, 10, 127, 136, 59, 46, 250, 0, 62, 84, 136, 111, 61, 160, 46, 242, 61, 128, 71, 30, 62, 36, 112, 145, 189, 198, 130, 103, 61, 218, 6, 139, 189, 139, 206, 12, 62, 113, 79, 170, 189, 236, 159, 40, 190, 70, 31, 18, 189, 61, 7, 67, 61, 43, 65, 28, 62, 13, 114, 148, 189, 206, 195, 246, 61, 49, 195, 137, 189, 147, 213, 184, 61, 144, 44, 242, 189, 207, 181, 185, 189, 193, 198, 131, 61, 121, 170, 216, 61, 150, 49, 27, 61, 43, 45, 210, 60, 150, 67, 23, 190, 222, 240, 114, 61, 204, 55, 44, 190, 162, 169, 133, 60, 98, 196, 60, 190, 169, 94, 106, 61, 79, 30, 4, 190, 173, 159, 2, 190, 64, 46, 23, 60, 15, 112, 130, 61, 191, 83, 86, 62, 30, 27, 80, 62, 200, 22, 253, 60, 30, 217, 149, 189, 127, 77, 27, 190, 226, 218, 93, 61, 49, 85, 37, 62, 73, 111, 188, 189, 170, 187, 129, 61, 187, 244, 25, 62, 205, 66, 55, 62, 218, 47, 195, 190, 248, 183, 115, 60, 2, 77, 51, 190, 198, 232, 114, 188, 83, 224, 38, 62, 151, 61, 74, 62, 227, 147, 173, 190, 26, 19, 244, 61, 163, 139, 15, 189, 210, 87, 97, 61, 238, 19, 154, 189, 119, 232, 56, 62, 175, 122, 15, 61, 136, 196, 84, 190, 35, 161, 7, 62, 113, 172, 76, 189, 9, 187, 243, 62, 229, 115, 116, 62, 83, 47, 156, 59, 123, 77, 88, 62, 149, 176, 11, 189, 162, 38, 57, 189, 200, 217, 132, 189, 55, 92, 136, 60, 207, 89, 213, 189, 141, 102, 159, 61, 83, 226, 193, 61, 68, 128, 6, 61, 146, 110, 86, 60, 21, 145, 200, 187, 2, 8, 2, 62, 208, 46, 11, 62, 14, 166, 130, 190, 55, 232, 115, 61, 88, 10, 79, 190, 51, 139, 197, 189, 126, 48, 82, 62, 5, 88, 184, 61, 5, 73, 194, 189, 185, 184, 73, 62, 78, 73, 239, 61, 111, 123, 92, 62, 174, 235, 61, 61, 182, 134, 3, 189, 239, 114, 244, 189, 101, 129, 116, 189, 44, 216, 1, 61, 212, 166, 108, 189, 170, 215, 193, 62, 110, 199, 185, 187, 51, 0, 59, 62, 60, 161, 29, 62, 39, 219, 29, 190, 213, 143, 161, 190, 226, 55, 48, 190, 206, 153, 243, 189, 202, 161, 231, 190, 30, 184, 157, 189, 249, 102, 56, 190, 157, 223, 80, 190, 18, 219, 170, 61, 12, 80, 108, 61, 69, 164, 108, 189, 85, 219, 112, 190, 175, 101, 164, 62, 183, 169, 129, 190, 30, 40, 43, 62, 197, 83, 159, 190, 181, 138, 3, 190, 41, 135, 9, 187, 146, 17, 86, 62, 68, 111, 127, 62, 188, 211, 61, 187, 38, 56, 54, 62, 187, 115, 190, 190, 169, 196, 7, 189, 149, 11, 208, 61, 248, 249, 31, 190, 17, 30, 4, 190, 183, 118, 108, 62, 175, 104, 86, 190, 209, 106, 137, 189, 181, 22, 182, 188, 215, 47, 253, 190, 172, 1, 101, 189, 242, 141, 10, 190, 87, 125, 27, 190, 4, 189, 233, 189, 34, 11, 153, 189, 236, 125, 248, 189, 223, 197, 197, 59, 98, 44, 35, 189, 23, 115, 42, 188, 222, 122, 96, 61, 211, 22, 46, 61, 105, 234, 160, 189, 145, 214, 33, 189, 239, 208, 189, 189, 84, 30, 179, 60, 20, 63, 248, 61, 14, 98, 213, 61, 241, 167, 47, 190, 121, 253, 48, 190, 194, 114, 4, 61, 82, 220, 12, 62, 30, 134, 27, 61, 223, 101, 191, 189, 187, 236, 234, 60, 140, 189, 4, 62, 122, 97, 134, 61, 42, 119, 19, 190, 11, 13, 242, 189, 30, 221, 13, 190, 255, 162, 165, 61, 114, 93, 222, 189, 205, 61, 75, 189, 12, 26, 44, 188, 220, 75, 34, 190, 28, 103, 150, 187, 192, 190, 92, 60, 71, 128, 131, 190, 107, 91, 107, 187, 24, 140, 118, 59, 127, 218, 101, 190, 31, 216, 137, 61, 64, 241, 102, 60, 149, 27, 54, 62, 126, 213, 99, 190, 251, 138, 137, 62, 36, 68, 197, 188, 5, 74, 236, 61, 79, 54, 184, 190, 81, 200, 132, 189, 161, 226, 54, 189, 132, 57, 30, 62, 170, 103, 181, 60, 90, 55, 231, 189, 14, 94, 26, 60, 8, 14, 121, 190, 232, 196, 1, 190, 222, 156, 25, 190, 130, 235, 50, 62, 63, 76, 216, 189, 4, 189, 157, 62, 17, 78, 78, 190, 70, 50, 156, 61, 217, 162, 231, 189, 134, 227, 130, 190, 52, 74, 17, 190, 111, 68, 238, 189, 35, 41, 59, 190, 241, 163, 237, 188, 39, 247, 62, 189, 188, 170, 23, 62, 219, 32, 71, 190, 61, 126, 79, 190, 131, 153, 243, 61, 104, 170, 79, 189, 11, 189, 191, 61, 195, 180, 180, 188, 227, 33, 8, 63, 139, 101, 170, 189, 20, 169, 220, 61, 161, 105, 154, 61, 234, 87, 149, 60, 47, 179, 182, 190, 23, 216, 174, 62, 150, 246, 246, 61, 118, 231, 25, 62, 90, 239, 21, 190, 243, 157, 74, 61, 144, 246, 154, 61, 50, 57, 150, 61, 112, 63, 122, 60, 12, 15, 183, 190, 73, 194, 179, 62, 47, 69, 14, 190, 0, 220, 236, 61, 86, 252, 41, 61, 206, 216, 61, 190, 195, 225, 128, 190, 242, 251, 96, 61, 77, 70, 28, 189, 154, 186, 30, 62, 74, 207, 185, 61, 101, 151, 246, 61, 131, 44, 39, 190, 222, 83, 61, 189, 139, 208, 19, 62, 17, 17, 58, 62, 178, 108, 9, 190, 128, 14, 162, 189, 63, 1, 115, 62, 197, 234, 170, 188, 201, 101, 48, 62, 198, 185, 156, 189, 201, 106, 71, 60, 139, 75, 70, 190, 209, 164, 160, 62, 229, 222, 215, 61, 234, 15, 192, 189, 73, 221, 129, 190, 227, 108, 177, 188, 42, 148, 201, 189, 53, 41, 185, 61, 49, 6, 56, 62, 112, 193, 142, 190, 1, 232, 140, 62, 94, 254, 186, 189, 108, 252, 218, 61, 223, 196, 135, 61, 204, 58, 109, 61, 201, 198, 17, 62, 140, 174, 53, 190, 221, 153, 181, 189, 159, 169, 182, 189, 101, 32, 8, 61, 183, 208, 45, 62, 123, 100, 132, 60, 181, 33, 84, 61, 138, 59, 203, 58, 20, 112, 128, 189, 27, 153, 179, 189, 212, 231, 173, 61, 54, 183, 14, 190, 219, 140, 213, 60, 12, 219, 152, 61, 104, 72, 20, 60, 14, 238, 147, 61, 88, 253, 200, 189, 162, 68, 161, 189, 222, 105, 228, 189, 41, 147, 7, 190, 79, 192, 86, 61, 186, 244, 22, 62, 182, 160, 117, 189, 111, 246, 19, 62, 49, 112, 14, 189, 198, 255, 76, 189, 139, 112, 53, 189, 65, 169, 16, 190, 42, 133, 62, 189, 70, 193, 74, 189, 191, 169, 66, 189, 175, 172, 216, 189, 143, 71, 225, 189, 29, 173, 19, 62, 169, 221, 46, 189, 141, 34, 226, 189, 112, 18, 111, 189, 225, 180, 149, 60, 87, 102, 219, 60, 106, 189, 208, 61, 153, 38, 11, 62, 116, 14, 154, 188, 72, 136, 112, 62, 234, 74, 222, 190, 125, 113, 149, 187, 186, 130, 197, 189, 215, 15, 25, 188, 15, 149, 97, 189, 139, 225, 169, 62, 243, 169, 174, 190, 52, 114, 30, 188, 174, 227, 220, 189, 127, 108, 222, 61, 169, 95, 38, 62, 181, 91, 48, 190, 22, 62, 149, 190, 169, 77, 190, 188, 248, 187, 26, 189, 71, 182, 185, 190, 155, 228, 131, 189, 43, 249, 147, 61, 175, 51, 27, 62, 140, 105, 46, 62, 221, 84, 16, 59, 6, 123, 233, 61, 109, 40, 35, 62, 225, 173, 101, 189, 88, 20, 21, 190, 8, 214, 189, 61, 224, 14, 191, 189, 139, 57, 143, 61, 188, 198, 63, 60, 126, 249, 126, 187, 49, 155, 48, 190, 55, 64, 112, 189, 245, 132, 110, 61, 68, 56, 50, 190, 32, 92, 133, 61, 149, 129, 120, 61, 13, 204, 24, 62, 147, 165, 116, 189, 11, 3, 84, 61, 184, 100, 207, 61, 72, 99, 31, 190, 60, 130, 7, 190, 139, 164, 36, 62, 87, 164, 219, 189, 71, 29, 19, 190, 210, 52, 177, 189, 58, 27, 32, 190, 59, 121, 155, 61, 127, 171, 236, 61, 87, 223, 49, 190, 220, 146, 243, 188, 196, 168, 157, 188, 105, 146, 213, 61, 58, 108, 86, 62, 187, 230, 17, 62, 18, 216, 197, 189, 202, 5, 104, 60, 250, 108, 70, 190, 196, 244, 145, 62, 132, 92, 63, 189, 92, 251, 200, 189, 66, 201, 116, 61, 159, 34, 45, 60, 25, 239, 117, 62, 95, 61, 216, 189, 19, 13, 50, 190, 173, 81, 2, 190, 156, 142, 48, 189, 83, 238, 35, 62, 108, 0, 72, 62, 23, 51, 145, 190, 152, 245, 40, 59, 155, 140, 254, 189, 247, 24, 121, 62, 70, 62, 153, 187, 82, 232, 130, 189, 238, 58, 26, 61, 88, 174, 134, 190, 104, 104, 238, 61, 146, 61, 134, 189, 200, 145, 121, 62, 241, 251, 151, 61, 69, 225, 147, 61, 225, 183, 119, 62, 209, 234, 65, 189, 201, 136, 35, 189, 255, 135, 51, 189, 163, 132, 130, 189, 241, 251, 137, 61, 243, 105, 227, 60, 74, 160, 78, 189, 0, 239, 29, 189, 23, 135, 15, 62, 36, 162, 11, 190, 228, 36, 12, 61, 192, 125, 5, 61, 56, 119, 94, 62, 30, 242, 221, 61, 146, 156, 219, 189, 60, 177, 161, 60, 242, 174, 119, 60, 119, 255, 201, 188, 70, 176, 133, 61, 249, 79, 6, 190, 23, 77, 70, 61, 253, 139, 5, 189, 213, 118, 119, 189, 217, 13, 138, 61, 43, 124, 164, 189, 196, 145, 20, 190, 183, 7, 115, 190, 128, 126, 29, 62, 75, 11, 56, 190, 203, 227, 11, 62, 51, 219, 102, 61, 21, 237, 105, 190, 161, 28, 76, 61, 208, 80, 42, 189, 167, 96, 211, 61, 195, 217, 162, 189, 39, 74, 237, 61, 33, 57, 142, 189, 180, 68, 15, 190, 238, 135, 29, 190, 240, 240, 10, 189, 98, 229, 151, 189, 188, 7, 229, 189, 28, 222, 52, 190, 52, 113, 17, 190, 57, 43, 24, 189, 179, 147, 247, 61, 20, 28, 177, 189, 17, 105, 238, 189, 155, 170, 36, 62, 162, 163, 211, 188, 220, 250, 247, 188, 120, 12, 90, 189, 40, 194, 217, 189, 177, 223, 240, 61, 182, 250, 164, 61, 202, 14, 187, 189, 234, 104, 22, 62, 215, 120, 4, 190, 147, 55, 135, 61, 146, 16, 251, 189, 10, 8, 237, 61, 165, 73, 181, 61, 101, 248, 32, 62, 45, 151, 39, 61, 74, 190, 38, 62, 220, 138, 111, 189, 177, 55, 220, 61, 106, 93, 232, 189, 112, 236, 62, 190, 1, 144, 87, 189, 40, 3, 130, 61, 210, 74, 20, 62, 201, 131, 20, 62, 24, 25, 65, 189, 66, 235, 10, 62, 125, 245, 132, 189, 239, 159, 23, 190, 142, 38, 197, 61, 132, 158, 45, 61, 27, 229, 212, 189, 34, 110, 23, 188, 170, 126, 86, 61, 123, 140, 160, 60, 176, 39, 170, 61, 37, 164, 234, 189, 73, 237, 252, 60, 99, 210, 53, 189, 184, 122, 157, 189, 105, 28, 207, 189, 6, 100, 253, 189, 122, 248, 54, 60, 164, 59, 160, 61, 13, 12, 152, 61, 122, 215, 242, 188, 134, 191, 87, 190, 73, 202, 109, 188, 42, 149, 187, 190, 111, 113, 33, 190, 69, 54, 219, 189, 25, 142, 5, 190, 113, 186, 30, 62, 9, 134, 148, 61, 37, 201, 10, 190, 0, 158, 88, 62, 100, 192, 201, 61, 202, 217, 30, 62, 242, 125, 231, 189, 234, 75, 159, 62, 171, 20, 93, 190, 171, 77, 19, 62, 46, 255, 37, 61, 57, 9, 5, 62, 54, 162, 164, 190, 11, 36, 67, 62, 234, 149, 158, 189, 168, 52, 48, 189, 133, 152, 163, 61, 201, 58, 138, 189, 242, 199, 56, 190, 93, 163, 143, 61, 63, 254, 7, 62, 242, 31, 253, 189, 186, 1, 145, 62, 45, 93, 41, 190, 237, 189, 9, 190, 74, 177, 143, 189, 153, 235, 216, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 115, 90, 189, 19, 198, 152, 186, 156, 104, 183, 189, 75, 114, 78, 62, 209, 211, 30, 61, 24, 155, 40, 62, 215, 107, 119, 61, 178, 194, 97, 60, 147, 50, 18, 190, 167, 124, 118, 61, 73, 127, 235, 60, 71, 19, 220, 61, 249, 205, 16, 62, 182, 182, 185, 61, 76, 79, 9, 189, 182, 51, 111, 62, 190, 11, 39, 190, 228, 113, 203, 189, 204, 214, 231, 61, 62, 112, 142, 62, 241, 186, 68, 190, 103, 254, 213, 61, 232, 157, 95, 186, 124, 193, 99, 189, 113, 224, 13, 190, 166, 200, 77, 186, 92, 42, 71, 190, 254, 73, 128, 61, 74, 240, 101, 61, 63, 214, 18, 190, 84, 225, 48, 190, 142, 171, 205, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 70, 234, 61, 235, 225, 41, 190, 68, 62, 50, 190, 169, 27, 139, 62, 174, 192, 191, 62, 213, 77, 39, 61, 75, 1, 180, 190, 30, 79, 142, 62, 127, 113, 31, 61, 63, 126, 165, 62, 147, 62, 6, 190, 24, 26, 59, 189, 192, 19, 154, 190, 193, 228, 140, 62, 120, 91, 9, 190, 182, 73, 45, 189, 129, 155, 38, 190, 40, 82, 148, 190, 163, 174, 40, 190, 90, 9, 7, 63, 3, 131, 8, 62, 170, 185, 141, 62, 17, 170, 235, 61, 239, 43, 75, 62, 55, 190, 36, 190, 243, 173, 114, 190, 211, 5, 228, 60, 34, 163, 121, 190, 135, 245, 211, 61, 96, 128, 217, 187, 14, 149, 25, 190, 138, 110, 155, 62, 2, 222, 237, 61, 241, 178, 7, 190, 117, 145, 22, 62, 119, 53, 143, 188, 7, 230, 50, 190, 117, 159, 70, 190, 150, 55, 201, 61, 1, 114, 44, 189, 107, 41, 20, 62, 17, 161, 92, 60, 74, 164, 87, 190, 201, 147, 128, 190, 30, 65, 15, 187, 28, 108, 87, 61, 130, 102, 206, 189, 213, 218, 136, 190, 26, 107, 17, 61, 240, 125, 141, 61, 1, 46, 76, 190, 66, 8, 172, 188, 73, 52, 239, 61, 42, 145, 209, 61, 224, 7, 14, 61, 176, 246, 122, 61, 1, 211, 37, 190, 203, 104, 133, 189, 127, 88, 5, 190, 40, 118, 53, 61, 73, 19, 36, 61, 118, 40, 179, 189, 16, 56, 228, 189, 67, 55, 160, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 168, 20, 190, 225, 222, 39, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {40, 116, 37, 191, 246, 121, 38, 63, 185, 74, 162, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {197, 182, 167, 191, 96, 25, 56, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0084/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}