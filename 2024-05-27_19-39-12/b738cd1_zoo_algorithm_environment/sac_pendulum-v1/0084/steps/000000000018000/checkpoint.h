// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 34, 106, 191, 231, 236, 147, 62, 55, 138, 14, 63, 38, 52, 214, 62, 28, 223, 157, 63, 159, 191, 158, 62, 68, 192, 179, 61, 145, 239, 185, 190, 162, 148, 207, 190, 14, 38, 68, 63, 32, 39, 50, 191, 64, 121, 35, 191, 38, 233, 37, 63, 32, 30, 1, 63, 74, 65, 133, 62, 26, 84, 76, 62, 44, 19, 195, 191, 49, 253, 212, 190, 173, 223, 23, 63, 98, 243, 131, 63, 213, 15, 153, 189, 152, 164, 129, 190, 112, 143, 30, 190, 143, 16, 155, 62, 70, 135, 9, 191, 17, 19, 91, 63, 121, 183, 166, 62, 224, 244, 90, 63, 23, 101, 66, 191, 118, 94, 254, 189, 178, 109, 97, 62, 223, 110, 28, 62, 94, 150, 4, 190, 13, 65, 89, 190, 221, 129, 146, 190, 33, 94, 237, 190, 227, 45, 20, 191, 238, 180, 105, 191, 62, 182, 84, 62, 38, 191, 159, 189, 217, 167, 61, 191, 108, 252, 207, 190, 89, 216, 156, 61, 44, 174, 166, 191, 187, 10, 150, 190, 128, 103, 30, 63, 143, 150, 247, 62, 30, 213, 28, 191, 0, 244, 23, 63, 8, 62, 102, 63, 188, 7, 108, 62, 224, 8, 14, 191, 130, 187, 70, 63, 100, 74, 242, 61, 147, 145, 201, 62, 194, 165, 47, 191, 239, 86, 193, 62, 28, 183, 13, 191, 165, 7, 142, 62, 127, 252, 6, 61, 236, 94, 6, 62, 64, 116, 230, 189, 20, 215, 158, 186, 131, 69, 80, 190, 114, 211, 116, 63, 235, 61, 104, 62, 213, 7, 232, 62, 209, 95, 33, 62, 185, 14, 226, 190, 119, 6, 88, 61, 49, 146, 39, 63, 125, 249, 14, 62, 109, 168, 226, 190, 89, 163, 64, 62, 124, 11, 143, 190, 99, 33, 21, 63, 19, 146, 42, 191, 92, 35, 232, 190, 19, 232, 82, 190, 30, 170, 203, 190, 101, 108, 218, 62, 97, 67, 104, 189, 61, 143, 14, 191, 144, 203, 145, 62, 23, 41, 57, 189, 231, 98, 129, 191, 97, 114, 169, 62, 204, 169, 109, 191, 67, 195, 198, 187, 248, 11, 253, 190, 40, 207, 247, 58, 12, 79, 143, 191, 23, 108, 98, 190, 124, 147, 117, 60, 38, 115, 85, 191, 8, 178, 207, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 46, 14, 191, 69, 111, 63, 190, 12, 254, 99, 60, 182, 242, 199, 61, 96, 243, 65, 191, 162, 136, 139, 190, 145, 37, 153, 62, 132, 16, 36, 190, 114, 241, 132, 190, 249, 47, 216, 62, 26, 124, 253, 62, 200, 81, 146, 190, 148, 202, 250, 189, 239, 241, 31, 191, 143, 54, 207, 190, 215, 87, 138, 62, 5, 232, 222, 62, 217, 195, 238, 62, 221, 212, 136, 62, 101, 52, 65, 63, 203, 171, 120, 190, 94, 252, 244, 62, 137, 180, 226, 61, 6, 171, 56, 62, 192, 202, 73, 191, 196, 185, 86, 61, 55, 108, 0, 191, 154, 221, 252, 189, 110, 6, 41, 190, 100, 196, 142, 62, 233, 244, 160, 190, 227, 101, 187, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 83, 16, 188, 128, 133, 30, 190, 51, 224, 2, 61, 127, 77, 123, 62, 151, 149, 33, 63, 129, 209, 13, 62, 6, 118, 131, 62, 132, 106, 16, 190, 233, 248, 209, 189, 84, 89, 78, 62, 85, 218, 0, 62, 188, 35, 62, 190, 223, 184, 222, 190, 121, 20, 168, 189, 246, 155, 96, 190, 248, 228, 210, 60, 27, 47, 204, 189, 26, 177, 21, 191, 164, 167, 129, 190, 104, 126, 240, 190, 98, 223, 205, 186, 207, 186, 22, 191, 237, 19, 167, 61, 167, 84, 36, 188, 175, 154, 173, 62, 222, 34, 160, 59, 87, 209, 56, 190, 178, 97, 76, 189, 144, 231, 7, 191, 85, 151, 130, 188, 120, 195, 164, 190, 102, 195, 134, 190, 156, 209, 19, 190, 108, 208, 165, 189, 226, 216, 1, 189, 135, 248, 201, 60, 76, 94, 179, 189, 135, 7, 27, 190, 216, 38, 135, 188, 190, 252, 5, 62, 76, 175, 252, 189, 22, 28, 198, 189, 113, 218, 178, 61, 152, 184, 207, 61, 82, 100, 38, 190, 12, 137, 33, 190, 67, 212, 100, 59, 31, 192, 8, 189, 160, 235, 251, 187, 52, 160, 145, 61, 94, 222, 97, 61, 208, 190, 230, 188, 83, 120, 188, 61, 105, 212, 255, 189, 242, 110, 101, 189, 164, 138, 199, 189, 131, 34, 192, 61, 150, 118, 214, 189, 26, 74, 173, 189, 3, 182, 236, 189, 120, 70, 32, 190, 190, 193, 50, 190, 24, 231, 40, 190, 107, 138, 40, 187, 150, 229, 212, 60, 165, 16, 76, 186, 68, 93, 224, 61, 89, 252, 30, 190, 153, 236, 77, 189, 112, 97, 135, 189, 167, 162, 31, 61, 242, 107, 233, 61, 108, 133, 215, 61, 129, 237, 72, 190, 129, 122, 235, 61, 198, 55, 194, 61, 209, 174, 230, 61, 51, 199, 215, 189, 127, 4, 19, 190, 73, 160, 15, 191, 163, 240, 185, 189, 69, 216, 121, 62, 127, 61, 141, 190, 255, 116, 173, 62, 101, 144, 238, 61, 50, 139, 90, 187, 124, 105, 66, 189, 134, 8, 35, 190, 223, 68, 96, 62, 40, 59, 89, 190, 66, 214, 6, 61, 60, 122, 158, 189, 39, 107, 149, 189, 148, 98, 152, 62, 192, 86, 130, 61, 99, 168, 45, 62, 180, 178, 64, 62, 159, 137, 67, 191, 114, 198, 25, 187, 189, 131, 204, 62, 245, 78, 47, 191, 102, 110, 6, 62, 237, 124, 212, 61, 198, 149, 117, 190, 220, 48, 129, 62, 225, 91, 197, 61, 122, 169, 234, 61, 13, 237, 30, 190, 134, 175, 26, 63, 252, 200, 218, 61, 229, 15, 53, 190, 90, 88, 43, 61, 160, 194, 166, 190, 66, 44, 237, 189, 157, 114, 37, 63, 111, 23, 153, 190, 38, 13, 215, 60, 54, 83, 186, 190, 131, 177, 59, 190, 186, 10, 215, 189, 38, 129, 145, 62, 8, 13, 229, 62, 10, 85, 176, 190, 243, 151, 196, 62, 114, 94, 174, 190, 188, 227, 157, 189, 225, 55, 132, 190, 146, 49, 39, 191, 236, 49, 159, 59, 81, 122, 2, 62, 153, 123, 198, 62, 49, 136, 127, 187, 99, 219, 16, 189, 57, 56, 153, 61, 224, 246, 13, 62, 64, 166, 165, 61, 44, 253, 133, 61, 70, 199, 252, 190, 203, 153, 159, 190, 252, 206, 173, 61, 71, 136, 76, 62, 151, 62, 37, 61, 38, 116, 137, 190, 209, 160, 133, 191, 208, 176, 131, 62, 91, 250, 249, 62, 181, 64, 133, 62, 53, 19, 35, 62, 133, 102, 33, 62, 241, 179, 33, 62, 125, 250, 15, 191, 155, 142, 86, 62, 89, 210, 38, 190, 192, 245, 80, 189, 252, 182, 250, 188, 147, 114, 82, 189, 204, 228, 63, 191, 136, 78, 161, 189, 51, 115, 136, 190, 255, 39, 186, 191, 241, 154, 187, 61, 102, 181, 219, 190, 24, 240, 186, 59, 223, 71, 165, 62, 194, 160, 55, 191, 246, 132, 49, 190, 146, 236, 208, 60, 58, 57, 42, 61, 78, 44, 120, 62, 230, 110, 12, 62, 65, 133, 3, 62, 71, 178, 19, 61, 95, 105, 28, 61, 244, 250, 7, 190, 249, 2, 48, 190, 97, 103, 33, 62, 49, 61, 205, 62, 230, 115, 108, 190, 60, 22, 182, 187, 48, 7, 139, 61, 13, 209, 41, 190, 254, 77, 2, 62, 242, 57, 24, 190, 80, 76, 20, 62, 142, 150, 55, 188, 175, 100, 54, 61, 228, 93, 141, 190, 183, 160, 122, 189, 75, 126, 135, 61, 126, 199, 162, 60, 187, 51, 201, 189, 120, 174, 148, 189, 103, 80, 10, 62, 124, 205, 199, 60, 140, 63, 8, 62, 52, 72, 33, 191, 192, 70, 243, 61, 32, 179, 93, 191, 63, 32, 232, 62, 135, 19, 52, 61, 227, 232, 246, 188, 103, 66, 133, 61, 170, 145, 112, 62, 149, 231, 91, 62, 150, 87, 153, 189, 56, 114, 47, 191, 238, 253, 236, 190, 74, 54, 131, 62, 160, 249, 141, 62, 200, 227, 49, 62, 172, 74, 175, 190, 173, 157, 49, 62, 241, 184, 28, 62, 206, 71, 21, 62, 78, 211, 121, 61, 86, 217, 5, 62, 206, 98, 243, 190, 242, 139, 9, 191, 30, 11, 244, 61, 159, 93, 75, 189, 206, 84, 12, 63, 56, 49, 10, 63, 177, 121, 224, 187, 2, 5, 112, 61, 20, 163, 50, 191, 151, 234, 22, 191, 11, 98, 26, 189, 221, 159, 136, 62, 115, 29, 203, 190, 54, 212, 25, 190, 112, 93, 85, 62, 77, 166, 193, 190, 248, 20, 30, 189, 68, 27, 22, 62, 35, 223, 104, 62, 0, 231, 190, 188, 154, 17, 178, 62, 10, 205, 38, 62, 66, 248, 31, 190, 87, 89, 231, 189, 26, 133, 6, 190, 167, 150, 131, 191, 179, 90, 0, 63, 172, 50, 58, 189, 92, 160, 170, 189, 240, 193, 74, 191, 139, 191, 219, 61, 197, 158, 128, 61, 0, 1, 139, 62, 61, 122, 32, 62, 79, 18, 1, 191, 145, 78, 240, 62, 175, 51, 227, 61, 189, 148, 29, 188, 84, 190, 255, 189, 98, 58, 124, 190, 217, 242, 118, 61, 196, 65, 91, 60, 247, 130, 57, 190, 232, 68, 14, 61, 27, 15, 27, 189, 145, 142, 238, 189, 59, 219, 64, 189, 218, 125, 4, 62, 245, 151, 77, 189, 78, 3, 15, 191, 100, 37, 21, 190, 72, 236, 146, 61, 151, 3, 41, 62, 197, 74, 167, 189, 115, 178, 236, 60, 244, 95, 190, 189, 33, 191, 238, 189, 227, 178, 78, 61, 68, 67, 15, 62, 250, 173, 30, 190, 233, 218, 34, 62, 22, 131, 5, 61, 70, 158, 41, 61, 138, 228, 72, 190, 28, 210, 99, 60, 101, 86, 208, 188, 160, 177, 28, 189, 111, 168, 7, 189, 112, 244, 218, 61, 79, 247, 155, 61, 76, 203, 238, 189, 186, 67, 5, 62, 7, 107, 249, 59, 68, 2, 22, 62, 123, 243, 8, 188, 154, 253, 31, 188, 253, 14, 45, 63, 254, 187, 33, 190, 217, 199, 200, 62, 236, 199, 125, 62, 79, 230, 137, 189, 137, 110, 143, 190, 52, 113, 181, 61, 30, 61, 147, 61, 237, 247, 119, 191, 33, 43, 116, 61, 198, 84, 166, 189, 194, 130, 143, 62, 11, 18, 161, 189, 219, 122, 56, 60, 133, 211, 223, 190, 119, 171, 73, 190, 64, 245, 165, 61, 134, 220, 180, 190, 213, 90, 131, 62, 250, 57, 208, 189, 186, 155, 201, 62, 200, 105, 35, 62, 48, 192, 9, 62, 1, 131, 50, 191, 119, 135, 136, 190, 136, 67, 9, 190, 175, 242, 4, 190, 33, 197, 213, 60, 211, 191, 13, 190, 26, 61, 86, 190, 216, 44, 98, 189, 213, 82, 129, 61, 4, 185, 124, 190, 41, 113, 122, 190, 38, 111, 14, 60, 182, 96, 95, 189, 122, 216, 153, 61, 227, 128, 147, 62, 234, 138, 66, 62, 131, 221, 216, 61, 138, 80, 193, 61, 118, 6, 108, 186, 14, 238, 130, 62, 27, 75, 53, 62, 128, 145, 170, 62, 24, 30, 8, 190, 129, 153, 101, 189, 251, 69, 137, 62, 83, 183, 11, 190, 101, 143, 144, 62, 28, 126, 204, 61, 125, 101, 150, 61, 240, 102, 149, 189, 209, 126, 64, 190, 106, 198, 219, 188, 243, 24, 33, 189, 174, 192, 149, 62, 118, 10, 246, 61, 197, 164, 244, 61, 228, 165, 157, 61, 4, 66, 0, 191, 79, 205, 25, 191, 18, 174, 112, 188, 245, 34, 123, 60, 30, 20, 167, 191, 23, 175, 212, 59, 7, 38, 27, 62, 153, 31, 128, 190, 73, 111, 215, 190, 220, 133, 36, 62, 152, 159, 169, 189, 61, 48, 34, 62, 165, 31, 226, 60, 67, 168, 172, 189, 149, 189, 5, 190, 135, 208, 23, 62, 150, 100, 167, 62, 179, 120, 112, 191, 213, 104, 160, 62, 71, 31, 132, 190, 32, 90, 229, 189, 217, 59, 153, 61, 144, 1, 18, 62, 120, 81, 74, 62, 128, 17, 128, 61, 148, 63, 239, 61, 234, 168, 191, 190, 206, 192, 155, 189, 90, 167, 206, 62, 19, 139, 24, 190, 236, 95, 146, 61, 87, 242, 126, 61, 159, 244, 15, 191, 33, 141, 36, 62, 179, 251, 104, 62, 39, 74, 211, 187, 216, 95, 45, 190, 145, 42, 224, 188, 13, 76, 48, 188, 73, 213, 82, 189, 32, 127, 100, 190, 131, 175, 203, 188, 169, 159, 38, 62, 53, 192, 159, 62, 85, 54, 66, 191, 240, 157, 78, 61, 2, 166, 120, 62, 56, 251, 226, 189, 19, 60, 189, 62, 61, 172, 128, 62, 207, 27, 183, 190, 4, 12, 154, 61, 235, 117, 246, 61, 102, 111, 170, 62, 9, 223, 166, 189, 36, 174, 44, 190, 33, 161, 156, 190, 199, 187, 134, 190, 149, 125, 135, 190, 148, 134, 8, 191, 225, 233, 181, 61, 81, 245, 86, 62, 219, 167, 182, 62, 47, 118, 187, 62, 233, 249, 74, 191, 214, 52, 119, 191, 48, 121, 35, 190, 34, 156, 151, 62, 116, 103, 30, 191, 73, 107, 157, 187, 112, 119, 82, 62, 85, 19, 202, 190, 173, 88, 238, 189, 101, 187, 34, 62, 39, 168, 26, 62, 217, 254, 38, 190, 75, 40, 0, 63, 9, 98, 176, 188, 219, 30, 167, 190, 150, 128, 56, 187, 244, 103, 50, 190, 79, 29, 82, 191, 172, 155, 28, 63, 230, 33, 75, 190, 101, 110, 161, 61, 174, 66, 44, 191, 97, 243, 87, 60, 101, 165, 242, 188, 111, 187, 9, 62, 207, 61, 151, 62, 242, 11, 143, 190, 29, 186, 172, 62, 151, 154, 102, 61, 226, 77, 41, 190, 241, 92, 71, 190, 211, 240, 128, 190, 119, 30, 15, 188, 234, 72, 230, 61, 129, 165, 129, 189, 84, 11, 220, 189, 27, 87, 14, 62, 250, 89, 174, 61, 139, 232, 65, 190, 100, 7, 38, 190, 46, 15, 79, 61, 65, 69, 191, 61, 202, 3, 200, 188, 28, 131, 41, 190, 182, 160, 12, 190, 7, 18, 183, 189, 207, 13, 2, 190, 31, 245, 44, 62, 170, 167, 42, 61, 16, 153, 95, 189, 12, 144, 116, 188, 82, 35, 18, 189, 59, 52, 35, 190, 184, 205, 70, 190, 79, 43, 180, 189, 31, 148, 100, 189, 220, 94, 245, 189, 91, 21, 38, 190, 172, 216, 63, 61, 104, 60, 68, 190, 189, 60, 220, 61, 94, 140, 216, 189, 193, 100, 29, 190, 213, 187, 205, 61, 5, 142, 172, 188, 188, 123, 82, 190, 205, 206, 118, 189, 48, 177, 10, 62, 187, 91, 230, 190, 132, 103, 164, 190, 46, 100, 138, 62, 149, 9, 136, 189, 97, 146, 15, 62, 88, 50, 128, 61, 12, 183, 147, 62, 75, 201, 18, 189, 114, 4, 153, 189, 203, 244, 253, 61, 39, 4, 246, 189, 167, 22, 61, 62, 87, 42, 220, 62, 246, 8, 128, 190, 44, 71, 145, 61, 14, 220, 4, 190, 7, 233, 173, 61, 174, 255, 187, 61, 27, 34, 9, 189, 51, 127, 18, 62, 179, 105, 242, 61, 148, 82, 40, 62, 59, 79, 22, 61, 68, 198, 76, 190, 1, 145, 103, 62, 236, 93, 132, 189, 52, 24, 50, 189, 57, 35, 142, 189, 10, 169, 205, 61, 173, 21, 242, 60, 160, 46, 242, 61, 128, 71, 30, 62, 207, 77, 207, 189, 198, 130, 103, 61, 11, 132, 160, 189, 18, 40, 230, 61, 232, 167, 226, 189, 216, 86, 39, 190, 70, 31, 18, 189, 61, 7, 67, 61, 207, 23, 3, 62, 13, 114, 148, 189, 206, 195, 246, 61, 49, 195, 137, 189, 238, 229, 124, 61, 114, 21, 28, 190, 73, 130, 234, 189, 43, 82, 6, 61, 121, 170, 216, 61, 221, 66, 2, 60, 43, 45, 210, 60, 19, 203, 49, 190, 222, 240, 114, 61, 204, 55, 44, 190, 130, 96, 10, 188, 59, 208, 85, 190, 13, 5, 9, 61, 79, 30, 4, 190, 173, 159, 2, 190, 64, 46, 23, 60, 54, 84, 45, 61, 109, 235, 60, 62, 91, 138, 114, 62, 76, 40, 94, 189, 247, 19, 177, 61, 212, 214, 139, 189, 208, 92, 73, 190, 145, 205, 15, 62, 26, 38, 131, 190, 247, 170, 245, 61, 157, 148, 74, 62, 17, 52, 70, 62, 195, 245, 203, 190, 204, 62, 228, 188, 254, 176, 91, 60, 9, 242, 9, 61, 179, 214, 81, 62, 23, 178, 130, 62, 6, 10, 14, 191, 168, 157, 94, 62, 25, 173, 250, 188, 58, 53, 29, 62, 9, 91, 11, 189, 81, 44, 241, 61, 249, 146, 25, 190, 106, 47, 152, 190, 217, 73, 18, 62, 106, 34, 179, 189, 45, 236, 215, 62, 105, 221, 170, 62, 145, 47, 77, 62, 139, 129, 113, 62, 175, 94, 114, 189, 92, 203, 40, 190, 19, 253, 156, 189, 13, 194, 29, 188, 127, 51, 159, 190, 17, 240, 255, 60, 198, 96, 120, 188, 68, 83, 129, 189, 127, 221, 194, 58, 5, 131, 13, 62, 146, 203, 75, 62, 187, 219, 32, 62, 232, 64, 156, 189, 212, 190, 137, 61, 189, 38, 66, 189, 74, 83, 202, 189, 122, 163, 161, 62, 108, 37, 26, 61, 151, 138, 11, 190, 106, 41, 147, 62, 19, 64, 242, 61, 210, 52, 183, 62, 106, 32, 73, 61, 1, 161, 159, 189, 0, 10, 116, 190, 243, 38, 157, 189, 23, 239, 230, 188, 4, 10, 57, 189, 85, 127, 205, 62, 198, 199, 155, 61, 171, 219, 190, 62, 44, 137, 43, 62, 6, 158, 93, 190, 230, 171, 194, 190, 88, 201, 183, 189, 68, 222, 149, 190, 60, 32, 124, 191, 92, 244, 90, 191, 61, 16, 250, 61, 133, 113, 86, 190, 214, 208, 247, 61, 214, 90, 175, 190, 87, 184, 67, 189, 172, 223, 1, 190, 178, 115, 158, 62, 186, 233, 255, 190, 56, 117, 109, 191, 40, 174, 16, 191, 246, 149, 205, 189, 139, 235, 81, 62, 152, 183, 35, 62, 61, 227, 203, 62, 182, 181, 22, 188, 195, 51, 165, 62, 230, 56, 122, 191, 141, 199, 251, 188, 133, 231, 204, 62, 21, 163, 153, 190, 36, 97, 9, 190, 167, 17, 88, 62, 224, 220, 140, 190, 59, 249, 77, 60, 92, 205, 50, 191, 51, 173, 248, 191, 172, 1, 101, 189, 2, 55, 12, 190, 79, 50, 81, 190, 204, 184, 32, 190, 140, 4, 153, 189, 236, 125, 248, 189, 197, 57, 161, 188, 178, 65, 32, 189, 23, 115, 42, 188, 234, 206, 221, 59, 4, 22, 254, 59, 105, 234, 160, 189, 145, 214, 33, 189, 239, 208, 189, 189, 84, 30, 179, 60, 208, 29, 178, 61, 210, 95, 169, 61, 160, 8, 50, 190, 73, 220, 41, 190, 202, 22, 60, 187, 82, 220, 12, 62, 72, 247, 9, 60, 180, 13, 13, 190, 34, 142, 28, 60, 36, 201, 3, 62, 34, 123, 175, 60, 42, 119, 19, 190, 11, 13, 242, 189, 30, 221, 13, 190, 255, 162, 165, 61, 172, 61, 237, 189, 205, 61, 75, 189, 31, 60, 63, 189, 116, 34, 241, 190, 231, 41, 187, 188, 185, 186, 130, 62, 251, 132, 111, 191, 147, 88, 174, 190, 57, 135, 88, 61, 77, 52, 73, 190, 194, 117, 242, 61, 39, 3, 135, 61, 12, 199, 190, 61, 80, 236, 10, 190, 83, 168, 90, 62, 130, 46, 238, 189, 18, 155, 71, 191, 50, 8, 45, 191, 86, 61, 184, 189, 48, 139, 170, 61, 164, 200, 74, 62, 166, 95, 0, 62, 35, 143, 239, 189, 110, 235, 109, 61, 240, 116, 16, 191, 115, 35, 57, 190, 148, 87, 241, 61, 243, 183, 244, 62, 185, 247, 199, 189, 69, 38, 145, 62, 111, 173, 126, 190, 34, 49, 245, 61, 240, 214, 71, 191, 52, 16, 219, 191, 1, 225, 97, 190, 95, 140, 59, 191, 131, 192, 118, 190, 168, 21, 202, 189, 2, 170, 30, 191, 245, 223, 56, 191, 167, 54, 138, 189, 116, 146, 11, 190, 23, 155, 164, 61, 34, 83, 233, 190, 27, 9, 8, 60, 123, 63, 235, 61, 199, 211, 13, 63, 177, 163, 189, 190, 15, 183, 89, 191, 203, 62, 187, 61, 49, 23, 27, 190, 10, 190, 252, 189, 137, 69, 241, 62, 110, 109, 50, 62, 242, 249, 24, 62, 225, 39, 58, 60, 249, 143, 185, 61, 174, 163, 11, 61, 110, 210, 13, 63, 224, 220, 239, 189, 1, 51, 162, 190, 134, 226, 216, 62, 206, 141, 164, 189, 39, 26, 114, 62, 227, 193, 46, 191, 230, 19, 23, 191, 252, 85, 243, 190, 228, 93, 224, 190, 184, 72, 130, 186, 60, 118, 173, 62, 188, 54, 144, 190, 151, 210, 38, 62, 39, 170, 85, 61, 206, 80, 194, 189, 45, 78, 170, 188, 165, 173, 143, 62, 102, 4, 168, 189, 236, 185, 95, 190, 248, 4, 25, 62, 24, 203, 125, 189, 16, 127, 153, 188, 18, 172, 223, 188, 197, 21, 93, 189, 171, 161, 102, 191, 70, 73, 231, 62, 226, 204, 235, 189, 150, 174, 197, 189, 67, 9, 112, 191, 81, 214, 0, 60, 88, 135, 132, 61, 40, 227, 235, 61, 109, 192, 185, 62, 102, 49, 161, 190, 73, 16, 98, 62, 244, 102, 183, 188, 196, 242, 42, 189, 3, 101, 206, 189, 17, 247, 194, 189, 133, 21, 155, 190, 75, 179, 2, 62, 137, 160, 230, 189, 71, 32, 47, 189, 69, 185, 191, 59, 99, 19, 216, 62, 158, 5, 221, 190, 46, 211, 43, 62, 26, 82, 109, 191, 177, 160, 80, 61, 208, 151, 11, 190, 30, 117, 9, 62, 244, 140, 241, 189, 161, 60, 129, 62, 224, 203, 230, 62, 107, 146, 105, 189, 251, 249, 231, 62, 7, 41, 202, 190, 233, 112, 168, 62, 59, 69, 173, 190, 43, 95, 6, 190, 70, 8, 130, 62, 193, 235, 221, 61, 240, 178, 192, 62, 114, 39, 226, 61, 59, 112, 222, 60, 154, 81, 38, 190, 178, 72, 23, 62, 150, 169, 186, 62, 192, 252, 88, 59, 30, 193, 77, 62, 147, 248, 244, 61, 28, 171, 152, 190, 88, 175, 45, 62, 112, 31, 253, 61, 66, 152, 1, 190, 76, 85, 170, 190, 236, 176, 121, 189, 171, 98, 18, 189, 183, 15, 32, 190, 183, 107, 143, 188, 41, 82, 115, 62, 177, 147, 71, 61, 63, 184, 134, 62, 31, 34, 7, 191, 11, 222, 28, 189, 33, 117, 245, 61, 133, 47, 14, 60, 178, 229, 181, 62, 215, 213, 16, 63, 57, 204, 20, 191, 30, 6, 129, 62, 21, 255, 215, 189, 13, 156, 239, 62, 182, 74, 44, 62, 110, 114, 30, 60, 74, 227, 237, 190, 220, 197, 209, 189, 248, 20, 169, 190, 91, 132, 58, 191, 89, 126, 242, 190, 123, 4, 63, 62, 37, 120, 214, 62, 143, 78, 91, 62, 216, 87, 0, 190, 198, 209, 180, 190, 83, 235, 79, 189, 75, 20, 77, 191, 72, 26, 16, 191, 54, 207, 12, 190, 70, 113, 217, 190, 232, 215, 67, 61, 218, 53, 225, 189, 39, 45, 29, 189, 190, 46, 44, 62, 158, 122, 15, 190, 210, 103, 115, 62, 21, 9, 20, 191, 74, 164, 56, 190, 176, 32, 25, 190, 25, 4, 23, 190, 49, 136, 43, 62, 49, 62, 246, 61, 43, 153, 221, 62, 72, 99, 31, 190, 206, 221, 215, 189, 251, 225, 43, 190, 144, 185, 177, 190, 153, 117, 185, 190, 6, 10, 80, 191, 141, 160, 59, 190, 42, 148, 31, 62, 169, 82, 144, 62, 139, 244, 174, 62, 103, 101, 192, 190, 115, 222, 214, 190, 177, 147, 173, 60, 55, 153, 87, 62, 253, 153, 79, 61, 186, 153, 121, 190, 101, 127, 244, 60, 57, 207, 97, 191, 93, 68, 203, 62, 35, 153, 228, 189, 114, 49, 161, 190, 193, 164, 46, 61, 22, 49, 6, 62, 83, 215, 90, 62, 174, 176, 131, 188, 155, 55, 1, 191, 163, 95, 228, 190, 39, 57, 101, 61, 65, 125, 135, 62, 181, 35, 150, 62, 15, 215, 158, 190, 103, 47, 29, 62, 199, 247, 248, 189, 14, 48, 163, 62, 121, 214, 17, 61, 19, 195, 0, 190, 27, 194, 51, 188, 183, 16, 218, 190, 19, 162, 158, 61, 32, 51, 174, 189, 121, 17, 174, 62, 127, 185, 90, 62, 72, 158, 213, 61, 179, 172, 200, 61, 223, 153, 233, 190, 58, 205, 96, 62, 179, 115, 152, 189, 64, 222, 237, 190, 5, 75, 11, 189, 206, 226, 142, 191, 129, 130, 12, 63, 226, 192, 147, 190, 23, 116, 152, 62, 127, 166, 204, 191, 233, 44, 145, 62, 180, 185, 72, 60, 244, 44, 196, 188, 48, 112, 156, 62, 172, 219, 162, 191, 114, 179, 241, 61, 110, 137, 156, 61, 20, 167, 134, 62, 27, 186, 30, 190, 111, 236, 214, 60, 23, 77, 70, 61, 51, 28, 161, 62, 207, 79, 130, 190, 23, 213, 215, 189, 214, 227, 66, 63, 184, 28, 20, 191, 21, 18, 192, 190, 127, 23, 132, 62, 208, 144, 25, 191, 225, 245, 67, 62, 251, 129, 8, 191, 152, 152, 202, 191, 161, 28, 76, 61, 208, 80, 42, 189, 161, 143, 179, 61, 76, 189, 201, 189, 39, 74, 237, 61, 118, 79, 171, 189, 146, 208, 15, 190, 238, 135, 29, 190, 240, 240, 10, 189, 240, 148, 171, 189, 129, 121, 251, 189, 99, 215, 69, 190, 218, 146, 17, 190, 232, 99, 92, 189, 124, 178, 221, 61, 22, 4, 223, 189, 17, 105, 238, 189, 93, 98, 33, 62, 162, 163, 211, 188, 81, 251, 34, 189, 120, 12, 90, 189, 199, 117, 218, 189, 23, 165, 201, 61, 182, 250, 164, 61, 222, 143, 235, 189, 164, 140, 6, 62, 215, 120, 4, 190, 147, 55, 135, 61, 146, 16, 251, 189, 154, 228, 193, 61, 123, 109, 158, 61, 32, 162, 4, 62, 234, 3, 36, 60, 165, 64, 211, 61, 50, 8, 132, 189, 142, 253, 186, 61, 27, 66, 5, 190, 232, 5, 73, 190, 206, 104, 164, 189, 249, 73, 6, 61, 245, 105, 233, 61, 39, 13, 211, 61, 184, 93, 144, 189, 68, 146, 19, 62, 50, 132, 193, 189, 51, 48, 39, 190, 21, 31, 135, 61, 73, 133, 228, 60, 59, 150, 39, 190, 244, 128, 18, 189, 19, 119, 136, 188, 79, 210, 228, 187, 176, 39, 170, 61, 32, 43, 46, 190, 194, 185, 169, 60, 83, 57, 250, 189, 174, 9, 179, 189, 229, 252, 245, 189, 169, 89, 30, 190, 36, 12, 146, 188, 28, 1, 88, 61, 72, 116, 167, 61, 26, 232, 131, 189, 23, 215, 91, 190, 175, 77, 122, 190, 154, 250, 47, 191, 33, 116, 43, 191, 67, 72, 44, 190, 96, 233, 54, 191, 185, 212, 153, 62, 104, 21, 135, 61, 211, 111, 76, 190, 116, 154, 175, 61, 86, 110, 0, 62, 227, 183, 71, 61, 36, 239, 141, 62, 65, 39, 41, 62, 40, 58, 38, 190, 96, 23, 99, 190, 216, 247, 68, 190, 116, 111, 24, 61, 90, 61, 34, 190, 80, 175, 121, 62, 207, 242, 21, 61, 48, 175, 62, 189, 2, 223, 183, 61, 102, 122, 173, 190, 122, 203, 138, 190, 10, 54, 197, 62, 89, 163, 213, 61, 239, 244, 79, 190, 223, 23, 75, 62, 26, 212, 33, 190, 36, 140, 255, 61, 53, 171, 4, 191, 242, 176, 91, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 174, 120, 190, 144, 226, 5, 189, 35, 57, 169, 188, 242, 174, 46, 62, 63, 137, 150, 188, 82, 122, 39, 62, 150, 197, 20, 62, 190, 49, 176, 60, 124, 173, 137, 190, 41, 98, 126, 189, 141, 30, 0, 62, 109, 23, 172, 61, 63, 17, 133, 62, 120, 211, 28, 61, 215, 152, 141, 189, 52, 147, 115, 62, 188, 57, 70, 190, 5, 45, 112, 189, 72, 137, 91, 62, 61, 22, 214, 62, 170, 236, 94, 190, 7, 210, 148, 62, 180, 253, 68, 61, 147, 71, 223, 188, 222, 181, 61, 190, 247, 54, 69, 62, 155, 151, 0, 61, 152, 8, 38, 62, 158, 140, 110, 62, 205, 84, 29, 190, 60, 170, 86, 190, 2, 85, 108, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {216, 144, 34, 63, 240, 217, 41, 190, 236, 133, 121, 190, 127, 146, 15, 63, 52, 212, 25, 63, 30, 166, 224, 58, 23, 98, 32, 191, 192, 197, 241, 62, 193, 156, 215, 61, 202, 185, 206, 62, 162, 129, 0, 190, 156, 193, 83, 60, 45, 67, 185, 190, 18, 253, 37, 63, 150, 112, 6, 190, 15, 252, 2, 187, 75, 135, 244, 189, 6, 206, 132, 190, 208, 156, 5, 190, 211, 222, 133, 63, 0, 105, 207, 61, 166, 184, 66, 63, 49, 58, 16, 63, 240, 228, 176, 62, 5, 111, 140, 190, 229, 185, 195, 190, 51, 105, 230, 62, 43, 214, 212, 190, 253, 59, 158, 63, 239, 2, 220, 187, 119, 100, 18, 190, 1, 3, 225, 62, 164, 150, 161, 61, 72, 178, 7, 190, 5, 200, 28, 190, 92, 9, 187, 61, 252, 255, 10, 189, 113, 49, 159, 190, 193, 36, 210, 61, 238, 206, 77, 189, 233, 248, 17, 62, 245, 66, 133, 188, 183, 25, 149, 190, 74, 134, 0, 191, 74, 177, 226, 61, 8, 241, 141, 61, 171, 226, 206, 189, 36, 79, 196, 190, 216, 14, 7, 61, 45, 96, 116, 62, 68, 27, 101, 190, 69, 10, 3, 62, 134, 253, 177, 61, 40, 60, 141, 62, 86, 78, 228, 61, 9, 132, 160, 62, 181, 117, 116, 60, 4, 205, 4, 189, 60, 35, 147, 190, 255, 136, 52, 61, 47, 239, 136, 61, 200, 37, 178, 189, 77, 43, 160, 189, 89, 95, 59, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 214, 132, 190, 146, 6, 159, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {73, 15, 194, 190, 220, 203, 134, 62, 87, 2, 100, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {179, 56, 180, 191, 212, 197, 24, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0084/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}