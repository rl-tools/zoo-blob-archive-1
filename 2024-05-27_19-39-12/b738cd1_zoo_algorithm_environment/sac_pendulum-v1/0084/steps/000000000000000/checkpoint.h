// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 195, 188, 190, 34, 185, 161, 190, 224, 113, 15, 63, 36, 224, 3, 62, 215, 113, 19, 63, 73, 159, 112, 62, 27, 180, 113, 189, 249, 252, 230, 61, 216, 176, 206, 190, 10, 169, 1, 63, 45, 60, 81, 61, 245, 141, 12, 191, 36, 128, 54, 62, 146, 157, 213, 61, 245, 182, 86, 62, 59, 255, 18, 190, 161, 44, 1, 191, 167, 27, 244, 190, 173, 211, 170, 62, 251, 107, 187, 62, 137, 139, 196, 61, 90, 82, 239, 61, 237, 29, 17, 190, 234, 147, 169, 62, 178, 155, 9, 191, 108, 89, 158, 61, 210, 109, 236, 62, 245, 133, 114, 190, 130, 202, 154, 190, 237, 230, 3, 191, 125, 172, 158, 60, 27, 174, 174, 189, 2, 98, 9, 191, 239, 48, 190, 190, 15, 107, 95, 62, 164, 76, 177, 190, 237, 116, 239, 190, 237, 180, 205, 190, 109, 130, 253, 61, 41, 42, 29, 190, 217, 120, 49, 61, 29, 21, 205, 190, 36, 142, 107, 190, 214, 121, 128, 190, 174, 31, 208, 190, 124, 73, 227, 62, 157, 129, 227, 62, 141, 245, 225, 190, 131, 66, 16, 63, 212, 150, 16, 62, 142, 5, 123, 62, 85, 195, 136, 190, 33, 34, 142, 61, 15, 211, 51, 62, 127, 79, 78, 62, 90, 94, 11, 191, 208, 24, 209, 188, 206, 148, 143, 190, 90, 55, 135, 62, 41, 64, 26, 189, 24, 134, 56, 62, 166, 213, 50, 190, 11, 229, 176, 60, 154, 181, 83, 60, 243, 4, 187, 61, 170, 53, 61, 62, 221, 114, 7, 61, 118, 28, 190, 62, 92, 194, 8, 191, 111, 169, 23, 62, 66, 246, 150, 190, 212, 119, 241, 62, 191, 87, 6, 61, 243, 187, 231, 62, 211, 97, 98, 190, 172, 98, 161, 62, 50, 158, 205, 189, 76, 71, 202, 190, 129, 100, 214, 61, 154, 181, 174, 190, 243, 4, 183, 62, 126, 193, 24, 190, 88, 3, 174, 190, 16, 3, 248, 61, 146, 123, 123, 62, 168, 70, 229, 190, 25, 128, 173, 61, 126, 3, 246, 190, 201, 1, 148, 62, 110, 146, 244, 190, 231, 49, 61, 190, 158, 221, 144, 190, 110, 137, 168, 190, 109, 126, 67, 190, 10, 209, 130, 62, 108, 105, 254, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 154, 19, 191, 230, 246, 125, 190, 45, 1, 142, 62, 152, 36, 28, 62, 188, 179, 5, 191, 184, 132, 129, 188, 10, 200, 250, 62, 62, 154, 37, 190, 72, 109, 98, 190, 184, 39, 162, 62, 250, 76, 19, 63, 144, 250, 14, 190, 27, 251, 188, 190, 10, 246, 170, 190, 172, 168, 44, 190, 111, 212, 233, 62, 181, 138, 215, 62, 73, 204, 141, 61, 66, 184, 117, 61, 43, 221, 14, 63, 123, 64, 32, 190, 245, 244, 177, 62, 32, 46, 6, 63, 11, 210, 198, 62, 50, 220, 11, 191, 69, 0, 74, 62, 186, 59, 0, 191, 81, 181, 169, 189, 11, 14, 213, 190, 151, 192, 189, 61, 173, 114, 138, 62, 1, 212, 126, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 181, 49, 62, 166, 52, 25, 189, 208, 65, 217, 188, 31, 164, 201, 61, 253, 9, 22, 62, 68, 15, 213, 61, 135, 83, 37, 62, 87, 4, 255, 187, 21, 121, 105, 60, 144, 191, 20, 62, 164, 96, 7, 62, 20, 190, 246, 189, 204, 41, 210, 189, 195, 200, 164, 189, 51, 130, 6, 61, 101, 104, 234, 60, 116, 133, 177, 61, 13, 57, 33, 190, 23, 22, 47, 190, 206, 149, 200, 188, 108, 127, 9, 60, 71, 67, 166, 188, 86, 207, 139, 61, 199, 243, 153, 61, 45, 140, 45, 62, 156, 179, 3, 190, 208, 110, 140, 187, 30, 227, 195, 61, 48, 182, 79, 189, 89, 98, 245, 61, 3, 232, 172, 189, 5, 237, 28, 190, 156, 209, 19, 190, 225, 253, 161, 189, 79, 49, 255, 188, 13, 255, 77, 61, 76, 94, 179, 189, 135, 7, 27, 190, 202, 182, 82, 60, 191, 88, 8, 62, 76, 175, 252, 189, 92, 55, 159, 189, 28, 100, 242, 61, 152, 184, 207, 61, 82, 100, 38, 190, 12, 137, 33, 190, 67, 212, 100, 59, 98, 238, 181, 187, 73, 1, 197, 60, 52, 160, 145, 61, 104, 187, 151, 61, 165, 206, 157, 188, 83, 120, 188, 61, 253, 199, 222, 189, 169, 107, 31, 189, 85, 161, 147, 189, 131, 34, 192, 61, 68, 247, 174, 189, 26, 74, 173, 189, 3, 182, 236, 189, 120, 70, 32, 190, 190, 193, 50, 190, 24, 231, 40, 190, 107, 138, 40, 187, 204, 117, 151, 189, 50, 151, 4, 62, 238, 194, 204, 61, 153, 63, 99, 189, 176, 19, 17, 190, 170, 143, 183, 60, 202, 207, 135, 61, 151, 123, 19, 62, 254, 170, 7, 190, 78, 192, 77, 189, 114, 13, 5, 61, 177, 49, 131, 61, 175, 83, 164, 61, 181, 88, 211, 61, 0, 182, 222, 189, 144, 114, 45, 190, 194, 91, 59, 59, 137, 14, 12, 189, 158, 174, 42, 190, 156, 66, 12, 62, 158, 167, 238, 61, 62, 218, 30, 190, 175, 235, 32, 190, 93, 107, 36, 190, 128, 233, 49, 61, 216, 168, 135, 189, 16, 120, 51, 61, 142, 65, 42, 189, 228, 69, 112, 60, 130, 10, 76, 61, 75, 68, 174, 60, 61, 253, 182, 61, 67, 81, 39, 62, 74, 215, 21, 62, 182, 218, 16, 61, 198, 133, 91, 61, 15, 113, 191, 189, 252, 21, 240, 61, 198, 162, 159, 189, 222, 84, 18, 190, 252, 44, 130, 189, 33, 40, 21, 62, 225, 50, 244, 61, 123, 41, 178, 61, 246, 229, 26, 62, 201, 152, 50, 189, 165, 236, 173, 61, 185, 246, 188, 60, 181, 26, 39, 190, 244, 116, 45, 62, 252, 213, 25, 62, 121, 155, 32, 190, 167, 130, 4, 61, 49, 157, 31, 189, 58, 181, 34, 190, 57, 248, 25, 190, 236, 25, 170, 61, 102, 56, 234, 61, 128, 235, 5, 190, 192, 249, 22, 59, 221, 171, 48, 190, 182, 207, 251, 61, 124, 192, 152, 188, 61, 96, 18, 190, 224, 68, 173, 188, 81, 192, 39, 190, 100, 21, 34, 62, 69, 114, 31, 62, 43, 161, 157, 59, 219, 143, 233, 189, 94, 91, 252, 189, 125, 65, 13, 62, 39, 237, 34, 190, 66, 248, 28, 62, 25, 105, 111, 60, 28, 56, 3, 190, 160, 192, 10, 62, 214, 26, 242, 61, 119, 65, 1, 190, 81, 219, 40, 190, 40, 38, 58, 61, 186, 26, 20, 62, 141, 244, 46, 62, 37, 226, 147, 187, 217, 55, 39, 62, 23, 45, 141, 189, 232, 88, 217, 60, 4, 30, 177, 61, 55, 234, 127, 61, 149, 227, 14, 61, 7, 202, 247, 61, 92, 239, 21, 190, 183, 104, 40, 190, 134, 29, 2, 189, 245, 117, 6, 189, 0, 215, 43, 62, 102, 220, 0, 62, 207, 140, 73, 61, 221, 21, 89, 61, 231, 69, 35, 62, 153, 188, 245, 189, 232, 141, 160, 60, 247, 61, 231, 189, 239, 254, 52, 62, 125, 42, 20, 62, 137, 77, 247, 61, 162, 97, 215, 61, 91, 71, 252, 61, 234, 245, 147, 189, 98, 56, 18, 190, 182, 8, 163, 187, 154, 141, 46, 62, 122, 160, 230, 61, 189, 164, 159, 61, 254, 41, 23, 190, 248, 111, 45, 62, 9, 47, 45, 190, 242, 252, 183, 61, 101, 5, 247, 189, 204, 71, 176, 61, 155, 27, 179, 189, 189, 222, 9, 190, 19, 212, 6, 190, 147, 173, 116, 189, 42, 224, 227, 61, 74, 143, 2, 62, 28, 17, 150, 58, 91, 114, 26, 62, 192, 113, 49, 62, 255, 149, 39, 190, 223, 195, 48, 61, 120, 109, 52, 190, 8, 56, 50, 188, 101, 104, 7, 189, 112, 21, 47, 62, 150, 102, 141, 188, 169, 149, 40, 62, 119, 182, 173, 61, 197, 168, 92, 61, 103, 84, 208, 188, 221, 136, 241, 60, 145, 55, 16, 190, 61, 26, 230, 187, 156, 168, 133, 61, 201, 75, 28, 62, 108, 247, 169, 189, 43, 237, 141, 189, 80, 182, 246, 189, 208, 213, 21, 62, 246, 104, 114, 189, 93, 116, 3, 190, 64, 148, 37, 62, 107, 52, 206, 189, 201, 58, 249, 189, 146, 242, 238, 187, 212, 102, 255, 61, 10, 67, 205, 61, 13, 242, 37, 62, 30, 125, 199, 189, 127, 152, 36, 190, 230, 106, 170, 187, 176, 245, 165, 189, 221, 37, 139, 189, 114, 221, 93, 61, 225, 9, 227, 188, 40, 216, 46, 190, 231, 202, 106, 61, 121, 244, 118, 188, 68, 255, 42, 62, 57, 67, 172, 61, 146, 32, 50, 62, 200, 248, 172, 61, 189, 89, 134, 188, 177, 135, 8, 62, 83, 0, 109, 61, 116, 42, 20, 190, 52, 101, 242, 189, 91, 166, 11, 190, 133, 69, 6, 59, 133, 34, 15, 62, 252, 18, 159, 189, 121, 247, 4, 190, 50, 44, 187, 61, 219, 168, 24, 190, 171, 107, 145, 60, 209, 114, 72, 189, 137, 153, 4, 190, 148, 27, 212, 61, 160, 4, 3, 62, 50, 45, 203, 61, 92, 84, 157, 60, 53, 241, 58, 188, 65, 42, 98, 60, 0, 210, 149, 61, 127, 111, 27, 190, 222, 242, 131, 61, 187, 220, 186, 189, 153, 250, 6, 190, 82, 44, 96, 189, 252, 69, 210, 61, 209, 247, 156, 189, 151, 242, 45, 190, 4, 121, 150, 189, 229, 60, 207, 61, 101, 1, 235, 61, 113, 23, 83, 189, 93, 169, 34, 61, 199, 81, 131, 189, 148, 109, 68, 189, 238, 68, 213, 61, 184, 181, 233, 61, 94, 34, 158, 189, 233, 218, 34, 62, 228, 251, 186, 61, 69, 223, 143, 61, 142, 149, 51, 190, 119, 136, 50, 61, 164, 190, 230, 59, 103, 71, 183, 189, 132, 238, 143, 189, 67, 44, 36, 61, 171, 226, 1, 62, 140, 238, 217, 189, 114, 128, 35, 62, 225, 30, 141, 189, 207, 105, 3, 62, 102, 64, 6, 190, 255, 216, 12, 190, 48, 114, 16, 62, 52, 133, 253, 189, 108, 135, 11, 62, 138, 103, 11, 62, 1, 148, 15, 190, 227, 3, 2, 190, 125, 29, 200, 61, 71, 180, 221, 186, 50, 202, 19, 190, 169, 89, 46, 61, 65, 220, 43, 62, 80, 139, 225, 61, 81, 31, 176, 61, 26, 116, 239, 60, 26, 252, 43, 190, 226, 186, 251, 188, 11, 83, 170, 61, 223, 197, 51, 190, 124, 23, 3, 62, 25, 189, 216, 189, 152, 215, 84, 61, 224, 235, 147, 61, 82, 150, 50, 62, 23, 143, 19, 190, 222, 178, 105, 189, 206, 62, 189, 189, 74, 131, 225, 61, 234, 38, 47, 190, 170, 51, 28, 190, 32, 135, 13, 190, 30, 95, 128, 189, 195, 219, 209, 61, 213, 204, 92, 61, 237, 72, 30, 190, 59, 42, 6, 189, 91, 162, 5, 189, 247, 89, 196, 60, 41, 232, 19, 62, 14, 125, 226, 61, 252, 57, 107, 61, 68, 105, 37, 187, 1, 3, 194, 59, 225, 190, 37, 62, 156, 77, 33, 62, 242, 166, 153, 61, 232, 74, 48, 190, 48, 18, 202, 188, 94, 78, 17, 62, 197, 240, 24, 190, 111, 161, 84, 59, 84, 190, 169, 61, 12, 30, 220, 59, 69, 244, 238, 61, 156, 28, 49, 190, 155, 169, 13, 189, 199, 139, 27, 189, 126, 118, 171, 189, 152, 100, 205, 60, 19, 118, 53, 189, 14, 243, 175, 186, 143, 139, 12, 190, 134, 223, 31, 62, 236, 192, 124, 189, 243, 251, 19, 190, 136, 205, 14, 61, 225, 110, 247, 61, 12, 142, 232, 61, 114, 49, 29, 188, 74, 52, 255, 188, 3, 8, 216, 60, 227, 225, 13, 190, 147, 179, 3, 62, 244, 177, 10, 59, 206, 108, 15, 190, 98, 216, 181, 189, 197, 250, 229, 60, 121, 45, 35, 190, 233, 239, 166, 189, 18, 61, 46, 61, 8, 37, 129, 61, 154, 143, 249, 189, 189, 43, 209, 61, 205, 28, 139, 61, 41, 118, 18, 60, 225, 208, 140, 188, 148, 15, 76, 189, 185, 93, 210, 189, 96, 110, 185, 60, 105, 150, 96, 60, 245, 0, 6, 190, 111, 231, 38, 61, 179, 29, 160, 60, 153, 46, 31, 190, 197, 210, 186, 61, 16, 19, 42, 62, 18, 71, 18, 62, 29, 242, 232, 189, 151, 50, 133, 188, 36, 194, 194, 60, 35, 194, 109, 61, 127, 93, 8, 62, 192, 139, 48, 190, 99, 49, 120, 61, 158, 59, 45, 62, 180, 62, 29, 60, 98, 217, 172, 61, 90, 13, 27, 61, 8, 43, 51, 190, 245, 141, 31, 62, 24, 189, 68, 60, 255, 101, 121, 189, 128, 232, 41, 190, 176, 155, 227, 61, 7, 85, 91, 61, 7, 160, 43, 190, 40, 35, 13, 190, 192, 60, 142, 188, 83, 230, 12, 190, 244, 181, 205, 187, 40, 162, 27, 190, 239, 219, 206, 186, 59, 196, 9, 188, 212, 165, 200, 61, 156, 146, 1, 62, 9, 242, 0, 190, 20, 49, 181, 188, 51, 120, 30, 190, 219, 249, 241, 61, 212, 195, 251, 189, 1, 122, 60, 61, 184, 234, 24, 62, 148, 53, 27, 189, 55, 204, 237, 189, 159, 160, 240, 61, 64, 59, 253, 61, 44, 221, 2, 189, 80, 105, 158, 61, 39, 52, 197, 187, 112, 97, 0, 189, 1, 181, 102, 60, 3, 142, 11, 62, 167, 29, 24, 190, 33, 168, 212, 61, 5, 4, 24, 61, 30, 70, 191, 61, 122, 81, 163, 189, 239, 246, 45, 61, 79, 83, 6, 186, 59, 226, 1, 190, 176, 156, 9, 62, 169, 40, 15, 62, 154, 122, 26, 189, 240, 239, 85, 61, 191, 177, 249, 188, 78, 150, 139, 60, 111, 66, 106, 59, 242, 30, 85, 60, 21, 65, 2, 62, 129, 165, 129, 189, 84, 11, 220, 189, 74, 156, 23, 62, 20, 84, 179, 61, 130, 83, 52, 190, 244, 192, 233, 189, 50, 186, 144, 61, 196, 37, 0, 62, 22, 63, 240, 59, 28, 131, 41, 190, 144, 215, 216, 189, 7, 18, 183, 189, 207, 13, 2, 190, 31, 245, 44, 62, 117, 139, 176, 61, 199, 105, 34, 189, 47, 116, 186, 60, 246, 37, 24, 188, 59, 52, 35, 190, 115, 57, 37, 190, 79, 43, 180, 189, 172, 123, 190, 187, 220, 94, 245, 189, 95, 47, 33, 190, 123, 177, 196, 61, 221, 85, 28, 190, 3, 124, 19, 62, 94, 140, 216, 189, 193, 100, 29, 190, 213, 187, 205, 61, 200, 161, 238, 59, 223, 16, 137, 61, 146, 220, 45, 190, 194, 173, 155, 189, 209, 95, 33, 62, 127, 224, 47, 190, 124, 26, 164, 61, 99, 234, 23, 61, 144, 135, 20, 61, 147, 162, 141, 189, 163, 255, 24, 62, 119, 103, 226, 189, 30, 93, 148, 189, 15, 216, 172, 61, 177, 21, 157, 187, 182, 232, 35, 61, 125, 61, 214, 61, 131, 126, 75, 189, 60, 87, 207, 61, 118, 253, 207, 189, 229, 41, 156, 61, 221, 225, 137, 189, 64, 255, 41, 190, 38, 135, 136, 61, 100, 76, 65, 60, 198, 158, 94, 189, 91, 230, 226, 61, 46, 218, 209, 189, 203, 77, 72, 187, 50, 14, 212, 189, 233, 212, 86, 189, 176, 14, 213, 189, 47, 107, 18, 62, 193, 185, 163, 61, 160, 46, 242, 61, 128, 71, 30, 62, 132, 133, 111, 189, 198, 130, 103, 61, 199, 133, 61, 189, 25, 143, 30, 62, 107, 85, 131, 189, 236, 159, 40, 190, 70, 31, 18, 189, 61, 7, 67, 61, 239, 173, 38, 62, 13, 114, 148, 189, 206, 195, 246, 61, 49, 195, 137, 189, 129, 111, 225, 61, 103, 151, 201, 189, 105, 19, 189, 189, 236, 240, 177, 61, 121, 170, 216, 61, 94, 165, 109, 61, 43, 45, 210, 60, 182, 148, 4, 190, 222, 240, 114, 61, 204, 55, 44, 190, 128, 157, 254, 60, 136, 85, 50, 190, 150, 2, 99, 61, 79, 30, 4, 190, 173, 159, 2, 190, 64, 46, 23, 60, 66, 229, 158, 61, 149, 196, 159, 61, 30, 24, 42, 62, 18, 40, 232, 61, 213, 37, 198, 189, 89, 253, 237, 189, 239, 122, 49, 189, 144, 58, 144, 61, 171, 4, 158, 189, 230, 123, 78, 61, 249, 105, 21, 62, 82, 157, 200, 61, 99, 2, 22, 190, 4, 205, 244, 60, 161, 238, 32, 190, 177, 168, 134, 59, 47, 234, 255, 61, 114, 0, 140, 61, 135, 229, 241, 189, 164, 40, 138, 61, 89, 8, 35, 189, 182, 114, 52, 189, 47, 177, 177, 189, 179, 204, 45, 62, 207, 21, 244, 61, 14, 18, 13, 190, 185, 139, 151, 60, 160, 206, 18, 62, 33, 197, 187, 61, 165, 227, 32, 62, 134, 218, 167, 186, 238, 129, 49, 61, 223, 77, 63, 189, 58, 40, 173, 189, 195, 230, 184, 189, 101, 196, 75, 61, 124, 148, 42, 189, 212, 219, 203, 61, 216, 210, 33, 189, 83, 216, 6, 189, 149, 175, 173, 59, 197, 118, 41, 188, 124, 155, 223, 61, 237, 96, 207, 61, 4, 218, 19, 190, 20, 44, 182, 61, 101, 173, 49, 190, 178, 151, 255, 189, 147, 181, 206, 61, 53, 223, 159, 60, 231, 176, 201, 189, 133, 127, 26, 62, 181, 70, 217, 61, 127, 5, 239, 61, 98, 57, 211, 60, 22, 179, 207, 189, 231, 201, 107, 188, 97, 252, 58, 189, 15, 156, 47, 189, 21, 79, 3, 189, 11, 2, 158, 60, 150, 143, 9, 189, 40, 63, 51, 62, 187, 71, 151, 61, 147, 42, 24, 190, 81, 180, 142, 188, 88, 56, 16, 189, 225, 26, 152, 61, 81, 46, 16, 190, 181, 199, 247, 189, 223, 208, 7, 190, 155, 87, 132, 187, 33, 203, 46, 59, 117, 199, 152, 189, 155, 176, 180, 189, 125, 1, 20, 189, 207, 230, 197, 61, 152, 148, 11, 190, 180, 5, 164, 61, 153, 177, 159, 61, 54, 132, 181, 189, 42, 72, 209, 189, 164, 200, 166, 61, 122, 100, 231, 61, 188, 211, 61, 187, 51, 231, 221, 61, 11, 139, 196, 189, 230, 203, 238, 188, 149, 11, 208, 61, 16, 47, 186, 60, 117, 38, 19, 62, 230, 241, 134, 61, 221, 251, 208, 61, 219, 192, 86, 189, 52, 108, 11, 190, 186, 109, 34, 190, 176, 174, 74, 189, 125, 140, 211, 189, 108, 110, 12, 190, 222, 212, 198, 189, 187, 53, 144, 189, 236, 125, 248, 189, 202, 235, 21, 61, 226, 96, 133, 188, 114, 213, 204, 59, 30, 45, 100, 61, 248, 51, 117, 61, 105, 234, 160, 189, 145, 214, 33, 189, 239, 208, 189, 189, 84, 30, 179, 60, 43, 89, 19, 62, 249, 193, 10, 62, 131, 50, 24, 190, 127, 255, 48, 190, 220, 194, 131, 61, 82, 220, 12, 62, 155, 40, 147, 61, 26, 71, 153, 189, 91, 102, 128, 61, 140, 189, 4, 62, 50, 192, 171, 61, 222, 154, 12, 190, 11, 13, 242, 189, 30, 221, 13, 190, 255, 162, 165, 61, 145, 169, 221, 189, 205, 61, 75, 189, 12, 218, 136, 60, 3, 36, 71, 61, 120, 191, 135, 61, 41, 110, 209, 188, 113, 207, 219, 189, 9, 212, 90, 189, 113, 36, 233, 61, 94, 144, 13, 190, 35, 222, 83, 61, 206, 44, 23, 189, 189, 73, 50, 62, 3, 240, 213, 189, 115, 23, 111, 61, 149, 53, 89, 189, 246, 190, 32, 61, 25, 209, 21, 190, 89, 75, 3, 60, 130, 215, 161, 188, 119, 81, 92, 189, 45, 232, 44, 60, 90, 55, 231, 189, 228, 10, 16, 61, 102, 132, 195, 189, 149, 79, 194, 189, 111, 239, 193, 189, 178, 222, 34, 62, 24, 209, 158, 188, 226, 128, 17, 62, 220, 51, 189, 189, 218, 32, 220, 61, 17, 8, 41, 190, 246, 209, 157, 59, 190, 39, 182, 189, 125, 145, 40, 189, 73, 63, 6, 190, 158, 203, 135, 189, 142, 184, 40, 188, 105, 42, 40, 62, 74, 212, 150, 189, 59, 199, 111, 59, 100, 129, 212, 188, 80, 243, 86, 189, 33, 11, 237, 61, 135, 102, 104, 61, 99, 65, 141, 61, 102, 62, 170, 189, 30, 116, 5, 62, 204, 4, 250, 61, 132, 221, 243, 61, 59, 223, 50, 190, 46, 198, 134, 61, 8, 107, 235, 61, 102, 170, 28, 62, 237, 161, 223, 188, 174, 111, 204, 61, 42, 74, 213, 61, 190, 210, 146, 189, 133, 247, 141, 186, 237, 239, 48, 190, 162, 72, 240, 58, 84, 199, 84, 61, 50, 248, 40, 62, 144, 236, 29, 61, 227, 1, 110, 189, 206, 112, 225, 189, 57, 110, 103, 61, 11, 16, 181, 188, 250, 84, 225, 61, 62, 75, 229, 61, 229, 152, 203, 61, 176, 99, 130, 189, 199, 172, 35, 62, 150, 10, 229, 61, 230, 80, 23, 62, 65, 134, 25, 190, 242, 197, 13, 189, 252, 21, 14, 190, 104, 19, 243, 188, 190, 189, 36, 62, 91, 6, 133, 189, 36, 126, 202, 61, 80, 90, 132, 61, 81, 71, 47, 61, 175, 150, 180, 61, 17, 126, 179, 189, 153, 152, 223, 189, 150, 213, 16, 188, 22, 43, 166, 189, 20, 248, 67, 188, 103, 176, 18, 62, 65, 57, 160, 189, 105, 236, 140, 188, 89, 37, 170, 61, 12, 94, 2, 62, 6, 10, 212, 60, 193, 65, 32, 62, 133, 22, 29, 62, 108, 95, 42, 190, 221, 153, 181, 189, 159, 169, 182, 189, 114, 255, 27, 61, 183, 208, 45, 62, 34, 222, 187, 60, 232, 175, 128, 61, 27, 99, 78, 60, 20, 112, 128, 189, 27, 153, 179, 189, 212, 231, 173, 61, 151, 155, 6, 190, 219, 140, 213, 60, 12, 219, 152, 61, 104, 72, 20, 60, 243, 140, 170, 61, 95, 94, 178, 189, 162, 68, 161, 189, 43, 74, 211, 189, 41, 147, 7, 190, 252, 254, 129, 61, 186, 244, 22, 62, 185, 97, 72, 189, 111, 246, 19, 62, 49, 112, 14, 189, 159, 193, 31, 189, 196, 188, 17, 189, 238, 149, 16, 190, 42, 133, 62, 189, 70, 193, 74, 189, 191, 169, 66, 189, 203, 40, 61, 187, 86, 96, 151, 189, 178, 25, 226, 61, 22, 190, 94, 61, 160, 36, 26, 61, 109, 140, 131, 188, 57, 111, 3, 190, 6, 236, 12, 62, 124, 66, 148, 60, 29, 25, 244, 61, 204, 113, 3, 189, 75, 241, 45, 62, 151, 208, 29, 188, 45, 51, 28, 61, 36, 37, 125, 189, 48, 42, 138, 60, 250, 85, 176, 189, 222, 253, 96, 188, 183, 26, 143, 61, 244, 218, 229, 189, 59, 52, 225, 189, 126, 2, 252, 189, 123, 121, 34, 62, 116, 70, 20, 190, 228, 31, 21, 190, 189, 191, 99, 61, 211, 8, 152, 61, 135, 198, 77, 188, 214, 132, 137, 188, 1, 255, 69, 187, 201, 237, 9, 62, 102, 244, 18, 61, 147, 248, 193, 59, 175, 118, 16, 62, 248, 108, 40, 62, 171, 212, 73, 189, 24, 190, 19, 190, 98, 116, 228, 61, 105, 155, 145, 189, 95, 61, 163, 61, 88, 7, 163, 60, 231, 159, 98, 60, 167, 76, 38, 190, 47, 38, 95, 189, 71, 151, 124, 61, 194, 63, 45, 190, 40, 92, 160, 61, 10, 32, 154, 61, 59, 102, 50, 62, 21, 215, 57, 189, 57, 156, 125, 61, 61, 119, 254, 61, 72, 99, 31, 190, 165, 2, 214, 189, 153, 49, 44, 62, 222, 187, 153, 189, 120, 102, 20, 190, 222, 178, 157, 189, 19, 157, 31, 190, 233, 154, 162, 61, 129, 116, 236, 61, 14, 200, 51, 190, 30, 147, 71, 188, 254, 34, 162, 188, 41, 70, 231, 61, 75, 224, 175, 61, 41, 93, 5, 62, 213, 201, 131, 61, 208, 51, 245, 59, 71, 231, 201, 189, 164, 197, 51, 62, 103, 13, 18, 190, 93, 111, 159, 189, 109, 8, 186, 61, 173, 36, 50, 61, 210, 118, 51, 62, 245, 114, 219, 61, 152, 147, 169, 189, 118, 8, 81, 189, 185, 132, 163, 58, 36, 16, 221, 61, 156, 242, 165, 61, 15, 246, 251, 188, 77, 169, 25, 189, 150, 149, 3, 190, 255, 170, 28, 62, 117, 186, 48, 60, 206, 167, 167, 189, 186, 140, 33, 62, 154, 228, 247, 189, 199, 156, 240, 58, 13, 65, 192, 61, 85, 36, 43, 190, 212, 225, 108, 60, 172, 254, 218, 61, 11, 204, 160, 61, 67, 156, 233, 187, 98, 141, 10, 61, 172, 148, 111, 59, 70, 208, 156, 189, 70, 144, 23, 61, 227, 140, 194, 59, 9, 17, 173, 61, 52, 123, 93, 61, 85, 171, 41, 62, 33, 64, 19, 190, 232, 46, 100, 61, 166, 89, 181, 61, 136, 174, 27, 62, 59, 5, 180, 61, 192, 238, 29, 190, 100, 28, 188, 61, 98, 52, 1, 62, 111, 74, 9, 61, 93, 0, 6, 62, 2, 130, 161, 189, 217, 104, 79, 61, 221, 160, 96, 61, 200, 161, 39, 187, 14, 2, 19, 62, 90, 189, 21, 190, 3, 148, 15, 190, 140, 168, 2, 190, 171, 19, 23, 62, 182, 44, 43, 62, 229, 32, 45, 62, 48, 243, 131, 61, 137, 214, 165, 189, 161, 28, 76, 61, 208, 80, 42, 189, 169, 47, 253, 61, 239, 120, 77, 189, 39, 74, 237, 61, 14, 5, 54, 189, 161, 222, 47, 190, 238, 135, 29, 190, 176, 135, 9, 189, 89, 84, 84, 189, 159, 16, 184, 189, 166, 91, 32, 190, 52, 64, 242, 189, 13, 179, 49, 188, 72, 230, 21, 62, 248, 105, 131, 189, 229, 100, 238, 189, 108, 234, 48, 62, 92, 218, 173, 186, 104, 110, 154, 188, 248, 229, 88, 189, 175, 75, 202, 189, 126, 28, 14, 62, 140, 137, 191, 61, 127, 21, 33, 189, 124, 191, 49, 62, 215, 120, 4, 190, 91, 229, 160, 61, 146, 16, 251, 189, 39, 253, 10, 62, 23, 153, 225, 61, 168, 61, 50, 62, 67, 153, 66, 61, 71, 168, 43, 62, 27, 160, 36, 189, 21, 11, 13, 62, 202, 165, 229, 189, 51, 150, 49, 190, 151, 96, 84, 189, 103, 236, 137, 61, 220, 207, 25, 62, 231, 64, 33, 62, 221, 109, 5, 189, 65, 1, 34, 62, 170, 54, 153, 189, 137, 18, 241, 189, 183, 210, 232, 61, 32, 36, 144, 61, 232, 59, 183, 189, 238, 44, 98, 189, 103, 187, 148, 60, 253, 16, 224, 60, 176, 39, 170, 61, 232, 251, 26, 190, 120, 187, 79, 61, 144, 206, 15, 189, 110, 131, 236, 58, 61, 228, 159, 189, 124, 87, 246, 189, 98, 242, 135, 59, 164, 59, 160, 61, 89, 215, 191, 61, 53, 34, 164, 188, 95, 109, 35, 190, 27, 61, 35, 61, 208, 240, 46, 190, 7, 168, 223, 189, 166, 137, 25, 190, 10, 73, 207, 61, 239, 234, 25, 62, 47, 198, 0, 62, 178, 100, 32, 61, 4, 165, 50, 62, 230, 44, 186, 61, 9, 184, 27, 62, 178, 161, 34, 188, 18, 194, 63, 61, 144, 133, 50, 190, 183, 187, 33, 62, 142, 34, 129, 61, 106, 36, 28, 62, 71, 188, 7, 190, 46, 153, 200, 189, 196, 142, 152, 189, 80, 251, 29, 189, 37, 100, 51, 62, 20, 184, 242, 188, 92, 0, 44, 190, 217, 146, 76, 61, 7, 247, 174, 61, 64, 176, 157, 61, 226, 67, 147, 61, 78, 42, 189, 61, 227, 70, 118, 189, 79, 253, 174, 189, 164, 246, 153, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 89, 51, 189, 19, 198, 152, 186, 156, 104, 183, 189, 116, 171, 43, 62, 87, 11, 175, 189, 235, 23, 2, 62, 59, 140, 252, 188, 23, 172, 177, 188, 147, 50, 18, 190, 113, 49, 200, 61, 122, 0, 46, 189, 117, 245, 134, 61, 228, 167, 70, 61, 67, 43, 131, 61, 183, 31, 222, 188, 17, 173, 20, 62, 173, 92, 18, 190, 138, 6, 1, 190, 158, 85, 42, 61, 84, 81, 37, 62, 249, 37, 38, 190, 168, 92, 159, 61, 51, 144, 132, 188, 116, 104, 193, 189, 233, 151, 2, 190, 244, 111, 160, 189, 251, 41, 43, 190, 241, 175, 69, 61, 150, 178, 1, 62, 53, 25, 5, 190, 162, 18, 48, 190, 194, 169, 131, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 82, 213, 61, 235, 225, 41, 190, 68, 62, 50, 190, 231, 4, 8, 62, 127, 254, 33, 62, 175, 70, 209, 61, 120, 254, 3, 190, 146, 110, 21, 62, 127, 113, 31, 61, 204, 94, 41, 62, 179, 89, 206, 189, 114, 128, 199, 61, 137, 103, 176, 189, 203, 172, 5, 62, 201, 189, 8, 190, 194, 218, 24, 60, 88, 238, 52, 190, 240, 20, 17, 190, 163, 189, 108, 189, 83, 217, 28, 62, 22, 56, 28, 62, 118, 106, 139, 61, 8, 105, 193, 60, 243, 214, 246, 61, 235, 98, 36, 190, 9, 87, 250, 189, 240, 89, 149, 61, 34, 181, 228, 189, 191, 185, 238, 61, 207, 134, 148, 61, 55, 230, 37, 190, 45, 140, 24, 62, 251, 56, 31, 62, 241, 178, 7, 190, 117, 145, 22, 62, 143, 8, 75, 189, 10, 152, 4, 190, 195, 199, 29, 190, 140, 2, 239, 61, 50, 220, 140, 189, 107, 41, 20, 62, 146, 120, 85, 61, 253, 17, 52, 190, 154, 224, 31, 190, 214, 188, 241, 187, 27, 178, 220, 61, 124, 211, 214, 189, 108, 97, 38, 190, 65, 106, 229, 60, 188, 196, 197, 61, 42, 231, 43, 190, 199, 246, 209, 189, 224, 72, 16, 62, 164, 206, 101, 61, 222, 103, 13, 61, 24, 200, 56, 61, 115, 198, 38, 190, 11, 182, 174, 189, 101, 254, 235, 189, 108, 8, 149, 61, 120, 41, 212, 61, 232, 51, 9, 190, 163, 154, 14, 190, 198, 83, 73, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 164, 188, 189, 156, 33, 182, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {81, 6, 154, 62, 160, 57, 148, 191, 249, 105, 125, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {26, 214, 40, 61, 13, 183, 86, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0084/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}