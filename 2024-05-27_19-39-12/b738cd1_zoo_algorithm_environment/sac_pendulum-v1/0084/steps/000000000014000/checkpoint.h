// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 198, 44, 191, 130, 229, 136, 62, 240, 183, 26, 63, 149, 128, 215, 62, 62, 111, 159, 63, 203, 97, 143, 62, 159, 243, 141, 61, 189, 186, 183, 190, 153, 188, 219, 190, 125, 69, 67, 63, 98, 68, 43, 191, 215, 144, 36, 191, 167, 34, 39, 63, 98, 225, 8, 63, 231, 254, 135, 62, 225, 18, 106, 62, 203, 132, 185, 191, 220, 101, 209, 190, 243, 211, 11, 63, 17, 201, 128, 63, 201, 54, 188, 189, 240, 149, 239, 189, 203, 226, 247, 189, 197, 183, 171, 62, 132, 59, 19, 191, 168, 62, 76, 63, 85, 153, 171, 62, 182, 17, 70, 63, 135, 141, 47, 191, 219, 121, 24, 190, 115, 140, 145, 62, 217, 152, 150, 62, 71, 111, 32, 190, 104, 83, 101, 190, 146, 5, 148, 190, 37, 20, 236, 190, 156, 186, 249, 190, 242, 134, 74, 191, 224, 160, 153, 62, 16, 210, 245, 189, 234, 165, 52, 191, 79, 23, 209, 190, 213, 92, 36, 62, 221, 167, 151, 191, 80, 92, 147, 190, 58, 51, 41, 63, 212, 47, 209, 62, 79, 57, 20, 191, 114, 186, 25, 63, 96, 198, 89, 63, 9, 61, 140, 62, 109, 68, 7, 191, 2, 120, 61, 63, 1, 148, 1, 62, 120, 251, 208, 62, 12, 2, 61, 191, 119, 193, 180, 62, 38, 8, 8, 191, 124, 164, 138, 62, 99, 27, 21, 61, 236, 94, 6, 62, 64, 116, 230, 189, 20, 215, 158, 186, 4, 65, 61, 190, 151, 19, 113, 63, 21, 24, 88, 62, 182, 234, 191, 62, 105, 185, 246, 188, 190, 43, 25, 191, 141, 216, 223, 61, 136, 43, 27, 63, 204, 92, 66, 62, 66, 16, 197, 190, 170, 196, 95, 62, 238, 13, 152, 190, 39, 106, 21, 63, 238, 247, 35, 191, 71, 185, 233, 190, 157, 61, 86, 190, 170, 176, 175, 190, 203, 120, 223, 62, 204, 136, 28, 190, 5, 40, 253, 190, 13, 63, 156, 62, 65, 21, 177, 60, 176, 70, 138, 191, 131, 179, 156, 62, 249, 106, 96, 191, 79, 113, 29, 189, 142, 176, 1, 191, 215, 83, 172, 61, 17, 155, 121, 191, 54, 83, 105, 190, 55, 64, 28, 188, 100, 50, 77, 191, 44, 11, 202, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 99, 248, 190, 245, 65, 72, 190, 241, 86, 216, 59, 88, 252, 203, 61, 37, 229, 55, 191, 32, 106, 87, 190, 105, 52, 168, 62, 156, 237, 174, 189, 242, 230, 75, 190, 186, 254, 167, 62, 23, 202, 10, 63, 21, 34, 145, 190, 105, 2, 28, 190, 134, 113, 23, 191, 107, 192, 178, 190, 185, 29, 205, 62, 107, 252, 222, 62, 177, 189, 237, 62, 79, 12, 141, 62, 128, 80, 68, 63, 203, 171, 120, 190, 191, 192, 246, 62, 134, 187, 16, 62, 88, 189, 121, 62, 37, 55, 59, 191, 165, 232, 113, 61, 168, 217, 1, 191, 235, 160, 89, 190, 108, 132, 13, 190, 182, 55, 147, 62, 114, 137, 164, 190, 122, 182, 202, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 83, 16, 188, 208, 254, 0, 190, 20, 1, 172, 60, 142, 1, 105, 62, 151, 149, 33, 63, 117, 199, 209, 61, 252, 78, 121, 62, 132, 106, 16, 190, 233, 248, 209, 189, 141, 118, 35, 62, 201, 178, 236, 61, 144, 72, 47, 190, 223, 184, 222, 190, 35, 113, 154, 189, 223, 107, 23, 190, 147, 173, 80, 60, 83, 99, 229, 189, 229, 198, 246, 190, 10, 223, 89, 190, 71, 232, 225, 190, 98, 223, 205, 186, 194, 212, 4, 191, 219, 181, 142, 61, 201, 204, 196, 60, 208, 47, 174, 62, 220, 96, 108, 188, 87, 209, 56, 190, 175, 42, 127, 189, 106, 194, 44, 191, 213, 122, 57, 60, 176, 102, 82, 190, 94, 105, 134, 190, 156, 209, 19, 190, 108, 208, 165, 189, 226, 216, 1, 189, 135, 248, 201, 60, 76, 94, 179, 189, 135, 7, 27, 190, 216, 38, 135, 188, 190, 252, 5, 62, 76, 175, 252, 189, 22, 28, 198, 189, 113, 218, 178, 61, 152, 184, 207, 61, 82, 100, 38, 190, 12, 137, 33, 190, 67, 212, 100, 59, 31, 192, 8, 189, 160, 235, 251, 187, 52, 160, 145, 61, 94, 222, 97, 61, 208, 190, 230, 188, 83, 120, 188, 61, 105, 212, 255, 189, 242, 110, 101, 189, 164, 138, 199, 189, 131, 34, 192, 61, 150, 118, 214, 189, 26, 74, 173, 189, 3, 182, 236, 189, 120, 70, 32, 190, 190, 193, 50, 190, 24, 231, 40, 190, 107, 138, 40, 187, 170, 17, 228, 60, 168, 119, 153, 59, 212, 165, 159, 61, 246, 94, 18, 190, 180, 129, 83, 189, 86, 58, 41, 190, 140, 192, 148, 61, 92, 28, 5, 62, 91, 165, 173, 61, 80, 52, 37, 190, 55, 188, 233, 61, 253, 49, 147, 61, 14, 53, 224, 61, 217, 251, 152, 189, 132, 159, 110, 190, 224, 4, 13, 191, 90, 116, 141, 189, 101, 173, 89, 62, 81, 169, 117, 190, 8, 34, 155, 62, 101, 144, 238, 61, 95, 197, 240, 187, 193, 174, 70, 189, 37, 197, 32, 190, 248, 136, 104, 62, 151, 227, 72, 190, 36, 222, 61, 61, 65, 120, 128, 189, 192, 233, 24, 189, 151, 59, 89, 62, 6, 133, 52, 189, 85, 74, 11, 62, 203, 234, 29, 62, 163, 193, 70, 191, 212, 107, 17, 188, 238, 113, 208, 62, 74, 22, 46, 191, 118, 67, 229, 61, 32, 40, 208, 61, 122, 61, 135, 190, 119, 53, 39, 62, 101, 42, 204, 61, 65, 48, 230, 61, 244, 97, 21, 190, 233, 253, 14, 63, 172, 49, 248, 61, 89, 252, 227, 189, 65, 149, 54, 61, 15, 49, 169, 190, 129, 33, 189, 189, 225, 46, 36, 63, 246, 169, 169, 190, 38, 13, 215, 60, 233, 222, 180, 190, 125, 179, 55, 190, 146, 253, 221, 189, 136, 96, 135, 62, 112, 213, 233, 62, 113, 139, 186, 190, 30, 246, 191, 62, 84, 150, 218, 190, 22, 180, 147, 189, 147, 116, 46, 190, 163, 89, 37, 191, 16, 129, 78, 188, 28, 180, 56, 61, 9, 168, 155, 62, 20, 73, 201, 60, 240, 107, 42, 190, 153, 196, 91, 62, 64, 93, 181, 61, 43, 72, 65, 61, 211, 147, 58, 61, 129, 173, 80, 190, 199, 196, 117, 190, 175, 20, 63, 189, 171, 71, 88, 62, 150, 141, 247, 61, 158, 112, 213, 189, 156, 85, 97, 191, 7, 157, 102, 62, 245, 175, 245, 62, 198, 167, 123, 62, 102, 162, 58, 62, 133, 102, 33, 62, 154, 107, 9, 62, 224, 226, 249, 190, 96, 156, 62, 62, 203, 76, 82, 190, 88, 129, 213, 186, 152, 42, 105, 189, 227, 193, 106, 189, 180, 139, 66, 191, 251, 195, 149, 189, 59, 70, 230, 189, 225, 114, 156, 191, 127, 108, 209, 61, 47, 149, 214, 190, 5, 185, 58, 189, 71, 84, 157, 62, 126, 111, 96, 191, 53, 172, 21, 190, 156, 250, 89, 60, 228, 201, 10, 60, 16, 77, 129, 62, 174, 250, 24, 62, 119, 215, 15, 62, 83, 22, 138, 61, 82, 216, 128, 60, 37, 240, 222, 189, 8, 227, 36, 190, 4, 83, 37, 62, 71, 231, 218, 62, 81, 213, 63, 190, 247, 168, 170, 60, 244, 82, 206, 61, 13, 209, 41, 190, 244, 134, 39, 62, 61, 47, 39, 190, 81, 52, 43, 62, 219, 66, 9, 61, 95, 211, 217, 60, 151, 241, 152, 190, 34, 121, 186, 189, 142, 202, 75, 188, 71, 23, 37, 61, 46, 197, 184, 189, 48, 209, 105, 189, 48, 251, 15, 62, 56, 54, 63, 61, 5, 144, 66, 62, 147, 189, 28, 191, 56, 241, 64, 62, 88, 225, 48, 191, 149, 58, 228, 62, 125, 100, 38, 61, 172, 15, 144, 60, 186, 216, 32, 61, 66, 162, 103, 62, 61, 9, 126, 62, 24, 221, 7, 190, 191, 20, 29, 191, 156, 200, 212, 190, 129, 110, 134, 62, 82, 183, 133, 62, 250, 234, 254, 61, 6, 68, 207, 190, 179, 139, 11, 62, 241, 184, 28, 62, 25, 141, 248, 61, 77, 36, 161, 61, 35, 27, 238, 61, 108, 231, 218, 190, 171, 53, 5, 191, 80, 178, 212, 61, 85, 20, 198, 189, 205, 30, 5, 63, 213, 255, 9, 63, 23, 97, 166, 189, 23, 255, 8, 62, 213, 118, 19, 191, 108, 163, 23, 191, 140, 22, 103, 189, 185, 68, 135, 62, 222, 238, 173, 190, 158, 110, 46, 190, 118, 123, 74, 62, 200, 7, 166, 190, 49, 125, 67, 60, 154, 133, 17, 62, 233, 112, 96, 62, 189, 8, 106, 188, 252, 214, 168, 62, 211, 113, 53, 62, 247, 125, 184, 189, 37, 42, 249, 189, 19, 228, 10, 190, 250, 55, 119, 191, 127, 60, 5, 63, 53, 55, 153, 189, 92, 160, 170, 189, 138, 205, 68, 191, 32, 221, 204, 61, 36, 64, 134, 61, 140, 49, 129, 62, 20, 237, 31, 62, 165, 73, 227, 190, 145, 182, 4, 63, 62, 121, 35, 61, 241, 232, 0, 188, 113, 45, 15, 189, 0, 228, 118, 190, 151, 153, 93, 61, 13, 191, 244, 60, 247, 130, 57, 190, 232, 68, 14, 61, 64, 198, 182, 188, 238, 104, 229, 189, 189, 246, 250, 189, 101, 207, 13, 62, 198, 42, 131, 189, 194, 166, 181, 190, 154, 53, 224, 189, 72, 236, 146, 61, 29, 238, 47, 62, 197, 74, 167, 189, 73, 223, 7, 61, 244, 95, 190, 189, 88, 169, 161, 189, 232, 215, 37, 61, 40, 185, 47, 62, 20, 219, 20, 190, 233, 218, 34, 62, 109, 213, 42, 61, 70, 158, 41, 61, 114, 60, 60, 190, 28, 210, 99, 60, 31, 60, 204, 188, 45, 177, 0, 189, 71, 115, 138, 188, 53, 78, 250, 61, 54, 52, 145, 61, 247, 26, 2, 190, 186, 67, 5, 62, 77, 48, 167, 60, 68, 175, 22, 62, 100, 181, 30, 189, 250, 70, 154, 188, 202, 244, 12, 63, 139, 231, 83, 190, 126, 229, 201, 62, 234, 119, 58, 62, 45, 244, 248, 189, 108, 99, 138, 190, 141, 178, 187, 61, 88, 191, 121, 61, 157, 88, 115, 191, 33, 178, 53, 61, 120, 109, 134, 189, 19, 38, 141, 62, 124, 119, 143, 189, 153, 176, 156, 61, 86, 175, 202, 190, 49, 116, 59, 190, 64, 245, 165, 61, 14, 223, 161, 190, 106, 193, 122, 62, 143, 170, 170, 189, 30, 228, 191, 62, 209, 233, 27, 62, 218, 67, 73, 62, 156, 105, 35, 191, 169, 27, 156, 190, 253, 119, 8, 190, 194, 66, 187, 189, 0, 58, 242, 58, 22, 206, 243, 189, 241, 50, 69, 190, 112, 62, 149, 189, 196, 13, 83, 61, 224, 81, 144, 190, 120, 133, 92, 190, 0, 70, 6, 60, 93, 211, 134, 189, 43, 87, 215, 61, 189, 26, 137, 62, 63, 134, 64, 62, 172, 217, 241, 61, 67, 87, 174, 61, 208, 233, 8, 59, 114, 118, 97, 62, 214, 146, 48, 62, 210, 234, 172, 62, 70, 19, 5, 190, 175, 144, 106, 189, 230, 108, 147, 62, 83, 183, 11, 190, 198, 61, 144, 62, 165, 154, 184, 61, 210, 161, 156, 61, 37, 252, 249, 188, 117, 21, 79, 190, 116, 125, 16, 189, 172, 112, 145, 189, 188, 227, 136, 62, 148, 199, 255, 61, 130, 84, 140, 61, 111, 25, 164, 61, 112, 224, 243, 190, 22, 130, 233, 190, 224, 244, 164, 189, 93, 32, 182, 188, 14, 27, 191, 191, 240, 41, 240, 60, 188, 211, 17, 62, 141, 98, 158, 190, 243, 128, 220, 190, 137, 118, 24, 62, 22, 68, 177, 189, 42, 64, 58, 62, 171, 98, 80, 188, 86, 55, 143, 189, 204, 121, 254, 189, 151, 253, 249, 61, 254, 90, 190, 62, 242, 43, 84, 191, 67, 172, 193, 62, 60, 158, 98, 190, 32, 90, 229, 189, 196, 134, 31, 62, 207, 224, 212, 61, 34, 113, 118, 62, 105, 105, 194, 61, 225, 86, 161, 61, 44, 150, 212, 190, 54, 168, 21, 190, 170, 34, 140, 62, 41, 51, 1, 190, 11, 98, 157, 61, 175, 0, 140, 61, 110, 92, 232, 190, 112, 39, 63, 62, 177, 42, 124, 62, 188, 121, 204, 187, 170, 90, 37, 189, 125, 21, 93, 188, 26, 124, 4, 188, 107, 198, 204, 60, 195, 230, 215, 189, 182, 59, 32, 189, 224, 31, 32, 62, 196, 7, 156, 62, 7, 210, 8, 191, 204, 139, 12, 61, 72, 74, 53, 62, 70, 189, 232, 189, 236, 198, 187, 62, 221, 106, 105, 62, 122, 213, 192, 190, 131, 171, 191, 61, 235, 117, 246, 61, 211, 46, 164, 62, 9, 75, 163, 189, 118, 110, 49, 190, 166, 194, 146, 190, 14, 78, 135, 190, 119, 245, 128, 190, 74, 144, 15, 191, 45, 150, 153, 62, 235, 244, 78, 62, 76, 192, 137, 62, 175, 162, 182, 62, 13, 24, 41, 191, 4, 240, 122, 191, 24, 32, 21, 190, 189, 165, 159, 62, 251, 97, 15, 191, 91, 72, 47, 60, 108, 27, 74, 62, 42, 61, 170, 190, 115, 125, 175, 189, 33, 239, 27, 62, 142, 63, 23, 62, 16, 177, 241, 189, 20, 178, 248, 62, 7, 166, 252, 60, 177, 183, 99, 190, 73, 109, 166, 59, 129, 70, 61, 190, 138, 24, 59, 191, 168, 43, 31, 63, 70, 183, 89, 190, 101, 110, 161, 61, 251, 89, 40, 191, 0, 153, 204, 60, 189, 178, 7, 189, 90, 119, 21, 62, 32, 2, 160, 62, 35, 151, 79, 190, 71, 133, 202, 62, 210, 198, 251, 187, 115, 84, 2, 190, 139, 173, 146, 189, 163, 9, 84, 190, 119, 30, 15, 188, 234, 72, 230, 61, 129, 165, 129, 189, 84, 11, 220, 189, 27, 87, 14, 62, 250, 89, 174, 61, 139, 232, 65, 190, 100, 7, 38, 190, 46, 15, 79, 61, 65, 69, 191, 61, 202, 3, 200, 188, 28, 131, 41, 190, 182, 160, 12, 190, 7, 18, 183, 189, 207, 13, 2, 190, 31, 245, 44, 62, 170, 167, 42, 61, 16, 153, 95, 189, 12, 144, 116, 188, 82, 35, 18, 189, 59, 52, 35, 190, 184, 205, 70, 190, 79, 43, 180, 189, 31, 148, 100, 189, 220, 94, 245, 189, 91, 21, 38, 190, 172, 216, 63, 61, 104, 60, 68, 190, 189, 60, 220, 61, 94, 140, 216, 189, 193, 100, 29, 190, 213, 187, 205, 61, 139, 29, 242, 58, 222, 220, 75, 190, 174, 22, 232, 189, 101, 152, 228, 61, 130, 102, 9, 191, 182, 84, 151, 190, 86, 14, 130, 62, 153, 232, 156, 189, 153, 5, 26, 62, 60, 223, 129, 61, 82, 140, 152, 62, 249, 91, 158, 187, 215, 161, 128, 189, 3, 29, 18, 62, 164, 99, 236, 189, 215, 237, 56, 62, 90, 127, 233, 62, 147, 133, 74, 190, 133, 52, 235, 61, 63, 38, 140, 189, 7, 233, 173, 61, 112, 190, 1, 62, 54, 252, 95, 189, 219, 227, 38, 62, 218, 17, 40, 62, 19, 103, 13, 62, 167, 222, 25, 61, 18, 98, 81, 190, 144, 196, 59, 62, 131, 83, 248, 188, 16, 200, 38, 189, 219, 219, 104, 189, 10, 169, 205, 61, 173, 21, 242, 60, 160, 46, 242, 61, 128, 71, 30, 62, 207, 77, 207, 189, 198, 130, 103, 61, 11, 132, 160, 189, 18, 40, 230, 61, 232, 167, 226, 189, 216, 86, 39, 190, 70, 31, 18, 189, 61, 7, 67, 61, 207, 23, 3, 62, 13, 114, 148, 189, 206, 195, 246, 61, 49, 195, 137, 189, 238, 229, 124, 61, 114, 21, 28, 190, 73, 130, 234, 189, 43, 82, 6, 61, 121, 170, 216, 61, 221, 66, 2, 60, 43, 45, 210, 60, 19, 203, 49, 190, 222, 240, 114, 61, 204, 55, 44, 190, 130, 96, 10, 188, 59, 208, 85, 190, 13, 5, 9, 61, 79, 30, 4, 190, 173, 159, 2, 190, 64, 46, 23, 60, 139, 16, 39, 61, 57, 94, 110, 62, 15, 151, 99, 62, 170, 122, 135, 189, 20, 130, 88, 62, 80, 214, 185, 189, 5, 79, 67, 190, 107, 26, 30, 62, 103, 111, 99, 190, 137, 215, 244, 61, 184, 105, 66, 62, 83, 99, 58, 62, 188, 136, 189, 190, 60, 62, 86, 189, 149, 250, 65, 189, 212, 170, 206, 59, 127, 86, 97, 62, 233, 249, 94, 62, 160, 103, 244, 190, 20, 128, 89, 62, 25, 173, 250, 188, 138, 16, 228, 61, 86, 51, 101, 189, 112, 12, 198, 61, 64, 234, 10, 190, 204, 248, 156, 190, 143, 242, 21, 62, 51, 129, 179, 189, 22, 122, 238, 62, 176, 11, 165, 62, 199, 186, 247, 61, 44, 70, 102, 62, 162, 225, 34, 189, 105, 70, 20, 190, 62, 234, 179, 189, 56, 199, 148, 188, 40, 193, 170, 190, 133, 191, 112, 61, 67, 79, 80, 188, 219, 54, 147, 189, 88, 206, 18, 61, 193, 127, 245, 61, 179, 216, 74, 62, 141, 192, 40, 62, 77, 132, 172, 189, 95, 26, 136, 61, 32, 102, 182, 189, 214, 223, 209, 189, 71, 60, 164, 62, 214, 186, 23, 61, 214, 21, 16, 190, 123, 225, 156, 62, 19, 64, 242, 61, 90, 82, 182, 62, 161, 77, 44, 61, 175, 72, 152, 189, 223, 241, 77, 190, 224, 66, 179, 189, 153, 139, 21, 189, 84, 162, 159, 189, 89, 153, 197, 62, 192, 249, 158, 61, 190, 233, 160, 62, 35, 10, 44, 62, 34, 74, 74, 190, 25, 55, 205, 190, 41, 186, 101, 190, 33, 248, 117, 190, 44, 47, 124, 191, 84, 248, 61, 191, 0, 84, 106, 61, 27, 253, 91, 190, 170, 205, 35, 62, 202, 2, 74, 190, 56, 71, 189, 188, 237, 0, 146, 190, 145, 28, 147, 62, 203, 218, 235, 190, 219, 239, 60, 191, 115, 236, 6, 191, 173, 109, 188, 189, 54, 109, 95, 62, 53, 96, 54, 62, 245, 132, 210, 62, 182, 181, 22, 188, 56, 211, 168, 62, 8, 84, 124, 191, 14, 228, 197, 188, 145, 137, 201, 62, 68, 201, 29, 190, 148, 182, 14, 190, 94, 98, 97, 62, 143, 164, 143, 190, 170, 50, 180, 188, 128, 3, 242, 190, 80, 85, 228, 191, 172, 1, 101, 189, 2, 55, 12, 190, 79, 50, 81, 190, 204, 184, 32, 190, 140, 4, 153, 189, 236, 125, 248, 189, 197, 57, 161, 188, 178, 65, 32, 189, 23, 115, 42, 188, 234, 206, 221, 59, 4, 22, 254, 59, 105, 234, 160, 189, 145, 214, 33, 189, 239, 208, 189, 189, 84, 30, 179, 60, 208, 29, 178, 61, 210, 95, 169, 61, 160, 8, 50, 190, 73, 220, 41, 190, 202, 22, 60, 187, 82, 220, 12, 62, 72, 247, 9, 60, 180, 13, 13, 190, 34, 142, 28, 60, 36, 201, 3, 62, 34, 123, 175, 60, 42, 119, 19, 190, 11, 13, 242, 189, 30, 221, 13, 190, 255, 162, 165, 61, 172, 61, 237, 189, 205, 61, 75, 189, 234, 76, 28, 189, 131, 192, 189, 190, 142, 199, 116, 189, 190, 21, 83, 62, 108, 215, 69, 191, 166, 222, 192, 190, 187, 188, 224, 61, 75, 190, 73, 190, 205, 150, 17, 62, 198, 234, 191, 60, 167, 70, 150, 61, 39, 132, 75, 190, 34, 205, 109, 62, 101, 78, 158, 188, 117, 174, 5, 191, 133, 219, 42, 191, 79, 225, 158, 189, 211, 71, 252, 61, 149, 193, 51, 62, 104, 110, 43, 62, 35, 143, 239, 189, 23, 9, 241, 61, 47, 193, 11, 191, 204, 237, 13, 190, 116, 249, 9, 62, 8, 218, 216, 62, 199, 193, 199, 189, 144, 92, 153, 62, 220, 93, 140, 190, 169, 206, 40, 62, 52, 33, 228, 190, 222, 52, 187, 191, 248, 85, 148, 190, 145, 138, 67, 191, 22, 163, 104, 190, 117, 235, 186, 189, 2, 229, 13, 191, 238, 39, 19, 191, 179, 223, 163, 189, 147, 100, 39, 190, 25, 226, 163, 189, 158, 176, 168, 190, 214, 145, 167, 187, 74, 46, 3, 62, 173, 154, 12, 63, 71, 44, 150, 190, 35, 124, 44, 191, 109, 187, 156, 61, 194, 210, 243, 189, 150, 21, 148, 190, 224, 188, 2, 63, 86, 236, 239, 61, 242, 249, 24, 62, 88, 20, 185, 189, 242, 158, 171, 61, 193, 173, 111, 188, 143, 146, 22, 63, 82, 113, 194, 189, 227, 188, 179, 190, 205, 85, 220, 62, 172, 123, 138, 189, 197, 171, 110, 62, 208, 189, 0, 191, 162, 44, 0, 191, 53, 96, 177, 190, 188, 93, 239, 190, 78, 99, 32, 188, 45, 101, 173, 62, 254, 196, 100, 190, 163, 57, 253, 61, 163, 37, 38, 61, 248, 105, 34, 189, 37, 252, 135, 61, 116, 8, 139, 62, 194, 127, 192, 189, 192, 160, 98, 190, 111, 249, 214, 61, 156, 208, 111, 189, 126, 214, 205, 60, 17, 37, 16, 189, 44, 9, 146, 189, 89, 156, 91, 191, 219, 221, 227, 62, 164, 203, 38, 190, 150, 174, 197, 189, 29, 212, 109, 191, 52, 37, 169, 59, 61, 126, 99, 61, 205, 18, 177, 61, 220, 196, 186, 62, 156, 154, 130, 190, 239, 5, 142, 62, 192, 24, 173, 189, 39, 210, 92, 189, 162, 232, 25, 189, 192, 144, 202, 189, 247, 15, 161, 190, 89, 97, 61, 62, 123, 105, 148, 189, 181, 185, 22, 189, 91, 66, 0, 61, 40, 246, 200, 62, 250, 248, 200, 190, 47, 232, 208, 61, 42, 218, 45, 191, 88, 81, 109, 60, 169, 144, 251, 189, 184, 203, 12, 62, 215, 92, 45, 190, 147, 49, 100, 62, 65, 115, 190, 62, 216, 61, 255, 188, 244, 196, 230, 62, 211, 10, 77, 190, 236, 63, 128, 62, 193, 215, 130, 190, 43, 95, 6, 190, 93, 117, 150, 62, 215, 89, 10, 62, 26, 114, 204, 62, 144, 23, 13, 62, 79, 32, 211, 60, 100, 119, 132, 190, 153, 98, 2, 61, 115, 133, 168, 62, 246, 185, 239, 60, 251, 22, 227, 61, 172, 52, 192, 61, 141, 100, 144, 190, 9, 49, 85, 62, 102, 244, 5, 62, 72, 12, 10, 190, 114, 8, 37, 190, 27, 65, 146, 189, 247, 75, 246, 188, 225, 28, 178, 189, 100, 75, 135, 60, 45, 13, 104, 62, 148, 158, 51, 61, 6, 177, 130, 62, 16, 49, 5, 191, 158, 80, 109, 189, 229, 120, 189, 60, 37, 148, 82, 59, 56, 69, 187, 62, 81, 79, 2, 63, 33, 15, 19, 191, 53, 119, 128, 62, 21, 255, 215, 189, 116, 113, 234, 62, 138, 206, 41, 62, 12, 113, 113, 60, 224, 39, 226, 190, 97, 50, 231, 189, 121, 85, 155, 190, 98, 150, 51, 191, 123, 149, 245, 189, 24, 2, 50, 62, 128, 67, 150, 62, 65, 52, 73, 62, 185, 162, 38, 190, 166, 164, 194, 190, 154, 227, 227, 189, 68, 129, 69, 191, 48, 83, 235, 190, 149, 49, 211, 188, 100, 102, 156, 190, 195, 94, 174, 60, 166, 67, 77, 190, 190, 120, 173, 187, 47, 179, 255, 60, 180, 170, 134, 190, 102, 147, 115, 62, 47, 153, 8, 191, 109, 85, 155, 189, 224, 100, 145, 190, 213, 94, 15, 190, 50, 200, 126, 61, 174, 35, 3, 62, 143, 82, 201, 62, 72, 99, 31, 190, 149, 24, 40, 190, 15, 147, 160, 190, 45, 124, 192, 190, 235, 245, 174, 190, 217, 12, 60, 191, 239, 57, 85, 190, 248, 121, 30, 62, 5, 48, 143, 62, 152, 202, 150, 62, 236, 197, 113, 190, 97, 24, 145, 190, 224, 17, 254, 60, 69, 77, 113, 62, 241, 255, 172, 61, 101, 18, 114, 190, 91, 251, 193, 61, 217, 92, 46, 191, 133, 163, 197, 62, 253, 230, 219, 189, 248, 58, 136, 190, 103, 72, 181, 60, 4, 212, 244, 61, 57, 250, 85, 62, 221, 68, 81, 189, 183, 71, 240, 190, 158, 253, 190, 190, 250, 93, 80, 61, 111, 165, 129, 62, 73, 97, 116, 62, 96, 217, 185, 190, 217, 37, 244, 61, 199, 247, 248, 189, 135, 136, 152, 62, 187, 134, 32, 61, 16, 145, 11, 190, 10, 162, 145, 187, 199, 46, 214, 190, 81, 89, 139, 61, 115, 230, 248, 189, 179, 157, 166, 62, 146, 121, 54, 62, 63, 242, 108, 61, 101, 113, 14, 62, 122, 47, 211, 190, 244, 55, 34, 62, 82, 77, 4, 190, 157, 164, 231, 190, 12, 204, 61, 190, 85, 198, 149, 191, 217, 160, 5, 63, 254, 231, 152, 190, 80, 133, 158, 62, 156, 2, 157, 191, 114, 131, 146, 62, 125, 75, 91, 189, 9, 35, 36, 62, 209, 101, 225, 62, 254, 136, 172, 191, 57, 53, 80, 62, 39, 170, 248, 60, 243, 205, 144, 62, 196, 215, 121, 190, 114, 124, 105, 61, 23, 77, 70, 61, 134, 43, 158, 62, 0, 192, 99, 190, 11, 97, 1, 190, 5, 211, 68, 63, 26, 99, 16, 191, 4, 125, 170, 190, 44, 126, 171, 62, 235, 90, 14, 191, 250, 35, 29, 62, 52, 213, 28, 191, 188, 173, 193, 191, 161, 28, 76, 61, 208, 80, 42, 189, 161, 143, 179, 61, 76, 189, 201, 189, 39, 74, 237, 61, 118, 79, 171, 189, 146, 208, 15, 190, 238, 135, 29, 190, 240, 240, 10, 189, 240, 148, 171, 189, 129, 121, 251, 189, 99, 215, 69, 190, 218, 146, 17, 190, 232, 99, 92, 189, 124, 178, 221, 61, 22, 4, 223, 189, 17, 105, 238, 189, 93, 98, 33, 62, 162, 163, 211, 188, 81, 251, 34, 189, 120, 12, 90, 189, 199, 117, 218, 189, 23, 165, 201, 61, 182, 250, 164, 61, 222, 143, 235, 189, 164, 140, 6, 62, 215, 120, 4, 190, 147, 55, 135, 61, 146, 16, 251, 189, 154, 228, 193, 61, 123, 109, 158, 61, 32, 162, 4, 62, 234, 3, 36, 60, 165, 64, 211, 61, 50, 8, 132, 189, 142, 253, 186, 61, 27, 66, 5, 190, 232, 5, 73, 190, 206, 104, 164, 189, 249, 73, 6, 61, 245, 105, 233, 61, 39, 13, 211, 61, 184, 93, 144, 189, 68, 146, 19, 62, 50, 132, 193, 189, 51, 48, 39, 190, 21, 31, 135, 61, 73, 133, 228, 60, 59, 150, 39, 190, 244, 128, 18, 189, 19, 119, 136, 188, 69, 210, 228, 187, 176, 39, 170, 61, 32, 43, 46, 190, 194, 185, 169, 60, 83, 57, 250, 189, 174, 9, 179, 189, 229, 252, 245, 189, 169, 89, 30, 190, 36, 12, 146, 188, 28, 1, 88, 61, 72, 116, 167, 61, 26, 232, 131, 189, 23, 215, 91, 190, 66, 4, 22, 190, 242, 194, 38, 191, 203, 64, 24, 191, 91, 82, 25, 190, 208, 228, 44, 191, 63, 36, 246, 59, 20, 67, 209, 61, 1, 140, 51, 190, 33, 58, 92, 62, 230, 139, 230, 61, 23, 145, 92, 61, 76, 5, 202, 61, 10, 110, 84, 62, 105, 178, 36, 190, 165, 254, 89, 190, 40, 31, 37, 190, 2, 225, 48, 61, 45, 227, 12, 190, 218, 185, 97, 62, 241, 7, 25, 61, 48, 175, 62, 189, 24, 194, 0, 62, 148, 161, 150, 190, 247, 214, 129, 190, 119, 25, 197, 62, 230, 57, 240, 61, 17, 66, 56, 190, 201, 217, 108, 62, 169, 144, 73, 190, 57, 222, 21, 61, 207, 151, 226, 190, 183, 135, 64, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 7, 129, 190, 144, 226, 5, 189, 154, 101, 217, 188, 207, 143, 41, 62, 40, 204, 170, 60, 154, 25, 53, 62, 171, 122, 240, 61, 220, 194, 87, 60, 63, 218, 92, 190, 88, 1, 78, 189, 100, 182, 245, 61, 24, 57, 193, 61, 65, 151, 130, 62, 167, 111, 254, 60, 215, 152, 141, 189, 22, 216, 134, 62, 188, 57, 70, 190, 35, 196, 72, 189, 231, 145, 87, 62, 155, 97, 226, 62, 170, 236, 94, 190, 87, 248, 145, 62, 177, 177, 159, 61, 6, 239, 55, 189, 123, 2, 64, 190, 223, 166, 64, 62, 254, 2, 255, 60, 240, 147, 14, 62, 123, 17, 114, 62, 205, 84, 29, 190, 60, 170, 86, 190, 113, 87, 101, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 64, 11, 63, 240, 217, 41, 190, 86, 157, 63, 190, 229, 104, 24, 63, 159, 212, 9, 63, 236, 168, 36, 60, 41, 130, 23, 191, 96, 202, 241, 62, 54, 246, 85, 61, 206, 11, 202, 62, 107, 236, 0, 190, 195, 139, 204, 59, 111, 173, 190, 190, 218, 182, 37, 63, 150, 112, 6, 190, 46, 222, 190, 59, 75, 135, 244, 189, 113, 193, 129, 190, 236, 165, 17, 190, 135, 13, 137, 63, 0, 105, 207, 61, 197, 234, 42, 63, 140, 197, 26, 63, 220, 138, 182, 62, 139, 193, 65, 190, 189, 57, 192, 190, 31, 194, 0, 63, 105, 222, 199, 190, 141, 235, 152, 63, 239, 2, 220, 187, 119, 100, 18, 190, 202, 24, 167, 62, 36, 221, 128, 62, 72, 178, 7, 190, 196, 117, 72, 190, 189, 102, 18, 62, 6, 90, 195, 58, 185, 226, 172, 190, 64, 93, 250, 61, 221, 232, 79, 59, 175, 90, 46, 62, 44, 70, 180, 61, 100, 248, 148, 190, 102, 52, 0, 191, 134, 177, 145, 61, 169, 76, 236, 61, 171, 226, 206, 189, 2, 99, 196, 190, 216, 14, 7, 61, 231, 102, 80, 62, 215, 135, 120, 190, 236, 225, 15, 60, 134, 253, 177, 61, 77, 74, 130, 62, 0, 87, 25, 62, 176, 188, 185, 62, 85, 180, 130, 188, 108, 143, 50, 189, 48, 183, 127, 190, 130, 6, 125, 61, 64, 81, 252, 61, 200, 37, 178, 189, 77, 43, 160, 189, 70, 24, 37, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 227, 123, 190, 2, 7, 150, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {231, 77, 1, 192, 101, 229, 208, 190, 176, 193, 58, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {23, 8, 60, 64, 26, 139, 254, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0084/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}