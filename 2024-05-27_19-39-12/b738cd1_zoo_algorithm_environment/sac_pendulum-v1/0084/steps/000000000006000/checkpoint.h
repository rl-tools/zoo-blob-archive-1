// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 189, 165, 190, 121, 21, 130, 62, 202, 115, 29, 63, 169, 171, 219, 62, 153, 140, 113, 63, 141, 154, 129, 62, 228, 241, 88, 189, 141, 231, 191, 190, 228, 136, 239, 190, 116, 114, 41, 63, 49, 200, 255, 190, 57, 84, 40, 191, 174, 220, 135, 62, 223, 44, 32, 63, 200, 213, 147, 62, 14, 5, 116, 190, 48, 128, 137, 191, 67, 93, 238, 190, 93, 143, 2, 63, 105, 102, 73, 63, 210, 51, 226, 188, 58, 39, 98, 61, 153, 112, 54, 190, 217, 253, 192, 62, 197, 203, 33, 191, 229, 58, 40, 63, 112, 155, 194, 62, 162, 176, 239, 61, 96, 237, 51, 191, 63, 151, 150, 190, 178, 221, 119, 62, 198, 196, 133, 61, 248, 62, 170, 190, 103, 117, 186, 190, 149, 255, 201, 189, 33, 174, 239, 190, 115, 171, 219, 190, 180, 22, 84, 191, 137, 81, 161, 62, 77, 227, 239, 189, 122, 239, 48, 191, 74, 145, 242, 190, 182, 73, 136, 190, 81, 138, 92, 191, 108, 162, 172, 190, 195, 158, 250, 62, 116, 19, 187, 62, 3, 186, 97, 191, 168, 224, 49, 63, 94, 246, 4, 63, 79, 254, 126, 62, 91, 142, 17, 191, 207, 71, 32, 63, 82, 244, 153, 61, 16, 131, 96, 62, 58, 247, 72, 191, 193, 106, 192, 62, 68, 246, 201, 190, 242, 166, 142, 62, 148, 7, 53, 61, 15, 195, 21, 62, 81, 3, 7, 190, 185, 67, 23, 60, 222, 116, 98, 188, 197, 203, 16, 63, 206, 128, 46, 62, 114, 163, 116, 62, 75, 167, 200, 61, 61, 3, 103, 191, 189, 82, 226, 62, 31, 89, 226, 62, 69, 57, 180, 62, 221, 175, 162, 190, 34, 240, 189, 62, 169, 47, 195, 190, 46, 235, 2, 63, 224, 234, 239, 190, 116, 202, 243, 190, 187, 45, 243, 189, 27, 57, 143, 190, 173, 198, 5, 63, 107, 109, 207, 188, 191, 209, 25, 191, 151, 165, 171, 62, 115, 18, 22, 190, 61, 132, 135, 191, 73, 209, 161, 62, 162, 226, 53, 191, 122, 169, 233, 189, 174, 166, 10, 191, 170, 254, 15, 190, 174, 34, 50, 191, 9, 169, 161, 190, 229, 173, 189, 190, 195, 85, 1, 191, 159, 248, 223, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 188, 45, 191, 220, 76, 164, 190, 163, 127, 247, 61, 123, 160, 26, 62, 152, 84, 7, 191, 209, 153, 188, 187, 90, 105, 15, 63, 94, 163, 166, 189, 24, 123, 55, 190, 205, 37, 178, 62, 235, 88, 63, 63, 181, 226, 156, 190, 247, 138, 185, 190, 17, 49, 225, 190, 241, 245, 163, 189, 119, 229, 243, 62, 118, 6, 240, 62, 124, 214, 154, 62, 177, 98, 200, 61, 2, 226, 62, 63, 239, 188, 94, 190, 54, 236, 18, 63, 136, 216, 192, 62, 198, 164, 163, 62, 203, 229, 137, 190, 4, 138, 226, 61, 90, 168, 190, 190, 188, 209, 28, 190, 23, 227, 63, 189, 107, 29, 4, 62, 17, 44, 43, 61, 211, 99, 128, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 115, 183, 61, 14, 163, 213, 62, 98, 214, 78, 189, 154, 198, 45, 62, 236, 187, 21, 63, 196, 6, 149, 61, 89, 77, 123, 62, 136, 218, 120, 189, 203, 120, 1, 58, 119, 21, 18, 62, 146, 151, 1, 62, 70, 73, 55, 190, 242, 204, 229, 190, 223, 182, 113, 189, 237, 178, 25, 189, 136, 141, 4, 189, 90, 171, 255, 187, 1, 97, 76, 190, 16, 194, 149, 190, 83, 167, 64, 190, 158, 63, 153, 183, 220, 14, 50, 190, 11, 99, 164, 60, 128, 21, 29, 62, 71, 43, 107, 62, 124, 40, 145, 189, 99, 187, 27, 190, 9, 187, 194, 189, 141, 196, 63, 191, 204, 147, 98, 61, 55, 68, 177, 189, 222, 7, 106, 190, 156, 209, 19, 190, 225, 253, 161, 189, 79, 49, 255, 188, 13, 255, 77, 61, 76, 94, 179, 189, 135, 7, 27, 190, 202, 182, 82, 60, 191, 88, 8, 62, 76, 175, 252, 189, 92, 55, 159, 189, 28, 100, 242, 61, 152, 184, 207, 61, 82, 100, 38, 190, 12, 137, 33, 190, 67, 212, 100, 59, 98, 238, 181, 187, 73, 1, 197, 60, 52, 160, 145, 61, 104, 187, 151, 61, 165, 206, 157, 188, 83, 120, 188, 61, 253, 199, 222, 189, 169, 107, 31, 189, 85, 161, 147, 189, 131, 34, 192, 61, 68, 247, 174, 189, 26, 74, 173, 189, 3, 182, 236, 189, 120, 70, 32, 190, 190, 193, 50, 190, 24, 231, 40, 190, 107, 138, 40, 187, 28, 203, 147, 189, 1, 164, 7, 62, 27, 128, 234, 61, 237, 164, 192, 189, 176, 19, 17, 190, 31, 121, 200, 60, 217, 159, 166, 61, 32, 208, 4, 62, 94, 94, 178, 189, 137, 116, 94, 189, 161, 12, 140, 61, 4, 173, 177, 61, 144, 20, 100, 61, 44, 177, 152, 61, 183, 18, 222, 189, 17, 244, 42, 190, 148, 171, 101, 60, 10, 208, 24, 61, 57, 156, 91, 190, 139, 176, 74, 62, 158, 167, 238, 61, 36, 116, 205, 189, 145, 131, 5, 190, 120, 155, 17, 190, 187, 151, 110, 61, 242, 137, 209, 189, 165, 6, 12, 61, 21, 134, 163, 189, 104, 201, 118, 188, 227, 250, 232, 61, 187, 167, 178, 60, 178, 110, 225, 61, 72, 216, 54, 62, 185, 106, 158, 190, 68, 115, 80, 189, 238, 67, 196, 62, 221, 93, 20, 191, 94, 246, 194, 61, 243, 17, 217, 61, 48, 166, 146, 190, 215, 12, 22, 62, 218, 13, 136, 61, 126, 174, 243, 61, 180, 123, 41, 190, 80, 131, 248, 62, 22, 61, 22, 62, 11, 52, 207, 188, 98, 1, 212, 60, 37, 55, 137, 190, 116, 149, 7, 61, 214, 12, 220, 62, 103, 10, 129, 190, 93, 182, 236, 60, 178, 237, 47, 190, 47, 54, 80, 190, 178, 228, 194, 189, 206, 227, 20, 62, 129, 35, 222, 62, 237, 200, 178, 190, 61, 181, 158, 62, 167, 227, 39, 191, 16, 250, 152, 189, 237, 3, 180, 189, 113, 92, 30, 191, 44, 20, 9, 189, 15, 42, 246, 189, 202, 177, 185, 189, 200, 126, 23, 62, 169, 93, 77, 189, 180, 21, 92, 190, 124, 142, 24, 62, 125, 111, 133, 61, 156, 108, 185, 188, 242, 186, 17, 62, 148, 207, 84, 189, 183, 56, 10, 191, 37, 158, 145, 62, 147, 75, 56, 62, 134, 159, 160, 190, 247, 152, 75, 191, 74, 5, 152, 62, 226, 224, 178, 62, 119, 40, 221, 62, 98, 249, 37, 62, 151, 79, 33, 62, 51, 136, 3, 62, 74, 228, 219, 190, 182, 176, 106, 62, 57, 17, 72, 61, 143, 11, 214, 61, 66, 231, 125, 189, 174, 251, 44, 58, 44, 61, 46, 191, 153, 14, 70, 190, 192, 194, 250, 189, 48, 231, 167, 191, 156, 216, 21, 62, 11, 125, 151, 190, 220, 241, 104, 60, 7, 118, 144, 62, 153, 241, 163, 190, 67, 92, 140, 189, 109, 34, 36, 61, 52, 142, 201, 61, 254, 71, 106, 62, 200, 38, 157, 61, 121, 122, 34, 62, 194, 85, 34, 59, 7, 204, 128, 189, 26, 36, 80, 190, 216, 90, 14, 190, 248, 210, 77, 62, 182, 19, 158, 62, 73, 34, 254, 188, 13, 104, 133, 188, 94, 156, 60, 62, 38, 100, 41, 190, 199, 118, 254, 61, 171, 143, 3, 190, 161, 197, 172, 61, 35, 30, 121, 189, 216, 55, 172, 187, 214, 37, 102, 190, 240, 75, 23, 189, 173, 233, 155, 189, 229, 187, 227, 60, 252, 191, 167, 189, 251, 139, 235, 189, 149, 250, 68, 62, 139, 120, 87, 61, 155, 227, 121, 62, 38, 27, 14, 191, 127, 67, 160, 60, 8, 225, 158, 190, 31, 236, 213, 62, 133, 60, 83, 61, 224, 161, 213, 61, 51, 29, 29, 62, 80, 47, 94, 62, 231, 188, 77, 62, 249, 236, 14, 190, 77, 94, 34, 191, 171, 27, 135, 190, 86, 225, 131, 62, 139, 23, 106, 62, 163, 179, 97, 61, 71, 229, 218, 190, 129, 198, 173, 61, 146, 204, 28, 62, 177, 73, 150, 61, 66, 58, 173, 61, 15, 30, 7, 62, 189, 71, 253, 190, 82, 41, 231, 190, 12, 44, 14, 62, 202, 220, 239, 189, 77, 81, 1, 63, 33, 198, 215, 62, 233, 153, 31, 189, 96, 146, 20, 62, 179, 155, 167, 190, 80, 226, 70, 190, 228, 142, 172, 189, 96, 60, 106, 62, 247, 93, 162, 189, 114, 250, 49, 190, 215, 226, 56, 62, 18, 149, 111, 190, 91, 133, 100, 61, 93, 111, 224, 61, 17, 206, 94, 62, 22, 236, 156, 188, 192, 86, 191, 62, 59, 244, 70, 62, 188, 89, 90, 186, 23, 0, 24, 190, 9, 62, 13, 190, 15, 13, 70, 191, 163, 0, 170, 62, 72, 53, 135, 61, 195, 193, 166, 189, 44, 211, 29, 191, 193, 142, 148, 61, 211, 217, 180, 60, 215, 192, 24, 62, 237, 176, 249, 61, 163, 41, 187, 190, 216, 17, 1, 63, 43, 163, 211, 189, 86, 70, 205, 60, 213, 221, 60, 61, 253, 105, 87, 190, 65, 42, 98, 60, 0, 210, 149, 61, 172, 138, 57, 190, 232, 68, 14, 61, 187, 220, 186, 189, 247, 253, 37, 190, 132, 121, 172, 189, 252, 69, 210, 61, 209, 247, 156, 189, 35, 110, 76, 190, 224, 238, 210, 189, 72, 236, 146, 61, 101, 1, 235, 61, 197, 74, 167, 189, 103, 195, 72, 60, 244, 95, 190, 189, 157, 180, 84, 189, 146, 5, 194, 61, 184, 181, 233, 61, 136, 160, 201, 189, 233, 218, 34, 62, 25, 145, 167, 61, 70, 158, 41, 61, 142, 149, 51, 190, 28, 210, 99, 60, 6, 31, 187, 188, 103, 71, 183, 189, 132, 238, 143, 189, 67, 44, 36, 61, 40, 222, 199, 61, 254, 125, 11, 190, 186, 67, 5, 62, 178, 136, 147, 61, 0, 177, 157, 62, 72, 226, 19, 189, 32, 238, 191, 186, 38, 193, 29, 63, 239, 6, 26, 190, 218, 120, 196, 62, 240, 99, 128, 62, 252, 13, 46, 190, 10, 141, 80, 190, 220, 98, 4, 62, 180, 135, 170, 61, 191, 234, 117, 191, 116, 29, 205, 61, 26, 84, 168, 61, 61, 63, 141, 62, 35, 56, 153, 58, 120, 163, 0, 62, 121, 6, 234, 190, 243, 2, 114, 189, 11, 83, 170, 61, 213, 103, 97, 190, 250, 168, 128, 62, 20, 170, 75, 189, 170, 218, 150, 62, 53, 157, 52, 62, 241, 106, 149, 62, 0, 198, 8, 191, 73, 162, 225, 190, 149, 83, 117, 189, 50, 22, 49, 61, 246, 152, 136, 61, 165, 210, 148, 189, 45, 218, 30, 190, 56, 169, 179, 188, 28, 246, 103, 61, 251, 119, 124, 189, 9, 59, 38, 190, 112, 234, 61, 61, 58, 143, 184, 60, 254, 100, 231, 61, 143, 143, 86, 62, 94, 201, 57, 62, 29, 69, 192, 61, 245, 14, 226, 60, 230, 248, 131, 189, 61, 55, 51, 62, 182, 22, 86, 62, 116, 49, 155, 62, 238, 73, 105, 189, 20, 135, 205, 188, 129, 81, 145, 62, 138, 37, 12, 190, 212, 248, 105, 62, 144, 120, 250, 61, 118, 255, 143, 61, 143, 2, 65, 60, 6, 48, 80, 190, 246, 114, 93, 61, 125, 95, 39, 188, 25, 175, 143, 62, 38, 109, 187, 61, 13, 240, 56, 60, 241, 38, 240, 60, 209, 148, 152, 190, 92, 57, 249, 189, 142, 74, 167, 188, 100, 133, 60, 189, 39, 146, 22, 191, 159, 182, 188, 61, 253, 254, 72, 62, 181, 109, 28, 190, 2, 75, 108, 190, 21, 53, 146, 61, 47, 118, 52, 189, 132, 177, 3, 62, 102, 73, 145, 188, 123, 174, 47, 190, 251, 69, 2, 190, 13, 55, 35, 62, 106, 255, 46, 62, 185, 88, 134, 190, 42, 57, 16, 62, 100, 14, 215, 61, 83, 61, 229, 189, 3, 179, 80, 62, 100, 226, 14, 62, 103, 120, 49, 60, 55, 255, 24, 61, 128, 39, 60, 61, 164, 225, 131, 190, 157, 153, 93, 189, 153, 32, 109, 62, 44, 163, 231, 189, 49, 109, 124, 61, 223, 123, 61, 59, 136, 152, 134, 190, 229, 57, 169, 61, 95, 218, 133, 62, 70, 251, 173, 185, 115, 123, 222, 190, 226, 248, 21, 189, 51, 5, 181, 188, 34, 192, 20, 61, 45, 157, 187, 58, 11, 160, 204, 189, 222, 106, 228, 61, 117, 241, 166, 62, 28, 79, 70, 190, 101, 32, 248, 60, 196, 197, 154, 61, 196, 68, 208, 189, 129, 106, 149, 62, 218, 86, 43, 62, 224, 82, 168, 190, 173, 58, 149, 188, 117, 108, 242, 61, 156, 71, 103, 62, 239, 150, 139, 189, 237, 42, 84, 190, 44, 209, 43, 190, 57, 50, 135, 190, 113, 85, 51, 60, 88, 68, 247, 190, 144, 19, 8, 63, 246, 208, 45, 62, 19, 85, 58, 62, 116, 198, 174, 62, 16, 9, 225, 190, 189, 132, 1, 191, 170, 43, 56, 190, 100, 232, 145, 62, 244, 231, 91, 190, 35, 219, 228, 58, 93, 2, 73, 62, 55, 213, 145, 190, 76, 194, 88, 189, 126, 59, 250, 61, 61, 65, 30, 62, 254, 185, 3, 190, 209, 170, 252, 62, 246, 66, 91, 61, 148, 63, 5, 190, 251, 149, 125, 188, 31, 13, 19, 190, 223, 20, 19, 191, 96, 27, 207, 62, 29, 83, 179, 189, 80, 115, 166, 61, 61, 6, 239, 190, 79, 234, 165, 58, 15, 239, 28, 189, 206, 32, 230, 60, 92, 216, 146, 62, 239, 27, 2, 190, 254, 168, 179, 62, 98, 134, 67, 190, 57, 158, 218, 189, 131, 130, 80, 60, 77, 226, 51, 190, 119, 30, 15, 188, 234, 72, 230, 61, 129, 165, 129, 189, 84, 11, 220, 189, 27, 87, 14, 62, 20, 84, 179, 61, 9, 64, 62, 190, 88, 134, 5, 190, 46, 15, 79, 61, 196, 37, 0, 62, 22, 63, 240, 59, 28, 131, 41, 190, 60, 218, 224, 189, 7, 18, 183, 189, 207, 13, 2, 190, 31, 245, 44, 62, 132, 89, 150, 61, 16, 153, 95, 189, 30, 214, 137, 60, 204, 27, 156, 188, 59, 52, 35, 190, 229, 148, 51, 190, 79, 43, 180, 189, 200, 28, 197, 188, 220, 94, 245, 189, 95, 47, 33, 190, 91, 234, 160, 61, 24, 186, 35, 190, 165, 161, 14, 62, 94, 140, 216, 189, 193, 100, 29, 190, 213, 187, 205, 61, 253, 55, 76, 61, 113, 16, 208, 189, 141, 136, 88, 189, 205, 88, 170, 61, 45, 153, 56, 188, 105, 142, 93, 190, 40, 246, 138, 62, 214, 19, 250, 60, 211, 18, 237, 61, 112, 7, 119, 188, 112, 149, 158, 62, 179, 61, 137, 189, 70, 185, 241, 189, 230, 30, 76, 61, 218, 30, 192, 189, 184, 59, 92, 62, 228, 156, 175, 62, 12, 231, 97, 189, 134, 234, 221, 61, 203, 10, 166, 60, 28, 204, 174, 61, 36, 70, 155, 61, 37, 163, 187, 188, 156, 231, 171, 61, 172, 206, 149, 61, 40, 30, 211, 61, 100, 68, 5, 62, 146, 117, 1, 190, 75, 231, 32, 62, 243, 31, 21, 189, 94, 5, 9, 189, 216, 201, 230, 189, 10, 169, 205, 61, 173, 21, 242, 60, 160, 46, 242, 61, 128, 71, 30, 62, 207, 77, 207, 189, 198, 130, 103, 61, 11, 132, 160, 189, 18, 40, 230, 61, 232, 167, 226, 189, 216, 86, 39, 190, 70, 31, 18, 189, 61, 7, 67, 61, 207, 23, 3, 62, 13, 114, 148, 189, 206, 195, 246, 61, 49, 195, 137, 189, 238, 229, 124, 61, 114, 21, 28, 190, 73, 130, 234, 189, 43, 82, 6, 61, 121, 170, 216, 61, 221, 66, 2, 60, 43, 45, 210, 60, 19, 203, 49, 190, 222, 240, 114, 61, 204, 55, 44, 190, 130, 96, 10, 188, 59, 208, 85, 190, 13, 5, 9, 61, 79, 30, 4, 190, 173, 159, 2, 190, 64, 46, 23, 60, 5, 195, 85, 61, 118, 15, 145, 62, 59, 145, 105, 62, 248, 85, 8, 189, 188, 201, 164, 189, 156, 41, 2, 190, 7, 20, 18, 190, 169, 222, 214, 61, 13, 170, 33, 190, 241, 86, 222, 61, 7, 187, 44, 62, 124, 69, 97, 62, 78, 191, 197, 190, 206, 175, 2, 189, 155, 201, 234, 189, 89, 18, 216, 60, 209, 175, 94, 62, 131, 34, 87, 62, 217, 18, 232, 190, 131, 240, 6, 62, 186, 200, 4, 189, 121, 120, 182, 61, 173, 246, 27, 189, 116, 48, 14, 62, 208, 156, 223, 187, 153, 234, 140, 190, 88, 175, 255, 61, 69, 38, 25, 190, 223, 23, 227, 62, 186, 197, 153, 62, 14, 218, 143, 61, 69, 171, 114, 62, 169, 41, 129, 60, 70, 226, 223, 189, 163, 166, 41, 189, 90, 217, 20, 188, 7, 3, 30, 190, 244, 221, 212, 61, 80, 39, 226, 60, 105, 59, 85, 60, 66, 62, 132, 61, 230, 24, 142, 61, 151, 89, 67, 62, 231, 100, 20, 62, 82, 138, 8, 190, 98, 197, 179, 59, 157, 222, 21, 190, 49, 24, 139, 189, 73, 208, 152, 62, 64, 15, 218, 61, 7, 79, 204, 189, 16, 118, 151, 62, 38, 47, 241, 61, 96, 179, 159, 62, 176, 9, 148, 61, 133, 84, 135, 189, 42, 175, 21, 190, 184, 53, 172, 189, 55, 125, 87, 61, 122, 215, 201, 188, 77, 243, 207, 62, 126, 0, 42, 61, 115, 56, 125, 62, 3, 75, 242, 61, 83, 160, 67, 190, 70, 105, 4, 191, 33, 218, 245, 190, 1, 132, 115, 190, 182, 42, 23, 191, 66, 176, 80, 191, 252, 139, 109, 189, 74, 40, 83, 190, 231, 168, 41, 62, 252, 37, 250, 189, 239, 234, 162, 189, 106, 95, 0, 191, 175, 42, 178, 62, 95, 72, 236, 190, 221, 133, 36, 191, 237, 243, 60, 191, 135, 194, 233, 189, 105, 199, 24, 62, 239, 3, 132, 62, 150, 170, 181, 62, 62, 112, 25, 188, 190, 208, 154, 62, 29, 12, 115, 191, 191, 16, 200, 188, 103, 104, 4, 63, 130, 32, 85, 190, 30, 249, 9, 190, 90, 103, 143, 62, 107, 1, 129, 190, 93, 102, 8, 190, 29, 228, 195, 190, 39, 15, 205, 191, 172, 1, 101, 189, 2, 55, 12, 190, 79, 50, 81, 190, 204, 184, 32, 190, 140, 4, 153, 189, 236, 125, 248, 189, 197, 57, 161, 188, 178, 65, 32, 189, 23, 115, 42, 188, 234, 206, 221, 59, 4, 22, 254, 59, 105, 234, 160, 189, 145, 214, 33, 189, 239, 208, 189, 189, 84, 30, 179, 60, 208, 29, 178, 61, 210, 95, 169, 61, 160, 8, 50, 190, 73, 220, 41, 190, 202, 22, 60, 187, 82, 220, 12, 62, 72, 247, 9, 60, 180, 13, 13, 190, 34, 142, 28, 60, 36, 201, 3, 62, 34, 123, 175, 60, 42, 119, 19, 190, 11, 13, 242, 189, 30, 221, 13, 190, 255, 162, 165, 61, 172, 61, 237, 189, 205, 61, 75, 189, 47, 66, 85, 189, 195, 171, 217, 190, 173, 45, 108, 190, 196, 128, 129, 189, 35, 2, 203, 190, 202, 156, 8, 191, 91, 164, 3, 61, 186, 177, 88, 190, 215, 132, 29, 62, 67, 61, 212, 189, 92, 81, 190, 61, 205, 142, 214, 190, 130, 45, 160, 62, 37, 28, 96, 188, 186, 193, 234, 190, 162, 215, 70, 191, 108, 234, 253, 189, 75, 24, 183, 61, 18, 194, 90, 62, 31, 216, 8, 62, 209, 203, 239, 189, 112, 110, 230, 61, 235, 134, 35, 191, 197, 169, 25, 190, 87, 27, 31, 62, 112, 8, 227, 61, 26, 118, 190, 189, 116, 188, 190, 62, 238, 164, 130, 190, 161, 107, 143, 61, 152, 255, 189, 190, 253, 1, 168, 191, 215, 223, 96, 190, 110, 72, 255, 190, 53, 189, 160, 190, 74, 181, 8, 190, 184, 37, 141, 190, 144, 69, 159, 190, 185, 158, 191, 189, 205, 195, 82, 190, 181, 190, 93, 62, 21, 173, 144, 190, 138, 53, 73, 189, 158, 24, 170, 188, 2, 46, 11, 63, 1, 2, 154, 189, 4, 198, 201, 190, 251, 184, 186, 59, 249, 87, 142, 189, 22, 171, 65, 190, 184, 173, 200, 62, 177, 99, 84, 62, 16, 242, 24, 62, 85, 47, 243, 188, 14, 46, 155, 186, 44, 65, 140, 60, 219, 142, 223, 62, 151, 34, 208, 189, 174, 161, 191, 190, 33, 68, 205, 62, 5, 213, 35, 190, 15, 245, 1, 62, 30, 15, 144, 190, 247, 150, 253, 190, 139, 72, 184, 190, 48, 223, 139, 189, 95, 160, 52, 189, 172, 134, 133, 62, 102, 46, 190, 188, 230, 129, 213, 61, 61, 148, 104, 187, 4, 167, 28, 188, 172, 35, 213, 61, 225, 79, 53, 62, 114, 182, 253, 189, 129, 250, 6, 190, 107, 58, 75, 62, 7, 112, 14, 61, 184, 7, 246, 61, 162, 126, 171, 189, 250, 23, 158, 189, 149, 167, 224, 190, 105, 29, 181, 62, 110, 4, 13, 61, 2, 200, 195, 189, 175, 149, 31, 191, 201, 164, 28, 189, 139, 195, 118, 188, 76, 245, 241, 61, 124, 18, 145, 62, 177, 176, 140, 190, 173, 141, 164, 62, 210, 215, 7, 190, 117, 132, 124, 61, 104, 232, 121, 61, 71, 202, 207, 59, 185, 249, 161, 190, 9, 105, 255, 61, 21, 198, 217, 189, 152, 245, 100, 189, 90, 127, 242, 189, 175, 69, 131, 62, 116, 69, 139, 190, 49, 32, 55, 190, 224, 211, 199, 190, 228, 190, 198, 189, 132, 178, 17, 190, 77, 89, 230, 61, 73, 40, 89, 190, 182, 87, 23, 62, 24, 185, 59, 62, 236, 183, 131, 58, 81, 94, 196, 62, 9, 209, 203, 60, 152, 51, 205, 189, 160, 175, 160, 190, 41, 147, 7, 190, 202, 69, 155, 62, 55, 117, 19, 62, 30, 193, 149, 62, 226, 198, 95, 62, 160, 118, 187, 187, 26, 181, 223, 190, 160, 83, 46, 190, 116, 234, 48, 62, 246, 134, 43, 189, 7, 100, 87, 189, 194, 178, 75, 187, 188, 210, 134, 190, 76, 37, 186, 61, 57, 162, 43, 62, 181, 104, 209, 189, 138, 97, 234, 190, 28, 128, 91, 189, 49, 183, 189, 188, 21, 89, 41, 190, 106, 64, 185, 188, 70, 166, 74, 62, 233, 58, 183, 60, 44, 16, 136, 62, 158, 196, 196, 190, 218, 36, 149, 189, 232, 229, 106, 189, 97, 113, 3, 61, 202, 200, 154, 62, 182, 167, 212, 62, 92, 18, 239, 190, 241, 105, 231, 61, 254, 168, 219, 189, 211, 186, 170, 62, 178, 76, 72, 62, 167, 136, 241, 188, 235, 231, 171, 190, 190, 5, 172, 189, 19, 9, 46, 190, 46, 255, 58, 191, 38, 42, 60, 62, 153, 46, 6, 62, 51, 22, 99, 62, 72, 83, 50, 62, 2, 47, 22, 189, 179, 9, 242, 61, 207, 81, 24, 62, 215, 217, 147, 189, 99, 229, 20, 190, 92, 247, 184, 61, 216, 177, 202, 189, 183, 177, 80, 61, 148, 46, 40, 189, 192, 53, 195, 187, 73, 34, 63, 190, 201, 10, 121, 189, 42, 163, 5, 61, 46, 205, 55, 190, 223, 222, 120, 61, 240, 174, 60, 61, 100, 57, 9, 62, 85, 165, 171, 189, 116, 225, 15, 61, 10, 75, 133, 61, 72, 99, 31, 190, 121, 252, 37, 190, 25, 255, 16, 62, 167, 97, 4, 190, 71, 29, 19, 190, 11, 52, 202, 189, 44, 53, 58, 190, 223, 167, 90, 61, 26, 251, 211, 61, 151, 230, 61, 190, 99, 190, 32, 189, 147, 120, 192, 188, 56, 189, 199, 61, 180, 153, 143, 62, 158, 155, 27, 62, 144, 104, 57, 190, 121, 48, 60, 60, 203, 208, 134, 190, 115, 201, 179, 62, 189, 145, 163, 189, 23, 250, 58, 190, 247, 139, 193, 61, 221, 95, 203, 61, 232, 248, 59, 62, 111, 12, 200, 189, 16, 213, 233, 190, 240, 196, 71, 190, 99, 131, 63, 61, 132, 170, 117, 62, 198, 22, 54, 62, 14, 12, 199, 190, 135, 48, 88, 61, 3, 222, 248, 189, 22, 5, 129, 62, 128, 85, 72, 61, 174, 112, 198, 189, 231, 90, 101, 189, 208, 210, 180, 190, 79, 189, 254, 61, 207, 79, 24, 190, 231, 13, 136, 62, 217, 106, 160, 61, 32, 14, 214, 61, 133, 226, 50, 62, 34, 254, 240, 190, 231, 52, 88, 190, 182, 152, 145, 190, 124, 241, 202, 190, 104, 101, 186, 189, 72, 21, 139, 191, 63, 158, 158, 62, 86, 69, 209, 190, 198, 39, 185, 62, 202, 196, 141, 190, 116, 24, 41, 62, 117, 173, 140, 190, 156, 92, 84, 62, 81, 175, 9, 62, 65, 132, 145, 191, 77, 44, 21, 190, 229, 207, 13, 190, 121, 251, 142, 62, 98, 236, 19, 188, 95, 63, 233, 61, 23, 77, 70, 61, 38, 128, 128, 62, 71, 202, 232, 190, 125, 150, 99, 190, 75, 231, 45, 63, 78, 59, 232, 190, 68, 113, 14, 191, 158, 12, 131, 62, 38, 40, 13, 191, 22, 70, 119, 62, 121, 161, 173, 190, 214, 226, 189, 191, 161, 28, 76, 61, 208, 80, 42, 189, 82, 135, 187, 61, 181, 229, 195, 189, 39, 74, 237, 61, 28, 251, 160, 189, 146, 208, 15, 190, 238, 135, 29, 190, 240, 240, 10, 189, 255, 45, 166, 189, 24, 177, 244, 189, 29, 51, 66, 190, 52, 113, 17, 190, 170, 144, 82, 189, 225, 83, 229, 61, 178, 11, 216, 189, 17, 105, 238, 189, 21, 88, 36, 62, 162, 163, 211, 188, 111, 117, 11, 189, 120, 12, 90, 189, 40, 194, 217, 189, 3, 174, 210, 61, 182, 250, 164, 61, 128, 24, 234, 189, 36, 188, 8, 62, 215, 120, 4, 190, 147, 55, 135, 61, 146, 16, 251, 189, 241, 244, 212, 61, 42, 172, 164, 61, 79, 139, 8, 62, 234, 3, 36, 60, 231, 45, 23, 62, 220, 138, 111, 189, 177, 55, 220, 61, 27, 66, 5, 190, 112, 236, 62, 190, 225, 110, 107, 189, 249, 73, 6, 61, 245, 105, 233, 61, 201, 131, 20, 62, 24, 25, 65, 189, 66, 235, 10, 62, 223, 128, 193, 189, 239, 159, 23, 190, 142, 38, 197, 61, 132, 158, 45, 61, 129, 80, 244, 189, 55, 225, 209, 188, 105, 0, 208, 60, 14, 3, 139, 60, 176, 39, 170, 61, 40, 153, 7, 190, 73, 237, 252, 60, 234, 13, 154, 189, 184, 122, 157, 189, 105, 28, 207, 189, 169, 89, 30, 190, 36, 12, 146, 188, 238, 0, 74, 61, 13, 12, 152, 61, 122, 215, 242, 188, 134, 191, 87, 190, 226, 46, 116, 189, 122, 7, 32, 191, 58, 67, 167, 190, 105, 48, 193, 189, 144, 39, 137, 190, 249, 28, 109, 190, 0, 71, 82, 62, 31, 88, 243, 189, 222, 240, 162, 62, 31, 159, 136, 189, 215, 11, 204, 61, 30, 224, 36, 190, 37, 6, 154, 62, 142, 128, 32, 190, 41, 244, 152, 190, 87, 218, 148, 189, 118, 145, 191, 61, 114, 197, 212, 189, 178, 178, 108, 62, 153, 12, 63, 61, 118, 245, 62, 189, 34, 47, 96, 62, 68, 181, 84, 190, 236, 29, 57, 190, 124, 67, 189, 62, 62, 232, 22, 62, 34, 161, 250, 189, 199, 141, 160, 62, 37, 22, 63, 190, 189, 84, 33, 190, 143, 174, 185, 190, 169, 227, 50, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 241, 3, 190, 19, 198, 152, 186, 142, 43, 46, 189, 215, 239, 75, 62, 148, 190, 21, 62, 99, 14, 97, 62, 206, 67, 247, 61, 174, 223, 74, 61, 23, 44, 48, 190, 62, 147, 51, 61, 24, 4, 206, 61, 63, 177, 48, 62, 87, 72, 23, 62, 172, 140, 149, 61, 215, 36, 25, 189, 19, 143, 159, 62, 188, 57, 70, 190, 176, 113, 3, 190, 30, 185, 65, 62, 28, 192, 198, 62, 170, 236, 94, 190, 64, 96, 86, 62, 89, 241, 140, 61, 121, 244, 242, 188, 21, 19, 170, 190, 6, 86, 208, 61, 167, 151, 91, 190, 231, 99, 254, 61, 43, 184, 134, 62, 180, 179, 23, 190, 122, 108, 51, 190, 48, 167, 82, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 29, 139, 62, 235, 225, 41, 190, 199, 45, 122, 190, 41, 36, 239, 62, 43, 69, 22, 63, 47, 175, 54, 59, 247, 153, 251, 190, 99, 197, 165, 62, 180, 194, 25, 61, 80, 194, 210, 62, 71, 54, 27, 190, 94, 74, 143, 189, 66, 133, 164, 190, 53, 25, 223, 62, 248, 63, 9, 190, 174, 131, 92, 188, 75, 135, 244, 189, 105, 140, 155, 190, 221, 176, 38, 190, 133, 28, 144, 63, 0, 105, 207, 61, 98, 109, 73, 63, 167, 134, 77, 62, 27, 214, 77, 62, 9, 66, 29, 190, 117, 89, 169, 190, 194, 93, 45, 189, 189, 88, 165, 190, 53, 176, 150, 63, 177, 168, 220, 187, 220, 147, 25, 190, 142, 191, 241, 62, 23, 151, 193, 61, 241, 178, 7, 190, 23, 90, 203, 61, 243, 87, 82, 188, 216, 34, 3, 190, 75, 225, 141, 190, 204, 117, 50, 62, 188, 131, 99, 188, 176, 217, 18, 62, 231, 1, 226, 61, 20, 133, 128, 190, 45, 166, 138, 190, 67, 237, 22, 62, 13, 135, 202, 60, 31, 52, 206, 189, 116, 159, 169, 190, 216, 14, 7, 61, 174, 217, 50, 62, 193, 33, 98, 190, 173, 171, 47, 61, 134, 253, 177, 61, 129, 96, 170, 62, 193, 172, 134, 62, 239, 248, 51, 62, 203, 52, 54, 62, 35, 40, 192, 188, 87, 106, 62, 189, 131, 117, 178, 61, 48, 89, 131, 60, 30, 119, 178, 189, 200, 55, 228, 189, 40, 25, 235, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 232, 73, 190, 128, 20, 136, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {104, 102, 23, 191, 102, 123, 117, 190, 4, 206, 33, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {209, 63, 110, 63, 144, 92, 34, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0084/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}