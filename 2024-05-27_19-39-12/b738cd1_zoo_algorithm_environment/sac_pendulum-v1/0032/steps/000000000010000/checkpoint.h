// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 94, 44, 191, 254, 130, 249, 62, 173, 175, 192, 190, 251, 127, 182, 61, 132, 117, 62, 63, 242, 243, 153, 190, 2, 36, 123, 62, 43, 208, 140, 62, 244, 103, 231, 190, 228, 197, 85, 190, 66, 46, 70, 63, 59, 239, 100, 190, 96, 230, 83, 62, 169, 81, 22, 190, 99, 172, 148, 190, 216, 111, 107, 190, 160, 55, 83, 190, 183, 7, 127, 62, 63, 39, 217, 189, 217, 91, 84, 191, 180, 98, 148, 62, 14, 14, 91, 191, 206, 57, 32, 191, 90, 31, 184, 59, 45, 132, 178, 60, 196, 105, 242, 190, 80, 239, 10, 63, 136, 168, 49, 63, 210, 147, 171, 190, 212, 211, 247, 190, 89, 216, 51, 62, 21, 27, 82, 63, 4, 117, 183, 62, 247, 227, 59, 190, 191, 193, 57, 189, 57, 73, 85, 191, 95, 93, 17, 188, 144, 37, 40, 189, 162, 21, 198, 62, 35, 236, 237, 190, 35, 198, 49, 63, 95, 88, 129, 59, 124, 161, 45, 190, 216, 188, 105, 191, 105, 200, 20, 63, 100, 213, 5, 63, 4, 132, 132, 191, 244, 149, 10, 190, 144, 199, 190, 61, 71, 88, 202, 63, 34, 88, 10, 63, 213, 180, 194, 62, 178, 115, 136, 62, 217, 236, 60, 62, 247, 118, 0, 191, 28, 216, 70, 191, 39, 189, 152, 190, 158, 62, 238, 62, 176, 81, 99, 191, 27, 245, 75, 190, 57, 16, 109, 190, 160, 186, 160, 63, 214, 217, 172, 62, 199, 146, 253, 62, 182, 74, 118, 190, 225, 201, 17, 63, 233, 22, 204, 190, 201, 13, 25, 191, 222, 110, 27, 191, 60, 32, 83, 63, 23, 42, 189, 62, 89, 162, 31, 63, 120, 46, 66, 63, 147, 254, 72, 63, 240, 205, 169, 62, 216, 130, 78, 62, 244, 150, 90, 63, 220, 107, 2, 63, 245, 253, 44, 63, 34, 0, 69, 191, 37, 177, 236, 190, 131, 251, 90, 63, 129, 78, 214, 62, 153, 20, 80, 62, 24, 147, 98, 62, 69, 56, 13, 63, 32, 76, 189, 62, 185, 9, 74, 191, 237, 85, 223, 190, 19, 47, 143, 190, 75, 162, 13, 191, 221, 80, 46, 62, 68, 252, 234, 62, 175, 254, 143, 62, 61, 5, 144, 63, 91, 121, 213, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {36, 112, 239, 190, 59, 250, 0, 190, 125, 30, 67, 62, 237, 124, 216, 189, 186, 62, 27, 191, 249, 47, 6, 63, 144, 155, 245, 62, 38, 226, 48, 63, 182, 253, 187, 59, 104, 4, 92, 63, 147, 200, 54, 191, 104, 220, 133, 61, 63, 160, 194, 62, 176, 72, 225, 62, 132, 24, 139, 190, 64, 123, 172, 62, 225, 219, 78, 190, 157, 54, 37, 191, 53, 113, 174, 190, 6, 159, 201, 190, 38, 125, 175, 190, 129, 214, 158, 61, 125, 147, 146, 62, 243, 125, 42, 189, 204, 24, 130, 190, 35, 211, 20, 189, 13, 34, 54, 191, 197, 8, 31, 62, 171, 197, 132, 190, 1, 59, 243, 190, 13, 224, 57, 191, 181, 55, 171, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 9, 8, 63, 198, 224, 48, 191, 250, 49, 175, 61, 132, 14, 89, 62, 225, 246, 144, 189, 240, 201, 116, 62, 113, 93, 140, 62, 195, 155, 24, 61, 15, 17, 129, 62, 203, 88, 22, 61, 182, 12, 96, 190, 189, 30, 141, 191, 12, 150, 66, 62, 146, 134, 10, 62, 187, 121, 4, 190, 249, 97, 41, 62, 7, 218, 228, 61, 214, 155, 55, 191, 230, 34, 23, 63, 252, 74, 146, 190, 206, 114, 5, 62, 214, 230, 113, 190, 125, 47, 219, 190, 199, 52, 179, 190, 89, 34, 176, 190, 255, 180, 48, 62, 13, 154, 16, 189, 186, 234, 156, 189, 247, 135, 183, 190, 40, 20, 170, 191, 224, 60, 50, 62, 75, 39, 38, 61, 34, 214, 63, 188, 77, 50, 169, 62, 232, 190, 119, 61, 26, 237, 205, 62, 49, 130, 170, 190, 195, 194, 143, 188, 93, 59, 76, 190, 252, 53, 140, 190, 230, 161, 132, 190, 70, 131, 162, 189, 104, 73, 48, 188, 179, 225, 8, 60, 120, 65, 253, 189, 254, 87, 112, 187, 96, 242, 254, 187, 219, 164, 103, 190, 91, 109, 166, 61, 95, 143, 111, 62, 240, 95, 247, 189, 21, 95, 186, 190, 108, 60, 46, 190, 223, 213, 134, 62, 226, 36, 39, 60, 172, 134, 12, 62, 93, 35, 191, 62, 143, 182, 215, 61, 187, 35, 18, 191, 77, 205, 143, 62, 200, 18, 61, 62, 150, 153, 83, 62, 89, 196, 43, 190, 110, 4, 96, 62, 182, 83, 71, 190, 160, 167, 145, 62, 218, 159, 143, 61, 34, 30, 169, 62, 204, 160, 88, 190, 181, 164, 205, 61, 64, 107, 235, 189, 22, 177, 52, 190, 130, 101, 178, 189, 150, 173, 10, 190, 83, 139, 8, 62, 115, 23, 30, 62, 95, 225, 82, 62, 164, 121, 60, 62, 10, 11, 25, 62, 189, 191, 195, 190, 27, 88, 208, 61, 180, 252, 164, 62, 129, 77, 220, 190, 213, 113, 1, 191, 187, 171, 202, 189, 245, 253, 169, 61, 82, 185, 87, 189, 236, 48, 31, 62, 144, 250, 176, 62, 67, 47, 239, 189, 255, 131, 4, 191, 140, 218, 7, 62, 23, 236, 90, 188, 62, 101, 215, 61, 49, 83, 118, 190, 234, 5, 200, 189, 96, 92, 14, 62, 229, 16, 156, 190, 63, 73, 9, 62, 204, 181, 137, 190, 33, 47, 133, 62, 243, 150, 106, 62, 102, 9, 212, 62, 15, 239, 244, 61, 151, 197, 16, 62, 18, 16, 50, 62, 245, 84, 173, 190, 54, 202, 163, 61, 202, 86, 3, 62, 72, 35, 2, 190, 49, 166, 232, 189, 71, 216, 193, 62, 91, 142, 147, 189, 206, 198, 222, 190, 219, 250, 46, 62, 109, 103, 245, 190, 247, 138, 182, 62, 157, 229, 214, 189, 199, 6, 128, 190, 58, 194, 203, 190, 188, 80, 243, 190, 144, 101, 45, 60, 209, 67, 158, 62, 85, 14, 213, 61, 19, 218, 150, 190, 190, 88, 130, 190, 9, 76, 237, 62, 99, 252, 94, 61, 88, 20, 23, 190, 94, 69, 91, 190, 17, 248, 112, 62, 32, 138, 175, 190, 25, 150, 10, 62, 40, 4, 165, 190, 200, 111, 11, 190, 234, 242, 157, 189, 223, 200, 10, 62, 8, 245, 47, 62, 199, 30, 2, 191, 95, 85, 37, 62, 17, 218, 172, 61, 223, 31, 122, 190, 218, 207, 18, 189, 87, 43, 169, 62, 129, 62, 69, 191, 58, 136, 28, 190, 131, 56, 47, 189, 138, 40, 57, 191, 71, 199, 109, 190, 249, 2, 130, 189, 216, 40, 254, 188, 186, 170, 192, 189, 204, 220, 24, 190, 195, 77, 26, 190, 195, 14, 215, 189, 238, 108, 177, 62, 149, 37, 159, 190, 42, 54, 44, 190, 139, 240, 55, 190, 93, 20, 40, 190, 5, 48, 67, 60, 238, 220, 238, 189, 108, 188, 172, 61, 153, 139, 197, 189, 3, 227, 18, 62, 187, 239, 249, 189, 158, 232, 147, 62, 164, 151, 196, 61, 129, 238, 197, 60, 132, 166, 140, 62, 105, 241, 109, 190, 69, 186, 74, 61, 26, 196, 132, 61, 74, 68, 20, 191, 174, 21, 137, 61, 217, 119, 28, 63, 83, 229, 19, 191, 45, 188, 201, 190, 66, 164, 217, 190, 39, 145, 142, 62, 216, 172, 153, 190, 182, 180, 10, 62, 238, 64, 139, 188, 129, 175, 6, 62, 199, 61, 220, 190, 143, 59, 35, 189, 202, 180, 231, 62, 247, 37, 1, 62, 94, 113, 12, 190, 208, 35, 189, 190, 92, 250, 92, 190, 193, 84, 228, 190, 72, 94, 217, 61, 10, 62, 133, 190, 117, 167, 106, 62, 230, 233, 156, 190, 111, 214, 120, 61, 213, 227, 139, 62, 213, 82, 191, 62, 144, 239, 33, 62, 121, 59, 141, 62, 117, 93, 16, 62, 31, 138, 210, 190, 161, 11, 254, 190, 61, 232, 229, 61, 251, 156, 166, 190, 153, 171, 71, 190, 4, 236, 16, 63, 100, 26, 191, 190, 166, 151, 230, 190, 224, 161, 211, 62, 12, 13, 0, 191, 144, 248, 241, 189, 240, 180, 140, 189, 25, 76, 164, 190, 208, 83, 174, 190, 48, 2, 149, 190, 189, 164, 16, 189, 19, 197, 218, 62, 165, 166, 143, 189, 217, 95, 112, 190, 161, 154, 160, 191, 213, 39, 183, 61, 100, 167, 129, 61, 122, 9, 66, 189, 151, 116, 123, 190, 154, 78, 194, 188, 137, 233, 205, 189, 226, 222, 44, 190, 162, 152, 1, 190, 109, 80, 130, 189, 27, 255, 18, 191, 76, 85, 40, 190, 131, 214, 21, 190, 252, 236, 131, 62, 71, 147, 44, 190, 139, 53, 1, 62, 129, 150, 86, 59, 183, 173, 132, 189, 116, 57, 154, 190, 141, 49, 15, 61, 53, 10, 184, 61, 252, 208, 202, 189, 139, 23, 24, 191, 229, 41, 14, 60, 68, 130, 79, 62, 230, 168, 25, 190, 255, 217, 115, 62, 16, 174, 123, 62, 115, 143, 198, 189, 135, 55, 67, 189, 201, 226, 35, 62, 68, 57, 174, 61, 169, 165, 222, 61, 88, 158, 12, 61, 180, 237, 193, 61, 31, 89, 186, 190, 112, 81, 35, 190, 94, 249, 47, 190, 121, 29, 239, 190, 245, 122, 27, 62, 0, 62, 230, 189, 223, 55, 71, 60, 62, 225, 164, 61, 179, 63, 153, 62, 162, 212, 109, 61, 226, 154, 43, 190, 41, 65, 1, 61, 63, 57, 30, 190, 240, 55, 26, 191, 235, 197, 169, 188, 113, 68, 132, 62, 52, 79, 131, 190, 209, 135, 58, 190, 209, 121, 241, 189, 91, 86, 229, 62, 121, 28, 232, 189, 162, 227, 35, 62, 169, 239, 69, 61, 74, 250, 130, 190, 0, 138, 30, 191, 34, 7, 71, 62, 216, 0, 121, 62, 206, 9, 184, 190, 152, 178, 178, 61, 96, 6, 176, 190, 47, 34, 5, 189, 229, 231, 41, 190, 220, 61, 203, 189, 56, 140, 150, 190, 27, 12, 151, 188, 45, 50, 32, 191, 163, 130, 44, 190, 62, 166, 112, 62, 96, 34, 98, 62, 60, 214, 113, 62, 217, 28, 131, 62, 94, 60, 60, 191, 229, 66, 162, 190, 51, 218, 28, 190, 178, 108, 91, 61, 118, 83, 10, 190, 213, 198, 19, 60, 205, 178, 86, 189, 106, 169, 150, 190, 186, 198, 65, 190, 200, 193, 185, 191, 141, 47, 102, 62, 87, 148, 19, 190, 126, 56, 59, 190, 247, 207, 217, 189, 152, 61, 139, 190, 132, 199, 17, 191, 99, 60, 15, 190, 30, 120, 111, 190, 151, 111, 214, 190, 126, 26, 171, 189, 20, 86, 33, 189, 143, 98, 195, 61, 208, 49, 46, 190, 197, 182, 19, 190, 253, 232, 155, 60, 22, 52, 125, 62, 226, 163, 178, 190, 101, 197, 227, 60, 255, 52, 48, 62, 220, 94, 137, 62, 177, 170, 126, 60, 203, 107, 152, 62, 84, 26, 145, 62, 58, 45, 128, 188, 57, 52, 120, 61, 140, 86, 158, 189, 143, 180, 212, 190, 12, 248, 154, 60, 194, 52, 135, 62, 50, 219, 229, 189, 135, 252, 136, 190, 61, 87, 140, 59, 26, 98, 216, 190, 150, 187, 72, 62, 111, 47, 105, 190, 213, 213, 59, 190, 139, 171, 239, 60, 141, 211, 119, 190, 76, 33, 5, 60, 92, 145, 154, 62, 189, 240, 51, 60, 17, 218, 135, 190, 119, 118, 196, 189, 138, 186, 218, 61, 179, 74, 195, 189, 230, 148, 46, 63, 180, 187, 22, 191, 12, 253, 124, 190, 65, 39, 0, 61, 109, 107, 23, 189, 69, 86, 231, 61, 80, 155, 58, 62, 125, 216, 9, 62, 162, 35, 178, 61, 192, 134, 5, 191, 48, 202, 97, 190, 204, 189, 139, 191, 121, 233, 47, 62, 132, 196, 155, 62, 59, 121, 27, 190, 55, 253, 77, 189, 219, 185, 59, 62, 141, 165, 155, 190, 190, 83, 243, 62, 203, 109, 179, 189, 194, 157, 198, 62, 154, 77, 146, 189, 33, 67, 6, 191, 57, 171, 53, 189, 123, 49, 15, 190, 64, 123, 142, 62, 27, 21, 132, 190, 139, 223, 88, 61, 6, 220, 239, 189, 120, 19, 209, 191, 223, 237, 143, 61, 164, 188, 148, 61, 6, 30, 95, 190, 186, 73, 141, 62, 180, 29, 3, 62, 92, 216, 193, 62, 224, 106, 74, 190, 34, 250, 55, 61, 12, 191, 123, 189, 100, 184, 11, 191, 205, 151, 168, 190, 232, 159, 90, 62, 168, 100, 249, 61, 96, 10, 143, 60, 14, 220, 58, 190, 11, 205, 83, 61, 119, 136, 6, 189, 68, 91, 130, 190, 43, 84, 53, 189, 192, 81, 247, 62, 180, 213, 40, 191, 203, 196, 79, 191, 113, 211, 197, 189, 29, 110, 68, 62, 213, 24, 76, 190, 149, 44, 195, 62, 77, 71, 120, 62, 60, 226, 93, 59, 167, 22, 54, 191, 72, 133, 222, 62, 81, 112, 148, 62, 222, 8, 225, 61, 124, 138, 169, 189, 49, 46, 52, 62, 102, 91, 133, 190, 240, 249, 186, 62, 144, 2, 1, 189, 70, 185, 159, 62, 154, 221, 64, 189, 182, 67, 26, 61, 230, 145, 168, 61, 7, 84, 28, 62, 6, 100, 247, 190, 136, 133, 82, 189, 203, 135, 202, 189, 230, 1, 250, 61, 190, 239, 212, 189, 139, 30, 153, 62, 241, 222, 174, 189, 98, 30, 243, 190, 58, 57, 115, 190, 33, 210, 73, 190, 96, 183, 177, 61, 41, 28, 12, 189, 105, 118, 79, 191, 76, 202, 7, 62, 69, 39, 154, 62, 211, 9, 18, 63, 194, 173, 176, 62, 153, 237, 167, 190, 147, 44, 46, 190, 129, 226, 138, 62, 114, 92, 187, 61, 189, 33, 25, 62, 166, 87, 73, 191, 18, 54, 56, 62, 66, 113, 133, 61, 139, 149, 246, 60, 226, 72, 37, 62, 141, 152, 135, 61, 58, 15, 8, 61, 46, 139, 175, 62, 127, 46, 41, 61, 117, 88, 191, 60, 16, 191, 53, 62, 178, 243, 175, 61, 198, 221, 21, 189, 116, 204, 239, 189, 80, 167, 10, 190, 64, 106, 184, 189, 241, 141, 118, 191, 210, 139, 156, 62, 204, 124, 187, 62, 54, 56, 237, 190, 171, 214, 139, 61, 154, 245, 11, 191, 63, 104, 168, 62, 243, 142, 14, 191, 171, 101, 229, 61, 246, 3, 161, 190, 208, 59, 83, 190, 131, 150, 154, 61, 27, 29, 150, 62, 26, 51, 67, 61, 225, 197, 177, 190, 52, 37, 252, 189, 254, 152, 171, 62, 0, 254, 2, 63, 237, 77, 145, 190, 32, 216, 67, 189, 189, 84, 136, 189, 54, 120, 233, 57, 58, 178, 216, 189, 148, 71, 214, 62, 247, 78, 223, 62, 88, 238, 179, 62, 29, 121, 161, 190, 101, 140, 158, 190, 126, 58, 171, 188, 233, 138, 63, 62, 252, 28, 87, 189, 237, 229, 0, 62, 157, 80, 122, 62, 7, 8, 56, 62, 32, 5, 193, 191, 41, 3, 56, 190, 119, 65, 162, 190, 79, 151, 72, 63, 131, 86, 57, 191, 172, 188, 132, 62, 90, 22, 185, 62, 185, 24, 176, 190, 175, 179, 80, 191, 230, 176, 147, 191, 100, 174, 48, 190, 225, 205, 249, 190, 113, 194, 52, 62, 163, 164, 77, 62, 109, 110, 29, 191, 119, 219, 1, 191, 216, 81, 173, 61, 200, 87, 161, 62, 89, 7, 72, 62, 125, 155, 9, 189, 17, 70, 174, 189, 172, 147, 11, 190, 213, 60, 170, 190, 18, 207, 111, 191, 235, 175, 139, 189, 38, 4, 162, 190, 240, 168, 49, 62, 122, 109, 73, 190, 52, 171, 163, 60, 187, 188, 3, 191, 89, 127, 100, 189, 237, 199, 157, 190, 201, 6, 134, 187, 42, 57, 162, 62, 224, 177, 5, 62, 159, 232, 212, 61, 253, 226, 254, 189, 61, 195, 229, 61, 105, 134, 117, 189, 169, 154, 30, 62, 183, 251, 137, 62, 181, 133, 195, 61, 147, 206, 213, 189, 105, 214, 89, 62, 246, 248, 24, 62, 92, 27, 122, 189, 125, 37, 196, 189, 181, 92, 27, 62, 61, 148, 219, 189, 7, 185, 161, 189, 76, 171, 208, 189, 103, 249, 5, 62, 202, 194, 46, 190, 137, 219, 30, 188, 88, 72, 40, 190, 1, 171, 52, 190, 243, 126, 210, 189, 196, 99, 14, 190, 67, 7, 254, 189, 211, 74, 48, 190, 211, 45, 158, 189, 81, 48, 165, 61, 18, 43, 193, 188, 243, 43, 183, 60, 117, 182, 3, 62, 25, 106, 217, 60, 88, 36, 4, 190, 54, 217, 36, 190, 252, 122, 90, 61, 182, 71, 199, 189, 188, 129, 18, 60, 41, 244, 249, 189, 82, 52, 25, 190, 147, 135, 90, 188, 240, 201, 71, 61, 126, 53, 233, 189, 106, 65, 148, 61, 2, 43, 245, 189, 76, 135, 3, 62, 7, 8, 145, 189, 178, 130, 70, 190, 158, 77, 155, 187, 5, 219, 46, 190, 100, 91, 176, 189, 183, 48, 50, 190, 216, 204, 160, 61, 85, 141, 25, 62, 194, 42, 47, 62, 168, 127, 161, 190, 119, 43, 140, 62, 71, 60, 25, 61, 169, 209, 237, 59, 238, 123, 175, 61, 156, 159, 60, 62, 51, 202, 221, 61, 30, 251, 4, 62, 197, 149, 3, 191, 157, 23, 166, 62, 219, 212, 26, 189, 201, 215, 66, 190, 174, 20, 135, 191, 117, 7, 112, 62, 35, 177, 73, 62, 30, 58, 242, 62, 106, 179, 13, 63, 191, 95, 160, 190, 72, 23, 98, 190, 156, 35, 37, 62, 54, 221, 143, 62, 34, 249, 107, 189, 48, 208, 224, 190, 82, 201, 164, 190, 176, 245, 162, 61, 105, 88, 38, 190, 244, 22, 142, 61, 136, 199, 251, 189, 10, 184, 10, 189, 65, 77, 222, 188, 133, 150, 246, 189, 109, 8, 154, 189, 213, 144, 97, 188, 133, 249, 27, 189, 236, 71, 178, 61, 249, 226, 73, 190, 66, 84, 34, 190, 157, 30, 2, 62, 68, 8, 165, 61, 36, 165, 223, 61, 236, 212, 83, 190, 141, 250, 75, 61, 91, 12, 201, 61, 85, 232, 250, 189, 188, 20, 248, 187, 75, 90, 12, 190, 139, 224, 26, 190, 102, 242, 180, 188, 243, 251, 211, 189, 156, 75, 250, 189, 214, 141, 18, 62, 46, 64, 201, 61, 8, 138, 70, 189, 29, 254, 173, 60, 120, 13, 255, 189, 87, 192, 3, 62, 54, 246, 7, 61, 85, 111, 206, 189, 63, 62, 119, 62, 181, 95, 81, 62, 125, 246, 11, 61, 29, 207, 79, 189, 253, 232, 81, 60, 78, 92, 15, 62, 94, 190, 94, 188, 12, 62, 79, 62, 94, 136, 231, 189, 97, 209, 238, 61, 221, 193, 82, 190, 97, 137, 155, 189, 205, 123, 240, 60, 187, 66, 232, 62, 186, 201, 62, 59, 229, 127, 73, 62, 118, 38, 67, 189, 212, 253, 213, 190, 116, 126, 129, 190, 41, 106, 146, 62, 39, 147, 79, 187, 211, 150, 62, 62, 12, 180, 87, 190, 43, 128, 131, 190, 198, 56, 32, 62, 251, 235, 220, 61, 55, 205, 183, 61, 8, 117, 165, 190, 176, 179, 96, 191, 39, 114, 248, 61, 140, 116, 208, 61, 127, 87, 68, 62, 39, 17, 153, 61, 115, 137, 11, 189, 108, 27, 119, 189, 246, 171, 229, 189, 10, 184, 166, 189, 92, 11, 56, 62, 156, 82, 249, 61, 33, 48, 5, 62, 162, 129, 76, 62, 148, 32, 158, 189, 168, 107, 18, 62, 86, 176, 136, 190, 70, 117, 149, 61, 249, 218, 167, 188, 218, 247, 94, 61, 132, 68, 87, 187, 114, 220, 187, 190, 119, 232, 5, 63, 127, 133, 212, 61, 111, 109, 205, 61, 50, 211, 49, 190, 13, 149, 35, 62, 184, 166, 76, 62, 201, 113, 8, 190, 22, 48, 115, 62, 120, 170, 57, 61, 209, 58, 82, 62, 181, 171, 1, 60, 65, 209, 201, 189, 150, 73, 255, 189, 17, 45, 8, 61, 172, 101, 159, 190, 37, 6, 117, 62, 45, 81, 198, 189, 184, 245, 37, 189, 185, 170, 85, 61, 79, 80, 36, 62, 113, 78, 133, 62, 140, 237, 39, 62, 46, 17, 115, 62, 43, 78, 79, 190, 165, 19, 131, 190, 122, 33, 2, 61, 41, 63, 24, 62, 97, 175, 250, 189, 163, 149, 122, 62, 254, 79, 16, 62, 91, 110, 49, 191, 144, 227, 152, 189, 26, 235, 74, 191, 141, 15, 150, 62, 86, 153, 229, 189, 126, 220, 242, 189, 29, 73, 90, 190, 86, 87, 196, 190, 41, 224, 212, 61, 138, 47, 102, 62, 255, 11, 108, 189, 87, 240, 3, 190, 128, 27, 204, 190, 223, 212, 102, 62, 138, 228, 195, 189, 150, 99, 229, 190, 101, 242, 12, 191, 0, 118, 241, 190, 219, 138, 191, 190, 174, 53, 52, 190, 44, 86, 150, 62, 101, 48, 139, 60, 106, 130, 189, 62, 50, 254, 27, 189, 128, 26, 79, 191, 30, 205, 191, 190, 2, 107, 178, 190, 241, 212, 131, 62, 28, 159, 142, 59, 142, 16, 228, 61, 242, 49, 241, 61, 247, 197, 13, 62, 29, 88, 102, 191, 137, 76, 199, 191, 125, 165, 210, 189, 163, 248, 180, 62, 185, 108, 19, 190, 178, 153, 177, 190, 14, 225, 2, 191, 52, 229, 47, 191, 161, 49, 20, 190, 43, 160, 129, 190, 217, 76, 62, 191, 243, 154, 77, 190, 246, 105, 129, 62, 44, 239, 152, 61, 69, 132, 142, 62, 146, 15, 122, 190, 155, 186, 15, 190, 68, 209, 51, 189, 130, 246, 211, 189, 69, 144, 80, 62, 253, 208, 125, 189, 96, 201, 58, 61, 60, 151, 185, 60, 155, 33, 61, 61, 54, 202, 25, 62, 58, 233, 142, 190, 10, 182, 62, 62, 125, 28, 199, 186, 95, 109, 150, 190, 122, 226, 145, 62, 41, 197, 149, 62, 59, 194, 50, 191, 146, 143, 19, 60, 136, 111, 154, 188, 59, 46, 207, 190, 148, 141, 180, 190, 15, 42, 135, 60, 116, 77, 40, 62, 13, 241, 5, 62, 78, 195, 154, 61, 18, 82, 199, 188, 6, 233, 128, 62, 184, 196, 93, 62, 96, 72, 89, 190, 149, 175, 94, 190, 144, 131, 251, 190, 60, 18, 227, 189, 210, 166, 80, 189, 43, 189, 87, 61, 116, 21, 13, 190, 219, 19, 21, 191, 113, 201, 43, 61, 235, 99, 67, 189, 209, 114, 38, 190, 240, 127, 192, 190, 196, 98, 13, 62, 155, 208, 99, 188, 232, 195, 170, 189, 63, 58, 197, 190, 201, 254, 114, 189, 110, 247, 110, 190, 230, 29, 176, 189, 201, 113, 23, 188, 151, 166, 46, 62, 95, 60, 99, 62, 165, 218, 253, 189, 248, 105, 8, 63, 55, 211, 115, 190, 81, 133, 193, 61, 54, 171, 7, 190, 239, 134, 108, 62, 168, 78, 246, 61, 60, 121, 201, 189, 82, 48, 119, 62, 134, 15, 139, 62, 25, 2, 59, 62, 60, 129, 49, 61, 94, 229, 196, 60, 108, 210, 40, 61, 19, 124, 118, 190, 177, 124, 78, 190, 89, 32, 50, 189, 115, 182, 169, 190, 213, 10, 132, 189, 156, 199, 163, 61, 18, 225, 72, 62, 117, 100, 13, 190, 57, 109, 7, 62, 226, 111, 226, 61, 115, 109, 46, 62, 123, 52, 130, 189, 10, 166, 23, 190, 227, 132, 190, 190, 118, 199, 1, 62, 206, 63, 40, 189, 41, 238, 204, 189, 41, 65, 42, 62, 97, 117, 203, 189, 230, 103, 218, 62, 236, 7, 232, 61, 6, 174, 231, 61, 70, 203, 197, 189, 146, 172, 33, 60, 119, 53, 206, 189, 101, 203, 58, 62, 214, 10, 124, 61, 36, 34, 93, 190, 212, 5, 27, 62, 239, 107, 190, 190, 184, 92, 42, 62, 210, 219, 60, 61, 7, 219, 19, 62, 178, 34, 168, 190, 240, 123, 140, 60, 66, 237, 56, 190, 212, 27, 225, 189, 53, 28, 231, 60, 156, 64, 147, 190, 208, 40, 231, 190, 81, 27, 169, 60, 208, 65, 184, 190, 201, 217, 63, 62, 25, 15, 198, 61, 8, 22, 95, 190, 246, 43, 1, 191, 168, 112, 21, 62, 190, 50, 146, 189, 220, 115, 44, 190, 58, 106, 201, 62, 103, 53, 42, 190, 248, 185, 191, 61, 230, 234, 153, 189, 234, 64, 36, 61, 207, 255, 99, 61, 213, 42, 94, 62, 184, 79, 175, 62, 21, 240, 22, 62, 5, 147, 213, 189, 40, 81, 119, 188, 170, 122, 195, 61, 146, 143, 138, 61, 75, 0, 134, 190, 229, 192, 2, 61, 76, 104, 70, 189, 156, 40, 249, 188, 152, 214, 195, 62, 245, 234, 39, 62, 103, 85, 140, 61, 194, 227, 163, 189, 178, 34, 244, 61, 41, 69, 161, 190, 225, 96, 216, 188, 242, 139, 128, 62, 168, 83, 141, 61, 140, 134, 70, 62, 2, 52, 230, 61, 235, 216, 84, 189, 174, 129, 31, 62, 146, 39, 117, 62, 203, 11, 117, 189, 57, 146, 238, 61, 65, 1, 137, 61, 97, 239, 105, 62, 175, 38, 139, 189, 12, 164, 147, 189, 34, 134, 79, 190, 27, 154, 142, 188, 123, 216, 88, 62, 120, 221, 20, 62, 64, 107, 144, 190, 239, 160, 154, 62, 83, 60, 174, 60, 174, 52, 62, 190, 107, 150, 61, 62, 160, 18, 118, 62, 118, 103, 49, 62, 179, 129, 237, 189, 112, 113, 0, 61, 72, 75, 227, 189, 26, 73, 73, 61, 200, 123, 233, 60, 124, 228, 42, 189, 181, 24, 250, 189, 97, 186, 78, 189, 136, 131, 177, 189, 243, 243, 9, 190, 103, 150, 158, 189, 132, 212, 205, 188, 150, 32, 21, 190, 238, 129, 53, 60, 226, 253, 3, 190, 11, 14, 46, 190, 87, 57, 135, 189, 7, 81, 169, 61, 49, 110, 29, 61, 222, 79, 26, 61, 58, 1, 246, 188, 243, 233, 37, 62, 79, 26, 185, 61, 249, 247, 40, 190, 148, 145, 197, 188, 171, 176, 42, 190, 151, 170, 181, 59, 146, 188, 35, 190, 76, 153, 130, 189, 255, 223, 19, 190, 41, 185, 114, 61, 201, 166, 175, 61, 4, 180, 184, 61, 1, 50, 19, 190, 88, 151, 98, 189, 107, 178, 57, 190, 178, 43, 222, 189, 74, 253, 123, 189, 198, 235, 110, 61, 51, 81, 191, 60, 49, 147, 17, 190, 76, 44, 94, 189, 241, 111, 82, 190, 203, 127, 128, 60, 30, 26, 152, 61, 114, 132, 149, 60, 71, 110, 224, 60, 6, 31, 19, 190, 142, 196, 38, 190, 172, 235, 222, 186, 143, 131, 9, 61, 74, 188, 171, 61, 117, 181, 7, 60, 134, 232, 181, 188, 17, 184, 214, 188, 155, 61, 45, 61, 176, 0, 41, 190, 26, 40, 9, 62, 25, 32, 125, 60, 255, 240, 235, 189, 219, 148, 217, 61, 113, 43, 36, 62, 16, 80, 56, 190, 166, 174, 133, 62, 141, 128, 165, 190, 223, 117, 14, 190, 101, 252, 213, 189, 169, 195, 42, 61, 250, 138, 109, 62, 159, 246, 60, 62, 3, 24, 128, 62, 35, 204, 59, 62, 120, 210, 85, 60, 127, 109, 126, 190, 125, 242, 139, 61, 184, 214, 139, 60, 132, 82, 20, 62, 248, 138, 10, 189, 186, 137, 83, 61, 38, 253, 8, 61, 46, 156, 171, 190, 227, 149, 42, 189, 225, 210, 161, 191, 79, 169, 104, 188, 162, 188, 116, 61, 3, 173, 181, 189, 205, 230, 163, 189, 104, 170, 221, 189, 149, 15, 156, 61, 174, 169, 230, 190, 136, 2, 129, 60, 26, 232, 128, 190, 180, 244, 18, 190, 224, 113, 154, 61, 204, 148, 110, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 215, 197, 62, 102, 49, 58, 62, 151, 255, 163, 62, 176, 40, 236, 60, 182, 227, 204, 60, 122, 235, 170, 189, 128, 108, 233, 61, 201, 134, 97, 190, 246, 210, 77, 190, 129, 159, 79, 62, 105, 226, 251, 189, 20, 145, 152, 62, 246, 27, 239, 61, 245, 220, 236, 61, 213, 82, 224, 188, 235, 88, 170, 61, 67, 136, 170, 190, 237, 65, 47, 190, 254, 122, 165, 62, 184, 146, 131, 189, 127, 63, 19, 62, 138, 91, 116, 190, 13, 24, 148, 61, 196, 85, 53, 62, 254, 28, 140, 60, 166, 242, 108, 190, 147, 120, 129, 190, 221, 56, 234, 190, 92, 20, 12, 61, 44, 63, 169, 61, 50, 228, 179, 189, 105, 150, 92, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 38, 95, 63, 48, 58, 143, 190, 144, 135, 188, 190, 65, 120, 0, 63, 34, 197, 107, 62, 198, 25, 11, 63, 212, 24, 57, 63, 207, 6, 207, 188, 133, 231, 31, 191, 162, 112, 89, 191, 91, 197, 185, 62, 53, 78, 7, 63, 132, 30, 0, 191, 250, 153, 18, 191, 137, 82, 212, 62, 79, 138, 166, 191, 60, 98, 34, 63, 177, 104, 165, 188, 37, 42, 207, 190, 253, 235, 197, 189, 213, 72, 220, 62, 43, 12, 226, 60, 13, 234, 253, 62, 119, 162, 62, 191, 172, 179, 36, 62, 169, 126, 137, 190, 101, 117, 74, 190, 106, 243, 33, 63, 105, 235, 63, 190, 28, 112, 38, 61, 149, 149, 240, 189, 176, 182, 177, 61, 113, 80, 23, 62, 136, 81, 14, 61, 206, 166, 19, 190, 143, 18, 245, 59, 182, 106, 15, 191, 167, 20, 142, 62, 107, 229, 159, 189, 77, 232, 173, 62, 10, 166, 188, 61, 92, 165, 67, 62, 124, 132, 41, 190, 101, 100, 7, 190, 182, 27, 46, 190, 220, 182, 31, 61, 169, 52, 78, 188, 122, 78, 218, 60, 115, 238, 228, 189, 114, 43, 165, 189, 182, 193, 62, 190, 130, 240, 204, 61, 94, 229, 65, 189, 194, 97, 64, 62, 215, 237, 210, 61, 61, 36, 188, 189, 253, 157, 159, 190, 204, 230, 92, 62, 131, 209, 226, 61, 210, 151, 253, 60, 28, 206, 34, 190, 76, 235, 18, 62, 20, 36, 254, 61, 26, 141, 81, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 24, 147, 188, 35, 195, 63, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {223, 33, 236, 191, 109, 18, 139, 191, 111, 141, 32, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {214, 145, 117, 192, 173, 183, 44, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0032/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}