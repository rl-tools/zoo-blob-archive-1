// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 90, 70, 190, 177, 226, 230, 62, 54, 127, 214, 190, 99, 102, 129, 190, 201, 231, 44, 63, 166, 162, 72, 190, 80, 8, 254, 62, 107, 121, 192, 62, 205, 164, 205, 190, 239, 141, 213, 190, 137, 111, 83, 63, 69, 157, 204, 189, 26, 31, 61, 190, 15, 93, 164, 61, 103, 253, 184, 190, 182, 163, 224, 186, 114, 247, 35, 188, 78, 79, 131, 62, 93, 126, 42, 189, 198, 123, 84, 191, 119, 122, 117, 62, 156, 25, 165, 190, 155, 242, 85, 191, 183, 74, 110, 190, 29, 118, 118, 59, 143, 232, 24, 191, 103, 208, 208, 62, 61, 146, 95, 63, 4, 174, 142, 62, 154, 88, 13, 191, 146, 122, 95, 59, 242, 172, 197, 62, 52, 125, 201, 62, 136, 115, 0, 190, 151, 60, 38, 63, 232, 137, 175, 190, 19, 88, 211, 61, 151, 126, 210, 190, 101, 121, 141, 62, 148, 115, 236, 190, 249, 148, 21, 63, 70, 232, 198, 189, 126, 153, 255, 61, 48, 122, 95, 191, 235, 55, 11, 63, 45, 106, 183, 62, 51, 238, 57, 191, 62, 203, 233, 61, 209, 209, 74, 190, 196, 184, 93, 63, 163, 245, 225, 62, 250, 120, 179, 60, 61, 112, 185, 61, 150, 18, 61, 62, 120, 111, 195, 190, 1, 146, 108, 190, 249, 200, 64, 190, 25, 158, 28, 62, 138, 91, 214, 190, 181, 218, 181, 189, 42, 97, 216, 190, 37, 79, 190, 61, 110, 218, 155, 62, 248, 16, 23, 63, 104, 243, 123, 190, 246, 237, 3, 63, 202, 136, 174, 190, 128, 25, 109, 62, 44, 233, 239, 190, 208, 46, 65, 63, 118, 172, 175, 61, 210, 41, 7, 63, 167, 199, 213, 62, 171, 187, 159, 62, 66, 125, 162, 62, 116, 80, 177, 187, 119, 118, 102, 61, 4, 207, 230, 62, 85, 12, 2, 63, 174, 169, 39, 190, 127, 206, 2, 191, 41, 16, 18, 62, 39, 45, 159, 62, 37, 213, 39, 62, 124, 74, 13, 62, 189, 105, 80, 61, 172, 69, 171, 62, 115, 106, 34, 191, 157, 156, 72, 62, 68, 10, 130, 190, 205, 229, 39, 191, 45, 40, 30, 191, 93, 109, 157, 62, 164, 215, 21, 190, 125, 231, 122, 63, 242, 132, 182, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 233, 39, 191, 124, 18, 211, 61, 0, 233, 168, 61, 213, 57, 3, 61, 80, 243, 244, 190, 105, 65, 3, 63, 136, 84, 0, 63, 130, 94, 249, 62, 93, 129, 101, 62, 1, 88, 7, 63, 241, 158, 12, 191, 224, 63, 42, 62, 156, 199, 253, 62, 193, 253, 224, 62, 51, 179, 217, 190, 85, 230, 246, 62, 142, 225, 27, 62, 17, 155, 172, 190, 201, 243, 11, 191, 48, 18, 12, 191, 128, 25, 47, 190, 160, 93, 11, 189, 178, 204, 231, 62, 17, 145, 3, 189, 113, 25, 222, 189, 211, 87, 120, 62, 199, 106, 10, 191, 107, 16, 42, 62, 34, 210, 196, 190, 55, 88, 169, 190, 245, 198, 253, 190, 198, 219, 23, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 216, 156, 189, 219, 76, 185, 190, 240, 92, 124, 60, 172, 67, 103, 189, 176, 64, 246, 189, 251, 19, 42, 62, 43, 82, 138, 62, 117, 63, 85, 61, 248, 220, 94, 62, 147, 39, 129, 189, 153, 222, 254, 188, 231, 15, 198, 190, 9, 11, 4, 62, 218, 230, 58, 189, 49, 179, 219, 188, 206, 44, 235, 61, 162, 165, 140, 186, 72, 158, 29, 190, 176, 92, 155, 189, 248, 43, 202, 188, 101, 83, 181, 188, 46, 222, 78, 190, 62, 73, 175, 189, 123, 189, 169, 190, 89, 172, 81, 190, 182, 165, 184, 61, 152, 173, 19, 62, 119, 223, 206, 189, 215, 231, 106, 190, 60, 116, 135, 190, 220, 243, 59, 62, 17, 152, 209, 189, 91, 42, 19, 61, 153, 141, 134, 62, 75, 127, 177, 61, 216, 132, 206, 62, 122, 173, 110, 190, 223, 56, 189, 61, 135, 6, 101, 190, 213, 221, 201, 189, 215, 7, 27, 190, 19, 139, 1, 190, 103, 13, 137, 189, 119, 227, 233, 60, 28, 9, 153, 189, 108, 14, 252, 60, 238, 142, 211, 59, 210, 228, 79, 190, 226, 182, 75, 62, 144, 190, 220, 189, 204, 51, 254, 189, 123, 130, 13, 62, 69, 141, 131, 61, 46, 65, 47, 62, 247, 144, 147, 61, 10, 116, 253, 187, 184, 237, 15, 62, 11, 65, 53, 62, 181, 54, 67, 190, 77, 46, 228, 60, 91, 42, 235, 61, 245, 179, 213, 61, 61, 48, 49, 189, 234, 210, 149, 62, 20, 134, 15, 190, 25, 102, 73, 62, 75, 58, 161, 61, 17, 67, 158, 62, 57, 219, 6, 190, 1, 14, 22, 62, 132, 196, 2, 190, 164, 68, 70, 61, 237, 61, 237, 188, 67, 124, 19, 190, 231, 231, 202, 61, 205, 230, 82, 62, 44, 55, 85, 62, 43, 169, 61, 62, 135, 101, 25, 62, 121, 140, 81, 190, 118, 185, 93, 62, 15, 249, 92, 61, 17, 24, 75, 190, 67, 226, 222, 60, 188, 16, 20, 61, 111, 231, 143, 61, 101, 147, 131, 61, 180, 208, 244, 61, 69, 38, 70, 62, 115, 54, 146, 189, 229, 92, 65, 190, 70, 48, 150, 188, 155, 8, 33, 189, 29, 58, 238, 61, 238, 50, 113, 190, 232, 141, 111, 189, 176, 77, 185, 61, 101, 130, 71, 190, 199, 104, 246, 61, 66, 29, 21, 190, 5, 68, 59, 62, 137, 80, 33, 62, 27, 31, 190, 62, 40, 60, 161, 61, 75, 211, 250, 60, 169, 180, 37, 62, 51, 201, 82, 190, 122, 70, 18, 62, 239, 99, 156, 61, 156, 228, 74, 188, 159, 71, 18, 190, 100, 255, 132, 62, 44, 137, 25, 190, 176, 248, 158, 189, 75, 93, 50, 62, 243, 63, 79, 190, 60, 214, 110, 62, 108, 168, 228, 189, 34, 53, 75, 190, 173, 183, 198, 190, 135, 87, 144, 190, 173, 81, 72, 189, 216, 203, 174, 61, 91, 163, 31, 62, 71, 172, 86, 190, 212, 218, 231, 189, 178, 140, 190, 62, 102, 33, 127, 61, 78, 131, 48, 189, 102, 207, 40, 190, 139, 113, 230, 61, 1, 222, 35, 190, 49, 90, 228, 61, 152, 125, 66, 190, 213, 111, 232, 189, 234, 216, 183, 61, 163, 112, 2, 62, 158, 98, 76, 61, 187, 200, 225, 189, 7, 204, 42, 62, 58, 135, 245, 61, 154, 2, 246, 61, 29, 212, 130, 189, 138, 157, 31, 62, 57, 113, 169, 61, 84, 216, 8, 62, 53, 36, 151, 189, 126, 143, 199, 189, 197, 231, 174, 189, 65, 223, 143, 189, 93, 2, 202, 60, 147, 67, 44, 190, 131, 109, 42, 190, 192, 202, 164, 188, 169, 188, 16, 190, 39, 254, 176, 61, 134, 66, 203, 61, 114, 163, 157, 189, 229, 115, 138, 189, 216, 200, 237, 188, 203, 250, 132, 61, 27, 72, 59, 190, 33, 179, 204, 189, 79, 117, 46, 189, 43, 208, 11, 62, 143, 24, 244, 189, 112, 99, 136, 61, 203, 116, 147, 61, 88, 36, 59, 190, 65, 73, 215, 61, 17, 65, 3, 62, 189, 191, 184, 60, 30, 87, 170, 189, 168, 215, 88, 190, 17, 56, 30, 190, 168, 48, 235, 61, 6, 72, 13, 190, 40, 191, 71, 189, 74, 146, 219, 189, 13, 153, 184, 59, 162, 40, 31, 62, 46, 108, 14, 190, 178, 56, 85, 58, 63, 228, 143, 189, 106, 177, 115, 190, 50, 207, 64, 189, 113, 83, 59, 62, 81, 168, 136, 189, 181, 205, 35, 189, 125, 205, 190, 189, 125, 45, 37, 188, 154, 244, 28, 190, 166, 207, 164, 189, 229, 106, 204, 190, 112, 165, 151, 187, 199, 76, 141, 190, 228, 91, 11, 190, 147, 120, 150, 62, 147, 235, 164, 62, 87, 196, 95, 62, 216, 247, 93, 62, 107, 63, 149, 61, 177, 60, 27, 190, 152, 69, 100, 190, 44, 96, 218, 61, 150, 83, 219, 189, 183, 23, 71, 190, 68, 239, 214, 62, 227, 103, 38, 190, 178, 157, 207, 189, 55, 21, 87, 190, 93, 11, 52, 190, 231, 45, 237, 189, 16, 25, 179, 188, 83, 160, 156, 189, 254, 143, 136, 190, 116, 212, 134, 188, 2, 225, 211, 186, 9, 11, 89, 62, 94, 248, 107, 61, 91, 77, 35, 189, 110, 140, 193, 190, 77, 99, 153, 61, 199, 246, 36, 62, 179, 173, 67, 189, 172, 247, 27, 190, 74, 57, 71, 190, 94, 164, 14, 190, 226, 222, 44, 190, 42, 93, 205, 189, 166, 128, 20, 61, 113, 221, 120, 190, 109, 67, 21, 190, 245, 235, 55, 61, 151, 153, 33, 62, 74, 142, 61, 190, 195, 57, 1, 62, 133, 252, 202, 60, 235, 24, 148, 189, 98, 236, 17, 190, 241, 251, 122, 189, 166, 18, 88, 188, 252, 208, 202, 189, 240, 143, 212, 61, 35, 57, 133, 61, 34, 93, 23, 62, 230, 168, 25, 190, 62, 80, 8, 62, 210, 141, 141, 61, 50, 88, 23, 190, 107, 235, 77, 189, 105, 99, 236, 60, 238, 123, 4, 189, 169, 165, 222, 61, 112, 114, 199, 61, 9, 86, 5, 61, 21, 157, 246, 189, 210, 187, 234, 189, 22, 71, 39, 190, 223, 189, 51, 190, 8, 0, 13, 62, 215, 47, 205, 61, 224, 246, 93, 190, 86, 25, 32, 61, 125, 11, 68, 61, 235, 198, 87, 61, 198, 248, 64, 189, 185, 204, 131, 61, 30, 103, 19, 190, 204, 217, 186, 61, 173, 200, 236, 189, 226, 160, 187, 188, 201, 56, 214, 189, 230, 51, 194, 189, 128, 199, 63, 189, 31, 190, 138, 189, 123, 94, 144, 60, 32, 81, 205, 189, 149, 124, 146, 61, 123, 168, 177, 189, 22, 212, 184, 189, 17, 39, 254, 61, 59, 53, 181, 61, 33, 8, 40, 61, 25, 52, 160, 61, 187, 54, 59, 190, 3, 50, 0, 190, 87, 195, 112, 61, 236, 252, 8, 189, 236, 16, 28, 190, 250, 246, 26, 62, 12, 5, 233, 190, 52, 36, 100, 60, 73, 166, 59, 62, 132, 50, 75, 62, 149, 177, 168, 61, 211, 51, 127, 62, 76, 112, 45, 190, 2, 126, 241, 189, 73, 246, 19, 62, 115, 43, 2, 61, 85, 95, 185, 190, 61, 98, 170, 60, 7, 201, 55, 61, 161, 189, 232, 189, 211, 66, 169, 60, 85, 231, 211, 189, 102, 166, 69, 190, 180, 204, 127, 190, 165, 241, 7, 189, 6, 228, 61, 189, 2, 84, 6, 189, 4, 5, 77, 190, 141, 172, 151, 189, 93, 145, 185, 189, 86, 0, 241, 188, 23, 36, 145, 61, 54, 51, 162, 189, 18, 152, 78, 188, 116, 244, 23, 190, 1, 15, 49, 190, 253, 224, 167, 60, 100, 170, 28, 62, 48, 202, 118, 190, 10, 240, 37, 190, 18, 172, 84, 62, 210, 54, 142, 62, 130, 81, 0, 62, 167, 134, 119, 62, 152, 224, 124, 62, 171, 81, 86, 61, 254, 220, 144, 61, 74, 52, 172, 189, 119, 101, 9, 190, 78, 18, 135, 60, 117, 13, 135, 62, 10, 213, 157, 189, 140, 252, 1, 189, 21, 156, 142, 188, 169, 24, 162, 189, 73, 52, 197, 61, 186, 211, 81, 190, 71, 27, 250, 189, 125, 26, 143, 61, 228, 131, 73, 189, 119, 99, 253, 187, 53, 51, 6, 61, 167, 82, 20, 62, 220, 66, 81, 190, 94, 190, 253, 188, 255, 254, 184, 61, 200, 75, 44, 60, 16, 154, 66, 190, 125, 248, 148, 190, 123, 101, 22, 62, 207, 140, 158, 190, 195, 129, 111, 189, 178, 4, 233, 60, 156, 58, 54, 62, 199, 254, 35, 62, 206, 140, 130, 60, 228, 21, 214, 188, 244, 224, 9, 190, 217, 203, 174, 190, 125, 181, 211, 61, 131, 98, 208, 61, 59, 139, 198, 189, 40, 141, 60, 61, 202, 205, 59, 61, 52, 163, 145, 60, 41, 113, 71, 190, 247, 223, 182, 189, 106, 132, 124, 62, 86, 173, 149, 189, 88, 209, 65, 190, 183, 159, 85, 189, 132, 141, 69, 189, 226, 2, 48, 62, 59, 38, 142, 189, 50, 254, 236, 61, 160, 172, 176, 189, 126, 175, 154, 190, 195, 238, 209, 61, 49, 73, 137, 189, 94, 51, 55, 190, 232, 83, 40, 62, 156, 228, 115, 61, 123, 99, 191, 62, 230, 215, 191, 189, 249, 13, 9, 62, 162, 165, 139, 189, 222, 212, 58, 190, 113, 254, 124, 190, 98, 87, 197, 61, 22, 13, 86, 61, 122, 223, 164, 60, 89, 176, 27, 190, 138, 165, 9, 62, 151, 87, 227, 188, 51, 215, 161, 190, 44, 213, 111, 61, 27, 254, 16, 62, 186, 30, 150, 190, 201, 208, 14, 62, 30, 239, 210, 61, 100, 215, 194, 61, 199, 67, 191, 189, 176, 22, 98, 62, 155, 116, 86, 188, 218, 27, 53, 61, 35, 150, 132, 190, 188, 0, 51, 62, 36, 213, 87, 62, 127, 215, 66, 62, 246, 160, 206, 60, 116, 199, 96, 62, 58, 97, 55, 190, 240, 161, 182, 62, 132, 156, 19, 57, 45, 98, 235, 62, 210, 97, 224, 188, 234, 121, 127, 61, 255, 111, 22, 190, 109, 110, 164, 189, 35, 230, 150, 190, 29, 84, 141, 189, 25, 96, 16, 190, 6, 55, 160, 61, 114, 55, 57, 190, 177, 40, 137, 62, 250, 34, 148, 189, 157, 192, 140, 190, 112, 30, 212, 61, 103, 149, 48, 190, 80, 112, 216, 58, 229, 190, 237, 189, 124, 27, 40, 190, 36, 173, 49, 190, 45, 183, 92, 62, 169, 124, 88, 62, 191, 234, 170, 188, 174, 247, 57, 190, 41, 92, 47, 187, 122, 177, 165, 188, 90, 170, 217, 189, 213, 46, 6, 60, 44, 216, 251, 190, 232, 155, 167, 62, 213, 38, 78, 61, 254, 69, 172, 61, 212, 160, 77, 62, 83, 202, 3, 188, 42, 78, 8, 61, 227, 188, 192, 61, 163, 81, 203, 61, 18, 246, 205, 188, 251, 73, 209, 60, 45, 186, 167, 61, 142, 29, 80, 189, 35, 54, 199, 189, 119, 28, 239, 189, 173, 21, 59, 190, 105, 112, 108, 190, 114, 51, 133, 61, 215, 69, 20, 188, 185, 17, 180, 61, 199, 191, 237, 61, 33, 64, 129, 190, 232, 72, 158, 189, 88, 237, 5, 190, 15, 162, 169, 61, 144, 130, 143, 189, 186, 182, 142, 189, 45, 53, 162, 189, 240, 214, 25, 62, 212, 81, 190, 188, 21, 201, 112, 187, 70, 160, 16, 189, 54, 253, 8, 190, 205, 153, 87, 62, 181, 251, 201, 189, 83, 62, 67, 190, 145, 244, 239, 61, 33, 250, 218, 188, 0, 128, 23, 190, 86, 11, 13, 62, 115, 183, 237, 60, 184, 39, 12, 61, 32, 34, 192, 189, 52, 127, 159, 189, 126, 58, 171, 188, 42, 22, 7, 62, 58, 216, 28, 190, 102, 63, 147, 60, 9, 84, 146, 189, 139, 150, 253, 61, 169, 81, 9, 62, 41, 3, 56, 190, 192, 197, 104, 189, 129, 50, 131, 61, 93, 188, 143, 61, 74, 21, 31, 62, 83, 57, 224, 61, 203, 238, 18, 62, 60, 231, 224, 189, 230, 51, 210, 189, 54, 54, 29, 190, 46, 163, 247, 189, 80, 114, 181, 189, 112, 77, 199, 189, 153, 234, 220, 60, 79, 43, 217, 189, 216, 81, 173, 61, 156, 48, 254, 189, 239, 30, 156, 189, 198, 159, 75, 190, 17, 70, 174, 189, 10, 219, 65, 189, 43, 223, 81, 190, 208, 166, 62, 61, 146, 204, 43, 189, 115, 91, 31, 190, 129, 196, 185, 60, 81, 229, 40, 190, 151, 148, 40, 61, 210, 188, 193, 189, 172, 221, 3, 189, 24, 49, 226, 188, 163, 70, 5, 189, 150, 82, 113, 61, 224, 177, 5, 62, 159, 232, 212, 61, 213, 217, 224, 189, 106, 133, 67, 61, 105, 134, 117, 189, 125, 163, 30, 61, 130, 76, 169, 61, 131, 62, 159, 61, 147, 206, 213, 189, 62, 131, 171, 61, 75, 205, 201, 60, 92, 27, 122, 189, 26, 210, 219, 61, 83, 17, 33, 62, 108, 108, 219, 189, 57, 199, 149, 189, 76, 171, 208, 189, 45, 242, 19, 62, 202, 194, 46, 190, 0, 214, 44, 59, 183, 184, 39, 190, 251, 247, 48, 190, 87, 64, 209, 189, 196, 99, 14, 190, 67, 7, 254, 189, 112, 138, 44, 190, 78, 93, 146, 189, 197, 39, 206, 61, 18, 43, 193, 188, 243, 43, 183, 60, 226, 212, 23, 62, 25, 106, 217, 60, 88, 36, 4, 190, 54, 217, 36, 190, 234, 170, 130, 61, 182, 71, 199, 189, 49, 23, 109, 60, 201, 123, 249, 189, 77, 115, 24, 190, 205, 216, 202, 186, 240, 201, 71, 61, 66, 51, 229, 189, 106, 65, 148, 61, 82, 207, 244, 189, 76, 135, 3, 62, 209, 173, 47, 189, 102, 155, 39, 190, 15, 99, 7, 61, 192, 71, 13, 190, 52, 79, 101, 61, 21, 165, 32, 190, 241, 58, 224, 61, 252, 14, 66, 187, 219, 236, 138, 61, 41, 123, 62, 190, 38, 80, 136, 62, 223, 81, 36, 190, 106, 77, 134, 186, 72, 175, 8, 187, 111, 237, 132, 62, 69, 127, 222, 61, 26, 219, 4, 62, 26, 58, 68, 60, 199, 108, 43, 61, 136, 205, 184, 189, 91, 26, 115, 189, 111, 28, 141, 190, 207, 81, 42, 186, 218, 4, 4, 62, 90, 51, 0, 62, 98, 88, 218, 61, 245, 90, 251, 189, 118, 40, 75, 189, 93, 102, 23, 190, 146, 28, 180, 61, 37, 42, 32, 190, 40, 146, 51, 190, 153, 48, 15, 190, 176, 245, 162, 61, 151, 107, 35, 190, 33, 115, 176, 61, 36, 63, 250, 189, 10, 184, 10, 189, 66, 37, 35, 60, 215, 161, 175, 189, 215, 6, 148, 189, 178, 251, 72, 60, 79, 53, 79, 189, 109, 203, 199, 61, 88, 29, 53, 190, 226, 252, 0, 190, 11, 100, 12, 62, 141, 65, 224, 61, 172, 27, 19, 62, 130, 163, 57, 190, 118, 56, 96, 61, 91, 12, 201, 61, 85, 232, 250, 189, 203, 27, 238, 58, 111, 153, 214, 189, 121, 67, 14, 190, 129, 9, 74, 60, 254, 232, 124, 189, 25, 2, 189, 189, 225, 146, 18, 62, 144, 35, 16, 62, 12, 248, 230, 188, 29, 254, 173, 60, 120, 13, 255, 189, 201, 217, 41, 62, 1, 11, 70, 60, 84, 45, 166, 189, 192, 133, 147, 62, 185, 44, 55, 62, 198, 196, 185, 60, 73, 236, 155, 189, 124, 54, 210, 60, 85, 9, 166, 188, 76, 115, 4, 189, 79, 141, 136, 62, 107, 235, 223, 189, 13, 219, 148, 61, 117, 110, 20, 190, 251, 42, 138, 189, 162, 198, 43, 190, 113, 78, 19, 62, 186, 163, 95, 61, 37, 3, 42, 62, 123, 255, 30, 189, 161, 77, 208, 189, 247, 61, 101, 190, 95, 169, 18, 62, 205, 127, 133, 189, 213, 159, 219, 61, 234, 97, 3, 190, 159, 30, 33, 190, 2, 36, 49, 59, 170, 34, 195, 61, 48, 123, 43, 62, 184, 240, 158, 190, 10, 124, 159, 190, 107, 127, 55, 62, 14, 19, 235, 61, 253, 80, 238, 61, 181, 241, 161, 189, 92, 99, 183, 61, 30, 66, 0, 190, 43, 255, 253, 189, 12, 188, 169, 189, 209, 175, 166, 61, 33, 113, 3, 62, 219, 176, 93, 189, 78, 134, 56, 62, 206, 68, 141, 60, 168, 51, 244, 61, 222, 194, 58, 190, 157, 13, 74, 61, 204, 180, 20, 190, 159, 116, 16, 61, 225, 5, 171, 61, 82, 208, 59, 190, 89, 52, 185, 58, 115, 210, 133, 61, 196, 140, 122, 61, 178, 121, 99, 189, 28, 98, 233, 61, 18, 98, 45, 62, 229, 96, 11, 190, 177, 30, 154, 61, 75, 101, 254, 188, 191, 243, 54, 62, 159, 240, 24, 62, 145, 80, 194, 189, 207, 207, 233, 189, 40, 169, 7, 187, 127, 66, 181, 189, 214, 213, 104, 62, 174, 197, 226, 60, 232, 52, 58, 59, 158, 121, 18, 60, 228, 180, 95, 62, 196, 239, 43, 62, 166, 98, 56, 62, 166, 140, 0, 62, 68, 211, 91, 189, 249, 89, 30, 190, 144, 12, 240, 60, 46, 194, 223, 61, 139, 156, 9, 60, 139, 230, 40, 62, 105, 85, 212, 187, 215, 248, 62, 190, 103, 229, 225, 188, 11, 61, 51, 190, 84, 97, 71, 62, 87, 93, 87, 189, 65, 244, 126, 189, 235, 116, 51, 190, 224, 35, 116, 190, 3, 128, 150, 61, 166, 223, 0, 62, 152, 131, 236, 189, 172, 15, 245, 60, 247, 188, 90, 190, 73, 222, 103, 62, 47, 148, 74, 190, 14, 154, 69, 190, 191, 27, 54, 190, 61, 50, 229, 189, 235, 53, 209, 189, 80, 0, 168, 189, 92, 117, 239, 61, 233, 112, 176, 189, 218, 103, 172, 61, 103, 93, 188, 189, 169, 45, 186, 61, 80, 248, 181, 189, 222, 88, 190, 61, 1, 240, 8, 62, 83, 202, 77, 190, 132, 118, 202, 61, 133, 117, 98, 62, 72, 78, 184, 187, 31, 36, 111, 190, 95, 32, 218, 189, 204, 188, 37, 189, 199, 140, 244, 60, 188, 105, 231, 61, 109, 12, 82, 189, 130, 219, 122, 189, 31, 167, 185, 59, 244, 200, 67, 190, 12, 170, 167, 189, 118, 255, 69, 61, 132, 215, 178, 188, 49, 71, 54, 60, 21, 113, 57, 190, 70, 53, 246, 61, 79, 241, 213, 189, 95, 120, 171, 189, 60, 118, 133, 189, 247, 161, 66, 61, 42, 12, 66, 62, 53, 176, 62, 190, 12, 83, 5, 190, 195, 148, 6, 61, 180, 96, 50, 189, 44, 37, 26, 62, 122, 19, 253, 188, 210, 12, 73, 62, 220, 185, 170, 188, 0, 68, 18, 188, 140, 193, 209, 59, 208, 112, 10, 61, 125, 61, 72, 190, 100, 116, 81, 60, 208, 144, 101, 188, 36, 23, 42, 186, 204, 40, 164, 189, 53, 34, 165, 189, 148, 82, 54, 62, 39, 155, 34, 60, 59, 101, 228, 187, 244, 0, 130, 61, 63, 22, 7, 62, 170, 186, 37, 60, 120, 243, 133, 189, 210, 177, 17, 190, 239, 127, 7, 190, 42, 47, 199, 189, 7, 94, 114, 189, 6, 119, 108, 188, 67, 38, 49, 61, 77, 116, 122, 187, 146, 181, 68, 61, 103, 99, 25, 188, 138, 92, 227, 189, 86, 206, 13, 189, 183, 137, 29, 62, 239, 161, 197, 188, 146, 22, 193, 189, 39, 208, 82, 61, 71, 154, 103, 189, 218, 46, 135, 188, 104, 121, 212, 188, 2, 152, 150, 189, 242, 97, 22, 62, 30, 49, 108, 189, 165, 218, 253, 189, 220, 129, 167, 61, 166, 7, 135, 188, 94, 241, 49, 61, 40, 200, 61, 188, 111, 80, 224, 61, 20, 222, 234, 189, 116, 102, 226, 189, 129, 51, 202, 187, 20, 217, 52, 61, 49, 139, 39, 62, 128, 135, 36, 61, 188, 143, 90, 61, 229, 21, 175, 60, 101, 91, 23, 190, 93, 53, 173, 189, 63, 67, 193, 61, 118, 178, 41, 188, 92, 120, 228, 60, 37, 156, 211, 61, 100, 86, 76, 62, 62, 166, 95, 189, 115, 212, 226, 61, 55, 223, 4, 62, 25, 116, 216, 61, 71, 164, 201, 61, 101, 250, 20, 190, 71, 89, 101, 190, 31, 25, 4, 62, 65, 118, 2, 190, 118, 152, 241, 189, 213, 183, 66, 189, 29, 191, 147, 187, 178, 3, 27, 186, 30, 84, 108, 61, 118, 213, 39, 62, 56, 217, 58, 188, 115, 225, 174, 61, 218, 229, 225, 189, 135, 224, 48, 62, 206, 97, 151, 61, 232, 19, 40, 190, 56, 79, 26, 62, 45, 202, 64, 190, 210, 23, 19, 60, 120, 177, 134, 61, 7, 219, 19, 62, 154, 113, 93, 190, 165, 193, 127, 60, 64, 217, 219, 189, 212, 27, 225, 189, 143, 40, 3, 62, 132, 36, 111, 190, 222, 45, 24, 62, 209, 203, 181, 60, 153, 115, 249, 189, 177, 2, 150, 61, 63, 58, 187, 61, 183, 250, 54, 190, 70, 162, 238, 58, 119, 109, 187, 61, 38, 227, 117, 189, 69, 155, 0, 190, 14, 140, 8, 62, 103, 53, 42, 190, 248, 185, 191, 61, 120, 159, 186, 60, 195, 78, 36, 189, 43, 252, 99, 61, 192, 90, 220, 61, 87, 172, 68, 62, 115, 79, 58, 62, 5, 147, 213, 189, 224, 252, 15, 190, 152, 17, 108, 60, 146, 143, 138, 61, 118, 181, 26, 190, 197, 26, 203, 61, 182, 32, 13, 190, 32, 114, 196, 189, 116, 178, 5, 62, 188, 172, 174, 61, 167, 31, 82, 61, 181, 226, 80, 189, 98, 16, 223, 61, 100, 104, 158, 189, 81, 75, 8, 189, 27, 33, 136, 189, 150, 244, 159, 61, 24, 15, 172, 61, 39, 117, 207, 61, 181, 49, 231, 189, 51, 108, 95, 62, 40, 18, 247, 61, 148, 85, 166, 189, 193, 148, 216, 189, 253, 67, 43, 61, 23, 175, 27, 62, 23, 39, 21, 189, 69, 217, 123, 189, 168, 226, 60, 190, 16, 94, 5, 189, 188, 183, 164, 61, 92, 128, 225, 61, 197, 212, 41, 190, 67, 2, 52, 62, 116, 236, 69, 61, 97, 144, 73, 190, 216, 165, 1, 62, 234, 236, 30, 62, 118, 103, 49, 62, 179, 129, 237, 189, 112, 113, 0, 61, 72, 75, 227, 189, 26, 73, 73, 61, 200, 123, 233, 60, 124, 228, 42, 189, 181, 24, 250, 189, 97, 186, 78, 189, 136, 131, 177, 189, 243, 243, 9, 190, 103, 150, 158, 189, 132, 212, 205, 188, 150, 32, 21, 190, 238, 129, 53, 60, 226, 253, 3, 190, 11, 14, 46, 190, 87, 57, 135, 189, 7, 81, 169, 61, 49, 110, 29, 61, 222, 79, 26, 61, 58, 1, 246, 188, 243, 233, 37, 62, 79, 26, 185, 61, 249, 247, 40, 190, 148, 145, 197, 188, 171, 176, 42, 190, 151, 170, 181, 59, 146, 188, 35, 190, 76, 153, 130, 189, 255, 223, 19, 190, 41, 185, 114, 61, 201, 166, 175, 61, 174, 180, 184, 61, 1, 50, 19, 190, 88, 151, 98, 189, 107, 178, 57, 190, 166, 2, 222, 189, 137, 196, 123, 189, 186, 25, 111, 61, 206, 253, 191, 60, 49, 147, 17, 190, 76, 44, 94, 189, 136, 111, 82, 190, 165, 223, 128, 60, 17, 50, 152, 61, 114, 132, 149, 60, 146, 190, 224, 60, 6, 31, 19, 190, 142, 196, 38, 190, 12, 195, 222, 186, 143, 131, 9, 61, 74, 188, 171, 61, 117, 181, 7, 60, 163, 174, 181, 188, 17, 184, 214, 188, 155, 61, 45, 61, 118, 0, 41, 190, 26, 40, 9, 62, 25, 32, 125, 60, 255, 240, 235, 189, 89, 156, 217, 61, 179, 62, 36, 62, 16, 80, 56, 190, 97, 159, 41, 62, 112, 119, 255, 189, 165, 36, 245, 187, 202, 168, 70, 190, 184, 10, 30, 62, 98, 120, 26, 62, 3, 182, 72, 62, 224, 55, 12, 62, 136, 69, 48, 62, 237, 142, 90, 62, 242, 175, 41, 190, 170, 93, 60, 62, 26, 9, 179, 59, 25, 250, 42, 188, 80, 234, 57, 61, 213, 164, 59, 62, 46, 126, 54, 189, 150, 4, 29, 190, 171, 45, 165, 60, 238, 101, 197, 188, 52, 63, 224, 189, 66, 241, 202, 61, 76, 20, 55, 189, 123, 24, 131, 189, 189, 149, 94, 189, 196, 212, 74, 61, 46, 1, 41, 190, 114, 132, 9, 189, 224, 230, 9, 190, 77, 58, 210, 189, 154, 86, 32, 62, 64, 85, 152, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 62, 123, 62, 114, 203, 47, 62, 14, 166, 164, 62, 241, 199, 120, 61, 204, 59, 208, 60, 5, 50, 44, 190, 54, 113, 9, 62, 19, 241, 38, 190, 106, 232, 210, 189, 14, 219, 26, 62, 181, 237, 163, 60, 49, 247, 113, 62, 140, 58, 12, 62, 138, 199, 90, 61, 26, 19, 33, 190, 34, 151, 19, 190, 61, 49, 56, 190, 33, 17, 29, 190, 221, 54, 153, 62, 6, 147, 12, 189, 231, 120, 221, 61, 82, 202, 129, 190, 230, 30, 68, 189, 105, 36, 191, 186, 30, 84, 171, 187, 7, 113, 56, 190, 160, 66, 12, 190, 118, 58, 101, 190, 57, 47, 146, 189, 44, 63, 169, 61, 7, 204, 179, 189, 131, 10, 237, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 58, 230, 62, 31, 71, 81, 190, 235, 37, 171, 190, 77, 118, 132, 62, 50, 67, 91, 61, 41, 191, 93, 61, 105, 150, 176, 62, 212, 175, 93, 61, 29, 242, 220, 189, 7, 81, 213, 190, 107, 106, 158, 62, 117, 19, 120, 62, 93, 64, 158, 190, 113, 130, 213, 190, 52, 117, 109, 62, 162, 11, 198, 188, 60, 45, 159, 61, 76, 139, 186, 188, 67, 217, 183, 189, 103, 101, 224, 189, 100, 229, 187, 62, 90, 13, 212, 60, 59, 172, 88, 62, 76, 180, 10, 189, 210, 126, 197, 61, 39, 133, 35, 188, 97, 219, 44, 190, 38, 249, 55, 61, 238, 141, 215, 189, 28, 112, 38, 61, 186, 150, 240, 189, 65, 40, 143, 61, 239, 74, 101, 61, 22, 89, 205, 188, 119, 47, 199, 189, 184, 16, 0, 60, 147, 160, 80, 190, 128, 20, 192, 61, 255, 188, 243, 189, 50, 186, 229, 61, 70, 93, 80, 61, 167, 183, 83, 62, 22, 2, 253, 189, 222, 94, 185, 189, 157, 13, 235, 189, 140, 104, 42, 190, 86, 47, 9, 62, 26, 35, 63, 188, 123, 163, 88, 61, 221, 75, 165, 189, 136, 91, 76, 190, 6, 43, 243, 61, 45, 139, 172, 188, 58, 38, 21, 62, 224, 83, 231, 189, 130, 159, 234, 188, 150, 192, 186, 189, 142, 27, 55, 62, 64, 88, 178, 61, 58, 240, 123, 61, 12, 18, 25, 190, 76, 235, 18, 62, 58, 36, 254, 61, 219, 218, 28, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 87, 113, 187, 204, 195, 250, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {111, 103, 153, 62, 58, 249, 35, 64, 233, 184, 126, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {29, 46, 56, 192, 73, 118, 168, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0032/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}