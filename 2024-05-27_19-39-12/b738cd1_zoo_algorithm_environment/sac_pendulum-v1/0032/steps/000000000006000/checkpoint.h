// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 112, 10, 191, 102, 130, 33, 63, 200, 48, 220, 190, 236, 255, 93, 188, 105, 255, 162, 62, 23, 155, 212, 190, 64, 117, 113, 62, 178, 164, 105, 62, 158, 87, 227, 190, 143, 39, 174, 190, 41, 218, 61, 63, 74, 10, 25, 190, 198, 15, 241, 189, 64, 72, 30, 190, 164, 93, 154, 190, 205, 242, 75, 190, 63, 115, 201, 189, 210, 210, 149, 62, 87, 239, 178, 189, 7, 141, 98, 191, 157, 130, 148, 62, 205, 142, 45, 191, 56, 192, 58, 191, 37, 7, 126, 188, 177, 173, 180, 60, 8, 140, 244, 190, 164, 116, 13, 63, 101, 82, 73, 63, 7, 242, 179, 189, 159, 32, 17, 191, 118, 216, 1, 62, 68, 171, 57, 63, 46, 17, 211, 62, 236, 0, 78, 190, 43, 29, 102, 189, 153, 85, 93, 191, 122, 113, 154, 60, 136, 117, 196, 189, 196, 152, 222, 62, 82, 192, 218, 190, 143, 138, 18, 63, 15, 165, 135, 189, 135, 179, 102, 190, 0, 63, 76, 191, 148, 113, 37, 63, 70, 16, 4, 63, 179, 178, 132, 191, 38, 211, 57, 189, 62, 232, 58, 189, 229, 21, 183, 63, 237, 91, 229, 62, 5, 94, 137, 62, 151, 194, 74, 62, 243, 127, 60, 62, 87, 175, 200, 190, 163, 41, 23, 191, 57, 146, 127, 190, 252, 228, 6, 63, 74, 37, 45, 191, 250, 221, 5, 190, 156, 116, 237, 190, 138, 227, 135, 63, 221, 187, 173, 62, 41, 242, 240, 62, 4, 71, 123, 190, 131, 227, 23, 63, 17, 103, 175, 190, 207, 133, 234, 190, 1, 47, 26, 191, 215, 194, 82, 63, 181, 75, 121, 62, 238, 123, 33, 63, 187, 234, 62, 63, 27, 173, 12, 63, 220, 50, 178, 62, 204, 25, 100, 61, 114, 173, 47, 63, 126, 230, 16, 63, 169, 67, 15, 63, 131, 30, 82, 191, 204, 105, 234, 190, 139, 229, 89, 63, 46, 210, 170, 61, 176, 110, 119, 62, 133, 93, 47, 62, 151, 200, 205, 62, 87, 7, 194, 62, 194, 165, 24, 191, 213, 238, 136, 190, 254, 94, 225, 190, 126, 27, 18, 191, 16, 151, 237, 189, 84, 23, 241, 62, 103, 114, 0, 62, 233, 18, 139, 63, 151, 191, 206, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 133, 181, 190, 37, 44, 40, 190, 90, 35, 128, 62, 137, 143, 147, 188, 149, 29, 14, 191, 137, 26, 6, 63, 120, 212, 214, 62, 154, 45, 13, 63, 17, 77, 185, 59, 36, 13, 71, 63, 162, 252, 31, 191, 255, 12, 223, 61, 55, 236, 180, 62, 71, 89, 211, 62, 248, 152, 110, 190, 186, 22, 137, 62, 175, 59, 249, 61, 185, 165, 3, 191, 62, 152, 222, 190, 193, 244, 246, 190, 101, 247, 39, 190, 101, 49, 21, 62, 250, 138, 159, 62, 78, 20, 28, 60, 77, 101, 125, 190, 239, 91, 206, 61, 200, 181, 17, 191, 41, 31, 111, 62, 82, 151, 143, 190, 233, 212, 237, 190, 86, 44, 57, 191, 86, 247, 5, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {158, 143, 235, 62, 219, 43, 203, 190, 64, 253, 85, 61, 113, 95, 24, 62, 225, 246, 144, 189, 177, 252, 116, 62, 161, 137, 149, 62, 190, 136, 147, 59, 248, 137, 142, 62, 16, 152, 95, 58, 155, 89, 59, 190, 137, 23, 148, 191, 116, 67, 74, 62, 62, 110, 242, 61, 197, 134, 207, 189, 140, 255, 19, 62, 96, 44, 222, 61, 158, 214, 175, 190, 27, 206, 11, 62, 181, 104, 235, 59, 126, 63, 146, 61, 141, 143, 106, 190, 8, 52, 166, 190, 221, 138, 172, 190, 190, 110, 161, 190, 82, 127, 62, 62, 123, 217, 177, 62, 233, 217, 175, 189, 41, 79, 166, 190, 227, 51, 137, 191, 138, 31, 93, 62, 179, 239, 20, 61, 109, 177, 159, 59, 52, 107, 137, 62, 109, 156, 118, 61, 253, 83, 173, 62, 251, 193, 121, 190, 170, 240, 67, 60, 248, 14, 90, 190, 24, 18, 107, 189, 172, 49, 140, 190, 182, 59, 206, 189, 152, 227, 215, 187, 20, 199, 148, 61, 0, 139, 12, 190, 58, 74, 237, 188, 35, 131, 252, 188, 30, 57, 95, 190, 72, 193, 173, 60, 206, 223, 132, 188, 65, 216, 22, 190, 128, 40, 158, 190, 198, 215, 233, 189, 112, 145, 125, 62, 201, 133, 4, 62, 32, 164, 223, 61, 130, 160, 153, 62, 151, 11, 140, 61, 71, 143, 162, 190, 87, 39, 111, 62, 232, 114, 39, 62, 131, 86, 106, 62, 220, 251, 98, 190, 149, 142, 33, 62, 123, 227, 42, 190, 43, 7, 72, 62, 152, 236, 248, 60, 232, 107, 123, 62, 143, 47, 25, 190, 208, 152, 19, 62, 87, 108, 204, 189, 154, 215, 38, 61, 145, 64, 157, 189, 138, 177, 48, 190, 89, 202, 29, 62, 198, 47, 83, 62, 250, 8, 89, 62, 223, 68, 18, 62, 104, 254, 33, 62, 59, 245, 187, 190, 235, 186, 159, 61, 230, 52, 247, 61, 128, 195, 140, 190, 237, 53, 206, 190, 170, 189, 72, 189, 27, 85, 187, 61, 255, 122, 115, 61, 119, 114, 17, 62, 167, 18, 148, 62, 34, 164, 5, 190, 55, 18, 174, 190, 229, 111, 167, 61, 65, 202, 116, 188, 254, 73, 69, 62, 83, 159, 131, 190, 214, 128, 24, 190, 144, 249, 249, 61, 110, 35, 130, 190, 205, 213, 22, 62, 247, 245, 43, 190, 210, 192, 68, 62, 108, 143, 57, 62, 87, 167, 197, 62, 34, 166, 124, 60, 213, 88, 254, 61, 131, 23, 53, 62, 185, 252, 149, 190, 182, 49, 149, 61, 171, 24, 242, 61, 147, 50, 200, 188, 146, 112, 32, 190, 121, 98, 174, 62, 185, 52, 162, 60, 136, 78, 56, 190, 7, 248, 115, 62, 60, 42, 222, 190, 134, 250, 182, 62, 63, 160, 245, 189, 252, 243, 134, 190, 12, 105, 198, 190, 186, 172, 197, 190, 234, 99, 92, 61, 64, 203, 48, 62, 7, 60, 255, 61, 206, 224, 129, 190, 201, 223, 104, 190, 56, 208, 233, 62, 33, 67, 7, 62, 251, 12, 186, 189, 108, 182, 131, 190, 240, 225, 7, 62, 237, 82, 190, 190, 215, 233, 11, 62, 47, 13, 81, 190, 217, 105, 192, 189, 240, 176, 155, 60, 44, 233, 25, 62, 6, 51, 253, 61, 111, 113, 0, 191, 249, 144, 180, 61, 2, 149, 30, 62, 34, 214, 130, 189, 228, 150, 216, 189, 99, 108, 149, 62, 35, 146, 33, 190, 59, 180, 111, 190, 115, 251, 227, 188, 189, 202, 17, 191, 246, 45, 99, 190, 41, 114, 152, 188, 236, 235, 110, 189, 9, 99, 124, 189, 216, 202, 220, 189, 254, 24, 16, 188, 69, 214, 31, 190, 219, 247, 182, 62, 102, 34, 15, 190, 195, 171, 245, 189, 117, 191, 238, 189, 28, 192, 50, 189, 228, 184, 178, 188, 96, 84, 139, 190, 82, 188, 246, 188, 170, 168, 107, 190, 156, 8, 158, 61, 78, 250, 38, 190, 193, 71, 113, 62, 8, 37, 37, 62, 67, 175, 90, 188, 189, 31, 85, 62, 159, 16, 251, 189, 100, 125, 98, 60, 58, 105, 46, 61, 52, 213, 208, 190, 108, 81, 186, 188, 125, 172, 13, 63, 193, 196, 177, 190, 201, 246, 144, 190, 233, 131, 77, 190, 74, 205, 185, 62, 46, 207, 71, 190, 181, 61, 254, 61, 124, 5, 51, 60, 186, 110, 28, 62, 57, 91, 175, 190, 89, 234, 99, 61, 229, 188, 152, 62, 70, 222, 242, 61, 204, 12, 48, 189, 112, 127, 103, 190, 122, 9, 121, 190, 149, 192, 182, 190, 25, 16, 1, 62, 156, 61, 67, 191, 229, 179, 213, 61, 96, 88, 142, 190, 128, 36, 17, 189, 36, 37, 144, 62, 159, 46, 177, 62, 46, 9, 55, 62, 198, 120, 125, 62, 118, 188, 190, 61, 31, 231, 181, 190, 90, 108, 29, 191, 85, 75, 234, 61, 224, 169, 16, 190, 218, 227, 136, 190, 61, 93, 0, 63, 72, 141, 88, 190, 255, 56, 156, 190, 211, 181, 178, 62, 212, 104, 225, 190, 25, 106, 207, 189, 60, 153, 164, 189, 246, 52, 118, 190, 26, 81, 166, 190, 74, 235, 96, 190, 59, 193, 169, 60, 166, 187, 166, 62, 10, 231, 133, 189, 42, 85, 49, 190, 78, 163, 100, 191, 3, 98, 109, 61, 6, 175, 9, 62, 179, 173, 67, 189, 49, 147, 42, 190, 76, 4, 227, 189, 51, 218, 147, 190, 226, 222, 44, 190, 222, 204, 12, 190, 204, 0, 252, 187, 43, 127, 4, 191, 28, 217, 28, 190, 57, 162, 64, 190, 6, 44, 102, 62, 197, 113, 65, 190, 244, 110, 240, 61, 166, 39, 61, 190, 235, 9, 131, 189, 75, 71, 45, 190, 147, 69, 96, 189, 13, 202, 203, 61, 252, 208, 202, 189, 164, 197, 159, 61, 233, 39, 170, 188, 106, 93, 87, 62, 230, 168, 25, 190, 161, 165, 107, 62, 205, 193, 89, 62, 175, 20, 24, 190, 107, 235, 77, 189, 72, 118, 47, 62, 109, 26, 6, 61, 169, 165, 222, 61, 31, 187, 144, 189, 139, 200, 21, 61, 206, 195, 133, 190, 204, 63, 91, 190, 32, 18, 6, 190, 255, 215, 9, 191, 153, 149, 1, 62, 124, 225, 54, 190, 63, 189, 6, 190, 203, 199, 190, 61, 40, 16, 224, 61, 86, 143, 228, 61, 198, 248, 64, 189, 35, 209, 117, 61, 158, 41, 125, 190, 185, 125, 60, 190, 161, 190, 123, 189, 174, 10, 103, 62, 51, 154, 21, 190, 230, 51, 194, 189, 77, 219, 161, 189, 156, 196, 208, 62, 123, 94, 144, 60, 27, 244, 225, 189, 5, 58, 150, 61, 41, 196, 85, 190, 165, 174, 65, 190, 155, 85, 212, 61, 97, 243, 98, 62, 254, 42, 107, 189, 25, 52, 160, 61, 24, 155, 147, 190, 3, 50, 0, 190, 207, 107, 8, 188, 161, 225, 52, 190, 238, 68, 158, 190, 10, 156, 88, 189, 11, 94, 46, 191, 163, 130, 44, 190, 170, 123, 112, 62, 9, 171, 110, 62, 38, 222, 126, 62, 56, 238, 133, 62, 159, 104, 252, 190, 27, 252, 134, 190, 184, 44, 158, 188, 158, 104, 73, 61, 213, 190, 41, 190, 220, 28, 220, 60, 2, 96, 141, 189, 17, 214, 35, 190, 255, 91, 25, 190, 3, 183, 60, 191, 184, 227, 242, 61, 216, 197, 24, 190, 199, 214, 56, 190, 235, 223, 147, 189, 189, 106, 147, 190, 192, 3, 244, 190, 43, 49, 193, 189, 109, 23, 123, 190, 57, 210, 205, 190, 120, 226, 88, 189, 17, 241, 118, 189, 241, 184, 10, 62, 152, 88, 64, 190, 194, 239, 17, 190, 142, 215, 214, 188, 182, 123, 77, 62, 169, 239, 172, 190, 83, 62, 147, 189, 186, 70, 65, 62, 223, 189, 142, 62, 146, 27, 112, 61, 180, 176, 154, 62, 104, 114, 143, 62, 152, 214, 165, 60, 236, 132, 6, 61, 132, 194, 101, 189, 97, 241, 102, 190, 17, 248, 154, 187, 90, 11, 152, 62, 103, 251, 2, 189, 236, 62, 194, 189, 152, 9, 185, 61, 90, 141, 198, 190, 29, 175, 61, 62, 120, 56, 81, 190, 143, 201, 38, 190, 57, 154, 154, 61, 116, 72, 11, 190, 89, 220, 109, 61, 143, 164, 28, 62, 137, 132, 134, 61, 66, 135, 92, 190, 1, 181, 56, 189, 45, 195, 237, 61, 197, 113, 178, 188, 63, 238, 246, 62, 102, 214, 157, 190, 247, 59, 15, 190, 155, 167, 78, 189, 109, 107, 23, 189, 146, 33, 177, 61, 33, 59, 51, 62, 190, 123, 181, 61, 240, 83, 137, 61, 26, 190, 202, 190, 48, 252, 101, 190, 232, 209, 162, 191, 162, 87, 22, 62, 190, 254, 154, 62, 176, 93, 34, 190, 106, 22, 4, 188, 147, 165, 12, 62, 120, 245, 181, 189, 252, 210, 231, 189, 152, 253, 0, 190, 103, 252, 175, 62, 251, 216, 212, 189, 98, 218, 236, 190, 236, 228, 146, 189, 157, 236, 38, 190, 24, 75, 127, 62, 26, 78, 57, 190, 74, 35, 185, 60, 67, 173, 22, 190, 161, 45, 152, 191, 232, 213, 212, 61, 43, 27, 15, 61, 84, 178, 122, 190, 82, 181, 0, 62, 219, 168, 166, 61, 218, 232, 101, 62, 24, 123, 205, 189, 215, 5, 184, 61, 93, 148, 92, 189, 65, 30, 148, 190, 50, 42, 169, 190, 192, 25, 75, 62, 126, 143, 12, 62, 174, 120, 43, 61, 142, 104, 49, 190, 7, 115, 190, 187, 24, 140, 56, 189, 89, 234, 78, 190, 86, 113, 161, 189, 146, 234, 130, 62, 188, 181, 1, 191, 134, 88, 218, 190, 93, 184, 9, 189, 255, 180, 69, 62, 26, 54, 162, 189, 250, 214, 189, 62, 193, 242, 61, 62, 203, 151, 129, 188, 4, 168, 177, 190, 59, 155, 209, 62, 48, 18, 146, 62, 92, 242, 136, 62, 63, 67, 226, 189, 43, 91, 12, 62, 23, 3, 90, 190, 229, 50, 187, 62, 196, 148, 255, 188, 220, 176, 164, 62, 190, 158, 166, 188, 26, 12, 183, 60, 57, 206, 8, 61, 169, 169, 111, 61, 47, 115, 233, 190, 248, 116, 134, 189, 205, 113, 92, 188, 255, 162, 250, 61, 236, 9, 16, 190, 82, 24, 50, 62, 69, 48, 183, 187, 100, 210, 235, 190, 82, 36, 165, 190, 178, 60, 9, 189, 150, 240, 187, 187, 206, 33, 3, 190, 7, 91, 36, 191, 1, 142, 41, 62, 105, 48, 146, 62, 183, 192, 20, 63, 119, 0, 156, 62, 238, 192, 190, 190, 59, 101, 198, 189, 209, 120, 143, 62, 83, 181, 138, 61, 137, 26, 6, 62, 171, 133, 107, 191, 185, 160, 190, 61, 151, 72, 40, 61, 194, 171, 188, 61, 42, 159, 71, 62, 55, 114, 5, 62, 171, 46, 25, 188, 112, 68, 140, 62, 142, 23, 214, 61, 31, 2, 184, 187, 212, 130, 154, 60, 250, 223, 209, 61, 150, 123, 173, 190, 146, 241, 5, 190, 136, 201, 41, 190, 247, 43, 42, 189, 141, 29, 127, 191, 188, 41, 143, 62, 75, 134, 214, 62, 221, 156, 9, 190, 63, 133, 236, 61, 82, 233, 3, 191, 89, 240, 45, 62, 251, 238, 28, 191, 101, 135, 182, 61, 75, 227, 179, 190, 71, 120, 61, 190, 34, 67, 138, 61, 171, 231, 66, 62, 87, 47, 82, 61, 151, 13, 231, 190, 51, 249, 2, 190, 44, 182, 135, 60, 136, 253, 21, 63, 194, 94, 119, 190, 19, 179, 199, 189, 249, 21, 15, 190, 174, 137, 246, 59, 99, 73, 87, 190, 208, 217, 219, 62, 165, 176, 188, 62, 199, 4, 183, 62, 167, 182, 161, 190, 9, 0, 199, 190, 126, 58, 171, 188, 92, 69, 27, 62, 212, 180, 231, 188, 155, 8, 106, 62, 218, 37, 116, 62, 210, 14, 127, 61, 236, 86, 97, 191, 41, 3, 56, 190, 9, 25, 148, 190, 182, 94, 28, 63, 175, 202, 7, 191, 229, 58, 134, 62, 161, 7, 156, 62, 141, 51, 181, 190, 29, 176, 66, 190, 1, 163, 104, 191, 79, 77, 183, 190, 80, 55, 250, 190, 109, 60, 16, 190, 140, 209, 55, 62, 254, 119, 18, 191, 127, 154, 241, 190, 216, 81, 173, 61, 69, 253, 50, 190, 167, 106, 17, 190, 152, 198, 243, 190, 17, 70, 174, 189, 183, 4, 236, 189, 138, 242, 131, 190, 212, 92, 152, 190, 110, 141, 90, 189, 209, 117, 215, 190, 127, 35, 199, 61, 71, 214, 74, 190, 19, 50, 133, 60, 106, 19, 245, 190, 133, 31, 247, 187, 174, 201, 186, 189, 171, 36, 138, 189, 31, 20, 51, 62, 224, 177, 5, 62, 159, 232, 212, 61, 18, 23, 52, 190, 27, 42, 198, 61, 105, 134, 117, 189, 84, 109, 225, 61, 162, 194, 55, 62, 153, 236, 86, 61, 147, 206, 213, 189, 53, 243, 17, 62, 240, 63, 181, 61, 92, 27, 122, 189, 211, 219, 202, 188, 84, 235, 202, 61, 61, 148, 219, 189, 7, 185, 161, 189, 76, 171, 208, 189, 103, 249, 5, 62, 202, 194, 46, 190, 137, 219, 30, 188, 88, 72, 40, 190, 1, 171, 52, 190, 243, 126, 210, 189, 196, 99, 14, 190, 67, 7, 254, 189, 211, 74, 48, 190, 211, 45, 158, 189, 81, 48, 165, 61, 18, 43, 193, 188, 243, 43, 183, 60, 117, 182, 3, 62, 25, 106, 217, 60, 88, 36, 4, 190, 54, 217, 36, 190, 252, 122, 90, 61, 182, 71, 199, 189, 188, 129, 18, 60, 41, 244, 249, 189, 82, 52, 25, 190, 147, 135, 90, 188, 240, 201, 71, 61, 126, 53, 233, 189, 106, 65, 148, 61, 2, 43, 245, 189, 76, 135, 3, 62, 7, 8, 145, 189, 130, 154, 48, 190, 140, 49, 233, 60, 213, 152, 8, 190, 114, 49, 168, 189, 46, 66, 0, 190, 214, 170, 219, 61, 245, 252, 28, 62, 89, 142, 94, 62, 11, 117, 162, 190, 13, 235, 155, 62, 72, 197, 52, 60, 22, 4, 245, 60, 73, 209, 175, 61, 161, 34, 53, 62, 226, 48, 2, 62, 57, 195, 252, 61, 233, 209, 251, 190, 145, 165, 92, 62, 94, 27, 167, 189, 165, 41, 123, 190, 69, 173, 94, 191, 183, 175, 107, 62, 40, 207, 78, 62, 1, 244, 231, 62, 129, 199, 0, 63, 59, 252, 166, 190, 213, 161, 220, 189, 193, 219, 35, 62, 191, 164, 120, 62, 19, 101, 123, 189, 152, 184, 232, 190, 225, 70, 179, 190, 176, 245, 162, 61, 105, 88, 38, 190, 244, 22, 142, 61, 136, 199, 251, 189, 10, 184, 10, 189, 65, 77, 222, 188, 133, 150, 246, 189, 109, 8, 154, 189, 213, 144, 97, 188, 133, 249, 27, 189, 236, 71, 178, 61, 249, 226, 73, 190, 66, 84, 34, 190, 157, 30, 2, 62, 68, 8, 165, 61, 36, 165, 223, 61, 236, 212, 83, 190, 141, 250, 75, 61, 91, 12, 201, 61, 85, 232, 250, 189, 188, 20, 248, 187, 75, 90, 12, 190, 139, 224, 26, 190, 102, 242, 180, 188, 243, 251, 211, 189, 156, 75, 250, 189, 214, 141, 18, 62, 46, 64, 201, 61, 8, 138, 70, 189, 29, 254, 173, 60, 120, 13, 255, 189, 87, 192, 3, 62, 244, 15, 148, 59, 1, 168, 44, 189, 251, 196, 139, 62, 224, 237, 145, 62, 172, 141, 15, 188, 163, 158, 204, 189, 44, 246, 21, 60, 101, 41, 28, 61, 94, 67, 70, 189, 97, 252, 114, 62, 247, 54, 158, 190, 95, 131, 201, 61, 94, 60, 95, 190, 165, 97, 250, 187, 166, 67, 174, 188, 64, 101, 220, 62, 254, 252, 180, 61, 68, 4, 69, 61, 27, 130, 149, 188, 112, 164, 195, 190, 253, 90, 211, 190, 162, 212, 126, 62, 65, 27, 53, 189, 135, 9, 29, 62, 177, 120, 83, 190, 84, 97, 106, 190, 108, 189, 63, 61, 85, 202, 183, 61, 197, 41, 78, 61, 205, 122, 170, 190, 85, 33, 79, 191, 6, 36, 85, 62, 14, 19, 235, 61, 74, 194, 8, 62, 153, 62, 219, 189, 73, 234, 75, 190, 30, 66, 0, 190, 45, 79, 6, 190, 94, 234, 61, 189, 70, 204, 86, 62, 249, 183, 37, 62, 37, 62, 15, 190, 127, 25, 83, 62, 223, 251, 149, 60, 158, 254, 17, 62, 149, 23, 213, 190, 116, 167, 243, 61, 81, 5, 173, 189, 245, 40, 21, 60, 31, 163, 220, 61, 81, 227, 60, 190, 117, 86, 15, 62, 79, 215, 80, 61, 129, 161, 1, 62, 209, 182, 209, 189, 175, 72, 59, 62, 68, 118, 98, 62, 243, 37, 7, 190, 132, 136, 170, 61, 233, 31, 39, 61, 128, 31, 105, 62, 159, 240, 24, 62, 47, 55, 206, 189, 58, 144, 29, 190, 160, 183, 19, 61, 17, 51, 15, 190, 192, 122, 141, 62, 235, 230, 145, 61, 36, 45, 50, 188, 124, 52, 185, 60, 249, 239, 61, 62, 17, 184, 22, 62, 26, 52, 81, 62, 217, 88, 65, 62, 108, 225, 40, 190, 243, 161, 83, 190, 140, 74, 25, 61, 193, 221, 67, 62, 121, 194, 166, 189, 166, 104, 82, 62, 245, 101, 84, 62, 34, 208, 169, 190, 37, 75, 127, 61, 199, 204, 18, 191, 107, 72, 150, 62, 34, 135, 226, 189, 187, 215, 204, 189, 74, 198, 87, 190, 185, 210, 178, 190, 162, 208, 23, 62, 223, 212, 50, 62, 162, 168, 201, 189, 70, 76, 143, 189, 140, 246, 165, 190, 2, 216, 125, 62, 85, 82, 65, 189, 15, 238, 170, 190, 193, 227, 168, 190, 162, 109, 163, 190, 223, 82, 241, 190, 174, 53, 52, 190, 122, 78, 128, 62, 37, 237, 7, 61, 205, 139, 169, 62, 184, 111, 39, 188, 163, 65, 182, 190, 61, 32, 170, 190, 156, 239, 48, 190, 158, 27, 102, 62, 32, 24, 35, 190, 182, 180, 51, 62, 225, 208, 0, 62, 103, 226, 15, 62, 16, 68, 30, 191, 11, 40, 39, 191, 54, 74, 201, 189, 100, 226, 145, 62, 25, 136, 220, 189, 202, 155, 163, 190, 217, 223, 6, 191, 80, 33, 17, 191, 93, 16, 36, 190, 105, 221, 126, 190, 135, 202, 54, 191, 244, 27, 78, 190, 238, 242, 9, 61, 70, 52, 244, 61, 177, 82, 60, 62, 28, 88, 85, 190, 219, 46, 45, 190, 231, 195, 204, 189, 132, 209, 196, 189, 22, 134, 39, 62, 15, 24, 148, 189, 83, 103, 61, 189, 235, 190, 170, 61, 195, 120, 212, 189, 97, 123, 23, 62, 161, 218, 179, 190, 172, 66, 16, 62, 124, 211, 26, 189, 96, 11, 225, 189, 73, 0, 61, 61, 115, 9, 82, 62, 44, 187, 47, 190, 141, 44, 146, 190, 59, 0, 95, 60, 24, 86, 188, 190, 176, 23, 155, 190, 178, 53, 34, 189, 166, 240, 20, 62, 50, 94, 203, 61, 228, 90, 1, 62, 3, 169, 27, 61, 59, 28, 26, 62, 15, 137, 93, 62, 113, 34, 72, 190, 151, 67, 56, 190, 147, 192, 168, 190, 113, 58, 58, 59, 210, 166, 80, 189, 45, 242, 68, 189, 126, 180, 61, 190, 56, 100, 2, 190, 113, 201, 43, 61, 104, 241, 16, 189, 107, 99, 29, 190, 89, 158, 137, 190, 192, 31, 10, 62, 69, 196, 196, 189, 34, 197, 174, 189, 153, 43, 220, 189, 84, 45, 127, 189, 86, 206, 54, 190, 211, 24, 192, 189, 223, 66, 228, 188, 166, 196, 18, 62, 252, 174, 154, 187, 165, 218, 253, 189, 124, 184, 85, 62, 104, 42, 11, 190, 115, 199, 168, 61, 177, 5, 229, 189, 17, 103, 79, 62, 189, 114, 97, 61, 200, 6, 238, 189, 156, 200, 127, 189, 206, 80, 107, 62, 116, 244, 34, 62, 60, 129, 49, 61, 229, 36, 125, 189, 218, 251, 229, 60, 110, 172, 119, 190, 254, 117, 54, 190, 93, 246, 74, 61, 241, 139, 28, 190, 177, 190, 49, 59, 247, 122, 243, 61, 91, 203, 104, 62, 211, 248, 87, 189, 83, 95, 28, 62, 3, 211, 254, 61, 46, 33, 13, 62, 84, 2, 49, 61, 108, 128, 233, 189, 66, 203, 173, 190, 127, 40, 19, 62, 120, 204, 109, 189, 180, 37, 172, 189, 218, 188, 54, 59, 20, 234, 19, 189, 223, 196, 208, 62, 181, 228, 227, 61, 136, 83, 24, 62, 219, 156, 73, 189, 235, 161, 75, 61, 8, 36, 148, 189, 139, 239, 78, 62, 89, 99, 7, 62, 146, 240, 32, 190, 131, 106, 45, 62, 247, 49, 145, 190, 242, 215, 0, 62, 59, 109, 190, 61, 7, 219, 19, 62, 210, 143, 103, 190, 35, 196, 110, 60, 27, 111, 141, 190, 212, 27, 225, 189, 142, 12, 48, 61, 179, 57, 152, 190, 174, 33, 199, 189, 65, 42, 9, 188, 221, 179, 200, 190, 21, 221, 1, 62, 25, 15, 198, 61, 74, 34, 98, 190, 22, 239, 183, 190, 54, 207, 209, 61, 192, 89, 125, 188, 16, 100, 58, 190, 217, 92, 119, 62, 103, 53, 42, 190, 248, 185, 191, 61, 163, 201, 191, 189, 160, 188, 134, 60, 207, 255, 99, 61, 62, 147, 70, 62, 81, 243, 159, 62, 72, 167, 8, 62, 5, 147, 213, 189, 88, 214, 201, 188, 3, 227, 121, 61, 146, 143, 138, 61, 28, 209, 172, 190, 207, 206, 3, 61, 234, 79, 111, 189, 35, 106, 217, 189, 8, 133, 169, 62, 34, 8, 78, 61, 169, 189, 217, 61, 49, 12, 216, 188, 128, 43, 251, 61, 49, 94, 116, 190, 230, 223, 144, 188, 59, 8, 98, 62, 251, 148, 204, 61, 99, 226, 48, 62, 0, 26, 10, 62, 179, 56, 238, 189, 108, 238, 30, 62, 227, 210, 109, 62, 144, 245, 166, 189, 110, 20, 169, 189, 224, 234, 159, 189, 194, 81, 51, 62, 38, 187, 204, 188, 66, 234, 119, 189, 91, 225, 86, 190, 107, 190, 102, 188, 252, 92, 47, 62, 177, 68, 11, 62, 221, 48, 47, 190, 81, 17, 148, 62, 232, 45, 250, 60, 236, 148, 92, 190, 77, 155, 59, 62, 120, 241, 86, 62, 118, 103, 49, 62, 179, 129, 237, 189, 112, 113, 0, 61, 72, 75, 227, 189, 26, 73, 73, 61, 200, 123, 233, 60, 124, 228, 42, 189, 181, 24, 250, 189, 97, 186, 78, 189, 136, 131, 177, 189, 243, 243, 9, 190, 103, 150, 158, 189, 132, 212, 205, 188, 150, 32, 21, 190, 238, 129, 53, 60, 226, 253, 3, 190, 11, 14, 46, 190, 87, 57, 135, 189, 7, 81, 169, 61, 49, 110, 29, 61, 222, 79, 26, 61, 58, 1, 246, 188, 243, 233, 37, 62, 79, 26, 185, 61, 249, 247, 40, 190, 148, 145, 197, 188, 171, 176, 42, 190, 151, 170, 181, 59, 146, 188, 35, 190, 76, 153, 130, 189, 255, 223, 19, 190, 41, 185, 114, 61, 201, 166, 175, 61, 4, 180, 184, 61, 1, 50, 19, 190, 88, 151, 98, 189, 107, 178, 57, 190, 178, 43, 222, 189, 74, 253, 123, 189, 198, 235, 110, 61, 51, 81, 191, 60, 49, 147, 17, 190, 76, 44, 94, 189, 241, 111, 82, 190, 203, 127, 128, 60, 30, 26, 152, 61, 114, 132, 149, 60, 71, 110, 224, 60, 6, 31, 19, 190, 142, 196, 38, 190, 172, 235, 222, 186, 143, 131, 9, 61, 74, 188, 171, 61, 117, 181, 7, 60, 134, 232, 181, 188, 17, 184, 214, 188, 155, 61, 45, 61, 176, 0, 41, 190, 26, 40, 9, 62, 25, 32, 125, 60, 255, 240, 235, 189, 219, 148, 217, 61, 113, 43, 36, 62, 16, 80, 56, 190, 183, 144, 6, 62, 46, 16, 135, 190, 33, 142, 3, 189, 205, 99, 47, 190, 176, 122, 154, 61, 230, 210, 89, 62, 240, 142, 67, 62, 56, 150, 193, 61, 151, 84, 62, 62, 209, 48, 99, 62, 185, 189, 100, 190, 106, 67, 32, 61, 209, 228, 248, 60, 118, 37, 168, 61, 159, 149, 42, 189, 154, 145, 90, 62, 10, 37, 244, 61, 211, 56, 124, 190, 208, 52, 250, 188, 209, 64, 42, 191, 69, 82, 87, 188, 40, 234, 156, 61, 60, 29, 30, 190, 100, 216, 94, 189, 168, 138, 113, 189, 22, 93, 236, 61, 226, 219, 138, 190, 174, 244, 142, 61, 36, 206, 94, 190, 246, 207, 139, 190, 214, 169, 255, 61, 216, 54, 229, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 66, 176, 62, 109, 101, 73, 62, 155, 155, 166, 62, 4, 72, 168, 60, 191, 147, 66, 61, 245, 244, 191, 189, 176, 127, 226, 61, 120, 139, 105, 190, 253, 108, 232, 189, 54, 200, 68, 62, 30, 54, 147, 189, 236, 124, 130, 62, 78, 165, 12, 62, 109, 233, 148, 61, 42, 55, 239, 58, 169, 128, 191, 61, 126, 148, 173, 190, 237, 65, 47, 190, 95, 228, 181, 62, 184, 146, 131, 189, 176, 126, 28, 62, 155, 70, 160, 190, 31, 107, 3, 60, 216, 155, 182, 61, 82, 236, 40, 61, 12, 21, 92, 190, 41, 206, 26, 190, 151, 24, 198, 190, 220, 88, 234, 60, 44, 63, 169, 61, 50, 228, 179, 189, 162, 72, 95, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 76, 77, 63, 47, 106, 67, 190, 41, 19, 182, 190, 94, 10, 200, 62, 164, 204, 215, 61, 166, 12, 159, 62, 131, 39, 18, 63, 145, 5, 170, 60, 97, 242, 232, 190, 34, 105, 59, 191, 65, 241, 170, 62, 17, 245, 243, 62, 96, 130, 202, 190, 246, 72, 11, 191, 186, 168, 16, 63, 60, 192, 144, 191, 35, 170, 146, 62, 177, 104, 165, 188, 137, 94, 194, 190, 253, 235, 197, 189, 132, 144, 233, 62, 103, 100, 128, 61, 210, 55, 204, 62, 203, 223, 15, 191, 222, 236, 177, 61, 219, 58, 36, 190, 57, 165, 76, 190, 247, 198, 160, 62, 142, 47, 33, 190, 28, 112, 38, 61, 149, 149, 240, 189, 43, 203, 131, 61, 210, 184, 245, 61, 11, 101, 167, 60, 19, 159, 156, 189, 25, 123, 3, 61, 181, 173, 233, 190, 208, 237, 143, 62, 75, 247, 24, 190, 58, 59, 182, 62, 111, 126, 132, 62, 48, 14, 77, 62, 163, 6, 29, 190, 204, 48, 33, 190, 102, 61, 58, 190, 56, 126, 132, 188, 64, 101, 138, 61, 199, 165, 169, 61, 250, 72, 64, 62, 114, 43, 165, 189, 45, 174, 143, 190, 130, 240, 204, 61, 192, 150, 198, 189, 170, 216, 138, 62, 123, 149, 115, 61, 70, 194, 58, 189, 44, 124, 62, 190, 61, 149, 92, 62, 50, 211, 20, 62, 194, 242, 139, 62, 244, 19, 67, 190, 76, 235, 18, 62, 20, 36, 254, 61, 135, 147, 93, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 24, 158, 188, 203, 235, 10, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {29, 178, 158, 63, 135, 89, 73, 191, 136, 10, 160, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {144, 175, 83, 63, 185, 252, 186, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0032/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}