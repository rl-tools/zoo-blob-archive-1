// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 77, 60, 190, 139, 148, 0, 63, 150, 133, 215, 190, 25, 50, 162, 190, 17, 45, 120, 61, 126, 124, 230, 189, 6, 227, 203, 62, 66, 242, 55, 62, 145, 101, 212, 190, 121, 80, 212, 190, 133, 55, 156, 62, 9, 46, 188, 188, 193, 105, 145, 190, 240, 146, 52, 62, 200, 239, 173, 190, 244, 82, 65, 62, 144, 206, 150, 189, 192, 176, 113, 62, 128, 169, 3, 190, 159, 128, 9, 191, 116, 151, 187, 61, 31, 65, 213, 190, 204, 205, 7, 191, 103, 108, 205, 190, 64, 219, 156, 61, 253, 121, 119, 190, 229, 30, 196, 62, 63, 111, 8, 63, 25, 125, 113, 62, 33, 50, 3, 191, 139, 89, 179, 189, 32, 158, 205, 62, 254, 69, 213, 62, 115, 182, 239, 189, 206, 87, 203, 62, 174, 30, 180, 190, 56, 193, 232, 189, 144, 48, 115, 190, 229, 193, 156, 62, 147, 20, 253, 190, 131, 81, 210, 62, 26, 29, 199, 187, 38, 8, 17, 62, 145, 168, 18, 191, 3, 101, 19, 63, 81, 123, 48, 62, 60, 173, 8, 191, 151, 215, 4, 61, 15, 7, 107, 190, 189, 44, 167, 62, 56, 21, 18, 63, 239, 189, 156, 189, 143, 185, 220, 60, 241, 235, 80, 62, 184, 99, 203, 190, 34, 114, 173, 188, 213, 229, 76, 190, 151, 163, 52, 62, 137, 195, 218, 190, 41, 223, 196, 189, 247, 146, 214, 190, 2, 144, 223, 60, 48, 125, 129, 62, 199, 138, 162, 62, 66, 233, 113, 190, 130, 166, 1, 63, 235, 108, 81, 190, 137, 20, 103, 62, 223, 98, 231, 190, 216, 123, 1, 63, 73, 85, 255, 59, 190, 195, 246, 62, 171, 137, 159, 62, 41, 19, 229, 62, 229, 247, 117, 62, 250, 224, 138, 189, 202, 6, 208, 188, 53, 129, 227, 62, 35, 143, 215, 62, 72, 247, 194, 188, 236, 239, 241, 190, 141, 56, 109, 189, 210, 128, 254, 60, 176, 251, 100, 62, 254, 223, 249, 189, 201, 235, 13, 62, 162, 219, 169, 62, 51, 167, 13, 191, 81, 6, 202, 61, 156, 162, 103, 190, 37, 166, 1, 191, 231, 20, 237, 190, 120, 254, 74, 62, 223, 157, 179, 189, 187, 51, 5, 63, 14, 145, 246, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 185, 19, 191, 20, 78, 192, 61, 46, 204, 196, 189, 198, 203, 184, 189, 118, 37, 208, 190, 69, 201, 163, 62, 97, 97, 250, 62, 86, 200, 134, 62, 219, 78, 62, 62, 140, 237, 222, 62, 142, 146, 205, 190, 133, 194, 8, 57, 3, 162, 19, 63, 235, 226, 204, 62, 143, 133, 3, 191, 183, 5, 209, 62, 44, 249, 139, 61, 210, 76, 132, 190, 180, 165, 210, 190, 138, 84, 4, 191, 207, 59, 87, 190, 23, 233, 51, 62, 106, 131, 14, 63, 119, 120, 197, 61, 157, 83, 233, 61, 81, 150, 136, 62, 108, 150, 252, 190, 156, 206, 33, 62, 12, 252, 106, 190, 223, 153, 134, 190, 86, 2, 19, 191, 142, 191, 228, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {112, 141, 245, 187, 110, 9, 166, 189, 225, 204, 207, 59, 162, 235, 38, 62, 117, 112, 180, 187, 31, 231, 167, 61, 123, 142, 213, 61, 108, 3, 70, 187, 138, 113, 5, 62, 183, 228, 49, 189, 48, 67, 18, 62, 100, 4, 25, 188, 252, 9, 37, 60, 188, 34, 85, 189, 103, 213, 12, 62, 168, 131, 147, 188, 93, 231, 119, 187, 53, 95, 130, 61, 245, 35, 77, 61, 182, 53, 130, 189, 72, 56, 9, 190, 166, 101, 135, 189, 120, 128, 156, 61, 251, 229, 246, 189, 83, 54, 5, 61, 155, 32, 76, 60, 236, 132, 192, 61, 36, 158, 230, 189, 110, 225, 71, 187, 189, 76, 161, 59, 196, 147, 2, 58, 237, 150, 232, 189, 96, 133, 251, 61, 177, 18, 150, 61, 158, 252, 29, 62, 144, 205, 184, 61, 15, 20, 26, 190, 83, 46, 135, 61, 243, 169, 168, 189, 8, 158, 105, 60, 73, 80, 119, 189, 59, 28, 198, 189, 90, 233, 37, 190, 247, 134, 85, 189, 146, 82, 96, 189, 88, 173, 32, 190, 21, 238, 87, 189, 231, 194, 111, 188, 67, 31, 249, 61, 228, 234, 43, 190, 2, 171, 70, 60, 189, 49, 26, 62, 180, 81, 141, 61, 113, 149, 177, 61, 144, 47, 200, 58, 124, 168, 15, 190, 70, 189, 212, 188, 253, 255, 50, 62, 176, 4, 178, 189, 19, 176, 4, 189, 60, 157, 149, 60, 30, 80, 142, 61, 163, 161, 226, 61, 168, 155, 45, 62, 221, 15, 178, 189, 188, 223, 23, 189, 19, 182, 9, 62, 35, 148, 66, 186, 33, 90, 206, 189, 120, 38, 171, 61, 112, 231, 236, 189, 105, 139, 219, 60, 173, 165, 199, 186, 146, 191, 19, 190, 178, 98, 137, 60, 170, 49, 170, 61, 119, 116, 44, 62, 159, 13, 251, 188, 87, 246, 107, 61, 166, 143, 41, 190, 119, 120, 26, 62, 22, 124, 246, 59, 76, 115, 23, 190, 173, 118, 134, 61, 116, 69, 40, 61, 140, 200, 220, 188, 253, 119, 133, 189, 156, 103, 7, 188, 226, 84, 60, 61, 248, 246, 188, 189, 107, 7, 126, 189, 59, 79, 152, 189, 58, 106, 252, 189, 19, 183, 120, 60, 97, 25, 4, 190, 135, 236, 40, 190, 14, 19, 247, 60, 105, 205, 181, 189, 168, 178, 214, 60, 15, 94, 59, 189, 30, 6, 35, 62, 238, 78, 7, 61, 77, 221, 2, 62, 130, 184, 87, 61, 26, 69, 12, 190, 155, 104, 158, 61, 30, 28, 234, 188, 253, 35, 47, 62, 82, 145, 20, 190, 118, 145, 125, 59, 224, 241, 206, 188, 104, 250, 44, 61, 214, 214, 34, 190, 244, 210, 45, 62, 59, 119, 42, 62, 188, 14, 28, 190, 63, 166, 221, 61, 198, 86, 104, 189, 3, 233, 45, 190, 135, 132, 42, 190, 240, 216, 238, 59, 133, 70, 52, 190, 7, 89, 62, 60, 236, 70, 206, 61, 58, 59, 1, 60, 88, 33, 112, 188, 85, 35, 198, 61, 217, 128, 19, 61, 246, 10, 93, 189, 225, 136, 9, 190, 231, 227, 142, 61, 21, 107, 208, 189, 109, 192, 199, 61, 201, 86, 32, 190, 201, 252, 35, 190, 173, 111, 125, 61, 89, 202, 239, 61, 119, 7, 228, 188, 113, 69, 167, 189, 127, 52, 4, 62, 221, 13, 11, 62, 227, 83, 247, 61, 125, 176, 55, 189, 14, 199, 69, 61, 99, 17, 5, 62, 215, 184, 31, 62, 6, 191, 136, 189, 63, 121, 15, 189, 244, 72, 55, 189, 128, 234, 117, 189, 65, 35, 154, 188, 148, 139, 33, 190, 199, 145, 34, 190, 138, 159, 139, 58, 25, 202, 2, 190, 249, 91, 241, 61, 69, 13, 244, 61, 113, 236, 109, 189, 108, 130, 213, 189, 239, 152, 19, 61, 7, 43, 151, 61, 210, 97, 83, 189, 102, 220, 187, 189, 13, 90, 33, 62, 120, 133, 41, 62, 119, 97, 197, 189, 196, 85, 44, 62, 120, 71, 251, 61, 15, 236, 18, 190, 33, 248, 17, 62, 17, 65, 3, 62, 76, 156, 174, 61, 90, 161, 74, 187, 230, 225, 227, 59, 32, 203, 18, 190, 136, 234, 7, 62, 173, 175, 242, 189, 40, 191, 71, 189, 156, 247, 159, 189, 125, 141, 11, 189, 151, 53, 9, 62, 69, 51, 218, 189, 134, 167, 159, 61, 158, 240, 109, 189, 253, 82, 47, 190, 38, 254, 34, 189, 13, 146, 244, 61, 160, 45, 52, 189, 181, 205, 35, 189, 59, 213, 207, 188, 162, 41, 69, 188, 145, 183, 167, 188, 130, 84, 5, 189, 51, 253, 17, 190, 212, 52, 204, 189, 243, 49, 114, 60, 95, 147, 204, 189, 167, 1, 42, 62, 74, 138, 178, 61, 222, 32, 148, 61, 40, 22, 216, 61, 4, 39, 205, 189, 225, 123, 239, 60, 165, 37, 216, 189, 169, 152, 46, 189, 55, 194, 239, 189, 154, 92, 133, 189, 110, 128, 38, 62, 231, 15, 37, 190, 88, 155, 206, 61, 148, 253, 233, 189, 203, 10, 215, 189, 104, 212, 43, 190, 209, 113, 33, 61, 147, 84, 221, 189, 230, 50, 29, 190, 114, 33, 235, 61, 63, 109, 173, 189, 158, 253, 47, 62, 169, 26, 158, 60, 144, 159, 39, 62, 251, 4, 12, 190, 171, 11, 95, 189, 196, 72, 8, 62, 179, 173, 67, 189, 13, 166, 25, 187, 215, 78, 35, 190, 98, 248, 203, 189, 226, 222, 44, 190, 114, 204, 152, 189, 211, 242, 215, 61, 9, 93, 48, 190, 41, 138, 1, 190, 99, 73, 254, 61, 129, 210, 17, 62, 245, 155, 38, 190, 72, 28, 40, 62, 54, 164, 165, 61, 242, 102, 141, 189, 67, 33, 119, 189, 253, 63, 77, 189, 178, 174, 3, 189, 252, 208, 202, 189, 153, 225, 221, 61, 105, 185, 159, 61, 208, 153, 37, 62, 66, 237, 199, 189, 177, 168, 8, 62, 13, 163, 87, 61, 80, 50, 2, 190, 107, 235, 77, 189, 10, 197, 70, 61, 104, 90, 43, 189, 29, 178, 223, 61, 111, 69, 245, 61, 140, 86, 75, 61, 191, 129, 210, 189, 162, 71, 146, 189, 152, 69, 13, 190, 30, 217, 212, 189, 175, 233, 35, 62, 210, 190, 2, 62, 45, 194, 8, 190, 51, 210, 166, 61, 124, 252, 134, 61, 19, 31, 180, 61, 241, 223, 5, 189, 130, 183, 199, 61, 62, 91, 181, 189, 97, 36, 26, 62, 241, 89, 164, 189, 203, 179, 76, 61, 212, 118, 191, 189, 15, 175, 138, 189, 3, 83, 216, 188, 242, 62, 223, 189, 136, 174, 22, 61, 66, 104, 157, 189, 246, 190, 234, 61, 58, 207, 116, 189, 120, 192, 152, 189, 173, 24, 11, 62, 191, 121, 218, 61, 75, 5, 118, 61, 177, 184, 193, 61, 142, 194, 21, 190, 31, 118, 246, 189, 12, 140, 169, 61, 239, 19, 185, 188, 225, 89, 133, 59, 29, 26, 37, 62, 155, 231, 28, 190, 134, 236, 249, 187, 139, 59, 27, 62, 107, 157, 15, 62, 70, 116, 194, 60, 170, 113, 16, 62, 189, 55, 33, 190, 108, 221, 177, 189, 220, 178, 41, 62, 17, 141, 108, 188, 150, 68, 247, 189, 126, 14, 48, 190, 38, 157, 37, 189, 24, 155, 237, 188, 57, 128, 142, 61, 137, 195, 235, 189, 227, 140, 37, 190, 228, 78, 9, 190, 162, 188, 207, 189, 233, 109, 7, 61, 199, 84, 169, 189, 163, 125, 34, 190, 96, 61, 249, 189, 151, 9, 185, 189, 224, 163, 197, 187, 81, 172, 201, 61, 131, 223, 99, 61, 179, 48, 253, 189, 170, 123, 137, 60, 33, 231, 51, 190, 95, 94, 239, 61, 73, 244, 61, 61, 136, 48, 27, 190, 103, 174, 16, 190, 124, 197, 27, 62, 169, 212, 20, 62, 47, 110, 144, 61, 67, 31, 39, 62, 106, 36, 251, 61, 135, 114, 22, 62, 99, 245, 181, 61, 34, 219, 34, 190, 92, 198, 216, 189, 151, 102, 222, 61, 6, 234, 201, 61, 206, 221, 178, 189, 114, 67, 161, 61, 164, 184, 133, 61, 167, 51, 38, 189, 19, 79, 9, 61, 79, 11, 24, 190, 194, 107, 9, 190, 172, 10, 45, 62, 118, 157, 91, 61, 167, 133, 137, 189, 152, 56, 29, 189, 140, 225, 233, 61, 38, 79, 177, 189, 150, 124, 5, 62, 30, 172, 44, 189, 234, 158, 8, 186, 84, 232, 236, 189, 140, 15, 233, 186, 20, 101, 43, 62, 199, 32, 217, 189, 235, 169, 29, 61, 82, 240, 133, 189, 224, 197, 190, 60, 216, 144, 83, 60, 43, 233, 91, 189, 134, 245, 174, 189, 127, 57, 236, 188, 169, 95, 153, 61, 24, 7, 143, 60, 26, 74, 13, 188, 238, 145, 160, 60, 50, 22, 165, 189, 141, 191, 208, 60, 46, 96, 250, 61, 50, 108, 8, 190, 77, 192, 128, 189, 206, 9, 45, 62, 129, 152, 254, 186, 32, 36, 244, 189, 167, 121, 5, 61, 143, 255, 251, 60, 101, 251, 232, 61, 213, 87, 35, 189, 46, 227, 196, 61, 172, 247, 213, 60, 134, 243, 4, 190, 216, 178, 21, 188, 219, 136, 248, 189, 229, 58, 183, 189, 223, 233, 186, 188, 8, 235, 1, 62, 78, 44, 156, 61, 128, 109, 34, 60, 49, 9, 200, 61, 219, 54, 97, 61, 19, 198, 149, 189, 43, 15, 49, 190, 154, 64, 246, 61, 30, 64, 250, 188, 166, 144, 129, 189, 190, 132, 21, 190, 45, 126, 61, 189, 85, 79, 157, 189, 85, 124, 22, 190, 152, 104, 39, 188, 179, 244, 196, 61, 230, 86, 244, 189, 131, 208, 48, 62, 212, 36, 216, 61, 21, 59, 136, 60, 134, 218, 40, 190, 63, 20, 197, 61, 186, 3, 45, 190, 241, 1, 28, 61, 172, 79, 19, 190, 4, 116, 245, 61, 3, 105, 3, 62, 253, 139, 47, 62, 230, 119, 34, 62, 129, 222, 219, 61, 19, 202, 176, 189, 153, 81, 29, 62, 64, 26, 175, 61, 203, 49, 21, 62, 145, 55, 0, 61, 186, 107, 180, 60, 226, 163, 80, 188, 160, 16, 2, 190, 80, 98, 65, 188, 115, 221, 8, 189, 230, 73, 27, 190, 150, 80, 156, 56, 38, 45, 37, 190, 197, 219, 212, 187, 64, 115, 145, 61, 106, 195, 64, 61, 101, 203, 122, 61, 142, 95, 237, 189, 20, 172, 133, 61, 123, 116, 183, 189, 101, 218, 206, 189, 183, 113, 14, 190, 8, 36, 204, 61, 188, 99, 29, 62, 108, 175, 41, 190, 187, 104, 242, 189, 156, 97, 213, 61, 200, 43, 222, 188, 88, 111, 171, 189, 238, 31, 203, 189, 41, 129, 86, 61, 142, 79, 52, 62, 82, 218, 61, 188, 116, 80, 91, 61, 111, 199, 230, 61, 17, 34, 179, 189, 202, 34, 64, 60, 148, 27, 43, 62, 182, 111, 6, 62, 236, 210, 52, 188, 117, 29, 252, 61, 238, 18, 174, 186, 77, 201, 64, 189, 197, 131, 31, 190, 13, 76, 135, 189, 40, 147, 39, 190, 246, 106, 3, 190, 197, 132, 106, 61, 203, 117, 161, 189, 202, 111, 181, 61, 140, 31, 30, 62, 222, 129, 20, 190, 223, 61, 135, 189, 185, 74, 128, 189, 161, 216, 72, 61, 209, 63, 210, 187, 21, 55, 161, 187, 240, 157, 47, 61, 4, 243, 126, 61, 25, 152, 29, 189, 145, 194, 23, 187, 104, 16, 234, 188, 100, 215, 181, 189, 138, 238, 116, 61, 240, 15, 156, 189, 133, 15, 37, 190, 119, 109, 0, 62, 245, 208, 1, 60, 157, 131, 249, 189, 235, 41, 8, 62, 231, 164, 101, 61, 210, 191, 148, 61, 249, 175, 209, 189, 157, 167, 131, 189, 16, 173, 236, 60, 239, 183, 19, 62, 16, 148, 28, 190, 211, 81, 57, 61, 72, 37, 157, 189, 234, 175, 15, 62, 61, 84, 24, 62, 29, 69, 15, 190, 27, 13, 155, 188, 129, 83, 183, 61, 86, 246, 213, 61, 114, 221, 19, 62, 237, 47, 6, 62, 37, 195, 17, 62, 16, 7, 178, 189, 173, 26, 222, 189, 237, 92, 15, 190, 174, 112, 6, 190, 65, 78, 81, 189, 165, 205, 104, 189, 73, 48, 61, 61, 40, 136, 227, 189, 216, 81, 173, 61, 35, 197, 39, 60, 118, 136, 161, 189, 106, 8, 32, 190, 17, 70, 174, 189, 147, 220, 122, 189, 215, 53, 35, 190, 12, 191, 182, 61, 15, 70, 110, 189, 241, 90, 1, 190, 168, 193, 249, 188, 130, 55, 226, 189, 97, 187, 79, 61, 123, 86, 21, 189, 189, 50, 134, 189, 85, 156, 125, 60, 190, 216, 105, 189, 9, 7, 247, 59, 14, 171, 5, 62, 194, 106, 222, 61, 59, 27, 248, 189, 113, 115, 150, 60, 22, 191, 149, 60, 173, 57, 82, 188, 218, 249, 112, 60, 100, 90, 130, 61, 147, 206, 213, 189, 37, 164, 142, 61, 194, 140, 198, 188, 15, 63, 111, 189, 77, 45, 0, 62, 28, 247, 11, 62, 108, 108, 219, 189, 238, 194, 122, 189, 76, 171, 208, 189, 83, 83, 36, 62, 202, 194, 46, 190, 16, 233, 86, 60, 159, 10, 34, 190, 177, 114, 48, 190, 234, 41, 206, 189, 190, 207, 13, 190, 75, 72, 250, 189, 167, 128, 37, 190, 165, 244, 104, 189, 205, 35, 3, 62, 18, 43, 193, 188, 232, 112, 183, 60, 183, 116, 49, 62, 25, 106, 217, 60, 88, 36, 4, 190, 54, 217, 36, 190, 255, 61, 147, 61, 121, 225, 196, 189, 7, 43, 235, 60, 128, 98, 248, 189, 170, 139, 20, 190, 12, 20, 86, 60, 240, 201, 71, 61, 184, 182, 209, 189, 226, 144, 149, 61, 71, 95, 241, 189, 76, 135, 3, 62, 98, 59, 5, 188, 187, 31, 31, 190, 29, 155, 132, 188, 70, 181, 52, 190, 231, 114, 148, 188, 204, 28, 29, 190, 107, 255, 240, 61, 187, 185, 159, 188, 255, 42, 58, 61, 143, 48, 6, 190, 24, 199, 46, 62, 20, 200, 185, 189, 134, 30, 209, 189, 164, 162, 14, 59, 133, 102, 39, 62, 53, 67, 194, 61, 63, 110, 82, 61, 57, 235, 156, 61, 156, 132, 245, 61, 110, 174, 62, 189, 69, 21, 122, 187, 42, 59, 17, 190, 173, 28, 10, 189, 155, 57, 15, 61, 160, 235, 174, 61, 111, 95, 133, 61, 219, 9, 147, 189, 21, 197, 240, 182, 203, 248, 246, 189, 166, 180, 11, 62, 254, 165, 21, 190, 251, 192, 104, 189, 140, 220, 213, 189, 176, 245, 162, 61, 103, 66, 32, 190, 33, 115, 176, 61, 18, 148, 230, 189, 10, 184, 10, 189, 79, 102, 160, 60, 130, 145, 156, 189, 215, 6, 148, 189, 148, 218, 178, 60, 231, 198, 58, 189, 18, 123, 219, 61, 37, 122, 52, 190, 174, 90, 238, 189, 92, 65, 22, 62, 164, 145, 242, 61, 89, 66, 22, 62, 175, 202, 47, 190, 155, 182, 131, 61, 91, 12, 201, 61, 85, 232, 250, 189, 88, 5, 58, 60, 53, 246, 194, 189, 171, 29, 8, 190, 118, 226, 179, 60, 136, 70, 85, 189, 100, 86, 169, 189, 225, 146, 18, 62, 58, 249, 25, 62, 223, 127, 152, 188, 29, 254, 173, 60, 244, 141, 244, 189, 229, 183, 51, 62, 224, 163, 40, 187, 249, 118, 235, 189, 10, 123, 47, 62, 162, 8, 8, 62, 251, 167, 49, 61, 86, 5, 99, 189, 245, 234, 173, 61, 35, 29, 0, 189, 71, 89, 69, 61, 4, 104, 13, 62, 81, 222, 39, 190, 69, 156, 53, 59, 171, 68, 193, 189, 247, 140, 192, 188, 115, 53, 255, 189, 161, 247, 139, 61, 125, 104, 65, 189, 7, 31, 248, 61, 187, 211, 211, 61, 129, 101, 93, 189, 96, 80, 47, 190, 237, 201, 2, 62, 2, 250, 3, 190, 48, 151, 160, 61, 142, 43, 29, 190, 196, 129, 248, 189, 246, 82, 177, 189, 247, 37, 6, 60, 218, 112, 162, 61, 56, 141, 48, 190, 66, 10, 10, 189, 158, 226, 191, 188, 16, 41, 2, 62, 50, 103, 40, 62, 197, 180, 134, 189, 74, 30, 184, 61, 81, 39, 230, 189, 188, 65, 170, 189, 102, 175, 191, 60, 48, 87, 239, 61, 205, 229, 45, 62, 5, 234, 32, 189, 94, 46, 39, 62, 133, 7, 247, 60, 59, 138, 48, 62, 102, 163, 33, 190, 35, 128, 167, 61, 94, 36, 121, 188, 74, 29, 55, 61, 55, 160, 137, 61, 197, 183, 46, 190, 233, 108, 75, 60, 89, 202, 165, 61, 85, 208, 189, 61, 183, 217, 40, 189, 135, 100, 0, 62, 178, 128, 17, 62, 82, 71, 214, 189, 33, 131, 180, 61, 134, 201, 236, 187, 131, 60, 48, 62, 247, 63, 38, 62, 121, 98, 83, 189, 108, 34, 209, 189, 89, 186, 214, 188, 103, 227, 130, 188, 236, 92, 41, 62, 7, 126, 7, 62, 184, 1, 131, 187, 133, 46, 159, 188, 156, 132, 205, 61, 31, 69, 18, 62, 97, 238, 234, 61, 124, 36, 61, 61, 168, 33, 90, 61, 139, 208, 19, 190, 9, 157, 46, 188, 133, 16, 5, 62, 112, 216, 205, 61, 52, 42, 215, 58, 186, 58, 84, 60, 203, 113, 164, 189, 151, 48, 253, 187, 251, 201, 223, 189, 59, 21, 52, 62, 34, 25, 39, 60, 231, 38, 122, 189, 136, 182, 155, 189, 196, 237, 252, 189, 21, 166, 40, 61, 146, 100, 220, 61, 222, 15, 237, 189, 45, 110, 20, 62, 110, 216, 10, 190, 106, 35, 252, 61, 139, 234, 39, 190, 85, 138, 43, 190, 37, 242, 36, 190, 164, 137, 230, 189, 214, 227, 88, 189, 101, 118, 132, 189, 111, 229, 240, 61, 120, 212, 20, 190, 23, 230, 111, 189, 193, 29, 158, 189, 104, 241, 62, 189, 40, 22, 136, 188, 121, 132, 219, 61, 241, 248, 255, 61, 191, 99, 41, 190, 24, 160, 12, 62, 107, 233, 203, 61, 75, 68, 46, 61, 220, 192, 50, 190, 51, 136, 221, 189, 65, 114, 38, 189, 21, 223, 185, 61, 89, 124, 7, 62, 222, 130, 228, 189, 90, 25, 35, 189, 195, 89, 23, 61, 89, 136, 36, 190, 179, 142, 64, 189, 123, 177, 156, 61, 130, 38, 21, 61, 150, 182, 112, 59, 60, 11, 15, 190, 71, 46, 32, 62, 241, 50, 11, 190, 87, 106, 188, 188, 195, 244, 0, 190, 2, 120, 32, 62, 249, 187, 44, 62, 64, 10, 45, 189, 206, 186, 194, 189, 178, 199, 107, 59, 119, 70, 20, 60, 207, 148, 154, 61, 81, 53, 232, 60, 120, 80, 46, 62, 41, 19, 168, 61, 155, 34, 208, 61, 30, 233, 92, 61, 159, 32, 96, 189, 138, 182, 129, 189, 9, 72, 91, 61, 152, 74, 182, 188, 12, 239, 130, 61, 237, 63, 133, 61, 186, 240, 172, 188, 65, 212, 32, 62, 185, 130, 148, 61, 122, 208, 118, 61, 87, 149, 45, 62, 210, 6, 216, 61, 250, 200, 235, 61, 229, 101, 142, 188, 254, 232, 232, 189, 60, 158, 158, 189, 167, 35, 158, 61, 133, 236, 29, 189, 121, 61, 112, 61, 121, 95, 130, 61, 127, 207, 111, 61, 196, 169, 140, 61, 149, 154, 204, 59, 170, 56, 127, 189, 40, 147, 141, 188, 204, 201, 36, 62, 207, 28, 8, 58, 8, 246, 229, 189, 176, 34, 169, 61, 191, 147, 6, 189, 242, 230, 51, 61, 165, 90, 4, 189, 17, 244, 218, 188, 8, 112, 29, 62, 115, 197, 172, 189, 33, 9, 217, 189, 27, 91, 183, 61, 7, 62, 172, 187, 105, 35, 51, 61, 105, 207, 129, 60, 39, 14, 200, 61, 188, 20, 15, 190, 252, 211, 202, 189, 131, 155, 71, 60, 25, 140, 90, 61, 106, 235, 22, 62, 156, 192, 122, 61, 68, 167, 132, 61, 21, 61, 14, 61, 143, 241, 5, 190, 153, 111, 5, 189, 136, 137, 5, 62, 53, 68, 165, 61, 140, 97, 17, 61, 182, 234, 190, 61, 51, 46, 48, 62, 78, 244, 68, 189, 74, 21, 135, 61, 33, 33, 52, 62, 220, 242, 134, 61, 74, 239, 7, 62, 31, 105, 43, 190, 204, 180, 28, 190, 167, 236, 138, 61, 203, 212, 246, 189, 239, 84, 253, 189, 45, 95, 172, 189, 128, 88, 23, 188, 56, 59, 49, 189, 216, 151, 254, 60, 181, 88, 9, 62, 64, 18, 194, 60, 92, 114, 127, 61, 189, 1, 243, 189, 113, 137, 24, 62, 153, 187, 182, 61, 127, 225, 44, 190, 222, 24, 228, 61, 236, 137, 52, 190, 175, 118, 137, 189, 164, 48, 180, 61, 119, 39, 36, 62, 225, 134, 29, 190, 55, 245, 10, 61, 77, 100, 204, 189, 32, 250, 189, 189, 243, 204, 236, 61, 42, 252, 44, 190, 98, 76, 45, 62, 42, 95, 195, 60, 137, 94, 200, 189, 215, 88, 26, 61, 129, 13, 233, 61, 112, 93, 42, 190, 177, 245, 29, 61, 206, 231, 180, 61, 99, 81, 27, 61, 91, 193, 20, 190, 195, 194, 217, 61, 162, 200, 24, 190, 244, 176, 208, 61, 142, 147, 170, 60, 58, 190, 105, 189, 25, 233, 161, 61, 199, 223, 147, 61, 69, 165, 15, 62, 16, 159, 49, 62, 26, 110, 177, 189, 93, 155, 30, 190, 224, 79, 117, 188, 44, 89, 173, 61, 131, 165, 221, 189, 86, 166, 164, 61, 101, 171, 235, 189, 72, 150, 194, 189, 97, 232, 232, 61, 175, 4, 108, 61, 210, 164, 131, 61, 68, 81, 242, 189, 229, 218, 24, 62, 132, 128, 11, 60, 195, 236, 174, 189, 50, 10, 208, 189, 116, 45, 177, 60, 39, 246, 80, 61, 192, 195, 113, 61, 177, 236, 55, 189, 190, 99, 19, 62, 197, 216, 217, 61, 152, 72, 26, 190, 121, 241, 245, 189, 212, 59, 189, 61, 37, 204, 23, 62, 223, 196, 213, 188, 233, 31, 46, 190, 213, 89, 26, 190, 5, 171, 40, 190, 112, 99, 36, 189, 156, 245, 74, 61, 42, 129, 50, 190, 197, 239, 176, 61, 64, 116, 190, 187, 230, 212, 214, 189, 5, 34, 21, 62, 233, 157, 165, 61, 118, 103, 49, 62, 179, 129, 237, 189, 112, 113, 0, 61, 72, 75, 227, 189, 26, 73, 73, 61, 200, 123, 233, 60, 124, 228, 42, 189, 181, 24, 250, 189, 97, 186, 78, 189, 136, 131, 177, 189, 243, 243, 9, 190, 103, 150, 158, 189, 132, 212, 205, 188, 150, 32, 21, 190, 238, 129, 53, 60, 226, 253, 3, 190, 11, 14, 46, 190, 87, 57, 135, 189, 7, 81, 169, 61, 49, 110, 29, 61, 222, 79, 26, 61, 58, 1, 246, 188, 243, 233, 37, 62, 79, 26, 185, 61, 249, 247, 40, 190, 148, 145, 197, 188, 171, 176, 42, 190, 151, 170, 181, 59, 146, 188, 35, 190, 76, 153, 130, 189, 255, 223, 19, 190, 41, 185, 114, 61, 108, 37, 208, 61, 218, 145, 19, 62, 174, 235, 244, 189, 59, 214, 28, 186, 69, 148, 31, 190, 79, 95, 129, 189, 107, 214, 175, 60, 94, 65, 5, 62, 98, 201, 76, 61, 221, 3, 207, 189, 76, 44, 94, 189, 3, 226, 51, 190, 36, 142, 187, 61, 227, 42, 38, 62, 6, 239, 49, 60, 239, 65, 192, 61, 9, 13, 14, 190, 142, 196, 38, 190, 155, 33, 20, 61, 38, 125, 132, 61, 106, 91, 202, 61, 173, 204, 67, 60, 39, 204, 20, 61, 112, 245, 247, 188, 155, 61, 45, 61, 205, 9, 18, 190, 72, 160, 28, 62, 232, 182, 251, 60, 255, 240, 235, 189, 131, 61, 24, 62, 5, 47, 47, 62, 64, 162, 20, 190, 131, 45, 41, 62, 88, 100, 161, 189, 161, 207, 113, 189, 184, 13, 21, 190, 190, 193, 35, 62, 110, 224, 42, 61, 142, 13, 106, 61, 207, 211, 6, 62, 172, 51, 47, 61, 20, 216, 1, 62, 133, 51, 160, 189, 40, 175, 42, 62, 133, 208, 209, 189, 87, 12, 64, 189, 134, 3, 55, 61, 245, 123, 0, 60, 158, 90, 151, 189, 10, 221, 116, 189, 72, 24, 108, 61, 72, 13, 206, 60, 70, 19, 218, 189, 123, 92, 48, 61, 157, 76, 134, 189, 86, 189, 218, 189, 105, 216, 215, 189, 29, 208, 42, 189, 242, 137, 24, 190, 152, 126, 249, 189, 236, 248, 116, 189, 137, 185, 18, 189, 62, 222, 76, 61, 221, 228, 246, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 0, 42, 62, 3, 237, 160, 61, 239, 82, 32, 62, 161, 148, 48, 59, 49, 244, 24, 189, 224, 163, 155, 187, 148, 216, 177, 189, 228, 24, 179, 189, 196, 217, 13, 189, 174, 163, 38, 62, 161, 132, 144, 189, 19, 35, 163, 61, 143, 79, 34, 61, 79, 185, 46, 190, 50, 209, 14, 190, 61, 242, 5, 190, 203, 191, 9, 190, 192, 4, 3, 190, 177, 22, 29, 62, 247, 25, 202, 188, 71, 223, 22, 61, 10, 197, 49, 190, 211, 98, 251, 189, 60, 193, 151, 189, 186, 249, 26, 61, 88, 45, 241, 189, 224, 240, 149, 189, 177, 255, 52, 190, 176, 217, 154, 189, 44, 63, 169, 61, 8, 62, 86, 185, 248, 89, 170, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 143, 193, 61, 74, 190, 101, 189, 137, 212, 0, 190, 106, 214, 207, 61, 33, 229, 176, 61, 53, 153, 209, 59, 205, 96, 203, 60, 12, 17, 133, 61, 31, 155, 224, 189, 57, 129, 40, 190, 253, 165, 40, 62, 33, 154, 145, 61, 73, 96, 247, 189, 80, 55, 73, 58, 201, 233, 48, 62, 135, 146, 44, 189, 93, 35, 102, 61, 96, 3, 178, 188, 50, 252, 36, 59, 166, 253, 235, 189, 112, 247, 197, 61, 154, 102, 48, 61, 111, 169, 197, 61, 211, 206, 144, 60, 160, 158, 221, 61, 85, 130, 86, 61, 2, 173, 34, 190, 169, 4, 190, 60, 130, 15, 248, 189, 28, 112, 38, 61, 17, 76, 0, 190, 215, 244, 69, 60, 231, 57, 102, 61, 22, 152, 101, 188, 180, 45, 98, 189, 9, 47, 187, 59, 8, 56, 34, 190, 129, 49, 201, 61, 47, 0, 1, 60, 108, 99, 209, 61, 84, 172, 174, 61, 131, 70, 33, 62, 235, 136, 218, 188, 52, 43, 69, 189, 98, 212, 218, 189, 219, 78, 12, 190, 108, 190, 34, 62, 116, 121, 5, 61, 39, 93, 225, 60, 231, 65, 170, 189, 242, 146, 147, 60, 9, 157, 1, 62, 145, 156, 209, 60, 107, 201, 0, 62, 187, 150, 219, 189, 35, 38, 87, 187, 234, 61, 177, 188, 70, 202, 46, 62, 133, 21, 232, 61, 121, 55, 129, 60, 54, 39, 116, 189, 76, 235, 18, 62, 90, 30, 38, 62, 202, 96, 175, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 185, 139, 61, 200, 193, 2, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {12, 169, 48, 63, 0, 48, 94, 62, 201, 2, 115, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {174, 112, 194, 61, 83, 182, 55, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0032/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}