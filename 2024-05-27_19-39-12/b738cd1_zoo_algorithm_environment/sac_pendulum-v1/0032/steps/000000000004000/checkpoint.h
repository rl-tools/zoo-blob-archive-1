// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 175, 202, 190, 180, 165, 20, 63, 145, 17, 237, 190, 38, 235, 20, 190, 8, 10, 4, 63, 138, 49, 194, 190, 166, 244, 199, 62, 74, 34, 129, 62, 116, 113, 232, 190, 10, 182, 202, 190, 56, 26, 64, 63, 243, 193, 47, 190, 13, 175, 7, 190, 32, 236, 3, 61, 149, 117, 199, 190, 111, 1, 211, 189, 155, 43, 16, 190, 211, 74, 159, 62, 50, 112, 2, 188, 183, 52, 97, 191, 190, 33, 149, 62, 162, 124, 239, 190, 141, 198, 81, 191, 45, 211, 143, 189, 166, 52, 122, 61, 33, 185, 22, 191, 182, 129, 18, 63, 40, 38, 109, 63, 193, 164, 66, 62, 107, 164, 26, 191, 201, 177, 205, 61, 111, 112, 16, 63, 71, 148, 204, 62, 119, 13, 44, 190, 29, 253, 194, 62, 253, 68, 83, 191, 87, 148, 225, 61, 21, 227, 156, 190, 81, 117, 224, 62, 76, 42, 230, 190, 9, 62, 22, 63, 251, 145, 240, 189, 237, 56, 5, 190, 118, 88, 118, 191, 183, 160, 29, 63, 143, 159, 222, 62, 79, 66, 130, 191, 222, 135, 154, 57, 207, 55, 34, 189, 186, 125, 140, 63, 22, 144, 171, 62, 154, 46, 207, 61, 173, 149, 151, 62, 73, 80, 82, 62, 98, 130, 150, 190, 248, 70, 202, 189, 71, 98, 138, 190, 112, 130, 251, 62, 206, 221, 248, 190, 255, 118, 253, 189, 152, 242, 230, 190, 30, 227, 200, 62, 82, 201, 208, 62, 217, 249, 238, 62, 94, 56, 155, 190, 130, 45, 22, 63, 80, 189, 181, 190, 209, 126, 37, 189, 43, 68, 22, 191, 171, 254, 74, 63, 193, 233, 30, 62, 89, 62, 28, 63, 254, 68, 35, 63, 29, 215, 12, 63, 211, 239, 171, 62, 227, 46, 153, 188, 175, 155, 57, 62, 146, 157, 16, 63, 15, 150, 22, 63, 87, 162, 212, 190, 220, 236, 16, 191, 42, 90, 42, 63, 106, 105, 134, 62, 225, 121, 40, 62, 101, 41, 151, 61, 231, 61, 83, 62, 238, 79, 192, 62, 207, 8, 34, 191, 164, 68, 225, 61, 37, 236, 202, 190, 58, 164, 18, 191, 151, 184, 8, 191, 1, 68, 250, 62, 117, 73, 234, 60, 56, 73, 140, 63, 169, 247, 141, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 253, 224, 190, 78, 156, 41, 189, 111, 92, 41, 62, 169, 4, 9, 60, 36, 136, 221, 190, 229, 60, 6, 63, 155, 188, 236, 62, 13, 145, 16, 63, 194, 252, 166, 61, 196, 12, 14, 63, 133, 142, 51, 191, 206, 219, 56, 62, 86, 130, 190, 62, 144, 225, 226, 62, 206, 193, 178, 190, 134, 219, 198, 62, 137, 63, 142, 61, 212, 222, 227, 190, 226, 56, 239, 190, 245, 0, 19, 191, 50, 233, 40, 190, 126, 60, 187, 61, 90, 197, 194, 62, 189, 156, 62, 188, 245, 251, 96, 190, 178, 179, 62, 62, 39, 201, 245, 190, 246, 119, 86, 62, 89, 253, 201, 190, 187, 142, 198, 190, 38, 253, 24, 191, 29, 19, 21, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 71, 92, 189, 64, 19, 18, 191, 196, 222, 16, 188, 42, 217, 129, 61, 225, 246, 144, 189, 62, 155, 107, 62, 60, 165, 159, 62, 66, 209, 236, 60, 34, 178, 141, 62, 222, 184, 172, 189, 83, 62, 37, 190, 65, 244, 147, 191, 188, 203, 67, 62, 129, 239, 152, 61, 70, 244, 236, 189, 180, 144, 28, 62, 18, 3, 128, 61, 127, 92, 150, 190, 215, 73, 0, 189, 20, 106, 108, 190, 25, 215, 0, 61, 205, 210, 121, 190, 187, 86, 116, 190, 146, 186, 178, 190, 238, 95, 143, 190, 149, 4, 40, 62, 145, 127, 75, 62, 195, 101, 211, 189, 49, 162, 162, 190, 177, 174, 71, 191, 216, 87, 90, 62, 145, 194, 237, 187, 144, 130, 193, 59, 95, 183, 136, 62, 30, 196, 79, 61, 182, 120, 190, 62, 192, 34, 129, 190, 180, 247, 246, 60, 159, 132, 121, 190, 185, 44, 185, 188, 51, 17, 141, 190, 6, 59, 17, 190, 27, 2, 224, 60, 12, 135, 126, 61, 95, 231, 29, 190, 239, 124, 185, 60, 156, 14, 84, 60, 111, 14, 197, 190, 116, 138, 255, 61, 225, 102, 119, 59, 211, 27, 186, 189, 21, 22, 225, 189, 68, 38, 29, 189, 212, 199, 97, 62, 151, 68, 6, 62, 21, 103, 149, 61, 189, 174, 134, 62, 71, 9, 177, 61, 105, 160, 140, 190, 179, 97, 24, 62, 103, 210, 65, 62, 165, 28, 77, 62, 42, 3, 38, 190, 72, 139, 89, 62, 200, 125, 55, 190, 90, 66, 61, 62, 128, 98, 158, 60, 194, 253, 140, 62, 250, 245, 50, 190, 213, 124, 36, 62, 47, 49, 188, 189, 248, 38, 230, 61, 143, 218, 160, 189, 127, 184, 74, 190, 194, 91, 31, 62, 99, 207, 83, 62, 174, 186, 74, 62, 180, 184, 61, 62, 66, 221, 64, 62, 71, 50, 200, 190, 208, 20, 41, 62, 129, 106, 222, 61, 183, 176, 79, 190, 236, 12, 141, 190, 148, 190, 0, 60, 183, 53, 162, 61, 68, 141, 142, 61, 214, 188, 244, 61, 193, 215, 112, 62, 152, 251, 239, 189, 205, 232, 157, 190, 206, 238, 15, 61, 131, 159, 69, 188, 73, 92, 46, 62, 45, 4, 111, 190, 33, 230, 209, 189, 149, 67, 195, 61, 166, 0, 137, 190, 184, 50, 31, 62, 220, 242, 85, 190, 107, 91, 85, 62, 195, 46, 31, 62, 99, 155, 189, 62, 87, 236, 27, 60, 114, 49, 208, 61, 103, 1, 78, 62, 172, 192, 145, 190, 143, 212, 156, 61, 153, 66, 236, 61, 38, 178, 138, 189, 189, 175, 85, 190, 124, 99, 181, 62, 18, 183, 151, 189, 159, 238, 40, 190, 45, 6, 64, 62, 128, 143, 218, 190, 1, 30, 154, 62, 53, 165, 8, 190, 202, 87, 128, 190, 188, 35, 197, 190, 216, 200, 164, 190, 27, 0, 29, 61, 86, 22, 32, 62, 100, 177, 13, 62, 154, 183, 131, 190, 181, 113, 79, 190, 152, 248, 213, 62, 214, 32, 156, 61, 222, 218, 114, 189, 196, 50, 85, 190, 95, 233, 21, 62, 129, 180, 126, 190, 209, 112, 235, 61, 142, 11, 72, 190, 200, 133, 137, 189, 129, 197, 218, 61, 43, 56, 48, 62, 27, 119, 192, 61, 245, 103, 16, 190, 90, 8, 22, 62, 102, 75, 21, 62, 20, 24, 154, 61, 116, 81, 151, 189, 37, 208, 91, 62, 131, 129, 130, 61, 104, 77, 230, 61, 47, 254, 134, 189, 146, 254, 218, 190, 201, 220, 210, 189, 89, 84, 112, 189, 103, 155, 158, 60, 139, 134, 9, 190, 196, 28, 34, 190, 43, 85, 79, 60, 213, 91, 253, 189, 254, 70, 69, 62, 196, 228, 42, 61, 238, 222, 1, 190, 218, 92, 252, 188, 139, 30, 31, 189, 78, 3, 238, 60, 79, 139, 118, 190, 224, 93, 240, 188, 211, 102, 84, 190, 163, 5, 27, 62, 69, 4, 96, 190, 67, 12, 169, 61, 19, 168, 251, 61, 203, 88, 225, 189, 14, 233, 93, 62, 17, 65, 3, 62, 173, 90, 226, 60, 122, 183, 186, 188, 95, 26, 169, 190, 200, 253, 221, 189, 78, 185, 198, 62, 90, 148, 61, 190, 40, 191, 71, 189, 228, 193, 227, 189, 139, 127, 160, 62, 163, 158, 254, 61, 70, 200, 106, 59, 245, 62, 209, 60, 186, 3, 142, 61, 213, 232, 106, 190, 155, 164, 5, 60, 79, 6, 159, 62, 156, 195, 134, 61, 24, 123, 56, 189, 21, 96, 28, 190, 72, 223, 147, 189, 140, 190, 104, 190, 133, 210, 111, 189, 26, 234, 63, 191, 132, 218, 106, 61, 63, 95, 155, 190, 126, 249, 228, 188, 215, 189, 154, 62, 74, 58, 177, 62, 93, 195, 57, 62, 89, 44, 132, 62, 165, 230, 166, 61, 180, 50, 145, 190, 98, 104, 37, 191, 21, 148, 8, 62, 150, 102, 165, 189, 227, 56, 141, 190, 135, 240, 235, 62, 41, 95, 25, 190, 6, 35, 124, 190, 73, 163, 122, 189, 147, 30, 181, 190, 144, 123, 181, 189, 129, 65, 144, 189, 82, 142, 78, 190, 228, 192, 155, 190, 0, 247, 6, 190, 177, 183, 42, 61, 146, 90, 167, 62, 126, 102, 222, 188, 213, 37, 6, 190, 175, 200, 76, 191, 26, 31, 160, 61, 18, 151, 55, 62, 179, 173, 67, 189, 49, 147, 42, 190, 125, 37, 81, 190, 9, 16, 77, 190, 226, 222, 44, 190, 99, 5, 18, 190, 101, 56, 35, 189, 143, 119, 190, 190, 176, 206, 52, 190, 137, 225, 41, 190, 60, 20, 91, 62, 197, 113, 65, 190, 233, 113, 196, 61, 119, 43, 159, 189, 240, 109, 178, 189, 42, 217, 76, 190, 132, 214, 111, 189, 223, 67, 95, 61, 252, 208, 202, 189, 240, 143, 212, 61, 157, 175, 29, 61, 203, 95, 40, 62, 230, 168, 25, 190, 3, 189, 50, 62, 58, 108, 18, 62, 105, 72, 38, 190, 107, 235, 77, 189, 254, 111, 140, 61, 61, 133, 49, 60, 169, 165, 222, 61, 61, 252, 174, 188, 2, 158, 167, 60, 216, 180, 237, 189, 78, 133, 10, 190, 153, 203, 247, 189, 71, 119, 164, 190, 202, 45, 43, 62, 24, 205, 151, 61, 118, 178, 103, 190, 0, 221, 30, 61, 81, 55, 75, 61, 135, 197, 200, 61, 198, 248, 64, 189, 246, 64, 163, 61, 119, 210, 30, 190, 219, 89, 226, 187, 82, 238, 235, 189, 85, 183, 172, 61, 89, 110, 213, 189, 230, 51, 194, 189, 116, 237, 228, 188, 26, 206, 113, 62, 123, 94, 144, 60, 130, 0, 204, 189, 74, 234, 153, 61, 82, 68, 175, 189, 157, 229, 182, 189, 17, 39, 254, 61, 122, 67, 45, 62, 46, 192, 56, 188, 25, 52, 160, 61, 176, 219, 86, 190, 3, 50, 0, 190, 70, 253, 116, 61, 106, 182, 173, 189, 180, 158, 130, 190, 64, 157, 161, 61, 182, 49, 58, 191, 129, 207, 23, 190, 58, 231, 125, 62, 8, 245, 139, 62, 147, 162, 117, 62, 77, 110, 152, 62, 34, 139, 128, 190, 49, 182, 163, 190, 160, 153, 88, 61, 3, 110, 165, 61, 136, 116, 148, 190, 13, 130, 101, 61, 102, 32, 124, 61, 39, 173, 9, 190, 106, 68, 85, 190, 157, 169, 140, 190, 133, 4, 0, 62, 86, 66, 24, 190, 200, 36, 0, 190, 246, 180, 33, 190, 58, 151, 106, 190, 100, 109, 251, 190, 216, 169, 89, 189, 220, 218, 45, 190, 85, 219, 143, 190, 217, 14, 143, 189, 140, 194, 28, 190, 134, 235, 7, 62, 114, 248, 34, 190, 155, 245, 9, 190, 62, 230, 174, 188, 231, 37, 86, 62, 125, 128, 151, 190, 151, 140, 220, 189, 137, 122, 50, 62, 149, 2, 145, 62, 32, 59, 239, 61, 155, 196, 146, 62, 246, 135, 152, 62, 194, 163, 227, 187, 113, 100, 68, 61, 171, 130, 141, 189, 30, 134, 44, 190, 250, 235, 27, 189, 165, 145, 169, 62, 254, 141, 191, 189, 108, 140, 191, 189, 92, 240, 15, 61, 52, 251, 183, 190, 147, 3, 236, 61, 232, 222, 98, 190, 85, 28, 242, 189, 115, 53, 122, 61, 98, 61, 232, 189, 36, 228, 185, 60, 108, 184, 236, 61, 205, 183, 149, 61, 155, 213, 118, 190, 133, 156, 123, 189, 175, 240, 174, 61, 118, 95, 44, 189, 124, 115, 4, 190, 242, 97, 255, 190, 13, 171, 212, 189, 122, 92, 25, 190, 109, 107, 23, 189, 136, 125, 184, 61, 157, 138, 75, 62, 169, 119, 220, 61, 254, 115, 138, 61, 171, 80, 166, 190, 4, 159, 87, 190, 2, 252, 162, 191, 213, 129, 31, 62, 141, 141, 131, 62, 161, 169, 55, 190, 140, 18, 47, 61, 39, 30, 249, 61, 151, 134, 124, 189, 177, 137, 40, 190, 74, 31, 196, 190, 202, 126, 155, 62, 30, 227, 204, 189, 199, 198, 187, 190, 94, 56, 89, 189, 101, 64, 189, 189, 228, 26, 122, 62, 84, 38, 60, 190, 255, 211, 169, 61, 124, 225, 12, 190, 236, 36, 104, 191, 193, 68, 181, 61, 175, 231, 207, 60, 5, 249, 148, 190, 127, 51, 198, 61, 242, 153, 78, 61, 97, 33, 105, 62, 249, 22, 36, 190, 163, 197, 163, 61, 160, 27, 211, 189, 17, 180, 50, 190, 123, 86, 186, 190, 246, 45, 15, 62, 117, 195, 17, 62, 78, 61, 43, 60, 145, 234, 93, 190, 178, 196, 20, 61, 117, 89, 31, 189, 158, 161, 208, 190, 1, 45, 207, 187, 60, 86, 123, 62, 211, 107, 201, 190, 172, 187, 14, 62, 209, 203, 94, 60, 227, 186, 12, 62, 34, 102, 158, 189, 104, 143, 154, 62, 179, 14, 226, 61, 192, 184, 14, 189, 130, 77, 148, 190, 107, 46, 155, 62, 236, 9, 144, 62, 216, 144, 57, 62, 60, 135, 185, 189, 176, 67, 37, 62, 13, 207, 70, 190, 62, 227, 187, 62, 200, 142, 2, 189, 207, 47, 221, 62, 236, 23, 18, 189, 196, 51, 175, 61, 127, 8, 14, 189, 49, 130, 254, 60, 196, 161, 253, 190, 222, 7, 170, 189, 235, 172, 91, 186, 163, 104, 227, 61, 194, 85, 41, 190, 85, 212, 138, 62, 253, 145, 62, 188, 23, 249, 249, 190, 73, 4, 38, 188, 19, 107, 50, 58, 192, 126, 72, 61, 30, 98, 160, 189, 251, 17, 228, 190, 250, 152, 17, 62, 91, 4, 139, 62, 210, 133, 14, 63, 108, 34, 150, 62, 15, 111, 154, 190, 211, 163, 145, 189, 72, 224, 150, 62, 254, 151, 158, 61, 227, 109, 216, 61, 55, 228, 130, 191, 39, 71, 135, 62, 231, 122, 21, 61, 19, 239, 203, 61, 80, 122, 83, 62, 8, 208, 184, 61, 208, 88, 109, 60, 28, 200, 87, 62, 244, 243, 92, 61, 41, 92, 149, 189, 237, 166, 51, 62, 83, 220, 188, 61, 71, 35, 75, 190, 133, 59, 231, 189, 91, 186, 157, 189, 25, 30, 176, 189, 33, 109, 76, 191, 36, 44, 93, 62, 147, 86, 146, 62, 123, 80, 216, 189, 173, 251, 70, 61, 138, 181, 232, 190, 38, 21, 118, 62, 229, 97, 4, 191, 7, 227, 167, 61, 80, 211, 169, 190, 180, 232, 132, 190, 25, 43, 28, 62, 145, 12, 56, 62, 163, 26, 251, 189, 134, 198, 111, 190, 246, 158, 196, 189, 117, 12, 107, 62, 208, 7, 249, 62, 206, 210, 167, 190, 198, 151, 71, 190, 105, 162, 58, 190, 178, 172, 98, 61, 125, 87, 136, 190, 131, 122, 193, 62, 71, 38, 112, 62, 68, 75, 150, 62, 127, 68, 14, 191, 234, 183, 187, 190, 126, 58, 171, 188, 20, 178, 8, 62, 163, 188, 16, 190, 18, 55, 130, 62, 36, 36, 38, 190, 48, 153, 223, 59, 120, 18, 160, 190, 41, 3, 56, 190, 124, 94, 170, 189, 152, 216, 143, 59, 73, 237, 29, 190, 235, 230, 224, 60, 19, 20, 136, 62, 226, 81, 136, 60, 127, 175, 230, 189, 253, 36, 246, 190, 62, 209, 227, 190, 248, 93, 102, 190, 79, 114, 184, 189, 5, 43, 10, 62, 56, 219, 57, 191, 19, 57, 152, 190, 216, 81, 173, 61, 69, 253, 50, 190, 167, 106, 17, 190, 88, 159, 162, 190, 17, 70, 174, 189, 226, 225, 218, 189, 163, 40, 134, 190, 238, 78, 91, 189, 251, 252, 139, 189, 65, 50, 1, 191, 167, 185, 129, 61, 71, 214, 74, 190, 186, 111, 73, 60, 104, 107, 141, 190, 156, 247, 15, 189, 239, 171, 225, 60, 239, 99, 135, 189, 224, 60, 241, 61, 224, 177, 5, 62, 159, 232, 212, 61, 235, 165, 51, 190, 7, 216, 164, 61, 105, 134, 117, 189, 144, 215, 185, 61, 204, 204, 27, 62, 58, 146, 63, 61, 147, 206, 213, 189, 94, 240, 246, 61, 64, 65, 130, 61, 92, 27, 122, 189, 237, 60, 155, 189, 135, 82, 216, 61, 108, 108, 219, 189, 80, 167, 159, 189, 76, 171, 208, 189, 127, 65, 10, 62, 202, 194, 46, 190, 160, 225, 186, 187, 88, 72, 40, 190, 84, 41, 51, 190, 243, 126, 210, 189, 196, 99, 14, 190, 67, 7, 254, 189, 106, 4, 48, 190, 192, 31, 154, 189, 7, 135, 178, 61, 18, 43, 193, 188, 243, 43, 183, 60, 49, 105, 10, 62, 25, 106, 217, 60, 88, 36, 4, 190, 54, 217, 36, 190, 34, 8, 107, 61, 182, 71, 199, 189, 64, 167, 38, 60, 41, 244, 249, 189, 82, 52, 25, 190, 45, 10, 26, 188, 240, 201, 71, 61, 126, 155, 232, 189, 106, 65, 148, 61, 2, 43, 245, 189, 76, 135, 3, 62, 105, 97, 125, 189, 65, 71, 49, 190, 114, 175, 212, 60, 107, 94, 14, 190, 102, 115, 14, 187, 72, 42, 20, 190, 136, 91, 193, 61, 193, 217, 160, 61, 101, 54, 63, 62, 31, 186, 214, 190, 75, 150, 144, 62, 120, 32, 197, 189, 106, 188, 151, 60, 113, 171, 201, 186, 245, 56, 130, 62, 184, 182, 28, 61, 153, 92, 2, 61, 86, 216, 249, 189, 110, 222, 196, 61, 123, 180, 165, 188, 241, 22, 63, 190, 188, 5, 33, 191, 16, 27, 232, 61, 12, 149, 57, 62, 142, 18, 172, 62, 223, 2, 188, 62, 209, 25, 154, 190, 255, 93, 175, 189, 88, 39, 213, 61, 49, 149, 3, 62, 130, 199, 174, 189, 9, 208, 35, 191, 219, 229, 100, 190, 176, 245, 162, 61, 105, 88, 38, 190, 244, 22, 142, 61, 136, 199, 251, 189, 10, 184, 10, 189, 65, 77, 222, 188, 133, 150, 246, 189, 109, 8, 154, 189, 213, 144, 97, 188, 133, 249, 27, 189, 236, 71, 178, 61, 249, 226, 73, 190, 66, 84, 34, 190, 157, 30, 2, 62, 68, 8, 165, 61, 36, 165, 223, 61, 236, 212, 83, 190, 141, 250, 75, 61, 91, 12, 201, 61, 85, 232, 250, 189, 188, 20, 248, 187, 75, 90, 12, 190, 139, 224, 26, 190, 102, 242, 180, 188, 243, 251, 211, 189, 156, 75, 250, 189, 214, 141, 18, 62, 46, 64, 201, 61, 8, 138, 70, 189, 29, 254, 173, 60, 120, 13, 255, 189, 87, 192, 3, 62, 128, 122, 11, 59, 196, 255, 243, 188, 226, 82, 150, 62, 17, 216, 122, 62, 181, 205, 52, 60, 74, 196, 196, 189, 223, 127, 15, 57, 152, 220, 28, 189, 177, 88, 112, 60, 67, 198, 136, 62, 222, 7, 226, 189, 99, 255, 224, 61, 27, 130, 18, 190, 20, 249, 27, 189, 184, 233, 70, 187, 68, 21, 193, 62, 49, 28, 179, 61, 73, 173, 67, 62, 165, 225, 177, 189, 33, 178, 184, 190, 109, 203, 156, 190, 187, 37, 155, 62, 237, 235, 65, 189, 166, 212, 95, 62, 255, 209, 194, 189, 239, 4, 0, 190, 63, 33, 13, 61, 189, 239, 203, 61, 183, 150, 86, 62, 136, 74, 161, 190, 69, 250, 36, 191, 25, 100, 105, 62, 14, 19, 235, 61, 74, 194, 8, 62, 55, 211, 161, 189, 205, 3, 191, 188, 30, 66, 0, 190, 192, 88, 26, 190, 6, 132, 144, 189, 55, 135, 32, 62, 5, 197, 16, 62, 36, 116, 232, 189, 150, 180, 57, 62, 223, 251, 149, 60, 61, 99, 252, 61, 25, 127, 185, 190, 140, 202, 185, 61, 209, 65, 46, 189, 29, 167, 36, 188, 133, 138, 197, 61, 82, 208, 59, 190, 136, 56, 208, 58, 13, 29, 189, 60, 60, 16, 218, 61, 178, 121, 99, 189, 186, 133, 42, 62, 133, 37, 93, 62, 40, 143, 24, 190, 177, 30, 154, 61, 44, 13, 226, 60, 34, 175, 83, 62, 159, 240, 24, 62, 118, 54, 248, 189, 219, 72, 41, 190, 183, 157, 230, 60, 147, 208, 255, 189, 204, 170, 147, 62, 224, 14, 62, 60, 194, 37, 83, 61, 66, 116, 150, 187, 234, 180, 65, 62, 169, 58, 244, 61, 63, 209, 74, 62, 128, 114, 75, 62, 16, 218, 34, 190, 148, 64, 61, 190, 166, 220, 19, 61, 101, 221, 209, 61, 170, 28, 227, 189, 166, 209, 92, 62, 156, 217, 157, 61, 163, 157, 155, 190, 216, 230, 134, 60, 108, 19, 237, 190, 83, 231, 107, 62, 183, 116, 244, 189, 22, 50, 168, 189, 210, 229, 90, 190, 128, 182, 154, 190, 176, 251, 253, 61, 225, 79, 85, 62, 184, 136, 213, 189, 167, 138, 140, 189, 41, 226, 137, 190, 181, 52, 92, 62, 242, 36, 20, 190, 49, 1, 78, 190, 19, 119, 135, 190, 135, 138, 85, 190, 218, 159, 225, 190, 114, 53, 52, 190, 226, 213, 72, 62, 87, 181, 196, 60, 45, 153, 130, 62, 159, 21, 37, 187, 4, 165, 95, 189, 182, 43, 202, 190, 42, 92, 224, 189, 60, 145, 85, 62, 232, 63, 130, 190, 178, 48, 49, 62, 200, 84, 108, 62, 4, 168, 223, 60, 153, 32, 14, 191, 66, 135, 40, 190, 84, 234, 206, 60, 220, 151, 113, 62, 64, 7, 28, 189, 19, 8, 192, 190, 231, 119, 200, 190, 71, 152, 246, 190, 248, 116, 29, 190, 172, 215, 70, 190, 56, 127, 183, 190, 60, 151, 126, 190, 38, 65, 60, 190, 108, 141, 176, 61, 77, 83, 8, 62, 86, 161, 18, 190, 86, 224, 211, 189, 58, 38, 97, 189, 15, 143, 226, 58, 182, 19, 41, 62, 194, 59, 72, 190, 229, 121, 240, 189, 152, 151, 96, 61, 71, 220, 184, 189, 35, 254, 50, 62, 122, 19, 253, 188, 211, 209, 69, 62, 154, 121, 128, 189, 23, 106, 243, 188, 177, 99, 45, 59, 140, 243, 248, 61, 24, 169, 51, 190, 100, 116, 81, 60, 78, 237, 98, 189, 181, 156, 157, 190, 93, 64, 148, 189, 46, 6, 161, 189, 59, 234, 55, 62, 81, 195, 35, 61, 226, 49, 178, 61, 124, 199, 113, 61, 202, 171, 20, 62, 83, 26, 216, 61, 159, 72, 134, 189, 11, 122, 52, 190, 134, 87, 13, 190, 43, 123, 146, 188, 93, 181, 160, 189, 221, 60, 45, 189, 253, 162, 215, 188, 152, 127, 65, 189, 113, 201, 43, 61, 47, 165, 201, 188, 48, 18, 44, 190, 234, 178, 63, 190, 70, 74, 248, 61, 244, 126, 63, 60, 21, 23, 152, 189, 112, 0, 25, 189, 222, 21, 145, 189, 34, 66, 166, 189, 17, 65, 166, 189, 208, 104, 171, 189, 209, 223, 44, 62, 7, 80, 29, 189, 165, 218, 253, 189, 220, 129, 167, 61, 49, 123, 108, 189, 153, 249, 95, 61, 40, 18, 138, 189, 94, 114, 36, 62, 153, 150, 80, 188, 236, 69, 235, 189, 242, 152, 25, 189, 105, 131, 22, 62, 29, 231, 39, 62, 60, 129, 49, 61, 120, 77, 99, 188, 189, 192, 57, 61, 121, 73, 18, 190, 129, 172, 220, 189, 59, 159, 241, 61, 172, 113, 227, 189, 146, 88, 82, 61, 163, 181, 11, 62, 39, 0, 112, 62, 64, 197, 51, 189, 100, 56, 37, 62, 135, 4, 45, 62, 158, 223, 13, 62, 10, 207, 174, 61, 191, 235, 212, 189, 118, 43, 158, 190, 116, 150, 50, 62, 92, 93, 194, 189, 56, 180, 181, 189, 65, 168, 135, 188, 56, 234, 156, 60, 13, 162, 171, 62, 119, 99, 15, 62, 222, 40, 34, 62, 10, 199, 43, 189, 251, 239, 95, 61, 164, 251, 220, 189, 187, 81, 86, 62, 72, 135, 6, 62, 203, 1, 45, 190, 151, 203, 47, 62, 9, 210, 93, 190, 75, 220, 22, 62, 236, 20, 191, 61, 7, 219, 19, 62, 210, 143, 103, 190, 193, 237, 111, 60, 149, 49, 123, 190, 212, 27, 225, 189, 41, 37, 137, 61, 189, 231, 159, 190, 233, 16, 41, 187, 225, 179, 15, 188, 22, 46, 207, 190, 221, 104, 12, 62, 25, 15, 198, 61, 2, 83, 85, 190, 236, 14, 83, 190, 13, 33, 192, 61, 148, 106, 12, 188, 144, 189, 17, 190, 172, 157, 96, 62, 103, 53, 42, 190, 248, 185, 191, 61, 158, 164, 44, 189, 88, 102, 53, 60, 207, 255, 99, 61, 98, 150, 64, 62, 100, 87, 154, 62, 103, 124, 32, 62, 5, 147, 213, 189, 31, 180, 96, 189, 216, 78, 147, 61, 146, 143, 138, 61, 217, 106, 166, 190, 210, 190, 129, 61, 1, 233, 128, 189, 152, 188, 219, 189, 163, 210, 152, 62, 233, 115, 225, 60, 40, 179, 147, 61, 2, 43, 34, 189, 4, 195, 246, 61, 203, 188, 45, 190, 15, 156, 18, 188, 140, 61, 25, 62, 207, 221, 247, 61, 104, 35, 39, 62, 188, 90, 244, 61, 200, 13, 17, 190, 172, 150, 80, 62, 166, 204, 153, 61, 43, 96, 73, 189, 85, 143, 157, 189, 107, 13, 31, 188, 119, 186, 60, 62, 45, 161, 58, 188, 216, 68, 139, 189, 233, 182, 97, 190, 203, 248, 11, 189, 236, 211, 245, 61, 6, 235, 0, 62, 91, 80, 38, 190, 192, 132, 117, 62, 98, 69, 88, 61, 164, 178, 111, 190, 136, 144, 90, 62, 47, 88, 74, 62, 118, 103, 49, 62, 179, 129, 237, 189, 112, 113, 0, 61, 72, 75, 227, 189, 26, 73, 73, 61, 200, 123, 233, 60, 124, 228, 42, 189, 181, 24, 250, 189, 97, 186, 78, 189, 136, 131, 177, 189, 243, 243, 9, 190, 103, 150, 158, 189, 132, 212, 205, 188, 150, 32, 21, 190, 238, 129, 53, 60, 226, 253, 3, 190, 11, 14, 46, 190, 87, 57, 135, 189, 7, 81, 169, 61, 49, 110, 29, 61, 222, 79, 26, 61, 58, 1, 246, 188, 243, 233, 37, 62, 79, 26, 185, 61, 249, 247, 40, 190, 148, 145, 197, 188, 171, 176, 42, 190, 151, 170, 181, 59, 146, 188, 35, 190, 76, 153, 130, 189, 255, 223, 19, 190, 41, 185, 114, 61, 201, 166, 175, 61, 4, 180, 184, 61, 1, 50, 19, 190, 88, 151, 98, 189, 107, 178, 57, 190, 178, 43, 222, 189, 74, 253, 123, 189, 198, 235, 110, 61, 51, 81, 191, 60, 49, 147, 17, 190, 76, 44, 94, 189, 241, 111, 82, 190, 203, 127, 128, 60, 30, 26, 152, 61, 114, 132, 149, 60, 71, 110, 224, 60, 6, 31, 19, 190, 142, 196, 38, 190, 172, 235, 222, 186, 143, 131, 9, 61, 74, 188, 171, 61, 117, 181, 7, 60, 134, 232, 181, 188, 17, 184, 214, 188, 155, 61, 45, 61, 176, 0, 41, 190, 26, 40, 9, 62, 25, 32, 125, 60, 255, 240, 235, 189, 219, 148, 217, 61, 113, 43, 36, 62, 16, 80, 56, 190, 86, 39, 7, 62, 90, 38, 69, 190, 89, 81, 37, 60, 233, 38, 93, 190, 212, 187, 14, 62, 198, 238, 73, 62, 118, 71, 83, 62, 247, 237, 221, 61, 242, 207, 75, 62, 184, 83, 118, 62, 217, 71, 55, 190, 54, 69, 0, 62, 31, 216, 21, 61, 183, 90, 255, 60, 60, 116, 26, 189, 199, 157, 65, 62, 79, 20, 202, 61, 232, 139, 74, 190, 74, 66, 22, 187, 37, 219, 191, 190, 141, 243, 9, 189, 105, 55, 155, 61, 18, 76, 163, 189, 177, 168, 106, 189, 231, 130, 51, 189, 29, 226, 0, 62, 42, 69, 31, 190, 96, 63, 7, 61, 98, 133, 54, 190, 19, 219, 71, 190, 165, 66, 4, 62, 160, 237, 114, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 64, 162, 62, 73, 91, 58, 62, 235, 146, 176, 62, 120, 28, 110, 60, 54, 233, 55, 61, 188, 67, 241, 189, 222, 102, 4, 62, 225, 26, 127, 190, 81, 226, 255, 189, 100, 251, 94, 62, 147, 9, 137, 188, 180, 97, 141, 62, 42, 242, 4, 62, 217, 206, 248, 61, 195, 34, 172, 189, 111, 56, 116, 61, 125, 60, 151, 190, 215, 59, 41, 190, 118, 243, 185, 62, 184, 146, 131, 189, 15, 182, 1, 62, 66, 147, 166, 190, 67, 245, 76, 189, 55, 217, 24, 61, 106, 140, 236, 60, 28, 245, 65, 190, 223, 179, 16, 190, 225, 79, 177, 190, 20, 146, 11, 189, 44, 63, 169, 61, 50, 228, 179, 189, 177, 147, 45, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 7, 73, 63, 29, 5, 109, 190, 92, 145, 196, 190, 156, 54, 187, 62, 32, 38, 139, 61, 147, 106, 28, 62, 124, 200, 10, 63, 97, 44, 12, 62, 227, 179, 69, 190, 180, 202, 54, 191, 202, 227, 184, 62, 23, 53, 235, 62, 8, 135, 185, 190, 243, 221, 17, 191, 100, 17, 229, 62, 13, 227, 76, 191, 174, 101, 71, 62, 63, 123, 177, 188, 71, 102, 136, 190, 253, 235, 197, 189, 244, 6, 217, 62, 197, 125, 185, 61, 160, 180, 168, 62, 18, 206, 183, 190, 187, 134, 225, 61, 85, 203, 236, 189, 204, 14, 101, 190, 62, 7, 146, 62, 111, 217, 33, 190, 28, 112, 38, 61, 149, 149, 240, 189, 36, 170, 78, 61, 149, 255, 153, 61, 112, 0, 123, 187, 193, 173, 224, 189, 71, 216, 23, 61, 106, 97, 137, 190, 40, 91, 88, 62, 153, 186, 200, 189, 179, 191, 54, 62, 63, 81, 7, 62, 91, 132, 140, 62, 63, 159, 223, 189, 164, 220, 64, 190, 156, 111, 229, 189, 250, 123, 45, 189, 42, 231, 86, 61, 6, 32, 129, 188, 173, 195, 12, 62, 42, 102, 165, 189, 57, 210, 117, 190, 130, 240, 204, 61, 14, 151, 71, 189, 39, 206, 118, 62, 107, 240, 84, 189, 39, 206, 145, 188, 161, 54, 231, 189, 255, 250, 56, 62, 71, 2, 25, 62, 76, 54, 109, 62, 246, 13, 39, 190, 76, 235, 18, 62, 20, 36, 254, 61, 19, 13, 69, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 231, 237, 188, 75, 184, 176, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {106, 82, 175, 191, 182, 162, 200, 63, 210, 57, 147, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {35, 99, 209, 191, 27, 83, 217, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0032/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}