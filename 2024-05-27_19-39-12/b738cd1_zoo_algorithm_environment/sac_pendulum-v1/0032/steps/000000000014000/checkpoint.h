// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 26, 107, 191, 249, 74, 202, 62, 91, 18, 161, 190, 131, 136, 254, 60, 119, 85, 97, 63, 2, 83, 112, 190, 221, 49, 155, 62, 182, 168, 129, 62, 162, 224, 204, 190, 102, 113, 105, 190, 166, 72, 92, 63, 60, 167, 68, 190, 29, 68, 182, 62, 77, 146, 39, 190, 21, 21, 154, 190, 128, 115, 137, 190, 19, 141, 66, 190, 191, 132, 127, 62, 221, 117, 213, 189, 190, 31, 83, 191, 22, 31, 146, 62, 114, 86, 84, 191, 97, 36, 45, 191, 106, 46, 52, 188, 124, 73, 88, 61, 55, 254, 10, 191, 141, 224, 3, 63, 29, 44, 45, 63, 147, 77, 170, 190, 189, 249, 213, 190, 179, 97, 63, 62, 44, 125, 75, 63, 110, 94, 188, 62, 69, 203, 136, 190, 234, 10, 173, 189, 10, 11, 66, 191, 112, 174, 43, 189, 15, 20, 39, 189, 109, 31, 181, 62, 102, 101, 10, 191, 153, 208, 86, 63, 213, 160, 70, 61, 192, 107, 222, 189, 32, 106, 125, 191, 70, 79, 11, 63, 15, 179, 8, 63, 14, 211, 134, 191, 216, 197, 71, 190, 174, 133, 159, 60, 85, 125, 220, 63, 224, 248, 13, 63, 34, 236, 226, 62, 116, 39, 76, 62, 73, 145, 61, 62, 130, 136, 15, 191, 27, 251, 84, 191, 4, 58, 174, 190, 254, 194, 3, 63, 35, 63, 112, 191, 154, 15, 111, 190, 2, 155, 131, 190, 40, 30, 184, 63, 252, 249, 166, 62, 247, 203, 253, 62, 120, 121, 141, 190, 14, 165, 11, 63, 207, 200, 220, 190, 227, 186, 33, 191, 246, 113, 25, 191, 149, 117, 87, 63, 33, 26, 217, 62, 116, 149, 25, 63, 65, 85, 65, 63, 113, 91, 65, 63, 24, 102, 188, 62, 29, 7, 113, 62, 78, 167, 112, 63, 168, 79, 235, 62, 17, 236, 65, 63, 137, 44, 88, 191, 4, 104, 223, 190, 76, 227, 97, 63, 135, 159, 18, 63, 108, 76, 77, 62, 168, 171, 109, 62, 131, 76, 9, 63, 195, 251, 201, 62, 92, 38, 59, 191, 203, 153, 223, 190, 130, 223, 179, 190, 176, 222, 13, 191, 187, 250, 159, 62, 31, 109, 243, 62, 134, 6, 182, 62, 67, 160, 162, 63, 8, 48, 162, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 95, 254, 190, 153, 197, 24, 190, 29, 108, 93, 62, 183, 0, 160, 189, 140, 151, 21, 191, 246, 118, 5, 63, 221, 201, 3, 63, 135, 184, 77, 63, 193, 131, 26, 61, 79, 230, 88, 63, 67, 167, 64, 191, 105, 77, 86, 61, 8, 9, 189, 62, 218, 10, 229, 62, 2, 48, 150, 190, 222, 154, 164, 62, 86, 154, 148, 190, 81, 86, 51, 191, 52, 114, 155, 190, 131, 109, 210, 190, 225, 30, 169, 190, 76, 195, 63, 61, 143, 214, 135, 62, 186, 225, 131, 189, 208, 42, 139, 190, 242, 219, 150, 189, 82, 245, 60, 191, 132, 26, 23, 62, 255, 155, 146, 190, 169, 133, 248, 190, 170, 34, 43, 191, 59, 203, 130, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 188, 1, 63, 74, 130, 94, 191, 90, 197, 35, 62, 156, 72, 175, 61, 76, 91, 145, 189, 161, 207, 111, 62, 127, 157, 140, 62, 72, 254, 148, 61, 130, 216, 121, 62, 49, 125, 67, 61, 99, 221, 125, 190, 210, 148, 137, 191, 164, 235, 61, 62, 210, 190, 27, 61, 97, 6, 253, 189, 72, 44, 49, 62, 59, 70, 68, 61, 247, 246, 92, 191, 225, 75, 41, 63, 122, 241, 228, 190, 198, 219, 255, 61, 18, 201, 101, 190, 45, 71, 220, 190, 106, 56, 173, 190, 142, 160, 178, 190, 130, 224, 27, 62, 225, 19, 105, 61, 235, 65, 104, 189, 60, 134, 206, 190, 229, 102, 178, 191, 83, 232, 22, 62, 149, 179, 38, 61, 72, 184, 179, 59, 82, 75, 174, 62, 25, 108, 41, 61, 57, 83, 213, 62, 224, 17, 201, 190, 235, 206, 183, 187, 197, 186, 55, 190, 43, 95, 172, 190, 210, 96, 124, 190, 52, 112, 137, 189, 152, 96, 248, 188, 225, 215, 5, 189, 225, 70, 219, 189, 124, 210, 207, 59, 19, 205, 138, 59, 134, 182, 112, 190, 12, 214, 174, 61, 136, 210, 166, 62, 156, 228, 126, 190, 201, 17, 148, 190, 18, 58, 143, 190, 104, 93, 140, 62, 200, 17, 99, 189, 164, 190, 28, 62, 124, 251, 199, 62, 1, 194, 242, 61, 249, 239, 67, 191, 216, 157, 152, 62, 244, 124, 83, 62, 4, 3, 21, 62, 179, 13, 22, 190, 0, 41, 104, 62, 38, 185, 25, 190, 5, 113, 170, 62, 107, 8, 109, 61, 141, 210, 192, 62, 58, 112, 121, 190, 242, 91, 228, 61, 103, 44, 210, 189, 194, 22, 87, 190, 231, 248, 168, 189, 175, 119, 237, 189, 34, 152, 229, 61, 164, 159, 22, 62, 168, 55, 91, 62, 200, 195, 137, 62, 242, 63, 10, 62, 194, 57, 197, 190, 240, 104, 210, 61, 43, 105, 191, 62, 227, 24, 245, 190, 167, 209, 162, 190, 78, 9, 58, 190, 31, 92, 158, 61, 226, 29, 161, 189, 219, 5, 30, 62, 196, 114, 180, 62, 151, 103, 239, 189, 90, 17, 43, 191, 253, 162, 23, 62, 238, 209, 48, 186, 55, 93, 5, 62, 67, 82, 127, 190, 47, 173, 179, 189, 36, 60, 23, 62, 191, 135, 168, 190, 136, 80, 25, 62, 38, 167, 165, 190, 100, 133, 149, 62, 168, 210, 122, 62, 168, 71, 219, 62, 227, 146, 46, 62, 181, 236, 25, 62, 252, 232, 50, 62, 155, 40, 196, 190, 135, 155, 187, 61, 149, 97, 20, 62, 252, 22, 124, 190, 242, 250, 177, 189, 237, 206, 208, 62, 96, 87, 250, 189, 171, 20, 31, 191, 240, 105, 68, 62, 68, 24, 22, 191, 85, 47, 220, 62, 43, 188, 153, 189, 42, 227, 111, 190, 178, 131, 191, 190, 138, 204, 246, 190, 61, 191, 132, 59, 195, 185, 182, 62, 68, 46, 6, 62, 40, 186, 165, 190, 44, 163, 91, 190, 119, 94, 225, 62, 205, 189, 40, 61, 7, 48, 135, 190, 8, 18, 17, 190, 34, 225, 96, 62, 193, 249, 176, 190, 99, 19, 0, 62, 114, 198, 163, 190, 167, 3, 240, 189, 96, 113, 201, 189, 243, 86, 148, 62, 47, 60, 42, 62, 199, 30, 2, 191, 77, 9, 41, 62, 84, 196, 182, 61, 34, 208, 169, 190, 32, 123, 121, 61, 180, 228, 167, 62, 145, 167, 125, 191, 51, 193, 82, 190, 151, 49, 54, 190, 241, 155, 70, 191, 70, 158, 162, 190, 119, 16, 38, 189, 196, 96, 114, 189, 203, 70, 217, 189, 56, 22, 70, 190, 214, 101, 68, 190, 47, 80, 146, 189, 165, 96, 180, 62, 27, 233, 191, 190, 3, 153, 162, 190, 66, 215, 153, 190, 74, 215, 81, 190, 136, 130, 161, 59, 250, 64, 39, 190, 218, 208, 210, 61, 17, 6, 39, 190, 9, 5, 42, 62, 52, 57, 217, 189, 192, 244, 152, 62, 214, 84, 17, 62, 150, 121, 217, 60, 213, 126, 139, 62, 161, 6, 186, 190, 112, 223, 252, 60, 155, 32, 176, 61, 121, 229, 69, 191, 102, 113, 220, 61, 253, 117, 36, 63, 102, 18, 63, 191, 233, 131, 211, 190, 240, 206, 221, 190, 171, 62, 8, 62, 96, 231, 172, 190, 205, 85, 45, 62, 249, 239, 12, 189, 2, 125, 38, 62, 104, 44, 212, 190, 137, 205, 89, 189, 33, 109, 247, 62, 91, 37, 49, 62, 35, 165, 77, 190, 153, 33, 180, 190, 183, 14, 133, 190, 125, 245, 228, 190, 228, 142, 95, 61, 89, 105, 1, 190, 223, 164, 156, 62, 184, 8, 21, 190, 17, 79, 105, 62, 254, 175, 143, 62, 99, 24, 199, 62, 157, 98, 60, 62, 150, 253, 148, 62, 110, 79, 23, 62, 4, 81, 10, 191, 38, 130, 215, 190, 194, 93, 255, 61, 151, 119, 211, 190, 162, 207, 37, 190, 114, 192, 23, 63, 141, 8, 3, 191, 255, 131, 10, 191, 110, 94, 157, 62, 109, 245, 31, 191, 80, 227, 177, 189, 27, 84, 35, 189, 35, 223, 165, 190, 148, 106, 164, 190, 70, 253, 153, 190, 234, 216, 114, 189, 15, 28, 238, 62, 225, 14, 28, 189, 78, 16, 147, 190, 140, 216, 189, 191, 187, 24, 252, 60, 107, 244, 130, 61, 122, 9, 66, 189, 63, 236, 48, 190, 55, 23, 241, 189, 176, 82, 107, 60, 226, 222, 44, 190, 114, 149, 239, 189, 153, 76, 205, 188, 44, 75, 18, 191, 201, 24, 2, 190, 108, 25, 79, 190, 24, 110, 108, 62, 182, 179, 37, 190, 97, 20, 10, 62, 42, 238, 141, 189, 60, 56, 123, 188, 49, 97, 157, 190, 254, 33, 170, 59, 93, 107, 34, 62, 252, 208, 202, 189, 22, 59, 54, 191, 12, 49, 103, 189, 14, 67, 101, 62, 230, 168, 25, 190, 221, 246, 118, 62, 72, 150, 103, 62, 76, 173, 225, 189, 135, 55, 67, 189, 210, 87, 4, 62, 63, 52, 169, 61, 169, 165, 222, 61, 80, 56, 101, 61, 253, 17, 99, 61, 252, 72, 16, 191, 2, 102, 157, 189, 142, 64, 181, 189, 126, 80, 180, 190, 43, 201, 143, 62, 240, 1, 180, 189, 220, 128, 118, 61, 103, 147, 142, 61, 78, 49, 171, 62, 150, 110, 252, 61, 9, 181, 130, 190, 133, 16, 176, 61, 62, 73, 38, 190, 166, 37, 89, 191, 3, 24, 201, 60, 210, 123, 173, 62, 228, 201, 235, 190, 209, 135, 58, 190, 117, 103, 7, 190, 13, 22, 16, 63, 78, 0, 17, 190, 7, 3, 33, 62, 122, 222, 173, 61, 97, 254, 182, 190, 247, 214, 134, 191, 199, 131, 52, 62, 202, 176, 195, 62, 89, 37, 74, 191, 187, 239, 64, 61, 36, 188, 223, 190, 242, 46, 157, 61, 52, 113, 183, 190, 182, 101, 143, 189, 36, 227, 151, 190, 92, 26, 44, 62, 209, 152, 28, 191, 151, 192, 21, 190, 115, 63, 112, 62, 109, 86, 122, 62, 91, 211, 132, 62, 157, 74, 122, 62, 81, 179, 244, 190, 183, 245, 215, 190, 26, 31, 5, 189, 221, 152, 36, 61, 40, 8, 25, 190, 174, 68, 1, 59, 142, 254, 5, 62, 82, 22, 3, 191, 10, 205, 82, 190, 12, 145, 213, 191, 32, 124, 30, 63, 89, 219, 77, 190, 172, 247, 67, 190, 49, 57, 116, 189, 34, 50, 169, 190, 24, 46, 63, 191, 212, 188, 125, 190, 159, 1, 206, 61, 253, 231, 8, 191, 150, 127, 82, 190, 152, 132, 57, 189, 141, 167, 32, 61, 140, 6, 151, 190, 15, 187, 68, 190, 211, 66, 88, 60, 55, 82, 119, 62, 158, 31, 202, 190, 30, 253, 21, 61, 138, 15, 57, 62, 163, 146, 139, 62, 147, 57, 61, 61, 133, 191, 157, 62, 225, 43, 139, 62, 148, 89, 75, 189, 23, 18, 79, 61, 185, 236, 142, 189, 11, 251, 0, 191, 77, 118, 19, 61, 176, 109, 139, 62, 94, 135, 24, 190, 19, 140, 248, 190, 178, 65, 76, 189, 66, 13, 3, 191, 172, 150, 170, 62, 76, 34, 90, 190, 60, 215, 79, 190, 7, 218, 5, 61, 221, 117, 142, 190, 198, 67, 233, 187, 233, 118, 172, 62, 208, 157, 143, 60, 25, 39, 151, 190, 2, 80, 26, 190, 5, 55, 196, 61, 131, 34, 231, 189, 28, 123, 49, 63, 173, 241, 47, 191, 184, 81, 62, 190, 90, 22, 254, 187, 109, 107, 23, 189, 107, 102, 247, 61, 120, 108, 63, 62, 8, 11, 25, 62, 228, 118, 195, 61, 93, 12, 43, 191, 19, 181, 82, 190, 152, 244, 135, 191, 71, 113, 53, 62, 63, 174, 173, 62, 126, 72, 16, 190, 43, 83, 140, 189, 198, 56, 89, 62, 50, 120, 205, 190, 177, 187, 59, 63, 101, 39, 239, 188, 18, 238, 235, 62, 96, 175, 122, 189, 144, 190, 211, 190, 17, 148, 10, 189, 47, 137, 10, 190, 189, 208, 146, 62, 27, 21, 132, 190, 62, 71, 86, 61, 78, 127, 189, 189, 32, 14, 216, 191, 145, 163, 87, 61, 125, 64, 177, 61, 211, 196, 73, 190, 209, 60, 160, 62, 123, 23, 201, 61, 43, 245, 207, 62, 51, 218, 141, 190, 174, 227, 100, 61, 64, 146, 36, 189, 197, 180, 29, 191, 104, 77, 155, 190, 248, 5, 88, 62, 59, 56, 220, 61, 188, 165, 252, 187, 43, 203, 41, 190, 213, 172, 175, 61, 55, 39, 135, 188, 100, 51, 142, 190, 200, 124, 18, 189, 148, 119, 12, 63, 100, 20, 105, 191, 77, 140, 62, 191, 229, 241, 75, 190, 234, 218, 79, 62, 32, 24, 132, 190, 79, 180, 201, 62, 1, 38, 130, 62, 44, 51, 149, 60, 177, 96, 115, 191, 50, 65, 226, 62, 18, 186, 164, 62, 206, 23, 160, 60, 190, 106, 143, 189, 106, 130, 58, 62, 198, 30, 135, 190, 77, 87, 203, 62, 99, 72, 172, 188, 114, 123, 185, 62, 198, 128, 181, 187, 29, 233, 28, 61, 103, 78, 144, 61, 121, 87, 98, 61, 47, 137, 5, 191, 63, 245, 191, 188, 114, 35, 149, 189, 93, 211, 4, 62, 59, 51, 208, 189, 87, 146, 220, 62, 61, 36, 23, 190, 189, 116, 240, 190, 148, 210, 232, 189, 200, 209, 74, 190, 135, 125, 202, 61, 255, 45, 166, 61, 82, 80, 86, 191, 82, 234, 225, 61, 165, 136, 156, 62, 211, 161, 19, 63, 120, 25, 198, 62, 200, 163, 143, 190, 112, 56, 44, 190, 65, 150, 145, 62, 236, 75, 57, 62, 188, 242, 201, 61, 250, 225, 116, 191, 234, 1, 113, 62, 32, 70, 103, 61, 198, 90, 15, 188, 240, 146, 6, 62, 187, 38, 148, 60, 8, 87, 217, 59, 148, 65, 153, 62, 25, 7, 141, 189, 131, 245, 224, 60, 242, 4, 35, 62, 89, 141, 85, 61, 196, 196, 243, 186, 166, 247, 245, 189, 200, 236, 16, 190, 241, 179, 58, 190, 74, 164, 135, 191, 77, 202, 128, 62, 18, 248, 167, 62, 70, 8, 189, 190, 50, 19, 168, 61, 109, 169, 72, 191, 190, 119, 184, 62, 65, 166, 11, 191, 230, 32, 241, 61, 221, 212, 145, 190, 127, 79, 20, 190, 95, 32, 16, 62, 157, 16, 150, 62, 33, 244, 150, 61, 158, 203, 187, 190, 121, 248, 157, 189, 244, 124, 164, 62, 158, 131, 9, 63, 174, 64, 169, 190, 150, 169, 42, 189, 84, 59, 39, 189, 134, 170, 74, 60, 73, 158, 220, 188, 33, 121, 254, 62, 46, 73, 3, 63, 170, 78, 193, 62, 32, 116, 131, 190, 127, 98, 147, 190, 126, 58, 171, 188, 7, 42, 73, 62, 72, 77, 128, 188, 41, 28, 10, 62, 87, 17, 163, 62, 68, 38, 96, 62, 47, 145, 225, 191, 41, 3, 56, 190, 116, 53, 168, 190, 137, 53, 94, 63, 25, 251, 76, 191, 115, 75, 116, 62, 229, 86, 191, 62, 1, 252, 251, 190, 252, 63, 177, 191, 162, 199, 148, 191, 67, 123, 160, 189, 193, 72, 128, 191, 4, 120, 81, 62, 31, 243, 22, 62, 98, 1, 217, 190, 56, 216, 23, 191, 81, 115, 204, 60, 252, 146, 225, 62, 142, 78, 167, 62, 234, 215, 86, 62, 13, 65, 124, 190, 101, 143, 38, 190, 148, 127, 193, 190, 99, 96, 156, 191, 83, 39, 68, 189, 248, 97, 202, 190, 213, 207, 111, 62, 87, 163, 73, 61, 165, 176, 140, 60, 172, 7, 0, 191, 246, 131, 196, 189, 80, 143, 43, 191, 117, 167, 69, 61, 121, 155, 251, 62, 59, 103, 163, 61, 159, 232, 212, 61, 56, 76, 133, 189, 183, 102, 3, 62, 178, 196, 13, 190, 186, 91, 66, 62, 128, 12, 172, 62, 115, 45, 9, 62, 20, 101, 68, 190, 13, 32, 140, 62, 75, 6, 75, 62, 15, 150, 205, 189, 4, 81, 147, 189, 70, 193, 74, 62, 61, 148, 219, 189, 7, 185, 161, 189, 76, 171, 208, 189, 103, 249, 5, 62, 202, 194, 46, 190, 137, 219, 30, 188, 88, 72, 40, 190, 1, 171, 52, 190, 243, 126, 210, 189, 196, 99, 14, 190, 67, 7, 254, 189, 211, 74, 48, 190, 211, 45, 158, 189, 81, 48, 165, 61, 18, 43, 193, 188, 243, 43, 183, 60, 117, 182, 3, 62, 25, 106, 217, 60, 88, 36, 4, 190, 54, 217, 36, 190, 252, 122, 90, 61, 182, 71, 199, 189, 188, 129, 18, 60, 41, 244, 249, 189, 82, 52, 25, 190, 147, 135, 90, 188, 240, 201, 71, 61, 126, 53, 233, 189, 106, 65, 148, 61, 2, 43, 245, 189, 76, 135, 3, 62, 7, 8, 145, 189, 137, 242, 99, 190, 64, 246, 119, 61, 245, 183, 35, 190, 117, 19, 164, 188, 180, 226, 35, 190, 96, 249, 193, 61, 237, 64, 60, 62, 32, 126, 0, 62, 167, 70, 142, 190, 90, 47, 153, 62, 122, 39, 128, 61, 247, 251, 89, 60, 47, 163, 187, 61, 35, 145, 136, 62, 179, 26, 7, 62, 253, 7, 11, 62, 125, 80, 7, 191, 75, 245, 210, 62, 53, 131, 199, 189, 173, 251, 134, 189, 156, 49, 189, 191, 162, 248, 108, 62, 218, 156, 62, 62, 163, 151, 234, 62, 55, 155, 8, 63, 140, 159, 165, 190, 80, 31, 114, 190, 192, 56, 5, 62, 47, 141, 160, 62, 87, 9, 26, 190, 152, 86, 184, 190, 206, 140, 174, 190, 176, 245, 162, 61, 239, 48, 41, 190, 211, 93, 119, 61, 134, 117, 252, 189, 10, 184, 10, 189, 13, 14, 230, 188, 133, 150, 246, 189, 109, 8, 154, 189, 213, 144, 97, 188, 52, 169, 107, 189, 236, 71, 178, 61, 48, 165, 75, 190, 168, 222, 35, 190, 118, 188, 0, 62, 68, 8, 165, 61, 118, 106, 209, 61, 236, 212, 83, 190, 141, 250, 75, 61, 91, 12, 201, 61, 85, 232, 250, 189, 188, 20, 248, 187, 50, 136, 14, 190, 71, 115, 27, 190, 21, 43, 234, 188, 243, 81, 224, 189, 224, 224, 254, 189, 214, 141, 18, 62, 24, 82, 175, 61, 8, 138, 70, 189, 29, 254, 173, 60, 120, 13, 255, 189, 209, 238, 243, 61, 31, 161, 211, 60, 157, 109, 0, 190, 116, 241, 105, 62, 254, 155, 34, 62, 15, 225, 12, 60, 66, 59, 88, 189, 231, 164, 188, 60, 169, 45, 72, 62, 123, 253, 45, 60, 48, 210, 49, 62, 181, 217, 63, 190, 221, 197, 237, 61, 161, 51, 77, 190, 121, 151, 83, 190, 109, 244, 133, 61, 128, 217, 240, 62, 236, 29, 241, 189, 133, 90, 158, 62, 156, 246, 219, 188, 197, 212, 2, 191, 95, 95, 37, 190, 24, 164, 162, 62, 216, 63, 167, 59, 176, 63, 85, 62, 172, 61, 82, 190, 248, 134, 143, 190, 204, 185, 49, 62, 144, 46, 9, 62, 122, 223, 84, 61, 123, 112, 140, 190, 201, 138, 126, 191, 73, 250, 193, 61, 201, 65, 180, 61, 16, 139, 12, 61, 36, 118, 42, 62, 88, 71, 195, 189, 85, 225, 79, 189, 234, 188, 13, 190, 214, 25, 7, 190, 59, 94, 40, 62, 248, 210, 80, 61, 176, 119, 22, 62, 204, 186, 53, 62, 103, 235, 37, 190, 193, 176, 240, 61, 192, 105, 189, 190, 9, 227, 115, 61, 209, 9, 114, 189, 50, 23, 205, 60, 98, 98, 216, 60, 114, 134, 209, 190, 21, 84, 155, 62, 80, 196, 164, 61, 247, 252, 130, 61, 235, 63, 114, 190, 129, 47, 15, 62, 126, 184, 75, 62, 229, 248, 23, 190, 171, 131, 109, 62, 135, 254, 66, 61, 155, 234, 37, 62, 219, 163, 123, 188, 216, 19, 153, 189, 177, 111, 2, 190, 16, 30, 93, 61, 114, 65, 160, 190, 208, 209, 149, 62, 198, 244, 198, 189, 224, 145, 125, 61, 1, 120, 255, 60, 178, 200, 213, 61, 45, 1, 83, 62, 86, 10, 0, 62, 238, 151, 141, 62, 232, 205, 170, 189, 17, 249, 103, 190, 134, 48, 232, 60, 65, 176, 4, 62, 66, 34, 47, 190, 108, 240, 94, 62, 77, 228, 87, 62, 139, 23, 59, 191, 197, 26, 4, 190, 182, 128, 124, 191, 134, 243, 228, 62, 93, 230, 219, 189, 113, 203, 213, 189, 98, 54, 60, 190, 87, 242, 171, 190, 92, 56, 22, 62, 179, 48, 171, 62, 54, 29, 6, 188, 143, 65, 247, 189, 151, 78, 0, 191, 198, 184, 139, 62, 207, 22, 48, 189, 176, 1, 176, 190, 25, 0, 5, 191, 124, 99, 178, 190, 137, 91, 143, 190, 174, 53, 52, 190, 113, 98, 164, 62, 248, 61, 77, 61, 75, 139, 216, 62, 202, 180, 48, 189, 251, 2, 228, 190, 230, 247, 208, 190, 229, 96, 147, 190, 245, 88, 138, 62, 170, 168, 160, 61, 188, 160, 195, 61, 194, 49, 174, 62, 62, 85, 188, 61, 66, 153, 116, 191, 208, 167, 230, 191, 236, 61, 17, 63, 159, 195, 198, 62, 80, 32, 22, 190, 56, 124, 179, 190, 68, 75, 12, 191, 236, 152, 76, 191, 12, 207, 72, 190, 93, 75, 53, 60, 162, 212, 77, 191, 23, 234, 142, 190, 242, 114, 134, 62, 48, 48, 35, 61, 14, 122, 124, 62, 241, 14, 203, 190, 140, 151, 153, 189, 160, 99, 186, 189, 153, 23, 250, 189, 162, 47, 42, 62, 13, 173, 87, 189, 42, 14, 189, 61, 47, 198, 136, 59, 152, 145, 11, 62, 176, 12, 250, 61, 246, 170, 25, 191, 25, 254, 52, 62, 82, 192, 15, 60, 200, 160, 205, 190, 140, 168, 174, 62, 216, 126, 172, 62, 219, 29, 124, 191, 129, 196, 18, 190, 13, 134, 28, 190, 22, 65, 208, 190, 214, 66, 247, 190, 24, 169, 110, 61, 189, 97, 3, 62, 57, 45, 9, 62, 176, 12, 142, 60, 158, 54, 193, 189, 91, 196, 143, 62, 76, 134, 105, 62, 138, 218, 128, 190, 68, 120, 196, 190, 43, 34, 54, 191, 239, 10, 62, 190, 210, 166, 80, 189, 88, 52, 102, 189, 44, 248, 34, 189, 37, 20, 110, 191, 113, 201, 43, 61, 120, 228, 65, 189, 88, 209, 24, 190, 87, 103, 216, 190, 56, 155, 31, 62, 144, 22, 27, 61, 7, 13, 8, 190, 142, 246, 59, 191, 82, 174, 83, 189, 245, 250, 244, 190, 167, 6, 65, 189, 199, 98, 165, 188, 126, 37, 252, 61, 66, 234, 188, 62, 165, 218, 253, 189, 92, 36, 221, 62, 90, 196, 252, 190, 127, 194, 211, 61, 78, 42, 254, 190, 215, 251, 118, 62, 64, 144, 8, 62, 201, 205, 209, 189, 69, 95, 143, 188, 83, 225, 145, 62, 27, 24, 78, 62, 60, 129, 49, 61, 33, 198, 187, 61, 51, 146, 150, 60, 19, 124, 118, 190, 177, 124, 78, 190, 84, 62, 149, 189, 218, 211, 176, 190, 115, 146, 119, 190, 80, 36, 6, 61, 185, 1, 45, 62, 53, 63, 32, 190, 230, 178, 199, 61, 56, 84, 247, 61, 10, 102, 11, 62, 88, 62, 248, 189, 48, 114, 77, 190, 131, 108, 24, 191, 216, 85, 205, 61, 176, 253, 44, 189, 66, 52, 55, 190, 21, 230, 149, 62, 5, 164, 6, 190, 228, 115, 247, 62, 96, 223, 252, 188, 147, 70, 126, 61, 134, 103, 23, 189, 244, 1, 113, 189, 90, 142, 59, 190, 34, 177, 234, 61, 90, 158, 128, 61, 239, 155, 159, 190, 95, 156, 172, 61, 170, 101, 196, 190, 112, 108, 22, 62, 194, 141, 83, 189, 7, 219, 19, 62, 201, 255, 167, 190, 240, 123, 140, 60, 62, 146, 59, 190, 212, 27, 225, 189, 130, 47, 167, 60, 232, 221, 134, 190, 33, 185, 23, 191, 152, 55, 218, 60, 226, 77, 54, 188, 1, 219, 22, 62, 25, 15, 198, 61, 40, 124, 100, 190, 1, 72, 41, 191, 47, 96, 39, 62, 222, 121, 70, 189, 4, 9, 85, 190, 212, 146, 210, 62, 103, 53, 42, 190, 248, 185, 191, 61, 41, 153, 24, 190, 1, 191, 85, 61, 207, 255, 99, 61, 34, 62, 99, 62, 188, 229, 174, 62, 170, 79, 1, 62, 5, 147, 213, 189, 240, 165, 37, 186, 118, 55, 160, 61, 146, 143, 138, 61, 127, 28, 164, 190, 113, 229, 61, 60, 100, 57, 228, 189, 79, 239, 219, 60, 254, 209, 183, 62, 54, 103, 70, 62, 92, 41, 156, 61, 56, 218, 174, 189, 14, 232, 6, 62, 178, 196, 208, 190, 136, 79, 121, 188, 0, 54, 131, 62, 5, 57, 79, 61, 7, 168, 58, 62, 104, 59, 213, 61, 42, 115, 111, 188, 234, 120, 19, 62, 184, 154, 125, 62, 130, 109, 98, 189, 241, 160, 22, 62, 158, 218, 46, 187, 74, 238, 186, 62, 194, 10, 14, 190, 160, 15, 183, 189, 141, 232, 111, 190, 156, 213, 41, 189, 73, 101, 72, 62, 81, 203, 12, 62, 83, 156, 151, 190, 24, 251, 142, 62, 21, 2, 13, 61, 250, 0, 157, 190, 155, 198, 34, 62, 33, 69, 108, 62, 118, 103, 49, 62, 179, 129, 237, 189, 112, 113, 0, 61, 72, 75, 227, 189, 26, 73, 73, 61, 200, 123, 233, 60, 124, 228, 42, 189, 181, 24, 250, 189, 97, 186, 78, 189, 136, 131, 177, 189, 243, 243, 9, 190, 103, 150, 158, 189, 132, 212, 205, 188, 150, 32, 21, 190, 238, 129, 53, 60, 226, 253, 3, 190, 11, 14, 46, 190, 87, 57, 135, 189, 7, 81, 169, 61, 49, 110, 29, 61, 222, 79, 26, 61, 58, 1, 246, 188, 243, 233, 37, 62, 79, 26, 185, 61, 249, 247, 40, 190, 148, 145, 197, 188, 171, 176, 42, 190, 151, 170, 181, 59, 146, 188, 35, 190, 76, 153, 130, 189, 255, 223, 19, 190, 41, 185, 114, 61, 201, 166, 175, 61, 4, 180, 184, 61, 1, 50, 19, 190, 88, 151, 98, 189, 107, 178, 57, 190, 178, 43, 222, 189, 74, 253, 123, 189, 198, 235, 110, 61, 51, 81, 191, 60, 49, 147, 17, 190, 76, 44, 94, 189, 241, 111, 82, 190, 203, 127, 128, 60, 30, 26, 152, 61, 114, 132, 149, 60, 71, 110, 224, 60, 6, 31, 19, 190, 142, 196, 38, 190, 172, 235, 222, 186, 143, 131, 9, 61, 74, 188, 171, 61, 117, 181, 7, 60, 134, 232, 181, 188, 17, 184, 214, 188, 155, 61, 45, 61, 176, 0, 41, 190, 26, 40, 9, 62, 25, 32, 125, 60, 255, 240, 235, 189, 219, 148, 217, 61, 113, 43, 36, 62, 16, 80, 56, 190, 60, 222, 148, 62, 112, 216, 178, 190, 34, 197, 166, 190, 192, 79, 176, 189, 60, 157, 10, 61, 101, 64, 124, 62, 155, 73, 74, 62, 134, 84, 148, 62, 120, 119, 62, 62, 146, 191, 211, 188, 212, 22, 129, 190, 25, 183, 123, 61, 55, 51, 182, 60, 73, 166, 111, 62, 1, 40, 109, 189, 189, 82, 150, 61, 209, 183, 240, 60, 214, 7, 251, 190, 211, 138, 84, 61, 17, 155, 134, 191, 77, 210, 59, 61, 109, 66, 142, 61, 141, 25, 192, 187, 224, 75, 148, 189, 62, 90, 243, 189, 247, 144, 138, 61, 34, 235, 169, 190, 98, 16, 182, 60, 56, 113, 136, 190, 64, 46, 172, 189, 249, 112, 171, 60, 26, 18, 115, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 138, 207, 62, 196, 192, 60, 62, 117, 101, 172, 62, 112, 172, 61, 61, 248, 30, 119, 60, 249, 163, 132, 189, 68, 106, 19, 62, 255, 55, 135, 190, 110, 147, 72, 190, 220, 191, 124, 62, 219, 89, 249, 189, 36, 41, 154, 62, 211, 245, 224, 61, 121, 170, 11, 62, 60, 117, 62, 189, 11, 139, 205, 61, 200, 222, 180, 190, 237, 65, 47, 190, 22, 183, 161, 62, 143, 3, 156, 189, 107, 220, 18, 62, 71, 90, 119, 190, 218, 32, 188, 61, 148, 181, 135, 62, 91, 68, 175, 59, 240, 157, 119, 190, 159, 145, 171, 190, 170, 105, 231, 190, 73, 26, 134, 60, 44, 63, 169, 61, 50, 228, 179, 189, 224, 239, 119, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 112, 82, 63, 77, 134, 156, 190, 222, 94, 189, 190, 33, 123, 9, 63, 38, 64, 170, 62, 32, 165, 34, 63, 248, 36, 70, 63, 24, 140, 92, 188, 208, 24, 121, 191, 208, 132, 128, 191, 168, 15, 198, 62, 35, 24, 14, 63, 236, 146, 10, 191, 125, 231, 25, 191, 176, 130, 200, 62, 237, 59, 184, 191, 190, 222, 95, 63, 177, 104, 165, 188, 12, 221, 211, 190, 140, 184, 197, 189, 253, 82, 228, 62, 195, 161, 68, 60, 10, 28, 1, 63, 219, 192, 100, 191, 63, 16, 132, 62, 118, 251, 168, 190, 155, 133, 100, 190, 201, 205, 57, 63, 48, 40, 66, 190, 28, 112, 38, 61, 149, 149, 240, 189, 194, 204, 161, 61, 141, 86, 74, 62, 69, 119, 109, 61, 101, 111, 63, 190, 252, 13, 38, 61, 63, 31, 217, 190, 88, 86, 62, 62, 34, 69, 109, 188, 210, 114, 158, 62, 146, 162, 167, 61, 207, 209, 85, 62, 34, 112, 66, 190, 240, 154, 13, 190, 217, 49, 8, 190, 163, 117, 152, 61, 43, 206, 7, 190, 171, 168, 117, 61, 137, 243, 23, 190, 114, 43, 165, 189, 210, 129, 71, 190, 124, 247, 204, 61, 210, 66, 147, 189, 229, 117, 26, 62, 242, 2, 46, 62, 99, 116, 172, 189, 33, 206, 205, 190, 227, 70, 133, 62, 206, 85, 0, 62, 214, 214, 205, 187, 110, 43, 42, 190, 76, 235, 18, 62, 20, 36, 254, 61, 72, 206, 85, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 215, 177, 188, 177, 255, 98, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {226, 237, 88, 191, 228, 25, 236, 60, 219, 148, 209, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {184, 60, 252, 191, 162, 213, 201, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0032/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}