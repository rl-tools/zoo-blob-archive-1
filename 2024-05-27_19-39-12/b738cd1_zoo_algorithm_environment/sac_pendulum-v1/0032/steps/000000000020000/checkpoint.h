// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 194, 118, 191, 14, 234, 37, 63, 111, 247, 124, 190, 178, 109, 165, 189, 139, 225, 101, 63, 64, 68, 125, 190, 75, 133, 132, 62, 15, 178, 178, 62, 83, 101, 230, 190, 226, 99, 126, 190, 138, 6, 90, 63, 115, 5, 91, 190, 193, 227, 153, 62, 100, 47, 43, 190, 147, 19, 143, 190, 107, 53, 152, 190, 206, 6, 68, 190, 148, 239, 110, 62, 70, 229, 162, 189, 68, 198, 77, 191, 58, 154, 132, 62, 14, 152, 116, 191, 203, 215, 86, 191, 132, 239, 175, 59, 203, 134, 157, 189, 65, 24, 21, 191, 192, 225, 233, 62, 231, 53, 44, 63, 14, 2, 90, 190, 31, 29, 230, 190, 252, 251, 189, 62, 158, 212, 76, 63, 239, 210, 184, 62, 181, 26, 123, 190, 5, 189, 253, 61, 139, 253, 60, 191, 124, 132, 198, 189, 166, 114, 27, 188, 54, 95, 153, 62, 122, 97, 32, 191, 99, 175, 78, 63, 11, 22, 51, 62, 89, 130, 181, 62, 165, 47, 130, 191, 135, 213, 1, 63, 51, 69, 7, 63, 170, 61, 136, 191, 100, 45, 86, 190, 92, 184, 135, 189, 157, 243, 217, 63, 53, 39, 25, 63, 149, 221, 7, 63, 234, 222, 29, 62, 197, 10, 72, 62, 116, 64, 186, 190, 68, 29, 130, 191, 148, 159, 161, 190, 17, 172, 38, 63, 170, 187, 131, 191, 168, 151, 52, 190, 205, 61, 154, 190, 84, 117, 196, 63, 233, 46, 150, 62, 191, 210, 232, 62, 3, 116, 151, 190, 59, 104, 12, 63, 79, 5, 247, 190, 244, 163, 62, 191, 148, 121, 14, 191, 247, 110, 83, 63, 26, 58, 208, 62, 61, 183, 21, 63, 46, 17, 74, 63, 44, 178, 77, 63, 215, 209, 156, 62, 184, 55, 95, 62, 216, 144, 117, 63, 116, 201, 232, 62, 62, 115, 74, 63, 94, 202, 111, 191, 231, 149, 219, 190, 29, 79, 85, 63, 195, 37, 66, 63, 10, 228, 77, 62, 84, 4, 144, 62, 178, 23, 247, 62, 49, 177, 205, 62, 22, 134, 83, 191, 16, 174, 251, 190, 71, 8, 174, 190, 160, 107, 45, 191, 169, 25, 146, 62, 10, 128, 211, 62, 33, 196, 139, 62, 62, 51, 192, 63, 43, 172, 83, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 128, 33, 191, 176, 239, 66, 190, 206, 31, 55, 62, 245, 42, 65, 188, 137, 138, 66, 191, 157, 188, 3, 63, 4, 25, 13, 63, 91, 193, 76, 63, 162, 189, 184, 189, 132, 144, 76, 63, 21, 182, 67, 191, 88, 89, 145, 188, 52, 23, 181, 62, 40, 179, 217, 62, 85, 85, 155, 188, 237, 247, 152, 62, 212, 90, 165, 190, 92, 126, 57, 191, 206, 194, 165, 190, 156, 4, 213, 190, 223, 178, 193, 190, 180, 244, 48, 59, 114, 135, 126, 62, 120, 234, 217, 189, 246, 111, 116, 190, 200, 118, 150, 189, 241, 137, 65, 191, 48, 113, 204, 61, 184, 112, 146, 190, 57, 25, 243, 190, 40, 212, 84, 191, 48, 25, 155, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 253, 211, 62, 0, 37, 60, 191, 49, 208, 162, 62, 64, 229, 38, 62, 1, 45, 33, 62, 195, 10, 90, 62, 60, 3, 128, 62, 234, 61, 245, 61, 104, 170, 98, 62, 145, 71, 193, 61, 200, 247, 161, 190, 107, 60, 93, 191, 111, 135, 37, 62, 137, 105, 141, 188, 108, 24, 175, 189, 67, 204, 59, 62, 198, 32, 26, 187, 162, 96, 131, 191, 243, 128, 75, 63, 31, 123, 16, 191, 237, 226, 163, 61, 181, 115, 101, 190, 207, 11, 179, 190, 105, 35, 167, 190, 177, 171, 171, 190, 193, 167, 245, 61, 1, 206, 110, 62, 138, 252, 213, 188, 57, 181, 203, 190, 196, 167, 157, 191, 88, 244, 26, 62, 114, 180, 162, 61, 71, 65, 74, 188, 34, 1, 217, 62, 175, 210, 11, 61, 225, 87, 255, 62, 81, 12, 13, 191, 57, 85, 128, 60, 213, 46, 21, 190, 0, 112, 182, 190, 156, 251, 90, 190, 190, 84, 55, 189, 203, 144, 30, 189, 109, 54, 210, 187, 19, 59, 179, 189, 82, 80, 223, 61, 19, 254, 160, 187, 163, 8, 116, 190, 133, 234, 155, 61, 5, 82, 223, 62, 88, 109, 228, 190, 211, 42, 18, 190, 50, 15, 174, 190, 252, 208, 143, 62, 159, 237, 120, 189, 206, 64, 9, 62, 42, 240, 191, 62, 107, 139, 234, 61, 72, 154, 121, 191, 179, 69, 161, 62, 164, 105, 69, 62, 201, 149, 228, 187, 223, 74, 30, 190, 39, 203, 137, 62, 66, 47, 35, 190, 200, 169, 210, 62, 108, 148, 63, 61, 0, 73, 228, 62, 66, 129, 204, 190, 253, 72, 221, 61, 82, 211, 192, 189, 59, 17, 137, 190, 144, 144, 128, 189, 86, 23, 211, 189, 2, 207, 233, 61, 83, 137, 42, 62, 34, 110, 94, 62, 151, 96, 174, 62, 95, 151, 242, 61, 211, 77, 207, 190, 27, 253, 155, 61, 58, 34, 243, 62, 242, 143, 26, 191, 3, 132, 132, 190, 52, 213, 120, 190, 113, 125, 136, 61, 120, 109, 192, 189, 202, 66, 255, 61, 186, 248, 174, 62, 149, 9, 242, 189, 47, 16, 115, 191, 10, 135, 41, 62, 195, 231, 229, 188, 163, 155, 170, 60, 136, 48, 137, 190, 159, 50, 34, 189, 134, 87, 125, 62, 161, 43, 158, 190, 83, 133, 49, 62, 180, 53, 151, 190, 184, 105, 177, 62, 24, 47, 132, 62, 63, 61, 236, 62, 19, 125, 39, 62, 71, 232, 28, 62, 125, 176, 46, 62, 80, 70, 220, 190, 77, 201, 206, 61, 44, 93, 22, 62, 105, 228, 177, 190, 157, 76, 11, 189, 70, 27, 204, 62, 218, 143, 54, 190, 131, 73, 62, 191, 146, 4, 10, 62, 123, 80, 42, 191, 206, 49, 152, 62, 75, 62, 63, 189, 42, 15, 93, 190, 189, 139, 171, 190, 50, 243, 243, 190, 106, 105, 163, 187, 156, 212, 200, 62, 30, 181, 239, 61, 120, 208, 146, 190, 248, 253, 99, 190, 43, 177, 230, 62, 116, 228, 230, 59, 165, 4, 199, 61, 90, 162, 207, 188, 104, 243, 141, 62, 177, 191, 83, 190, 71, 26, 51, 62, 237, 198, 245, 190, 141, 50, 191, 190, 126, 221, 65, 190, 214, 240, 169, 188, 245, 183, 7, 62, 199, 30, 2, 191, 220, 66, 98, 62, 67, 117, 10, 189, 39, 83, 192, 190, 122, 33, 239, 190, 238, 129, 6, 62, 204, 31, 149, 191, 51, 193, 82, 190, 108, 214, 108, 190, 186, 138, 204, 191, 253, 235, 60, 191, 166, 14, 72, 190, 113, 98, 146, 188, 110, 27, 170, 189, 122, 134, 215, 189, 2, 60, 254, 188, 151, 75, 115, 190, 76, 110, 198, 62, 147, 119, 48, 191, 4, 168, 229, 189, 55, 199, 153, 190, 251, 33, 20, 190, 35, 221, 4, 62, 192, 167, 242, 189, 24, 110, 25, 62, 3, 169, 214, 189, 202, 84, 113, 62, 171, 205, 222, 189, 219, 188, 160, 62, 250, 181, 212, 61, 219, 189, 14, 60, 158, 62, 146, 62, 219, 99, 193, 190, 30, 171, 105, 61, 83, 231, 157, 61, 11, 31, 92, 191, 111, 32, 21, 62, 38, 116, 33, 63, 204, 127, 70, 191, 45, 45, 249, 190, 143, 27, 248, 190, 181, 249, 97, 61, 175, 178, 219, 190, 169, 42, 60, 62, 178, 113, 244, 187, 113, 121, 74, 62, 163, 76, 206, 190, 25, 124, 111, 189, 217, 95, 8, 63, 249, 255, 44, 62, 250, 119, 40, 190, 231, 102, 179, 190, 128, 127, 50, 190, 218, 68, 235, 190, 162, 211, 10, 190, 209, 226, 168, 190, 253, 233, 155, 62, 182, 213, 187, 190, 75, 35, 45, 62, 18, 14, 154, 62, 52, 77, 218, 62, 25, 64, 215, 62, 88, 221, 151, 62, 218, 81, 34, 62, 82, 101, 7, 191, 191, 105, 251, 190, 78, 81, 5, 62, 74, 228, 16, 191, 208, 80, 197, 189, 50, 237, 36, 63, 238, 65, 11, 191, 74, 135, 36, 191, 180, 145, 9, 63, 30, 229, 4, 191, 228, 3, 246, 189, 189, 83, 88, 188, 174, 30, 151, 190, 19, 112, 145, 190, 167, 118, 146, 190, 57, 133, 111, 189, 243, 60, 5, 63, 83, 6, 34, 189, 22, 148, 116, 190, 217, 2, 183, 191, 238, 63, 3, 62, 40, 90, 79, 61, 126, 39, 53, 187, 149, 196, 143, 62, 17, 16, 206, 189, 237, 133, 173, 62, 250, 100, 1, 190, 34, 131, 208, 189, 45, 220, 129, 188, 138, 53, 30, 191, 147, 150, 43, 190, 141, 123, 68, 190, 216, 89, 24, 62, 185, 13, 31, 61, 124, 215, 39, 62, 217, 161, 14, 189, 56, 88, 190, 188, 224, 149, 243, 190, 188, 104, 134, 60, 217, 109, 1, 62, 68, 71, 36, 190, 12, 247, 186, 191, 19, 42, 146, 189, 225, 133, 135, 62, 248, 245, 149, 59, 191, 48, 163, 62, 110, 94, 182, 62, 179, 49, 244, 188, 173, 59, 123, 188, 122, 64, 140, 62, 130, 148, 204, 61, 70, 157, 116, 61, 101, 228, 113, 188, 163, 214, 78, 62, 88, 46, 33, 191, 186, 131, 50, 62, 206, 4, 124, 59, 142, 115, 240, 189, 161, 75, 215, 62, 18, 9, 86, 190, 37, 162, 25, 190, 82, 243, 232, 190, 224, 45, 164, 62, 0, 57, 232, 61, 9, 181, 130, 190, 77, 183, 244, 61, 230, 53, 91, 190, 58, 216, 128, 191, 151, 17, 180, 189, 128, 5, 61, 62, 134, 120, 241, 190, 209, 135, 58, 190, 87, 120, 225, 190, 134, 124, 228, 62, 78, 0, 17, 190, 231, 64, 233, 61, 83, 83, 247, 186, 77, 213, 173, 190, 146, 252, 145, 191, 55, 196, 93, 62, 16, 181, 213, 62, 173, 53, 140, 191, 42, 136, 179, 61, 108, 29, 46, 191, 100, 83, 8, 62, 65, 246, 100, 191, 162, 115, 236, 190, 217, 181, 133, 190, 39, 10, 28, 62, 27, 1, 102, 191, 219, 235, 9, 190, 201, 133, 147, 62, 195, 227, 149, 62, 151, 14, 182, 62, 57, 15, 153, 62, 17, 39, 19, 191, 192, 33, 10, 191, 136, 77, 192, 188, 134, 7, 167, 61, 172, 83, 71, 190, 191, 32, 252, 60, 122, 135, 6, 62, 67, 1, 85, 191, 190, 184, 81, 190, 65, 242, 205, 191, 115, 102, 2, 63, 135, 88, 91, 190, 19, 26, 50, 190, 8, 95, 140, 189, 71, 105, 182, 190, 54, 126, 128, 191, 30, 137, 179, 190, 4, 225, 85, 189, 210, 167, 30, 191, 183, 22, 150, 190, 14, 22, 67, 61, 102, 180, 155, 189, 79, 59, 152, 190, 50, 180, 51, 189, 143, 180, 70, 61, 237, 206, 138, 62, 17, 202, 177, 190, 9, 212, 149, 61, 0, 129, 8, 62, 147, 85, 125, 62, 157, 220, 16, 60, 179, 29, 121, 62, 138, 93, 142, 62, 12, 156, 231, 189, 106, 116, 136, 61, 69, 121, 247, 189, 190, 228, 26, 191, 97, 148, 194, 60, 89, 2, 132, 62, 251, 105, 105, 190, 31, 67, 37, 191, 132, 180, 179, 189, 86, 109, 28, 191, 63, 187, 136, 62, 122, 0, 121, 190, 245, 64, 50, 190, 169, 184, 22, 61, 41, 190, 138, 190, 97, 170, 53, 189, 172, 158, 173, 62, 169, 226, 20, 60, 126, 50, 165, 190, 138, 105, 23, 190, 113, 55, 168, 61, 132, 235, 4, 190, 184, 230, 41, 63, 211, 245, 238, 190, 88, 245, 180, 189, 169, 146, 171, 61, 109, 107, 23, 189, 92, 98, 16, 62, 138, 62, 82, 62, 176, 76, 195, 61, 150, 142, 1, 62, 5, 32, 36, 191, 116, 167, 82, 190, 2, 114, 137, 191, 102, 98, 81, 62, 121, 14, 199, 62, 170, 200, 192, 189, 11, 9, 245, 188, 198, 39, 118, 62, 222, 166, 3, 191, 97, 80, 75, 62, 87, 71, 50, 62, 215, 108, 5, 63, 201, 95, 72, 188, 11, 255, 77, 191, 44, 40, 136, 60, 17, 148, 188, 189, 67, 168, 162, 62, 34, 81, 66, 190, 158, 215, 203, 61, 122, 84, 34, 189, 185, 77, 245, 191, 180, 194, 131, 61, 25, 42, 8, 62, 41, 131, 41, 190, 18, 44, 217, 62, 70, 238, 224, 61, 101, 186, 3, 63, 75, 226, 210, 190, 172, 153, 152, 61, 90, 19, 235, 187, 82, 5, 38, 191, 187, 7, 136, 190, 142, 18, 120, 62, 52, 183, 211, 61, 158, 154, 63, 61, 165, 247, 22, 190, 24, 211, 58, 62, 231, 126, 160, 188, 192, 92, 144, 190, 163, 95, 124, 189, 23, 218, 39, 63, 179, 85, 140, 191, 122, 214, 35, 191, 59, 238, 142, 190, 191, 85, 90, 62, 176, 110, 113, 190, 87, 64, 195, 62, 218, 86, 128, 62, 196, 43, 132, 60, 127, 239, 150, 191, 44, 12, 238, 62, 66, 226, 157, 62, 172, 119, 203, 189, 90, 26, 163, 189, 17, 178, 108, 62, 105, 209, 177, 190, 98, 153, 196, 62, 31, 52, 30, 189, 246, 208, 173, 62, 160, 170, 59, 189, 251, 158, 142, 61, 246, 164, 149, 61, 71, 1, 253, 61, 6, 90, 237, 190, 209, 251, 119, 188, 43, 58, 158, 189, 114, 145, 11, 62, 123, 154, 132, 189, 180, 69, 0, 63, 23, 172, 45, 190, 218, 210, 231, 190, 205, 164, 173, 189, 154, 109, 90, 190, 148, 220, 59, 62, 208, 82, 62, 62, 251, 204, 100, 191, 232, 80, 253, 61, 55, 33, 159, 62, 236, 50, 16, 63, 169, 18, 199, 62, 26, 175, 137, 190, 172, 3, 66, 190, 53, 128, 151, 62, 55, 137, 72, 62, 228, 43, 229, 61, 33, 107, 136, 191, 54, 222, 135, 62, 196, 227, 8, 62, 43, 22, 94, 188, 246, 131, 7, 62, 15, 144, 137, 60, 44, 113, 227, 60, 253, 25, 118, 62, 142, 229, 168, 189, 105, 26, 171, 189, 201, 53, 191, 189, 121, 10, 129, 61, 210, 144, 217, 59, 55, 159, 5, 190, 151, 197, 57, 190, 176, 215, 179, 190, 78, 34, 184, 191, 26, 158, 137, 62, 73, 162, 152, 62, 176, 89, 166, 190, 39, 26, 131, 61, 94, 129, 121, 191, 10, 244, 189, 62, 41, 191, 22, 191, 253, 51, 255, 61, 78, 249, 83, 190, 167, 225, 128, 189, 227, 90, 98, 62, 135, 59, 140, 62, 104, 80, 244, 61, 198, 60, 205, 190, 236, 116, 168, 189, 117, 243, 74, 62, 18, 116, 9, 63, 74, 150, 217, 190, 119, 41, 29, 190, 122, 126, 75, 189, 247, 111, 218, 189, 61, 54, 68, 59, 140, 188, 249, 62, 31, 178, 220, 62, 197, 39, 245, 62, 55, 92, 76, 190, 132, 158, 155, 190, 49, 105, 172, 188, 109, 194, 66, 62, 173, 108, 82, 60, 87, 22, 153, 189, 94, 44, 164, 62, 59, 206, 133, 62, 43, 214, 0, 192, 41, 3, 56, 190, 43, 31, 126, 190, 69, 184, 113, 63, 119, 108, 58, 191, 88, 22, 129, 62, 83, 22, 193, 62, 254, 201, 6, 191, 98, 78, 233, 191, 0, 176, 155, 191, 217, 113, 180, 188, 238, 82, 161, 191, 85, 239, 27, 62, 102, 39, 60, 62, 230, 154, 243, 190, 218, 252, 127, 191, 59, 51, 143, 61, 97, 157, 239, 62, 94, 217, 136, 62, 83, 45, 106, 62, 207, 70, 128, 190, 153, 169, 19, 190, 2, 193, 206, 190, 205, 120, 176, 191, 199, 183, 54, 189, 17, 58, 0, 191, 15, 119, 142, 62, 236, 189, 8, 190, 32, 214, 35, 61, 11, 146, 238, 190, 197, 137, 151, 189, 62, 75, 108, 191, 113, 39, 202, 61, 217, 182, 43, 63, 59, 103, 163, 61, 197, 208, 213, 61, 211, 236, 165, 58, 155, 55, 6, 62, 242, 46, 201, 189, 230, 146, 83, 62, 103, 32, 187, 62, 242, 251, 48, 62, 152, 185, 69, 190, 126, 81, 146, 62, 192, 79, 116, 62, 15, 150, 205, 189, 78, 86, 56, 189, 58, 245, 112, 62, 61, 148, 219, 189, 7, 185, 161, 189, 76, 171, 208, 189, 103, 249, 5, 62, 202, 194, 46, 190, 137, 219, 30, 188, 88, 72, 40, 190, 1, 171, 52, 190, 243, 126, 210, 189, 196, 99, 14, 190, 67, 7, 254, 189, 211, 74, 48, 190, 211, 45, 158, 189, 81, 48, 165, 61, 18, 43, 193, 188, 243, 43, 183, 60, 117, 182, 3, 62, 25, 106, 217, 60, 88, 36, 4, 190, 54, 217, 36, 190, 252, 122, 90, 61, 182, 71, 199, 189, 188, 129, 18, 60, 41, 244, 249, 189, 82, 52, 25, 190, 147, 135, 90, 188, 240, 201, 71, 61, 126, 53, 233, 189, 106, 65, 148, 61, 2, 43, 245, 189, 76, 135, 3, 62, 7, 8, 145, 189, 113, 211, 146, 190, 7, 15, 109, 61, 150, 142, 48, 190, 66, 102, 6, 189, 81, 222, 94, 190, 43, 155, 177, 61, 181, 76, 49, 62, 93, 90, 16, 62, 16, 119, 126, 190, 217, 237, 157, 62, 69, 16, 7, 62, 14, 170, 136, 60, 95, 153, 206, 61, 240, 82, 148, 62, 160, 189, 251, 61, 247, 188, 29, 62, 212, 121, 3, 191, 71, 70, 33, 63, 140, 67, 219, 188, 131, 56, 55, 187, 191, 209, 197, 191, 109, 56, 105, 62, 114, 168, 59, 62, 21, 188, 224, 62, 107, 193, 11, 63, 176, 44, 155, 190, 73, 15, 151, 190, 88, 38, 28, 62, 189, 243, 152, 62, 213, 224, 0, 190, 109, 134, 204, 190, 11, 93, 158, 190, 176, 245, 162, 61, 239, 48, 41, 190, 211, 93, 119, 61, 134, 117, 252, 189, 10, 184, 10, 189, 13, 14, 230, 188, 133, 150, 246, 189, 109, 8, 154, 189, 213, 144, 97, 188, 52, 169, 107, 189, 236, 71, 178, 61, 48, 165, 75, 190, 168, 222, 35, 190, 118, 188, 0, 62, 68, 8, 165, 61, 118, 106, 209, 61, 236, 212, 83, 190, 141, 250, 75, 61, 91, 12, 201, 61, 85, 232, 250, 189, 188, 20, 248, 187, 50, 136, 14, 190, 71, 115, 27, 190, 21, 43, 234, 188, 243, 81, 224, 189, 224, 224, 254, 189, 214, 141, 18, 62, 24, 82, 175, 61, 8, 138, 70, 189, 29, 254, 173, 60, 120, 13, 255, 189, 209, 238, 243, 61, 162, 53, 225, 61, 241, 18, 9, 190, 135, 122, 103, 62, 70, 178, 35, 62, 24, 79, 35, 61, 34, 39, 170, 189, 38, 204, 197, 60, 174, 195, 26, 62, 132, 64, 9, 189, 180, 120, 34, 62, 113, 103, 38, 190, 159, 84, 208, 61, 165, 209, 112, 190, 98, 147, 208, 190, 99, 70, 180, 61, 96, 73, 233, 62, 230, 67, 94, 190, 161, 123, 137, 62, 44, 1, 154, 189, 209, 207, 22, 191, 239, 190, 190, 190, 75, 200, 159, 62, 183, 100, 207, 59, 15, 33, 111, 62, 115, 203, 61, 190, 40, 214, 149, 190, 225, 118, 62, 62, 232, 201, 0, 62, 146, 133, 136, 61, 50, 17, 146, 190, 253, 144, 118, 191, 196, 83, 93, 61, 221, 128, 137, 62, 55, 21, 178, 61, 7, 71, 135, 62, 64, 81, 46, 60, 59, 66, 45, 61, 146, 27, 55, 190, 184, 49, 243, 189, 148, 23, 116, 188, 106, 4, 13, 190, 115, 225, 54, 62, 80, 49, 42, 62, 109, 16, 217, 189, 4, 77, 172, 61, 217, 178, 6, 191, 92, 115, 51, 188, 213, 244, 131, 188, 52, 129, 126, 59, 250, 191, 146, 60, 83, 22, 12, 191, 247, 183, 203, 62, 229, 137, 160, 61, 118, 30, 94, 61, 199, 0, 120, 190, 248, 63, 9, 62, 216, 121, 160, 61, 197, 193, 200, 190, 35, 166, 233, 62, 230, 83, 112, 187, 54, 243, 70, 60, 145, 130, 131, 188, 111, 161, 150, 189, 64, 43, 128, 190, 166, 219, 139, 62, 74, 223, 127, 190, 231, 249, 177, 62, 245, 243, 114, 188, 239, 32, 29, 62, 8, 14, 238, 59, 237, 116, 184, 61, 196, 75, 237, 61, 78, 250, 4, 61, 190, 47, 151, 62, 99, 143, 12, 189, 90, 161, 62, 190, 32, 143, 173, 187, 11, 222, 195, 61, 0, 251, 55, 190, 183, 252, 71, 62, 60, 120, 135, 62, 23, 239, 51, 191, 40, 116, 65, 190, 19, 105, 147, 191, 235, 138, 2, 63, 231, 143, 4, 190, 8, 168, 107, 189, 134, 24, 37, 190, 197, 175, 162, 190, 24, 5, 36, 62, 167, 107, 189, 62, 158, 238, 58, 188, 1, 181, 243, 189, 94, 217, 247, 190, 168, 14, 162, 62, 119, 174, 91, 189, 109, 116, 127, 190, 3, 248, 235, 190, 208, 118, 64, 189, 21, 231, 60, 190, 223, 83, 90, 60, 150, 217, 178, 62, 93, 194, 69, 61, 96, 91, 252, 62, 82, 85, 151, 188, 70, 79, 230, 190, 205, 105, 215, 190, 219, 115, 182, 188, 198, 204, 149, 62, 193, 105, 41, 62, 169, 230, 132, 61, 149, 121, 169, 62, 173, 110, 38, 61, 66, 153, 116, 191, 79, 228, 225, 191, 249, 74, 5, 63, 143, 12, 229, 62, 199, 115, 47, 190, 206, 194, 132, 190, 160, 102, 31, 191, 29, 251, 125, 191, 209, 215, 130, 190, 143, 213, 177, 61, 90, 1, 125, 191, 70, 75, 182, 190, 154, 213, 240, 61, 25, 84, 101, 187, 9, 48, 167, 62, 74, 253, 130, 190, 216, 253, 35, 189, 51, 144, 143, 189, 159, 199, 160, 189, 211, 248, 32, 62, 40, 209, 122, 189, 198, 19, 232, 61, 101, 3, 154, 61, 137, 17, 221, 61, 153, 80, 18, 62, 79, 216, 21, 191, 235, 81, 59, 62, 111, 76, 79, 188, 151, 116, 234, 190, 117, 228, 199, 62, 38, 0, 178, 62, 117, 53, 142, 191, 190, 79, 56, 190, 22, 120, 37, 190, 167, 52, 251, 190, 164, 132, 67, 191, 192, 167, 107, 61, 65, 115, 35, 62, 113, 105, 53, 62, 114, 213, 186, 61, 211, 5, 97, 189, 9, 115, 103, 62, 59, 151, 135, 62, 228, 15, 123, 190, 232, 2, 196, 190, 103, 100, 47, 191, 151, 210, 43, 190, 210, 166, 80, 189, 163, 146, 101, 189, 254, 57, 32, 190, 75, 216, 83, 191, 113, 201, 43, 61, 57, 117, 9, 189, 66, 166, 2, 190, 233, 203, 4, 191, 76, 184, 63, 62, 4, 140, 137, 60, 21, 168, 139, 189, 173, 92, 22, 191, 10, 16, 2, 189, 221, 178, 4, 191, 71, 26, 134, 189, 230, 80, 123, 188, 221, 51, 85, 62, 148, 253, 16, 63, 128, 4, 15, 190, 146, 180, 19, 63, 0, 46, 3, 191, 164, 132, 228, 61, 181, 14, 1, 191, 233, 142, 120, 62, 0, 69, 248, 61, 73, 183, 165, 189, 213, 246, 122, 62, 13, 202, 135, 62, 182, 235, 108, 62, 60, 129, 49, 61, 238, 220, 210, 61, 229, 101, 8, 189, 19, 124, 118, 190, 177, 124, 78, 190, 129, 59, 205, 189, 218, 211, 176, 190, 8, 103, 161, 190, 66, 161, 81, 60, 156, 92, 20, 62, 45, 143, 69, 190, 236, 88, 167, 61, 147, 87, 192, 61, 51, 211, 11, 62, 107, 222, 27, 190, 174, 137, 94, 190, 61, 80, 32, 191, 146, 158, 160, 61, 141, 57, 170, 189, 138, 205, 63, 190, 224, 177, 160, 62, 132, 11, 136, 190, 13, 95, 227, 62, 2, 14, 4, 189, 80, 62, 56, 61, 252, 11, 174, 189, 87, 68, 149, 189, 121, 191, 68, 190, 187, 183, 214, 61, 151, 236, 239, 60, 231, 222, 161, 190, 219, 181, 145, 61, 217, 75, 213, 190, 175, 202, 13, 62, 92, 234, 85, 189, 7, 219, 19, 62, 201, 255, 167, 190, 228, 215, 63, 60, 62, 146, 59, 190, 212, 27, 225, 189, 102, 24, 115, 60, 131, 116, 141, 190, 39, 85, 39, 191, 12, 7, 161, 60, 40, 226, 185, 188, 63, 75, 36, 62, 25, 15, 198, 61, 200, 220, 102, 190, 19, 120, 38, 191, 73, 63, 26, 62, 51, 200, 186, 189, 1, 37, 72, 190, 19, 135, 216, 62, 103, 53, 42, 190, 248, 185, 191, 61, 183, 171, 15, 190, 177, 32, 75, 61, 207, 255, 99, 61, 69, 116, 101, 62, 76, 165, 178, 62, 164, 169, 7, 62, 5, 147, 213, 189, 233, 149, 201, 59, 216, 36, 172, 61, 146, 143, 138, 61, 139, 160, 163, 190, 239, 132, 177, 60, 157, 86, 155, 190, 142, 49, 50, 61, 134, 208, 166, 62, 91, 227, 48, 62, 215, 238, 34, 61, 17, 16, 165, 189, 53, 247, 14, 62, 8, 115, 36, 191, 150, 68, 33, 61, 129, 214, 128, 62, 115, 4, 148, 61, 187, 17, 15, 62, 198, 93, 0, 62, 38, 98, 5, 189, 136, 43, 21, 62, 24, 243, 101, 62, 230, 152, 158, 189, 225, 244, 128, 62, 119, 53, 64, 190, 27, 227, 211, 62, 200, 202, 116, 190, 41, 100, 153, 189, 255, 81, 168, 190, 36, 184, 74, 189, 100, 113, 73, 62, 83, 58, 29, 62, 70, 7, 190, 190, 97, 84, 149, 62, 195, 41, 21, 61, 156, 92, 11, 191, 93, 73, 62, 62, 215, 51, 109, 62, 118, 103, 49, 62, 179, 129, 237, 189, 112, 113, 0, 61, 72, 75, 227, 189, 26, 73, 73, 61, 200, 123, 233, 60, 124, 228, 42, 189, 181, 24, 250, 189, 97, 186, 78, 189, 136, 131, 177, 189, 243, 243, 9, 190, 103, 150, 158, 189, 132, 212, 205, 188, 150, 32, 21, 190, 238, 129, 53, 60, 226, 253, 3, 190, 11, 14, 46, 190, 87, 57, 135, 189, 7, 81, 169, 61, 49, 110, 29, 61, 222, 79, 26, 61, 58, 1, 246, 188, 243, 233, 37, 62, 79, 26, 185, 61, 249, 247, 40, 190, 148, 145, 197, 188, 171, 176, 42, 190, 151, 170, 181, 59, 146, 188, 35, 190, 76, 153, 130, 189, 255, 223, 19, 190, 41, 185, 114, 61, 201, 166, 175, 61, 4, 180, 184, 61, 1, 50, 19, 190, 88, 151, 98, 189, 107, 178, 57, 190, 178, 43, 222, 189, 74, 253, 123, 189, 198, 235, 110, 61, 51, 81, 191, 60, 49, 147, 17, 190, 76, 44, 94, 189, 241, 111, 82, 190, 203, 127, 128, 60, 30, 26, 152, 61, 114, 132, 149, 60, 71, 110, 224, 60, 6, 31, 19, 190, 142, 196, 38, 190, 172, 235, 222, 186, 143, 131, 9, 61, 74, 188, 171, 61, 117, 181, 7, 60, 134, 232, 181, 188, 17, 184, 214, 188, 155, 61, 45, 61, 176, 0, 41, 190, 26, 40, 9, 62, 25, 32, 125, 60, 255, 240, 235, 189, 219, 148, 217, 61, 113, 43, 36, 62, 16, 80, 56, 190, 129, 3, 172, 61, 55, 108, 147, 190, 21, 206, 217, 189, 129, 209, 56, 190, 207, 253, 79, 188, 81, 193, 56, 62, 172, 206, 238, 61, 210, 145, 21, 62, 233, 5, 19, 62, 118, 173, 162, 61, 8, 66, 91, 190, 43, 112, 179, 61, 15, 148, 228, 188, 113, 74, 64, 62, 151, 34, 181, 189, 20, 36, 253, 61, 228, 255, 128, 188, 123, 141, 4, 191, 27, 173, 131, 190, 142, 124, 147, 191, 253, 128, 34, 61, 230, 57, 222, 60, 210, 2, 92, 190, 147, 235, 157, 189, 75, 122, 103, 189, 78, 130, 112, 61, 32, 39, 179, 191, 241, 5, 213, 61, 42, 79, 155, 190, 45, 111, 3, 191, 219, 120, 225, 60, 21, 112, 22, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 45, 224, 62, 19, 64, 94, 62, 234, 41, 183, 62, 120, 198, 37, 61, 42, 237, 193, 188, 26, 100, 134, 189, 217, 99, 46, 62, 89, 155, 65, 190, 228, 212, 177, 190, 107, 66, 141, 62, 87, 74, 1, 190, 33, 109, 166, 62, 125, 57, 21, 62, 119, 209, 34, 62, 111, 54, 71, 189, 113, 189, 137, 61, 66, 129, 194, 190, 237, 65, 47, 190, 149, 199, 168, 62, 143, 3, 156, 189, 43, 73, 245, 61, 218, 206, 139, 190, 181, 173, 170, 61, 154, 149, 160, 62, 189, 129, 28, 61, 88, 46, 138, 190, 167, 150, 190, 190, 0, 34, 232, 190, 189, 183, 239, 57, 44, 63, 169, 61, 50, 228, 179, 189, 95, 80, 136, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 10, 68, 63, 47, 38, 181, 190, 36, 61, 220, 190, 15, 29, 232, 62, 114, 93, 248, 62, 76, 182, 33, 63, 210, 40, 88, 63, 143, 191, 196, 187, 106, 117, 147, 191, 216, 155, 148, 191, 139, 171, 162, 62, 88, 126, 15, 63, 116, 153, 23, 191, 244, 225, 21, 191, 53, 77, 205, 62, 55, 144, 197, 191, 42, 161, 136, 63, 177, 104, 165, 188, 3, 154, 194, 190, 140, 184, 197, 189, 129, 3, 209, 62, 107, 173, 195, 60, 38, 233, 0, 63, 236, 102, 130, 191, 155, 186, 102, 62, 166, 139, 154, 190, 151, 71, 103, 190, 209, 214, 63, 63, 245, 28, 98, 190, 28, 112, 38, 61, 149, 149, 240, 189, 137, 50, 173, 186, 254, 213, 135, 62, 216, 82, 158, 189, 238, 82, 143, 190, 68, 169, 155, 61, 22, 67, 227, 190, 184, 245, 102, 62, 162, 96, 186, 189, 190, 12, 255, 62, 141, 249, 79, 60, 122, 48, 186, 62, 89, 12, 235, 189, 193, 91, 178, 189, 62, 175, 135, 190, 205, 63, 141, 61, 79, 163, 112, 190, 94, 71, 15, 189, 180, 57, 12, 62, 114, 43, 165, 189, 142, 113, 153, 190, 124, 247, 204, 61, 150, 30, 8, 190, 21, 54, 173, 62, 171, 1, 95, 62, 86, 136, 159, 189, 3, 26, 219, 190, 235, 11, 143, 62, 202, 55, 227, 61, 235, 117, 179, 60, 135, 135, 111, 190, 76, 235, 18, 62, 20, 36, 254, 61, 48, 167, 86, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 139, 44, 189, 2, 179, 150, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {42, 175, 99, 63, 99, 19, 56, 190, 162, 15, 30, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {98, 239, 165, 61, 6, 103, 236, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0032/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}