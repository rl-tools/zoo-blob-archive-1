// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 240, 101, 191, 109, 10, 32, 63, 10, 97, 117, 190, 30, 247, 162, 189, 0, 94, 104, 63, 53, 150, 122, 190, 36, 241, 140, 62, 188, 163, 168, 62, 114, 168, 233, 190, 109, 238, 112, 190, 135, 111, 91, 63, 2, 87, 100, 190, 198, 224, 145, 62, 9, 227, 40, 190, 236, 111, 143, 190, 66, 173, 145, 190, 253, 79, 1, 190, 249, 229, 99, 62, 87, 19, 167, 189, 213, 34, 76, 191, 116, 64, 130, 62, 91, 123, 120, 191, 79, 223, 69, 191, 196, 89, 238, 184, 140, 65, 170, 188, 122, 126, 10, 191, 200, 217, 244, 62, 211, 225, 45, 63, 80, 243, 114, 190, 147, 21, 222, 190, 86, 221, 169, 62, 109, 198, 74, 63, 58, 109, 181, 62, 150, 92, 151, 190, 40, 228, 4, 62, 162, 66, 51, 191, 24, 83, 150, 189, 220, 126, 134, 188, 120, 214, 163, 62, 250, 139, 31, 191, 192, 130, 81, 63, 30, 8, 52, 62, 0, 167, 193, 62, 64, 174, 131, 191, 145, 59, 247, 62, 150, 212, 5, 63, 72, 117, 136, 191, 153, 49, 88, 190, 161, 248, 4, 60, 102, 206, 219, 63, 4, 41, 20, 63, 120, 103, 8, 63, 175, 62, 22, 62, 114, 106, 73, 62, 118, 6, 223, 190, 47, 8, 138, 191, 145, 25, 146, 190, 82, 139, 35, 63, 37, 183, 111, 191, 58, 116, 76, 190, 255, 138, 10, 190, 202, 105, 189, 63, 231, 150, 145, 62, 53, 132, 235, 62, 16, 251, 165, 190, 142, 155, 14, 63, 90, 131, 11, 191, 87, 179, 39, 191, 170, 254, 14, 191, 23, 49, 87, 63, 33, 50, 202, 62, 143, 131, 23, 63, 57, 116, 74, 63, 249, 32, 75, 63, 206, 172, 157, 62, 84, 0, 121, 62, 108, 46, 115, 63, 135, 105, 219, 62, 37, 236, 65, 63, 173, 249, 103, 191, 171, 77, 228, 190, 44, 167, 86, 63, 15, 245, 51, 63, 231, 109, 101, 62, 253, 23, 129, 62, 153, 139, 1, 63, 45, 143, 204, 62, 141, 245, 101, 191, 128, 55, 220, 190, 112, 192, 152, 190, 187, 246, 23, 191, 204, 175, 135, 62, 220, 59, 217, 62, 8, 31, 163, 62, 73, 181, 192, 63, 57, 168, 247, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 95, 39, 191, 238, 113, 50, 190, 21, 5, 71, 62, 116, 210, 87, 59, 111, 114, 63, 191, 84, 179, 9, 63, 125, 203, 14, 63, 90, 109, 78, 63, 161, 186, 84, 189, 169, 137, 83, 63, 19, 164, 70, 191, 176, 249, 99, 189, 200, 199, 187, 62, 241, 73, 218, 62, 230, 117, 26, 189, 105, 42, 154, 62, 52, 11, 150, 190, 148, 209, 52, 191, 70, 187, 123, 190, 108, 250, 222, 190, 205, 217, 199, 190, 88, 6, 126, 60, 79, 222, 83, 62, 5, 135, 164, 189, 235, 168, 116, 190, 131, 201, 229, 189, 207, 29, 68, 191, 206, 127, 10, 62, 124, 236, 153, 190, 60, 2, 18, 191, 57, 21, 83, 191, 134, 210, 174, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 255, 159, 62, 21, 35, 57, 191, 189, 183, 176, 62, 106, 246, 44, 62, 234, 103, 172, 61, 24, 174, 110, 62, 231, 130, 142, 62, 107, 91, 58, 62, 72, 131, 112, 62, 182, 200, 221, 61, 18, 121, 139, 190, 103, 38, 70, 191, 74, 154, 54, 62, 87, 135, 245, 188, 65, 34, 162, 189, 138, 248, 88, 62, 232, 221, 134, 60, 65, 214, 123, 191, 94, 233, 110, 63, 190, 201, 10, 191, 122, 12, 210, 61, 124, 242, 90, 190, 254, 228, 92, 190, 72, 210, 164, 190, 79, 22, 167, 190, 232, 115, 25, 62, 36, 254, 155, 62, 142, 197, 178, 188, 173, 77, 198, 190, 190, 168, 144, 191, 4, 207, 33, 62, 79, 97, 181, 61, 156, 198, 97, 189, 9, 108, 213, 62, 64, 66, 191, 60, 75, 247, 251, 62, 135, 230, 12, 191, 86, 182, 119, 60, 206, 135, 26, 190, 125, 28, 184, 190, 141, 124, 95, 190, 158, 171, 55, 189, 111, 140, 117, 189, 63, 137, 189, 188, 69, 78, 187, 189, 178, 121, 241, 61, 212, 196, 161, 187, 174, 31, 100, 190, 157, 210, 193, 61, 81, 163, 197, 62, 250, 97, 233, 190, 74, 76, 192, 189, 163, 82, 152, 190, 50, 179, 141, 62, 153, 120, 160, 189, 55, 81, 12, 62, 87, 70, 193, 62, 188, 35, 222, 61, 114, 246, 109, 191, 82, 205, 165, 62, 176, 75, 66, 62, 175, 168, 62, 189, 209, 177, 44, 190, 215, 106, 140, 62, 56, 166, 78, 190, 119, 76, 203, 62, 8, 192, 248, 60, 127, 98, 222, 62, 78, 167, 209, 190, 58, 229, 246, 61, 13, 250, 185, 189, 233, 48, 118, 190, 204, 115, 134, 189, 159, 176, 215, 189, 229, 124, 171, 61, 62, 189, 17, 62, 233, 233, 97, 62, 41, 42, 195, 62, 109, 196, 245, 61, 97, 192, 200, 190, 178, 20, 201, 61, 122, 186, 214, 62, 220, 111, 31, 191, 178, 189, 75, 190, 43, 188, 76, 190, 193, 63, 135, 61, 78, 233, 233, 189, 92, 42, 6, 62, 42, 52, 176, 62, 147, 96, 248, 189, 222, 175, 104, 191, 22, 152, 50, 62, 176, 246, 217, 188, 43, 96, 136, 188, 7, 139, 139, 190, 169, 56, 17, 189, 78, 178, 100, 62, 213, 186, 160, 190, 148, 38, 50, 62, 17, 216, 154, 190, 119, 47, 170, 62, 30, 42, 123, 62, 187, 246, 230, 62, 154, 183, 31, 62, 7, 87, 2, 62, 16, 163, 44, 62, 144, 91, 214, 190, 167, 150, 195, 61, 254, 212, 6, 62, 119, 93, 171, 190, 83, 45, 132, 189, 232, 194, 204, 62, 96, 104, 54, 190, 214, 242, 62, 191, 175, 242, 18, 62, 83, 68, 40, 191, 116, 49, 199, 62, 21, 77, 149, 189, 16, 121, 98, 190, 40, 90, 184, 190, 28, 24, 248, 190, 15, 112, 211, 187, 212, 217, 195, 62, 184, 26, 218, 61, 119, 150, 164, 190, 171, 179, 122, 190, 229, 85, 219, 62, 230, 233, 150, 60, 73, 111, 143, 61, 87, 158, 21, 189, 16, 13, 137, 62, 234, 244, 94, 190, 183, 244, 56, 62, 164, 241, 240, 190, 85, 88, 181, 190, 114, 88, 58, 190, 214, 240, 169, 188, 197, 226, 243, 61, 199, 30, 2, 191, 195, 233, 94, 62, 21, 252, 238, 188, 55, 195, 138, 190, 40, 27, 191, 190, 179, 243, 2, 62, 236, 144, 137, 191, 51, 193, 82, 190, 206, 37, 106, 190, 146, 218, 173, 191, 164, 1, 191, 190, 241, 126, 63, 190, 65, 29, 138, 188, 142, 82, 248, 189, 119, 10, 21, 190, 128, 11, 62, 189, 31, 89, 94, 190, 13, 143, 176, 62, 152, 142, 25, 191, 103, 182, 9, 190, 55, 199, 153, 190, 164, 31, 33, 190, 35, 211, 220, 61, 228, 151, 1, 190, 186, 224, 22, 62, 204, 5, 234, 189, 241, 92, 96, 62, 37, 108, 178, 189, 64, 139, 172, 62, 244, 101, 14, 62, 10, 26, 150, 60, 229, 208, 143, 62, 219, 141, 175, 190, 157, 82, 81, 61, 237, 192, 183, 61, 199, 94, 84, 191, 184, 125, 27, 62, 173, 42, 35, 63, 161, 178, 68, 191, 150, 241, 226, 190, 37, 216, 240, 190, 33, 78, 129, 61, 70, 180, 192, 190, 212, 223, 62, 62, 69, 14, 19, 188, 69, 236, 67, 62, 229, 45, 207, 190, 208, 14, 38, 189, 186, 48, 5, 63, 157, 136, 36, 62, 197, 50, 46, 190, 132, 193, 187, 190, 193, 151, 86, 190, 106, 58, 233, 190, 107, 248, 21, 190, 170, 37, 160, 190, 183, 183, 160, 62, 235, 137, 180, 190, 129, 71, 64, 62, 78, 237, 153, 62, 191, 233, 220, 62, 85, 48, 219, 62, 250, 1, 146, 62, 103, 97, 31, 62, 90, 59, 4, 191, 118, 31, 238, 190, 253, 195, 1, 62, 119, 137, 32, 191, 137, 34, 224, 189, 31, 1, 38, 63, 175, 255, 14, 191, 180, 154, 26, 191, 61, 8, 22, 63, 246, 22, 8, 191, 69, 18, 223, 189, 216, 220, 190, 188, 117, 154, 131, 190, 81, 167, 151, 190, 116, 78, 148, 190, 93, 50, 84, 189, 72, 203, 8, 63, 237, 66, 71, 189, 122, 137, 132, 190, 249, 251, 181, 191, 170, 55, 156, 61, 48, 129, 49, 61, 182, 249, 198, 60, 45, 121, 138, 62, 125, 239, 163, 189, 184, 225, 165, 62, 70, 1, 213, 189, 130, 192, 176, 189, 138, 182, 84, 60, 142, 143, 16, 191, 42, 27, 203, 189, 89, 8, 63, 190, 154, 51, 61, 62, 232, 199, 67, 61, 190, 69, 55, 62, 123, 201, 141, 189, 134, 216, 2, 61, 97, 238, 218, 190, 44, 76, 53, 60, 175, 31, 82, 62, 138, 60, 209, 189, 228, 73, 183, 191, 149, 201, 208, 189, 250, 226, 147, 62, 155, 207, 129, 60, 20, 74, 169, 62, 90, 113, 178, 62, 17, 18, 36, 189, 25, 254, 55, 60, 81, 234, 132, 62, 161, 142, 2, 62, 253, 242, 239, 61, 202, 215, 132, 60, 249, 52, 24, 62, 125, 168, 39, 191, 199, 29, 170, 61, 219, 203, 189, 188, 143, 87, 82, 190, 221, 138, 204, 62, 50, 170, 40, 190, 224, 226, 2, 190, 142, 54, 175, 190, 67, 31, 166, 62, 219, 15, 215, 61, 9, 181, 130, 190, 234, 81, 220, 61, 139, 202, 55, 190, 58, 216, 128, 191, 246, 151, 164, 188, 89, 72, 84, 62, 134, 120, 241, 190, 209, 135, 58, 190, 245, 4, 200, 190, 225, 59, 240, 62, 78, 0, 17, 190, 76, 111, 29, 62, 76, 156, 120, 60, 239, 100, 173, 190, 146, 252, 145, 191, 55, 196, 93, 62, 18, 232, 212, 62, 134, 165, 124, 191, 42, 136, 179, 61, 22, 17, 28, 191, 100, 83, 8, 62, 185, 141, 70, 191, 237, 236, 81, 190, 10, 185, 132, 190, 44, 251, 121, 62, 60, 112, 56, 191, 219, 235, 9, 190, 124, 211, 121, 62, 127, 164, 115, 62, 104, 213, 147, 62, 253, 198, 115, 62, 20, 123, 243, 190, 54, 111, 221, 190, 72, 238, 194, 60, 116, 51, 45, 61, 227, 145, 28, 189, 170, 27, 221, 188, 250, 114, 203, 61, 0, 86, 40, 191, 10, 205, 82, 190, 0, 14, 220, 191, 52, 204, 22, 63, 23, 129, 74, 190, 22, 224, 92, 190, 165, 217, 14, 189, 226, 46, 184, 190, 71, 153, 89, 191, 107, 189, 121, 190, 213, 219, 21, 62, 140, 37, 9, 191, 88, 92, 84, 190, 35, 3, 188, 61, 174, 80, 77, 61, 123, 121, 151, 190, 202, 221, 150, 189, 65, 28, 28, 61, 94, 71, 138, 62, 206, 214, 183, 190, 105, 175, 113, 61, 29, 74, 48, 62, 19, 154, 145, 62, 130, 94, 93, 61, 8, 210, 137, 62, 74, 24, 141, 62, 15, 99, 193, 189, 106, 174, 117, 61, 2, 165, 188, 189, 92, 14, 10, 191, 22, 210, 45, 61, 153, 95, 136, 62, 100, 122, 88, 190, 185, 232, 28, 191, 190, 1, 164, 189, 57, 22, 25, 191, 181, 89, 154, 62, 1, 155, 102, 190, 19, 39, 54, 190, 164, 83, 38, 61, 58, 171, 138, 190, 233, 245, 137, 188, 28, 144, 170, 62, 240, 18, 114, 59, 131, 7, 160, 190, 208, 1, 47, 190, 146, 37, 169, 61, 69, 156, 249, 189, 106, 83, 19, 63, 37, 117, 70, 191, 53, 35, 163, 189, 115, 104, 16, 190, 109, 107, 23, 189, 177, 20, 19, 62, 125, 103, 99, 62, 26, 46, 22, 62, 174, 223, 16, 62, 219, 207, 45, 191, 79, 94, 58, 190, 15, 64, 136, 191, 65, 197, 80, 62, 222, 224, 168, 62, 155, 34, 183, 189, 201, 203, 140, 188, 88, 65, 102, 62, 33, 43, 239, 190, 24, 55, 255, 62, 220, 53, 1, 62, 225, 22, 245, 62, 160, 196, 39, 188, 68, 208, 23, 191, 24, 203, 158, 59, 44, 84, 232, 189, 2, 146, 154, 62, 254, 83, 178, 190, 232, 28, 122, 61, 41, 39, 65, 189, 201, 95, 239, 191, 138, 20, 137, 61, 38, 194, 145, 61, 198, 254, 67, 190, 49, 170, 221, 62, 39, 129, 230, 61, 32, 85, 6, 63, 122, 70, 199, 190, 146, 4, 150, 61, 217, 99, 96, 188, 217, 161, 36, 191, 193, 183, 140, 190, 88, 138, 128, 62, 187, 165, 159, 61, 8, 57, 74, 61, 98, 223, 27, 190, 42, 231, 81, 62, 114, 99, 193, 188, 213, 151, 133, 190, 192, 186, 33, 189, 69, 8, 26, 63, 105, 28, 137, 191, 44, 141, 19, 191, 212, 2, 106, 190, 102, 130, 83, 62, 154, 248, 107, 190, 12, 220, 195, 62, 156, 163, 128, 62, 157, 60, 28, 60, 104, 88, 141, 191, 30, 120, 242, 62, 51, 11, 155, 62, 244, 189, 237, 189, 39, 228, 196, 189, 196, 89, 117, 62, 235, 130, 166, 190, 162, 193, 204, 62, 233, 227, 31, 189, 87, 154, 184, 62, 169, 151, 4, 189, 197, 237, 175, 61, 241, 117, 133, 61, 6, 34, 4, 62, 252, 85, 232, 190, 4, 185, 113, 188, 176, 38, 134, 189, 218, 131, 16, 62, 163, 194, 73, 189, 40, 14, 17, 63, 192, 73, 36, 190, 80, 81, 233, 190, 250, 222, 188, 188, 253, 41, 130, 190, 36, 118, 52, 62, 72, 74, 44, 62, 105, 31, 78, 191, 31, 212, 4, 62, 101, 177, 159, 62, 240, 189, 19, 63, 26, 28, 204, 62, 191, 40, 127, 190, 167, 90, 67, 190, 85, 116, 159, 62, 172, 79, 93, 62, 26, 14, 10, 62, 57, 151, 133, 191, 168, 146, 142, 62, 92, 87, 246, 61, 98, 116, 181, 188, 35, 157, 0, 62, 201, 128, 151, 59, 241, 53, 180, 60, 148, 108, 66, 62, 161, 18, 131, 189, 25, 195, 180, 189, 44, 254, 6, 188, 150, 119, 71, 61, 204, 58, 48, 189, 50, 180, 9, 190, 186, 127, 123, 190, 212, 196, 200, 190, 149, 187, 172, 191, 115, 223, 124, 62, 40, 88, 58, 62, 145, 91, 51, 190, 158, 37, 51, 61, 7, 173, 109, 191, 205, 71, 116, 62, 44, 81, 26, 191, 236, 206, 240, 61, 214, 35, 138, 190, 17, 162, 250, 189, 114, 46, 228, 61, 158, 21, 137, 62, 7, 212, 135, 61, 140, 207, 241, 190, 204, 127, 218, 189, 228, 26, 124, 62, 176, 104, 255, 62, 172, 188, 189, 190, 188, 226, 15, 190, 102, 33, 118, 189, 193, 85, 172, 189, 104, 214, 67, 59, 111, 54, 231, 62, 62, 121, 182, 62, 164, 61, 232, 62, 112, 124, 136, 190, 59, 90, 165, 190, 126, 58, 171, 188, 137, 194, 66, 62, 179, 66, 70, 188, 16, 244, 99, 61, 53, 35, 146, 62, 91, 146, 79, 62, 250, 72, 248, 191, 41, 3, 56, 190, 191, 105, 133, 190, 178, 244, 98, 63, 126, 3, 57, 191, 71, 59, 86, 62, 198, 252, 192, 62, 242, 59, 8, 191, 190, 196, 198, 191, 213, 53, 148, 191, 49, 138, 78, 189, 76, 49, 149, 191, 107, 115, 75, 62, 202, 106, 93, 62, 146, 218, 207, 190, 139, 220, 134, 191, 16, 72, 231, 60, 250, 34, 96, 62, 22, 221, 217, 62, 178, 244, 92, 187, 207, 70, 128, 190, 240, 151, 79, 190, 16, 18, 177, 190, 205, 135, 175, 191, 79, 215, 19, 188, 2, 195, 145, 190, 147, 254, 122, 62, 120, 114, 140, 187, 40, 98, 182, 187, 140, 145, 21, 191, 14, 25, 151, 187, 245, 127, 45, 191, 155, 119, 57, 60, 254, 233, 53, 63, 59, 103, 163, 61, 159, 232, 212, 61, 186, 20, 234, 189, 47, 169, 39, 62, 127, 7, 29, 190, 90, 78, 75, 62, 56, 194, 172, 62, 189, 71, 221, 61, 152, 185, 69, 190, 111, 34, 131, 62, 17, 11, 76, 62, 15, 150, 205, 189, 218, 58, 22, 189, 52, 120, 22, 62, 61, 148, 219, 189, 7, 185, 161, 189, 76, 171, 208, 189, 103, 249, 5, 62, 202, 194, 46, 190, 137, 219, 30, 188, 88, 72, 40, 190, 1, 171, 52, 190, 243, 126, 210, 189, 196, 99, 14, 190, 67, 7, 254, 189, 211, 74, 48, 190, 211, 45, 158, 189, 81, 48, 165, 61, 18, 43, 193, 188, 243, 43, 183, 60, 117, 182, 3, 62, 25, 106, 217, 60, 88, 36, 4, 190, 54, 217, 36, 190, 252, 122, 90, 61, 182, 71, 199, 189, 188, 129, 18, 60, 41, 244, 249, 189, 82, 52, 25, 190, 147, 135, 90, 188, 240, 201, 71, 61, 126, 53, 233, 189, 106, 65, 148, 61, 2, 43, 245, 189, 76, 135, 3, 62, 7, 8, 145, 189, 61, 162, 134, 190, 72, 21, 129, 61, 217, 116, 46, 190, 177, 26, 193, 188, 224, 205, 79, 190, 132, 27, 197, 61, 36, 103, 47, 62, 68, 87, 32, 62, 123, 101, 117, 190, 53, 57, 160, 62, 167, 105, 247, 61, 106, 16, 209, 60, 251, 37, 223, 61, 77, 116, 182, 62, 30, 161, 5, 62, 253, 40, 24, 62, 57, 217, 253, 190, 213, 68, 20, 63, 32, 255, 23, 189, 130, 85, 227, 187, 91, 169, 195, 191, 127, 22, 117, 62, 227, 15, 69, 62, 78, 107, 231, 62, 4, 247, 10, 63, 128, 205, 158, 190, 17, 92, 143, 190, 171, 235, 31, 62, 236, 160, 163, 62, 249, 214, 213, 189, 37, 207, 173, 190, 95, 102, 162, 190, 176, 245, 162, 61, 239, 48, 41, 190, 211, 93, 119, 61, 134, 117, 252, 189, 10, 184, 10, 189, 13, 14, 230, 188, 133, 150, 246, 189, 109, 8, 154, 189, 213, 144, 97, 188, 52, 169, 107, 189, 236, 71, 178, 61, 48, 165, 75, 190, 168, 222, 35, 190, 118, 188, 0, 62, 68, 8, 165, 61, 118, 106, 209, 61, 236, 212, 83, 190, 141, 250, 75, 61, 91, 12, 201, 61, 85, 232, 250, 189, 188, 20, 248, 187, 50, 136, 14, 190, 71, 115, 27, 190, 21, 43, 234, 188, 243, 81, 224, 189, 224, 224, 254, 189, 214, 141, 18, 62, 24, 82, 175, 61, 8, 138, 70, 189, 29, 254, 173, 60, 120, 13, 255, 189, 209, 238, 243, 61, 104, 68, 190, 61, 68, 6, 9, 190, 251, 185, 109, 62, 32, 83, 34, 62, 161, 248, 247, 60, 122, 217, 132, 189, 223, 161, 42, 61, 193, 133, 51, 62, 24, 124, 238, 188, 116, 60, 35, 62, 92, 96, 17, 190, 49, 191, 208, 61, 245, 44, 99, 190, 164, 216, 170, 190, 220, 127, 176, 61, 245, 217, 235, 62, 164, 73, 75, 190, 20, 171, 150, 62, 145, 56, 137, 189, 41, 63, 21, 191, 6, 175, 49, 190, 234, 158, 160, 62, 29, 204, 225, 59, 108, 164, 106, 62, 73, 188, 61, 190, 222, 196, 138, 190, 20, 81, 57, 62, 150, 253, 245, 61, 73, 237, 117, 61, 111, 85, 156, 190, 103, 65, 126, 191, 220, 139, 141, 61, 233, 12, 58, 62, 174, 108, 118, 61, 33, 68, 121, 62, 201, 56, 142, 188, 62, 20, 34, 60, 1, 196, 59, 190, 111, 34, 28, 190, 203, 126, 17, 61, 207, 154, 228, 187, 159, 77, 38, 62, 233, 114, 48, 62, 215, 104, 248, 189, 70, 225, 147, 61, 151, 84, 242, 190, 67, 172, 252, 60, 25, 232, 248, 188, 82, 116, 1, 60, 54, 162, 224, 60, 102, 206, 6, 191, 149, 119, 200, 62, 174, 109, 155, 61, 80, 151, 29, 61, 137, 183, 130, 190, 137, 121, 158, 61, 175, 57, 162, 61, 128, 109, 155, 190, 207, 198, 222, 62, 92, 220, 110, 188, 62, 183, 200, 61, 159, 111, 244, 188, 111, 161, 150, 189, 171, 159, 110, 190, 233, 204, 116, 62, 135, 232, 138, 190, 56, 180, 177, 62, 240, 48, 36, 189, 253, 5, 15, 62, 75, 103, 218, 58, 33, 183, 216, 61, 63, 135, 2, 62, 158, 112, 69, 61, 67, 151, 152, 62, 194, 83, 167, 188, 167, 92, 65, 190, 219, 143, 161, 187, 228, 7, 127, 61, 208, 112, 57, 190, 39, 38, 85, 62, 247, 67, 110, 62, 212, 19, 49, 191, 101, 39, 46, 190, 113, 126, 142, 191, 6, 150, 242, 62, 56, 80, 245, 189, 195, 71, 104, 189, 231, 246, 38, 190, 74, 155, 162, 190, 62, 14, 37, 62, 92, 171, 189, 62, 35, 22, 153, 188, 210, 39, 239, 189, 4, 55, 0, 191, 129, 24, 172, 62, 78, 64, 114, 189, 124, 252, 102, 190, 87, 246, 228, 190, 198, 110, 32, 189, 234, 82, 41, 190, 41, 190, 179, 59, 196, 95, 183, 62, 255, 15, 142, 61, 66, 80, 8, 63, 26, 223, 149, 189, 139, 100, 146, 190, 173, 144, 9, 191, 24, 178, 2, 189, 218, 55, 139, 62, 208, 189, 69, 62, 83, 93, 120, 61, 249, 35, 214, 62, 176, 120, 28, 61, 66, 153, 116, 191, 92, 0, 214, 191, 251, 51, 48, 63, 127, 253, 208, 62, 174, 250, 80, 190, 131, 42, 6, 190, 152, 65, 34, 191, 63, 217, 129, 191, 181, 222, 111, 190, 177, 215, 151, 62, 69, 221, 104, 191, 108, 75, 177, 190, 236, 183, 144, 62, 63, 125, 135, 60, 169, 111, 156, 62, 142, 60, 146, 190, 177, 9, 81, 189, 99, 27, 139, 189, 146, 11, 185, 189, 5, 8, 27, 62, 188, 205, 83, 189, 102, 205, 248, 61, 13, 208, 169, 61, 36, 240, 198, 61, 211, 118, 14, 62, 83, 95, 22, 191, 145, 178, 56, 62, 96, 156, 128, 187, 148, 194, 201, 190, 98, 197, 189, 62, 96, 55, 177, 62, 72, 131, 141, 191, 209, 197, 54, 190, 143, 81, 40, 190, 191, 70, 249, 190, 91, 223, 7, 191, 31, 187, 94, 61, 238, 18, 34, 62, 61, 122, 46, 62, 150, 84, 169, 61, 15, 188, 47, 189, 199, 228, 108, 62, 197, 62, 129, 62, 168, 79, 131, 190, 192, 11, 209, 190, 210, 209, 53, 191, 202, 218, 33, 190, 210, 166, 80, 189, 124, 214, 63, 189, 102, 121, 46, 190, 46, 34, 84, 191, 113, 201, 43, 61, 175, 24, 196, 188, 135, 196, 230, 189, 252, 36, 246, 190, 226, 184, 83, 62, 156, 142, 131, 60, 97, 48, 190, 189, 225, 107, 56, 191, 74, 96, 215, 188, 222, 24, 3, 191, 33, 199, 54, 189, 43, 106, 196, 187, 53, 80, 69, 62, 78, 124, 7, 63, 94, 192, 16, 190, 26, 56, 33, 63, 231, 152, 5, 191, 149, 137, 0, 62, 46, 45, 252, 190, 156, 204, 124, 62, 79, 188, 233, 61, 165, 33, 201, 189, 203, 9, 149, 62, 212, 58, 134, 62, 32, 104, 109, 62, 60, 129, 49, 61, 11, 62, 228, 61, 11, 10, 55, 189, 19, 124, 118, 190, 177, 124, 78, 190, 129, 59, 205, 189, 218, 211, 176, 190, 8, 103, 161, 190, 47, 84, 132, 60, 247, 152, 25, 62, 19, 71, 63, 190, 170, 121, 171, 61, 226, 84, 214, 61, 51, 211, 11, 62, 107, 222, 27, 190, 78, 30, 92, 190, 61, 80, 32, 191, 152, 26, 169, 61, 96, 126, 144, 189, 138, 205, 63, 190, 224, 177, 160, 62, 115, 6, 135, 190, 175, 180, 234, 62, 2, 14, 4, 189, 254, 187, 68, 61, 213, 120, 167, 189, 11, 35, 145, 189, 121, 191, 68, 190, 187, 183, 214, 61, 33, 238, 13, 61, 206, 36, 160, 190, 219, 181, 145, 61, 217, 75, 213, 190, 175, 202, 13, 62, 92, 234, 85, 189, 7, 219, 19, 62, 201, 255, 167, 190, 228, 215, 63, 60, 62, 146, 59, 190, 212, 27, 225, 189, 102, 24, 115, 60, 131, 116, 141, 190, 39, 85, 39, 191, 12, 7, 161, 60, 40, 226, 185, 188, 63, 75, 36, 62, 25, 15, 198, 61, 200, 220, 102, 190, 19, 120, 38, 191, 73, 63, 26, 62, 51, 200, 186, 189, 1, 37, 72, 190, 19, 135, 216, 62, 103, 53, 42, 190, 248, 185, 191, 61, 183, 171, 15, 190, 177, 32, 75, 61, 207, 255, 99, 61, 69, 116, 101, 62, 76, 165, 178, 62, 164, 169, 7, 62, 5, 147, 213, 189, 233, 149, 201, 59, 216, 36, 172, 61, 146, 143, 138, 61, 139, 160, 163, 190, 239, 132, 177, 60, 253, 106, 147, 190, 17, 134, 63, 61, 95, 138, 159, 62, 225, 218, 58, 62, 221, 205, 50, 188, 72, 208, 168, 189, 54, 182, 9, 62, 241, 251, 29, 191, 107, 72, 130, 60, 77, 111, 128, 62, 90, 46, 39, 61, 18, 127, 249, 61, 236, 43, 238, 61, 210, 37, 74, 60, 15, 31, 11, 62, 160, 213, 105, 62, 125, 234, 112, 189, 215, 35, 67, 62, 212, 179, 110, 190, 148, 89, 209, 62, 210, 45, 56, 190, 44, 149, 174, 189, 141, 5, 175, 190, 152, 219, 72, 189, 179, 54, 76, 62, 208, 126, 18, 62, 196, 28, 205, 190, 198, 180, 155, 62, 239, 197, 219, 60, 189, 226, 11, 191, 145, 178, 39, 62, 166, 167, 127, 62, 118, 103, 49, 62, 179, 129, 237, 189, 112, 113, 0, 61, 72, 75, 227, 189, 26, 73, 73, 61, 200, 123, 233, 60, 124, 228, 42, 189, 181, 24, 250, 189, 97, 186, 78, 189, 136, 131, 177, 189, 243, 243, 9, 190, 103, 150, 158, 189, 132, 212, 205, 188, 150, 32, 21, 190, 238, 129, 53, 60, 226, 253, 3, 190, 11, 14, 46, 190, 87, 57, 135, 189, 7, 81, 169, 61, 49, 110, 29, 61, 222, 79, 26, 61, 58, 1, 246, 188, 243, 233, 37, 62, 79, 26, 185, 61, 249, 247, 40, 190, 148, 145, 197, 188, 171, 176, 42, 190, 151, 170, 181, 59, 146, 188, 35, 190, 76, 153, 130, 189, 255, 223, 19, 190, 41, 185, 114, 61, 201, 166, 175, 61, 4, 180, 184, 61, 1, 50, 19, 190, 88, 151, 98, 189, 107, 178, 57, 190, 178, 43, 222, 189, 74, 253, 123, 189, 198, 235, 110, 61, 51, 81, 191, 60, 49, 147, 17, 190, 76, 44, 94, 189, 241, 111, 82, 190, 203, 127, 128, 60, 30, 26, 152, 61, 114, 132, 149, 60, 71, 110, 224, 60, 6, 31, 19, 190, 142, 196, 38, 190, 172, 235, 222, 186, 143, 131, 9, 61, 74, 188, 171, 61, 117, 181, 7, 60, 134, 232, 181, 188, 17, 184, 214, 188, 155, 61, 45, 61, 176, 0, 41, 190, 26, 40, 9, 62, 25, 32, 125, 60, 255, 240, 235, 189, 219, 148, 217, 61, 113, 43, 36, 62, 16, 80, 56, 190, 242, 205, 10, 62, 37, 169, 190, 190, 86, 214, 4, 190, 188, 196, 88, 190, 154, 240, 79, 188, 71, 90, 80, 62, 67, 215, 12, 62, 15, 93, 69, 62, 240, 3, 249, 61, 90, 78, 174, 61, 35, 175, 111, 190, 106, 162, 197, 188, 243, 197, 97, 188, 38, 240, 103, 62, 129, 92, 219, 189, 19, 104, 9, 62, 145, 109, 146, 187, 190, 82, 19, 191, 238, 78, 40, 190, 218, 151, 141, 191, 34, 148, 127, 61, 43, 107, 234, 60, 51, 107, 25, 190, 26, 122, 141, 189, 38, 227, 79, 189, 253, 211, 140, 61, 40, 65, 148, 191, 143, 78, 227, 61, 22, 82, 158, 190, 52, 83, 197, 190, 12, 139, 163, 60, 49, 195, 43, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 101, 230, 62, 221, 114, 99, 62, 172, 214, 187, 62, 174, 114, 16, 61, 167, 71, 44, 189, 65, 147, 129, 189, 141, 210, 40, 62, 118, 219, 69, 190, 34, 87, 170, 190, 66, 115, 133, 62, 82, 250, 243, 189, 90, 126, 154, 62, 195, 193, 31, 62, 91, 78, 45, 62, 64, 140, 161, 189, 106, 213, 46, 61, 137, 177, 222, 190, 237, 65, 47, 190, 188, 54, 171, 62, 143, 3, 156, 189, 3, 138, 0, 62, 198, 115, 143, 190, 195, 153, 163, 61, 96, 191, 196, 62, 166, 176, 20, 61, 190, 210, 135, 190, 208, 236, 185, 190, 0, 34, 232, 190, 187, 149, 82, 60, 44, 63, 169, 61, 50, 228, 179, 189, 237, 207, 149, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 39, 76, 63, 237, 229, 183, 190, 94, 167, 224, 190, 149, 132, 250, 62, 189, 190, 228, 62, 56, 41, 36, 63, 79, 57, 94, 63, 238, 240, 125, 59, 205, 90, 137, 191, 201, 18, 135, 191, 83, 211, 178, 62, 234, 55, 15, 63, 233, 194, 23, 191, 161, 128, 27, 191, 45, 38, 192, 62, 27, 222, 190, 191, 255, 200, 121, 63, 177, 104, 165, 188, 216, 221, 201, 190, 140, 184, 197, 189, 144, 128, 215, 62, 194, 18, 110, 61, 254, 193, 5, 63, 152, 250, 131, 191, 229, 160, 117, 62, 182, 127, 176, 190, 202, 71, 103, 190, 209, 214, 63, 63, 13, 181, 101, 190, 28, 112, 38, 61, 149, 149, 240, 189, 135, 182, 49, 60, 214, 90, 114, 62, 149, 127, 148, 189, 213, 225, 140, 190, 127, 244, 158, 61, 159, 41, 182, 190, 106, 38, 111, 62, 156, 188, 116, 189, 97, 223, 245, 62, 185, 192, 159, 61, 89, 142, 121, 62, 52, 163, 239, 189, 219, 85, 171, 189, 114, 3, 131, 190, 90, 207, 204, 60, 229, 159, 31, 190, 158, 170, 218, 188, 10, 17, 65, 61, 114, 43, 165, 189, 93, 206, 145, 190, 124, 247, 204, 61, 22, 126, 3, 190, 153, 183, 137, 62, 82, 149, 49, 62, 166, 197, 163, 189, 27, 118, 211, 190, 150, 145, 134, 62, 6, 56, 227, 61, 235, 117, 179, 60, 71, 35, 116, 190, 76, 235, 18, 62, 20, 36, 254, 61, 1, 0, 121, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 75, 65, 189, 174, 220, 155, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {84, 119, 227, 62, 51, 248, 190, 61, 26, 247, 193, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {3, 56, 235, 63, 110, 206, 136, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0032/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}