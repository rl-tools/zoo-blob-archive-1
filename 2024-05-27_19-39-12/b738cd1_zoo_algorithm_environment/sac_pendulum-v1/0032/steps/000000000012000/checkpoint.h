// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {112, 251, 69, 191, 246, 228, 235, 62, 50, 156, 193, 190, 40, 21, 17, 61, 143, 215, 79, 63, 71, 166, 135, 190, 201, 176, 135, 62, 122, 31, 131, 62, 154, 11, 237, 190, 147, 18, 117, 190, 110, 61, 83, 63, 199, 214, 72, 190, 108, 43, 152, 62, 90, 152, 42, 190, 39, 130, 152, 190, 180, 154, 130, 190, 0, 149, 70, 190, 88, 125, 122, 62, 250, 197, 228, 189, 249, 85, 81, 191, 34, 206, 148, 62, 101, 137, 87, 191, 174, 104, 34, 191, 68, 23, 161, 59, 107, 28, 152, 188, 18, 5, 254, 190, 83, 71, 10, 63, 52, 20, 46, 63, 140, 181, 177, 190, 96, 170, 246, 190, 68, 183, 46, 62, 170, 142, 75, 63, 251, 71, 187, 62, 92, 224, 125, 190, 136, 71, 0, 190, 113, 115, 75, 191, 156, 144, 9, 189, 194, 140, 46, 189, 160, 216, 193, 62, 216, 214, 12, 191, 233, 147, 64, 63, 23, 231, 196, 60, 142, 18, 189, 189, 171, 109, 109, 191, 160, 0, 17, 63, 196, 13, 6, 63, 66, 1, 136, 191, 59, 68, 33, 190, 226, 23, 32, 61, 5, 26, 213, 63, 255, 63, 12, 63, 67, 71, 217, 62, 254, 203, 88, 62, 214, 65, 67, 62, 217, 93, 9, 191, 71, 6, 76, 191, 220, 95, 162, 190, 38, 46, 255, 62, 217, 122, 106, 191, 153, 141, 90, 190, 120, 41, 62, 190, 82, 114, 177, 63, 22, 106, 159, 62, 26, 77, 1, 63, 52, 65, 111, 190, 211, 0, 15, 63, 45, 97, 201, 190, 21, 20, 39, 191, 174, 252, 23, 191, 195, 38, 85, 63, 212, 170, 207, 62, 24, 153, 29, 63, 176, 66, 65, 63, 202, 83, 73, 63, 194, 195, 179, 62, 97, 144, 94, 62, 177, 63, 99, 63, 98, 183, 252, 62, 83, 240, 58, 63, 24, 129, 82, 191, 67, 242, 221, 190, 233, 216, 95, 63, 65, 29, 249, 62, 183, 215, 73, 62, 55, 151, 73, 62, 34, 149, 18, 63, 249, 49, 186, 62, 13, 217, 73, 191, 201, 88, 210, 190, 172, 2, 135, 190, 140, 35, 11, 191, 134, 0, 110, 62, 74, 16, 242, 62, 191, 128, 182, 62, 69, 17, 155, 63, 103, 204, 184, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 176, 214, 190, 226, 108, 43, 190, 152, 226, 60, 62, 11, 91, 193, 189, 185, 192, 26, 191, 189, 5, 5, 63, 164, 242, 251, 62, 105, 184, 65, 63, 224, 218, 187, 188, 43, 8, 87, 63, 137, 149, 58, 191, 208, 183, 15, 61, 143, 209, 189, 62, 90, 30, 215, 62, 133, 189, 140, 190, 240, 100, 167, 62, 19, 214, 151, 190, 30, 51, 43, 191, 201, 123, 172, 190, 104, 134, 185, 190, 76, 194, 178, 190, 211, 37, 129, 61, 159, 21, 156, 62, 215, 97, 82, 189, 215, 77, 135, 190, 28, 89, 247, 188, 184, 142, 64, 191, 250, 251, 41, 62, 145, 89, 153, 190, 32, 4, 11, 191, 233, 254, 45, 191, 135, 143, 141, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 100, 27, 63, 139, 38, 71, 191, 20, 139, 246, 61, 211, 111, 37, 62, 225, 246, 144, 189, 135, 88, 120, 62, 157, 129, 139, 62, 62, 156, 111, 61, 76, 220, 131, 62, 3, 253, 161, 60, 145, 16, 56, 190, 234, 141, 127, 191, 105, 44, 69, 62, 62, 166, 19, 62, 117, 166, 237, 189, 213, 130, 30, 62, 130, 36, 254, 61, 138, 87, 67, 191, 240, 116, 32, 63, 212, 206, 185, 190, 169, 22, 66, 62, 57, 46, 108, 190, 244, 145, 220, 190, 27, 222, 176, 190, 65, 227, 179, 190, 255, 67, 51, 62, 93, 61, 132, 188, 36, 71, 166, 189, 45, 218, 179, 190, 121, 126, 177, 191, 6, 145, 55, 62, 129, 72, 49, 61, 179, 182, 139, 188, 117, 127, 168, 62, 32, 121, 58, 61, 228, 53, 208, 62, 67, 81, 184, 190, 251, 136, 71, 188, 64, 249, 65, 190, 143, 143, 166, 190, 150, 192, 130, 190, 98, 228, 152, 189, 115, 21, 223, 188, 235, 192, 159, 188, 167, 31, 232, 189, 68, 248, 16, 188, 201, 125, 37, 188, 155, 52, 107, 190, 185, 138, 167, 61, 210, 27, 151, 62, 46, 22, 71, 190, 51, 215, 192, 190, 121, 78, 106, 190, 77, 96, 139, 62, 250, 87, 251, 188, 58, 202, 26, 62, 167, 137, 201, 62, 80, 245, 240, 61, 156, 105, 42, 191, 149, 59, 153, 62, 135, 176, 66, 62, 202, 241, 49, 62, 197, 28, 36, 190, 51, 26, 107, 62, 165, 20, 61, 190, 191, 255, 156, 62, 63, 109, 99, 61, 151, 108, 182, 62, 202, 55, 97, 190, 202, 204, 219, 61, 249, 53, 223, 189, 174, 247, 86, 190, 198, 223, 176, 189, 67, 168, 5, 190, 72, 186, 231, 61, 240, 115, 26, 62, 207, 178, 90, 62, 243, 47, 103, 62, 97, 77, 7, 62, 197, 216, 196, 190, 27, 176, 198, 61, 249, 189, 180, 62, 220, 156, 255, 190, 141, 90, 239, 190, 192, 159, 21, 190, 163, 74, 174, 61, 230, 21, 134, 189, 14, 166, 37, 62, 114, 80, 184, 62, 39, 168, 223, 189, 178, 63, 22, 191, 165, 197, 22, 62, 26, 55, 43, 188, 6, 67, 193, 61, 141, 41, 129, 190, 219, 228, 182, 189, 18, 218, 22, 62, 137, 142, 156, 190, 84, 218, 30, 62, 173, 6, 149, 190, 219, 86, 160, 62, 239, 119, 105, 62, 4, 255, 212, 62, 156, 228, 240, 61, 208, 31, 15, 62, 220, 78, 55, 62, 204, 185, 200, 190, 41, 171, 190, 61, 94, 191, 3, 62, 157, 146, 88, 190, 114, 235, 202, 189, 208, 133, 204, 62, 254, 216, 249, 189, 207, 160, 5, 191, 77, 65, 57, 62, 80, 198, 3, 191, 67, 87, 171, 62, 164, 183, 196, 189, 122, 85, 119, 190, 48, 226, 200, 190, 242, 45, 251, 190, 52, 48, 44, 188, 192, 186, 187, 62, 138, 118, 238, 61, 150, 67, 163, 190, 67, 72, 129, 190, 57, 198, 215, 62, 175, 255, 11, 61, 145, 225, 64, 190, 69, 235, 34, 190, 214, 227, 105, 62, 156, 17, 171, 190, 64, 150, 54, 62, 185, 90, 159, 190, 254, 172, 215, 189, 49, 142, 195, 189, 253, 167, 137, 62, 112, 232, 41, 62, 199, 30, 2, 191, 118, 139, 67, 62, 189, 98, 193, 61, 251, 171, 150, 190, 111, 78, 178, 61, 244, 22, 172, 62, 64, 35, 59, 191, 13, 78, 28, 190, 144, 17, 149, 189, 181, 109, 52, 191, 98, 40, 126, 190, 19, 161, 61, 189, 246, 143, 125, 188, 127, 83, 219, 189, 92, 167, 66, 190, 176, 205, 36, 190, 137, 89, 245, 188, 225, 66, 168, 62, 8, 67, 111, 190, 223, 74, 93, 190, 26, 159, 65, 190, 222, 246, 85, 190, 22, 236, 220, 60, 91, 14, 4, 190, 55, 219, 229, 61, 161, 39, 252, 189, 168, 173, 80, 62, 62, 92, 234, 189, 186, 212, 148, 62, 204, 210, 220, 61, 86, 121, 216, 60, 90, 55, 142, 62, 254, 235, 143, 190, 172, 73, 81, 61, 85, 136, 152, 61, 71, 222, 43, 191, 1, 248, 211, 61, 85, 113, 32, 63, 32, 197, 40, 191, 212, 77, 207, 190, 250, 136, 215, 190, 171, 181, 93, 62, 179, 162, 177, 190, 185, 147, 21, 62, 201, 109, 182, 188, 200, 68, 14, 62, 192, 8, 223, 190, 172, 36, 117, 189, 71, 45, 1, 63, 16, 124, 17, 62, 153, 235, 39, 190, 125, 46, 183, 190, 1, 191, 106, 190, 153, 27, 233, 190, 185, 231, 239, 61, 76, 164, 76, 190, 144, 244, 136, 62, 158, 44, 115, 190, 241, 34, 36, 62, 38, 83, 140, 62, 46, 215, 193, 62, 255, 74, 33, 62, 145, 47, 146, 62, 232, 161, 9, 62, 0, 106, 239, 190, 97, 91, 250, 190, 77, 158, 239, 61, 129, 217, 174, 190, 77, 203, 44, 190, 202, 124, 19, 63, 93, 92, 222, 190, 255, 148, 249, 190, 218, 167, 183, 62, 85, 210, 12, 191, 155, 137, 219, 189, 54, 111, 107, 189, 110, 215, 187, 190, 183, 255, 170, 190, 43, 140, 155, 190, 236, 0, 89, 189, 119, 21, 228, 62, 55, 42, 114, 189, 39, 183, 129, 190, 202, 76, 175, 191, 248, 51, 86, 61, 0, 125, 104, 61, 122, 9, 66, 189, 56, 162, 73, 190, 252, 232, 146, 189, 205, 194, 54, 189, 226, 222, 44, 190, 221, 174, 226, 189, 52, 127, 235, 188, 20, 230, 14, 191, 8, 67, 3, 190, 170, 1, 57, 190, 117, 14, 131, 62, 204, 182, 37, 190, 151, 135, 17, 62, 238, 61, 32, 189, 204, 56, 148, 188, 18, 80, 165, 190, 174, 195, 244, 60, 187, 217, 20, 62, 252, 208, 202, 189, 12, 99, 46, 191, 148, 29, 194, 188, 28, 149, 104, 62, 230, 168, 25, 190, 86, 173, 128, 62, 77, 59, 121, 62, 104, 4, 190, 189, 135, 55, 67, 189, 88, 192, 22, 62, 240, 87, 199, 61, 169, 165, 222, 61, 241, 255, 130, 61, 227, 42, 166, 61, 198, 183, 11, 191, 39, 255, 43, 190, 51, 243, 55, 190, 255, 151, 228, 190, 118, 254, 10, 62, 196, 168, 186, 189, 167, 186, 84, 61, 111, 39, 139, 61, 180, 96, 161, 62, 158, 162, 142, 61, 81, 129, 90, 190, 128, 90, 55, 60, 254, 63, 41, 190, 244, 236, 78, 191, 135, 120, 96, 59, 148, 89, 150, 62, 167, 55, 165, 190, 209, 135, 58, 190, 197, 154, 35, 190, 51, 19, 247, 62, 74, 37, 16, 190, 224, 255, 32, 62, 146, 112, 5, 61, 79, 49, 160, 190, 74, 27, 68, 191, 106, 101, 51, 62, 210, 34, 134, 62, 91, 100, 13, 191, 107, 67, 121, 61, 225, 148, 218, 190, 199, 63, 9, 187, 133, 9, 94, 190, 149, 170, 136, 189, 36, 227, 151, 190, 160, 213, 175, 59, 80, 112, 28, 191, 163, 130, 44, 190, 212, 193, 109, 62, 53, 253, 110, 62, 61, 46, 112, 62, 190, 36, 130, 62, 131, 198, 13, 191, 104, 157, 173, 190, 160, 70, 35, 190, 47, 255, 68, 61, 233, 26, 33, 190, 65, 202, 64, 60, 20, 51, 130, 61, 241, 20, 202, 190, 158, 127, 65, 190, 159, 235, 203, 191, 229, 233, 2, 63, 3, 50, 73, 190, 1, 11, 51, 190, 40, 108, 227, 189, 68, 205, 146, 190, 221, 34, 27, 191, 222, 47, 68, 190, 95, 185, 22, 190, 200, 166, 228, 190, 171, 245, 5, 190, 132, 75, 73, 189, 235, 224, 138, 61, 78, 110, 93, 190, 227, 64, 5, 190, 34, 65, 30, 61, 153, 72, 134, 62, 158, 158, 180, 190, 17, 227, 193, 61, 14, 62, 46, 62, 232, 18, 137, 62, 51, 4, 7, 60, 225, 142, 155, 62, 49, 196, 143, 62, 165, 235, 36, 189, 101, 147, 172, 61, 236, 33, 158, 189, 9, 150, 247, 190, 48, 157, 10, 61, 53, 122, 138, 62, 85, 143, 17, 190, 120, 199, 190, 190, 222, 44, 132, 59, 66, 122, 224, 190, 127, 220, 106, 62, 57, 44, 100, 190, 114, 206, 46, 190, 134, 33, 212, 60, 208, 167, 141, 190, 190, 80, 0, 188, 175, 163, 191, 62, 58, 57, 87, 59, 60, 110, 142, 190, 61, 4, 199, 189, 245, 234, 186, 61, 167, 100, 247, 189, 140, 129, 72, 63, 255, 238, 32, 191, 2, 13, 85, 190, 242, 190, 179, 59, 109, 107, 23, 189, 28, 212, 251, 61, 36, 223, 64, 62, 74, 75, 32, 62, 225, 89, 196, 61, 164, 185, 21, 191, 166, 245, 84, 190, 63, 13, 120, 191, 242, 179, 55, 62, 220, 183, 167, 62, 87, 62, 19, 190, 6, 209, 139, 189, 17, 149, 74, 62, 102, 41, 188, 190, 38, 194, 25, 63, 162, 249, 215, 189, 214, 82, 219, 62, 147, 247, 125, 189, 7, 15, 234, 190, 88, 84, 14, 189, 130, 12, 13, 190, 108, 223, 145, 62, 27, 21, 132, 190, 169, 140, 100, 61, 78, 127, 214, 189, 28, 27, 215, 191, 151, 33, 130, 61, 27, 183, 168, 61, 98, 9, 87, 190, 235, 229, 153, 62, 60, 246, 228, 61, 219, 212, 205, 62, 152, 242, 93, 190, 114, 84, 89, 61, 172, 158, 62, 189, 136, 233, 25, 191, 250, 127, 161, 190, 158, 237, 89, 62, 149, 181, 214, 61, 198, 176, 55, 60, 122, 254, 44, 190, 91, 16, 132, 61, 22, 13, 2, 189, 9, 46, 133, 190, 188, 55, 49, 189, 196, 219, 5, 63, 23, 146, 81, 191, 62, 105, 83, 191, 108, 246, 25, 190, 39, 51, 81, 62, 17, 68, 100, 190, 173, 84, 202, 62, 171, 58, 132, 62, 74, 82, 148, 60, 125, 56, 79, 191, 92, 173, 228, 62, 215, 217, 153, 62, 160, 178, 37, 61, 209, 2, 172, 189, 17, 49, 60, 62, 41, 223, 135, 190, 216, 203, 192, 62, 139, 233, 12, 189, 49, 46, 174, 62, 107, 209, 97, 189, 5, 83, 8, 61, 121, 23, 131, 61, 188, 184, 233, 61, 242, 183, 6, 191, 116, 51, 30, 189, 224, 146, 159, 189, 110, 162, 240, 61, 77, 139, 227, 189, 207, 176, 190, 62, 60, 18, 34, 190, 231, 73, 246, 190, 190, 255, 40, 190, 186, 200, 101, 190, 246, 174, 176, 61, 11, 151, 251, 187, 203, 79, 79, 191, 211, 66, 222, 61, 196, 45, 153, 62, 2, 207, 16, 63, 26, 178, 187, 62, 107, 170, 153, 190, 169, 185, 73, 190, 65, 95, 143, 62, 215, 38, 226, 61, 106, 137, 18, 62, 221, 21, 76, 191, 128, 121, 90, 62, 218, 248, 133, 61, 166, 150, 120, 60, 20, 76, 37, 62, 165, 179, 34, 61, 36, 200, 39, 61, 24, 92, 168, 62, 70, 184, 66, 60, 21, 73, 97, 61, 168, 91, 41, 62, 37, 214, 174, 61, 217, 169, 55, 189, 239, 141, 231, 189, 52, 13, 25, 190, 244, 237, 0, 190, 22, 76, 118, 191, 248, 226, 154, 62, 150, 74, 166, 62, 77, 242, 17, 191, 23, 238, 161, 61, 115, 157, 26, 191, 98, 94, 167, 62, 70, 190, 17, 191, 246, 233, 241, 61, 217, 24, 168, 190, 248, 174, 92, 190, 91, 115, 87, 61, 246, 109, 164, 62, 131, 28, 55, 61, 135, 237, 197, 190, 123, 217, 230, 189, 52, 170, 182, 62, 168, 94, 253, 62, 225, 218, 151, 190, 237, 253, 98, 189, 175, 191, 145, 189, 143, 175, 27, 60, 81, 65, 207, 189, 112, 98, 236, 62, 53, 165, 243, 62, 196, 179, 198, 62, 30, 194, 151, 190, 82, 150, 158, 190, 126, 58, 171, 188, 134, 202, 59, 62, 181, 176, 55, 189, 47, 30, 29, 62, 235, 140, 141, 62, 69, 65, 69, 62, 47, 1, 214, 191, 41, 3, 56, 190, 209, 88, 162, 190, 55, 137, 79, 63, 255, 250, 71, 191, 211, 92, 113, 62, 143, 249, 187, 62, 188, 251, 225, 190, 14, 124, 137, 191, 226, 198, 151, 191, 34, 76, 35, 190, 80, 239, 60, 191, 167, 224, 61, 62, 120, 247, 72, 62, 73, 25, 10, 191, 42, 4, 6, 191, 104, 194, 11, 61, 155, 169, 227, 62, 122, 149, 158, 62, 222, 192, 10, 62, 219, 9, 51, 190, 84, 6, 250, 189, 55, 105, 167, 190, 79, 105, 115, 191, 252, 208, 5, 189, 77, 96, 163, 190, 146, 61, 96, 62, 159, 86, 122, 61, 79, 116, 31, 61, 136, 133, 246, 190, 18, 170, 14, 189, 32, 231, 14, 191, 48, 227, 33, 61, 210, 22, 187, 62, 179, 102, 163, 61, 159, 232, 212, 61, 197, 46, 149, 189, 34, 119, 6, 62, 99, 155, 204, 189, 208, 38, 54, 62, 222, 12, 155, 62, 72, 99, 4, 62, 98, 30, 50, 190, 79, 235, 109, 62, 106, 23, 65, 62, 15, 150, 205, 189, 204, 32, 28, 189, 54, 250, 61, 62, 61, 148, 219, 189, 7, 185, 161, 189, 76, 171, 208, 189, 103, 249, 5, 62, 202, 194, 46, 190, 137, 219, 30, 188, 88, 72, 40, 190, 1, 171, 52, 190, 243, 126, 210, 189, 196, 99, 14, 190, 67, 7, 254, 189, 211, 74, 48, 190, 211, 45, 158, 189, 81, 48, 165, 61, 18, 43, 193, 188, 243, 43, 183, 60, 117, 182, 3, 62, 25, 106, 217, 60, 88, 36, 4, 190, 54, 217, 36, 190, 252, 122, 90, 61, 182, 71, 199, 189, 188, 129, 18, 60, 41, 244, 249, 189, 82, 52, 25, 190, 147, 135, 90, 188, 240, 201, 71, 61, 126, 53, 233, 189, 106, 65, 148, 61, 2, 43, 245, 189, 76, 135, 3, 62, 7, 8, 145, 189, 65, 121, 66, 190, 212, 29, 248, 60, 108, 187, 45, 190, 34, 100, 47, 189, 36, 221, 51, 190, 180, 251, 176, 61, 62, 86, 45, 62, 244, 181, 35, 62, 164, 169, 155, 190, 58, 140, 148, 62, 15, 241, 189, 186, 44, 187, 149, 60, 11, 33, 175, 61, 237, 84, 108, 62, 170, 242, 213, 61, 227, 223, 17, 62, 109, 17, 16, 191, 159, 6, 172, 62, 58, 254, 128, 189, 27, 174, 13, 190, 99, 90, 166, 191, 63, 254, 111, 62, 67, 205, 82, 62, 170, 211, 238, 62, 240, 168, 11, 63, 3, 232, 165, 190, 157, 234, 115, 190, 71, 41, 25, 62, 186, 17, 141, 62, 157, 222, 166, 189, 234, 143, 213, 190, 213, 73, 172, 190, 176, 245, 162, 61, 105, 88, 38, 190, 244, 22, 142, 61, 136, 199, 251, 189, 10, 184, 10, 189, 65, 77, 222, 188, 133, 150, 246, 189, 109, 8, 154, 189, 213, 144, 97, 188, 133, 249, 27, 189, 236, 71, 178, 61, 249, 226, 73, 190, 66, 84, 34, 190, 157, 30, 2, 62, 68, 8, 165, 61, 36, 165, 223, 61, 236, 212, 83, 190, 141, 250, 75, 61, 91, 12, 201, 61, 85, 232, 250, 189, 188, 20, 248, 187, 75, 90, 12, 190, 139, 224, 26, 190, 102, 242, 180, 188, 243, 251, 211, 189, 156, 75, 250, 189, 214, 141, 18, 62, 46, 64, 201, 61, 8, 138, 70, 189, 29, 254, 173, 60, 120, 13, 255, 189, 87, 192, 3, 62, 5, 77, 1, 61, 239, 90, 212, 189, 116, 170, 120, 62, 107, 65, 64, 62, 166, 118, 51, 61, 71, 182, 56, 189, 228, 25, 157, 60, 77, 132, 38, 62, 217, 218, 207, 59, 195, 66, 64, 62, 167, 164, 168, 189, 1, 249, 250, 61, 20, 242, 72, 190, 58, 165, 211, 189, 0, 127, 127, 61, 250, 81, 235, 62, 88, 139, 11, 60, 185, 188, 134, 62, 17, 11, 20, 189, 87, 180, 226, 190, 112, 193, 191, 189, 139, 207, 155, 62, 184, 115, 230, 58, 154, 14, 77, 62, 71, 78, 83, 190, 0, 68, 131, 190, 99, 119, 66, 62, 144, 201, 246, 61, 57, 32, 205, 61, 0, 74, 160, 190, 105, 53, 111, 191, 128, 108, 240, 61, 209, 80, 170, 61, 65, 81, 253, 61, 174, 78, 23, 62, 132, 110, 123, 189, 199, 8, 96, 189, 245, 166, 0, 190, 108, 214, 236, 189, 32, 18, 68, 62, 171, 239, 170, 61, 127, 150, 28, 62, 93, 128, 82, 62, 221, 38, 255, 189, 167, 112, 3, 62, 113, 150, 160, 190, 108, 95, 148, 61, 26, 253, 76, 189, 74, 74, 93, 61, 73, 173, 213, 60, 88, 132, 198, 190, 21, 1, 213, 62, 169, 144, 212, 61, 99, 177, 153, 61, 10, 137, 95, 190, 7, 93, 24, 62, 144, 173, 82, 62, 227, 30, 16, 190, 52, 2, 111, 62, 152, 89, 85, 61, 150, 141, 66, 62, 190, 60, 64, 188, 120, 246, 137, 189, 60, 147, 237, 189, 244, 252, 153, 60, 25, 182, 165, 190, 173, 96, 138, 62, 74, 241, 247, 189, 122, 69, 93, 188, 192, 168, 40, 61, 169, 236, 5, 62, 156, 181, 125, 62, 3, 144, 26, 62, 46, 217, 128, 62, 34, 67, 21, 190, 34, 54, 131, 190, 91, 240, 223, 60, 150, 124, 12, 62, 63, 63, 2, 190, 23, 243, 98, 62, 104, 105, 47, 62, 225, 66, 59, 191, 9, 194, 201, 189, 67, 172, 99, 191, 36, 105, 187, 62, 119, 102, 237, 189, 94, 234, 11, 190, 197, 109, 86, 190, 232, 235, 194, 190, 249, 200, 225, 61, 116, 178, 131, 62, 188, 132, 51, 189, 41, 125, 253, 189, 107, 206, 226, 190, 63, 185, 132, 62, 238, 146, 164, 189, 1, 103, 242, 190, 142, 38, 9, 191, 76, 46, 253, 190, 177, 116, 167, 190, 174, 53, 52, 190, 170, 229, 149, 62, 47, 189, 151, 60, 35, 138, 187, 62, 189, 46, 74, 189, 186, 94, 23, 191, 105, 175, 193, 190, 23, 115, 206, 190, 253, 95, 131, 62, 159, 42, 140, 60, 215, 28, 193, 61, 178, 59, 112, 62, 253, 253, 4, 62, 120, 98, 109, 191, 19, 82, 220, 191, 101, 115, 208, 62, 203, 148, 188, 62, 113, 31, 24, 190, 68, 186, 193, 190, 183, 217, 5, 191, 129, 215, 48, 191, 227, 113, 30, 190, 52, 36, 92, 190, 30, 46, 63, 191, 140, 244, 94, 190, 184, 191, 128, 62, 58, 220, 99, 61, 20, 48, 144, 62, 89, 62, 151, 190, 122, 210, 178, 189, 100, 191, 139, 189, 179, 32, 201, 189, 100, 161, 115, 62, 249, 197, 56, 189, 128, 92, 183, 61, 142, 144, 115, 188, 254, 224, 243, 61, 224, 111, 5, 62, 227, 129, 242, 190, 181, 159, 85, 62, 229, 238, 156, 60, 153, 120, 178, 190, 152, 128, 174, 62, 233, 121, 166, 62, 252, 238, 87, 191, 205, 124, 3, 190, 32, 176, 139, 189, 102, 50, 186, 190, 43, 136, 238, 190, 132, 225, 97, 61, 190, 184, 43, 62, 47, 8, 16, 62, 91, 94, 2, 61, 148, 136, 59, 189, 114, 210, 166, 62, 200, 162, 87, 62, 114, 135, 77, 190, 129, 167, 144, 190, 122, 27, 32, 191, 28, 27, 44, 190, 210, 166, 80, 189, 129, 138, 163, 189, 145, 9, 130, 189, 248, 71, 73, 191, 113, 201, 43, 61, 241, 208, 97, 189, 218, 125, 40, 190, 158, 138, 210, 190, 111, 39, 9, 62, 1, 234, 246, 60, 29, 0, 230, 189, 141, 173, 24, 191, 75, 232, 123, 189, 42, 175, 175, 190, 193, 192, 174, 189, 238, 24, 79, 187, 146, 128, 20, 62, 66, 204, 157, 62, 165, 218, 253, 189, 6, 1, 228, 62, 119, 116, 179, 190, 194, 235, 195, 61, 189, 227, 133, 190, 106, 226, 115, 62, 61, 93, 14, 62, 83, 86, 209, 189, 6, 25, 70, 62, 169, 112, 150, 62, 245, 81, 53, 62, 60, 129, 49, 61, 229, 243, 88, 61, 215, 38, 41, 61, 19, 124, 118, 190, 177, 124, 78, 190, 234, 93, 241, 188, 218, 211, 176, 190, 49, 241, 131, 189, 50, 43, 77, 61, 107, 179, 52, 62, 131, 82, 20, 190, 69, 24, 231, 61, 38, 153, 165, 61, 144, 72, 24, 62, 199, 19, 62, 189, 18, 61, 57, 190, 247, 213, 239, 190, 142, 214, 235, 61, 248, 32, 126, 189, 74, 81, 15, 190, 202, 105, 88, 62, 28, 166, 121, 189, 203, 152, 222, 62, 194, 188, 52, 61, 174, 142, 162, 61, 91, 30, 209, 188, 242, 237, 13, 189, 182, 61, 28, 190, 39, 238, 19, 62, 51, 242, 169, 61, 90, 40, 150, 190, 236, 174, 239, 61, 216, 53, 205, 190, 40, 185, 41, 62, 215, 191, 25, 188, 7, 219, 19, 62, 201, 255, 167, 190, 240, 123, 140, 60, 62, 146, 59, 190, 212, 27, 225, 189, 153, 156, 217, 59, 165, 71, 153, 190, 177, 61, 20, 191, 99, 144, 14, 60, 219, 153, 46, 190, 163, 25, 52, 62, 25, 15, 198, 61, 100, 31, 111, 190, 151, 4, 24, 191, 162, 29, 13, 62, 189, 0, 242, 189, 232, 119, 63, 190, 31, 31, 214, 62, 103, 53, 42, 190, 248, 185, 191, 61, 246, 144, 207, 189, 28, 16, 12, 61, 207, 255, 99, 61, 119, 107, 88, 62, 125, 191, 173, 62, 139, 254, 7, 62, 5, 147, 213, 189, 84, 247, 98, 188, 204, 220, 172, 61, 146, 143, 138, 61, 219, 105, 144, 190, 7, 91, 146, 60, 62, 92, 147, 189, 190, 15, 215, 186, 170, 198, 185, 62, 83, 225, 59, 62, 102, 39, 145, 61, 238, 32, 143, 189, 230, 204, 19, 62, 238, 151, 179, 190, 183, 48, 103, 188, 25, 37, 130, 62, 142, 231, 70, 61, 150, 8, 71, 62, 111, 147, 244, 61, 227, 146, 37, 189, 121, 97, 22, 62, 64, 211, 133, 62, 200, 19, 125, 189, 225, 192, 6, 62, 45, 224, 57, 61, 140, 184, 149, 62, 150, 218, 216, 189, 12, 46, 140, 189, 6, 87, 82, 190, 105, 239, 161, 188, 138, 146, 91, 62, 36, 105, 26, 62, 68, 215, 148, 190, 170, 47, 153, 62, 231, 136, 200, 60, 255, 158, 101, 190, 204, 15, 37, 62, 200, 191, 114, 62, 118, 103, 49, 62, 179, 129, 237, 189, 112, 113, 0, 61, 72, 75, 227, 189, 26, 73, 73, 61, 200, 123, 233, 60, 124, 228, 42, 189, 181, 24, 250, 189, 97, 186, 78, 189, 136, 131, 177, 189, 243, 243, 9, 190, 103, 150, 158, 189, 132, 212, 205, 188, 150, 32, 21, 190, 238, 129, 53, 60, 226, 253, 3, 190, 11, 14, 46, 190, 87, 57, 135, 189, 7, 81, 169, 61, 49, 110, 29, 61, 222, 79, 26, 61, 58, 1, 246, 188, 243, 233, 37, 62, 79, 26, 185, 61, 249, 247, 40, 190, 148, 145, 197, 188, 171, 176, 42, 190, 151, 170, 181, 59, 146, 188, 35, 190, 76, 153, 130, 189, 255, 223, 19, 190, 41, 185, 114, 61, 201, 166, 175, 61, 4, 180, 184, 61, 1, 50, 19, 190, 88, 151, 98, 189, 107, 178, 57, 190, 178, 43, 222, 189, 74, 253, 123, 189, 198, 235, 110, 61, 51, 81, 191, 60, 49, 147, 17, 190, 76, 44, 94, 189, 241, 111, 82, 190, 203, 127, 128, 60, 30, 26, 152, 61, 114, 132, 149, 60, 71, 110, 224, 60, 6, 31, 19, 190, 142, 196, 38, 190, 172, 235, 222, 186, 143, 131, 9, 61, 74, 188, 171, 61, 117, 181, 7, 60, 134, 232, 181, 188, 17, 184, 214, 188, 155, 61, 45, 61, 176, 0, 41, 190, 26, 40, 9, 62, 25, 32, 125, 60, 255, 240, 235, 189, 219, 148, 217, 61, 113, 43, 36, 62, 16, 80, 56, 190, 1, 146, 170, 62, 10, 249, 184, 190, 231, 46, 150, 190, 128, 242, 206, 189, 240, 234, 222, 60, 2, 171, 121, 62, 68, 193, 69, 62, 113, 125, 139, 62, 118, 47, 65, 62, 157, 114, 27, 189, 2, 26, 132, 190, 159, 69, 155, 61, 146, 144, 178, 60, 235, 253, 89, 62, 190, 182, 56, 189, 32, 157, 63, 61, 161, 123, 188, 60, 224, 252, 227, 190, 110, 207, 127, 189, 134, 21, 146, 191, 98, 111, 86, 60, 31, 13, 135, 61, 127, 141, 112, 189, 55, 74, 161, 189, 121, 140, 6, 190, 178, 200, 139, 61, 240, 28, 253, 190, 58, 232, 241, 58, 209, 87, 132, 190, 252, 37, 220, 189, 195, 88, 40, 61, 40, 189, 53, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {82, 34, 197, 62, 53, 57, 61, 62, 231, 188, 168, 62, 240, 156, 11, 61, 48, 14, 217, 59, 103, 80, 162, 189, 116, 223, 247, 61, 19, 86, 121, 190, 101, 37, 79, 190, 255, 205, 94, 62, 192, 234, 8, 190, 174, 102, 157, 62, 245, 32, 240, 61, 214, 224, 1, 62, 152, 230, 252, 188, 19, 140, 200, 61, 133, 79, 168, 190, 237, 65, 47, 190, 75, 242, 166, 62, 184, 146, 131, 189, 44, 154, 20, 62, 14, 105, 108, 190, 18, 75, 155, 61, 55, 225, 74, 62, 217, 30, 30, 186, 92, 139, 104, 190, 95, 55, 161, 190, 33, 171, 243, 190, 85, 0, 10, 61, 44, 63, 169, 61, 50, 228, 179, 189, 125, 221, 95, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 250, 87, 63, 37, 154, 158, 190, 242, 212, 197, 190, 194, 131, 6, 63, 162, 109, 147, 62, 11, 14, 28, 63, 22, 168, 63, 63, 141, 2, 58, 188, 50, 114, 77, 191, 42, 251, 98, 191, 26, 98, 203, 62, 83, 2, 12, 63, 225, 184, 9, 191, 45, 247, 22, 191, 180, 6, 205, 62, 141, 92, 176, 191, 158, 43, 49, 63, 177, 104, 165, 188, 32, 31, 217, 190, 253, 235, 197, 189, 40, 114, 222, 62, 226, 85, 187, 60, 215, 136, 3, 63, 37, 223, 67, 191, 50, 111, 87, 62, 20, 233, 159, 190, 124, 166, 72, 190, 122, 200, 50, 63, 187, 157, 68, 190, 28, 112, 38, 61, 149, 149, 240, 189, 160, 131, 178, 61, 214, 117, 33, 62, 144, 241, 133, 61, 161, 151, 38, 190, 249, 152, 197, 60, 140, 228, 218, 190, 40, 47, 73, 62, 115, 162, 166, 188, 200, 133, 171, 62, 185, 175, 131, 61, 208, 241, 108, 62, 135, 136, 51, 190, 54, 181, 10, 190, 244, 102, 0, 190, 181, 91, 85, 61, 148, 196, 36, 189, 11, 192, 239, 60, 210, 58, 12, 190, 114, 43, 165, 189, 175, 51, 82, 190, 130, 240, 204, 61, 226, 189, 169, 189, 82, 221, 53, 62, 249, 118, 46, 62, 254, 57, 195, 189, 136, 195, 204, 190, 82, 59, 93, 62, 250, 181, 20, 62, 214, 159, 136, 188, 223, 99, 28, 190, 76, 235, 18, 62, 20, 36, 254, 61, 147, 159, 94, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 225, 211, 188, 103, 41, 85, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {140, 174, 3, 191, 200, 202, 226, 190, 39, 67, 153, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {103, 188, 5, 191, 199, 86, 12, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0032/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}