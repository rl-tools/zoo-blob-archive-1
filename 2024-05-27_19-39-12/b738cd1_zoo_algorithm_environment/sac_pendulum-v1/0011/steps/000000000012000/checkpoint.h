// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 135, 185, 61, 36, 214, 255, 190, 102, 215, 143, 59, 237, 254, 179, 62, 104, 235, 104, 60, 57, 199, 181, 190, 68, 56, 30, 191, 21, 30, 193, 191, 230, 202, 149, 190, 253, 86, 96, 190, 154, 154, 157, 61, 74, 51, 39, 190, 155, 248, 81, 190, 218, 185, 109, 63, 51, 188, 2, 63, 112, 215, 193, 190, 242, 217, 169, 191, 230, 199, 201, 190, 218, 51, 137, 190, 61, 216, 204, 190, 71, 11, 244, 62, 0, 80, 59, 190, 96, 41, 6, 62, 232, 254, 27, 191, 147, 253, 92, 63, 93, 24, 39, 63, 158, 87, 197, 62, 110, 17, 15, 191, 186, 24, 39, 190, 104, 185, 186, 190, 189, 140, 115, 61, 69, 222, 152, 61, 176, 114, 213, 190, 58, 244, 222, 62, 230, 245, 248, 190, 201, 229, 94, 62, 86, 109, 96, 190, 201, 250, 231, 190, 192, 162, 246, 62, 18, 29, 238, 188, 51, 124, 248, 62, 37, 207, 39, 63, 87, 58, 130, 62, 157, 140, 153, 63, 240, 195, 76, 62, 230, 211, 240, 190, 157, 39, 19, 191, 121, 95, 232, 62, 163, 116, 64, 63, 76, 122, 135, 191, 52, 134, 175, 190, 89, 48, 10, 63, 211, 101, 63, 191, 192, 77, 75, 62, 107, 197, 99, 63, 46, 155, 142, 190, 153, 131, 190, 188, 23, 244, 35, 63, 224, 79, 129, 191, 45, 236, 138, 190, 30, 68, 137, 62, 65, 68, 83, 191, 251, 219, 202, 189, 4, 218, 43, 63, 111, 81, 85, 63, 252, 47, 76, 62, 9, 165, 29, 62, 145, 69, 72, 63, 163, 226, 205, 61, 72, 197, 30, 191, 158, 194, 223, 191, 146, 134, 217, 190, 230, 78, 62, 191, 153, 217, 37, 63, 75, 24, 17, 63, 49, 109, 32, 63, 68, 117, 156, 190, 8, 128, 116, 190, 36, 238, 136, 62, 71, 152, 72, 190, 83, 65, 11, 190, 135, 66, 55, 63, 180, 8, 67, 62, 161, 235, 25, 63, 40, 166, 231, 62, 170, 14, 156, 190, 185, 201, 214, 190, 21, 236, 7, 189, 169, 76, 161, 62, 222, 19, 155, 60, 67, 214, 29, 62, 68, 162, 19, 190, 159, 93, 221, 62, 188, 229, 145, 62, 14, 19, 143, 191, 249, 242, 248, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 198, 19, 191, 104, 221, 49, 191, 230, 254, 192, 189, 11, 26, 12, 63, 168, 76, 231, 190, 216, 227, 7, 190, 16, 152, 214, 190, 38, 168, 144, 62, 223, 50, 90, 191, 78, 129, 193, 189, 25, 119, 212, 62, 42, 96, 176, 62, 28, 224, 144, 190, 190, 163, 5, 63, 74, 2, 127, 62, 134, 77, 23, 63, 145, 71, 3, 61, 22, 37, 14, 62, 159, 215, 70, 190, 36, 201, 188, 190, 182, 113, 23, 63, 66, 31, 169, 190, 13, 139, 35, 63, 230, 62, 6, 61, 237, 117, 2, 63, 255, 85, 66, 191, 115, 101, 235, 62, 176, 214, 217, 190, 27, 0, 151, 189, 132, 219, 213, 62, 48, 37, 80, 191, 98, 84, 50, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 206, 224, 61, 201, 198, 129, 189, 236, 136, 153, 62, 127, 92, 122, 61, 40, 241, 51, 190, 247, 97, 151, 61, 159, 142, 142, 189, 182, 72, 58, 62, 16, 30, 120, 62, 198, 153, 144, 190, 252, 221, 22, 190, 50, 128, 172, 189, 81, 142, 191, 189, 76, 187, 158, 61, 72, 0, 75, 62, 115, 230, 225, 61, 4, 252, 79, 62, 9, 227, 79, 62, 245, 57, 14, 62, 92, 111, 65, 190, 25, 65, 132, 62, 67, 103, 139, 62, 217, 166, 241, 61, 80, 192, 24, 62, 200, 92, 152, 189, 118, 29, 48, 189, 245, 157, 9, 62, 241, 0, 203, 61, 159, 38, 20, 62, 60, 239, 115, 60, 239, 247, 188, 60, 65, 255, 231, 61, 228, 191, 120, 61, 250, 214, 100, 61, 77, 232, 236, 189, 82, 116, 5, 62, 63, 126, 246, 190, 95, 123, 6, 188, 21, 12, 49, 61, 186, 253, 16, 62, 153, 149, 193, 190, 3, 117, 83, 189, 107, 219, 165, 189, 171, 244, 242, 62, 203, 223, 73, 62, 153, 4, 104, 189, 217, 54, 183, 190, 209, 181, 64, 62, 155, 90, 163, 188, 190, 133, 185, 62, 30, 16, 124, 62, 65, 190, 20, 190, 55, 151, 1, 62, 41, 204, 26, 191, 146, 239, 140, 189, 127, 65, 60, 189, 89, 119, 7, 190, 114, 235, 163, 62, 49, 13, 181, 189, 86, 172, 77, 188, 158, 229, 144, 61, 191, 244, 22, 190, 216, 48, 18, 190, 32, 32, 127, 62, 181, 243, 135, 60, 215, 85, 53, 189, 140, 231, 201, 61, 17, 120, 139, 61, 226, 157, 4, 62, 78, 52, 250, 189, 162, 234, 108, 189, 202, 184, 51, 62, 202, 12, 21, 191, 217, 78, 78, 189, 40, 51, 85, 61, 136, 74, 132, 62, 152, 155, 208, 189, 111, 166, 230, 190, 37, 92, 73, 191, 81, 151, 33, 63, 69, 179, 183, 189, 241, 55, 84, 62, 210, 181, 89, 62, 182, 108, 136, 188, 41, 80, 178, 61, 15, 77, 153, 191, 206, 238, 146, 190, 234, 142, 91, 62, 20, 142, 224, 189, 253, 184, 17, 62, 208, 9, 51, 189, 49, 171, 222, 190, 184, 43, 83, 61, 187, 94, 229, 61, 169, 180, 14, 61, 244, 224, 204, 62, 147, 141, 24, 189, 83, 123, 44, 62, 170, 167, 19, 62, 6, 215, 89, 62, 32, 210, 50, 189, 92, 251, 14, 61, 197, 83, 145, 190, 201, 105, 65, 62, 110, 83, 185, 190, 29, 96, 7, 61, 221, 186, 41, 62, 150, 192, 37, 62, 50, 124, 50, 190, 157, 125, 14, 191, 28, 236, 69, 191, 129, 100, 95, 63, 76, 16, 69, 190, 230, 181, 160, 62, 41, 50, 161, 62, 89, 224, 21, 61, 110, 211, 171, 60, 105, 127, 94, 191, 41, 27, 9, 191, 35, 108, 91, 189, 137, 8, 65, 189, 174, 224, 61, 62, 154, 39, 164, 61, 18, 208, 7, 191, 115, 89, 63, 190, 154, 82, 216, 189, 3, 255, 29, 190, 2, 187, 33, 63, 174, 236, 32, 62, 19, 185, 33, 190, 37, 4, 141, 62, 195, 142, 58, 189, 205, 157, 157, 190, 36, 27, 80, 188, 51, 88, 148, 61, 57, 156, 47, 62, 29, 243, 12, 189, 13, 186, 20, 190, 137, 147, 65, 60, 245, 218, 165, 62, 79, 125, 70, 189, 169, 23, 244, 189, 35, 161, 119, 190, 88, 100, 198, 61, 8, 122, 150, 61, 137, 41, 142, 62, 51, 114, 151, 62, 238, 134, 97, 190, 162, 42, 251, 60, 98, 123, 152, 190, 185, 192, 20, 60, 19, 208, 229, 61, 165, 102, 213, 61, 195, 35, 172, 61, 137, 137, 142, 62, 253, 131, 75, 189, 20, 51, 153, 189, 2, 12, 46, 62, 154, 154, 17, 62, 65, 108, 35, 62, 129, 136, 219, 61, 78, 130, 39, 190, 76, 151, 131, 62, 156, 109, 155, 61, 83, 67, 135, 190, 214, 184, 66, 188, 209, 41, 94, 190, 149, 4, 15, 190, 122, 30, 81, 190, 57, 118, 35, 189, 57, 111, 187, 61, 233, 232, 33, 61, 52, 53, 45, 189, 112, 43, 219, 61, 9, 33, 192, 60, 88, 237, 220, 59, 191, 175, 74, 189, 154, 254, 22, 62, 205, 126, 53, 62, 125, 195, 155, 190, 123, 132, 147, 62, 88, 63, 187, 59, 215, 191, 59, 62, 244, 196, 48, 62, 21, 35, 186, 61, 44, 43, 218, 189, 68, 176, 130, 62, 34, 33, 144, 61, 197, 93, 45, 62, 251, 54, 63, 62, 29, 4, 233, 189, 32, 229, 79, 190, 71, 58, 32, 190, 73, 225, 27, 190, 107, 248, 20, 190, 124, 4, 54, 190, 6, 234, 165, 188, 37, 27, 31, 61, 85, 71, 71, 189, 87, 153, 9, 61, 167, 250, 94, 61, 102, 147, 163, 189, 110, 8, 227, 61, 212, 139, 66, 189, 168, 250, 35, 190, 21, 46, 33, 190, 145, 141, 26, 190, 74, 116, 2, 190, 193, 251, 16, 61, 147, 126, 83, 61, 148, 217, 139, 189, 218, 165, 18, 189, 187, 130, 253, 189, 243, 222, 1, 62, 196, 60, 207, 188, 135, 81, 15, 190, 254, 3, 26, 62, 29, 7, 138, 61, 136, 88, 11, 190, 232, 194, 244, 61, 226, 41, 110, 61, 32, 53, 67, 190, 147, 120, 7, 190, 187, 134, 65, 57, 250, 58, 35, 62, 50, 209, 173, 188, 159, 151, 8, 189, 58, 37, 226, 61, 252, 121, 135, 189, 38, 173, 129, 190, 11, 153, 237, 190, 124, 184, 24, 62, 185, 59, 42, 190, 46, 254, 141, 189, 113, 226, 79, 61, 44, 5, 0, 62, 204, 130, 150, 190, 227, 114, 200, 190, 133, 226, 93, 190, 75, 129, 162, 61, 141, 222, 174, 61, 172, 152, 113, 62, 114, 92, 211, 62, 227, 10, 91, 190, 23, 229, 83, 62, 239, 202, 12, 191, 186, 14, 223, 190, 177, 79, 11, 190, 189, 17, 38, 191, 250, 1, 50, 61, 109, 220, 30, 62, 149, 68, 29, 62, 223, 236, 118, 62, 203, 47, 175, 189, 22, 91, 167, 60, 192, 211, 81, 62, 213, 119, 25, 190, 132, 189, 130, 190, 38, 4, 231, 61, 58, 8, 254, 61, 209, 225, 24, 190, 232, 88, 152, 61, 111, 161, 194, 189, 180, 154, 143, 61, 81, 11, 243, 60, 189, 225, 129, 61, 90, 77, 174, 60, 196, 143, 28, 62, 70, 116, 5, 190, 24, 178, 7, 62, 194, 104, 192, 61, 137, 171, 66, 189, 103, 169, 28, 62, 32, 72, 205, 61, 202, 114, 187, 60, 255, 72, 64, 190, 138, 169, 158, 61, 84, 104, 40, 62, 110, 176, 75, 62, 205, 118, 82, 62, 96, 96, 17, 62, 123, 200, 139, 188, 32, 171, 74, 62, 210, 123, 187, 61, 130, 233, 252, 61, 201, 133, 181, 61, 149, 253, 53, 190, 190, 106, 4, 190, 147, 243, 198, 188, 173, 141, 195, 189, 65, 85, 40, 190, 163, 136, 87, 62, 153, 147, 66, 190, 106, 80, 17, 62, 44, 76, 48, 62, 205, 190, 30, 62, 11, 98, 36, 190, 31, 89, 25, 190, 115, 231, 85, 60, 218, 220, 40, 61, 182, 130, 215, 61, 90, 18, 21, 62, 27, 59, 114, 188, 109, 162, 101, 62, 98, 255, 85, 189, 35, 77, 130, 61, 240, 226, 222, 61, 208, 235, 62, 189, 172, 42, 157, 61, 16, 66, 254, 190, 240, 27, 78, 190, 53, 43, 38, 190, 232, 38, 119, 188, 63, 68, 4, 62, 182, 32, 219, 61, 156, 88, 210, 189, 231, 39, 2, 189, 226, 35, 21, 190, 158, 22, 169, 60, 23, 177, 41, 190, 99, 179, 19, 190, 237, 199, 185, 61, 163, 25, 199, 61, 214, 127, 29, 62, 148, 228, 6, 190, 42, 51, 106, 189, 72, 74, 225, 188, 125, 177, 243, 189, 63, 247, 47, 62, 38, 122, 18, 189, 249, 218, 170, 59, 232, 202, 68, 189, 65, 125, 184, 60, 148, 155, 26, 190, 53, 149, 12, 190, 69, 202, 222, 189, 249, 154, 229, 189, 103, 109, 49, 62, 40, 195, 181, 189, 111, 108, 172, 58, 102, 137, 40, 190, 174, 111, 189, 187, 29, 114, 130, 61, 89, 20, 81, 189, 93, 18, 40, 62, 236, 3, 28, 62, 16, 38, 193, 189, 114, 42, 211, 189, 66, 88, 52, 190, 153, 78, 133, 189, 63, 245, 195, 189, 69, 211, 52, 62, 170, 68, 30, 190, 196, 3, 210, 189, 21, 1, 183, 189, 27, 82, 252, 60, 117, 8, 66, 190, 169, 191, 220, 60, 223, 162, 13, 61, 249, 112, 0, 62, 33, 147, 90, 190, 224, 234, 188, 189, 28, 221, 250, 61, 94, 72, 96, 62, 200, 200, 113, 61, 113, 32, 54, 61, 141, 56, 203, 189, 203, 42, 84, 62, 88, 28, 190, 61, 63, 169, 173, 62, 35, 104, 225, 61, 122, 78, 30, 190, 109, 247, 53, 62, 155, 153, 206, 190, 82, 241, 45, 60, 49, 50, 72, 190, 83, 250, 70, 190, 118, 240, 0, 62, 210, 241, 114, 62, 149, 154, 144, 189, 140, 62, 65, 189, 163, 241, 252, 189, 50, 247, 104, 190, 148, 191, 144, 188, 87, 194, 163, 61, 200, 125, 35, 61, 227, 111, 34, 62, 139, 16, 115, 189, 200, 28, 19, 62, 215, 250, 79, 188, 198, 97, 33, 190, 17, 183, 135, 188, 146, 120, 189, 189, 235, 136, 226, 60, 94, 248, 37, 190, 61, 227, 216, 61, 154, 73, 194, 187, 170, 78, 167, 189, 124, 51, 6, 62, 55, 3, 229, 189, 72, 251, 178, 189, 141, 53, 17, 190, 200, 45, 235, 188, 193, 162, 21, 190, 28, 234, 24, 62, 221, 100, 14, 60, 226, 14, 7, 62, 232, 148, 88, 188, 217, 72, 32, 190, 58, 214, 38, 190, 96, 216, 71, 189, 151, 178, 44, 61, 56, 215, 204, 189, 214, 96, 196, 189, 26, 169, 113, 189, 151, 32, 146, 188, 41, 237, 231, 61, 52, 254, 166, 62, 151, 77, 97, 189, 175, 217, 7, 190, 168, 95, 237, 61, 93, 127, 253, 189, 154, 54, 185, 60, 181, 84, 196, 60, 75, 222, 14, 190, 148, 205, 38, 190, 255, 59, 253, 189, 4, 61, 75, 59, 173, 213, 110, 62, 154, 51, 183, 61, 138, 189, 43, 190, 170, 115, 51, 62, 92, 26, 107, 62, 93, 52, 85, 189, 166, 157, 182, 62, 196, 92, 100, 189, 37, 93, 21, 62, 181, 203, 215, 190, 253, 141, 45, 190, 11, 187, 48, 188, 245, 76, 155, 188, 138, 169, 167, 61, 131, 149, 13, 59, 95, 49, 90, 189, 55, 141, 221, 61, 41, 189, 64, 188, 103, 95, 87, 190, 139, 92, 6, 190, 150, 4, 239, 189, 24, 42, 49, 62, 21, 51, 135, 191, 128, 7, 38, 62, 227, 151, 27, 191, 150, 24, 78, 190, 253, 77, 161, 62, 254, 251, 132, 188, 240, 21, 169, 190, 123, 46, 12, 62, 215, 255, 208, 188, 183, 200, 167, 62, 114, 138, 142, 61, 143, 106, 36, 62, 204, 227, 6, 191, 163, 247, 83, 61, 112, 247, 102, 62, 130, 40, 146, 61, 91, 132, 99, 62, 44, 247, 187, 62, 210, 62, 85, 60, 113, 207, 24, 191, 134, 214, 32, 190, 68, 88, 149, 191, 48, 177, 27, 62, 49, 90, 205, 56, 99, 89, 79, 62, 126, 225, 193, 190, 151, 251, 4, 62, 135, 154, 205, 188, 23, 8, 141, 189, 251, 249, 90, 190, 220, 124, 155, 189, 125, 98, 83, 189, 190, 201, 35, 190, 36, 16, 100, 190, 30, 240, 11, 62, 117, 221, 28, 62, 102, 104, 168, 61, 95, 243, 173, 189, 191, 79, 172, 189, 110, 50, 129, 61, 244, 78, 153, 61, 153, 231, 216, 188, 67, 122, 33, 190, 43, 29, 193, 189, 248, 27, 38, 61, 177, 88, 44, 187, 164, 137, 227, 61, 70, 162, 121, 188, 33, 58, 189, 189, 39, 131, 234, 189, 249, 241, 13, 190, 58, 69, 252, 61, 111, 48, 171, 189, 80, 48, 202, 61, 192, 211, 145, 61, 89, 58, 152, 189, 1, 14, 145, 60, 223, 86, 22, 62, 216, 12, 17, 189, 1, 211, 117, 190, 228, 70, 102, 189, 145, 123, 6, 190, 231, 92, 167, 189, 96, 48, 172, 61, 36, 122, 157, 189, 23, 32, 215, 189, 88, 225, 18, 190, 44, 154, 250, 61, 83, 146, 43, 189, 95, 239, 163, 189, 111, 15, 142, 189, 126, 59, 34, 190, 231, 23, 253, 189, 234, 243, 213, 61, 219, 129, 136, 61, 210, 174, 33, 190, 4, 135, 103, 61, 235, 194, 177, 60, 146, 93, 41, 190, 83, 54, 50, 190, 206, 44, 133, 189, 99, 130, 149, 189, 149, 200, 254, 189, 25, 92, 186, 60, 211, 233, 26, 62, 115, 226, 24, 190, 72, 161, 14, 190, 245, 207, 248, 189, 158, 79, 242, 189, 166, 21, 27, 190, 141, 254, 43, 62, 60, 219, 41, 190, 109, 254, 202, 189, 157, 180, 134, 61, 200, 31, 13, 62, 215, 103, 143, 189, 123, 186, 158, 191, 6, 182, 78, 62, 232, 63, 1, 190, 42, 4, 186, 189, 254, 204, 255, 61, 171, 163, 3, 191, 118, 38, 3, 191, 170, 117, 151, 62, 145, 60, 195, 190, 220, 235, 95, 189, 187, 55, 158, 62, 245, 220, 71, 62, 33, 216, 56, 190, 234, 66, 13, 188, 54, 87, 204, 62, 154, 4, 128, 190, 167, 219, 142, 62, 97, 211, 226, 62, 117, 138, 123, 62, 78, 32, 17, 191, 33, 33, 115, 62, 165, 29, 189, 191, 161, 193, 138, 62, 217, 203, 0, 191, 146, 59, 46, 62, 211, 251, 16, 190, 86, 223, 168, 61, 34, 44, 143, 61, 17, 113, 22, 190, 119, 243, 9, 190, 234, 79, 246, 61, 173, 22, 5, 62, 110, 52, 92, 189, 204, 17, 133, 62, 212, 202, 77, 188, 110, 104, 141, 60, 94, 222, 11, 61, 92, 239, 18, 60, 171, 127, 79, 190, 66, 199, 92, 189, 15, 34, 117, 61, 255, 80, 64, 62, 95, 167, 62, 188, 5, 89, 85, 189, 226, 9, 20, 62, 99, 64, 130, 62, 175, 82, 54, 189, 251, 191, 242, 61, 154, 215, 15, 59, 19, 53, 150, 190, 34, 31, 36, 62, 164, 170, 98, 190, 239, 150, 26, 62, 94, 83, 115, 189, 65, 3, 33, 62, 38, 71, 123, 189, 159, 187, 145, 62, 141, 136, 66, 190, 139, 150, 81, 189, 42, 10, 128, 61, 251, 210, 49, 190, 213, 88, 191, 189, 234, 99, 23, 190, 250, 146, 206, 61, 253, 180, 105, 191, 194, 152, 17, 59, 117, 196, 121, 190, 187, 179, 183, 190, 109, 22, 250, 188, 7, 187, 161, 190, 154, 232, 224, 190, 156, 183, 156, 187, 104, 189, 134, 189, 113, 93, 170, 188, 32, 58, 206, 189, 160, 204, 72, 62, 208, 182, 44, 61, 241, 208, 37, 62, 67, 34, 161, 62, 130, 240, 164, 61, 175, 95, 75, 62, 214, 32, 205, 62, 227, 68, 142, 188, 145, 25, 207, 190, 33, 63, 201, 61, 32, 117, 185, 191, 26, 179, 117, 62, 155, 231, 219, 61, 11, 244, 23, 62, 26, 169, 215, 188, 27, 155, 249, 61, 67, 253, 45, 62, 206, 13, 66, 189, 18, 92, 53, 190, 205, 120, 228, 61, 204, 126, 138, 190, 164, 198, 36, 63, 176, 229, 141, 62, 36, 86, 133, 191, 161, 43, 39, 191, 45, 254, 31, 191, 138, 202, 237, 61, 32, 194, 26, 62, 221, 208, 116, 62, 228, 19, 130, 61, 236, 220, 25, 189, 137, 37, 93, 191, 213, 177, 20, 191, 4, 213, 5, 190, 227, 44, 73, 62, 105, 176, 189, 190, 208, 210, 24, 190, 2, 54, 150, 62, 161, 207, 97, 191, 46, 219, 143, 60, 50, 203, 125, 62, 13, 146, 134, 62, 10, 78, 64, 62, 245, 85, 210, 190, 182, 106, 4, 191, 142, 206, 234, 61, 28, 6, 167, 62, 76, 223, 3, 188, 231, 203, 188, 61, 53, 106, 33, 62, 70, 33, 55, 191, 228, 185, 135, 189, 32, 1, 141, 61, 145, 171, 21, 189, 218, 141, 86, 190, 31, 99, 183, 190, 77, 44, 114, 190, 247, 60, 66, 62, 41, 223, 2, 61, 102, 175, 179, 190, 170, 232, 94, 190, 75, 30, 92, 61, 42, 245, 162, 62, 199, 18, 234, 61, 50, 12, 217, 61, 56, 44, 138, 190, 232, 42, 65, 62, 190, 4, 167, 61, 36, 129, 138, 61, 34, 173, 95, 62, 35, 176, 30, 62, 41, 88, 158, 61, 82, 255, 179, 190, 86, 221, 52, 190, 210, 42, 97, 188, 206, 96, 152, 61, 20, 174, 161, 62, 235, 0, 28, 61, 181, 160, 145, 190, 248, 231, 95, 62, 84, 28, 182, 189, 131, 180, 32, 190, 3, 209, 153, 61, 171, 88, 10, 62, 187, 115, 83, 62, 84, 248, 191, 189, 141, 92, 150, 190, 190, 125, 38, 62, 85, 132, 56, 62, 205, 188, 43, 190, 13, 185, 141, 190, 31, 55, 211, 62, 227, 218, 13, 191, 9, 202, 170, 189, 89, 146, 148, 62, 14, 100, 155, 61, 97, 7, 206, 61, 7, 215, 1, 190, 124, 2, 114, 190, 46, 224, 168, 61, 253, 205, 171, 62, 118, 171, 71, 62, 104, 237, 39, 62, 3, 133, 112, 62, 191, 134, 24, 62, 213, 139, 179, 190, 61, 6, 240, 189, 101, 248, 228, 189, 62, 81, 224, 188, 161, 88, 213, 189, 89, 237, 210, 60, 77, 31, 7, 187, 177, 89, 157, 190, 218, 240, 68, 62, 195, 222, 174, 61, 148, 126, 223, 189, 126, 178, 139, 62, 122, 209, 136, 190, 120, 3, 235, 188, 153, 242, 248, 190, 238, 204, 72, 60, 102, 178, 223, 61, 187, 132, 182, 188, 193, 40, 20, 191, 152, 93, 34, 190, 41, 67, 204, 188, 69, 115, 170, 62, 11, 5, 249, 61, 11, 177, 35, 190, 57, 249, 217, 190, 35, 174, 194, 62, 224, 176, 67, 62, 208, 218, 213, 61, 14, 62, 191, 62, 108, 173, 167, 62, 56, 108, 104, 62, 40, 81, 36, 191, 56, 57, 145, 190, 250, 21, 131, 190, 245, 197, 153, 61, 100, 104, 206, 61, 245, 175, 105, 187, 178, 215, 204, 190, 218, 71, 183, 61, 105, 38, 29, 190, 130, 110, 138, 190, 87, 221, 229, 61, 40, 220, 159, 186, 191, 240, 6, 190, 64, 241, 148, 190, 217, 10, 200, 61, 216, 53, 12, 191, 238, 181, 186, 62, 255, 107, 167, 189, 111, 85, 228, 188, 198, 20, 122, 60, 166, 242, 11, 63, 185, 253, 202, 59, 106, 23, 102, 190, 242, 144, 3, 190, 151, 243, 53, 189, 55, 154, 223, 62, 53, 220, 112, 190, 181, 123, 186, 190, 9, 244, 93, 191, 24, 15, 58, 191, 6, 178, 58, 189, 26, 48, 139, 191, 224, 161, 204, 62, 67, 248, 92, 62, 44, 207, 201, 191, 243, 207, 178, 61, 128, 227, 37, 190, 5, 98, 20, 62, 248, 199, 86, 190, 119, 183, 9, 191, 52, 125, 142, 62, 98, 109, 24, 191, 46, 163, 255, 61, 0, 192, 5, 62, 245, 228, 158, 62, 160, 114, 126, 190, 208, 239, 10, 190, 183, 232, 166, 62, 137, 155, 2, 188, 230, 222, 209, 61, 121, 238, 117, 189, 65, 69, 44, 62, 244, 178, 37, 190, 249, 217, 88, 62, 202, 169, 190, 61, 242, 28, 48, 62, 241, 148, 77, 61, 207, 79, 64, 190, 86, 123, 39, 61, 87, 18, 148, 62, 11, 144, 231, 190, 183, 34, 165, 62, 28, 51, 195, 62, 176, 219, 82, 190, 26, 73, 17, 190, 59, 96, 106, 190, 43, 185, 165, 188, 125, 155, 137, 62, 169, 169, 0, 63, 21, 202, 253, 189, 9, 62, 36, 190, 31, 66, 181, 62, 122, 50, 106, 61, 149, 11, 191, 189, 188, 204, 169, 190, 124, 83, 130, 189, 219, 177, 228, 188, 219, 227, 6, 189, 185, 39, 50, 62, 137, 205, 39, 190, 246, 11, 146, 60, 127, 66, 51, 62, 54, 140, 134, 189, 122, 119, 198, 188, 180, 189, 229, 61, 39, 36, 247, 189, 250, 159, 36, 62, 206, 153, 23, 62, 123, 225, 146, 189, 11, 178, 245, 189, 43, 178, 143, 59, 34, 223, 39, 62, 198, 195, 75, 61, 253, 59, 83, 189, 74, 232, 36, 62, 105, 114, 41, 190, 57, 83, 196, 189, 2, 81, 244, 187, 2, 204, 29, 190, 143, 96, 31, 190, 55, 217, 143, 61, 120, 40, 129, 188, 84, 15, 50, 190, 186, 60, 35, 189, 54, 216, 52, 190, 0, 48, 12, 190, 177, 113, 130, 60, 84, 249, 13, 62, 61, 89, 170, 190, 154, 153, 229, 62, 36, 238, 126, 61, 173, 25, 62, 190, 225, 30, 118, 60, 73, 213, 138, 190, 193, 144, 79, 62, 37, 14, 145, 62, 139, 62, 131, 61, 34, 219, 165, 60, 92, 18, 132, 190, 108, 0, 12, 191, 102, 1, 134, 188, 43, 76, 157, 62, 213, 179, 166, 190, 21, 32, 56, 190, 96, 87, 96, 190, 123, 245, 22, 62, 22, 36, 200, 190, 72, 24, 237, 61, 198, 33, 133, 62, 16, 102, 166, 61, 13, 239, 97, 62, 254, 194, 58, 189, 181, 0, 248, 190, 4, 68, 171, 61, 218, 98, 106, 61, 51, 143, 54, 189, 139, 187, 29, 62, 77, 166, 30, 61, 95, 149, 19, 191, 228, 186, 29, 61, 192, 177, 232, 190, 188, 255, 93, 191, 96, 250, 211, 61, 193, 65, 215, 184, 25, 147, 205, 189, 159, 106, 74, 62, 30, 192, 155, 190, 151, 157, 12, 190, 4, 108, 212, 62, 130, 215, 239, 190, 74, 58, 201, 60, 194, 111, 162, 189, 168, 236, 184, 61, 21, 227, 193, 62, 165, 130, 70, 61, 116, 194, 56, 191, 32, 161, 181, 190, 50, 54, 106, 190, 73, 112, 131, 189, 136, 106, 5, 191, 18, 252, 144, 62, 38, 170, 163, 62, 229, 219, 180, 191, 17, 42, 119, 62, 153, 127, 139, 189, 198, 80, 87, 60, 77, 21, 80, 190, 83, 120, 53, 191, 254, 215, 16, 62, 129, 182, 243, 189, 149, 161, 48, 190, 105, 180, 51, 62, 199, 173, 2, 62, 217, 22, 109, 188, 73, 60, 120, 62, 200, 81, 207, 188, 23, 221, 83, 191, 18, 169, 37, 189, 76, 50, 145, 188, 194, 46, 172, 62, 214, 104, 12, 62, 66, 99, 131, 62, 17, 111, 73, 61, 78, 57, 16, 190, 153, 136, 7, 61, 48, 204, 163, 61, 88, 43, 250, 61, 167, 247, 139, 190, 211, 216, 156, 61, 106, 16, 205, 188, 57, 217, 129, 191, 14, 206, 216, 189, 183, 149, 255, 62, 129, 171, 205, 62, 41, 132, 185, 190, 3, 251, 167, 60, 132, 222, 220, 61, 152, 104, 67, 60, 92, 174, 227, 61, 161, 14, 101, 61, 243, 72, 144, 61, 13, 227, 139, 188, 37, 79, 215, 189, 33, 134, 220, 189, 89, 221, 158, 62, 52, 126, 128, 191, 107, 33, 197, 188, 112, 178, 115, 188, 97, 70, 120, 190, 133, 64, 31, 190, 17, 210, 202, 61, 87, 54, 98, 190, 86, 190, 31, 190, 205, 12, 187, 60, 13, 102, 64, 60, 92, 185, 127, 190, 32, 18, 160, 60, 117, 199, 137, 62, 160, 100, 218, 190, 111, 44, 161, 189, 85, 23, 197, 189, 250, 79, 93, 189, 227, 62, 171, 190, 195, 54, 104, 190, 220, 253, 37, 62, 52, 152, 149, 62, 106, 175, 60, 191, 51, 132, 231, 189, 242, 58, 253, 189, 187, 220, 245, 61, 112, 124, 184, 190, 2, 37, 184, 62, 145, 101, 133, 61, 127, 90, 104, 61, 108, 41, 137, 190, 151, 103, 66, 60, 238, 25, 177, 189, 115, 185, 194, 61, 195, 228, 210, 189, 8, 177, 153, 190, 154, 2, 131, 189, 69, 122, 83, 61, 197, 207, 255, 61, 80, 91, 111, 62, 58, 115, 128, 190, 134, 44, 2, 62, 90, 221, 115, 62, 217, 202, 6, 189, 222, 178, 167, 189, 152, 145, 166, 57, 224, 223, 6, 190, 97, 81, 135, 60, 75, 204, 199, 61, 139, 77, 175, 61, 237, 103, 13, 62, 229, 102, 133, 62, 121, 201, 148, 62, 140, 136, 146, 189, 152, 143, 180, 61, 89, 125, 26, 190, 16, 4, 94, 189, 185, 207, 133, 61, 188, 128, 151, 62, 150, 151, 207, 60, 170, 94, 73, 61, 168, 247, 233, 189, 203, 16, 202, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 32, 68, 189, 139, 66, 25, 62, 100, 78, 134, 189, 176, 163, 29, 189, 113, 8, 53, 62, 57, 10, 16, 60, 194, 9, 58, 61, 211, 52, 4, 190, 14, 90, 85, 61, 52, 84, 40, 62, 251, 97, 46, 190, 164, 233, 142, 62, 95, 224, 166, 189, 141, 188, 160, 60, 181, 5, 34, 62, 78, 30, 53, 190, 70, 235, 198, 189, 115, 235, 84, 61, 48, 218, 119, 61, 71, 204, 236, 61, 33, 154, 162, 62, 169, 238, 3, 61, 42, 232, 162, 190, 247, 9, 75, 62, 52, 104, 111, 62, 62, 73, 64, 190, 100, 94, 47, 190, 107, 143, 212, 61, 226, 170, 20, 188, 135, 97, 85, 62, 104, 252, 119, 189, 236, 51, 110, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 154, 63, 190, 239, 18, 63, 62, 129, 143, 150, 62, 32, 255, 198, 62, 201, 29, 45, 189, 229, 246, 70, 189, 221, 21, 170, 189, 206, 114, 146, 62, 199, 12, 152, 189, 93, 73, 45, 60, 123, 163, 167, 188, 205, 92, 164, 188, 197, 72, 1, 189, 130, 84, 169, 60, 236, 60, 52, 63, 15, 21, 236, 61, 195, 148, 140, 61, 249, 76, 89, 63, 161, 82, 23, 60, 58, 83, 6, 63, 8, 58, 134, 191, 0, 195, 55, 62, 233, 75, 181, 190, 78, 240, 220, 62, 99, 62, 160, 63, 250, 162, 15, 63, 76, 203, 42, 189, 7, 70, 0, 191, 148, 192, 28, 63, 29, 48, 177, 190, 70, 20, 12, 191, 76, 205, 57, 190, 247, 219, 193, 189, 157, 224, 185, 190, 19, 129, 153, 62, 208, 10, 48, 62, 151, 85, 185, 190, 173, 183, 33, 190, 7, 117, 13, 62, 233, 174, 199, 190, 100, 112, 43, 190, 232, 99, 88, 190, 135, 187, 208, 59, 247, 184, 115, 190, 124, 218, 222, 187, 119, 229, 187, 188, 145, 99, 132, 62, 243, 115, 107, 61, 57, 224, 250, 61, 112, 179, 176, 62, 104, 154, 117, 190, 159, 231, 230, 60, 67, 127, 146, 62, 188, 35, 86, 61, 32, 176, 152, 62, 16, 3, 2, 63, 59, 39, 172, 189, 182, 168, 64, 60, 113, 86, 32, 189, 63, 153, 61, 62, 101, 107, 139, 189, 140, 51, 207, 189, 64, 101, 57, 62, 37, 78, 4, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 55, 224, 189, 79, 36, 38, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {176, 171, 23, 63, 155, 255, 54, 191, 211, 30, 7, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {201, 230, 190, 63, 155, 37, 106, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0011/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}