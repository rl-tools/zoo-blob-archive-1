// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 135, 185, 61, 36, 214, 255, 190, 102, 215, 143, 59, 170, 39, 135, 62, 95, 230, 151, 188, 42, 157, 198, 190, 9, 251, 55, 191, 215, 173, 137, 191, 20, 237, 188, 190, 128, 47, 5, 190, 252, 7, 160, 61, 88, 232, 69, 190, 245, 86, 104, 190, 237, 198, 47, 63, 152, 85, 6, 63, 128, 203, 102, 190, 159, 216, 159, 191, 211, 226, 208, 190, 108, 159, 145, 190, 75, 48, 232, 190, 86, 181, 0, 63, 232, 95, 80, 189, 93, 91, 100, 190, 179, 208, 47, 191, 176, 203, 83, 63, 224, 88, 59, 63, 87, 21, 244, 62, 192, 110, 253, 190, 56, 204, 216, 62, 39, 166, 179, 190, 75, 137, 228, 61, 190, 147, 109, 190, 63, 74, 17, 191, 76, 194, 13, 63, 10, 195, 155, 190, 218, 121, 7, 62, 196, 212, 85, 190, 161, 126, 217, 190, 239, 124, 252, 62, 213, 250, 172, 189, 58, 20, 18, 63, 102, 52, 36, 63, 87, 143, 189, 62, 195, 122, 128, 63, 61, 225, 63, 62, 4, 169, 189, 190, 159, 164, 56, 191, 241, 242, 173, 62, 162, 146, 65, 63, 12, 70, 65, 191, 184, 134, 210, 190, 126, 255, 92, 63, 250, 187, 32, 191, 135, 71, 184, 61, 56, 221, 113, 63, 228, 64, 38, 190, 229, 16, 25, 60, 169, 253, 12, 63, 215, 128, 109, 191, 110, 203, 175, 190, 161, 160, 174, 62, 146, 150, 45, 191, 37, 13, 112, 190, 146, 88, 46, 63, 100, 86, 54, 63, 184, 5, 101, 62, 237, 71, 190, 61, 213, 185, 25, 63, 6, 75, 12, 62, 46, 249, 18, 191, 54, 40, 181, 191, 205, 46, 178, 190, 120, 236, 27, 191, 238, 14, 255, 62, 213, 92, 25, 63, 4, 35, 4, 62, 61, 189, 135, 190, 200, 28, 157, 190, 191, 14, 176, 62, 19, 244, 51, 189, 114, 220, 250, 189, 40, 149, 86, 63, 213, 38, 137, 62, 172, 245, 28, 63, 103, 17, 228, 62, 46, 192, 8, 190, 224, 227, 219, 190, 104, 216, 155, 60, 167, 72, 97, 62, 152, 217, 63, 61, 131, 156, 123, 60, 67, 20, 194, 189, 104, 231, 243, 62, 149, 61, 113, 62, 205, 106, 93, 191, 212, 65, 188, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 198, 19, 191, 208, 217, 213, 190, 249, 30, 186, 188, 215, 172, 53, 63, 17, 87, 20, 191, 113, 247, 178, 190, 164, 114, 226, 190, 52, 191, 165, 62, 134, 103, 61, 191, 103, 252, 203, 61, 27, 189, 211, 62, 58, 26, 205, 62, 128, 254, 179, 190, 235, 114, 14, 63, 254, 173, 176, 62, 61, 244, 255, 62, 146, 165, 200, 61, 165, 69, 173, 61, 143, 1, 243, 189, 121, 50, 145, 190, 88, 79, 4, 63, 16, 116, 142, 190, 15, 109, 50, 63, 99, 60, 55, 190, 24, 148, 32, 63, 161, 141, 210, 190, 221, 29, 20, 63, 143, 255, 130, 190, 17, 228, 134, 61, 151, 41, 11, 63, 106, 107, 63, 191, 195, 212, 243, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 206, 224, 61, 113, 52, 33, 189, 145, 140, 169, 62, 32, 85, 198, 61, 211, 187, 233, 189, 57, 9, 165, 61, 25, 243, 146, 189, 30, 182, 39, 62, 227, 218, 96, 62, 218, 231, 145, 190, 148, 241, 37, 190, 198, 216, 196, 189, 145, 31, 194, 189, 100, 20, 142, 61, 213, 202, 46, 62, 222, 205, 46, 62, 233, 188, 240, 61, 181, 10, 59, 62, 173, 166, 180, 61, 42, 194, 102, 190, 54, 108, 119, 62, 21, 248, 145, 62, 196, 31, 201, 61, 201, 77, 41, 62, 223, 21, 202, 188, 208, 199, 162, 61, 192, 103, 209, 61, 80, 148, 226, 61, 91, 55, 140, 61, 16, 104, 86, 61, 131, 179, 56, 60, 92, 232, 16, 62, 228, 191, 120, 61, 148, 209, 138, 60, 165, 148, 18, 190, 207, 254, 189, 61, 180, 29, 217, 190, 178, 85, 113, 188, 112, 239, 88, 61, 21, 133, 45, 62, 220, 180, 146, 190, 65, 52, 34, 61, 36, 204, 141, 189, 151, 175, 230, 62, 248, 93, 81, 62, 110, 64, 108, 188, 203, 213, 133, 190, 218, 94, 64, 61, 81, 130, 41, 61, 160, 206, 167, 62, 176, 36, 162, 62, 250, 76, 196, 189, 195, 97, 189, 61, 8, 235, 249, 190, 204, 164, 160, 58, 9, 21, 172, 189, 89, 145, 27, 190, 46, 119, 66, 62, 252, 193, 177, 189, 97, 84, 108, 60, 232, 17, 245, 61, 137, 134, 60, 190, 52, 152, 255, 189, 155, 16, 33, 62, 181, 243, 135, 60, 131, 73, 107, 189, 9, 133, 157, 61, 85, 240, 165, 188, 160, 66, 211, 61, 149, 14, 155, 189, 24, 70, 135, 189, 196, 138, 32, 62, 137, 82, 189, 190, 124, 15, 228, 189, 217, 196, 49, 61, 145, 39, 158, 62, 77, 124, 222, 189, 244, 201, 194, 190, 184, 6, 13, 191, 163, 116, 12, 63, 119, 173, 120, 61, 233, 184, 166, 62, 98, 36, 118, 62, 120, 71, 235, 61, 128, 36, 33, 62, 182, 20, 95, 191, 36, 41, 150, 190, 25, 171, 85, 62, 184, 174, 64, 190, 189, 149, 32, 187, 92, 174, 193, 186, 58, 212, 176, 190, 12, 87, 215, 61, 243, 202, 136, 188, 88, 184, 144, 61, 252, 1, 178, 62, 147, 141, 24, 189, 249, 235, 69, 62, 50, 66, 234, 61, 2, 143, 35, 62, 161, 153, 30, 60, 77, 118, 136, 61, 247, 76, 195, 190, 152, 47, 96, 62, 83, 75, 183, 189, 226, 186, 66, 61, 69, 37, 75, 62, 159, 249, 249, 61, 252, 67, 140, 190, 84, 237, 223, 190, 251, 19, 9, 191, 163, 18, 27, 63, 223, 33, 221, 188, 252, 164, 200, 62, 40, 200, 177, 62, 154, 2, 37, 62, 9, 183, 109, 61, 201, 147, 35, 191, 32, 115, 250, 190, 27, 65, 165, 189, 181, 207, 45, 190, 25, 120, 130, 61, 145, 114, 2, 62, 157, 115, 248, 190, 208, 161, 191, 189, 179, 124, 99, 190, 9, 223, 17, 189, 200, 212, 178, 62, 174, 236, 32, 62, 143, 39, 39, 190, 1, 24, 165, 62, 164, 203, 118, 189, 104, 251, 115, 190, 197, 130, 203, 188, 204, 65, 83, 61, 62, 191, 39, 62, 250, 173, 41, 190, 225, 13, 237, 189, 143, 232, 128, 58, 24, 193, 152, 62, 235, 114, 146, 189, 56, 224, 208, 189, 167, 16, 52, 190, 187, 176, 93, 188, 42, 51, 78, 61, 173, 215, 83, 62, 68, 167, 209, 62, 106, 137, 83, 190, 207, 109, 204, 57, 66, 95, 68, 190, 182, 127, 124, 61, 56, 15, 11, 62, 86, 46, 193, 61, 115, 138, 165, 61, 240, 68, 136, 62, 248, 147, 22, 189, 247, 193, 165, 189, 184, 59, 56, 62, 171, 169, 244, 61, 202, 177, 212, 61, 129, 136, 219, 61, 150, 162, 24, 190, 131, 231, 162, 62, 253, 192, 187, 61, 49, 117, 245, 189, 93, 115, 170, 187, 212, 144, 17, 190, 90, 55, 12, 190, 199, 159, 118, 190, 78, 48, 106, 187, 94, 134, 193, 61, 145, 202, 65, 61, 239, 59, 226, 60, 68, 21, 27, 62, 198, 59, 40, 61, 82, 8, 244, 60, 241, 224, 181, 189, 237, 185, 244, 61, 69, 199, 102, 62, 108, 147, 149, 190, 37, 97, 143, 62, 140, 132, 74, 61, 217, 134, 87, 62, 8, 119, 87, 62, 187, 250, 37, 62, 88, 43, 54, 189, 246, 67, 122, 62, 116, 134, 243, 61, 114, 84, 23, 62, 2, 9, 99, 62, 90, 84, 124, 188, 226, 205, 22, 190, 71, 58, 32, 190, 73, 225, 27, 190, 107, 248, 20, 190, 124, 4, 54, 190, 6, 234, 165, 188, 37, 27, 31, 61, 85, 71, 71, 189, 87, 153, 9, 61, 167, 250, 94, 61, 102, 147, 163, 189, 110, 8, 227, 61, 212, 139, 66, 189, 168, 250, 35, 190, 21, 46, 33, 190, 145, 141, 26, 190, 74, 116, 2, 190, 193, 251, 16, 61, 147, 126, 83, 61, 148, 217, 139, 189, 218, 165, 18, 189, 187, 130, 253, 189, 243, 222, 1, 62, 196, 60, 207, 188, 135, 81, 15, 190, 254, 3, 26, 62, 29, 7, 138, 61, 136, 88, 11, 190, 232, 194, 244, 61, 226, 41, 110, 61, 32, 53, 67, 190, 147, 120, 7, 190, 187, 134, 65, 57, 250, 58, 35, 62, 116, 29, 111, 189, 49, 207, 172, 58, 30, 214, 14, 62, 78, 93, 134, 189, 250, 110, 108, 190, 40, 119, 92, 190, 4, 177, 40, 62, 150, 223, 153, 189, 8, 187, 7, 59, 253, 173, 100, 61, 74, 109, 13, 62, 125, 198, 52, 189, 227, 203, 158, 190, 46, 55, 31, 190, 153, 162, 18, 187, 90, 221, 186, 61, 203, 1, 115, 62, 207, 249, 238, 62, 0, 39, 123, 190, 10, 228, 104, 62, 27, 84, 4, 191, 66, 97, 191, 190, 227, 163, 231, 189, 68, 239, 8, 191, 66, 196, 175, 189, 109, 70, 61, 62, 54, 196, 9, 62, 86, 51, 132, 62, 16, 216, 125, 189, 45, 236, 58, 189, 155, 238, 52, 62, 213, 119, 25, 190, 82, 57, 114, 190, 18, 225, 42, 62, 115, 115, 19, 62, 210, 138, 17, 189, 104, 105, 167, 61, 15, 0, 137, 189, 202, 104, 138, 61, 222, 30, 82, 59, 146, 240, 184, 61, 0, 56, 154, 60, 156, 12, 18, 62, 198, 101, 213, 189, 147, 124, 25, 62, 17, 43, 207, 61, 139, 168, 166, 188, 29, 248, 188, 61, 173, 33, 132, 61, 65, 95, 203, 60, 14, 84, 70, 190, 137, 57, 119, 61, 231, 31, 75, 62, 6, 26, 85, 62, 118, 48, 115, 62, 128, 248, 74, 62, 69, 170, 134, 61, 101, 243, 51, 62, 48, 159, 252, 61, 192, 52, 167, 61, 204, 207, 248, 61, 244, 18, 10, 190, 73, 54, 200, 189, 147, 243, 198, 188, 89, 41, 208, 189, 178, 224, 17, 190, 196, 164, 94, 62, 210, 210, 51, 190, 21, 183, 242, 61, 201, 90, 62, 62, 82, 123, 41, 62, 170, 88, 91, 190, 24, 148, 198, 189, 243, 186, 228, 60, 52, 170, 148, 61, 15, 203, 229, 61, 212, 80, 73, 62, 90, 96, 16, 62, 110, 115, 15, 62, 232, 144, 110, 188, 127, 4, 131, 61, 181, 211, 131, 62, 247, 140, 225, 188, 136, 247, 155, 61, 190, 122, 181, 190, 208, 223, 160, 189, 13, 15, 31, 190, 118, 166, 140, 188, 166, 205, 170, 61, 224, 254, 42, 62, 114, 249, 142, 189, 193, 128, 185, 60, 191, 206, 194, 189, 229, 147, 126, 61, 21, 137, 47, 190, 99, 179, 19, 190, 237, 199, 185, 61, 163, 25, 199, 61, 214, 127, 29, 62, 148, 228, 6, 190, 42, 51, 106, 189, 72, 74, 225, 188, 125, 177, 243, 189, 63, 247, 47, 62, 38, 122, 18, 189, 249, 218, 170, 59, 232, 202, 68, 189, 65, 125, 184, 60, 148, 155, 26, 190, 53, 149, 12, 190, 69, 202, 222, 189, 249, 154, 229, 189, 103, 109, 49, 62, 40, 195, 181, 189, 111, 108, 172, 58, 102, 137, 40, 190, 174, 111, 189, 187, 29, 114, 130, 61, 89, 20, 81, 189, 93, 18, 40, 62, 236, 3, 28, 62, 16, 38, 193, 189, 114, 42, 211, 189, 66, 88, 52, 190, 153, 78, 133, 189, 63, 245, 195, 189, 69, 211, 52, 62, 170, 68, 30, 190, 222, 169, 211, 189, 29, 194, 93, 189, 225, 183, 14, 61, 55, 54, 133, 189, 93, 91, 163, 59, 75, 58, 194, 61, 93, 84, 3, 62, 126, 143, 147, 190, 248, 38, 52, 189, 33, 58, 4, 62, 66, 18, 132, 62, 214, 187, 227, 61, 110, 152, 19, 62, 85, 222, 140, 61, 104, 228, 14, 62, 134, 36, 210, 61, 25, 142, 154, 62, 56, 253, 161, 62, 43, 41, 7, 190, 228, 20, 40, 62, 237, 77, 87, 190, 66, 130, 27, 62, 219, 19, 59, 190, 93, 56, 27, 190, 141, 107, 214, 61, 188, 59, 143, 62, 72, 123, 180, 60, 2, 160, 132, 188, 174, 150, 105, 189, 12, 206, 27, 190, 86, 212, 128, 188, 87, 194, 163, 61, 200, 125, 35, 61, 227, 111, 34, 62, 139, 16, 115, 189, 200, 28, 19, 62, 215, 250, 79, 188, 198, 97, 33, 190, 17, 183, 135, 188, 146, 120, 189, 189, 235, 136, 226, 60, 94, 248, 37, 190, 61, 227, 216, 61, 154, 73, 194, 187, 170, 78, 167, 189, 124, 51, 6, 62, 55, 3, 229, 189, 72, 251, 178, 189, 141, 53, 17, 190, 200, 45, 235, 188, 193, 162, 21, 190, 28, 234, 24, 62, 221, 100, 14, 60, 226, 14, 7, 62, 232, 148, 88, 188, 217, 72, 32, 190, 58, 214, 38, 190, 96, 216, 71, 189, 151, 178, 44, 61, 56, 215, 204, 189, 214, 96, 196, 189, 26, 169, 113, 189, 151, 32, 146, 188, 41, 237, 231, 61, 81, 166, 92, 62, 87, 252, 220, 188, 147, 200, 21, 190, 115, 15, 222, 61, 146, 193, 247, 189, 121, 82, 187, 61, 249, 78, 69, 61, 176, 183, 75, 189, 105, 232, 201, 189, 195, 239, 222, 189, 220, 42, 132, 61, 248, 122, 153, 62, 115, 92, 1, 62, 180, 77, 64, 190, 244, 173, 42, 62, 202, 178, 141, 62, 200, 107, 74, 59, 254, 57, 221, 62, 236, 92, 138, 188, 250, 178, 44, 62, 89, 211, 196, 190, 31, 143, 25, 190, 233, 195, 11, 60, 5, 159, 193, 188, 70, 164, 52, 189, 150, 23, 38, 61, 82, 226, 143, 60, 156, 249, 251, 61, 237, 46, 215, 188, 83, 13, 253, 189, 203, 40, 178, 189, 150, 4, 239, 189, 151, 85, 242, 61, 184, 251, 62, 191, 36, 0, 58, 62, 186, 50, 16, 191, 130, 111, 51, 190, 157, 210, 169, 62, 247, 22, 176, 188, 219, 126, 132, 190, 215, 83, 133, 61, 138, 0, 65, 189, 226, 1, 165, 62, 231, 147, 181, 61, 179, 129, 93, 62, 191, 164, 208, 190, 206, 126, 239, 61, 203, 80, 64, 62, 38, 193, 187, 60, 85, 176, 77, 62, 71, 154, 73, 62, 243, 128, 33, 60, 133, 7, 1, 191, 116, 99, 197, 189, 63, 216, 47, 191, 219, 6, 98, 62, 27, 153, 3, 190, 94, 139, 83, 62, 212, 200, 202, 190, 138, 53, 9, 62, 119, 21, 195, 60, 146, 92, 211, 189, 198, 238, 102, 190, 220, 124, 155, 189, 126, 46, 39, 189, 187, 191, 17, 190, 196, 113, 90, 190, 30, 240, 11, 62, 47, 4, 49, 62, 102, 104, 168, 61, 198, 31, 139, 189, 191, 79, 172, 189, 239, 180, 155, 61, 25, 225, 181, 61, 153, 231, 216, 188, 67, 122, 33, 190, 43, 29, 193, 189, 248, 27, 38, 61, 177, 88, 44, 187, 20, 90, 255, 61, 70, 162, 121, 188, 33, 58, 189, 189, 48, 61, 211, 189, 104, 178, 2, 190, 58, 69, 252, 61, 111, 48, 171, 189, 85, 90, 244, 61, 192, 211, 145, 61, 84, 247, 134, 189, 16, 119, 196, 60, 223, 86, 22, 62, 196, 4, 188, 188, 179, 175, 117, 190, 228, 70, 102, 189, 145, 123, 6, 190, 231, 92, 167, 189, 96, 48, 172, 61, 36, 122, 157, 189, 23, 32, 215, 189, 88, 225, 18, 190, 44, 154, 250, 61, 83, 146, 43, 189, 95, 239, 163, 189, 111, 15, 142, 189, 126, 59, 34, 190, 231, 23, 253, 189, 234, 243, 213, 61, 219, 129, 136, 61, 210, 174, 33, 190, 4, 135, 103, 61, 235, 194, 177, 60, 146, 93, 41, 190, 83, 54, 50, 190, 206, 44, 133, 189, 99, 130, 149, 189, 149, 200, 254, 189, 25, 92, 186, 60, 211, 233, 26, 62, 115, 226, 24, 190, 72, 161, 14, 190, 245, 207, 248, 189, 158, 79, 242, 189, 166, 21, 27, 190, 141, 254, 43, 62, 60, 219, 41, 190, 109, 254, 202, 189, 157, 180, 134, 61, 200, 31, 13, 62, 183, 226, 158, 61, 12, 148, 49, 191, 237, 140, 134, 62, 237, 23, 137, 190, 79, 227, 100, 60, 168, 48, 2, 62, 137, 173, 249, 190, 162, 131, 5, 191, 183, 104, 132, 62, 157, 207, 205, 190, 122, 166, 93, 189, 55, 142, 159, 62, 12, 174, 69, 62, 152, 93, 58, 190, 218, 189, 42, 61, 149, 147, 167, 62, 109, 208, 147, 190, 200, 162, 126, 62, 176, 1, 114, 62, 88, 8, 93, 62, 249, 130, 19, 191, 241, 44, 115, 62, 103, 164, 53, 191, 253, 24, 131, 62, 121, 16, 188, 190, 189, 122, 50, 62, 225, 116, 67, 190, 209, 193, 159, 61, 124, 214, 164, 61, 204, 140, 56, 190, 43, 197, 203, 189, 234, 79, 246, 61, 99, 252, 0, 62, 254, 169, 131, 188, 123, 221, 110, 62, 167, 191, 82, 61, 144, 77, 123, 59, 113, 20, 197, 61, 130, 6, 227, 60, 109, 69, 161, 190, 66, 201, 238, 59, 47, 149, 151, 61, 112, 88, 59, 62, 1, 250, 51, 61, 57, 255, 182, 188, 130, 30, 39, 62, 63, 2, 66, 62, 173, 47, 67, 188, 2, 228, 173, 61, 156, 174, 38, 62, 137, 169, 132, 190, 180, 188, 27, 62, 225, 124, 126, 190, 169, 254, 54, 62, 8, 248, 38, 189, 226, 114, 37, 62, 214, 3, 219, 189, 249, 178, 150, 62, 226, 72, 59, 190, 104, 64, 169, 185, 232, 59, 45, 61, 131, 242, 138, 189, 189, 9, 169, 189, 234, 99, 23, 190, 0, 128, 193, 61, 186, 35, 9, 191, 185, 83, 26, 61, 80, 198, 164, 190, 140, 16, 175, 190, 44, 251, 96, 188, 47, 121, 119, 190, 110, 54, 237, 190, 12, 109, 12, 189, 28, 95, 225, 188, 133, 137, 177, 188, 106, 66, 178, 189, 49, 106, 48, 62, 18, 245, 149, 61, 11, 223, 52, 62, 224, 215, 144, 62, 153, 6, 9, 61, 41, 73, 76, 62, 148, 59, 100, 62, 160, 143, 132, 188, 42, 255, 213, 190, 140, 225, 206, 61, 42, 60, 74, 191, 172, 199, 67, 62, 146, 246, 4, 61, 215, 30, 56, 62, 76, 83, 160, 189, 115, 216, 65, 62, 19, 33, 44, 62, 153, 84, 35, 189, 205, 195, 28, 190, 205, 120, 228, 61, 85, 15, 67, 190, 187, 57, 7, 63, 63, 249, 156, 62, 75, 239, 222, 190, 128, 101, 38, 191, 75, 93, 232, 190, 21, 244, 29, 62, 177, 141, 151, 62, 15, 219, 168, 62, 172, 215, 182, 61, 248, 54, 152, 60, 57, 167, 29, 191, 133, 240, 16, 191, 247, 33, 32, 190, 205, 65, 173, 61, 162, 153, 208, 190, 162, 101, 159, 189, 96, 136, 151, 62, 154, 24, 79, 191, 232, 137, 88, 186, 249, 1, 106, 62, 215, 44, 129, 62, 123, 170, 134, 61, 249, 131, 183, 190, 146, 111, 169, 190, 217, 220, 210, 61, 54, 214, 236, 62, 2, 255, 129, 189, 141, 252, 248, 61, 213, 19, 32, 62, 168, 43, 205, 190, 228, 185, 135, 189, 200, 238, 88, 189, 229, 47, 190, 188, 18, 29, 114, 190, 211, 93, 158, 190, 199, 45, 73, 190, 137, 97, 81, 62, 102, 11, 135, 61, 133, 96, 98, 190, 221, 165, 31, 190, 6, 25, 116, 61, 186, 121, 149, 62, 45, 218, 4, 62, 57, 100, 18, 62, 41, 133, 103, 190, 187, 173, 171, 61, 248, 176, 215, 61, 57, 19, 61, 61, 128, 80, 92, 62, 72, 143, 62, 62, 131, 168, 100, 61, 147, 33, 159, 190, 246, 27, 28, 190, 19, 218, 39, 59, 117, 188, 103, 61, 243, 75, 245, 61, 54, 0, 199, 60, 10, 226, 133, 190, 128, 46, 95, 62, 162, 166, 254, 189, 154, 152, 15, 190, 98, 184, 222, 59, 171, 88, 10, 62, 179, 22, 23, 62, 0, 182, 202, 188, 198, 150, 117, 190, 88, 248, 48, 62, 73, 65, 89, 62, 110, 172, 37, 190, 192, 154, 10, 190, 25, 227, 151, 62, 119, 61, 246, 190, 247, 140, 198, 60, 126, 29, 97, 62, 166, 140, 154, 61, 244, 204, 205, 61, 238, 144, 213, 187, 247, 228, 132, 190, 15, 64, 75, 60, 33, 174, 112, 62, 99, 42, 196, 61, 245, 54, 169, 61, 169, 153, 79, 62, 164, 177, 6, 62, 117, 101, 154, 190, 28, 40, 109, 189, 132, 61, 188, 189, 109, 56, 83, 188, 5, 175, 228, 189, 18, 245, 67, 60, 207, 182, 117, 61, 48, 162, 137, 190, 158, 79, 72, 62, 244, 237, 127, 60, 148, 126, 223, 189, 91, 174, 74, 62, 236, 252, 148, 190, 98, 219, 80, 189, 131, 181, 188, 190, 115, 220, 42, 61, 183, 50, 29, 62, 252, 152, 68, 61, 216, 40, 93, 190, 41, 174, 154, 189, 142, 185, 233, 186, 129, 166, 118, 62, 82, 130, 45, 62, 127, 126, 18, 190, 214, 82, 216, 190, 172, 183, 130, 62, 214, 32, 21, 62, 182, 40, 113, 61, 126, 143, 114, 62, 221, 97, 138, 62, 53, 72, 10, 62, 170, 128, 40, 191, 134, 140, 170, 190, 243, 3, 139, 190, 241, 34, 40, 61, 187, 72, 156, 189, 92, 37, 140, 189, 139, 142, 187, 190, 227, 77, 158, 61, 92, 157, 108, 190, 92, 76, 38, 190, 32, 26, 242, 60, 40, 220, 159, 186, 140, 15, 182, 190, 122, 57, 21, 190, 37, 54, 134, 61, 246, 199, 198, 190, 144, 148, 197, 190, 51, 183, 255, 190, 48, 40, 5, 190, 17, 138, 49, 190, 69, 4, 223, 62, 113, 162, 171, 189, 12, 38, 164, 190, 248, 20, 230, 190, 223, 248, 75, 188, 113, 198, 3, 63, 61, 225, 132, 190, 135, 253, 144, 190, 16, 105, 5, 191, 191, 252, 3, 191, 124, 169, 63, 189, 75, 143, 55, 191, 222, 118, 138, 62, 151, 178, 118, 62, 35, 74, 135, 191, 102, 104, 221, 61, 180, 128, 221, 189, 102, 191, 184, 61, 119, 48, 212, 190, 186, 151, 244, 190, 58, 131, 147, 62, 163, 247, 204, 190, 77, 247, 95, 190, 0, 192, 5, 62, 241, 108, 37, 62, 77, 210, 56, 190, 38, 135, 194, 189, 141, 159, 98, 62, 111, 41, 160, 189, 99, 173, 239, 61, 81, 63, 145, 189, 79, 223, 215, 61, 132, 203, 30, 190, 205, 156, 77, 62, 241, 191, 22, 62, 18, 101, 60, 62, 206, 59, 4, 188, 36, 240, 146, 190, 31, 126, 151, 61, 89, 214, 247, 61, 90, 167, 2, 191, 134, 224, 113, 62, 159, 210, 168, 61, 20, 93, 95, 190, 18, 155, 116, 190, 187, 89, 129, 190, 167, 122, 90, 61, 53, 72, 90, 62, 147, 48, 25, 62, 233, 182, 1, 190, 89, 57, 95, 190, 239, 30, 134, 62, 85, 213, 207, 61, 13, 226, 226, 189, 114, 211, 133, 190, 124, 83, 130, 189, 219, 177, 228, 188, 219, 227, 6, 189, 185, 39, 50, 62, 137, 205, 39, 190, 246, 11, 146, 60, 127, 66, 51, 62, 54, 140, 134, 189, 122, 119, 198, 188, 180, 189, 229, 61, 39, 36, 247, 189, 250, 159, 36, 62, 206, 153, 23, 62, 123, 225, 146, 189, 11, 178, 245, 189, 43, 178, 143, 59, 34, 223, 39, 62, 198, 195, 75, 61, 253, 59, 83, 189, 74, 232, 36, 62, 105, 114, 41, 190, 57, 83, 196, 189, 2, 81, 244, 187, 2, 204, 29, 190, 143, 96, 31, 190, 55, 217, 143, 61, 120, 40, 129, 188, 84, 15, 50, 190, 186, 60, 35, 189, 54, 216, 52, 190, 0, 48, 12, 190, 177, 113, 130, 60, 84, 249, 13, 62, 174, 182, 58, 190, 112, 184, 131, 62, 153, 216, 13, 61, 188, 208, 246, 188, 144, 244, 142, 189, 238, 88, 188, 189, 126, 185, 76, 62, 34, 167, 161, 62, 37, 53, 32, 61, 93, 75, 146, 60, 90, 75, 52, 190, 5, 159, 172, 190, 11, 116, 61, 61, 63, 222, 107, 62, 186, 97, 5, 190, 94, 185, 65, 190, 18, 110, 219, 189, 66, 210, 39, 62, 43, 178, 157, 190, 184, 150, 166, 61, 49, 223, 101, 62, 228, 66, 73, 61, 39, 64, 19, 61, 109, 251, 138, 61, 180, 150, 44, 190, 0, 44, 94, 61, 27, 192, 102, 62, 240, 65, 158, 189, 242, 236, 49, 62, 204, 45, 166, 189, 25, 145, 26, 190, 228, 186, 29, 61, 123, 45, 207, 190, 149, 134, 15, 191, 171, 254, 211, 61, 245, 94, 231, 188, 43, 243, 159, 189, 185, 63, 129, 62, 164, 44, 81, 190, 161, 95, 93, 190, 240, 214, 208, 62, 238, 188, 189, 190, 163, 146, 214, 61, 119, 122, 213, 188, 20, 134, 180, 61, 197, 99, 136, 62, 55, 137, 241, 61, 152, 42, 140, 190, 133, 163, 127, 190, 19, 104, 231, 189, 58, 165, 144, 189, 30, 226, 216, 189, 182, 153, 204, 60, 36, 26, 129, 62, 96, 179, 69, 191, 132, 59, 114, 62, 153, 127, 139, 189, 54, 136, 76, 60, 182, 119, 100, 190, 155, 196, 103, 190, 54, 175, 214, 61, 137, 142, 143, 189, 152, 195, 142, 189, 105, 180, 51, 62, 106, 5, 244, 60, 139, 173, 10, 62, 231, 95, 124, 62, 252, 213, 228, 60, 161, 79, 11, 191, 191, 127, 129, 189, 215, 202, 17, 189, 83, 69, 160, 62, 171, 84, 34, 62, 104, 241, 128, 62, 94, 36, 71, 61, 239, 47, 38, 190, 239, 104, 133, 59, 156, 94, 253, 60, 182, 40, 176, 61, 132, 22, 128, 190, 68, 147, 216, 61, 106, 67, 130, 188, 75, 202, 67, 191, 156, 159, 79, 189, 80, 150, 254, 62, 74, 79, 189, 62, 122, 19, 96, 190, 128, 122, 62, 60, 214, 206, 164, 61, 149, 82, 110, 60, 69, 9, 244, 61, 223, 248, 134, 188, 44, 103, 120, 61, 194, 58, 54, 189, 7, 119, 246, 189, 33, 134, 220, 189, 190, 29, 183, 61, 23, 84, 250, 190, 227, 194, 137, 189, 120, 28, 54, 61, 116, 200, 204, 189, 74, 51, 80, 189, 34, 146, 3, 190, 61, 188, 22, 190, 252, 10, 46, 190, 237, 187, 28, 190, 159, 12, 138, 61, 211, 14, 17, 190, 194, 28, 41, 62, 235, 19, 243, 61, 58, 35, 218, 189, 196, 12, 131, 189, 194, 46, 114, 60, 44, 26, 119, 189, 154, 89, 199, 188, 185, 176, 111, 190, 221, 162, 225, 61, 184, 76, 122, 62, 199, 220, 213, 190, 166, 178, 117, 61, 46, 135, 3, 189, 163, 112, 19, 61, 60, 138, 31, 190, 150, 201, 3, 62, 210, 28, 90, 61, 216, 200, 91, 188, 215, 41, 7, 189, 151, 103, 66, 60, 175, 33, 136, 189, 156, 80, 245, 61, 28, 117, 94, 189, 165, 5, 82, 190, 39, 65, 122, 189, 157, 49, 171, 61, 13, 85, 224, 61, 102, 73, 36, 62, 11, 203, 129, 190, 187, 155, 237, 61, 100, 58, 114, 62, 154, 196, 49, 187, 91, 255, 114, 189, 221, 221, 245, 187, 147, 95, 54, 189, 227, 146, 139, 189, 163, 249, 164, 61, 80, 97, 41, 61, 152, 29, 207, 61, 141, 35, 123, 62, 214, 187, 131, 62, 59, 96, 132, 189, 204, 164, 208, 61, 249, 13, 102, 189, 6, 48, 129, 61, 135, 39, 21, 61, 14, 53, 154, 62, 160, 153, 70, 189, 138, 216, 234, 61, 86, 22, 219, 189, 235, 221, 160, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 55, 11, 189, 143, 188, 210, 61, 68, 130, 214, 189, 48, 232, 176, 189, 141, 51, 23, 62, 191, 6, 39, 60, 194, 9, 58, 61, 143, 144, 193, 189, 131, 67, 84, 61, 238, 52, 58, 62, 251, 97, 46, 190, 183, 253, 150, 62, 95, 224, 166, 189, 55, 199, 35, 61, 240, 59, 66, 62, 168, 186, 49, 190, 70, 235, 198, 189, 183, 255, 146, 61, 45, 152, 129, 60, 173, 183, 230, 61, 168, 233, 161, 62, 48, 91, 84, 59, 214, 161, 156, 190, 170, 5, 241, 61, 37, 121, 80, 62, 222, 177, 171, 189, 100, 94, 47, 190, 16, 104, 185, 61, 0, 81, 132, 187, 66, 62, 92, 62, 43, 130, 18, 189, 140, 233, 135, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 200, 97, 190, 93, 71, 58, 62, 75, 209, 246, 61, 152, 186, 107, 62, 131, 44, 81, 189, 100, 85, 126, 189, 221, 21, 170, 189, 217, 228, 188, 62, 112, 82, 184, 189, 231, 123, 154, 61, 123, 163, 167, 188, 159, 100, 1, 60, 197, 72, 1, 189, 225, 248, 180, 61, 121, 131, 15, 63, 202, 65, 236, 61, 195, 148, 140, 61, 197, 101, 57, 63, 88, 7, 247, 60, 187, 12, 235, 62, 235, 10, 122, 191, 164, 205, 43, 62, 178, 165, 19, 190, 241, 246, 140, 62, 147, 158, 144, 63, 81, 163, 158, 62, 76, 203, 42, 189, 182, 89, 63, 190, 210, 98, 218, 62, 207, 235, 143, 190, 30, 144, 70, 190, 238, 211, 76, 190, 47, 23, 120, 189, 201, 155, 147, 190, 152, 143, 202, 62, 72, 248, 140, 62, 43, 131, 182, 190, 161, 100, 58, 190, 7, 117, 13, 62, 5, 28, 184, 190, 223, 5, 54, 190, 14, 27, 105, 190, 135, 187, 208, 59, 220, 111, 114, 190, 124, 218, 222, 187, 222, 33, 73, 189, 163, 97, 178, 62, 229, 72, 107, 61, 57, 224, 250, 61, 103, 207, 82, 62, 24, 65, 133, 190, 247, 101, 186, 189, 54, 46, 130, 62, 130, 104, 152, 61, 14, 77, 163, 62, 193, 191, 251, 62, 227, 14, 237, 61, 54, 137, 188, 61, 113, 86, 32, 189, 208, 114, 18, 62, 18, 11, 236, 188, 250, 85, 134, 189, 84, 19, 42, 62, 120, 122, 165, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 166, 232, 189, 154, 41, 169, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {210, 248, 132, 190, 117, 36, 163, 191, 107, 24, 193, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {107, 100, 89, 62, 135, 222, 64, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0011/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}