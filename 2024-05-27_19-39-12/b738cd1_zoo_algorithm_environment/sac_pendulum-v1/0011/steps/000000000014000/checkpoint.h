// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 135, 185, 61, 36, 214, 255, 190, 102, 215, 143, 59, 137, 253, 8, 63, 84, 187, 201, 189, 5, 193, 197, 190, 134, 134, 22, 191, 30, 222, 192, 191, 125, 236, 181, 190, 94, 33, 78, 190, 184, 63, 45, 62, 38, 6, 37, 190, 246, 243, 9, 62, 67, 139, 133, 63, 150, 176, 7, 63, 155, 69, 167, 190, 106, 35, 178, 191, 70, 220, 207, 190, 157, 173, 117, 190, 205, 2, 205, 190, 82, 152, 233, 62, 87, 255, 153, 190, 122, 60, 131, 61, 12, 175, 20, 191, 95, 158, 108, 63, 115, 88, 57, 63, 167, 71, 208, 62, 92, 188, 21, 191, 27, 10, 74, 190, 133, 25, 194, 190, 148, 160, 101, 61, 84, 57, 237, 61, 41, 102, 178, 190, 68, 61, 208, 62, 173, 116, 37, 191, 125, 230, 66, 62, 47, 49, 107, 190, 96, 21, 239, 190, 246, 143, 235, 62, 254, 217, 155, 189, 27, 243, 156, 62, 104, 173, 45, 63, 126, 161, 137, 62, 26, 7, 163, 63, 135, 153, 117, 62, 133, 145, 250, 190, 89, 34, 1, 191, 85, 101, 225, 62, 193, 0, 51, 63, 254, 65, 146, 191, 31, 227, 224, 190, 119, 154, 233, 62, 186, 185, 78, 191, 213, 52, 101, 62, 4, 151, 95, 63, 61, 157, 197, 190, 30, 37, 116, 61, 88, 188, 24, 63, 149, 8, 143, 191, 211, 79, 163, 190, 169, 65, 68, 62, 213, 153, 73, 191, 235, 139, 149, 189, 0, 141, 42, 63, 112, 44, 125, 63, 253, 219, 67, 62, 175, 14, 99, 62, 236, 58, 76, 63, 81, 189, 17, 62, 73, 207, 35, 191, 196, 208, 219, 191, 150, 129, 7, 191, 238, 20, 33, 191, 179, 86, 42, 63, 131, 116, 18, 63, 80, 51, 49, 63, 107, 131, 218, 190, 179, 208, 139, 190, 113, 32, 112, 62, 98, 94, 22, 190, 54, 73, 247, 189, 178, 77, 52, 63, 197, 37, 35, 62, 203, 133, 30, 63, 113, 128, 205, 62, 132, 161, 164, 190, 74, 117, 227, 190, 147, 101, 243, 60, 74, 143, 233, 62, 113, 15, 154, 61, 88, 67, 123, 61, 238, 223, 245, 189, 240, 202, 215, 62, 5, 224, 115, 62, 253, 111, 173, 191, 190, 135, 162, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 198, 19, 191, 76, 60, 7, 191, 125, 144, 140, 189, 25, 11, 16, 63, 108, 137, 122, 190, 33, 61, 192, 189, 64, 4, 226, 190, 76, 27, 32, 62, 225, 6, 74, 191, 186, 172, 11, 190, 183, 246, 207, 62, 134, 157, 156, 62, 230, 241, 144, 190, 230, 252, 245, 62, 74, 122, 128, 62, 182, 230, 14, 63, 140, 45, 142, 188, 114, 198, 162, 61, 249, 23, 80, 190, 83, 186, 213, 190, 198, 224, 25, 63, 139, 20, 174, 190, 3, 150, 45, 63, 207, 24, 201, 61, 149, 228, 18, 63, 58, 18, 46, 191, 234, 110, 221, 62, 75, 254, 212, 190, 85, 142, 223, 189, 159, 98, 199, 62, 179, 89, 80, 191, 253, 227, 226, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 206, 224, 61, 63, 96, 155, 189, 102, 249, 137, 62, 200, 217, 8, 61, 34, 110, 74, 190, 138, 224, 80, 61, 188, 109, 155, 189, 169, 12, 47, 62, 97, 208, 63, 62, 20, 139, 140, 190, 111, 221, 49, 190, 170, 76, 168, 189, 14, 23, 189, 189, 68, 150, 227, 61, 188, 33, 101, 62, 29, 176, 40, 62, 102, 32, 65, 62, 144, 79, 71, 62, 22, 150, 3, 62, 169, 207, 93, 190, 224, 229, 135, 62, 130, 37, 132, 62, 230, 96, 26, 62, 141, 42, 249, 61, 136, 242, 133, 189, 217, 184, 203, 189, 89, 104, 24, 62, 242, 50, 216, 61, 182, 230, 243, 61, 194, 247, 57, 61, 215, 231, 24, 189, 244, 122, 4, 62, 228, 191, 120, 61, 8, 209, 130, 189, 39, 13, 195, 189, 85, 144, 220, 61, 220, 86, 5, 191, 167, 164, 137, 188, 89, 33, 112, 60, 234, 199, 108, 61, 120, 53, 249, 190, 49, 22, 22, 190, 114, 154, 241, 189, 185, 173, 236, 62, 226, 207, 39, 62, 217, 86, 230, 189, 20, 166, 229, 190, 164, 2, 24, 62, 64, 230, 218, 188, 97, 168, 183, 62, 16, 55, 110, 62, 112, 191, 252, 189, 27, 28, 247, 61, 133, 50, 45, 191, 189, 252, 19, 190, 215, 145, 69, 189, 86, 242, 37, 190, 183, 34, 160, 62, 36, 180, 244, 189, 211, 83, 106, 189, 217, 220, 13, 61, 160, 138, 88, 190, 124, 60, 30, 190, 223, 149, 110, 62, 181, 243, 135, 60, 255, 123, 131, 189, 132, 69, 230, 61, 140, 27, 191, 61, 14, 138, 7, 62, 173, 139, 234, 189, 119, 136, 167, 189, 254, 23, 53, 62, 2, 109, 223, 190, 136, 155, 136, 189, 136, 91, 114, 61, 56, 65, 142, 62, 233, 203, 0, 190, 45, 195, 243, 190, 89, 87, 52, 191, 46, 4, 21, 63, 206, 71, 188, 189, 232, 46, 106, 62, 209, 108, 155, 62, 100, 65, 61, 188, 25, 23, 195, 61, 125, 187, 127, 191, 51, 167, 151, 190, 77, 210, 101, 62, 90, 143, 248, 189, 198, 169, 53, 62, 254, 176, 27, 189, 23, 42, 214, 190, 130, 22, 86, 61, 95, 238, 249, 61, 129, 87, 81, 61, 102, 219, 189, 62, 147, 141, 24, 189, 222, 53, 51, 62, 43, 233, 39, 62, 230, 218, 146, 62, 251, 232, 191, 61, 65, 19, 81, 61, 45, 42, 103, 190, 164, 124, 95, 62, 234, 162, 0, 190, 66, 255, 9, 61, 252, 37, 96, 62, 164, 190, 128, 62, 70, 114, 4, 190, 120, 245, 1, 191, 249, 74, 14, 191, 71, 73, 94, 63, 125, 37, 29, 190, 229, 245, 203, 62, 42, 76, 242, 62, 179, 243, 131, 61, 37, 223, 125, 61, 172, 25, 22, 191, 241, 198, 231, 190, 56, 193, 14, 189, 5, 12, 215, 60, 212, 49, 111, 62, 57, 226, 5, 62, 188, 113, 225, 190, 167, 65, 19, 190, 79, 130, 24, 187, 60, 133, 205, 188, 190, 28, 37, 63, 174, 236, 32, 62, 242, 195, 8, 190, 90, 36, 137, 62, 181, 201, 43, 188, 173, 65, 161, 190, 15, 29, 222, 188, 85, 132, 139, 61, 129, 248, 89, 62, 83, 75, 48, 190, 86, 10, 231, 189, 71, 24, 16, 61, 235, 143, 153, 62, 195, 152, 69, 189, 103, 149, 4, 190, 130, 193, 122, 190, 11, 14, 2, 62, 5, 137, 66, 61, 36, 9, 137, 62, 118, 17, 118, 62, 78, 187, 128, 190, 159, 108, 68, 59, 18, 74, 184, 190, 171, 200, 106, 60, 220, 27, 206, 61, 130, 69, 229, 61, 210, 24, 2, 61, 103, 146, 139, 62, 205, 90, 128, 189, 149, 100, 132, 189, 9, 61, 63, 62, 18, 248, 234, 61, 119, 2, 63, 62, 129, 136, 219, 61, 71, 176, 40, 190, 246, 181, 110, 62, 175, 114, 164, 61, 73, 221, 152, 190, 114, 209, 21, 189, 195, 242, 101, 190, 22, 87, 2, 190, 106, 215, 40, 190, 49, 31, 186, 188, 182, 255, 174, 61, 67, 37, 128, 61, 111, 72, 10, 189, 209, 32, 13, 62, 134, 5, 63, 61, 215, 92, 151, 61, 119, 32, 185, 189, 21, 153, 57, 62, 179, 150, 49, 62, 114, 55, 181, 190, 177, 232, 145, 62, 252, 241, 99, 60, 22, 174, 86, 62, 24, 226, 22, 62, 91, 43, 156, 61, 106, 104, 60, 190, 145, 156, 132, 62, 71, 159, 11, 62, 27, 73, 27, 62, 88, 153, 89, 62, 248, 45, 41, 190, 73, 172, 241, 189, 71, 58, 32, 190, 73, 225, 27, 190, 107, 248, 20, 190, 124, 4, 54, 190, 6, 234, 165, 188, 37, 27, 31, 61, 85, 71, 71, 189, 87, 153, 9, 61, 167, 250, 94, 61, 102, 147, 163, 189, 110, 8, 227, 61, 212, 139, 66, 189, 168, 250, 35, 190, 21, 46, 33, 190, 145, 141, 26, 190, 74, 116, 2, 190, 193, 251, 16, 61, 147, 126, 83, 61, 148, 217, 139, 189, 218, 165, 18, 189, 187, 130, 253, 189, 243, 222, 1, 62, 196, 60, 207, 188, 135, 81, 15, 190, 254, 3, 26, 62, 29, 7, 138, 61, 136, 88, 11, 190, 232, 194, 244, 61, 226, 41, 110, 61, 32, 53, 67, 190, 147, 120, 7, 190, 187, 134, 65, 57, 250, 58, 35, 62, 18, 62, 19, 189, 97, 121, 107, 189, 230, 191, 249, 61, 250, 187, 156, 58, 205, 194, 144, 190, 173, 181, 31, 191, 79, 143, 19, 62, 220, 48, 251, 190, 58, 174, 35, 190, 220, 195, 146, 61, 40, 191, 23, 62, 169, 101, 241, 190, 197, 231, 223, 190, 161, 149, 108, 190, 14, 21, 215, 188, 46, 252, 235, 61, 132, 231, 136, 62, 228, 171, 224, 62, 27, 225, 51, 190, 51, 70, 103, 62, 96, 147, 18, 191, 136, 250, 226, 190, 120, 171, 39, 190, 141, 210, 60, 191, 197, 223, 207, 61, 181, 75, 50, 62, 9, 183, 19, 62, 106, 225, 138, 62, 62, 32, 179, 189, 212, 72, 81, 59, 62, 230, 82, 62, 213, 119, 25, 190, 75, 63, 129, 190, 72, 113, 180, 61, 172, 135, 1, 62, 193, 204, 45, 190, 76, 136, 79, 61, 218, 59, 227, 189, 88, 250, 167, 61, 167, 236, 6, 189, 211, 238, 168, 61, 83, 231, 114, 60, 104, 242, 24, 62, 136, 79, 14, 190, 118, 21, 26, 62, 114, 35, 254, 61, 17, 174, 215, 186, 248, 151, 253, 61, 160, 120, 189, 61, 160, 28, 192, 186, 221, 52, 106, 190, 60, 79, 136, 61, 176, 165, 31, 62, 67, 144, 109, 62, 250, 239, 56, 62, 139, 225, 19, 62, 18, 63, 173, 189, 2, 199, 86, 62, 26, 210, 195, 61, 172, 229, 220, 61, 31, 183, 250, 61, 70, 103, 120, 190, 45, 49, 207, 189, 147, 243, 198, 188, 176, 76, 123, 189, 37, 62, 10, 190, 229, 20, 134, 62, 23, 53, 66, 190, 90, 146, 40, 62, 174, 224, 48, 62, 56, 132, 78, 62, 226, 16, 109, 190, 107, 204, 166, 189, 14, 220, 75, 61, 35, 4, 87, 61, 199, 66, 224, 61, 242, 18, 32, 62, 94, 2, 204, 188, 47, 170, 122, 62, 156, 91, 68, 189, 177, 47, 159, 61, 67, 0, 216, 61, 117, 180, 92, 189, 9, 126, 163, 61, 240, 154, 11, 191, 205, 6, 67, 190, 225, 77, 11, 190, 217, 157, 76, 187, 151, 111, 160, 61, 159, 252, 246, 61, 94, 169, 200, 189, 8, 56, 215, 187, 31, 91, 0, 190, 6, 186, 33, 60, 246, 178, 13, 190, 99, 179, 19, 190, 237, 199, 185, 61, 163, 25, 199, 61, 214, 127, 29, 62, 148, 228, 6, 190, 42, 51, 106, 189, 72, 74, 225, 188, 125, 177, 243, 189, 63, 247, 47, 62, 38, 122, 18, 189, 249, 218, 170, 59, 232, 202, 68, 189, 65, 125, 184, 60, 148, 155, 26, 190, 53, 149, 12, 190, 69, 202, 222, 189, 249, 154, 229, 189, 103, 109, 49, 62, 40, 195, 181, 189, 111, 108, 172, 58, 102, 137, 40, 190, 174, 111, 189, 187, 29, 114, 130, 61, 89, 20, 81, 189, 93, 18, 40, 62, 236, 3, 28, 62, 16, 38, 193, 189, 114, 42, 211, 189, 66, 88, 52, 190, 153, 78, 133, 189, 63, 245, 195, 189, 69, 211, 52, 62, 170, 68, 30, 190, 140, 186, 149, 189, 22, 54, 152, 189, 218, 56, 151, 61, 57, 178, 44, 190, 24, 165, 6, 61, 217, 30, 42, 61, 69, 201, 51, 62, 75, 193, 124, 190, 199, 144, 37, 189, 28, 199, 25, 62, 42, 221, 98, 62, 160, 192, 149, 61, 96, 30, 107, 61, 58, 253, 158, 189, 55, 168, 128, 62, 118, 82, 132, 61, 20, 181, 184, 62, 150, 208, 183, 61, 134, 44, 65, 190, 230, 116, 40, 62, 111, 220, 210, 190, 0, 249, 2, 61, 229, 67, 63, 190, 176, 139, 53, 190, 148, 18, 93, 61, 113, 191, 112, 62, 230, 130, 22, 189, 182, 113, 2, 189, 183, 80, 184, 189, 84, 148, 112, 190, 115, 140, 11, 61, 87, 194, 163, 61, 183, 140, 94, 189, 81, 189, 0, 62, 245, 57, 7, 190, 219, 166, 35, 61, 102, 8, 24, 60, 205, 166, 169, 190, 255, 124, 155, 190, 44, 202, 178, 60, 12, 111, 81, 189, 240, 104, 149, 190, 81, 211, 111, 62, 239, 185, 234, 189, 160, 93, 151, 187, 21, 241, 249, 61, 240, 79, 212, 187, 114, 128, 129, 189, 226, 46, 245, 186, 20, 4, 170, 61, 10, 77, 27, 190, 148, 43, 114, 62, 221, 39, 134, 60, 248, 219, 25, 62, 130, 90, 160, 60, 169, 100, 125, 190, 193, 48, 117, 190, 35, 95, 196, 187, 234, 4, 52, 62, 23, 123, 32, 190, 255, 125, 205, 189, 71, 198, 163, 190, 49, 58, 41, 62, 41, 237, 231, 61, 244, 74, 146, 62, 222, 6, 179, 189, 248, 51, 45, 190, 135, 116, 235, 61, 89, 79, 26, 190, 15, 91, 107, 60, 248, 28, 155, 188, 137, 56, 244, 189, 137, 146, 54, 190, 42, 120, 37, 190, 52, 16, 30, 60, 10, 133, 105, 62, 47, 191, 177, 61, 87, 64, 73, 190, 78, 98, 50, 62, 91, 202, 58, 62, 201, 148, 30, 189, 168, 203, 193, 62, 38, 88, 206, 189, 37, 82, 12, 62, 88, 110, 221, 190, 157, 168, 61, 190, 102, 17, 32, 189, 126, 195, 15, 189, 230, 169, 36, 61, 52, 253, 192, 188, 223, 226, 44, 189, 0, 175, 136, 61, 131, 145, 232, 188, 84, 216, 94, 190, 170, 68, 244, 189, 150, 4, 239, 189, 60, 75, 99, 62, 239, 110, 158, 191, 206, 25, 3, 62, 94, 145, 27, 191, 39, 26, 227, 190, 249, 53, 165, 62, 71, 194, 2, 58, 112, 112, 3, 191, 94, 191, 200, 61, 154, 152, 94, 189, 56, 154, 155, 62, 141, 65, 168, 61, 128, 45, 16, 62, 242, 82, 21, 191, 238, 77, 154, 61, 188, 185, 81, 62, 15, 104, 109, 61, 53, 68, 69, 62, 131, 46, 191, 62, 96, 124, 45, 188, 22, 220, 41, 191, 187, 89, 71, 190, 93, 120, 183, 191, 166, 235, 50, 62, 254, 160, 122, 61, 189, 84, 48, 62, 179, 188, 194, 190, 240, 141, 227, 61, 48, 0, 131, 189, 176, 42, 128, 189, 139, 248, 63, 190, 220, 124, 155, 189, 125, 98, 83, 189, 190, 201, 35, 190, 225, 92, 105, 190, 57, 225, 4, 62, 117, 221, 28, 62, 67, 172, 130, 61, 95, 243, 173, 189, 210, 77, 184, 189, 110, 50, 129, 61, 244, 78, 153, 61, 251, 30, 62, 189, 6, 200, 51, 190, 25, 5, 211, 189, 34, 252, 22, 61, 74, 134, 124, 188, 164, 137, 227, 61, 137, 141, 15, 189, 170, 182, 221, 189, 39, 131, 234, 189, 157, 39, 19, 190, 87, 211, 244, 61, 89, 69, 180, 189, 80, 48, 202, 61, 30, 142, 128, 61, 89, 58, 152, 189, 140, 21, 186, 59, 124, 91, 13, 62, 216, 12, 17, 189, 8, 250, 125, 190, 49, 184, 155, 189, 111, 62, 43, 190, 231, 92, 167, 189, 96, 48, 172, 61, 36, 122, 157, 189, 23, 32, 215, 189, 88, 225, 18, 190, 44, 154, 250, 61, 83, 146, 43, 189, 95, 239, 163, 189, 111, 15, 142, 189, 126, 59, 34, 190, 231, 23, 253, 189, 234, 243, 213, 61, 219, 129, 136, 61, 210, 174, 33, 190, 4, 135, 103, 61, 235, 194, 177, 60, 146, 93, 41, 190, 83, 54, 50, 190, 206, 44, 133, 189, 99, 130, 149, 189, 149, 200, 254, 189, 25, 92, 186, 60, 211, 233, 26, 62, 115, 226, 24, 190, 72, 161, 14, 190, 245, 207, 248, 189, 158, 79, 242, 189, 166, 21, 27, 190, 141, 254, 43, 62, 60, 219, 41, 190, 109, 254, 202, 189, 157, 180, 134, 61, 200, 31, 13, 62, 230, 29, 11, 62, 142, 61, 173, 191, 37, 81, 115, 62, 129, 219, 5, 190, 112, 13, 181, 190, 247, 29, 4, 62, 54, 96, 215, 190, 103, 149, 10, 191, 97, 144, 181, 62, 234, 123, 175, 190, 85, 199, 138, 189, 41, 251, 156, 62, 43, 204, 49, 62, 30, 138, 71, 190, 175, 116, 204, 188, 75, 181, 211, 62, 235, 145, 129, 190, 148, 29, 132, 62, 252, 78, 253, 62, 125, 71, 113, 62, 250, 84, 22, 191, 199, 208, 105, 62, 208, 8, 211, 191, 113, 59, 137, 62, 54, 168, 154, 190, 251, 140, 34, 62, 47, 194, 25, 190, 85, 174, 232, 61, 33, 223, 107, 61, 27, 102, 233, 189, 152, 42, 4, 190, 234, 79, 246, 61, 97, 36, 34, 62, 187, 23, 1, 189, 185, 210, 159, 62, 243, 131, 186, 188, 53, 199, 248, 60, 229, 3, 185, 60, 4, 82, 117, 61, 170, 72, 131, 190, 250, 255, 150, 59, 72, 202, 187, 61, 121, 183, 56, 62, 205, 33, 167, 188, 227, 0, 107, 189, 52, 55, 37, 62, 68, 66, 136, 62, 157, 64, 158, 189, 206, 8, 241, 61, 139, 104, 249, 188, 152, 47, 170, 190, 160, 226, 13, 62, 197, 94, 102, 190, 225, 133, 44, 62, 119, 188, 47, 189, 144, 73, 28, 62, 55, 146, 34, 190, 34, 230, 149, 62, 112, 29, 66, 190, 125, 219, 13, 189, 190, 54, 178, 61, 223, 68, 74, 190, 93, 135, 141, 189, 234, 99, 23, 190, 127, 232, 149, 62, 225, 6, 136, 191, 8, 192, 171, 60, 153, 64, 126, 190, 134, 123, 28, 191, 41, 223, 149, 188, 95, 7, 134, 190, 49, 60, 227, 190, 177, 233, 38, 61, 72, 0, 237, 188, 254, 8, 26, 189, 26, 152, 190, 189, 136, 32, 43, 62, 255, 236, 143, 59, 184, 80, 9, 62, 176, 151, 167, 62, 1, 199, 152, 61, 144, 205, 57, 62, 100, 170, 230, 62, 180, 194, 246, 188, 88, 103, 219, 190, 227, 92, 151, 61, 105, 13, 212, 191, 98, 116, 95, 62, 158, 232, 162, 62, 74, 151, 2, 62, 76, 145, 18, 189, 86, 76, 24, 62, 146, 237, 13, 62, 125, 228, 113, 59, 121, 85, 41, 190, 205, 120, 228, 61, 4, 8, 173, 190, 152, 18, 42, 63, 34, 216, 134, 62, 191, 5, 178, 191, 56, 71, 39, 191, 159, 52, 35, 191, 88, 92, 164, 61, 247, 102, 118, 62, 169, 238, 84, 62, 49, 143, 86, 61, 84, 10, 58, 60, 75, 89, 98, 191, 50, 165, 13, 191, 34, 233, 164, 189, 15, 57, 65, 62, 9, 113, 174, 190, 255, 194, 193, 189, 221, 78, 177, 62, 64, 248, 105, 191, 204, 253, 113, 61, 134, 176, 160, 62, 204, 89, 152, 62, 84, 26, 69, 62, 236, 148, 7, 191, 240, 251, 49, 191, 165, 88, 15, 62, 64, 26, 188, 62, 37, 140, 102, 188, 176, 114, 236, 61, 53, 106, 33, 62, 77, 190, 58, 191, 228, 185, 135, 189, 7, 97, 176, 189, 249, 154, 172, 188, 167, 218, 112, 190, 227, 92, 187, 190, 63, 19, 129, 190, 222, 197, 56, 62, 103, 162, 90, 189, 47, 128, 208, 190, 8, 222, 179, 190, 20, 182, 164, 60, 130, 53, 170, 62, 217, 190, 205, 61, 246, 106, 145, 61, 211, 132, 164, 190, 21, 209, 34, 62, 190, 253, 173, 61, 161, 229, 194, 61, 41, 171, 105, 62, 233, 204, 63, 62, 59, 97, 183, 61, 6, 232, 204, 190, 36, 110, 105, 190, 62, 15, 180, 188, 102, 52, 142, 61, 72, 210, 146, 62, 247, 71, 175, 60, 143, 178, 151, 190, 33, 104, 62, 62, 34, 50, 9, 190, 193, 179, 13, 190, 66, 214, 170, 61, 171, 88, 10, 62, 114, 26, 179, 61, 168, 216, 253, 189, 120, 242, 183, 190, 93, 72, 146, 61, 227, 69, 18, 62, 46, 149, 70, 190, 244, 161, 205, 190, 22, 215, 167, 62, 251, 208, 66, 191, 234, 28, 60, 190, 197, 221, 172, 62, 87, 144, 140, 61, 101, 157, 199, 61, 14, 57, 113, 190, 83, 166, 60, 190, 160, 190, 163, 61, 177, 191, 200, 62, 136, 9, 109, 62, 88, 151, 60, 62, 107, 251, 144, 62, 9, 210, 194, 60, 176, 181, 198, 190, 7, 120, 231, 189, 40, 221, 255, 189, 107, 16, 24, 189, 12, 50, 172, 189, 134, 183, 178, 187, 69, 213, 103, 189, 182, 97, 169, 190, 229, 16, 227, 61, 35, 254, 26, 62, 148, 126, 223, 189, 52, 221, 18, 62, 28, 20, 107, 190, 245, 174, 104, 189, 23, 110, 3, 191, 78, 181, 165, 60, 62, 34, 167, 61, 23, 49, 164, 189, 233, 27, 55, 191, 79, 247, 135, 190, 136, 114, 124, 189, 94, 174, 170, 62, 199, 209, 186, 61, 66, 251, 84, 190, 223, 114, 239, 190, 213, 200, 174, 62, 241, 157, 68, 62, 98, 22, 235, 61, 18, 25, 193, 62, 24, 110, 185, 62, 78, 204, 110, 62, 139, 188, 46, 191, 195, 51, 171, 190, 127, 188, 116, 190, 164, 115, 164, 61, 227, 187, 178, 61, 80, 40, 161, 188, 177, 248, 221, 190, 220, 63, 118, 61, 99, 69, 75, 190, 129, 217, 142, 190, 142, 174, 202, 61, 40, 220, 159, 186, 167, 8, 35, 188, 148, 214, 155, 190, 66, 134, 172, 61, 80, 194, 5, 191, 58, 2, 16, 63, 111, 227, 14, 189, 153, 147, 130, 189, 164, 58, 177, 59, 55, 202, 11, 63, 212, 40, 137, 60, 141, 28, 81, 190, 156, 15, 109, 189, 38, 42, 185, 188, 114, 213, 226, 62, 11, 80, 135, 190, 189, 9, 60, 190, 185, 104, 95, 191, 171, 207, 41, 191, 210, 131, 77, 62, 212, 176, 126, 191, 238, 248, 211, 62, 66, 212, 96, 62, 12, 192, 196, 191, 248, 183, 192, 61, 195, 31, 254, 61, 194, 243, 31, 62, 23, 59, 124, 190, 136, 100, 3, 191, 153, 199, 141, 62, 247, 18, 11, 191, 51, 233, 108, 62, 0, 192, 5, 62, 154, 211, 162, 62, 127, 172, 94, 190, 193, 82, 228, 189, 194, 232, 169, 62, 70, 93, 119, 60, 128, 100, 40, 61, 178, 217, 250, 188, 58, 72, 163, 62, 118, 246, 57, 190, 205, 178, 106, 62, 89, 93, 74, 62, 244, 148, 236, 61, 200, 38, 23, 60, 203, 0, 25, 190, 254, 155, 94, 189, 233, 201, 168, 62, 28, 67, 159, 190, 6, 165, 225, 62, 240, 57, 223, 62, 97, 169, 51, 190, 141, 210, 140, 187, 48, 129, 126, 190, 29, 196, 69, 60, 183, 144, 97, 62, 203, 62, 13, 63, 217, 68, 220, 189, 69, 28, 9, 190, 27, 115, 199, 62, 240, 103, 33, 61, 203, 136, 211, 189, 225, 237, 167, 190, 124, 83, 130, 189, 219, 177, 228, 188, 219, 227, 6, 189, 185, 39, 50, 62, 137, 205, 39, 190, 246, 11, 146, 60, 127, 66, 51, 62, 54, 140, 134, 189, 122, 119, 198, 188, 180, 189, 229, 61, 39, 36, 247, 189, 250, 159, 36, 62, 206, 153, 23, 62, 123, 225, 146, 189, 11, 178, 245, 189, 43, 178, 143, 59, 34, 223, 39, 62, 198, 195, 75, 61, 253, 59, 83, 189, 74, 232, 36, 62, 105, 114, 41, 190, 57, 83, 196, 189, 2, 81, 244, 187, 2, 204, 29, 190, 143, 96, 31, 190, 55, 217, 143, 61, 120, 40, 129, 188, 84, 15, 50, 190, 186, 60, 35, 189, 54, 216, 52, 190, 0, 48, 12, 190, 177, 113, 130, 60, 84, 249, 13, 62, 191, 147, 174, 190, 182, 252, 229, 62, 178, 104, 38, 61, 135, 140, 68, 190, 8, 184, 171, 60, 32, 32, 140, 190, 220, 77, 56, 62, 36, 122, 217, 62, 35, 138, 162, 61, 120, 156, 48, 60, 56, 55, 144, 190, 11, 114, 26, 191, 136, 154, 136, 61, 245, 158, 202, 62, 253, 72, 149, 190, 125, 119, 65, 190, 148, 119, 144, 190, 64, 246, 5, 62, 92, 161, 226, 190, 222, 226, 232, 61, 217, 79, 183, 62, 97, 104, 39, 62, 105, 229, 87, 62, 111, 60, 156, 189, 43, 84, 7, 191, 159, 25, 199, 61, 60, 47, 40, 62, 36, 190, 128, 189, 236, 159, 83, 62, 27, 243, 63, 61, 194, 186, 60, 191, 228, 186, 29, 61, 93, 2, 19, 191, 132, 167, 95, 191, 39, 189, 11, 62, 229, 91, 213, 188, 117, 223, 205, 189, 56, 197, 41, 62, 204, 41, 174, 190, 158, 168, 83, 189, 245, 130, 233, 62, 228, 245, 215, 190, 195, 15, 234, 61, 198, 238, 212, 189, 212, 82, 177, 61, 54, 125, 203, 62, 158, 41, 70, 60, 121, 125, 38, 191, 149, 118, 82, 190, 154, 161, 23, 61, 111, 174, 52, 189, 146, 6, 190, 190, 78, 64, 189, 62, 179, 76, 178, 62, 150, 95, 184, 191, 226, 165, 81, 62, 153, 127, 139, 189, 144, 174, 20, 61, 128, 2, 62, 190, 182, 178, 90, 191, 212, 129, 29, 62, 143, 231, 248, 189, 13, 23, 253, 189, 105, 180, 51, 62, 112, 1, 243, 60, 125, 28, 125, 189, 83, 161, 104, 62, 160, 77, 47, 189, 125, 167, 104, 191, 131, 172, 61, 189, 162, 136, 39, 189, 77, 158, 147, 62, 119, 21, 246, 61, 158, 60, 94, 62, 98, 146, 89, 61, 188, 116, 14, 190, 8, 202, 121, 61, 54, 20, 224, 61, 78, 118, 36, 62, 190, 221, 157, 190, 15, 14, 142, 61, 109, 127, 233, 188, 218, 133, 140, 191, 234, 154, 205, 189, 37, 0, 250, 62, 42, 98, 216, 62, 238, 219, 216, 190, 252, 124, 85, 61, 228, 167, 124, 189, 37, 106, 189, 60, 76, 46, 231, 61, 32, 184, 10, 60, 113, 122, 207, 61, 65, 199, 148, 189, 93, 245, 241, 189, 33, 134, 220, 189, 243, 31, 137, 62, 1, 36, 148, 191, 15, 159, 9, 189, 134, 148, 176, 59, 245, 153, 34, 190, 140, 208, 24, 190, 9, 204, 143, 61, 121, 163, 24, 189, 167, 94, 110, 190, 240, 195, 4, 61, 94, 109, 245, 60, 206, 161, 148, 190, 242, 7, 124, 61, 125, 59, 160, 62, 200, 84, 234, 190, 97, 174, 54, 189, 56, 140, 186, 189, 151, 214, 188, 188, 165, 250, 160, 190, 198, 74, 83, 190, 143, 10, 97, 62, 63, 68, 168, 62, 166, 216, 47, 191, 21, 60, 7, 190, 24, 219, 82, 189, 138, 62, 24, 62, 227, 76, 144, 190, 181, 133, 192, 62, 114, 245, 191, 61, 67, 41, 191, 61, 79, 222, 200, 190, 151, 103, 66, 60, 22, 182, 195, 189, 95, 212, 136, 61, 9, 238, 237, 189, 220, 126, 200, 190, 181, 96, 177, 189, 135, 137, 81, 189, 8, 208, 244, 61, 152, 22, 117, 62, 182, 53, 116, 190, 243, 187, 217, 61, 139, 26, 116, 62, 247, 172, 250, 189, 83, 49, 167, 189, 156, 80, 93, 61, 0, 3, 15, 190, 137, 181, 107, 185, 234, 114, 184, 61, 3, 223, 182, 61, 223, 64, 219, 61, 19, 98, 134, 62, 242, 226, 169, 62, 7, 152, 162, 188, 246, 204, 123, 61, 40, 112, 99, 190, 152, 255, 235, 189, 168, 51, 172, 61, 37, 223, 144, 62, 224, 153, 151, 58, 129, 127, 180, 61, 145, 78, 135, 190, 42, 247, 141, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 56, 12, 189, 124, 26, 255, 61, 246, 247, 88, 189, 158, 157, 22, 61, 180, 23, 66, 62, 27, 149, 222, 60, 194, 9, 58, 61, 75, 151, 239, 189, 73, 129, 146, 61, 101, 252, 73, 62, 251, 97, 46, 190, 118, 119, 155, 62, 116, 95, 46, 189, 108, 64, 54, 58, 202, 233, 2, 62, 228, 128, 63, 190, 70, 235, 198, 189, 250, 128, 54, 61, 133, 176, 176, 61, 79, 3, 195, 61, 48, 54, 177, 62, 202, 64, 174, 60, 192, 35, 154, 190, 11, 63, 60, 62, 86, 227, 110, 62, 64, 73, 44, 190, 100, 94, 47, 190, 191, 211, 253, 61, 142, 223, 217, 60, 129, 189, 103, 62, 116, 2, 12, 189, 242, 154, 129, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 252, 55, 190, 42, 64, 66, 62, 253, 93, 128, 62, 146, 53, 175, 62, 26, 121, 47, 189, 56, 190, 129, 189, 221, 21, 170, 189, 103, 124, 197, 62, 218, 32, 149, 189, 178, 141, 153, 60, 123, 163, 167, 188, 45, 218, 50, 189, 82, 21, 253, 189, 79, 109, 147, 188, 252, 209, 84, 63, 252, 163, 244, 61, 195, 148, 140, 61, 194, 141, 90, 63, 40, 77, 217, 188, 46, 85, 6, 63, 197, 154, 150, 191, 86, 73, 116, 62, 186, 179, 254, 190, 28, 29, 2, 63, 234, 4, 155, 63, 200, 151, 5, 63, 76, 203, 42, 189, 35, 137, 33, 191, 10, 227, 20, 63, 44, 113, 192, 190, 26, 224, 19, 191, 112, 240, 73, 190, 199, 140, 205, 189, 209, 143, 202, 190, 67, 75, 140, 62, 23, 210, 11, 62, 146, 27, 181, 190, 178, 119, 29, 190, 7, 117, 13, 62, 23, 84, 231, 190, 98, 23, 53, 190, 241, 21, 90, 190, 135, 187, 208, 59, 253, 11, 115, 190, 174, 64, 175, 189, 215, 101, 30, 189, 135, 50, 36, 62, 0, 175, 120, 60, 57, 224, 250, 61, 14, 222, 152, 62, 134, 16, 132, 190, 218, 137, 160, 57, 110, 72, 158, 62, 164, 104, 163, 60, 63, 132, 147, 62, 69, 58, 228, 62, 132, 216, 108, 190, 76, 78, 246, 60, 113, 86, 32, 189, 49, 114, 35, 62, 208, 184, 136, 189, 136, 29, 0, 190, 247, 238, 17, 62, 76, 15, 6, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 199, 0, 190, 223, 161, 77, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {204, 73, 218, 190, 95, 185, 63, 62, 159, 200, 193, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {9, 22, 203, 191, 157, 215, 127, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0011/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}