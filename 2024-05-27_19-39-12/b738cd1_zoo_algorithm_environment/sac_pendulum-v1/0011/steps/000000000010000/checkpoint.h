// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 135, 185, 61, 36, 214, 255, 190, 102, 215, 143, 59, 187, 90, 147, 62, 35, 8, 223, 60, 114, 235, 181, 190, 50, 149, 25, 191, 153, 19, 184, 191, 242, 227, 161, 190, 254, 36, 105, 190, 239, 197, 183, 61, 140, 50, 37, 190, 183, 9, 135, 190, 101, 193, 90, 63, 195, 239, 1, 63, 251, 78, 141, 190, 179, 10, 168, 191, 170, 246, 211, 190, 63, 7, 146, 190, 123, 116, 195, 190, 22, 158, 254, 62, 195, 49, 237, 189, 26, 43, 243, 61, 173, 223, 13, 191, 249, 166, 94, 63, 143, 98, 47, 63, 135, 15, 205, 62, 29, 202, 30, 191, 132, 10, 156, 189, 153, 247, 173, 190, 118, 253, 144, 61, 208, 166, 135, 61, 74, 32, 240, 190, 139, 65, 219, 62, 68, 121, 252, 190, 132, 15, 54, 62, 11, 219, 78, 190, 90, 152, 177, 190, 66, 4, 250, 62, 21, 135, 132, 189, 225, 51, 239, 62, 141, 82, 45, 63, 110, 120, 151, 62, 210, 55, 147, 63, 89, 117, 85, 62, 156, 225, 237, 190, 4, 140, 43, 191, 191, 135, 201, 62, 6, 4, 68, 63, 241, 131, 125, 191, 127, 169, 191, 190, 62, 10, 17, 63, 0, 102, 84, 191, 95, 166, 18, 62, 72, 71, 89, 63, 211, 35, 137, 190, 41, 140, 221, 188, 197, 35, 32, 63, 109, 94, 134, 191, 121, 14, 152, 190, 96, 208, 156, 62, 228, 72, 84, 191, 105, 225, 34, 190, 144, 72, 46, 63, 253, 134, 82, 63, 144, 215, 108, 62, 166, 160, 235, 61, 203, 52, 60, 63, 202, 143, 18, 62, 113, 192, 25, 191, 32, 115, 214, 191, 203, 230, 225, 190, 138, 134, 55, 191, 220, 126, 26, 63, 85, 131, 19, 63, 228, 106, 24, 63, 2, 102, 134, 190, 198, 108, 119, 190, 31, 23, 138, 62, 133, 169, 79, 190, 172, 239, 8, 190, 148, 230, 69, 63, 28, 105, 153, 62, 210, 44, 22, 63, 130, 119, 253, 62, 199, 27, 17, 190, 192, 157, 210, 190, 132, 114, 70, 189, 87, 55, 152, 62, 36, 201, 38, 61, 84, 224, 62, 62, 68, 235, 190, 189, 244, 230, 229, 62, 180, 175, 137, 62, 250, 10, 137, 191, 159, 192, 203, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 198, 19, 191, 182, 188, 43, 191, 82, 87, 228, 189, 49, 232, 18, 63, 35, 37, 8, 191, 163, 202, 4, 190, 28, 22, 221, 190, 30, 96, 174, 62, 184, 54, 80, 191, 126, 232, 132, 189, 138, 31, 218, 62, 251, 7, 176, 62, 198, 195, 179, 190, 160, 154, 1, 63, 127, 34, 137, 62, 63, 72, 13, 63, 205, 149, 77, 61, 133, 102, 177, 61, 15, 106, 98, 190, 116, 73, 179, 190, 177, 248, 9, 63, 114, 201, 154, 190, 47, 252, 40, 63, 53, 232, 14, 189, 79, 155, 11, 63, 216, 60, 47, 191, 179, 142, 247, 62, 134, 184, 188, 190, 108, 223, 49, 60, 124, 5, 243, 62, 107, 196, 75, 191, 161, 244, 220, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 206, 224, 61, 104, 210, 30, 189, 155, 1, 161, 62, 204, 107, 156, 61, 126, 80, 13, 190, 241, 215, 143, 61, 202, 53, 82, 189, 7, 177, 49, 62, 192, 76, 123, 62, 121, 73, 147, 190, 67, 142, 25, 190, 214, 214, 160, 189, 195, 0, 152, 189, 250, 151, 191, 61, 86, 134, 96, 62, 214, 17, 10, 62, 142, 30, 35, 62, 225, 177, 80, 62, 171, 195, 9, 62, 135, 245, 113, 190, 31, 74, 128, 62, 82, 233, 156, 62, 123, 61, 254, 61, 210, 74, 33, 62, 121, 148, 15, 189, 74, 134, 85, 61, 123, 127, 252, 61, 183, 70, 228, 61, 89, 238, 1, 62, 218, 137, 46, 61, 250, 149, 31, 61, 242, 70, 9, 62, 228, 191, 120, 61, 66, 38, 216, 60, 174, 129, 235, 189, 98, 2, 199, 61, 108, 42, 244, 190, 5, 145, 199, 59, 61, 95, 34, 61, 223, 252, 30, 62, 43, 44, 191, 190, 94, 190, 201, 188, 152, 212, 152, 189, 168, 147, 239, 62, 179, 46, 69, 62, 9, 152, 127, 189, 55, 12, 177, 190, 95, 160, 26, 62, 87, 171, 165, 60, 159, 65, 185, 62, 41, 29, 112, 62, 237, 248, 191, 189, 200, 169, 4, 62, 35, 235, 26, 191, 186, 230, 139, 189, 164, 182, 52, 189, 222, 72, 45, 190, 36, 199, 110, 62, 180, 141, 171, 189, 174, 230, 140, 185, 156, 231, 173, 61, 22, 75, 62, 190, 185, 0, 9, 190, 244, 247, 110, 62, 181, 243, 135, 60, 55, 146, 18, 189, 71, 223, 168, 61, 70, 85, 2, 61, 236, 243, 29, 62, 115, 8, 229, 189, 118, 223, 120, 189, 249, 97, 61, 62, 195, 159, 14, 191, 147, 43, 92, 189, 201, 216, 134, 61, 75, 0, 134, 62, 94, 6, 214, 189, 41, 147, 226, 190, 115, 106, 54, 191, 106, 20, 24, 63, 218, 94, 128, 187, 68, 22, 111, 62, 24, 152, 64, 62, 187, 211, 135, 61, 41, 121, 219, 61, 68, 3, 151, 191, 8, 151, 139, 190, 96, 160, 81, 62, 110, 206, 31, 190, 42, 245, 14, 61, 16, 227, 171, 188, 202, 94, 209, 190, 210, 70, 188, 61, 202, 71, 57, 61, 25, 188, 100, 61, 57, 64, 200, 62, 147, 141, 24, 189, 228, 158, 43, 62, 193, 54, 10, 62, 5, 139, 75, 62, 127, 125, 136, 190, 199, 17, 62, 61, 186, 28, 207, 190, 64, 107, 85, 62, 153, 157, 164, 190, 35, 87, 84, 61, 27, 61, 63, 62, 82, 217, 12, 62, 124, 139, 146, 190, 112, 124, 23, 191, 51, 63, 39, 191, 125, 19, 68, 63, 48, 81, 212, 189, 201, 213, 171, 62, 214, 212, 164, 62, 106, 212, 247, 61, 12, 144, 76, 61, 151, 35, 65, 191, 206, 133, 238, 190, 247, 115, 106, 189, 165, 142, 49, 190, 87, 183, 143, 61, 168, 112, 248, 61, 38, 21, 4, 191, 247, 212, 26, 190, 165, 238, 20, 190, 106, 17, 100, 190, 148, 19, 14, 63, 174, 236, 32, 62, 205, 57, 29, 190, 229, 81, 152, 62, 51, 130, 60, 189, 122, 120, 153, 190, 166, 252, 208, 187, 143, 102, 171, 61, 10, 210, 50, 62, 197, 92, 190, 189, 183, 190, 22, 190, 83, 129, 174, 60, 242, 36, 171, 62, 28, 80, 31, 189, 92, 142, 235, 189, 126, 243, 66, 190, 64, 210, 151, 61, 43, 25, 147, 61, 81, 215, 146, 62, 219, 126, 155, 62, 177, 125, 96, 190, 107, 84, 22, 61, 214, 33, 135, 190, 107, 72, 0, 61, 162, 171, 1, 62, 240, 94, 186, 61, 42, 55, 210, 61, 195, 187, 149, 62, 40, 41, 252, 188, 106, 120, 132, 189, 179, 154, 55, 62, 155, 173, 37, 62, 169, 140, 43, 62, 129, 136, 219, 61, 151, 196, 22, 190, 199, 142, 145, 62, 94, 197, 167, 61, 186, 203, 90, 190, 226, 212, 148, 187, 47, 238, 61, 190, 159, 186, 9, 190, 107, 151, 130, 190, 163, 204, 32, 189, 219, 246, 207, 61, 93, 92, 37, 61, 151, 191, 70, 188, 227, 21, 228, 61, 104, 240, 31, 61, 204, 136, 17, 60, 143, 4, 130, 189, 235, 178, 21, 62, 224, 133, 56, 62, 116, 222, 163, 190, 122, 147, 151, 62, 126, 36, 2, 60, 139, 41, 61, 62, 105, 72, 68, 62, 247, 145, 221, 61, 242, 52, 65, 189, 225, 226, 129, 62, 74, 209, 141, 61, 205, 205, 51, 62, 227, 177, 73, 62, 155, 115, 161, 189, 203, 252, 63, 190, 71, 58, 32, 190, 73, 225, 27, 190, 107, 248, 20, 190, 124, 4, 54, 190, 6, 234, 165, 188, 37, 27, 31, 61, 85, 71, 71, 189, 87, 153, 9, 61, 167, 250, 94, 61, 102, 147, 163, 189, 110, 8, 227, 61, 212, 139, 66, 189, 168, 250, 35, 190, 21, 46, 33, 190, 145, 141, 26, 190, 74, 116, 2, 190, 193, 251, 16, 61, 147, 126, 83, 61, 148, 217, 139, 189, 218, 165, 18, 189, 187, 130, 253, 189, 243, 222, 1, 62, 196, 60, 207, 188, 135, 81, 15, 190, 254, 3, 26, 62, 29, 7, 138, 61, 136, 88, 11, 190, 232, 194, 244, 61, 226, 41, 110, 61, 32, 53, 67, 190, 147, 120, 7, 190, 187, 134, 65, 57, 250, 58, 35, 62, 164, 84, 45, 189, 110, 201, 28, 188, 79, 64, 233, 61, 252, 121, 135, 189, 35, 81, 123, 190, 244, 101, 179, 190, 145, 111, 18, 62, 111, 245, 209, 189, 215, 1, 74, 189, 71, 96, 29, 61, 171, 198, 6, 62, 146, 54, 46, 190, 110, 53, 191, 190, 106, 149, 95, 190, 137, 102, 58, 62, 70, 188, 161, 61, 8, 14, 118, 62, 254, 91, 202, 62, 172, 129, 102, 190, 32, 112, 89, 62, 136, 25, 16, 191, 66, 29, 222, 190, 210, 41, 246, 189, 152, 19, 29, 191, 135, 112, 38, 189, 112, 20, 30, 62, 245, 39, 21, 62, 204, 79, 101, 62, 15, 252, 178, 189, 56, 251, 182, 60, 41, 190, 130, 62, 213, 119, 25, 190, 148, 146, 113, 190, 253, 66, 12, 62, 5, 58, 5, 62, 230, 57, 207, 189, 25, 66, 162, 61, 223, 123, 147, 189, 135, 22, 148, 61, 32, 173, 14, 60, 210, 34, 129, 61, 4, 123, 229, 60, 155, 79, 30, 62, 51, 100, 220, 189, 135, 79, 18, 62, 119, 52, 243, 61, 211, 8, 33, 189, 202, 112, 3, 62, 162, 144, 202, 61, 248, 137, 183, 60, 8, 1, 92, 190, 115, 26, 160, 61, 55, 15, 57, 62, 84, 98, 80, 62, 241, 76, 99, 62, 251, 25, 42, 62, 185, 221, 100, 61, 105, 78, 69, 62, 49, 179, 209, 61, 239, 216, 251, 61, 79, 28, 212, 61, 32, 252, 23, 190, 160, 69, 233, 189, 147, 243, 198, 188, 59, 197, 215, 189, 173, 130, 27, 190, 95, 223, 80, 62, 209, 246, 33, 190, 156, 128, 20, 62, 228, 8, 64, 62, 53, 5, 35, 62, 112, 94, 46, 190, 136, 194, 29, 190, 79, 234, 187, 60, 50, 160, 112, 61, 76, 134, 243, 61, 90, 74, 43, 62, 89, 59, 115, 61, 174, 95, 87, 62, 108, 220, 1, 189, 154, 216, 160, 61, 111, 42, 249, 61, 141, 224, 230, 188, 74, 47, 183, 61, 19, 156, 232, 190, 96, 190, 35, 190, 154, 88, 31, 190, 76, 233, 118, 188, 112, 98, 214, 61, 149, 74, 1, 62, 152, 21, 141, 189, 175, 188, 97, 188, 137, 238, 4, 190, 28, 47, 77, 61, 93, 253, 31, 190, 99, 179, 19, 190, 237, 199, 185, 61, 163, 25, 199, 61, 214, 127, 29, 62, 148, 228, 6, 190, 42, 51, 106, 189, 72, 74, 225, 188, 125, 177, 243, 189, 63, 247, 47, 62, 38, 122, 18, 189, 249, 218, 170, 59, 232, 202, 68, 189, 65, 125, 184, 60, 148, 155, 26, 190, 53, 149, 12, 190, 69, 202, 222, 189, 249, 154, 229, 189, 103, 109, 49, 62, 40, 195, 181, 189, 111, 108, 172, 58, 102, 137, 40, 190, 174, 111, 189, 187, 29, 114, 130, 61, 89, 20, 81, 189, 93, 18, 40, 62, 236, 3, 28, 62, 16, 38, 193, 189, 114, 42, 211, 189, 66, 88, 52, 190, 153, 78, 133, 189, 63, 245, 195, 189, 69, 211, 52, 62, 170, 68, 30, 190, 255, 111, 207, 189, 13, 108, 140, 189, 125, 30, 254, 60, 152, 5, 62, 190, 196, 176, 11, 61, 124, 42, 33, 61, 193, 209, 5, 62, 11, 138, 136, 190, 221, 164, 193, 189, 170, 125, 12, 62, 160, 131, 110, 62, 20, 252, 122, 61, 111, 80, 70, 61, 33, 40, 237, 188, 17, 184, 46, 62, 38, 241, 214, 61, 79, 218, 179, 62, 43, 189, 4, 62, 146, 9, 17, 190, 11, 64, 69, 62, 46, 78, 174, 190, 158, 92, 57, 61, 212, 16, 58, 190, 59, 100, 98, 190, 153, 180, 5, 62, 98, 4, 135, 62, 210, 3, 58, 189, 252, 15, 227, 188, 103, 25, 227, 189, 171, 89, 87, 190, 19, 240, 160, 188, 87, 194, 163, 61, 200, 125, 35, 61, 227, 111, 34, 62, 139, 16, 115, 189, 200, 28, 19, 62, 215, 250, 79, 188, 198, 97, 33, 190, 17, 183, 135, 188, 146, 120, 189, 189, 235, 136, 226, 60, 94, 248, 37, 190, 61, 227, 216, 61, 154, 73, 194, 187, 170, 78, 167, 189, 124, 51, 6, 62, 55, 3, 229, 189, 72, 251, 178, 189, 141, 53, 17, 190, 200, 45, 235, 188, 193, 162, 21, 190, 28, 234, 24, 62, 221, 100, 14, 60, 226, 14, 7, 62, 232, 148, 88, 188, 217, 72, 32, 190, 58, 214, 38, 190, 96, 216, 71, 189, 151, 178, 44, 61, 56, 215, 204, 189, 214, 96, 196, 189, 26, 169, 113, 189, 151, 32, 146, 188, 41, 237, 231, 61, 55, 44, 151, 62, 216, 248, 66, 189, 234, 175, 13, 190, 206, 91, 21, 62, 207, 245, 224, 189, 133, 2, 39, 61, 216, 126, 46, 61, 74, 235, 239, 189, 174, 176, 9, 190, 188, 35, 233, 189, 182, 1, 67, 60, 126, 237, 128, 62, 99, 7, 230, 61, 27, 57, 24, 190, 174, 203, 57, 62, 51, 2, 133, 62, 93, 39, 46, 189, 57, 96, 180, 62, 243, 97, 131, 188, 92, 155, 31, 62, 231, 131, 216, 190, 103, 114, 26, 190, 255, 16, 247, 186, 24, 142, 230, 187, 205, 74, 209, 60, 197, 235, 42, 60, 134, 148, 238, 188, 232, 110, 238, 61, 130, 80, 50, 188, 67, 160, 64, 190, 49, 116, 248, 189, 150, 4, 239, 189, 184, 188, 51, 62, 249, 27, 117, 191, 179, 114, 13, 62, 247, 80, 19, 191, 70, 236, 20, 190, 6, 85, 176, 62, 73, 133, 41, 188, 228, 32, 156, 190, 40, 180, 6, 62, 113, 106, 48, 189, 248, 97, 166, 62, 223, 4, 206, 61, 110, 226, 50, 62, 50, 38, 15, 191, 246, 130, 194, 61, 36, 67, 88, 62, 201, 56, 130, 61, 237, 211, 68, 62, 136, 185, 181, 62, 58, 103, 19, 56, 73, 93, 37, 191, 154, 136, 64, 190, 3, 206, 136, 191, 71, 235, 53, 62, 144, 186, 155, 59, 141, 168, 56, 62, 168, 126, 194, 190, 18, 122, 253, 61, 120, 153, 79, 189, 137, 98, 98, 189, 123, 20, 65, 190, 220, 124, 155, 189, 125, 98, 83, 189, 190, 201, 35, 190, 36, 16, 100, 190, 30, 240, 11, 62, 117, 221, 28, 62, 102, 104, 168, 61, 95, 243, 173, 189, 191, 79, 172, 189, 110, 50, 129, 61, 244, 78, 153, 61, 153, 231, 216, 188, 67, 122, 33, 190, 43, 29, 193, 189, 248, 27, 38, 61, 177, 88, 44, 187, 164, 137, 227, 61, 70, 162, 121, 188, 33, 58, 189, 189, 39, 131, 234, 189, 249, 241, 13, 190, 58, 69, 252, 61, 111, 48, 171, 189, 80, 48, 202, 61, 192, 211, 145, 61, 89, 58, 152, 189, 1, 14, 145, 60, 223, 86, 22, 62, 216, 12, 17, 189, 1, 211, 117, 190, 228, 70, 102, 189, 145, 123, 6, 190, 231, 92, 167, 189, 96, 48, 172, 61, 36, 122, 157, 189, 23, 32, 215, 189, 88, 225, 18, 190, 44, 154, 250, 61, 83, 146, 43, 189, 95, 239, 163, 189, 111, 15, 142, 189, 126, 59, 34, 190, 231, 23, 253, 189, 234, 243, 213, 61, 219, 129, 136, 61, 210, 174, 33, 190, 4, 135, 103, 61, 235, 194, 177, 60, 146, 93, 41, 190, 83, 54, 50, 190, 206, 44, 133, 189, 99, 130, 149, 189, 149, 200, 254, 189, 25, 92, 186, 60, 211, 233, 26, 62, 115, 226, 24, 190, 72, 161, 14, 190, 245, 207, 248, 189, 158, 79, 242, 189, 166, 21, 27, 190, 141, 254, 43, 62, 60, 219, 41, 190, 109, 254, 202, 189, 157, 180, 134, 61, 200, 31, 13, 62, 103, 128, 235, 58, 107, 181, 143, 191, 91, 114, 95, 62, 24, 19, 25, 190, 101, 147, 168, 189, 19, 249, 3, 62, 169, 244, 245, 190, 94, 177, 2, 191, 150, 165, 111, 62, 132, 58, 194, 190, 71, 178, 106, 189, 11, 182, 160, 62, 179, 91, 77, 62, 166, 88, 57, 190, 111, 235, 129, 60, 64, 211, 201, 62, 104, 240, 134, 190, 182, 78, 143, 62, 52, 236, 207, 62, 177, 20, 121, 62, 212, 232, 22, 191, 167, 47, 118, 62, 123, 241, 172, 191, 71, 208, 142, 62, 225, 81, 200, 190, 187, 99, 48, 62, 69, 97, 34, 190, 7, 68, 196, 61, 22, 236, 158, 61, 93, 17, 37, 190, 5, 124, 8, 190, 234, 79, 246, 61, 227, 218, 0, 62, 58, 242, 4, 189, 0, 27, 122, 62, 6, 107, 213, 60, 173, 159, 238, 60, 83, 86, 138, 61, 69, 14, 192, 60, 182, 217, 121, 190, 177, 88, 80, 189, 124, 1, 154, 61, 1, 108, 71, 62, 138, 217, 165, 60, 124, 244, 46, 189, 44, 145, 36, 62, 149, 144, 125, 62, 233, 192, 149, 188, 62, 206, 5, 62, 11, 242, 5, 60, 222, 217, 135, 190, 41, 210, 51, 62, 102, 73, 128, 190, 141, 152, 27, 62, 172, 203, 51, 189, 25, 254, 30, 62, 155, 52, 166, 189, 125, 136, 148, 62, 164, 26, 46, 190, 233, 98, 198, 188, 41, 208, 73, 61, 25, 157, 243, 189, 94, 11, 158, 189, 234, 99, 23, 190, 157, 50, 0, 62, 25, 39, 69, 191, 80, 192, 47, 60, 28, 188, 144, 190, 100, 65, 174, 190, 29, 228, 1, 189, 105, 230, 149, 190, 31, 47, 234, 190, 254, 252, 68, 189, 137, 134, 133, 189, 141, 80, 191, 188, 186, 172, 209, 189, 96, 2, 64, 62, 240, 16, 163, 60, 228, 169, 53, 62, 4, 88, 159, 62, 213, 216, 140, 61, 207, 169, 82, 62, 149, 211, 184, 62, 117, 201, 145, 188, 226, 253, 225, 190, 56, 140, 177, 61, 67, 190, 167, 191, 87, 118, 105, 62, 164, 151, 26, 62, 64, 141, 29, 62, 31, 89, 70, 189, 74, 30, 22, 62, 95, 129, 40, 62, 71, 219, 134, 189, 28, 144, 58, 190, 205, 120, 228, 61, 102, 162, 116, 190, 130, 238, 32, 63, 229, 112, 150, 62, 124, 172, 107, 191, 235, 81, 41, 191, 239, 119, 4, 191, 99, 115, 242, 61, 133, 121, 21, 62, 62, 185, 140, 62, 215, 70, 118, 61, 169, 33, 247, 188, 125, 210, 49, 191, 103, 253, 10, 191, 196, 179, 229, 189, 207, 37, 81, 62, 64, 33, 219, 190, 38, 110, 17, 190, 2, 22, 141, 62, 229, 37, 116, 191, 249, 17, 114, 188, 238, 49, 131, 62, 195, 183, 139, 62, 21, 25, 53, 62, 26, 70, 179, 190, 37, 9, 236, 190, 34, 178, 199, 61, 102, 253, 185, 62, 182, 217, 84, 189, 21, 88, 241, 61, 53, 106, 33, 62, 45, 211, 16, 191, 228, 185, 135, 189, 220, 93, 14, 61, 67, 202, 196, 188, 63, 222, 101, 190, 175, 219, 178, 190, 232, 167, 84, 190, 0, 44, 60, 62, 213, 23, 134, 61, 229, 254, 170, 190, 121, 185, 50, 190, 96, 181, 133, 61, 14, 176, 149, 62, 126, 129, 223, 61, 14, 89, 195, 61, 148, 193, 151, 190, 219, 118, 40, 62, 27, 81, 218, 61, 169, 111, 74, 61, 20, 158, 54, 62, 39, 169, 75, 62, 81, 239, 144, 61, 153, 222, 206, 190, 136, 149, 74, 190, 170, 226, 76, 59, 58, 47, 65, 61, 225, 42, 94, 62, 132, 96, 229, 60, 125, 254, 147, 190, 110, 74, 102, 62, 101, 106, 4, 190, 192, 145, 33, 190, 250, 247, 118, 61, 171, 88, 10, 62, 72, 104, 121, 62, 214, 38, 226, 189, 47, 123, 144, 190, 188, 118, 66, 62, 93, 86, 73, 62, 218, 110, 35, 190, 78, 174, 32, 190, 255, 181, 210, 62, 1, 182, 227, 190, 187, 208, 2, 188, 154, 157, 128, 62, 203, 60, 164, 61, 22, 232, 200, 61, 226, 163, 233, 189, 67, 36, 135, 190, 30, 216, 90, 61, 171, 52, 151, 62, 159, 95, 31, 62, 75, 219, 27, 62, 89, 182, 67, 62, 54, 184, 4, 62, 15, 181, 181, 190, 190, 161, 4, 190, 45, 226, 203, 189, 205, 43, 92, 61, 163, 240, 6, 190, 254, 165, 239, 60, 75, 34, 130, 61, 158, 233, 165, 190, 30, 5, 90, 62, 115, 1, 75, 61, 148, 126, 223, 189, 25, 93, 126, 62, 104, 92, 130, 190, 131, 64, 30, 189, 186, 84, 225, 190, 84, 117, 45, 61, 145, 81, 216, 61, 180, 84, 139, 60, 210, 149, 255, 190, 126, 29, 220, 189, 215, 31, 101, 188, 58, 85, 151, 62, 138, 147, 245, 61, 205, 145, 49, 190, 138, 121, 244, 190, 83, 221, 186, 62, 137, 64, 86, 62, 217, 55, 168, 61, 63, 245, 161, 62, 252, 43, 188, 62, 188, 90, 87, 62, 247, 156, 56, 191, 181, 80, 163, 190, 160, 103, 115, 190, 49, 165, 78, 61, 188, 244, 202, 59, 188, 114, 188, 188, 76, 172, 205, 190, 105, 159, 186, 61, 35, 103, 79, 190, 9, 21, 129, 190, 153, 146, 210, 61, 40, 220, 159, 186, 100, 150, 146, 190, 163, 47, 85, 190, 80, 116, 234, 61, 227, 73, 20, 191, 190, 113, 132, 62, 213, 233, 62, 190, 130, 218, 200, 188, 119, 166, 15, 188, 93, 191, 12, 63, 4, 26, 172, 187, 16, 233, 61, 190, 228, 224, 110, 190, 81, 77, 155, 189, 173, 102, 203, 62, 137, 52, 96, 190, 153, 168, 135, 190, 237, 232, 21, 191, 115, 141, 5, 191, 124, 169, 63, 189, 93, 48, 112, 191, 9, 101, 172, 62, 26, 77, 71, 62, 17, 151, 186, 191, 18, 85, 151, 61, 72, 68, 44, 190, 238, 3, 22, 62, 100, 126, 126, 190, 208, 181, 5, 191, 149, 71, 139, 62, 107, 204, 23, 191, 78, 133, 196, 189, 0, 192, 5, 62, 16, 57, 152, 62, 190, 86, 130, 190, 158, 82, 200, 189, 10, 212, 150, 62, 22, 33, 242, 188, 147, 9, 216, 61, 75, 11, 59, 189, 70, 13, 164, 61, 181, 195, 5, 190, 111, 191, 99, 62, 105, 20, 33, 61, 181, 152, 49, 62, 233, 81, 16, 61, 239, 225, 92, 190, 93, 144, 99, 61, 22, 187, 112, 62, 86, 189, 12, 191, 85, 151, 66, 62, 113, 86, 150, 62, 220, 189, 117, 190, 227, 31, 115, 190, 103, 1, 79, 190, 123, 186, 18, 189, 169, 209, 136, 62, 17, 57, 191, 62, 68, 129, 11, 190, 219, 158, 84, 190, 213, 210, 173, 62, 45, 245, 206, 61, 9, 240, 229, 189, 152, 192, 173, 190, 124, 83, 130, 189, 219, 177, 228, 188, 219, 227, 6, 189, 185, 39, 50, 62, 137, 205, 39, 190, 246, 11, 146, 60, 127, 66, 51, 62, 54, 140, 134, 189, 122, 119, 198, 188, 180, 189, 229, 61, 39, 36, 247, 189, 250, 159, 36, 62, 206, 153, 23, 62, 123, 225, 146, 189, 11, 178, 245, 189, 43, 178, 143, 59, 34, 223, 39, 62, 198, 195, 75, 61, 253, 59, 83, 189, 74, 232, 36, 62, 105, 114, 41, 190, 57, 83, 196, 189, 2, 81, 244, 187, 2, 204, 29, 190, 143, 96, 31, 190, 55, 217, 143, 61, 120, 40, 129, 188, 84, 15, 50, 190, 186, 60, 35, 189, 54, 216, 52, 190, 0, 48, 12, 190, 177, 113, 130, 60, 84, 249, 13, 62, 129, 59, 150, 190, 255, 247, 202, 62, 119, 172, 15, 61, 87, 242, 148, 189, 193, 155, 198, 188, 39, 35, 25, 190, 94, 82, 45, 62, 167, 119, 168, 62, 20, 231, 29, 61, 105, 49, 40, 188, 32, 173, 96, 190, 130, 85, 204, 190, 228, 145, 57, 61, 117, 131, 162, 62, 186, 95, 101, 190, 14, 157, 101, 190, 140, 201, 52, 190, 232, 44, 30, 62, 91, 4, 218, 190, 140, 142, 176, 61, 46, 55, 147, 62, 166, 160, 145, 61, 70, 57, 54, 62, 253, 194, 255, 60, 149, 26, 181, 190, 213, 24, 95, 61, 167, 71, 9, 62, 7, 31, 187, 189, 47, 227, 42, 62, 134, 236, 214, 61, 45, 95, 156, 190, 228, 186, 29, 61, 192, 177, 232, 190, 163, 220, 67, 191, 32, 55, 231, 61, 2, 57, 105, 188, 229, 242, 188, 189, 143, 101, 96, 62, 213, 160, 162, 190, 188, 229, 75, 190, 77, 68, 198, 62, 98, 237, 255, 190, 176, 146, 87, 61, 85, 104, 115, 189, 182, 244, 184, 61, 116, 155, 157, 62, 211, 80, 172, 61, 30, 77, 174, 190, 212, 8, 159, 190, 136, 225, 83, 189, 73, 112, 131, 189, 150, 130, 165, 190, 245, 44, 36, 62, 142, 141, 144, 62, 252, 167, 162, 191, 170, 124, 125, 62, 153, 127, 139, 189, 206, 160, 142, 60, 171, 14, 94, 190, 136, 143, 8, 191, 221, 70, 0, 62, 59, 64, 228, 189, 177, 32, 21, 190, 105, 180, 51, 62, 223, 189, 17, 62, 12, 166, 80, 61, 247, 177, 114, 62, 194, 73, 25, 60, 242, 106, 61, 191, 240, 154, 7, 189, 237, 87, 46, 188, 137, 97, 175, 62, 214, 154, 35, 62, 237, 174, 138, 62, 176, 226, 84, 61, 203, 144, 7, 190, 27, 253, 32, 61, 138, 46, 200, 61, 69, 71, 228, 61, 171, 51, 139, 190, 123, 111, 177, 61, 129, 158, 26, 189, 206, 199, 121, 191, 55, 240, 201, 189, 40, 200, 8, 63, 170, 196, 207, 62, 103, 211, 148, 190, 67, 162, 194, 60, 53, 140, 245, 61, 13, 143, 42, 60, 11, 175, 3, 62, 82, 57, 79, 61, 67, 160, 144, 61, 93, 18, 152, 187, 92, 56, 191, 189, 33, 134, 220, 189, 97, 213, 160, 62, 135, 15, 102, 191, 245, 55, 98, 189, 8, 214, 52, 189, 164, 0, 102, 190, 31, 158, 38, 190, 149, 46, 17, 61, 89, 25, 102, 190, 61, 17, 19, 190, 97, 47, 158, 188, 179, 232, 221, 60, 241, 93, 128, 190, 18, 215, 140, 61, 106, 211, 131, 62, 94, 57, 186, 190, 31, 37, 183, 189, 222, 185, 127, 189, 150, 152, 136, 189, 56, 61, 163, 190, 4, 255, 106, 190, 176, 146, 59, 62, 179, 239, 143, 62, 142, 11, 39, 191, 245, 40, 213, 189, 131, 105, 6, 190, 63, 110, 216, 61, 97, 175, 148, 190, 70, 99, 155, 62, 110, 247, 85, 61, 83, 228, 35, 61, 207, 118, 216, 189, 151, 103, 66, 60, 20, 249, 128, 189, 158, 14, 238, 61, 61, 57, 141, 189, 90, 185, 132, 190, 65, 229, 137, 189, 11, 254, 174, 61, 116, 182, 248, 61, 122, 107, 71, 62, 35, 14, 128, 190, 55, 10, 4, 62, 189, 169, 124, 62, 252, 9, 81, 58, 82, 212, 92, 189, 206, 196, 58, 60, 141, 203, 165, 189, 39, 12, 221, 188, 28, 153, 206, 61, 123, 150, 167, 61, 169, 94, 185, 61, 48, 12, 131, 62, 110, 162, 146, 62, 227, 97, 109, 189, 196, 216, 208, 61, 73, 79, 168, 189, 151, 83, 40, 61, 75, 3, 105, 61, 131, 217, 152, 62, 168, 50, 21, 60, 110, 208, 193, 61, 63, 164, 189, 189, 233, 4, 100, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {150, 54, 19, 189, 17, 49, 1, 62, 255, 45, 197, 189, 222, 199, 70, 189, 95, 13, 55, 62, 112, 65, 20, 60, 194, 9, 58, 61, 135, 150, 250, 189, 68, 127, 92, 61, 26, 115, 47, 62, 251, 97, 46, 190, 46, 12, 146, 62, 95, 224, 166, 189, 72, 106, 204, 60, 197, 105, 15, 62, 78, 30, 53, 190, 70, 235, 198, 189, 198, 254, 111, 61, 230, 109, 59, 61, 245, 49, 236, 61, 11, 230, 163, 62, 128, 66, 163, 59, 110, 51, 178, 190, 15, 62, 39, 62, 105, 219, 117, 62, 198, 75, 34, 190, 100, 94, 47, 190, 66, 128, 190, 61, 222, 221, 33, 58, 203, 103, 83, 62, 30, 121, 140, 189, 19, 159, 133, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 133, 78, 190, 34, 126, 56, 62, 253, 155, 121, 62, 235, 81, 169, 62, 16, 21, 105, 189, 15, 132, 113, 189, 221, 21, 170, 189, 15, 26, 169, 62, 76, 99, 173, 189, 200, 132, 181, 59, 123, 163, 167, 188, 165, 207, 146, 188, 197, 72, 1, 189, 111, 14, 11, 61, 35, 247, 55, 63, 15, 21, 236, 61, 195, 148, 140, 61, 81, 106, 92, 63, 14, 115, 16, 185, 185, 119, 9, 63, 55, 215, 136, 191, 235, 75, 55, 62, 110, 113, 154, 190, 219, 83, 206, 62, 8, 190, 150, 63, 23, 143, 4, 63, 76, 203, 42, 189, 163, 76, 191, 190, 86, 72, 9, 63, 214, 11, 180, 190, 10, 134, 230, 190, 244, 103, 54, 190, 7, 171, 184, 189, 219, 127, 183, 190, 235, 202, 167, 62, 27, 155, 82, 62, 119, 0, 189, 190, 135, 92, 35, 190, 7, 117, 13, 62, 103, 80, 171, 190, 91, 40, 38, 190, 182, 61, 94, 190, 135, 187, 208, 59, 41, 221, 124, 190, 124, 218, 222, 187, 245, 251, 130, 188, 32, 171, 159, 62, 243, 115, 107, 61, 57, 224, 250, 61, 59, 57, 173, 62, 50, 237, 119, 190, 150, 209, 226, 60, 235, 32, 149, 62, 134, 47, 151, 61, 166, 175, 184, 62, 240, 28, 15, 63, 34, 146, 1, 60, 227, 209, 223, 60, 113, 86, 32, 189, 34, 198, 82, 62, 19, 82, 63, 189, 55, 218, 150, 189, 1, 6, 52, 62, 4, 133, 253, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 58, 245, 189, 214, 7, 7, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {84, 128, 63, 191, 73, 183, 185, 190, 248, 230, 28, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {207, 243, 45, 64, 62, 227, 221, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0011/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}