// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 135, 185, 61, 36, 214, 255, 190, 102, 215, 143, 59, 160, 195, 230, 62, 42, 122, 156, 61, 180, 60, 212, 190, 150, 185, 210, 190, 16, 73, 212, 191, 207, 243, 168, 190, 41, 13, 159, 190, 58, 167, 194, 61, 200, 90, 191, 189, 113, 145, 121, 62, 106, 144, 161, 63, 210, 29, 238, 62, 103, 230, 45, 190, 67, 183, 181, 191, 116, 225, 177, 190, 85, 179, 154, 190, 108, 140, 131, 190, 239, 77, 235, 62, 57, 216, 217, 190, 77, 19, 152, 62, 195, 170, 240, 190, 254, 140, 110, 63, 157, 28, 77, 63, 233, 26, 209, 62, 225, 43, 22, 191, 253, 107, 178, 190, 137, 158, 173, 190, 95, 52, 149, 188, 253, 166, 165, 62, 206, 225, 124, 190, 4, 239, 183, 62, 236, 49, 77, 191, 218, 196, 32, 62, 101, 5, 149, 190, 1, 171, 213, 190, 199, 241, 253, 62, 125, 33, 83, 190, 112, 202, 207, 62, 32, 31, 47, 63, 26, 242, 100, 62, 45, 50, 185, 63, 104, 2, 130, 62, 217, 59, 254, 190, 97, 98, 1, 191, 99, 34, 216, 62, 137, 64, 46, 63, 143, 230, 177, 191, 13, 81, 171, 190, 221, 30, 214, 62, 216, 203, 102, 191, 21, 62, 128, 62, 185, 60, 99, 63, 46, 219, 182, 190, 133, 61, 94, 61, 70, 231, 27, 63, 81, 65, 136, 191, 133, 200, 188, 190, 208, 186, 37, 62, 76, 24, 134, 191, 68, 145, 158, 189, 136, 206, 38, 63, 221, 156, 160, 63, 251, 213, 101, 62, 116, 163, 72, 62, 181, 100, 108, 63, 185, 146, 106, 62, 146, 159, 37, 191, 191, 237, 221, 191, 117, 196, 8, 191, 123, 116, 60, 191, 36, 211, 43, 63, 67, 236, 12, 63, 138, 130, 58, 63, 83, 234, 209, 190, 75, 158, 119, 190, 59, 38, 85, 62, 107, 237, 185, 190, 24, 25, 233, 189, 210, 102, 53, 63, 174, 59, 93, 62, 236, 222, 33, 63, 254, 83, 156, 62, 102, 70, 163, 190, 195, 150, 3, 191, 18, 37, 160, 187, 137, 53, 18, 63, 217, 54, 7, 62, 32, 84, 246, 189, 102, 106, 201, 189, 247, 97, 207, 62, 188, 56, 99, 62, 89, 53, 172, 191, 5, 211, 148, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 198, 19, 191, 232, 109, 41, 191, 169, 37, 79, 190, 131, 110, 22, 63, 45, 188, 87, 190, 104, 51, 156, 189, 52, 118, 113, 190, 69, 174, 139, 62, 245, 3, 82, 191, 151, 6, 26, 190, 249, 221, 192, 62, 234, 84, 112, 62, 36, 43, 138, 188, 228, 192, 185, 62, 91, 16, 120, 62, 138, 41, 18, 63, 252, 173, 247, 188, 250, 192, 157, 188, 86, 79, 130, 190, 231, 156, 208, 190, 129, 241, 3, 63, 172, 207, 189, 190, 212, 143, 42, 63, 215, 181, 202, 61, 173, 214, 15, 63, 61, 146, 58, 191, 31, 142, 195, 62, 225, 94, 219, 190, 222, 246, 102, 190, 30, 167, 173, 62, 118, 19, 128, 191, 18, 26, 173, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 206, 224, 61, 147, 180, 253, 189, 163, 160, 149, 62, 64, 38, 187, 60, 82, 61, 60, 190, 119, 140, 236, 61, 163, 83, 109, 188, 34, 169, 45, 62, 152, 193, 92, 62, 90, 54, 151, 190, 73, 253, 53, 190, 224, 127, 252, 188, 67, 164, 35, 189, 166, 40, 24, 62, 223, 102, 133, 62, 56, 96, 55, 62, 50, 220, 85, 62, 68, 166, 99, 62, 172, 36, 200, 61, 66, 137, 3, 190, 32, 15, 171, 62, 92, 4, 135, 62, 2, 207, 38, 62, 250, 90, 20, 62, 120, 249, 14, 189, 49, 251, 132, 190, 135, 108, 22, 62, 208, 112, 6, 62, 12, 47, 2, 62, 224, 85, 116, 61, 152, 228, 64, 61, 240, 194, 62, 62, 228, 191, 120, 61, 50, 231, 94, 189, 186, 0, 243, 189, 24, 61, 162, 61, 104, 235, 22, 191, 245, 141, 132, 189, 114, 204, 137, 189, 135, 230, 13, 187, 62, 45, 16, 191, 186, 49, 78, 190, 88, 111, 8, 190, 243, 208, 251, 62, 182, 234, 254, 61, 197, 60, 48, 190, 56, 47, 21, 191, 140, 213, 12, 62, 128, 206, 12, 187, 194, 203, 203, 62, 79, 168, 139, 62, 98, 140, 216, 189, 72, 52, 50, 62, 210, 89, 99, 191, 5, 42, 53, 190, 211, 177, 127, 189, 139, 2, 105, 190, 172, 168, 227, 62, 181, 212, 200, 189, 24, 170, 87, 189, 12, 182, 112, 60, 82, 244, 129, 190, 185, 178, 152, 190, 188, 227, 148, 62, 181, 243, 135, 60, 175, 147, 150, 187, 144, 44, 145, 61, 170, 74, 3, 62, 112, 24, 159, 61, 103, 241, 77, 190, 84, 69, 34, 190, 108, 70, 71, 62, 131, 171, 219, 190, 165, 209, 39, 189, 136, 138, 148, 61, 113, 144, 167, 62, 254, 137, 21, 190, 48, 91, 252, 190, 223, 52, 62, 191, 13, 128, 31, 63, 3, 51, 242, 189, 76, 226, 141, 62, 102, 235, 216, 62, 242, 22, 209, 189, 20, 172, 221, 61, 191, 199, 102, 191, 111, 80, 90, 190, 77, 232, 62, 62, 9, 202, 17, 190, 189, 199, 197, 62, 173, 17, 185, 60, 156, 24, 205, 190, 144, 193, 79, 61, 198, 234, 57, 62, 250, 148, 237, 189, 147, 177, 198, 62, 147, 141, 24, 189, 234, 42, 61, 62, 169, 186, 246, 61, 73, 66, 143, 62, 176, 191, 41, 188, 97, 99, 29, 189, 82, 144, 180, 190, 238, 19, 80, 62, 39, 101, 116, 190, 238, 4, 48, 61, 207, 110, 71, 62, 3, 131, 131, 62, 52, 98, 86, 190, 71, 104, 24, 191, 74, 196, 55, 191, 180, 34, 86, 63, 74, 111, 40, 190, 222, 138, 209, 62, 21, 90, 5, 63, 171, 196, 99, 59, 228, 171, 157, 61, 25, 132, 64, 191, 4, 82, 248, 190, 246, 106, 159, 189, 35, 11, 113, 189, 83, 178, 183, 62, 232, 39, 31, 62, 210, 75, 250, 190, 121, 146, 54, 190, 157, 108, 55, 189, 5, 207, 101, 190, 200, 18, 35, 63, 174, 236, 32, 62, 253, 18, 197, 189, 156, 0, 131, 62, 46, 10, 23, 61, 208, 155, 144, 190, 126, 81, 152, 188, 152, 212, 149, 61, 30, 99, 139, 62, 84, 154, 131, 190, 56, 67, 15, 190, 82, 32, 226, 61, 121, 240, 151, 62, 235, 220, 55, 189, 153, 37, 238, 189, 103, 19, 39, 190, 141, 232, 234, 61, 53, 46, 37, 61, 69, 131, 129, 62, 215, 193, 64, 62, 25, 131, 91, 190, 220, 204, 51, 60, 96, 35, 149, 190, 216, 77, 132, 61, 224, 178, 206, 61, 73, 108, 4, 62, 250, 100, 23, 190, 56, 136, 152, 62, 217, 103, 145, 189, 172, 62, 198, 57, 16, 93, 128, 62, 242, 194, 242, 61, 108, 114, 133, 62, 129, 136, 219, 61, 84, 246, 19, 190, 190, 204, 101, 62, 236, 136, 112, 61, 200, 173, 151, 190, 128, 65, 94, 188, 3, 250, 54, 190, 65, 45, 180, 189, 153, 251, 122, 190, 88, 14, 61, 189, 13, 106, 209, 61, 220, 166, 164, 60, 100, 87, 115, 187, 246, 234, 17, 62, 129, 43, 235, 60, 180, 182, 140, 61, 109, 47, 249, 189, 67, 96, 6, 62, 59, 21, 93, 61, 146, 202, 163, 190, 133, 127, 138, 62, 39, 167, 30, 189, 251, 72, 45, 62, 81, 128, 29, 62, 42, 148, 193, 61, 238, 191, 174, 190, 108, 188, 103, 62, 254, 103, 230, 61, 66, 178, 71, 62, 18, 133, 62, 62, 204, 38, 220, 189, 231, 104, 148, 189, 71, 58, 32, 190, 73, 225, 27, 190, 107, 248, 20, 190, 124, 4, 54, 190, 6, 234, 165, 188, 37, 27, 31, 61, 85, 71, 71, 189, 87, 153, 9, 61, 167, 250, 94, 61, 102, 147, 163, 189, 110, 8, 227, 61, 212, 139, 66, 189, 168, 250, 35, 190, 21, 46, 33, 190, 145, 141, 26, 190, 74, 116, 2, 190, 193, 251, 16, 61, 147, 126, 83, 61, 148, 217, 139, 189, 218, 165, 18, 189, 187, 130, 253, 189, 243, 222, 1, 62, 196, 60, 207, 188, 135, 81, 15, 190, 254, 3, 26, 62, 29, 7, 138, 61, 136, 88, 11, 190, 232, 194, 244, 61, 226, 41, 110, 61, 32, 53, 67, 190, 147, 120, 7, 190, 187, 134, 65, 57, 250, 58, 35, 62, 54, 107, 150, 61, 160, 170, 185, 189, 82, 84, 31, 62, 121, 155, 14, 190, 23, 147, 179, 190, 100, 146, 89, 191, 35, 78, 126, 62, 232, 2, 59, 191, 128, 195, 196, 189, 115, 230, 15, 62, 255, 97, 228, 61, 118, 10, 111, 191, 33, 32, 6, 191, 39, 112, 160, 190, 105, 24, 8, 189, 0, 40, 1, 62, 134, 134, 140, 62, 70, 209, 213, 62, 48, 4, 39, 190, 70, 80, 80, 62, 229, 209, 37, 191, 229, 4, 233, 190, 215, 173, 58, 190, 51, 37, 103, 191, 172, 150, 57, 62, 99, 135, 62, 62, 49, 243, 18, 62, 47, 109, 170, 62, 242, 106, 182, 189, 212, 72, 81, 59, 157, 241, 112, 62, 213, 119, 25, 190, 112, 173, 135, 190, 213, 37, 159, 61, 96, 216, 217, 61, 90, 197, 50, 190, 58, 56, 139, 61, 96, 168, 137, 189, 52, 132, 206, 61, 91, 125, 218, 189, 77, 227, 49, 61, 181, 39, 185, 60, 255, 235, 10, 62, 88, 92, 221, 189, 65, 139, 34, 62, 198, 16, 234, 61, 117, 118, 133, 187, 177, 28, 208, 61, 122, 138, 137, 61, 4, 77, 201, 189, 226, 15, 70, 190, 126, 232, 158, 61, 205, 83, 228, 61, 162, 149, 83, 62, 142, 82, 52, 62, 57, 139, 34, 62, 3, 195, 147, 190, 240, 165, 64, 62, 73, 46, 162, 61, 204, 78, 6, 62, 201, 133, 221, 61, 213, 52, 64, 190, 120, 2, 29, 189, 147, 243, 198, 188, 115, 244, 166, 60, 84, 0, 55, 190, 133, 73, 138, 62, 113, 13, 67, 190, 163, 145, 217, 61, 78, 137, 65, 62, 22, 144, 139, 62, 122, 135, 220, 190, 81, 32, 229, 189, 174, 69, 226, 61, 76, 130, 218, 60, 29, 141, 243, 61, 97, 228, 29, 62, 253, 81, 162, 189, 224, 18, 137, 62, 10, 98, 186, 188, 229, 248, 151, 61, 48, 19, 106, 61, 244, 96, 46, 189, 142, 43, 155, 61, 85, 98, 43, 191, 207, 185, 80, 190, 128, 16, 48, 190, 196, 60, 49, 60, 16, 94, 54, 188, 110, 178, 21, 62, 7, 165, 208, 189, 173, 81, 133, 61, 76, 211, 3, 190, 184, 134, 195, 60, 165, 140, 165, 189, 99, 179, 19, 190, 237, 199, 185, 61, 163, 25, 199, 61, 214, 127, 29, 62, 148, 228, 6, 190, 42, 51, 106, 189, 72, 74, 225, 188, 125, 177, 243, 189, 63, 247, 47, 62, 38, 122, 18, 189, 249, 218, 170, 59, 232, 202, 68, 189, 65, 125, 184, 60, 148, 155, 26, 190, 53, 149, 12, 190, 69, 202, 222, 189, 249, 154, 229, 189, 103, 109, 49, 62, 40, 195, 181, 189, 111, 108, 172, 58, 102, 137, 40, 190, 174, 111, 189, 187, 29, 114, 130, 61, 89, 20, 81, 189, 93, 18, 40, 62, 236, 3, 28, 62, 16, 38, 193, 189, 114, 42, 211, 189, 66, 88, 52, 190, 153, 78, 133, 189, 63, 245, 195, 189, 69, 211, 52, 62, 170, 68, 30, 190, 183, 166, 72, 189, 57, 220, 166, 189, 230, 162, 194, 61, 215, 126, 36, 190, 32, 192, 66, 61, 212, 225, 32, 61, 59, 68, 101, 62, 161, 95, 175, 190, 56, 178, 142, 189, 152, 45, 78, 62, 140, 220, 82, 62, 221, 55, 137, 61, 228, 181, 99, 61, 134, 35, 20, 189, 241, 197, 102, 62, 199, 240, 52, 61, 189, 118, 170, 62, 100, 74, 191, 60, 74, 239, 31, 190, 215, 125, 37, 62, 253, 171, 194, 190, 195, 125, 68, 61, 10, 180, 60, 190, 103, 210, 57, 190, 167, 233, 21, 190, 167, 249, 115, 62, 126, 136, 102, 189, 157, 199, 172, 60, 201, 247, 128, 189, 251, 205, 115, 190, 119, 109, 198, 61, 87, 194, 163, 61, 70, 59, 83, 190, 248, 179, 41, 62, 138, 251, 68, 190, 105, 68, 227, 60, 105, 116, 249, 61, 244, 139, 242, 190, 135, 114, 245, 190, 240, 231, 136, 61, 167, 2, 163, 190, 48, 100, 198, 190, 7, 217, 78, 62, 182, 224, 59, 190, 255, 210, 53, 60, 160, 61, 228, 61, 86, 153, 183, 187, 155, 248, 4, 190, 170, 240, 232, 188, 207, 158, 104, 61, 122, 98, 36, 190, 253, 155, 64, 62, 123, 5, 9, 61, 86, 56, 236, 61, 65, 140, 249, 60, 85, 50, 157, 190, 86, 150, 12, 191, 221, 3, 91, 189, 207, 54, 46, 62, 66, 82, 126, 190, 202, 41, 15, 190, 244, 7, 191, 190, 203, 176, 59, 62, 41, 237, 231, 61, 117, 14, 135, 62, 121, 132, 241, 189, 48, 77, 80, 190, 89, 218, 200, 61, 121, 114, 56, 190, 72, 64, 69, 188, 165, 143, 250, 188, 176, 132, 8, 190, 182, 239, 63, 190, 66, 202, 52, 190, 72, 87, 42, 189, 0, 5, 70, 62, 7, 23, 91, 61, 49, 113, 87, 190, 129, 235, 9, 62, 151, 20, 254, 61, 114, 87, 176, 189, 201, 184, 173, 62, 170, 179, 28, 190, 243, 62, 157, 61, 189, 78, 226, 190, 165, 181, 101, 190, 63, 180, 138, 189, 245, 77, 132, 189, 135, 22, 64, 60, 243, 246, 135, 189, 71, 238, 143, 189, 142, 230, 66, 61, 62, 181, 123, 189, 200, 85, 112, 190, 81, 11, 41, 190, 150, 4, 239, 189, 15, 155, 178, 62, 48, 60, 150, 191, 122, 45, 226, 61, 182, 64, 21, 191, 216, 223, 18, 191, 191, 228, 148, 62, 212, 25, 10, 62, 140, 158, 52, 191, 86, 240, 4, 190, 57, 82, 139, 189, 4, 208, 148, 62, 150, 226, 178, 61, 119, 249, 20, 62, 252, 205, 43, 191, 137, 237, 0, 62, 63, 56, 117, 62, 148, 8, 173, 61, 188, 101, 74, 62, 33, 57, 225, 62, 18, 127, 228, 59, 93, 91, 88, 191, 161, 236, 109, 190, 135, 96, 203, 191, 219, 134, 97, 62, 138, 105, 121, 62, 209, 146, 61, 62, 13, 177, 193, 190, 139, 89, 22, 62, 185, 232, 212, 189, 63, 74, 24, 190, 77, 91, 0, 190, 220, 124, 155, 189, 125, 98, 83, 189, 190, 201, 35, 190, 225, 92, 105, 190, 57, 225, 4, 62, 117, 221, 28, 62, 67, 172, 130, 61, 95, 243, 173, 189, 210, 77, 184, 189, 110, 50, 129, 61, 244, 78, 153, 61, 251, 30, 62, 189, 6, 200, 51, 190, 25, 5, 211, 189, 34, 252, 22, 61, 74, 134, 124, 188, 164, 137, 227, 61, 137, 141, 15, 189, 170, 182, 221, 189, 39, 131, 234, 189, 157, 39, 19, 190, 87, 211, 244, 61, 89, 69, 180, 189, 80, 48, 202, 61, 30, 142, 128, 61, 89, 58, 152, 189, 140, 21, 186, 59, 124, 91, 13, 62, 216, 12, 17, 189, 8, 250, 125, 190, 49, 184, 155, 189, 111, 62, 43, 190, 231, 92, 167, 189, 96, 48, 172, 61, 36, 122, 157, 189, 23, 32, 215, 189, 88, 225, 18, 190, 44, 154, 250, 61, 83, 146, 43, 189, 95, 239, 163, 189, 111, 15, 142, 189, 126, 59, 34, 190, 231, 23, 253, 189, 234, 243, 213, 61, 219, 129, 136, 61, 210, 174, 33, 190, 4, 135, 103, 61, 235, 194, 177, 60, 146, 93, 41, 190, 83, 54, 50, 190, 206, 44, 133, 189, 99, 130, 149, 189, 149, 200, 254, 189, 25, 92, 186, 60, 211, 233, 26, 62, 115, 226, 24, 190, 72, 161, 14, 190, 245, 207, 248, 189, 158, 79, 242, 189, 166, 21, 27, 190, 141, 254, 43, 62, 60, 219, 41, 190, 109, 254, 202, 189, 157, 180, 134, 61, 200, 31, 13, 62, 32, 141, 148, 62, 39, 122, 148, 191, 117, 176, 129, 62, 131, 58, 171, 189, 40, 104, 191, 190, 76, 151, 254, 61, 231, 5, 185, 190, 165, 93, 21, 191, 145, 5, 7, 62, 239, 16, 165, 190, 218, 154, 170, 189, 91, 253, 161, 62, 120, 128, 71, 62, 196, 250, 35, 190, 253, 85, 242, 59, 31, 20, 243, 62, 12, 112, 129, 190, 2, 218, 154, 62, 234, 123, 3, 63, 93, 201, 128, 62, 195, 157, 26, 191, 64, 96, 131, 62, 183, 114, 241, 191, 74, 54, 158, 62, 172, 31, 242, 189, 70, 22, 87, 62, 104, 15, 10, 190, 167, 212, 67, 62, 33, 166, 179, 61, 24, 170, 37, 190, 72, 201, 20, 190, 234, 79, 246, 61, 109, 85, 104, 62, 189, 62, 231, 189, 216, 251, 153, 62, 14, 70, 10, 186, 176, 49, 87, 189, 137, 34, 99, 61, 6, 90, 253, 61, 54, 176, 195, 190, 243, 194, 21, 189, 11, 116, 4, 62, 22, 207, 249, 61, 231, 233, 161, 59, 48, 176, 65, 189, 119, 103, 16, 62, 70, 242, 144, 62, 243, 115, 9, 190, 232, 132, 151, 61, 234, 5, 3, 190, 75, 157, 191, 190, 54, 40, 177, 61, 187, 165, 141, 190, 121, 102, 22, 62, 83, 220, 213, 189, 97, 110, 56, 62, 118, 254, 175, 190, 227, 142, 136, 62, 31, 8, 76, 190, 110, 198, 81, 60, 131, 49, 163, 61, 86, 153, 44, 190, 180, 78, 0, 188, 234, 99, 23, 190, 217, 184, 254, 62, 163, 191, 128, 191, 145, 88, 127, 60, 186, 186, 83, 190, 233, 255, 6, 191, 163, 212, 84, 188, 225, 147, 22, 190, 67, 203, 253, 190, 146, 1, 179, 61, 96, 48, 70, 60, 130, 145, 107, 189, 94, 221, 150, 189, 131, 206, 60, 62, 172, 240, 35, 188, 221, 107, 46, 62, 190, 129, 205, 62, 107, 169, 157, 61, 117, 69, 87, 62, 146, 250, 3, 63, 210, 191, 171, 188, 198, 135, 0, 191, 208, 43, 143, 61, 202, 10, 196, 191, 41, 128, 129, 62, 145, 120, 21, 63, 139, 218, 54, 62, 197, 58, 155, 188, 41, 105, 137, 62, 57, 5, 8, 62, 95, 203, 210, 188, 11, 74, 44, 190, 205, 120, 228, 61, 4, 165, 201, 190, 93, 163, 65, 63, 188, 32, 133, 62, 253, 3, 191, 191, 137, 123, 7, 191, 85, 185, 60, 191, 26, 39, 146, 61, 132, 96, 242, 62, 31, 34, 116, 62, 6, 13, 9, 61, 76, 213, 152, 61, 37, 229, 60, 191, 238, 224, 190, 190, 147, 17, 35, 61, 119, 189, 139, 61, 168, 167, 153, 190, 196, 35, 127, 189, 36, 7, 202, 62, 136, 21, 90, 191, 35, 1, 231, 61, 38, 144, 199, 62, 127, 90, 186, 62, 205, 41, 134, 62, 126, 35, 9, 191, 191, 162, 88, 191, 128, 253, 41, 62, 10, 156, 254, 62, 45, 9, 96, 188, 69, 112, 49, 62, 53, 106, 33, 62, 85, 138, 51, 191, 228, 185, 135, 189, 68, 92, 80, 190, 98, 44, 138, 190, 104, 11, 143, 190, 151, 1, 217, 190, 137, 116, 16, 191, 25, 114, 156, 61, 137, 55, 31, 190, 144, 139, 2, 191, 80, 63, 193, 190, 90, 31, 138, 188, 74, 181, 178, 62, 74, 100, 23, 61, 226, 27, 168, 60, 250, 197, 209, 190, 103, 237, 240, 61, 58, 253, 212, 61, 138, 235, 238, 61, 69, 24, 142, 62, 222, 169, 60, 62, 125, 243, 246, 61, 246, 185, 18, 191, 61, 133, 114, 190, 156, 108, 142, 190, 248, 187, 83, 60, 1, 200, 155, 62, 220, 63, 54, 61, 254, 217, 157, 190, 25, 179, 30, 62, 209, 77, 28, 190, 1, 22, 156, 190, 159, 119, 207, 61, 171, 88, 10, 62, 150, 72, 227, 61, 78, 243, 134, 189, 100, 231, 9, 191, 212, 1, 42, 62, 248, 139, 133, 62, 247, 185, 204, 189, 150, 104, 231, 190, 186, 40, 18, 63, 245, 68, 112, 191, 175, 32, 145, 190, 96, 84, 215, 62, 170, 26, 39, 62, 57, 171, 32, 62, 255, 243, 97, 190, 234, 247, 8, 190, 200, 108, 17, 188, 193, 209, 247, 62, 97, 219, 65, 62, 213, 105, 133, 62, 203, 121, 162, 62, 135, 168, 201, 62, 106, 75, 194, 190, 68, 246, 106, 189, 212, 163, 178, 189, 123, 92, 45, 189, 212, 112, 44, 190, 137, 68, 197, 61, 26, 152, 223, 189, 146, 42, 167, 190, 131, 189, 102, 62, 244, 70, 113, 62, 148, 126, 223, 189, 255, 253, 153, 62, 166, 203, 121, 190, 245, 228, 102, 189, 158, 58, 5, 191, 140, 180, 239, 188, 35, 179, 66, 188, 0, 165, 31, 61, 221, 128, 83, 191, 84, 253, 245, 189, 108, 254, 145, 189, 74, 59, 163, 62, 91, 198, 115, 61, 138, 68, 109, 190, 124, 47, 19, 191, 6, 196, 236, 62, 58, 93, 20, 62, 40, 24, 30, 62, 5, 131, 177, 62, 84, 21, 150, 62, 152, 202, 87, 62, 143, 228, 90, 191, 230, 161, 190, 190, 244, 245, 104, 190, 248, 198, 214, 61, 189, 177, 129, 62, 214, 60, 69, 189, 47, 245, 211, 190, 125, 180, 10, 61, 151, 245, 111, 190, 188, 185, 227, 190, 220, 80, 35, 62, 40, 220, 159, 186, 92, 246, 90, 188, 249, 120, 164, 190, 249, 119, 107, 189, 63, 201, 30, 191, 239, 31, 16, 63, 135, 63, 198, 189, 43, 111, 69, 190, 134, 197, 22, 62, 0, 71, 42, 63, 214, 50, 80, 189, 95, 106, 143, 190, 139, 57, 243, 189, 18, 203, 20, 190, 103, 112, 177, 62, 181, 128, 241, 190, 36, 216, 166, 190, 199, 233, 111, 191, 178, 135, 50, 191, 252, 131, 64, 62, 224, 145, 148, 191, 155, 199, 205, 62, 240, 187, 1, 62, 159, 124, 200, 191, 196, 198, 222, 189, 200, 84, 195, 61, 105, 123, 89, 62, 7, 216, 89, 190, 221, 60, 3, 191, 107, 67, 40, 62, 237, 113, 34, 191, 122, 213, 108, 62, 0, 192, 5, 62, 135, 55, 193, 62, 14, 59, 116, 190, 61, 120, 28, 190, 252, 6, 208, 62, 140, 199, 223, 188, 121, 174, 137, 61, 41, 240, 238, 188, 179, 240, 195, 62, 70, 123, 62, 190, 199, 231, 75, 62, 33, 37, 4, 62, 48, 26, 29, 62, 86, 43, 101, 61, 77, 185, 36, 190, 89, 48, 151, 187, 112, 60, 134, 62, 90, 150, 159, 190, 235, 28, 205, 62, 150, 69, 204, 62, 55, 43, 157, 190, 71, 236, 187, 61, 68, 177, 135, 190, 238, 179, 176, 188, 65, 38, 139, 62, 104, 87, 46, 63, 222, 155, 62, 190, 165, 178, 148, 189, 46, 13, 202, 62, 70, 253, 12, 61, 123, 63, 208, 189, 44, 53, 165, 190, 124, 83, 130, 189, 103, 25, 65, 190, 255, 165, 123, 189, 74, 105, 228, 61, 235, 27, 146, 190, 71, 72, 124, 61, 37, 28, 203, 61, 26, 44, 133, 190, 28, 159, 64, 190, 95, 163, 12, 190, 197, 73, 133, 190, 211, 119, 96, 62, 55, 170, 25, 62, 217, 136, 219, 189, 37, 163, 99, 190, 34, 224, 17, 60, 61, 224, 146, 62, 94, 156, 239, 61, 147, 89, 135, 61, 12, 205, 136, 62, 58, 191, 253, 189, 236, 154, 36, 190, 101, 9, 51, 189, 174, 105, 64, 190, 110, 139, 133, 190, 75, 67, 38, 189, 159, 90, 77, 61, 247, 23, 94, 190, 188, 188, 50, 190, 131, 203, 135, 190, 96, 190, 131, 190, 190, 79, 171, 61, 84, 249, 13, 62, 208, 150, 247, 190, 177, 177, 238, 62, 254, 115, 73, 61, 117, 71, 188, 190, 223, 113, 43, 61, 162, 117, 214, 190, 214, 123, 3, 62, 145, 198, 163, 62, 216, 140, 31, 61, 168, 65, 188, 188, 177, 11, 69, 190, 29, 215, 57, 191, 175, 31, 68, 61, 90, 50, 217, 62, 91, 118, 198, 190, 162, 140, 50, 190, 108, 70, 97, 190, 142, 26, 66, 62, 254, 7, 230, 190, 65, 65, 65, 62, 216, 143, 140, 62, 153, 49, 68, 62, 253, 242, 78, 62, 52, 47, 22, 190, 68, 48, 85, 191, 146, 17, 246, 61, 151, 245, 234, 61, 56, 55, 236, 189, 251, 32, 92, 62, 117, 127, 91, 189, 252, 170, 30, 191, 228, 186, 29, 61, 253, 105, 160, 190, 101, 231, 108, 191, 127, 207, 111, 62, 171, 203, 214, 188, 117, 223, 205, 189, 198, 152, 47, 62, 91, 217, 35, 191, 36, 180, 221, 189, 79, 37, 11, 63, 122, 183, 153, 190, 226, 244, 142, 61, 165, 116, 237, 189, 221, 206, 176, 61, 86, 91, 225, 62, 32, 158, 66, 60, 226, 82, 233, 190, 84, 203, 129, 190, 143, 14, 11, 62, 64, 119, 224, 61, 220, 185, 7, 191, 20, 159, 223, 62, 196, 254, 199, 62, 21, 90, 218, 191, 234, 207, 82, 62, 114, 205, 69, 190, 225, 176, 13, 62, 126, 73, 87, 190, 192, 151, 44, 191, 121, 16, 65, 62, 23, 228, 254, 189, 112, 246, 67, 190, 105, 180, 51, 62, 38, 87, 148, 61, 190, 132, 169, 190, 129, 38, 144, 62, 132, 51, 159, 188, 104, 96, 101, 191, 43, 24, 161, 60, 18, 165, 191, 61, 126, 11, 175, 62, 218, 235, 131, 62, 96, 242, 141, 62, 199, 251, 145, 61, 172, 139, 177, 189, 88, 170, 207, 61, 142, 107, 38, 62, 167, 94, 69, 62, 104, 223, 200, 190, 47, 40, 143, 61, 114, 204, 199, 189, 83, 67, 154, 191, 198, 99, 207, 189, 154, 77, 2, 63, 74, 24, 227, 62, 88, 84, 168, 190, 71, 16, 193, 61, 235, 151, 154, 190, 36, 160, 172, 186, 170, 135, 15, 62, 95, 98, 75, 61, 47, 181, 11, 62, 132, 56, 186, 60, 235, 185, 200, 189, 33, 134, 220, 189, 176, 43, 126, 62, 102, 174, 164, 191, 219, 108, 29, 61, 108, 5, 30, 190, 43, 100, 3, 190, 182, 111, 2, 191, 178, 107, 49, 62, 21, 45, 23, 190, 79, 20, 165, 189, 82, 114, 140, 61, 125, 2, 99, 61, 7, 103, 43, 191, 92, 216, 171, 61, 71, 240, 186, 62, 218, 167, 219, 190, 14, 161, 205, 189, 188, 240, 200, 189, 201, 184, 127, 188, 249, 31, 232, 190, 180, 42, 94, 190, 39, 53, 49, 62, 13, 236, 178, 62, 130, 178, 22, 191, 35, 123, 223, 189, 209, 117, 194, 190, 66, 142, 11, 62, 94, 13, 172, 190, 222, 237, 191, 62, 146, 198, 250, 61, 137, 52, 66, 189, 114, 163, 191, 190, 151, 103, 66, 60, 14, 80, 6, 190, 89, 52, 213, 61, 238, 58, 13, 190, 0, 5, 246, 190, 196, 225, 77, 188, 252, 85, 1, 190, 34, 183, 240, 61, 99, 93, 129, 62, 220, 83, 129, 190, 2, 250, 177, 61, 175, 95, 129, 62, 193, 230, 72, 190, 252, 65, 242, 189, 164, 61, 155, 61, 149, 139, 112, 190, 110, 23, 142, 60, 79, 26, 132, 61, 74, 132, 231, 61, 4, 191, 69, 62, 116, 149, 144, 62, 114, 96, 167, 62, 228, 18, 12, 189, 145, 46, 196, 61, 139, 35, 182, 190, 4, 215, 146, 190, 110, 30, 176, 61, 252, 102, 133, 62, 91, 130, 151, 60, 84, 20, 118, 61, 220, 239, 143, 190, 21, 198, 14, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 129, 247, 188, 35, 38, 11, 62, 160, 183, 16, 60, 246, 217, 35, 61, 132, 8, 110, 62, 81, 98, 62, 188, 194, 9, 58, 61, 89, 34, 241, 189, 142, 83, 68, 61, 107, 37, 83, 62, 251, 97, 46, 190, 13, 23, 163, 62, 238, 136, 178, 189, 83, 18, 88, 189, 8, 245, 0, 62, 228, 128, 63, 190, 70, 235, 198, 189, 99, 183, 155, 61, 210, 47, 129, 61, 40, 52, 224, 61, 44, 203, 192, 62, 173, 152, 238, 60, 235, 220, 166, 190, 54, 70, 36, 62, 32, 98, 14, 62, 47, 80, 108, 190, 47, 175, 38, 190, 207, 139, 36, 62, 45, 119, 198, 61, 142, 125, 106, 62, 144, 104, 40, 188, 207, 185, 123, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 150, 62, 190, 52, 42, 221, 62, 191, 156, 158, 62, 132, 79, 255, 62, 129, 77, 138, 189, 77, 152, 249, 188, 221, 21, 170, 189, 25, 53, 11, 63, 130, 176, 70, 189, 2, 187, 98, 59, 123, 163, 167, 188, 132, 14, 107, 189, 178, 16, 25, 190, 108, 137, 152, 186, 190, 74, 133, 63, 252, 163, 244, 61, 195, 148, 140, 61, 115, 47, 101, 63, 42, 245, 249, 187, 61, 133, 13, 63, 55, 45, 149, 191, 81, 15, 184, 62, 89, 31, 55, 191, 240, 216, 21, 63, 131, 224, 160, 63, 87, 174, 6, 63, 45, 28, 160, 190, 218, 91, 40, 191, 190, 103, 28, 63, 32, 223, 218, 190, 61, 123, 26, 191, 193, 121, 92, 190, 209, 115, 193, 189, 120, 220, 1, 191, 78, 217, 128, 62, 40, 74, 230, 61, 196, 98, 172, 190, 56, 155, 227, 189, 7, 117, 13, 62, 222, 13, 252, 190, 5, 22, 27, 190, 98, 170, 127, 190, 135, 187, 208, 59, 15, 41, 108, 190, 55, 240, 240, 189, 78, 80, 247, 188, 72, 224, 89, 61, 0, 175, 120, 60, 57, 224, 250, 61, 113, 159, 132, 62, 2, 70, 132, 190, 57, 89, 102, 189, 134, 24, 219, 62, 242, 160, 172, 60, 90, 204, 193, 62, 90, 216, 5, 63, 214, 130, 83, 190, 207, 232, 112, 61, 253, 117, 26, 189, 67, 103, 70, 62, 111, 180, 0, 190, 163, 204, 225, 189, 148, 96, 237, 60, 249, 45, 34, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 137, 25, 190, 216, 199, 98, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {51, 225, 71, 189, 239, 246, 254, 63, 77, 215, 201, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {124, 216, 30, 192, 3, 218, 161, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0011/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}