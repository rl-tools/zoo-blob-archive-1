// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 135, 185, 61, 36, 214, 255, 190, 102, 215, 143, 59, 71, 89, 81, 62, 206, 248, 248, 188, 220, 16, 193, 190, 96, 204, 16, 191, 182, 244, 173, 191, 95, 241, 168, 190, 36, 100, 83, 190, 3, 213, 219, 61, 144, 53, 57, 190, 182, 31, 139, 190, 200, 236, 74, 63, 228, 214, 3, 63, 126, 50, 94, 190, 125, 158, 168, 191, 198, 213, 219, 190, 241, 64, 161, 190, 51, 34, 193, 190, 205, 205, 0, 63, 109, 194, 141, 189, 68, 230, 121, 60, 187, 66, 33, 191, 227, 6, 96, 63, 252, 110, 47, 63, 159, 135, 229, 62, 42, 131, 29, 191, 150, 68, 50, 62, 96, 195, 170, 190, 150, 40, 207, 61, 221, 180, 59, 60, 211, 251, 5, 191, 109, 39, 231, 62, 116, 81, 223, 190, 214, 68, 53, 62, 14, 143, 124, 190, 246, 162, 181, 190, 57, 103, 255, 62, 208, 54, 140, 189, 222, 213, 0, 63, 99, 9, 44, 63, 205, 230, 160, 62, 108, 253, 137, 63, 138, 97, 76, 62, 37, 236, 220, 190, 110, 128, 54, 191, 52, 67, 197, 62, 95, 14, 67, 63, 240, 118, 92, 191, 141, 47, 215, 190, 121, 247, 39, 63, 244, 112, 84, 191, 104, 179, 234, 61, 70, 126, 93, 63, 219, 56, 66, 190, 204, 225, 114, 188, 93, 239, 25, 63, 23, 156, 132, 191, 39, 174, 155, 190, 8, 220, 192, 62, 127, 85, 62, 191, 160, 81, 66, 190, 184, 67, 44, 63, 154, 219, 84, 63, 66, 255, 83, 62, 180, 11, 160, 61, 15, 214, 49, 63, 249, 231, 9, 62, 50, 29, 19, 191, 230, 237, 207, 191, 211, 225, 206, 190, 244, 171, 46, 191, 80, 29, 8, 63, 152, 90, 25, 63, 102, 230, 185, 62, 129, 50, 142, 190, 57, 231, 147, 190, 161, 196, 146, 62, 90, 71, 25, 190, 96, 49, 248, 189, 78, 192, 74, 63, 31, 239, 169, 62, 166, 182, 25, 63, 11, 52, 252, 62, 93, 159, 174, 189, 171, 36, 214, 190, 130, 81, 56, 189, 101, 36, 148, 62, 210, 241, 15, 61, 93, 53, 31, 62, 2, 93, 237, 189, 251, 237, 229, 62, 111, 183, 129, 62, 229, 247, 129, 191, 115, 128, 200, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 198, 19, 191, 221, 173, 2, 191, 213, 109, 192, 189, 84, 190, 28, 63, 191, 198, 10, 191, 201, 226, 72, 190, 172, 34, 216, 190, 138, 178, 179, 62, 97, 37, 63, 191, 145, 217, 144, 59, 232, 195, 221, 62, 118, 139, 188, 62, 9, 96, 173, 190, 215, 43, 3, 63, 154, 131, 135, 62, 105, 20, 4, 63, 177, 197, 143, 61, 102, 230, 169, 61, 113, 10, 99, 190, 198, 9, 164, 190, 248, 127, 11, 63, 203, 87, 152, 190, 68, 80, 41, 63, 148, 24, 227, 189, 208, 51, 6, 63, 83, 115, 245, 190, 165, 0, 3, 63, 232, 123, 166, 190, 251, 126, 149, 61, 58, 236, 246, 62, 226, 207, 73, 191, 115, 61, 145, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 206, 224, 61, 77, 84, 231, 187, 95, 190, 161, 62, 223, 232, 224, 61, 124, 246, 3, 190, 112, 72, 151, 61, 147, 17, 138, 189, 142, 160, 66, 62, 111, 193, 97, 62, 54, 124, 129, 190, 243, 0, 12, 190, 245, 194, 202, 189, 227, 120, 185, 189, 226, 29, 164, 61, 203, 15, 82, 62, 69, 33, 18, 62, 157, 235, 18, 62, 243, 228, 68, 62, 51, 107, 237, 61, 251, 45, 109, 190, 149, 181, 112, 62, 121, 182, 156, 62, 245, 5, 254, 61, 182, 41, 33, 62, 132, 239, 210, 188, 148, 121, 249, 61, 204, 133, 246, 61, 82, 98, 226, 61, 165, 110, 243, 61, 234, 253, 123, 61, 137, 252, 233, 60, 3, 247, 3, 62, 228, 191, 120, 61, 12, 148, 139, 188, 82, 57, 239, 189, 19, 203, 179, 61, 107, 165, 240, 190, 77, 123, 56, 187, 209, 128, 49, 61, 228, 101, 19, 62, 29, 92, 184, 190, 179, 173, 169, 188, 245, 255, 172, 189, 251, 166, 242, 62, 76, 249, 72, 62, 30, 114, 92, 189, 145, 222, 159, 190, 174, 156, 251, 61, 232, 24, 253, 60, 238, 60, 184, 62, 240, 10, 131, 62, 179, 157, 188, 189, 79, 98, 9, 62, 2, 89, 16, 191, 68, 192, 61, 189, 248, 170, 64, 189, 70, 136, 56, 190, 196, 137, 23, 62, 158, 112, 167, 189, 65, 68, 157, 187, 241, 71, 165, 61, 68, 176, 64, 190, 168, 159, 16, 190, 223, 233, 96, 62, 181, 243, 135, 60, 69, 211, 140, 189, 221, 77, 176, 61, 73, 151, 229, 187, 224, 181, 52, 62, 64, 2, 200, 189, 203, 174, 201, 188, 93, 72, 35, 62, 116, 28, 237, 190, 120, 84, 199, 189, 200, 8, 64, 61, 57, 129, 160, 62, 122, 60, 138, 189, 150, 53, 206, 190, 39, 128, 26, 191, 253, 180, 23, 63, 125, 33, 246, 60, 239, 251, 150, 62, 24, 237, 125, 62, 227, 191, 204, 61, 242, 66, 28, 62, 110, 51, 130, 191, 236, 171, 136, 190, 177, 7, 87, 62, 39, 134, 26, 190, 91, 82, 216, 188, 147, 107, 55, 188, 63, 42, 191, 190, 94, 95, 186, 61, 6, 15, 71, 60, 86, 178, 179, 61, 90, 88, 211, 62, 147, 141, 24, 189, 58, 131, 28, 62, 48, 27, 14, 62, 243, 6, 43, 62, 112, 34, 55, 190, 152, 80, 100, 61, 169, 35, 168, 190, 37, 174, 77, 62, 161, 161, 229, 190, 202, 32, 220, 60, 75, 8, 60, 62, 218, 149, 20, 62, 146, 24, 92, 190, 46, 148, 13, 191, 43, 83, 17, 191, 28, 121, 59, 63, 116, 61, 155, 189, 37, 97, 182, 62, 134, 202, 158, 62, 119, 15, 10, 62, 11, 74, 150, 61, 29, 231, 69, 191, 228, 113, 249, 190, 179, 40, 99, 189, 14, 68, 74, 190, 206, 246, 142, 59, 238, 39, 254, 61, 231, 208, 20, 191, 145, 7, 10, 190, 188, 127, 73, 190, 249, 248, 70, 190, 134, 114, 12, 63, 174, 236, 32, 62, 48, 155, 36, 190, 163, 167, 160, 62, 108, 84, 36, 189, 69, 14, 141, 190, 13, 137, 127, 188, 155, 72, 142, 61, 15, 56, 40, 62, 70, 218, 51, 190, 78, 115, 11, 190, 236, 228, 9, 60, 33, 231, 166, 62, 42, 104, 88, 189, 168, 213, 211, 189, 234, 123, 72, 190, 104, 73, 173, 61, 26, 39, 151, 61, 12, 88, 142, 62, 128, 61, 166, 62, 107, 48, 92, 190, 215, 147, 3, 61, 253, 188, 132, 190, 40, 201, 64, 61, 188, 7, 15, 62, 222, 134, 221, 61, 238, 109, 167, 61, 216, 7, 146, 62, 181, 124, 42, 189, 96, 148, 148, 189, 27, 208, 70, 62, 14, 94, 29, 62, 231, 232, 41, 62, 129, 136, 219, 61, 224, 54, 9, 190, 131, 7, 154, 62, 1, 57, 213, 61, 80, 253, 33, 190, 176, 61, 179, 187, 197, 165, 37, 190, 115, 184, 3, 190, 79, 180, 140, 190, 72, 2, 83, 188, 144, 2, 218, 61, 20, 9, 23, 61, 247, 220, 44, 60, 180, 70, 10, 62, 144, 157, 11, 61, 184, 169, 72, 61, 215, 92, 129, 189, 25, 15, 25, 62, 174, 175, 57, 62, 94, 64, 157, 190, 65, 210, 149, 62, 102, 189, 118, 60, 160, 3, 77, 62, 196, 83, 82, 62, 155, 146, 25, 62, 184, 147, 209, 188, 85, 220, 128, 62, 49, 200, 182, 61, 114, 174, 49, 62, 12, 112, 98, 62, 27, 254, 255, 188, 16, 141, 31, 190, 71, 58, 32, 190, 73, 225, 27, 190, 107, 248, 20, 190, 124, 4, 54, 190, 6, 234, 165, 188, 37, 27, 31, 61, 85, 71, 71, 189, 87, 153, 9, 61, 167, 250, 94, 61, 102, 147, 163, 189, 110, 8, 227, 61, 212, 139, 66, 189, 168, 250, 35, 190, 21, 46, 33, 190, 145, 141, 26, 190, 74, 116, 2, 190, 193, 251, 16, 61, 147, 126, 83, 61, 148, 217, 139, 189, 218, 165, 18, 189, 187, 130, 253, 189, 243, 222, 1, 62, 196, 60, 207, 188, 135, 81, 15, 190, 254, 3, 26, 62, 29, 7, 138, 61, 136, 88, 11, 190, 232, 194, 244, 61, 226, 41, 110, 61, 32, 53, 67, 190, 147, 120, 7, 190, 187, 134, 65, 57, 250, 58, 35, 62, 209, 24, 172, 189, 201, 146, 3, 188, 179, 120, 247, 61, 78, 93, 134, 189, 162, 236, 128, 190, 121, 89, 144, 190, 129, 36, 12, 62, 123, 195, 1, 190, 156, 182, 72, 189, 29, 79, 16, 61, 131, 205, 17, 62, 129, 192, 218, 189, 255, 244, 177, 190, 135, 97, 61, 190, 140, 255, 32, 62, 142, 22, 174, 61, 18, 243, 120, 62, 66, 170, 216, 62, 148, 239, 107, 190, 184, 134, 107, 62, 6, 176, 11, 191, 129, 104, 204, 190, 72, 199, 249, 189, 141, 116, 23, 191, 125, 170, 240, 189, 162, 140, 47, 62, 98, 35, 15, 62, 125, 234, 101, 62, 51, 129, 139, 189, 155, 208, 189, 58, 61, 62, 123, 62, 213, 119, 25, 190, 25, 135, 92, 190, 102, 146, 24, 62, 124, 107, 32, 62, 166, 37, 140, 189, 148, 44, 162, 61, 71, 133, 157, 189, 87, 80, 168, 61, 178, 25, 160, 188, 50, 204, 191, 61, 246, 91, 19, 61, 8, 101, 12, 62, 180, 196, 230, 189, 208, 225, 19, 62, 99, 19, 226, 61, 215, 233, 170, 188, 199, 186, 249, 61, 254, 247, 181, 61, 185, 246, 111, 60, 198, 118, 81, 190, 162, 246, 138, 61, 233, 165, 61, 62, 135, 64, 89, 62, 218, 220, 108, 62, 149, 39, 66, 62, 244, 99, 194, 61, 61, 191, 65, 62, 188, 58, 216, 61, 228, 125, 243, 61, 10, 37, 0, 62, 212, 218, 11, 190, 244, 205, 221, 189, 147, 243, 198, 188, 38, 231, 2, 190, 50, 203, 10, 190, 234, 7, 86, 62, 106, 192, 49, 190, 209, 182, 10, 62, 182, 224, 50, 62, 29, 247, 17, 62, 129, 250, 106, 190, 201, 163, 32, 190, 45, 56, 25, 60, 141, 152, 143, 61, 6, 227, 213, 61, 88, 238, 52, 62, 21, 226, 174, 61, 51, 78, 79, 62, 59, 123, 156, 188, 223, 201, 166, 61, 59, 246, 32, 62, 206, 144, 208, 188, 86, 83, 206, 61, 189, 134, 221, 190, 49, 236, 3, 190, 36, 47, 17, 190, 189, 115, 131, 188, 67, 83, 98, 61, 181, 213, 16, 62, 126, 151, 177, 189, 8, 204, 118, 188, 61, 206, 225, 189, 48, 212, 40, 61, 233, 174, 29, 190, 99, 179, 19, 190, 237, 199, 185, 61, 163, 25, 199, 61, 214, 127, 29, 62, 148, 228, 6, 190, 42, 51, 106, 189, 72, 74, 225, 188, 125, 177, 243, 189, 63, 247, 47, 62, 38, 122, 18, 189, 249, 218, 170, 59, 232, 202, 68, 189, 65, 125, 184, 60, 148, 155, 26, 190, 53, 149, 12, 190, 69, 202, 222, 189, 249, 154, 229, 189, 103, 109, 49, 62, 40, 195, 181, 189, 111, 108, 172, 58, 102, 137, 40, 190, 174, 111, 189, 187, 29, 114, 130, 61, 89, 20, 81, 189, 93, 18, 40, 62, 236, 3, 28, 62, 16, 38, 193, 189, 114, 42, 211, 189, 66, 88, 52, 190, 153, 78, 133, 189, 63, 245, 195, 189, 69, 211, 52, 62, 170, 68, 30, 190, 252, 39, 235, 189, 177, 100, 84, 189, 249, 161, 3, 61, 249, 41, 6, 190, 237, 158, 195, 60, 6, 240, 112, 61, 129, 44, 242, 61, 83, 159, 172, 190, 181, 198, 183, 189, 103, 190, 255, 61, 65, 8, 119, 62, 48, 76, 160, 61, 58, 182, 168, 61, 245, 184, 168, 188, 62, 157, 69, 62, 20, 179, 240, 61, 183, 44, 179, 62, 113, 13, 37, 62, 187, 114, 9, 190, 39, 40, 75, 62, 86, 243, 165, 190, 162, 95, 144, 61, 199, 35, 44, 190, 148, 106, 68, 190, 33, 79, 192, 61, 227, 20, 137, 62, 32, 227, 17, 189, 201, 187, 235, 188, 26, 1, 196, 189, 135, 44, 61, 190, 45, 84, 152, 187, 87, 194, 163, 61, 200, 125, 35, 61, 227, 111, 34, 62, 139, 16, 115, 189, 200, 28, 19, 62, 215, 250, 79, 188, 198, 97, 33, 190, 17, 183, 135, 188, 146, 120, 189, 189, 235, 136, 226, 60, 94, 248, 37, 190, 61, 227, 216, 61, 154, 73, 194, 187, 170, 78, 167, 189, 124, 51, 6, 62, 55, 3, 229, 189, 72, 251, 178, 189, 141, 53, 17, 190, 200, 45, 235, 188, 193, 162, 21, 190, 28, 234, 24, 62, 221, 100, 14, 60, 226, 14, 7, 62, 232, 148, 88, 188, 217, 72, 32, 190, 58, 214, 38, 190, 96, 216, 71, 189, 151, 178, 44, 61, 56, 215, 204, 189, 214, 96, 196, 189, 26, 169, 113, 189, 151, 32, 146, 188, 41, 237, 231, 61, 221, 171, 90, 62, 9, 224, 149, 188, 45, 5, 17, 190, 9, 11, 15, 62, 107, 198, 217, 189, 171, 80, 141, 61, 219, 252, 196, 60, 164, 206, 177, 189, 89, 96, 20, 190, 229, 25, 2, 190, 183, 5, 63, 61, 44, 44, 143, 62, 163, 112, 5, 62, 124, 174, 23, 190, 56, 174, 73, 62, 112, 83, 137, 62, 89, 76, 127, 188, 64, 35, 195, 62, 206, 4, 63, 188, 173, 80, 61, 62, 113, 202, 205, 190, 195, 208, 10, 190, 152, 211, 205, 60, 185, 172, 17, 187, 46, 126, 99, 189, 193, 190, 235, 60, 119, 163, 19, 188, 172, 195, 200, 61, 71, 70, 192, 186, 168, 83, 36, 190, 207, 50, 192, 189, 150, 4, 239, 189, 80, 113, 69, 62, 216, 179, 88, 191, 131, 102, 29, 62, 193, 135, 14, 191, 89, 82, 34, 190, 12, 218, 174, 62, 25, 109, 144, 60, 165, 114, 139, 190, 114, 14, 12, 62, 218, 19, 196, 188, 59, 190, 158, 62, 142, 44, 200, 61, 235, 158, 58, 62, 90, 77, 2, 191, 71, 183, 187, 61, 124, 163, 71, 62, 130, 187, 2, 61, 189, 253, 51, 62, 137, 2, 145, 62, 204, 224, 44, 188, 84, 105, 26, 191, 140, 133, 46, 190, 137, 62, 115, 191, 79, 158, 61, 62, 175, 102, 177, 188, 178, 140, 50, 62, 74, 114, 199, 190, 111, 188, 19, 62, 122, 32, 28, 189, 12, 255, 147, 189, 119, 192, 90, 190, 220, 124, 155, 189, 125, 98, 83, 189, 190, 201, 35, 190, 36, 16, 100, 190, 30, 240, 11, 62, 117, 221, 28, 62, 102, 104, 168, 61, 95, 243, 173, 189, 191, 79, 172, 189, 110, 50, 129, 61, 244, 78, 153, 61, 153, 231, 216, 188, 67, 122, 33, 190, 43, 29, 193, 189, 248, 27, 38, 61, 177, 88, 44, 187, 164, 137, 227, 61, 70, 162, 121, 188, 33, 58, 189, 189, 39, 131, 234, 189, 249, 241, 13, 190, 58, 69, 252, 61, 111, 48, 171, 189, 80, 48, 202, 61, 192, 211, 145, 61, 89, 58, 152, 189, 1, 14, 145, 60, 223, 86, 22, 62, 216, 12, 17, 189, 1, 211, 117, 190, 228, 70, 102, 189, 145, 123, 6, 190, 231, 92, 167, 189, 96, 48, 172, 61, 36, 122, 157, 189, 23, 32, 215, 189, 88, 225, 18, 190, 44, 154, 250, 61, 83, 146, 43, 189, 95, 239, 163, 189, 111, 15, 142, 189, 126, 59, 34, 190, 231, 23, 253, 189, 234, 243, 213, 61, 219, 129, 136, 61, 210, 174, 33, 190, 4, 135, 103, 61, 235, 194, 177, 60, 146, 93, 41, 190, 83, 54, 50, 190, 206, 44, 133, 189, 99, 130, 149, 189, 149, 200, 254, 189, 25, 92, 186, 60, 211, 233, 26, 62, 115, 226, 24, 190, 72, 161, 14, 190, 245, 207, 248, 189, 158, 79, 242, 189, 166, 21, 27, 190, 141, 254, 43, 62, 60, 219, 41, 190, 109, 254, 202, 189, 157, 180, 134, 61, 200, 31, 13, 62, 103, 60, 24, 61, 226, 129, 118, 191, 239, 79, 90, 62, 204, 64, 67, 190, 56, 239, 185, 189, 70, 208, 10, 62, 246, 183, 245, 190, 81, 33, 255, 190, 28, 190, 56, 62, 246, 56, 196, 190, 188, 211, 111, 189, 37, 65, 163, 62, 154, 207, 68, 62, 245, 103, 72, 190, 51, 230, 128, 60, 192, 228, 190, 62, 29, 66, 142, 190, 47, 56, 137, 62, 251, 132, 176, 62, 52, 209, 102, 62, 42, 211, 24, 191, 144, 44, 99, 62, 1, 112, 145, 191, 19, 131, 133, 62, 169, 1, 184, 190, 211, 251, 36, 62, 57, 140, 48, 190, 193, 101, 204, 61, 200, 0, 108, 61, 4, 196, 29, 190, 177, 80, 4, 190, 234, 79, 246, 61, 47, 166, 220, 61, 15, 210, 120, 188, 153, 16, 115, 62, 120, 185, 69, 61, 160, 59, 159, 60, 237, 212, 169, 61, 159, 20, 49, 60, 174, 202, 157, 190, 125, 170, 67, 189, 206, 240, 128, 61, 3, 247, 70, 62, 160, 210, 14, 61, 166, 7, 253, 188, 167, 93, 17, 62, 13, 180, 133, 62, 132, 245, 160, 187, 224, 220, 6, 62, 188, 91, 19, 61, 215, 86, 133, 190, 12, 134, 60, 62, 62, 133, 144, 190, 219, 224, 27, 62, 106, 32, 242, 188, 189, 239, 43, 62, 179, 52, 1, 190, 163, 252, 144, 62, 112, 1, 64, 190, 212, 128, 195, 188, 217, 20, 61, 61, 106, 31, 179, 189, 144, 10, 112, 189, 234, 99, 23, 190, 62, 102, 208, 61, 221, 88, 46, 191, 107, 97, 202, 187, 46, 114, 146, 190, 104, 129, 214, 190, 223, 36, 143, 188, 88, 171, 147, 190, 202, 205, 218, 190, 72, 215, 157, 189, 14, 100, 141, 189, 185, 29, 215, 188, 201, 250, 185, 189, 118, 70, 56, 62, 251, 90, 143, 60, 41, 1, 45, 62, 41, 116, 148, 62, 201, 59, 72, 61, 116, 192, 73, 62, 153, 11, 149, 62, 52, 201, 38, 189, 77, 122, 228, 190, 194, 17, 141, 61, 31, 183, 147, 191, 60, 229, 86, 62, 10, 149, 195, 61, 237, 215, 14, 62, 108, 13, 85, 189, 34, 57, 27, 62, 217, 16, 15, 62, 106, 8, 24, 189, 3, 16, 59, 190, 205, 120, 228, 61, 42, 168, 90, 190, 97, 116, 16, 63, 62, 183, 160, 62, 99, 95, 69, 191, 47, 89, 45, 191, 31, 90, 7, 191, 211, 81, 18, 62, 172, 232, 52, 62, 104, 164, 162, 62, 119, 37, 165, 61, 139, 59, 144, 188, 91, 37, 50, 191, 100, 171, 16, 191, 96, 195, 246, 189, 194, 222, 26, 62, 220, 146, 222, 190, 79, 42, 249, 189, 27, 23, 143, 62, 71, 135, 106, 191, 143, 201, 182, 188, 201, 44, 129, 62, 127, 26, 141, 62, 199, 0, 0, 62, 250, 33, 181, 190, 73, 215, 188, 190, 50, 35, 207, 61, 43, 231, 201, 62, 245, 15, 127, 189, 54, 243, 10, 62, 53, 106, 33, 62, 19, 171, 242, 190, 228, 185, 135, 189, 222, 34, 39, 189, 2, 39, 32, 187, 163, 39, 106, 190, 145, 201, 178, 190, 14, 161, 69, 190, 106, 111, 67, 62, 191, 158, 125, 61, 125, 203, 149, 190, 97, 39, 54, 190, 156, 49, 126, 61, 246, 66, 152, 62, 43, 133, 240, 61, 247, 219, 211, 61, 206, 50, 135, 190, 168, 47, 8, 62, 95, 186, 225, 61, 109, 115, 83, 61, 61, 233, 65, 62, 61, 199, 74, 62, 142, 57, 177, 61, 38, 101, 189, 190, 5, 35, 57, 190, 249, 141, 215, 60, 161, 233, 13, 61, 106, 52, 239, 61, 209, 49, 3, 61, 79, 226, 147, 190, 113, 148, 89, 62, 240, 147, 2, 190, 198, 230, 36, 190, 161, 81, 68, 61, 171, 88, 10, 62, 114, 173, 101, 62, 87, 206, 137, 189, 237, 101, 134, 190, 36, 135, 48, 62, 254, 94, 107, 62, 62, 244, 45, 190, 188, 165, 225, 189, 202, 5, 190, 62, 128, 152, 218, 190, 5, 86, 3, 61, 120, 151, 103, 62, 4, 26, 144, 61, 156, 29, 191, 61, 136, 224, 171, 189, 50, 97, 146, 190, 164, 13, 82, 61, 133, 89, 138, 62, 243, 133, 11, 62, 253, 73, 25, 62, 172, 84, 77, 62, 110, 158, 233, 61, 243, 193, 176, 190, 34, 210, 183, 189, 228, 37, 201, 189, 1, 28, 140, 61, 79, 168, 241, 189, 211, 247, 186, 60, 19, 54, 180, 61, 70, 180, 161, 190, 7, 225, 74, 62, 236, 54, 154, 60, 148, 126, 223, 189, 7, 3, 75, 62, 216, 56, 122, 190, 244, 63, 4, 189, 22, 8, 181, 190, 80, 165, 95, 61, 107, 56, 10, 62, 246, 60, 20, 61, 163, 89, 208, 190, 194, 45, 202, 189, 140, 143, 47, 57, 6, 65, 136, 62, 65, 43, 24, 62, 91, 68, 50, 190, 118, 108, 229, 190, 4, 204, 164, 62, 115, 58, 69, 62, 180, 163, 86, 61, 141, 94, 146, 62, 209, 231, 168, 62, 140, 168, 68, 62, 127, 176, 54, 191, 38, 205, 161, 190, 111, 47, 102, 190, 31, 241, 75, 61, 223, 8, 156, 189, 146, 6, 18, 189, 162, 94, 216, 190, 135, 172, 171, 61, 85, 161, 81, 190, 59, 152, 106, 190, 123, 236, 141, 61, 40, 220, 159, 186, 114, 162, 153, 190, 167, 76, 243, 189, 180, 131, 136, 61, 207, 39, 12, 191, 30, 243, 44, 190, 16, 166, 181, 190, 54, 216, 214, 189, 105, 45, 44, 189, 96, 144, 250, 62, 207, 87, 199, 189, 6, 230, 84, 190, 227, 26, 181, 190, 48, 41, 113, 189, 168, 167, 192, 62, 31, 215, 54, 190, 11, 204, 154, 190, 255, 179, 4, 191, 26, 76, 4, 191, 124, 169, 63, 189, 241, 241, 100, 191, 28, 105, 136, 62, 223, 173, 39, 62, 161, 125, 170, 191, 81, 168, 174, 61, 178, 64, 217, 189, 22, 15, 144, 61, 157, 67, 159, 190, 251, 86, 12, 191, 58, 19, 116, 62, 147, 235, 217, 190, 111, 187, 24, 190, 0, 192, 5, 62, 55, 14, 102, 62, 104, 4, 124, 190, 108, 110, 152, 189, 111, 97, 140, 62, 20, 129, 123, 189, 5, 248, 227, 61, 114, 169, 48, 189, 80, 130, 178, 61, 146, 26, 255, 189, 98, 78, 105, 62, 216, 55, 157, 61, 144, 6, 55, 62, 11, 113, 188, 60, 86, 35, 87, 190, 128, 61, 98, 61, 69, 122, 50, 62, 155, 196, 24, 191, 41, 27, 126, 62, 221, 79, 39, 62, 104, 107, 115, 190, 30, 203, 118, 190, 73, 121, 59, 190, 253, 68, 14, 189, 233, 159, 125, 62, 125, 35, 94, 62, 222, 118, 250, 189, 156, 4, 93, 190, 11, 98, 158, 62, 83, 219, 26, 62, 93, 221, 229, 189, 213, 120, 160, 190, 124, 83, 130, 189, 219, 177, 228, 188, 219, 227, 6, 189, 185, 39, 50, 62, 137, 205, 39, 190, 246, 11, 146, 60, 127, 66, 51, 62, 54, 140, 134, 189, 122, 119, 198, 188, 180, 189, 229, 61, 39, 36, 247, 189, 250, 159, 36, 62, 206, 153, 23, 62, 123, 225, 146, 189, 11, 178, 245, 189, 43, 178, 143, 59, 34, 223, 39, 62, 198, 195, 75, 61, 253, 59, 83, 189, 74, 232, 36, 62, 105, 114, 41, 190, 57, 83, 196, 189, 2, 81, 244, 187, 2, 204, 29, 190, 143, 96, 31, 190, 55, 217, 143, 61, 120, 40, 129, 188, 84, 15, 50, 190, 186, 60, 35, 189, 54, 216, 52, 190, 0, 48, 12, 190, 177, 113, 130, 60, 84, 249, 13, 62, 240, 213, 66, 190, 250, 17, 176, 62, 237, 242, 27, 61, 193, 141, 146, 189, 132, 122, 231, 188, 231, 137, 28, 190, 161, 101, 86, 62, 153, 115, 153, 62, 240, 182, 163, 61, 173, 251, 176, 60, 57, 209, 111, 190, 160, 237, 205, 190, 166, 180, 73, 59, 181, 16, 141, 62, 119, 218, 125, 190, 44, 66, 102, 190, 90, 89, 46, 190, 129, 93, 11, 62, 15, 114, 193, 190, 125, 243, 95, 61, 108, 63, 137, 62, 171, 61, 38, 61, 75, 143, 14, 62, 191, 225, 1, 60, 114, 171, 56, 190, 94, 216, 50, 61, 92, 80, 28, 62, 45, 69, 159, 189, 128, 147, 24, 62, 86, 219, 26, 189, 67, 202, 96, 190, 228, 186, 29, 61, 192, 177, 232, 190, 120, 140, 44, 191, 35, 29, 125, 61, 8, 195, 12, 189, 125, 198, 158, 189, 49, 8, 91, 62, 0, 223, 172, 190, 58, 17, 92, 190, 189, 222, 181, 62, 30, 74, 11, 191, 172, 149, 134, 61, 103, 62, 131, 189, 173, 194, 156, 61, 106, 200, 127, 62, 100, 39, 174, 61, 87, 164, 143, 190, 203, 192, 153, 190, 80, 72, 143, 189, 73, 112, 131, 189, 38, 121, 62, 190, 234, 124, 141, 61, 153, 207, 114, 62, 53, 90, 139, 191, 242, 144, 107, 62, 153, 127, 139, 189, 166, 28, 51, 189, 188, 128, 110, 190, 74, 148, 247, 190, 134, 235, 173, 61, 225, 239, 226, 189, 213, 250, 8, 190, 105, 180, 51, 62, 62, 148, 58, 61, 71, 97, 166, 61, 110, 98, 116, 62, 105, 84, 118, 60, 119, 133, 50, 191, 72, 46, 57, 189, 76, 158, 112, 189, 69, 186, 162, 62, 3, 128, 25, 62, 144, 151, 109, 62, 86, 222, 66, 61, 75, 10, 19, 190, 133, 249, 246, 60, 169, 213, 160, 61, 154, 146, 222, 61, 210, 124, 143, 190, 41, 176, 198, 61, 95, 146, 228, 188, 104, 6, 103, 191, 225, 209, 179, 189, 132, 161, 7, 63, 176, 154, 206, 62, 88, 160, 135, 190, 203, 180, 219, 60, 46, 39, 179, 61, 178, 63, 56, 60, 114, 136, 4, 62, 43, 79, 55, 188, 7, 197, 157, 61, 143, 74, 156, 188, 49, 52, 188, 189, 33, 134, 220, 189, 155, 116, 144, 62, 222, 92, 92, 191, 195, 71, 89, 189, 121, 47, 32, 58, 180, 152, 25, 190, 102, 207, 188, 189, 249, 114, 135, 59, 125, 142, 51, 190, 250, 200, 252, 189, 67, 16, 44, 189, 132, 61, 32, 61, 146, 58, 61, 190, 209, 183, 225, 61, 60, 79, 117, 62, 156, 96, 128, 190, 144, 166, 172, 189, 69, 199, 53, 189, 203, 132, 128, 189, 45, 24, 116, 190, 104, 215, 101, 190, 186, 237, 78, 62, 143, 214, 146, 62, 233, 245, 6, 191, 116, 185, 253, 188, 24, 80, 192, 189, 30, 68, 217, 61, 13, 77, 101, 190, 254, 176, 134, 62, 99, 72, 135, 61, 14, 119, 123, 60, 184, 128, 25, 189, 151, 103, 66, 60, 160, 239, 10, 189, 209, 4, 229, 61, 30, 98, 52, 189, 29, 146, 112, 190, 131, 208, 133, 189, 128, 4, 170, 61, 153, 8, 11, 62, 77, 238, 36, 62, 117, 118, 101, 190, 230, 93, 16, 62, 152, 218, 108, 62, 107, 171, 62, 187, 222, 141, 118, 189, 100, 181, 165, 58, 201, 155, 141, 189, 220, 83, 43, 189, 177, 180, 184, 61, 244, 43, 133, 61, 215, 106, 195, 61, 87, 180, 117, 62, 123, 165, 139, 62, 39, 115, 105, 189, 3, 151, 200, 61, 23, 53, 138, 189, 226, 43, 216, 61, 132, 206, 84, 61, 191, 170, 152, 62, 10, 57, 156, 58, 244, 144, 228, 61, 111, 179, 190, 189, 53, 37, 128, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 166, 10, 189, 37, 62, 3, 62, 6, 11, 182, 189, 56, 164, 119, 189, 29, 9, 59, 62, 152, 201, 152, 60, 194, 9, 58, 61, 162, 183, 199, 189, 109, 116, 111, 61, 27, 254, 65, 62, 251, 97, 46, 190, 112, 99, 150, 62, 95, 224, 166, 189, 127, 171, 95, 61, 120, 80, 16, 62, 78, 30, 53, 190, 70, 235, 198, 189, 160, 39, 60, 61, 117, 217, 42, 61, 255, 6, 187, 61, 55, 157, 165, 62, 38, 63, 136, 60, 192, 173, 174, 190, 113, 8, 36, 62, 74, 45, 74, 62, 244, 200, 195, 189, 100, 94, 47, 190, 160, 191, 116, 61, 115, 88, 253, 188, 205, 53, 93, 62, 97, 114, 88, 189, 138, 97, 133, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 6, 83, 190, 197, 244, 62, 62, 28, 98, 97, 62, 46, 144, 157, 62, 149, 155, 51, 189, 128, 97, 132, 189, 221, 21, 170, 189, 236, 142, 177, 62, 99, 6, 199, 189, 209, 183, 8, 61, 123, 163, 167, 188, 253, 194, 74, 188, 197, 72, 1, 189, 135, 83, 123, 61, 22, 242, 32, 63, 15, 21, 236, 61, 195, 148, 140, 61, 233, 48, 77, 63, 121, 47, 13, 60, 129, 158, 251, 62, 220, 134, 135, 191, 131, 55, 58, 62, 98, 133, 133, 190, 23, 244, 172, 62, 160, 106, 140, 63, 109, 58, 218, 62, 76, 203, 42, 189, 167, 207, 140, 190, 217, 116, 244, 62, 134, 38, 172, 190, 185, 62, 171, 190, 136, 115, 58, 190, 211, 22, 175, 189, 215, 110, 179, 190, 61, 136, 172, 62, 64, 215, 93, 62, 108, 213, 197, 190, 37, 233, 47, 190, 7, 117, 13, 62, 92, 9, 182, 190, 75, 227, 39, 190, 136, 248, 109, 190, 135, 187, 208, 59, 174, 84, 126, 190, 124, 218, 222, 187, 49, 49, 197, 188, 169, 101, 178, 62, 243, 115, 107, 61, 57, 224, 250, 61, 10, 77, 151, 62, 103, 228, 137, 190, 35, 5, 202, 188, 39, 173, 157, 62, 240, 172, 167, 61, 105, 244, 198, 62, 61, 121, 12, 63, 136, 55, 209, 61, 230, 158, 134, 61, 113, 86, 32, 189, 157, 224, 96, 62, 217, 226, 5, 189, 12, 101, 79, 189, 61, 65, 54, 62, 12, 126, 200, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 210, 238, 189, 239, 194, 242, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {227, 47, 189, 62, 19, 186, 243, 63, 75, 3, 88, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {109, 255, 179, 191, 41, 44, 212, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0011/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}