// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 135, 185, 61, 36, 214, 255, 190, 102, 215, 143, 59, 235, 245, 9, 63, 236, 18, 98, 189, 116, 222, 204, 190, 126, 152, 24, 191, 94, 217, 202, 191, 142, 168, 163, 190, 84, 246, 92, 190, 5, 123, 220, 61, 35, 36, 140, 189, 65, 58, 130, 62, 229, 175, 144, 63, 209, 113, 249, 62, 103, 209, 145, 190, 57, 157, 181, 191, 87, 202, 192, 190, 42, 69, 56, 190, 228, 199, 194, 190, 21, 8, 233, 62, 120, 149, 207, 190, 239, 128, 217, 61, 110, 80, 16, 191, 42, 234, 115, 63, 206, 144, 62, 63, 54, 56, 208, 62, 78, 105, 25, 191, 195, 137, 135, 190, 131, 137, 177, 190, 82, 97, 193, 60, 198, 252, 21, 62, 127, 13, 160, 190, 46, 251, 202, 62, 52, 168, 69, 191, 6, 169, 2, 62, 36, 3, 106, 188, 26, 226, 4, 191, 32, 234, 234, 62, 115, 39, 9, 190, 99, 11, 182, 62, 120, 255, 50, 63, 99, 234, 133, 62, 107, 246, 173, 63, 12, 179, 124, 62, 99, 139, 4, 191, 59, 205, 3, 191, 6, 121, 214, 62, 254, 67, 51, 63, 220, 116, 164, 191, 165, 182, 191, 190, 77, 16, 217, 62, 77, 169, 87, 191, 63, 203, 102, 62, 42, 173, 99, 63, 190, 141, 169, 190, 208, 19, 162, 60, 186, 104, 29, 63, 227, 89, 140, 191, 245, 144, 174, 190, 162, 171, 26, 62, 29, 236, 113, 191, 47, 3, 232, 189, 111, 232, 41, 63, 79, 160, 147, 63, 229, 224, 51, 62, 13, 228, 87, 62, 106, 251, 91, 63, 108, 71, 76, 62, 192, 84, 35, 191, 26, 225, 219, 191, 49, 114, 8, 191, 94, 4, 28, 191, 90, 101, 47, 63, 118, 21, 16, 63, 91, 220, 48, 63, 18, 209, 208, 190, 208, 127, 140, 190, 120, 81, 99, 62, 177, 107, 137, 190, 222, 115, 247, 189, 8, 115, 55, 63, 156, 242, 71, 62, 96, 115, 34, 63, 99, 67, 190, 62, 122, 121, 172, 190, 220, 195, 239, 190, 243, 205, 207, 60, 127, 58, 253, 62, 171, 71, 245, 61, 135, 21, 177, 59, 197, 127, 200, 189, 219, 136, 220, 62, 59, 206, 91, 62, 4, 211, 179, 191, 47, 12, 101, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 198, 19, 191, 245, 227, 11, 191, 190, 200, 141, 189, 124, 177, 28, 63, 72, 4, 115, 190, 109, 88, 193, 189, 248, 16, 188, 190, 182, 129, 181, 61, 92, 227, 71, 191, 226, 199, 38, 190, 110, 19, 192, 62, 246, 249, 145, 62, 52, 158, 23, 190, 140, 166, 230, 62, 234, 177, 129, 62, 204, 150, 10, 63, 201, 12, 130, 188, 30, 46, 23, 61, 107, 157, 106, 190, 111, 251, 202, 190, 245, 175, 11, 63, 183, 163, 178, 190, 57, 102, 47, 63, 200, 146, 233, 61, 167, 187, 30, 63, 250, 220, 53, 191, 211, 12, 215, 62, 111, 65, 208, 190, 187, 206, 30, 190, 185, 35, 198, 62, 111, 182, 92, 191, 33, 145, 196, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 206, 224, 61, 25, 172, 187, 189, 158, 172, 154, 62, 130, 253, 231, 60, 81, 163, 50, 190, 126, 107, 166, 61, 237, 184, 199, 188, 13, 111, 60, 62, 0, 235, 77, 62, 23, 46, 139, 190, 219, 152, 56, 190, 87, 80, 174, 189, 161, 29, 90, 189, 72, 93, 21, 62, 95, 17, 112, 62, 227, 15, 66, 62, 225, 161, 67, 62, 18, 14, 70, 62, 5, 76, 198, 61, 140, 180, 52, 190, 46, 17, 150, 62, 90, 22, 128, 62, 73, 187, 21, 62, 79, 189, 22, 62, 140, 232, 214, 188, 213, 79, 40, 190, 251, 110, 9, 62, 74, 109, 6, 62, 183, 78, 7, 62, 131, 44, 61, 61, 43, 65, 94, 60, 253, 160, 21, 62, 228, 191, 120, 61, 217, 10, 153, 189, 24, 233, 197, 189, 226, 63, 153, 61, 60, 122, 10, 191, 250, 170, 149, 188, 61, 121, 25, 189, 167, 74, 98, 61, 167, 250, 2, 191, 12, 43, 20, 190, 154, 109, 31, 190, 44, 0, 238, 62, 221, 38, 13, 62, 70, 21, 16, 190, 54, 21, 2, 191, 26, 183, 14, 62, 18, 236, 218, 188, 241, 150, 188, 62, 21, 223, 116, 62, 37, 187, 245, 189, 33, 73, 5, 62, 200, 130, 67, 191, 54, 160, 45, 190, 51, 174, 69, 189, 2, 249, 76, 190, 96, 100, 167, 62, 32, 214, 251, 189, 100, 167, 114, 189, 117, 12, 106, 59, 98, 15, 119, 190, 119, 55, 101, 190, 43, 64, 129, 62, 181, 243, 135, 60, 163, 46, 76, 189, 31, 190, 158, 61, 27, 205, 209, 61, 163, 166, 254, 61, 158, 103, 23, 190, 238, 32, 252, 189, 108, 133, 46, 62, 205, 30, 197, 190, 12, 136, 161, 189, 70, 12, 102, 61, 237, 189, 173, 62, 79, 196, 14, 190, 31, 103, 240, 190, 239, 48, 42, 191, 226, 232, 25, 63, 105, 58, 171, 189, 7, 47, 140, 62, 84, 126, 212, 62, 103, 149, 19, 189, 40, 150, 2, 62, 150, 76, 83, 191, 128, 19, 83, 190, 46, 55, 72, 62, 13, 226, 16, 190, 49, 11, 114, 62, 124, 120, 92, 60, 33, 253, 199, 190, 147, 75, 49, 61, 22, 125, 71, 62, 13, 171, 115, 188, 89, 11, 206, 62, 147, 141, 24, 189, 225, 168, 65, 62, 3, 153, 252, 61, 237, 10, 145, 62, 208, 74, 49, 61, 91, 125, 76, 60, 124, 19, 160, 190, 47, 59, 84, 62, 222, 54, 76, 190, 87, 53, 176, 60, 26, 101, 83, 62, 151, 167, 129, 62, 207, 12, 68, 190, 211, 54, 16, 191, 189, 230, 29, 191, 65, 228, 85, 63, 144, 55, 13, 190, 245, 218, 201, 62, 110, 149, 255, 62, 169, 55, 131, 61, 173, 28, 156, 61, 37, 249, 40, 191, 148, 168, 237, 190, 114, 16, 140, 189, 220, 98, 6, 189, 12, 83, 154, 62, 209, 210, 29, 62, 131, 254, 247, 190, 133, 133, 30, 190, 189, 173, 144, 188, 173, 88, 5, 190, 132, 39, 35, 63, 174, 236, 32, 62, 210, 54, 242, 189, 203, 30, 140, 62, 254, 185, 66, 60, 200, 53, 157, 190, 161, 110, 193, 188, 58, 174, 171, 61, 224, 253, 119, 62, 120, 160, 40, 190, 43, 212, 212, 189, 28, 98, 135, 61, 67, 70, 163, 62, 210, 100, 245, 188, 101, 171, 223, 189, 234, 161, 88, 190, 164, 50, 11, 62, 58, 46, 126, 61, 192, 27, 150, 62, 146, 228, 121, 62, 175, 22, 90, 190, 52, 212, 181, 60, 178, 241, 164, 190, 224, 169, 62, 61, 124, 125, 218, 61, 24, 137, 242, 61, 87, 141, 87, 189, 221, 52, 150, 62, 242, 43, 20, 189, 1, 214, 251, 188, 194, 233, 95, 62, 252, 234, 2, 62, 92, 197, 109, 62, 129, 136, 219, 61, 23, 139, 36, 190, 188, 209, 124, 62, 253, 130, 150, 61, 110, 251, 166, 190, 109, 26, 204, 188, 50, 196, 81, 190, 249, 9, 219, 189, 132, 56, 101, 190, 226, 131, 134, 188, 129, 226, 175, 61, 107, 21, 33, 61, 59, 225, 211, 188, 237, 143, 6, 62, 13, 226, 65, 60, 209, 62, 146, 61, 154, 250, 180, 189, 101, 118, 33, 62, 15, 167, 1, 62, 99, 149, 163, 190, 174, 27, 152, 62, 123, 144, 46, 189, 157, 179, 54, 62, 151, 200, 34, 62, 93, 169, 147, 61, 65, 138, 136, 190, 74, 241, 125, 62, 252, 129, 243, 61, 160, 53, 50, 62, 119, 90, 59, 62, 137, 169, 27, 190, 18, 40, 202, 189, 71, 58, 32, 190, 73, 225, 27, 190, 107, 248, 20, 190, 124, 4, 54, 190, 6, 234, 165, 188, 37, 27, 31, 61, 85, 71, 71, 189, 87, 153, 9, 61, 167, 250, 94, 61, 102, 147, 163, 189, 110, 8, 227, 61, 212, 139, 66, 189, 168, 250, 35, 190, 21, 46, 33, 190, 145, 141, 26, 190, 74, 116, 2, 190, 193, 251, 16, 61, 147, 126, 83, 61, 148, 217, 139, 189, 218, 165, 18, 189, 187, 130, 253, 189, 243, 222, 1, 62, 196, 60, 207, 188, 135, 81, 15, 190, 254, 3, 26, 62, 29, 7, 138, 61, 136, 88, 11, 190, 232, 194, 244, 61, 226, 41, 110, 61, 32, 53, 67, 190, 147, 120, 7, 190, 187, 134, 65, 57, 250, 58, 35, 62, 18, 145, 161, 60, 149, 167, 115, 189, 157, 132, 15, 62, 25, 108, 50, 189, 17, 234, 148, 190, 213, 161, 32, 191, 81, 182, 81, 62, 92, 185, 33, 191, 59, 11, 203, 189, 221, 106, 207, 61, 111, 81, 11, 62, 156, 217, 240, 190, 147, 134, 247, 190, 183, 239, 142, 190, 127, 95, 203, 60, 207, 171, 235, 61, 101, 107, 133, 62, 223, 66, 214, 62, 252, 244, 55, 190, 237, 126, 94, 62, 121, 128, 31, 191, 162, 44, 236, 190, 77, 111, 31, 190, 184, 236, 60, 191, 119, 70, 241, 61, 78, 53, 49, 62, 179, 183, 221, 61, 243, 223, 153, 62, 28, 174, 205, 189, 212, 72, 81, 59, 38, 233, 103, 62, 213, 119, 25, 190, 153, 31, 130, 190, 196, 220, 210, 61, 246, 190, 250, 61, 180, 94, 64, 190, 164, 73, 128, 61, 235, 217, 179, 189, 140, 202, 203, 61, 118, 146, 160, 189, 32, 73, 176, 61, 255, 105, 108, 60, 21, 140, 7, 62, 7, 81, 2, 190, 31, 149, 28, 62, 185, 131, 205, 61, 66, 137, 172, 58, 210, 11, 3, 62, 115, 89, 155, 61, 87, 37, 46, 189, 64, 75, 68, 190, 174, 100, 172, 61, 179, 33, 228, 61, 90, 204, 86, 62, 165, 143, 68, 62, 105, 197, 23, 62, 21, 45, 48, 190, 230, 4, 78, 62, 100, 191, 178, 61, 153, 21, 3, 62, 61, 108, 210, 61, 192, 54, 102, 190, 10, 209, 162, 189, 147, 243, 198, 188, 107, 66, 21, 189, 110, 0, 37, 190, 63, 217, 139, 62, 35, 234, 68, 190, 147, 7, 13, 62, 254, 99, 44, 62, 136, 160, 100, 62, 131, 217, 160, 190, 134, 0, 157, 189, 128, 214, 144, 61, 50, 15, 50, 61, 41, 6, 220, 61, 212, 32, 31, 62, 246, 52, 243, 188, 58, 3, 130, 62, 72, 249, 216, 188, 42, 77, 144, 61, 14, 200, 190, 61, 159, 36, 51, 189, 135, 55, 165, 61, 234, 154, 24, 191, 63, 139, 57, 190, 232, 144, 32, 190, 206, 247, 78, 59, 34, 196, 219, 60, 215, 185, 16, 62, 4, 212, 219, 189, 171, 130, 158, 60, 127, 215, 231, 189, 121, 90, 153, 59, 175, 197, 6, 190, 99, 179, 19, 190, 237, 199, 185, 61, 163, 25, 199, 61, 214, 127, 29, 62, 148, 228, 6, 190, 42, 51, 106, 189, 72, 74, 225, 188, 125, 177, 243, 189, 63, 247, 47, 62, 38, 122, 18, 189, 249, 218, 170, 59, 232, 202, 68, 189, 65, 125, 184, 60, 148, 155, 26, 190, 53, 149, 12, 190, 69, 202, 222, 189, 249, 154, 229, 189, 103, 109, 49, 62, 40, 195, 181, 189, 111, 108, 172, 58, 102, 137, 40, 190, 174, 111, 189, 187, 29, 114, 130, 61, 89, 20, 81, 189, 93, 18, 40, 62, 236, 3, 28, 62, 16, 38, 193, 189, 114, 42, 211, 189, 66, 88, 52, 190, 153, 78, 133, 189, 63, 245, 195, 189, 69, 211, 52, 62, 170, 68, 30, 190, 217, 204, 125, 189, 208, 246, 127, 189, 86, 220, 169, 61, 73, 212, 53, 190, 76, 160, 41, 61, 250, 24, 94, 61, 80, 198, 79, 62, 115, 68, 115, 190, 175, 112, 253, 188, 110, 114, 46, 62, 98, 237, 115, 62, 164, 24, 180, 61, 60, 188, 144, 61, 91, 5, 144, 189, 126, 193, 129, 62, 215, 10, 151, 61, 106, 181, 197, 62, 242, 49, 184, 61, 243, 59, 25, 190, 253, 15, 57, 62, 76, 57, 202, 190, 190, 115, 51, 61, 44, 174, 52, 190, 10, 104, 61, 190, 221, 176, 42, 189, 220, 29, 121, 62, 10, 113, 48, 188, 153, 190, 165, 186, 239, 254, 164, 189, 106, 52, 102, 190, 127, 240, 165, 61, 87, 194, 163, 61, 112, 244, 58, 190, 84, 101, 195, 61, 132, 201, 13, 190, 6, 117, 66, 59, 73, 16, 19, 188, 108, 17, 189, 190, 2, 209, 170, 190, 12, 156, 164, 60, 246, 87, 185, 189, 171, 132, 154, 190, 106, 99, 100, 62, 206, 160, 57, 190, 130, 45, 160, 188, 252, 145, 250, 61, 154, 20, 114, 189, 117, 7, 144, 189, 217, 62, 162, 188, 53, 155, 166, 61, 203, 136, 243, 189, 161, 194, 102, 62, 33, 209, 171, 60, 144, 14, 21, 62, 209, 147, 166, 187, 76, 174, 148, 190, 29, 195, 183, 190, 132, 183, 85, 188, 40, 253, 32, 62, 68, 28, 25, 190, 80, 57, 219, 189, 89, 8, 171, 190, 139, 47, 30, 62, 41, 237, 231, 61, 228, 193, 136, 62, 127, 49, 216, 189, 155, 69, 60, 190, 164, 141, 233, 61, 197, 75, 44, 190, 137, 84, 104, 60, 23, 206, 234, 188, 52, 34, 225, 189, 205, 162, 62, 190, 28, 81, 50, 190, 125, 172, 20, 187, 223, 55, 104, 62, 159, 181, 169, 61, 85, 178, 76, 190, 145, 176, 42, 62, 241, 238, 27, 62, 135, 6, 60, 189, 120, 162, 188, 62, 106, 83, 9, 190, 233, 142, 240, 61, 232, 68, 225, 190, 221, 60, 68, 190, 21, 218, 109, 189, 233, 13, 36, 189, 40, 39, 116, 60, 89, 233, 40, 189, 160, 81, 33, 189, 143, 95, 79, 61, 161, 198, 4, 189, 80, 161, 92, 190, 101, 243, 3, 190, 150, 4, 239, 189, 100, 195, 134, 62, 235, 183, 158, 191, 112, 187, 197, 61, 106, 53, 12, 191, 33, 20, 234, 190, 11, 205, 169, 62, 210, 201, 244, 59, 251, 229, 28, 191, 241, 250, 27, 61, 110, 125, 184, 189, 163, 31, 154, 62, 28, 32, 227, 61, 218, 54, 38, 62, 89, 59, 33, 191, 101, 161, 10, 62, 123, 18, 89, 62, 125, 180, 137, 61, 33, 73, 63, 62, 5, 154, 211, 62, 108, 190, 18, 188, 82, 194, 66, 191, 56, 47, 95, 190, 221, 107, 186, 191, 129, 83, 118, 62, 130, 233, 48, 62, 205, 151, 39, 62, 82, 174, 188, 190, 27, 243, 197, 61, 201, 87, 177, 189, 61, 73, 147, 189, 121, 31, 23, 190, 220, 124, 155, 189, 125, 98, 83, 189, 190, 201, 35, 190, 225, 92, 105, 190, 57, 225, 4, 62, 117, 221, 28, 62, 67, 172, 130, 61, 95, 243, 173, 189, 210, 77, 184, 189, 110, 50, 129, 61, 244, 78, 153, 61, 251, 30, 62, 189, 6, 200, 51, 190, 25, 5, 211, 189, 34, 252, 22, 61, 74, 134, 124, 188, 164, 137, 227, 61, 137, 141, 15, 189, 170, 182, 221, 189, 39, 131, 234, 189, 157, 39, 19, 190, 87, 211, 244, 61, 89, 69, 180, 189, 80, 48, 202, 61, 30, 142, 128, 61, 89, 58, 152, 189, 140, 21, 186, 59, 124, 91, 13, 62, 216, 12, 17, 189, 8, 250, 125, 190, 49, 184, 155, 189, 111, 62, 43, 190, 231, 92, 167, 189, 96, 48, 172, 61, 36, 122, 157, 189, 23, 32, 215, 189, 88, 225, 18, 190, 44, 154, 250, 61, 83, 146, 43, 189, 95, 239, 163, 189, 111, 15, 142, 189, 126, 59, 34, 190, 231, 23, 253, 189, 234, 243, 213, 61, 219, 129, 136, 61, 210, 174, 33, 190, 4, 135, 103, 61, 235, 194, 177, 60, 146, 93, 41, 190, 83, 54, 50, 190, 206, 44, 133, 189, 99, 130, 149, 189, 149, 200, 254, 189, 25, 92, 186, 60, 211, 233, 26, 62, 115, 226, 24, 190, 72, 161, 14, 190, 245, 207, 248, 189, 158, 79, 242, 189, 166, 21, 27, 190, 141, 254, 43, 62, 60, 219, 41, 190, 109, 254, 202, 189, 157, 180, 134, 61, 200, 31, 13, 62, 107, 204, 81, 62, 9, 12, 180, 191, 205, 219, 131, 62, 165, 246, 241, 189, 235, 194, 207, 190, 102, 132, 248, 61, 145, 81, 212, 190, 208, 159, 26, 191, 172, 182, 173, 62, 211, 133, 165, 190, 93, 217, 139, 189, 93, 136, 157, 62, 223, 247, 52, 62, 37, 109, 57, 190, 100, 251, 176, 187, 15, 78, 225, 62, 251, 187, 131, 190, 129, 223, 142, 62, 213, 53, 252, 62, 165, 79, 121, 62, 30, 142, 32, 191, 102, 210, 124, 62, 235, 91, 221, 191, 216, 177, 149, 62, 9, 15, 77, 190, 33, 110, 66, 62, 7, 53, 38, 190, 228, 199, 4, 62, 60, 140, 157, 61, 155, 149, 6, 190, 128, 238, 15, 190, 234, 79, 246, 61, 145, 38, 54, 62, 114, 155, 19, 189, 198, 135, 161, 62, 121, 225, 249, 188, 62, 153, 193, 60, 20, 63, 204, 60, 29, 225, 169, 61, 189, 94, 150, 190, 207, 104, 85, 60, 178, 159, 209, 61, 213, 2, 48, 62, 246, 254, 160, 188, 194, 16, 100, 189, 197, 119, 25, 62, 50, 142, 137, 62, 37, 56, 137, 189, 247, 247, 229, 61, 109, 178, 95, 189, 98, 117, 157, 190, 209, 169, 16, 62, 24, 147, 126, 190, 79, 190, 40, 62, 153, 137, 60, 189, 7, 29, 26, 62, 177, 114, 118, 190, 108, 253, 152, 62, 97, 53, 65, 190, 248, 3, 167, 187, 64, 127, 171, 61, 103, 150, 75, 190, 245, 10, 39, 189, 234, 99, 23, 190, 224, 131, 173, 62, 39, 102, 141, 191, 234, 236, 40, 60, 19, 13, 110, 190, 248, 32, 19, 191, 20, 49, 131, 188, 116, 63, 150, 190, 131, 244, 0, 191, 114, 109, 2, 61, 210, 208, 16, 189, 8, 90, 41, 189, 228, 221, 170, 189, 165, 203, 49, 62, 13, 36, 73, 188, 42, 240, 35, 62, 40, 130, 182, 62, 130, 75, 143, 61, 147, 214, 70, 62, 232, 100, 240, 62, 200, 221, 210, 188, 183, 141, 0, 191, 243, 54, 144, 61, 140, 41, 213, 191, 64, 121, 123, 62, 48, 236, 218, 62, 225, 199, 20, 62, 51, 105, 51, 189, 121, 163, 32, 62, 20, 56, 10, 62, 196, 93, 3, 187, 50, 95, 48, 190, 205, 120, 228, 61, 158, 105, 185, 190, 179, 236, 45, 63, 138, 59, 133, 62, 22, 68, 201, 191, 12, 122, 32, 191, 217, 248, 32, 191, 9, 153, 188, 61, 236, 130, 162, 62, 197, 10, 95, 62, 222, 156, 59, 61, 69, 137, 219, 60, 50, 179, 97, 191, 138, 30, 251, 190, 119, 44, 75, 189, 201, 192, 31, 62, 89, 177, 174, 190, 155, 156, 146, 189, 220, 127, 182, 62, 204, 20, 105, 191, 206, 196, 128, 61, 11, 132, 166, 62, 5, 162, 160, 62, 136, 96, 87, 62, 161, 151, 13, 191, 89, 170, 77, 191, 199, 162, 14, 62, 24, 200, 223, 62, 116, 92, 161, 188, 226, 181, 3, 62, 53, 106, 33, 62, 213, 56, 51, 191, 228, 185, 135, 189, 87, 21, 15, 190, 0, 53, 125, 189, 52, 54, 131, 190, 169, 137, 198, 190, 135, 125, 157, 190, 30, 12, 229, 61, 30, 245, 228, 189, 240, 179, 254, 190, 62, 214, 195, 190, 138, 142, 166, 188, 128, 157, 172, 62, 244, 176, 107, 61, 33, 112, 51, 61, 206, 16, 182, 190, 101, 19, 25, 62, 33, 117, 192, 61, 247, 67, 204, 61, 152, 33, 125, 62, 185, 101, 65, 62, 182, 201, 209, 61, 119, 69, 242, 190, 92, 137, 111, 190, 249, 178, 156, 189, 132, 157, 61, 61, 128, 121, 132, 62, 241, 86, 0, 61, 126, 113, 163, 190, 3, 15, 16, 62, 0, 168, 19, 190, 171, 60, 104, 190, 3, 227, 184, 61, 171, 88, 10, 62, 216, 128, 70, 62, 233, 120, 251, 189, 34, 192, 219, 190, 254, 6, 171, 61, 196, 50, 36, 62, 42, 219, 18, 190, 76, 39, 200, 190, 46, 52, 201, 62, 56, 42, 90, 191, 180, 244, 49, 190, 222, 71, 188, 62, 34, 229, 231, 61, 16, 210, 224, 61, 163, 32, 160, 190, 192, 138, 44, 190, 6, 3, 143, 60, 161, 117, 220, 62, 43, 70, 95, 62, 198, 41, 82, 62, 202, 254, 147, 62, 96, 138, 65, 61, 66, 221, 221, 190, 136, 111, 208, 189, 135, 24, 247, 189, 56, 15, 181, 61, 73, 214, 20, 190, 62, 50, 214, 60, 54, 33, 2, 188, 136, 114, 194, 190, 211, 163, 37, 62, 114, 15, 71, 62, 148, 126, 223, 189, 126, 48, 132, 62, 84, 89, 67, 190, 184, 213, 126, 189, 117, 131, 255, 190, 40, 175, 93, 61, 67, 32, 70, 60, 227, 130, 232, 186, 3, 170, 83, 191, 191, 126, 48, 190, 104, 228, 127, 189, 102, 71, 167, 62, 204, 247, 137, 61, 29, 32, 120, 190, 32, 166, 7, 191, 24, 245, 200, 62, 71, 93, 82, 62, 71, 47, 246, 61, 103, 56, 183, 62, 112, 209, 203, 62, 77, 185, 113, 62, 246, 81, 69, 191, 110, 142, 186, 190, 16, 28, 69, 190, 212, 236, 162, 61, 238, 168, 105, 62, 21, 254, 203, 188, 151, 203, 230, 190, 50, 175, 153, 61, 227, 110, 106, 190, 8, 101, 190, 190, 77, 13, 13, 62, 40, 220, 159, 186, 110, 48, 207, 189, 249, 120, 164, 190, 126, 76, 8, 61, 225, 236, 15, 191, 239, 31, 16, 63, 114, 123, 198, 189, 232, 101, 25, 190, 128, 27, 67, 186, 51, 46, 18, 63, 147, 224, 118, 188, 192, 80, 139, 190, 142, 254, 252, 189, 101, 206, 157, 189, 182, 211, 208, 62, 112, 144, 200, 190, 155, 13, 160, 190, 202, 108, 112, 191, 247, 228, 48, 191, 243, 89, 71, 62, 38, 121, 143, 191, 29, 197, 208, 62, 206, 61, 60, 62, 58, 19, 201, 191, 66, 241, 136, 60, 133, 98, 199, 61, 137, 116, 30, 62, 82, 189, 161, 190, 166, 226, 31, 191, 115, 236, 112, 62, 28, 115, 34, 191, 122, 213, 108, 62, 0, 192, 5, 62, 70, 212, 172, 62, 214, 68, 150, 190, 178, 11, 21, 190, 89, 188, 152, 62, 158, 123, 83, 189, 228, 245, 48, 187, 88, 181, 73, 189, 79, 136, 169, 62, 105, 35, 84, 190, 221, 202, 90, 62, 80, 135, 92, 62, 99, 243, 183, 61, 229, 197, 15, 189, 184, 97, 76, 190, 206, 66, 186, 189, 31, 153, 149, 62, 158, 101, 145, 190, 106, 233, 240, 62, 190, 211, 199, 62, 175, 128, 103, 190, 22, 86, 19, 187, 93, 28, 139, 190, 161, 24, 84, 189, 172, 25, 38, 62, 54, 10, 26, 63, 251, 236, 7, 190, 210, 85, 15, 190, 233, 185, 193, 62, 19, 95, 225, 59, 185, 226, 22, 190, 223, 43, 161, 190, 124, 83, 130, 189, 36, 59, 22, 189, 149, 130, 71, 189, 22, 38, 36, 62, 137, 205, 39, 190, 79, 167, 15, 60, 150, 230, 49, 62, 210, 215, 160, 189, 122, 119, 198, 188, 172, 82, 179, 61, 111, 224, 5, 190, 188, 211, 39, 62, 229, 181, 19, 62, 87, 121, 153, 189, 1, 103, 245, 189, 224, 48, 40, 187, 91, 184, 52, 62, 41, 147, 78, 61, 30, 151, 39, 189, 88, 63, 36, 62, 101, 205, 45, 190, 63, 17, 196, 189, 229, 120, 150, 187, 10, 128, 34, 190, 121, 163, 32, 190, 199, 121, 150, 61, 44, 242, 158, 188, 183, 155, 50, 190, 52, 192, 50, 189, 116, 227, 51, 190, 0, 48, 12, 190, 235, 18, 74, 60, 84, 249, 13, 62, 234, 159, 210, 190, 245, 15, 237, 62, 175, 234, 86, 61, 17, 247, 109, 190, 98, 168, 214, 60, 29, 29, 135, 190, 184, 48, 38, 62, 134, 93, 194, 62, 123, 136, 132, 61, 158, 189, 30, 188, 114, 50, 129, 190, 214, 125, 30, 191, 204, 241, 5, 62, 138, 152, 216, 62, 128, 116, 106, 190, 116, 196, 50, 190, 50, 186, 128, 190, 57, 162, 27, 62, 81, 213, 225, 190, 146, 2, 29, 62, 43, 9, 170, 62, 62, 21, 66, 62, 250, 14, 88, 62, 212, 170, 6, 189, 65, 156, 46, 191, 220, 145, 219, 61, 47, 96, 70, 62, 35, 208, 176, 189, 19, 54, 110, 62, 252, 99, 23, 61, 143, 211, 47, 191, 228, 186, 29, 61, 119, 141, 232, 190, 50, 181, 101, 191, 146, 173, 77, 62, 8, 49, 57, 189, 117, 223, 205, 189, 170, 209, 35, 62, 226, 151, 213, 190, 178, 31, 134, 189, 45, 199, 253, 62, 12, 4, 150, 190, 21, 11, 15, 62, 255, 215, 221, 189, 93, 70, 159, 61, 137, 163, 206, 62, 30, 19, 192, 59, 100, 158, 4, 191, 201, 26, 54, 190, 43, 176, 15, 62, 62, 254, 176, 61, 220, 188, 240, 190, 4, 152, 206, 62, 234, 56, 192, 62, 83, 62, 194, 191, 203, 221, 62, 62, 167, 10, 225, 189, 250, 121, 254, 61, 83, 37, 73, 190, 251, 182, 71, 191, 106, 182, 45, 62, 48, 86, 2, 190, 75, 246, 246, 189, 105, 180, 51, 62, 118, 221, 142, 61, 9, 16, 157, 188, 3, 123, 131, 62, 230, 16, 65, 188, 108, 39, 87, 191, 182, 106, 26, 60, 68, 16, 121, 61, 6, 243, 160, 62, 101, 91, 87, 62, 117, 222, 124, 62, 211, 117, 77, 61, 115, 122, 195, 189, 158, 172, 207, 61, 46, 120, 5, 62, 2, 228, 73, 62, 116, 49, 167, 190, 241, 103, 138, 61, 123, 8, 145, 189, 228, 81, 143, 191, 135, 16, 173, 189, 97, 148, 250, 62, 21, 71, 219, 62, 99, 206, 166, 190, 248, 65, 200, 61, 162, 175, 41, 190, 206, 106, 82, 60, 250, 82, 20, 62, 64, 152, 84, 61, 180, 154, 242, 61, 20, 148, 127, 188, 242, 163, 205, 189, 33, 134, 220, 189, 15, 120, 116, 62, 212, 112, 146, 191, 122, 147, 182, 188, 111, 58, 105, 189, 228, 5, 35, 190, 145, 183, 224, 189, 214, 105, 233, 61, 254, 111, 1, 189, 228, 245, 67, 190, 69, 186, 215, 60, 183, 245, 71, 61, 109, 237, 167, 190, 109, 190, 233, 61, 112, 46, 162, 62, 201, 132, 185, 190, 220, 31, 79, 189, 203, 251, 137, 189, 47, 165, 134, 188, 219, 170, 182, 190, 15, 194, 75, 190, 0, 235, 71, 62, 159, 240, 169, 62, 80, 126, 41, 191, 201, 219, 248, 189, 62, 160, 85, 190, 219, 231, 19, 62, 136, 128, 104, 190, 230, 34, 188, 62, 41, 123, 201, 61, 185, 220, 67, 62, 183, 44, 170, 190, 151, 103, 66, 60, 177, 63, 220, 189, 177, 53, 205, 61, 15, 49, 1, 190, 222, 66, 226, 190, 182, 146, 98, 189, 130, 171, 105, 188, 115, 249, 9, 62, 78, 30, 108, 62, 124, 183, 111, 190, 201, 154, 207, 61, 101, 89, 118, 62, 115, 60, 228, 189, 110, 0, 148, 189, 251, 202, 14, 61, 24, 179, 25, 190, 97, 210, 57, 59, 20, 71, 201, 61, 33, 12, 182, 61, 163, 5, 25, 62, 182, 53, 137, 62, 229, 38, 151, 62, 207, 236, 32, 189, 174, 44, 178, 61, 249, 47, 117, 190, 86, 193, 60, 190, 162, 17, 147, 61, 103, 245, 151, 62, 6, 40, 143, 60, 5, 90, 131, 61, 188, 197, 94, 190, 120, 64, 77, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 220, 60, 189, 175, 237, 229, 61, 47, 111, 184, 58, 105, 132, 43, 61, 232, 210, 92, 62, 119, 150, 147, 59, 194, 9, 58, 61, 173, 47, 255, 189, 6, 164, 95, 61, 249, 231, 84, 62, 251, 97, 46, 190, 116, 40, 161, 62, 203, 165, 79, 189, 34, 127, 141, 188, 50, 4, 242, 61, 228, 128, 63, 190, 70, 235, 198, 189, 245, 225, 142, 61, 244, 222, 174, 61, 71, 168, 211, 61, 145, 217, 179, 62, 79, 254, 202, 60, 25, 192, 169, 190, 29, 47, 47, 62, 165, 127, 70, 62, 241, 221, 66, 190, 153, 167, 51, 190, 191, 152, 22, 62, 72, 101, 185, 61, 226, 78, 100, 62, 199, 250, 227, 188, 8, 37, 119, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 13, 62, 190, 24, 53, 154, 62, 178, 214, 109, 62, 133, 95, 213, 62, 123, 115, 116, 189, 24, 78, 52, 189, 221, 21, 170, 189, 35, 95, 250, 62, 108, 134, 126, 189, 108, 197, 0, 61, 123, 163, 167, 188, 46, 114, 79, 189, 15, 138, 217, 189, 217, 58, 1, 60, 106, 86, 116, 63, 252, 163, 244, 61, 195, 148, 140, 61, 143, 27, 104, 63, 141, 120, 76, 187, 99, 220, 15, 63, 180, 11, 152, 191, 11, 183, 152, 62, 130, 209, 28, 191, 80, 173, 28, 63, 34, 108, 161, 63, 232, 50, 1, 63, 92, 249, 25, 189, 196, 58, 33, 191, 78, 198, 19, 63, 248, 87, 200, 190, 45, 204, 1, 191, 56, 199, 65, 190, 147, 129, 166, 189, 197, 220, 208, 190, 90, 230, 157, 62, 27, 253, 26, 62, 58, 88, 185, 190, 45, 30, 17, 190, 7, 117, 13, 62, 143, 209, 213, 190, 250, 175, 36, 190, 163, 153, 107, 190, 135, 187, 208, 59, 178, 66, 129, 190, 210, 158, 255, 189, 33, 37, 12, 189, 17, 242, 41, 62, 0, 175, 120, 60, 57, 224, 250, 61, 235, 117, 121, 62, 199, 190, 131, 190, 124, 34, 78, 189, 206, 141, 188, 62, 47, 19, 46, 61, 117, 93, 171, 62, 218, 68, 8, 63, 54, 134, 109, 190, 16, 231, 171, 61, 159, 46, 45, 189, 208, 175, 74, 62, 188, 143, 88, 60, 171, 66, 82, 189, 117, 77, 8, 62, 163, 110, 31, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 40, 246, 189, 124, 136, 82, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {230, 110, 53, 63, 121, 78, 243, 61, 69, 224, 2, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {127, 47, 201, 191, 248, 149, 55, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0011/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}