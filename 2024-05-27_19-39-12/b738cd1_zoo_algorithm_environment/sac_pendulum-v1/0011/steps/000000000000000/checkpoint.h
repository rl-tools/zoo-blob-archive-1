// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 135, 185, 61, 36, 214, 255, 190, 102, 215, 143, 59, 19, 197, 22, 62, 112, 157, 152, 61, 132, 16, 209, 190, 116, 183, 167, 190, 112, 69, 241, 61, 177, 218, 157, 190, 42, 84, 201, 189, 189, 91, 39, 62, 181, 202, 41, 190, 28, 253, 240, 190, 145, 209, 238, 61, 139, 155, 178, 62, 30, 246, 152, 190, 38, 145, 255, 190, 223, 233, 197, 190, 134, 29, 81, 190, 239, 93, 234, 190, 61, 42, 205, 62, 52, 178, 202, 189, 58, 149, 250, 62, 137, 16, 209, 190, 231, 135, 164, 61, 141, 220, 196, 62, 195, 182, 1, 63, 208, 31, 250, 190, 171, 4, 232, 62, 143, 21, 9, 190, 132, 206, 171, 62, 69, 73, 75, 62, 209, 229, 7, 191, 177, 16, 220, 62, 140, 71, 188, 61, 235, 187, 9, 62, 81, 134, 155, 190, 218, 148, 178, 190, 45, 159, 137, 62, 243, 205, 109, 190, 121, 67, 95, 190, 106, 60, 19, 63, 13, 188, 160, 62, 79, 176, 242, 62, 176, 17, 134, 62, 4, 194, 3, 191, 52, 5, 180, 190, 69, 38, 194, 62, 252, 222, 252, 62, 3, 17, 181, 190, 119, 27, 243, 190, 166, 155, 227, 62, 30, 75, 17, 191, 176, 183, 1, 62, 221, 177, 9, 63, 65, 31, 41, 190, 180, 117, 173, 61, 177, 221, 238, 61, 103, 234, 213, 190, 57, 67, 152, 190, 227, 229, 165, 59, 190, 7, 183, 190, 57, 6, 141, 190, 202, 238, 128, 61, 152, 223, 197, 62, 22, 84, 114, 62, 92, 147, 64, 62, 54, 97, 176, 62, 7, 241, 79, 62, 238, 110, 201, 190, 17, 104, 240, 190, 233, 222, 205, 190, 240, 150, 237, 190, 173, 142, 158, 190, 22, 74, 15, 63, 204, 252, 7, 62, 168, 206, 124, 189, 212, 223, 212, 190, 19, 192, 212, 62, 70, 96, 24, 62, 164, 106, 244, 189, 9, 105, 14, 63, 252, 181, 40, 189, 203, 190, 13, 63, 104, 76, 95, 62, 89, 219, 8, 187, 57, 214, 233, 190, 234, 193, 122, 61, 163, 244, 180, 61, 175, 3, 154, 61, 144, 83, 114, 190, 79, 41, 9, 191, 245, 97, 11, 63, 67, 181, 168, 60, 168, 251, 144, 190, 152, 6, 224, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 198, 19, 191, 29, 140, 252, 189, 125, 0, 206, 190, 223, 102, 11, 63, 128, 230, 3, 191, 56, 229, 16, 191, 81, 142, 204, 190, 63, 111, 17, 63, 125, 65, 207, 190, 70, 196, 216, 61, 66, 76, 9, 63, 175, 34, 188, 62, 233, 124, 134, 190, 137, 222, 208, 62, 129, 243, 199, 62, 143, 95, 210, 62, 8, 214, 200, 62, 220, 246, 21, 190, 176, 241, 78, 190, 247, 57, 118, 190, 39, 60, 0, 63, 226, 161, 191, 189, 239, 224, 17, 63, 203, 40, 170, 190, 206, 136, 3, 63, 175, 155, 119, 189, 216, 192, 203, 62, 107, 204, 204, 189, 7, 72, 55, 62, 82, 168, 246, 62, 231, 71, 241, 190, 44, 220, 81, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 206, 224, 61, 59, 95, 80, 61, 105, 28, 235, 61, 111, 34, 220, 61, 56, 125, 234, 189, 179, 239, 59, 61, 156, 35, 93, 61, 238, 228, 51, 62, 164, 201, 195, 61, 99, 71, 36, 190, 126, 170, 255, 189, 154, 149, 23, 190, 97, 73, 75, 188, 73, 159, 123, 61, 137, 41, 201, 61, 85, 250, 216, 61, 188, 178, 18, 62, 81, 37, 146, 61, 125, 220, 201, 61, 255, 199, 43, 190, 7, 31, 3, 62, 149, 2, 198, 60, 33, 250, 63, 60, 74, 78, 143, 59, 235, 8, 21, 189, 177, 170, 239, 61, 172, 96, 148, 60, 117, 7, 238, 59, 234, 29, 228, 61, 63, 249, 105, 188, 175, 55, 70, 61, 152, 164, 43, 62, 228, 191, 120, 61, 204, 169, 176, 188, 63, 250, 102, 189, 158, 195, 231, 61, 93, 79, 10, 190, 254, 228, 147, 61, 102, 125, 60, 189, 141, 106, 25, 62, 58, 22, 215, 60, 188, 11, 57, 61, 236, 156, 14, 190, 151, 155, 33, 62, 114, 109, 255, 61, 17, 227, 39, 189, 154, 188, 39, 190, 222, 173, 47, 61, 67, 242, 19, 189, 77, 88, 82, 188, 158, 91, 221, 189, 219, 175, 209, 188, 106, 32, 150, 61, 55, 163, 231, 189, 144, 134, 231, 61, 108, 86, 240, 60, 106, 186, 249, 189, 87, 95, 19, 62, 68, 121, 52, 190, 201, 185, 117, 189, 162, 173, 96, 61, 237, 36, 27, 190, 82, 205, 213, 189, 137, 255, 224, 61, 181, 243, 135, 60, 175, 26, 242, 188, 101, 123, 6, 61, 166, 29, 165, 189, 50, 128, 15, 62, 220, 38, 168, 189, 242, 239, 212, 188, 202, 88, 250, 61, 25, 48, 136, 188, 239, 48, 206, 189, 86, 98, 35, 188, 121, 101, 147, 188, 236, 157, 236, 189, 212, 98, 187, 189, 206, 142, 41, 62, 251, 69, 24, 62, 186, 171, 217, 59, 11, 246, 158, 189, 85, 17, 186, 61, 44, 94, 199, 188, 141, 7, 254, 60, 79, 85, 29, 61, 144, 241, 249, 187, 132, 7, 17, 62, 106, 37, 196, 189, 120, 178, 63, 61, 199, 236, 144, 189, 1, 105, 173, 60, 27, 109, 204, 61, 13, 223, 176, 60, 185, 251, 4, 62, 250, 158, 48, 190, 147, 141, 24, 189, 128, 224, 52, 62, 141, 112, 30, 189, 10, 127, 130, 61, 161, 153, 30, 60, 189, 173, 118, 61, 28, 199, 10, 189, 26, 206, 6, 62, 176, 49, 250, 60, 119, 235, 85, 189, 5, 27, 209, 61, 232, 169, 234, 189, 38, 14, 226, 60, 124, 174, 161, 189, 107, 217, 31, 61, 59, 48, 130, 61, 36, 8, 43, 189, 244, 111, 93, 60, 130, 46, 49, 62, 209, 138, 248, 61, 176, 191, 190, 60, 230, 79, 22, 189, 39, 111, 50, 190, 87, 51, 49, 190, 122, 34, 159, 189, 162, 26, 165, 61, 88, 10, 239, 61, 81, 109, 48, 190, 156, 131, 224, 189, 162, 77, 241, 189, 66, 128, 85, 188, 37, 156, 39, 190, 174, 236, 32, 62, 76, 75, 4, 190, 54, 22, 46, 62, 252, 89, 240, 189, 187, 229, 158, 60, 180, 207, 191, 60, 154, 50, 181, 60, 121, 37, 43, 62, 220, 55, 112, 61, 244, 145, 214, 188, 31, 122, 59, 189, 207, 15, 129, 61, 74, 21, 195, 189, 111, 115, 140, 189, 18, 159, 4, 189, 125, 154, 128, 189, 157, 146, 7, 189, 232, 217, 27, 190, 232, 70, 37, 189, 216, 165, 121, 189, 61, 219, 3, 190, 39, 115, 143, 189, 46, 96, 216, 61, 48, 48, 27, 62, 109, 206, 243, 61, 243, 15, 71, 61, 6, 24, 201, 61, 74, 114, 208, 189, 114, 165, 8, 190, 209, 99, 31, 62, 14, 51, 14, 62, 176, 156, 0, 62, 129, 136, 219, 61, 3, 255, 202, 189, 249, 127, 64, 61, 71, 222, 40, 61, 49, 51, 86, 189, 68, 180, 87, 60, 123, 27, 82, 189, 172, 62, 40, 190, 207, 158, 40, 190, 97, 126, 18, 61, 196, 94, 128, 61, 254, 183, 232, 189, 171, 66, 162, 61, 63, 145, 235, 61, 73, 177, 19, 189, 10, 110, 3, 189, 5, 208, 252, 189, 46, 14, 135, 189, 76, 201, 84, 61, 24, 203, 32, 190, 162, 22, 37, 62, 87, 187, 185, 188, 66, 203, 156, 61, 112, 99, 31, 62, 187, 135, 234, 61, 117, 95, 128, 189, 44, 172, 187, 61, 168, 205, 131, 61, 43, 55, 5, 62, 140, 126, 211, 61, 65, 141, 51, 61, 59, 248, 99, 189, 71, 58, 32, 190, 100, 233, 204, 189, 228, 209, 238, 189, 48, 154, 14, 190, 6, 234, 165, 188, 189, 141, 156, 61, 85, 71, 71, 189, 74, 154, 152, 61, 167, 250, 94, 61, 231, 6, 87, 189, 11, 254, 30, 62, 200, 190, 182, 188, 168, 250, 35, 190, 95, 201, 30, 190, 20, 113, 11, 190, 80, 242, 240, 189, 21, 43, 176, 61, 177, 21, 88, 61, 11, 0, 108, 189, 73, 83, 36, 60, 50, 225, 157, 189, 243, 222, 1, 62, 75, 8, 18, 60, 113, 16, 213, 189, 245, 241, 29, 62, 48, 38, 233, 61, 96, 56, 168, 189, 232, 194, 244, 61, 74, 165, 220, 61, 60, 28, 38, 190, 147, 120, 7, 190, 187, 134, 65, 57, 250, 58, 35, 62, 94, 34, 232, 189, 154, 174, 151, 189, 158, 55, 156, 61, 22, 91, 155, 60, 103, 227, 47, 190, 205, 175, 217, 189, 116, 63, 76, 61, 156, 211, 38, 62, 15, 201, 6, 190, 220, 171, 120, 189, 202, 117, 51, 188, 253, 255, 220, 61, 173, 39, 170, 189, 82, 79, 27, 62, 87, 82, 192, 187, 96, 250, 12, 187, 90, 129, 188, 189, 102, 14, 49, 62, 3, 151, 45, 190, 34, 60, 16, 62, 12, 231, 91, 189, 254, 57, 83, 189, 223, 60, 36, 190, 125, 106, 33, 190, 207, 137, 34, 190, 163, 76, 34, 62, 60, 45, 38, 62, 24, 113, 37, 62, 46, 232, 245, 61, 58, 191, 22, 189, 142, 151, 38, 62, 213, 119, 25, 190, 252, 179, 46, 190, 34, 123, 201, 189, 108, 208, 218, 61, 176, 197, 35, 60, 12, 0, 128, 61, 95, 52, 2, 61, 78, 38, 59, 61, 234, 98, 1, 60, 135, 241, 19, 62, 204, 37, 137, 59, 121, 232, 80, 188, 135, 184, 69, 189, 87, 215, 210, 61, 234, 207, 86, 188, 109, 43, 193, 189, 208, 195, 160, 61, 204, 104, 12, 190, 151, 58, 184, 189, 10, 235, 179, 189, 150, 42, 137, 189, 232, 165, 86, 61, 177, 140, 108, 61, 225, 179, 251, 61, 12, 63, 25, 62, 215, 18, 134, 61, 217, 33, 186, 60, 139, 73, 27, 61, 151, 46, 169, 61, 72, 219, 162, 187, 51, 92, 188, 189, 175, 209, 77, 189, 147, 243, 198, 188, 5, 129, 51, 190, 203, 160, 92, 189, 44, 224, 28, 62, 126, 17, 236, 189, 112, 164, 43, 62, 28, 92, 137, 61, 223, 16, 248, 61, 184, 254, 73, 59, 153, 209, 45, 190, 126, 106, 163, 189, 42, 241, 85, 189, 60, 72, 49, 60, 193, 15, 8, 62, 79, 233, 21, 62, 9, 13, 5, 62, 32, 253, 251, 189, 99, 173, 187, 188, 95, 71, 211, 188, 161, 76, 45, 188, 27, 135, 130, 61, 75, 71, 174, 189, 198, 195, 205, 189, 163, 249, 60, 189, 116, 22, 151, 189, 215, 174, 129, 59, 169, 141, 66, 61, 36, 158, 149, 188, 117, 13, 157, 189, 185, 77, 32, 190, 176, 81, 138, 61, 133, 219, 13, 190, 99, 179, 19, 190, 237, 199, 185, 61, 163, 25, 199, 61, 214, 127, 29, 62, 148, 228, 6, 190, 42, 51, 106, 189, 72, 74, 225, 188, 125, 177, 243, 189, 63, 247, 47, 62, 38, 122, 18, 189, 249, 218, 170, 59, 232, 202, 68, 189, 65, 125, 184, 60, 148, 155, 26, 190, 53, 149, 12, 190, 69, 202, 222, 189, 249, 154, 229, 189, 103, 109, 49, 62, 40, 195, 181, 189, 111, 108, 172, 58, 102, 137, 40, 190, 174, 111, 189, 187, 29, 114, 130, 61, 89, 20, 81, 189, 93, 18, 40, 62, 236, 3, 28, 62, 16, 38, 193, 189, 114, 42, 211, 189, 66, 88, 52, 190, 153, 78, 133, 189, 63, 245, 195, 189, 69, 211, 52, 62, 170, 68, 30, 190, 99, 182, 231, 189, 70, 155, 23, 190, 17, 44, 184, 188, 172, 58, 193, 61, 82, 183, 103, 61, 241, 231, 181, 61, 63, 1, 240, 61, 244, 202, 17, 189, 193, 171, 117, 188, 141, 22, 143, 61, 212, 85, 220, 61, 10, 100, 243, 61, 230, 206, 49, 62, 197, 103, 27, 62, 234, 0, 23, 62, 13, 143, 207, 60, 140, 183, 32, 62, 87, 17, 117, 185, 97, 118, 31, 189, 120, 149, 224, 61, 204, 111, 137, 188, 234, 138, 41, 62, 186, 30, 206, 189, 250, 166, 8, 190, 67, 68, 107, 61, 131, 43, 38, 62, 30, 4, 81, 61, 135, 28, 145, 189, 254, 109, 195, 189, 22, 94, 171, 189, 86, 214, 205, 61, 87, 194, 163, 61, 200, 125, 35, 61, 227, 111, 34, 62, 175, 139, 87, 189, 91, 204, 23, 62, 215, 250, 79, 188, 153, 139, 32, 190, 146, 103, 44, 188, 214, 174, 161, 189, 235, 136, 226, 60, 84, 123, 31, 190, 82, 25, 249, 61, 250, 11, 160, 187, 234, 48, 133, 189, 227, 106, 24, 62, 148, 46, 208, 189, 42, 44, 172, 189, 141, 53, 17, 190, 159, 192, 223, 188, 193, 162, 21, 190, 54, 126, 26, 62, 89, 48, 181, 60, 215, 135, 24, 62, 232, 148, 88, 188, 38, 50, 17, 190, 58, 214, 38, 190, 21, 114, 20, 189, 46, 86, 116, 61, 115, 164, 200, 189, 4, 139, 168, 189, 121, 117, 96, 189, 124, 72, 22, 188, 41, 237, 231, 61, 3, 125, 11, 62, 140, 241, 51, 62, 237, 173, 31, 190, 156, 25, 116, 61, 239, 21, 4, 188, 242, 11, 174, 189, 208, 240, 11, 61, 46, 229, 51, 61, 167, 62, 119, 189, 169, 169, 43, 190, 88, 93, 69, 189, 40, 222, 25, 62, 106, 153, 96, 60, 142, 82, 243, 189, 198, 235, 7, 61, 254, 231, 42, 62, 129, 185, 198, 59, 206, 43, 213, 61, 145, 27, 128, 60, 225, 104, 15, 62, 244, 253, 38, 190, 255, 250, 221, 189, 60, 109, 44, 62, 56, 252, 15, 190, 247, 226, 186, 189, 242, 184, 178, 60, 184, 20, 29, 61, 96, 151, 145, 60, 99, 141, 85, 189, 216, 132, 33, 190, 15, 20, 165, 189, 150, 4, 239, 189, 106, 206, 94, 59, 60, 15, 11, 190, 30, 115, 20, 62, 17, 167, 48, 190, 199, 90, 157, 61, 128, 20, 36, 62, 128, 9, 53, 61, 251, 15, 235, 60, 114, 99, 127, 60, 178, 236, 136, 186, 41, 7, 246, 61, 17, 195, 213, 189, 65, 87, 174, 61, 125, 80, 194, 189, 223, 146, 253, 189, 86, 179, 83, 61, 29, 11, 131, 188, 189, 110, 28, 190, 118, 47, 22, 189, 43, 33, 2, 188, 139, 177, 29, 62, 21, 217, 1, 190, 220, 18, 97, 60, 57, 253, 105, 60, 107, 157, 5, 189, 220, 234, 210, 61, 109, 55, 193, 189, 206, 6, 66, 61, 99, 8, 112, 189, 155, 67, 164, 61, 91, 15, 112, 189, 220, 124, 155, 189, 82, 67, 46, 189, 34, 59, 39, 190, 7, 40, 17, 190, 51, 167, 7, 62, 77, 181, 36, 62, 8, 81, 206, 61, 178, 150, 178, 188, 32, 208, 240, 189, 202, 86, 248, 61, 124, 231, 251, 61, 188, 9, 21, 61, 237, 156, 212, 189, 51, 22, 2, 189, 142, 62, 173, 61, 209, 60, 203, 61, 37, 150, 42, 62, 63, 98, 124, 61, 212, 72, 41, 61, 165, 140, 229, 189, 115, 149, 152, 189, 171, 70, 206, 61, 98, 212, 18, 186, 54, 73, 7, 62, 147, 166, 20, 62, 5, 91, 99, 189, 41, 227, 0, 62, 203, 33, 4, 62, 48, 147, 36, 187, 170, 91, 8, 190, 69, 42, 130, 189, 72, 77, 247, 189, 231, 92, 167, 189, 96, 48, 172, 61, 36, 122, 157, 189, 23, 32, 215, 189, 88, 225, 18, 190, 44, 154, 250, 61, 83, 146, 43, 189, 95, 239, 163, 189, 111, 15, 142, 189, 126, 59, 34, 190, 231, 23, 253, 189, 234, 243, 213, 61, 219, 129, 136, 61, 210, 174, 33, 190, 4, 135, 103, 61, 235, 194, 177, 60, 146, 93, 41, 190, 83, 54, 50, 190, 206, 44, 133, 189, 99, 130, 149, 189, 149, 200, 254, 189, 25, 92, 186, 60, 211, 233, 26, 62, 115, 226, 24, 190, 72, 161, 14, 190, 245, 207, 248, 189, 158, 79, 242, 189, 166, 21, 27, 190, 141, 254, 43, 62, 60, 219, 41, 190, 109, 254, 202, 189, 157, 180, 134, 61, 200, 31, 13, 62, 12, 57, 30, 62, 50, 130, 154, 61, 70, 9, 14, 62, 237, 2, 160, 189, 52, 240, 49, 189, 25, 223, 41, 189, 103, 91, 51, 190, 26, 136, 239, 189, 168, 181, 245, 60, 73, 217, 119, 189, 122, 96, 47, 190, 111, 215, 31, 62, 254, 247, 1, 62, 25, 227, 28, 190, 247, 226, 147, 189, 242, 203, 227, 61, 9, 35, 43, 190, 56, 28, 200, 61, 83, 244, 45, 189, 21, 233, 44, 61, 176, 84, 170, 189, 101, 196, 251, 61, 245, 162, 229, 188, 85, 234, 31, 62, 11, 213, 154, 189, 200, 121, 10, 61, 100, 155, 48, 61, 106, 211, 241, 189, 95, 94, 113, 189, 109, 142, 200, 189, 121, 158, 170, 189, 234, 79, 246, 61, 74, 85, 218, 61, 223, 5, 69, 189, 235, 91, 13, 62, 104, 198, 247, 61, 148, 95, 186, 61, 12, 35, 19, 60, 54, 199, 1, 189, 79, 129, 130, 189, 55, 26, 169, 189, 104, 240, 72, 189, 228, 133, 172, 188, 225, 59, 66, 189, 184, 119, 174, 189, 53, 52, 235, 61, 158, 60, 39, 62, 237, 38, 239, 189, 73, 145, 22, 189, 255, 112, 37, 190, 232, 58, 233, 189, 65, 53, 0, 62, 189, 178, 119, 189, 156, 154, 190, 61, 97, 88, 162, 61, 238, 15, 213, 61, 76, 215, 46, 190, 5, 98, 230, 61, 29, 25, 32, 190, 253, 155, 194, 189, 112, 191, 141, 189, 131, 14, 141, 189, 96, 92, 93, 189, 234, 99, 23, 190, 3, 132, 14, 188, 65, 48, 52, 62, 129, 188, 203, 188, 223, 200, 189, 189, 50, 251, 149, 189, 59, 127, 221, 189, 20, 100, 218, 189, 185, 77, 148, 189, 129, 44, 4, 190, 33, 152, 187, 60, 217, 232, 19, 190, 0, 136, 30, 190, 26, 213, 41, 62, 45, 61, 114, 61, 212, 235, 8, 62, 173, 48, 234, 61, 72, 94, 203, 188, 190, 232, 54, 189, 47, 38, 139, 61, 142, 144, 52, 189, 94, 146, 17, 62, 92, 41, 4, 189, 145, 46, 102, 61, 114, 161, 33, 62, 16, 59, 22, 62, 254, 130, 139, 61, 246, 183, 210, 61, 154, 191, 41, 61, 164, 235, 194, 60, 168, 68, 23, 61, 111, 148, 20, 190, 205, 120, 228, 61, 196, 195, 144, 61, 239, 136, 160, 61, 227, 171, 197, 61, 57, 221, 196, 61, 184, 190, 40, 190, 77, 206, 227, 61, 64, 219, 187, 189, 27, 20, 35, 190, 183, 179, 5, 62, 216, 88, 50, 189, 102, 154, 73, 61, 101, 4, 169, 189, 30, 124, 104, 189, 126, 110, 123, 189, 205, 92, 191, 188, 117, 176, 37, 190, 236, 70, 118, 61, 14, 196, 175, 61, 226, 253, 138, 189, 230, 105, 160, 189, 85, 95, 38, 190, 193, 240, 37, 62, 21, 78, 49, 62, 172, 7, 201, 60, 144, 96, 32, 190, 35, 56, 163, 189, 210, 39, 23, 62, 197, 246, 55, 61, 185, 165, 144, 60, 192, 142, 7, 62, 227, 126, 247, 59, 228, 185, 135, 189, 199, 177, 24, 190, 253, 134, 28, 62, 181, 116, 52, 190, 88, 65, 248, 189, 96, 38, 18, 190, 45, 253, 181, 61, 81, 197, 185, 61, 165, 221, 93, 60, 245, 209, 193, 189, 235, 88, 49, 61, 47, 5, 187, 61, 57, 61, 109, 60, 202, 123, 244, 61, 183, 78, 79, 189, 30, 180, 44, 60, 141, 105, 4, 61, 173, 87, 180, 189, 66, 163, 98, 188, 228, 186, 24, 62, 117, 6, 159, 61, 209, 194, 167, 61, 212, 153, 141, 58, 67, 248, 0, 62, 150, 187, 138, 61, 2, 120, 152, 61, 174, 233, 130, 60, 16, 197, 235, 189, 19, 94, 18, 62, 95, 245, 90, 189, 225, 43, 137, 189, 231, 130, 53, 60, 171, 88, 10, 62, 227, 17, 47, 62, 49, 233, 221, 61, 222, 11, 4, 189, 215, 135, 51, 62, 6, 223, 12, 62, 201, 122, 221, 189, 94, 238, 18, 61, 215, 42, 184, 61, 105, 44, 130, 189, 214, 239, 39, 62, 252, 197, 117, 61, 100, 35, 16, 62, 43, 171, 2, 62, 226, 194, 167, 60, 119, 104, 52, 190, 155, 46, 50, 189, 95, 194, 155, 60, 249, 251, 80, 189, 14, 226, 27, 190, 39, 196, 19, 62, 184, 247, 156, 189, 10, 217, 42, 190, 154, 47, 221, 189, 249, 62, 236, 188, 209, 77, 254, 60, 19, 18, 216, 189, 115, 196, 250, 189, 237, 175, 206, 61, 241, 174, 37, 190, 151, 9, 33, 62, 159, 106, 50, 189, 148, 126, 223, 189, 250, 19, 242, 61, 200, 126, 238, 59, 192, 179, 80, 187, 57, 71, 11, 190, 33, 86, 186, 61, 237, 75, 116, 61, 49, 197, 186, 61, 54, 228, 172, 61, 181, 10, 0, 61, 43, 84, 36, 60, 80, 144, 150, 189, 170, 252, 123, 61, 84, 202, 48, 190, 130, 29, 128, 189, 55, 227, 172, 61, 34, 38, 29, 186, 2, 50, 52, 190, 128, 75, 179, 189, 19, 32, 200, 61, 209, 83, 166, 61, 169, 173, 197, 189, 218, 189, 28, 190, 21, 239, 34, 190, 65, 185, 241, 60, 220, 101, 218, 189, 8, 179, 4, 190, 237, 59, 239, 189, 95, 107, 57, 187, 210, 166, 51, 190, 85, 105, 41, 187, 60, 42, 39, 61, 40, 220, 159, 186, 243, 138, 252, 59, 79, 32, 6, 62, 100, 148, 27, 190, 175, 1, 50, 62, 207, 236, 2, 190, 130, 106, 95, 60, 11, 62, 167, 61, 235, 97, 81, 188, 97, 54, 48, 62, 130, 127, 251, 61, 189, 67, 235, 189, 189, 15, 60, 61, 52, 45, 15, 190, 134, 186, 204, 61, 18, 243, 231, 60, 164, 23, 228, 187, 90, 144, 17, 61, 29, 210, 11, 62, 141, 128, 204, 188, 121, 4, 213, 61, 141, 40, 45, 62, 217, 114, 27, 190, 116, 4, 26, 190, 81, 103, 191, 59, 213, 203, 235, 189, 70, 213, 151, 189, 51, 121, 210, 189, 81, 148, 26, 190, 196, 32, 207, 188, 232, 59, 164, 60, 160, 189, 68, 60, 0, 192, 5, 62, 111, 47, 25, 61, 52, 79, 106, 189, 142, 156, 252, 189, 142, 174, 45, 62, 235, 44, 60, 189, 241, 85, 209, 60, 248, 110, 177, 189, 252, 29, 47, 62, 116, 211, 52, 190, 239, 30, 44, 62, 47, 242, 17, 62, 112, 235, 205, 61, 196, 173, 197, 189, 144, 35, 32, 190, 12, 73, 109, 189, 204, 44, 35, 61, 81, 144, 161, 189, 90, 171, 95, 189, 201, 44, 71, 61, 100, 16, 22, 190, 233, 187, 36, 190, 110, 30, 47, 190, 91, 145, 23, 62, 144, 39, 192, 61, 240, 161, 156, 61, 176, 80, 221, 189, 2, 2, 236, 188, 240, 18, 42, 62, 99, 253, 9, 62, 62, 0, 202, 188, 148, 179, 138, 189, 124, 83, 130, 189, 219, 177, 228, 188, 219, 227, 6, 189, 185, 39, 50, 62, 137, 205, 39, 190, 246, 11, 146, 60, 127, 66, 51, 62, 54, 140, 134, 189, 122, 119, 198, 188, 180, 189, 229, 61, 39, 36, 247, 189, 250, 159, 36, 62, 206, 153, 23, 62, 123, 225, 146, 189, 11, 178, 245, 189, 43, 178, 143, 59, 34, 223, 39, 62, 198, 195, 75, 61, 253, 59, 83, 189, 74, 232, 36, 62, 105, 114, 41, 190, 57, 83, 196, 189, 2, 81, 244, 187, 2, 204, 29, 190, 143, 96, 31, 190, 55, 217, 143, 61, 120, 40, 129, 188, 84, 15, 50, 190, 186, 60, 35, 189, 54, 216, 52, 190, 0, 48, 12, 190, 177, 113, 130, 60, 84, 249, 13, 62, 5, 78, 35, 189, 136, 31, 205, 189, 231, 15, 173, 189, 8, 174, 144, 188, 175, 63, 30, 62, 63, 7, 23, 62, 160, 242, 158, 61, 189, 252, 28, 62, 94, 140, 83, 189, 251, 127, 136, 189, 103, 165, 10, 190, 128, 59, 16, 190, 115, 72, 193, 61, 5, 22, 20, 62, 167, 252, 5, 190, 206, 139, 22, 189, 216, 51, 151, 189, 90, 236, 250, 61, 100, 115, 240, 61, 234, 17, 180, 61, 208, 15, 207, 189, 253, 130, 171, 189, 149, 220, 179, 188, 21, 53, 203, 61, 199, 8, 167, 189, 130, 221, 66, 189, 183, 65, 28, 62, 169, 64, 176, 188, 10, 198, 161, 61, 212, 28, 17, 60, 43, 174, 87, 60, 228, 186, 29, 61, 214, 146, 22, 190, 23, 189, 31, 189, 106, 166, 23, 61, 113, 83, 239, 59, 216, 69, 142, 61, 124, 221, 9, 62, 90, 40, 82, 61, 228, 131, 140, 60, 164, 49, 15, 62, 63, 247, 44, 190, 205, 48, 6, 62, 109, 10, 31, 190, 188, 45, 132, 189, 120, 123, 229, 188, 176, 199, 243, 61, 24, 76, 43, 190, 107, 177, 116, 189, 36, 115, 75, 61, 141, 79, 143, 61, 116, 77, 43, 62, 40, 157, 22, 62, 65, 71, 216, 187, 184, 139, 173, 61, 218, 127, 200, 61, 44, 88, 247, 188, 47, 143, 228, 189, 51, 12, 166, 189, 59, 228, 168, 189, 193, 219, 176, 189, 31, 219, 115, 189, 107, 173, 80, 189, 105, 180, 51, 62, 185, 191, 42, 62, 242, 8, 207, 189, 114, 177, 11, 62, 93, 211, 235, 58, 13, 104, 42, 190, 221, 125, 133, 61, 141, 170, 32, 190, 51, 80, 1, 62, 107, 6, 72, 61, 105, 196, 35, 62, 57, 7, 16, 190, 93, 70, 183, 189, 82, 22, 23, 189, 232, 228, 48, 190, 5, 155, 175, 58, 187, 82, 225, 189, 128, 43, 36, 189, 209, 164, 234, 189, 29, 181, 38, 190, 184, 92, 13, 189, 184, 236, 8, 62, 197, 134, 47, 62, 226, 70, 52, 190, 16, 48, 65, 188, 248, 9, 44, 62, 196, 89, 16, 190, 43, 111, 160, 189, 105, 237, 181, 60, 178, 13, 212, 189, 1, 68, 21, 189, 250, 20, 252, 189, 33, 134, 220, 189, 174, 15, 206, 61, 236, 207, 154, 59, 91, 84, 20, 190, 145, 5, 194, 60, 6, 234, 31, 189, 97, 151, 195, 60, 124, 148, 105, 186, 97, 125, 1, 190, 92, 215, 239, 189, 140, 157, 18, 189, 31, 133, 20, 62, 180, 47, 162, 189, 193, 180, 14, 62, 196, 76, 53, 189, 104, 77, 61, 189, 83, 77, 18, 187, 3, 191, 48, 189, 141, 116, 203, 189, 19, 50, 44, 62, 14, 245, 53, 189, 135, 118, 173, 61, 158, 184, 0, 62, 17, 238, 252, 189, 96, 210, 0, 61, 214, 105, 233, 60, 41, 38, 44, 62, 79, 129, 207, 189, 147, 8, 43, 62, 15, 95, 215, 188, 163, 81, 160, 61, 189, 29, 188, 61, 151, 103, 66, 60, 11, 51, 160, 60, 76, 45, 9, 190, 179, 80, 141, 189, 180, 149, 94, 189, 220, 81, 199, 189, 95, 98, 41, 62, 69, 79, 3, 62, 74, 181, 132, 189, 166, 205, 5, 190, 79, 228, 23, 62, 45, 223, 222, 61, 144, 23, 154, 61, 27, 123, 199, 189, 239, 28, 197, 189, 77, 140, 224, 189, 157, 230, 47, 189, 246, 93, 42, 190, 66, 56, 160, 59, 5, 121, 29, 62, 137, 94, 13, 62, 82, 127, 132, 189, 88, 134, 44, 190, 151, 232, 96, 189, 31, 58, 177, 189, 211, 84, 199, 61, 151, 217, 143, 189, 77, 51, 128, 59, 136, 11, 186, 187, 5, 31, 16, 61, 124, 123, 1, 190, 167, 84, 143, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 102, 238, 189, 156, 65, 157, 61, 224, 161, 27, 190, 179, 97, 228, 189, 98, 74, 35, 59, 24, 224, 21, 190, 139, 183, 165, 61, 53, 221, 163, 189, 163, 90, 190, 189, 27, 238, 219, 61, 251, 97, 46, 190, 155, 196, 49, 62, 78, 13, 135, 189, 48, 172, 98, 188, 175, 88, 192, 61, 116, 1, 1, 189, 70, 235, 198, 189, 39, 6, 194, 189, 217, 202, 247, 189, 80, 36, 205, 188, 136, 210, 33, 62, 163, 26, 141, 60, 227, 249, 255, 189, 166, 7, 241, 61, 37, 92, 244, 60, 14, 58, 113, 189, 100, 94, 47, 190, 53, 151, 131, 188, 10, 12, 155, 189, 237, 233, 60, 61, 22, 183, 164, 189, 174, 70, 45, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 189, 50, 190, 36, 113, 254, 61, 17, 97, 33, 59, 163, 168, 170, 60, 116, 227, 228, 61, 203, 242, 59, 189, 58, 230, 211, 189, 247, 76, 44, 62, 167, 105, 180, 189, 95, 125, 239, 61, 123, 163, 167, 188, 28, 175, 151, 61, 50, 188, 117, 189, 223, 239, 133, 60, 166, 147, 161, 61, 185, 84, 37, 62, 195, 148, 140, 61, 15, 28, 37, 61, 23, 112, 166, 61, 12, 102, 210, 61, 194, 57, 224, 189, 6, 59, 3, 62, 77, 148, 81, 61, 118, 141, 243, 61, 169, 83, 179, 61, 136, 155, 39, 62, 76, 203, 42, 189, 229, 73, 147, 189, 52, 47, 140, 61, 233, 243, 8, 189, 254, 216, 33, 190, 52, 133, 48, 190, 57, 139, 21, 61, 36, 83, 25, 190, 29, 225, 118, 61, 53, 209, 168, 61, 204, 46, 46, 190, 184, 205, 54, 189, 222, 9, 23, 62, 125, 18, 220, 189, 232, 222, 166, 189, 88, 191, 244, 189, 135, 187, 208, 59, 49, 150, 134, 189, 163, 78, 25, 60, 110, 244, 134, 189, 171, 95, 46, 62, 5, 80, 138, 187, 57, 224, 250, 61, 247, 121, 168, 61, 25, 102, 13, 190, 185, 31, 136, 189, 158, 113, 249, 61, 11, 100, 34, 187, 172, 137, 150, 61, 64, 30, 162, 61, 200, 101, 6, 60, 144, 197, 149, 188, 113, 86, 32, 189, 54, 248, 92, 61, 111, 77, 42, 190, 183, 204, 129, 59, 34, 141, 219, 61, 14, 148, 73, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 182, 191, 188, 91, 212, 1, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {141, 187, 189, 62, 250, 106, 148, 190, 248, 98, 181, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {108, 34, 119, 188, 137, 232, 97, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0011/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}