// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 135, 185, 61, 36, 214, 255, 190, 102, 215, 143, 59, 63, 9, 182, 62, 103, 143, 49, 189, 65, 211, 205, 190, 15, 5, 76, 191, 0, 244, 30, 191, 36, 112, 116, 190, 26, 81, 21, 190, 255, 245, 17, 62, 5, 135, 39, 190, 192, 206, 177, 190, 54, 93, 239, 62, 19, 60, 223, 62, 190, 52, 17, 61, 79, 142, 105, 191, 223, 220, 214, 190, 108, 254, 217, 190, 252, 223, 24, 191, 88, 120, 241, 62, 78, 96, 7, 189, 194, 223, 130, 62, 145, 74, 41, 191, 247, 92, 83, 63, 172, 23, 29, 63, 47, 20, 240, 62, 239, 56, 229, 190, 35, 35, 22, 63, 184, 198, 164, 190, 78, 124, 8, 62, 132, 108, 80, 62, 214, 140, 29, 191, 20, 237, 8, 63, 2, 108, 163, 190, 58, 112, 226, 61, 28, 7, 181, 190, 37, 61, 16, 191, 73, 191, 233, 62, 178, 155, 106, 189, 116, 146, 47, 62, 180, 97, 41, 63, 170, 118, 209, 62, 167, 119, 54, 63, 128, 128, 79, 62, 210, 228, 209, 190, 173, 211, 52, 191, 127, 0, 154, 62, 178, 241, 65, 63, 119, 146, 0, 191, 248, 207, 234, 190, 148, 180, 62, 63, 34, 161, 15, 191, 138, 179, 206, 61, 113, 35, 98, 63, 235, 102, 68, 189, 141, 183, 92, 61, 156, 99, 11, 63, 49, 1, 60, 191, 88, 63, 192, 190, 71, 248, 153, 62, 193, 106, 52, 191, 194, 115, 69, 190, 136, 181, 29, 63, 110, 124, 21, 63, 236, 187, 117, 62, 57, 240, 167, 61, 240, 49, 251, 62, 200, 116, 0, 62, 112, 234, 131, 190, 88, 173, 80, 191, 185, 176, 159, 190, 254, 202, 9, 191, 239, 61, 18, 62, 27, 222, 32, 63, 191, 2, 206, 61, 112, 241, 73, 190, 29, 45, 164, 190, 29, 25, 190, 62, 152, 245, 80, 189, 148, 158, 204, 189, 224, 125, 75, 63, 149, 85, 172, 188, 232, 180, 26, 63, 17, 162, 240, 62, 82, 149, 205, 189, 71, 18, 204, 190, 67, 25, 237, 60, 189, 22, 56, 62, 242, 185, 152, 61, 163, 43, 208, 61, 232, 92, 159, 190, 186, 236, 246, 62, 49, 164, 114, 62, 15, 196, 93, 191, 218, 147, 206, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 198, 19, 191, 242, 186, 188, 190, 144, 11, 193, 189, 103, 45, 58, 63, 104, 170, 47, 191, 20, 169, 17, 191, 108, 107, 160, 190, 182, 75, 207, 62, 205, 215, 68, 191, 146, 124, 172, 61, 39, 70, 231, 62, 115, 104, 227, 62, 146, 60, 75, 190, 2, 46, 9, 63, 184, 183, 185, 62, 193, 162, 0, 63, 100, 69, 181, 61, 138, 93, 163, 60, 21, 159, 25, 189, 56, 168, 156, 190, 150, 60, 2, 63, 254, 127, 157, 190, 163, 26, 57, 63, 35, 121, 157, 190, 210, 208, 28, 63, 226, 0, 216, 190, 138, 190, 22, 63, 220, 80, 170, 190, 57, 175, 218, 61, 96, 237, 10, 63, 163, 135, 64, 191, 134, 130, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 206, 224, 61, 144, 28, 127, 188, 188, 153, 145, 62, 136, 168, 239, 61, 127, 5, 229, 189, 168, 240, 204, 61, 62, 77, 79, 189, 126, 12, 82, 62, 247, 144, 114, 62, 133, 33, 71, 190, 221, 248, 247, 189, 143, 106, 195, 189, 203, 1, 164, 189, 144, 123, 144, 61, 255, 218, 50, 62, 165, 202, 30, 62, 27, 126, 14, 62, 208, 118, 8, 62, 95, 76, 244, 61, 5, 213, 88, 190, 48, 37, 95, 62, 255, 54, 117, 62, 89, 130, 187, 61, 5, 235, 208, 61, 215, 32, 247, 188, 228, 215, 198, 61, 232, 250, 250, 61, 139, 245, 242, 61, 150, 126, 179, 61, 153, 101, 46, 61, 128, 108, 124, 61, 177, 118, 84, 62, 228, 191, 120, 61, 6, 93, 28, 189, 72, 200, 239, 189, 52, 184, 255, 61, 110, 53, 174, 190, 201, 191, 148, 188, 7, 50, 93, 61, 129, 240, 23, 62, 84, 151, 96, 190, 117, 81, 42, 60, 181, 147, 184, 189, 215, 94, 208, 62, 45, 210, 77, 62, 71, 41, 22, 189, 23, 14, 88, 190, 197, 184, 50, 61, 112, 48, 117, 59, 124, 171, 139, 62, 231, 23, 106, 62, 242, 182, 249, 189, 252, 117, 192, 61, 137, 206, 207, 190, 178, 251, 10, 61, 197, 246, 35, 189, 72, 152, 34, 190, 86, 71, 18, 62, 32, 124, 159, 189, 227, 11, 28, 189, 4, 52, 200, 61, 139, 45, 34, 190, 16, 147, 223, 189, 102, 12, 242, 61, 181, 243, 135, 60, 113, 254, 191, 60, 119, 21, 191, 59, 15, 86, 208, 189, 214, 242, 5, 62, 80, 114, 144, 189, 190, 177, 177, 188, 186, 17, 250, 61, 180, 107, 162, 189, 208, 11, 22, 190, 64, 112, 195, 59, 105, 22, 117, 62, 68, 232, 113, 189, 123, 131, 56, 190, 24, 155, 66, 190, 91, 232, 154, 62, 97, 63, 72, 61, 58, 144, 100, 62, 161, 144, 105, 62, 101, 1, 180, 61, 76, 19, 59, 61, 252, 90, 126, 190, 50, 15, 129, 190, 110, 31, 31, 62, 65, 144, 168, 189, 67, 85, 146, 61, 142, 218, 102, 189, 157, 62, 28, 190, 153, 215, 251, 61, 43, 238, 241, 189, 13, 13, 202, 61, 101, 153, 77, 62, 147, 141, 24, 189, 206, 96, 92, 62, 172, 145, 54, 186, 107, 235, 181, 61, 161, 153, 30, 60, 164, 185, 100, 61, 200, 62, 131, 190, 152, 90, 41, 62, 61, 25, 8, 61, 142, 140, 252, 188, 73, 187, 23, 62, 143, 195, 9, 62, 159, 47, 18, 190, 22, 70, 66, 190, 196, 101, 185, 190, 127, 199, 151, 62, 215, 155, 183, 188, 112, 195, 211, 62, 34, 111, 172, 62, 107, 119, 44, 62, 101, 37, 153, 60, 184, 99, 94, 190, 15, 195, 230, 190, 231, 50, 34, 190, 54, 176, 29, 190, 196, 1, 187, 61, 190, 136, 2, 62, 180, 38, 162, 190, 33, 222, 179, 189, 165, 190, 133, 190, 26, 143, 23, 189, 186, 124, 20, 62, 174, 236, 32, 62, 11, 128, 99, 190, 239, 100, 159, 62, 151, 28, 140, 189, 66, 46, 2, 190, 48, 113, 161, 187, 108, 123, 223, 60, 142, 214, 42, 62, 86, 123, 12, 190, 98, 73, 248, 189, 19, 244, 146, 59, 194, 130, 127, 62, 211, 12, 189, 189, 187, 83, 254, 189, 195, 206, 13, 190, 116, 190, 136, 188, 255, 56, 175, 60, 43, 71, 14, 62, 177, 254, 191, 62, 114, 148, 101, 190, 255, 133, 30, 60, 159, 232, 140, 190, 204, 216, 63, 61, 226, 48, 49, 62, 115, 58, 133, 61, 4, 132, 211, 60, 111, 11, 127, 62, 39, 104, 237, 189, 135, 101, 208, 189, 80, 180, 50, 62, 150, 112, 236, 61, 80, 152, 228, 61, 129, 136, 219, 61, 65, 44, 64, 190, 179, 235, 151, 62, 168, 197, 212, 61, 141, 180, 170, 189, 239, 126, 172, 60, 43, 105, 9, 190, 228, 152, 242, 189, 67, 76, 75, 190, 154, 41, 209, 60, 169, 1, 233, 61, 190, 243, 49, 61, 33, 251, 11, 61, 196, 58, 15, 62, 14, 50, 93, 61, 24, 119, 10, 61, 205, 220, 199, 189, 10, 213, 168, 61, 131, 22, 127, 62, 144, 222, 151, 190, 235, 105, 146, 62, 29, 133, 62, 60, 88, 88, 69, 62, 84, 20, 98, 62, 237, 202, 13, 62, 15, 103, 165, 189, 249, 227, 130, 62, 168, 95, 213, 61, 218, 215, 16, 62, 115, 161, 91, 62, 185, 104, 200, 60, 70, 148, 159, 189, 71, 58, 32, 190, 73, 225, 27, 190, 107, 248, 20, 190, 124, 4, 54, 190, 6, 234, 165, 188, 37, 27, 31, 61, 85, 71, 71, 189, 87, 153, 9, 61, 167, 250, 94, 61, 102, 147, 163, 189, 110, 8, 227, 61, 212, 139, 66, 189, 168, 250, 35, 190, 21, 46, 33, 190, 145, 141, 26, 190, 74, 116, 2, 190, 193, 251, 16, 61, 147, 126, 83, 61, 148, 217, 139, 189, 218, 165, 18, 189, 187, 130, 253, 189, 243, 222, 1, 62, 196, 60, 207, 188, 135, 81, 15, 190, 254, 3, 26, 62, 29, 7, 138, 61, 136, 88, 11, 190, 232, 194, 244, 61, 226, 41, 110, 61, 32, 53, 67, 190, 147, 120, 7, 190, 187, 134, 65, 57, 250, 58, 35, 62, 244, 157, 216, 189, 25, 90, 118, 188, 237, 49, 38, 62, 78, 93, 134, 189, 70, 62, 117, 190, 99, 173, 107, 190, 196, 93, 19, 62, 134, 89, 42, 189, 69, 166, 234, 188, 124, 203, 12, 61, 52, 170, 248, 61, 203, 113, 228, 188, 239, 125, 136, 190, 108, 44, 132, 189, 3, 6, 185, 189, 215, 202, 105, 61, 78, 250, 92, 62, 48, 97, 217, 62, 53, 10, 141, 190, 26, 215, 105, 62, 72, 3, 206, 190, 238, 167, 145, 190, 91, 155, 243, 189, 242, 233, 214, 190, 205, 218, 0, 190, 19, 89, 84, 62, 2, 57, 211, 61, 44, 154, 115, 62, 157, 47, 4, 60, 161, 114, 130, 189, 14, 147, 136, 61, 213, 119, 25, 190, 98, 196, 127, 190, 94, 26, 11, 62, 171, 173, 34, 62, 12, 128, 75, 188, 182, 252, 217, 61, 21, 187, 89, 189, 249, 111, 195, 61, 169, 167, 13, 61, 225, 91, 17, 62, 148, 232, 63, 61, 76, 249, 13, 62, 169, 170, 192, 189, 142, 173, 18, 62, 159, 62, 225, 61, 93, 19, 211, 188, 184, 208, 193, 61, 238, 156, 176, 60, 121, 34, 66, 61, 198, 254, 68, 190, 166, 83, 86, 61, 112, 152, 34, 62, 209, 64, 71, 62, 214, 17, 98, 62, 219, 92, 58, 62, 23, 30, 83, 61, 21, 130, 65, 62, 218, 73, 241, 61, 37, 82, 175, 61, 228, 98, 230, 61, 242, 210, 186, 189, 38, 20, 1, 189, 147, 243, 198, 188, 214, 51, 31, 190, 248, 179, 219, 189, 12, 106, 83, 62, 129, 181, 27, 190, 26, 175, 238, 61, 53, 192, 44, 62, 39, 34, 9, 62, 128, 18, 84, 190, 46, 113, 54, 190, 56, 238, 67, 187, 215, 143, 141, 61, 161, 4, 208, 61, 250, 112, 61, 62, 247, 65, 20, 62, 111, 255, 34, 62, 73, 17, 72, 189, 30, 61, 223, 61, 91, 52, 109, 62, 243, 233, 75, 189, 231, 168, 214, 61, 61, 170, 174, 190, 15, 132, 180, 189, 143, 169, 155, 189, 44, 98, 247, 188, 202, 64, 28, 61, 86, 95, 23, 62, 53, 235, 199, 189, 222, 202, 23, 187, 65, 12, 184, 189, 192, 199, 232, 60, 55, 1, 77, 190, 99, 179, 19, 190, 237, 199, 185, 61, 163, 25, 199, 61, 214, 127, 29, 62, 148, 228, 6, 190, 42, 51, 106, 189, 72, 74, 225, 188, 125, 177, 243, 189, 63, 247, 47, 62, 38, 122, 18, 189, 249, 218, 170, 59, 232, 202, 68, 189, 65, 125, 184, 60, 148, 155, 26, 190, 53, 149, 12, 190, 69, 202, 222, 189, 249, 154, 229, 189, 103, 109, 49, 62, 40, 195, 181, 189, 111, 108, 172, 58, 102, 137, 40, 190, 174, 111, 189, 187, 29, 114, 130, 61, 89, 20, 81, 189, 93, 18, 40, 62, 236, 3, 28, 62, 16, 38, 193, 189, 114, 42, 211, 189, 66, 88, 52, 190, 153, 78, 133, 189, 63, 245, 195, 189, 69, 211, 52, 62, 170, 68, 30, 190, 208, 30, 48, 190, 244, 67, 56, 189, 140, 11, 4, 61, 110, 195, 116, 188, 70, 116, 113, 60, 10, 131, 177, 61, 61, 73, 232, 61, 97, 72, 124, 190, 117, 156, 170, 189, 183, 101, 236, 61, 163, 142, 130, 62, 167, 27, 222, 61, 57, 202, 5, 62, 49, 205, 186, 61, 79, 84, 32, 62, 67, 111, 130, 61, 13, 108, 167, 62, 207, 77, 159, 62, 3, 148, 32, 190, 249, 143, 64, 62, 103, 75, 103, 190, 197, 203, 11, 62, 105, 95, 236, 189, 96, 62, 51, 190, 110, 232, 43, 61, 123, 6, 137, 62, 200, 19, 58, 188, 46, 28, 50, 189, 16, 145, 103, 189, 148, 0, 28, 190, 72, 160, 208, 59, 87, 194, 163, 61, 200, 125, 35, 61, 227, 111, 34, 62, 139, 16, 115, 189, 200, 28, 19, 62, 215, 250, 79, 188, 198, 97, 33, 190, 17, 183, 135, 188, 146, 120, 189, 189, 235, 136, 226, 60, 94, 248, 37, 190, 61, 227, 216, 61, 154, 73, 194, 187, 170, 78, 167, 189, 124, 51, 6, 62, 55, 3, 229, 189, 72, 251, 178, 189, 141, 53, 17, 190, 200, 45, 235, 188, 193, 162, 21, 190, 28, 234, 24, 62, 221, 100, 14, 60, 226, 14, 7, 62, 232, 148, 88, 188, 217, 72, 32, 190, 58, 214, 38, 190, 96, 216, 71, 189, 151, 178, 44, 61, 56, 215, 204, 189, 214, 96, 196, 189, 26, 169, 113, 189, 151, 32, 146, 188, 41, 237, 231, 61, 160, 240, 43, 62, 109, 168, 66, 61, 185, 111, 230, 189, 251, 192, 143, 61, 17, 144, 243, 189, 223, 205, 137, 61, 79, 135, 177, 60, 108, 198, 175, 189, 129, 206, 9, 190, 110, 55, 12, 190, 12, 174, 123, 61, 143, 33, 143, 62, 102, 73, 248, 61, 202, 109, 51, 190, 120, 246, 58, 62, 236, 185, 126, 62, 247, 160, 24, 61, 248, 167, 197, 62, 49, 118, 3, 189, 121, 18, 69, 62, 15, 228, 189, 190, 149, 109, 232, 189, 232, 136, 181, 61, 155, 35, 120, 188, 218, 197, 143, 189, 129, 203, 36, 61, 102, 20, 128, 188, 199, 201, 181, 61, 177, 182, 138, 60, 164, 247, 44, 190, 157, 65, 1, 190, 150, 4, 239, 189, 157, 56, 87, 61, 47, 174, 240, 190, 34, 23, 206, 61, 230, 109, 243, 190, 87, 145, 122, 189, 132, 245, 186, 62, 7, 45, 168, 189, 245, 136, 90, 190, 191, 205, 78, 190, 205, 227, 196, 189, 123, 135, 178, 62, 102, 177, 244, 61, 47, 225, 85, 62, 250, 39, 209, 190, 229, 3, 229, 61, 31, 227, 49, 62, 154, 213, 51, 61, 238, 229, 53, 62, 73, 99, 72, 62, 41, 142, 132, 61, 72, 13, 164, 190, 149, 216, 71, 190, 161, 137, 66, 190, 10, 47, 47, 62, 195, 45, 214, 189, 199, 123, 63, 62, 219, 234, 184, 190, 136, 181, 223, 61, 42, 154, 52, 189, 2, 151, 168, 189, 53, 240, 119, 190, 220, 124, 155, 189, 126, 46, 39, 189, 187, 191, 17, 190, 164, 241, 88, 190, 21, 116, 18, 62, 47, 4, 49, 62, 187, 147, 167, 61, 198, 31, 139, 189, 100, 63, 164, 189, 239, 180, 155, 61, 25, 225, 181, 61, 185, 245, 183, 188, 25, 202, 32, 190, 41, 34, 176, 189, 25, 54, 95, 61, 228, 89, 236, 57, 20, 90, 255, 61, 242, 42, 131, 188, 101, 209, 189, 189, 48, 61, 211, 189, 104, 178, 2, 190, 181, 249, 4, 62, 145, 190, 140, 189, 85, 90, 244, 61, 122, 185, 162, 61, 84, 247, 134, 189, 98, 164, 201, 60, 116, 158, 26, 62, 196, 4, 188, 188, 58, 67, 104, 190, 172, 64, 104, 189, 104, 121, 9, 190, 231, 92, 167, 189, 96, 48, 172, 61, 36, 122, 157, 189, 23, 32, 215, 189, 88, 225, 18, 190, 44, 154, 250, 61, 83, 146, 43, 189, 95, 239, 163, 189, 111, 15, 142, 189, 126, 59, 34, 190, 231, 23, 253, 189, 234, 243, 213, 61, 219, 129, 136, 61, 210, 174, 33, 190, 4, 135, 103, 61, 235, 194, 177, 60, 146, 93, 41, 190, 83, 54, 50, 190, 206, 44, 133, 189, 99, 130, 149, 189, 149, 200, 254, 189, 25, 92, 186, 60, 211, 233, 26, 62, 115, 226, 24, 190, 72, 161, 14, 190, 245, 207, 248, 189, 158, 79, 242, 189, 166, 21, 27, 190, 141, 254, 43, 62, 60, 219, 41, 190, 109, 254, 202, 189, 157, 180, 134, 61, 200, 31, 13, 62, 25, 227, 73, 62, 62, 171, 128, 190, 193, 109, 104, 62, 228, 6, 117, 190, 192, 3, 113, 61, 231, 112, 203, 61, 181, 166, 12, 191, 57, 125, 246, 190, 197, 60, 202, 189, 76, 167, 230, 190, 138, 201, 75, 189, 16, 225, 149, 62, 47, 224, 81, 62, 122, 237, 23, 190, 35, 55, 138, 61, 160, 103, 157, 62, 211, 30, 138, 190, 25, 27, 140, 62, 130, 107, 5, 62, 93, 88, 132, 62, 88, 228, 224, 190, 196, 68, 101, 62, 186, 163, 254, 188, 128, 145, 135, 62, 51, 185, 62, 190, 73, 234, 21, 62, 97, 65, 53, 190, 116, 116, 172, 61, 240, 57, 162, 61, 202, 112, 108, 190, 133, 10, 47, 190, 234, 79, 246, 61, 60, 177, 114, 61, 189, 29, 46, 60, 196, 74, 102, 62, 218, 36, 189, 61, 44, 32, 13, 60, 171, 221, 167, 61, 17, 24, 73, 58, 9, 31, 146, 190, 144, 186, 131, 189, 206, 56, 68, 61, 49, 142, 52, 62, 79, 226, 19, 61, 218, 183, 14, 189, 60, 177, 50, 62, 149, 129, 87, 62, 52, 245, 79, 189, 127, 4, 250, 61, 29, 160, 11, 62, 181, 130, 144, 190, 191, 193, 57, 62, 226, 105, 124, 190, 174, 224, 40, 62, 16, 233, 30, 61, 124, 17, 20, 62, 69, 11, 41, 190, 37, 238, 140, 62, 77, 4, 92, 190, 1, 159, 244, 188, 41, 6, 60, 61, 168, 0, 184, 189, 44, 45, 194, 189, 234, 99, 23, 190, 135, 39, 2, 61, 149, 134, 241, 189, 42, 229, 146, 60, 37, 46, 65, 190, 218, 139, 96, 190, 84, 128, 154, 188, 249, 239, 128, 190, 37, 235, 212, 190, 103, 199, 109, 190, 32, 72, 63, 189, 43, 216, 116, 189, 17, 24, 181, 189, 140, 203, 56, 62, 135, 32, 169, 61, 5, 183, 72, 62, 38, 78, 116, 62, 103, 140, 58, 60, 149, 140, 34, 62, 162, 20, 67, 62, 255, 211, 249, 60, 229, 166, 156, 190, 23, 204, 129, 61, 237, 243, 56, 190, 32, 226, 79, 62, 94, 132, 49, 61, 55, 153, 7, 62, 175, 194, 164, 189, 18, 240, 38, 62, 62, 109, 19, 62, 159, 179, 81, 189, 192, 204, 123, 190, 205, 120, 228, 61, 218, 96, 88, 190, 255, 50, 208, 62, 197, 150, 162, 62, 241, 32, 89, 190, 103, 98, 14, 191, 202, 153, 20, 191, 24, 51, 12, 62, 225, 27, 43, 62, 74, 133, 191, 62, 137, 205, 150, 61, 9, 66, 26, 59, 0, 93, 58, 191, 36, 64, 215, 190, 215, 143, 88, 188, 141, 63, 181, 188, 68, 239, 200, 190, 86, 156, 222, 189, 131, 131, 127, 62, 11, 81, 61, 191, 49, 200, 55, 189, 18, 98, 250, 61, 25, 35, 172, 62, 248, 240, 35, 188, 137, 14, 96, 190, 60, 238, 172, 190, 191, 76, 192, 61, 42, 61, 186, 62, 167, 59, 179, 189, 240, 124, 53, 62, 120, 117, 35, 62, 114, 78, 84, 190, 228, 185, 135, 189, 5, 89, 144, 189, 195, 210, 238, 60, 11, 179, 85, 190, 137, 13, 151, 190, 50, 142, 74, 190, 62, 171, 84, 62, 179, 27, 77, 61, 205, 155, 113, 190, 130, 91, 58, 190, 140, 55, 48, 61, 148, 134, 134, 62, 169, 101, 7, 62, 123, 112, 29, 62, 222, 87, 51, 190, 120, 244, 168, 61, 121, 190, 193, 61, 109, 53, 87, 60, 208, 220, 45, 62, 211, 126, 52, 62, 187, 102, 158, 61, 35, 117, 114, 190, 103, 23, 224, 189, 6, 243, 136, 61, 162, 193, 171, 61, 40, 63, 225, 61, 168, 82, 25, 61, 141, 109, 143, 190, 206, 119, 85, 62, 188, 118, 189, 189, 167, 1, 26, 190, 91, 71, 40, 189, 171, 88, 10, 62, 249, 25, 96, 62, 218, 210, 174, 60, 118, 153, 43, 190, 250, 193, 129, 62, 203, 157, 101, 62, 246, 116, 14, 190, 94, 246, 81, 189, 174, 16, 144, 62, 196, 170, 167, 190, 117, 219, 215, 61, 102, 202, 24, 62, 178, 141, 190, 61, 59, 210, 13, 62, 187, 5, 150, 61, 73, 25, 146, 190, 242, 64, 48, 61, 138, 198, 233, 61, 183, 38, 254, 61, 89, 163, 167, 61, 129, 227, 84, 62, 150, 180, 4, 62, 174, 186, 103, 190, 105, 85, 52, 189, 125, 117, 82, 189, 30, 37, 92, 61, 68, 77, 159, 189, 209, 70, 134, 60, 225, 137, 249, 61, 217, 193, 115, 190, 4, 101, 86, 62, 131, 138, 30, 188, 148, 126, 223, 189, 177, 149, 81, 62, 242, 20, 77, 190, 222, 255, 59, 189, 24, 127, 170, 190, 34, 245, 162, 61, 140, 230, 87, 62, 141, 53, 36, 61, 99, 137, 7, 190, 70, 51, 168, 189, 116, 223, 133, 188, 164, 80, 76, 62, 244, 87, 105, 62, 38, 151, 146, 189, 234, 167, 77, 190, 244, 129, 87, 62, 53, 145, 191, 61, 144, 100, 127, 188, 135, 59, 69, 62, 67, 170, 71, 62, 132, 67, 208, 61, 139, 130, 167, 190, 19, 156, 138, 190, 129, 242, 52, 190, 5, 215, 202, 61, 143, 132, 133, 189, 250, 73, 184, 189, 127, 183, 158, 190, 10, 183, 118, 61, 117, 36, 96, 190, 108, 151, 2, 190, 68, 216, 243, 186, 40, 220, 159, 186, 156, 239, 20, 190, 218, 220, 130, 188, 148, 187, 149, 189, 131, 128, 138, 61, 192, 131, 188, 190, 21, 92, 212, 189, 40, 22, 119, 60, 243, 60, 7, 190, 183, 44, 152, 62, 15, 79, 88, 61, 84, 69, 165, 190, 49, 106, 144, 189, 80, 251, 89, 189, 198, 129, 186, 62, 231, 212, 37, 190, 40, 147, 154, 190, 110, 113, 179, 189, 20, 166, 163, 190, 79, 216, 111, 190, 179, 64, 83, 190, 141, 65, 89, 62, 161, 224, 184, 61, 136, 11, 184, 190, 74, 149, 30, 61, 105, 36, 67, 190, 142, 253, 167, 189, 31, 113, 136, 190, 193, 27, 157, 190, 136, 252, 27, 62, 52, 49, 35, 190, 94, 100, 241, 189, 0, 192, 5, 62, 240, 218, 235, 61, 77, 162, 244, 189, 26, 51, 104, 189, 118, 172, 42, 62, 215, 175, 141, 189, 229, 92, 111, 61, 245, 43, 164, 189, 112, 170, 145, 61, 117, 132, 58, 190, 244, 94, 68, 62, 94, 170, 79, 62, 134, 188, 8, 62, 224, 172, 172, 188, 154, 241, 118, 190, 154, 184, 182, 61, 170, 89, 222, 61, 6, 194, 136, 190, 117, 50, 20, 62, 83, 254, 162, 61, 113, 78, 27, 190, 84, 29, 109, 190, 39, 99, 61, 190, 214, 28, 5, 62, 53, 181, 82, 62, 37, 23, 251, 61, 157, 37, 198, 189, 186, 223, 109, 190, 175, 193, 114, 62, 185, 23, 62, 62, 137, 184, 59, 190, 16, 219, 161, 190, 124, 83, 130, 189, 219, 177, 228, 188, 219, 227, 6, 189, 185, 39, 50, 62, 137, 205, 39, 190, 246, 11, 146, 60, 127, 66, 51, 62, 54, 140, 134, 189, 122, 119, 198, 188, 180, 189, 229, 61, 39, 36, 247, 189, 250, 159, 36, 62, 206, 153, 23, 62, 123, 225, 146, 189, 11, 178, 245, 189, 43, 178, 143, 59, 34, 223, 39, 62, 198, 195, 75, 61, 253, 59, 83, 189, 74, 232, 36, 62, 105, 114, 41, 190, 57, 83, 196, 189, 2, 81, 244, 187, 2, 204, 29, 190, 143, 96, 31, 190, 55, 217, 143, 61, 120, 40, 129, 188, 84, 15, 50, 190, 186, 60, 35, 189, 54, 216, 52, 190, 0, 48, 12, 190, 177, 113, 130, 60, 84, 249, 13, 62, 211, 160, 71, 190, 136, 225, 17, 62, 110, 93, 63, 60, 69, 238, 153, 189, 120, 175, 16, 188, 67, 43, 66, 189, 175, 188, 60, 62, 202, 46, 177, 62, 61, 222, 135, 61, 131, 157, 152, 59, 102, 164, 250, 189, 239, 168, 154, 190, 17, 208, 245, 60, 20, 237, 87, 62, 234, 143, 14, 190, 225, 121, 44, 190, 86, 13, 155, 189, 48, 187, 22, 62, 9, 179, 130, 190, 63, 142, 114, 61, 154, 96, 59, 62, 170, 3, 153, 59, 121, 246, 98, 189, 171, 56, 33, 61, 89, 54, 53, 190, 20, 130, 133, 61, 68, 190, 132, 62, 103, 131, 197, 189, 165, 253, 17, 62, 98, 16, 245, 58, 145, 61, 83, 188, 228, 186, 29, 61, 204, 125, 65, 190, 3, 117, 148, 190, 109, 225, 128, 60, 245, 230, 135, 188, 207, 37, 50, 189, 232, 172, 98, 62, 99, 219, 4, 190, 140, 155, 100, 190, 103, 216, 53, 62, 68, 182, 157, 190, 190, 133, 208, 61, 204, 170, 79, 189, 211, 252, 95, 61, 251, 1, 79, 62, 229, 64, 2, 62, 111, 71, 158, 190, 105, 133, 34, 190, 84, 232, 237, 189, 4, 5, 161, 189, 63, 49, 215, 187, 15, 219, 20, 59, 127, 239, 56, 62, 60, 9, 201, 189, 11, 1, 80, 62, 231, 131, 131, 189, 117, 114, 20, 190, 168, 59, 110, 190, 96, 49, 241, 189, 13, 44, 111, 61, 7, 17, 245, 189, 230, 223, 0, 190, 105, 180, 51, 62, 133, 54, 60, 188, 163, 110, 5, 62, 241, 197, 125, 62, 12, 67, 249, 60, 13, 42, 178, 190, 104, 75, 10, 189, 238, 138, 26, 189, 60, 107, 169, 62, 5, 38, 54, 62, 208, 46, 128, 62, 65, 123, 101, 61, 214, 119, 13, 190, 169, 255, 56, 60, 248, 243, 253, 60, 71, 54, 164, 61, 120, 70, 96, 190, 1, 27, 109, 61, 243, 175, 126, 188, 254, 20, 41, 191, 122, 202, 128, 188, 217, 212, 229, 62, 176, 81, 180, 62, 52, 190, 82, 190, 201, 201, 89, 60, 136, 171, 151, 61, 178, 101, 27, 61, 163, 235, 2, 62, 181, 27, 41, 189, 173, 123, 75, 61, 86, 7, 52, 60, 191, 86, 52, 189, 33, 134, 220, 189, 14, 72, 147, 61, 189, 82, 193, 188, 247, 148, 40, 190, 8, 243, 193, 59, 39, 247, 111, 189, 139, 62, 216, 185, 209, 220, 178, 188, 186, 104, 20, 190, 191, 62, 4, 190, 191, 48, 156, 189, 19, 133, 229, 61, 92, 168, 208, 189, 73, 122, 242, 61, 113, 26, 137, 189, 35, 190, 133, 189, 209, 42, 247, 188, 115, 233, 248, 188, 19, 195, 232, 189, 43, 241, 17, 62, 122, 184, 129, 189, 39, 168, 129, 61, 98, 152, 208, 61, 207, 167, 24, 190, 82, 248, 58, 60, 31, 12, 50, 185, 41, 228, 243, 61, 211, 210, 9, 190, 204, 159, 11, 62, 115, 101, 75, 189, 150, 148, 99, 61, 29, 201, 141, 61, 151, 103, 66, 60, 141, 101, 59, 189, 14, 33, 39, 61, 129, 207, 90, 189, 137, 192, 41, 190, 252, 155, 44, 189, 230, 200, 229, 61, 12, 205, 19, 62, 57, 181, 54, 62, 226, 254, 58, 190, 50, 61, 28, 62, 134, 114, 116, 62, 18, 178, 161, 60, 65, 154, 56, 189, 38, 139, 5, 61, 183, 145, 146, 189, 113, 222, 70, 189, 74, 174, 3, 61, 167, 109, 150, 61, 250, 104, 230, 61, 218, 251, 97, 62, 114, 247, 92, 62, 11, 222, 135, 189, 26, 76, 31, 61, 12, 87, 109, 189, 187, 133, 158, 61, 148, 40, 84, 61, 199, 177, 159, 62, 106, 65, 251, 188, 199, 80, 210, 61, 15, 234, 94, 189, 214, 240, 23, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 20, 111, 189, 108, 0, 8, 62, 151, 77, 97, 190, 239, 20, 20, 190, 32, 69, 10, 62, 175, 222, 159, 187, 194, 9, 58, 61, 136, 127, 41, 189, 22, 176, 5, 61, 208, 234, 75, 62, 251, 97, 46, 190, 189, 28, 152, 62, 95, 224, 166, 189, 248, 68, 205, 61, 126, 227, 16, 62, 163, 228, 36, 190, 70, 235, 198, 189, 117, 164, 163, 61, 71, 68, 228, 60, 41, 60, 205, 61, 224, 145, 167, 62, 28, 119, 43, 61, 210, 93, 149, 190, 135, 140, 255, 61, 17, 198, 159, 61, 221, 189, 178, 60, 100, 94, 47, 190, 149, 116, 59, 61, 126, 161, 3, 189, 166, 227, 78, 62, 133, 186, 210, 189, 164, 102, 106, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 91, 103, 190, 91, 44, 15, 62, 232, 218, 161, 60, 167, 150, 2, 62, 183, 181, 22, 189, 48, 239, 56, 189, 221, 21, 170, 189, 121, 158, 169, 62, 209, 209, 203, 189, 125, 104, 215, 61, 123, 163, 167, 188, 222, 124, 108, 60, 197, 72, 1, 189, 120, 86, 198, 61, 217, 148, 196, 62, 239, 192, 242, 61, 195, 148, 140, 61, 171, 138, 28, 63, 143, 20, 132, 61, 127, 215, 162, 62, 181, 12, 91, 191, 148, 186, 48, 62, 215, 2, 8, 190, 69, 8, 8, 62, 41, 83, 8, 63, 154, 49, 85, 62, 76, 203, 42, 189, 20, 251, 47, 190, 104, 160, 147, 62, 139, 221, 116, 190, 152, 247, 250, 189, 1, 228, 89, 190, 0, 154, 118, 189, 102, 173, 119, 190, 242, 108, 64, 62, 235, 198, 56, 62, 89, 161, 189, 190, 168, 35, 62, 190, 7, 117, 13, 62, 135, 113, 183, 190, 204, 97, 41, 190, 88, 65, 97, 190, 135, 187, 208, 59, 98, 55, 109, 190, 124, 218, 222, 187, 127, 149, 40, 189, 194, 175, 188, 62, 74, 175, 106, 61, 57, 224, 250, 61, 232, 183, 44, 62, 247, 213, 138, 190, 232, 118, 237, 189, 45, 142, 129, 62, 187, 133, 96, 61, 217, 151, 117, 62, 221, 59, 148, 62, 21, 61, 203, 61, 206, 33, 227, 61, 113, 86, 32, 189, 196, 127, 172, 61, 179, 112, 115, 189, 167, 149, 134, 188, 122, 212, 237, 61, 221, 232, 155, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 137, 174, 189, 204, 192, 121, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {135, 35, 24, 63, 200, 228, 15, 190, 236, 85, 127, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {138, 222, 20, 190, 211, 184, 185, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0011/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}