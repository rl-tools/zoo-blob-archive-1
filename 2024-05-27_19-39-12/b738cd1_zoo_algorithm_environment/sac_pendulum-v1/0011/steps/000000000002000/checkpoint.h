// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 135, 185, 61, 36, 214, 255, 190, 102, 215, 143, 59, 215, 87, 181, 62, 219, 228, 106, 189, 195, 162, 168, 190, 254, 186, 31, 191, 236, 210, 156, 189, 96, 227, 102, 190, 229, 199, 243, 189, 96, 229, 165, 62, 35, 151, 7, 190, 219, 10, 97, 190, 248, 47, 212, 62, 198, 22, 194, 62, 78, 216, 117, 190, 149, 153, 108, 191, 240, 83, 197, 190, 30, 60, 247, 190, 79, 131, 66, 191, 68, 142, 147, 62, 248, 134, 73, 61, 97, 31, 31, 63, 82, 253, 215, 190, 183, 217, 169, 62, 36, 153, 35, 63, 56, 46, 6, 63, 64, 100, 9, 191, 239, 129, 96, 63, 128, 226, 29, 190, 161, 216, 131, 62, 124, 160, 8, 63, 239, 56, 191, 190, 211, 27, 221, 62, 254, 52, 36, 190, 50, 88, 82, 61, 255, 239, 207, 190, 34, 161, 73, 191, 171, 39, 152, 62, 201, 193, 108, 189, 46, 105, 73, 189, 201, 251, 21, 63, 28, 174, 193, 62, 124, 138, 16, 63, 53, 239, 87, 62, 40, 6, 247, 190, 58, 199, 84, 191, 99, 254, 118, 62, 34, 43, 42, 63, 186, 3, 225, 190, 231, 145, 186, 190, 33, 91, 243, 62, 143, 255, 31, 191, 177, 203, 4, 62, 143, 97, 44, 63, 67, 71, 132, 189, 218, 213, 73, 189, 59, 128, 228, 62, 182, 47, 14, 191, 236, 157, 139, 190, 59, 177, 65, 62, 72, 144, 41, 191, 37, 20, 99, 190, 174, 136, 151, 62, 185, 81, 42, 63, 66, 139, 142, 62, 11, 17, 49, 62, 159, 197, 9, 63, 132, 63, 26, 62, 123, 124, 133, 190, 223, 12, 95, 191, 129, 73, 180, 190, 6, 116, 236, 190, 175, 4, 187, 189, 189, 160, 8, 63, 83, 16, 180, 61, 8, 93, 103, 184, 238, 172, 170, 190, 251, 6, 232, 62, 45, 93, 2, 62, 98, 121, 27, 189, 206, 224, 60, 63, 220, 197, 130, 59, 132, 85, 16, 63, 158, 166, 176, 62, 82, 17, 99, 190, 120, 164, 195, 190, 236, 148, 141, 61, 101, 11, 147, 62, 91, 235, 144, 61, 97, 228, 130, 189, 184, 163, 137, 190, 41, 70, 234, 62, 31, 186, 77, 61, 105, 136, 40, 191, 102, 140, 184, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 198, 19, 191, 81, 136, 192, 190, 248, 87, 140, 190, 3, 53, 46, 63, 200, 172, 64, 191, 72, 190, 204, 190, 134, 50, 51, 190, 83, 244, 254, 62, 65, 71, 31, 191, 207, 168, 2, 62, 236, 118, 0, 63, 59, 166, 255, 62, 217, 199, 144, 189, 90, 7, 252, 62, 7, 150, 246, 62, 154, 109, 6, 63, 187, 252, 115, 62, 152, 252, 148, 189, 36, 154, 86, 189, 197, 227, 193, 190, 64, 143, 21, 63, 227, 54, 73, 190, 125, 200, 46, 63, 236, 29, 138, 190, 83, 229, 44, 63, 208, 224, 63, 190, 249, 100, 9, 63, 242, 52, 116, 190, 225, 13, 78, 62, 167, 228, 8, 63, 175, 163, 61, 191, 52, 71, 100, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 206, 224, 61, 201, 226, 145, 60, 168, 177, 56, 62, 90, 211, 34, 62, 81, 247, 200, 189, 123, 215, 188, 188, 194, 192, 184, 188, 91, 162, 117, 62, 58, 37, 6, 62, 106, 83, 0, 189, 20, 10, 179, 189, 160, 80, 22, 190, 47, 99, 129, 189, 246, 90, 222, 61, 238, 205, 89, 62, 197, 104, 234, 61, 99, 163, 242, 61, 100, 68, 74, 61, 47, 29, 127, 61, 33, 114, 127, 190, 127, 194, 195, 61, 42, 36, 227, 61, 35, 129, 24, 62, 130, 199, 36, 189, 148, 20, 93, 60, 61, 54, 214, 61, 94, 95, 186, 61, 86, 117, 73, 60, 252, 243, 215, 61, 101, 104, 177, 61, 247, 214, 8, 61, 158, 60, 27, 62, 228, 191, 120, 61, 195, 192, 204, 188, 155, 136, 236, 189, 76, 178, 0, 62, 135, 53, 93, 190, 229, 108, 185, 61, 184, 114, 173, 61, 215, 183, 18, 62, 197, 51, 17, 190, 188, 50, 49, 189, 100, 252, 205, 189, 161, 94, 169, 62, 75, 81, 116, 62, 151, 24, 234, 186, 195, 216, 1, 190, 122, 41, 214, 61, 227, 0, 153, 60, 188, 183, 68, 62, 58, 83, 166, 61, 164, 131, 124, 189, 47, 8, 18, 62, 254, 44, 128, 190, 225, 70, 236, 61, 22, 16, 152, 61, 218, 88, 220, 189, 187, 44, 42, 62, 176, 180, 164, 189, 212, 194, 212, 188, 245, 253, 203, 61, 231, 113, 221, 189, 111, 96, 188, 189, 34, 89, 47, 62, 181, 243, 135, 60, 79, 250, 201, 59, 219, 232, 58, 188, 105, 90, 225, 189, 50, 128, 15, 62, 116, 247, 91, 189, 148, 171, 141, 187, 151, 139, 216, 61, 25, 48, 136, 188, 202, 68, 72, 190, 8, 154, 199, 187, 238, 130, 71, 62, 18, 119, 145, 189, 36, 38, 210, 189, 186, 213, 8, 188, 6, 131, 7, 62, 196, 212, 83, 61, 84, 22, 206, 61, 24, 51, 98, 62, 152, 239, 146, 61, 149, 163, 79, 61, 236, 160, 224, 60, 139, 20, 227, 189, 138, 176, 40, 62, 159, 77, 193, 189, 197, 135, 141, 61, 204, 246, 23, 189, 2, 141, 3, 189, 91, 115, 247, 61, 72, 131, 28, 189, 185, 251, 4, 62, 51, 174, 33, 190, 147, 141, 24, 189, 14, 247, 77, 62, 62, 138, 144, 189, 226, 133, 231, 60, 161, 153, 30, 60, 65, 157, 206, 61, 15, 158, 12, 189, 130, 54, 217, 61, 176, 49, 250, 60, 171, 229, 21, 190, 68, 241, 193, 61, 20, 223, 37, 60, 101, 30, 251, 60, 157, 138, 182, 189, 51, 197, 11, 190, 235, 139, 77, 61, 196, 114, 0, 188, 167, 194, 55, 62, 115, 246, 143, 62, 236, 113, 92, 62, 106, 153, 34, 61, 240, 248, 29, 189, 69, 48, 154, 190, 19, 34, 14, 190, 196, 29, 187, 189, 59, 163, 192, 61, 223, 42, 254, 61, 254, 164, 50, 190, 218, 180, 199, 189, 55, 205, 71, 190, 66, 128, 85, 188, 86, 169, 38, 190, 174, 236, 32, 62, 218, 165, 43, 190, 232, 236, 25, 62, 75, 0, 181, 189, 249, 143, 163, 189, 76, 90, 135, 60, 193, 149, 120, 61, 51, 26, 63, 62, 255, 252, 205, 189, 189, 237, 42, 189, 210, 132, 145, 60, 68, 3, 50, 62, 175, 253, 89, 189, 97, 181, 118, 189, 165, 64, 239, 185, 142, 255, 65, 189, 79, 18, 72, 58, 11, 252, 129, 61, 115, 208, 229, 61, 223, 244, 69, 190, 69, 210, 166, 189, 13, 121, 72, 190, 213, 174, 4, 62, 200, 189, 53, 62, 205, 144, 209, 61, 249, 74, 131, 61, 245, 240, 100, 62, 237, 38, 17, 190, 102, 148, 178, 189, 3, 40, 89, 62, 222, 43, 233, 61, 37, 49, 28, 62, 129, 136, 219, 61, 5, 109, 254, 189, 103, 95, 5, 62, 2, 48, 225, 61, 118, 213, 167, 189, 195, 38, 96, 188, 57, 206, 194, 189, 86, 60, 176, 189, 142, 231, 116, 190, 162, 167, 26, 62, 168, 185, 17, 62, 142, 119, 4, 189, 168, 236, 142, 61, 64, 192, 55, 62, 103, 100, 245, 61, 193, 159, 237, 187, 164, 121, 237, 189, 164, 230, 155, 60, 165, 32, 116, 61, 106, 241, 138, 190, 118, 226, 33, 62, 146, 129, 90, 188, 130, 20, 123, 62, 3, 90, 37, 62, 231, 95, 41, 62, 53, 182, 48, 189, 39, 149, 106, 62, 141, 101, 239, 60, 121, 82, 42, 62, 50, 55, 118, 62, 52, 125, 100, 60, 236, 23, 128, 189, 71, 58, 32, 190, 53, 210, 9, 190, 19, 225, 16, 190, 85, 224, 42, 190, 6, 234, 165, 188, 70, 253, 119, 61, 85, 71, 71, 189, 95, 93, 56, 61, 167, 250, 94, 61, 82, 7, 158, 189, 19, 184, 251, 61, 10, 206, 31, 189, 168, 250, 35, 190, 21, 46, 33, 190, 110, 137, 26, 190, 74, 116, 2, 190, 245, 130, 91, 61, 177, 21, 88, 61, 191, 0, 108, 189, 22, 0, 87, 188, 200, 88, 211, 189, 243, 222, 1, 62, 222, 33, 218, 188, 238, 138, 253, 189, 254, 3, 26, 62, 188, 155, 165, 61, 121, 94, 248, 189, 232, 194, 244, 61, 146, 82, 153, 61, 8, 116, 67, 190, 147, 120, 7, 190, 187, 134, 65, 57, 250, 58, 35, 62, 38, 19, 219, 189, 124, 12, 23, 189, 85, 97, 10, 62, 78, 93, 134, 189, 158, 4, 10, 190, 179, 37, 186, 189, 81, 47, 208, 61, 95, 8, 166, 61, 216, 10, 5, 190, 24, 246, 28, 188, 52, 52, 52, 61, 82, 46, 245, 61, 201, 1, 36, 190, 119, 96, 33, 61, 63, 206, 197, 187, 124, 123, 128, 61, 50, 203, 252, 61, 96, 65, 159, 62, 137, 222, 97, 190, 12, 219, 142, 62, 208, 20, 80, 190, 230, 12, 32, 190, 234, 253, 234, 188, 44, 38, 133, 190, 18, 193, 225, 189, 86, 199, 81, 62, 139, 175, 44, 62, 135, 186, 108, 62, 91, 157, 185, 61, 224, 221, 74, 189, 73, 198, 38, 62, 213, 119, 25, 190, 149, 143, 76, 190, 246, 5, 111, 187, 194, 14, 57, 62, 199, 138, 232, 187, 36, 239, 146, 60, 142, 83, 184, 188, 231, 18, 3, 62, 128, 67, 1, 189, 95, 136, 143, 62, 177, 112, 158, 61, 174, 163, 146, 61, 25, 60, 145, 189, 115, 17, 54, 62, 12, 109, 35, 62, 157, 104, 146, 189, 161, 155, 152, 61, 123, 150, 105, 189, 114, 136, 149, 189, 47, 22, 77, 190, 255, 210, 164, 189, 35, 253, 197, 61, 111, 113, 123, 62, 34, 51, 225, 61, 50, 3, 90, 62, 55, 188, 152, 61, 147, 104, 33, 62, 161, 112, 223, 60, 187, 155, 218, 61, 169, 199, 18, 62, 122, 162, 231, 189, 200, 221, 102, 189, 147, 243, 198, 188, 2, 94, 27, 190, 229, 96, 201, 189, 160, 218, 47, 62, 12, 43, 84, 190, 193, 159, 97, 62, 34, 134, 23, 62, 81, 52, 253, 61, 185, 91, 35, 190, 158, 5, 135, 190, 85, 223, 134, 188, 136, 98, 88, 61, 142, 94, 185, 61, 51, 91, 20, 62, 35, 133, 252, 61, 173, 144, 51, 62, 83, 63, 22, 189, 195, 108, 18, 62, 99, 248, 38, 62, 98, 35, 83, 187, 178, 25, 37, 62, 64, 171, 112, 190, 60, 27, 8, 190, 73, 63, 13, 61, 132, 113, 160, 189, 81, 235, 91, 61, 19, 197, 34, 62, 110, 167, 138, 189, 131, 95, 44, 187, 158, 146, 13, 190, 199, 121, 24, 61, 230, 220, 253, 189, 99, 179, 19, 190, 237, 199, 185, 61, 163, 25, 199, 61, 214, 127, 29, 62, 148, 228, 6, 190, 42, 51, 106, 189, 72, 74, 225, 188, 125, 177, 243, 189, 63, 247, 47, 62, 38, 122, 18, 189, 249, 218, 170, 59, 232, 202, 68, 189, 65, 125, 184, 60, 148, 155, 26, 190, 53, 149, 12, 190, 69, 202, 222, 189, 249, 154, 229, 189, 103, 109, 49, 62, 40, 195, 181, 189, 111, 108, 172, 58, 102, 137, 40, 190, 174, 111, 189, 187, 29, 114, 130, 61, 89, 20, 81, 189, 93, 18, 40, 62, 236, 3, 28, 62, 16, 38, 193, 189, 114, 42, 211, 189, 66, 88, 52, 190, 153, 78, 133, 189, 63, 245, 195, 189, 69, 211, 52, 62, 170, 68, 30, 190, 203, 220, 1, 190, 76, 213, 39, 190, 214, 14, 6, 188, 123, 122, 206, 188, 92, 48, 143, 61, 35, 201, 229, 61, 186, 5, 253, 61, 91, 88, 97, 190, 6, 92, 93, 189, 63, 0, 246, 61, 177, 98, 84, 62, 78, 133, 16, 62, 13, 148, 28, 62, 45, 116, 39, 62, 197, 121, 11, 62, 100, 242, 111, 61, 35, 108, 175, 62, 96, 193, 212, 61, 165, 104, 224, 189, 85, 134, 22, 62, 90, 70, 43, 190, 220, 88, 39, 62, 181, 77, 143, 189, 78, 69, 56, 190, 126, 17, 161, 61, 180, 159, 135, 62, 88, 116, 146, 188, 76, 255, 244, 188, 178, 27, 133, 189, 92, 201, 9, 190, 226, 47, 206, 61, 87, 194, 163, 61, 200, 125, 35, 61, 227, 111, 34, 62, 139, 16, 115, 189, 200, 28, 19, 62, 215, 250, 79, 188, 198, 97, 33, 190, 17, 183, 135, 188, 146, 120, 189, 189, 235, 136, 226, 60, 94, 248, 37, 190, 61, 227, 216, 61, 154, 73, 194, 187, 170, 78, 167, 189, 124, 51, 6, 62, 55, 3, 229, 189, 72, 251, 178, 189, 141, 53, 17, 190, 200, 45, 235, 188, 193, 162, 21, 190, 28, 234, 24, 62, 221, 100, 14, 60, 226, 14, 7, 62, 232, 148, 88, 188, 217, 72, 32, 190, 58, 214, 38, 190, 96, 216, 71, 189, 151, 178, 44, 61, 56, 215, 204, 189, 214, 96, 196, 189, 26, 169, 113, 189, 151, 32, 146, 188, 41, 237, 231, 61, 175, 25, 5, 62, 138, 130, 171, 61, 184, 159, 10, 190, 2, 132, 88, 61, 86, 131, 12, 59, 6, 65, 50, 61, 22, 160, 170, 58, 10, 60, 65, 58, 157, 102, 101, 190, 233, 179, 35, 190, 223, 200, 172, 61, 72, 26, 136, 62, 12, 161, 220, 61, 86, 98, 12, 190, 109, 51, 78, 62, 106, 123, 119, 62, 14, 155, 7, 62, 229, 71, 171, 62, 151, 196, 90, 60, 226, 199, 135, 62, 185, 105, 101, 190, 145, 75, 211, 189, 210, 18, 98, 62, 157, 62, 43, 189, 179, 193, 153, 189, 31, 110, 157, 61, 139, 157, 147, 61, 100, 182, 108, 61, 109, 16, 115, 60, 2, 53, 250, 189, 231, 88, 236, 188, 150, 4, 239, 189, 220, 159, 197, 60, 159, 12, 110, 190, 54, 148, 5, 62, 104, 19, 158, 190, 133, 56, 172, 61, 241, 106, 103, 62, 227, 140, 161, 188, 186, 137, 194, 189, 48, 225, 228, 189, 241, 150, 88, 189, 235, 215, 95, 62, 49, 218, 254, 187, 50, 76, 29, 62, 4, 38, 187, 190, 94, 98, 119, 61, 131, 120, 182, 61, 76, 18, 255, 188, 144, 166, 8, 188, 102, 207, 136, 61, 200, 200, 20, 61, 83, 146, 194, 188, 116, 155, 83, 190, 71, 201, 197, 60, 8, 255, 3, 62, 4, 33, 45, 189, 70, 234, 205, 61, 92, 51, 145, 190, 24, 41, 38, 61, 227, 60, 142, 189, 29, 169, 144, 189, 228, 107, 93, 190, 220, 124, 155, 189, 126, 46, 39, 189, 187, 191, 17, 190, 69, 136, 85, 190, 151, 191, 12, 62, 47, 4, 49, 62, 63, 223, 196, 61, 198, 31, 139, 189, 174, 23, 169, 189, 21, 83, 152, 61, 63, 225, 181, 61, 144, 182, 148, 187, 49, 155, 17, 190, 7, 247, 160, 189, 135, 149, 100, 61, 217, 181, 85, 60, 20, 90, 255, 61, 81, 202, 184, 59, 81, 71, 153, 189, 48, 61, 211, 189, 220, 107, 2, 190, 147, 50, 253, 61, 111, 137, 138, 189, 85, 90, 244, 61, 156, 3, 177, 61, 84, 247, 134, 189, 83, 135, 27, 61, 122, 17, 35, 62, 196, 4, 188, 188, 68, 176, 100, 190, 43, 141, 86, 189, 177, 212, 252, 189, 231, 92, 167, 189, 96, 48, 172, 61, 36, 122, 157, 189, 23, 32, 215, 189, 88, 225, 18, 190, 44, 154, 250, 61, 83, 146, 43, 189, 95, 239, 163, 189, 111, 15, 142, 189, 126, 59, 34, 190, 231, 23, 253, 189, 234, 243, 213, 61, 219, 129, 136, 61, 210, 174, 33, 190, 4, 135, 103, 61, 235, 194, 177, 60, 146, 93, 41, 190, 83, 54, 50, 190, 206, 44, 133, 189, 99, 130, 149, 189, 149, 200, 254, 189, 25, 92, 186, 60, 211, 233, 26, 62, 115, 226, 24, 190, 72, 161, 14, 190, 245, 207, 248, 189, 158, 79, 242, 189, 166, 21, 27, 190, 141, 254, 43, 62, 60, 219, 41, 190, 109, 254, 202, 189, 157, 180, 134, 61, 200, 31, 13, 62, 8, 232, 111, 188, 63, 112, 13, 61, 65, 44, 67, 62, 97, 146, 83, 190, 95, 207, 46, 62, 245, 224, 158, 61, 23, 108, 195, 190, 16, 176, 171, 190, 213, 187, 6, 190, 164, 98, 161, 190, 200, 212, 81, 189, 79, 131, 142, 62, 137, 93, 39, 62, 80, 108, 108, 190, 86, 103, 132, 61, 135, 84, 38, 62, 219, 217, 67, 190, 51, 117, 42, 62, 129, 57, 21, 190, 73, 128, 112, 62, 73, 33, 123, 190, 203, 230, 196, 61, 78, 58, 108, 62, 46, 8, 83, 62, 3, 138, 50, 190, 16, 187, 165, 61, 126, 251, 132, 189, 56, 94, 151, 189, 200, 0, 218, 188, 23, 234, 46, 190, 233, 47, 184, 189, 234, 79, 246, 61, 250, 214, 188, 61, 106, 152, 131, 189, 200, 180, 51, 62, 230, 171, 92, 61, 100, 187, 186, 61, 218, 16, 183, 61, 239, 59, 64, 185, 35, 40, 121, 190, 43, 68, 195, 189, 67, 220, 44, 61, 114, 25, 12, 62, 151, 43, 90, 61, 51, 171, 41, 189, 97, 71, 94, 62, 218, 69, 74, 62, 132, 179, 70, 189, 3, 128, 25, 62, 157, 28, 253, 188, 74, 143, 103, 190, 14, 205, 54, 62, 22, 66, 33, 190, 29, 68, 36, 62, 213, 140, 241, 61, 211, 129, 233, 61, 81, 246, 6, 190, 61, 214, 142, 62, 224, 17, 83, 190, 6, 211, 183, 188, 213, 76, 88, 60, 135, 19, 164, 189, 16, 95, 157, 56, 234, 99, 23, 190, 152, 181, 168, 189, 4, 196, 15, 62, 110, 88, 197, 188, 101, 43, 84, 190, 26, 235, 98, 189, 248, 89, 84, 189, 131, 24, 61, 190, 152, 139, 126, 190, 240, 127, 104, 190, 42, 152, 189, 188, 224, 50, 152, 189, 51, 123, 221, 189, 75, 6, 21, 62, 126, 83, 92, 60, 75, 138, 79, 62, 49, 190, 177, 61, 111, 82, 154, 61, 25, 236, 133, 58, 240, 118, 154, 59, 163, 152, 236, 187, 79, 77, 14, 189, 233, 62, 141, 189, 105, 20, 177, 61, 231, 80, 25, 62, 224, 190, 182, 61, 203, 226, 126, 61, 217, 124, 18, 61, 25, 9, 141, 60, 4, 51, 4, 61, 211, 185, 105, 188, 44, 200, 32, 190, 205, 120, 228, 61, 72, 184, 152, 189, 201, 87, 131, 62, 35, 161, 134, 62, 58, 70, 129, 59, 225, 161, 210, 190, 203, 74, 156, 190, 203, 22, 144, 61, 225, 22, 156, 188, 74, 115, 186, 62, 36, 209, 132, 60, 206, 61, 44, 61, 4, 64, 251, 190, 209, 114, 28, 190, 84, 137, 142, 61, 181, 9, 243, 189, 42, 75, 139, 190, 8, 245, 142, 188, 167, 30, 65, 62, 250, 52, 140, 190, 6, 96, 178, 189, 9, 110, 78, 187, 100, 158, 183, 62, 67, 171, 140, 60, 85, 36, 19, 189, 204, 113, 120, 190, 62, 96, 69, 61, 131, 49, 52, 62, 218, 55, 64, 188, 71, 255, 49, 62, 21, 25, 183, 60, 94, 10, 50, 190, 228, 185, 135, 189, 18, 37, 242, 189, 105, 115, 174, 61, 166, 109, 66, 190, 141, 75, 103, 190, 145, 173, 167, 189, 225, 88, 62, 62, 55, 137, 19, 61, 208, 242, 67, 190, 79, 122, 117, 190, 85, 26, 197, 60, 191, 52, 74, 62, 68, 38, 238, 61, 233, 92, 16, 62, 154, 177, 15, 190, 94, 203, 250, 61, 17, 107, 167, 61, 104, 70, 35, 188, 126, 120, 110, 61, 117, 120, 89, 62, 248, 218, 25, 62, 194, 209, 232, 189, 137, 152, 85, 189, 79, 53, 74, 62, 93, 198, 193, 61, 253, 155, 202, 61, 114, 185, 245, 60, 245, 250, 130, 190, 132, 116, 48, 62, 136, 202, 71, 189, 122, 248, 6, 190, 199, 26, 138, 187, 171, 88, 10, 62, 108, 138, 75, 62, 223, 231, 116, 61, 77, 126, 158, 189, 100, 200, 135, 62, 26, 227, 49, 62, 224, 99, 162, 189, 147, 244, 90, 60, 181, 166, 111, 62, 101, 227, 61, 190, 19, 185, 38, 62, 78, 35, 232, 61, 139, 80, 23, 62, 64, 22, 25, 62, 184, 4, 53, 61, 86, 78, 111, 190, 107, 145, 97, 186, 4, 183, 74, 61, 245, 40, 114, 61, 28, 211, 66, 189, 59, 189, 43, 62, 162, 47, 94, 61, 222, 177, 94, 190, 175, 195, 151, 189, 230, 212, 237, 188, 49, 70, 64, 61, 82, 66, 194, 189, 227, 235, 208, 185, 125, 96, 241, 61, 212, 121, 96, 190, 237, 243, 105, 62, 128, 144, 13, 60, 148, 126, 223, 189, 35, 101, 16, 62, 38, 54, 156, 189, 49, 92, 27, 60, 14, 19, 93, 190, 228, 150, 39, 62, 195, 9, 56, 62, 238, 72, 79, 61, 6, 74, 166, 189, 235, 238, 169, 189, 118, 249, 108, 188, 21, 11, 12, 61, 205, 123, 74, 62, 208, 47, 205, 189, 49, 234, 83, 190, 201, 148, 134, 62, 150, 133, 100, 61, 216, 158, 235, 189, 117, 121, 57, 60, 56, 123, 74, 62, 121, 161, 43, 62, 171, 203, 102, 190, 223, 86, 76, 190, 244, 241, 138, 189, 3, 92, 1, 62, 66, 202, 188, 189, 63, 161, 16, 190, 9, 154, 152, 190, 128, 73, 159, 60, 9, 127, 26, 190, 242, 81, 175, 189, 28, 219, 0, 185, 40, 220, 159, 186, 107, 71, 129, 188, 201, 46, 31, 62, 167, 132, 49, 190, 10, 52, 13, 62, 92, 71, 8, 190, 41, 176, 10, 60, 228, 10, 119, 61, 232, 119, 220, 188, 87, 57, 30, 62, 65, 247, 196, 61, 237, 240, 43, 190, 65, 130, 6, 61, 105, 32, 105, 190, 32, 51, 182, 58, 138, 130, 6, 189, 88, 234, 126, 189, 90, 144, 17, 61, 116, 174, 246, 61, 171, 129, 245, 189, 125, 54, 198, 61, 216, 50, 254, 61, 182, 121, 83, 190, 132, 56, 6, 190, 9, 232, 173, 189, 162, 194, 4, 190, 133, 188, 35, 190, 71, 109, 228, 189, 36, 154, 41, 190, 244, 87, 138, 189, 56, 92, 194, 59, 55, 212, 36, 59, 0, 192, 5, 62, 218, 199, 180, 61, 24, 23, 138, 189, 110, 107, 135, 189, 140, 45, 240, 61, 146, 139, 58, 61, 65, 15, 136, 61, 216, 2, 161, 189, 193, 213, 137, 61, 254, 146, 119, 190, 225, 134, 66, 62, 198, 4, 46, 62, 96, 137, 23, 62, 0, 63, 118, 189, 39, 49, 153, 190, 45, 194, 26, 62, 38, 193, 234, 61, 220, 111, 24, 190, 102, 207, 153, 188, 53, 43, 12, 62, 60, 47, 226, 188, 212, 193, 137, 190, 255, 82, 82, 190, 212, 173, 131, 62, 172, 131, 54, 62, 210, 216, 254, 61, 193, 143, 177, 189, 222, 218, 40, 190, 46, 60, 101, 62, 173, 2, 54, 62, 13, 234, 218, 189, 58, 149, 23, 190, 124, 83, 130, 189, 219, 177, 228, 188, 219, 227, 6, 189, 185, 39, 50, 62, 137, 205, 39, 190, 246, 11, 146, 60, 127, 66, 51, 62, 54, 140, 134, 189, 122, 119, 198, 188, 180, 189, 229, 61, 39, 36, 247, 189, 250, 159, 36, 62, 206, 153, 23, 62, 123, 225, 146, 189, 11, 178, 245, 189, 43, 178, 143, 59, 34, 223, 39, 62, 198, 195, 75, 61, 253, 59, 83, 189, 74, 232, 36, 62, 105, 114, 41, 190, 57, 83, 196, 189, 2, 81, 244, 187, 2, 204, 29, 190, 143, 96, 31, 190, 55, 217, 143, 61, 120, 40, 129, 188, 84, 15, 50, 190, 186, 60, 35, 189, 54, 216, 52, 190, 0, 48, 12, 190, 177, 113, 130, 60, 84, 249, 13, 62, 156, 223, 146, 189, 51, 245, 51, 188, 164, 115, 14, 189, 190, 23, 199, 186, 108, 174, 192, 61, 200, 74, 59, 61, 89, 48, 12, 62, 43, 117, 107, 62, 118, 13, 166, 61, 181, 95, 11, 189, 183, 236, 15, 190, 135, 59, 99, 190, 46, 39, 237, 61, 232, 228, 115, 62, 56, 56, 18, 190, 129, 68, 128, 189, 115, 89, 212, 189, 38, 133, 167, 61, 51, 165, 120, 61, 35, 192, 96, 61, 143, 181, 158, 59, 207, 130, 34, 61, 70, 95, 133, 189, 16, 34, 5, 62, 205, 230, 189, 189, 109, 169, 160, 60, 7, 215, 55, 62, 49, 135, 207, 188, 151, 201, 40, 62, 221, 98, 132, 186, 44, 241, 81, 188, 228, 186, 29, 61, 37, 71, 61, 190, 128, 48, 142, 189, 242, 40, 190, 59, 170, 30, 49, 189, 13, 154, 247, 61, 235, 218, 74, 62, 105, 234, 19, 188, 244, 0, 9, 190, 58, 146, 134, 60, 14, 27, 49, 190, 223, 96, 125, 62, 34, 126, 130, 189, 142, 246, 118, 188, 171, 90, 126, 61, 0, 128, 28, 62, 201, 180, 25, 190, 177, 204, 161, 186, 45, 202, 179, 61, 103, 143, 144, 60, 146, 100, 70, 62, 163, 76, 195, 61, 64, 159, 153, 59, 224, 134, 34, 62, 181, 183, 237, 61, 181, 73, 26, 189, 118, 109, 250, 188, 238, 4, 38, 190, 105, 233, 112, 189, 17, 138, 105, 189, 100, 246, 195, 189, 245, 48, 28, 189, 105, 180, 51, 62, 254, 102, 162, 61, 188, 13, 133, 188, 253, 191, 95, 62, 45, 70, 72, 61, 43, 62, 144, 190, 202, 160, 130, 60, 182, 128, 166, 189, 16, 79, 97, 62, 154, 19, 85, 62, 0, 238, 88, 62, 203, 170, 144, 188, 20, 55, 203, 189, 40, 213, 110, 61, 130, 223, 124, 61, 37, 100, 55, 61, 61, 53, 33, 190, 80, 195, 243, 188, 79, 114, 9, 190, 5, 178, 182, 190, 36, 79, 141, 189, 184, 113, 160, 62, 64, 106, 200, 62, 16, 128, 124, 190, 126, 18, 143, 61, 72, 220, 4, 62, 195, 62, 178, 188, 199, 59, 144, 60, 141, 134, 11, 60, 71, 165, 141, 61, 225, 4, 135, 188, 38, 161, 186, 189, 33, 134, 220, 189, 14, 72, 147, 61, 189, 82, 193, 188, 247, 148, 40, 190, 8, 243, 193, 59, 39, 247, 111, 189, 139, 62, 216, 185, 209, 220, 178, 188, 186, 104, 20, 190, 191, 62, 4, 190, 191, 48, 156, 189, 19, 133, 229, 61, 92, 168, 208, 189, 73, 122, 242, 61, 113, 26, 137, 189, 35, 190, 133, 189, 209, 42, 247, 188, 115, 233, 248, 188, 19, 195, 232, 189, 43, 241, 17, 62, 122, 184, 129, 189, 39, 168, 129, 61, 98, 152, 208, 61, 207, 167, 24, 190, 82, 248, 58, 60, 31, 12, 50, 185, 41, 228, 243, 61, 211, 210, 9, 190, 204, 159, 11, 62, 115, 101, 75, 189, 150, 148, 99, 61, 29, 201, 141, 61, 151, 103, 66, 60, 128, 241, 108, 188, 235, 148, 151, 189, 188, 61, 31, 189, 203, 123, 19, 190, 240, 194, 41, 190, 3, 147, 16, 62, 4, 186, 46, 62, 156, 187, 141, 61, 251, 78, 48, 189, 127, 3, 56, 62, 199, 11, 65, 62, 253, 129, 20, 61, 188, 153, 159, 188, 179, 218, 100, 61, 245, 36, 5, 190, 106, 121, 142, 189, 109, 34, 74, 189, 129, 175, 159, 60, 78, 242, 148, 61, 187, 169, 204, 61, 238, 31, 170, 61, 198, 181, 38, 189, 250, 11, 210, 189, 19, 15, 13, 189, 245, 182, 170, 61, 141, 198, 78, 60, 43, 17, 81, 62, 65, 38, 99, 188, 226, 104, 238, 61, 29, 29, 174, 189, 140, 159, 186, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {3, 203, 135, 189, 91, 152, 30, 62, 150, 226, 72, 190, 20, 33, 41, 190, 123, 142, 168, 61, 7, 43, 79, 189, 149, 76, 103, 61, 3, 206, 177, 188, 3, 135, 8, 59, 199, 222, 50, 62, 251, 97, 46, 190, 67, 187, 112, 62, 95, 224, 166, 189, 65, 98, 219, 61, 41, 192, 2, 62, 34, 205, 26, 190, 70, 235, 198, 189, 234, 24, 148, 60, 133, 60, 247, 188, 233, 165, 27, 61, 208, 128, 134, 62, 4, 111, 163, 61, 91, 186, 93, 190, 181, 12, 73, 62, 159, 139, 234, 58, 147, 3, 84, 61, 100, 94, 47, 190, 202, 128, 151, 60, 175, 241, 20, 189, 190, 3, 37, 62, 133, 186, 210, 189, 30, 246, 69, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 111, 74, 190, 64, 10, 14, 62, 138, 193, 68, 61, 91, 79, 112, 61, 139, 42, 194, 59, 153, 11, 139, 189, 20, 104, 173, 189, 185, 154, 127, 62, 58, 216, 30, 190, 161, 208, 61, 62, 123, 163, 167, 188, 165, 159, 7, 61, 197, 72, 1, 189, 22, 225, 43, 62, 87, 179, 55, 62, 52, 76, 246, 61, 195, 148, 140, 61, 38, 244, 190, 62, 247, 100, 131, 61, 18, 95, 252, 61, 219, 163, 252, 190, 97, 55, 93, 62, 152, 68, 117, 61, 70, 159, 88, 62, 48, 125, 242, 61, 92, 155, 139, 62, 76, 203, 42, 189, 8, 75, 220, 189, 224, 163, 232, 61, 80, 78, 49, 190, 152, 247, 250, 189, 144, 171, 64, 190, 113, 0, 248, 188, 102, 152, 82, 190, 54, 246, 5, 62, 188, 116, 11, 62, 141, 65, 147, 190, 92, 62, 24, 190, 103, 49, 15, 62, 131, 150, 112, 190, 4, 191, 36, 190, 185, 234, 50, 190, 135, 187, 208, 59, 220, 229, 74, 190, 124, 218, 222, 187, 6, 224, 251, 188, 232, 194, 132, 62, 224, 16, 66, 61, 57, 224, 250, 61, 12, 229, 198, 61, 155, 88, 124, 190, 55, 170, 200, 189, 30, 29, 85, 62, 70, 197, 97, 60, 218, 27, 56, 62, 118, 248, 62, 62, 26, 187, 33, 189, 211, 217, 88, 61, 113, 86, 32, 189, 136, 170, 80, 61, 170, 89, 27, 190, 23, 8, 103, 189, 122, 212, 237, 61, 197, 57, 232, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 93, 157, 189, 246, 153, 167, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {222, 189, 60, 63, 181, 139, 154, 191, 61, 23, 97, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {21, 130, 214, 63, 178, 171, 178, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0011/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}