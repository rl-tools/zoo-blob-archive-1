// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {9, 0, 64, 61, 112, 171, 47, 63, 242, 51, 134, 190, 37, 122, 16, 62, 27, 189, 163, 190, 111, 25, 196, 62, 104, 149, 214, 62, 9, 243, 243, 190, 134, 27, 87, 190, 194, 151, 18, 190, 230, 243, 35, 62, 249, 130, 7, 63, 215, 166, 227, 61, 11, 59, 188, 190, 227, 116, 168, 189, 139, 251, 174, 190, 39, 43, 56, 63, 105, 210, 99, 190, 39, 230, 23, 63, 44, 4, 81, 191, 91, 76, 180, 190, 45, 235, 132, 190, 113, 49, 94, 191, 185, 93, 89, 189, 145, 95, 236, 190, 89, 75, 182, 188, 132, 2, 141, 62, 182, 64, 53, 63, 73, 250, 125, 190, 68, 92, 208, 190, 108, 97, 226, 62, 122, 158, 130, 62, 38, 161, 167, 62, 8, 105, 150, 62, 181, 211, 60, 62, 42, 139, 117, 189, 101, 33, 33, 62, 140, 54, 21, 62, 32, 230, 197, 58, 204, 135, 206, 190, 115, 217, 235, 62, 111, 160, 222, 62, 75, 69, 36, 191, 82, 155, 100, 191, 76, 29, 38, 63, 129, 104, 43, 62, 136, 91, 83, 191, 238, 126, 166, 190, 29, 221, 219, 60, 18, 181, 166, 187, 126, 156, 11, 63, 203, 112, 132, 62, 228, 138, 93, 191, 201, 186, 170, 188, 208, 19, 150, 190, 26, 26, 102, 63, 183, 99, 249, 188, 192, 79, 132, 190, 188, 60, 115, 190, 36, 101, 219, 62, 56, 22, 134, 190, 2, 79, 103, 191, 20, 24, 39, 60, 181, 25, 129, 62, 110, 33, 25, 62, 46, 252, 236, 62, 183, 70, 88, 62, 93, 190, 134, 190, 10, 182, 159, 190, 158, 129, 226, 62, 217, 2, 239, 190, 182, 43, 211, 62, 14, 236, 135, 60, 160, 1, 186, 62, 34, 74, 74, 190, 166, 161, 253, 62, 73, 17, 37, 63, 105, 104, 200, 62, 38, 76, 0, 62, 111, 1, 11, 63, 164, 253, 165, 190, 132, 42, 4, 63, 128, 161, 247, 190, 236, 207, 171, 190, 239, 4, 111, 62, 116, 125, 49, 191, 48, 142, 28, 62, 198, 111, 31, 191, 65, 208, 0, 191, 14, 3, 117, 62, 59, 44, 70, 190, 214, 21, 241, 190, 207, 147, 250, 189, 82, 131, 17, 63, 230, 226, 34, 63, 171, 95, 175, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 156, 253, 190, 227, 177, 230, 190, 161, 211, 187, 62, 130, 78, 232, 62, 27, 146, 166, 190, 77, 76, 124, 62, 122, 61, 139, 62, 60, 184, 77, 62, 224, 191, 123, 190, 67, 48, 213, 62, 51, 118, 56, 190, 0, 231, 36, 191, 159, 167, 60, 63, 59, 116, 234, 62, 183, 195, 136, 190, 185, 16, 46, 60, 209, 44, 227, 190, 179, 8, 169, 62, 188, 114, 183, 61, 192, 133, 161, 190, 71, 39, 149, 62, 215, 192, 120, 190, 128, 26, 46, 63, 43, 110, 183, 190, 195, 166, 145, 190, 228, 36, 176, 189, 165, 184, 186, 190, 161, 106, 8, 190, 54, 223, 199, 62, 200, 76, 66, 189, 222, 168, 64, 191, 125, 36, 118, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 252, 88, 62, 177, 247, 60, 189, 161, 99, 168, 189, 153, 194, 31, 62, 160, 204, 171, 188, 129, 46, 138, 188, 9, 107, 231, 61, 53, 83, 68, 62, 14, 168, 169, 61, 216, 68, 38, 62, 72, 140, 29, 58, 229, 35, 8, 62, 26, 140, 113, 189, 76, 108, 127, 61, 221, 244, 3, 62, 25, 130, 44, 62, 231, 133, 221, 61, 66, 230, 34, 61, 116, 223, 65, 190, 227, 184, 232, 59, 72, 129, 45, 61, 148, 39, 143, 188, 53, 84, 49, 61, 49, 124, 2, 190, 222, 157, 23, 189, 153, 141, 95, 190, 89, 3, 24, 61, 121, 224, 48, 189, 178, 221, 166, 62, 62, 154, 197, 189, 204, 50, 130, 190, 182, 9, 99, 189, 33, 212, 196, 61, 91, 28, 10, 188, 184, 72, 2, 62, 33, 42, 94, 188, 109, 120, 13, 190, 3, 110, 22, 189, 204, 140, 109, 60, 227, 76, 10, 190, 241, 11, 105, 61, 63, 20, 129, 188, 163, 1, 221, 189, 75, 52, 186, 61, 251, 223, 205, 187, 101, 22, 23, 190, 177, 140, 122, 61, 210, 244, 46, 62, 145, 141, 150, 61, 200, 19, 89, 190, 161, 217, 212, 189, 151, 44, 15, 62, 94, 159, 202, 189, 171, 39, 9, 60, 20, 140, 48, 190, 14, 147, 184, 189, 14, 68, 33, 62, 160, 199, 58, 62, 241, 175, 223, 60, 249, 185, 254, 61, 37, 2, 92, 190, 169, 131, 151, 189, 249, 153, 44, 61, 252, 103, 30, 62, 205, 116, 23, 190, 125, 76, 1, 62, 61, 226, 252, 61, 52, 46, 18, 62, 76, 153, 10, 189, 60, 121, 109, 62, 245, 176, 90, 190, 31, 191, 251, 189, 233, 203, 223, 61, 121, 151, 23, 190, 45, 188, 205, 188, 14, 228, 12, 188, 25, 60, 122, 62, 170, 51, 203, 61, 75, 166, 29, 190, 26, 142, 154, 58, 100, 238, 43, 62, 170, 242, 99, 190, 40, 87, 40, 61, 206, 5, 64, 189, 43, 117, 100, 190, 21, 58, 48, 62, 181, 27, 79, 62, 186, 191, 81, 62, 58, 82, 139, 190, 37, 192, 178, 61, 16, 250, 150, 57, 154, 229, 103, 190, 38, 202, 31, 190, 64, 171, 81, 190, 128, 69, 248, 189, 142, 216, 231, 189, 94, 128, 238, 189, 70, 118, 72, 186, 147, 176, 254, 189, 215, 171, 174, 61, 72, 7, 17, 62, 250, 186, 226, 189, 76, 107, 161, 61, 101, 81, 146, 189, 129, 10, 199, 189, 185, 226, 180, 188, 215, 251, 244, 61, 9, 67, 41, 62, 99, 59, 232, 189, 104, 24, 45, 190, 123, 72, 1, 62, 128, 15, 189, 189, 185, 168, 16, 190, 245, 160, 38, 62, 132, 233, 31, 62, 133, 24, 3, 190, 54, 133, 34, 61, 32, 179, 129, 61, 18, 205, 38, 190, 26, 4, 32, 190, 100, 23, 38, 190, 22, 136, 51, 190, 210, 57, 29, 190, 210, 15, 202, 60, 140, 221, 36, 190, 200, 0, 23, 62, 4, 243, 136, 60, 14, 137, 214, 189, 238, 246, 227, 61, 68, 180, 34, 190, 182, 154, 81, 61, 120, 140, 205, 188, 110, 169, 63, 190, 147, 105, 11, 190, 180, 59, 116, 189, 167, 68, 1, 189, 135, 170, 60, 61, 131, 85, 72, 62, 91, 47, 240, 189, 112, 245, 48, 61, 185, 171, 86, 62, 16, 117, 65, 61, 209, 142, 238, 61, 185, 186, 109, 189, 137, 24, 108, 60, 204, 235, 114, 62, 134, 248, 172, 189, 207, 204, 113, 61, 207, 75, 106, 62, 249, 22, 64, 188, 204, 194, 90, 62, 114, 240, 86, 190, 40, 239, 149, 189, 16, 56, 128, 190, 129, 244, 117, 189, 36, 27, 137, 61, 189, 246, 116, 62, 97, 150, 6, 62, 179, 93, 251, 189, 235, 91, 224, 189, 153, 124, 194, 189, 8, 35, 173, 61, 236, 174, 227, 189, 225, 73, 253, 61, 163, 46, 38, 62, 228, 195, 65, 62, 152, 226, 222, 187, 24, 214, 102, 189, 49, 132, 57, 190, 118, 255, 227, 187, 227, 118, 37, 62, 193, 132, 81, 59, 113, 168, 87, 62, 249, 78, 44, 190, 153, 65, 59, 190, 166, 31, 25, 60, 230, 195, 180, 188, 237, 63, 239, 189, 149, 80, 37, 62, 210, 24, 210, 61, 152, 88, 214, 189, 197, 200, 32, 60, 220, 104, 82, 189, 211, 115, 198, 61, 122, 1, 125, 190, 27, 60, 60, 62, 91, 111, 29, 187, 29, 252, 18, 190, 11, 6, 36, 189, 176, 181, 59, 61, 64, 94, 27, 62, 250, 46, 68, 62, 139, 233, 113, 187, 80, 236, 19, 190, 119, 236, 21, 187, 174, 72, 242, 189, 100, 144, 98, 189, 113, 193, 196, 62, 3, 18, 175, 189, 140, 183, 169, 189, 107, 135, 216, 189, 93, 250, 101, 189, 181, 241, 94, 189, 62, 55, 60, 189, 78, 240, 130, 62, 56, 147, 147, 187, 245, 39, 35, 190, 73, 26, 221, 61, 15, 154, 220, 189, 65, 155, 151, 189, 89, 234, 74, 62, 53, 253, 166, 189, 245, 34, 102, 190, 103, 149, 181, 188, 207, 140, 74, 61, 14, 99, 202, 189, 34, 30, 144, 189, 42, 248, 228, 61, 140, 32, 138, 61, 206, 20, 173, 190, 38, 155, 145, 61, 27, 201, 193, 189, 37, 119, 46, 60, 51, 213, 65, 62, 170, 1, 227, 188, 229, 220, 67, 62, 124, 198, 90, 190, 229, 235, 36, 186, 126, 15, 43, 190, 28, 157, 244, 60, 27, 79, 223, 189, 66, 148, 210, 190, 11, 35, 154, 189, 112, 208, 149, 60, 240, 147, 120, 62, 77, 128, 34, 190, 52, 47, 52, 62, 81, 199, 181, 186, 90, 176, 58, 61, 172, 25, 180, 188, 47, 208, 7, 62, 72, 232, 8, 62, 253, 108, 3, 188, 56, 54, 136, 61, 95, 35, 160, 190, 37, 163, 87, 62, 11, 241, 185, 189, 232, 245, 10, 62, 215, 48, 72, 190, 130, 14, 45, 61, 66, 24, 64, 58, 40, 128, 137, 190, 100, 39, 14, 62, 204, 252, 128, 188, 7, 238, 103, 61, 187, 178, 72, 59, 45, 238, 6, 190, 143, 108, 32, 61, 156, 3, 176, 189, 15, 177, 98, 189, 38, 96, 237, 61, 135, 128, 226, 62, 227, 22, 140, 190, 52, 168, 23, 190, 123, 66, 38, 190, 93, 220, 116, 189, 205, 23, 92, 62, 42, 60, 22, 61, 218, 191, 43, 62, 225, 43, 218, 61, 228, 94, 187, 189, 20, 116, 150, 189, 229, 130, 200, 60, 232, 38, 80, 189, 193, 207, 143, 62, 152, 231, 137, 189, 69, 187, 97, 190, 227, 88, 141, 61, 110, 159, 72, 62, 78, 139, 218, 61, 249, 147, 221, 189, 103, 5, 85, 62, 197, 72, 27, 189, 174, 220, 194, 190, 251, 150, 79, 189, 64, 69, 70, 190, 183, 184, 107, 190, 163, 241, 142, 61, 144, 92, 217, 61, 100, 203, 44, 190, 28, 26, 199, 61, 225, 228, 18, 190, 113, 215, 21, 62, 22, 106, 157, 61, 204, 150, 121, 61, 222, 189, 28, 190, 189, 188, 215, 61, 23, 184, 61, 190, 166, 47, 47, 188, 115, 120, 15, 62, 133, 61, 216, 61, 99, 87, 153, 189, 9, 24, 43, 190, 72, 147, 116, 61, 90, 36, 232, 61, 154, 224, 151, 189, 157, 146, 193, 189, 210, 20, 22, 190, 147, 227, 241, 189, 92, 111, 250, 188, 246, 169, 36, 190, 149, 224, 12, 187, 17, 119, 49, 190, 218, 69, 168, 189, 152, 3, 20, 189, 1, 126, 4, 62, 224, 227, 177, 187, 154, 99, 133, 189, 10, 45, 155, 189, 206, 206, 38, 190, 63, 109, 6, 190, 74, 25, 63, 61, 199, 114, 109, 188, 230, 69, 38, 190, 27, 38, 71, 190, 105, 109, 16, 61, 82, 207, 85, 62, 231, 130, 43, 61, 98, 68, 21, 62, 14, 68, 3, 62, 168, 76, 198, 61, 242, 232, 2, 187, 30, 184, 85, 190, 177, 141, 134, 189, 24, 126, 90, 60, 117, 68, 191, 61, 88, 134, 161, 188, 217, 162, 96, 61, 140, 224, 181, 189, 165, 117, 175, 61, 120, 255, 97, 189, 165, 169, 13, 190, 136, 42, 53, 189, 58, 239, 3, 62, 128, 20, 180, 188, 224, 194, 113, 60, 16, 203, 245, 61, 130, 109, 35, 62, 11, 51, 69, 59, 54, 79, 128, 61, 0, 55, 127, 61, 215, 128, 15, 62, 91, 21, 103, 190, 178, 183, 203, 61, 209, 25, 64, 62, 236, 223, 235, 189, 45, 224, 54, 62, 73, 133, 153, 62, 190, 212, 53, 190, 45, 22, 100, 189, 246, 204, 30, 189, 34, 41, 62, 188, 209, 11, 99, 61, 98, 4, 214, 188, 143, 11, 55, 60, 151, 93, 36, 62, 86, 40, 6, 191, 202, 239, 197, 60, 236, 77, 103, 190, 247, 69, 245, 60, 23, 111, 25, 62, 181, 72, 208, 189, 54, 250, 114, 62, 39, 105, 150, 61, 205, 77, 57, 61, 155, 179, 88, 190, 186, 74, 149, 190, 163, 103, 1, 189, 6, 61, 176, 60, 186, 142, 220, 61, 13, 47, 2, 191, 130, 28, 139, 188, 130, 88, 107, 62, 162, 251, 82, 190, 124, 124, 13, 187, 133, 85, 245, 61, 95, 98, 148, 60, 22, 154, 73, 189, 60, 171, 32, 190, 114, 97, 124, 60, 202, 59, 245, 189, 145, 212, 7, 61, 163, 55, 99, 190, 188, 40, 50, 61, 144, 161, 251, 61, 51, 209, 77, 61, 162, 78, 216, 189, 21, 148, 76, 61, 158, 56, 61, 60, 49, 203, 219, 189, 198, 122, 18, 62, 54, 221, 70, 62, 47, 40, 28, 190, 153, 99, 26, 62, 129, 98, 89, 61, 254, 200, 39, 190, 28, 113, 84, 190, 124, 33, 253, 60, 128, 2, 37, 190, 172, 87, 243, 189, 203, 52, 227, 189, 159, 156, 119, 61, 12, 118, 29, 62, 122, 38, 252, 61, 217, 234, 15, 62, 169, 31, 120, 60, 126, 104, 69, 60, 179, 57, 9, 62, 108, 133, 2, 189, 125, 85, 3, 62, 83, 64, 28, 189, 59, 204, 209, 189, 144, 222, 231, 61, 12, 196, 11, 190, 103, 237, 237, 61, 93, 90, 180, 61, 244, 198, 54, 189, 244, 113, 4, 190, 108, 206, 211, 189, 176, 194, 43, 62, 181, 146, 50, 189, 91, 158, 191, 189, 181, 95, 169, 188, 24, 118, 72, 189, 109, 78, 66, 189, 61, 253, 182, 186, 164, 140, 31, 190, 199, 185, 121, 189, 92, 91, 140, 58, 93, 211, 43, 62, 50, 227, 25, 190, 171, 42, 236, 60, 248, 78, 20, 61, 231, 19, 117, 61, 84, 227, 44, 61, 229, 212, 176, 189, 10, 167, 1, 61, 82, 225, 119, 62, 216, 91, 99, 62, 143, 135, 9, 190, 241, 50, 237, 61, 32, 90, 147, 61, 56, 5, 152, 190, 182, 25, 93, 189, 86, 234, 76, 62, 61, 34, 145, 62, 173, 46, 132, 62, 175, 129, 122, 62, 77, 80, 249, 189, 87, 108, 21, 190, 51, 229, 129, 61, 183, 80, 225, 189, 111, 240, 146, 61, 210, 204, 234, 58, 105, 109, 143, 189, 144, 201, 45, 62, 42, 230, 153, 190, 45, 13, 202, 189, 140, 197, 112, 62, 193, 32, 37, 189, 4, 127, 155, 189, 148, 119, 204, 60, 141, 28, 122, 62, 39, 53, 134, 190, 31, 96, 138, 188, 45, 69, 88, 62, 216, 74, 215, 62, 83, 102, 193, 62, 241, 42, 74, 189, 212, 41, 250, 189, 148, 224, 169, 61, 207, 160, 82, 190, 45, 82, 37, 62, 190, 63, 77, 189, 186, 36, 136, 190, 207, 220, 200, 60, 213, 255, 25, 61, 167, 72, 26, 61, 87, 139, 2, 61, 148, 146, 2, 62, 8, 62, 217, 190, 174, 27, 162, 61, 253, 138, 48, 61, 56, 222, 87, 188, 65, 110, 42, 62, 31, 126, 27, 62, 235, 11, 77, 188, 193, 142, 15, 61, 181, 120, 63, 61, 141, 43, 51, 189, 249, 120, 91, 62, 175, 69, 140, 188, 8, 2, 19, 62, 245, 99, 165, 60, 10, 31, 173, 61, 75, 173, 80, 190, 245, 150, 142, 189, 152, 164, 35, 189, 232, 74, 195, 62, 140, 205, 177, 62, 1, 56, 44, 190, 206, 122, 15, 189, 109, 99, 246, 187, 100, 114, 55, 190, 86, 73, 144, 60, 180, 144, 26, 190, 56, 220, 215, 59, 244, 54, 96, 61, 63, 210, 17, 190, 12, 13, 221, 58, 63, 12, 253, 60, 220, 97, 155, 189, 93, 141, 228, 61, 61, 202, 52, 189, 13, 163, 124, 189, 106, 21, 178, 61, 211, 6, 187, 60, 106, 81, 21, 190, 9, 249, 61, 61, 5, 250, 14, 190, 189, 204, 133, 61, 130, 220, 128, 60, 216, 118, 157, 189, 28, 130, 31, 190, 27, 209, 15, 190, 144, 91, 12, 62, 184, 229, 22, 190, 204, 240, 87, 189, 128, 38, 3, 189, 115, 224, 15, 189, 9, 158, 6, 62, 121, 215, 241, 60, 78, 171, 150, 61, 89, 110, 187, 61, 210, 94, 115, 189, 2, 153, 201, 60, 203, 30, 13, 62, 31, 225, 41, 62, 188, 164, 135, 190, 97, 215, 202, 190, 104, 59, 146, 61, 227, 57, 184, 62, 156, 30, 21, 61, 125, 39, 27, 186, 195, 219, 22, 190, 91, 252, 21, 190, 197, 1, 97, 61, 20, 167, 194, 61, 151, 58, 66, 62, 40, 180, 66, 187, 176, 253, 236, 61, 9, 10, 153, 189, 88, 44, 64, 190, 171, 26, 36, 190, 120, 67, 155, 62, 137, 209, 139, 189, 175, 29, 244, 188, 72, 228, 242, 189, 4, 90, 10, 190, 49, 99, 114, 190, 35, 240, 80, 190, 164, 227, 138, 189, 213, 229, 190, 60, 217, 110, 157, 61, 106, 190, 217, 60, 143, 232, 221, 61, 191, 59, 103, 190, 154, 82, 22, 62, 136, 8, 42, 190, 228, 114, 12, 62, 58, 100, 68, 190, 205, 161, 168, 62, 234, 127, 154, 60, 29, 120, 127, 190, 111, 176, 38, 190, 116, 90, 1, 62, 55, 82, 138, 61, 33, 54, 143, 188, 50, 76, 222, 188, 5, 221, 21, 62, 206, 119, 58, 189, 85, 15, 232, 189, 43, 254, 165, 59, 224, 222, 74, 61, 205, 178, 56, 62, 23, 199, 31, 62, 122, 201, 117, 190, 147, 219, 21, 62, 119, 195, 226, 187, 109, 59, 0, 61, 57, 129, 26, 190, 18, 16, 248, 61, 218, 104, 221, 61, 104, 193, 154, 190, 195, 191, 213, 61, 203, 140, 50, 190, 195, 234, 114, 189, 204, 14, 37, 61, 88, 79, 11, 189, 47, 48, 27, 190, 18, 19, 66, 189, 159, 164, 180, 189, 210, 117, 192, 61, 22, 207, 39, 190, 40, 8, 131, 188, 28, 81, 246, 59, 13, 178, 3, 190, 73, 136, 49, 61, 165, 151, 5, 187, 126, 85, 62, 190, 99, 174, 216, 189, 220, 81, 167, 61, 232, 38, 51, 61, 19, 15, 183, 61, 26, 172, 67, 190, 83, 248, 174, 189, 140, 101, 14, 188, 172, 210, 159, 189, 210, 23, 57, 190, 134, 111, 42, 189, 114, 59, 8, 190, 200, 29, 36, 190, 210, 210, 87, 61, 247, 97, 8, 189, 207, 188, 184, 61, 149, 27, 180, 61, 250, 239, 199, 61, 242, 98, 15, 190, 23, 214, 150, 189, 9, 128, 3, 62, 191, 170, 37, 62, 122, 203, 149, 189, 39, 54, 115, 62, 68, 235, 161, 61, 106, 28, 47, 190, 31, 235, 80, 62, 183, 1, 228, 60, 62, 33, 162, 61, 142, 93, 7, 190, 154, 164, 29, 62, 8, 237, 55, 190, 36, 128, 66, 190, 120, 201, 229, 61, 185, 204, 224, 61, 108, 119, 191, 189, 23, 163, 214, 188, 213, 115, 142, 61, 120, 149, 184, 61, 193, 249, 49, 60, 189, 34, 75, 61, 6, 126, 4, 190, 29, 197, 141, 61, 214, 209, 86, 60, 164, 238, 219, 188, 118, 190, 247, 189, 159, 77, 112, 189, 76, 58, 155, 59, 181, 12, 70, 190, 77, 72, 46, 61, 218, 67, 33, 190, 160, 120, 126, 61, 120, 129, 39, 62, 231, 49, 47, 61, 24, 113, 16, 62, 58, 57, 176, 60, 58, 124, 150, 188, 15, 230, 219, 61, 246, 108, 241, 189, 151, 78, 13, 190, 143, 226, 96, 61, 154, 114, 32, 62, 251, 38, 155, 61, 135, 102, 2, 62, 98, 252, 190, 189, 143, 72, 112, 61, 77, 237, 27, 190, 233, 85, 132, 188, 217, 216, 7, 62, 42, 34, 202, 189, 53, 46, 57, 188, 220, 72, 194, 190, 186, 253, 38, 190, 253, 99, 17, 189, 14, 52, 108, 187, 5, 202, 76, 61, 244, 147, 117, 61, 165, 59, 115, 61, 195, 68, 96, 189, 249, 162, 12, 189, 215, 161, 93, 62, 179, 115, 200, 61, 218, 18, 44, 189, 56, 156, 24, 62, 3, 170, 80, 189, 190, 7, 58, 62, 107, 187, 162, 61, 123, 140, 132, 62, 127, 158, 9, 62, 103, 235, 118, 189, 229, 121, 201, 61, 66, 164, 9, 62, 55, 251, 32, 62, 0, 46, 218, 61, 250, 115, 4, 60, 94, 155, 140, 190, 185, 68, 34, 190, 215, 82, 144, 62, 141, 58, 205, 61, 22, 72, 246, 61, 238, 58, 9, 190, 206, 51, 108, 190, 0, 205, 30, 62, 32, 51, 20, 189, 10, 224, 151, 189, 114, 7, 181, 62, 28, 82, 117, 190, 27, 206, 9, 62, 18, 75, 117, 189, 100, 148, 88, 60, 185, 208, 94, 190, 135, 33, 135, 61, 128, 79, 71, 188, 75, 225, 175, 62, 216, 98, 124, 61, 50, 65, 252, 188, 245, 71, 38, 190, 222, 116, 39, 190, 70, 70, 35, 190, 12, 239, 135, 189, 231, 39, 93, 61, 57, 58, 66, 61, 99, 27, 30, 60, 154, 185, 0, 190, 158, 71, 116, 61, 239, 239, 63, 60, 122, 183, 120, 61, 108, 176, 255, 61, 22, 254, 25, 61, 145, 48, 74, 61, 116, 39, 46, 190, 105, 133, 171, 61, 138, 176, 105, 60, 183, 242, 219, 189, 172, 211, 55, 190, 241, 222, 96, 189, 123, 199, 168, 61, 56, 40, 227, 187, 91, 178, 147, 61, 137, 177, 141, 189, 93, 115, 165, 61, 118, 54, 219, 189, 110, 139, 40, 190, 78, 29, 117, 61, 30, 27, 218, 188, 56, 110, 252, 189, 191, 241, 57, 190, 11, 35, 210, 189, 78, 40, 237, 61, 217, 44, 194, 189, 17, 47, 25, 62, 8, 50, 12, 190, 102, 83, 229, 61, 254, 114, 36, 62, 107, 138, 157, 188, 180, 146, 19, 189, 38, 208, 63, 190, 47, 92, 30, 190, 82, 192, 203, 189, 179, 50, 180, 189, 252, 155, 39, 62, 254, 136, 215, 189, 70, 76, 64, 60, 235, 225, 161, 189, 71, 233, 137, 61, 97, 115, 110, 61, 52, 241, 12, 190, 44, 58, 65, 62, 122, 43, 248, 188, 194, 138, 85, 190, 236, 109, 18, 62, 239, 140, 14, 61, 179, 106, 198, 188, 96, 81, 105, 189, 39, 105, 40, 62, 69, 4, 7, 61, 205, 89, 2, 61, 94, 0, 101, 61, 54, 89, 205, 189, 181, 53, 179, 60, 166, 202, 46, 189, 97, 29, 204, 61, 204, 196, 148, 189, 5, 40, 190, 189, 175, 18, 189, 189, 200, 144, 36, 189, 246, 109, 39, 190, 62, 192, 95, 60, 184, 219, 160, 61, 223, 204, 254, 61, 70, 94, 70, 190, 25, 78, 123, 189, 43, 36, 62, 188, 32, 174, 110, 61, 118, 53, 239, 189, 232, 196, 171, 61, 234, 153, 170, 61, 103, 10, 245, 61, 169, 108, 51, 189, 60, 46, 15, 189, 239, 195, 84, 188, 34, 186, 204, 61, 96, 209, 204, 189, 7, 224, 66, 190, 176, 222, 176, 59, 10, 73, 210, 189, 247, 67, 14, 189, 56, 215, 27, 190, 87, 217, 179, 189, 15, 144, 139, 61, 215, 193, 219, 189, 188, 88, 62, 189, 123, 53, 240, 189, 154, 219, 207, 189, 131, 107, 228, 61, 46, 173, 88, 61, 69, 232, 225, 188, 86, 245, 2, 190, 141, 150, 141, 188, 130, 138, 13, 62, 3, 226, 101, 61, 165, 190, 55, 189, 107, 124, 18, 62, 147, 9, 122, 189, 163, 165, 153, 61, 4, 13, 62, 190, 173, 109, 13, 190, 53, 97, 40, 189, 167, 23, 189, 189, 115, 164, 157, 189, 134, 136, 143, 188, 239, 124, 21, 62, 174, 206, 184, 61, 192, 245, 15, 190, 31, 178, 173, 61, 220, 27, 37, 190, 70, 208, 122, 189, 200, 194, 151, 189, 145, 240, 203, 61, 246, 76, 168, 188, 177, 104, 62, 190, 62, 137, 213, 60, 228, 14, 52, 190, 7, 247, 238, 60, 212, 161, 195, 188, 253, 73, 19, 62, 206, 8, 6, 190, 176, 20, 223, 189, 204, 250, 186, 188, 204, 82, 15, 188, 249, 31, 95, 61, 97, 243, 36, 190, 207, 147, 37, 62, 40, 45, 4, 190, 178, 204, 154, 188, 13, 177, 207, 189, 56, 34, 80, 61, 236, 181, 31, 190, 53, 20, 204, 189, 32, 43, 233, 184, 132, 184, 206, 189, 132, 251, 232, 189, 59, 247, 18, 61, 160, 24, 249, 189, 0, 96, 221, 60, 14, 96, 10, 190, 172, 75, 128, 61, 205, 222, 152, 188, 172, 148, 4, 189, 46, 139, 212, 61, 47, 57, 46, 62, 46, 182, 101, 59, 200, 49, 8, 190, 247, 90, 22, 62, 193, 120, 245, 187, 64, 130, 34, 189, 220, 244, 130, 188, 202, 153, 90, 189, 107, 60, 161, 188, 10, 165, 247, 60, 197, 66, 208, 189, 152, 202, 69, 189, 209, 102, 130, 189, 144, 75, 207, 61, 34, 86, 60, 190, 197, 2, 245, 186, 119, 28, 29, 189, 149, 185, 8, 190, 190, 19, 153, 189, 135, 202, 184, 189, 68, 176, 94, 61, 244, 0, 156, 61, 92, 191, 141, 60, 210, 182, 3, 190, 150, 112, 182, 189, 26, 18, 130, 59, 52, 0, 229, 61, 101, 198, 178, 61, 25, 208, 41, 190, 41, 251, 22, 190, 202, 222, 39, 190, 118, 166, 197, 61, 93, 94, 159, 189, 85, 186, 47, 190, 26, 241, 129, 188, 152, 102, 9, 62, 233, 204, 120, 189, 47, 126, 234, 61, 225, 83, 194, 188, 251, 201, 45, 62, 1, 243, 97, 189, 72, 215, 8, 190, 119, 153, 118, 189, 205, 192, 160, 189, 2, 76, 245, 189, 181, 140, 151, 61, 133, 39, 138, 189, 133, 79, 155, 61, 106, 102, 134, 188, 217, 186, 226, 189, 96, 116, 179, 60, 220, 163, 218, 61, 241, 211, 0, 190, 181, 84, 30, 190, 209, 117, 183, 189, 248, 113, 47, 190, 5, 235, 203, 60, 197, 62, 59, 188, 182, 155, 204, 189, 6, 186, 207, 189, 99, 196, 219, 61, 240, 94, 2, 62, 143, 12, 30, 188, 255, 234, 28, 190, 165, 225, 223, 61, 99, 92, 32, 190, 71, 18, 60, 190, 36, 220, 38, 190, 158, 174, 73, 61, 20, 118, 229, 189, 210, 127, 159, 189, 172, 207, 15, 62, 153, 127, 127, 61, 234, 64, 172, 189, 75, 223, 11, 62, 66, 140, 8, 190, 15, 27, 67, 62, 154, 66, 156, 190, 200, 39, 6, 62, 206, 242, 79, 189, 41, 12, 156, 189, 51, 168, 90, 61, 90, 57, 49, 190, 176, 191, 241, 60, 197, 254, 11, 62, 201, 119, 196, 190, 233, 93, 98, 61, 121, 187, 117, 190, 178, 13, 18, 191, 1, 33, 41, 190, 88, 142, 149, 190, 240, 116, 174, 61, 248, 204, 151, 190, 3, 175, 4, 189, 191, 125, 163, 61, 144, 3, 189, 60, 86, 195, 129, 190, 210, 92, 112, 62, 178, 96, 27, 190, 74, 230, 196, 190, 226, 233, 66, 62, 231, 105, 36, 62, 254, 7, 145, 190, 77, 172, 91, 61, 5, 236, 169, 189, 33, 34, 52, 61, 183, 84, 21, 190, 185, 207, 234, 61, 45, 75, 166, 62, 252, 40, 148, 190, 185, 92, 144, 61, 90, 45, 89, 190, 0, 206, 158, 188, 204, 141, 137, 61, 197, 207, 32, 62, 201, 114, 223, 61, 4, 129, 205, 61, 43, 205, 235, 190, 218, 211, 40, 190, 143, 13, 31, 60, 157, 228, 123, 190, 179, 21, 119, 62, 177, 160, 149, 190, 29, 237, 211, 189, 71, 192, 77, 189, 4, 170, 55, 62, 50, 111, 110, 189, 72, 121, 57, 190, 49, 25, 47, 62, 255, 70, 46, 190, 5, 187, 217, 190, 69, 243, 131, 190, 162, 245, 167, 61, 154, 25, 61, 190, 159, 132, 178, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 0, 145, 62, 96, 63, 223, 189, 70, 120, 101, 62, 77, 128, 47, 190, 13, 129, 126, 62, 140, 190, 57, 62, 159, 215, 61, 62, 215, 98, 130, 188, 29, 174, 144, 62, 173, 193, 197, 61, 55, 22, 215, 188, 207, 140, 41, 62, 235, 125, 219, 189, 41, 34, 35, 190, 94, 229, 109, 189, 166, 89, 182, 61, 165, 215, 181, 189, 161, 108, 2, 189, 113, 181, 137, 62, 43, 26, 151, 61, 2, 44, 59, 61, 58, 10, 143, 190, 102, 61, 214, 61, 73, 60, 137, 59, 130, 56, 98, 190, 247, 178, 239, 189, 229, 61, 56, 184, 111, 250, 52, 190, 188, 15, 144, 188, 41, 173, 0, 189, 47, 250, 102, 62, 1, 226, 165, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 107, 155, 61, 95, 63, 109, 61, 63, 250, 28, 190, 185, 139, 214, 60, 238, 32, 57, 62, 57, 9, 89, 190, 31, 191, 142, 190, 114, 126, 228, 189, 115, 122, 133, 190, 164, 55, 243, 189, 156, 98, 48, 62, 50, 35, 184, 190, 198, 164, 169, 189, 186, 66, 53, 190, 32, 121, 180, 62, 234, 224, 125, 62, 38, 231, 68, 189, 102, 37, 105, 62, 104, 87, 107, 190, 104, 113, 243, 188, 100, 233, 30, 188, 204, 15, 229, 189, 231, 192, 78, 62, 226, 158, 6, 190, 245, 166, 181, 60, 3, 152, 8, 188, 68, 139, 246, 189, 200, 131, 5, 190, 59, 36, 101, 189, 222, 226, 183, 189, 187, 186, 105, 190, 226, 95, 22, 191, 176, 182, 151, 189, 201, 11, 36, 62, 143, 244, 122, 61, 3, 82, 41, 190, 151, 108, 101, 190, 213, 175, 74, 189, 62, 137, 136, 190, 2, 230, 248, 60, 84, 104, 41, 189, 127, 239, 238, 61, 60, 234, 254, 61, 130, 175, 20, 61, 81, 240, 32, 60, 251, 86, 149, 189, 193, 174, 9, 62, 152, 62, 22, 190, 30, 52, 225, 189, 217, 175, 244, 60, 39, 187, 30, 190, 142, 46, 56, 61, 249, 231, 30, 190, 183, 179, 228, 61, 221, 243, 1, 190, 4, 246, 31, 62, 46, 106, 50, 62, 44, 197, 18, 62, 130, 86, 10, 61, 22, 183, 20, 190, 181, 136, 69, 61, 83, 17, 200, 61, 252, 7, 13, 63, 41, 219, 132, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 80, 176, 187, 7, 89, 157, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {235, 75, 10, 62, 213, 158, 180, 191, 71, 156, 153, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {52, 42, 41, 64, 153, 175, 72, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0065/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}