// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {188, 87, 236, 190, 236, 135, 125, 63, 201, 208, 71, 190, 163, 61, 166, 189, 109, 195, 21, 191, 244, 172, 220, 62, 111, 54, 29, 63, 220, 128, 15, 191, 26, 196, 197, 189, 68, 93, 43, 189, 194, 214, 105, 63, 140, 221, 18, 63, 86, 182, 241, 62, 50, 60, 161, 190, 161, 242, 168, 189, 25, 242, 201, 190, 132, 85, 193, 62, 106, 145, 190, 190, 160, 199, 42, 63, 204, 183, 114, 191, 60, 155, 172, 190, 239, 67, 183, 190, 147, 44, 143, 191, 163, 144, 137, 189, 41, 183, 236, 190, 184, 54, 111, 63, 163, 24, 222, 62, 184, 109, 85, 63, 128, 150, 145, 190, 138, 131, 185, 190, 130, 190, 160, 62, 83, 203, 37, 63, 102, 36, 193, 62, 78, 194, 143, 62, 5, 235, 52, 62, 8, 32, 6, 189, 81, 32, 125, 61, 129, 118, 156, 61, 208, 166, 243, 57, 72, 72, 57, 191, 209, 97, 7, 63, 16, 67, 102, 62, 223, 179, 255, 190, 102, 151, 32, 190, 168, 234, 87, 63, 198, 239, 239, 62, 232, 245, 117, 191, 152, 105, 147, 190, 140, 195, 145, 62, 249, 143, 180, 189, 141, 141, 10, 63, 67, 208, 225, 62, 146, 110, 115, 191, 4, 53, 173, 189, 147, 197, 193, 190, 5, 235, 17, 63, 40, 65, 30, 190, 193, 202, 201, 190, 201, 80, 130, 63, 95, 216, 53, 63, 108, 30, 162, 190, 16, 212, 145, 191, 192, 113, 107, 187, 208, 142, 220, 62, 176, 151, 207, 62, 11, 64, 0, 63, 137, 237, 136, 62, 220, 7, 1, 191, 95, 242, 184, 190, 96, 252, 158, 62, 169, 115, 235, 190, 90, 143, 244, 62, 184, 106, 114, 190, 72, 121, 32, 63, 217, 178, 53, 190, 108, 83, 255, 62, 231, 41, 158, 63, 14, 233, 206, 62, 226, 110, 204, 62, 145, 174, 44, 63, 172, 4, 168, 190, 250, 123, 46, 63, 225, 91, 52, 191, 41, 29, 115, 190, 51, 97, 247, 62, 198, 93, 188, 190, 240, 192, 164, 62, 238, 136, 95, 191, 109, 221, 60, 189, 248, 173, 161, 62, 250, 78, 29, 62, 96, 119, 213, 190, 68, 218, 205, 189, 137, 188, 77, 63, 254, 192, 48, 63, 252, 227, 220, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 48, 10, 190, 62, 161, 113, 190, 103, 160, 98, 62, 90, 114, 144, 62, 84, 99, 233, 190, 8, 12, 219, 61, 148, 121, 34, 61, 52, 247, 215, 62, 172, 122, 143, 190, 20, 95, 81, 62, 213, 64, 237, 189, 111, 224, 40, 191, 84, 228, 88, 63, 238, 52, 220, 62, 211, 77, 19, 191, 72, 82, 76, 190, 155, 165, 255, 190, 48, 186, 3, 61, 164, 22, 72, 189, 36, 254, 67, 190, 232, 242, 197, 62, 245, 92, 24, 190, 144, 208, 58, 63, 254, 34, 90, 190, 98, 206, 185, 60, 92, 227, 191, 189, 7, 135, 226, 190, 251, 211, 183, 190, 67, 211, 22, 62, 4, 46, 207, 61, 232, 92, 98, 191, 28, 171, 120, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {210, 178, 35, 62, 79, 249, 208, 189, 219, 122, 60, 188, 20, 184, 101, 62, 251, 20, 193, 190, 141, 4, 108, 188, 35, 146, 16, 62, 169, 177, 216, 61, 34, 16, 75, 62, 163, 79, 64, 62, 26, 73, 132, 188, 202, 99, 9, 62, 41, 26, 137, 61, 204, 247, 38, 62, 141, 35, 22, 62, 147, 138, 53, 62, 221, 36, 166, 61, 124, 85, 224, 59, 211, 228, 243, 189, 160, 176, 179, 61, 60, 255, 130, 188, 85, 222, 36, 189, 59, 138, 75, 60, 14, 63, 53, 190, 250, 143, 214, 189, 141, 214, 131, 190, 130, 11, 224, 189, 180, 4, 193, 60, 240, 132, 176, 62, 7, 96, 163, 189, 128, 71, 167, 190, 115, 107, 219, 60, 35, 82, 27, 62, 4, 176, 10, 187, 61, 236, 81, 60, 197, 66, 223, 60, 2, 148, 26, 190, 135, 235, 253, 60, 139, 112, 11, 190, 235, 113, 218, 190, 88, 90, 2, 60, 176, 152, 148, 189, 218, 69, 186, 60, 64, 55, 187, 61, 52, 218, 60, 61, 39, 32, 208, 189, 193, 175, 61, 60, 236, 26, 248, 61, 3, 62, 204, 61, 147, 216, 40, 191, 164, 235, 116, 189, 177, 75, 213, 61, 227, 3, 248, 190, 123, 202, 150, 61, 239, 223, 67, 190, 130, 176, 13, 189, 215, 190, 93, 62, 169, 237, 176, 62, 184, 86, 137, 188, 211, 54, 185, 61, 171, 133, 114, 190, 42, 197, 43, 190, 206, 59, 178, 61, 110, 237, 146, 62, 34, 91, 106, 190, 58, 182, 110, 62, 1, 64, 25, 62, 26, 108, 213, 61, 120, 244, 177, 61, 144, 78, 118, 62, 148, 88, 168, 190, 78, 214, 237, 189, 87, 101, 175, 189, 142, 223, 28, 190, 146, 213, 1, 62, 55, 228, 39, 188, 187, 147, 96, 62, 22, 206, 176, 188, 63, 134, 112, 190, 33, 210, 130, 190, 172, 57, 129, 62, 126, 9, 175, 190, 77, 111, 134, 189, 11, 215, 49, 190, 120, 96, 110, 190, 217, 226, 153, 62, 202, 50, 136, 62, 168, 217, 150, 62, 132, 8, 165, 190, 2, 160, 131, 62, 71, 109, 27, 62, 74, 114, 242, 190, 41, 141, 101, 190, 158, 77, 163, 190, 123, 63, 98, 190, 98, 94, 195, 186, 94, 128, 238, 189, 70, 118, 72, 186, 147, 176, 254, 189, 215, 171, 174, 61, 72, 7, 17, 62, 250, 186, 226, 189, 76, 107, 161, 61, 101, 81, 146, 189, 129, 10, 199, 189, 185, 226, 180, 188, 215, 251, 244, 61, 9, 67, 41, 62, 99, 59, 232, 189, 104, 24, 45, 190, 123, 72, 1, 62, 128, 15, 189, 189, 185, 168, 16, 190, 245, 160, 38, 62, 132, 233, 31, 62, 133, 24, 3, 190, 54, 133, 34, 61, 32, 179, 129, 61, 18, 205, 38, 190, 26, 4, 32, 190, 100, 23, 38, 190, 22, 136, 51, 190, 210, 57, 29, 190, 210, 15, 202, 60, 140, 221, 36, 190, 200, 0, 23, 62, 4, 243, 136, 60, 14, 137, 214, 189, 203, 126, 108, 61, 235, 62, 88, 190, 199, 31, 13, 62, 84, 190, 237, 60, 56, 7, 8, 191, 234, 251, 15, 190, 174, 169, 133, 188, 125, 198, 203, 189, 169, 243, 24, 62, 28, 221, 122, 62, 223, 138, 23, 190, 250, 97, 61, 61, 98, 88, 173, 62, 111, 1, 4, 62, 214, 154, 11, 62, 88, 123, 61, 189, 113, 53, 159, 188, 9, 15, 103, 62, 108, 121, 52, 189, 202, 149, 8, 62, 113, 194, 64, 62, 82, 235, 46, 189, 169, 55, 84, 62, 195, 250, 133, 190, 56, 156, 13, 190, 124, 27, 158, 190, 177, 17, 67, 190, 19, 199, 7, 62, 237, 12, 140, 62, 247, 114, 30, 62, 85, 36, 59, 190, 37, 37, 5, 189, 35, 42, 136, 190, 240, 242, 146, 61, 22, 67, 135, 189, 122, 6, 122, 61, 91, 21, 217, 61, 24, 253, 9, 62, 76, 190, 4, 190, 131, 181, 232, 60, 89, 124, 191, 190, 237, 165, 44, 188, 56, 199, 84, 62, 105, 149, 139, 58, 203, 67, 135, 62, 142, 229, 55, 190, 182, 151, 157, 190, 130, 158, 151, 190, 16, 171, 51, 189, 88, 2, 139, 190, 135, 112, 83, 61, 106, 178, 144, 189, 165, 12, 40, 189, 130, 187, 20, 61, 98, 239, 79, 60, 163, 73, 53, 61, 176, 64, 205, 190, 163, 160, 142, 62, 29, 63, 107, 61, 37, 156, 208, 190, 85, 68, 16, 190, 48, 128, 143, 61, 150, 229, 3, 62, 139, 78, 135, 62, 126, 78, 244, 189, 4, 10, 113, 188, 35, 96, 165, 61, 201, 97, 60, 190, 255, 20, 175, 190, 255, 23, 172, 62, 50, 252, 44, 190, 97, 39, 220, 61, 125, 82, 22, 191, 158, 27, 168, 189, 150, 64, 40, 62, 111, 215, 73, 189, 16, 110, 166, 62, 229, 19, 36, 190, 85, 107, 202, 190, 129, 13, 121, 189, 182, 32, 152, 189, 103, 185, 218, 187, 113, 125, 203, 61, 163, 193, 205, 190, 185, 17, 254, 188, 36, 62, 48, 62, 229, 178, 236, 61, 141, 95, 184, 61, 77, 122, 65, 190, 148, 122, 184, 62, 219, 207, 30, 189, 112, 49, 34, 191, 162, 61, 91, 62, 100, 255, 64, 190, 79, 157, 43, 190, 30, 178, 205, 62, 216, 13, 39, 62, 230, 59, 43, 62, 144, 109, 46, 190, 9, 197, 157, 60, 172, 189, 98, 190, 16, 75, 26, 189, 197, 4, 78, 190, 104, 254, 245, 190, 37, 108, 102, 189, 88, 39, 51, 62, 51, 253, 107, 62, 77, 128, 34, 190, 140, 199, 135, 62, 43, 40, 198, 58, 238, 7, 111, 61, 79, 97, 234, 190, 31, 134, 211, 61, 242, 42, 37, 62, 113, 195, 218, 188, 80, 21, 139, 61, 60, 154, 185, 190, 90, 15, 71, 62, 17, 65, 195, 60, 107, 65, 158, 61, 26, 3, 157, 60, 84, 171, 152, 61, 35, 230, 136, 61, 239, 138, 34, 191, 99, 231, 60, 62, 148, 153, 199, 60, 7, 238, 103, 61, 11, 175, 33, 61, 242, 50, 70, 190, 135, 128, 26, 62, 6, 59, 135, 189, 207, 93, 220, 189, 81, 13, 177, 61, 203, 69, 230, 62, 151, 139, 189, 190, 165, 228, 81, 190, 211, 188, 192, 190, 15, 61, 143, 189, 112, 121, 191, 62, 101, 78, 10, 61, 77, 73, 246, 61, 161, 232, 73, 189, 64, 166, 66, 190, 40, 136, 142, 190, 28, 89, 229, 61, 35, 122, 51, 190, 207, 89, 83, 62, 130, 65, 81, 190, 28, 66, 158, 190, 68, 196, 85, 62, 60, 50, 128, 62, 250, 203, 69, 62, 75, 48, 30, 190, 235, 195, 196, 62, 127, 161, 221, 188, 179, 113, 33, 191, 149, 104, 207, 189, 36, 140, 180, 190, 211, 127, 231, 190, 127, 150, 83, 62, 214, 184, 212, 61, 100, 203, 44, 190, 28, 26, 199, 61, 37, 253, 18, 190, 113, 215, 21, 62, 58, 35, 152, 61, 204, 150, 121, 61, 149, 190, 28, 190, 189, 188, 215, 61, 23, 184, 61, 190, 166, 47, 47, 188, 115, 120, 15, 62, 5, 135, 213, 61, 155, 247, 156, 189, 9, 24, 43, 190, 72, 147, 116, 61, 90, 36, 232, 61, 154, 224, 151, 189, 197, 235, 197, 189, 210, 20, 22, 190, 147, 227, 241, 189, 92, 111, 250, 188, 203, 78, 37, 190, 149, 224, 12, 187, 193, 252, 50, 190, 218, 69, 168, 189, 41, 128, 21, 189, 1, 126, 4, 62, 224, 227, 177, 187, 22, 104, 133, 189, 10, 45, 155, 189, 206, 206, 38, 190, 167, 198, 91, 190, 84, 80, 130, 62, 59, 18, 3, 62, 25, 142, 179, 190, 31, 118, 215, 190, 93, 154, 188, 189, 167, 240, 157, 62, 175, 111, 33, 190, 205, 61, 7, 62, 241, 94, 111, 62, 251, 150, 121, 190, 183, 216, 141, 184, 60, 115, 134, 190, 110, 217, 218, 189, 66, 89, 204, 186, 247, 36, 51, 62, 151, 87, 187, 61, 86, 203, 33, 62, 158, 90, 69, 190, 35, 22, 138, 61, 145, 88, 87, 190, 27, 90, 137, 190, 201, 8, 131, 189, 101, 40, 197, 62, 137, 27, 203, 189, 62, 213, 172, 190, 197, 57, 185, 62, 42, 218, 209, 62, 124, 14, 184, 59, 125, 120, 153, 189, 159, 17, 220, 188, 244, 183, 93, 60, 121, 66, 147, 190, 180, 162, 218, 62, 220, 227, 15, 61, 62, 124, 17, 191, 54, 172, 250, 62, 93, 116, 178, 62, 8, 206, 67, 190, 143, 132, 137, 62, 175, 171, 90, 191, 36, 103, 92, 189, 33, 196, 140, 189, 138, 178, 2, 189, 252, 214, 252, 60, 179, 160, 153, 61, 148, 108, 244, 190, 130, 203, 91, 61, 29, 115, 220, 189, 94, 101, 75, 187, 29, 196, 28, 62, 49, 37, 186, 191, 132, 52, 16, 63, 133, 136, 60, 190, 83, 209, 5, 62, 243, 84, 159, 189, 213, 196, 170, 190, 86, 138, 19, 61, 157, 116, 149, 61, 109, 127, 184, 61, 237, 213, 39, 191, 152, 210, 78, 62, 94, 93, 144, 62, 206, 17, 228, 190, 180, 144, 56, 188, 9, 10, 177, 188, 196, 252, 9, 190, 12, 56, 245, 189, 243, 116, 149, 190, 33, 243, 12, 191, 169, 128, 122, 188, 44, 57, 194, 62, 142, 75, 42, 190, 57, 243, 48, 189, 218, 179, 26, 190, 51, 209, 77, 61, 41, 31, 183, 189, 144, 241, 7, 62, 144, 157, 36, 61, 181, 114, 188, 61, 241, 194, 59, 189, 242, 42, 158, 62, 47, 127, 246, 189, 165, 46, 17, 62, 174, 99, 159, 62, 229, 218, 207, 190, 197, 39, 230, 189, 67, 118, 28, 190, 47, 160, 130, 190, 212, 239, 193, 190, 92, 170, 211, 190, 176, 235, 239, 59, 105, 24, 247, 61, 28, 144, 164, 62, 166, 208, 149, 61, 81, 130, 211, 190, 15, 51, 165, 61, 59, 100, 132, 61, 119, 3, 181, 61, 124, 177, 3, 62, 119, 207, 35, 190, 244, 133, 134, 190, 108, 62, 240, 61, 147, 86, 188, 190, 134, 240, 182, 61, 26, 115, 109, 62, 105, 188, 24, 189, 244, 113, 4, 190, 240, 73, 7, 189, 188, 243, 8, 62, 26, 3, 226, 189, 24, 46, 161, 190, 226, 176, 166, 189, 226, 99, 195, 188, 38, 25, 219, 189, 55, 188, 94, 189, 214, 2, 160, 190, 224, 187, 156, 189, 200, 18, 180, 61, 232, 135, 150, 61, 248, 131, 198, 189, 129, 87, 171, 61, 218, 203, 30, 189, 129, 145, 10, 190, 181, 108, 142, 61, 141, 6, 25, 190, 10, 167, 1, 61, 48, 21, 157, 62, 56, 250, 126, 62, 30, 101, 101, 190, 66, 156, 50, 62, 115, 3, 27, 62, 241, 134, 10, 191, 102, 167, 20, 190, 21, 153, 100, 62, 231, 64, 85, 62, 47, 218, 206, 62, 123, 4, 73, 62, 14, 165, 139, 190, 20, 9, 17, 190, 109, 42, 147, 61, 174, 112, 124, 61, 213, 48, 184, 61, 123, 38, 139, 61, 251, 142, 12, 190, 193, 51, 53, 62, 126, 226, 112, 190, 70, 32, 132, 188, 144, 109, 85, 62, 127, 122, 26, 190, 58, 140, 143, 190, 224, 211, 25, 189, 198, 243, 97, 62, 149, 73, 240, 190, 74, 182, 150, 189, 84, 112, 200, 62, 58, 94, 197, 62, 74, 6, 216, 62, 207, 85, 167, 189, 93, 49, 128, 190, 250, 146, 209, 61, 166, 24, 148, 190, 242, 123, 124, 62, 205, 216, 135, 59, 137, 190, 24, 191, 72, 90, 96, 61, 241, 91, 130, 61, 217, 24, 218, 187, 148, 122, 17, 62, 93, 63, 17, 62, 192, 71, 8, 191, 181, 157, 169, 61, 208, 178, 31, 62, 6, 106, 223, 61, 130, 126, 47, 62, 200, 91, 51, 62, 191, 63, 186, 189, 55, 5, 53, 61, 162, 162, 34, 62, 48, 219, 200, 60, 118, 205, 75, 62, 248, 36, 220, 189, 109, 219, 217, 61, 95, 5, 111, 189, 197, 125, 157, 61, 123, 128, 186, 190, 250, 24, 39, 190, 82, 205, 73, 61, 151, 182, 195, 62, 82, 240, 192, 62, 140, 73, 111, 190, 143, 146, 149, 189, 109, 99, 246, 187, 242, 69, 59, 190, 188, 56, 138, 60, 248, 7, 31, 190, 56, 220, 215, 59, 244, 54, 96, 61, 63, 210, 17, 190, 245, 114, 176, 58, 88, 203, 193, 60, 220, 97, 155, 189, 18, 27, 212, 61, 61, 202, 52, 189, 122, 124, 134, 189, 246, 252, 173, 61, 80, 170, 149, 60, 106, 81, 21, 190, 5, 254, 47, 61, 5, 250, 14, 190, 189, 204, 133, 61, 75, 40, 243, 59, 19, 157, 159, 189, 221, 231, 36, 190, 27, 209, 15, 190, 22, 40, 7, 62, 184, 229, 22, 190, 170, 225, 114, 189, 128, 38, 3, 189, 115, 224, 15, 189, 70, 241, 249, 61, 0, 100, 210, 60, 78, 171, 150, 61, 110, 101, 177, 61, 83, 106, 52, 63, 189, 97, 132, 189, 85, 24, 97, 62, 115, 19, 90, 62, 24, 44, 215, 190, 186, 240, 180, 190, 25, 89, 244, 61, 17, 220, 179, 62, 131, 29, 28, 62, 82, 6, 149, 187, 81, 141, 154, 190, 91, 252, 21, 190, 56, 18, 199, 61, 232, 245, 110, 62, 223, 42, 67, 62, 211, 44, 201, 61, 138, 155, 6, 61, 205, 113, 57, 189, 255, 72, 65, 61, 69, 231, 183, 189, 28, 155, 166, 62, 248, 125, 66, 190, 185, 181, 96, 190, 170, 98, 54, 190, 24, 47, 151, 62, 22, 113, 228, 190, 150, 154, 24, 191, 159, 231, 12, 62, 37, 169, 235, 59, 202, 246, 229, 61, 145, 234, 76, 190, 63, 104, 248, 188, 85, 206, 148, 190, 74, 196, 100, 61, 115, 183, 164, 189, 159, 153, 11, 61, 17, 220, 14, 190, 88, 147, 140, 62, 151, 254, 161, 188, 249, 193, 203, 190, 203, 159, 184, 190, 136, 25, 24, 62, 157, 235, 152, 61, 215, 129, 164, 188, 90, 228, 66, 189, 45, 213, 27, 188, 142, 69, 116, 190, 90, 30, 143, 190, 144, 25, 165, 189, 98, 189, 142, 60, 215, 157, 215, 61, 110, 18, 136, 188, 46, 9, 209, 190, 82, 46, 8, 62, 69, 27, 93, 61, 212, 70, 164, 189, 183, 210, 102, 190, 138, 209, 55, 62, 68, 156, 205, 60, 159, 116, 2, 191, 193, 167, 55, 61, 65, 238, 188, 190, 177, 142, 108, 190, 50, 89, 230, 61, 164, 85, 18, 189, 47, 48, 27, 190, 26, 120, 98, 189, 80, 182, 232, 189, 28, 132, 192, 61, 227, 82, 39, 190, 164, 93, 189, 188, 68, 172, 117, 59, 5, 88, 4, 190, 87, 62, 34, 61, 203, 153, 148, 188, 126, 85, 62, 190, 12, 75, 239, 189, 168, 70, 139, 61, 232, 38, 51, 61, 27, 141, 174, 61, 224, 1, 69, 190, 40, 63, 208, 189, 14, 14, 111, 188, 3, 209, 160, 189, 193, 158, 66, 190, 132, 246, 82, 189, 2, 58, 12, 190, 211, 213, 40, 190, 222, 117, 84, 61, 251, 58, 87, 189, 131, 216, 184, 61, 29, 203, 167, 61, 100, 231, 155, 61, 242, 98, 15, 190, 23, 214, 150, 189, 50, 51, 229, 61, 89, 121, 48, 61, 121, 226, 93, 190, 218, 230, 177, 62, 187, 80, 234, 60, 25, 9, 255, 190, 136, 170, 250, 61, 248, 190, 165, 61, 101, 69, 120, 189, 64, 170, 235, 189, 94, 254, 123, 62, 102, 104, 48, 190, 33, 65, 66, 190, 147, 57, 58, 62, 73, 3, 120, 61, 81, 179, 54, 190, 18, 56, 87, 189, 158, 87, 15, 189, 128, 242, 181, 61, 248, 177, 154, 189, 64, 97, 43, 61, 178, 30, 128, 190, 95, 140, 5, 61, 158, 131, 121, 61, 31, 184, 41, 190, 201, 140, 127, 190, 42, 12, 139, 188, 253, 251, 228, 189, 76, 4, 94, 190, 150, 87, 21, 61, 147, 160, 67, 190, 25, 35, 149, 60, 75, 178, 164, 62, 211, 76, 192, 61, 203, 139, 242, 61, 148, 104, 187, 189, 74, 32, 95, 57, 39, 239, 239, 62, 78, 117, 46, 190, 200, 0, 21, 189, 5, 156, 130, 62, 120, 115, 132, 62, 106, 214, 165, 61, 20, 138, 55, 189, 211, 114, 192, 189, 159, 214, 55, 188, 151, 35, 119, 189, 84, 76, 94, 62, 240, 83, 143, 62, 150, 88, 46, 190, 104, 226, 191, 61, 200, 217, 244, 190, 32, 148, 164, 189, 3, 137, 21, 62, 14, 177, 7, 190, 216, 178, 244, 61, 0, 191, 67, 60, 214, 240, 185, 61, 244, 121, 116, 190, 197, 122, 180, 60, 186, 75, 164, 62, 191, 253, 14, 62, 226, 116, 94, 62, 16, 135, 132, 62, 252, 148, 211, 190, 101, 182, 63, 62, 212, 38, 53, 188, 236, 233, 174, 62, 96, 21, 81, 62, 118, 27, 206, 190, 128, 141, 18, 62, 94, 98, 32, 62, 239, 95, 229, 61, 93, 251, 102, 62, 48, 129, 189, 60, 184, 120, 194, 190, 43, 19, 31, 190, 182, 2, 216, 62, 67, 130, 126, 62, 69, 76, 7, 62, 71, 24, 226, 189, 114, 43, 157, 190, 73, 159, 26, 62, 228, 234, 255, 61, 120, 52, 217, 187, 137, 95, 172, 62, 47, 62, 168, 190, 176, 40, 200, 61, 26, 137, 21, 190, 52, 35, 18, 188, 184, 23, 191, 190, 251, 143, 28, 189, 13, 77, 159, 61, 119, 221, 170, 62, 68, 240, 219, 61, 9, 62, 210, 189, 243, 14, 55, 190, 160, 163, 40, 190, 254, 183, 42, 190, 86, 184, 138, 189, 247, 57, 25, 61, 57, 58, 66, 61, 3, 144, 251, 59, 130, 171, 0, 190, 158, 71, 116, 61, 52, 225, 142, 188, 242, 129, 109, 61, 137, 204, 211, 61, 22, 254, 25, 61, 167, 255, 15, 61, 11, 102, 59, 190, 174, 234, 148, 61, 138, 176, 105, 60, 117, 187, 238, 189, 126, 151, 55, 190, 179, 191, 137, 189, 65, 107, 118, 61, 55, 210, 230, 187, 135, 180, 101, 61, 73, 104, 147, 189, 249, 214, 149, 61, 100, 55, 219, 189, 85, 19, 62, 190, 78, 29, 117, 61, 30, 27, 218, 188, 20, 93, 8, 190, 196, 147, 71, 190, 11, 35, 210, 189, 207, 160, 204, 61, 18, 147, 238, 189, 253, 111, 54, 62, 226, 150, 45, 189, 182, 71, 249, 61, 155, 194, 226, 61, 229, 226, 153, 61, 204, 250, 177, 189, 156, 90, 217, 190, 89, 77, 139, 190, 223, 124, 61, 189, 68, 209, 0, 61, 200, 153, 39, 62, 224, 171, 134, 189, 198, 124, 139, 189, 179, 108, 15, 190, 164, 187, 151, 189, 181, 48, 171, 61, 23, 223, 253, 190, 51, 8, 49, 62, 56, 52, 238, 189, 210, 187, 5, 191, 131, 191, 82, 62, 57, 238, 244, 61, 80, 163, 32, 61, 139, 93, 215, 189, 12, 177, 154, 62, 44, 14, 225, 59, 252, 75, 120, 188, 212, 244, 203, 61, 125, 7, 117, 190, 53, 56, 19, 187, 105, 117, 225, 61, 97, 29, 204, 61, 142, 218, 167, 189, 246, 90, 243, 189, 124, 36, 205, 189, 139, 33, 46, 189, 205, 143, 38, 190, 244, 176, 28, 60, 111, 119, 162, 61, 249, 129, 247, 61, 36, 1, 66, 190, 102, 4, 175, 189, 43, 36, 62, 188, 193, 53, 48, 61, 179, 219, 252, 189, 78, 160, 172, 61, 215, 133, 171, 61, 97, 25, 223, 61, 200, 91, 69, 189, 130, 161, 14, 189, 62, 56, 35, 188, 251, 121, 208, 61, 151, 161, 233, 189, 29, 21, 55, 190, 86, 9, 45, 187, 10, 73, 210, 189, 146, 251, 111, 189, 56, 215, 27, 190, 255, 105, 175, 189, 230, 155, 137, 61, 121, 47, 216, 189, 188, 88, 62, 189, 108, 175, 19, 190, 154, 219, 207, 189, 131, 107, 228, 61, 46, 173, 88, 61, 69, 232, 225, 188, 86, 245, 2, 190, 141, 150, 141, 188, 130, 138, 13, 62, 3, 226, 101, 61, 165, 190, 55, 189, 107, 124, 18, 62, 147, 9, 122, 189, 163, 165, 153, 61, 4, 13, 62, 190, 173, 109, 13, 190, 53, 97, 40, 189, 167, 23, 189, 189, 115, 164, 157, 189, 134, 136, 143, 188, 239, 124, 21, 62, 174, 206, 184, 61, 192, 245, 15, 190, 31, 178, 173, 61, 220, 27, 37, 190, 70, 208, 122, 189, 200, 194, 151, 189, 145, 240, 203, 61, 246, 76, 168, 188, 177, 104, 62, 190, 62, 137, 213, 60, 228, 14, 52, 190, 7, 247, 238, 60, 212, 161, 195, 188, 253, 73, 19, 62, 206, 8, 6, 190, 176, 20, 223, 189, 204, 250, 186, 188, 204, 82, 15, 188, 249, 31, 95, 61, 97, 243, 36, 190, 207, 147, 37, 62, 40, 45, 4, 190, 178, 204, 154, 188, 13, 177, 207, 189, 56, 34, 80, 61, 236, 181, 31, 190, 53, 20, 204, 189, 32, 43, 233, 184, 132, 184, 206, 189, 132, 251, 232, 189, 59, 247, 18, 61, 160, 24, 249, 189, 0, 96, 221, 60, 14, 96, 10, 190, 172, 75, 128, 61, 205, 222, 152, 188, 172, 148, 4, 189, 46, 139, 212, 61, 47, 57, 46, 62, 46, 182, 101, 59, 200, 49, 8, 190, 247, 90, 22, 62, 193, 120, 245, 187, 64, 130, 34, 189, 220, 244, 130, 188, 202, 153, 90, 189, 107, 60, 161, 188, 10, 165, 247, 60, 57, 67, 208, 189, 152, 202, 69, 189, 230, 102, 130, 189, 144, 75, 207, 61, 51, 86, 60, 190, 154, 15, 245, 186, 119, 28, 29, 189, 149, 185, 8, 190, 190, 19, 153, 189, 182, 202, 184, 189, 78, 175, 94, 61, 138, 0, 156, 61, 92, 191, 141, 60, 217, 182, 3, 190, 155, 112, 182, 189, 117, 16, 130, 59, 15, 0, 229, 61, 50, 198, 178, 61, 25, 208, 41, 190, 41, 251, 22, 190, 202, 222, 39, 190, 118, 166, 197, 61, 93, 94, 159, 189, 85, 186, 47, 190, 26, 241, 129, 188, 138, 102, 9, 62, 137, 205, 120, 189, 47, 126, 234, 61, 10, 84, 194, 188, 251, 201, 45, 62, 1, 243, 97, 189, 72, 215, 8, 190, 119, 153, 118, 189, 205, 192, 160, 189, 2, 76, 245, 189, 181, 140, 151, 61, 133, 39, 138, 189, 133, 79, 155, 61, 106, 102, 134, 188, 217, 186, 226, 189, 96, 116, 179, 60, 220, 163, 218, 61, 241, 211, 0, 190, 181, 84, 30, 190, 209, 117, 183, 189, 248, 113, 47, 190, 5, 235, 203, 60, 197, 62, 59, 188, 182, 155, 204, 189, 6, 186, 207, 189, 99, 196, 219, 61, 240, 94, 2, 62, 143, 12, 30, 188, 255, 234, 28, 190, 165, 225, 223, 61, 99, 92, 32, 190, 71, 18, 60, 190, 36, 220, 38, 190, 158, 174, 73, 61, 20, 118, 229, 189, 210, 127, 159, 189, 187, 137, 142, 61, 139, 95, 167, 62, 2, 148, 39, 188, 207, 203, 75, 190, 117, 255, 192, 61, 154, 90, 56, 62, 10, 129, 129, 190, 205, 183, 195, 62, 237, 229, 35, 191, 50, 127, 237, 188, 238, 110, 179, 61, 231, 67, 53, 190, 7, 205, 129, 61, 205, 3, 66, 189, 125, 57, 175, 190, 109, 44, 172, 61, 94, 36, 40, 190, 186, 60, 228, 190, 119, 167, 104, 190, 18, 229, 158, 191, 68, 209, 170, 62, 123, 209, 247, 190, 46, 1, 182, 61, 152, 237, 136, 62, 236, 155, 56, 189, 230, 142, 38, 189, 93, 190, 147, 62, 134, 118, 36, 190, 16, 131, 165, 190, 29, 206, 110, 62, 107, 15, 252, 60, 174, 97, 156, 190, 200, 237, 215, 188, 157, 253, 146, 62, 75, 37, 232, 59, 227, 104, 183, 190, 34, 214, 3, 190, 1, 195, 181, 62, 16, 137, 185, 190, 148, 57, 202, 62, 160, 225, 98, 191, 198, 114, 86, 189, 13, 205, 129, 62, 124, 194, 25, 62, 229, 233, 15, 62, 117, 11, 152, 189, 167, 150, 218, 190, 168, 191, 155, 190, 174, 110, 197, 187, 115, 2, 206, 190, 107, 157, 49, 62, 226, 86, 158, 191, 233, 3, 69, 62, 34, 100, 105, 61, 5, 124, 140, 62, 87, 233, 129, 61, 132, 44, 128, 190, 35, 190, 179, 62, 223, 144, 82, 190, 254, 248, 42, 191, 165, 16, 203, 190, 72, 205, 10, 62, 252, 193, 254, 190, 161, 214, 148, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 174, 196, 62, 15, 232, 204, 189, 119, 168, 76, 62, 77, 128, 47, 190, 40, 232, 181, 62, 186, 221, 128, 62, 161, 55, 142, 62, 232, 164, 136, 61, 34, 203, 118, 62, 112, 48, 195, 61, 174, 6, 245, 189, 73, 7, 112, 62, 221, 63, 171, 188, 188, 10, 191, 189, 172, 9, 86, 189, 67, 158, 65, 62, 171, 157, 188, 189, 250, 59, 134, 60, 147, 159, 129, 62, 239, 216, 126, 61, 101, 224, 217, 61, 220, 45, 140, 190, 51, 46, 102, 62, 114, 64, 27, 188, 28, 106, 105, 190, 30, 43, 0, 190, 229, 61, 56, 184, 111, 250, 52, 190, 29, 17, 144, 188, 41, 173, 0, 189, 254, 48, 139, 62, 67, 196, 198, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 62, 243, 61, 182, 244, 194, 62, 150, 21, 173, 190, 185, 139, 214, 60, 216, 99, 121, 62, 33, 148, 222, 190, 43, 227, 11, 191, 227, 199, 40, 190, 237, 106, 251, 190, 113, 57, 242, 189, 219, 22, 5, 63, 106, 106, 78, 191, 12, 31, 231, 190, 119, 182, 57, 190, 19, 193, 238, 62, 61, 49, 174, 62, 251, 157, 68, 189, 145, 238, 195, 62, 117, 79, 149, 190, 89, 125, 120, 188, 47, 113, 39, 61, 145, 145, 199, 190, 196, 116, 171, 62, 115, 105, 230, 189, 26, 182, 82, 62, 8, 213, 0, 188, 68, 139, 246, 189, 200, 131, 5, 190, 36, 36, 101, 189, 222, 226, 183, 189, 253, 6, 44, 191, 112, 222, 133, 191, 182, 2, 226, 189, 247, 83, 77, 62, 251, 45, 28, 62, 3, 82, 41, 190, 76, 11, 150, 190, 217, 186, 109, 189, 85, 105, 193, 190, 217, 241, 118, 188, 128, 190, 74, 61, 249, 73, 239, 61, 110, 49, 171, 62, 154, 67, 161, 189, 90, 65, 55, 189, 131, 82, 116, 190, 70, 151, 94, 62, 97, 114, 23, 190, 67, 28, 225, 189, 245, 64, 10, 62, 124, 228, 87, 190, 15, 84, 39, 61, 11, 240, 157, 190, 207, 71, 252, 61, 227, 148, 216, 189, 90, 180, 38, 62, 166, 189, 150, 62, 224, 13, 229, 61, 130, 86, 10, 61, 22, 183, 20, 190, 173, 136, 69, 61, 83, 17, 200, 61, 211, 223, 210, 62, 138, 188, 202, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {133, 37, 153, 61, 169, 144, 53, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {10, 40, 149, 190, 251, 149, 72, 191, 207, 65, 25, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {103, 37, 60, 191, 163, 240, 51, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0065/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}