// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 232, 49, 191, 191, 116, 68, 63, 137, 243, 28, 190, 28, 0, 2, 62, 204, 143, 31, 191, 75, 17, 208, 62, 191, 210, 5, 63, 5, 227, 67, 191, 96, 187, 235, 189, 158, 36, 80, 189, 36, 162, 176, 63, 236, 65, 202, 62, 11, 93, 0, 63, 166, 18, 100, 190, 88, 77, 85, 189, 54, 88, 206, 190, 26, 123, 150, 62, 142, 36, 186, 190, 99, 228, 29, 63, 62, 173, 166, 191, 33, 20, 27, 190, 96, 128, 199, 190, 118, 237, 159, 191, 31, 144, 91, 190, 43, 156, 13, 191, 224, 78, 133, 63, 3, 154, 215, 62, 15, 26, 60, 63, 103, 89, 136, 190, 55, 118, 186, 190, 103, 190, 172, 62, 167, 127, 109, 63, 217, 126, 160, 62, 78, 194, 143, 62, 5, 235, 52, 62, 8, 32, 6, 189, 147, 134, 159, 190, 101, 83, 80, 62, 230, 33, 197, 60, 39, 250, 128, 191, 112, 50, 107, 62, 6, 139, 148, 62, 149, 145, 118, 191, 151, 40, 212, 189, 115, 184, 81, 63, 89, 68, 237, 62, 142, 151, 141, 191, 230, 35, 168, 190, 81, 139, 30, 63, 173, 107, 56, 190, 35, 98, 254, 62, 15, 175, 240, 62, 246, 5, 126, 191, 201, 164, 224, 189, 221, 93, 22, 191, 137, 152, 37, 63, 176, 70, 57, 189, 0, 85, 37, 191, 11, 249, 136, 63, 240, 88, 20, 63, 24, 85, 175, 190, 155, 107, 145, 191, 108, 248, 10, 190, 214, 202, 224, 62, 120, 245, 201, 62, 115, 236, 244, 62, 67, 108, 193, 59, 173, 242, 183, 190, 207, 79, 168, 190, 239, 100, 235, 62, 210, 100, 45, 191, 223, 21, 33, 63, 130, 12, 225, 189, 130, 246, 43, 63, 237, 239, 56, 190, 248, 208, 4, 63, 179, 193, 208, 63, 64, 205, 175, 62, 37, 137, 5, 63, 66, 69, 83, 63, 139, 117, 171, 190, 99, 83, 63, 63, 18, 95, 37, 191, 24, 230, 145, 190, 129, 54, 143, 62, 210, 78, 184, 190, 67, 150, 13, 63, 75, 219, 98, 191, 137, 237, 244, 189, 140, 57, 167, 62, 63, 63, 202, 62, 245, 130, 167, 190, 180, 96, 100, 189, 94, 217, 71, 63, 9, 79, 140, 63, 61, 103, 143, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 58, 198, 190, 74, 192, 45, 191, 65, 34, 46, 62, 62, 219, 102, 62, 203, 165, 22, 191, 48, 112, 63, 62, 171, 129, 17, 61, 57, 0, 185, 62, 120, 171, 115, 190, 169, 168, 138, 187, 5, 228, 94, 190, 111, 224, 40, 191, 182, 147, 49, 63, 68, 113, 30, 63, 80, 104, 31, 189, 53, 51, 110, 190, 232, 103, 132, 191, 205, 127, 221, 60, 173, 108, 102, 62, 239, 45, 3, 189, 194, 229, 234, 62, 214, 5, 161, 190, 38, 75, 30, 63, 237, 96, 137, 190, 139, 100, 237, 189, 227, 131, 107, 60, 211, 114, 251, 190, 129, 56, 215, 190, 203, 0, 47, 62, 59, 120, 32, 60, 156, 49, 107, 191, 178, 81, 97, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 94, 10, 62, 28, 99, 29, 189, 24, 181, 101, 189, 118, 184, 121, 61, 245, 31, 7, 191, 230, 19, 154, 188, 100, 205, 184, 61, 103, 233, 42, 62, 54, 62, 126, 188, 225, 249, 27, 62, 53, 80, 19, 190, 202, 99, 9, 62, 148, 55, 139, 188, 155, 83, 119, 61, 105, 155, 211, 61, 107, 49, 18, 62, 131, 238, 193, 61, 13, 30, 162, 60, 119, 217, 169, 190, 47, 112, 166, 188, 174, 19, 247, 187, 26, 86, 199, 189, 146, 173, 234, 188, 231, 149, 54, 190, 74, 32, 31, 190, 154, 24, 223, 190, 66, 206, 48, 62, 233, 174, 77, 61, 143, 241, 123, 62, 151, 162, 45, 190, 103, 162, 134, 190, 184, 178, 24, 189, 162, 224, 130, 61, 55, 12, 1, 189, 176, 189, 151, 61, 178, 122, 109, 61, 242, 193, 28, 190, 150, 194, 219, 189, 79, 87, 197, 190, 138, 226, 57, 191, 154, 195, 27, 61, 42, 251, 34, 61, 225, 142, 231, 61, 64, 55, 187, 61, 83, 244, 5, 61, 36, 222, 179, 189, 200, 160, 237, 59, 200, 56, 31, 189, 189, 67, 253, 61, 172, 36, 4, 191, 129, 97, 86, 190, 212, 236, 14, 62, 162, 231, 80, 191, 112, 6, 151, 61, 143, 159, 169, 190, 127, 201, 174, 189, 87, 1, 140, 62, 159, 106, 236, 62, 224, 223, 219, 60, 64, 156, 18, 62, 156, 44, 184, 190, 169, 169, 52, 190, 206, 59, 178, 61, 103, 29, 192, 62, 226, 10, 102, 190, 241, 247, 165, 62, 14, 81, 139, 188, 153, 212, 73, 61, 28, 244, 10, 60, 91, 166, 118, 62, 144, 156, 46, 191, 217, 15, 232, 190, 25, 29, 5, 190, 62, 164, 107, 190, 118, 173, 72, 61, 55, 228, 39, 188, 145, 84, 60, 62, 63, 58, 207, 189, 233, 70, 86, 190, 240, 180, 66, 191, 114, 175, 198, 62, 118, 26, 38, 191, 164, 74, 239, 188, 147, 139, 88, 190, 19, 240, 144, 190, 161, 14, 174, 62, 11, 130, 103, 62, 136, 87, 198, 62, 91, 108, 152, 190, 228, 207, 149, 62, 202, 170, 247, 61, 177, 25, 68, 191, 125, 217, 44, 190, 56, 99, 157, 190, 123, 63, 98, 190, 45, 14, 181, 61, 94, 128, 238, 189, 70, 118, 72, 186, 147, 176, 254, 189, 215, 171, 174, 61, 72, 7, 17, 62, 250, 186, 226, 189, 76, 107, 161, 61, 101, 81, 146, 189, 129, 10, 199, 189, 185, 226, 180, 188, 215, 251, 244, 61, 9, 67, 41, 62, 99, 59, 232, 189, 104, 24, 45, 190, 123, 72, 1, 62, 128, 15, 189, 189, 185, 168, 16, 190, 245, 160, 38, 62, 132, 233, 31, 62, 133, 24, 3, 190, 54, 133, 34, 61, 32, 179, 129, 61, 18, 205, 38, 190, 26, 4, 32, 190, 100, 23, 38, 190, 22, 136, 51, 190, 210, 57, 29, 190, 210, 15, 202, 60, 140, 221, 36, 190, 200, 0, 23, 62, 4, 243, 136, 60, 14, 137, 214, 189, 72, 252, 30, 61, 44, 129, 44, 190, 37, 120, 15, 62, 185, 119, 242, 60, 201, 138, 41, 191, 87, 56, 239, 189, 189, 227, 213, 188, 78, 199, 127, 59, 126, 47, 163, 61, 126, 91, 135, 62, 203, 134, 238, 189, 250, 97, 61, 61, 143, 214, 180, 62, 1, 2, 19, 62, 230, 118, 4, 62, 39, 38, 162, 189, 23, 82, 32, 189, 24, 75, 130, 62, 86, 131, 25, 190, 57, 216, 15, 62, 145, 207, 64, 62, 52, 4, 77, 189, 175, 0, 98, 62, 225, 40, 146, 190, 131, 31, 37, 190, 47, 248, 177, 190, 68, 80, 246, 61, 87, 13, 54, 62, 236, 218, 110, 62, 30, 218, 246, 61, 212, 218, 230, 189, 70, 152, 179, 59, 211, 193, 141, 189, 90, 181, 93, 190, 33, 227, 60, 189, 105, 99, 146, 61, 72, 189, 205, 188, 120, 91, 105, 62, 187, 65, 20, 190, 172, 169, 75, 190, 118, 205, 245, 190, 127, 119, 156, 188, 113, 245, 196, 61, 105, 149, 139, 58, 13, 9, 153, 62, 91, 5, 8, 190, 77, 224, 54, 191, 148, 0, 214, 190, 106, 250, 9, 190, 31, 84, 122, 190, 91, 12, 140, 62, 217, 43, 134, 190, 140, 187, 235, 61, 129, 41, 2, 61, 98, 80, 133, 188, 20, 230, 129, 62, 161, 145, 130, 190, 68, 119, 162, 62, 70, 101, 62, 188, 128, 36, 244, 190, 104, 182, 234, 189, 13, 34, 95, 190, 150, 229, 3, 62, 192, 123, 144, 62, 41, 234, 206, 189, 90, 149, 239, 189, 5, 181, 177, 61, 61, 255, 69, 189, 28, 243, 77, 191, 173, 45, 195, 62, 236, 14, 27, 190, 25, 152, 253, 60, 99, 50, 134, 190, 167, 4, 238, 189, 14, 117, 27, 62, 111, 215, 73, 189, 2, 26, 161, 62, 7, 105, 204, 189, 178, 253, 185, 190, 112, 159, 243, 188, 244, 140, 66, 190, 109, 34, 250, 60, 136, 116, 65, 62, 207, 206, 127, 190, 11, 214, 5, 61, 247, 132, 76, 62, 55, 177, 146, 61, 232, 130, 20, 62, 31, 254, 51, 190, 182, 200, 226, 62, 248, 157, 149, 190, 187, 130, 50, 191, 56, 216, 103, 62, 179, 197, 159, 189, 224, 185, 49, 190, 172, 218, 205, 62, 226, 248, 80, 62, 230, 158, 50, 62, 218, 234, 92, 190, 209, 157, 32, 189, 133, 213, 83, 190, 162, 179, 122, 188, 23, 21, 136, 190, 81, 65, 32, 191, 114, 235, 19, 190, 52, 136, 244, 61, 24, 128, 215, 61, 77, 128, 34, 190, 80, 9, 129, 62, 184, 157, 166, 189, 72, 241, 26, 59, 252, 225, 37, 191, 151, 234, 36, 62, 108, 233, 13, 62, 199, 113, 102, 61, 25, 59, 254, 188, 69, 69, 130, 190, 23, 23, 59, 62, 60, 11, 11, 189, 215, 208, 25, 62, 236, 209, 123, 61, 167, 215, 70, 61, 17, 24, 24, 190, 204, 16, 66, 191, 50, 73, 119, 62, 230, 14, 224, 188, 7, 238, 103, 61, 79, 194, 57, 61, 160, 236, 19, 190, 218, 211, 153, 62, 189, 196, 172, 190, 120, 158, 40, 190, 25, 110, 198, 61, 47, 19, 4, 63, 115, 247, 83, 191, 215, 133, 152, 190, 242, 46, 199, 190, 141, 131, 17, 190, 104, 153, 146, 62, 101, 78, 10, 61, 64, 219, 140, 61, 4, 18, 203, 189, 104, 167, 217, 189, 6, 25, 4, 191, 171, 200, 144, 62, 111, 69, 10, 191, 86, 228, 135, 62, 209, 236, 76, 190, 95, 82, 89, 190, 202, 127, 127, 62, 146, 239, 113, 62, 228, 213, 168, 62, 182, 15, 166, 189, 189, 82, 181, 62, 229, 73, 125, 189, 185, 75, 105, 191, 254, 234, 82, 189, 176, 48, 135, 190, 211, 127, 231, 190, 66, 160, 100, 62, 214, 184, 212, 61, 100, 203, 44, 190, 28, 26, 199, 61, 37, 253, 18, 190, 113, 215, 21, 62, 58, 35, 152, 61, 204, 150, 121, 61, 149, 190, 28, 190, 189, 188, 215, 61, 23, 184, 61, 190, 166, 47, 47, 188, 115, 120, 15, 62, 5, 135, 213, 61, 155, 247, 156, 189, 9, 24, 43, 190, 72, 147, 116, 61, 90, 36, 232, 61, 154, 224, 151, 189, 197, 235, 197, 189, 210, 20, 22, 190, 147, 227, 241, 189, 92, 111, 250, 188, 203, 78, 37, 190, 149, 224, 12, 187, 193, 252, 50, 190, 218, 69, 168, 189, 41, 128, 21, 189, 1, 126, 4, 62, 224, 227, 177, 187, 22, 104, 133, 189, 10, 45, 155, 189, 206, 206, 38, 190, 73, 10, 167, 189, 217, 62, 173, 62, 81, 160, 20, 62, 57, 47, 49, 191, 34, 193, 217, 190, 185, 45, 174, 188, 29, 117, 171, 62, 47, 105, 106, 190, 19, 206, 65, 191, 77, 224, 89, 62, 184, 155, 30, 191, 183, 216, 141, 184, 197, 76, 166, 190, 83, 74, 148, 190, 34, 48, 16, 190, 16, 124, 88, 62, 151, 111, 206, 61, 171, 229, 88, 62, 0, 63, 255, 189, 228, 127, 51, 190, 169, 216, 148, 190, 204, 61, 101, 190, 171, 121, 227, 189, 39, 154, 53, 63, 33, 181, 145, 189, 141, 195, 81, 191, 240, 90, 241, 62, 115, 12, 10, 63, 89, 155, 10, 62, 106, 66, 117, 190, 250, 213, 3, 190, 218, 252, 168, 189, 19, 107, 200, 190, 72, 214, 63, 63, 232, 235, 89, 62, 3, 16, 98, 191, 185, 238, 24, 63, 119, 100, 121, 62, 225, 118, 74, 189, 57, 21, 157, 62, 101, 180, 178, 191, 244, 79, 101, 189, 233, 44, 141, 189, 138, 178, 2, 189, 97, 131, 128, 188, 30, 112, 133, 190, 188, 198, 227, 190, 47, 223, 61, 62, 76, 11, 48, 190, 111, 249, 82, 62, 77, 127, 66, 61, 29, 141, 238, 191, 143, 219, 23, 63, 209, 36, 37, 191, 148, 97, 209, 61, 26, 101, 174, 61, 145, 105, 201, 190, 195, 192, 143, 190, 65, 174, 105, 189, 207, 24, 223, 61, 39, 64, 15, 191, 206, 228, 159, 61, 104, 42, 148, 62, 126, 166, 170, 191, 93, 231, 96, 62, 206, 140, 136, 189, 43, 109, 43, 60, 49, 236, 142, 190, 170, 43, 139, 190, 253, 245, 98, 191, 44, 68, 213, 61, 223, 199, 85, 62, 23, 21, 162, 190, 30, 219, 236, 188, 118, 15, 167, 190, 51, 209, 77, 61, 237, 164, 213, 189, 254, 179, 85, 61, 144, 154, 59, 189, 210, 204, 11, 62, 200, 74, 142, 190, 122, 65, 161, 62, 180, 192, 42, 62, 215, 234, 200, 189, 222, 167, 28, 62, 205, 119, 64, 191, 227, 17, 140, 190, 241, 194, 91, 190, 170, 196, 99, 189, 146, 139, 217, 190, 97, 76, 13, 191, 208, 86, 154, 61, 42, 242, 143, 61, 166, 177, 99, 62, 249, 199, 131, 61, 143, 74, 76, 191, 239, 54, 178, 62, 53, 197, 89, 62, 202, 74, 153, 61, 228, 81, 225, 61, 255, 57, 93, 191, 187, 52, 158, 189, 164, 179, 124, 61, 126, 187, 209, 190, 114, 25, 124, 189, 109, 170, 92, 62, 150, 68, 195, 189, 244, 113, 4, 190, 236, 123, 121, 58, 150, 183, 169, 60, 43, 5, 209, 189, 18, 34, 5, 191, 93, 116, 108, 61, 242, 87, 224, 60, 95, 98, 88, 62, 28, 102, 255, 189, 104, 32, 169, 60, 201, 117, 6, 188, 242, 175, 141, 61, 232, 45, 133, 62, 119, 211, 3, 62, 26, 21, 167, 61, 161, 84, 180, 188, 156, 104, 87, 190, 111, 138, 96, 62, 42, 140, 148, 190, 10, 167, 1, 61, 23, 212, 184, 62, 143, 111, 111, 62, 3, 203, 181, 190, 202, 85, 63, 62, 56, 2, 179, 61, 162, 233, 5, 191, 101, 202, 38, 190, 185, 183, 114, 62, 69, 45, 106, 62, 168, 71, 0, 63, 194, 69, 78, 62, 81, 39, 174, 190, 20, 9, 17, 190, 157, 56, 186, 61, 2, 87, 73, 62, 188, 67, 51, 61, 98, 21, 92, 61, 50, 18, 180, 190, 37, 75, 35, 62, 172, 9, 126, 190, 217, 35, 22, 61, 94, 132, 36, 62, 228, 96, 132, 190, 58, 34, 134, 190, 174, 78, 71, 190, 180, 64, 49, 62, 83, 197, 13, 191, 137, 34, 2, 62, 27, 206, 217, 62, 210, 134, 140, 62, 134, 86, 250, 62, 192, 64, 8, 190, 229, 15, 153, 190, 53, 224, 142, 188, 63, 69, 164, 190, 66, 193, 120, 62, 118, 127, 247, 189, 105, 137, 51, 191, 1, 124, 8, 60, 113, 120, 18, 61, 54, 139, 187, 61, 196, 191, 36, 61, 11, 59, 255, 61, 201, 70, 33, 191, 181, 157, 169, 61, 22, 184, 4, 62, 80, 179, 52, 62, 244, 58, 60, 62, 24, 52, 3, 62, 49, 58, 115, 190, 8, 65, 75, 61, 236, 176, 10, 189, 139, 134, 190, 60, 96, 205, 56, 62, 156, 10, 56, 190, 189, 148, 195, 61, 182, 148, 44, 190, 217, 53, 170, 189, 203, 251, 17, 191, 132, 20, 51, 61, 224, 44, 144, 61, 188, 62, 155, 62, 70, 47, 233, 62, 131, 28, 68, 190, 204, 99, 19, 190, 109, 99, 246, 187, 183, 136, 73, 190, 188, 56, 138, 60, 126, 217, 40, 190, 56, 220, 215, 59, 244, 54, 96, 61, 63, 210, 17, 190, 29, 72, 149, 186, 2, 239, 114, 60, 220, 97, 155, 189, 236, 225, 199, 61, 61, 202, 52, 189, 238, 225, 145, 189, 126, 227, 145, 61, 187, 248, 89, 188, 106, 81, 21, 190, 231, 145, 254, 60, 150, 10, 15, 190, 59, 80, 132, 61, 250, 119, 52, 188, 188, 167, 169, 189, 14, 80, 48, 190, 21, 242, 15, 190, 100, 140, 233, 61, 184, 229, 22, 190, 202, 78, 129, 189, 128, 38, 3, 189, 115, 224, 15, 189, 80, 83, 218, 61, 117, 129, 59, 60, 78, 171, 150, 61, 175, 130, 168, 61, 140, 234, 17, 63, 17, 139, 51, 190, 207, 5, 201, 62, 2, 250, 219, 189, 30, 132, 76, 190, 22, 9, 203, 190, 223, 224, 59, 62, 251, 33, 13, 63, 198, 76, 179, 189, 191, 84, 90, 189, 100, 251, 48, 191, 91, 252, 21, 190, 90, 246, 36, 62, 166, 242, 163, 62, 79, 172, 234, 61, 20, 247, 167, 61, 68, 209, 43, 190, 142, 6, 46, 62, 140, 70, 200, 186, 86, 196, 28, 190, 25, 129, 11, 63, 208, 196, 85, 190, 65, 183, 106, 190, 77, 195, 160, 189, 229, 253, 135, 61, 201, 144, 102, 191, 94, 167, 21, 191, 34, 203, 31, 62, 143, 159, 170, 61, 98, 116, 0, 62, 87, 114, 60, 190, 57, 122, 157, 189, 254, 104, 130, 190, 16, 126, 178, 188, 69, 131, 58, 189, 36, 10, 182, 61, 169, 87, 157, 190, 81, 241, 143, 62, 107, 183, 131, 188, 139, 86, 98, 191, 37, 33, 142, 190, 44, 226, 6, 62, 194, 173, 28, 186, 215, 129, 164, 188, 114, 156, 208, 188, 100, 173, 142, 61, 197, 149, 139, 190, 191, 234, 211, 190, 26, 151, 49, 190, 243, 152, 179, 61, 227, 119, 73, 62, 154, 39, 27, 188, 48, 190, 15, 190, 170, 251, 35, 62, 181, 31, 77, 60, 21, 215, 151, 61, 80, 158, 88, 190, 6, 20, 92, 62, 152, 207, 12, 190, 77, 182, 16, 191, 43, 183, 3, 62, 1, 30, 156, 190, 177, 142, 108, 190, 69, 63, 15, 62, 164, 85, 18, 189, 47, 48, 27, 190, 57, 105, 113, 189, 131, 12, 234, 189, 28, 132, 192, 61, 227, 82, 39, 190, 183, 196, 213, 188, 68, 172, 117, 59, 5, 88, 4, 190, 57, 180, 15, 61, 23, 152, 153, 188, 126, 85, 62, 190, 73, 187, 243, 189, 168, 70, 139, 61, 232, 38, 51, 61, 116, 57, 172, 61, 224, 1, 69, 190, 211, 191, 212, 189, 14, 14, 111, 188, 3, 209, 160, 189, 205, 176, 66, 190, 98, 116, 83, 189, 189, 78, 16, 190, 211, 213, 40, 190, 222, 117, 84, 61, 147, 16, 100, 189, 64, 54, 182, 61, 233, 70, 164, 61, 46, 252, 152, 61, 242, 98, 15, 190, 23, 214, 150, 189, 0, 225, 217, 61, 184, 112, 159, 61, 100, 155, 49, 190, 21, 152, 150, 62, 100, 16, 167, 190, 145, 222, 46, 191, 36, 128, 69, 62, 188, 84, 196, 61, 246, 128, 5, 190, 196, 162, 20, 190, 87, 230, 172, 62, 210, 112, 3, 191, 33, 65, 66, 190, 100, 206, 8, 60, 61, 65, 16, 191, 177, 230, 124, 190, 170, 196, 240, 187, 192, 221, 191, 188, 148, 13, 171, 61, 198, 5, 33, 190, 144, 243, 49, 189, 61, 230, 184, 190, 65, 5, 78, 190, 148, 33, 170, 61, 223, 233, 142, 190, 161, 35, 118, 190, 102, 177, 151, 190, 98, 40, 13, 62, 241, 233, 249, 189, 108, 120, 103, 190, 206, 116, 85, 190, 25, 244, 14, 62, 88, 63, 73, 62, 225, 154, 79, 189, 248, 187, 142, 62, 47, 216, 152, 189, 76, 237, 134, 189, 36, 215, 13, 63, 137, 164, 157, 190, 93, 248, 207, 61, 202, 55, 28, 62, 34, 136, 142, 62, 63, 252, 86, 62, 101, 240, 28, 61, 211, 114, 192, 189, 138, 35, 108, 190, 214, 51, 149, 190, 70, 186, 158, 62, 128, 243, 216, 62, 70, 73, 174, 61, 215, 176, 150, 61, 10, 70, 79, 191, 1, 90, 131, 189, 223, 45, 149, 61, 237, 167, 248, 188, 48, 164, 41, 62, 44, 48, 30, 62, 254, 207, 23, 62, 251, 230, 167, 190, 90, 153, 12, 62, 202, 173, 236, 62, 117, 203, 129, 62, 240, 208, 34, 62, 214, 58, 103, 62, 88, 59, 6, 191, 19, 218, 3, 62, 185, 126, 230, 189, 138, 245, 172, 62, 64, 3, 145, 62, 213, 7, 253, 190, 112, 208, 248, 61, 229, 59, 6, 62, 88, 29, 85, 62, 51, 10, 148, 62, 37, 42, 192, 60, 84, 5, 159, 190, 43, 19, 31, 190, 227, 85, 236, 62, 178, 91, 227, 62, 172, 38, 1, 62, 154, 29, 38, 190, 29, 90, 11, 191, 125, 115, 17, 62, 171, 24, 220, 61, 173, 120, 171, 61, 129, 139, 153, 62, 211, 178, 199, 190, 169, 215, 210, 61, 97, 183, 167, 190, 216, 162, 192, 189, 7, 164, 217, 190, 37, 14, 78, 62, 150, 177, 204, 61, 39, 47, 112, 62, 209, 87, 73, 62, 127, 79, 142, 189, 90, 246, 63, 190, 98, 69, 129, 189, 189, 219, 128, 190, 195, 11, 100, 190, 117, 88, 77, 61, 76, 211, 7, 61, 50, 24, 167, 61, 32, 156, 5, 191, 93, 26, 166, 62, 207, 216, 223, 190, 52, 111, 107, 189, 128, 129, 224, 61, 22, 254, 25, 61, 151, 143, 2, 62, 121, 82, 73, 190, 24, 89, 44, 190, 207, 20, 219, 190, 187, 171, 93, 190, 90, 98, 110, 190, 87, 232, 248, 60, 242, 11, 52, 190, 89, 243, 154, 62, 215, 9, 216, 60, 76, 123, 202, 189, 245, 243, 45, 62, 29, 51, 20, 188, 222, 2, 226, 189, 229, 248, 54, 60, 145, 14, 1, 191, 81, 100, 56, 190, 13, 10, 4, 191, 11, 35, 210, 189, 185, 15, 245, 61, 180, 251, 236, 59, 181, 146, 169, 62, 87, 19, 7, 191, 147, 5, 48, 62, 178, 190, 124, 61, 135, 254, 199, 61, 62, 155, 72, 191, 129, 252, 100, 191, 79, 190, 153, 190, 226, 115, 95, 190, 93, 227, 12, 62, 200, 153, 39, 62, 113, 185, 248, 189, 120, 54, 34, 190, 194, 122, 234, 189, 200, 194, 154, 190, 240, 11, 142, 62, 217, 161, 66, 191, 78, 169, 250, 61, 72, 28, 202, 189, 63, 241, 40, 191, 103, 119, 125, 62, 174, 253, 226, 188, 184, 135, 32, 62, 215, 73, 97, 61, 51, 132, 210, 62, 171, 110, 158, 60, 141, 68, 144, 190, 11, 197, 171, 61, 120, 24, 194, 190, 53, 56, 19, 187, 106, 182, 49, 62, 5, 65, 188, 61, 191, 196, 156, 189, 40, 239, 246, 189, 154, 191, 71, 190, 55, 34, 61, 189, 45, 182, 148, 190, 15, 57, 144, 60, 155, 227, 232, 61, 56, 245, 49, 61, 172, 114, 93, 190, 82, 209, 58, 190, 43, 36, 62, 188, 106, 230, 146, 59, 206, 157, 54, 190, 164, 48, 186, 61, 208, 49, 188, 61, 72, 144, 19, 61, 48, 216, 11, 189, 136, 206, 54, 189, 38, 52, 176, 189, 60, 56, 6, 62, 33, 90, 97, 190, 235, 83, 57, 190, 180, 254, 65, 188, 229, 148, 197, 189, 63, 79, 31, 190, 192, 176, 80, 190, 69, 195, 241, 189, 7, 111, 68, 61, 3, 237, 5, 190, 188, 88, 62, 189, 242, 98, 168, 190, 154, 219, 207, 189, 205, 60, 206, 61, 220, 223, 31, 61, 194, 210, 13, 189, 86, 245, 2, 190, 141, 150, 141, 188, 193, 174, 235, 61, 139, 80, 75, 61, 29, 124, 127, 189, 161, 204, 2, 62, 188, 9, 147, 189, 163, 165, 153, 61, 56, 217, 70, 190, 128, 184, 27, 190, 8, 95, 142, 189, 172, 132, 220, 189, 211, 202, 188, 189, 170, 107, 25, 189, 131, 230, 20, 62, 68, 200, 128, 61, 120, 63, 23, 190, 190, 252, 151, 61, 176, 3, 53, 190, 11, 129, 152, 189, 221, 68, 157, 189, 134, 5, 189, 61, 145, 120, 185, 188, 221, 54, 81, 190, 170, 63, 104, 60, 8, 26, 57, 190, 7, 247, 238, 60, 114, 102, 15, 189, 242, 15, 11, 62, 206, 8, 6, 190, 205, 70, 223, 189, 204, 250, 186, 188, 204, 82, 15, 188, 59, 128, 49, 61, 172, 136, 37, 190, 13, 43, 35, 62, 40, 45, 4, 190, 232, 211, 210, 188, 13, 177, 207, 189, 56, 34, 80, 61, 174, 171, 35, 190, 208, 16, 205, 189, 32, 43, 233, 184, 174, 33, 207, 189, 132, 251, 232, 189, 59, 247, 18, 61, 9, 159, 3, 190, 0, 96, 221, 60, 54, 115, 11, 190, 172, 75, 128, 61, 181, 76, 230, 188, 172, 148, 4, 189, 151, 126, 198, 61, 47, 57, 46, 62, 15, 30, 145, 187, 200, 49, 8, 190, 247, 90, 22, 62, 193, 120, 245, 187, 64, 130, 34, 189, 220, 244, 130, 188, 77, 59, 137, 62, 245, 248, 202, 60, 155, 0, 7, 191, 136, 211, 244, 189, 177, 93, 89, 189, 128, 243, 175, 62, 74, 18, 18, 191, 148, 32, 133, 190, 99, 65, 52, 61, 199, 57, 60, 191, 95, 145, 128, 190, 190, 19, 153, 189, 142, 177, 241, 189, 135, 148, 35, 62, 79, 236, 40, 62, 123, 151, 192, 61, 128, 167, 84, 188, 133, 201, 205, 190, 17, 161, 138, 62, 246, 178, 12, 62, 60, 81, 4, 61, 104, 233, 53, 190, 96, 76, 6, 62, 151, 67, 11, 190, 104, 57, 155, 62, 204, 133, 130, 190, 122, 74, 138, 190, 180, 192, 6, 56, 255, 4, 23, 62, 49, 60, 133, 61, 47, 126, 234, 61, 138, 210, 104, 190, 251, 201, 45, 62, 1, 243, 97, 189, 72, 215, 8, 190, 119, 153, 118, 189, 205, 192, 160, 189, 2, 76, 245, 189, 181, 140, 151, 61, 133, 39, 138, 189, 133, 79, 155, 61, 106, 102, 134, 188, 217, 186, 226, 189, 96, 116, 179, 60, 220, 163, 218, 61, 241, 211, 0, 190, 181, 84, 30, 190, 209, 117, 183, 189, 248, 113, 47, 190, 5, 235, 203, 60, 197, 62, 59, 188, 182, 155, 204, 189, 6, 186, 207, 189, 99, 196, 219, 61, 240, 94, 2, 62, 143, 12, 30, 188, 255, 234, 28, 190, 165, 225, 223, 61, 99, 92, 32, 190, 71, 18, 60, 190, 36, 220, 38, 190, 158, 174, 73, 61, 20, 118, 229, 189, 210, 127, 159, 189, 2, 139, 74, 189, 242, 211, 50, 63, 115, 107, 190, 61, 202, 220, 113, 190, 174, 239, 24, 62, 20, 178, 104, 61, 136, 224, 102, 190, 241, 14, 205, 62, 11, 12, 165, 191, 157, 250, 11, 189, 177, 72, 51, 190, 231, 67, 53, 190, 210, 9, 130, 61, 151, 85, 175, 190, 197, 167, 183, 188, 160, 196, 140, 61, 202, 221, 82, 62, 209, 79, 190, 190, 140, 14, 163, 190, 189, 12, 137, 191, 91, 41, 185, 62, 137, 47, 3, 191, 119, 87, 35, 61, 181, 33, 228, 62, 27, 116, 207, 189, 86, 39, 6, 63, 11, 18, 96, 62, 28, 98, 150, 190, 15, 245, 163, 190, 129, 222, 45, 62, 200, 61, 126, 188, 180, 89, 29, 190, 142, 84, 28, 190, 38, 132, 63, 62, 27, 0, 9, 61, 18, 23, 17, 191, 81, 125, 34, 190, 27, 57, 171, 62, 169, 7, 175, 190, 201, 57, 222, 62, 195, 170, 89, 191, 240, 70, 101, 189, 18, 15, 58, 189, 124, 194, 25, 62, 10, 206, 149, 61, 151, 249, 197, 190, 15, 32, 101, 191, 23, 129, 137, 190, 234, 88, 137, 61, 30, 207, 241, 190, 199, 1, 204, 61, 107, 116, 198, 191, 164, 120, 95, 62, 94, 121, 113, 189, 251, 84, 121, 62, 252, 102, 141, 190, 23, 29, 175, 190, 225, 138, 248, 62, 192, 131, 203, 190, 65, 188, 75, 191, 86, 194, 124, 191, 159, 204, 173, 189, 104, 73, 0, 191, 135, 149, 18, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {126, 46, 155, 62, 240, 233, 2, 190, 220, 92, 70, 62, 77, 128, 47, 190, 131, 9, 179, 62, 155, 52, 157, 62, 208, 137, 147, 62, 227, 230, 131, 61, 188, 195, 103, 62, 112, 48, 195, 61, 137, 194, 84, 190, 25, 62, 116, 62, 52, 103, 114, 187, 243, 62, 22, 189, 190, 124, 134, 189, 138, 143, 19, 62, 34, 27, 201, 189, 110, 133, 165, 61, 28, 253, 150, 62, 26, 25, 105, 61, 141, 101, 135, 189, 117, 212, 214, 190, 166, 24, 109, 62, 149, 107, 52, 61, 78, 206, 183, 190, 103, 83, 15, 190, 15, 120, 84, 188, 103, 183, 57, 190, 152, 18, 156, 189, 41, 173, 0, 189, 194, 87, 161, 62, 137, 217, 176, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 15, 231, 58, 165, 171, 17, 63, 186, 221, 27, 191, 185, 139, 214, 60, 90, 156, 25, 62, 150, 228, 188, 190, 41, 220, 247, 190, 206, 254, 237, 189, 46, 176, 53, 191, 113, 57, 242, 189, 78, 54, 154, 63, 192, 98, 90, 191, 65, 43, 27, 191, 118, 5, 216, 189, 4, 44, 211, 62, 152, 127, 104, 62, 102, 141, 68, 189, 1, 44, 28, 63, 235, 186, 90, 190, 155, 155, 118, 188, 222, 203, 43, 60, 173, 201, 33, 191, 171, 233, 158, 62, 214, 107, 43, 62, 147, 146, 54, 63, 66, 118, 109, 189, 125, 87, 215, 189, 202, 124, 5, 190, 151, 29, 51, 190, 222, 226, 183, 189, 102, 207, 38, 191, 171, 205, 169, 191, 98, 176, 83, 190, 116, 65, 93, 60, 18, 205, 82, 62, 3, 82, 41, 190, 225, 91, 209, 190, 3, 182, 89, 190, 163, 183, 164, 190, 136, 13, 117, 189, 155, 165, 139, 59, 249, 73, 239, 61, 207, 158, 85, 62, 144, 206, 30, 190, 199, 48, 255, 187, 29, 76, 216, 190, 255, 231, 25, 62, 101, 95, 135, 190, 34, 187, 224, 189, 181, 136, 165, 61, 107, 237, 89, 190, 194, 51, 39, 61, 237, 89, 3, 191, 135, 244, 175, 188, 91, 31, 69, 190, 107, 139, 20, 63, 133, 25, 72, 62, 252, 173, 183, 61, 102, 235, 24, 61, 235, 182, 20, 190, 27, 237, 67, 62, 83, 17, 200, 61, 198, 56, 145, 62, 134, 10, 14, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 90, 101, 61, 146, 13, 206, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {59, 164, 85, 190, 106, 102, 193, 190, 70, 53, 110, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {68, 67, 174, 191, 158, 6, 149, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0065/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}