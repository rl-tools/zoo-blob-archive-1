// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 205, 5, 191, 254, 56, 91, 63, 62, 185, 93, 190, 241, 167, 48, 61, 192, 200, 47, 191, 213, 121, 217, 62, 25, 215, 17, 63, 23, 119, 64, 191, 131, 176, 252, 189, 248, 222, 77, 189, 106, 239, 165, 63, 225, 237, 189, 62, 9, 124, 247, 62, 69, 244, 131, 190, 156, 239, 172, 189, 210, 95, 232, 190, 31, 120, 169, 62, 243, 145, 176, 190, 2, 70, 33, 63, 252, 0, 158, 191, 153, 44, 91, 190, 250, 185, 190, 190, 178, 245, 150, 191, 81, 126, 88, 190, 42, 193, 240, 190, 10, 169, 137, 63, 159, 20, 195, 62, 47, 21, 73, 63, 15, 18, 102, 190, 213, 126, 198, 190, 70, 15, 173, 62, 27, 222, 95, 63, 234, 96, 153, 62, 78, 194, 143, 62, 5, 235, 52, 62, 8, 32, 6, 189, 24, 87, 29, 190, 125, 188, 26, 62, 211, 226, 241, 60, 129, 146, 101, 191, 107, 21, 157, 62, 253, 135, 126, 62, 34, 75, 65, 191, 253, 67, 32, 190, 44, 242, 81, 63, 53, 56, 232, 62, 59, 53, 145, 191, 108, 99, 162, 190, 240, 217, 13, 63, 61, 17, 5, 190, 145, 177, 3, 63, 81, 248, 225, 62, 122, 183, 132, 191, 87, 139, 189, 189, 45, 199, 26, 191, 135, 144, 24, 63, 22, 101, 114, 189, 177, 227, 234, 190, 156, 107, 140, 63, 12, 207, 21, 63, 211, 253, 162, 190, 190, 1, 145, 191, 66, 220, 3, 190, 86, 179, 232, 62, 160, 26, 223, 62, 235, 215, 241, 62, 96, 234, 246, 61, 56, 13, 193, 190, 88, 125, 180, 190, 217, 14, 197, 62, 249, 112, 55, 191, 80, 138, 23, 63, 122, 44, 44, 190, 41, 100, 44, 63, 165, 124, 51, 190, 148, 183, 8, 63, 87, 48, 201, 63, 245, 2, 171, 62, 152, 244, 1, 63, 103, 63, 89, 63, 18, 67, 179, 190, 247, 62, 55, 63, 127, 111, 45, 191, 198, 44, 133, 190, 98, 152, 181, 62, 94, 52, 209, 190, 33, 75, 226, 62, 143, 119, 88, 191, 235, 69, 150, 189, 248, 121, 159, 62, 63, 63, 202, 62, 245, 130, 167, 190, 180, 96, 100, 189, 67, 81, 78, 63, 246, 226, 137, 63, 220, 35, 131, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 147, 173, 190, 93, 232, 2, 191, 58, 65, 96, 62, 98, 89, 101, 62, 52, 115, 18, 191, 240, 208, 28, 62, 204, 92, 97, 61, 167, 248, 170, 62, 25, 232, 134, 190, 39, 4, 129, 61, 13, 89, 87, 190, 111, 224, 40, 191, 24, 128, 66, 63, 234, 150, 23, 63, 233, 62, 51, 190, 238, 97, 113, 190, 177, 25, 120, 191, 23, 65, 234, 60, 4, 131, 19, 62, 182, 84, 18, 190, 192, 41, 219, 62, 36, 158, 144, 190, 163, 23, 42, 63, 222, 199, 146, 190, 219, 3, 24, 190, 26, 164, 45, 60, 55, 143, 237, 190, 131, 22, 231, 190, 35, 94, 133, 62, 225, 87, 99, 188, 156, 49, 107, 191, 213, 180, 121, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 154, 73, 62, 184, 77, 130, 189, 124, 211, 6, 189, 252, 228, 7, 62, 226, 48, 10, 191, 225, 245, 150, 187, 227, 211, 224, 61, 95, 235, 243, 61, 248, 127, 166, 61, 120, 241, 28, 62, 32, 119, 193, 189, 202, 99, 9, 62, 109, 3, 211, 60, 244, 120, 204, 61, 16, 241, 240, 61, 16, 48, 6, 62, 12, 240, 172, 61, 65, 116, 9, 61, 10, 126, 78, 190, 243, 67, 16, 61, 114, 211, 237, 186, 174, 227, 82, 189, 197, 167, 221, 188, 78, 237, 19, 190, 38, 189, 243, 189, 106, 219, 189, 190, 61, 198, 21, 61, 37, 117, 209, 60, 197, 71, 169, 62, 198, 206, 25, 190, 103, 162, 134, 190, 0, 200, 106, 60, 2, 138, 3, 62, 124, 244, 65, 188, 67, 124, 131, 189, 113, 149, 178, 61, 242, 193, 28, 190, 117, 52, 120, 189, 170, 236, 22, 191, 138, 226, 57, 191, 135, 138, 5, 61, 142, 31, 211, 189, 201, 84, 11, 62, 64, 55, 187, 61, 83, 194, 166, 61, 30, 215, 131, 189, 206, 44, 61, 188, 30, 84, 199, 189, 58, 255, 217, 61, 5, 145, 48, 191, 101, 224, 46, 190, 89, 43, 7, 62, 79, 35, 65, 191, 252, 2, 230, 61, 190, 173, 158, 190, 53, 245, 165, 189, 158, 6, 103, 62, 84, 91, 245, 62, 87, 217, 222, 60, 217, 182, 77, 190, 121, 0, 162, 190, 20, 254, 48, 190, 206, 59, 178, 61, 135, 107, 199, 62, 72, 155, 65, 190, 93, 230, 159, 62, 142, 181, 129, 61, 216, 254, 135, 61, 28, 244, 10, 60, 204, 236, 131, 62, 104, 61, 4, 191, 172, 231, 203, 190, 64, 63, 200, 189, 170, 132, 50, 190, 190, 182, 174, 61, 55, 228, 39, 188, 219, 178, 76, 62, 49, 215, 199, 189, 65, 83, 68, 190, 236, 100, 48, 191, 88, 139, 194, 62, 53, 239, 245, 190, 68, 75, 198, 60, 228, 177, 56, 190, 208, 18, 140, 190, 221, 98, 172, 62, 46, 178, 121, 62, 113, 205, 197, 62, 42, 188, 139, 190, 29, 250, 146, 62, 204, 58, 15, 62, 148, 4, 51, 191, 188, 214, 42, 190, 96, 140, 155, 190, 123, 63, 98, 190, 192, 158, 150, 61, 94, 128, 238, 189, 70, 118, 72, 186, 147, 176, 254, 189, 215, 171, 174, 61, 72, 7, 17, 62, 250, 186, 226, 189, 76, 107, 161, 61, 101, 81, 146, 189, 129, 10, 199, 189, 185, 226, 180, 188, 215, 251, 244, 61, 9, 67, 41, 62, 99, 59, 232, 189, 104, 24, 45, 190, 123, 72, 1, 62, 128, 15, 189, 189, 185, 168, 16, 190, 245, 160, 38, 62, 132, 233, 31, 62, 133, 24, 3, 190, 54, 133, 34, 61, 32, 179, 129, 61, 18, 205, 38, 190, 26, 4, 32, 190, 100, 23, 38, 190, 22, 136, 51, 190, 210, 57, 29, 190, 210, 15, 202, 60, 140, 221, 36, 190, 200, 0, 23, 62, 4, 243, 136, 60, 14, 137, 214, 189, 222, 54, 215, 61, 73, 81, 29, 190, 7, 139, 39, 62, 68, 32, 242, 186, 59, 212, 45, 191, 54, 109, 233, 189, 110, 108, 175, 186, 65, 3, 131, 189, 163, 203, 164, 61, 226, 85, 134, 62, 139, 134, 28, 190, 250, 97, 61, 61, 219, 225, 179, 62, 168, 26, 217, 61, 97, 175, 9, 62, 234, 91, 104, 189, 180, 127, 180, 59, 49, 126, 144, 62, 20, 45, 229, 189, 105, 102, 250, 61, 125, 48, 91, 62, 53, 39, 46, 188, 45, 161, 94, 62, 126, 205, 93, 190, 192, 157, 18, 190, 251, 174, 180, 190, 242, 114, 31, 60, 200, 109, 57, 62, 29, 52, 153, 62, 114, 15, 231, 61, 212, 218, 230, 189, 194, 133, 118, 60, 101, 204, 9, 190, 216, 174, 36, 190, 22, 3, 86, 189, 63, 140, 218, 60, 30, 12, 224, 188, 164, 145, 67, 62, 158, 208, 27, 190, 123, 224, 238, 188, 185, 160, 9, 191, 168, 11, 167, 188, 215, 79, 152, 61, 105, 149, 139, 58, 93, 159, 150, 62, 89, 246, 26, 190, 47, 83, 19, 191, 249, 236, 235, 190, 18, 131, 44, 190, 225, 110, 131, 190, 188, 247, 87, 62, 175, 63, 158, 190, 167, 224, 79, 61, 102, 167, 90, 188, 108, 236, 161, 188, 200, 139, 48, 62, 238, 140, 148, 190, 61, 203, 151, 62, 21, 108, 89, 60, 47, 33, 255, 190, 254, 210, 7, 190, 46, 191, 199, 61, 150, 229, 3, 62, 209, 54, 139, 62, 78, 218, 44, 190, 185, 155, 229, 189, 166, 13, 154, 61, 108, 65, 88, 189, 76, 81, 79, 191, 143, 222, 181, 62, 45, 117, 38, 190, 236, 112, 1, 62, 237, 124, 131, 190, 105, 42, 239, 189, 245, 146, 52, 62, 111, 215, 73, 189, 168, 76, 159, 62, 1, 117, 174, 189, 61, 249, 163, 190, 185, 107, 84, 189, 110, 8, 18, 190, 107, 147, 82, 60, 121, 55, 235, 61, 110, 183, 91, 190, 104, 178, 16, 61, 71, 195, 72, 62, 40, 70, 148, 61, 246, 227, 1, 62, 204, 226, 89, 190, 130, 210, 224, 62, 115, 221, 144, 190, 222, 202, 53, 191, 255, 189, 89, 62, 117, 200, 81, 58, 224, 185, 49, 190, 2, 217, 204, 62, 43, 42, 2, 62, 40, 140, 31, 62, 195, 108, 41, 190, 58, 186, 54, 59, 133, 213, 83, 190, 160, 191, 174, 189, 243, 172, 97, 190, 37, 255, 26, 191, 249, 158, 211, 189, 89, 226, 56, 62, 204, 74, 47, 62, 77, 128, 34, 190, 169, 193, 148, 62, 206, 75, 131, 189, 37, 115, 7, 61, 228, 95, 27, 191, 130, 205, 8, 62, 214, 146, 57, 62, 177, 13, 123, 60, 163, 87, 102, 60, 22, 53, 145, 190, 199, 146, 75, 62, 105, 15, 48, 60, 10, 97, 5, 62, 12, 229, 38, 60, 213, 135, 228, 61, 52, 220, 222, 189, 62, 164, 49, 191, 174, 250, 133, 62, 70, 2, 1, 60, 7, 238, 103, 61, 237, 89, 208, 61, 25, 224, 60, 190, 180, 19, 144, 62, 38, 134, 129, 190, 166, 68, 27, 190, 25, 110, 198, 61, 55, 158, 233, 62, 144, 141, 28, 191, 110, 138, 142, 190, 15, 177, 181, 190, 149, 251, 51, 190, 241, 65, 161, 62, 101, 78, 10, 61, 111, 19, 47, 61, 77, 84, 157, 189, 124, 100, 189, 189, 16, 40, 17, 191, 106, 193, 140, 62, 121, 21, 183, 190, 207, 38, 137, 62, 83, 205, 44, 190, 94, 194, 74, 190, 252, 134, 118, 62, 40, 80, 54, 62, 205, 171, 165, 62, 17, 153, 19, 190, 46, 157, 172, 62, 232, 150, 2, 190, 68, 99, 111, 191, 224, 19, 130, 189, 46, 84, 130, 190, 211, 127, 231, 190, 0, 251, 64, 62, 214, 184, 212, 61, 100, 203, 44, 190, 28, 26, 199, 61, 37, 253, 18, 190, 113, 215, 21, 62, 58, 35, 152, 61, 204, 150, 121, 61, 149, 190, 28, 190, 189, 188, 215, 61, 23, 184, 61, 190, 166, 47, 47, 188, 115, 120, 15, 62, 5, 135, 213, 61, 155, 247, 156, 189, 9, 24, 43, 190, 72, 147, 116, 61, 90, 36, 232, 61, 154, 224, 151, 189, 197, 235, 197, 189, 210, 20, 22, 190, 147, 227, 241, 189, 92, 111, 250, 188, 203, 78, 37, 190, 149, 224, 12, 187, 193, 252, 50, 190, 218, 69, 168, 189, 41, 128, 21, 189, 1, 126, 4, 62, 224, 227, 177, 187, 22, 104, 133, 189, 10, 45, 155, 189, 206, 206, 38, 190, 132, 29, 136, 189, 69, 253, 209, 62, 23, 185, 42, 62, 194, 39, 12, 191, 77, 234, 232, 190, 80, 197, 65, 189, 207, 65, 177, 62, 196, 52, 79, 190, 142, 209, 32, 191, 153, 120, 103, 62, 76, 190, 242, 190, 183, 216, 141, 184, 94, 170, 155, 190, 117, 90, 70, 190, 165, 4, 119, 189, 117, 120, 92, 62, 73, 167, 36, 62, 203, 52, 105, 62, 194, 158, 220, 189, 187, 31, 9, 190, 163, 212, 130, 190, 88, 96, 105, 190, 196, 70, 211, 189, 246, 116, 45, 63, 244, 90, 122, 189, 7, 100, 58, 191, 125, 223, 253, 62, 16, 50, 7, 63, 103, 174, 1, 62, 155, 219, 38, 190, 250, 213, 3, 190, 135, 5, 132, 189, 191, 108, 204, 190, 6, 225, 28, 63, 176, 33, 59, 62, 154, 63, 72, 191, 240, 108, 31, 63, 31, 20, 147, 62, 135, 225, 141, 189, 202, 184, 159, 62, 157, 184, 165, 191, 220, 182, 39, 189, 233, 44, 141, 189, 138, 178, 2, 189, 8, 218, 112, 187, 135, 182, 30, 190, 46, 124, 7, 191, 209, 216, 60, 62, 72, 233, 68, 190, 236, 113, 45, 62, 168, 103, 136, 61, 30, 84, 216, 191, 54, 128, 23, 63, 38, 132, 18, 191, 49, 98, 253, 61, 254, 155, 15, 61, 16, 144, 203, 190, 79, 215, 141, 190, 81, 22, 126, 189, 81, 217, 255, 61, 83, 20, 25, 191, 48, 247, 199, 61, 104, 42, 148, 62, 0, 214, 141, 191, 62, 156, 68, 62, 12, 124, 165, 189, 51, 244, 136, 189, 87, 217, 22, 190, 185, 176, 112, 190, 183, 151, 50, 191, 246, 10, 36, 61, 80, 3, 79, 62, 70, 173, 44, 190, 9, 163, 18, 189, 169, 133, 160, 190, 51, 209, 77, 61, 193, 69, 186, 189, 99, 253, 72, 62, 89, 78, 150, 60, 97, 114, 224, 61, 227, 135, 133, 190, 146, 217, 116, 62, 69, 189, 47, 62, 202, 142, 183, 61, 6, 148, 15, 62, 165, 115, 33, 191, 230, 213, 139, 190, 103, 203, 52, 190, 11, 93, 161, 189, 57, 10, 216, 190, 91, 98, 20, 191, 13, 124, 99, 61, 193, 235, 205, 61, 84, 213, 171, 62, 249, 199, 131, 61, 221, 39, 13, 191, 136, 215, 127, 62, 78, 171, 48, 62, 245, 165, 167, 61, 251, 46, 220, 61, 188, 122, 92, 191, 185, 230, 43, 190, 50, 101, 157, 61, 17, 61, 172, 190, 89, 22, 175, 188, 196, 96, 83, 62, 169, 64, 157, 189, 244, 113, 4, 190, 53, 81, 8, 188, 236, 126, 136, 60, 147, 118, 179, 189, 157, 127, 7, 191, 18, 25, 14, 61, 50, 152, 27, 61, 57, 20, 18, 62, 218, 169, 204, 189, 123, 184, 213, 60, 202, 178, 69, 188, 201, 135, 98, 61, 45, 242, 120, 62, 117, 209, 82, 61, 30, 128, 179, 61, 56, 108, 240, 189, 57, 70, 103, 190, 1, 75, 106, 62, 91, 55, 135, 190, 10, 167, 1, 61, 42, 180, 185, 62, 245, 28, 124, 62, 0, 74, 138, 190, 163, 234, 84, 62, 28, 215, 23, 62, 226, 170, 12, 191, 144, 6, 40, 190, 130, 215, 123, 62, 139, 158, 82, 62, 52, 223, 8, 63, 97, 168, 105, 62, 32, 53, 144, 190, 20, 9, 17, 190, 138, 119, 186, 61, 188, 158, 67, 62, 12, 247, 175, 61, 253, 49, 131, 61, 26, 223, 118, 190, 237, 248, 48, 62, 164, 12, 148, 190, 231, 16, 128, 61, 158, 73, 24, 62, 140, 166, 80, 190, 63, 209, 130, 190, 167, 218, 20, 190, 237, 216, 68, 62, 215, 19, 254, 190, 8, 126, 48, 62, 232, 202, 228, 62, 55, 215, 146, 62, 22, 38, 1, 63, 192, 64, 8, 190, 80, 189, 137, 190, 141, 27, 151, 61, 144, 48, 157, 190, 246, 128, 143, 62, 54, 110, 233, 189, 32, 108, 56, 191, 134, 106, 206, 60, 184, 149, 155, 61, 145, 177, 31, 61, 132, 189, 98, 61, 153, 253, 14, 62, 219, 210, 38, 191, 181, 157, 169, 61, 232, 147, 22, 62, 241, 118, 33, 62, 66, 166, 41, 62, 136, 61, 42, 62, 161, 210, 76, 190, 146, 205, 197, 61, 96, 132, 105, 61, 217, 107, 17, 187, 39, 162, 99, 62, 16, 86, 35, 190, 197, 10, 219, 61, 139, 31, 225, 189, 208, 182, 224, 188, 41, 229, 13, 191, 208, 201, 175, 188, 90, 81, 195, 61, 109, 29, 180, 62, 119, 220, 210, 62, 131, 28, 68, 190, 59, 152, 251, 189, 109, 99, 246, 187, 89, 76, 72, 190, 188, 56, 138, 60, 72, 30, 40, 190, 56, 220, 215, 59, 244, 54, 96, 61, 63, 210, 17, 190, 16, 7, 87, 58, 185, 241, 128, 60, 220, 97, 155, 189, 236, 225, 199, 61, 61, 202, 52, 189, 102, 245, 141, 189, 58, 51, 154, 61, 241, 141, 7, 188, 106, 81, 21, 190, 231, 145, 254, 60, 5, 250, 14, 190, 189, 204, 133, 61, 38, 145, 10, 188, 142, 240, 164, 189, 85, 24, 48, 190, 27, 209, 15, 190, 212, 10, 239, 61, 184, 229, 22, 190, 202, 78, 129, 189, 128, 38, 3, 189, 115, 224, 15, 189, 77, 50, 224, 61, 90, 61, 111, 60, 78, 171, 150, 61, 175, 130, 168, 61, 228, 218, 17, 63, 162, 15, 14, 190, 227, 114, 198, 62, 106, 99, 31, 61, 248, 157, 108, 190, 162, 54, 237, 190, 45, 137, 39, 62, 170, 13, 253, 62, 107, 58, 27, 189, 172, 10, 97, 189, 71, 88, 0, 191, 91, 252, 21, 190, 165, 125, 3, 62, 107, 154, 110, 62, 52, 235, 246, 61, 57, 130, 77, 61, 136, 70, 0, 190, 172, 93, 25, 62, 185, 250, 11, 190, 45, 64, 53, 190, 129, 107, 249, 62, 55, 240, 77, 190, 108, 182, 130, 190, 153, 0, 4, 190, 31, 136, 201, 61, 200, 122, 76, 191, 171, 151, 237, 190, 214, 80, 1, 62, 244, 148, 137, 61, 3, 219, 162, 61, 87, 114, 60, 190, 166, 21, 129, 189, 84, 94, 148, 190, 123, 242, 206, 188, 1, 176, 88, 189, 147, 95, 208, 61, 22, 253, 157, 190, 182, 91, 136, 62, 35, 129, 204, 188, 202, 172, 10, 191, 108, 151, 104, 190, 190, 238, 18, 62, 48, 156, 35, 61, 215, 129, 164, 188, 173, 131, 179, 188, 74, 62, 126, 61, 70, 161, 91, 190, 54, 187, 223, 190, 108, 162, 28, 190, 44, 198, 148, 61, 73, 86, 18, 62, 204, 72, 33, 61, 43, 246, 93, 190, 40, 142, 38, 62, 0, 116, 187, 60, 234, 17, 32, 61, 250, 49, 86, 190, 170, 32, 103, 62, 95, 6, 191, 189, 153, 72, 19, 191, 81, 103, 249, 61, 111, 86, 115, 190, 177, 142, 108, 190, 103, 135, 20, 62, 164, 85, 18, 189, 47, 48, 27, 190, 26, 120, 98, 189, 80, 182, 232, 189, 28, 132, 192, 61, 227, 82, 39, 190, 164, 93, 189, 188, 68, 172, 117, 59, 5, 88, 4, 190, 87, 62, 34, 61, 203, 153, 148, 188, 126, 85, 62, 190, 12, 75, 239, 189, 168, 70, 139, 61, 232, 38, 51, 61, 27, 141, 174, 61, 224, 1, 69, 190, 40, 63, 208, 189, 14, 14, 111, 188, 3, 209, 160, 189, 193, 158, 66, 190, 132, 246, 82, 189, 2, 58, 12, 190, 211, 213, 40, 190, 222, 117, 84, 61, 251, 58, 87, 189, 131, 216, 184, 61, 29, 203, 167, 61, 100, 231, 155, 61, 242, 98, 15, 190, 23, 214, 150, 189, 50, 51, 229, 61, 25, 92, 233, 61, 218, 244, 35, 190, 5, 143, 176, 62, 68, 222, 149, 190, 108, 164, 49, 191, 244, 12, 62, 62, 131, 189, 26, 62, 73, 193, 16, 190, 196, 162, 20, 190, 66, 184, 161, 62, 112, 250, 252, 190, 33, 65, 66, 190, 255, 180, 63, 61, 215, 61, 246, 190, 253, 56, 130, 190, 183, 113, 101, 188, 89, 14, 7, 189, 250, 178, 8, 62, 108, 249, 186, 189, 211, 233, 51, 189, 211, 121, 150, 190, 56, 105, 145, 188, 102, 214, 159, 61, 31, 115, 236, 60, 210, 67, 98, 190, 139, 224, 134, 190, 244, 177, 130, 188, 188, 255, 33, 190, 89, 243, 18, 61, 223, 25, 84, 190, 25, 244, 14, 62, 114, 112, 135, 62, 196, 114, 140, 189, 179, 107, 74, 62, 62, 11, 254, 189, 53, 0, 152, 189, 21, 234, 19, 63, 246, 119, 109, 190, 155, 122, 132, 61, 191, 141, 37, 62, 229, 32, 131, 62, 46, 31, 109, 62, 244, 70, 47, 187, 211, 114, 192, 189, 248, 236, 103, 190, 38, 13, 140, 190, 211, 84, 136, 62, 249, 148, 219, 62, 37, 245, 105, 188, 149, 191, 219, 60, 111, 89, 40, 191, 224, 36, 156, 189, 107, 75, 135, 61, 233, 162, 202, 189, 134, 38, 63, 62, 99, 24, 165, 61, 54, 144, 3, 62, 253, 146, 166, 190, 15, 10, 192, 61, 35, 41, 248, 62, 245, 218, 55, 62, 114, 144, 23, 62, 214, 58, 103, 62, 70, 24, 19, 191, 72, 63, 74, 62, 49, 115, 171, 189, 41, 171, 186, 62, 157, 228, 41, 62, 218, 228, 3, 191, 125, 180, 5, 62, 66, 204, 38, 62, 123, 17, 33, 62, 33, 138, 68, 62, 131, 241, 216, 60, 242, 245, 225, 190, 43, 19, 31, 190, 20, 132, 228, 62, 234, 3, 185, 62, 131, 249, 201, 61, 241, 47, 247, 189, 47, 227, 250, 190, 3, 110, 57, 62, 22, 5, 238, 61, 84, 13, 163, 188, 2, 131, 176, 62, 138, 184, 205, 190, 216, 177, 218, 61, 101, 156, 134, 190, 145, 207, 130, 189, 149, 87, 242, 190, 213, 135, 12, 62, 253, 170, 246, 61, 194, 33, 136, 62, 161, 112, 23, 62, 127, 79, 142, 189, 218, 75, 79, 190, 95, 205, 205, 189, 84, 7, 130, 190, 12, 206, 208, 189, 246, 123, 201, 61, 76, 211, 7, 61, 170, 58, 182, 60, 81, 145, 223, 190, 17, 255, 73, 62, 203, 200, 197, 190, 126, 69, 20, 189, 66, 27, 42, 62, 22, 254, 25, 61, 246, 18, 25, 62, 114, 232, 73, 190, 124, 110, 116, 190, 80, 3, 247, 190, 179, 201, 116, 190, 228, 146, 53, 190, 49, 229, 207, 187, 109, 186, 57, 190, 29, 122, 33, 62, 99, 74, 113, 61, 28, 205, 212, 189, 197, 131, 161, 61, 155, 44, 68, 189, 48, 6, 84, 189, 89, 84, 4, 60, 78, 172, 1, 191, 126, 130, 25, 190, 224, 136, 18, 191, 11, 35, 210, 189, 61, 188, 64, 62, 126, 216, 231, 187, 134, 228, 190, 62, 191, 241, 226, 190, 83, 134, 62, 62, 178, 190, 124, 61, 88, 230, 247, 61, 176, 24, 50, 191, 101, 177, 88, 191, 2, 175, 173, 190, 180, 245, 74, 190, 192, 170, 35, 62, 200, 153, 39, 62, 24, 26, 148, 189, 252, 114, 56, 190, 115, 235, 231, 189, 177, 192, 198, 190, 42, 154, 147, 62, 171, 131, 61, 191, 56, 162, 165, 61, 45, 240, 2, 190, 92, 95, 29, 191, 50, 249, 152, 62, 122, 104, 117, 61, 57, 110, 62, 62, 131, 224, 25, 61, 103, 143, 227, 62, 24, 162, 175, 61, 76, 15, 219, 190, 74, 171, 19, 62, 169, 127, 191, 190, 53, 56, 19, 187, 116, 185, 115, 62, 5, 65, 188, 61, 22, 224, 108, 189, 204, 197, 211, 189, 36, 2, 45, 190, 55, 34, 61, 189, 184, 162, 147, 190, 81, 34, 10, 61, 14, 232, 9, 62, 133, 23, 81, 61, 37, 3, 90, 190, 119, 242, 49, 190, 43, 36, 62, 188, 207, 167, 252, 60, 251, 182, 26, 190, 96, 155, 227, 61, 181, 33, 211, 61, 20, 17, 139, 61, 157, 16, 129, 188, 61, 125, 56, 189, 232, 213, 92, 189, 213, 43, 29, 62, 153, 34, 62, 190, 148, 103, 41, 190, 26, 47, 53, 60, 229, 148, 197, 189, 63, 79, 31, 190, 192, 176, 80, 190, 69, 253, 234, 189, 83, 3, 149, 61, 147, 198, 222, 189, 188, 88, 62, 189, 170, 109, 153, 190, 154, 219, 207, 189, 205, 60, 206, 61, 231, 242, 44, 61, 19, 44, 246, 188, 86, 245, 2, 190, 141, 150, 141, 188, 139, 233, 239, 61, 139, 80, 75, 61, 29, 124, 127, 189, 250, 44, 5, 62, 89, 2, 140, 189, 163, 165, 153, 61, 113, 19, 68, 190, 128, 184, 27, 190, 8, 95, 142, 189, 172, 132, 220, 189, 232, 166, 188, 189, 230, 232, 18, 189, 131, 230, 20, 62, 209, 123, 129, 61, 120, 63, 23, 190, 182, 112, 160, 61, 135, 105, 51, 190, 19, 245, 142, 189, 221, 68, 157, 189, 34, 127, 203, 61, 145, 120, 185, 188, 221, 54, 81, 190, 66, 61, 166, 60, 8, 26, 57, 190, 7, 247, 238, 60, 219, 125, 210, 188, 242, 15, 11, 62, 206, 8, 6, 190, 205, 70, 223, 189, 204, 250, 186, 188, 204, 82, 15, 188, 59, 128, 49, 61, 172, 136, 37, 190, 13, 43, 35, 62, 40, 45, 4, 190, 232, 211, 210, 188, 13, 177, 207, 189, 56, 34, 80, 61, 174, 171, 35, 190, 208, 16, 205, 189, 32, 43, 233, 184, 174, 33, 207, 189, 132, 251, 232, 189, 59, 247, 18, 61, 9, 159, 3, 190, 0, 96, 221, 60, 54, 115, 11, 190, 172, 75, 128, 61, 181, 76, 230, 188, 172, 148, 4, 189, 151, 126, 198, 61, 47, 57, 46, 62, 15, 30, 145, 187, 200, 49, 8, 190, 247, 90, 22, 62, 193, 120, 245, 187, 64, 130, 34, 189, 220, 244, 130, 188, 199, 78, 228, 61, 134, 125, 40, 61, 217, 105, 196, 190, 246, 190, 175, 189, 177, 93, 89, 189, 15, 202, 42, 62, 28, 51, 203, 190, 83, 31, 67, 190, 202, 209, 124, 61, 165, 136, 55, 191, 90, 95, 41, 190, 190, 19, 153, 189, 27, 68, 135, 189, 196, 208, 70, 62, 76, 148, 67, 62, 143, 65, 129, 60, 229, 164, 122, 189, 219, 241, 148, 190, 65, 161, 113, 62, 199, 64, 52, 62, 113, 244, 224, 61, 87, 167, 29, 190, 201, 148, 250, 188, 165, 62, 231, 189, 139, 227, 98, 62, 119, 133, 48, 190, 171, 244, 200, 190, 210, 155, 39, 189, 44, 252, 57, 62, 89, 144, 187, 61, 47, 126, 234, 61, 103, 54, 234, 189, 251, 201, 45, 62, 1, 243, 97, 189, 72, 215, 8, 190, 119, 153, 118, 189, 205, 192, 160, 189, 2, 76, 245, 189, 181, 140, 151, 61, 133, 39, 138, 189, 133, 79, 155, 61, 106, 102, 134, 188, 217, 186, 226, 189, 96, 116, 179, 60, 220, 163, 218, 61, 241, 211, 0, 190, 181, 84, 30, 190, 209, 117, 183, 189, 248, 113, 47, 190, 5, 235, 203, 60, 197, 62, 59, 188, 182, 155, 204, 189, 6, 186, 207, 189, 99, 196, 219, 61, 240, 94, 2, 62, 143, 12, 30, 188, 255, 234, 28, 190, 165, 225, 223, 61, 99, 92, 32, 190, 71, 18, 60, 190, 36, 220, 38, 190, 158, 174, 73, 61, 20, 118, 229, 189, 210, 127, 159, 189, 56, 59, 182, 189, 199, 48, 13, 63, 236, 94, 164, 61, 183, 81, 144, 190, 22, 27, 47, 62, 251, 213, 175, 61, 14, 80, 106, 190, 110, 115, 208, 62, 29, 148, 118, 191, 203, 176, 105, 188, 231, 196, 154, 190, 231, 67, 53, 190, 165, 149, 155, 61, 193, 241, 141, 190, 150, 10, 12, 190, 214, 226, 176, 61, 210, 150, 73, 61, 75, 8, 195, 190, 207, 146, 179, 190, 82, 151, 124, 191, 45, 33, 184, 62, 177, 65, 13, 191, 199, 8, 140, 61, 124, 11, 196, 62, 52, 65, 215, 189, 82, 80, 250, 62, 182, 99, 91, 62, 32, 217, 122, 190, 186, 6, 162, 190, 234, 100, 62, 62, 200, 61, 126, 188, 181, 127, 34, 190, 53, 108, 62, 190, 144, 56, 77, 62, 20, 239, 118, 61, 198, 180, 7, 191, 170, 247, 37, 190, 113, 126, 177, 62, 6, 45, 165, 190, 107, 179, 190, 62, 190, 6, 57, 191, 198, 107, 197, 188, 8, 188, 136, 189, 124, 194, 25, 62, 156, 124, 205, 61, 70, 101, 172, 190, 43, 200, 79, 191, 100, 184, 144, 190, 234, 88, 137, 61, 146, 146, 230, 190, 226, 186, 165, 61, 198, 9, 159, 191, 144, 4, 32, 62, 37, 71, 148, 188, 80, 88, 134, 62, 99, 136, 170, 189, 165, 86, 170, 190, 32, 100, 8, 63, 17, 178, 197, 190, 194, 1, 62, 191, 191, 184, 94, 191, 163, 42, 53, 59, 104, 73, 0, 191, 153, 143, 69, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 245, 173, 62, 241, 81, 155, 189, 209, 179, 73, 62, 77, 128, 47, 190, 241, 129, 185, 62, 81, 4, 151, 62, 155, 2, 141, 62, 85, 133, 225, 61, 148, 18, 56, 62, 112, 48, 195, 61, 30, 232, 47, 190, 92, 193, 106, 62, 46, 109, 13, 189, 166, 108, 82, 189, 58, 196, 74, 189, 97, 9, 51, 62, 66, 130, 196, 189, 65, 127, 142, 61, 46, 236, 147, 62, 239, 216, 126, 61, 146, 232, 141, 188, 176, 246, 233, 190, 254, 38, 114, 62, 126, 23, 184, 61, 45, 12, 134, 190, 132, 35, 233, 189, 56, 231, 212, 187, 103, 183, 57, 190, 83, 90, 227, 58, 41, 173, 0, 189, 138, 98, 155, 62, 241, 52, 191, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 231, 35, 61, 246, 134, 26, 63, 53, 210, 3, 191, 185, 139, 214, 60, 12, 224, 66, 62, 33, 210, 218, 190, 5, 26, 1, 191, 156, 164, 24, 190, 151, 141, 30, 191, 113, 57, 242, 189, 24, 31, 146, 63, 142, 213, 92, 191, 62, 204, 237, 190, 98, 237, 248, 189, 2, 140, 216, 62, 168, 43, 165, 62, 171, 176, 68, 189, 16, 97, 15, 63, 129, 13, 129, 190, 89, 125, 120, 188, 181, 4, 233, 60, 82, 233, 22, 191, 249, 54, 185, 62, 96, 233, 89, 62, 91, 154, 88, 63, 104, 207, 58, 189, 29, 162, 215, 189, 202, 124, 5, 190, 178, 67, 13, 190, 222, 226, 183, 189, 245, 32, 49, 191, 181, 186, 164, 191, 32, 23, 38, 190, 236, 32, 161, 61, 142, 115, 73, 62, 3, 82, 41, 190, 231, 8, 180, 190, 5, 4, 54, 189, 3, 39, 154, 190, 176, 56, 138, 188, 140, 49, 222, 60, 249, 73, 239, 61, 192, 123, 188, 62, 226, 27, 129, 189, 235, 189, 208, 61, 36, 212, 200, 190, 139, 81, 113, 62, 193, 87, 124, 190, 108, 203, 224, 189, 130, 202, 73, 62, 102, 183, 39, 190, 15, 84, 39, 61, 192, 89, 225, 190, 33, 87, 210, 61, 200, 109, 43, 190, 18, 215, 21, 63, 202, 95, 70, 62, 76, 73, 203, 61, 69, 240, 24, 61, 235, 182, 20, 190, 185, 217, 30, 62, 83, 17, 200, 61, 174, 60, 174, 62, 202, 42, 199, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 48, 149, 61, 116, 72, 157, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {164, 107, 248, 191, 160, 18, 78, 63, 157, 218, 113, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {43, 74, 61, 64, 119, 85, 88, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0065/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}