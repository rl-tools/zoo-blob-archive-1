// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 153, 86, 62, 183, 183, 218, 62, 183, 112, 135, 190, 237, 77, 102, 189, 49, 143, 233, 190, 53, 92, 180, 62, 50, 87, 96, 62, 98, 80, 95, 190, 174, 48, 129, 190, 126, 6, 129, 190, 173, 164, 6, 61, 89, 10, 8, 63, 62, 222, 24, 60, 6, 15, 102, 190, 110, 20, 209, 189, 6, 143, 76, 190, 44, 51, 220, 62, 216, 166, 215, 189, 244, 240, 163, 62, 10, 104, 254, 190, 184, 206, 201, 190, 202, 231, 130, 190, 188, 156, 247, 190, 179, 124, 102, 190, 211, 44, 217, 190, 220, 129, 192, 61, 170, 70, 65, 62, 134, 34, 250, 62, 105, 117, 216, 189, 15, 46, 229, 190, 174, 237, 205, 62, 151, 67, 103, 62, 137, 241, 130, 62, 58, 191, 175, 62, 78, 42, 94, 62, 207, 69, 1, 190, 216, 57, 179, 62, 144, 167, 209, 61, 190, 74, 15, 61, 177, 142, 210, 190, 35, 17, 122, 62, 198, 176, 16, 63, 79, 146, 150, 190, 232, 131, 17, 191, 202, 252, 18, 63, 67, 62, 110, 190, 123, 26, 251, 190, 72, 50, 3, 191, 147, 77, 242, 61, 22, 252, 154, 61, 55, 93, 16, 63, 125, 59, 217, 62, 162, 1, 6, 191, 3, 93, 45, 190, 249, 89, 94, 190, 24, 246, 8, 63, 62, 105, 53, 62, 188, 237, 101, 190, 159, 236, 141, 190, 224, 42, 197, 62, 123, 139, 133, 190, 58, 212, 5, 191, 84, 128, 146, 189, 214, 216, 107, 61, 199, 196, 214, 61, 149, 255, 222, 62, 19, 91, 44, 62, 214, 11, 1, 190, 74, 43, 167, 190, 238, 84, 222, 62, 228, 207, 15, 191, 9, 237, 197, 62, 12, 199, 59, 61, 221, 139, 162, 62, 56, 138, 198, 189, 247, 41, 226, 62, 205, 204, 6, 63, 249, 103, 159, 62, 211, 131, 135, 62, 198, 157, 7, 63, 101, 69, 188, 190, 81, 76, 236, 62, 44, 229, 3, 191, 133, 61, 5, 190, 117, 170, 170, 62, 169, 174, 153, 190, 60, 115, 176, 61, 44, 129, 7, 191, 77, 151, 194, 190, 98, 223, 255, 61, 31, 254, 222, 190, 91, 143, 178, 190, 251, 55, 57, 190, 133, 203, 205, 62, 121, 52, 237, 62, 168, 135, 197, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 166, 19, 191, 108, 115, 199, 190, 93, 52, 197, 62, 145, 52, 203, 62, 239, 96, 113, 190, 173, 192, 127, 61, 79, 40, 205, 62, 51, 78, 80, 189, 56, 151, 82, 190, 165, 64, 150, 62, 79, 21, 103, 190, 33, 188, 19, 191, 202, 118, 19, 63, 196, 86, 100, 62, 201, 123, 230, 190, 244, 225, 116, 62, 221, 157, 225, 190, 135, 6, 120, 61, 234, 97, 123, 190, 182, 183, 233, 190, 73, 189, 32, 62, 184, 98, 103, 190, 152, 57, 9, 63, 57, 222, 196, 190, 165, 240, 178, 190, 135, 110, 51, 189, 100, 146, 209, 190, 216, 203, 133, 190, 162, 121, 242, 61, 184, 53, 83, 61, 114, 55, 18, 191, 168, 228, 161, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {28, 172, 37, 62, 75, 184, 111, 60, 37, 8, 40, 190, 83, 210, 24, 62, 236, 189, 41, 62, 45, 221, 81, 188, 31, 38, 2, 61, 216, 212, 46, 62, 65, 188, 171, 61, 47, 37, 184, 61, 218, 2, 223, 61, 104, 228, 33, 62, 179, 99, 32, 190, 42, 231, 148, 61, 182, 75, 201, 61, 9, 36, 16, 62, 184, 69, 45, 62, 248, 150, 74, 189, 241, 229, 156, 189, 246, 60, 75, 61, 58, 215, 186, 189, 50, 125, 54, 61, 223, 35, 196, 188, 15, 194, 131, 189, 144, 211, 228, 189, 223, 128, 27, 190, 167, 255, 55, 60, 195, 100, 70, 189, 232, 197, 46, 62, 40, 240, 42, 190, 204, 255, 51, 190, 232, 71, 78, 189, 221, 0, 141, 61, 12, 146, 247, 188, 73, 244, 6, 62, 88, 39, 114, 59, 87, 70, 254, 189, 133, 90, 55, 189, 252, 175, 69, 60, 50, 209, 23, 190, 58, 115, 101, 61, 64, 186, 136, 188, 194, 205, 22, 190, 239, 130, 148, 61, 84, 183, 137, 61, 189, 85, 12, 190, 209, 27, 146, 61, 150, 12, 23, 62, 161, 52, 136, 61, 213, 208, 34, 190, 146, 47, 28, 190, 14, 189, 254, 61, 249, 204, 30, 189, 180, 224, 91, 187, 54, 228, 49, 190, 11, 152, 212, 189, 67, 171, 255, 61, 8, 251, 48, 62, 171, 16, 64, 59, 211, 89, 229, 61, 164, 157, 15, 190, 83, 211, 26, 189, 196, 114, 54, 61, 91, 50, 38, 62, 110, 69, 61, 59, 42, 42, 210, 61, 98, 206, 188, 61, 203, 127, 51, 62, 113, 169, 202, 188, 191, 231, 29, 188, 244, 137, 95, 189, 50, 68, 252, 189, 92, 230, 49, 62, 98, 244, 228, 189, 70, 172, 18, 190, 162, 52, 45, 188, 251, 227, 35, 62, 23, 131, 236, 61, 32, 39, 124, 189, 89, 26, 30, 190, 249, 215, 255, 61, 50, 157, 37, 190, 76, 195, 243, 189, 21, 57, 58, 189, 114, 196, 193, 189, 160, 165, 251, 61, 214, 51, 62, 61, 1, 24, 36, 62, 6, 181, 173, 189, 166, 64, 254, 187, 247, 4, 88, 61, 189, 173, 229, 60, 142, 202, 142, 189, 16, 238, 21, 190, 156, 91, 166, 189, 26, 212, 28, 190, 94, 128, 238, 189, 70, 118, 72, 186, 147, 176, 254, 189, 215, 171, 174, 61, 72, 7, 17, 62, 250, 186, 226, 189, 76, 107, 161, 61, 101, 81, 146, 189, 129, 10, 199, 189, 185, 226, 180, 188, 215, 251, 244, 61, 9, 67, 41, 62, 99, 59, 232, 189, 104, 24, 45, 190, 123, 72, 1, 62, 128, 15, 189, 189, 185, 168, 16, 190, 245, 160, 38, 62, 132, 233, 31, 62, 133, 24, 3, 190, 54, 133, 34, 61, 32, 179, 129, 61, 18, 205, 38, 190, 26, 4, 32, 190, 100, 23, 38, 190, 22, 136, 51, 190, 210, 57, 29, 190, 210, 15, 202, 60, 140, 221, 36, 190, 200, 0, 23, 62, 4, 243, 136, 60, 14, 137, 214, 189, 240, 254, 140, 61, 158, 25, 188, 189, 52, 132, 24, 189, 20, 49, 219, 188, 197, 219, 149, 60, 160, 168, 11, 190, 160, 244, 18, 190, 117, 52, 89, 189, 152, 21, 107, 61, 43, 6, 248, 61, 32, 248, 91, 60, 20, 200, 166, 61, 144, 45, 194, 61, 221, 157, 132, 61, 105, 89, 178, 61, 216, 66, 164, 189, 167, 59, 170, 61, 188, 108, 10, 62, 181, 23, 49, 61, 167, 144, 218, 61, 242, 192, 178, 61, 204, 62, 104, 61, 35, 124, 14, 62, 52, 18, 14, 190, 156, 30, 16, 190, 117, 214, 50, 190, 125, 30, 161, 189, 24, 92, 113, 61, 72, 33, 124, 61, 233, 58, 120, 61, 229, 245, 1, 189, 247, 112, 214, 189, 100, 207, 238, 188, 20, 168, 150, 61, 88, 238, 218, 187, 39, 175, 13, 62, 254, 5, 30, 62, 28, 228, 130, 188, 151, 166, 35, 62, 10, 133, 140, 61, 85, 166, 225, 189, 158, 214, 221, 61, 95, 250, 162, 61, 0, 21, 205, 187, 232, 175, 46, 62, 213, 198, 38, 190, 153, 34, 225, 189, 61, 160, 181, 61, 230, 170, 118, 189, 190, 74, 162, 61, 187, 106, 168, 60, 105, 124, 222, 61, 118, 204, 186, 61, 72, 185, 20, 189, 94, 235, 170, 188, 143, 50, 120, 61, 8, 161, 41, 190, 192, 11, 199, 61, 110, 52, 126, 61, 70, 220, 181, 61, 49, 60, 198, 61, 164, 15, 1, 62, 191, 95, 28, 62, 15, 23, 11, 62, 100, 181, 228, 61, 230, 234, 221, 189, 9, 127, 185, 188, 180, 190, 22, 190, 96, 115, 188, 188, 90, 254, 30, 62, 176, 170, 30, 187, 83, 144, 3, 189, 212, 68, 12, 61, 136, 16, 193, 188, 247, 75, 242, 189, 199, 130, 12, 189, 61, 113, 187, 61, 17, 245, 106, 189, 101, 161, 62, 61, 234, 251, 23, 62, 219, 26, 21, 190, 50, 179, 204, 60, 132, 226, 83, 189, 98, 23, 8, 189, 222, 163, 34, 190, 22, 152, 200, 189, 130, 62, 33, 189, 217, 96, 5, 190, 248, 113, 88, 61, 135, 246, 242, 59, 74, 246, 42, 62, 72, 126, 13, 190, 47, 58, 26, 62, 8, 10, 198, 189, 59, 254, 138, 61, 40, 25, 183, 61, 51, 92, 166, 61, 195, 55, 48, 62, 188, 152, 17, 190, 119, 155, 183, 188, 208, 184, 36, 190, 9, 196, 225, 60, 126, 183, 11, 61, 32, 181, 43, 190, 188, 30, 156, 189, 224, 136, 146, 61, 32, 64, 221, 61, 247, 50, 24, 190, 155, 51, 27, 62, 202, 11, 118, 188, 5, 120, 30, 61, 70, 209, 101, 61, 233, 201, 156, 61, 52, 91, 230, 61, 69, 96, 174, 188, 154, 114, 35, 61, 74, 92, 170, 188, 175, 46, 22, 62, 120, 66, 151, 188, 226, 152, 184, 61, 214, 102, 146, 189, 91, 191, 158, 189, 123, 30, 156, 61, 223, 68, 163, 189, 126, 175, 190, 61, 174, 180, 42, 61, 251, 128, 128, 61, 90, 179, 158, 189, 93, 230, 235, 188, 67, 245, 10, 61, 122, 12, 203, 189, 88, 161, 254, 188, 108, 206, 18, 62, 99, 241, 160, 61, 206, 254, 184, 189, 232, 43, 99, 188, 217, 33, 56, 189, 215, 222, 101, 186, 245, 41, 228, 61, 135, 148, 149, 60, 220, 150, 172, 185, 160, 135, 254, 61, 17, 88, 133, 60, 24, 86, 157, 189, 21, 30, 39, 188, 145, 87, 41, 61, 101, 224, 253, 61, 250, 231, 40, 189, 97, 91, 211, 189, 136, 229, 188, 60, 11, 232, 86, 61, 88, 117, 106, 61, 217, 35, 226, 60, 203, 88, 194, 61, 50, 211, 21, 61, 57, 9, 104, 189, 219, 59, 75, 60, 83, 0, 237, 189, 88, 226, 130, 189, 98, 142, 55, 188, 247, 191, 6, 62, 84, 175, 44, 190, 71, 47, 21, 62, 67, 202, 4, 190, 43, 102, 37, 62, 36, 114, 1, 62, 203, 107, 212, 61, 225, 103, 4, 190, 189, 188, 215, 61, 135, 106, 13, 190, 186, 225, 73, 59, 199, 96, 30, 62, 81, 115, 23, 62, 71, 127, 132, 189, 9, 24, 43, 190, 192, 108, 196, 61, 90, 60, 243, 61, 234, 18, 26, 189, 88, 250, 90, 189, 210, 20, 22, 190, 169, 49, 187, 189, 120, 189, 213, 188, 255, 155, 226, 189, 193, 2, 59, 60, 82, 246, 15, 190, 219, 112, 136, 189, 112, 148, 128, 187, 181, 170, 40, 62, 243, 58, 165, 60, 100, 42, 134, 189, 128, 87, 144, 189, 10, 166, 18, 190, 80, 201, 50, 190, 175, 101, 105, 61, 160, 21, 172, 189, 29, 92, 1, 190, 182, 175, 216, 189, 5, 134, 2, 62, 185, 72, 233, 61, 20, 91, 18, 189, 148, 57, 25, 62, 237, 62, 140, 61, 55, 192, 239, 61, 209, 110, 112, 58, 82, 177, 16, 190, 163, 5, 15, 189, 139, 134, 37, 61, 165, 40, 167, 60, 80, 201, 9, 59, 2, 12, 158, 188, 63, 49, 61, 189, 63, 214, 195, 61, 211, 186, 224, 189, 84, 35, 246, 189, 35, 165, 187, 189, 100, 16, 37, 62, 110, 108, 142, 189, 48, 253, 45, 61, 78, 209, 204, 61, 95, 114, 83, 61, 36, 115, 109, 59, 114, 232, 171, 61, 200, 93, 189, 61, 181, 243, 51, 62, 133, 141, 95, 189, 181, 96, 49, 62, 54, 197, 33, 62, 79, 111, 16, 189, 248, 95, 204, 189, 132, 82, 60, 61, 124, 83, 5, 190, 215, 146, 26, 190, 187, 32, 142, 61, 157, 237, 193, 59, 39, 237, 243, 61, 89, 42, 221, 188, 46, 67, 17, 190, 176, 91, 35, 62, 120, 224, 12, 190, 8, 236, 126, 60, 15, 213, 0, 190, 121, 182, 138, 61, 225, 166, 183, 189, 151, 18, 81, 61, 168, 14, 37, 62, 145, 10, 49, 62, 178, 124, 124, 189, 64, 144, 228, 189, 28, 10, 236, 189, 201, 217, 79, 61, 17, 178, 198, 61, 170, 227, 125, 60, 13, 14, 255, 189, 52, 196, 169, 189, 152, 78, 34, 62, 209, 7, 135, 189, 124, 124, 13, 187, 123, 74, 6, 62, 56, 162, 157, 61, 44, 197, 198, 188, 67, 183, 32, 190, 252, 33, 152, 60, 9, 211, 136, 189, 255, 246, 249, 60, 98, 25, 45, 190, 81, 119, 130, 61, 215, 233, 236, 61, 51, 209, 77, 61, 17, 9, 236, 189, 185, 139, 172, 61, 239, 172, 189, 60, 109, 231, 239, 189, 224, 23, 32, 62, 8, 252, 126, 60, 202, 71, 125, 189, 20, 156, 44, 62, 132, 127, 12, 61, 47, 246, 18, 190, 25, 176, 28, 190, 82, 122, 128, 60, 128, 2, 37, 190, 247, 7, 206, 189, 203, 52, 227, 189, 31, 222, 128, 61, 40, 154, 163, 61, 7, 19, 42, 62, 217, 234, 15, 62, 63, 102, 27, 61, 242, 91, 135, 59, 62, 158, 5, 62, 57, 86, 189, 187, 66, 189, 234, 61, 84, 210, 233, 189, 5, 234, 7, 190, 119, 240, 26, 62, 155, 56, 158, 189, 169, 216, 28, 62, 115, 44, 225, 61, 218, 142, 1, 190, 222, 221, 52, 190, 89, 85, 21, 190, 55, 183, 39, 62, 203, 70, 14, 189, 126, 70, 169, 189, 2, 125, 94, 189, 108, 106, 97, 189, 121, 99, 61, 189, 237, 225, 27, 187, 144, 171, 206, 188, 245, 188, 207, 189, 153, 248, 184, 60, 134, 194, 5, 62, 228, 89, 30, 190, 30, 143, 117, 189, 166, 114, 1, 61, 2, 244, 250, 61, 175, 89, 25, 60, 217, 215, 176, 188, 188, 136, 147, 189, 41, 154, 51, 62, 169, 73, 29, 62, 114, 185, 142, 189, 240, 9, 71, 61, 233, 112, 241, 58, 155, 0, 29, 190, 52, 50, 33, 62, 241, 180, 175, 61, 150, 106, 30, 62, 4, 49, 142, 61, 167, 76, 50, 62, 153, 64, 169, 61, 151, 2, 10, 190, 152, 227, 54, 61, 93, 33, 26, 190, 243, 161, 163, 189, 70, 10, 127, 189, 63, 121, 156, 60, 244, 170, 213, 57, 39, 58, 7, 62, 148, 253, 231, 189, 81, 28, 55, 61, 232, 232, 82, 61, 69, 49, 161, 189, 246, 224, 39, 62, 130, 241, 42, 62, 245, 107, 186, 189, 199, 45, 86, 189, 205, 113, 204, 61, 224, 70, 48, 62, 178, 1, 245, 61, 13, 113, 82, 186, 190, 54, 106, 189, 28, 168, 199, 60, 23, 26, 21, 190, 246, 171, 151, 61, 213, 202, 36, 190, 83, 253, 136, 189, 194, 157, 182, 61, 254, 100, 132, 189, 134, 20, 1, 189, 46, 88, 229, 188, 87, 117, 69, 61, 93, 179, 243, 189, 212, 213, 228, 61, 46, 35, 4, 190, 21, 184, 176, 189, 87, 253, 190, 60, 195, 181, 212, 61, 10, 71, 247, 61, 144, 10, 211, 189, 172, 65, 14, 62, 54, 163, 19, 59, 145, 197, 3, 61, 228, 107, 229, 61, 209, 181, 174, 61, 172, 2, 221, 61, 164, 120, 63, 59, 233, 86, 36, 189, 206, 105, 211, 189, 209, 184, 175, 189, 165, 187, 152, 61, 65, 60, 129, 61, 159, 217, 172, 189, 211, 12, 58, 189, 109, 99, 246, 187, 78, 12, 32, 190, 234, 227, 155, 60, 225, 11, 11, 190, 56, 220, 215, 59, 166, 90, 94, 61, 186, 102, 17, 190, 12, 13, 221, 58, 175, 135, 119, 61, 220, 97, 155, 189, 18, 41, 237, 61, 61, 202, 52, 189, 130, 78, 154, 189, 107, 179, 212, 61, 216, 72, 59, 61, 106, 81, 21, 190, 40, 49, 128, 61, 130, 148, 37, 190, 81, 162, 172, 61, 64, 151, 37, 61, 144, 44, 134, 189, 24, 104, 15, 190, 46, 149, 15, 190, 189, 189, 26, 62, 184, 229, 22, 190, 63, 170, 74, 189, 128, 38, 3, 189, 58, 131, 25, 189, 195, 97, 3, 62, 174, 149, 117, 61, 78, 171, 150, 61, 137, 210, 197, 61, 230, 157, 25, 189, 239, 141, 94, 61, 196, 50, 221, 188, 177, 161, 19, 62, 160, 128, 40, 190, 208, 39, 26, 190, 75, 16, 15, 190, 111, 224, 43, 190, 183, 39, 201, 188, 17, 53, 205, 189, 176, 134, 138, 189, 91, 252, 21, 190, 65, 21, 129, 61, 77, 133, 162, 61, 47, 186, 4, 62, 186, 40, 7, 190, 123, 228, 45, 62, 216, 84, 253, 189, 121, 135, 166, 189, 120, 173, 20, 190, 204, 27, 7, 189, 79, 200, 125, 188, 101, 116, 244, 189, 27, 187, 134, 189, 194, 36, 232, 189, 113, 66, 26, 190, 244, 63, 162, 189, 42, 142, 229, 188, 128, 160, 251, 188, 82, 105, 113, 189, 77, 19, 164, 61, 135, 93, 36, 62, 131, 58, 9, 190, 44, 222, 19, 62, 152, 101, 52, 190, 57, 232, 15, 62, 164, 52, 5, 190, 220, 233, 111, 61, 132, 22, 13, 62, 228, 222, 175, 189, 88, 184, 174, 189, 60, 137, 40, 62, 36, 100, 152, 187, 151, 204, 224, 188, 222, 143, 48, 190, 22, 200, 25, 62, 4, 228, 83, 60, 169, 155, 151, 189, 199, 205, 192, 188, 83, 255, 128, 61, 120, 91, 171, 61, 73, 52, 45, 62, 194, 226, 218, 189, 57, 237, 223, 61, 75, 208, 218, 189, 102, 42, 195, 187, 18, 150, 62, 189, 95, 236, 7, 61, 48, 1, 53, 62, 177, 231, 131, 189, 181, 200, 196, 61, 18, 142, 236, 189, 235, 72, 129, 61, 98, 94, 3, 189, 21, 122, 144, 188, 219, 127, 11, 190, 105, 58, 146, 187, 125, 60, 70, 189, 220, 81, 223, 61, 94, 235, 12, 190, 137, 155, 195, 60, 111, 248, 3, 61, 79, 78, 8, 190, 255, 66, 175, 61, 128, 216, 25, 61, 87, 239, 51, 190, 236, 86, 101, 189, 138, 251, 238, 61, 202, 50, 118, 61, 127, 255, 238, 61, 107, 144, 42, 190, 97, 57, 69, 189, 56, 59, 160, 60, 197, 198, 139, 189, 71, 196, 29, 190, 39, 20, 95, 188, 199, 108, 182, 189, 86, 12, 8, 190, 94, 195, 148, 61, 241, 232, 58, 60, 159, 65, 224, 61, 3, 219, 253, 61, 251, 228, 14, 62, 108, 133, 9, 190, 5, 36, 126, 189, 216, 106, 50, 62, 212, 191, 47, 62, 22, 200, 89, 189, 35, 241, 41, 62, 159, 24, 182, 61, 233, 97, 184, 189, 144, 4, 135, 61, 226, 63, 227, 187, 195, 236, 233, 61, 161, 176, 164, 189, 43, 150, 203, 61, 174, 183, 26, 190, 18, 88, 47, 190, 123, 251, 67, 188, 181, 225, 4, 62, 1, 97, 148, 189, 71, 53, 36, 189, 105, 161, 168, 61, 42, 52, 134, 61, 65, 118, 246, 60, 101, 164, 140, 61, 206, 155, 41, 190, 206, 29, 161, 61, 34, 222, 165, 189, 18, 110, 163, 188, 40, 82, 5, 190, 162, 249, 134, 189, 48, 127, 108, 59, 53, 64, 36, 190, 215, 160, 148, 188, 126, 21, 44, 190, 164, 255, 223, 61, 75, 12, 5, 62, 92, 154, 158, 61, 113, 201, 27, 62, 185, 64, 57, 61, 115, 85, 70, 59, 122, 137, 68, 189, 108, 51, 44, 60, 24, 25, 5, 190, 250, 72, 105, 61, 167, 198, 38, 62, 225, 31, 201, 61, 199, 87, 25, 62, 34, 134, 238, 189, 132, 15, 44, 62, 216, 65, 14, 190, 0, 77, 88, 188, 103, 224, 21, 62, 156, 236, 178, 189, 239, 146, 45, 189, 151, 106, 40, 190, 86, 151, 27, 190, 176, 169, 115, 188, 13, 182, 12, 60, 47, 48, 193, 61, 56, 136, 151, 61, 225, 248, 219, 61, 122, 9, 5, 189, 155, 208, 1, 186, 91, 56, 38, 62, 17, 116, 43, 62, 252, 122, 23, 62, 109, 167, 150, 61, 197, 235, 224, 188, 186, 172, 254, 61, 25, 76, 20, 62, 228, 180, 29, 62, 55, 238, 179, 61, 215, 212, 44, 62, 82, 57, 13, 62, 86, 253, 195, 60, 150, 10, 223, 61, 186, 165, 87, 61, 109, 229, 172, 189, 59, 232, 143, 189, 69, 56, 229, 189, 82, 49, 31, 62, 50, 56, 170, 61, 240, 155, 198, 60, 73, 168, 49, 190, 157, 125, 26, 190, 60, 153, 132, 60, 234, 49, 37, 62, 33, 20, 43, 189, 130, 37, 51, 62, 207, 33, 32, 190, 253, 197, 95, 61, 89, 115, 202, 60, 161, 209, 143, 189, 210, 99, 193, 189, 122, 126, 29, 61, 171, 43, 96, 189, 211, 174, 231, 61, 211, 87, 193, 189, 237, 60, 142, 61, 35, 208, 26, 190, 183, 15, 34, 190, 87, 223, 20, 190, 194, 18, 70, 189, 16, 38, 145, 61, 57, 58, 66, 61, 239, 129, 111, 61, 250, 71, 233, 189, 158, 71, 116, 61, 147, 57, 183, 60, 126, 24, 171, 61, 105, 255, 18, 62, 22, 254, 25, 61, 253, 231, 149, 61, 138, 194, 29, 190, 118, 118, 200, 61, 179, 35, 183, 60, 154, 197, 187, 189, 197, 124, 48, 190, 1, 13, 34, 189, 165, 151, 195, 61, 16, 68, 155, 59, 131, 231, 179, 61, 170, 247, 61, 189, 140, 240, 198, 61, 37, 176, 210, 189, 190, 11, 20, 190, 51, 123, 169, 61, 200, 155, 194, 188, 101, 227, 212, 189, 61, 127, 45, 190, 11, 35, 210, 189, 156, 87, 11, 62, 222, 193, 194, 189, 93, 234, 5, 62, 36, 201, 153, 189, 17, 235, 11, 62, 254, 114, 36, 62, 166, 255, 188, 61, 171, 93, 91, 188, 183, 166, 45, 190, 36, 124, 34, 190, 34, 129, 211, 188, 64, 239, 245, 189, 252, 155, 39, 62, 162, 28, 79, 188, 64, 237, 216, 60, 201, 32, 141, 189, 71, 233, 137, 61, 163, 57, 77, 61, 221, 193, 142, 189, 77, 114, 7, 62, 152, 87, 72, 189, 23, 20, 63, 189, 196, 200, 9, 62, 142, 163, 12, 62, 235, 8, 2, 189, 214, 114, 102, 189, 187, 37, 38, 62, 118, 7, 12, 61, 28, 16, 91, 61, 122, 107, 17, 62, 46, 144, 79, 189, 181, 53, 179, 60, 96, 10, 183, 188, 97, 29, 204, 61, 218, 152, 115, 189, 235, 149, 74, 189, 206, 116, 116, 189, 191, 108, 33, 189, 74, 59, 40, 190, 119, 162, 85, 61, 41, 160, 17, 62, 165, 142, 20, 62, 186, 244, 51, 190, 86, 196, 67, 189, 43, 36, 62, 188, 39, 118, 227, 61, 246, 34, 182, 189, 65, 175, 229, 61, 222, 143, 252, 61, 30, 219, 5, 62, 248, 247, 3, 60, 182, 16, 16, 189, 14, 138, 21, 59, 19, 65, 42, 62, 122, 230, 182, 189, 24, 145, 20, 190, 160, 73, 152, 60, 10, 73, 210, 189, 68, 120, 174, 188, 132, 17, 28, 190, 205, 125, 143, 189, 196, 163, 241, 61, 147, 146, 94, 189, 190, 118, 65, 189, 212, 204, 219, 189, 85, 188, 173, 189, 77, 154, 228, 61, 59, 28, 172, 61, 205, 11, 124, 188, 92, 168, 216, 189, 28, 92, 30, 60, 114, 87, 43, 62, 152, 21, 165, 61, 165, 190, 55, 189, 77, 61, 51, 62, 96, 72, 56, 189, 61, 179, 181, 61, 74, 205, 33, 190, 166, 100, 4, 190, 53, 97, 40, 189, 176, 159, 131, 189, 248, 159, 144, 189, 100, 92, 10, 60, 227, 25, 34, 62, 174, 206, 184, 61, 249, 189, 234, 189, 238, 88, 187, 61, 100, 128, 4, 190, 22, 47, 85, 189, 42, 243, 119, 189, 219, 27, 248, 61, 27, 83, 219, 58, 11, 190, 36, 190, 171, 79, 60, 61, 228, 14, 52, 190, 18, 57, 46, 61, 89, 78, 84, 186, 253, 73, 19, 62, 206, 8, 6, 190, 176, 20, 223, 189, 204, 250, 186, 188, 204, 82, 15, 188, 249, 31, 95, 61, 97, 243, 36, 190, 207, 147, 37, 62, 40, 45, 4, 190, 178, 204, 154, 188, 13, 177, 207, 189, 56, 34, 80, 61, 236, 181, 31, 190, 53, 20, 204, 189, 32, 43, 233, 184, 132, 184, 206, 189, 132, 251, 232, 189, 59, 247, 18, 61, 160, 24, 249, 189, 0, 96, 221, 60, 14, 96, 10, 190, 172, 75, 128, 61, 205, 222, 152, 188, 172, 148, 4, 189, 46, 139, 212, 61, 47, 57, 46, 62, 46, 182, 101, 59, 200, 49, 8, 190, 247, 90, 22, 62, 193, 120, 245, 187, 64, 130, 34, 189, 220, 244, 130, 188, 202, 153, 90, 189, 85, 21, 89, 188, 180, 141, 79, 61, 113, 10, 124, 189, 130, 128, 69, 189, 69, 49, 117, 189, 176, 97, 249, 61, 226, 148, 35, 190, 251, 5, 195, 59, 244, 41, 216, 188, 149, 185, 8, 190, 190, 19, 153, 189, 78, 140, 112, 189, 53, 29, 178, 61, 21, 133, 227, 61, 73, 79, 19, 61, 121, 24, 255, 189, 12, 217, 129, 189, 44, 110, 3, 60, 176, 38, 245, 61, 118, 39, 255, 61, 222, 58, 39, 190, 111, 93, 255, 189, 23, 81, 28, 190, 118, 166, 197, 61, 76, 20, 159, 189, 97, 253, 47, 190, 159, 165, 130, 187, 175, 29, 41, 62, 206, 63, 7, 189, 47, 126, 234, 61, 141, 112, 118, 188, 251, 201, 45, 62, 1, 243, 97, 189, 116, 152, 233, 189, 83, 25, 57, 189, 205, 192, 160, 189, 2, 76, 245, 189, 106, 37, 191, 61, 133, 39, 138, 189, 133, 79, 155, 61, 191, 90, 96, 59, 231, 197, 189, 189, 96, 116, 179, 60, 210, 143, 1, 62, 114, 120, 234, 189, 181, 84, 30, 190, 162, 237, 165, 189, 36, 23, 39, 190, 112, 46, 55, 61, 197, 62, 59, 188, 182, 155, 204, 189, 6, 186, 207, 189, 73, 9, 239, 61, 244, 206, 22, 62, 161, 171, 130, 59, 255, 234, 28, 190, 142, 160, 3, 62, 99, 92, 32, 190, 74, 170, 41, 190, 50, 116, 18, 190, 158, 174, 73, 61, 20, 118, 229, 189, 118, 161, 110, 189, 202, 3, 217, 60, 129, 61, 228, 61, 236, 154, 127, 189, 71, 203, 51, 62, 150, 35, 10, 190, 146, 150, 78, 61, 89, 15, 9, 190, 145, 251, 170, 61, 131, 64, 157, 189, 78, 247, 207, 188, 154, 221, 139, 61, 18, 191, 50, 190, 32, 38, 209, 59, 209, 80, 23, 62, 19, 199, 30, 190, 219, 207, 51, 60, 61, 42, 206, 189, 41, 132, 24, 190, 73, 232, 213, 189, 54, 31, 66, 189, 187, 179, 170, 60, 93, 139, 28, 190, 191, 61, 213, 189, 46, 15, 238, 61, 78, 204, 188, 189, 79, 29, 222, 189, 155, 59, 4, 62, 116, 46, 236, 189, 49, 176, 91, 189, 39, 236, 246, 61, 22, 89, 41, 62, 26, 127, 232, 189, 20, 86, 29, 62, 219, 4, 157, 60, 138, 116, 112, 61, 252, 44, 234, 189, 137, 126, 18, 62, 118, 41, 191, 189, 179, 248, 127, 189, 87, 69, 177, 61, 57, 214, 186, 189, 106, 86, 157, 61, 114, 139, 166, 60, 94, 89, 32, 62, 141, 92, 230, 188, 143, 253, 169, 61, 94, 6, 179, 189, 115, 245, 36, 190, 168, 82, 237, 60, 185, 89, 106, 61, 54, 227, 123, 189, 161, 129, 1, 190, 75, 57, 20, 189, 105, 173, 185, 189, 87, 225, 58, 61, 141, 225, 22, 189, 217, 77, 11, 189, 201, 57, 191, 61, 228, 29, 248, 189, 75, 243, 136, 189, 243, 33, 106, 61, 93, 80, 215, 61, 171, 43, 157, 189, 212, 191, 131, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 251, 30, 62, 126, 191, 160, 188, 234, 160, 11, 62, 77, 128, 47, 190, 181, 21, 209, 61, 181, 74, 43, 62, 203, 23, 75, 59, 106, 7, 246, 58, 34, 48, 220, 61, 105, 66, 24, 62, 74, 1, 18, 61, 246, 14, 143, 188, 88, 186, 199, 189, 172, 109, 40, 190, 227, 58, 209, 189, 12, 191, 173, 189, 69, 245, 188, 189, 27, 9, 162, 189, 111, 40, 5, 62, 117, 126, 2, 62, 161, 42, 211, 189, 32, 133, 46, 190, 191, 187, 140, 189, 181, 29, 234, 60, 43, 16, 207, 189, 147, 161, 112, 189, 149, 160, 248, 60, 111, 250, 52, 190, 25, 90, 209, 60, 101, 92, 60, 188, 212, 153, 52, 62, 117, 110, 10, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 166, 72, 60, 156, 75, 132, 61, 61, 72, 153, 189, 185, 139, 214, 60, 91, 250, 131, 187, 95, 235, 39, 190, 191, 44, 2, 190, 155, 207, 63, 189, 177, 88, 46, 189, 127, 253, 27, 190, 7, 71, 28, 62, 70, 171, 13, 189, 172, 182, 132, 189, 132, 114, 51, 190, 158, 206, 44, 62, 95, 119, 189, 61, 136, 230, 131, 189, 27, 132, 8, 62, 17, 221, 47, 190, 206, 226, 91, 189, 218, 147, 135, 60, 76, 163, 185, 189, 235, 35, 133, 60, 62, 209, 16, 190, 178, 102, 34, 61, 145, 135, 147, 189, 16, 85, 16, 190, 200, 131, 5, 190, 30, 21, 134, 189, 205, 153, 195, 189, 94, 38, 151, 189, 87, 70, 28, 190, 254, 207, 131, 189, 240, 81, 24, 62, 50, 220, 135, 61, 3, 82, 41, 190, 29, 107, 15, 190, 120, 100, 161, 60, 237, 228, 36, 190, 211, 243, 226, 60, 186, 19, 203, 187, 19, 136, 13, 62, 113, 197, 252, 61, 178, 222, 164, 61, 187, 61, 23, 189, 136, 49, 199, 189, 227, 119, 16, 62, 116, 144, 228, 189, 81, 91, 249, 189, 197, 48, 44, 60, 53, 32, 16, 190, 65, 106, 156, 61, 206, 157, 0, 190, 197, 27, 153, 61, 33, 71, 26, 189, 194, 75, 46, 62, 120, 181, 8, 62, 153, 143, 40, 62, 72, 66, 76, 61, 22, 183, 20, 190, 96, 197, 107, 61, 73, 163, 225, 61, 191, 55, 23, 62, 36, 133, 180, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 44, 37, 189, 59, 253, 160, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {201, 51, 254, 63, 75, 92, 17, 191, 41, 186, 81, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {110, 154, 163, 190, 248, 201, 146, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0065/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}