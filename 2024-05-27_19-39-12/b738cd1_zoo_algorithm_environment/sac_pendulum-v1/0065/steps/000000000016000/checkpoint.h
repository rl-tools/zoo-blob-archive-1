// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 212, 21, 191, 174, 106, 77, 63, 27, 119, 75, 190, 126, 87, 9, 62, 196, 240, 46, 191, 205, 77, 216, 62, 76, 138, 15, 63, 131, 143, 65, 191, 252, 192, 0, 190, 114, 65, 165, 189, 203, 76, 168, 63, 109, 234, 186, 62, 205, 199, 1, 63, 174, 144, 103, 190, 232, 146, 93, 189, 192, 160, 214, 190, 142, 126, 162, 62, 195, 5, 184, 190, 177, 148, 30, 63, 72, 195, 163, 191, 245, 124, 53, 190, 170, 93, 179, 190, 71, 178, 159, 191, 1, 57, 69, 190, 105, 224, 247, 190, 84, 251, 134, 63, 110, 233, 198, 62, 109, 53, 68, 63, 170, 62, 128, 190, 36, 107, 189, 190, 196, 28, 165, 62, 97, 129, 106, 63, 204, 123, 146, 62, 78, 194, 143, 62, 5, 235, 52, 62, 8, 32, 6, 189, 78, 101, 136, 190, 74, 81, 62, 62, 230, 131, 237, 59, 249, 92, 121, 191, 235, 55, 143, 62, 203, 168, 128, 62, 59, 26, 75, 191, 255, 144, 188, 189, 190, 208, 71, 63, 164, 197, 241, 62, 201, 248, 144, 191, 38, 78, 161, 190, 209, 50, 19, 63, 178, 105, 19, 190, 187, 42, 2, 63, 136, 202, 233, 62, 182, 26, 130, 191, 135, 142, 223, 189, 59, 7, 38, 191, 135, 244, 37, 63, 248, 35, 40, 189, 52, 55, 21, 191, 142, 214, 133, 63, 100, 210, 24, 63, 195, 138, 164, 190, 226, 118, 147, 191, 115, 10, 254, 189, 19, 217, 222, 62, 24, 117, 229, 62, 16, 51, 238, 62, 245, 127, 158, 61, 4, 189, 188, 190, 5, 197, 177, 190, 44, 55, 209, 62, 106, 154, 55, 191, 32, 15, 40, 63, 51, 183, 51, 190, 75, 99, 39, 63, 41, 91, 48, 190, 155, 224, 3, 63, 225, 32, 206, 63, 206, 174, 170, 62, 208, 155, 3, 63, 54, 67, 82, 63, 57, 47, 171, 190, 189, 72, 60, 63, 90, 183, 41, 191, 65, 15, 140, 190, 62, 100, 164, 62, 148, 220, 161, 190, 4, 254, 4, 63, 136, 170, 79, 191, 145, 139, 54, 190, 10, 100, 161, 62, 63, 63, 202, 62, 245, 130, 167, 190, 180, 96, 100, 189, 237, 74, 73, 63, 29, 110, 141, 63, 151, 8, 136, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 244, 182, 190, 166, 209, 19, 191, 43, 177, 87, 62, 108, 75, 72, 62, 49, 150, 21, 191, 96, 162, 70, 62, 155, 212, 77, 61, 136, 248, 172, 62, 223, 183, 121, 190, 72, 102, 238, 60, 209, 116, 106, 190, 111, 224, 40, 191, 235, 136, 55, 63, 148, 183, 18, 63, 192, 208, 72, 190, 237, 217, 102, 190, 145, 39, 128, 191, 21, 183, 254, 60, 18, 218, 104, 62, 244, 237, 71, 189, 65, 57, 223, 62, 183, 36, 157, 190, 58, 23, 42, 63, 22, 129, 142, 190, 70, 225, 23, 190, 59, 211, 247, 59, 181, 68, 246, 190, 195, 126, 223, 190, 222, 184, 81, 62, 214, 224, 255, 188, 156, 49, 107, 191, 195, 86, 105, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 174, 45, 62, 37, 134, 95, 189, 207, 181, 128, 189, 242, 69, 188, 61, 13, 32, 7, 191, 41, 90, 208, 188, 78, 194, 159, 61, 7, 69, 1, 62, 46, 8, 176, 60, 96, 161, 16, 62, 213, 36, 255, 189, 202, 99, 9, 62, 96, 150, 105, 187, 178, 109, 172, 61, 217, 208, 237, 61, 108, 124, 224, 61, 136, 133, 152, 61, 129, 205, 14, 60, 21, 91, 137, 190, 251, 215, 147, 59, 94, 13, 195, 188, 95, 166, 176, 189, 147, 133, 48, 189, 105, 98, 59, 190, 209, 55, 13, 190, 46, 46, 211, 190, 13, 131, 175, 61, 96, 29, 135, 60, 49, 70, 145, 62, 72, 144, 20, 190, 103, 162, 134, 190, 135, 61, 158, 188, 86, 199, 171, 61, 44, 107, 57, 189, 96, 68, 7, 61, 151, 15, 127, 61, 242, 193, 28, 190, 219, 229, 231, 189, 145, 96, 222, 190, 138, 226, 57, 191, 88, 205, 77, 186, 135, 102, 3, 189, 98, 127, 3, 62, 64, 55, 187, 61, 26, 215, 36, 61, 131, 203, 251, 189, 168, 87, 114, 189, 125, 74, 24, 189, 195, 133, 212, 61, 101, 159, 17, 191, 23, 7, 114, 190, 29, 178, 210, 61, 42, 138, 65, 191, 211, 127, 181, 61, 142, 104, 175, 190, 91, 66, 225, 189, 18, 152, 117, 62, 86, 214, 243, 62, 70, 35, 31, 59, 160, 106, 142, 61, 20, 3, 181, 190, 11, 49, 128, 190, 206, 59, 178, 61, 65, 24, 204, 62, 151, 15, 54, 190, 137, 29, 161, 62, 238, 36, 31, 60, 113, 32, 94, 61, 28, 244, 10, 60, 9, 153, 135, 62, 67, 109, 22, 191, 204, 102, 209, 190, 56, 194, 187, 189, 102, 124, 66, 190, 206, 155, 136, 61, 55, 228, 39, 188, 224, 136, 67, 62, 118, 214, 193, 189, 34, 220, 62, 190, 80, 199, 56, 191, 117, 234, 194, 62, 199, 188, 15, 191, 145, 186, 140, 60, 99, 231, 60, 190, 255, 55, 145, 190, 162, 91, 172, 62, 34, 239, 123, 62, 195, 153, 198, 62, 200, 126, 140, 190, 250, 51, 136, 62, 180, 87, 18, 62, 11, 224, 62, 191, 29, 157, 45, 190, 239, 217, 146, 190, 123, 63, 98, 190, 58, 32, 82, 61, 94, 128, 238, 189, 70, 118, 72, 186, 147, 176, 254, 189, 215, 171, 174, 61, 72, 7, 17, 62, 250, 186, 226, 189, 76, 107, 161, 61, 101, 81, 146, 189, 129, 10, 199, 189, 185, 226, 180, 188, 215, 251, 244, 61, 9, 67, 41, 62, 99, 59, 232, 189, 104, 24, 45, 190, 123, 72, 1, 62, 128, 15, 189, 189, 185, 168, 16, 190, 245, 160, 38, 62, 132, 233, 31, 62, 133, 24, 3, 190, 54, 133, 34, 61, 32, 179, 129, 61, 18, 205, 38, 190, 26, 4, 32, 190, 100, 23, 38, 190, 22, 136, 51, 190, 210, 57, 29, 190, 210, 15, 202, 60, 140, 221, 36, 190, 200, 0, 23, 62, 4, 243, 136, 60, 14, 137, 214, 189, 252, 9, 164, 61, 84, 101, 36, 190, 126, 92, 34, 62, 34, 26, 50, 60, 47, 140, 41, 191, 222, 117, 237, 189, 20, 78, 20, 188, 49, 237, 63, 189, 195, 151, 118, 61, 145, 143, 139, 62, 109, 104, 9, 190, 250, 97, 61, 61, 233, 117, 182, 62, 184, 37, 237, 61, 210, 78, 3, 62, 17, 50, 126, 189, 99, 200, 192, 188, 160, 114, 140, 62, 234, 58, 6, 190, 33, 75, 252, 61, 243, 47, 70, 62, 163, 125, 251, 188, 166, 70, 103, 62, 150, 69, 138, 190, 62, 25, 20, 190, 219, 123, 174, 190, 147, 172, 132, 61, 27, 91, 68, 62, 140, 169, 139, 62, 34, 70, 229, 61, 212, 218, 230, 189, 6, 194, 186, 60, 249, 109, 161, 189, 48, 29, 239, 189, 26, 224, 128, 189, 101, 252, 105, 61, 72, 189, 205, 188, 153, 109, 104, 62, 201, 58, 38, 190, 55, 215, 185, 189, 201, 166, 250, 190, 93, 43, 245, 188, 201, 146, 176, 61, 105, 149, 139, 58, 171, 228, 149, 62, 117, 189, 213, 189, 224, 75, 9, 191, 205, 212, 238, 190, 211, 249, 54, 189, 73, 115, 135, 190, 74, 137, 134, 62, 148, 99, 134, 190, 179, 152, 141, 61, 177, 209, 97, 60, 17, 215, 224, 188, 106, 30, 127, 62, 52, 195, 131, 190, 14, 138, 152, 62, 180, 246, 50, 187, 238, 37, 2, 191, 51, 12, 3, 190, 144, 188, 78, 61, 150, 229, 3, 62, 230, 88, 136, 62, 86, 207, 252, 189, 120, 81, 22, 190, 12, 240, 144, 61, 190, 49, 39, 189, 28, 243, 77, 191, 222, 90, 191, 62, 139, 34, 41, 190, 241, 118, 205, 61, 96, 7, 103, 190, 153, 197, 0, 190, 46, 155, 36, 62, 111, 215, 73, 189, 206, 162, 158, 62, 154, 136, 112, 189, 150, 61, 171, 190, 147, 97, 79, 189, 139, 92, 72, 190, 108, 121, 110, 60, 131, 131, 53, 62, 162, 76, 98, 190, 104, 189, 26, 61, 173, 249, 52, 62, 144, 81, 135, 61, 145, 45, 247, 61, 132, 75, 64, 190, 151, 113, 220, 62, 4, 243, 149, 190, 125, 39, 56, 191, 131, 218, 79, 62, 30, 226, 7, 60, 224, 185, 49, 190, 201, 86, 197, 62, 223, 11, 38, 62, 156, 164, 30, 62, 214, 85, 69, 190, 118, 243, 109, 188, 133, 213, 83, 190, 178, 250, 116, 189, 108, 246, 123, 190, 42, 250, 38, 191, 195, 51, 213, 189, 153, 144, 21, 62, 163, 185, 12, 62, 77, 128, 34, 190, 186, 143, 135, 62, 252, 90, 130, 189, 165, 115, 200, 60, 67, 49, 34, 191, 243, 110, 12, 62, 189, 212, 34, 62, 21, 173, 53, 61, 45, 197, 227, 184, 50, 218, 138, 190, 118, 19, 69, 62, 234, 37, 168, 188, 218, 209, 26, 62, 190, 244, 190, 60, 161, 37, 152, 61, 185, 29, 40, 190, 189, 158, 58, 191, 71, 22, 129, 62, 175, 88, 128, 59, 7, 238, 103, 61, 16, 122, 138, 61, 216, 238, 28, 190, 228, 93, 148, 62, 154, 141, 163, 190, 165, 124, 27, 190, 25, 110, 198, 61, 6, 14, 249, 62, 42, 193, 53, 191, 175, 246, 140, 190, 77, 91, 175, 190, 8, 178, 41, 190, 39, 39, 153, 62, 101, 78, 10, 61, 140, 35, 136, 61, 254, 65, 122, 189, 22, 190, 165, 189, 197, 153, 18, 191, 147, 191, 140, 62, 95, 169, 225, 190, 241, 159, 145, 62, 31, 20, 42, 190, 193, 110, 75, 190, 16, 95, 121, 62, 153, 218, 84, 62, 251, 62, 168, 62, 148, 152, 244, 189, 39, 4, 167, 62, 168, 205, 211, 189, 115, 176, 119, 191, 89, 94, 101, 189, 254, 176, 105, 190, 211, 127, 231, 190, 19, 59, 54, 62, 214, 184, 212, 61, 100, 203, 44, 190, 28, 26, 199, 61, 37, 253, 18, 190, 113, 215, 21, 62, 58, 35, 152, 61, 204, 150, 121, 61, 149, 190, 28, 190, 189, 188, 215, 61, 23, 184, 61, 190, 166, 47, 47, 188, 115, 120, 15, 62, 5, 135, 213, 61, 155, 247, 156, 189, 9, 24, 43, 190, 72, 147, 116, 61, 90, 36, 232, 61, 154, 224, 151, 189, 197, 235, 197, 189, 210, 20, 22, 190, 147, 227, 241, 189, 92, 111, 250, 188, 203, 78, 37, 190, 149, 224, 12, 187, 193, 252, 50, 190, 218, 69, 168, 189, 41, 128, 21, 189, 1, 126, 4, 62, 224, 227, 177, 187, 22, 104, 133, 189, 10, 45, 155, 189, 206, 206, 38, 190, 68, 8, 173, 189, 156, 75, 187, 62, 102, 68, 40, 62, 219, 205, 23, 191, 103, 202, 217, 190, 248, 43, 25, 189, 121, 206, 175, 62, 88, 213, 108, 190, 29, 29, 62, 191, 94, 52, 97, 62, 169, 105, 3, 191, 183, 216, 141, 184, 230, 225, 165, 190, 221, 247, 132, 190, 255, 20, 214, 189, 175, 249, 85, 62, 242, 99, 4, 62, 178, 190, 100, 62, 212, 33, 253, 189, 110, 134, 37, 190, 147, 240, 145, 190, 100, 152, 63, 190, 247, 1, 239, 189, 106, 173, 54, 63, 248, 122, 151, 189, 179, 123, 66, 191, 49, 103, 244, 62, 35, 14, 11, 63, 38, 3, 28, 62, 237, 240, 86, 190, 250, 213, 3, 190, 223, 58, 95, 189, 209, 198, 210, 190, 118, 160, 65, 63, 132, 97, 101, 62, 220, 225, 93, 191, 114, 242, 24, 63, 154, 220, 119, 62, 229, 97, 34, 189, 204, 68, 160, 62, 121, 11, 177, 191, 211, 211, 100, 189, 233, 44, 141, 189, 138, 178, 2, 189, 63, 170, 57, 60, 118, 42, 47, 190, 26, 116, 211, 190, 3, 117, 57, 62, 46, 20, 55, 190, 235, 228, 92, 62, 99, 45, 41, 61, 167, 127, 235, 191, 130, 169, 26, 63, 42, 227, 29, 191, 54, 98, 222, 61, 4, 121, 38, 62, 7, 155, 207, 190, 236, 28, 144, 190, 122, 80, 123, 189, 217, 68, 217, 61, 143, 145, 241, 190, 128, 131, 17, 62, 104, 42, 148, 62, 182, 140, 158, 191, 221, 183, 96, 62, 169, 114, 71, 189, 237, 95, 151, 187, 208, 190, 135, 190, 189, 30, 139, 190, 133, 216, 98, 191, 105, 19, 180, 61, 30, 91, 81, 62, 212, 186, 153, 190, 121, 162, 139, 189, 118, 15, 167, 190, 51, 209, 77, 61, 95, 204, 145, 189, 172, 132, 13, 62, 85, 10, 94, 188, 231, 227, 217, 61, 131, 71, 134, 190, 193, 91, 153, 62, 38, 136, 71, 62, 209, 24, 155, 189, 200, 240, 28, 62, 167, 144, 55, 191, 138, 173, 146, 190, 92, 145, 15, 190, 170, 196, 99, 189, 110, 156, 217, 190, 97, 76, 13, 191, 14, 162, 241, 60, 202, 236, 29, 62, 156, 168, 141, 62, 249, 199, 131, 61, 106, 105, 57, 191, 243, 66, 176, 62, 139, 194, 55, 62, 148, 139, 105, 61, 168, 4, 239, 61, 255, 57, 93, 191, 153, 70, 193, 189, 195, 67, 54, 61, 7, 83, 199, 190, 66, 190, 212, 188, 166, 196, 78, 62, 86, 77, 185, 189, 244, 113, 4, 190, 78, 216, 186, 187, 84, 77, 27, 61, 2, 15, 180, 189, 6, 39, 16, 191, 148, 253, 197, 60, 83, 123, 26, 60, 50, 137, 104, 62, 96, 34, 218, 189, 60, 199, 4, 188, 49, 172, 223, 188, 240, 100, 97, 61, 17, 205, 107, 62, 234, 135, 248, 61, 225, 181, 152, 61, 193, 9, 139, 189, 104, 47, 123, 190, 29, 164, 87, 62, 152, 26, 130, 190, 10, 167, 1, 61, 103, 244, 176, 62, 71, 201, 91, 62, 113, 80, 162, 190, 96, 101, 69, 62, 253, 183, 171, 61, 14, 238, 5, 191, 150, 246, 44, 190, 213, 95, 110, 62, 153, 41, 91, 62, 42, 191, 238, 62, 140, 47, 91, 62, 65, 165, 170, 190, 20, 9, 17, 190, 118, 41, 139, 61, 152, 8, 16, 62, 229, 10, 38, 61, 102, 24, 123, 61, 219, 126, 151, 190, 111, 160, 30, 62, 165, 142, 163, 190, 88, 215, 35, 60, 131, 31, 14, 62, 33, 62, 124, 190, 134, 212, 136, 190, 66, 127, 69, 190, 146, 62, 38, 62, 217, 167, 7, 191, 226, 92, 42, 62, 246, 20, 226, 62, 8, 239, 132, 62, 68, 84, 235, 62, 192, 64, 8, 190, 60, 250, 146, 190, 20, 197, 161, 60, 226, 215, 153, 190, 98, 71, 142, 62, 253, 224, 230, 189, 128, 139, 51, 191, 78, 118, 73, 60, 5, 246, 145, 61, 49, 153, 98, 61, 147, 97, 40, 61, 49, 174, 23, 62, 14, 67, 31, 191, 181, 157, 169, 61, 58, 82, 21, 62, 94, 98, 36, 62, 38, 27, 65, 62, 140, 20, 40, 62, 46, 253, 77, 190, 85, 87, 181, 61, 27, 49, 69, 187, 236, 229, 177, 60, 161, 78, 78, 62, 253, 78, 24, 190, 220, 208, 232, 61, 104, 38, 12, 190, 165, 134, 129, 189, 22, 177, 11, 191, 80, 69, 92, 60, 106, 61, 215, 61, 69, 163, 176, 62, 163, 127, 226, 62, 131, 28, 68, 190, 101, 128, 234, 189, 109, 99, 246, 187, 89, 76, 72, 190, 188, 56, 138, 60, 72, 30, 40, 190, 56, 220, 215, 59, 244, 54, 96, 61, 63, 210, 17, 190, 16, 7, 87, 58, 185, 241, 128, 60, 220, 97, 155, 189, 236, 225, 199, 61, 61, 202, 52, 189, 102, 245, 141, 189, 58, 51, 154, 61, 241, 141, 7, 188, 106, 81, 21, 190, 231, 145, 254, 60, 5, 250, 14, 190, 189, 204, 133, 61, 38, 145, 10, 188, 142, 240, 164, 189, 85, 24, 48, 190, 27, 209, 15, 190, 212, 10, 239, 61, 184, 229, 22, 190, 202, 78, 129, 189, 128, 38, 3, 189, 115, 224, 15, 189, 77, 50, 224, 61, 90, 61, 111, 60, 78, 171, 150, 61, 175, 130, 168, 61, 236, 25, 21, 63, 181, 7, 37, 190, 79, 69, 203, 62, 19, 251, 222, 188, 77, 150, 76, 190, 30, 41, 205, 190, 21, 188, 52, 62, 203, 90, 4, 63, 62, 151, 251, 189, 152, 90, 48, 189, 187, 172, 11, 191, 91, 252, 21, 190, 104, 99, 5, 62, 150, 20, 95, 62, 110, 232, 210, 61, 200, 210, 135, 61, 121, 58, 13, 190, 94, 197, 39, 62, 180, 209, 213, 189, 249, 26, 65, 190, 243, 222, 1, 63, 231, 206, 38, 190, 123, 152, 118, 190, 214, 188, 168, 189, 164, 102, 209, 61, 186, 170, 84, 191, 17, 152, 246, 190, 227, 98, 22, 62, 201, 188, 188, 61, 255, 213, 137, 61, 87, 114, 60, 190, 225, 20, 75, 189, 62, 1, 116, 190, 80, 171, 99, 188, 8, 166, 129, 189, 49, 255, 214, 61, 169, 87, 157, 190, 190, 116, 153, 62, 227, 107, 17, 189, 70, 184, 45, 191, 167, 90, 105, 190, 139, 3, 5, 62, 107, 233, 153, 60, 215, 129, 164, 188, 237, 85, 226, 188, 46, 10, 190, 61, 255, 30, 87, 190, 32, 178, 230, 190, 116, 224, 32, 190, 93, 186, 134, 61, 166, 184, 85, 62, 182, 237, 1, 61, 248, 242, 81, 190, 112, 122, 34, 62, 195, 161, 43, 60, 119, 73, 139, 61, 122, 17, 64, 190, 103, 195, 87, 62, 162, 214, 232, 189, 50, 231, 22, 191, 232, 58, 242, 61, 232, 190, 97, 190, 177, 142, 108, 190, 86, 200, 4, 62, 164, 85, 18, 189, 47, 48, 27, 190, 26, 120, 98, 189, 80, 182, 232, 189, 28, 132, 192, 61, 227, 82, 39, 190, 164, 93, 189, 188, 68, 172, 117, 59, 5, 88, 4, 190, 87, 62, 34, 61, 203, 153, 148, 188, 126, 85, 62, 190, 12, 75, 239, 189, 168, 70, 139, 61, 232, 38, 51, 61, 27, 141, 174, 61, 224, 1, 69, 190, 40, 63, 208, 189, 14, 14, 111, 188, 3, 209, 160, 189, 193, 158, 66, 190, 132, 246, 82, 189, 2, 58, 12, 190, 211, 213, 40, 190, 222, 117, 84, 61, 251, 58, 87, 189, 131, 216, 184, 61, 29, 203, 167, 61, 100, 231, 155, 61, 242, 98, 15, 190, 23, 214, 150, 189, 50, 51, 229, 61, 69, 55, 232, 61, 137, 172, 31, 190, 63, 210, 167, 62, 221, 226, 104, 190, 120, 222, 46, 191, 20, 82, 56, 62, 126, 132, 7, 62, 117, 158, 18, 190, 196, 162, 20, 190, 129, 240, 162, 62, 6, 24, 201, 190, 33, 65, 66, 190, 176, 184, 32, 61, 123, 224, 1, 191, 111, 85, 124, 190, 103, 127, 192, 188, 237, 46, 191, 188, 150, 3, 1, 62, 138, 229, 210, 189, 125, 26, 50, 189, 154, 209, 167, 190, 118, 229, 171, 188, 160, 205, 155, 61, 199, 36, 201, 189, 108, 29, 101, 190, 48, 93, 128, 190, 153, 255, 26, 61, 132, 170, 35, 190, 132, 57, 224, 188, 206, 116, 85, 190, 25, 244, 14, 62, 97, 209, 128, 62, 59, 126, 180, 189, 128, 204, 99, 62, 252, 221, 170, 189, 204, 177, 177, 189, 145, 218, 13, 63, 3, 130, 151, 190, 130, 39, 191, 61, 244, 181, 39, 62, 242, 241, 132, 62, 22, 14, 93, 62, 88, 218, 23, 59, 211, 114, 192, 189, 54, 95, 96, 190, 231, 253, 149, 190, 173, 156, 139, 62, 149, 49, 220, 62, 107, 21, 14, 60, 95, 99, 132, 61, 109, 65, 66, 191, 120, 151, 179, 189, 110, 201, 158, 61, 177, 119, 181, 189, 47, 106, 56, 62, 194, 134, 224, 61, 6, 209, 239, 61, 100, 15, 175, 190, 49, 188, 205, 61, 96, 233, 239, 62, 163, 136, 90, 62, 106, 241, 15, 62, 214, 58, 103, 62, 29, 129, 19, 191, 108, 7, 37, 62, 86, 153, 205, 189, 107, 77, 186, 62, 33, 96, 80, 62, 6, 13, 253, 190, 78, 21, 4, 62, 85, 67, 35, 62, 229, 128, 50, 62, 189, 223, 85, 62, 173, 114, 25, 61, 184, 227, 198, 190, 43, 19, 31, 190, 49, 215, 232, 62, 19, 208, 192, 62, 149, 228, 198, 61, 171, 173, 249, 189, 46, 249, 4, 191, 153, 230, 49, 62, 94, 63, 203, 61, 74, 42, 106, 60, 140, 79, 165, 62, 215, 26, 203, 190, 154, 68, 238, 61, 173, 241, 159, 190, 159, 127, 160, 189, 2, 15, 228, 190, 75, 105, 53, 62, 105, 16, 6, 62, 106, 43, 130, 62, 71, 61, 27, 62, 127, 79, 142, 189, 12, 142, 60, 190, 1, 170, 143, 189, 48, 241, 128, 190, 44, 211, 2, 190, 165, 56, 130, 61, 76, 211, 7, 61, 243, 223, 115, 61, 49, 214, 238, 190, 82, 110, 154, 62, 117, 204, 221, 190, 111, 60, 53, 189, 17, 244, 12, 62, 22, 254, 25, 61, 209, 81, 7, 62, 189, 73, 98, 190, 18, 104, 121, 190, 21, 248, 213, 190, 159, 209, 94, 190, 151, 75, 62, 190, 124, 90, 85, 59, 136, 109, 68, 190, 55, 244, 139, 62, 11, 114, 131, 61, 193, 224, 194, 189, 149, 67, 30, 62, 82, 250, 6, 189, 182, 226, 183, 189, 38, 15, 181, 187, 134, 6, 248, 190, 56, 173, 8, 190, 78, 160, 25, 191, 11, 35, 210, 189, 96, 37, 26, 62, 76, 46, 215, 58, 191, 238, 181, 62, 57, 116, 240, 190, 35, 14, 57, 62, 178, 190, 124, 61, 230, 228, 232, 61, 249, 81, 71, 191, 200, 236, 89, 191, 217, 196, 176, 190, 73, 195, 70, 190, 227, 32, 39, 62, 200, 153, 39, 62, 97, 25, 198, 189, 23, 117, 73, 190, 210, 8, 14, 190, 74, 11, 155, 190, 208, 130, 151, 62, 114, 137, 67, 191, 152, 118, 134, 61, 254, 87, 6, 190, 94, 181, 25, 191, 113, 120, 146, 62, 190, 70, 236, 60, 39, 63, 48, 62, 180, 180, 107, 61, 153, 20, 229, 62, 219, 2, 136, 61, 250, 227, 149, 190, 161, 115, 244, 61, 78, 4, 214, 190, 53, 56, 19, 187, 97, 232, 118, 62, 5, 65, 188, 61, 137, 209, 151, 189, 21, 199, 238, 189, 154, 191, 71, 190, 55, 34, 61, 189, 45, 182, 148, 190, 225, 71, 179, 60, 238, 142, 241, 61, 56, 245, 49, 61, 172, 114, 93, 190, 82, 209, 58, 190, 43, 36, 62, 188, 239, 167, 250, 59, 223, 22, 51, 190, 74, 167, 191, 61, 187, 54, 194, 61, 72, 144, 19, 61, 19, 139, 246, 188, 136, 206, 54, 189, 38, 52, 176, 189, 101, 148, 10, 62, 33, 90, 97, 190, 255, 141, 54, 190, 91, 121, 246, 187, 229, 148, 197, 189, 63, 79, 31, 190, 192, 176, 80, 190, 168, 37, 241, 189, 174, 67, 85, 61, 11, 38, 3, 190, 188, 88, 62, 189, 242, 98, 168, 190, 154, 219, 207, 189, 205, 60, 206, 61, 231, 242, 44, 61, 19, 44, 246, 188, 86, 245, 2, 190, 141, 150, 141, 188, 139, 233, 239, 61, 139, 80, 75, 61, 29, 124, 127, 189, 250, 44, 5, 62, 89, 2, 140, 189, 163, 165, 153, 61, 113, 19, 68, 190, 128, 184, 27, 190, 8, 95, 142, 189, 172, 132, 220, 189, 232, 166, 188, 189, 230, 232, 18, 189, 131, 230, 20, 62, 209, 123, 129, 61, 120, 63, 23, 190, 182, 112, 160, 61, 135, 105, 51, 190, 19, 245, 142, 189, 221, 68, 157, 189, 34, 127, 203, 61, 145, 120, 185, 188, 221, 54, 81, 190, 66, 61, 166, 60, 8, 26, 57, 190, 7, 247, 238, 60, 219, 125, 210, 188, 242, 15, 11, 62, 206, 8, 6, 190, 205, 70, 223, 189, 204, 250, 186, 188, 204, 82, 15, 188, 59, 128, 49, 61, 172, 136, 37, 190, 13, 43, 35, 62, 40, 45, 4, 190, 232, 211, 210, 188, 13, 177, 207, 189, 56, 34, 80, 61, 174, 171, 35, 190, 208, 16, 205, 189, 32, 43, 233, 184, 174, 33, 207, 189, 132, 251, 232, 189, 59, 247, 18, 61, 9, 159, 3, 190, 0, 96, 221, 60, 54, 115, 11, 190, 172, 75, 128, 61, 181, 76, 230, 188, 172, 148, 4, 189, 151, 126, 198, 61, 47, 57, 46, 62, 15, 30, 145, 187, 200, 49, 8, 190, 247, 90, 22, 62, 193, 120, 245, 187, 64, 130, 34, 189, 220, 244, 130, 188, 155, 189, 120, 62, 224, 80, 206, 60, 138, 94, 3, 191, 152, 148, 154, 189, 177, 93, 89, 189, 136, 185, 177, 62, 255, 146, 15, 191, 248, 218, 130, 190, 72, 166, 197, 61, 12, 176, 48, 191, 102, 10, 49, 190, 190, 19, 153, 189, 101, 178, 143, 189, 56, 138, 77, 62, 168, 160, 68, 62, 225, 122, 143, 61, 162, 211, 206, 188, 162, 133, 202, 190, 2, 0, 160, 62, 37, 222, 62, 62, 32, 175, 60, 61, 253, 185, 25, 190, 25, 34, 23, 62, 77, 77, 2, 190, 201, 52, 154, 62, 18, 140, 64, 190, 56, 251, 120, 190, 168, 4, 204, 60, 6, 183, 37, 62, 191, 184, 203, 61, 47, 126, 234, 61, 252, 3, 31, 190, 251, 201, 45, 62, 1, 243, 97, 189, 72, 215, 8, 190, 119, 153, 118, 189, 205, 192, 160, 189, 2, 76, 245, 189, 181, 140, 151, 61, 133, 39, 138, 189, 133, 79, 155, 61, 106, 102, 134, 188, 217, 186, 226, 189, 96, 116, 179, 60, 220, 163, 218, 61, 241, 211, 0, 190, 181, 84, 30, 190, 209, 117, 183, 189, 248, 113, 47, 190, 5, 235, 203, 60, 197, 62, 59, 188, 182, 155, 204, 189, 6, 186, 207, 189, 99, 196, 219, 61, 240, 94, 2, 62, 143, 12, 30, 188, 255, 234, 28, 190, 165, 225, 223, 61, 99, 92, 32, 190, 71, 18, 60, 190, 36, 220, 38, 190, 158, 174, 73, 61, 20, 118, 229, 189, 210, 127, 159, 189, 230, 226, 139, 189, 203, 16, 44, 63, 90, 105, 163, 61, 246, 161, 132, 190, 29, 251, 24, 62, 4, 136, 135, 61, 226, 220, 105, 190, 228, 31, 209, 62, 119, 79, 146, 191, 184, 242, 6, 189, 28, 217, 139, 190, 231, 67, 53, 190, 69, 154, 160, 61, 30, 66, 153, 190, 138, 183, 52, 189, 249, 45, 130, 61, 186, 231, 32, 62, 176, 128, 193, 190, 83, 249, 172, 190, 51, 98, 135, 191, 20, 180, 185, 62, 248, 123, 16, 191, 1, 245, 85, 61, 132, 178, 231, 62, 89, 252, 202, 189, 33, 17, 255, 62, 124, 21, 110, 62, 25, 30, 151, 190, 58, 170, 163, 190, 40, 48, 78, 62, 200, 61, 126, 188, 177, 93, 57, 190, 196, 101, 43, 190, 38, 132, 63, 62, 216, 57, 133, 61, 153, 35, 7, 191, 81, 125, 34, 190, 169, 116, 178, 62, 201, 74, 161, 190, 48, 217, 200, 62, 167, 119, 70, 191, 93, 136, 108, 188, 3, 144, 129, 189, 124, 194, 25, 62, 109, 34, 217, 61, 108, 247, 201, 190, 148, 166, 73, 191, 154, 44, 140, 190, 234, 88, 137, 61, 118, 107, 230, 190, 198, 72, 182, 61, 162, 201, 180, 191, 169, 129, 44, 62, 88, 133, 156, 189, 57, 152, 138, 62, 107, 236, 108, 190, 211, 180, 168, 190, 119, 89, 12, 63, 136, 177, 188, 190, 103, 167, 63, 191, 212, 164, 114, 191, 95, 76, 234, 188, 104, 73, 0, 191, 84, 17, 76, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 42, 158, 62, 126, 65, 219, 189, 27, 5, 63, 62, 77, 128, 47, 190, 167, 228, 185, 62, 159, 164, 149, 62, 161, 209, 139, 62, 195, 226, 168, 61, 17, 149, 80, 62, 112, 48, 195, 61, 12, 163, 68, 190, 111, 73, 136, 62, 254, 133, 74, 60, 66, 88, 99, 189, 136, 249, 150, 189, 48, 96, 48, 62, 66, 130, 196, 189, 178, 224, 147, 61, 168, 109, 144, 62, 239, 216, 126, 61, 240, 247, 225, 188, 215, 29, 217, 190, 29, 187, 118, 62, 112, 193, 138, 61, 233, 111, 148, 190, 23, 10, 11, 190, 56, 231, 212, 187, 103, 183, 57, 190, 35, 127, 229, 188, 41, 173, 0, 189, 199, 72, 160, 62, 231, 39, 197, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 227, 144, 60, 183, 19, 30, 63, 73, 109, 2, 191, 185, 139, 214, 60, 8, 133, 55, 62, 61, 196, 200, 190, 216, 149, 247, 190, 148, 255, 235, 189, 235, 225, 32, 191, 113, 57, 242, 189, 175, 160, 154, 63, 39, 31, 92, 191, 179, 96, 26, 191, 121, 204, 207, 189, 17, 141, 198, 62, 38, 96, 146, 62, 171, 176, 68, 189, 100, 50, 14, 63, 24, 254, 98, 190, 89, 125, 120, 188, 134, 195, 192, 60, 230, 184, 27, 191, 20, 126, 172, 62, 51, 182, 87, 62, 230, 247, 84, 63, 218, 134, 109, 189, 29, 162, 215, 189, 202, 124, 5, 190, 105, 213, 70, 190, 222, 226, 183, 189, 111, 92, 55, 191, 0, 94, 168, 191, 163, 219, 44, 190, 186, 228, 116, 61, 30, 191, 93, 62, 3, 82, 41, 190, 254, 66, 194, 190, 27, 5, 40, 190, 164, 100, 153, 190, 211, 221, 5, 189, 203, 242, 197, 60, 249, 73, 239, 61, 112, 217, 174, 62, 122, 2, 178, 189, 194, 98, 42, 61, 90, 157, 204, 190, 108, 180, 78, 62, 159, 112, 126, 190, 108, 203, 224, 189, 72, 127, 32, 62, 250, 101, 84, 190, 15, 84, 39, 61, 85, 142, 226, 190, 189, 175, 47, 61, 129, 28, 56, 190, 209, 53, 23, 63, 233, 13, 93, 62, 224, 176, 183, 61, 69, 240, 24, 61, 235, 182, 20, 190, 248, 37, 33, 62, 83, 17, 200, 61, 255, 221, 183, 62, 210, 134, 13, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 26, 153, 61, 213, 177, 178, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {110, 100, 168, 63, 21, 182, 65, 63, 78, 211, 215, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {210, 186, 5, 192, 208, 222, 46, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0065/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}