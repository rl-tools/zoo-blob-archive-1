// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 123, 230, 190, 240, 71, 97, 63, 94, 149, 91, 190, 92, 103, 162, 61, 77, 105, 18, 191, 184, 213, 214, 62, 169, 83, 23, 63, 171, 32, 38, 191, 120, 73, 7, 190, 95, 140, 73, 61, 91, 97, 141, 63, 237, 88, 222, 62, 131, 46, 247, 62, 118, 228, 182, 190, 161, 188, 200, 188, 47, 190, 5, 191, 150, 184, 197, 62, 116, 125, 177, 190, 5, 130, 40, 63, 197, 251, 139, 191, 97, 209, 145, 190, 15, 99, 158, 190, 151, 206, 142, 191, 219, 239, 70, 190, 218, 16, 253, 190, 44, 158, 112, 63, 35, 107, 198, 62, 113, 41, 83, 63, 201, 103, 95, 190, 185, 241, 197, 190, 23, 202, 175, 62, 239, 211, 72, 63, 27, 50, 166, 62, 78, 194, 143, 62, 5, 235, 52, 62, 8, 32, 6, 189, 2, 161, 133, 189, 45, 159, 27, 62, 199, 112, 163, 60, 150, 239, 94, 191, 221, 242, 157, 62, 38, 182, 122, 62, 101, 28, 63, 191, 205, 223, 99, 190, 64, 77, 90, 63, 54, 182, 238, 62, 249, 247, 141, 191, 21, 116, 153, 190, 27, 49, 10, 63, 133, 215, 35, 190, 69, 87, 6, 63, 197, 83, 217, 62, 100, 196, 117, 191, 6, 121, 164, 189, 202, 166, 1, 191, 230, 103, 30, 63, 121, 173, 5, 190, 238, 186, 183, 190, 235, 210, 124, 63, 132, 238, 48, 63, 102, 72, 148, 190, 56, 212, 141, 191, 96, 132, 23, 190, 128, 111, 238, 62, 28, 86, 220, 62, 163, 30, 241, 62, 253, 95, 40, 62, 38, 180, 208, 190, 100, 118, 187, 190, 178, 14, 200, 62, 117, 9, 32, 191, 248, 23, 251, 62, 251, 144, 28, 190, 214, 0, 38, 63, 150, 81, 57, 190, 240, 36, 8, 63, 242, 149, 185, 63, 202, 88, 170, 62, 74, 35, 243, 62, 223, 78, 80, 63, 26, 112, 170, 190, 109, 194, 55, 63, 79, 113, 45, 191, 91, 189, 119, 190, 91, 229, 190, 62, 214, 186, 230, 190, 41, 0, 165, 62, 186, 163, 112, 191, 184, 196, 151, 57, 168, 89, 144, 62, 63, 63, 202, 62, 245, 130, 167, 190, 180, 96, 100, 189, 39, 146, 81, 63, 114, 124, 122, 63, 7, 105, 128, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 255, 148, 190, 17, 3, 4, 191, 67, 40, 101, 62, 185, 83, 107, 62, 230, 179, 6, 191, 132, 47, 10, 62, 240, 163, 81, 61, 97, 229, 220, 62, 110, 133, 159, 190, 180, 147, 16, 62, 19, 7, 58, 190, 111, 224, 40, 191, 107, 39, 78, 63, 205, 74, 7, 63, 123, 12, 149, 190, 136, 73, 90, 190, 45, 63, 92, 191, 242, 87, 170, 61, 138, 100, 201, 61, 140, 38, 107, 190, 104, 113, 217, 62, 0, 121, 108, 190, 82, 3, 48, 63, 142, 76, 162, 190, 53, 166, 129, 189, 52, 128, 25, 189, 251, 16, 228, 190, 62, 167, 213, 190, 142, 131, 123, 62, 58, 19, 23, 61, 156, 49, 107, 191, 103, 246, 119, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 90, 251, 61, 179, 175, 164, 189, 189, 77, 148, 188, 157, 71, 65, 62, 78, 120, 243, 190, 140, 227, 185, 188, 71, 24, 252, 61, 12, 246, 11, 62, 219, 214, 6, 62, 198, 67, 57, 62, 62, 204, 243, 188, 202, 99, 9, 62, 43, 200, 39, 61, 137, 58, 7, 62, 214, 139, 22, 62, 56, 223, 32, 62, 29, 131, 161, 61, 166, 38, 175, 59, 205, 128, 106, 190, 72, 201, 132, 61, 244, 26, 215, 59, 51, 96, 243, 188, 255, 167, 172, 186, 155, 193, 35, 190, 163, 211, 18, 190, 75, 124, 156, 190, 31, 107, 46, 61, 213, 33, 24, 61, 47, 29, 173, 62, 243, 135, 216, 189, 103, 162, 134, 190, 3, 203, 244, 60, 49, 100, 18, 62, 64, 232, 166, 189, 149, 33, 132, 188, 229, 38, 187, 61, 242, 193, 28, 190, 24, 212, 160, 60, 155, 146, 16, 191, 206, 143, 63, 191, 242, 15, 113, 61, 69, 18, 14, 190, 159, 28, 178, 61, 64, 55, 187, 61, 102, 183, 12, 62, 215, 3, 37, 60, 237, 111, 2, 60, 79, 229, 231, 189, 82, 44, 232, 60, 233, 222, 42, 191, 113, 252, 133, 189, 173, 181, 18, 62, 25, 182, 75, 191, 25, 129, 197, 61, 194, 46, 103, 190, 216, 194, 246, 189, 40, 194, 61, 62, 238, 73, 224, 62, 158, 108, 180, 188, 162, 8, 162, 190, 224, 212, 149, 190, 118, 162, 234, 189, 206, 59, 178, 61, 156, 95, 171, 62, 8, 140, 30, 190, 139, 251, 155, 62, 148, 49, 188, 61, 255, 193, 221, 61, 17, 126, 142, 59, 24, 16, 133, 62, 100, 177, 216, 190, 14, 20, 191, 190, 14, 131, 179, 189, 49, 66, 57, 190, 71, 5, 20, 62, 55, 228, 39, 188, 125, 231, 59, 62, 89, 233, 224, 189, 207, 222, 84, 190, 188, 121, 20, 191, 229, 241, 183, 62, 95, 125, 201, 190, 150, 228, 187, 60, 156, 9, 47, 190, 152, 41, 150, 190, 6, 180, 168, 62, 50, 188, 97, 62, 234, 110, 188, 62, 199, 227, 125, 190, 158, 210, 154, 62, 111, 240, 40, 62, 83, 243, 40, 191, 60, 247, 68, 190, 145, 79, 174, 190, 123, 63, 98, 190, 49, 72, 21, 61, 94, 128, 238, 189, 70, 118, 72, 186, 147, 176, 254, 189, 215, 171, 174, 61, 72, 7, 17, 62, 250, 186, 226, 189, 76, 107, 161, 61, 101, 81, 146, 189, 129, 10, 199, 189, 185, 226, 180, 188, 215, 251, 244, 61, 9, 67, 41, 62, 99, 59, 232, 189, 104, 24, 45, 190, 123, 72, 1, 62, 128, 15, 189, 189, 185, 168, 16, 190, 245, 160, 38, 62, 132, 233, 31, 62, 133, 24, 3, 190, 54, 133, 34, 61, 32, 179, 129, 61, 18, 205, 38, 190, 26, 4, 32, 190, 100, 23, 38, 190, 22, 136, 51, 190, 210, 57, 29, 190, 210, 15, 202, 60, 140, 221, 36, 190, 200, 0, 23, 62, 4, 243, 136, 60, 14, 137, 214, 189, 149, 51, 212, 60, 201, 65, 51, 190, 157, 13, 25, 62, 234, 42, 57, 60, 71, 241, 31, 191, 241, 63, 17, 190, 73, 141, 143, 188, 189, 84, 112, 189, 37, 181, 195, 61, 9, 209, 131, 62, 135, 224, 14, 190, 250, 97, 61, 61, 189, 188, 170, 62, 61, 33, 229, 61, 152, 152, 28, 62, 183, 165, 96, 189, 126, 39, 213, 187, 25, 74, 115, 62, 11, 238, 25, 190, 19, 245, 0, 62, 185, 209, 98, 62, 156, 40, 56, 188, 68, 92, 88, 62, 106, 64, 108, 190, 14, 71, 48, 190, 183, 60, 171, 190, 140, 224, 124, 188, 135, 115, 39, 62, 128, 192, 147, 62, 130, 199, 18, 62, 212, 218, 230, 189, 203, 116, 136, 187, 177, 252, 250, 189, 133, 171, 208, 189, 237, 157, 124, 189, 41, 143, 180, 61, 87, 76, 85, 188, 232, 201, 38, 62, 132, 148, 28, 190, 31, 109, 234, 189, 189, 21, 185, 190, 199, 103, 71, 188, 155, 248, 51, 62, 105, 149, 139, 58, 77, 17, 152, 62, 125, 53, 229, 189, 202, 138, 246, 190, 123, 123, 227, 190, 33, 170, 57, 190, 235, 218, 133, 190, 161, 226, 101, 62, 115, 205, 5, 190, 235, 217, 243, 189, 180, 87, 34, 188, 241, 195, 174, 188, 172, 13, 61, 189, 7, 61, 142, 190, 126, 220, 163, 62, 152, 30, 198, 61, 217, 179, 243, 190, 36, 186, 37, 190, 140, 0, 212, 61, 150, 229, 3, 62, 246, 172, 141, 62, 93, 25, 0, 190, 220, 164, 74, 189, 112, 184, 165, 61, 19, 103, 211, 189, 39, 108, 34, 191, 56, 209, 186, 62, 140, 191, 28, 190, 21, 180, 232, 61, 251, 115, 210, 190, 227, 100, 182, 189, 12, 9, 57, 62, 111, 215, 73, 189, 184, 215, 164, 62, 224, 197, 32, 190, 87, 156, 193, 190, 237, 108, 81, 189, 135, 187, 188, 189, 22, 185, 66, 60, 243, 122, 13, 62, 169, 114, 155, 190, 74, 199, 167, 188, 89, 27, 53, 62, 216, 186, 192, 61, 188, 155, 229, 61, 180, 216, 56, 190, 7, 59, 207, 62, 91, 222, 47, 190, 206, 214, 46, 191, 100, 242, 83, 62, 97, 161, 15, 190, 224, 185, 49, 190, 6, 220, 207, 62, 9, 34, 79, 62, 196, 115, 56, 62, 204, 252, 40, 190, 28, 199, 9, 61, 227, 144, 72, 190, 252, 150, 52, 189, 26, 253, 82, 190, 60, 221, 1, 191, 250, 15, 101, 189, 240, 108, 58, 62, 42, 82, 103, 62, 77, 128, 34, 190, 173, 31, 154, 62, 51, 247, 136, 188, 72, 25, 64, 61, 81, 109, 20, 191, 62, 114, 16, 62, 31, 96, 63, 62, 188, 159, 117, 61, 239, 185, 92, 61, 208, 85, 152, 190, 25, 82, 80, 62, 76, 71, 197, 60, 193, 81, 238, 61, 118, 165, 92, 61, 168, 240, 234, 61, 5, 36, 204, 188, 185, 43, 49, 191, 236, 115, 118, 62, 63, 64, 235, 60, 7, 238, 103, 61, 175, 22, 188, 61, 37, 52, 8, 190, 182, 80, 136, 62, 19, 106, 36, 190, 134, 150, 190, 189, 132, 109, 195, 61, 182, 109, 246, 62, 239, 55, 243, 190, 218, 59, 163, 190, 190, 215, 168, 190, 152, 201, 10, 190, 241, 106, 194, 62, 101, 78, 10, 61, 254, 126, 141, 61, 114, 177, 126, 189, 156, 104, 227, 189, 42, 132, 247, 190, 244, 21, 128, 62, 45, 101, 129, 190, 187, 193, 150, 62, 218, 78, 30, 190, 179, 243, 149, 190, 62, 71, 115, 62, 240, 110, 65, 62, 124, 28, 154, 62, 193, 174, 187, 189, 223, 174, 196, 62, 85, 251, 130, 189, 25, 188, 79, 191, 123, 130, 184, 189, 202, 50, 143, 190, 211, 127, 231, 190, 248, 215, 69, 62, 214, 184, 212, 61, 100, 203, 44, 190, 28, 26, 199, 61, 37, 253, 18, 190, 113, 215, 21, 62, 58, 35, 152, 61, 204, 150, 121, 61, 149, 190, 28, 190, 189, 188, 215, 61, 23, 184, 61, 190, 166, 47, 47, 188, 115, 120, 15, 62, 5, 135, 213, 61, 155, 247, 156, 189, 9, 24, 43, 190, 72, 147, 116, 61, 90, 36, 232, 61, 154, 224, 151, 189, 197, 235, 197, 189, 210, 20, 22, 190, 147, 227, 241, 189, 92, 111, 250, 188, 203, 78, 37, 190, 149, 224, 12, 187, 193, 252, 50, 190, 218, 69, 168, 189, 41, 128, 21, 189, 1, 126, 4, 62, 224, 227, 177, 187, 22, 104, 133, 189, 10, 45, 155, 189, 206, 206, 38, 190, 190, 60, 17, 190, 226, 45, 202, 62, 231, 146, 38, 62, 164, 50, 218, 190, 35, 7, 246, 190, 131, 80, 182, 189, 125, 127, 169, 62, 101, 235, 70, 190, 22, 117, 178, 190, 216, 114, 127, 62, 64, 142, 182, 190, 183, 216, 141, 184, 67, 73, 140, 190, 189, 76, 253, 189, 207, 131, 26, 189, 57, 241, 83, 62, 156, 91, 36, 62, 254, 249, 72, 62, 135, 232, 41, 190, 235, 250, 136, 189, 203, 64, 113, 190, 37, 72, 139, 190, 134, 108, 154, 189, 164, 78, 11, 63, 115, 254, 144, 189, 226, 161, 5, 191, 115, 27, 247, 62, 160, 81, 0, 63, 73, 190, 77, 61, 108, 242, 201, 189, 250, 213, 3, 190, 215, 116, 88, 188, 188, 69, 192, 190, 35, 178, 187, 62, 8, 187, 2, 62, 246, 183, 42, 191, 235, 87, 27, 63, 45, 236, 160, 62, 82, 83, 223, 189, 93, 38, 143, 62, 56, 208, 143, 191, 180, 214, 14, 189, 233, 44, 141, 189, 138, 178, 2, 189, 21, 14, 230, 188, 218, 25, 2, 190, 151, 202, 30, 191, 65, 240, 27, 62, 208, 221, 178, 189, 153, 233, 227, 61, 134, 251, 184, 61, 7, 87, 205, 191, 65, 196, 13, 63, 65, 104, 117, 190, 174, 211, 239, 61, 122, 81, 129, 189, 20, 125, 204, 190, 156, 198, 237, 188, 66, 93, 104, 189, 137, 74, 252, 61, 107, 36, 36, 191, 250, 26, 155, 61, 104, 42, 148, 62, 58, 114, 36, 191, 18, 100, 56, 62, 150, 150, 211, 189, 46, 243, 69, 190, 136, 85, 182, 189, 43, 144, 78, 190, 43, 121, 20, 191, 223, 170, 135, 189, 79, 62, 55, 62, 165, 32, 218, 189, 88, 50, 37, 189, 247, 246, 125, 190, 51, 209, 77, 61, 70, 90, 2, 190, 98, 185, 82, 62, 99, 77, 190, 60, 150, 144, 29, 61, 22, 225, 28, 190, 221, 38, 21, 62, 227, 184, 181, 61, 246, 251, 38, 62, 76, 161, 227, 61, 206, 87, 252, 190, 83, 28, 146, 190, 57, 158, 90, 190, 10, 126, 138, 189, 162, 192, 232, 190, 66, 194, 241, 190, 12, 246, 179, 60, 129, 8, 117, 61, 116, 164, 179, 62, 249, 199, 131, 61, 217, 96, 13, 191, 175, 98, 113, 62, 27, 115, 27, 62, 17, 174, 176, 61, 117, 235, 11, 62, 3, 66, 69, 191, 123, 191, 67, 190, 224, 133, 195, 61, 211, 100, 176, 190, 116, 43, 220, 60, 63, 132, 100, 62, 77, 204, 53, 188, 244, 113, 4, 190, 0, 238, 179, 188, 81, 92, 98, 60, 238, 110, 181, 189, 0, 85, 248, 190, 201, 23, 145, 60, 41, 174, 96, 60, 222, 60, 193, 61, 223, 249, 143, 189, 188, 44, 24, 190, 177, 83, 150, 188, 224, 50, 142, 61, 122, 129, 64, 62, 159, 58, 199, 60, 154, 154, 238, 61, 107, 137, 58, 189, 166, 78, 77, 190, 22, 94, 51, 62, 10, 13, 134, 190, 10, 167, 1, 61, 146, 24, 186, 62, 32, 142, 103, 62, 255, 195, 145, 190, 1, 211, 83, 62, 31, 137, 41, 62, 37, 56, 21, 191, 142, 87, 64, 190, 162, 239, 110, 62, 91, 252, 79, 62, 41, 207, 249, 62, 207, 106, 89, 62, 143, 119, 146, 190, 20, 9, 17, 190, 96, 246, 209, 61, 171, 195, 45, 62, 194, 115, 136, 61, 7, 221, 63, 61, 239, 132, 132, 190, 75, 212, 58, 62, 6, 218, 141, 190, 189, 192, 209, 60, 163, 182, 64, 62, 239, 131, 75, 190, 185, 157, 137, 190, 205, 213, 7, 190, 120, 167, 76, 62, 184, 222, 238, 190, 173, 54, 170, 61, 204, 38, 217, 62, 107, 108, 160, 62, 82, 72, 243, 62, 192, 64, 8, 190, 106, 76, 130, 190, 6, 147, 103, 61, 129, 228, 157, 190, 52, 252, 133, 62, 18, 100, 135, 189, 240, 222, 46, 191, 226, 86, 188, 60, 241, 235, 94, 61, 134, 117, 30, 61, 76, 4, 139, 61, 96, 19, 8, 62, 138, 202, 29, 191, 181, 157, 169, 61, 124, 171, 19, 62, 127, 68, 22, 62, 163, 98, 33, 62, 91, 102, 34, 62, 216, 162, 55, 190, 32, 156, 126, 61, 67, 80, 133, 61, 162, 53, 65, 188, 187, 198, 118, 62, 61, 111, 35, 190, 149, 120, 205, 61, 172, 105, 220, 189, 186, 156, 103, 60, 132, 43, 251, 190, 204, 251, 28, 189, 62, 70, 151, 61, 51, 240, 172, 62, 85, 91, 205, 62, 131, 28, 68, 190, 123, 216, 239, 189, 109, 99, 246, 187, 13, 114, 62, 190, 188, 56, 138, 60, 114, 123, 34, 190, 56, 220, 215, 59, 244, 54, 96, 61, 63, 210, 17, 190, 245, 114, 176, 58, 67, 245, 172, 60, 220, 97, 155, 189, 217, 12, 208, 61, 61, 202, 52, 189, 225, 127, 136, 189, 251, 255, 167, 61, 244, 171, 52, 60, 106, 81, 21, 190, 85, 49, 35, 61, 5, 250, 14, 190, 189, 204, 133, 61, 106, 181, 14, 59, 214, 70, 160, 189, 171, 3, 40, 190, 27, 209, 15, 190, 224, 118, 3, 62, 184, 229, 22, 190, 189, 99, 120, 189, 128, 38, 3, 189, 115, 224, 15, 189, 117, 190, 243, 61, 194, 78, 185, 60, 78, 171, 150, 61, 162, 247, 174, 61, 206, 31, 36, 63, 161, 14, 244, 189, 196, 173, 162, 62, 202, 42, 35, 62, 84, 170, 148, 190, 26, 49, 228, 190, 87, 192, 184, 61, 199, 165, 220, 62, 223, 248, 237, 61, 125, 200, 213, 188, 197, 153, 192, 190, 91, 252, 21, 190, 218, 216, 9, 62, 144, 68, 144, 62, 146, 143, 32, 62, 215, 102, 165, 60, 217, 128, 198, 189, 46, 28, 69, 61, 107, 152, 157, 189, 70, 236, 235, 189, 6, 67, 210, 62, 249, 251, 101, 190, 184, 190, 109, 190, 163, 164, 97, 190, 201, 71, 74, 62, 199, 102, 26, 191, 95, 76, 207, 190, 56, 70, 221, 61, 27, 137, 25, 60, 86, 161, 8, 62, 87, 114, 60, 190, 69, 5, 54, 189, 171, 117, 143, 190, 15, 154, 56, 61, 219, 47, 70, 189, 167, 208, 171, 61, 147, 247, 139, 190, 142, 173, 122, 62, 20, 233, 204, 187, 73, 255, 214, 190, 66, 77, 129, 190, 30, 121, 36, 62, 34, 140, 177, 61, 215, 129, 164, 188, 203, 249, 216, 188, 37, 94, 216, 188, 45, 219, 102, 190, 56, 56, 197, 190, 190, 112, 187, 189, 233, 251, 165, 61, 109, 11, 223, 61, 22, 228, 20, 61, 167, 104, 140, 190, 228, 55, 33, 62, 105, 0, 43, 61, 16, 41, 217, 59, 62, 24, 95, 190, 122, 59, 96, 62, 228, 185, 191, 188, 191, 114, 12, 191, 152, 70, 207, 61, 140, 76, 158, 190, 177, 142, 108, 190, 166, 60, 23, 62, 164, 85, 18, 189, 47, 48, 27, 190, 26, 120, 98, 189, 80, 182, 232, 189, 28, 132, 192, 61, 227, 82, 39, 190, 164, 93, 189, 188, 68, 172, 117, 59, 5, 88, 4, 190, 87, 62, 34, 61, 203, 153, 148, 188, 126, 85, 62, 190, 12, 75, 239, 189, 168, 70, 139, 61, 232, 38, 51, 61, 27, 141, 174, 61, 224, 1, 69, 190, 40, 63, 208, 189, 14, 14, 111, 188, 3, 209, 160, 189, 193, 158, 66, 190, 132, 246, 82, 189, 2, 58, 12, 190, 211, 213, 40, 190, 222, 117, 84, 61, 251, 58, 87, 189, 131, 216, 184, 61, 29, 203, 167, 61, 100, 231, 155, 61, 242, 98, 15, 190, 23, 214, 150, 189, 50, 51, 229, 61, 85, 178, 132, 61, 230, 9, 48, 190, 198, 86, 164, 62, 247, 204, 13, 190, 27, 244, 26, 191, 72, 144, 48, 62, 254, 44, 3, 62, 149, 232, 5, 190, 196, 162, 20, 190, 177, 199, 157, 62, 131, 182, 167, 190, 33, 65, 66, 190, 115, 13, 5, 61, 1, 183, 92, 190, 236, 52, 46, 190, 53, 202, 219, 188, 101, 16, 9, 189, 252, 28, 121, 61, 148, 236, 236, 189, 8, 14, 212, 188, 107, 8, 161, 190, 180, 78, 57, 189, 247, 103, 144, 61, 124, 255, 40, 190, 6, 239, 98, 190, 153, 129, 74, 190, 35, 25, 240, 60, 113, 10, 43, 190, 43, 227, 117, 189, 78, 22, 83, 190, 25, 244, 14, 62, 94, 242, 116, 62, 47, 179, 21, 188, 130, 177, 37, 62, 78, 110, 223, 189, 198, 214, 105, 187, 16, 234, 13, 63, 3, 160, 40, 190, 214, 37, 149, 61, 86, 55, 50, 62, 202, 120, 161, 62, 138, 64, 77, 62, 193, 194, 51, 60, 211, 114, 192, 189, 187, 85, 48, 190, 104, 129, 85, 190, 98, 231, 134, 62, 139, 250, 210, 62, 229, 46, 141, 189, 102, 105, 244, 60, 28, 180, 12, 191, 183, 16, 46, 189, 162, 22, 147, 61, 132, 0, 193, 189, 140, 115, 53, 62, 196, 209, 118, 61, 59, 209, 144, 61, 228, 183, 71, 190, 136, 201, 63, 189, 60, 13, 232, 62, 165, 45, 49, 62, 89, 168, 34, 62, 214, 58, 103, 62, 87, 143, 231, 190, 122, 87, 27, 62, 229, 68, 92, 189, 149, 97, 176, 62, 232, 113, 47, 62, 48, 16, 249, 190, 209, 199, 228, 61, 78, 72, 15, 62, 194, 117, 26, 62, 8, 205, 98, 62, 0, 246, 106, 60, 193, 26, 223, 190, 43, 19, 31, 190, 246, 77, 217, 62, 221, 21, 177, 62, 48, 13, 3, 62, 102, 173, 4, 190, 214, 94, 221, 190, 54, 160, 21, 62, 38, 18, 158, 61, 156, 220, 17, 188, 70, 32, 185, 62, 185, 141, 196, 190, 231, 110, 192, 61, 174, 226, 106, 190, 149, 190, 120, 189, 207, 75, 232, 190, 135, 162, 194, 61, 175, 99, 204, 61, 183, 164, 136, 62, 168, 192, 50, 62, 127, 79, 142, 189, 151, 106, 93, 190, 230, 197, 154, 189, 126, 55, 134, 190, 13, 177, 3, 190, 145, 82, 14, 62, 76, 211, 7, 61, 241, 187, 106, 61, 144, 176, 231, 190, 109, 218, 14, 62, 206, 206, 152, 190, 176, 82, 112, 59, 122, 117, 71, 62, 22, 254, 25, 61, 80, 239, 53, 62, 63, 188, 63, 190, 190, 203, 50, 190, 188, 60, 195, 190, 157, 202, 73, 190, 170, 113, 146, 190, 141, 6, 131, 59, 102, 75, 215, 189, 57, 192, 218, 61, 115, 138, 248, 61, 157, 61, 153, 189, 144, 71, 234, 61, 237, 250, 85, 188, 21, 75, 61, 188, 104, 92, 123, 61, 166, 90, 220, 190, 141, 2, 175, 189, 79, 135, 7, 191, 11, 35, 210, 189, 18, 198, 103, 62, 71, 125, 145, 189, 209, 42, 151, 62, 178, 123, 136, 190, 251, 61, 27, 62, 98, 37, 125, 61, 164, 186, 245, 61, 195, 245, 2, 191, 90, 167, 29, 191, 161, 53, 180, 190, 130, 69, 236, 189, 24, 105, 185, 61, 200, 153, 39, 62, 94, 119, 97, 189, 198, 141, 44, 190, 49, 243, 221, 189, 70, 100, 149, 190, 83, 7, 71, 62, 65, 152, 22, 191, 131, 100, 239, 61, 206, 31, 12, 190, 241, 233, 249, 190, 174, 93, 136, 62, 82, 60, 208, 61, 59, 102, 17, 62, 168, 25, 79, 189, 12, 38, 191, 62, 215, 149, 198, 61, 62, 59, 166, 190, 140, 214, 37, 62, 174, 209, 170, 190, 53, 56, 19, 187, 35, 228, 53, 62, 97, 29, 204, 61, 142, 218, 167, 189, 246, 90, 243, 189, 124, 36, 205, 189, 139, 33, 46, 189, 205, 143, 38, 190, 244, 176, 28, 60, 111, 119, 162, 61, 249, 129, 247, 61, 36, 1, 66, 190, 102, 4, 175, 189, 43, 36, 62, 188, 193, 53, 48, 61, 179, 219, 252, 189, 78, 160, 172, 61, 215, 133, 171, 61, 97, 25, 223, 61, 200, 91, 69, 189, 130, 161, 14, 189, 62, 56, 35, 188, 251, 121, 208, 61, 151, 161, 233, 189, 29, 21, 55, 190, 86, 9, 45, 187, 10, 73, 210, 189, 146, 251, 111, 189, 56, 215, 27, 190, 255, 105, 175, 189, 230, 155, 137, 61, 121, 47, 216, 189, 188, 88, 62, 189, 108, 175, 19, 190, 154, 219, 207, 189, 131, 107, 228, 61, 172, 166, 87, 61, 169, 64, 231, 188, 86, 245, 2, 190, 141, 150, 141, 188, 154, 138, 13, 62, 3, 226, 101, 61, 165, 190, 55, 189, 36, 47, 18, 62, 66, 222, 123, 189, 163, 165, 153, 61, 105, 142, 62, 190, 13, 112, 13, 190, 53, 97, 40, 189, 167, 23, 189, 189, 192, 181, 157, 189, 55, 214, 143, 188, 239, 124, 21, 62, 90, 74, 184, 61, 192, 245, 15, 190, 49, 179, 172, 61, 95, 84, 37, 190, 20, 123, 123, 189, 200, 194, 151, 189, 42, 81, 202, 61, 246, 76, 168, 188, 177, 104, 62, 190, 168, 13, 210, 60, 228, 14, 52, 190, 7, 247, 238, 60, 230, 154, 203, 188, 253, 73, 19, 62, 206, 8, 6, 190, 176, 20, 223, 189, 204, 250, 186, 188, 204, 82, 15, 188, 249, 31, 95, 61, 97, 243, 36, 190, 207, 147, 37, 62, 40, 45, 4, 190, 178, 204, 154, 188, 13, 177, 207, 189, 56, 34, 80, 61, 236, 181, 31, 190, 53, 20, 204, 189, 32, 43, 233, 184, 132, 184, 206, 189, 132, 251, 232, 189, 59, 247, 18, 61, 160, 24, 249, 189, 0, 96, 221, 60, 14, 96, 10, 190, 172, 75, 128, 61, 205, 222, 152, 188, 172, 148, 4, 189, 46, 139, 212, 61, 47, 57, 46, 62, 46, 182, 101, 59, 200, 49, 8, 190, 247, 90, 22, 62, 193, 120, 245, 187, 64, 130, 34, 189, 220, 244, 130, 188, 132, 209, 223, 61, 56, 228, 189, 60, 175, 144, 31, 190, 1, 154, 74, 189, 177, 93, 89, 189, 68, 225, 156, 61, 152, 1, 165, 60, 77, 92, 90, 190, 200, 58, 155, 61, 240, 69, 143, 190, 187, 85, 240, 189, 190, 19, 153, 189, 147, 161, 136, 189, 54, 85, 44, 62, 230, 137, 33, 62, 146, 106, 66, 61, 0, 84, 206, 189, 198, 167, 93, 190, 225, 147, 239, 61, 33, 85, 58, 62, 95, 145, 158, 61, 161, 85, 37, 190, 227, 242, 7, 190, 160, 85, 16, 190, 210, 219, 144, 62, 216, 91, 152, 189, 228, 228, 161, 190, 210, 155, 39, 189, 111, 27, 22, 62, 108, 23, 98, 61, 47, 126, 234, 61, 194, 161, 50, 189, 251, 201, 45, 62, 1, 243, 97, 189, 72, 215, 8, 190, 119, 153, 118, 189, 205, 192, 160, 189, 2, 76, 245, 189, 181, 140, 151, 61, 133, 39, 138, 189, 133, 79, 155, 61, 106, 102, 134, 188, 217, 186, 226, 189, 96, 116, 179, 60, 220, 163, 218, 61, 241, 211, 0, 190, 181, 84, 30, 190, 209, 117, 183, 189, 248, 113, 47, 190, 5, 235, 203, 60, 197, 62, 59, 188, 182, 155, 204, 189, 6, 186, 207, 189, 99, 196, 219, 61, 240, 94, 2, 62, 143, 12, 30, 188, 255, 234, 28, 190, 165, 225, 223, 61, 99, 92, 32, 190, 71, 18, 60, 190, 36, 220, 38, 190, 158, 174, 73, 61, 20, 118, 229, 189, 210, 127, 159, 189, 151, 15, 26, 189, 37, 88, 198, 62, 224, 199, 135, 61, 206, 207, 156, 190, 197, 77, 17, 62, 170, 77, 243, 61, 41, 214, 103, 190, 61, 205, 196, 62, 26, 137, 66, 191, 236, 97, 234, 188, 102, 162, 118, 190, 231, 67, 53, 190, 214, 21, 100, 61, 111, 113, 123, 190, 93, 253, 151, 190, 43, 48, 190, 61, 120, 230, 193, 188, 144, 170, 184, 190, 150, 110, 154, 190, 136, 40, 156, 191, 61, 84, 171, 62, 59, 61, 215, 190, 247, 226, 130, 61, 203, 239, 199, 62, 167, 248, 245, 189, 55, 3, 132, 62, 74, 158, 43, 62, 190, 243, 91, 190, 144, 165, 86, 190, 251, 181, 237, 61, 200, 61, 126, 188, 146, 96, 54, 190, 71, 221, 217, 189, 37, 84, 80, 62, 2, 182, 218, 60, 138, 35, 186, 190, 170, 247, 37, 190, 65, 208, 187, 62, 28, 30, 166, 190, 253, 40, 202, 62, 222, 38, 32, 191, 199, 37, 92, 189, 95, 253, 239, 61, 124, 194, 25, 62, 158, 58, 241, 61, 58, 69, 38, 190, 111, 160, 32, 191, 195, 198, 138, 190, 42, 212, 129, 61, 230, 243, 205, 190, 130, 19, 26, 62, 149, 224, 141, 191, 164, 210, 50, 62, 221, 177, 148, 60, 169, 100, 133, 62, 193, 156, 188, 188, 58, 228, 150, 190, 226, 142, 188, 62, 168, 156, 188, 190, 58, 65, 59, 191, 119, 237, 26, 191, 165, 210, 203, 61, 104, 73, 0, 191, 64, 119, 42, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 74, 183, 62, 19, 140, 140, 188, 125, 86, 40, 62, 77, 128, 47, 190, 249, 37, 179, 62, 9, 136, 147, 62, 6, 98, 144, 62, 113, 184, 225, 61, 7, 3, 70, 62, 112, 48, 195, 61, 101, 200, 12, 190, 32, 119, 71, 62, 114, 12, 166, 189, 228, 229, 152, 189, 48, 185, 251, 188, 35, 166, 52, 62, 246, 179, 190, 189, 19, 100, 130, 61, 44, 201, 143, 62, 239, 216, 126, 61, 196, 203, 13, 189, 153, 35, 218, 190, 147, 253, 98, 62, 190, 58, 249, 61, 108, 181, 107, 190, 30, 43, 0, 190, 181, 87, 42, 186, 111, 250, 52, 190, 84, 0, 179, 186, 41, 173, 0, 189, 138, 76, 140, 62, 133, 159, 191, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 104, 145, 61, 65, 138, 13, 63, 113, 153, 1, 191, 185, 139, 214, 60, 196, 178, 89, 62, 212, 136, 245, 190, 50, 42, 8, 191, 170, 231, 66, 190, 91, 245, 24, 191, 113, 57, 242, 189, 103, 82, 83, 63, 60, 221, 81, 191, 26, 10, 204, 190, 112, 143, 44, 190, 36, 222, 245, 62, 149, 131, 172, 62, 132, 253, 68, 189, 105, 221, 236, 62, 252, 134, 143, 190, 89, 125, 120, 188, 121, 250, 11, 61, 118, 200, 3, 191, 16, 34, 186, 62, 121, 174, 1, 62, 207, 111, 37, 63, 8, 213, 0, 188, 77, 81, 246, 189, 200, 131, 5, 190, 33, 15, 176, 189, 222, 226, 183, 189, 160, 176, 29, 191, 161, 9, 138, 191, 179, 208, 10, 190, 119, 235, 23, 62, 180, 38, 58, 62, 3, 82, 41, 190, 46, 116, 150, 190, 238, 252, 141, 189, 206, 161, 146, 190, 58, 247, 34, 189, 159, 119, 102, 61, 249, 73, 239, 61, 32, 145, 163, 62, 237, 233, 253, 189, 34, 84, 66, 188, 121, 255, 163, 190, 235, 208, 100, 62, 192, 229, 64, 190, 108, 246, 224, 189, 143, 165, 35, 62, 223, 16, 51, 190, 15, 84, 39, 61, 24, 173, 175, 190, 240, 109, 157, 61, 17, 12, 10, 190, 108, 19, 28, 63, 189, 159, 63, 62, 224, 13, 229, 61, 128, 55, 11, 61, 22, 183, 20, 190, 33, 47, 186, 61, 83, 17, 200, 61, 62, 85, 153, 62, 142, 110, 106, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 133, 137, 61, 73, 96, 100, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {134, 225, 8, 191, 229, 167, 219, 61, 24, 139, 144, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {136, 129, 183, 63, 127, 118, 78, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0065/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}