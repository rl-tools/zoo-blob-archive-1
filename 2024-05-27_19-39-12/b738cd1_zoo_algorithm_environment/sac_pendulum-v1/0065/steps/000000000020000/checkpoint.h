// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 37, 63, 191, 90, 100, 69, 63, 157, 218, 11, 190, 117, 73, 24, 62, 78, 99, 31, 191, 203, 240, 204, 62, 67, 198, 253, 62, 159, 191, 65, 191, 198, 157, 17, 190, 246, 128, 188, 189, 130, 163, 190, 63, 247, 170, 201, 62, 11, 93, 0, 63, 166, 18, 100, 190, 88, 77, 85, 189, 89, 182, 141, 190, 22, 130, 150, 62, 248, 144, 182, 190, 67, 180, 30, 63, 102, 38, 167, 191, 182, 162, 5, 190, 250, 105, 200, 190, 49, 115, 160, 191, 254, 250, 123, 190, 119, 92, 37, 191, 151, 132, 137, 63, 11, 198, 222, 62, 61, 7, 58, 63, 65, 12, 157, 190, 197, 66, 177, 190, 255, 68, 166, 62, 72, 74, 130, 63, 139, 234, 162, 62, 78, 194, 143, 62, 5, 235, 52, 62, 8, 32, 6, 189, 133, 89, 171, 190, 93, 47, 123, 62, 167, 237, 129, 60, 34, 254, 141, 191, 22, 96, 56, 62, 66, 193, 148, 62, 53, 134, 128, 191, 195, 189, 187, 189, 178, 134, 77, 63, 116, 36, 232, 62, 135, 135, 143, 191, 184, 103, 168, 190, 132, 90, 51, 63, 123, 195, 62, 190, 151, 60, 245, 62, 54, 165, 246, 62, 117, 135, 122, 191, 73, 25, 196, 189, 251, 17, 19, 191, 40, 245, 32, 63, 26, 161, 169, 188, 89, 216, 55, 191, 141, 97, 144, 63, 248, 58, 15, 63, 142, 85, 217, 190, 196, 156, 147, 191, 114, 91, 3, 190, 231, 252, 215, 62, 232, 178, 223, 62, 158, 221, 255, 62, 202, 99, 186, 187, 152, 178, 188, 190, 73, 94, 154, 190, 35, 219, 240, 62, 147, 74, 58, 191, 64, 209, 36, 63, 13, 137, 251, 189, 215, 113, 36, 63, 1, 4, 67, 190, 5, 124, 4, 63, 82, 103, 215, 63, 244, 60, 180, 62, 101, 33, 10, 63, 40, 57, 74, 63, 68, 193, 158, 190, 157, 106, 63, 63, 27, 28, 40, 191, 47, 189, 150, 190, 57, 134, 150, 62, 144, 195, 252, 190, 164, 72, 22, 63, 133, 72, 130, 191, 190, 150, 44, 189, 66, 203, 171, 62, 63, 63, 202, 62, 245, 130, 167, 190, 180, 96, 100, 189, 2, 242, 73, 63, 82, 134, 142, 63, 193, 38, 145, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 186, 209, 190, 83, 193, 48, 191, 66, 106, 28, 62, 8, 138, 51, 62, 203, 165, 22, 191, 67, 123, 111, 62, 77, 242, 176, 60, 11, 136, 207, 62, 231, 243, 113, 190, 147, 119, 192, 188, 40, 249, 124, 190, 111, 224, 40, 191, 117, 247, 45, 63, 155, 212, 38, 63, 190, 232, 46, 61, 136, 198, 127, 190, 116, 242, 133, 191, 178, 72, 130, 60, 53, 202, 56, 62, 242, 88, 126, 189, 176, 236, 235, 62, 208, 17, 178, 190, 15, 211, 23, 63, 121, 51, 142, 190, 92, 85, 5, 190, 182, 82, 70, 187, 70, 144, 254, 190, 217, 17, 214, 190, 149, 129, 54, 62, 33, 101, 234, 61, 156, 49, 107, 191, 203, 144, 90, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 28, 255, 61, 216, 172, 2, 189, 196, 187, 30, 188, 158, 222, 8, 190, 245, 31, 7, 191, 111, 237, 6, 189, 236, 3, 19, 62, 176, 130, 179, 61, 161, 78, 194, 188, 14, 76, 70, 62, 110, 99, 168, 190, 202, 99, 9, 62, 98, 46, 34, 189, 87, 119, 3, 189, 98, 198, 135, 61, 5, 218, 46, 62, 104, 207, 20, 62, 197, 192, 149, 61, 77, 128, 190, 190, 124, 199, 76, 189, 236, 195, 144, 189, 234, 56, 135, 189, 90, 2, 164, 188, 212, 82, 249, 189, 236, 170, 2, 190, 93, 155, 5, 191, 103, 161, 129, 62, 180, 53, 242, 61, 39, 228, 143, 62, 114, 241, 124, 190, 103, 162, 134, 190, 179, 207, 172, 188, 122, 59, 0, 62, 137, 35, 198, 189, 115, 41, 15, 62, 152, 129, 219, 61, 242, 193, 28, 190, 110, 39, 94, 190, 88, 117, 141, 190, 3, 123, 183, 191, 86, 127, 182, 61, 72, 141, 51, 61, 53, 243, 5, 62, 64, 55, 187, 61, 16, 218, 122, 61, 24, 180, 51, 189, 148, 18, 152, 60, 7, 36, 195, 189, 47, 204, 236, 61, 171, 32, 203, 190, 13, 125, 74, 190, 123, 77, 57, 62, 223, 250, 164, 191, 217, 27, 41, 61, 129, 231, 174, 190, 189, 131, 40, 190, 157, 117, 80, 62, 108, 166, 5, 63, 5, 36, 89, 189, 55, 67, 12, 62, 186, 18, 191, 190, 181, 81, 28, 190, 206, 59, 178, 61, 129, 100, 223, 62, 148, 136, 108, 190, 125, 15, 180, 62, 230, 170, 175, 188, 158, 237, 20, 61, 28, 244, 10, 60, 168, 171, 134, 62, 179, 85, 51, 191, 254, 156, 245, 190, 60, 87, 38, 190, 193, 49, 107, 190, 61, 223, 69, 61, 55, 228, 39, 188, 89, 180, 72, 62, 68, 18, 238, 189, 14, 80, 91, 190, 136, 27, 77, 191, 116, 4, 209, 62, 80, 168, 42, 191, 16, 181, 25, 188, 239, 61, 109, 190, 224, 237, 153, 190, 89, 73, 176, 62, 226, 157, 122, 62, 103, 18, 201, 62, 157, 44, 134, 190, 17, 191, 152, 62, 26, 155, 23, 62, 143, 225, 73, 191, 216, 154, 35, 190, 155, 237, 165, 190, 123, 63, 98, 190, 246, 215, 220, 61, 94, 128, 238, 189, 70, 118, 72, 186, 147, 176, 254, 189, 215, 171, 174, 61, 72, 7, 17, 62, 250, 186, 226, 189, 76, 107, 161, 61, 101, 81, 146, 189, 129, 10, 199, 189, 185, 226, 180, 188, 215, 251, 244, 61, 9, 67, 41, 62, 99, 59, 232, 189, 104, 24, 45, 190, 123, 72, 1, 62, 128, 15, 189, 189, 185, 168, 16, 190, 245, 160, 38, 62, 132, 233, 31, 62, 133, 24, 3, 190, 54, 133, 34, 61, 32, 179, 129, 61, 18, 205, 38, 190, 26, 4, 32, 190, 100, 23, 38, 190, 22, 136, 51, 190, 210, 57, 29, 190, 210, 15, 202, 60, 140, 221, 36, 190, 200, 0, 23, 62, 4, 243, 136, 60, 14, 137, 214, 189, 236, 68, 117, 61, 94, 243, 39, 190, 213, 54, 28, 62, 149, 126, 3, 188, 201, 138, 41, 191, 81, 72, 239, 189, 209, 150, 167, 187, 26, 29, 224, 187, 66, 140, 218, 61, 49, 18, 144, 62, 43, 18, 64, 190, 250, 97, 61, 61, 43, 112, 184, 62, 75, 94, 23, 62, 15, 67, 249, 61, 112, 97, 107, 189, 147, 10, 149, 188, 15, 236, 140, 62, 71, 253, 16, 190, 103, 20, 35, 62, 164, 220, 59, 62, 113, 31, 130, 189, 185, 60, 111, 62, 195, 189, 137, 190, 199, 61, 11, 190, 41, 62, 190, 190, 103, 10, 10, 62, 37, 69, 84, 62, 90, 108, 128, 62, 58, 4, 232, 61, 212, 218, 230, 189, 51, 19, 219, 59, 57, 110, 191, 189, 9, 4, 97, 190, 236, 218, 64, 189, 45, 221, 37, 62, 72, 189, 205, 188, 30, 92, 113, 62, 65, 19, 28, 190, 164, 54, 159, 190, 251, 104, 243, 190, 181, 48, 164, 188, 101, 241, 109, 62, 105, 149, 139, 58, 191, 28, 154, 62, 232, 7, 51, 190, 27, 29, 67, 191, 157, 192, 222, 190, 51, 161, 56, 190, 184, 55, 129, 190, 129, 134, 135, 62, 100, 144, 129, 190, 90, 188, 43, 61, 137, 41, 23, 62, 9, 0, 217, 188, 142, 195, 148, 62, 83, 240, 132, 190, 18, 17, 185, 62, 54, 15, 221, 59, 205, 190, 245, 190, 131, 139, 234, 189, 83, 53, 234, 190, 150, 229, 3, 62, 18, 142, 155, 62, 209, 13, 251, 189, 229, 11, 93, 189, 111, 72, 197, 61, 253, 211, 107, 189, 28, 243, 77, 191, 133, 180, 199, 62, 61, 135, 21, 190, 122, 187, 24, 188, 34, 40, 188, 190, 101, 49, 232, 189, 241, 0, 63, 62, 111, 215, 73, 189, 19, 65, 156, 62, 192, 138, 67, 190, 214, 193, 190, 190, 130, 89, 38, 189, 25, 177, 41, 190, 0, 88, 19, 61, 186, 19, 37, 62, 205, 160, 169, 190, 43, 5, 0, 60, 136, 9, 141, 62, 66, 137, 120, 61, 88, 250, 82, 62, 202, 143, 57, 190, 50, 95, 230, 62, 149, 6, 140, 190, 45, 118, 49, 191, 135, 61, 123, 62, 65, 236, 67, 190, 224, 185, 49, 190, 17, 148, 213, 62, 68, 51, 149, 62, 27, 125, 38, 62, 16, 175, 97, 190, 238, 229, 174, 189, 133, 213, 83, 190, 126, 182, 155, 61, 48, 2, 140, 190, 172, 238, 24, 191, 120, 255, 80, 190, 86, 165, 10, 62, 184, 239, 149, 61, 77, 128, 34, 190, 129, 215, 130, 62, 163, 28, 13, 190, 63, 83, 34, 189, 22, 197, 35, 191, 146, 14, 23, 62, 68, 125, 6, 62, 180, 44, 185, 61, 211, 225, 176, 189, 193, 199, 144, 190, 70, 43, 26, 62, 118, 242, 255, 59, 218, 45, 246, 61, 149, 127, 39, 62, 94, 217, 223, 60, 2, 244, 116, 189, 223, 197, 69, 191, 247, 92, 91, 62, 145, 63, 175, 189, 7, 238, 103, 61, 219, 79, 26, 61, 90, 225, 48, 190, 122, 252, 170, 62, 42, 106, 185, 190, 172, 14, 77, 190, 25, 110, 198, 61, 254, 117, 248, 62, 173, 231, 78, 191, 158, 37, 185, 190, 101, 10, 233, 190, 1, 85, 59, 190, 15, 20, 138, 62, 101, 78, 10, 61, 10, 210, 255, 60, 38, 92, 17, 190, 215, 121, 243, 189, 122, 78, 23, 191, 185, 83, 155, 62, 169, 85, 5, 191, 222, 30, 113, 62, 106, 62, 122, 190, 218, 193, 128, 190, 142, 228, 130, 62, 96, 111, 75, 62, 198, 115, 177, 62, 252, 115, 190, 189, 82, 236, 169, 62, 76, 62, 160, 189, 108, 158, 123, 191, 171, 170, 250, 188, 48, 91, 154, 190, 211, 127, 231, 190, 192, 1, 102, 62, 214, 184, 212, 61, 100, 203, 44, 190, 28, 26, 199, 61, 37, 253, 18, 190, 113, 215, 21, 62, 58, 35, 152, 61, 204, 150, 121, 61, 149, 190, 28, 190, 189, 188, 215, 61, 23, 184, 61, 190, 166, 47, 47, 188, 115, 120, 15, 62, 5, 135, 213, 61, 155, 247, 156, 189, 9, 24, 43, 190, 72, 147, 116, 61, 90, 36, 232, 61, 154, 224, 151, 189, 197, 235, 197, 189, 210, 20, 22, 190, 147, 227, 241, 189, 92, 111, 250, 188, 203, 78, 37, 190, 149, 224, 12, 187, 193, 252, 50, 190, 218, 69, 168, 189, 41, 128, 21, 189, 1, 126, 4, 62, 224, 227, 177, 187, 22, 104, 133, 189, 10, 45, 155, 189, 206, 206, 38, 190, 243, 138, 107, 189, 1, 39, 165, 62, 72, 231, 13, 62, 75, 129, 74, 191, 34, 193, 217, 190, 214, 1, 15, 189, 169, 104, 176, 62, 153, 107, 104, 190, 180, 144, 61, 191, 31, 178, 72, 62, 204, 42, 55, 191, 183, 216, 141, 184, 95, 191, 167, 190, 24, 20, 150, 190, 18, 87, 28, 190, 21, 46, 81, 62, 59, 61, 170, 61, 66, 184, 97, 62, 49, 191, 197, 189, 254, 118, 43, 190, 177, 189, 143, 190, 107, 211, 122, 190, 248, 236, 238, 189, 60, 84, 58, 63, 231, 13, 154, 189, 132, 241, 94, 191, 21, 84, 210, 62, 200, 111, 6, 63, 72, 99, 54, 62, 248, 154, 105, 190, 250, 213, 3, 190, 97, 250, 199, 189, 67, 113, 187, 190, 54, 135, 62, 63, 26, 127, 88, 62, 181, 219, 99, 191, 185, 238, 24, 63, 167, 253, 103, 62, 99, 194, 44, 189, 219, 105, 156, 62, 101, 180, 178, 191, 247, 206, 134, 189, 233, 44, 141, 189, 138, 178, 2, 189, 64, 160, 172, 188, 229, 153, 174, 190, 161, 170, 241, 190, 111, 245, 57, 62, 8, 164, 54, 190, 68, 165, 90, 62, 86, 127, 109, 61, 100, 166, 238, 191, 179, 82, 23, 63, 47, 156, 42, 191, 69, 124, 186, 61, 58, 48, 254, 188, 113, 167, 198, 190, 236, 243, 195, 190, 88, 228, 131, 189, 242, 211, 206, 61, 190, 77, 52, 191, 68, 173, 54, 61, 104, 42, 148, 62, 103, 8, 186, 191, 234, 63, 181, 62, 90, 3, 222, 188, 241, 237, 153, 60, 243, 20, 27, 188, 170, 43, 139, 190, 189, 172, 107, 191, 179, 17, 234, 61, 52, 58, 94, 62, 226, 88, 136, 61, 169, 87, 239, 188, 158, 82, 155, 190, 51, 209, 77, 61, 65, 33, 161, 189, 158, 237, 160, 61, 103, 103, 138, 61, 170, 53, 14, 62, 15, 48, 134, 190, 130, 135, 166, 62, 99, 117, 175, 62, 76, 129, 45, 62, 101, 59, 40, 62, 50, 190, 53, 191, 207, 177, 140, 190, 252, 87, 137, 190, 156, 202, 139, 189, 45, 193, 200, 190, 59, 62, 11, 191, 99, 115, 167, 61, 79, 31, 165, 58, 145, 181, 151, 62, 249, 199, 131, 61, 106, 250, 82, 191, 200, 118, 166, 62, 173, 189, 107, 62, 186, 13, 246, 61, 192, 76, 174, 61, 255, 57, 93, 191, 216, 183, 127, 189, 147, 11, 238, 61, 10, 107, 230, 190, 130, 182, 175, 189, 206, 231, 115, 62, 66, 130, 187, 189, 244, 113, 4, 190, 38, 11, 72, 60, 27, 88, 78, 188, 177, 176, 252, 189, 108, 135, 239, 190, 127, 80, 169, 61, 23, 233, 168, 61, 201, 50, 58, 62, 119, 128, 25, 190, 207, 215, 194, 60, 69, 182, 27, 61, 148, 198, 168, 61, 141, 38, 159, 62, 4, 247, 13, 62, 88, 104, 163, 61, 248, 136, 93, 60, 90, 106, 41, 190, 163, 171, 124, 62, 224, 48, 172, 190, 10, 167, 1, 61, 77, 127, 200, 62, 26, 110, 142, 62, 190, 33, 179, 190, 246, 14, 48, 62, 254, 38, 184, 61, 162, 233, 5, 191, 18, 172, 11, 190, 169, 253, 112, 62, 112, 238, 128, 62, 44, 145, 8, 63, 24, 190, 77, 62, 13, 59, 202, 190, 20, 9, 17, 190, 236, 89, 1, 62, 141, 252, 130, 62, 166, 92, 130, 61, 154, 44, 128, 61, 124, 233, 187, 190, 51, 158, 32, 62, 43, 25, 42, 190, 198, 253, 149, 61, 51, 226, 76, 62, 150, 31, 145, 190, 114, 213, 119, 190, 80, 105, 63, 190, 64, 228, 86, 62, 229, 229, 21, 191, 218, 202, 217, 61, 78, 75, 217, 62, 61, 85, 154, 62, 65, 44, 7, 63, 192, 64, 8, 190, 167, 128, 165, 190, 12, 108, 141, 184, 92, 175, 156, 190, 84, 54, 88, 62, 245, 225, 52, 190, 105, 137, 51, 191, 75, 217, 2, 188, 46, 37, 113, 60, 26, 209, 190, 61, 125, 74, 96, 61, 168, 187, 200, 61, 232, 170, 60, 191, 181, 157, 169, 61, 178, 108, 222, 61, 238, 43, 79, 62, 114, 227, 72, 62, 225, 192, 235, 61, 66, 240, 109, 190, 103, 228, 220, 60, 207, 52, 163, 188, 112, 141, 49, 61, 3, 148, 58, 62, 151, 121, 98, 190, 43, 167, 159, 61, 28, 101, 53, 190, 151, 3, 177, 189, 91, 41, 35, 191, 188, 245, 107, 60, 48, 62, 64, 61, 143, 240, 152, 62, 1, 87, 244, 62, 131, 28, 68, 190, 180, 68, 65, 190, 109, 99, 246, 187, 209, 187, 73, 190, 188, 56, 138, 60, 108, 249, 40, 190, 56, 220, 215, 59, 244, 54, 96, 61, 63, 210, 17, 190, 64, 15, 192, 186, 125, 110, 110, 60, 220, 97, 155, 189, 236, 225, 199, 61, 61, 202, 52, 189, 215, 142, 146, 189, 128, 48, 144, 61, 151, 29, 108, 188, 106, 81, 21, 190, 231, 145, 254, 60, 150, 10, 15, 190, 171, 28, 132, 61, 199, 34, 60, 188, 227, 147, 170, 189, 178, 104, 48, 190, 128, 251, 15, 190, 4, 137, 232, 61, 184, 229, 22, 190, 202, 78, 129, 189, 128, 38, 3, 189, 115, 224, 15, 189, 18, 17, 217, 61, 143, 82, 48, 60, 78, 171, 150, 61, 175, 130, 168, 61, 65, 144, 37, 63, 136, 231, 35, 190, 42, 142, 201, 62, 52, 168, 104, 190, 30, 132, 76, 190, 142, 71, 169, 190, 100, 117, 72, 62, 38, 35, 22, 63, 234, 50, 169, 189, 47, 12, 19, 189, 146, 23, 94, 191, 91, 252, 21, 190, 62, 215, 56, 62, 6, 35, 186, 62, 45, 76, 1, 62, 47, 195, 231, 61, 154, 162, 32, 190, 96, 84, 57, 62, 240, 253, 190, 61, 16, 24, 7, 190, 181, 218, 21, 63, 63, 66, 114, 190, 154, 22, 71, 190, 32, 67, 131, 189, 172, 156, 28, 62, 33, 60, 119, 191, 219, 127, 6, 191, 247, 240, 55, 62, 243, 220, 190, 61, 100, 76, 31, 62, 87, 114, 60, 190, 15, 105, 203, 189, 21, 149, 145, 190, 41, 168, 183, 187, 173, 21, 25, 189, 138, 240, 195, 61, 169, 87, 157, 190, 147, 127, 166, 62, 238, 71, 120, 188, 213, 159, 124, 191, 110, 224, 185, 190, 252, 62, 16, 62, 242, 73, 46, 61, 215, 129, 164, 188, 149, 223, 176, 188, 40, 124, 130, 58, 45, 9, 174, 190, 150, 161, 208, 190, 3, 10, 75, 190, 26, 84, 181, 61, 15, 240, 66, 62, 99, 253, 167, 189, 253, 127, 26, 190, 111, 146, 89, 62, 101, 24, 149, 60, 167, 134, 219, 61, 143, 75, 75, 190, 146, 188, 101, 62, 86, 178, 195, 189, 117, 140, 13, 191, 161, 51, 0, 62, 254, 46, 246, 190, 177, 142, 108, 190, 131, 137, 24, 62, 164, 85, 18, 189, 47, 48, 27, 190, 57, 105, 113, 189, 131, 12, 234, 189, 28, 132, 192, 61, 227, 82, 39, 190, 183, 196, 213, 188, 68, 172, 117, 59, 5, 88, 4, 190, 57, 180, 15, 61, 23, 152, 153, 188, 126, 85, 62, 190, 73, 187, 243, 189, 168, 70, 139, 61, 232, 38, 51, 61, 116, 57, 172, 61, 224, 1, 69, 190, 211, 191, 212, 189, 14, 14, 111, 188, 3, 209, 160, 189, 205, 176, 66, 190, 98, 116, 83, 189, 189, 78, 16, 190, 211, 213, 40, 190, 222, 117, 84, 61, 147, 16, 100, 189, 64, 54, 182, 61, 233, 70, 164, 61, 46, 252, 152, 61, 242, 98, 15, 190, 23, 214, 150, 189, 0, 225, 217, 61, 147, 150, 164, 61, 155, 185, 49, 190, 98, 116, 167, 62, 70, 155, 124, 191, 145, 222, 46, 191, 166, 207, 78, 62, 178, 72, 9, 62, 118, 252, 20, 190, 196, 162, 20, 190, 38, 71, 202, 62, 170, 44, 146, 191, 33, 65, 66, 190, 57, 220, 63, 60, 14, 109, 13, 191, 177, 230, 124, 190, 202, 135, 84, 61, 192, 221, 191, 188, 147, 11, 249, 61, 168, 75, 52, 190, 144, 243, 49, 189, 26, 58, 190, 190, 100, 55, 4, 191, 5, 9, 248, 61, 126, 22, 159, 190, 176, 131, 77, 190, 81, 252, 214, 190, 47, 11, 104, 62, 241, 235, 236, 188, 229, 64, 143, 190, 206, 116, 85, 190, 25, 244, 14, 62, 71, 156, 43, 62, 62, 18, 187, 60, 245, 118, 144, 62, 99, 162, 24, 189, 191, 38, 148, 189, 36, 215, 13, 63, 132, 56, 161, 190, 177, 143, 8, 62, 84, 116, 30, 62, 72, 174, 138, 62, 0, 82, 92, 62, 46, 146, 84, 61, 211, 114, 192, 189, 136, 32, 124, 190, 13, 55, 165, 190, 222, 43, 154, 62, 156, 101, 224, 62, 211, 194, 216, 61, 239, 51, 218, 61, 134, 94, 76, 191, 11, 251, 153, 189, 104, 160, 146, 61, 220, 141, 117, 188, 237, 35, 43, 62, 59, 198, 38, 62, 131, 75, 73, 62, 137, 175, 153, 190, 174, 222, 43, 62, 75, 92, 242, 62, 77, 87, 133, 62, 28, 192, 9, 62, 214, 58, 103, 62, 63, 49, 238, 190, 40, 113, 26, 62, 101, 223, 210, 189, 156, 60, 171, 62, 7, 230, 145, 62, 213, 7, 253, 190, 243, 19, 250, 61, 145, 64, 9, 62, 4, 2, 99, 62, 250, 114, 168, 62, 168, 143, 218, 60, 177, 101, 183, 190, 43, 19, 31, 190, 166, 230, 245, 62, 95, 247, 251, 62, 240, 144, 22, 62, 182, 255, 32, 190, 191, 102, 8, 191, 247, 37, 20, 62, 250, 187, 12, 62, 17, 87, 251, 61, 203, 212, 161, 62, 138, 216, 209, 190, 132, 25, 228, 61, 73, 60, 164, 190, 194, 242, 166, 189, 105, 111, 222, 190, 254, 253, 70, 62, 195, 100, 213, 61, 246, 94, 130, 62, 15, 176, 107, 62, 127, 79, 142, 189, 35, 25, 69, 190, 221, 121, 89, 189, 189, 219, 128, 190, 196, 63, 73, 190, 215, 249, 200, 61, 76, 211, 7, 61, 93, 226, 208, 61, 143, 35, 18, 191, 52, 184, 185, 62, 78, 81, 247, 190, 4, 174, 5, 189, 134, 8, 26, 62, 22, 254, 25, 61, 214, 242, 5, 62, 223, 202, 115, 190, 199, 85, 103, 190, 94, 177, 183, 190, 11, 125, 92, 190, 0, 139, 144, 190, 214, 147, 1, 61, 160, 124, 81, 190, 205, 44, 175, 62, 74, 170, 129, 61, 205, 181, 157, 189, 80, 93, 113, 62, 237, 142, 46, 59, 173, 12, 30, 189, 231, 160, 152, 60, 159, 240, 232, 190, 104, 34, 3, 190, 110, 253, 17, 191, 11, 35, 210, 189, 85, 9, 73, 62, 200, 75, 236, 58, 229, 81, 165, 62, 1, 155, 13, 191, 174, 46, 43, 62, 178, 190, 124, 61, 71, 183, 152, 61, 47, 72, 74, 191, 52, 248, 100, 191, 24, 180, 138, 190, 35, 117, 98, 190, 70, 252, 18, 62, 200, 153, 39, 62, 25, 65, 37, 190, 80, 50, 24, 190, 195, 123, 168, 189, 200, 194, 154, 190, 134, 202, 159, 62, 56, 113, 68, 191, 221, 34, 231, 61, 163, 234, 156, 189, 39, 123, 46, 191, 58, 136, 139, 62, 246, 197, 127, 189, 81, 17, 61, 62, 75, 31, 158, 187, 107, 199, 203, 62, 235, 69, 28, 189, 55, 253, 143, 190, 218, 202, 202, 61, 54, 149, 177, 190, 53, 56, 19, 187, 179, 213, 23, 62, 5, 65, 188, 61, 191, 196, 156, 189, 40, 239, 246, 189, 154, 191, 71, 190, 55, 34, 61, 189, 45, 182, 148, 190, 15, 57, 144, 60, 155, 227, 232, 61, 56, 245, 49, 61, 172, 114, 93, 190, 82, 209, 58, 190, 43, 36, 62, 188, 106, 230, 146, 59, 206, 157, 54, 190, 164, 48, 186, 61, 208, 49, 188, 61, 72, 144, 19, 61, 48, 216, 11, 189, 136, 206, 54, 189, 38, 52, 176, 189, 60, 56, 6, 62, 33, 90, 97, 190, 235, 83, 57, 190, 180, 254, 65, 188, 229, 148, 197, 189, 63, 79, 31, 190, 192, 176, 80, 190, 69, 195, 241, 189, 7, 111, 68, 61, 3, 237, 5, 190, 188, 88, 62, 189, 242, 98, 168, 190, 154, 219, 207, 189, 205, 60, 206, 61, 220, 223, 31, 61, 194, 210, 13, 189, 86, 245, 2, 190, 141, 150, 141, 188, 193, 174, 235, 61, 139, 80, 75, 61, 29, 124, 127, 189, 161, 204, 2, 62, 188, 9, 147, 189, 163, 165, 153, 61, 56, 217, 70, 190, 128, 184, 27, 190, 8, 95, 142, 189, 172, 132, 220, 189, 211, 202, 188, 189, 170, 107, 25, 189, 131, 230, 20, 62, 68, 200, 128, 61, 120, 63, 23, 190, 190, 252, 151, 61, 176, 3, 53, 190, 11, 129, 152, 189, 221, 68, 157, 189, 134, 5, 189, 61, 145, 120, 185, 188, 221, 54, 81, 190, 170, 63, 104, 60, 8, 26, 57, 190, 7, 247, 238, 60, 114, 102, 15, 189, 242, 15, 11, 62, 206, 8, 6, 190, 205, 70, 223, 189, 204, 250, 186, 188, 204, 82, 15, 188, 59, 128, 49, 61, 172, 136, 37, 190, 13, 43, 35, 62, 40, 45, 4, 190, 232, 211, 210, 188, 13, 177, 207, 189, 56, 34, 80, 61, 174, 171, 35, 190, 208, 16, 205, 189, 32, 43, 233, 184, 174, 33, 207, 189, 132, 251, 232, 189, 59, 247, 18, 61, 9, 159, 3, 190, 0, 96, 221, 60, 54, 115, 11, 190, 172, 75, 128, 61, 181, 76, 230, 188, 172, 148, 4, 189, 151, 126, 198, 61, 47, 57, 46, 62, 15, 30, 145, 187, 200, 49, 8, 190, 247, 90, 22, 62, 193, 120, 245, 187, 64, 130, 34, 189, 220, 244, 130, 188, 150, 101, 136, 62, 107, 158, 157, 60, 201, 253, 23, 191, 137, 185, 17, 190, 177, 93, 89, 189, 49, 61, 170, 62, 65, 16, 23, 191, 47, 14, 139, 190, 159, 240, 6, 61, 187, 226, 62, 191, 103, 220, 131, 190, 190, 19, 153, 189, 224, 167, 8, 190, 237, 153, 25, 62, 108, 20, 45, 62, 104, 77, 62, 61, 73, 43, 122, 188, 35, 136, 214, 190, 115, 242, 131, 62, 134, 188, 3, 62, 0, 160, 168, 59, 7, 155, 54, 190, 250, 175, 247, 61, 84, 200, 13, 190, 46, 68, 154, 62, 186, 71, 150, 190, 7, 200, 136, 190, 162, 180, 44, 189, 118, 177, 26, 62, 13, 183, 134, 61, 47, 126, 234, 61, 11, 158, 129, 190, 251, 201, 45, 62, 1, 243, 97, 189, 72, 215, 8, 190, 119, 153, 118, 189, 205, 192, 160, 189, 2, 76, 245, 189, 181, 140, 151, 61, 133, 39, 138, 189, 133, 79, 155, 61, 106, 102, 134, 188, 217, 186, 226, 189, 96, 116, 179, 60, 220, 163, 218, 61, 241, 211, 0, 190, 181, 84, 30, 190, 209, 117, 183, 189, 248, 113, 47, 190, 5, 235, 203, 60, 197, 62, 59, 188, 182, 155, 204, 189, 6, 186, 207, 189, 99, 196, 219, 61, 240, 94, 2, 62, 143, 12, 30, 188, 255, 234, 28, 190, 165, 225, 223, 61, 99, 92, 32, 190, 71, 18, 60, 190, 36, 220, 38, 190, 158, 174, 73, 61, 20, 118, 229, 189, 210, 127, 159, 189, 238, 126, 106, 189, 205, 219, 57, 63, 92, 185, 210, 61, 255, 74, 105, 190, 174, 239, 24, 62, 57, 162, 100, 61, 155, 72, 98, 190, 179, 206, 211, 62, 235, 171, 167, 191, 86, 79, 223, 188, 219, 73, 19, 190, 231, 67, 53, 190, 118, 140, 135, 61, 156, 118, 167, 190, 5, 214, 105, 60, 225, 52, 158, 61, 94, 139, 94, 62, 38, 129, 187, 190, 41, 208, 162, 190, 253, 151, 137, 191, 97, 44, 190, 62, 216, 51, 2, 191, 64, 222, 33, 61, 126, 211, 217, 62, 164, 67, 234, 189, 71, 24, 8, 63, 146, 37, 124, 62, 165, 105, 144, 190, 66, 255, 193, 190, 73, 4, 64, 62, 200, 61, 126, 188, 238, 46, 29, 190, 90, 44, 4, 190, 38, 132, 63, 62, 86, 205, 20, 61, 210, 246, 210, 190, 81, 125, 34, 190, 103, 88, 164, 62, 29, 55, 166, 190, 49, 132, 220, 62, 119, 4, 92, 191, 33, 204, 152, 189, 13, 63, 84, 62, 124, 194, 25, 62, 239, 93, 203, 61, 2, 86, 186, 190, 65, 168, 101, 191, 160, 251, 152, 190, 105, 59, 137, 61, 242, 106, 232, 190, 245, 52, 21, 62, 47, 172, 205, 191, 198, 70, 95, 62, 117, 3, 45, 59, 133, 249, 112, 62, 104, 244, 153, 190, 159, 68, 179, 190, 99, 183, 1, 63, 54, 35, 216, 190, 141, 27, 86, 191, 33, 157, 106, 191, 1, 247, 118, 189, 104, 73, 0, 191, 129, 148, 38, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 186, 164, 62, 145, 104, 182, 189, 77, 87, 91, 62, 77, 128, 47, 190, 179, 126, 184, 62, 91, 62, 160, 62, 96, 128, 150, 62, 121, 174, 133, 61, 143, 251, 83, 62, 112, 48, 195, 61, 100, 62, 91, 190, 92, 244, 108, 62, 132, 63, 69, 60, 40, 127, 84, 187, 156, 94, 99, 189, 131, 222, 234, 61, 216, 233, 201, 189, 102, 217, 180, 61, 60, 250, 155, 62, 26, 25, 105, 61, 246, 129, 70, 189, 25, 175, 210, 190, 150, 133, 116, 62, 113, 46, 85, 61, 108, 87, 214, 190, 103, 83, 15, 190, 15, 120, 84, 188, 103, 183, 57, 190, 165, 212, 189, 189, 41, 173, 0, 189, 110, 206, 163, 62, 18, 14, 188, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 66, 178, 60, 76, 173, 29, 63, 197, 230, 52, 191, 185, 139, 214, 60, 175, 60, 29, 62, 71, 206, 220, 190, 146, 254, 252, 190, 19, 84, 206, 189, 133, 106, 71, 191, 113, 57, 242, 189, 87, 247, 155, 63, 207, 14, 89, 191, 218, 228, 35, 191, 225, 13, 212, 189, 223, 137, 231, 62, 89, 21, 130, 62, 59, 7, 69, 189, 104, 206, 40, 63, 67, 160, 127, 190, 155, 155, 118, 188, 170, 32, 132, 61, 88, 20, 29, 191, 6, 63, 172, 62, 147, 110, 192, 61, 215, 218, 51, 63, 66, 118, 109, 189, 125, 87, 215, 189, 202, 124, 5, 190, 235, 58, 8, 190, 222, 226, 183, 189, 249, 211, 39, 191, 33, 180, 169, 191, 33, 185, 166, 190, 106, 244, 40, 60, 253, 47, 105, 62, 3, 82, 41, 190, 101, 68, 224, 190, 33, 57, 225, 189, 51, 153, 196, 190, 206, 31, 195, 189, 154, 47, 226, 60, 249, 73, 239, 61, 235, 136, 247, 188, 31, 242, 140, 189, 172, 230, 70, 61, 151, 59, 4, 191, 219, 234, 94, 62, 238, 112, 124, 190, 182, 159, 224, 189, 213, 226, 217, 61, 156, 178, 1, 190, 194, 51, 39, 61, 225, 83, 59, 191, 19, 112, 177, 187, 117, 78, 17, 190, 77, 60, 39, 63, 81, 50, 16, 62, 252, 173, 183, 61, 102, 235, 24, 61, 235, 182, 20, 190, 55, 94, 110, 62, 83, 17, 200, 61, 223, 18, 161, 62, 232, 39, 55, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 68, 106, 61, 96, 214, 240, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {202, 222, 254, 62, 81, 142, 112, 191, 219, 104, 181, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {163, 22, 138, 63, 10, 182, 4, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0065/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}