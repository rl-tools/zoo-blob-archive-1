// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 194, 168, 190, 130, 216, 107, 63, 167, 17, 89, 190, 93, 213, 138, 61, 218, 107, 12, 191, 65, 33, 215, 62, 41, 228, 28, 63, 153, 172, 26, 191, 172, 210, 221, 189, 78, 174, 149, 61, 37, 65, 124, 63, 34, 42, 3, 63, 248, 111, 246, 62, 205, 99, 205, 190, 223, 199, 166, 189, 172, 135, 237, 190, 77, 136, 194, 62, 234, 246, 177, 190, 95, 224, 42, 63, 243, 242, 132, 191, 222, 82, 159, 190, 94, 155, 167, 190, 132, 245, 135, 191, 183, 181, 36, 190, 225, 221, 181, 190, 100, 89, 108, 63, 157, 55, 201, 62, 191, 237, 84, 63, 94, 111, 139, 190, 19, 60, 192, 190, 200, 36, 173, 62, 124, 1, 52, 63, 142, 38, 180, 62, 78, 194, 143, 62, 5, 235, 52, 62, 8, 32, 6, 189, 207, 247, 130, 188, 13, 155, 34, 62, 222, 77, 174, 60, 34, 240, 90, 191, 158, 151, 194, 62, 192, 109, 97, 62, 230, 208, 13, 191, 123, 206, 81, 190, 136, 85, 87, 63, 178, 12, 236, 62, 207, 59, 137, 191, 251, 39, 146, 190, 53, 184, 6, 63, 57, 148, 51, 190, 55, 98, 7, 63, 93, 67, 225, 62, 60, 76, 123, 191, 188, 150, 18, 189, 101, 148, 248, 190, 238, 104, 40, 63, 129, 183, 209, 189, 190, 158, 138, 190, 245, 217, 118, 63, 98, 159, 55, 63, 155, 153, 153, 190, 199, 243, 137, 191, 120, 200, 188, 189, 60, 197, 232, 62, 76, 150, 213, 62, 201, 72, 244, 62, 191, 22, 80, 62, 149, 211, 220, 190, 194, 112, 190, 190, 198, 251, 183, 62, 107, 196, 15, 191, 224, 183, 243, 62, 39, 225, 16, 190, 180, 140, 30, 63, 15, 236, 63, 190, 211, 212, 9, 63, 180, 128, 173, 63, 1, 123, 178, 62, 116, 78, 250, 62, 69, 248, 72, 63, 40, 68, 155, 190, 117, 249, 52, 63, 51, 75, 55, 191, 36, 118, 106, 190, 202, 155, 202, 62, 221, 170, 204, 190, 145, 184, 183, 62, 20, 104, 129, 191, 40, 196, 247, 60, 49, 128, 137, 62, 193, 150, 208, 62, 253, 169, 173, 190, 229, 35, 144, 189, 123, 236, 82, 63, 130, 229, 85, 63, 132, 78, 165, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {124, 246, 154, 190, 37, 85, 234, 190, 204, 239, 101, 62, 171, 205, 82, 62, 23, 249, 249, 190, 184, 246, 13, 62, 108, 102, 63, 61, 186, 60, 226, 62, 80, 138, 212, 190, 220, 99, 73, 62, 62, 77, 31, 190, 111, 224, 40, 191, 97, 95, 83, 63, 108, 53, 243, 62, 93, 205, 250, 190, 105, 143, 84, 190, 80, 72, 68, 191, 60, 232, 59, 61, 13, 123, 176, 61, 49, 130, 150, 190, 251, 66, 214, 62, 215, 181, 79, 190, 147, 243, 47, 63, 160, 42, 162, 190, 21, 103, 138, 189, 31, 66, 143, 189, 234, 166, 217, 190, 135, 249, 196, 190, 222, 134, 95, 62, 123, 188, 244, 60, 77, 241, 103, 191, 185, 252, 116, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {126, 44, 236, 61, 137, 43, 189, 189, 35, 136, 30, 59, 223, 16, 76, 62, 29, 173, 246, 190, 173, 161, 0, 189, 56, 190, 20, 62, 80, 162, 229, 61, 87, 132, 34, 62, 60, 149, 70, 62, 233, 67, 124, 188, 202, 99, 9, 62, 185, 153, 84, 61, 198, 85, 4, 62, 163, 58, 14, 62, 15, 233, 49, 62, 221, 168, 136, 61, 174, 83, 177, 58, 212, 228, 97, 190, 217, 171, 132, 61, 33, 186, 77, 188, 26, 42, 11, 189, 67, 144, 75, 60, 42, 173, 47, 190, 7, 86, 22, 190, 144, 81, 147, 190, 171, 4, 37, 187, 83, 247, 46, 61, 139, 238, 178, 62, 46, 21, 200, 189, 221, 141, 135, 190, 94, 26, 8, 61, 232, 121, 6, 62, 188, 23, 213, 188, 13, 49, 10, 62, 3, 130, 162, 61, 2, 148, 26, 190, 24, 241, 143, 60, 177, 5, 193, 190, 80, 135, 63, 191, 231, 160, 124, 61, 165, 116, 171, 189, 28, 184, 132, 61, 64, 55, 187, 61, 61, 17, 232, 61, 199, 41, 17, 60, 122, 190, 9, 61, 123, 98, 223, 188, 38, 204, 149, 61, 60, 187, 38, 191, 231, 194, 224, 189, 95, 246, 20, 62, 49, 229, 71, 191, 216, 122, 197, 61, 40, 53, 63, 190, 194, 17, 140, 189, 54, 50, 63, 62, 58, 37, 202, 62, 81, 182, 100, 189, 97, 18, 29, 190, 78, 217, 130, 190, 246, 204, 158, 189, 206, 59, 178, 61, 52, 165, 158, 62, 208, 7, 31, 190, 225, 241, 145, 62, 240, 223, 193, 61, 184, 157, 225, 61, 237, 196, 159, 188, 138, 169, 137, 62, 240, 118, 196, 190, 154, 77, 128, 190, 233, 11, 175, 189, 170, 233, 46, 190, 183, 155, 25, 62, 55, 228, 39, 188, 11, 235, 59, 62, 68, 147, 210, 189, 154, 44, 82, 190, 87, 149, 215, 190, 106, 223, 168, 62, 161, 103, 197, 190, 42, 15, 194, 60, 113, 150, 38, 190, 160, 222, 118, 190, 246, 144, 167, 62, 230, 26, 109, 62, 61, 64, 178, 62, 3, 195, 126, 190, 45, 52, 151, 62, 184, 5, 79, 62, 114, 154, 22, 191, 111, 161, 83, 190, 22, 5, 183, 190, 123, 63, 98, 190, 169, 17, 142, 60, 94, 128, 238, 189, 70, 118, 72, 186, 147, 176, 254, 189, 215, 171, 174, 61, 72, 7, 17, 62, 250, 186, 226, 189, 76, 107, 161, 61, 101, 81, 146, 189, 129, 10, 199, 189, 185, 226, 180, 188, 215, 251, 244, 61, 9, 67, 41, 62, 99, 59, 232, 189, 104, 24, 45, 190, 123, 72, 1, 62, 128, 15, 189, 189, 185, 168, 16, 190, 245, 160, 38, 62, 132, 233, 31, 62, 133, 24, 3, 190, 54, 133, 34, 61, 32, 179, 129, 61, 18, 205, 38, 190, 26, 4, 32, 190, 100, 23, 38, 190, 22, 136, 51, 190, 210, 57, 29, 190, 210, 15, 202, 60, 140, 221, 36, 190, 200, 0, 23, 62, 4, 243, 136, 60, 14, 137, 214, 189, 127, 67, 125, 60, 51, 141, 67, 190, 97, 231, 35, 62, 164, 200, 72, 60, 83, 199, 34, 191, 187, 79, 28, 190, 253, 106, 154, 187, 176, 95, 178, 189, 174, 86, 234, 61, 18, 51, 133, 62, 83, 101, 11, 190, 250, 97, 61, 61, 219, 50, 170, 62, 122, 117, 204, 61, 123, 122, 13, 62, 128, 134, 56, 189, 191, 189, 193, 188, 40, 105, 104, 62, 91, 49, 22, 190, 132, 110, 241, 61, 85, 70, 76, 62, 4, 32, 202, 188, 8, 47, 92, 62, 152, 166, 123, 190, 58, 50, 54, 190, 187, 209, 168, 190, 0, 183, 143, 189, 100, 110, 34, 62, 113, 113, 149, 62, 71, 2, 20, 62, 163, 215, 234, 189, 183, 76, 86, 188, 195, 239, 35, 190, 13, 44, 135, 189, 61, 87, 120, 189, 194, 185, 234, 61, 128, 253, 6, 62, 167, 58, 26, 62, 102, 197, 6, 190, 67, 146, 191, 189, 183, 208, 139, 190, 82, 203, 134, 58, 248, 65, 78, 62, 105, 149, 139, 58, 92, 42, 157, 62, 112, 184, 67, 189, 93, 253, 191, 190, 9, 44, 190, 190, 232, 136, 19, 190, 130, 242, 135, 190, 175, 155, 87, 62, 30, 227, 15, 189, 243, 6, 4, 190, 77, 135, 155, 59, 153, 157, 201, 187, 44, 180, 59, 189, 134, 155, 155, 190, 214, 246, 167, 62, 110, 172, 15, 62, 26, 40, 219, 190, 0, 128, 49, 190, 87, 192, 31, 62, 150, 229, 3, 62, 137, 158, 142, 62, 39, 168, 234, 189, 210, 153, 116, 189, 246, 52, 125, 61, 86, 112, 35, 190, 115, 158, 6, 191, 69, 161, 176, 62, 101, 230, 48, 190, 55, 131, 167, 61, 125, 52, 238, 190, 10, 212, 180, 189, 112, 145, 10, 62, 111, 215, 73, 189, 247, 28, 162, 62, 26, 163, 242, 189, 60, 5, 183, 190, 105, 246, 175, 189, 113, 3, 207, 189, 155, 169, 221, 188, 135, 62, 4, 62, 246, 170, 174, 190, 228, 226, 145, 189, 116, 47, 11, 62, 42, 39, 188, 61, 131, 62, 70, 61, 33, 80, 54, 190, 21, 210, 187, 62, 161, 49, 194, 189, 248, 229, 44, 191, 217, 53, 59, 62, 225, 44, 186, 189, 224, 185, 49, 190, 74, 51, 201, 62, 4, 88, 84, 62, 34, 82, 68, 62, 251, 150, 58, 190, 10, 121, 22, 61, 73, 89, 24, 190, 33, 214, 198, 188, 10, 100, 86, 190, 21, 154, 227, 190, 37, 126, 68, 189, 197, 251, 50, 62, 175, 101, 116, 62, 77, 128, 34, 190, 250, 46, 150, 62, 239, 131, 102, 59, 22, 60, 137, 61, 131, 31, 10, 191, 139, 73, 27, 62, 80, 60, 54, 62, 74, 24, 153, 61, 176, 53, 158, 61, 200, 71, 141, 190, 231, 199, 89, 62, 239, 13, 179, 60, 29, 127, 246, 61, 25, 47, 111, 61, 80, 227, 222, 61, 224, 209, 236, 60, 138, 195, 46, 191, 139, 112, 100, 62, 114, 121, 212, 60, 7, 238, 103, 61, 69, 121, 151, 61, 17, 193, 50, 190, 220, 108, 115, 62, 210, 193, 3, 190, 243, 169, 157, 189, 101, 36, 137, 61, 62, 57, 223, 62, 51, 189, 221, 190, 164, 67, 152, 190, 112, 106, 167, 190, 195, 87, 238, 189, 52, 115, 205, 62, 101, 78, 10, 61, 237, 199, 166, 61, 73, 69, 144, 189, 54, 191, 236, 189, 104, 166, 203, 190, 223, 103, 91, 62, 234, 46, 94, 190, 198, 74, 126, 62, 30, 75, 24, 190, 86, 94, 152, 190, 112, 225, 120, 62, 98, 19, 68, 62, 130, 238, 137, 62, 72, 192, 10, 190, 255, 134, 210, 62, 134, 10, 98, 189, 239, 123, 59, 191, 122, 89, 179, 189, 197, 92, 159, 190, 211, 127, 231, 190, 163, 88, 88, 62, 214, 184, 212, 61, 100, 203, 44, 190, 28, 26, 199, 61, 37, 253, 18, 190, 113, 215, 21, 62, 58, 35, 152, 61, 204, 150, 121, 61, 149, 190, 28, 190, 189, 188, 215, 61, 23, 184, 61, 190, 166, 47, 47, 188, 115, 120, 15, 62, 5, 135, 213, 61, 155, 247, 156, 189, 9, 24, 43, 190, 72, 147, 116, 61, 90, 36, 232, 61, 154, 224, 151, 189, 197, 235, 197, 189, 210, 20, 22, 190, 147, 227, 241, 189, 92, 111, 250, 188, 203, 78, 37, 190, 149, 224, 12, 187, 193, 252, 50, 190, 218, 69, 168, 189, 41, 128, 21, 189, 1, 126, 4, 62, 224, 227, 177, 187, 22, 104, 133, 189, 10, 45, 155, 189, 206, 206, 38, 190, 27, 153, 39, 190, 220, 67, 192, 62, 249, 83, 27, 62, 34, 42, 192, 190, 181, 131, 16, 191, 35, 121, 169, 189, 244, 195, 164, 62, 101, 180, 59, 190, 69, 11, 8, 190, 154, 237, 125, 62, 150, 107, 142, 190, 183, 216, 141, 184, 150, 211, 131, 190, 99, 249, 12, 190, 14, 75, 74, 189, 82, 39, 68, 62, 50, 241, 33, 62, 117, 198, 63, 62, 109, 181, 39, 190, 150, 69, 0, 189, 156, 82, 81, 190, 192, 121, 131, 190, 196, 222, 127, 189, 108, 118, 3, 63, 83, 65, 149, 189, 149, 210, 220, 190, 74, 190, 232, 62, 234, 2, 233, 62, 208, 247, 32, 61, 145, 105, 220, 189, 60, 125, 7, 190, 176, 237, 187, 58, 205, 239, 166, 190, 41, 110, 170, 62, 210, 43, 219, 60, 8, 65, 12, 191, 116, 115, 26, 63, 217, 58, 167, 62, 201, 110, 48, 190, 160, 29, 130, 62, 26, 184, 99, 191, 63, 33, 79, 189, 233, 44, 141, 189, 138, 178, 2, 189, 89, 8, 37, 189, 157, 101, 111, 189, 165, 131, 7, 191, 167, 182, 178, 61, 76, 48, 160, 189, 219, 84, 65, 60, 184, 107, 238, 61, 242, 41, 191, 191, 73, 48, 6, 63, 69, 236, 86, 190, 9, 17, 216, 61, 75, 82, 37, 190, 215, 114, 185, 190, 229, 135, 197, 61, 126, 178, 233, 59, 59, 25, 169, 61, 74, 151, 52, 191, 0, 177, 28, 62, 141, 145, 149, 62, 79, 37, 2, 191, 138, 138, 103, 62, 227, 232, 211, 189, 176, 238, 74, 190, 30, 98, 109, 189, 244, 252, 108, 190, 144, 167, 3, 191, 229, 197, 164, 189, 70, 5, 128, 62, 144, 76, 212, 189, 77, 122, 121, 189, 185, 116, 93, 190, 51, 209, 77, 61, 188, 188, 154, 189, 137, 92, 120, 62, 89, 49, 246, 58, 247, 141, 214, 60, 127, 37, 171, 189, 67, 223, 85, 62, 34, 218, 1, 62, 128, 49, 40, 62, 114, 34, 55, 62, 73, 133, 230, 190, 21, 113, 90, 190, 17, 36, 102, 190, 87, 139, 2, 189, 113, 223, 210, 190, 54, 118, 241, 190, 95, 202, 157, 58, 191, 64, 89, 61, 210, 5, 196, 62, 249, 199, 131, 61, 35, 126, 4, 191, 86, 38, 34, 62, 105, 224, 27, 62, 215, 156, 179, 61, 211, 142, 16, 62, 227, 211, 18, 191, 25, 126, 125, 190, 207, 61, 237, 61, 236, 147, 155, 190, 58, 126, 87, 61, 35, 197, 102, 62, 18, 43, 25, 59, 244, 113, 4, 190, 202, 14, 171, 188, 79, 38, 36, 61, 185, 181, 143, 189, 118, 58, 206, 190, 113, 242, 125, 60, 66, 236, 83, 60, 124, 73, 187, 60, 163, 49, 74, 189, 245, 245, 19, 190, 177, 84, 128, 188, 62, 143, 156, 61, 46, 10, 50, 62, 6, 108, 71, 189, 86, 231, 0, 62, 102, 149, 89, 189, 151, 20, 37, 190, 0, 166, 35, 62, 150, 58, 124, 190, 10, 167, 1, 61, 155, 63, 187, 62, 214, 112, 113, 62, 6, 241, 132, 190, 107, 251, 73, 62, 213, 73, 50, 62, 131, 30, 39, 191, 4, 237, 42, 190, 170, 186, 104, 62, 55, 79, 79, 62, 51, 236, 252, 62, 183, 90, 79, 62, 40, 242, 138, 190, 20, 9, 17, 190, 49, 164, 192, 61, 211, 145, 22, 62, 165, 34, 165, 61, 23, 239, 85, 61, 228, 210, 110, 190, 226, 80, 59, 62, 118, 171, 139, 190, 97, 167, 207, 60, 91, 51, 74, 62, 92, 177, 58, 190, 193, 144, 138, 190, 44, 135, 205, 189, 14, 28, 87, 62, 55, 129, 236, 190, 42, 100, 187, 60, 86, 204, 205, 62, 214, 235, 170, 62, 157, 177, 237, 62, 248, 56, 11, 190, 114, 83, 135, 190, 227, 65, 114, 61, 138, 26, 157, 190, 129, 7, 134, 62, 219, 152, 13, 189, 170, 239, 53, 191, 144, 139, 226, 60, 84, 231, 124, 61, 101, 189, 126, 60, 46, 200, 240, 61, 2, 41, 13, 62, 242, 245, 18, 191, 181, 157, 169, 61, 212, 54, 25, 62, 110, 68, 5, 62, 240, 168, 30, 62, 178, 230, 43, 62, 239, 71, 47, 190, 117, 27, 86, 61, 30, 193, 158, 61, 248, 55, 158, 185, 133, 215, 105, 62, 151, 162, 22, 190, 50, 181, 217, 61, 67, 53, 209, 189, 83, 224, 225, 60, 210, 50, 228, 190, 60, 55, 160, 189, 200, 186, 132, 61, 100, 202, 178, 62, 199, 190, 201, 62, 205, 133, 70, 190, 95, 14, 220, 189, 109, 99, 246, 187, 242, 69, 59, 190, 188, 56, 138, 60, 248, 7, 31, 190, 56, 220, 215, 59, 244, 54, 96, 61, 63, 210, 17, 190, 245, 114, 176, 58, 88, 203, 193, 60, 220, 97, 155, 189, 18, 27, 212, 61, 61, 202, 52, 189, 122, 124, 134, 189, 246, 252, 173, 61, 80, 170, 149, 60, 106, 81, 21, 190, 5, 254, 47, 61, 5, 250, 14, 190, 189, 204, 133, 61, 75, 40, 243, 59, 19, 157, 159, 189, 221, 231, 36, 190, 27, 209, 15, 190, 22, 40, 7, 62, 184, 229, 22, 190, 170, 225, 114, 189, 128, 38, 3, 189, 115, 224, 15, 189, 70, 241, 249, 61, 0, 100, 210, 60, 78, 171, 150, 61, 110, 101, 177, 61, 214, 16, 33, 63, 252, 72, 171, 189, 105, 225, 143, 62, 242, 240, 56, 62, 212, 195, 211, 190, 225, 77, 221, 190, 175, 203, 169, 61, 211, 125, 205, 62, 217, 24, 10, 62, 148, 104, 89, 189, 247, 67, 177, 190, 91, 252, 21, 190, 229, 88, 9, 62, 181, 14, 138, 62, 199, 219, 44, 62, 213, 33, 0, 61, 124, 52, 104, 189, 49, 157, 29, 61, 51, 132, 135, 189, 62, 246, 226, 189, 99, 125, 199, 62, 194, 79, 98, 190, 144, 63, 110, 190, 140, 36, 78, 190, 242, 4, 81, 62, 84, 229, 6, 191, 201, 23, 20, 191, 214, 95, 178, 61, 16, 37, 55, 60, 163, 36, 232, 61, 119, 82, 63, 190, 110, 144, 62, 189, 21, 207, 163, 190, 173, 141, 102, 60, 106, 76, 126, 189, 193, 194, 140, 61, 200, 115, 44, 190, 150, 255, 98, 62, 236, 139, 152, 186, 225, 59, 202, 190, 60, 190, 89, 190, 115, 63, 35, 62, 195, 34, 172, 61, 215, 129, 164, 188, 98, 141, 4, 189, 231, 11, 213, 60, 74, 92, 76, 190, 193, 79, 167, 190, 143, 9, 240, 189, 124, 79, 105, 61, 191, 113, 173, 61, 106, 136, 134, 61, 220, 183, 173, 190, 80, 246, 9, 62, 215, 202, 69, 61, 158, 237, 151, 189, 178, 190, 130, 190, 11, 175, 93, 62, 55, 125, 154, 188, 163, 175, 5, 191, 50, 160, 122, 61, 231, 198, 139, 190, 177, 142, 108, 190, 90, 126, 13, 62, 164, 85, 18, 189, 47, 48, 27, 190, 26, 120, 98, 189, 80, 182, 232, 189, 28, 132, 192, 61, 227, 82, 39, 190, 164, 93, 189, 188, 68, 172, 117, 59, 5, 88, 4, 190, 87, 62, 34, 61, 203, 153, 148, 188, 126, 85, 62, 190, 12, 75, 239, 189, 168, 70, 139, 61, 232, 38, 51, 61, 27, 141, 174, 61, 224, 1, 69, 190, 40, 63, 208, 189, 14, 14, 111, 188, 3, 209, 160, 189, 193, 158, 66, 190, 132, 246, 82, 189, 2, 58, 12, 190, 211, 213, 40, 190, 222, 117, 84, 61, 251, 58, 87, 189, 131, 216, 184, 61, 29, 203, 167, 61, 100, 231, 155, 61, 242, 98, 15, 190, 23, 214, 150, 189, 50, 51, 229, 61, 167, 15, 108, 61, 213, 27, 49, 190, 26, 101, 178, 62, 210, 188, 162, 189, 77, 251, 22, 191, 212, 214, 21, 62, 69, 131, 6, 62, 74, 10, 1, 190, 89, 210, 18, 190, 156, 132, 154, 62, 226, 230, 136, 190, 33, 65, 66, 190, 40, 195, 165, 61, 93, 26, 229, 189, 28, 71, 53, 190, 218, 101, 241, 188, 156, 216, 14, 189, 12, 58, 147, 61, 55, 237, 216, 189, 187, 112, 150, 188, 192, 133, 158, 190, 233, 188, 118, 188, 87, 147, 142, 61, 121, 172, 45, 190, 199, 28, 112, 190, 47, 145, 25, 190, 49, 84, 171, 59, 123, 101, 41, 190, 180, 134, 21, 60, 123, 83, 82, 190, 144, 120, 13, 62, 26, 231, 134, 62, 36, 155, 190, 61, 48, 176, 52, 62, 121, 55, 7, 190, 4, 84, 153, 186, 229, 8, 17, 63, 189, 166, 8, 190, 83, 215, 104, 60, 245, 139, 88, 62, 127, 23, 131, 62, 167, 234, 11, 62, 233, 174, 2, 60, 211, 114, 192, 189, 96, 178, 22, 190, 69, 119, 66, 190, 31, 230, 135, 62, 84, 61, 180, 62, 65, 184, 84, 189, 104, 50, 114, 61, 192, 230, 245, 190, 123, 52, 122, 189, 195, 227, 232, 61, 97, 91, 138, 189, 63, 43, 19, 62, 207, 199, 178, 61, 116, 20, 239, 61, 82, 205, 74, 190, 149, 60, 13, 189, 14, 137, 196, 62, 165, 83, 82, 62, 135, 150, 33, 62, 114, 34, 106, 62, 213, 14, 200, 190, 55, 218, 22, 62, 67, 192, 12, 189, 93, 53, 178, 62, 152, 171, 66, 62, 113, 3, 5, 191, 89, 83, 235, 61, 31, 142, 24, 62, 9, 109, 7, 62, 212, 107, 121, 62, 165, 24, 140, 60, 139, 164, 205, 190, 43, 19, 31, 190, 226, 200, 216, 62, 164, 208, 157, 62, 123, 167, 0, 62, 177, 88, 246, 189, 224, 19, 205, 190, 66, 148, 21, 62, 218, 177, 141, 61, 189, 95, 189, 187, 80, 80, 183, 62, 254, 59, 186, 190, 248, 209, 198, 61, 236, 95, 78, 190, 175, 0, 95, 189, 27, 78, 217, 190, 46, 253, 53, 61, 79, 183, 184, 61, 60, 28, 149, 62, 13, 67, 28, 62, 40, 136, 147, 189, 150, 5, 85, 190, 92, 192, 196, 189, 87, 103, 142, 190, 138, 103, 185, 189, 179, 194, 1, 62, 88, 248, 20, 61, 126, 214, 57, 61, 108, 70, 196, 190, 177, 201, 17, 62, 17, 178, 119, 190, 139, 27, 88, 61, 116, 63, 61, 62, 22, 254, 25, 61, 75, 139, 29, 62, 16, 211, 90, 190, 94, 214, 27, 190, 233, 225, 163, 190, 204, 115, 83, 190, 224, 108, 157, 190, 165, 222, 220, 188, 20, 87, 142, 189, 142, 13, 231, 61, 127, 94, 211, 61, 105, 98, 129, 189, 38, 194, 184, 61, 52, 186, 162, 188, 78, 43, 11, 189, 44, 122, 173, 61, 113, 178, 168, 190, 119, 124, 231, 189, 104, 128, 190, 190, 11, 35, 210, 189, 140, 40, 87, 62, 120, 254, 191, 189, 94, 36, 125, 62, 3, 230, 48, 189, 148, 58, 6, 62, 101, 90, 202, 61, 41, 225, 181, 61, 148, 44, 138, 190, 216, 27, 225, 190, 238, 102, 180, 190, 37, 233, 101, 189, 81, 137, 78, 61, 200, 153, 39, 62, 5, 147, 49, 189, 165, 220, 15, 190, 39, 160, 3, 190, 238, 154, 117, 190, 13, 64, 9, 62, 169, 172, 10, 191, 234, 86, 9, 62, 178, 221, 21, 190, 77, 17, 246, 190, 77, 77, 107, 62, 63, 16, 223, 61, 150, 11, 213, 61, 155, 181, 156, 189, 167, 115, 164, 62, 212, 116, 81, 61, 95, 156, 93, 190, 53, 120, 24, 62, 236, 94, 139, 190, 53, 56, 19, 187, 71, 69, 15, 62, 97, 29, 204, 61, 142, 218, 167, 189, 246, 90, 243, 189, 124, 36, 205, 189, 139, 33, 46, 189, 205, 143, 38, 190, 244, 176, 28, 60, 111, 119, 162, 61, 249, 129, 247, 61, 36, 1, 66, 190, 102, 4, 175, 189, 43, 36, 62, 188, 193, 53, 48, 61, 179, 219, 252, 189, 78, 160, 172, 61, 215, 133, 171, 61, 97, 25, 223, 61, 200, 91, 69, 189, 130, 161, 14, 189, 62, 56, 35, 188, 251, 121, 208, 61, 151, 161, 233, 189, 29, 21, 55, 190, 86, 9, 45, 187, 10, 73, 210, 189, 146, 251, 111, 189, 56, 215, 27, 190, 255, 105, 175, 189, 230, 155, 137, 61, 121, 47, 216, 189, 188, 88, 62, 189, 108, 175, 19, 190, 154, 219, 207, 189, 131, 107, 228, 61, 46, 173, 88, 61, 69, 232, 225, 188, 86, 245, 2, 190, 141, 150, 141, 188, 130, 138, 13, 62, 3, 226, 101, 61, 165, 190, 55, 189, 107, 124, 18, 62, 147, 9, 122, 189, 163, 165, 153, 61, 4, 13, 62, 190, 173, 109, 13, 190, 53, 97, 40, 189, 167, 23, 189, 189, 115, 164, 157, 189, 134, 136, 143, 188, 239, 124, 21, 62, 174, 206, 184, 61, 192, 245, 15, 190, 31, 178, 173, 61, 220, 27, 37, 190, 70, 208, 122, 189, 200, 194, 151, 189, 145, 240, 203, 61, 246, 76, 168, 188, 177, 104, 62, 190, 62, 137, 213, 60, 228, 14, 52, 190, 7, 247, 238, 60, 212, 161, 195, 188, 253, 73, 19, 62, 206, 8, 6, 190, 176, 20, 223, 189, 204, 250, 186, 188, 204, 82, 15, 188, 249, 31, 95, 61, 97, 243, 36, 190, 207, 147, 37, 62, 40, 45, 4, 190, 178, 204, 154, 188, 13, 177, 207, 189, 56, 34, 80, 61, 236, 181, 31, 190, 53, 20, 204, 189, 32, 43, 233, 184, 132, 184, 206, 189, 132, 251, 232, 189, 59, 247, 18, 61, 160, 24, 249, 189, 0, 96, 221, 60, 14, 96, 10, 190, 172, 75, 128, 61, 205, 222, 152, 188, 172, 148, 4, 189, 46, 139, 212, 61, 47, 57, 46, 62, 46, 182, 101, 59, 200, 49, 8, 190, 247, 90, 22, 62, 193, 120, 245, 187, 64, 130, 34, 189, 220, 244, 130, 188, 198, 245, 214, 188, 158, 52, 126, 59, 146, 208, 90, 188, 1, 87, 42, 189, 240, 64, 89, 189, 100, 191, 153, 188, 175, 2, 139, 61, 152, 172, 40, 190, 160, 94, 78, 61, 208, 119, 130, 189, 108, 14, 216, 189, 190, 19, 153, 189, 149, 43, 88, 189, 83, 102, 12, 62, 109, 0, 25, 62, 213, 117, 184, 187, 126, 165, 238, 189, 45, 80, 255, 189, 196, 124, 50, 61, 16, 247, 57, 62, 22, 51, 230, 61, 43, 215, 17, 190, 58, 209, 30, 190, 103, 153, 21, 190, 217, 20, 0, 62, 94, 58, 43, 189, 168, 116, 38, 190, 176, 1, 39, 189, 31, 128, 31, 62, 123, 189, 92, 60, 47, 126, 234, 61, 172, 233, 101, 188, 251, 201, 45, 62, 1, 243, 97, 189, 72, 215, 8, 190, 119, 153, 118, 189, 205, 192, 160, 189, 2, 76, 245, 189, 181, 140, 151, 61, 133, 39, 138, 189, 133, 79, 155, 61, 106, 102, 134, 188, 217, 186, 226, 189, 96, 116, 179, 60, 220, 163, 218, 61, 241, 211, 0, 190, 181, 84, 30, 190, 209, 117, 183, 189, 248, 113, 47, 190, 5, 235, 203, 60, 197, 62, 59, 188, 182, 155, 204, 189, 6, 186, 207, 189, 99, 196, 219, 61, 240, 94, 2, 62, 143, 12, 30, 188, 255, 234, 28, 190, 165, 225, 223, 61, 99, 92, 32, 190, 71, 18, 60, 190, 36, 220, 38, 190, 158, 174, 73, 61, 20, 118, 229, 189, 210, 127, 159, 189, 174, 85, 95, 188, 245, 159, 162, 62, 90, 222, 21, 60, 9, 3, 125, 190, 145, 124, 32, 62, 159, 28, 250, 61, 205, 84, 129, 190, 55, 216, 182, 62, 46, 103, 56, 191, 193, 161, 255, 188, 52, 50, 194, 189, 231, 67, 53, 190, 234, 21, 230, 59, 225, 59, 122, 190, 251, 207, 163, 190, 236, 225, 155, 61, 117, 133, 139, 189, 102, 52, 217, 190, 122, 234, 160, 190, 32, 73, 162, 191, 144, 54, 149, 62, 45, 40, 226, 190, 41, 78, 111, 61, 81, 53, 138, 62, 135, 100, 216, 189, 122, 53, 121, 62, 224, 198, 77, 62, 184, 174, 76, 190, 5, 253, 161, 190, 239, 82, 250, 61, 226, 32, 90, 188, 231, 59, 23, 190, 65, 88, 91, 189, 225, 124, 100, 62, 21, 194, 23, 188, 211, 191, 148, 190, 5, 94, 49, 190, 181, 4, 188, 62, 15, 70, 184, 190, 30, 26, 202, 62, 170, 151, 35, 191, 176, 61, 95, 189, 58, 118, 68, 62, 124, 194, 25, 62, 86, 122, 17, 62, 40, 4, 133, 189, 155, 182, 227, 190, 16, 131, 159, 190, 181, 231, 131, 61, 89, 197, 224, 190, 82, 230, 57, 62, 32, 176, 137, 191, 0, 39, 41, 62, 250, 191, 26, 61, 82, 209, 133, 62, 138, 230, 141, 59, 64, 66, 132, 190, 36, 96, 184, 62, 131, 238, 147, 190, 18, 157, 57, 191, 151, 96, 239, 190, 93, 248, 70, 62, 104, 73, 0, 191, 105, 131, 211, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 20, 189, 62, 142, 170, 7, 189, 88, 108, 37, 62, 77, 128, 47, 190, 240, 25, 179, 62, 112, 191, 150, 62, 164, 112, 139, 62, 98, 215, 202, 61, 118, 176, 80, 62, 112, 48, 195, 61, 236, 54, 247, 189, 82, 49, 48, 62, 155, 193, 207, 188, 95, 167, 156, 189, 120, 66, 21, 189, 204, 162, 58, 62, 171, 157, 188, 189, 15, 44, 113, 61, 229, 229, 138, 62, 239, 216, 126, 61, 95, 44, 19, 60, 58, 220, 204, 190, 9, 141, 100, 62, 173, 57, 211, 61, 66, 184, 84, 190, 30, 43, 0, 190, 229, 61, 56, 184, 111, 250, 52, 190, 57, 124, 168, 60, 41, 173, 0, 189, 91, 137, 98, 62, 51, 38, 200, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 20, 183, 61, 164, 27, 0, 63, 138, 25, 231, 190, 185, 139, 214, 60, 22, 14, 106, 62, 91, 83, 241, 190, 132, 186, 3, 191, 181, 191, 70, 190, 57, 172, 8, 191, 113, 57, 242, 189, 123, 204, 37, 63, 144, 137, 67, 191, 20, 151, 213, 190, 40, 59, 50, 190, 136, 60, 0, 63, 141, 40, 176, 62, 251, 157, 68, 189, 34, 170, 222, 62, 113, 158, 141, 190, 89, 125, 120, 188, 94, 28, 12, 61, 88, 174, 234, 190, 189, 22, 184, 62, 87, 32, 47, 61, 105, 239, 232, 62, 8, 213, 0, 188, 68, 139, 246, 189, 200, 131, 5, 190, 112, 203, 165, 189, 222, 226, 183, 189, 104, 136, 25, 191, 108, 176, 132, 191, 41, 238, 1, 190, 0, 226, 66, 62, 179, 183, 28, 62, 3, 82, 41, 190, 224, 200, 145, 190, 85, 235, 195, 189, 243, 66, 153, 190, 241, 219, 237, 188, 86, 148, 43, 61, 249, 73, 239, 61, 254, 189, 162, 62, 188, 219, 190, 189, 232, 214, 55, 189, 60, 13, 162, 190, 211, 111, 110, 62, 88, 175, 48, 190, 67, 28, 225, 189, 30, 55, 55, 62, 213, 28, 65, 190, 15, 84, 39, 61, 246, 62, 174, 190, 161, 156, 204, 61, 244, 84, 241, 189, 211, 50, 17, 63, 61, 161, 93, 62, 224, 13, 229, 61, 130, 86, 10, 61, 22, 183, 20, 190, 48, 82, 143, 61, 83, 17, 200, 61, 181, 216, 186, 62, 119, 23, 57, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 150, 135, 61, 127, 215, 77, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {118, 194, 135, 191, 62, 252, 216, 189, 77, 78, 1, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {207, 254, 243, 191, 4, 166, 3, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0065/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}