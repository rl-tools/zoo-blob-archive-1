// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 47, 8, 62, 235, 75, 44, 191, 68, 172, 29, 63, 210, 57, 74, 189, 109, 163, 255, 61, 31, 188, 92, 60, 92, 140, 62, 63, 34, 2, 63, 63, 65, 74, 175, 62, 169, 134, 45, 62, 4, 114, 168, 62, 188, 205, 212, 62, 77, 83, 44, 63, 183, 194, 199, 62, 12, 220, 163, 61, 152, 129, 224, 60, 167, 89, 116, 62, 73, 42, 162, 190, 159, 138, 159, 62, 147, 45, 145, 191, 47, 20, 203, 190, 199, 159, 155, 62, 15, 213, 25, 63, 80, 93, 137, 62, 232, 66, 70, 63, 155, 81, 130, 191, 215, 113, 64, 190, 19, 6, 10, 191, 135, 35, 160, 190, 138, 251, 182, 62, 57, 215, 90, 63, 64, 181, 196, 62, 248, 82, 150, 62, 1, 219, 20, 191, 216, 221, 142, 62, 88, 189, 37, 61, 66, 250, 144, 61, 2, 141, 70, 191, 116, 188, 193, 62, 70, 154, 78, 63, 229, 195, 99, 191, 176, 84, 141, 190, 142, 101, 60, 62, 252, 59, 200, 62, 46, 128, 32, 63, 31, 207, 242, 189, 126, 154, 38, 189, 212, 198, 170, 190, 196, 227, 161, 190, 179, 108, 99, 63, 106, 161, 19, 63, 117, 77, 66, 191, 9, 234, 215, 190, 26, 89, 69, 62, 180, 171, 155, 61, 16, 242, 75, 63, 199, 98, 195, 188, 66, 26, 92, 63, 129, 152, 42, 190, 28, 122, 57, 188, 161, 85, 209, 190, 204, 104, 179, 191, 207, 191, 151, 190, 101, 85, 215, 62, 218, 49, 129, 191, 231, 72, 251, 190, 255, 225, 23, 191, 180, 221, 149, 191, 41, 191, 19, 191, 78, 4, 20, 63, 18, 35, 96, 63, 120, 235, 185, 62, 40, 226, 23, 63, 254, 149, 208, 62, 145, 249, 65, 62, 143, 162, 209, 62, 108, 164, 30, 191, 250, 52, 174, 61, 98, 22, 98, 191, 34, 161, 252, 190, 58, 15, 144, 190, 67, 78, 38, 62, 24, 75, 3, 190, 134, 99, 238, 190, 2, 195, 194, 190, 126, 141, 35, 190, 122, 61, 178, 62, 205, 34, 58, 62, 195, 111, 87, 191, 46, 112, 5, 63, 98, 200, 168, 62, 235, 225, 216, 189, 179, 178, 163, 62, 52, 167, 136, 62, 30, 233, 111, 63, 150, 79, 20, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 224, 30, 191, 172, 41, 172, 190, 131, 171, 21, 60, 243, 158, 124, 59, 204, 162, 67, 61, 95, 91, 36, 61, 12, 136, 250, 62, 93, 43, 164, 62, 161, 160, 75, 61, 168, 148, 6, 63, 224, 198, 90, 191, 199, 254, 25, 63, 37, 176, 187, 62, 4, 105, 229, 190, 126, 12, 178, 62, 46, 121, 22, 59, 199, 252, 65, 189, 79, 240, 33, 63, 21, 3, 216, 190, 29, 88, 252, 61, 238, 183, 86, 190, 114, 43, 45, 191, 245, 245, 130, 62, 10, 131, 22, 191, 101, 194, 205, 190, 21, 253, 26, 62, 168, 160, 54, 191, 92, 44, 205, 189, 11, 110, 81, 190, 69, 217, 201, 62, 14, 186, 42, 63, 248, 120, 204, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 101, 142, 190, 227, 229, 25, 62, 179, 221, 8, 61, 101, 7, 102, 190, 243, 233, 166, 62, 32, 83, 96, 62, 246, 241, 167, 61, 141, 201, 80, 61, 22, 227, 202, 185, 109, 228, 51, 190, 194, 57, 76, 59, 204, 141, 66, 190, 174, 22, 152, 190, 94, 95, 24, 191, 187, 89, 89, 190, 32, 170, 131, 61, 48, 212, 175, 190, 102, 238, 99, 189, 16, 50, 54, 190, 173, 35, 247, 62, 31, 66, 15, 190, 174, 235, 222, 190, 26, 227, 226, 189, 80, 32, 2, 191, 84, 101, 19, 190, 71, 7, 227, 190, 156, 113, 203, 189, 238, 117, 170, 61, 106, 62, 81, 190, 113, 88, 195, 189, 247, 98, 116, 189, 40, 172, 104, 189, 220, 197, 152, 190, 106, 134, 23, 62, 148, 175, 175, 189, 209, 58, 143, 189, 158, 170, 249, 189, 216, 197, 241, 61, 151, 33, 91, 62, 47, 14, 122, 189, 191, 245, 195, 62, 40, 117, 28, 62, 4, 74, 87, 191, 94, 77, 165, 61, 68, 114, 92, 62, 35, 158, 54, 63, 246, 225, 170, 61, 250, 226, 245, 189, 48, 86, 97, 62, 242, 189, 47, 61, 7, 103, 229, 190, 211, 88, 186, 189, 161, 175, 245, 190, 195, 2, 206, 61, 114, 97, 49, 188, 7, 16, 251, 190, 77, 138, 162, 190, 192, 106, 194, 61, 91, 233, 48, 190, 38, 29, 211, 61, 39, 27, 52, 62, 227, 254, 15, 190, 238, 95, 109, 62, 122, 29, 95, 190, 255, 45, 152, 189, 228, 152, 192, 189, 221, 139, 60, 190, 171, 80, 45, 190, 38, 87, 114, 61, 4, 21, 216, 188, 236, 145, 152, 61, 201, 66, 77, 61, 229, 59, 241, 188, 54, 100, 71, 189, 191, 89, 91, 189, 132, 19, 79, 61, 26, 147, 129, 189, 154, 71, 43, 190, 187, 39, 23, 188, 71, 125, 153, 188, 62, 54, 253, 61, 174, 170, 31, 190, 6, 240, 176, 59, 140, 29, 241, 189, 1, 227, 4, 190, 140, 237, 199, 188, 107, 253, 240, 189, 106, 246, 135, 61, 40, 67, 2, 62, 98, 110, 156, 61, 235, 99, 148, 188, 145, 244, 110, 189, 113, 52, 111, 189, 244, 186, 232, 61, 255, 199, 208, 61, 186, 146, 253, 188, 197, 251, 107, 62, 225, 253, 238, 61, 19, 47, 218, 62, 221, 161, 219, 59, 116, 222, 151, 62, 122, 169, 68, 62, 41, 106, 70, 190, 166, 113, 74, 62, 239, 175, 14, 190, 129, 56, 16, 190, 35, 107, 25, 63, 236, 213, 187, 190, 162, 93, 216, 189, 34, 209, 84, 191, 145, 33, 229, 61, 124, 59, 144, 189, 178, 230, 187, 189, 253, 189, 185, 190, 111, 184, 231, 62, 85, 136, 227, 62, 124, 173, 173, 61, 195, 235, 0, 191, 251, 82, 198, 189, 31, 142, 213, 61, 28, 235, 214, 62, 71, 189, 148, 190, 224, 82, 25, 189, 179, 169, 205, 61, 14, 10, 220, 190, 181, 252, 142, 62, 5, 127, 225, 189, 17, 79, 190, 62, 95, 231, 247, 190, 104, 151, 169, 189, 100, 151, 13, 191, 144, 237, 212, 190, 106, 52, 110, 190, 234, 84, 9, 62, 148, 232, 83, 189, 26, 32, 71, 62, 88, 34, 33, 190, 236, 30, 224, 60, 166, 186, 49, 189, 45, 119, 17, 189, 105, 16, 8, 190, 117, 207, 8, 62, 18, 6, 243, 189, 60, 219, 218, 190, 217, 2, 170, 62, 55, 1, 155, 61, 119, 22, 152, 190, 205, 142, 5, 191, 180, 235, 24, 191, 204, 104, 50, 62, 58, 124, 157, 190, 84, 171, 79, 189, 225, 106, 230, 190, 243, 33, 138, 189, 53, 226, 229, 190, 185, 231, 227, 187, 114, 69, 53, 60, 47, 159, 52, 191, 157, 10, 118, 189, 80, 58, 231, 188, 53, 36, 189, 62, 252, 168, 38, 62, 46, 91, 235, 61, 18, 9, 132, 188, 233, 139, 20, 62, 67, 161, 189, 62, 26, 192, 196, 190, 164, 183, 194, 187, 182, 19, 121, 190, 246, 181, 55, 190, 129, 119, 206, 62, 24, 223, 163, 189, 189, 153, 17, 190, 218, 0, 179, 191, 73, 254, 129, 189, 87, 83, 76, 62, 186, 117, 146, 188, 38, 56, 33, 190, 67, 186, 176, 61, 52, 219, 209, 62, 242, 10, 114, 62, 157, 28, 113, 190, 206, 194, 244, 59, 247, 76, 182, 62, 243, 237, 116, 62, 108, 193, 186, 189, 20, 155, 10, 63, 202, 200, 24, 190, 228, 84, 19, 190, 212, 35, 123, 62, 68, 194, 119, 190, 238, 232, 2, 63, 102, 211, 50, 61, 78, 235, 196, 61, 87, 6, 42, 190, 135, 26, 217, 189, 126, 8, 39, 188, 179, 147, 159, 189, 20, 208, 51, 62, 253, 96, 164, 61, 219, 218, 195, 190, 125, 71, 206, 61, 36, 44, 195, 62, 220, 200, 249, 59, 37, 195, 128, 62, 99, 201, 119, 190, 153, 237, 145, 59, 179, 22, 43, 189, 250, 15, 221, 60, 90, 89, 153, 62, 147, 121, 11, 63, 211, 92, 27, 191, 92, 19, 186, 62, 176, 130, 168, 60, 82, 210, 222, 61, 164, 255, 67, 62, 112, 222, 106, 62, 193, 41, 2, 62, 193, 129, 118, 62, 110, 203, 154, 190, 94, 232, 204, 62, 246, 158, 164, 61, 37, 134, 40, 62, 234, 252, 52, 191, 170, 92, 183, 189, 230, 214, 73, 188, 78, 12, 237, 61, 60, 20, 66, 190, 120, 249, 28, 188, 252, 187, 9, 62, 23, 122, 11, 190, 221, 221, 54, 190, 139, 208, 231, 189, 194, 233, 229, 60, 169, 130, 63, 190, 7, 67, 158, 60, 150, 204, 52, 190, 174, 36, 243, 189, 24, 202, 121, 61, 192, 152, 181, 189, 128, 16, 178, 189, 180, 103, 82, 61, 53, 249, 31, 190, 234, 177, 114, 61, 22, 198, 238, 189, 163, 50, 234, 189, 36, 120, 104, 189, 142, 170, 240, 61, 158, 246, 175, 61, 49, 123, 18, 189, 27, 136, 168, 60, 217, 73, 240, 61, 92, 194, 33, 62, 79, 215, 194, 187, 232, 78, 117, 61, 0, 217, 7, 190, 239, 4, 74, 61, 223, 30, 138, 189, 81, 140, 224, 61, 2, 251, 57, 61, 139, 233, 182, 188, 93, 5, 245, 60, 21, 110, 224, 60, 190, 140, 65, 62, 86, 202, 100, 62, 35, 130, 57, 60, 200, 249, 165, 190, 39, 157, 242, 188, 114, 215, 140, 60, 151, 240, 225, 62, 33, 166, 178, 187, 85, 156, 128, 61, 173, 101, 223, 60, 0, 234, 15, 62, 193, 9, 185, 60, 79, 192, 79, 190, 19, 10, 132, 190, 237, 95, 114, 62, 70, 30, 58, 61, 98, 15, 16, 190, 164, 169, 169, 188, 245, 146, 182, 62, 26, 134, 63, 190, 167, 71, 185, 62, 54, 186, 137, 62, 154, 79, 107, 61, 165, 12, 160, 62, 45, 175, 162, 61, 26, 236, 226, 190, 42, 110, 145, 61, 172, 60, 68, 191, 106, 70, 19, 191, 184, 33, 182, 61, 53, 203, 252, 61, 207, 136, 254, 189, 7, 134, 137, 190, 41, 39, 39, 190, 110, 56, 3, 190, 118, 67, 60, 188, 3, 166, 129, 62, 142, 43, 76, 62, 251, 129, 134, 62, 121, 170, 190, 190, 32, 74, 151, 189, 79, 145, 238, 189, 58, 158, 247, 62, 180, 148, 217, 189, 106, 187, 142, 62, 238, 82, 69, 190, 152, 252, 10, 190, 218, 217, 13, 61, 68, 237, 158, 190, 26, 79, 161, 190, 92, 152, 76, 189, 196, 39, 88, 190, 254, 219, 84, 62, 236, 159, 108, 60, 218, 81, 6, 191, 224, 173, 220, 190, 55, 86, 107, 189, 151, 55, 128, 62, 148, 118, 129, 61, 68, 0, 176, 62, 51, 59, 140, 62, 30, 82, 83, 62, 96, 121, 40, 190, 93, 53, 227, 190, 145, 101, 25, 62, 117, 192, 249, 190, 91, 210, 128, 190, 118, 46, 144, 62, 22, 237, 146, 189, 43, 255, 244, 189, 106, 92, 152, 189, 214, 232, 215, 189, 149, 198, 93, 62, 71, 63, 136, 189, 75, 235, 58, 191, 39, 93, 43, 63, 98, 177, 179, 61, 101, 21, 1, 62, 210, 10, 172, 190, 124, 119, 63, 62, 42, 14, 187, 62, 248, 114, 207, 62, 203, 228, 103, 190, 110, 224, 16, 189, 182, 184, 168, 190, 232, 13, 176, 190, 130, 7, 220, 189, 161, 166, 124, 189, 16, 241, 223, 62, 90, 119, 248, 61, 161, 138, 219, 61, 55, 104, 174, 189, 113, 114, 176, 188, 195, 110, 167, 62, 204, 41, 48, 62, 249, 39, 94, 190, 215, 219, 248, 61, 208, 124, 216, 189, 30, 141, 200, 187, 211, 234, 31, 61, 104, 225, 225, 61, 203, 137, 250, 61, 116, 199, 96, 191, 40, 84, 251, 61, 81, 148, 175, 61, 169, 35, 159, 189, 221, 253, 86, 62, 63, 101, 171, 62, 37, 194, 103, 62, 186, 219, 216, 59, 83, 188, 254, 189, 60, 104, 110, 60, 101, 53, 143, 188, 146, 69, 41, 189, 204, 227, 247, 189, 76, 176, 68, 188, 23, 77, 10, 190, 160, 149, 244, 190, 103, 50, 81, 62, 2, 183, 181, 59, 22, 53, 20, 62, 19, 168, 126, 62, 20, 54, 245, 61, 133, 79, 127, 62, 114, 15, 45, 62, 70, 154, 228, 62, 169, 30, 38, 188, 210, 21, 21, 62, 170, 83, 81, 188, 196, 113, 134, 190, 32, 178, 210, 189, 255, 92, 30, 63, 192, 56, 212, 61, 55, 73, 137, 190, 167, 88, 81, 191, 254, 255, 48, 189, 201, 31, 42, 62, 14, 199, 132, 190, 90, 126, 130, 189, 165, 63, 177, 60, 213, 230, 12, 63, 49, 204, 60, 188, 179, 224, 135, 190, 182, 137, 22, 62, 132, 195, 220, 62, 57, 236, 172, 62, 28, 92, 148, 189, 251, 193, 175, 62, 8, 152, 239, 190, 104, 217, 246, 190, 119, 50, 252, 61, 162, 18, 38, 190, 152, 125, 150, 62, 203, 7, 239, 189, 67, 243, 182, 60, 28, 60, 25, 191, 86, 12, 54, 190, 3, 197, 241, 189, 42, 167, 28, 62, 244, 165, 40, 191, 182, 203, 207, 190, 32, 205, 171, 190, 87, 117, 0, 62, 55, 159, 27, 187, 176, 12, 134, 62, 46, 145, 38, 61, 228, 221, 25, 191, 210, 246, 166, 59, 22, 63, 84, 62, 127, 80, 19, 62, 133, 7, 126, 189, 126, 224, 216, 62, 8, 40, 214, 189, 178, 14, 210, 190, 127, 24, 147, 189, 182, 86, 226, 190, 15, 116, 192, 190, 225, 3, 117, 190, 130, 175, 191, 190, 240, 57, 228, 189, 147, 162, 174, 62, 83, 229, 4, 62, 181, 25, 56, 189, 194, 199, 16, 190, 101, 144, 176, 62, 123, 232, 68, 190, 108, 103, 106, 61, 29, 194, 197, 61, 69, 244, 224, 61, 150, 201, 213, 60, 190, 6, 245, 189, 113, 48, 239, 189, 205, 73, 20, 189, 63, 194, 209, 61, 183, 77, 112, 189, 81, 160, 49, 190, 51, 59, 67, 190, 36, 137, 55, 190, 94, 52, 47, 190, 134, 83, 120, 61, 181, 222, 29, 190, 48, 215, 149, 187, 233, 159, 60, 190, 225, 253, 147, 61, 81, 8, 75, 188, 42, 46, 193, 189, 77, 118, 195, 187, 146, 164, 103, 61, 30, 87, 114, 61, 200, 157, 66, 190, 21, 31, 155, 59, 124, 255, 213, 61, 247, 86, 164, 61, 116, 138, 50, 190, 40, 237, 196, 189, 87, 224, 127, 60, 31, 140, 118, 186, 185, 127, 180, 61, 115, 159, 16, 190, 230, 44, 180, 62, 95, 184, 106, 62, 4, 71, 168, 62, 66, 0, 209, 61, 124, 128, 249, 61, 226, 113, 212, 187, 97, 243, 46, 190, 44, 2, 3, 190, 167, 234, 218, 62, 226, 143, 149, 189, 55, 97, 34, 190, 112, 52, 142, 191, 251, 85, 41, 189, 93, 148, 245, 61, 165, 148, 232, 189, 148, 218, 12, 189, 97, 214, 209, 62, 130, 70, 169, 62, 39, 166, 11, 62, 70, 122, 81, 190, 255, 230, 165, 58, 219, 138, 177, 61, 47, 161, 167, 62, 209, 126, 43, 190, 122, 147, 192, 61, 174, 116, 105, 190, 38, 69, 31, 191, 54, 49, 51, 62, 130, 185, 103, 61, 41, 56, 33, 62, 83, 243, 238, 189, 252, 197, 43, 190, 66, 236, 23, 62, 170, 165, 165, 61, 36, 210, 236, 189, 157, 163, 87, 189, 129, 240, 44, 60, 169, 56, 103, 187, 109, 108, 174, 62, 201, 227, 50, 61, 227, 43, 143, 190, 121, 160, 138, 190, 227, 198, 231, 61, 76, 178, 144, 62, 234, 186, 197, 61, 140, 210, 155, 189, 51, 121, 134, 61, 120, 162, 100, 190, 104, 195, 5, 62, 202, 206, 16, 61, 11, 84, 156, 190, 238, 156, 216, 62, 48, 220, 175, 189, 98, 34, 49, 190, 179, 170, 136, 189, 33, 61, 74, 61, 167, 115, 189, 190, 123, 184, 102, 62, 75, 40, 17, 62, 102, 210, 92, 190, 204, 165, 158, 62, 22, 144, 9, 62, 162, 155, 2, 190, 39, 18, 231, 61, 220, 52, 11, 62, 59, 234, 178, 189, 254, 44, 204, 62, 226, 82, 113, 61, 38, 148, 25, 62, 181, 41, 224, 60, 148, 164, 57, 62, 64, 176, 15, 62, 35, 201, 129, 62, 79, 56, 88, 189, 172, 2, 166, 60, 192, 183, 13, 191, 204, 112, 239, 61, 191, 55, 153, 61, 216, 48, 23, 61, 19, 31, 131, 61, 207, 89, 224, 62, 224, 116, 171, 61, 50, 84, 157, 62, 241, 235, 34, 190, 201, 23, 90, 62, 26, 232, 79, 190, 36, 183, 161, 189, 97, 175, 30, 60, 249, 79, 48, 62, 205, 111, 39, 188, 67, 156, 53, 190, 135, 173, 91, 62, 42, 101, 22, 62, 156, 18, 195, 61, 149, 52, 133, 62, 81, 225, 153, 61, 10, 233, 78, 61, 150, 103, 166, 62, 156, 100, 128, 62, 212, 10, 158, 189, 194, 124, 101, 62, 185, 217, 211, 190, 203, 156, 170, 190, 57, 58, 17, 61, 5, 243, 199, 62, 65, 150, 135, 62, 137, 142, 7, 62, 42, 214, 32, 191, 219, 124, 142, 190, 146, 196, 163, 61, 149, 138, 30, 190, 112, 50, 100, 62, 62, 151, 51, 63, 195, 139, 97, 191, 220, 181, 159, 61, 67, 126, 42, 190, 151, 96, 14, 62, 255, 236, 81, 62, 49, 160, 161, 188, 104, 129, 72, 190, 201, 26, 44, 62, 37, 106, 189, 190, 1, 86, 39, 190, 72, 58, 208, 62, 126, 5, 253, 190, 65, 144, 61, 62, 106, 114, 40, 189, 134, 64, 35, 190, 91, 23, 216, 62, 169, 12, 152, 62, 101, 235, 238, 62, 64, 74, 140, 62, 71, 105, 176, 190, 119, 26, 226, 61, 144, 187, 150, 190, 68, 122, 177, 61, 222, 31, 133, 190, 38, 45, 39, 62, 200, 187, 141, 190, 159, 45, 148, 191, 101, 146, 106, 189, 47, 212, 188, 61, 108, 17, 170, 190, 22, 117, 105, 189, 81, 134, 51, 62, 81, 115, 132, 62, 147, 29, 247, 189, 2, 231, 162, 190, 218, 34, 12, 188, 35, 169, 0, 63, 107, 68, 13, 62, 131, 87, 94, 190, 122, 53, 223, 62, 51, 78, 170, 190, 235, 199, 109, 190, 39, 137, 169, 189, 31, 231, 33, 190, 83, 117, 218, 62, 0, 174, 236, 61, 223, 145, 205, 189, 147, 105, 248, 61, 117, 128, 226, 61, 63, 247, 6, 62, 97, 230, 41, 190, 198, 58, 156, 189, 58, 27, 142, 188, 181, 124, 158, 61, 237, 131, 31, 190, 49, 71, 29, 190, 109, 195, 50, 61, 160, 244, 233, 189, 163, 221, 176, 188, 145, 156, 242, 189, 9, 8, 5, 190, 35, 145, 142, 59, 213, 1, 6, 190, 201, 132, 20, 60, 5, 181, 181, 59, 104, 34, 14, 190, 26, 124, 243, 189, 43, 11, 183, 61, 15, 160, 96, 189, 53, 159, 132, 189, 21, 31, 5, 190, 131, 209, 170, 60, 140, 4, 198, 61, 105, 236, 132, 188, 128, 188, 247, 189, 110, 85, 29, 190, 160, 36, 56, 187, 239, 88, 101, 190, 220, 71, 221, 61, 42, 92, 199, 189, 11, 64, 150, 61, 192, 119, 197, 61, 214, 42, 148, 60, 47, 72, 163, 189, 0, 115, 36, 191, 190, 202, 184, 190, 116, 35, 10, 61, 174, 212, 177, 185, 185, 189, 152, 62, 191, 212, 102, 191, 114, 75, 52, 191, 75, 108, 57, 191, 123, 150, 131, 62, 147, 110, 31, 191, 37, 135, 157, 61, 152, 145, 205, 62, 253, 184, 224, 61, 52, 63, 91, 190, 235, 139, 91, 190, 88, 214, 224, 61, 207, 177, 81, 190, 239, 54, 136, 189, 226, 179, 13, 191, 77, 78, 43, 62, 184, 203, 168, 190, 102, 117, 75, 191, 252, 74, 206, 190, 45, 200, 81, 191, 219, 197, 95, 62, 8, 70, 214, 189, 152, 110, 4, 62, 27, 11, 233, 188, 137, 125, 237, 189, 140, 220, 40, 62, 19, 166, 8, 61, 67, 150, 235, 188, 26, 19, 255, 188, 15, 72, 122, 189, 69, 13, 204, 61, 218, 132, 6, 62, 139, 225, 142, 189, 28, 132, 52, 190, 159, 162, 68, 189, 108, 187, 31, 189, 224, 169, 130, 61, 92, 91, 255, 188, 55, 253, 136, 61, 104, 157, 189, 189, 144, 214, 192, 189, 8, 170, 241, 188, 43, 16, 0, 190, 222, 114, 22, 189, 61, 254, 225, 188, 120, 168, 22, 190, 197, 212, 62, 188, 215, 162, 226, 61, 65, 10, 21, 190, 242, 21, 235, 60, 208, 206, 129, 61, 247, 171, 142, 60, 208, 151, 1, 189, 172, 69, 228, 189, 240, 235, 134, 189, 133, 204, 127, 61, 115, 49, 90, 61, 113, 104, 6, 62, 71, 29, 52, 190, 144, 154, 175, 60, 110, 54, 162, 189, 202, 151, 254, 189, 224, 184, 176, 189, 195, 247, 41, 62, 38, 163, 40, 190, 39, 38, 22, 190, 98, 214, 173, 61, 95, 64, 1, 62, 94, 60, 220, 189, 107, 176, 10, 60, 83, 61, 123, 189, 126, 170, 164, 61, 219, 150, 207, 61, 174, 106, 7, 190, 118, 158, 45, 190, 253, 0, 128, 60, 23, 126, 201, 189, 168, 204, 255, 188, 158, 160, 157, 60, 42, 212, 185, 61, 132, 5, 5, 62, 207, 78, 208, 59, 106, 11, 2, 61, 130, 33, 29, 190, 162, 249, 232, 189, 171, 132, 164, 61, 242, 245, 26, 62, 90, 201, 235, 189, 96, 115, 44, 190, 248, 150, 216, 190, 29, 87, 71, 62, 152, 201, 218, 190, 249, 231, 135, 62, 246, 112, 156, 61, 33, 239, 0, 62, 176, 143, 51, 191, 133, 84, 126, 62, 233, 118, 170, 60, 180, 221, 163, 61, 239, 71, 174, 61, 4, 55, 237, 189, 59, 48, 194, 61, 54, 12, 70, 62, 38, 174, 19, 189, 35, 166, 129, 189, 66, 77, 2, 192, 213, 247, 202, 190, 3, 71, 34, 191, 175, 215, 202, 190, 161, 191, 120, 190, 244, 250, 57, 62, 178, 104, 88, 191, 227, 15, 39, 60, 113, 153, 92, 62, 29, 255, 94, 190, 137, 47, 36, 60, 239, 231, 143, 62, 214, 64, 134, 62, 223, 213, 33, 62, 32, 145, 187, 190, 152, 202, 44, 190, 103, 13, 134, 190, 253, 244, 156, 61, 133, 70, 234, 62, 225, 255, 124, 191, 111, 155, 0, 189, 54, 159, 58, 62, 233, 18, 58, 62, 226, 244, 58, 62, 186, 205, 221, 61, 11, 65, 11, 191, 92, 130, 175, 190, 107, 51, 179, 189, 96, 213, 215, 190, 28, 95, 175, 62, 40, 44, 159, 62, 186, 165, 247, 189, 152, 48, 197, 62, 181, 135, 222, 190, 166, 234, 149, 62, 68, 178, 12, 62, 29, 255, 231, 189, 140, 210, 144, 189, 27, 78, 120, 62, 114, 211, 1, 191, 149, 199, 150, 190, 167, 91, 12, 63, 223, 81, 154, 190, 87, 67, 51, 190, 27, 53, 119, 60, 50, 56, 165, 189, 222, 127, 93, 62, 69, 233, 255, 61, 29, 151, 183, 62, 125, 250, 146, 61, 179, 62, 123, 61, 133, 69, 239, 188, 147, 174, 10, 190, 130, 240, 109, 190, 53, 2, 51, 62, 86, 19, 10, 62, 101, 6, 194, 61, 95, 46, 138, 191, 170, 113, 242, 187, 66, 79, 26, 61, 11, 252, 235, 190, 42, 167, 45, 62, 244, 132, 142, 61, 231, 84, 7, 63, 101, 49, 224, 62, 30, 229, 0, 191, 90, 51, 133, 188, 145, 235, 90, 61, 35, 21, 154, 62, 163, 42, 162, 190, 23, 251, 182, 61, 95, 120, 198, 189, 147, 138, 241, 190, 44, 124, 140, 61, 69, 226, 40, 190, 58, 1, 61, 62, 48, 64, 218, 190, 11, 115, 244, 189, 38, 4, 172, 190, 99, 121, 36, 61, 190, 48, 172, 190, 24, 163, 143, 62, 137, 204, 171, 189, 89, 223, 128, 62, 57, 117, 219, 62, 87, 207, 74, 62, 71, 238, 88, 191, 106, 58, 24, 61, 231, 194, 135, 62, 95, 93, 25, 63, 0, 75, 26, 190, 240, 117, 130, 190, 194, 136, 214, 61, 159, 34, 125, 62, 68, 244, 69, 190, 231, 202, 39, 62, 99, 154, 59, 192, 226, 152, 252, 62, 72, 128, 8, 191, 110, 16, 215, 190, 154, 112, 20, 191, 181, 172, 224, 62, 195, 174, 99, 191, 216, 223, 202, 62, 112, 100, 190, 62, 210, 207, 57, 190, 88, 44, 107, 62, 228, 176, 144, 190, 232, 85, 145, 189, 237, 61, 135, 61, 16, 102, 129, 61, 206, 126, 28, 62, 165, 58, 22, 190, 34, 102, 0, 62, 82, 76, 222, 189, 103, 51, 213, 188, 54, 154, 83, 61, 42, 41, 212, 61, 208, 135, 230, 189, 205, 49, 167, 189, 76, 10, 235, 187, 89, 254, 5, 61, 147, 115, 247, 60, 167, 78, 47, 185, 15, 16, 89, 60, 179, 246, 224, 189, 222, 127, 16, 62, 69, 135, 65, 189, 112, 28, 152, 188, 124, 116, 227, 61, 167, 180, 17, 190, 24, 92, 56, 189, 151, 252, 117, 59, 21, 72, 151, 61, 200, 100, 237, 189, 158, 153, 209, 189, 214, 231, 110, 189, 154, 40, 253, 188, 139, 26, 68, 189, 103, 93, 7, 189, 242, 250, 23, 189, 56, 140, 29, 62, 20, 81, 226, 60, 136, 26, 29, 61, 5, 114, 58, 62, 30, 76, 122, 61, 14, 146, 92, 62, 148, 117, 121, 62, 157, 125, 99, 62, 35, 67, 47, 62, 45, 39, 36, 190, 210, 28, 146, 189, 229, 41, 81, 62, 54, 128, 138, 62, 149, 49, 22, 62, 242, 143, 142, 61, 10, 155, 42, 60, 250, 255, 211, 61, 218, 215, 235, 62, 157, 187, 151, 189, 233, 131, 84, 190, 42, 189, 227, 187, 213, 61, 189, 61, 241, 78, 116, 190, 237, 168, 7, 62, 27, 176, 196, 61, 0, 58, 139, 189, 156, 68, 141, 62, 146, 163, 176, 62, 33, 212, 178, 186, 182, 113, 228, 61, 176, 121, 219, 189, 215, 106, 96, 190, 19, 179, 187, 189, 70, 90, 15, 61, 169, 85, 21, 190, 249, 129, 247, 61, 118, 29, 58, 61, 84, 194, 218, 189, 220, 192, 132, 189, 190, 103, 12, 62, 39, 255, 141, 61, 208, 134, 150, 189, 249, 49, 69, 189, 254, 227, 196, 61, 110, 9, 221, 61, 22, 128, 156, 189, 19, 94, 5, 190, 57, 41, 27, 189, 102, 213, 167, 189, 57, 241, 133, 61, 112, 245, 140, 189, 197, 168, 246, 189, 191, 22, 29, 61, 108, 162, 48, 190, 158, 10, 200, 61, 26, 220, 15, 189, 221, 72, 91, 190, 35, 204, 130, 188, 111, 138, 162, 61, 242, 201, 57, 188, 75, 84, 242, 61, 145, 101, 183, 188, 228, 107, 158, 188, 52, 250, 40, 190, 232, 13, 146, 61, 206, 158, 72, 61, 129, 177, 126, 189, 151, 31, 242, 188, 234, 9, 133, 188, 91, 251, 222, 61, 40, 127, 67, 190, 143, 76, 59, 190, 98, 181, 122, 61, 51, 222, 98, 189, 70, 61, 22, 190, 255, 148, 18, 62, 30, 59, 251, 60, 4, 103, 80, 188, 142, 154, 230, 189, 115, 28, 202, 60, 160, 45, 52, 190, 66, 122, 106, 189, 104, 251, 29, 62, 255, 224, 176, 188, 50, 151, 34, 190, 166, 44, 89, 61, 143, 53, 45, 62, 233, 240, 185, 61, 168, 99, 148, 61, 56, 102, 13, 61, 145, 113, 150, 189, 204, 246, 154, 60, 153, 136, 56, 190, 172, 175, 144, 59, 150, 84, 137, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 233, 242, 60, 18, 28, 59, 61, 136, 104, 63, 190, 224, 247, 214, 61, 31, 100, 168, 60, 56, 27, 116, 190, 96, 64, 135, 61, 233, 57, 7, 190, 34, 219, 19, 62, 114, 50, 90, 62, 175, 23, 173, 189, 62, 81, 6, 62, 165, 62, 178, 61, 46, 82, 174, 60, 226, 104, 34, 190, 170, 96, 116, 61, 200, 181, 163, 61, 164, 50, 205, 62, 112, 161, 236, 60, 102, 5, 14, 62, 166, 61, 138, 189, 154, 174, 248, 61, 32, 79, 42, 190, 255, 131, 75, 189, 30, 13, 162, 62, 10, 164, 153, 62, 35, 152, 147, 62, 35, 250, 106, 62, 166, 97, 56, 190, 65, 129, 165, 61, 150, 68, 144, 189, 87, 205, 40, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 44, 133, 189, 89, 23, 190, 62, 156, 67, 15, 62, 146, 135, 188, 190, 139, 28, 35, 63, 28, 147, 21, 191, 160, 2, 227, 190, 140, 69, 26, 62, 239, 57, 215, 61, 138, 180, 13, 63, 2, 12, 170, 63, 1, 6, 82, 188, 40, 13, 253, 190, 221, 74, 174, 190, 165, 77, 233, 61, 126, 254, 193, 190, 206, 57, 70, 62, 173, 155, 234, 188, 172, 13, 228, 190, 28, 198, 51, 191, 28, 91, 133, 61, 228, 189, 47, 191, 125, 254, 169, 189, 208, 15, 62, 61, 204, 55, 34, 63, 132, 184, 117, 191, 33, 60, 253, 190, 31, 57, 100, 63, 105, 250, 132, 187, 137, 117, 17, 62, 74, 222, 247, 60, 222, 204, 148, 61, 156, 126, 189, 190, 208, 163, 11, 62, 7, 36, 220, 61, 133, 163, 150, 190, 155, 206, 88, 62, 196, 174, 162, 62, 152, 37, 73, 60, 74, 90, 167, 188, 126, 236, 8, 190, 53, 62, 28, 190, 120, 42, 10, 63, 221, 169, 138, 190, 252, 2, 146, 62, 156, 178, 43, 61, 156, 221, 48, 188, 36, 240, 62, 190, 48, 126, 174, 188, 70, 103, 200, 190, 93, 210, 67, 62, 61, 212, 210, 62, 191, 36, 175, 61, 139, 195, 213, 188, 198, 37, 34, 62, 236, 182, 21, 62, 86, 156, 97, 62, 32, 30, 152, 62, 54, 76, 211, 188, 167, 225, 9, 62, 99, 75, 236, 188, 22, 180, 80, 190, 15, 155, 11, 60, 120, 129, 18, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 208, 231, 61, 169, 83, 197, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {225, 217, 87, 190, 9, 136, 62, 63, 105, 52, 172, 188};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {40, 112, 134, 62, 18, 107, 8, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0097/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}