// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 17, 153, 61, 0, 193, 38, 191, 54, 52, 27, 63, 210, 57, 74, 189, 109, 163, 255, 61, 31, 188, 92, 60, 215, 242, 65, 63, 183, 230, 59, 63, 3, 92, 173, 62, 88, 139, 93, 62, 144, 123, 180, 62, 179, 204, 197, 62, 67, 214, 47, 63, 120, 229, 196, 62, 60, 182, 156, 61, 170, 28, 85, 61, 191, 30, 83, 62, 167, 178, 184, 190, 32, 163, 124, 62, 88, 65, 145, 191, 41, 131, 210, 190, 214, 249, 148, 62, 14, 52, 23, 63, 211, 102, 144, 62, 60, 30, 65, 63, 145, 140, 134, 191, 119, 72, 68, 190, 36, 119, 16, 191, 144, 181, 156, 190, 186, 111, 185, 62, 176, 188, 99, 63, 181, 74, 213, 62, 81, 182, 146, 62, 116, 72, 23, 191, 207, 121, 139, 62, 20, 189, 62, 61, 84, 216, 243, 60, 115, 244, 71, 191, 99, 122, 192, 62, 46, 239, 76, 63, 208, 248, 98, 191, 37, 96, 149, 190, 68, 214, 142, 61, 145, 115, 212, 62, 200, 138, 27, 63, 92, 245, 77, 190, 241, 220, 46, 189, 218, 188, 167, 190, 199, 80, 28, 190, 64, 58, 122, 63, 247, 82, 25, 63, 61, 168, 47, 191, 141, 30, 219, 190, 208, 8, 85, 62, 79, 35, 89, 60, 165, 147, 82, 63, 47, 229, 227, 188, 119, 161, 97, 63, 131, 42, 34, 190, 43, 68, 19, 188, 117, 67, 195, 190, 208, 155, 181, 191, 38, 100, 152, 190, 113, 203, 204, 62, 120, 209, 138, 191, 130, 101, 236, 190, 69, 19, 33, 191, 147, 169, 138, 191, 176, 106, 31, 191, 24, 136, 31, 63, 155, 240, 100, 63, 114, 238, 179, 62, 42, 3, 24, 63, 124, 4, 199, 62, 94, 165, 77, 62, 246, 142, 201, 62, 227, 3, 33, 191, 243, 55, 133, 61, 88, 202, 120, 191, 57, 101, 239, 190, 212, 43, 141, 190, 204, 7, 18, 62, 90, 198, 39, 190, 78, 176, 247, 190, 208, 130, 216, 190, 140, 47, 24, 190, 150, 50, 175, 62, 100, 250, 78, 62, 147, 18, 89, 191, 33, 236, 3, 63, 52, 147, 157, 62, 208, 180, 158, 189, 193, 101, 156, 62, 93, 134, 143, 62, 125, 119, 111, 63, 166, 135, 22, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 117, 46, 191, 172, 41, 172, 190, 96, 6, 208, 59, 169, 74, 246, 60, 112, 32, 40, 61, 240, 239, 25, 59, 254, 192, 229, 62, 6, 88, 172, 62, 131, 123, 35, 61, 123, 208, 4, 63, 183, 59, 86, 191, 73, 32, 29, 63, 51, 182, 170, 62, 233, 41, 234, 190, 153, 131, 151, 62, 163, 149, 91, 189, 178, 203, 4, 62, 139, 239, 41, 63, 19, 39, 213, 190, 149, 35, 12, 62, 65, 45, 131, 190, 194, 128, 51, 191, 8, 190, 79, 62, 137, 238, 16, 191, 211, 64, 213, 190, 14, 39, 23, 62, 181, 78, 56, 191, 22, 8, 0, 190, 149, 59, 79, 190, 174, 64, 195, 62, 215, 227, 42, 63, 117, 17, 227, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 101, 142, 190, 227, 229, 25, 62, 42, 147, 133, 61, 6, 5, 131, 190, 108, 125, 188, 62, 248, 137, 104, 62, 124, 104, 4, 62, 0, 239, 167, 61, 116, 162, 73, 61, 139, 176, 108, 190, 10, 156, 55, 190, 209, 174, 112, 190, 6, 145, 160, 190, 165, 24, 8, 191, 84, 178, 97, 190, 40, 170, 11, 188, 13, 57, 0, 191, 22, 200, 225, 189, 101, 62, 137, 190, 151, 164, 7, 63, 22, 167, 20, 190, 142, 119, 248, 190, 134, 154, 89, 190, 194, 253, 23, 191, 194, 237, 9, 190, 95, 247, 210, 190, 8, 232, 129, 190, 29, 114, 188, 61, 106, 62, 81, 190, 210, 214, 222, 189, 44, 225, 232, 188, 39, 191, 244, 188, 13, 132, 155, 190, 106, 134, 23, 62, 135, 213, 144, 189, 213, 246, 104, 189, 43, 241, 226, 189, 174, 35, 26, 62, 77, 161, 100, 62, 1, 7, 78, 189, 178, 86, 198, 62, 219, 62, 45, 62, 252, 42, 88, 191, 29, 229, 208, 61, 95, 7, 84, 62, 4, 190, 55, 63, 73, 195, 189, 61, 104, 35, 222, 189, 85, 183, 126, 62, 236, 170, 92, 61, 48, 239, 217, 190, 103, 87, 169, 189, 195, 227, 251, 190, 81, 183, 243, 61, 187, 130, 186, 187, 86, 228, 241, 190, 150, 13, 159, 190, 60, 139, 174, 61, 184, 114, 71, 190, 167, 132, 9, 62, 236, 43, 49, 62, 117, 151, 17, 190, 117, 8, 111, 62, 89, 255, 72, 190, 255, 45, 152, 189, 228, 152, 192, 189, 221, 139, 60, 190, 171, 80, 45, 190, 38, 87, 114, 61, 4, 21, 216, 188, 236, 145, 152, 61, 201, 66, 77, 61, 229, 59, 241, 188, 54, 100, 71, 189, 191, 89, 91, 189, 132, 19, 79, 61, 26, 147, 129, 189, 154, 71, 43, 190, 187, 39, 23, 188, 71, 125, 153, 188, 62, 54, 253, 61, 174, 170, 31, 190, 6, 240, 176, 59, 140, 29, 241, 189, 1, 227, 4, 190, 140, 237, 199, 188, 107, 253, 240, 189, 106, 246, 135, 61, 40, 67, 2, 62, 98, 110, 156, 61, 235, 99, 148, 188, 145, 244, 110, 189, 113, 52, 111, 189, 244, 186, 232, 61, 255, 199, 208, 61, 186, 146, 253, 188, 152, 6, 109, 62, 225, 253, 238, 61, 239, 65, 223, 62, 226, 255, 246, 59, 247, 191, 159, 62, 39, 70, 52, 62, 14, 243, 54, 190, 129, 57, 85, 62, 134, 222, 2, 190, 118, 75, 26, 190, 160, 140, 34, 63, 202, 215, 206, 190, 165, 44, 203, 189, 172, 123, 78, 191, 192, 136, 238, 61, 91, 198, 158, 189, 125, 246, 192, 189, 80, 26, 194, 190, 214, 9, 204, 62, 185, 101, 236, 62, 12, 171, 171, 61, 228, 161, 4, 191, 75, 201, 201, 189, 238, 158, 8, 62, 168, 1, 225, 62, 91, 101, 144, 190, 248, 213, 135, 189, 3, 148, 194, 61, 224, 170, 216, 190, 18, 226, 143, 62, 61, 28, 206, 189, 99, 184, 187, 62, 95, 231, 247, 190, 104, 151, 169, 189, 69, 11, 15, 191, 220, 146, 227, 190, 85, 72, 110, 190, 179, 71, 4, 62, 148, 232, 83, 189, 141, 219, 42, 62, 88, 34, 33, 190, 187, 2, 156, 187, 166, 186, 49, 189, 119, 24, 127, 189, 240, 196, 20, 190, 117, 207, 8, 62, 200, 141, 27, 190, 129, 38, 222, 190, 245, 91, 150, 62, 4, 126, 68, 61, 177, 253, 156, 190, 205, 142, 5, 191, 180, 235, 24, 191, 204, 104, 50, 62, 213, 65, 160, 190, 12, 202, 79, 189, 225, 106, 230, 190, 243, 33, 138, 189, 10, 40, 230, 190, 52, 135, 243, 187, 242, 42, 174, 188, 92, 67, 54, 191, 125, 36, 197, 189, 9, 253, 50, 189, 171, 126, 195, 62, 252, 168, 38, 62, 102, 181, 230, 61, 239, 205, 87, 188, 9, 174, 51, 62, 31, 67, 206, 62, 255, 193, 183, 190, 167, 165, 70, 188, 30, 4, 123, 190, 106, 110, 45, 190, 215, 121, 229, 62, 143, 252, 235, 189, 5, 195, 8, 190, 96, 106, 185, 191, 177, 75, 130, 189, 112, 199, 89, 62, 251, 15, 61, 188, 94, 23, 27, 190, 6, 151, 12, 61, 110, 209, 230, 62, 200, 140, 65, 62, 31, 168, 133, 190, 221, 96, 94, 59, 156, 70, 188, 62, 169, 192, 127, 62, 17, 174, 187, 189, 215, 123, 2, 63, 129, 85, 231, 189, 45, 36, 0, 190, 69, 207, 128, 62, 242, 116, 119, 190, 12, 72, 6, 63, 1, 153, 73, 61, 78, 235, 196, 61, 255, 133, 48, 190, 130, 138, 220, 189, 247, 225, 13, 189, 126, 75, 124, 189, 215, 136, 62, 62, 105, 150, 155, 61, 52, 106, 198, 190, 182, 147, 194, 61, 223, 183, 220, 62, 111, 38, 156, 188, 202, 202, 128, 62, 227, 86, 94, 190, 0, 228, 190, 58, 5, 200, 186, 188, 179, 234, 14, 61, 153, 76, 149, 62, 8, 52, 220, 62, 80, 3, 33, 191, 238, 2, 206, 62, 157, 133, 85, 61, 40, 32, 10, 62, 61, 159, 99, 62, 11, 229, 126, 62, 173, 40, 0, 62, 59, 175, 147, 62, 236, 250, 142, 190, 163, 175, 208, 62, 68, 113, 159, 61, 8, 84, 37, 62, 201, 128, 76, 191, 170, 92, 183, 189, 230, 214, 73, 188, 78, 12, 237, 61, 60, 20, 66, 190, 120, 249, 28, 188, 252, 187, 9, 62, 23, 122, 11, 190, 221, 221, 54, 190, 139, 208, 231, 189, 194, 233, 229, 60, 169, 130, 63, 190, 7, 67, 158, 60, 150, 204, 52, 190, 174, 36, 243, 189, 24, 202, 121, 61, 192, 152, 181, 189, 128, 16, 178, 189, 180, 103, 82, 61, 53, 249, 31, 190, 234, 177, 114, 61, 22, 198, 238, 189, 163, 50, 234, 189, 36, 120, 104, 189, 142, 170, 240, 61, 158, 246, 175, 61, 49, 123, 18, 189, 27, 136, 168, 60, 217, 73, 240, 61, 92, 194, 33, 62, 79, 215, 194, 187, 232, 78, 117, 61, 0, 217, 7, 190, 127, 187, 51, 61, 223, 30, 138, 189, 176, 12, 227, 61, 242, 150, 26, 61, 218, 83, 171, 188, 207, 62, 100, 61, 97, 13, 42, 61, 82, 198, 62, 62, 130, 124, 120, 62, 106, 78, 91, 60, 71, 11, 184, 190, 195, 187, 249, 188, 146, 213, 163, 185, 83, 148, 247, 62, 9, 102, 119, 188, 220, 205, 89, 61, 179, 157, 11, 61, 110, 34, 15, 62, 49, 151, 213, 61, 192, 129, 75, 190, 28, 113, 130, 190, 205, 179, 136, 62, 203, 202, 51, 61, 117, 4, 43, 190, 149, 181, 39, 189, 189, 19, 183, 62, 111, 58, 131, 190, 169, 42, 199, 62, 107, 239, 123, 62, 45, 104, 53, 61, 97, 220, 155, 62, 20, 56, 220, 61, 216, 83, 225, 190, 42, 110, 145, 61, 74, 213, 93, 191, 150, 30, 20, 191, 135, 151, 85, 59, 132, 52, 229, 61, 54, 229, 13, 190, 162, 129, 164, 190, 62, 125, 67, 190, 65, 138, 15, 190, 118, 67, 60, 188, 140, 118, 124, 62, 39, 173, 105, 62, 63, 202, 135, 62, 222, 246, 201, 190, 9, 27, 157, 189, 9, 238, 5, 190, 185, 48, 248, 62, 181, 118, 223, 189, 128, 239, 75, 62, 36, 24, 60, 190, 194, 55, 239, 189, 120, 133, 44, 61, 68, 237, 158, 190, 26, 79, 161, 190, 6, 251, 138, 189, 28, 198, 57, 190, 136, 130, 72, 62, 55, 95, 216, 60, 115, 136, 233, 190, 124, 125, 241, 190, 38, 121, 167, 189, 178, 21, 53, 62, 148, 118, 129, 61, 70, 165, 198, 62, 99, 46, 165, 62, 216, 252, 107, 62, 185, 232, 106, 190, 151, 149, 252, 190, 153, 143, 86, 62, 5, 98, 245, 190, 178, 64, 132, 190, 231, 228, 86, 62, 229, 184, 84, 61, 38, 172, 250, 189, 155, 23, 189, 189, 88, 180, 71, 189, 63, 53, 20, 62, 182, 79, 209, 188, 141, 233, 52, 191, 192, 207, 90, 63, 189, 66, 178, 61, 101, 21, 1, 62, 167, 224, 176, 190, 70, 183, 2, 62, 90, 83, 206, 62, 171, 22, 218, 62, 191, 200, 51, 190, 159, 42, 51, 60, 247, 117, 6, 191, 207, 208, 183, 190, 118, 22, 183, 189, 73, 252, 139, 188, 133, 15, 251, 62, 139, 75, 2, 62, 161, 138, 219, 61, 134, 149, 137, 189, 144, 192, 12, 189, 204, 115, 178, 62, 200, 40, 65, 62, 59, 167, 99, 190, 227, 86, 5, 62, 242, 160, 212, 189, 0, 115, 219, 188, 203, 81, 128, 61, 34, 187, 165, 61, 172, 232, 193, 61, 11, 178, 92, 191, 144, 178, 216, 61, 44, 28, 106, 61, 49, 72, 182, 189, 146, 116, 51, 62, 244, 196, 188, 62, 123, 65, 116, 62, 105, 209, 138, 189, 161, 169, 28, 190, 199, 119, 237, 188, 168, 32, 169, 188, 170, 27, 227, 188, 93, 244, 233, 189, 157, 198, 71, 189, 185, 17, 244, 189, 174, 123, 8, 191, 146, 217, 56, 62, 114, 117, 225, 59, 182, 31, 68, 62, 16, 242, 107, 62, 20, 54, 245, 61, 90, 129, 115, 62, 217, 152, 19, 62, 33, 100, 229, 62, 174, 88, 169, 188, 217, 102, 29, 62, 187, 214, 225, 188, 193, 218, 130, 190, 176, 176, 22, 190, 140, 82, 32, 63, 72, 71, 41, 60, 176, 72, 136, 190, 84, 0, 80, 191, 194, 195, 121, 189, 18, 9, 62, 62, 132, 117, 176, 190, 180, 251, 238, 189, 86, 92, 25, 189, 150, 86, 15, 63, 234, 207, 140, 189, 190, 9, 135, 190, 83, 80, 37, 62, 197, 82, 202, 62, 137, 64, 174, 62, 221, 248, 135, 189, 183, 93, 171, 62, 44, 40, 242, 190, 181, 25, 1, 191, 46, 70, 244, 61, 83, 7, 43, 190, 193, 253, 141, 62, 133, 0, 207, 189, 67, 243, 182, 60, 57, 189, 35, 191, 139, 113, 20, 190, 168, 62, 153, 189, 68, 57, 34, 62, 99, 254, 35, 191, 156, 213, 236, 190, 69, 136, 162, 190, 205, 91, 49, 62, 55, 159, 27, 187, 20, 126, 134, 62, 135, 47, 64, 61, 65, 107, 27, 191, 158, 12, 247, 60, 98, 71, 88, 62, 111, 81, 37, 62, 250, 223, 202, 187, 235, 155, 209, 62, 30, 67, 8, 189, 192, 73, 223, 190, 28, 5, 181, 189, 4, 40, 222, 190, 123, 12, 182, 190, 133, 14, 117, 190, 148, 12, 199, 190, 179, 196, 39, 190, 235, 146, 179, 62, 182, 61, 26, 62, 47, 22, 23, 189, 209, 149, 13, 190, 52, 164, 178, 62, 123, 232, 68, 190, 108, 103, 106, 61, 29, 194, 197, 61, 69, 244, 224, 61, 150, 201, 213, 60, 190, 6, 245, 189, 113, 48, 239, 189, 205, 73, 20, 189, 63, 194, 209, 61, 183, 77, 112, 189, 81, 160, 49, 190, 51, 59, 67, 190, 36, 137, 55, 190, 94, 52, 47, 190, 134, 83, 120, 61, 181, 222, 29, 190, 48, 215, 149, 187, 233, 159, 60, 190, 225, 253, 147, 61, 81, 8, 75, 188, 42, 46, 193, 189, 77, 118, 195, 187, 146, 164, 103, 61, 30, 87, 114, 61, 200, 157, 66, 190, 21, 31, 155, 59, 124, 255, 213, 61, 247, 86, 164, 61, 116, 138, 50, 190, 40, 237, 196, 189, 87, 224, 127, 60, 31, 140, 118, 186, 164, 134, 160, 61, 115, 159, 16, 190, 86, 202, 181, 62, 226, 168, 93, 62, 147, 189, 175, 62, 233, 5, 197, 61, 44, 26, 11, 62, 244, 66, 137, 187, 80, 240, 29, 190, 123, 56, 29, 190, 140, 141, 228, 62, 209, 21, 247, 189, 149, 229, 30, 190, 103, 5, 139, 191, 52, 5, 68, 189, 253, 197, 252, 61, 81, 133, 25, 190, 80, 162, 140, 189, 230, 168, 193, 62, 97, 228, 178, 62, 147, 180, 128, 61, 215, 73, 90, 190, 233, 121, 112, 187, 160, 238, 175, 61, 166, 172, 173, 62, 125, 169, 33, 190, 103, 246, 104, 61, 48, 170, 105, 190, 218, 192, 34, 191, 141, 103, 49, 62, 54, 224, 124, 61, 56, 9, 37, 62, 27, 152, 9, 190, 252, 197, 43, 190, 224, 144, 16, 62, 87, 184, 138, 61, 83, 65, 252, 189, 4, 50, 248, 188, 227, 80, 68, 59, 28, 125, 90, 188, 175, 126, 174, 62, 89, 237, 5, 61, 209, 183, 166, 190, 89, 34, 141, 190, 215, 8, 171, 61, 218, 233, 153, 62, 114, 130, 165, 61, 14, 105, 164, 189, 223, 118, 134, 61, 97, 137, 119, 190, 60, 133, 79, 62, 61, 102, 230, 60, 65, 33, 169, 190, 195, 91, 227, 62, 122, 135, 205, 189, 55, 194, 79, 190, 94, 2, 192, 189, 77, 238, 9, 61, 65, 212, 222, 190, 62, 220, 120, 62, 65, 227, 231, 61, 168, 20, 117, 190, 15, 219, 148, 62, 178, 0, 25, 62, 209, 65, 233, 189, 39, 18, 231, 61, 60, 200, 32, 62, 191, 149, 189, 189, 173, 210, 215, 62, 31, 45, 38, 61, 125, 196, 56, 62, 67, 242, 38, 61, 185, 89, 116, 62, 212, 40, 0, 62, 250, 31, 146, 62, 117, 31, 239, 189, 196, 204, 139, 60, 95, 230, 238, 190, 179, 153, 222, 61, 19, 71, 197, 60, 247, 175, 252, 60, 157, 221, 40, 61, 150, 119, 234, 62, 167, 125, 239, 61, 214, 250, 164, 62, 78, 48, 11, 190, 231, 163, 65, 62, 146, 243, 76, 190, 253, 179, 127, 189, 80, 166, 122, 61, 17, 10, 161, 61, 164, 178, 106, 188, 130, 244, 98, 190, 48, 251, 87, 62, 43, 53, 39, 62, 187, 85, 238, 61, 31, 200, 136, 62, 81, 225, 153, 61, 106, 186, 116, 61, 255, 234, 171, 62, 92, 114, 108, 62, 159, 108, 197, 189, 216, 33, 73, 62, 48, 4, 206, 190, 165, 129, 195, 190, 36, 60, 28, 61, 90, 84, 211, 62, 56, 211, 124, 62, 157, 222, 6, 62, 253, 57, 43, 191, 172, 251, 136, 190, 90, 138, 125, 61, 4, 251, 8, 190, 102, 82, 94, 62, 41, 207, 40, 63, 244, 136, 104, 191, 101, 191, 195, 60, 99, 194, 57, 190, 127, 225, 225, 61, 9, 213, 126, 62, 76, 215, 216, 186, 56, 151, 77, 190, 97, 220, 21, 62, 16, 127, 196, 190, 161, 1, 25, 190, 154, 98, 207, 62, 35, 49, 252, 190, 9, 38, 33, 62, 172, 2, 5, 189, 134, 64, 35, 190, 30, 86, 218, 62, 8, 100, 154, 62, 59, 111, 245, 62, 183, 15, 137, 62, 238, 37, 176, 190, 76, 177, 219, 61, 231, 15, 149, 190, 105, 73, 60, 59, 102, 124, 146, 188, 41, 172, 162, 61, 137, 252, 113, 190, 206, 84, 152, 191, 215, 101, 81, 189, 182, 201, 240, 61, 222, 17, 237, 190, 103, 200, 252, 189, 144, 68, 217, 61, 83, 185, 141, 62, 32, 207, 4, 190, 186, 217, 159, 190, 224, 74, 237, 60, 111, 159, 1, 63, 107, 224, 52, 62, 230, 181, 77, 190, 140, 109, 220, 62, 28, 172, 172, 190, 30, 206, 139, 190, 227, 92, 81, 189, 202, 255, 24, 190, 168, 146, 212, 62, 0, 174, 236, 61, 223, 145, 205, 189, 147, 105, 248, 61, 117, 128, 226, 61, 63, 247, 6, 62, 97, 230, 41, 190, 198, 58, 156, 189, 58, 27, 142, 188, 181, 124, 158, 61, 237, 131, 31, 190, 49, 71, 29, 190, 109, 195, 50, 61, 160, 244, 233, 189, 163, 221, 176, 188, 145, 156, 242, 189, 9, 8, 5, 190, 35, 145, 142, 59, 213, 1, 6, 190, 201, 132, 20, 60, 5, 181, 181, 59, 104, 34, 14, 190, 26, 124, 243, 189, 43, 11, 183, 61, 15, 160, 96, 189, 53, 159, 132, 189, 21, 31, 5, 190, 131, 209, 170, 60, 140, 4, 198, 61, 105, 236, 132, 188, 128, 188, 247, 189, 110, 85, 29, 190, 160, 36, 56, 187, 239, 88, 101, 190, 220, 71, 221, 61, 53, 129, 33, 190, 11, 64, 150, 61, 215, 39, 7, 62, 184, 90, 63, 60, 88, 153, 177, 189, 12, 28, 58, 191, 78, 220, 191, 190, 150, 104, 158, 61, 174, 212, 177, 185, 44, 165, 143, 62, 56, 59, 106, 191, 74, 226, 61, 191, 217, 201, 55, 191, 174, 222, 124, 62, 210, 129, 40, 191, 183, 122, 157, 61, 80, 53, 197, 62, 144, 72, 38, 62, 47, 135, 138, 190, 181, 165, 117, 190, 109, 58, 189, 61, 213, 72, 82, 190, 239, 54, 136, 189, 245, 113, 14, 191, 117, 222, 3, 62, 193, 219, 170, 190, 35, 166, 73, 191, 191, 24, 207, 190, 225, 208, 93, 191, 208, 11, 94, 62, 8, 70, 214, 189, 152, 110, 4, 62, 27, 11, 233, 188, 137, 125, 237, 189, 140, 220, 40, 62, 19, 166, 8, 61, 67, 150, 235, 188, 26, 19, 255, 188, 15, 72, 122, 189, 69, 13, 204, 61, 218, 132, 6, 62, 139, 225, 142, 189, 28, 132, 52, 190, 159, 162, 68, 189, 108, 187, 31, 189, 224, 169, 130, 61, 92, 91, 255, 188, 55, 253, 136, 61, 104, 157, 189, 189, 144, 214, 192, 189, 8, 170, 241, 188, 43, 16, 0, 190, 222, 114, 22, 189, 61, 254, 225, 188, 120, 168, 22, 190, 197, 212, 62, 188, 215, 162, 226, 61, 65, 10, 21, 190, 242, 21, 235, 60, 208, 206, 129, 61, 247, 171, 142, 60, 208, 151, 1, 189, 172, 69, 228, 189, 240, 235, 134, 189, 133, 204, 127, 61, 115, 49, 90, 61, 113, 104, 6, 62, 71, 29, 52, 190, 144, 154, 175, 60, 110, 54, 162, 189, 202, 151, 254, 189, 224, 184, 176, 189, 195, 247, 41, 62, 38, 163, 40, 190, 39, 38, 22, 190, 98, 214, 173, 61, 95, 64, 1, 62, 94, 60, 220, 189, 107, 176, 10, 60, 83, 61, 123, 189, 126, 170, 164, 61, 219, 150, 207, 61, 174, 106, 7, 190, 118, 158, 45, 190, 253, 0, 128, 60, 23, 126, 201, 189, 168, 204, 255, 188, 158, 160, 157, 60, 42, 212, 185, 61, 132, 5, 5, 62, 207, 78, 208, 59, 106, 11, 2, 61, 130, 33, 29, 190, 162, 249, 232, 189, 61, 144, 160, 61, 242, 245, 26, 62, 44, 110, 224, 189, 230, 134, 37, 190, 98, 200, 211, 190, 105, 59, 71, 62, 155, 190, 205, 190, 93, 180, 142, 62, 140, 33, 211, 61, 228, 90, 20, 62, 80, 69, 69, 191, 145, 250, 165, 62, 180, 193, 182, 60, 73, 6, 61, 62, 157, 128, 185, 61, 210, 22, 49, 190, 10, 15, 4, 62, 206, 154, 93, 62, 98, 176, 73, 62, 245, 30, 141, 189, 185, 27, 7, 192, 181, 78, 3, 191, 220, 111, 88, 191, 198, 200, 210, 190, 108, 105, 143, 190, 87, 171, 50, 62, 62, 9, 112, 191, 129, 7, 189, 60, 57, 63, 90, 62, 17, 57, 92, 190, 103, 227, 121, 60, 45, 72, 171, 62, 107, 232, 127, 62, 223, 213, 33, 62, 140, 244, 235, 190, 8, 149, 84, 190, 196, 22, 179, 190, 159, 54, 132, 61, 58, 47, 229, 62, 248, 244, 134, 191, 227, 194, 56, 189, 241, 193, 30, 62, 181, 41, 131, 61, 197, 230, 65, 62, 202, 44, 237, 61, 169, 183, 18, 191, 127, 134, 199, 190, 221, 77, 193, 189, 60, 161, 246, 190, 130, 82, 170, 62, 62, 98, 158, 62, 77, 220, 59, 190, 37, 140, 200, 62, 84, 217, 229, 190, 176, 104, 147, 62, 205, 192, 123, 61, 144, 51, 131, 190, 108, 240, 157, 189, 199, 206, 145, 62, 39, 15, 5, 191, 52, 209, 170, 190, 203, 203, 14, 63, 157, 178, 151, 190, 127, 188, 46, 190, 232, 115, 4, 188, 50, 56, 165, 189, 150, 55, 98, 62, 219, 164, 247, 61, 252, 191, 188, 62, 132, 3, 139, 61, 220, 28, 133, 61, 122, 110, 193, 188, 232, 188, 4, 190, 193, 42, 141, 190, 248, 60, 65, 62, 174, 64, 205, 61, 253, 97, 194, 61, 134, 58, 137, 191, 211, 105, 208, 187, 77, 68, 83, 61, 180, 186, 3, 191, 54, 37, 211, 61, 9, 40, 137, 61, 196, 59, 10, 63, 210, 73, 168, 62, 23, 34, 2, 191, 136, 7, 176, 188, 73, 254, 163, 61, 246, 242, 160, 62, 98, 99, 160, 190, 114, 148, 102, 61, 96, 239, 196, 189, 88, 143, 251, 190, 250, 40, 132, 61, 11, 221, 36, 190, 170, 41, 69, 62, 235, 132, 221, 190, 11, 115, 244, 189, 197, 138, 172, 190, 158, 199, 21, 61, 217, 90, 170, 190, 164, 219, 151, 62, 97, 60, 154, 189, 134, 149, 122, 62, 89, 196, 225, 62, 145, 16, 81, 62, 132, 6, 91, 191, 227, 198, 9, 61, 168, 8, 134, 62, 52, 32, 28, 63, 101, 85, 32, 190, 11, 188, 137, 190, 187, 38, 214, 61, 87, 170, 130, 62, 151, 29, 95, 190, 154, 229, 46, 62, 230, 172, 63, 192, 192, 85, 3, 63, 101, 114, 12, 191, 135, 198, 230, 190, 175, 44, 22, 191, 186, 149, 223, 62, 32, 131, 108, 191, 192, 96, 210, 62, 255, 64, 184, 62, 86, 75, 55, 190, 231, 90, 106, 62, 157, 185, 145, 190, 232, 85, 145, 189, 237, 61, 135, 61, 16, 102, 129, 61, 206, 126, 28, 62, 165, 58, 22, 190, 34, 102, 0, 62, 82, 76, 222, 189, 103, 51, 213, 188, 54, 154, 83, 61, 42, 41, 212, 61, 208, 135, 230, 189, 205, 49, 167, 189, 76, 10, 235, 187, 89, 254, 5, 61, 147, 115, 247, 60, 167, 78, 47, 185, 15, 16, 89, 60, 179, 246, 224, 189, 222, 127, 16, 62, 69, 135, 65, 189, 112, 28, 152, 188, 124, 116, 227, 61, 167, 180, 17, 190, 24, 92, 56, 189, 151, 252, 117, 59, 21, 72, 151, 61, 200, 100, 237, 189, 158, 153, 209, 189, 214, 231, 110, 189, 154, 40, 253, 188, 139, 26, 68, 189, 103, 93, 7, 189, 42, 39, 40, 189, 56, 140, 29, 62, 175, 189, 4, 61, 144, 196, 6, 61, 215, 191, 63, 62, 188, 233, 179, 61, 187, 225, 109, 62, 91, 65, 122, 62, 157, 233, 122, 62, 87, 164, 50, 62, 36, 122, 68, 190, 114, 85, 148, 189, 103, 174, 65, 62, 87, 115, 161, 62, 141, 174, 14, 62, 88, 213, 116, 61, 126, 148, 150, 60, 86, 173, 212, 61, 85, 125, 11, 63, 148, 124, 135, 189, 148, 24, 81, 190, 249, 225, 186, 60, 172, 137, 185, 61, 128, 20, 134, 190, 176, 120, 237, 61, 125, 36, 206, 61, 8, 238, 12, 190, 20, 103, 155, 62, 98, 102, 165, 62, 218, 170, 69, 188, 181, 121, 218, 61, 242, 106, 154, 189, 215, 106, 96, 190, 19, 179, 187, 189, 70, 90, 15, 61, 169, 85, 21, 190, 249, 129, 247, 61, 118, 29, 58, 61, 84, 194, 218, 189, 220, 192, 132, 189, 190, 103, 12, 62, 39, 255, 141, 61, 208, 134, 150, 189, 249, 49, 69, 189, 254, 227, 196, 61, 110, 9, 221, 61, 22, 128, 156, 189, 19, 94, 5, 190, 57, 41, 27, 189, 102, 213, 167, 189, 57, 241, 133, 61, 112, 245, 140, 189, 197, 168, 246, 189, 191, 22, 29, 61, 108, 162, 48, 190, 158, 10, 200, 61, 26, 220, 15, 189, 221, 72, 91, 190, 35, 204, 130, 188, 111, 138, 162, 61, 242, 201, 57, 188, 75, 84, 242, 61, 145, 101, 183, 188, 228, 107, 158, 188, 52, 250, 40, 190, 232, 13, 146, 61, 206, 158, 72, 61, 129, 177, 126, 189, 151, 31, 242, 188, 234, 9, 133, 188, 91, 251, 222, 61, 40, 127, 67, 190, 143, 76, 59, 190, 98, 181, 122, 61, 51, 222, 98, 189, 70, 61, 22, 190, 255, 148, 18, 62, 30, 59, 251, 60, 4, 103, 80, 188, 142, 154, 230, 189, 115, 28, 202, 60, 160, 45, 52, 190, 66, 122, 106, 189, 104, 251, 29, 62, 255, 224, 176, 188, 50, 151, 34, 190, 166, 44, 89, 61, 143, 53, 45, 62, 233, 240, 185, 61, 168, 99, 148, 61, 56, 102, 13, 61, 145, 113, 150, 189, 204, 246, 154, 60, 153, 136, 56, 190, 172, 175, 144, 59, 150, 84, 137, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 224, 130, 61, 54, 87, 103, 61, 136, 104, 63, 190, 166, 36, 222, 61, 142, 251, 136, 187, 60, 24, 118, 190, 65, 30, 55, 61, 233, 57, 7, 190, 90, 237, 30, 62, 188, 57, 56, 62, 191, 74, 221, 188, 83, 79, 15, 62, 87, 4, 160, 61, 250, 226, 16, 61, 226, 104, 34, 190, 246, 249, 131, 61, 64, 0, 153, 61, 50, 18, 216, 62, 137, 43, 104, 187, 50, 3, 12, 62, 166, 61, 138, 189, 134, 237, 240, 61, 32, 79, 42, 190, 255, 131, 75, 189, 251, 103, 176, 62, 31, 60, 148, 62, 42, 33, 148, 62, 152, 144, 113, 62, 166, 97, 56, 190, 109, 28, 195, 61, 150, 68, 144, 189, 87, 205, 40, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 89, 136, 188, 35, 77, 187, 62, 156, 67, 15, 62, 238, 233, 185, 190, 197, 63, 32, 63, 62, 93, 36, 191, 74, 31, 230, 190, 140, 69, 26, 62, 74, 207, 206, 61, 12, 76, 5, 63, 213, 1, 187, 63, 96, 65, 123, 187, 83, 105, 254, 190, 198, 206, 150, 190, 165, 77, 233, 61, 244, 62, 190, 190, 193, 46, 66, 62, 36, 55, 194, 188, 2, 160, 205, 190, 196, 117, 60, 191, 28, 91, 133, 61, 80, 51, 54, 191, 125, 254, 169, 189, 208, 15, 62, 61, 95, 80, 53, 63, 21, 194, 130, 191, 205, 240, 251, 190, 174, 72, 102, 63, 105, 250, 132, 187, 104, 213, 11, 62, 74, 222, 247, 60, 222, 204, 148, 61, 15, 24, 11, 191, 53, 134, 129, 61, 7, 36, 220, 61, 1, 149, 170, 190, 10, 91, 88, 62, 116, 102, 149, 62, 85, 214, 113, 61, 74, 90, 167, 188, 206, 232, 52, 190, 198, 23, 41, 190, 96, 120, 215, 62, 181, 219, 148, 190, 213, 104, 134, 62, 233, 5, 212, 61, 156, 221, 48, 188, 232, 78, 90, 190, 101, 238, 187, 189, 199, 236, 212, 190, 67, 172, 116, 62, 188, 182, 182, 62, 191, 36, 175, 61, 112, 181, 140, 188, 198, 37, 34, 62, 236, 182, 21, 62, 248, 154, 104, 62, 212, 169, 186, 62, 236, 75, 224, 188, 63, 40, 191, 61, 99, 75, 236, 188, 176, 111, 111, 190, 15, 155, 11, 60, 120, 129, 18, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 188, 247, 61, 117, 122, 217, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {103, 196, 158, 190, 99, 41, 46, 191, 11, 97, 251, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {40, 0, 63, 192, 74, 199, 186, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0097/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}