// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {146, 82, 86, 62, 151, 143, 42, 191, 55, 6, 35, 63, 210, 57, 74, 189, 109, 163, 255, 61, 31, 188, 92, 60, 91, 81, 61, 63, 195, 203, 48, 63, 7, 19, 185, 62, 124, 139, 36, 62, 26, 1, 140, 62, 193, 1, 223, 62, 157, 166, 43, 63, 93, 253, 188, 62, 230, 118, 154, 61, 114, 22, 133, 59, 208, 155, 105, 62, 193, 212, 174, 190, 75, 128, 181, 62, 5, 201, 134, 191, 5, 84, 206, 190, 128, 232, 124, 62, 233, 254, 14, 63, 217, 208, 130, 62, 99, 174, 70, 63, 57, 73, 114, 191, 251, 160, 81, 190, 76, 148, 13, 191, 101, 254, 170, 190, 222, 143, 187, 62, 21, 169, 82, 63, 33, 176, 181, 62, 37, 207, 148, 62, 40, 159, 16, 191, 147, 189, 118, 62, 64, 190, 208, 60, 20, 113, 166, 61, 39, 198, 68, 191, 148, 194, 190, 62, 146, 23, 77, 63, 7, 246, 90, 191, 197, 239, 139, 190, 178, 52, 70, 62, 143, 20, 178, 62, 227, 21, 35, 63, 143, 4, 15, 190, 3, 171, 62, 189, 136, 158, 172, 190, 5, 4, 156, 190, 128, 197, 73, 63, 171, 190, 25, 63, 171, 99, 55, 191, 148, 164, 209, 190, 96, 232, 40, 62, 7, 168, 224, 61, 137, 148, 68, 63, 153, 183, 144, 188, 32, 228, 89, 63, 92, 207, 189, 189, 97, 231, 65, 61, 179, 84, 149, 190, 91, 10, 164, 191, 82, 96, 141, 190, 146, 144, 226, 62, 85, 179, 127, 191, 112, 76, 0, 191, 156, 89, 14, 191, 212, 117, 137, 191, 159, 73, 28, 191, 168, 171, 18, 63, 58, 13, 89, 63, 11, 26, 186, 62, 76, 1, 21, 63, 34, 248, 207, 62, 132, 99, 69, 62, 254, 61, 213, 62, 56, 242, 17, 191, 176, 84, 227, 61, 38, 233, 74, 191, 158, 167, 17, 191, 224, 143, 146, 190, 231, 106, 59, 62, 163, 142, 224, 189, 3, 86, 233, 190, 68, 115, 179, 190, 90, 218, 42, 190, 181, 176, 185, 62, 96, 45, 55, 62, 128, 60, 69, 191, 222, 141, 11, 63, 17, 139, 179, 62, 13, 214, 49, 190, 255, 130, 156, 62, 68, 95, 142, 62, 204, 110, 99, 63, 188, 22, 35, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 71, 13, 191, 172, 41, 172, 190, 85, 73, 160, 60, 66, 231, 24, 60, 152, 33, 152, 61, 95, 181, 170, 61, 86, 62, 218, 62, 232, 35, 168, 62, 201, 233, 68, 61, 50, 8, 254, 62, 174, 149, 89, 191, 20, 232, 30, 63, 42, 117, 188, 62, 208, 154, 223, 190, 87, 37, 215, 62, 204, 195, 108, 188, 140, 165, 178, 188, 76, 106, 34, 63, 173, 104, 240, 190, 77, 200, 233, 61, 224, 2, 135, 190, 230, 131, 30, 191, 17, 152, 12, 62, 241, 227, 17, 191, 210, 67, 201, 190, 111, 89, 34, 62, 217, 53, 48, 191, 16, 183, 134, 189, 243, 248, 78, 190, 176, 61, 202, 62, 177, 216, 47, 63, 214, 5, 208, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 80, 143, 190, 227, 229, 25, 62, 142, 106, 116, 61, 42, 41, 51, 190, 168, 184, 176, 62, 201, 20, 6, 62, 54, 99, 244, 61, 143, 16, 148, 61, 107, 162, 102, 61, 154, 134, 42, 190, 241, 174, 188, 189, 120, 108, 94, 190, 159, 125, 60, 190, 172, 63, 3, 191, 161, 42, 42, 190, 138, 173, 199, 188, 229, 168, 204, 190, 99, 129, 115, 189, 52, 81, 22, 190, 212, 37, 4, 63, 155, 16, 17, 190, 64, 245, 0, 191, 146, 131, 68, 190, 206, 11, 33, 191, 62, 119, 251, 189, 241, 67, 188, 190, 139, 134, 203, 189, 52, 177, 134, 188, 106, 62, 81, 190, 248, 220, 137, 60, 70, 234, 89, 188, 252, 208, 210, 189, 97, 224, 144, 190, 106, 134, 23, 62, 240, 159, 216, 189, 121, 200, 184, 189, 40, 125, 8, 190, 42, 241, 228, 61, 128, 12, 96, 62, 10, 227, 154, 189, 50, 79, 186, 62, 139, 189, 34, 62, 203, 92, 59, 191, 145, 102, 253, 61, 10, 213, 115, 62, 121, 31, 42, 63, 226, 226, 141, 61, 194, 191, 243, 189, 105, 114, 73, 62, 62, 165, 209, 61, 118, 160, 243, 190, 247, 0, 226, 189, 59, 124, 180, 190, 50, 231, 199, 61, 62, 38, 14, 61, 158, 93, 225, 190, 99, 103, 158, 190, 105, 27, 214, 61, 251, 235, 182, 189, 54, 39, 199, 61, 97, 59, 64, 62, 82, 125, 8, 190, 113, 201, 116, 62, 144, 186, 99, 190, 255, 45, 152, 189, 228, 152, 192, 189, 221, 139, 60, 190, 171, 80, 45, 190, 38, 87, 114, 61, 4, 21, 216, 188, 236, 145, 152, 61, 201, 66, 77, 61, 229, 59, 241, 188, 54, 100, 71, 189, 191, 89, 91, 189, 132, 19, 79, 61, 26, 147, 129, 189, 154, 71, 43, 190, 187, 39, 23, 188, 71, 125, 153, 188, 62, 54, 253, 61, 174, 170, 31, 190, 6, 240, 176, 59, 140, 29, 241, 189, 1, 227, 4, 190, 140, 237, 199, 188, 107, 253, 240, 189, 106, 246, 135, 61, 40, 67, 2, 62, 98, 110, 156, 61, 235, 99, 148, 188, 145, 244, 110, 189, 113, 52, 111, 189, 244, 186, 232, 61, 255, 199, 208, 61, 186, 146, 253, 188, 150, 16, 85, 62, 225, 253, 238, 61, 133, 75, 215, 62, 6, 235, 136, 59, 39, 177, 148, 62, 79, 179, 77, 62, 184, 113, 54, 190, 212, 158, 69, 62, 45, 31, 4, 190, 107, 166, 22, 190, 193, 135, 243, 62, 232, 71, 158, 190, 182, 217, 228, 189, 180, 170, 75, 191, 138, 193, 222, 61, 232, 45, 75, 189, 26, 214, 186, 189, 64, 52, 181, 190, 243, 29, 11, 63, 187, 167, 225, 62, 64, 193, 20, 62, 25, 84, 233, 190, 30, 110, 135, 189, 170, 195, 237, 60, 159, 51, 204, 62, 49, 172, 151, 190, 248, 120, 37, 59, 48, 84, 219, 61, 159, 203, 228, 190, 101, 235, 142, 62, 45, 133, 233, 189, 110, 117, 196, 62, 198, 206, 248, 190, 104, 151, 169, 189, 120, 146, 16, 191, 96, 222, 198, 190, 8, 113, 129, 190, 46, 91, 34, 62, 211, 253, 74, 189, 215, 163, 86, 62, 88, 34, 33, 190, 58, 76, 176, 61, 166, 186, 49, 189, 203, 12, 43, 60, 141, 42, 233, 189, 117, 207, 8, 62, 107, 72, 187, 189, 254, 193, 196, 190, 20, 45, 186, 62, 10, 254, 8, 62, 33, 187, 158, 190, 205, 142, 5, 191, 180, 235, 24, 191, 204, 104, 50, 62, 136, 120, 112, 190, 88, 171, 136, 189, 225, 106, 230, 190, 243, 33, 138, 189, 116, 40, 227, 190, 46, 140, 3, 61, 241, 89, 78, 61, 71, 114, 45, 191, 238, 71, 188, 188, 184, 154, 152, 188, 223, 194, 181, 62, 252, 168, 38, 62, 134, 121, 1, 62, 154, 223, 136, 188, 107, 150, 46, 62, 83, 171, 183, 62, 123, 53, 203, 190, 72, 67, 5, 60, 65, 13, 110, 190, 33, 242, 63, 190, 168, 138, 185, 62, 250, 44, 102, 189, 240, 53, 23, 190, 172, 229, 168, 191, 253, 20, 126, 189, 149, 124, 66, 62, 216, 50, 200, 188, 179, 242, 34, 190, 177, 193, 43, 62, 51, 113, 215, 62, 233, 33, 78, 62, 60, 20, 112, 190, 140, 156, 2, 186, 187, 63, 179, 62, 44, 47, 118, 62, 141, 175, 183, 189, 108, 62, 254, 62, 29, 41, 43, 190, 88, 147, 42, 190, 122, 162, 120, 62, 94, 168, 113, 190, 145, 17, 10, 63, 234, 215, 223, 60, 78, 235, 196, 61, 96, 184, 25, 190, 37, 131, 212, 189, 224, 48, 39, 187, 89, 234, 242, 188, 77, 57, 51, 62, 164, 110, 185, 61, 125, 49, 184, 190, 130, 243, 175, 61, 104, 142, 142, 62, 209, 50, 155, 187, 212, 165, 100, 62, 102, 185, 79, 190, 76, 39, 242, 58, 98, 33, 78, 188, 251, 90, 177, 60, 82, 34, 129, 62, 154, 83, 24, 63, 83, 113, 19, 191, 166, 23, 154, 62, 115, 150, 21, 61, 97, 84, 195, 61, 190, 67, 39, 62, 0, 202, 56, 62, 94, 197, 232, 61, 76, 2, 69, 62, 74, 187, 135, 190, 101, 166, 193, 62, 117, 58, 120, 61, 13, 193, 20, 62, 224, 15, 246, 190, 170, 92, 183, 189, 230, 214, 73, 188, 78, 12, 237, 61, 60, 20, 66, 190, 120, 249, 28, 188, 252, 187, 9, 62, 23, 122, 11, 190, 221, 221, 54, 190, 139, 208, 231, 189, 194, 233, 229, 60, 169, 130, 63, 190, 7, 67, 158, 60, 150, 204, 52, 190, 174, 36, 243, 189, 24, 202, 121, 61, 192, 152, 181, 189, 128, 16, 178, 189, 180, 103, 82, 61, 53, 249, 31, 190, 234, 177, 114, 61, 22, 198, 238, 189, 163, 50, 234, 189, 36, 120, 104, 189, 142, 170, 240, 61, 158, 246, 175, 61, 49, 123, 18, 189, 27, 136, 168, 60, 217, 73, 240, 61, 92, 194, 33, 62, 79, 215, 194, 187, 232, 78, 117, 61, 0, 217, 7, 190, 151, 219, 64, 61, 223, 30, 138, 189, 57, 255, 212, 61, 245, 251, 0, 61, 46, 184, 75, 188, 85, 19, 11, 187, 179, 35, 190, 60, 17, 91, 64, 62, 153, 73, 86, 62, 147, 214, 58, 60, 142, 38, 132, 190, 195, 87, 124, 60, 1, 191, 43, 61, 100, 21, 196, 62, 132, 119, 41, 188, 83, 194, 197, 60, 69, 185, 180, 60, 93, 102, 56, 62, 94, 204, 87, 189, 47, 252, 67, 190, 253, 95, 133, 190, 232, 100, 49, 62, 211, 205, 223, 60, 189, 30, 174, 189, 48, 43, 207, 58, 179, 103, 190, 62, 173, 241, 57, 190, 197, 69, 163, 62, 255, 64, 147, 62, 92, 84, 139, 61, 61, 189, 171, 62, 140, 84, 186, 61, 26, 236, 226, 190, 42, 110, 145, 61, 101, 78, 44, 191, 222, 153, 13, 191, 165, 173, 228, 61, 167, 156, 0, 62, 90, 138, 14, 190, 52, 71, 109, 190, 220, 56, 64, 190, 157, 50, 19, 190, 118, 67, 60, 188, 12, 112, 127, 62, 130, 251, 24, 62, 35, 56, 104, 62, 164, 208, 173, 190, 57, 208, 157, 189, 88, 182, 147, 189, 127, 142, 220, 62, 222, 108, 9, 190, 86, 62, 145, 62, 154, 253, 117, 190, 86, 228, 18, 190, 107, 128, 133, 60, 68, 237, 158, 190, 161, 151, 155, 190, 136, 128, 38, 190, 161, 140, 82, 190, 248, 122, 89, 62, 246, 84, 216, 60, 187, 218, 18, 191, 239, 5, 219, 190, 101, 125, 64, 189, 105, 28, 169, 62, 148, 118, 129, 61, 57, 249, 163, 62, 225, 160, 132, 62, 12, 43, 72, 62, 234, 36, 33, 190, 208, 227, 183, 190, 27, 218, 234, 61, 97, 13, 216, 190, 103, 87, 107, 190, 138, 142, 164, 62, 97, 45, 63, 190, 33, 59, 100, 189, 240, 89, 45, 189, 148, 44, 250, 189, 214, 67, 119, 62, 82, 165, 194, 189, 227, 217, 51, 191, 136, 89, 225, 62, 204, 230, 227, 61, 26, 245, 0, 62, 90, 128, 142, 190, 232, 237, 97, 62, 4, 182, 167, 62, 140, 219, 199, 62, 61, 90, 76, 190, 53, 43, 146, 189, 28, 141, 136, 190, 157, 228, 142, 190, 222, 84, 127, 189, 140, 126, 127, 189, 93, 100, 189, 62, 206, 43, 79, 61, 161, 138, 219, 61, 153, 154, 144, 189, 201, 114, 72, 189, 87, 119, 178, 62, 196, 70, 43, 62, 102, 87, 253, 189, 135, 83, 12, 62, 169, 221, 13, 189, 115, 11, 77, 189, 222, 229, 149, 189, 51, 164, 39, 62, 140, 187, 194, 61, 224, 246, 66, 191, 243, 179, 227, 61, 50, 41, 214, 61, 178, 246, 167, 189, 242, 20, 74, 62, 155, 220, 177, 62, 80, 107, 132, 62, 132, 236, 213, 61, 159, 186, 189, 189, 248, 131, 152, 61, 228, 203, 233, 188, 166, 115, 68, 189, 154, 255, 243, 189, 37, 96, 145, 61, 203, 235, 16, 190, 106, 186, 254, 190, 173, 160, 54, 62, 175, 191, 76, 60, 101, 165, 16, 62, 7, 56, 134, 62, 20, 54, 245, 61, 75, 139, 115, 62, 176, 116, 59, 62, 19, 128, 220, 62, 199, 4, 62, 188, 156, 145, 11, 62, 190, 206, 203, 188, 2, 79, 141, 190, 135, 103, 155, 189, 58, 196, 15, 63, 170, 91, 22, 62, 139, 197, 133, 190, 195, 113, 81, 191, 47, 221, 35, 189, 108, 207, 45, 62, 174, 5, 123, 190, 129, 98, 93, 188, 224, 114, 189, 61, 77, 174, 8, 63, 181, 15, 31, 61, 120, 131, 131, 190, 238, 17, 42, 62, 51, 173, 182, 62, 44, 210, 164, 62, 101, 163, 163, 189, 134, 216, 177, 62, 163, 236, 240, 190, 144, 115, 245, 190, 226, 99, 9, 62, 247, 177, 45, 190, 2, 164, 149, 62, 167, 18, 221, 189, 67, 243, 182, 60, 180, 202, 6, 191, 209, 170, 60, 190, 39, 167, 189, 189, 244, 66, 43, 62, 26, 227, 37, 191, 169, 186, 175, 190, 246, 140, 156, 190, 197, 246, 181, 61, 55, 159, 27, 187, 47, 252, 121, 62, 130, 124, 46, 61, 122, 170, 9, 191, 207, 150, 191, 187, 191, 139, 96, 62, 233, 140, 242, 61, 32, 136, 240, 189, 255, 47, 237, 62, 4, 234, 167, 189, 188, 32, 228, 190, 59, 93, 64, 189, 50, 48, 225, 190, 234, 135, 194, 190, 249, 54, 103, 190, 95, 127, 183, 190, 82, 201, 231, 189, 144, 206, 180, 62, 118, 166, 2, 62, 32, 71, 47, 189, 96, 254, 12, 190, 195, 174, 186, 62, 123, 232, 68, 190, 108, 103, 106, 61, 29, 194, 197, 61, 69, 244, 224, 61, 150, 201, 213, 60, 190, 6, 245, 189, 113, 48, 239, 189, 205, 73, 20, 189, 63, 194, 209, 61, 183, 77, 112, 189, 81, 160, 49, 190, 51, 59, 67, 190, 36, 137, 55, 190, 94, 52, 47, 190, 134, 83, 120, 61, 181, 222, 29, 190, 48, 215, 149, 187, 233, 159, 60, 190, 225, 253, 147, 61, 81, 8, 75, 188, 42, 46, 193, 189, 77, 118, 195, 187, 146, 164, 103, 61, 30, 87, 114, 61, 200, 157, 66, 190, 21, 31, 155, 59, 124, 255, 213, 61, 247, 86, 164, 61, 116, 138, 50, 190, 40, 237, 196, 189, 87, 224, 127, 60, 31, 140, 118, 186, 182, 250, 188, 61, 115, 159, 16, 190, 16, 79, 177, 62, 218, 103, 114, 62, 23, 242, 163, 62, 55, 68, 187, 61, 112, 232, 17, 62, 48, 154, 78, 188, 25, 249, 34, 190, 239, 22, 211, 189, 220, 68, 167, 62, 190, 64, 58, 188, 72, 181, 15, 190, 72, 11, 139, 191, 203, 210, 20, 189, 189, 162, 254, 61, 156, 68, 241, 189, 243, 197, 7, 61, 83, 230, 240, 62, 204, 118, 167, 62, 208, 96, 113, 62, 178, 247, 70, 190, 218, 43, 31, 61, 29, 161, 116, 186, 46, 244, 156, 62, 90, 62, 31, 190, 233, 159, 11, 62, 239, 57, 119, 190, 45, 176, 32, 191, 163, 75, 72, 62, 146, 121, 127, 61, 0, 210, 21, 62, 206, 88, 213, 189, 252, 197, 43, 190, 201, 238, 15, 62, 79, 168, 145, 61, 66, 75, 234, 189, 59, 26, 159, 189, 13, 181, 6, 60, 162, 113, 10, 188, 60, 138, 164, 62, 44, 105, 98, 61, 93, 92, 46, 190, 196, 198, 104, 190, 27, 10, 21, 62, 160, 183, 86, 62, 131, 134, 190, 61, 43, 75, 209, 189, 143, 191, 104, 61, 191, 62, 43, 190, 98, 1, 23, 61, 197, 210, 15, 61, 60, 75, 130, 190, 165, 212, 185, 62, 122, 59, 157, 189, 65, 47, 218, 189, 87, 31, 44, 189, 224, 190, 136, 61, 117, 93, 158, 190, 107, 86, 69, 62, 34, 214, 40, 62, 234, 149, 75, 190, 100, 159, 169, 62, 22, 202, 3, 62, 78, 217, 76, 190, 39, 18, 231, 61, 87, 35, 17, 62, 114, 207, 242, 189, 239, 226, 221, 62, 38, 177, 39, 61, 190, 227, 1, 62, 64, 9, 9, 61, 48, 241, 38, 62, 164, 5, 191, 61, 82, 226, 17, 62, 0, 60, 144, 188, 179, 142, 18, 188, 153, 168, 22, 191, 38, 121, 198, 61, 146, 99, 37, 61, 99, 196, 234, 60, 212, 168, 181, 60, 145, 91, 243, 62, 53, 1, 14, 62, 104, 94, 51, 62, 26, 48, 123, 190, 101, 118, 24, 62, 132, 23, 94, 190, 216, 106, 180, 189, 121, 20, 206, 186, 216, 234, 208, 61, 144, 35, 95, 189, 208, 137, 77, 190, 18, 41, 60, 62, 137, 136, 27, 62, 142, 125, 26, 62, 249, 204, 133, 62, 81, 225, 153, 61, 23, 36, 152, 61, 21, 130, 168, 62, 54, 248, 153, 62, 61, 177, 179, 189, 12, 1, 88, 62, 165, 80, 207, 190, 188, 61, 111, 190, 120, 60, 8, 61, 189, 41, 183, 62, 158, 5, 125, 62, 178, 147, 15, 62, 238, 47, 32, 191, 90, 157, 142, 190, 175, 236, 140, 61, 35, 213, 44, 190, 105, 177, 98, 62, 88, 155, 46, 63, 91, 237, 74, 191, 160, 199, 0, 61, 8, 94, 65, 190, 232, 91, 9, 62, 64, 94, 41, 62, 6, 104, 4, 189, 3, 163, 54, 190, 221, 106, 31, 62, 82, 193, 197, 190, 232, 134, 55, 190, 169, 77, 213, 62, 66, 253, 246, 190, 71, 132, 45, 62, 179, 93, 178, 189, 134, 64, 35, 190, 216, 164, 206, 62, 91, 123, 146, 62, 244, 50, 232, 62, 246, 205, 142, 62, 233, 172, 160, 190, 71, 43, 192, 61, 231, 121, 140, 190, 212, 162, 245, 61, 92, 3, 11, 191, 185, 97, 60, 62, 56, 126, 135, 190, 54, 164, 135, 191, 82, 250, 142, 189, 209, 255, 207, 61, 232, 242, 132, 190, 226, 74, 7, 189, 129, 171, 135, 62, 69, 161, 129, 62, 20, 186, 164, 189, 177, 176, 153, 190, 82, 114, 130, 59, 27, 182, 212, 62, 180, 55, 190, 61, 18, 47, 87, 190, 54, 61, 224, 62, 239, 230, 158, 190, 118, 136, 122, 190, 83, 128, 140, 189, 159, 148, 39, 190, 54, 136, 212, 62, 0, 174, 236, 61, 223, 145, 205, 189, 147, 105, 248, 61, 117, 128, 226, 61, 63, 247, 6, 62, 97, 230, 41, 190, 198, 58, 156, 189, 58, 27, 142, 188, 181, 124, 158, 61, 237, 131, 31, 190, 49, 71, 29, 190, 109, 195, 50, 61, 160, 244, 233, 189, 163, 221, 176, 188, 145, 156, 242, 189, 9, 8, 5, 190, 35, 145, 142, 59, 213, 1, 6, 190, 201, 132, 20, 60, 5, 181, 181, 59, 104, 34, 14, 190, 26, 124, 243, 189, 43, 11, 183, 61, 15, 160, 96, 189, 53, 159, 132, 189, 21, 31, 5, 190, 131, 209, 170, 60, 140, 4, 198, 61, 105, 236, 132, 188, 128, 188, 247, 189, 110, 85, 29, 190, 160, 36, 56, 187, 239, 88, 101, 190, 220, 71, 221, 61, 153, 179, 194, 60, 11, 64, 150, 61, 126, 60, 230, 61, 73, 193, 244, 60, 89, 61, 101, 189, 125, 95, 7, 191, 72, 231, 163, 190, 16, 185, 108, 61, 174, 212, 177, 185, 26, 116, 168, 62, 5, 148, 91, 191, 28, 76, 39, 191, 36, 63, 57, 191, 184, 6, 139, 62, 29, 0, 34, 191, 104, 171, 37, 62, 247, 169, 224, 62, 230, 77, 248, 61, 148, 45, 43, 190, 105, 98, 79, 190, 136, 151, 7, 62, 149, 93, 75, 190, 129, 69, 122, 189, 68, 31, 9, 191, 87, 154, 61, 62, 227, 236, 164, 190, 0, 18, 76, 191, 58, 230, 194, 190, 43, 193, 66, 191, 178, 195, 104, 62, 8, 70, 214, 189, 152, 110, 4, 62, 27, 11, 233, 188, 137, 125, 237, 189, 140, 220, 40, 62, 19, 166, 8, 61, 67, 150, 235, 188, 26, 19, 255, 188, 15, 72, 122, 189, 69, 13, 204, 61, 218, 132, 6, 62, 139, 225, 142, 189, 28, 132, 52, 190, 159, 162, 68, 189, 108, 187, 31, 189, 224, 169, 130, 61, 92, 91, 255, 188, 55, 253, 136, 61, 104, 157, 189, 189, 144, 214, 192, 189, 8, 170, 241, 188, 43, 16, 0, 190, 222, 114, 22, 189, 61, 254, 225, 188, 120, 168, 22, 190, 197, 212, 62, 188, 215, 162, 226, 61, 65, 10, 21, 190, 242, 21, 235, 60, 208, 206, 129, 61, 247, 171, 142, 60, 208, 151, 1, 189, 172, 69, 228, 189, 240, 235, 134, 189, 133, 204, 127, 61, 115, 49, 90, 61, 113, 104, 6, 62, 71, 29, 52, 190, 144, 154, 175, 60, 110, 54, 162, 189, 202, 151, 254, 189, 224, 184, 176, 189, 195, 247, 41, 62, 38, 163, 40, 190, 39, 38, 22, 190, 98, 214, 173, 61, 95, 64, 1, 62, 94, 60, 220, 189, 107, 176, 10, 60, 83, 61, 123, 189, 126, 170, 164, 61, 219, 150, 207, 61, 174, 106, 7, 190, 118, 158, 45, 190, 253, 0, 128, 60, 23, 126, 201, 189, 168, 204, 255, 188, 158, 160, 157, 60, 42, 212, 185, 61, 132, 5, 5, 62, 207, 78, 208, 59, 106, 11, 2, 61, 130, 33, 29, 190, 162, 249, 232, 189, 88, 17, 204, 61, 242, 245, 26, 62, 227, 49, 3, 190, 2, 165, 49, 190, 72, 23, 214, 190, 238, 150, 87, 62, 215, 56, 218, 190, 21, 163, 127, 62, 235, 185, 53, 61, 64, 7, 9, 62, 48, 3, 21, 191, 188, 111, 80, 62, 253, 106, 0, 61, 124, 53, 26, 61, 80, 57, 171, 61, 72, 90, 208, 189, 142, 92, 187, 61, 216, 16, 81, 62, 64, 90, 143, 190, 175, 29, 132, 189, 142, 234, 225, 191, 243, 156, 190, 190, 149, 176, 14, 191, 116, 242, 195, 190, 2, 71, 65, 190, 136, 107, 72, 62, 96, 164, 87, 191, 118, 88, 62, 61, 11, 212, 120, 62, 72, 243, 88, 190, 106, 89, 53, 60, 158, 13, 117, 62, 211, 84, 168, 62, 223, 213, 33, 62, 113, 103, 59, 189, 161, 118, 75, 189, 213, 203, 56, 190, 133, 25, 192, 61, 92, 185, 210, 62, 76, 224, 79, 191, 38, 196, 113, 189, 65, 15, 38, 62, 118, 212, 128, 62, 41, 9, 144, 60, 54, 93, 198, 186, 188, 79, 4, 191, 176, 98, 132, 190, 252, 9, 148, 189, 171, 181, 186, 190, 76, 75, 57, 62, 1, 160, 31, 62, 44, 127, 70, 190, 109, 27, 171, 62, 151, 52, 210, 190, 114, 238, 136, 62, 166, 229, 65, 62, 240, 187, 16, 189, 93, 195, 37, 190, 186, 238, 91, 62, 86, 129, 251, 190, 176, 227, 140, 190, 213, 221, 246, 62, 65, 176, 219, 190, 76, 129, 106, 190, 192, 170, 3, 189, 50, 56, 165, 189, 50, 125, 82, 62, 160, 20, 230, 61, 92, 18, 179, 62, 231, 127, 127, 61, 207, 254, 158, 61, 132, 6, 39, 189, 224, 66, 9, 190, 141, 238, 107, 190, 90, 208, 216, 60, 163, 176, 55, 62, 176, 198, 183, 61, 11, 13, 134, 191, 142, 246, 159, 188, 3, 96, 35, 61, 209, 73, 236, 190, 255, 57, 95, 62, 60, 145, 250, 61, 24, 254, 4, 63, 223, 36, 7, 63, 185, 184, 251, 190, 141, 67, 136, 60, 246, 210, 136, 189, 134, 240, 145, 62, 154, 185, 165, 190, 250, 37, 5, 62, 9, 156, 218, 189, 111, 155, 10, 191, 77, 85, 136, 61, 29, 50, 49, 190, 2, 220, 48, 62, 103, 101, 216, 190, 11, 115, 244, 189, 147, 210, 178, 190, 213, 66, 170, 60, 55, 46, 174, 190, 131, 146, 149, 62, 149, 23, 189, 189, 25, 65, 121, 62, 7, 50, 208, 62, 249, 65, 72, 62, 201, 74, 63, 191, 89, 112, 18, 61, 152, 28, 133, 62, 127, 67, 18, 63, 84, 3, 40, 190, 136, 249, 125, 190, 32, 132, 180, 61, 136, 193, 129, 62, 169, 217, 86, 190, 115, 234, 28, 62, 13, 204, 31, 192, 214, 149, 3, 63, 81, 214, 253, 190, 52, 153, 174, 190, 196, 93, 16, 191, 98, 204, 223, 62, 14, 84, 97, 191, 128, 247, 208, 62, 27, 185, 194, 62, 132, 108, 72, 190, 216, 24, 101, 62, 50, 40, 134, 190, 232, 85, 145, 189, 237, 61, 135, 61, 16, 102, 129, 61, 206, 126, 28, 62, 165, 58, 22, 190, 34, 102, 0, 62, 82, 76, 222, 189, 103, 51, 213, 188, 54, 154, 83, 61, 42, 41, 212, 61, 208, 135, 230, 189, 205, 49, 167, 189, 76, 10, 235, 187, 89, 254, 5, 61, 147, 115, 247, 60, 167, 78, 47, 185, 15, 16, 89, 60, 179, 246, 224, 189, 222, 127, 16, 62, 69, 135, 65, 189, 112, 28, 152, 188, 124, 116, 227, 61, 167, 180, 17, 190, 24, 92, 56, 189, 151, 252, 117, 59, 21, 72, 151, 61, 200, 100, 237, 189, 158, 153, 209, 189, 214, 231, 110, 189, 154, 40, 253, 188, 139, 26, 68, 189, 103, 93, 7, 189, 198, 62, 53, 189, 56, 140, 29, 62, 158, 42, 155, 60, 24, 73, 171, 60, 35, 39, 67, 62, 52, 208, 211, 60, 158, 188, 83, 62, 57, 36, 117, 62, 143, 202, 80, 62, 43, 32, 43, 62, 206, 94, 214, 189, 168, 70, 225, 188, 96, 44, 102, 62, 108, 145, 86, 62, 125, 157, 13, 62, 181, 128, 223, 60, 160, 146, 107, 59, 33, 123, 12, 62, 234, 117, 198, 62, 221, 120, 129, 189, 163, 195, 98, 190, 206, 98, 153, 189, 115, 191, 139, 61, 38, 180, 64, 190, 238, 102, 26, 62, 206, 93, 220, 61, 235, 33, 144, 189, 159, 2, 106, 62, 240, 100, 184, 62, 0, 116, 170, 59, 127, 114, 6, 62, 87, 119, 193, 189, 215, 106, 96, 190, 19, 179, 187, 189, 70, 90, 15, 61, 169, 85, 21, 190, 249, 129, 247, 61, 118, 29, 58, 61, 84, 194, 218, 189, 220, 192, 132, 189, 190, 103, 12, 62, 39, 255, 141, 61, 208, 134, 150, 189, 249, 49, 69, 189, 254, 227, 196, 61, 110, 9, 221, 61, 22, 128, 156, 189, 19, 94, 5, 190, 57, 41, 27, 189, 102, 213, 167, 189, 57, 241, 133, 61, 112, 245, 140, 189, 197, 168, 246, 189, 191, 22, 29, 61, 108, 162, 48, 190, 158, 10, 200, 61, 26, 220, 15, 189, 221, 72, 91, 190, 35, 204, 130, 188, 111, 138, 162, 61, 242, 201, 57, 188, 75, 84, 242, 61, 145, 101, 183, 188, 228, 107, 158, 188, 52, 250, 40, 190, 232, 13, 146, 61, 210, 152, 87, 61, 145, 26, 124, 189, 103, 166, 209, 188, 159, 126, 131, 188, 122, 97, 235, 61, 190, 161, 64, 190, 102, 19, 53, 190, 35, 203, 123, 61, 51, 222, 98, 189, 241, 33, 22, 190, 50, 71, 22, 62, 247, 165, 10, 61, 128, 134, 29, 188, 142, 154, 230, 189, 115, 28, 202, 60, 210, 40, 52, 190, 66, 122, 106, 189, 136, 249, 35, 62, 255, 224, 176, 188, 50, 151, 34, 190, 166, 44, 89, 61, 143, 53, 45, 62, 226, 25, 187, 61, 98, 225, 156, 61, 56, 102, 13, 61, 2, 196, 148, 189, 204, 246, 154, 60, 75, 29, 52, 190, 53, 89, 50, 60, 92, 244, 134, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 119, 100, 61, 194, 83, 89, 61, 136, 104, 63, 190, 231, 30, 231, 61, 114, 215, 129, 61, 140, 56, 90, 190, 248, 109, 133, 61, 233, 57, 7, 190, 126, 62, 37, 62, 182, 101, 86, 62, 82, 253, 217, 189, 90, 68, 47, 62, 78, 170, 169, 61, 38, 129, 200, 60, 226, 104, 34, 190, 151, 247, 149, 61, 218, 19, 186, 61, 164, 215, 213, 62, 196, 75, 78, 61, 34, 9, 15, 62, 166, 61, 138, 189, 121, 103, 27, 62, 32, 79, 42, 190, 255, 131, 75, 189, 16, 254, 152, 62, 208, 155, 42, 62, 149, 223, 147, 62, 191, 23, 104, 62, 166, 97, 56, 190, 209, 205, 194, 61, 150, 68, 144, 189, 255, 223, 15, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 22, 149, 189, 130, 155, 174, 62, 156, 67, 15, 62, 119, 235, 182, 190, 153, 80, 39, 63, 42, 17, 24, 191, 70, 156, 193, 190, 140, 69, 26, 62, 103, 247, 220, 61, 62, 107, 11, 63, 191, 126, 138, 63, 223, 203, 155, 188, 118, 108, 248, 190, 215, 207, 180, 190, 165, 77, 233, 61, 12, 60, 196, 190, 198, 157, 44, 62, 132, 25, 161, 188, 123, 235, 218, 190, 187, 61, 7, 191, 28, 91, 133, 61, 224, 121, 51, 191, 125, 254, 169, 189, 208, 15, 62, 61, 187, 114, 20, 63, 78, 187, 38, 191, 23, 154, 0, 191, 24, 13, 80, 63, 105, 250, 132, 187, 30, 207, 23, 62, 74, 222, 247, 60, 146, 207, 149, 61, 111, 65, 177, 190, 87, 60, 20, 62, 7, 36, 220, 61, 249, 94, 136, 190, 209, 6, 70, 62, 107, 194, 174, 62, 78, 92, 92, 61, 74, 90, 167, 188, 13, 106, 219, 189, 244, 219, 88, 190, 170, 24, 20, 63, 252, 20, 123, 190, 66, 95, 143, 62, 241, 220, 159, 59, 156, 221, 48, 188, 121, 66, 59, 190, 207, 76, 56, 189, 9, 119, 203, 190, 49, 237, 27, 62, 83, 137, 227, 62, 191, 36, 175, 61, 87, 152, 100, 189, 198, 37, 34, 62, 236, 182, 21, 62, 6, 5, 94, 62, 1, 130, 170, 62, 114, 140, 147, 189, 104, 100, 197, 61, 99, 75, 236, 188, 163, 25, 55, 190, 15, 155, 11, 60, 255, 94, 18, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 56, 240, 61, 152, 129, 200, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {78, 46, 238, 188, 114, 156, 208, 190, 121, 116, 138, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {60, 117, 74, 191, 243, 118, 63, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0097/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}