// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 12, 209, 62, 92, 214, 34, 191, 166, 121, 40, 63, 210, 57, 74, 189, 109, 163, 255, 61, 31, 188, 92, 60, 151, 156, 56, 63, 141, 203, 24, 63, 157, 146, 202, 62, 176, 118, 22, 62, 101, 94, 153, 62, 55, 79, 230, 62, 3, 1, 34, 63, 24, 176, 207, 62, 19, 155, 115, 61, 186, 46, 211, 187, 191, 252, 26, 62, 148, 195, 195, 190, 142, 33, 193, 62, 217, 138, 138, 191, 134, 127, 180, 190, 158, 209, 144, 62, 133, 194, 233, 62, 62, 30, 133, 62, 156, 163, 72, 63, 155, 187, 96, 191, 43, 111, 44, 190, 206, 232, 6, 191, 20, 67, 175, 190, 184, 235, 183, 62, 221, 148, 19, 63, 59, 204, 202, 62, 5, 198, 163, 62, 203, 171, 17, 191, 157, 19, 178, 62, 84, 174, 251, 60, 20, 133, 179, 61, 231, 10, 33, 191, 175, 34, 218, 62, 35, 54, 65, 63, 77, 195, 99, 191, 124, 23, 136, 190, 154, 154, 17, 62, 60, 67, 31, 61, 13, 112, 43, 63, 151, 183, 164, 60, 25, 1, 153, 189, 130, 129, 177, 190, 121, 246, 147, 190, 61, 184, 42, 63, 15, 227, 29, 63, 144, 141, 55, 191, 30, 87, 184, 190, 131, 112, 5, 62, 147, 18, 244, 61, 152, 166, 60, 63, 48, 245, 186, 188, 1, 145, 87, 63, 155, 142, 0, 190, 2, 144, 129, 60, 162, 74, 188, 190, 103, 73, 113, 191, 49, 88, 151, 190, 26, 240, 248, 62, 169, 146, 113, 191, 82, 153, 9, 191, 20, 219, 218, 190, 245, 75, 115, 191, 62, 88, 43, 191, 0, 53, 236, 62, 235, 107, 96, 63, 5, 129, 179, 62, 31, 43, 15, 63, 172, 250, 159, 62, 110, 122, 104, 62, 161, 159, 213, 62, 163, 234, 14, 191, 181, 63, 46, 62, 137, 6, 41, 191, 40, 254, 8, 191, 163, 184, 187, 190, 108, 190, 135, 62, 225, 205, 47, 189, 11, 247, 227, 190, 76, 234, 178, 190, 102, 193, 46, 190, 80, 79, 203, 62, 216, 37, 18, 62, 57, 101, 81, 191, 171, 231, 8, 63, 231, 121, 181, 62, 44, 58, 36, 190, 44, 143, 169, 62, 197, 143, 132, 62, 99, 78, 102, 63, 103, 246, 44, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 67, 212, 190, 172, 41, 172, 190, 187, 222, 139, 61, 84, 36, 35, 61, 179, 3, 25, 62, 173, 107, 64, 62, 82, 12, 248, 62, 98, 3, 186, 62, 69, 150, 5, 62, 72, 166, 0, 63, 179, 236, 73, 191, 39, 180, 23, 63, 123, 26, 199, 62, 213, 0, 199, 190, 169, 93, 42, 63, 249, 52, 174, 188, 41, 68, 131, 61, 152, 132, 22, 63, 204, 118, 5, 191, 157, 195, 243, 61, 1, 217, 133, 190, 24, 78, 14, 191, 224, 158, 185, 60, 17, 238, 6, 191, 240, 151, 169, 190, 98, 8, 27, 62, 12, 75, 32, 191, 130, 178, 158, 60, 72, 52, 44, 190, 133, 52, 243, 62, 137, 48, 50, 63, 46, 117, 103, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 103, 143, 190, 227, 229, 25, 62, 61, 48, 14, 62, 202, 163, 200, 189, 104, 143, 207, 62, 223, 101, 200, 61, 188, 14, 52, 62, 238, 168, 27, 62, 144, 37, 240, 61, 3, 36, 4, 190, 248, 225, 174, 189, 63, 75, 220, 189, 156, 231, 174, 189, 182, 196, 218, 190, 204, 179, 157, 189, 130, 181, 203, 189, 38, 213, 198, 190, 124, 233, 16, 61, 109, 27, 158, 188, 205, 208, 21, 63, 103, 190, 64, 189, 46, 255, 223, 190, 94, 185, 131, 190, 42, 159, 233, 190, 230, 179, 146, 189, 185, 133, 137, 190, 139, 134, 203, 189, 127, 249, 157, 189, 255, 2, 83, 190, 121, 198, 254, 61, 175, 77, 165, 61, 173, 215, 146, 189, 180, 219, 136, 190, 106, 134, 23, 62, 203, 202, 7, 190, 13, 236, 212, 189, 223, 162, 29, 190, 113, 140, 12, 62, 18, 228, 73, 62, 105, 51, 206, 189, 191, 27, 175, 62, 7, 152, 16, 62, 86, 227, 235, 190, 105, 22, 179, 61, 15, 140, 121, 62, 75, 99, 39, 63, 31, 242, 81, 61, 139, 144, 185, 189, 226, 226, 58, 62, 43, 151, 149, 61, 244, 235, 238, 190, 224, 249, 9, 190, 207, 126, 99, 190, 7, 142, 56, 62, 202, 37, 172, 61, 228, 193, 188, 190, 4, 29, 125, 190, 20, 164, 219, 61, 149, 209, 180, 189, 131, 14, 8, 62, 12, 191, 104, 62, 65, 58, 16, 190, 218, 124, 88, 62, 248, 233, 130, 190, 255, 45, 152, 189, 228, 152, 192, 189, 221, 139, 60, 190, 171, 80, 45, 190, 38, 87, 114, 61, 4, 21, 216, 188, 236, 145, 152, 61, 201, 66, 77, 61, 229, 59, 241, 188, 54, 100, 71, 189, 191, 89, 91, 189, 132, 19, 79, 61, 26, 147, 129, 189, 154, 71, 43, 190, 187, 39, 23, 188, 71, 125, 153, 188, 62, 54, 253, 61, 174, 170, 31, 190, 6, 240, 176, 59, 140, 29, 241, 189, 1, 227, 4, 190, 140, 237, 199, 188, 107, 253, 240, 189, 106, 246, 135, 61, 40, 67, 2, 62, 98, 110, 156, 61, 235, 99, 148, 188, 145, 244, 110, 189, 113, 52, 111, 189, 244, 186, 232, 61, 255, 199, 208, 61, 186, 146, 253, 188, 244, 213, 106, 62, 225, 253, 238, 61, 108, 10, 200, 62, 160, 62, 49, 187, 40, 144, 125, 62, 106, 97, 42, 62, 136, 90, 33, 190, 22, 223, 43, 62, 104, 198, 4, 190, 255, 99, 200, 189, 99, 228, 180, 62, 87, 70, 97, 190, 69, 177, 239, 189, 153, 251, 53, 191, 75, 239, 212, 61, 103, 137, 148, 189, 195, 165, 179, 189, 154, 1, 130, 190, 41, 24, 17, 63, 128, 31, 212, 62, 184, 174, 58, 62, 95, 210, 209, 190, 192, 198, 166, 189, 16, 180, 92, 189, 67, 27, 171, 62, 51, 131, 162, 190, 203, 94, 184, 59, 4, 188, 85, 61, 36, 26, 230, 190, 29, 136, 146, 62, 97, 127, 2, 190, 239, 197, 184, 62, 52, 136, 248, 190, 104, 151, 169, 189, 252, 150, 48, 191, 50, 84, 211, 190, 108, 171, 131, 190, 165, 131, 60, 62, 181, 86, 255, 188, 161, 109, 199, 61, 88, 34, 33, 190, 192, 16, 60, 61, 166, 186, 49, 189, 62, 54, 172, 188, 53, 31, 144, 189, 117, 207, 8, 62, 107, 87, 58, 190, 208, 120, 158, 190, 222, 109, 127, 62, 147, 138, 222, 61, 247, 162, 165, 190, 205, 142, 5, 191, 155, 226, 24, 191, 204, 104, 50, 62, 84, 59, 69, 190, 101, 254, 253, 189, 225, 106, 230, 190, 243, 33, 138, 189, 141, 9, 220, 190, 210, 232, 40, 62, 34, 55, 221, 61, 18, 249, 25, 191, 74, 221, 228, 189, 238, 246, 122, 189, 227, 66, 172, 62, 252, 168, 38, 62, 98, 194, 17, 62, 52, 2, 2, 57, 230, 179, 48, 62, 68, 169, 155, 62, 198, 46, 193, 190, 135, 83, 232, 60, 124, 24, 58, 190, 61, 165, 53, 190, 12, 195, 150, 62, 0, 243, 149, 188, 78, 9, 28, 190, 29, 59, 80, 191, 126, 206, 57, 189, 99, 59, 7, 62, 232, 238, 141, 60, 110, 8, 1, 190, 40, 151, 196, 62, 72, 72, 205, 62, 168, 169, 131, 61, 56, 119, 138, 190, 2, 222, 125, 189, 251, 141, 184, 62, 74, 21, 95, 62, 56, 148, 241, 189, 184, 22, 177, 62, 62, 33, 93, 190, 11, 157, 48, 190, 114, 0, 124, 62, 63, 40, 103, 190, 5, 216, 4, 63, 107, 96, 1, 61, 78, 235, 196, 61, 214, 128, 14, 190, 192, 209, 186, 189, 160, 140, 122, 189, 10, 176, 101, 189, 82, 104, 62, 62, 211, 183, 202, 61, 104, 204, 174, 190, 225, 18, 187, 61, 3, 221, 39, 62, 177, 2, 53, 188, 154, 136, 109, 62, 212, 93, 62, 190, 122, 168, 235, 59, 176, 154, 51, 189, 55, 42, 207, 60, 156, 93, 110, 62, 97, 213, 108, 62, 50, 231, 9, 191, 228, 91, 61, 62, 43, 223, 158, 189, 220, 29, 48, 61, 111, 19, 249, 61, 231, 9, 5, 62, 73, 54, 239, 61, 201, 30, 5, 62, 20, 70, 146, 190, 53, 83, 189, 62, 244, 16, 149, 61, 61, 55, 26, 62, 11, 63, 170, 190, 170, 92, 183, 189, 230, 214, 73, 188, 78, 12, 237, 61, 60, 20, 66, 190, 120, 249, 28, 188, 252, 187, 9, 62, 23, 122, 11, 190, 221, 221, 54, 190, 139, 208, 231, 189, 194, 233, 229, 60, 169, 130, 63, 190, 7, 67, 158, 60, 150, 204, 52, 190, 174, 36, 243, 189, 24, 202, 121, 61, 192, 152, 181, 189, 128, 16, 178, 189, 180, 103, 82, 61, 53, 249, 31, 190, 234, 177, 114, 61, 22, 198, 238, 189, 163, 50, 234, 189, 36, 120, 104, 189, 142, 170, 240, 61, 158, 246, 175, 61, 49, 123, 18, 189, 27, 136, 168, 60, 217, 73, 240, 61, 92, 194, 33, 62, 79, 215, 194, 187, 232, 78, 117, 61, 0, 217, 7, 190, 43, 226, 181, 60, 223, 30, 138, 189, 155, 222, 206, 61, 246, 203, 32, 60, 96, 233, 16, 188, 134, 44, 94, 60, 100, 222, 40, 61, 124, 98, 69, 62, 241, 110, 115, 62, 229, 77, 156, 188, 2, 64, 61, 190, 81, 107, 158, 188, 183, 245, 59, 61, 233, 123, 202, 62, 164, 170, 69, 188, 223, 133, 13, 61, 102, 165, 81, 56, 106, 243, 17, 62, 17, 126, 160, 190, 117, 50, 49, 190, 36, 254, 41, 190, 70, 112, 117, 62, 82, 15, 134, 61, 6, 189, 1, 189, 211, 97, 239, 60, 218, 122, 195, 62, 10, 11, 12, 190, 126, 19, 177, 62, 218, 232, 164, 62, 179, 248, 120, 61, 237, 110, 173, 62, 84, 214, 30, 61, 26, 236, 226, 190, 42, 110, 145, 61, 60, 239, 14, 191, 97, 24, 215, 190, 131, 2, 142, 61, 160, 21, 11, 62, 247, 249, 56, 190, 10, 67, 69, 190, 20, 111, 67, 190, 48, 238, 154, 189, 118, 67, 60, 188, 61, 224, 153, 62, 165, 132, 144, 61, 224, 20, 79, 62, 31, 172, 159, 190, 73, 220, 155, 189, 174, 120, 16, 189, 99, 172, 190, 62, 26, 177, 144, 190, 180, 5, 159, 62, 130, 45, 135, 190, 78, 218, 166, 189, 205, 39, 68, 187, 241, 31, 161, 190, 237, 101, 155, 190, 150, 167, 146, 190, 110, 9, 98, 190, 66, 188, 97, 62, 208, 232, 54, 61, 126, 251, 36, 191, 73, 167, 238, 190, 229, 35, 30, 189, 185, 201, 22, 62, 148, 118, 129, 61, 16, 29, 167, 62, 124, 174, 125, 62, 164, 143, 86, 62, 224, 141, 98, 190, 120, 226, 135, 190, 37, 102, 3, 62, 133, 138, 155, 190, 127, 95, 85, 190, 195, 213, 3, 62, 151, 10, 84, 190, 130, 114, 108, 189, 215, 11, 138, 189, 97, 149, 234, 189, 245, 207, 229, 61, 127, 213, 248, 189, 38, 196, 8, 191, 161, 88, 59, 62, 230, 175, 11, 62, 254, 71, 34, 62, 129, 190, 74, 190, 25, 123, 240, 59, 105, 132, 138, 62, 105, 50, 177, 62, 240, 99, 71, 190, 219, 197, 9, 189, 29, 81, 135, 190, 94, 10, 175, 190, 10, 4, 152, 189, 88, 120, 251, 188, 195, 226, 160, 62, 106, 178, 9, 61, 161, 138, 219, 61, 234, 42, 76, 189, 68, 17, 83, 189, 222, 101, 166, 62, 232, 174, 36, 62, 132, 175, 113, 189, 144, 118, 45, 62, 3, 231, 195, 188, 250, 117, 157, 189, 220, 104, 20, 190, 204, 128, 64, 62, 114, 113, 172, 61, 190, 184, 39, 191, 31, 77, 4, 62, 155, 119, 219, 61, 86, 81, 117, 189, 236, 112, 56, 62, 11, 251, 110, 62, 70, 158, 135, 62, 152, 140, 43, 62, 162, 58, 165, 189, 133, 44, 208, 61, 214, 1, 14, 61, 221, 68, 190, 189, 93, 0, 5, 190, 128, 33, 50, 62, 169, 70, 31, 190, 100, 60, 231, 190, 81, 34, 48, 62, 150, 204, 231, 60, 102, 20, 255, 61, 182, 90, 160, 62, 20, 54, 245, 61, 19, 234, 84, 62, 45, 70, 67, 62, 230, 225, 205, 62, 153, 120, 46, 189, 75, 45, 51, 62, 74, 166, 95, 189, 32, 111, 137, 190, 34, 33, 84, 60, 123, 186, 233, 62, 159, 229, 33, 62, 59, 88, 103, 190, 238, 8, 61, 191, 119, 155, 0, 189, 96, 122, 35, 62, 149, 141, 122, 190, 43, 210, 165, 61, 45, 49, 131, 62, 65, 225, 4, 63, 130, 39, 76, 61, 119, 249, 140, 190, 192, 122, 29, 62, 74, 74, 83, 62, 177, 31, 133, 62, 204, 11, 161, 189, 77, 118, 169, 62, 113, 140, 0, 191, 105, 149, 255, 190, 29, 171, 53, 62, 34, 64, 45, 190, 23, 203, 151, 62, 207, 44, 2, 190, 67, 243, 182, 60, 80, 176, 124, 190, 29, 37, 8, 190, 210, 33, 64, 189, 123, 250, 29, 62, 30, 57, 45, 191, 40, 88, 6, 190, 152, 216, 146, 190, 185, 123, 63, 61, 138, 49, 121, 59, 182, 136, 98, 62, 108, 247, 88, 60, 94, 243, 113, 190, 25, 54, 121, 61, 79, 56, 84, 62, 30, 130, 51, 62, 103, 200, 69, 190, 129, 179, 23, 63, 50, 54, 35, 190, 245, 153, 165, 190, 184, 21, 137, 60, 205, 131, 224, 190, 129, 209, 28, 190, 144, 143, 236, 189, 182, 172, 136, 190, 192, 11, 239, 189, 117, 51, 173, 62, 191, 84, 115, 61, 108, 74, 151, 189, 30, 52, 54, 189, 223, 252, 204, 62, 123, 232, 68, 190, 108, 103, 106, 61, 29, 194, 197, 61, 69, 244, 224, 61, 150, 201, 213, 60, 190, 6, 245, 189, 113, 48, 239, 189, 205, 73, 20, 189, 63, 194, 209, 61, 183, 77, 112, 189, 81, 160, 49, 190, 51, 59, 67, 190, 36, 137, 55, 190, 94, 52, 47, 190, 134, 83, 120, 61, 181, 222, 29, 190, 48, 215, 149, 187, 233, 159, 60, 190, 225, 253, 147, 61, 81, 8, 75, 188, 42, 46, 193, 189, 77, 118, 195, 187, 146, 164, 103, 61, 30, 87, 114, 61, 200, 157, 66, 190, 21, 31, 155, 59, 124, 255, 213, 61, 247, 86, 164, 61, 116, 138, 50, 190, 40, 237, 196, 189, 87, 224, 127, 60, 31, 140, 118, 186, 215, 85, 217, 61, 115, 159, 16, 190, 24, 175, 165, 62, 68, 214, 97, 62, 30, 122, 153, 62, 177, 60, 145, 61, 91, 220, 63, 62, 200, 40, 250, 188, 181, 11, 25, 190, 155, 110, 175, 189, 14, 18, 60, 62, 109, 181, 26, 189, 137, 4, 4, 190, 62, 20, 123, 191, 114, 187, 30, 189, 212, 70, 247, 61, 135, 54, 10, 190, 249, 6, 213, 60, 92, 39, 11, 63, 249, 91, 167, 62, 178, 126, 115, 62, 5, 4, 81, 190, 191, 233, 207, 60, 222, 142, 2, 190, 207, 98, 110, 62, 56, 184, 26, 190, 203, 55, 42, 62, 216, 70, 134, 190, 71, 228, 40, 191, 21, 236, 94, 62, 41, 163, 128, 61, 240, 106, 29, 62, 54, 91, 7, 190, 252, 197, 43, 190, 246, 147, 9, 62, 80, 240, 53, 61, 49, 52, 222, 189, 128, 111, 130, 189, 212, 3, 2, 61, 82, 216, 34, 188, 154, 7, 170, 62, 206, 139, 82, 61, 65, 149, 168, 189, 55, 24, 105, 190, 160, 170, 42, 62, 236, 161, 51, 62, 9, 103, 189, 61, 227, 10, 189, 189, 147, 72, 230, 60, 80, 11, 27, 190, 247, 249, 8, 190, 106, 89, 74, 61, 9, 251, 6, 190, 63, 14, 189, 62, 143, 9, 181, 188, 0, 240, 162, 189, 32, 118, 218, 187, 162, 167, 168, 61, 245, 80, 140, 190, 231, 93, 96, 62, 158, 38, 75, 62, 167, 2, 70, 190, 221, 130, 173, 62, 62, 117, 190, 61, 156, 146, 102, 190, 39, 18, 231, 61, 225, 15, 23, 62, 8, 176, 8, 190, 252, 137, 214, 62, 25, 255, 244, 60, 19, 101, 4, 62, 45, 117, 91, 61, 210, 196, 3, 62, 123, 229, 107, 61, 98, 196, 157, 61, 173, 93, 73, 188, 241, 252, 184, 188, 83, 133, 19, 191, 61, 238, 213, 61, 225, 48, 205, 60, 21, 84, 39, 61, 246, 77, 253, 188, 211, 199, 166, 62, 222, 188, 34, 62, 61, 44, 19, 62, 180, 98, 139, 190, 126, 212, 4, 62, 193, 149, 27, 190, 253, 21, 19, 190, 0, 199, 75, 189, 57, 171, 40, 62, 106, 6, 158, 189, 55, 135, 32, 190, 39, 188, 48, 62, 141, 152, 33, 62, 162, 68, 31, 62, 171, 97, 115, 62, 81, 225, 153, 61, 170, 30, 18, 62, 26, 19, 176, 62, 127, 62, 201, 62, 67, 133, 138, 189, 114, 50, 74, 62, 193, 137, 183, 190, 5, 3, 121, 190, 172, 163, 1, 60, 213, 124, 199, 62, 44, 231, 112, 62, 111, 252, 238, 61, 174, 109, 238, 190, 50, 168, 144, 190, 109, 254, 196, 61, 20, 39, 27, 190, 222, 161, 40, 62, 31, 85, 47, 63, 118, 211, 34, 191, 231, 25, 90, 61, 30, 104, 49, 190, 1, 132, 36, 62, 50, 190, 119, 62, 72, 168, 41, 61, 207, 170, 132, 190, 34, 180, 87, 62, 100, 139, 184, 190, 216, 52, 79, 190, 14, 138, 204, 62, 194, 14, 253, 190, 4, 188, 63, 62, 248, 128, 239, 189, 134, 64, 35, 190, 70, 157, 178, 62, 150, 33, 66, 62, 179, 47, 215, 62, 176, 97, 137, 62, 1, 5, 131, 190, 229, 56, 206, 60, 234, 88, 149, 190, 234, 212, 214, 61, 223, 205, 139, 190, 172, 20, 29, 62, 171, 237, 184, 190, 96, 2, 73, 191, 155, 150, 28, 190, 161, 48, 160, 61, 57, 103, 17, 190, 253, 159, 5, 61, 146, 26, 244, 62, 96, 210, 75, 62, 165, 155, 46, 61, 131, 0, 166, 190, 60, 145, 41, 59, 144, 50, 153, 62, 216, 65, 117, 60, 223, 66, 141, 190, 245, 117, 211, 62, 239, 89, 154, 190, 253, 133, 190, 190, 166, 205, 20, 190, 67, 100, 106, 190, 226, 134, 199, 62, 0, 174, 236, 61, 223, 145, 205, 189, 147, 105, 248, 61, 117, 128, 226, 61, 63, 247, 6, 62, 97, 230, 41, 190, 198, 58, 156, 189, 58, 27, 142, 188, 181, 124, 158, 61, 237, 131, 31, 190, 49, 71, 29, 190, 109, 195, 50, 61, 160, 244, 233, 189, 163, 221, 176, 188, 145, 156, 242, 189, 9, 8, 5, 190, 35, 145, 142, 59, 213, 1, 6, 190, 201, 132, 20, 60, 5, 181, 181, 59, 104, 34, 14, 190, 26, 124, 243, 189, 43, 11, 183, 61, 15, 160, 96, 189, 53, 159, 132, 189, 21, 31, 5, 190, 131, 209, 170, 60, 140, 4, 198, 61, 105, 236, 132, 188, 128, 188, 247, 189, 110, 85, 29, 190, 160, 36, 56, 187, 239, 88, 101, 190, 220, 71, 221, 61, 2, 210, 52, 62, 236, 219, 185, 61, 184, 192, 17, 62, 238, 108, 245, 60, 5, 162, 85, 189, 178, 24, 206, 190, 33, 188, 173, 190, 19, 232, 76, 190, 174, 212, 177, 185, 140, 18, 116, 62, 233, 133, 75, 191, 165, 60, 253, 190, 161, 176, 83, 191, 21, 222, 142, 62, 131, 156, 47, 191, 133, 10, 247, 60, 92, 187, 15, 63, 164, 26, 156, 61, 11, 126, 29, 190, 249, 41, 100, 190, 125, 25, 7, 62, 248, 15, 50, 61, 167, 144, 89, 189, 110, 29, 8, 191, 214, 5, 65, 62, 85, 11, 162, 190, 64, 18, 143, 191, 26, 46, 182, 190, 104, 61, 115, 191, 32, 102, 129, 62, 8, 70, 214, 189, 152, 110, 4, 62, 27, 11, 233, 188, 137, 125, 237, 189, 140, 220, 40, 62, 19, 166, 8, 61, 67, 150, 235, 188, 26, 19, 255, 188, 15, 72, 122, 189, 69, 13, 204, 61, 218, 132, 6, 62, 139, 225, 142, 189, 28, 132, 52, 190, 159, 162, 68, 189, 108, 187, 31, 189, 224, 169, 130, 61, 92, 91, 255, 188, 55, 253, 136, 61, 104, 157, 189, 189, 144, 214, 192, 189, 8, 170, 241, 188, 43, 16, 0, 190, 222, 114, 22, 189, 61, 254, 225, 188, 120, 168, 22, 190, 197, 212, 62, 188, 215, 162, 226, 61, 65, 10, 21, 190, 242, 21, 235, 60, 208, 206, 129, 61, 247, 171, 142, 60, 208, 151, 1, 189, 172, 69, 228, 189, 240, 235, 134, 189, 133, 204, 127, 61, 115, 49, 90, 61, 113, 104, 6, 62, 71, 29, 52, 190, 144, 154, 175, 60, 110, 54, 162, 189, 202, 151, 254, 189, 224, 184, 176, 189, 195, 247, 41, 62, 38, 163, 40, 190, 39, 38, 22, 190, 98, 214, 173, 61, 95, 64, 1, 62, 94, 60, 220, 189, 107, 176, 10, 60, 83, 61, 123, 189, 126, 170, 164, 61, 219, 150, 207, 61, 174, 106, 7, 190, 118, 158, 45, 190, 253, 0, 128, 60, 23, 126, 201, 189, 168, 204, 255, 188, 158, 160, 157, 60, 42, 212, 185, 61, 132, 5, 5, 62, 207, 78, 208, 59, 106, 11, 2, 61, 130, 33, 29, 190, 162, 249, 232, 189, 107, 245, 214, 61, 242, 245, 26, 62, 143, 124, 13, 190, 43, 40, 60, 190, 92, 137, 212, 190, 152, 170, 145, 62, 25, 202, 0, 191, 53, 132, 101, 62, 167, 146, 25, 189, 157, 10, 235, 61, 208, 67, 194, 190, 76, 186, 34, 62, 190, 244, 246, 59, 188, 62, 188, 189, 254, 34, 104, 61, 137, 97, 97, 187, 159, 144, 159, 61, 95, 184, 73, 62, 68, 13, 13, 191, 16, 91, 137, 189, 238, 135, 216, 191, 233, 189, 130, 190, 128, 69, 201, 190, 45, 233, 174, 190, 97, 67, 186, 189, 185, 189, 72, 62, 127, 136, 4, 191, 163, 120, 183, 61, 148, 27, 131, 62, 159, 235, 116, 190, 213, 177, 153, 188, 102, 213, 85, 62, 51, 194, 51, 62, 223, 213, 33, 62, 55, 155, 135, 61, 185, 74, 64, 61, 233, 104, 171, 189, 179, 242, 167, 61, 181, 75, 160, 62, 246, 207, 46, 191, 237, 177, 135, 190, 10, 11, 55, 62, 31, 139, 145, 62, 114, 167, 15, 61, 92, 102, 8, 189, 229, 154, 23, 191, 78, 146, 133, 190, 151, 113, 158, 189, 243, 35, 88, 190, 244, 188, 16, 62, 19, 125, 20, 62, 61, 166, 177, 190, 227, 52, 122, 62, 142, 97, 251, 190, 79, 86, 120, 62, 168, 221, 49, 62, 246, 244, 26, 61, 196, 156, 185, 190, 26, 174, 75, 62, 118, 102, 255, 190, 207, 238, 107, 190, 90, 222, 220, 62, 110, 114, 254, 190, 232, 46, 190, 189, 39, 98, 190, 188, 50, 56, 165, 189, 217, 139, 80, 62, 141, 61, 16, 62, 248, 93, 174, 62, 83, 97, 54, 61, 192, 188, 163, 61, 115, 246, 234, 188, 71, 116, 24, 190, 156, 237, 4, 190, 236, 174, 58, 190, 155, 192, 129, 62, 7, 37, 191, 61, 59, 178, 113, 191, 203, 119, 6, 59, 224, 171, 22, 61, 36, 184, 159, 190, 131, 142, 138, 62, 150, 47, 135, 62, 23, 52, 4, 63, 251, 200, 253, 62, 96, 59, 0, 191, 59, 114, 119, 59, 208, 93, 27, 190, 124, 101, 103, 62, 103, 155, 177, 190, 121, 149, 37, 62, 227, 121, 1, 190, 70, 26, 19, 191, 121, 156, 163, 61, 107, 159, 43, 190, 163, 88, 89, 62, 147, 47, 219, 190, 11, 115, 244, 189, 93, 80, 176, 190, 53, 68, 197, 60, 214, 41, 173, 190, 48, 114, 152, 62, 30, 176, 30, 190, 112, 229, 128, 62, 109, 252, 175, 62, 84, 224, 67, 62, 199, 163, 243, 190, 181, 170, 172, 61, 124, 203, 133, 62, 27, 235, 246, 62, 137, 71, 45, 190, 174, 182, 135, 190, 19, 111, 215, 61, 167, 20, 141, 62, 103, 162, 139, 190, 159, 46, 9, 62, 197, 211, 236, 191, 107, 180, 210, 62, 225, 46, 217, 190, 238, 126, 36, 190, 61, 201, 244, 190, 109, 47, 220, 62, 204, 138, 72, 191, 54, 88, 199, 62, 8, 125, 220, 62, 140, 167, 86, 190, 196, 232, 88, 62, 236, 3, 139, 190, 232, 85, 145, 189, 237, 61, 135, 61, 16, 102, 129, 61, 206, 126, 28, 62, 165, 58, 22, 190, 34, 102, 0, 62, 82, 76, 222, 189, 103, 51, 213, 188, 54, 154, 83, 61, 42, 41, 212, 61, 208, 135, 230, 189, 205, 49, 167, 189, 76, 10, 235, 187, 89, 254, 5, 61, 147, 115, 247, 60, 167, 78, 47, 185, 15, 16, 89, 60, 179, 246, 224, 189, 222, 127, 16, 62, 69, 135, 65, 189, 112, 28, 152, 188, 124, 116, 227, 61, 167, 180, 17, 190, 24, 92, 56, 189, 151, 252, 117, 59, 21, 72, 151, 61, 200, 100, 237, 189, 158, 153, 209, 189, 214, 231, 110, 189, 154, 40, 253, 188, 139, 26, 68, 189, 103, 93, 7, 189, 248, 199, 149, 189, 56, 140, 29, 62, 220, 134, 3, 60, 101, 20, 218, 187, 58, 196, 60, 62, 107, 42, 17, 61, 180, 191, 95, 62, 176, 114, 115, 62, 200, 91, 100, 62, 73, 237, 6, 62, 2, 162, 53, 189, 24, 95, 134, 189, 62, 98, 99, 62, 249, 190, 94, 62, 18, 39, 6, 62, 107, 163, 7, 61, 81, 54, 161, 188, 78, 20, 191, 61, 28, 162, 173, 61, 10, 176, 83, 189, 50, 23, 11, 190, 14, 83, 127, 188, 35, 10, 207, 61, 245, 4, 7, 190, 82, 26, 42, 62, 196, 139, 219, 61, 229, 175, 170, 188, 36, 93, 126, 62, 48, 194, 201, 62, 101, 198, 9, 188, 116, 20, 2, 62, 197, 43, 32, 190, 215, 106, 96, 190, 19, 179, 187, 189, 70, 90, 15, 61, 169, 85, 21, 190, 249, 129, 247, 61, 118, 29, 58, 61, 84, 194, 218, 189, 220, 192, 132, 189, 190, 103, 12, 62, 39, 255, 141, 61, 208, 134, 150, 189, 249, 49, 69, 189, 254, 227, 196, 61, 110, 9, 221, 61, 22, 128, 156, 189, 19, 94, 5, 190, 57, 41, 27, 189, 102, 213, 167, 189, 57, 241, 133, 61, 112, 245, 140, 189, 197, 168, 246, 189, 191, 22, 29, 61, 108, 162, 48, 190, 158, 10, 200, 61, 26, 220, 15, 189, 221, 72, 91, 190, 35, 204, 130, 188, 111, 138, 162, 61, 242, 201, 57, 188, 75, 84, 242, 61, 145, 101, 183, 188, 228, 107, 158, 188, 52, 250, 40, 190, 232, 13, 146, 61, 210, 152, 87, 61, 145, 26, 124, 189, 103, 166, 209, 188, 159, 126, 131, 188, 122, 97, 235, 61, 190, 161, 64, 190, 102, 19, 53, 190, 35, 203, 123, 61, 51, 222, 98, 189, 241, 33, 22, 190, 50, 71, 22, 62, 247, 165, 10, 61, 128, 134, 29, 188, 142, 154, 230, 189, 115, 28, 202, 60, 210, 40, 52, 190, 66, 122, 106, 189, 136, 249, 35, 62, 255, 224, 176, 188, 50, 151, 34, 190, 166, 44, 89, 61, 143, 53, 45, 62, 226, 25, 187, 61, 98, 225, 156, 61, 56, 102, 13, 61, 2, 196, 148, 189, 204, 246, 154, 60, 75, 29, 52, 190, 53, 89, 50, 60, 92, 244, 134, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 170, 9, 62, 17, 25, 10, 61, 136, 104, 63, 190, 253, 127, 215, 61, 80, 27, 250, 60, 16, 189, 73, 190, 26, 162, 139, 61, 233, 57, 7, 190, 124, 146, 35, 62, 241, 141, 99, 62, 62, 133, 160, 189, 0, 193, 40, 62, 254, 118, 153, 61, 180, 86, 167, 59, 226, 104, 34, 190, 235, 40, 102, 61, 228, 252, 223, 61, 33, 62, 195, 62, 231, 172, 172, 60, 160, 176, 214, 61, 166, 61, 138, 189, 146, 211, 165, 61, 32, 79, 42, 190, 255, 131, 75, 189, 232, 254, 125, 62, 78, 157, 234, 61, 17, 248, 146, 62, 117, 169, 95, 62, 166, 97, 56, 190, 232, 58, 167, 61, 150, 68, 144, 189, 255, 223, 15, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 4, 132, 189, 219, 76, 172, 62, 156, 67, 15, 62, 244, 21, 159, 190, 220, 21, 16, 63, 225, 148, 224, 190, 234, 47, 190, 190, 140, 69, 26, 62, 175, 12, 3, 62, 214, 102, 31, 63, 16, 132, 63, 63, 176, 223, 79, 189, 171, 15, 254, 190, 101, 209, 165, 190, 165, 77, 233, 61, 59, 159, 202, 190, 143, 109, 73, 62, 250, 163, 43, 189, 119, 128, 248, 190, 234, 98, 218, 190, 28, 91, 133, 61, 83, 12, 54, 191, 125, 254, 169, 189, 208, 15, 62, 61, 175, 27, 10, 63, 235, 30, 15, 191, 102, 205, 253, 190, 43, 161, 40, 63, 105, 250, 132, 187, 60, 200, 44, 62, 74, 222, 247, 60, 146, 207, 149, 61, 246, 54, 207, 190, 253, 174, 27, 62, 7, 36, 220, 61, 38, 176, 59, 190, 195, 173, 78, 62, 49, 108, 161, 62, 190, 110, 62, 61, 74, 90, 167, 188, 94, 23, 179, 189, 28, 230, 7, 190, 15, 13, 22, 63, 20, 82, 92, 190, 38, 152, 129, 62, 129, 81, 191, 60, 156, 221, 48, 188, 205, 161, 32, 190, 52, 67, 49, 189, 20, 32, 193, 190, 128, 102, 164, 61, 0, 117, 189, 62, 191, 36, 175, 61, 144, 160, 162, 189, 198, 37, 34, 62, 236, 182, 21, 62, 161, 20, 64, 62, 130, 9, 199, 62, 49, 125, 46, 190, 86, 15, 80, 61, 99, 75, 236, 188, 202, 132, 38, 190, 15, 155, 11, 60, 255, 94, 18, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 95, 213, 61, 131, 110, 168, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {105, 71, 253, 189, 6, 0, 34, 192, 83, 121, 195, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {220, 255, 16, 64, 38, 202, 66, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0097/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}