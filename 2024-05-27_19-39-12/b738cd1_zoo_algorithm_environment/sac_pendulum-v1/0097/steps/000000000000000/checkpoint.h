// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 252, 230, 62, 216, 56, 5, 191, 110, 88, 4, 63, 231, 164, 70, 189, 121, 129, 2, 62, 223, 240, 7, 61, 86, 65, 236, 61, 27, 195, 196, 61, 3, 36, 238, 62, 237, 89, 4, 190, 181, 41, 154, 190, 187, 194, 242, 62, 135, 106, 150, 62, 131, 187, 176, 61, 125, 8, 111, 61, 197, 19, 104, 190, 5, 229, 129, 62, 111, 139, 187, 190, 29, 97, 36, 62, 207, 22, 16, 191, 82, 232, 245, 190, 5, 26, 128, 62, 8, 153, 170, 190, 137, 13, 103, 62, 123, 41, 51, 62, 68, 47, 215, 190, 32, 230, 196, 190, 88, 203, 219, 190, 198, 172, 223, 190, 112, 63, 179, 62, 82, 100, 120, 190, 132, 156, 189, 62, 101, 110, 194, 62, 196, 193, 222, 190, 50, 154, 236, 62, 165, 4, 110, 62, 153, 161, 158, 62, 22, 188, 226, 190, 130, 213, 187, 62, 159, 82, 2, 63, 187, 166, 172, 190, 27, 140, 87, 190, 233, 6, 11, 63, 61, 17, 235, 190, 102, 173, 0, 63, 7, 56, 134, 189, 194, 120, 228, 61, 115, 204, 138, 190, 19, 130, 213, 189, 94, 7, 247, 190, 23, 166, 231, 62, 75, 40, 161, 190, 176, 162, 254, 190, 218, 140, 44, 62, 28, 235, 127, 61, 208, 126, 245, 62, 184, 108, 148, 60, 58, 89, 241, 62, 180, 209, 23, 62, 66, 193, 188, 188, 208, 67, 125, 190, 196, 37, 130, 61, 52, 107, 20, 189, 65, 223, 102, 62, 193, 235, 206, 190, 43, 44, 242, 190, 229, 66, 248, 190, 3, 193, 208, 62, 151, 6, 14, 191, 127, 130, 107, 190, 133, 180, 253, 62, 218, 36, 240, 62, 167, 37, 23, 189, 55, 209, 252, 189, 170, 188, 118, 62, 102, 105, 210, 62, 142, 206, 208, 190, 135, 239, 225, 188, 106, 63, 13, 191, 163, 134, 32, 62, 131, 37, 154, 190, 74, 139, 207, 62, 134, 56, 20, 62, 119, 215, 69, 190, 117, 158, 117, 190, 145, 136, 156, 190, 246, 17, 188, 60, 234, 182, 206, 62, 236, 130, 7, 191, 248, 164, 166, 62, 85, 46, 242, 62, 150, 159, 115, 190, 108, 59, 238, 61, 83, 96, 147, 61, 170, 184, 244, 62, 108, 0, 85, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 147, 19, 191, 48, 191, 170, 190, 4, 4, 168, 61, 127, 166, 154, 189, 182, 47, 161, 62, 196, 137, 244, 62, 181, 225, 250, 62, 247, 103, 158, 62, 75, 76, 130, 62, 191, 97, 19, 63, 210, 143, 171, 190, 147, 57, 206, 62, 204, 92, 133, 62, 27, 62, 106, 190, 44, 77, 83, 62, 201, 117, 56, 62, 45, 193, 97, 62, 69, 48, 225, 62, 60, 140, 204, 190, 185, 225, 167, 190, 12, 14, 221, 190, 158, 114, 243, 190, 206, 24, 4, 63, 179, 173, 237, 189, 133, 66, 9, 190, 45, 53, 56, 62, 219, 183, 0, 191, 250, 132, 18, 190, 166, 73, 50, 190, 78, 229, 57, 62, 131, 144, 246, 62, 32, 76, 30, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 251, 9, 190, 173, 229, 25, 62, 17, 115, 17, 62, 85, 151, 168, 61, 201, 229, 196, 61, 77, 89, 224, 61, 153, 246, 51, 62, 203, 212, 43, 62, 198, 238, 113, 188, 89, 70, 128, 60, 0, 168, 4, 62, 99, 105, 239, 61, 172, 90, 60, 61, 158, 43, 87, 58, 210, 106, 218, 59, 54, 24, 69, 189, 29, 156, 31, 190, 175, 54, 16, 62, 167, 163, 74, 189, 144, 227, 150, 61, 127, 142, 7, 62, 236, 220, 16, 188, 217, 102, 226, 189, 95, 191, 87, 189, 0, 183, 220, 60, 25, 157, 154, 189, 32, 214, 115, 61, 221, 25, 238, 188, 203, 199, 233, 61, 222, 26, 24, 62, 151, 166, 145, 61, 222, 37, 153, 189, 107, 104, 251, 189, 106, 134, 23, 62, 47, 76, 203, 61, 223, 241, 68, 189, 14, 222, 214, 61, 179, 90, 23, 62, 0, 14, 0, 62, 235, 125, 209, 189, 225, 14, 1, 62, 193, 139, 212, 61, 253, 16, 41, 190, 207, 43, 15, 62, 170, 17, 40, 62, 231, 142, 219, 61, 1, 243, 216, 61, 122, 189, 187, 189, 139, 77, 180, 61, 133, 241, 45, 61, 252, 148, 178, 189, 227, 210, 124, 189, 236, 199, 161, 189, 101, 218, 141, 189, 54, 207, 2, 62, 48, 221, 18, 190, 9, 228, 16, 61, 137, 26, 26, 190, 9, 152, 142, 59, 28, 145, 68, 189, 13, 5, 229, 189, 208, 89, 242, 60, 169, 41, 245, 61, 24, 52, 9, 190, 72, 207, 144, 189, 228, 152, 192, 189, 28, 251, 49, 190, 180, 85, 33, 190, 42, 244, 231, 61, 127, 52, 233, 59, 152, 253, 228, 61, 82, 247, 173, 61, 146, 48, 61, 60, 158, 225, 218, 188, 112, 229, 84, 189, 105, 227, 114, 61, 76, 90, 247, 188, 143, 151, 3, 190, 115, 158, 216, 60, 235, 52, 211, 59, 161, 15, 18, 62, 252, 51, 8, 190, 6, 240, 176, 59, 255, 5, 226, 189, 1, 227, 4, 190, 90, 89, 42, 188, 68, 234, 187, 189, 173, 61, 136, 61, 35, 86, 6, 62, 152, 180, 239, 61, 235, 99, 148, 188, 81, 170, 8, 189, 238, 190, 32, 189, 230, 98, 22, 62, 125, 195, 22, 62, 86, 92, 195, 188, 68, 64, 163, 60, 159, 8, 239, 61, 62, 17, 1, 62, 137, 106, 201, 189, 110, 203, 139, 189, 84, 89, 76, 61, 14, 125, 4, 190, 72, 164, 37, 62, 81, 205, 8, 190, 58, 69, 152, 61, 174, 240, 31, 62, 90, 140, 183, 188, 148, 14, 35, 189, 202, 79, 19, 190, 237, 86, 230, 61, 12, 78, 34, 190, 127, 183, 206, 61, 244, 181, 165, 61, 173, 173, 21, 62, 168, 190, 33, 190, 13, 109, 208, 61, 206, 110, 13, 189, 72, 232, 31, 190, 37, 213, 21, 190, 1, 229, 208, 61, 23, 37, 160, 189, 149, 186, 159, 189, 246, 46, 30, 62, 37, 46, 11, 62, 189, 63, 141, 61, 247, 36, 11, 190, 140, 217, 41, 62, 26, 137, 207, 189, 104, 151, 169, 189, 166, 75, 49, 190, 191, 217, 6, 62, 112, 101, 143, 61, 54, 163, 37, 62, 132, 205, 26, 62, 227, 186, 32, 62, 66, 31, 15, 190, 188, 97, 136, 189, 93, 31, 2, 62, 147, 33, 213, 189, 141, 94, 41, 189, 147, 204, 240, 61, 63, 225, 242, 61, 28, 236, 4, 190, 24, 212, 230, 61, 0, 71, 15, 189, 121, 18, 91, 61, 52, 212, 49, 190, 135, 143, 13, 190, 219, 78, 216, 61, 241, 237, 78, 189, 168, 21, 23, 62, 61, 157, 113, 189, 168, 132, 56, 189, 27, 121, 46, 190, 52, 115, 16, 62, 107, 254, 111, 189, 216, 153, 232, 189, 240, 72, 117, 188, 113, 33, 230, 61, 31, 46, 14, 62, 151, 180, 38, 62, 237, 231, 79, 58, 30, 141, 215, 189, 137, 233, 210, 189, 212, 68, 12, 62, 100, 51, 194, 189, 132, 166, 208, 61, 183, 172, 35, 61, 255, 116, 25, 190, 110, 164, 52, 60, 91, 90, 53, 61, 35, 94, 183, 189, 136, 23, 188, 189, 135, 163, 242, 60, 241, 90, 76, 59, 144, 239, 167, 61, 118, 3, 174, 60, 34, 230, 156, 189, 107, 255, 49, 61, 123, 134, 139, 189, 127, 68, 14, 62, 80, 88, 46, 190, 211, 23, 250, 61, 189, 47, 179, 60, 33, 72, 143, 189, 38, 216, 144, 61, 178, 120, 202, 60, 229, 223, 226, 188, 199, 177, 41, 62, 80, 237, 171, 189, 106, 148, 215, 61, 19, 122, 68, 61, 116, 22, 197, 61, 69, 130, 200, 189, 175, 50, 65, 189, 221, 184, 157, 189, 239, 45, 182, 59, 20, 14, 212, 61, 89, 153, 71, 61, 152, 81, 50, 190, 33, 56, 59, 189, 124, 227, 117, 61, 233, 21, 192, 189, 102, 41, 11, 62, 124, 116, 242, 61, 216, 167, 165, 189, 209, 100, 66, 189, 219, 146, 11, 189, 146, 219, 67, 61, 146, 111, 248, 60, 49, 161, 254, 189, 135, 201, 3, 190, 4, 82, 149, 59, 225, 166, 8, 190, 48, 130, 130, 61, 247, 132, 226, 61, 112, 82, 46, 189, 134, 83, 85, 189, 234, 89, 128, 61, 4, 196, 172, 61, 109, 171, 117, 61, 246, 142, 140, 61, 86, 78, 21, 190, 151, 223, 169, 189, 230, 214, 73, 188, 255, 224, 6, 62, 45, 179, 48, 190, 153, 197, 247, 59, 67, 149, 34, 62, 228, 163, 6, 190, 202, 56, 28, 190, 139, 208, 231, 189, 175, 193, 151, 61, 208, 213, 47, 190, 4, 0, 109, 61, 145, 135, 25, 190, 174, 36, 243, 189, 241, 121, 183, 61, 6, 129, 158, 189, 30, 163, 64, 189, 204, 100, 210, 61, 120, 11, 25, 190, 234, 177, 114, 61, 22, 198, 238, 189, 163, 50, 234, 189, 174, 46, 28, 189, 168, 12, 9, 62, 54, 130, 199, 61, 111, 186, 240, 188, 244, 29, 225, 60, 217, 73, 240, 61, 111, 123, 46, 62, 31, 56, 8, 60, 242, 221, 168, 61, 117, 165, 235, 189, 21, 238, 47, 61, 124, 49, 138, 189, 231, 26, 225, 61, 172, 131, 148, 60, 205, 131, 134, 189, 245, 204, 221, 189, 144, 191, 252, 189, 236, 34, 221, 61, 198, 191, 195, 188, 106, 162, 252, 60, 182, 154, 154, 59, 60, 30, 209, 61, 206, 138, 55, 188, 0, 7, 39, 62, 113, 18, 153, 188, 178, 188, 189, 189, 143, 205, 21, 189, 246, 160, 22, 62, 130, 102, 237, 189, 22, 112, 33, 190, 44, 227, 39, 190, 245, 31, 56, 61, 108, 118, 239, 188, 232, 219, 24, 62, 104, 197, 149, 61, 57, 66, 27, 62, 217, 219, 13, 190, 5, 50, 38, 62, 113, 50, 235, 61, 254, 146, 218, 61, 25, 33, 38, 62, 36, 89, 185, 61, 39, 237, 44, 190, 42, 110, 145, 61, 26, 41, 237, 189, 106, 190, 48, 61, 52, 0, 184, 61, 130, 233, 129, 188, 204, 253, 63, 61, 163, 86, 155, 61, 227, 37, 250, 189, 218, 109, 244, 189, 26, 78, 19, 62, 248, 109, 8, 62, 92, 255, 52, 62, 17, 231, 47, 62, 181, 7, 75, 188, 124, 160, 237, 188, 147, 239, 215, 60, 226, 208, 156, 60, 166, 183, 143, 187, 238, 246, 50, 190, 74, 245, 32, 189, 119, 214, 141, 188, 173, 243, 204, 188, 45, 151, 228, 189, 118, 2, 133, 60, 110, 167, 101, 189, 152, 89, 231, 189, 114, 81, 241, 186, 253, 73, 45, 62, 57, 133, 4, 190, 227, 204, 6, 188, 59, 222, 40, 189, 59, 241, 245, 60, 114, 101, 129, 61, 182, 108, 51, 62, 124, 245, 41, 62, 41, 146, 106, 60, 13, 74, 18, 190, 184, 68, 158, 189, 226, 104, 242, 61, 118, 56, 203, 189, 107, 58, 220, 188, 215, 240, 86, 60, 129, 65, 2, 190, 232, 238, 21, 61, 167, 179, 10, 61, 74, 75, 184, 189, 147, 194, 171, 61, 137, 131, 122, 189, 151, 3, 22, 190, 176, 39, 65, 189, 107, 5, 203, 61, 254, 71, 34, 62, 248, 218, 10, 190, 57, 76, 34, 189, 117, 91, 18, 62, 212, 158, 7, 62, 218, 112, 185, 188, 219, 197, 9, 189, 147, 169, 74, 60, 218, 73, 176, 59, 208, 147, 183, 189, 145, 168, 55, 189, 59, 111, 51, 62, 8, 236, 250, 61, 236, 146, 219, 61, 29, 171, 243, 189, 229, 112, 185, 60, 109, 22, 11, 61, 187, 193, 161, 61, 212, 36, 4, 190, 211, 110, 37, 62, 199, 12, 209, 188, 36, 138, 11, 189, 144, 248, 41, 190, 131, 116, 17, 62, 52, 66, 51, 62, 192, 32, 173, 189, 160, 219, 24, 62, 216, 71, 98, 61, 98, 34, 116, 61, 118, 229, 7, 62, 163, 237, 184, 189, 62, 184, 46, 190, 6, 186, 145, 188, 163, 58, 3, 62, 86, 160, 215, 60, 52, 56, 187, 61, 50, 198, 240, 189, 80, 65, 176, 61, 116, 255, 110, 61, 65, 75, 172, 189, 237, 76, 159, 189, 27, 67, 9, 62, 120, 252, 89, 61, 235, 178, 9, 189, 20, 233, 190, 61, 20, 54, 245, 61, 180, 212, 182, 189, 167, 161, 145, 61, 201, 204, 246, 61, 135, 83, 8, 190, 195, 186, 213, 61, 170, 188, 32, 59, 61, 81, 19, 190, 74, 133, 160, 60, 234, 227, 47, 62, 32, 58, 14, 62, 221, 90, 3, 190, 49, 234, 234, 60, 45, 60, 136, 61, 112, 97, 170, 61, 177, 240, 138, 189, 3, 253, 19, 188, 124, 231, 9, 190, 179, 10, 111, 60, 185, 74, 28, 190, 52, 203, 26, 62, 191, 56, 11, 60, 54, 76, 160, 188, 18, 246, 138, 189, 223, 41, 48, 62, 121, 86, 230, 60, 185, 182, 6, 190, 77, 140, 94, 61, 80, 153, 90, 189, 193, 25, 183, 187, 115, 123, 6, 62, 61, 75, 66, 189, 67, 243, 182, 60, 15, 119, 1, 190, 121, 42, 134, 189, 201, 182, 149, 189, 218, 254, 20, 189, 240, 62, 154, 189, 30, 254, 212, 189, 101, 171, 13, 61, 129, 223, 136, 61, 124, 148, 128, 60, 227, 97, 70, 61, 27, 77, 12, 62, 79, 240, 168, 61, 49, 112, 245, 61, 198, 61, 191, 59, 205, 196, 30, 62, 31, 121, 32, 190, 35, 103, 232, 61, 74, 242, 32, 62, 156, 64, 252, 189, 253, 236, 132, 189, 74, 44, 24, 190, 81, 131, 2, 190, 15, 88, 116, 61, 240, 108, 138, 189, 158, 242, 229, 188, 108, 215, 3, 190, 95, 203, 50, 62, 99, 197, 153, 61, 197, 211, 197, 61, 90, 2, 34, 189, 31, 103, 33, 190, 108, 103, 106, 61, 14, 167, 33, 62, 154, 100, 28, 62, 177, 0, 192, 61, 149, 110, 223, 189, 186, 254, 155, 189, 151, 254, 22, 61, 43, 115, 21, 62, 157, 245, 163, 188, 231, 149, 31, 190, 242, 2, 44, 190, 113, 58, 237, 189, 244, 8, 35, 190, 232, 208, 13, 62, 204, 127, 32, 190, 162, 13, 32, 61, 128, 241, 35, 190, 124, 57, 160, 61, 6, 236, 201, 60, 42, 46, 193, 189, 93, 152, 23, 188, 92, 113, 95, 61, 72, 108, 169, 61, 220, 24, 24, 190, 92, 73, 108, 61, 124, 255, 213, 61, 51, 235, 171, 61, 33, 23, 49, 190, 248, 18, 22, 189, 207, 8, 195, 61, 26, 32, 182, 60, 168, 184, 118, 189, 1, 153, 16, 190, 164, 53, 225, 61, 144, 51, 44, 62, 28, 141, 79, 61, 76, 188, 145, 189, 125, 108, 176, 61, 43, 10, 231, 60, 47, 201, 216, 189, 135, 142, 147, 60, 86, 175, 186, 61, 140, 49, 186, 61, 188, 84, 86, 189, 129, 21, 47, 190, 2, 29, 88, 60, 222, 203, 116, 60, 191, 162, 191, 61, 223, 240, 122, 61, 238, 110, 6, 62, 129, 153, 121, 189, 201, 182, 141, 61, 230, 98, 20, 62, 147, 136, 27, 190, 67, 33, 4, 190, 104, 107, 21, 61, 197, 208, 66, 61, 173, 111, 87, 187, 98, 24, 195, 189, 148, 217, 43, 190, 182, 35, 124, 61, 206, 30, 204, 61, 238, 90, 99, 188, 91, 87, 220, 189, 105, 210, 43, 190, 52, 142, 43, 62, 29, 90, 99, 61, 112, 147, 15, 190, 153, 252, 185, 189, 198, 98, 147, 188, 220, 88, 192, 189, 226, 167, 227, 61, 131, 44, 186, 61, 58, 41, 15, 62, 191, 162, 164, 186, 116, 182, 209, 61, 193, 227, 166, 189, 126, 252, 160, 61, 224, 32, 180, 189, 188, 13, 204, 188, 211, 168, 21, 189, 105, 112, 235, 60, 119, 210, 166, 61, 241, 214, 151, 61, 139, 18, 32, 62, 188, 72, 225, 60, 223, 44, 218, 61, 186, 78, 144, 61, 146, 14, 13, 190, 9, 5, 229, 189, 240, 63, 246, 60, 70, 212, 85, 188, 242, 49, 22, 190, 251, 182, 38, 62, 202, 214, 29, 62, 151, 202, 16, 190, 23, 14, 231, 61, 113, 186, 102, 61, 121, 1, 154, 189, 2, 188, 201, 61, 252, 25, 24, 190, 50, 60, 111, 188, 178, 14, 59, 189, 96, 38, 140, 60, 78, 245, 199, 61, 16, 22, 255, 61, 107, 39, 100, 188, 18, 20, 1, 60, 221, 141, 47, 190, 245, 204, 152, 61, 211, 246, 181, 189, 93, 42, 231, 61, 249, 159, 200, 189, 81, 122, 123, 61, 184, 247, 15, 190, 213, 220, 31, 190, 71, 148, 244, 189, 219, 44, 223, 188, 230, 217, 185, 188, 90, 89, 44, 190, 194, 8, 171, 58, 105, 19, 51, 60, 199, 80, 24, 190, 223, 105, 2, 60, 255, 197, 12, 62, 16, 244, 95, 61, 31, 54, 102, 61, 37, 4, 141, 61, 81, 225, 153, 61, 209, 197, 140, 189, 113, 211, 30, 62, 140, 246, 152, 61, 246, 61, 46, 190, 143, 185, 51, 61, 40, 25, 87, 189, 243, 175, 12, 190, 52, 188, 99, 189, 27, 86, 144, 188, 102, 192, 27, 62, 190, 170, 48, 62, 101, 132, 34, 62, 171, 222, 27, 190, 246, 243, 1, 60, 216, 140, 152, 60, 141, 153, 169, 61, 83, 71, 228, 189, 3, 46, 207, 61, 117, 159, 14, 188, 128, 5, 135, 61, 234, 106, 192, 60, 98, 173, 23, 190, 90, 52, 251, 189, 87, 211, 73, 61, 76, 73, 252, 61, 201, 153, 34, 188, 68, 139, 160, 61, 148, 113, 47, 62, 201, 221, 246, 189, 52, 242, 110, 189, 255, 205, 115, 61, 134, 64, 35, 190, 231, 201, 227, 61, 157, 198, 247, 61, 17, 242, 199, 61, 124, 39, 169, 60, 231, 50, 22, 190, 208, 175, 207, 61, 172, 94, 185, 189, 111, 105, 194, 61, 195, 93, 12, 190, 207, 72, 183, 189, 171, 23, 236, 189, 15, 41, 248, 188, 241, 136, 146, 188, 17, 141, 237, 189, 28, 20, 168, 60, 254, 134, 248, 61, 47, 210, 203, 189, 140, 35, 161, 187, 132, 202, 167, 61, 76, 240, 216, 189, 246, 81, 51, 190, 3, 22, 10, 62, 164, 91, 15, 62, 154, 8, 73, 61, 125, 35, 99, 61, 132, 99, 55, 61, 106, 97, 7, 62, 106, 24, 145, 189, 198, 61, 21, 61, 92, 130, 188, 60, 0, 174, 236, 61, 223, 145, 205, 189, 28, 161, 14, 62, 117, 128, 226, 61, 89, 75, 42, 62, 94, 30, 13, 190, 83, 204, 130, 189, 20, 85, 77, 188, 120, 90, 172, 61, 218, 16, 17, 190, 156, 239, 24, 190, 169, 121, 159, 61, 228, 217, 233, 189, 163, 221, 176, 188, 15, 67, 242, 189, 213, 173, 209, 189, 135, 129, 144, 59, 139, 192, 2, 190, 177, 108, 190, 60, 5, 181, 181, 59, 104, 34, 14, 190, 26, 124, 243, 189, 8, 110, 236, 61, 50, 171, 242, 188, 53, 159, 132, 189, 21, 31, 5, 190, 227, 109, 219, 60, 92, 77, 236, 61, 105, 236, 132, 188, 128, 188, 247, 189, 87, 233, 1, 190, 253, 248, 3, 61, 87, 85, 203, 189, 220, 71, 221, 61, 135, 92, 203, 61, 230, 143, 250, 61, 24, 210, 144, 188, 133, 156, 9, 190, 34, 206, 3, 190, 34, 80, 129, 61, 251, 72, 30, 190, 128, 189, 20, 189, 176, 237, 180, 189, 47, 25, 2, 62, 47, 112, 22, 190, 81, 42, 124, 61, 74, 185, 23, 190, 25, 169, 50, 62, 169, 248, 151, 186, 204, 246, 41, 189, 111, 217, 27, 62, 249, 70, 37, 60, 227, 59, 37, 190, 173, 151, 223, 61, 88, 21, 169, 188, 148, 33, 124, 189, 177, 38, 134, 189, 87, 105, 69, 61, 165, 133, 44, 61, 106, 112, 186, 61, 138, 79, 34, 190, 64, 66, 176, 59, 232, 34, 215, 189, 247, 161, 245, 61, 8, 70, 214, 189, 152, 110, 4, 62, 27, 11, 233, 188, 137, 125, 237, 189, 140, 220, 40, 62, 19, 166, 8, 61, 67, 150, 235, 188, 26, 19, 255, 188, 15, 72, 122, 189, 69, 13, 204, 61, 218, 132, 6, 62, 139, 225, 142, 189, 28, 132, 52, 190, 159, 162, 68, 189, 108, 187, 31, 189, 224, 169, 130, 61, 92, 91, 255, 188, 55, 253, 136, 61, 104, 157, 189, 189, 144, 214, 192, 189, 8, 170, 241, 188, 43, 16, 0, 190, 222, 114, 22, 189, 61, 254, 225, 188, 120, 168, 22, 190, 197, 212, 62, 188, 215, 162, 226, 61, 65, 10, 21, 190, 242, 21, 235, 60, 208, 206, 129, 61, 247, 171, 142, 60, 208, 151, 1, 189, 216, 7, 196, 189, 240, 235, 134, 189, 89, 18, 182, 61, 124, 131, 127, 61, 211, 221, 31, 62, 139, 100, 46, 190, 39, 229, 56, 61, 73, 196, 79, 189, 47, 58, 217, 189, 110, 230, 140, 189, 199, 98, 46, 62, 228, 64, 34, 190, 64, 48, 238, 189, 193, 192, 189, 61, 40, 197, 42, 62, 76, 66, 217, 189, 197, 64, 201, 60, 41, 113, 86, 189, 160, 238, 164, 61, 163, 138, 246, 61, 174, 106, 7, 190, 118, 158, 45, 190, 96, 253, 137, 60, 177, 82, 187, 189, 238, 39, 198, 188, 143, 230, 45, 61, 42, 212, 185, 61, 212, 105, 11, 62, 207, 78, 208, 59, 189, 4, 143, 61, 38, 65, 224, 189, 153, 129, 222, 189, 106, 166, 12, 62, 242, 245, 26, 62, 244, 133, 162, 189, 3, 72, 26, 190, 73, 227, 169, 189, 94, 244, 5, 190, 136, 52, 16, 62, 163, 4, 42, 62, 169, 103, 153, 189, 152, 216, 162, 61, 12, 247, 231, 188, 154, 45, 203, 188, 244, 254, 3, 188, 219, 53, 235, 59, 171, 116, 163, 61, 149, 189, 204, 60, 191, 49, 1, 61, 241, 87, 18, 62, 32, 49, 190, 189, 95, 54, 246, 61, 176, 95, 163, 187, 159, 229, 118, 187, 107, 32, 2, 189, 194, 93, 162, 189, 21, 9, 158, 61, 27, 57, 186, 61, 213, 111, 39, 190, 198, 229, 119, 60, 100, 126, 190, 61, 238, 221, 241, 189, 119, 34, 46, 189, 141, 143, 30, 60, 236, 94, 193, 61, 95, 231, 33, 62, 157, 6, 10, 61, 41, 144, 15, 189, 254, 176, 111, 189, 169, 182, 136, 61, 222, 95, 246, 61, 152, 231, 181, 189, 16, 21, 217, 189, 195, 172, 119, 61, 37, 176, 40, 62, 65, 69, 116, 60, 20, 219, 188, 189, 8, 20, 0, 62, 226, 171, 141, 189, 187, 150, 24, 190, 93, 235, 243, 61, 64, 251, 172, 189, 56, 230, 128, 189, 115, 11, 103, 60, 68, 31, 4, 62, 197, 179, 40, 190, 201, 13, 217, 61, 94, 182, 116, 61, 38, 18, 243, 60, 2, 1, 47, 190, 186, 59, 178, 189, 34, 226, 237, 188, 21, 186, 21, 190, 234, 240, 141, 61, 50, 102, 231, 189, 173, 231, 85, 189, 217, 244, 11, 190, 50, 56, 165, 189, 19, 200, 119, 187, 237, 147, 194, 61, 48, 70, 40, 62, 51, 102, 120, 189, 18, 225, 55, 61, 50, 153, 190, 60, 188, 103, 9, 60, 134, 172, 235, 189, 178, 59, 6, 190, 171, 207, 39, 62, 30, 147, 243, 61, 11, 192, 173, 189, 201, 206, 244, 187, 78, 89, 87, 189, 252, 190, 214, 189, 162, 125, 16, 62, 124, 205, 198, 189, 58, 30, 42, 62, 13, 217, 26, 62, 213, 23, 40, 190, 121, 220, 24, 190, 32, 25, 224, 189, 29, 207, 232, 61, 183, 190, 56, 189, 94, 91, 37, 189, 7, 175, 16, 189, 248, 252, 118, 189, 151, 151, 51, 190, 67, 214, 177, 189, 182, 155, 42, 61, 240, 5, 155, 189, 11, 115, 244, 189, 151, 254, 183, 188, 94, 213, 215, 61, 192, 188, 100, 189, 133, 122, 231, 61, 40, 85, 100, 187, 13, 38, 8, 62, 217, 198, 37, 62, 120, 207, 30, 189, 69, 242, 49, 189, 44, 169, 152, 189, 54, 191, 51, 62, 210, 171, 27, 62, 60, 223, 175, 189, 135, 61, 197, 189, 254, 89, 192, 189, 148, 254, 152, 61, 95, 172, 178, 61, 216, 211, 213, 61, 169, 111, 203, 61, 127, 101, 235, 60, 83, 210, 205, 187, 147, 66, 20, 62, 170, 1, 211, 189, 145, 97, 144, 61, 139, 19, 230, 61, 127, 207, 31, 62, 197, 153, 232, 188, 243, 177, 174, 61, 182, 136, 131, 188, 110, 52, 202, 189, 78, 90, 140, 189, 237, 61, 135, 61, 172, 38, 132, 61, 246, 196, 30, 62, 120, 28, 22, 190, 34, 102, 0, 62, 14, 34, 222, 189, 214, 207, 187, 188, 63, 187, 83, 61, 19, 241, 226, 61, 107, 127, 230, 189, 155, 120, 161, 189, 110, 130, 195, 186, 89, 254, 5, 61, 54, 16, 21, 61, 167, 78, 47, 185, 119, 117, 152, 60, 1, 191, 214, 189, 249, 216, 15, 62, 69, 135, 65, 189, 112, 28, 152, 188, 124, 116, 227, 61, 167, 180, 17, 190, 97, 104, 54, 189, 35, 207, 131, 59, 28, 190, 158, 61, 200, 100, 237, 189, 158, 153, 209, 189, 130, 74, 96, 189, 135, 29, 226, 188, 242, 75, 53, 189, 103, 93, 7, 189, 201, 38, 142, 189, 232, 123, 29, 62, 8, 114, 246, 188, 133, 49, 15, 189, 50, 221, 52, 61, 52, 168, 210, 60, 228, 225, 24, 62, 52, 193, 211, 61, 228, 206, 113, 61, 9, 219, 8, 62, 26, 239, 200, 61, 76, 96, 202, 57, 223, 27, 253, 61, 74, 49, 187, 60, 177, 14, 188, 61, 219, 126, 37, 61, 26, 247, 210, 189, 247, 28, 100, 61, 48, 40, 30, 62, 90, 41, 98, 61, 183, 217, 154, 189, 136, 126, 237, 189, 34, 41, 8, 62, 138, 6, 194, 59, 58, 236, 44, 62, 253, 173, 5, 190, 70, 104, 104, 61, 9, 72, 198, 61, 54, 140, 27, 62, 138, 170, 16, 60, 127, 31, 187, 189, 103, 104, 26, 190, 188, 57, 18, 190, 19, 179, 187, 189, 205, 91, 139, 61, 188, 36, 190, 189, 223, 228, 39, 62, 46, 111, 131, 61, 197, 185, 143, 189, 69, 124, 22, 189, 60, 119, 51, 62, 35, 239, 8, 62, 128, 124, 222, 188, 217, 106, 192, 188, 126, 83, 24, 62, 152, 211, 41, 62, 242, 35, 25, 189, 59, 237, 229, 189, 177, 4, 56, 60, 52, 231, 231, 188, 80, 251, 208, 61, 238, 30, 144, 189, 37, 239, 199, 189, 175, 122, 149, 61, 63, 206, 250, 189, 17, 212, 15, 62, 12, 73, 8, 188, 172, 238, 25, 190, 200, 156, 65, 188, 115, 232, 175, 61, 178, 131, 28, 61, 176, 89, 44, 62, 254, 138, 168, 60, 192, 76, 94, 60, 59, 77, 44, 190, 232, 13, 146, 61, 160, 99, 97, 61, 80, 76, 128, 189, 172, 161, 242, 186, 145, 177, 50, 58, 226, 86, 18, 62, 112, 154, 36, 190, 220, 174, 21, 190, 22, 204, 167, 61, 194, 107, 99, 189, 229, 226, 17, 190, 47, 169, 48, 62, 249, 132, 113, 61, 153, 87, 27, 60, 146, 162, 204, 189, 144, 79, 4, 61, 137, 93, 26, 190, 32, 123, 70, 189, 200, 189, 41, 62, 255, 224, 176, 188, 128, 210, 20, 190, 149, 190, 138, 61, 29, 97, 46, 62, 227, 209, 181, 61, 203, 14, 240, 61, 172, 184, 56, 61, 206, 42, 103, 189, 25, 30, 44, 61, 8, 77, 30, 190, 250, 98, 107, 61, 192, 184, 87, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 241, 164, 61, 210, 205, 137, 61, 29, 182, 26, 190, 136, 198, 246, 61, 164, 85, 21, 188, 125, 100, 215, 189, 180, 214, 137, 188, 130, 196, 191, 189, 161, 75, 195, 61, 247, 235, 166, 61, 158, 203, 88, 61, 143, 107, 212, 188, 239, 75, 26, 189, 148, 155, 12, 61, 67, 6, 179, 189, 29, 202, 80, 189, 16, 7, 246, 61, 113, 0, 15, 62, 202, 26, 153, 189, 203, 67, 106, 189, 224, 97, 16, 189, 130, 248, 254, 189, 32, 79, 42, 190, 123, 106, 54, 188, 219, 51, 197, 61, 96, 17, 163, 60, 136, 211, 38, 62, 106, 35, 132, 60, 117, 143, 52, 190, 162, 78, 208, 187, 210, 19, 28, 189, 31, 100, 57, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 248, 148, 60, 100, 11, 36, 62, 51, 113, 43, 62, 121, 230, 19, 189, 123, 97, 52, 62, 223, 111, 79, 189, 29, 89, 43, 190, 21, 40, 42, 62, 181, 205, 155, 61, 85, 84, 35, 62, 188, 203, 200, 61, 224, 15, 149, 189, 202, 220, 50, 60, 53, 244, 97, 188, 56, 226, 18, 62, 114, 144, 135, 189, 133, 251, 242, 61, 78, 92, 167, 59, 125, 64, 149, 189, 138, 122, 8, 190, 103, 9, 160, 61, 165, 209, 209, 189, 125, 254, 169, 189, 161, 245, 108, 61, 200, 95, 25, 61, 134, 102, 50, 60, 247, 131, 9, 190, 98, 142, 0, 61, 200, 234, 78, 186, 186, 239, 44, 62, 88, 117, 192, 61, 215, 41, 194, 61, 161, 199, 173, 189, 61, 252, 210, 61, 103, 172, 223, 61, 22, 210, 129, 189, 21, 96, 250, 189, 2, 170, 11, 62, 171, 83, 248, 189, 160, 156, 189, 188, 98, 82, 216, 189, 217, 60, 128, 189, 177, 199, 15, 62, 39, 7, 194, 189, 73, 215, 216, 61, 31, 1, 165, 61, 76, 37, 194, 59, 201, 157, 251, 189, 66, 55, 24, 190, 115, 72, 253, 189, 102, 226, 25, 189, 170, 27, 139, 60, 116, 151, 166, 61, 2, 145, 75, 189, 198, 37, 34, 62, 39, 24, 21, 62, 197, 27, 31, 62, 39, 70, 237, 61, 176, 129, 48, 190, 248, 120, 179, 186, 84, 162, 4, 189, 120, 114, 235, 189, 189, 15, 27, 189, 223, 6, 12, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 41, 8, 62, 232, 11, 96, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {179, 108, 123, 191, 14, 106, 8, 192, 60, 194, 136, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {140, 4, 236, 62, 102, 242, 151, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0097/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}