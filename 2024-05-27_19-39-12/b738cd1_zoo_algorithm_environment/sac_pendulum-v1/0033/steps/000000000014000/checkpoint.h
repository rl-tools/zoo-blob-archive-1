// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 162, 9, 63, 14, 221, 250, 62, 219, 65, 67, 62, 124, 99, 111, 190, 250, 234, 167, 62, 157, 70, 0, 191, 60, 210, 183, 189, 197, 183, 99, 191, 86, 11, 152, 62, 212, 143, 12, 191, 170, 47, 139, 190, 105, 63, 56, 191, 243, 136, 67, 191, 169, 248, 50, 191, 160, 194, 53, 190, 19, 2, 35, 191, 240, 113, 118, 191, 65, 117, 65, 62, 255, 216, 69, 63, 154, 187, 30, 191, 140, 234, 30, 190, 193, 209, 131, 63, 4, 215, 116, 63, 125, 218, 12, 63, 6, 183, 184, 190, 109, 216, 66, 191, 155, 163, 154, 189, 218, 170, 146, 63, 90, 233, 62, 62, 218, 160, 48, 61, 247, 66, 133, 62, 136, 71, 199, 188, 0, 229, 98, 60, 212, 155, 8, 191, 144, 154, 196, 191, 234, 112, 219, 190, 201, 106, 252, 62, 181, 251, 171, 191, 224, 195, 123, 190, 80, 245, 40, 61, 29, 24, 5, 190, 40, 94, 231, 62, 55, 168, 233, 189, 216, 196, 133, 62, 190, 211, 19, 191, 59, 72, 49, 190, 149, 9, 163, 63, 199, 151, 28, 63, 226, 60, 38, 63, 244, 1, 142, 191, 179, 115, 73, 190, 27, 230, 27, 63, 94, 79, 178, 191, 28, 110, 178, 190, 107, 73, 199, 190, 24, 146, 218, 60, 77, 36, 74, 63, 54, 233, 2, 63, 162, 32, 207, 62, 6, 185, 186, 190, 241, 179, 76, 191, 90, 138, 74, 191, 239, 128, 78, 190, 139, 52, 44, 62, 203, 2, 104, 191, 209, 185, 15, 63, 173, 197, 163, 190, 230, 45, 114, 63, 198, 213, 8, 190, 138, 31, 64, 190, 208, 115, 132, 63, 202, 126, 43, 63, 128, 217, 84, 63, 30, 117, 27, 191, 126, 33, 187, 190, 187, 87, 18, 190, 207, 165, 80, 63, 108, 196, 6, 191, 128, 8, 31, 62, 162, 22, 49, 191, 139, 90, 116, 190, 204, 124, 101, 63, 57, 208, 97, 62, 235, 55, 82, 190, 79, 92, 174, 61, 37, 37, 12, 191, 70, 184, 235, 61, 6, 175, 22, 191, 119, 119, 250, 190, 108, 146, 106, 62, 51, 109, 63, 62, 116, 26, 128, 191, 86, 19, 210, 190, 103, 163, 230, 190, 241, 167, 203, 61, 97, 19, 198, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 37, 50, 191, 206, 129, 14, 191, 33, 253, 44, 61, 5, 7, 218, 190, 118, 169, 33, 63, 55, 77, 139, 190, 143, 79, 165, 62, 177, 198, 251, 190, 197, 220, 55, 63, 229, 175, 8, 63, 123, 185, 187, 190, 68, 218, 19, 190, 132, 221, 211, 189, 56, 3, 240, 190, 165, 101, 141, 61, 64, 16, 27, 61, 167, 134, 26, 189, 170, 138, 90, 190, 167, 164, 146, 190, 65, 73, 227, 62, 82, 240, 13, 191, 51, 93, 87, 190, 174, 164, 244, 62, 22, 49, 233, 61, 0, 6, 117, 191, 176, 17, 16, 62, 145, 12, 151, 190, 96, 12, 39, 191, 42, 65, 164, 62, 123, 238, 79, 62, 249, 186, 220, 190, 156, 42, 31, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 73, 23, 191, 229, 173, 48, 62, 42, 191, 202, 189, 141, 223, 6, 62, 48, 131, 108, 191, 209, 6, 39, 190, 70, 79, 240, 61, 105, 105, 0, 63, 95, 255, 115, 190, 155, 251, 11, 63, 67, 34, 60, 189, 207, 255, 50, 190, 199, 134, 44, 191, 181, 243, 108, 62, 228, 225, 161, 189, 49, 137, 143, 60, 188, 82, 28, 190, 207, 85, 35, 191, 205, 252, 144, 189, 67, 59, 53, 61, 179, 242, 87, 190, 106, 3, 146, 62, 214, 9, 110, 62, 139, 61, 98, 59, 92, 220, 83, 191, 222, 52, 174, 62, 205, 162, 183, 190, 233, 104, 214, 189, 234, 254, 12, 189, 224, 169, 2, 190, 144, 253, 244, 190, 250, 182, 200, 189, 164, 254, 251, 189, 123, 13, 56, 62, 139, 50, 6, 63, 217, 159, 16, 62, 219, 5, 49, 61, 126, 74, 55, 63, 134, 85, 163, 190, 86, 178, 220, 61, 251, 224, 162, 188, 10, 156, 184, 190, 99, 12, 32, 190, 17, 242, 235, 61, 24, 87, 182, 190, 150, 96, 112, 190, 1, 123, 152, 61, 192, 198, 178, 191, 204, 71, 197, 189, 15, 14, 199, 189, 152, 225, 89, 191, 121, 218, 47, 189, 210, 11, 59, 62, 21, 21, 162, 186, 53, 158, 15, 190, 45, 253, 202, 191, 162, 115, 156, 189, 28, 209, 185, 61, 16, 53, 203, 188, 180, 165, 207, 189, 219, 57, 130, 61, 120, 88, 3, 63, 236, 236, 66, 189, 151, 170, 19, 62, 9, 155, 25, 63, 37, 208, 133, 188, 229, 241, 167, 62, 84, 194, 112, 61, 38, 94, 142, 190, 170, 70, 129, 61, 113, 4, 171, 62, 57, 53, 240, 190, 109, 42, 155, 188, 146, 255, 217, 62, 232, 60, 239, 61, 33, 46, 133, 190, 87, 101, 130, 62, 99, 43, 64, 62, 99, 166, 37, 190, 157, 236, 164, 189, 230, 13, 143, 62, 111, 128, 164, 62, 163, 0, 0, 62, 137, 86, 156, 61, 28, 214, 75, 191, 202, 51, 120, 187, 81, 10, 103, 190, 178, 59, 141, 190, 71, 78, 172, 62, 170, 92, 153, 189, 214, 82, 20, 62, 28, 192, 194, 62, 36, 81, 154, 190, 154, 106, 131, 59, 77, 125, 20, 61, 233, 131, 86, 189, 63, 50, 80, 63, 186, 174, 189, 189, 30, 92, 145, 61, 108, 241, 140, 189, 92, 126, 141, 191, 149, 218, 65, 189, 138, 141, 167, 189, 76, 71, 150, 62, 4, 105, 205, 190, 108, 68, 76, 62, 161, 67, 158, 62, 138, 136, 238, 188, 37, 131, 140, 190, 156, 142, 123, 62, 252, 45, 54, 62, 87, 75, 30, 188, 67, 218, 199, 190, 175, 88, 52, 190, 87, 131, 15, 62, 201, 193, 148, 62, 196, 198, 169, 188, 99, 159, 76, 62, 68, 134, 188, 190, 46, 219, 13, 190, 214, 33, 147, 60, 115, 183, 18, 62, 7, 62, 25, 62, 71, 26, 71, 189, 125, 34, 211, 189, 243, 169, 28, 191, 186, 129, 116, 62, 230, 199, 133, 59, 166, 154, 47, 63, 14, 205, 228, 187, 71, 233, 84, 62, 142, 48, 156, 62, 225, 156, 156, 190, 4, 109, 214, 187, 162, 226, 91, 190, 177, 41, 121, 62, 222, 114, 217, 190, 248, 245, 198, 61, 178, 211, 128, 62, 63, 144, 61, 61, 56, 55, 161, 190, 168, 214, 125, 60, 190, 94, 121, 62, 68, 169, 207, 189, 174, 6, 155, 189, 62, 65, 236, 189, 130, 17, 0, 190, 30, 38, 105, 62, 90, 244, 132, 190, 10, 24, 27, 189, 56, 100, 38, 62, 178, 190, 100, 190, 213, 19, 145, 62, 220, 133, 252, 61, 119, 43, 63, 61, 123, 62, 223, 61, 145, 38, 47, 190, 205, 81, 5, 191, 2, 163, 162, 189, 54, 211, 253, 61, 178, 70, 33, 63, 61, 172, 121, 60, 104, 223, 43, 189, 149, 131, 189, 188, 130, 12, 69, 62, 218, 134, 146, 190, 53, 245, 99, 62, 2, 52, 107, 190, 18, 63, 93, 62, 132, 49, 132, 62, 171, 65, 43, 62, 8, 175, 228, 189, 229, 183, 201, 60, 69, 201, 197, 189, 174, 183, 215, 61, 49, 242, 17, 62, 29, 82, 106, 62, 144, 155, 227, 61, 249, 171, 117, 62, 207, 228, 90, 62, 206, 10, 229, 190, 63, 106, 175, 62, 251, 105, 131, 62, 171, 121, 131, 61, 82, 105, 83, 188, 176, 247, 71, 189, 164, 119, 213, 59, 240, 129, 240, 62, 130, 62, 159, 61, 123, 19, 145, 62, 20, 51, 73, 188, 111, 16, 126, 62, 222, 150, 51, 62, 30, 51, 234, 188, 100, 21, 61, 61, 127, 74, 35, 188, 193, 70, 74, 189, 46, 149, 99, 189, 196, 105, 239, 189, 168, 218, 204, 189, 162, 150, 38, 190, 157, 9, 19, 191, 192, 242, 107, 61, 52, 0, 153, 189, 136, 151, 103, 62, 27, 20, 234, 61, 144, 253, 131, 59, 190, 156, 116, 188, 39, 211, 246, 61, 239, 58, 212, 61, 240, 207, 25, 190, 205, 159, 10, 190, 167, 89, 156, 62, 27, 30, 131, 61, 150, 46, 166, 190, 158, 11, 222, 59, 149, 32, 44, 62, 86, 32, 65, 189, 148, 227, 87, 61, 214, 238, 196, 189, 33, 51, 237, 190, 24, 40, 115, 190, 189, 153, 255, 61, 218, 246, 95, 190, 70, 160, 235, 190, 56, 214, 31, 189, 8, 26, 135, 189, 210, 206, 179, 61, 219, 126, 7, 190, 24, 6, 8, 190, 228, 50, 138, 189, 90, 155, 224, 62, 234, 105, 226, 60, 185, 243, 148, 60, 114, 190, 134, 61, 159, 13, 186, 189, 199, 220, 156, 62, 34, 36, 197, 61, 68, 89, 110, 188, 206, 202, 78, 190, 185, 146, 143, 189, 78, 185, 135, 62, 76, 60, 228, 60, 56, 157, 247, 189, 131, 107, 136, 190, 223, 23, 195, 61, 237, 106, 153, 190, 115, 117, 52, 61, 118, 51, 188, 62, 81, 147, 145, 189, 142, 39, 153, 62, 231, 47, 128, 62, 200, 183, 130, 189, 250, 209, 52, 188, 51, 111, 94, 62, 248, 143, 130, 189, 120, 196, 236, 190, 221, 66, 187, 60, 29, 250, 37, 62, 182, 222, 250, 60, 204, 15, 8, 189, 176, 54, 210, 189, 13, 113, 168, 190, 32, 37, 141, 190, 145, 141, 47, 190, 51, 244, 45, 190, 177, 23, 14, 190, 88, 74, 209, 189, 233, 40, 99, 190, 249, 6, 77, 62, 145, 212, 41, 62, 151, 142, 130, 61, 130, 162, 69, 190, 237, 184, 168, 190, 63, 58, 167, 190, 124, 97, 53, 62, 235, 161, 64, 62, 0, 73, 200, 190, 145, 169, 146, 62, 232, 194, 180, 58, 9, 16, 250, 190, 94, 6, 18, 189, 181, 216, 130, 190, 102, 162, 29, 190, 102, 59, 56, 190, 206, 163, 80, 191, 49, 218, 39, 189, 128, 241, 78, 187, 210, 239, 96, 188, 202, 173, 90, 190, 96, 66, 211, 62, 123, 249, 68, 62, 73, 44, 33, 61, 19, 140, 79, 62, 211, 239, 16, 58, 151, 254, 44, 190, 35, 241, 4, 62, 28, 118, 206, 58, 252, 231, 113, 190, 166, 246, 43, 62, 23, 179, 155, 190, 75, 139, 16, 61, 84, 81, 48, 62, 46, 20, 80, 191, 146, 38, 174, 190, 85, 147, 220, 190, 97, 139, 131, 191, 246, 35, 71, 61, 68, 170, 1, 190, 181, 32, 105, 191, 109, 145, 175, 62, 26, 145, 11, 191, 28, 91, 116, 191, 120, 117, 96, 190, 234, 193, 86, 188, 167, 18, 244, 190, 8, 76, 137, 190, 206, 70, 186, 188, 2, 150, 139, 190, 205, 67, 149, 62, 9, 52, 40, 190, 35, 88, 116, 189, 181, 180, 65, 63, 99, 223, 29, 189, 186, 12, 135, 62, 91, 8, 84, 63, 73, 13, 24, 190, 137, 191, 76, 191, 16, 226, 60, 62, 191, 59, 24, 190, 234, 198, 183, 189, 40, 94, 240, 61, 53, 192, 153, 60, 209, 243, 195, 62, 179, 73, 45, 62, 118, 184, 92, 191, 100, 107, 96, 188, 205, 158, 100, 61, 221, 67, 200, 190, 251, 104, 156, 61, 30, 52, 78, 62, 171, 214, 125, 190, 84, 22, 7, 190, 4, 91, 97, 191, 160, 141, 147, 189, 179, 155, 202, 187, 17, 13, 33, 190, 191, 126, 89, 190, 191, 147, 101, 62, 148, 97, 150, 59, 227, 66, 35, 190, 163, 197, 86, 62, 65, 154, 249, 61, 176, 24, 236, 189, 161, 79, 109, 61, 188, 60, 206, 189, 143, 175, 85, 61, 85, 116, 102, 188, 27, 94, 18, 190, 54, 21, 225, 189, 100, 174, 200, 61, 51, 183, 55, 61, 65, 111, 79, 61, 213, 253, 9, 62, 29, 116, 241, 189, 99, 247, 76, 61, 119, 29, 156, 189, 39, 70, 200, 188, 136, 22, 12, 61, 163, 9, 237, 187, 45, 126, 209, 189, 212, 84, 178, 189, 206, 135, 235, 188, 3, 71, 35, 190, 103, 114, 38, 190, 87, 209, 225, 60, 68, 108, 242, 189, 37, 98, 21, 60, 104, 37, 4, 62, 92, 164, 234, 61, 248, 211, 77, 190, 150, 178, 199, 60, 159, 228, 195, 189, 174, 57, 20, 190, 78, 164, 103, 191, 49, 36, 115, 62, 28, 181, 134, 189, 69, 79, 190, 189, 23, 59, 147, 191, 88, 28, 102, 62, 183, 14, 146, 62, 167, 212, 232, 62, 147, 220, 62, 61, 49, 220, 173, 62, 63, 11, 131, 187, 109, 250, 7, 189, 225, 65, 249, 190, 118, 46, 155, 62, 133, 229, 73, 61, 193, 135, 99, 189, 131, 101, 6, 190, 127, 136, 119, 190, 43, 101, 246, 188, 128, 120, 139, 60, 20, 79, 49, 190, 23, 77, 6, 188, 102, 30, 125, 190, 33, 212, 165, 188, 208, 68, 53, 62, 52, 201, 184, 185, 85, 182, 235, 61, 216, 141, 174, 189, 150, 92, 18, 62, 143, 137, 62, 190, 29, 184, 137, 190, 37, 87, 164, 190, 57, 34, 100, 61, 95, 204, 19, 190, 89, 197, 233, 61, 68, 217, 178, 189, 41, 203, 61, 190, 35, 235, 254, 61, 234, 213, 43, 60, 180, 129, 97, 189, 11, 230, 213, 189, 235, 238, 39, 62, 72, 179, 173, 61, 13, 111, 168, 189, 251, 40, 203, 189, 62, 39, 222, 189, 221, 10, 22, 62, 108, 64, 47, 190, 141, 240, 148, 61, 223, 137, 154, 60, 152, 36, 23, 62, 127, 220, 48, 190, 21, 135, 34, 61, 241, 64, 14, 190, 198, 154, 41, 190, 120, 7, 9, 61, 109, 179, 60, 189, 126, 198, 136, 189, 88, 90, 133, 61, 193, 10, 126, 60, 107, 190, 35, 190, 204, 184, 243, 189, 231, 206, 174, 61, 5, 232, 33, 60, 224, 89, 43, 191, 242, 56, 32, 62, 173, 97, 8, 62, 74, 212, 15, 190, 13, 215, 147, 191, 70, 53, 19, 62, 55, 55, 227, 188, 10, 196, 105, 62, 233, 16, 128, 189, 116, 222, 188, 62, 42, 176, 73, 189, 161, 88, 159, 190, 87, 204, 28, 191, 168, 113, 82, 61, 206, 156, 52, 62, 11, 71, 58, 188, 201, 72, 10, 190, 5, 205, 162, 190, 201, 107, 56, 190, 108, 191, 24, 62, 10, 163, 133, 190, 7, 201, 160, 62, 184, 223, 206, 61, 191, 82, 48, 189, 199, 42, 21, 191, 16, 154, 42, 62, 38, 213, 151, 190, 92, 83, 23, 62, 202, 167, 139, 62, 121, 31, 187, 190, 162, 78, 144, 190, 204, 82, 98, 190, 68, 150, 35, 63, 222, 15, 49, 190, 248, 69, 135, 189, 41, 122, 235, 190, 187, 163, 73, 62, 173, 99, 89, 190, 237, 243, 134, 62, 181, 189, 180, 190, 1, 27, 80, 61, 227, 173, 52, 62, 125, 67, 56, 62, 125, 31, 14, 190, 161, 171, 154, 62, 224, 161, 44, 190, 34, 52, 132, 190, 165, 94, 83, 61, 29, 172, 159, 62, 187, 129, 128, 62, 122, 59, 176, 62, 110, 66, 155, 189, 0, 166, 182, 189, 117, 13, 105, 62, 78, 56, 202, 61, 243, 50, 18, 62, 40, 55, 213, 61, 169, 42, 0, 190, 145, 1, 95, 62, 114, 183, 53, 190, 66, 108, 54, 62, 192, 37, 26, 62, 75, 196, 46, 62, 156, 22, 239, 189, 109, 122, 23, 63, 120, 90, 217, 189, 212, 170, 80, 190, 181, 136, 108, 190, 13, 232, 112, 62, 112, 139, 227, 190, 11, 12, 90, 62, 153, 186, 194, 190, 22, 252, 72, 189, 108, 76, 178, 62, 100, 161, 61, 62, 156, 72, 201, 191, 218, 167, 226, 61, 114, 176, 242, 190, 223, 175, 52, 190, 144, 178, 86, 62, 234, 10, 83, 62, 128, 33, 224, 59, 215, 75, 198, 62, 209, 92, 10, 190, 248, 170, 161, 191, 235, 131, 142, 62, 79, 111, 82, 62, 43, 97, 248, 60, 82, 84, 105, 190, 175, 222, 210, 61, 174, 209, 133, 190, 1, 249, 31, 62, 42, 4, 46, 61, 44, 219, 99, 187, 173, 103, 172, 190, 13, 37, 233, 60, 71, 247, 135, 61, 97, 2, 136, 187, 1, 207, 13, 190, 145, 163, 35, 60, 172, 206, 161, 189, 193, 159, 47, 190, 6, 164, 117, 61, 206, 167, 0, 61, 233, 29, 185, 189, 30, 82, 178, 60, 238, 206, 185, 61, 78, 167, 152, 61, 158, 80, 221, 61, 153, 84, 65, 189, 90, 2, 46, 190, 154, 242, 81, 190, 68, 107, 255, 189, 167, 218, 24, 190, 11, 113, 211, 61, 12, 42, 29, 190, 222, 157, 184, 61, 37, 0, 132, 61, 244, 240, 14, 62, 102, 79, 9, 190, 160, 45, 111, 189, 44, 219, 70, 61, 42, 113, 45, 190, 153, 132, 187, 61, 203, 234, 200, 189, 41, 94, 184, 61, 147, 44, 216, 61, 102, 232, 183, 189, 43, 192, 133, 60, 55, 62, 15, 190, 38, 39, 80, 61, 2, 253, 0, 62, 168, 228, 58, 189, 66, 244, 189, 189, 137, 246, 26, 190, 228, 85, 251, 189, 207, 196, 167, 189, 15, 3, 252, 60, 230, 76, 177, 59, 90, 22, 22, 62, 189, 102, 37, 190, 116, 219, 252, 61, 186, 174, 51, 190, 187, 17, 61, 190, 76, 237, 149, 189, 180, 135, 42, 61, 162, 93, 227, 189, 32, 91, 236, 189, 28, 17, 24, 62, 97, 93, 236, 61, 152, 246, 136, 61, 191, 199, 204, 61, 38, 121, 242, 60, 205, 10, 140, 60, 90, 88, 252, 189, 40, 124, 243, 189, 94, 215, 160, 61, 137, 209, 184, 189, 45, 164, 218, 189, 105, 46, 196, 187, 188, 9, 190, 189, 236, 248, 202, 190, 160, 191, 2, 63, 180, 32, 175, 62, 49, 47, 132, 62, 92, 101, 55, 63, 45, 53, 182, 190, 253, 24, 23, 191, 44, 31, 6, 189, 179, 11, 141, 62, 40, 85, 216, 189, 68, 20, 102, 62, 246, 185, 41, 190, 166, 69, 61, 61, 40, 40, 137, 62, 10, 103, 109, 191, 84, 225, 5, 190, 117, 158, 62, 189, 224, 182, 54, 190, 202, 168, 49, 59, 1, 16, 133, 61, 61, 102, 238, 188, 19, 231, 159, 61, 88, 206, 85, 191, 68, 212, 88, 191, 88, 39, 191, 190, 65, 146, 192, 60, 50, 77, 145, 191, 88, 17, 142, 62, 142, 135, 162, 62, 113, 204, 143, 190, 102, 228, 15, 62, 95, 99, 52, 191, 34, 223, 189, 190, 227, 69, 41, 190, 79, 6, 82, 190, 13, 104, 215, 187, 100, 103, 20, 61, 170, 108, 247, 61, 95, 62, 132, 189, 160, 159, 32, 62, 60, 15, 232, 189, 217, 215, 164, 190, 157, 87, 62, 190, 81, 215, 67, 62, 239, 167, 100, 189, 31, 160, 130, 190, 29, 166, 56, 62, 164, 40, 92, 62, 69, 64, 199, 60, 241, 116, 138, 62, 41, 89, 64, 188, 123, 69, 167, 62, 138, 167, 187, 61, 201, 203, 250, 60, 24, 7, 32, 62, 213, 56, 203, 61, 12, 230, 247, 189, 27, 195, 91, 189, 38, 104, 192, 190, 130, 176, 233, 186, 215, 72, 76, 62, 4, 238, 131, 189, 43, 23, 77, 190, 169, 203, 23, 191, 134, 132, 166, 190, 88, 246, 162, 62, 96, 15, 198, 61, 192, 42, 84, 189, 76, 23, 254, 61, 69, 241, 107, 189, 59, 81, 20, 63, 75, 137, 171, 62, 190, 137, 132, 62, 190, 79, 137, 188, 228, 100, 27, 62, 159, 171, 35, 61, 250, 95, 224, 62, 148, 24, 194, 62, 30, 214, 135, 189, 110, 176, 30, 190, 142, 210, 20, 190, 188, 36, 86, 190, 167, 25, 124, 62, 252, 162, 237, 62, 36, 73, 20, 190, 118, 100, 237, 189, 70, 67, 86, 190, 247, 98, 32, 191, 116, 9, 63, 190, 72, 221, 189, 189, 160, 26, 227, 190, 48, 53, 201, 61, 106, 109, 207, 190, 245, 193, 51, 190, 154, 31, 34, 188, 243, 48, 35, 190, 189, 2, 82, 62, 151, 205, 163, 190, 125, 233, 199, 190, 175, 179, 81, 62, 51, 251, 12, 191, 79, 94, 158, 61, 155, 181, 100, 191, 201, 167, 30, 61, 53, 113, 16, 189, 127, 115, 255, 61, 66, 3, 206, 191, 22, 48, 221, 62, 16, 17, 44, 191, 252, 110, 13, 190, 222, 86, 11, 62, 36, 234, 31, 62, 3, 140, 22, 61, 53, 226, 167, 62, 45, 168, 189, 190, 143, 122, 216, 191, 167, 94, 236, 62, 122, 226, 167, 62, 201, 10, 157, 62, 3, 142, 185, 62, 55, 26, 150, 62, 39, 138, 46, 189, 181, 170, 233, 61, 188, 222, 254, 188, 232, 186, 151, 62, 102, 36, 136, 58, 216, 196, 55, 189, 109, 176, 167, 191, 187, 194, 191, 61, 88, 243, 106, 62, 94, 172, 172, 61, 93, 221, 206, 61, 35, 47, 219, 60, 189, 117, 127, 62, 181, 65, 4, 190, 86, 34, 190, 62, 109, 30, 170, 61, 203, 15, 149, 60, 44, 188, 6, 190, 26, 142, 140, 190, 21, 67, 49, 190, 74, 0, 115, 61, 93, 60, 88, 190, 212, 186, 60, 62, 63, 148, 168, 189, 175, 177, 38, 190, 0, 20, 13, 62, 198, 211, 102, 189, 11, 69, 130, 61, 249, 183, 129, 189, 250, 174, 53, 190, 26, 213, 86, 189, 107, 149, 164, 188, 14, 44, 195, 188, 17, 203, 215, 62, 0, 75, 161, 62, 170, 207, 36, 62, 184, 184, 49, 190, 86, 0, 110, 61, 143, 196, 54, 191, 190, 34, 21, 60, 117, 196, 16, 61, 197, 16, 125, 188, 176, 195, 50, 62, 34, 225, 241, 61, 252, 116, 74, 190, 189, 78, 138, 190, 117, 27, 27, 62, 166, 93, 194, 191, 146, 111, 50, 187, 62, 217, 103, 187, 117, 237, 136, 62, 66, 98, 247, 61, 182, 8, 131, 189, 216, 112, 42, 62, 241, 136, 35, 62, 253, 204, 139, 62, 222, 237, 44, 62, 3, 175, 17, 190, 237, 3, 136, 62, 110, 154, 38, 62, 74, 37, 138, 190, 234, 145, 53, 62, 251, 166, 198, 62, 22, 170, 140, 190, 10, 194, 121, 188, 196, 57, 90, 190, 213, 109, 43, 190, 208, 61, 162, 61, 120, 185, 111, 62, 132, 17, 30, 190, 105, 46, 191, 61, 145, 229, 114, 61, 184, 232, 57, 190, 85, 65, 210, 189, 21, 11, 32, 189, 198, 113, 128, 189, 191, 83, 19, 189, 86, 17, 166, 60, 237, 206, 191, 60, 80, 183, 163, 189, 168, 157, 194, 61, 84, 129, 98, 189, 160, 115, 101, 189, 126, 191, 17, 61, 244, 134, 161, 189, 41, 155, 50, 61, 222, 103, 251, 61, 72, 159, 168, 61, 172, 231, 88, 188, 173, 25, 254, 188, 184, 200, 51, 190, 244, 31, 226, 188, 112, 212, 123, 189, 61, 90, 206, 188, 237, 37, 210, 61, 217, 180, 223, 61, 117, 31, 241, 61, 33, 166, 247, 189, 35, 91, 230, 60, 194, 6, 41, 62, 39, 23, 169, 58, 160, 11, 60, 190, 15, 105, 116, 191, 127, 77, 225, 189, 121, 99, 137, 62, 82, 75, 87, 190, 40, 146, 165, 191, 165, 234, 108, 62, 126, 50, 119, 61, 104, 80, 242, 62, 34, 156, 180, 190, 3, 250, 19, 63, 135, 244, 31, 190, 246, 92, 179, 190, 131, 70, 12, 191, 28, 126, 179, 60, 93, 72, 116, 62, 107, 14, 253, 189, 148, 15, 8, 190, 255, 109, 45, 191, 109, 127, 76, 61, 1, 20, 142, 62, 120, 3, 143, 189, 251, 231, 240, 61, 29, 161, 15, 59, 170, 201, 25, 60, 209, 9, 111, 191, 73, 135, 113, 62, 132, 135, 5, 191, 27, 88, 108, 62, 11, 181, 93, 62, 70, 72, 6, 191, 199, 43, 191, 190, 147, 18, 100, 189, 80, 4, 34, 60, 23, 216, 17, 190, 172, 44, 21, 62, 98, 169, 26, 190, 235, 81, 168, 189, 159, 7, 240, 188, 38, 148, 177, 188, 48, 225, 3, 190, 183, 240, 33, 190, 40, 252, 206, 58, 36, 96, 249, 189, 178, 101, 52, 62, 175, 110, 8, 190, 171, 224, 105, 59, 166, 106, 175, 61, 177, 219, 0, 190, 147, 81, 27, 190, 60, 67, 242, 187, 69, 8, 74, 188, 184, 114, 41, 189, 92, 112, 131, 188, 91, 169, 65, 61, 142, 81, 228, 189, 5, 32, 217, 61, 133, 247, 47, 189, 159, 144, 171, 189, 41, 184, 215, 189, 81, 82, 140, 189, 117, 163, 146, 189, 244, 105, 19, 190, 17, 160, 129, 189, 205, 221, 135, 61, 36, 225, 64, 191, 135, 142, 138, 190, 124, 7, 123, 62, 20, 194, 116, 62, 255, 136, 11, 190, 241, 218, 175, 62, 98, 115, 28, 190, 83, 188, 36, 63, 131, 27, 245, 60, 111, 1, 168, 62, 217, 153, 136, 190, 141, 29, 59, 190, 96, 167, 70, 191, 195, 116, 235, 62, 127, 11, 18, 60, 236, 114, 8, 190, 70, 3, 121, 190, 190, 121, 6, 191, 98, 150, 173, 190, 52, 36, 83, 62, 65, 188, 153, 189, 175, 154, 92, 190, 165, 216, 111, 61, 149, 238, 48, 189, 102, 155, 14, 191, 226, 89, 174, 189, 6, 60, 45, 189, 118, 152, 138, 190, 118, 30, 114, 61, 250, 72, 41, 189, 237, 142, 93, 190, 162, 203, 4, 62, 175, 56, 201, 189, 71, 113, 186, 61, 168, 124, 108, 191, 138, 147, 110, 188, 8, 248, 129, 61, 41, 229, 193, 190, 49, 255, 226, 61, 6, 163, 244, 60, 78, 220, 154, 187, 51, 97, 38, 62, 28, 211, 50, 60, 88, 2, 182, 60, 196, 0, 178, 189, 14, 42, 69, 191, 184, 8, 78, 61, 234, 159, 218, 61, 128, 61, 40, 62, 60, 166, 248, 187, 78, 112, 173, 190, 188, 53, 140, 62, 25, 118, 196, 190, 24, 109, 132, 191, 226, 117, 212, 62, 226, 205, 143, 190, 215, 56, 122, 189, 249, 51, 26, 61, 200, 29, 240, 188, 33, 90, 116, 62, 180, 101, 245, 188, 203, 177, 214, 61, 44, 18, 40, 190, 85, 128, 24, 62, 43, 192, 29, 63, 19, 245, 41, 57, 218, 167, 73, 61, 120, 18, 74, 190, 210, 103, 46, 61, 10, 63, 106, 190, 4, 205, 174, 62, 210, 21, 197, 190, 158, 248, 203, 60, 79, 49, 189, 62, 108, 181, 167, 62, 41, 52, 60, 191, 169, 227, 171, 187, 97, 144, 234, 189, 116, 28, 238, 189, 220, 129, 134, 62, 81, 213, 136, 62, 11, 147, 1, 62, 2, 233, 97, 62, 204, 156, 31, 190, 161, 21, 136, 191, 191, 175, 89, 62, 63, 196, 128, 61, 171, 3, 134, 62, 78, 30, 214, 190, 66, 207, 43, 60, 188, 94, 251, 189, 197, 81, 165, 62, 237, 241, 244, 59, 90, 168, 28, 62, 140, 129, 6, 190, 36, 90, 195, 61, 34, 203, 56, 191, 180, 89, 149, 188, 14, 151, 183, 61, 96, 56, 109, 190, 164, 63, 13, 191, 235, 93, 57, 62, 64, 40, 86, 62, 225, 237, 161, 61, 237, 0, 3, 190, 168, 190, 174, 62, 41, 236, 7, 190, 169, 203, 158, 189, 20, 174, 210, 190, 213, 74, 23, 62, 48, 49, 150, 62, 174, 3, 65, 62, 22, 125, 70, 189, 138, 10, 45, 191, 96, 108, 80, 189, 9, 120, 65, 61, 246, 106, 88, 190, 14, 253, 11, 60, 78, 105, 160, 62, 77, 79, 51, 62, 235, 247, 208, 191, 32, 179, 95, 62, 159, 231, 209, 190, 114, 176, 222, 61, 78, 14, 92, 61, 46, 123, 91, 190, 140, 90, 130, 190, 105, 63, 47, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 14, 126, 189, 195, 53, 131, 190, 168, 80, 130, 61, 32, 235, 77, 190, 176, 45, 61, 190, 204, 234, 159, 62, 242, 11, 149, 190, 17, 30, 9, 190, 42, 209, 61, 62, 49, 125, 32, 61, 202, 225, 187, 60, 171, 233, 94, 189, 126, 116, 141, 190, 154, 86, 149, 188, 231, 171, 253, 188, 122, 22, 107, 61, 211, 208, 79, 62, 166, 11, 220, 60, 221, 233, 109, 189, 36, 157, 21, 188, 145, 222, 230, 189, 213, 78, 130, 62, 125, 93, 62, 61, 177, 99, 144, 62, 129, 12, 54, 190, 69, 141, 30, 190, 175, 126, 171, 189, 79, 206, 158, 189, 84, 57, 164, 189, 188, 38, 42, 62, 199, 127, 86, 62, 107, 98, 140, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 156, 45, 191, 197, 22, 165, 62, 202, 202, 172, 62, 89, 116, 44, 63, 152, 132, 205, 62, 184, 9, 55, 62, 226, 44, 160, 190, 11, 166, 38, 190, 59, 76, 1, 191, 242, 107, 148, 191, 88, 169, 200, 190, 32, 110, 14, 188, 54, 54, 49, 191, 110, 55, 88, 61, 32, 176, 32, 191, 38, 250, 142, 62, 217, 49, 5, 63, 102, 128, 179, 189, 225, 219, 30, 61, 29, 117, 132, 191, 229, 175, 39, 190, 219, 58, 25, 191, 239, 162, 144, 63, 151, 236, 223, 61, 7, 39, 244, 190, 241, 235, 33, 190, 212, 93, 91, 191, 183, 130, 250, 60, 70, 207, 56, 191, 118, 144, 71, 62, 57, 62, 190, 62, 147, 87, 176, 190, 252, 155, 243, 61, 31, 34, 156, 189, 223, 207, 66, 62, 165, 28, 235, 62, 125, 247, 239, 61, 53, 163, 5, 190, 121, 115, 34, 62, 179, 232, 106, 61, 147, 187, 43, 61, 15, 217, 94, 188, 210, 47, 194, 61, 176, 204, 188, 189, 111, 220, 81, 61, 221, 150, 106, 61, 55, 220, 176, 190, 117, 47, 66, 189, 12, 100, 234, 188, 141, 146, 12, 62, 235, 3, 202, 61, 172, 59, 180, 62, 145, 217, 81, 61, 191, 42, 191, 190, 208, 36, 185, 62, 240, 52, 140, 190, 170, 208, 17, 61, 20, 139, 0, 190, 128, 201, 77, 190, 96, 240, 15, 61, 195, 4, 230, 62, 186, 65, 162, 189, 127, 226, 27, 189, 239, 212, 101, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 14, 155, 62, 71, 62, 189, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {204, 5, 226, 191, 110, 171, 88, 62, 43, 140, 241, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {143, 227, 41, 63, 87, 219, 66, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0033/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}