// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 98, 23, 63, 231, 154, 230, 62, 164, 39, 27, 62, 128, 82, 141, 190, 128, 63, 168, 62, 24, 133, 1, 191, 53, 34, 218, 189, 163, 42, 80, 191, 186, 235, 162, 62, 192, 131, 9, 191, 80, 88, 40, 190, 43, 208, 59, 191, 201, 153, 57, 191, 27, 174, 37, 191, 197, 94, 59, 190, 131, 214, 252, 190, 173, 179, 125, 191, 118, 30, 41, 62, 181, 120, 98, 63, 125, 141, 36, 191, 70, 63, 234, 189, 12, 183, 124, 63, 188, 239, 111, 63, 78, 228, 14, 63, 118, 16, 136, 190, 230, 153, 97, 191, 50, 114, 179, 189, 234, 132, 146, 63, 108, 52, 170, 62, 184, 35, 201, 58, 247, 66, 133, 62, 136, 71, 199, 188, 0, 229, 98, 60, 234, 241, 17, 191, 133, 183, 149, 191, 200, 5, 246, 190, 62, 152, 247, 62, 192, 233, 157, 191, 185, 241, 133, 190, 68, 56, 249, 60, 24, 223, 8, 190, 63, 81, 246, 62, 93, 181, 35, 190, 120, 99, 154, 62, 70, 148, 19, 191, 49, 147, 40, 190, 234, 142, 150, 63, 44, 77, 30, 63, 92, 236, 40, 63, 122, 107, 117, 191, 105, 25, 143, 190, 14, 100, 28, 63, 200, 1, 166, 191, 60, 238, 177, 190, 10, 51, 212, 190, 40, 22, 120, 60, 13, 139, 74, 63, 203, 229, 237, 62, 25, 186, 195, 62, 201, 230, 228, 190, 216, 153, 59, 191, 185, 236, 66, 191, 87, 144, 121, 190, 201, 170, 98, 62, 240, 185, 106, 191, 15, 100, 15, 63, 205, 93, 147, 190, 54, 86, 102, 63, 80, 228, 26, 190, 144, 72, 184, 189, 78, 248, 88, 63, 77, 62, 61, 63, 233, 212, 89, 63, 145, 195, 43, 191, 154, 63, 179, 190, 193, 26, 31, 190, 176, 158, 71, 63, 78, 218, 8, 191, 128, 50, 60, 62, 67, 87, 36, 191, 180, 200, 139, 190, 84, 61, 103, 63, 145, 165, 84, 62, 49, 81, 56, 190, 74, 104, 70, 61, 178, 4, 250, 190, 188, 176, 60, 62, 122, 234, 29, 191, 225, 201, 15, 191, 39, 140, 87, 62, 32, 190, 11, 62, 186, 82, 103, 191, 189, 82, 237, 190, 21, 107, 243, 190, 79, 72, 216, 61, 163, 254, 201, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 214, 46, 191, 38, 112, 14, 191, 247, 99, 193, 61, 141, 67, 172, 190, 154, 90, 30, 63, 195, 174, 133, 190, 163, 132, 212, 62, 85, 70, 246, 190, 14, 168, 59, 63, 128, 151, 2, 63, 123, 185, 187, 190, 78, 203, 129, 190, 55, 25, 88, 190, 137, 18, 196, 190, 50, 181, 27, 61, 71, 69, 143, 60, 208, 68, 131, 189, 14, 204, 123, 190, 217, 254, 145, 190, 215, 37, 221, 62, 229, 225, 9, 191, 18, 245, 59, 190, 56, 84, 8, 63, 127, 92, 159, 61, 50, 224, 92, 191, 226, 187, 1, 62, 221, 139, 93, 190, 123, 170, 26, 191, 3, 80, 162, 62, 192, 173, 53, 61, 154, 51, 199, 190, 49, 181, 34, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 15, 21, 191, 125, 34, 187, 61, 0, 56, 19, 190, 73, 255, 132, 61, 19, 180, 76, 191, 95, 254, 58, 190, 97, 200, 0, 62, 21, 114, 244, 62, 33, 12, 134, 190, 141, 13, 11, 63, 67, 34, 60, 189, 243, 130, 12, 190, 170, 25, 36, 191, 141, 249, 107, 62, 134, 254, 247, 189, 32, 197, 197, 60, 40, 91, 245, 189, 145, 198, 25, 191, 245, 4, 135, 189, 212, 247, 35, 61, 138, 66, 184, 189, 248, 103, 105, 62, 92, 90, 93, 62, 234, 60, 64, 58, 202, 135, 38, 191, 28, 244, 141, 62, 106, 255, 152, 190, 248, 75, 64, 189, 135, 29, 97, 189, 63, 92, 225, 189, 63, 0, 238, 190, 184, 82, 15, 190, 164, 254, 251, 189, 219, 174, 16, 62, 161, 147, 149, 62, 132, 227, 220, 61, 177, 81, 106, 61, 130, 140, 228, 62, 189, 140, 118, 190, 86, 178, 220, 61, 95, 213, 161, 58, 94, 254, 139, 190, 99, 12, 32, 190, 107, 10, 131, 61, 70, 30, 168, 190, 27, 218, 58, 190, 39, 54, 92, 61, 239, 179, 147, 191, 17, 243, 119, 189, 36, 13, 202, 189, 132, 182, 111, 191, 166, 159, 99, 189, 173, 178, 15, 62, 40, 110, 29, 190, 253, 219, 233, 189, 99, 215, 179, 191, 40, 46, 84, 190, 243, 221, 171, 61, 121, 176, 77, 189, 113, 27, 63, 190, 218, 58, 121, 189, 110, 239, 194, 62, 61, 225, 165, 189, 159, 210, 22, 62, 148, 220, 226, 62, 8, 245, 93, 189, 182, 139, 181, 62, 84, 217, 140, 61, 82, 43, 137, 190, 42, 45, 215, 61, 198, 215, 168, 62, 66, 230, 198, 190, 24, 162, 148, 187, 234, 86, 214, 62, 232, 60, 239, 61, 88, 246, 60, 190, 180, 113, 74, 62, 182, 185, 82, 62, 103, 109, 52, 190, 254, 58, 144, 188, 57, 22, 123, 62, 78, 234, 136, 62, 250, 225, 30, 62, 139, 175, 133, 61, 199, 216, 41, 191, 87, 0, 180, 60, 248, 0, 103, 190, 144, 37, 105, 190, 183, 250, 74, 62, 243, 35, 172, 189, 183, 215, 5, 62, 180, 138, 192, 62, 25, 239, 161, 190, 179, 210, 24, 61, 23, 177, 204, 60, 246, 123, 47, 189, 63, 244, 63, 63, 227, 4, 238, 189, 77, 191, 249, 60, 127, 235, 186, 189, 174, 8, 134, 191, 92, 188, 152, 189, 150, 8, 103, 189, 163, 57, 123, 62, 199, 241, 150, 190, 248, 16, 60, 62, 161, 67, 158, 62, 160, 112, 71, 189, 210, 17, 37, 190, 137, 112, 82, 62, 236, 23, 32, 62, 56, 64, 92, 189, 180, 128, 144, 190, 150, 105, 11, 190, 98, 22, 247, 61, 64, 32, 138, 62, 196, 198, 169, 188, 162, 55, 32, 62, 116, 27, 212, 190, 125, 193, 54, 190, 133, 221, 218, 188, 120, 211, 220, 61, 158, 96, 9, 62, 84, 31, 192, 188, 51, 241, 212, 189, 41, 89, 40, 191, 118, 252, 92, 62, 86, 43, 75, 188, 207, 35, 6, 63, 100, 94, 57, 189, 36, 16, 79, 62, 40, 2, 130, 62, 246, 2, 174, 190, 4, 109, 214, 187, 240, 183, 82, 190, 109, 246, 115, 62, 210, 6, 225, 190, 130, 250, 251, 61, 178, 211, 128, 62, 109, 105, 139, 189, 117, 103, 213, 190, 201, 175, 141, 60, 245, 118, 86, 62, 102, 21, 143, 189, 148, 86, 224, 189, 51, 22, 130, 190, 59, 230, 202, 189, 32, 222, 98, 62, 138, 163, 192, 190, 171, 107, 102, 189, 99, 15, 61, 62, 89, 140, 77, 190, 207, 5, 111, 61, 215, 12, 233, 61, 77, 98, 152, 189, 222, 60, 189, 61, 144, 128, 211, 189, 128, 45, 0, 191, 184, 229, 55, 190, 17, 120, 234, 61, 75, 250, 43, 63, 127, 150, 198, 60, 205, 149, 240, 188, 35, 88, 4, 189, 123, 175, 43, 62, 115, 220, 148, 190, 96, 62, 87, 62, 4, 37, 99, 190, 40, 55, 97, 62, 219, 24, 134, 62, 171, 65, 43, 62, 21, 75, 249, 189, 1, 94, 239, 60, 154, 231, 0, 190, 52, 231, 172, 61, 12, 245, 44, 62, 100, 183, 91, 62, 253, 91, 223, 61, 99, 185, 104, 62, 231, 77, 66, 62, 65, 78, 219, 190, 101, 191, 182, 62, 97, 35, 131, 62, 177, 199, 166, 61, 121, 223, 155, 189, 87, 131, 85, 189, 84, 108, 160, 187, 37, 162, 211, 62, 67, 144, 143, 61, 204, 141, 135, 62, 53, 208, 13, 189, 168, 82, 115, 62, 222, 150, 51, 62, 30, 51, 234, 188, 100, 21, 61, 61, 127, 74, 35, 188, 193, 70, 74, 189, 46, 149, 99, 189, 196, 105, 239, 189, 168, 218, 204, 189, 162, 150, 38, 190, 157, 9, 19, 191, 192, 242, 107, 61, 52, 0, 153, 189, 136, 151, 103, 62, 27, 20, 234, 61, 144, 253, 131, 59, 190, 156, 116, 188, 39, 211, 246, 61, 239, 58, 212, 61, 240, 207, 25, 190, 205, 159, 10, 190, 167, 89, 156, 62, 27, 30, 131, 61, 150, 46, 166, 190, 158, 11, 222, 59, 149, 32, 44, 62, 86, 32, 65, 189, 148, 227, 87, 61, 214, 238, 196, 189, 33, 51, 237, 190, 24, 40, 115, 190, 189, 153, 255, 61, 218, 246, 95, 190, 144, 212, 227, 190, 163, 211, 166, 189, 1, 120, 225, 189, 129, 171, 128, 61, 141, 129, 242, 189, 8, 160, 61, 190, 149, 12, 61, 189, 244, 165, 230, 62, 37, 244, 96, 60, 110, 85, 102, 61, 114, 190, 134, 61, 71, 251, 230, 189, 177, 207, 161, 62, 4, 229, 217, 61, 146, 12, 223, 188, 39, 78, 67, 190, 123, 125, 91, 189, 83, 227, 136, 62, 98, 81, 24, 61, 14, 204, 172, 189, 232, 224, 137, 190, 102, 219, 100, 61, 88, 247, 121, 190, 127, 142, 74, 61, 54, 177, 181, 62, 125, 65, 187, 189, 171, 207, 142, 62, 240, 54, 132, 62, 229, 190, 115, 189, 253, 96, 213, 188, 59, 226, 78, 62, 200, 116, 132, 189, 34, 135, 208, 190, 229, 248, 206, 187, 29, 250, 37, 62, 189, 243, 226, 59, 86, 52, 166, 189, 213, 14, 212, 189, 180, 227, 130, 190, 232, 142, 167, 190, 213, 18, 75, 190, 180, 245, 52, 190, 177, 23, 14, 190, 185, 7, 230, 189, 20, 50, 40, 190, 197, 48, 95, 62, 212, 89, 17, 62, 216, 151, 227, 60, 66, 138, 205, 189, 117, 4, 92, 190, 4, 186, 156, 190, 43, 170, 32, 62, 234, 38, 157, 61, 0, 73, 200, 190, 170, 28, 117, 62, 116, 197, 58, 189, 15, 245, 137, 190, 4, 7, 150, 189, 64, 203, 116, 190, 17, 187, 121, 189, 70, 230, 55, 190, 17, 237, 50, 191, 241, 72, 9, 189, 229, 183, 31, 189, 175, 196, 155, 188, 158, 238, 135, 190, 107, 220, 9, 63, 239, 58, 28, 62, 230, 136, 185, 60, 115, 88, 196, 62, 157, 93, 191, 61, 58, 59, 72, 190, 59, 138, 36, 62, 34, 184, 150, 61, 252, 231, 113, 190, 237, 89, 26, 62, 62, 56, 136, 190, 41, 72, 11, 61, 157, 47, 31, 62, 23, 52, 31, 191, 110, 58, 125, 190, 189, 217, 181, 190, 56, 254, 135, 191, 146, 66, 100, 61, 106, 108, 111, 190, 179, 213, 66, 191, 142, 103, 177, 62, 175, 188, 219, 190, 68, 129, 56, 191, 161, 102, 113, 190, 114, 54, 250, 188, 221, 178, 184, 190, 71, 184, 223, 189, 34, 10, 190, 61, 108, 94, 153, 190, 228, 127, 146, 62, 9, 52, 40, 190, 229, 12, 131, 189, 67, 101, 43, 63, 71, 37, 225, 188, 188, 238, 128, 62, 5, 50, 57, 63, 0, 155, 15, 190, 81, 201, 222, 190, 14, 229, 53, 62, 43, 17, 229, 189, 234, 198, 183, 189, 185, 201, 12, 62, 169, 92, 221, 60, 160, 112, 238, 62, 101, 150, 52, 62, 106, 241, 53, 191, 228, 21, 70, 59, 15, 34, 168, 61, 89, 213, 194, 190, 121, 228, 180, 61, 92, 93, 65, 62, 238, 147, 162, 190, 82, 124, 21, 190, 130, 120, 67, 191, 60, 218, 241, 60, 162, 185, 75, 188, 158, 69, 8, 190, 61, 161, 95, 190, 177, 104, 123, 62, 249, 37, 73, 189, 145, 246, 6, 190, 223, 213, 89, 62, 65, 154, 249, 61, 176, 24, 236, 189, 76, 32, 116, 61, 74, 133, 205, 189, 254, 34, 102, 61, 132, 208, 72, 188, 27, 94, 18, 190, 54, 21, 225, 189, 64, 24, 208, 61, 51, 183, 55, 61, 65, 111, 79, 61, 52, 42, 12, 62, 29, 116, 241, 189, 99, 247, 76, 61, 119, 29, 156, 189, 39, 70, 200, 188, 136, 22, 12, 61, 163, 9, 237, 187, 85, 11, 209, 189, 212, 84, 178, 189, 230, 57, 225, 188, 151, 7, 35, 190, 99, 167, 37, 190, 87, 209, 225, 60, 68, 108, 242, 189, 37, 98, 21, 60, 104, 37, 4, 62, 92, 164, 234, 61, 13, 106, 76, 190, 239, 239, 217, 60, 159, 228, 195, 189, 191, 175, 17, 190, 254, 91, 99, 191, 37, 149, 132, 62, 73, 224, 234, 189, 192, 154, 49, 189, 216, 127, 119, 191, 193, 124, 65, 62, 189, 191, 137, 62, 71, 30, 222, 62, 169, 168, 252, 58, 235, 6, 166, 62, 63, 11, 131, 187, 109, 250, 7, 189, 58, 83, 248, 190, 248, 103, 152, 62, 255, 156, 167, 61, 204, 124, 12, 189, 15, 246, 7, 190, 177, 68, 131, 190, 107, 167, 6, 189, 212, 221, 208, 60, 20, 79, 49, 190, 185, 218, 138, 189, 131, 55, 30, 190, 164, 213, 122, 188, 102, 5, 98, 60, 101, 31, 154, 60, 64, 60, 30, 61, 96, 197, 101, 189, 250, 148, 232, 61, 249, 18, 52, 190, 210, 120, 124, 190, 172, 195, 158, 190, 57, 34, 100, 61, 95, 204, 19, 190, 89, 197, 233, 61, 68, 217, 178, 189, 41, 203, 61, 190, 35, 235, 254, 61, 234, 213, 43, 60, 180, 129, 97, 189, 11, 230, 213, 189, 235, 238, 39, 62, 72, 179, 173, 61, 13, 111, 168, 189, 251, 40, 203, 189, 62, 39, 222, 189, 221, 10, 22, 62, 108, 64, 47, 190, 141, 240, 148, 61, 223, 137, 154, 60, 152, 36, 23, 62, 127, 220, 48, 190, 21, 135, 34, 61, 241, 64, 14, 190, 198, 154, 41, 190, 120, 7, 9, 61, 109, 179, 60, 189, 126, 198, 136, 189, 88, 90, 133, 61, 193, 10, 126, 60, 107, 190, 35, 190, 204, 184, 243, 189, 231, 206, 174, 61, 5, 232, 33, 60, 221, 55, 27, 191, 193, 3, 135, 61, 200, 145, 171, 61, 192, 4, 106, 190, 141, 135, 115, 191, 49, 160, 134, 61, 98, 225, 157, 188, 45, 246, 82, 62, 46, 139, 144, 189, 203, 55, 187, 62, 42, 176, 73, 189, 214, 20, 96, 190, 207, 95, 3, 191, 119, 209, 206, 60, 46, 203, 241, 61, 95, 235, 244, 59, 168, 68, 191, 189, 170, 123, 114, 190, 249, 98, 77, 190, 169, 107, 253, 61, 10, 163, 133, 190, 187, 119, 130, 62, 1, 2, 209, 61, 62, 180, 41, 189, 178, 147, 231, 190, 87, 197, 194, 61, 129, 203, 246, 189, 106, 186, 252, 61, 66, 98, 138, 62, 198, 2, 199, 190, 29, 24, 155, 190, 155, 139, 141, 190, 218, 225, 34, 63, 213, 69, 36, 189, 35, 154, 69, 189, 155, 213, 186, 190, 24, 40, 105, 62, 60, 162, 77, 190, 28, 44, 132, 62, 112, 79, 179, 190, 203, 185, 161, 61, 37, 226, 51, 62, 125, 67, 56, 62, 185, 73, 112, 189, 176, 222, 160, 62, 128, 15, 68, 190, 83, 3, 65, 190, 6, 241, 103, 61, 141, 180, 161, 62, 152, 25, 141, 62, 126, 75, 173, 62, 36, 40, 104, 189, 255, 48, 0, 61, 219, 107, 123, 62, 39, 36, 1, 62, 236, 68, 24, 62, 145, 127, 189, 61, 158, 213, 58, 189, 79, 29, 135, 62, 171, 90, 61, 190, 110, 177, 42, 62, 198, 112, 19, 62, 69, 161, 96, 62, 127, 129, 128, 189, 233, 235, 19, 63, 250, 155, 216, 187, 228, 171, 56, 190, 2, 226, 44, 190, 62, 188, 122, 62, 37, 204, 214, 190, 204, 55, 84, 62, 41, 78, 194, 190, 181, 171, 120, 188, 240, 73, 175, 62, 100, 161, 61, 62, 106, 106, 129, 191, 8, 201, 223, 61, 249, 110, 0, 191, 241, 179, 57, 190, 24, 63, 81, 62, 138, 69, 72, 62, 137, 19, 254, 59, 16, 58, 192, 62, 232, 123, 21, 190, 15, 161, 133, 191, 52, 222, 151, 62, 54, 249, 55, 62, 1, 55, 227, 60, 207, 16, 149, 190, 230, 230, 221, 61, 238, 96, 6, 190, 219, 123, 234, 61, 218, 110, 71, 61, 101, 243, 191, 187, 244, 159, 102, 190, 48, 20, 44, 61, 71, 247, 135, 61, 97, 2, 136, 187, 1, 207, 13, 190, 145, 163, 35, 60, 172, 206, 161, 189, 193, 159, 47, 190, 6, 164, 117, 61, 206, 167, 0, 61, 233, 29, 185, 189, 30, 82, 178, 60, 238, 206, 185, 61, 78, 167, 152, 61, 158, 80, 221, 61, 153, 84, 65, 189, 90, 2, 46, 190, 154, 242, 81, 190, 68, 107, 255, 189, 167, 218, 24, 190, 11, 113, 211, 61, 12, 42, 29, 190, 222, 157, 184, 61, 37, 0, 132, 61, 244, 240, 14, 62, 102, 79, 9, 190, 160, 45, 111, 189, 44, 219, 70, 61, 42, 113, 45, 190, 153, 132, 187, 61, 203, 234, 200, 189, 41, 94, 184, 61, 147, 44, 216, 61, 102, 232, 183, 189, 43, 192, 133, 60, 55, 62, 15, 190, 38, 39, 80, 61, 2, 253, 0, 62, 168, 228, 58, 189, 66, 244, 189, 189, 137, 246, 26, 190, 228, 85, 251, 189, 207, 196, 167, 189, 15, 3, 252, 60, 230, 76, 177, 59, 90, 22, 22, 62, 189, 102, 37, 190, 116, 219, 252, 61, 186, 174, 51, 190, 187, 17, 61, 190, 76, 237, 149, 189, 180, 135, 42, 61, 162, 93, 227, 189, 32, 91, 236, 189, 28, 17, 24, 62, 97, 93, 236, 61, 152, 246, 136, 61, 191, 199, 204, 61, 38, 121, 242, 60, 205, 10, 140, 60, 90, 88, 252, 189, 40, 124, 243, 189, 94, 215, 160, 61, 137, 209, 184, 189, 45, 164, 218, 189, 105, 46, 196, 187, 188, 9, 190, 189, 122, 112, 188, 190, 216, 182, 223, 62, 27, 86, 190, 62, 100, 158, 98, 62, 185, 32, 26, 63, 102, 25, 226, 190, 253, 55, 110, 189, 186, 135, 187, 189, 60, 83, 225, 62, 40, 85, 216, 189, 240, 219, 114, 62, 231, 219, 69, 190, 30, 97, 45, 62, 235, 209, 148, 62, 26, 223, 69, 191, 91, 179, 38, 190, 36, 225, 107, 189, 77, 119, 22, 190, 144, 67, 180, 60, 64, 2, 7, 62, 115, 139, 95, 189, 115, 180, 152, 61, 173, 85, 51, 191, 196, 149, 19, 191, 109, 128, 183, 190, 131, 34, 73, 61, 76, 103, 131, 191, 245, 222, 39, 62, 122, 113, 138, 62, 128, 121, 127, 190, 228, 4, 20, 62, 188, 28, 52, 191, 214, 14, 172, 190, 42, 53, 40, 190, 14, 170, 23, 190, 132, 135, 51, 61, 29, 145, 57, 61, 71, 187, 246, 61, 172, 109, 67, 189, 46, 56, 23, 62, 27, 189, 9, 190, 217, 215, 164, 190, 143, 114, 18, 190, 139, 127, 75, 62, 103, 48, 76, 188, 142, 127, 62, 190, 215, 218, 61, 62, 29, 172, 94, 62, 143, 96, 6, 60, 34, 68, 152, 62, 92, 66, 184, 59, 61, 13, 187, 62, 234, 201, 180, 61, 200, 142, 204, 61, 154, 113, 44, 62, 130, 254, 77, 62, 182, 110, 173, 189, 27, 206, 79, 60, 46, 151, 159, 190, 45, 172, 53, 186, 209, 125, 93, 62, 176, 112, 177, 60, 122, 182, 32, 190, 99, 120, 8, 191, 64, 16, 162, 190, 70, 93, 144, 62, 120, 132, 191, 61, 60, 77, 140, 189, 19, 76, 131, 61, 70, 250, 29, 189, 65, 8, 8, 63, 41, 136, 158, 62, 228, 55, 148, 62, 190, 79, 137, 188, 133, 151, 227, 61, 206, 130, 133, 61, 241, 85, 217, 62, 20, 94, 197, 62, 185, 146, 156, 189, 229, 12, 9, 190, 142, 214, 243, 189, 60, 194, 119, 190, 127, 55, 137, 62, 111, 158, 207, 62, 193, 164, 56, 190, 59, 69, 219, 189, 194, 236, 112, 190, 183, 234, 6, 191, 119, 61, 58, 190, 184, 179, 237, 189, 48, 168, 198, 190, 61, 211, 242, 61, 123, 180, 214, 190, 59, 63, 73, 190, 90, 86, 69, 188, 40, 78, 131, 190, 30, 225, 135, 62, 228, 105, 166, 190, 53, 188, 179, 190, 47, 117, 82, 62, 209, 239, 1, 191, 211, 48, 201, 61, 107, 111, 92, 191, 80, 102, 70, 61, 95, 185, 189, 60, 127, 115, 255, 61, 42, 141, 144, 191, 27, 130, 148, 62, 146, 0, 47, 191, 173, 171, 13, 190, 118, 121, 234, 61, 175, 7, 192, 61, 97, 5, 230, 188, 130, 199, 165, 62, 250, 129, 135, 190, 107, 151, 187, 191, 189, 7, 236, 62, 89, 119, 145, 62, 10, 95, 145, 62, 97, 252, 33, 62, 149, 204, 156, 62, 148, 166, 151, 189, 175, 65, 57, 62, 97, 144, 175, 188, 216, 245, 161, 62, 165, 12, 255, 60, 164, 227, 4, 188, 93, 35, 72, 191, 155, 37, 239, 61, 247, 187, 125, 62, 170, 109, 142, 61, 106, 25, 151, 60, 224, 237, 106, 186, 143, 101, 115, 62, 202, 89, 176, 189, 93, 85, 176, 62, 80, 189, 201, 61, 203, 15, 149, 60, 127, 108, 45, 190, 58, 136, 111, 190, 47, 34, 54, 190, 213, 202, 238, 60, 233, 121, 209, 189, 90, 118, 59, 62, 158, 19, 87, 189, 245, 206, 35, 190, 82, 238, 202, 61, 130, 177, 119, 189, 240, 201, 190, 61, 240, 63, 163, 189, 47, 47, 233, 189, 234, 10, 145, 189, 116, 76, 5, 189, 71, 27, 56, 189, 34, 26, 182, 62, 163, 43, 166, 62, 48, 103, 10, 62, 190, 28, 91, 190, 28, 127, 226, 60, 202, 100, 46, 191, 11, 127, 5, 60, 122, 60, 151, 188, 103, 26, 254, 188, 215, 255, 241, 61, 36, 148, 131, 61, 98, 86, 109, 190, 82, 71, 133, 190, 230, 197, 184, 61, 194, 41, 186, 191, 146, 111, 50, 187, 78, 189, 45, 189, 15, 165, 112, 62, 203, 60, 193, 61, 173, 151, 127, 189, 80, 128, 42, 62, 35, 164, 14, 62, 105, 181, 109, 62, 26, 10, 10, 62, 68, 216, 1, 190, 141, 104, 86, 62, 179, 194, 221, 61, 45, 37, 106, 190, 21, 67, 41, 62, 160, 63, 195, 62, 255, 250, 130, 190, 48, 81, 93, 189, 66, 94, 5, 190, 30, 2, 90, 190, 27, 21, 231, 60, 52, 138, 75, 62, 216, 185, 48, 190, 105, 46, 191, 61, 145, 229, 114, 61, 184, 232, 57, 190, 85, 65, 210, 189, 21, 11, 32, 189, 198, 113, 128, 189, 191, 83, 19, 189, 86, 17, 166, 60, 237, 206, 191, 60, 80, 183, 163, 189, 168, 157, 194, 61, 84, 129, 98, 189, 160, 115, 101, 189, 126, 191, 17, 61, 244, 134, 161, 189, 41, 155, 50, 61, 222, 103, 251, 61, 72, 159, 168, 61, 172, 231, 88, 188, 173, 25, 254, 188, 184, 200, 51, 190, 244, 31, 226, 188, 112, 212, 123, 189, 61, 90, 206, 188, 237, 37, 210, 61, 217, 180, 223, 61, 117, 31, 241, 61, 33, 166, 247, 189, 35, 91, 230, 60, 194, 6, 41, 62, 39, 23, 169, 58, 160, 11, 60, 190, 164, 9, 108, 191, 175, 52, 235, 189, 72, 83, 89, 62, 231, 216, 85, 190, 147, 90, 146, 191, 114, 30, 51, 62, 152, 76, 92, 61, 8, 10, 231, 62, 179, 48, 200, 190, 207, 95, 16, 63, 135, 244, 31, 190, 80, 208, 72, 190, 161, 98, 254, 190, 146, 59, 20, 60, 44, 147, 119, 62, 44, 80, 197, 189, 171, 39, 221, 189, 75, 254, 32, 191, 97, 200, 61, 61, 145, 124, 140, 62, 120, 3, 143, 189, 87, 244, 84, 61, 222, 167, 248, 60, 4, 177, 146, 60, 190, 123, 71, 191, 57, 19, 97, 62, 210, 40, 208, 190, 227, 26, 127, 62, 132, 118, 65, 62, 162, 112, 6, 191, 206, 220, 155, 190, 77, 137, 128, 189, 80, 4, 34, 60, 23, 216, 17, 190, 172, 44, 21, 62, 98, 169, 26, 190, 235, 81, 168, 189, 159, 7, 240, 188, 38, 148, 177, 188, 48, 225, 3, 190, 183, 240, 33, 190, 40, 252, 206, 58, 36, 96, 249, 189, 178, 101, 52, 62, 175, 110, 8, 190, 171, 224, 105, 59, 166, 106, 175, 61, 177, 219, 0, 190, 147, 81, 27, 190, 60, 67, 242, 187, 69, 8, 74, 188, 184, 114, 41, 189, 92, 112, 131, 188, 91, 169, 65, 61, 142, 81, 228, 189, 5, 32, 217, 61, 133, 247, 47, 189, 159, 144, 171, 189, 41, 184, 215, 189, 81, 82, 140, 189, 117, 163, 146, 189, 244, 105, 19, 190, 17, 160, 129, 189, 205, 221, 135, 61, 79, 162, 68, 191, 227, 31, 140, 190, 2, 129, 87, 62, 245, 57, 136, 62, 191, 236, 10, 189, 27, 23, 182, 62, 131, 15, 68, 190, 31, 12, 3, 63, 247, 168, 72, 61, 113, 153, 50, 62, 217, 153, 136, 190, 241, 9, 92, 189, 164, 113, 5, 191, 33, 90, 242, 62, 17, 250, 154, 60, 137, 48, 203, 189, 209, 151, 234, 189, 208, 228, 99, 190, 117, 61, 163, 190, 149, 62, 88, 62, 226, 185, 117, 188, 141, 238, 135, 190, 143, 163, 85, 185, 40, 10, 26, 189, 242, 201, 199, 190, 72, 239, 227, 189, 113, 11, 131, 61, 28, 79, 88, 190, 191, 123, 172, 60, 112, 0, 158, 187, 179, 201, 6, 190, 194, 230, 4, 62, 21, 60, 205, 189, 122, 254, 200, 61, 172, 154, 0, 191, 194, 237, 202, 188, 237, 187, 81, 61, 148, 200, 163, 190, 32, 31, 179, 61, 212, 157, 180, 60, 177, 209, 52, 58, 34, 105, 17, 62, 28, 211, 50, 60, 22, 175, 176, 187, 154, 195, 201, 189, 215, 220, 33, 191, 190, 23, 4, 61, 185, 164, 85, 62, 45, 148, 13, 62, 110, 53, 37, 189, 215, 103, 95, 190, 20, 211, 111, 62, 8, 88, 184, 190, 28, 164, 50, 191, 91, 127, 219, 62, 239, 132, 244, 189, 152, 92, 40, 190, 221, 191, 33, 61, 55, 15, 144, 189, 211, 216, 60, 62, 105, 55, 20, 189, 229, 130, 226, 61, 113, 13, 81, 190, 11, 96, 13, 62, 42, 126, 27, 63, 230, 109, 175, 61, 8, 62, 153, 61, 116, 99, 31, 190, 249, 98, 153, 60, 98, 236, 75, 190, 195, 221, 169, 62, 224, 107, 195, 190, 188, 30, 61, 61, 71, 68, 188, 62, 108, 181, 167, 62, 152, 118, 17, 191, 231, 15, 213, 188, 149, 142, 13, 190, 142, 90, 12, 190, 152, 19, 135, 62, 93, 134, 126, 62, 84, 29, 227, 61, 101, 202, 93, 62, 160, 71, 44, 190, 128, 133, 108, 191, 246, 1, 110, 62, 249, 250, 174, 60, 212, 84, 136, 62, 119, 129, 232, 190, 182, 223, 203, 185, 62, 112, 35, 190, 5, 40, 150, 62, 188, 70, 95, 60, 44, 232, 34, 62, 134, 233, 28, 190, 124, 174, 167, 61, 79, 201, 44, 191, 242, 35, 81, 189, 43, 25, 167, 61, 157, 217, 130, 190, 13, 240, 255, 190, 176, 236, 54, 62, 86, 13, 78, 62, 43, 217, 161, 61, 145, 16, 16, 190, 128, 76, 166, 62, 41, 236, 7, 190, 181, 199, 3, 60, 175, 20, 174, 190, 140, 108, 43, 62, 179, 2, 136, 62, 110, 89, 93, 62, 199, 17, 188, 188, 92, 253, 26, 191, 106, 242, 34, 189, 16, 70, 164, 60, 112, 90, 111, 189, 210, 202, 195, 187, 72, 246, 149, 62, 18, 230, 69, 62, 88, 213, 186, 191, 166, 39, 53, 62, 231, 120, 152, 190, 212, 10, 171, 61, 95, 97, 131, 61, 23, 13, 74, 190, 111, 19, 78, 190, 146, 131, 163, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 207, 113, 189, 98, 152, 48, 190, 217, 102, 140, 61, 148, 106, 80, 190, 81, 127, 3, 190, 26, 123, 159, 62, 242, 11, 149, 190, 43, 193, 204, 189, 139, 185, 9, 62, 154, 212, 185, 61, 221, 75, 36, 60, 145, 94, 84, 189, 237, 72, 142, 190, 154, 86, 149, 188, 107, 147, 180, 188, 247, 62, 98, 61, 154, 36, 75, 62, 166, 11, 220, 60, 221, 233, 109, 189, 186, 248, 129, 189, 198, 67, 233, 189, 135, 80, 133, 62, 227, 38, 104, 61, 7, 195, 134, 62, 174, 154, 78, 190, 69, 141, 30, 190, 168, 170, 173, 189, 79, 206, 158, 189, 166, 210, 3, 190, 228, 168, 44, 62, 201, 151, 76, 62, 215, 237, 108, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 218, 31, 191, 232, 155, 115, 62, 137, 237, 160, 62, 24, 165, 38, 63, 198, 69, 217, 62, 226, 190, 59, 62, 226, 44, 160, 190, 223, 177, 135, 190, 185, 42, 210, 190, 194, 205, 141, 191, 225, 56, 180, 190, 18, 3, 15, 188, 75, 166, 42, 191, 110, 55, 88, 61, 91, 216, 17, 191, 16, 60, 145, 62, 53, 229, 255, 62, 102, 128, 179, 189, 225, 219, 30, 61, 151, 74, 93, 191, 65, 87, 71, 190, 201, 93, 31, 191, 155, 188, 87, 63, 73, 27, 235, 61, 41, 49, 205, 190, 241, 235, 33, 190, 241, 64, 76, 191, 183, 130, 250, 60, 208, 186, 201, 190, 249, 92, 43, 62, 76, 210, 191, 62, 89, 181, 169, 190, 159, 48, 90, 62, 48, 3, 233, 189, 165, 16, 25, 62, 10, 2, 163, 62, 234, 151, 137, 61, 106, 77, 246, 189, 121, 115, 34, 62, 242, 24, 124, 61, 213, 4, 106, 61, 148, 95, 188, 188, 168, 241, 11, 62, 96, 217, 188, 189, 188, 138, 75, 62, 221, 150, 106, 61, 55, 92, 85, 190, 218, 130, 142, 189, 82, 161, 134, 189, 141, 146, 12, 62, 235, 3, 202, 61, 115, 54, 114, 62, 1, 131, 78, 61, 96, 167, 161, 190, 142, 40, 155, 62, 253, 207, 107, 190, 167, 106, 13, 62, 20, 139, 0, 190, 207, 156, 100, 189, 96, 240, 15, 61, 173, 179, 135, 62, 101, 134, 137, 188, 42, 88, 114, 189, 118, 202, 30, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 93, 148, 62, 139, 194, 175, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {217, 100, 14, 63, 189, 123, 217, 61, 41, 71, 206, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {145, 239, 2, 192, 104, 38, 125, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0033/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}