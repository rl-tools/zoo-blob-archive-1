// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 221, 131, 61, 150, 220, 182, 62, 66, 50, 254, 61, 8, 88, 78, 188, 183, 234, 133, 62, 207, 86, 249, 190, 70, 137, 211, 62, 207, 180, 34, 191, 224, 125, 21, 62, 84, 165, 17, 191, 179, 177, 172, 62, 138, 31, 25, 191, 41, 159, 215, 190, 177, 176, 92, 191, 39, 124, 26, 190, 253, 124, 224, 189, 217, 200, 243, 190, 124, 168, 102, 62, 153, 170, 21, 63, 210, 163, 26, 191, 181, 83, 126, 190, 207, 193, 170, 62, 22, 239, 63, 63, 139, 192, 16, 63, 67, 92, 248, 61, 216, 175, 104, 191, 20, 38, 60, 190, 173, 199, 27, 63, 155, 251, 136, 62, 158, 251, 232, 188, 243, 169, 150, 61, 142, 235, 10, 62, 79, 171, 104, 61, 42, 37, 141, 190, 130, 156, 132, 61, 117, 80, 243, 190, 237, 124, 226, 62, 181, 157, 89, 191, 111, 255, 94, 190, 192, 194, 132, 189, 42, 145, 152, 190, 9, 234, 149, 62, 254, 144, 185, 189, 199, 194, 37, 63, 234, 8, 236, 190, 209, 237, 163, 190, 136, 138, 101, 62, 230, 233, 197, 62, 133, 98, 246, 62, 16, 108, 62, 191, 187, 123, 197, 190, 213, 75, 240, 61, 160, 210, 79, 191, 128, 162, 202, 190, 125, 23, 232, 190, 2, 249, 130, 191, 182, 112, 195, 62, 190, 179, 167, 62, 89, 68, 59, 63, 81, 229, 183, 190, 12, 191, 81, 190, 163, 69, 202, 60, 229, 192, 177, 189, 8, 114, 227, 189, 190, 227, 134, 191, 245, 81, 144, 62, 3, 193, 200, 190, 196, 189, 49, 63, 139, 28, 115, 189, 33, 122, 30, 190, 238, 44, 236, 190, 110, 42, 170, 62, 108, 158, 36, 62, 128, 135, 213, 190, 147, 252, 200, 190, 140, 233, 6, 63, 83, 203, 205, 62, 54, 150, 2, 191, 104, 148, 251, 189, 78, 179, 90, 190, 175, 120, 181, 190, 67, 124, 45, 63, 137, 164, 22, 62, 176, 125, 92, 190, 32, 213, 154, 190, 221, 49, 61, 188, 158, 131, 66, 62, 149, 63, 179, 190, 135, 81, 44, 191, 71, 43, 14, 60, 83, 0, 241, 188, 188, 148, 1, 191, 74, 30, 237, 190, 192, 89, 42, 191, 97, 52, 63, 62, 161, 232, 199, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 14, 24, 191, 10, 188, 234, 190, 26, 3, 211, 190, 172, 35, 122, 190, 154, 54, 227, 62, 155, 83, 239, 190, 26, 209, 203, 62, 192, 98, 148, 190, 49, 99, 39, 63, 79, 186, 6, 62, 57, 248, 110, 190, 154, 225, 195, 190, 239, 29, 128, 189, 96, 64, 13, 191, 175, 241, 160, 62, 250, 222, 187, 62, 47, 255, 10, 62, 215, 51, 166, 190, 238, 111, 160, 189, 123, 160, 55, 63, 77, 109, 236, 190, 88, 250, 58, 62, 209, 249, 41, 63, 24, 26, 6, 63, 65, 153, 40, 191, 23, 106, 89, 190, 87, 115, 214, 190, 108, 153, 53, 190, 128, 79, 248, 62, 198, 155, 84, 189, 205, 60, 16, 191, 239, 226, 13, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 7, 214, 61, 69, 221, 247, 189, 236, 242, 238, 189, 237, 176, 12, 190, 232, 1, 242, 189, 76, 104, 10, 190, 54, 212, 229, 189, 176, 225, 21, 62, 185, 46, 47, 190, 237, 89, 34, 62, 178, 134, 172, 61, 201, 245, 29, 190, 107, 133, 186, 187, 90, 15, 20, 62, 107, 211, 39, 190, 131, 97, 69, 189, 169, 29, 16, 62, 118, 15, 233, 61, 96, 245, 215, 189, 87, 84, 53, 60, 180, 144, 30, 61, 28, 138, 200, 61, 254, 20, 34, 61, 240, 63, 195, 189, 235, 62, 211, 61, 181, 86, 0, 62, 77, 214, 23, 189, 147, 49, 139, 189, 99, 77, 16, 190, 72, 241, 3, 190, 252, 145, 141, 189, 172, 167, 237, 188, 5, 107, 249, 189, 59, 200, 23, 62, 45, 237, 3, 62, 85, 84, 140, 61, 66, 28, 81, 60, 87, 4, 175, 61, 115, 19, 239, 189, 137, 40, 250, 61, 195, 178, 102, 188, 149, 66, 39, 190, 199, 119, 31, 190, 127, 248, 62, 60, 40, 196, 165, 189, 152, 239, 108, 189, 49, 124, 45, 61, 101, 117, 17, 187, 2, 147, 16, 61, 113, 65, 72, 188, 210, 182, 208, 61, 149, 134, 49, 189, 118, 228, 126, 60, 106, 241, 186, 60, 144, 62, 217, 189, 9, 188, 203, 189, 157, 222, 23, 190, 223, 233, 11, 62, 164, 61, 76, 59, 148, 214, 106, 190, 131, 105, 79, 190, 14, 172, 176, 189, 107, 163, 250, 188, 198, 203, 250, 61, 182, 86, 203, 61, 254, 155, 146, 189, 247, 73, 56, 61, 193, 130, 245, 61, 121, 120, 170, 189, 8, 60, 165, 189, 97, 216, 98, 62, 42, 152, 47, 188, 164, 181, 133, 61, 236, 73, 20, 62, 66, 158, 254, 61, 194, 109, 176, 189, 110, 170, 250, 61, 239, 235, 179, 189, 192, 248, 62, 190, 185, 253, 150, 188, 19, 103, 36, 62, 156, 231, 80, 62, 93, 242, 201, 61, 156, 81, 149, 188, 134, 126, 12, 190, 45, 50, 225, 60, 250, 173, 132, 190, 114, 227, 48, 189, 13, 127, 167, 61, 15, 174, 31, 190, 201, 166, 2, 62, 210, 124, 220, 61, 221, 54, 135, 189, 248, 155, 116, 189, 210, 133, 90, 61, 0, 202, 32, 61, 220, 196, 77, 62, 120, 42, 242, 189, 130, 46, 237, 187, 150, 81, 173, 189, 25, 21, 109, 190, 63, 86, 146, 61, 149, 144, 229, 189, 253, 209, 172, 61, 64, 171, 110, 190, 152, 182, 242, 189, 206, 133, 235, 61, 52, 75, 18, 186, 39, 146, 42, 62, 88, 218, 36, 62, 127, 101, 15, 62, 63, 46, 24, 189, 91, 26, 245, 188, 240, 69, 223, 189, 70, 20, 15, 62, 194, 228, 200, 189, 102, 159, 183, 188, 227, 34, 246, 61, 3, 172, 93, 190, 48, 114, 60, 190, 197, 46, 149, 189, 138, 24, 166, 61, 24, 231, 254, 61, 5, 86, 215, 189, 95, 201, 1, 190, 53, 126, 144, 190, 186, 97, 45, 62, 167, 197, 178, 188, 193, 189, 184, 189, 140, 72, 168, 189, 98, 63, 206, 61, 89, 209, 70, 62, 103, 172, 240, 189, 131, 185, 155, 189, 127, 154, 230, 189, 179, 165, 47, 62, 198, 22, 38, 190, 124, 224, 171, 61, 218, 54, 178, 189, 22, 63, 151, 189, 50, 67, 74, 190, 55, 130, 95, 60, 131, 125, 242, 61, 40, 206, 188, 184, 20, 111, 26, 60, 244, 190, 217, 189, 221, 191, 88, 60, 227, 174, 253, 61, 34, 75, 238, 189, 106, 26, 5, 188, 78, 145, 146, 61, 54, 231, 130, 189, 202, 228, 197, 61, 23, 89, 186, 61, 195, 9, 72, 56, 199, 28, 254, 60, 238, 29, 38, 190, 50, 27, 115, 190, 88, 20, 178, 189, 3, 147, 121, 61, 180, 217, 30, 62, 86, 28, 179, 187, 155, 207, 225, 60, 245, 216, 177, 187, 198, 64, 0, 62, 116, 170, 61, 190, 136, 190, 20, 62, 64, 156, 183, 189, 114, 79, 40, 62, 156, 21, 178, 61, 188, 47, 201, 61, 32, 148, 65, 189, 89, 30, 215, 61, 85, 178, 192, 187, 168, 168, 168, 61, 124, 148, 8, 62, 105, 32, 71, 62, 18, 164, 31, 62, 245, 131, 96, 62, 74, 51, 18, 62, 78, 169, 243, 189, 127, 248, 178, 62, 250, 199, 113, 61, 170, 135, 133, 61, 9, 170, 202, 187, 187, 156, 139, 189, 198, 62, 111, 61, 155, 226, 131, 62, 72, 21, 194, 189, 241, 84, 20, 62, 135, 186, 28, 61, 46, 149, 20, 62, 222, 150, 51, 62, 88, 132, 96, 60, 146, 245, 60, 61, 11, 206, 156, 61, 233, 115, 28, 60, 46, 149, 99, 189, 24, 26, 30, 190, 168, 218, 204, 189, 248, 55, 21, 190, 50, 144, 38, 190, 192, 242, 107, 61, 160, 37, 93, 187, 194, 164, 205, 60, 27, 20, 234, 61, 82, 224, 239, 61, 38, 132, 113, 188, 55, 138, 132, 61, 89, 56, 131, 188, 240, 207, 25, 190, 237, 69, 136, 188, 188, 57, 43, 62, 56, 39, 138, 61, 230, 116, 73, 188, 158, 11, 222, 59, 143, 103, 185, 188, 165, 82, 189, 59, 14, 71, 80, 60, 250, 105, 110, 190, 191, 122, 79, 190, 232, 234, 174, 61, 102, 214, 89, 61, 110, 174, 152, 189, 32, 92, 220, 60, 250, 157, 83, 188, 134, 16, 165, 189, 110, 50, 195, 61, 81, 30, 39, 61, 131, 187, 27, 190, 37, 55, 170, 189, 187, 17, 62, 62, 101, 254, 12, 59, 116, 30, 81, 61, 234, 200, 113, 61, 223, 107, 92, 188, 142, 253, 100, 62, 79, 170, 141, 61, 30, 155, 70, 189, 32, 50, 75, 190, 67, 247, 206, 189, 248, 181, 37, 62, 58, 112, 124, 61, 95, 61, 193, 188, 95, 5, 27, 61, 41, 138, 134, 60, 134, 196, 198, 189, 201, 187, 51, 60, 83, 65, 21, 62, 203, 48, 10, 190, 49, 232, 5, 62, 119, 97, 142, 62, 84, 81, 189, 188, 52, 219, 132, 61, 214, 126, 107, 61, 198, 47, 155, 189, 172, 79, 169, 190, 156, 79, 172, 61, 140, 243, 9, 61, 72, 226, 193, 59, 221, 216, 251, 189, 249, 17, 179, 188, 113, 189, 88, 189, 56, 155, 8, 189, 182, 36, 241, 189, 73, 211, 105, 61, 1, 233, 3, 190, 9, 30, 197, 189, 150, 208, 22, 61, 232, 46, 28, 62, 88, 17, 41, 62, 162, 75, 130, 60, 139, 196, 41, 61, 23, 12, 88, 189, 214, 189, 115, 189, 45, 89, 110, 62, 49, 97, 32, 189, 49, 117, 19, 190, 23, 43, 136, 62, 47, 181, 5, 189, 47, 205, 161, 189, 44, 149, 40, 60, 53, 7, 37, 190, 235, 18, 216, 61, 174, 46, 3, 189, 250, 247, 118, 190, 190, 101, 31, 61, 29, 139, 6, 189, 52, 49, 169, 189, 157, 199, 3, 190, 44, 123, 135, 59, 241, 214, 25, 62, 233, 150, 150, 189, 64, 85, 70, 190, 127, 145, 113, 61, 27, 230, 104, 61, 6, 153, 172, 188, 58, 195, 160, 190, 154, 36, 129, 190, 184, 118, 13, 62, 67, 47, 245, 189, 221, 225, 161, 189, 25, 76, 238, 61, 1, 58, 25, 189, 235, 250, 90, 190, 229, 37, 9, 190, 74, 89, 229, 190, 242, 89, 94, 188, 121, 32, 7, 190, 212, 65, 16, 191, 129, 77, 192, 62, 172, 159, 4, 62, 161, 94, 47, 189, 192, 147, 81, 190, 234, 240, 146, 61, 108, 213, 149, 190, 174, 26, 176, 60, 60, 106, 206, 189, 73, 42, 40, 190, 67, 14, 134, 62, 42, 144, 38, 190, 198, 228, 225, 60, 141, 211, 5, 189, 40, 57, 223, 188, 167, 191, 253, 61, 111, 77, 48, 60, 61, 64, 154, 189, 64, 31, 123, 62, 0, 255, 240, 60, 27, 138, 8, 62, 4, 58, 191, 189, 45, 66, 224, 61, 113, 116, 46, 60, 17, 227, 12, 190, 90, 142, 90, 62, 74, 234, 69, 61, 163, 16, 54, 61, 238, 206, 176, 61, 148, 17, 73, 190, 147, 73, 28, 62, 171, 185, 97, 188, 48, 205, 199, 190, 20, 106, 204, 59, 51, 11, 51, 190, 169, 155, 122, 61, 251, 132, 164, 61, 83, 184, 13, 190, 26, 232, 52, 189, 165, 237, 151, 61, 61, 172, 5, 190, 58, 62, 16, 190, 3, 176, 110, 62, 65, 154, 249, 61, 176, 24, 236, 189, 131, 94, 167, 61, 138, 203, 190, 189, 236, 36, 237, 61, 119, 33, 56, 60, 4, 193, 10, 190, 54, 21, 225, 189, 111, 6, 36, 62, 51, 183, 55, 61, 65, 111, 79, 61, 213, 168, 31, 62, 200, 212, 226, 189, 99, 247, 76, 61, 224, 189, 152, 189, 23, 158, 197, 188, 105, 100, 27, 61, 111, 146, 46, 187, 73, 44, 189, 189, 33, 141, 176, 189, 69, 85, 91, 188, 152, 26, 16, 190, 58, 158, 26, 190, 123, 238, 13, 61, 68, 108, 242, 189, 37, 98, 21, 60, 198, 93, 5, 62, 92, 164, 234, 61, 51, 108, 52, 190, 150, 74, 85, 61, 119, 178, 192, 189, 49, 35, 211, 189, 252, 59, 48, 190, 73, 242, 4, 62, 139, 63, 176, 189, 208, 95, 10, 190, 76, 205, 83, 190, 78, 0, 93, 62, 132, 114, 82, 61, 187, 148, 59, 62, 120, 113, 159, 61, 239, 3, 252, 61, 85, 153, 200, 61, 37, 47, 79, 189, 80, 107, 2, 190, 212, 87, 125, 62, 226, 5, 62, 188, 140, 1, 218, 61, 147, 143, 42, 188, 55, 179, 134, 60, 212, 38, 183, 60, 203, 229, 133, 59, 233, 178, 29, 190, 15, 163, 247, 189, 138, 97, 160, 61, 32, 217, 106, 61, 190, 8, 184, 61, 50, 8, 249, 188, 109, 113, 180, 61, 167, 107, 2, 190, 138, 3, 224, 61, 225, 18, 185, 189, 9, 164, 171, 189, 135, 142, 171, 189, 57, 34, 100, 61, 165, 87, 235, 189, 85, 67, 235, 61, 151, 221, 112, 189, 239, 246, 30, 190, 35, 235, 254, 61, 244, 179, 199, 60, 48, 230, 78, 189, 221, 134, 167, 189, 178, 188, 28, 62, 72, 179, 173, 61, 58, 41, 69, 189, 208, 219, 153, 189, 62, 39, 222, 189, 104, 46, 40, 62, 108, 64, 47, 190, 48, 13, 184, 61, 163, 15, 63, 61, 152, 36, 23, 62, 89, 209, 37, 190, 210, 234, 148, 61, 119, 70, 13, 190, 117, 159, 35, 190, 212, 249, 15, 61, 117, 254, 123, 188, 95, 68, 86, 189, 79, 239, 186, 61, 65, 12, 166, 60, 40, 160, 31, 190, 81, 49, 242, 189, 146, 46, 231, 61, 3, 172, 22, 61, 215, 99, 207, 189, 75, 71, 135, 61, 0, 232, 107, 189, 150, 155, 66, 190, 102, 26, 67, 190, 16, 224, 225, 61, 136, 45, 158, 189, 224, 230, 1, 61, 63, 146, 125, 189, 67, 193, 183, 61, 75, 224, 140, 188, 130, 175, 73, 190, 216, 138, 180, 189, 107, 35, 164, 189, 59, 194, 160, 61, 69, 114, 6, 62, 215, 124, 125, 60, 72, 236, 20, 62, 89, 119, 71, 190, 160, 8, 63, 62, 182, 89, 81, 190, 12, 255, 122, 61, 30, 87, 98, 62, 210, 6, 80, 189, 202, 158, 158, 61, 128, 138, 125, 61, 72, 227, 166, 61, 227, 234, 127, 61, 231, 48, 121, 62, 42, 173, 169, 190, 215, 108, 24, 190, 144, 25, 26, 190, 251, 38, 221, 60, 246, 136, 49, 190, 22, 27, 94, 61, 64, 241, 47, 190, 106, 166, 52, 62, 248, 149, 231, 188, 85, 246, 178, 61, 223, 242, 61, 190, 91, 67, 202, 60, 79, 136, 220, 60, 85, 194, 44, 60, 56, 68, 226, 61, 49, 187, 130, 61, 57, 171, 76, 189, 235, 149, 175, 188, 5, 175, 32, 189, 164, 100, 198, 61, 11, 24, 56, 61, 18, 20, 160, 62, 41, 155, 99, 188, 137, 178, 148, 188, 171, 204, 111, 62, 107, 76, 189, 188, 16, 15, 221, 61, 192, 233, 171, 189, 194, 120, 52, 190, 28, 158, 245, 61, 234, 229, 182, 190, 216, 19, 165, 61, 213, 2, 202, 61, 118, 21, 82, 61, 36, 218, 221, 189, 224, 36, 150, 60, 91, 33, 20, 190, 250, 252, 111, 189, 218, 230, 65, 189, 30, 65, 134, 62, 123, 242, 66, 190, 254, 193, 51, 62, 95, 156, 91, 190, 149, 78, 208, 61, 42, 253, 6, 62, 58, 85, 221, 58, 207, 214, 184, 189, 21, 168, 38, 62, 8, 252, 179, 190, 203, 143, 143, 189, 246, 115, 119, 61, 46, 94, 74, 62, 163, 74, 192, 61, 53, 37, 164, 62, 103, 166, 210, 189, 82, 3, 245, 61, 65, 226, 146, 62, 255, 217, 160, 189, 93, 66, 79, 189, 173, 194, 167, 187, 74, 121, 49, 61, 20, 111, 81, 61, 16, 43, 96, 60, 171, 176, 133, 188, 216, 107, 10, 61, 162, 140, 31, 188, 45, 182, 104, 188, 71, 247, 135, 61, 97, 2, 136, 187, 155, 246, 225, 189, 145, 163, 35, 60, 183, 170, 151, 189, 164, 53, 28, 190, 40, 186, 181, 61, 103, 25, 130, 61, 114, 157, 135, 189, 184, 104, 99, 61, 93, 240, 191, 61, 78, 167, 152, 61, 253, 7, 242, 61, 235, 181, 191, 188, 6, 252, 44, 190, 10, 86, 51, 190, 29, 214, 1, 190, 220, 4, 25, 190, 215, 163, 4, 62, 56, 99, 25, 190, 222, 157, 184, 61, 50, 34, 181, 61, 29, 123, 17, 62, 189, 255, 222, 189, 160, 45, 111, 189, 203, 187, 80, 61, 42, 113, 45, 190, 122, 218, 189, 61, 125, 29, 142, 189, 128, 30, 201, 61, 147, 44, 216, 61, 193, 184, 181, 189, 31, 204, 133, 60, 55, 62, 15, 190, 56, 3, 105, 61, 2, 253, 0, 62, 24, 104, 51, 189, 226, 83, 182, 189, 226, 240, 26, 190, 245, 41, 241, 189, 121, 218, 159, 189, 252, 188, 255, 60, 230, 76, 177, 59, 90, 22, 22, 62, 189, 102, 37, 190, 32, 167, 4, 62, 186, 174, 51, 190, 211, 130, 55, 190, 76, 237, 149, 189, 180, 135, 42, 61, 163, 3, 206, 189, 32, 91, 236, 189, 28, 17, 24, 62, 108, 99, 0, 62, 152, 246, 136, 61, 198, 46, 222, 61, 38, 121, 242, 60, 205, 10, 140, 60, 90, 88, 252, 189, 40, 124, 243, 189, 79, 35, 169, 61, 118, 247, 178, 189, 45, 164, 218, 189, 105, 46, 196, 187, 23, 161, 171, 189, 152, 103, 50, 190, 5, 136, 162, 189, 163, 93, 81, 62, 146, 71, 210, 61, 161, 180, 179, 61, 202, 92, 154, 190, 99, 22, 2, 61, 47, 83, 98, 190, 110, 238, 0, 189, 99, 29, 224, 189, 22, 181, 34, 61, 219, 98, 14, 190, 173, 203, 61, 60, 51, 7, 67, 62, 38, 240, 103, 187, 196, 88, 191, 189, 155, 77, 124, 61, 248, 92, 138, 61, 118, 14, 15, 189, 37, 247, 137, 189, 172, 184, 24, 189, 2, 45, 254, 61, 9, 248, 171, 189, 226, 161, 147, 189, 196, 214, 222, 189, 65, 12, 231, 61, 151, 218, 155, 190, 36, 97, 23, 62, 229, 47, 48, 62, 169, 225, 87, 190, 30, 101, 155, 61, 61, 225, 0, 190, 54, 71, 216, 188, 131, 195, 43, 190, 239, 103, 22, 61, 90, 233, 72, 188, 190, 227, 180, 189, 102, 66, 140, 61, 190, 41, 216, 189, 20, 95, 221, 61, 139, 120, 48, 61, 193, 127, 28, 190, 62, 205, 190, 189, 219, 200, 3, 62, 157, 199, 148, 189, 2, 104, 44, 189, 19, 190, 213, 60, 206, 160, 44, 62, 222, 174, 202, 189, 166, 114, 95, 59, 182, 143, 6, 62, 67, 201, 2, 62, 238, 171, 237, 189, 37, 206, 43, 61, 220, 99, 70, 189, 122, 11, 28, 62, 241, 140, 242, 185, 229, 149, 29, 189, 98, 182, 189, 60, 243, 37, 188, 189, 189, 156, 239, 61, 219, 53, 180, 188, 250, 192, 27, 190, 67, 123, 176, 190, 172, 120, 103, 190, 187, 188, 0, 61, 196, 174, 9, 189, 61, 239, 62, 190, 35, 234, 94, 62, 252, 202, 35, 59, 233, 66, 231, 61, 156, 110, 196, 61, 252, 24, 225, 61, 56, 90, 12, 188, 98, 130, 129, 189, 145, 176, 150, 62, 168, 253, 163, 61, 22, 236, 171, 62, 190, 254, 34, 62, 219, 165, 176, 189, 235, 55, 148, 187, 65, 94, 63, 190, 179, 225, 154, 62, 230, 167, 44, 62, 200, 129, 40, 190, 174, 66, 0, 61, 45, 10, 8, 190, 2, 6, 74, 190, 214, 52, 143, 189, 185, 175, 206, 189, 76, 191, 36, 189, 248, 51, 59, 62, 212, 204, 163, 190, 170, 176, 73, 190, 57, 29, 70, 189, 22, 251, 250, 188, 20, 50, 30, 62, 22, 246, 18, 190, 18, 180, 43, 190, 170, 191, 158, 62, 93, 80, 158, 190, 104, 64, 255, 61, 93, 203, 250, 190, 227, 219, 128, 62, 126, 224, 183, 59, 179, 242, 31, 61, 191, 181, 43, 190, 182, 105, 128, 62, 66, 205, 0, 191, 182, 174, 106, 189, 203, 164, 12, 189, 90, 8, 239, 61, 250, 215, 162, 187, 250, 110, 124, 62, 42, 77, 22, 190, 39, 38, 4, 189, 69, 21, 222, 62, 202, 185, 121, 61, 248, 82, 99, 62, 174, 64, 33, 61, 94, 154, 35, 62, 118, 110, 2, 189, 176, 171, 9, 62, 73, 79, 9, 189, 196, 242, 152, 62, 88, 194, 6, 62, 229, 30, 33, 60, 69, 70, 239, 60, 92, 68, 13, 62, 166, 196, 92, 62, 209, 184, 167, 61, 66, 183, 77, 189, 29, 100, 35, 189, 196, 144, 14, 62, 122, 232, 242, 61, 118, 136, 58, 62, 176, 68, 54, 188, 193, 81, 134, 61, 2, 195, 219, 189, 11, 246, 242, 189, 21, 22, 204, 189, 243, 70, 118, 61, 212, 191, 3, 62, 157, 255, 44, 62, 157, 111, 129, 61, 80, 118, 249, 189, 55, 81, 217, 61, 245, 85, 19, 62, 7, 169, 193, 61, 253, 122, 213, 189, 139, 152, 10, 189, 127, 178, 23, 62, 242, 220, 50, 61, 21, 141, 155, 61, 108, 101, 103, 62, 245, 132, 36, 62, 250, 208, 165, 189, 105, 15, 206, 189, 125, 173, 236, 60, 245, 12, 213, 60, 143, 109, 171, 61, 232, 218, 150, 60, 189, 19, 161, 60, 202, 57, 118, 61, 238, 65, 142, 189, 154, 39, 4, 190, 123, 229, 55, 190, 147, 106, 4, 62, 219, 239, 96, 190, 93, 51, 16, 62, 246, 77, 209, 188, 161, 157, 196, 61, 32, 242, 46, 61, 131, 129, 138, 61, 89, 128, 152, 61, 67, 87, 206, 61, 209, 170, 204, 61, 157, 243, 89, 59, 200, 54, 116, 61, 252, 28, 0, 190, 41, 73, 79, 61, 72, 232, 53, 190, 22, 164, 176, 61, 62, 0, 73, 62, 158, 146, 28, 190, 191, 35, 0, 190, 2, 33, 9, 62, 116, 30, 62, 190, 112, 175, 62, 60, 72, 197, 194, 61, 242, 235, 251, 189, 105, 46, 191, 61, 145, 229, 114, 61, 184, 232, 57, 190, 85, 65, 210, 189, 21, 11, 32, 189, 198, 113, 128, 189, 191, 83, 19, 189, 86, 17, 166, 60, 237, 206, 191, 60, 80, 183, 163, 189, 168, 157, 194, 61, 84, 129, 98, 189, 160, 115, 101, 189, 126, 191, 17, 61, 244, 134, 161, 189, 41, 155, 50, 61, 222, 103, 251, 61, 72, 159, 168, 61, 172, 231, 88, 188, 173, 25, 254, 188, 184, 200, 51, 190, 244, 31, 226, 188, 112, 212, 123, 189, 61, 90, 206, 188, 237, 37, 210, 61, 217, 180, 223, 61, 117, 31, 241, 61, 33, 166, 247, 189, 35, 91, 230, 60, 194, 6, 41, 62, 39, 23, 169, 58, 160, 11, 60, 190, 7, 94, 124, 190, 38, 89, 132, 190, 225, 1, 111, 62, 133, 96, 135, 190, 110, 106, 56, 190, 122, 160, 34, 62, 151, 0, 155, 61, 140, 115, 104, 62, 0, 154, 6, 190, 178, 227, 207, 62, 211, 196, 179, 60, 44, 160, 122, 190, 99, 123, 189, 61, 152, 198, 166, 189, 55, 198, 162, 61, 235, 73, 252, 186, 206, 113, 159, 61, 34, 78, 30, 189, 194, 89, 133, 61, 148, 163, 133, 62, 113, 40, 245, 188, 89, 227, 83, 188, 209, 173, 6, 61, 129, 124, 92, 61, 226, 95, 224, 61, 3, 72, 180, 60, 44, 203, 23, 190, 136, 153, 109, 62, 129, 206, 85, 62, 193, 8, 246, 190, 21, 215, 221, 188, 53, 130, 101, 188, 80, 4, 34, 60, 23, 216, 17, 190, 151, 36, 34, 62, 98, 169, 26, 190, 98, 194, 161, 189, 30, 14, 159, 188, 38, 148, 177, 188, 20, 3, 236, 189, 153, 92, 27, 190, 40, 252, 206, 58, 238, 95, 249, 189, 178, 101, 52, 62, 175, 110, 8, 190, 218, 147, 148, 60, 166, 106, 175, 61, 254, 192, 240, 189, 147, 81, 27, 190, 60, 67, 242, 187, 191, 254, 10, 59, 184, 114, 41, 189, 92, 112, 131, 188, 197, 197, 132, 61, 142, 81, 228, 189, 108, 150, 238, 61, 133, 247, 47, 189, 159, 144, 171, 189, 41, 184, 215, 189, 81, 82, 140, 189, 202, 124, 134, 189, 158, 118, 12, 190, 17, 160, 129, 189, 205, 221, 135, 61, 198, 139, 3, 190, 173, 245, 53, 190, 233, 163, 94, 61, 185, 195, 117, 62, 8, 36, 124, 60, 65, 105, 36, 62, 46, 151, 62, 190, 123, 86, 58, 62, 99, 255, 6, 190, 175, 223, 106, 190, 123, 146, 245, 189, 24, 158, 226, 189, 149, 122, 185, 190, 108, 35, 131, 62, 177, 92, 185, 188, 34, 70, 227, 61, 205, 38, 4, 189, 28, 191, 60, 189, 80, 32, 87, 190, 52, 36, 68, 62, 172, 221, 26, 189, 173, 144, 98, 190, 253, 219, 18, 62, 225, 99, 153, 61, 233, 167, 50, 190, 42, 9, 132, 189, 43, 191, 236, 61, 91, 161, 3, 190, 248, 25, 135, 61, 209, 193, 235, 189, 168, 70, 137, 189, 156, 111, 39, 62, 115, 230, 217, 59, 80, 53, 141, 61, 92, 43, 24, 62, 43, 125, 47, 189, 221, 62, 32, 61, 20, 139, 201, 61, 18, 184, 71, 59, 101, 208, 1, 62, 235, 159, 161, 60, 55, 229, 65, 189, 76, 164, 26, 61, 234, 215, 236, 60, 77, 79, 164, 60, 36, 249, 155, 61, 236, 145, 55, 187, 82, 50, 18, 62, 100, 140, 185, 61, 252, 106, 36, 188, 57, 59, 247, 61, 241, 32, 34, 62, 86, 213, 254, 189, 57, 77, 167, 189, 126, 93, 93, 62, 94, 135, 236, 188, 41, 147, 55, 190, 102, 175, 164, 60, 254, 252, 50, 189, 135, 99, 168, 189, 29, 222, 232, 189, 131, 73, 173, 189, 44, 211, 45, 190, 21, 29, 181, 60, 19, 106, 121, 189, 174, 120, 18, 189, 198, 248, 50, 62, 16, 248, 131, 60, 78, 199, 203, 60, 5, 255, 202, 188, 200, 114, 129, 62, 68, 101, 116, 190, 124, 135, 246, 61, 44, 68, 78, 62, 220, 63, 36, 62, 16, 159, 234, 60, 195, 16, 92, 189, 170, 33, 153, 188, 206, 196, 177, 187, 138, 250, 17, 62, 39, 151, 75, 62, 47, 250, 239, 61, 84, 42, 55, 62, 59, 16, 240, 189, 174, 155, 221, 61, 122, 79, 88, 62, 165, 46, 47, 190, 6, 136, 81, 62, 181, 202, 38, 190, 6, 118, 116, 189, 190, 183, 156, 189, 196, 96, 64, 62, 120, 167, 130, 189, 185, 224, 68, 62, 215, 251, 13, 189, 190, 192, 114, 61, 115, 21, 155, 189, 32, 90, 186, 189, 202, 27, 5, 62, 136, 254, 123, 190, 31, 209, 103, 190, 168, 235, 108, 62, 50, 56, 23, 62, 91, 6, 159, 60, 40, 92, 154, 189, 6, 158, 66, 62, 85, 179, 68, 61, 56, 179, 1, 61, 47, 93, 69, 62, 241, 158, 40, 62, 8, 140, 50, 62, 207, 164, 42, 62, 181, 67, 155, 61, 238, 227, 164, 189, 161, 168, 147, 189, 144, 131, 42, 58, 235, 234, 130, 189, 33, 189, 15, 189, 255, 236, 84, 61, 236, 79, 10, 62, 35, 106, 52, 190, 188, 65, 142, 61, 58, 16, 3, 61, 59, 171, 137, 60, 102, 254, 190, 61, 236, 204, 112, 190, 154, 207, 234, 61, 61, 29, 11, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 58, 21, 190, 161, 194, 243, 189, 128, 229, 186, 61, 51, 243, 31, 190, 91, 66, 177, 189, 94, 151, 2, 62, 34, 110, 93, 189, 39, 157, 211, 60, 9, 121, 96, 62, 18, 193, 41, 61, 173, 55, 210, 61, 247, 205, 82, 188, 136, 30, 47, 190, 104, 133, 31, 188, 82, 4, 136, 188, 220, 248, 173, 189, 57, 106, 157, 61, 105, 1, 100, 61, 242, 37, 99, 189, 36, 86, 157, 188, 25, 4, 50, 190, 202, 142, 146, 62, 203, 225, 39, 61, 68, 14, 10, 62, 236, 180, 101, 188, 69, 141, 30, 190, 137, 161, 210, 60, 35, 112, 150, 189, 8, 88, 56, 189, 177, 93, 99, 60, 127, 90, 182, 61, 204, 191, 170, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 178, 118, 60, 54, 41, 87, 188, 16, 18, 163, 61, 159, 115, 9, 62, 23, 87, 122, 62, 220, 30, 206, 61, 27, 145, 195, 189, 222, 47, 164, 61, 229, 123, 191, 190, 139, 204, 20, 191, 116, 207, 102, 190, 173, 4, 21, 188, 81, 13, 109, 190, 255, 32, 138, 60, 44, 190, 137, 190, 126, 30, 244, 61, 113, 235, 112, 62, 33, 121, 188, 189, 121, 159, 32, 61, 184, 154, 203, 189, 199, 79, 101, 189, 252, 74, 204, 190, 122, 239, 137, 62, 207, 51, 23, 60, 122, 12, 88, 61, 241, 235, 33, 190, 231, 243, 154, 190, 84, 240, 252, 60, 71, 34, 150, 190, 81, 68, 72, 188, 169, 52, 78, 62, 114, 157, 35, 190, 124, 131, 251, 188, 75, 180, 45, 190, 108, 36, 45, 61, 154, 141, 219, 61, 240, 40, 31, 189, 196, 173, 249, 189, 241, 119, 235, 61, 107, 160, 224, 61, 96, 241, 40, 188, 5, 221, 196, 189, 141, 169, 128, 61, 208, 217, 192, 189, 156, 199, 41, 62, 160, 175, 160, 61, 208, 73, 3, 190, 94, 212, 14, 190, 175, 138, 175, 189, 81, 42, 20, 62, 21, 2, 202, 61, 20, 142, 40, 62, 234, 195, 19, 61, 29, 71, 72, 190, 92, 118, 236, 61, 88, 48, 52, 190, 195, 79, 6, 62, 20, 139, 0, 190, 170, 128, 240, 189, 199, 72, 15, 61, 185, 87, 70, 62, 221, 145, 14, 189, 233, 119, 161, 189, 62, 113, 31, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 89, 253, 61, 150, 68, 91, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {8, 185, 81, 63, 220, 193, 156, 63, 106, 21, 112, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {73, 8, 246, 191, 192, 144, 91, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0033/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}