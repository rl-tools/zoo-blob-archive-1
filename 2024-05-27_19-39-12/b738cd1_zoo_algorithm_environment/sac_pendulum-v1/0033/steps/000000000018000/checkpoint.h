// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 93, 199, 62, 190, 93, 202, 62, 250, 122, 186, 61, 236, 54, 90, 190, 83, 103, 194, 62, 128, 133, 247, 190, 14, 102, 101, 189, 167, 215, 113, 191, 162, 120, 174, 62, 95, 1, 23, 191, 13, 91, 195, 190, 224, 245, 42, 191, 136, 10, 96, 191, 28, 137, 58, 191, 118, 154, 175, 189, 49, 186, 101, 191, 159, 221, 117, 191, 111, 74, 30, 62, 182, 227, 34, 63, 151, 153, 41, 191, 43, 2, 237, 189, 7, 81, 136, 63, 169, 47, 129, 63, 120, 19, 2, 63, 119, 167, 195, 190, 52, 117, 82, 191, 139, 220, 128, 189, 5, 90, 147, 63, 13, 0, 67, 62, 33, 203, 73, 60, 247, 66, 133, 62, 136, 71, 199, 188, 0, 229, 98, 60, 31, 98, 209, 190, 209, 91, 205, 191, 172, 203, 242, 190, 184, 52, 254, 62, 128, 246, 179, 191, 216, 114, 135, 190, 103, 77, 24, 189, 23, 162, 84, 189, 64, 224, 220, 62, 174, 161, 182, 189, 240, 146, 111, 62, 165, 77, 26, 191, 110, 220, 88, 190, 150, 39, 191, 63, 48, 104, 2, 63, 55, 15, 36, 63, 90, 185, 149, 191, 92, 71, 72, 190, 34, 145, 28, 63, 70, 19, 187, 191, 126, 46, 190, 190, 254, 184, 157, 190, 101, 4, 145, 59, 200, 240, 77, 63, 27, 167, 13, 63, 158, 126, 138, 62, 165, 14, 136, 190, 168, 212, 80, 191, 110, 146, 51, 191, 20, 97, 79, 190, 117, 75, 146, 62, 250, 112, 106, 191, 97, 177, 21, 63, 105, 100, 162, 190, 161, 83, 122, 63, 64, 120, 104, 190, 128, 180, 179, 189, 174, 253, 151, 63, 238, 67, 31, 63, 216, 180, 69, 63, 79, 78, 34, 191, 188, 42, 186, 190, 87, 143, 65, 190, 97, 211, 105, 63, 60, 25, 5, 191, 9, 181, 213, 61, 44, 146, 60, 191, 247, 221, 100, 190, 40, 134, 91, 63, 43, 143, 50, 62, 44, 157, 62, 190, 91, 158, 203, 61, 143, 25, 180, 190, 8, 220, 198, 61, 124, 12, 28, 191, 48, 112, 6, 191, 50, 126, 145, 62, 235, 178, 54, 62, 160, 189, 133, 191, 228, 49, 199, 190, 19, 136, 234, 190, 120, 43, 110, 62, 149, 51, 223, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 167, 74, 191, 189, 112, 0, 191, 196, 209, 216, 61, 182, 187, 33, 191, 1, 21, 34, 63, 217, 180, 147, 190, 8, 181, 63, 62, 66, 180, 251, 190, 89, 128, 53, 63, 162, 147, 247, 62, 123, 185, 187, 190, 143, 133, 166, 61, 73, 103, 206, 189, 150, 36, 207, 190, 72, 244, 4, 189, 86, 223, 34, 62, 201, 0, 112, 189, 33, 174, 74, 190, 145, 82, 172, 190, 166, 20, 209, 62, 60, 61, 28, 191, 13, 165, 83, 190, 6, 240, 226, 62, 12, 164, 193, 61, 190, 202, 128, 191, 162, 24, 244, 61, 196, 173, 165, 190, 243, 121, 55, 191, 249, 73, 185, 62, 12, 129, 78, 62, 96, 163, 252, 190, 79, 196, 33, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {4, 61, 241, 190, 237, 90, 45, 62, 230, 104, 217, 189, 5, 223, 10, 62, 140, 154, 121, 191, 70, 64, 88, 190, 180, 192, 234, 61, 148, 225, 5, 63, 23, 224, 143, 190, 55, 36, 10, 63, 67, 34, 60, 189, 74, 68, 133, 190, 19, 236, 53, 191, 2, 196, 46, 62, 206, 207, 103, 189, 187, 150, 43, 189, 1, 149, 55, 190, 1, 91, 47, 191, 13, 198, 230, 189, 14, 17, 155, 60, 89, 182, 220, 190, 77, 20, 150, 62, 46, 200, 26, 62, 248, 19, 212, 188, 19, 14, 87, 191, 129, 91, 175, 62, 114, 57, 206, 190, 202, 21, 155, 189, 28, 101, 151, 189, 206, 165, 64, 190, 166, 190, 255, 190, 245, 97, 56, 190, 164, 254, 251, 189, 29, 187, 27, 62, 244, 148, 32, 63, 75, 231, 10, 62, 232, 24, 166, 61, 187, 87, 149, 63, 148, 250, 195, 190, 188, 135, 215, 61, 144, 70, 1, 61, 23, 233, 3, 191, 99, 12, 32, 190, 112, 150, 24, 62, 86, 38, 187, 190, 109, 80, 48, 190, 145, 124, 99, 61, 133, 140, 164, 191, 76, 141, 217, 189, 232, 134, 224, 189, 28, 250, 33, 191, 222, 92, 155, 189, 234, 59, 79, 62, 153, 47, 133, 60, 129, 5, 45, 190, 80, 219, 172, 191, 137, 249, 138, 189, 12, 251, 114, 61, 54, 82, 241, 188, 108, 150, 6, 190, 229, 117, 223, 61, 215, 49, 88, 63, 39, 14, 71, 189, 175, 233, 6, 62, 57, 106, 29, 63, 2, 62, 31, 61, 182, 76, 133, 62, 51, 189, 243, 61, 129, 34, 160, 190, 21, 105, 248, 60, 253, 68, 158, 62, 173, 49, 0, 191, 254, 114, 74, 189, 143, 106, 201, 62, 232, 60, 239, 61, 29, 7, 134, 190, 99, 228, 132, 62, 222, 179, 131, 62, 172, 203, 107, 190, 76, 239, 92, 189, 246, 174, 138, 62, 156, 87, 170, 62, 244, 101, 55, 62, 11, 61, 84, 61, 50, 148, 79, 191, 18, 59, 157, 189, 220, 64, 165, 190, 163, 200, 105, 190, 248, 76, 252, 62, 144, 27, 99, 190, 63, 51, 94, 62, 218, 10, 197, 62, 200, 103, 162, 190, 216, 165, 181, 60, 72, 55, 0, 62, 67, 10, 23, 188, 36, 96, 64, 63, 134, 25, 235, 189, 148, 93, 209, 61, 171, 131, 5, 190, 93, 124, 163, 191, 143, 218, 124, 189, 232, 55, 222, 189, 91, 45, 133, 62, 168, 123, 243, 190, 56, 230, 56, 62, 161, 67, 158, 62, 80, 210, 0, 190, 58, 112, 205, 190, 12, 177, 93, 62, 96, 232, 30, 62, 200, 7, 17, 188, 13, 169, 214, 190, 7, 125, 87, 190, 67, 216, 170, 61, 118, 161, 143, 62, 196, 198, 169, 188, 75, 147, 79, 62, 193, 208, 203, 190, 75, 55, 43, 190, 66, 10, 3, 61, 30, 209, 6, 62, 34, 240, 132, 61, 141, 102, 202, 189, 13, 9, 20, 190, 89, 171, 29, 191, 77, 176, 60, 62, 185, 0, 84, 188, 153, 193, 15, 63, 123, 92, 136, 188, 157, 216, 84, 62, 204, 48, 152, 62, 190, 91, 152, 190, 191, 187, 202, 189, 121, 62, 186, 190, 162, 142, 220, 61, 194, 115, 222, 190, 81, 110, 84, 188, 178, 211, 128, 62, 127, 157, 155, 61, 179, 134, 176, 190, 183, 124, 103, 190, 215, 128, 113, 62, 136, 242, 102, 61, 225, 28, 11, 190, 3, 224, 9, 190, 90, 125, 165, 190, 32, 2, 73, 62, 240, 17, 122, 190, 73, 161, 7, 190, 231, 75, 81, 62, 51, 20, 19, 190, 191, 91, 170, 62, 92, 195, 5, 62, 44, 88, 133, 61, 37, 180, 34, 189, 98, 119, 247, 190, 26, 160, 23, 191, 46, 77, 138, 189, 57, 219, 12, 62, 142, 118, 6, 63, 168, 248, 214, 60, 241, 205, 143, 189, 11, 97, 46, 188, 244, 184, 8, 62, 63, 26, 146, 190, 87, 146, 80, 62, 220, 15, 80, 190, 54, 246, 46, 62, 17, 31, 120, 62, 171, 65, 43, 62, 80, 98, 209, 189, 144, 135, 216, 60, 19, 184, 41, 189, 240, 113, 211, 61, 53, 88, 62, 62, 62, 238, 108, 62, 152, 25, 236, 61, 159, 10, 136, 62, 38, 83, 100, 62, 96, 222, 249, 190, 158, 21, 161, 62, 166, 101, 152, 62, 156, 144, 190, 61, 66, 112, 149, 61, 69, 232, 80, 189, 98, 89, 6, 61, 160, 60, 227, 62, 224, 116, 141, 61, 119, 64, 145, 62, 11, 79, 171, 60, 46, 208, 151, 62, 222, 150, 51, 62, 30, 51, 234, 188, 100, 21, 61, 61, 127, 74, 35, 188, 193, 70, 74, 189, 46, 149, 99, 189, 196, 105, 239, 189, 168, 218, 204, 189, 162, 150, 38, 190, 157, 9, 19, 191, 192, 242, 107, 61, 52, 0, 153, 189, 136, 151, 103, 62, 27, 20, 234, 61, 144, 253, 131, 59, 190, 156, 116, 188, 39, 211, 246, 61, 239, 58, 212, 61, 240, 207, 25, 190, 205, 159, 10, 190, 167, 89, 156, 62, 27, 30, 131, 61, 150, 46, 166, 190, 158, 11, 222, 59, 149, 32, 44, 62, 86, 32, 65, 189, 148, 227, 87, 61, 214, 238, 196, 189, 33, 51, 237, 190, 24, 40, 115, 190, 189, 153, 255, 61, 218, 246, 95, 190, 243, 79, 239, 190, 172, 133, 132, 189, 55, 90, 139, 189, 81, 180, 97, 61, 201, 254, 38, 190, 164, 33, 58, 190, 214, 22, 114, 189, 26, 199, 197, 62, 96, 92, 39, 61, 199, 63, 21, 60, 114, 190, 134, 61, 251, 231, 195, 189, 149, 9, 176, 62, 80, 190, 20, 187, 169, 84, 137, 189, 118, 25, 138, 190, 41, 93, 55, 189, 78, 219, 154, 62, 152, 121, 127, 189, 41, 12, 27, 190, 110, 133, 139, 190, 247, 135, 189, 61, 50, 175, 253, 190, 131, 142, 249, 188, 115, 128, 149, 62, 43, 193, 226, 189, 0, 144, 136, 62, 82, 210, 36, 62, 161, 250, 146, 189, 180, 244, 183, 189, 96, 165, 54, 62, 67, 153, 68, 190, 237, 155, 238, 190, 182, 76, 73, 61, 29, 250, 37, 62, 212, 2, 123, 61, 186, 71, 116, 58, 34, 114, 66, 190, 120, 71, 160, 190, 140, 240, 212, 190, 23, 8, 32, 190, 141, 75, 150, 190, 177, 23, 14, 190, 238, 28, 173, 189, 108, 64, 46, 190, 249, 6, 77, 62, 63, 63, 41, 62, 33, 94, 142, 190, 129, 229, 186, 190, 69, 86, 175, 190, 51, 32, 187, 190, 51, 148, 19, 62, 111, 10, 155, 62, 0, 73, 200, 190, 126, 233, 97, 62, 109, 241, 78, 190, 103, 175, 2, 191, 175, 172, 77, 189, 151, 145, 99, 190, 65, 152, 224, 189, 108, 57, 56, 190, 174, 214, 50, 191, 93, 242, 154, 188, 170, 25, 170, 188, 210, 239, 96, 188, 140, 213, 61, 190, 254, 207, 78, 62, 202, 17, 95, 62, 149, 226, 26, 61, 218, 71, 172, 190, 250, 225, 163, 188, 90, 205, 6, 62, 239, 190, 181, 61, 36, 187, 69, 189, 252, 231, 113, 190, 175, 95, 35, 62, 161, 19, 173, 190, 75, 139, 16, 61, 28, 39, 52, 62, 213, 21, 154, 191, 224, 228, 4, 191, 247, 129, 249, 190, 5, 180, 132, 191, 184, 170, 21, 61, 151, 37, 156, 189, 246, 37, 118, 191, 45, 54, 165, 62, 120, 222, 59, 191, 48, 216, 128, 191, 178, 205, 91, 190, 212, 76, 213, 59, 51, 86, 238, 190, 16, 71, 24, 191, 39, 145, 76, 190, 42, 113, 132, 190, 136, 174, 145, 62, 9, 52, 40, 190, 70, 136, 16, 189, 42, 56, 100, 63, 196, 164, 27, 189, 159, 243, 146, 62, 110, 176, 117, 63, 213, 70, 225, 189, 76, 10, 141, 191, 179, 19, 95, 62, 118, 7, 162, 189, 234, 198, 183, 189, 79, 210, 170, 61, 142, 212, 123, 60, 146, 4, 236, 62, 133, 6, 49, 62, 34, 240, 80, 191, 136, 217, 235, 188, 46, 16, 78, 61, 187, 197, 139, 190, 244, 50, 203, 61, 227, 173, 86, 62, 192, 76, 198, 189, 236, 149, 240, 189, 203, 233, 76, 191, 162, 79, 34, 190, 164, 252, 79, 60, 85, 219, 71, 190, 133, 20, 31, 190, 244, 54, 167, 62, 92, 72, 17, 62, 122, 223, 75, 190, 240, 49, 83, 62, 65, 154, 249, 61, 176, 24, 236, 189, 70, 116, 242, 60, 139, 44, 218, 189, 163, 160, 25, 60, 75, 170, 79, 189, 197, 209, 23, 190, 54, 21, 225, 189, 21, 213, 103, 61, 51, 183, 55, 61, 65, 111, 79, 61, 92, 16, 192, 61, 130, 53, 12, 190, 99, 247, 76, 61, 119, 29, 156, 189, 39, 70, 200, 188, 182, 60, 196, 60, 182, 21, 175, 188, 45, 126, 209, 189, 212, 84, 178, 189, 211, 234, 77, 189, 53, 52, 43, 190, 197, 13, 39, 190, 87, 209, 225, 60, 68, 108, 242, 189, 37, 98, 21, 60, 83, 219, 0, 62, 92, 164, 234, 61, 115, 187, 98, 190, 6, 122, 88, 188, 96, 204, 204, 189, 199, 217, 52, 190, 70, 25, 73, 191, 14, 179, 83, 61, 218, 83, 162, 189, 254, 179, 205, 190, 75, 163, 152, 191, 234, 24, 57, 62, 113, 130, 145, 62, 12, 145, 253, 62, 207, 102, 114, 60, 228, 154, 181, 62, 63, 11, 131, 187, 164, 86, 96, 189, 206, 177, 5, 191, 39, 45, 107, 62, 17, 182, 128, 62, 86, 169, 96, 189, 148, 177, 26, 190, 79, 5, 141, 190, 79, 109, 175, 189, 135, 35, 0, 61, 20, 79, 49, 190, 2, 213, 227, 187, 210, 135, 10, 190, 48, 112, 196, 188, 220, 104, 105, 62, 227, 98, 96, 62, 89, 133, 188, 61, 248, 110, 169, 189, 142, 97, 206, 61, 112, 162, 135, 190, 245, 130, 237, 190, 82, 71, 179, 190, 57, 34, 100, 61, 95, 204, 19, 190, 89, 197, 233, 61, 68, 217, 178, 189, 41, 203, 61, 190, 35, 235, 254, 61, 234, 213, 43, 60, 180, 129, 97, 189, 11, 230, 213, 189, 235, 238, 39, 62, 72, 179, 173, 61, 13, 111, 168, 189, 251, 40, 203, 189, 62, 39, 222, 189, 221, 10, 22, 62, 108, 64, 47, 190, 141, 240, 148, 61, 223, 137, 154, 60, 152, 36, 23, 62, 127, 220, 48, 190, 21, 135, 34, 61, 241, 64, 14, 190, 198, 154, 41, 190, 120, 7, 9, 61, 109, 179, 60, 189, 126, 198, 136, 189, 88, 90, 133, 61, 193, 10, 126, 60, 107, 190, 35, 190, 204, 184, 243, 189, 231, 206, 174, 61, 5, 232, 33, 60, 66, 119, 11, 191, 157, 116, 75, 62, 157, 252, 8, 62, 3, 102, 251, 188, 49, 125, 144, 191, 208, 26, 248, 61, 192, 87, 219, 188, 75, 58, 141, 62, 140, 182, 165, 189, 34, 4, 188, 62, 42, 176, 73, 189, 2, 133, 161, 190, 247, 72, 39, 191, 226, 205, 134, 186, 149, 14, 133, 62, 63, 6, 154, 189, 251, 76, 34, 190, 12, 150, 184, 190, 103, 186, 91, 190, 134, 233, 9, 62, 10, 163, 133, 190, 27, 103, 170, 62, 208, 187, 157, 60, 60, 160, 150, 189, 198, 179, 17, 191, 47, 117, 68, 62, 159, 35, 120, 190, 9, 60, 49, 62, 252, 17, 124, 62, 83, 155, 219, 190, 228, 213, 98, 190, 136, 154, 165, 190, 77, 170, 5, 63, 57, 79, 43, 190, 180, 50, 230, 189, 58, 163, 202, 190, 14, 20, 245, 61, 72, 129, 110, 190, 240, 22, 127, 62, 155, 236, 171, 190, 181, 142, 108, 59, 244, 204, 27, 62, 125, 67, 56, 62, 201, 99, 162, 189, 219, 185, 164, 62, 168, 26, 246, 189, 52, 124, 191, 190, 254, 39, 117, 61, 4, 147, 159, 62, 228, 83, 136, 62, 130, 150, 183, 62, 91, 206, 182, 189, 162, 179, 16, 189, 109, 104, 56, 62, 172, 171, 16, 61, 52, 153, 30, 62, 152, 27, 100, 62, 137, 166, 158, 190, 3, 57, 156, 62, 140, 37, 68, 190, 195, 195, 40, 62, 129, 12, 16, 62, 12, 9, 135, 62, 116, 187, 55, 189, 144, 177, 241, 62, 222, 7, 225, 189, 93, 221, 121, 190, 201, 154, 167, 190, 31, 96, 138, 61, 167, 32, 235, 190, 227, 208, 65, 62, 65, 108, 189, 190, 121, 183, 232, 189, 109, 234, 172, 62, 100, 161, 61, 62, 114, 222, 1, 192, 108, 124, 194, 61, 0, 188, 214, 190, 242, 210, 122, 190, 208, 126, 135, 62, 199, 177, 69, 62, 99, 240, 32, 188, 48, 112, 210, 62, 79, 106, 1, 190, 5, 137, 155, 191, 103, 244, 118, 62, 103, 89, 156, 62, 241, 234, 131, 61, 193, 44, 102, 190, 167, 172, 208, 61, 80, 103, 49, 191, 188, 204, 2, 62, 180, 105, 230, 60, 81, 125, 194, 187, 130, 110, 33, 191, 42, 85, 27, 62, 71, 247, 135, 61, 97, 2, 136, 187, 1, 207, 13, 190, 145, 163, 35, 60, 172, 206, 161, 189, 193, 159, 47, 190, 6, 164, 117, 61, 206, 167, 0, 61, 233, 29, 185, 189, 30, 82, 178, 60, 238, 206, 185, 61, 78, 167, 152, 61, 158, 80, 221, 61, 153, 84, 65, 189, 90, 2, 46, 190, 154, 242, 81, 190, 68, 107, 255, 189, 167, 218, 24, 190, 11, 113, 211, 61, 12, 42, 29, 190, 222, 157, 184, 61, 37, 0, 132, 61, 244, 240, 14, 62, 102, 79, 9, 190, 160, 45, 111, 189, 44, 219, 70, 61, 42, 113, 45, 190, 153, 132, 187, 61, 203, 234, 200, 189, 41, 94, 184, 61, 147, 44, 216, 61, 102, 232, 183, 189, 43, 192, 133, 60, 55, 62, 15, 190, 38, 39, 80, 61, 2, 253, 0, 62, 168, 228, 58, 189, 66, 244, 189, 189, 137, 246, 26, 190, 228, 85, 251, 189, 207, 196, 167, 189, 15, 3, 252, 60, 230, 76, 177, 59, 90, 22, 22, 62, 189, 102, 37, 190, 116, 219, 252, 61, 186, 174, 51, 190, 187, 17, 61, 190, 76, 237, 149, 189, 180, 135, 42, 61, 162, 93, 227, 189, 32, 91, 236, 189, 28, 17, 24, 62, 97, 93, 236, 61, 152, 246, 136, 61, 191, 199, 204, 61, 38, 121, 242, 60, 205, 10, 140, 60, 90, 88, 252, 189, 40, 124, 243, 189, 94, 215, 160, 61, 137, 209, 184, 189, 45, 164, 218, 189, 105, 46, 196, 187, 188, 9, 190, 189, 217, 57, 207, 190, 60, 248, 24, 63, 172, 170, 162, 62, 227, 36, 150, 62, 165, 115, 77, 63, 72, 200, 171, 190, 32, 5, 111, 191, 129, 90, 13, 60, 249, 33, 153, 62, 40, 85, 216, 189, 116, 174, 86, 62, 143, 154, 42, 190, 55, 115, 129, 61, 174, 216, 121, 62, 16, 226, 101, 191, 254, 125, 4, 190, 149, 182, 177, 188, 106, 199, 244, 189, 101, 66, 215, 59, 111, 252, 176, 60, 149, 207, 102, 61, 185, 195, 157, 61, 50, 31, 80, 191, 77, 196, 116, 191, 125, 209, 196, 190, 212, 142, 133, 188, 234, 12, 159, 191, 154, 56, 181, 62, 158, 180, 211, 62, 129, 176, 166, 190, 81, 54, 227, 61, 154, 110, 20, 191, 34, 223, 189, 190, 204, 5, 9, 190, 177, 27, 145, 190, 64, 206, 10, 62, 89, 21, 80, 61, 211, 180, 19, 62, 219, 59, 238, 189, 93, 41, 133, 62, 86, 232, 182, 189, 217, 215, 164, 190, 123, 2, 28, 190, 184, 174, 139, 62, 142, 225, 239, 189, 27, 247, 191, 190, 96, 182, 67, 62, 159, 53, 139, 62, 52, 219, 242, 61, 60, 44, 122, 62, 22, 137, 194, 188, 74, 134, 32, 62, 78, 162, 237, 61, 29, 79, 103, 188, 50, 16, 30, 62, 23, 102, 176, 188, 191, 128, 56, 190, 101, 137, 143, 189, 89, 137, 10, 191, 125, 108, 31, 61, 6, 63, 78, 62, 221, 109, 215, 189, 50, 132, 252, 190, 84, 119, 235, 190, 13, 255, 152, 190, 115, 150, 195, 62, 173, 69, 228, 61, 149, 238, 196, 188, 205, 210, 36, 62, 158, 52, 52, 189, 137, 222, 19, 63, 48, 173, 183, 62, 238, 19, 137, 62, 190, 79, 137, 188, 213, 103, 231, 61, 168, 229, 22, 60, 187, 82, 201, 62, 105, 193, 202, 62, 224, 145, 30, 190, 200, 35, 45, 190, 27, 193, 51, 190, 199, 213, 99, 190, 218, 137, 114, 62, 53, 205, 227, 62, 73, 230, 152, 189, 24, 168, 42, 190, 148, 132, 133, 190, 232, 1, 46, 191, 119, 229, 49, 190, 71, 165, 250, 189, 150, 224, 213, 190, 194, 178, 234, 61, 210, 88, 207, 190, 202, 158, 78, 190, 54, 0, 152, 189, 3, 134, 145, 190, 72, 117, 30, 62, 233, 242, 149, 190, 177, 73, 10, 191, 138, 78, 37, 59, 71, 177, 23, 191, 201, 107, 100, 61, 229, 168, 82, 191, 158, 117, 240, 188, 25, 127, 234, 188, 127, 115, 255, 61, 58, 141, 244, 191, 20, 153, 244, 62, 64, 13, 32, 191, 172, 195, 24, 190, 6, 99, 54, 62, 42, 233, 93, 62, 175, 162, 230, 59, 55, 117, 173, 62, 203, 202, 210, 190, 71, 26, 220, 191, 207, 199, 254, 62, 99, 198, 229, 62, 215, 159, 167, 62, 192, 159, 206, 62, 70, 170, 192, 62, 51, 189, 33, 190, 218, 143, 104, 189, 32, 110, 2, 189, 85, 97, 143, 62, 64, 115, 224, 189, 179, 129, 12, 61, 11, 97, 170, 191, 2, 130, 38, 62, 220, 233, 92, 62, 42, 105, 12, 62, 253, 252, 88, 61, 33, 55, 116, 60, 118, 180, 120, 62, 227, 215, 179, 189, 121, 44, 170, 62, 72, 242, 164, 61, 203, 15, 149, 60, 128, 112, 46, 190, 106, 93, 153, 190, 77, 30, 23, 190, 56, 45, 176, 61, 225, 36, 90, 190, 130, 60, 60, 62, 157, 224, 212, 189, 162, 116, 20, 190, 162, 75, 42, 62, 42, 65, 45, 190, 118, 4, 110, 61, 8, 143, 19, 189, 197, 175, 55, 190, 23, 108, 37, 61, 2, 233, 39, 187, 99, 243, 143, 188, 174, 189, 209, 62, 214, 208, 165, 62, 253, 173, 30, 62, 36, 227, 21, 190, 21, 45, 149, 61, 112, 220, 67, 191, 3, 101, 16, 186, 83, 19, 110, 61, 50, 151, 38, 189, 195, 81, 118, 62, 161, 61, 26, 62, 128, 24, 131, 190, 58, 181, 191, 190, 21, 130, 79, 62, 8, 145, 208, 191, 146, 111, 50, 187, 22, 23, 59, 189, 207, 170, 96, 62, 86, 92, 221, 61, 125, 114, 193, 189, 113, 23, 59, 62, 8, 213, 231, 61, 244, 222, 117, 62, 119, 45, 61, 62, 95, 159, 62, 190, 98, 129, 112, 62, 72, 205, 55, 62, 15, 33, 44, 190, 151, 142, 68, 62, 246, 157, 195, 62, 218, 68, 152, 190, 9, 179, 19, 189, 95, 53, 91, 190, 194, 78, 18, 190, 155, 251, 1, 62, 118, 233, 85, 62, 184, 224, 64, 190, 105, 46, 191, 61, 145, 229, 114, 61, 184, 232, 57, 190, 85, 65, 210, 189, 21, 11, 32, 189, 198, 113, 128, 189, 191, 83, 19, 189, 86, 17, 166, 60, 237, 206, 191, 60, 80, 183, 163, 189, 168, 157, 194, 61, 84, 129, 98, 189, 160, 115, 101, 189, 126, 191, 17, 61, 244, 134, 161, 189, 41, 155, 50, 61, 222, 103, 251, 61, 72, 159, 168, 61, 172, 231, 88, 188, 173, 25, 254, 188, 184, 200, 51, 190, 244, 31, 226, 188, 112, 212, 123, 189, 61, 90, 206, 188, 237, 37, 210, 61, 217, 180, 223, 61, 117, 31, 241, 61, 33, 166, 247, 189, 35, 91, 230, 60, 194, 6, 41, 62, 39, 23, 169, 58, 160, 11, 60, 190, 37, 44, 86, 191, 49, 28, 186, 189, 48, 199, 135, 62, 100, 148, 6, 190, 241, 106, 165, 191, 156, 65, 79, 62, 219, 89, 117, 61, 125, 156, 253, 62, 105, 194, 192, 190, 124, 113, 18, 63, 135, 244, 31, 190, 58, 216, 221, 190, 64, 49, 22, 191, 236, 159, 48, 189, 166, 109, 158, 62, 121, 62, 100, 190, 17, 180, 32, 190, 29, 63, 56, 191, 187, 50, 49, 187, 10, 230, 131, 62, 113, 111, 174, 189, 61, 255, 3, 62, 179, 178, 220, 189, 28, 236, 85, 189, 129, 1, 118, 191, 80, 24, 129, 62, 68, 92, 4, 191, 165, 152, 127, 62, 217, 228, 59, 62, 108, 242, 23, 191, 110, 105, 186, 190, 177, 166, 45, 190, 80, 4, 34, 60, 23, 216, 17, 190, 172, 44, 21, 62, 98, 169, 26, 190, 235, 81, 168, 189, 159, 7, 240, 188, 38, 148, 177, 188, 48, 225, 3, 190, 183, 240, 33, 190, 40, 252, 206, 58, 36, 96, 249, 189, 178, 101, 52, 62, 175, 110, 8, 190, 171, 224, 105, 59, 166, 106, 175, 61, 177, 219, 0, 190, 147, 81, 27, 190, 60, 67, 242, 187, 69, 8, 74, 188, 184, 114, 41, 189, 92, 112, 131, 188, 91, 169, 65, 61, 142, 81, 228, 189, 5, 32, 217, 61, 133, 247, 47, 189, 159, 144, 171, 189, 41, 184, 215, 189, 81, 82, 140, 189, 117, 163, 146, 189, 244, 105, 19, 190, 17, 160, 129, 189, 205, 221, 135, 61, 38, 155, 26, 191, 85, 104, 144, 190, 146, 21, 113, 62, 88, 60, 114, 62, 47, 175, 73, 190, 93, 230, 154, 62, 245, 235, 3, 190, 237, 220, 44, 63, 229, 126, 141, 188, 245, 61, 185, 62, 217, 153, 136, 190, 17, 167, 133, 190, 177, 235, 89, 191, 11, 162, 213, 62, 96, 37, 59, 61, 211, 161, 102, 190, 119, 25, 145, 190, 118, 137, 29, 191, 207, 148, 193, 190, 55, 118, 99, 62, 185, 116, 167, 189, 0, 74, 92, 190, 173, 211, 244, 59, 28, 224, 191, 189, 140, 211, 27, 191, 176, 97, 146, 189, 121, 40, 189, 189, 46, 154, 253, 189, 117, 82, 178, 60, 137, 17, 192, 189, 184, 116, 129, 190, 135, 170, 185, 61, 165, 154, 141, 190, 190, 87, 171, 61, 208, 234, 207, 191, 63, 39, 138, 188, 11, 29, 155, 61, 103, 32, 132, 190, 124, 235, 214, 61, 252, 210, 241, 188, 8, 160, 99, 59, 103, 31, 36, 62, 28, 211, 50, 60, 65, 116, 102, 61, 162, 85, 52, 189, 225, 192, 105, 191, 193, 26, 13, 61, 74, 254, 141, 62, 48, 106, 71, 62, 92, 80, 78, 61, 72, 108, 205, 190, 157, 196, 153, 62, 121, 20, 214, 190, 245, 184, 226, 191, 69, 244, 246, 62, 212, 219, 58, 190, 212, 90, 112, 60, 161, 245, 198, 60, 37, 115, 60, 187, 200, 82, 79, 62, 89, 91, 211, 188, 122, 80, 40, 62, 76, 161, 12, 190, 64, 131, 76, 62, 184, 40, 255, 62, 223, 169, 183, 188, 19, 75, 29, 188, 32, 191, 155, 190, 157, 186, 31, 190, 28, 234, 135, 190, 193, 251, 158, 62, 255, 127, 191, 190, 141, 213, 132, 189, 36, 93, 179, 62, 108, 181, 167, 62, 28, 101, 109, 191, 73, 96, 215, 188, 99, 157, 137, 189, 247, 248, 71, 190, 118, 83, 157, 62, 5, 57, 125, 62, 129, 96, 220, 61, 118, 64, 109, 62, 112, 165, 30, 190, 16, 119, 147, 191, 247, 87, 35, 62, 104, 190, 16, 62, 28, 39, 146, 62, 147, 32, 184, 190, 36, 174, 7, 188, 26, 155, 36, 190, 127, 106, 148, 62, 16, 231, 205, 188, 223, 16, 4, 62, 200, 111, 30, 190, 250, 200, 83, 62, 4, 186, 28, 191, 144, 68, 197, 188, 37, 132, 161, 61, 222, 159, 105, 190, 65, 149, 14, 191, 176, 2, 22, 62, 152, 191, 97, 62, 20, 133, 198, 61, 52, 38, 8, 190, 150, 4, 178, 62, 41, 236, 7, 190, 66, 96, 24, 190, 91, 92, 223, 190, 131, 27, 131, 61, 148, 178, 153, 62, 14, 196, 210, 61, 8, 28, 109, 189, 183, 114, 53, 191, 185, 100, 226, 189, 211, 110, 248, 60, 40, 67, 209, 190, 243, 197, 249, 59, 246, 243, 113, 62, 246, 241, 232, 61, 198, 57, 208, 191, 49, 56, 81, 62, 184, 117, 222, 190, 16, 255, 16, 62, 78, 102, 36, 61, 25, 210, 141, 190, 202, 222, 134, 190, 96, 173, 2, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 65, 195, 189, 106, 205, 140, 190, 162, 54, 164, 60, 247, 241, 100, 190, 106, 161, 82, 190, 178, 136, 149, 62, 242, 11, 149, 190, 244, 160, 17, 190, 172, 6, 180, 61, 21, 206, 125, 188, 189, 100, 179, 61, 218, 143, 189, 189, 147, 147, 136, 190, 154, 86, 149, 188, 7, 185, 80, 189, 229, 22, 144, 60, 12, 244, 66, 62, 166, 11, 220, 60, 221, 233, 109, 189, 76, 234, 64, 61, 24, 235, 81, 189, 80, 129, 131, 62, 134, 36, 62, 61, 126, 21, 139, 62, 205, 225, 235, 189, 69, 141, 30, 190, 54, 14, 232, 189, 79, 206, 158, 189, 170, 8, 220, 189, 92, 201, 59, 62, 166, 124, 54, 62, 247, 52, 103, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 240, 54, 191, 2, 17, 181, 62, 80, 98, 165, 62, 245, 239, 16, 63, 38, 100, 205, 62, 47, 152, 30, 62, 226, 44, 160, 190, 84, 247, 18, 190, 240, 191, 231, 190, 117, 183, 149, 191, 31, 60, 213, 190, 16, 186, 235, 187, 7, 118, 53, 191, 110, 55, 88, 61, 244, 4, 43, 191, 144, 87, 126, 62, 170, 129, 5, 63, 102, 128, 179, 189, 225, 219, 30, 61, 190, 217, 140, 191, 51, 23, 70, 190, 231, 126, 21, 191, 195, 251, 162, 63, 242, 141, 76, 61, 223, 227, 9, 191, 241, 235, 33, 190, 206, 169, 98, 191, 183, 130, 250, 60, 28, 16, 96, 191, 31, 237, 156, 62, 142, 19, 178, 62, 228, 253, 153, 190, 134, 208, 145, 61, 191, 193, 205, 60, 22, 151, 29, 62, 147, 177, 42, 63, 224, 149, 223, 60, 206, 35, 64, 190, 121, 115, 34, 62, 208, 102, 249, 60, 146, 246, 128, 188, 7, 241, 135, 185, 63, 171, 244, 61, 46, 97, 184, 189, 101, 182, 40, 190, 221, 150, 106, 61, 129, 28, 203, 190, 78, 30, 198, 189, 204, 159, 166, 188, 141, 146, 12, 62, 235, 3, 202, 61, 81, 162, 248, 62, 64, 173, 98, 188, 145, 241, 207, 190, 225, 34, 240, 62, 250, 60, 176, 190, 0, 96, 136, 188, 20, 139, 0, 190, 173, 141, 126, 190, 96, 240, 15, 61, 201, 255, 39, 63, 215, 74, 185, 189, 183, 167, 140, 189, 231, 123, 104, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 107, 149, 62, 241, 111, 210, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {76, 225, 231, 62, 37, 50, 64, 189, 59, 6, 125, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {102, 98, 115, 190, 55, 119, 188, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0033/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}