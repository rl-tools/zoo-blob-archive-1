// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 79, 40, 63, 81, 61, 234, 62, 107, 144, 20, 62, 121, 77, 156, 190, 177, 132, 176, 62, 246, 170, 5, 191, 134, 74, 135, 189, 216, 210, 105, 191, 104, 146, 155, 62, 5, 230, 208, 190, 71, 42, 179, 190, 222, 207, 33, 191, 5, 199, 89, 191, 97, 78, 50, 191, 227, 253, 223, 189, 114, 99, 103, 191, 195, 94, 108, 191, 224, 147, 24, 62, 135, 104, 9, 63, 95, 11, 40, 191, 92, 207, 19, 190, 113, 105, 135, 63, 216, 71, 133, 63, 91, 247, 14, 63, 152, 187, 185, 190, 228, 131, 87, 191, 198, 33, 4, 190, 199, 22, 142, 63, 23, 254, 126, 62, 104, 82, 35, 61, 247, 66, 133, 62, 136, 71, 199, 188, 0, 229, 98, 60, 35, 113, 190, 190, 106, 127, 210, 191, 124, 158, 248, 190, 99, 176, 6, 63, 78, 9, 181, 191, 112, 36, 138, 190, 6, 100, 25, 189, 174, 134, 140, 187, 253, 126, 218, 62, 170, 142, 119, 188, 229, 2, 112, 62, 235, 53, 14, 191, 23, 108, 131, 190, 243, 237, 183, 63, 28, 140, 2, 63, 235, 133, 39, 63, 107, 177, 142, 191, 6, 226, 101, 190, 202, 0, 35, 63, 114, 112, 185, 191, 154, 90, 189, 190, 96, 51, 166, 190, 210, 176, 114, 189, 99, 154, 74, 63, 142, 94, 9, 63, 193, 216, 158, 62, 148, 71, 112, 190, 104, 31, 61, 191, 128, 253, 47, 191, 219, 255, 113, 190, 211, 148, 164, 62, 221, 68, 132, 191, 72, 213, 20, 63, 6, 107, 194, 190, 167, 56, 99, 63, 70, 248, 142, 190, 72, 125, 170, 61, 209, 223, 141, 63, 73, 227, 32, 63, 179, 214, 58, 63, 111, 57, 10, 191, 58, 78, 194, 190, 90, 102, 163, 190, 59, 195, 78, 63, 29, 65, 6, 191, 170, 146, 62, 61, 165, 208, 74, 191, 35, 47, 125, 190, 163, 92, 82, 63, 83, 101, 127, 62, 99, 68, 82, 190, 23, 171, 160, 61, 186, 209, 145, 190, 121, 207, 187, 61, 93, 8, 65, 191, 114, 122, 2, 191, 78, 165, 126, 62, 86, 130, 240, 189, 165, 231, 128, 191, 220, 176, 206, 190, 40, 114, 231, 190, 208, 64, 38, 62, 93, 178, 201, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 247, 50, 191, 43, 82, 156, 190, 42, 82, 193, 61, 55, 228, 61, 191, 14, 108, 41, 63, 39, 100, 178, 190, 131, 235, 240, 61, 83, 181, 251, 190, 144, 193, 49, 63, 173, 53, 234, 62, 123, 185, 187, 190, 246, 241, 231, 188, 0, 60, 124, 189, 238, 145, 189, 190, 181, 131, 96, 189, 202, 197, 28, 62, 53, 220, 80, 189, 42, 125, 40, 190, 220, 200, 206, 190, 166, 191, 190, 62, 77, 155, 41, 191, 145, 172, 62, 190, 64, 37, 189, 62, 99, 149, 23, 62, 65, 44, 137, 191, 36, 17, 74, 62, 251, 174, 128, 190, 13, 63, 65, 191, 163, 75, 186, 62, 250, 73, 107, 62, 110, 169, 16, 191, 248, 237, 32, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 134, 27, 191, 142, 99, 35, 62, 220, 22, 129, 189, 52, 98, 4, 62, 123, 71, 119, 191, 199, 103, 18, 190, 18, 118, 165, 61, 82, 106, 1, 63, 159, 0, 153, 190, 194, 178, 1, 63, 67, 34, 60, 189, 110, 164, 140, 190, 116, 27, 61, 191, 135, 145, 104, 62, 68, 87, 97, 189, 222, 120, 43, 61, 185, 186, 88, 190, 67, 87, 54, 191, 200, 98, 48, 189, 5, 27, 94, 188, 97, 147, 220, 190, 16, 183, 167, 62, 91, 34, 68, 62, 194, 148, 45, 61, 84, 231, 99, 191, 9, 33, 181, 62, 77, 175, 200, 190, 180, 46, 48, 189, 215, 239, 215, 189, 196, 212, 251, 189, 51, 137, 2, 191, 155, 161, 40, 190, 164, 254, 251, 189, 114, 247, 205, 61, 97, 38, 12, 63, 81, 115, 180, 61, 105, 147, 34, 62, 24, 21, 184, 63, 192, 166, 17, 191, 83, 134, 253, 61, 201, 141, 184, 61, 80, 198, 4, 191, 99, 12, 32, 190, 244, 210, 228, 61, 233, 157, 3, 191, 32, 145, 80, 190, 78, 218, 1, 61, 45, 106, 153, 191, 57, 22, 155, 190, 132, 187, 130, 190, 246, 40, 41, 191, 138, 117, 189, 189, 21, 244, 48, 62, 31, 149, 234, 189, 58, 10, 20, 190, 73, 241, 170, 191, 97, 99, 223, 189, 239, 221, 65, 61, 192, 45, 30, 190, 121, 229, 176, 60, 201, 56, 7, 62, 98, 149, 140, 63, 213, 39, 45, 190, 194, 70, 29, 62, 130, 225, 23, 63, 50, 202, 38, 62, 169, 249, 134, 62, 139, 159, 85, 62, 63, 195, 194, 190, 83, 22, 58, 59, 62, 39, 139, 62, 126, 160, 240, 190, 32, 187, 229, 189, 194, 120, 192, 62, 232, 60, 239, 61, 165, 205, 215, 190, 245, 35, 51, 62, 245, 66, 149, 62, 134, 245, 242, 189, 53, 206, 109, 189, 145, 9, 87, 62, 217, 252, 118, 62, 182, 121, 78, 62, 197, 213, 6, 61, 55, 118, 90, 191, 81, 231, 97, 189, 227, 226, 144, 190, 100, 102, 88, 190, 129, 119, 26, 63, 189, 171, 1, 190, 240, 50, 16, 62, 249, 162, 184, 62, 165, 223, 174, 190, 245, 248, 190, 60, 233, 93, 11, 62, 95, 46, 50, 189, 169, 234, 52, 63, 164, 193, 20, 190, 38, 73, 74, 62, 65, 49, 11, 190, 17, 233, 167, 191, 104, 95, 161, 189, 90, 179, 28, 189, 155, 69, 164, 62, 202, 196, 250, 190, 184, 17, 92, 62, 161, 67, 158, 62, 244, 203, 0, 190, 229, 106, 192, 190, 97, 41, 140, 62, 80, 158, 8, 62, 157, 65, 32, 188, 136, 53, 184, 190, 103, 101, 130, 190, 249, 136, 1, 62, 55, 173, 153, 62, 196, 198, 169, 188, 65, 218, 149, 62, 81, 73, 230, 190, 128, 150, 20, 190, 228, 172, 2, 61, 99, 48, 226, 61, 34, 240, 132, 61, 154, 85, 211, 189, 175, 228, 222, 188, 182, 132, 18, 191, 77, 176, 60, 62, 11, 62, 255, 188, 153, 193, 15, 63, 161, 225, 149, 189, 157, 216, 84, 62, 91, 141, 114, 62, 72, 5, 203, 190, 96, 177, 17, 190, 197, 41, 161, 190, 185, 127, 63, 61, 73, 243, 5, 191, 126, 110, 54, 58, 178, 211, 128, 62, 238, 138, 133, 188, 156, 23, 200, 190, 183, 124, 103, 190, 45, 148, 73, 62, 15, 233, 3, 60, 155, 4, 242, 189, 73, 24, 29, 190, 192, 162, 172, 190, 27, 208, 57, 62, 182, 69, 186, 190, 73, 161, 7, 190, 11, 150, 32, 62, 127, 136, 82, 190, 191, 248, 194, 62, 117, 26, 174, 61, 56, 102, 154, 188, 253, 214, 70, 61, 26, 189, 243, 190, 252, 153, 9, 191, 44, 202, 32, 190, 164, 171, 179, 61, 224, 137, 69, 63, 98, 143, 6, 60, 11, 201, 65, 189, 199, 66, 24, 189, 197, 25, 8, 62, 54, 200, 134, 190, 16, 247, 54, 62, 83, 198, 76, 190, 236, 121, 28, 62, 71, 94, 102, 62, 171, 65, 43, 62, 132, 144, 45, 190, 109, 137, 14, 189, 114, 160, 53, 189, 24, 1, 199, 61, 164, 31, 9, 62, 88, 59, 66, 62, 167, 31, 55, 61, 158, 124, 129, 62, 196, 222, 73, 62, 40, 148, 12, 191, 144, 161, 171, 62, 109, 69, 145, 62, 55, 73, 59, 61, 251, 179, 214, 61, 230, 231, 96, 189, 100, 23, 95, 189, 9, 152, 225, 62, 94, 132, 147, 61, 87, 32, 160, 62, 78, 112, 28, 189, 71, 228, 135, 62, 222, 150, 51, 62, 30, 51, 234, 188, 100, 21, 61, 61, 127, 74, 35, 188, 193, 70, 74, 189, 46, 149, 99, 189, 196, 105, 239, 189, 168, 218, 204, 189, 162, 150, 38, 190, 157, 9, 19, 191, 192, 242, 107, 61, 52, 0, 153, 189, 136, 151, 103, 62, 27, 20, 234, 61, 144, 253, 131, 59, 190, 156, 116, 188, 39, 211, 246, 61, 239, 58, 212, 61, 240, 207, 25, 190, 205, 159, 10, 190, 167, 89, 156, 62, 27, 30, 131, 61, 150, 46, 166, 190, 158, 11, 222, 59, 149, 32, 44, 62, 86, 32, 65, 189, 148, 227, 87, 61, 214, 238, 196, 189, 33, 51, 237, 190, 24, 40, 115, 190, 189, 153, 255, 61, 218, 246, 95, 190, 119, 128, 239, 190, 139, 143, 93, 61, 95, 141, 28, 189, 202, 91, 12, 62, 49, 218, 161, 60, 184, 142, 203, 189, 66, 40, 226, 188, 158, 143, 154, 62, 243, 100, 11, 62, 27, 250, 111, 187, 114, 190, 134, 61, 9, 216, 25, 62, 121, 115, 233, 62, 195, 169, 196, 189, 191, 12, 155, 188, 220, 238, 171, 190, 46, 61, 195, 60, 111, 24, 216, 62, 21, 84, 8, 190, 104, 96, 25, 190, 227, 247, 33, 190, 254, 194, 146, 61, 34, 26, 222, 190, 117, 106, 198, 189, 96, 42, 157, 62, 217, 152, 65, 189, 174, 46, 237, 62, 15, 94, 67, 62, 64, 37, 137, 189, 254, 111, 218, 189, 189, 158, 164, 62, 13, 94, 65, 189, 237, 155, 238, 190, 84, 29, 154, 61, 29, 250, 37, 62, 59, 59, 179, 61, 207, 226, 206, 60, 18, 5, 204, 190, 235, 2, 197, 190, 69, 117, 216, 190, 236, 107, 22, 190, 148, 223, 158, 190, 177, 23, 14, 190, 105, 56, 43, 189, 85, 202, 13, 190, 249, 6, 77, 62, 151, 43, 57, 62, 230, 19, 170, 190, 141, 135, 209, 190, 174, 225, 175, 190, 51, 32, 187, 190, 62, 2, 22, 62, 239, 166, 191, 62, 0, 73, 200, 190, 206, 37, 109, 62, 220, 193, 83, 190, 98, 201, 33, 191, 183, 29, 9, 189, 99, 22, 43, 190, 223, 212, 73, 190, 155, 89, 193, 190, 59, 200, 122, 191, 182, 75, 30, 61, 24, 242, 212, 187, 210, 239, 96, 188, 168, 146, 13, 190, 221, 156, 20, 62, 211, 30, 135, 62, 14, 40, 1, 61, 243, 164, 45, 191, 164, 22, 44, 189, 137, 223, 42, 62, 41, 242, 137, 61, 252, 97, 141, 189, 252, 231, 113, 190, 133, 204, 87, 62, 110, 58, 135, 190, 75, 139, 16, 61, 142, 120, 82, 62, 198, 65, 163, 191, 191, 79, 247, 190, 184, 217, 224, 190, 5, 180, 132, 191, 127, 191, 75, 61, 230, 157, 232, 59, 246, 37, 118, 191, 143, 38, 172, 62, 245, 70, 60, 191, 169, 114, 136, 191, 195, 60, 63, 190, 225, 86, 207, 61, 13, 163, 13, 191, 122, 177, 109, 191, 18, 175, 30, 191, 200, 37, 41, 190, 2, 194, 154, 62, 9, 52, 40, 190, 125, 100, 63, 188, 46, 71, 93, 63, 96, 172, 134, 188, 120, 107, 140, 62, 211, 199, 103, 63, 125, 106, 141, 189, 36, 248, 164, 191, 25, 171, 94, 62, 120, 30, 236, 189, 234, 198, 183, 189, 245, 7, 28, 62, 240, 169, 1, 62, 117, 195, 222, 62, 139, 249, 42, 62, 193, 220, 75, 191, 104, 71, 109, 61, 128, 70, 44, 62, 122, 142, 149, 190, 13, 180, 214, 61, 8, 185, 124, 62, 18, 101, 17, 190, 226, 72, 21, 190, 212, 234, 78, 191, 170, 194, 72, 190, 179, 228, 9, 59, 105, 110, 189, 189, 25, 65, 135, 190, 226, 28, 154, 62, 150, 8, 166, 61, 180, 61, 2, 190, 126, 243, 72, 62, 65, 154, 249, 61, 176, 24, 236, 189, 70, 116, 242, 60, 139, 44, 218, 189, 163, 160, 25, 60, 75, 170, 79, 189, 197, 209, 23, 190, 54, 21, 225, 189, 21, 213, 103, 61, 51, 183, 55, 61, 65, 111, 79, 61, 92, 16, 192, 61, 130, 53, 12, 190, 99, 247, 76, 61, 119, 29, 156, 189, 39, 70, 200, 188, 182, 60, 196, 60, 182, 21, 175, 188, 45, 126, 209, 189, 212, 84, 178, 189, 211, 234, 77, 189, 53, 52, 43, 190, 197, 13, 39, 190, 87, 209, 225, 60, 68, 108, 242, 189, 37, 98, 21, 60, 83, 219, 0, 62, 92, 164, 234, 61, 115, 187, 98, 190, 6, 122, 88, 188, 96, 204, 204, 189, 199, 217, 52, 190, 44, 110, 85, 191, 197, 0, 48, 189, 173, 118, 161, 189, 158, 88, 252, 190, 118, 123, 148, 191, 209, 126, 88, 62, 253, 184, 142, 62, 199, 132, 2, 63, 239, 158, 182, 60, 249, 97, 179, 62, 63, 11, 131, 187, 104, 55, 95, 190, 199, 151, 3, 191, 238, 89, 125, 62, 14, 147, 77, 62, 174, 230, 133, 61, 250, 102, 24, 190, 138, 74, 138, 190, 252, 60, 47, 189, 252, 107, 184, 60, 20, 79, 49, 190, 4, 103, 234, 187, 87, 245, 153, 189, 20, 244, 168, 61, 2, 95, 241, 61, 183, 127, 86, 62, 40, 151, 168, 61, 210, 245, 52, 189, 230, 161, 192, 61, 138, 174, 115, 190, 0, 188, 241, 190, 101, 150, 158, 190, 57, 34, 100, 61, 95, 204, 19, 190, 89, 197, 233, 61, 68, 217, 178, 189, 41, 203, 61, 190, 35, 235, 254, 61, 234, 213, 43, 60, 180, 129, 97, 189, 11, 230, 213, 189, 235, 238, 39, 62, 72, 179, 173, 61, 13, 111, 168, 189, 251, 40, 203, 189, 62, 39, 222, 189, 221, 10, 22, 62, 108, 64, 47, 190, 141, 240, 148, 61, 223, 137, 154, 60, 152, 36, 23, 62, 127, 220, 48, 190, 21, 135, 34, 61, 241, 64, 14, 190, 198, 154, 41, 190, 120, 7, 9, 61, 109, 179, 60, 189, 126, 198, 136, 189, 88, 90, 133, 61, 193, 10, 126, 60, 107, 190, 35, 190, 204, 184, 243, 189, 231, 206, 174, 61, 5, 232, 33, 60, 41, 64, 15, 191, 209, 101, 44, 62, 112, 230, 247, 61, 229, 132, 98, 189, 216, 184, 142, 191, 171, 19, 53, 62, 76, 62, 49, 189, 224, 50, 146, 62, 147, 12, 183, 189, 144, 168, 182, 62, 42, 176, 73, 189, 169, 180, 179, 190, 92, 84, 42, 191, 57, 61, 59, 61, 203, 181, 109, 62, 3, 81, 19, 61, 168, 5, 48, 190, 214, 60, 189, 190, 78, 39, 29, 190, 27, 7, 250, 61, 10, 163, 133, 190, 60, 63, 164, 62, 16, 255, 81, 61, 145, 230, 146, 60, 8, 80, 33, 191, 45, 210, 59, 62, 15, 172, 139, 190, 216, 170, 88, 62, 150, 127, 105, 62, 179, 149, 192, 190, 39, 39, 131, 190, 104, 150, 155, 190, 48, 142, 60, 63, 237, 35, 92, 190, 48, 163, 197, 189, 15, 207, 203, 190, 136, 66, 173, 61, 104, 7, 106, 190, 195, 182, 100, 62, 206, 103, 159, 190, 161, 39, 12, 189, 252, 244, 11, 62, 125, 67, 56, 62, 12, 41, 96, 190, 234, 133, 135, 62, 147, 194, 225, 189, 236, 121, 170, 190, 31, 98, 135, 60, 242, 114, 138, 62, 204, 22, 72, 62, 229, 181, 182, 62, 184, 16, 227, 189, 51, 173, 204, 189, 96, 74, 78, 62, 215, 62, 255, 188, 28, 27, 1, 62, 92, 96, 133, 62, 44, 79, 154, 190, 55, 157, 82, 62, 113, 156, 113, 190, 89, 98, 35, 62, 68, 210, 14, 62, 51, 38, 109, 62, 8, 222, 24, 190, 7, 10, 19, 63, 4, 241, 198, 189, 36, 51, 63, 190, 141, 85, 171, 190, 46, 9, 146, 61, 54, 188, 229, 190, 40, 178, 86, 62, 239, 210, 176, 190, 5, 208, 188, 189, 210, 29, 180, 62, 100, 161, 61, 62, 117, 102, 6, 192, 38, 103, 236, 61, 119, 201, 201, 190, 19, 233, 111, 190, 151, 55, 93, 62, 123, 83, 92, 62, 17, 94, 121, 58, 186, 13, 216, 62, 188, 198, 246, 189, 130, 106, 154, 191, 248, 23, 154, 62, 83, 153, 128, 62, 235, 52, 32, 61, 181, 29, 25, 190, 137, 72, 191, 61, 203, 153, 124, 191, 172, 17, 159, 61, 196, 221, 135, 61, 50, 119, 44, 59, 108, 139, 45, 191, 208, 159, 193, 61, 71, 247, 135, 61, 97, 2, 136, 187, 1, 207, 13, 190, 145, 163, 35, 60, 172, 206, 161, 189, 193, 159, 47, 190, 6, 164, 117, 61, 206, 167, 0, 61, 233, 29, 185, 189, 30, 82, 178, 60, 238, 206, 185, 61, 78, 167, 152, 61, 158, 80, 221, 61, 153, 84, 65, 189, 90, 2, 46, 190, 154, 242, 81, 190, 68, 107, 255, 189, 167, 218, 24, 190, 11, 113, 211, 61, 12, 42, 29, 190, 222, 157, 184, 61, 37, 0, 132, 61, 244, 240, 14, 62, 102, 79, 9, 190, 160, 45, 111, 189, 44, 219, 70, 61, 42, 113, 45, 190, 153, 132, 187, 61, 203, 234, 200, 189, 41, 94, 184, 61, 147, 44, 216, 61, 102, 232, 183, 189, 43, 192, 133, 60, 55, 62, 15, 190, 38, 39, 80, 61, 2, 253, 0, 62, 168, 228, 58, 189, 66, 244, 189, 189, 137, 246, 26, 190, 228, 85, 251, 189, 207, 196, 167, 189, 15, 3, 252, 60, 230, 76, 177, 59, 90, 22, 22, 62, 189, 102, 37, 190, 116, 219, 252, 61, 186, 174, 51, 190, 187, 17, 61, 190, 76, 237, 149, 189, 180, 135, 42, 61, 162, 93, 227, 189, 32, 91, 236, 189, 28, 17, 24, 62, 97, 93, 236, 61, 152, 246, 136, 61, 191, 199, 204, 61, 38, 121, 242, 60, 205, 10, 140, 60, 90, 88, 252, 189, 40, 124, 243, 189, 94, 215, 160, 61, 137, 209, 184, 189, 45, 164, 218, 189, 105, 46, 196, 187, 188, 9, 190, 189, 149, 2, 236, 190, 227, 238, 19, 63, 11, 128, 123, 62, 35, 220, 57, 62, 110, 10, 62, 63, 99, 135, 141, 190, 156, 151, 143, 191, 60, 94, 89, 189, 34, 31, 161, 62, 40, 85, 216, 189, 73, 101, 61, 62, 18, 116, 195, 189, 164, 118, 88, 61, 184, 178, 60, 62, 232, 9, 89, 191, 62, 152, 86, 189, 57, 182, 157, 61, 191, 175, 252, 189, 115, 130, 122, 61, 179, 13, 243, 189, 154, 130, 113, 60, 250, 169, 217, 187, 61, 70, 77, 191, 23, 162, 121, 191, 130, 0, 234, 190, 194, 192, 10, 58, 36, 243, 157, 191, 222, 162, 173, 62, 154, 123, 185, 62, 7, 56, 190, 190, 124, 96, 24, 61, 98, 0, 28, 191, 24, 20, 234, 190, 158, 60, 33, 190, 21, 11, 17, 191, 233, 174, 50, 62, 185, 199, 14, 61, 132, 69, 45, 62, 115, 153, 57, 190, 106, 234, 155, 62, 92, 250, 169, 189, 217, 215, 164, 190, 42, 232, 224, 59, 196, 133, 174, 62, 0, 251, 32, 190, 229, 111, 61, 191, 61, 201, 100, 62, 52, 2, 163, 62, 18, 2, 77, 62, 36, 152, 96, 62, 11, 115, 123, 188, 188, 244, 30, 61, 219, 197, 158, 61, 136, 1, 221, 61, 36, 71, 31, 62, 71, 119, 95, 190, 108, 80, 172, 190, 134, 64, 230, 60, 11, 16, 249, 190, 88, 242, 20, 61, 138, 101, 67, 62, 30, 242, 5, 190, 61, 183, 206, 190, 92, 121, 233, 190, 23, 28, 169, 190, 12, 177, 195, 62, 104, 1, 125, 61, 154, 23, 7, 190, 202, 34, 172, 61, 233, 235, 218, 187, 115, 112, 11, 63, 188, 35, 172, 62, 165, 170, 147, 62, 190, 79, 137, 188, 97, 50, 176, 61, 67, 78, 152, 61, 24, 34, 186, 62, 117, 181, 175, 62, 113, 168, 15, 190, 98, 113, 226, 189, 243, 76, 214, 189, 23, 118, 120, 190, 163, 8, 131, 62, 59, 249, 180, 62, 90, 86, 165, 189, 168, 229, 54, 190, 213, 244, 134, 190, 10, 64, 68, 191, 207, 134, 82, 190, 33, 211, 250, 189, 136, 241, 197, 190, 206, 30, 246, 61, 53, 138, 236, 190, 45, 104, 122, 190, 107, 173, 221, 189, 157, 78, 187, 190, 226, 30, 70, 62, 118, 32, 133, 190, 121, 155, 4, 191, 235, 248, 22, 61, 86, 19, 20, 191, 133, 116, 241, 61, 152, 7, 97, 191, 81, 31, 134, 60, 148, 219, 105, 189, 127, 115, 255, 61, 27, 147, 235, 191, 161, 210, 20, 63, 128, 169, 26, 191, 194, 235, 9, 190, 215, 36, 205, 61, 25, 119, 160, 62, 236, 188, 228, 61, 5, 107, 176, 62, 224, 58, 213, 190, 142, 246, 214, 191, 220, 194, 6, 63, 13, 131, 214, 62, 139, 105, 136, 62, 213, 73, 212, 62, 156, 199, 195, 62, 122, 219, 209, 190, 230, 30, 221, 189, 223, 47, 135, 187, 245, 101, 149, 62, 78, 255, 40, 190, 17, 76, 46, 61, 10, 73, 174, 191, 92, 114, 53, 62, 217, 78, 148, 62, 26, 57, 250, 61, 131, 50, 34, 61, 101, 204, 12, 61, 123, 40, 137, 62, 173, 85, 6, 190, 207, 239, 176, 62, 44, 177, 149, 61, 203, 15, 149, 60, 236, 248, 89, 190, 222, 99, 140, 190, 178, 69, 14, 190, 157, 212, 166, 61, 57, 255, 133, 190, 15, 203, 95, 62, 195, 90, 170, 189, 222, 6, 11, 190, 131, 34, 38, 62, 95, 162, 126, 190, 120, 134, 238, 61, 54, 191, 92, 189, 201, 131, 113, 190, 85, 198, 150, 61, 131, 95, 152, 186, 84, 130, 69, 189, 93, 246, 212, 62, 202, 212, 187, 62, 196, 65, 75, 62, 60, 116, 33, 190, 97, 219, 0, 61, 80, 45, 89, 191, 191, 74, 250, 60, 55, 175, 129, 61, 56, 143, 4, 189, 250, 138, 117, 62, 20, 35, 5, 62, 177, 33, 14, 190, 143, 17, 197, 190, 191, 242, 99, 62, 85, 96, 187, 191, 146, 111, 50, 187, 243, 224, 236, 188, 162, 5, 151, 62, 210, 65, 200, 61, 199, 27, 165, 189, 181, 144, 65, 62, 164, 221, 90, 62, 57, 139, 172, 62, 240, 35, 59, 62, 209, 248, 16, 190, 114, 66, 87, 62, 191, 87, 63, 62, 26, 14, 34, 190, 7, 105, 71, 62, 191, 7, 212, 62, 6, 234, 144, 190, 18, 26, 232, 60, 240, 168, 92, 190, 56, 22, 248, 189, 134, 2, 252, 61, 200, 133, 132, 62, 210, 61, 78, 190, 23, 153, 190, 61, 145, 229, 114, 61, 55, 96, 61, 190, 85, 65, 210, 189, 122, 52, 32, 189, 134, 206, 130, 189, 191, 83, 19, 189, 10, 94, 88, 60, 237, 206, 191, 60, 245, 173, 164, 189, 168, 157, 194, 61, 84, 129, 98, 189, 160, 115, 101, 189, 86, 138, 247, 60, 244, 134, 161, 189, 121, 149, 9, 61, 222, 103, 251, 61, 72, 159, 168, 61, 72, 4, 199, 188, 173, 25, 254, 188, 184, 200, 51, 190, 143, 25, 11, 189, 210, 190, 123, 189, 144, 44, 19, 189, 237, 37, 210, 61, 217, 180, 223, 61, 117, 31, 241, 61, 33, 166, 247, 189, 216, 65, 219, 60, 248, 147, 36, 62, 39, 23, 169, 58, 160, 11, 60, 190, 131, 165, 98, 191, 81, 54, 233, 189, 119, 111, 145, 62, 179, 227, 24, 190, 169, 239, 155, 191, 225, 232, 145, 62, 211, 235, 65, 61, 211, 124, 2, 63, 54, 195, 188, 190, 235, 136, 16, 63, 135, 244, 31, 190, 132, 57, 9, 191, 131, 49, 24, 191, 168, 154, 135, 60, 216, 6, 149, 62, 56, 76, 217, 189, 94, 24, 43, 190, 192, 216, 57, 191, 131, 197, 155, 61, 242, 95, 126, 62, 113, 111, 174, 189, 81, 119, 21, 62, 214, 203, 89, 189, 241, 145, 91, 61, 5, 40, 130, 191, 78, 2, 132, 62, 244, 232, 16, 191, 232, 93, 151, 62, 4, 25, 52, 62, 51, 38, 4, 191, 47, 158, 217, 190, 241, 8, 7, 190, 80, 4, 34, 60, 23, 216, 17, 190, 172, 44, 21, 62, 98, 169, 26, 190, 235, 81, 168, 189, 159, 7, 240, 188, 38, 148, 177, 188, 48, 225, 3, 190, 183, 240, 33, 190, 40, 252, 206, 58, 36, 96, 249, 189, 178, 101, 52, 62, 175, 110, 8, 190, 171, 224, 105, 59, 166, 106, 175, 61, 177, 219, 0, 190, 147, 81, 27, 190, 60, 67, 242, 187, 69, 8, 74, 188, 184, 114, 41, 189, 92, 112, 131, 188, 91, 169, 65, 61, 142, 81, 228, 189, 5, 32, 217, 61, 133, 247, 47, 189, 159, 144, 171, 189, 41, 184, 215, 189, 81, 82, 140, 189, 117, 163, 146, 189, 244, 105, 19, 190, 17, 160, 129, 189, 205, 221, 135, 61, 136, 22, 100, 191, 215, 34, 141, 190, 156, 225, 125, 62, 93, 29, 130, 62, 89, 174, 81, 190, 36, 138, 172, 62, 93, 120, 40, 190, 68, 179, 50, 63, 245, 170, 56, 189, 220, 101, 171, 62, 217, 153, 136, 190, 74, 184, 151, 190, 131, 142, 100, 191, 82, 225, 236, 62, 89, 114, 90, 60, 95, 110, 21, 190, 177, 58, 166, 190, 5, 110, 40, 191, 224, 245, 165, 190, 61, 239, 64, 62, 185, 116, 167, 189, 169, 243, 78, 190, 210, 113, 169, 60, 8, 232, 153, 188, 31, 70, 36, 191, 131, 176, 188, 189, 111, 40, 189, 189, 48, 187, 47, 190, 210, 213, 10, 58, 186, 23, 63, 189, 24, 155, 142, 190, 231, 150, 146, 61, 242, 35, 106, 190, 123, 148, 79, 61, 143, 129, 200, 191, 59, 192, 66, 189, 36, 147, 33, 62, 205, 44, 143, 62, 122, 63, 143, 61, 12, 43, 36, 189, 172, 159, 164, 59, 134, 208, 6, 62, 28, 211, 50, 60, 251, 203, 75, 61, 61, 17, 229, 189, 208, 65, 101, 191, 190, 37, 227, 60, 79, 2, 132, 62, 175, 143, 16, 62, 111, 22, 142, 188, 110, 197, 203, 190, 20, 229, 135, 62, 32, 136, 236, 190, 122, 84, 221, 191, 222, 92, 241, 62, 3, 199, 70, 190, 137, 218, 92, 61, 148, 48, 78, 60, 17, 88, 67, 189, 123, 21, 74, 62, 146, 208, 21, 189, 135, 40, 78, 63, 15, 177, 66, 190, 96, 130, 65, 62, 166, 58, 33, 63, 167, 7, 252, 60, 21, 0, 150, 60, 157, 55, 141, 190, 125, 38, 82, 190, 130, 28, 132, 190, 242, 104, 146, 62, 15, 165, 180, 190, 143, 42, 221, 189, 244, 113, 171, 62, 108, 181, 167, 62, 20, 57, 162, 191, 172, 101, 185, 189, 34, 62, 63, 189, 128, 155, 36, 190, 166, 242, 130, 62, 248, 123, 81, 62, 30, 42, 9, 61, 183, 10, 116, 62, 14, 119, 51, 190, 103, 149, 146, 191, 0, 40, 74, 62, 69, 231, 215, 61, 167, 123, 131, 62, 47, 132, 177, 190, 159, 62, 5, 60, 210, 135, 13, 191, 55, 83, 131, 62, 240, 176, 237, 188, 89, 23, 8, 62, 227, 16, 172, 190, 184, 250, 5, 62, 119, 127, 32, 191, 30, 163, 89, 189, 197, 69, 231, 60, 186, 184, 116, 190, 179, 182, 27, 191, 110, 26, 220, 61, 99, 135, 102, 62, 11, 73, 180, 61, 16, 110, 247, 189, 190, 172, 179, 62, 41, 236, 7, 190, 224, 83, 9, 190, 90, 17, 210, 190, 142, 65, 1, 185, 205, 173, 140, 62, 20, 18, 239, 61, 234, 7, 38, 189, 163, 100, 48, 191, 228, 132, 34, 190, 138, 114, 229, 60, 161, 28, 174, 190, 252, 63, 58, 189, 119, 179, 122, 62, 8, 161, 232, 61, 126, 72, 216, 191, 154, 75, 63, 62, 27, 200, 215, 190, 16, 255, 52, 62, 73, 87, 2, 61, 37, 104, 171, 190, 200, 40, 127, 190, 9, 229, 247, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {216, 18, 250, 189, 0, 3, 65, 190, 172, 239, 157, 187, 124, 21, 95, 190, 228, 74, 119, 190, 127, 165, 141, 62, 242, 11, 149, 190, 208, 43, 8, 190, 185, 105, 163, 61, 233, 52, 50, 189, 13, 31, 66, 61, 218, 143, 189, 189, 45, 106, 133, 190, 154, 86, 149, 188, 110, 135, 93, 189, 165, 129, 184, 187, 37, 166, 77, 62, 166, 11, 220, 60, 221, 233, 109, 189, 219, 50, 118, 59, 19, 233, 12, 189, 85, 152, 132, 62, 216, 21, 42, 61, 70, 229, 138, 62, 83, 62, 169, 189, 249, 113, 32, 190, 187, 159, 223, 189, 79, 206, 158, 189, 139, 217, 5, 190, 8, 93, 43, 62, 93, 191, 28, 62, 181, 175, 120, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 232, 40, 191, 232, 39, 12, 63, 58, 130, 137, 62, 146, 149, 50, 63, 20, 54, 198, 62, 39, 81, 254, 61, 226, 44, 160, 190, 176, 225, 88, 190, 241, 102, 1, 191, 166, 86, 156, 191, 154, 237, 215, 190, 16, 186, 235, 187, 108, 58, 29, 191, 110, 55, 88, 61, 17, 5, 21, 191, 28, 137, 61, 62, 107, 196, 3, 63, 102, 128, 179, 189, 225, 219, 30, 61, 181, 39, 123, 191, 1, 29, 102, 190, 1, 19, 16, 191, 123, 60, 164, 63, 229, 253, 19, 61, 194, 26, 254, 190, 15, 226, 33, 190, 32, 104, 86, 191, 183, 130, 250, 60, 208, 130, 99, 191, 92, 209, 130, 62, 69, 131, 169, 62, 127, 36, 131, 190, 22, 206, 21, 62, 136, 62, 171, 61, 72, 44, 95, 61, 95, 122, 60, 63, 167, 38, 111, 187, 149, 232, 86, 190, 121, 115, 34, 62, 152, 134, 250, 189, 63, 144, 81, 189, 68, 111, 254, 60, 217, 122, 186, 61, 46, 97, 184, 189, 103, 67, 34, 190, 221, 150, 106, 61, 158, 238, 153, 190, 203, 153, 12, 190, 94, 86, 34, 189, 141, 146, 12, 62, 235, 3, 202, 61, 51, 192, 0, 63, 45, 203, 141, 189, 120, 101, 210, 190, 242, 178, 1, 63, 137, 152, 212, 190, 5, 43, 229, 60, 111, 122, 0, 190, 130, 140, 71, 190, 96, 240, 15, 61, 63, 128, 68, 63, 103, 24, 208, 189, 171, 235, 138, 189, 223, 161, 46, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 235, 141, 62, 215, 87, 227, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {128, 182, 128, 190, 132, 96, 75, 191, 156, 181, 6, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {106, 158, 18, 192, 164, 166, 123, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0033/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}