// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 21, 3, 189, 113, 88, 97, 62, 111, 138, 222, 61, 117, 251, 130, 189, 29, 87, 235, 61, 153, 122, 247, 190, 223, 70, 165, 62, 148, 64, 8, 191, 19, 95, 61, 62, 6, 224, 191, 190, 226, 210, 187, 62, 31, 231, 16, 191, 165, 220, 140, 190, 243, 30, 9, 191, 72, 107, 134, 190, 70, 10, 49, 190, 202, 89, 12, 191, 7, 112, 31, 62, 87, 177, 245, 62, 118, 162, 220, 190, 31, 181, 157, 190, 79, 75, 201, 62, 60, 74, 5, 63, 112, 49, 245, 62, 11, 141, 6, 62, 91, 226, 11, 191, 32, 8, 201, 190, 124, 219, 128, 62, 37, 228, 102, 62, 151, 154, 185, 189, 133, 157, 220, 189, 84, 156, 166, 61, 84, 233, 6, 62, 116, 165, 7, 189, 5, 254, 230, 188, 33, 72, 248, 190, 21, 210, 199, 62, 133, 210, 1, 191, 212, 2, 152, 190, 114, 27, 53, 190, 8, 125, 168, 190, 115, 168, 62, 62, 102, 39, 192, 60, 132, 54, 244, 62, 70, 78, 2, 191, 66, 176, 204, 190, 14, 14, 127, 61, 59, 56, 205, 62, 76, 135, 174, 62, 190, 87, 5, 191, 36, 102, 245, 190, 146, 75, 13, 60, 236, 177, 12, 191, 184, 209, 1, 191, 91, 87, 254, 190, 173, 109, 16, 191, 115, 34, 172, 62, 232, 219, 111, 62, 208, 114, 231, 62, 21, 19, 185, 190, 14, 117, 140, 190, 125, 212, 58, 61, 15, 203, 218, 189, 177, 229, 225, 189, 97, 115, 10, 191, 218, 236, 65, 62, 238, 150, 170, 190, 15, 104, 253, 62, 149, 37, 201, 189, 110, 78, 102, 189, 45, 191, 237, 190, 56, 181, 155, 62, 245, 172, 3, 62, 223, 232, 202, 190, 112, 163, 222, 190, 138, 234, 241, 62, 219, 204, 156, 62, 255, 34, 1, 191, 195, 185, 150, 189, 33, 1, 129, 190, 70, 101, 222, 190, 173, 134, 4, 63, 193, 192, 167, 188, 33, 71, 137, 189, 134, 33, 126, 190, 193, 212, 150, 190, 2, 241, 24, 62, 176, 134, 157, 190, 133, 81, 108, 190, 34, 213, 154, 189, 88, 235, 65, 190, 235, 78, 235, 190, 216, 198, 244, 190, 245, 117, 216, 190, 75, 176, 229, 62, 158, 205, 202, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 185, 19, 191, 167, 39, 228, 190, 47, 205, 238, 190, 39, 34, 146, 190, 68, 164, 188, 62, 151, 153, 180, 190, 233, 110, 159, 62, 133, 123, 210, 190, 101, 81, 250, 62, 141, 185, 55, 60, 242, 21, 238, 189, 48, 245, 205, 190, 137, 182, 134, 190, 22, 191, 245, 190, 20, 182, 68, 61, 16, 167, 152, 62, 190, 196, 88, 61, 165, 46, 163, 190, 184, 86, 187, 189, 154, 211, 17, 63, 145, 105, 209, 190, 81, 254, 192, 60, 98, 90, 14, 63, 242, 113, 0, 63, 4, 160, 16, 191, 56, 246, 136, 190, 18, 181, 161, 190, 52, 85, 194, 190, 162, 97, 210, 62, 237, 148, 160, 189, 98, 57, 240, 190, 64, 163, 244, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 147, 214, 61, 69, 221, 247, 189, 236, 242, 238, 189, 237, 176, 12, 190, 232, 1, 242, 189, 76, 104, 10, 190, 20, 199, 229, 189, 229, 212, 49, 62, 185, 46, 47, 190, 101, 28, 40, 62, 176, 181, 180, 61, 201, 245, 29, 190, 107, 133, 186, 187, 255, 15, 20, 62, 135, 145, 39, 190, 46, 222, 195, 188, 169, 29, 16, 62, 118, 15, 233, 61, 14, 122, 212, 189, 150, 101, 209, 60, 180, 144, 30, 61, 208, 152, 200, 61, 233, 84, 128, 61, 110, 164, 155, 189, 235, 62, 211, 61, 181, 86, 0, 62, 77, 214, 23, 189, 74, 222, 138, 189, 253, 97, 1, 190, 72, 241, 3, 190, 252, 145, 141, 189, 39, 136, 212, 188, 171, 169, 190, 189, 249, 158, 20, 62, 124, 66, 40, 62, 200, 54, 99, 61, 151, 16, 169, 57, 224, 3, 238, 61, 0, 176, 206, 189, 119, 38, 35, 62, 86, 84, 101, 188, 113, 116, 12, 190, 135, 138, 4, 190, 42, 228, 170, 59, 181, 210, 242, 188, 60, 72, 227, 188, 70, 137, 22, 61, 11, 184, 7, 61, 109, 55, 56, 61, 196, 132, 226, 187, 64, 245, 10, 62, 126, 96, 48, 189, 141, 188, 190, 58, 87, 28, 128, 61, 121, 27, 249, 189, 183, 117, 131, 189, 166, 151, 14, 190, 178, 6, 18, 62, 139, 226, 197, 58, 150, 23, 167, 189, 194, 184, 44, 190, 199, 105, 215, 189, 146, 219, 250, 188, 206, 29, 215, 61, 158, 163, 156, 61, 43, 77, 94, 189, 46, 243, 151, 59, 99, 75, 30, 62, 114, 164, 38, 190, 217, 52, 216, 188, 32, 198, 7, 62, 92, 80, 182, 60, 169, 129, 144, 188, 183, 113, 32, 62, 110, 213, 243, 61, 220, 190, 164, 189, 183, 169, 85, 187, 10, 24, 194, 59, 95, 39, 25, 190, 47, 238, 28, 61, 177, 144, 219, 61, 128, 3, 39, 62, 53, 126, 225, 61, 165, 51, 159, 60, 200, 133, 115, 189, 95, 125, 199, 189, 216, 250, 44, 190, 121, 241, 203, 189, 244, 250, 87, 61, 87, 190, 7, 190, 243, 29, 253, 61, 7, 44, 183, 61, 164, 53, 205, 189, 62, 106, 176, 189, 56, 171, 51, 61, 120, 154, 145, 61, 253, 66, 206, 61, 120, 42, 242, 189, 86, 191, 173, 188, 150, 81, 173, 189, 216, 103, 5, 187, 44, 113, 168, 61, 22, 67, 136, 189, 227, 80, 72, 61, 192, 244, 120, 189, 152, 182, 242, 189, 85, 22, 170, 61, 52, 75, 18, 186, 39, 146, 42, 62, 222, 40, 35, 62, 127, 101, 15, 62, 160, 11, 214, 188, 91, 26, 245, 188, 240, 69, 223, 189, 93, 37, 42, 62, 194, 228, 200, 189, 102, 159, 183, 188, 212, 14, 37, 62, 220, 177, 45, 190, 15, 51, 42, 190, 197, 46, 149, 189, 138, 24, 166, 61, 24, 231, 254, 61, 5, 86, 215, 189, 172, 190, 213, 189, 53, 168, 2, 190, 186, 97, 45, 62, 167, 197, 178, 188, 212, 140, 234, 189, 213, 155, 206, 189, 23, 19, 202, 61, 224, 99, 44, 62, 24, 239, 8, 189, 31, 213, 165, 189, 186, 89, 173, 189, 146, 105, 185, 61, 179, 191, 202, 189, 118, 75, 55, 189, 176, 64, 205, 189, 18, 98, 177, 189, 103, 9, 251, 189, 61, 121, 67, 60, 37, 163, 99, 61, 229, 181, 250, 188, 108, 70, 91, 61, 181, 122, 69, 189, 236, 28, 7, 61, 216, 107, 9, 61, 185, 229, 38, 189, 9, 255, 254, 59, 45, 177, 202, 188, 85, 96, 146, 189, 254, 51, 6, 62, 153, 248, 73, 61, 228, 169, 85, 60, 59, 41, 190, 188, 168, 249, 47, 190, 11, 63, 243, 189, 138, 153, 70, 189, 215, 32, 2, 61, 238, 39, 32, 62, 23, 100, 128, 188, 215, 236, 103, 188, 198, 215, 232, 60, 101, 219, 109, 61, 219, 253, 44, 190, 235, 115, 121, 61, 34, 199, 16, 61, 199, 240, 190, 61, 112, 27, 84, 60, 24, 176, 23, 62, 152, 159, 104, 189, 250, 9, 158, 61, 254, 15, 245, 61, 184, 37, 213, 61, 207, 110, 50, 62, 170, 188, 26, 62, 81, 138, 12, 62, 129, 27, 241, 61, 143, 252, 49, 62, 104, 244, 210, 189, 194, 104, 17, 62, 121, 157, 3, 62, 172, 161, 114, 186, 106, 188, 195, 57, 44, 180, 182, 189, 143, 184, 90, 61, 49, 141, 28, 62, 183, 113, 7, 190, 5, 219, 176, 61, 251, 176, 18, 61, 234, 99, 42, 62, 222, 150, 51, 62, 19, 79, 38, 61, 130, 133, 87, 61, 82, 178, 217, 61, 185, 252, 253, 60, 131, 250, 70, 189, 191, 248, 221, 189, 255, 92, 231, 189, 198, 43, 227, 189, 144, 12, 187, 186, 71, 20, 105, 61, 145, 76, 206, 60, 86, 31, 65, 61, 63, 170, 246, 61, 158, 36, 50, 62, 227, 141, 23, 188, 206, 113, 197, 61, 2, 122, 13, 59, 52, 255, 8, 190, 163, 19, 109, 61, 178, 139, 40, 62, 65, 199, 28, 62, 131, 30, 96, 61, 230, 56, 240, 60, 214, 47, 161, 187, 12, 16, 107, 61, 57, 222, 4, 61, 11, 6, 110, 60, 139, 247, 11, 190, 6, 42, 205, 61, 125, 109, 137, 61, 67, 19, 237, 188, 208, 123, 221, 189, 55, 195, 64, 59, 32, 17, 128, 189, 80, 204, 2, 62, 192, 208, 198, 60, 129, 72, 212, 189, 66, 138, 29, 190, 112, 216, 46, 62, 216, 217, 32, 189, 18, 80, 141, 61, 37, 48, 12, 61, 68, 4, 206, 186, 195, 201, 203, 61, 186, 161, 181, 61, 77, 15, 72, 188, 192, 224, 39, 190, 54, 23, 29, 190, 158, 81, 250, 61, 207, 230, 218, 61, 136, 102, 168, 60, 241, 151, 153, 61, 33, 179, 93, 61, 77, 134, 157, 58, 230, 48, 62, 61, 231, 195, 231, 61, 13, 168, 0, 190, 121, 245, 255, 61, 53, 64, 157, 61, 122, 160, 129, 60, 167, 173, 153, 61, 10, 72, 48, 61, 122, 130, 35, 189, 58, 234, 205, 189, 95, 147, 10, 62, 228, 191, 57, 61, 151, 113, 164, 189, 244, 147, 149, 186, 15, 100, 180, 189, 21, 124, 106, 189, 244, 246, 10, 190, 231, 49, 135, 189, 47, 128, 5, 189, 198, 180, 10, 190, 252, 83, 134, 189, 96, 193, 44, 60, 63, 1, 175, 61, 79, 225, 81, 61, 250, 222, 121, 189, 10, 125, 132, 60, 93, 234, 131, 189, 24, 156, 40, 60, 51, 248, 153, 61, 211, 224, 45, 189, 146, 177, 152, 58, 210, 98, 9, 62, 238, 132, 14, 189, 244, 205, 146, 188, 73, 90, 28, 61, 115, 68, 17, 190, 135, 166, 159, 61, 125, 99, 184, 189, 61, 1, 124, 60, 235, 12, 130, 61, 190, 60, 231, 189, 99, 198, 160, 61, 98, 47, 96, 189, 216, 164, 91, 61, 20, 23, 81, 61, 89, 123, 246, 189, 220, 208, 173, 189, 86, 108, 36, 62, 152, 118, 156, 60, 179, 209, 169, 188, 32, 158, 32, 190, 13, 255, 12, 190, 150, 83, 52, 62, 137, 206, 243, 61, 56, 142, 86, 61, 66, 41, 2, 61, 22, 233, 7, 190, 124, 203, 17, 190, 33, 71, 193, 189, 221, 254, 209, 189, 110, 101, 242, 189, 87, 244, 18, 190, 61, 210, 14, 189, 93, 12, 33, 62, 238, 171, 9, 62, 202, 243, 101, 61, 254, 13, 158, 189, 10, 71, 215, 61, 195, 142, 182, 188, 66, 251, 3, 190, 210, 149, 210, 186, 177, 234, 7, 190, 197, 234, 221, 61, 0, 55, 210, 188, 122, 0, 80, 61, 24, 121, 40, 60, 161, 71, 133, 189, 13, 177, 2, 62, 202, 48, 53, 61, 66, 123, 70, 189, 233, 167, 39, 62, 243, 21, 56, 61, 60, 198, 39, 62, 189, 184, 7, 190, 95, 34, 4, 62, 30, 174, 12, 61, 119, 95, 212, 189, 236, 232, 46, 62, 129, 92, 48, 189, 92, 222, 133, 61, 44, 1, 221, 61, 205, 58, 57, 189, 18, 167, 188, 61, 90, 199, 199, 188, 184, 144, 214, 189, 21, 18, 19, 190, 147, 68, 50, 190, 73, 253, 167, 61, 105, 89, 220, 61, 66, 142, 245, 189, 48, 29, 186, 61, 39, 165, 244, 58, 21, 175, 196, 189, 245, 131, 253, 189, 49, 120, 52, 62, 65, 154, 249, 61, 225, 35, 234, 189, 41, 172, 166, 61, 138, 203, 190, 189, 166, 200, 245, 61, 54, 134, 84, 60, 36, 130, 6, 190, 54, 21, 225, 189, 86, 66, 40, 62, 142, 5, 60, 61, 65, 111, 79, 61, 204, 74, 33, 62, 81, 125, 215, 189, 99, 247, 76, 61, 85, 37, 145, 189, 156, 163, 197, 188, 183, 92, 45, 61, 96, 64, 52, 59, 33, 96, 182, 189, 186, 144, 165, 189, 69, 85, 91, 188, 103, 47, 11, 190, 99, 50, 25, 190, 46, 118, 31, 61, 7, 78, 231, 189, 178, 195, 124, 60, 52, 242, 10, 62, 46, 196, 235, 61, 151, 103, 47, 190, 91, 10, 92, 61, 167, 215, 183, 189, 44, 54, 201, 189, 220, 192, 199, 189, 237, 249, 17, 62, 166, 250, 225, 189, 61, 4, 245, 189, 6, 150, 165, 189, 5, 92, 46, 62, 243, 178, 236, 61, 53, 235, 111, 61, 94, 40, 35, 62, 76, 205, 220, 61, 182, 23, 116, 61, 25, 70, 29, 189, 103, 92, 209, 189, 115, 46, 15, 62, 212, 150, 165, 188, 8, 199, 19, 61, 143, 241, 220, 60, 69, 125, 36, 61, 123, 57, 52, 60, 72, 19, 254, 188, 106, 127, 7, 190, 86, 91, 173, 189, 165, 216, 31, 61, 112, 160, 80, 61, 221, 255, 202, 61, 134, 63, 161, 188, 150, 20, 212, 61, 27, 234, 196, 189, 41, 238, 215, 61, 241, 9, 3, 61, 206, 246, 136, 189, 77, 33, 99, 189, 57, 34, 100, 61, 165, 87, 235, 189, 85, 67, 235, 61, 151, 221, 112, 189, 239, 246, 30, 190, 35, 235, 254, 61, 244, 179, 199, 60, 48, 230, 78, 189, 221, 134, 167, 189, 178, 188, 28, 62, 72, 179, 173, 61, 58, 41, 69, 189, 208, 219, 153, 189, 62, 39, 222, 189, 104, 46, 40, 62, 108, 64, 47, 190, 48, 13, 184, 61, 163, 15, 63, 61, 152, 36, 23, 62, 89, 209, 37, 190, 210, 234, 148, 61, 119, 70, 13, 190, 117, 159, 35, 190, 212, 249, 15, 61, 117, 254, 123, 188, 95, 68, 86, 189, 79, 239, 186, 61, 65, 12, 166, 60, 40, 160, 31, 190, 81, 49, 242, 189, 146, 46, 231, 61, 3, 172, 22, 61, 21, 225, 227, 61, 155, 182, 32, 62, 93, 136, 120, 189, 214, 158, 24, 190, 159, 222, 63, 189, 158, 35, 144, 61, 48, 171, 216, 189, 195, 232, 165, 189, 224, 68, 232, 187, 230, 225, 112, 60, 155, 205, 4, 189, 120, 4, 208, 189, 226, 250, 23, 190, 199, 57, 17, 190, 50, 92, 98, 61, 160, 234, 3, 61, 218, 24, 101, 186, 44, 199, 36, 62, 87, 178, 43, 190, 163, 157, 209, 61, 170, 228, 45, 190, 239, 219, 229, 61, 74, 252, 16, 62, 59, 252, 221, 189, 250, 241, 3, 62, 52, 23, 233, 61, 69, 243, 19, 62, 103, 248, 236, 61, 249, 154, 39, 62, 237, 6, 159, 189, 149, 82, 198, 189, 98, 223, 11, 190, 98, 48, 223, 61, 45, 155, 25, 190, 145, 68, 28, 61, 82, 191, 11, 190, 76, 41, 45, 62, 250, 27, 213, 189, 171, 110, 13, 62, 16, 215, 186, 189, 44, 58, 76, 61, 181, 145, 160, 61, 243, 246, 199, 60, 14, 189, 7, 62, 186, 88, 23, 62, 48, 74, 209, 186, 17, 246, 8, 61, 225, 160, 36, 190, 171, 117, 23, 62, 59, 134, 176, 61, 106, 20, 22, 62, 244, 6, 134, 61, 132, 19, 159, 187, 255, 17, 162, 61, 24, 92, 254, 188, 85, 95, 14, 188, 161, 248, 250, 188, 166, 223, 2, 190, 216, 253, 25, 62, 65, 89, 156, 189, 181, 210, 21, 189, 168, 102, 132, 61, 193, 65, 174, 61, 117, 161, 157, 189, 237, 138, 189, 61, 51, 70, 20, 190, 57, 149, 4, 190, 230, 220, 216, 60, 50, 17, 29, 62, 70, 222, 29, 190, 149, 81, 179, 61, 66, 65, 199, 61, 123, 254, 30, 60, 145, 35, 227, 61, 176, 255, 187, 61, 176, 55, 178, 189, 84, 192, 205, 61, 52, 201, 131, 189, 187, 98, 82, 60, 130, 119, 25, 62, 222, 178, 25, 62, 45, 150, 136, 61, 68, 52, 15, 62, 206, 154, 29, 186, 222, 241, 23, 62, 171, 177, 169, 189, 206, 217, 58, 61, 219, 164, 33, 190, 117, 142, 62, 188, 204, 229, 30, 61, 14, 189, 67, 61, 53, 19, 215, 189, 57, 210, 171, 189, 58, 26, 178, 189, 112, 93, 128, 188, 252, 238, 31, 61, 71, 247, 135, 61, 97, 2, 136, 187, 155, 246, 225, 189, 145, 163, 35, 60, 183, 170, 151, 189, 164, 53, 28, 190, 40, 186, 181, 61, 103, 25, 130, 61, 114, 157, 135, 189, 184, 104, 99, 61, 93, 240, 191, 61, 78, 167, 152, 61, 253, 7, 242, 61, 235, 181, 191, 188, 6, 252, 44, 190, 10, 86, 51, 190, 29, 214, 1, 190, 220, 4, 25, 190, 215, 163, 4, 62, 56, 99, 25, 190, 222, 157, 184, 61, 50, 34, 181, 61, 29, 123, 17, 62, 189, 255, 222, 189, 160, 45, 111, 189, 203, 187, 80, 61, 42, 113, 45, 190, 122, 218, 189, 61, 125, 29, 142, 189, 128, 30, 201, 61, 147, 44, 216, 61, 193, 184, 181, 189, 110, 150, 136, 60, 55, 62, 15, 190, 59, 67, 143, 61, 2, 253, 0, 62, 192, 42, 153, 60, 2, 174, 135, 189, 130, 150, 249, 189, 52, 49, 244, 189, 149, 33, 8, 189, 252, 188, 255, 60, 30, 72, 8, 60, 90, 22, 22, 62, 148, 192, 39, 190, 201, 11, 17, 62, 186, 174, 51, 190, 233, 186, 31, 190, 28, 138, 134, 189, 55, 202, 48, 61, 139, 21, 153, 189, 175, 112, 238, 189, 28, 17, 24, 62, 120, 106, 28, 62, 122, 88, 238, 61, 187, 122, 11, 62, 38, 121, 242, 60, 205, 10, 140, 60, 90, 88, 252, 189, 40, 124, 243, 189, 37, 6, 233, 61, 255, 214, 71, 189, 45, 164, 218, 189, 155, 84, 190, 187, 10, 36, 194, 189, 95, 126, 231, 189, 53, 17, 246, 189, 89, 8, 11, 62, 166, 177, 246, 61, 236, 56, 108, 61, 30, 240, 34, 190, 190, 110, 23, 189, 71, 237, 51, 190, 143, 28, 156, 61, 228, 191, 16, 190, 62, 159, 187, 61, 202, 23, 88, 59, 116, 18, 184, 189, 130, 106, 13, 62, 211, 123, 136, 187, 233, 159, 203, 184, 184, 41, 11, 62, 229, 247, 13, 62, 167, 189, 6, 190, 168, 143, 21, 189, 67, 43, 161, 61, 97, 180, 70, 187, 36, 147, 64, 189, 52, 247, 172, 59, 78, 40, 215, 188, 192, 120, 39, 62, 197, 7, 26, 190, 139, 104, 22, 62, 68, 139, 31, 62, 115, 97, 36, 190, 1, 36, 230, 188, 61, 225, 0, 190, 127, 99, 195, 187, 189, 200, 36, 190, 204, 176, 137, 61, 155, 148, 235, 59, 242, 205, 171, 189, 173, 200, 76, 61, 161, 143, 230, 189, 19, 88, 222, 61, 8, 46, 86, 188, 193, 127, 28, 190, 37, 198, 136, 189, 5, 219, 184, 61, 141, 85, 148, 189, 201, 251, 217, 188, 59, 226, 181, 60, 93, 29, 36, 62, 99, 42, 194, 189, 227, 63, 23, 61, 189, 246, 6, 62, 179, 244, 36, 62, 25, 92, 158, 189, 129, 233, 155, 61, 228, 97, 40, 188, 49, 181, 33, 62, 152, 70, 237, 186, 12, 78, 160, 188, 102, 58, 169, 189, 64, 85, 164, 188, 43, 189, 13, 62, 201, 14, 2, 188, 141, 239, 0, 190, 188, 137, 203, 189, 243, 26, 33, 190, 86, 222, 16, 188, 142, 42, 238, 189, 245, 84, 160, 189, 242, 34, 31, 62, 16, 100, 6, 190, 178, 241, 79, 61, 98, 204, 1, 62, 77, 117, 247, 189, 4, 114, 12, 61, 62, 173, 210, 187, 80, 133, 4, 62, 27, 186, 103, 60, 85, 95, 249, 61, 107, 47, 242, 61, 170, 188, 49, 190, 17, 47, 49, 189, 183, 164, 2, 190, 43, 27, 34, 61, 174, 198, 6, 62, 41, 106, 188, 189, 13, 183, 19, 190, 73, 121, 19, 190, 91, 251, 149, 189, 36, 190, 231, 189, 45, 148, 48, 189, 202, 162, 245, 189, 200, 45, 15, 62, 255, 43, 129, 189, 8, 162, 207, 189, 236, 11, 51, 190, 92, 163, 104, 185, 153, 41, 36, 62, 207, 245, 139, 188, 167, 115, 125, 189, 35, 205, 48, 62, 146, 129, 227, 189, 58, 228, 156, 61, 217, 57, 214, 189, 225, 100, 42, 62, 173, 59, 174, 61, 163, 57, 167, 61, 127, 199, 29, 190, 217, 220, 8, 62, 13, 169, 14, 190, 172, 43, 179, 61, 115, 110, 106, 189, 49, 244, 169, 61, 55, 97, 13, 189, 129, 162, 124, 61, 118, 19, 46, 60, 246, 178, 211, 60, 116, 214, 41, 62, 181, 127, 21, 62, 62, 185, 157, 61, 230, 218, 218, 59, 96, 147, 52, 62, 186, 72, 10, 189, 174, 209, 19, 61, 209, 189, 31, 190, 87, 149, 207, 61, 218, 206, 248, 61, 41, 159, 169, 61, 99, 238, 7, 62, 49, 193, 3, 62, 89, 247, 43, 62, 95, 138, 162, 61, 225, 2, 123, 189, 199, 200, 135, 189, 68, 17, 165, 61, 225, 20, 46, 62, 124, 107, 26, 62, 97, 252, 240, 189, 25, 56, 239, 61, 238, 147, 245, 189, 145, 19, 186, 189, 60, 110, 65, 189, 122, 138, 237, 60, 21, 106, 26, 62, 51, 28, 21, 62, 154, 178, 122, 61, 209, 125, 35, 190, 167, 164, 144, 61, 240, 30, 17, 62, 226, 62, 8, 188, 5, 119, 224, 189, 3, 224, 138, 189, 191, 30, 48, 62, 45, 198, 179, 60, 62, 34, 153, 61, 34, 249, 45, 62, 10, 164, 14, 62, 205, 219, 97, 189, 240, 4, 196, 189, 236, 48, 223, 60, 245, 12, 213, 60, 143, 189, 225, 61, 83, 12, 145, 189, 125, 40, 144, 61, 238, 54, 79, 61, 137, 87, 28, 189, 62, 160, 43, 190, 43, 72, 27, 190, 228, 138, 227, 61, 150, 76, 6, 190, 135, 25, 17, 62, 156, 28, 182, 186, 46, 29, 141, 188, 138, 134, 59, 61, 199, 46, 11, 62, 41, 163, 224, 61, 195, 160, 140, 61, 48, 224, 145, 61, 199, 208, 124, 59, 235, 194, 10, 62, 28, 222, 180, 189, 140, 57, 165, 189, 182, 234, 64, 189, 92, 83, 129, 60, 241, 203, 39, 62, 250, 181, 245, 189, 170, 44, 249, 189, 99, 19, 188, 61, 36, 114, 38, 190, 253, 54, 137, 60, 22, 172, 176, 61, 67, 174, 94, 189, 211, 219, 214, 61, 51, 172, 156, 61, 156, 204, 7, 190, 184, 172, 172, 189, 5, 81, 166, 188, 10, 32, 43, 189, 151, 245, 130, 188, 198, 81, 161, 60, 171, 119, 46, 61, 254, 42, 111, 189, 45, 239, 190, 61, 105, 35, 28, 189, 211, 152, 32, 189, 162, 75, 79, 61, 209, 18, 118, 189, 204, 114, 44, 61, 142, 192, 17, 62, 64, 249, 205, 61, 220, 167, 242, 187, 108, 70, 28, 188, 4, 167, 25, 190, 85, 43, 99, 188, 181, 124, 46, 189, 136, 217, 184, 188, 47, 189, 242, 61, 241, 98, 3, 62, 188, 4, 11, 62, 16, 131, 227, 189, 152, 159, 234, 60, 40, 200, 51, 62, 203, 189, 151, 60, 233, 82, 38, 190, 238, 29, 7, 189, 252, 77, 75, 189, 92, 251, 47, 62, 112, 203, 0, 190, 46, 37, 183, 188, 33, 202, 163, 61, 139, 166, 130, 189, 113, 66, 13, 62, 155, 235, 200, 189, 240, 141, 228, 61, 12, 94, 40, 61, 32, 57, 94, 60, 123, 180, 166, 189, 70, 233, 49, 190, 71, 20, 153, 189, 185, 146, 155, 189, 231, 1, 21, 189, 40, 100, 254, 189, 117, 66, 118, 61, 70, 7, 107, 60, 250, 104, 220, 188, 123, 36, 211, 187, 159, 72, 224, 189, 135, 160, 174, 59, 133, 81, 243, 61, 187, 124, 135, 189, 144, 16, 51, 61, 37, 115, 137, 61, 19, 231, 27, 62, 49, 134, 52, 190, 172, 7, 48, 62, 40, 62, 49, 189, 164, 208, 32, 60, 23, 216, 17, 190, 9, 245, 33, 62, 98, 169, 26, 190, 90, 19, 29, 61, 139, 168, 133, 187, 221, 209, 14, 61, 85, 8, 39, 190, 134, 46, 136, 189, 33, 89, 128, 58, 123, 52, 35, 190, 178, 101, 52, 62, 40, 33, 9, 190, 192, 119, 18, 59, 166, 106, 175, 61, 130, 51, 216, 189, 133, 206, 8, 190, 208, 234, 64, 187, 183, 216, 188, 60, 175, 71, 78, 189, 92, 112, 131, 188, 249, 189, 197, 61, 6, 73, 254, 188, 253, 124, 19, 62, 133, 247, 47, 189, 159, 144, 171, 189, 41, 184, 215, 189, 81, 82, 140, 189, 251, 2, 1, 189, 12, 97, 205, 189, 17, 160, 129, 189, 255, 185, 136, 61, 248, 126, 28, 189, 68, 131, 189, 189, 22, 206, 22, 61, 110, 127, 154, 61, 219, 112, 77, 61, 66, 22, 222, 61, 109, 151, 203, 186, 114, 104, 105, 61, 193, 249, 34, 189, 5, 131, 39, 190, 117, 51, 30, 190, 224, 174, 144, 189, 70, 126, 237, 189, 157, 157, 16, 62, 223, 200, 43, 190, 239, 166, 147, 61, 126, 197, 175, 61, 93, 204, 179, 188, 104, 214, 254, 189, 200, 2, 137, 189, 197, 189, 175, 189, 42, 76, 172, 189, 144, 81, 219, 189, 162, 3, 190, 61, 233, 129, 40, 190, 22, 45, 247, 61, 135, 193, 0, 62, 234, 68, 193, 61, 98, 16, 1, 61, 216, 112, 29, 189, 119, 113, 164, 189, 6, 82, 66, 59, 206, 117, 98, 61, 251, 40, 183, 61, 179, 63, 31, 62, 33, 1, 99, 189, 204, 17, 28, 62, 186, 209, 180, 61, 17, 14, 25, 61, 142, 3, 236, 61, 155, 183, 189, 61, 52, 216, 1, 190, 228, 152, 143, 61, 165, 223, 49, 61, 182, 145, 4, 62, 151, 86, 208, 61, 110, 155, 66, 189, 143, 188, 26, 62, 44, 87, 5, 62, 233, 63, 10, 61, 221, 121, 52, 62, 178, 199, 201, 61, 43, 77, 2, 190, 32, 43, 136, 187, 196, 116, 37, 62, 23, 161, 6, 59, 163, 112, 249, 189, 211, 148, 11, 61, 147, 71, 134, 188, 102, 221, 152, 189, 104, 213, 172, 189, 79, 153, 183, 61, 85, 230, 7, 190, 174, 94, 12, 61, 57, 143, 33, 190, 110, 203, 31, 189, 138, 142, 36, 62, 10, 62, 185, 61, 76, 68, 164, 189, 195, 78, 22, 61, 23, 200, 31, 62, 69, 111, 25, 190, 57, 145, 202, 60, 239, 28, 45, 62, 42, 173, 39, 62, 231, 200, 228, 60, 26, 65, 11, 190, 11, 206, 4, 62, 118, 137, 165, 61, 152, 112, 9, 62, 94, 95, 16, 62, 244, 252, 171, 61, 216, 143, 46, 61, 35, 1, 200, 188, 130, 164, 14, 62, 98, 81, 206, 188, 63, 173, 175, 189, 58, 118, 188, 61, 189, 71, 52, 190, 71, 93, 136, 189, 198, 241, 170, 189, 223, 156, 23, 61, 5, 249, 20, 190, 234, 36, 149, 61, 103, 164, 49, 189, 1, 76, 231, 61, 247, 222, 249, 61, 239, 22, 7, 189, 116, 133, 127, 61, 212, 6, 42, 190, 33, 79, 134, 189, 190, 45, 42, 62, 83, 109, 175, 61, 251, 80, 161, 188, 115, 157, 20, 189, 188, 224, 146, 61, 155, 251, 196, 61, 116, 23, 209, 61, 39, 147, 255, 61, 165, 56, 219, 61, 14, 78, 45, 62, 73, 112, 6, 62, 48, 6, 210, 60, 1, 255, 180, 189, 167, 165, 152, 189, 73, 110, 133, 189, 20, 2, 80, 189, 166, 107, 19, 189, 22, 139, 192, 60, 4, 112, 224, 61, 221, 143, 32, 190, 202, 100, 142, 61, 173, 123, 135, 61, 48, 81, 158, 189, 230, 18, 148, 61, 4, 56, 57, 60, 125, 5, 18, 62, 73, 163, 155, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 23, 253, 189, 148, 45, 218, 189, 25, 220, 143, 61, 239, 179, 224, 189, 214, 158, 15, 190, 132, 123, 176, 61, 156, 156, 188, 60, 187, 116, 199, 61, 165, 20, 245, 61, 15, 251, 12, 190, 235, 109, 150, 60, 196, 100, 19, 188, 92, 39, 33, 190, 104, 133, 31, 188, 131, 111, 239, 189, 11, 25, 243, 189, 103, 68, 72, 61, 105, 1, 100, 61, 11, 93, 153, 188, 38, 240, 41, 189, 40, 18, 47, 190, 231, 123, 12, 62, 8, 155, 236, 60, 39, 220, 139, 61, 57, 127, 97, 61, 246, 178, 12, 190, 196, 86, 209, 189, 43, 123, 131, 188, 234, 35, 1, 190, 189, 72, 136, 188, 223, 186, 24, 61, 214, 142, 164, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 187, 206, 59, 57, 254, 253, 188, 221, 65, 21, 61, 28, 57, 181, 61, 197, 104, 45, 62, 64, 30, 156, 61, 193, 0, 178, 189, 8, 244, 191, 61, 51, 19, 37, 190, 220, 138, 226, 189, 182, 225, 21, 190, 253, 146, 108, 59, 122, 228, 15, 190, 255, 32, 138, 60, 226, 78, 35, 190, 153, 148, 209, 189, 58, 75, 217, 61, 33, 121, 188, 189, 4, 224, 169, 61, 34, 73, 212, 60, 241, 126, 56, 189, 244, 116, 161, 189, 114, 144, 236, 61, 252, 159, 82, 60, 156, 109, 43, 61, 250, 173, 30, 190, 42, 38, 23, 190, 250, 122, 123, 61, 51, 70, 5, 190, 9, 244, 207, 187, 186, 81, 229, 61, 206, 94, 62, 189, 182, 176, 51, 189, 38, 228, 34, 190, 245, 47, 192, 60, 213, 157, 176, 61, 47, 166, 33, 190, 202, 161, 198, 189, 224, 105, 28, 62, 15, 225, 160, 61, 234, 239, 190, 61, 77, 181, 109, 188, 130, 251, 217, 61, 67, 79, 200, 189, 99, 255, 49, 62, 160, 175, 160, 61, 147, 86, 158, 189, 30, 131, 205, 189, 29, 72, 194, 189, 81, 42, 20, 62, 43, 132, 224, 61, 203, 6, 11, 62, 125, 20, 172, 60, 226, 9, 30, 190, 30, 129, 245, 61, 138, 138, 34, 190, 88, 158, 228, 61, 199, 141, 15, 190, 36, 206, 166, 189, 90, 5, 132, 61, 67, 11, 23, 62, 252, 106, 149, 188, 186, 179, 166, 188, 140, 190, 0, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 74, 15, 62, 177, 9, 17, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {37, 121, 234, 190, 226, 71, 127, 190, 250, 59, 45, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {148, 60, 130, 62, 39, 73, 44, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0033/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}