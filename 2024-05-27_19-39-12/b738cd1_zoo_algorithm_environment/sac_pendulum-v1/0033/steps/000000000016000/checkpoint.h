// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 20, 228, 62, 41, 206, 226, 62, 139, 143, 14, 62, 195, 141, 97, 190, 187, 230, 189, 62, 208, 137, 251, 190, 33, 23, 139, 189, 166, 41, 103, 191, 41, 87, 158, 62, 49, 209, 25, 191, 65, 252, 170, 190, 75, 117, 50, 191, 163, 143, 82, 191, 166, 156, 52, 191, 231, 240, 17, 190, 84, 171, 51, 191, 230, 53, 120, 191, 52, 27, 55, 62, 83, 130, 60, 63, 85, 244, 27, 191, 17, 148, 55, 190, 251, 237, 135, 63, 101, 247, 115, 63, 0, 181, 7, 63, 245, 252, 197, 190, 135, 167, 66, 191, 160, 194, 138, 189, 19, 103, 148, 63, 227, 119, 41, 62, 214, 172, 168, 187, 247, 66, 133, 62, 136, 71, 199, 188, 0, 229, 98, 60, 45, 206, 6, 191, 120, 221, 206, 191, 84, 191, 210, 190, 40, 98, 250, 62, 77, 99, 173, 191, 76, 250, 131, 190, 186, 169, 26, 61, 98, 22, 201, 189, 241, 4, 227, 62, 107, 241, 202, 189, 158, 120, 109, 62, 226, 61, 23, 191, 101, 93, 61, 190, 103, 115, 174, 63, 123, 184, 32, 63, 182, 78, 37, 63, 121, 237, 142, 191, 15, 220, 81, 190, 157, 29, 27, 63, 248, 45, 183, 191, 119, 160, 177, 190, 25, 0, 191, 190, 186, 142, 85, 61, 52, 135, 76, 63, 184, 205, 12, 63, 72, 62, 141, 62, 136, 135, 162, 190, 49, 252, 85, 191, 62, 53, 66, 191, 250, 33, 77, 190, 45, 76, 106, 62, 14, 110, 108, 191, 164, 138, 15, 63, 44, 122, 147, 190, 201, 158, 131, 63, 234, 77, 28, 190, 52, 159, 77, 190, 207, 193, 146, 63, 153, 153, 43, 63, 184, 54, 79, 63, 67, 26, 34, 191, 206, 182, 178, 190, 60, 162, 38, 190, 156, 33, 97, 63, 209, 145, 5, 191, 145, 21, 58, 62, 197, 36, 55, 191, 17, 145, 113, 190, 246, 78, 93, 63, 211, 166, 66, 62, 76, 51, 77, 190, 95, 29, 195, 61, 252, 106, 239, 190, 233, 215, 184, 61, 11, 207, 13, 191, 49, 244, 2, 191, 235, 78, 127, 62, 37, 132, 130, 62, 3, 80, 131, 191, 83, 93, 204, 190, 43, 231, 230, 190, 14, 120, 94, 62, 48, 38, 209, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 130, 62, 191, 89, 38, 6, 191, 103, 205, 130, 61, 184, 5, 7, 191, 63, 147, 35, 63, 124, 137, 136, 190, 24, 149, 130, 62, 120, 69, 251, 190, 139, 189, 49, 63, 1, 248, 1, 63, 123, 185, 187, 190, 173, 168, 79, 189, 243, 159, 223, 189, 237, 158, 234, 190, 145, 184, 203, 60, 248, 68, 228, 61, 228, 62, 98, 189, 113, 176, 83, 190, 250, 12, 141, 190, 153, 218, 219, 62, 17, 157, 18, 191, 126, 74, 81, 190, 54, 133, 250, 62, 80, 141, 6, 62, 126, 167, 125, 191, 179, 35, 6, 62, 248, 81, 148, 190, 164, 88, 50, 191, 131, 195, 172, 62, 79, 250, 109, 62, 135, 236, 219, 190, 55, 251, 34, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {124, 0, 254, 190, 60, 216, 58, 62, 238, 94, 193, 189, 161, 231, 13, 62, 226, 112, 113, 191, 101, 250, 52, 190, 37, 161, 5, 62, 13, 27, 2, 63, 150, 234, 117, 190, 37, 52, 14, 63, 67, 34, 60, 189, 179, 14, 112, 190, 18, 108, 44, 191, 50, 251, 83, 62, 2, 227, 112, 189, 226, 14, 17, 189, 106, 67, 26, 190, 61, 153, 36, 191, 61, 148, 185, 189, 219, 63, 54, 61, 179, 146, 201, 190, 176, 91, 151, 62, 247, 66, 53, 62, 165, 5, 27, 189, 208, 215, 87, 191, 135, 16, 177, 62, 26, 115, 197, 190, 17, 34, 189, 189, 214, 116, 33, 189, 112, 24, 28, 190, 142, 230, 248, 190, 38, 79, 13, 190, 164, 254, 251, 189, 140, 247, 47, 62, 253, 14, 23, 63, 111, 221, 15, 62, 240, 83, 103, 61, 222, 239, 99, 63, 151, 220, 189, 190, 86, 178, 220, 61, 154, 154, 44, 187, 128, 177, 242, 190, 99, 12, 32, 190, 216, 106, 255, 61, 202, 64, 196, 190, 167, 1, 68, 190, 234, 138, 140, 61, 81, 212, 178, 191, 49, 204, 251, 189, 208, 223, 247, 189, 52, 93, 53, 191, 27, 61, 105, 189, 184, 191, 53, 62, 86, 173, 12, 61, 214, 93, 20, 190, 19, 140, 195, 191, 195, 223, 198, 189, 34, 58, 166, 61, 202, 92, 35, 189, 148, 41, 1, 190, 90, 96, 102, 61, 66, 202, 42, 63, 161, 217, 109, 189, 133, 51, 17, 62, 57, 106, 29, 63, 75, 3, 90, 60, 242, 254, 153, 62, 113, 29, 202, 61, 247, 166, 146, 190, 130, 141, 250, 60, 73, 11, 169, 62, 1, 154, 253, 190, 130, 77, 197, 188, 119, 189, 211, 62, 232, 60, 239, 61, 185, 33, 112, 190, 79, 56, 143, 62, 5, 137, 82, 62, 45, 60, 60, 190, 102, 98, 143, 189, 73, 92, 149, 62, 209, 243, 180, 62, 70, 48, 11, 62, 229, 166, 142, 61, 19, 242, 79, 191, 31, 210, 20, 189, 231, 234, 148, 190, 159, 218, 133, 190, 8, 73, 229, 62, 113, 117, 14, 190, 237, 207, 98, 62, 82, 139, 196, 62, 133, 98, 155, 190, 12, 220, 115, 187, 18, 223, 248, 61, 89, 94, 168, 188, 109, 229, 64, 63, 183, 68, 154, 189, 114, 104, 151, 61, 154, 114, 93, 189, 90, 93, 150, 191, 38, 140, 87, 189, 30, 47, 161, 189, 192, 227, 122, 62, 249, 80, 211, 190, 227, 7, 51, 62, 161, 67, 158, 62, 130, 57, 24, 189, 19, 6, 160, 190, 192, 239, 107, 62, 54, 114, 60, 62, 3, 48, 83, 189, 133, 22, 198, 190, 23, 103, 39, 190, 124, 252, 216, 61, 35, 38, 148, 62, 196, 198, 169, 188, 183, 111, 68, 62, 166, 140, 206, 190, 110, 33, 56, 190, 149, 26, 137, 61, 10, 86, 22, 62, 240, 24, 27, 62, 93, 170, 69, 189, 32, 6, 238, 189, 130, 116, 24, 191, 38, 53, 127, 62, 108, 24, 209, 59, 183, 238, 15, 63, 116, 108, 125, 187, 157, 216, 84, 62, 173, 112, 160, 62, 90, 81, 144, 190, 95, 191, 148, 185, 134, 127, 156, 190, 203, 121, 74, 62, 13, 77, 213, 190, 7, 243, 163, 60, 178, 211, 128, 62, 169, 81, 167, 61, 42, 69, 172, 190, 184, 16, 19, 190, 44, 214, 120, 62, 13, 229, 40, 61, 41, 50, 249, 189, 236, 85, 0, 190, 31, 85, 111, 190, 237, 228, 85, 62, 126, 24, 118, 190, 170, 228, 2, 190, 21, 196, 73, 62, 89, 182, 219, 189, 176, 68, 157, 62, 23, 229, 6, 62, 96, 251, 141, 61, 26, 161, 193, 60, 223, 165, 151, 190, 163, 6, 16, 191, 214, 137, 125, 189, 211, 11, 15, 62, 161, 41, 12, 63, 172, 70, 78, 60, 145, 9, 122, 189, 97, 85, 182, 188, 91, 222, 60, 62, 139, 163, 147, 190, 175, 108, 93, 62, 88, 61, 109, 190, 80, 192, 83, 62, 49, 123, 129, 62, 171, 65, 43, 62, 110, 247, 205, 189, 188, 68, 243, 60, 30, 11, 169, 189, 144, 76, 201, 61, 103, 246, 56, 62, 226, 165, 112, 62, 57, 30, 254, 61, 40, 221, 122, 62, 220, 253, 105, 62, 252, 59, 251, 190, 107, 119, 162, 62, 1, 213, 152, 62, 248, 10, 187, 61, 159, 254, 237, 60, 176, 90, 78, 189, 254, 164, 21, 61, 241, 238, 240, 62, 44, 66, 156, 61, 102, 171, 143, 62, 141, 240, 149, 60, 98, 239, 142, 62, 222, 150, 51, 62, 30, 51, 234, 188, 100, 21, 61, 61, 127, 74, 35, 188, 193, 70, 74, 189, 46, 149, 99, 189, 196, 105, 239, 189, 168, 218, 204, 189, 162, 150, 38, 190, 157, 9, 19, 191, 192, 242, 107, 61, 52, 0, 153, 189, 136, 151, 103, 62, 27, 20, 234, 61, 144, 253, 131, 59, 190, 156, 116, 188, 39, 211, 246, 61, 239, 58, 212, 61, 240, 207, 25, 190, 205, 159, 10, 190, 167, 89, 156, 62, 27, 30, 131, 61, 150, 46, 166, 190, 158, 11, 222, 59, 149, 32, 44, 62, 86, 32, 65, 189, 148, 227, 87, 61, 214, 238, 196, 189, 33, 51, 237, 190, 24, 40, 115, 190, 189, 153, 255, 61, 218, 246, 95, 190, 201, 71, 239, 190, 183, 217, 239, 188, 57, 102, 146, 189, 210, 58, 200, 61, 233, 108, 5, 190, 183, 86, 19, 190, 250, 72, 148, 189, 20, 250, 215, 62, 0, 30, 245, 60, 156, 91, 215, 59, 114, 190, 134, 61, 120, 192, 168, 189, 187, 165, 159, 62, 108, 231, 115, 61, 134, 164, 131, 188, 245, 67, 112, 190, 63, 122, 142, 189, 82, 138, 138, 62, 141, 222, 167, 187, 229, 57, 20, 190, 154, 203, 111, 190, 113, 98, 191, 61, 150, 159, 194, 190, 93, 242, 52, 60, 219, 250, 177, 62, 5, 58, 145, 189, 82, 115, 145, 62, 201, 120, 77, 62, 51, 111, 150, 189, 144, 57, 18, 189, 197, 56, 77, 62, 69, 145, 231, 189, 237, 155, 238, 190, 80, 85, 35, 61, 29, 250, 37, 62, 244, 117, 85, 61, 202, 165, 59, 187, 106, 248, 240, 189, 129, 1, 161, 190, 151, 239, 179, 190, 224, 84, 21, 190, 45, 130, 103, 190, 177, 23, 14, 190, 159, 231, 132, 189, 185, 117, 202, 189, 249, 6, 77, 62, 46, 71, 43, 62, 78, 30, 0, 190, 243, 89, 108, 190, 67, 239, 148, 190, 215, 32, 187, 190, 193, 100, 34, 62, 252, 213, 157, 62, 0, 73, 200, 190, 93, 44, 115, 62, 78, 36, 39, 190, 212, 102, 245, 190, 78, 139, 59, 189, 16, 86, 80, 190, 89, 93, 16, 190, 132, 121, 66, 190, 90, 40, 72, 191, 13, 23, 187, 187, 214, 234, 109, 188, 210, 239, 96, 188, 243, 86, 68, 190, 29, 116, 164, 62, 75, 4, 91, 62, 88, 106, 93, 61, 93, 189, 105, 187, 76, 192, 169, 59, 217, 251, 67, 61, 133, 228, 250, 61, 121, 136, 240, 59, 252, 231, 113, 190, 37, 246, 58, 62, 197, 46, 144, 190, 75, 139, 16, 61, 227, 83, 58, 62, 1, 129, 122, 191, 78, 47, 209, 190, 174, 142, 222, 190, 229, 5, 132, 191, 175, 192, 79, 61, 61, 203, 119, 189, 42, 236, 114, 191, 57, 32, 173, 62, 45, 159, 45, 191, 85, 248, 114, 191, 71, 161, 86, 190, 95, 241, 201, 60, 165, 251, 240, 190, 254, 173, 202, 190, 37, 162, 176, 189, 195, 172, 122, 190, 207, 156, 151, 62, 9, 52, 40, 190, 118, 72, 47, 189, 94, 159, 79, 63, 132, 185, 2, 189, 146, 64, 138, 62, 35, 168, 100, 63, 60, 169, 57, 190, 136, 41, 128, 191, 123, 199, 55, 62, 27, 199, 53, 190, 234, 198, 183, 189, 227, 91, 208, 61, 254, 90, 202, 187, 84, 183, 199, 62, 193, 252, 50, 62, 87, 151, 108, 191, 223, 249, 119, 189, 8, 73, 150, 60, 220, 174, 183, 190, 232, 153, 128, 61, 225, 28, 110, 62, 154, 183, 54, 190, 151, 84, 247, 189, 17, 227, 102, 191, 48, 244, 221, 189, 166, 95, 217, 59, 56, 3, 62, 190, 148, 50, 67, 190, 17, 99, 115, 62, 232, 164, 154, 61, 249, 46, 63, 190, 82, 201, 87, 62, 65, 154, 249, 61, 176, 24, 236, 189, 228, 109, 96, 61, 86, 36, 208, 189, 232, 43, 54, 61, 233, 32, 148, 188, 27, 244, 18, 190, 54, 21, 225, 189, 26, 236, 186, 61, 51, 183, 55, 61, 65, 111, 79, 61, 137, 130, 3, 62, 125, 112, 245, 189, 99, 247, 76, 61, 119, 29, 156, 189, 39, 70, 200, 188, 71, 40, 8, 61, 173, 247, 11, 188, 45, 126, 209, 189, 212, 84, 178, 189, 172, 69, 1, 189, 227, 69, 36, 190, 212, 171, 38, 190, 87, 209, 225, 60, 68, 108, 242, 189, 37, 98, 21, 60, 240, 222, 3, 62, 92, 164, 234, 61, 61, 151, 80, 190, 54, 238, 163, 60, 104, 176, 196, 189, 108, 62, 24, 190, 223, 93, 79, 191, 238, 44, 247, 61, 39, 245, 169, 189, 156, 13, 174, 190, 83, 28, 151, 191, 193, 150, 70, 62, 221, 39, 151, 62, 92, 201, 238, 62, 188, 146, 29, 61, 215, 151, 182, 62, 63, 11, 131, 187, 109, 250, 7, 189, 34, 204, 251, 190, 9, 171, 131, 62, 208, 140, 43, 62, 235, 77, 166, 189, 125, 254, 4, 190, 77, 220, 120, 190, 49, 150, 143, 189, 4, 3, 23, 61, 20, 79, 49, 190, 158, 85, 158, 188, 95, 39, 62, 190, 173, 42, 78, 189, 79, 58, 88, 62, 40, 46, 247, 61, 12, 206, 180, 61, 57, 93, 180, 189, 203, 20, 254, 61, 21, 203, 113, 190, 103, 3, 213, 190, 209, 154, 169, 190, 57, 34, 100, 61, 95, 204, 19, 190, 89, 197, 233, 61, 68, 217, 178, 189, 41, 203, 61, 190, 35, 235, 254, 61, 234, 213, 43, 60, 180, 129, 97, 189, 11, 230, 213, 189, 235, 238, 39, 62, 72, 179, 173, 61, 13, 111, 168, 189, 251, 40, 203, 189, 62, 39, 222, 189, 221, 10, 22, 62, 108, 64, 47, 190, 141, 240, 148, 61, 223, 137, 154, 60, 152, 36, 23, 62, 127, 220, 48, 190, 21, 135, 34, 61, 241, 64, 14, 190, 198, 154, 41, 190, 120, 7, 9, 61, 109, 179, 60, 189, 126, 198, 136, 189, 88, 90, 133, 61, 193, 10, 126, 60, 107, 190, 35, 190, 204, 184, 243, 189, 231, 206, 174, 61, 5, 232, 33, 60, 237, 212, 17, 191, 87, 253, 39, 62, 120, 138, 13, 62, 30, 221, 227, 189, 38, 213, 145, 191, 57, 88, 21, 62, 166, 40, 167, 188, 228, 104, 123, 62, 227, 217, 109, 189, 10, 35, 191, 62, 42, 176, 73, 189, 72, 19, 186, 190, 235, 54, 32, 191, 11, 32, 8, 61, 209, 250, 76, 62, 202, 118, 134, 189, 44, 5, 15, 190, 228, 216, 169, 190, 255, 188, 71, 190, 216, 188, 19, 62, 10, 163, 133, 190, 61, 72, 167, 62, 131, 239, 141, 60, 69, 217, 172, 189, 44, 117, 31, 191, 65, 202, 29, 62, 48, 157, 162, 190, 168, 237, 24, 62, 76, 10, 138, 62, 73, 221, 198, 190, 117, 162, 145, 190, 62, 88, 151, 190, 193, 179, 11, 63, 25, 131, 68, 190, 12, 255, 183, 189, 131, 15, 226, 190, 8, 6, 70, 62, 54, 170, 103, 190, 182, 112, 132, 62, 57, 19, 185, 190, 223, 231, 40, 61, 166, 87, 43, 62, 125, 67, 56, 62, 9, 208, 200, 189, 109, 118, 165, 62, 140, 19, 34, 190, 39, 191, 163, 190, 64, 186, 152, 61, 143, 75, 163, 62, 40, 54, 140, 62, 122, 215, 175, 62, 128, 58, 150, 189, 161, 245, 197, 189, 72, 21, 74, 62, 143, 43, 246, 61, 215, 171, 35, 62, 106, 69, 45, 62, 108, 9, 59, 190, 251, 255, 149, 62, 226, 57, 61, 190, 149, 192, 51, 62, 113, 245, 17, 62, 250, 119, 125, 62, 253, 194, 121, 189, 61, 228, 253, 62, 22, 128, 251, 189, 188, 140, 98, 190, 216, 192, 144, 190, 154, 201, 80, 62, 42, 208, 225, 190, 243, 98, 72, 62, 73, 135, 200, 190, 114, 231, 139, 189, 1, 211, 173, 62, 100, 161, 61, 62, 103, 40, 227, 191, 214, 208, 194, 61, 253, 94, 234, 190, 149, 179, 91, 190, 254, 179, 129, 62, 220, 87, 70, 62, 81, 164, 162, 187, 217, 48, 203, 62, 128, 20, 3, 190, 241, 182, 159, 191, 73, 14, 131, 62, 120, 15, 149, 62, 214, 247, 128, 61, 215, 15, 70, 190, 120, 118, 229, 61, 7, 39, 172, 190, 219, 106, 28, 62, 124, 233, 18, 61, 163, 14, 118, 59, 151, 171, 200, 190, 159, 154, 214, 61, 71, 247, 135, 61, 97, 2, 136, 187, 1, 207, 13, 190, 145, 163, 35, 60, 172, 206, 161, 189, 193, 159, 47, 190, 6, 164, 117, 61, 206, 167, 0, 61, 233, 29, 185, 189, 30, 82, 178, 60, 238, 206, 185, 61, 78, 167, 152, 61, 158, 80, 221, 61, 153, 84, 65, 189, 90, 2, 46, 190, 154, 242, 81, 190, 68, 107, 255, 189, 167, 218, 24, 190, 11, 113, 211, 61, 12, 42, 29, 190, 222, 157, 184, 61, 37, 0, 132, 61, 244, 240, 14, 62, 102, 79, 9, 190, 160, 45, 111, 189, 44, 219, 70, 61, 42, 113, 45, 190, 153, 132, 187, 61, 203, 234, 200, 189, 41, 94, 184, 61, 147, 44, 216, 61, 102, 232, 183, 189, 43, 192, 133, 60, 55, 62, 15, 190, 38, 39, 80, 61, 2, 253, 0, 62, 168, 228, 58, 189, 66, 244, 189, 189, 137, 246, 26, 190, 228, 85, 251, 189, 207, 196, 167, 189, 15, 3, 252, 60, 230, 76, 177, 59, 90, 22, 22, 62, 189, 102, 37, 190, 116, 219, 252, 61, 186, 174, 51, 190, 187, 17, 61, 190, 76, 237, 149, 189, 180, 135, 42, 61, 162, 93, 227, 189, 32, 91, 236, 189, 28, 17, 24, 62, 97, 93, 236, 61, 152, 246, 136, 61, 191, 199, 204, 61, 38, 121, 242, 60, 205, 10, 140, 60, 90, 88, 252, 189, 40, 124, 243, 189, 94, 215, 160, 61, 137, 209, 184, 189, 45, 164, 218, 189, 105, 46, 196, 187, 188, 9, 190, 189, 210, 53, 208, 190, 76, 254, 12, 63, 237, 219, 169, 62, 61, 211, 139, 62, 214, 209, 64, 63, 142, 15, 185, 190, 243, 244, 85, 191, 29, 35, 142, 188, 74, 164, 118, 62, 40, 85, 216, 189, 98, 100, 110, 62, 60, 33, 34, 190, 240, 133, 138, 60, 119, 21, 128, 62, 210, 24, 130, 191, 134, 237, 6, 190, 145, 164, 50, 189, 45, 113, 56, 190, 146, 36, 84, 189, 178, 41, 145, 61, 51, 184, 217, 59, 74, 105, 129, 61, 212, 0, 100, 191, 169, 12, 94, 191, 34, 59, 200, 190, 69, 78, 41, 60, 74, 58, 155, 191, 172, 212, 159, 62, 77, 137, 187, 62, 68, 97, 153, 190, 111, 178, 247, 61, 94, 255, 26, 191, 34, 223, 189, 190, 176, 62, 27, 190, 93, 119, 93, 190, 154, 83, 208, 60, 88, 25, 48, 61, 255, 211, 2, 62, 124, 26, 133, 189, 92, 53, 61, 62, 50, 218, 212, 189, 217, 215, 164, 190, 113, 254, 74, 190, 179, 122, 98, 62, 153, 124, 148, 189, 87, 52, 144, 190, 163, 251, 53, 62, 74, 119, 112, 62, 86, 84, 105, 61, 2, 169, 135, 62, 47, 60, 255, 188, 11, 163, 171, 62, 65, 190, 219, 61, 239, 90, 51, 189, 153, 99, 27, 62, 164, 114, 20, 61, 120, 45, 95, 190, 140, 26, 18, 190, 231, 83, 238, 190, 139, 168, 71, 60, 233, 227, 78, 62, 130, 189, 46, 190, 47, 80, 185, 190, 140, 92, 247, 190, 6, 138, 160, 190, 111, 200, 174, 62, 204, 142, 213, 61, 232, 83, 27, 189, 47, 194, 22, 62, 152, 53, 101, 189, 215, 243, 24, 63, 129, 189, 174, 62, 98, 9, 133, 62, 190, 79, 137, 188, 254, 180, 18, 62, 245, 147, 153, 60, 224, 114, 217, 62, 75, 153, 197, 62, 53, 241, 231, 189, 150, 92, 45, 190, 120, 33, 45, 190, 183, 136, 88, 190, 149, 205, 110, 62, 184, 210, 245, 62, 211, 252, 234, 189, 164, 210, 30, 190, 63, 82, 119, 190, 231, 247, 35, 191, 243, 64, 63, 190, 4, 198, 219, 189, 47, 182, 221, 190, 146, 237, 206, 61, 85, 100, 205, 190, 1, 215, 64, 190, 5, 19, 55, 189, 226, 8, 129, 190, 118, 200, 48, 62, 175, 54, 159, 190, 201, 23, 238, 190, 230, 187, 8, 62, 240, 178, 16, 191, 188, 243, 54, 61, 102, 134, 93, 191, 24, 65, 150, 60, 14, 243, 6, 189, 127, 115, 255, 61, 54, 8, 235, 191, 165, 180, 216, 62, 36, 211, 40, 191, 248, 103, 28, 190, 120, 109, 60, 62, 187, 189, 34, 62, 2, 126, 212, 56, 193, 223, 169, 62, 128, 188, 199, 190, 168, 116, 222, 191, 152, 26, 241, 62, 44, 83, 223, 62, 70, 177, 174, 62, 152, 83, 217, 62, 39, 53, 175, 62, 111, 59, 141, 189, 22, 185, 233, 60, 39, 31, 235, 188, 49, 252, 148, 62, 176, 71, 1, 189, 79, 175, 43, 59, 11, 97, 170, 191, 204, 172, 212, 61, 115, 131, 63, 62, 230, 28, 197, 61, 49, 114, 207, 61, 138, 249, 15, 60, 59, 176, 123, 62, 204, 42, 16, 190, 158, 123, 180, 62, 77, 28, 150, 61, 203, 15, 149, 60, 47, 43, 248, 189, 65, 171, 145, 190, 170, 14, 62, 190, 48, 65, 89, 61, 102, 64, 96, 190, 136, 103, 61, 62, 104, 48, 164, 189, 237, 7, 52, 190, 176, 235, 26, 62, 245, 38, 244, 189, 105, 19, 143, 60, 219, 183, 145, 189, 239, 192, 64, 190, 117, 144, 99, 59, 108, 195, 25, 189, 213, 163, 99, 60, 219, 166, 226, 62, 105, 36, 154, 62, 186, 158, 19, 62, 42, 42, 7, 190, 10, 20, 130, 61, 55, 69, 65, 191, 20, 139, 5, 189, 51, 168, 139, 61, 23, 3, 100, 189, 98, 103, 63, 62, 141, 78, 20, 62, 179, 50, 61, 190, 222, 196, 122, 190, 147, 77, 56, 62, 190, 65, 191, 191, 146, 111, 50, 187, 172, 12, 198, 188, 58, 246, 138, 62, 65, 238, 18, 62, 56, 246, 225, 189, 219, 235, 84, 62, 73, 169, 50, 62, 41, 50, 136, 62, 215, 159, 79, 62, 98, 125, 64, 190, 97, 123, 117, 62, 101, 129, 72, 62, 229, 196, 128, 190, 4, 60, 94, 62, 188, 87, 190, 62, 127, 84, 166, 190, 250, 224, 9, 189, 95, 53, 91, 190, 233, 158, 7, 190, 213, 101, 248, 61, 67, 169, 87, 62, 22, 87, 65, 190, 105, 46, 191, 61, 145, 229, 114, 61, 184, 232, 57, 190, 85, 65, 210, 189, 21, 11, 32, 189, 198, 113, 128, 189, 191, 83, 19, 189, 86, 17, 166, 60, 237, 206, 191, 60, 80, 183, 163, 189, 168, 157, 194, 61, 84, 129, 98, 189, 160, 115, 101, 189, 126, 191, 17, 61, 244, 134, 161, 189, 41, 155, 50, 61, 222, 103, 251, 61, 72, 159, 168, 61, 172, 231, 88, 188, 173, 25, 254, 188, 184, 200, 51, 190, 244, 31, 226, 188, 112, 212, 123, 189, 61, 90, 206, 188, 237, 37, 210, 61, 217, 180, 223, 61, 117, 31, 241, 61, 33, 166, 247, 189, 35, 91, 230, 60, 194, 6, 41, 62, 39, 23, 169, 58, 160, 11, 60, 190, 141, 42, 92, 191, 195, 169, 219, 189, 219, 13, 137, 62, 142, 123, 65, 190, 77, 93, 165, 191, 50, 120, 99, 62, 60, 122, 139, 61, 7, 177, 245, 62, 241, 69, 180, 190, 63, 219, 20, 63, 135, 244, 31, 190, 54, 160, 216, 190, 154, 152, 14, 191, 175, 112, 176, 187, 195, 108, 135, 62, 122, 217, 64, 190, 167, 36, 11, 190, 97, 2, 48, 191, 115, 99, 202, 60, 73, 92, 139, 62, 120, 3, 143, 189, 198, 44, 253, 61, 143, 16, 181, 189, 69, 213, 44, 189, 146, 95, 124, 191, 119, 175, 103, 62, 166, 64, 15, 191, 105, 132, 106, 62, 57, 189, 85, 62, 164, 58, 14, 191, 109, 44, 201, 190, 180, 199, 6, 190, 80, 4, 34, 60, 23, 216, 17, 190, 172, 44, 21, 62, 98, 169, 26, 190, 235, 81, 168, 189, 159, 7, 240, 188, 38, 148, 177, 188, 48, 225, 3, 190, 183, 240, 33, 190, 40, 252, 206, 58, 36, 96, 249, 189, 178, 101, 52, 62, 175, 110, 8, 190, 171, 224, 105, 59, 166, 106, 175, 61, 177, 219, 0, 190, 147, 81, 27, 190, 60, 67, 242, 187, 69, 8, 74, 188, 184, 114, 41, 189, 92, 112, 131, 188, 91, 169, 65, 61, 142, 81, 228, 189, 5, 32, 217, 61, 133, 247, 47, 189, 159, 144, 171, 189, 41, 184, 215, 189, 81, 82, 140, 189, 117, 163, 146, 189, 244, 105, 19, 190, 17, 160, 129, 189, 205, 221, 135, 61, 5, 235, 33, 191, 137, 213, 138, 190, 61, 237, 114, 62, 242, 39, 112, 62, 108, 108, 43, 190, 8, 131, 169, 62, 119, 116, 7, 190, 218, 171, 36, 63, 228, 151, 23, 60, 210, 161, 181, 62, 217, 153, 136, 190, 222, 170, 128, 190, 149, 44, 82, 191, 209, 184, 229, 62, 50, 135, 12, 61, 51, 80, 82, 190, 74, 43, 136, 190, 190, 161, 20, 191, 196, 215, 180, 190, 162, 120, 102, 62, 100, 19, 23, 190, 193, 63, 96, 190, 245, 228, 159, 60, 23, 201, 192, 189, 199, 237, 24, 191, 9, 9, 158, 189, 108, 250, 173, 189, 17, 1, 49, 190, 204, 216, 47, 61, 40, 161, 106, 189, 84, 83, 120, 190, 163, 156, 238, 61, 103, 109, 129, 190, 166, 139, 171, 61, 39, 24, 165, 191, 98, 131, 148, 188, 6, 40, 131, 61, 2, 0, 218, 190, 206, 109, 255, 61, 237, 231, 40, 61, 171, 243, 60, 60, 174, 143, 59, 62, 28, 211, 50, 60, 148, 178, 2, 61, 118, 126, 88, 189, 78, 123, 80, 191, 177, 223, 35, 61, 84, 139, 159, 62, 154, 105, 73, 62, 77, 134, 16, 61, 71, 208, 150, 190, 147, 156, 157, 62, 58, 41, 218, 190, 243, 30, 181, 191, 10, 79, 244, 62, 48, 138, 203, 189, 230, 42, 4, 189, 255, 253, 14, 61, 168, 61, 176, 188, 21, 229, 113, 62, 110, 105, 179, 187, 33, 36, 212, 61, 214, 139, 31, 190, 7, 55, 57, 62, 59, 148, 5, 63, 208, 128, 42, 189, 35, 3, 182, 60, 93, 168, 135, 190, 237, 33, 134, 188, 64, 199, 124, 190, 99, 24, 170, 62, 90, 180, 202, 190, 176, 173, 122, 185, 83, 170, 186, 62, 108, 181, 167, 62, 103, 143, 62, 191, 150, 23, 143, 57, 52, 232, 213, 189, 164, 207, 41, 190, 167, 167, 152, 62, 232, 195, 137, 62, 121, 40, 14, 62, 193, 241, 95, 62, 254, 153, 20, 190, 210, 219, 150, 191, 241, 169, 57, 62, 9, 155, 6, 62, 226, 249, 145, 62, 86, 246, 167, 190, 251, 60, 131, 59, 136, 179, 131, 60, 72, 90, 162, 62, 35, 205, 23, 187, 74, 61, 15, 62, 217, 35, 20, 60, 127, 94, 40, 62, 126, 13, 34, 191, 236, 238, 183, 188, 25, 119, 207, 61, 142, 85, 114, 190, 68, 15, 16, 191, 95, 124, 62, 62, 82, 102, 101, 62, 174, 7, 211, 61, 139, 137, 251, 189, 2, 45, 181, 62, 41, 236, 7, 190, 224, 196, 18, 190, 138, 145, 213, 190, 244, 185, 11, 62, 108, 62, 150, 62, 13, 12, 31, 62, 50, 140, 61, 189, 18, 216, 46, 191, 74, 23, 95, 189, 92, 105, 60, 61, 47, 126, 194, 190, 221, 109, 225, 60, 232, 168, 131, 62, 225, 111, 27, 62, 247, 93, 209, 191, 238, 196, 81, 62, 25, 54, 222, 190, 16, 4, 3, 62, 149, 120, 111, 61, 100, 50, 102, 190, 28, 122, 134, 190, 156, 137, 190, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 206, 144, 189, 31, 165, 135, 190, 186, 211, 53, 61, 113, 117, 109, 190, 130, 69, 67, 190, 130, 144, 161, 62, 242, 11, 149, 190, 41, 124, 18, 190, 0, 190, 247, 61, 177, 67, 179, 60, 160, 20, 174, 60, 98, 109, 113, 189, 87, 164, 135, 190, 154, 86, 149, 188, 191, 16, 39, 189, 105, 238, 76, 61, 177, 207, 81, 62, 166, 11, 220, 60, 221, 233, 109, 189, 41, 40, 156, 188, 85, 162, 202, 189, 67, 254, 124, 62, 43, 16, 147, 61, 97, 59, 137, 62, 123, 36, 6, 190, 69, 141, 30, 190, 140, 121, 197, 189, 79, 206, 158, 189, 181, 233, 203, 189, 222, 163, 80, 62, 80, 114, 84, 62, 213, 240, 135, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 113, 47, 191, 113, 229, 176, 62, 254, 76, 175, 62, 86, 251, 29, 63, 230, 237, 204, 62, 156, 51, 52, 62, 226, 44, 160, 190, 130, 14, 246, 189, 74, 142, 228, 190, 76, 212, 146, 191, 119, 158, 218, 190, 90, 69, 5, 188, 199, 51, 49, 191, 110, 55, 88, 61, 98, 162, 36, 191, 208, 193, 140, 62, 39, 54, 5, 63, 102, 128, 179, 189, 225, 219, 30, 61, 82, 149, 149, 191, 255, 96, 48, 190, 22, 117, 24, 191, 64, 21, 163, 63, 107, 236, 162, 61, 87, 220, 3, 191, 241, 235, 33, 190, 193, 220, 93, 191, 183, 130, 250, 60, 224, 8, 77, 191, 201, 99, 133, 62, 180, 190, 187, 62, 212, 174, 163, 190, 174, 207, 137, 61, 161, 105, 137, 189, 109, 151, 57, 62, 124, 232, 3, 63, 173, 189, 215, 61, 202, 125, 36, 190, 121, 115, 34, 62, 211, 16, 104, 61, 1, 48, 94, 61, 143, 68, 40, 61, 165, 237, 230, 61, 74, 157, 187, 189, 207, 120, 148, 189, 221, 150, 106, 61, 57, 114, 187, 190, 37, 10, 144, 189, 139, 75, 176, 188, 141, 146, 12, 62, 235, 3, 202, 61, 3, 208, 223, 62, 217, 113, 17, 61, 129, 234, 192, 190, 244, 177, 214, 62, 57, 180, 152, 190, 123, 77, 56, 188, 20, 139, 0, 190, 231, 48, 115, 190, 96, 240, 15, 61, 98, 244, 16, 63, 97, 236, 254, 189, 51, 103, 74, 189, 6, 160, 122, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 151, 158, 62, 126, 204, 204, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {80, 234, 27, 191, 108, 152, 150, 63, 50, 203, 81, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {159, 97, 136, 64, 182, 131, 225, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0033/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}