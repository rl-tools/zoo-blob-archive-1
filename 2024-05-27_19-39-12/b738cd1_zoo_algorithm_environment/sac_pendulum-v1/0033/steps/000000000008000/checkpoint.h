// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {146, 210, 21, 63, 131, 177, 199, 62, 23, 135, 30, 62, 246, 244, 168, 190, 24, 252, 188, 62, 102, 64, 1, 191, 169, 253, 6, 190, 101, 84, 36, 191, 73, 177, 173, 62, 149, 59, 26, 191, 42, 122, 225, 188, 152, 232, 65, 191, 31, 179, 46, 191, 14, 157, 24, 191, 0, 237, 35, 190, 48, 128, 218, 190, 39, 22, 106, 191, 150, 167, 21, 62, 202, 213, 94, 63, 225, 63, 30, 191, 163, 6, 54, 190, 48, 98, 115, 63, 216, 140, 90, 63, 88, 101, 24, 63, 204, 76, 124, 190, 147, 165, 104, 191, 72, 76, 68, 189, 175, 169, 146, 63, 141, 204, 187, 62, 97, 51, 157, 60, 247, 66, 133, 62, 136, 71, 199, 188, 0, 229, 98, 60, 10, 22, 23, 191, 47, 121, 73, 191, 169, 131, 255, 190, 18, 217, 252, 62, 127, 130, 145, 191, 232, 91, 122, 190, 193, 5, 145, 61, 51, 210, 65, 190, 158, 6, 251, 62, 121, 252, 115, 190, 240, 205, 182, 62, 228, 183, 18, 191, 179, 174, 46, 190, 12, 23, 127, 63, 84, 195, 34, 63, 179, 59, 45, 63, 243, 151, 91, 191, 232, 239, 175, 190, 67, 88, 32, 63, 94, 229, 154, 191, 180, 15, 172, 190, 155, 46, 217, 190, 145, 120, 40, 190, 97, 201, 76, 63, 8, 152, 198, 62, 116, 56, 214, 62, 28, 98, 1, 191, 135, 110, 51, 191, 121, 93, 33, 191, 197, 204, 134, 190, 156, 41, 63, 61, 112, 160, 98, 191, 235, 137, 21, 63, 203, 109, 130, 190, 144, 197, 103, 63, 37, 255, 29, 190, 4, 9, 150, 189, 230, 81, 20, 63, 91, 22, 77, 63, 123, 106, 78, 63, 191, 69, 37, 191, 97, 90, 173, 190, 102, 169, 106, 61, 225, 45, 63, 63, 155, 50, 14, 191, 237, 208, 56, 62, 209, 99, 10, 191, 175, 43, 165, 190, 45, 130, 94, 63, 109, 22, 37, 62, 197, 31, 79, 190, 181, 235, 33, 61, 204, 221, 220, 190, 170, 39, 86, 62, 215, 196, 21, 191, 147, 101, 37, 191, 57, 217, 37, 62, 227, 209, 216, 61, 184, 182, 83, 191, 57, 181, 243, 190, 43, 111, 19, 191, 31, 23, 7, 62, 41, 136, 205, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 73, 41, 191, 228, 187, 5, 191, 58, 147, 254, 61, 41, 204, 140, 190, 120, 12, 33, 63, 117, 250, 133, 190, 150, 76, 206, 62, 74, 16, 239, 190, 136, 108, 56, 63, 2, 40, 234, 62, 123, 185, 187, 190, 158, 62, 174, 190, 196, 70, 133, 190, 74, 90, 179, 190, 252, 168, 135, 61, 221, 220, 18, 61, 116, 49, 7, 189, 149, 17, 131, 190, 226, 191, 159, 190, 180, 49, 245, 62, 206, 223, 6, 191, 201, 152, 235, 189, 210, 33, 16, 63, 232, 5, 213, 61, 91, 108, 82, 191, 166, 0, 204, 61, 214, 58, 68, 190, 55, 187, 12, 191, 179, 147, 166, 62, 53, 165, 213, 189, 35, 211, 223, 190, 80, 183, 26, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 2, 11, 191, 87, 73, 126, 61, 154, 154, 27, 190, 29, 48, 79, 61, 151, 184, 43, 191, 241, 190, 82, 190, 20, 118, 25, 62, 213, 37, 231, 62, 230, 170, 119, 190, 225, 51, 10, 63, 67, 34, 60, 189, 184, 55, 48, 190, 221, 182, 16, 191, 239, 221, 99, 62, 202, 120, 23, 190, 165, 1, 114, 60, 29, 54, 189, 189, 113, 163, 6, 191, 200, 129, 134, 189, 233, 11, 89, 61, 170, 148, 170, 188, 22, 118, 80, 62, 217, 28, 122, 62, 117, 13, 176, 187, 202, 123, 243, 190, 160, 235, 129, 62, 53, 51, 151, 190, 105, 39, 238, 187, 88, 126, 94, 189, 218, 68, 226, 189, 208, 141, 218, 190, 248, 75, 49, 190, 164, 254, 251, 189, 190, 89, 19, 62, 89, 199, 98, 62, 181, 242, 227, 61, 62, 8, 172, 61, 53, 138, 190, 62, 19, 140, 85, 190, 86, 178, 220, 61, 143, 80, 199, 60, 158, 52, 149, 190, 99, 12, 32, 190, 27, 148, 115, 61, 48, 138, 145, 190, 163, 125, 1, 190, 63, 102, 120, 61, 123, 58, 84, 191, 215, 224, 15, 189, 207, 185, 147, 189, 219, 43, 35, 191, 182, 124, 61, 189, 221, 158, 17, 62, 196, 121, 44, 190, 91, 8, 175, 189, 157, 102, 134, 191, 7, 75, 122, 190, 242, 172, 196, 61, 180, 111, 10, 189, 120, 128, 134, 190, 80, 93, 182, 189, 238, 61, 182, 62, 228, 106, 133, 189, 61, 246, 40, 62, 99, 10, 123, 62, 188, 1, 137, 189, 151, 6, 138, 62, 64, 28, 180, 61, 42, 68, 133, 190, 101, 110, 96, 189, 92, 178, 170, 62, 202, 135, 183, 190, 19, 7, 26, 188, 191, 60, 213, 62, 232, 60, 239, 61, 160, 143, 26, 190, 203, 25, 50, 62, 219, 48, 9, 62, 92, 188, 28, 190, 46, 172, 124, 189, 7, 75, 129, 62, 27, 72, 126, 62, 206, 125, 188, 61, 27, 161, 137, 61, 217, 239, 32, 191, 93, 17, 42, 189, 16, 116, 135, 190, 61, 64, 129, 190, 91, 215, 15, 62, 62, 142, 167, 189, 46, 199, 13, 62, 87, 127, 170, 62, 99, 80, 185, 190, 13, 223, 248, 189, 85, 202, 15, 61, 226, 41, 120, 188, 81, 13, 46, 63, 120, 42, 242, 189, 114, 182, 40, 61, 150, 81, 173, 189, 82, 139, 133, 191, 177, 2, 120, 188, 4, 13, 25, 190, 205, 158, 94, 62, 167, 146, 142, 190, 18, 203, 224, 61, 161, 67, 158, 62, 52, 75, 18, 186, 66, 44, 61, 190, 172, 26, 90, 62, 127, 101, 15, 62, 0, 223, 66, 189, 127, 29, 161, 190, 173, 111, 34, 190, 214, 75, 17, 62, 240, 85, 203, 188, 102, 159, 183, 188, 175, 44, 39, 62, 179, 54, 216, 190, 247, 72, 48, 190, 197, 46, 149, 189, 138, 24, 166, 61, 24, 231, 254, 61, 11, 1, 162, 189, 94, 34, 235, 189, 61, 72, 24, 191, 186, 97, 45, 62, 5, 170, 43, 189, 154, 30, 194, 62, 26, 62, 59, 189, 125, 213, 76, 62, 82, 25, 129, 62, 24, 174, 162, 190, 58, 89, 232, 187, 49, 235, 33, 190, 49, 149, 28, 62, 130, 201, 205, 190, 182, 244, 13, 62, 178, 211, 128, 62, 195, 248, 155, 189, 36, 114, 194, 190, 146, 164, 162, 60, 191, 167, 104, 62, 25, 192, 95, 189, 21, 231, 133, 189, 22, 150, 122, 190, 1, 214, 170, 189, 223, 114, 126, 62, 112, 131, 215, 190, 112, 208, 129, 189, 86, 210, 105, 62, 77, 146, 86, 190, 75, 255, 223, 60, 105, 63, 13, 62, 72, 236, 146, 189, 217, 112, 4, 62, 169, 24, 12, 190, 35, 117, 11, 191, 110, 129, 60, 190, 144, 26, 19, 62, 113, 243, 44, 63, 161, 128, 250, 60, 85, 48, 24, 189, 71, 123, 5, 189, 254, 177, 20, 62, 179, 207, 133, 190, 160, 85, 82, 62, 189, 32, 95, 190, 92, 25, 75, 62, 59, 20, 138, 62, 171, 65, 43, 62, 255, 160, 219, 189, 222, 58, 62, 61, 49, 11, 10, 190, 121, 175, 178, 61, 228, 170, 70, 62, 21, 30, 104, 62, 176, 73, 243, 61, 130, 66, 111, 62, 99, 49, 77, 62, 199, 87, 219, 190, 31, 0, 179, 62, 62, 135, 109, 62, 144, 235, 184, 61, 140, 201, 217, 189, 218, 247, 49, 189, 135, 128, 148, 60, 66, 151, 177, 62, 96, 84, 120, 61, 207, 157, 115, 62, 31, 69, 169, 188, 218, 147, 103, 62, 222, 150, 51, 62, 30, 51, 234, 188, 100, 21, 61, 61, 127, 74, 35, 188, 193, 70, 74, 189, 46, 149, 99, 189, 196, 105, 239, 189, 168, 218, 204, 189, 162, 150, 38, 190, 157, 9, 19, 191, 192, 242, 107, 61, 52, 0, 153, 189, 136, 151, 103, 62, 27, 20, 234, 61, 144, 253, 131, 59, 190, 156, 116, 188, 39, 211, 246, 61, 239, 58, 212, 61, 240, 207, 25, 190, 205, 159, 10, 190, 167, 89, 156, 62, 27, 30, 131, 61, 150, 46, 166, 190, 158, 11, 222, 59, 149, 32, 44, 62, 86, 32, 65, 189, 148, 227, 87, 61, 214, 238, 196, 189, 33, 51, 237, 190, 24, 40, 115, 190, 189, 153, 255, 61, 218, 246, 95, 190, 204, 60, 204, 190, 125, 156, 149, 189, 15, 77, 246, 189, 66, 162, 129, 61, 47, 225, 192, 189, 91, 204, 110, 190, 147, 6, 20, 189, 235, 25, 219, 62, 131, 145, 102, 60, 120, 81, 117, 61, 114, 190, 134, 61, 59, 2, 208, 189, 209, 34, 172, 62, 112, 7, 208, 61, 140, 226, 3, 189, 80, 23, 66, 190, 38, 237, 63, 189, 116, 195, 143, 62, 38, 152, 22, 61, 196, 21, 154, 189, 227, 237, 100, 190, 121, 223, 35, 61, 82, 111, 73, 190, 86, 57, 61, 61, 239, 206, 183, 62, 150, 159, 190, 189, 243, 93, 137, 62, 78, 53, 144, 62, 22, 196, 141, 189, 106, 147, 241, 188, 89, 92, 75, 62, 229, 118, 145, 189, 94, 146, 187, 190, 84, 150, 112, 59, 137, 82, 72, 62, 105, 70, 209, 60, 32, 23, 89, 189, 46, 227, 204, 189, 108, 29, 65, 190, 4, 106, 40, 190, 160, 65, 8, 190, 92, 145, 203, 189, 177, 23, 14, 190, 219, 188, 165, 189, 103, 114, 147, 189, 119, 163, 64, 62, 225, 104, 25, 62, 235, 213, 25, 60, 77, 44, 88, 189, 155, 192, 251, 189, 37, 179, 141, 190, 99, 219, 43, 62, 42, 52, 213, 61, 137, 225, 177, 190, 249, 49, 107, 62, 173, 179, 63, 189, 191, 243, 224, 189, 87, 149, 145, 189, 243, 143, 77, 190, 136, 124, 237, 60, 241, 175, 247, 189, 24, 67, 7, 191, 209, 90, 31, 60, 27, 174, 250, 188, 224, 16, 144, 189, 28, 92, 131, 190, 156, 39, 246, 62, 229, 19, 44, 62, 39, 200, 49, 61, 40, 51, 123, 62, 44, 128, 158, 61, 237, 139, 186, 189, 79, 214, 51, 62, 52, 192, 154, 61, 252, 231, 113, 190, 245, 63, 17, 62, 7, 43, 147, 190, 183, 78, 13, 61, 73, 178, 34, 62, 170, 38, 248, 190, 74, 95, 137, 190, 13, 128, 173, 190, 154, 185, 140, 191, 191, 235, 35, 61, 20, 80, 134, 190, 29, 5, 81, 191, 71, 166, 184, 62, 203, 179, 163, 190, 188, 245, 221, 190, 230, 114, 121, 190, 72, 102, 16, 189, 34, 205, 154, 190, 54, 37, 137, 189, 229, 200, 12, 62, 111, 3, 151, 190, 3, 64, 152, 62, 9, 52, 40, 190, 26, 141, 145, 189, 241, 239, 16, 63, 111, 235, 244, 188, 245, 252, 107, 62, 242, 41, 0, 63, 15, 248, 28, 190, 236, 109, 49, 61, 36, 133, 26, 62, 126, 243, 158, 189, 234, 198, 183, 189, 246, 211, 9, 62, 244, 21, 76, 60, 85, 151, 150, 62, 88, 30, 45, 62, 94, 92, 236, 190, 4, 186, 46, 188, 52, 203, 156, 61, 160, 172, 252, 190, 5, 142, 140, 61, 56, 250, 74, 62, 22, 59, 187, 190, 223, 179, 15, 190, 180, 186, 24, 191, 39, 249, 156, 61, 1, 60, 210, 188, 211, 177, 24, 190, 189, 133, 61, 190, 72, 141, 54, 62, 255, 113, 201, 189, 93, 137, 17, 190, 27, 106, 84, 62, 65, 154, 249, 61, 176, 24, 236, 189, 244, 26, 134, 61, 172, 46, 200, 189, 90, 223, 144, 61, 244, 204, 188, 187, 86, 9, 17, 190, 54, 21, 225, 189, 245, 166, 236, 61, 51, 183, 55, 61, 65, 111, 79, 61, 61, 211, 19, 62, 40, 43, 238, 189, 99, 247, 76, 61, 122, 250, 154, 189, 39, 70, 200, 188, 48, 44, 14, 61, 96, 38, 198, 187, 214, 129, 208, 189, 212, 84, 178, 189, 245, 70, 189, 188, 185, 115, 32, 190, 214, 221, 35, 190, 87, 209, 225, 60, 68, 108, 242, 189, 37, 98, 21, 60, 244, 195, 4, 62, 92, 164, 234, 61, 144, 16, 71, 190, 38, 58, 12, 61, 131, 252, 193, 189, 43, 100, 8, 190, 84, 95, 88, 191, 199, 193, 136, 62, 194, 215, 0, 190, 73, 34, 15, 189, 123, 188, 66, 191, 58, 118, 40, 62, 183, 66, 131, 62, 182, 106, 206, 62, 23, 246, 185, 187, 221, 55, 153, 62, 63, 11, 131, 187, 118, 224, 37, 189, 101, 45, 231, 190, 234, 112, 150, 62, 91, 178, 190, 61, 244, 220, 104, 188, 241, 219, 20, 190, 148, 63, 120, 190, 177, 23, 216, 188, 55, 134, 56, 61, 20, 79, 49, 190, 118, 117, 196, 189, 187, 1, 196, 188, 228, 231, 58, 188, 221, 137, 87, 189, 211, 184, 47, 61, 52, 27, 0, 189, 155, 10, 122, 189, 85, 227, 213, 61, 166, 81, 36, 190, 181, 68, 73, 190, 251, 211, 139, 190, 57, 34, 100, 61, 95, 204, 19, 190, 111, 166, 234, 61, 68, 217, 178, 189, 41, 203, 61, 190, 35, 235, 254, 61, 177, 135, 119, 60, 208, 73, 89, 189, 78, 254, 209, 189, 59, 197, 45, 62, 72, 179, 173, 61, 13, 111, 168, 189, 1, 66, 201, 189, 62, 39, 222, 189, 221, 10, 22, 62, 108, 64, 47, 190, 212, 145, 153, 61, 79, 219, 165, 60, 152, 36, 23, 62, 156, 59, 46, 190, 21, 135, 34, 61, 7, 188, 13, 190, 58, 234, 40, 190, 10, 115, 11, 61, 109, 179, 60, 189, 126, 198, 136, 189, 88, 90, 133, 61, 8, 219, 134, 60, 43, 27, 34, 190, 204, 184, 243, 189, 231, 206, 174, 61, 5, 232, 33, 60, 9, 187, 249, 190, 182, 70, 162, 61, 70, 60, 173, 60, 69, 93, 91, 190, 153, 182, 50, 191, 169, 167, 138, 189, 37, 214, 245, 188, 211, 206, 75, 62, 175, 165, 219, 189, 212, 54, 181, 62, 42, 176, 73, 189, 108, 47, 113, 190, 98, 109, 221, 190, 20, 200, 128, 187, 184, 127, 147, 61, 18, 137, 253, 60, 149, 232, 178, 189, 148, 243, 52, 190, 5, 85, 87, 190, 81, 166, 8, 62, 10, 163, 133, 190, 137, 196, 53, 62, 246, 80, 18, 62, 115, 239, 67, 189, 131, 227, 187, 190, 155, 36, 140, 61, 76, 52, 196, 189, 42, 162, 204, 61, 85, 209, 117, 62, 120, 197, 222, 190, 112, 138, 138, 190, 58, 28, 151, 190, 8, 19, 25, 63, 19, 41, 107, 189, 90, 219, 83, 189, 42, 254, 193, 190, 117, 2, 80, 62, 169, 15, 30, 190, 82, 109, 122, 62, 187, 129, 182, 190, 33, 205, 138, 61, 255, 204, 47, 62, 125, 67, 56, 62, 46, 35, 34, 189, 231, 134, 155, 62, 65, 13, 79, 190, 6, 100, 82, 190, 168, 33, 101, 61, 200, 127, 160, 62, 212, 18, 138, 62, 205, 72, 176, 62, 156, 85, 140, 189, 227, 134, 25, 61, 79, 9, 119, 62, 212, 121, 204, 60, 116, 254, 22, 62, 158, 201, 128, 61, 48, 186, 141, 189, 84, 11, 139, 62, 15, 149, 114, 190, 120, 54, 37, 62, 158, 131, 22, 62, 66, 18, 98, 62, 152, 194, 196, 189, 212, 76, 7, 63, 79, 236, 158, 189, 115, 125, 48, 190, 103, 24, 143, 190, 241, 105, 88, 62, 117, 150, 185, 190, 86, 246, 75, 62, 243, 129, 200, 190, 59, 46, 151, 188, 181, 81, 176, 62, 100, 161, 61, 62, 138, 219, 28, 191, 101, 138, 234, 61, 193, 242, 3, 191, 99, 106, 113, 190, 217, 97, 76, 62, 25, 63, 86, 62, 53, 91, 138, 60, 186, 55, 192, 62, 68, 13, 37, 190, 104, 238, 45, 191, 79, 101, 153, 62, 56, 231, 117, 61, 142, 138, 179, 60, 118, 141, 111, 190, 5, 236, 151, 61, 205, 193, 65, 189, 40, 66, 185, 61, 205, 13, 52, 61, 232, 124, 214, 59, 250, 98, 39, 190, 21, 45, 211, 188, 71, 247, 135, 61, 97, 2, 136, 187, 1, 207, 13, 190, 145, 163, 35, 60, 172, 206, 161, 189, 193, 159, 47, 190, 6, 164, 117, 61, 206, 167, 0, 61, 233, 29, 185, 189, 30, 82, 178, 60, 238, 206, 185, 61, 78, 167, 152, 61, 158, 80, 221, 61, 153, 84, 65, 189, 90, 2, 46, 190, 154, 242, 81, 190, 68, 107, 255, 189, 167, 218, 24, 190, 11, 113, 211, 61, 12, 42, 29, 190, 222, 157, 184, 61, 37, 0, 132, 61, 244, 240, 14, 62, 102, 79, 9, 190, 160, 45, 111, 189, 44, 219, 70, 61, 42, 113, 45, 190, 153, 132, 187, 61, 203, 234, 200, 189, 41, 94, 184, 61, 147, 44, 216, 61, 102, 232, 183, 189, 43, 192, 133, 60, 55, 62, 15, 190, 38, 39, 80, 61, 2, 253, 0, 62, 168, 228, 58, 189, 66, 244, 189, 189, 137, 246, 26, 190, 228, 85, 251, 189, 207, 196, 167, 189, 15, 3, 252, 60, 230, 76, 177, 59, 90, 22, 22, 62, 189, 102, 37, 190, 116, 219, 252, 61, 186, 174, 51, 190, 187, 17, 61, 190, 76, 237, 149, 189, 180, 135, 42, 61, 162, 93, 227, 189, 32, 91, 236, 189, 28, 17, 24, 62, 97, 93, 236, 61, 152, 246, 136, 61, 191, 199, 204, 61, 38, 121, 242, 60, 205, 10, 140, 60, 90, 88, 252, 189, 40, 124, 243, 189, 94, 215, 160, 61, 137, 209, 184, 189, 45, 164, 218, 189, 105, 46, 196, 187, 188, 9, 190, 189, 84, 145, 199, 190, 5, 140, 162, 62, 234, 202, 184, 62, 148, 77, 91, 62, 147, 186, 216, 62, 252, 172, 230, 190, 85, 90, 247, 61, 117, 77, 216, 189, 124, 158, 7, 63, 40, 85, 216, 189, 220, 127, 105, 62, 247, 10, 50, 190, 211, 12, 130, 189, 206, 238, 144, 62, 228, 222, 6, 191, 146, 166, 47, 190, 87, 152, 44, 189, 47, 161, 133, 190, 147, 37, 227, 59, 26, 65, 6, 62, 132, 168, 46, 190, 121, 114, 193, 61, 15, 166, 17, 191, 96, 204, 232, 190, 128, 37, 190, 190, 202, 52, 48, 61, 46, 217, 121, 191, 40, 105, 137, 61, 43, 153, 97, 62, 242, 181, 130, 190, 139, 27, 23, 62, 7, 28, 40, 191, 222, 201, 134, 190, 255, 115, 28, 190, 83, 227, 182, 189, 211, 73, 208, 61, 161, 165, 107, 60, 89, 185, 182, 61, 190, 55, 104, 189, 73, 178, 29, 62, 217, 16, 76, 190, 217, 215, 164, 190, 231, 149, 5, 190, 8, 205, 75, 62, 90, 122, 8, 60, 2, 181, 252, 189, 96, 107, 69, 62, 131, 132, 77, 62, 250, 219, 68, 59, 129, 168, 154, 62, 137, 60, 172, 59, 50, 159, 185, 62, 236, 58, 206, 61, 115, 184, 94, 62, 181, 10, 55, 62, 251, 97, 135, 62, 149, 134, 16, 188, 24, 20, 192, 60, 137, 184, 120, 190, 236, 210, 254, 187, 156, 82, 115, 62, 179, 180, 51, 61, 50, 20, 169, 189, 203, 170, 228, 190, 61, 225, 153, 190, 195, 49, 140, 62, 36, 255, 214, 61, 152, 219, 142, 189, 127, 213, 30, 61, 242, 176, 244, 188, 197, 205, 239, 62, 223, 86, 153, 62, 211, 58, 156, 62, 190, 79, 137, 188, 149, 177, 210, 61, 13, 226, 173, 61, 180, 63, 211, 62, 45, 253, 200, 62, 228, 13, 234, 189, 146, 231, 9, 190, 16, 55, 201, 189, 69, 241, 150, 190, 89, 96, 144, 62, 183, 34, 198, 62, 48, 188, 67, 190, 122, 180, 193, 189, 41, 201, 142, 190, 40, 77, 218, 190, 135, 181, 46, 190, 89, 226, 229, 189, 128, 42, 150, 190, 153, 106, 229, 61, 252, 229, 212, 190, 225, 28, 69, 190, 198, 57, 75, 188, 60, 231, 131, 190, 204, 18, 91, 62, 153, 8, 167, 190, 241, 132, 217, 190, 229, 92, 65, 62, 8, 173, 221, 190, 81, 59, 229, 61, 254, 164, 88, 191, 1, 44, 56, 61, 248, 255, 140, 61, 127, 115, 255, 61, 174, 221, 60, 191, 169, 183, 106, 62, 63, 188, 49, 191, 218, 247, 43, 190, 124, 67, 228, 61, 54, 42, 244, 61, 125, 72, 114, 189, 49, 57, 169, 62, 3, 154, 91, 190, 220, 138, 139, 191, 59, 142, 231, 62, 34, 3, 93, 62, 246, 24, 142, 62, 245, 147, 13, 61, 210, 215, 149, 62, 179, 49, 155, 189, 84, 243, 115, 62, 155, 204, 227, 188, 99, 81, 182, 62, 231, 17, 90, 60, 161, 221, 234, 188, 113, 38, 222, 190, 135, 212, 10, 62, 134, 20, 93, 62, 161, 100, 157, 61, 18, 165, 17, 189, 128, 196, 14, 189, 65, 62, 113, 62, 175, 34, 37, 189, 59, 182, 146, 62, 24, 1, 226, 61, 203, 15, 149, 60, 33, 192, 20, 190, 207, 21, 61, 190, 120, 1, 69, 190, 149, 169, 8, 61, 117, 102, 9, 189, 156, 61, 82, 62, 151, 7, 135, 188, 135, 248, 43, 190, 122, 186, 240, 61, 63, 93, 127, 189, 112, 213, 132, 61, 158, 246, 234, 189, 209, 148, 205, 189, 103, 143, 109, 189, 242, 53, 157, 188, 68, 62, 190, 186, 171, 84, 151, 62, 239, 183, 150, 62, 65, 119, 56, 61, 149, 116, 60, 190, 226, 100, 151, 59, 217, 123, 13, 191, 189, 149, 15, 61, 177, 189, 163, 188, 64, 42, 255, 188, 37, 30, 155, 61, 31, 94, 216, 59, 241, 157, 60, 190, 73, 123, 65, 190, 146, 166, 141, 61, 109, 206, 150, 191, 146, 111, 50, 187, 158, 210, 75, 189, 27, 87, 129, 62, 65, 233, 198, 61, 126, 127, 85, 189, 96, 129, 57, 62, 160, 58, 39, 62, 6, 6, 127, 62, 13, 122, 250, 61, 205, 182, 209, 189, 224, 35, 54, 62, 9, 240, 223, 61, 232, 233, 20, 190, 254, 10, 50, 62, 178, 121, 213, 62, 160, 3, 102, 190, 182, 49, 32, 189, 199, 147, 156, 187, 132, 184, 86, 190, 87, 231, 20, 189, 126, 159, 86, 62, 43, 149, 53, 190, 105, 46, 191, 61, 145, 229, 114, 61, 184, 232, 57, 190, 85, 65, 210, 189, 21, 11, 32, 189, 198, 113, 128, 189, 191, 83, 19, 189, 86, 17, 166, 60, 237, 206, 191, 60, 80, 183, 163, 189, 168, 157, 194, 61, 84, 129, 98, 189, 160, 115, 101, 189, 126, 191, 17, 61, 244, 134, 161, 189, 41, 155, 50, 61, 222, 103, 251, 61, 72, 159, 168, 61, 172, 231, 88, 188, 173, 25, 254, 188, 184, 200, 51, 190, 244, 31, 226, 188, 112, 212, 123, 189, 61, 90, 206, 188, 237, 37, 210, 61, 217, 180, 223, 61, 117, 31, 241, 61, 33, 166, 247, 189, 35, 91, 230, 60, 194, 6, 41, 62, 39, 23, 169, 58, 160, 11, 60, 190, 177, 230, 91, 191, 53, 89, 10, 190, 67, 73, 74, 62, 238, 221, 93, 190, 91, 33, 125, 191, 113, 109, 15, 62, 219, 244, 94, 61, 121, 210, 225, 62, 50, 188, 201, 190, 252, 160, 12, 63, 135, 244, 31, 190, 76, 89, 106, 190, 170, 212, 219, 190, 116, 226, 238, 59, 246, 77, 88, 62, 15, 7, 139, 189, 72, 91, 205, 189, 144, 88, 16, 191, 110, 39, 122, 61, 83, 26, 143, 62, 156, 105, 65, 189, 106, 122, 173, 60, 140, 69, 167, 61, 117, 126, 13, 61, 255, 151, 10, 191, 245, 38, 73, 62, 99, 220, 195, 190, 200, 137, 136, 62, 159, 131, 58, 62, 39, 58, 4, 191, 145, 24, 126, 190, 153, 25, 192, 189, 80, 4, 34, 60, 23, 216, 17, 190, 172, 44, 21, 62, 98, 169, 26, 190, 235, 81, 168, 189, 159, 7, 240, 188, 38, 148, 177, 188, 48, 225, 3, 190, 183, 240, 33, 190, 40, 252, 206, 58, 36, 96, 249, 189, 178, 101, 52, 62, 175, 110, 8, 190, 171, 224, 105, 59, 166, 106, 175, 61, 177, 219, 0, 190, 147, 81, 27, 190, 60, 67, 242, 187, 69, 8, 74, 188, 184, 114, 41, 189, 92, 112, 131, 188, 91, 169, 65, 61, 142, 81, 228, 189, 5, 32, 217, 61, 133, 247, 47, 189, 159, 144, 171, 189, 41, 184, 215, 189, 81, 82, 140, 189, 117, 163, 146, 189, 244, 105, 19, 190, 17, 160, 129, 189, 205, 221, 135, 61, 167, 9, 68, 191, 109, 200, 136, 190, 14, 147, 92, 62, 235, 224, 150, 62, 80, 138, 40, 59, 105, 75, 181, 62, 194, 75, 38, 190, 185, 70, 244, 62, 115, 168, 186, 61, 205, 68, 211, 61, 217, 153, 136, 190, 12, 171, 197, 188, 244, 104, 205, 190, 150, 117, 251, 62, 38, 1, 196, 60, 24, 193, 210, 189, 107, 151, 150, 189, 163, 97, 246, 189, 8, 108, 159, 190, 254, 91, 87, 62, 192, 36, 46, 187, 77, 15, 130, 190, 92, 73, 205, 188, 129, 254, 19, 189, 205, 74, 138, 190, 161, 48, 254, 189, 218, 123, 179, 61, 41, 229, 29, 190, 81, 82, 29, 61, 248, 132, 59, 60, 203, 184, 198, 189, 182, 37, 245, 61, 96, 141, 43, 190, 71, 13, 197, 61, 66, 243, 172, 190, 2, 109, 24, 189, 205, 238, 138, 60, 50, 239, 75, 190, 104, 224, 222, 61, 142, 110, 5, 61, 200, 138, 215, 187, 232, 203, 27, 62, 28, 211, 50, 60, 178, 223, 51, 188, 120, 178, 180, 189, 29, 253, 6, 191, 15, 79, 227, 60, 139, 142, 38, 62, 116, 238, 26, 62, 222, 120, 33, 189, 19, 14, 92, 190, 199, 232, 111, 62, 184, 189, 191, 190, 15, 35, 233, 190, 201, 189, 208, 62, 230, 220, 248, 189, 37, 141, 115, 190, 231, 113, 45, 61, 5, 6, 154, 189, 218, 200, 1, 62, 30, 245, 123, 60, 120, 217, 211, 188, 162, 129, 90, 190, 78, 202, 242, 61, 153, 75, 15, 63, 179, 101, 156, 60, 96, 152, 167, 61, 233, 249, 46, 190, 182, 157, 222, 60, 166, 247, 18, 190, 16, 253, 170, 62, 148, 202, 200, 190, 216, 149, 141, 61, 47, 248, 191, 62, 108, 181, 167, 62, 209, 62, 142, 190, 104, 125, 225, 60, 11, 85, 25, 190, 86, 120, 37, 190, 45, 182, 133, 62, 240, 138, 147, 62, 174, 224, 36, 62, 56, 68, 100, 62, 45, 188, 51, 190, 72, 203, 33, 191, 70, 123, 107, 62, 97, 61, 227, 189, 164, 112, 135, 62, 21, 195, 153, 190, 192, 169, 80, 189, 13, 91, 31, 189, 184, 4, 138, 62, 236, 213, 102, 60, 72, 245, 56, 62, 70, 131, 250, 188, 200, 187, 66, 61, 153, 232, 24, 191, 121, 103, 146, 189, 129, 206, 208, 61, 172, 200, 133, 190, 77, 69, 224, 190, 110, 158, 53, 62, 251, 224, 93, 62, 110, 112, 220, 61, 173, 145, 216, 189, 66, 93, 166, 62, 41, 236, 7, 190, 171, 129, 53, 188, 28, 10, 103, 190, 182, 40, 69, 62, 122, 251, 105, 62, 131, 166, 98, 62, 92, 93, 126, 188, 0, 112, 2, 191, 100, 56, 252, 188, 92, 230, 53, 60, 10, 212, 34, 190, 141, 223, 194, 59, 98, 37, 152, 62, 210, 20, 77, 62, 172, 214, 148, 191, 53, 160, 19, 62, 103, 24, 138, 190, 179, 125, 132, 61, 169, 197, 195, 61, 183, 201, 73, 190, 182, 197, 49, 190, 26, 42, 245, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 105, 37, 189, 122, 186, 249, 189, 102, 203, 133, 61, 71, 125, 91, 190, 234, 143, 130, 189, 99, 12, 152, 62, 242, 11, 149, 190, 114, 168, 173, 189, 197, 93, 23, 62, 122, 132, 188, 61, 6, 87, 221, 59, 247, 101, 46, 189, 246, 85, 134, 190, 6, 156, 111, 188, 34, 6, 233, 188, 28, 189, 222, 60, 119, 47, 48, 62, 166, 11, 220, 60, 221, 233, 109, 189, 131, 189, 95, 189, 163, 165, 243, 189, 142, 31, 125, 62, 132, 36, 105, 61, 166, 36, 101, 62, 228, 247, 56, 190, 69, 141, 30, 190, 174, 55, 145, 189, 79, 206, 158, 189, 213, 55, 7, 190, 59, 207, 47, 62, 242, 98, 59, 62, 208, 3, 140, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 86, 14, 191, 129, 167, 93, 62, 216, 49, 152, 62, 30, 158, 33, 63, 44, 64, 233, 62, 163, 204, 55, 62, 226, 44, 160, 190, 42, 214, 149, 190, 52, 187, 164, 190, 49, 190, 136, 191, 219, 211, 148, 190, 203, 212, 22, 188, 94, 24, 12, 191, 216, 167, 88, 61, 238, 42, 254, 190, 30, 159, 151, 62, 150, 73, 235, 62, 102, 128, 179, 189, 225, 219, 30, 61, 23, 47, 59, 191, 8, 33, 80, 190, 39, 59, 29, 191, 245, 123, 44, 63, 150, 206, 221, 61, 15, 191, 160, 190, 241, 235, 33, 190, 24, 167, 54, 191, 183, 130, 250, 60, 212, 119, 179, 190, 215, 175, 29, 62, 105, 27, 186, 62, 143, 147, 150, 190, 169, 162, 74, 62, 102, 94, 237, 189, 240, 195, 18, 62, 69, 243, 149, 62, 226, 213, 156, 61, 1, 106, 236, 189, 121, 115, 34, 62, 146, 88, 248, 60, 94, 120, 79, 60, 71, 208, 50, 61, 53, 140, 175, 61, 130, 210, 189, 189, 138, 53, 100, 62, 64, 127, 106, 61, 168, 1, 43, 190, 242, 32, 171, 189, 119, 184, 79, 189, 141, 146, 12, 62, 235, 3, 202, 61, 245, 162, 94, 62, 32, 199, 57, 61, 254, 30, 151, 190, 233, 244, 163, 62, 62, 123, 45, 190, 203, 92, 24, 62, 20, 139, 0, 190, 25, 103, 125, 187, 96, 240, 15, 61, 4, 36, 95, 62, 243, 10, 26, 186, 91, 118, 111, 189, 160, 68, 45, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 205, 141, 62, 35, 125, 158, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {146, 25, 41, 191, 121, 141, 157, 63, 195, 69, 13, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {232, 90, 153, 191, 155, 108, 217, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0033/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}