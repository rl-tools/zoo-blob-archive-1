// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 0, 31, 63, 163, 113, 227, 62, 61, 141, 18, 62, 16, 92, 108, 190, 107, 159, 170, 62, 53, 136, 1, 191, 57, 205, 11, 190, 72, 184, 82, 191, 125, 168, 155, 62, 92, 80, 7, 191, 126, 227, 123, 190, 241, 81, 56, 191, 132, 116, 68, 191, 243, 81, 45, 191, 194, 14, 43, 190, 128, 251, 7, 191, 9, 165, 121, 191, 42, 201, 48, 62, 131, 14, 79, 63, 94, 35, 34, 191, 75, 92, 246, 189, 144, 87, 128, 63, 110, 90, 116, 63, 102, 230, 13, 63, 82, 125, 168, 190, 93, 160, 73, 191, 142, 209, 144, 189, 103, 246, 145, 63, 185, 165, 118, 62, 158, 50, 100, 61, 247, 66, 133, 62, 136, 71, 199, 188, 0, 229, 98, 60, 183, 5, 4, 191, 12, 29, 180, 191, 86, 7, 238, 190, 127, 225, 255, 62, 83, 226, 160, 191, 217, 147, 149, 190, 62, 29, 225, 60, 158, 249, 219, 189, 212, 145, 236, 62, 255, 124, 0, 190, 254, 76, 129, 62, 192, 145, 18, 191, 6, 29, 38, 190, 136, 57, 162, 63, 23, 178, 28, 63, 58, 224, 41, 63, 169, 102, 133, 191, 182, 207, 109, 190, 84, 187, 29, 63, 99, 250, 170, 191, 156, 255, 183, 190, 156, 246, 188, 190, 247, 14, 189, 187, 62, 222, 74, 63, 188, 173, 247, 62, 132, 218, 203, 62, 171, 127, 219, 190, 250, 63, 64, 191, 223, 92, 72, 191, 113, 114, 111, 190, 145, 3, 76, 62, 92, 126, 112, 191, 194, 34, 17, 63, 63, 190, 169, 190, 144, 208, 95, 63, 216, 96, 58, 190, 194, 249, 8, 190, 143, 114, 127, 63, 228, 128, 47, 63, 166, 62, 84, 63, 136, 13, 32, 191, 28, 135, 182, 190, 92, 200, 240, 189, 80, 35, 77, 63, 221, 159, 7, 191, 46, 65, 31, 62, 179, 199, 49, 191, 241, 239, 119, 190, 208, 131, 102, 63, 184, 164, 135, 62, 244, 247, 92, 190, 54, 17, 148, 61, 207, 82, 6, 191, 54, 53, 16, 62, 65, 76, 24, 191, 79, 198, 5, 191, 39, 63, 109, 62, 198, 225, 35, 62, 105, 150, 120, 191, 37, 155, 221, 190, 47, 101, 230, 190, 168, 216, 158, 61, 170, 186, 201, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 203, 52, 191, 33, 64, 14, 191, 97, 218, 78, 61, 35, 72, 191, 190, 108, 178, 34, 63, 52, 131, 128, 190, 61, 230, 206, 62, 248, 62, 251, 190, 31, 94, 61, 63, 163, 11, 4, 63, 123, 185, 187, 190, 208, 120, 110, 190, 246, 20, 19, 190, 11, 95, 218, 190, 61, 169, 139, 61, 45, 156, 96, 58, 55, 188, 92, 189, 56, 72, 104, 190, 65, 1, 152, 190, 186, 105, 210, 62, 187, 160, 14, 191, 167, 92, 76, 190, 117, 162, 234, 62, 199, 214, 201, 61, 154, 61, 112, 191, 68, 212, 37, 62, 67, 247, 133, 190, 210, 50, 29, 191, 29, 225, 160, 62, 138, 101, 2, 62, 226, 153, 198, 190, 187, 28, 33, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 102, 25, 191, 87, 83, 3, 62, 76, 253, 236, 189, 252, 149, 188, 61, 154, 188, 103, 191, 38, 102, 52, 190, 192, 86, 255, 61, 191, 61, 251, 62, 97, 203, 125, 190, 225, 144, 11, 63, 67, 34, 60, 189, 193, 48, 28, 190, 69, 23, 42, 191, 23, 81, 107, 62, 246, 216, 223, 189, 62, 118, 215, 60, 91, 28, 19, 190, 182, 215, 33, 191, 38, 101, 140, 189, 205, 26, 19, 61, 82, 135, 187, 189, 210, 207, 134, 62, 207, 17, 102, 62, 207, 224, 223, 59, 253, 141, 62, 191, 143, 127, 156, 62, 183, 143, 166, 190, 115, 212, 167, 189, 40, 186, 33, 189, 103, 98, 240, 189, 72, 93, 242, 190, 249, 46, 3, 190, 164, 254, 251, 189, 146, 111, 42, 62, 13, 144, 7, 63, 201, 159, 0, 62, 45, 212, 5, 61, 206, 122, 44, 63, 14, 161, 121, 190, 86, 178, 220, 61, 174, 80, 153, 188, 61, 37, 124, 190, 99, 12, 32, 190, 222, 196, 181, 61, 253, 198, 167, 190, 170, 156, 62, 190, 67, 6, 140, 61, 107, 60, 172, 191, 241, 25, 91, 189, 47, 207, 174, 189, 101, 97, 89, 191, 91, 86, 28, 189, 105, 134, 30, 62, 29, 237, 170, 60, 65, 88, 13, 190, 114, 190, 204, 191, 129, 97, 190, 189, 240, 228, 182, 61, 146, 205, 11, 189, 35, 7, 186, 189, 171, 190, 187, 61, 155, 38, 246, 62, 77, 117, 119, 189, 153, 29, 15, 62, 191, 125, 0, 63, 16, 183, 13, 189, 115, 134, 173, 62, 26, 231, 137, 61, 199, 163, 132, 190, 205, 6, 178, 61, 76, 50, 168, 62, 182, 137, 214, 190, 235, 42, 83, 188, 138, 111, 216, 62, 232, 60, 239, 61, 96, 24, 87, 190, 141, 254, 99, 62, 187, 176, 66, 62, 237, 146, 53, 190, 113, 146, 54, 189, 216, 109, 133, 62, 20, 172, 149, 62, 155, 195, 11, 62, 228, 104, 136, 61, 251, 241, 48, 191, 220, 183, 215, 59, 24, 197, 96, 190, 66, 57, 128, 190, 230, 89, 132, 62, 208, 54, 180, 189, 4, 109, 10, 62, 30, 200, 189, 62, 153, 146, 159, 190, 188, 167, 178, 60, 168, 96, 187, 60, 222, 216, 118, 189, 229, 82, 72, 63, 75, 1, 213, 189, 143, 80, 83, 61, 83, 70, 153, 189, 58, 85, 133, 191, 60, 39, 154, 189, 114, 248, 171, 189, 131, 130, 133, 62, 69, 109, 162, 190, 100, 18, 51, 62, 161, 67, 158, 62, 142, 4, 54, 189, 104, 166, 84, 190, 110, 249, 85, 62, 254, 42, 23, 62, 7, 34, 90, 189, 232, 195, 171, 190, 159, 70, 44, 190, 49, 202, 230, 61, 212, 242, 124, 62, 196, 198, 169, 188, 74, 214, 54, 62, 245, 211, 214, 190, 44, 212, 52, 190, 44, 141, 78, 187, 145, 116, 205, 61, 255, 89, 35, 62, 114, 122, 144, 189, 41, 203, 170, 189, 220, 145, 44, 191, 45, 58, 127, 62, 34, 42, 214, 188, 79, 54, 18, 63, 90, 251, 22, 189, 172, 191, 78, 62, 23, 36, 135, 62, 20, 234, 184, 190, 4, 109, 214, 187, 118, 35, 88, 190, 133, 36, 89, 62, 201, 226, 241, 190, 233, 63, 237, 61, 178, 211, 128, 62, 57, 97, 79, 189, 136, 240, 193, 190, 197, 99, 144, 60, 8, 157, 95, 62, 1, 119, 234, 189, 41, 220, 183, 189, 157, 108, 73, 190, 110, 161, 255, 189, 246, 228, 100, 62, 221, 151, 184, 190, 187, 231, 70, 189, 226, 26, 40, 62, 186, 223, 119, 190, 191, 87, 50, 62, 175, 133, 227, 61, 32, 163, 56, 189, 208, 56, 245, 61, 57, 140, 13, 190, 76, 184, 2, 191, 162, 221, 29, 190, 70, 14, 217, 61, 74, 83, 45, 63, 67, 251, 230, 60, 135, 106, 5, 189, 219, 150, 139, 188, 139, 56, 61, 62, 182, 219, 141, 190, 128, 191, 94, 62, 138, 56, 97, 190, 121, 133, 101, 62, 32, 144, 134, 62, 171, 65, 43, 62, 167, 190, 232, 189, 51, 112, 8, 61, 1, 237, 218, 189, 194, 142, 210, 61, 223, 162, 22, 62, 221, 11, 107, 62, 207, 175, 243, 61, 251, 75, 111, 62, 117, 113, 82, 62, 12, 138, 215, 190, 38, 158, 182, 62, 62, 52, 123, 62, 3, 237, 136, 61, 94, 114, 2, 189, 48, 207, 59, 189, 255, 69, 203, 186, 219, 205, 230, 62, 216, 203, 156, 61, 129, 220, 141, 62, 13, 180, 180, 188, 101, 63, 122, 62, 222, 150, 51, 62, 30, 51, 234, 188, 100, 21, 61, 61, 127, 74, 35, 188, 193, 70, 74, 189, 46, 149, 99, 189, 196, 105, 239, 189, 168, 218, 204, 189, 162, 150, 38, 190, 157, 9, 19, 191, 192, 242, 107, 61, 52, 0, 153, 189, 136, 151, 103, 62, 27, 20, 234, 61, 144, 253, 131, 59, 190, 156, 116, 188, 39, 211, 246, 61, 239, 58, 212, 61, 240, 207, 25, 190, 205, 159, 10, 190, 167, 89, 156, 62, 27, 30, 131, 61, 150, 46, 166, 190, 158, 11, 222, 59, 149, 32, 44, 62, 86, 32, 65, 189, 148, 227, 87, 61, 214, 238, 196, 189, 33, 51, 237, 190, 24, 40, 115, 190, 189, 153, 255, 61, 218, 246, 95, 190, 23, 85, 236, 190, 26, 106, 112, 189, 246, 157, 189, 189, 24, 12, 147, 61, 86, 245, 5, 190, 68, 93, 45, 190, 110, 227, 64, 189, 37, 108, 224, 62, 91, 222, 167, 60, 7, 215, 46, 61, 114, 190, 134, 61, 41, 161, 217, 189, 53, 143, 161, 62, 89, 20, 186, 61, 126, 32, 30, 188, 83, 227, 75, 190, 98, 43, 99, 189, 52, 136, 137, 62, 164, 182, 182, 60, 203, 187, 178, 189, 7, 79, 146, 190, 127, 222, 134, 61, 209, 89, 100, 190, 138, 88, 46, 61, 62, 171, 187, 62, 198, 230, 119, 189, 196, 97, 150, 62, 66, 200, 140, 62, 115, 107, 126, 189, 106, 30, 197, 188, 77, 0, 91, 62, 233, 220, 58, 189, 134, 105, 210, 190, 185, 93, 0, 60, 29, 250, 37, 62, 138, 97, 143, 60, 61, 22, 57, 189, 176, 54, 210, 189, 40, 220, 152, 190, 120, 209, 149, 190, 8, 82, 48, 190, 175, 196, 67, 190, 177, 23, 14, 190, 15, 116, 232, 189, 144, 170, 119, 190, 197, 48, 95, 62, 179, 128, 30, 62, 1, 246, 115, 61, 242, 219, 36, 190, 46, 176, 157, 190, 69, 210, 144, 190, 223, 223, 42, 62, 126, 218, 241, 61, 0, 73, 200, 190, 171, 217, 140, 62, 245, 84, 21, 187, 5, 177, 221, 190, 31, 205, 77, 189, 103, 118, 135, 190, 209, 50, 3, 190, 59, 160, 55, 190, 200, 167, 52, 191, 28, 153, 72, 189, 214, 10, 114, 188, 210, 239, 96, 188, 169, 247, 110, 190, 58, 200, 242, 62, 255, 147, 52, 62, 213, 27, 18, 61, 255, 215, 156, 62, 160, 33, 75, 61, 221, 18, 83, 190, 57, 106, 26, 62, 58, 134, 253, 60, 252, 231, 113, 190, 236, 121, 43, 62, 89, 161, 147, 190, 75, 139, 16, 61, 132, 218, 42, 62, 86, 95, 62, 191, 30, 154, 145, 190, 24, 237, 201, 190, 38, 91, 131, 191, 76, 176, 89, 61, 251, 10, 51, 190, 126, 128, 95, 191, 158, 202, 176, 62, 191, 250, 249, 190, 111, 218, 100, 191, 208, 74, 102, 190, 218, 145, 173, 188, 255, 144, 220, 190, 189, 239, 61, 190, 227, 34, 48, 61, 244, 114, 144, 190, 22, 3, 149, 62, 9, 52, 40, 190, 28, 132, 141, 189, 170, 246, 45, 63, 133, 114, 45, 189, 2, 252, 128, 62, 163, 117, 60, 63, 253, 255, 12, 190, 18, 65, 28, 191, 71, 253, 51, 62, 109, 81, 246, 189, 234, 198, 183, 189, 101, 192, 250, 61, 54, 189, 199, 60, 176, 252, 203, 62, 56, 254, 39, 62, 121, 226, 86, 191, 190, 204, 66, 187, 41, 226, 144, 61, 195, 129, 214, 190, 159, 207, 161, 61, 37, 73, 53, 62, 213, 110, 175, 190, 245, 152, 20, 190, 171, 112, 91, 191, 197, 233, 40, 189, 166, 194, 148, 188, 188, 47, 20, 190, 37, 193, 107, 190, 92, 197, 109, 62, 210, 139, 129, 189, 68, 100, 22, 190, 11, 220, 83, 62, 65, 154, 249, 61, 176, 24, 236, 189, 161, 79, 109, 61, 188, 60, 206, 189, 143, 175, 85, 61, 85, 116, 102, 188, 27, 94, 18, 190, 54, 21, 225, 189, 100, 174, 200, 61, 51, 183, 55, 61, 65, 111, 79, 61, 213, 253, 9, 62, 29, 116, 241, 189, 99, 247, 76, 61, 119, 29, 156, 189, 39, 70, 200, 188, 136, 22, 12, 61, 163, 9, 237, 187, 45, 126, 209, 189, 212, 84, 178, 189, 206, 135, 235, 188, 3, 71, 35, 190, 103, 114, 38, 190, 87, 209, 225, 60, 68, 108, 242, 189, 37, 98, 21, 60, 104, 37, 4, 62, 92, 164, 234, 61, 248, 211, 77, 190, 150, 178, 199, 60, 159, 228, 195, 189, 174, 57, 20, 190, 87, 29, 104, 191, 140, 14, 123, 62, 193, 73, 181, 189, 188, 135, 130, 189, 12, 104, 141, 191, 206, 29, 77, 62, 8, 3, 142, 62, 255, 164, 226, 62, 50, 120, 196, 60, 4, 137, 167, 62, 63, 11, 131, 187, 109, 250, 7, 189, 132, 111, 251, 190, 12, 225, 151, 62, 36, 14, 72, 61, 49, 205, 46, 189, 233, 136, 13, 190, 225, 170, 131, 190, 64, 255, 11, 189, 180, 145, 79, 60, 20, 79, 49, 190, 124, 55, 15, 189, 77, 231, 64, 190, 120, 139, 131, 188, 224, 178, 2, 62, 58, 138, 229, 59, 13, 113, 185, 61, 67, 194, 162, 189, 249, 85, 4, 62, 96, 206, 59, 190, 119, 54, 136, 190, 251, 136, 166, 190, 57, 34, 100, 61, 95, 204, 19, 190, 89, 197, 233, 61, 68, 217, 178, 189, 41, 203, 61, 190, 35, 235, 254, 61, 234, 213, 43, 60, 180, 129, 97, 189, 11, 230, 213, 189, 235, 238, 39, 62, 72, 179, 173, 61, 13, 111, 168, 189, 251, 40, 203, 189, 62, 39, 222, 189, 221, 10, 22, 62, 108, 64, 47, 190, 141, 240, 148, 61, 223, 137, 154, 60, 152, 36, 23, 62, 127, 220, 48, 190, 21, 135, 34, 61, 241, 64, 14, 190, 198, 154, 41, 190, 120, 7, 9, 61, 109, 179, 60, 189, 126, 198, 136, 189, 88, 90, 133, 61, 193, 10, 126, 60, 107, 190, 35, 190, 204, 184, 243, 189, 231, 206, 174, 61, 5, 232, 33, 60, 241, 90, 35, 191, 183, 207, 38, 62, 184, 127, 231, 61, 214, 232, 10, 190, 163, 107, 142, 191, 241, 67, 228, 61, 175, 194, 208, 188, 67, 129, 94, 62, 17, 25, 145, 189, 187, 121, 186, 62, 42, 176, 73, 189, 26, 180, 69, 190, 212, 106, 20, 191, 84, 238, 46, 61, 38, 34, 50, 62, 82, 241, 41, 60, 56, 196, 249, 189, 21, 80, 150, 190, 251, 208, 59, 190, 77, 229, 18, 62, 10, 163, 133, 190, 192, 94, 149, 62, 32, 40, 246, 61, 103, 57, 1, 189, 224, 5, 5, 191, 10, 223, 34, 62, 9, 17, 93, 190, 167, 254, 20, 62, 44, 116, 138, 62, 203, 157, 187, 190, 169, 210, 116, 190, 158, 67, 104, 190, 77, 164, 37, 63, 230, 191, 201, 189, 29, 87, 75, 189, 87, 152, 204, 190, 88, 81, 110, 62, 61, 87, 66, 190, 1, 147, 132, 62, 196, 241, 176, 190, 162, 197, 156, 61, 99, 20, 50, 62, 125, 67, 56, 62, 164, 159, 189, 189, 158, 97, 156, 62, 211, 70, 49, 190, 243, 35, 99, 190, 101, 79, 48, 61, 41, 112, 159, 62, 175, 151, 133, 62, 4, 128, 175, 62, 251, 16, 156, 189, 177, 176, 32, 59, 165, 16, 125, 62, 84, 124, 169, 61, 182, 98, 13, 62, 109, 135, 183, 61, 87, 230, 186, 189, 247, 251, 109, 62, 187, 148, 71, 190, 65, 130, 53, 62, 203, 200, 29, 62, 51, 193, 62, 62, 104, 7, 190, 189, 147, 94, 23, 63, 149, 203, 148, 189, 221, 49, 66, 190, 10, 210, 75, 190, 237, 188, 115, 62, 150, 99, 218, 190, 56, 180, 90, 62, 177, 206, 190, 190, 158, 57, 254, 188, 11, 93, 180, 62, 100, 161, 61, 62, 219, 93, 172, 191, 122, 216, 236, 61, 55, 223, 245, 190, 24, 231, 52, 190, 213, 185, 76, 62, 202, 133, 85, 62, 86, 217, 148, 60, 57, 20, 196, 62, 116, 99, 12, 190, 177, 29, 155, 191, 92, 117, 150, 62, 64, 254, 50, 62, 170, 55, 198, 60, 49, 248, 129, 190, 102, 39, 211, 61, 194, 17, 83, 190, 159, 132, 16, 62, 101, 24, 72, 61, 210, 32, 199, 187, 113, 31, 149, 190, 235, 61, 241, 60, 71, 247, 135, 61, 97, 2, 136, 187, 1, 207, 13, 190, 145, 163, 35, 60, 172, 206, 161, 189, 193, 159, 47, 190, 6, 164, 117, 61, 206, 167, 0, 61, 233, 29, 185, 189, 30, 82, 178, 60, 238, 206, 185, 61, 78, 167, 152, 61, 158, 80, 221, 61, 153, 84, 65, 189, 90, 2, 46, 190, 154, 242, 81, 190, 68, 107, 255, 189, 167, 218, 24, 190, 11, 113, 211, 61, 12, 42, 29, 190, 222, 157, 184, 61, 37, 0, 132, 61, 244, 240, 14, 62, 102, 79, 9, 190, 160, 45, 111, 189, 44, 219, 70, 61, 42, 113, 45, 190, 153, 132, 187, 61, 203, 234, 200, 189, 41, 94, 184, 61, 147, 44, 216, 61, 102, 232, 183, 189, 43, 192, 133, 60, 55, 62, 15, 190, 38, 39, 80, 61, 2, 253, 0, 62, 168, 228, 58, 189, 66, 244, 189, 189, 137, 246, 26, 190, 228, 85, 251, 189, 207, 196, 167, 189, 15, 3, 252, 60, 230, 76, 177, 59, 90, 22, 22, 62, 189, 102, 37, 190, 116, 219, 252, 61, 186, 174, 51, 190, 187, 17, 61, 190, 76, 237, 149, 189, 180, 135, 42, 61, 162, 93, 227, 189, 32, 91, 236, 189, 28, 17, 24, 62, 97, 93, 236, 61, 152, 246, 136, 61, 191, 199, 204, 61, 38, 121, 242, 60, 205, 10, 140, 60, 90, 88, 252, 189, 40, 124, 243, 189, 94, 215, 160, 61, 137, 209, 184, 189, 45, 164, 218, 189, 105, 46, 196, 187, 188, 9, 190, 189, 61, 184, 196, 190, 147, 235, 232, 62, 56, 96, 183, 62, 160, 29, 127, 62, 97, 76, 33, 63, 142, 71, 192, 190, 250, 49, 139, 190, 221, 24, 81, 189, 52, 142, 173, 62, 40, 85, 216, 189, 145, 95, 120, 62, 143, 55, 33, 190, 47, 36, 229, 61, 118, 168, 140, 62, 26, 205, 98, 191, 227, 188, 3, 190, 198, 179, 3, 189, 113, 141, 48, 190, 168, 11, 226, 59, 239, 112, 254, 61, 23, 215, 140, 189, 180, 153, 135, 61, 99, 129, 71, 191, 220, 174, 63, 191, 182, 232, 190, 190, 208, 53, 90, 61, 76, 195, 146, 191, 157, 146, 80, 62, 63, 198, 134, 62, 4, 205, 129, 190, 39, 192, 20, 62, 166, 183, 56, 191, 34, 223, 189, 190, 23, 173, 45, 190, 94, 29, 78, 190, 41, 64, 3, 60, 135, 47, 236, 60, 211, 110, 245, 61, 73, 224, 89, 189, 32, 172, 19, 62, 224, 87, 254, 189, 217, 215, 164, 190, 24, 217, 59, 190, 61, 67, 47, 62, 244, 18, 42, 189, 222, 51, 119, 190, 96, 136, 70, 62, 177, 71, 80, 62, 246, 103, 66, 188, 130, 118, 144, 62, 124, 45, 28, 188, 7, 0, 168, 62, 204, 171, 165, 61, 156, 204, 2, 62, 115, 75, 46, 62, 235, 2, 23, 62, 170, 247, 233, 189, 100, 98, 162, 188, 243, 121, 167, 190, 225, 29, 192, 187, 52, 40, 85, 62, 37, 204, 184, 188, 8, 198, 49, 190, 84, 183, 20, 191, 179, 248, 164, 190, 240, 52, 150, 62, 136, 76, 184, 61, 41, 183, 134, 189, 47, 192, 169, 61, 0, 43, 101, 189, 185, 175, 12, 63, 185, 97, 161, 62, 167, 206, 135, 62, 190, 79, 137, 188, 171, 179, 248, 61, 110, 63, 30, 61, 10, 208, 218, 62, 26, 158, 192, 62, 116, 137, 158, 189, 229, 48, 32, 190, 95, 209, 22, 190, 107, 170, 102, 190, 81, 225, 128, 62, 128, 1, 219, 62, 212, 117, 46, 190, 122, 22, 230, 189, 221, 39, 101, 190, 227, 121, 31, 191, 89, 118, 64, 190, 179, 174, 241, 189, 55, 6, 223, 190, 0, 92, 211, 61, 47, 211, 213, 190, 149, 39, 72, 190, 159, 182, 30, 188, 144, 220, 172, 190, 172, 59, 107, 62, 90, 118, 161, 190, 147, 135, 186, 190, 20, 34, 90, 62, 48, 245, 4, 191, 241, 183, 149, 61, 249, 215, 103, 191, 245, 68, 52, 61, 79, 85, 238, 188, 127, 115, 255, 61, 189, 81, 176, 191, 21, 112, 202, 62, 188, 160, 44, 191, 1, 119, 6, 190, 231, 8, 220, 61, 195, 129, 252, 61, 178, 126, 80, 61, 49, 197, 164, 62, 161, 120, 163, 190, 168, 222, 208, 191, 201, 181, 240, 62, 19, 240, 138, 62, 212, 79, 143, 62, 178, 56, 151, 62, 49, 219, 156, 62, 41, 160, 218, 188, 25, 81, 1, 62, 181, 171, 218, 188, 78, 119, 156, 62, 239, 40, 169, 60, 182, 49, 206, 188, 200, 11, 144, 191, 63, 96, 246, 61, 127, 251, 89, 62, 21, 152, 189, 61, 218, 164, 135, 61, 245, 20, 9, 188, 106, 134, 116, 62, 120, 106, 8, 190, 93, 95, 183, 62, 58, 54, 173, 61, 203, 15, 149, 60, 45, 78, 29, 190, 54, 184, 129, 190, 184, 47, 78, 190, 203, 134, 98, 61, 182, 180, 49, 190, 239, 215, 64, 62, 59, 150, 128, 189, 71, 85, 58, 190, 180, 26, 252, 61, 118, 109, 32, 189, 235, 56, 96, 61, 187, 191, 94, 189, 107, 116, 37, 190, 192, 205, 136, 189, 245, 245, 135, 188, 114, 59, 64, 189, 47, 188, 200, 62, 222, 171, 154, 62, 173, 83, 11, 62, 98, 119, 73, 190, 159, 180, 94, 61, 202, 250, 40, 191, 76, 14, 150, 60, 85, 71, 201, 58, 19, 74, 189, 188, 59, 43, 12, 62, 0, 195, 151, 61, 245, 214, 74, 190, 25, 65, 140, 190, 131, 208, 232, 61, 235, 104, 185, 191, 146, 111, 50, 187, 74, 169, 21, 189, 166, 145, 112, 62, 203, 244, 194, 61, 201, 231, 117, 189, 155, 11, 40, 62, 81, 11, 14, 62, 196, 150, 111, 62, 244, 66, 18, 62, 106, 205, 5, 190, 62, 138, 104, 62, 220, 203, 1, 62, 54, 61, 28, 190, 25, 252, 44, 62, 70, 200, 188, 62, 4, 92, 129, 190, 97, 103, 71, 189, 137, 18, 52, 190, 26, 172, 64, 190, 2, 44, 50, 61, 214, 239, 81, 62, 61, 242, 36, 190, 105, 46, 191, 61, 145, 229, 114, 61, 184, 232, 57, 190, 85, 65, 210, 189, 21, 11, 32, 189, 198, 113, 128, 189, 191, 83, 19, 189, 86, 17, 166, 60, 237, 206, 191, 60, 80, 183, 163, 189, 168, 157, 194, 61, 84, 129, 98, 189, 160, 115, 101, 189, 126, 191, 17, 61, 244, 134, 161, 189, 41, 155, 50, 61, 222, 103, 251, 61, 72, 159, 168, 61, 172, 231, 88, 188, 173, 25, 254, 188, 184, 200, 51, 190, 244, 31, 226, 188, 112, 212, 123, 189, 61, 90, 206, 188, 237, 37, 210, 61, 217, 180, 223, 61, 117, 31, 241, 61, 33, 166, 247, 189, 35, 91, 230, 60, 194, 6, 41, 62, 39, 23, 169, 58, 160, 11, 60, 190, 146, 106, 112, 191, 219, 41, 207, 189, 18, 115, 113, 62, 224, 59, 78, 190, 222, 179, 161, 191, 158, 232, 66, 62, 66, 251, 113, 61, 197, 18, 234, 62, 34, 255, 191, 190, 116, 235, 17, 63, 135, 244, 31, 190, 43, 213, 123, 190, 25, 52, 8, 191, 128, 48, 186, 59, 61, 218, 121, 62, 48, 250, 229, 189, 96, 109, 2, 190, 24, 20, 43, 191, 189, 151, 31, 61, 201, 197, 141, 62, 120, 3, 143, 189, 252, 82, 168, 61, 143, 20, 241, 60, 59, 224, 43, 60, 93, 101, 97, 191, 200, 230, 113, 62, 232, 40, 238, 190, 167, 235, 118, 62, 60, 136, 76, 62, 233, 178, 8, 191, 41, 117, 171, 190, 99, 175, 95, 189, 80, 4, 34, 60, 23, 216, 17, 190, 172, 44, 21, 62, 98, 169, 26, 190, 235, 81, 168, 189, 159, 7, 240, 188, 38, 148, 177, 188, 48, 225, 3, 190, 183, 240, 33, 190, 40, 252, 206, 58, 36, 96, 249, 189, 178, 101, 52, 62, 175, 110, 8, 190, 171, 224, 105, 59, 166, 106, 175, 61, 177, 219, 0, 190, 147, 81, 27, 190, 60, 67, 242, 187, 69, 8, 74, 188, 184, 114, 41, 189, 92, 112, 131, 188, 91, 169, 65, 61, 142, 81, 228, 189, 5, 32, 217, 61, 133, 247, 47, 189, 159, 144, 171, 189, 41, 184, 215, 189, 81, 82, 140, 189, 117, 163, 146, 189, 244, 105, 19, 190, 17, 160, 129, 189, 205, 221, 135, 61, 157, 4, 76, 191, 96, 157, 144, 190, 114, 55, 114, 62, 12, 59, 116, 62, 228, 122, 145, 189, 0, 22, 179, 62, 65, 248, 34, 190, 26, 158, 14, 63, 177, 64, 94, 61, 144, 126, 133, 62, 217, 153, 136, 190, 93, 175, 243, 189, 238, 95, 45, 191, 181, 215, 233, 62, 167, 61, 177, 59, 216, 238, 2, 190, 212, 35, 77, 190, 157, 58, 205, 190, 196, 25, 172, 190, 131, 139, 71, 62, 75, 92, 2, 189, 3, 118, 114, 190, 244, 90, 19, 61, 72, 250, 56, 189, 109, 227, 253, 190, 171, 0, 211, 189, 40, 72, 9, 60, 145, 220, 138, 190, 60, 161, 73, 61, 84, 84, 196, 188, 143, 204, 61, 190, 174, 176, 5, 62, 87, 72, 28, 190, 97, 56, 206, 61, 232, 165, 45, 191, 9, 138, 39, 188, 213, 203, 86, 61, 188, 156, 180, 190, 77, 250, 211, 61, 33, 71, 162, 60, 100, 17, 109, 187, 23, 135, 27, 62, 28, 211, 50, 60, 41, 115, 83, 60, 139, 66, 172, 189, 204, 246, 62, 191, 181, 60, 70, 61, 233, 228, 215, 61, 156, 169, 37, 62, 42, 241, 102, 188, 15, 22, 182, 190, 20, 37, 132, 62, 249, 248, 182, 190, 232, 160, 88, 191, 210, 188, 212, 62, 245, 43, 131, 190, 213, 87, 167, 189, 91, 86, 41, 61, 52, 55, 40, 189, 104, 246, 101, 62, 145, 166, 60, 189, 70, 43, 176, 61, 227, 155, 50, 190, 170, 203, 19, 62, 92, 124, 30, 63, 25, 160, 59, 61, 199, 52, 134, 61, 249, 187, 35, 190, 233, 106, 239, 60, 15, 77, 84, 190, 212, 243, 171, 62, 154, 155, 192, 190, 221, 176, 12, 61, 99, 71, 190, 62, 108, 181, 167, 62, 62, 221, 62, 191, 64, 174, 180, 188, 73, 104, 243, 189, 184, 240, 235, 189, 125, 242, 130, 62, 102, 107, 131, 62, 38, 190, 235, 61, 175, 182, 96, 62, 113, 60, 37, 190, 168, 214, 134, 191, 195, 61, 110, 62, 54, 73, 26, 61, 110, 47, 132, 62, 236, 9, 245, 190, 226, 221, 153, 60, 186, 239, 88, 190, 99, 142, 159, 62, 36, 208, 71, 60, 122, 196, 30, 62, 221, 97, 90, 190, 239, 213, 173, 61, 113, 75, 49, 191, 32, 127, 87, 189, 61, 7, 153, 61, 173, 28, 133, 190, 191, 26, 5, 191, 199, 237, 34, 62, 211, 107, 79, 62, 180, 1, 145, 61, 168, 37, 9, 190, 221, 234, 167, 62, 41, 236, 7, 190, 235, 136, 46, 189, 64, 194, 197, 190, 235, 148, 22, 62, 96, 219, 133, 62, 71, 160, 91, 62, 242, 19, 48, 189, 173, 25, 40, 191, 239, 18, 71, 189, 118, 116, 179, 60, 79, 216, 190, 189, 208, 167, 17, 188, 158, 173, 158, 62, 158, 89, 68, 62, 244, 167, 204, 191, 40, 73, 61, 62, 226, 218, 197, 190, 86, 54, 174, 61, 70, 124, 81, 61, 194, 60, 85, 190, 24, 2, 132, 190, 146, 74, 134, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 25, 115, 189, 135, 18, 101, 190, 122, 173, 137, 61, 79, 127, 102, 190, 195, 36, 46, 190, 25, 228, 158, 62, 242, 11, 149, 190, 3, 99, 226, 189, 169, 123, 53, 62, 2, 161, 133, 61, 100, 155, 38, 60, 171, 233, 94, 189, 42, 194, 142, 190, 154, 86, 149, 188, 17, 19, 224, 188, 178, 122, 97, 61, 156, 100, 77, 62, 166, 11, 220, 60, 221, 233, 109, 189, 245, 160, 28, 189, 102, 162, 215, 189, 184, 75, 129, 62, 209, 75, 0, 61, 171, 175, 141, 62, 126, 126, 49, 190, 69, 141, 30, 190, 224, 218, 174, 189, 79, 206, 158, 189, 250, 220, 198, 189, 234, 125, 35, 62, 228, 113, 81, 62, 222, 194, 134, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 138, 42, 191, 166, 111, 139, 62, 5, 85, 162, 62, 200, 55, 43, 63, 31, 202, 214, 62, 193, 254, 58, 62, 226, 44, 160, 190, 57, 164, 88, 190, 133, 189, 249, 190, 45, 169, 146, 191, 122, 254, 186, 190, 32, 110, 14, 188, 176, 80, 49, 191, 110, 55, 88, 61, 152, 50, 29, 191, 61, 32, 142, 62, 99, 211, 5, 63, 102, 128, 179, 189, 225, 219, 30, 61, 175, 141, 115, 191, 127, 32, 58, 190, 12, 148, 28, 191, 140, 160, 128, 63, 36, 109, 233, 61, 172, 179, 188, 190, 241, 235, 33, 190, 127, 200, 87, 191, 183, 130, 250, 60, 43, 223, 253, 190, 171, 74, 59, 62, 102, 235, 194, 62, 177, 41, 180, 190, 217, 74, 79, 62, 65, 210, 234, 189, 214, 82, 49, 62, 232, 180, 173, 62, 86, 208, 151, 61, 137, 161, 252, 189, 121, 115, 34, 62, 241, 154, 93, 61, 115, 230, 128, 61, 80, 135, 159, 188, 77, 117, 16, 62, 176, 204, 188, 189, 98, 116, 22, 62, 221, 150, 106, 61, 210, 41, 134, 190, 120, 155, 120, 189, 174, 39, 124, 189, 141, 146, 12, 62, 235, 3, 202, 61, 43, 215, 153, 62, 42, 118, 99, 61, 254, 1, 176, 190, 28, 216, 162, 62, 191, 153, 126, 190, 207, 32, 187, 61, 20, 139, 0, 190, 85, 60, 227, 189, 96, 240, 15, 61, 30, 18, 202, 62, 226, 128, 62, 189, 166, 115, 99, 189, 160, 225, 36, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 70, 150, 62, 63, 31, 183, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {86, 7, 53, 191, 37, 185, 7, 64, 7, 189, 236, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {196, 128, 190, 190, 42, 2, 57, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0033/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}