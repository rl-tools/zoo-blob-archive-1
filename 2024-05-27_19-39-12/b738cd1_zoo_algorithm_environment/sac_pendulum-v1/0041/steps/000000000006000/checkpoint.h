// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 249, 172, 190, 108, 82, 10, 63, 193, 155, 239, 190, 191, 135, 170, 189, 234, 183, 27, 190, 220, 197, 68, 191, 47, 170, 192, 190, 19, 145, 3, 191, 146, 27, 9, 63, 146, 223, 183, 190, 229, 150, 41, 190, 230, 89, 85, 190, 197, 152, 22, 191, 3, 36, 148, 187, 122, 11, 218, 62, 17, 229, 115, 62, 238, 14, 184, 62, 206, 174, 18, 191, 185, 155, 219, 61, 21, 253, 173, 62, 33, 161, 21, 191, 224, 213, 166, 62, 25, 213, 15, 191, 44, 156, 23, 191, 204, 76, 109, 63, 88, 248, 64, 63, 240, 139, 1, 63, 13, 243, 115, 62, 206, 87, 154, 61, 114, 179, 148, 190, 212, 107, 8, 191, 45, 33, 189, 62, 9, 6, 73, 62, 155, 190, 183, 190, 223, 246, 174, 191, 83, 233, 14, 191, 185, 187, 110, 62, 171, 130, 92, 191, 188, 203, 233, 190, 250, 104, 41, 190, 102, 245, 139, 62, 91, 233, 25, 63, 92, 173, 140, 61, 143, 79, 46, 191, 43, 231, 123, 62, 71, 110, 217, 190, 70, 44, 142, 62, 243, 227, 164, 189, 201, 25, 229, 62, 252, 17, 189, 190, 140, 11, 34, 63, 161, 125, 186, 190, 151, 161, 155, 191, 205, 88, 140, 189, 209, 245, 245, 59, 247, 103, 26, 190, 62, 235, 129, 62, 75, 174, 183, 189, 251, 246, 103, 62, 41, 3, 93, 191, 54, 61, 186, 190, 194, 226, 123, 63, 200, 131, 204, 61, 244, 201, 99, 62, 254, 222, 27, 63, 117, 207, 226, 190, 117, 137, 226, 190, 249, 82, 79, 62, 248, 23, 132, 61, 201, 81, 241, 62, 130, 150, 15, 63, 230, 51, 231, 190, 82, 83, 134, 189, 18, 86, 191, 189, 181, 146, 181, 62, 243, 160, 28, 62, 204, 86, 67, 191, 76, 10, 87, 62, 74, 4, 224, 190, 108, 33, 76, 191, 29, 243, 51, 191, 119, 196, 220, 62, 182, 208, 131, 191, 235, 30, 113, 190, 230, 10, 86, 190, 229, 67, 64, 191, 162, 95, 232, 59, 80, 70, 195, 62, 191, 58, 44, 191, 218, 127, 39, 62, 3, 231, 48, 190, 115, 206, 214, 190, 248, 12, 254, 61, 189, 8, 244, 62, 78, 152, 254, 190, 209, 220, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 146, 154, 190, 165, 237, 110, 190, 35, 3, 203, 60, 30, 75, 11, 63, 58, 80, 97, 190, 182, 246, 111, 62, 131, 26, 81, 190, 101, 94, 111, 190, 124, 67, 21, 191, 143, 25, 101, 62, 17, 28, 56, 190, 210, 55, 103, 190, 27, 133, 200, 190, 185, 252, 0, 63, 208, 13, 160, 62, 100, 130, 100, 63, 225, 254, 20, 62, 181, 83, 198, 62, 13, 116, 146, 60, 222, 135, 165, 190, 194, 212, 28, 63, 21, 237, 161, 189, 225, 124, 33, 63, 136, 139, 34, 62, 56, 175, 209, 189, 15, 183, 64, 61, 241, 115, 148, 190, 19, 178, 109, 61, 231, 0, 245, 189, 10, 234, 153, 62, 152, 42, 250, 62, 55, 180, 226, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 236, 148, 189, 31, 225, 200, 189, 115, 223, 66, 189, 34, 190, 190, 189, 244, 196, 40, 61, 34, 208, 254, 189, 122, 187, 203, 189, 246, 110, 24, 62, 4, 215, 219, 189, 89, 149, 32, 61, 156, 214, 149, 59, 43, 112, 155, 61, 204, 111, 32, 190, 222, 34, 118, 189, 158, 22, 226, 189, 220, 205, 206, 189, 127, 63, 240, 189, 182, 23, 9, 62, 171, 54, 41, 61, 189, 151, 25, 60, 123, 87, 183, 59, 251, 206, 144, 188, 3, 108, 69, 189, 76, 66, 175, 189, 44, 253, 125, 189, 151, 176, 131, 189, 132, 239, 79, 189, 210, 117, 173, 189, 254, 47, 148, 189, 241, 202, 38, 190, 147, 125, 80, 61, 195, 178, 85, 189, 17, 43, 169, 61, 176, 141, 135, 62, 189, 118, 180, 190, 47, 46, 83, 61, 218, 217, 156, 189, 239, 236, 112, 62, 209, 196, 148, 62, 237, 172, 130, 189, 177, 151, 151, 189, 173, 141, 32, 189, 40, 246, 178, 61, 148, 192, 226, 61, 189, 68, 106, 62, 124, 152, 80, 190, 2, 106, 3, 190, 155, 26, 17, 61, 159, 65, 132, 60, 159, 156, 82, 190, 105, 111, 55, 190, 112, 235, 174, 62, 106, 210, 179, 62, 108, 66, 178, 61, 104, 209, 218, 189, 132, 30, 21, 61, 254, 195, 42, 190, 133, 19, 184, 190, 156, 218, 26, 62, 242, 47, 160, 190, 204, 228, 221, 62, 142, 19, 155, 190, 155, 24, 206, 190, 247, 138, 197, 59, 185, 2, 61, 188, 219, 159, 73, 62, 34, 184, 14, 62, 137, 201, 178, 188, 167, 26, 33, 62, 171, 61, 132, 62, 69, 136, 172, 61, 245, 208, 18, 189, 9, 164, 94, 61, 230, 131, 129, 62, 88, 79, 210, 189, 12, 111, 146, 188, 161, 187, 88, 189, 211, 116, 231, 60, 73, 52, 8, 62, 111, 114, 88, 190, 28, 173, 121, 62, 91, 163, 94, 188, 187, 15, 24, 62, 121, 83, 97, 188, 15, 87, 51, 190, 247, 187, 44, 62, 32, 16, 158, 61, 53, 152, 229, 61, 71, 81, 174, 62, 209, 89, 120, 61, 10, 81, 142, 190, 55, 121, 166, 190, 112, 137, 22, 189, 142, 8, 168, 62, 45, 112, 235, 188, 121, 89, 16, 190, 62, 7, 217, 62, 191, 6, 180, 191, 231, 204, 33, 62, 156, 35, 75, 190, 20, 70, 161, 62, 134, 183, 90, 62, 72, 40, 76, 191, 110, 102, 29, 189, 86, 181, 29, 191, 9, 216, 136, 61, 210, 63, 31, 62, 26, 185, 139, 191, 54, 126, 78, 190, 170, 182, 86, 62, 48, 82, 57, 190, 166, 26, 172, 62, 65, 197, 132, 190, 174, 117, 194, 189, 2, 109, 182, 62, 80, 207, 95, 191, 169, 122, 105, 62, 163, 9, 116, 191, 23, 231, 42, 61, 169, 76, 179, 191, 71, 136, 66, 62, 127, 124, 59, 62, 207, 35, 180, 191, 184, 111, 252, 62, 4, 85, 167, 190, 2, 78, 46, 62, 83, 87, 128, 62, 234, 181, 63, 190, 156, 191, 132, 62, 145, 181, 31, 60, 39, 4, 150, 61, 120, 161, 101, 190, 52, 162, 20, 62, 120, 163, 176, 62, 105, 225, 159, 61, 244, 78, 250, 61, 255, 117, 154, 190, 179, 21, 182, 62, 50, 119, 102, 62, 131, 72, 171, 190, 160, 153, 106, 61, 25, 75, 168, 189, 252, 154, 8, 62, 173, 207, 142, 61, 42, 119, 179, 61, 58, 169, 131, 60, 183, 202, 81, 62, 210, 197, 48, 190, 176, 167, 238, 187, 40, 49, 134, 190, 87, 118, 8, 189, 250, 56, 214, 189, 102, 64, 80, 61, 196, 238, 79, 62, 184, 58, 130, 190, 25, 148, 173, 62, 185, 235, 46, 190, 87, 22, 101, 62, 218, 4, 170, 61, 65, 159, 54, 62, 204, 70, 216, 61, 26, 74, 33, 190, 213, 225, 239, 189, 225, 8, 73, 189, 70, 23, 177, 189, 145, 122, 156, 188, 27, 53, 180, 189, 177, 114, 141, 189, 174, 133, 26, 190, 76, 46, 29, 61, 198, 143, 205, 188, 31, 82, 21, 190, 220, 89, 84, 189, 164, 37, 139, 60, 31, 17, 2, 190, 55, 188, 9, 62, 10, 86, 46, 190, 198, 153, 163, 190, 79, 145, 156, 189, 89, 124, 250, 60, 97, 104, 80, 62, 154, 17, 134, 61, 105, 149, 71, 190, 145, 208, 41, 62, 73, 187, 209, 187, 129, 127, 84, 190, 53, 73, 114, 190, 225, 87, 80, 190, 141, 243, 71, 190, 105, 2, 49, 190, 124, 172, 224, 188, 253, 40, 92, 190, 174, 242, 189, 61, 203, 233, 52, 62, 159, 159, 152, 190, 192, 81, 37, 62, 33, 83, 184, 189, 28, 186, 244, 59, 116, 65, 22, 62, 175, 51, 82, 62, 171, 238, 173, 190, 252, 131, 237, 61, 16, 107, 75, 190, 239, 185, 132, 60, 151, 45, 4, 62, 175, 171, 139, 190, 59, 26, 172, 189, 8, 133, 138, 61, 123, 192, 245, 190, 29, 143, 111, 188, 30, 223, 89, 188, 204, 81, 1, 188, 241, 22, 45, 62, 22, 36, 16, 61, 247, 225, 94, 189, 245, 242, 56, 62, 18, 52, 242, 187, 179, 92, 42, 62, 255, 221, 47, 61, 203, 34, 78, 60, 223, 30, 40, 62, 226, 88, 146, 187, 132, 23, 130, 58, 73, 61, 222, 61, 249, 68, 136, 189, 112, 26, 180, 62, 3, 217, 128, 189, 250, 85, 19, 189, 185, 176, 174, 61, 58, 117, 56, 60, 114, 121, 102, 62, 90, 171, 41, 190, 80, 102, 208, 61, 64, 74, 187, 61, 251, 56, 66, 190, 209, 92, 162, 189, 111, 18, 207, 190, 18, 54, 244, 61, 117, 120, 98, 62, 71, 110, 179, 62, 132, 24, 33, 62, 184, 233, 165, 60, 29, 153, 225, 189, 213, 100, 165, 62, 84, 87, 25, 189, 184, 93, 148, 62, 238, 244, 1, 62, 96, 128, 221, 62, 99, 47, 231, 190, 216, 9, 158, 190, 80, 32, 178, 62, 178, 31, 214, 190, 153, 166, 137, 189, 83, 143, 106, 61, 97, 171, 115, 62, 219, 35, 127, 190, 36, 176, 215, 62, 204, 197, 238, 190, 194, 27, 157, 62, 229, 138, 3, 190, 181, 26, 230, 62, 181, 29, 50, 62, 223, 36, 191, 190, 255, 118, 183, 189, 163, 61, 2, 191, 50, 126, 9, 62, 220, 248, 181, 62, 83, 1, 94, 191, 177, 214, 0, 62, 194, 196, 96, 61, 212, 69, 12, 190, 163, 135, 117, 62, 25, 91, 218, 190, 96, 23, 140, 190, 129, 237, 12, 62, 122, 243, 65, 60, 60, 46, 190, 61, 112, 52, 236, 190, 229, 95, 163, 188, 63, 42, 164, 190, 25, 43, 139, 62, 250, 61, 252, 61, 137, 224, 84, 191, 43, 114, 135, 62, 210, 235, 175, 190, 232, 38, 109, 60, 235, 72, 102, 62, 254, 59, 255, 61, 244, 218, 190, 190, 173, 165, 163, 61, 125, 138, 197, 190, 159, 233, 199, 61, 111, 162, 203, 190, 73, 164, 151, 61, 69, 90, 74, 62, 184, 69, 231, 189, 63, 240, 17, 63, 182, 3, 49, 190, 197, 74, 87, 190, 192, 166, 198, 61, 165, 213, 137, 188, 45, 79, 198, 189, 124, 105, 90, 62, 244, 1, 173, 61, 77, 129, 156, 62, 167, 247, 70, 62, 125, 144, 234, 189, 129, 51, 73, 60, 251, 150, 118, 189, 113, 194, 191, 62, 229, 114, 1, 62, 73, 246, 195, 62, 128, 211, 49, 191, 71, 158, 166, 190, 254, 113, 160, 61, 71, 185, 209, 189, 29, 229, 57, 61, 54, 87, 148, 189, 95, 59, 194, 62, 15, 182, 238, 59, 58, 114, 51, 62, 159, 30, 27, 190, 20, 104, 65, 62, 87, 52, 63, 62, 196, 140, 141, 62, 157, 5, 14, 190, 207, 185, 174, 61, 141, 193, 92, 190, 210, 63, 108, 62, 238, 199, 149, 61, 21, 177, 245, 61, 163, 36, 167, 62, 205, 147, 170, 61, 243, 174, 117, 189, 19, 31, 89, 62, 193, 154, 55, 189, 93, 29, 33, 59, 133, 198, 3, 62, 98, 162, 137, 62, 70, 134, 179, 61, 107, 220, 119, 190, 220, 164, 111, 190, 25, 92, 143, 61, 137, 172, 162, 190, 95, 64, 130, 62, 60, 215, 162, 62, 143, 32, 14, 62, 81, 80, 228, 190, 245, 102, 6, 62, 40, 149, 89, 61, 102, 106, 7, 61, 6, 20, 169, 61, 173, 205, 95, 62, 83, 146, 39, 190, 107, 45, 153, 61, 210, 205, 159, 61, 6, 34, 200, 61, 75, 56, 145, 61, 168, 99, 41, 189, 207, 182, 174, 60, 64, 185, 167, 189, 22, 45, 18, 62, 221, 116, 181, 61, 7, 255, 179, 190, 44, 211, 231, 60, 13, 241, 226, 61, 179, 125, 242, 190, 102, 103, 244, 61, 194, 30, 33, 191, 11, 22, 131, 61, 93, 73, 62, 190, 47, 221, 16, 62, 218, 200, 94, 189, 231, 234, 163, 190, 186, 69, 228, 188, 129, 23, 232, 189, 149, 153, 157, 61, 253, 221, 123, 189, 204, 166, 132, 190, 53, 242, 132, 189, 36, 118, 210, 190, 241, 99, 141, 61, 114, 222, 37, 189, 61, 249, 39, 62, 5, 176, 85, 190, 116, 139, 134, 189, 166, 52, 247, 61, 135, 245, 114, 61, 92, 85, 175, 189, 48, 62, 159, 59, 199, 129, 100, 190, 29, 242, 76, 61, 25, 19, 131, 190, 12, 164, 164, 60, 255, 92, 5, 190, 94, 184, 38, 62, 123, 205, 144, 189, 167, 158, 113, 190, 123, 108, 151, 62, 111, 58, 18, 61, 10, 61, 127, 187, 32, 131, 14, 62, 212, 156, 189, 61, 196, 205, 24, 61, 216, 181, 111, 190, 71, 64, 141, 60, 131, 155, 191, 190, 90, 178, 215, 188, 86, 44, 50, 62, 78, 39, 170, 61, 245, 239, 108, 189, 79, 135, 249, 61, 166, 108, 223, 61, 196, 167, 135, 62, 214, 188, 151, 60, 3, 171, 171, 60, 155, 87, 6, 62, 184, 46, 8, 190, 115, 19, 20, 189, 159, 134, 123, 61, 83, 9, 187, 61, 142, 206, 238, 189, 181, 97, 164, 188, 42, 109, 21, 190, 136, 211, 64, 61, 77, 115, 252, 189, 218, 121, 45, 190, 101, 94, 164, 189, 137, 15, 190, 189, 61, 42, 215, 61, 221, 206, 71, 190, 40, 62, 19, 190, 255, 175, 145, 189, 13, 196, 151, 189, 179, 190, 100, 61, 173, 217, 9, 189, 5, 195, 196, 60, 252, 219, 239, 189, 112, 231, 12, 190, 203, 131, 25, 62, 156, 20, 223, 61, 192, 43, 161, 61, 27, 25, 69, 188, 77, 110, 218, 60, 239, 129, 214, 188, 33, 117, 36, 61, 228, 90, 24, 190, 112, 221, 138, 188, 240, 39, 207, 189, 126, 236, 106, 189, 39, 135, 29, 190, 126, 233, 45, 62, 110, 59, 167, 190, 174, 83, 66, 189, 233, 2, 15, 62, 64, 91, 55, 188, 120, 53, 194, 62, 33, 231, 198, 61, 251, 110, 163, 189, 96, 62, 217, 61, 193, 230, 90, 190, 119, 28, 227, 188, 108, 203, 48, 62, 67, 170, 202, 189, 17, 213, 159, 60, 25, 231, 32, 62, 199, 64, 7, 61, 75, 23, 13, 189, 22, 149, 60, 189, 167, 149, 252, 61, 122, 242, 57, 62, 117, 158, 16, 62, 165, 185, 67, 190, 5, 120, 220, 189, 220, 18, 43, 62, 253, 220, 36, 189, 137, 87, 229, 61, 236, 179, 200, 189, 89, 80, 233, 188, 0, 0, 82, 188, 100, 96, 30, 63, 96, 75, 250, 190, 83, 11, 254, 61, 223, 83, 203, 59, 104, 119, 171, 61, 126, 89, 161, 62, 248, 30, 219, 189, 94, 251, 125, 61, 243, 187, 51, 191, 130, 47, 148, 62, 32, 166, 98, 61, 111, 139, 15, 191, 49, 81, 31, 62, 59, 156, 247, 60, 14, 247, 126, 190, 55, 133, 64, 189, 5, 154, 115, 189, 119, 241, 132, 61, 1, 39, 234, 61, 173, 33, 80, 190, 44, 206, 56, 190, 118, 172, 173, 190, 255, 218, 15, 62, 128, 220, 209, 190, 49, 194, 190, 61, 38, 242, 74, 62, 228, 153, 38, 191, 222, 15, 29, 63, 46, 161, 128, 189, 123, 146, 231, 61, 207, 66, 237, 61, 7, 230, 181, 189, 157, 150, 205, 62, 97, 162, 77, 190, 154, 201, 155, 62, 41, 244, 203, 188, 165, 28, 2, 62, 95, 163, 222, 62, 31, 184, 30, 190, 133, 189, 197, 62, 32, 67, 49, 191, 174, 194, 1, 62, 208, 91, 58, 62, 162, 16, 146, 190, 231, 143, 182, 62, 133, 179, 205, 61, 55, 182, 55, 190, 244, 161, 49, 62, 81, 150, 20, 190, 228, 40, 109, 190, 47, 173, 8, 189, 145, 193, 135, 190, 244, 183, 128, 190, 5, 222, 187, 61, 132, 194, 228, 189, 187, 255, 167, 61, 123, 108, 81, 62, 238, 108, 34, 188, 27, 199, 25, 191, 101, 188, 26, 63, 220, 234, 215, 60, 190, 163, 42, 62, 151, 7, 149, 185, 2, 5, 94, 62, 115, 139, 37, 61, 149, 118, 202, 61, 93, 225, 51, 62, 220, 112, 8, 190, 46, 219, 7, 188, 107, 95, 130, 189, 247, 130, 104, 189, 136, 51, 47, 190, 194, 166, 19, 190, 243, 7, 36, 190, 52, 165, 90, 61, 76, 69, 33, 190, 77, 203, 213, 61, 87, 173, 50, 190, 246, 236, 168, 61, 205, 163, 75, 60, 220, 157, 87, 189, 64, 110, 18, 190, 229, 83, 157, 61, 58, 205, 118, 189, 249, 118, 240, 189, 43, 120, 26, 62, 8, 75, 63, 188, 15, 77, 31, 188, 77, 186, 147, 189, 102, 154, 18, 58, 222, 92, 22, 190, 236, 254, 233, 189, 140, 170, 23, 190, 105, 83, 113, 61, 165, 227, 158, 189, 53, 111, 216, 188, 51, 4, 172, 188, 60, 238, 140, 189, 82, 197, 163, 189, 156, 207, 10, 190, 63, 137, 151, 188, 57, 202, 252, 189, 69, 100, 245, 61, 183, 94, 184, 188, 138, 148, 44, 61, 156, 51, 195, 188, 37, 106, 191, 61, 95, 126, 112, 60, 217, 227, 158, 189, 92, 40, 7, 189, 241, 19, 12, 62, 168, 244, 64, 189, 178, 252, 18, 190, 78, 200, 11, 62, 81, 23, 90, 61, 39, 149, 49, 61, 38, 127, 116, 187, 214, 115, 252, 189, 147, 28, 120, 61, 181, 113, 40, 190, 233, 168, 202, 61, 81, 254, 172, 60, 86, 131, 69, 189, 10, 151, 215, 189, 29, 19, 138, 189, 56, 195, 187, 60, 237, 86, 28, 190, 48, 173, 155, 61, 169, 162, 154, 189, 181, 94, 243, 189, 186, 12, 75, 189, 238, 134, 40, 188, 73, 119, 212, 189, 70, 253, 16, 60, 117, 46, 232, 189, 108, 79, 221, 189, 38, 206, 182, 188, 64, 246, 32, 188, 26, 163, 49, 189, 182, 196, 231, 61, 66, 159, 204, 189, 61, 252, 194, 61, 175, 210, 205, 189, 242, 3, 31, 190, 3, 46, 172, 189, 180, 41, 181, 185, 252, 77, 122, 61, 87, 0, 25, 62, 186, 255, 228, 189, 160, 207, 99, 61, 226, 27, 143, 189, 247, 242, 207, 61, 241, 107, 150, 61, 56, 156, 206, 60, 117, 17, 219, 188, 100, 145, 195, 189, 249, 74, 94, 61, 214, 56, 255, 61, 130, 32, 55, 190, 160, 19, 227, 61, 112, 109, 14, 190, 237, 180, 163, 61, 14, 166, 166, 61, 196, 96, 23, 62, 96, 157, 36, 62, 94, 181, 22, 189, 1, 122, 13, 61, 113, 181, 15, 190, 149, 113, 187, 190, 196, 42, 139, 190, 32, 73, 182, 188, 176, 126, 170, 62, 94, 136, 86, 61, 183, 217, 207, 189, 104, 12, 172, 61, 154, 144, 102, 62, 203, 56, 202, 188, 34, 211, 225, 61, 245, 100, 141, 188, 118, 149, 51, 190, 82, 148, 6, 190, 120, 205, 205, 189, 57, 73, 15, 189, 66, 241, 123, 190, 177, 62, 206, 62, 1, 95, 99, 61, 161, 158, 144, 62, 19, 81, 233, 190, 135, 79, 204, 61, 42, 15, 125, 62, 72, 51, 166, 61, 165, 235, 6, 60, 68, 100, 161, 62, 63, 124, 45, 191, 129, 238, 145, 62, 192, 231, 230, 189, 98, 78, 227, 61, 25, 78, 59, 62, 59, 122, 182, 190, 141, 22, 2, 61, 241, 66, 197, 190, 246, 111, 116, 61, 29, 28, 138, 62, 42, 89, 56, 191, 214, 115, 170, 62, 255, 56, 65, 61, 48, 195, 250, 189, 231, 148, 57, 62, 119, 119, 237, 190, 55, 187, 27, 61, 198, 10, 62, 61, 39, 33, 221, 190, 142, 236, 80, 190, 122, 255, 37, 191, 142, 43, 158, 61, 15, 203, 210, 190, 69, 135, 22, 62, 55, 244, 189, 62, 247, 94, 122, 191, 121, 139, 62, 63, 24, 130, 128, 190, 203, 215, 43, 61, 225, 193, 96, 61, 200, 209, 247, 61, 250, 90, 21, 190, 58, 50, 32, 62, 150, 104, 128, 189, 11, 253, 27, 62, 16, 207, 47, 62, 188, 132, 12, 190, 230, 30, 232, 189, 111, 56, 24, 61, 104, 65, 2, 190, 204, 230, 46, 61, 145, 39, 55, 189, 138, 21, 249, 61, 118, 21, 1, 190, 61, 58, 48, 190, 200, 233, 136, 188, 65, 225, 50, 190, 158, 204, 130, 189, 129, 235, 178, 188, 1, 180, 184, 189, 164, 21, 186, 189, 151, 197, 232, 189, 153, 133, 74, 187, 182, 102, 14, 61, 193, 23, 231, 189, 36, 145, 77, 188, 95, 69, 32, 190, 105, 48, 213, 189, 93, 80, 39, 190, 5, 177, 181, 189, 218, 175, 254, 189, 93, 42, 222, 61, 166, 53, 131, 189, 114, 187, 117, 61, 85, 75, 231, 188, 57, 217, 128, 189, 73, 49, 158, 61, 155, 179, 11, 189, 75, 235, 252, 189, 230, 127, 246, 61, 147, 102, 251, 189, 3, 253, 21, 190, 35, 55, 172, 60, 199, 233, 252, 61, 17, 250, 44, 190, 91, 41, 76, 189, 199, 55, 38, 190, 41, 177, 5, 190, 192, 254, 21, 190, 0, 81, 185, 189, 167, 34, 50, 190, 64, 200, 10, 62, 128, 168, 204, 189, 177, 121, 33, 190, 248, 208, 148, 189, 57, 24, 192, 189, 40, 50, 125, 61, 98, 198, 37, 190, 59, 180, 140, 61, 196, 99, 62, 188, 114, 33, 19, 190, 176, 76, 201, 189, 127, 59, 48, 190, 118, 140, 199, 189, 242, 9, 95, 61, 154, 28, 150, 190, 129, 118, 229, 62, 36, 180, 15, 189, 71, 58, 158, 62, 35, 71, 185, 61, 198, 125, 224, 189, 208, 197, 166, 62, 61, 207, 53, 190, 192, 26, 1, 190, 94, 39, 140, 189, 187, 193, 210, 189, 7, 232, 197, 61, 158, 75, 203, 190, 101, 253, 254, 189, 179, 18, 151, 62, 207, 118, 201, 62, 145, 192, 184, 61, 92, 16, 225, 61, 206, 230, 46, 190, 15, 211, 140, 62, 111, 10, 5, 188, 8, 193, 4, 63, 203, 63, 63, 62, 223, 215, 138, 62, 23, 100, 7, 191, 202, 216, 238, 189, 221, 130, 60, 62, 205, 118, 149, 190, 205, 245, 51, 190, 213, 145, 199, 189, 141, 88, 134, 62, 175, 159, 131, 190, 136, 56, 152, 190, 61, 40, 20, 61, 129, 73, 222, 60, 235, 91, 95, 61, 77, 93, 100, 189, 72, 129, 12, 188, 105, 26, 103, 62, 57, 168, 110, 190, 13, 240, 145, 62, 242, 134, 95, 61, 12, 106, 154, 189, 180, 164, 30, 62, 179, 207, 183, 190, 37, 62, 158, 61, 253, 218, 132, 62, 76, 138, 210, 61, 165, 101, 21, 62, 191, 124, 181, 62, 227, 135, 219, 60, 8, 40, 105, 62, 204, 163, 109, 188, 39, 166, 62, 62, 35, 174, 31, 190, 38, 82, 168, 62, 215, 182, 36, 190, 166, 135, 129, 190, 97, 181, 141, 62, 90, 1, 146, 190, 188, 82, 245, 60, 218, 176, 254, 60, 114, 204, 68, 62, 138, 59, 245, 189, 185, 88, 134, 59, 146, 27, 223, 61, 11, 128, 25, 62, 167, 183, 79, 189, 1, 195, 6, 190, 234, 115, 169, 189, 146, 162, 225, 61, 97, 179, 67, 190, 92, 141, 107, 59, 97, 13, 171, 189, 215, 247, 32, 190, 223, 249, 140, 61, 80, 234, 7, 190, 73, 205, 103, 60, 39, 112, 30, 190, 26, 192, 5, 190, 107, 17, 56, 189, 229, 19, 230, 189, 172, 35, 192, 189, 143, 207, 106, 61, 85, 19, 18, 190, 226, 111, 253, 189, 91, 211, 3, 190, 58, 206, 30, 190, 38, 139, 210, 189, 82, 90, 158, 188, 209, 180, 193, 188, 191, 205, 42, 190, 72, 178, 0, 62, 94, 104, 52, 190, 77, 80, 37, 189, 231, 113, 134, 189, 167, 41, 206, 62, 140, 80, 31, 191, 82, 23, 162, 59, 2, 126, 129, 62, 183, 203, 254, 186, 74, 63, 179, 62, 7, 187, 155, 190, 68, 38, 39, 189, 216, 7, 43, 191, 133, 174, 34, 62, 179, 127, 47, 62, 237, 31, 132, 191, 98, 161, 224, 61, 211, 193, 224, 188, 254, 48, 77, 191, 53, 28, 168, 62, 184, 206, 82, 191, 118, 133, 157, 190, 234, 52, 72, 190, 103, 122, 231, 189, 73, 106, 163, 61, 71, 193, 158, 190, 92, 251, 127, 62, 136, 13, 225, 190, 12, 147, 162, 190, 84, 239, 209, 189, 73, 59, 71, 191, 51, 63, 189, 189, 191, 169, 115, 191, 67, 170, 175, 190, 23, 162, 133, 61, 199, 131, 136, 189, 29, 214, 246, 189, 43, 142, 51, 62, 181, 146, 212, 189, 110, 212, 214, 189, 198, 126, 0, 191, 203, 53, 117, 62, 162, 135, 132, 61, 243, 148, 10, 62, 180, 87, 126, 190, 181, 231, 58, 62, 23, 210, 47, 191, 122, 227, 233, 188, 18, 177, 64, 189, 198, 177, 71, 190, 33, 170, 6, 63, 20, 125, 46, 62, 61, 116, 10, 61, 151, 115, 100, 62, 188, 163, 243, 189, 75, 100, 36, 62, 86, 125, 201, 61, 94, 19, 187, 61, 96, 118, 42, 190, 17, 172, 199, 62, 98, 135, 191, 190, 24, 162, 19, 62, 67, 156, 115, 62, 250, 62, 30, 63, 111, 66, 158, 62, 166, 69, 183, 62, 199, 114, 200, 189, 15, 171, 20, 62, 15, 107, 48, 62, 236, 217, 21, 189, 189, 183, 154, 61, 148, 107, 172, 60, 40, 239, 187, 189, 206, 223, 15, 190, 164, 170, 28, 189, 158, 80, 220, 189, 136, 86, 57, 190, 4, 105, 192, 189, 156, 158, 138, 189, 108, 8, 121, 189, 168, 72, 72, 189, 5, 202, 90, 189, 216, 149, 48, 190, 166, 90, 220, 189, 28, 246, 100, 61, 142, 86, 218, 61, 50, 157, 16, 190, 135, 237, 2, 190, 101, 16, 53, 189, 204, 84, 26, 190, 124, 172, 14, 62, 50, 210, 0, 187, 3, 193, 4, 190, 47, 58, 18, 62, 138, 174, 242, 61, 65, 24, 1, 188, 13, 187, 34, 62, 251, 245, 204, 189, 51, 172, 92, 189, 73, 157, 41, 190, 159, 39, 155, 190, 109, 77, 2, 62, 10, 215, 3, 191, 181, 199, 56, 62, 37, 43, 188, 190, 41, 224, 151, 60, 191, 218, 174, 62, 166, 30, 208, 188, 31, 142, 15, 63, 57, 116, 107, 190, 185, 190, 178, 190, 222, 153, 13, 61, 129, 147, 176, 60, 93, 58, 179, 190, 18, 253, 117, 189, 188, 36, 80, 62, 183, 50, 136, 60, 175, 106, 42, 61, 189, 77, 193, 190, 118, 230, 174, 61, 170, 37, 10, 190, 117, 84, 102, 62, 21, 95, 78, 60, 204, 25, 106, 62, 104, 130, 140, 191, 29, 139, 86, 191, 73, 235, 138, 62, 53, 246, 240, 188, 254, 196, 177, 190, 142, 43, 148, 190, 74, 226, 169, 59, 130, 139, 175, 189, 212, 158, 133, 189, 219, 216, 56, 62, 193, 183, 73, 190, 95, 55, 174, 61, 172, 7, 183, 190, 11, 98, 63, 187, 120, 229, 16, 62, 27, 80, 151, 190, 116, 138, 190, 62, 4, 29, 141, 189, 188, 187, 101, 190, 45, 204, 210, 61, 194, 174, 24, 60, 231, 252, 59, 190, 71, 191, 195, 62, 123, 21, 6, 62, 119, 62, 166, 62, 199, 244, 10, 62, 158, 249, 120, 190, 203, 32, 37, 61, 8, 209, 17, 190, 79, 225, 111, 62, 32, 48, 134, 60, 195, 110, 161, 62, 166, 20, 211, 190, 49, 212, 190, 190, 219, 214, 34, 62, 47, 95, 34, 190, 100, 126, 82, 189, 162, 238, 191, 188, 8, 69, 105, 62, 141, 41, 116, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 65, 50, 186, 98, 146, 151, 190, 126, 235, 146, 61, 118, 28, 155, 62, 133, 244, 84, 62, 7, 104, 162, 61, 119, 242, 176, 189, 173, 188, 212, 62, 87, 247, 135, 61, 15, 109, 132, 62, 61, 94, 59, 189, 135, 55, 173, 188, 208, 133, 7, 62, 26, 1, 46, 190, 59, 82, 22, 62, 0, 87, 251, 61, 187, 113, 71, 62, 54, 3, 226, 61, 28, 75, 151, 60, 45, 204, 98, 190, 46, 51, 158, 61, 16, 253, 127, 62, 226, 109, 48, 190, 246, 69, 22, 62, 202, 78, 25, 62, 26, 225, 137, 62, 111, 112, 165, 188, 116, 156, 140, 189, 91, 62, 195, 189, 154, 95, 2, 190, 94, 207, 168, 61, 51, 54, 155, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 252, 1, 187, 90, 219, 200, 62, 255, 185, 110, 190, 107, 126, 70, 63, 44, 173, 132, 62, 222, 215, 33, 190, 81, 48, 8, 62, 149, 142, 132, 190, 213, 234, 55, 63, 227, 185, 141, 190, 111, 216, 162, 190, 228, 98, 4, 63, 196, 126, 196, 61, 150, 93, 1, 62, 198, 149, 29, 190, 239, 142, 34, 63, 68, 125, 32, 63, 78, 216, 87, 61, 228, 229, 157, 60, 180, 118, 105, 61, 36, 137, 116, 190, 167, 85, 75, 63, 82, 75, 176, 189, 123, 166, 210, 188, 133, 109, 235, 190, 105, 212, 151, 190, 139, 47, 103, 189, 77, 188, 134, 63, 212, 10, 27, 63, 198, 217, 22, 189, 120, 36, 197, 190, 112, 120, 254, 190, 198, 50, 241, 189, 29, 252, 6, 62, 181, 172, 199, 188, 137, 118, 202, 189, 236, 65, 116, 190, 184, 142, 72, 62, 149, 127, 172, 189, 183, 144, 255, 189, 223, 181, 79, 62, 172, 206, 232, 188, 148, 8, 37, 62, 151, 242, 251, 189, 150, 134, 32, 190, 241, 136, 21, 61, 168, 207, 185, 61, 203, 119, 165, 188, 38, 88, 72, 61, 237, 182, 29, 190, 252, 171, 10, 62, 85, 192, 255, 189, 80, 22, 189, 188, 77, 241, 156, 61, 114, 238, 44, 62, 27, 216, 66, 60, 27, 39, 219, 61, 38, 77, 1, 190, 190, 220, 251, 61, 218, 218, 239, 61, 35, 63, 235, 59, 200, 236, 168, 61, 193, 97, 36, 189, 130, 229, 9, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {4, 89, 212, 189, 94, 25, 185, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {59, 134, 74, 190, 132, 191, 56, 63, 243, 198, 14, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {208, 102, 83, 63, 223, 24, 200, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0041/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}