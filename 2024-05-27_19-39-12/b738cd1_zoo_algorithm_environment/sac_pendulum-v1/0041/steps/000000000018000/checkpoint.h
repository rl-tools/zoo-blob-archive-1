// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 250, 226, 190, 35, 152, 33, 63, 65, 112, 241, 190, 3, 223, 86, 190, 211, 78, 200, 190, 2, 89, 52, 191, 235, 104, 215, 190, 49, 185, 47, 191, 87, 13, 248, 62, 211, 185, 57, 191, 30, 43, 239, 188, 59, 242, 53, 190, 238, 149, 13, 191, 255, 166, 209, 62, 47, 155, 189, 62, 141, 91, 140, 62, 154, 112, 253, 62, 51, 44, 19, 191, 60, 253, 62, 61, 95, 30, 190, 189, 239, 207, 4, 191, 230, 230, 222, 62, 73, 221, 37, 191, 133, 242, 18, 191, 126, 231, 131, 63, 58, 153, 109, 63, 1, 43, 236, 62, 110, 185, 135, 62, 63, 121, 169, 62, 219, 60, 174, 190, 89, 134, 190, 190, 58, 238, 77, 63, 223, 10, 49, 62, 123, 140, 223, 190, 178, 56, 10, 192, 147, 128, 231, 190, 222, 175, 209, 62, 101, 153, 130, 191, 85, 144, 207, 190, 91, 84, 119, 188, 219, 102, 136, 63, 157, 217, 253, 62, 185, 77, 17, 61, 140, 101, 32, 191, 80, 108, 140, 62, 68, 120, 49, 191, 95, 139, 144, 61, 128, 58, 160, 189, 182, 53, 19, 63, 115, 132, 143, 190, 210, 125, 41, 63, 87, 21, 80, 190, 73, 76, 183, 191, 36, 154, 71, 190, 5, 93, 179, 61, 106, 3, 51, 63, 152, 85, 99, 62, 215, 47, 162, 189, 163, 12, 247, 59, 28, 59, 68, 191, 62, 242, 1, 191, 69, 31, 230, 63, 189, 242, 6, 62, 253, 83, 166, 62, 20, 33, 167, 62, 114, 249, 192, 190, 159, 37, 35, 191, 138, 88, 45, 63, 161, 139, 243, 60, 217, 68, 23, 63, 213, 53, 151, 62, 45, 134, 154, 190, 206, 169, 160, 189, 20, 62, 224, 62, 19, 11, 159, 62, 198, 136, 75, 189, 139, 243, 50, 191, 35, 204, 158, 62, 52, 129, 16, 191, 208, 14, 227, 191, 233, 238, 246, 190, 65, 75, 158, 62, 77, 160, 171, 191, 35, 133, 119, 190, 41, 9, 139, 190, 145, 250, 66, 191, 29, 69, 152, 188, 28, 65, 193, 62, 119, 128, 19, 191, 25, 171, 19, 62, 75, 115, 125, 60, 53, 233, 31, 191, 5, 181, 3, 189, 75, 216, 20, 63, 43, 247, 24, 191, 250, 12, 216, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 108, 15, 191, 51, 143, 171, 189, 170, 54, 18, 62, 25, 241, 37, 63, 100, 109, 163, 190, 162, 62, 19, 62, 100, 226, 126, 190, 181, 186, 163, 190, 251, 212, 61, 191, 59, 181, 255, 61, 114, 22, 142, 188, 35, 22, 33, 190, 11, 172, 48, 191, 12, 117, 207, 62, 23, 168, 81, 62, 139, 121, 95, 63, 183, 196, 90, 61, 60, 125, 36, 63, 7, 77, 203, 60, 196, 221, 176, 190, 127, 100, 34, 63, 199, 24, 63, 189, 123, 130, 8, 63, 8, 8, 11, 62, 72, 51, 185, 189, 237, 179, 138, 189, 105, 77, 101, 190, 180, 228, 203, 61, 66, 105, 179, 190, 60, 246, 140, 62, 50, 218, 0, 63, 183, 91, 111, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 236, 148, 189, 31, 225, 200, 189, 115, 223, 66, 189, 34, 190, 190, 189, 244, 196, 40, 61, 34, 208, 254, 189, 122, 187, 203, 189, 246, 110, 24, 62, 4, 215, 219, 189, 89, 149, 32, 61, 156, 214, 149, 59, 43, 112, 155, 61, 204, 111, 32, 190, 222, 34, 118, 189, 158, 22, 226, 189, 220, 205, 206, 189, 127, 63, 240, 189, 182, 23, 9, 62, 171, 54, 41, 61, 189, 151, 25, 60, 123, 87, 183, 59, 251, 206, 144, 188, 3, 108, 69, 189, 76, 66, 175, 189, 44, 253, 125, 189, 151, 176, 131, 189, 132, 239, 79, 189, 210, 117, 173, 189, 254, 47, 148, 189, 241, 202, 38, 190, 147, 125, 80, 61, 195, 178, 85, 189, 101, 0, 30, 62, 106, 103, 151, 62, 31, 43, 20, 191, 29, 134, 100, 60, 67, 50, 211, 190, 78, 136, 77, 62, 26, 104, 160, 62, 56, 94, 150, 189, 31, 222, 182, 62, 87, 106, 204, 189, 1, 92, 127, 62, 44, 157, 144, 61, 214, 193, 176, 62, 88, 193, 26, 189, 189, 131, 9, 191, 51, 190, 160, 187, 31, 255, 94, 62, 234, 125, 183, 190, 38, 202, 42, 61, 220, 155, 193, 62, 59, 56, 204, 62, 121, 102, 214, 61, 58, 127, 27, 190, 27, 7, 6, 61, 62, 107, 102, 190, 109, 227, 72, 191, 136, 66, 70, 62, 120, 222, 174, 190, 72, 94, 164, 62, 231, 227, 101, 191, 158, 141, 49, 191, 229, 39, 20, 62, 62, 139, 53, 189, 64, 85, 42, 62, 244, 193, 240, 60, 31, 65, 35, 61, 179, 234, 171, 61, 237, 115, 86, 62, 87, 229, 120, 61, 14, 212, 57, 190, 168, 217, 4, 62, 130, 111, 128, 62, 128, 106, 102, 190, 156, 214, 45, 190, 31, 214, 190, 190, 129, 11, 2, 188, 46, 0, 232, 61, 20, 207, 168, 190, 135, 200, 140, 62, 81, 96, 53, 190, 94, 36, 85, 62, 74, 249, 238, 188, 23, 45, 219, 189, 52, 101, 7, 61, 188, 8, 122, 59, 38, 130, 46, 61, 43, 106, 155, 62, 56, 47, 25, 61, 202, 139, 198, 190, 184, 30, 11, 191, 134, 176, 91, 190, 175, 58, 203, 62, 116, 44, 209, 189, 239, 182, 166, 190, 232, 82, 56, 63, 190, 7, 207, 191, 97, 103, 22, 62, 29, 59, 31, 191, 48, 196, 134, 62, 244, 26, 22, 63, 5, 23, 200, 190, 154, 202, 46, 62, 126, 217, 69, 191, 44, 126, 13, 62, 19, 117, 18, 62, 185, 13, 180, 191, 41, 204, 36, 63, 132, 24, 29, 62, 247, 151, 58, 190, 174, 207, 192, 62, 19, 71, 159, 190, 95, 251, 248, 60, 190, 103, 126, 62, 204, 126, 65, 191, 157, 53, 167, 62, 36, 202, 33, 191, 197, 98, 64, 61, 64, 34, 188, 191, 240, 64, 18, 62, 94, 17, 26, 62, 5, 248, 251, 191, 102, 116, 94, 63, 22, 217, 168, 190, 188, 83, 169, 61, 9, 217, 98, 62, 66, 110, 70, 190, 80, 110, 27, 62, 39, 10, 202, 189, 98, 135, 13, 61, 251, 217, 235, 190, 40, 161, 93, 62, 115, 96, 184, 62, 13, 127, 37, 61, 1, 133, 239, 61, 89, 127, 5, 190, 17, 61, 222, 62, 179, 242, 208, 62, 94, 194, 163, 191, 206, 19, 161, 187, 5, 103, 155, 59, 9, 168, 208, 61, 146, 241, 0, 62, 170, 178, 172, 61, 203, 51, 101, 61, 221, 54, 132, 62, 123, 53, 137, 190, 171, 165, 206, 61, 36, 239, 97, 190, 254, 198, 199, 60, 109, 43, 136, 61, 200, 197, 93, 61, 140, 86, 220, 61, 145, 1, 31, 191, 23, 48, 204, 62, 127, 52, 91, 189, 207, 37, 64, 62, 97, 255, 235, 61, 67, 123, 80, 62, 72, 124, 39, 62, 63, 107, 45, 190, 159, 130, 115, 189, 47, 154, 252, 189, 161, 48, 33, 189, 2, 104, 15, 62, 185, 196, 215, 59, 70, 207, 103, 190, 247, 246, 6, 191, 123, 148, 93, 62, 156, 210, 20, 191, 210, 137, 96, 190, 145, 84, 70, 191, 231, 213, 207, 190, 143, 106, 193, 62, 161, 232, 83, 62, 200, 223, 7, 190, 63, 215, 165, 191, 101, 255, 240, 190, 100, 248, 177, 61, 246, 236, 199, 62, 16, 225, 139, 62, 100, 226, 114, 190, 206, 63, 195, 62, 121, 32, 215, 190, 43, 32, 186, 62, 202, 58, 254, 190, 155, 29, 156, 191, 74, 42, 4, 191, 235, 146, 239, 61, 104, 142, 140, 61, 31, 61, 14, 191, 181, 166, 3, 62, 38, 196, 43, 62, 104, 160, 103, 62, 252, 152, 19, 62, 63, 13, 172, 188, 88, 204, 144, 189, 207, 180, 19, 62, 221, 245, 37, 62, 114, 28, 191, 190, 207, 81, 10, 58, 3, 13, 68, 61, 158, 62, 114, 189, 159, 191, 29, 62, 134, 62, 162, 190, 225, 196, 71, 62, 42, 250, 44, 188, 227, 187, 29, 191, 209, 76, 204, 189, 94, 65, 249, 60, 247, 7, 13, 188, 114, 72, 192, 189, 64, 38, 153, 60, 29, 60, 120, 190, 36, 211, 239, 61, 103, 165, 210, 60, 159, 179, 10, 63, 135, 108, 3, 61, 210, 237, 92, 189, 164, 243, 164, 62, 166, 226, 188, 189, 170, 46, 60, 58, 204, 241, 51, 62, 3, 14, 41, 190, 59, 222, 159, 62, 156, 166, 227, 189, 17, 230, 189, 187, 188, 155, 174, 61, 191, 72, 49, 189, 92, 88, 68, 62, 97, 30, 91, 190, 73, 91, 94, 62, 190, 192, 216, 61, 249, 64, 49, 190, 52, 51, 44, 189, 56, 129, 240, 190, 253, 246, 30, 62, 73, 223, 129, 62, 54, 48, 155, 62, 2, 153, 114, 62, 144, 252, 51, 61, 219, 60, 94, 188, 31, 87, 146, 62, 213, 153, 132, 60, 171, 105, 12, 62, 37, 27, 202, 61, 121, 249, 191, 62, 9, 252, 238, 190, 164, 99, 164, 190, 230, 131, 170, 62, 206, 158, 216, 190, 42, 187, 208, 189, 90, 132, 67, 62, 221, 23, 138, 62, 132, 191, 166, 190, 73, 255, 23, 63, 3, 6, 227, 190, 17, 143, 145, 62, 93, 193, 4, 191, 252, 67, 241, 62, 104, 247, 147, 62, 49, 95, 194, 190, 98, 6, 43, 191, 39, 112, 233, 190, 68, 122, 143, 62, 121, 225, 1, 63, 177, 234, 201, 191, 2, 24, 12, 190, 230, 118, 220, 61, 179, 31, 66, 190, 201, 147, 161, 62, 200, 108, 227, 190, 125, 150, 1, 191, 176, 40, 50, 62, 80, 72, 190, 61, 153, 20, 164, 62, 204, 105, 238, 190, 105, 244, 239, 61, 31, 143, 157, 190, 20, 146, 139, 62, 31, 44, 65, 61, 132, 153, 159, 191, 214, 87, 32, 62, 219, 150, 13, 191, 174, 85, 230, 189, 189, 219, 176, 60, 18, 59, 206, 190, 147, 157, 239, 190, 85, 255, 52, 61, 100, 165, 0, 191, 205, 222, 215, 61, 124, 50, 8, 191, 125, 48, 14, 61, 123, 95, 33, 62, 236, 51, 31, 190, 142, 164, 10, 63, 141, 242, 30, 190, 241, 37, 68, 191, 90, 130, 66, 62, 251, 128, 158, 189, 157, 94, 90, 190, 112, 123, 167, 62, 0, 178, 175, 61, 15, 175, 213, 62, 140, 53, 111, 62, 63, 147, 79, 190, 245, 76, 210, 188, 145, 255, 17, 190, 87, 102, 114, 62, 88, 79, 159, 61, 49, 50, 161, 62, 220, 4, 108, 191, 79, 138, 142, 190, 113, 194, 157, 61, 56, 70, 188, 189, 24, 143, 158, 189, 201, 167, 199, 61, 219, 150, 228, 62, 246, 153, 180, 189, 201, 60, 144, 61, 225, 8, 247, 190, 137, 93, 6, 62, 19, 161, 148, 62, 24, 54, 57, 62, 14, 44, 168, 189, 157, 131, 46, 190, 45, 131, 32, 191, 97, 146, 242, 62, 27, 233, 167, 62, 160, 132, 34, 187, 222, 104, 253, 62, 163, 202, 92, 62, 235, 186, 33, 60, 50, 84, 83, 62, 159, 233, 16, 190, 8, 200, 234, 61, 9, 96, 31, 190, 9, 121, 216, 62, 76, 79, 23, 190, 238, 48, 137, 190, 174, 5, 97, 190, 195, 253, 23, 190, 154, 98, 167, 189, 244, 8, 103, 62, 68, 161, 148, 62, 80, 190, 147, 62, 28, 105, 31, 191, 190, 226, 93, 189, 76, 80, 85, 62, 226, 217, 243, 61, 179, 178, 180, 60, 128, 115, 88, 62, 125, 205, 16, 190, 43, 57, 142, 62, 115, 212, 23, 62, 68, 187, 18, 62, 251, 156, 165, 188, 43, 106, 67, 60, 57, 113, 254, 189, 149, 204, 28, 190, 183, 7, 20, 61, 145, 7, 54, 60, 247, 203, 151, 191, 25, 254, 152, 189, 199, 251, 148, 60, 115, 47, 36, 190, 244, 125, 6, 62, 89, 209, 70, 191, 143, 66, 139, 62, 250, 143, 147, 190, 30, 132, 106, 62, 82, 237, 75, 190, 234, 199, 207, 190, 135, 60, 1, 189, 148, 9, 117, 190, 42, 207, 248, 61, 33, 28, 171, 62, 80, 0, 112, 191, 73, 37, 199, 189, 251, 203, 134, 190, 16, 43, 193, 62, 81, 5, 238, 61, 217, 149, 74, 189, 194, 128, 224, 62, 187, 131, 209, 190, 246, 99, 1, 62, 229, 214, 224, 61, 36, 60, 168, 189, 40, 190, 13, 62, 37, 185, 2, 191, 1, 9, 209, 189, 215, 183, 43, 191, 238, 215, 13, 62, 124, 216, 84, 190, 217, 212, 4, 190, 149, 55, 42, 191, 49, 33, 211, 190, 140, 112, 147, 62, 62, 137, 167, 62, 253, 119, 10, 190, 123, 78, 141, 62, 36, 8, 80, 190, 102, 99, 180, 190, 215, 243, 90, 191, 118, 152, 138, 62, 180, 24, 167, 190, 240, 215, 46, 62, 239, 215, 102, 61, 65, 99, 115, 61, 78, 98, 185, 190, 131, 252, 38, 62, 116, 155, 170, 62, 178, 123, 123, 62, 182, 144, 196, 61, 22, 86, 2, 191, 155, 87, 6, 62, 184, 46, 8, 190, 101, 121, 56, 189, 159, 134, 123, 61, 134, 55, 156, 61, 142, 206, 238, 189, 181, 97, 164, 188, 42, 109, 21, 190, 220, 33, 92, 61, 77, 115, 252, 189, 254, 218, 67, 190, 101, 94, 164, 189, 137, 15, 190, 189, 34, 118, 207, 61, 206, 226, 80, 190, 196, 156, 29, 190, 198, 184, 143, 189, 134, 95, 191, 189, 88, 200, 53, 61, 173, 217, 9, 189, 229, 116, 145, 60, 252, 219, 239, 189, 228, 187, 28, 190, 203, 131, 25, 62, 50, 80, 203, 61, 210, 206, 141, 61, 27, 25, 69, 188, 77, 110, 218, 60, 246, 176, 29, 189, 4, 62, 18, 61, 41, 142, 39, 190, 112, 221, 138, 188, 52, 174, 80, 190, 236, 197, 3, 190, 84, 165, 15, 191, 169, 162, 142, 62, 249, 16, 105, 191, 47, 188, 30, 189, 196, 16, 130, 189, 88, 169, 30, 189, 94, 55, 233, 62, 160, 250, 174, 61, 115, 139, 205, 190, 8, 42, 139, 62, 250, 186, 157, 190, 184, 206, 46, 190, 243, 177, 29, 190, 163, 60, 253, 60, 96, 86, 43, 190, 32, 241, 132, 62, 31, 230, 50, 187, 58, 34, 60, 190, 35, 64, 128, 189, 140, 60, 181, 61, 120, 164, 158, 62, 50, 33, 173, 61, 40, 189, 184, 190, 83, 119, 51, 191, 167, 179, 131, 62, 147, 252, 180, 189, 135, 47, 162, 62, 224, 83, 90, 190, 141, 50, 179, 188, 94, 195, 180, 190, 128, 243, 27, 63, 210, 182, 211, 190, 37, 253, 0, 62, 51, 162, 168, 189, 8, 89, 89, 60, 104, 2, 226, 62, 196, 192, 102, 189, 240, 120, 39, 61, 124, 82, 95, 191, 44, 191, 198, 62, 167, 119, 208, 189, 143, 195, 153, 191, 81, 101, 201, 62, 223, 146, 47, 189, 0, 0, 98, 190, 85, 37, 188, 61, 124, 73, 185, 189, 177, 189, 144, 62, 38, 192, 124, 189, 206, 53, 122, 189, 212, 181, 48, 191, 212, 18, 206, 189, 16, 42, 133, 61, 177, 195, 124, 190, 22, 212, 193, 60, 75, 71, 60, 62, 10, 49, 148, 191, 47, 3, 76, 63, 82, 191, 142, 61, 100, 2, 29, 62, 58, 105, 126, 62, 71, 84, 214, 189, 33, 76, 248, 62, 202, 98, 97, 190, 227, 54, 146, 62, 61, 115, 182, 189, 79, 184, 102, 188, 178, 218, 217, 62, 43, 84, 25, 190, 165, 21, 214, 62, 46, 200, 115, 191, 0, 47, 170, 61, 216, 138, 13, 61, 49, 108, 251, 190, 213, 217, 211, 62, 25, 184, 144, 188, 161, 238, 7, 190, 211, 236, 11, 62, 54, 26, 110, 190, 141, 162, 39, 190, 28, 190, 134, 190, 203, 53, 134, 190, 95, 142, 44, 191, 57, 210, 59, 62, 49, 211, 183, 190, 43, 169, 227, 61, 103, 176, 194, 61, 223, 13, 243, 60, 88, 71, 49, 191, 111, 207, 38, 63, 203, 220, 147, 61, 177, 194, 68, 62, 139, 21, 169, 61, 121, 4, 175, 62, 115, 139, 37, 61, 149, 118, 202, 61, 116, 54, 42, 62, 171, 200, 8, 190, 80, 58, 74, 188, 107, 95, 130, 189, 247, 130, 104, 189, 136, 51, 47, 190, 194, 166, 19, 190, 243, 7, 36, 190, 226, 194, 88, 61, 76, 69, 33, 190, 77, 203, 213, 61, 162, 207, 56, 190, 251, 169, 156, 61, 117, 79, 40, 60, 227, 78, 126, 189, 65, 238, 22, 190, 217, 148, 154, 61, 58, 205, 118, 189, 249, 118, 240, 189, 43, 120, 26, 62, 173, 41, 101, 188, 15, 77, 31, 188, 179, 118, 154, 189, 231, 118, 177, 187, 222, 92, 22, 190, 236, 254, 233, 189, 78, 45, 25, 190, 67, 60, 92, 61, 120, 28, 165, 189, 53, 111, 216, 188, 51, 4, 172, 188, 60, 238, 140, 189, 183, 162, 167, 189, 156, 207, 10, 190, 24, 77, 187, 188, 57, 202, 252, 189, 69, 100, 245, 61, 183, 94, 184, 188, 37, 22, 2, 61, 156, 51, 195, 188, 83, 207, 180, 61, 95, 126, 112, 60, 217, 227, 158, 189, 44, 101, 69, 189, 51, 195, 10, 62, 239, 144, 79, 189, 105, 146, 29, 190, 78, 200, 11, 62, 178, 178, 64, 61, 39, 149, 49, 61, 82, 123, 137, 188, 214, 115, 252, 189, 76, 39, 93, 61, 181, 113, 40, 190, 124, 57, 193, 61, 81, 254, 172, 60, 86, 131, 69, 189, 10, 151, 215, 189, 29, 19, 138, 189, 139, 216, 170, 60, 237, 86, 28, 190, 48, 173, 155, 61, 169, 162, 154, 189, 181, 94, 243, 189, 186, 12, 75, 189, 238, 134, 40, 188, 73, 119, 212, 189, 70, 253, 16, 60, 117, 46, 232, 189, 108, 79, 221, 189, 38, 206, 182, 188, 64, 246, 32, 188, 26, 163, 49, 189, 182, 196, 231, 61, 66, 159, 204, 189, 61, 252, 194, 61, 175, 210, 205, 189, 242, 3, 31, 190, 3, 46, 172, 189, 180, 41, 181, 185, 252, 77, 122, 61, 87, 0, 25, 62, 186, 255, 228, 189, 160, 207, 99, 61, 226, 27, 143, 189, 247, 242, 207, 61, 241, 107, 150, 61, 56, 156, 206, 60, 117, 17, 219, 188, 100, 145, 195, 189, 249, 74, 94, 61, 214, 56, 255, 61, 130, 32, 55, 190, 160, 19, 227, 61, 65, 225, 36, 190, 26, 27, 237, 61, 242, 7, 72, 61, 72, 86, 159, 62, 87, 130, 6, 62, 39, 160, 25, 189, 98, 36, 233, 60, 15, 196, 4, 190, 7, 180, 80, 190, 32, 227, 83, 190, 0, 20, 186, 59, 84, 5, 242, 62, 186, 187, 227, 61, 18, 89, 146, 188, 154, 114, 222, 61, 241, 112, 150, 62, 64, 178, 138, 61, 249, 109, 151, 61, 68, 137, 209, 61, 195, 109, 44, 190, 84, 245, 166, 188, 23, 157, 108, 190, 131, 161, 175, 189, 7, 218, 141, 190, 120, 211, 210, 62, 39, 244, 225, 60, 124, 118, 189, 62, 7, 251, 187, 190, 244, 14, 139, 60, 178, 179, 211, 62, 119, 135, 74, 62, 136, 239, 4, 189, 239, 166, 30, 63, 177, 116, 174, 190, 57, 39, 157, 62, 227, 250, 178, 190, 228, 215, 145, 61, 44, 99, 70, 190, 111, 59, 210, 62, 71, 240, 77, 189, 144, 85, 20, 191, 120, 147, 92, 190, 94, 135, 83, 62, 113, 25, 168, 191, 154, 92, 185, 63, 171, 201, 131, 60, 226, 44, 39, 189, 21, 52, 130, 62, 3, 18, 230, 190, 203, 222, 145, 62, 165, 9, 182, 188, 110, 48, 7, 190, 176, 158, 153, 190, 126, 52, 159, 191, 209, 59, 0, 62, 226, 51, 39, 191, 168, 155, 4, 62, 168, 112, 215, 62, 235, 126, 219, 191, 127, 48, 125, 63, 218, 158, 130, 190, 226, 62, 143, 61, 169, 248, 2, 62, 44, 56, 7, 63, 250, 90, 21, 190, 58, 50, 32, 62, 150, 104, 128, 189, 11, 253, 27, 62, 16, 207, 47, 62, 188, 132, 12, 190, 230, 30, 232, 189, 111, 56, 24, 61, 104, 65, 2, 190, 204, 230, 46, 61, 145, 39, 55, 189, 138, 21, 249, 61, 118, 21, 1, 190, 61, 58, 48, 190, 200, 233, 136, 188, 65, 225, 50, 190, 158, 204, 130, 189, 129, 235, 178, 188, 1, 180, 184, 189, 164, 21, 186, 189, 151, 197, 232, 189, 153, 133, 74, 187, 182, 102, 14, 61, 193, 23, 231, 189, 36, 145, 77, 188, 95, 69, 32, 190, 105, 48, 213, 189, 93, 80, 39, 190, 5, 177, 181, 189, 218, 175, 254, 189, 93, 42, 222, 61, 166, 53, 131, 189, 114, 187, 117, 61, 85, 75, 231, 188, 57, 217, 128, 189, 73, 49, 158, 61, 155, 179, 11, 189, 75, 235, 252, 189, 230, 127, 246, 61, 147, 102, 251, 189, 3, 253, 21, 190, 35, 55, 172, 60, 199, 233, 252, 61, 17, 250, 44, 190, 91, 41, 76, 189, 199, 55, 38, 190, 41, 177, 5, 190, 192, 254, 21, 190, 0, 81, 185, 189, 167, 34, 50, 190, 64, 200, 10, 62, 128, 168, 204, 189, 177, 121, 33, 190, 248, 208, 148, 189, 57, 24, 192, 189, 40, 50, 125, 61, 98, 198, 37, 190, 59, 180, 140, 61, 196, 99, 62, 188, 114, 33, 19, 190, 176, 76, 201, 189, 127, 59, 48, 190, 118, 140, 199, 189, 242, 9, 95, 61, 185, 43, 205, 190, 44, 251, 215, 62, 178, 8, 132, 189, 243, 78, 193, 62, 2, 43, 94, 62, 81, 123, 30, 190, 149, 15, 146, 62, 2, 156, 85, 190, 114, 127, 252, 190, 163, 241, 156, 189, 94, 59, 24, 62, 126, 5, 92, 62, 16, 181, 222, 190, 238, 12, 215, 189, 184, 41, 136, 62, 35, 91, 249, 62, 126, 247, 143, 61, 79, 91, 74, 62, 73, 70, 210, 189, 78, 237, 115, 62, 25, 105, 137, 62, 76, 160, 192, 62, 19, 95, 212, 62, 175, 106, 49, 62, 106, 244, 13, 191, 49, 149, 128, 190, 132, 183, 70, 62, 184, 243, 109, 190, 94, 151, 140, 190, 203, 49, 229, 189, 185, 97, 144, 62, 59, 119, 179, 190, 72, 118, 200, 190, 101, 146, 82, 59, 145, 176, 233, 188, 80, 239, 175, 61, 128, 19, 164, 189, 253, 173, 95, 189, 45, 30, 71, 62, 133, 150, 141, 190, 7, 47, 190, 62, 250, 59, 151, 61, 195, 208, 236, 189, 66, 196, 90, 62, 100, 47, 214, 190, 150, 255, 173, 61, 136, 11, 148, 62, 144, 127, 50, 61, 184, 24, 91, 62, 131, 146, 189, 62, 25, 231, 206, 61, 175, 128, 71, 62, 2, 224, 27, 59, 9, 139, 42, 61, 229, 193, 92, 190, 218, 170, 138, 62, 113, 97, 63, 190, 70, 17, 134, 190, 154, 12, 138, 62, 224, 37, 145, 190, 100, 201, 178, 188, 129, 158, 36, 62, 105, 161, 101, 62, 232, 203, 76, 190, 185, 88, 134, 59, 146, 27, 223, 61, 11, 128, 25, 62, 167, 183, 79, 189, 1, 195, 6, 190, 234, 115, 169, 189, 146, 162, 225, 61, 97, 179, 67, 190, 92, 141, 107, 59, 97, 13, 171, 189, 215, 247, 32, 190, 223, 249, 140, 61, 80, 234, 7, 190, 73, 205, 103, 60, 39, 112, 30, 190, 26, 192, 5, 190, 107, 17, 56, 189, 229, 19, 230, 189, 172, 35, 192, 189, 143, 207, 106, 61, 85, 19, 18, 190, 226, 111, 253, 189, 91, 211, 3, 190, 58, 206, 30, 190, 38, 139, 210, 189, 82, 90, 158, 188, 209, 180, 193, 188, 191, 205, 42, 190, 72, 178, 0, 62, 94, 104, 52, 190, 77, 80, 37, 189, 231, 113, 134, 189, 145, 34, 131, 62, 204, 86, 50, 191, 102, 68, 71, 62, 134, 209, 128, 62, 27, 26, 20, 61, 120, 191, 233, 61, 212, 90, 208, 190, 77, 231, 55, 189, 204, 68, 67, 191, 72, 252, 145, 189, 50, 142, 144, 61, 154, 239, 229, 191, 98, 161, 224, 61, 34, 196, 44, 190, 45, 13, 247, 190, 174, 57, 132, 62, 131, 52, 151, 191, 184, 243, 19, 190, 118, 95, 229, 190, 203, 35, 31, 190, 182, 41, 9, 190, 87, 138, 16, 191, 76, 245, 50, 62, 0, 202, 55, 191, 86, 47, 250, 190, 91, 199, 239, 62, 74, 250, 165, 191, 51, 63, 189, 189, 27, 220, 78, 191, 191, 85, 55, 189, 76, 205, 56, 62, 222, 131, 136, 189, 167, 31, 63, 189, 193, 150, 58, 62, 64, 172, 16, 62, 7, 140, 141, 189, 22, 224, 209, 190, 57, 247, 102, 62, 87, 203, 160, 61, 13, 194, 18, 62, 184, 36, 28, 191, 123, 192, 220, 61, 136, 208, 0, 191, 231, 141, 253, 189, 104, 83, 189, 188, 123, 153, 162, 190, 8, 190, 24, 63, 107, 9, 49, 62, 187, 134, 171, 189, 82, 3, 146, 62, 254, 89, 185, 190, 252, 120, 48, 62, 99, 14, 91, 190, 0, 114, 49, 62, 227, 70, 144, 190, 31, 230, 203, 62, 182, 1, 200, 190, 177, 220, 152, 62, 45, 56, 103, 62, 87, 81, 22, 63, 99, 255, 24, 63, 168, 91, 149, 62, 55, 179, 92, 189, 149, 211, 91, 62, 15, 107, 48, 62, 123, 228, 21, 189, 235, 134, 143, 61, 253, 192, 95, 60, 42, 194, 189, 189, 206, 223, 15, 190, 164, 170, 28, 189, 119, 66, 220, 189, 136, 86, 57, 190, 164, 107, 192, 189, 156, 158, 138, 189, 67, 80, 144, 189, 166, 129, 73, 189, 147, 186, 101, 189, 229, 130, 54, 190, 86, 111, 235, 189, 39, 242, 95, 61, 111, 203, 194, 61, 235, 98, 17, 190, 135, 237, 2, 190, 167, 1, 55, 189, 204, 84, 26, 190, 66, 73, 9, 62, 50, 210, 0, 187, 70, 231, 4, 190, 253, 97, 13, 62, 2, 173, 231, 61, 17, 113, 77, 188, 135, 211, 29, 62, 17, 24, 214, 189, 245, 120, 116, 189, 73, 157, 41, 190, 130, 55, 206, 190, 27, 19, 204, 61, 208, 210, 142, 190, 180, 120, 128, 62, 157, 108, 27, 189, 188, 4, 131, 58, 240, 215, 152, 62, 184, 239, 105, 59, 165, 57, 141, 189, 234, 152, 107, 190, 112, 23, 212, 190, 21, 240, 44, 62, 214, 193, 101, 188, 255, 134, 73, 191, 195, 231, 248, 60, 118, 129, 138, 62, 108, 28, 85, 190, 215, 211, 188, 62, 40, 54, 155, 191, 126, 103, 64, 61, 186, 145, 167, 188, 23, 182, 16, 62, 76, 169, 192, 62, 201, 171, 23, 62, 206, 46, 144, 191, 14, 146, 32, 191, 30, 160, 146, 62, 80, 59, 13, 62, 72, 129, 52, 190, 187, 119, 118, 190, 14, 15, 12, 62, 112, 196, 67, 190, 226, 195, 25, 190, 0, 115, 29, 62, 167, 172, 199, 190, 77, 229, 215, 61, 185, 133, 4, 191, 175, 54, 207, 188, 191, 248, 233, 61, 91, 61, 168, 190, 182, 236, 159, 62, 150, 82, 224, 188, 93, 34, 16, 191, 125, 43, 62, 62, 208, 180, 62, 189, 125, 184, 150, 190, 118, 38, 233, 62, 62, 188, 32, 62, 34, 171, 208, 62, 93, 98, 65, 62, 117, 46, 177, 190, 186, 237, 90, 60, 98, 134, 19, 190, 44, 212, 227, 61, 216, 61, 34, 60, 89, 220, 139, 62, 36, 82, 48, 191, 15, 100, 228, 190, 63, 244, 36, 62, 179, 149, 12, 190, 190, 212, 127, 190, 1, 102, 14, 62, 67, 117, 156, 62, 232, 73, 164, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 65, 50, 186, 213, 63, 237, 190, 69, 203, 160, 61, 198, 13, 143, 62, 2, 91, 165, 62, 104, 160, 98, 62, 30, 158, 155, 190, 69, 61, 254, 62, 95, 52, 143, 61, 41, 250, 176, 62, 66, 95, 221, 61, 234, 231, 0, 189, 91, 117, 141, 62, 25, 32, 55, 190, 154, 148, 71, 62, 126, 226, 127, 62, 72, 180, 63, 62, 51, 57, 219, 61, 8, 162, 60, 60, 45, 204, 98, 190, 219, 193, 112, 62, 22, 114, 147, 62, 226, 109, 48, 190, 246, 69, 22, 62, 87, 203, 97, 62, 222, 30, 172, 62, 111, 112, 165, 188, 179, 140, 25, 190, 151, 212, 67, 190, 118, 20, 10, 190, 102, 216, 48, 62, 177, 97, 214, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 252, 1, 187, 230, 231, 244, 62, 101, 176, 116, 190, 57, 175, 132, 63, 4, 93, 118, 62, 161, 137, 186, 191, 9, 230, 11, 62, 117, 90, 80, 190, 169, 210, 123, 63, 215, 32, 153, 190, 191, 131, 195, 190, 166, 133, 149, 63, 210, 224, 1, 63, 78, 46, 201, 61, 236, 204, 74, 62, 147, 249, 136, 63, 198, 249, 119, 63, 25, 153, 87, 61, 167, 35, 153, 60, 180, 118, 105, 61, 125, 198, 85, 190, 73, 236, 200, 63, 82, 75, 176, 189, 123, 166, 210, 188, 186, 12, 236, 190, 117, 7, 137, 190, 139, 47, 103, 189, 35, 183, 178, 63, 199, 53, 29, 63, 229, 132, 11, 189, 141, 13, 211, 190, 186, 135, 5, 191, 198, 50, 241, 189, 38, 241, 59, 61, 157, 87, 17, 190, 129, 225, 188, 61, 44, 220, 34, 191, 245, 101, 80, 62, 172, 63, 118, 189, 95, 113, 136, 190, 223, 61, 17, 63, 102, 141, 175, 189, 86, 236, 167, 61, 73, 57, 154, 190, 135, 255, 71, 61, 195, 244, 34, 61, 198, 165, 72, 63, 79, 70, 67, 61, 219, 255, 143, 62, 151, 168, 29, 190, 188, 147, 10, 62, 85, 192, 255, 189, 71, 166, 50, 62, 1, 53, 140, 61, 114, 238, 44, 62, 27, 216, 66, 60, 166, 2, 237, 61, 73, 235, 137, 190, 190, 220, 251, 61, 145, 63, 28, 189, 38, 27, 249, 187, 219, 114, 170, 61, 76, 45, 132, 59, 173, 214, 113, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 230, 57, 190, 218, 163, 10, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {251, 83, 150, 190, 216, 90, 182, 191, 188, 87, 137, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {52, 58, 45, 192, 27, 137, 187, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0041/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}