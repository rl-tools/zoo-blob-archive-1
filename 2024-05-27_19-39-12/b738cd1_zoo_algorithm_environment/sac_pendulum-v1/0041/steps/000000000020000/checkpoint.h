// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 159, 230, 190, 240, 187, 34, 63, 192, 192, 241, 190, 252, 192, 101, 190, 110, 137, 229, 190, 30, 97, 41, 191, 194, 187, 231, 190, 67, 146, 39, 191, 186, 157, 242, 62, 60, 123, 58, 191, 29, 30, 206, 189, 241, 223, 46, 190, 119, 65, 62, 191, 187, 185, 233, 62, 215, 53, 168, 62, 123, 79, 133, 62, 50, 15, 255, 62, 4, 18, 18, 191, 183, 184, 40, 188, 12, 9, 193, 189, 245, 193, 252, 190, 92, 253, 222, 62, 44, 235, 45, 191, 177, 146, 16, 191, 236, 247, 130, 63, 137, 101, 109, 63, 245, 52, 240, 62, 203, 177, 113, 62, 91, 182, 170, 62, 5, 48, 165, 190, 205, 162, 233, 190, 19, 247, 69, 63, 207, 8, 80, 62, 164, 19, 190, 190, 44, 106, 9, 192, 49, 80, 255, 190, 6, 49, 210, 62, 27, 62, 131, 191, 28, 212, 206, 190, 221, 65, 38, 189, 11, 152, 142, 63, 67, 91, 232, 62, 219, 47, 219, 60, 136, 53, 18, 191, 67, 93, 139, 62, 184, 30, 67, 191, 253, 11, 196, 61, 37, 129, 184, 189, 217, 9, 18, 63, 66, 154, 141, 190, 37, 250, 41, 63, 123, 231, 82, 190, 9, 180, 179, 191, 1, 205, 87, 190, 92, 64, 114, 61, 10, 28, 67, 63, 177, 86, 73, 62, 77, 71, 16, 190, 37, 25, 24, 189, 53, 29, 59, 191, 63, 96, 3, 191, 234, 75, 229, 63, 191, 103, 26, 62, 163, 67, 169, 62, 130, 144, 150, 62, 206, 221, 182, 190, 67, 137, 48, 191, 65, 81, 46, 63, 46, 43, 11, 60, 44, 174, 16, 63, 78, 196, 159, 62, 184, 174, 139, 190, 196, 67, 222, 189, 147, 5, 7, 63, 160, 101, 143, 62, 73, 32, 27, 189, 105, 17, 45, 191, 38, 32, 155, 62, 91, 221, 1, 191, 10, 86, 229, 191, 154, 16, 251, 190, 118, 78, 159, 62, 172, 70, 169, 191, 168, 168, 124, 190, 60, 133, 53, 190, 229, 241, 82, 191, 198, 38, 65, 188, 65, 188, 171, 62, 73, 177, 235, 190, 120, 180, 34, 62, 106, 141, 166, 189, 32, 145, 17, 191, 152, 62, 53, 189, 100, 143, 15, 63, 29, 59, 31, 191, 121, 37, 209, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 178, 12, 191, 86, 203, 52, 190, 84, 83, 238, 61, 197, 240, 28, 63, 111, 104, 213, 190, 96, 39, 3, 62, 225, 205, 166, 190, 104, 203, 166, 190, 57, 150, 63, 191, 96, 81, 198, 61, 26, 55, 117, 188, 182, 4, 54, 190, 67, 249, 53, 191, 163, 141, 197, 62, 221, 19, 65, 62, 143, 88, 81, 63, 217, 175, 68, 61, 14, 182, 35, 63, 192, 107, 146, 187, 147, 224, 217, 190, 47, 24, 34, 63, 135, 233, 92, 189, 136, 231, 0, 63, 48, 185, 225, 61, 100, 214, 137, 189, 39, 164, 102, 189, 208, 181, 135, 190, 135, 46, 249, 61, 124, 148, 183, 190, 174, 159, 107, 62, 223, 145, 223, 62, 75, 124, 123, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 236, 148, 189, 31, 225, 200, 189, 115, 223, 66, 189, 34, 190, 190, 189, 244, 196, 40, 61, 34, 208, 254, 189, 122, 187, 203, 189, 246, 110, 24, 62, 4, 215, 219, 189, 89, 149, 32, 61, 156, 214, 149, 59, 43, 112, 155, 61, 204, 111, 32, 190, 222, 34, 118, 189, 158, 22, 226, 189, 220, 205, 206, 189, 127, 63, 240, 189, 182, 23, 9, 62, 171, 54, 41, 61, 189, 151, 25, 60, 123, 87, 183, 59, 251, 206, 144, 188, 3, 108, 69, 189, 76, 66, 175, 189, 44, 253, 125, 189, 151, 176, 131, 189, 132, 239, 79, 189, 210, 117, 173, 189, 254, 47, 148, 189, 241, 202, 38, 190, 147, 125, 80, 61, 195, 178, 85, 189, 116, 11, 10, 62, 61, 22, 149, 62, 135, 103, 35, 191, 198, 229, 213, 59, 130, 214, 235, 190, 10, 37, 69, 62, 195, 32, 158, 62, 137, 166, 152, 189, 40, 168, 165, 62, 168, 137, 222, 189, 219, 123, 119, 62, 146, 121, 156, 61, 85, 60, 186, 62, 49, 222, 113, 189, 225, 75, 21, 191, 134, 77, 143, 188, 161, 185, 43, 62, 155, 2, 176, 190, 135, 243, 134, 60, 195, 15, 190, 62, 19, 144, 202, 62, 57, 10, 211, 61, 249, 213, 40, 190, 16, 119, 15, 61, 215, 43, 136, 190, 234, 209, 79, 191, 103, 195, 67, 62, 154, 199, 159, 190, 56, 9, 213, 62, 221, 67, 111, 191, 238, 170, 37, 191, 71, 38, 38, 62, 132, 79, 208, 189, 253, 89, 252, 61, 234, 203, 158, 60, 185, 242, 83, 188, 63, 33, 109, 61, 140, 130, 60, 62, 116, 212, 141, 60, 44, 70, 86, 190, 238, 121, 8, 62, 251, 155, 112, 62, 173, 150, 97, 190, 74, 49, 95, 190, 35, 16, 218, 190, 204, 89, 5, 188, 246, 187, 182, 61, 10, 159, 180, 190, 248, 42, 136, 62, 232, 64, 64, 190, 66, 126, 89, 62, 186, 230, 147, 189, 55, 105, 235, 189, 73, 96, 57, 187, 183, 44, 241, 188, 214, 154, 179, 60, 247, 111, 161, 62, 0, 149, 251, 60, 110, 65, 225, 190, 92, 91, 12, 191, 145, 219, 74, 190, 157, 153, 202, 62, 143, 138, 240, 189, 166, 68, 193, 190, 168, 209, 72, 63, 106, 77, 201, 191, 79, 81, 11, 62, 210, 117, 18, 191, 149, 254, 138, 62, 235, 69, 60, 63, 65, 169, 180, 190, 87, 43, 131, 62, 82, 79, 80, 191, 198, 29, 129, 62, 110, 18, 12, 62, 79, 164, 151, 191, 48, 150, 73, 63, 2, 209, 0, 62, 178, 39, 72, 190, 14, 187, 199, 62, 20, 63, 172, 190, 248, 244, 134, 60, 12, 108, 105, 62, 91, 240, 51, 191, 23, 186, 172, 62, 130, 149, 237, 190, 215, 22, 129, 61, 160, 250, 179, 191, 108, 129, 247, 61, 130, 154, 15, 62, 15, 233, 233, 191, 95, 87, 96, 63, 135, 246, 179, 190, 174, 94, 96, 61, 202, 80, 77, 62, 184, 116, 70, 190, 79, 248, 45, 62, 58, 164, 170, 189, 78, 239, 89, 58, 29, 57, 235, 190, 38, 137, 52, 62, 21, 27, 174, 62, 213, 59, 103, 61, 25, 192, 215, 61, 164, 88, 192, 189, 69, 145, 209, 62, 191, 228, 205, 62, 1, 210, 170, 191, 92, 100, 218, 60, 104, 161, 73, 60, 108, 146, 214, 61, 157, 97, 213, 61, 24, 66, 174, 61, 91, 235, 95, 61, 90, 81, 142, 62, 155, 119, 130, 190, 177, 157, 3, 62, 78, 38, 107, 190, 166, 43, 14, 61, 183, 85, 129, 61, 226, 183, 10, 61, 65, 36, 183, 61, 216, 24, 40, 191, 91, 125, 199, 62, 155, 64, 176, 189, 23, 132, 51, 62, 9, 101, 233, 61, 56, 123, 132, 62, 13, 105, 39, 62, 66, 23, 41, 190, 159, 130, 115, 189, 114, 72, 228, 189, 194, 202, 174, 188, 11, 34, 20, 62, 212, 205, 6, 60, 252, 193, 104, 190, 229, 230, 14, 191, 108, 27, 98, 62, 21, 104, 38, 191, 165, 142, 59, 190, 195, 250, 76, 191, 64, 6, 243, 190, 237, 120, 191, 62, 192, 7, 96, 62, 112, 25, 13, 190, 194, 14, 163, 191, 171, 82, 4, 191, 240, 242, 185, 61, 157, 69, 199, 62, 231, 189, 138, 62, 15, 98, 108, 190, 155, 94, 192, 62, 15, 2, 32, 191, 43, 32, 186, 62, 51, 168, 244, 190, 214, 228, 154, 191, 74, 42, 4, 191, 109, 18, 180, 61, 68, 108, 89, 61, 82, 91, 21, 191, 192, 146, 225, 61, 82, 216, 46, 62, 216, 9, 67, 62, 126, 227, 11, 62, 179, 29, 193, 188, 229, 67, 161, 189, 129, 96, 21, 62, 254, 77, 47, 62, 114, 28, 191, 190, 221, 183, 8, 188, 26, 209, 103, 61, 73, 60, 94, 188, 226, 234, 75, 62, 54, 25, 174, 190, 39, 153, 92, 62, 78, 103, 200, 188, 103, 8, 54, 191, 247, 55, 68, 189, 170, 110, 20, 59, 253, 72, 39, 188, 217, 60, 206, 189, 222, 229, 142, 60, 61, 152, 136, 190, 86, 228, 242, 61, 250, 117, 194, 60, 191, 13, 5, 63, 67, 19, 109, 61, 116, 228, 238, 60, 2, 159, 8, 63, 175, 239, 132, 189, 4, 198, 192, 61, 47, 133, 82, 62, 39, 132, 16, 190, 16, 92, 162, 62, 73, 207, 236, 189, 248, 104, 94, 188, 225, 127, 43, 61, 209, 37, 6, 189, 116, 52, 77, 62, 56, 14, 86, 190, 48, 160, 110, 62, 95, 3, 243, 61, 177, 164, 46, 190, 151, 133, 100, 189, 92, 172, 250, 190, 47, 35, 38, 62, 125, 1, 120, 62, 65, 41, 156, 62, 7, 70, 119, 62, 109, 148, 12, 61, 98, 118, 168, 59, 1, 169, 152, 62, 123, 240, 38, 61, 172, 251, 10, 62, 183, 66, 214, 61, 85, 184, 187, 62, 114, 187, 231, 190, 128, 206, 159, 190, 34, 167, 164, 62, 101, 242, 220, 190, 82, 142, 233, 189, 29, 205, 70, 62, 180, 187, 127, 62, 233, 49, 171, 190, 66, 206, 17, 63, 96, 30, 250, 190, 157, 136, 159, 62, 211, 203, 9, 191, 143, 158, 2, 63, 69, 176, 131, 62, 103, 17, 234, 190, 117, 11, 72, 191, 85, 117, 246, 190, 107, 186, 121, 62, 96, 68, 4, 63, 44, 166, 197, 191, 2, 24, 12, 190, 24, 50, 195, 61, 154, 84, 43, 190, 182, 39, 153, 62, 114, 70, 225, 190, 93, 88, 11, 191, 125, 20, 27, 62, 247, 27, 7, 61, 145, 201, 145, 62, 41, 121, 255, 190, 219, 127, 218, 61, 211, 233, 178, 190, 211, 168, 142, 62, 57, 41, 154, 61, 123, 230, 153, 191, 98, 165, 28, 62, 138, 142, 20, 191, 249, 94, 251, 189, 162, 172, 159, 187, 18, 59, 206, 190, 168, 60, 231, 190, 3, 228, 43, 61, 181, 153, 241, 190, 251, 176, 204, 61, 81, 199, 21, 191, 160, 10, 75, 61, 125, 4, 34, 62, 154, 30, 27, 190, 102, 191, 6, 63, 155, 118, 13, 190, 194, 70, 92, 191, 49, 177, 54, 62, 171, 98, 219, 189, 136, 154, 105, 190, 70, 161, 166, 62, 78, 188, 183, 61, 86, 124, 214, 62, 50, 238, 103, 62, 138, 75, 105, 190, 60, 220, 172, 188, 103, 35, 20, 190, 141, 251, 116, 62, 178, 195, 151, 61, 115, 243, 157, 62, 44, 38, 104, 191, 103, 243, 117, 190, 242, 12, 131, 61, 193, 106, 193, 189, 233, 65, 254, 189, 198, 76, 211, 61, 201, 32, 220, 62, 118, 184, 229, 189, 184, 254, 119, 61, 60, 131, 58, 191, 90, 229, 19, 62, 254, 229, 131, 62, 161, 75, 45, 62, 241, 97, 194, 189, 195, 149, 119, 190, 158, 29, 38, 191, 21, 214, 229, 62, 137, 148, 158, 62, 224, 139, 134, 60, 79, 59, 13, 63, 238, 126, 53, 62, 44, 237, 170, 186, 175, 239, 57, 62, 195, 32, 18, 190, 148, 95, 189, 61, 20, 124, 68, 190, 111, 37, 219, 62, 158, 155, 105, 190, 194, 115, 109, 190, 201, 110, 123, 190, 238, 0, 20, 190, 0, 228, 248, 189, 37, 224, 119, 62, 108, 34, 155, 62, 101, 146, 163, 62, 183, 242, 41, 191, 58, 100, 6, 188, 198, 43, 58, 62, 114, 223, 170, 61, 171, 60, 84, 60, 147, 136, 128, 62, 47, 120, 155, 189, 37, 213, 154, 62, 159, 227, 110, 62, 200, 42, 7, 62, 184, 121, 185, 59, 233, 183, 112, 60, 68, 98, 177, 189, 201, 87, 87, 190, 109, 102, 88, 61, 43, 4, 180, 60, 29, 124, 133, 191, 195, 120, 172, 189, 175, 134, 82, 60, 237, 128, 0, 190, 89, 164, 81, 62, 14, 127, 67, 191, 42, 43, 206, 62, 249, 43, 212, 190, 234, 178, 127, 62, 42, 66, 74, 190, 128, 56, 225, 190, 90, 64, 111, 60, 59, 192, 150, 190, 226, 166, 138, 61, 149, 107, 188, 62, 5, 31, 60, 191, 215, 165, 139, 188, 194, 203, 59, 190, 3, 18, 215, 62, 147, 54, 97, 62, 148, 114, 129, 189, 208, 48, 224, 62, 164, 54, 243, 190, 164, 36, 232, 61, 68, 114, 247, 61, 225, 106, 138, 189, 74, 254, 237, 61, 180, 184, 11, 191, 142, 52, 39, 190, 158, 60, 39, 191, 193, 210, 237, 61, 218, 125, 131, 190, 210, 241, 154, 190, 112, 16, 85, 191, 35, 199, 203, 190, 25, 198, 147, 62, 193, 81, 156, 62, 32, 88, 11, 190, 132, 193, 129, 62, 211, 84, 43, 190, 3, 197, 207, 190, 57, 29, 82, 191, 108, 190, 135, 62, 7, 199, 148, 190, 36, 32, 47, 62, 36, 91, 67, 61, 50, 81, 36, 61, 75, 133, 13, 191, 0, 176, 7, 62, 7, 129, 153, 62, 173, 248, 109, 62, 13, 67, 189, 61, 50, 229, 9, 191, 155, 87, 6, 62, 184, 46, 8, 190, 101, 121, 56, 189, 159, 134, 123, 61, 134, 55, 156, 61, 142, 206, 238, 189, 181, 97, 164, 188, 42, 109, 21, 190, 220, 33, 92, 61, 77, 115, 252, 189, 254, 218, 67, 190, 101, 94, 164, 189, 137, 15, 190, 189, 34, 118, 207, 61, 206, 226, 80, 190, 196, 156, 29, 190, 198, 184, 143, 189, 134, 95, 191, 189, 88, 200, 53, 61, 173, 217, 9, 189, 229, 116, 145, 60, 252, 219, 239, 189, 228, 187, 28, 190, 203, 131, 25, 62, 50, 80, 203, 61, 210, 206, 141, 61, 27, 25, 69, 188, 77, 110, 218, 60, 246, 176, 29, 189, 4, 62, 18, 61, 41, 142, 39, 190, 112, 221, 138, 188, 224, 66, 128, 190, 78, 24, 26, 190, 0, 120, 215, 190, 59, 100, 142, 62, 25, 223, 112, 191, 243, 39, 105, 189, 245, 5, 197, 189, 218, 89, 98, 189, 185, 75, 233, 62, 3, 37, 142, 61, 75, 180, 213, 190, 81, 6, 149, 62, 44, 96, 157, 190, 80, 142, 53, 190, 186, 68, 0, 190, 144, 140, 5, 61, 73, 185, 46, 190, 95, 94, 148, 62, 209, 166, 56, 187, 70, 213, 96, 190, 135, 73, 133, 189, 231, 151, 157, 61, 205, 3, 156, 62, 138, 115, 182, 61, 186, 211, 221, 190, 7, 53, 73, 191, 36, 107, 137, 62, 103, 61, 134, 189, 109, 76, 188, 62, 158, 104, 72, 190, 67, 181, 39, 60, 71, 72, 193, 190, 122, 30, 36, 63, 225, 71, 200, 190, 78, 161, 251, 61, 62, 247, 116, 189, 33, 40, 232, 60, 47, 186, 225, 62, 243, 81, 249, 188, 41, 142, 25, 61, 246, 44, 90, 191, 80, 12, 195, 62, 102, 165, 14, 190, 236, 85, 169, 191, 167, 89, 211, 62, 177, 122, 221, 188, 59, 131, 86, 190, 38, 0, 174, 61, 147, 165, 170, 189, 249, 219, 137, 62, 32, 164, 5, 189, 160, 252, 25, 189, 90, 243, 45, 191, 38, 183, 176, 189, 7, 235, 168, 61, 57, 51, 116, 190, 149, 140, 149, 60, 74, 44, 52, 62, 210, 7, 157, 191, 32, 3, 70, 63, 144, 245, 95, 61, 51, 43, 21, 62, 148, 195, 128, 62, 161, 41, 82, 189, 205, 37, 245, 62, 133, 53, 102, 190, 166, 29, 136, 62, 131, 141, 219, 189, 143, 133, 77, 185, 151, 218, 209, 62, 124, 44, 26, 190, 174, 112, 205, 62, 157, 3, 113, 191, 232, 67, 131, 61, 23, 73, 36, 61, 90, 58, 8, 191, 190, 128, 213, 62, 52, 133, 203, 187, 215, 198, 8, 190, 47, 156, 218, 61, 208, 253, 113, 190, 142, 37, 66, 190, 213, 237, 103, 190, 150, 57, 136, 190, 104, 13, 47, 191, 51, 126, 58, 62, 28, 251, 190, 190, 80, 98, 227, 61, 214, 59, 212, 61, 74, 220, 93, 188, 46, 227, 55, 191, 204, 229, 31, 63, 241, 187, 95, 61, 184, 208, 52, 62, 179, 238, 159, 61, 4, 162, 186, 62, 115, 139, 37, 61, 149, 118, 202, 61, 116, 54, 42, 62, 171, 200, 8, 190, 80, 58, 74, 188, 107, 95, 130, 189, 247, 130, 104, 189, 136, 51, 47, 190, 194, 166, 19, 190, 243, 7, 36, 190, 226, 194, 88, 61, 76, 69, 33, 190, 77, 203, 213, 61, 162, 207, 56, 190, 251, 169, 156, 61, 117, 79, 40, 60, 227, 78, 126, 189, 65, 238, 22, 190, 217, 148, 154, 61, 58, 205, 118, 189, 249, 118, 240, 189, 43, 120, 26, 62, 173, 41, 101, 188, 15, 77, 31, 188, 179, 118, 154, 189, 231, 118, 177, 187, 222, 92, 22, 190, 236, 254, 233, 189, 78, 45, 25, 190, 67, 60, 92, 61, 120, 28, 165, 189, 53, 111, 216, 188, 51, 4, 172, 188, 60, 238, 140, 189, 183, 162, 167, 189, 156, 207, 10, 190, 24, 77, 187, 188, 57, 202, 252, 189, 69, 100, 245, 61, 183, 94, 184, 188, 37, 22, 2, 61, 156, 51, 195, 188, 83, 207, 180, 61, 95, 126, 112, 60, 217, 227, 158, 189, 44, 101, 69, 189, 51, 195, 10, 62, 239, 144, 79, 189, 105, 146, 29, 190, 78, 200, 11, 62, 178, 178, 64, 61, 39, 149, 49, 61, 82, 123, 137, 188, 214, 115, 252, 189, 76, 39, 93, 61, 181, 113, 40, 190, 124, 57, 193, 61, 81, 254, 172, 60, 86, 131, 69, 189, 10, 151, 215, 189, 29, 19, 138, 189, 139, 216, 170, 60, 237, 86, 28, 190, 48, 173, 155, 61, 169, 162, 154, 189, 181, 94, 243, 189, 186, 12, 75, 189, 238, 134, 40, 188, 73, 119, 212, 189, 70, 253, 16, 60, 117, 46, 232, 189, 108, 79, 221, 189, 38, 206, 182, 188, 64, 246, 32, 188, 26, 163, 49, 189, 182, 196, 231, 61, 66, 159, 204, 189, 61, 252, 194, 61, 175, 210, 205, 189, 242, 3, 31, 190, 3, 46, 172, 189, 180, 41, 181, 185, 252, 77, 122, 61, 87, 0, 25, 62, 186, 255, 228, 189, 160, 207, 99, 61, 226, 27, 143, 189, 247, 242, 207, 61, 241, 107, 150, 61, 56, 156, 206, 60, 117, 17, 219, 188, 100, 145, 195, 189, 249, 74, 94, 61, 214, 56, 255, 61, 130, 32, 55, 190, 160, 19, 227, 61, 61, 190, 30, 190, 217, 195, 190, 61, 182, 161, 135, 61, 195, 83, 140, 62, 103, 187, 10, 62, 204, 189, 227, 187, 53, 93, 88, 60, 191, 97, 226, 189, 2, 51, 96, 190, 107, 113, 48, 190, 186, 193, 138, 60, 166, 123, 233, 62, 204, 95, 181, 61, 182, 245, 130, 188, 173, 128, 207, 61, 116, 54, 151, 62, 66, 222, 134, 61, 29, 129, 141, 61, 31, 140, 209, 61, 14, 146, 58, 190, 175, 203, 17, 189, 213, 204, 85, 190, 22, 184, 224, 189, 252, 17, 136, 190, 31, 199, 219, 62, 53, 92, 42, 61, 33, 215, 177, 62, 7, 187, 185, 190, 54, 203, 22, 186, 212, 168, 219, 62, 38, 135, 70, 62, 162, 26, 96, 189, 164, 54, 51, 63, 114, 17, 105, 190, 29, 136, 153, 62, 8, 234, 163, 190, 52, 2, 165, 61, 13, 132, 85, 190, 157, 192, 232, 62, 10, 116, 176, 189, 227, 174, 14, 191, 21, 47, 112, 190, 254, 229, 74, 62, 78, 6, 173, 191, 203, 165, 175, 63, 173, 247, 171, 60, 194, 60, 39, 189, 77, 218, 129, 62, 89, 189, 229, 190, 218, 5, 141, 62, 118, 21, 200, 187, 120, 106, 194, 188, 244, 208, 130, 190, 126, 126, 157, 191, 187, 45, 27, 62, 187, 174, 38, 191, 190, 30, 248, 61, 29, 51, 210, 62, 216, 237, 230, 191, 200, 20, 122, 63, 79, 121, 146, 190, 159, 163, 128, 61, 5, 198, 251, 61, 110, 172, 7, 63, 250, 90, 21, 190, 58, 50, 32, 62, 150, 104, 128, 189, 11, 253, 27, 62, 16, 207, 47, 62, 188, 132, 12, 190, 230, 30, 232, 189, 111, 56, 24, 61, 104, 65, 2, 190, 204, 230, 46, 61, 145, 39, 55, 189, 138, 21, 249, 61, 118, 21, 1, 190, 61, 58, 48, 190, 200, 233, 136, 188, 65, 225, 50, 190, 158, 204, 130, 189, 129, 235, 178, 188, 1, 180, 184, 189, 164, 21, 186, 189, 151, 197, 232, 189, 153, 133, 74, 187, 182, 102, 14, 61, 193, 23, 231, 189, 36, 145, 77, 188, 95, 69, 32, 190, 105, 48, 213, 189, 93, 80, 39, 190, 5, 177, 181, 189, 218, 175, 254, 189, 93, 42, 222, 61, 166, 53, 131, 189, 114, 187, 117, 61, 85, 75, 231, 188, 57, 217, 128, 189, 73, 49, 158, 61, 155, 179, 11, 189, 75, 235, 252, 189, 230, 127, 246, 61, 147, 102, 251, 189, 3, 253, 21, 190, 35, 55, 172, 60, 199, 233, 252, 61, 17, 250, 44, 190, 91, 41, 76, 189, 199, 55, 38, 190, 41, 177, 5, 190, 192, 254, 21, 190, 0, 81, 185, 189, 167, 34, 50, 190, 64, 200, 10, 62, 128, 168, 204, 189, 177, 121, 33, 190, 248, 208, 148, 189, 57, 24, 192, 189, 40, 50, 125, 61, 98, 198, 37, 190, 59, 180, 140, 61, 196, 99, 62, 188, 114, 33, 19, 190, 176, 76, 201, 189, 127, 59, 48, 190, 118, 140, 199, 189, 242, 9, 95, 61, 248, 210, 199, 190, 129, 69, 212, 62, 194, 93, 126, 189, 161, 212, 187, 62, 197, 59, 85, 62, 6, 206, 17, 190, 125, 217, 143, 62, 224, 124, 83, 190, 211, 55, 0, 191, 113, 166, 118, 189, 131, 20, 41, 62, 187, 185, 73, 62, 163, 40, 241, 190, 94, 195, 217, 189, 37, 162, 123, 62, 104, 60, 253, 62, 255, 154, 134, 61, 20, 185, 62, 62, 18, 224, 190, 189, 47, 63, 115, 62, 39, 231, 145, 62, 180, 229, 192, 62, 144, 68, 216, 62, 227, 35, 45, 62, 102, 163, 9, 191, 105, 151, 127, 190, 137, 117, 52, 62, 131, 47, 111, 190, 131, 142, 181, 190, 125, 30, 218, 189, 80, 152, 135, 62, 78, 107, 196, 190, 205, 118, 188, 190, 203, 221, 248, 59, 43, 224, 239, 188, 184, 43, 163, 61, 130, 72, 238, 189, 55, 115, 42, 189, 214, 73, 79, 62, 244, 93, 138, 190, 151, 180, 195, 62, 207, 207, 182, 61, 252, 152, 228, 189, 133, 234, 76, 62, 199, 129, 225, 190, 179, 54, 185, 61, 181, 183, 142, 62, 62, 183, 72, 61, 151, 10, 95, 62, 172, 20, 185, 62, 89, 110, 238, 61, 188, 134, 83, 62, 237, 62, 202, 60, 7, 41, 46, 61, 177, 143, 85, 190, 226, 96, 135, 62, 199, 43, 48, 190, 165, 228, 128, 190, 6, 38, 132, 62, 158, 204, 148, 190, 17, 99, 16, 189, 191, 64, 41, 62, 53, 223, 82, 62, 116, 116, 89, 190, 185, 88, 134, 59, 146, 27, 223, 61, 11, 128, 25, 62, 167, 183, 79, 189, 1, 195, 6, 190, 234, 115, 169, 189, 146, 162, 225, 61, 97, 179, 67, 190, 92, 141, 107, 59, 97, 13, 171, 189, 215, 247, 32, 190, 223, 249, 140, 61, 80, 234, 7, 190, 73, 205, 103, 60, 39, 112, 30, 190, 26, 192, 5, 190, 107, 17, 56, 189, 229, 19, 230, 189, 172, 35, 192, 189, 143, 207, 106, 61, 85, 19, 18, 190, 226, 111, 253, 189, 91, 211, 3, 190, 58, 206, 30, 190, 38, 139, 210, 189, 82, 90, 158, 188, 209, 180, 193, 188, 191, 205, 42, 190, 72, 178, 0, 62, 94, 104, 52, 190, 77, 80, 37, 189, 231, 113, 134, 189, 251, 50, 155, 62, 48, 198, 30, 191, 124, 144, 113, 62, 15, 105, 163, 62, 20, 173, 111, 61, 168, 117, 31, 62, 99, 199, 208, 190, 77, 231, 55, 189, 204, 68, 67, 191, 59, 192, 18, 189, 124, 99, 219, 61, 227, 214, 213, 191, 98, 161, 224, 61, 165, 191, 23, 190, 112, 98, 222, 190, 103, 40, 165, 62, 110, 180, 151, 191, 63, 154, 20, 60, 30, 174, 238, 190, 33, 8, 246, 189, 53, 40, 188, 189, 172, 25, 20, 191, 81, 248, 106, 62, 234, 26, 67, 191, 56, 175, 21, 191, 36, 47, 253, 62, 86, 111, 148, 191, 51, 63, 189, 189, 80, 102, 78, 191, 81, 211, 152, 188, 100, 16, 155, 62, 222, 131, 136, 189, 51, 146, 132, 189, 10, 73, 59, 62, 179, 182, 252, 61, 53, 15, 138, 189, 163, 99, 208, 190, 176, 4, 83, 62, 207, 189, 158, 61, 67, 110, 10, 62, 207, 46, 24, 191, 173, 97, 174, 61, 226, 168, 18, 191, 2, 22, 229, 189, 140, 97, 227, 59, 54, 23, 159, 190, 235, 77, 25, 63, 43, 46, 31, 62, 37, 165, 176, 189, 227, 218, 146, 62, 239, 80, 176, 190, 232, 26, 43, 62, 99, 169, 94, 190, 26, 237, 42, 62, 90, 232, 151, 190, 97, 218, 203, 62, 19, 195, 208, 190, 175, 156, 141, 62, 85, 168, 114, 62, 183, 69, 21, 63, 187, 185, 33, 63, 65, 139, 144, 62, 221, 170, 45, 189, 146, 142, 118, 62, 15, 107, 48, 62, 123, 228, 21, 189, 190, 154, 137, 61, 49, 198, 96, 60, 42, 194, 189, 189, 206, 223, 15, 190, 164, 170, 28, 189, 119, 66, 220, 189, 136, 86, 57, 190, 164, 107, 192, 189, 156, 158, 138, 189, 244, 118, 146, 189, 166, 129, 73, 189, 214, 38, 104, 189, 215, 249, 56, 190, 62, 244, 235, 189, 122, 236, 80, 61, 87, 181, 189, 61, 235, 98, 17, 190, 135, 237, 2, 190, 167, 1, 55, 189, 204, 84, 26, 190, 66, 73, 9, 62, 50, 210, 0, 187, 172, 235, 4, 190, 7, 9, 11, 62, 181, 59, 231, 61, 162, 71, 105, 188, 123, 30, 29, 62, 183, 105, 218, 189, 19, 167, 122, 189, 73, 157, 41, 190, 210, 230, 201, 190, 235, 1, 185, 61, 41, 214, 83, 190, 119, 252, 111, 62, 124, 164, 48, 190, 140, 165, 147, 187, 208, 163, 149, 62, 140, 29, 169, 187, 179, 250, 2, 190, 136, 239, 112, 190, 184, 160, 8, 191, 69, 177, 15, 62, 65, 111, 76, 189, 186, 16, 97, 191, 34, 21, 137, 61, 108, 142, 128, 62, 84, 192, 67, 190, 224, 239, 174, 62, 36, 135, 176, 191, 54, 100, 52, 61, 174, 205, 86, 189, 2, 160, 4, 62, 166, 150, 184, 62, 232, 85, 2, 62, 247, 8, 146, 191, 198, 128, 7, 191, 237, 214, 134, 62, 176, 152, 235, 61, 100, 9, 170, 190, 82, 215, 119, 190, 9, 73, 186, 61, 221, 207, 99, 190, 96, 52, 4, 190, 61, 245, 29, 62, 38, 89, 188, 190, 185, 211, 203, 61, 61, 251, 20, 191, 172, 34, 141, 187, 248, 115, 242, 61, 142, 60, 165, 190, 107, 81, 153, 62, 203, 157, 134, 187, 188, 7, 44, 191, 124, 119, 47, 62, 190, 156, 152, 189, 136, 4, 157, 190, 232, 18, 232, 62, 189, 206, 35, 62, 45, 31, 210, 62, 63, 145, 57, 62, 213, 253, 186, 190, 131, 231, 177, 60, 32, 153, 11, 190, 195, 28, 246, 61, 123, 227, 32, 60, 224, 153, 139, 62, 75, 112, 46, 191, 84, 82, 211, 190, 42, 57, 23, 62, 206, 16, 12, 190, 148, 16, 157, 190, 185, 33, 22, 62, 213, 63, 148, 62, 94, 43, 175, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 65, 50, 186, 173, 60, 241, 190, 164, 74, 148, 61, 191, 28, 129, 62, 144, 99, 163, 62, 247, 132, 99, 62, 176, 245, 156, 190, 37, 115, 253, 62, 26, 79, 87, 60, 99, 69, 174, 62, 203, 134, 151, 61, 201, 54, 222, 60, 0, 169, 139, 62, 25, 32, 55, 190, 231, 220, 85, 62, 116, 243, 126, 62, 248, 24, 52, 62, 51, 57, 219, 61, 8, 162, 60, 60, 45, 204, 98, 190, 89, 1, 120, 62, 106, 34, 148, 62, 226, 109, 48, 190, 246, 69, 22, 62, 221, 71, 99, 62, 3, 233, 171, 62, 111, 112, 165, 188, 150, 45, 184, 189, 162, 129, 69, 190, 195, 209, 11, 190, 134, 160, 17, 62, 131, 109, 213, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 252, 1, 187, 218, 45, 237, 62, 14, 204, 90, 190, 57, 69, 128, 63, 93, 245, 98, 62, 121, 158, 185, 191, 52, 126, 0, 62, 20, 169, 66, 190, 182, 107, 128, 63, 255, 62, 142, 190, 191, 206, 191, 190, 236, 249, 156, 63, 58, 74, 239, 62, 78, 46, 201, 61, 248, 211, 52, 62, 37, 228, 131, 63, 192, 104, 105, 63, 25, 153, 87, 61, 167, 35, 153, 60, 180, 118, 105, 61, 183, 16, 48, 190, 194, 250, 193, 63, 82, 75, 176, 189, 123, 166, 210, 188, 71, 75, 222, 190, 206, 50, 126, 190, 139, 47, 103, 189, 243, 163, 188, 63, 189, 218, 21, 63, 39, 72, 11, 189, 159, 236, 191, 190, 195, 150, 0, 191, 198, 50, 241, 189, 85, 65, 203, 187, 22, 247, 11, 190, 44, 127, 12, 62, 125, 219, 34, 191, 118, 89, 84, 62, 76, 114, 238, 189, 62, 200, 151, 190, 81, 51, 21, 63, 26, 94, 171, 189, 199, 96, 163, 61, 147, 203, 141, 190, 74, 97, 56, 61, 195, 244, 34, 61, 219, 117, 85, 63, 135, 61, 77, 61, 225, 193, 152, 62, 151, 168, 29, 190, 188, 147, 10, 62, 85, 192, 255, 189, 92, 45, 64, 62, 33, 39, 136, 61, 114, 238, 44, 62, 27, 216, 66, 60, 206, 167, 233, 61, 59, 110, 151, 190, 190, 220, 251, 61, 69, 118, 218, 189, 247, 67, 9, 189, 25, 151, 170, 61, 135, 68, 143, 60, 196, 198, 115, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 246, 63, 190, 70, 189, 15, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {122, 56, 186, 190, 120, 88, 58, 62, 79, 117, 34, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {58, 63, 4, 64, 234, 171, 7, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0041/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}