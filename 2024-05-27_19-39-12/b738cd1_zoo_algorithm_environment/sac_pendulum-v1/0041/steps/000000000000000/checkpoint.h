// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {174, 147, 232, 60, 23, 47, 139, 62, 114, 239, 139, 190, 207, 142, 179, 190, 127, 171, 12, 63, 194, 10, 105, 60, 103, 154, 143, 190, 234, 74, 232, 190, 181, 132, 186, 62, 80, 227, 98, 189, 37, 135, 150, 190, 129, 85, 149, 190, 127, 231, 80, 190, 77, 112, 234, 190, 184, 184, 181, 62, 186, 164, 203, 62, 145, 32, 140, 62, 223, 74, 249, 190, 112, 38, 218, 190, 211, 83, 214, 62, 88, 114, 39, 189, 141, 117, 108, 189, 73, 146, 157, 190, 24, 41, 16, 191, 18, 226, 17, 63, 66, 156, 245, 62, 48, 253, 168, 62, 61, 45, 159, 62, 110, 28, 18, 62, 2, 49, 56, 190, 87, 175, 137, 190, 239, 78, 47, 190, 196, 167, 38, 62, 20, 49, 4, 191, 10, 139, 7, 61, 210, 94, 202, 190, 221, 220, 73, 190, 79, 161, 181, 190, 130, 170, 0, 191, 15, 250, 89, 61, 219, 232, 242, 190, 100, 210, 17, 63, 252, 84, 110, 62, 133, 51, 185, 190, 184, 177, 78, 61, 250, 75, 183, 190, 216, 223, 89, 62, 200, 240, 237, 189, 83, 10, 146, 62, 220, 83, 190, 190, 116, 188, 183, 62, 208, 251, 237, 190, 217, 5, 11, 191, 53, 102, 216, 190, 19, 127, 13, 190, 120, 41, 148, 190, 60, 113, 254, 59, 181, 101, 234, 190, 23, 244, 14, 63, 47, 7, 51, 190, 169, 186, 138, 190, 19, 206, 68, 62, 91, 108, 245, 62, 41, 241, 139, 189, 232, 38, 249, 62, 29, 164, 26, 189, 159, 203, 84, 190, 145, 236, 173, 62, 149, 24, 216, 62, 130, 247, 135, 61, 91, 48, 193, 62, 145, 175, 19, 61, 76, 28, 57, 190, 97, 23, 95, 190, 233, 175, 124, 189, 87, 90, 52, 62, 210, 51, 1, 191, 199, 168, 65, 188, 42, 254, 16, 191, 134, 182, 109, 62, 40, 32, 4, 190, 140, 238, 0, 63, 217, 156, 221, 190, 26, 148, 169, 189, 212, 135, 210, 189, 59, 139, 151, 190, 75, 215, 30, 190, 10, 193, 0, 63, 207, 136, 14, 191, 1, 160, 208, 188, 140, 171, 26, 61, 7, 31, 221, 190, 156, 187, 235, 189, 220, 180, 184, 62, 62, 18, 0, 190, 134, 133, 250, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 180, 19, 191, 187, 90, 18, 190, 108, 3, 16, 61, 250, 205, 236, 62, 95, 75, 184, 190, 123, 192, 34, 61, 59, 128, 56, 61, 216, 142, 4, 189, 196, 254, 12, 191, 8, 122, 167, 61, 144, 13, 19, 190, 116, 17, 33, 190, 12, 108, 90, 189, 154, 209, 15, 63, 131, 183, 156, 189, 98, 115, 18, 63, 18, 84, 144, 189, 173, 247, 180, 62, 118, 129, 34, 62, 240, 35, 200, 60, 239, 162, 158, 62, 97, 3, 31, 189, 48, 18, 13, 63, 93, 115, 143, 62, 233, 189, 99, 190, 112, 228, 157, 61, 98, 249, 78, 189, 22, 45, 123, 189, 64, 83, 117, 190, 247, 149, 120, 62, 235, 32, 190, 62, 20, 116, 219, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 138, 108, 189, 49, 104, 178, 189, 161, 106, 36, 189, 59, 160, 134, 189, 244, 196, 40, 61, 91, 43, 214, 189, 139, 16, 156, 189, 225, 20, 49, 62, 4, 215, 219, 189, 224, 93, 106, 61, 117, 64, 164, 59, 109, 11, 206, 61, 135, 250, 6, 190, 58, 112, 77, 189, 94, 7, 201, 189, 150, 172, 145, 189, 127, 63, 240, 189, 213, 62, 37, 62, 225, 116, 163, 61, 89, 85, 1, 61, 83, 7, 204, 59, 52, 86, 120, 187, 3, 15, 66, 189, 214, 171, 149, 189, 78, 149, 31, 189, 167, 134, 4, 189, 126, 193, 204, 188, 80, 243, 128, 189, 16, 96, 85, 189, 0, 177, 13, 190, 131, 220, 165, 61, 7, 69, 3, 189, 19, 126, 87, 189, 14, 131, 83, 60, 250, 48, 223, 189, 230, 14, 6, 62, 141, 123, 21, 62, 69, 78, 40, 62, 101, 51, 213, 61, 204, 56, 193, 189, 254, 207, 101, 59, 77, 58, 219, 189, 23, 108, 6, 62, 97, 40, 226, 61, 29, 120, 47, 62, 211, 144, 97, 189, 220, 244, 57, 61, 156, 214, 124, 61, 114, 19, 14, 62, 203, 133, 8, 190, 24, 88, 130, 61, 126, 202, 51, 62, 63, 54, 44, 62, 51, 214, 5, 190, 134, 131, 61, 189, 159, 97, 38, 190, 102, 98, 120, 60, 73, 135, 235, 189, 62, 114, 244, 58, 46, 0, 249, 189, 229, 42, 212, 61, 191, 233, 180, 189, 199, 63, 205, 189, 186, 52, 107, 189, 199, 62, 248, 188, 193, 155, 37, 62, 245, 75, 217, 60, 174, 99, 139, 188, 72, 209, 70, 61, 95, 72, 30, 62, 34, 160, 41, 187, 211, 15, 103, 188, 131, 23, 22, 190, 123, 109, 183, 61, 247, 127, 252, 189, 160, 48, 208, 60, 3, 224, 25, 61, 24, 150, 97, 189, 253, 117, 32, 189, 207, 56, 201, 189, 130, 162, 228, 61, 223, 228, 212, 187, 167, 91, 88, 61, 150, 81, 82, 59, 29, 100, 32, 190, 167, 160, 60, 61, 58, 176, 124, 61, 13, 238, 251, 189, 205, 149, 218, 61, 133, 150, 207, 189, 225, 27, 35, 190, 136, 72, 106, 188, 8, 111, 172, 61, 18, 228, 39, 62, 114, 74, 78, 60, 12, 160, 37, 190, 153, 229, 43, 189, 10, 34, 255, 185, 10, 128, 64, 189, 118, 164, 44, 189, 40, 104, 250, 61, 23, 171, 250, 61, 52, 25, 22, 62, 240, 39, 154, 60, 173, 17, 34, 190, 202, 178, 168, 61, 49, 58, 173, 189, 37, 140, 39, 61, 59, 161, 44, 190, 195, 158, 54, 188, 22, 111, 69, 61, 236, 81, 9, 62, 154, 146, 108, 189, 246, 242, 10, 62, 102, 150, 39, 62, 130, 203, 140, 188, 185, 211, 225, 187, 131, 1, 12, 62, 170, 248, 43, 190, 82, 167, 39, 190, 47, 157, 222, 187, 116, 57, 139, 60, 19, 233, 8, 189, 173, 149, 128, 60, 60, 152, 110, 61, 30, 36, 242, 60, 169, 57, 47, 61, 35, 22, 6, 190, 3, 96, 221, 61, 200, 137, 42, 62, 157, 28, 194, 188, 13, 22, 21, 190, 183, 239, 167, 188, 88, 109, 46, 62, 159, 200, 41, 62, 166, 56, 10, 189, 39, 90, 117, 189, 146, 167, 49, 62, 35, 249, 214, 61, 18, 175, 54, 189, 169, 187, 139, 189, 136, 71, 27, 190, 61, 124, 27, 62, 67, 228, 57, 61, 34, 231, 24, 62, 77, 45, 176, 61, 194, 210, 253, 61, 74, 221, 255, 189, 68, 47, 15, 188, 12, 135, 32, 190, 26, 200, 147, 189, 90, 209, 180, 189, 14, 25, 207, 188, 243, 86, 167, 61, 64, 197, 160, 61, 43, 129, 186, 189, 125, 181, 205, 188, 252, 161, 210, 61, 69, 153, 52, 61, 142, 253, 25, 187, 238, 78, 225, 61, 178, 109, 167, 189, 224, 46, 206, 189, 15, 0, 101, 61, 161, 212, 193, 189, 45, 76, 45, 189, 36, 171, 186, 189, 226, 215, 50, 61, 116, 159, 9, 190, 116, 176, 22, 61, 81, 134, 59, 189, 144, 186, 7, 190, 216, 211, 70, 60, 189, 56, 33, 189, 157, 226, 26, 189, 35, 135, 28, 62, 155, 228, 42, 190, 88, 214, 17, 190, 153, 174, 170, 189, 253, 148, 141, 61, 182, 133, 250, 61, 61, 8, 20, 60, 173, 40, 50, 190, 82, 159, 210, 61, 109, 123, 40, 189, 146, 36, 6, 190, 35, 62, 248, 189, 21, 126, 35, 189, 61, 80, 39, 190, 209, 221, 164, 189, 60, 50, 133, 61, 115, 237, 217, 189, 180, 138, 145, 61, 224, 231, 187, 61, 227, 103, 18, 190, 172, 117, 6, 62, 173, 96, 143, 60, 147, 39, 28, 59, 3, 82, 194, 61, 136, 139, 48, 62, 57, 216, 152, 189, 199, 194, 166, 61, 87, 48, 154, 189, 16, 240, 40, 60, 27, 144, 110, 61, 217, 104, 206, 189, 150, 253, 13, 189, 156, 34, 247, 60, 222, 15, 19, 61, 229, 232, 164, 189, 201, 14, 130, 61, 6, 65, 90, 189, 120, 85, 152, 187, 106, 250, 255, 58, 167, 66, 106, 189, 48, 95, 159, 61, 245, 132, 200, 61, 105, 123, 8, 62, 223, 217, 182, 188, 83, 186, 193, 188, 57, 214, 132, 189, 114, 214, 0, 190, 22, 205, 172, 188, 159, 87, 182, 61, 23, 132, 237, 61, 236, 64, 57, 61, 188, 187, 194, 59, 12, 43, 51, 190, 81, 122, 30, 62, 70, 171, 143, 60, 115, 216, 218, 189, 23, 106, 176, 61, 193, 178, 70, 189, 183, 154, 153, 188, 208, 39, 254, 189, 62, 196, 1, 190, 197, 152, 131, 189, 240, 198, 26, 62, 134, 18, 182, 61, 238, 242, 138, 61, 143, 153, 165, 61, 197, 107, 105, 189, 225, 238, 93, 188, 51, 6, 208, 60, 97, 24, 81, 61, 99, 207, 203, 189, 94, 105, 173, 61, 28, 241, 106, 61, 173, 208, 224, 189, 234, 171, 232, 189, 186, 255, 230, 61, 5, 204, 79, 189, 234, 254, 252, 61, 227, 206, 30, 62, 27, 160, 11, 62, 137, 251, 73, 189, 18, 46, 169, 189, 8, 219, 176, 60, 200, 233, 199, 61, 160, 202, 222, 61, 108, 171, 252, 61, 102, 29, 62, 189, 152, 153, 29, 190, 205, 139, 215, 189, 81, 211, 120, 189, 242, 129, 130, 61, 60, 5, 211, 61, 128, 62, 51, 61, 240, 11, 197, 61, 13, 39, 167, 189, 253, 19, 46, 61, 193, 0, 229, 61, 178, 53, 43, 190, 168, 137, 27, 189, 111, 124, 75, 189, 12, 177, 9, 62, 42, 231, 251, 60, 133, 108, 167, 189, 168, 24, 129, 189, 91, 243, 40, 62, 147, 160, 167, 61, 201, 153, 19, 189, 157, 58, 17, 188, 20, 167, 7, 190, 217, 122, 28, 190, 234, 164, 216, 189, 13, 214, 245, 61, 229, 223, 182, 61, 9, 141, 49, 190, 49, 183, 47, 190, 113, 20, 205, 189, 109, 1, 169, 189, 12, 183, 29, 61, 41, 51, 20, 62, 200, 49, 249, 188, 204, 118, 147, 188, 210, 28, 203, 61, 58, 209, 27, 190, 5, 146, 38, 62, 21, 97, 193, 189, 72, 74, 1, 62, 12, 86, 189, 60, 128, 193, 217, 189, 178, 227, 39, 190, 132, 22, 57, 60, 240, 105, 6, 60, 115, 95, 246, 186, 62, 107, 0, 190, 246, 233, 9, 62, 156, 143, 19, 62, 141, 235, 184, 61, 251, 89, 212, 61, 50, 4, 228, 59, 180, 166, 152, 189, 240, 150, 202, 189, 168, 247, 27, 190, 211, 180, 49, 62, 78, 7, 217, 189, 120, 140, 23, 62, 1, 17, 9, 62, 237, 58, 233, 61, 2, 221, 254, 189, 230, 202, 153, 61, 201, 163, 164, 189, 76, 113, 33, 62, 150, 212, 228, 189, 239, 246, 44, 62, 46, 239, 26, 190, 252, 84, 35, 62, 139, 92, 15, 62, 216, 100, 218, 61, 197, 171, 198, 61, 68, 57, 43, 62, 78, 40, 177, 189, 100, 247, 29, 189, 25, 181, 236, 189, 199, 71, 2, 190, 144, 38, 73, 188, 217, 118, 6, 62, 222, 114, 190, 61, 132, 84, 9, 190, 96, 117, 222, 189, 56, 197, 9, 62, 170, 222, 184, 189, 46, 68, 53, 189, 181, 2, 187, 61, 94, 246, 132, 189, 182, 5, 196, 189, 161, 26, 23, 59, 19, 199, 14, 190, 133, 203, 142, 189, 17, 87, 52, 62, 231, 199, 202, 189, 204, 52, 60, 61, 183, 227, 205, 61, 20, 243, 30, 60, 125, 62, 133, 61, 14, 142, 137, 189, 226, 57, 59, 61, 195, 40, 2, 189, 215, 245, 15, 62, 154, 19, 19, 61, 193, 255, 168, 188, 141, 29, 228, 61, 130, 234, 212, 188, 200, 199, 41, 62, 60, 76, 179, 189, 165, 237, 151, 61, 212, 184, 52, 190, 19, 236, 219, 61, 209, 177, 182, 189, 214, 255, 3, 62, 60, 27, 110, 189, 98, 163, 22, 190, 114, 172, 32, 189, 53, 173, 183, 61, 231, 72, 27, 62, 97, 87, 131, 189, 234, 11, 1, 62, 167, 71, 177, 189, 5, 172, 140, 60, 199, 23, 221, 61, 197, 233, 226, 188, 80, 95, 177, 61, 72, 248, 37, 190, 93, 46, 82, 61, 121, 246, 231, 61, 100, 218, 165, 61, 39, 140, 204, 189, 105, 14, 52, 61, 113, 184, 218, 189, 73, 47, 83, 61, 181, 168, 54, 188, 216, 150, 9, 60, 91, 195, 150, 61, 225, 100, 36, 62, 146, 7, 216, 189, 32, 147, 14, 190, 121, 211, 161, 61, 186, 117, 176, 61, 230, 46, 238, 188, 50, 188, 94, 189, 115, 57, 236, 187, 95, 175, 219, 61, 185, 90, 176, 61, 160, 199, 41, 62, 195, 107, 199, 189, 157, 135, 44, 61, 152, 195, 250, 61, 109, 97, 3, 190, 106, 133, 29, 189, 24, 240, 102, 189, 188, 48, 159, 189, 213, 94, 187, 188, 161, 200, 211, 189, 125, 138, 102, 61, 155, 87, 6, 62, 200, 91, 17, 190, 105, 249, 112, 187, 42, 97, 149, 61, 221, 39, 246, 61, 142, 206, 238, 189, 241, 53, 4, 189, 182, 20, 21, 190, 33, 204, 133, 61, 178, 168, 251, 189, 110, 69, 20, 190, 101, 94, 164, 189, 137, 15, 190, 189, 9, 164, 11, 62, 11, 73, 26, 190, 33, 153, 24, 190, 93, 149, 13, 189, 99, 140, 137, 189, 117, 10, 203, 61, 173, 217, 9, 189, 204, 138, 69, 61, 120, 236, 3, 190, 166, 223, 233, 189, 243, 241, 22, 62, 140, 158, 1, 62, 95, 254, 250, 61, 27, 25, 69, 188, 153, 190, 59, 61, 239, 129, 214, 188, 108, 87, 169, 61, 39, 137, 225, 189, 112, 221, 138, 188, 102, 17, 9, 61, 91, 166, 156, 189, 202, 163, 8, 189, 22, 13, 134, 61, 94, 188, 37, 190, 147, 219, 117, 59, 190, 118, 243, 61, 171, 203, 135, 61, 56, 72, 69, 60, 58, 96, 18, 62, 254, 135, 173, 61, 202, 254, 175, 188, 224, 27, 205, 189, 26, 69, 6, 61, 7, 255, 224, 61, 153, 57, 44, 190, 5, 149, 172, 189, 115, 182, 4, 61, 120, 27, 172, 61, 57, 156, 35, 189, 225, 44, 120, 61, 17, 194, 198, 61, 136, 25, 51, 62, 154, 190, 11, 62, 220, 177, 13, 62, 40, 58, 211, 188, 46, 39, 195, 61, 36, 51, 133, 189, 242, 134, 158, 61, 185, 9, 239, 189, 14, 22, 37, 190, 248, 231, 117, 61, 223, 113, 52, 62, 184, 225, 119, 189, 107, 9, 65, 61, 115, 10, 251, 61, 171, 230, 177, 60, 92, 220, 247, 61, 192, 12, 179, 61, 186, 8, 70, 60, 204, 228, 21, 190, 116, 16, 35, 62, 85, 116, 59, 188, 48, 152, 31, 61, 128, 243, 160, 61, 144, 135, 186, 188, 229, 94, 21, 190, 224, 195, 193, 189, 33, 129, 16, 62, 127, 83, 2, 62, 9, 117, 102, 61, 180, 46, 2, 190, 15, 131, 48, 190, 110, 33, 183, 189, 35, 1, 177, 61, 21, 17, 32, 190, 71, 117, 135, 61, 145, 47, 145, 61, 234, 168, 184, 186, 125, 158, 30, 60, 216, 4, 163, 61, 145, 163, 197, 188, 210, 245, 46, 61, 210, 63, 33, 190, 203, 169, 31, 62, 202, 105, 238, 60, 161, 246, 48, 62, 108, 40, 152, 61, 83, 33, 118, 189, 99, 6, 39, 62, 64, 118, 110, 189, 121, 169, 37, 62, 138, 24, 30, 190, 177, 135, 230, 189, 176, 40, 26, 60, 217, 198, 205, 61, 200, 96, 20, 62, 232, 90, 135, 61, 150, 226, 137, 189, 194, 71, 40, 62, 75, 39, 35, 61, 194, 49, 43, 190, 239, 139, 14, 190, 179, 33, 43, 190, 153, 87, 46, 190, 198, 10, 44, 62, 222, 189, 182, 189, 124, 241, 196, 61, 216, 92, 6, 62, 128, 228, 35, 190, 232, 131, 24, 190, 207, 126, 180, 189, 143, 110, 21, 62, 254, 71, 28, 61, 164, 107, 167, 189, 99, 45, 15, 189, 115, 139, 37, 61, 149, 118, 202, 61, 93, 225, 51, 62, 220, 112, 8, 190, 46, 219, 7, 188, 107, 95, 130, 189, 247, 130, 104, 189, 136, 51, 47, 190, 194, 166, 19, 190, 243, 7, 36, 190, 52, 165, 90, 61, 76, 69, 33, 190, 77, 203, 213, 61, 87, 173, 50, 190, 246, 236, 168, 61, 205, 163, 75, 60, 220, 157, 87, 189, 64, 110, 18, 190, 229, 83, 157, 61, 58, 205, 118, 189, 249, 118, 240, 189, 43, 120, 26, 62, 8, 75, 63, 188, 15, 77, 31, 188, 77, 186, 147, 189, 102, 154, 18, 58, 222, 92, 22, 190, 236, 254, 233, 189, 140, 170, 23, 190, 105, 83, 113, 61, 165, 227, 158, 189, 53, 111, 216, 188, 51, 4, 172, 188, 60, 238, 140, 189, 82, 197, 163, 189, 156, 207, 10, 190, 63, 137, 151, 188, 57, 202, 252, 189, 69, 100, 245, 61, 183, 94, 184, 188, 138, 148, 44, 61, 156, 51, 195, 188, 37, 106, 191, 61, 95, 126, 112, 60, 217, 227, 158, 189, 92, 40, 7, 189, 241, 19, 12, 62, 168, 244, 64, 189, 178, 252, 18, 190, 78, 200, 11, 62, 81, 23, 90, 61, 39, 149, 49, 61, 38, 127, 116, 187, 214, 115, 252, 189, 147, 28, 120, 61, 181, 113, 40, 190, 233, 168, 202, 61, 81, 254, 172, 60, 86, 131, 69, 189, 10, 151, 215, 189, 29, 19, 138, 189, 56, 195, 187, 60, 237, 86, 28, 190, 48, 173, 155, 61, 169, 162, 154, 189, 181, 94, 243, 189, 203, 27, 58, 187, 216, 0, 176, 58, 102, 96, 114, 189, 70, 253, 16, 60, 117, 46, 232, 189, 108, 79, 221, 189, 152, 246, 63, 60, 64, 246, 32, 188, 155, 254, 6, 188, 182, 196, 231, 61, 66, 159, 204, 189, 121, 221, 13, 62, 146, 71, 110, 189, 234, 87, 26, 190, 198, 220, 42, 189, 70, 157, 196, 58, 140, 247, 222, 61, 87, 0, 25, 62, 3, 248, 134, 189, 160, 207, 99, 61, 175, 13, 201, 188, 141, 204, 221, 61, 97, 81, 226, 61, 173, 132, 146, 61, 117, 17, 219, 188, 231, 148, 167, 189, 180, 20, 104, 61, 145, 201, 47, 62, 87, 43, 11, 190, 160, 19, 227, 61, 228, 227, 82, 189, 28, 212, 34, 62, 79, 131, 22, 60, 38, 63, 213, 189, 111, 247, 145, 61, 65, 215, 43, 61, 51, 67, 254, 61, 14, 225, 100, 189, 0, 116, 236, 189, 86, 156, 37, 190, 133, 22, 131, 189, 66, 201, 171, 61, 174, 196, 28, 62, 66, 212, 225, 189, 251, 26, 78, 61, 46, 60, 217, 59, 226, 158, 86, 61, 129, 37, 96, 189, 70, 245, 16, 190, 209, 185, 24, 190, 115, 30, 19, 188, 168, 14, 77, 61, 182, 26, 83, 189, 116, 0, 80, 188, 211, 117, 50, 62, 47, 139, 217, 189, 33, 234, 38, 62, 231, 11, 209, 189, 253, 30, 221, 189, 250, 202, 25, 62, 176, 29, 31, 190, 186, 40, 235, 61, 212, 2, 19, 190, 49, 70, 198, 61, 51, 152, 190, 61, 19, 109, 252, 58, 237, 234, 34, 190, 191, 231, 107, 189, 130, 206, 59, 61, 37, 230, 254, 189, 243, 10, 11, 62, 2, 80, 135, 189, 166, 86, 129, 61, 150, 6, 95, 61, 221, 103, 14, 62, 233, 157, 197, 188, 23, 69, 180, 61, 226, 73, 0, 62, 19, 171, 27, 190, 242, 242, 8, 62, 47, 22, 12, 190, 109, 6, 198, 189, 17, 65, 46, 190, 113, 247, 30, 190, 94, 195, 188, 61, 125, 221, 51, 62, 46, 249, 229, 188, 136, 79, 48, 62, 243, 240, 4, 189, 15, 206, 31, 61, 38, 144, 242, 189, 116, 40, 202, 189, 79, 138, 21, 190, 89, 55, 75, 189, 250, 90, 21, 190, 58, 50, 32, 62, 150, 104, 128, 189, 11, 253, 27, 62, 16, 207, 47, 62, 188, 132, 12, 190, 230, 30, 232, 189, 111, 56, 24, 61, 104, 65, 2, 190, 204, 230, 46, 61, 145, 39, 55, 189, 138, 21, 249, 61, 118, 21, 1, 190, 61, 58, 48, 190, 200, 233, 136, 188, 65, 225, 50, 190, 158, 204, 130, 189, 129, 235, 178, 188, 1, 180, 184, 189, 164, 21, 186, 189, 151, 197, 232, 189, 153, 133, 74, 187, 182, 102, 14, 61, 193, 23, 231, 189, 36, 145, 77, 188, 95, 69, 32, 190, 105, 48, 213, 189, 93, 80, 39, 190, 5, 177, 181, 189, 218, 175, 254, 189, 93, 42, 222, 61, 166, 53, 131, 189, 114, 187, 117, 61, 85, 75, 231, 188, 57, 217, 128, 189, 73, 49, 158, 61, 155, 179, 11, 189, 75, 235, 252, 189, 230, 127, 246, 61, 147, 102, 251, 189, 3, 253, 21, 190, 35, 55, 172, 60, 199, 233, 252, 61, 17, 250, 44, 190, 91, 41, 76, 189, 199, 55, 38, 190, 41, 177, 5, 190, 192, 254, 21, 190, 0, 81, 185, 189, 167, 34, 50, 190, 64, 200, 10, 62, 128, 168, 204, 189, 177, 121, 33, 190, 248, 208, 148, 189, 57, 24, 192, 189, 40, 50, 125, 61, 98, 198, 37, 190, 59, 180, 140, 61, 196, 99, 62, 188, 114, 33, 19, 190, 176, 76, 201, 189, 127, 59, 48, 190, 118, 140, 199, 189, 242, 9, 95, 61, 253, 194, 189, 189, 90, 67, 236, 61, 172, 37, 135, 60, 231, 19, 178, 61, 134, 121, 42, 62, 165, 14, 182, 187, 175, 140, 38, 189, 42, 41, 169, 60, 230, 79, 8, 190, 253, 151, 134, 188, 193, 211, 70, 188, 80, 87, 35, 61, 80, 243, 213, 189, 87, 71, 66, 189, 249, 125, 173, 61, 241, 125, 47, 60, 198, 31, 131, 61, 28, 41, 16, 190, 237, 49, 16, 190, 78, 30, 133, 58, 206, 128, 202, 61, 144, 129, 25, 62, 181, 254, 178, 61, 112, 6, 173, 189, 86, 38, 139, 189, 169, 158, 31, 61, 194, 50, 47, 190, 88, 153, 193, 189, 110, 20, 185, 61, 96, 217, 222, 184, 27, 66, 149, 188, 253, 227, 61, 189, 81, 113, 37, 190, 237, 125, 9, 190, 61, 4, 133, 61, 139, 138, 42, 190, 34, 115, 205, 188, 170, 73, 148, 189, 191, 144, 137, 58, 21, 235, 27, 189, 146, 92, 32, 62, 184, 87, 52, 190, 111, 40, 249, 188, 19, 13, 105, 61, 184, 96, 184, 189, 145, 56, 213, 61, 180, 41, 146, 61, 227, 58, 234, 189, 225, 18, 81, 61, 208, 207, 41, 62, 254, 162, 151, 61, 121, 128, 194, 189, 232, 175, 216, 61, 161, 10, 248, 189, 34, 94, 32, 190, 196, 224, 155, 61, 161, 123, 129, 61, 250, 112, 50, 190, 88, 126, 130, 61, 103, 230, 75, 188, 233, 181, 14, 62, 221, 83, 243, 60, 216, 151, 8, 59, 77, 105, 230, 60, 71, 213, 45, 61, 157, 121, 43, 62, 11, 128, 25, 62, 150, 100, 32, 188, 1, 195, 6, 190, 228, 233, 212, 188, 91, 220, 46, 62, 229, 242, 16, 190, 92, 141, 107, 59, 151, 1, 74, 189, 215, 247, 32, 190, 29, 71, 247, 61, 1, 238, 205, 189, 73, 205, 103, 60, 39, 112, 30, 190, 247, 149, 149, 189, 107, 17, 56, 189, 58, 120, 186, 189, 9, 164, 188, 189, 78, 65, 249, 61, 16, 132, 12, 190, 110, 20, 144, 189, 169, 118, 234, 189, 79, 123, 199, 189, 38, 139, 210, 189, 82, 90, 158, 188, 16, 3, 8, 61, 72, 169, 42, 190, 72, 178, 0, 62, 94, 104, 52, 190, 132, 110, 24, 189, 237, 194, 5, 189, 172, 168, 8, 190, 45, 135, 81, 189, 98, 42, 187, 61, 141, 176, 21, 62, 170, 178, 217, 60, 14, 165, 202, 61, 241, 239, 209, 189, 176, 37, 212, 59, 120, 57, 168, 189, 50, 217, 172, 61, 210, 157, 2, 61, 37, 218, 2, 189, 19, 193, 0, 62, 180, 110, 133, 61, 105, 129, 131, 61, 11, 157, 36, 62, 109, 223, 36, 189, 63, 24, 46, 190, 51, 236, 86, 188, 130, 66, 21, 62, 183, 95, 46, 61, 127, 168, 181, 189, 36, 103, 24, 62, 154, 31, 61, 60, 248, 222, 193, 189, 127, 63, 166, 188, 52, 11, 202, 61, 161, 86, 173, 189, 196, 158, 39, 190, 207, 113, 41, 190, 170, 16, 107, 189, 131, 81, 45, 189, 229, 131, 5, 190, 29, 235, 148, 189, 248, 193, 3, 62, 209, 213, 10, 190, 177, 170, 128, 189, 190, 119, 30, 62, 32, 10, 23, 190, 173, 193, 186, 61, 62, 70, 232, 188, 124, 133, 66, 61, 253, 212, 24, 190, 106, 243, 136, 60, 62, 48, 208, 189, 144, 205, 12, 190, 104, 33, 43, 62, 7, 22, 27, 62, 243, 253, 18, 190, 191, 176, 101, 61, 93, 5, 187, 189, 167, 225, 165, 188, 184, 2, 19, 62, 143, 214, 212, 189, 135, 84, 228, 189, 89, 180, 0, 61, 64, 89, 203, 189, 213, 160, 141, 188, 57, 71, 82, 61, 6, 247, 33, 62, 222, 63, 192, 188, 206, 11, 15, 62, 128, 186, 245, 189, 91, 223, 177, 61, 15, 107, 48, 62, 47, 201, 15, 189, 112, 121, 180, 61, 183, 130, 17, 61, 103, 31, 168, 189, 206, 223, 15, 190, 166, 172, 23, 189, 29, 145, 219, 189, 162, 248, 52, 190, 153, 3, 193, 189, 132, 135, 113, 189, 159, 51, 78, 189, 217, 206, 68, 189, 63, 196, 38, 189, 203, 148, 38, 190, 121, 106, 171, 189, 97, 238, 104, 61, 184, 194, 255, 61, 1, 25, 11, 190, 135, 237, 2, 190, 157, 186, 4, 189, 204, 84, 26, 190, 81, 203, 33, 62, 140, 78, 38, 59, 253, 196, 4, 190, 132, 150, 21, 62, 36, 87, 0, 62, 249, 177, 19, 188, 89, 26, 42, 62, 24, 33, 199, 189, 37, 100, 32, 189, 73, 157, 41, 190, 153, 198, 228, 189, 220, 225, 183, 189, 117, 39, 147, 189, 44, 212, 228, 61, 234, 100, 47, 62, 168, 154, 3, 62, 180, 20, 48, 62, 227, 161, 174, 61, 127, 90, 52, 62, 116, 49, 20, 190, 147, 61, 15, 62, 210, 126, 227, 189, 229, 184, 40, 62, 176, 24, 6, 190, 100, 65, 136, 189, 100, 199, 211, 61, 104, 5, 197, 189, 80, 73, 128, 189, 210, 0, 193, 61, 114, 16, 247, 188, 253, 161, 224, 61, 2, 32, 0, 61, 110, 141, 1, 187, 26, 188, 30, 60, 87, 207, 30, 190, 30, 105, 41, 190, 47, 249, 21, 62, 43, 212, 178, 61, 55, 205, 11, 189, 215, 77, 49, 62, 25, 119, 16, 60, 113, 178, 102, 61, 33, 9, 5, 62, 48, 97, 163, 188, 89, 145, 220, 188, 163, 209, 193, 60, 7, 129, 208, 189, 63, 122, 207, 61, 22, 228, 34, 189, 223, 251, 45, 190, 178, 40, 29, 61, 92, 54, 124, 188, 108, 37, 158, 61, 63, 23, 122, 189, 195, 38, 51, 62, 6, 32, 155, 189, 127, 51, 215, 61, 103, 91, 110, 61, 71, 59, 235, 61, 210, 33, 21, 61, 165, 248, 145, 189, 136, 211, 164, 189, 2, 250, 40, 61, 114, 162, 30, 61, 2, 217, 237, 60, 208, 119, 149, 61, 170, 102, 14, 62, 220, 111, 207, 189, 44, 85, 158, 60, 183, 249, 152, 189, 106, 82, 140, 61, 177, 98, 14, 61, 34, 97, 52, 62, 108, 170, 149, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 97, 13, 61, 141, 89, 49, 190, 135, 181, 177, 61, 152, 133, 83, 61, 18, 225, 198, 61, 254, 1, 218, 61, 44, 139, 34, 190, 67, 201, 37, 62, 198, 92, 118, 189, 99, 87, 135, 189, 24, 211, 185, 60, 16, 19, 54, 188, 140, 192, 12, 61, 37, 24, 12, 190, 139, 39, 130, 61, 96, 246, 178, 188, 72, 225, 208, 61, 54, 3, 226, 61, 28, 75, 151, 60, 93, 66, 52, 190, 241, 96, 134, 189, 30, 62, 24, 62, 226, 109, 48, 190, 246, 69, 22, 62, 30, 159, 36, 190, 131, 210, 113, 61, 166, 55, 158, 60, 161, 20, 20, 190, 152, 210, 52, 190, 122, 117, 212, 189, 213, 199, 133, 188, 0, 235, 25, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 96, 255, 59, 145, 190, 45, 62, 81, 94, 163, 189, 25, 139, 125, 188, 159, 6, 1, 62, 242, 227, 147, 189, 244, 114, 163, 61, 125, 31, 244, 188, 122, 211, 8, 62, 227, 195, 5, 189, 0, 218, 35, 190, 247, 239, 46, 62, 8, 11, 98, 61, 106, 27, 21, 62, 107, 175, 51, 60, 75, 56, 252, 61, 222, 129, 27, 62, 78, 216, 87, 61, 228, 229, 157, 60, 78, 86, 193, 61, 80, 187, 241, 189, 118, 70, 216, 59, 82, 75, 176, 189, 123, 166, 210, 188, 251, 185, 10, 190, 208, 195, 59, 189, 167, 189, 107, 189, 192, 97, 92, 60, 35, 208, 26, 62, 147, 151, 234, 188, 50, 214, 227, 189, 214, 69, 37, 190, 155, 173, 12, 190, 164, 220, 193, 61, 212, 9, 94, 189, 119, 53, 191, 60, 107, 23, 29, 190, 214, 38, 223, 61, 139, 221, 209, 189, 222, 49, 227, 189, 74, 134, 32, 62, 39, 236, 193, 60, 253, 173, 226, 61, 92, 4, 17, 190, 18, 229, 99, 189, 172, 110, 13, 61, 117, 194, 29, 62, 115, 70, 211, 189, 190, 63, 88, 188, 237, 182, 29, 190, 252, 171, 10, 62, 12, 181, 19, 190, 64, 44, 128, 188, 2, 66, 163, 61, 114, 238, 44, 62, 27, 216, 66, 60, 124, 209, 239, 61, 233, 8, 28, 190, 203, 59, 3, 62, 106, 173, 205, 61, 57, 9, 22, 61, 181, 105, 209, 61, 197, 170, 136, 189, 189, 75, 190, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 82, 212, 59, 23, 42, 51, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {46, 202, 137, 191, 136, 165, 128, 62, 74, 196, 186, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {159, 239, 139, 60, 162, 6, 74, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0041/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}