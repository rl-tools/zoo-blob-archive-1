// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 206, 182, 190, 184, 166, 44, 63, 94, 93, 236, 190, 54, 108, 25, 190, 63, 81, 131, 190, 125, 137, 56, 191, 226, 130, 198, 190, 206, 166, 34, 191, 154, 44, 253, 62, 197, 226, 28, 191, 141, 177, 2, 190, 155, 219, 45, 190, 205, 67, 4, 191, 140, 73, 78, 62, 52, 72, 199, 62, 179, 182, 125, 62, 126, 100, 206, 62, 106, 140, 15, 191, 19, 6, 218, 61, 252, 142, 45, 62, 143, 196, 12, 191, 236, 167, 194, 62, 192, 190, 22, 191, 47, 28, 18, 191, 220, 143, 132, 63, 118, 211, 89, 63, 213, 16, 238, 62, 26, 254, 147, 62, 215, 68, 216, 61, 144, 215, 137, 190, 200, 155, 8, 191, 183, 163, 245, 62, 132, 7, 48, 62, 229, 108, 181, 190, 154, 61, 251, 191, 248, 158, 248, 190, 73, 139, 193, 62, 137, 255, 89, 191, 14, 248, 223, 190, 253, 193, 97, 189, 213, 50, 11, 63, 69, 75, 11, 63, 232, 246, 146, 61, 16, 117, 43, 191, 214, 137, 113, 62, 171, 48, 15, 191, 248, 114, 33, 62, 21, 220, 191, 189, 34, 115, 24, 63, 157, 24, 149, 190, 196, 14, 37, 63, 44, 165, 132, 190, 2, 234, 170, 191, 36, 180, 205, 189, 137, 66, 118, 61, 131, 10, 210, 61, 170, 24, 80, 62, 114, 90, 174, 189, 5, 22, 241, 61, 124, 215, 80, 191, 22, 163, 245, 190, 52, 236, 182, 63, 99, 59, 3, 186, 233, 158, 136, 62, 80, 182, 18, 63, 97, 68, 198, 190, 100, 203, 3, 191, 158, 29, 221, 62, 13, 24, 191, 61, 57, 189, 254, 62, 10, 40, 246, 62, 57, 197, 219, 190, 42, 251, 18, 60, 213, 71, 108, 61, 82, 234, 170, 62, 182, 248, 254, 60, 198, 133, 74, 191, 94, 26, 132, 62, 117, 64, 3, 191, 123, 248, 168, 191, 127, 129, 26, 191, 212, 152, 169, 62, 189, 181, 150, 191, 81, 46, 139, 190, 62, 155, 142, 190, 251, 89, 75, 191, 218, 7, 223, 188, 200, 83, 184, 62, 75, 81, 53, 191, 244, 159, 95, 62, 87, 223, 233, 61, 155, 252, 22, 191, 214, 184, 36, 61, 19, 225, 42, 63, 91, 3, 218, 190, 67, 87, 247, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 205, 229, 190, 40, 232, 28, 190, 46, 200, 218, 61, 32, 167, 25, 63, 230, 132, 130, 190, 82, 82, 41, 62, 51, 248, 70, 190, 27, 236, 142, 190, 213, 91, 39, 191, 250, 164, 72, 62, 103, 223, 19, 190, 49, 166, 205, 189, 182, 82, 6, 191, 225, 80, 212, 62, 50, 239, 136, 62, 158, 191, 103, 63, 211, 129, 240, 61, 46, 187, 255, 62, 5, 182, 246, 60, 2, 144, 170, 190, 76, 203, 27, 63, 174, 24, 235, 188, 220, 32, 13, 63, 98, 1, 6, 62, 40, 178, 57, 189, 159, 241, 41, 60, 101, 239, 139, 190, 88, 3, 171, 61, 186, 184, 45, 190, 199, 134, 142, 62, 217, 252, 240, 62, 219, 123, 42, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 236, 148, 189, 31, 225, 200, 189, 115, 223, 66, 189, 34, 190, 190, 189, 244, 196, 40, 61, 34, 208, 254, 189, 122, 187, 203, 189, 246, 110, 24, 62, 4, 215, 219, 189, 89, 149, 32, 61, 156, 214, 149, 59, 43, 112, 155, 61, 204, 111, 32, 190, 222, 34, 118, 189, 158, 22, 226, 189, 220, 205, 206, 189, 127, 63, 240, 189, 182, 23, 9, 62, 171, 54, 41, 61, 189, 151, 25, 60, 123, 87, 183, 59, 251, 206, 144, 188, 3, 108, 69, 189, 76, 66, 175, 189, 44, 253, 125, 189, 151, 176, 131, 189, 132, 239, 79, 189, 210, 117, 173, 189, 254, 47, 148, 189, 241, 202, 38, 190, 147, 125, 80, 61, 195, 178, 85, 189, 135, 67, 241, 61, 215, 58, 138, 62, 158, 115, 159, 190, 130, 102, 193, 60, 217, 148, 212, 189, 209, 80, 125, 62, 221, 224, 161, 62, 2, 209, 160, 189, 103, 178, 166, 62, 26, 89, 47, 189, 130, 35, 163, 62, 244, 79, 12, 60, 154, 141, 90, 62, 124, 203, 168, 189, 79, 78, 127, 190, 1, 208, 17, 61, 225, 1, 144, 62, 110, 203, 205, 190, 44, 93, 158, 186, 22, 13, 184, 62, 192, 152, 205, 62, 219, 215, 11, 62, 224, 84, 241, 189, 221, 248, 154, 61, 67, 43, 73, 189, 39, 125, 24, 191, 203, 182, 250, 61, 185, 104, 207, 190, 235, 142, 127, 62, 140, 227, 52, 191, 182, 73, 36, 191, 130, 35, 12, 61, 37, 175, 79, 60, 123, 6, 66, 62, 1, 167, 209, 61, 246, 238, 67, 61, 190, 87, 12, 62, 43, 247, 140, 62, 232, 176, 138, 61, 237, 105, 124, 189, 215, 191, 105, 61, 165, 51, 151, 62, 88, 224, 6, 190, 153, 201, 5, 189, 168, 204, 251, 189, 65, 10, 239, 187, 174, 95, 5, 62, 184, 253, 123, 190, 218, 60, 132, 62, 244, 157, 135, 189, 149, 136, 31, 62, 101, 168, 162, 188, 65, 52, 91, 190, 11, 200, 13, 62, 172, 4, 95, 61, 57, 252, 225, 61, 234, 60, 170, 62, 8, 125, 153, 61, 208, 189, 149, 190, 24, 65, 191, 190, 34, 203, 59, 190, 16, 139, 201, 62, 20, 11, 81, 189, 144, 1, 80, 190, 229, 159, 242, 62, 24, 153, 186, 191, 48, 185, 214, 61, 187, 159, 253, 190, 179, 219, 137, 62, 234, 103, 144, 62, 238, 241, 54, 191, 246, 239, 245, 57, 67, 97, 42, 191, 14, 39, 74, 62, 38, 59, 17, 62, 115, 124, 236, 191, 196, 240, 129, 190, 17, 93, 57, 62, 37, 19, 104, 190, 38, 119, 189, 62, 19, 205, 153, 190, 236, 234, 160, 189, 255, 68, 156, 62, 177, 194, 81, 191, 175, 14, 147, 62, 85, 127, 140, 191, 144, 165, 14, 61, 10, 133, 170, 191, 36, 66, 17, 62, 154, 167, 213, 61, 32, 87, 246, 191, 235, 235, 46, 63, 77, 14, 178, 190, 106, 3, 204, 61, 168, 154, 95, 62, 207, 232, 103, 190, 255, 7, 63, 62, 185, 19, 165, 189, 98, 104, 163, 61, 149, 208, 182, 190, 103, 33, 102, 62, 137, 130, 195, 62, 167, 244, 167, 60, 109, 5, 162, 61, 85, 247, 177, 190, 252, 223, 230, 62, 134, 45, 171, 62, 110, 241, 62, 191, 246, 79, 210, 189, 111, 129, 193, 189, 71, 251, 246, 61, 69, 132, 2, 62, 172, 125, 80, 61, 125, 40, 64, 189, 199, 141, 28, 62, 48, 14, 120, 190, 108, 194, 95, 189, 85, 131, 105, 190, 10, 66, 134, 188, 117, 245, 219, 60, 110, 216, 111, 60, 242, 180, 6, 62, 115, 63, 217, 190, 66, 39, 171, 62, 246, 199, 82, 189, 73, 173, 64, 62, 120, 37, 191, 61, 193, 156, 5, 62, 149, 196, 107, 62, 39, 104, 53, 190, 207, 139, 237, 189, 53, 52, 9, 190, 176, 135, 63, 189, 21, 92, 142, 61, 166, 155, 175, 188, 139, 22, 56, 190, 71, 247, 213, 190, 7, 214, 244, 61, 190, 207, 215, 189, 139, 220, 81, 190, 54, 83, 241, 190, 71, 201, 53, 189, 18, 246, 72, 189, 69, 214, 42, 62, 72, 212, 62, 190, 160, 132, 84, 191, 2, 210, 245, 189, 183, 213, 135, 61, 211, 254, 197, 62, 114, 189, 95, 62, 187, 154, 73, 190, 245, 33, 155, 62, 34, 106, 199, 56, 250, 83, 88, 189, 132, 87, 183, 190, 233, 134, 73, 191, 154, 21, 251, 190, 209, 144, 252, 61, 70, 216, 168, 189, 212, 212, 220, 190, 86, 251, 243, 61, 41, 10, 32, 62, 179, 189, 90, 62, 158, 102, 50, 62, 56, 122, 198, 189, 117, 100, 242, 188, 54, 143, 17, 62, 188, 37, 36, 62, 139, 228, 216, 190, 64, 74, 113, 61, 111, 130, 209, 189, 186, 87, 43, 189, 121, 232, 178, 61, 95, 196, 177, 190, 94, 99, 155, 62, 41, 146, 125, 61, 38, 162, 18, 191, 251, 124, 144, 189, 217, 176, 33, 61, 236, 103, 146, 188, 153, 106, 237, 59, 179, 124, 50, 61, 234, 160, 241, 189, 255, 57, 35, 62, 169, 177, 4, 188, 175, 61, 21, 63, 192, 67, 167, 60, 250, 97, 121, 189, 13, 216, 144, 62, 37, 75, 168, 61, 139, 123, 78, 61, 53, 32, 205, 61, 131, 34, 215, 189, 51, 106, 167, 62, 254, 78, 180, 189, 77, 27, 223, 188, 186, 188, 241, 61, 91, 95, 108, 60, 172, 251, 67, 62, 115, 208, 43, 190, 180, 247, 166, 61, 213, 249, 11, 62, 193, 226, 9, 190, 215, 4, 176, 189, 233, 12, 219, 190, 27, 154, 215, 61, 70, 174, 68, 62, 139, 243, 158, 62, 76, 202, 45, 62, 48, 207, 213, 188, 210, 148, 227, 189, 207, 25, 152, 62, 192, 66, 223, 189, 88, 174, 113, 62, 115, 227, 181, 61, 218, 117, 223, 62, 232, 167, 236, 190, 72, 91, 175, 190, 175, 244, 169, 62, 89, 8, 214, 190, 225, 51, 48, 190, 222, 139, 207, 61, 84, 212, 104, 62, 233, 78, 145, 190, 106, 205, 20, 63, 115, 82, 83, 190, 231, 67, 141, 62, 187, 24, 165, 190, 19, 250, 219, 62, 0, 65, 112, 62, 109, 252, 59, 190, 82, 62, 35, 190, 157, 58, 254, 190, 174, 15, 44, 62, 11, 95, 188, 62, 70, 51, 190, 191, 136, 235, 66, 61, 105, 134, 124, 61, 183, 113, 45, 190, 191, 13, 162, 62, 251, 133, 224, 190, 4, 24, 144, 190, 192, 32, 250, 61, 176, 203, 142, 62, 219, 76, 87, 62, 148, 116, 5, 191, 112, 243, 238, 60, 109, 8, 225, 190, 44, 104, 131, 62, 22, 130, 95, 61, 37, 13, 148, 191, 55, 194, 126, 62, 59, 126, 193, 190, 121, 251, 47, 189, 181, 78, 70, 62, 188, 202, 136, 189, 32, 217, 213, 190, 145, 93, 120, 61, 184, 128, 8, 191, 72, 249, 183, 61, 127, 1, 234, 190, 75, 135, 148, 61, 100, 187, 41, 62, 191, 165, 226, 189, 100, 206, 15, 63, 150, 201, 14, 190, 86, 166, 141, 190, 68, 137, 242, 61, 2, 101, 218, 188, 191, 29, 246, 189, 198, 140, 69, 62, 4, 99, 181, 61, 13, 250, 195, 62, 0, 224, 76, 62, 60, 69, 10, 190, 216, 24, 62, 188, 162, 44, 229, 189, 189, 80, 161, 62, 212, 47, 213, 61, 43, 141, 189, 62, 15, 226, 66, 191, 176, 158, 213, 190, 20, 100, 143, 61, 113, 137, 180, 189, 26, 121, 23, 190, 199, 202, 193, 60, 152, 99, 212, 62, 217, 0, 197, 188, 14, 178, 56, 62, 156, 164, 22, 190, 121, 182, 19, 62, 169, 112, 48, 62, 84, 254, 99, 62, 236, 98, 243, 189, 49, 215, 183, 61, 18, 112, 97, 190, 171, 161, 156, 62, 141, 123, 8, 62, 191, 72, 96, 61, 39, 171, 98, 62, 146, 171, 142, 61, 239, 206, 115, 189, 194, 166, 66, 62, 69, 132, 55, 190, 218, 53, 104, 61, 69, 235, 103, 189, 73, 251, 149, 62, 26, 195, 204, 61, 92, 81, 142, 190, 87, 161, 117, 190, 92, 224, 38, 189, 149, 33, 134, 190, 251, 119, 134, 62, 243, 41, 150, 62, 160, 146, 178, 61, 242, 176, 3, 191, 27, 199, 207, 189, 235, 230, 201, 61, 132, 199, 3, 61, 121, 131, 167, 61, 80, 173, 136, 62, 34, 193, 226, 189, 192, 116, 77, 62, 31, 55, 0, 62, 184, 220, 4, 62, 182, 89, 3, 61, 179, 30, 93, 60, 37, 129, 224, 189, 116, 134, 238, 189, 122, 243, 170, 61, 51, 179, 120, 61, 224, 148, 145, 191, 59, 13, 124, 189, 102, 229, 75, 61, 90, 133, 142, 190, 116, 217, 242, 61, 129, 19, 86, 191, 123, 22, 37, 62, 154, 59, 48, 190, 155, 87, 108, 62, 200, 231, 2, 190, 37, 8, 193, 190, 21, 188, 232, 188, 30, 8, 91, 190, 18, 42, 243, 61, 195, 146, 77, 62, 32, 87, 64, 191, 13, 250, 175, 189, 53, 21, 165, 190, 111, 164, 132, 62, 80, 103, 211, 60, 158, 127, 147, 188, 106, 117, 120, 190, 27, 241, 146, 190, 136, 51, 211, 61, 63, 108, 112, 61, 161, 67, 179, 189, 212, 40, 76, 59, 200, 18, 241, 190, 54, 72, 235, 189, 98, 155, 6, 191, 65, 66, 177, 61, 190, 178, 198, 189, 150, 192, 44, 62, 25, 199, 175, 190, 104, 170, 178, 190, 58, 173, 166, 62, 120, 209, 115, 62, 114, 85, 184, 189, 136, 107, 137, 62, 117, 238, 64, 189, 124, 29, 88, 190, 175, 100, 199, 190, 88, 2, 41, 61, 20, 207, 151, 190, 194, 77, 170, 61, 221, 63, 73, 61, 166, 244, 154, 61, 225, 143, 228, 189, 190, 184, 91, 62, 161, 163, 161, 62, 146, 90, 148, 62, 170, 90, 155, 61, 3, 84, 67, 190, 155, 87, 6, 62, 184, 46, 8, 190, 101, 121, 56, 189, 159, 134, 123, 61, 134, 55, 156, 61, 142, 206, 238, 189, 181, 97, 164, 188, 42, 109, 21, 190, 220, 33, 92, 61, 77, 115, 252, 189, 254, 218, 67, 190, 101, 94, 164, 189, 137, 15, 190, 189, 34, 118, 207, 61, 206, 226, 80, 190, 196, 156, 29, 190, 198, 184, 143, 189, 134, 95, 191, 189, 88, 200, 53, 61, 173, 217, 9, 189, 229, 116, 145, 60, 252, 219, 239, 189, 228, 187, 28, 190, 203, 131, 25, 62, 50, 80, 203, 61, 210, 206, 141, 61, 27, 25, 69, 188, 77, 110, 218, 60, 246, 176, 29, 189, 4, 62, 18, 61, 41, 142, 39, 190, 112, 221, 138, 188, 121, 40, 81, 190, 131, 187, 178, 189, 67, 26, 188, 190, 36, 123, 46, 62, 98, 159, 5, 191, 177, 176, 211, 189, 69, 74, 165, 61, 232, 155, 37, 189, 89, 139, 223, 62, 233, 137, 54, 61, 73, 159, 115, 190, 195, 165, 34, 62, 173, 217, 94, 190, 52, 26, 93, 189, 7, 7, 64, 59, 11, 146, 238, 189, 173, 106, 205, 188, 168, 182, 74, 62, 71, 243, 134, 61, 66, 222, 172, 189, 55, 74, 120, 58, 102, 253, 173, 60, 163, 234, 137, 62, 120, 191, 35, 61, 29, 116, 82, 190, 22, 253, 128, 190, 79, 69, 38, 62, 69, 154, 186, 189, 58, 144, 141, 61, 187, 173, 64, 190, 120, 103, 134, 189, 243, 146, 161, 189, 208, 61, 36, 63, 30, 201, 206, 190, 190, 104, 207, 61, 46, 116, 248, 188, 86, 63, 193, 60, 81, 93, 193, 62, 26, 214, 50, 189, 14, 86, 81, 189, 49, 8, 76, 191, 232, 148, 174, 62, 10, 13, 25, 188, 237, 244, 70, 191, 25, 208, 26, 62, 88, 246, 162, 188, 64, 86, 97, 190, 196, 126, 25, 61, 148, 132, 163, 189, 164, 93, 105, 62, 146, 149, 95, 61, 113, 137, 34, 189, 216, 171, 154, 190, 154, 60, 99, 190, 190, 163, 10, 62, 180, 49, 169, 190, 67, 76, 226, 60, 50, 80, 69, 62, 87, 119, 64, 191, 161, 110, 64, 63, 34, 186, 127, 61, 104, 111, 22, 62, 106, 134, 57, 62, 56, 49, 105, 190, 221, 10, 216, 62, 128, 246, 82, 190, 60, 146, 156, 62, 209, 83, 21, 187, 202, 251, 73, 61, 251, 92, 211, 62, 187, 88, 21, 190, 189, 43, 200, 62, 32, 174, 91, 191, 166, 175, 178, 61, 6, 2, 20, 62, 194, 181, 169, 190, 246, 158, 198, 62, 151, 47, 45, 61, 140, 140, 192, 189, 201, 103, 81, 62, 138, 105, 70, 190, 206, 188, 191, 189, 178, 80, 211, 189, 61, 58, 135, 190, 195, 223, 224, 190, 66, 131, 233, 61, 28, 160, 55, 190, 14, 11, 147, 61, 68, 32, 4, 62, 13, 238, 138, 61, 253, 168, 28, 191, 178, 105, 48, 63, 59, 150, 82, 62, 137, 95, 95, 62, 173, 145, 176, 61, 177, 32, 139, 62, 115, 139, 37, 61, 149, 118, 202, 61, 93, 225, 51, 62, 220, 112, 8, 190, 46, 219, 7, 188, 107, 95, 130, 189, 247, 130, 104, 189, 136, 51, 47, 190, 194, 166, 19, 190, 243, 7, 36, 190, 52, 165, 90, 61, 76, 69, 33, 190, 77, 203, 213, 61, 87, 173, 50, 190, 246, 236, 168, 61, 205, 163, 75, 60, 220, 157, 87, 189, 64, 110, 18, 190, 229, 83, 157, 61, 58, 205, 118, 189, 249, 118, 240, 189, 43, 120, 26, 62, 8, 75, 63, 188, 15, 77, 31, 188, 77, 186, 147, 189, 102, 154, 18, 58, 222, 92, 22, 190, 236, 254, 233, 189, 140, 170, 23, 190, 105, 83, 113, 61, 165, 227, 158, 189, 53, 111, 216, 188, 51, 4, 172, 188, 60, 238, 140, 189, 82, 197, 163, 189, 156, 207, 10, 190, 63, 137, 151, 188, 57, 202, 252, 189, 69, 100, 245, 61, 183, 94, 184, 188, 138, 148, 44, 61, 156, 51, 195, 188, 37, 106, 191, 61, 95, 126, 112, 60, 217, 227, 158, 189, 92, 40, 7, 189, 241, 19, 12, 62, 168, 244, 64, 189, 178, 252, 18, 190, 78, 200, 11, 62, 81, 23, 90, 61, 39, 149, 49, 61, 38, 127, 116, 187, 214, 115, 252, 189, 147, 28, 120, 61, 181, 113, 40, 190, 233, 168, 202, 61, 81, 254, 172, 60, 86, 131, 69, 189, 10, 151, 215, 189, 29, 19, 138, 189, 56, 195, 187, 60, 237, 86, 28, 190, 48, 173, 155, 61, 169, 162, 154, 189, 181, 94, 243, 189, 186, 12, 75, 189, 238, 134, 40, 188, 73, 119, 212, 189, 70, 253, 16, 60, 117, 46, 232, 189, 108, 79, 221, 189, 38, 206, 182, 188, 64, 246, 32, 188, 26, 163, 49, 189, 182, 196, 231, 61, 66, 159, 204, 189, 61, 252, 194, 61, 175, 210, 205, 189, 242, 3, 31, 190, 3, 46, 172, 189, 180, 41, 181, 185, 252, 77, 122, 61, 87, 0, 25, 62, 186, 255, 228, 189, 160, 207, 99, 61, 226, 27, 143, 189, 247, 242, 207, 61, 241, 107, 150, 61, 56, 156, 206, 60, 117, 17, 219, 188, 100, 145, 195, 189, 249, 74, 94, 61, 214, 56, 255, 61, 130, 32, 55, 190, 160, 19, 227, 61, 191, 222, 108, 190, 110, 165, 186, 61, 177, 210, 117, 61, 4, 189, 24, 62, 71, 96, 34, 62, 170, 89, 216, 188, 10, 76, 208, 60, 60, 45, 189, 189, 15, 149, 132, 190, 255, 102, 96, 190, 74, 32, 148, 59, 172, 149, 175, 62, 178, 88, 219, 61, 232, 36, 109, 189, 115, 214, 131, 61, 237, 101, 48, 62, 62, 103, 4, 61, 149, 8, 46, 61, 233, 122, 189, 60, 134, 236, 55, 190, 121, 19, 183, 189, 184, 160, 29, 190, 97, 113, 189, 189, 42, 225, 114, 190, 154, 13, 223, 62, 11, 117, 175, 60, 12, 19, 146, 62, 36, 40, 205, 190, 138, 168, 141, 188, 85, 17, 148, 62, 10, 200, 7, 62, 6, 27, 44, 61, 230, 65, 18, 63, 206, 74, 25, 191, 72, 19, 151, 62, 165, 74, 131, 190, 223, 186, 208, 61, 233, 34, 225, 61, 44, 237, 180, 190, 112, 38, 80, 190, 157, 161, 231, 190, 178, 240, 60, 189, 95, 132, 140, 62, 35, 127, 161, 191, 202, 234, 64, 62, 153, 132, 48, 61, 105, 112, 206, 189, 25, 217, 91, 62, 86, 191, 236, 190, 14, 203, 11, 62, 63, 130, 54, 61, 122, 154, 164, 190, 55, 59, 129, 190, 112, 56, 76, 191, 17, 85, 245, 61, 73, 123, 9, 191, 183, 21, 19, 62, 81, 234, 199, 62, 183, 12, 166, 191, 246, 88, 70, 63, 197, 238, 84, 190, 91, 62, 54, 61, 77, 212, 114, 61, 147, 128, 22, 190, 250, 90, 21, 190, 58, 50, 32, 62, 150, 104, 128, 189, 11, 253, 27, 62, 16, 207, 47, 62, 188, 132, 12, 190, 230, 30, 232, 189, 111, 56, 24, 61, 104, 65, 2, 190, 204, 230, 46, 61, 145, 39, 55, 189, 138, 21, 249, 61, 118, 21, 1, 190, 61, 58, 48, 190, 200, 233, 136, 188, 65, 225, 50, 190, 158, 204, 130, 189, 129, 235, 178, 188, 1, 180, 184, 189, 164, 21, 186, 189, 151, 197, 232, 189, 153, 133, 74, 187, 182, 102, 14, 61, 193, 23, 231, 189, 36, 145, 77, 188, 95, 69, 32, 190, 105, 48, 213, 189, 93, 80, 39, 190, 5, 177, 181, 189, 218, 175, 254, 189, 93, 42, 222, 61, 166, 53, 131, 189, 114, 187, 117, 61, 85, 75, 231, 188, 57, 217, 128, 189, 73, 49, 158, 61, 155, 179, 11, 189, 75, 235, 252, 189, 230, 127, 246, 61, 147, 102, 251, 189, 3, 253, 21, 190, 35, 55, 172, 60, 199, 233, 252, 61, 17, 250, 44, 190, 91, 41, 76, 189, 199, 55, 38, 190, 41, 177, 5, 190, 192, 254, 21, 190, 0, 81, 185, 189, 167, 34, 50, 190, 64, 200, 10, 62, 128, 168, 204, 189, 177, 121, 33, 190, 248, 208, 148, 189, 57, 24, 192, 189, 40, 50, 125, 61, 98, 198, 37, 190, 59, 180, 140, 61, 196, 99, 62, 188, 114, 33, 19, 190, 176, 76, 201, 189, 127, 59, 48, 190, 118, 140, 199, 189, 242, 9, 95, 61, 12, 87, 178, 190, 137, 202, 225, 62, 156, 214, 73, 188, 144, 212, 176, 62, 82, 54, 121, 62, 62, 188, 245, 189, 136, 145, 153, 62, 16, 222, 41, 190, 42, 136, 209, 190, 90, 24, 126, 189, 253, 25, 183, 61, 156, 193, 22, 62, 157, 26, 194, 190, 10, 54, 154, 189, 234, 36, 83, 62, 177, 183, 229, 62, 69, 135, 140, 61, 50, 31, 35, 62, 4, 147, 234, 189, 193, 83, 131, 62, 173, 6, 237, 61, 216, 46, 232, 62, 251, 212, 174, 62, 247, 96, 104, 62, 51, 218, 238, 190, 227, 10, 76, 190, 66, 135, 65, 62, 255, 251, 139, 190, 229, 210, 137, 190, 246, 52, 28, 190, 200, 59, 136, 62, 13, 29, 142, 190, 125, 9, 173, 190, 106, 225, 122, 60, 164, 251, 170, 187, 208, 237, 131, 61, 116, 76, 41, 189, 226, 64, 181, 187, 161, 9, 71, 62, 146, 217, 109, 190, 113, 44, 137, 62, 186, 47, 198, 61, 96, 64, 68, 189, 18, 91, 35, 62, 210, 160, 191, 190, 214, 33, 114, 61, 29, 214, 105, 62, 239, 211, 109, 61, 217, 158, 33, 62, 167, 162, 160, 62, 153, 176, 214, 60, 155, 223, 80, 62, 177, 212, 164, 189, 223, 215, 7, 62, 135, 6, 77, 190, 113, 14, 168, 62, 80, 199, 48, 190, 137, 180, 145, 190, 229, 147, 135, 62, 144, 118, 142, 190, 60, 44, 170, 189, 251, 205, 150, 61, 75, 85, 60, 62, 230, 163, 26, 190, 185, 88, 134, 59, 146, 27, 223, 61, 11, 128, 25, 62, 167, 183, 79, 189, 1, 195, 6, 190, 234, 115, 169, 189, 146, 162, 225, 61, 97, 179, 67, 190, 92, 141, 107, 59, 97, 13, 171, 189, 215, 247, 32, 190, 223, 249, 140, 61, 80, 234, 7, 190, 73, 205, 103, 60, 39, 112, 30, 190, 26, 192, 5, 190, 107, 17, 56, 189, 229, 19, 230, 189, 172, 35, 192, 189, 143, 207, 106, 61, 85, 19, 18, 190, 226, 111, 253, 189, 91, 211, 3, 190, 58, 206, 30, 190, 38, 139, 210, 189, 82, 90, 158, 188, 209, 180, 193, 188, 191, 205, 42, 190, 72, 178, 0, 62, 94, 104, 52, 190, 77, 80, 37, 189, 231, 113, 134, 189, 80, 253, 192, 62, 193, 146, 18, 191, 70, 241, 17, 62, 82, 213, 136, 62, 243, 169, 135, 60, 21, 64, 107, 62, 88, 165, 149, 190, 77, 231, 55, 189, 204, 68, 67, 191, 12, 8, 13, 61, 116, 186, 234, 61, 154, 4, 215, 191, 98, 161, 224, 61, 76, 168, 16, 190, 31, 99, 17, 191, 73, 5, 143, 62, 189, 196, 145, 191, 217, 33, 89, 190, 73, 255, 160, 190, 145, 58, 72, 189, 38, 132, 156, 189, 69, 220, 230, 190, 166, 52, 79, 62, 121, 118, 28, 191, 240, 62, 227, 190, 231, 112, 203, 62, 123, 201, 147, 191, 51, 63, 189, 189, 87, 146, 85, 191, 152, 83, 178, 189, 182, 74, 250, 61, 222, 131, 136, 189, 176, 139, 164, 189, 156, 6, 54, 62, 17, 66, 153, 61, 47, 187, 64, 189, 95, 70, 232, 190, 46, 152, 107, 62, 166, 244, 168, 61, 62, 200, 238, 61, 213, 105, 235, 190, 255, 136, 16, 62, 125, 231, 7, 191, 41, 51, 64, 189, 3, 107, 129, 189, 225, 53, 141, 190, 50, 204, 30, 63, 101, 226, 84, 62, 247, 228, 115, 189, 178, 189, 145, 62, 178, 232, 72, 190, 67, 141, 46, 62, 233, 230, 254, 59, 126, 152, 12, 62, 123, 71, 23, 190, 153, 192, 201, 62, 87, 128, 216, 190, 139, 98, 147, 62, 68, 186, 120, 62, 75, 204, 26, 63, 135, 146, 20, 63, 53, 225, 173, 62, 139, 248, 76, 189, 189, 192, 35, 62, 15, 107, 48, 62, 123, 228, 21, 189, 235, 134, 143, 61, 253, 192, 95, 60, 42, 194, 189, 189, 206, 223, 15, 190, 164, 170, 28, 189, 119, 66, 220, 189, 136, 86, 57, 190, 164, 107, 192, 189, 156, 158, 138, 189, 67, 80, 144, 189, 166, 129, 73, 189, 147, 186, 101, 189, 229, 130, 54, 190, 86, 111, 235, 189, 39, 242, 95, 61, 111, 203, 194, 61, 235, 98, 17, 190, 135, 237, 2, 190, 167, 1, 55, 189, 204, 84, 26, 190, 66, 73, 9, 62, 50, 210, 0, 187, 70, 231, 4, 190, 253, 97, 13, 62, 2, 173, 231, 61, 17, 113, 77, 188, 135, 211, 29, 62, 17, 24, 214, 189, 245, 120, 116, 189, 73, 157, 41, 190, 67, 79, 182, 190, 47, 32, 241, 61, 130, 31, 7, 191, 98, 180, 100, 62, 54, 118, 29, 190, 103, 107, 169, 56, 183, 185, 158, 62, 8, 213, 132, 188, 107, 84, 188, 62, 144, 38, 115, 190, 71, 31, 179, 190, 151, 135, 14, 62, 215, 238, 41, 61, 236, 80, 212, 190, 220, 199, 120, 190, 87, 135, 109, 62, 235, 121, 23, 190, 185, 77, 116, 62, 135, 196, 8, 191, 81, 74, 129, 61, 114, 139, 231, 189, 174, 149, 39, 62, 155, 66, 83, 62, 77, 238, 48, 62, 167, 27, 154, 191, 158, 160, 119, 191, 57, 136, 154, 62, 10, 74, 76, 61, 160, 44, 54, 190, 255, 143, 156, 190, 219, 70, 164, 61, 251, 242, 247, 189, 130, 216, 214, 189, 113, 132, 38, 62, 11, 51, 195, 190, 201, 238, 159, 61, 145, 148, 196, 190, 228, 127, 7, 59, 197, 100, 230, 61, 178, 232, 148, 190, 1, 24, 186, 62, 209, 169, 202, 188, 206, 39, 78, 190, 249, 199, 237, 61, 80, 99, 36, 187, 227, 167, 71, 190, 165, 109, 175, 62, 243, 47, 26, 62, 35, 35, 198, 62, 153, 157, 5, 62, 228, 158, 146, 190, 195, 71, 157, 60, 112, 114, 33, 190, 154, 72, 57, 62, 169, 34, 133, 60, 185, 73, 161, 62, 156, 197, 2, 191, 69, 78, 7, 191, 204, 79, 26, 62, 19, 145, 18, 190, 71, 145, 142, 190, 164, 169, 92, 61, 44, 161, 130, 62, 57, 6, 137, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 65, 50, 186, 156, 38, 173, 190, 205, 116, 177, 61, 14, 110, 164, 62, 27, 8, 131, 62, 51, 7, 221, 61, 78, 166, 31, 190, 24, 156, 221, 62, 10, 59, 246, 61, 98, 80, 168, 62, 65, 159, 21, 189, 249, 113, 12, 189, 220, 40, 129, 62, 25, 32, 55, 190, 64, 120, 8, 62, 232, 105, 80, 62, 165, 148, 93, 62, 54, 3, 226, 61, 28, 75, 151, 60, 45, 204, 98, 190, 214, 181, 23, 62, 125, 112, 130, 62, 226, 109, 48, 190, 246, 69, 22, 62, 165, 229, 59, 62, 50, 129, 146, 62, 111, 112, 165, 188, 70, 248, 4, 190, 180, 48, 12, 190, 118, 20, 10, 190, 13, 150, 5, 62, 107, 102, 198, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 252, 1, 187, 113, 113, 223, 62, 240, 201, 121, 190, 1, 71, 103, 63, 52, 12, 109, 62, 8, 61, 82, 191, 238, 249, 15, 62, 221, 5, 90, 190, 14, 159, 79, 63, 194, 123, 147, 190, 181, 204, 146, 190, 126, 23, 131, 63, 142, 218, 196, 62, 78, 46, 201, 61, 215, 217, 0, 190, 109, 71, 95, 63, 126, 100, 78, 63, 78, 216, 87, 61, 228, 229, 157, 60, 180, 118, 105, 61, 254, 164, 15, 190, 183, 143, 140, 63, 82, 75, 176, 189, 123, 166, 210, 188, 148, 61, 233, 190, 112, 121, 129, 190, 139, 47, 103, 189, 45, 246, 167, 63, 163, 195, 31, 63, 229, 132, 11, 189, 176, 5, 200, 190, 126, 237, 254, 190, 198, 50, 241, 189, 192, 118, 192, 61, 187, 212, 156, 189, 4, 31, 179, 189, 198, 21, 12, 191, 150, 10, 105, 62, 184, 176, 35, 188, 161, 68, 51, 190, 253, 197, 128, 62, 39, 121, 149, 189, 119, 21, 60, 62, 72, 215, 145, 190, 236, 212, 182, 189, 195, 244, 34, 61, 55, 100, 143, 62, 137, 20, 39, 188, 8, 104, 166, 61, 237, 182, 29, 190, 252, 171, 10, 62, 85, 192, 255, 189, 28, 209, 212, 61, 221, 223, 202, 61, 114, 238, 44, 62, 27, 216, 66, 60, 33, 214, 186, 61, 78, 151, 232, 189, 190, 220, 251, 61, 161, 175, 100, 61, 179, 167, 112, 60, 219, 114, 170, 61, 151, 13, 128, 60, 253, 97, 115, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 76, 2, 190, 214, 56, 195, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {60, 90, 34, 191, 173, 90, 154, 190, 182, 135, 193, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {62, 217, 48, 192, 228, 10, 45, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0041/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}