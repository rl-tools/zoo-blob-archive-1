// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 246, 244, 190, 61, 37, 33, 63, 43, 213, 232, 190, 236, 72, 71, 190, 8, 219, 185, 190, 252, 91, 48, 191, 208, 230, 234, 190, 45, 145, 47, 191, 242, 235, 243, 62, 136, 58, 49, 191, 204, 95, 209, 60, 241, 62, 46, 190, 136, 146, 3, 191, 150, 151, 205, 62, 184, 25, 191, 62, 89, 237, 144, 62, 61, 157, 10, 63, 54, 179, 11, 191, 101, 69, 216, 61, 173, 111, 152, 189, 223, 242, 3, 191, 123, 51, 239, 62, 182, 91, 22, 191, 245, 95, 13, 191, 157, 93, 133, 63, 107, 148, 102, 63, 47, 228, 224, 62, 206, 144, 140, 62, 243, 170, 188, 62, 94, 158, 151, 190, 27, 64, 211, 190, 68, 112, 66, 63, 134, 130, 29, 62, 69, 69, 245, 190, 131, 248, 5, 192, 111, 108, 240, 190, 75, 49, 243, 62, 1, 133, 122, 191, 145, 226, 218, 190, 227, 60, 74, 189, 243, 187, 114, 63, 4, 215, 250, 62, 103, 105, 0, 61, 102, 144, 39, 191, 175, 57, 128, 62, 210, 139, 40, 191, 200, 178, 180, 61, 207, 76, 165, 189, 42, 182, 21, 63, 54, 107, 146, 190, 113, 202, 37, 63, 36, 65, 73, 190, 222, 243, 180, 191, 236, 243, 62, 190, 37, 87, 87, 61, 33, 18, 14, 63, 231, 21, 70, 62, 172, 40, 102, 189, 190, 96, 170, 59, 0, 27, 63, 191, 111, 68, 6, 191, 159, 160, 219, 63, 210, 218, 126, 61, 38, 170, 150, 62, 21, 201, 184, 62, 21, 228, 183, 190, 11, 97, 33, 191, 102, 230, 38, 63, 96, 195, 91, 61, 88, 65, 26, 63, 205, 100, 137, 62, 136, 50, 167, 190, 89, 170, 137, 189, 230, 232, 138, 62, 217, 61, 159, 62, 155, 45, 55, 189, 0, 130, 50, 191, 106, 223, 149, 62, 120, 205, 25, 191, 151, 63, 219, 191, 79, 205, 251, 190, 101, 22, 164, 62, 212, 161, 168, 191, 94, 229, 117, 190, 255, 136, 132, 190, 233, 69, 60, 191, 183, 98, 124, 188, 221, 176, 198, 62, 190, 217, 26, 191, 178, 7, 52, 62, 14, 141, 30, 61, 171, 42, 31, 191, 105, 48, 0, 189, 24, 163, 47, 63, 254, 211, 17, 191, 147, 33, 228, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {172, 1, 16, 191, 17, 172, 233, 189, 225, 229, 211, 61, 98, 128, 33, 63, 244, 132, 135, 190, 141, 244, 34, 62, 37, 115, 82, 190, 10, 84, 144, 190, 81, 216, 56, 191, 0, 61, 14, 62, 107, 210, 192, 187, 107, 221, 16, 190, 64, 99, 32, 191, 233, 177, 207, 62, 190, 210, 91, 62, 47, 131, 101, 63, 2, 131, 146, 61, 182, 81, 37, 63, 82, 3, 32, 61, 7, 109, 189, 190, 195, 51, 29, 63, 14, 69, 157, 189, 68, 79, 13, 63, 211, 172, 13, 62, 134, 7, 6, 190, 213, 163, 147, 189, 199, 104, 63, 190, 58, 12, 159, 61, 112, 98, 170, 190, 145, 49, 148, 62, 76, 76, 5, 63, 252, 102, 87, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 236, 148, 189, 31, 225, 200, 189, 115, 223, 66, 189, 34, 190, 190, 189, 244, 196, 40, 61, 34, 208, 254, 189, 122, 187, 203, 189, 246, 110, 24, 62, 4, 215, 219, 189, 89, 149, 32, 61, 156, 214, 149, 59, 43, 112, 155, 61, 204, 111, 32, 190, 222, 34, 118, 189, 158, 22, 226, 189, 220, 205, 206, 189, 127, 63, 240, 189, 182, 23, 9, 62, 171, 54, 41, 61, 189, 151, 25, 60, 123, 87, 183, 59, 251, 206, 144, 188, 3, 108, 69, 189, 76, 66, 175, 189, 44, 253, 125, 189, 151, 176, 131, 189, 132, 239, 79, 189, 210, 117, 173, 189, 254, 47, 148, 189, 241, 202, 38, 190, 147, 125, 80, 61, 195, 178, 85, 189, 221, 155, 25, 62, 62, 198, 151, 62, 110, 170, 10, 191, 46, 85, 136, 60, 8, 65, 183, 190, 77, 73, 94, 62, 30, 132, 162, 62, 248, 25, 127, 189, 150, 83, 162, 62, 162, 221, 167, 189, 82, 221, 104, 62, 127, 126, 111, 61, 184, 9, 167, 62, 224, 185, 161, 189, 139, 196, 253, 190, 22, 20, 121, 59, 253, 243, 81, 62, 212, 103, 183, 190, 39, 42, 184, 187, 178, 231, 194, 62, 168, 20, 199, 62, 137, 133, 243, 61, 73, 204, 35, 190, 249, 77, 72, 61, 6, 15, 92, 190, 52, 141, 70, 191, 77, 63, 58, 62, 66, 220, 170, 190, 95, 199, 138, 62, 107, 203, 92, 191, 242, 196, 42, 191, 255, 13, 8, 62, 1, 101, 168, 187, 10, 157, 50, 62, 30, 41, 102, 61, 84, 163, 131, 61, 214, 189, 220, 61, 188, 155, 116, 62, 162, 3, 140, 61, 44, 18, 223, 189, 32, 168, 149, 61, 255, 202, 140, 62, 53, 95, 58, 190, 251, 231, 234, 189, 1, 134, 170, 190, 27, 147, 179, 188, 15, 82, 253, 61, 31, 180, 150, 190, 67, 10, 136, 62, 162, 13, 3, 190, 30, 224, 51, 62, 35, 220, 183, 188, 241, 12, 239, 189, 22, 241, 150, 61, 130, 26, 87, 61, 245, 236, 130, 61, 253, 180, 164, 62, 161, 9, 137, 61, 144, 13, 177, 190, 228, 233, 251, 190, 88, 31, 72, 190, 26, 163, 204, 62, 252, 111, 166, 189, 132, 10, 156, 190, 142, 141, 81, 63, 183, 188, 192, 191, 121, 209, 14, 62, 157, 105, 3, 191, 91, 123, 131, 62, 23, 145, 11, 63, 210, 69, 174, 190, 246, 123, 209, 61, 58, 255, 62, 191, 39, 230, 199, 61, 26, 143, 43, 62, 12, 243, 199, 191, 72, 83, 233, 62, 55, 209, 44, 62, 128, 141, 58, 190, 212, 36, 217, 62, 211, 46, 154, 190, 202, 222, 38, 61, 156, 173, 135, 62, 4, 132, 45, 191, 227, 247, 177, 62, 58, 143, 53, 191, 4, 201, 149, 61, 236, 112, 186, 191, 10, 158, 17, 62, 227, 50, 22, 62, 57, 251, 5, 192, 100, 97, 96, 63, 5, 115, 164, 190, 255, 11, 207, 61, 181, 111, 120, 62, 65, 136, 75, 190, 90, 69, 49, 62, 159, 48, 114, 189, 1, 254, 55, 61, 220, 131, 187, 190, 157, 75, 106, 62, 127, 53, 205, 62, 196, 172, 150, 61, 218, 196, 223, 61, 176, 68, 70, 190, 130, 85, 237, 62, 119, 169, 203, 62, 222, 128, 155, 191, 90, 213, 210, 188, 179, 238, 192, 188, 139, 149, 183, 61, 86, 154, 57, 62, 113, 247, 128, 61, 200, 224, 183, 60, 121, 235, 94, 62, 165, 41, 106, 190, 41, 61, 248, 61, 58, 25, 67, 190, 136, 171, 95, 61, 70, 218, 129, 61, 169, 230, 245, 60, 86, 11, 187, 61, 172, 211, 19, 191, 154, 130, 181, 62, 174, 75, 250, 188, 16, 22, 43, 62, 137, 17, 196, 61, 0, 181, 77, 62, 142, 173, 60, 62, 25, 224, 56, 190, 159, 130, 115, 189, 99, 159, 27, 190, 150, 250, 175, 189, 219, 100, 233, 61, 131, 71, 153, 187, 99, 147, 117, 190, 8, 184, 202, 190, 109, 223, 65, 62, 67, 243, 4, 191, 217, 100, 90, 190, 206, 165, 60, 191, 234, 166, 147, 190, 175, 227, 202, 62, 154, 39, 48, 62, 87, 230, 71, 188, 239, 109, 168, 191, 31, 171, 185, 190, 184, 31, 155, 61, 161, 201, 186, 62, 60, 230, 128, 62, 57, 233, 135, 190, 98, 95, 183, 62, 97, 133, 129, 190, 43, 32, 186, 62, 242, 16, 243, 190, 133, 78, 157, 191, 74, 42, 4, 191, 100, 255, 49, 62, 8, 107, 37, 61, 162, 92, 10, 191, 171, 67, 3, 62, 198, 118, 36, 62, 203, 184, 83, 62, 63, 93, 19, 62, 180, 30, 172, 188, 5, 140, 141, 189, 85, 170, 12, 62, 163, 55, 30, 62, 114, 28, 191, 190, 125, 234, 120, 59, 113, 109, 39, 61, 166, 78, 149, 189, 246, 16, 6, 62, 55, 155, 161, 190, 69, 75, 38, 62, 174, 51, 148, 187, 20, 71, 30, 191, 154, 139, 240, 189, 7, 98, 30, 61, 119, 51, 110, 188, 232, 83, 190, 189, 164, 198, 131, 60, 203, 108, 107, 190, 100, 175, 237, 61, 103, 165, 210, 60, 39, 199, 2, 63, 221, 45, 171, 60, 10, 130, 155, 189, 101, 54, 123, 62, 214, 155, 188, 189, 32, 222, 204, 188, 43, 178, 32, 62, 56, 134, 29, 190, 149, 30, 158, 62, 234, 240, 215, 189, 36, 174, 13, 60, 160, 157, 222, 61, 63, 184, 201, 188, 242, 5, 64, 62, 174, 233, 50, 190, 66, 73, 8, 62, 240, 195, 246, 61, 178, 79, 22, 190, 246, 143, 117, 189, 200, 96, 244, 190, 223, 210, 242, 61, 213, 173, 108, 62, 88, 206, 163, 62, 74, 250, 78, 62, 233, 154, 82, 61, 188, 152, 146, 189, 31, 249, 143, 62, 142, 245, 202, 187, 149, 42, 41, 62, 91, 43, 8, 62, 33, 26, 199, 62, 172, 224, 234, 190, 187, 144, 164, 190, 194, 98, 167, 62, 131, 73, 211, 190, 175, 71, 190, 189, 71, 198, 41, 62, 67, 236, 136, 62, 196, 195, 172, 190, 38, 18, 21, 63, 139, 18, 218, 190, 46, 151, 140, 62, 131, 158, 245, 190, 151, 162, 231, 62, 207, 246, 154, 62, 207, 91, 175, 190, 103, 226, 11, 191, 248, 94, 240, 190, 173, 184, 141, 62, 33, 173, 235, 62, 172, 67, 202, 191, 2, 24, 12, 190, 198, 243, 183, 61, 3, 195, 67, 190, 8, 182, 157, 62, 4, 207, 229, 190, 212, 108, 228, 190, 228, 241, 25, 62, 199, 180, 237, 61, 167, 59, 147, 62, 10, 82, 225, 190, 43, 80, 171, 61, 56, 227, 161, 190, 75, 155, 133, 62, 143, 229, 41, 61, 55, 163, 165, 191, 116, 231, 39, 62, 226, 9, 5, 191, 206, 51, 201, 189, 62, 111, 139, 61, 225, 52, 207, 190, 43, 97, 234, 190, 37, 250, 34, 61, 15, 211, 12, 191, 138, 117, 229, 61, 252, 208, 229, 190, 246, 161, 54, 61, 108, 137, 27, 62, 149, 101, 244, 189, 17, 128, 251, 62, 179, 226, 21, 190, 248, 38, 12, 191, 45, 94, 36, 62, 85, 157, 162, 189, 50, 231, 117, 190, 211, 154, 144, 62, 225, 49, 201, 61, 24, 230, 193, 62, 86, 87, 119, 62, 79, 39, 123, 190, 178, 237, 2, 189, 85, 71, 17, 190, 9, 137, 130, 62, 11, 218, 3, 62, 7, 9, 169, 62, 147, 58, 90, 191, 248, 63, 156, 190, 213, 155, 138, 61, 42, 236, 167, 189, 31, 36, 109, 189, 237, 255, 157, 61, 60, 114, 228, 62, 2, 171, 192, 189, 191, 38, 207, 61, 90, 117, 148, 190, 139, 40, 4, 62, 219, 215, 154, 62, 217, 67, 72, 62, 213, 169, 201, 189, 100, 44, 116, 189, 91, 72, 203, 190, 12, 177, 205, 62, 15, 108, 157, 62, 55, 20, 221, 60, 100, 11, 214, 62, 74, 237, 129, 62, 99, 40, 193, 188, 156, 66, 84, 62, 99, 48, 24, 190, 140, 194, 194, 61, 22, 9, 254, 189, 110, 79, 188, 62, 74, 230, 54, 189, 190, 151, 160, 190, 30, 199, 86, 190, 36, 244, 178, 189, 70, 0, 188, 189, 222, 221, 122, 62, 214, 125, 151, 62, 195, 251, 99, 62, 53, 246, 19, 191, 73, 42, 179, 189, 110, 50, 61, 62, 224, 86, 234, 61, 222, 196, 88, 61, 179, 140, 72, 62, 194, 127, 43, 190, 187, 236, 138, 62, 144, 163, 229, 61, 163, 11, 30, 62, 43, 26, 11, 189, 81, 32, 139, 188, 155, 129, 224, 189, 131, 231, 239, 189, 140, 253, 212, 60, 105, 0, 235, 60, 128, 135, 162, 191, 59, 13, 124, 189, 249, 70, 34, 61, 204, 107, 43, 190, 136, 16, 212, 61, 97, 236, 66, 191, 122, 66, 99, 62, 42, 143, 95, 190, 84, 249, 72, 62, 54, 135, 59, 190, 127, 153, 216, 190, 110, 113, 71, 189, 167, 49, 130, 190, 199, 238, 28, 62, 81, 25, 169, 62, 112, 244, 122, 191, 237, 31, 177, 189, 138, 110, 152, 190, 8, 216, 193, 62, 90, 13, 169, 61, 158, 127, 147, 188, 5, 177, 221, 62, 160, 158, 126, 190, 243, 14, 224, 61, 51, 146, 36, 62, 15, 105, 235, 189, 75, 95, 1, 62, 60, 223, 202, 190, 212, 245, 65, 190, 231, 208, 24, 191, 78, 78, 9, 62, 19, 97, 42, 190, 106, 94, 169, 187, 222, 65, 13, 191, 179, 150, 194, 190, 208, 211, 149, 62, 57, 133, 170, 62, 54, 147, 241, 189, 45, 72, 132, 62, 204, 33, 4, 190, 208, 136, 59, 190, 47, 255, 30, 191, 231, 129, 112, 62, 38, 115, 164, 190, 253, 26, 37, 62, 91, 189, 196, 60, 43, 117, 22, 61, 31, 187, 115, 190, 56, 12, 27, 62, 89, 203, 173, 62, 152, 133, 129, 62, 156, 209, 181, 61, 90, 133, 179, 190, 155, 87, 6, 62, 184, 46, 8, 190, 101, 121, 56, 189, 159, 134, 123, 61, 134, 55, 156, 61, 142, 206, 238, 189, 181, 97, 164, 188, 42, 109, 21, 190, 220, 33, 92, 61, 77, 115, 252, 189, 254, 218, 67, 190, 101, 94, 164, 189, 137, 15, 190, 189, 34, 118, 207, 61, 206, 226, 80, 190, 196, 156, 29, 190, 198, 184, 143, 189, 134, 95, 191, 189, 88, 200, 53, 61, 173, 217, 9, 189, 229, 116, 145, 60, 252, 219, 239, 189, 228, 187, 28, 190, 203, 131, 25, 62, 50, 80, 203, 61, 210, 206, 141, 61, 27, 25, 69, 188, 77, 110, 218, 60, 246, 176, 29, 189, 4, 62, 18, 61, 41, 142, 39, 190, 112, 221, 138, 188, 51, 251, 73, 190, 9, 41, 209, 189, 167, 16, 34, 191, 177, 117, 119, 62, 138, 185, 105, 191, 4, 233, 62, 189, 21, 223, 181, 188, 35, 62, 130, 189, 79, 250, 22, 63, 211, 153, 187, 61, 87, 210, 222, 190, 168, 202, 130, 62, 248, 213, 141, 190, 112, 19, 120, 189, 32, 94, 195, 189, 253, 74, 56, 187, 231, 236, 172, 189, 133, 153, 105, 62, 237, 133, 8, 62, 6, 229, 20, 190, 117, 113, 44, 188, 103, 134, 148, 61, 239, 170, 140, 62, 248, 188, 192, 61, 117, 109, 139, 190, 73, 142, 34, 191, 63, 249, 118, 62, 58, 246, 223, 189, 66, 62, 115, 62, 42, 92, 64, 190, 183, 213, 240, 188, 173, 239, 147, 190, 172, 101, 11, 63, 197, 70, 210, 190, 67, 10, 204, 61, 34, 197, 198, 189, 54, 77, 182, 188, 83, 91, 212, 62, 28, 37, 114, 189, 175, 185, 64, 189, 25, 90, 77, 191, 79, 245, 189, 62, 62, 75, 173, 189, 141, 120, 137, 191, 119, 99, 197, 62, 151, 48, 169, 188, 252, 184, 106, 190, 215, 79, 163, 61, 18, 172, 171, 189, 23, 231, 129, 62, 249, 140, 83, 57, 142, 101, 124, 189, 229, 93, 27, 191, 95, 1, 21, 190, 120, 44, 16, 61, 191, 78, 135, 190, 35, 2, 32, 188, 90, 96, 27, 62, 80, 46, 135, 191, 93, 236, 70, 63, 138, 131, 116, 61, 227, 76, 28, 62, 198, 217, 112, 62, 40, 40, 213, 189, 82, 230, 242, 62, 172, 199, 78, 190, 142, 116, 152, 62, 144, 147, 142, 189, 255, 164, 206, 188, 117, 41, 216, 62, 237, 52, 13, 190, 109, 47, 200, 62, 85, 197, 90, 191, 102, 230, 170, 61, 117, 254, 39, 61, 25, 239, 213, 190, 184, 249, 222, 62, 190, 223, 31, 61, 185, 225, 202, 189, 109, 76, 34, 62, 104, 218, 68, 190, 182, 182, 20, 190, 83, 4, 35, 190, 96, 77, 127, 190, 122, 119, 28, 191, 4, 141, 42, 62, 229, 196, 180, 190, 181, 201, 216, 61, 72, 9, 176, 61, 12, 28, 25, 61, 126, 161, 37, 191, 171, 21, 42, 63, 59, 250, 202, 61, 114, 113, 95, 62, 61, 89, 198, 61, 221, 170, 180, 62, 115, 139, 37, 61, 149, 118, 202, 61, 116, 54, 42, 62, 171, 200, 8, 190, 80, 58, 74, 188, 107, 95, 130, 189, 247, 130, 104, 189, 136, 51, 47, 190, 194, 166, 19, 190, 243, 7, 36, 190, 226, 194, 88, 61, 76, 69, 33, 190, 77, 203, 213, 61, 162, 207, 56, 190, 251, 169, 156, 61, 117, 79, 40, 60, 227, 78, 126, 189, 65, 238, 22, 190, 217, 148, 154, 61, 58, 205, 118, 189, 249, 118, 240, 189, 43, 120, 26, 62, 173, 41, 101, 188, 15, 77, 31, 188, 179, 118, 154, 189, 231, 118, 177, 187, 222, 92, 22, 190, 236, 254, 233, 189, 78, 45, 25, 190, 67, 60, 92, 61, 120, 28, 165, 189, 53, 111, 216, 188, 51, 4, 172, 188, 60, 238, 140, 189, 183, 162, 167, 189, 156, 207, 10, 190, 24, 77, 187, 188, 57, 202, 252, 189, 69, 100, 245, 61, 183, 94, 184, 188, 37, 22, 2, 61, 156, 51, 195, 188, 83, 207, 180, 61, 95, 126, 112, 60, 217, 227, 158, 189, 44, 101, 69, 189, 51, 195, 10, 62, 239, 144, 79, 189, 105, 146, 29, 190, 78, 200, 11, 62, 178, 178, 64, 61, 39, 149, 49, 61, 82, 123, 137, 188, 214, 115, 252, 189, 76, 39, 93, 61, 181, 113, 40, 190, 124, 57, 193, 61, 81, 254, 172, 60, 86, 131, 69, 189, 10, 151, 215, 189, 29, 19, 138, 189, 139, 216, 170, 60, 237, 86, 28, 190, 48, 173, 155, 61, 169, 162, 154, 189, 181, 94, 243, 189, 186, 12, 75, 189, 238, 134, 40, 188, 73, 119, 212, 189, 70, 253, 16, 60, 117, 46, 232, 189, 108, 79, 221, 189, 38, 206, 182, 188, 64, 246, 32, 188, 26, 163, 49, 189, 182, 196, 231, 61, 66, 159, 204, 189, 61, 252, 194, 61, 175, 210, 205, 189, 242, 3, 31, 190, 3, 46, 172, 189, 180, 41, 181, 185, 252, 77, 122, 61, 87, 0, 25, 62, 186, 255, 228, 189, 160, 207, 99, 61, 226, 27, 143, 189, 247, 242, 207, 61, 241, 107, 150, 61, 56, 156, 206, 60, 117, 17, 219, 188, 100, 145, 195, 189, 249, 74, 94, 61, 214, 56, 255, 61, 130, 32, 55, 190, 160, 19, 227, 61, 234, 222, 55, 190, 255, 55, 232, 61, 4, 6, 58, 61, 59, 143, 146, 62, 224, 150, 15, 62, 118, 70, 29, 189, 204, 176, 218, 60, 174, 214, 169, 189, 157, 165, 120, 190, 37, 4, 88, 190, 15, 206, 207, 58, 131, 2, 224, 62, 219, 68, 196, 61, 77, 33, 50, 189, 90, 220, 207, 61, 51, 134, 138, 62, 219, 40, 89, 61, 35, 166, 168, 61, 172, 9, 134, 61, 221, 51, 47, 190, 98, 37, 106, 189, 165, 35, 92, 190, 116, 209, 157, 189, 56, 86, 138, 190, 114, 44, 220, 62, 222, 104, 21, 61, 17, 155, 179, 62, 184, 60, 182, 190, 150, 183, 187, 60, 150, 171, 200, 62, 229, 216, 69, 62, 234, 152, 59, 189, 30, 130, 29, 63, 6, 38, 187, 190, 41, 185, 156, 62, 71, 230, 164, 190, 195, 114, 130, 61, 202, 68, 121, 189, 194, 148, 175, 62, 36, 187, 138, 60, 146, 232, 25, 191, 53, 241, 74, 190, 194, 171, 107, 62, 47, 172, 161, 191, 192, 144, 172, 63, 235, 132, 104, 59, 254, 243, 116, 189, 23, 146, 131, 62, 5, 209, 238, 190, 50, 230, 138, 62, 21, 184, 1, 189, 234, 6, 41, 190, 149, 198, 166, 190, 173, 89, 134, 191, 5, 47, 242, 61, 253, 45, 45, 191, 179, 31, 0, 62, 252, 101, 211, 62, 23, 184, 205, 191, 194, 36, 121, 63, 144, 41, 114, 190, 3, 236, 101, 61, 254, 164, 227, 61, 180, 216, 255, 62, 250, 90, 21, 190, 58, 50, 32, 62, 150, 104, 128, 189, 11, 253, 27, 62, 16, 207, 47, 62, 188, 132, 12, 190, 230, 30, 232, 189, 111, 56, 24, 61, 104, 65, 2, 190, 204, 230, 46, 61, 145, 39, 55, 189, 138, 21, 249, 61, 118, 21, 1, 190, 61, 58, 48, 190, 200, 233, 136, 188, 65, 225, 50, 190, 158, 204, 130, 189, 129, 235, 178, 188, 1, 180, 184, 189, 164, 21, 186, 189, 151, 197, 232, 189, 153, 133, 74, 187, 182, 102, 14, 61, 193, 23, 231, 189, 36, 145, 77, 188, 95, 69, 32, 190, 105, 48, 213, 189, 93, 80, 39, 190, 5, 177, 181, 189, 218, 175, 254, 189, 93, 42, 222, 61, 166, 53, 131, 189, 114, 187, 117, 61, 85, 75, 231, 188, 57, 217, 128, 189, 73, 49, 158, 61, 155, 179, 11, 189, 75, 235, 252, 189, 230, 127, 246, 61, 147, 102, 251, 189, 3, 253, 21, 190, 35, 55, 172, 60, 199, 233, 252, 61, 17, 250, 44, 190, 91, 41, 76, 189, 199, 55, 38, 190, 41, 177, 5, 190, 192, 254, 21, 190, 0, 81, 185, 189, 167, 34, 50, 190, 64, 200, 10, 62, 128, 168, 204, 189, 177, 121, 33, 190, 248, 208, 148, 189, 57, 24, 192, 189, 40, 50, 125, 61, 98, 198, 37, 190, 59, 180, 140, 61, 196, 99, 62, 188, 114, 33, 19, 190, 176, 76, 201, 189, 127, 59, 48, 190, 118, 140, 199, 189, 242, 9, 95, 61, 61, 245, 200, 190, 75, 149, 213, 62, 239, 171, 78, 189, 91, 168, 188, 62, 171, 163, 133, 62, 190, 233, 24, 190, 184, 154, 143, 62, 66, 198, 50, 190, 92, 0, 9, 191, 243, 75, 147, 189, 150, 114, 51, 62, 1, 247, 66, 62, 186, 126, 221, 190, 75, 186, 2, 190, 124, 84, 128, 62, 173, 145, 247, 62, 250, 121, 80, 61, 205, 221, 90, 62, 148, 199, 19, 190, 195, 164, 109, 62, 98, 110, 108, 62, 246, 69, 200, 62, 120, 239, 216, 62, 30, 215, 62, 62, 82, 228, 255, 190, 148, 17, 91, 190, 124, 51, 64, 62, 244, 181, 97, 190, 225, 110, 110, 190, 72, 222, 248, 189, 177, 116, 147, 62, 187, 70, 180, 190, 91, 237, 195, 190, 18, 2, 27, 187, 175, 100, 199, 188, 11, 33, 191, 61, 35, 43, 113, 189, 71, 171, 36, 189, 159, 221, 64, 62, 218, 142, 116, 190, 41, 41, 153, 62, 17, 140, 174, 61, 149, 147, 181, 189, 147, 83, 68, 62, 225, 168, 217, 190, 141, 26, 94, 61, 149, 188, 137, 62, 248, 169, 96, 61, 153, 98, 60, 62, 12, 3, 194, 62, 95, 248, 81, 61, 125, 129, 64, 62, 147, 35, 159, 188, 110, 106, 134, 61, 96, 16, 62, 190, 102, 149, 145, 62, 174, 122, 52, 190, 154, 121, 133, 190, 221, 242, 133, 62, 52, 229, 138, 190, 63, 107, 97, 188, 215, 109, 14, 62, 229, 210, 100, 62, 209, 247, 87, 190, 185, 88, 134, 59, 146, 27, 223, 61, 11, 128, 25, 62, 167, 183, 79, 189, 1, 195, 6, 190, 234, 115, 169, 189, 146, 162, 225, 61, 97, 179, 67, 190, 92, 141, 107, 59, 97, 13, 171, 189, 215, 247, 32, 190, 223, 249, 140, 61, 80, 234, 7, 190, 73, 205, 103, 60, 39, 112, 30, 190, 26, 192, 5, 190, 107, 17, 56, 189, 229, 19, 230, 189, 172, 35, 192, 189, 143, 207, 106, 61, 85, 19, 18, 190, 226, 111, 253, 189, 91, 211, 3, 190, 58, 206, 30, 190, 38, 139, 210, 189, 82, 90, 158, 188, 209, 180, 193, 188, 191, 205, 42, 190, 72, 178, 0, 62, 94, 104, 52, 190, 77, 80, 37, 189, 231, 113, 134, 189, 153, 185, 129, 62, 185, 99, 51, 191, 21, 102, 45, 62, 1, 192, 100, 62, 177, 151, 139, 187, 187, 218, 229, 61, 30, 92, 195, 190, 77, 231, 55, 189, 204, 68, 67, 191, 67, 245, 142, 189, 143, 69, 52, 61, 154, 239, 229, 191, 98, 161, 224, 61, 168, 201, 75, 190, 160, 239, 251, 190, 9, 165, 107, 62, 131, 52, 151, 191, 143, 71, 59, 190, 158, 178, 242, 190, 170, 50, 20, 190, 26, 7, 35, 190, 190, 74, 10, 191, 214, 88, 22, 62, 254, 175, 48, 191, 216, 165, 7, 191, 91, 199, 239, 62, 74, 250, 165, 191, 51, 63, 189, 189, 27, 220, 78, 191, 191, 85, 55, 189, 47, 218, 16, 62, 222, 131, 136, 189, 172, 197, 88, 189, 163, 114, 66, 62, 149, 46, 9, 62, 183, 159, 141, 189, 84, 121, 220, 190, 172, 77, 104, 62, 222, 202, 176, 61, 160, 134, 228, 61, 137, 195, 8, 191, 13, 241, 231, 61, 161, 61, 227, 190, 28, 54, 196, 189, 63, 177, 173, 188, 99, 251, 139, 190, 94, 85, 27, 63, 48, 215, 56, 62, 139, 21, 129, 189, 134, 238, 137, 62, 19, 111, 136, 190, 80, 225, 57, 62, 61, 11, 25, 190, 160, 214, 39, 62, 26, 37, 137, 190, 112, 59, 203, 62, 181, 249, 210, 190, 175, 107, 145, 62, 104, 16, 114, 62, 223, 123, 19, 63, 60, 24, 19, 63, 130, 120, 155, 62, 67, 230, 114, 189, 179, 190, 97, 62, 15, 107, 48, 62, 123, 228, 21, 189, 235, 134, 143, 61, 253, 192, 95, 60, 42, 194, 189, 189, 206, 223, 15, 190, 164, 170, 28, 189, 119, 66, 220, 189, 136, 86, 57, 190, 164, 107, 192, 189, 156, 158, 138, 189, 67, 80, 144, 189, 166, 129, 73, 189, 147, 186, 101, 189, 229, 130, 54, 190, 86, 111, 235, 189, 39, 242, 95, 61, 111, 203, 194, 61, 235, 98, 17, 190, 135, 237, 2, 190, 167, 1, 55, 189, 204, 84, 26, 190, 66, 73, 9, 62, 50, 210, 0, 187, 70, 231, 4, 190, 253, 97, 13, 62, 2, 173, 231, 61, 17, 113, 77, 188, 135, 211, 29, 62, 17, 24, 214, 189, 245, 120, 116, 189, 73, 157, 41, 190, 252, 211, 201, 190, 92, 62, 195, 61, 161, 57, 154, 190, 208, 11, 128, 62, 18, 35, 200, 188, 78, 216, 145, 187, 116, 217, 150, 62, 59, 155, 44, 188, 174, 9, 30, 61, 173, 104, 115, 190, 132, 12, 223, 190, 85, 224, 42, 62, 183, 148, 86, 188, 28, 128, 48, 191, 84, 182, 136, 189, 204, 249, 136, 62, 110, 193, 112, 190, 222, 101, 167, 62, 213, 184, 115, 191, 144, 95, 41, 61, 42, 82, 137, 188, 191, 228, 15, 62, 88, 237, 186, 62, 181, 179, 18, 62, 190, 200, 144, 191, 139, 68, 40, 191, 232, 230, 148, 62, 20, 58, 173, 61, 133, 78, 224, 189, 95, 126, 137, 190, 12, 126, 232, 61, 66, 12, 71, 190, 208, 167, 19, 190, 223, 96, 22, 62, 62, 192, 188, 190, 42, 74, 214, 61, 59, 113, 211, 190, 140, 24, 175, 188, 215, 41, 218, 61, 114, 2, 150, 190, 40, 241, 133, 62, 96, 176, 207, 188, 216, 158, 224, 190, 20, 169, 36, 62, 63, 239, 78, 189, 122, 225, 160, 190, 153, 252, 223, 62, 74, 38, 38, 62, 67, 120, 198, 62, 154, 220, 81, 62, 27, 46, 203, 190, 90, 11, 144, 59, 155, 74, 50, 190, 209, 85, 255, 61, 31, 64, 17, 61, 23, 80, 144, 62, 204, 95, 25, 191, 171, 176, 216, 190, 10, 42, 28, 62, 66, 94, 3, 190, 142, 10, 81, 190, 4, 144, 1, 62, 138, 21, 159, 62, 210, 84, 168, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 65, 50, 186, 22, 0, 223, 190, 244, 103, 171, 61, 125, 46, 164, 62, 193, 219, 160, 62, 15, 59, 61, 62, 51, 248, 149, 190, 201, 174, 247, 62, 79, 187, 172, 61, 124, 2, 176, 62, 198, 88, 169, 61, 237, 247, 60, 189, 218, 251, 144, 62, 25, 32, 55, 190, 51, 250, 82, 62, 44, 52, 129, 62, 160, 239, 87, 62, 51, 57, 219, 61, 8, 162, 60, 60, 45, 204, 98, 190, 191, 101, 96, 62, 108, 234, 138, 62, 226, 109, 48, 190, 246, 69, 22, 62, 252, 189, 90, 62, 174, 99, 166, 62, 111, 112, 165, 188, 192, 109, 53, 190, 179, 237, 52, 190, 118, 20, 10, 190, 133, 50, 33, 62, 199, 110, 211, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 252, 1, 187, 182, 48, 241, 62, 61, 127, 110, 190, 186, 199, 136, 63, 149, 70, 105, 62, 181, 59, 176, 191, 38, 107, 9, 62, 233, 112, 72, 190, 218, 31, 111, 63, 254, 17, 147, 190, 168, 65, 172, 190, 115, 226, 151, 63, 205, 221, 219, 62, 78, 46, 201, 61, 146, 75, 83, 62, 233, 40, 122, 63, 140, 17, 96, 63, 25, 153, 87, 61, 167, 35, 153, 60, 180, 118, 105, 61, 86, 26, 69, 190, 29, 34, 196, 63, 82, 75, 176, 189, 123, 166, 210, 188, 220, 91, 238, 190, 100, 28, 131, 190, 139, 47, 103, 189, 53, 129, 175, 63, 115, 9, 26, 63, 229, 132, 11, 189, 187, 103, 201, 190, 7, 7, 2, 191, 198, 50, 241, 189, 38, 193, 87, 61, 93, 209, 214, 189, 12, 228, 80, 189, 232, 96, 32, 191, 29, 109, 178, 61, 50, 37, 30, 189, 14, 24, 113, 190, 246, 108, 250, 62, 138, 247, 19, 189, 80, 239, 26, 62, 169, 209, 180, 190, 72, 182, 189, 60, 195, 244, 34, 61, 125, 51, 65, 63, 219, 133, 109, 60, 101, 218, 89, 62, 151, 168, 29, 190, 188, 147, 10, 62, 85, 192, 255, 189, 211, 251, 49, 62, 65, 130, 0, 62, 114, 238, 44, 62, 27, 216, 66, 60, 29, 101, 138, 61, 52, 2, 76, 190, 190, 220, 251, 61, 141, 58, 234, 187, 21, 235, 120, 187, 219, 114, 170, 61, 234, 241, 165, 188, 233, 193, 72, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 160, 47, 190, 46, 111, 252, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {79, 110, 172, 190, 51, 20, 90, 191, 119, 111, 235, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {168, 103, 116, 192, 58, 201, 24, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0041/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}