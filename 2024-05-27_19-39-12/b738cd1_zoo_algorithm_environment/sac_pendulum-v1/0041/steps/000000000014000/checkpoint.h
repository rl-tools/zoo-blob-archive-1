// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 169, 237, 190, 251, 179, 38, 63, 104, 157, 229, 190, 204, 2, 84, 190, 18, 50, 163, 190, 31, 223, 48, 191, 155, 253, 222, 190, 134, 40, 45, 191, 50, 44, 241, 62, 248, 77, 39, 191, 238, 191, 184, 61, 135, 60, 46, 190, 233, 98, 0, 191, 11, 189, 191, 62, 168, 132, 196, 62, 108, 23, 139, 62, 88, 67, 243, 62, 34, 0, 11, 191, 126, 152, 26, 62, 4, 84, 44, 60, 116, 166, 7, 191, 211, 20, 232, 62, 124, 84, 27, 191, 78, 222, 9, 191, 202, 143, 134, 63, 66, 204, 100, 63, 155, 87, 222, 62, 201, 157, 140, 62, 221, 234, 120, 62, 108, 233, 143, 190, 43, 211, 8, 191, 55, 105, 45, 63, 118, 82, 23, 62, 124, 101, 236, 190, 137, 222, 2, 192, 80, 54, 242, 190, 66, 214, 225, 62, 131, 127, 111, 191, 188, 173, 223, 190, 149, 125, 113, 189, 106, 8, 80, 63, 136, 26, 255, 62, 83, 154, 73, 61, 68, 133, 41, 191, 118, 195, 108, 62, 179, 124, 24, 191, 11, 10, 254, 61, 224, 173, 175, 189, 165, 76, 24, 63, 131, 60, 141, 190, 156, 246, 37, 63, 123, 132, 116, 190, 50, 169, 177, 191, 150, 203, 25, 190, 84, 85, 78, 61, 82, 9, 218, 62, 204, 66, 51, 62, 241, 102, 180, 189, 177, 48, 26, 61, 254, 13, 67, 191, 212, 121, 19, 191, 24, 225, 210, 63, 220, 111, 61, 61, 127, 59, 150, 62, 241, 118, 217, 62, 81, 175, 180, 190, 166, 165, 18, 191, 161, 175, 18, 63, 189, 118, 155, 61, 238, 171, 28, 63, 5, 136, 154, 62, 101, 172, 158, 190, 173, 123, 150, 189, 39, 66, 24, 62, 250, 141, 156, 62, 255, 240, 217, 60, 241, 175, 51, 191, 53, 165, 142, 62, 137, 80, 34, 191, 164, 137, 207, 191, 99, 122, 0, 191, 61, 125, 166, 62, 176, 155, 165, 191, 172, 36, 135, 190, 40, 122, 136, 190, 146, 164, 66, 191, 227, 223, 63, 189, 113, 184, 198, 62, 116, 123, 41, 191, 153, 38, 65, 62, 9, 247, 198, 61, 28, 24, 20, 191, 28, 6, 1, 189, 134, 194, 39, 63, 38, 160, 9, 191, 42, 228, 230, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 197, 8, 191, 251, 206, 7, 190, 224, 35, 222, 61, 108, 142, 39, 63, 254, 77, 116, 190, 65, 217, 28, 62, 237, 183, 38, 190, 209, 16, 139, 190, 243, 126, 52, 191, 148, 199, 21, 62, 186, 194, 157, 189, 224, 46, 191, 189, 182, 118, 26, 191, 200, 83, 197, 62, 90, 208, 115, 62, 71, 53, 108, 63, 31, 143, 184, 61, 166, 118, 26, 63, 169, 97, 16, 61, 37, 13, 193, 190, 37, 228, 8, 63, 196, 217, 135, 189, 10, 141, 14, 63, 247, 45, 41, 62, 245, 95, 31, 190, 206, 79, 108, 188, 254, 193, 72, 190, 244, 159, 130, 61, 8, 21, 104, 190, 145, 92, 149, 62, 22, 99, 10, 63, 62, 172, 80, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 236, 148, 189, 31, 225, 200, 189, 115, 223, 66, 189, 34, 190, 190, 189, 244, 196, 40, 61, 34, 208, 254, 189, 122, 187, 203, 189, 246, 110, 24, 62, 4, 215, 219, 189, 89, 149, 32, 61, 156, 214, 149, 59, 43, 112, 155, 61, 204, 111, 32, 190, 222, 34, 118, 189, 158, 22, 226, 189, 220, 205, 206, 189, 127, 63, 240, 189, 182, 23, 9, 62, 171, 54, 41, 61, 189, 151, 25, 60, 123, 87, 183, 59, 251, 206, 144, 188, 3, 108, 69, 189, 76, 66, 175, 189, 44, 253, 125, 189, 151, 176, 131, 189, 132, 239, 79, 189, 210, 117, 173, 189, 254, 47, 148, 189, 241, 202, 38, 190, 147, 125, 80, 61, 195, 178, 85, 189, 221, 251, 13, 62, 28, 76, 148, 62, 14, 87, 238, 190, 39, 234, 190, 60, 77, 145, 133, 190, 188, 179, 110, 62, 180, 223, 162, 62, 156, 85, 133, 189, 222, 216, 166, 62, 156, 226, 131, 189, 141, 56, 132, 62, 223, 192, 44, 61, 93, 77, 148, 62, 5, 29, 150, 189, 68, 203, 215, 190, 86, 73, 211, 60, 180, 89, 103, 62, 100, 80, 185, 190, 73, 27, 153, 58, 24, 243, 191, 62, 148, 174, 207, 62, 185, 14, 6, 62, 47, 123, 4, 190, 220, 192, 129, 61, 217, 10, 17, 190, 163, 104, 65, 191, 187, 182, 43, 62, 196, 192, 180, 190, 48, 207, 124, 62, 90, 97, 80, 191, 152, 64, 37, 191, 167, 24, 202, 61, 198, 249, 27, 60, 141, 29, 55, 62, 155, 43, 160, 61, 104, 20, 139, 61, 192, 42, 241, 61, 119, 147, 136, 62, 54, 202, 149, 61, 184, 61, 139, 189, 2, 183, 149, 61, 245, 73, 153, 62, 68, 16, 45, 190, 240, 105, 155, 189, 87, 96, 133, 190, 143, 72, 93, 188, 113, 108, 5, 62, 222, 65, 138, 190, 250, 71, 138, 62, 123, 66, 205, 189, 18, 135, 48, 62, 164, 23, 175, 188, 66, 91, 15, 190, 97, 114, 231, 61, 38, 124, 89, 61, 216, 205, 194, 61, 143, 36, 171, 62, 146, 27, 177, 61, 126, 125, 169, 190, 102, 186, 238, 190, 106, 159, 41, 190, 47, 173, 208, 62, 162, 184, 117, 189, 55, 163, 134, 190, 175, 65, 52, 63, 166, 70, 199, 191, 187, 34, 245, 61, 7, 211, 14, 191, 9, 208, 130, 62, 70, 244, 250, 62, 169, 34, 254, 190, 75, 205, 13, 62, 184, 67, 52, 191, 181, 170, 216, 61, 209, 242, 65, 62, 169, 97, 236, 191, 247, 29, 129, 188, 98, 151, 55, 62, 139, 165, 76, 190, 142, 2, 214, 62, 160, 161, 153, 190, 219, 85, 41, 60, 236, 58, 145, 62, 139, 205, 79, 191, 39, 54, 171, 62, 78, 164, 71, 191, 56, 86, 138, 61, 105, 222, 180, 191, 216, 159, 13, 62, 153, 67, 250, 61, 28, 100, 9, 192, 232, 133, 97, 63, 99, 65, 183, 190, 130, 218, 214, 61, 170, 224, 121, 62, 95, 138, 92, 190, 30, 222, 32, 62, 244, 51, 137, 189, 184, 227, 122, 61, 57, 6, 182, 190, 20, 12, 120, 62, 221, 15, 194, 62, 123, 249, 110, 61, 15, 101, 170, 61, 88, 204, 129, 190, 86, 111, 223, 62, 127, 11, 212, 62, 168, 134, 147, 191, 211, 230, 160, 189, 60, 151, 53, 189, 208, 95, 187, 61, 97, 255, 50, 62, 91, 246, 80, 61, 71, 98, 77, 60, 125, 206, 68, 62, 131, 84, 113, 190, 120, 153, 202, 61, 47, 33, 99, 190, 202, 103, 111, 61, 92, 15, 195, 60, 182, 19, 0, 61, 243, 122, 190, 61, 27, 239, 14, 191, 42, 64, 178, 62, 132, 252, 145, 188, 33, 198, 27, 62, 170, 52, 153, 61, 191, 68, 42, 62, 45, 96, 48, 62, 191, 59, 79, 190, 142, 180, 130, 189, 18, 68, 58, 190, 197, 94, 170, 189, 169, 104, 187, 61, 124, 37, 175, 188, 230, 137, 100, 190, 57, 60, 184, 190, 186, 143, 44, 62, 28, 78, 165, 190, 180, 85, 127, 190, 12, 201, 44, 191, 24, 13, 73, 190, 72, 194, 182, 62, 62, 53, 30, 62, 41, 49, 198, 60, 69, 244, 145, 191, 193, 184, 147, 190, 128, 169, 84, 61, 17, 80, 177, 62, 62, 200, 111, 62, 56, 101, 146, 190, 155, 98, 177, 62, 42, 64, 12, 190, 30, 128, 175, 62, 10, 218, 1, 191, 207, 120, 132, 191, 74, 42, 4, 191, 127, 236, 101, 62, 229, 126, 120, 61, 82, 188, 2, 191, 91, 111, 244, 61, 183, 180, 27, 62, 75, 219, 108, 62, 67, 96, 33, 62, 187, 166, 125, 188, 42, 115, 117, 189, 123, 9, 7, 62, 194, 239, 21, 62, 191, 3, 195, 190, 0, 189, 143, 60, 211, 58, 23, 61, 159, 0, 158, 189, 0, 247, 209, 61, 130, 87, 158, 190, 164, 143, 47, 62, 252, 246, 198, 60, 6, 202, 26, 191, 105, 64, 223, 189, 152, 49, 132, 61, 189, 146, 186, 188, 4, 206, 145, 189, 168, 5, 159, 60, 188, 122, 39, 190, 198, 171, 2, 62, 38, 155, 240, 60, 107, 227, 2, 63, 50, 233, 128, 60, 206, 222, 174, 189, 41, 60, 100, 62, 248, 113, 41, 189, 248, 72, 173, 186, 218, 19, 4, 62, 78, 251, 21, 190, 112, 113, 160, 62, 131, 126, 190, 189, 179, 217, 213, 57, 59, 38, 244, 61, 162, 123, 167, 187, 167, 5, 67, 62, 242, 66, 28, 190, 182, 145, 242, 61, 220, 230, 12, 62, 205, 107, 16, 190, 91, 241, 136, 189, 48, 134, 235, 190, 233, 138, 240, 61, 223, 155, 93, 62, 137, 144, 163, 62, 25, 136, 70, 62, 16, 201, 44, 61, 112, 83, 176, 189, 22, 59, 145, 62, 27, 100, 23, 189, 28, 105, 71, 62, 110, 107, 230, 61, 103, 81, 211, 62, 19, 16, 229, 190, 11, 158, 162, 190, 129, 119, 166, 62, 110, 111, 213, 190, 55, 59, 140, 189, 27, 76, 24, 62, 111, 161, 135, 62, 179, 233, 162, 190, 147, 173, 14, 63, 79, 196, 187, 190, 98, 21, 142, 62, 130, 60, 232, 190, 125, 174, 234, 62, 228, 199, 165, 62, 237, 167, 117, 190, 32, 72, 194, 190, 240, 220, 242, 190, 68, 6, 134, 62, 21, 44, 226, 62, 128, 100, 203, 191, 241, 86, 173, 189, 122, 130, 174, 61, 242, 146, 59, 190, 233, 8, 162, 62, 231, 91, 228, 190, 81, 173, 198, 190, 194, 9, 17, 62, 45, 53, 44, 62, 84, 226, 142, 62, 30, 218, 204, 190, 109, 65, 151, 61, 247, 186, 168, 190, 169, 104, 137, 62, 129, 239, 40, 61, 252, 12, 160, 191, 17, 69, 72, 62, 66, 48, 245, 190, 232, 160, 181, 189, 216, 107, 226, 61, 128, 119, 162, 190, 149, 133, 227, 190, 155, 146, 65, 61, 145, 196, 32, 191, 12, 68, 210, 61, 116, 126, 209, 190, 209, 60, 134, 61, 199, 177, 35, 62, 116, 55, 199, 189, 97, 199, 8, 63, 160, 249, 0, 190, 121, 97, 178, 190, 40, 109, 17, 62, 183, 153, 128, 189, 176, 11, 82, 190, 127, 66, 95, 62, 0, 6, 199, 61, 54, 51, 183, 62, 134, 57, 84, 62, 205, 168, 69, 190, 75, 85, 204, 188, 98, 92, 2, 190, 252, 243, 146, 62, 5, 54, 2, 62, 30, 221, 183, 62, 6, 35, 79, 191, 202, 70, 196, 190, 221, 106, 124, 61, 190, 21, 196, 189, 225, 160, 141, 189, 76, 209, 71, 61, 243, 122, 221, 62, 87, 133, 143, 189, 239, 204, 34, 62, 216, 243, 60, 190, 53, 240, 4, 62, 4, 16, 147, 62, 108, 33, 74, 62, 70, 74, 24, 190, 190, 236, 38, 61, 231, 103, 144, 190, 159, 168, 181, 62, 216, 161, 131, 62, 41, 175, 248, 59, 151, 217, 159, 62, 154, 187, 41, 62, 4, 27, 52, 189, 129, 170, 77, 62, 215, 222, 58, 190, 254, 168, 164, 61, 198, 239, 246, 189, 206, 68, 168, 62, 142, 230, 84, 61, 91, 218, 156, 190, 215, 247, 118, 190, 120, 195, 153, 189, 191, 138, 9, 190, 153, 88, 130, 62, 66, 99, 153, 62, 1, 65, 8, 62, 106, 132, 24, 191, 195, 80, 204, 189, 163, 106, 30, 62, 128, 124, 177, 61, 119, 10, 142, 61, 171, 80, 81, 62, 106, 166, 39, 190, 98, 100, 129, 62, 87, 196, 227, 61, 154, 121, 24, 62, 199, 191, 214, 188, 81, 32, 139, 188, 155, 129, 224, 189, 116, 134, 238, 189, 158, 133, 7, 61, 184, 89, 11, 61, 35, 197, 164, 191, 59, 13, 124, 189, 206, 103, 34, 61, 123, 58, 71, 190, 209, 133, 208, 61, 65, 23, 71, 191, 248, 167, 78, 62, 172, 86, 82, 190, 56, 87, 74, 62, 124, 166, 50, 190, 84, 93, 216, 190, 74, 161, 65, 189, 167, 49, 130, 190, 62, 115, 21, 62, 44, 161, 154, 62, 16, 251, 122, 191, 13, 250, 175, 189, 45, 32, 158, 190, 226, 183, 182, 62, 27, 84, 131, 61, 158, 127, 147, 188, 58, 70, 248, 62, 92, 22, 70, 190, 34, 140, 218, 61, 13, 225, 31, 62, 150, 192, 243, 189, 221, 134, 164, 61, 107, 132, 190, 190, 51, 254, 77, 190, 159, 97, 23, 191, 183, 116, 220, 61, 114, 62, 175, 189, 90, 86, 153, 61, 19, 174, 236, 190, 173, 23, 190, 190, 102, 81, 159, 62, 43, 34, 164, 62, 104, 164, 218, 189, 157, 253, 140, 62, 178, 24, 200, 189, 163, 71, 215, 189, 4, 66, 2, 191, 9, 103, 40, 62, 239, 86, 149, 190, 186, 210, 7, 62, 103, 5, 123, 60, 34, 91, 37, 61, 139, 232, 43, 190, 253, 100, 62, 62, 117, 13, 171, 62, 86, 63, 136, 62, 201, 112, 180, 61, 209, 247, 129, 190, 155, 87, 6, 62, 184, 46, 8, 190, 101, 121, 56, 189, 159, 134, 123, 61, 134, 55, 156, 61, 142, 206, 238, 189, 181, 97, 164, 188, 42, 109, 21, 190, 220, 33, 92, 61, 77, 115, 252, 189, 254, 218, 67, 190, 101, 94, 164, 189, 137, 15, 190, 189, 34, 118, 207, 61, 206, 226, 80, 190, 196, 156, 29, 190, 198, 184, 143, 189, 134, 95, 191, 189, 88, 200, 53, 61, 173, 217, 9, 189, 229, 116, 145, 60, 252, 219, 239, 189, 228, 187, 28, 190, 203, 131, 25, 62, 50, 80, 203, 61, 210, 206, 141, 61, 27, 25, 69, 188, 77, 110, 218, 60, 246, 176, 29, 189, 4, 62, 18, 61, 41, 142, 39, 190, 112, 221, 138, 188, 96, 119, 69, 190, 115, 164, 219, 189, 107, 58, 21, 191, 183, 127, 84, 62, 210, 109, 83, 191, 53, 111, 80, 189, 134, 177, 109, 59, 84, 91, 191, 189, 80, 15, 22, 63, 135, 70, 208, 61, 208, 132, 248, 190, 157, 131, 57, 62, 235, 203, 155, 190, 101, 252, 78, 189, 233, 26, 212, 188, 253, 161, 18, 189, 167, 243, 13, 189, 195, 85, 72, 62, 181, 14, 16, 62, 57, 77, 0, 190, 209, 138, 185, 56, 214, 152, 126, 61, 197, 83, 130, 62, 136, 202, 205, 61, 233, 84, 140, 190, 229, 212, 6, 191, 182, 171, 51, 62, 239, 217, 11, 190, 28, 32, 254, 61, 146, 69, 30, 190, 146, 209, 244, 188, 212, 43, 129, 190, 63, 138, 17, 63, 16, 185, 184, 190, 44, 166, 191, 61, 203, 62, 70, 189, 170, 50, 182, 188, 217, 93, 206, 62, 15, 72, 220, 188, 72, 217, 80, 189, 230, 219, 77, 191, 101, 88, 185, 62, 154, 246, 44, 188, 26, 219, 108, 191, 243, 14, 209, 62, 100, 131, 126, 188, 135, 123, 97, 190, 140, 173, 175, 61, 207, 115, 163, 189, 90, 135, 134, 62, 7, 57, 247, 60, 71, 118, 96, 188, 86, 82, 252, 190, 93, 34, 51, 190, 132, 85, 198, 61, 101, 100, 146, 190, 91, 110, 102, 188, 111, 183, 26, 62, 106, 87, 92, 191, 74, 76, 76, 63, 115, 12, 101, 61, 141, 193, 30, 62, 43, 12, 104, 62, 37, 35, 170, 189, 107, 150, 235, 62, 245, 128, 79, 190, 2, 158, 149, 62, 213, 123, 83, 189, 247, 135, 240, 188, 239, 151, 206, 62, 38, 14, 19, 190, 84, 198, 192, 62, 19, 62, 90, 191, 127, 83, 139, 61, 196, 122, 213, 61, 8, 241, 194, 190, 242, 91, 219, 62, 137, 222, 57, 61, 42, 229, 169, 189, 163, 21, 51, 62, 78, 132, 61, 190, 127, 141, 238, 189, 112, 45, 4, 190, 230, 195, 129, 190, 8, 234, 14, 191, 27, 155, 8, 62, 122, 64, 150, 190, 69, 172, 167, 61, 189, 188, 159, 61, 3, 56, 32, 61, 26, 249, 31, 191, 230, 123, 49, 63, 253, 247, 200, 61, 6, 123, 110, 62, 69, 3, 212, 61, 218, 178, 169, 62, 115, 139, 37, 61, 149, 118, 202, 61, 116, 54, 42, 62, 171, 200, 8, 190, 80, 58, 74, 188, 107, 95, 130, 189, 247, 130, 104, 189, 136, 51, 47, 190, 194, 166, 19, 190, 243, 7, 36, 190, 226, 194, 88, 61, 76, 69, 33, 190, 77, 203, 213, 61, 162, 207, 56, 190, 251, 169, 156, 61, 117, 79, 40, 60, 227, 78, 126, 189, 65, 238, 22, 190, 217, 148, 154, 61, 58, 205, 118, 189, 249, 118, 240, 189, 43, 120, 26, 62, 173, 41, 101, 188, 15, 77, 31, 188, 179, 118, 154, 189, 231, 118, 177, 187, 222, 92, 22, 190, 236, 254, 233, 189, 78, 45, 25, 190, 67, 60, 92, 61, 120, 28, 165, 189, 53, 111, 216, 188, 51, 4, 172, 188, 60, 238, 140, 189, 82, 197, 163, 189, 156, 207, 10, 190, 63, 137, 151, 188, 57, 202, 252, 189, 69, 100, 245, 61, 183, 94, 184, 188, 138, 148, 44, 61, 156, 51, 195, 188, 37, 106, 191, 61, 95, 126, 112, 60, 217, 227, 158, 189, 92, 40, 7, 189, 241, 19, 12, 62, 168, 244, 64, 189, 178, 252, 18, 190, 78, 200, 11, 62, 81, 23, 90, 61, 39, 149, 49, 61, 38, 127, 116, 187, 214, 115, 252, 189, 147, 28, 120, 61, 181, 113, 40, 190, 233, 168, 202, 61, 81, 254, 172, 60, 86, 131, 69, 189, 10, 151, 215, 189, 29, 19, 138, 189, 56, 195, 187, 60, 237, 86, 28, 190, 48, 173, 155, 61, 169, 162, 154, 189, 181, 94, 243, 189, 186, 12, 75, 189, 238, 134, 40, 188, 73, 119, 212, 189, 70, 253, 16, 60, 117, 46, 232, 189, 108, 79, 221, 189, 38, 206, 182, 188, 64, 246, 32, 188, 26, 163, 49, 189, 182, 196, 231, 61, 66, 159, 204, 189, 61, 252, 194, 61, 175, 210, 205, 189, 242, 3, 31, 190, 3, 46, 172, 189, 180, 41, 181, 185, 252, 77, 122, 61, 87, 0, 25, 62, 186, 255, 228, 189, 160, 207, 99, 61, 226, 27, 143, 189, 247, 242, 207, 61, 241, 107, 150, 61, 56, 156, 206, 60, 117, 17, 219, 188, 100, 145, 195, 189, 249, 74, 94, 61, 214, 56, 255, 61, 130, 32, 55, 190, 160, 19, 227, 61, 159, 255, 71, 190, 228, 12, 208, 61, 102, 13, 58, 61, 128, 66, 128, 62, 6, 181, 16, 62, 211, 55, 37, 189, 247, 232, 141, 60, 38, 6, 196, 189, 187, 148, 130, 190, 147, 121, 98, 190, 83, 49, 9, 189, 133, 21, 200, 62, 14, 240, 163, 61, 56, 39, 102, 189, 77, 150, 168, 61, 18, 31, 102, 62, 218, 215, 26, 61, 21, 255, 20, 61, 86, 233, 52, 61, 152, 250, 54, 190, 246, 128, 159, 189, 46, 241, 71, 190, 127, 246, 211, 189, 25, 250, 139, 190, 6, 5, 223, 62, 43, 172, 29, 61, 122, 69, 162, 62, 70, 251, 211, 190, 241, 139, 141, 60, 171, 47, 181, 62, 133, 235, 35, 62, 209, 213, 54, 189, 139, 207, 40, 63, 251, 120, 219, 190, 144, 112, 149, 62, 133, 246, 156, 190, 63, 74, 84, 61, 120, 181, 42, 61, 66, 228, 104, 62, 83, 253, 1, 189, 98, 65, 18, 191, 229, 98, 33, 190, 148, 29, 137, 62, 15, 60, 161, 191, 22, 214, 131, 63, 235, 43, 208, 59, 213, 2, 170, 189, 177, 189, 132, 62, 76, 148, 244, 190, 137, 33, 112, 62, 181, 42, 84, 188, 220, 84, 35, 190, 235, 106, 141, 190, 155, 168, 105, 191, 132, 147, 242, 61, 50, 152, 41, 191, 200, 37, 231, 61, 42, 164, 201, 62, 37, 61, 189, 191, 7, 11, 117, 63, 244, 133, 127, 190, 92, 120, 61, 61, 141, 145, 193, 61, 88, 205, 136, 62, 250, 90, 21, 190, 58, 50, 32, 62, 150, 104, 128, 189, 11, 253, 27, 62, 16, 207, 47, 62, 188, 132, 12, 190, 230, 30, 232, 189, 111, 56, 24, 61, 104, 65, 2, 190, 204, 230, 46, 61, 145, 39, 55, 189, 138, 21, 249, 61, 118, 21, 1, 190, 61, 58, 48, 190, 200, 233, 136, 188, 65, 225, 50, 190, 158, 204, 130, 189, 129, 235, 178, 188, 1, 180, 184, 189, 164, 21, 186, 189, 151, 197, 232, 189, 153, 133, 74, 187, 182, 102, 14, 61, 193, 23, 231, 189, 36, 145, 77, 188, 95, 69, 32, 190, 105, 48, 213, 189, 93, 80, 39, 190, 5, 177, 181, 189, 218, 175, 254, 189, 93, 42, 222, 61, 166, 53, 131, 189, 114, 187, 117, 61, 85, 75, 231, 188, 57, 217, 128, 189, 73, 49, 158, 61, 155, 179, 11, 189, 75, 235, 252, 189, 230, 127, 246, 61, 147, 102, 251, 189, 3, 253, 21, 190, 35, 55, 172, 60, 199, 233, 252, 61, 17, 250, 44, 190, 91, 41, 76, 189, 199, 55, 38, 190, 41, 177, 5, 190, 192, 254, 21, 190, 0, 81, 185, 189, 167, 34, 50, 190, 64, 200, 10, 62, 128, 168, 204, 189, 177, 121, 33, 190, 248, 208, 148, 189, 57, 24, 192, 189, 40, 50, 125, 61, 98, 198, 37, 190, 59, 180, 140, 61, 196, 99, 62, 188, 114, 33, 19, 190, 176, 76, 201, 189, 127, 59, 48, 190, 118, 140, 199, 189, 242, 9, 95, 61, 153, 157, 191, 190, 0, 66, 218, 62, 180, 78, 129, 189, 182, 170, 185, 62, 114, 22, 133, 62, 178, 204, 0, 190, 242, 243, 148, 62, 109, 142, 29, 190, 225, 63, 255, 190, 48, 200, 75, 189, 176, 129, 71, 62, 196, 18, 46, 62, 222, 57, 213, 190, 187, 28, 223, 189, 91, 162, 87, 62, 161, 196, 245, 62, 217, 148, 41, 61, 126, 196, 59, 62, 81, 30, 6, 190, 157, 124, 119, 62, 19, 29, 96, 62, 137, 37, 218, 62, 73, 253, 206, 62, 76, 181, 92, 62, 36, 146, 245, 190, 117, 103, 106, 190, 71, 108, 56, 62, 141, 158, 115, 190, 35, 170, 117, 190, 141, 44, 16, 190, 57, 13, 143, 62, 130, 97, 167, 190, 148, 42, 191, 190, 200, 60, 40, 59, 214, 81, 99, 188, 48, 75, 173, 61, 72, 241, 75, 189, 79, 147, 163, 188, 118, 243, 68, 62, 249, 78, 94, 190, 163, 230, 148, 62, 173, 3, 212, 61, 242, 223, 171, 189, 154, 117, 57, 62, 186, 255, 208, 190, 195, 115, 100, 61, 79, 50, 130, 62, 87, 116, 93, 61, 58, 165, 53, 62, 72, 86, 188, 62, 226, 157, 36, 61, 25, 255, 67, 62, 162, 141, 56, 189, 99, 92, 197, 61, 184, 209, 81, 190, 163, 164, 158, 62, 24, 242, 40, 190, 154, 218, 131, 190, 233, 17, 132, 62, 51, 62, 142, 190, 163, 53, 228, 59, 101, 214, 252, 61, 149, 100, 98, 62, 65, 246, 66, 190, 185, 88, 134, 59, 146, 27, 223, 61, 11, 128, 25, 62, 167, 183, 79, 189, 1, 195, 6, 190, 234, 115, 169, 189, 146, 162, 225, 61, 97, 179, 67, 190, 92, 141, 107, 59, 97, 13, 171, 189, 215, 247, 32, 190, 223, 249, 140, 61, 80, 234, 7, 190, 73, 205, 103, 60, 39, 112, 30, 190, 26, 192, 5, 190, 107, 17, 56, 189, 229, 19, 230, 189, 172, 35, 192, 189, 143, 207, 106, 61, 85, 19, 18, 190, 226, 111, 253, 189, 91, 211, 3, 190, 58, 206, 30, 190, 38, 139, 210, 189, 82, 90, 158, 188, 209, 180, 193, 188, 191, 205, 42, 190, 72, 178, 0, 62, 94, 104, 52, 190, 77, 80, 37, 189, 231, 113, 134, 189, 100, 31, 133, 62, 104, 45, 50, 191, 159, 135, 44, 62, 15, 73, 104, 62, 209, 32, 138, 187, 100, 135, 245, 61, 229, 142, 194, 190, 77, 231, 55, 189, 204, 68, 67, 191, 195, 143, 114, 189, 200, 173, 61, 61, 154, 239, 229, 191, 98, 161, 224, 61, 103, 99, 74, 190, 67, 58, 253, 190, 87, 2, 111, 62, 26, 210, 151, 191, 43, 194, 54, 190, 181, 196, 242, 190, 126, 146, 21, 190, 191, 217, 31, 190, 11, 31, 10, 191, 61, 240, 25, 62, 41, 103, 48, 191, 163, 253, 5, 191, 182, 185, 237, 62, 88, 253, 165, 191, 51, 63, 189, 189, 27, 220, 78, 191, 69, 53, 62, 189, 186, 203, 20, 62, 222, 131, 136, 189, 174, 18, 128, 189, 191, 208, 61, 62, 64, 78, 232, 61, 174, 85, 92, 189, 199, 41, 233, 190, 101, 158, 94, 62, 140, 129, 166, 61, 231, 67, 194, 61, 25, 21, 8, 191, 117, 253, 221, 61, 93, 133, 181, 190, 85, 50, 152, 189, 214, 49, 13, 189, 7, 80, 139, 190, 47, 254, 28, 63, 235, 46, 74, 62, 183, 245, 132, 189, 169, 35, 145, 62, 120, 242, 109, 190, 251, 196, 53, 62, 117, 200, 165, 189, 5, 213, 16, 62, 199, 88, 64, 190, 214, 34, 196, 62, 213, 120, 225, 190, 103, 15, 139, 62, 34, 64, 124, 62, 145, 43, 24, 63, 61, 35, 14, 63, 184, 59, 160, 62, 243, 153, 108, 189, 13, 223, 75, 62, 15, 107, 48, 62, 123, 228, 21, 189, 235, 134, 143, 61, 253, 192, 95, 60, 42, 194, 189, 189, 206, 223, 15, 190, 164, 170, 28, 189, 119, 66, 220, 189, 136, 86, 57, 190, 164, 107, 192, 189, 156, 158, 138, 189, 67, 80, 144, 189, 166, 129, 73, 189, 147, 186, 101, 189, 229, 130, 54, 190, 86, 111, 235, 189, 39, 242, 95, 61, 111, 203, 194, 61, 235, 98, 17, 190, 135, 237, 2, 190, 167, 1, 55, 189, 204, 84, 26, 190, 66, 73, 9, 62, 50, 210, 0, 187, 70, 231, 4, 190, 253, 97, 13, 62, 2, 173, 231, 61, 17, 113, 77, 188, 135, 211, 29, 62, 17, 24, 214, 189, 245, 120, 116, 189, 73, 157, 41, 190, 19, 222, 194, 190, 40, 192, 210, 61, 108, 56, 180, 190, 234, 41, 116, 62, 169, 40, 129, 189, 91, 61, 227, 59, 3, 26, 155, 62, 42, 63, 34, 188, 252, 111, 97, 62, 91, 190, 100, 190, 210, 133, 210, 190, 196, 222, 37, 62, 156, 39, 119, 59, 25, 31, 13, 191, 24, 124, 2, 190, 13, 172, 132, 62, 120, 204, 81, 190, 75, 69, 146, 62, 138, 189, 55, 191, 17, 38, 71, 61, 253, 173, 72, 189, 187, 247, 35, 62, 251, 15, 149, 62, 72, 185, 44, 62, 216, 216, 148, 191, 91, 61, 58, 191, 83, 136, 149, 62, 170, 227, 116, 61, 172, 168, 193, 189, 70, 78, 139, 190, 249, 47, 230, 61, 18, 71, 46, 190, 136, 240, 8, 190, 214, 223, 27, 62, 187, 245, 170, 190, 2, 210, 193, 61, 219, 159, 163, 190, 105, 60, 115, 187, 49, 252, 228, 61, 216, 129, 139, 190, 245, 10, 157, 62, 194, 210, 24, 188, 60, 0, 134, 190, 234, 251, 19, 62, 60, 126, 13, 189, 204, 228, 130, 190, 188, 74, 215, 62, 146, 4, 40, 62, 164, 142, 204, 62, 242, 26, 64, 62, 184, 148, 171, 190, 172, 145, 17, 60, 75, 201, 45, 190, 184, 117, 29, 62, 17, 218, 19, 61, 134, 164, 156, 62, 58, 43, 2, 191, 198, 0, 210, 190, 248, 190, 21, 62, 98, 204, 15, 190, 218, 227, 56, 190, 192, 248, 236, 61, 241, 55, 157, 62, 142, 20, 157, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 65, 50, 186, 209, 109, 197, 190, 171, 129, 205, 61, 86, 234, 174, 62, 241, 142, 145, 62, 87, 56, 58, 62, 15, 91, 118, 190, 49, 33, 245, 62, 94, 125, 205, 61, 49, 65, 176, 62, 239, 254, 36, 61, 240, 219, 71, 189, 224, 200, 141, 62, 25, 32, 55, 190, 27, 240, 85, 62, 209, 34, 124, 62, 180, 255, 94, 62, 51, 57, 219, 61, 28, 75, 151, 60, 45, 204, 98, 190, 110, 114, 62, 62, 143, 235, 138, 62, 226, 109, 48, 190, 246, 69, 22, 62, 116, 226, 89, 62, 188, 204, 164, 62, 111, 112, 165, 188, 242, 98, 50, 190, 18, 209, 42, 190, 118, 20, 10, 190, 70, 166, 41, 62, 59, 115, 213, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 252, 1, 187, 87, 117, 233, 62, 8, 252, 128, 190, 38, 227, 135, 63, 247, 12, 94, 62, 172, 127, 149, 191, 189, 164, 247, 61, 253, 248, 83, 190, 69, 221, 105, 63, 165, 56, 148, 190, 232, 207, 162, 190, 38, 121, 150, 63, 240, 25, 213, 62, 78, 46, 201, 61, 230, 188, 5, 62, 149, 84, 114, 63, 111, 28, 87, 63, 25, 153, 87, 61, 228, 229, 157, 60, 180, 118, 105, 61, 56, 251, 48, 190, 228, 10, 181, 63, 82, 75, 176, 189, 123, 166, 210, 188, 246, 73, 238, 190, 56, 84, 133, 190, 139, 47, 103, 189, 39, 101, 176, 63, 201, 36, 27, 63, 229, 132, 11, 189, 18, 213, 194, 190, 136, 60, 0, 191, 198, 50, 241, 189, 101, 4, 182, 61, 114, 93, 163, 189, 173, 48, 140, 189, 116, 27, 27, 191, 113, 12, 243, 61, 236, 237, 153, 188, 66, 206, 64, 190, 138, 253, 221, 62, 199, 255, 65, 188, 118, 72, 32, 62, 147, 133, 175, 190, 57, 180, 28, 60, 195, 244, 34, 61, 52, 56, 55, 63, 6, 87, 157, 188, 107, 178, 58, 62, 151, 168, 29, 190, 252, 171, 10, 62, 85, 192, 255, 189, 45, 181, 12, 62, 182, 177, 137, 61, 114, 238, 44, 62, 27, 216, 66, 60, 252, 139, 158, 61, 84, 135, 37, 190, 190, 220, 251, 61, 82, 40, 242, 59, 24, 179, 160, 186, 219, 114, 170, 61, 175, 176, 1, 189, 86, 195, 41, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 138, 44, 190, 39, 166, 229, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {68, 99, 5, 191, 182, 251, 40, 192, 155, 9, 43, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {115, 108, 141, 63, 233, 35, 0, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0041/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}