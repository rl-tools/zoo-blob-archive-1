// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 179, 198, 190, 163, 160, 47, 63, 219, 208, 231, 190, 123, 108, 98, 190, 45, 32, 109, 190, 143, 141, 53, 191, 136, 14, 210, 190, 79, 154, 36, 191, 116, 138, 241, 62, 162, 101, 35, 191, 137, 139, 15, 186, 176, 224, 46, 190, 249, 123, 240, 190, 223, 65, 160, 62, 204, 179, 194, 62, 62, 35, 135, 62, 231, 9, 202, 62, 20, 152, 11, 191, 231, 213, 45, 62, 80, 166, 237, 61, 175, 94, 10, 191, 245, 15, 215, 62, 169, 214, 30, 191, 230, 108, 13, 191, 155, 97, 135, 63, 29, 80, 97, 63, 176, 168, 225, 62, 224, 151, 140, 62, 200, 46, 172, 61, 150, 110, 140, 190, 90, 162, 2, 191, 1, 164, 29, 63, 156, 115, 24, 62, 33, 26, 214, 190, 47, 143, 1, 192, 18, 25, 238, 190, 125, 61, 217, 62, 198, 94, 103, 191, 173, 135, 224, 190, 17, 220, 205, 188, 176, 6, 58, 63, 196, 160, 4, 63, 224, 228, 89, 61, 248, 226, 45, 191, 23, 234, 108, 62, 199, 245, 14, 191, 82, 35, 19, 62, 203, 109, 192, 189, 204, 46, 24, 63, 253, 27, 142, 190, 85, 126, 39, 63, 135, 46, 118, 190, 139, 232, 174, 191, 1, 85, 5, 190, 179, 160, 165, 61, 165, 121, 169, 62, 115, 96, 58, 62, 251, 69, 250, 189, 212, 44, 203, 61, 178, 212, 72, 191, 209, 62, 255, 190, 103, 143, 204, 63, 223, 129, 151, 60, 197, 207, 149, 62, 194, 71, 249, 62, 7, 118, 195, 190, 128, 242, 4, 191, 44, 2, 229, 62, 140, 91, 221, 61, 68, 68, 16, 63, 241, 159, 175, 62, 58, 245, 199, 190, 222, 50, 237, 188, 16, 133, 33, 62, 187, 147, 157, 62, 52, 64, 28, 61, 82, 65, 64, 191, 81, 12, 135, 62, 91, 194, 23, 191, 144, 147, 187, 191, 175, 46, 15, 191, 205, 98, 164, 62, 94, 236, 161, 191, 154, 153, 138, 190, 2, 52, 151, 190, 221, 95, 65, 191, 40, 199, 82, 189, 233, 30, 189, 62, 165, 162, 56, 191, 19, 113, 67, 62, 162, 193, 215, 61, 34, 118, 26, 191, 60, 42, 120, 188, 133, 63, 32, 63, 240, 134, 245, 190, 209, 198, 236, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 21, 247, 190, 164, 20, 26, 190, 52, 15, 210, 61, 176, 145, 38, 63, 254, 67, 123, 190, 74, 101, 32, 62, 155, 94, 15, 190, 203, 161, 142, 190, 110, 51, 46, 191, 105, 194, 38, 62, 255, 45, 210, 189, 204, 79, 97, 189, 165, 206, 18, 191, 110, 224, 204, 62, 226, 251, 120, 62, 127, 145, 107, 63, 141, 239, 212, 61, 162, 76, 19, 63, 56, 249, 36, 61, 246, 69, 183, 190, 120, 76, 19, 63, 10, 173, 70, 189, 181, 110, 10, 63, 66, 181, 13, 62, 48, 27, 238, 189, 156, 169, 28, 188, 72, 231, 98, 190, 181, 235, 140, 61, 206, 249, 32, 190, 108, 255, 140, 62, 195, 251, 3, 63, 11, 168, 73, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 236, 148, 189, 31, 225, 200, 189, 115, 223, 66, 189, 34, 190, 190, 189, 244, 196, 40, 61, 34, 208, 254, 189, 122, 187, 203, 189, 246, 110, 24, 62, 4, 215, 219, 189, 89, 149, 32, 61, 156, 214, 149, 59, 43, 112, 155, 61, 204, 111, 32, 190, 222, 34, 118, 189, 158, 22, 226, 189, 220, 205, 206, 189, 127, 63, 240, 189, 182, 23, 9, 62, 171, 54, 41, 61, 189, 151, 25, 60, 123, 87, 183, 59, 251, 206, 144, 188, 3, 108, 69, 189, 76, 66, 175, 189, 44, 253, 125, 189, 151, 176, 131, 189, 132, 239, 79, 189, 210, 117, 173, 189, 254, 47, 148, 189, 241, 202, 38, 190, 147, 125, 80, 61, 195, 178, 85, 189, 3, 51, 6, 62, 183, 140, 143, 62, 103, 152, 215, 190, 50, 13, 219, 60, 196, 78, 74, 190, 204, 204, 122, 62, 46, 128, 163, 62, 219, 122, 148, 189, 135, 199, 182, 62, 237, 204, 71, 189, 141, 235, 148, 62, 2, 89, 155, 60, 164, 158, 127, 62, 250, 227, 72, 189, 180, 20, 184, 190, 131, 151, 66, 61, 112, 45, 136, 62, 39, 222, 198, 190, 192, 164, 202, 60, 164, 112, 188, 62, 72, 206, 223, 62, 247, 75, 15, 62, 92, 120, 181, 189, 183, 253, 157, 61, 70, 155, 177, 189, 30, 82, 59, 191, 85, 208, 18, 62, 241, 61, 197, 190, 125, 107, 101, 62, 67, 101, 66, 191, 249, 162, 36, 191, 223, 104, 136, 61, 208, 87, 228, 59, 141, 185, 53, 62, 84, 36, 187, 61, 110, 30, 129, 61, 199, 100, 2, 62, 210, 27, 143, 62, 40, 93, 135, 61, 120, 57, 142, 189, 78, 114, 111, 61, 132, 53, 158, 62, 95, 237, 17, 190, 137, 53, 122, 189, 197, 151, 77, 190, 94, 34, 103, 188, 91, 76, 3, 62, 211, 190, 130, 190, 40, 235, 133, 62, 172, 247, 176, 189, 26, 214, 37, 62, 8, 199, 222, 188, 75, 161, 52, 190, 219, 211, 11, 62, 204, 205, 66, 61, 183, 206, 232, 61, 237, 157, 170, 62, 133, 176, 147, 61, 78, 235, 166, 190, 224, 102, 221, 190, 2, 35, 44, 190, 190, 170, 205, 62, 200, 12, 72, 189, 250, 161, 116, 190, 105, 141, 8, 63, 224, 154, 196, 191, 240, 125, 206, 61, 40, 47, 15, 191, 227, 172, 128, 62, 151, 168, 188, 62, 145, 7, 44, 191, 244, 80, 190, 61, 122, 129, 44, 191, 175, 230, 4, 62, 190, 135, 34, 62, 102, 112, 247, 191, 221, 241, 46, 190, 207, 111, 57, 62, 68, 152, 97, 190, 194, 53, 202, 62, 26, 154, 155, 190, 179, 248, 45, 189, 28, 208, 151, 62, 202, 180, 93, 191, 211, 181, 159, 62, 196, 244, 111, 191, 9, 179, 74, 61, 37, 255, 173, 191, 1, 27, 9, 62, 134, 110, 215, 61, 228, 133, 8, 192, 16, 118, 77, 63, 75, 204, 187, 190, 95, 249, 203, 61, 20, 140, 103, 62, 72, 167, 102, 190, 145, 99, 37, 62, 69, 56, 152, 189, 144, 212, 129, 61, 40, 213, 187, 190, 173, 199, 122, 62, 147, 239, 190, 62, 77, 245, 245, 60, 31, 90, 199, 61, 203, 149, 138, 190, 248, 255, 224, 62, 106, 244, 201, 62, 159, 188, 121, 191, 222, 46, 151, 189, 154, 111, 118, 189, 86, 29, 196, 61, 230, 163, 25, 62, 32, 215, 81, 61, 52, 115, 91, 188, 0, 146, 54, 62, 22, 112, 119, 190, 105, 68, 172, 60, 214, 31, 119, 190, 181, 241, 249, 60, 76, 17, 159, 60, 167, 162, 255, 60, 44, 24, 198, 61, 255, 45, 243, 190, 240, 242, 184, 62, 31, 41, 102, 189, 14, 111, 38, 62, 252, 101, 150, 61, 206, 210, 31, 62, 207, 9, 61, 62, 175, 17, 87, 190, 14, 114, 69, 189, 115, 140, 45, 190, 112, 135, 202, 188, 208, 205, 156, 61, 121, 88, 5, 189, 199, 141, 83, 190, 11, 8, 229, 190, 82, 159, 20, 62, 233, 84, 57, 190, 53, 79, 150, 190, 107, 21, 27, 191, 46, 226, 31, 190, 58, 63, 167, 61, 228, 107, 30, 62, 185, 44, 14, 190, 93, 55, 118, 191, 157, 146, 129, 190, 96, 151, 40, 61, 175, 207, 180, 62, 118, 218, 98, 62, 24, 39, 125, 190, 48, 118, 165, 62, 240, 35, 129, 189, 15, 145, 120, 189, 194, 227, 243, 190, 9, 106, 102, 191, 154, 21, 251, 190, 87, 179, 52, 62, 20, 64, 45, 60, 97, 102, 250, 190, 155, 37, 0, 62, 7, 78, 31, 62, 216, 145, 106, 62, 219, 38, 58, 62, 158, 14, 157, 188, 224, 92, 35, 189, 121, 126, 14, 62, 110, 54, 30, 62, 243, 181, 207, 190, 125, 153, 50, 61, 156, 118, 248, 60, 138, 5, 131, 189, 59, 50, 194, 61, 64, 151, 157, 190, 4, 16, 117, 62, 30, 0, 129, 61, 67, 144, 28, 191, 188, 50, 182, 189, 201, 236, 141, 61, 90, 225, 157, 188, 149, 159, 197, 188, 224, 193, 16, 61, 212, 186, 186, 189, 187, 193, 24, 62, 209, 11, 136, 60, 115, 213, 10, 63, 148, 58, 154, 60, 28, 184, 159, 189, 201, 140, 103, 62, 181, 57, 242, 60, 52, 199, 7, 61, 244, 100, 236, 61, 169, 196, 253, 189, 166, 137, 164, 62, 168, 36, 187, 189, 198, 106, 7, 188, 29, 56, 251, 61, 184, 144, 27, 60, 25, 136, 66, 62, 210, 132, 33, 190, 38, 68, 201, 61, 9, 251, 19, 62, 246, 100, 254, 189, 42, 140, 152, 189, 201, 148, 227, 190, 60, 211, 221, 61, 219, 208, 71, 62, 125, 122, 159, 62, 11, 39, 54, 62, 82, 208, 255, 59, 70, 184, 207, 189, 9, 94, 149, 62, 135, 50, 171, 189, 234, 51, 97, 62, 219, 105, 182, 61, 252, 144, 219, 62, 216, 119, 232, 190, 152, 23, 178, 190, 10, 45, 169, 62, 227, 210, 215, 190, 237, 4, 217, 189, 30, 5, 244, 61, 176, 186, 124, 62, 64, 61, 154, 190, 48, 148, 10, 63, 212, 246, 164, 190, 190, 61, 139, 62, 145, 135, 219, 190, 48, 75, 223, 62, 85, 141, 144, 62, 113, 99, 98, 190, 233, 32, 154, 190, 71, 254, 246, 190, 215, 243, 103, 62, 23, 17, 200, 62, 41, 36, 204, 191, 214, 184, 115, 189, 167, 180, 155, 61, 99, 152, 51, 190, 208, 113, 164, 62, 181, 128, 226, 190, 250, 143, 167, 190, 71, 208, 5, 62, 65, 13, 76, 62, 95, 106, 125, 62, 173, 180, 226, 190, 89, 20, 85, 61, 37, 137, 180, 190, 128, 248, 131, 62, 97, 145, 66, 61, 247, 239, 164, 191, 83, 33, 95, 62, 60, 212, 210, 190, 251, 138, 119, 189, 115, 231, 39, 62, 220, 59, 117, 190, 46, 248, 222, 190, 204, 125, 90, 61, 121, 93, 13, 191, 51, 88, 196, 61, 51, 39, 223, 190, 23, 208, 149, 61, 193, 92, 38, 62, 252, 132, 211, 189, 237, 181, 10, 63, 73, 135, 0, 190, 166, 96, 168, 190, 207, 131, 10, 62, 70, 194, 56, 189, 85, 255, 54, 190, 201, 105, 84, 62, 59, 82, 180, 61, 145, 104, 187, 62, 205, 209, 78, 62, 58, 66, 58, 190, 105, 6, 153, 188, 131, 174, 32, 190, 177, 254, 156, 62, 177, 125, 148, 61, 65, 130, 189, 62, 187, 87, 74, 191, 179, 129, 211, 190, 161, 40, 135, 61, 129, 252, 198, 189, 248, 9, 152, 189, 85, 120, 26, 61, 72, 216, 220, 62, 84, 20, 60, 189, 86, 55, 56, 62, 239, 171, 16, 190, 33, 137, 16, 62, 240, 89, 120, 62, 248, 45, 83, 62, 234, 17, 237, 189, 110, 37, 176, 61, 176, 5, 129, 190, 108, 136, 155, 62, 139, 38, 123, 62, 52, 97, 236, 60, 11, 143, 139, 62, 248, 193, 172, 61, 92, 98, 108, 189, 204, 105, 84, 62, 48, 96, 50, 190, 27, 180, 149, 61, 20, 137, 136, 189, 110, 153, 154, 62, 217, 252, 202, 61, 93, 14, 152, 190, 210, 21, 104, 190, 20, 93, 137, 189, 0, 121, 29, 190, 205, 152, 131, 62, 28, 24, 156, 62, 145, 34, 228, 61, 69, 197, 5, 191, 213, 236, 179, 189, 116, 90, 17, 62, 224, 234, 179, 61, 24, 158, 160, 61, 85, 227, 121, 62, 33, 147, 249, 189, 246, 202, 103, 62, 191, 253, 254, 61, 45, 33, 11, 62, 79, 155, 81, 60, 90, 252, 116, 60, 155, 129, 224, 189, 116, 134, 238, 189, 105, 153, 150, 61, 153, 163, 63, 61, 133, 7, 166, 191, 59, 13, 124, 189, 44, 143, 29, 61, 204, 31, 113, 190, 21, 246, 230, 61, 121, 71, 86, 191, 54, 47, 63, 62, 180, 183, 82, 190, 93, 187, 112, 62, 74, 35, 28, 190, 161, 247, 201, 190, 59, 208, 22, 189, 106, 11, 114, 190, 165, 203, 241, 61, 101, 152, 112, 62, 126, 150, 121, 191, 13, 250, 175, 189, 51, 81, 170, 190, 194, 32, 151, 62, 204, 84, 86, 61, 158, 127, 147, 188, 150, 214, 147, 61, 54, 39, 117, 190, 255, 226, 211, 61, 161, 231, 202, 61, 166, 234, 200, 189, 8, 79, 10, 61, 42, 98, 213, 190, 5, 218, 31, 190, 255, 84, 20, 191, 81, 140, 188, 61, 133, 249, 151, 189, 3, 174, 3, 62, 118, 221, 203, 190, 241, 86, 189, 190, 94, 77, 165, 62, 8, 146, 144, 62, 104, 9, 210, 189, 235, 166, 146, 62, 212, 52, 166, 189, 19, 87, 37, 190, 149, 61, 207, 190, 32, 142, 177, 61, 248, 245, 144, 190, 212, 253, 214, 61, 29, 238, 233, 60, 84, 87, 139, 61, 248, 162, 6, 190, 254, 237, 88, 62, 245, 66, 166, 62, 132, 190, 142, 62, 142, 209, 170, 61, 150, 169, 105, 190, 155, 87, 6, 62, 184, 46, 8, 190, 101, 121, 56, 189, 159, 134, 123, 61, 134, 55, 156, 61, 142, 206, 238, 189, 181, 97, 164, 188, 42, 109, 21, 190, 220, 33, 92, 61, 77, 115, 252, 189, 254, 218, 67, 190, 101, 94, 164, 189, 137, 15, 190, 189, 34, 118, 207, 61, 206, 226, 80, 190, 196, 156, 29, 190, 198, 184, 143, 189, 134, 95, 191, 189, 88, 200, 53, 61, 173, 217, 9, 189, 229, 116, 145, 60, 252, 219, 239, 189, 228, 187, 28, 190, 203, 131, 25, 62, 50, 80, 203, 61, 210, 206, 141, 61, 27, 25, 69, 188, 77, 110, 218, 60, 246, 176, 29, 189, 4, 62, 18, 61, 41, 142, 39, 190, 112, 221, 138, 188, 244, 12, 80, 190, 71, 89, 175, 189, 23, 162, 226, 190, 251, 34, 78, 62, 244, 71, 54, 191, 84, 141, 167, 189, 182, 129, 136, 61, 225, 10, 127, 189, 112, 88, 5, 63, 51, 2, 132, 61, 48, 38, 206, 190, 152, 192, 67, 62, 231, 112, 129, 190, 82, 160, 135, 189, 145, 94, 141, 59, 254, 87, 160, 189, 173, 184, 50, 189, 133, 175, 79, 62, 199, 203, 233, 61, 38, 221, 188, 189, 180, 42, 17, 61, 166, 139, 24, 61, 137, 138, 134, 62, 211, 12, 96, 61, 11, 129, 90, 190, 55, 79, 146, 190, 179, 61, 58, 62, 52, 57, 244, 189, 235, 210, 10, 62, 38, 67, 49, 190, 4, 147, 96, 189, 85, 144, 27, 190, 179, 172, 11, 63, 229, 44, 190, 190, 12, 141, 197, 61, 189, 71, 18, 189, 240, 195, 173, 59, 172, 186, 188, 62, 27, 91, 45, 189, 66, 170, 200, 188, 43, 77, 81, 191, 23, 89, 174, 62, 214, 129, 64, 60, 202, 32, 57, 191, 145, 238, 212, 62, 58, 168, 202, 188, 86, 102, 91, 190, 73, 66, 131, 61, 27, 55, 173, 189, 153, 14, 145, 62, 74, 153, 8, 61, 25, 57, 8, 189, 116, 235, 219, 190, 1, 242, 108, 190, 101, 103, 253, 61, 11, 178, 164, 190, 131, 154, 131, 59, 113, 242, 55, 62, 171, 32, 37, 191, 141, 120, 81, 63, 211, 63, 147, 61, 202, 63, 30, 62, 246, 154, 90, 62, 28, 120, 0, 190, 80, 2, 229, 62, 11, 84, 80, 190, 148, 79, 151, 62, 36, 98, 229, 188, 78, 35, 60, 60, 10, 230, 206, 62, 63, 19, 17, 190, 10, 127, 198, 62, 202, 145, 95, 191, 84, 60, 148, 61, 87, 163, 28, 62, 78, 181, 185, 190, 243, 219, 211, 62, 76, 201, 33, 61, 81, 143, 174, 189, 113, 193, 67, 62, 6, 132, 71, 190, 148, 236, 215, 189, 236, 211, 252, 189, 30, 152, 131, 190, 83, 93, 251, 190, 234, 135, 245, 61, 174, 3, 98, 190, 61, 13, 148, 61, 21, 91, 205, 61, 132, 86, 113, 61, 150, 176, 30, 191, 247, 87, 51, 63, 74, 10, 237, 61, 180, 206, 103, 62, 121, 176, 186, 61, 213, 144, 156, 62, 115, 139, 37, 61, 149, 118, 202, 61, 93, 225, 51, 62, 220, 112, 8, 190, 46, 219, 7, 188, 107, 95, 130, 189, 247, 130, 104, 189, 136, 51, 47, 190, 194, 166, 19, 190, 243, 7, 36, 190, 52, 165, 90, 61, 76, 69, 33, 190, 77, 203, 213, 61, 87, 173, 50, 190, 246, 236, 168, 61, 205, 163, 75, 60, 220, 157, 87, 189, 64, 110, 18, 190, 229, 83, 157, 61, 58, 205, 118, 189, 249, 118, 240, 189, 43, 120, 26, 62, 8, 75, 63, 188, 15, 77, 31, 188, 77, 186, 147, 189, 102, 154, 18, 58, 222, 92, 22, 190, 236, 254, 233, 189, 140, 170, 23, 190, 105, 83, 113, 61, 165, 227, 158, 189, 53, 111, 216, 188, 51, 4, 172, 188, 60, 238, 140, 189, 82, 197, 163, 189, 156, 207, 10, 190, 63, 137, 151, 188, 57, 202, 252, 189, 69, 100, 245, 61, 183, 94, 184, 188, 138, 148, 44, 61, 156, 51, 195, 188, 37, 106, 191, 61, 95, 126, 112, 60, 217, 227, 158, 189, 92, 40, 7, 189, 241, 19, 12, 62, 168, 244, 64, 189, 178, 252, 18, 190, 78, 200, 11, 62, 81, 23, 90, 61, 39, 149, 49, 61, 38, 127, 116, 187, 214, 115, 252, 189, 147, 28, 120, 61, 181, 113, 40, 190, 233, 168, 202, 61, 81, 254, 172, 60, 86, 131, 69, 189, 10, 151, 215, 189, 29, 19, 138, 189, 56, 195, 187, 60, 237, 86, 28, 190, 48, 173, 155, 61, 169, 162, 154, 189, 181, 94, 243, 189, 186, 12, 75, 189, 238, 134, 40, 188, 73, 119, 212, 189, 70, 253, 16, 60, 117, 46, 232, 189, 108, 79, 221, 189, 38, 206, 182, 188, 64, 246, 32, 188, 26, 163, 49, 189, 182, 196, 231, 61, 66, 159, 204, 189, 61, 252, 194, 61, 175, 210, 205, 189, 242, 3, 31, 190, 3, 46, 172, 189, 180, 41, 181, 185, 252, 77, 122, 61, 87, 0, 25, 62, 186, 255, 228, 189, 160, 207, 99, 61, 226, 27, 143, 189, 247, 242, 207, 61, 241, 107, 150, 61, 56, 156, 206, 60, 117, 17, 219, 188, 100, 145, 195, 189, 249, 74, 94, 61, 214, 56, 255, 61, 130, 32, 55, 190, 160, 19, 227, 61, 143, 34, 96, 190, 22, 189, 223, 61, 163, 248, 110, 61, 228, 69, 71, 62, 184, 161, 21, 62, 183, 28, 10, 189, 31, 46, 6, 61, 102, 137, 171, 189, 124, 15, 143, 190, 203, 119, 98, 190, 163, 140, 197, 188, 233, 104, 203, 62, 116, 250, 239, 61, 7, 214, 123, 189, 50, 236, 161, 61, 145, 108, 55, 62, 216, 60, 17, 61, 26, 233, 106, 61, 247, 23, 234, 60, 75, 234, 43, 190, 211, 60, 216, 189, 19, 101, 49, 190, 182, 135, 0, 190, 134, 55, 134, 190, 63, 50, 223, 62, 9, 197, 17, 61, 164, 134, 165, 62, 134, 59, 199, 190, 196, 161, 69, 61, 193, 188, 165, 62, 253, 254, 35, 62, 229, 162, 150, 60, 249, 227, 35, 63, 48, 110, 255, 190, 71, 44, 142, 62, 158, 22, 141, 190, 146, 238, 125, 61, 178, 161, 200, 61, 230, 39, 253, 189, 228, 108, 215, 189, 133, 119, 1, 191, 249, 238, 174, 189, 58, 230, 135, 62, 77, 65, 167, 191, 111, 254, 3, 63, 168, 74, 82, 60, 9, 19, 213, 189, 219, 39, 119, 62, 118, 203, 246, 190, 142, 37, 57, 62, 128, 88, 217, 59, 199, 21, 80, 190, 182, 224, 164, 190, 128, 34, 90, 191, 48, 53, 219, 61, 53, 222, 19, 191, 78, 236, 229, 61, 204, 174, 193, 62, 228, 76, 183, 191, 194, 35, 100, 63, 86, 153, 119, 190, 170, 233, 25, 61, 132, 174, 152, 61, 31, 176, 142, 189, 250, 90, 21, 190, 58, 50, 32, 62, 150, 104, 128, 189, 11, 253, 27, 62, 16, 207, 47, 62, 188, 132, 12, 190, 230, 30, 232, 189, 111, 56, 24, 61, 104, 65, 2, 190, 204, 230, 46, 61, 145, 39, 55, 189, 138, 21, 249, 61, 118, 21, 1, 190, 61, 58, 48, 190, 200, 233, 136, 188, 65, 225, 50, 190, 158, 204, 130, 189, 129, 235, 178, 188, 1, 180, 184, 189, 164, 21, 186, 189, 151, 197, 232, 189, 153, 133, 74, 187, 182, 102, 14, 61, 193, 23, 231, 189, 36, 145, 77, 188, 95, 69, 32, 190, 105, 48, 213, 189, 93, 80, 39, 190, 5, 177, 181, 189, 218, 175, 254, 189, 93, 42, 222, 61, 166, 53, 131, 189, 114, 187, 117, 61, 85, 75, 231, 188, 57, 217, 128, 189, 73, 49, 158, 61, 155, 179, 11, 189, 75, 235, 252, 189, 230, 127, 246, 61, 147, 102, 251, 189, 3, 253, 21, 190, 35, 55, 172, 60, 199, 233, 252, 61, 17, 250, 44, 190, 91, 41, 76, 189, 199, 55, 38, 190, 41, 177, 5, 190, 192, 254, 21, 190, 0, 81, 185, 189, 167, 34, 50, 190, 64, 200, 10, 62, 128, 168, 204, 189, 177, 121, 33, 190, 248, 208, 148, 189, 57, 24, 192, 189, 40, 50, 125, 61, 98, 198, 37, 190, 59, 180, 140, 61, 196, 99, 62, 188, 114, 33, 19, 190, 176, 76, 201, 189, 127, 59, 48, 190, 118, 140, 199, 189, 242, 9, 95, 61, 78, 164, 187, 190, 171, 66, 221, 62, 113, 198, 175, 188, 173, 90, 179, 62, 183, 30, 135, 62, 205, 53, 243, 189, 181, 231, 150, 62, 8, 145, 36, 190, 225, 221, 237, 190, 196, 178, 78, 189, 94, 149, 33, 62, 184, 247, 38, 62, 52, 2, 204, 190, 0, 50, 174, 189, 92, 176, 77, 62, 40, 178, 236, 62, 236, 181, 93, 61, 164, 127, 32, 62, 210, 255, 234, 189, 169, 182, 125, 62, 171, 215, 34, 62, 225, 11, 228, 62, 222, 105, 184, 62, 10, 122, 103, 62, 67, 73, 236, 190, 62, 84, 119, 190, 114, 217, 59, 62, 144, 23, 132, 190, 206, 73, 112, 190, 127, 1, 29, 190, 27, 230, 138, 62, 42, 73, 154, 190, 180, 90, 182, 190, 154, 76, 24, 60, 173, 239, 32, 188, 49, 71, 153, 61, 99, 71, 56, 189, 141, 136, 2, 188, 6, 21, 69, 62, 235, 169, 100, 190, 67, 200, 139, 62, 18, 159, 220, 61, 238, 238, 123, 189, 196, 89, 49, 62, 50, 161, 200, 190, 98, 120, 80, 61, 123, 212, 111, 62, 157, 248, 64, 61, 62, 71, 39, 62, 115, 210, 173, 62, 182, 200, 230, 60, 173, 248, 74, 62, 197, 26, 166, 189, 162, 59, 245, 61, 233, 98, 100, 190, 36, 231, 165, 62, 103, 19, 46, 190, 131, 64, 146, 190, 180, 88, 134, 62, 189, 70, 144, 190, 82, 117, 166, 188, 85, 218, 192, 61, 38, 249, 81, 62, 199, 186, 46, 190, 185, 88, 134, 59, 146, 27, 223, 61, 11, 128, 25, 62, 167, 183, 79, 189, 1, 195, 6, 190, 234, 115, 169, 189, 146, 162, 225, 61, 97, 179, 67, 190, 92, 141, 107, 59, 97, 13, 171, 189, 215, 247, 32, 190, 223, 249, 140, 61, 80, 234, 7, 190, 73, 205, 103, 60, 39, 112, 30, 190, 26, 192, 5, 190, 107, 17, 56, 189, 229, 19, 230, 189, 172, 35, 192, 189, 143, 207, 106, 61, 85, 19, 18, 190, 226, 111, 253, 189, 91, 211, 3, 190, 58, 206, 30, 190, 38, 139, 210, 189, 82, 90, 158, 188, 209, 180, 193, 188, 191, 205, 42, 190, 72, 178, 0, 62, 94, 104, 52, 190, 77, 80, 37, 189, 231, 113, 134, 189, 55, 18, 141, 62, 184, 175, 42, 191, 0, 109, 69, 62, 212, 255, 128, 62, 40, 213, 182, 60, 144, 23, 10, 62, 69, 10, 181, 190, 77, 231, 55, 189, 204, 68, 67, 191, 192, 203, 41, 189, 136, 123, 152, 61, 154, 239, 229, 191, 98, 161, 224, 61, 53, 55, 50, 190, 36, 224, 245, 190, 251, 174, 131, 62, 231, 139, 150, 191, 192, 27, 37, 190, 141, 21, 230, 190, 197, 216, 239, 189, 167, 160, 7, 190, 91, 118, 8, 191, 201, 110, 51, 62, 185, 25, 47, 191, 75, 37, 254, 190, 106, 81, 237, 62, 59, 74, 165, 191, 51, 63, 189, 189, 15, 222, 78, 191, 233, 39, 60, 189, 176, 78, 45, 62, 222, 131, 136, 189, 54, 19, 135, 189, 248, 43, 59, 62, 245, 165, 189, 61, 139, 63, 31, 189, 185, 250, 229, 190, 48, 0, 98, 62, 229, 238, 169, 61, 140, 133, 217, 61, 9, 131, 8, 191, 20, 9, 243, 61, 50, 185, 183, 190, 89, 113, 130, 189, 238, 14, 69, 189, 175, 116, 146, 190, 188, 81, 29, 63, 106, 158, 89, 62, 186, 45, 153, 189, 141, 76, 149, 62, 234, 77, 108, 190, 179, 67, 51, 62, 105, 255, 162, 188, 228, 36, 9, 62, 154, 204, 0, 190, 92, 224, 195, 62, 24, 103, 227, 190, 105, 72, 146, 62, 199, 19, 124, 62, 100, 120, 26, 63, 202, 111, 11, 63, 64, 21, 164, 62, 136, 0, 112, 189, 11, 43, 55, 62, 15, 107, 48, 62, 123, 228, 21, 189, 235, 134, 143, 61, 253, 192, 95, 60, 42, 194, 189, 189, 206, 223, 15, 190, 164, 170, 28, 189, 119, 66, 220, 189, 136, 86, 57, 190, 164, 107, 192, 189, 156, 158, 138, 189, 67, 80, 144, 189, 166, 129, 73, 189, 147, 186, 101, 189, 229, 130, 54, 190, 86, 111, 235, 189, 39, 242, 95, 61, 111, 203, 194, 61, 235, 98, 17, 190, 135, 237, 2, 190, 167, 1, 55, 189, 204, 84, 26, 190, 66, 73, 9, 62, 50, 210, 0, 187, 70, 231, 4, 190, 253, 97, 13, 62, 2, 173, 231, 61, 17, 113, 77, 188, 135, 211, 29, 62, 17, 24, 214, 189, 245, 120, 116, 189, 73, 157, 41, 190, 201, 227, 190, 190, 195, 168, 223, 61, 163, 169, 218, 190, 191, 61, 105, 62, 250, 244, 156, 189, 26, 238, 215, 59, 195, 94, 156, 62, 4, 85, 75, 188, 100, 251, 181, 62, 143, 241, 99, 190, 246, 185, 192, 190, 168, 104, 29, 62, 155, 199, 179, 60, 254, 18, 221, 190, 104, 80, 38, 190, 29, 181, 125, 62, 148, 25, 25, 190, 249, 180, 135, 62, 137, 119, 20, 191, 183, 106, 96, 61, 194, 167, 181, 189, 247, 127, 41, 62, 57, 150, 108, 62, 103, 126, 56, 62, 1, 196, 150, 191, 166, 178, 101, 191, 25, 219, 151, 62, 79, 172, 103, 61, 199, 254, 216, 189, 19, 181, 137, 190, 170, 161, 244, 61, 175, 222, 21, 190, 103, 97, 249, 189, 166, 47, 33, 62, 82, 99, 165, 190, 114, 115, 175, 61, 87, 183, 165, 190, 191, 84, 88, 59, 119, 89, 228, 61, 139, 157, 143, 190, 107, 78, 172, 62, 83, 158, 35, 188, 134, 102, 121, 190, 116, 100, 10, 62, 68, 199, 155, 188, 89, 173, 105, 190, 91, 234, 202, 62, 116, 246, 28, 62, 71, 242, 205, 62, 19, 145, 38, 62, 123, 105, 159, 190, 121, 178, 104, 60, 72, 19, 78, 190, 214, 179, 48, 62, 44, 43, 25, 188, 147, 137, 161, 62, 212, 25, 254, 190, 119, 169, 233, 190, 216, 190, 24, 62, 223, 181, 21, 190, 129, 65, 71, 190, 72, 89, 195, 61, 23, 142, 150, 62, 238, 184, 146, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 65, 50, 186, 251, 30, 169, 190, 134, 167, 206, 61, 87, 112, 175, 62, 59, 26, 138, 62, 242, 209, 22, 62, 156, 141, 54, 190, 125, 38, 233, 62, 1, 225, 4, 62, 92, 135, 172, 62, 138, 29, 159, 60, 97, 195, 36, 189, 206, 185, 134, 62, 25, 32, 55, 190, 209, 97, 39, 62, 85, 202, 101, 62, 189, 8, 90, 62, 54, 3, 226, 61, 28, 75, 151, 60, 45, 204, 98, 190, 236, 158, 31, 62, 9, 69, 136, 62, 226, 109, 48, 190, 246, 69, 22, 62, 44, 204, 76, 62, 127, 31, 154, 62, 111, 112, 165, 188, 195, 29, 27, 190, 215, 135, 33, 190, 118, 20, 10, 190, 68, 235, 43, 62, 238, 197, 207, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 252, 1, 187, 230, 238, 232, 62, 34, 111, 130, 190, 47, 125, 123, 63, 215, 62, 96, 62, 91, 177, 126, 191, 45, 45, 6, 62, 87, 191, 85, 190, 165, 115, 89, 63, 131, 92, 150, 190, 249, 97, 151, 190, 165, 124, 150, 63, 87, 117, 210, 62, 78, 46, 201, 61, 115, 180, 131, 188, 29, 31, 109, 63, 197, 198, 86, 63, 78, 216, 87, 61, 228, 229, 157, 60, 180, 118, 105, 61, 161, 63, 37, 190, 168, 111, 157, 63, 82, 75, 176, 189, 123, 166, 210, 188, 171, 199, 235, 190, 14, 142, 132, 190, 139, 47, 103, 189, 212, 33, 178, 63, 230, 55, 30, 63, 229, 132, 11, 189, 3, 113, 197, 190, 86, 40, 1, 191, 198, 50, 241, 189, 241, 30, 165, 61, 52, 44, 130, 189, 116, 199, 142, 189, 160, 236, 18, 191, 89, 99, 129, 62, 37, 13, 103, 188, 59, 105, 61, 190, 203, 199, 175, 62, 235, 111, 0, 189, 230, 99, 58, 62, 50, 32, 174, 190, 115, 226, 169, 188, 195, 244, 34, 61, 187, 176, 6, 63, 194, 64, 27, 189, 129, 137, 19, 62, 237, 182, 29, 190, 252, 171, 10, 62, 85, 192, 255, 189, 225, 127, 41, 62, 189, 128, 198, 61, 114, 238, 44, 62, 27, 216, 66, 60, 202, 186, 148, 61, 137, 142, 6, 190, 190, 220, 251, 61, 232, 98, 38, 187, 224, 231, 94, 60, 219, 114, 170, 61, 136, 120, 17, 188, 67, 157, 71, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 189, 20, 190, 69, 34, 212, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {109, 216, 164, 191, 93, 177, 132, 190, 234, 13, 1, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {233, 175, 33, 192, 190, 61, 83, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0041/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}