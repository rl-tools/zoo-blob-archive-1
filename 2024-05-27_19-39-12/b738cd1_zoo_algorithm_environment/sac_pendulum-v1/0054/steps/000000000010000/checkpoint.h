// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {216, 75, 120, 62, 54, 39, 209, 189, 173, 119, 130, 190, 193, 21, 233, 190, 88, 2, 121, 62, 36, 217, 111, 190, 8, 105, 136, 190, 206, 51, 149, 62, 14, 144, 27, 63, 81, 30, 11, 63, 132, 44, 30, 63, 214, 114, 190, 190, 76, 45, 233, 61, 87, 43, 31, 191, 192, 151, 40, 63, 182, 77, 2, 63, 238, 1, 97, 191, 184, 53, 98, 190, 23, 151, 128, 62, 123, 10, 80, 191, 45, 80, 55, 63, 174, 13, 250, 61, 111, 201, 219, 62, 161, 178, 55, 63, 6, 232, 181, 62, 74, 12, 184, 190, 208, 60, 251, 190, 173, 107, 21, 63, 113, 176, 222, 190, 210, 183, 203, 190, 63, 105, 238, 190, 60, 60, 255, 62, 40, 48, 77, 189, 209, 21, 204, 62, 170, 15, 18, 63, 194, 163, 184, 62, 64, 202, 73, 191, 223, 129, 64, 191, 126, 234, 203, 189, 48, 120, 17, 191, 60, 152, 186, 60, 123, 196, 216, 190, 83, 0, 5, 190, 240, 78, 164, 191, 37, 185, 159, 189, 139, 144, 134, 62, 158, 39, 70, 62, 148, 195, 215, 62, 99, 146, 49, 61, 255, 204, 59, 63, 215, 66, 26, 63, 197, 248, 165, 190, 64, 173, 106, 191, 15, 36, 9, 191, 125, 250, 6, 191, 182, 41, 41, 190, 15, 240, 9, 63, 215, 35, 82, 62, 89, 44, 8, 63, 164, 217, 153, 190, 131, 154, 46, 63, 120, 60, 182, 63, 83, 72, 179, 62, 191, 204, 26, 62, 163, 185, 158, 62, 56, 217, 255, 62, 6, 216, 96, 63, 74, 50, 130, 63, 171, 69, 61, 62, 8, 39, 181, 190, 104, 107, 114, 63, 45, 252, 22, 62, 193, 176, 230, 190, 27, 199, 99, 63, 47, 197, 46, 62, 79, 231, 230, 62, 20, 111, 146, 63, 192, 199, 196, 62, 217, 161, 152, 190, 60, 2, 250, 190, 31, 100, 79, 63, 4, 205, 177, 62, 37, 217, 221, 190, 18, 59, 159, 190, 206, 231, 127, 63, 202, 242, 103, 190, 177, 154, 177, 189, 122, 37, 87, 63, 115, 94, 114, 191, 142, 198, 151, 190, 238, 60, 6, 191, 223, 255, 252, 190, 135, 72, 233, 62, 251, 73, 45, 191, 161, 238, 15, 190, 191, 41, 104, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 92, 124, 191, 237, 180, 84, 190, 30, 125, 63, 189, 248, 24, 144, 62, 187, 7, 105, 62, 123, 70, 191, 62, 53, 80, 217, 61, 55, 173, 177, 62, 71, 11, 121, 190, 186, 5, 15, 61, 179, 200, 52, 62, 95, 142, 151, 62, 86, 115, 83, 63, 185, 253, 3, 191, 183, 123, 184, 62, 10, 72, 208, 62, 214, 96, 209, 190, 22, 189, 201, 190, 163, 27, 188, 190, 188, 134, 146, 62, 51, 115, 148, 190, 135, 44, 170, 61, 163, 219, 110, 62, 88, 56, 20, 62, 27, 240, 158, 62, 80, 254, 158, 190, 65, 230, 246, 188, 77, 20, 25, 191, 28, 16, 0, 61, 122, 78, 174, 58, 51, 18, 27, 191, 173, 45, 152, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {188, 23, 219, 190, 206, 255, 44, 62, 163, 80, 195, 190, 42, 131, 161, 189, 248, 224, 172, 189, 91, 120, 146, 189, 109, 49, 56, 62, 131, 22, 155, 189, 117, 21, 116, 190, 240, 151, 60, 190, 39, 68, 81, 61, 57, 212, 196, 62, 253, 42, 97, 190, 240, 249, 197, 61, 104, 245, 7, 191, 191, 193, 147, 190, 226, 42, 8, 190, 136, 80, 228, 61, 199, 69, 37, 191, 219, 136, 190, 62, 30, 231, 2, 63, 89, 122, 167, 62, 154, 173, 213, 62, 107, 249, 185, 60, 81, 227, 209, 61, 117, 123, 200, 62, 151, 61, 1, 190, 87, 174, 239, 187, 89, 86, 73, 62, 38, 168, 222, 190, 164, 137, 9, 190, 243, 180, 211, 60, 4, 156, 142, 62, 183, 22, 17, 190, 129, 121, 131, 62, 181, 74, 196, 61, 129, 153, 43, 62, 249, 76, 253, 61, 134, 41, 171, 190, 131, 173, 18, 62, 140, 40, 154, 61, 18, 60, 117, 62, 221, 201, 16, 190, 227, 136, 157, 58, 54, 202, 110, 62, 111, 155, 73, 190, 205, 20, 111, 62, 199, 235, 223, 61, 66, 10, 135, 190, 203, 108, 50, 190, 116, 19, 134, 62, 49, 200, 46, 189, 65, 158, 32, 191, 222, 208, 70, 190, 231, 217, 13, 189, 209, 171, 254, 190, 85, 26, 165, 190, 41, 172, 73, 190, 220, 147, 141, 62, 246, 100, 0, 62, 64, 70, 165, 61, 107, 128, 193, 62, 169, 89, 174, 190, 108, 91, 96, 62, 228, 188, 139, 190, 58, 5, 202, 189, 162, 131, 193, 61, 94, 0, 225, 189, 156, 124, 109, 188, 68, 7, 154, 62, 147, 151, 8, 62, 150, 148, 144, 188, 138, 23, 5, 189, 254, 70, 29, 62, 120, 50, 49, 62, 169, 143, 89, 62, 246, 51, 188, 189, 44, 115, 217, 60, 234, 28, 171, 61, 226, 255, 242, 61, 75, 18, 168, 189, 78, 119, 250, 189, 20, 99, 84, 190, 236, 62, 132, 62, 107, 155, 251, 188, 3, 189, 124, 189, 218, 170, 168, 62, 102, 206, 158, 60, 194, 15, 45, 190, 195, 140, 215, 61, 34, 134, 32, 62, 230, 231, 146, 189, 69, 141, 147, 61, 215, 133, 36, 189, 139, 143, 146, 62, 78, 142, 146, 61, 82, 140, 11, 63, 38, 217, 182, 189, 66, 19, 46, 62, 152, 138, 128, 62, 132, 96, 189, 62, 192, 25, 59, 61, 59, 187, 23, 190, 180, 184, 216, 61, 152, 119, 134, 62, 59, 141, 29, 62, 2, 98, 176, 58, 236, 252, 155, 190, 144, 40, 250, 189, 111, 35, 115, 190, 230, 116, 25, 189, 70, 50, 16, 62, 176, 250, 237, 190, 28, 229, 200, 189, 96, 64, 224, 62, 203, 72, 41, 190, 119, 26, 39, 191, 13, 213, 115, 189, 59, 219, 217, 189, 222, 106, 29, 191, 62, 220, 101, 190, 67, 167, 50, 191, 220, 26, 24, 62, 179, 71, 174, 62, 69, 91, 166, 62, 96, 206, 103, 62, 67, 49, 177, 190, 117, 80, 115, 190, 235, 225, 65, 62, 47, 109, 151, 189, 135, 83, 36, 62, 104, 173, 168, 187, 129, 228, 3, 62, 251, 61, 29, 62, 242, 42, 162, 189, 248, 201, 142, 61, 168, 215, 218, 61, 58, 41, 8, 62, 22, 61, 40, 58, 168, 148, 221, 189, 1, 226, 7, 62, 41, 32, 76, 190, 231, 53, 231, 60, 76, 102, 24, 62, 239, 176, 69, 190, 88, 247, 249, 189, 251, 217, 101, 62, 236, 122, 151, 61, 27, 149, 186, 190, 224, 11, 135, 189, 209, 170, 190, 189, 84, 254, 86, 190, 18, 202, 128, 190, 15, 233, 120, 190, 39, 86, 130, 62, 229, 254, 93, 189, 213, 162, 182, 189, 92, 229, 137, 62, 111, 115, 138, 189, 210, 214, 23, 61, 48, 228, 160, 62, 139, 248, 74, 189, 37, 223, 42, 60, 77, 160, 254, 61, 119, 180, 43, 61, 136, 126, 230, 61, 202, 87, 134, 60, 204, 174, 150, 59, 230, 139, 81, 62, 38, 98, 98, 62, 85, 123, 177, 190, 240, 143, 99, 62, 206, 117, 84, 61, 134, 207, 22, 186, 238, 176, 140, 61, 142, 108, 147, 62, 8, 159, 8, 62, 235, 20, 26, 62, 161, 248, 56, 62, 147, 70, 6, 190, 159, 67, 192, 190, 157, 86, 247, 61, 72, 9, 183, 61, 7, 84, 196, 190, 46, 195, 13, 191, 10, 86, 68, 190, 8, 84, 252, 61, 65, 153, 26, 62, 244, 26, 208, 60, 82, 66, 22, 62, 76, 156, 75, 61, 224, 153, 79, 190, 150, 45, 87, 190, 105, 176, 176, 60, 83, 139, 155, 62, 66, 130, 181, 189, 97, 28, 67, 62, 23, 253, 131, 189, 255, 171, 135, 190, 224, 77, 16, 61, 76, 179, 1, 190, 134, 32, 100, 190, 235, 64, 145, 61, 106, 53, 209, 190, 175, 64, 234, 62, 35, 12, 54, 61, 27, 26, 157, 61, 7, 96, 157, 61, 13, 104, 217, 190, 110, 78, 137, 188, 237, 204, 2, 63, 167, 207, 107, 190, 185, 35, 6, 191, 144, 186, 61, 190, 199, 101, 139, 190, 22, 17, 119, 62, 56, 255, 23, 62, 103, 216, 15, 191, 42, 164, 2, 62, 136, 10, 157, 190, 56, 201, 192, 190, 95, 61, 141, 189, 231, 225, 86, 190, 100, 80, 119, 62, 157, 222, 171, 189, 208, 32, 192, 61, 169, 150, 9, 190, 137, 172, 241, 189, 229, 190, 204, 186, 33, 226, 180, 61, 221, 83, 74, 62, 74, 28, 46, 61, 98, 209, 70, 189, 29, 226, 213, 189, 11, 71, 252, 61, 221, 125, 109, 188, 16, 22, 88, 62, 18, 192, 144, 190, 66, 158, 66, 61, 27, 145, 127, 62, 108, 48, 209, 189, 103, 211, 113, 190, 151, 122, 14, 190, 27, 163, 223, 188, 163, 158, 105, 190, 5, 43, 17, 60, 78, 78, 207, 61, 0, 209, 222, 189, 82, 254, 134, 189, 147, 145, 150, 190, 121, 92, 138, 61, 41, 30, 132, 60, 153, 24, 188, 62, 228, 114, 146, 61, 143, 218, 28, 189, 225, 132, 3, 190, 201, 94, 172, 189, 27, 74, 27, 190, 150, 21, 13, 188, 59, 132, 255, 60, 63, 24, 0, 62, 242, 237, 108, 189, 55, 96, 224, 61, 6, 31, 251, 189, 11, 122, 51, 189, 131, 212, 255, 189, 184, 178, 79, 190, 193, 55, 31, 61, 248, 88, 148, 189, 62, 254, 205, 61, 146, 188, 15, 189, 96, 25, 146, 61, 190, 141, 34, 190, 247, 61, 227, 188, 126, 78, 105, 61, 170, 174, 187, 60, 51, 147, 116, 61, 160, 56, 12, 190, 93, 234, 42, 190, 5, 1, 217, 61, 11, 212, 170, 61, 237, 26, 218, 61, 8, 223, 165, 189, 195, 154, 126, 61, 98, 217, 159, 189, 13, 134, 39, 190, 152, 168, 218, 60, 218, 75, 73, 188, 32, 69, 64, 61, 218, 22, 164, 61, 192, 188, 173, 189, 184, 22, 92, 61, 1, 217, 84, 188, 135, 57, 17, 190, 100, 92, 245, 189, 28, 145, 160, 189, 166, 58, 173, 61, 80, 233, 56, 190, 87, 105, 75, 190, 141, 202, 29, 61, 179, 5, 103, 61, 113, 36, 237, 61, 136, 218, 12, 61, 213, 183, 78, 61, 60, 1, 70, 189, 54, 149, 13, 189, 140, 158, 37, 62, 217, 229, 241, 60, 221, 76, 1, 60, 96, 251, 81, 189, 214, 219, 148, 189, 37, 55, 146, 61, 212, 90, 177, 189, 122, 168, 24, 62, 42, 243, 5, 189, 139, 206, 57, 189, 89, 19, 5, 61, 2, 237, 57, 190, 41, 240, 242, 60, 58, 237, 3, 190, 68, 130, 109, 189, 184, 177, 26, 190, 197, 165, 144, 189, 241, 76, 131, 62, 115, 82, 1, 62, 210, 10, 149, 190, 154, 137, 238, 61, 92, 248, 58, 60, 188, 51, 186, 188, 219, 54, 222, 190, 248, 76, 58, 191, 75, 246, 13, 189, 106, 179, 70, 191, 122, 149, 227, 189, 169, 59, 153, 190, 186, 109, 64, 62, 12, 83, 132, 61, 93, 196, 113, 188, 127, 226, 244, 61, 170, 178, 247, 62, 154, 138, 20, 63, 62, 150, 189, 61, 126, 22, 142, 62, 234, 152, 13, 191, 193, 192, 220, 190, 26, 49, 229, 61, 82, 74, 205, 188, 17, 53, 143, 189, 187, 24, 219, 186, 214, 40, 225, 190, 108, 43, 226, 189, 129, 2, 116, 190, 84, 10, 80, 62, 41, 113, 142, 61, 135, 11, 1, 62, 84, 78, 156, 61, 195, 221, 238, 61, 207, 249, 170, 190, 147, 20, 12, 61, 245, 251, 65, 62, 9, 146, 159, 62, 198, 80, 105, 62, 196, 205, 21, 61, 243, 56, 191, 61, 6, 216, 25, 61, 187, 234, 129, 191, 150, 222, 201, 60, 231, 194, 12, 62, 78, 147, 176, 60, 66, 143, 111, 191, 102, 165, 74, 62, 75, 163, 159, 190, 229, 231, 83, 190, 122, 20, 48, 190, 197, 98, 181, 189, 62, 84, 231, 62, 141, 156, 31, 62, 127, 186, 161, 189, 90, 202, 176, 188, 48, 10, 249, 61, 26, 152, 175, 62, 85, 86, 167, 62, 114, 191, 6, 190, 203, 234, 95, 60, 94, 33, 237, 62, 224, 136, 35, 62, 71, 87, 6, 190, 154, 204, 180, 61, 122, 189, 30, 61, 111, 10, 164, 190, 25, 239, 125, 189, 56, 6, 50, 61, 245, 7, 217, 61, 77, 179, 78, 190, 176, 198, 4, 190, 243, 162, 144, 62, 184, 63, 16, 190, 87, 70, 170, 62, 51, 47, 218, 190, 142, 249, 236, 188, 50, 129, 106, 62, 149, 193, 221, 60, 97, 188, 76, 190, 251, 143, 12, 61, 252, 223, 21, 63, 93, 40, 107, 189, 57, 131, 129, 62, 132, 231, 135, 62, 219, 228, 33, 62, 194, 189, 5, 62, 179, 124, 74, 189, 44, 187, 215, 61, 16, 100, 234, 190, 92, 9, 32, 190, 221, 174, 240, 189, 96, 0, 135, 61, 206, 44, 205, 190, 37, 141, 199, 61, 202, 137, 93, 190, 68, 173, 191, 189, 83, 95, 187, 61, 14, 250, 186, 62, 11, 106, 95, 62, 66, 32, 66, 61, 23, 200, 117, 190, 207, 224, 50, 190, 82, 79, 215, 61, 44, 63, 10, 62, 246, 205, 23, 61, 228, 181, 211, 61, 156, 205, 62, 62, 102, 25, 124, 190, 43, 196, 12, 61, 25, 249, 233, 61, 138, 212, 56, 190, 25, 104, 163, 62, 133, 148, 96, 62, 130, 21, 110, 189, 227, 203, 69, 62, 201, 116, 149, 190, 126, 75, 108, 190, 36, 214, 72, 62, 106, 133, 139, 61, 17, 154, 196, 189, 78, 236, 100, 188, 35, 238, 172, 190, 239, 125, 169, 61, 99, 250, 73, 61, 151, 34, 96, 62, 126, 25, 7, 191, 7, 38, 174, 61, 144, 24, 66, 189, 180, 168, 172, 62, 146, 212, 175, 62, 203, 161, 30, 61, 160, 156, 155, 58, 252, 190, 173, 62, 100, 70, 124, 61, 57, 129, 244, 190, 109, 80, 63, 190, 155, 166, 236, 60, 200, 217, 242, 61, 3, 130, 191, 62, 31, 154, 141, 61, 41, 239, 18, 190, 123, 247, 131, 60, 57, 139, 189, 62, 144, 253, 125, 190, 16, 206, 154, 60, 99, 2, 222, 189, 43, 171, 210, 190, 77, 22, 239, 190, 168, 201, 68, 190, 165, 15, 138, 190, 143, 164, 154, 62, 242, 154, 252, 62, 66, 255, 148, 189, 82, 81, 204, 61, 148, 50, 100, 62, 6, 220, 145, 189, 53, 167, 31, 190, 69, 31, 237, 61, 145, 255, 254, 191, 110, 14, 136, 189, 11, 174, 77, 189, 35, 232, 231, 61, 121, 192, 7, 63, 47, 118, 114, 191, 177, 182, 177, 61, 98, 66, 41, 59, 36, 197, 39, 189, 153, 118, 86, 190, 188, 138, 174, 62, 47, 76, 163, 61, 225, 114, 183, 62, 235, 237, 123, 191, 142, 130, 136, 61, 225, 121, 34, 189, 98, 71, 129, 191, 233, 219, 165, 188, 68, 100, 20, 61, 71, 222, 106, 189, 94, 58, 82, 61, 6, 220, 140, 189, 215, 194, 129, 60, 93, 32, 203, 189, 3, 19, 34, 191, 134, 140, 196, 59, 20, 215, 48, 62, 80, 5, 133, 62, 145, 42, 184, 62, 22, 61, 41, 188, 175, 71, 79, 190, 246, 222, 140, 60, 178, 36, 195, 61, 249, 16, 32, 62, 197, 198, 206, 61, 171, 79, 23, 190, 171, 99, 142, 190, 96, 29, 232, 61, 254, 145, 145, 61, 119, 128, 157, 62, 129, 251, 142, 189, 152, 64, 92, 190, 55, 234, 42, 189, 86, 60, 15, 191, 239, 67, 17, 190, 249, 95, 180, 62, 73, 143, 102, 190, 240, 38, 158, 191, 168, 70, 170, 62, 14, 49, 185, 190, 44, 9, 217, 190, 213, 180, 104, 190, 221, 20, 147, 190, 218, 97, 14, 63, 241, 73, 224, 62, 57, 212, 8, 191, 230, 115, 145, 62, 153, 253, 172, 61, 239, 135, 81, 63, 129, 175, 165, 62, 22, 177, 167, 190, 154, 11, 56, 190, 198, 235, 89, 190, 192, 45, 157, 62, 177, 33, 3, 192, 172, 133, 201, 189, 53, 151, 28, 191, 62, 65, 217, 61, 120, 177, 194, 190, 112, 147, 14, 191, 68, 49, 44, 190, 39, 92, 125, 189, 190, 200, 16, 62, 21, 118, 16, 62, 12, 39, 20, 62, 121, 144, 181, 188, 242, 126, 140, 62, 175, 207, 97, 191, 124, 248, 164, 190, 231, 225, 5, 62, 132, 151, 141, 191, 222, 95, 153, 62, 192, 108, 178, 62, 58, 6, 165, 61, 79, 230, 235, 61, 73, 50, 89, 62, 79, 62, 16, 60, 138, 169, 208, 62, 225, 153, 126, 191, 146, 226, 14, 190, 137, 181, 17, 63, 126, 245, 73, 58, 162, 169, 130, 62, 126, 159, 12, 62, 7, 170, 193, 61, 160, 202, 183, 61, 176, 239, 143, 189, 36, 194, 249, 188, 136, 57, 164, 61, 87, 28, 34, 189, 160, 24, 36, 190, 113, 97, 141, 189, 154, 240, 205, 189, 40, 124, 141, 189, 135, 238, 51, 189, 135, 193, 88, 61, 97, 95, 250, 189, 14, 145, 22, 61, 120, 139, 31, 62, 174, 161, 150, 61, 248, 81, 226, 61, 184, 112, 29, 190, 241, 178, 0, 61, 231, 145, 9, 188, 159, 192, 10, 190, 165, 230, 64, 190, 162, 217, 23, 61, 202, 110, 7, 62, 25, 27, 2, 189, 96, 126, 205, 61, 23, 144, 204, 61, 185, 66, 170, 189, 231, 66, 8, 188, 6, 188, 0, 190, 20, 178, 196, 189, 192, 236, 106, 189, 1, 152, 130, 62, 47, 171, 249, 61, 52, 186, 3, 62, 86, 5, 128, 61, 102, 45, 150, 190, 156, 24, 54, 62, 241, 223, 25, 190, 44, 29, 147, 190, 191, 241, 132, 189, 243, 5, 66, 62, 207, 87, 175, 187, 128, 221, 255, 61, 251, 52, 186, 189, 21, 80, 154, 189, 187, 105, 146, 190, 251, 28, 209, 58, 185, 195, 254, 186, 94, 42, 249, 189, 180, 219, 194, 188, 70, 144, 179, 61, 147, 229, 84, 190, 62, 125, 136, 190, 35, 124, 251, 59, 111, 48, 56, 191, 173, 163, 135, 190, 148, 29, 142, 190, 189, 168, 176, 190, 201, 177, 190, 189, 181, 237, 33, 190, 227, 31, 113, 62, 92, 29, 108, 61, 74, 98, 155, 189, 93, 243, 146, 62, 28, 157, 129, 62, 134, 113, 79, 62, 151, 206, 24, 62, 157, 232, 197, 61, 78, 174, 133, 60, 211, 68, 46, 190, 43, 218, 122, 61, 25, 74, 109, 188, 47, 212, 221, 60, 152, 161, 181, 62, 81, 233, 90, 190, 20, 100, 73, 62, 135, 229, 129, 189, 82, 16, 29, 189, 99, 249, 129, 62, 220, 45, 93, 190, 143, 112, 128, 189, 170, 106, 196, 62, 131, 122, 8, 62, 77, 100, 198, 190, 33, 67, 118, 190, 122, 1, 10, 62, 230, 235, 225, 61, 116, 214, 6, 62, 29, 159, 130, 190, 97, 49, 221, 61, 111, 40, 33, 62, 70, 195, 150, 189, 50, 244, 125, 61, 87, 207, 170, 190, 4, 110, 136, 188, 72, 111, 5, 190, 0, 98, 42, 62, 50, 5, 246, 189, 188, 78, 16, 62, 181, 106, 227, 189, 133, 164, 124, 61, 55, 147, 164, 62, 189, 0, 32, 61, 209, 172, 128, 189, 154, 237, 214, 187, 76, 2, 57, 189, 51, 250, 233, 61, 224, 248, 26, 190, 230, 97, 235, 61, 152, 213, 27, 61, 111, 176, 28, 189, 217, 52, 157, 188, 130, 41, 82, 62, 241, 183, 80, 190, 108, 226, 29, 61, 88, 219, 231, 62, 237, 19, 80, 61, 18, 93, 191, 62, 51, 110, 227, 190, 145, 98, 136, 190, 32, 198, 167, 62, 27, 16, 29, 189, 210, 104, 228, 187, 120, 160, 213, 62, 0, 232, 33, 62, 43, 129, 122, 61, 181, 221, 126, 61, 26, 136, 135, 62, 11, 106, 111, 189, 119, 113, 129, 62, 164, 47, 140, 62, 114, 174, 101, 62, 246, 205, 230, 61, 210, 25, 150, 190, 57, 214, 61, 62, 106, 117, 141, 61, 56, 46, 17, 61, 80, 242, 93, 188, 142, 238, 109, 190, 245, 13, 157, 189, 217, 13, 87, 190, 147, 178, 5, 62, 32, 244, 150, 62, 188, 32, 124, 189, 79, 46, 68, 190, 134, 141, 213, 62, 23, 187, 151, 189, 21, 234, 15, 191, 91, 161, 140, 190, 249, 17, 188, 188, 158, 207, 167, 190, 216, 104, 212, 190, 129, 129, 24, 191, 25, 200, 244, 60, 251, 63, 140, 62, 52, 48, 99, 61, 181, 88, 219, 62, 19, 47, 76, 190, 217, 161, 77, 189, 228, 139, 60, 61, 67, 115, 111, 190, 226, 24, 140, 61, 168, 150, 223, 188, 60, 224, 242, 187, 230, 48, 193, 189, 209, 125, 27, 190, 129, 38, 140, 60, 50, 130, 59, 189, 167, 117, 18, 62, 0, 128, 55, 190, 189, 244, 166, 189, 169, 184, 158, 189, 81, 140, 211, 189, 79, 223, 20, 190, 125, 122, 22, 62, 95, 154, 102, 190, 166, 98, 34, 60, 167, 23, 65, 62, 149, 32, 27, 190, 187, 112, 243, 61, 178, 166, 67, 190, 238, 81, 109, 190, 233, 202, 101, 190, 177, 15, 131, 190, 199, 8, 3, 190, 106, 78, 62, 62, 187, 222, 237, 188, 73, 234, 177, 190, 212, 43, 55, 62, 229, 220, 16, 62, 184, 29, 224, 61, 31, 153, 203, 61, 40, 16, 128, 61, 154, 66, 144, 189, 130, 247, 120, 61, 18, 228, 156, 61, 65, 105, 98, 62, 3, 36, 37, 62, 110, 15, 77, 60, 173, 131, 121, 62, 216, 36, 156, 62, 63, 88, 212, 189, 153, 201, 250, 59, 101, 160, 135, 61, 29, 222, 36, 189, 207, 153, 132, 62, 140, 186, 160, 61, 128, 240, 23, 190, 71, 67, 14, 62, 199, 27, 30, 190, 122, 178, 43, 190, 70, 34, 47, 191, 202, 231, 100, 61, 27, 206, 90, 190, 7, 71, 124, 191, 67, 221, 96, 191, 98, 185, 133, 190, 39, 100, 216, 60, 16, 204, 136, 61, 159, 118, 110, 62, 125, 5, 85, 62, 235, 118, 144, 61, 190, 56, 15, 61, 45, 2, 116, 61, 142, 200, 192, 61, 228, 83, 226, 61, 39, 130, 186, 61, 13, 167, 194, 187, 17, 121, 116, 61, 140, 228, 11, 62, 44, 15, 244, 188, 10, 126, 130, 61, 255, 57, 35, 62, 2, 40, 27, 62, 120, 211, 184, 61, 34, 177, 201, 190, 170, 144, 27, 190, 129, 16, 233, 60, 111, 194, 122, 62, 46, 161, 160, 190, 220, 17, 153, 61, 221, 123, 158, 61, 48, 53, 64, 61, 112, 111, 1, 191, 1, 19, 115, 189, 157, 169, 133, 62, 18, 214, 93, 191, 80, 104, 86, 191, 76, 159, 247, 190, 130, 13, 71, 189, 229, 73, 154, 187, 172, 53, 180, 189, 194, 41, 92, 62, 114, 15, 52, 62, 132, 23, 2, 190, 139, 68, 22, 62, 237, 239, 254, 188, 232, 83, 139, 189, 219, 56, 239, 61, 44, 201, 130, 190, 159, 70, 174, 188, 38, 117, 224, 190, 35, 154, 19, 62, 112, 44, 161, 60, 247, 212, 8, 62, 105, 44, 235, 60, 105, 2, 34, 190, 152, 249, 62, 190, 206, 76, 226, 60, 148, 231, 106, 190, 131, 247, 3, 62, 181, 153, 21, 190, 217, 63, 206, 60, 221, 60, 250, 61, 61, 188, 16, 187, 247, 216, 149, 62, 79, 203, 195, 190, 148, 37, 200, 187, 142, 59, 184, 60, 192, 192, 114, 62, 108, 56, 73, 61, 170, 240, 58, 60, 113, 3, 22, 62, 211, 252, 146, 189, 237, 56, 39, 190, 232, 235, 16, 191, 52, 152, 250, 60, 183, 236, 0, 61, 135, 142, 194, 61, 201, 111, 136, 189, 232, 219, 32, 190, 104, 115, 132, 189, 179, 21, 51, 189, 239, 88, 41, 61, 138, 190, 208, 189, 204, 97, 33, 62, 235, 45, 57, 189, 120, 140, 168, 189, 98, 58, 39, 61, 114, 144, 42, 190, 182, 115, 91, 189, 245, 125, 147, 60, 235, 193, 13, 61, 194, 113, 162, 61, 68, 146, 52, 190, 28, 24, 212, 61, 62, 166, 96, 189, 151, 132, 241, 189, 213, 78, 223, 61, 248, 84, 204, 61, 246, 205, 18, 190, 49, 116, 9, 189, 224, 172, 12, 62, 194, 235, 50, 190, 186, 226, 183, 188, 55, 109, 204, 188, 232, 205, 193, 189, 176, 255, 24, 62, 149, 37, 5, 62, 180, 235, 150, 190, 135, 94, 116, 61, 208, 128, 231, 191, 33, 113, 128, 189, 103, 150, 70, 61, 148, 170, 143, 61, 248, 49, 185, 62, 82, 2, 75, 191, 213, 36, 175, 190, 73, 132, 201, 189, 145, 8, 31, 62, 187, 83, 14, 188, 155, 158, 140, 62, 215, 239, 61, 62, 122, 234, 138, 62, 194, 204, 43, 191, 75, 183, 136, 189, 142, 84, 205, 188, 26, 98, 103, 191, 166, 238, 90, 62, 186, 114, 147, 62, 110, 184, 167, 189, 229, 191, 130, 62, 122, 230, 85, 190, 195, 37, 113, 61, 168, 186, 36, 189, 147, 227, 235, 190, 6, 28, 158, 190, 180, 252, 37, 62, 190, 215, 102, 190, 40, 58, 85, 63, 33, 244, 93, 62, 160, 140, 17, 191, 172, 203, 143, 62, 37, 44, 73, 189, 95, 11, 171, 61, 17, 189, 137, 188, 127, 15, 138, 59, 223, 164, 177, 61, 181, 64, 100, 62, 220, 95, 67, 189, 178, 156, 136, 61, 30, 213, 137, 62, 174, 20, 24, 62, 131, 100, 75, 191, 74, 80, 203, 61, 242, 52, 145, 189, 157, 215, 220, 61, 220, 6, 161, 190, 23, 150, 8, 61, 211, 150, 94, 189, 174, 13, 101, 60, 189, 182, 174, 190, 73, 21, 145, 189, 15, 101, 112, 62, 191, 19, 34, 190, 16, 202, 152, 190, 102, 86, 212, 190, 17, 126, 179, 61, 169, 164, 32, 190, 3, 115, 85, 62, 172, 227, 0, 62, 36, 181, 50, 61, 243, 205, 239, 189, 74, 198, 89, 61, 31, 3, 96, 188, 172, 14, 159, 187, 53, 16, 227, 189, 235, 146, 17, 61, 72, 163, 92, 189, 211, 216, 194, 61, 238, 166, 116, 189, 207, 40, 16, 190, 226, 106, 56, 190, 75, 183, 217, 61, 109, 127, 39, 61, 84, 220, 68, 189, 159, 103, 20, 62, 60, 146, 101, 61, 158, 96, 6, 190, 229, 77, 13, 188, 44, 46, 115, 189, 76, 116, 92, 190, 234, 94, 14, 190, 34, 222, 163, 189, 167, 123, 0, 190, 44, 87, 78, 190, 24, 241, 47, 190, 246, 36, 102, 190, 194, 39, 193, 61, 222, 192, 27, 190, 171, 96, 55, 62, 135, 117, 149, 189, 104, 190, 4, 190, 210, 241, 84, 60, 182, 170, 48, 190, 171, 248, 238, 61, 49, 14, 165, 189, 250, 92, 153, 62, 24, 111, 215, 61, 72, 226, 139, 62, 29, 145, 11, 190, 141, 243, 139, 190, 24, 152, 152, 61, 246, 42, 172, 61, 240, 58, 101, 189, 252, 30, 210, 61, 216, 186, 5, 189, 171, 129, 131, 61, 111, 246, 200, 61, 190, 212, 178, 188, 0, 243, 142, 60, 18, 63, 93, 190, 129, 121, 11, 189, 21, 15, 86, 62, 130, 136, 230, 60, 71, 218, 166, 190, 217, 59, 189, 189, 252, 45, 194, 60, 15, 46, 220, 62, 36, 92, 7, 61, 206, 139, 180, 190, 146, 206, 91, 61, 208, 115, 54, 62, 113, 140, 44, 61, 43, 142, 164, 188, 112, 119, 158, 190, 130, 72, 97, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 121, 78, 62, 44, 146, 251, 189, 95, 131, 88, 62, 188, 38, 145, 61, 74, 125, 121, 62, 203, 14, 104, 190, 115, 195, 167, 61, 115, 50, 162, 62, 255, 27, 95, 190, 2, 229, 21, 190, 10, 55, 68, 188, 45, 254, 151, 189, 41, 116, 146, 190, 131, 104, 168, 189, 200, 205, 34, 189, 137, 186, 180, 62, 171, 2, 9, 62, 177, 209, 138, 62, 11, 252, 237, 189, 74, 187, 157, 189, 74, 125, 120, 62, 145, 26, 111, 189, 13, 15, 150, 61, 68, 78, 121, 190, 242, 65, 62, 189, 213, 115, 219, 61, 178, 126, 203, 189, 166, 2, 82, 190, 167, 122, 213, 61, 151, 72, 131, 61, 89, 233, 7, 61, 228, 182, 90, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 130, 245, 190, 118, 18, 224, 62, 85, 70, 140, 189, 254, 143, 37, 63, 101, 253, 220, 61, 134, 83, 182, 62, 248, 82, 195, 62, 230, 186, 244, 189, 193, 134, 34, 62, 221, 119, 71, 188, 202, 2, 9, 191, 170, 16, 253, 61, 226, 109, 205, 62, 46, 35, 194, 189, 176, 243, 218, 190, 44, 250, 2, 191, 138, 131, 129, 63, 234, 5, 109, 191, 116, 68, 0, 59, 127, 72, 54, 62, 98, 112, 129, 62, 192, 63, 156, 190, 45, 126, 1, 63, 223, 147, 159, 189, 8, 34, 2, 63, 223, 84, 56, 62, 100, 236, 75, 62, 132, 226, 2, 62, 11, 185, 102, 191, 8, 81, 130, 188, 50, 134, 237, 61, 60, 187, 47, 62, 76, 73, 15, 57, 169, 9, 19, 189, 71, 169, 83, 190, 68, 67, 145, 62, 138, 40, 155, 190, 224, 16, 232, 61, 174, 152, 18, 62, 74, 83, 95, 190, 56, 139, 221, 189, 83, 204, 137, 188, 52, 57, 58, 62, 91, 105, 35, 190, 122, 107, 31, 61, 199, 127, 224, 61, 90, 255, 142, 61, 153, 212, 5, 190, 150, 216, 195, 62, 242, 196, 163, 189, 251, 92, 177, 189, 187, 105, 128, 190, 139, 65, 67, 190, 187, 67, 196, 59, 163, 172, 34, 189, 219, 56, 60, 60, 204, 60, 27, 62, 7, 175, 137, 190, 126, 27, 10, 188, 109, 52, 27, 61, 54, 210, 138, 62, 230, 37, 18, 191, 88, 37, 28, 60, 108, 219, 13, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 251, 22, 190, 56, 58, 216, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {227, 198, 128, 190, 57, 102, 173, 191, 150, 12, 24, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {27, 99, 147, 191, 198, 228, 20, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0054/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}