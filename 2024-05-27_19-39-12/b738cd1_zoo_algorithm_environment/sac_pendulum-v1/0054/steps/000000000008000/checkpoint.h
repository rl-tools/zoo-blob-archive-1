// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 112, 136, 61, 200, 70, 24, 190, 113, 92, 138, 190, 227, 92, 215, 190, 90, 229, 94, 62, 56, 131, 135, 190, 2, 158, 143, 190, 123, 208, 199, 62, 165, 192, 19, 63, 250, 195, 251, 62, 97, 125, 30, 63, 167, 80, 198, 190, 86, 141, 248, 61, 165, 32, 30, 191, 211, 24, 36, 63, 128, 5, 9, 63, 97, 130, 49, 191, 121, 28, 126, 190, 22, 155, 130, 62, 223, 31, 74, 191, 162, 188, 57, 63, 245, 44, 50, 62, 203, 246, 223, 62, 70, 236, 45, 63, 239, 230, 189, 62, 101, 68, 159, 190, 71, 182, 252, 190, 59, 215, 20, 63, 139, 191, 222, 190, 82, 248, 200, 190, 30, 133, 187, 190, 44, 40, 3, 63, 6, 53, 162, 189, 226, 187, 232, 62, 108, 24, 4, 63, 141, 251, 178, 62, 37, 78, 47, 191, 20, 15, 49, 191, 148, 41, 209, 189, 178, 132, 5, 191, 205, 244, 222, 188, 146, 232, 232, 190, 77, 5, 191, 189, 231, 191, 144, 191, 43, 226, 205, 189, 185, 40, 124, 62, 44, 22, 125, 62, 44, 209, 221, 62, 143, 224, 202, 61, 102, 90, 45, 63, 236, 242, 27, 63, 109, 212, 185, 190, 19, 26, 92, 191, 84, 169, 20, 191, 115, 127, 243, 190, 25, 31, 65, 190, 174, 61, 14, 63, 35, 4, 124, 62, 169, 154, 240, 62, 130, 101, 163, 190, 93, 186, 47, 63, 241, 142, 174, 63, 200, 54, 169, 62, 114, 62, 62, 62, 239, 4, 118, 62, 169, 243, 1, 63, 122, 172, 108, 63, 197, 44, 99, 63, 74, 150, 70, 62, 44, 66, 251, 190, 78, 63, 81, 63, 229, 94, 3, 62, 161, 44, 16, 191, 33, 56, 79, 63, 16, 148, 202, 61, 41, 90, 223, 62, 217, 43, 131, 63, 207, 129, 221, 62, 98, 124, 138, 190, 164, 64, 3, 191, 34, 138, 84, 63, 4, 247, 109, 62, 49, 122, 212, 190, 86, 145, 167, 190, 39, 16, 119, 63, 26, 82, 132, 190, 88, 176, 142, 189, 43, 53, 84, 63, 136, 147, 98, 191, 237, 31, 164, 190, 111, 114, 31, 191, 79, 70, 4, 191, 236, 102, 239, 62, 40, 112, 37, 191, 88, 60, 21, 190, 249, 99, 123, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 16, 91, 191, 236, 191, 88, 190, 163, 253, 92, 189, 90, 143, 163, 62, 96, 254, 120, 62, 237, 33, 3, 63, 43, 123, 18, 62, 171, 10, 208, 62, 240, 139, 93, 190, 49, 80, 142, 61, 102, 251, 185, 61, 234, 50, 150, 62, 150, 193, 71, 63, 252, 247, 239, 190, 82, 23, 175, 62, 55, 74, 209, 62, 87, 144, 219, 190, 78, 45, 162, 190, 92, 216, 155, 190, 92, 169, 143, 62, 44, 203, 141, 190, 232, 211, 146, 61, 178, 118, 120, 62, 172, 29, 140, 61, 64, 78, 189, 62, 43, 48, 143, 190, 193, 239, 210, 188, 219, 203, 2, 191, 104, 234, 67, 61, 52, 212, 20, 61, 207, 17, 13, 191, 49, 190, 79, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 252, 145, 190, 119, 146, 33, 62, 191, 127, 200, 190, 138, 59, 184, 189, 235, 57, 27, 189, 130, 106, 97, 189, 208, 55, 122, 62, 178, 235, 140, 189, 224, 218, 119, 190, 44, 197, 48, 190, 192, 19, 176, 187, 35, 70, 201, 62, 132, 113, 40, 190, 16, 199, 199, 61, 101, 81, 208, 190, 243, 47, 146, 190, 194, 196, 3, 190, 9, 32, 36, 62, 122, 126, 29, 191, 208, 98, 185, 62, 203, 2, 3, 63, 44, 30, 175, 62, 183, 117, 212, 62, 168, 211, 171, 189, 166, 92, 138, 60, 106, 165, 199, 62, 80, 115, 240, 189, 255, 36, 86, 61, 133, 116, 102, 62, 174, 120, 201, 190, 39, 209, 14, 189, 65, 82, 202, 60, 73, 141, 51, 62, 38, 141, 23, 190, 131, 56, 132, 62, 193, 63, 218, 61, 249, 22, 23, 62, 243, 158, 248, 61, 36, 234, 182, 190, 253, 242, 12, 62, 130, 186, 156, 61, 233, 228, 117, 62, 193, 136, 11, 190, 228, 64, 9, 59, 255, 190, 70, 62, 88, 102, 84, 190, 127, 222, 97, 62, 227, 244, 218, 61, 127, 177, 137, 190, 19, 141, 59, 190, 37, 160, 120, 62, 52, 8, 11, 189, 23, 109, 6, 191, 60, 103, 81, 190, 13, 60, 93, 186, 195, 227, 128, 190, 214, 226, 126, 190, 204, 159, 28, 190, 185, 15, 139, 62, 121, 56, 215, 61, 180, 35, 151, 61, 182, 229, 190, 62, 33, 101, 193, 190, 210, 194, 55, 62, 142, 41, 32, 190, 156, 47, 158, 189, 27, 52, 141, 61, 220, 81, 178, 189, 153, 229, 171, 188, 255, 189, 148, 62, 230, 178, 5, 62, 161, 104, 2, 189, 195, 67, 71, 189, 89, 187, 23, 62, 81, 180, 68, 62, 228, 152, 87, 62, 7, 5, 188, 189, 242, 190, 111, 61, 86, 132, 146, 61, 243, 230, 230, 61, 6, 213, 225, 189, 45, 158, 218, 189, 106, 15, 83, 190, 9, 56, 145, 62, 87, 132, 2, 189, 109, 154, 168, 189, 189, 133, 163, 62, 15, 17, 127, 60, 165, 252, 34, 190, 21, 48, 178, 61, 22, 221, 16, 62, 57, 41, 80, 189, 144, 47, 161, 61, 140, 140, 111, 189, 49, 9, 160, 62, 215, 71, 165, 61, 254, 52, 183, 62, 150, 5, 247, 189, 6, 2, 50, 62, 240, 190, 125, 62, 217, 180, 175, 62, 162, 74, 88, 61, 72, 216, 54, 190, 202, 89, 194, 61, 160, 182, 123, 62, 3, 137, 19, 62, 104, 243, 70, 187, 203, 204, 156, 190, 170, 193, 194, 189, 154, 255, 142, 190, 24, 192, 213, 60, 25, 134, 8, 62, 6, 6, 235, 190, 57, 45, 248, 189, 33, 171, 212, 62, 237, 8, 44, 190, 169, 17, 12, 191, 106, 50, 155, 189, 251, 245, 121, 189, 23, 188, 149, 190, 165, 62, 224, 189, 220, 58, 34, 191, 199, 174, 19, 62, 71, 42, 139, 62, 225, 205, 166, 62, 160, 81, 93, 62, 46, 235, 201, 190, 30, 166, 138, 190, 120, 216, 43, 62, 30, 114, 131, 189, 207, 10, 28, 62, 114, 239, 98, 188, 192, 7, 17, 62, 253, 224, 26, 62, 238, 131, 132, 189, 0, 132, 156, 61, 80, 38, 188, 61, 87, 231, 254, 61, 163, 223, 22, 189, 8, 117, 194, 189, 45, 232, 191, 61, 6, 94, 54, 190, 52, 119, 244, 60, 111, 121, 42, 62, 30, 35, 81, 190, 154, 44, 240, 189, 115, 197, 97, 62, 165, 5, 127, 61, 247, 247, 158, 190, 100, 53, 128, 189, 208, 149, 178, 189, 245, 93, 97, 190, 4, 194, 145, 190, 130, 98, 111, 190, 103, 42, 133, 62, 254, 237, 71, 189, 226, 133, 215, 189, 34, 142, 134, 62, 132, 83, 140, 189, 252, 151, 70, 59, 44, 148, 90, 62, 11, 207, 55, 189, 133, 213, 12, 187, 217, 229, 28, 62, 31, 68, 46, 61, 104, 170, 23, 62, 68, 251, 131, 60, 249, 39, 126, 187, 182, 81, 90, 62, 226, 79, 113, 62, 195, 191, 174, 190, 41, 35, 96, 62, 103, 116, 110, 61, 66, 155, 100, 187, 227, 204, 5, 62, 247, 37, 147, 62, 72, 134, 234, 61, 27, 224, 28, 62, 161, 1, 53, 62, 85, 121, 214, 189, 169, 18, 180, 190, 97, 34, 221, 61, 169, 195, 244, 61, 141, 147, 202, 190, 75, 212, 20, 191, 11, 97, 74, 190, 168, 245, 2, 62, 71, 250, 4, 62, 100, 246, 81, 61, 22, 86, 42, 62, 246, 198, 82, 61, 57, 147, 84, 190, 199, 232, 73, 189, 183, 61, 134, 185, 187, 228, 173, 62, 49, 41, 172, 189, 204, 238, 89, 62, 206, 2, 104, 189, 35, 201, 122, 190, 246, 30, 156, 61, 86, 69, 156, 189, 42, 83, 32, 190, 157, 110, 232, 61, 116, 210, 184, 190, 40, 177, 182, 62, 54, 167, 11, 61, 0, 58, 170, 188, 154, 51, 247, 61, 252, 163, 203, 190, 169, 78, 29, 189, 167, 124, 7, 63, 155, 17, 117, 190, 217, 72, 216, 190, 210, 141, 21, 190, 54, 61, 66, 190, 110, 1, 178, 62, 56, 199, 76, 62, 175, 124, 4, 191, 49, 120, 24, 62, 8, 234, 34, 190, 98, 181, 138, 190, 210, 25, 70, 61, 153, 230, 82, 190, 36, 45, 32, 62, 126, 198, 47, 189, 142, 30, 155, 61, 60, 88, 38, 190, 231, 181, 134, 189, 251, 78, 130, 187, 201, 32, 152, 61, 87, 5, 77, 62, 74, 130, 52, 61, 74, 53, 202, 189, 149, 222, 218, 189, 247, 16, 159, 61, 178, 103, 138, 60, 75, 128, 49, 62, 93, 181, 132, 190, 70, 145, 121, 61, 177, 235, 134, 62, 227, 70, 227, 189, 213, 177, 145, 190, 151, 190, 34, 190, 198, 153, 176, 60, 252, 247, 37, 190, 72, 216, 212, 59, 46, 242, 41, 62, 51, 118, 241, 189, 202, 135, 121, 189, 215, 195, 132, 190, 44, 88, 51, 61, 27, 88, 68, 189, 156, 246, 189, 62, 53, 177, 41, 61, 70, 167, 54, 189, 9, 136, 47, 190, 201, 94, 172, 189, 27, 74, 27, 190, 150, 21, 13, 188, 59, 132, 255, 60, 63, 24, 0, 62, 242, 237, 108, 189, 55, 96, 224, 61, 6, 31, 251, 189, 11, 122, 51, 189, 131, 212, 255, 189, 184, 178, 79, 190, 193, 55, 31, 61, 248, 88, 148, 189, 62, 254, 205, 61, 146, 188, 15, 189, 96, 25, 146, 61, 190, 141, 34, 190, 247, 61, 227, 188, 126, 78, 105, 61, 170, 174, 187, 60, 51, 147, 116, 61, 160, 56, 12, 190, 93, 234, 42, 190, 5, 1, 217, 61, 11, 212, 170, 61, 237, 26, 218, 61, 8, 223, 165, 189, 195, 154, 126, 61, 98, 217, 159, 189, 13, 134, 39, 190, 152, 168, 218, 60, 218, 75, 73, 188, 32, 69, 64, 61, 218, 22, 164, 61, 192, 188, 173, 189, 184, 22, 92, 61, 1, 217, 84, 188, 135, 57, 17, 190, 100, 92, 245, 189, 28, 145, 160, 189, 166, 58, 173, 61, 80, 233, 56, 190, 87, 105, 75, 190, 141, 202, 29, 61, 179, 5, 103, 61, 113, 36, 237, 61, 136, 218, 12, 61, 213, 183, 78, 61, 60, 1, 70, 189, 54, 149, 13, 189, 140, 158, 37, 62, 217, 229, 241, 60, 221, 76, 1, 60, 96, 251, 81, 189, 214, 219, 148, 189, 37, 55, 146, 61, 212, 90, 177, 189, 122, 168, 24, 62, 42, 243, 5, 189, 139, 206, 57, 189, 89, 19, 5, 61, 2, 237, 57, 190, 41, 240, 242, 60, 58, 237, 3, 190, 68, 130, 109, 189, 207, 49, 147, 189, 182, 155, 190, 189, 89, 13, 129, 62, 93, 65, 6, 62, 154, 193, 151, 190, 185, 84, 0, 62, 245, 133, 11, 187, 20, 21, 220, 188, 202, 32, 225, 190, 82, 67, 18, 191, 50, 87, 99, 189, 102, 229, 21, 191, 138, 179, 194, 189, 68, 187, 49, 190, 253, 85, 48, 62, 66, 30, 225, 60, 96, 42, 50, 61, 23, 214, 204, 61, 125, 2, 251, 62, 123, 140, 250, 62, 18, 28, 163, 61, 112, 219, 124, 62, 195, 16, 5, 191, 213, 86, 193, 190, 158, 137, 40, 61, 65, 224, 34, 189, 26, 152, 204, 187, 54, 37, 174, 187, 233, 149, 225, 190, 202, 246, 249, 189, 124, 63, 15, 190, 84, 10, 80, 62, 98, 1, 140, 61, 188, 86, 17, 62, 93, 60, 72, 61, 85, 244, 0, 62, 161, 245, 169, 190, 29, 187, 30, 61, 220, 125, 84, 62, 228, 15, 70, 62, 99, 80, 71, 62, 148, 118, 255, 61, 195, 108, 219, 61, 57, 89, 172, 60, 54, 50, 80, 191, 157, 186, 20, 188, 31, 198, 34, 62, 172, 33, 186, 60, 159, 232, 134, 191, 179, 254, 88, 62, 152, 24, 169, 190, 87, 146, 47, 190, 187, 203, 36, 190, 103, 91, 188, 189, 230, 196, 0, 63, 229, 160, 65, 62, 190, 171, 143, 189, 14, 143, 175, 187, 39, 112, 17, 189, 45, 236, 166, 62, 230, 201, 160, 62, 184, 27, 2, 190, 209, 95, 67, 189, 242, 28, 156, 62, 116, 194, 7, 62, 107, 172, 233, 189, 76, 97, 221, 60, 145, 72, 111, 61, 191, 38, 136, 190, 60, 8, 84, 189, 121, 203, 130, 61, 254, 170, 162, 61, 169, 179, 93, 190, 247, 106, 8, 190, 79, 106, 140, 62, 102, 8, 101, 189, 86, 169, 156, 62, 25, 183, 55, 190, 121, 33, 32, 188, 67, 115, 109, 62, 243, 242, 148, 59, 209, 45, 65, 190, 122, 190, 203, 188, 243, 41, 2, 63, 15, 153, 38, 189, 238, 230, 94, 62, 220, 64, 156, 62, 0, 205, 50, 62, 133, 92, 215, 61, 83, 53, 15, 189, 61, 234, 79, 61, 183, 142, 242, 190, 52, 196, 9, 190, 184, 48, 253, 189, 55, 70, 139, 61, 137, 90, 148, 190, 116, 109, 183, 61, 67, 175, 93, 190, 180, 38, 188, 189, 106, 93, 174, 61, 122, 255, 176, 62, 223, 198, 89, 62, 227, 1, 72, 61, 88, 53, 116, 190, 194, 223, 59, 190, 206, 126, 245, 61, 62, 204, 20, 62, 251, 110, 174, 61, 165, 253, 208, 61, 252, 213, 28, 62, 80, 133, 126, 190, 87, 176, 11, 61, 77, 212, 245, 61, 10, 39, 67, 190, 11, 101, 167, 62, 147, 70, 69, 62, 169, 79, 91, 189, 244, 201, 79, 62, 225, 212, 141, 190, 244, 161, 54, 190, 229, 49, 62, 62, 90, 114, 100, 61, 180, 43, 151, 189, 119, 182, 45, 59, 108, 118, 177, 190, 69, 213, 149, 61, 82, 192, 176, 61, 200, 191, 76, 62, 225, 56, 11, 191, 175, 83, 227, 61, 162, 148, 93, 187, 177, 207, 170, 62, 206, 199, 142, 62, 215, 84, 2, 61, 250, 230, 164, 60, 40, 210, 158, 62, 130, 130, 254, 60, 35, 23, 198, 190, 137, 177, 27, 190, 198, 48, 65, 61, 184, 216, 179, 61, 115, 97, 157, 62, 224, 203, 176, 61, 58, 196, 220, 189, 70, 51, 16, 189, 9, 22, 200, 62, 78, 233, 88, 190, 54, 122, 140, 61, 128, 87, 183, 189, 91, 29, 174, 190, 85, 108, 185, 190, 121, 64, 98, 189, 34, 72, 98, 190, 89, 247, 158, 62, 7, 135, 222, 62, 158, 27, 195, 189, 164, 14, 181, 60, 14, 142, 116, 62, 212, 125, 103, 189, 197, 227, 66, 189, 168, 60, 250, 61, 116, 158, 216, 191, 152, 75, 101, 189, 49, 68, 215, 189, 251, 217, 198, 61, 108, 4, 226, 62, 182, 141, 89, 191, 95, 2, 181, 61, 204, 184, 148, 187, 47, 45, 15, 189, 200, 13, 33, 190, 102, 161, 169, 62, 47, 29, 192, 61, 167, 13, 146, 62, 73, 165, 114, 191, 142, 130, 136, 61, 237, 135, 231, 188, 57, 205, 52, 191, 18, 129, 240, 187, 210, 150, 241, 61, 74, 128, 139, 187, 6, 206, 140, 61, 229, 142, 79, 190, 213, 69, 242, 188, 100, 115, 61, 61, 162, 9, 23, 191, 219, 165, 165, 60, 215, 165, 58, 62, 54, 159, 119, 62, 49, 126, 242, 62, 25, 63, 87, 60, 149, 195, 104, 190, 181, 23, 90, 61, 19, 121, 221, 61, 86, 31, 3, 62, 55, 197, 208, 61, 12, 193, 46, 190, 130, 201, 143, 190, 137, 192, 234, 61, 119, 208, 218, 60, 229, 116, 139, 62, 216, 222, 184, 188, 174, 97, 100, 190, 173, 157, 70, 188, 62, 211, 255, 190, 235, 119, 76, 190, 57, 125, 180, 62, 105, 255, 97, 190, 223, 28, 152, 191, 3, 232, 174, 62, 166, 255, 193, 190, 140, 185, 202, 190, 80, 206, 105, 190, 89, 124, 158, 190, 111, 157, 18, 63, 210, 75, 231, 62, 46, 20, 6, 191, 131, 76, 153, 62, 65, 204, 205, 188, 116, 1, 75, 63, 191, 114, 151, 62, 28, 122, 166, 190, 203, 37, 8, 190, 94, 134, 233, 189, 155, 94, 161, 62, 1, 200, 232, 191, 19, 226, 213, 189, 91, 219, 18, 191, 25, 225, 194, 61, 120, 101, 155, 190, 46, 33, 15, 191, 243, 85, 47, 190, 145, 126, 151, 189, 27, 70, 47, 62, 89, 223, 3, 62, 228, 169, 8, 62, 116, 12, 61, 188, 147, 118, 125, 62, 172, 225, 100, 191, 193, 1, 38, 190, 3, 114, 12, 62, 49, 186, 139, 191, 217, 164, 155, 62, 58, 30, 168, 62, 205, 111, 153, 61, 55, 42, 185, 61, 173, 49, 90, 62, 175, 48, 212, 60, 192, 169, 196, 62, 252, 134, 121, 191, 117, 150, 3, 190, 58, 234, 13, 63, 119, 129, 157, 187, 76, 81, 109, 62, 91, 109, 17, 62, 7, 170, 193, 61, 160, 202, 183, 61, 143, 145, 133, 189, 35, 194, 247, 188, 97, 103, 170, 61, 87, 28, 34, 189, 72, 170, 33, 190, 191, 158, 124, 189, 154, 240, 205, 189, 40, 124, 141, 189, 26, 249, 42, 189, 170, 7, 110, 61, 97, 95, 250, 189, 14, 145, 22, 61, 120, 139, 31, 62, 152, 90, 160, 61, 7, 222, 236, 61, 184, 112, 29, 190, 40, 47, 9, 61, 18, 133, 0, 188, 51, 205, 4, 190, 165, 34, 60, 190, 122, 78, 44, 61, 78, 88, 12, 62, 254, 173, 215, 188, 238, 58, 216, 61, 29, 96, 212, 61, 185, 66, 170, 189, 231, 66, 8, 188, 6, 188, 0, 190, 129, 193, 196, 189, 192, 236, 106, 189, 157, 0, 69, 62, 58, 213, 12, 62, 52, 186, 3, 62, 53, 177, 82, 61, 199, 19, 140, 190, 214, 108, 69, 62, 20, 251, 24, 190, 108, 55, 92, 190, 80, 209, 160, 189, 114, 250, 59, 62, 107, 231, 73, 188, 186, 194, 68, 62, 139, 120, 53, 187, 76, 15, 99, 189, 185, 95, 80, 190, 60, 117, 147, 61, 185, 195, 254, 186, 215, 0, 180, 189, 180, 219, 194, 188, 56, 40, 155, 61, 203, 177, 1, 190, 52, 133, 90, 190, 211, 213, 44, 61, 147, 238, 234, 190, 88, 83, 35, 190, 161, 88, 33, 190, 30, 8, 173, 190, 198, 68, 203, 189, 55, 243, 35, 190, 119, 117, 110, 62, 92, 29, 108, 61, 154, 62, 238, 188, 125, 228, 93, 62, 194, 225, 128, 62, 109, 16, 83, 62, 62, 168, 18, 62, 241, 207, 206, 61, 189, 238, 101, 60, 241, 188, 44, 190, 102, 218, 133, 61, 55, 50, 87, 188, 48, 86, 3, 61, 165, 177, 173, 62, 88, 48, 94, 190, 156, 103, 45, 62, 105, 88, 119, 189, 36, 81, 54, 189, 105, 35, 134, 62, 46, 151, 99, 190, 186, 118, 135, 189, 192, 16, 198, 62, 201, 49, 0, 62, 86, 155, 188, 190, 252, 53, 117, 190, 73, 133, 2, 62, 67, 82, 255, 61, 201, 207, 242, 61, 25, 248, 131, 190, 118, 110, 240, 61, 64, 221, 30, 62, 153, 67, 181, 189, 238, 222, 118, 61, 223, 124, 172, 190, 85, 94, 80, 189, 117, 34, 1, 189, 178, 67, 38, 62, 209, 141, 241, 189, 149, 101, 20, 62, 12, 61, 0, 190, 210, 77, 13, 61, 19, 99, 158, 62, 149, 145, 42, 61, 109, 172, 146, 189, 60, 187, 118, 188, 193, 232, 100, 187, 78, 162, 2, 62, 109, 148, 19, 190, 173, 211, 232, 61, 253, 160, 243, 188, 5, 110, 31, 189, 1, 171, 195, 188, 136, 101, 79, 62, 139, 159, 84, 190, 64, 158, 60, 61, 63, 74, 226, 62, 142, 112, 97, 61, 83, 89, 193, 62, 67, 191, 202, 190, 238, 93, 70, 190, 152, 197, 160, 62, 177, 203, 101, 189, 232, 14, 162, 59, 77, 220, 218, 62, 81, 0, 20, 62, 95, 149, 124, 61, 23, 136, 133, 61, 119, 17, 254, 61, 127, 163, 142, 189, 250, 168, 128, 62, 174, 8, 139, 62, 34, 129, 79, 62, 204, 204, 241, 61, 175, 233, 162, 190, 215, 178, 53, 62, 50, 152, 107, 61, 117, 109, 247, 60, 235, 27, 83, 188, 150, 33, 113, 190, 184, 159, 106, 189, 210, 106, 104, 190, 208, 244, 47, 62, 159, 202, 148, 62, 234, 38, 139, 189, 15, 237, 73, 190, 237, 228, 204, 62, 55, 131, 154, 189, 243, 213, 237, 190, 23, 93, 148, 190, 221, 181, 41, 60, 50, 33, 204, 189, 51, 116, 172, 190, 163, 131, 13, 191, 248, 63, 187, 60, 201, 251, 108, 62, 156, 241, 69, 61, 61, 61, 216, 62, 128, 235, 107, 190, 211, 3, 146, 189, 228, 139, 60, 61, 67, 115, 111, 190, 226, 24, 140, 61, 168, 150, 223, 188, 60, 224, 242, 187, 230, 48, 193, 189, 209, 125, 27, 190, 129, 38, 140, 60, 50, 130, 59, 189, 167, 117, 18, 62, 0, 128, 55, 190, 189, 244, 166, 189, 169, 184, 158, 189, 81, 140, 211, 189, 79, 223, 20, 190, 125, 122, 22, 62, 95, 154, 102, 190, 166, 98, 34, 60, 167, 23, 65, 62, 149, 32, 27, 190, 187, 112, 243, 61, 178, 166, 67, 190, 238, 81, 109, 190, 233, 202, 101, 190, 177, 15, 131, 190, 199, 8, 3, 190, 106, 78, 62, 62, 187, 222, 237, 188, 73, 234, 177, 190, 212, 43, 55, 62, 229, 220, 16, 62, 184, 29, 224, 61, 192, 200, 37, 188, 175, 225, 112, 61, 139, 215, 158, 189, 57, 167, 149, 61, 3, 211, 75, 61, 150, 55, 95, 62, 126, 32, 7, 62, 15, 225, 186, 187, 104, 13, 128, 62, 171, 128, 156, 62, 61, 39, 206, 189, 112, 65, 173, 58, 140, 86, 234, 60, 172, 191, 87, 189, 201, 36, 135, 62, 55, 25, 133, 61, 26, 173, 16, 190, 149, 146, 3, 62, 41, 217, 71, 190, 129, 220, 32, 190, 81, 79, 24, 191, 180, 86, 18, 61, 159, 52, 62, 190, 116, 177, 46, 191, 54, 58, 80, 191, 182, 219, 68, 190, 111, 225, 151, 60, 71, 89, 63, 61, 191, 194, 101, 62, 222, 190, 77, 62, 48, 170, 194, 56, 156, 229, 130, 59, 90, 173, 136, 187, 225, 13, 208, 61, 17, 80, 153, 61, 198, 125, 153, 61, 118, 223, 10, 188, 183, 108, 154, 61, 74, 59, 1, 62, 110, 42, 10, 189, 242, 26, 24, 61, 234, 26, 25, 62, 203, 202, 12, 62, 127, 169, 194, 61, 192, 72, 148, 190, 144, 56, 18, 190, 15, 159, 225, 61, 103, 57, 134, 62, 237, 131, 192, 190, 34, 29, 176, 61, 16, 107, 112, 61, 71, 252, 240, 60, 41, 219, 209, 190, 7, 1, 187, 189, 215, 233, 138, 62, 116, 184, 12, 191, 231, 196, 53, 191, 244, 127, 229, 190, 220, 53, 89, 189, 60, 93, 177, 188, 32, 114, 192, 189, 192, 31, 93, 62, 217, 112, 32, 62, 205, 255, 213, 189, 38, 125, 160, 60, 53, 127, 21, 189, 52, 75, 45, 60, 58, 207, 193, 61, 98, 128, 86, 190, 80, 153, 10, 188, 71, 106, 213, 190, 160, 3, 53, 62, 227, 149, 124, 60, 137, 27, 9, 62, 179, 144, 249, 60, 129, 191, 90, 190, 13, 245, 231, 189, 113, 79, 173, 60, 212, 72, 177, 189, 25, 97, 27, 62, 29, 13, 167, 189, 207, 170, 140, 60, 47, 242, 58, 62, 57, 201, 196, 188, 166, 113, 16, 62, 138, 24, 172, 190, 201, 200, 100, 189, 66, 77, 224, 61, 58, 231, 145, 62, 138, 215, 147, 188, 185, 35, 153, 61, 26, 154, 220, 61, 149, 185, 160, 189, 0, 178, 46, 190, 239, 13, 15, 191, 175, 251, 58, 61, 183, 236, 0, 61, 135, 142, 194, 61, 201, 111, 136, 189, 232, 219, 32, 190, 104, 115, 132, 189, 179, 21, 51, 189, 239, 88, 41, 61, 138, 190, 208, 189, 204, 97, 33, 62, 235, 45, 57, 189, 120, 140, 168, 189, 98, 58, 39, 61, 114, 144, 42, 190, 182, 115, 91, 189, 245, 125, 147, 60, 235, 193, 13, 61, 194, 113, 162, 61, 68, 146, 52, 190, 28, 24, 212, 61, 62, 166, 96, 189, 151, 132, 241, 189, 213, 78, 223, 61, 248, 84, 204, 61, 246, 205, 18, 190, 49, 116, 9, 189, 224, 172, 12, 62, 194, 235, 50, 190, 186, 226, 183, 188, 55, 109, 204, 188, 232, 205, 193, 189, 176, 255, 24, 62, 149, 37, 5, 62, 182, 98, 50, 190, 53, 144, 66, 61, 167, 225, 206, 191, 86, 129, 81, 189, 177, 84, 154, 60, 150, 107, 166, 61, 58, 149, 156, 62, 114, 84, 65, 191, 124, 214, 167, 190, 81, 46, 182, 189, 93, 212, 12, 62, 121, 230, 226, 185, 66, 31, 141, 62, 233, 208, 63, 62, 125, 147, 127, 62, 115, 148, 50, 191, 82, 138, 242, 60, 151, 33, 160, 187, 235, 68, 47, 191, 4, 90, 103, 62, 139, 50, 191, 62, 218, 31, 106, 189, 97, 176, 129, 62, 186, 60, 170, 190, 8, 109, 155, 60, 103, 111, 255, 61, 254, 222, 209, 190, 151, 43, 139, 190, 67, 7, 78, 62, 87, 242, 82, 190, 96, 249, 107, 63, 194, 86, 103, 62, 237, 57, 4, 191, 166, 67, 72, 62, 176, 115, 205, 189, 222, 35, 79, 61, 201, 76, 137, 189, 172, 63, 95, 188, 240, 33, 10, 61, 142, 196, 99, 62, 8, 45, 82, 190, 174, 75, 194, 60, 178, 54, 126, 62, 230, 148, 68, 62, 37, 23, 71, 191, 117, 50, 153, 60, 249, 54, 120, 189, 189, 145, 3, 62, 123, 253, 174, 190, 87, 41, 59, 189, 125, 128, 231, 189, 162, 153, 10, 189, 13, 147, 109, 190, 129, 96, 185, 189, 241, 83, 137, 62, 160, 123, 208, 60, 124, 151, 232, 189, 96, 120, 172, 190, 145, 243, 185, 59, 2, 95, 126, 190, 187, 15, 82, 62, 171, 86, 238, 61, 173, 42, 91, 58, 248, 143, 51, 190, 74, 198, 89, 61, 31, 3, 96, 188, 172, 14, 159, 187, 53, 16, 227, 189, 235, 146, 17, 61, 72, 163, 92, 189, 211, 216, 194, 61, 238, 166, 116, 189, 207, 40, 16, 190, 226, 106, 56, 190, 75, 183, 217, 61, 109, 127, 39, 61, 84, 220, 68, 189, 159, 103, 20, 62, 60, 146, 101, 61, 158, 96, 6, 190, 229, 77, 13, 188, 44, 46, 115, 189, 76, 116, 92, 190, 234, 94, 14, 190, 34, 222, 163, 189, 167, 123, 0, 190, 44, 87, 78, 190, 24, 241, 47, 190, 246, 36, 102, 190, 194, 39, 193, 61, 222, 192, 27, 190, 171, 96, 55, 62, 135, 117, 149, 189, 104, 190, 4, 190, 210, 241, 84, 60, 182, 170, 48, 190, 77, 102, 28, 61, 251, 2, 173, 189, 91, 192, 157, 62, 255, 202, 186, 61, 29, 49, 142, 62, 65, 150, 15, 190, 90, 105, 138, 190, 226, 113, 165, 61, 110, 154, 175, 61, 94, 217, 74, 189, 137, 184, 182, 61, 237, 129, 30, 189, 200, 84, 5, 61, 207, 89, 193, 61, 242, 136, 34, 189, 126, 222, 181, 60, 197, 192, 89, 190, 185, 109, 46, 189, 27, 109, 92, 62, 187, 31, 69, 60, 139, 54, 176, 190, 133, 52, 171, 189, 180, 24, 251, 59, 109, 53, 232, 62, 81, 35, 218, 60, 73, 12, 186, 190, 208, 236, 118, 61, 235, 243, 47, 62, 41, 153, 206, 60, 114, 5, 120, 188, 240, 19, 159, 190, 199, 131, 73, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 99, 64, 62, 108, 69, 245, 189, 238, 248, 82, 62, 90, 225, 215, 61, 170, 235, 94, 62, 159, 226, 72, 190, 146, 129, 51, 61, 208, 121, 168, 62, 255, 27, 95, 190, 2, 229, 21, 190, 53, 168, 145, 60, 183, 1, 140, 189, 242, 182, 115, 190, 234, 50, 120, 189, 235, 37, 88, 60, 38, 221, 173, 62, 76, 195, 0, 62, 254, 163, 127, 62, 177, 240, 230, 189, 66, 122, 11, 189, 89, 14, 104, 62, 18, 162, 79, 189, 86, 78, 192, 61, 68, 78, 121, 190, 73, 194, 50, 189, 226, 32, 24, 62, 185, 168, 133, 189, 166, 2, 82, 190, 62, 252, 195, 61, 35, 71, 160, 61, 89, 233, 7, 61, 29, 115, 63, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 180, 237, 190, 114, 170, 204, 62, 31, 52, 144, 189, 141, 108, 14, 63, 18, 195, 4, 62, 211, 138, 194, 62, 135, 189, 154, 62, 187, 53, 9, 190, 193, 134, 34, 62, 221, 119, 71, 188, 10, 60, 199, 190, 108, 69, 30, 62, 126, 97, 155, 62, 10, 43, 208, 189, 222, 207, 199, 190, 195, 135, 242, 190, 70, 6, 132, 63, 110, 173, 103, 191, 211, 89, 145, 59, 87, 66, 248, 61, 49, 103, 136, 62, 141, 183, 156, 190, 154, 80, 242, 62, 223, 147, 159, 189, 82, 106, 233, 62, 28, 252, 8, 62, 78, 143, 25, 62, 132, 226, 2, 62, 4, 210, 88, 191, 157, 173, 68, 188, 50, 134, 237, 61, 22, 247, 88, 62, 202, 96, 106, 59, 249, 99, 25, 189, 62, 164, 86, 190, 197, 216, 123, 62, 243, 173, 146, 190, 184, 99, 8, 62, 184, 122, 29, 62, 2, 87, 117, 190, 56, 139, 221, 189, 83, 204, 137, 188, 59, 87, 93, 62, 171, 120, 34, 190, 121, 17, 14, 61, 46, 201, 208, 61, 248, 247, 135, 61, 252, 107, 24, 189, 198, 90, 201, 62, 187, 145, 17, 189, 156, 216, 178, 189, 187, 54, 90, 190, 222, 253, 77, 190, 9, 114, 22, 61, 68, 201, 34, 189, 219, 56, 60, 60, 82, 11, 238, 61, 140, 22, 134, 190, 227, 225, 100, 189, 109, 52, 27, 61, 121, 94, 149, 62, 109, 0, 16, 191, 88, 37, 28, 60, 20, 0, 213, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 16, 17, 190, 131, 176, 206, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {105, 3, 255, 190, 86, 118, 211, 62, 56, 72, 156, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {90, 205, 229, 63, 195, 67, 227, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0054/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}