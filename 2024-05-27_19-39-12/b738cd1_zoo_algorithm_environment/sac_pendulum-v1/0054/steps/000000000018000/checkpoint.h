// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 130, 159, 62, 57, 214, 90, 187, 48, 71, 123, 190, 128, 189, 228, 190, 136, 240, 164, 62, 156, 40, 134, 190, 5, 80, 208, 190, 222, 141, 251, 62, 138, 69, 17, 63, 29, 253, 0, 63, 79, 117, 36, 63, 212, 247, 180, 190, 83, 113, 226, 61, 34, 16, 229, 190, 252, 253, 32, 63, 243, 248, 251, 62, 3, 70, 91, 191, 158, 57, 119, 190, 12, 68, 99, 62, 73, 233, 102, 191, 143, 72, 54, 63, 50, 255, 165, 61, 13, 30, 79, 63, 106, 36, 30, 63, 244, 251, 187, 62, 62, 9, 197, 190, 241, 166, 229, 190, 14, 144, 15, 63, 1, 44, 146, 190, 90, 62, 215, 190, 234, 145, 35, 191, 101, 178, 210, 62, 229, 49, 237, 60, 106, 21, 193, 62, 140, 174, 244, 62, 193, 31, 173, 62, 3, 125, 125, 191, 193, 208, 68, 191, 143, 203, 14, 190, 238, 121, 13, 191, 161, 167, 129, 61, 162, 61, 202, 190, 84, 100, 26, 191, 201, 138, 166, 191, 184, 162, 77, 190, 22, 112, 140, 62, 17, 85, 182, 62, 178, 177, 212, 62, 31, 60, 229, 58, 227, 142, 121, 63, 246, 101, 11, 63, 32, 184, 254, 189, 84, 16, 152, 191, 133, 143, 8, 191, 122, 191, 27, 191, 66, 246, 231, 189, 96, 103, 5, 63, 238, 90, 75, 62, 75, 205, 234, 62, 249, 107, 121, 190, 58, 192, 59, 63, 88, 204, 178, 63, 208, 196, 192, 62, 79, 202, 13, 62, 174, 15, 30, 62, 94, 35, 245, 62, 150, 181, 83, 63, 18, 165, 142, 63, 222, 208, 96, 62, 25, 110, 0, 191, 78, 209, 136, 63, 80, 136, 32, 62, 117, 173, 241, 190, 142, 11, 128, 63, 149, 123, 80, 62, 30, 100, 9, 63, 130, 177, 152, 63, 39, 212, 169, 62, 38, 108, 227, 190, 151, 84, 160, 190, 7, 13, 61, 63, 115, 177, 218, 62, 85, 77, 9, 191, 60, 42, 141, 190, 204, 214, 129, 63, 23, 133, 249, 189, 153, 66, 8, 189, 227, 195, 86, 63, 147, 100, 128, 191, 208, 38, 103, 190, 254, 135, 208, 190, 138, 183, 232, 190, 90, 48, 228, 62, 212, 57, 6, 191, 194, 15, 147, 190, 45, 111, 46, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 89, 140, 191, 53, 34, 255, 189, 53, 9, 189, 188, 60, 105, 117, 62, 170, 99, 79, 62, 19, 62, 169, 62, 148, 69, 244, 60, 217, 27, 160, 62, 131, 36, 122, 190, 243, 245, 147, 188, 216, 246, 191, 62, 112, 195, 112, 62, 78, 159, 88, 63, 178, 139, 28, 191, 144, 49, 97, 62, 180, 8, 223, 62, 200, 175, 19, 191, 121, 184, 38, 190, 115, 78, 215, 190, 61, 38, 135, 62, 97, 68, 150, 190, 9, 99, 100, 61, 223, 139, 32, 62, 185, 230, 43, 62, 251, 220, 182, 62, 185, 138, 161, 190, 75, 208, 93, 190, 51, 247, 44, 191, 169, 120, 120, 189, 19, 137, 48, 189, 9, 212, 37, 191, 169, 139, 127, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 130, 50, 191, 211, 169, 20, 62, 41, 123, 2, 191, 249, 82, 93, 189, 118, 171, 3, 188, 244, 68, 53, 60, 234, 40, 118, 62, 3, 156, 219, 189, 112, 187, 29, 190, 230, 220, 248, 189, 102, 139, 171, 189, 252, 124, 177, 62, 240, 239, 251, 190, 235, 31, 151, 61, 215, 80, 13, 191, 182, 160, 146, 190, 125, 89, 118, 190, 135, 247, 52, 61, 190, 226, 80, 191, 113, 49, 181, 62, 245, 211, 197, 62, 215, 228, 142, 62, 97, 128, 213, 62, 171, 90, 96, 190, 234, 234, 100, 189, 223, 198, 67, 62, 27, 206, 56, 190, 239, 118, 28, 190, 187, 154, 122, 62, 70, 202, 195, 190, 13, 10, 238, 190, 229, 142, 111, 189, 95, 117, 211, 62, 65, 11, 37, 190, 61, 218, 108, 62, 202, 108, 246, 61, 134, 79, 6, 62, 136, 207, 43, 62, 166, 129, 185, 190, 139, 20, 35, 62, 119, 2, 59, 61, 123, 56, 124, 62, 47, 41, 48, 190, 80, 252, 174, 61, 42, 202, 134, 62, 22, 210, 71, 190, 143, 33, 91, 62, 77, 162, 21, 62, 90, 231, 175, 190, 180, 101, 26, 190, 220, 248, 115, 62, 226, 211, 61, 59, 119, 209, 32, 191, 57, 157, 39, 190, 180, 14, 151, 59, 87, 150, 55, 191, 133, 105, 11, 191, 212, 139, 53, 190, 239, 12, 126, 62, 28, 228, 12, 62, 10, 152, 11, 62, 46, 184, 208, 62, 123, 91, 178, 190, 4, 255, 130, 62, 87, 100, 6, 191, 207, 253, 248, 189, 66, 246, 214, 61, 82, 41, 4, 190, 64, 119, 92, 59, 207, 189, 172, 62, 237, 177, 11, 62, 197, 195, 89, 187, 166, 160, 84, 188, 84, 32, 38, 62, 108, 14, 109, 62, 63, 159, 88, 62, 134, 140, 26, 190, 180, 208, 83, 189, 5, 62, 181, 61, 164, 43, 11, 62, 6, 106, 245, 188, 154, 181, 39, 190, 4, 166, 124, 190, 124, 8, 104, 62, 173, 100, 205, 188, 135, 248, 115, 189, 105, 73, 174, 62, 127, 179, 134, 61, 204, 202, 240, 189, 183, 62, 197, 61, 66, 180, 18, 62, 236, 160, 79, 190, 62, 23, 145, 61, 176, 109, 12, 188, 44, 79, 125, 62, 20, 32, 91, 61, 250, 173, 59, 63, 175, 196, 159, 189, 27, 151, 66, 62, 176, 200, 80, 62, 91, 92, 199, 62, 212, 189, 140, 60, 25, 13, 249, 189, 112, 109, 5, 62, 248, 50, 131, 62, 155, 249, 208, 61, 34, 240, 197, 60, 176, 213, 142, 190, 98, 90, 40, 190, 213, 196, 82, 190, 234, 163, 42, 190, 107, 141, 24, 62, 106, 150, 4, 191, 60, 49, 205, 189, 139, 254, 221, 62, 199, 170, 64, 190, 6, 34, 137, 191, 8, 49, 132, 188, 104, 17, 130, 190, 19, 169, 89, 191, 236, 231, 210, 190, 49, 188, 135, 191, 19, 172, 40, 62, 133, 138, 188, 62, 6, 106, 161, 62, 141, 47, 82, 62, 143, 153, 171, 190, 219, 152, 84, 190, 251, 6, 58, 62, 196, 47, 25, 190, 164, 232, 6, 62, 248, 171, 0, 188, 17, 66, 218, 61, 10, 49, 78, 62, 104, 150, 184, 189, 66, 212, 44, 61, 166, 177, 179, 61, 28, 224, 22, 62, 90, 103, 229, 189, 247, 82, 168, 189, 200, 221, 170, 61, 230, 233, 151, 190, 123, 86, 202, 60, 133, 145, 19, 62, 47, 82, 80, 190, 242, 106, 255, 189, 105, 165, 69, 62, 15, 220, 182, 61, 101, 158, 220, 190, 210, 113, 155, 189, 53, 30, 203, 189, 32, 148, 192, 190, 166, 73, 215, 190, 141, 188, 159, 190, 122, 7, 108, 62, 88, 113, 216, 189, 57, 161, 78, 189, 93, 135, 162, 62, 22, 213, 147, 189, 221, 203, 53, 61, 154, 239, 236, 62, 209, 108, 78, 189, 226, 23, 39, 61, 158, 144, 2, 62, 50, 101, 251, 60, 152, 3, 204, 61, 22, 11, 145, 60, 242, 162, 209, 60, 53, 140, 74, 62, 19, 133, 98, 62, 225, 192, 181, 190, 101, 139, 134, 62, 65, 152, 1, 62, 209, 158, 142, 60, 247, 37, 92, 61, 188, 125, 150, 62, 249, 239, 21, 62, 144, 100, 71, 62, 131, 187, 86, 62, 120, 55, 196, 189, 168, 234, 195, 190, 14, 185, 37, 62, 170, 146, 146, 61, 79, 76, 201, 190, 57, 40, 25, 191, 23, 9, 14, 190, 75, 209, 20, 62, 225, 118, 63, 62, 29, 234, 255, 59, 171, 22, 2, 62, 91, 209, 181, 61, 113, 47, 32, 190, 71, 54, 52, 191, 118, 130, 44, 188, 250, 138, 162, 62, 9, 196, 64, 61, 90, 22, 51, 62, 170, 198, 245, 189, 177, 207, 140, 190, 190, 168, 245, 60, 240, 251, 28, 190, 194, 128, 134, 190, 114, 75, 19, 62, 208, 174, 209, 190, 26, 61, 11, 63, 197, 97, 94, 189, 211, 127, 26, 62, 11, 29, 22, 61, 224, 238, 221, 190, 56, 187, 41, 189, 81, 154, 9, 63, 3, 101, 164, 189, 199, 230, 109, 191, 56, 178, 51, 190, 112, 186, 212, 190, 38, 82, 211, 62, 47, 126, 134, 62, 248, 106, 70, 191, 57, 242, 14, 62, 101, 140, 199, 190, 12, 127, 28, 191, 210, 187, 32, 190, 182, 39, 37, 190, 195, 61, 141, 62, 11, 139, 61, 190, 159, 129, 176, 62, 62, 184, 31, 190, 217, 23, 114, 190, 49, 152, 195, 60, 21, 66, 232, 61, 226, 147, 92, 62, 97, 72, 167, 60, 52, 102, 22, 190, 162, 252, 28, 190, 252, 167, 43, 62, 119, 91, 129, 189, 226, 153, 118, 62, 175, 27, 129, 190, 234, 133, 68, 61, 167, 47, 119, 62, 11, 155, 230, 189, 199, 213, 118, 190, 203, 218, 44, 190, 253, 69, 69, 190, 69, 114, 169, 190, 246, 134, 2, 189, 198, 157, 169, 60, 65, 57, 140, 190, 145, 81, 250, 189, 136, 114, 244, 190, 111, 134, 119, 61, 164, 199, 19, 190, 85, 223, 193, 62, 106, 143, 236, 61, 209, 6, 167, 189, 153, 39, 11, 189, 201, 94, 172, 189, 27, 74, 27, 190, 150, 21, 13, 188, 59, 132, 255, 60, 63, 24, 0, 62, 242, 237, 108, 189, 55, 96, 224, 61, 6, 31, 251, 189, 11, 122, 51, 189, 131, 212, 255, 189, 184, 178, 79, 190, 193, 55, 31, 61, 248, 88, 148, 189, 62, 254, 205, 61, 146, 188, 15, 189, 96, 25, 146, 61, 190, 141, 34, 190, 247, 61, 227, 188, 126, 78, 105, 61, 170, 174, 187, 60, 51, 147, 116, 61, 160, 56, 12, 190, 93, 234, 42, 190, 5, 1, 217, 61, 11, 212, 170, 61, 237, 26, 218, 61, 8, 223, 165, 189, 195, 154, 126, 61, 98, 217, 159, 189, 13, 134, 39, 190, 152, 168, 218, 60, 218, 75, 73, 188, 32, 69, 64, 61, 218, 22, 164, 61, 192, 188, 173, 189, 184, 22, 92, 61, 1, 217, 84, 188, 135, 57, 17, 190, 100, 92, 245, 189, 28, 145, 160, 189, 166, 58, 173, 61, 80, 233, 56, 190, 87, 105, 75, 190, 141, 202, 29, 61, 179, 5, 103, 61, 113, 36, 237, 61, 136, 218, 12, 61, 213, 183, 78, 61, 60, 1, 70, 189, 54, 149, 13, 189, 140, 158, 37, 62, 217, 229, 241, 60, 221, 76, 1, 60, 96, 251, 81, 189, 214, 219, 148, 189, 37, 55, 146, 61, 212, 90, 177, 189, 122, 168, 24, 62, 42, 243, 5, 189, 139, 206, 57, 189, 89, 19, 5, 61, 2, 237, 57, 190, 41, 240, 242, 60, 58, 237, 3, 190, 68, 130, 109, 189, 191, 139, 69, 190, 175, 102, 144, 189, 56, 0, 116, 62, 119, 85, 57, 62, 80, 34, 117, 190, 111, 156, 36, 62, 55, 6, 8, 61, 47, 223, 190, 60, 200, 226, 203, 190, 21, 144, 116, 191, 254, 184, 177, 188, 15, 167, 123, 191, 170, 23, 106, 190, 155, 125, 192, 190, 255, 177, 102, 62, 172, 70, 174, 61, 21, 113, 133, 190, 10, 249, 255, 61, 155, 43, 212, 62, 188, 115, 21, 63, 78, 248, 213, 61, 147, 162, 148, 62, 1, 169, 37, 191, 28, 119, 235, 190, 158, 87, 167, 61, 210, 179, 152, 188, 51, 106, 139, 190, 7, 201, 228, 60, 115, 39, 191, 190, 52, 108, 233, 189, 115, 229, 169, 190, 52, 210, 64, 62, 237, 92, 153, 62, 104, 107, 246, 61, 249, 228, 34, 62, 183, 130, 162, 61, 26, 115, 177, 190, 43, 99, 98, 60, 121, 169, 57, 62, 97, 59, 188, 62, 19, 199, 129, 62, 125, 26, 238, 61, 4, 183, 249, 61, 41, 110, 173, 189, 24, 249, 119, 191, 58, 184, 39, 189, 95, 254, 2, 62, 243, 5, 5, 61, 218, 80, 137, 191, 68, 190, 45, 62, 73, 206, 50, 190, 47, 188, 97, 190, 212, 179, 40, 190, 122, 138, 82, 189, 145, 145, 7, 63, 209, 23, 51, 62, 2, 87, 129, 189, 149, 98, 44, 189, 93, 41, 45, 62, 199, 12, 194, 62, 249, 233, 168, 62, 190, 229, 243, 189, 188, 8, 49, 61, 118, 135, 71, 63, 115, 186, 140, 62, 85, 64, 44, 190, 241, 89, 8, 62, 65, 131, 54, 186, 123, 48, 0, 191, 240, 75, 164, 189, 201, 155, 148, 59, 161, 124, 12, 62, 206, 75, 97, 190, 29, 112, 247, 188, 245, 228, 119, 62, 115, 162, 0, 190, 47, 174, 218, 62, 67, 168, 46, 191, 101, 221, 174, 189, 158, 45, 85, 62, 80, 59, 194, 61, 7, 146, 119, 190, 52, 211, 228, 61, 157, 220, 23, 63, 3, 181, 196, 189, 117, 247, 44, 62, 74, 112, 159, 62, 53, 112, 58, 62, 53, 78, 8, 62, 47, 98, 171, 189, 225, 178, 135, 62, 87, 208, 60, 191, 147, 228, 148, 190, 138, 16, 7, 190, 166, 42, 31, 62, 3, 179, 25, 191, 179, 62, 16, 62, 220, 214, 123, 190, 226, 80, 249, 189, 73, 239, 133, 61, 196, 241, 154, 62, 25, 156, 64, 62, 232, 29, 69, 60, 238, 201, 92, 190, 208, 6, 73, 190, 178, 166, 162, 61, 146, 27, 71, 61, 115, 62, 156, 61, 161, 185, 17, 62, 131, 65, 157, 62, 11, 248, 156, 190, 53, 49, 250, 60, 188, 44, 66, 62, 88, 200, 55, 190, 124, 70, 144, 62, 131, 128, 136, 62, 176, 194, 212, 189, 165, 140, 41, 62, 14, 205, 176, 190, 83, 209, 83, 190, 76, 67, 135, 62, 7, 241, 94, 61, 246, 12, 132, 189, 168, 14, 238, 189, 33, 2, 221, 190, 203, 148, 130, 61, 126, 101, 153, 61, 36, 216, 178, 62, 144, 172, 212, 190, 151, 243, 201, 61, 70, 26, 221, 189, 38, 44, 176, 62, 135, 239, 146, 62, 182, 132, 7, 61, 185, 169, 206, 60, 132, 48, 175, 62, 106, 179, 198, 60, 109, 96, 206, 190, 73, 212, 62, 190, 30, 62, 60, 59, 62, 35, 128, 62, 154, 254, 193, 62, 227, 167, 168, 61, 128, 195, 217, 189, 196, 23, 192, 61, 135, 20, 192, 62, 142, 123, 164, 190, 25, 49, 92, 62, 105, 184, 207, 189, 31, 151, 182, 190, 7, 132, 212, 190, 80, 127, 20, 190, 50, 140, 13, 190, 51, 1, 157, 62, 190, 65, 29, 63, 234, 92, 43, 190, 231, 31, 82, 61, 211, 106, 79, 62, 36, 250, 129, 188, 185, 249, 160, 190, 71, 232, 1, 62, 249, 197, 21, 192, 25, 101, 45, 189, 2, 169, 187, 61, 28, 229, 193, 61, 246, 187, 52, 63, 97, 38, 152, 191, 228, 136, 0, 62, 161, 252, 199, 60, 212, 94, 133, 189, 39, 62, 21, 191, 152, 159, 186, 62, 49, 148, 179, 61, 27, 222, 245, 62, 123, 62, 159, 191, 142, 130, 136, 61, 202, 215, 28, 189, 189, 108, 150, 191, 190, 231, 17, 188, 62, 78, 254, 60, 155, 234, 93, 190, 173, 38, 237, 60, 161, 10, 22, 190, 86, 252, 222, 189, 96, 63, 42, 190, 36, 93, 138, 190, 181, 193, 201, 188, 2, 253, 250, 61, 56, 122, 43, 62, 155, 172, 243, 62, 71, 24, 79, 189, 214, 255, 131, 188, 139, 104, 122, 62, 47, 226, 148, 61, 240, 26, 91, 62, 75, 49, 149, 61, 74, 245, 64, 190, 245, 67, 147, 190, 198, 86, 206, 61, 248, 112, 248, 188, 107, 11, 141, 62, 215, 254, 5, 62, 24, 42, 76, 190, 242, 230, 85, 61, 215, 116, 167, 190, 217, 71, 11, 190, 212, 54, 173, 62, 104, 143, 147, 190, 33, 121, 199, 191, 95, 31, 161, 62, 78, 130, 129, 190, 228, 7, 0, 191, 104, 16, 96, 190, 54, 150, 146, 190, 86, 13, 23, 63, 123, 39, 219, 62, 201, 148, 15, 191, 99, 218, 141, 62, 202, 192, 73, 61, 31, 42, 79, 63, 231, 37, 143, 62, 218, 139, 161, 190, 18, 13, 109, 189, 163, 164, 182, 190, 40, 239, 163, 62, 20, 40, 21, 192, 76, 125, 176, 189, 160, 127, 7, 191, 85, 230, 246, 61, 239, 152, 143, 190, 180, 202, 19, 191, 206, 145, 206, 189, 44, 254, 194, 188, 140, 174, 224, 61, 150, 65, 214, 61, 82, 145, 239, 61, 79, 159, 54, 188, 111, 80, 153, 62, 251, 29, 100, 191, 200, 2, 30, 191, 235, 177, 246, 61, 39, 68, 112, 191, 210, 110, 141, 62, 221, 227, 135, 62, 49, 1, 79, 61, 65, 162, 222, 61, 6, 89, 180, 61, 11, 62, 1, 61, 95, 42, 108, 62, 69, 217, 108, 191, 92, 135, 33, 190, 193, 200, 24, 63, 54, 222, 63, 59, 38, 243, 138, 62, 225, 7, 4, 62, 7, 170, 193, 61, 160, 202, 183, 61, 176, 239, 143, 189, 36, 194, 249, 188, 136, 57, 164, 61, 87, 28, 34, 189, 160, 24, 36, 190, 113, 97, 141, 189, 154, 240, 205, 189, 40, 124, 141, 189, 135, 238, 51, 189, 135, 193, 88, 61, 97, 95, 250, 189, 14, 145, 22, 61, 120, 139, 31, 62, 174, 161, 150, 61, 248, 81, 226, 61, 184, 112, 29, 190, 241, 178, 0, 61, 231, 145, 9, 188, 159, 192, 10, 190, 165, 230, 64, 190, 162, 217, 23, 61, 202, 110, 7, 62, 25, 27, 2, 189, 96, 126, 205, 61, 23, 144, 204, 61, 185, 66, 170, 189, 231, 66, 8, 188, 6, 188, 0, 190, 20, 178, 196, 189, 192, 236, 106, 189, 11, 40, 188, 62, 228, 233, 249, 61, 52, 186, 3, 62, 17, 214, 199, 61, 237, 135, 182, 190, 130, 70, 100, 62, 200, 118, 123, 190, 160, 234, 154, 190, 139, 117, 149, 189, 231, 57, 95, 62, 5, 9, 4, 59, 225, 180, 75, 62, 192, 82, 228, 189, 60, 104, 153, 189, 157, 61, 162, 190, 109, 24, 98, 61, 185, 195, 254, 186, 230, 71, 198, 189, 180, 219, 194, 188, 27, 121, 13, 62, 242, 61, 15, 190, 110, 165, 140, 190, 140, 55, 56, 61, 171, 196, 155, 191, 188, 198, 130, 191, 20, 111, 91, 190, 6, 42, 186, 190, 125, 68, 150, 189, 243, 55, 216, 189, 60, 55, 142, 62, 92, 29, 108, 61, 239, 183, 159, 189, 69, 148, 186, 62, 244, 159, 100, 62, 89, 28, 73, 62, 89, 223, 246, 61, 46, 18, 85, 61, 71, 143, 91, 188, 152, 55, 73, 190, 162, 6, 14, 61, 78, 242, 203, 189, 24, 84, 14, 189, 241, 44, 190, 62, 105, 208, 81, 190, 60, 167, 103, 62, 119, 224, 227, 189, 60, 200, 68, 189, 241, 84, 105, 62, 227, 49, 102, 190, 120, 225, 198, 189, 244, 94, 196, 62, 45, 43, 13, 62, 74, 158, 229, 190, 248, 160, 128, 190, 114, 6, 202, 61, 150, 153, 17, 62, 199, 153, 2, 62, 168, 225, 137, 190, 245, 202, 205, 61, 236, 35, 249, 61, 228, 166, 202, 189, 243, 226, 245, 60, 214, 14, 155, 190, 46, 181, 59, 187, 52, 26, 140, 190, 215, 190, 100, 62, 232, 46, 7, 190, 38, 19, 48, 62, 204, 143, 133, 189, 230, 114, 210, 61, 155, 109, 182, 62, 221, 100, 240, 60, 1, 28, 131, 60, 241, 126, 77, 61, 151, 59, 185, 189, 58, 49, 138, 61, 115, 178, 62, 190, 44, 130, 29, 62, 220, 56, 158, 61, 153, 69, 49, 189, 112, 179, 7, 188, 142, 95, 90, 62, 91, 153, 76, 190, 33, 246, 35, 61, 10, 233, 218, 62, 11, 59, 10, 61, 87, 13, 188, 62, 109, 135, 11, 191, 59, 185, 156, 190, 123, 235, 134, 62, 9, 30, 214, 188, 14, 160, 180, 188, 112, 134, 215, 62, 103, 182, 66, 62, 123, 224, 113, 61, 87, 243, 132, 61, 157, 101, 183, 62, 217, 142, 29, 190, 188, 4, 130, 62, 218, 231, 131, 62, 169, 150, 79, 62, 112, 133, 14, 62, 62, 206, 156, 190, 61, 86, 92, 62, 138, 247, 26, 188, 184, 52, 182, 59, 217, 223, 185, 189, 225, 27, 21, 190, 193, 33, 119, 189, 213, 115, 141, 190, 155, 84, 0, 62, 153, 171, 172, 62, 67, 30, 232, 189, 65, 6, 94, 190, 18, 16, 214, 62, 188, 202, 150, 189, 76, 158, 19, 191, 211, 117, 105, 190, 186, 133, 87, 58, 250, 65, 24, 191, 51, 218, 31, 191, 247, 134, 20, 191, 181, 209, 186, 60, 59, 224, 132, 62, 43, 57, 208, 61, 26, 247, 231, 62, 189, 100, 60, 190, 0, 155, 137, 189, 228, 139, 60, 61, 67, 115, 111, 190, 226, 24, 140, 61, 168, 150, 223, 188, 60, 224, 242, 187, 230, 48, 193, 189, 209, 125, 27, 190, 129, 38, 140, 60, 50, 130, 59, 189, 167, 117, 18, 62, 0, 128, 55, 190, 189, 244, 166, 189, 169, 184, 158, 189, 81, 140, 211, 189, 79, 223, 20, 190, 125, 122, 22, 62, 95, 154, 102, 190, 166, 98, 34, 60, 167, 23, 65, 62, 149, 32, 27, 190, 187, 112, 243, 61, 178, 166, 67, 190, 238, 81, 109, 190, 233, 202, 101, 190, 177, 15, 131, 190, 199, 8, 3, 190, 106, 78, 62, 62, 187, 222, 237, 188, 73, 234, 177, 190, 212, 43, 55, 62, 229, 220, 16, 62, 184, 29, 224, 61, 39, 0, 127, 62, 182, 31, 66, 61, 113, 169, 222, 189, 24, 107, 203, 61, 56, 250, 59, 61, 197, 227, 133, 62, 67, 34, 14, 62, 174, 107, 74, 61, 234, 243, 103, 62, 29, 234, 164, 62, 163, 244, 21, 190, 90, 231, 206, 61, 209, 237, 48, 61, 180, 131, 3, 189, 38, 118, 93, 62, 17, 27, 3, 62, 213, 89, 136, 190, 191, 52, 38, 62, 20, 118, 58, 190, 52, 250, 217, 189, 152, 143, 37, 191, 221, 195, 231, 61, 69, 48, 36, 190, 83, 137, 177, 191, 173, 48, 167, 191, 240, 76, 70, 190, 28, 208, 49, 188, 38, 246, 193, 61, 20, 118, 144, 62, 179, 65, 113, 62, 28, 232, 153, 61, 17, 239, 109, 61, 225, 251, 75, 62, 251, 114, 243, 61, 166, 45, 221, 61, 196, 94, 0, 62, 45, 181, 0, 189, 92, 193, 70, 61, 99, 16, 0, 62, 36, 92, 152, 188, 247, 101, 108, 61, 110, 67, 32, 62, 186, 143, 44, 62, 243, 72, 25, 62, 237, 159, 6, 191, 86, 16, 240, 189, 230, 147, 14, 190, 221, 75, 138, 62, 231, 161, 192, 190, 28, 28, 158, 61, 136, 28, 123, 61, 74, 104, 227, 61, 234, 15, 18, 191, 68, 87, 166, 188, 206, 60, 137, 62, 219, 220, 175, 191, 47, 30, 190, 191, 29, 202, 17, 191, 218, 179, 78, 189, 85, 236, 10, 61, 54, 207, 149, 189, 213, 3, 73, 62, 185, 82, 66, 62, 239, 210, 216, 189, 176, 215, 235, 62, 115, 34, 40, 61, 55, 40, 116, 189, 135, 74, 5, 62, 29, 101, 227, 190, 79, 128, 221, 189, 57, 185, 40, 191, 130, 238, 95, 62, 206, 135, 246, 60, 185, 63, 194, 61, 76, 90, 35, 62, 153, 122, 15, 190, 109, 84, 13, 190, 176, 217, 192, 61, 117, 118, 227, 190, 125, 157, 145, 61, 191, 233, 96, 189, 195, 47, 209, 61, 14, 98, 145, 190, 88, 156, 35, 61, 118, 190, 228, 62, 45, 251, 183, 190, 22, 55, 147, 189, 115, 57, 134, 62, 228, 60, 248, 62, 33, 101, 88, 62, 215, 251, 144, 190, 104, 74, 153, 62, 136, 122, 88, 190, 193, 67, 73, 190, 205, 83, 22, 191, 4, 125, 196, 61, 183, 236, 0, 61, 135, 142, 194, 61, 201, 111, 136, 189, 232, 219, 32, 190, 104, 115, 132, 189, 179, 21, 51, 189, 239, 88, 41, 61, 138, 190, 208, 189, 204, 97, 33, 62, 235, 45, 57, 189, 120, 140, 168, 189, 98, 58, 39, 61, 114, 144, 42, 190, 182, 115, 91, 189, 245, 125, 147, 60, 235, 193, 13, 61, 194, 113, 162, 61, 68, 146, 52, 190, 28, 24, 212, 61, 62, 166, 96, 189, 151, 132, 241, 189, 213, 78, 223, 61, 248, 84, 204, 61, 246, 205, 18, 190, 49, 116, 9, 189, 224, 172, 12, 62, 194, 235, 50, 190, 186, 226, 183, 188, 55, 109, 204, 188, 232, 205, 193, 189, 176, 255, 24, 62, 149, 37, 5, 62, 210, 139, 2, 191, 250, 163, 153, 61, 110, 93, 4, 192, 240, 21, 207, 188, 149, 131, 79, 62, 247, 172, 71, 61, 33, 233, 14, 63, 1, 117, 93, 191, 203, 130, 160, 190, 152, 65, 169, 189, 242, 200, 18, 62, 57, 237, 58, 190, 158, 105, 142, 62, 200, 33, 64, 62, 217, 136, 195, 62, 56, 202, 74, 191, 55, 49, 70, 190, 169, 84, 62, 189, 164, 246, 131, 191, 123, 9, 117, 62, 238, 248, 193, 62, 206, 45, 187, 189, 178, 11, 161, 62, 45, 207, 89, 190, 14, 148, 43, 187, 231, 122, 233, 61, 83, 58, 162, 189, 224, 182, 190, 190, 147, 209, 250, 61, 134, 129, 165, 190, 226, 19, 122, 63, 193, 213, 35, 62, 38, 145, 88, 191, 44, 8, 175, 62, 5, 255, 202, 59, 133, 25, 201, 61, 210, 42, 7, 61, 243, 164, 5, 61, 201, 99, 251, 61, 113, 86, 130, 62, 58, 45, 236, 60, 55, 99, 158, 61, 217, 242, 150, 62, 75, 38, 49, 62, 25, 209, 129, 191, 160, 78, 15, 62, 145, 10, 187, 190, 91, 106, 19, 62, 246, 76, 114, 190, 244, 225, 114, 189, 194, 53, 206, 189, 110, 23, 134, 60, 115, 144, 194, 190, 171, 46, 55, 189, 218, 2, 138, 62, 112, 201, 61, 190, 167, 192, 189, 190, 86, 98, 12, 191, 196, 96, 247, 61, 242, 249, 186, 190, 225, 138, 128, 62, 116, 244, 12, 62, 8, 143, 47, 189, 222, 74, 172, 189, 74, 198, 89, 61, 31, 3, 96, 188, 172, 14, 159, 187, 53, 16, 227, 189, 235, 146, 17, 61, 72, 163, 92, 189, 211, 216, 194, 61, 238, 166, 116, 189, 207, 40, 16, 190, 226, 106, 56, 190, 75, 183, 217, 61, 109, 127, 39, 61, 84, 220, 68, 189, 159, 103, 20, 62, 60, 146, 101, 61, 158, 96, 6, 190, 229, 77, 13, 188, 44, 46, 115, 189, 76, 116, 92, 190, 234, 94, 14, 190, 34, 222, 163, 189, 167, 123, 0, 190, 44, 87, 78, 190, 24, 241, 47, 190, 246, 36, 102, 190, 194, 39, 193, 61, 222, 192, 27, 190, 171, 96, 55, 62, 135, 117, 149, 189, 104, 190, 4, 190, 210, 241, 84, 60, 182, 170, 48, 190, 160, 166, 132, 62, 99, 97, 223, 189, 175, 64, 139, 62, 212, 193, 25, 61, 188, 34, 144, 62, 153, 209, 32, 190, 80, 12, 130, 190, 36, 249, 131, 61, 126, 113, 0, 60, 222, 137, 22, 190, 234, 73, 174, 61, 182, 241, 94, 188, 55, 204, 183, 61, 219, 76, 155, 61, 1, 38, 227, 187, 237, 179, 155, 60, 196, 61, 142, 190, 172, 165, 160, 189, 176, 120, 55, 62, 128, 210, 156, 188, 122, 234, 14, 191, 216, 216, 183, 189, 180, 166, 236, 189, 160, 94, 219, 62, 48, 84, 13, 61, 254, 239, 4, 191, 113, 13, 38, 61, 66, 203, 54, 62, 22, 75, 68, 60, 171, 91, 218, 188, 220, 99, 164, 190, 69, 216, 98, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 81, 96, 62, 141, 180, 141, 189, 252, 254, 109, 62, 100, 107, 75, 60, 222, 239, 137, 62, 192, 33, 106, 190, 193, 109, 34, 62, 72, 163, 152, 62, 255, 27, 95, 190, 2, 229, 21, 190, 20, 211, 157, 188, 48, 113, 95, 189, 74, 185, 169, 190, 193, 23, 47, 190, 49, 130, 227, 189, 74, 48, 164, 62, 246, 207, 38, 62, 54, 123, 133, 62, 11, 252, 237, 189, 139, 92, 12, 189, 251, 102, 118, 62, 100, 42, 133, 189, 114, 118, 222, 61, 68, 78, 121, 190, 249, 141, 36, 187, 65, 11, 214, 61, 111, 246, 2, 190, 166, 2, 82, 190, 160, 255, 203, 61, 179, 252, 192, 61, 89, 233, 7, 61, 53, 32, 88, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 125, 217, 190, 77, 140, 209, 62, 114, 155, 31, 189, 200, 151, 93, 63, 197, 246, 190, 60, 47, 191, 161, 62, 53, 19, 41, 63, 251, 218, 242, 189, 193, 134, 34, 62, 221, 119, 71, 188, 202, 112, 11, 191, 151, 85, 60, 61, 1, 96, 14, 63, 66, 140, 200, 189, 164, 122, 198, 190, 31, 71, 20, 191, 131, 236, 118, 63, 43, 61, 75, 191, 116, 68, 0, 59, 32, 183, 116, 62, 55, 33, 8, 62, 58, 69, 151, 190, 199, 229, 235, 62, 223, 147, 159, 189, 55, 252, 250, 62, 236, 152, 136, 62, 13, 131, 199, 62, 132, 226, 2, 62, 146, 126, 136, 191, 153, 220, 173, 189, 50, 134, 237, 61, 46, 56, 16, 62, 48, 213, 174, 189, 188, 89, 17, 190, 29, 231, 144, 190, 123, 212, 251, 62, 222, 199, 212, 190, 235, 38, 42, 61, 154, 181, 22, 62, 26, 148, 172, 190, 56, 139, 221, 189, 83, 204, 137, 188, 178, 235, 95, 62, 160, 59, 109, 190, 157, 166, 201, 189, 170, 152, 56, 62, 208, 120, 80, 61, 36, 129, 32, 190, 21, 133, 162, 62, 227, 172, 209, 189, 251, 92, 177, 189, 137, 227, 10, 191, 145, 41, 70, 190, 23, 223, 66, 189, 192, 118, 105, 190, 219, 56, 60, 60, 98, 115, 162, 61, 4, 236, 238, 190, 7, 232, 48, 190, 109, 52, 27, 61, 187, 27, 112, 62, 94, 112, 49, 191, 88, 37, 28, 60, 75, 237, 234, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 160, 22, 190, 242, 226, 13, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {13, 205, 135, 191, 77, 84, 17, 63, 95, 161, 177, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {151, 207, 131, 64, 57, 47, 243, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0054/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}