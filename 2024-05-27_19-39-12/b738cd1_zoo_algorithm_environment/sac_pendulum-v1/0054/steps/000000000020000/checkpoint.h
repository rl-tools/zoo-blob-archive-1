// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 136, 153, 62, 1, 251, 88, 188, 93, 193, 111, 190, 251, 5, 212, 190, 1, 237, 160, 62, 245, 240, 130, 190, 69, 246, 63, 190, 228, 157, 13, 63, 8, 124, 14, 63, 0, 167, 1, 63, 84, 245, 37, 63, 50, 251, 175, 190, 31, 233, 151, 61, 74, 244, 254, 190, 146, 93, 28, 63, 128, 130, 237, 62, 91, 81, 96, 191, 5, 22, 83, 190, 191, 35, 109, 62, 193, 88, 92, 191, 116, 116, 53, 63, 51, 107, 205, 61, 241, 225, 93, 63, 121, 230, 17, 63, 230, 145, 177, 62, 65, 80, 202, 190, 23, 43, 226, 190, 29, 144, 15, 63, 20, 100, 129, 190, 154, 175, 215, 190, 159, 189, 41, 191, 174, 197, 225, 62, 50, 237, 60, 61, 95, 8, 177, 62, 91, 164, 253, 62, 255, 188, 177, 62, 124, 80, 130, 191, 151, 83, 67, 191, 53, 48, 8, 190, 223, 205, 30, 191, 98, 100, 191, 60, 112, 187, 183, 190, 216, 233, 71, 191, 107, 96, 170, 191, 193, 175, 65, 190, 38, 169, 149, 62, 31, 219, 176, 62, 195, 73, 205, 62, 97, 53, 14, 187, 27, 56, 131, 63, 224, 171, 9, 63, 246, 84, 79, 190, 240, 212, 156, 191, 43, 249, 255, 190, 79, 73, 245, 190, 231, 225, 223, 189, 83, 130, 5, 63, 121, 99, 61, 62, 200, 30, 229, 62, 113, 31, 115, 190, 158, 135, 58, 63, 80, 10, 175, 63, 33, 137, 198, 62, 116, 66, 17, 62, 249, 236, 17, 62, 199, 83, 251, 62, 199, 227, 78, 63, 113, 130, 145, 63, 229, 79, 98, 62, 249, 10, 212, 190, 21, 90, 136, 63, 117, 31, 30, 62, 123, 114, 215, 190, 33, 62, 130, 63, 14, 105, 84, 62, 22, 18, 14, 63, 148, 91, 154, 63, 79, 142, 161, 62, 210, 166, 213, 190, 79, 161, 163, 190, 181, 177, 54, 63, 212, 3, 226, 62, 146, 54, 9, 191, 45, 157, 139, 190, 44, 112, 135, 63, 33, 119, 10, 190, 108, 40, 11, 189, 97, 218, 86, 63, 145, 38, 127, 191, 86, 224, 98, 190, 98, 21, 254, 190, 243, 133, 224, 190, 4, 18, 223, 62, 251, 56, 26, 191, 146, 219, 142, 190, 125, 221, 37, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 146, 142, 191, 239, 195, 234, 189, 112, 76, 54, 190, 187, 227, 97, 62, 35, 21, 46, 62, 198, 121, 165, 62, 88, 7, 135, 61, 89, 0, 129, 62, 29, 228, 132, 190, 135, 13, 145, 188, 85, 87, 194, 62, 74, 86, 90, 62, 104, 21, 98, 63, 127, 95, 36, 191, 250, 252, 116, 62, 45, 194, 212, 62, 6, 68, 15, 191, 5, 254, 46, 190, 252, 231, 248, 190, 171, 152, 133, 62, 17, 65, 159, 190, 153, 178, 140, 61, 177, 133, 23, 62, 143, 130, 34, 62, 106, 134, 167, 62, 22, 163, 151, 190, 250, 131, 160, 190, 97, 135, 44, 191, 130, 221, 67, 189, 185, 15, 44, 189, 14, 244, 26, 191, 128, 247, 191, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 107, 44, 191, 186, 174, 51, 62, 41, 200, 8, 191, 132, 147, 103, 189, 52, 152, 135, 58, 67, 171, 94, 60, 33, 22, 118, 62, 95, 227, 10, 190, 128, 144, 11, 190, 196, 208, 224, 189, 15, 250, 219, 189, 103, 152, 163, 62, 70, 134, 254, 190, 75, 115, 207, 61, 248, 255, 17, 191, 179, 219, 156, 190, 222, 129, 156, 190, 28, 54, 129, 61, 67, 186, 78, 191, 144, 212, 176, 62, 184, 43, 174, 62, 23, 234, 132, 62, 212, 233, 199, 62, 178, 194, 149, 190, 145, 122, 7, 190, 138, 61, 251, 61, 246, 204, 44, 190, 234, 110, 22, 190, 16, 227, 112, 62, 123, 52, 195, 190, 26, 77, 234, 190, 116, 140, 22, 189, 157, 63, 212, 62, 204, 100, 25, 190, 123, 91, 113, 62, 0, 28, 4, 62, 76, 107, 11, 62, 206, 194, 43, 62, 170, 25, 177, 190, 15, 81, 44, 62, 148, 245, 49, 61, 91, 173, 123, 62, 36, 29, 77, 190, 222, 55, 212, 61, 201, 30, 122, 62, 213, 234, 56, 190, 100, 42, 42, 62, 209, 106, 33, 62, 233, 236, 170, 190, 89, 45, 26, 190, 194, 32, 125, 62, 247, 84, 158, 60, 36, 204, 27, 191, 152, 253, 22, 190, 43, 140, 113, 60, 117, 7, 63, 191, 133, 112, 46, 191, 196, 27, 21, 190, 35, 178, 130, 62, 100, 254, 221, 61, 30, 214, 12, 62, 135, 68, 204, 62, 156, 180, 168, 190, 82, 29, 131, 62, 155, 162, 235, 190, 134, 198, 171, 189, 206, 148, 240, 61, 167, 132, 233, 189, 173, 161, 209, 187, 105, 192, 164, 62, 34, 195, 231, 61, 33, 45, 192, 59, 202, 114, 44, 188, 138, 228, 49, 62, 234, 62, 154, 62, 94, 137, 83, 62, 189, 66, 244, 189, 82, 159, 185, 188, 239, 216, 180, 61, 88, 185, 8, 62, 229, 182, 9, 58, 62, 140, 22, 190, 188, 46, 99, 190, 137, 57, 116, 62, 40, 17, 30, 188, 226, 129, 129, 189, 0, 58, 170, 62, 240, 186, 225, 61, 164, 145, 147, 189, 119, 147, 238, 61, 190, 119, 32, 62, 225, 240, 30, 190, 13, 111, 91, 61, 13, 134, 216, 188, 205, 199, 135, 62, 25, 212, 198, 61, 3, 6, 61, 63, 20, 79, 179, 189, 203, 112, 67, 62, 18, 152, 74, 62, 41, 84, 206, 62, 228, 226, 25, 61, 46, 176, 214, 189, 3, 149, 11, 62, 153, 222, 112, 62, 163, 106, 188, 61, 186, 29, 254, 60, 226, 86, 131, 190, 48, 90, 47, 190, 129, 176, 95, 190, 208, 114, 79, 190, 181, 246, 48, 62, 112, 10, 6, 191, 84, 102, 8, 190, 242, 130, 222, 62, 196, 98, 70, 190, 188, 89, 143, 191, 4, 148, 224, 187, 61, 242, 112, 190, 4, 183, 84, 191, 201, 161, 220, 190, 6, 144, 143, 191, 2, 93, 43, 62, 212, 42, 164, 62, 117, 212, 185, 62, 59, 101, 108, 62, 216, 237, 169, 190, 131, 190, 104, 190, 60, 41, 41, 62, 107, 8, 74, 190, 38, 41, 219, 61, 34, 115, 175, 187, 99, 24, 137, 61, 111, 32, 49, 62, 1, 208, 11, 190, 60, 180, 25, 61, 113, 157, 198, 60, 186, 97, 1, 62, 93, 74, 63, 190, 53, 141, 147, 189, 234, 201, 158, 60, 255, 223, 169, 190, 38, 136, 161, 188, 222, 214, 19, 62, 67, 50, 80, 190, 45, 132, 44, 190, 143, 255, 58, 62, 127, 180, 181, 61, 234, 146, 186, 190, 145, 26, 204, 189, 105, 224, 149, 189, 206, 232, 226, 190, 149, 187, 240, 190, 144, 154, 97, 190, 63, 241, 84, 62, 217, 229, 2, 190, 64, 204, 69, 189, 234, 230, 145, 62, 200, 92, 155, 189, 49, 149, 34, 187, 138, 41, 235, 62, 9, 88, 38, 189, 63, 138, 149, 61, 149, 53, 7, 62, 132, 34, 72, 61, 188, 169, 202, 61, 245, 157, 46, 61, 144, 53, 72, 61, 70, 59, 71, 62, 158, 33, 95, 62, 112, 198, 160, 190, 151, 40, 146, 62, 248, 86, 29, 62, 119, 182, 234, 60, 162, 129, 102, 61, 159, 174, 159, 62, 208, 108, 64, 62, 219, 91, 72, 62, 134, 184, 121, 62, 60, 116, 170, 189, 197, 97, 182, 190, 139, 34, 66, 62, 160, 128, 163, 61, 143, 107, 175, 190, 152, 92, 18, 191, 124, 77, 199, 189, 193, 224, 49, 62, 147, 106, 30, 62, 242, 98, 205, 59, 236, 29, 241, 61, 191, 235, 255, 61, 176, 28, 19, 190, 204, 166, 70, 191, 224, 189, 45, 189, 56, 143, 163, 62, 165, 202, 253, 60, 193, 212, 60, 62, 161, 88, 12, 189, 95, 205, 132, 190, 6, 178, 210, 60, 206, 26, 244, 189, 225, 182, 104, 190, 126, 37, 83, 188, 32, 181, 207, 190, 82, 165, 243, 62, 150, 136, 22, 189, 242, 190, 59, 62, 138, 90, 14, 61, 201, 137, 218, 190, 129, 78, 204, 60, 155, 255, 11, 63, 44, 252, 216, 189, 249, 138, 120, 191, 152, 56, 41, 190, 19, 215, 7, 191, 225, 245, 141, 62, 53, 109, 41, 62, 121, 199, 80, 191, 141, 198, 23, 62, 231, 130, 201, 190, 45, 111, 30, 191, 142, 128, 222, 189, 226, 197, 16, 190, 48, 178, 68, 62, 11, 139, 61, 190, 41, 73, 241, 62, 114, 184, 65, 190, 32, 63, 116, 190, 130, 249, 14, 188, 249, 25, 187, 61, 119, 230, 45, 62, 39, 67, 197, 186, 196, 145, 86, 190, 202, 247, 42, 190, 99, 228, 133, 62, 111, 150, 175, 189, 58, 60, 125, 62, 159, 61, 116, 190, 159, 16, 66, 60, 215, 240, 100, 62, 185, 89, 17, 190, 159, 6, 160, 190, 108, 78, 77, 190, 222, 206, 75, 190, 45, 215, 173, 190, 253, 179, 142, 189, 164, 4, 95, 60, 215, 188, 82, 190, 142, 213, 131, 189, 208, 247, 250, 190, 37, 239, 228, 60, 50, 129, 16, 190, 89, 176, 188, 62, 10, 178, 199, 61, 191, 40, 244, 189, 86, 94, 142, 61, 201, 94, 172, 189, 27, 74, 27, 190, 150, 21, 13, 188, 59, 132, 255, 60, 63, 24, 0, 62, 242, 237, 108, 189, 55, 96, 224, 61, 6, 31, 251, 189, 11, 122, 51, 189, 131, 212, 255, 189, 184, 178, 79, 190, 193, 55, 31, 61, 248, 88, 148, 189, 62, 254, 205, 61, 146, 188, 15, 189, 96, 25, 146, 61, 190, 141, 34, 190, 247, 61, 227, 188, 126, 78, 105, 61, 170, 174, 187, 60, 51, 147, 116, 61, 160, 56, 12, 190, 93, 234, 42, 190, 5, 1, 217, 61, 11, 212, 170, 61, 237, 26, 218, 61, 8, 223, 165, 189, 195, 154, 126, 61, 98, 217, 159, 189, 13, 134, 39, 190, 152, 168, 218, 60, 218, 75, 73, 188, 32, 69, 64, 61, 218, 22, 164, 61, 192, 188, 173, 189, 184, 22, 92, 61, 1, 217, 84, 188, 135, 57, 17, 190, 100, 92, 245, 189, 28, 145, 160, 189, 166, 58, 173, 61, 80, 233, 56, 190, 87, 105, 75, 190, 141, 202, 29, 61, 179, 5, 103, 61, 113, 36, 237, 61, 136, 218, 12, 61, 213, 183, 78, 61, 60, 1, 70, 189, 54, 149, 13, 189, 140, 158, 37, 62, 217, 229, 241, 60, 221, 76, 1, 60, 96, 251, 81, 189, 214, 219, 148, 189, 37, 55, 146, 61, 212, 90, 177, 189, 122, 168, 24, 62, 42, 243, 5, 189, 139, 206, 57, 189, 89, 19, 5, 61, 2, 237, 57, 190, 41, 240, 242, 60, 58, 237, 3, 190, 68, 130, 109, 189, 141, 31, 32, 190, 61, 147, 105, 189, 112, 115, 103, 62, 200, 148, 80, 62, 125, 0, 112, 190, 186, 81, 56, 62, 42, 90, 13, 61, 158, 25, 13, 61, 158, 155, 200, 190, 180, 194, 122, 191, 81, 225, 252, 188, 153, 180, 125, 191, 187, 1, 145, 190, 152, 198, 189, 190, 149, 69, 102, 62, 52, 179, 184, 61, 88, 8, 140, 190, 129, 172, 10, 62, 18, 233, 201, 62, 94, 60, 14, 63, 229, 101, 235, 61, 50, 177, 140, 62, 23, 65, 47, 191, 98, 244, 238, 190, 167, 158, 36, 61, 170, 113, 129, 187, 90, 189, 182, 190, 146, 81, 194, 60, 18, 26, 187, 190, 177, 214, 219, 189, 149, 11, 171, 190, 221, 254, 63, 62, 243, 120, 140, 62, 150, 56, 208, 61, 71, 211, 45, 62, 94, 52, 90, 61, 230, 85, 186, 190, 236, 228, 33, 188, 139, 18, 40, 62, 121, 53, 164, 62, 190, 5, 124, 62, 109, 31, 21, 61, 85, 9, 234, 61, 43, 249, 47, 190, 250, 201, 122, 191, 219, 10, 232, 189, 34, 97, 228, 61, 41, 201, 250, 60, 131, 107, 139, 191, 184, 73, 50, 62, 223, 112, 40, 190, 78, 198, 88, 190, 62, 128, 60, 190, 28, 231, 89, 189, 206, 100, 241, 62, 175, 57, 243, 61, 243, 198, 75, 189, 83, 160, 76, 189, 178, 221, 68, 62, 14, 6, 192, 62, 14, 81, 159, 62, 169, 20, 206, 189, 77, 110, 158, 189, 42, 9, 68, 63, 27, 17, 131, 62, 37, 116, 129, 190, 226, 221, 9, 62, 125, 122, 111, 189, 239, 165, 4, 191, 189, 107, 252, 189, 206, 91, 131, 189, 42, 82, 248, 61, 188, 224, 110, 190, 120, 93, 9, 190, 223, 200, 66, 62, 38, 243, 67, 190, 131, 220, 210, 62, 93, 152, 94, 191, 82, 64, 18, 190, 60, 209, 251, 61, 20, 74, 149, 61, 172, 43, 153, 190, 126, 252, 225, 61, 158, 3, 11, 63, 113, 129, 40, 190, 5, 9, 220, 61, 77, 217, 93, 62, 40, 86, 163, 61, 254, 49, 167, 61, 19, 219, 20, 190, 76, 146, 112, 62, 128, 36, 53, 191, 191, 241, 171, 190, 205, 209, 29, 190, 60, 9, 2, 62, 249, 89, 23, 191, 228, 153, 238, 61, 203, 166, 131, 190, 30, 195, 28, 190, 102, 63, 136, 61, 98, 79, 152, 62, 248, 10, 63, 62, 98, 1, 10, 60, 110, 253, 109, 190, 46, 171, 95, 190, 167, 178, 74, 61, 108, 16, 87, 61, 91, 191, 170, 61, 11, 238, 3, 62, 174, 225, 172, 62, 236, 18, 154, 190, 198, 206, 239, 187, 176, 32, 62, 62, 130, 41, 69, 190, 7, 95, 126, 62, 110, 85, 141, 62, 40, 96, 216, 189, 192, 66, 62, 62, 160, 228, 231, 190, 221, 217, 118, 190, 163, 252, 134, 62, 204, 191, 67, 61, 165, 157, 224, 188, 95, 30, 175, 189, 117, 195, 207, 190, 232, 71, 40, 61, 230, 169, 174, 61, 88, 62, 199, 62, 222, 107, 211, 190, 194, 187, 71, 61, 94, 201, 220, 189, 109, 182, 158, 62, 211, 112, 153, 62, 25, 177, 34, 187, 232, 124, 146, 188, 252, 233, 185, 62, 26, 121, 21, 61, 48, 82, 229, 190, 64, 24, 104, 190, 105, 125, 184, 60, 79, 4, 135, 62, 67, 113, 215, 62, 183, 218, 62, 61, 5, 125, 46, 190, 139, 206, 253, 61, 171, 165, 167, 62, 109, 155, 166, 190, 139, 203, 44, 62, 156, 120, 19, 190, 78, 39, 197, 190, 203, 148, 253, 190, 183, 79, 81, 190, 221, 229, 65, 190, 197, 224, 135, 62, 24, 219, 46, 63, 136, 83, 9, 190, 190, 171, 170, 61, 224, 1, 29, 62, 201, 149, 29, 61, 224, 205, 158, 190, 198, 175, 0, 62, 111, 131, 12, 192, 98, 20, 43, 189, 254, 241, 8, 62, 190, 89, 192, 61, 176, 40, 57, 63, 37, 230, 130, 191, 19, 224, 1, 62, 36, 146, 181, 60, 158, 60, 124, 60, 27, 225, 33, 191, 191, 37, 226, 62, 14, 217, 157, 61, 140, 28, 14, 63, 40, 128, 161, 191, 142, 130, 136, 61, 232, 245, 37, 189, 98, 239, 136, 191, 201, 222, 26, 188, 22, 251, 131, 61, 123, 137, 17, 190, 53, 158, 3, 61, 193, 254, 32, 189, 182, 134, 6, 62, 33, 180, 238, 189, 232, 83, 25, 190, 168, 79, 234, 59, 35, 180, 7, 62, 148, 84, 59, 62, 42, 29, 1, 63, 129, 83, 241, 188, 177, 106, 118, 188, 209, 167, 66, 62, 95, 144, 92, 61, 48, 237, 101, 62, 100, 99, 134, 61, 28, 244, 59, 190, 116, 68, 144, 190, 179, 184, 156, 61, 188, 205, 8, 60, 176, 130, 148, 62, 26, 223, 41, 189, 210, 246, 79, 190, 133, 181, 190, 189, 238, 69, 184, 190, 20, 137, 80, 190, 87, 32, 167, 62, 213, 72, 157, 190, 87, 175, 194, 191, 247, 175, 159, 62, 56, 152, 118, 190, 248, 74, 4, 191, 88, 196, 101, 190, 226, 241, 147, 190, 140, 141, 233, 62, 31, 114, 156, 62, 151, 57, 20, 191, 91, 155, 139, 62, 75, 180, 251, 61, 231, 172, 80, 63, 179, 244, 144, 62, 205, 66, 155, 190, 178, 59, 204, 190, 113, 6, 181, 190, 49, 185, 163, 62, 48, 180, 12, 192, 130, 202, 168, 189, 167, 216, 224, 190, 221, 36, 24, 62, 174, 39, 48, 190, 214, 48, 10, 191, 104, 214, 210, 189, 119, 120, 79, 188, 96, 32, 28, 62, 60, 247, 251, 61, 168, 114, 23, 62, 77, 21, 175, 188, 198, 223, 166, 62, 116, 216, 92, 191, 156, 32, 79, 191, 126, 58, 236, 61, 55, 115, 72, 191, 43, 129, 139, 62, 148, 33, 136, 62, 243, 136, 229, 61, 181, 236, 248, 61, 222, 233, 28, 62, 228, 174, 64, 62, 214, 93, 93, 62, 89, 227, 82, 191, 50, 103, 2, 190, 133, 214, 31, 63, 86, 56, 43, 61, 175, 94, 135, 62, 138, 127, 11, 62, 7, 170, 193, 61, 160, 202, 183, 61, 176, 239, 143, 189, 36, 194, 249, 188, 136, 57, 164, 61, 87, 28, 34, 189, 160, 24, 36, 190, 113, 97, 141, 189, 154, 240, 205, 189, 40, 124, 141, 189, 135, 238, 51, 189, 135, 193, 88, 61, 97, 95, 250, 189, 14, 145, 22, 61, 120, 139, 31, 62, 174, 161, 150, 61, 248, 81, 226, 61, 184, 112, 29, 190, 241, 178, 0, 61, 231, 145, 9, 188, 159, 192, 10, 190, 165, 230, 64, 190, 162, 217, 23, 61, 202, 110, 7, 62, 25, 27, 2, 189, 96, 126, 205, 61, 23, 144, 204, 61, 185, 66, 170, 189, 231, 66, 8, 188, 6, 188, 0, 190, 20, 178, 196, 189, 192, 236, 106, 189, 232, 42, 194, 62, 133, 217, 249, 61, 52, 186, 3, 62, 221, 67, 217, 61, 14, 247, 226, 190, 114, 23, 74, 62, 71, 202, 192, 190, 12, 69, 152, 190, 170, 223, 178, 189, 236, 108, 85, 62, 3, 126, 45, 59, 190, 62, 87, 62, 230, 249, 17, 190, 251, 176, 147, 189, 163, 245, 211, 190, 212, 233, 102, 61, 185, 195, 254, 186, 144, 10, 235, 189, 180, 219, 194, 188, 194, 51, 29, 62, 186, 205, 207, 189, 57, 132, 155, 190, 44, 217, 99, 61, 30, 48, 154, 191, 27, 5, 143, 191, 226, 78, 26, 190, 6, 42, 186, 190, 138, 81, 194, 189, 246, 94, 236, 189, 121, 161, 122, 62, 92, 29, 108, 61, 213, 82, 167, 189, 186, 139, 194, 62, 1, 9, 102, 62, 164, 209, 61, 62, 247, 70, 252, 61, 165, 82, 56, 61, 193, 248, 208, 188, 181, 139, 72, 190, 214, 232, 162, 60, 109, 139, 211, 189, 205, 223, 32, 189, 56, 214, 148, 62, 139, 98, 86, 190, 0, 16, 46, 62, 55, 144, 202, 189, 179, 43, 185, 189, 52, 11, 95, 62, 212, 8, 108, 190, 22, 168, 196, 189, 32, 255, 198, 62, 75, 219, 16, 62, 221, 155, 231, 190, 147, 218, 131, 190, 92, 23, 180, 61, 64, 1, 112, 61, 208, 176, 58, 61, 156, 119, 138, 190, 83, 28, 213, 61, 59, 64, 226, 61, 200, 199, 220, 189, 122, 111, 51, 60, 122, 28, 145, 190, 120, 205, 192, 188, 46, 85, 138, 190, 189, 14, 86, 62, 230, 234, 246, 189, 65, 208, 28, 62, 114, 152, 94, 189, 166, 251, 199, 61, 182, 109, 184, 62, 48, 48, 231, 60, 177, 221, 108, 60, 77, 76, 64, 61, 210, 157, 9, 190, 203, 191, 91, 61, 187, 37, 108, 190, 68, 58, 14, 62, 151, 197, 148, 61, 209, 183, 79, 189, 27, 71, 47, 58, 100, 174, 85, 62, 49, 54, 69, 190, 84, 109, 85, 60, 0, 175, 206, 62, 146, 34, 27, 61, 176, 216, 178, 62, 173, 230, 22, 191, 238, 250, 159, 190, 82, 201, 105, 62, 207, 231, 131, 188, 131, 79, 14, 60, 159, 167, 210, 62, 175, 74, 70, 62, 149, 5, 114, 61, 159, 219, 22, 61, 105, 161, 178, 62, 59, 216, 52, 190, 77, 85, 120, 62, 49, 89, 132, 62, 229, 34, 69, 62, 54, 25, 7, 62, 244, 201, 158, 190, 60, 189, 89, 62, 88, 78, 20, 189, 255, 112, 0, 188, 137, 188, 200, 189, 247, 166, 10, 190, 61, 198, 151, 189, 173, 131, 154, 190, 161, 170, 216, 61, 60, 214, 174, 62, 40, 178, 1, 190, 87, 31, 135, 190, 90, 62, 211, 62, 241, 205, 138, 189, 137, 103, 15, 191, 161, 7, 109, 190, 17, 245, 124, 60, 250, 144, 28, 191, 60, 62, 45, 191, 131, 28, 13, 191, 44, 116, 121, 60, 192, 241, 77, 62, 115, 18, 218, 61, 28, 102, 226, 62, 192, 244, 61, 190, 2, 1, 203, 189, 228, 139, 60, 61, 67, 115, 111, 190, 226, 24, 140, 61, 168, 150, 223, 188, 60, 224, 242, 187, 230, 48, 193, 189, 209, 125, 27, 190, 129, 38, 140, 60, 50, 130, 59, 189, 167, 117, 18, 62, 0, 128, 55, 190, 189, 244, 166, 189, 169, 184, 158, 189, 81, 140, 211, 189, 79, 223, 20, 190, 125, 122, 22, 62, 95, 154, 102, 190, 166, 98, 34, 60, 167, 23, 65, 62, 149, 32, 27, 190, 187, 112, 243, 61, 178, 166, 67, 190, 238, 81, 109, 190, 233, 202, 101, 190, 177, 15, 131, 190, 199, 8, 3, 190, 106, 78, 62, 62, 187, 222, 237, 188, 73, 234, 177, 190, 212, 43, 55, 62, 229, 220, 16, 62, 184, 29, 224, 61, 211, 209, 120, 62, 223, 33, 107, 61, 230, 212, 223, 189, 247, 170, 218, 61, 35, 192, 80, 61, 196, 88, 135, 62, 111, 132, 30, 62, 156, 201, 98, 61, 150, 223, 100, 62, 102, 49, 164, 62, 52, 82, 255, 189, 113, 1, 239, 61, 40, 112, 166, 61, 182, 85, 173, 188, 156, 37, 100, 62, 115, 249, 13, 62, 184, 185, 141, 190, 226, 12, 40, 62, 38, 22, 53, 190, 135, 140, 186, 189, 72, 40, 33, 191, 206, 53, 255, 61, 165, 1, 25, 190, 164, 235, 175, 191, 205, 176, 178, 191, 243, 3, 41, 190, 141, 145, 168, 187, 102, 223, 122, 61, 211, 237, 145, 62, 111, 47, 107, 62, 173, 212, 175, 61, 250, 191, 163, 61, 63, 230, 82, 62, 11, 199, 230, 61, 68, 13, 209, 61, 131, 76, 9, 62, 18, 184, 44, 189, 135, 78, 32, 61, 28, 247, 240, 61, 186, 73, 28, 188, 105, 101, 33, 61, 91, 174, 25, 62, 139, 100, 38, 62, 180, 30, 46, 62, 167, 114, 14, 191, 74, 80, 246, 189, 27, 231, 98, 190, 223, 163, 144, 62, 200, 90, 190, 190, 189, 88, 80, 61, 217, 80, 132, 61, 175, 114, 255, 61, 159, 37, 9, 191, 191, 9, 137, 188, 95, 93, 146, 62, 254, 254, 175, 191, 102, 48, 200, 191, 202, 28, 4, 191, 215, 235, 93, 189, 170, 218, 228, 59, 46, 91, 141, 189, 114, 123, 59, 62, 203, 255, 73, 62, 201, 70, 240, 189, 77, 210, 233, 62, 166, 153, 5, 61, 57, 255, 30, 190, 80, 66, 9, 62, 102, 24, 0, 191, 23, 45, 240, 189, 34, 127, 50, 191, 215, 116, 60, 62, 228, 141, 252, 60, 204, 182, 189, 61, 46, 67, 140, 61, 174, 30, 31, 190, 159, 254, 111, 190, 30, 198, 174, 61, 61, 201, 39, 191, 149, 240, 45, 61, 87, 103, 208, 189, 70, 159, 209, 61, 21, 32, 229, 190, 55, 184, 41, 61, 138, 216, 227, 62, 53, 10, 202, 190, 54, 110, 186, 189, 231, 24, 62, 62, 133, 240, 188, 62, 163, 174, 94, 62, 64, 5, 212, 190, 115, 138, 152, 62, 70, 26, 101, 190, 158, 10, 94, 190, 186, 206, 37, 191, 76, 148, 114, 61, 183, 236, 0, 61, 135, 142, 194, 61, 201, 111, 136, 189, 232, 219, 32, 190, 104, 115, 132, 189, 179, 21, 51, 189, 239, 88, 41, 61, 138, 190, 208, 189, 204, 97, 33, 62, 235, 45, 57, 189, 120, 140, 168, 189, 98, 58, 39, 61, 114, 144, 42, 190, 182, 115, 91, 189, 245, 125, 147, 60, 235, 193, 13, 61, 194, 113, 162, 61, 68, 146, 52, 190, 28, 24, 212, 61, 62, 166, 96, 189, 151, 132, 241, 189, 213, 78, 223, 61, 248, 84, 204, 61, 246, 205, 18, 190, 49, 116, 9, 189, 224, 172, 12, 62, 194, 235, 50, 190, 186, 226, 183, 188, 55, 109, 204, 188, 232, 205, 193, 189, 176, 255, 24, 62, 149, 37, 5, 62, 45, 66, 0, 191, 129, 157, 172, 61, 137, 156, 250, 191, 222, 25, 130, 188, 86, 164, 114, 62, 208, 65, 153, 60, 172, 115, 17, 63, 232, 250, 66, 191, 145, 140, 162, 190, 22, 160, 179, 189, 154, 129, 105, 62, 189, 69, 61, 190, 82, 5, 166, 62, 173, 140, 58, 62, 106, 200, 202, 62, 238, 48, 70, 191, 233, 142, 163, 190, 24, 213, 153, 189, 84, 161, 120, 191, 88, 123, 125, 62, 28, 112, 212, 62, 189, 216, 82, 189, 149, 65, 177, 62, 103, 233, 206, 189, 139, 219, 98, 62, 118, 255, 40, 62, 242, 236, 180, 187, 236, 9, 192, 190, 10, 249, 252, 61, 222, 166, 180, 190, 114, 72, 117, 63, 193, 62, 56, 62, 128, 124, 85, 191, 58, 180, 167, 62, 193, 78, 26, 61, 130, 179, 196, 61, 96, 227, 17, 61, 219, 238, 55, 60, 213, 224, 225, 61, 237, 99, 146, 62, 41, 7, 138, 188, 153, 70, 143, 61, 161, 180, 146, 62, 31, 176, 62, 62, 64, 125, 132, 191, 21, 248, 14, 62, 119, 25, 206, 190, 103, 4, 36, 62, 0, 135, 59, 190, 114, 215, 162, 189, 90, 140, 102, 189, 94, 114, 197, 59, 115, 232, 177, 190, 235, 148, 4, 189, 119, 182, 140, 62, 3, 151, 87, 190, 94, 24, 175, 190, 200, 39, 2, 191, 218, 128, 19, 62, 197, 165, 189, 190, 230, 121, 122, 62, 148, 181, 240, 61, 197, 174, 167, 58, 64, 197, 180, 189, 74, 198, 89, 61, 31, 3, 96, 188, 172, 14, 159, 187, 53, 16, 227, 189, 235, 146, 17, 61, 72, 163, 92, 189, 211, 216, 194, 61, 238, 166, 116, 189, 207, 40, 16, 190, 226, 106, 56, 190, 75, 183, 217, 61, 109, 127, 39, 61, 84, 220, 68, 189, 159, 103, 20, 62, 60, 146, 101, 61, 158, 96, 6, 190, 229, 77, 13, 188, 44, 46, 115, 189, 76, 116, 92, 190, 234, 94, 14, 190, 34, 222, 163, 189, 167, 123, 0, 190, 44, 87, 78, 190, 24, 241, 47, 190, 246, 36, 102, 190, 194, 39, 193, 61, 222, 192, 27, 190, 171, 96, 55, 62, 135, 117, 149, 189, 104, 190, 4, 190, 210, 241, 84, 60, 182, 170, 48, 190, 249, 86, 116, 62, 59, 83, 1, 190, 126, 214, 142, 62, 33, 249, 203, 60, 100, 254, 146, 62, 202, 106, 34, 190, 189, 27, 125, 190, 19, 41, 141, 61, 82, 204, 1, 59, 231, 162, 28, 190, 218, 201, 46, 61, 166, 71, 40, 188, 97, 255, 103, 61, 41, 66, 139, 61, 137, 254, 191, 188, 206, 113, 180, 60, 105, 211, 142, 190, 173, 75, 170, 189, 194, 171, 63, 62, 46, 119, 5, 189, 220, 243, 29, 191, 210, 107, 167, 189, 174, 145, 35, 190, 112, 12, 192, 62, 26, 138, 195, 187, 120, 138, 16, 191, 156, 226, 65, 61, 174, 157, 46, 62, 187, 114, 199, 58, 58, 9, 207, 188, 164, 122, 158, 190, 131, 225, 68, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 82, 83, 62, 88, 139, 131, 189, 200, 199, 106, 62, 17, 159, 16, 61, 203, 11, 129, 62, 66, 153, 97, 190, 233, 28, 189, 61, 198, 125, 148, 62, 255, 27, 95, 190, 2, 229, 21, 190, 6, 232, 191, 188, 56, 56, 167, 189, 45, 144, 192, 190, 128, 27, 57, 190, 106, 73, 244, 189, 165, 28, 180, 62, 53, 116, 21, 62, 225, 189, 146, 62, 11, 252, 237, 189, 161, 244, 34, 189, 132, 29, 95, 62, 122, 182, 170, 189, 88, 163, 231, 61, 68, 78, 121, 190, 123, 121, 40, 60, 219, 4, 225, 61, 23, 224, 36, 190, 166, 2, 82, 190, 120, 137, 0, 62, 250, 146, 173, 61, 89, 233, 7, 61, 27, 146, 59, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 128, 198, 190, 75, 43, 192, 62, 93, 166, 9, 189, 243, 239, 100, 63, 243, 200, 76, 60, 185, 84, 159, 62, 237, 135, 2, 63, 170, 192, 241, 189, 193, 134, 34, 62, 221, 119, 71, 188, 153, 102, 4, 191, 72, 37, 34, 60, 18, 41, 15, 63, 4, 178, 24, 189, 244, 100, 190, 190, 201, 82, 24, 191, 229, 17, 99, 63, 76, 57, 66, 191, 116, 68, 0, 59, 167, 124, 131, 62, 7, 240, 40, 61, 239, 33, 142, 190, 172, 218, 220, 62, 223, 147, 159, 189, 192, 215, 242, 62, 113, 178, 134, 62, 140, 35, 205, 62, 132, 226, 2, 62, 131, 32, 142, 191, 20, 122, 167, 189, 50, 134, 237, 61, 149, 241, 66, 189, 56, 45, 222, 189, 167, 158, 12, 190, 173, 60, 146, 190, 15, 35, 22, 63, 128, 27, 177, 190, 180, 8, 19, 187, 165, 166, 109, 62, 218, 86, 115, 190, 56, 139, 221, 189, 83, 204, 137, 188, 139, 195, 60, 62, 230, 66, 95, 190, 11, 152, 9, 190, 248, 46, 90, 62, 8, 134, 16, 61, 78, 34, 16, 190, 152, 206, 193, 62, 75, 65, 239, 189, 251, 92, 177, 189, 0, 210, 0, 191, 5, 237, 40, 190, 125, 91, 113, 189, 146, 124, 81, 190, 219, 56, 60, 60, 241, 251, 228, 61, 57, 222, 218, 190, 167, 244, 104, 190, 109, 52, 27, 61, 38, 128, 96, 62, 141, 43, 41, 191, 88, 37, 28, 60, 77, 131, 52, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 185, 36, 190, 214, 119, 16, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {215, 7, 69, 63, 65, 108, 15, 64, 27, 100, 52, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {213, 49, 107, 63, 150, 175, 43, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0054/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}