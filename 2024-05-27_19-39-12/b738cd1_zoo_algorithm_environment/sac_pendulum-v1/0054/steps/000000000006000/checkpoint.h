// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 133, 100, 190, 25, 243, 129, 190, 227, 69, 131, 190, 229, 111, 245, 190, 90, 133, 59, 62, 96, 87, 145, 190, 144, 237, 133, 190, 21, 107, 175, 62, 63, 249, 16, 63, 40, 120, 212, 62, 162, 233, 14, 63, 150, 112, 211, 190, 88, 15, 236, 61, 205, 212, 21, 191, 5, 77, 46, 63, 20, 93, 231, 62, 124, 201, 34, 191, 90, 102, 140, 190, 109, 203, 57, 62, 160, 59, 55, 191, 150, 201, 57, 63, 31, 220, 3, 62, 66, 230, 248, 62, 80, 125, 49, 63, 32, 21, 168, 62, 223, 250, 160, 190, 54, 121, 254, 190, 243, 163, 25, 63, 69, 131, 205, 190, 179, 55, 191, 190, 178, 206, 249, 190, 120, 5, 209, 62, 217, 131, 240, 189, 137, 122, 3, 63, 66, 128, 182, 62, 97, 254, 176, 62, 61, 229, 47, 191, 211, 193, 40, 191, 55, 7, 19, 190, 153, 29, 245, 190, 26, 186, 30, 61, 97, 61, 246, 190, 82, 59, 160, 189, 212, 225, 110, 191, 171, 94, 139, 189, 57, 4, 101, 62, 172, 44, 78, 62, 43, 88, 223, 62, 231, 50, 26, 187, 154, 225, 23, 63, 2, 104, 16, 63, 72, 194, 5, 191, 224, 36, 3, 191, 196, 45, 23, 191, 125, 7, 173, 190, 91, 176, 66, 190, 94, 20, 19, 63, 216, 122, 146, 62, 7, 13, 250, 62, 180, 71, 155, 190, 57, 242, 33, 63, 152, 166, 168, 63, 196, 181, 167, 62, 88, 9, 86, 62, 135, 5, 12, 62, 133, 47, 0, 63, 36, 101, 102, 63, 157, 164, 63, 63, 49, 218, 145, 62, 160, 13, 1, 191, 46, 154, 58, 63, 245, 166, 199, 60, 147, 80, 39, 191, 87, 38, 44, 63, 76, 228, 138, 61, 30, 144, 237, 62, 149, 154, 121, 63, 248, 34, 201, 62, 150, 74, 12, 190, 36, 47, 6, 191, 10, 244, 88, 63, 17, 147, 109, 62, 98, 239, 225, 190, 9, 16, 179, 190, 242, 95, 125, 63, 35, 3, 40, 190, 28, 63, 41, 189, 205, 248, 76, 63, 246, 134, 49, 191, 133, 209, 198, 190, 160, 12, 47, 191, 209, 20, 68, 191, 138, 242, 238, 62, 43, 103, 28, 191, 137, 153, 221, 189, 243, 217, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 40, 68, 191, 108, 78, 118, 190, 156, 171, 164, 189, 66, 43, 190, 62, 109, 164, 89, 62, 52, 30, 25, 63, 14, 154, 86, 62, 104, 64, 199, 62, 54, 217, 96, 190, 141, 43, 0, 62, 80, 49, 188, 61, 212, 223, 152, 62, 156, 102, 42, 63, 194, 220, 2, 191, 186, 33, 195, 62, 237, 73, 210, 62, 205, 248, 9, 191, 88, 216, 189, 190, 243, 12, 186, 190, 5, 226, 137, 62, 35, 200, 125, 190, 252, 135, 7, 62, 37, 233, 142, 62, 43, 144, 102, 188, 113, 89, 222, 62, 27, 26, 107, 190, 175, 146, 124, 189, 254, 11, 185, 190, 188, 233, 159, 61, 103, 186, 1, 61, 110, 149, 243, 190, 127, 101, 77, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 228, 37, 190, 120, 68, 20, 62, 57, 237, 191, 190, 124, 228, 40, 190, 83, 140, 174, 189, 117, 7, 204, 187, 138, 196, 75, 62, 217, 205, 134, 189, 150, 42, 128, 190, 218, 211, 33, 190, 26, 119, 47, 189, 243, 202, 210, 62, 59, 68, 109, 189, 52, 239, 227, 61, 121, 54, 55, 190, 248, 79, 140, 190, 32, 165, 181, 189, 15, 130, 89, 62, 135, 19, 51, 191, 141, 99, 150, 62, 115, 34, 11, 63, 73, 246, 171, 62, 236, 65, 216, 62, 0, 121, 104, 189, 93, 223, 36, 61, 75, 43, 212, 62, 215, 27, 62, 190, 237, 108, 165, 61, 200, 5, 128, 62, 8, 199, 164, 190, 8, 55, 114, 190, 26, 176, 73, 61, 77, 99, 11, 62, 81, 193, 33, 190, 251, 33, 145, 62, 56, 199, 213, 61, 252, 53, 26, 62, 235, 32, 179, 61, 51, 120, 182, 190, 47, 227, 47, 62, 225, 244, 153, 61, 37, 245, 113, 62, 96, 54, 242, 189, 234, 223, 71, 61, 115, 164, 234, 61, 225, 76, 95, 190, 60, 100, 29, 62, 80, 205, 10, 62, 164, 152, 107, 190, 113, 59, 67, 190, 63, 168, 115, 62, 78, 216, 45, 189, 227, 66, 193, 190, 90, 217, 47, 190, 170, 177, 135, 61, 180, 20, 154, 189, 235, 50, 112, 190, 42, 88, 50, 189, 40, 27, 138, 62, 36, 62, 223, 61, 10, 251, 171, 61, 52, 90, 182, 62, 252, 113, 219, 190, 28, 250, 28, 62, 247, 176, 160, 189, 100, 32, 153, 189, 59, 114, 155, 61, 69, 67, 225, 189, 113, 172, 79, 189, 185, 246, 149, 62, 99, 54, 198, 61, 0, 36, 55, 189, 204, 83, 116, 189, 216, 220, 3, 62, 97, 20, 49, 62, 102, 195, 70, 62, 163, 67, 36, 189, 206, 154, 150, 61, 100, 86, 163, 61, 159, 165, 204, 61, 4, 219, 202, 189, 142, 1, 187, 189, 127, 195, 95, 190, 0, 201, 136, 62, 180, 190, 185, 188, 158, 130, 217, 189, 186, 63, 151, 62, 19, 132, 222, 60, 138, 22, 1, 190, 94, 68, 185, 61, 229, 208, 246, 61, 76, 41, 128, 189, 84, 200, 135, 61, 177, 110, 147, 189, 10, 164, 165, 62, 117, 199, 186, 61, 117, 252, 114, 62, 54, 134, 22, 190, 148, 103, 116, 62, 89, 93, 65, 62, 111, 167, 175, 62, 3, 128, 137, 60, 44, 54, 63, 190, 239, 240, 248, 61, 41, 209, 103, 62, 111, 3, 230, 61, 233, 172, 204, 60, 55, 204, 162, 190, 75, 63, 124, 60, 177, 227, 157, 190, 140, 31, 8, 62, 158, 48, 6, 62, 179, 180, 197, 190, 115, 8, 189, 189, 3, 48, 222, 62, 204, 87, 104, 190, 187, 16, 234, 190, 79, 249, 82, 189, 133, 171, 177, 189, 205, 201, 19, 59, 154, 60, 229, 60, 63, 162, 11, 191, 159, 91, 30, 62, 146, 137, 126, 62, 49, 223, 114, 62, 192, 130, 49, 62, 207, 80, 218, 190, 88, 101, 123, 190, 228, 34, 55, 62, 107, 243, 103, 189, 82, 164, 56, 62, 96, 235, 92, 189, 100, 193, 29, 62, 42, 219, 2, 62, 180, 119, 98, 189, 16, 5, 198, 61, 119, 211, 171, 61, 1, 169, 222, 61, 161, 34, 116, 60, 6, 48, 171, 189, 25, 57, 0, 62, 167, 126, 46, 190, 2, 36, 44, 61, 32, 65, 60, 62, 9, 2, 53, 190, 159, 154, 191, 189, 5, 133, 112, 62, 170, 167, 157, 60, 204, 217, 139, 190, 178, 26, 69, 189, 105, 196, 204, 189, 99, 120, 216, 189, 102, 77, 117, 190, 96, 72, 74, 190, 138, 241, 139, 62, 100, 34, 58, 189, 190, 61, 3, 190, 239, 174, 121, 62, 95, 141, 132, 189, 189, 247, 139, 60, 153, 118, 34, 62, 211, 13, 77, 189, 20, 166, 220, 188, 194, 197, 40, 62, 113, 149, 91, 61, 183, 243, 30, 62, 202, 27, 254, 60, 72, 46, 23, 188, 126, 81, 89, 62, 49, 253, 124, 62, 141, 205, 172, 190, 250, 249, 103, 62, 217, 39, 30, 188, 236, 153, 98, 188, 42, 5, 55, 62, 250, 163, 145, 62, 164, 169, 196, 61, 181, 168, 33, 62, 225, 98, 48, 62, 236, 44, 205, 189, 27, 32, 175, 190, 244, 252, 229, 61, 243, 246, 20, 62, 114, 111, 242, 190, 196, 187, 50, 191, 96, 33, 70, 190, 206, 13, 3, 62, 97, 29, 6, 62, 33, 95, 170, 61, 175, 148, 44, 62, 26, 190, 30, 61, 198, 165, 88, 190, 154, 73, 40, 61, 200, 85, 197, 59, 78, 78, 182, 62, 139, 241, 209, 188, 154, 117, 93, 62, 1, 149, 67, 189, 95, 30, 118, 190, 229, 24, 201, 61, 111, 147, 191, 60, 98, 170, 253, 188, 30, 235, 30, 62, 50, 89, 162, 190, 152, 1, 123, 62, 177, 104, 110, 61, 155, 194, 210, 189, 249, 137, 23, 62, 75, 217, 193, 190, 138, 230, 137, 188, 156, 247, 7, 63, 19, 91, 63, 190, 103, 207, 204, 190, 25, 223, 250, 189, 246, 34, 218, 189, 227, 206, 178, 62, 66, 236, 15, 62, 21, 93, 254, 190, 240, 32, 27, 62, 49, 102, 225, 188, 92, 151, 171, 189, 212, 6, 71, 62, 206, 131, 109, 190, 207, 250, 6, 62, 170, 15, 13, 189, 192, 169, 60, 61, 0, 207, 29, 190, 29, 61, 212, 189, 78, 103, 146, 189, 130, 106, 173, 61, 65, 119, 4, 62, 147, 254, 141, 60, 219, 135, 23, 190, 252, 31, 10, 190, 105, 106, 241, 188, 219, 236, 11, 186, 159, 253, 79, 62, 9, 19, 75, 190, 100, 85, 208, 61, 112, 84, 116, 62, 122, 44, 118, 189, 37, 96, 142, 190, 148, 187, 85, 190, 145, 99, 74, 188, 225, 153, 230, 189, 250, 30, 17, 189, 224, 241, 34, 62, 3, 220, 185, 189, 143, 90, 10, 189, 207, 150, 100, 190, 31, 0, 144, 188, 197, 154, 103, 190, 25, 224, 157, 62, 153, 216, 35, 60, 209, 126, 131, 189, 240, 16, 39, 190, 201, 94, 172, 189, 27, 74, 27, 190, 150, 21, 13, 188, 59, 132, 255, 60, 63, 24, 0, 62, 242, 237, 108, 189, 55, 96, 224, 61, 6, 31, 251, 189, 11, 122, 51, 189, 131, 212, 255, 189, 184, 178, 79, 190, 193, 55, 31, 61, 248, 88, 148, 189, 62, 254, 205, 61, 146, 188, 15, 189, 96, 25, 146, 61, 190, 141, 34, 190, 247, 61, 227, 188, 126, 78, 105, 61, 170, 174, 187, 60, 51, 147, 116, 61, 160, 56, 12, 190, 93, 234, 42, 190, 5, 1, 217, 61, 11, 212, 170, 61, 237, 26, 218, 61, 8, 223, 165, 189, 195, 154, 126, 61, 98, 217, 159, 189, 13, 134, 39, 190, 152, 168, 218, 60, 218, 75, 73, 188, 32, 69, 64, 61, 218, 22, 164, 61, 192, 188, 173, 189, 184, 22, 92, 61, 1, 217, 84, 188, 135, 57, 17, 190, 100, 92, 245, 189, 28, 145, 160, 189, 166, 58, 173, 61, 80, 233, 56, 190, 87, 105, 75, 190, 141, 202, 29, 61, 179, 5, 103, 61, 113, 36, 237, 61, 136, 218, 12, 61, 213, 183, 78, 61, 60, 1, 70, 189, 54, 149, 13, 189, 140, 158, 37, 62, 217, 229, 241, 60, 221, 76, 1, 60, 96, 251, 81, 189, 214, 219, 148, 189, 37, 55, 146, 61, 212, 90, 177, 189, 122, 168, 24, 62, 42, 243, 5, 189, 139, 206, 57, 189, 89, 19, 5, 61, 2, 237, 57, 190, 41, 240, 242, 60, 58, 237, 3, 190, 68, 130, 109, 189, 194, 3, 140, 190, 177, 170, 151, 189, 148, 21, 8, 62, 193, 148, 151, 61, 116, 141, 105, 190, 46, 157, 130, 61, 43, 10, 156, 188, 191, 195, 11, 62, 164, 189, 181, 190, 193, 29, 158, 190, 76, 240, 190, 189, 163, 65, 147, 190, 106, 72, 249, 189, 5, 235, 79, 189, 136, 170, 24, 62, 178, 42, 246, 60, 91, 157, 169, 188, 14, 114, 124, 61, 254, 132, 191, 62, 178, 83, 211, 62, 187, 32, 54, 61, 132, 70, 55, 62, 34, 0, 83, 190, 42, 192, 181, 189, 141, 241, 82, 188, 52, 238, 188, 189, 58, 78, 3, 190, 27, 16, 111, 189, 179, 98, 147, 190, 155, 100, 59, 190, 213, 40, 79, 190, 84, 10, 80, 62, 38, 3, 248, 61, 255, 65, 18, 62, 73, 251, 6, 61, 142, 196, 13, 62, 208, 38, 182, 190, 236, 226, 75, 61, 148, 136, 86, 62, 60, 161, 27, 62, 108, 8, 51, 62, 148, 155, 109, 62, 69, 69, 204, 61, 93, 252, 27, 61, 57, 91, 67, 191, 67, 114, 51, 189, 223, 159, 36, 62, 20, 178, 119, 60, 182, 2, 88, 191, 156, 73, 99, 62, 133, 234, 177, 190, 101, 65, 71, 190, 179, 74, 35, 190, 83, 28, 1, 190, 162, 60, 251, 62, 44, 112, 53, 62, 63, 240, 156, 189, 15, 94, 145, 59, 3, 199, 233, 60, 117, 188, 170, 62, 19, 37, 145, 62, 108, 214, 242, 189, 25, 234, 161, 188, 96, 171, 95, 62, 16, 167, 15, 62, 30, 62, 80, 190, 129, 237, 148, 61, 201, 4, 80, 60, 249, 17, 77, 190, 19, 228, 201, 189, 101, 148, 45, 188, 150, 40, 137, 61, 69, 170, 71, 190, 56, 207, 180, 189, 68, 51, 65, 62, 50, 34, 21, 60, 253, 243, 150, 62, 198, 107, 226, 189, 161, 47, 153, 189, 235, 126, 216, 61, 160, 233, 79, 188, 100, 148, 93, 190, 148, 175, 115, 60, 179, 216, 178, 62, 142, 198, 1, 190, 165, 117, 7, 62, 115, 40, 182, 62, 49, 50, 83, 62, 182, 12, 20, 189, 93, 36, 170, 189, 122, 191, 129, 60, 37, 67, 195, 190, 188, 133, 246, 189, 185, 28, 199, 189, 147, 223, 163, 61, 16, 151, 113, 190, 249, 56, 215, 61, 196, 219, 89, 190, 174, 75, 203, 189, 29, 139, 151, 61, 173, 159, 174, 62, 58, 56, 76, 62, 3, 183, 51, 61, 101, 31, 118, 190, 216, 98, 75, 190, 171, 248, 231, 61, 158, 107, 254, 61, 5, 227, 5, 62, 171, 182, 6, 62, 128, 123, 248, 61, 32, 98, 130, 190, 234, 184, 51, 58, 54, 115, 243, 61, 210, 86, 75, 190, 62, 146, 167, 62, 209, 1, 146, 61, 203, 194, 131, 189, 24, 50, 33, 62, 151, 245, 141, 190, 42, 247, 220, 189, 174, 226, 183, 61, 110, 127, 67, 61, 156, 67, 165, 189, 115, 128, 159, 188, 228, 166, 181, 190, 68, 80, 144, 61, 119, 88, 206, 61, 185, 219, 187, 61, 80, 233, 14, 191, 89, 250, 213, 61, 182, 244, 171, 61, 134, 24, 165, 62, 47, 227, 148, 62, 206, 248, 153, 60, 161, 154, 202, 60, 225, 154, 130, 62, 184, 119, 102, 187, 64, 193, 201, 190, 170, 230, 12, 190, 32, 14, 203, 61, 51, 94, 60, 61, 194, 36, 137, 62, 86, 142, 186, 61, 129, 97, 226, 189, 119, 236, 190, 189, 89, 35, 197, 62, 91, 72, 255, 189, 232, 76, 2, 62, 94, 0, 185, 189, 180, 100, 140, 190, 79, 195, 172, 190, 249, 217, 21, 61, 44, 85, 69, 190, 111, 178, 153, 62, 8, 70, 176, 62, 113, 10, 182, 189, 206, 31, 2, 189, 108, 233, 123, 62, 6, 186, 115, 189, 148, 2, 150, 59, 148, 124, 24, 62, 242, 5, 176, 191, 163, 142, 60, 189, 94, 207, 44, 190, 69, 91, 125, 61, 112, 207, 176, 62, 103, 224, 39, 191, 113, 73, 149, 61, 9, 67, 24, 189, 124, 112, 32, 188, 0, 225, 181, 189, 43, 104, 166, 62, 120, 80, 238, 61, 186, 144, 39, 62, 19, 212, 86, 191, 142, 130, 136, 61, 241, 156, 130, 188, 55, 46, 7, 191, 96, 234, 35, 60, 13, 187, 31, 62, 22, 71, 253, 61, 40, 86, 206, 61, 48, 216, 131, 190, 219, 6, 84, 188, 55, 189, 39, 62, 149, 177, 11, 191, 228, 254, 71, 60, 143, 106, 58, 62, 77, 93, 72, 62, 169, 231, 13, 63, 103, 56, 62, 61, 149, 195, 104, 190, 25, 202, 169, 61, 14, 43, 219, 61, 61, 173, 211, 61, 62, 125, 222, 61, 168, 111, 80, 190, 234, 55, 141, 190, 143, 30, 243, 61, 220, 71, 52, 61, 50, 224, 126, 62, 93, 59, 149, 61, 96, 251, 96, 190, 250, 181, 203, 59, 26, 224, 22, 191, 101, 221, 108, 190, 55, 245, 178, 62, 209, 22, 88, 190, 79, 79, 127, 191, 42, 233, 170, 62, 94, 21, 206, 190, 167, 193, 155, 190, 143, 49, 101, 190, 231, 135, 144, 190, 16, 166, 3, 63, 91, 201, 218, 62, 212, 75, 240, 190, 68, 123, 153, 62, 146, 165, 20, 61, 187, 57, 73, 63, 23, 7, 124, 62, 236, 9, 188, 190, 33, 104, 140, 189, 213, 250, 138, 189, 240, 27, 169, 62, 208, 131, 211, 191, 43, 86, 227, 189, 143, 14, 22, 191, 223, 202, 212, 61, 5, 114, 147, 190, 136, 57, 25, 191, 118, 155, 44, 190, 246, 163, 146, 189, 62, 132, 43, 62, 101, 147, 242, 61, 166, 173, 226, 61, 188, 51, 18, 60, 234, 215, 74, 62, 117, 111, 102, 191, 139, 143, 50, 190, 140, 174, 21, 62, 8, 1, 146, 191, 10, 105, 156, 62, 174, 246, 78, 62, 85, 48, 70, 61, 198, 151, 134, 61, 97, 205, 173, 61, 0, 169, 9, 189, 59, 150, 106, 62, 83, 86, 122, 191, 184, 57, 11, 190, 181, 69, 24, 63, 82, 244, 177, 59, 252, 36, 89, 62, 215, 162, 33, 62, 7, 170, 193, 61, 160, 202, 183, 61, 169, 195, 130, 189, 41, 106, 247, 188, 114, 51, 173, 61, 87, 28, 34, 189, 131, 58, 32, 190, 227, 136, 116, 189, 154, 240, 205, 189, 40, 124, 141, 189, 102, 244, 42, 189, 168, 12, 115, 61, 97, 95, 250, 189, 14, 145, 22, 61, 120, 139, 31, 62, 170, 21, 163, 61, 210, 198, 239, 61, 184, 112, 29, 190, 227, 29, 13, 61, 111, 38, 0, 188, 208, 105, 3, 190, 110, 204, 58, 190, 96, 8, 49, 61, 36, 226, 12, 62, 225, 11, 211, 188, 49, 9, 219, 61, 137, 173, 215, 61, 185, 66, 170, 189, 231, 66, 8, 188, 6, 188, 0, 190, 242, 217, 195, 189, 192, 236, 106, 189, 198, 173, 80, 62, 232, 45, 33, 62, 247, 218, 29, 62, 225, 153, 83, 61, 92, 85, 131, 190, 81, 144, 74, 62, 235, 70, 16, 190, 166, 175, 75, 190, 91, 197, 157, 189, 255, 231, 54, 62, 122, 125, 108, 186, 53, 82, 68, 62, 77, 152, 182, 61, 255, 114, 30, 189, 221, 13, 227, 189, 121, 145, 153, 61, 37, 205, 198, 60, 249, 110, 117, 189, 180, 219, 194, 188, 103, 161, 149, 61, 7, 210, 200, 187, 228, 126, 115, 190, 166, 224, 89, 61, 183, 203, 139, 190, 121, 56, 114, 189, 151, 72, 136, 187, 60, 161, 109, 190, 187, 222, 182, 189, 13, 56, 71, 190, 175, 176, 94, 62, 242, 215, 245, 186, 7, 179, 128, 59, 183, 247, 72, 62, 17, 248, 120, 62, 247, 240, 72, 62, 66, 75, 18, 62, 52, 200, 188, 61, 191, 193, 89, 188, 125, 171, 54, 190, 188, 107, 130, 61, 207, 103, 87, 188, 91, 181, 13, 61, 237, 41, 185, 62, 46, 182, 89, 190, 95, 177, 29, 62, 246, 238, 152, 189, 232, 38, 142, 189, 182, 27, 133, 62, 194, 50, 106, 190, 139, 148, 141, 189, 155, 61, 192, 62, 160, 221, 243, 61, 216, 8, 155, 190, 141, 62, 123, 190, 150, 104, 27, 62, 60, 90, 13, 62, 101, 103, 195, 61, 89, 211, 102, 190, 102, 204, 215, 61, 30, 202, 40, 62, 233, 18, 211, 189, 198, 56, 77, 61, 43, 226, 190, 190, 123, 166, 135, 189, 105, 119, 52, 60, 155, 91, 53, 62, 205, 238, 170, 189, 54, 71, 15, 62, 70, 28, 49, 190, 24, 151, 45, 59, 213, 250, 129, 62, 122, 207, 84, 61, 98, 79, 157, 189, 148, 95, 4, 189, 164, 15, 93, 61, 250, 107, 8, 62, 250, 85, 33, 190, 212, 81, 5, 62, 29, 22, 74, 190, 74, 219, 14, 189, 199, 40, 192, 59, 181, 255, 65, 62, 233, 204, 97, 190, 84, 203, 77, 61, 83, 237, 234, 62, 234, 38, 84, 61, 107, 54, 189, 62, 50, 241, 77, 190, 241, 212, 92, 60, 80, 105, 168, 62, 60, 65, 174, 189, 115, 166, 231, 187, 220, 155, 209, 62, 166, 204, 8, 62, 128, 120, 30, 61, 235, 9, 142, 61, 232, 103, 216, 60, 228, 219, 192, 189, 69, 153, 144, 62, 88, 212, 111, 62, 185, 130, 82, 62, 73, 98, 166, 61, 207, 113, 163, 190, 5, 128, 85, 62, 6, 247, 2, 61, 92, 14, 195, 59, 198, 201, 238, 60, 58, 84, 80, 190, 87, 147, 181, 188, 59, 107, 130, 190, 13, 159, 83, 62, 242, 136, 160, 62, 138, 65, 7, 189, 62, 207, 64, 190, 114, 82, 207, 62, 212, 209, 239, 189, 250, 25, 179, 190, 188, 128, 134, 190, 112, 109, 86, 61, 10, 204, 154, 61, 100, 201, 143, 190, 102, 61, 240, 190, 136, 154, 207, 60, 53, 212, 85, 62, 18, 207, 190, 60, 232, 168, 198, 62, 186, 236, 135, 190, 48, 70, 144, 189, 228, 139, 60, 61, 67, 115, 111, 190, 16, 107, 145, 61, 168, 150, 223, 188, 112, 151, 140, 187, 236, 90, 192, 189, 56, 56, 24, 190, 104, 103, 161, 60, 50, 130, 59, 189, 167, 117, 18, 62, 0, 128, 55, 190, 92, 80, 162, 189, 231, 27, 143, 189, 81, 140, 211, 189, 173, 113, 15, 190, 163, 63, 25, 62, 180, 103, 100, 190, 166, 98, 34, 60, 127, 6, 68, 62, 149, 32, 27, 190, 12, 11, 242, 61, 72, 226, 64, 190, 107, 238, 108, 190, 182, 225, 100, 190, 139, 151, 129, 190, 210, 14, 2, 190, 88, 104, 65, 62, 187, 222, 237, 188, 120, 30, 178, 190, 212, 43, 55, 62, 11, 178, 20, 62, 184, 29, 224, 61, 254, 133, 135, 189, 207, 235, 49, 61, 90, 53, 226, 187, 48, 92, 110, 61, 201, 112, 102, 61, 182, 14, 21, 62, 57, 87, 9, 62, 144, 8, 159, 60, 152, 161, 128, 62, 128, 111, 146, 62, 119, 132, 190, 189, 216, 87, 117, 188, 46, 198, 77, 189, 106, 230, 149, 189, 170, 204, 71, 62, 20, 25, 98, 61, 6, 83, 213, 188, 75, 221, 225, 61, 22, 252, 37, 190, 146, 47, 53, 190, 131, 205, 248, 190, 107, 154, 137, 61, 113, 87, 81, 190, 125, 137, 233, 190, 138, 42, 67, 191, 81, 36, 133, 189, 183, 71, 24, 61, 31, 143, 64, 61, 229, 78, 15, 62, 255, 135, 37, 62, 1, 69, 189, 188, 144, 52, 244, 188, 28, 14, 61, 60, 108, 79, 231, 61, 96, 169, 125, 61, 204, 142, 55, 61, 103, 254, 142, 189, 253, 69, 139, 61, 116, 63, 117, 61, 212, 131, 57, 189, 98, 250, 181, 60, 197, 222, 17, 62, 17, 82, 247, 61, 134, 126, 201, 61, 217, 46, 61, 190, 142, 111, 7, 190, 66, 221, 43, 62, 219, 215, 126, 62, 255, 45, 165, 190, 148, 27, 254, 61, 75, 136, 96, 188, 39, 38, 189, 187, 30, 113, 13, 190, 61, 250, 5, 190, 12, 226, 159, 62, 248, 13, 186, 190, 33, 22, 22, 191, 20, 188, 104, 190, 227, 174, 2, 190, 136, 100, 179, 188, 119, 195, 230, 189, 224, 197, 82, 62, 250, 209, 59, 61, 152, 150, 118, 189, 216, 29, 22, 189, 32, 37, 82, 189, 154, 152, 22, 61, 200, 16, 207, 61, 154, 23, 54, 190, 146, 125, 74, 60, 153, 16, 200, 190, 167, 21, 67, 62, 11, 125, 49, 60, 220, 62, 15, 62, 132, 114, 90, 61, 30, 120, 99, 190, 32, 186, 227, 188, 101, 249, 34, 187, 0, 114, 145, 187, 233, 158, 41, 62, 30, 49, 236, 189, 59, 117, 12, 60, 127, 59, 108, 62, 64, 94, 177, 188, 86, 3, 143, 61, 216, 31, 171, 190, 15, 118, 130, 189, 250, 143, 131, 62, 235, 76, 191, 62, 217, 40, 182, 189, 253, 156, 235, 61, 215, 9, 191, 61, 128, 254, 149, 189, 127, 26, 43, 190, 228, 154, 255, 190, 247, 75, 69, 61, 183, 236, 0, 61, 135, 142, 194, 61, 201, 111, 136, 189, 232, 219, 32, 190, 104, 115, 132, 189, 179, 21, 51, 189, 239, 88, 41, 61, 138, 190, 208, 189, 204, 97, 33, 62, 235, 45, 57, 189, 120, 140, 168, 189, 98, 58, 39, 61, 114, 144, 42, 190, 182, 115, 91, 189, 245, 125, 147, 60, 235, 193, 13, 61, 194, 113, 162, 61, 68, 146, 52, 190, 28, 24, 212, 61, 62, 166, 96, 189, 151, 132, 241, 189, 213, 78, 223, 61, 248, 84, 204, 61, 246, 205, 18, 190, 49, 116, 9, 189, 224, 172, 12, 62, 194, 235, 50, 190, 186, 226, 183, 188, 55, 109, 204, 188, 232, 205, 193, 189, 176, 255, 24, 62, 149, 37, 5, 62, 212, 169, 218, 189, 255, 232, 159, 61, 176, 20, 173, 191, 76, 43, 129, 189, 27, 50, 155, 61, 121, 255, 79, 61, 133, 54, 166, 62, 223, 8, 12, 191, 168, 210, 167, 190, 145, 217, 240, 189, 117, 204, 35, 62, 33, 43, 211, 188, 246, 176, 160, 62, 249, 156, 97, 62, 126, 67, 70, 62, 20, 189, 24, 191, 113, 221, 68, 61, 218, 16, 207, 60, 2, 228, 251, 190, 11, 247, 99, 62, 225, 236, 107, 62, 123, 61, 244, 61, 98, 55, 37, 62, 180, 14, 196, 190, 247, 78, 23, 61, 2, 23, 2, 61, 144, 100, 115, 190, 154, 63, 131, 190, 87, 17, 45, 62, 189, 176, 118, 190, 241, 109, 135, 63, 254, 255, 140, 62, 205, 57, 225, 190, 253, 104, 57, 62, 4, 84, 173, 189, 156, 124, 157, 61, 55, 209, 196, 189, 34, 98, 176, 188, 94, 55, 53, 59, 10, 176, 102, 62, 206, 12, 73, 190, 129, 104, 58, 61, 246, 13, 151, 62, 208, 132, 86, 62, 216, 133, 26, 191, 68, 81, 129, 188, 107, 77, 35, 189, 60, 19, 13, 62, 163, 92, 155, 190, 47, 78, 135, 189, 9, 186, 14, 190, 162, 242, 253, 187, 118, 141, 34, 190, 192, 81, 206, 189, 65, 176, 152, 62, 147, 42, 175, 61, 26, 233, 12, 189, 119, 164, 142, 190, 14, 249, 144, 188, 158, 138, 122, 190, 162, 55, 104, 62, 77, 170, 10, 62, 152, 43, 132, 187, 161, 238, 52, 190, 74, 198, 89, 61, 31, 3, 96, 188, 172, 14, 159, 187, 53, 16, 227, 189, 235, 146, 17, 61, 72, 163, 92, 189, 211, 216, 194, 61, 238, 166, 116, 189, 207, 40, 16, 190, 226, 106, 56, 190, 75, 183, 217, 61, 109, 127, 39, 61, 84, 220, 68, 189, 159, 103, 20, 62, 60, 146, 101, 61, 158, 96, 6, 190, 229, 77, 13, 188, 44, 46, 115, 189, 76, 116, 92, 190, 234, 94, 14, 190, 34, 222, 163, 189, 167, 123, 0, 190, 44, 87, 78, 190, 24, 241, 47, 190, 246, 36, 102, 190, 194, 39, 193, 61, 222, 192, 27, 190, 171, 96, 55, 62, 135, 117, 149, 189, 104, 190, 4, 190, 210, 241, 84, 60, 182, 170, 48, 190, 217, 70, 219, 186, 68, 53, 184, 189, 247, 175, 155, 62, 85, 48, 206, 61, 108, 211, 141, 62, 162, 239, 26, 190, 15, 166, 137, 190, 34, 146, 156, 61, 227, 7, 199, 61, 80, 221, 199, 188, 101, 152, 222, 61, 96, 190, 213, 188, 134, 79, 119, 187, 199, 80, 164, 61, 45, 25, 118, 189, 196, 66, 145, 60, 13, 136, 84, 190, 142, 64, 57, 189, 198, 222, 96, 62, 19, 59, 135, 60, 124, 160, 174, 190, 116, 201, 169, 189, 95, 244, 99, 61, 255, 91, 236, 62, 247, 127, 222, 187, 82, 176, 189, 190, 100, 131, 112, 61, 26, 71, 52, 62, 34, 131, 48, 61, 222, 249, 20, 59, 159, 108, 169, 190, 60, 67, 72, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 64, 67, 62, 125, 161, 252, 189, 223, 131, 73, 62, 165, 108, 3, 62, 23, 43, 104, 62, 181, 220, 78, 190, 100, 85, 48, 60, 132, 129, 155, 62, 255, 27, 95, 190, 2, 229, 21, 190, 147, 204, 140, 61, 120, 87, 135, 189, 97, 158, 23, 190, 229, 250, 132, 189, 19, 35, 169, 61, 229, 154, 170, 62, 36, 244, 254, 61, 13, 35, 99, 62, 10, 0, 230, 189, 12, 186, 188, 59, 133, 28, 100, 62, 212, 217, 81, 189, 184, 212, 241, 61, 75, 169, 117, 190, 85, 224, 208, 189, 140, 47, 48, 62, 92, 70, 179, 60, 166, 2, 82, 190, 172, 62, 164, 61, 246, 177, 240, 61, 89, 233, 7, 61, 56, 108, 56, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 57, 251, 190, 18, 108, 188, 62, 19, 128, 140, 189, 141, 88, 235, 62, 173, 174, 26, 62, 41, 209, 227, 62, 114, 41, 113, 62, 182, 57, 253, 189, 193, 134, 34, 62, 221, 119, 71, 188, 11, 246, 175, 189, 45, 208, 42, 62, 161, 26, 58, 62, 0, 107, 213, 189, 172, 154, 187, 190, 25, 142, 206, 190, 58, 204, 114, 63, 64, 28, 107, 191, 60, 41, 139, 59, 232, 224, 226, 61, 48, 42, 146, 62, 232, 8, 153, 190, 195, 24, 214, 62, 169, 89, 160, 189, 239, 203, 184, 62, 20, 220, 155, 61, 223, 180, 83, 62, 132, 226, 2, 62, 192, 121, 81, 191, 172, 166, 119, 57, 50, 134, 237, 61, 163, 158, 140, 62, 189, 184, 183, 60, 57, 92, 236, 188, 164, 68, 74, 190, 254, 119, 117, 62, 15, 153, 141, 190, 33, 172, 69, 62, 86, 112, 214, 61, 6, 83, 90, 190, 56, 139, 221, 189, 83, 204, 137, 188, 208, 235, 54, 62, 110, 87, 45, 190, 54, 213, 133, 61, 71, 61, 206, 61, 64, 197, 165, 61, 195, 34, 142, 189, 242, 220, 103, 62, 82, 211, 216, 188, 183, 2, 179, 189, 233, 192, 69, 190, 107, 40, 84, 190, 223, 113, 144, 61, 82, 155, 214, 188, 137, 173, 74, 60, 20, 16, 135, 61, 83, 120, 104, 190, 142, 52, 20, 189, 109, 52, 27, 61, 170, 12, 48, 62, 202, 219, 10, 191, 88, 37, 28, 60, 227, 148, 185, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {13, 181, 3, 190, 117, 228, 196, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {16, 120, 179, 191, 222, 174, 138, 63, 106, 163, 80, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {149, 69, 74, 64, 97, 219, 248, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0054/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}