// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 141, 151, 190, 67, 83, 178, 61, 167, 73, 152, 190, 160, 44, 7, 191, 230, 171, 8, 63, 210, 221, 102, 190, 56, 78, 139, 190, 93, 88, 56, 191, 62, 229, 133, 62, 88, 238, 12, 63, 215, 34, 248, 62, 66, 250, 223, 190, 53, 100, 197, 189, 205, 166, 63, 191, 179, 68, 228, 62, 56, 16, 182, 62, 145, 72, 126, 190, 229, 20, 181, 190, 41, 209, 22, 63, 143, 226, 71, 191, 77, 34, 33, 63, 239, 246, 31, 61, 30, 49, 170, 190, 108, 235, 16, 63, 243, 224, 157, 62, 207, 89, 142, 60, 131, 253, 251, 190, 87, 68, 172, 62, 210, 44, 219, 189, 64, 103, 225, 190, 9, 1, 1, 191, 127, 146, 23, 63, 134, 17, 168, 189, 135, 246, 23, 63, 234, 43, 93, 62, 211, 231, 139, 62, 146, 1, 34, 191, 151, 66, 217, 190, 8, 1, 107, 190, 45, 108, 13, 191, 214, 249, 8, 63, 187, 14, 176, 190, 220, 168, 65, 190, 235, 79, 49, 191, 154, 218, 216, 189, 69, 221, 87, 62, 148, 192, 193, 190, 202, 148, 78, 62, 187, 255, 135, 189, 17, 159, 110, 62, 115, 83, 4, 63, 211, 69, 18, 191, 139, 202, 60, 62, 158, 82, 215, 190, 181, 162, 237, 190, 137, 34, 93, 191, 41, 175, 162, 62, 111, 24, 76, 62, 169, 248, 42, 63, 253, 155, 100, 190, 143, 79, 233, 62, 255, 10, 55, 63, 162, 42, 226, 62, 98, 7, 216, 62, 190, 166, 94, 189, 92, 130, 214, 62, 151, 80, 2, 63, 138, 49, 42, 63, 151, 22, 158, 62, 138, 229, 202, 190, 184, 220, 216, 62, 108, 134, 196, 60, 138, 23, 183, 190, 30, 225, 40, 63, 143, 120, 6, 62, 251, 114, 187, 62, 107, 181, 4, 63, 2, 212, 204, 62, 203, 64, 137, 190, 6, 119, 84, 191, 247, 231, 9, 63, 69, 75, 152, 61, 210, 128, 114, 189, 157, 253, 193, 190, 193, 83, 43, 63, 71, 45, 183, 190, 161, 226, 32, 190, 174, 107, 223, 62, 51, 224, 158, 190, 100, 180, 200, 190, 2, 250, 162, 190, 35, 189, 30, 191, 205, 105, 212, 62, 55, 188, 15, 191, 24, 36, 45, 62, 29, 190, 146, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 170, 24, 191, 36, 177, 80, 190, 108, 135, 65, 189, 136, 196, 60, 62, 75, 29, 211, 62, 156, 162, 1, 63, 118, 174, 2, 62, 247, 163, 218, 62, 28, 99, 102, 190, 182, 217, 30, 62, 221, 13, 171, 61, 154, 96, 221, 62, 5, 78, 28, 63, 238, 211, 215, 190, 156, 44, 164, 62, 184, 218, 183, 62, 42, 94, 10, 191, 4, 22, 206, 190, 17, 122, 35, 190, 24, 119, 200, 62, 220, 11, 226, 61, 26, 149, 214, 61, 199, 199, 8, 63, 108, 3, 247, 189, 115, 241, 140, 62, 60, 135, 47, 61, 243, 50, 202, 61, 184, 208, 139, 190, 194, 147, 6, 189, 28, 92, 34, 62, 172, 208, 29, 191, 56, 91, 145, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 231, 178, 189, 88, 255, 73, 62, 173, 15, 204, 189, 138, 77, 229, 189, 119, 50, 242, 189, 50, 10, 83, 189, 166, 217, 116, 61, 66, 138, 132, 189, 215, 13, 71, 190, 77, 165, 49, 189, 66, 208, 95, 61, 236, 196, 50, 62, 205, 202, 128, 188, 232, 224, 207, 61, 206, 99, 103, 190, 180, 59, 137, 190, 36, 183, 166, 61, 221, 214, 46, 62, 72, 152, 233, 190, 8, 15, 168, 62, 74, 9, 143, 62, 55, 54, 226, 61, 94, 21, 82, 62, 107, 118, 82, 62, 41, 230, 90, 62, 125, 184, 32, 62, 222, 169, 133, 189, 207, 195, 31, 62, 252, 162, 40, 62, 167, 20, 5, 190, 233, 194, 64, 60, 150, 132, 180, 61, 139, 183, 221, 59, 150, 241, 59, 190, 185, 184, 128, 62, 246, 90, 137, 61, 2, 187, 163, 61, 248, 81, 196, 61, 45, 16, 172, 190, 31, 80, 207, 61, 230, 249, 46, 189, 12, 115, 187, 61, 144, 26, 37, 190, 5, 155, 203, 60, 255, 26, 46, 62, 82, 54, 72, 190, 36, 100, 59, 62, 19, 206, 86, 61, 42, 69, 56, 190, 243, 56, 50, 190, 249, 203, 88, 62, 66, 55, 29, 61, 48, 91, 11, 190, 57, 231, 40, 190, 75, 244, 211, 61, 17, 177, 255, 189, 77, 13, 165, 189, 179, 250, 151, 61, 91, 16, 93, 62, 130, 87, 79, 188, 255, 112, 48, 189, 224, 48, 32, 62, 225, 158, 175, 190, 178, 215, 41, 62, 44, 180, 47, 189, 148, 52, 254, 188, 119, 233, 197, 61, 247, 253, 13, 190, 74, 148, 205, 188, 13, 19, 37, 62, 91, 168, 238, 61, 39, 72, 1, 189, 44, 206, 12, 189, 0, 71, 243, 61, 218, 146, 52, 62, 86, 153, 48, 62, 204, 172, 130, 189, 132, 168, 231, 61, 1, 5, 153, 61, 117, 215, 1, 62, 170, 234, 174, 189, 170, 13, 169, 189, 78, 46, 105, 190, 157, 85, 109, 62, 186, 201, 138, 58, 214, 248, 195, 189, 31, 143, 94, 62, 209, 37, 80, 61, 61, 31, 3, 190, 143, 31, 9, 62, 13, 237, 17, 62, 31, 105, 153, 188, 202, 213, 20, 189, 176, 69, 208, 189, 184, 7, 69, 62, 145, 237, 166, 61, 221, 207, 88, 62, 49, 35, 129, 189, 94, 221, 122, 62, 124, 163, 70, 62, 240, 130, 159, 62, 208, 80, 52, 61, 104, 26, 3, 190, 105, 49, 160, 61, 229, 53, 68, 62, 56, 161, 252, 60, 135, 253, 217, 60, 136, 110, 190, 190, 109, 248, 158, 61, 6, 116, 52, 190, 220, 247, 31, 62, 25, 223, 127, 61, 164, 167, 130, 190, 199, 220, 227, 60, 53, 150, 233, 62, 122, 187, 5, 190, 45, 179, 108, 190, 55, 154, 148, 186, 4, 30, 30, 190, 40, 147, 10, 190, 14, 72, 136, 61, 74, 240, 208, 190, 76, 19, 24, 62, 124, 0, 90, 62, 139, 70, 16, 190, 179, 142, 179, 60, 28, 144, 156, 190, 145, 44, 28, 190, 63, 135, 223, 61, 138, 40, 206, 189, 48, 144, 41, 62, 26, 184, 144, 189, 161, 104, 8, 62, 149, 62, 3, 62, 42, 67, 229, 188, 242, 23, 149, 61, 173, 1, 106, 61, 129, 231, 139, 60, 222, 184, 159, 189, 192, 167, 174, 189, 157, 23, 39, 62, 0, 160, 1, 190, 220, 178, 205, 61, 33, 9, 32, 62, 181, 205, 28, 190, 22, 149, 63, 189, 147, 212, 96, 62, 108, 92, 129, 61, 255, 166, 7, 189, 94, 179, 183, 188, 70, 66, 157, 189, 182, 180, 81, 190, 209, 198, 48, 190, 58, 44, 80, 189, 32, 2, 122, 62, 42, 238, 143, 189, 129, 225, 94, 190, 29, 32, 206, 61, 188, 173, 51, 189, 199, 98, 64, 187, 55, 229, 8, 62, 224, 117, 116, 60, 116, 147, 169, 189, 105, 17, 21, 62, 121, 111, 111, 189, 215, 31, 136, 61, 1, 245, 193, 189, 220, 28, 74, 189, 182, 16, 8, 62, 134, 136, 242, 61, 207, 9, 60, 190, 18, 18, 236, 61, 74, 128, 35, 189, 143, 135, 137, 59, 100, 43, 209, 188, 127, 164, 101, 61, 147, 127, 12, 62, 228, 41, 23, 62, 164, 200, 241, 61, 83, 68, 152, 189, 26, 144, 24, 190, 203, 5, 40, 61, 99, 152, 201, 61, 187, 121, 179, 187, 62, 157, 70, 60, 142, 76, 173, 189, 230, 124, 119, 61, 196, 150, 73, 61, 160, 68, 19, 187, 42, 165, 246, 188, 205, 204, 45, 189, 76, 189, 46, 190, 104, 230, 224, 187, 164, 194, 55, 189, 252, 194, 174, 62, 210, 117, 63, 189, 42, 69, 61, 62, 195, 204, 4, 61, 64, 92, 59, 190, 126, 214, 16, 61, 0, 44, 189, 60, 10, 140, 229, 188, 1, 126, 175, 187, 208, 134, 177, 190, 120, 190, 130, 62, 140, 159, 162, 61, 130, 224, 192, 187, 151, 186, 152, 61, 136, 188, 131, 190, 41, 157, 208, 60, 190, 51, 10, 63, 11, 107, 68, 190, 170, 60, 101, 190, 179, 51, 161, 189, 11, 1, 231, 189, 18, 250, 207, 60, 91, 18, 128, 188, 231, 35, 199, 190, 47, 113, 7, 62, 111, 82, 14, 189, 57, 113, 95, 190, 6, 1, 59, 62, 254, 26, 213, 189, 88, 11, 252, 61, 155, 59, 99, 61, 197, 73, 250, 61, 2, 234, 151, 189, 66, 3, 94, 189, 228, 167, 176, 189, 166, 129, 45, 59, 110, 197, 2, 62, 109, 77, 17, 61, 147, 67, 153, 60, 115, 148, 174, 188, 183, 174, 153, 189, 4, 101, 171, 189, 89, 242, 62, 62, 110, 215, 128, 189, 24, 245, 237, 61, 85, 118, 90, 62, 108, 90, 70, 62, 15, 91, 28, 190, 39, 127, 43, 190, 229, 193, 225, 60, 177, 243, 42, 61, 146, 136, 145, 187, 173, 45, 72, 61, 34, 226, 76, 189, 137, 82, 203, 60, 164, 107, 110, 189, 70, 231, 111, 188, 49, 55, 7, 189, 9, 127, 3, 60, 93, 214, 143, 61, 191, 102, 199, 189, 160, 15, 28, 190, 158, 248, 90, 189, 186, 204, 243, 189, 149, 15, 46, 186, 85, 241, 127, 61, 106, 94, 13, 62, 176, 150, 196, 188, 194, 202, 249, 61, 226, 125, 226, 189, 70, 14, 3, 188, 17, 132, 182, 189, 240, 117, 48, 190, 243, 196, 46, 61, 18, 83, 22, 189, 86, 57, 8, 62, 3, 194, 182, 188, 168, 200, 159, 61, 212, 2, 32, 190, 153, 130, 163, 59, 53, 138, 135, 61, 148, 72, 93, 61, 224, 34, 123, 61, 185, 124, 6, 190, 131, 82, 40, 190, 236, 90, 11, 62, 0, 48, 227, 61, 197, 17, 222, 61, 18, 243, 138, 189, 103, 4, 205, 61, 98, 217, 159, 189, 161, 235, 0, 190, 48, 30, 6, 61, 158, 224, 164, 60, 109, 108, 124, 61, 177, 33, 211, 61, 192, 188, 173, 189, 172, 2, 154, 61, 255, 77, 90, 188, 225, 19, 246, 189, 100, 92, 245, 189, 37, 86, 160, 189, 39, 113, 201, 61, 255, 208, 38, 190, 182, 45, 39, 190, 90, 227, 37, 61, 32, 79, 157, 61, 207, 24, 6, 62, 124, 213, 103, 61, 243, 177, 78, 61, 60, 1, 70, 189, 45, 12, 183, 188, 236, 135, 37, 62, 229, 82, 114, 61, 220, 49, 72, 60, 234, 188, 81, 189, 89, 128, 128, 189, 118, 147, 193, 61, 227, 61, 253, 188, 192, 86, 26, 62, 196, 18, 6, 189, 234, 230, 235, 188, 128, 154, 50, 61, 95, 227, 36, 190, 41, 240, 242, 60, 125, 188, 221, 189, 68, 130, 109, 189, 253, 163, 161, 61, 129, 61, 52, 189, 46, 58, 161, 189, 78, 136, 233, 61, 189, 35, 207, 189, 18, 175, 28, 62, 50, 152, 143, 59, 90, 151, 36, 61, 118, 66, 69, 189, 56, 107, 61, 189, 195, 183, 111, 189, 248, 152, 86, 190, 188, 230, 148, 189, 229, 36, 11, 61, 143, 106, 39, 62, 227, 170, 207, 61, 25, 119, 161, 60, 172, 159, 194, 61, 65, 51, 208, 60, 4, 157, 84, 62, 135, 116, 232, 61, 61, 253, 59, 60, 147, 103, 89, 61, 211, 146, 4, 189, 68, 4, 178, 189, 231, 184, 64, 189, 167, 175, 51, 189, 143, 246, 200, 61, 162, 227, 158, 61, 252, 13, 76, 189, 185, 237, 36, 189, 227, 79, 14, 62, 64, 182, 224, 189, 38, 169, 6, 62, 104, 76, 70, 190, 11, 215, 247, 61, 129, 95, 46, 190, 77, 214, 186, 61, 177, 169, 62, 62, 93, 56, 12, 62, 113, 180, 84, 189, 34, 111, 3, 189, 101, 83, 197, 61, 49, 196, 44, 62, 115, 178, 123, 190, 50, 218, 39, 62, 34, 65, 12, 62, 104, 252, 58, 61, 62, 75, 181, 189, 139, 143, 94, 62, 168, 166, 138, 190, 247, 32, 145, 60, 172, 9, 254, 189, 62, 6, 71, 189, 133, 219, 14, 62, 75, 66, 172, 61, 187, 14, 100, 61, 18, 20, 144, 188, 247, 64, 24, 62, 153, 27, 10, 190, 28, 1, 204, 59, 120, 166, 88, 189, 140, 136, 48, 60, 215, 115, 156, 61, 96, 16, 11, 61, 12, 232, 50, 190, 212, 110, 202, 186, 23, 165, 184, 61, 42, 254, 220, 189, 104, 64, 112, 189, 136, 122, 45, 189, 82, 5, 98, 61, 140, 177, 50, 190, 167, 186, 79, 190, 236, 149, 235, 61, 207, 26, 95, 61, 61, 132, 19, 62, 208, 151, 74, 61, 121, 230, 85, 189, 14, 113, 153, 61, 142, 53, 176, 189, 242, 161, 214, 189, 117, 95, 58, 189, 96, 49, 30, 62, 119, 206, 240, 189, 192, 149, 96, 61, 195, 25, 236, 61, 252, 253, 58, 61, 14, 241, 68, 190, 216, 0, 50, 189, 244, 132, 60, 189, 223, 133, 2, 189, 150, 118, 189, 189, 186, 69, 242, 61, 51, 82, 195, 60, 186, 91, 98, 190, 44, 54, 250, 61, 152, 105, 230, 189, 170, 204, 200, 189, 122, 208, 18, 62, 160, 0, 124, 62, 56, 51, 119, 62, 89, 199, 3, 62, 162, 29, 125, 190, 21, 224, 247, 189, 16, 131, 82, 62, 172, 21, 49, 62, 200, 4, 95, 58, 171, 251, 147, 61, 128, 25, 125, 187, 203, 248, 51, 190, 199, 216, 129, 61, 156, 230, 215, 60, 24, 133, 236, 189, 113, 25, 166, 62, 91, 26, 176, 188, 116, 169, 140, 188, 147, 138, 236, 61, 93, 118, 189, 61, 74, 74, 176, 60, 86, 114, 63, 61, 243, 247, 5, 62, 205, 94, 97, 189, 121, 251, 233, 61, 218, 255, 73, 190, 4, 225, 171, 61, 26, 151, 78, 61, 251, 98, 13, 190, 213, 98, 213, 190, 211, 121, 123, 60, 29, 66, 147, 189, 192, 199, 147, 62, 232, 40, 106, 62, 133, 212, 29, 61, 198, 114, 50, 188, 87, 11, 196, 60, 75, 249, 29, 189, 112, 185, 201, 190, 34, 202, 184, 187, 149, 28, 178, 189, 199, 90, 14, 190, 232, 65, 26, 62, 19, 109, 152, 61, 38, 97, 227, 189, 180, 113, 118, 190, 202, 173, 149, 62, 178, 249, 60, 190, 104, 249, 249, 61, 209, 109, 56, 189, 108, 159, 0, 190, 200, 71, 193, 190, 173, 225, 95, 189, 126, 158, 40, 190, 230, 98, 120, 62, 79, 168, 175, 61, 66, 52, 206, 61, 195, 112, 43, 189, 181, 184, 70, 62, 79, 81, 50, 190, 172, 20, 187, 61, 213, 197, 54, 62, 169, 134, 190, 190, 233, 207, 190, 188, 253, 216, 81, 190, 52, 10, 184, 189, 249, 239, 19, 189, 203, 251, 229, 189, 99, 187, 108, 61, 124, 156, 164, 189, 234, 84, 87, 61, 90, 202, 6, 190, 45, 34, 61, 62, 212, 129, 14, 62, 153, 57, 213, 189, 181, 153, 175, 190, 181, 174, 135, 61, 94, 88, 77, 189, 79, 228, 152, 190, 34, 252, 160, 60, 226, 117, 11, 62, 62, 98, 83, 61, 151, 217, 172, 61, 84, 11, 50, 61, 46, 123, 223, 61, 192, 208, 9, 62, 236, 65, 159, 190, 215, 215, 216, 60, 143, 119, 52, 190, 233, 134, 29, 62, 0, 16, 132, 190, 171, 201, 217, 59, 166, 91, 1, 190, 101, 66, 139, 60, 8, 88, 83, 61, 172, 231, 161, 189, 174, 174, 233, 60, 198, 163, 66, 189, 79, 127, 121, 190, 131, 219, 232, 60, 80, 36, 92, 60, 37, 196, 196, 61, 130, 101, 67, 190, 7, 191, 99, 190, 49, 129, 5, 62, 105, 140, 207, 189, 127, 67, 158, 188, 106, 167, 106, 62, 27, 7, 165, 189, 247, 173, 72, 190, 67, 231, 152, 62, 241, 189, 211, 190, 52, 140, 202, 60, 105, 180, 51, 190, 93, 109, 103, 190, 200, 137, 239, 60, 178, 39, 107, 62, 185, 17, 126, 190, 104, 235, 122, 62, 111, 195, 192, 61, 157, 195, 9, 62, 11, 182, 0, 60, 71, 178, 149, 190, 244, 210, 156, 61, 254, 81, 18, 59, 36, 239, 184, 62, 73, 142, 13, 191, 109, 250, 226, 189, 42, 119, 149, 190, 48, 241, 215, 188, 0, 51, 19, 190, 87, 43, 177, 189, 90, 16, 73, 190, 53, 179, 237, 189, 184, 42, 141, 62, 232, 23, 22, 62, 247, 129, 69, 61, 25, 38, 92, 60, 44, 18, 221, 60, 181, 240, 183, 190, 192, 41, 191, 189, 93, 44, 209, 61, 129, 246, 44, 191, 14, 7, 158, 62, 227, 79, 55, 62, 127, 221, 11, 61, 161, 158, 232, 61, 101, 98, 221, 62, 146, 33, 32, 62, 7, 131, 56, 62, 75, 118, 226, 190, 142, 130, 12, 190, 0, 165, 94, 62, 64, 156, 246, 188, 167, 44, 22, 190, 73, 198, 19, 62, 7, 170, 193, 61, 160, 202, 183, 61, 112, 36, 120, 189, 41, 106, 247, 188, 139, 217, 181, 61, 87, 28, 34, 189, 103, 99, 28, 190, 116, 167, 91, 189, 154, 240, 205, 189, 40, 124, 141, 189, 49, 174, 38, 189, 28, 178, 128, 61, 97, 95, 250, 189, 14, 145, 22, 61, 120, 139, 31, 62, 98, 82, 170, 61, 91, 253, 246, 61, 184, 112, 29, 190, 218, 80, 24, 61, 144, 238, 251, 187, 250, 77, 253, 189, 41, 35, 55, 190, 25, 190, 65, 61, 190, 25, 14, 62, 70, 83, 183, 188, 41, 146, 227, 61, 25, 140, 225, 61, 185, 66, 170, 189, 231, 66, 8, 188, 6, 188, 0, 190, 8, 166, 194, 189, 192, 236, 106, 189, 157, 13, 51, 62, 179, 244, 227, 61, 205, 171, 105, 62, 34, 253, 198, 61, 211, 251, 44, 190, 68, 37, 68, 62, 245, 85, 38, 190, 162, 231, 36, 189, 76, 236, 187, 188, 224, 8, 81, 62, 86, 196, 79, 189, 93, 41, 223, 61, 163, 99, 119, 61, 141, 119, 140, 189, 215, 229, 13, 190, 172, 218, 127, 61, 109, 172, 144, 61, 228, 210, 152, 189, 1, 134, 95, 61, 57, 252, 154, 61, 39, 228, 138, 61, 79, 190, 18, 190, 186, 133, 163, 189, 215, 74, 159, 190, 70, 76, 165, 61, 146, 255, 18, 62, 54, 124, 50, 190, 117, 128, 91, 189, 19, 109, 0, 190, 83, 98, 83, 62, 48, 251, 196, 59, 120, 8, 200, 188, 53, 106, 30, 62, 205, 122, 8, 62, 101, 68, 60, 62, 24, 68, 36, 62, 110, 198, 130, 61, 105, 174, 38, 61, 113, 54, 14, 190, 171, 77, 200, 60, 75, 154, 193, 60, 154, 224, 1, 61, 55, 118, 229, 61, 141, 15, 115, 190, 119, 8, 16, 62, 49, 28, 95, 189, 40, 99, 16, 189, 255, 15, 83, 62, 138, 121, 237, 189, 23, 135, 164, 188, 150, 165, 194, 62, 175, 47, 221, 61, 23, 169, 144, 189, 143, 51, 73, 190, 64, 105, 4, 62, 130, 108, 132, 190, 242, 50, 55, 189, 219, 178, 138, 189, 132, 106, 172, 61, 82, 93, 57, 62, 188, 159, 61, 190, 177, 240, 19, 59, 248, 44, 143, 190, 13, 30, 2, 190, 26, 43, 130, 61, 228, 72, 115, 62, 44, 236, 205, 188, 23, 121, 1, 62, 101, 180, 0, 190, 47, 145, 182, 189, 134, 68, 142, 62, 173, 247, 112, 61, 77, 1, 199, 189, 229, 68, 31, 189, 47, 23, 70, 62, 247, 146, 147, 61, 240, 13, 132, 189, 237, 59, 26, 62, 245, 136, 2, 190, 147, 188, 13, 61, 111, 130, 178, 189, 254, 222, 46, 62, 107, 244, 50, 190, 42, 119, 233, 60, 124, 204, 129, 62, 217, 230, 236, 59, 47, 133, 113, 62, 132, 10, 139, 189, 123, 198, 75, 61, 201, 28, 43, 62, 199, 63, 208, 188, 201, 86, 41, 188, 169, 27, 142, 62, 4, 95, 29, 62, 82, 184, 159, 60, 112, 68, 211, 61, 92, 23, 143, 189, 32, 79, 114, 189, 207, 159, 158, 62, 128, 149, 35, 62, 201, 190, 63, 62, 224, 181, 153, 61, 129, 234, 131, 190, 190, 28, 56, 62, 106, 172, 96, 189, 164, 40, 2, 190, 188, 205, 67, 60, 40, 129, 136, 190, 116, 64, 57, 61, 65, 59, 48, 190, 12, 1, 121, 62, 15, 188, 131, 62, 192, 70, 192, 61, 134, 49, 234, 189, 106, 19, 226, 62, 219, 76, 172, 189, 57, 35, 71, 190, 160, 35, 89, 190, 146, 39, 135, 189, 132, 93, 134, 61, 37, 145, 60, 190, 219, 239, 185, 190, 251, 128, 3, 61, 121, 113, 255, 61, 148, 66, 174, 190, 222, 223, 64, 62, 139, 19, 17, 190, 103, 251, 56, 188, 97, 229, 164, 61, 86, 106, 53, 190, 214, 81, 187, 59, 137, 228, 1, 60, 131, 85, 234, 188, 87, 160, 130, 189, 139, 147, 7, 190, 57, 8, 1, 60, 28, 52, 132, 188, 251, 234, 10, 62, 22, 100, 27, 61, 10, 21, 89, 61, 100, 75, 129, 189, 48, 165, 93, 189, 200, 15, 15, 190, 87, 88, 3, 62, 210, 106, 50, 190, 204, 221, 83, 61, 113, 164, 244, 61, 111, 43, 217, 189, 167, 255, 18, 62, 17, 123, 9, 190, 171, 19, 150, 189, 136, 245, 59, 59, 119, 138, 66, 190, 189, 124, 32, 189, 94, 177, 18, 62, 177, 76, 46, 187, 150, 155, 189, 189, 243, 92, 226, 61, 56, 145, 231, 61, 97, 235, 234, 61, 213, 199, 228, 189, 186, 189, 128, 61, 228, 177, 196, 188, 252, 83, 254, 59, 243, 16, 33, 59, 181, 207, 20, 61, 126, 119, 202, 60, 2, 49, 141, 61, 239, 76, 19, 62, 124, 228, 249, 61, 3, 242, 50, 60, 192, 188, 205, 189, 61, 101, 50, 188, 98, 80, 196, 189, 221, 164, 138, 61, 20, 30, 218, 188, 91, 65, 137, 188, 141, 247, 168, 61, 103, 62, 35, 190, 241, 40, 52, 190, 51, 218, 24, 190, 112, 181, 50, 61, 50, 67, 0, 190, 238, 145, 41, 190, 73, 8, 45, 190, 131, 247, 15, 62, 54, 18, 42, 58, 232, 57, 52, 189, 217, 39, 66, 189, 152, 89, 143, 189, 213, 58, 64, 189, 67, 141, 166, 59, 220, 13, 216, 188, 142, 49, 237, 61, 208, 53, 139, 61, 209, 60, 252, 61, 191, 67, 231, 189, 124, 1, 18, 61, 18, 53, 58, 190, 105, 131, 8, 61, 189, 250, 170, 61, 98, 157, 24, 62, 157, 47, 35, 62, 4, 219, 93, 189, 126, 124, 42, 190, 85, 122, 6, 190, 35, 212, 171, 61, 23, 125, 200, 61, 181, 242, 134, 189, 57, 148, 18, 62, 224, 114, 196, 61, 193, 142, 66, 61, 131, 117, 139, 61, 156, 85, 0, 190, 137, 185, 38, 62, 117, 136, 128, 190, 173, 63, 47, 190, 176, 200, 155, 60, 189, 119, 74, 190, 172, 89, 54, 60, 74, 21, 18, 190, 232, 234, 21, 62, 178, 156, 66, 61, 23, 96, 14, 189, 179, 202, 148, 189, 126, 121, 216, 189, 242, 8, 216, 61, 193, 0, 19, 62, 245, 72, 231, 189, 91, 158, 254, 61, 108, 103, 84, 190, 81, 2, 47, 62, 223, 228, 15, 61, 103, 42, 47, 62, 213, 27, 250, 189, 23, 249, 62, 190, 178, 172, 152, 187, 135, 77, 239, 60, 95, 18, 42, 62, 45, 24, 56, 62, 198, 77, 17, 189, 197, 89, 136, 61, 229, 129, 169, 62, 209, 54, 145, 60, 79, 234, 31, 61, 51, 193, 93, 190, 248, 252, 5, 190, 136, 191, 226, 189, 27, 10, 25, 62, 79, 126, 211, 189, 216, 32, 62, 62, 63, 53, 191, 61, 252, 60, 4, 190, 52, 90, 29, 190, 190, 148, 100, 190, 196, 248, 229, 60, 183, 236, 0, 61, 135, 142, 194, 61, 22, 228, 134, 189, 43, 187, 31, 190, 242, 99, 129, 189, 234, 25, 48, 189, 26, 183, 46, 61, 40, 214, 205, 189, 204, 97, 33, 62, 235, 45, 57, 189, 227, 213, 164, 189, 197, 115, 45, 61, 114, 144, 42, 190, 182, 115, 91, 189, 245, 125, 147, 60, 12, 3, 22, 61, 240, 3, 165, 61, 68, 146, 52, 190, 28, 24, 212, 61, 14, 194, 98, 189, 158, 38, 237, 189, 238, 170, 225, 61, 62, 41, 207, 61, 79, 245, 14, 190, 114, 63, 5, 189, 253, 174, 14, 62, 209, 168, 49, 190, 186, 226, 183, 188, 55, 109, 204, 188, 232, 205, 193, 189, 176, 255, 24, 62, 149, 37, 5, 62, 185, 117, 168, 60, 190, 236, 136, 61, 74, 31, 2, 191, 221, 48, 40, 60, 247, 241, 226, 188, 102, 251, 213, 188, 15, 104, 4, 189, 161, 103, 212, 189, 146, 255, 132, 190, 235, 102, 51, 189, 113, 107, 46, 62, 128, 30, 132, 189, 204, 175, 27, 62, 127, 166, 84, 62, 247, 191, 61, 189, 91, 61, 27, 190, 89, 58, 182, 61, 110, 107, 219, 188, 4, 54, 235, 190, 211, 176, 120, 62, 188, 193, 245, 61, 129, 44, 108, 189, 130, 168, 15, 62, 205, 250, 149, 189, 106, 67, 254, 61, 47, 200, 234, 189, 115, 58, 14, 190, 39, 145, 31, 190, 223, 58, 158, 61, 218, 28, 217, 189, 184, 93, 177, 61, 178, 95, 81, 62, 122, 124, 39, 61, 134, 81, 14, 62, 137, 64, 155, 189, 215, 125, 154, 60, 166, 100, 51, 190, 210, 1, 189, 189, 141, 161, 184, 189, 119, 105, 5, 62, 81, 38, 198, 189, 99, 18, 148, 61, 213, 84, 185, 61, 223, 97, 153, 61, 242, 43, 61, 190, 116, 133, 163, 188, 247, 120, 253, 61, 15, 229, 83, 188, 253, 182, 87, 61, 239, 109, 151, 187, 173, 80, 46, 60, 70, 165, 195, 189, 237, 31, 170, 189, 140, 87, 62, 190, 88, 151, 248, 61, 43, 11, 225, 189, 186, 71, 83, 61, 114, 26, 60, 190, 84, 216, 128, 189, 58, 113, 144, 187, 61, 76, 154, 61, 109, 63, 235, 61, 252, 239, 195, 61, 107, 80, 30, 190, 74, 198, 89, 61, 155, 45, 18, 60, 14, 253, 47, 187, 142, 247, 226, 189, 109, 141, 109, 61, 31, 172, 169, 186, 32, 20, 249, 61, 25, 142, 107, 189, 103, 11, 14, 190, 162, 194, 47, 190, 101, 51, 10, 62, 109, 127, 39, 61, 122, 145, 18, 60, 203, 80, 37, 62, 200, 114, 226, 61, 2, 134, 249, 189, 229, 77, 13, 188, 89, 83, 176, 188, 149, 229, 84, 190, 9, 62, 5, 190, 34, 222, 163, 189, 167, 123, 0, 190, 44, 87, 78, 190, 239, 255, 41, 190, 253, 212, 75, 190, 194, 39, 193, 61, 73, 241, 11, 190, 204, 185, 57, 62, 135, 117, 149, 189, 93, 199, 237, 189, 112, 13, 0, 61, 98, 190, 254, 189, 51, 3, 47, 189, 216, 115, 39, 190, 81, 100, 150, 62, 214, 142, 4, 62, 186, 154, 127, 62, 216, 40, 118, 189, 214, 128, 88, 190, 118, 168, 182, 60, 13, 127, 1, 62, 154, 193, 58, 188, 0, 121, 193, 189, 37, 143, 3, 189, 157, 25, 119, 60, 240, 254, 210, 61, 190, 107, 12, 61, 65, 219, 76, 189, 135, 136, 184, 189, 32, 252, 172, 59, 41, 80, 111, 62, 28, 63, 45, 61, 40, 18, 231, 189, 66, 193, 31, 189, 128, 133, 162, 61, 245, 90, 99, 61, 35, 180, 43, 190, 134, 215, 98, 190, 40, 235, 52, 61, 85, 67, 61, 62, 60, 242, 169, 189, 220, 239, 161, 188, 151, 83, 75, 190, 243, 118, 46, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 252, 48, 62, 251, 242, 187, 189, 38, 213, 170, 61, 219, 97, 177, 61, 3, 57, 93, 62, 160, 202, 59, 190, 195, 107, 93, 189, 58, 78, 41, 62, 8, 117, 59, 190, 111, 200, 200, 189, 130, 232, 172, 61, 46, 225, 133, 189, 64, 72, 193, 189, 90, 227, 194, 189, 131, 200, 227, 60, 140, 171, 93, 62, 110, 181, 241, 60, 26, 65, 84, 62, 253, 1, 225, 189, 183, 168, 245, 188, 136, 86, 230, 61, 57, 233, 198, 188, 116, 10, 175, 61, 30, 166, 60, 190, 38, 226, 111, 59, 161, 51, 25, 62, 218, 225, 188, 187, 36, 41, 81, 190, 211, 63, 244, 188, 29, 210, 145, 188, 35, 222, 173, 61, 74, 19, 243, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 143, 97, 190, 146, 143, 111, 62, 130, 211, 207, 189, 184, 181, 171, 62, 207, 53, 45, 62, 145, 144, 254, 61, 39, 127, 74, 62, 14, 20, 225, 188, 105, 220, 46, 62, 33, 224, 22, 189, 138, 199, 101, 189, 49, 47, 208, 61, 173, 34, 223, 61, 94, 121, 163, 189, 26, 168, 154, 190, 251, 210, 33, 190, 167, 11, 156, 62, 233, 0, 42, 191, 187, 96, 135, 59, 90, 128, 41, 62, 154, 110, 104, 62, 218, 85, 110, 190, 98, 5, 176, 62, 244, 23, 149, 189, 203, 25, 76, 61, 8, 221, 240, 61, 223, 96, 12, 62, 241, 226, 2, 62, 168, 156, 147, 190, 81, 37, 151, 61, 221, 136, 244, 61, 143, 107, 90, 62, 123, 195, 56, 188, 124, 207, 152, 189, 197, 200, 24, 190, 75, 86, 171, 59, 115, 169, 82, 190, 147, 247, 35, 61, 44, 128, 56, 61, 95, 108, 223, 189, 90, 152, 191, 189, 246, 132, 161, 189, 62, 201, 170, 61, 93, 228, 171, 189, 77, 72, 134, 61, 113, 217, 142, 60, 41, 77, 166, 61, 8, 247, 168, 189, 102, 229, 87, 62, 216, 103, 10, 189, 71, 51, 179, 189, 70, 44, 16, 190, 102, 2, 16, 190, 177, 192, 90, 189, 236, 63, 163, 189, 78, 132, 225, 61, 214, 28, 150, 60, 41, 99, 109, 189, 2, 221, 164, 60, 201, 216, 27, 61, 213, 8, 220, 188, 252, 31, 194, 61, 126, 90, 44, 60, 182, 107, 137, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 138, 11, 190, 157, 10, 99, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {15, 138, 169, 63, 107, 123, 165, 63, 51, 126, 157, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {123, 69, 167, 191, 40, 72, 83, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0054/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}