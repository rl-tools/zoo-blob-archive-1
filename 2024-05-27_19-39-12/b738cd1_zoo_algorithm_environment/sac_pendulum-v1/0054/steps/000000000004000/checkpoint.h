// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {3, 243, 140, 190, 76, 192, 111, 190, 216, 127, 146, 190, 173, 123, 252, 190, 115, 164, 179, 62, 189, 49, 146, 190, 195, 216, 39, 190, 195, 124, 226, 190, 57, 62, 13, 63, 95, 91, 229, 62, 128, 107, 2, 63, 198, 161, 226, 190, 251, 113, 17, 62, 69, 141, 34, 191, 212, 174, 45, 63, 249, 156, 182, 62, 242, 145, 203, 190, 234, 18, 163, 190, 206, 213, 149, 62, 49, 168, 76, 191, 210, 218, 58, 63, 178, 38, 49, 62, 84, 55, 202, 189, 57, 159, 46, 63, 9, 203, 177, 62, 52, 127, 81, 190, 59, 147, 1, 191, 252, 241, 8, 63, 90, 217, 121, 190, 212, 134, 204, 190, 94, 82, 245, 190, 28, 137, 236, 62, 95, 85, 209, 189, 68, 44, 5, 63, 55, 128, 136, 62, 12, 156, 167, 62, 144, 221, 26, 191, 197, 113, 0, 191, 73, 184, 82, 190, 166, 21, 1, 191, 176, 77, 174, 62, 109, 1, 245, 190, 36, 98, 154, 189, 151, 111, 42, 191, 156, 84, 171, 189, 5, 140, 163, 62, 44, 186, 125, 190, 78, 181, 214, 62, 197, 5, 147, 189, 125, 112, 212, 62, 87, 223, 11, 63, 123, 40, 9, 191, 226, 192, 54, 60, 22, 164, 17, 191, 131, 144, 166, 190, 193, 174, 22, 191, 36, 43, 19, 63, 68, 125, 95, 62, 216, 139, 43, 63, 32, 151, 152, 190, 160, 139, 14, 63, 213, 188, 140, 63, 103, 103, 183, 62, 152, 172, 119, 62, 4, 176, 197, 189, 232, 132, 255, 62, 189, 240, 55, 63, 210, 196, 68, 63, 100, 199, 132, 62, 199, 207, 218, 190, 54, 20, 231, 62, 46, 18, 196, 188, 134, 223, 236, 190, 250, 222, 48, 63, 40, 53, 68, 61, 225, 8, 217, 62, 57, 205, 72, 63, 214, 117, 201, 62, 233, 119, 11, 190, 215, 6, 68, 191, 218, 221, 87, 63, 186, 235, 60, 62, 75, 201, 172, 190, 109, 32, 190, 190, 175, 202, 129, 63, 126, 230, 223, 189, 100, 102, 130, 189, 214, 182, 68, 63, 150, 185, 8, 191, 186, 7, 195, 190, 98, 109, 243, 190, 80, 3, 86, 191, 47, 87, 248, 62, 10, 98, 18, 191, 253, 74, 196, 61, 204, 42, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 75, 64, 191, 5, 116, 42, 190, 30, 85, 204, 189, 198, 115, 132, 62, 16, 154, 132, 62, 66, 63, 252, 62, 207, 21, 5, 62, 121, 152, 215, 62, 211, 249, 141, 190, 174, 219, 74, 60, 211, 70, 48, 62, 1, 47, 150, 62, 100, 35, 45, 63, 51, 60, 186, 190, 170, 240, 193, 62, 170, 43, 194, 62, 206, 191, 45, 191, 90, 60, 177, 190, 59, 164, 123, 190, 71, 130, 176, 62, 74, 8, 17, 190, 90, 132, 104, 61, 136, 103, 147, 62, 237, 252, 168, 189, 214, 198, 198, 62, 179, 140, 53, 190, 179, 178, 151, 188, 89, 142, 210, 190, 166, 50, 201, 61, 147, 35, 208, 60, 52, 95, 11, 191, 162, 20, 2, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {174, 99, 64, 190, 22, 194, 27, 62, 171, 107, 175, 190, 230, 97, 29, 190, 181, 58, 109, 190, 14, 4, 161, 188, 191, 126, 25, 61, 144, 4, 34, 190, 167, 207, 125, 190, 26, 161, 204, 189, 165, 38, 1, 61, 130, 234, 89, 62, 182, 191, 150, 188, 130, 170, 189, 61, 204, 152, 96, 190, 84, 93, 224, 190, 102, 122, 155, 61, 97, 178, 56, 62, 101, 108, 42, 191, 226, 21, 166, 62, 0, 5, 185, 62, 0, 38, 31, 62, 197, 207, 133, 62, 15, 136, 205, 61, 194, 5, 70, 62, 122, 178, 103, 62, 147, 83, 131, 190, 22, 66, 159, 61, 199, 186, 73, 62, 21, 235, 105, 190, 76, 195, 39, 189, 209, 245, 111, 61, 148, 133, 46, 62, 27, 39, 53, 190, 237, 179, 140, 62, 173, 104, 128, 61, 199, 161, 7, 62, 196, 86, 155, 61, 15, 193, 197, 190, 238, 235, 46, 62, 5, 92, 96, 61, 186, 181, 56, 62, 148, 146, 221, 189, 56, 141, 73, 61, 164, 22, 17, 62, 98, 214, 105, 190, 121, 37, 37, 62, 130, 180, 11, 62, 23, 253, 124, 190, 79, 70, 78, 190, 30, 57, 96, 62, 55, 162, 184, 189, 33, 74, 140, 190, 168, 222, 66, 190, 23, 37, 165, 61, 169, 205, 154, 188, 251, 157, 237, 189, 203, 135, 154, 187, 35, 233, 130, 62, 150, 13, 209, 61, 167, 89, 1, 62, 113, 117, 149, 62, 176, 236, 237, 190, 171, 54, 29, 62, 80, 95, 233, 189, 114, 75, 177, 189, 237, 244, 169, 61, 217, 204, 25, 190, 88, 169, 2, 189, 23, 108, 107, 62, 128, 123, 241, 61, 131, 0, 240, 188, 84, 7, 118, 189, 175, 151, 6, 62, 156, 136, 6, 62, 85, 61, 79, 62, 77, 82, 60, 189, 121, 30, 137, 61, 91, 124, 173, 61, 235, 4, 207, 61, 166, 203, 50, 189, 198, 184, 204, 189, 78, 233, 97, 190, 241, 218, 104, 62, 55, 16, 142, 60, 246, 84, 168, 189, 173, 0, 146, 62, 178, 96, 132, 189, 72, 241, 54, 190, 233, 23, 18, 62, 32, 87, 10, 62, 229, 63, 148, 189, 153, 160, 177, 188, 33, 76, 190, 189, 50, 247, 139, 62, 216, 18, 136, 61, 211, 14, 160, 62, 9, 12, 4, 190, 247, 7, 115, 62, 220, 14, 52, 62, 124, 96, 171, 62, 84, 88, 130, 60, 169, 214, 79, 190, 144, 96, 232, 61, 74, 120, 120, 62, 216, 55, 183, 61, 125, 26, 135, 60, 54, 68, 169, 190, 228, 28, 10, 61, 177, 72, 139, 190, 25, 81, 17, 62, 69, 134, 245, 61, 241, 107, 189, 190, 23, 145, 83, 189, 66, 66, 223, 62, 7, 203, 129, 190, 249, 218, 169, 190, 63, 159, 113, 189, 69, 112, 179, 189, 62, 103, 238, 189, 62, 148, 153, 60, 215, 188, 251, 190, 15, 245, 30, 62, 51, 62, 142, 62, 101, 159, 83, 62, 236, 198, 7, 62, 95, 201, 228, 190, 26, 157, 89, 190, 145, 229, 66, 62, 211, 223, 163, 189, 191, 83, 70, 62, 71, 188, 182, 189, 162, 176, 47, 62, 160, 122, 1, 62, 79, 51, 61, 189, 104, 188, 252, 61, 211, 52, 160, 61, 163, 162, 136, 61, 246, 123, 163, 188, 170, 222, 212, 188, 94, 164, 43, 62, 7, 139, 48, 190, 15, 216, 176, 61, 17, 39, 93, 62, 87, 220, 11, 190, 229, 84, 177, 189, 83, 46, 118, 62, 17, 104, 13, 189, 87, 68, 172, 189, 60, 192, 157, 188, 169, 140, 151, 188, 21, 217, 10, 190, 160, 78, 53, 190, 228, 116, 147, 189, 219, 152, 146, 62, 204, 184, 51, 189, 75, 113, 153, 189, 66, 106, 64, 62, 176, 101, 179, 189, 252, 46, 130, 60, 142, 147, 108, 62, 32, 167, 224, 188, 227, 131, 164, 189, 83, 65, 227, 61, 194, 95, 154, 188, 130, 190, 0, 62, 68, 138, 110, 189, 127, 68, 18, 189, 162, 49, 71, 62, 53, 156, 61, 62, 181, 54, 165, 190, 18, 55, 95, 62, 150, 68, 46, 189, 96, 210, 3, 58, 163, 43, 189, 61, 48, 153, 125, 62, 11, 143, 140, 61, 18, 130, 50, 62, 81, 193, 220, 61, 155, 48, 36, 190, 218, 35, 86, 190, 243, 145, 132, 61, 243, 187, 32, 62, 167, 192, 187, 190, 207, 195, 14, 191, 195, 143, 3, 190, 111, 131, 128, 61, 231, 12, 13, 62, 234, 151, 195, 61, 241, 86, 194, 61, 75, 36, 120, 189, 155, 143, 63, 190, 191, 223, 178, 61, 235, 200, 132, 59, 210, 74, 172, 62, 59, 202, 44, 187, 212, 87, 77, 62, 99, 5, 151, 58, 90, 70, 135, 190, 109, 106, 125, 61, 245, 62, 136, 61, 223, 207, 70, 60, 184, 129, 247, 61, 135, 36, 172, 190, 255, 233, 131, 62, 99, 166, 168, 61, 159, 41, 75, 189, 148, 212, 246, 61, 61, 32, 191, 190, 77, 24, 110, 60, 230, 183, 5, 63, 81, 92, 69, 190, 56, 91, 167, 190, 141, 49, 17, 190, 53, 119, 191, 189, 192, 38, 118, 62, 14, 180, 208, 61, 198, 152, 244, 190, 115, 182, 13, 62, 240, 57, 126, 60, 244, 171, 111, 187, 154, 164, 119, 62, 139, 154, 124, 190, 40, 157, 18, 62, 9, 184, 246, 60, 47, 99, 183, 61, 15, 145, 157, 189, 255, 236, 174, 189, 45, 57, 157, 189, 113, 235, 173, 61, 152, 161, 244, 61, 169, 132, 105, 61, 230, 187, 114, 188, 123, 238, 130, 60, 205, 121, 150, 189, 62, 217, 129, 188, 90, 53, 102, 62, 147, 19, 5, 190, 40, 144, 253, 61, 10, 131, 101, 62, 158, 183, 99, 62, 23, 154, 56, 190, 77, 2, 32, 190, 250, 112, 68, 58, 185, 120, 8, 61, 127, 239, 249, 58, 180, 209, 1, 62, 153, 39, 203, 189, 1, 245, 22, 188, 178, 147, 141, 189, 65, 35, 203, 187, 18, 99, 195, 189, 157, 29, 209, 61, 200, 61, 1, 62, 157, 198, 82, 189, 45, 79, 11, 190, 158, 248, 90, 189, 186, 204, 243, 189, 150, 21, 13, 188, 85, 241, 127, 61, 63, 24, 0, 62, 176, 150, 196, 188, 55, 96, 224, 61, 6, 31, 251, 189, 70, 14, 3, 188, 17, 132, 182, 189, 240, 117, 48, 190, 193, 55, 31, 61, 227, 98, 40, 189, 86, 57, 8, 62, 98, 117, 222, 188, 96, 25, 146, 61, 190, 141, 34, 190, 153, 130, 163, 59, 126, 78, 105, 61, 148, 72, 93, 61, 51, 147, 116, 61, 160, 56, 12, 190, 93, 234, 42, 190, 236, 90, 11, 62, 231, 88, 226, 61, 237, 26, 218, 61, 8, 223, 165, 189, 103, 4, 205, 61, 98, 217, 159, 189, 161, 235, 0, 190, 152, 168, 218, 60, 158, 224, 164, 60, 32, 69, 64, 61, 218, 22, 164, 61, 192, 188, 173, 189, 184, 22, 92, 61, 1, 217, 84, 188, 135, 57, 17, 190, 100, 92, 245, 189, 28, 145, 160, 189, 166, 58, 173, 61, 80, 233, 56, 190, 87, 105, 75, 190, 141, 202, 29, 61, 179, 5, 103, 61, 113, 36, 237, 61, 136, 218, 12, 61, 213, 183, 78, 61, 60, 1, 70, 189, 54, 149, 13, 189, 140, 158, 37, 62, 217, 229, 241, 60, 221, 76, 1, 60, 96, 251, 81, 189, 214, 219, 148, 189, 37, 55, 146, 61, 212, 90, 177, 189, 122, 168, 24, 62, 42, 243, 5, 189, 139, 206, 57, 189, 89, 19, 5, 61, 2, 237, 57, 190, 41, 240, 242, 60, 58, 237, 3, 190, 68, 130, 109, 189, 83, 190, 245, 189, 149, 240, 191, 188, 24, 9, 97, 61, 62, 228, 235, 61, 100, 202, 11, 190, 16, 243, 233, 61, 142, 50, 17, 187, 165, 151, 132, 189, 3, 58, 86, 190, 185, 247, 230, 189, 130, 61, 16, 190, 222, 190, 23, 190, 42, 21, 187, 189, 56, 189, 228, 61, 70, 139, 40, 62, 2, 116, 76, 61, 12, 185, 147, 187, 227, 11, 249, 61, 74, 250, 141, 62, 248, 235, 86, 62, 108, 155, 120, 61, 168, 4, 11, 60, 227, 211, 132, 189, 149, 108, 51, 189, 107, 56, 235, 189, 172, 139, 56, 189, 79, 96, 203, 189, 100, 143, 32, 190, 130, 255, 158, 189, 240, 112, 133, 189, 159, 86, 181, 189, 191, 155, 255, 61, 98, 222, 17, 190, 165, 184, 30, 62, 151, 20, 52, 61, 195, 209, 35, 62, 137, 204, 56, 190, 69, 10, 130, 61, 169, 96, 110, 62, 141, 197, 99, 62, 192, 49, 29, 62, 52, 62, 143, 61, 98, 161, 38, 62, 48, 247, 6, 62, 248, 105, 78, 191, 137, 207, 199, 61, 60, 45, 73, 62, 161, 95, 39, 61, 187, 82, 26, 191, 135, 34, 110, 62, 96, 231, 201, 190, 184, 52, 5, 189, 86, 66, 6, 190, 49, 38, 94, 186, 70, 133, 161, 62, 54, 75, 38, 62, 43, 29, 236, 60, 126, 72, 160, 60, 4, 74, 246, 61, 247, 69, 233, 62, 74, 107, 129, 62, 69, 253, 249, 189, 77, 156, 16, 189, 231, 82, 91, 62, 68, 18, 4, 62, 41, 103, 47, 190, 94, 238, 252, 61, 52, 217, 59, 61, 96, 113, 238, 189, 105, 73, 84, 189, 82, 208, 255, 188, 71, 170, 191, 61, 82, 184, 32, 190, 254, 163, 9, 190, 208, 50, 61, 62, 114, 234, 104, 60, 113, 106, 157, 62, 138, 198, 139, 188, 90, 9, 148, 189, 62, 106, 241, 61, 0, 180, 140, 60, 49, 183, 17, 190, 174, 70, 26, 61, 16, 4, 149, 62, 77, 102, 210, 189, 10, 236, 202, 61, 66, 194, 146, 62, 228, 136, 13, 62, 42, 68, 143, 189, 186, 149, 52, 189, 196, 133, 2, 61, 12, 65, 191, 190, 5, 0, 162, 189, 74, 254, 129, 61, 131, 251, 149, 61, 242, 209, 138, 190, 187, 172, 153, 61, 0, 202, 38, 190, 165, 84, 174, 189, 229, 150, 196, 61, 70, 180, 161, 62, 250, 211, 105, 62, 22, 34, 145, 61, 155, 17, 114, 190, 15, 236, 0, 190, 32, 222, 235, 61, 188, 66, 207, 61, 176, 153, 191, 59, 206, 214, 208, 61, 15, 52, 255, 60, 167, 73, 123, 190, 56, 160, 115, 61, 92, 147, 134, 61, 193, 35, 30, 190, 69, 217, 179, 62, 131, 200, 186, 188, 175, 207, 42, 189, 8, 67, 159, 61, 219, 155, 174, 189, 93, 226, 138, 189, 102, 44, 4, 61, 112, 138, 157, 61, 56, 66, 156, 189, 226, 118, 140, 189, 130, 168, 108, 190, 0, 153, 241, 61, 70, 155, 184, 60, 11, 86, 66, 187, 133, 22, 18, 191, 59, 38, 198, 61, 202, 138, 100, 61, 22, 163, 169, 62, 224, 122, 130, 62, 77, 171, 27, 61, 134, 168, 182, 60, 152, 19, 58, 62, 185, 220, 190, 188, 111, 129, 224, 190, 208, 123, 243, 189, 54, 8, 133, 61, 188, 143, 121, 60, 56, 227, 141, 62, 249, 103, 185, 61, 64, 184, 237, 189, 161, 82, 200, 189, 108, 237, 196, 62, 219, 63, 15, 190, 15, 226, 177, 61, 12, 36, 156, 189, 85, 248, 124, 190, 229, 229, 225, 190, 12, 130, 79, 189, 132, 103, 84, 190, 100, 132, 155, 62, 70, 134, 133, 62, 127, 154, 96, 190, 39, 97, 102, 189, 196, 53, 131, 62, 67, 76, 188, 189, 73, 81, 16, 189, 72, 61, 31, 62, 127, 136, 140, 191, 249, 10, 74, 189, 109, 126, 206, 190, 25, 138, 215, 60, 255, 73, 163, 189, 180, 117, 196, 190, 231, 215, 82, 61, 246, 217, 105, 189, 212, 250, 30, 61, 105, 198, 251, 189, 27, 187, 148, 62, 78, 203, 217, 61, 186, 97, 84, 61, 181, 241, 91, 191, 137, 66, 149, 61, 33, 168, 15, 189, 239, 72, 86, 191, 149, 140, 12, 61, 91, 119, 17, 62, 139, 185, 182, 61, 54, 242, 229, 61, 149, 26, 171, 189, 0, 206, 171, 61, 95, 186, 237, 61, 168, 235, 84, 191, 93, 158, 108, 188, 210, 28, 1, 62, 12, 94, 50, 62, 130, 36, 91, 190, 164, 59, 40, 61, 144, 14, 100, 190, 127, 193, 154, 189, 162, 60, 165, 61, 125, 106, 70, 61, 37, 252, 176, 61, 170, 143, 231, 189, 211, 173, 156, 190, 9, 113, 181, 61, 118, 160, 158, 61, 5, 251, 104, 62, 153, 146, 117, 189, 79, 210, 59, 190, 117, 73, 192, 61, 86, 235, 14, 191, 3, 138, 72, 189, 39, 118, 173, 62, 136, 250, 104, 190, 104, 22, 41, 191, 158, 72, 158, 62, 64, 136, 3, 191, 236, 71, 21, 190, 174, 154, 105, 190, 65, 205, 87, 190, 151, 178, 115, 62, 108, 197, 161, 62, 238, 72, 194, 190, 199, 109, 143, 62, 172, 35, 227, 61, 41, 177, 86, 63, 5, 243, 97, 62, 245, 8, 225, 190, 98, 220, 6, 189, 43, 79, 220, 189, 61, 121, 171, 62, 143, 39, 152, 191, 244, 92, 243, 189, 89, 43, 8, 191, 10, 154, 163, 61, 133, 136, 107, 190, 127, 61, 203, 190, 65, 180, 70, 190, 126, 106, 198, 189, 245, 58, 105, 62, 49, 45, 170, 61, 102, 63, 249, 61, 143, 200, 84, 187, 231, 161, 23, 62, 203, 2, 95, 191, 196, 3, 0, 190, 3, 90, 2, 62, 58, 115, 144, 191, 213, 126, 167, 62, 135, 127, 48, 62, 78, 184, 58, 61, 60, 15, 149, 61, 78, 155, 135, 62, 229, 225, 180, 61, 176, 29, 47, 62, 165, 120, 114, 191, 1, 197, 41, 190, 220, 108, 8, 63, 124, 83, 169, 188, 69, 84, 219, 189, 242, 97, 43, 62, 7, 170, 193, 61, 160, 202, 183, 61, 112, 36, 120, 189, 41, 106, 247, 188, 139, 217, 181, 61, 87, 28, 34, 189, 103, 99, 28, 190, 116, 167, 91, 189, 154, 240, 205, 189, 40, 124, 141, 189, 49, 174, 38, 189, 28, 178, 128, 61, 97, 95, 250, 189, 14, 145, 22, 61, 120, 139, 31, 62, 98, 82, 170, 61, 91, 253, 246, 61, 184, 112, 29, 190, 218, 80, 24, 61, 144, 238, 251, 187, 250, 77, 253, 189, 41, 35, 55, 190, 25, 190, 65, 61, 190, 25, 14, 62, 70, 83, 183, 188, 41, 146, 227, 61, 25, 140, 225, 61, 185, 66, 170, 189, 231, 66, 8, 188, 6, 188, 0, 190, 8, 166, 194, 189, 192, 236, 106, 189, 16, 46, 112, 62, 70, 156, 45, 62, 21, 76, 65, 62, 158, 163, 156, 61, 10, 84, 130, 190, 193, 137, 84, 62, 75, 119, 8, 190, 4, 141, 23, 190, 129, 81, 38, 189, 196, 91, 89, 62, 156, 54, 81, 188, 6, 76, 92, 62, 145, 201, 129, 61, 138, 115, 180, 188, 195, 175, 2, 190, 91, 226, 16, 62, 19, 128, 139, 60, 185, 226, 98, 189, 232, 224, 160, 188, 250, 29, 170, 61, 70, 146, 190, 60, 55, 99, 102, 190, 79, 159, 132, 187, 84, 127, 143, 190, 146, 193, 225, 188, 187, 128, 141, 61, 197, 1, 97, 190, 93, 182, 105, 189, 16, 197, 206, 189, 161, 224, 121, 62, 232, 143, 145, 189, 215, 217, 242, 187, 239, 68, 112, 62, 19, 242, 99, 62, 9, 170, 72, 62, 192, 250, 27, 62, 16, 12, 173, 61, 76, 161, 7, 60, 31, 104, 71, 190, 118, 64, 91, 61, 73, 121, 160, 60, 243, 133, 48, 61, 131, 205, 140, 62, 19, 108, 83, 190, 33, 35, 44, 62, 224, 122, 105, 189, 154, 60, 65, 189, 6, 176, 130, 62, 199, 214, 82, 190, 213, 61, 44, 189, 84, 201, 195, 62, 237, 143, 195, 61, 172, 91, 62, 190, 85, 96, 126, 190, 233, 112, 46, 62, 144, 110, 186, 188, 221, 91, 130, 61, 101, 10, 33, 190, 24, 137, 211, 61, 31, 229, 73, 62, 61, 3, 121, 189, 168, 30, 56, 61, 143, 42, 192, 190, 56, 230, 146, 189, 197, 21, 233, 188, 49, 154, 71, 62, 165, 168, 161, 189, 129, 148, 234, 61, 8, 118, 38, 190, 132, 23, 83, 189, 245, 37, 139, 62, 152, 235, 34, 61, 215, 127, 235, 189, 79, 201, 88, 189, 202, 121, 20, 62, 168, 93, 173, 61, 135, 154, 169, 189, 150, 109, 1, 62, 194, 207, 40, 190, 218, 171, 105, 189, 20, 25, 251, 59, 187, 22, 57, 62, 29, 216, 85, 190, 169, 227, 47, 61, 40, 59, 175, 62, 140, 232, 63, 61, 111, 41, 143, 62, 140, 53, 41, 190, 209, 152, 68, 61, 155, 31, 129, 62, 104, 128, 144, 189, 224, 184, 76, 189, 169, 131, 129, 62, 79, 49, 231, 61, 100, 241, 149, 61, 145, 46, 196, 61, 167, 133, 152, 61, 241, 180, 165, 189, 141, 83, 151, 62, 111, 254, 97, 62, 157, 12, 75, 62, 207, 60, 162, 61, 56, 212, 171, 190, 208, 245, 82, 62, 245, 97, 71, 61, 65, 246, 169, 188, 102, 184, 1, 61, 38, 167, 105, 190, 223, 130, 249, 186, 54, 205, 99, 190, 121, 217, 82, 62, 40, 30, 155, 62, 192, 124, 29, 187, 240, 33, 34, 190, 8, 173, 212, 62, 208, 248, 19, 190, 110, 43, 140, 190, 21, 206, 137, 190, 127, 59, 51, 60, 85, 28, 200, 61, 36, 85, 98, 190, 152, 196, 220, 190, 211, 168, 0, 61, 20, 186, 107, 62, 148, 20, 4, 189, 60, 27, 174, 62, 173, 76, 142, 190, 20, 125, 65, 189, 228, 139, 60, 61, 124, 219, 111, 190, 14, 232, 195, 61, 124, 88, 224, 188, 207, 37, 35, 61, 128, 94, 65, 189, 87, 205, 196, 189, 199, 105, 68, 61, 215, 68, 62, 189, 15, 143, 9, 62, 49, 165, 6, 190, 213, 23, 65, 189, 85, 159, 199, 60, 213, 141, 211, 189, 197, 132, 136, 188, 137, 92, 66, 62, 75, 204, 112, 190, 224, 184, 25, 60, 145, 65, 95, 62, 43, 33, 27, 190, 169, 248, 73, 61, 134, 124, 30, 190, 187, 104, 110, 190, 241, 19, 133, 190, 210, 134, 143, 190, 152, 12, 21, 190, 58, 176, 101, 62, 251, 249, 239, 188, 32, 199, 87, 190, 215, 169, 23, 62, 163, 229, 63, 62, 1, 157, 214, 61, 107, 149, 128, 186, 30, 83, 83, 61, 48, 202, 176, 188, 149, 249, 131, 60, 29, 0, 64, 61, 14, 114, 250, 61, 160, 53, 222, 61, 235, 23, 151, 61, 194, 72, 102, 62, 247, 38, 101, 62, 141, 243, 178, 189, 176, 36, 208, 61, 199, 20, 128, 189, 79, 247, 147, 189, 113, 114, 0, 62, 50, 164, 236, 61, 15, 242, 235, 188, 175, 14, 225, 61, 141, 70, 78, 190, 224, 225, 96, 190, 38, 138, 67, 190, 57, 37, 195, 61, 187, 245, 56, 189, 80, 238, 202, 190, 15, 230, 15, 191, 36, 243, 3, 62, 243, 119, 135, 60, 150, 177, 55, 61, 176, 44, 135, 62, 239, 67, 182, 61, 169, 212, 230, 189, 192, 235, 168, 188, 48, 128, 5, 61, 53, 163, 43, 62, 167, 228, 139, 61, 133, 48, 205, 61, 41, 53, 55, 190, 134, 78, 63, 61, 40, 123, 136, 189, 10, 58, 142, 189, 215, 23, 115, 61, 219, 159, 26, 62, 87, 129, 71, 62, 107, 159, 84, 61, 80, 222, 48, 190, 188, 207, 177, 189, 44, 72, 186, 61, 146, 101, 74, 62, 201, 255, 6, 190, 247, 175, 31, 62, 48, 18, 27, 61, 39, 181, 87, 61, 121, 48, 191, 60, 160, 250, 66, 190, 147, 95, 123, 62, 79, 162, 84, 190, 223, 32, 143, 190, 127, 38, 109, 189, 115, 104, 97, 190, 72, 243, 118, 59, 234, 1, 224, 189, 103, 226, 56, 62, 34, 82, 246, 188, 177, 45, 200, 188, 197, 64, 69, 60, 230, 207, 123, 189, 132, 37, 222, 61, 31, 247, 246, 61, 17, 80, 215, 189, 155, 194, 91, 61, 113, 53, 159, 190, 244, 69, 91, 62, 179, 28, 23, 61, 177, 136, 41, 62, 2, 49, 25, 57, 205, 208, 78, 190, 90, 190, 240, 187, 10, 247, 129, 60, 81, 199, 179, 61, 231, 22, 88, 62, 47, 36, 152, 189, 19, 213, 42, 61, 154, 109, 166, 62, 108, 139, 13, 189, 221, 90, 199, 187, 201, 176, 142, 190, 72, 216, 15, 190, 222, 50, 21, 62, 68, 185, 163, 62, 214, 86, 0, 190, 30, 76, 70, 62, 109, 128, 247, 61, 123, 64, 60, 189, 25, 189, 13, 190, 102, 150, 182, 190, 69, 7, 65, 61, 183, 236, 0, 61, 135, 142, 194, 61, 201, 111, 136, 189, 232, 219, 32, 190, 104, 115, 132, 189, 179, 21, 51, 189, 239, 88, 41, 61, 138, 190, 208, 189, 204, 97, 33, 62, 235, 45, 57, 189, 120, 140, 168, 189, 98, 58, 39, 61, 114, 144, 42, 190, 182, 115, 91, 189, 245, 125, 147, 60, 235, 193, 13, 61, 194, 113, 162, 61, 68, 146, 52, 190, 28, 24, 212, 61, 62, 166, 96, 189, 151, 132, 241, 189, 213, 78, 223, 61, 248, 84, 204, 61, 246, 205, 18, 190, 49, 116, 9, 189, 224, 172, 12, 62, 194, 235, 50, 190, 186, 226, 183, 188, 55, 109, 204, 188, 232, 205, 193, 189, 176, 255, 24, 62, 149, 37, 5, 62, 185, 74, 16, 190, 150, 207, 62, 61, 210, 184, 146, 191, 109, 236, 157, 189, 198, 22, 53, 190, 174, 199, 251, 60, 26, 112, 60, 59, 226, 170, 172, 190, 19, 20, 179, 190, 18, 29, 217, 189, 143, 209, 49, 62, 182, 226, 36, 188, 245, 199, 119, 62, 224, 52, 45, 62, 146, 90, 156, 61, 227, 192, 14, 191, 137, 115, 188, 61, 176, 104, 13, 189, 230, 107, 105, 191, 101, 166, 106, 62, 236, 93, 71, 62, 28, 111, 145, 61, 195, 61, 70, 62, 119, 219, 62, 190, 14, 42, 1, 62, 20, 151, 64, 189, 121, 4, 28, 191, 153, 11, 141, 190, 236, 44, 132, 62, 254, 30, 70, 190, 100, 142, 18, 62, 59, 54, 104, 62, 129, 168, 189, 186, 47, 230, 17, 62, 121, 164, 147, 189, 238, 238, 149, 60, 170, 145, 30, 190, 94, 97, 166, 189, 223, 222, 134, 189, 162, 242, 22, 62, 83, 198, 197, 189, 60, 137, 176, 61, 147, 236, 131, 61, 135, 55, 180, 61, 27, 109, 120, 190, 32, 56, 129, 188, 230, 117, 193, 61, 24, 9, 4, 61, 253, 182, 87, 61, 100, 212, 104, 187, 190, 246, 20, 60, 22, 167, 205, 189, 16, 248, 1, 190, 55, 34, 41, 190, 222, 9, 4, 62, 230, 13, 224, 189, 56, 230, 85, 188, 113, 253, 98, 190, 28, 181, 62, 189, 80, 231, 20, 189, 247, 37, 242, 61, 9, 191, 17, 62, 252, 239, 195, 61, 225, 173, 35, 190, 74, 198, 89, 61, 96, 54, 39, 188, 175, 132, 113, 187, 53, 16, 227, 189, 185, 80, 100, 61, 230, 90, 142, 188, 32, 20, 249, 61, 25, 142, 107, 189, 207, 40, 16, 190, 130, 255, 51, 190, 18, 232, 233, 61, 109, 127, 39, 61, 129, 218, 70, 188, 64, 119, 22, 62, 227, 125, 190, 61, 178, 0, 250, 189, 229, 77, 13, 188, 100, 74, 55, 189, 204, 168, 87, 190, 234, 94, 14, 190, 34, 222, 163, 189, 167, 123, 0, 190, 44, 87, 78, 190, 24, 241, 47, 190, 144, 174, 95, 190, 194, 39, 193, 61, 156, 130, 12, 190, 171, 96, 55, 62, 135, 117, 149, 189, 238, 250, 245, 189, 112, 13, 0, 61, 111, 11, 23, 190, 216, 54, 48, 61, 221, 247, 210, 189, 216, 7, 151, 62, 225, 164, 235, 61, 120, 85, 142, 62, 123, 89, 217, 189, 42, 204, 140, 190, 20, 36, 131, 61, 195, 99, 4, 62, 103, 106, 142, 187, 207, 128, 91, 61, 193, 31, 177, 187, 238, 151, 2, 61, 45, 79, 202, 61, 245, 22, 74, 60, 218, 192, 161, 60, 36, 42, 76, 190, 62, 102, 99, 188, 105, 154, 97, 62, 92, 181, 132, 59, 161, 255, 94, 190, 118, 8, 174, 189, 84, 201, 217, 61, 248, 66, 165, 62, 204, 237, 28, 189, 171, 234, 154, 190, 164, 194, 108, 61, 95, 109, 89, 62, 73, 144, 220, 61, 183, 106, 146, 60, 159, 201, 171, 190, 64, 20, 79, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 76, 55, 62, 241, 244, 211, 189, 207, 199, 7, 62, 133, 226, 170, 61, 19, 36, 124, 62, 249, 236, 133, 190, 251, 105, 80, 188, 67, 40, 120, 62, 203, 160, 65, 190, 2, 229, 21, 190, 228, 93, 214, 61, 103, 106, 31, 188, 27, 229, 19, 190, 19, 140, 251, 189, 160, 211, 135, 61, 36, 125, 170, 62, 170, 224, 1, 62, 190, 39, 134, 62, 253, 1, 225, 189, 115, 69, 169, 188, 115, 188, 61, 62, 99, 43, 11, 189, 199, 148, 173, 61, 255, 179, 33, 190, 15, 64, 136, 189, 2, 151, 28, 62, 161, 29, 95, 60, 166, 2, 82, 190, 186, 164, 173, 61, 227, 106, 134, 188, 193, 186, 136, 61, 38, 41, 60, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 15, 178, 190, 122, 142, 206, 62, 203, 103, 102, 189, 137, 163, 236, 62, 117, 243, 43, 62, 230, 56, 171, 62, 189, 110, 113, 62, 252, 154, 252, 187, 8, 207, 46, 62, 221, 119, 71, 188, 54, 207, 76, 189, 64, 26, 50, 62, 213, 149, 31, 62, 93, 171, 61, 189, 244, 222, 195, 190, 240, 27, 192, 190, 147, 207, 65, 63, 241, 88, 104, 191, 187, 96, 135, 59, 75, 227, 21, 62, 83, 141, 149, 62, 115, 95, 105, 190, 86, 51, 214, 62, 228, 186, 4, 190, 54, 14, 134, 62, 128, 223, 195, 61, 172, 127, 38, 62, 132, 226, 2, 62, 22, 172, 39, 191, 111, 110, 181, 61, 61, 36, 242, 61, 236, 16, 136, 62, 143, 11, 146, 61, 72, 197, 28, 189, 198, 84, 93, 190, 234, 190, 26, 62, 22, 25, 137, 190, 204, 184, 108, 62, 36, 9, 199, 61, 205, 38, 49, 190, 90, 152, 191, 189, 83, 204, 137, 188, 53, 169, 119, 61, 144, 154, 40, 190, 46, 100, 202, 61, 249, 193, 145, 60, 175, 182, 240, 61, 229, 12, 153, 189, 98, 120, 91, 62, 244, 173, 129, 188, 71, 51, 179, 189, 132, 75, 67, 190, 85, 102, 28, 190, 138, 84, 11, 188, 117, 160, 173, 188, 37, 173, 4, 62, 213, 191, 185, 61, 145, 214, 18, 190, 113, 35, 146, 61, 109, 52, 27, 61, 17, 237, 58, 61, 77, 0, 175, 189, 53, 226, 39, 60, 115, 40, 228, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 67, 213, 189, 56, 31, 168, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {116, 101, 160, 191, 204, 58, 7, 192, 14, 241, 172, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {147, 125, 148, 63, 18, 225, 59, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0054/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}