// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 54, 175, 62, 34, 58, 168, 186, 191, 68, 126, 190, 229, 15, 1, 191, 27, 164, 161, 62, 189, 231, 131, 190, 254, 61, 224, 190, 217, 97, 246, 62, 51, 134, 13, 63, 47, 41, 5, 63, 127, 174, 31, 63, 153, 160, 185, 190, 161, 69, 254, 61, 154, 106, 3, 191, 49, 212, 38, 63, 160, 47, 1, 63, 222, 45, 88, 191, 196, 179, 138, 190, 130, 247, 101, 62, 116, 225, 111, 191, 181, 99, 54, 63, 234, 165, 172, 61, 184, 242, 41, 63, 201, 158, 42, 63, 236, 128, 193, 62, 105, 231, 188, 190, 243, 41, 237, 190, 104, 99, 19, 63, 214, 109, 176, 190, 209, 186, 211, 190, 92, 145, 30, 191, 136, 68, 229, 62, 241, 71, 211, 187, 140, 211, 189, 62, 113, 220, 3, 63, 173, 99, 184, 62, 79, 72, 117, 191, 144, 220, 67, 191, 2, 144, 15, 190, 224, 248, 255, 190, 238, 243, 252, 61, 90, 103, 214, 190, 46, 79, 212, 190, 192, 173, 170, 191, 220, 20, 54, 190, 243, 221, 137, 62, 35, 47, 176, 62, 95, 190, 204, 62, 180, 56, 40, 187, 94, 210, 116, 63, 225, 211, 12, 63, 255, 172, 40, 190, 167, 223, 151, 191, 20, 59, 8, 191, 20, 216, 23, 191, 107, 121, 232, 189, 118, 252, 4, 63, 45, 149, 68, 62, 21, 166, 4, 63, 158, 244, 129, 190, 176, 67, 57, 63, 8, 212, 184, 63, 61, 94, 189, 62, 232, 7, 5, 62, 148, 107, 127, 62, 46, 34, 246, 62, 185, 6, 83, 63, 101, 247, 145, 63, 80, 213, 90, 62, 215, 250, 2, 191, 8, 67, 134, 63, 235, 186, 34, 62, 20, 226, 239, 190, 191, 211, 120, 63, 164, 80, 96, 62, 211, 122, 3, 63, 3, 12, 156, 63, 198, 162, 179, 62, 7, 35, 219, 190, 188, 122, 160, 190, 10, 31, 62, 63, 245, 243, 222, 62, 81, 10, 2, 191, 33, 201, 146, 190, 172, 154, 128, 63, 121, 113, 9, 190, 24, 237, 72, 189, 236, 165, 86, 63, 250, 245, 129, 191, 247, 230, 119, 190, 186, 3, 230, 190, 112, 252, 230, 190, 49, 189, 226, 62, 111, 34, 235, 190, 204, 75, 148, 190, 55, 69, 68, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 34, 138, 191, 31, 18, 53, 190, 109, 17, 98, 189, 236, 137, 133, 62, 3, 174, 87, 62, 75, 251, 181, 62, 67, 254, 52, 61, 12, 170, 160, 62, 231, 156, 109, 190, 193, 244, 7, 186, 83, 190, 186, 62, 147, 160, 121, 62, 195, 232, 84, 63, 218, 87, 21, 191, 115, 251, 130, 62, 65, 230, 218, 62, 200, 240, 16, 191, 237, 139, 86, 190, 81, 87, 213, 190, 114, 11, 133, 62, 34, 2, 153, 190, 76, 43, 96, 61, 254, 252, 42, 62, 40, 233, 28, 62, 79, 189, 169, 62, 234, 251, 171, 190, 69, 234, 70, 190, 13, 221, 41, 191, 243, 26, 66, 189, 28, 127, 24, 189, 33, 113, 43, 191, 113, 102, 3, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 249, 41, 191, 202, 6, 36, 62, 210, 120, 226, 190, 242, 183, 71, 189, 66, 131, 79, 188, 255, 225, 150, 187, 139, 178, 109, 62, 215, 99, 130, 189, 177, 247, 43, 190, 173, 56, 14, 190, 139, 235, 209, 188, 181, 33, 192, 62, 118, 129, 215, 190, 178, 60, 192, 61, 25, 130, 239, 190, 246, 206, 133, 190, 228, 59, 82, 190, 120, 139, 135, 61, 94, 178, 75, 191, 219, 11, 189, 62, 43, 67, 227, 62, 135, 91, 159, 62, 219, 86, 223, 62, 147, 17, 1, 190, 63, 203, 121, 60, 69, 24, 150, 62, 155, 113, 252, 189, 141, 156, 253, 189, 82, 239, 116, 62, 0, 197, 205, 190, 68, 199, 211, 190, 151, 199, 2, 189, 50, 41, 201, 62, 2, 48, 45, 190, 138, 96, 124, 62, 170, 73, 234, 61, 4, 88, 31, 62, 180, 231, 42, 62, 106, 139, 172, 190, 232, 154, 35, 62, 60, 161, 68, 61, 7, 165, 127, 62, 230, 209, 51, 190, 113, 110, 154, 61, 162, 181, 131, 62, 236, 144, 83, 190, 120, 4, 92, 62, 175, 226, 17, 62, 24, 11, 161, 190, 113, 78, 43, 190, 221, 244, 134, 62, 140, 149, 39, 188, 206, 125, 42, 191, 68, 160, 30, 190, 160, 246, 211, 187, 30, 132, 48, 191, 243, 224, 245, 190, 65, 239, 127, 190, 105, 67, 134, 62, 145, 38, 12, 62, 170, 155, 4, 62, 82, 0, 211, 62, 90, 204, 166, 190, 16, 142, 128, 62, 13, 63, 215, 190, 32, 107, 147, 189, 249, 50, 212, 61, 43, 81, 4, 190, 234, 20, 32, 187, 236, 131, 159, 62, 121, 172, 12, 62, 245, 113, 0, 188, 144, 150, 154, 184, 238, 133, 27, 62, 108, 158, 104, 62, 59, 179, 81, 62, 20, 183, 249, 189, 153, 51, 144, 60, 176, 98, 221, 61, 13, 236, 2, 62, 95, 138, 91, 189, 170, 92, 4, 190, 244, 96, 125, 190, 194, 130, 112, 62, 130, 219, 2, 189, 240, 82, 125, 189, 223, 239, 165, 62, 90, 211, 251, 60, 39, 118, 39, 190, 255, 62, 208, 61, 63, 14, 27, 62, 197, 86, 49, 190, 120, 87, 55, 61, 181, 219, 79, 189, 188, 115, 129, 62, 250, 159, 169, 61, 110, 180, 55, 63, 45, 24, 117, 189, 170, 250, 55, 62, 18, 227, 113, 62, 247, 250, 194, 62, 74, 51, 146, 59, 108, 95, 9, 190, 197, 198, 2, 62, 201, 123, 142, 62, 28, 129, 253, 61, 121, 122, 215, 60, 39, 14, 146, 190, 205, 72, 60, 190, 109, 143, 69, 190, 111, 144, 63, 190, 247, 20, 13, 62, 22, 248, 2, 191, 228, 90, 196, 189, 126, 63, 221, 62, 155, 217, 36, 190, 146, 249, 126, 191, 198, 239, 180, 188, 93, 86, 84, 190, 31, 90, 82, 191, 71, 93, 200, 190, 160, 117, 130, 191, 37, 125, 31, 62, 31, 162, 194, 62, 207, 36, 155, 62, 120, 105, 51, 62, 32, 247, 173, 190, 123, 114, 72, 190, 134, 219, 77, 62, 154, 104, 239, 189, 148, 135, 36, 62, 99, 214, 1, 189, 254, 235, 5, 62, 236, 176, 34, 62, 232, 44, 127, 189, 50, 232, 94, 61, 43, 164, 123, 61, 28, 247, 226, 61, 79, 118, 100, 189, 32, 3, 182, 189, 123, 57, 235, 61, 171, 254, 131, 190, 176, 149, 215, 60, 237, 111, 19, 62, 200, 124, 65, 190, 106, 108, 27, 190, 238, 158, 99, 62, 120, 26, 137, 61, 234, 209, 232, 190, 59, 191, 101, 189, 230, 45, 252, 189, 214, 74, 171, 190, 81, 31, 198, 190, 251, 129, 171, 190, 208, 62, 133, 62, 157, 212, 6, 190, 46, 237, 179, 189, 222, 231, 136, 62, 141, 233, 61, 189, 176, 110, 104, 61, 201, 88, 223, 62, 21, 96, 129, 189, 25, 55, 0, 61, 30, 14, 255, 61, 59, 225, 14, 61, 208, 193, 209, 61, 109, 58, 164, 60, 202, 185, 131, 60, 143, 103, 76, 62, 24, 168, 104, 62, 179, 12, 190, 190, 74, 98, 128, 62, 240, 136, 175, 61, 74, 10, 117, 57, 128, 64, 3, 61, 6, 59, 146, 62, 132, 60, 22, 62, 105, 223, 48, 62, 6, 114, 80, 62, 226, 116, 218, 189, 135, 125, 209, 190, 31, 6, 30, 62, 128, 33, 141, 61, 84, 188, 197, 190, 103, 50, 20, 191, 82, 164, 67, 190, 181, 234, 8, 62, 72, 159, 60, 62, 71, 211, 226, 59, 49, 102, 12, 62, 132, 143, 158, 61, 249, 238, 46, 190, 15, 82, 52, 191, 40, 177, 217, 188, 0, 129, 159, 62, 179, 116, 10, 57, 255, 223, 44, 62, 142, 53, 0, 190, 191, 46, 145, 190, 238, 227, 231, 60, 67, 230, 47, 190, 153, 114, 152, 190, 79, 109, 46, 62, 14, 211, 209, 190, 19, 123, 12, 63, 131, 136, 134, 189, 111, 174, 16, 62, 24, 202, 18, 61, 169, 219, 223, 190, 144, 247, 0, 189, 170, 24, 7, 63, 116, 186, 236, 189, 145, 14, 101, 191, 36, 78, 57, 190, 8, 70, 206, 190, 243, 119, 209, 62, 21, 166, 133, 62, 240, 47, 65, 191, 29, 2, 7, 62, 6, 104, 194, 190, 15, 129, 20, 191, 193, 96, 25, 190, 166, 45, 52, 190, 178, 217, 158, 62, 11, 139, 61, 190, 200, 253, 61, 62, 164, 104, 0, 190, 198, 123, 94, 190, 19, 191, 245, 60, 19, 37, 214, 61, 90, 178, 102, 62, 65, 158, 32, 61, 176, 206, 0, 190, 189, 62, 28, 190, 19, 93, 16, 62, 22, 145, 74, 189, 83, 238, 127, 62, 208, 206, 210, 190, 208, 224, 143, 61, 202, 42, 128, 62, 13, 233, 204, 189, 215, 47, 138, 190, 218, 45, 21, 190, 121, 79, 40, 190, 216, 190, 150, 190, 209, 226, 67, 188, 93, 213, 20, 61, 136, 250, 121, 190, 104, 232, 254, 189, 65, 191, 210, 190, 88, 24, 185, 61, 217, 137, 33, 190, 229, 75, 193, 62, 193, 214, 205, 61, 19, 51, 101, 189, 190, 104, 0, 190, 201, 94, 172, 189, 27, 74, 27, 190, 150, 21, 13, 188, 59, 132, 255, 60, 63, 24, 0, 62, 242, 237, 108, 189, 55, 96, 224, 61, 6, 31, 251, 189, 11, 122, 51, 189, 131, 212, 255, 189, 184, 178, 79, 190, 193, 55, 31, 61, 248, 88, 148, 189, 62, 254, 205, 61, 146, 188, 15, 189, 96, 25, 146, 61, 190, 141, 34, 190, 247, 61, 227, 188, 126, 78, 105, 61, 170, 174, 187, 60, 51, 147, 116, 61, 160, 56, 12, 190, 93, 234, 42, 190, 5, 1, 217, 61, 11, 212, 170, 61, 237, 26, 218, 61, 8, 223, 165, 189, 195, 154, 126, 61, 98, 217, 159, 189, 13, 134, 39, 190, 152, 168, 218, 60, 218, 75, 73, 188, 32, 69, 64, 61, 218, 22, 164, 61, 192, 188, 173, 189, 184, 22, 92, 61, 1, 217, 84, 188, 135, 57, 17, 190, 100, 92, 245, 189, 28, 145, 160, 189, 166, 58, 173, 61, 80, 233, 56, 190, 87, 105, 75, 190, 141, 202, 29, 61, 179, 5, 103, 61, 113, 36, 237, 61, 136, 218, 12, 61, 213, 183, 78, 61, 60, 1, 70, 189, 54, 149, 13, 189, 140, 158, 37, 62, 217, 229, 241, 60, 221, 76, 1, 60, 96, 251, 81, 189, 214, 219, 148, 189, 37, 55, 146, 61, 212, 90, 177, 189, 122, 168, 24, 62, 42, 243, 5, 189, 139, 206, 57, 189, 89, 19, 5, 61, 2, 237, 57, 190, 41, 240, 242, 60, 58, 237, 3, 190, 68, 130, 109, 189, 181, 10, 79, 190, 248, 186, 133, 189, 215, 242, 114, 62, 93, 13, 44, 62, 47, 96, 135, 190, 212, 157, 22, 62, 92, 16, 43, 61, 121, 30, 110, 188, 89, 249, 217, 190, 145, 148, 111, 191, 170, 238, 63, 188, 149, 115, 115, 191, 201, 160, 233, 189, 250, 201, 187, 190, 115, 165, 107, 62, 119, 76, 169, 61, 223, 54, 110, 190, 204, 245, 1, 62, 127, 28, 216, 62, 109, 31, 29, 63, 151, 189, 219, 61, 189, 181, 151, 62, 121, 104, 35, 191, 71, 198, 236, 190, 74, 162, 10, 62, 199, 106, 52, 188, 7, 140, 100, 190, 138, 125, 136, 60, 3, 81, 206, 190, 250, 90, 215, 189, 180, 89, 142, 190, 178, 223, 64, 62, 202, 70, 103, 62, 119, 178, 3, 62, 199, 131, 4, 62, 90, 115, 197, 61, 33, 155, 177, 190, 58, 169, 3, 61, 64, 55, 54, 62, 120, 178, 182, 62, 148, 219, 125, 62, 33, 190, 194, 61, 144, 64, 220, 61, 166, 145, 78, 189, 127, 61, 133, 191, 117, 149, 12, 188, 139, 57, 247, 61, 145, 206, 20, 61, 84, 82, 142, 191, 18, 200, 58, 62, 202, 51, 92, 190, 244, 151, 131, 190, 138, 106, 36, 190, 174, 141, 158, 189, 237, 158, 2, 63, 41, 26, 40, 62, 234, 206, 227, 189, 245, 22, 2, 189, 206, 117, 242, 61, 233, 22, 189, 62, 180, 74, 169, 62, 69, 204, 235, 189, 114, 174, 30, 61, 241, 9, 67, 63, 93, 142, 134, 62, 232, 140, 0, 190, 202, 132, 252, 61, 25, 72, 44, 61, 20, 211, 244, 190, 225, 89, 43, 189, 76, 196, 14, 61, 250, 157, 22, 62, 239, 180, 84, 190, 248, 219, 7, 189, 158, 161, 135, 62, 204, 133, 230, 189, 233, 106, 215, 62, 137, 140, 25, 191, 79, 151, 98, 189, 178, 138, 126, 62, 72, 97, 200, 61, 179, 228, 74, 190, 237, 90, 197, 61, 203, 189, 25, 63, 79, 189, 104, 189, 37, 186, 54, 62, 216, 141, 157, 62, 196, 111, 62, 62, 150, 178, 21, 62, 81, 88, 34, 189, 222, 223, 137, 62, 238, 121, 44, 191, 21, 190, 116, 190, 236, 215, 206, 189, 115, 151, 27, 62, 36, 14, 23, 191, 246, 116, 19, 62, 248, 228, 110, 190, 53, 59, 241, 189, 230, 69, 177, 61, 179, 245, 153, 62, 193, 194, 87, 62, 235, 172, 9, 61, 71, 160, 110, 190, 200, 63, 88, 190, 19, 228, 217, 61, 232, 94, 146, 61, 198, 77, 2, 61, 139, 137, 8, 62, 229, 169, 98, 62, 10, 255, 144, 190, 73, 112, 11, 61, 116, 113, 16, 62, 233, 176, 52, 190, 207, 151, 147, 62, 232, 255, 140, 62, 26, 94, 167, 189, 41, 255, 57, 62, 181, 213, 155, 190, 50, 93, 62, 190, 196, 233, 138, 62, 182, 239, 136, 61, 191, 227, 0, 190, 1, 9, 198, 189, 136, 201, 220, 190, 19, 155, 143, 61, 93, 121, 58, 61, 117, 69, 144, 62, 91, 180, 2, 191, 34, 135, 193, 61, 200, 34, 23, 190, 71, 65, 179, 62, 129, 128, 168, 62, 29, 187, 56, 61, 9, 3, 158, 60, 167, 224, 159, 62, 52, 214, 141, 60, 243, 91, 235, 190, 24, 29, 65, 190, 75, 125, 112, 187, 237, 124, 20, 62, 196, 5, 196, 62, 106, 170, 166, 61, 44, 214, 249, 189, 100, 50, 81, 61, 7, 183, 189, 62, 16, 117, 183, 190, 32, 235, 43, 62, 150, 217, 206, 189, 121, 44, 196, 190, 73, 108, 229, 190, 140, 88, 50, 190, 33, 16, 51, 190, 251, 38, 158, 62, 55, 77, 14, 63, 69, 172, 222, 189, 69, 131, 215, 61, 217, 41, 84, 62, 168, 58, 207, 189, 95, 253, 144, 190, 172, 106, 12, 62, 0, 41, 17, 192, 168, 56, 79, 189, 1, 58, 0, 62, 82, 24, 254, 61, 205, 166, 64, 63, 124, 20, 149, 191, 124, 186, 249, 61, 137, 199, 234, 60, 232, 58, 120, 189, 214, 252, 255, 190, 58, 180, 185, 62, 198, 126, 207, 61, 189, 0, 241, 62, 115, 110, 142, 191, 142, 130, 136, 61, 40, 253, 192, 188, 62, 99, 142, 191, 221, 149, 114, 188, 142, 158, 76, 188, 250, 208, 91, 190, 39, 216, 55, 60, 220, 56, 36, 190, 73, 220, 37, 190, 250, 150, 54, 190, 28, 212, 166, 190, 106, 110, 153, 188, 138, 55, 30, 62, 212, 191, 93, 62, 163, 181, 2, 63, 10, 28, 76, 189, 57, 224, 121, 188, 244, 240, 74, 62, 54, 124, 146, 61, 249, 26, 75, 62, 237, 224, 163, 61, 163, 115, 49, 190, 0, 235, 144, 190, 208, 84, 190, 61, 195, 229, 244, 188, 63, 20, 145, 62, 178, 231, 7, 62, 13, 19, 89, 190, 212, 204, 1, 61, 93, 62, 202, 190, 2, 36, 27, 190, 245, 171, 169, 62, 252, 59, 140, 190, 66, 99, 204, 191, 181, 205, 160, 62, 165, 234, 142, 190, 7, 224, 5, 191, 215, 75, 102, 190, 91, 196, 152, 190, 6, 9, 28, 63, 137, 47, 231, 62, 124, 122, 27, 191, 39, 74, 137, 62, 184, 111, 164, 59, 181, 30, 80, 63, 161, 123, 153, 62, 159, 229, 167, 190, 98, 209, 175, 189, 25, 246, 168, 190, 245, 121, 168, 62, 118, 180, 21, 192, 251, 72, 157, 189, 55, 139, 31, 191, 236, 77, 229, 61, 240, 215, 229, 190, 114, 80, 20, 191, 225, 0, 216, 189, 205, 140, 215, 188, 188, 100, 242, 61, 60, 145, 224, 61, 186, 27, 253, 61, 215, 134, 163, 185, 97, 197, 155, 62, 54, 96, 100, 191, 170, 30, 13, 191, 146, 36, 11, 62, 241, 208, 129, 191, 189, 183, 149, 62, 86, 7, 157, 62, 180, 235, 58, 60, 186, 97, 239, 61, 20, 209, 208, 61, 6, 23, 46, 59, 159, 255, 160, 62, 219, 67, 119, 191, 145, 164, 29, 190, 116, 241, 23, 63, 199, 62, 66, 188, 229, 19, 139, 62, 33, 11, 254, 61, 7, 170, 193, 61, 160, 202, 183, 61, 176, 239, 143, 189, 36, 194, 249, 188, 136, 57, 164, 61, 87, 28, 34, 189, 160, 24, 36, 190, 113, 97, 141, 189, 154, 240, 205, 189, 40, 124, 141, 189, 135, 238, 51, 189, 135, 193, 88, 61, 97, 95, 250, 189, 14, 145, 22, 61, 120, 139, 31, 62, 174, 161, 150, 61, 248, 81, 226, 61, 184, 112, 29, 190, 241, 178, 0, 61, 231, 145, 9, 188, 159, 192, 10, 190, 165, 230, 64, 190, 162, 217, 23, 61, 202, 110, 7, 62, 25, 27, 2, 189, 96, 126, 205, 61, 23, 144, 204, 61, 185, 66, 170, 189, 231, 66, 8, 188, 6, 188, 0, 190, 20, 178, 196, 189, 192, 236, 106, 189, 124, 248, 198, 62, 196, 13, 34, 62, 52, 186, 3, 62, 158, 162, 212, 61, 201, 165, 125, 190, 43, 139, 108, 62, 107, 9, 110, 189, 13, 248, 145, 190, 113, 246, 113, 189, 158, 235, 105, 62, 139, 12, 2, 61, 122, 81, 81, 62, 43, 145, 223, 189, 198, 8, 35, 189, 22, 194, 174, 190, 252, 229, 136, 61, 185, 195, 254, 186, 43, 43, 193, 189, 180, 219, 194, 188, 173, 226, 15, 62, 41, 153, 41, 190, 128, 78, 95, 190, 48, 92, 66, 61, 28, 68, 149, 191, 154, 68, 103, 191, 246, 31, 141, 190, 6, 42, 186, 190, 150, 119, 139, 189, 164, 84, 208, 189, 0, 243, 146, 62, 92, 29, 108, 61, 79, 222, 65, 189, 120, 193, 187, 62, 249, 92, 106, 62, 86, 130, 62, 62, 238, 242, 244, 61, 94, 58, 158, 61, 95, 36, 250, 59, 217, 36, 48, 190, 240, 66, 27, 61, 64, 74, 178, 189, 22, 64, 173, 188, 239, 101, 181, 62, 169, 183, 76, 190, 58, 82, 99, 62, 7, 105, 203, 189, 133, 179, 65, 189, 143, 59, 115, 62, 52, 49, 116, 190, 251, 10, 194, 189, 126, 234, 189, 62, 156, 212, 4, 62, 51, 148, 239, 190, 119, 168, 117, 190, 132, 228, 212, 61, 110, 243, 198, 61, 154, 60, 188, 61, 55, 95, 163, 190, 151, 52, 191, 61, 87, 69, 6, 62, 13, 2, 170, 189, 159, 215, 96, 61, 150, 177, 165, 190, 60, 1, 82, 60, 11, 88, 124, 190, 154, 207, 114, 62, 62, 159, 6, 190, 5, 128, 58, 62, 55, 255, 160, 189, 133, 65, 204, 61, 207, 239, 175, 62, 230, 166, 35, 61, 23, 117, 44, 60, 40, 181, 49, 61, 179, 241, 59, 189, 69, 228, 170, 61, 202, 36, 24, 190, 188, 4, 43, 62, 223, 0, 199, 61, 50, 180, 4, 189, 112, 56, 151, 188, 77, 20, 107, 62, 103, 9, 85, 190, 141, 4, 115, 61, 254, 136, 239, 62, 127, 226, 12, 61, 222, 164, 195, 62, 9, 168, 0, 191, 3, 82, 147, 190, 212, 172, 168, 62, 195, 101, 221, 188, 104, 196, 152, 188, 131, 47, 217, 62, 160, 171, 58, 62, 40, 103, 102, 61, 22, 62, 155, 61, 61, 101, 195, 62, 172, 33, 200, 189, 141, 22, 123, 62, 232, 24, 143, 62, 93, 202, 87, 62, 3, 7, 24, 62, 111, 140, 152, 190, 70, 100, 77, 62, 85, 233, 9, 61, 175, 228, 21, 61, 63, 57, 102, 189, 164, 203, 39, 190, 203, 207, 83, 189, 194, 185, 106, 190, 253, 216, 222, 61, 58, 190, 165, 62, 104, 222, 227, 189, 100, 82, 63, 190, 11, 229, 213, 62, 83, 116, 98, 189, 123, 206, 29, 191, 2, 60, 114, 190, 163, 42, 33, 188, 122, 20, 9, 191, 181, 43, 21, 191, 106, 97, 40, 191, 205, 131, 130, 60, 87, 115, 147, 62, 26, 241, 193, 61, 12, 210, 234, 62, 193, 239, 63, 190, 12, 144, 190, 188, 228, 139, 60, 61, 67, 115, 111, 190, 226, 24, 140, 61, 168, 150, 223, 188, 60, 224, 242, 187, 230, 48, 193, 189, 209, 125, 27, 190, 129, 38, 140, 60, 50, 130, 59, 189, 167, 117, 18, 62, 0, 128, 55, 190, 189, 244, 166, 189, 169, 184, 158, 189, 81, 140, 211, 189, 79, 223, 20, 190, 125, 122, 22, 62, 95, 154, 102, 190, 166, 98, 34, 60, 167, 23, 65, 62, 149, 32, 27, 190, 187, 112, 243, 61, 178, 166, 67, 190, 238, 81, 109, 190, 233, 202, 101, 190, 177, 15, 131, 190, 199, 8, 3, 190, 106, 78, 62, 62, 187, 222, 237, 188, 73, 234, 177, 190, 212, 43, 55, 62, 229, 220, 16, 62, 184, 29, 224, 61, 186, 117, 98, 62, 144, 9, 5, 61, 22, 8, 254, 189, 245, 88, 181, 61, 200, 122, 79, 61, 80, 14, 133, 62, 60, 30, 19, 62, 63, 35, 217, 60, 47, 136, 103, 62, 44, 58, 165, 62, 170, 210, 31, 190, 253, 92, 158, 61, 225, 87, 164, 60, 228, 235, 82, 189, 43, 173, 82, 62, 184, 225, 222, 61, 211, 249, 132, 190, 23, 132, 17, 62, 251, 7, 60, 190, 121, 3, 0, 190, 67, 248, 49, 191, 89, 240, 197, 61, 144, 244, 52, 190, 106, 113, 174, 191, 42, 53, 158, 191, 48, 4, 146, 190, 80, 225, 209, 188, 40, 33, 187, 61, 214, 95, 140, 62, 179, 9, 119, 62, 159, 217, 139, 61, 35, 198, 68, 61, 198, 173, 89, 62, 151, 248, 21, 62, 152, 138, 8, 62, 13, 147, 254, 61, 208, 163, 58, 59, 135, 218, 47, 61, 166, 34, 39, 62, 133, 89, 139, 188, 230, 195, 146, 61, 81, 8, 38, 62, 13, 181, 72, 62, 122, 153, 11, 62, 44, 106, 252, 190, 99, 76, 190, 189, 178, 61, 243, 189, 136, 231, 135, 62, 30, 227, 173, 190, 204, 110, 167, 61, 114, 147, 204, 61, 111, 87, 216, 61, 11, 88, 29, 191, 68, 28, 157, 187, 25, 84, 127, 62, 250, 39, 169, 191, 248, 50, 180, 191, 132, 191, 37, 191, 84, 25, 189, 188, 107, 74, 29, 61, 40, 211, 182, 189, 200, 11, 66, 62, 139, 227, 103, 62, 206, 116, 166, 189, 69, 196, 227, 62, 226, 215, 178, 60, 56, 241, 170, 189, 163, 44, 1, 62, 16, 135, 205, 190, 81, 255, 201, 189, 85, 94, 17, 191, 29, 100, 20, 62, 157, 253, 0, 61, 196, 138, 207, 61, 123, 2, 245, 61, 171, 33, 48, 190, 119, 131, 9, 190, 138, 99, 164, 61, 127, 141, 193, 190, 145, 228, 195, 60, 200, 140, 171, 189, 132, 144, 171, 61, 91, 89, 28, 190, 130, 198, 244, 60, 176, 100, 206, 62, 81, 25, 195, 190, 0, 105, 147, 189, 65, 146, 33, 62, 64, 165, 194, 62, 98, 60, 22, 62, 11, 139, 76, 190, 221, 66, 143, 62, 248, 46, 58, 190, 141, 130, 60, 190, 243, 111, 19, 191, 84, 119, 180, 61, 183, 236, 0, 61, 135, 142, 194, 61, 201, 111, 136, 189, 232, 219, 32, 190, 104, 115, 132, 189, 179, 21, 51, 189, 239, 88, 41, 61, 138, 190, 208, 189, 204, 97, 33, 62, 235, 45, 57, 189, 120, 140, 168, 189, 98, 58, 39, 61, 114, 144, 42, 190, 182, 115, 91, 189, 245, 125, 147, 60, 235, 193, 13, 61, 194, 113, 162, 61, 68, 146, 52, 190, 28, 24, 212, 61, 62, 166, 96, 189, 151, 132, 241, 189, 213, 78, 223, 61, 248, 84, 204, 61, 246, 205, 18, 190, 49, 116, 9, 189, 224, 172, 12, 62, 194, 235, 50, 190, 186, 226, 183, 188, 55, 109, 204, 188, 232, 205, 193, 189, 176, 255, 24, 62, 149, 37, 5, 62, 247, 13, 250, 190, 85, 226, 163, 61, 193, 128, 2, 192, 218, 48, 47, 189, 1, 165, 89, 62, 101, 76, 129, 61, 114, 8, 21, 63, 9, 48, 94, 191, 217, 206, 166, 190, 169, 30, 183, 189, 235, 168, 22, 62, 252, 2, 36, 190, 229, 21, 138, 62, 226, 211, 71, 62, 36, 214, 184, 62, 56, 223, 55, 191, 55, 49, 70, 190, 144, 220, 31, 189, 113, 195, 128, 191, 244, 124, 102, 62, 125, 187, 160, 62, 23, 52, 224, 189, 137, 120, 143, 62, 42, 147, 96, 190, 123, 219, 49, 189, 30, 20, 117, 61, 97, 93, 22, 190, 78, 7, 192, 190, 237, 113, 12, 62, 119, 16, 148, 190, 240, 60, 120, 63, 204, 206, 31, 62, 105, 120, 68, 191, 247, 138, 204, 62, 251, 33, 99, 60, 103, 27, 182, 61, 160, 153, 206, 60, 128, 87, 212, 182, 232, 186, 249, 61, 207, 246, 126, 62, 135, 52, 11, 61, 163, 245, 94, 61, 105, 117, 182, 62, 117, 131, 35, 62, 149, 115, 103, 191, 139, 28, 80, 62, 203, 239, 130, 190, 109, 58, 3, 62, 90, 255, 125, 190, 234, 241, 217, 59, 225, 240, 207, 189, 163, 42, 157, 60, 62, 176, 197, 190, 244, 215, 42, 189, 31, 149, 121, 62, 112, 217, 3, 190, 77, 75, 201, 190, 20, 135, 6, 191, 180, 218, 13, 62, 240, 225, 155, 190, 130, 218, 89, 62, 174, 237, 189, 61, 212, 30, 34, 189, 86, 54, 146, 188, 74, 198, 89, 61, 31, 3, 96, 188, 172, 14, 159, 187, 53, 16, 227, 189, 235, 146, 17, 61, 72, 163, 92, 189, 211, 216, 194, 61, 238, 166, 116, 189, 207, 40, 16, 190, 226, 106, 56, 190, 75, 183, 217, 61, 109, 127, 39, 61, 84, 220, 68, 189, 159, 103, 20, 62, 60, 146, 101, 61, 158, 96, 6, 190, 229, 77, 13, 188, 44, 46, 115, 189, 76, 116, 92, 190, 234, 94, 14, 190, 34, 222, 163, 189, 167, 123, 0, 190, 44, 87, 78, 190, 24, 241, 47, 190, 246, 36, 102, 190, 194, 39, 193, 61, 222, 192, 27, 190, 171, 96, 55, 62, 135, 117, 149, 189, 104, 190, 4, 190, 210, 241, 84, 60, 182, 170, 48, 190, 200, 112, 105, 62, 188, 153, 244, 189, 98, 86, 140, 62, 48, 206, 43, 61, 51, 88, 137, 62, 174, 204, 18, 190, 25, 243, 138, 190, 118, 77, 125, 61, 230, 164, 161, 60, 93, 155, 8, 190, 180, 60, 199, 61, 22, 167, 179, 188, 132, 171, 194, 61, 24, 223, 135, 61, 139, 183, 184, 57, 66, 207, 9, 60, 205, 6, 133, 190, 240, 143, 133, 189, 28, 184, 54, 62, 34, 65, 148, 188, 232, 249, 2, 191, 134, 89, 201, 189, 255, 105, 169, 189, 168, 118, 232, 62, 68, 93, 102, 61, 188, 224, 242, 190, 26, 129, 8, 61, 72, 57, 68, 62, 27, 68, 16, 61, 58, 19, 156, 186, 7, 158, 168, 190, 255, 110, 104, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 154, 104, 62, 215, 192, 153, 189, 32, 37, 91, 62, 223, 5, 92, 60, 233, 225, 123, 62, 22, 72, 111, 190, 193, 17, 35, 62, 60, 178, 155, 62, 255, 27, 95, 190, 2, 229, 21, 190, 170, 139, 209, 188, 67, 137, 134, 189, 8, 87, 168, 190, 17, 149, 23, 190, 47, 200, 186, 189, 121, 197, 170, 62, 49, 121, 35, 62, 141, 131, 133, 62, 11, 252, 237, 189, 115, 150, 226, 188, 115, 174, 127, 62, 247, 100, 81, 189, 52, 46, 223, 61, 68, 78, 121, 190, 239, 84, 115, 188, 42, 155, 198, 61, 25, 185, 7, 190, 166, 2, 82, 190, 174, 220, 200, 61, 107, 111, 151, 61, 89, 233, 7, 61, 145, 61, 89, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 221, 234, 190, 149, 12, 227, 62, 100, 134, 80, 189, 220, 30, 87, 63, 12, 128, 85, 61, 198, 234, 168, 62, 179, 158, 44, 63, 105, 22, 226, 189, 193, 134, 34, 62, 221, 119, 71, 188, 2, 38, 24, 191, 55, 207, 170, 61, 20, 3, 6, 63, 177, 162, 203, 189, 61, 120, 209, 190, 178, 251, 21, 191, 79, 4, 133, 63, 104, 165, 95, 191, 116, 68, 0, 59, 137, 0, 121, 62, 247, 158, 40, 62, 103, 116, 159, 190, 111, 107, 1, 63, 223, 147, 159, 189, 111, 1, 6, 63, 136, 46, 154, 62, 11, 30, 169, 62, 132, 226, 2, 62, 214, 163, 132, 191, 138, 218, 140, 189, 50, 134, 237, 61, 25, 35, 38, 62, 150, 33, 222, 188, 175, 165, 157, 189, 138, 73, 115, 190, 180, 144, 230, 62, 62, 244, 195, 190, 76, 5, 66, 61, 232, 44, 1, 62, 14, 242, 166, 190, 56, 139, 221, 189, 83, 204, 137, 188, 68, 123, 116, 62, 187, 107, 67, 190, 141, 219, 191, 189, 196, 149, 5, 62, 59, 4, 78, 61, 78, 230, 23, 190, 27, 234, 195, 62, 114, 244, 141, 189, 251, 92, 177, 189, 224, 98, 253, 190, 46, 117, 58, 190, 247, 93, 99, 188, 25, 181, 5, 190, 219, 56, 60, 60, 110, 165, 236, 61, 74, 10, 214, 190, 45, 170, 22, 190, 109, 52, 27, 61, 217, 100, 119, 62, 215, 38, 37, 191, 88, 37, 28, 60, 139, 222, 174, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 135, 29, 190, 209, 1, 252, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {231, 45, 241, 63, 232, 153, 175, 63, 16, 79, 220, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {39, 33, 160, 192, 214, 60, 40, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0054/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}