// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 89, 190, 62, 229, 35, 187, 58, 207, 233, 126, 190, 183, 208, 2, 191, 93, 6, 163, 62, 45, 133, 110, 190, 180, 254, 220, 190, 25, 143, 219, 62, 103, 141, 14, 63, 135, 18, 10, 63, 20, 20, 30, 63, 191, 74, 183, 190, 109, 135, 2, 62, 143, 108, 23, 191, 204, 43, 40, 63, 22, 220, 10, 63, 35, 105, 90, 191, 22, 82, 135, 190, 226, 52, 85, 62, 207, 171, 104, 191, 124, 110, 54, 63, 69, 77, 144, 61, 182, 191, 14, 63, 60, 174, 50, 63, 64, 192, 181, 62, 126, 163, 189, 190, 172, 2, 242, 190, 189, 82, 23, 63, 149, 133, 199, 190, 250, 191, 201, 190, 170, 52, 13, 191, 236, 64, 236, 62, 112, 153, 133, 188, 139, 178, 194, 62, 210, 3, 13, 63, 184, 71, 185, 62, 177, 49, 112, 191, 13, 101, 68, 191, 80, 74, 20, 190, 43, 96, 6, 191, 226, 12, 255, 61, 95, 186, 202, 190, 133, 45, 148, 190, 192, 233, 173, 191, 130, 17, 29, 190, 163, 60, 138, 62, 25, 221, 147, 62, 157, 40, 193, 62, 55, 202, 131, 61, 129, 88, 106, 63, 89, 226, 19, 63, 18, 120, 71, 190, 214, 9, 148, 191, 118, 219, 5, 191, 125, 107, 29, 191, 136, 207, 252, 189, 232, 188, 3, 63, 170, 126, 68, 62, 180, 85, 10, 63, 105, 238, 138, 190, 197, 180, 55, 63, 172, 68, 186, 63, 28, 112, 192, 62, 164, 117, 243, 61, 246, 74, 144, 62, 108, 186, 252, 62, 102, 115, 85, 63, 234, 221, 144, 63, 102, 231, 94, 62, 238, 149, 225, 190, 180, 30, 132, 63, 245, 145, 48, 62, 106, 85, 217, 190, 84, 215, 118, 63, 212, 104, 95, 62, 39, 177, 0, 63, 125, 136, 157, 63, 109, 158, 183, 62, 244, 26, 222, 190, 153, 204, 168, 190, 38, 28, 64, 63, 99, 231, 220, 62, 133, 123, 248, 190, 167, 211, 149, 190, 5, 62, 135, 63, 70, 249, 38, 190, 69, 66, 156, 189, 78, 146, 87, 63, 212, 112, 129, 191, 50, 170, 135, 190, 177, 20, 216, 190, 173, 227, 232, 190, 127, 141, 229, 62, 22, 132, 249, 190, 103, 53, 146, 190, 64, 255, 76, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 1, 136, 191, 6, 178, 101, 190, 179, 250, 24, 189, 129, 127, 140, 62, 120, 223, 92, 62, 218, 38, 200, 62, 212, 26, 205, 60, 195, 198, 159, 62, 148, 49, 129, 190, 180, 228, 143, 60, 115, 52, 177, 62, 58, 4, 136, 62, 238, 230, 83, 63, 111, 126, 26, 191, 180, 193, 148, 62, 55, 94, 221, 62, 65, 124, 252, 190, 242, 31, 130, 190, 33, 6, 212, 190, 147, 224, 133, 62, 0, 222, 152, 190, 12, 58, 83, 61, 36, 48, 59, 62, 182, 103, 19, 62, 88, 161, 173, 62, 183, 9, 173, 190, 145, 182, 53, 190, 202, 54, 40, 191, 154, 175, 238, 187, 87, 191, 247, 188, 103, 213, 40, 191, 6, 176, 9, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 209, 34, 191, 177, 126, 40, 62, 75, 200, 207, 190, 30, 25, 119, 189, 225, 209, 47, 189, 213, 177, 183, 188, 170, 208, 88, 62, 224, 161, 162, 189, 249, 6, 74, 190, 202, 236, 34, 190, 172, 117, 51, 60, 113, 100, 189, 62, 9, 9, 185, 190, 191, 120, 183, 61, 166, 135, 226, 190, 232, 110, 140, 190, 166, 0, 79, 190, 14, 13, 125, 61, 238, 230, 57, 191, 73, 56, 189, 62, 196, 83, 227, 62, 116, 186, 156, 62, 38, 185, 218, 62, 238, 24, 182, 189, 234, 85, 228, 60, 95, 34, 155, 62, 57, 81, 161, 189, 212, 254, 1, 190, 140, 146, 105, 62, 179, 82, 214, 190, 45, 249, 159, 190, 65, 80, 166, 188, 157, 177, 186, 62, 9, 14, 42, 190, 135, 157, 111, 62, 131, 236, 232, 61, 131, 224, 38, 62, 220, 155, 45, 62, 156, 134, 171, 190, 52, 64, 30, 62, 189, 67, 78, 61, 23, 159, 129, 62, 190, 1, 39, 190, 174, 27, 128, 61, 167, 86, 140, 62, 151, 117, 79, 190, 55, 14, 90, 62, 254, 97, 16, 62, 169, 20, 164, 190, 71, 215, 50, 190, 132, 179, 133, 62, 151, 81, 170, 188, 102, 146, 46, 191, 254, 240, 46, 190, 36, 138, 83, 188, 129, 117, 47, 191, 194, 217, 235, 190, 247, 74, 144, 190, 170, 55, 128, 62, 122, 88, 251, 61, 187, 143, 2, 62, 16, 149, 212, 62, 49, 196, 169, 190, 21, 39, 130, 62, 11, 140, 189, 190, 99, 160, 142, 189, 18, 45, 224, 61, 187, 30, 5, 190, 43, 104, 162, 188, 175, 72, 163, 62, 15, 125, 252, 61, 178, 59, 140, 188, 124, 71, 136, 185, 108, 182, 38, 62, 138, 201, 76, 62, 134, 253, 85, 62, 163, 62, 241, 189, 120, 10, 15, 61, 57, 77, 208, 61, 254, 244, 253, 61, 183, 120, 103, 189, 94, 50, 234, 189, 34, 140, 103, 190, 140, 59, 114, 62, 24, 22, 232, 188, 76, 123, 138, 189, 29, 90, 166, 62, 69, 234, 223, 59, 103, 24, 63, 190, 149, 29, 215, 61, 207, 222, 35, 62, 117, 18, 20, 190, 209, 105, 113, 61, 114, 223, 37, 189, 31, 214, 138, 62, 202, 60, 184, 61, 76, 75, 46, 63, 135, 54, 132, 189, 238, 224, 56, 62, 21, 253, 109, 62, 96, 86, 197, 62, 118, 221, 112, 188, 240, 193, 5, 190, 69, 183, 1, 62, 20, 99, 139, 62, 222, 135, 238, 61, 49, 14, 141, 60, 225, 15, 153, 190, 158, 247, 51, 190, 8, 22, 71, 190, 184, 29, 54, 190, 202, 176, 9, 62, 142, 218, 0, 191, 25, 237, 205, 189, 216, 167, 223, 62, 139, 77, 42, 190, 181, 132, 118, 191, 204, 132, 209, 188, 218, 244, 87, 190, 12, 135, 88, 191, 27, 233, 200, 190, 41, 50, 122, 191, 208, 131, 34, 62, 152, 184, 188, 62, 155, 99, 139, 62, 46, 43, 25, 62, 226, 115, 173, 190, 11, 243, 79, 190, 112, 25, 92, 62, 189, 29, 171, 189, 149, 12, 23, 62, 1, 212, 158, 188, 54, 228, 226, 61, 142, 175, 36, 62, 28, 13, 180, 189, 19, 219, 32, 61, 117, 183, 161, 61, 17, 187, 254, 61, 246, 81, 9, 189, 64, 37, 202, 189, 254, 115, 6, 62, 52, 97, 90, 190, 65, 112, 112, 60, 200, 201, 13, 62, 95, 65, 75, 190, 73, 237, 12, 190, 155, 141, 92, 62, 37, 194, 153, 61, 191, 210, 227, 190, 120, 181, 165, 189, 231, 94, 242, 189, 120, 180, 162, 190, 164, 209, 188, 190, 237, 255, 168, 190, 105, 75, 119, 62, 185, 82, 255, 189, 107, 251, 184, 189, 228, 133, 136, 62, 187, 236, 102, 189, 247, 103, 167, 61, 115, 101, 207, 62, 71, 97, 139, 189, 188, 187, 23, 61, 158, 23, 253, 61, 210, 186, 93, 61, 8, 142, 217, 61, 147, 133, 12, 61, 25, 123, 222, 60, 122, 37, 73, 62, 165, 200, 106, 62, 19, 171, 187, 190, 187, 253, 127, 62, 34, 70, 154, 61, 63, 139, 52, 187, 216, 144, 120, 60, 108, 111, 151, 62, 56, 34, 33, 62, 101, 107, 30, 62, 161, 146, 91, 62, 231, 30, 243, 189, 235, 193, 211, 190, 173, 115, 33, 62, 236, 211, 138, 61, 201, 171, 189, 190, 217, 124, 14, 191, 227, 73, 78, 190, 57, 221, 12, 62, 140, 149, 43, 62, 93, 105, 250, 59, 16, 146, 18, 62, 11, 172, 172, 61, 193, 88, 61, 190, 218, 219, 45, 191, 178, 241, 132, 189, 97, 63, 155, 62, 26, 25, 53, 189, 212, 149, 54, 62, 205, 38, 76, 189, 14, 148, 140, 190, 124, 154, 233, 60, 92, 150, 21, 190, 37, 27, 136, 190, 63, 25, 146, 61, 171, 120, 209, 190, 250, 189, 18, 63, 58, 176, 128, 189, 133, 130, 74, 62, 156, 166, 59, 61, 98, 167, 226, 190, 83, 190, 108, 60, 250, 9, 5, 63, 250, 20, 45, 190, 206, 109, 84, 191, 187, 4, 59, 190, 105, 3, 199, 190, 73, 114, 152, 62, 244, 189, 73, 62, 182, 90, 56, 191, 36, 155, 6, 62, 217, 94, 181, 190, 55, 240, 4, 191, 1, 84, 193, 189, 189, 73, 63, 190, 37, 166, 171, 62, 11, 139, 61, 190, 220, 201, 214, 61, 90, 152, 251, 189, 211, 207, 51, 190, 252, 1, 203, 58, 142, 137, 238, 61, 169, 42, 75, 62, 246, 63, 2, 61, 55, 172, 104, 189, 48, 13, 242, 189, 95, 32, 251, 61, 241, 27, 14, 189, 61, 24, 85, 62, 163, 163, 247, 190, 91, 15, 43, 61, 59, 44, 128, 62, 250, 179, 199, 189, 116, 232, 145, 190, 39, 121, 24, 190, 224, 255, 218, 189, 32, 250, 129, 190, 223, 61, 129, 188, 234, 97, 138, 61, 53, 40, 62, 190, 25, 154, 226, 189, 60, 212, 182, 190, 13, 237, 174, 61, 143, 125, 185, 189, 43, 39, 202, 62, 81, 82, 229, 61, 90, 102, 112, 189, 10, 89, 58, 190, 201, 94, 172, 189, 27, 74, 27, 190, 150, 21, 13, 188, 59, 132, 255, 60, 63, 24, 0, 62, 242, 237, 108, 189, 55, 96, 224, 61, 6, 31, 251, 189, 11, 122, 51, 189, 131, 212, 255, 189, 184, 178, 79, 190, 193, 55, 31, 61, 248, 88, 148, 189, 62, 254, 205, 61, 146, 188, 15, 189, 96, 25, 146, 61, 190, 141, 34, 190, 247, 61, 227, 188, 126, 78, 105, 61, 170, 174, 187, 60, 51, 147, 116, 61, 160, 56, 12, 190, 93, 234, 42, 190, 5, 1, 217, 61, 11, 212, 170, 61, 237, 26, 218, 61, 8, 223, 165, 189, 195, 154, 126, 61, 98, 217, 159, 189, 13, 134, 39, 190, 152, 168, 218, 60, 218, 75, 73, 188, 32, 69, 64, 61, 218, 22, 164, 61, 192, 188, 173, 189, 184, 22, 92, 61, 1, 217, 84, 188, 135, 57, 17, 190, 100, 92, 245, 189, 28, 145, 160, 189, 166, 58, 173, 61, 80, 233, 56, 190, 87, 105, 75, 190, 141, 202, 29, 61, 179, 5, 103, 61, 113, 36, 237, 61, 136, 218, 12, 61, 213, 183, 78, 61, 60, 1, 70, 189, 54, 149, 13, 189, 140, 158, 37, 62, 217, 229, 241, 60, 221, 76, 1, 60, 96, 251, 81, 189, 214, 219, 148, 189, 37, 55, 146, 61, 212, 90, 177, 189, 122, 168, 24, 62, 42, 243, 5, 189, 139, 206, 57, 189, 89, 19, 5, 61, 2, 237, 57, 190, 41, 240, 242, 60, 58, 237, 3, 190, 68, 130, 109, 189, 149, 234, 37, 190, 61, 192, 116, 189, 169, 5, 114, 62, 104, 172, 31, 62, 172, 29, 141, 190, 22, 132, 16, 62, 215, 135, 8, 61, 176, 106, 121, 188, 239, 178, 222, 190, 38, 255, 103, 191, 46, 253, 137, 188, 189, 104, 109, 191, 27, 56, 212, 189, 130, 221, 174, 190, 219, 18, 95, 62, 224, 142, 164, 61, 192, 36, 30, 190, 250, 37, 5, 62, 3, 141, 222, 62, 111, 120, 28, 63, 42, 21, 219, 61, 241, 37, 149, 62, 158, 110, 34, 191, 87, 213, 243, 190, 82, 153, 14, 62, 105, 94, 23, 187, 194, 116, 51, 190, 2, 61, 17, 60, 169, 153, 213, 190, 202, 40, 208, 189, 61, 55, 108, 190, 178, 223, 64, 62, 13, 56, 238, 61, 168, 52, 246, 61, 205, 39, 8, 62, 195, 164, 204, 61, 42, 211, 168, 190, 180, 249, 247, 60, 4, 65, 50, 62, 108, 90, 186, 62, 104, 47, 136, 62, 169, 85, 151, 60, 69, 207, 214, 61, 68, 149, 241, 188, 241, 105, 142, 191, 159, 178, 5, 188, 190, 237, 0, 62, 39, 182, 223, 60, 51, 48, 142, 191, 175, 148, 65, 62, 4, 254, 105, 190, 184, 54, 133, 190, 6, 34, 48, 190, 69, 151, 157, 189, 122, 184, 237, 62, 183, 20, 15, 62, 149, 183, 0, 190, 129, 89, 18, 189, 178, 82, 202, 61, 9, 217, 195, 62, 190, 239, 177, 62, 59, 49, 226, 189, 12, 164, 6, 61, 142, 217, 57, 63, 144, 135, 111, 62, 2, 41, 248, 189, 173, 63, 226, 61, 55, 125, 123, 61, 93, 111, 243, 190, 154, 98, 195, 188, 219, 90, 65, 61, 194, 227, 9, 62, 239, 5, 94, 190, 45, 74, 175, 189, 89, 151, 145, 62, 198, 81, 2, 190, 71, 228, 204, 62, 127, 154, 22, 191, 40, 146, 10, 189, 215, 169, 128, 62, 228, 160, 170, 61, 73, 176, 68, 190, 30, 167, 159, 61, 222, 91, 29, 63, 170, 227, 52, 189, 66, 0, 73, 62, 21, 227, 140, 62, 21, 78, 39, 62, 94, 98, 30, 62, 162, 169, 236, 188, 130, 207, 111, 62, 48, 93, 37, 191, 94, 247, 131, 190, 130, 214, 184, 189, 151, 35, 3, 62, 207, 118, 18, 191, 90, 97, 21, 62, 53, 163, 112, 190, 248, 162, 219, 189, 167, 240, 176, 61, 26, 227, 155, 62, 142, 213, 89, 62, 39, 210, 9, 61, 90, 47, 122, 190, 173, 159, 93, 190, 237, 179, 9, 62, 216, 38, 165, 61, 5, 222, 221, 188, 109, 55, 253, 61, 29, 127, 31, 62, 117, 116, 142, 190, 233, 29, 207, 60, 228, 117, 188, 61, 43, 246, 66, 190, 179, 76, 156, 62, 123, 253, 132, 62, 164, 255, 161, 189, 14, 126, 66, 62, 5, 0, 143, 190, 100, 2, 75, 190, 205, 31, 128, 62, 97, 228, 135, 61, 191, 84, 22, 190, 219, 176, 157, 189, 235, 78, 214, 190, 54, 133, 124, 61, 29, 250, 173, 60, 209, 56, 147, 62, 228, 198, 1, 191, 40, 192, 188, 61, 178, 79, 2, 190, 100, 215, 179, 62, 19, 220, 183, 62, 208, 82, 73, 61, 144, 42, 163, 60, 137, 138, 180, 62, 118, 107, 65, 61, 151, 67, 245, 190, 144, 83, 56, 190, 159, 248, 77, 188, 102, 187, 14, 62, 122, 209, 199, 62, 149, 61, 169, 61, 27, 253, 1, 190, 82, 158, 128, 61, 216, 25, 185, 62, 171, 206, 166, 190, 222, 210, 25, 62, 99, 87, 196, 189, 43, 243, 193, 190, 67, 91, 235, 190, 198, 157, 66, 190, 176, 107, 62, 190, 137, 67, 158, 62, 199, 20, 21, 63, 143, 212, 132, 189, 172, 159, 18, 62, 164, 254, 78, 62, 177, 7, 204, 189, 162, 7, 127, 190, 247, 207, 7, 62, 94, 207, 19, 192, 38, 63, 96, 189, 18, 247, 103, 61, 17, 94, 21, 62, 139, 190, 45, 63, 82, 89, 146, 191, 240, 146, 238, 61, 193, 175, 10, 61, 15, 247, 138, 189, 157, 227, 185, 190, 125, 254, 173, 62, 90, 6, 191, 61, 148, 33, 228, 62, 66, 4, 132, 191, 142, 130, 136, 61, 51, 201, 183, 188, 48, 237, 155, 191, 27, 105, 157, 188, 93, 8, 2, 61, 237, 133, 92, 190, 105, 189, 26, 61, 127, 52, 16, 190, 224, 44, 221, 189, 1, 241, 0, 190, 182, 250, 250, 190, 200, 31, 184, 185, 118, 184, 81, 62, 212, 150, 138, 62, 130, 136, 207, 62, 121, 69, 71, 189, 11, 134, 88, 60, 45, 27, 57, 62, 75, 44, 151, 61, 45, 21, 82, 62, 146, 200, 189, 61, 64, 245, 33, 190, 32, 110, 141, 190, 34, 6, 201, 61, 231, 248, 109, 60, 89, 235, 155, 62, 94, 16, 180, 61, 74, 234, 94, 190, 18, 66, 217, 58, 61, 168, 197, 190, 116, 234, 36, 190, 23, 134, 171, 62, 134, 80, 133, 190, 248, 143, 194, 191, 201, 89, 166, 62, 212, 117, 146, 190, 124, 121, 6, 191, 28, 172, 105, 190, 134, 125, 153, 190, 244, 200, 23, 63, 174, 145, 232, 62, 5, 219, 29, 191, 8, 15, 137, 62, 127, 208, 144, 61, 254, 200, 81, 63, 93, 236, 160, 62, 162, 54, 164, 190, 103, 27, 206, 189, 62, 38, 153, 190, 42, 179, 166, 62, 74, 234, 19, 192, 60, 55, 142, 189, 62, 254, 34, 191, 78, 24, 251, 61, 159, 96, 237, 190, 116, 79, 17, 191, 202, 37, 244, 189, 176, 21, 178, 188, 239, 210, 231, 61, 62, 183, 7, 62, 246, 22, 8, 62, 66, 75, 5, 188, 77, 143, 165, 62, 127, 227, 96, 191, 24, 211, 20, 191, 15, 228, 18, 62, 80, 249, 133, 191, 125, 146, 156, 62, 1, 179, 174, 62, 116, 116, 36, 61, 203, 219, 11, 62, 142, 111, 226, 61, 96, 19, 81, 188, 203, 162, 186, 62, 135, 255, 119, 191, 96, 43, 13, 190, 209, 170, 27, 63, 84, 245, 92, 59, 229, 19, 139, 62, 100, 113, 2, 62, 7, 170, 193, 61, 160, 202, 183, 61, 176, 239, 143, 189, 36, 194, 249, 188, 136, 57, 164, 61, 87, 28, 34, 189, 160, 24, 36, 190, 113, 97, 141, 189, 154, 240, 205, 189, 40, 124, 141, 189, 135, 238, 51, 189, 135, 193, 88, 61, 97, 95, 250, 189, 14, 145, 22, 61, 120, 139, 31, 62, 174, 161, 150, 61, 248, 81, 226, 61, 184, 112, 29, 190, 241, 178, 0, 61, 231, 145, 9, 188, 159, 192, 10, 190, 165, 230, 64, 190, 162, 217, 23, 61, 202, 110, 7, 62, 25, 27, 2, 189, 96, 126, 205, 61, 23, 144, 204, 61, 185, 66, 170, 189, 231, 66, 8, 188, 6, 188, 0, 190, 20, 178, 196, 189, 192, 236, 106, 189, 154, 15, 192, 62, 154, 215, 43, 62, 52, 186, 3, 62, 209, 218, 221, 61, 61, 240, 90, 190, 57, 240, 108, 62, 239, 55, 180, 188, 73, 208, 137, 190, 159, 255, 128, 189, 136, 153, 105, 62, 233, 215, 40, 61, 7, 254, 87, 62, 231, 161, 14, 190, 153, 114, 226, 188, 247, 116, 226, 190, 211, 106, 166, 61, 185, 195, 254, 186, 87, 86, 3, 190, 180, 219, 194, 188, 238, 6, 14, 62, 111, 124, 44, 190, 74, 94, 92, 190, 126, 40, 93, 61, 238, 170, 148, 191, 11, 28, 85, 191, 119, 163, 148, 190, 201, 200, 177, 190, 119, 100, 215, 189, 205, 87, 196, 189, 21, 37, 147, 62, 92, 29, 108, 61, 33, 251, 102, 189, 241, 241, 178, 62, 253, 244, 111, 62, 60, 136, 49, 62, 251, 26, 1, 62, 216, 211, 185, 61, 206, 255, 198, 60, 40, 96, 39, 190, 43, 37, 37, 61, 229, 240, 139, 189, 8, 108, 210, 187, 159, 242, 171, 62, 35, 106, 77, 190, 71, 107, 102, 62, 106, 165, 168, 189, 82, 149, 44, 189, 198, 33, 125, 62, 217, 254, 128, 190, 231, 99, 176, 189, 66, 11, 185, 62, 226, 70, 1, 62, 4, 105, 240, 190, 49, 181, 123, 190, 52, 235, 223, 61, 102, 144, 78, 61, 201, 128, 126, 61, 21, 140, 171, 190, 75, 184, 175, 61, 209, 21, 0, 62, 216, 43, 149, 189, 167, 205, 141, 61, 91, 163, 172, 190, 7, 134, 166, 60, 19, 163, 92, 190, 81, 215, 102, 62, 135, 183, 243, 189, 97, 235, 47, 62, 66, 167, 187, 189, 117, 154, 189, 61, 156, 148, 171, 62, 195, 182, 37, 61, 196, 38, 181, 187, 163, 178, 0, 61, 77, 161, 223, 188, 242, 39, 185, 61, 244, 178, 32, 190, 138, 244, 27, 62, 71, 27, 200, 61, 43, 10, 19, 189, 195, 27, 63, 188, 218, 106, 106, 62, 128, 141, 79, 190, 199, 45, 110, 61, 202, 236, 243, 62, 182, 130, 42, 61, 194, 180, 195, 62, 114, 8, 242, 190, 247, 117, 140, 190, 72, 21, 178, 62, 124, 192, 160, 188, 223, 133, 44, 187, 22, 189, 216, 62, 87, 163, 55, 62, 227, 137, 113, 61, 41, 85, 143, 61, 28, 25, 183, 62, 45, 167, 177, 189, 223, 93, 109, 62, 241, 43, 144, 62, 109, 138, 94, 62, 189, 30, 27, 62, 129, 226, 151, 190, 37, 12, 71, 62, 230, 135, 43, 61, 177, 128, 47, 61, 129, 161, 39, 189, 134, 101, 53, 190, 70, 215, 23, 189, 96, 47, 93, 190, 227, 13, 209, 61, 207, 180, 164, 62, 43, 16, 241, 189, 222, 170, 65, 190, 146, 98, 212, 62, 195, 154, 127, 189, 74, 239, 33, 191, 15, 182, 129, 190, 46, 95, 135, 188, 233, 204, 7, 191, 6, 254, 16, 191, 82, 155, 48, 191, 109, 131, 99, 59, 38, 126, 142, 62, 253, 17, 189, 61, 14, 78, 236, 62, 67, 31, 70, 190, 78, 220, 134, 188, 228, 139, 60, 61, 67, 115, 111, 190, 226, 24, 140, 61, 168, 150, 223, 188, 60, 224, 242, 187, 230, 48, 193, 189, 209, 125, 27, 190, 129, 38, 140, 60, 50, 130, 59, 189, 167, 117, 18, 62, 0, 128, 55, 190, 189, 244, 166, 189, 169, 184, 158, 189, 81, 140, 211, 189, 79, 223, 20, 190, 125, 122, 22, 62, 95, 154, 102, 190, 166, 98, 34, 60, 167, 23, 65, 62, 149, 32, 27, 190, 187, 112, 243, 61, 178, 166, 67, 190, 238, 81, 109, 190, 233, 202, 101, 190, 177, 15, 131, 190, 199, 8, 3, 190, 106, 78, 62, 62, 187, 222, 237, 188, 73, 234, 177, 190, 212, 43, 55, 62, 229, 220, 16, 62, 184, 29, 224, 61, 148, 132, 65, 62, 58, 86, 1, 61, 114, 210, 232, 189, 88, 115, 163, 61, 88, 229, 155, 61, 103, 12, 132, 62, 250, 220, 41, 62, 76, 15, 252, 60, 206, 52, 101, 62, 69, 145, 163, 62, 190, 225, 14, 190, 215, 153, 130, 61, 80, 9, 101, 61, 89, 164, 87, 189, 167, 212, 93, 62, 8, 152, 222, 61, 39, 172, 118, 190, 165, 25, 8, 62, 99, 58, 35, 190, 32, 86, 19, 190, 98, 22, 57, 191, 136, 241, 189, 61, 154, 150, 68, 190, 130, 52, 169, 191, 148, 230, 148, 191, 201, 154, 168, 190, 78, 148, 135, 188, 208, 40, 152, 61, 166, 162, 136, 62, 88, 10, 118, 62, 244, 214, 178, 61, 223, 188, 72, 61, 130, 58, 67, 62, 169, 102, 25, 62, 211, 178, 234, 61, 206, 158, 1, 62, 114, 206, 51, 59, 53, 184, 46, 61, 206, 84, 31, 62, 115, 215, 210, 188, 207, 11, 132, 61, 38, 23, 40, 62, 201, 174, 83, 62, 181, 182, 1, 62, 116, 14, 0, 191, 165, 127, 184, 189, 213, 155, 36, 190, 151, 11, 136, 62, 9, 212, 178, 190, 211, 185, 65, 61, 108, 60, 199, 61, 18, 188, 200, 61, 123, 178, 31, 191, 3, 213, 227, 188, 219, 77, 125, 62, 235, 45, 167, 191, 117, 114, 172, 191, 101, 207, 43, 191, 233, 160, 50, 189, 95, 191, 39, 188, 145, 151, 180, 189, 159, 244, 65, 62, 25, 179, 98, 62, 100, 22, 203, 189, 118, 12, 212, 62, 202, 117, 131, 60, 245, 140, 255, 189, 166, 58, 18, 62, 204, 116, 179, 190, 76, 10, 155, 189, 244, 47, 0, 191, 147, 145, 5, 62, 233, 163, 63, 61, 231, 88, 253, 61, 104, 90, 177, 61, 221, 233, 28, 190, 24, 207, 45, 190, 117, 74, 165, 61, 188, 239, 220, 190, 93, 34, 66, 61, 46, 64, 240, 189, 177, 192, 163, 61, 119, 78, 237, 189, 189, 53, 29, 61, 163, 181, 205, 62, 191, 212, 198, 190, 66, 3, 62, 189, 61, 46, 132, 61, 49, 188, 142, 62, 204, 166, 20, 62, 173, 87, 35, 190, 203, 218, 138, 62, 42, 241, 21, 190, 158, 66, 51, 190, 243, 111, 19, 191, 41, 11, 155, 61, 183, 236, 0, 61, 135, 142, 194, 61, 201, 111, 136, 189, 232, 219, 32, 190, 104, 115, 132, 189, 179, 21, 51, 189, 239, 88, 41, 61, 138, 190, 208, 189, 204, 97, 33, 62, 235, 45, 57, 189, 120, 140, 168, 189, 98, 58, 39, 61, 114, 144, 42, 190, 182, 115, 91, 189, 245, 125, 147, 60, 235, 193, 13, 61, 194, 113, 162, 61, 68, 146, 52, 190, 28, 24, 212, 61, 62, 166, 96, 189, 151, 132, 241, 189, 213, 78, 223, 61, 248, 84, 204, 61, 246, 205, 18, 190, 49, 116, 9, 189, 224, 172, 12, 62, 194, 235, 50, 190, 186, 226, 183, 188, 55, 109, 204, 188, 232, 205, 193, 189, 176, 255, 24, 62, 149, 37, 5, 62, 20, 237, 234, 190, 44, 79, 156, 61, 157, 0, 5, 192, 149, 185, 71, 189, 191, 95, 26, 62, 225, 110, 151, 61, 230, 128, 3, 63, 41, 42, 93, 191, 38, 147, 172, 190, 7, 92, 185, 189, 8, 210, 23, 62, 116, 178, 160, 189, 26, 196, 119, 62, 128, 123, 60, 62, 231, 33, 163, 62, 164, 217, 43, 191, 133, 174, 56, 190, 244, 108, 75, 189, 179, 130, 141, 191, 237, 37, 97, 62, 200, 0, 165, 62, 225, 3, 199, 189, 149, 22, 152, 62, 206, 183, 54, 190, 54, 255, 186, 60, 166, 110, 1, 61, 233, 217, 153, 190, 197, 2, 189, 190, 174, 52, 54, 62, 225, 11, 127, 190, 72, 9, 92, 63, 176, 243, 29, 62, 234, 219, 74, 191, 21, 133, 160, 62, 53, 100, 112, 188, 130, 19, 173, 61, 84, 20, 221, 188, 233, 106, 196, 59, 215, 64, 136, 61, 121, 198, 101, 62, 134, 229, 184, 188, 252, 213, 67, 61, 96, 120, 136, 62, 104, 69, 51, 62, 178, 74, 112, 191, 71, 206, 253, 61, 34, 93, 103, 190, 184, 234, 6, 62, 200, 120, 134, 190, 40, 223, 106, 189, 110, 119, 233, 189, 140, 213, 84, 60, 45, 141, 173, 190, 233, 241, 146, 189, 2, 76, 137, 62, 104, 82, 86, 190, 197, 134, 218, 190, 92, 70, 238, 190, 99, 181, 223, 61, 40, 98, 185, 190, 39, 153, 107, 62, 20, 183, 218, 61, 121, 197, 51, 189, 33, 72, 182, 189, 74, 198, 89, 61, 31, 3, 96, 188, 172, 14, 159, 187, 53, 16, 227, 189, 235, 146, 17, 61, 72, 163, 92, 189, 211, 216, 194, 61, 238, 166, 116, 189, 207, 40, 16, 190, 226, 106, 56, 190, 75, 183, 217, 61, 109, 127, 39, 61, 84, 220, 68, 189, 159, 103, 20, 62, 60, 146, 101, 61, 158, 96, 6, 190, 229, 77, 13, 188, 44, 46, 115, 189, 76, 116, 92, 190, 234, 94, 14, 190, 34, 222, 163, 189, 167, 123, 0, 190, 44, 87, 78, 190, 24, 241, 47, 190, 246, 36, 102, 190, 194, 39, 193, 61, 222, 192, 27, 190, 171, 96, 55, 62, 135, 117, 149, 189, 104, 190, 4, 190, 210, 241, 84, 60, 182, 170, 48, 190, 144, 33, 71, 62, 129, 253, 227, 189, 144, 193, 136, 62, 19, 211, 138, 61, 208, 241, 142, 62, 8, 179, 252, 189, 27, 174, 133, 190, 169, 173, 131, 61, 24, 114, 31, 61, 174, 25, 235, 189, 220, 92, 196, 61, 150, 241, 167, 188, 35, 7, 196, 61, 121, 188, 154, 61, 178, 8, 223, 59, 255, 192, 143, 60, 164, 85, 137, 190, 171, 171, 122, 189, 127, 181, 45, 62, 241, 96, 137, 59, 37, 154, 234, 190, 207, 221, 198, 189, 71, 28, 202, 188, 39, 180, 208, 62, 191, 108, 127, 60, 150, 36, 230, 190, 208, 150, 17, 61, 254, 21, 51, 62, 65, 0, 110, 61, 45, 120, 155, 187, 220, 108, 175, 190, 9, 201, 110, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 64, 96, 62, 166, 167, 153, 189, 75, 42, 83, 62, 95, 172, 149, 59, 68, 83, 122, 62, 205, 136, 108, 190, 141, 187, 49, 62, 117, 120, 162, 62, 255, 27, 95, 190, 2, 229, 21, 190, 89, 0, 0, 189, 7, 77, 124, 189, 127, 23, 170, 190, 148, 88, 13, 190, 30, 172, 164, 189, 120, 43, 176, 62, 232, 20, 35, 62, 35, 240, 140, 62, 11, 252, 237, 189, 171, 253, 183, 188, 238, 221, 131, 62, 80, 245, 96, 189, 255, 95, 222, 61, 68, 78, 121, 190, 166, 237, 145, 188, 86, 50, 199, 61, 12, 225, 254, 189, 166, 2, 82, 190, 197, 66, 216, 61, 105, 170, 165, 61, 89, 233, 7, 61, 161, 78, 118, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 76, 235, 190, 8, 75, 246, 62, 49, 225, 101, 189, 112, 214, 84, 63, 130, 90, 197, 61, 134, 61, 181, 62, 125, 112, 33, 63, 237, 19, 229, 189, 193, 134, 34, 62, 221, 119, 71, 188, 224, 138, 29, 191, 89, 54, 213, 61, 148, 46, 5, 63, 231, 161, 165, 189, 11, 85, 214, 190, 207, 212, 18, 191, 41, 225, 137, 63, 97, 112, 110, 191, 116, 68, 0, 59, 175, 225, 134, 62, 104, 80, 93, 62, 56, 4, 160, 190, 165, 83, 12, 63, 223, 147, 159, 189, 213, 180, 15, 63, 0, 211, 169, 62, 217, 20, 169, 62, 132, 226, 2, 62, 202, 194, 124, 191, 182, 52, 128, 189, 50, 134, 237, 61, 152, 52, 47, 62, 75, 49, 150, 60, 127, 78, 123, 189, 138, 116, 99, 190, 252, 229, 249, 62, 117, 107, 166, 190, 95, 20, 164, 61, 36, 158, 6, 62, 97, 26, 148, 190, 56, 139, 221, 189, 83, 204, 137, 188, 48, 135, 118, 62, 67, 82, 67, 190, 181, 151, 1, 189, 229, 205, 34, 62, 37, 16, 157, 61, 170, 94, 5, 190, 3, 92, 187, 62, 58, 6, 219, 189, 251, 92, 177, 189, 163, 83, 2, 191, 190, 48, 35, 190, 170, 229, 33, 188, 158, 243, 182, 189, 219, 56, 60, 60, 191, 116, 12, 62, 107, 198, 189, 190, 5, 248, 7, 189, 109, 52, 27, 61, 29, 12, 143, 62, 157, 150, 34, 191, 88, 37, 28, 60, 239, 149, 173, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 40, 23, 190, 2, 60, 233, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {226, 107, 99, 63, 202, 233, 8, 61, 129, 112, 14, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {196, 117, 157, 191, 162, 231, 152, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0054/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}