// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 235, 156, 190, 44, 218, 137, 61, 87, 34, 162, 190, 191, 41, 7, 191, 54, 208, 206, 61, 104, 18, 64, 190, 62, 78, 217, 189, 99, 217, 240, 190, 167, 146, 160, 61, 115, 89, 237, 62, 68, 46, 2, 63, 196, 171, 216, 190, 39, 37, 181, 189, 209, 168, 243, 190, 154, 124, 80, 62, 117, 26, 161, 62, 67, 88, 251, 189, 167, 186, 192, 190, 172, 53, 14, 63, 227, 162, 2, 191, 181, 157, 9, 63, 237, 218, 154, 61, 91, 156, 255, 190, 146, 213, 248, 62, 183, 182, 2, 62, 173, 149, 146, 188, 97, 43, 4, 191, 129, 147, 242, 61, 58, 126, 5, 60, 32, 64, 240, 190, 35, 230, 7, 191, 146, 160, 145, 62, 124, 186, 154, 189, 246, 32, 19, 63, 9, 214, 141, 62, 74, 224, 59, 62, 104, 6, 19, 191, 121, 168, 202, 190, 28, 224, 132, 190, 82, 187, 224, 190, 57, 118, 153, 62, 16, 65, 202, 190, 9, 107, 24, 190, 118, 229, 17, 191, 107, 200, 71, 190, 111, 17, 147, 62, 9, 206, 245, 189, 69, 103, 93, 61, 56, 219, 195, 190, 136, 28, 35, 62, 226, 239, 16, 63, 99, 48, 3, 191, 247, 239, 55, 61, 81, 9, 220, 190, 229, 233, 141, 190, 220, 34, 215, 190, 226, 144, 82, 61, 83, 136, 150, 62, 172, 153, 226, 62, 77, 15, 36, 190, 75, 149, 233, 62, 78, 91, 220, 62, 164, 208, 215, 62, 83, 171, 19, 62, 135, 194, 16, 188, 100, 25, 235, 62, 216, 157, 219, 62, 27, 145, 192, 62, 31, 144, 205, 62, 23, 152, 159, 190, 68, 199, 84, 60, 192, 23, 9, 61, 211, 61, 128, 190, 247, 184, 184, 62, 63, 249, 204, 62, 230, 51, 139, 62, 67, 102, 175, 62, 12, 27, 182, 62, 131, 125, 139, 189, 186, 96, 217, 190, 95, 250, 187, 62, 29, 175, 197, 189, 23, 22, 84, 61, 134, 81, 203, 190, 249, 2, 17, 63, 72, 154, 29, 190, 25, 21, 94, 190, 42, 15, 110, 62, 174, 200, 97, 190, 130, 7, 193, 190, 45, 24, 235, 190, 52, 17, 198, 190, 98, 41, 169, 62, 96, 244, 7, 191, 4, 122, 199, 61, 39, 67, 180, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 172, 19, 191, 56, 226, 105, 190, 124, 255, 35, 190, 28, 36, 112, 62, 207, 75, 244, 62, 15, 125, 8, 63, 141, 77, 57, 61, 60, 163, 224, 62, 99, 234, 153, 189, 71, 122, 174, 62, 101, 17, 206, 61, 33, 46, 197, 62, 51, 133, 19, 63, 182, 186, 249, 190, 10, 205, 152, 62, 56, 77, 151, 62, 37, 191, 138, 190, 9, 128, 220, 190, 138, 2, 154, 190, 27, 27, 150, 62, 8, 169, 13, 61, 233, 236, 149, 62, 223, 252, 10, 63, 56, 148, 101, 190, 88, 112, 66, 62, 126, 156, 116, 61, 119, 187, 86, 189, 45, 235, 248, 189, 187, 204, 31, 59, 124, 205, 169, 62, 19, 123, 18, 191, 50, 64, 206, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 160, 76, 188, 123, 253, 205, 61, 163, 128, 3, 62, 4, 173, 167, 189, 190, 93, 22, 188, 83, 225, 202, 189, 204, 148, 125, 189, 211, 2, 165, 187, 0, 162, 11, 190, 151, 62, 148, 189, 107, 88, 26, 59, 66, 7, 127, 188, 89, 136, 137, 60, 241, 251, 254, 60, 202, 161, 254, 189, 100, 105, 23, 190, 27, 150, 206, 187, 89, 73, 217, 61, 72, 226, 27, 190, 215, 217, 4, 62, 195, 86, 5, 62, 86, 40, 251, 59, 15, 107, 2, 62, 64, 74, 28, 62, 69, 47, 48, 62, 55, 27, 170, 60, 59, 3, 31, 61, 115, 219, 41, 62, 219, 242, 230, 61, 156, 142, 224, 189, 174, 168, 239, 189, 79, 35, 62, 61, 241, 16, 254, 188, 181, 152, 232, 189, 29, 158, 175, 60, 173, 74, 5, 61, 180, 2, 119, 188, 50, 77, 225, 61, 160, 141, 12, 190, 88, 174, 194, 60, 62, 24, 206, 189, 208, 136, 152, 61, 245, 214, 27, 190, 179, 99, 24, 62, 49, 228, 19, 62, 155, 29, 19, 190, 103, 99, 23, 62, 25, 205, 199, 188, 217, 111, 26, 190, 133, 217, 37, 190, 76, 248, 199, 189, 153, 79, 8, 62, 18, 120, 58, 187, 206, 190, 186, 189, 126, 146, 246, 61, 132, 55, 245, 61, 99, 72, 49, 189, 90, 167, 49, 62, 99, 5, 186, 61, 116, 37, 93, 189, 99, 217, 23, 62, 51, 48, 237, 61, 222, 45, 45, 190, 202, 170, 40, 62, 179, 164, 221, 188, 144, 31, 125, 189, 163, 173, 217, 61, 135, 228, 243, 189, 61, 31, 77, 189, 14, 160, 14, 62, 154, 193, 47, 61, 216, 225, 149, 189, 87, 95, 38, 187, 60, 149, 231, 61, 51, 77, 21, 62, 173, 48, 169, 60, 64, 58, 149, 189, 236, 192, 136, 61, 156, 162, 196, 61, 162, 223, 158, 61, 232, 44, 209, 189, 2, 175, 215, 189, 221, 188, 3, 190, 33, 27, 224, 61, 29, 68, 74, 189, 20, 173, 38, 190, 155, 34, 2, 62, 89, 38, 213, 61, 60, 227, 34, 190, 234, 198, 167, 61, 130, 131, 7, 62, 67, 215, 199, 187, 74, 27, 248, 60, 31, 139, 189, 189, 155, 223, 13, 62, 96, 255, 160, 61, 69, 39, 44, 62, 89, 148, 246, 188, 51, 234, 50, 61, 19, 74, 35, 62, 228, 6, 23, 62, 137, 131, 97, 61, 17, 219, 194, 61, 9, 94, 246, 188, 102, 65, 0, 62, 246, 61, 53, 60, 109, 23, 67, 189, 127, 70, 140, 189, 249, 29, 200, 187, 8, 39, 228, 189, 211, 33, 155, 61, 221, 107, 66, 189, 24, 184, 22, 190, 243, 99, 65, 61, 22, 110, 35, 62, 252, 228, 149, 188, 124, 14, 128, 61, 29, 141, 16, 62, 184, 43, 41, 190, 62, 132, 35, 190, 29, 10, 71, 60, 145, 199, 51, 190, 141, 159, 158, 60, 198, 229, 43, 62, 175, 98, 87, 60, 207, 27, 200, 188, 252, 124, 152, 189, 63, 230, 51, 190, 130, 160, 228, 60, 0, 23, 217, 189, 249, 91, 205, 186, 146, 174, 45, 190, 225, 30, 55, 61, 46, 157, 189, 61, 216, 115, 177, 61, 81, 76, 113, 188, 149, 34, 38, 189, 58, 6, 62, 189, 137, 100, 11, 190, 137, 35, 168, 188, 157, 39, 222, 61, 170, 238, 27, 190, 182, 145, 48, 61, 139, 208, 164, 61, 65, 66, 12, 190, 168, 171, 191, 189, 69, 46, 215, 59, 116, 152, 115, 61, 69, 62, 49, 61, 96, 183, 145, 60, 165, 202, 24, 190, 56, 16, 223, 188, 0, 69, 22, 190, 85, 180, 232, 58, 103, 14, 16, 62, 236, 231, 32, 190, 217, 100, 165, 61, 152, 91, 172, 60, 254, 188, 125, 61, 249, 184, 108, 189, 97, 242, 251, 61, 40, 106, 2, 61, 255, 140, 28, 190, 116, 61, 20, 62, 144, 1, 159, 189, 24, 192, 153, 61, 145, 160, 149, 189, 166, 173, 255, 188, 68, 86, 234, 61, 127, 52, 245, 61, 30, 72, 15, 190, 63, 130, 17, 62, 188, 219, 168, 187, 212, 230, 61, 60, 90, 252, 82, 187, 183, 80, 109, 188, 213, 204, 31, 62, 159, 33, 30, 62, 247, 5, 74, 188, 122, 150, 104, 189, 64, 91, 5, 190, 38, 26, 110, 61, 156, 11, 5, 62, 172, 55, 14, 62, 214, 169, 139, 61, 203, 211, 135, 189, 41, 66, 166, 61, 212, 107, 54, 61, 90, 182, 81, 61, 175, 49, 45, 189, 98, 77, 164, 188, 224, 158, 27, 190, 131, 55, 94, 189, 237, 93, 250, 186, 210, 95, 142, 61, 219, 230, 190, 189, 94, 51, 71, 189, 159, 240, 39, 61, 208, 212, 224, 60, 107, 214, 235, 189, 223, 37, 117, 189, 132, 31, 73, 189, 252, 146, 141, 189, 155, 197, 109, 189, 82, 156, 40, 62, 99, 61, 34, 62, 0, 69, 222, 189, 92, 18, 169, 189, 138, 108, 26, 190, 159, 248, 77, 61, 235, 11, 39, 62, 200, 22, 106, 189, 198, 79, 151, 61, 131, 137, 134, 61, 186, 12, 127, 189, 134, 28, 165, 188, 236, 170, 53, 189, 181, 133, 16, 190, 18, 113, 137, 189, 125, 123, 175, 189, 63, 85, 165, 189, 66, 172, 0, 62, 104, 108, 20, 62, 242, 235, 212, 61, 94, 150, 28, 61, 73, 91, 233, 61, 26, 128, 23, 190, 189, 46, 69, 189, 43, 112, 39, 190, 79, 226, 212, 187, 54, 28, 109, 61, 217, 81, 82, 189, 89, 173, 203, 60, 223, 160, 235, 188, 200, 0, 238, 189, 161, 0, 29, 190, 43, 129, 31, 62, 45, 166, 206, 189, 75, 12, 247, 61, 104, 99, 10, 62, 155, 214, 27, 62, 23, 140, 47, 190, 124, 3, 41, 190, 18, 213, 97, 189, 181, 200, 70, 60, 21, 19, 172, 189, 86, 180, 55, 189, 190, 129, 89, 188, 133, 165, 246, 188, 29, 161, 192, 189, 132, 153, 171, 189, 123, 111, 23, 189, 67, 246, 41, 62, 153, 119, 131, 61, 93, 165, 29, 190, 137, 162, 28, 190, 158, 248, 90, 189, 186, 204, 243, 189, 49, 254, 188, 59, 85, 241, 127, 61, 45, 130, 24, 62, 212, 153, 187, 188, 156, 27, 6, 62, 219, 174, 204, 189, 70, 14, 3, 188, 17, 132, 182, 189, 240, 117, 48, 190, 47, 1, 55, 61, 55, 155, 243, 188, 86, 57, 8, 62, 48, 61, 130, 188, 213, 149, 170, 61, 177, 141, 31, 190, 153, 130, 163, 59, 88, 57, 151, 61, 148, 72, 93, 61, 224, 34, 123, 61, 55, 44, 3, 190, 196, 106, 38, 190, 236, 90, 11, 62, 192, 33, 228, 61, 165, 75, 222, 61, 58, 47, 109, 189, 103, 4, 205, 61, 98, 217, 159, 189, 161, 235, 0, 190, 253, 229, 15, 61, 158, 224, 164, 60, 78, 62, 164, 61, 248, 63, 255, 61, 192, 188, 173, 189, 200, 15, 201, 61, 34, 69, 80, 188, 166, 162, 206, 189, 100, 92, 245, 189, 37, 86, 160, 189, 239, 30, 240, 61, 67, 4, 20, 190, 133, 56, 20, 190, 90, 227, 37, 61, 224, 19, 192, 61, 104, 251, 27, 62, 210, 56, 137, 61, 243, 177, 78, 61, 60, 1, 70, 189, 8, 228, 246, 186, 159, 145, 37, 62, 47, 62, 172, 61, 220, 49, 72, 60, 234, 188, 81, 189, 89, 128, 128, 189, 230, 127, 200, 61, 173, 171, 235, 188, 192, 86, 26, 62, 196, 18, 6, 189, 59, 179, 36, 188, 135, 134, 61, 61, 121, 105, 18, 190, 41, 240, 242, 60, 20, 19, 184, 189, 122, 234, 105, 189, 175, 150, 157, 61, 189, 32, 38, 189, 75, 82, 138, 188, 117, 206, 241, 61, 216, 214, 204, 189, 66, 190, 254, 61, 138, 77, 164, 185, 8, 182, 20, 61, 175, 75, 0, 189, 42, 47, 22, 60, 59, 116, 179, 189, 66, 191, 22, 190, 84, 221, 111, 189, 12, 79, 129, 61, 6, 67, 40, 62, 134, 155, 184, 61, 130, 78, 91, 60, 103, 222, 222, 61, 26, 183, 77, 61, 63, 228, 49, 62, 112, 67, 217, 61, 0, 48, 69, 60, 187, 44, 60, 61, 213, 98, 233, 188, 22, 52, 229, 189, 126, 4, 131, 189, 64, 213, 57, 189, 244, 51, 187, 61, 178, 152, 203, 61, 196, 228, 143, 189, 14, 179, 99, 186, 160, 157, 36, 62, 129, 55, 66, 187, 35, 50, 49, 61, 166, 240, 52, 190, 240, 98, 131, 61, 52, 59, 223, 189, 134, 108, 32, 62, 186, 183, 14, 62, 200, 186, 21, 62, 23, 245, 200, 188, 149, 218, 68, 189, 110, 159, 255, 61, 28, 122, 22, 62, 176, 101, 7, 190, 180, 33, 26, 62, 224, 146, 207, 61, 247, 244, 45, 61, 203, 217, 2, 189, 232, 170, 6, 62, 214, 149, 214, 189, 247, 38, 60, 61, 61, 253, 247, 189, 240, 138, 165, 189, 82, 75, 48, 62, 166, 255, 81, 61, 186, 241, 146, 61, 135, 30, 136, 189, 166, 18, 36, 62, 186, 52, 152, 189, 114, 48, 158, 60, 104, 127, 121, 188, 223, 252, 8, 61, 180, 85, 177, 61, 125, 122, 163, 61, 46, 130, 17, 190, 56, 111, 23, 60, 96, 153, 9, 62, 53, 83, 149, 189, 222, 184, 214, 188, 81, 56, 132, 187, 62, 225, 133, 61, 16, 212, 28, 190, 168, 208, 44, 190, 100, 99, 5, 62, 168, 174, 225, 61, 92, 103, 34, 62, 249, 136, 220, 61, 146, 52, 23, 188, 120, 123, 206, 61, 92, 117, 154, 189, 144, 223, 165, 189, 21, 178, 134, 189, 177, 30, 52, 62, 168, 152, 184, 189, 100, 59, 161, 61, 137, 59, 36, 62, 182, 92, 147, 61, 33, 91, 48, 190, 99, 27, 133, 187, 92, 66, 19, 189, 157, 188, 178, 188, 214, 235, 138, 189, 220, 25, 22, 62, 216, 45, 122, 61, 16, 83, 19, 190, 123, 174, 199, 189, 242, 233, 201, 60, 42, 195, 226, 189, 116, 26, 46, 62, 104, 68, 30, 62, 116, 228, 197, 61, 134, 67, 17, 62, 224, 210, 12, 190, 231, 180, 49, 190, 204, 114, 206, 61, 208, 72, 2, 57, 66, 189, 7, 189, 20, 196, 3, 190, 52, 105, 7, 58, 131, 10, 33, 190, 106, 116, 129, 188, 84, 67, 154, 189, 119, 201, 222, 61, 188, 245, 176, 61, 170, 96, 44, 190, 115, 116, 233, 189, 58, 192, 69, 61, 168, 167, 167, 60, 103, 204, 37, 189, 243, 167, 162, 189, 89, 209, 49, 62, 124, 36, 57, 189, 75, 254, 196, 61, 71, 69, 41, 190, 217, 107, 250, 188, 60, 21, 118, 189, 181, 116, 12, 190, 105, 250, 21, 190, 10, 185, 41, 190, 180, 200, 228, 188, 151, 177, 12, 62, 255, 127, 36, 62, 98, 250, 9, 190, 240, 131, 11, 190, 42, 213, 178, 61, 168, 15, 17, 187, 193, 167, 160, 189, 120, 253, 195, 188, 193, 126, 225, 189, 165, 186, 23, 189, 161, 162, 178, 60, 157, 164, 15, 190, 212, 140, 6, 190, 228, 82, 180, 189, 243, 219, 14, 62, 215, 229, 196, 187, 95, 168, 0, 62, 224, 209, 213, 189, 122, 249, 19, 189, 74, 161, 3, 190, 221, 144, 224, 61, 117, 47, 40, 190, 44, 117, 212, 61, 228, 177, 47, 62, 119, 116, 233, 61, 174, 13, 67, 189, 55, 166, 179, 61, 78, 255, 148, 188, 78, 157, 222, 61, 16, 224, 173, 61, 64, 129, 218, 188, 75, 92, 88, 60, 108, 127, 174, 189, 96, 25, 7, 190, 193, 94, 191, 61, 181, 205, 81, 59, 61, 61, 133, 61, 176, 108, 219, 189, 125, 190, 142, 189, 176, 174, 231, 189, 64, 38, 202, 61, 217, 110, 154, 61, 103, 244, 2, 190, 192, 30, 245, 189, 195, 51, 5, 62, 30, 53, 236, 189, 37, 193, 176, 61, 178, 44, 177, 189, 73, 77, 50, 62, 58, 134, 251, 61, 128, 238, 205, 61, 153, 252, 201, 58, 110, 1, 186, 61, 171, 243, 48, 62, 125, 132, 236, 189, 109, 86, 138, 60, 224, 107, 174, 189, 149, 91, 16, 62, 209, 135, 34, 190, 84, 220, 137, 189, 33, 218, 193, 189, 214, 39, 10, 62, 98, 156, 6, 190, 13, 230, 202, 188, 100, 58, 17, 190, 36, 59, 129, 60, 185, 67, 245, 188, 30, 36, 178, 189, 227, 48, 171, 60, 85, 114, 18, 62, 80, 182, 44, 190, 97, 97, 83, 61, 41, 28, 173, 61, 102, 210, 105, 61, 230, 169, 223, 189, 234, 24, 19, 62, 74, 223, 194, 189, 136, 160, 215, 189, 101, 161, 148, 188, 238, 176, 48, 190, 138, 72, 27, 62, 216, 171, 178, 189, 252, 246, 178, 189, 18, 48, 175, 188, 254, 199, 17, 62, 71, 187, 4, 190, 36, 191, 124, 61, 61, 188, 237, 61, 73, 161, 158, 61, 224, 242, 167, 60, 17, 105, 20, 190, 26, 49, 225, 61, 140, 47, 51, 62, 12, 224, 8, 62, 180, 239, 134, 61, 21, 17, 2, 61, 174, 150, 42, 190, 10, 150, 196, 189, 41, 174, 229, 188, 211, 234, 135, 61, 130, 126, 76, 189, 137, 88, 231, 189, 104, 41, 3, 61, 244, 102, 172, 61, 53, 33, 194, 189, 122, 87, 182, 188, 59, 249, 32, 189, 228, 236, 164, 189, 191, 142, 132, 189, 195, 45, 53, 61, 54, 29, 199, 189, 26, 149, 174, 61, 85, 103, 245, 61, 107, 149, 154, 61, 46, 249, 67, 61, 37, 13, 27, 62, 55, 240, 198, 187, 185, 250, 14, 62, 31, 29, 30, 190, 221, 83, 88, 189, 206, 70, 249, 61, 203, 220, 32, 61, 202, 40, 177, 188, 164, 13, 94, 188, 7, 170, 193, 61, 76, 27, 186, 61, 191, 72, 111, 189, 41, 106, 247, 188, 122, 94, 200, 61, 87, 28, 34, 189, 169, 244, 25, 190, 49, 112, 44, 189, 154, 240, 205, 189, 40, 124, 141, 189, 185, 141, 8, 189, 168, 47, 134, 61, 32, 238, 233, 189, 14, 145, 22, 61, 170, 226, 33, 62, 222, 91, 175, 61, 5, 196, 2, 62, 184, 112, 29, 190, 121, 234, 36, 61, 30, 103, 208, 187, 157, 190, 242, 189, 234, 57, 50, 190, 87, 181, 110, 61, 91, 196, 17, 62, 181, 145, 24, 188, 114, 167, 237, 61, 170, 85, 241, 61, 185, 66, 170, 189, 231, 66, 8, 188, 6, 188, 0, 190, 38, 246, 193, 189, 76, 39, 102, 189, 189, 204, 7, 62, 32, 225, 189, 61, 154, 10, 19, 62, 128, 215, 68, 61, 167, 122, 50, 190, 157, 24, 26, 62, 66, 121, 2, 190, 85, 68, 43, 187, 50, 214, 166, 189, 15, 137, 35, 62, 124, 213, 105, 189, 77, 249, 116, 61, 31, 236, 42, 61, 239, 57, 223, 189, 221, 229, 31, 190, 90, 42, 17, 60, 218, 26, 138, 61, 24, 153, 3, 190, 71, 163, 147, 189, 246, 19, 1, 61, 120, 4, 155, 60, 215, 119, 34, 190, 77, 92, 212, 189, 62, 104, 166, 189, 140, 126, 24, 62, 54, 125, 200, 61, 135, 127, 235, 189, 10, 213, 210, 189, 80, 209, 177, 61, 147, 237, 28, 62, 55, 65, 22, 61, 71, 8, 122, 189, 101, 147, 232, 61, 108, 209, 37, 62, 82, 36, 139, 189, 42, 22, 212, 61, 225, 159, 58, 189, 68, 179, 208, 60, 238, 3, 194, 60, 226, 133, 85, 189, 192, 205, 25, 189, 70, 210, 181, 187, 22, 132, 164, 61, 119, 230, 231, 189, 194, 154, 160, 61, 120, 117, 32, 189, 39, 253, 183, 189, 99, 71, 233, 61, 105, 44, 161, 189, 161, 93, 10, 189, 61, 95, 95, 61, 79, 28, 21, 62, 139, 178, 139, 61, 177, 14, 16, 190, 227, 19, 14, 62, 55, 17, 215, 189, 151, 186, 164, 188, 132, 20, 9, 61, 88, 185, 216, 188, 64, 167, 6, 62, 45, 1, 107, 60, 19, 147, 83, 189, 62, 50, 50, 190, 216, 167, 32, 190, 72, 130, 192, 61, 6, 254, 31, 62, 161, 26, 1, 62, 146, 110, 25, 62, 239, 58, 142, 189, 114, 225, 13, 190, 45, 157, 32, 62, 184, 138, 157, 61, 33, 107, 144, 189, 91, 24, 134, 189, 164, 244, 29, 62, 32, 110, 138, 189, 91, 156, 135, 189, 120, 72, 185, 61, 248, 140, 203, 189, 91, 116, 189, 61, 187, 15, 37, 190, 94, 96, 229, 61, 59, 175, 141, 61, 148, 250, 198, 189, 158, 40, 10, 62, 166, 92, 166, 189, 56, 1, 43, 62, 4, 13, 20, 190, 133, 156, 146, 58, 170, 44, 123, 61, 130, 250, 237, 60, 154, 82, 69, 188, 56, 12, 45, 62, 80, 103, 28, 62, 100, 39, 176, 189, 41, 41, 134, 61, 31, 106, 37, 190, 174, 37, 218, 188, 107, 166, 35, 61, 41, 72, 210, 61, 67, 88, 218, 187, 141, 8, 175, 61, 45, 48, 140, 189, 138, 38, 27, 59, 63, 67, 38, 190, 188, 140, 34, 190, 215, 84, 238, 188, 96, 244, 159, 187, 223, 130, 145, 188, 178, 67, 12, 190, 179, 137, 43, 62, 95, 246, 246, 61, 106, 201, 14, 62, 127, 9, 9, 190, 50, 252, 214, 61, 29, 121, 91, 61, 202, 29, 107, 61, 7, 140, 206, 189, 194, 117, 208, 189, 81, 50, 223, 61, 86, 48, 180, 189, 188, 22, 43, 190, 194, 96, 50, 190, 213, 58, 47, 61, 50, 79, 229, 189, 46, 161, 2, 62, 22, 223, 178, 61, 57, 1, 26, 189, 176, 70, 152, 61, 241, 58, 26, 190, 66, 250, 68, 61, 67, 120, 242, 60, 221, 180, 36, 60, 246, 114, 34, 189, 162, 189, 254, 189, 30, 198, 165, 60, 225, 87, 49, 188, 174, 204, 33, 62, 8, 168, 184, 61, 179, 1, 121, 61, 212, 99, 224, 188, 229, 211, 35, 189, 126, 83, 255, 189, 45, 237, 41, 62, 122, 191, 40, 190, 153, 59, 128, 61, 188, 109, 49, 62, 139, 180, 138, 189, 144, 228, 26, 62, 166, 58, 8, 190, 46, 126, 139, 189, 240, 226, 82, 61, 222, 75, 50, 190, 149, 114, 3, 189, 122, 32, 33, 62, 240, 94, 30, 60, 142, 54, 51, 190, 116, 229, 253, 61, 174, 67, 247, 61, 213, 73, 18, 62, 53, 163, 222, 189, 73, 218, 162, 61, 91, 117, 211, 60, 246, 181, 208, 60, 21, 32, 58, 61, 115, 81, 66, 61, 48, 43, 158, 61, 169, 163, 253, 61, 249, 31, 8, 62, 87, 209, 0, 62, 194, 129, 65, 61, 146, 7, 143, 189, 0, 16, 155, 60, 132, 211, 135, 189, 152, 23, 184, 61, 78, 88, 218, 60, 150, 93, 73, 60, 8, 188, 182, 61, 45, 168, 30, 190, 100, 63, 4, 190, 84, 81, 2, 190, 246, 76, 169, 61, 244, 250, 187, 189, 86, 51, 235, 189, 17, 133, 10, 190, 68, 160, 40, 62, 219, 94, 109, 61, 121, 124, 51, 189, 120, 84, 237, 188, 16, 211, 146, 189, 5, 9, 56, 188, 139, 166, 49, 60, 111, 154, 131, 189, 59, 51, 200, 61, 48, 145, 64, 188, 149, 215, 199, 61, 152, 71, 248, 189, 209, 128, 42, 60, 56, 175, 212, 189, 157, 94, 182, 61, 230, 38, 5, 61, 163, 33, 243, 61, 138, 103, 42, 62, 99, 211, 200, 189, 220, 192, 48, 190, 96, 102, 38, 190, 101, 16, 131, 61, 230, 32, 150, 61, 5, 73, 199, 189, 28, 196, 194, 61, 228, 187, 112, 189, 211, 119, 0, 61, 6, 137, 15, 188, 215, 183, 38, 190, 46, 185, 19, 62, 243, 74, 149, 189, 217, 147, 235, 189, 21, 96, 65, 189, 53, 198, 199, 189, 18, 242, 236, 188, 221, 198, 34, 60, 216, 245, 208, 61, 197, 22, 221, 61, 106, 167, 117, 189, 151, 30, 205, 189, 168, 100, 94, 189, 90, 96, 150, 188, 217, 184, 9, 62, 160, 200, 52, 190, 237, 24, 31, 62, 35, 207, 136, 189, 121, 75, 31, 62, 156, 195, 1, 188, 62, 137, 51, 62, 227, 230, 0, 190, 2, 210, 108, 188, 19, 77, 49, 189, 34, 185, 201, 61, 107, 138, 231, 61, 146, 88, 28, 62, 141, 254, 241, 60, 148, 110, 195, 61, 41, 212, 209, 61, 66, 131, 39, 62, 69, 184, 45, 62, 184, 32, 5, 190, 1, 127, 160, 189, 73, 236, 6, 190, 115, 136, 31, 62, 115, 231, 77, 60, 0, 71, 24, 62, 207, 206, 147, 61, 219, 28, 77, 189, 231, 55, 52, 190, 34, 27, 229, 189, 142, 212, 235, 60, 183, 236, 0, 61, 222, 252, 198, 61, 45, 31, 123, 189, 149, 83, 42, 190, 226, 137, 22, 189, 234, 25, 48, 189, 233, 117, 147, 61, 136, 106, 146, 189, 204, 97, 33, 62, 235, 45, 57, 189, 29, 121, 97, 189, 233, 15, 147, 61, 24, 67, 35, 190, 182, 115, 91, 189, 164, 153, 240, 60, 123, 110, 129, 61, 242, 57, 228, 61, 68, 146, 52, 190, 91, 204, 214, 61, 72, 230, 134, 189, 28, 73, 170, 189, 87, 247, 15, 62, 235, 236, 6, 62, 230, 66, 236, 189, 162, 146, 249, 186, 37, 91, 47, 62, 193, 219, 19, 190, 186, 226, 183, 188, 55, 109, 204, 188, 232, 205, 193, 189, 78, 85, 49, 62, 73, 53, 9, 62, 188, 165, 37, 62, 192, 231, 37, 189, 235, 242, 39, 190, 145, 174, 196, 61, 11, 104, 219, 61, 216, 128, 162, 189, 175, 99, 86, 60, 228, 128, 104, 60, 77, 197, 17, 190, 113, 191, 82, 189, 226, 165, 19, 61, 179, 74, 26, 190, 117, 120, 201, 61, 78, 185, 36, 62, 220, 73, 137, 59, 10, 112, 115, 61, 124, 204, 209, 61, 219, 139, 168, 189, 36, 84, 167, 189, 174, 47, 58, 60, 231, 73, 152, 61, 255, 100, 67, 189, 5, 147, 209, 61, 17, 111, 32, 190, 207, 188, 80, 61, 238, 202, 28, 190, 235, 15, 129, 61, 233, 210, 187, 189, 40, 133, 221, 61, 36, 99, 105, 189, 34, 192, 255, 61, 152, 3, 10, 62, 9, 66, 89, 61, 209, 29, 36, 62, 187, 82, 134, 189, 30, 202, 79, 61, 122, 125, 29, 190, 7, 19, 144, 189, 20, 105, 142, 189, 250, 159, 25, 62, 250, 69, 172, 189, 165, 220, 186, 61, 252, 29, 4, 62, 220, 103, 218, 61, 146, 143, 35, 190, 180, 246, 229, 187, 44, 150, 11, 62, 173, 251, 170, 60, 251, 228, 143, 61, 233, 197, 255, 59, 29, 87, 163, 60, 142, 85, 92, 189, 19, 136, 97, 189, 57, 238, 43, 190, 244, 215, 27, 62, 175, 54, 174, 189, 58, 217, 160, 61, 246, 214, 33, 190, 100, 127, 44, 189, 118, 99, 23, 60, 227, 73, 178, 61, 219, 134, 4, 62, 38, 41, 231, 61, 114, 57, 12, 190, 52, 26, 83, 61, 210, 228, 146, 59, 207, 8, 21, 61, 185, 102, 243, 189, 147, 37, 192, 61, 176, 232, 77, 60, 248, 79, 29, 62, 151, 34, 154, 188, 5, 8, 28, 190, 56, 131, 44, 190, 122, 201, 20, 62, 137, 239, 120, 61, 73, 119, 14, 61, 44, 68, 28, 62, 220, 54, 11, 62, 247, 73, 162, 189, 92, 113, 147, 59, 80, 89, 18, 189, 67, 163, 51, 190, 165, 243, 2, 190, 215, 116, 145, 189, 74, 145, 200, 189, 52, 92, 51, 190, 111, 86, 44, 190, 239, 44, 41, 190, 118, 72, 237, 61, 138, 253, 201, 189, 188, 30, 45, 62, 102, 224, 151, 189, 23, 156, 216, 189, 99, 116, 74, 61, 60, 22, 254, 189, 194, 38, 160, 189, 73, 126, 6, 190, 194, 154, 12, 62, 102, 59, 227, 61, 155, 63, 24, 62, 122, 236, 69, 189, 148, 66, 185, 188, 171, 44, 133, 188, 101, 0, 146, 61, 110, 158, 199, 188, 68, 128, 5, 190, 75, 203, 35, 62, 221, 169, 88, 189, 203, 86, 33, 62, 251, 177, 49, 189, 111, 151, 214, 189, 29, 92, 174, 187, 159, 57, 149, 60, 23, 116, 178, 188, 102, 155, 35, 62, 208, 132, 110, 61, 189, 247, 146, 61, 108, 113, 1, 62, 239, 77, 108, 61, 2, 223, 51, 190, 23, 88, 142, 189, 5, 245, 77, 188, 103, 32, 26, 62, 163, 220, 148, 60, 140, 138, 116, 189, 124, 69, 13, 189, 46, 75, 28, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 167, 34, 62, 46, 130, 214, 189, 166, 199, 206, 60, 149, 38, 147, 59, 219, 160, 49, 62, 43, 201, 0, 190, 123, 52, 20, 190, 10, 57, 184, 61, 179, 200, 51, 190, 221, 156, 168, 189, 210, 218, 241, 61, 188, 210, 210, 189, 71, 51, 84, 189, 226, 134, 42, 190, 185, 38, 85, 59, 128, 203, 10, 62, 23, 111, 60, 60, 114, 245, 183, 60, 209, 114, 200, 189, 249, 106, 40, 189, 33, 116, 123, 61, 217, 177, 91, 189, 77, 247, 254, 60, 186, 236, 252, 189, 113, 37, 129, 61, 199, 14, 33, 62, 196, 173, 136, 187, 48, 252, 52, 190, 189, 10, 1, 190, 25, 224, 162, 60, 101, 169, 240, 61, 28, 97, 170, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 30, 160, 189, 250, 161, 17, 62, 47, 19, 188, 189, 175, 50, 45, 62, 154, 105, 19, 62, 158, 152, 3, 62, 88, 123, 41, 61, 207, 166, 28, 188, 246, 221, 46, 62, 194, 237, 29, 189, 220, 226, 30, 61, 145, 207, 39, 58, 84, 228, 27, 62, 85, 174, 167, 58, 219, 93, 134, 189, 252, 24, 67, 61, 38, 200, 191, 61, 0, 196, 29, 190, 197, 124, 137, 59, 48, 97, 37, 62, 220, 248, 36, 62, 217, 219, 39, 190, 221, 183, 36, 62, 193, 5, 181, 189, 197, 1, 128, 61, 240, 193, 178, 61, 29, 211, 181, 61, 70, 68, 32, 62, 98, 145, 10, 61, 191, 178, 138, 61, 201, 53, 20, 62, 207, 76, 13, 62, 11, 4, 198, 188, 24, 84, 191, 188, 107, 123, 188, 189, 113, 252, 27, 60, 107, 175, 21, 190, 40, 237, 59, 61, 79, 0, 87, 60, 211, 188, 133, 189, 165, 152, 191, 189, 24, 126, 186, 189, 143, 77, 150, 61, 172, 78, 164, 189, 32, 1, 108, 61, 114, 101, 240, 59, 17, 153, 181, 189, 100, 33, 130, 189, 96, 161, 39, 62, 244, 156, 169, 188, 179, 222, 179, 189, 163, 177, 202, 188, 93, 5, 154, 189, 66, 183, 213, 188, 147, 62, 121, 189, 70, 39, 230, 61, 35, 130, 167, 61, 196, 212, 71, 61, 155, 114, 145, 61, 104, 92, 215, 60, 4, 118, 203, 189, 16, 95, 248, 61, 68, 5, 14, 61, 227, 107, 190, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 215, 249, 189, 67, 28, 16, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {210, 96, 137, 62, 49, 143, 29, 190, 201, 52, 213, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {152, 64, 39, 62, 126, 167, 7, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0054/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}