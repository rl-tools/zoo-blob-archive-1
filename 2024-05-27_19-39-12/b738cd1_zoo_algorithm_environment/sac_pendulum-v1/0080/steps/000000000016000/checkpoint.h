// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 154, 78, 63, 16, 163, 86, 191, 136, 253, 161, 190, 101, 158, 166, 62, 138, 18, 83, 63, 64, 202, 32, 63, 81, 168, 78, 63, 200, 192, 108, 191, 56, 123, 176, 190, 132, 99, 159, 62, 133, 185, 239, 60, 228, 233, 3, 63, 97, 64, 169, 62, 233, 227, 142, 191, 242, 103, 53, 190, 9, 118, 84, 62, 189, 68, 132, 189, 89, 115, 116, 190, 215, 12, 229, 189, 229, 234, 171, 63, 114, 161, 187, 62, 189, 31, 142, 188, 56, 251, 106, 63, 60, 217, 63, 62, 169, 6, 21, 63, 104, 180, 104, 63, 208, 181, 127, 62, 170, 193, 200, 190, 147, 222, 75, 191, 25, 108, 75, 62, 208, 85, 94, 61, 189, 150, 9, 191, 9, 0, 11, 191, 162, 175, 182, 62, 5, 75, 52, 191, 78, 49, 235, 62, 171, 113, 246, 190, 105, 46, 90, 62, 101, 65, 31, 63, 129, 240, 129, 190, 138, 167, 27, 191, 189, 188, 147, 62, 201, 115, 162, 61, 96, 16, 214, 63, 174, 74, 191, 62, 80, 16, 233, 62, 156, 236, 177, 63, 123, 110, 129, 62, 117, 201, 47, 191, 205, 19, 160, 191, 46, 69, 56, 190, 189, 213, 229, 62, 164, 152, 49, 191, 236, 20, 186, 190, 132, 215, 154, 190, 29, 5, 114, 63, 202, 201, 80, 189, 85, 164, 18, 191, 63, 40, 172, 191, 166, 79, 174, 190, 178, 106, 93, 191, 76, 21, 114, 63, 166, 62, 220, 62, 106, 14, 218, 62, 11, 165, 137, 63, 130, 143, 162, 62, 46, 125, 103, 62, 5, 50, 137, 63, 62, 170, 12, 189, 232, 116, 156, 190, 19, 37, 37, 63, 10, 203, 66, 190, 82, 228, 226, 190, 233, 36, 128, 63, 210, 144, 55, 188, 26, 178, 3, 63, 135, 86, 87, 191, 21, 234, 58, 190, 181, 150, 225, 190, 101, 161, 207, 62, 2, 233, 213, 190, 0, 217, 38, 190, 109, 174, 175, 63, 163, 252, 152, 62, 189, 60, 76, 62, 49, 241, 225, 191, 136, 60, 242, 190, 143, 124, 146, 190, 166, 218, 77, 63, 7, 244, 197, 189, 237, 20, 140, 190, 138, 158, 136, 63, 224, 153, 96, 62, 118, 149, 79, 191, 202, 171, 32, 63, 221, 131, 99, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 152, 20, 191, 122, 74, 207, 190, 240, 40, 25, 191, 35, 149, 16, 189, 223, 104, 21, 189, 206, 17, 116, 62, 190, 15, 36, 62, 193, 185, 200, 62, 171, 83, 10, 191, 172, 14, 132, 190, 247, 4, 55, 190, 248, 225, 20, 63, 16, 97, 22, 190, 234, 166, 229, 189, 183, 69, 27, 62, 174, 93, 135, 190, 8, 71, 168, 62, 143, 67, 135, 62, 121, 59, 6, 190, 222, 255, 127, 190, 3, 116, 130, 190, 154, 5, 1, 63, 58, 13, 11, 63, 6, 27, 208, 61, 154, 26, 31, 186, 29, 91, 95, 62, 54, 46, 65, 190, 56, 151, 219, 189, 101, 57, 92, 189, 187, 50, 4, 63, 17, 237, 164, 190, 135, 210, 121, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 191, 7, 189, 203, 233, 168, 190, 88, 174, 206, 61, 33, 102, 32, 62, 125, 31, 36, 190, 79, 43, 200, 60, 232, 129, 94, 191, 19, 228, 194, 189, 77, 33, 16, 191, 59, 249, 160, 190, 160, 192, 95, 189, 208, 32, 237, 62, 3, 141, 147, 190, 124, 198, 6, 191, 250, 78, 21, 191, 221, 212, 143, 190, 201, 244, 15, 191, 130, 239, 30, 61, 49, 158, 98, 62, 239, 102, 164, 190, 52, 255, 67, 190, 67, 118, 25, 62, 102, 92, 9, 62, 91, 223, 128, 61, 81, 249, 93, 189, 251, 1, 185, 62, 184, 195, 156, 62, 148, 239, 128, 191, 162, 85, 143, 61, 101, 167, 209, 189, 94, 9, 115, 191, 1, 90, 169, 61, 130, 238, 186, 190, 81, 67, 7, 191, 7, 82, 194, 190, 244, 179, 80, 191, 245, 18, 75, 189, 166, 158, 146, 190, 50, 145, 156, 62, 46, 0, 41, 61, 217, 102, 143, 190, 88, 162, 96, 62, 236, 12, 193, 190, 193, 206, 142, 191, 166, 218, 220, 188, 162, 195, 19, 60, 149, 129, 86, 191, 90, 71, 165, 190, 242, 99, 158, 61, 10, 254, 24, 190, 61, 100, 218, 61, 88, 149, 208, 189, 228, 217, 128, 62, 20, 246, 133, 191, 26, 14, 39, 62, 74, 144, 18, 62, 247, 146, 95, 61, 44, 171, 47, 190, 250, 96, 237, 190, 85, 202, 208, 62, 127, 168, 20, 191, 208, 61, 173, 62, 202, 241, 60, 62, 90, 31, 209, 61, 57, 235, 2, 191, 223, 29, 112, 190, 229, 110, 46, 191, 121, 167, 102, 188, 31, 33, 210, 190, 128, 132, 66, 62, 85, 206, 67, 62, 234, 112, 180, 62, 96, 75, 180, 190, 88, 130, 165, 62, 35, 157, 203, 189, 159, 237, 138, 61, 199, 16, 70, 62, 18, 27, 72, 62, 161, 61, 43, 61, 199, 242, 1, 188, 99, 114, 50, 191, 212, 41, 185, 61, 18, 201, 166, 189, 157, 90, 214, 188, 161, 61, 86, 62, 40, 209, 90, 62, 236, 176, 170, 61, 115, 2, 129, 62, 148, 36, 159, 61, 91, 151, 42, 188, 41, 108, 59, 189, 14, 178, 120, 189, 43, 65, 32, 191, 132, 191, 125, 62, 101, 48, 220, 60, 219, 120, 80, 62, 96, 86, 243, 189, 254, 240, 182, 189, 57, 154, 3, 190, 89, 227, 19, 190, 97, 93, 31, 190, 223, 16, 163, 189, 223, 57, 253, 187, 65, 237, 2, 190, 248, 195, 114, 188, 41, 183, 6, 190, 252, 68, 215, 60, 40, 180, 135, 61, 252, 40, 14, 189, 203, 140, 42, 61, 48, 251, 5, 62, 99, 171, 105, 189, 92, 87, 225, 60, 246, 218, 4, 190, 119, 29, 27, 62, 244, 23, 168, 188, 240, 214, 27, 190, 78, 164, 25, 62, 212, 145, 35, 190, 23, 62, 27, 190, 225, 238, 76, 61, 191, 238, 21, 62, 183, 224, 255, 61, 252, 3, 243, 61, 57, 211, 157, 189, 116, 147, 7, 190, 98, 198, 54, 61, 217, 6, 181, 61, 210, 163, 7, 190, 10, 43, 69, 60, 3, 220, 46, 61, 7, 118, 190, 61, 20, 83, 51, 62, 222, 221, 128, 189, 2, 233, 230, 189, 158, 58, 114, 188, 0, 39, 231, 187, 56, 188, 28, 190, 31, 218, 181, 61, 248, 118, 17, 188, 82, 179, 136, 61, 83, 241, 40, 190, 131, 62, 94, 190, 6, 148, 231, 61, 195, 181, 139, 188, 197, 73, 203, 189, 71, 194, 197, 61, 121, 11, 153, 61, 62, 82, 223, 61, 13, 113, 25, 188, 172, 65, 111, 60, 136, 86, 194, 61, 218, 92, 130, 189, 182, 226, 33, 190, 139, 41, 234, 189, 221, 73, 25, 61, 199, 108, 122, 189, 195, 54, 46, 190, 188, 191, 147, 61, 207, 186, 44, 190, 240, 48, 107, 61, 148, 200, 215, 190, 78, 72, 13, 62, 1, 66, 26, 189, 156, 163, 221, 60, 91, 208, 106, 61, 6, 246, 135, 190, 61, 122, 18, 190, 51, 154, 186, 191, 127, 231, 171, 62, 82, 233, 235, 61, 8, 240, 49, 62, 117, 255, 33, 62, 249, 13, 196, 62, 226, 198, 214, 190, 126, 248, 25, 191, 245, 168, 21, 62, 239, 182, 75, 62, 29, 196, 13, 190, 181, 25, 66, 190, 45, 23, 81, 62, 86, 19, 193, 61, 133, 10, 6, 190, 214, 112, 236, 61, 37, 104, 202, 190, 92, 196, 177, 62, 234, 87, 2, 187, 12, 160, 207, 190, 95, 227, 26, 62, 168, 19, 202, 60, 128, 59, 134, 62, 217, 121, 181, 62, 215, 129, 94, 62, 155, 101, 89, 61, 54, 46, 183, 61, 60, 200, 174, 61, 249, 255, 79, 62, 243, 248, 152, 62, 83, 159, 130, 189, 31, 159, 155, 61, 182, 139, 168, 190, 67, 179, 171, 62, 40, 30, 167, 190, 96, 55, 56, 62, 84, 16, 89, 62, 98, 243, 164, 62, 179, 53, 213, 61, 9, 217, 170, 189, 242, 116, 158, 190, 203, 8, 140, 190, 107, 208, 90, 62, 209, 98, 13, 62, 222, 220, 169, 188, 233, 17, 151, 190, 112, 4, 33, 189, 163, 225, 182, 62, 249, 187, 113, 62, 115, 178, 33, 62, 47, 146, 76, 190, 224, 193, 12, 62, 35, 108, 18, 191, 220, 190, 114, 61, 145, 232, 85, 62, 34, 249, 218, 62, 162, 38, 240, 189, 221, 66, 209, 189, 76, 68, 209, 189, 220, 150, 23, 190, 177, 98, 190, 189, 39, 128, 95, 189, 215, 142, 10, 61, 80, 19, 223, 60, 98, 186, 47, 62, 154, 214, 71, 189, 183, 178, 205, 189, 127, 144, 22, 62, 16, 239, 227, 189, 79, 25, 209, 61, 249, 137, 45, 190, 57, 165, 171, 189, 152, 126, 112, 189, 236, 145, 63, 189, 101, 133, 234, 189, 139, 168, 12, 62, 28, 141, 134, 189, 241, 52, 89, 189, 34, 101, 75, 61, 226, 64, 30, 190, 155, 82, 4, 62, 1, 23, 97, 189, 51, 184, 252, 189, 165, 217, 26, 188, 10, 76, 210, 189, 196, 212, 240, 189, 9, 228, 224, 188, 58, 254, 219, 187, 41, 18, 195, 188, 208, 127, 63, 189, 132, 229, 13, 62, 242, 172, 246, 188, 97, 120, 69, 190, 238, 211, 147, 188, 107, 15, 222, 187, 129, 154, 1, 190, 178, 139, 188, 61, 152, 248, 40, 189, 210, 22, 70, 189, 174, 110, 10, 60, 130, 71, 147, 61, 95, 79, 33, 190, 241, 224, 7, 190, 35, 132, 213, 60, 195, 87, 43, 190, 178, 4, 78, 61, 160, 214, 5, 189, 189, 206, 236, 189, 182, 192, 250, 61, 159, 212, 230, 61, 23, 92, 51, 189, 132, 153, 146, 61, 12, 146, 46, 62, 105, 41, 13, 59, 25, 188, 31, 190, 10, 63, 17, 190, 211, 243, 215, 60, 98, 89, 64, 190, 170, 123, 12, 190, 85, 23, 242, 189, 199, 182, 61, 61, 15, 190, 255, 61, 172, 207, 184, 60, 109, 23, 222, 61, 9, 160, 73, 190, 1, 183, 18, 62, 146, 101, 175, 188, 250, 25, 113, 62, 211, 137, 15, 62, 40, 17, 174, 190, 195, 26, 224, 189, 9, 42, 164, 189, 190, 31, 105, 190, 67, 190, 147, 189, 234, 90, 191, 62, 240, 196, 225, 62, 170, 53, 19, 62, 92, 87, 20, 190, 93, 225, 142, 61, 42, 101, 45, 63, 202, 31, 137, 191, 251, 249, 246, 61, 27, 63, 106, 61, 237, 168, 196, 190, 156, 120, 22, 190, 212, 38, 110, 190, 238, 15, 48, 62, 111, 17, 144, 191, 145, 151, 94, 62, 159, 225, 1, 62, 76, 154, 138, 191, 130, 29, 194, 190, 249, 231, 152, 189, 202, 139, 181, 60, 129, 10, 100, 61, 111, 142, 191, 189, 195, 131, 231, 189, 205, 76, 252, 190, 97, 8, 64, 62, 166, 34, 198, 61, 92, 58, 84, 190, 157, 30, 9, 190, 153, 63, 217, 190, 177, 143, 34, 191, 250, 79, 13, 61, 254, 236, 80, 190, 82, 171, 128, 190, 111, 253, 33, 59, 65, 97, 238, 62, 231, 241, 231, 190, 228, 234, 217, 62, 37, 221, 246, 189, 147, 255, 185, 62, 128, 158, 39, 191, 81, 231, 97, 62, 19, 18, 141, 61, 118, 105, 192, 62, 169, 182, 23, 191, 45, 138, 198, 190, 239, 79, 192, 62, 76, 190, 31, 191, 50, 62, 192, 61, 157, 39, 14, 62, 96, 92, 145, 62, 236, 111, 68, 62, 68, 208, 171, 189, 44, 2, 21, 60, 109, 48, 105, 62, 231, 246, 97, 62, 107, 31, 186, 61, 27, 13, 22, 62, 18, 49, 223, 61, 122, 71, 143, 189, 197, 163, 130, 61, 74, 230, 216, 190, 191, 63, 90, 62, 237, 111, 188, 62, 190, 13, 117, 62, 159, 193, 36, 189, 104, 246, 182, 60, 57, 41, 160, 190, 233, 30, 103, 190, 4, 49, 240, 61, 120, 187, 16, 190, 132, 108, 128, 61, 131, 236, 140, 190, 182, 25, 88, 190, 212, 153, 207, 62, 251, 227, 19, 61, 12, 74, 218, 60, 193, 8, 77, 191, 33, 210, 129, 188, 102, 70, 8, 62, 89, 72, 88, 190, 226, 247, 251, 61, 32, 156, 68, 190, 243, 255, 60, 191, 134, 223, 104, 62, 225, 54, 77, 190, 141, 249, 100, 189, 200, 166, 180, 190, 217, 109, 250, 61, 90, 57, 205, 59, 148, 251, 196, 189, 33, 168, 123, 190, 61, 191, 147, 61, 123, 248, 140, 190, 213, 41, 118, 62, 14, 11, 130, 190, 100, 158, 19, 62, 189, 110, 193, 62, 177, 220, 180, 62, 201, 92, 81, 190, 160, 9, 177, 190, 230, 8, 169, 62, 97, 122, 119, 62, 249, 179, 16, 191, 128, 60, 155, 62, 144, 20, 56, 62, 23, 145, 161, 189, 254, 115, 252, 61, 178, 132, 25, 61, 60, 144, 82, 62, 34, 89, 70, 191, 144, 125, 20, 190, 187, 39, 193, 189, 88, 9, 127, 191, 49, 253, 10, 190, 222, 100, 143, 62, 226, 51, 172, 189, 199, 233, 141, 62, 241, 65, 183, 189, 130, 214, 103, 62, 197, 27, 139, 189, 188, 185, 0, 62, 122, 76, 1, 62, 114, 35, 211, 61, 112, 156, 155, 62, 121, 158, 98, 190, 197, 15, 174, 62, 114, 100, 105, 62, 91, 90, 137, 62, 22, 169, 238, 189, 158, 148, 93, 190, 157, 179, 143, 62, 105, 149, 148, 61, 58, 86, 199, 189, 67, 32, 208, 190, 195, 95, 120, 62, 115, 212, 179, 188, 253, 246, 45, 62, 104, 12, 13, 63, 37, 233, 110, 190, 249, 43, 147, 62, 192, 124, 109, 191, 30, 144, 102, 62, 132, 120, 125, 190, 111, 243, 135, 61, 120, 99, 7, 63, 219, 243, 22, 61, 166, 90, 99, 190, 52, 199, 66, 190, 78, 162, 68, 190, 229, 196, 44, 190, 125, 107, 209, 189, 70, 173, 151, 190, 196, 30, 105, 62, 101, 85, 198, 61, 219, 57, 85, 191, 209, 228, 177, 62, 144, 236, 31, 191, 191, 139, 15, 191, 51, 181, 17, 62, 218, 111, 13, 61, 224, 212, 245, 190, 22, 89, 195, 190, 46, 212, 14, 63, 176, 232, 11, 191, 96, 229, 171, 60, 43, 220, 106, 62, 186, 95, 38, 62, 100, 231, 188, 190, 73, 131, 254, 189, 64, 97, 155, 62, 0, 197, 181, 61, 14, 216, 57, 190, 121, 196, 254, 190, 23, 32, 30, 62, 128, 174, 13, 191, 30, 99, 93, 62, 191, 113, 84, 61, 107, 194, 213, 61, 165, 143, 123, 190, 249, 133, 62, 61, 119, 48, 246, 190, 10, 47, 133, 62, 48, 160, 131, 189, 237, 126, 103, 188, 75, 221, 150, 61, 147, 5, 232, 61, 70, 89, 121, 61, 176, 223, 45, 190, 243, 73, 213, 60, 78, 107, 176, 61, 208, 212, 216, 188, 201, 244, 76, 190, 78, 115, 115, 59, 15, 82, 202, 189, 131, 163, 167, 61, 193, 246, 218, 189, 33, 11, 200, 62, 84, 228, 79, 62, 175, 250, 72, 189, 123, 163, 207, 188, 254, 142, 106, 62, 101, 200, 65, 190, 35, 232, 192, 62, 129, 46, 96, 190, 9, 163, 92, 62, 238, 58, 156, 189, 34, 218, 123, 190, 67, 27, 72, 62, 127, 68, 128, 189, 247, 145, 92, 189, 104, 89, 73, 191, 110, 182, 177, 61, 127, 252, 29, 191, 133, 111, 36, 62, 134, 67, 134, 191, 88, 76, 156, 62, 47, 249, 202, 188, 162, 153, 176, 62, 31, 246, 10, 61, 17, 29, 45, 189, 92, 65, 204, 190, 231, 100, 24, 189, 245, 212, 253, 189, 12, 133, 190, 187, 244, 93, 152, 62, 32, 253, 20, 62, 115, 255, 35, 190, 8, 122, 15, 190, 254, 93, 60, 190, 97, 196, 144, 62, 224, 92, 73, 189, 89, 151, 5, 63, 215, 28, 0, 62, 182, 249, 161, 61, 69, 38, 223, 61, 74, 21, 22, 191, 212, 122, 168, 62, 253, 63, 5, 189, 140, 173, 38, 190, 167, 63, 101, 62, 113, 180, 49, 190, 64, 189, 30, 190, 8, 126, 185, 61, 51, 92, 34, 190, 42, 91, 29, 190, 58, 248, 107, 59, 190, 190, 4, 190, 127, 121, 38, 190, 60, 97, 87, 59, 65, 112, 63, 190, 112, 212, 12, 62, 71, 167, 151, 188, 142, 56, 47, 188, 98, 222, 17, 190, 117, 22, 16, 190, 11, 32, 146, 189, 132, 3, 60, 61, 204, 116, 153, 61, 94, 14, 182, 189, 167, 6, 136, 61, 212, 87, 216, 189, 234, 226, 185, 60, 110, 68, 1, 190, 69, 28, 199, 189, 19, 157, 17, 62, 161, 75, 217, 61, 179, 170, 219, 61, 35, 130, 131, 61, 72, 95, 52, 190, 115, 180, 77, 61, 240, 81, 59, 189, 69, 229, 187, 188, 39, 186, 155, 61, 97, 187, 253, 184, 4, 63, 52, 59, 39, 246, 43, 61, 123, 180, 41, 60, 237, 132, 56, 190, 64, 107, 137, 189, 160, 62, 166, 61, 253, 167, 23, 188, 181, 7, 49, 190, 233, 55, 192, 188, 224, 54, 113, 190, 70, 25, 142, 61, 19, 5, 172, 61, 5, 115, 29, 62, 104, 124, 222, 61, 234, 122, 45, 190, 244, 19, 196, 186, 60, 138, 250, 189, 39, 224, 92, 189, 81, 222, 41, 189, 24, 78, 254, 189, 60, 88, 96, 188, 11, 15, 1, 61, 130, 161, 189, 188, 187, 11, 221, 60, 129, 189, 195, 61, 251, 67, 8, 190, 72, 64, 26, 188, 80, 78, 132, 189, 240, 39, 131, 61, 89, 246, 22, 190, 233, 201, 70, 189, 161, 186, 144, 60, 121, 159, 235, 189, 32, 199, 3, 190, 109, 144, 38, 62, 119, 25, 241, 188, 187, 4, 66, 61, 148, 157, 27, 62, 205, 101, 154, 190, 74, 104, 103, 188, 190, 45, 137, 189, 216, 125, 157, 190, 177, 130, 112, 190, 48, 69, 49, 61, 112, 33, 231, 190, 179, 111, 107, 190, 147, 56, 134, 187, 149, 145, 224, 187, 36, 220, 23, 61, 122, 231, 127, 188, 194, 28, 27, 189, 135, 139, 242, 62, 55, 109, 14, 191, 86, 216, 226, 62, 173, 28, 115, 62, 226, 43, 219, 190, 192, 232, 183, 189, 46, 249, 148, 62, 227, 184, 21, 188, 237, 228, 16, 191, 226, 151, 255, 61, 234, 6, 255, 61, 203, 155, 212, 189, 228, 140, 140, 190, 212, 174, 116, 62, 149, 245, 120, 190, 160, 134, 174, 61, 250, 35, 137, 190, 133, 225, 244, 61, 131, 82, 132, 189, 52, 142, 99, 188, 109, 88, 48, 62, 11, 112, 226, 190, 237, 173, 81, 190, 49, 151, 46, 60, 103, 162, 163, 191, 88, 70, 248, 190, 122, 1, 157, 189, 44, 134, 12, 189, 3, 141, 149, 190, 227, 181, 201, 189, 77, 14, 144, 60, 154, 104, 129, 62, 24, 68, 153, 61, 67, 9, 193, 190, 160, 107, 109, 62, 223, 144, 114, 62, 224, 137, 137, 62, 12, 50, 211, 61, 137, 20, 41, 190, 137, 170, 142, 61, 67, 252, 172, 190, 110, 89, 131, 190, 230, 75, 150, 189, 183, 233, 110, 61, 222, 252, 224, 61, 72, 124, 12, 191, 65, 214, 59, 190, 148, 102, 143, 190, 214, 57, 79, 190, 252, 77, 245, 189, 113, 197, 230, 61, 217, 50, 47, 191, 237, 144, 231, 62, 190, 111, 76, 189, 250, 239, 47, 191, 215, 41, 239, 189, 255, 74, 145, 190, 3, 62, 82, 191, 190, 200, 33, 191, 156, 122, 229, 60, 14, 22, 35, 60, 44, 207, 252, 62, 202, 73, 199, 189, 148, 175, 118, 62, 62, 148, 12, 63, 231, 166, 183, 191, 1, 88, 221, 62, 27, 72, 192, 61, 78, 94, 197, 190, 128, 117, 89, 62, 204, 44, 172, 190, 198, 131, 188, 62, 252, 120, 185, 191, 124, 209, 141, 62, 221, 118, 90, 61, 44, 32, 180, 191, 167, 193, 26, 191, 23, 118, 178, 190, 141, 244, 2, 191, 197, 14, 251, 190, 48, 240, 85, 190, 35, 122, 25, 191, 40, 199, 176, 60, 2, 61, 68, 190, 100, 95, 173, 61, 156, 254, 128, 189, 117, 143, 17, 191, 60, 98, 254, 189, 90, 97, 37, 61, 33, 229, 64, 191, 120, 249, 50, 191, 101, 167, 67, 189, 75, 125, 7, 62, 22, 215, 215, 61, 171, 116, 153, 189, 36, 45, 48, 62, 159, 248, 0, 63, 82, 226, 166, 191, 200, 212, 124, 62, 39, 82, 1, 62, 194, 3, 28, 190, 217, 114, 241, 61, 213, 199, 197, 188, 104, 175, 23, 62, 90, 194, 140, 191, 134, 97, 223, 189, 52, 116, 2, 62, 24, 78, 165, 191, 198, 111, 134, 189, 166, 140, 2, 62, 76, 63, 255, 190, 92, 254, 60, 186, 134, 232, 4, 190, 245, 217, 140, 62, 234, 25, 133, 62, 45, 201, 36, 190, 124, 210, 166, 190, 162, 235, 197, 191, 208, 2, 11, 63, 178, 249, 145, 61, 144, 44, 179, 62, 113, 72, 62, 62, 107, 14, 78, 62, 106, 121, 53, 191, 50, 104, 41, 191, 17, 18, 9, 62, 145, 235, 211, 60, 120, 160, 166, 190, 215, 119, 151, 190, 37, 45, 43, 62, 10, 136, 236, 188, 83, 32, 26, 190, 79, 133, 147, 62, 67, 45, 207, 189, 62, 25, 238, 62, 127, 126, 102, 189, 98, 23, 145, 190, 193, 151, 109, 61, 81, 161, 144, 61, 134, 226, 228, 188, 186, 132, 239, 61, 122, 91, 108, 190, 117, 207, 78, 189, 90, 66, 224, 189, 100, 221, 40, 190, 117, 133, 145, 62, 36, 208, 20, 62, 131, 187, 71, 190, 119, 124, 224, 190, 142, 143, 112, 190, 237, 248, 81, 62, 18, 182, 88, 188, 30, 83, 69, 62, 64, 48, 117, 189, 254, 193, 134, 188, 130, 92, 144, 189, 187, 176, 120, 189, 232, 12, 20, 190, 32, 117, 17, 190, 149, 169, 204, 60, 218, 114, 46, 190, 208, 173, 229, 61, 47, 45, 6, 62, 154, 106, 151, 190, 51, 125, 136, 189, 105, 198, 32, 190, 56, 109, 162, 62, 160, 215, 236, 189, 236, 89, 150, 189, 2, 202, 174, 61, 113, 40, 80, 189, 107, 198, 7, 62, 220, 24, 196, 62, 90, 230, 155, 61, 119, 65, 73, 190, 233, 134, 93, 190, 140, 244, 24, 190, 65, 117, 30, 189, 2, 78, 6, 62, 25, 90, 158, 188, 242, 64, 68, 189, 17, 98, 221, 61, 165, 115, 170, 188, 92, 141, 47, 190, 58, 115, 197, 189, 63, 7, 37, 189, 171, 145, 244, 188, 170, 10, 94, 188, 189, 79, 37, 61, 251, 0, 101, 189, 141, 241, 198, 189, 221, 27, 208, 59, 188, 200, 160, 189, 6, 117, 139, 61, 187, 144, 196, 61, 122, 70, 221, 60, 2, 209, 205, 188, 235, 35, 11, 190, 101, 210, 78, 190, 128, 64, 129, 189, 1, 211, 220, 189, 198, 206, 71, 61, 25, 32, 28, 190, 236, 52, 173, 189, 98, 33, 239, 61, 190, 208, 14, 60, 80, 124, 10, 190, 135, 101, 42, 62, 69, 106, 45, 62, 157, 164, 235, 61, 64, 105, 46, 62, 31, 227, 134, 62, 81, 175, 38, 62, 72, 158, 134, 61, 199, 92, 15, 190, 220, 217, 129, 61, 15, 33, 6, 62, 112, 53, 32, 62, 4, 129, 95, 190, 122, 72, 222, 189, 35, 75, 172, 189, 250, 123, 144, 189, 219, 26, 135, 62, 67, 131, 183, 62, 111, 206, 207, 190, 15, 25, 147, 62, 166, 190, 131, 61, 219, 98, 11, 62, 234, 216, 66, 62, 137, 167, 62, 62, 130, 80, 85, 62, 150, 87, 52, 62, 200, 44, 29, 62, 45, 46, 183, 188, 190, 197, 113, 189, 137, 253, 137, 62, 255, 54, 189, 62, 246, 199, 146, 190, 48, 108, 199, 60, 237, 117, 127, 190, 177, 24, 219, 60, 67, 59, 171, 190, 147, 65, 214, 57, 77, 113, 182, 61, 54, 241, 36, 62, 69, 66, 174, 189, 122, 134, 209, 61, 144, 112, 161, 60, 54, 181, 241, 61, 180, 82, 16, 61, 127, 129, 213, 61, 225, 225, 179, 189, 176, 1, 70, 189, 201, 177, 138, 61, 40, 62, 201, 61, 66, 16, 219, 61, 34, 234, 170, 190, 218, 158, 103, 61, 85, 90, 218, 187, 71, 24, 111, 62, 72, 142, 112, 61, 0, 219, 195, 189, 92, 75, 180, 189, 24, 155, 175, 188, 225, 44, 3, 62, 159, 197, 178, 190, 65, 198, 240, 61, 129, 60, 20, 61, 19, 162, 177, 62, 109, 145, 94, 60, 51, 43, 100, 190, 64, 130, 66, 61, 21, 196, 16, 190, 171, 131, 137, 62, 28, 91, 86, 62, 22, 57, 18, 61, 2, 95, 103, 190, 170, 136, 174, 189, 118, 52, 6, 63, 225, 114, 235, 61, 6, 116, 66, 187, 30, 106, 231, 62, 123, 22, 182, 62, 117, 140, 119, 190, 214, 177, 200, 190, 48, 217, 109, 61, 36, 181, 7, 62, 149, 215, 83, 190, 105, 63, 19, 190, 245, 222, 166, 62, 37, 14, 128, 60, 237, 121, 72, 62, 205, 109, 138, 62, 73, 75, 128, 190, 246, 145, 30, 62, 3, 240, 75, 190, 210, 133, 155, 62, 134, 239, 198, 61, 154, 5, 97, 60, 123, 251, 186, 62, 34, 217, 190, 188, 45, 10, 33, 63, 51, 209, 33, 190, 56, 30, 157, 62, 29, 30, 32, 62, 6, 154, 253, 62, 91, 83, 109, 61, 161, 47, 229, 188, 199, 91, 187, 190, 45, 131, 14, 190, 245, 182, 150, 62, 124, 88, 81, 62, 126, 73, 173, 61, 230, 114, 120, 62, 38, 141, 155, 62, 51, 29, 217, 60, 189, 215, 202, 190, 27, 188, 12, 189, 114, 108, 75, 62, 107, 101, 53, 188, 246, 140, 168, 189, 95, 143, 172, 61, 104, 42, 95, 190, 157, 116, 68, 190, 65, 168, 32, 190, 114, 212, 35, 62, 225, 176, 84, 62, 101, 159, 198, 190, 91, 34, 4, 62, 95, 234, 165, 60, 239, 73, 22, 191, 79, 142, 244, 61, 7, 245, 57, 191, 74, 249, 239, 190, 168, 188, 124, 189, 242, 173, 3, 191, 224, 54, 131, 61, 102, 26, 60, 191, 198, 215, 76, 62, 110, 179, 30, 62, 19, 223, 203, 62, 111, 65, 253, 60, 153, 252, 83, 190, 178, 213, 135, 189, 224, 236, 213, 61, 213, 247, 159, 189, 170, 160, 103, 190, 52, 79, 156, 62, 110, 63, 117, 62, 103, 189, 183, 61, 210, 100, 48, 190, 40, 160, 205, 61, 94, 63, 31, 63, 134, 81, 34, 191, 250, 52, 133, 62, 180, 149, 234, 60, 11, 195, 98, 190, 17, 140, 147, 62, 11, 222, 91, 190, 157, 20, 183, 62, 44, 209, 208, 190, 165, 127, 51, 190, 194, 37, 144, 62, 177, 232, 119, 190, 219, 228, 154, 190, 137, 81, 236, 190, 247, 229, 241, 189, 15, 67, 135, 190, 240, 203, 186, 190, 127, 165, 238, 190, 180, 228, 148, 61, 149, 202, 244, 61, 168, 189, 190, 61, 203, 5, 149, 62, 106, 79, 161, 189, 197, 164, 137, 61, 153, 138, 139, 190, 32, 30, 109, 190, 160, 106, 6, 189, 85, 35, 96, 62, 33, 148, 191, 61, 86, 128, 113, 62, 51, 115, 81, 57, 132, 4, 223, 188, 120, 47, 9, 61, 62, 245, 186, 189, 158, 172, 141, 62, 168, 81, 8, 62, 222, 172, 117, 61, 7, 73, 87, 190, 13, 130, 253, 188, 41, 185, 226, 189, 42, 216, 222, 190, 110, 143, 12, 191, 111, 117, 131, 62, 237, 37, 212, 190, 167, 194, 107, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 16, 241, 60, 1, 173, 172, 61, 233, 4, 22, 61, 90, 238, 183, 189, 66, 23, 109, 189, 16, 85, 76, 62, 54, 105, 159, 60, 217, 243, 92, 189, 138, 47, 188, 189, 39, 46, 119, 189, 177, 9, 133, 61, 77, 57, 225, 61, 110, 115, 100, 62, 253, 160, 154, 62, 89, 178, 50, 61, 113, 220, 17, 62, 32, 161, 238, 188, 183, 7, 46, 190, 40, 180, 144, 189, 49, 137, 172, 188, 135, 210, 73, 190, 134, 226, 141, 60, 117, 95, 143, 62, 189, 196, 86, 62, 82, 251, 246, 61, 37, 89, 254, 188, 10, 112, 167, 60, 56, 9, 89, 62, 203, 152, 64, 62, 131, 226, 140, 189, 37, 63, 62, 62, 253, 43, 79, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 50, 207, 62, 143, 169, 204, 63, 32, 111, 196, 190, 94, 202, 44, 190, 189, 254, 46, 190, 251, 16, 242, 62, 137, 85, 6, 190, 201, 68, 253, 60, 147, 119, 164, 189, 118, 43, 155, 190, 210, 19, 118, 63, 199, 32, 65, 190, 141, 153, 254, 190, 190, 84, 161, 62, 111, 233, 119, 63, 249, 216, 68, 58, 34, 85, 101, 190, 11, 237, 255, 61, 19, 135, 35, 189, 136, 2, 80, 190, 217, 195, 133, 190, 188, 86, 160, 191, 165, 184, 45, 191, 62, 250, 60, 63, 142, 93, 219, 60, 78, 213, 23, 59, 8, 180, 67, 62, 184, 108, 59, 61, 143, 224, 134, 62, 223, 229, 2, 191, 52, 41, 27, 191, 172, 74, 140, 190, 4, 47, 142, 190, 193, 210, 13, 61, 245, 112, 128, 190, 47, 112, 148, 188, 222, 121, 5, 190, 160, 140, 251, 189, 176, 36, 140, 189, 14, 181, 212, 60, 245, 8, 190, 61, 135, 213, 97, 190, 70, 71, 44, 62, 138, 223, 190, 61, 238, 172, 33, 190, 89, 120, 233, 189, 247, 162, 15, 62, 90, 210, 100, 190, 76, 243, 248, 62, 24, 33, 232, 189, 170, 38, 104, 61, 4, 44, 10, 191, 240, 179, 176, 62, 69, 87, 137, 62, 143, 60, 156, 190, 10, 176, 171, 61, 19, 197, 16, 62, 42, 51, 161, 61, 129, 22, 2, 190, 189, 75, 120, 190, 155, 21, 141, 61, 164, 101, 136, 62, 160, 34, 45, 190, 222, 53, 100, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 60, 12, 189, 69, 172, 199, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {124, 24, 197, 191, 233, 153, 133, 63, 30, 189, 142, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {1, 195, 89, 64, 233, 175, 150, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0080/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}