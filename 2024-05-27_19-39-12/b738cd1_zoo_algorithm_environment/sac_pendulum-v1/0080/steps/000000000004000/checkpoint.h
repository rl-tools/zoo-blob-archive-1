// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 250, 45, 63, 141, 189, 91, 191, 233, 240, 143, 190, 23, 181, 202, 61, 194, 75, 198, 62, 158, 10, 28, 63, 7, 203, 26, 63, 242, 218, 105, 191, 55, 231, 203, 190, 139, 245, 162, 62, 90, 165, 109, 190, 81, 74, 21, 63, 1, 77, 155, 62, 228, 24, 130, 191, 72, 122, 89, 189, 192, 225, 99, 62, 67, 183, 56, 190, 45, 240, 64, 190, 179, 251, 218, 187, 6, 166, 10, 63, 144, 91, 21, 63, 87, 240, 127, 61, 252, 69, 48, 63, 22, 251, 49, 186, 224, 45, 72, 62, 136, 44, 3, 63, 182, 234, 67, 62, 167, 124, 52, 190, 111, 172, 55, 191, 47, 130, 208, 62, 32, 172, 61, 189, 137, 165, 115, 190, 219, 151, 26, 191, 108, 27, 22, 63, 168, 176, 9, 191, 59, 134, 176, 62, 95, 180, 177, 190, 48, 92, 23, 191, 201, 155, 79, 63, 54, 74, 100, 190, 128, 48, 31, 191, 236, 192, 249, 62, 26, 217, 152, 62, 16, 240, 188, 62, 108, 6, 13, 63, 136, 92, 213, 62, 26, 196, 18, 63, 0, 116, 215, 62, 185, 71, 46, 191, 43, 215, 199, 190, 241, 193, 237, 189, 213, 28, 215, 62, 9, 8, 47, 190, 220, 245, 233, 190, 249, 91, 12, 191, 42, 112, 96, 63, 120, 186, 115, 189, 86, 241, 55, 191, 100, 181, 39, 191, 167, 48, 17, 190, 131, 179, 5, 191, 24, 254, 12, 190, 164, 193, 28, 63, 203, 109, 76, 63, 25, 41, 0, 62, 72, 62, 198, 62, 145, 153, 178, 62, 234, 197, 61, 63, 192, 48, 178, 59, 122, 205, 89, 190, 124, 135, 255, 62, 34, 188, 21, 190, 233, 164, 248, 190, 185, 0, 44, 63, 17, 171, 3, 189, 193, 101, 243, 62, 192, 230, 70, 191, 161, 34, 177, 189, 241, 206, 135, 190, 196, 202, 56, 63, 37, 139, 236, 190, 1, 162, 156, 190, 20, 225, 242, 62, 236, 146, 227, 62, 141, 243, 113, 190, 103, 99, 245, 190, 204, 161, 239, 190, 235, 196, 90, 190, 120, 69, 26, 63, 107, 123, 186, 189, 27, 69, 109, 190, 101, 193, 39, 190, 222, 11, 2, 63, 182, 38, 192, 190, 2, 92, 72, 63, 230, 65, 136, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 148, 1, 191, 24, 19, 7, 191, 118, 110, 0, 191, 36, 144, 104, 189, 157, 221, 183, 59, 196, 130, 2, 63, 30, 104, 45, 62, 121, 215, 6, 63, 111, 231, 239, 190, 54, 252, 109, 190, 15, 75, 174, 190, 19, 69, 237, 62, 33, 109, 160, 190, 222, 176, 124, 190, 73, 52, 55, 190, 113, 175, 156, 190, 177, 236, 211, 62, 78, 29, 171, 62, 127, 115, 143, 60, 5, 68, 107, 190, 145, 208, 244, 190, 116, 170, 80, 62, 181, 244, 86, 63, 63, 33, 60, 189, 150, 128, 191, 60, 208, 221, 145, 62, 171, 198, 2, 61, 56, 21, 75, 190, 103, 111, 206, 62, 18, 99, 29, 63, 166, 138, 82, 190, 49, 87, 84, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 161, 116, 60, 52, 137, 20, 62, 115, 242, 81, 61, 143, 40, 144, 189, 204, 220, 129, 189, 89, 130, 243, 188, 149, 60, 133, 190, 167, 15, 172, 189, 114, 96, 55, 62, 248, 96, 148, 189, 102, 140, 161, 189, 13, 73, 172, 62, 210, 247, 152, 189, 41, 108, 107, 190, 101, 158, 151, 190, 158, 244, 68, 189, 117, 93, 13, 190, 131, 24, 114, 60, 166, 144, 41, 62, 212, 1, 208, 188, 83, 200, 249, 189, 33, 12, 10, 62, 23, 45, 174, 61, 158, 99, 119, 61, 108, 72, 102, 189, 96, 114, 160, 62, 140, 10, 117, 62, 88, 169, 149, 190, 250, 11, 7, 62, 184, 203, 140, 189, 20, 145, 130, 190, 7, 240, 148, 61, 130, 238, 186, 190, 52, 105, 206, 190, 36, 133, 189, 190, 220, 63, 31, 191, 37, 236, 73, 189, 207, 230, 112, 190, 6, 204, 118, 62, 159, 166, 64, 189, 251, 118, 144, 190, 107, 153, 78, 62, 208, 0, 208, 61, 203, 177, 92, 191, 32, 181, 109, 62, 212, 240, 22, 62, 110, 47, 158, 190, 76, 82, 125, 190, 158, 40, 156, 61, 198, 17, 120, 62, 133, 165, 251, 188, 163, 181, 50, 59, 50, 66, 73, 62, 205, 227, 195, 190, 76, 103, 189, 61, 159, 102, 215, 188, 202, 219, 131, 189, 152, 240, 31, 190, 135, 93, 41, 191, 70, 145, 147, 62, 167, 162, 76, 190, 53, 160, 141, 62, 53, 201, 73, 62, 6, 91, 248, 189, 158, 57, 147, 190, 176, 80, 11, 190, 199, 173, 93, 190, 16, 12, 157, 61, 12, 9, 140, 190, 143, 93, 64, 62, 82, 95, 84, 62, 170, 204, 131, 62, 94, 37, 140, 189, 171, 253, 161, 62, 242, 166, 217, 61, 137, 190, 41, 61, 187, 244, 52, 62, 237, 60, 35, 62, 105, 76, 83, 61, 255, 141, 165, 61, 239, 207, 147, 190, 233, 225, 17, 62, 75, 137, 145, 190, 106, 204, 128, 188, 88, 67, 112, 62, 92, 147, 192, 61, 142, 165, 130, 60, 169, 30, 128, 62, 138, 232, 252, 189, 144, 141, 129, 61, 98, 133, 167, 59, 71, 222, 97, 60, 21, 216, 75, 190, 157, 22, 214, 61, 122, 162, 51, 62, 195, 2, 4, 62, 96, 86, 243, 189, 254, 240, 182, 189, 57, 154, 3, 190, 89, 227, 19, 190, 97, 93, 31, 190, 223, 16, 163, 189, 223, 57, 253, 187, 65, 237, 2, 190, 248, 195, 114, 188, 41, 183, 6, 190, 252, 68, 215, 60, 40, 180, 135, 61, 252, 40, 14, 189, 203, 140, 42, 61, 48, 251, 5, 62, 99, 171, 105, 189, 92, 87, 225, 60, 246, 218, 4, 190, 119, 29, 27, 62, 244, 23, 168, 188, 240, 214, 27, 190, 78, 164, 25, 62, 212, 145, 35, 190, 23, 62, 27, 190, 225, 238, 76, 61, 191, 238, 21, 62, 183, 224, 255, 61, 252, 3, 243, 61, 57, 211, 157, 189, 116, 147, 7, 190, 98, 198, 54, 61, 217, 6, 181, 61, 210, 163, 7, 190, 190, 146, 174, 60, 3, 220, 46, 61, 182, 191, 205, 61, 20, 83, 51, 62, 222, 221, 128, 189, 70, 101, 216, 189, 173, 106, 37, 188, 91, 183, 72, 187, 52, 243, 27, 190, 31, 218, 181, 61, 102, 133, 16, 187, 12, 18, 153, 61, 10, 229, 37, 190, 83, 35, 86, 190, 58, 37, 243, 61, 195, 181, 139, 188, 197, 73, 203, 189, 71, 194, 197, 61, 121, 11, 153, 61, 80, 79, 234, 61, 69, 77, 197, 186, 105, 157, 142, 60, 136, 86, 194, 61, 100, 150, 129, 189, 182, 226, 33, 190, 139, 41, 234, 189, 227, 165, 47, 61, 199, 108, 122, 189, 60, 92, 45, 190, 208, 199, 154, 61, 207, 186, 44, 190, 37, 254, 158, 61, 228, 158, 141, 190, 224, 199, 8, 61, 238, 71, 18, 190, 223, 154, 52, 61, 195, 64, 206, 188, 27, 236, 35, 189, 121, 254, 181, 189, 31, 145, 183, 190, 2, 205, 89, 62, 185, 126, 72, 60, 233, 36, 137, 61, 162, 217, 221, 61, 102, 166, 156, 62, 232, 219, 159, 189, 176, 95, 25, 190, 18, 188, 155, 61, 184, 180, 213, 61, 66, 43, 26, 190, 17, 216, 28, 61, 103, 204, 35, 62, 238, 118, 135, 62, 106, 60, 8, 190, 20, 127, 33, 189, 178, 24, 197, 190, 155, 32, 148, 62, 123, 161, 59, 190, 224, 52, 137, 190, 100, 109, 244, 61, 172, 79, 146, 189, 47, 197, 148, 62, 127, 121, 138, 62, 162, 133, 253, 61, 75, 217, 44, 62, 45, 226, 168, 61, 239, 124, 83, 62, 48, 144, 50, 62, 128, 53, 128, 189, 103, 224, 114, 189, 179, 32, 8, 189, 219, 155, 67, 189, 223, 201, 162, 62, 151, 152, 15, 190, 160, 139, 73, 62, 171, 211, 86, 62, 36, 249, 145, 62, 190, 156, 209, 61, 49, 103, 174, 59, 234, 37, 93, 60, 247, 138, 131, 190, 241, 66, 129, 189, 73, 153, 241, 187, 33, 111, 44, 60, 55, 201, 167, 190, 91, 153, 39, 190, 118, 87, 79, 62, 13, 105, 238, 188, 240, 161, 81, 188, 161, 64, 182, 190, 138, 41, 93, 62, 124, 170, 51, 190, 12, 204, 51, 190, 95, 237, 184, 62, 46, 123, 52, 62, 162, 38, 240, 189, 221, 66, 209, 189, 76, 68, 209, 189, 220, 150, 23, 190, 177, 98, 190, 189, 39, 128, 95, 189, 215, 142, 10, 61, 80, 19, 223, 60, 98, 186, 47, 62, 154, 214, 71, 189, 183, 178, 205, 189, 127, 144, 22, 62, 16, 239, 227, 189, 79, 25, 209, 61, 249, 137, 45, 190, 57, 165, 171, 189, 152, 126, 112, 189, 236, 145, 63, 189, 101, 133, 234, 189, 139, 168, 12, 62, 28, 141, 134, 189, 241, 52, 89, 189, 34, 101, 75, 61, 226, 64, 30, 190, 155, 82, 4, 62, 1, 23, 97, 189, 51, 184, 252, 189, 165, 217, 26, 188, 10, 76, 210, 189, 196, 212, 240, 189, 9, 228, 224, 188, 58, 254, 219, 187, 41, 18, 195, 188, 208, 127, 63, 189, 132, 229, 13, 62, 242, 172, 246, 188, 97, 120, 69, 190, 238, 211, 147, 188, 107, 15, 222, 187, 129, 154, 1, 190, 178, 139, 188, 61, 152, 248, 40, 189, 210, 22, 70, 189, 174, 110, 10, 60, 130, 71, 147, 61, 95, 79, 33, 190, 241, 224, 7, 190, 35, 132, 213, 60, 195, 87, 43, 190, 178, 4, 78, 61, 160, 214, 5, 189, 189, 206, 236, 189, 182, 192, 250, 61, 159, 212, 230, 61, 23, 92, 51, 189, 132, 153, 146, 61, 12, 146, 46, 62, 105, 41, 13, 59, 25, 188, 31, 190, 10, 63, 17, 190, 211, 243, 215, 60, 98, 89, 64, 190, 170, 123, 12, 190, 85, 23, 242, 189, 239, 75, 204, 60, 158, 143, 73, 61, 178, 219, 12, 62, 89, 32, 50, 62, 142, 178, 141, 190, 136, 191, 115, 62, 14, 90, 136, 189, 32, 132, 161, 62, 96, 219, 213, 61, 9, 23, 72, 191, 113, 78, 168, 188, 218, 251, 128, 189, 49, 48, 6, 191, 189, 79, 22, 191, 169, 208, 60, 62, 102, 147, 124, 62, 134, 192, 143, 189, 106, 185, 74, 189, 219, 101, 57, 62, 87, 189, 179, 62, 69, 138, 197, 190, 171, 128, 201, 60, 95, 144, 31, 62, 216, 151, 3, 190, 39, 109, 99, 189, 0, 160, 38, 190, 4, 62, 174, 62, 252, 233, 170, 190, 24, 118, 138, 62, 171, 254, 130, 62, 76, 97, 254, 190, 215, 101, 105, 190, 249, 231, 152, 189, 187, 252, 187, 188, 129, 10, 100, 61, 64, 8, 96, 189, 61, 96, 217, 189, 59, 108, 208, 190, 76, 63, 132, 61, 32, 45, 8, 189, 247, 200, 130, 189, 193, 134, 52, 61, 134, 54, 4, 62, 57, 95, 240, 190, 172, 209, 142, 61, 231, 213, 16, 189, 116, 186, 94, 190, 121, 198, 35, 190, 40, 6, 163, 62, 209, 101, 96, 61, 54, 87, 66, 62, 37, 51, 117, 190, 119, 97, 130, 62, 221, 24, 4, 191, 172, 251, 152, 61, 20, 93, 29, 190, 86, 169, 50, 62, 100, 56, 23, 191, 206, 6, 202, 190, 231, 72, 96, 62, 9, 180, 98, 190, 187, 121, 136, 189, 165, 127, 87, 60, 155, 103, 137, 61, 61, 247, 154, 61, 224, 39, 193, 188, 31, 80, 22, 189, 44, 218, 141, 62, 28, 246, 27, 62, 210, 254, 138, 189, 239, 91, 20, 62, 171, 93, 242, 61, 62, 25, 130, 62, 205, 64, 157, 61, 221, 120, 68, 190, 39, 136, 62, 62, 181, 104, 187, 62, 2, 102, 101, 62, 236, 239, 202, 186, 249, 158, 59, 62, 143, 34, 226, 61, 153, 201, 20, 190, 237, 221, 141, 190, 159, 35, 156, 60, 144, 177, 124, 61, 8, 46, 74, 190, 209, 217, 99, 190, 119, 7, 78, 61, 244, 219, 113, 190, 171, 183, 21, 190, 3, 208, 136, 190, 205, 187, 134, 60, 43, 68, 26, 189, 124, 110, 185, 190, 154, 9, 104, 62, 63, 145, 184, 189, 210, 86, 209, 190, 76, 227, 54, 62, 231, 44, 81, 189, 155, 138, 148, 189, 115, 142, 182, 190, 18, 2, 181, 61, 13, 63, 190, 61, 243, 114, 116, 189, 84, 19, 64, 190, 164, 154, 242, 190, 104, 139, 136, 189, 194, 218, 11, 62, 190, 4, 223, 190, 212, 226, 106, 190, 231, 150, 132, 62, 98, 3, 89, 62, 115, 238, 108, 61, 46, 189, 126, 190, 36, 157, 167, 61, 12, 131, 184, 61, 75, 201, 114, 190, 186, 73, 39, 62, 189, 99, 50, 62, 28, 192, 216, 189, 92, 58, 185, 189, 156, 247, 51, 60, 79, 69, 50, 62, 175, 184, 30, 190, 90, 223, 244, 61, 9, 251, 189, 189, 157, 186, 143, 190, 90, 95, 175, 190, 94, 128, 27, 60, 212, 225, 20, 190, 98, 191, 130, 61, 136, 120, 82, 190, 186, 91, 67, 62, 176, 45, 17, 189, 218, 13, 249, 61, 14, 158, 62, 188, 166, 173, 34, 190, 148, 50, 185, 62, 205, 137, 82, 190, 107, 11, 150, 62, 47, 122, 140, 62, 83, 166, 180, 62, 155, 217, 210, 189, 58, 186, 162, 190, 150, 197, 132, 60, 136, 148, 22, 61, 71, 152, 30, 61, 223, 113, 98, 190, 60, 243, 120, 62, 123, 170, 164, 189, 99, 156, 125, 61, 180, 78, 169, 62, 145, 225, 235, 189, 243, 189, 131, 62, 70, 234, 70, 191, 102, 38, 1, 62, 51, 180, 188, 189, 244, 30, 40, 61, 57, 195, 183, 62, 70, 165, 218, 60, 166, 90, 99, 190, 77, 246, 229, 189, 78, 162, 68, 190, 77, 87, 2, 190, 248, 224, 194, 189, 161, 200, 155, 61, 179, 144, 128, 62, 184, 158, 228, 61, 137, 182, 200, 190, 239, 135, 188, 62, 110, 168, 202, 188, 16, 60, 26, 191, 156, 208, 57, 62, 74, 40, 155, 61, 170, 226, 184, 190, 149, 121, 134, 190, 72, 76, 79, 62, 2, 164, 84, 61, 172, 12, 61, 190, 128, 143, 86, 61, 129, 242, 79, 62, 117, 90, 137, 190, 174, 6, 50, 190, 12, 138, 76, 62, 79, 148, 79, 189, 41, 135, 178, 190, 10, 83, 133, 190, 68, 216, 56, 62, 228, 17, 73, 190, 186, 68, 239, 61, 41, 61, 201, 61, 117, 66, 92, 61, 77, 14, 249, 188, 70, 247, 232, 61, 188, 139, 5, 190, 205, 4, 108, 62, 86, 196, 9, 190, 20, 42, 142, 61, 189, 225, 6, 62, 158, 205, 233, 61, 54, 216, 62, 62, 210, 44, 98, 190, 36, 216, 9, 62, 230, 238, 183, 188, 59, 156, 233, 188, 177, 157, 118, 190, 108, 188, 38, 61, 231, 189, 172, 189, 183, 200, 242, 61, 104, 116, 6, 61, 240, 2, 47, 62, 27, 191, 101, 61, 214, 201, 241, 59, 75, 128, 11, 190, 25, 26, 135, 62, 71, 45, 88, 190, 194, 136, 55, 62, 234, 217, 242, 189, 50, 207, 66, 62, 243, 61, 58, 59, 124, 254, 64, 189, 251, 129, 50, 62, 3, 108, 31, 61, 77, 86, 119, 190, 161, 111, 44, 190, 40, 97, 186, 61, 91, 117, 92, 190, 75, 16, 59, 62, 142, 172, 15, 191, 16, 179, 128, 62, 250, 240, 172, 189, 19, 148, 73, 62, 180, 28, 158, 62, 73, 141, 66, 190, 18, 3, 155, 190, 205, 199, 49, 59, 227, 119, 115, 190, 208, 217, 32, 190, 25, 104, 88, 62, 208, 202, 134, 62, 234, 162, 1, 61, 153, 36, 234, 189, 5, 87, 238, 189, 96, 14, 201, 62, 46, 194, 146, 189, 0, 3, 214, 62, 89, 36, 149, 60, 62, 46, 68, 61, 162, 81, 24, 62, 241, 29, 241, 190, 207, 78, 170, 62, 60, 207, 157, 61, 238, 30, 35, 62, 162, 87, 147, 61, 203, 8, 80, 189, 239, 16, 64, 188, 8, 126, 185, 61, 87, 224, 25, 190, 42, 91, 29, 190, 7, 74, 6, 60, 190, 190, 4, 190, 164, 129, 36, 190, 104, 1, 241, 60, 128, 204, 41, 190, 162, 238, 13, 62, 71, 167, 151, 188, 142, 56, 47, 188, 196, 238, 14, 190, 55, 243, 14, 190, 11, 32, 146, 189, 10, 196, 144, 61, 44, 100, 178, 61, 94, 14, 182, 189, 216, 105, 133, 61, 162, 235, 187, 189, 234, 226, 185, 60, 167, 3, 231, 189, 109, 32, 154, 189, 66, 228, 42, 62, 87, 14, 246, 61, 199, 19, 1, 62, 35, 130, 131, 61, 162, 157, 45, 190, 14, 128, 143, 61, 240, 81, 59, 189, 248, 110, 131, 183, 176, 232, 184, 61, 233, 147, 71, 60, 4, 63, 52, 59, 52, 41, 53, 61, 81, 230, 56, 60, 51, 213, 56, 190, 61, 55, 14, 189, 141, 23, 168, 61, 228, 142, 185, 185, 215, 40, 29, 190, 227, 236, 42, 189, 169, 8, 104, 190, 202, 132, 145, 61, 215, 30, 169, 61, 13, 166, 34, 62, 94, 251, 233, 61, 208, 231, 38, 190, 133, 224, 72, 188, 84, 240, 179, 189, 25, 69, 85, 189, 85, 14, 34, 189, 229, 170, 253, 189, 73, 179, 139, 186, 72, 28, 31, 61, 137, 20, 244, 188, 170, 207, 240, 60, 158, 64, 199, 61, 187, 141, 238, 189, 44, 218, 137, 187, 76, 188, 38, 189, 168, 126, 134, 61, 126, 80, 17, 190, 150, 186, 194, 188, 24, 110, 172, 60, 137, 147, 136, 190, 67, 188, 186, 61, 113, 84, 83, 61, 179, 26, 40, 62, 34, 200, 157, 60, 125, 229, 49, 62, 84, 71, 28, 190, 52, 119, 250, 189, 30, 210, 159, 61, 149, 242, 23, 61, 49, 243, 65, 190, 161, 1, 3, 62, 108, 53, 89, 190, 130, 101, 3, 62, 86, 244, 94, 58, 95, 69, 25, 189, 246, 25, 122, 61, 186, 64, 161, 188, 58, 93, 85, 190, 145, 6, 155, 62, 185, 146, 185, 190, 27, 237, 151, 62, 70, 3, 55, 62, 67, 49, 23, 190, 13, 115, 145, 190, 72, 120, 136, 62, 196, 138, 70, 61, 69, 206, 165, 190, 237, 53, 106, 62, 221, 75, 72, 62, 213, 195, 90, 61, 236, 47, 116, 190, 107, 203, 140, 62, 71, 22, 47, 62, 219, 168, 141, 62, 129, 165, 251, 61, 49, 112, 30, 62, 91, 133, 5, 60, 12, 221, 12, 62, 32, 212, 247, 188, 46, 246, 134, 62, 128, 192, 70, 190, 39, 213, 173, 61, 42, 17, 165, 190, 49, 156, 57, 190, 210, 106, 106, 189, 73, 52, 6, 189, 58, 180, 32, 60, 68, 35, 65, 190, 19, 149, 209, 61, 180, 182, 198, 61, 225, 87, 199, 189, 14, 136, 79, 190, 155, 83, 29, 190, 127, 83, 54, 62, 217, 57, 124, 61, 54, 68, 139, 189, 82, 144, 211, 60, 244, 173, 237, 60, 159, 220, 59, 190, 196, 75, 238, 189, 164, 136, 58, 190, 30, 253, 211, 60, 226, 164, 4, 188, 106, 178, 218, 190, 23, 147, 245, 189, 190, 252, 145, 190, 155, 237, 219, 61, 107, 132, 151, 190, 221, 181, 8, 62, 172, 14, 22, 190, 9, 196, 174, 62, 119, 159, 157, 190, 131, 9, 50, 191, 119, 247, 93, 190, 66, 97, 237, 61, 149, 174, 108, 191, 163, 120, 48, 191, 57, 57, 129, 188, 102, 75, 12, 62, 27, 141, 164, 62, 152, 72, 10, 190, 7, 43, 108, 62, 135, 108, 19, 62, 207, 132, 44, 191, 120, 135, 46, 62, 60, 91, 46, 62, 9, 31, 197, 190, 44, 187, 42, 62, 57, 5, 182, 190, 221, 236, 195, 62, 36, 67, 217, 190, 247, 52, 12, 62, 220, 188, 250, 61, 63, 241, 51, 191, 184, 253, 15, 191, 139, 156, 249, 189, 13, 29, 16, 190, 60, 167, 118, 190, 214, 201, 218, 60, 5, 21, 1, 191, 57, 100, 112, 61, 1, 74, 181, 189, 47, 229, 90, 61, 111, 107, 222, 189, 253, 157, 209, 190, 76, 233, 193, 189, 101, 146, 205, 61, 86, 198, 96, 191, 239, 247, 40, 191, 144, 18, 251, 189, 189, 89, 20, 61, 232, 62, 122, 60, 81, 42, 71, 189, 247, 18, 204, 61, 156, 163, 152, 62, 205, 111, 13, 191, 115, 206, 40, 62, 195, 244, 11, 62, 56, 57, 7, 190, 23, 171, 80, 61, 62, 208, 134, 61, 96, 42, 26, 62, 32, 225, 75, 190, 94, 111, 180, 60, 22, 77, 176, 61, 56, 3, 27, 191, 62, 231, 80, 190, 103, 73, 199, 61, 209, 216, 150, 190, 107, 112, 145, 189, 166, 134, 64, 190, 198, 216, 154, 62, 209, 7, 71, 62, 81, 37, 253, 61, 158, 138, 146, 190, 193, 191, 219, 190, 71, 208, 225, 62, 63, 4, 105, 61, 239, 37, 144, 62, 129, 126, 53, 62, 211, 132, 24, 62, 248, 119, 158, 190, 153, 110, 18, 190, 195, 18, 173, 61, 59, 20, 16, 189, 57, 134, 190, 190, 178, 221, 17, 61, 205, 239, 50, 62, 146, 5, 69, 62, 29, 165, 35, 190, 98, 150, 206, 61, 73, 15, 21, 190, 170, 69, 211, 62, 23, 151, 65, 190, 211, 0, 184, 189, 208, 77, 158, 61, 16, 197, 121, 189, 56, 188, 97, 61, 251, 9, 194, 61, 248, 29, 67, 190, 12, 99, 213, 188, 120, 196, 19, 188, 250, 130, 29, 190, 17, 8, 148, 62, 11, 205, 92, 62, 218, 114, 235, 189, 193, 143, 142, 190, 24, 165, 207, 189, 48, 240, 143, 62, 58, 39, 30, 62, 245, 71, 64, 62, 28, 24, 98, 58, 56, 174, 53, 61, 5, 79, 104, 59, 97, 44, 149, 61, 146, 136, 2, 190, 21, 113, 177, 189, 76, 42, 161, 189, 54, 120, 195, 60, 242, 32, 11, 62, 179, 28, 81, 62, 143, 7, 129, 190, 11, 151, 245, 189, 62, 232, 121, 190, 104, 31, 151, 62, 174, 169, 161, 189, 139, 249, 212, 189, 10, 175, 227, 61, 220, 23, 230, 60, 217, 43, 71, 61, 249, 236, 133, 62, 128, 148, 223, 61, 160, 87, 70, 190, 191, 22, 59, 190, 129, 4, 245, 189, 92, 2, 218, 187, 228, 197, 23, 62, 137, 114, 138, 58, 178, 155, 225, 188, 124, 68, 253, 61, 165, 115, 170, 188, 215, 123, 40, 190, 97, 92, 164, 189, 137, 151, 36, 189, 171, 145, 244, 188, 153, 101, 36, 60, 250, 105, 137, 61, 251, 0, 101, 189, 75, 151, 165, 189, 29, 189, 254, 59, 188, 200, 160, 189, 242, 168, 140, 61, 70, 221, 205, 61, 155, 174, 248, 60, 53, 117, 153, 188, 175, 16, 9, 190, 1, 218, 58, 190, 212, 146, 115, 189, 24, 20, 212, 189, 82, 79, 128, 61, 174, 21, 5, 190, 144, 44, 167, 189, 90, 69, 240, 61, 122, 122, 54, 59, 69, 9, 71, 190, 178, 118, 52, 61, 205, 228, 33, 61, 93, 243, 53, 62, 186, 86, 33, 62, 15, 82, 144, 62, 200, 38, 51, 62, 87, 60, 73, 190, 33, 167, 160, 189, 123, 233, 137, 189, 211, 224, 162, 61, 152, 231, 81, 62, 19, 40, 18, 190, 88, 232, 138, 189, 37, 1, 60, 190, 149, 2, 184, 189, 20, 242, 79, 62, 222, 162, 235, 62, 51, 212, 130, 190, 31, 251, 153, 62, 251, 101, 143, 61, 155, 116, 195, 61, 128, 219, 54, 62, 228, 227, 160, 62, 153, 38, 61, 62, 252, 24, 138, 61, 218, 98, 164, 61, 117, 28, 135, 189, 172, 246, 162, 188, 20, 53, 23, 62, 128, 10, 166, 62, 75, 56, 201, 189, 20, 6, 229, 60, 197, 106, 199, 189, 238, 118, 194, 189, 57, 68, 12, 190, 217, 247, 134, 61, 118, 101, 27, 62, 196, 83, 1, 62, 211, 175, 94, 190, 168, 91, 15, 62, 113, 9, 181, 61, 251, 224, 42, 188, 174, 12, 165, 61, 215, 236, 46, 62, 177, 184, 207, 188, 72, 83, 25, 190, 178, 31, 6, 62, 90, 148, 63, 62, 208, 219, 231, 188, 28, 243, 193, 189, 208, 104, 233, 61, 222, 236, 177, 189, 245, 44, 15, 62, 20, 101, 168, 61, 232, 239, 65, 190, 129, 81, 222, 60, 100, 171, 130, 189, 80, 162, 8, 62, 63, 165, 163, 189, 186, 212, 227, 61, 178, 8, 170, 60, 54, 149, 93, 62, 68, 231, 58, 61, 141, 221, 130, 190, 224, 173, 15, 189, 252, 112, 79, 190, 219, 181, 193, 62, 31, 245, 60, 62, 63, 128, 122, 61, 178, 182, 131, 190, 168, 206, 135, 190, 145, 91, 21, 63, 195, 82, 135, 61, 218, 217, 198, 188, 213, 176, 2, 63, 1, 143, 228, 62, 140, 97, 54, 190, 92, 229, 214, 190, 175, 153, 144, 60, 101, 247, 198, 61, 157, 35, 31, 190, 72, 97, 203, 61, 69, 115, 166, 62, 155, 70, 162, 61, 43, 150, 239, 61, 60, 49, 15, 62, 223, 213, 48, 190, 4, 43, 20, 62, 165, 7, 153, 190, 251, 110, 106, 62, 174, 19, 142, 61, 43, 185, 228, 188, 67, 188, 115, 62, 18, 46, 180, 189, 102, 160, 183, 62, 85, 95, 29, 190, 145, 0, 1, 62, 98, 168, 44, 62, 176, 172, 117, 62, 132, 209, 30, 61, 221, 17, 149, 189, 226, 149, 78, 190, 130, 255, 241, 61, 156, 205, 95, 62, 133, 217, 62, 62, 130, 20, 8, 186, 162, 125, 68, 62, 67, 147, 97, 62, 17, 101, 79, 61, 196, 191, 86, 190, 101, 195, 253, 60, 54, 50, 29, 62, 161, 95, 74, 190, 224, 224, 152, 188, 203, 78, 9, 61, 200, 155, 16, 189, 75, 64, 176, 188, 29, 153, 184, 189, 29, 235, 31, 61, 21, 177, 93, 188, 47, 84, 115, 190, 45, 89, 240, 61, 31, 212, 252, 189, 148, 18, 159, 190, 166, 13, 110, 62, 102, 200, 153, 190, 91, 139, 103, 190, 121, 218, 54, 190, 68, 12, 102, 190, 86, 150, 38, 62, 74, 248, 40, 191, 248, 198, 130, 62, 245, 162, 225, 187, 57, 102, 130, 62, 186, 172, 110, 190, 98, 154, 159, 190, 18, 92, 193, 60, 119, 247, 20, 62, 36, 137, 183, 190, 180, 33, 5, 191, 210, 173, 166, 189, 9, 35, 82, 189, 171, 162, 19, 189, 254, 128, 217, 189, 48, 15, 243, 60, 19, 66, 67, 62, 179, 175, 11, 191, 212, 105, 151, 61, 161, 80, 163, 187, 99, 75, 89, 190, 210, 167, 45, 62, 152, 201, 198, 189, 137, 170, 198, 62, 59, 215, 181, 190, 11, 27, 97, 189, 169, 229, 75, 62, 94, 73, 215, 190, 197, 135, 212, 190, 19, 102, 23, 190, 71, 32, 70, 187, 163, 61, 211, 61, 34, 87, 151, 189, 244, 95, 127, 189, 142, 122, 58, 188, 87, 235, 59, 60, 197, 119, 115, 189, 63, 108, 12, 62, 135, 164, 65, 189, 36, 98, 19, 62, 23, 113, 227, 189, 219, 170, 32, 190, 125, 16, 187, 189, 50, 232, 74, 60, 94, 9, 166, 189, 32, 163, 185, 61, 83, 160, 24, 189, 52, 112, 140, 61, 151, 128, 176, 189, 134, 37, 178, 61, 98, 34, 13, 62, 29, 13, 241, 188, 166, 131, 242, 60, 221, 52, 202, 189, 211, 136, 194, 187, 56, 179, 156, 189, 250, 248, 226, 189, 231, 208, 205, 189, 198, 174, 186, 61, 124, 88, 227, 189, 217, 84, 228, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 24, 65, 61, 80, 176, 149, 61, 191, 197, 17, 189, 90, 238, 183, 189, 122, 132, 100, 189, 192, 28, 250, 61, 21, 220, 150, 189, 217, 243, 92, 189, 138, 47, 188, 189, 174, 236, 67, 188, 46, 156, 80, 189, 187, 216, 18, 189, 93, 105, 93, 62, 189, 53, 132, 62, 182, 15, 133, 189, 5, 43, 11, 62, 198, 131, 2, 190, 41, 7, 29, 190, 2, 105, 91, 189, 15, 240, 22, 61, 56, 245, 63, 190, 244, 30, 136, 61, 250, 251, 152, 62, 114, 228, 245, 61, 194, 223, 9, 62, 1, 229, 183, 188, 243, 147, 101, 61, 146, 98, 94, 62, 151, 141, 46, 62, 41, 200, 40, 190, 87, 182, 41, 62, 139, 145, 136, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 87, 135, 62, 201, 28, 129, 63, 61, 239, 140, 190, 94, 202, 44, 190, 44, 254, 46, 190, 224, 254, 129, 62, 18, 182, 131, 190, 201, 68, 253, 60, 147, 119, 164, 189, 5, 54, 168, 190, 245, 28, 194, 62, 119, 190, 101, 190, 89, 195, 134, 190, 32, 226, 174, 62, 46, 78, 30, 63, 49, 189, 249, 189, 171, 23, 99, 190, 164, 219, 14, 62, 11, 55, 134, 189, 157, 217, 184, 189, 200, 34, 96, 190, 140, 75, 73, 191, 14, 78, 254, 190, 235, 220, 208, 62, 203, 183, 28, 62, 164, 221, 105, 189, 131, 143, 130, 62, 61, 174, 196, 61, 218, 233, 219, 62, 61, 41, 82, 190, 113, 81, 220, 190, 231, 204, 165, 60, 212, 65, 218, 189, 156, 87, 73, 62, 105, 49, 125, 190, 47, 112, 148, 188, 212, 123, 5, 190, 133, 14, 163, 189, 213, 111, 37, 189, 14, 181, 212, 60, 245, 8, 190, 61, 33, 113, 48, 60, 65, 98, 67, 190, 75, 93, 173, 60, 112, 9, 11, 190, 193, 159, 36, 189, 162, 89, 200, 61, 252, 95, 177, 189, 219, 5, 150, 62, 210, 109, 220, 189, 242, 197, 205, 61, 255, 252, 217, 190, 223, 19, 78, 62, 68, 191, 205, 61, 200, 128, 147, 190, 247, 231, 251, 59, 163, 103, 33, 187, 97, 21, 92, 61, 65, 50, 152, 189, 177, 237, 59, 190, 63, 241, 151, 61, 240, 145, 149, 62, 81, 37, 116, 189, 60, 135, 209, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 92, 107, 189, 24, 223, 114, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {134, 97, 210, 62, 159, 202, 1, 64, 11, 190, 77, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {236, 223, 29, 192, 28, 224, 33, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0080/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}