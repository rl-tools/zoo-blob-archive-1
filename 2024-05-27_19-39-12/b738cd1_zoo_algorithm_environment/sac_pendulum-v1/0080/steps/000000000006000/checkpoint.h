// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 152, 75, 63, 202, 83, 111, 191, 240, 166, 179, 189, 126, 188, 18, 188, 201, 189, 37, 63, 217, 34, 37, 63, 19, 164, 46, 63, 176, 131, 100, 191, 238, 229, 191, 190, 148, 80, 153, 62, 231, 154, 147, 61, 50, 229, 19, 63, 116, 37, 205, 62, 90, 251, 125, 191, 22, 79, 67, 188, 79, 54, 151, 62, 182, 43, 102, 190, 255, 21, 44, 190, 6, 156, 161, 189, 142, 97, 102, 63, 64, 37, 18, 63, 41, 196, 68, 61, 91, 119, 50, 63, 139, 172, 116, 188, 247, 197, 150, 62, 197, 228, 6, 63, 193, 58, 103, 62, 242, 176, 20, 190, 20, 248, 17, 191, 39, 70, 183, 62, 173, 233, 220, 189, 79, 114, 184, 190, 237, 136, 25, 191, 253, 146, 2, 63, 44, 249, 213, 190, 201, 176, 154, 62, 71, 201, 194, 190, 189, 5, 86, 189, 101, 71, 71, 63, 226, 252, 81, 190, 218, 22, 90, 190, 235, 46, 232, 62, 242, 195, 24, 62, 246, 183, 75, 63, 63, 94, 16, 63, 9, 61, 212, 62, 75, 220, 60, 63, 10, 200, 206, 62, 90, 28, 57, 191, 57, 111, 53, 191, 154, 67, 144, 189, 137, 91, 240, 62, 131, 239, 202, 190, 240, 4, 202, 190, 71, 148, 150, 190, 59, 120, 84, 63, 66, 123, 203, 189, 215, 1, 36, 191, 139, 223, 145, 191, 244, 123, 245, 189, 12, 26, 32, 191, 31, 217, 22, 63, 6, 82, 18, 63, 43, 239, 8, 63, 112, 74, 15, 63, 217, 243, 214, 62, 112, 26, 208, 62, 165, 54, 54, 63, 196, 154, 215, 188, 208, 202, 83, 190, 94, 91, 30, 63, 40, 20, 15, 190, 53, 82, 153, 190, 214, 61, 74, 63, 88, 96, 137, 189, 111, 243, 9, 63, 213, 167, 56, 191, 69, 200, 249, 189, 229, 212, 138, 190, 246, 233, 12, 63, 179, 4, 227, 190, 185, 62, 193, 190, 156, 66, 120, 63, 147, 178, 178, 62, 101, 74, 155, 189, 151, 57, 135, 191, 119, 225, 10, 191, 97, 38, 70, 190, 71, 165, 45, 63, 124, 22, 202, 189, 174, 197, 187, 190, 187, 34, 49, 63, 79, 99, 149, 62, 250, 133, 241, 190, 80, 18, 74, 63, 129, 188, 97, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 74, 9, 191, 66, 248, 154, 190, 127, 251, 230, 190, 52, 117, 135, 61, 230, 239, 46, 189, 181, 71, 0, 63, 80, 114, 101, 62, 13, 92, 2, 63, 60, 60, 233, 190, 161, 218, 209, 190, 126, 130, 129, 190, 157, 43, 36, 63, 222, 94, 186, 190, 56, 44, 183, 190, 143, 226, 139, 60, 69, 173, 130, 190, 0, 202, 8, 63, 55, 34, 167, 62, 243, 214, 48, 189, 7, 111, 109, 190, 88, 74, 231, 190, 179, 179, 248, 62, 224, 193, 80, 63, 39, 161, 170, 61, 24, 246, 114, 61, 114, 56, 109, 62, 216, 53, 151, 189, 58, 85, 72, 190, 116, 185, 134, 62, 241, 37, 30, 63, 255, 3, 55, 190, 105, 251, 64, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {134, 211, 153, 61, 87, 59, 68, 189, 195, 8, 71, 61, 17, 30, 63, 61, 196, 46, 43, 189, 166, 189, 235, 187, 3, 166, 140, 190, 215, 98, 193, 189, 172, 239, 204, 59, 41, 249, 45, 190, 66, 35, 197, 189, 178, 118, 206, 62, 242, 48, 93, 190, 150, 222, 171, 190, 120, 95, 140, 190, 215, 110, 150, 189, 144, 228, 99, 190, 81, 231, 173, 60, 233, 160, 79, 61, 48, 9, 157, 189, 169, 232, 69, 190, 243, 40, 79, 62, 245, 55, 219, 61, 110, 178, 45, 189, 165, 59, 44, 190, 206, 227, 183, 62, 6, 77, 88, 62, 152, 2, 221, 190, 172, 22, 202, 61, 9, 253, 217, 189, 126, 159, 200, 190, 83, 163, 19, 189, 130, 238, 186, 190, 167, 75, 32, 191, 51, 175, 189, 190, 205, 135, 54, 191, 245, 18, 75, 189, 75, 67, 136, 190, 227, 49, 129, 62, 208, 187, 184, 60, 217, 102, 143, 190, 14, 30, 75, 62, 112, 107, 245, 189, 60, 120, 130, 191, 147, 13, 36, 62, 249, 241, 209, 61, 15, 224, 36, 191, 75, 22, 143, 190, 57, 111, 76, 61, 183, 129, 165, 61, 173, 136, 135, 61, 230, 241, 17, 190, 6, 29, 2, 62, 145, 206, 80, 191, 136, 32, 31, 62, 22, 123, 4, 62, 123, 20, 155, 60, 10, 61, 43, 190, 248, 57, 249, 190, 35, 13, 177, 62, 159, 54, 168, 190, 200, 207, 164, 62, 123, 196, 15, 62, 171, 185, 155, 61, 150, 162, 188, 190, 170, 226, 31, 190, 20, 55, 151, 190, 54, 162, 61, 61, 124, 22, 194, 190, 14, 146, 101, 62, 105, 113, 73, 62, 172, 169, 158, 62, 235, 30, 89, 190, 97, 94, 142, 62, 123, 221, 222, 61, 55, 199, 78, 61, 105, 66, 58, 62, 59, 3, 35, 62, 160, 73, 249, 60, 16, 85, 4, 61, 35, 129, 193, 190, 162, 188, 35, 62, 44, 169, 49, 190, 52, 92, 152, 190, 53, 60, 119, 62, 228, 191, 216, 61, 231, 210, 113, 61, 139, 144, 152, 62, 218, 193, 113, 187, 86, 79, 184, 61, 58, 150, 143, 60, 183, 157, 27, 60, 112, 210, 105, 190, 14, 49, 32, 62, 110, 81, 64, 62, 128, 122, 74, 62, 96, 86, 243, 189, 254, 240, 182, 189, 57, 154, 3, 190, 89, 227, 19, 190, 97, 93, 31, 190, 223, 16, 163, 189, 223, 57, 253, 187, 65, 237, 2, 190, 248, 195, 114, 188, 41, 183, 6, 190, 252, 68, 215, 60, 40, 180, 135, 61, 252, 40, 14, 189, 203, 140, 42, 61, 48, 251, 5, 62, 99, 171, 105, 189, 92, 87, 225, 60, 246, 218, 4, 190, 119, 29, 27, 62, 244, 23, 168, 188, 240, 214, 27, 190, 78, 164, 25, 62, 212, 145, 35, 190, 23, 62, 27, 190, 225, 238, 76, 61, 191, 238, 21, 62, 183, 224, 255, 61, 252, 3, 243, 61, 57, 211, 157, 189, 116, 147, 7, 190, 98, 198, 54, 61, 217, 6, 181, 61, 210, 163, 7, 190, 190, 146, 174, 60, 3, 220, 46, 61, 182, 191, 205, 61, 20, 83, 51, 62, 222, 221, 128, 189, 70, 101, 216, 189, 173, 106, 37, 188, 91, 183, 72, 187, 52, 243, 27, 190, 31, 218, 181, 61, 102, 133, 16, 187, 12, 18, 153, 61, 10, 229, 37, 190, 83, 35, 86, 190, 58, 37, 243, 61, 195, 181, 139, 188, 197, 73, 203, 189, 71, 194, 197, 61, 121, 11, 153, 61, 80, 79, 234, 61, 69, 77, 197, 186, 105, 157, 142, 60, 136, 86, 194, 61, 100, 150, 129, 189, 182, 226, 33, 190, 139, 41, 234, 189, 227, 165, 47, 61, 199, 108, 122, 189, 60, 92, 45, 190, 208, 199, 154, 61, 207, 186, 44, 190, 104, 23, 22, 62, 91, 17, 154, 190, 112, 122, 74, 61, 251, 67, 255, 189, 1, 177, 31, 61, 35, 56, 239, 57, 210, 156, 19, 189, 214, 145, 107, 189, 159, 217, 10, 191, 245, 228, 107, 62, 104, 191, 78, 61, 196, 93, 165, 61, 102, 244, 3, 62, 217, 108, 168, 62, 44, 152, 197, 189, 82, 178, 109, 190, 141, 0, 129, 61, 173, 81, 43, 62, 35, 180, 7, 190, 151, 95, 161, 188, 254, 115, 80, 62, 12, 131, 122, 62, 188, 179, 200, 189, 195, 241, 70, 188, 223, 54, 178, 190, 8, 115, 154, 62, 25, 59, 238, 189, 121, 66, 126, 190, 70, 188, 215, 61, 212, 117, 212, 187, 130, 33, 159, 62, 76, 187, 130, 62, 68, 192, 33, 62, 88, 41, 24, 62, 205, 42, 60, 62, 169, 250, 64, 62, 51, 208, 128, 62, 11, 60, 135, 62, 35, 101, 105, 189, 66, 44, 241, 187, 214, 187, 64, 190, 100, 14, 149, 62, 53, 165, 143, 189, 12, 212, 77, 62, 65, 94, 90, 62, 188, 152, 145, 62, 102, 156, 185, 61, 246, 170, 42, 189, 249, 69, 179, 60, 242, 97, 157, 190, 255, 0, 92, 61, 96, 13, 71, 189, 142, 41, 89, 60, 221, 214, 174, 190, 137, 27, 17, 190, 113, 222, 28, 62, 180, 121, 204, 61, 240, 94, 52, 62, 48, 63, 194, 190, 12, 237, 93, 62, 24, 165, 154, 189, 232, 239, 252, 189, 224, 178, 189, 62, 66, 155, 112, 62, 162, 38, 240, 189, 221, 66, 209, 189, 76, 68, 209, 189, 220, 150, 23, 190, 177, 98, 190, 189, 39, 128, 95, 189, 215, 142, 10, 61, 80, 19, 223, 60, 98, 186, 47, 62, 154, 214, 71, 189, 183, 178, 205, 189, 127, 144, 22, 62, 16, 239, 227, 189, 79, 25, 209, 61, 249, 137, 45, 190, 57, 165, 171, 189, 152, 126, 112, 189, 236, 145, 63, 189, 101, 133, 234, 189, 139, 168, 12, 62, 28, 141, 134, 189, 241, 52, 89, 189, 34, 101, 75, 61, 226, 64, 30, 190, 155, 82, 4, 62, 1, 23, 97, 189, 51, 184, 252, 189, 165, 217, 26, 188, 10, 76, 210, 189, 196, 212, 240, 189, 9, 228, 224, 188, 58, 254, 219, 187, 41, 18, 195, 188, 208, 127, 63, 189, 132, 229, 13, 62, 242, 172, 246, 188, 97, 120, 69, 190, 238, 211, 147, 188, 107, 15, 222, 187, 129, 154, 1, 190, 178, 139, 188, 61, 152, 248, 40, 189, 210, 22, 70, 189, 174, 110, 10, 60, 130, 71, 147, 61, 95, 79, 33, 190, 241, 224, 7, 190, 35, 132, 213, 60, 195, 87, 43, 190, 178, 4, 78, 61, 160, 214, 5, 189, 189, 206, 236, 189, 182, 192, 250, 61, 159, 212, 230, 61, 23, 92, 51, 189, 132, 153, 146, 61, 12, 146, 46, 62, 105, 41, 13, 59, 25, 188, 31, 190, 10, 63, 17, 190, 211, 243, 215, 60, 98, 89, 64, 190, 170, 123, 12, 190, 85, 23, 242, 189, 164, 121, 43, 189, 103, 69, 127, 62, 150, 53, 240, 61, 185, 27, 98, 62, 195, 194, 154, 190, 102, 118, 104, 62, 44, 12, 41, 190, 41, 4, 138, 62, 17, 213, 143, 62, 215, 246, 241, 190, 234, 246, 22, 189, 211, 143, 233, 187, 33, 60, 161, 190, 113, 140, 142, 190, 163, 10, 157, 62, 248, 5, 214, 62, 98, 20, 11, 189, 96, 8, 158, 189, 127, 37, 182, 61, 216, 253, 223, 62, 188, 34, 33, 191, 10, 49, 172, 61, 78, 92, 252, 61, 138, 245, 41, 190, 245, 121, 29, 190, 101, 98, 76, 190, 100, 239, 156, 62, 136, 190, 40, 191, 206, 102, 148, 62, 64, 128, 89, 62, 100, 170, 52, 191, 230, 187, 106, 190, 249, 231, 152, 189, 149, 160, 230, 189, 129, 10, 100, 61, 100, 126, 189, 189, 155, 33, 217, 189, 123, 205, 195, 190, 164, 3, 255, 60, 39, 64, 174, 188, 212, 124, 139, 189, 151, 119, 66, 61, 136, 68, 146, 189, 240, 42, 2, 191, 218, 55, 57, 61, 120, 80, 53, 189, 53, 20, 189, 190, 156, 252, 62, 190, 33, 194, 169, 62, 118, 111, 70, 190, 217, 177, 95, 62, 113, 200, 143, 190, 211, 100, 92, 62, 158, 31, 62, 191, 182, 225, 163, 61, 65, 113, 164, 189, 132, 122, 77, 62, 169, 182, 23, 191, 103, 112, 121, 190, 105, 35, 69, 62, 225, 172, 149, 190, 146, 92, 72, 189, 90, 80, 14, 189, 165, 151, 61, 62, 20, 145, 52, 62, 122, 48, 253, 188, 70, 219, 116, 61, 108, 189, 131, 62, 29, 248, 106, 62, 153, 254, 32, 62, 33, 246, 23, 62, 168, 224, 32, 62, 171, 107, 17, 62, 199, 34, 91, 61, 72, 56, 129, 190, 4, 29, 64, 62, 159, 24, 187, 62, 112, 253, 95, 62, 143, 34, 252, 187, 109, 80, 33, 62, 20, 188, 10, 62, 208, 25, 114, 190, 225, 63, 13, 190, 196, 170, 76, 61, 150, 203, 104, 61, 225, 14, 94, 190, 241, 245, 77, 190, 167, 116, 140, 188, 76, 28, 163, 189, 115, 137, 169, 188, 72, 39, 12, 191, 252, 197, 156, 60, 138, 50, 197, 61, 121, 62, 154, 190, 7, 9, 114, 62, 122, 164, 101, 190, 70, 160, 18, 191, 84, 154, 45, 62, 7, 119, 162, 189, 103, 125, 168, 60, 152, 194, 136, 190, 110, 228, 36, 62, 121, 46, 42, 60, 140, 15, 151, 189, 124, 173, 172, 190, 207, 203, 21, 190, 61, 114, 107, 190, 84, 103, 169, 62, 6, 207, 175, 190, 107, 11, 222, 188, 180, 34, 144, 62, 185, 251, 131, 62, 178, 233, 45, 62, 219, 185, 167, 190, 179, 208, 65, 189, 215, 247, 127, 62, 65, 113, 11, 191, 250, 92, 148, 62, 236, 36, 74, 62, 223, 205, 87, 190, 143, 152, 72, 190, 72, 192, 224, 61, 43, 193, 153, 61, 57, 212, 252, 190, 153, 166, 8, 62, 37, 47, 245, 189, 150, 71, 238, 190, 141, 85, 195, 190, 116, 207, 152, 62, 166, 1, 20, 190, 115, 121, 135, 62, 2, 21, 54, 190, 126, 209, 79, 62, 50, 84, 77, 189, 149, 8, 18, 62, 238, 234, 114, 61, 202, 154, 49, 189, 201, 148, 189, 62, 162, 147, 232, 189, 36, 42, 151, 62, 132, 75, 136, 62, 63, 140, 176, 62, 36, 38, 211, 189, 42, 69, 147, 190, 247, 5, 164, 189, 141, 160, 16, 62, 200, 153, 40, 60, 112, 223, 2, 191, 155, 204, 126, 62, 148, 106, 138, 189, 58, 206, 26, 62, 231, 241, 238, 62, 36, 240, 34, 190, 222, 158, 140, 62, 251, 1, 24, 191, 228, 244, 29, 62, 208, 61, 104, 190, 117, 220, 163, 61, 20, 177, 183, 62, 41, 40, 139, 61, 166, 90, 99, 190, 199, 224, 2, 190, 78, 162, 68, 190, 132, 202, 217, 189, 48, 153, 35, 190, 136, 69, 162, 188, 227, 111, 167, 62, 237, 223, 88, 62, 26, 9, 36, 191, 4, 83, 205, 62, 255, 16, 159, 190, 184, 248, 12, 191, 231, 145, 98, 62, 219, 119, 229, 61, 174, 148, 194, 190, 98, 191, 161, 190, 162, 177, 144, 62, 102, 162, 92, 190, 102, 237, 194, 189, 61, 232, 122, 60, 91, 1, 129, 62, 63, 249, 133, 190, 215, 46, 158, 189, 49, 166, 157, 62, 123, 243, 46, 61, 43, 187, 220, 190, 109, 148, 100, 190, 231, 100, 137, 62, 216, 254, 205, 190, 16, 1, 83, 62, 147, 98, 34, 62, 214, 76, 47, 62, 210, 252, 123, 189, 120, 218, 208, 61, 106, 135, 35, 190, 65, 86, 99, 62, 137, 79, 241, 189, 162, 125, 149, 61, 72, 102, 210, 61, 55, 133, 209, 61, 234, 31, 147, 61, 237, 125, 102, 190, 126, 18, 221, 61, 79, 118, 27, 60, 140, 65, 124, 188, 143, 253, 100, 190, 31, 30, 233, 60, 95, 166, 235, 189, 32, 26, 254, 61, 192, 244, 205, 59, 120, 136, 68, 62, 219, 0, 110, 61, 108, 200, 129, 187, 236, 53, 239, 189, 232, 104, 129, 62, 84, 139, 99, 190, 151, 127, 84, 62, 105, 28, 175, 189, 174, 185, 44, 62, 200, 186, 41, 189, 219, 207, 126, 189, 144, 192, 48, 62, 99, 38, 234, 60, 110, 236, 105, 190, 122, 137, 185, 190, 176, 200, 209, 61, 183, 54, 63, 190, 10, 11, 53, 62, 251, 144, 65, 191, 112, 10, 170, 62, 254, 15, 196, 189, 71, 250, 93, 62, 165, 79, 114, 62, 124, 169, 48, 190, 192, 10, 136, 190, 235, 74, 156, 188, 127, 79, 106, 190, 55, 155, 15, 190, 50, 149, 107, 62, 14, 223, 129, 62, 139, 192, 135, 189, 183, 143, 92, 189, 41, 40, 54, 190, 183, 155, 175, 62, 3, 106, 152, 189, 184, 99, 212, 62, 0, 183, 89, 61, 77, 170, 42, 61, 200, 41, 168, 61, 131, 162, 248, 190, 123, 59, 188, 62, 100, 95, 99, 61, 175, 83, 63, 62, 199, 99, 136, 61, 23, 224, 47, 189, 240, 202, 92, 189, 8, 126, 185, 61, 87, 224, 25, 190, 42, 91, 29, 190, 7, 74, 6, 60, 190, 190, 4, 190, 164, 129, 36, 190, 104, 1, 241, 60, 128, 204, 41, 190, 162, 238, 13, 62, 71, 167, 151, 188, 142, 56, 47, 188, 196, 238, 14, 190, 55, 243, 14, 190, 11, 32, 146, 189, 10, 196, 144, 61, 44, 100, 178, 61, 94, 14, 182, 189, 216, 105, 133, 61, 162, 235, 187, 189, 234, 226, 185, 60, 167, 3, 231, 189, 109, 32, 154, 189, 66, 228, 42, 62, 87, 14, 246, 61, 199, 19, 1, 62, 35, 130, 131, 61, 162, 157, 45, 190, 14, 128, 143, 61, 240, 81, 59, 189, 248, 110, 131, 183, 176, 232, 184, 61, 233, 147, 71, 60, 4, 63, 52, 59, 52, 41, 53, 61, 123, 180, 41, 60, 51, 213, 56, 190, 61, 55, 14, 189, 59, 70, 166, 61, 228, 142, 185, 185, 18, 211, 30, 190, 227, 236, 42, 189, 169, 8, 104, 190, 70, 25, 142, 61, 215, 30, 169, 61, 13, 166, 34, 62, 94, 251, 233, 61, 208, 231, 38, 190, 133, 224, 72, 188, 217, 218, 180, 189, 213, 229, 90, 189, 81, 222, 41, 189, 74, 182, 253, 189, 73, 179, 139, 186, 72, 28, 31, 61, 167, 70, 2, 189, 187, 11, 221, 60, 87, 155, 195, 61, 197, 219, 238, 189, 72, 64, 26, 188, 76, 188, 38, 189, 121, 230, 131, 61, 241, 25, 19, 190, 150, 186, 194, 188, 161, 186, 144, 60, 123, 204, 151, 190, 162, 67, 189, 61, 89, 176, 131, 61, 126, 227, 68, 62, 219, 214, 63, 189, 173, 49, 52, 62, 155, 225, 70, 190, 127, 75, 170, 189, 252, 32, 151, 61, 18, 56, 46, 60, 26, 216, 105, 190, 230, 126, 83, 62, 175, 14, 108, 190, 26, 116, 227, 61, 203, 25, 102, 60, 15, 88, 204, 59, 165, 5, 213, 60, 11, 161, 58, 189, 74, 39, 101, 190, 44, 157, 138, 62, 126, 130, 252, 190, 32, 137, 214, 62, 87, 154, 122, 62, 241, 159, 39, 190, 89, 21, 152, 190, 126, 150, 143, 62, 90, 198, 205, 60, 127, 45, 231, 190, 118, 171, 56, 62, 61, 145, 67, 62, 231, 172, 21, 189, 199, 194, 91, 190, 119, 217, 85, 62, 177, 133, 37, 62, 204, 52, 101, 62, 13, 214, 0, 62, 47, 205, 35, 61, 109, 138, 82, 189, 77, 247, 138, 61, 252, 115, 182, 60, 193, 106, 140, 62, 227, 155, 70, 190, 63, 56, 180, 61, 101, 43, 13, 191, 68, 81, 57, 190, 210, 106, 106, 189, 227, 88, 146, 189, 146, 62, 90, 188, 47, 122, 137, 190, 34, 209, 154, 61, 204, 250, 146, 62, 95, 247, 61, 190, 240, 185, 86, 190, 195, 63, 149, 190, 180, 132, 52, 62, 14, 29, 85, 62, 137, 68, 182, 61, 125, 7, 211, 189, 49, 36, 179, 61, 150, 173, 150, 190, 138, 25, 36, 190, 35, 65, 21, 190, 255, 161, 53, 189, 188, 67, 2, 62, 230, 58, 9, 191, 197, 82, 2, 189, 215, 115, 140, 190, 95, 237, 211, 189, 58, 72, 115, 190, 70, 127, 42, 62, 204, 228, 228, 190, 109, 156, 158, 62, 77, 198, 103, 190, 115, 247, 200, 190, 201, 106, 102, 190, 125, 11, 221, 61, 234, 178, 62, 191, 192, 180, 218, 190, 177, 78, 174, 189, 30, 153, 20, 62, 22, 84, 201, 62, 106, 175, 240, 189, 114, 156, 10, 62, 192, 83, 164, 62, 135, 54, 109, 191, 242, 207, 8, 62, 47, 194, 21, 62, 230, 195, 219, 190, 12, 63, 152, 61, 34, 212, 173, 190, 233, 33, 175, 62, 93, 35, 100, 191, 9, 43, 97, 62, 251, 94, 236, 61, 221, 48, 136, 191, 19, 150, 25, 191, 164, 19, 50, 190, 201, 181, 116, 190, 117, 4, 121, 190, 252, 80, 71, 190, 60, 10, 12, 191, 17, 32, 143, 61, 40, 175, 209, 190, 25, 124, 87, 61, 99, 91, 116, 190, 63, 118, 135, 190, 181, 58, 203, 189, 156, 226, 137, 61, 147, 239, 64, 191, 112, 242, 234, 190, 248, 146, 155, 190, 16, 114, 154, 189, 91, 119, 72, 61, 101, 233, 21, 189, 57, 37, 166, 61, 34, 117, 176, 62, 7, 115, 72, 191, 124, 152, 1, 62, 87, 144, 7, 62, 118, 30, 221, 189, 55, 131, 7, 61, 71, 234, 74, 61, 115, 253, 26, 62, 113, 133, 36, 191, 3, 220, 71, 61, 19, 119, 214, 61, 6, 34, 125, 191, 239, 143, 43, 190, 59, 231, 89, 62, 160, 192, 164, 190, 243, 136, 110, 189, 144, 172, 59, 190, 213, 6, 153, 62, 172, 79, 82, 62, 119, 130, 1, 62, 147, 24, 119, 190, 1, 46, 35, 191, 152, 113, 237, 62, 115, 66, 229, 60, 139, 49, 140, 62, 229, 77, 79, 62, 28, 86, 53, 62, 39, 145, 172, 190, 47, 254, 126, 190, 146, 6, 59, 61, 83, 34, 195, 59, 103, 250, 202, 190, 228, 5, 184, 189, 157, 41, 112, 62, 127, 174, 14, 62, 193, 137, 247, 189, 110, 110, 170, 61, 215, 199, 28, 190, 67, 20, 220, 62, 240, 141, 61, 190, 5, 197, 94, 189, 181, 218, 73, 60, 208, 52, 199, 59, 102, 21, 188, 61, 199, 178, 192, 188, 134, 218, 12, 190, 228, 222, 250, 59, 88, 205, 141, 188, 61, 157, 223, 189, 234, 104, 141, 62, 129, 12, 71, 62, 223, 186, 190, 189, 147, 219, 165, 190, 174, 47, 213, 189, 239, 122, 170, 62, 87, 233, 27, 62, 167, 7, 56, 62, 143, 43, 62, 61, 176, 81, 194, 61, 204, 83, 229, 60, 122, 16, 109, 61, 227, 53, 20, 190, 12, 197, 170, 189, 168, 226, 13, 190, 30, 59, 220, 188, 86, 195, 83, 62, 97, 160, 43, 62, 29, 58, 149, 190, 60, 41, 0, 190, 199, 163, 154, 190, 104, 212, 137, 62, 191, 42, 110, 189, 19, 170, 105, 189, 103, 37, 194, 61, 144, 188, 176, 59, 34, 246, 187, 61, 215, 196, 108, 62, 128, 148, 223, 61, 160, 87, 70, 190, 191, 22, 59, 190, 129, 4, 245, 189, 92, 2, 218, 187, 228, 197, 23, 62, 137, 114, 138, 58, 178, 155, 225, 188, 124, 68, 253, 61, 165, 115, 170, 188, 215, 123, 40, 190, 97, 92, 164, 189, 137, 151, 36, 189, 171, 145, 244, 188, 153, 101, 36, 60, 250, 105, 137, 61, 251, 0, 101, 189, 75, 151, 165, 189, 29, 189, 254, 59, 188, 200, 160, 189, 242, 168, 140, 61, 70, 221, 205, 61, 155, 174, 248, 60, 53, 117, 153, 188, 175, 16, 9, 190, 1, 218, 58, 190, 212, 146, 115, 189, 24, 20, 212, 189, 82, 79, 128, 61, 174, 21, 5, 190, 144, 44, 167, 189, 90, 69, 240, 61, 221, 169, 134, 61, 103, 191, 71, 190, 53, 192, 79, 61, 19, 220, 135, 61, 149, 54, 37, 62, 1, 55, 8, 62, 65, 224, 152, 62, 164, 104, 54, 62, 7, 108, 182, 189, 233, 94, 138, 189, 2, 215, 144, 189, 20, 72, 192, 61, 139, 251, 77, 62, 77, 250, 20, 190, 47, 107, 143, 189, 73, 88, 32, 190, 122, 229, 205, 189, 19, 125, 88, 62, 181, 13, 203, 62, 8, 178, 144, 190, 176, 50, 157, 62, 223, 127, 174, 61, 40, 187, 240, 61, 17, 249, 13, 62, 158, 108, 128, 62, 29, 14, 46, 62, 36, 154, 146, 61, 212, 246, 210, 61, 238, 139, 203, 189, 234, 145, 242, 188, 168, 82, 21, 62, 233, 15, 143, 62, 139, 178, 61, 189, 158, 47, 128, 60, 104, 113, 218, 189, 67, 121, 150, 189, 76, 251, 48, 190, 52, 116, 46, 61, 61, 220, 26, 62, 172, 173, 12, 62, 63, 95, 55, 190, 250, 34, 13, 62, 46, 226, 135, 61, 240, 153, 182, 60, 151, 176, 163, 61, 105, 33, 46, 62, 36, 56, 40, 189, 106, 83, 19, 190, 132, 117, 17, 62, 54, 231, 63, 62, 213, 23, 136, 189, 71, 119, 217, 189, 224, 92, 242, 61, 105, 91, 90, 189, 215, 10, 50, 62, 147, 233, 178, 60, 143, 193, 89, 190, 196, 154, 111, 60, 47, 207, 163, 189, 63, 18, 10, 62, 56, 212, 8, 190, 129, 119, 240, 61, 150, 19, 105, 60, 30, 15, 58, 62, 246, 123, 230, 61, 23, 242, 124, 190, 136, 68, 11, 189, 177, 242, 47, 190, 243, 155, 192, 62, 102, 81, 51, 62, 246, 251, 186, 61, 71, 67, 68, 190, 50, 102, 9, 190, 231, 45, 24, 63, 209, 108, 118, 61, 88, 71, 68, 188, 246, 36, 0, 63, 177, 27, 223, 62, 198, 163, 42, 190, 247, 32, 193, 190, 82, 168, 27, 61, 33, 225, 224, 61, 49, 254, 20, 190, 98, 199, 172, 61, 169, 52, 168, 62, 53, 9, 195, 61, 110, 75, 60, 62, 238, 161, 64, 62, 166, 86, 51, 190, 104, 56, 4, 62, 102, 45, 136, 190, 145, 191, 135, 62, 74, 41, 102, 61, 162, 175, 171, 60, 250, 1, 117, 62, 126, 207, 169, 189, 104, 184, 195, 62, 103, 190, 28, 190, 131, 164, 5, 62, 236, 65, 29, 62, 119, 225, 176, 62, 200, 200, 40, 61, 119, 130, 130, 189, 87, 200, 108, 190, 148, 104, 165, 61, 170, 122, 75, 62, 213, 68, 40, 62, 216, 222, 69, 187, 6, 187, 58, 62, 3, 66, 82, 62, 115, 66, 86, 61, 1, 232, 86, 190, 248, 79, 193, 59, 104, 204, 225, 61, 120, 178, 156, 188, 147, 104, 154, 188, 2, 95, 6, 61, 184, 147, 40, 189, 108, 2, 195, 189, 177, 206, 131, 189, 155, 39, 81, 62, 5, 114, 85, 61, 33, 6, 148, 190, 239, 63, 12, 62, 28, 33, 219, 189, 188, 206, 179, 190, 226, 31, 120, 62, 30, 182, 137, 190, 82, 205, 159, 190, 198, 171, 215, 60, 77, 219, 86, 190, 156, 149, 161, 61, 204, 1, 72, 191, 60, 125, 140, 62, 196, 222, 39, 190, 20, 234, 146, 62, 224, 183, 143, 60, 54, 111, 72, 190, 170, 202, 58, 61, 233, 77, 5, 62, 165, 207, 42, 190, 136, 148, 149, 190, 248, 43, 239, 188, 94, 140, 147, 61, 4, 55, 224, 188, 57, 73, 163, 189, 121, 127, 13, 187, 83, 176, 119, 62, 252, 97, 52, 191, 127, 156, 184, 61, 34, 174, 212, 60, 89, 150, 62, 190, 204, 246, 10, 62, 8, 21, 19, 190, 111, 166, 204, 62, 95, 136, 50, 191, 112, 99, 104, 188, 215, 129, 108, 62, 52, 181, 36, 191, 150, 124, 201, 190, 19, 102, 23, 190, 71, 32, 70, 187, 163, 61, 211, 61, 34, 87, 151, 189, 244, 95, 127, 189, 142, 122, 58, 188, 87, 235, 59, 60, 197, 119, 115, 189, 63, 108, 12, 62, 135, 164, 65, 189, 36, 98, 19, 62, 23, 113, 227, 189, 219, 170, 32, 190, 125, 16, 187, 189, 50, 232, 74, 60, 94, 9, 166, 189, 32, 163, 185, 61, 83, 160, 24, 189, 52, 112, 140, 61, 151, 128, 176, 189, 134, 37, 178, 61, 98, 34, 13, 62, 29, 13, 241, 188, 166, 131, 242, 60, 221, 52, 202, 189, 211, 136, 194, 187, 56, 179, 156, 189, 250, 248, 226, 189, 231, 208, 205, 189, 198, 174, 186, 61, 124, 88, 227, 189, 217, 84, 228, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 65, 82, 61, 170, 85, 144, 61, 28, 163, 191, 186, 90, 238, 183, 189, 122, 132, 100, 189, 239, 197, 31, 62, 64, 194, 26, 188, 217, 243, 92, 189, 138, 47, 188, 189, 128, 44, 198, 188, 118, 158, 73, 189, 190, 34, 215, 60, 44, 123, 160, 62, 61, 30, 132, 62, 169, 78, 252, 60, 63, 224, 29, 62, 27, 234, 21, 190, 41, 7, 29, 190, 16, 234, 93, 189, 148, 9, 103, 61, 190, 244, 145, 190, 248, 228, 185, 61, 112, 200, 159, 62, 28, 142, 32, 62, 176, 56, 224, 61, 1, 229, 183, 188, 169, 210, 78, 61, 149, 243, 114, 62, 41, 77, 73, 62, 51, 158, 57, 190, 132, 101, 54, 62, 139, 145, 136, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 199, 146, 62, 252, 35, 162, 63, 234, 27, 158, 190, 94, 202, 44, 190, 44, 254, 46, 190, 155, 104, 141, 62, 217, 248, 126, 190, 201, 68, 253, 60, 147, 119, 164, 189, 221, 1, 181, 190, 219, 137, 18, 63, 71, 48, 84, 190, 131, 13, 15, 191, 59, 214, 177, 62, 90, 62, 115, 63, 28, 54, 153, 189, 63, 186, 1, 190, 164, 219, 14, 62, 95, 38, 134, 189, 247, 109, 126, 190, 148, 175, 149, 190, 109, 159, 109, 191, 28, 65, 25, 191, 6, 180, 226, 62, 39, 75, 211, 61, 164, 221, 105, 189, 153, 118, 102, 62, 150, 79, 144, 61, 120, 84, 204, 62, 26, 181, 47, 190, 177, 207, 6, 191, 231, 204, 165, 60, 55, 206, 68, 190, 222, 128, 79, 62, 203, 163, 97, 190, 47, 112, 148, 188, 212, 123, 5, 190, 99, 241, 124, 189, 240, 252, 60, 189, 14, 181, 212, 60, 245, 8, 190, 61, 226, 228, 158, 60, 23, 165, 24, 190, 253, 44, 232, 60, 217, 23, 169, 189, 241, 53, 137, 189, 169, 247, 105, 61, 22, 73, 182, 189, 118, 131, 190, 62, 210, 109, 220, 189, 226, 202, 205, 61, 186, 208, 202, 190, 226, 14, 137, 62, 1, 4, 13, 62, 136, 70, 161, 190, 177, 112, 225, 60, 185, 172, 57, 61, 97, 21, 92, 61, 103, 161, 179, 189, 243, 232, 58, 190, 109, 76, 102, 61, 153, 112, 148, 62, 175, 144, 126, 188, 60, 135, 209, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 250, 121, 189, 231, 18, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {243, 69, 46, 192, 84, 87, 147, 63, 153, 100, 212, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {71, 71, 219, 64, 107, 53, 133, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0080/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}