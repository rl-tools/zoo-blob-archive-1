// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 108, 74, 63, 63, 251, 85, 191, 174, 230, 93, 190, 152, 197, 54, 62, 180, 50, 44, 63, 171, 30, 35, 63, 128, 59, 79, 63, 73, 135, 52, 191, 163, 152, 192, 190, 169, 191, 187, 62, 197, 145, 65, 61, 120, 189, 15, 63, 135, 101, 178, 62, 46, 157, 115, 191, 71, 11, 192, 189, 224, 117, 139, 62, 1, 176, 177, 189, 194, 43, 64, 190, 169, 237, 175, 189, 23, 36, 124, 63, 126, 89, 14, 63, 80, 194, 110, 188, 99, 100, 38, 63, 187, 248, 158, 61, 162, 219, 4, 63, 74, 235, 3, 63, 247, 106, 94, 62, 199, 7, 247, 189, 118, 54, 58, 191, 210, 200, 177, 62, 132, 114, 136, 187, 175, 29, 227, 190, 9, 60, 17, 191, 51, 78, 255, 62, 174, 143, 37, 191, 79, 86, 123, 62, 175, 70, 172, 190, 122, 29, 144, 188, 40, 192, 69, 63, 70, 210, 11, 190, 40, 50, 236, 190, 176, 123, 216, 62, 178, 24, 46, 62, 135, 205, 137, 63, 35, 175, 3, 63, 127, 169, 224, 62, 31, 5, 94, 63, 1, 27, 198, 62, 239, 212, 71, 191, 65, 48, 52, 191, 75, 204, 211, 189, 134, 172, 243, 62, 164, 110, 223, 190, 142, 61, 220, 190, 108, 20, 170, 190, 134, 152, 80, 63, 255, 204, 140, 189, 188, 95, 33, 191, 137, 132, 143, 191, 196, 2, 150, 190, 75, 129, 35, 191, 86, 220, 80, 63, 10, 172, 8, 63, 242, 191, 18, 63, 8, 32, 70, 63, 177, 83, 151, 62, 51, 213, 193, 62, 251, 63, 44, 63, 206, 203, 131, 59, 70, 214, 22, 190, 191, 67, 28, 63, 50, 236, 18, 190, 133, 191, 199, 190, 23, 49, 116, 63, 122, 44, 143, 188, 194, 63, 18, 63, 134, 15, 54, 191, 57, 34, 59, 190, 0, 40, 157, 190, 222, 229, 14, 63, 158, 194, 222, 190, 109, 131, 184, 190, 177, 77, 134, 63, 33, 76, 182, 62, 120, 188, 31, 189, 172, 223, 161, 191, 235, 55, 12, 191, 144, 177, 111, 190, 111, 56, 47, 63, 235, 170, 159, 189, 78, 29, 182, 190, 118, 95, 89, 63, 19, 150, 68, 62, 79, 250, 225, 190, 186, 88, 70, 63, 123, 1, 92, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 48, 11, 191, 58, 193, 159, 190, 139, 96, 0, 191, 204, 161, 68, 60, 238, 76, 104, 189, 146, 138, 248, 62, 205, 254, 65, 62, 60, 81, 248, 62, 20, 128, 248, 190, 20, 33, 203, 190, 174, 108, 241, 189, 203, 50, 26, 63, 21, 29, 172, 190, 148, 110, 165, 190, 217, 3, 175, 61, 119, 4, 107, 190, 100, 224, 1, 63, 243, 137, 171, 62, 121, 180, 18, 190, 150, 129, 111, 190, 188, 222, 225, 190, 22, 235, 253, 62, 10, 2, 74, 63, 15, 220, 225, 61, 233, 209, 71, 61, 79, 111, 132, 62, 24, 227, 131, 189, 131, 125, 135, 190, 73, 3, 55, 62, 117, 95, 17, 63, 58, 1, 138, 190, 23, 22, 70, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 240, 79, 189, 2, 14, 63, 190, 204, 58, 170, 61, 222, 240, 146, 188, 35, 180, 10, 190, 53, 248, 204, 60, 143, 26, 220, 190, 33, 55, 191, 188, 84, 15, 151, 190, 114, 105, 8, 190, 242, 254, 173, 189, 73, 82, 209, 62, 93, 213, 144, 190, 22, 106, 182, 190, 69, 49, 186, 190, 237, 214, 249, 189, 152, 190, 162, 190, 23, 110, 102, 61, 226, 99, 0, 62, 103, 218, 46, 190, 158, 157, 69, 190, 20, 131, 79, 62, 162, 242, 39, 62, 98, 174, 225, 60, 249, 158, 200, 189, 42, 182, 185, 62, 196, 63, 131, 62, 145, 214, 22, 191, 133, 14, 184, 61, 178, 217, 31, 189, 43, 227, 8, 191, 245, 254, 6, 61, 130, 238, 186, 190, 23, 235, 14, 191, 7, 82, 194, 190, 227, 158, 45, 191, 245, 18, 75, 189, 48, 21, 154, 190, 189, 73, 157, 62, 5, 86, 20, 61, 217, 102, 143, 190, 120, 239, 111, 62, 72, 52, 246, 189, 252, 219, 131, 191, 124, 96, 71, 62, 143, 127, 24, 62, 107, 72, 66, 191, 171, 217, 126, 190, 14, 27, 103, 61, 167, 167, 131, 61, 165, 100, 185, 61, 75, 183, 95, 190, 13, 120, 130, 62, 65, 55, 126, 191, 208, 76, 29, 62, 31, 36, 12, 62, 205, 120, 52, 61, 44, 171, 47, 190, 249, 55, 241, 190, 179, 161, 217, 62, 225, 120, 213, 190, 60, 169, 168, 62, 242, 3, 81, 62, 252, 111, 196, 61, 223, 199, 178, 190, 88, 120, 48, 190, 68, 78, 3, 191, 130, 100, 88, 61, 128, 204, 135, 190, 115, 112, 64, 62, 247, 167, 97, 62, 179, 108, 163, 62, 117, 22, 131, 190, 42, 11, 155, 62, 217, 77, 78, 61, 223, 58, 149, 61, 43, 228, 52, 62, 151, 183, 50, 62, 190, 196, 100, 61, 252, 29, 32, 61, 239, 18, 2, 191, 162, 86, 192, 61, 126, 0, 77, 189, 128, 7, 145, 189, 62, 201, 116, 62, 81, 36, 51, 62, 34, 59, 82, 61, 102, 31, 178, 62, 172, 87, 6, 62, 223, 105, 153, 60, 85, 47, 6, 60, 128, 62, 26, 61, 239, 211, 150, 190, 219, 139, 64, 62, 246, 65, 64, 62, 164, 118, 132, 62, 96, 86, 243, 189, 254, 240, 182, 189, 57, 154, 3, 190, 89, 227, 19, 190, 97, 93, 31, 190, 223, 16, 163, 189, 223, 57, 253, 187, 65, 237, 2, 190, 248, 195, 114, 188, 41, 183, 6, 190, 252, 68, 215, 60, 40, 180, 135, 61, 252, 40, 14, 189, 203, 140, 42, 61, 48, 251, 5, 62, 99, 171, 105, 189, 92, 87, 225, 60, 246, 218, 4, 190, 119, 29, 27, 62, 244, 23, 168, 188, 240, 214, 27, 190, 78, 164, 25, 62, 212, 145, 35, 190, 23, 62, 27, 190, 225, 238, 76, 61, 191, 238, 21, 62, 183, 224, 255, 61, 252, 3, 243, 61, 57, 211, 157, 189, 116, 147, 7, 190, 98, 198, 54, 61, 217, 6, 181, 61, 210, 163, 7, 190, 190, 146, 174, 60, 3, 220, 46, 61, 182, 191, 205, 61, 20, 83, 51, 62, 222, 221, 128, 189, 70, 101, 216, 189, 173, 106, 37, 188, 91, 183, 72, 187, 52, 243, 27, 190, 31, 218, 181, 61, 102, 133, 16, 187, 12, 18, 153, 61, 10, 229, 37, 190, 83, 35, 86, 190, 58, 37, 243, 61, 195, 181, 139, 188, 197, 73, 203, 189, 71, 194, 197, 61, 121, 11, 153, 61, 80, 79, 234, 61, 69, 77, 197, 186, 105, 157, 142, 60, 136, 86, 194, 61, 100, 150, 129, 189, 182, 226, 33, 190, 139, 41, 234, 189, 227, 165, 47, 61, 199, 108, 122, 189, 60, 92, 45, 190, 208, 199, 154, 61, 207, 186, 44, 190, 96, 121, 199, 60, 73, 166, 170, 190, 185, 110, 222, 61, 209, 130, 28, 190, 137, 225, 158, 60, 56, 104, 61, 61, 254, 38, 196, 189, 60, 56, 29, 189, 77, 135, 65, 191, 96, 10, 150, 62, 134, 189, 151, 61, 188, 254, 189, 61, 175, 176, 7, 62, 252, 232, 181, 62, 8, 87, 52, 190, 29, 234, 168, 190, 85, 234, 185, 61, 196, 130, 88, 62, 45, 87, 168, 189, 20, 235, 185, 189, 184, 199, 53, 62, 225, 34, 58, 62, 211, 192, 147, 189, 103, 0, 114, 61, 107, 215, 150, 190, 133, 248, 174, 62, 49, 76, 134, 189, 51, 103, 154, 190, 124, 162, 248, 61, 235, 239, 78, 61, 204, 251, 146, 62, 72, 142, 148, 62, 51, 214, 156, 62, 117, 209, 5, 62, 202, 250, 76, 62, 68, 172, 51, 62, 36, 3, 154, 62, 199, 235, 132, 62, 122, 161, 13, 189, 198, 212, 101, 61, 164, 70, 108, 190, 38, 81, 147, 62, 133, 127, 106, 190, 130, 226, 60, 62, 83, 177, 77, 62, 122, 192, 145, 62, 133, 70, 221, 61, 209, 40, 62, 189, 2, 47, 146, 190, 3, 45, 164, 190, 143, 160, 133, 62, 208, 134, 134, 190, 36, 144, 118, 60, 235, 233, 155, 190, 28, 136, 154, 189, 226, 187, 215, 62, 208, 109, 169, 62, 90, 199, 32, 62, 236, 231, 81, 190, 242, 139, 122, 62, 20, 217, 142, 190, 116, 219, 15, 189, 129, 133, 191, 62, 150, 214, 196, 62, 162, 38, 240, 189, 221, 66, 209, 189, 76, 68, 209, 189, 220, 150, 23, 190, 177, 98, 190, 189, 39, 128, 95, 189, 215, 142, 10, 61, 80, 19, 223, 60, 98, 186, 47, 62, 154, 214, 71, 189, 183, 178, 205, 189, 127, 144, 22, 62, 16, 239, 227, 189, 79, 25, 209, 61, 249, 137, 45, 190, 57, 165, 171, 189, 152, 126, 112, 189, 236, 145, 63, 189, 101, 133, 234, 189, 139, 168, 12, 62, 28, 141, 134, 189, 241, 52, 89, 189, 34, 101, 75, 61, 226, 64, 30, 190, 155, 82, 4, 62, 1, 23, 97, 189, 51, 184, 252, 189, 165, 217, 26, 188, 10, 76, 210, 189, 196, 212, 240, 189, 9, 228, 224, 188, 58, 254, 219, 187, 41, 18, 195, 188, 208, 127, 63, 189, 132, 229, 13, 62, 242, 172, 246, 188, 97, 120, 69, 190, 238, 211, 147, 188, 107, 15, 222, 187, 129, 154, 1, 190, 178, 139, 188, 61, 152, 248, 40, 189, 210, 22, 70, 189, 174, 110, 10, 60, 130, 71, 147, 61, 95, 79, 33, 190, 241, 224, 7, 190, 35, 132, 213, 60, 195, 87, 43, 190, 178, 4, 78, 61, 160, 214, 5, 189, 189, 206, 236, 189, 182, 192, 250, 61, 159, 212, 230, 61, 23, 92, 51, 189, 132, 153, 146, 61, 12, 146, 46, 62, 105, 41, 13, 59, 25, 188, 31, 190, 10, 63, 17, 190, 211, 243, 215, 60, 98, 89, 64, 190, 170, 123, 12, 190, 85, 23, 242, 189, 144, 52, 159, 61, 141, 172, 201, 61, 226, 243, 57, 61, 99, 88, 106, 62, 217, 227, 88, 190, 126, 49, 55, 62, 154, 42, 56, 190, 192, 149, 81, 62, 84, 210, 193, 61, 180, 91, 8, 191, 137, 12, 146, 189, 117, 225, 237, 187, 213, 4, 168, 190, 25, 90, 154, 190, 232, 14, 144, 62, 17, 42, 188, 62, 47, 220, 142, 61, 66, 128, 8, 190, 246, 124, 70, 61, 152, 144, 14, 63, 74, 126, 56, 191, 205, 254, 187, 61, 142, 19, 107, 61, 49, 237, 118, 190, 207, 39, 67, 190, 33, 34, 104, 190, 127, 233, 118, 62, 45, 37, 86, 191, 226, 240, 139, 62, 35, 17, 36, 62, 120, 24, 81, 191, 148, 172, 142, 190, 249, 231, 152, 189, 179, 207, 233, 187, 129, 10, 100, 61, 81, 155, 51, 189, 195, 131, 231, 189, 252, 65, 8, 191, 61, 39, 24, 62, 186, 14, 17, 61, 79, 145, 229, 189, 31, 235, 32, 190, 141, 79, 47, 190, 149, 228, 14, 191, 248, 47, 138, 61, 160, 130, 56, 190, 239, 242, 146, 190, 85, 187, 182, 189, 188, 153, 172, 62, 90, 48, 131, 190, 186, 92, 145, 62, 211, 85, 187, 190, 23, 145, 186, 62, 41, 179, 49, 191, 110, 51, 237, 61, 217, 35, 126, 189, 153, 231, 141, 62, 169, 182, 23, 191, 136, 66, 173, 190, 221, 159, 175, 62, 145, 65, 226, 190, 65, 193, 86, 188, 135, 252, 210, 61, 219, 66, 69, 62, 36, 188, 159, 62, 108, 48, 79, 189, 151, 45, 244, 61, 232, 215, 119, 62, 127, 2, 88, 62, 61, 114, 37, 62, 169, 54, 10, 62, 75, 136, 20, 62, 160, 48, 194, 61, 134, 214, 10, 61, 93, 14, 203, 190, 47, 103, 41, 62, 94, 144, 182, 62, 70, 40, 91, 62, 10, 244, 14, 189, 110, 40, 251, 61, 205, 75, 28, 189, 16, 144, 109, 190, 73, 226, 7, 190, 91, 124, 23, 190, 118, 241, 112, 61, 219, 247, 115, 190, 56, 226, 76, 190, 111, 114, 62, 60, 255, 48, 81, 189, 44, 164, 226, 188, 42, 136, 26, 191, 215, 196, 104, 58, 149, 204, 116, 189, 31, 85, 145, 190, 104, 57, 76, 62, 128, 37, 201, 190, 129, 133, 0, 191, 146, 66, 98, 62, 20, 33, 40, 188, 240, 239, 190, 61, 201, 218, 59, 190, 223, 227, 25, 62, 61, 165, 76, 61, 3, 250, 241, 189, 144, 133, 132, 190, 151, 201, 49, 189, 11, 214, 53, 190, 163, 173, 178, 62, 66, 233, 139, 190, 121, 127, 125, 61, 101, 115, 172, 62, 60, 97, 165, 62, 104, 138, 78, 61, 155, 8, 168, 190, 156, 218, 187, 61, 119, 43, 99, 62, 41, 226, 0, 191, 55, 229, 157, 62, 27, 112, 47, 62, 12, 235, 11, 190, 178, 69, 150, 189, 41, 25, 202, 61, 221, 121, 242, 61, 27, 4, 11, 191, 93, 44, 244, 61, 244, 40, 20, 190, 138, 94, 36, 191, 121, 63, 141, 190, 242, 147, 99, 62, 189, 145, 13, 190, 106, 247, 101, 62, 177, 40, 49, 190, 6, 228, 32, 62, 28, 26, 137, 189, 24, 133, 233, 61, 118, 184, 48, 61, 134, 144, 154, 188, 66, 224, 191, 62, 185, 238, 51, 190, 144, 124, 156, 62, 228, 122, 135, 62, 72, 215, 172, 62, 65, 201, 1, 190, 137, 88, 148, 190, 48, 211, 180, 61, 69, 84, 233, 61, 222, 182, 211, 189, 84, 177, 230, 190, 223, 219, 114, 62, 115, 189, 176, 189, 42, 121, 5, 62, 167, 172, 164, 62, 122, 29, 149, 190, 122, 134, 140, 62, 215, 157, 51, 191, 65, 14, 5, 62, 202, 70, 101, 190, 247, 39, 61, 61, 252, 243, 183, 62, 95, 19, 211, 188, 166, 90, 99, 190, 144, 171, 166, 189, 78, 162, 68, 190, 173, 156, 133, 189, 36, 186, 111, 189, 209, 70, 128, 190, 141, 225, 176, 62, 251, 52, 36, 62, 59, 204, 42, 191, 71, 183, 212, 62, 126, 107, 155, 190, 78, 55, 8, 191, 241, 145, 127, 62, 240, 6, 252, 61, 196, 17, 186, 190, 118, 99, 150, 190, 224, 111, 133, 62, 25, 123, 154, 190, 122, 123, 198, 189, 254, 115, 11, 190, 121, 133, 152, 62, 40, 109, 146, 190, 246, 250, 49, 190, 235, 143, 126, 62, 105, 241, 10, 61, 28, 233, 167, 190, 150, 129, 188, 190, 135, 20, 149, 62, 193, 96, 8, 191, 159, 113, 24, 62, 184, 203, 56, 62, 134, 41, 251, 61, 64, 141, 100, 189, 173, 3, 166, 61, 29, 99, 181, 190, 206, 222, 107, 62, 203, 196, 19, 186, 78, 250, 237, 60, 192, 100, 0, 62, 164, 219, 9, 62, 112, 247, 135, 60, 149, 144, 85, 190, 98, 99, 76, 61, 182, 171, 8, 61, 237, 124, 177, 188, 70, 218, 87, 190, 40, 95, 73, 61, 84, 217, 226, 189, 167, 70, 144, 61, 21, 204, 135, 189, 218, 254, 166, 62, 238, 178, 255, 61, 92, 3, 21, 188, 76, 151, 16, 189, 71, 235, 131, 62, 58, 232, 36, 190, 122, 118, 185, 62, 195, 254, 54, 190, 17, 239, 35, 62, 134, 100, 199, 188, 102, 144, 6, 190, 143, 113, 111, 62, 100, 99, 171, 60, 166, 154, 34, 190, 207, 245, 243, 190, 78, 158, 10, 62, 161, 167, 153, 190, 41, 233, 94, 62, 134, 13, 69, 191, 244, 151, 150, 62, 146, 121, 47, 189, 148, 57, 135, 62, 239, 147, 110, 62, 134, 206, 221, 189, 10, 126, 162, 190, 157, 243, 69, 59, 36, 143, 53, 190, 139, 189, 163, 189, 94, 90, 141, 62, 221, 62, 139, 62, 249, 136, 6, 188, 65, 73, 9, 190, 38, 176, 63, 190, 134, 135, 209, 62, 48, 133, 59, 189, 24, 233, 232, 62, 86, 29, 141, 61, 225, 197, 76, 61, 226, 119, 193, 61, 66, 15, 15, 191, 65, 175, 183, 62, 197, 78, 151, 61, 111, 84, 7, 62, 213, 135, 208, 61, 161, 23, 253, 188, 197, 48, 165, 189, 8, 126, 185, 61, 148, 89, 31, 190, 42, 91, 29, 190, 59, 237, 144, 59, 190, 190, 4, 190, 145, 252, 38, 190, 56, 229, 137, 60, 142, 248, 52, 190, 215, 10, 12, 62, 71, 167, 151, 188, 142, 56, 47, 188, 120, 37, 18, 190, 55, 243, 14, 190, 11, 32, 146, 189, 65, 94, 116, 61, 28, 225, 163, 61, 94, 14, 182, 189, 216, 105, 133, 61, 223, 28, 199, 189, 234, 226, 185, 60, 70, 52, 238, 189, 106, 110, 180, 189, 246, 94, 28, 62, 28, 31, 234, 61, 75, 206, 241, 61, 35, 130, 131, 61, 136, 205, 47, 190, 93, 198, 127, 61, 240, 81, 59, 189, 148, 175, 51, 188, 182, 222, 173, 61, 61, 181, 3, 60, 4, 63, 52, 59, 52, 41, 53, 61, 123, 180, 41, 60, 51, 213, 56, 190, 61, 55, 14, 189, 59, 70, 166, 61, 228, 142, 185, 185, 18, 211, 30, 190, 227, 236, 42, 189, 169, 8, 104, 190, 70, 25, 142, 61, 215, 30, 169, 61, 13, 166, 34, 62, 94, 251, 233, 61, 208, 231, 38, 190, 133, 224, 72, 188, 217, 218, 180, 189, 213, 229, 90, 189, 81, 222, 41, 189, 74, 182, 253, 189, 73, 179, 139, 186, 72, 28, 31, 61, 167, 70, 2, 189, 187, 11, 221, 60, 87, 155, 195, 61, 197, 219, 238, 189, 72, 64, 26, 188, 76, 188, 38, 189, 121, 230, 131, 61, 241, 25, 19, 190, 150, 186, 194, 188, 161, 186, 144, 60, 226, 60, 69, 190, 72, 5, 3, 189, 117, 62, 122, 61, 141, 196, 2, 62, 215, 50, 218, 60, 240, 113, 55, 62, 116, 139, 139, 190, 206, 34, 79, 189, 155, 167, 43, 189, 231, 158, 255, 189, 60, 128, 143, 190, 39, 164, 60, 62, 132, 157, 171, 190, 77, 246, 216, 59, 45, 68, 95, 189, 45, 203, 120, 189, 101, 27, 1, 189, 0, 160, 53, 189, 248, 37, 3, 190, 153, 99, 129, 62, 11, 77, 9, 191, 124, 190, 226, 62, 200, 186, 136, 62, 10, 15, 63, 190, 21, 147, 65, 190, 74, 98, 151, 62, 195, 196, 150, 188, 235, 76, 249, 190, 221, 240, 249, 61, 49, 5, 73, 62, 36, 32, 222, 188, 110, 169, 77, 190, 206, 155, 162, 62, 109, 88, 100, 188, 24, 49, 69, 62, 82, 206, 75, 189, 170, 20, 238, 61, 11, 35, 230, 188, 238, 67, 58, 62, 246, 70, 255, 61, 107, 91, 159, 62, 237, 173, 81, 190, 255, 45, 32, 61, 134, 182, 32, 191, 95, 60, 189, 190, 143, 173, 169, 189, 53, 76, 100, 60, 194, 28, 18, 59, 87, 252, 90, 190, 225, 178, 97, 61, 115, 30, 151, 62, 220, 9, 106, 189, 77, 144, 186, 190, 126, 235, 51, 61, 106, 22, 138, 62, 196, 16, 105, 62, 227, 132, 252, 61, 233, 38, 189, 189, 220, 81, 141, 61, 165, 90, 57, 190, 188, 193, 59, 190, 69, 17, 179, 189, 165, 208, 234, 61, 114, 91, 219, 61, 17, 230, 10, 191, 123, 185, 131, 189, 68, 145, 158, 190, 107, 19, 28, 190, 198, 51, 145, 190, 26, 83, 9, 62, 76, 157, 13, 191, 203, 125, 137, 62, 0, 24, 222, 189, 30, 188, 43, 191, 218, 136, 9, 190, 209, 80, 33, 61, 43, 28, 51, 191, 225, 102, 16, 191, 235, 3, 66, 189, 131, 209, 44, 62, 200, 242, 195, 62, 38, 103, 225, 189, 92, 4, 68, 62, 0, 212, 188, 62, 63, 218, 139, 191, 40, 170, 26, 62, 21, 193, 216, 61, 189, 191, 185, 190, 65, 60, 2, 62, 110, 146, 209, 190, 254, 100, 211, 62, 26, 126, 155, 191, 124, 144, 125, 62, 76, 249, 238, 61, 74, 214, 174, 191, 83, 72, 5, 191, 45, 27, 2, 190, 165, 138, 135, 190, 179, 183, 172, 190, 53, 199, 212, 189, 47, 221, 252, 190, 233, 46, 40, 61, 19, 100, 197, 190, 245, 166, 95, 60, 80, 152, 81, 190, 247, 220, 11, 191, 221, 100, 206, 189, 193, 28, 207, 61, 63, 42, 23, 191, 210, 190, 10, 191, 129, 234, 107, 190, 108, 101, 124, 188, 96, 216, 162, 61, 187, 25, 131, 189, 137, 152, 158, 61, 27, 138, 201, 62, 249, 82, 88, 191, 8, 65, 56, 62, 70, 177, 204, 61, 221, 74, 17, 190, 50, 58, 151, 60, 187, 146, 194, 60, 104, 151, 5, 62, 91, 246, 106, 191, 43, 155, 236, 60, 175, 13, 148, 61, 200, 83, 163, 191, 65, 30, 30, 190, 147, 154, 188, 61, 176, 222, 196, 190, 156, 141, 210, 188, 65, 130, 125, 190, 168, 131, 133, 62, 198, 176, 128, 62, 16, 216, 70, 61, 35, 60, 77, 190, 233, 165, 97, 191, 15, 118, 1, 63, 147, 213, 76, 61, 119, 12, 132, 62, 42, 255, 57, 62, 144, 133, 56, 62, 13, 0, 224, 190, 56, 241, 193, 190, 123, 233, 236, 61, 59, 116, 41, 61, 85, 155, 129, 190, 70, 118, 27, 190, 70, 252, 63, 62, 91, 255, 130, 61, 216, 122, 184, 189, 159, 79, 119, 62, 99, 178, 219, 60, 15, 22, 232, 62, 107, 86, 213, 189, 138, 220, 221, 189, 69, 192, 12, 61, 219, 86, 239, 61, 228, 167, 176, 61, 23, 233, 141, 61, 252, 75, 149, 190, 119, 118, 31, 61, 239, 18, 14, 190, 98, 221, 211, 189, 204, 171, 38, 62, 86, 7, 4, 62, 228, 45, 151, 189, 132, 209, 168, 190, 51, 244, 205, 59, 166, 71, 166, 62, 193, 35, 203, 61, 185, 32, 34, 62, 24, 147, 72, 61, 146, 248, 180, 61, 110, 207, 124, 61, 202, 250, 232, 61, 50, 27, 205, 188, 108, 40, 56, 190, 247, 106, 46, 190, 201, 44, 211, 60, 29, 178, 79, 62, 81, 121, 40, 62, 15, 131, 165, 190, 140, 128, 254, 189, 115, 174, 182, 190, 163, 149, 63, 62, 252, 208, 146, 189, 229, 57, 207, 188, 201, 198, 138, 61, 249, 122, 192, 188, 128, 218, 24, 62, 208, 25, 137, 62, 128, 148, 223, 61, 160, 87, 70, 190, 191, 22, 59, 190, 129, 4, 245, 189, 92, 2, 218, 187, 228, 197, 23, 62, 137, 114, 138, 58, 178, 155, 225, 188, 124, 68, 253, 61, 165, 115, 170, 188, 215, 123, 40, 190, 97, 92, 164, 189, 137, 151, 36, 189, 171, 145, 244, 188, 153, 101, 36, 60, 250, 105, 137, 61, 251, 0, 101, 189, 75, 151, 165, 189, 29, 189, 254, 59, 188, 200, 160, 189, 242, 168, 140, 61, 70, 221, 205, 61, 155, 174, 248, 60, 53, 117, 153, 188, 175, 16, 9, 190, 1, 218, 58, 190, 212, 146, 115, 189, 24, 20, 212, 189, 82, 79, 128, 61, 174, 21, 5, 190, 144, 44, 167, 189, 90, 69, 240, 61, 175, 106, 191, 188, 173, 114, 66, 190, 246, 156, 1, 62, 89, 78, 131, 61, 205, 15, 56, 61, 161, 104, 14, 62, 178, 105, 137, 62, 110, 34, 34, 62, 76, 126, 143, 189, 23, 60, 200, 189, 90, 9, 139, 188, 33, 128, 158, 61, 234, 7, 69, 62, 60, 97, 42, 190, 32, 44, 193, 189, 202, 95, 33, 190, 237, 189, 41, 190, 79, 244, 130, 62, 83, 232, 169, 62, 134, 61, 218, 190, 227, 101, 152, 62, 119, 128, 109, 61, 58, 132, 251, 61, 185, 2, 208, 61, 37, 228, 27, 62, 160, 123, 58, 62, 161, 206, 196, 61, 146, 36, 153, 61, 197, 180, 214, 189, 224, 221, 128, 189, 71, 18, 9, 62, 189, 138, 142, 62, 63, 15, 2, 190, 42, 79, 36, 60, 193, 13, 0, 190, 208, 167, 117, 189, 164, 217, 12, 190, 248, 159, 130, 61, 242, 212, 255, 61, 206, 0, 20, 62, 25, 231, 80, 190, 194, 168, 29, 62, 218, 216, 152, 61, 41, 88, 157, 61, 125, 3, 150, 61, 158, 106, 44, 62, 101, 13, 101, 189, 192, 239, 14, 190, 87, 111, 13, 62, 137, 157, 86, 62, 68, 212, 62, 188, 159, 120, 217, 189, 18, 94, 207, 61, 68, 52, 217, 188, 86, 141, 74, 62, 137, 62, 32, 61, 19, 242, 53, 190, 147, 204, 255, 60, 245, 72, 137, 189, 33, 135, 226, 61, 47, 135, 13, 190, 52, 134, 0, 62, 44, 79, 91, 187, 82, 10, 127, 62, 176, 34, 136, 187, 171, 39, 114, 190, 43, 130, 39, 61, 114, 94, 52, 190, 219, 28, 149, 62, 90, 123, 81, 62, 86, 222, 141, 61, 64, 199, 69, 190, 233, 43, 213, 189, 210, 216, 24, 63, 59, 211, 200, 61, 193, 37, 231, 187, 65, 128, 255, 62, 135, 44, 217, 62, 180, 180, 60, 190, 237, 10, 193, 190, 88, 34, 161, 61, 76, 174, 31, 62, 3, 219, 83, 190, 181, 133, 100, 60, 37, 60, 167, 62, 45, 180, 98, 61, 233, 212, 75, 62, 251, 236, 61, 62, 92, 199, 133, 190, 65, 218, 44, 62, 218, 151, 114, 190, 14, 81, 132, 62, 208, 63, 179, 61, 133, 148, 28, 59, 98, 105, 130, 62, 20, 134, 160, 189, 32, 206, 5, 63, 47, 128, 27, 190, 165, 206, 92, 62, 83, 69, 16, 62, 243, 3, 187, 62, 59, 90, 163, 61, 237, 230, 21, 189, 255, 173, 82, 190, 253, 141, 17, 61, 179, 228, 49, 62, 170, 240, 97, 62, 12, 206, 236, 188, 72, 138, 65, 62, 110, 138, 75, 62, 171, 247, 110, 61, 193, 208, 108, 190, 105, 168, 163, 188, 250, 116, 44, 62, 70, 151, 212, 57, 150, 77, 131, 189, 168, 178, 143, 61, 156, 105, 132, 189, 115, 4, 117, 189, 146, 132, 110, 61, 44, 70, 143, 62, 80, 202, 213, 61, 239, 250, 116, 190, 82, 213, 52, 62, 173, 128, 141, 189, 116, 210, 137, 190, 241, 90, 134, 62, 188, 203, 136, 190, 152, 175, 159, 190, 212, 246, 222, 189, 145, 213, 200, 190, 223, 97, 201, 61, 95, 18, 53, 191, 19, 178, 103, 62, 89, 63, 184, 61, 196, 98, 168, 62, 158, 8, 228, 189, 132, 73, 226, 189, 4, 182, 31, 189, 249, 79, 17, 62, 141, 154, 10, 190, 121, 187, 106, 190, 237, 117, 64, 62, 90, 92, 33, 62, 108, 192, 94, 61, 146, 114, 41, 190, 0, 18, 158, 61, 82, 68, 198, 62, 93, 152, 29, 191, 202, 216, 53, 62, 57, 125, 164, 60, 151, 48, 52, 190, 192, 208, 118, 62, 90, 62, 82, 190, 158, 32, 178, 62, 185, 8, 201, 190, 80, 239, 149, 189, 232, 217, 134, 62, 102, 147, 155, 190, 190, 224, 188, 190, 19, 102, 23, 190, 71, 32, 70, 187, 163, 61, 211, 61, 34, 87, 151, 189, 244, 95, 127, 189, 142, 122, 58, 188, 87, 235, 59, 60, 197, 119, 115, 189, 63, 108, 12, 62, 135, 164, 65, 189, 36, 98, 19, 62, 23, 113, 227, 189, 219, 170, 32, 190, 125, 16, 187, 189, 50, 232, 74, 60, 94, 9, 166, 189, 32, 163, 185, 61, 83, 160, 24, 189, 52, 112, 140, 61, 151, 128, 176, 189, 134, 37, 178, 61, 98, 34, 13, 62, 29, 13, 241, 188, 166, 131, 242, 60, 221, 52, 202, 189, 211, 136, 194, 187, 56, 179, 156, 189, 250, 248, 226, 189, 231, 208, 205, 189, 198, 174, 186, 61, 124, 88, 227, 189, 217, 84, 228, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 55, 128, 61, 49, 79, 144, 61, 81, 25, 156, 187, 90, 238, 183, 189, 122, 132, 100, 189, 37, 215, 60, 62, 2, 250, 206, 188, 217, 243, 92, 189, 138, 47, 188, 189, 22, 133, 12, 189, 179, 108, 11, 189, 75, 139, 240, 57, 253, 60, 147, 62, 171, 118, 137, 62, 24, 31, 213, 188, 192, 84, 44, 62, 218, 2, 199, 189, 115, 136, 38, 190, 16, 234, 93, 189, 160, 158, 107, 61, 81, 51, 68, 190, 32, 124, 7, 61, 200, 29, 155, 62, 149, 132, 73, 62, 51, 22, 162, 61, 1, 229, 183, 188, 29, 11, 186, 59, 179, 56, 128, 62, 250, 79, 75, 62, 3, 4, 31, 190, 72, 143, 83, 62, 139, 145, 136, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 210, 157, 62, 140, 172, 186, 63, 201, 140, 172, 190, 94, 202, 44, 190, 44, 254, 46, 190, 110, 234, 173, 62, 123, 4, 138, 190, 201, 68, 253, 60, 147, 119, 164, 189, 19, 215, 175, 190, 120, 47, 96, 63, 167, 181, 65, 190, 159, 165, 3, 191, 177, 212, 164, 62, 57, 135, 115, 63, 3, 103, 207, 189, 62, 118, 57, 190, 126, 166, 10, 62, 95, 38, 134, 189, 143, 95, 113, 190, 250, 103, 132, 190, 2, 11, 133, 191, 83, 29, 26, 191, 78, 132, 3, 63, 116, 108, 156, 61, 164, 221, 105, 189, 172, 97, 76, 62, 89, 31, 133, 61, 119, 241, 196, 62, 245, 186, 98, 190, 80, 244, 11, 191, 231, 204, 165, 60, 93, 65, 144, 190, 127, 83, 94, 62, 249, 179, 128, 190, 47, 112, 148, 188, 212, 123, 5, 190, 237, 193, 147, 189, 56, 17, 138, 189, 14, 181, 212, 60, 245, 8, 190, 61, 31, 118, 40, 61, 251, 46, 177, 189, 203, 113, 26, 61, 124, 195, 219, 189, 124, 235, 222, 189, 249, 98, 75, 62, 202, 231, 5, 190, 16, 73, 197, 62, 152, 167, 227, 189, 226, 202, 205, 61, 58, 247, 237, 190, 58, 250, 151, 62, 198, 241, 76, 62, 28, 139, 176, 190, 152, 139, 187, 59, 66, 208, 41, 60, 97, 21, 92, 61, 112, 46, 1, 190, 83, 138, 58, 190, 104, 183, 68, 61, 157, 95, 139, 62, 45, 9, 26, 187, 60, 135, 209, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 247, 135, 189, 158, 123, 166, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {76, 230, 117, 63, 125, 235, 133, 63, 210, 164, 84, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {127, 152, 79, 192, 177, 136, 3, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0080/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}