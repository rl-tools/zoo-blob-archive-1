// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 72, 78, 63, 179, 111, 85, 191, 167, 81, 160, 190, 15, 130, 233, 62, 191, 3, 223, 62, 244, 149, 62, 63, 94, 143, 78, 63, 98, 38, 108, 191, 28, 40, 181, 190, 5, 113, 185, 62, 228, 154, 83, 190, 32, 174, 14, 63, 82, 235, 170, 62, 246, 252, 147, 191, 170, 86, 48, 190, 109, 53, 30, 62, 188, 235, 184, 189, 129, 65, 156, 190, 9, 68, 243, 189, 158, 18, 148, 63, 175, 227, 247, 62, 219, 10, 9, 189, 189, 123, 112, 63, 122, 8, 58, 62, 161, 170, 17, 63, 128, 173, 110, 63, 176, 16, 105, 62, 232, 169, 3, 191, 54, 18, 87, 191, 192, 238, 139, 62, 215, 86, 155, 61, 215, 165, 20, 191, 223, 77, 1, 191, 23, 144, 153, 62, 19, 63, 76, 191, 185, 220, 206, 62, 127, 237, 36, 191, 32, 107, 133, 62, 184, 76, 40, 63, 0, 185, 203, 189, 247, 77, 75, 191, 224, 100, 192, 62, 139, 79, 93, 61, 208, 231, 213, 63, 81, 223, 187, 62, 157, 162, 222, 62, 218, 249, 178, 63, 90, 20, 131, 62, 178, 236, 112, 191, 97, 139, 165, 191, 186, 178, 58, 190, 171, 17, 219, 62, 37, 5, 28, 191, 186, 35, 201, 190, 35, 41, 82, 190, 241, 102, 126, 63, 161, 186, 156, 189, 154, 155, 37, 191, 161, 151, 170, 191, 230, 55, 174, 190, 115, 154, 130, 191, 10, 134, 135, 63, 17, 226, 195, 62, 64, 122, 199, 62, 44, 178, 140, 63, 77, 155, 158, 62, 138, 107, 64, 62, 131, 173, 151, 63, 123, 56, 147, 189, 36, 247, 196, 190, 179, 242, 40, 63, 186, 173, 35, 190, 185, 60, 186, 190, 248, 124, 132, 63, 85, 126, 18, 189, 194, 203, 2, 63, 41, 33, 83, 191, 54, 109, 66, 190, 89, 108, 186, 190, 94, 242, 187, 62, 9, 193, 227, 190, 98, 32, 227, 189, 66, 145, 181, 63, 132, 74, 162, 62, 221, 74, 72, 62, 70, 187, 222, 191, 77, 2, 250, 190, 46, 251, 133, 190, 37, 153, 89, 63, 16, 115, 208, 189, 146, 155, 164, 190, 134, 50, 142, 63, 255, 185, 150, 62, 145, 105, 74, 191, 106, 206, 37, 63, 133, 68, 81, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 147, 23, 191, 131, 176, 153, 190, 189, 162, 26, 191, 225, 162, 123, 188, 21, 178, 31, 189, 50, 48, 17, 62, 29, 232, 16, 62, 232, 130, 193, 62, 192, 209, 14, 191, 157, 242, 105, 190, 122, 187, 119, 190, 245, 183, 8, 63, 86, 183, 15, 190, 176, 11, 8, 62, 173, 251, 2, 62, 191, 40, 147, 190, 30, 44, 165, 62, 43, 0, 99, 62, 31, 118, 104, 189, 20, 209, 153, 190, 172, 157, 38, 62, 35, 73, 240, 62, 19, 82, 255, 62, 115, 0, 49, 61, 95, 167, 55, 61, 18, 220, 81, 62, 144, 210, 30, 190, 44, 202, 200, 189, 185, 121, 168, 189, 85, 241, 5, 63, 123, 197, 131, 190, 199, 171, 116, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 171, 136, 189, 164, 121, 19, 191, 114, 41, 141, 61, 172, 209, 88, 61, 204, 194, 139, 190, 235, 97, 0, 61, 131, 161, 103, 191, 122, 57, 188, 189, 49, 197, 14, 191, 79, 142, 222, 190, 20, 212, 25, 189, 126, 152, 197, 62, 137, 63, 183, 190, 47, 47, 135, 191, 154, 99, 22, 191, 203, 129, 140, 190, 71, 44, 19, 191, 200, 3, 132, 60, 125, 209, 95, 62, 206, 153, 136, 190, 69, 193, 21, 190, 189, 106, 8, 62, 17, 40, 16, 62, 31, 198, 115, 61, 143, 216, 113, 189, 37, 41, 162, 62, 49, 201, 162, 62, 160, 251, 150, 191, 138, 32, 252, 185, 2, 150, 181, 189, 202, 244, 117, 191, 32, 4, 153, 61, 130, 238, 186, 190, 8, 85, 7, 191, 7, 82, 194, 190, 14, 211, 80, 191, 245, 18, 75, 189, 136, 77, 151, 190, 98, 116, 142, 62, 11, 214, 207, 59, 217, 102, 143, 190, 245, 75, 122, 61, 236, 12, 193, 190, 150, 90, 151, 191, 107, 250, 238, 189, 5, 129, 248, 189, 20, 181, 91, 191, 176, 117, 166, 190, 156, 255, 98, 60, 10, 254, 24, 190, 222, 120, 171, 61, 44, 207, 30, 190, 27, 9, 44, 62, 249, 161, 136, 191, 97, 27, 12, 62, 24, 227, 222, 61, 229, 32, 186, 60, 44, 171, 47, 190, 14, 237, 247, 190, 248, 56, 199, 62, 125, 121, 21, 191, 156, 13, 154, 62, 234, 23, 30, 62, 226, 214, 122, 61, 162, 245, 7, 191, 86, 167, 138, 190, 12, 248, 51, 191, 208, 229, 32, 189, 44, 183, 213, 190, 94, 99, 64, 62, 163, 209, 14, 62, 179, 238, 166, 62, 163, 94, 200, 190, 115, 209, 132, 62, 3, 88, 140, 189, 156, 195, 89, 61, 95, 196, 36, 62, 22, 53, 21, 62, 183, 228, 33, 59, 157, 15, 41, 189, 236, 20, 52, 191, 119, 86, 191, 61, 59, 166, 157, 189, 195, 2, 211, 187, 1, 8, 51, 62, 66, 184, 69, 62, 11, 110, 151, 61, 184, 129, 142, 62, 172, 238, 169, 61, 164, 73, 105, 188, 48, 9, 150, 188, 122, 83, 234, 189, 95, 252, 37, 191, 144, 106, 127, 62, 49, 241, 203, 188, 200, 26, 123, 62, 96, 86, 243, 189, 254, 240, 182, 189, 57, 154, 3, 190, 89, 227, 19, 190, 97, 93, 31, 190, 223, 16, 163, 189, 223, 57, 253, 187, 65, 237, 2, 190, 248, 195, 114, 188, 41, 183, 6, 190, 252, 68, 215, 60, 40, 180, 135, 61, 252, 40, 14, 189, 203, 140, 42, 61, 48, 251, 5, 62, 99, 171, 105, 189, 92, 87, 225, 60, 246, 218, 4, 190, 119, 29, 27, 62, 244, 23, 168, 188, 240, 214, 27, 190, 78, 164, 25, 62, 212, 145, 35, 190, 23, 62, 27, 190, 225, 238, 76, 61, 191, 238, 21, 62, 183, 224, 255, 61, 252, 3, 243, 61, 57, 211, 157, 189, 116, 147, 7, 190, 98, 198, 54, 61, 217, 6, 181, 61, 210, 163, 7, 190, 10, 43, 69, 60, 3, 220, 46, 61, 7, 118, 190, 61, 20, 83, 51, 62, 222, 221, 128, 189, 2, 233, 230, 189, 158, 58, 114, 188, 0, 39, 231, 187, 56, 188, 28, 190, 31, 218, 181, 61, 248, 118, 17, 188, 82, 179, 136, 61, 83, 241, 40, 190, 131, 62, 94, 190, 6, 148, 231, 61, 195, 181, 139, 188, 197, 73, 203, 189, 71, 194, 197, 61, 121, 11, 153, 61, 62, 82, 223, 61, 13, 113, 25, 188, 172, 65, 111, 60, 136, 86, 194, 61, 218, 92, 130, 189, 182, 226, 33, 190, 139, 41, 234, 189, 221, 73, 25, 61, 199, 108, 122, 189, 195, 54, 46, 190, 188, 191, 147, 61, 207, 186, 44, 190, 199, 56, 167, 61, 174, 192, 207, 190, 79, 217, 42, 62, 63, 23, 196, 189, 127, 39, 110, 188, 155, 123, 144, 61, 149, 251, 34, 190, 212, 47, 251, 189, 124, 117, 184, 191, 176, 196, 227, 62, 132, 45, 237, 61, 47, 124, 14, 62, 81, 110, 139, 62, 51, 82, 191, 62, 63, 20, 198, 190, 4, 125, 21, 191, 234, 46, 68, 62, 225, 63, 68, 62, 23, 76, 30, 190, 205, 183, 37, 190, 36, 127, 177, 62, 248, 136, 162, 61, 100, 74, 1, 190, 102, 231, 194, 61, 107, 178, 209, 190, 156, 58, 166, 62, 116, 212, 216, 188, 187, 54, 133, 190, 18, 58, 28, 62, 108, 106, 236, 60, 25, 243, 232, 62, 156, 89, 169, 62, 213, 15, 128, 62, 245, 144, 119, 61, 35, 8, 3, 62, 150, 114, 5, 62, 167, 184, 156, 62, 209, 125, 150, 62, 65, 215, 221, 189, 180, 5, 15, 61, 122, 182, 182, 190, 80, 119, 140, 62, 118, 52, 149, 190, 171, 24, 105, 62, 70, 77, 48, 62, 247, 105, 192, 62, 249, 178, 101, 61, 24, 180, 6, 190, 213, 179, 169, 190, 185, 109, 125, 190, 105, 131, 111, 62, 59, 59, 198, 61, 5, 156, 86, 189, 222, 13, 157, 190, 219, 166, 126, 189, 221, 72, 197, 62, 5, 239, 131, 62, 222, 147, 73, 62, 193, 35, 39, 190, 178, 251, 212, 61, 174, 117, 214, 190, 85, 234, 45, 61, 159, 96, 56, 62, 13, 154, 242, 62, 162, 38, 240, 189, 221, 66, 209, 189, 76, 68, 209, 189, 220, 150, 23, 190, 177, 98, 190, 189, 39, 128, 95, 189, 215, 142, 10, 61, 80, 19, 223, 60, 98, 186, 47, 62, 154, 214, 71, 189, 183, 178, 205, 189, 127, 144, 22, 62, 16, 239, 227, 189, 79, 25, 209, 61, 249, 137, 45, 190, 57, 165, 171, 189, 152, 126, 112, 189, 236, 145, 63, 189, 101, 133, 234, 189, 139, 168, 12, 62, 28, 141, 134, 189, 241, 52, 89, 189, 34, 101, 75, 61, 226, 64, 30, 190, 155, 82, 4, 62, 1, 23, 97, 189, 51, 184, 252, 189, 165, 217, 26, 188, 10, 76, 210, 189, 196, 212, 240, 189, 9, 228, 224, 188, 58, 254, 219, 187, 41, 18, 195, 188, 208, 127, 63, 189, 132, 229, 13, 62, 242, 172, 246, 188, 97, 120, 69, 190, 238, 211, 147, 188, 107, 15, 222, 187, 129, 154, 1, 190, 178, 139, 188, 61, 152, 248, 40, 189, 210, 22, 70, 189, 174, 110, 10, 60, 130, 71, 147, 61, 95, 79, 33, 190, 241, 224, 7, 190, 35, 132, 213, 60, 195, 87, 43, 190, 178, 4, 78, 61, 160, 214, 5, 189, 189, 206, 236, 189, 182, 192, 250, 61, 159, 212, 230, 61, 23, 92, 51, 189, 132, 153, 146, 61, 12, 146, 46, 62, 105, 41, 13, 59, 25, 188, 31, 190, 10, 63, 17, 190, 211, 243, 215, 60, 98, 89, 64, 190, 170, 123, 12, 190, 85, 23, 242, 189, 243, 236, 95, 187, 7, 254, 16, 62, 124, 188, 236, 188, 165, 211, 192, 61, 47, 47, 117, 190, 11, 241, 223, 61, 90, 42, 241, 59, 235, 246, 100, 62, 165, 77, 15, 62, 194, 249, 187, 190, 7, 156, 245, 189, 43, 246, 240, 189, 87, 94, 85, 190, 198, 169, 75, 190, 64, 80, 192, 62, 140, 25, 225, 62, 62, 230, 17, 62, 170, 145, 55, 190, 230, 46, 28, 60, 190, 247, 47, 63, 165, 149, 175, 191, 169, 186, 218, 61, 178, 30, 9, 61, 236, 151, 212, 190, 210, 238, 92, 190, 137, 162, 136, 190, 163, 51, 31, 62, 113, 178, 141, 191, 143, 131, 60, 62, 171, 27, 184, 61, 76, 119, 156, 191, 8, 206, 214, 190, 106, 195, 151, 189, 77, 153, 57, 60, 139, 61, 117, 61, 188, 114, 26, 190, 5, 22, 223, 189, 68, 234, 232, 190, 77, 78, 123, 62, 8, 230, 68, 62, 136, 114, 40, 189, 212, 229, 194, 190, 56, 161, 232, 190, 110, 91, 53, 191, 87, 230, 191, 189, 207, 223, 221, 190, 87, 154, 30, 190, 144, 16, 42, 62, 64, 33, 1, 63, 77, 66, 10, 191, 251, 17, 8, 63, 98, 52, 212, 188, 77, 213, 146, 62, 71, 30, 7, 191, 88, 126, 195, 62, 111, 16, 29, 62, 73, 39, 233, 62, 11, 133, 72, 191, 57, 114, 200, 190, 3, 73, 227, 62, 49, 77, 22, 191, 103, 232, 81, 62, 206, 242, 40, 62, 99, 94, 152, 62, 15, 56, 94, 62, 144, 220, 124, 189, 222, 193, 218, 60, 134, 77, 154, 62, 72, 255, 200, 62, 4, 135, 166, 188, 246, 251, 10, 62, 219, 188, 74, 61, 221, 103, 82, 189, 0, 110, 239, 188, 86, 216, 50, 191, 104, 219, 153, 62, 65, 120, 167, 62, 4, 222, 142, 62, 94, 125, 141, 189, 234, 240, 139, 188, 213, 229, 248, 190, 218, 63, 83, 190, 62, 5, 51, 62, 243, 218, 21, 191, 163, 80, 118, 61, 72, 110, 134, 190, 96, 8, 154, 190, 182, 22, 240, 62, 44, 159, 209, 61, 180, 80, 11, 62, 233, 16, 79, 191, 246, 44, 32, 58, 40, 226, 103, 62, 53, 147, 156, 190, 233, 191, 21, 62, 191, 189, 9, 190, 160, 115, 49, 191, 61, 37, 158, 62, 87, 183, 26, 190, 9, 76, 36, 61, 164, 149, 116, 190, 167, 197, 1, 62, 230, 148, 207, 189, 58, 250, 246, 189, 125, 56, 158, 190, 148, 142, 134, 61, 169, 191, 109, 190, 98, 234, 159, 62, 168, 206, 153, 190, 101, 107, 163, 62, 127, 36, 172, 62, 158, 230, 160, 62, 106, 187, 44, 190, 203, 17, 156, 190, 152, 97, 168, 62, 140, 230, 43, 62, 16, 83, 42, 191, 4, 181, 158, 62, 130, 65, 44, 62, 166, 2, 109, 189, 1, 185, 217, 61, 142, 11, 190, 61, 232, 164, 114, 62, 115, 42, 117, 191, 45, 134, 136, 61, 129, 161, 229, 189, 217, 25, 158, 191, 26, 229, 208, 189, 78, 89, 165, 62, 16, 221, 190, 189, 51, 55, 170, 62, 183, 42, 30, 190, 91, 97, 74, 62, 67, 199, 12, 189, 252, 5, 50, 62, 190, 112, 34, 62, 65, 148, 13, 62, 135, 248, 194, 62, 90, 84, 167, 189, 144, 22, 151, 62, 200, 172, 135, 62, 210, 107, 112, 62, 4, 92, 157, 189, 226, 210, 50, 190, 74, 6, 221, 62, 233, 100, 151, 61, 233, 97, 160, 61, 210, 163, 119, 190, 14, 45, 137, 62, 14, 194, 4, 189, 210, 215, 71, 62, 143, 208, 44, 63, 146, 36, 1, 190, 154, 59, 135, 62, 232, 204, 118, 191, 213, 227, 139, 62, 218, 199, 64, 190, 152, 66, 2, 62, 222, 31, 16, 63, 60, 186, 167, 61, 122, 234, 94, 189, 146, 4, 131, 189, 139, 94, 135, 189, 216, 186, 25, 60, 196, 212, 60, 62, 146, 146, 68, 190, 171, 23, 62, 62, 4, 181, 190, 60, 255, 64, 84, 191, 140, 21, 14, 63, 97, 118, 13, 191, 128, 20, 165, 190, 211, 59, 91, 62, 127, 247, 129, 62, 32, 65, 19, 191, 48, 87, 214, 190, 239, 255, 69, 63, 105, 72, 214, 190, 94, 91, 142, 61, 42, 129, 203, 62, 204, 42, 132, 61, 81, 153, 181, 190, 170, 14, 171, 189, 249, 63, 198, 62, 245, 79, 245, 61, 68, 244, 145, 61, 14, 206, 200, 190, 67, 184, 77, 61, 48, 49, 189, 190, 163, 75, 139, 62, 24, 255, 190, 189, 44, 5, 78, 62, 35, 160, 35, 190, 91, 232, 65, 61, 222, 129, 200, 190, 252, 198, 142, 62, 237, 148, 94, 188, 160, 16, 249, 60, 51, 67, 72, 61, 253, 77, 250, 61, 172, 174, 37, 61, 66, 145, 6, 190, 200, 78, 75, 61, 185, 23, 240, 61, 23, 112, 224, 188, 19, 252, 50, 190, 23, 25, 24, 188, 176, 28, 188, 189, 173, 104, 247, 61, 146, 148, 99, 189, 173, 37, 196, 62, 249, 26, 106, 62, 202, 125, 187, 189, 245, 23, 142, 187, 44, 134, 137, 62, 170, 210, 56, 190, 95, 115, 182, 62, 70, 15, 40, 190, 73, 240, 103, 62, 44, 207, 203, 189, 199, 98, 89, 190, 5, 255, 87, 62, 25, 181, 224, 189, 247, 34, 146, 189, 19, 138, 70, 191, 95, 105, 119, 61, 214, 108, 28, 191, 13, 90, 2, 62, 181, 152, 138, 191, 33, 229, 178, 62, 139, 2, 73, 189, 152, 69, 176, 62, 193, 64, 3, 61, 203, 191, 160, 189, 205, 79, 185, 190, 247, 23, 140, 189, 74, 195, 9, 190, 146, 39, 220, 188, 95, 24, 144, 62, 101, 10, 12, 62, 187, 243, 56, 190, 244, 18, 189, 189, 242, 215, 36, 190, 9, 52, 145, 62, 188, 83, 114, 189, 109, 0, 3, 63, 254, 152, 34, 62, 220, 24, 227, 61, 223, 140, 10, 62, 214, 71, 13, 191, 44, 121, 186, 62, 47, 111, 129, 189, 186, 127, 53, 190, 196, 103, 137, 62, 39, 147, 59, 190, 39, 242, 215, 189, 8, 126, 185, 61, 51, 92, 34, 190, 42, 91, 29, 190, 58, 248, 107, 59, 190, 190, 4, 190, 127, 121, 38, 190, 60, 97, 87, 59, 65, 112, 63, 190, 112, 212, 12, 62, 71, 167, 151, 188, 142, 56, 47, 188, 98, 222, 17, 190, 117, 22, 16, 190, 11, 32, 146, 189, 132, 3, 60, 61, 204, 116, 153, 61, 94, 14, 182, 189, 167, 6, 136, 61, 212, 87, 216, 189, 234, 226, 185, 60, 110, 68, 1, 190, 69, 28, 199, 189, 19, 157, 17, 62, 161, 75, 217, 61, 179, 170, 219, 61, 35, 130, 131, 61, 72, 95, 52, 190, 115, 180, 77, 61, 240, 81, 59, 189, 69, 229, 187, 188, 39, 186, 155, 61, 97, 187, 253, 184, 4, 63, 52, 59, 39, 246, 43, 61, 123, 180, 41, 60, 237, 132, 56, 190, 64, 107, 137, 189, 160, 62, 166, 61, 253, 167, 23, 188, 181, 7, 49, 190, 233, 55, 192, 188, 224, 54, 113, 190, 70, 25, 142, 61, 19, 5, 172, 61, 5, 115, 29, 62, 104, 124, 222, 61, 234, 122, 45, 190, 244, 19, 196, 186, 60, 138, 250, 189, 39, 224, 92, 189, 81, 222, 41, 189, 24, 78, 254, 189, 60, 88, 96, 188, 11, 15, 1, 61, 130, 161, 189, 188, 187, 11, 221, 60, 129, 189, 195, 61, 251, 67, 8, 190, 72, 64, 26, 188, 80, 78, 132, 189, 240, 39, 131, 61, 89, 246, 22, 190, 233, 201, 70, 189, 161, 186, 144, 60, 232, 73, 203, 189, 46, 209, 193, 61, 204, 46, 53, 62, 34, 6, 163, 61, 12, 180, 224, 61, 175, 204, 24, 62, 104, 242, 140, 190, 24, 43, 136, 186, 90, 153, 145, 189, 36, 107, 67, 190, 53, 227, 93, 190, 8, 35, 196, 61, 92, 17, 190, 190, 82, 89, 250, 188, 219, 20, 118, 60, 86, 177, 10, 60, 74, 221, 158, 61, 9, 129, 161, 59, 244, 5, 90, 189, 177, 253, 0, 63, 164, 4, 73, 191, 43, 183, 238, 62, 88, 145, 120, 62, 115, 8, 215, 190, 67, 54, 235, 189, 136, 209, 166, 62, 253, 174, 121, 59, 227, 23, 14, 191, 250, 73, 37, 62, 11, 182, 247, 61, 43, 246, 131, 190, 148, 128, 144, 190, 59, 190, 86, 62, 33, 145, 181, 190, 104, 97, 112, 61, 250, 159, 142, 190, 146, 97, 22, 62, 216, 147, 130, 189, 95, 146, 128, 189, 37, 209, 61, 62, 241, 232, 7, 191, 237, 173, 81, 190, 19, 207, 105, 60, 223, 195, 120, 191, 147, 29, 255, 190, 122, 1, 157, 189, 236, 165, 64, 188, 68, 173, 144, 190, 167, 95, 165, 189, 85, 107, 206, 60, 17, 3, 119, 62, 79, 57, 195, 61, 230, 229, 201, 190, 111, 63, 144, 62, 229, 255, 109, 62, 184, 62, 140, 62, 237, 209, 192, 61, 136, 0, 22, 190, 136, 202, 141, 61, 16, 16, 205, 190, 185, 221, 132, 190, 131, 242, 147, 189, 130, 253, 4, 61, 173, 98, 11, 62, 233, 176, 15, 191, 62, 50, 156, 190, 154, 129, 146, 190, 0, 100, 136, 190, 113, 50, 220, 189, 196, 13, 6, 62, 53, 253, 7, 191, 63, 241, 254, 62, 161, 72, 84, 61, 46, 115, 42, 191, 19, 13, 176, 189, 36, 220, 191, 190, 29, 60, 92, 191, 80, 34, 39, 191, 69, 168, 20, 62, 238, 17, 222, 61, 227, 246, 8, 63, 145, 116, 168, 189, 18, 243, 132, 62, 247, 13, 25, 63, 28, 31, 228, 191, 18, 201, 228, 62, 110, 154, 231, 61, 151, 184, 186, 190, 226, 143, 106, 62, 133, 12, 176, 190, 205, 226, 200, 62, 162, 184, 168, 191, 15, 75, 153, 62, 224, 149, 149, 61, 181, 47, 166, 191, 205, 141, 20, 191, 35, 23, 194, 190, 89, 166, 201, 190, 242, 30, 6, 191, 112, 8, 80, 190, 249, 218, 28, 191, 91, 121, 22, 60, 15, 55, 235, 189, 94, 93, 187, 61, 23, 220, 56, 189, 144, 56, 31, 191, 207, 4, 240, 189, 253, 192, 18, 61, 217, 247, 66, 191, 63, 139, 34, 191, 244, 83, 164, 188, 251, 183, 25, 62, 19, 87, 164, 61, 157, 234, 175, 189, 22, 53, 72, 62, 169, 72, 252, 62, 113, 86, 204, 191, 115, 241, 123, 62, 58, 72, 1, 62, 239, 80, 6, 190, 237, 157, 13, 62, 114, 206, 28, 189, 87, 104, 30, 62, 43, 242, 114, 191, 92, 213, 13, 190, 180, 187, 9, 62, 93, 127, 158, 191, 77, 31, 52, 189, 130, 126, 31, 62, 112, 141, 7, 191, 226, 114, 249, 60, 139, 124, 81, 190, 29, 193, 109, 62, 109, 98, 145, 62, 141, 7, 173, 189, 34, 222, 151, 190, 231, 153, 194, 191, 162, 107, 32, 63, 36, 118, 145, 61, 112, 33, 161, 62, 163, 32, 139, 62, 193, 207, 26, 62, 145, 102, 44, 191, 29, 120, 33, 191, 32, 3, 44, 62, 192, 222, 237, 60, 38, 226, 170, 190, 89, 110, 142, 190, 133, 66, 140, 62, 124, 18, 8, 189, 61, 98, 4, 190, 151, 143, 139, 62, 86, 74, 225, 189, 87, 75, 231, 62, 109, 9, 160, 189, 135, 143, 67, 190, 33, 38, 87, 61, 226, 29, 188, 61, 113, 66, 194, 61, 23, 150, 198, 61, 49, 167, 98, 190, 220, 25, 148, 188, 140, 134, 228, 189, 89, 178, 63, 189, 54, 26, 189, 62, 44, 60, 126, 60, 248, 137, 228, 190, 216, 90, 33, 191, 163, 138, 211, 190, 127, 132, 107, 61, 130, 17, 138, 190, 226, 204, 138, 62, 255, 99, 93, 190, 52, 10, 155, 60, 116, 201, 138, 190, 249, 22, 137, 190, 63, 46, 200, 190, 33, 64, 18, 190, 149, 169, 204, 60, 31, 94, 30, 191, 12, 189, 108, 59, 56, 138, 245, 61, 222, 114, 224, 190, 13, 201, 130, 189, 161, 106, 45, 190, 72, 201, 193, 62, 78, 28, 248, 189, 97, 123, 222, 189, 252, 75, 240, 61, 131, 109, 140, 190, 15, 216, 201, 61, 137, 87, 197, 62, 90, 230, 155, 61, 119, 65, 73, 190, 233, 134, 93, 190, 140, 244, 24, 190, 65, 117, 30, 189, 2, 78, 6, 62, 25, 90, 158, 188, 242, 64, 68, 189, 17, 98, 221, 61, 165, 115, 170, 188, 92, 141, 47, 190, 58, 115, 197, 189, 63, 7, 37, 189, 171, 145, 244, 188, 170, 10, 94, 188, 189, 79, 37, 61, 251, 0, 101, 189, 141, 241, 198, 189, 221, 27, 208, 59, 188, 200, 160, 189, 6, 117, 139, 61, 187, 144, 196, 61, 122, 70, 221, 60, 2, 209, 205, 188, 235, 35, 11, 190, 101, 210, 78, 190, 128, 64, 129, 189, 1, 211, 220, 189, 198, 206, 71, 61, 25, 32, 28, 190, 236, 52, 173, 189, 98, 33, 239, 61, 117, 159, 8, 61, 111, 127, 24, 190, 4, 183, 73, 62, 253, 45, 202, 61, 56, 185, 151, 61, 39, 212, 62, 62, 240, 215, 156, 62, 212, 191, 66, 62, 20, 222, 196, 61, 64, 146, 160, 189, 47, 255, 146, 61, 189, 163, 167, 61, 155, 103, 59, 62, 7, 67, 133, 190, 210, 155, 150, 189, 169, 198, 57, 189, 103, 171, 180, 188, 21, 15, 131, 62, 244, 211, 191, 62, 125, 217, 188, 190, 230, 200, 156, 62, 105, 3, 86, 61, 155, 178, 29, 62, 206, 74, 61, 62, 23, 118, 72, 62, 112, 251, 57, 62, 135, 75, 32, 62, 164, 39, 73, 62, 112, 126, 111, 188, 246, 182, 28, 189, 251, 39, 152, 62, 56, 163, 176, 62, 12, 165, 91, 190, 69, 255, 236, 60, 245, 24, 43, 190, 143, 214, 227, 60, 179, 6, 179, 190, 152, 81, 106, 61, 28, 112, 174, 61, 116, 69, 61, 62, 141, 225, 188, 189, 108, 60, 16, 62, 70, 119, 115, 61, 231, 127, 238, 61, 92, 251, 48, 61, 237, 100, 236, 61, 144, 2, 168, 189, 91, 102, 182, 188, 87, 15, 221, 61, 228, 66, 10, 62, 150, 5, 7, 62, 159, 73, 141, 190, 73, 243, 240, 60, 186, 199, 63, 60, 139, 201, 145, 62, 141, 121, 171, 61, 112, 207, 181, 189, 70, 253, 150, 189, 239, 183, 16, 60, 215, 33, 0, 62, 226, 45, 165, 190, 239, 62, 35, 62, 218, 2, 221, 59, 67, 103, 174, 62, 207, 36, 207, 60, 56, 25, 134, 190, 212, 156, 129, 61, 83, 249, 92, 190, 59, 255, 93, 62, 6, 97, 96, 62, 180, 26, 228, 60, 58, 244, 107, 190, 177, 229, 1, 190, 129, 178, 24, 63, 243, 137, 229, 61, 130, 105, 80, 189, 207, 249, 244, 62, 23, 114, 161, 62, 123, 200, 131, 190, 37, 3, 210, 190, 55, 14, 181, 61, 170, 124, 243, 61, 194, 181, 93, 190, 109, 222, 4, 190, 94, 175, 170, 62, 129, 215, 102, 188, 81, 85, 70, 62, 116, 104, 131, 62, 106, 240, 136, 190, 216, 240, 255, 61, 209, 36, 96, 190, 119, 174, 146, 62, 115, 64, 178, 61, 232, 88, 95, 60, 186, 110, 176, 62, 203, 25, 47, 189, 157, 90, 24, 63, 247, 37, 29, 190, 148, 188, 136, 62, 139, 222, 118, 62, 122, 144, 14, 63, 30, 218, 76, 59, 179, 119, 176, 189, 217, 55, 213, 190, 235, 120, 31, 190, 204, 104, 75, 62, 31, 173, 43, 62, 185, 85, 38, 62, 145, 97, 42, 62, 207, 19, 163, 62, 78, 9, 3, 189, 243, 144, 231, 190, 186, 16, 219, 189, 36, 180, 78, 62, 211, 214, 217, 60, 254, 156, 18, 190, 9, 56, 211, 60, 135, 19, 42, 190, 149, 123, 83, 190, 0, 87, 30, 190, 60, 184, 80, 62, 104, 124, 135, 62, 248, 175, 165, 190, 46, 223, 190, 61, 33, 248, 154, 60, 227, 228, 40, 191, 118, 59, 161, 61, 44, 242, 60, 191, 176, 41, 254, 190, 16, 32, 187, 189, 60, 221, 11, 191, 50, 159, 101, 61, 9, 159, 62, 191, 131, 30, 57, 62, 0, 127, 148, 61, 130, 48, 183, 62, 206, 87, 65, 189, 138, 2, 100, 190, 93, 209, 139, 189, 217, 198, 202, 61, 83, 132, 208, 189, 200, 223, 98, 190, 244, 179, 120, 62, 69, 163, 56, 62, 207, 43, 78, 61, 47, 246, 58, 190, 155, 220, 133, 61, 153, 105, 25, 63, 234, 244, 50, 191, 243, 180, 111, 62, 229, 176, 97, 58, 246, 171, 104, 190, 83, 74, 121, 62, 125, 122, 101, 190, 86, 159, 179, 62, 249, 59, 4, 191, 118, 55, 89, 190, 175, 39, 124, 62, 199, 139, 177, 190, 4, 247, 150, 190, 149, 107, 243, 190, 197, 217, 91, 190, 26, 70, 150, 190, 188, 48, 209, 190, 0, 218, 1, 191, 23, 100, 221, 61, 149, 115, 27, 61, 126, 88, 155, 61, 179, 27, 103, 62, 200, 238, 14, 59, 137, 153, 163, 61, 196, 17, 134, 190, 163, 207, 136, 190, 24, 44, 205, 188, 249, 211, 50, 62, 40, 244, 66, 61, 224, 170, 130, 62, 204, 100, 48, 61, 86, 215, 78, 189, 28, 67, 104, 61, 138, 218, 61, 190, 131, 183, 134, 62, 68, 71, 16, 62, 7, 248, 98, 61, 179, 148, 119, 190, 78, 129, 60, 60, 157, 221, 191, 189, 40, 137, 14, 191, 122, 211, 51, 191, 120, 138, 134, 62, 234, 227, 2, 191, 221, 197, 52, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 39, 160, 187, 94, 82, 26, 61, 65, 195, 209, 60, 90, 238, 183, 189, 66, 23, 109, 189, 36, 227, 60, 62, 23, 130, 4, 61, 217, 243, 92, 189, 138, 47, 188, 189, 57, 157, 186, 189, 28, 172, 63, 62, 20, 137, 23, 62, 253, 240, 129, 62, 105, 18, 150, 62, 223, 133, 115, 62, 158, 75, 67, 62, 65, 40, 82, 188, 183, 7, 46, 190, 40, 180, 144, 189, 111, 21, 28, 60, 32, 251, 61, 190, 6, 133, 122, 60, 201, 120, 139, 62, 197, 118, 82, 62, 61, 255, 251, 61, 37, 89, 254, 188, 139, 44, 167, 59, 144, 122, 118, 62, 203, 106, 39, 62, 53, 22, 199, 188, 231, 223, 39, 62, 217, 10, 207, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 137, 186, 62, 110, 89, 199, 63, 19, 79, 181, 190, 94, 202, 44, 190, 189, 254, 46, 190, 203, 73, 217, 62, 241, 1, 22, 190, 201, 68, 253, 60, 147, 119, 164, 189, 166, 89, 163, 190, 37, 61, 140, 63, 177, 56, 148, 190, 212, 14, 3, 191, 32, 19, 160, 62, 188, 231, 138, 63, 47, 149, 165, 60, 24, 64, 65, 190, 11, 237, 255, 61, 19, 135, 35, 189, 177, 168, 76, 190, 233, 154, 132, 190, 16, 22, 172, 191, 123, 131, 36, 191, 250, 112, 43, 63, 86, 154, 206, 190, 78, 213, 23, 59, 188, 171, 50, 62, 206, 118, 118, 61, 90, 159, 134, 62, 232, 159, 7, 191, 66, 20, 13, 191, 251, 115, 215, 190, 197, 86, 131, 190, 26, 209, 18, 61, 230, 182, 116, 190, 47, 112, 148, 188, 222, 121, 5, 190, 111, 28, 40, 190, 155, 108, 146, 189, 14, 181, 212, 60, 245, 8, 190, 61, 19, 47, 136, 190, 244, 47, 89, 62, 214, 88, 1, 62, 7, 73, 102, 190, 83, 114, 244, 189, 118, 243, 69, 62, 220, 149, 92, 190, 12, 171, 2, 63, 24, 33, 232, 189, 170, 38, 104, 61, 163, 1, 26, 191, 29, 88, 162, 62, 36, 79, 149, 62, 88, 124, 165, 190, 226, 123, 99, 61, 119, 27, 114, 62, 42, 51, 161, 61, 143, 105, 0, 190, 210, 228, 123, 190, 16, 229, 247, 60, 202, 225, 96, 62, 6, 218, 38, 190, 235, 177, 102, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 33, 54, 189, 1, 211, 218, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {81, 5, 107, 191, 182, 73, 192, 191, 144, 64, 150, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {245, 11, 225, 64, 136, 162, 133, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0080/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}