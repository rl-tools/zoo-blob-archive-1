// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 107, 164, 62, 196, 28, 249, 190, 70, 175, 182, 190, 156, 142, 86, 62, 84, 241, 158, 62, 148, 182, 18, 63, 0, 84, 185, 62, 236, 174, 31, 191, 243, 89, 243, 190, 99, 113, 179, 62, 209, 101, 20, 190, 153, 123, 5, 63, 109, 56, 94, 61, 205, 39, 74, 191, 181, 187, 162, 189, 3, 253, 222, 61, 158, 159, 177, 189, 24, 143, 91, 190, 130, 205, 154, 61, 156, 233, 177, 62, 174, 98, 4, 63, 35, 5, 131, 61, 241, 213, 38, 63, 121, 196, 193, 61, 253, 197, 99, 62, 189, 136, 59, 62, 205, 12, 71, 62, 18, 98, 153, 190, 150, 195, 91, 191, 128, 62, 51, 62, 83, 225, 191, 188, 23, 79, 27, 190, 193, 92, 21, 191, 156, 55, 25, 63, 5, 212, 243, 190, 41, 139, 54, 62, 114, 24, 233, 190, 100, 75, 92, 191, 155, 51, 236, 62, 253, 153, 156, 190, 184, 52, 100, 191, 85, 54, 22, 62, 13, 228, 137, 62, 99, 230, 162, 62, 246, 13, 0, 63, 82, 154, 167, 62, 119, 205, 150, 62, 96, 102, 216, 62, 228, 37, 41, 191, 121, 233, 130, 190, 40, 12, 24, 190, 122, 18, 14, 63, 118, 138, 141, 189, 222, 242, 208, 190, 91, 141, 19, 191, 216, 248, 114, 63, 29, 160, 233, 60, 81, 32, 43, 191, 104, 189, 148, 190, 152, 119, 84, 190, 102, 76, 22, 191, 226, 163, 164, 190, 172, 172, 213, 62, 227, 76, 69, 63, 45, 82, 161, 189, 106, 221, 107, 62, 95, 187, 181, 62, 14, 141, 74, 63, 73, 93, 224, 61, 44, 108, 186, 60, 174, 196, 245, 62, 183, 222, 190, 189, 62, 152, 5, 191, 16, 158, 63, 63, 139, 152, 180, 61, 203, 179, 234, 62, 70, 113, 8, 191, 159, 210, 177, 189, 163, 169, 161, 190, 12, 4, 122, 63, 24, 238, 70, 190, 11, 123, 185, 190, 10, 90, 241, 61, 102, 50, 89, 62, 216, 10, 154, 190, 107, 142, 110, 190, 71, 51, 175, 190, 209, 175, 145, 190, 100, 170, 19, 63, 89, 91, 150, 189, 198, 41, 139, 190, 192, 147, 1, 191, 35, 98, 18, 62, 254, 86, 10, 190, 34, 93, 74, 63, 87, 136, 64, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 31, 21, 191, 107, 59, 10, 191, 158, 25, 4, 191, 129, 136, 110, 190, 130, 5, 68, 61, 93, 44, 249, 62, 192, 87, 97, 62, 164, 133, 255, 62, 188, 223, 197, 190, 20, 28, 40, 190, 174, 175, 214, 190, 225, 93, 197, 62, 86, 79, 113, 190, 129, 80, 72, 190, 170, 254, 118, 190, 190, 22, 170, 190, 43, 107, 214, 62, 68, 155, 187, 62, 78, 9, 206, 188, 33, 116, 81, 190, 195, 121, 219, 190, 100, 164, 184, 189, 23, 148, 72, 63, 72, 7, 31, 190, 238, 78, 234, 188, 207, 26, 211, 62, 21, 202, 197, 61, 34, 30, 24, 190, 1, 123, 2, 63, 123, 5, 18, 63, 94, 96, 35, 190, 50, 142, 147, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 145, 48, 61, 230, 156, 32, 61, 249, 245, 169, 61, 248, 75, 186, 189, 217, 125, 228, 189, 153, 28, 157, 188, 17, 122, 206, 189, 164, 185, 34, 59, 167, 242, 136, 61, 135, 85, 177, 188, 247, 55, 84, 189, 155, 221, 143, 62, 123, 20, 26, 189, 242, 150, 79, 190, 240, 129, 141, 190, 1, 154, 20, 188, 200, 2, 42, 190, 35, 32, 50, 61, 156, 113, 216, 61, 74, 67, 136, 189, 56, 38, 49, 60, 218, 74, 50, 62, 42, 45, 50, 62, 127, 219, 25, 61, 72, 144, 12, 190, 11, 28, 148, 62, 151, 236, 85, 62, 4, 120, 94, 190, 249, 86, 216, 61, 73, 211, 119, 189, 210, 220, 118, 190, 114, 79, 141, 60, 176, 161, 126, 190, 64, 48, 135, 190, 84, 204, 177, 190, 37, 55, 209, 190, 50, 70, 189, 60, 53, 68, 215, 189, 143, 232, 206, 61, 197, 15, 24, 190, 185, 157, 185, 189, 170, 91, 130, 62, 99, 149, 35, 189, 40, 109, 7, 191, 34, 252, 80, 62, 108, 35, 68, 62, 46, 28, 53, 190, 19, 122, 220, 189, 215, 206, 166, 61, 146, 135, 200, 61, 39, 224, 3, 190, 205, 206, 240, 61, 61, 169, 213, 61, 192, 174, 58, 190, 223, 6, 105, 59, 110, 129, 97, 189, 227, 60, 47, 190, 50, 125, 147, 189, 72, 170, 192, 190, 132, 40, 24, 62, 144, 123, 179, 189, 72, 183, 94, 62, 249, 11, 60, 62, 87, 199, 230, 189, 28, 158, 203, 189, 52, 92, 31, 190, 253, 55, 58, 190, 54, 142, 144, 61, 24, 79, 34, 188, 131, 23, 21, 62, 86, 105, 35, 62, 199, 185, 63, 62, 209, 245, 239, 189, 71, 101, 142, 62, 64, 169, 93, 61, 169, 113, 157, 61, 85, 107, 14, 62, 230, 21, 248, 61, 199, 117, 235, 60, 31, 134, 62, 61, 25, 59, 99, 190, 42, 111, 151, 61, 94, 131, 135, 190, 112, 98, 211, 189, 100, 248, 53, 62, 148, 111, 9, 62, 30, 228, 103, 189, 119, 221, 50, 62, 33, 207, 227, 189, 51, 157, 243, 61, 18, 65, 44, 187, 1, 146, 4, 189, 33, 170, 252, 189, 209, 221, 177, 61, 204, 83, 8, 62, 200, 8, 169, 61, 96, 86, 243, 189, 254, 240, 182, 189, 57, 154, 3, 190, 89, 227, 19, 190, 97, 93, 31, 190, 223, 16, 163, 189, 223, 57, 253, 187, 65, 237, 2, 190, 248, 195, 114, 188, 41, 183, 6, 190, 252, 68, 215, 60, 40, 180, 135, 61, 252, 40, 14, 189, 203, 140, 42, 61, 48, 251, 5, 62, 99, 171, 105, 189, 92, 87, 225, 60, 246, 218, 4, 190, 119, 29, 27, 62, 244, 23, 168, 188, 240, 214, 27, 190, 78, 164, 25, 62, 212, 145, 35, 190, 23, 62, 27, 190, 225, 238, 76, 61, 191, 238, 21, 62, 183, 224, 255, 61, 252, 3, 243, 61, 57, 211, 157, 189, 116, 147, 7, 190, 98, 198, 54, 61, 217, 6, 181, 61, 210, 163, 7, 190, 190, 146, 174, 60, 3, 220, 46, 61, 182, 191, 205, 61, 20, 83, 51, 62, 222, 221, 128, 189, 70, 101, 216, 189, 173, 106, 37, 188, 91, 183, 72, 187, 52, 243, 27, 190, 31, 218, 181, 61, 102, 133, 16, 187, 12, 18, 153, 61, 10, 229, 37, 190, 83, 35, 86, 190, 58, 37, 243, 61, 195, 181, 139, 188, 197, 73, 203, 189, 71, 194, 197, 61, 121, 11, 153, 61, 80, 79, 234, 61, 69, 77, 197, 186, 105, 157, 142, 60, 136, 86, 194, 61, 100, 150, 129, 189, 182, 226, 33, 190, 139, 41, 234, 189, 227, 165, 47, 61, 199, 108, 122, 189, 60, 92, 45, 190, 208, 199, 154, 61, 207, 186, 44, 190, 187, 254, 218, 61, 73, 6, 107, 190, 182, 139, 54, 61, 201, 158, 189, 189, 164, 50, 128, 186, 199, 6, 158, 187, 97, 248, 50, 189, 134, 91, 3, 61, 69, 11, 73, 190, 14, 14, 82, 62, 30, 207, 182, 60, 95, 70, 113, 61, 225, 87, 203, 61, 185, 94, 153, 62, 103, 77, 251, 188, 45, 140, 181, 189, 48, 19, 134, 61, 8, 115, 214, 61, 173, 228, 135, 189, 55, 245, 110, 60, 166, 66, 20, 62, 151, 195, 132, 62, 37, 69, 46, 189, 102, 215, 120, 59, 81, 77, 162, 190, 2, 57, 129, 62, 112, 31, 189, 189, 226, 63, 146, 190, 195, 249, 246, 61, 47, 197, 15, 189, 14, 244, 147, 62, 86, 124, 151, 62, 160, 235, 112, 189, 161, 93, 33, 62, 131, 144, 145, 189, 146, 117, 86, 62, 19, 159, 32, 62, 12, 236, 25, 189, 32, 209, 158, 189, 66, 148, 151, 188, 49, 27, 253, 189, 13, 173, 135, 62, 69, 197, 22, 190, 205, 243, 128, 62, 12, 153, 36, 62, 151, 239, 107, 62, 51, 57, 217, 61, 192, 229, 55, 60, 13, 26, 9, 189, 249, 18, 133, 190, 39, 11, 206, 189, 64, 238, 160, 189, 9, 187, 89, 189, 187, 153, 75, 190, 104, 40, 238, 189, 213, 26, 17, 62, 38, 109, 160, 189, 87, 136, 50, 61, 22, 206, 143, 190, 31, 250, 36, 62, 72, 253, 35, 190, 120, 146, 18, 190, 149, 109, 155, 62, 74, 10, 9, 62, 162, 38, 240, 189, 221, 66, 209, 189, 76, 68, 209, 189, 220, 150, 23, 190, 177, 98, 190, 189, 39, 128, 95, 189, 215, 142, 10, 61, 80, 19, 223, 60, 98, 186, 47, 62, 154, 214, 71, 189, 183, 178, 205, 189, 127, 144, 22, 62, 16, 239, 227, 189, 79, 25, 209, 61, 249, 137, 45, 190, 57, 165, 171, 189, 152, 126, 112, 189, 236, 145, 63, 189, 101, 133, 234, 189, 139, 168, 12, 62, 28, 141, 134, 189, 241, 52, 89, 189, 34, 101, 75, 61, 226, 64, 30, 190, 155, 82, 4, 62, 1, 23, 97, 189, 51, 184, 252, 189, 165, 217, 26, 188, 10, 76, 210, 189, 196, 212, 240, 189, 9, 228, 224, 188, 58, 254, 219, 187, 41, 18, 195, 188, 208, 127, 63, 189, 132, 229, 13, 62, 242, 172, 246, 188, 97, 120, 69, 190, 238, 211, 147, 188, 107, 15, 222, 187, 129, 154, 1, 190, 178, 139, 188, 61, 152, 248, 40, 189, 210, 22, 70, 189, 174, 110, 10, 60, 130, 71, 147, 61, 95, 79, 33, 190, 241, 224, 7, 190, 35, 132, 213, 60, 195, 87, 43, 190, 178, 4, 78, 61, 160, 214, 5, 189, 189, 206, 236, 189, 182, 192, 250, 61, 159, 212, 230, 61, 23, 92, 51, 189, 132, 153, 146, 61, 12, 146, 46, 62, 105, 41, 13, 59, 25, 188, 31, 190, 10, 63, 17, 190, 211, 243, 215, 60, 98, 89, 64, 190, 170, 123, 12, 190, 85, 23, 242, 189, 43, 13, 214, 59, 171, 215, 181, 60, 138, 27, 208, 61, 183, 229, 201, 61, 171, 126, 5, 190, 77, 138, 50, 62, 187, 173, 119, 60, 39, 155, 148, 62, 168, 64, 12, 62, 17, 251, 15, 191, 47, 74, 10, 189, 54, 8, 134, 188, 2, 9, 121, 190, 178, 128, 135, 190, 21, 228, 213, 61, 180, 199, 6, 62, 111, 164, 174, 189, 14, 228, 114, 189, 229, 255, 128, 62, 12, 189, 143, 62, 119, 8, 7, 190, 56, 99, 58, 189, 241, 73, 235, 61, 217, 50, 35, 189, 64, 218, 168, 60, 143, 72, 253, 189, 174, 225, 170, 62, 66, 68, 12, 190, 109, 137, 110, 62, 89, 7, 121, 62, 155, 69, 221, 189, 158, 100, 226, 189, 249, 231, 152, 189, 115, 63, 195, 61, 129, 10, 100, 61, 37, 198, 107, 61, 75, 226, 178, 188, 76, 130, 122, 190, 142, 2, 99, 61, 12, 22, 102, 189, 61, 128, 12, 62, 145, 58, 154, 60, 134, 54, 4, 62, 239, 209, 178, 190, 124, 71, 20, 61, 176, 77, 125, 189, 238, 169, 223, 189, 109, 95, 174, 188, 226, 160, 121, 62, 235, 145, 13, 61, 140, 76, 27, 62, 73, 34, 224, 189, 175, 147, 100, 62, 236, 229, 157, 190, 226, 24, 144, 61, 238, 0, 35, 190, 180, 52, 254, 61, 19, 222, 234, 190, 148, 228, 17, 190, 108, 226, 72, 62, 67, 196, 195, 189, 130, 23, 225, 189, 52, 26, 196, 188, 177, 139, 15, 189, 73, 171, 215, 189, 157, 137, 234, 188, 255, 227, 36, 190, 99, 136, 144, 62, 208, 247, 246, 61, 216, 55, 62, 189, 59, 159, 6, 62, 231, 186, 20, 62, 201, 251, 60, 62, 153, 180, 155, 60, 48, 235, 67, 190, 37, 32, 116, 62, 185, 191, 160, 62, 96, 183, 40, 62, 153, 222, 18, 60, 59, 147, 75, 62, 139, 47, 124, 61, 24, 123, 28, 190, 53, 65, 157, 190, 226, 176, 187, 188, 240, 30, 207, 186, 143, 255, 130, 189, 56, 124, 37, 190, 12, 241, 188, 60, 46, 184, 142, 190, 126, 11, 205, 189, 79, 163, 91, 190, 208, 64, 14, 189, 202, 6, 173, 188, 68, 158, 166, 190, 37, 96, 42, 62, 55, 138, 214, 189, 71, 128, 51, 190, 188, 48, 23, 62, 216, 149, 94, 60, 149, 78, 248, 189, 122, 212, 49, 190, 129, 241, 153, 61, 103, 124, 17, 62, 70, 70, 225, 187, 138, 221, 55, 190, 155, 165, 175, 190, 161, 189, 212, 188, 238, 34, 32, 62, 89, 56, 152, 190, 13, 140, 51, 189, 77, 188, 87, 62, 101, 121, 22, 62, 26, 144, 82, 61, 164, 76, 72, 190, 32, 222, 81, 62, 233, 197, 210, 188, 112, 67, 5, 190, 241, 163, 226, 61, 155, 211, 91, 62, 78, 148, 118, 61, 21, 48, 237, 60, 78, 41, 156, 61, 5, 92, 125, 62, 139, 227, 99, 189, 208, 130, 247, 61, 147, 83, 68, 189, 196, 246, 191, 189, 12, 236, 26, 190, 5, 164, 38, 189, 24, 83, 227, 189, 146, 217, 166, 60, 228, 149, 40, 190, 101, 223, 191, 61, 66, 45, 0, 61, 143, 57, 127, 61, 179, 16, 254, 188, 186, 234, 174, 188, 219, 253, 168, 62, 44, 202, 26, 190, 84, 58, 141, 62, 29, 105, 101, 62, 95, 203, 161, 62, 142, 110, 152, 189, 12, 53, 137, 190, 129, 205, 187, 60, 53, 185, 131, 188, 222, 186, 217, 188, 69, 207, 167, 189, 124, 34, 63, 62, 101, 211, 71, 189, 20, 43, 25, 61, 17, 121, 136, 62, 138, 198, 58, 190, 78, 212, 38, 62, 6, 142, 228, 190, 29, 18, 69, 61, 223, 137, 153, 188, 153, 248, 160, 60, 170, 188, 158, 62, 173, 2, 30, 189, 28, 80, 87, 190, 72, 203, 171, 59, 29, 16, 68, 190, 245, 180, 65, 61, 165, 196, 32, 189, 66, 56, 46, 62, 100, 245, 220, 60, 185, 139, 231, 60, 80, 149, 237, 189, 152, 117, 164, 62, 89, 228, 128, 189, 244, 43, 178, 190, 12, 81, 127, 61, 48, 91, 239, 60, 225, 231, 125, 190, 88, 1, 8, 190, 121, 237, 74, 62, 167, 237, 151, 60, 185, 146, 115, 190, 207, 68, 47, 62, 209, 39, 81, 60, 10, 157, 24, 190, 148, 254, 120, 190, 151, 44, 254, 60, 129, 73, 5, 190, 216, 38, 148, 190, 32, 243, 156, 189, 250, 33, 91, 189, 43, 25, 192, 189, 148, 101, 182, 61, 216, 190, 135, 60, 10, 38, 246, 189, 100, 130, 184, 188, 159, 24, 142, 61, 32, 134, 33, 190, 6, 19, 71, 62, 173, 120, 212, 60, 178, 145, 50, 61, 171, 136, 19, 62, 142, 251, 2, 62, 215, 235, 250, 61, 6, 122, 50, 190, 45, 89, 255, 61, 53, 166, 133, 187, 246, 166, 84, 60, 246, 64, 63, 190, 89, 64, 43, 187, 233, 94, 19, 190, 44, 102, 19, 62, 234, 231, 202, 60, 71, 178, 116, 62, 140, 189, 159, 60, 162, 104, 236, 60, 244, 249, 43, 190, 172, 150, 135, 62, 130, 177, 6, 190, 149, 136, 120, 62, 140, 213, 163, 189, 41, 232, 78, 62, 116, 204, 176, 60, 199, 168, 82, 189, 55, 92, 77, 62, 198, 28, 178, 61, 220, 223, 9, 190, 141, 36, 38, 61, 219, 2, 221, 187, 246, 84, 194, 189, 178, 217, 224, 61, 130, 160, 181, 190, 228, 124, 190, 61, 147, 216, 117, 188, 207, 8, 19, 62, 165, 104, 188, 61, 86, 24, 252, 189, 61, 83, 136, 190, 238, 200, 203, 189, 212, 146, 237, 189, 129, 207, 144, 189, 166, 142, 3, 62, 218, 117, 241, 61, 192, 23, 178, 61, 58, 97, 58, 190, 191, 39, 43, 189, 249, 34, 162, 62, 251, 149, 22, 61, 172, 48, 19, 62, 161, 121, 153, 189, 201, 219, 19, 60, 83, 88, 119, 62, 118, 18, 203, 190, 34, 19, 111, 62, 229, 254, 62, 62, 183, 238, 162, 61, 25, 246, 97, 61, 208, 182, 75, 61, 116, 221, 65, 188, 8, 126, 185, 61, 87, 224, 25, 190, 42, 91, 29, 190, 7, 74, 6, 60, 190, 190, 4, 190, 164, 129, 36, 190, 104, 1, 241, 60, 128, 204, 41, 190, 162, 238, 13, 62, 71, 167, 151, 188, 142, 56, 47, 188, 196, 238, 14, 190, 55, 243, 14, 190, 11, 32, 146, 189, 10, 196, 144, 61, 44, 100, 178, 61, 94, 14, 182, 189, 216, 105, 133, 61, 162, 235, 187, 189, 234, 226, 185, 60, 167, 3, 231, 189, 109, 32, 154, 189, 66, 228, 42, 62, 87, 14, 246, 61, 199, 19, 1, 62, 35, 130, 131, 61, 162, 157, 45, 190, 14, 128, 143, 61, 240, 81, 59, 189, 248, 110, 131, 183, 176, 232, 184, 61, 233, 147, 71, 60, 154, 86, 106, 59, 52, 41, 53, 61, 28, 7, 72, 60, 51, 213, 56, 190, 228, 42, 11, 189, 151, 57, 169, 61, 228, 142, 185, 185, 91, 7, 29, 190, 227, 236, 42, 189, 169, 8, 104, 190, 71, 254, 146, 61, 215, 30, 169, 61, 13, 166, 34, 62, 94, 251, 233, 61, 208, 231, 38, 190, 133, 224, 72, 188, 201, 150, 179, 189, 229, 240, 81, 189, 85, 14, 34, 189, 165, 97, 253, 189, 73, 179, 139, 186, 72, 28, 31, 61, 17, 7, 239, 188, 242, 112, 244, 60, 158, 64, 199, 61, 79, 184, 235, 189, 83, 183, 247, 186, 76, 188, 38, 189, 129, 159, 135, 61, 140, 2, 17, 190, 150, 186, 194, 188, 55, 35, 177, 60, 46, 70, 60, 190, 244, 56, 252, 61, 156, 79, 118, 61, 125, 205, 16, 62, 194, 39, 153, 61, 4, 231, 3, 62, 134, 128, 44, 190, 84, 192, 5, 190, 94, 193, 250, 61, 21, 89, 223, 61, 112, 129, 53, 190, 25, 96, 155, 61, 120, 84, 239, 189, 60, 13, 71, 62, 68, 129, 236, 187, 188, 253, 70, 189, 228, 59, 221, 188, 241, 24, 24, 188, 13, 128, 18, 190, 183, 179, 51, 62, 134, 175, 153, 190, 166, 70, 41, 62, 91, 10, 22, 62, 114, 20, 249, 188, 146, 72, 95, 190, 118, 128, 115, 62, 142, 179, 157, 61, 50, 87, 143, 190, 12, 74, 68, 62, 74, 27, 33, 62, 244, 201, 218, 61, 125, 239, 230, 189, 253, 111, 223, 61, 128, 89, 51, 62, 162, 48, 28, 62, 114, 205, 30, 62, 75, 94, 148, 61, 243, 228, 213, 188, 242, 17, 41, 62, 211, 45, 51, 189, 133, 124, 79, 62, 59, 172, 18, 190, 135, 223, 101, 60, 248, 211, 49, 190, 40, 146, 10, 190, 123, 135, 142, 188, 109, 22, 136, 188, 221, 178, 41, 187, 219, 210, 0, 189, 26, 106, 231, 59, 249, 37, 197, 61, 39, 250, 200, 60, 190, 13, 49, 190, 246, 79, 189, 189, 75, 48, 44, 62, 177, 233, 192, 60, 213, 42, 83, 189, 192, 210, 224, 188, 8, 168, 64, 189, 56, 70, 11, 190, 181, 214, 240, 189, 63, 142, 7, 190, 85, 117, 154, 61, 242, 94, 203, 188, 218, 145, 45, 190, 247, 123, 144, 189, 176, 178, 51, 190, 254, 59, 133, 61, 148, 25, 170, 189, 210, 67, 167, 61, 252, 23, 147, 188, 34, 246, 142, 62, 167, 136, 14, 190, 59, 98, 5, 191, 62, 235, 21, 190, 242, 216, 125, 61, 71, 167, 234, 190, 158, 52, 192, 190, 17, 17, 166, 189, 145, 65, 4, 61, 217, 2, 139, 62, 232, 199, 186, 189, 77, 179, 147, 62, 27, 192, 72, 61, 218, 181, 128, 190, 93, 21, 93, 61, 147, 66, 186, 61, 208, 195, 154, 190, 223, 106, 109, 62, 69, 216, 150, 190, 109, 175, 202, 62, 147, 41, 9, 190, 21, 188, 235, 61, 36, 68, 171, 61, 72, 156, 84, 190, 77, 7, 229, 190, 49, 151, 138, 61, 22, 255, 134, 189, 102, 82, 62, 190, 19, 227, 188, 188, 50, 138, 65, 190, 98, 26, 147, 60, 240, 89, 152, 188, 51, 213, 219, 60, 88, 29, 194, 61, 129, 223, 47, 190, 168, 240, 138, 189, 188, 83, 13, 62, 180, 81, 208, 190, 15, 26, 153, 190, 195, 62, 42, 190, 205, 198, 157, 187, 127, 4, 131, 189, 98, 136, 27, 187, 189, 31, 31, 62, 178, 28, 37, 62, 26, 135, 53, 190, 97, 64, 155, 61, 24, 115, 209, 61, 154, 10, 159, 187, 66, 156, 216, 61, 93, 255, 65, 62, 92, 18, 46, 62, 231, 112, 37, 60, 51, 166, 2, 188, 156, 164, 62, 61, 178, 71, 242, 189, 98, 252, 84, 189, 1, 156, 200, 61, 121, 14, 127, 190, 128, 141, 180, 189, 61, 236, 22, 190, 97, 83, 96, 62, 82, 238, 90, 62, 33, 92, 193, 61, 136, 238, 67, 190, 35, 180, 129, 190, 243, 168, 203, 62, 9, 158, 112, 61, 39, 43, 128, 62, 10, 113, 11, 62, 217, 64, 222, 61, 145, 89, 134, 190, 177, 193, 157, 189, 54, 233, 165, 61, 150, 32, 111, 189, 137, 199, 148, 190, 135, 217, 34, 61, 169, 76, 7, 62, 232, 68, 59, 62, 1, 60, 203, 189, 70, 63, 248, 61, 186, 221, 174, 189, 71, 56, 174, 62, 169, 104, 214, 189, 11, 43, 19, 190, 72, 224, 157, 61, 121, 49, 201, 188, 34, 15, 181, 60, 84, 34, 233, 61, 177, 158, 28, 190, 43, 55, 130, 189, 15, 2, 185, 60, 207, 131, 34, 190, 7, 146, 108, 62, 130, 169, 96, 62, 95, 108, 234, 189, 118, 107, 70, 190, 136, 110, 100, 189, 10, 69, 141, 62, 25, 251, 59, 62, 50, 3, 4, 62, 253, 169, 56, 187, 97, 3, 25, 61, 183, 214, 168, 188, 41, 99, 46, 61, 9, 85, 241, 189, 74, 85, 168, 189, 161, 91, 213, 187, 142, 77, 10, 188, 34, 2, 6, 62, 239, 150, 226, 61, 166, 92, 88, 190, 78, 119, 159, 189, 139, 50, 34, 190, 102, 27, 125, 62, 94, 183, 207, 188, 19, 129, 235, 189, 188, 181, 219, 61, 100, 48, 93, 61, 143, 167, 60, 61, 225, 178, 149, 62, 160, 189, 6, 62, 40, 152, 31, 190, 242, 108, 38, 190, 190, 190, 193, 189, 156, 61, 248, 60, 113, 71, 37, 62, 34, 146, 179, 60, 49, 234, 198, 188, 8, 142, 8, 62, 64, 50, 142, 187, 89, 76, 31, 190, 158, 137, 147, 189, 16, 154, 185, 58, 174, 229, 247, 187, 70, 3, 18, 61, 19, 112, 175, 61, 238, 122, 91, 189, 189, 32, 126, 189, 240, 144, 176, 60, 45, 184, 160, 189, 242, 198, 211, 61, 225, 68, 204, 61, 115, 15, 138, 60, 68, 121, 161, 188, 149, 226, 247, 189, 155, 188, 28, 190, 36, 75, 133, 189, 121, 7, 139, 189, 68, 211, 187, 61, 99, 220, 246, 189, 64, 65, 94, 189, 49, 236, 233, 61, 62, 15, 234, 60, 251, 169, 49, 190, 28, 66, 153, 61, 121, 112, 135, 61, 182, 183, 26, 62, 69, 3, 71, 62, 166, 198, 111, 62, 16, 148, 253, 61, 219, 23, 218, 189, 187, 56, 163, 189, 170, 10, 8, 189, 187, 122, 141, 61, 248, 96, 44, 62, 59, 180, 22, 190, 58, 224, 74, 189, 98, 70, 27, 190, 95, 201, 48, 190, 103, 228, 112, 62, 183, 117, 164, 62, 168, 214, 137, 190, 199, 192, 131, 62, 37, 21, 142, 61, 174, 104, 117, 61, 166, 15, 32, 62, 7, 34, 43, 62, 91, 113, 57, 62, 252, 176, 187, 61, 25, 29, 51, 60, 107, 206, 148, 189, 114, 107, 211, 189, 12, 16, 238, 61, 14, 56, 139, 62, 39, 100, 54, 189, 137, 213, 192, 60, 81, 175, 153, 189, 35, 172, 150, 189, 234, 68, 253, 189, 165, 174, 158, 61, 17, 145, 173, 61, 88, 176, 215, 61, 98, 219, 16, 190, 6, 120, 29, 62, 17, 159, 204, 61, 212, 226, 168, 59, 234, 143, 76, 61, 125, 71, 59, 62, 76, 202, 4, 189, 59, 212, 28, 190, 246, 56, 130, 61, 244, 193, 76, 62, 103, 236, 148, 189, 33, 205, 31, 190, 234, 39, 93, 61, 246, 85, 112, 189, 132, 70, 247, 61, 207, 229, 6, 62, 20, 201, 131, 190, 78, 57, 81, 60, 90, 149, 184, 60, 113, 121, 45, 61, 154, 19, 185, 189, 252, 45, 116, 61, 93, 103, 163, 59, 225, 9, 119, 62, 154, 59, 82, 61, 149, 26, 117, 190, 16, 240, 253, 188, 107, 86, 54, 190, 234, 98, 138, 62, 70, 99, 107, 62, 211, 121, 245, 188, 198, 115, 160, 190, 195, 47, 45, 190, 96, 233, 8, 63, 243, 97, 220, 61, 74, 220, 134, 189, 220, 112, 226, 62, 151, 150, 201, 62, 238, 225, 40, 190, 98, 13, 202, 190, 160, 246, 126, 182, 232, 239, 213, 61, 201, 10, 88, 190, 229, 235, 12, 62, 3, 159, 126, 62, 218, 221, 130, 61, 253, 144, 100, 61, 248, 13, 62, 62, 93, 228, 124, 190, 141, 135, 157, 61, 28, 251, 64, 190, 187, 118, 247, 61, 210, 131, 224, 61, 193, 105, 143, 189, 111, 221, 48, 62, 81, 55, 242, 188, 253, 170, 53, 62, 134, 174, 53, 190, 61, 125, 146, 187, 188, 8, 239, 61, 97, 34, 14, 62, 96, 180, 221, 60, 30, 234, 2, 190, 94, 214, 6, 190, 89, 114, 88, 61, 127, 234, 2, 62, 34, 14, 19, 62, 46, 124, 29, 189, 113, 171, 199, 61, 142, 103, 6, 62, 127, 20, 241, 60, 66, 96, 90, 190, 35, 105, 152, 61, 221, 252, 200, 61, 181, 216, 16, 190, 167, 143, 159, 61, 44, 148, 93, 189, 112, 158, 232, 186, 7, 243, 53, 61, 94, 100, 151, 61, 23, 27, 106, 61, 202, 19, 212, 189, 34, 143, 59, 190, 218, 227, 82, 61, 193, 223, 200, 189, 6, 168, 77, 190, 21, 139, 14, 62, 47, 135, 4, 190, 34, 167, 57, 189, 105, 148, 11, 190, 251, 39, 44, 190, 218, 218, 18, 62, 235, 184, 195, 190, 105, 12, 76, 62, 134, 85, 6, 62, 34, 59, 148, 62, 157, 204, 9, 190, 215, 97, 49, 190, 222, 252, 50, 61, 150, 49, 2, 62, 41, 57, 121, 189, 215, 36, 136, 190, 51, 122, 194, 189, 50, 107, 182, 189, 85, 51, 124, 189, 209, 219, 194, 189, 108, 28, 17, 62, 98, 8, 140, 61, 199, 110, 133, 190, 248, 78, 87, 59, 195, 161, 92, 60, 101, 135, 23, 190, 112, 158, 150, 62, 205, 29, 33, 189, 67, 84, 202, 62, 210, 39, 157, 189, 130, 21, 192, 189, 24, 162, 91, 62, 113, 17, 48, 189, 15, 194, 165, 190, 19, 102, 23, 190, 71, 32, 70, 187, 163, 61, 211, 61, 34, 87, 151, 189, 244, 95, 127, 189, 142, 122, 58, 188, 87, 235, 59, 60, 197, 119, 115, 189, 63, 108, 12, 62, 135, 164, 65, 189, 36, 98, 19, 62, 23, 113, 227, 189, 219, 170, 32, 190, 125, 16, 187, 189, 50, 232, 74, 60, 94, 9, 166, 189, 32, 163, 185, 61, 83, 160, 24, 189, 52, 112, 140, 61, 151, 128, 176, 189, 134, 37, 178, 61, 98, 34, 13, 62, 29, 13, 241, 188, 166, 131, 242, 60, 221, 52, 202, 189, 211, 136, 194, 187, 56, 179, 156, 189, 250, 248, 226, 189, 231, 208, 205, 189, 198, 174, 186, 61, 124, 88, 227, 189, 217, 84, 228, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 219, 156, 61, 87, 221, 131, 61, 81, 79, 102, 189, 90, 238, 183, 189, 122, 132, 100, 189, 105, 186, 1, 62, 104, 41, 84, 189, 217, 243, 92, 189, 138, 47, 188, 189, 207, 230, 69, 189, 52, 253, 186, 189, 91, 239, 92, 188, 172, 123, 100, 62, 121, 43, 90, 62, 176, 63, 168, 189, 120, 48, 25, 62, 118, 208, 15, 190, 41, 7, 29, 190, 155, 20, 90, 189, 220, 116, 75, 189, 156, 36, 193, 189, 214, 36, 177, 188, 124, 248, 100, 62, 133, 224, 224, 61, 9, 199, 10, 62, 220, 124, 151, 188, 61, 234, 55, 187, 133, 193, 38, 62, 17, 192, 221, 61, 0, 228, 14, 190, 160, 115, 25, 62, 139, 145, 136, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {216, 181, 130, 62, 254, 36, 250, 62, 229, 181, 89, 190, 94, 202, 44, 190, 44, 254, 46, 190, 243, 136, 85, 62, 208, 100, 88, 190, 201, 68, 253, 60, 147, 119, 164, 189, 67, 194, 73, 190, 34, 44, 93, 62, 211, 46, 64, 190, 109, 56, 14, 190, 79, 6, 103, 62, 97, 152, 166, 62, 83, 152, 36, 190, 140, 216, 214, 189, 164, 219, 14, 62, 247, 241, 133, 189, 15, 47, 83, 188, 118, 139, 133, 189, 149, 119, 249, 190, 72, 54, 91, 190, 116, 151, 158, 62, 154, 113, 5, 62, 6, 40, 181, 188, 194, 251, 75, 62, 168, 73, 182, 61, 203, 1, 183, 62, 184, 158, 21, 190, 151, 236, 138, 190, 231, 204, 165, 60, 40, 98, 43, 190, 118, 104, 248, 61, 26, 93, 112, 190, 47, 112, 148, 188, 212, 123, 5, 190, 147, 109, 3, 190, 137, 194, 174, 189, 14, 181, 212, 60, 245, 8, 190, 61, 89, 82, 38, 188, 226, 239, 151, 189, 96, 227, 15, 189, 152, 174, 22, 190, 177, 211, 128, 189, 249, 66, 69, 61, 187, 88, 80, 189, 12, 156, 73, 62, 210, 109, 220, 189, 95, 23, 206, 61, 237, 144, 151, 190, 254, 2, 23, 62, 3, 212, 157, 61, 233, 243, 105, 190, 178, 242, 134, 189, 220, 82, 48, 189, 184, 174, 158, 61, 193, 218, 220, 189, 236, 186, 67, 190, 87, 202, 1, 61, 9, 12, 25, 62, 195, 106, 227, 189, 60, 135, 209, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 132, 161, 189, 72, 165, 46, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {92, 136, 160, 191, 17, 239, 212, 62, 137, 137, 6, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {166, 30, 206, 191, 135, 40, 9, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0080/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}