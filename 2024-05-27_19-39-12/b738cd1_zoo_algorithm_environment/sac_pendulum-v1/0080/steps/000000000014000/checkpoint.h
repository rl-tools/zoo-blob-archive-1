// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 35, 77, 63, 94, 91, 76, 191, 83, 109, 163, 190, 79, 156, 55, 62, 114, 248, 80, 63, 80, 141, 32, 63, 29, 189, 77, 63, 2, 87, 97, 191, 181, 202, 176, 190, 238, 142, 176, 62, 140, 129, 105, 61, 45, 234, 1, 63, 110, 240, 166, 62, 136, 39, 128, 191, 250, 180, 87, 190, 197, 156, 132, 62, 64, 0, 166, 189, 57, 30, 135, 190, 254, 19, 250, 189, 178, 3, 175, 63, 40, 186, 185, 62, 250, 62, 104, 58, 79, 41, 98, 63, 112, 87, 73, 62, 205, 200, 23, 63, 231, 241, 86, 63, 198, 17, 108, 62, 237, 201, 137, 190, 95, 46, 70, 191, 158, 89, 116, 62, 167, 213, 142, 61, 192, 231, 8, 191, 116, 9, 11, 191, 51, 131, 182, 62, 248, 182, 46, 191, 109, 64, 210, 62, 1, 144, 213, 190, 242, 58, 5, 62, 167, 159, 40, 63, 37, 63, 72, 190, 198, 199, 16, 191, 101, 28, 182, 62, 57, 236, 177, 61, 80, 176, 204, 63, 20, 235, 197, 62, 5, 202, 237, 62, 37, 154, 167, 63, 59, 43, 135, 62, 236, 211, 47, 191, 235, 151, 148, 191, 73, 15, 57, 190, 124, 6, 230, 62, 239, 76, 38, 191, 133, 48, 191, 190, 71, 208, 144, 190, 231, 0, 106, 63, 93, 217, 70, 189, 103, 195, 11, 191, 155, 19, 170, 191, 174, 114, 175, 190, 231, 147, 71, 191, 227, 87, 111, 63, 181, 168, 219, 62, 250, 205, 228, 62, 75, 228, 129, 63, 124, 194, 173, 62, 47, 24, 138, 62, 213, 188, 123, 63, 186, 131, 161, 187, 5, 223, 135, 190, 194, 36, 40, 63, 232, 47, 55, 190, 220, 213, 213, 190, 200, 90, 123, 63, 74, 81, 11, 189, 218, 144, 4, 63, 245, 141, 82, 191, 12, 95, 56, 190, 55, 93, 217, 190, 238, 76, 219, 62, 33, 179, 213, 190, 215, 227, 109, 190, 223, 10, 171, 63, 135, 211, 157, 62, 91, 165, 56, 62, 31, 123, 218, 191, 245, 142, 252, 190, 66, 2, 141, 190, 209, 254, 64, 63, 142, 208, 106, 189, 94, 159, 126, 190, 88, 112, 134, 63, 169, 127, 91, 62, 22, 240, 65, 191, 205, 24, 43, 63, 56, 59, 71, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 46, 23, 191, 210, 91, 183, 190, 99, 83, 27, 191, 157, 128, 167, 187, 97, 71, 38, 189, 211, 28, 146, 62, 12, 33, 42, 62, 215, 179, 210, 62, 54, 158, 7, 191, 193, 76, 166, 190, 151, 156, 16, 190, 45, 73, 24, 63, 208, 14, 247, 189, 160, 47, 72, 190, 103, 164, 39, 62, 124, 156, 131, 190, 169, 133, 163, 62, 187, 140, 137, 62, 41, 0, 31, 190, 19, 15, 130, 190, 129, 0, 158, 190, 29, 253, 7, 63, 210, 124, 25, 63, 198, 105, 226, 61, 113, 73, 5, 189, 25, 30, 96, 62, 74, 45, 82, 190, 105, 75, 220, 189, 165, 183, 141, 189, 156, 85, 11, 63, 210, 248, 128, 190, 206, 251, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 145, 194, 187, 23, 68, 62, 190, 48, 23, 4, 62, 167, 187, 10, 62, 184, 229, 19, 190, 19, 161, 172, 60, 155, 211, 79, 191, 32, 150, 190, 189, 25, 181, 11, 191, 160, 232, 124, 190, 147, 69, 148, 189, 218, 112, 236, 62, 206, 45, 54, 190, 75, 109, 213, 190, 123, 44, 14, 191, 86, 160, 129, 190, 135, 227, 4, 191, 108, 106, 51, 61, 192, 20, 49, 62, 213, 167, 160, 190, 45, 8, 68, 190, 52, 106, 30, 62, 104, 186, 7, 62, 20, 103, 9, 61, 26, 46, 206, 189, 41, 56, 189, 62, 5, 76, 141, 62, 164, 123, 110, 191, 243, 214, 176, 61, 32, 176, 224, 189, 245, 103, 112, 191, 115, 152, 62, 61, 130, 238, 186, 190, 92, 136, 7, 191, 7, 82, 194, 190, 244, 179, 80, 191, 245, 18, 75, 189, 224, 243, 138, 190, 93, 71, 154, 62, 64, 82, 35, 61, 217, 102, 143, 190, 100, 148, 73, 62, 97, 6, 193, 190, 67, 163, 149, 191, 130, 23, 161, 189, 34, 54, 238, 188, 91, 75, 87, 191, 2, 215, 152, 190, 140, 56, 118, 61, 10, 254, 24, 190, 177, 135, 232, 61, 91, 246, 209, 189, 134, 241, 110, 62, 3, 86, 134, 191, 30, 5, 45, 62, 131, 159, 23, 62, 150, 9, 104, 61, 44, 171, 47, 190, 246, 174, 231, 190, 70, 171, 209, 62, 127, 168, 20, 191, 3, 144, 173, 62, 180, 195, 69, 62, 85, 170, 211, 61, 159, 74, 1, 191, 23, 157, 104, 190, 171, 157, 44, 191, 132, 68, 93, 60, 203, 25, 199, 190, 179, 124, 79, 62, 23, 59, 51, 62, 173, 203, 178, 62, 56, 238, 161, 190, 40, 222, 177, 62, 79, 55, 164, 189, 1, 181, 171, 61, 69, 137, 73, 62, 246, 193, 89, 62, 26, 78, 205, 60, 131, 50, 87, 187, 99, 139, 33, 191, 179, 220, 204, 61, 202, 123, 93, 189, 94, 96, 157, 189, 250, 203, 80, 62, 177, 52, 92, 62, 233, 17, 177, 61, 128, 179, 139, 62, 158, 37, 167, 61, 127, 179, 33, 59, 125, 53, 241, 188, 78, 251, 141, 189, 121, 120, 21, 191, 14, 102, 113, 62, 48, 81, 224, 60, 124, 132, 94, 62, 96, 86, 243, 189, 254, 240, 182, 189, 57, 154, 3, 190, 89, 227, 19, 190, 97, 93, 31, 190, 223, 16, 163, 189, 223, 57, 253, 187, 65, 237, 2, 190, 248, 195, 114, 188, 41, 183, 6, 190, 252, 68, 215, 60, 40, 180, 135, 61, 252, 40, 14, 189, 203, 140, 42, 61, 48, 251, 5, 62, 99, 171, 105, 189, 92, 87, 225, 60, 246, 218, 4, 190, 119, 29, 27, 62, 244, 23, 168, 188, 240, 214, 27, 190, 78, 164, 25, 62, 212, 145, 35, 190, 23, 62, 27, 190, 225, 238, 76, 61, 191, 238, 21, 62, 183, 224, 255, 61, 252, 3, 243, 61, 57, 211, 157, 189, 116, 147, 7, 190, 98, 198, 54, 61, 217, 6, 181, 61, 210, 163, 7, 190, 190, 146, 174, 60, 3, 220, 46, 61, 182, 191, 205, 61, 20, 83, 51, 62, 222, 221, 128, 189, 70, 101, 216, 189, 173, 106, 37, 188, 91, 183, 72, 187, 52, 243, 27, 190, 31, 218, 181, 61, 102, 133, 16, 187, 12, 18, 153, 61, 10, 229, 37, 190, 83, 35, 86, 190, 58, 37, 243, 61, 195, 181, 139, 188, 197, 73, 203, 189, 71, 194, 197, 61, 121, 11, 153, 61, 80, 79, 234, 61, 69, 77, 197, 186, 105, 157, 142, 60, 136, 86, 194, 61, 100, 150, 129, 189, 182, 226, 33, 190, 139, 41, 234, 189, 227, 165, 47, 61, 199, 108, 122, 189, 60, 92, 45, 190, 208, 199, 154, 61, 207, 186, 44, 190, 6, 250, 136, 61, 173, 16, 206, 190, 57, 62, 22, 62, 43, 190, 125, 189, 245, 118, 187, 60, 109, 120, 76, 61, 66, 212, 116, 190, 79, 141, 23, 190, 46, 86, 185, 191, 220, 81, 161, 62, 83, 247, 220, 61, 99, 121, 31, 62, 109, 224, 23, 62, 153, 153, 192, 62, 146, 184, 202, 190, 86, 69, 22, 191, 173, 217, 253, 61, 28, 116, 73, 62, 146, 142, 243, 189, 160, 73, 69, 190, 65, 13, 53, 62, 132, 47, 189, 61, 92, 199, 4, 190, 209, 199, 209, 61, 180, 115, 192, 190, 123, 87, 175, 62, 80, 222, 130, 188, 227, 42, 201, 190, 70, 35, 23, 62, 58, 184, 161, 60, 159, 239, 131, 62, 35, 151, 171, 62, 72, 146, 104, 62, 62, 155, 134, 61, 185, 245, 203, 61, 87, 29, 232, 61, 235, 149, 97, 62, 108, 28, 157, 62, 18, 194, 148, 189, 212, 11, 158, 61, 152, 95, 149, 190, 167, 228, 181, 62, 28, 78, 166, 190, 118, 192, 72, 62, 182, 1, 96, 62, 103, 181, 172, 62, 163, 30, 192, 61, 46, 171, 153, 189, 163, 30, 163, 190, 61, 64, 137, 190, 202, 81, 110, 62, 130, 111, 133, 60, 92, 186, 160, 188, 64, 226, 148, 190, 206, 122, 21, 189, 63, 185, 184, 62, 117, 45, 112, 62, 107, 125, 44, 62, 83, 231, 73, 190, 3, 12, 14, 62, 117, 172, 14, 191, 154, 228, 47, 61, 179, 147, 92, 62, 93, 110, 213, 62, 162, 38, 240, 189, 221, 66, 209, 189, 76, 68, 209, 189, 220, 150, 23, 190, 177, 98, 190, 189, 39, 128, 95, 189, 215, 142, 10, 61, 80, 19, 223, 60, 98, 186, 47, 62, 154, 214, 71, 189, 183, 178, 205, 189, 127, 144, 22, 62, 16, 239, 227, 189, 79, 25, 209, 61, 249, 137, 45, 190, 57, 165, 171, 189, 152, 126, 112, 189, 236, 145, 63, 189, 101, 133, 234, 189, 139, 168, 12, 62, 28, 141, 134, 189, 241, 52, 89, 189, 34, 101, 75, 61, 226, 64, 30, 190, 155, 82, 4, 62, 1, 23, 97, 189, 51, 184, 252, 189, 165, 217, 26, 188, 10, 76, 210, 189, 196, 212, 240, 189, 9, 228, 224, 188, 58, 254, 219, 187, 41, 18, 195, 188, 208, 127, 63, 189, 132, 229, 13, 62, 242, 172, 246, 188, 97, 120, 69, 190, 238, 211, 147, 188, 107, 15, 222, 187, 129, 154, 1, 190, 178, 139, 188, 61, 152, 248, 40, 189, 210, 22, 70, 189, 174, 110, 10, 60, 130, 71, 147, 61, 95, 79, 33, 190, 241, 224, 7, 190, 35, 132, 213, 60, 195, 87, 43, 190, 178, 4, 78, 61, 160, 214, 5, 189, 189, 206, 236, 189, 182, 192, 250, 61, 159, 212, 230, 61, 23, 92, 51, 189, 132, 153, 146, 61, 12, 146, 46, 62, 105, 41, 13, 59, 25, 188, 31, 190, 10, 63, 17, 190, 211, 243, 215, 60, 98, 89, 64, 190, 170, 123, 12, 190, 85, 23, 242, 189, 98, 225, 57, 61, 106, 88, 8, 187, 247, 160, 178, 60, 173, 88, 12, 62, 179, 209, 60, 190, 87, 86, 32, 62, 186, 86, 107, 189, 18, 114, 117, 62, 244, 219, 253, 61, 202, 53, 200, 190, 114, 229, 201, 189, 126, 162, 107, 189, 210, 178, 167, 190, 44, 76, 79, 190, 86, 40, 186, 62, 114, 22, 220, 62, 189, 147, 13, 62, 121, 144, 9, 190, 198, 52, 52, 61, 91, 37, 44, 63, 143, 255, 117, 191, 46, 96, 3, 62, 192, 214, 119, 61, 136, 15, 179, 190, 147, 34, 51, 190, 86, 193, 97, 190, 51, 208, 69, 62, 168, 226, 161, 191, 148, 102, 105, 62, 100, 191, 13, 62, 211, 166, 142, 191, 120, 103, 177, 190, 249, 231, 152, 189, 82, 234, 159, 187, 129, 10, 100, 61, 45, 211, 211, 189, 195, 131, 231, 189, 160, 229, 10, 191, 228, 134, 29, 62, 68, 240, 104, 61, 85, 222, 146, 190, 136, 42, 20, 190, 70, 170, 233, 190, 203, 243, 40, 191, 86, 235, 249, 59, 220, 105, 117, 190, 145, 26, 148, 190, 34, 114, 99, 189, 204, 5, 207, 62, 194, 155, 237, 190, 99, 213, 196, 62, 251, 23, 223, 189, 30, 244, 175, 62, 22, 244, 49, 191, 149, 114, 50, 62, 201, 0, 204, 60, 1, 1, 172, 62, 169, 182, 23, 191, 5, 135, 209, 190, 252, 10, 176, 62, 116, 178, 30, 191, 34, 152, 80, 61, 21, 15, 223, 61, 40, 195, 128, 62, 187, 143, 106, 62, 169, 20, 148, 189, 228, 243, 79, 61, 221, 153, 106, 62, 24, 128, 95, 62, 129, 196, 241, 61, 247, 213, 14, 62, 18, 60, 187, 61, 206, 135, 98, 185, 117, 246, 190, 61, 229, 240, 171, 190, 55, 227, 69, 62, 26, 85, 193, 62, 43, 93, 131, 62, 229, 58, 71, 189, 190, 72, 118, 61, 50, 224, 62, 190, 215, 93, 103, 190, 179, 208, 60, 62, 206, 233, 157, 188, 51, 185, 146, 61, 26, 189, 153, 190, 43, 155, 129, 190, 100, 155, 213, 62, 78, 220, 215, 60, 232, 40, 225, 187, 30, 199, 76, 191, 246, 37, 108, 188, 155, 69, 31, 62, 162, 185, 142, 190, 23, 22, 8, 62, 95, 126, 31, 190, 242, 190, 58, 191, 120, 32, 98, 62, 203, 71, 66, 190, 112, 0, 230, 188, 63, 161, 170, 190, 55, 19, 15, 62, 207, 36, 153, 60, 8, 109, 167, 189, 83, 169, 100, 190, 80, 174, 77, 61, 189, 253, 120, 190, 218, 74, 131, 62, 124, 201, 131, 190, 203, 245, 0, 62, 255, 17, 193, 62, 2, 127, 183, 62, 234, 111, 55, 190, 145, 136, 170, 190, 241, 24, 187, 62, 148, 251, 70, 62, 180, 173, 9, 191, 10, 17, 160, 62, 22, 84, 70, 62, 209, 113, 53, 189, 252, 239, 31, 62, 129, 135, 79, 61, 226, 187, 114, 62, 255, 54, 52, 191, 70, 69, 211, 189, 32, 16, 162, 189, 57, 131, 95, 191, 56, 220, 213, 189, 41, 116, 141, 62, 19, 118, 181, 189, 75, 128, 139, 62, 130, 14, 224, 189, 32, 243, 93, 62, 19, 215, 136, 189, 49, 146, 17, 62, 188, 14, 10, 62, 124, 207, 111, 61, 237, 6, 145, 62, 182, 155, 108, 190, 83, 132, 170, 62, 254, 237, 104, 62, 149, 31, 133, 62, 157, 250, 205, 189, 228, 177, 101, 190, 228, 128, 115, 62, 250, 157, 157, 61, 201, 148, 44, 190, 229, 133, 209, 190, 220, 171, 121, 62, 66, 51, 144, 188, 125, 219, 53, 62, 0, 59, 2, 63, 115, 230, 111, 190, 254, 92, 146, 62, 67, 180, 91, 191, 143, 167, 103, 62, 143, 218, 126, 190, 121, 142, 197, 61, 99, 123, 5, 63, 252, 86, 165, 187, 166, 90, 99, 190, 125, 126, 51, 190, 78, 162, 68, 190, 125, 185, 43, 190, 238, 206, 39, 189, 232, 254, 132, 190, 90, 129, 136, 62, 204, 105, 17, 62, 130, 83, 86, 191, 231, 248, 168, 62, 30, 173, 27, 191, 22, 5, 23, 191, 149, 36, 9, 62, 169, 242, 139, 60, 107, 65, 221, 190, 10, 112, 177, 190, 44, 237, 242, 62, 161, 137, 247, 190, 4, 95, 197, 61, 92, 93, 71, 62, 148, 183, 58, 62, 38, 176, 165, 190, 96, 66, 121, 189, 24, 33, 188, 62, 146, 245, 30, 62, 164, 157, 5, 190, 113, 234, 223, 190, 141, 17, 77, 62, 193, 75, 11, 191, 13, 29, 134, 62, 184, 61, 212, 61, 60, 186, 46, 62, 68, 83, 57, 190, 213, 149, 74, 61, 174, 29, 217, 190, 246, 172, 134, 62, 110, 164, 251, 188, 204, 114, 157, 60, 181, 172, 133, 61, 13, 229, 252, 61, 228, 94, 74, 61, 225, 184, 71, 190, 198, 134, 198, 60, 182, 59, 200, 61, 185, 158, 5, 189, 152, 65, 85, 190, 212, 83, 44, 59, 218, 65, 206, 189, 42, 229, 194, 60, 1, 165, 137, 189, 50, 163, 186, 62, 33, 240, 48, 62, 175, 183, 135, 189, 24, 12, 38, 187, 95, 16, 129, 62, 157, 95, 70, 190, 167, 49, 171, 62, 116, 11, 46, 190, 184, 154, 81, 62, 82, 10, 211, 189, 127, 61, 112, 190, 7, 148, 74, 62, 92, 126, 174, 189, 245, 158, 137, 189, 86, 111, 73, 191, 165, 126, 200, 61, 7, 58, 26, 191, 214, 212, 56, 62, 91, 204, 126, 191, 248, 138, 150, 62, 199, 12, 246, 188, 189, 133, 160, 62, 21, 84, 187, 61, 155, 217, 31, 188, 125, 147, 193, 190, 168, 7, 16, 189, 165, 0, 238, 189, 113, 160, 50, 60, 248, 206, 140, 62, 155, 39, 30, 62, 121, 183, 176, 189, 28, 115, 30, 190, 215, 199, 10, 190, 133, 28, 130, 62, 233, 39, 1, 189, 197, 223, 247, 62, 186, 159, 202, 61, 189, 88, 195, 61, 186, 165, 21, 62, 7, 136, 28, 191, 75, 16, 179, 62, 111, 120, 129, 187, 167, 100, 194, 189, 247, 91, 67, 62, 68, 48, 16, 190, 224, 35, 15, 190, 8, 126, 185, 61, 51, 92, 34, 190, 42, 91, 29, 190, 58, 248, 107, 59, 190, 190, 4, 190, 127, 121, 38, 190, 60, 97, 87, 59, 65, 112, 63, 190, 112, 212, 12, 62, 71, 167, 151, 188, 142, 56, 47, 188, 98, 222, 17, 190, 117, 22, 16, 190, 11, 32, 146, 189, 132, 3, 60, 61, 204, 116, 153, 61, 94, 14, 182, 189, 167, 6, 136, 61, 212, 87, 216, 189, 234, 226, 185, 60, 110, 68, 1, 190, 69, 28, 199, 189, 19, 157, 17, 62, 161, 75, 217, 61, 179, 170, 219, 61, 35, 130, 131, 61, 72, 95, 52, 190, 115, 180, 77, 61, 240, 81, 59, 189, 69, 229, 187, 188, 39, 186, 155, 61, 97, 187, 253, 184, 4, 63, 52, 59, 39, 246, 43, 61, 123, 180, 41, 60, 237, 132, 56, 190, 64, 107, 137, 189, 160, 62, 166, 61, 253, 167, 23, 188, 181, 7, 49, 190, 233, 55, 192, 188, 224, 54, 113, 190, 70, 25, 142, 61, 19, 5, 172, 61, 5, 115, 29, 62, 104, 124, 222, 61, 234, 122, 45, 190, 244, 19, 196, 186, 60, 138, 250, 189, 39, 224, 92, 189, 81, 222, 41, 189, 24, 78, 254, 189, 60, 88, 96, 188, 11, 15, 1, 61, 130, 161, 189, 188, 187, 11, 221, 60, 129, 189, 195, 61, 251, 67, 8, 190, 72, 64, 26, 188, 80, 78, 132, 189, 240, 39, 131, 61, 89, 246, 22, 190, 233, 201, 70, 189, 161, 186, 144, 60, 108, 158, 245, 189, 125, 216, 120, 190, 7, 63, 31, 62, 89, 118, 151, 186, 24, 158, 98, 61, 64, 111, 47, 62, 33, 239, 179, 190, 200, 172, 4, 188, 111, 20, 205, 189, 191, 136, 144, 190, 22, 139, 105, 190, 52, 246, 141, 61, 84, 100, 228, 190, 77, 25, 79, 190, 211, 43, 161, 188, 63, 236, 158, 188, 93, 3, 169, 60, 0, 10, 156, 183, 7, 252, 181, 189, 42, 92, 230, 62, 251, 126, 15, 191, 20, 143, 232, 62, 98, 175, 124, 62, 98, 14, 192, 190, 6, 114, 14, 190, 99, 110, 157, 62, 18, 251, 104, 60, 81, 62, 68, 191, 226, 39, 1, 62, 122, 26, 22, 62, 65, 139, 114, 190, 208, 62, 107, 190, 195, 121, 126, 62, 33, 74, 85, 190, 25, 209, 198, 61, 241, 78, 133, 190, 115, 210, 20, 62, 23, 18, 100, 189, 229, 45, 129, 60, 162, 6, 85, 62, 226, 254, 62, 190, 237, 173, 81, 190, 254, 109, 96, 60, 216, 0, 151, 191, 19, 82, 252, 190, 122, 1, 157, 189, 141, 196, 106, 189, 30, 148, 154, 190, 29, 66, 205, 189, 163, 162, 220, 60, 194, 191, 128, 62, 8, 241, 153, 61, 223, 153, 229, 190, 233, 30, 106, 62, 5, 108, 121, 62, 138, 147, 133, 62, 45, 45, 202, 61, 105, 101, 17, 190, 134, 0, 141, 61, 144, 29, 157, 190, 221, 35, 117, 190, 143, 83, 153, 189, 200, 48, 101, 61, 30, 8, 198, 61, 78, 67, 20, 191, 220, 3, 236, 189, 57, 111, 157, 190, 249, 231, 3, 190, 20, 60, 8, 190, 92, 105, 235, 61, 46, 111, 84, 191, 94, 145, 235, 62, 14, 57, 222, 189, 136, 21, 63, 191, 145, 201, 1, 190, 157, 152, 108, 190, 143, 183, 97, 191, 1, 175, 57, 191, 43, 121, 41, 189, 115, 173, 113, 189, 94, 212, 237, 62, 211, 177, 208, 189, 153, 170, 78, 62, 81, 209, 6, 63, 219, 166, 183, 191, 194, 158, 219, 62, 212, 127, 172, 61, 55, 240, 195, 190, 81, 144, 47, 62, 146, 63, 174, 190, 94, 113, 190, 62, 182, 189, 188, 191, 230, 168, 134, 62, 99, 140, 105, 61, 239, 87, 181, 191, 178, 31, 25, 191, 191, 48, 169, 190, 50, 65, 23, 191, 137, 63, 240, 190, 176, 148, 49, 190, 168, 89, 16, 191, 150, 169, 5, 61, 196, 226, 96, 190, 62, 155, 185, 61, 56, 175, 146, 189, 139, 109, 18, 191, 97, 126, 234, 189, 180, 232, 113, 61, 226, 254, 73, 191, 84, 141, 68, 191, 189, 157, 124, 189, 93, 116, 241, 61, 151, 144, 241, 61, 242, 161, 127, 189, 44, 216, 26, 62, 129, 163, 3, 63, 157, 15, 167, 191, 4, 216, 129, 62, 56, 184, 3, 62, 129, 32, 40, 190, 147, 224, 187, 61, 210, 166, 168, 187, 78, 36, 17, 62, 230, 20, 161, 191, 221, 183, 113, 189, 54, 149, 238, 61, 53, 153, 172, 191, 36, 252, 197, 189, 69, 30, 12, 62, 117, 136, 234, 190, 107, 220, 21, 60, 62, 8, 28, 190, 228, 170, 137, 62, 196, 95, 129, 62, 83, 117, 0, 190, 118, 74, 170, 190, 232, 60, 197, 191, 119, 128, 10, 63, 239, 76, 150, 61, 42, 23, 168, 62, 241, 211, 70, 62, 3, 26, 89, 62, 61, 95, 47, 191, 143, 239, 37, 191, 84, 196, 255, 61, 128, 181, 188, 60, 241, 210, 154, 190, 113, 140, 146, 190, 63, 41, 37, 62, 49, 0, 12, 189, 122, 43, 27, 190, 74, 197, 144, 62, 91, 127, 160, 189, 195, 228, 233, 62, 73, 78, 134, 189, 69, 244, 125, 190, 58, 85, 118, 61, 251, 184, 137, 61, 30, 1, 96, 185, 48, 16, 211, 61, 210, 43, 135, 190, 41, 227, 138, 188, 161, 40, 13, 190, 58, 86, 16, 190, 36, 60, 100, 62, 176, 121, 243, 61, 144, 84, 7, 190, 63, 28, 201, 190, 132, 35, 255, 189, 138, 174, 131, 62, 89, 255, 235, 60, 60, 242, 58, 62, 60, 251, 131, 188, 230, 29, 235, 60, 57, 47, 180, 187, 200, 68, 103, 60, 28, 221, 147, 189, 62, 232, 64, 190, 53, 29, 91, 60, 86, 145, 175, 189, 69, 249, 17, 62, 74, 87, 14, 62, 103, 123, 155, 190, 24, 103, 195, 189, 235, 31, 39, 190, 236, 215, 127, 62, 54, 158, 209, 189, 26, 79, 134, 189, 58, 106, 116, 61, 25, 8, 198, 188, 11, 6, 2, 62, 26, 83, 170, 62, 90, 230, 155, 61, 119, 65, 73, 190, 233, 134, 93, 190, 140, 244, 24, 190, 65, 117, 30, 189, 2, 78, 6, 62, 25, 90, 158, 188, 242, 64, 68, 189, 17, 98, 221, 61, 165, 115, 170, 188, 92, 141, 47, 190, 58, 115, 197, 189, 63, 7, 37, 189, 171, 145, 244, 188, 170, 10, 94, 188, 189, 79, 37, 61, 251, 0, 101, 189, 141, 241, 198, 189, 221, 27, 208, 59, 188, 200, 160, 189, 6, 117, 139, 61, 187, 144, 196, 61, 122, 70, 221, 60, 2, 209, 205, 188, 235, 35, 11, 190, 101, 210, 78, 190, 128, 64, 129, 189, 1, 211, 220, 189, 198, 206, 71, 61, 25, 32, 28, 190, 236, 52, 173, 189, 98, 33, 239, 61, 140, 157, 178, 60, 162, 170, 14, 190, 70, 127, 53, 62, 186, 242, 26, 62, 196, 203, 230, 61, 81, 135, 42, 62, 103, 149, 143, 62, 123, 99, 47, 62, 96, 55, 162, 60, 45, 12, 39, 190, 253, 242, 67, 61, 63, 196, 1, 62, 65, 54, 33, 62, 224, 249, 103, 190, 252, 18, 179, 189, 243, 36, 179, 189, 233, 133, 203, 189, 5, 119, 136, 62, 152, 16, 182, 62, 253, 58, 216, 190, 96, 149, 147, 62, 252, 162, 148, 61, 112, 7, 21, 62, 5, 119, 45, 62, 211, 21, 74, 62, 162, 128, 88, 62, 9, 85, 30, 62, 75, 247, 27, 62, 118, 40, 5, 189, 254, 212, 71, 189, 245, 35, 133, 62, 23, 55, 177, 62, 132, 182, 110, 190, 221, 49, 212, 60, 35, 77, 74, 190, 46, 10, 139, 60, 97, 122, 154, 190, 104, 172, 200, 60, 38, 14, 185, 61, 132, 243, 50, 62, 127, 247, 249, 189, 202, 150, 144, 61, 238, 128, 205, 60, 114, 113, 254, 61, 59, 104, 240, 60, 240, 162, 189, 61, 139, 239, 156, 189, 255, 185, 93, 189, 30, 15, 0, 61, 241, 254, 8, 62, 178, 80, 142, 61, 202, 136, 164, 190, 104, 176, 46, 61, 22, 141, 132, 60, 87, 25, 127, 62, 216, 87, 95, 61, 107, 30, 9, 190, 251, 178, 83, 189, 45, 123, 220, 188, 73, 121, 212, 61, 17, 98, 162, 190, 27, 216, 8, 62, 101, 249, 64, 60, 2, 44, 177, 62, 103, 119, 225, 60, 255, 205, 97, 190, 188, 96, 124, 61, 9, 77, 32, 190, 122, 226, 138, 62, 199, 250, 80, 62, 144, 233, 112, 61, 4, 44, 94, 190, 144, 40, 233, 189, 199, 157, 2, 63, 99, 168, 228, 61, 77, 104, 37, 188, 18, 79, 234, 62, 24, 18, 180, 62, 75, 135, 94, 190, 126, 134, 199, 190, 151, 103, 129, 61, 102, 91, 9, 62, 206, 52, 79, 190, 161, 168, 2, 190, 102, 242, 170, 62, 230, 139, 175, 60, 170, 15, 78, 62, 85, 17, 129, 62, 109, 16, 105, 190, 221, 12, 30, 62, 96, 178, 88, 190, 28, 57, 162, 62, 110, 55, 211, 61, 59, 64, 190, 60, 71, 215, 188, 62, 82, 193, 30, 189, 40, 14, 21, 63, 71, 102, 47, 190, 118, 59, 133, 62, 8, 149, 16, 62, 17, 238, 222, 62, 196, 189, 113, 61, 181, 58, 160, 189, 104, 54, 207, 190, 20, 74, 168, 58, 165, 34, 155, 62, 18, 147, 54, 62, 209, 243, 148, 61, 196, 215, 102, 62, 90, 227, 151, 62, 216, 202, 156, 188, 19, 8, 173, 190, 43, 115, 62, 189, 245, 34, 48, 62, 20, 178, 111, 189, 97, 167, 224, 189, 248, 126, 82, 61, 28, 159, 119, 190, 13, 59, 49, 190, 177, 3, 166, 189, 178, 48, 4, 188, 73, 190, 36, 62, 146, 250, 190, 190, 138, 55, 179, 61, 246, 102, 250, 188, 1, 129, 21, 191, 37, 21, 176, 61, 28, 241, 22, 191, 140, 187, 230, 190, 178, 165, 143, 189, 143, 227, 252, 190, 135, 88, 172, 61, 123, 201, 52, 191, 180, 166, 89, 62, 182, 219, 35, 62, 22, 230, 208, 62, 1, 43, 42, 60, 222, 67, 84, 190, 52, 17, 103, 189, 126, 143, 236, 61, 111, 196, 146, 189, 217, 119, 108, 190, 51, 55, 154, 62, 254, 166, 106, 62, 247, 225, 195, 61, 251, 103, 36, 190, 97, 187, 205, 61, 17, 111, 30, 63, 91, 68, 25, 191, 223, 102, 135, 62, 221, 233, 6, 61, 10, 82, 102, 190, 88, 3, 148, 62, 222, 194, 76, 190, 115, 30, 182, 62, 56, 113, 198, 190, 122, 156, 11, 190, 208, 38, 144, 62, 166, 105, 94, 190, 55, 104, 166, 190, 3, 68, 227, 190, 74, 97, 188, 188, 191, 137, 98, 190, 147, 123, 104, 190, 105, 66, 196, 190, 52, 149, 232, 60, 176, 53, 60, 62, 201, 134, 202, 61, 206, 111, 188, 62, 247, 142, 11, 189, 175, 96, 202, 61, 201, 234, 92, 190, 181, 58, 59, 190, 253, 205, 195, 187, 194, 0, 123, 62, 249, 248, 221, 61, 211, 217, 40, 62, 203, 253, 48, 189, 126, 203, 68, 61, 184, 188, 157, 189, 126, 17, 30, 189, 158, 57, 139, 62, 115, 78, 217, 61, 10, 19, 184, 61, 105, 102, 9, 190, 33, 70, 154, 189, 145, 222, 157, 189, 141, 74, 152, 190, 101, 120, 187, 190, 21, 216, 111, 62, 148, 232, 161, 190, 157, 46, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 94, 5, 61, 160, 170, 162, 61, 104, 123, 37, 61, 90, 238, 183, 189, 122, 132, 100, 189, 38, 58, 68, 62, 39, 255, 183, 60, 217, 243, 92, 189, 138, 47, 188, 189, 69, 231, 69, 189, 70, 238, 197, 60, 229, 44, 27, 61, 53, 34, 115, 62, 180, 49, 158, 62, 50, 208, 88, 61, 104, 1, 42, 62, 230, 174, 156, 189, 183, 7, 46, 190, 40, 180, 144, 189, 44, 93, 78, 187, 67, 126, 68, 190, 201, 254, 158, 60, 38, 57, 149, 62, 129, 141, 75, 62, 133, 142, 208, 61, 37, 89, 254, 188, 239, 214, 238, 60, 74, 192, 115, 62, 155, 222, 69, 62, 121, 63, 253, 189, 244, 219, 72, 62, 248, 210, 136, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 232, 197, 62, 99, 157, 205, 63, 82, 209, 200, 190, 94, 202, 44, 190, 44, 254, 46, 190, 121, 37, 234, 62, 99, 170, 52, 190, 201, 68, 253, 60, 147, 119, 164, 189, 149, 130, 166, 190, 180, 153, 120, 63, 225, 233, 78, 190, 245, 130, 2, 191, 38, 251, 162, 62, 8, 238, 107, 63, 239, 69, 200, 58, 180, 175, 82, 190, 11, 237, 255, 61, 19, 135, 35, 189, 131, 187, 96, 190, 28, 53, 136, 190, 113, 214, 159, 191, 26, 204, 49, 191, 116, 141, 53, 63, 78, 117, 7, 188, 78, 213, 23, 59, 144, 166, 75, 62, 78, 165, 67, 61, 250, 122, 143, 62, 89, 253, 222, 190, 2, 69, 27, 191, 11, 205, 26, 190, 132, 145, 159, 190, 60, 166, 189, 60, 83, 193, 127, 190, 47, 112, 148, 188, 212, 123, 5, 190, 43, 91, 173, 189, 66, 62, 138, 189, 14, 181, 212, 60, 245, 8, 190, 61, 18, 221, 27, 190, 202, 114, 202, 61, 40, 185, 157, 61, 186, 48, 60, 190, 241, 233, 237, 189, 254, 110, 41, 62, 221, 176, 88, 190, 122, 122, 237, 62, 24, 33, 232, 189, 170, 38, 104, 61, 147, 82, 11, 191, 113, 145, 172, 62, 38, 29, 159, 62, 56, 191, 166, 190, 92, 26, 182, 61, 147, 243, 181, 61, 42, 51, 161, 61, 187, 193, 249, 189, 135, 228, 114, 190, 188, 92, 183, 61, 179, 173, 148, 62, 180, 112, 31, 190, 132, 199, 58, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {170, 30, 6, 189, 46, 252, 198, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {220, 236, 85, 63, 19, 189, 70, 191, 134, 249, 198, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {217, 219, 29, 64, 18, 204, 86, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0080/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}