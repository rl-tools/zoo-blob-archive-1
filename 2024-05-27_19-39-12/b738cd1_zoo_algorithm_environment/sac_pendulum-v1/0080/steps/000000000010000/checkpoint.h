// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 25, 79, 63, 118, 255, 55, 191, 1, 56, 150, 190, 142, 43, 57, 62, 232, 26, 63, 63, 26, 169, 27, 63, 11, 94, 82, 63, 143, 103, 61, 191, 201, 181, 176, 190, 222, 165, 186, 62, 177, 108, 1, 60, 2, 131, 14, 63, 60, 222, 180, 62, 39, 36, 87, 191, 31, 103, 68, 190, 188, 122, 150, 62, 216, 48, 181, 189, 57, 180, 110, 190, 93, 187, 179, 189, 176, 241, 136, 63, 187, 131, 8, 63, 145, 233, 237, 59, 99, 132, 55, 63, 45, 232, 20, 62, 109, 253, 13, 63, 55, 170, 9, 63, 146, 171, 131, 62, 20, 252, 43, 190, 167, 7, 55, 191, 122, 12, 183, 62, 78, 172, 95, 188, 62, 17, 2, 191, 12, 238, 11, 191, 170, 16, 254, 62, 102, 214, 46, 191, 216, 18, 149, 62, 100, 206, 230, 190, 182, 204, 72, 188, 244, 43, 67, 63, 126, 59, 90, 190, 254, 16, 12, 191, 103, 154, 215, 62, 63, 78, 6, 62, 17, 49, 153, 63, 167, 153, 247, 62, 45, 199, 239, 62, 129, 82, 109, 63, 140, 191, 180, 62, 4, 40, 46, 191, 250, 199, 89, 191, 104, 86, 27, 190, 107, 33, 238, 62, 118, 19, 245, 190, 157, 115, 215, 190, 64, 88, 147, 190, 114, 244, 93, 63, 45, 159, 117, 189, 254, 108, 14, 191, 180, 28, 155, 191, 205, 144, 151, 190, 126, 53, 45, 191, 77, 148, 91, 63, 73, 252, 8, 63, 0, 163, 4, 63, 49, 132, 84, 63, 7, 124, 164, 62, 27, 64, 193, 62, 42, 10, 67, 63, 231, 154, 146, 60, 18, 173, 19, 190, 19, 117, 32, 63, 244, 188, 9, 190, 179, 198, 197, 190, 151, 255, 122, 63, 88, 189, 173, 186, 114, 191, 11, 63, 160, 156, 58, 191, 51, 191, 63, 190, 131, 231, 157, 190, 96, 20, 14, 63, 62, 233, 228, 190, 171, 159, 181, 190, 113, 224, 147, 63, 197, 231, 192, 62, 35, 136, 148, 61, 141, 69, 166, 191, 16, 229, 32, 191, 177, 203, 103, 190, 89, 213, 46, 63, 216, 39, 138, 189, 1, 201, 163, 190, 178, 17, 118, 63, 189, 158, 87, 62, 164, 142, 7, 191, 40, 188, 56, 63, 55, 57, 63, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 176, 21, 191, 61, 27, 160, 190, 205, 68, 22, 191, 163, 17, 41, 60, 18, 212, 249, 188, 75, 237, 213, 62, 149, 208, 44, 62, 86, 66, 226, 62, 205, 240, 3, 191, 204, 137, 192, 190, 48, 243, 171, 189, 143, 71, 25, 63, 213, 153, 63, 190, 31, 160, 134, 190, 226, 167, 14, 62, 144, 53, 121, 190, 182, 218, 224, 62, 154, 245, 159, 62, 126, 65, 6, 190, 6, 2, 141, 190, 192, 134, 197, 190, 90, 203, 10, 63, 177, 89, 57, 63, 58, 43, 3, 62, 79, 245, 33, 188, 15, 65, 117, 62, 192, 74, 241, 189, 167, 109, 67, 190, 214, 144, 247, 58, 11, 195, 11, 63, 105, 81, 105, 190, 151, 109, 139, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 208, 137, 188, 78, 69, 149, 190, 154, 92, 251, 61, 58, 136, 100, 59, 169, 70, 30, 190, 201, 198, 204, 60, 91, 35, 255, 190, 230, 129, 42, 189, 106, 134, 190, 190, 1, 21, 49, 190, 212, 11, 100, 189, 4, 213, 208, 62, 45, 83, 95, 190, 119, 238, 186, 190, 207, 64, 202, 190, 104, 38, 26, 190, 20, 221, 175, 190, 130, 200, 124, 61, 31, 108, 25, 62, 117, 232, 40, 190, 158, 157, 69, 190, 196, 59, 58, 62, 90, 7, 20, 62, 200, 222, 10, 61, 164, 79, 240, 189, 200, 194, 182, 62, 190, 87, 145, 62, 153, 48, 77, 191, 97, 146, 226, 61, 194, 38, 96, 189, 127, 249, 62, 191, 58, 137, 113, 61, 130, 238, 186, 190, 246, 33, 2, 191, 7, 82, 194, 190, 101, 111, 78, 191, 245, 18, 75, 189, 39, 22, 168, 190, 35, 246, 162, 62, 201, 152, 205, 60, 217, 102, 143, 190, 184, 174, 52, 62, 118, 253, 169, 190, 110, 170, 136, 191, 220, 106, 177, 61, 60, 127, 26, 187, 156, 221, 83, 191, 83, 41, 123, 190, 0, 63, 97, 61, 229, 19, 19, 189, 39, 51, 128, 61, 140, 5, 33, 190, 156, 192, 143, 62, 166, 12, 134, 191, 172, 71, 10, 62, 47, 40, 209, 61, 172, 103, 183, 60, 44, 171, 47, 190, 14, 211, 6, 191, 3, 178, 213, 62, 157, 74, 8, 191, 216, 93, 160, 62, 211, 243, 58, 62, 48, 147, 95, 61, 31, 115, 230, 190, 196, 46, 57, 190, 144, 143, 27, 191, 178, 164, 126, 61, 78, 137, 157, 190, 164, 39, 55, 62, 45, 219, 85, 62, 6, 195, 162, 62, 16, 73, 139, 190, 252, 31, 176, 62, 193, 251, 40, 187, 74, 180, 178, 61, 249, 82, 76, 62, 182, 25, 84, 62, 194, 180, 36, 61, 255, 60, 229, 60, 74, 11, 4, 191, 104, 3, 151, 61, 212, 244, 57, 189, 225, 187, 53, 188, 202, 83, 127, 62, 245, 69, 60, 62, 181, 167, 41, 61, 221, 240, 161, 62, 29, 180, 234, 61, 248, 246, 217, 184, 155, 247, 202, 187, 223, 216, 150, 60, 105, 52, 196, 190, 141, 35, 55, 62, 72, 152, 21, 62, 143, 209, 134, 62, 96, 86, 243, 189, 254, 240, 182, 189, 57, 154, 3, 190, 89, 227, 19, 190, 97, 93, 31, 190, 223, 16, 163, 189, 223, 57, 253, 187, 65, 237, 2, 190, 248, 195, 114, 188, 41, 183, 6, 190, 252, 68, 215, 60, 40, 180, 135, 61, 252, 40, 14, 189, 203, 140, 42, 61, 48, 251, 5, 62, 99, 171, 105, 189, 92, 87, 225, 60, 246, 218, 4, 190, 119, 29, 27, 62, 244, 23, 168, 188, 240, 214, 27, 190, 78, 164, 25, 62, 212, 145, 35, 190, 23, 62, 27, 190, 225, 238, 76, 61, 191, 238, 21, 62, 183, 224, 255, 61, 252, 3, 243, 61, 57, 211, 157, 189, 116, 147, 7, 190, 98, 198, 54, 61, 217, 6, 181, 61, 210, 163, 7, 190, 190, 146, 174, 60, 3, 220, 46, 61, 182, 191, 205, 61, 20, 83, 51, 62, 222, 221, 128, 189, 70, 101, 216, 189, 173, 106, 37, 188, 91, 183, 72, 187, 52, 243, 27, 190, 31, 218, 181, 61, 102, 133, 16, 187, 12, 18, 153, 61, 10, 229, 37, 190, 83, 35, 86, 190, 58, 37, 243, 61, 195, 181, 139, 188, 197, 73, 203, 189, 71, 194, 197, 61, 121, 11, 153, 61, 80, 79, 234, 61, 69, 77, 197, 186, 105, 157, 142, 60, 136, 86, 194, 61, 100, 150, 129, 189, 182, 226, 33, 190, 139, 41, 234, 189, 227, 165, 47, 61, 199, 108, 122, 189, 60, 92, 45, 190, 208, 199, 154, 61, 207, 186, 44, 190, 129, 246, 108, 61, 85, 8, 160, 190, 161, 220, 12, 62, 1, 220, 230, 189, 125, 54, 218, 59, 240, 227, 29, 61, 26, 175, 231, 189, 232, 55, 159, 189, 225, 203, 135, 191, 205, 111, 186, 62, 108, 7, 145, 61, 202, 171, 2, 62, 22, 98, 60, 62, 166, 64, 216, 62, 203, 117, 106, 190, 206, 100, 211, 190, 217, 110, 237, 61, 173, 232, 75, 62, 245, 134, 216, 189, 177, 180, 254, 189, 255, 246, 63, 62, 6, 1, 21, 62, 240, 247, 204, 189, 23, 44, 59, 61, 111, 2, 183, 190, 173, 89, 172, 62, 21, 53, 141, 189, 172, 98, 179, 190, 43, 151, 240, 61, 147, 231, 222, 60, 105, 146, 131, 62, 119, 115, 141, 62, 222, 132, 147, 62, 145, 77, 244, 61, 99, 46, 50, 62, 25, 165, 48, 62, 147, 163, 140, 62, 195, 107, 138, 62, 104, 99, 64, 189, 103, 42, 83, 61, 176, 184, 119, 190, 83, 236, 169, 62, 99, 234, 129, 190, 89, 212, 69, 62, 218, 39, 100, 62, 26, 78, 163, 62, 96, 231, 178, 61, 79, 141, 135, 189, 9, 14, 144, 190, 205, 191, 157, 190, 178, 230, 143, 62, 220, 100, 34, 190, 243, 140, 227, 60, 113, 85, 161, 190, 128, 33, 166, 189, 111, 44, 212, 62, 5, 95, 156, 62, 151, 207, 30, 62, 120, 98, 45, 190, 229, 66, 104, 62, 20, 196, 167, 190, 0, 226, 231, 188, 193, 219, 170, 62, 135, 117, 219, 62, 162, 38, 240, 189, 221, 66, 209, 189, 76, 68, 209, 189, 220, 150, 23, 190, 177, 98, 190, 189, 39, 128, 95, 189, 215, 142, 10, 61, 80, 19, 223, 60, 98, 186, 47, 62, 154, 214, 71, 189, 183, 178, 205, 189, 127, 144, 22, 62, 16, 239, 227, 189, 79, 25, 209, 61, 249, 137, 45, 190, 57, 165, 171, 189, 152, 126, 112, 189, 236, 145, 63, 189, 101, 133, 234, 189, 139, 168, 12, 62, 28, 141, 134, 189, 241, 52, 89, 189, 34, 101, 75, 61, 226, 64, 30, 190, 155, 82, 4, 62, 1, 23, 97, 189, 51, 184, 252, 189, 165, 217, 26, 188, 10, 76, 210, 189, 196, 212, 240, 189, 9, 228, 224, 188, 58, 254, 219, 187, 41, 18, 195, 188, 208, 127, 63, 189, 132, 229, 13, 62, 242, 172, 246, 188, 97, 120, 69, 190, 238, 211, 147, 188, 107, 15, 222, 187, 129, 154, 1, 190, 178, 139, 188, 61, 152, 248, 40, 189, 210, 22, 70, 189, 174, 110, 10, 60, 130, 71, 147, 61, 95, 79, 33, 190, 241, 224, 7, 190, 35, 132, 213, 60, 195, 87, 43, 190, 178, 4, 78, 61, 160, 214, 5, 189, 189, 206, 236, 189, 182, 192, 250, 61, 159, 212, 230, 61, 23, 92, 51, 189, 132, 153, 146, 61, 12, 146, 46, 62, 105, 41, 13, 59, 25, 188, 31, 190, 10, 63, 17, 190, 211, 243, 215, 60, 98, 89, 64, 190, 170, 123, 12, 190, 85, 23, 242, 189, 109, 216, 19, 61, 121, 126, 184, 60, 19, 176, 49, 60, 98, 142, 109, 62, 30, 166, 42, 190, 97, 45, 43, 62, 79, 77, 100, 190, 173, 185, 71, 62, 202, 252, 116, 60, 213, 202, 18, 191, 113, 105, 152, 189, 140, 228, 114, 188, 110, 54, 217, 190, 253, 117, 200, 190, 23, 106, 132, 62, 157, 213, 179, 62, 92, 124, 234, 61, 138, 239, 12, 190, 250, 60, 198, 60, 6, 148, 28, 63, 104, 211, 80, 191, 52, 67, 204, 61, 105, 36, 57, 61, 115, 53, 139, 190, 217, 0, 62, 190, 114, 235, 92, 190, 53, 103, 107, 62, 186, 46, 132, 191, 2, 144, 135, 62, 201, 202, 17, 62, 100, 204, 97, 191, 154, 79, 145, 190, 249, 231, 152, 189, 97, 67, 202, 60, 129, 10, 100, 61, 213, 50, 16, 189, 195, 131, 231, 189, 243, 92, 18, 191, 193, 5, 57, 62, 197, 106, 100, 61, 175, 147, 131, 190, 179, 180, 20, 190, 107, 86, 233, 190, 183, 3, 19, 191, 148, 128, 200, 61, 69, 128, 41, 190, 87, 108, 141, 190, 151, 203, 167, 189, 131, 164, 176, 62, 199, 53, 225, 190, 167, 26, 153, 62, 122, 188, 143, 190, 192, 9, 212, 62, 154, 77, 50, 191, 10, 197, 238, 61, 118, 168, 146, 189, 145, 47, 155, 62, 169, 182, 23, 191, 73, 228, 218, 190, 108, 234, 191, 62, 93, 231, 16, 191, 250, 173, 26, 60, 31, 138, 7, 62, 240, 173, 59, 62, 150, 146, 158, 62, 58, 215, 62, 189, 165, 222, 0, 62, 160, 200, 116, 62, 243, 116, 64, 62, 29, 158, 35, 62, 212, 5, 19, 62, 26, 224, 249, 61, 191, 102, 234, 61, 79, 17, 134, 61, 122, 1, 167, 190, 219, 104, 27, 62, 187, 128, 190, 62, 97, 208, 112, 62, 123, 33, 8, 189, 210, 241, 1, 62, 43, 128, 195, 189, 101, 141, 88, 190, 219, 247, 168, 189, 155, 141, 145, 189, 179, 22, 175, 61, 227, 153, 136, 190, 49, 85, 117, 190, 185, 198, 41, 62, 65, 119, 156, 189, 0, 242, 19, 189, 42, 136, 26, 191, 142, 57, 32, 60, 112, 1, 76, 61, 54, 113, 159, 190, 239, 25, 60, 62, 206, 16, 202, 190, 58, 210, 24, 191, 120, 54, 77, 62, 253, 160, 103, 189, 113, 104, 149, 61, 44, 226, 103, 190, 227, 110, 26, 62, 249, 179, 104, 60, 156, 105, 236, 189, 242, 171, 124, 190, 125, 154, 67, 189, 8, 166, 59, 190, 173, 27, 163, 62, 10, 2, 151, 190, 175, 29, 68, 61, 98, 187, 162, 62, 88, 155, 162, 62, 247, 148, 202, 189, 92, 178, 164, 190, 176, 205, 163, 62, 40, 190, 53, 62, 190, 255, 3, 191, 88, 235, 153, 62, 153, 96, 48, 62, 95, 100, 240, 188, 85, 214, 229, 61, 155, 90, 174, 61, 44, 14, 128, 62, 181, 21, 22, 191, 163, 188, 79, 61, 171, 244, 0, 190, 179, 126, 62, 191, 82, 94, 171, 189, 223, 151, 118, 62, 231, 43, 10, 190, 23, 41, 113, 62, 79, 9, 49, 190, 67, 160, 39, 62, 214, 208, 82, 189, 238, 57, 0, 62, 232, 54, 217, 61, 147, 23, 3, 189, 187, 106, 169, 62, 142, 82, 113, 190, 243, 202, 157, 62, 233, 224, 121, 62, 61, 152, 155, 62, 246, 57, 231, 189, 23, 211, 139, 190, 4, 101, 246, 61, 32, 25, 215, 61, 127, 213, 167, 189, 66, 194, 250, 190, 232, 88, 96, 62, 82, 26, 62, 189, 101, 244, 53, 62, 36, 212, 224, 62, 127, 81, 95, 190, 130, 251, 141, 62, 113, 119, 53, 191, 134, 41, 22, 62, 13, 147, 152, 190, 110, 44, 4, 62, 126, 166, 206, 62, 206, 183, 75, 188, 166, 90, 99, 190, 165, 11, 221, 189, 78, 162, 68, 190, 2, 100, 217, 189, 237, 137, 38, 189, 67, 184, 141, 190, 71, 88, 169, 62, 120, 124, 57, 62, 13, 25, 65, 191, 107, 116, 181, 62, 55, 243, 9, 191, 111, 161, 18, 191, 79, 80, 85, 62, 69, 46, 140, 61, 190, 63, 192, 190, 251, 7, 159, 190, 225, 11, 138, 62, 87, 251, 202, 190, 58, 166, 48, 188, 233, 212, 141, 189, 210, 122, 141, 62, 24, 90, 148, 190, 2, 7, 253, 189, 100, 163, 139, 62, 168, 138, 3, 62, 43, 96, 91, 190, 185, 140, 222, 190, 77, 239, 144, 62, 136, 25, 25, 191, 152, 172, 92, 62, 56, 182, 66, 62, 26, 111, 8, 62, 53, 175, 8, 190, 94, 71, 147, 61, 254, 212, 198, 190, 205, 77, 121, 62, 36, 106, 93, 188, 43, 29, 234, 60, 31, 13, 224, 61, 245, 0, 242, 61, 75, 172, 136, 188, 223, 191, 54, 190, 171, 227, 104, 61, 242, 245, 54, 61, 125, 155, 53, 188, 236, 71, 67, 190, 143, 200, 8, 61, 28, 48, 244, 189, 171, 180, 219, 60, 27, 161, 131, 189, 80, 204, 179, 62, 101, 227, 29, 62, 217, 65, 93, 188, 113, 152, 235, 188, 202, 134, 119, 62, 59, 96, 33, 190, 225, 0, 183, 62, 254, 20, 62, 190, 38, 20, 65, 62, 225, 127, 84, 189, 64, 96, 35, 190, 124, 103, 98, 62, 30, 44, 206, 188, 248, 106, 218, 189, 24, 133, 21, 191, 219, 48, 14, 62, 50, 174, 198, 190, 209, 224, 105, 62, 248, 26, 80, 191, 115, 184, 154, 62, 91, 14, 31, 189, 18, 62, 146, 62, 80, 116, 135, 62, 84, 22, 158, 189, 72, 123, 172, 190, 56, 41, 137, 59, 48, 111, 36, 190, 3, 71, 96, 189, 36, 65, 141, 62, 119, 183, 128, 62, 233, 13, 150, 189, 175, 68, 5, 190, 49, 197, 14, 190, 4, 143, 154, 62, 154, 249, 22, 189, 223, 28, 246, 62, 46, 51, 191, 61, 245, 59, 183, 61, 205, 160, 0, 62, 44, 151, 15, 191, 66, 224, 192, 62, 16, 53, 130, 61, 138, 179, 168, 61, 48, 190, 241, 61, 216, 249, 70, 189, 225, 16, 167, 189, 8, 126, 185, 61, 148, 89, 31, 190, 42, 91, 29, 190, 59, 237, 144, 59, 190, 190, 4, 190, 145, 252, 38, 190, 56, 229, 137, 60, 142, 248, 52, 190, 215, 10, 12, 62, 71, 167, 151, 188, 142, 56, 47, 188, 120, 37, 18, 190, 55, 243, 14, 190, 11, 32, 146, 189, 65, 94, 116, 61, 28, 225, 163, 61, 94, 14, 182, 189, 216, 105, 133, 61, 223, 28, 199, 189, 234, 226, 185, 60, 70, 52, 238, 189, 106, 110, 180, 189, 246, 94, 28, 62, 28, 31, 234, 61, 75, 206, 241, 61, 35, 130, 131, 61, 136, 205, 47, 190, 93, 198, 127, 61, 240, 81, 59, 189, 148, 175, 51, 188, 182, 222, 173, 61, 61, 181, 3, 60, 4, 63, 52, 59, 52, 41, 53, 61, 123, 180, 41, 60, 51, 213, 56, 190, 61, 55, 14, 189, 59, 70, 166, 61, 228, 142, 185, 185, 18, 211, 30, 190, 227, 236, 42, 189, 169, 8, 104, 190, 70, 25, 142, 61, 215, 30, 169, 61, 13, 166, 34, 62, 94, 251, 233, 61, 208, 231, 38, 190, 133, 224, 72, 188, 217, 218, 180, 189, 213, 229, 90, 189, 81, 222, 41, 189, 74, 182, 253, 189, 73, 179, 139, 186, 72, 28, 31, 61, 167, 70, 2, 189, 187, 11, 221, 60, 87, 155, 195, 61, 197, 219, 238, 189, 72, 64, 26, 188, 76, 188, 38, 189, 121, 230, 131, 61, 241, 25, 19, 190, 150, 186, 194, 188, 161, 186, 144, 60, 112, 136, 50, 190, 255, 237, 236, 189, 53, 165, 199, 61, 150, 82, 197, 61, 227, 238, 57, 61, 65, 134, 43, 62, 123, 235, 168, 190, 183, 152, 101, 189, 107, 81, 209, 189, 93, 200, 154, 190, 5, 239, 109, 190, 220, 250, 254, 61, 110, 68, 216, 190, 202, 112, 36, 190, 91, 77, 186, 189, 106, 156, 153, 189, 108, 150, 142, 188, 61, 120, 238, 188, 25, 144, 9, 190, 232, 179, 176, 62, 198, 129, 7, 191, 29, 223, 219, 62, 228, 87, 112, 62, 230, 136, 139, 190, 235, 234, 50, 190, 240, 19, 153, 62, 65, 223, 166, 60, 18, 1, 19, 191, 119, 161, 11, 62, 154, 251, 37, 62, 190, 224, 166, 189, 194, 245, 52, 190, 11, 191, 177, 62, 147, 65, 84, 190, 120, 5, 56, 62, 17, 63, 99, 190, 6, 11, 76, 62, 47, 106, 130, 188, 100, 7, 178, 61, 218, 101, 40, 62, 148, 142, 94, 61, 237, 173, 81, 190, 164, 206, 239, 59, 103, 49, 81, 191, 100, 92, 233, 190, 122, 1, 157, 189, 161, 164, 201, 189, 248, 185, 82, 190, 145, 153, 90, 190, 179, 104, 91, 61, 173, 156, 139, 62, 78, 47, 205, 189, 142, 193, 207, 190, 69, 92, 198, 61, 6, 148, 157, 62, 31, 159, 112, 62, 59, 183, 3, 62, 148, 188, 102, 189, 237, 251, 87, 61, 21, 192, 115, 190, 144, 13, 105, 190, 242, 36, 143, 189, 42, 220, 215, 61, 227, 175, 148, 61, 40, 28, 34, 191, 135, 248, 250, 189, 31, 6, 183, 190, 235, 69, 55, 190, 115, 201, 70, 190, 209, 79, 6, 62, 134, 109, 56, 191, 47, 128, 146, 62, 41, 132, 59, 190, 45, 113, 54, 191, 121, 16, 8, 190, 247, 45, 224, 188, 171, 10, 87, 191, 9, 83, 44, 191, 8, 136, 25, 190, 83, 187, 144, 61, 195, 40, 201, 62, 139, 220, 218, 189, 4, 184, 49, 62, 176, 233, 215, 62, 20, 132, 172, 191, 65, 74, 129, 62, 92, 131, 205, 61, 155, 221, 185, 190, 88, 110, 12, 62, 33, 198, 193, 190, 84, 243, 203, 62, 101, 155, 177, 191, 197, 161, 125, 62, 108, 122, 200, 61, 1, 44, 180, 191, 129, 28, 11, 191, 129, 241, 132, 190, 240, 141, 81, 190, 63, 234, 210, 190, 54, 7, 141, 189, 40, 240, 252, 190, 106, 95, 29, 61, 234, 113, 201, 190, 41, 109, 204, 60, 176, 19, 60, 190, 216, 143, 26, 191, 192, 226, 202, 189, 211, 146, 222, 61, 35, 229, 55, 191, 66, 93, 53, 191, 248, 98, 68, 190, 97, 42, 231, 60, 181, 204, 145, 61, 247, 123, 134, 189, 37, 132, 239, 61, 134, 3, 214, 62, 180, 24, 146, 191, 176, 67, 88, 62, 110, 127, 219, 61, 18, 201, 20, 190, 191, 171, 107, 61, 254, 29, 190, 60, 216, 42, 15, 62, 240, 71, 147, 191, 194, 193, 128, 59, 134, 72, 150, 61, 226, 180, 174, 191, 131, 173, 246, 189, 99, 84, 3, 62, 70, 244, 184, 190, 169, 94, 207, 58, 217, 160, 82, 190, 115, 24, 128, 62, 31, 177, 120, 62, 220, 227, 167, 60, 121, 244, 127, 190, 232, 130, 151, 191, 155, 130, 23, 63, 98, 178, 29, 61, 68, 44, 152, 62, 31, 190, 116, 62, 234, 140, 133, 62, 175, 227, 0, 191, 24, 13, 242, 190, 85, 81, 5, 62, 167, 2, 222, 60, 55, 78, 145, 190, 19, 246, 82, 190, 125, 143, 68, 62, 60, 64, 187, 60, 225, 46, 243, 189, 240, 152, 102, 62, 123, 96, 76, 189, 91, 77, 230, 62, 119, 116, 235, 189, 112, 146, 53, 190, 238, 86, 216, 60, 255, 97, 170, 61, 194, 119, 3, 61, 46, 179, 59, 61, 224, 194, 139, 190, 126, 194, 186, 60, 114, 47, 16, 190, 232, 117, 243, 189, 246, 80, 64, 62, 159, 237, 246, 61, 250, 103, 183, 189, 156, 218, 160, 190, 93, 5, 184, 59, 147, 67, 139, 62, 62, 54, 143, 61, 6, 145, 28, 62, 80, 241, 149, 60, 54, 62, 67, 61, 120, 129, 83, 61, 223, 221, 217, 61, 160, 188, 68, 59, 26, 244, 75, 190, 85, 215, 248, 189, 14, 217, 224, 59, 233, 151, 54, 62, 196, 144, 47, 62, 65, 152, 153, 190, 105, 245, 22, 190, 129, 86, 136, 190, 56, 197, 70, 62, 15, 222, 180, 189, 186, 109, 195, 188, 228, 208, 70, 61, 96, 133, 251, 59, 158, 175, 55, 62, 138, 98, 130, 62, 128, 148, 223, 61, 160, 87, 70, 190, 191, 22, 59, 190, 129, 4, 245, 189, 92, 2, 218, 187, 228, 197, 23, 62, 137, 114, 138, 58, 178, 155, 225, 188, 124, 68, 253, 61, 165, 115, 170, 188, 215, 123, 40, 190, 97, 92, 164, 189, 137, 151, 36, 189, 171, 145, 244, 188, 153, 101, 36, 60, 250, 105, 137, 61, 251, 0, 101, 189, 75, 151, 165, 189, 29, 189, 254, 59, 188, 200, 160, 189, 242, 168, 140, 61, 70, 221, 205, 61, 155, 174, 248, 60, 53, 117, 153, 188, 175, 16, 9, 190, 1, 218, 58, 190, 212, 146, 115, 189, 24, 20, 212, 189, 82, 79, 128, 61, 174, 21, 5, 190, 144, 44, 167, 189, 90, 69, 240, 61, 155, 122, 99, 60, 63, 34, 63, 190, 227, 131, 43, 62, 38, 157, 149, 61, 54, 125, 150, 61, 108, 82, 29, 62, 49, 38, 139, 62, 65, 144, 52, 62, 88, 198, 185, 189, 113, 131, 5, 190, 190, 32, 71, 60, 213, 83, 192, 61, 147, 67, 50, 62, 124, 71, 69, 190, 90, 125, 172, 189, 5, 12, 15, 190, 204, 80, 251, 189, 21, 71, 137, 62, 231, 26, 172, 62, 171, 226, 201, 190, 103, 74, 141, 62, 190, 105, 143, 61, 228, 27, 13, 62, 182, 202, 218, 61, 19, 34, 37, 62, 65, 214, 76, 62, 228, 2, 220, 61, 23, 137, 161, 61, 17, 220, 145, 189, 153, 32, 69, 189, 50, 182, 29, 62, 211, 226, 145, 62, 24, 29, 75, 190, 64, 149, 5, 60, 211, 136, 29, 190, 68, 35, 72, 189, 51, 162, 117, 190, 29, 84, 6, 61, 192, 219, 246, 61, 10, 33, 34, 62, 123, 206, 128, 190, 225, 180, 253, 61, 146, 14, 144, 61, 179, 162, 135, 61, 61, 231, 115, 61, 10, 239, 18, 62, 34, 166, 92, 189, 109, 37, 248, 189, 244, 23, 239, 61, 209, 107, 39, 62, 25, 207, 0, 59, 36, 190, 225, 189, 249, 27, 158, 61, 55, 239, 86, 188, 243, 218, 67, 62, 4, 154, 27, 61, 31, 6, 51, 190, 242, 11, 20, 189, 127, 253, 54, 189, 58, 159, 199, 61, 239, 45, 70, 190, 123, 218, 12, 62, 76, 91, 33, 188, 18, 131, 151, 62, 16, 224, 239, 60, 15, 121, 122, 190, 18, 94, 130, 61, 43, 63, 67, 190, 105, 161, 136, 62, 15, 178, 75, 62, 14, 135, 114, 61, 44, 51, 66, 190, 193, 142, 5, 190, 196, 101, 13, 63, 187, 168, 165, 61, 210, 211, 6, 188, 155, 147, 243, 62, 14, 177, 199, 62, 56, 118, 71, 190, 77, 221, 199, 190, 242, 160, 159, 61, 26, 59, 19, 62, 131, 72, 93, 190, 18, 20, 57, 189, 10, 72, 158, 62, 100, 240, 56, 61, 84, 68, 85, 62, 135, 145, 52, 62, 88, 125, 135, 190, 217, 34, 39, 62, 102, 98, 130, 190, 109, 199, 132, 62, 84, 162, 154, 61, 128, 41, 54, 60, 126, 202, 142, 62, 177, 199, 201, 189, 155, 4, 8, 63, 87, 183, 42, 190, 102, 119, 94, 62, 196, 249, 253, 61, 11, 37, 192, 62, 254, 254, 138, 61, 38, 147, 90, 189, 211, 229, 148, 190, 190, 161, 171, 61, 236, 140, 94, 62, 239, 64, 74, 62, 74, 59, 93, 188, 230, 238, 75, 62, 57, 86, 105, 62, 235, 102, 235, 60, 28, 174, 129, 190, 204, 119, 210, 58, 204, 208, 40, 62, 198, 23, 88, 190, 7, 149, 171, 189, 101, 21, 147, 61, 42, 147, 17, 190, 252, 47, 212, 189, 181, 144, 27, 60, 201, 182, 209, 61, 205, 156, 224, 61, 142, 66, 150, 190, 120, 40, 25, 62, 206, 161, 119, 189, 144, 209, 186, 190, 253, 125, 76, 62, 102, 8, 172, 190, 217, 196, 206, 190, 169, 4, 161, 189, 226, 98, 234, 190, 144, 57, 30, 62, 97, 173, 43, 191, 89, 245, 96, 62, 78, 139, 217, 61, 86, 84, 178, 62, 109, 25, 228, 189, 68, 79, 247, 189, 229, 43, 87, 189, 138, 125, 31, 62, 199, 31, 201, 189, 202, 88, 88, 190, 168, 155, 96, 62, 40, 207, 40, 62, 17, 17, 73, 60, 125, 227, 46, 190, 42, 168, 219, 61, 31, 232, 203, 62, 11, 41, 29, 191, 102, 43, 100, 62, 185, 223, 226, 60, 55, 15, 62, 190, 191, 106, 145, 62, 8, 234, 67, 190, 120, 198, 180, 62, 125, 130, 196, 190, 177, 34, 230, 189, 156, 72, 133, 62, 52, 98, 109, 190, 169, 145, 176, 190, 19, 102, 23, 190, 71, 32, 70, 187, 163, 61, 211, 61, 34, 87, 151, 189, 244, 95, 127, 189, 142, 122, 58, 188, 87, 235, 59, 60, 197, 119, 115, 189, 63, 108, 12, 62, 135, 164, 65, 189, 36, 98, 19, 62, 23, 113, 227, 189, 219, 170, 32, 190, 125, 16, 187, 189, 50, 232, 74, 60, 94, 9, 166, 189, 32, 163, 185, 61, 83, 160, 24, 189, 52, 112, 140, 61, 151, 128, 176, 189, 134, 37, 178, 61, 98, 34, 13, 62, 29, 13, 241, 188, 166, 131, 242, 60, 221, 52, 202, 189, 211, 136, 194, 187, 56, 179, 156, 189, 250, 248, 226, 189, 231, 208, 205, 189, 198, 174, 186, 61, 124, 88, 227, 189, 217, 84, 228, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 122, 25, 61, 178, 241, 132, 61, 190, 167, 160, 58, 90, 238, 183, 189, 122, 132, 100, 189, 163, 33, 60, 62, 250, 170, 141, 188, 217, 243, 92, 189, 138, 47, 188, 189, 169, 241, 10, 189, 41, 220, 202, 187, 112, 179, 215, 188, 224, 240, 129, 62, 248, 27, 156, 62, 105, 152, 167, 187, 71, 62, 26, 62, 5, 25, 188, 189, 115, 136, 38, 190, 16, 234, 93, 189, 122, 51, 143, 60, 14, 23, 17, 190, 77, 230, 250, 60, 85, 165, 154, 62, 134, 64, 71, 62, 101, 16, 190, 61, 1, 229, 183, 188, 216, 151, 166, 60, 244, 50, 100, 62, 36, 142, 78, 62, 250, 106, 27, 190, 207, 119, 82, 62, 139, 145, 136, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 249, 160, 62, 184, 81, 201, 63, 39, 63, 186, 190, 94, 202, 44, 190, 44, 254, 46, 190, 100, 61, 198, 62, 92, 138, 136, 190, 201, 68, 253, 60, 147, 119, 164, 189, 206, 143, 174, 190, 6, 237, 122, 63, 27, 254, 78, 190, 195, 22, 254, 190, 107, 54, 164, 62, 253, 247, 109, 63, 80, 53, 122, 189, 173, 134, 45, 190, 126, 166, 10, 62, 95, 38, 134, 189, 158, 43, 115, 190, 79, 136, 135, 190, 235, 63, 146, 191, 112, 102, 43, 191, 26, 122, 22, 63, 155, 192, 146, 60, 164, 221, 105, 189, 203, 198, 67, 62, 88, 66, 70, 61, 61, 240, 174, 62, 235, 145, 138, 190, 205, 213, 16, 191, 231, 204, 165, 60, 204, 122, 115, 190, 81, 88, 242, 61, 215, 221, 131, 190, 47, 112, 148, 188, 212, 123, 5, 190, 107, 95, 122, 189, 9, 199, 144, 189, 14, 181, 212, 60, 245, 8, 190, 61, 227, 77, 130, 189, 14, 54, 233, 60, 221, 199, 233, 60, 13, 147, 9, 190, 50, 191, 197, 189, 180, 148, 64, 62, 25, 22, 17, 190, 46, 227, 210, 62, 152, 167, 227, 189, 226, 202, 205, 61, 91, 212, 229, 190, 166, 217, 195, 62, 17, 187, 116, 62, 116, 209, 159, 190, 214, 176, 146, 61, 83, 145, 238, 60, 97, 21, 92, 61, 114, 244, 189, 189, 23, 218, 50, 190, 239, 102, 133, 61, 85, 147, 129, 62, 84, 228, 151, 189, 60, 135, 209, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 48, 68, 189, 98, 81, 160, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {205, 137, 249, 62, 65, 171, 5, 62, 240, 168, 155, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {188, 127, 201, 191, 92, 22, 173, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0080/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}