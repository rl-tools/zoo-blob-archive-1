// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 193, 54, 62, 146, 250, 174, 190, 32, 136, 206, 190, 12, 88, 139, 62, 20, 163, 183, 62, 81, 68, 16, 63, 62, 116, 120, 62, 42, 251, 0, 191, 111, 155, 252, 190, 70, 144, 177, 62, 214, 139, 72, 190, 158, 220, 239, 62, 65, 23, 18, 62, 238, 12, 3, 191, 24, 218, 202, 189, 209, 11, 24, 62, 42, 227, 116, 62, 109, 52, 31, 190, 55, 74, 86, 62, 69, 121, 112, 189, 246, 44, 10, 63, 151, 65, 175, 62, 105, 132, 139, 62, 71, 187, 140, 62, 181, 190, 203, 62, 160, 0, 17, 62, 166, 172, 205, 61, 220, 107, 136, 190, 148, 152, 133, 190, 31, 150, 218, 61, 7, 187, 204, 61, 252, 221, 39, 61, 208, 89, 13, 191, 64, 32, 229, 62, 141, 149, 199, 190, 82, 178, 62, 62, 86, 41, 50, 190, 203, 182, 244, 190, 102, 19, 104, 62, 147, 123, 137, 190, 112, 53, 236, 190, 17, 94, 116, 188, 186, 126, 120, 62, 95, 118, 44, 62, 216, 219, 239, 62, 89, 151, 216, 62, 136, 250, 188, 62, 30, 255, 201, 62, 178, 56, 16, 191, 107, 118, 136, 61, 10, 29, 50, 190, 26, 5, 12, 63, 218, 113, 135, 61, 138, 79, 227, 190, 79, 31, 14, 191, 66, 31, 242, 62, 150, 5, 14, 62, 183, 2, 3, 191, 86, 249, 87, 62, 137, 31, 6, 190, 155, 52, 204, 190, 31, 226, 125, 190, 53, 153, 156, 62, 200, 188, 17, 63, 182, 169, 30, 62, 78, 192, 152, 62, 32, 56, 12, 63, 52, 218, 229, 62, 52, 127, 184, 62, 129, 195, 177, 61, 227, 198, 224, 62, 63, 208, 231, 60, 44, 157, 199, 190, 92, 13, 186, 62, 162, 197, 45, 62, 91, 65, 237, 62, 194, 103, 139, 190, 207, 36, 131, 189, 194, 180, 103, 190, 141, 72, 18, 63, 179, 180, 81, 62, 60, 145, 17, 190, 226, 229, 8, 190, 197, 20, 4, 62, 19, 20, 207, 190, 20, 94, 5, 62, 91, 72, 174, 190, 109, 237, 157, 190, 55, 118, 231, 62, 136, 201, 152, 61, 130, 190, 152, 190, 143, 245, 151, 190, 57, 148, 136, 61, 222, 138, 174, 187, 223, 214, 10, 63, 154, 249, 158, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 157, 19, 191, 151, 120, 204, 190, 11, 0, 13, 191, 141, 203, 98, 190, 76, 223, 33, 190, 86, 9, 187, 62, 49, 232, 58, 61, 255, 176, 103, 62, 161, 169, 142, 190, 23, 131, 151, 190, 39, 205, 16, 191, 240, 102, 161, 62, 159, 175, 242, 190, 188, 12, 142, 190, 21, 200, 217, 189, 223, 229, 131, 190, 133, 33, 247, 62, 94, 250, 158, 62, 176, 80, 133, 189, 24, 232, 165, 190, 63, 19, 4, 191, 172, 90, 75, 190, 57, 210, 6, 63, 148, 64, 160, 189, 241, 156, 15, 190, 118, 135, 204, 60, 144, 63, 102, 189, 57, 202, 119, 190, 10, 18, 249, 62, 63, 105, 2, 63, 243, 116, 25, 190, 202, 248, 190, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 206, 159, 61, 8, 181, 250, 61, 165, 90, 229, 61, 151, 198, 233, 189, 29, 40, 225, 189, 66, 77, 180, 189, 57, 124, 8, 189, 35, 4, 243, 187, 234, 250, 34, 62, 155, 232, 179, 60, 72, 249, 65, 187, 58, 90, 216, 61, 226, 6, 34, 189, 78, 179, 35, 190, 82, 235, 52, 190, 62, 233, 85, 61, 120, 40, 13, 190, 240, 244, 145, 187, 39, 240, 185, 61, 92, 56, 225, 188, 121, 207, 201, 60, 183, 115, 250, 60, 140, 125, 252, 61, 108, 18, 211, 189, 169, 118, 231, 189, 135, 13, 2, 62, 202, 114, 42, 62, 69, 28, 171, 189, 212, 36, 182, 61, 170, 207, 85, 189, 161, 79, 35, 190, 230, 204, 25, 190, 229, 138, 71, 60, 196, 184, 84, 188, 64, 251, 145, 189, 202, 37, 40, 190, 77, 18, 134, 60, 201, 160, 171, 58, 14, 111, 178, 61, 112, 159, 191, 189, 43, 220, 54, 61, 64, 251, 171, 61, 254, 147, 68, 188, 46, 7, 3, 190, 181, 120, 185, 61, 249, 229, 5, 61, 163, 33, 90, 186, 175, 177, 32, 62, 18, 21, 187, 188, 238, 136, 9, 62, 72, 133, 136, 189, 67, 103, 69, 61, 120, 252, 13, 60, 241, 28, 71, 188, 53, 39, 205, 61, 67, 234, 187, 188, 151, 2, 36, 190, 37, 166, 49, 61, 57, 167, 173, 189, 46, 72, 166, 61, 62, 81, 237, 189, 37, 168, 46, 62, 77, 0, 63, 61, 36, 242, 200, 189, 144, 112, 168, 188, 70, 5, 31, 190, 221, 176, 179, 189, 49, 96, 248, 60, 169, 147, 217, 61, 215, 158, 222, 61, 53, 30, 9, 62, 28, 25, 38, 62, 173, 78, 139, 189, 92, 242, 35, 62, 240, 97, 189, 188, 119, 97, 54, 60, 13, 10, 117, 61, 214, 117, 48, 189, 66, 80, 82, 60, 185, 252, 154, 61, 248, 91, 52, 190, 198, 70, 79, 61, 134, 90, 13, 190, 254, 206, 1, 189, 37, 21, 41, 62, 59, 188, 1, 62, 95, 244, 195, 189, 56, 108, 24, 190, 84, 162, 134, 60, 250, 109, 194, 61, 245, 231, 10, 60, 54, 206, 40, 60, 153, 201, 158, 189, 245, 245, 207, 61, 115, 46, 23, 61, 163, 84, 23, 190, 96, 86, 243, 189, 254, 240, 182, 189, 57, 154, 3, 190, 89, 227, 19, 190, 97, 93, 31, 190, 223, 16, 163, 189, 223, 57, 253, 187, 65, 237, 2, 190, 248, 195, 114, 188, 41, 183, 6, 190, 252, 68, 215, 60, 40, 180, 135, 61, 252, 40, 14, 189, 203, 140, 42, 61, 48, 251, 5, 62, 99, 171, 105, 189, 92, 87, 225, 60, 246, 218, 4, 190, 119, 29, 27, 62, 244, 23, 168, 188, 240, 214, 27, 190, 78, 164, 25, 62, 212, 145, 35, 190, 23, 62, 27, 190, 225, 238, 76, 61, 191, 238, 21, 62, 183, 224, 255, 61, 252, 3, 243, 61, 57, 211, 157, 189, 116, 147, 7, 190, 98, 198, 54, 61, 217, 6, 181, 61, 210, 163, 7, 190, 235, 118, 101, 61, 3, 220, 46, 61, 74, 42, 11, 62, 20, 83, 51, 62, 222, 221, 128, 189, 244, 198, 146, 189, 32, 240, 190, 60, 151, 109, 246, 186, 233, 201, 7, 190, 31, 218, 181, 61, 162, 81, 226, 60, 96, 218, 221, 61, 236, 60, 29, 190, 49, 139, 50, 190, 174, 70, 26, 62, 136, 78, 32, 187, 197, 73, 203, 189, 122, 99, 0, 62, 121, 11, 153, 61, 156, 212, 22, 62, 106, 143, 90, 60, 64, 200, 77, 61, 136, 86, 194, 61, 83, 251, 19, 189, 182, 226, 33, 190, 224, 71, 181, 189, 156, 166, 131, 61, 1, 21, 122, 189, 163, 255, 17, 190, 56, 2, 200, 61, 207, 186, 44, 190, 162, 156, 24, 62, 41, 153, 193, 189, 146, 35, 197, 61, 147, 140, 254, 188, 222, 182, 50, 189, 172, 14, 51, 189, 215, 22, 23, 189, 215, 188, 48, 62, 251, 166, 194, 189, 195, 38, 139, 189, 163, 165, 207, 60, 130, 191, 128, 188, 88, 188, 34, 189, 82, 111, 232, 61, 248, 26, 135, 61, 179, 143, 143, 59, 217, 55, 194, 61, 252, 246, 39, 61, 124, 205, 4, 62, 52, 16, 56, 61, 173, 248, 146, 61, 152, 18, 32, 62, 254, 2, 251, 60, 51, 2, 18, 190, 224, 154, 136, 189, 233, 22, 129, 61, 123, 151, 7, 62, 253, 121, 15, 190, 88, 223, 1, 62, 53, 226, 11, 61, 166, 58, 39, 62, 115, 53, 226, 61, 61, 86, 71, 61, 209, 67, 40, 62, 153, 85, 16, 62, 44, 206, 40, 62, 51, 203, 48, 62, 118, 38, 242, 61, 101, 4, 220, 189, 234, 216, 137, 60, 105, 33, 248, 188, 248, 189, 49, 61, 141, 176, 104, 189, 175, 151, 34, 62, 19, 24, 196, 60, 91, 150, 247, 188, 98, 66, 199, 61, 212, 150, 58, 61, 164, 195, 46, 190, 39, 154, 42, 189, 43, 177, 16, 60, 38, 225, 132, 189, 206, 25, 251, 189, 138, 59, 36, 190, 111, 80, 148, 189, 3, 192, 12, 62, 13, 38, 202, 60, 219, 94, 140, 60, 34, 115, 32, 190, 62, 63, 19, 62, 75, 83, 230, 189, 62, 196, 160, 189, 41, 221, 252, 61, 74, 10, 9, 62, 162, 38, 240, 189, 221, 66, 209, 189, 76, 68, 209, 189, 220, 150, 23, 190, 177, 98, 190, 189, 39, 128, 95, 189, 215, 142, 10, 61, 80, 19, 223, 60, 98, 186, 47, 62, 154, 214, 71, 189, 183, 178, 205, 189, 127, 144, 22, 62, 16, 239, 227, 189, 79, 25, 209, 61, 249, 137, 45, 190, 57, 165, 171, 189, 152, 126, 112, 189, 236, 145, 63, 189, 101, 133, 234, 189, 139, 168, 12, 62, 28, 141, 134, 189, 241, 52, 89, 189, 34, 101, 75, 61, 226, 64, 30, 190, 155, 82, 4, 62, 1, 23, 97, 189, 51, 184, 252, 189, 165, 217, 26, 188, 10, 76, 210, 189, 196, 212, 240, 189, 9, 228, 224, 188, 58, 254, 219, 187, 46, 115, 158, 59, 208, 127, 63, 189, 241, 215, 51, 62, 242, 172, 246, 188, 204, 46, 29, 190, 19, 168, 197, 60, 120, 185, 209, 187, 248, 244, 182, 189, 247, 173, 199, 61, 152, 248, 40, 189, 5, 154, 130, 188, 145, 134, 62, 61, 130, 71, 147, 61, 188, 64, 20, 190, 241, 224, 7, 190, 255, 255, 214, 60, 174, 61, 8, 190, 43, 50, 186, 61, 160, 214, 5, 189, 81, 215, 218, 189, 182, 192, 250, 61, 198, 241, 7, 62, 212, 219, 1, 188, 23, 84, 160, 61, 12, 146, 46, 62, 220, 209, 52, 61, 25, 188, 31, 190, 10, 63, 17, 190, 60, 95, 146, 61, 247, 29, 42, 190, 143, 233, 9, 190, 85, 23, 242, 189, 141, 56, 245, 189, 133, 168, 35, 60, 184, 26, 94, 189, 98, 30, 217, 61, 246, 208, 235, 189, 2, 115, 235, 61, 3, 47, 97, 61, 97, 102, 30, 62, 150, 17, 29, 62, 87, 106, 4, 190, 44, 231, 86, 189, 46, 249, 48, 189, 251, 73, 236, 60, 64, 75, 106, 61, 88, 51, 118, 61, 245, 194, 0, 62, 189, 163, 43, 190, 166, 180, 180, 188, 116, 132, 10, 62, 217, 41, 25, 62, 165, 126, 247, 61, 3, 198, 180, 189, 169, 34, 122, 188, 189, 203, 176, 61, 73, 65, 205, 189, 171, 209, 216, 189, 188, 17, 204, 61, 95, 248, 161, 189, 36, 197, 20, 62, 202, 212, 11, 62, 3, 11, 22, 62, 44, 213, 45, 62, 138, 131, 58, 189, 34, 53, 1, 62, 232, 76, 167, 61, 216, 137, 225, 61, 84, 76, 31, 61, 91, 219, 156, 189, 19, 190, 16, 61, 244, 135, 84, 189, 114, 232, 18, 62, 143, 63, 167, 188, 230, 205, 43, 62, 108, 160, 211, 189, 7, 57, 141, 189, 135, 108, 47, 187, 68, 47, 178, 189, 255, 82, 139, 60, 244, 110, 47, 62, 21, 135, 132, 61, 206, 191, 130, 61, 34, 166, 16, 189, 244, 131, 168, 61, 67, 185, 47, 190, 237, 240, 246, 61, 184, 38, 16, 189, 250, 65, 71, 59, 239, 198, 40, 190, 128, 65, 126, 189, 27, 151, 98, 61, 160, 233, 171, 189, 157, 32, 5, 190, 66, 23, 146, 189, 129, 171, 167, 186, 46, 152, 219, 188, 253, 105, 206, 189, 63, 252, 145, 189, 120, 99, 33, 62, 171, 87, 127, 61, 37, 191, 36, 62, 193, 245, 204, 60, 166, 49, 3, 62, 169, 68, 33, 62, 180, 229, 20, 190, 253, 199, 210, 189, 150, 81, 27, 62, 14, 159, 14, 62, 152, 102, 173, 188, 238, 196, 164, 189, 169, 110, 31, 62, 123, 223, 1, 62, 238, 233, 47, 61, 67, 97, 9, 190, 93, 51, 10, 62, 32, 190, 203, 189, 45, 106, 141, 189, 48, 250, 39, 190, 34, 169, 134, 188, 17, 18, 25, 190, 243, 126, 36, 188, 110, 119, 200, 189, 200, 80, 90, 189, 157, 31, 197, 61, 156, 197, 33, 190, 209, 40, 31, 60, 82, 67, 149, 189, 88, 69, 252, 189, 142, 32, 12, 62, 34, 91, 94, 61, 137, 117, 9, 190, 14, 119, 213, 189, 139, 23, 64, 61, 31, 51, 10, 62, 218, 249, 235, 189, 242, 98, 10, 190, 71, 74, 251, 189, 227, 121, 91, 61, 211, 192, 142, 61, 61, 134, 41, 190, 31, 34, 65, 61, 254, 249, 40, 62, 80, 58, 29, 62, 25, 97, 231, 59, 229, 163, 240, 189, 72, 252, 255, 61, 102, 194, 110, 189, 45, 186, 251, 58, 30, 63, 215, 61, 227, 117, 158, 61, 150, 147, 49, 61, 55, 196, 237, 188, 187, 118, 191, 61, 70, 144, 132, 61, 221, 200, 160, 59, 5, 84, 184, 61, 11, 138, 33, 190, 80, 246, 119, 189, 70, 186, 144, 61, 61, 182, 86, 60, 120, 226, 12, 188, 15, 127, 166, 61, 7, 248, 254, 189, 205, 196, 171, 189, 106, 128, 39, 188, 128, 194, 103, 58, 4, 3, 30, 60, 10, 207, 39, 62, 197, 39, 161, 61, 121, 185, 235, 189, 26, 192, 36, 62, 44, 131, 176, 61, 247, 253, 69, 61, 86, 134, 79, 189, 72, 237, 49, 190, 66, 248, 177, 60, 51, 177, 187, 189, 191, 35, 3, 62, 177, 99, 221, 188, 211, 88, 216, 61, 122, 171, 172, 189, 78, 47, 161, 60, 194, 9, 246, 61, 15, 100, 172, 188, 102, 240, 4, 190, 161, 252, 37, 190, 61, 79, 1, 62, 155, 191, 78, 188, 46, 178, 59, 61, 183, 160, 3, 62, 145, 216, 21, 190, 214, 185, 255, 189, 13, 130, 137, 61, 166, 158, 157, 189, 140, 49, 14, 62, 147, 205, 235, 60, 117, 142, 247, 61, 208, 91, 133, 61, 80, 188, 41, 62, 94, 230, 236, 189, 216, 242, 121, 61, 233, 230, 81, 189, 212, 250, 235, 188, 65, 34, 5, 190, 138, 238, 52, 190, 11, 2, 30, 190, 77, 245, 172, 189, 111, 248, 2, 62, 181, 146, 201, 60, 6, 35, 211, 189, 67, 98, 125, 61, 115, 78, 200, 189, 251, 114, 29, 190, 142, 72, 214, 189, 229, 202, 70, 61, 78, 214, 85, 61, 223, 107, 179, 189, 42, 17, 247, 61, 232, 43, 127, 189, 36, 98, 42, 190, 237, 126, 185, 61, 190, 220, 248, 189, 184, 211, 50, 190, 71, 190, 215, 188, 119, 184, 181, 60, 45, 117, 50, 190, 190, 144, 23, 62, 106, 68, 95, 61, 164, 214, 141, 61, 196, 2, 216, 61, 10, 183, 110, 188, 142, 155, 9, 62, 186, 159, 137, 61, 182, 90, 43, 62, 117, 144, 130, 189, 224, 69, 14, 62, 123, 131, 167, 189, 216, 62, 188, 189, 62, 234, 45, 190, 7, 50, 221, 61, 70, 58, 218, 61, 51, 231, 21, 62, 120, 180, 172, 187, 44, 218, 35, 62, 6, 169, 35, 190, 156, 228, 3, 62, 61, 175, 20, 189, 222, 140, 15, 62, 85, 12, 189, 60, 249, 92, 34, 60, 95, 50, 0, 61, 16, 115, 122, 189, 122, 227, 240, 61, 111, 1, 21, 62, 80, 106, 231, 61, 8, 242, 227, 61, 200, 154, 229, 187, 115, 186, 6, 189, 52, 203, 5, 62, 142, 173, 69, 61, 160, 230, 152, 61, 214, 13, 218, 60, 93, 21, 251, 61, 30, 204, 146, 60, 111, 212, 88, 189, 30, 94, 47, 190, 76, 247, 60, 189, 80, 93, 20, 189, 154, 11, 32, 61, 163, 109, 36, 62, 117, 118, 209, 61, 209, 138, 61, 188, 204, 149, 151, 60, 142, 174, 4, 190, 129, 58, 46, 62, 9, 234, 180, 61, 248, 248, 223, 61, 56, 105, 171, 189, 198, 204, 198, 61, 75, 158, 40, 62, 165, 209, 140, 189, 70, 141, 4, 62, 68, 15, 47, 62, 192, 172, 115, 189, 149, 142, 114, 188, 178, 116, 168, 61, 195, 89, 61, 61, 8, 126, 185, 61, 87, 224, 25, 190, 42, 91, 29, 190, 7, 74, 6, 60, 190, 190, 4, 190, 164, 129, 36, 190, 104, 1, 241, 60, 128, 204, 41, 190, 162, 238, 13, 62, 71, 167, 151, 188, 142, 56, 47, 188, 196, 238, 14, 190, 55, 243, 14, 190, 11, 32, 146, 189, 10, 196, 144, 61, 44, 100, 178, 61, 94, 14, 182, 189, 216, 105, 133, 61, 162, 235, 187, 189, 234, 226, 185, 60, 167, 3, 231, 189, 109, 32, 154, 189, 66, 228, 42, 62, 87, 14, 246, 61, 199, 19, 1, 62, 35, 130, 131, 61, 162, 157, 45, 190, 14, 128, 143, 61, 240, 81, 59, 189, 248, 110, 131, 183, 176, 232, 184, 61, 233, 147, 71, 60, 113, 78, 228, 188, 42, 53, 104, 61, 223, 19, 123, 188, 125, 50, 49, 190, 254, 206, 188, 188, 247, 52, 3, 62, 82, 140, 134, 60, 237, 120, 166, 189, 29, 165, 4, 189, 86, 109, 35, 190, 236, 106, 136, 61, 177, 55, 43, 62, 142, 8, 42, 62, 249, 128, 52, 62, 199, 137, 28, 190, 84, 113, 33, 187, 91, 57, 23, 189, 203, 119, 222, 188, 36, 67, 106, 60, 126, 168, 216, 189, 126, 254, 177, 59, 253, 159, 159, 61, 228, 230, 91, 61, 183, 114, 72, 61, 173, 197, 2, 62, 63, 57, 67, 189, 137, 112, 197, 61, 51, 52, 31, 189, 35, 13, 225, 61, 243, 53, 142, 189, 3, 229, 173, 60, 254, 252, 6, 61, 235, 10, 34, 190, 126, 38, 38, 62, 145, 205, 169, 61, 157, 225, 16, 62, 106, 215, 80, 189, 151, 64, 164, 61, 81, 61, 31, 190, 173, 193, 20, 190, 144, 147, 175, 61, 14, 176, 20, 62, 74, 128, 30, 190, 247, 38, 64, 189, 94, 204, 233, 188, 232, 3, 211, 61, 48, 13, 190, 58, 0, 17, 209, 188, 121, 230, 138, 189, 90, 79, 15, 189, 33, 197, 164, 189, 49, 216, 24, 62, 54, 240, 40, 190, 235, 136, 245, 61, 190, 133, 187, 61, 9, 190, 218, 189, 165, 223, 2, 190, 37, 55, 26, 62, 230, 59, 126, 61, 169, 170, 20, 190, 158, 175, 22, 62, 43, 107, 238, 61, 140, 237, 231, 60, 187, 63, 82, 189, 74, 138, 184, 61, 11, 204, 43, 62, 1, 131, 6, 62, 128, 86, 41, 62, 25, 53, 152, 61, 3, 13, 245, 187, 46, 136, 52, 62, 139, 207, 54, 189, 96, 51, 242, 61, 191, 115, 63, 189, 231, 43, 125, 60, 15, 153, 29, 190, 116, 66, 145, 189, 81, 248, 210, 61, 137, 250, 135, 188, 162, 148, 205, 188, 130, 125, 79, 60, 123, 200, 4, 60, 39, 208, 190, 61, 24, 166, 229, 60, 72, 26, 6, 190, 129, 169, 44, 190, 29, 191, 41, 62, 68, 224, 130, 61, 229, 158, 98, 189, 84, 189, 38, 189, 113, 63, 84, 189, 74, 36, 222, 189, 102, 181, 193, 189, 184, 116, 208, 189, 140, 174, 17, 62, 110, 113, 222, 59, 182, 74, 13, 190, 11, 172, 160, 189, 54, 82, 37, 190, 60, 160, 188, 61, 232, 250, 224, 61, 185, 101, 89, 61, 255, 50, 207, 60, 84, 44, 1, 62, 178, 172, 4, 190, 12, 169, 131, 189, 247, 20, 140, 188, 167, 133, 43, 61, 187, 96, 252, 189, 219, 214, 10, 189, 76, 29, 247, 189, 29, 214, 220, 60, 220, 48, 50, 62, 80, 85, 140, 61, 81, 169, 2, 62, 223, 226, 200, 189, 200, 160, 27, 61, 206, 199, 136, 61, 121, 38, 23, 189, 117, 156, 159, 189, 224, 183, 115, 61, 142, 61, 36, 190, 105, 182, 27, 62, 11, 205, 233, 189, 254, 131, 22, 61, 160, 213, 82, 189, 34, 102, 11, 61, 236, 193, 108, 189, 125, 129, 36, 62, 188, 162, 32, 189, 1, 201, 221, 189, 150, 138, 92, 59, 250, 199, 32, 188, 131, 125, 52, 190, 20, 181, 174, 60, 204, 172, 137, 189, 240, 133, 247, 61, 49, 250, 20, 62, 233, 253, 12, 59, 232, 234, 195, 61, 14, 112, 30, 190, 54, 173, 136, 189, 63, 60, 47, 190, 150, 8, 132, 59, 241, 234, 36, 190, 229, 246, 138, 187, 104, 36, 17, 62, 168, 150, 53, 188, 34, 72, 60, 61, 29, 48, 106, 61, 190, 208, 174, 188, 145, 48, 30, 190, 17, 231, 234, 61, 113, 80, 41, 62, 37, 96, 32, 61, 236, 5, 208, 61, 198, 69, 34, 190, 206, 0, 155, 189, 7, 145, 56, 61, 177, 75, 123, 60, 160, 24, 211, 61, 93, 80, 43, 189, 243, 233, 170, 189, 99, 136, 134, 189, 110, 119, 201, 61, 20, 21, 3, 62, 227, 238, 190, 61, 37, 228, 65, 189, 184, 160, 190, 189, 182, 156, 160, 61, 52, 146, 192, 60, 132, 171, 42, 62, 233, 121, 143, 60, 68, 121, 24, 190, 215, 53, 231, 189, 121, 98, 171, 61, 228, 113, 36, 61, 23, 117, 47, 190, 103, 162, 214, 189, 145, 148, 89, 187, 29, 53, 126, 61, 220, 85, 204, 61, 98, 40, 137, 188, 12, 137, 252, 60, 15, 179, 30, 62, 118, 127, 245, 61, 255, 35, 17, 62, 218, 84, 24, 189, 84, 151, 205, 60, 243, 181, 19, 60, 208, 161, 25, 190, 133, 197, 10, 189, 210, 49, 16, 190, 68, 65, 0, 60, 80, 10, 54, 61, 83, 159, 199, 189, 234, 174, 32, 62, 0, 30, 29, 62, 21, 11, 38, 189, 161, 245, 190, 188, 80, 80, 44, 189, 122, 64, 104, 61, 200, 251, 41, 62, 197, 165, 131, 61, 44, 225, 179, 189, 55, 51, 213, 189, 214, 74, 205, 61, 136, 197, 111, 61, 116, 188, 186, 189, 136, 167, 33, 190, 58, 117, 46, 62, 251, 34, 19, 189, 3, 159, 2, 62, 180, 62, 84, 189, 122, 218, 197, 189, 144, 198, 51, 190, 20, 66, 171, 61, 38, 15, 128, 61, 194, 98, 38, 62, 245, 239, 107, 61, 150, 235, 175, 61, 5, 5, 14, 62, 109, 181, 51, 59, 58, 65, 0, 62, 251, 122, 5, 62, 26, 203, 20, 190, 119, 31, 41, 190, 171, 118, 166, 189, 39, 237, 35, 61, 207, 65, 52, 62, 62, 115, 35, 61, 227, 102, 40, 188, 239, 45, 13, 62, 178, 11, 167, 58, 20, 147, 22, 190, 224, 230, 94, 189, 79, 64, 129, 60, 158, 129, 58, 60, 139, 187, 73, 61, 175, 196, 194, 61, 73, 180, 37, 189, 219, 229, 61, 189, 236, 207, 238, 60, 30, 95, 142, 189, 152, 224, 236, 61, 5, 218, 219, 61, 5, 80, 31, 61, 76, 58, 142, 188, 1, 159, 241, 189, 2, 48, 22, 190, 132, 59, 136, 189, 229, 119, 125, 189, 188, 70, 214, 61, 49, 220, 218, 189, 241, 177, 10, 189, 5, 100, 240, 61, 135, 58, 2, 189, 211, 180, 19, 190, 240, 41, 173, 186, 106, 90, 142, 61, 18, 108, 178, 61, 88, 123, 40, 62, 97, 36, 41, 62, 155, 209, 46, 61, 182, 136, 253, 188, 138, 238, 168, 189, 244, 137, 129, 189, 208, 182, 140, 61, 104, 232, 145, 61, 184, 219, 176, 189, 120, 143, 111, 189, 61, 232, 210, 189, 186, 65, 51, 190, 99, 40, 235, 61, 95, 88, 13, 62, 220, 130, 217, 189, 71, 58, 156, 61, 84, 120, 213, 61, 242, 250, 200, 187, 90, 192, 28, 62, 50, 189, 11, 189, 244, 99, 156, 61, 123, 76, 214, 60, 4, 11, 33, 190, 52, 193, 68, 189, 248, 214, 51, 190, 234, 48, 189, 61, 44, 81, 27, 62, 144, 31, 255, 59, 0, 212, 36, 61, 221, 125, 87, 188, 25, 144, 172, 189, 20, 84, 39, 190, 78, 139, 218, 60, 211, 45, 138, 61, 190, 39, 1, 62, 228, 105, 143, 189, 10, 57, 73, 61, 77, 64, 255, 61, 235, 9, 152, 189, 22, 189, 185, 188, 210, 8, 128, 61, 56, 31, 37, 189, 92, 20, 7, 190, 243, 242, 122, 61, 152, 131, 40, 62, 84, 157, 79, 188, 138, 212, 10, 190, 11, 99, 155, 60, 145, 10, 221, 189, 238, 240, 199, 61, 89, 230, 127, 188, 94, 4, 46, 190, 125, 114, 28, 190, 171, 234, 156, 61, 53, 195, 208, 61, 166, 234, 206, 189, 10, 187, 64, 61, 24, 23, 149, 189, 182, 62, 8, 62, 201, 148, 31, 61, 119, 234, 195, 60, 153, 35, 45, 189, 82, 98, 23, 190, 177, 121, 191, 61, 11, 99, 35, 62, 173, 23, 158, 188, 130, 41, 15, 190, 146, 163, 137, 188, 37, 111, 213, 61, 252, 113, 89, 61, 15, 19, 7, 190, 6, 91, 20, 62, 4, 205, 78, 61, 13, 152, 2, 61, 18, 48, 255, 189, 85, 202, 230, 189, 41, 8, 180, 187, 99, 227, 127, 189, 181, 194, 152, 61, 45, 45, 131, 189, 159, 149, 132, 61, 42, 167, 52, 62, 108, 108, 50, 62, 205, 194, 8, 187, 96, 221, 145, 189, 136, 232, 176, 61, 197, 210, 236, 61, 98, 110, 146, 60, 31, 48, 198, 189, 48, 114, 189, 189, 239, 188, 251, 189, 79, 37, 44, 62, 194, 213, 31, 190, 9, 93, 159, 188, 121, 44, 166, 61, 128, 195, 102, 61, 35, 70, 143, 61, 75, 199, 9, 190, 13, 139, 46, 189, 151, 16, 207, 61, 84, 137, 222, 61, 205, 19, 27, 62, 106, 87, 137, 61, 33, 235, 241, 188, 244, 75, 119, 61, 101, 194, 222, 60, 20, 2, 253, 189, 147, 192, 198, 61, 187, 65, 2, 62, 193, 185, 180, 188, 199, 53, 193, 61, 127, 145, 205, 189, 214, 232, 26, 62, 57, 241, 15, 62, 215, 10, 191, 61, 232, 197, 16, 62, 121, 120, 114, 189, 121, 31, 192, 188, 143, 99, 59, 61, 184, 139, 145, 189, 73, 188, 254, 189, 201, 203, 129, 61, 135, 227, 162, 189, 211, 130, 200, 60, 149, 98, 36, 190, 175, 55, 206, 189, 140, 37, 2, 62, 232, 69, 122, 189, 56, 112, 9, 62, 252, 140, 239, 61, 10, 155, 1, 62, 136, 114, 209, 189, 37, 227, 12, 62, 71, 225, 31, 62, 64, 162, 80, 61, 145, 113, 3, 62, 130, 161, 78, 60, 212, 45, 42, 190, 224, 88, 186, 189, 222, 49, 23, 190, 170, 50, 148, 60, 149, 217, 250, 187, 167, 152, 247, 60, 180, 142, 161, 189, 236, 2, 56, 187, 73, 254, 43, 190, 234, 208, 46, 190, 199, 33, 44, 62, 10, 167, 234, 188, 60, 74, 242, 61, 224, 14, 172, 188, 253, 233, 29, 190, 241, 55, 50, 61, 103, 200, 5, 62, 173, 112, 6, 190, 127, 66, 16, 190, 171, 167, 24, 186, 103, 213, 229, 61, 111, 74, 139, 189, 212, 79, 107, 189, 127, 201, 195, 59, 55, 145, 63, 60, 205, 5, 128, 189, 63, 108, 12, 62, 122, 82, 45, 189, 149, 109, 37, 62, 146, 76, 215, 189, 7, 195, 30, 190, 202, 222, 169, 189, 191, 14, 89, 60, 231, 13, 158, 189, 245, 235, 220, 61, 120, 218, 148, 188, 56, 26, 158, 61, 36, 220, 136, 189, 57, 205, 188, 61, 98, 34, 13, 62, 133, 175, 4, 189, 28, 21, 222, 60, 25, 173, 200, 189, 211, 136, 194, 187, 116, 102, 156, 189, 193, 113, 217, 189, 91, 255, 168, 189, 72, 225, 214, 61, 243, 88, 209, 189, 175, 15, 211, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 241, 92, 61, 86, 191, 3, 61, 83, 85, 200, 189, 90, 238, 183, 189, 66, 67, 224, 188, 154, 108, 239, 61, 52, 14, 239, 189, 217, 243, 92, 189, 69, 135, 88, 189, 210, 39, 235, 189, 195, 217, 54, 189, 92, 32, 137, 61, 44, 131, 4, 62, 137, 165, 2, 62, 117, 83, 240, 189, 106, 44, 198, 61, 114, 140, 45, 190, 41, 7, 29, 190, 35, 87, 188, 60, 207, 170, 255, 189, 118, 71, 28, 189, 117, 111, 214, 189, 55, 221, 172, 61, 32, 147, 48, 61, 128, 236, 32, 62, 113, 180, 100, 57, 208, 120, 81, 189, 51, 125, 230, 61, 49, 216, 203, 188, 196, 0, 177, 189, 167, 152, 1, 61, 82, 17, 81, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 205, 211, 61, 158, 209, 178, 61, 234, 124, 237, 189, 94, 202, 44, 190, 84, 218, 49, 190, 229, 163, 52, 62, 203, 89, 17, 189, 201, 68, 253, 60, 240, 45, 222, 189, 130, 65, 78, 189, 125, 168, 169, 61, 49, 22, 98, 60, 245, 77, 236, 187, 75, 130, 135, 61, 48, 7, 10, 62, 25, 203, 211, 189, 45, 188, 186, 188, 164, 219, 14, 62, 47, 174, 212, 188, 137, 242, 108, 189, 146, 33, 73, 60, 15, 14, 27, 190, 132, 131, 86, 189, 227, 42, 15, 62, 112, 217, 214, 61, 210, 139, 162, 183, 193, 140, 228, 60, 102, 109, 182, 61, 168, 86, 28, 62, 197, 175, 190, 189, 243, 112, 78, 189, 84, 242, 242, 60, 51, 240, 26, 190, 113, 219, 192, 61, 56, 180, 43, 190, 47, 112, 148, 188, 109, 223, 6, 190, 239, 105, 164, 189, 153, 184, 223, 189, 14, 181, 212, 60, 129, 68, 231, 61, 221, 70, 7, 61, 209, 212, 156, 186, 219, 74, 46, 61, 13, 45, 142, 189, 75, 183, 64, 189, 73, 41, 8, 62, 228, 162, 128, 60, 49, 226, 39, 62, 210, 109, 220, 189, 201, 237, 48, 62, 107, 162, 14, 190, 236, 12, 35, 62, 84, 70, 237, 61, 237, 193, 42, 190, 1, 168, 36, 189, 88, 27, 55, 60, 253, 206, 199, 61, 182, 46, 49, 189, 132, 213, 249, 189, 231, 93, 145, 188, 224, 36, 35, 62, 91, 182, 237, 189, 87, 199, 227, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 242, 207, 188, 54, 1, 148, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {123, 87, 138, 62, 115, 13, 208, 191, 66, 113, 217, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {80, 137, 192, 61, 145, 176, 89, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0080/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}