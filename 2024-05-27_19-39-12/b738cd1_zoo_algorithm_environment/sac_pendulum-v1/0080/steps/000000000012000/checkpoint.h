// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 9, 80, 63, 205, 88, 64, 191, 58, 124, 155, 190, 224, 167, 60, 62, 11, 233, 86, 63, 29, 206, 16, 63, 218, 34, 81, 63, 251, 110, 82, 191, 18, 227, 169, 190, 219, 140, 187, 62, 174, 253, 198, 60, 14, 245, 9, 63, 191, 188, 172, 62, 187, 74, 100, 191, 33, 120, 100, 190, 184, 34, 162, 62, 30, 93, 185, 189, 110, 164, 127, 190, 96, 49, 231, 189, 24, 13, 155, 63, 103, 173, 227, 62, 4, 254, 95, 60, 67, 39, 75, 63, 67, 166, 74, 62, 4, 88, 22, 63, 147, 47, 37, 63, 52, 180, 144, 62, 130, 127, 65, 190, 160, 20, 54, 191, 210, 152, 170, 62, 60, 32, 147, 61, 126, 172, 4, 191, 243, 50, 10, 191, 212, 154, 198, 62, 254, 71, 41, 191, 24, 134, 173, 62, 237, 249, 210, 190, 204, 58, 245, 61, 178, 17, 63, 63, 66, 55, 56, 190, 185, 221, 5, 191, 134, 106, 213, 62, 155, 133, 190, 61, 26, 207, 178, 63, 204, 160, 226, 62, 102, 191, 240, 62, 62, 182, 134, 63, 69, 229, 181, 62, 5, 239, 45, 191, 97, 1, 135, 191, 55, 48, 31, 190, 225, 2, 236, 62, 182, 117, 7, 191, 7, 167, 210, 190, 51, 238, 154, 190, 240, 127, 98, 63, 70, 187, 164, 189, 98, 165, 9, 191, 183, 147, 171, 191, 251, 47, 162, 190, 50, 40, 56, 191, 46, 77, 99, 63, 164, 86, 0, 63, 23, 50, 245, 62, 124, 178, 117, 63, 199, 207, 154, 62, 189, 133, 171, 62, 156, 179, 96, 63, 116, 151, 206, 187, 51, 145, 104, 190, 91, 231, 31, 63, 98, 54, 32, 190, 149, 76, 220, 190, 86, 41, 120, 63, 124, 247, 71, 189, 208, 182, 8, 63, 125, 208, 66, 191, 246, 69, 53, 190, 125, 120, 172, 190, 203, 141, 250, 62, 79, 99, 226, 190, 252, 91, 177, 190, 190, 5, 157, 63, 121, 222, 177, 62, 38, 91, 21, 62, 64, 211, 194, 191, 69, 124, 19, 191, 156, 106, 121, 190, 166, 182, 54, 63, 129, 17, 94, 189, 253, 243, 161, 190, 161, 30, 122, 63, 233, 96, 104, 62, 148, 196, 41, 191, 29, 122, 45, 63, 182, 205, 61, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 186, 24, 191, 2, 115, 202, 190, 65, 48, 28, 191, 55, 126, 55, 60, 60, 202, 21, 189, 110, 25, 180, 62, 145, 112, 74, 62, 98, 205, 215, 62, 230, 57, 8, 191, 168, 102, 192, 190, 92, 122, 221, 189, 147, 198, 31, 63, 1, 226, 51, 190, 42, 223, 144, 190, 56, 184, 33, 62, 230, 97, 133, 190, 10, 207, 186, 62, 245, 31, 146, 62, 54, 253, 13, 190, 101, 240, 135, 190, 33, 180, 160, 190, 241, 250, 14, 63, 60, 27, 43, 63, 158, 121, 18, 62, 162, 73, 159, 188, 115, 139, 102, 62, 149, 21, 38, 190, 240, 196, 245, 189, 251, 226, 157, 189, 230, 133, 17, 63, 157, 67, 69, 190, 81, 139, 139, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {4, 35, 248, 59, 195, 69, 162, 190, 100, 158, 18, 62, 169, 241, 211, 60, 195, 110, 24, 190, 91, 161, 209, 60, 158, 94, 67, 191, 162, 104, 170, 189, 33, 119, 20, 191, 66, 130, 100, 190, 58, 158, 130, 189, 155, 103, 215, 62, 198, 246, 107, 190, 51, 27, 211, 190, 215, 109, 254, 190, 2, 135, 112, 190, 170, 0, 223, 190, 128, 58, 108, 61, 52, 173, 24, 62, 163, 16, 126, 190, 158, 157, 69, 190, 203, 236, 28, 62, 89, 20, 11, 62, 166, 76, 45, 61, 74, 123, 253, 189, 8, 154, 184, 62, 196, 154, 146, 62, 150, 176, 99, 191, 71, 219, 224, 61, 82, 186, 165, 189, 23, 244, 105, 191, 251, 200, 114, 61, 130, 238, 186, 190, 204, 55, 7, 191, 7, 82, 194, 190, 241, 179, 80, 191, 245, 18, 75, 189, 194, 157, 137, 190, 89, 171, 150, 62, 122, 52, 19, 61, 217, 102, 143, 190, 100, 148, 73, 62, 35, 42, 180, 190, 187, 98, 148, 191, 218, 171, 126, 189, 94, 78, 227, 188, 104, 121, 90, 191, 243, 57, 156, 190, 181, 194, 126, 61, 58, 11, 230, 189, 142, 238, 225, 61, 217, 66, 203, 189, 17, 152, 108, 62, 124, 187, 135, 191, 184, 14, 42, 62, 224, 243, 21, 62, 204, 84, 93, 61, 44, 171, 47, 190, 136, 142, 232, 190, 138, 118, 206, 62, 127, 168, 20, 191, 245, 237, 172, 62, 250, 151, 64, 62, 141, 98, 207, 61, 83, 45, 1, 191, 247, 48, 78, 190, 148, 234, 42, 191, 99, 186, 99, 61, 149, 200, 184, 190, 183, 175, 71, 62, 72, 72, 71, 62, 111, 15, 170, 62, 217, 229, 110, 190, 134, 8, 181, 62, 194, 108, 17, 189, 211, 181, 180, 61, 102, 4, 77, 62, 86, 216, 93, 62, 181, 114, 205, 60, 39, 151, 210, 60, 3, 67, 22, 191, 11, 180, 176, 61, 125, 24, 111, 189, 214, 110, 163, 58, 239, 42, 106, 62, 99, 70, 80, 62, 27, 210, 130, 61, 249, 203, 150, 62, 121, 54, 145, 61, 243, 179, 241, 185, 134, 28, 212, 187, 38, 19, 246, 188, 102, 234, 2, 191, 40, 172, 69, 62, 99, 33, 161, 61, 104, 22, 113, 62, 96, 86, 243, 189, 254, 240, 182, 189, 57, 154, 3, 190, 89, 227, 19, 190, 97, 93, 31, 190, 223, 16, 163, 189, 223, 57, 253, 187, 65, 237, 2, 190, 248, 195, 114, 188, 41, 183, 6, 190, 252, 68, 215, 60, 40, 180, 135, 61, 252, 40, 14, 189, 203, 140, 42, 61, 48, 251, 5, 62, 99, 171, 105, 189, 92, 87, 225, 60, 246, 218, 4, 190, 119, 29, 27, 62, 244, 23, 168, 188, 240, 214, 27, 190, 78, 164, 25, 62, 212, 145, 35, 190, 23, 62, 27, 190, 225, 238, 76, 61, 191, 238, 21, 62, 183, 224, 255, 61, 252, 3, 243, 61, 57, 211, 157, 189, 116, 147, 7, 190, 98, 198, 54, 61, 217, 6, 181, 61, 210, 163, 7, 190, 190, 146, 174, 60, 3, 220, 46, 61, 182, 191, 205, 61, 20, 83, 51, 62, 222, 221, 128, 189, 70, 101, 216, 189, 173, 106, 37, 188, 91, 183, 72, 187, 52, 243, 27, 190, 31, 218, 181, 61, 102, 133, 16, 187, 12, 18, 153, 61, 10, 229, 37, 190, 83, 35, 86, 190, 58, 37, 243, 61, 195, 181, 139, 188, 197, 73, 203, 189, 71, 194, 197, 61, 121, 11, 153, 61, 80, 79, 234, 61, 69, 77, 197, 186, 105, 157, 142, 60, 136, 86, 194, 61, 100, 150, 129, 189, 182, 226, 33, 190, 139, 41, 234, 189, 227, 165, 47, 61, 199, 108, 122, 189, 60, 92, 45, 190, 208, 199, 154, 61, 207, 186, 44, 190, 205, 18, 163, 61, 135, 155, 161, 190, 10, 186, 30, 62, 6, 143, 185, 189, 200, 160, 56, 56, 38, 179, 39, 61, 115, 159, 52, 190, 114, 230, 245, 189, 116, 216, 178, 191, 60, 217, 190, 62, 50, 255, 157, 61, 2, 194, 11, 62, 245, 140, 79, 62, 113, 109, 223, 62, 109, 255, 161, 190, 150, 124, 9, 191, 224, 171, 177, 61, 184, 13, 72, 62, 68, 78, 239, 189, 243, 56, 85, 190, 118, 178, 80, 62, 73, 110, 224, 61, 22, 248, 238, 189, 218, 71, 147, 61, 255, 164, 192, 190, 85, 155, 169, 62, 246, 209, 63, 189, 142, 222, 185, 190, 145, 5, 251, 61, 65, 65, 173, 60, 68, 45, 132, 62, 19, 209, 150, 62, 115, 120, 125, 62, 71, 238, 191, 61, 148, 30, 1, 62, 117, 150, 37, 62, 25, 34, 131, 62, 172, 207, 154, 62, 215, 118, 105, 189, 24, 93, 130, 61, 176, 6, 81, 190, 112, 75, 182, 62, 186, 237, 143, 190, 184, 108, 86, 62, 37, 214, 101, 62, 52, 149, 173, 62, 64, 84, 181, 61, 224, 164, 79, 189, 70, 61, 148, 190, 194, 196, 141, 190, 179, 89, 115, 62, 37, 133, 41, 61, 205, 165, 6, 60, 137, 199, 152, 190, 19, 96, 97, 189, 20, 60, 193, 62, 214, 174, 110, 62, 151, 223, 48, 62, 26, 22, 45, 190, 252, 77, 57, 62, 110, 150, 239, 190, 116, 176, 217, 186, 166, 226, 138, 62, 41, 88, 218, 62, 162, 38, 240, 189, 221, 66, 209, 189, 76, 68, 209, 189, 220, 150, 23, 190, 177, 98, 190, 189, 39, 128, 95, 189, 215, 142, 10, 61, 80, 19, 223, 60, 98, 186, 47, 62, 154, 214, 71, 189, 183, 178, 205, 189, 127, 144, 22, 62, 16, 239, 227, 189, 79, 25, 209, 61, 249, 137, 45, 190, 57, 165, 171, 189, 152, 126, 112, 189, 236, 145, 63, 189, 101, 133, 234, 189, 139, 168, 12, 62, 28, 141, 134, 189, 241, 52, 89, 189, 34, 101, 75, 61, 226, 64, 30, 190, 155, 82, 4, 62, 1, 23, 97, 189, 51, 184, 252, 189, 165, 217, 26, 188, 10, 76, 210, 189, 196, 212, 240, 189, 9, 228, 224, 188, 58, 254, 219, 187, 41, 18, 195, 188, 208, 127, 63, 189, 132, 229, 13, 62, 242, 172, 246, 188, 97, 120, 69, 190, 238, 211, 147, 188, 107, 15, 222, 187, 129, 154, 1, 190, 178, 139, 188, 61, 152, 248, 40, 189, 210, 22, 70, 189, 174, 110, 10, 60, 130, 71, 147, 61, 95, 79, 33, 190, 241, 224, 7, 190, 35, 132, 213, 60, 195, 87, 43, 190, 178, 4, 78, 61, 160, 214, 5, 189, 189, 206, 236, 189, 182, 192, 250, 61, 159, 212, 230, 61, 23, 92, 51, 189, 132, 153, 146, 61, 12, 146, 46, 62, 105, 41, 13, 59, 25, 188, 31, 190, 10, 63, 17, 190, 211, 243, 215, 60, 98, 89, 64, 190, 170, 123, 12, 190, 85, 23, 242, 189, 16, 60, 206, 60, 210, 148, 161, 189, 217, 64, 166, 59, 85, 67, 90, 62, 106, 192, 39, 190, 108, 180, 42, 62, 235, 15, 130, 189, 62, 177, 105, 62, 54, 13, 22, 62, 203, 119, 213, 190, 10, 138, 151, 189, 155, 141, 178, 188, 114, 250, 213, 190, 231, 116, 135, 190, 86, 153, 169, 62, 65, 18, 212, 62, 213, 232, 30, 62, 102, 188, 6, 190, 170, 191, 241, 60, 119, 144, 44, 63, 149, 5, 105, 191, 25, 62, 1, 62, 65, 57, 93, 61, 93, 143, 156, 190, 68, 105, 58, 190, 221, 42, 86, 190, 219, 91, 92, 62, 84, 183, 152, 191, 91, 41, 129, 62, 142, 121, 16, 62, 142, 88, 125, 191, 82, 3, 157, 190, 249, 231, 152, 189, 33, 168, 139, 60, 129, 10, 100, 61, 229, 131, 129, 189, 195, 131, 231, 189, 243, 99, 16, 191, 161, 242, 52, 62, 127, 120, 139, 61, 70, 129, 187, 190, 254, 113, 6, 190, 109, 27, 243, 190, 77, 57, 27, 191, 21, 141, 142, 61, 114, 226, 63, 190, 97, 74, 142, 190, 245, 85, 170, 189, 251, 152, 185, 62, 59, 47, 2, 191, 132, 59, 186, 62, 117, 94, 45, 190, 126, 233, 205, 62, 243, 242, 49, 191, 220, 32, 22, 62, 72, 185, 142, 187, 208, 185, 173, 62, 169, 182, 23, 191, 169, 189, 208, 190, 58, 170, 190, 62, 12, 230, 30, 191, 86, 178, 74, 61, 154, 40, 13, 62, 181, 121, 134, 62, 86, 226, 158, 62, 155, 73, 86, 189, 87, 208, 4, 62, 85, 128, 103, 62, 145, 69, 150, 62, 42, 72, 71, 62, 35, 19, 17, 62, 107, 169, 179, 61, 71, 181, 228, 61, 90, 224, 177, 61, 220, 48, 127, 190, 97, 254, 37, 62, 19, 128, 193, 62, 56, 229, 128, 62, 83, 62, 29, 189, 178, 64, 233, 61, 160, 85, 128, 189, 221, 116, 31, 190, 137, 97, 110, 188, 71, 5, 223, 61, 174, 246, 193, 61, 153, 94, 159, 190, 60, 171, 155, 190, 218, 157, 105, 62, 37, 5, 157, 189, 197, 96, 15, 61, 249, 59, 64, 191, 255, 207, 112, 60, 84, 31, 94, 62, 94, 148, 180, 190, 39, 67, 55, 62, 124, 167, 214, 190, 228, 182, 55, 191, 185, 140, 25, 62, 148, 205, 48, 190, 198, 205, 162, 60, 239, 87, 148, 190, 198, 43, 10, 62, 50, 107, 134, 60, 157, 25, 205, 189, 242, 137, 81, 190, 138, 214, 103, 189, 180, 52, 102, 190, 210, 98, 142, 62, 66, 148, 174, 190, 30, 245, 234, 60, 126, 19, 175, 62, 64, 250, 177, 62, 190, 45, 19, 190, 89, 243, 174, 190, 60, 49, 180, 62, 77, 102, 112, 62, 178, 52, 18, 191, 123, 124, 157, 62, 182, 163, 54, 62, 141, 179, 62, 189, 183, 29, 14, 62, 87, 40, 124, 61, 126, 136, 116, 62, 162, 78, 34, 191, 233, 68, 60, 189, 204, 123, 234, 189, 201, 68, 68, 191, 83, 170, 207, 189, 228, 144, 139, 62, 8, 51, 225, 189, 215, 124, 136, 62, 171, 53, 29, 190, 93, 13, 56, 62, 192, 167, 125, 189, 153, 251, 5, 62, 28, 46, 8, 62, 110, 102, 127, 189, 203, 233, 153, 62, 181, 81, 173, 190, 175, 70, 164, 62, 220, 210, 112, 62, 157, 219, 141, 62, 5, 176, 214, 189, 169, 209, 134, 190, 86, 226, 254, 61, 212, 220, 176, 61, 2, 197, 182, 189, 162, 44, 21, 191, 88, 244, 99, 62, 81, 220, 172, 188, 240, 130, 66, 62, 214, 140, 252, 62, 61, 171, 58, 190, 203, 176, 141, 62, 157, 248, 84, 191, 131, 117, 57, 62, 85, 133, 163, 190, 181, 192, 12, 62, 86, 21, 234, 62, 76, 77, 33, 60, 166, 90, 99, 190, 75, 208, 13, 190, 78, 162, 68, 190, 70, 223, 15, 190, 67, 201, 70, 189, 74, 213, 138, 190, 134, 191, 158, 62, 158, 105, 60, 62, 217, 0, 93, 191, 105, 210, 164, 62, 54, 117, 22, 191, 192, 142, 22, 191, 127, 235, 42, 62, 34, 112, 225, 60, 105, 81, 200, 190, 56, 87, 169, 190, 213, 24, 184, 62, 109, 122, 240, 190, 73, 179, 189, 61, 96, 100, 89, 61, 239, 132, 114, 62, 207, 154, 147, 190, 217, 248, 89, 189, 178, 227, 179, 62, 182, 35, 68, 62, 56, 238, 59, 190, 208, 181, 222, 190, 25, 28, 130, 62, 205, 112, 29, 191, 235, 125, 146, 62, 72, 172, 39, 62, 10, 216, 71, 62, 99, 225, 18, 190, 141, 6, 122, 61, 117, 16, 196, 190, 145, 243, 133, 62, 96, 176, 203, 188, 236, 250, 28, 61, 48, 102, 173, 61, 188, 184, 232, 61, 100, 34, 172, 60, 11, 111, 41, 190, 229, 116, 137, 61, 21, 50, 152, 61, 254, 160, 124, 188, 111, 212, 57, 190, 137, 30, 44, 60, 25, 241, 239, 189, 20, 54, 192, 59, 43, 194, 73, 189, 11, 41, 187, 62, 13, 127, 48, 62, 76, 235, 99, 189, 232, 193, 101, 188, 134, 190, 127, 62, 32, 208, 27, 190, 68, 125, 167, 62, 29, 78, 57, 190, 57, 254, 98, 62, 73, 222, 214, 189, 106, 156, 63, 190, 52, 37, 80, 62, 136, 156, 197, 189, 102, 81, 138, 189, 32, 136, 47, 191, 223, 82, 234, 61, 200, 6, 252, 190, 240, 108, 84, 62, 191, 175, 96, 191, 81, 67, 163, 62, 255, 196, 236, 188, 195, 51, 158, 62, 92, 186, 108, 62, 115, 57, 117, 189, 8, 249, 181, 190, 18, 141, 100, 188, 94, 173, 21, 190, 146, 40, 22, 189, 68, 190, 143, 62, 237, 62, 104, 62, 189, 114, 198, 189, 82, 167, 249, 189, 254, 192, 11, 190, 143, 90, 155, 62, 176, 118, 141, 188, 174, 254, 253, 62, 26, 152, 219, 61, 31, 30, 160, 61, 60, 191, 20, 62, 50, 18, 15, 191, 18, 221, 187, 62, 163, 35, 90, 61, 232, 91, 33, 187, 241, 186, 33, 62, 204, 234, 106, 189, 223, 162, 243, 189, 8, 126, 185, 61, 148, 89, 31, 190, 42, 91, 29, 190, 59, 237, 144, 59, 190, 190, 4, 190, 145, 252, 38, 190, 56, 229, 137, 60, 142, 248, 52, 190, 215, 10, 12, 62, 71, 167, 151, 188, 142, 56, 47, 188, 120, 37, 18, 190, 55, 243, 14, 190, 11, 32, 146, 189, 65, 94, 116, 61, 28, 225, 163, 61, 94, 14, 182, 189, 216, 105, 133, 61, 223, 28, 199, 189, 234, 226, 185, 60, 70, 52, 238, 189, 106, 110, 180, 189, 246, 94, 28, 62, 28, 31, 234, 61, 75, 206, 241, 61, 35, 130, 131, 61, 136, 205, 47, 190, 93, 198, 127, 61, 240, 81, 59, 189, 148, 175, 51, 188, 182, 222, 173, 61, 61, 181, 3, 60, 4, 63, 52, 59, 52, 41, 53, 61, 123, 180, 41, 60, 51, 213, 56, 190, 61, 55, 14, 189, 59, 70, 166, 61, 228, 142, 185, 185, 18, 211, 30, 190, 227, 236, 42, 189, 169, 8, 104, 190, 70, 25, 142, 61, 215, 30, 169, 61, 13, 166, 34, 62, 94, 251, 233, 61, 208, 231, 38, 190, 133, 224, 72, 188, 217, 218, 180, 189, 213, 229, 90, 189, 81, 222, 41, 189, 74, 182, 253, 189, 73, 179, 139, 186, 72, 28, 31, 61, 167, 70, 2, 189, 187, 11, 221, 60, 87, 155, 195, 61, 197, 219, 238, 189, 72, 64, 26, 188, 76, 188, 38, 189, 121, 230, 131, 61, 241, 25, 19, 190, 150, 186, 194, 188, 161, 186, 144, 60, 60, 133, 22, 190, 113, 85, 87, 190, 0, 205, 5, 62, 161, 184, 130, 61, 59, 8, 90, 61, 201, 2, 57, 62, 177, 32, 149, 190, 100, 254, 213, 188, 188, 81, 135, 189, 196, 219, 139, 190, 144, 147, 85, 190, 152, 202, 204, 61, 113, 122, 228, 190, 5, 106, 34, 190, 201, 255, 89, 189, 33, 46, 6, 189, 37, 230, 51, 188, 118, 92, 131, 187, 2, 18, 159, 189, 113, 30, 203, 62, 195, 187, 11, 191, 104, 189, 227, 62, 150, 150, 125, 62, 140, 14, 156, 190, 108, 175, 0, 190, 19, 48, 159, 62, 118, 205, 18, 61, 46, 174, 51, 191, 232, 36, 10, 62, 230, 8, 39, 62, 10, 150, 83, 190, 83, 224, 71, 190, 235, 189, 138, 62, 51, 143, 69, 190, 82, 13, 247, 61, 31, 166, 116, 190, 105, 216, 50, 62, 232, 248, 18, 189, 78, 209, 46, 61, 196, 75, 74, 62, 157, 153, 217, 60, 237, 173, 81, 190, 188, 211, 163, 60, 169, 157, 128, 191, 60, 80, 253, 190, 122, 1, 157, 189, 221, 216, 6, 190, 173, 169, 115, 190, 193, 162, 218, 189, 253, 184, 49, 61, 99, 249, 130, 62, 0, 122, 131, 61, 143, 220, 234, 190, 108, 141, 74, 62, 141, 187, 132, 62, 90, 74, 128, 62, 135, 104, 211, 61, 226, 172, 212, 189, 66, 177, 141, 61, 75, 18, 143, 190, 238, 176, 96, 190, 236, 253, 149, 189, 129, 98, 155, 61, 148, 87, 187, 61, 60, 176, 31, 191, 42, 51, 219, 189, 162, 158, 175, 190, 3, 80, 99, 190, 253, 1, 30, 190, 247, 1, 249, 61, 136, 157, 73, 191, 62, 7, 179, 62, 98, 167, 252, 189, 167, 228, 52, 191, 165, 137, 1, 190, 85, 129, 182, 189, 220, 235, 82, 191, 117, 162, 45, 191, 43, 5, 77, 190, 255, 240, 76, 188, 141, 65, 227, 62, 37, 112, 215, 189, 143, 248, 57, 62, 142, 138, 0, 63, 152, 60, 182, 191, 230, 134, 177, 62, 110, 39, 150, 61, 93, 40, 190, 190, 153, 225, 25, 62, 208, 157, 184, 190, 213, 180, 197, 62, 248, 213, 190, 191, 197, 78, 133, 62, 161, 53, 148, 61, 106, 200, 182, 191, 194, 141, 16, 191, 117, 11, 172, 190, 219, 152, 210, 190, 223, 56, 241, 190, 82, 148, 182, 189, 23, 88, 10, 191, 246, 144, 9, 61, 181, 14, 95, 190, 9, 104, 138, 61, 123, 186, 8, 189, 134, 135, 17, 191, 218, 237, 203, 189, 110, 127, 185, 61, 179, 138, 62, 191, 200, 142, 55, 191, 48, 151, 219, 189, 254, 139, 211, 61, 216, 237, 164, 61, 76, 45, 138, 189, 249, 232, 28, 62, 44, 123, 244, 62, 192, 33, 166, 191, 96, 236, 123, 62, 14, 64, 246, 61, 81, 133, 31, 190, 82, 97, 179, 61, 129, 173, 189, 59, 3, 74, 21, 62, 235, 93, 163, 191, 17, 85, 20, 189, 216, 180, 188, 61, 226, 124, 175, 191, 105, 77, 222, 189, 110, 215, 23, 62, 106, 208, 187, 190, 84, 28, 133, 60, 211, 99, 61, 190, 49, 67, 123, 62, 126, 167, 122, 62, 97, 100, 108, 189, 212, 132, 153, 190, 76, 198, 191, 191, 144, 211, 25, 63, 81, 167, 52, 61, 45, 75, 157, 62, 236, 0, 130, 62, 246, 119, 140, 62, 212, 253, 25, 191, 13, 23, 25, 191, 148, 111, 204, 61, 147, 157, 184, 60, 232, 180, 152, 190, 57, 4, 149, 190, 153, 153, 75, 62, 237, 52, 128, 188, 217, 189, 12, 190, 111, 120, 129, 62, 2, 183, 154, 189, 33, 3, 228, 62, 165, 119, 193, 189, 215, 180, 82, 190, 57, 10, 13, 61, 119, 181, 148, 61, 254, 99, 117, 60, 20, 56, 134, 61, 40, 139, 144, 190, 127, 22, 227, 187, 130, 105, 26, 190, 46, 248, 35, 190, 122, 249, 78, 62, 69, 136, 255, 61, 59, 161, 234, 189, 204, 26, 183, 190, 183, 119, 111, 189, 102, 189, 115, 62, 11, 238, 140, 61, 77, 27, 251, 61, 142, 118, 65, 188, 10, 190, 95, 60, 221, 208, 187, 60, 242, 35, 130, 61, 191, 165, 36, 60, 176, 209, 70, 190, 43, 253, 130, 188, 136, 145, 246, 58, 202, 112, 47, 62, 150, 189, 4, 62, 93, 166, 164, 190, 202, 200, 146, 189, 102, 155, 43, 190, 94, 172, 81, 62, 51, 225, 138, 189, 143, 220, 217, 188, 105, 61, 135, 61, 160, 145, 46, 61, 234, 117, 67, 62, 202, 144, 178, 62, 128, 148, 223, 61, 160, 87, 70, 190, 191, 22, 59, 190, 163, 10, 245, 189, 92, 2, 218, 187, 102, 189, 23, 62, 191, 89, 135, 58, 140, 226, 225, 188, 99, 63, 253, 61, 165, 115, 170, 188, 215, 123, 40, 190, 7, 109, 164, 189, 137, 151, 36, 189, 171, 145, 244, 188, 180, 214, 35, 60, 254, 92, 137, 61, 251, 0, 101, 189, 250, 165, 165, 189, 29, 189, 254, 59, 188, 200, 160, 189, 242, 168, 140, 61, 252, 187, 205, 61, 232, 38, 248, 60, 144, 140, 153, 188, 188, 16, 9, 190, 102, 223, 58, 190, 212, 146, 115, 189, 24, 20, 212, 189, 82, 79, 128, 61, 245, 29, 5, 190, 144, 44, 167, 189, 90, 69, 240, 61, 147, 66, 25, 61, 132, 47, 36, 190, 24, 100, 64, 62, 248, 182, 219, 61, 252, 127, 190, 61, 204, 104, 35, 62, 50, 179, 139, 62, 215, 160, 57, 62, 75, 114, 230, 189, 143, 179, 12, 190, 201, 221, 142, 60, 190, 14, 243, 61, 54, 45, 48, 62, 58, 238, 77, 190, 113, 48, 162, 189, 250, 251, 2, 190, 199, 250, 254, 189, 204, 87, 137, 62, 219, 107, 183, 62, 245, 10, 227, 190, 158, 152, 138, 62, 232, 67, 159, 61, 232, 103, 32, 62, 140, 110, 15, 62, 187, 117, 73, 62, 82, 6, 85, 62, 203, 217, 249, 61, 79, 234, 216, 61, 122, 217, 96, 189, 48, 29, 17, 189, 175, 94, 69, 62, 188, 244, 156, 62, 250, 21, 33, 190, 165, 18, 225, 60, 53, 154, 241, 189, 208, 40, 36, 188, 128, 7, 139, 190, 193, 210, 59, 61, 5, 135, 215, 61, 178, 239, 46, 62, 244, 94, 101, 190, 120, 156, 222, 61, 68, 189, 145, 61, 201, 164, 213, 61, 114, 126, 88, 61, 239, 214, 4, 62, 139, 251, 132, 189, 37, 179, 205, 189, 171, 102, 74, 61, 110, 102, 44, 62, 112, 22, 85, 61, 46, 156, 130, 190, 128, 252, 45, 61, 179, 106, 80, 60, 32, 181, 122, 62, 183, 195, 158, 61, 184, 200, 30, 190, 65, 115, 52, 189, 127, 240, 112, 188, 215, 32, 154, 61, 147, 190, 109, 190, 22, 7, 24, 62, 234, 205, 31, 189, 82, 242, 175, 62, 26, 87, 53, 61, 216, 161, 114, 190, 129, 7, 151, 61, 137, 89, 68, 190, 144, 62, 132, 62, 182, 50, 74, 62, 207, 220, 83, 61, 115, 92, 76, 190, 87, 224, 70, 190, 33, 223, 4, 63, 86, 4, 168, 61, 48, 190, 143, 188, 127, 214, 236, 62, 197, 216, 184, 62, 123, 151, 81, 190, 39, 148, 209, 190, 190, 33, 80, 61, 80, 229, 11, 62, 217, 197, 76, 190, 70, 80, 253, 189, 74, 136, 161, 62, 48, 80, 6, 61, 195, 71, 90, 62, 232, 254, 90, 62, 63, 1, 102, 190, 97, 173, 29, 62, 0, 23, 119, 190, 239, 48, 146, 62, 23, 249, 167, 61, 40, 123, 10, 61, 244, 155, 165, 62, 176, 172, 150, 189, 197, 168, 13, 63, 12, 153, 45, 190, 110, 197, 109, 62, 69, 5, 235, 61, 191, 249, 212, 62, 236, 132, 134, 61, 37, 128, 129, 189, 70, 249, 183, 190, 213, 27, 230, 61, 204, 221, 129, 62, 253, 170, 49, 62, 145, 87, 129, 60, 253, 128, 82, 62, 213, 177, 129, 62, 215, 172, 140, 60, 30, 15, 133, 190, 46, 55, 230, 188, 158, 71, 41, 62, 30, 254, 97, 190, 105, 229, 184, 189, 37, 194, 161, 61, 36, 185, 91, 190, 82, 16, 29, 190, 234, 71, 42, 189, 206, 138, 217, 60, 242, 152, 17, 62, 252, 207, 182, 190, 53, 176, 23, 62, 176, 114, 77, 189, 93, 107, 250, 190, 8, 251, 56, 62, 221, 156, 217, 190, 70, 101, 235, 190, 228, 60, 123, 189, 136, 36, 0, 191, 93, 40, 18, 62, 196, 3, 48, 191, 148, 197, 93, 62, 170, 203, 51, 62, 58, 59, 201, 62, 33, 103, 50, 61, 214, 70, 45, 190, 153, 64, 48, 189, 245, 243, 13, 62, 228, 108, 127, 189, 119, 220, 88, 190, 138, 220, 144, 62, 165, 236, 109, 62, 90, 160, 177, 61, 182, 95, 41, 190, 235, 104, 218, 61, 120, 186, 16, 63, 69, 50, 15, 191, 165, 72, 130, 62, 97, 27, 247, 60, 144, 53, 87, 190, 201, 176, 148, 62, 8, 50, 72, 190, 50, 212, 185, 62, 59, 142, 178, 190, 187, 157, 252, 189, 147, 225, 137, 62, 46, 124, 50, 190, 116, 37, 173, 190, 109, 82, 149, 190, 219, 34, 218, 59, 213, 123, 57, 189, 249, 146, 159, 189, 226, 231, 79, 190, 175, 240, 80, 60, 159, 177, 213, 61, 217, 134, 210, 60, 19, 51, 163, 62, 28, 211, 80, 189, 208, 157, 7, 62, 197, 192, 253, 189, 44, 108, 79, 190, 192, 73, 102, 189, 180, 117, 231, 61, 71, 84, 4, 61, 139, 155, 153, 61, 104, 37, 37, 189, 17, 28, 186, 61, 159, 25, 0, 190, 79, 202, 157, 188, 160, 99, 100, 62, 67, 84, 100, 61, 224, 248, 174, 61, 161, 119, 189, 189, 37, 63, 24, 189, 189, 101, 25, 189, 240, 19, 91, 190, 185, 33, 78, 190, 122, 25, 46, 62, 182, 22, 107, 190, 143, 201, 12, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 67, 229, 60, 175, 24, 162, 61, 224, 1, 142, 60, 90, 238, 183, 189, 122, 132, 100, 189, 168, 0, 59, 62, 20, 83, 239, 59, 217, 243, 92, 189, 138, 47, 188, 189, 199, 245, 7, 189, 98, 231, 210, 60, 125, 183, 19, 188, 210, 206, 112, 62, 123, 101, 160, 62, 56, 172, 59, 61, 32, 250, 26, 62, 43, 18, 163, 189, 115, 136, 38, 190, 16, 234, 93, 189, 192, 218, 18, 60, 247, 89, 47, 190, 68, 95, 152, 60, 191, 177, 150, 62, 168, 59, 68, 62, 64, 57, 171, 61, 62, 73, 184, 188, 58, 191, 23, 61, 45, 183, 115, 62, 77, 187, 77, 62, 39, 232, 30, 190, 244, 204, 76, 62, 54, 150, 250, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 245, 182, 62, 124, 223, 205, 63, 197, 223, 199, 190, 94, 202, 44, 190, 44, 254, 46, 190, 169, 187, 230, 62, 39, 108, 109, 190, 201, 68, 253, 60, 147, 119, 164, 189, 32, 217, 189, 190, 156, 31, 131, 63, 105, 57, 99, 190, 115, 12, 6, 191, 241, 177, 169, 62, 10, 197, 113, 63, 56, 37, 152, 188, 37, 119, 73, 190, 126, 166, 10, 62, 95, 38, 134, 189, 207, 128, 115, 190, 159, 231, 140, 190, 230, 47, 156, 191, 169, 60, 56, 191, 195, 68, 46, 63, 214, 87, 134, 188, 174, 126, 105, 189, 182, 67, 78, 62, 201, 122, 96, 61, 166, 138, 160, 62, 253, 115, 186, 190, 222, 109, 30, 191, 105, 152, 118, 189, 140, 169, 142, 190, 99, 104, 39, 61, 39, 29, 131, 190, 47, 112, 148, 188, 212, 123, 5, 190, 70, 69, 153, 189, 110, 203, 149, 189, 14, 181, 212, 60, 245, 8, 190, 61, 27, 218, 133, 189, 131, 253, 148, 61, 149, 168, 16, 61, 39, 103, 6, 190, 174, 219, 199, 189, 30, 252, 80, 62, 145, 72, 45, 190, 74, 53, 215, 62, 152, 167, 227, 189, 226, 202, 205, 61, 69, 105, 237, 190, 234, 81, 158, 62, 88, 240, 175, 62, 219, 227, 133, 190, 197, 15, 142, 61, 119, 241, 33, 61, 164, 119, 92, 61, 29, 142, 230, 189, 35, 81, 80, 190, 148, 233, 161, 61, 94, 59, 125, 62, 241, 94, 216, 189, 179, 116, 160, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 250, 18, 189, 40, 239, 172, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {166, 52, 69, 63, 30, 216, 159, 63, 197, 238, 185, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {251, 54, 80, 192, 184, 213, 84, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0080/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}