// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 69, 82, 63, 219, 140, 81, 191, 20, 46, 163, 190, 35, 216, 231, 62, 3, 119, 210, 62, 137, 128, 74, 63, 59, 189, 80, 63, 100, 79, 106, 191, 48, 247, 185, 190, 154, 202, 172, 62, 158, 216, 76, 190, 25, 252, 14, 63, 182, 191, 158, 62, 227, 19, 150, 191, 30, 136, 69, 190, 47, 165, 3, 62, 192, 210, 30, 190, 2, 62, 139, 190, 250, 85, 152, 189, 160, 4, 134, 63, 27, 231, 17, 63, 171, 204, 36, 189, 249, 182, 105, 63, 69, 98, 100, 62, 156, 97, 19, 63, 136, 80, 130, 63, 189, 253, 104, 62, 136, 208, 163, 190, 75, 52, 98, 191, 24, 248, 139, 62, 151, 193, 4, 62, 122, 118, 22, 191, 209, 56, 255, 190, 229, 180, 147, 62, 80, 134, 68, 191, 77, 196, 232, 62, 176, 236, 13, 191, 13, 23, 130, 62, 113, 90, 41, 63, 31, 215, 29, 61, 240, 50, 85, 191, 172, 181, 211, 62, 146, 32, 8, 61, 97, 94, 221, 63, 96, 150, 183, 62, 181, 191, 219, 62, 130, 66, 187, 63, 105, 42, 124, 62, 196, 113, 129, 191, 139, 163, 170, 191, 47, 105, 84, 190, 170, 175, 217, 62, 29, 103, 32, 191, 142, 216, 203, 190, 213, 78, 87, 190, 52, 112, 127, 63, 125, 208, 159, 189, 112, 136, 50, 191, 75, 251, 180, 191, 158, 20, 169, 190, 85, 58, 131, 191, 148, 75, 134, 63, 180, 222, 204, 62, 80, 60, 179, 62, 60, 30, 143, 63, 157, 13, 171, 62, 216, 117, 32, 62, 182, 231, 146, 63, 13, 216, 24, 189, 237, 235, 207, 190, 123, 23, 31, 63, 162, 124, 35, 190, 45, 44, 186, 190, 34, 16, 134, 63, 55, 236, 79, 189, 225, 75, 5, 63, 177, 244, 78, 191, 196, 97, 76, 190, 226, 115, 186, 190, 0, 37, 161, 62, 250, 236, 235, 190, 255, 111, 225, 189, 246, 204, 182, 63, 127, 77, 151, 62, 139, 222, 80, 62, 50, 204, 221, 191, 225, 209, 7, 191, 36, 218, 99, 190, 84, 20, 84, 63, 46, 37, 184, 189, 75, 224, 162, 190, 77, 219, 148, 63, 200, 205, 156, 62, 243, 55, 70, 191, 144, 109, 31, 63, 79, 150, 89, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 209, 23, 191, 79, 109, 149, 190, 50, 207, 27, 191, 244, 127, 222, 188, 183, 41, 108, 189, 173, 43, 102, 61, 108, 35, 46, 62, 202, 220, 194, 62, 244, 43, 14, 191, 199, 35, 106, 190, 255, 194, 145, 190, 100, 115, 3, 63, 219, 86, 41, 190, 104, 38, 24, 62, 135, 92, 3, 62, 219, 53, 149, 190, 66, 202, 170, 62, 228, 118, 74, 62, 67, 173, 117, 189, 234, 62, 153, 190, 171, 11, 138, 62, 5, 164, 227, 62, 107, 232, 226, 62, 175, 217, 82, 61, 28, 19, 116, 61, 92, 79, 78, 62, 98, 216, 19, 190, 39, 67, 22, 190, 102, 161, 185, 189, 103, 146, 10, 63, 228, 37, 140, 190, 245, 26, 92, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 157, 62, 189, 133, 156, 29, 191, 255, 161, 186, 61, 97, 224, 4, 61, 17, 59, 152, 190, 12, 135, 36, 61, 209, 63, 125, 191, 141, 107, 189, 189, 54, 87, 27, 191, 79, 142, 222, 190, 215, 210, 82, 189, 79, 123, 188, 62, 137, 63, 183, 190, 219, 171, 152, 191, 225, 231, 27, 191, 121, 232, 144, 190, 87, 237, 59, 191, 208, 37, 134, 60, 222, 58, 85, 62, 198, 247, 185, 190, 221, 112, 132, 190, 201, 99, 10, 62, 50, 73, 27, 62, 193, 40, 237, 60, 85, 217, 159, 189, 170, 197, 161, 62, 155, 134, 154, 62, 195, 210, 158, 191, 159, 76, 158, 188, 70, 252, 178, 189, 46, 12, 118, 191, 89, 127, 189, 60, 130, 238, 186, 190, 8, 85, 7, 191, 7, 82, 194, 190, 14, 211, 80, 191, 245, 18, 75, 189, 242, 156, 158, 190, 208, 206, 135, 62, 5, 7, 149, 188, 217, 102, 143, 190, 132, 182, 48, 61, 236, 12, 193, 190, 189, 127, 152, 191, 124, 141, 25, 190, 145, 118, 1, 190, 236, 50, 94, 191, 176, 117, 166, 190, 101, 39, 24, 189, 10, 254, 24, 190, 245, 185, 130, 61, 133, 198, 81, 190, 61, 177, 218, 61, 231, 207, 137, 191, 168, 29, 235, 61, 232, 250, 160, 61, 16, 42, 90, 187, 44, 171, 47, 190, 162, 191, 2, 191, 230, 249, 195, 62, 125, 121, 21, 191, 183, 194, 138, 62, 161, 99, 19, 62, 197, 240, 220, 60, 203, 173, 17, 191, 224, 145, 131, 190, 212, 60, 64, 191, 68, 8, 222, 188, 214, 202, 216, 190, 93, 130, 41, 62, 23, 191, 37, 62, 25, 123, 171, 62, 96, 118, 204, 190, 215, 226, 110, 62, 107, 93, 175, 189, 20, 23, 139, 61, 17, 104, 42, 62, 160, 31, 53, 62, 48, 217, 42, 60, 133, 107, 44, 189, 160, 191, 4, 191, 72, 19, 166, 61, 35, 1, 157, 189, 120, 159, 15, 61, 187, 169, 73, 62, 64, 105, 72, 62, 159, 115, 145, 61, 241, 51, 145, 62, 200, 44, 207, 61, 123, 66, 120, 188, 187, 66, 243, 188, 183, 56, 5, 190, 143, 65, 58, 191, 145, 18, 131, 62, 229, 236, 45, 189, 228, 73, 144, 62, 96, 86, 243, 189, 254, 240, 182, 189, 57, 154, 3, 190, 89, 227, 19, 190, 97, 93, 31, 190, 223, 16, 163, 189, 223, 57, 253, 187, 65, 237, 2, 190, 248, 195, 114, 188, 41, 183, 6, 190, 252, 68, 215, 60, 40, 180, 135, 61, 252, 40, 14, 189, 203, 140, 42, 61, 48, 251, 5, 62, 99, 171, 105, 189, 92, 87, 225, 60, 246, 218, 4, 190, 119, 29, 27, 62, 244, 23, 168, 188, 240, 214, 27, 190, 78, 164, 25, 62, 212, 145, 35, 190, 23, 62, 27, 190, 225, 238, 76, 61, 191, 238, 21, 62, 183, 224, 255, 61, 252, 3, 243, 61, 57, 211, 157, 189, 116, 147, 7, 190, 98, 198, 54, 61, 217, 6, 181, 61, 210, 163, 7, 190, 10, 43, 69, 60, 3, 220, 46, 61, 7, 118, 190, 61, 20, 83, 51, 62, 222, 221, 128, 189, 2, 233, 230, 189, 158, 58, 114, 188, 0, 39, 231, 187, 56, 188, 28, 190, 31, 218, 181, 61, 248, 118, 17, 188, 82, 179, 136, 61, 83, 241, 40, 190, 131, 62, 94, 190, 6, 148, 231, 61, 195, 181, 139, 188, 197, 73, 203, 189, 71, 194, 197, 61, 121, 11, 153, 61, 62, 82, 223, 61, 13, 113, 25, 188, 172, 65, 111, 60, 136, 86, 194, 61, 218, 92, 130, 189, 182, 226, 33, 190, 139, 41, 234, 189, 221, 73, 25, 61, 199, 108, 122, 189, 195, 54, 46, 190, 188, 191, 147, 61, 207, 186, 44, 190, 125, 176, 4, 62, 189, 144, 204, 190, 207, 218, 92, 62, 140, 38, 204, 189, 226, 65, 150, 60, 155, 201, 173, 61, 238, 230, 73, 190, 118, 164, 6, 190, 12, 78, 191, 191, 41, 169, 222, 62, 194, 66, 223, 61, 141, 157, 20, 62, 130, 138, 133, 62, 54, 121, 194, 62, 155, 91, 208, 190, 243, 65, 25, 191, 179, 194, 28, 62, 235, 160, 82, 62, 141, 126, 40, 190, 71, 184, 66, 190, 123, 32, 169, 62, 242, 71, 150, 61, 171, 241, 255, 189, 168, 254, 168, 61, 216, 101, 216, 190, 243, 212, 177, 62, 236, 159, 55, 189, 200, 53, 79, 190, 172, 205, 66, 62, 72, 33, 224, 60, 112, 38, 254, 62, 187, 67, 160, 62, 187, 186, 116, 62, 47, 147, 68, 61, 85, 87, 242, 61, 218, 238, 233, 61, 225, 115, 143, 62, 3, 165, 153, 62, 222, 80, 152, 189, 161, 95, 53, 61, 217, 159, 170, 190, 242, 62, 75, 62, 192, 32, 128, 190, 170, 18, 92, 62, 156, 185, 32, 62, 44, 232, 177, 62, 193, 59, 165, 61, 88, 206, 233, 189, 136, 185, 155, 190, 152, 171, 122, 190, 232, 181, 151, 62, 70, 107, 254, 61, 28, 208, 162, 188, 86, 220, 155, 190, 94, 75, 68, 189, 86, 253, 229, 62, 244, 119, 171, 62, 22, 64, 62, 62, 15, 81, 227, 189, 104, 17, 5, 62, 117, 62, 217, 190, 58, 244, 169, 61, 94, 179, 70, 62, 73, 69, 12, 63, 162, 38, 240, 189, 221, 66, 209, 189, 76, 68, 209, 189, 220, 150, 23, 190, 177, 98, 190, 189, 39, 128, 95, 189, 215, 142, 10, 61, 80, 19, 223, 60, 98, 186, 47, 62, 154, 214, 71, 189, 183, 178, 205, 189, 127, 144, 22, 62, 16, 239, 227, 189, 79, 25, 209, 61, 249, 137, 45, 190, 57, 165, 171, 189, 152, 126, 112, 189, 236, 145, 63, 189, 101, 133, 234, 189, 139, 168, 12, 62, 28, 141, 134, 189, 241, 52, 89, 189, 34, 101, 75, 61, 226, 64, 30, 190, 155, 82, 4, 62, 1, 23, 97, 189, 51, 184, 252, 189, 165, 217, 26, 188, 10, 76, 210, 189, 196, 212, 240, 189, 9, 228, 224, 188, 58, 254, 219, 187, 41, 18, 195, 188, 208, 127, 63, 189, 132, 229, 13, 62, 242, 172, 246, 188, 97, 120, 69, 190, 238, 211, 147, 188, 107, 15, 222, 187, 129, 154, 1, 190, 178, 139, 188, 61, 152, 248, 40, 189, 210, 22, 70, 189, 174, 110, 10, 60, 130, 71, 147, 61, 95, 79, 33, 190, 241, 224, 7, 190, 35, 132, 213, 60, 195, 87, 43, 190, 178, 4, 78, 61, 160, 214, 5, 189, 189, 206, 236, 189, 182, 192, 250, 61, 159, 212, 230, 61, 23, 92, 51, 189, 132, 153, 146, 61, 12, 146, 46, 62, 105, 41, 13, 59, 25, 188, 31, 190, 10, 63, 17, 190, 211, 243, 215, 60, 98, 89, 64, 190, 170, 123, 12, 190, 85, 23, 242, 189, 112, 136, 169, 188, 154, 92, 125, 62, 117, 9, 66, 189, 183, 106, 10, 62, 217, 72, 108, 190, 108, 207, 187, 61, 142, 253, 252, 61, 196, 19, 131, 62, 141, 247, 125, 62, 163, 74, 158, 190, 76, 69, 12, 190, 137, 194, 239, 189, 113, 225, 208, 188, 17, 42, 231, 189, 9, 37, 225, 62, 121, 253, 255, 62, 66, 167, 56, 62, 96, 162, 64, 190, 241, 201, 56, 189, 29, 147, 54, 63, 32, 166, 213, 191, 88, 133, 4, 62, 52, 104, 41, 61, 104, 145, 0, 191, 177, 96, 151, 190, 238, 49, 132, 190, 253, 142, 207, 61, 195, 101, 132, 191, 98, 206, 64, 62, 190, 81, 146, 61, 152, 192, 182, 191, 123, 210, 3, 191, 152, 193, 151, 189, 52, 232, 191, 189, 39, 212, 128, 61, 1, 80, 131, 190, 115, 79, 3, 62, 182, 172, 243, 190, 98, 1, 49, 62, 239, 105, 28, 62, 164, 41, 94, 60, 52, 42, 237, 190, 2, 68, 237, 190, 227, 122, 75, 191, 58, 103, 147, 190, 127, 167, 19, 191, 31, 59, 57, 190, 14, 219, 51, 62, 172, 60, 28, 63, 105, 232, 16, 191, 123, 192, 236, 62, 146, 37, 194, 61, 239, 128, 24, 62, 53, 10, 4, 191, 231, 184, 186, 62, 29, 132, 233, 61, 13, 223, 199, 62, 67, 175, 73, 191, 219, 229, 215, 190, 126, 23, 201, 62, 95, 92, 245, 190, 146, 100, 68, 62, 82, 202, 211, 60, 148, 118, 135, 62, 11, 130, 50, 62, 199, 55, 230, 189, 140, 179, 165, 188, 46, 104, 133, 62, 253, 175, 168, 62, 131, 183, 121, 189, 78, 159, 245, 61, 83, 197, 192, 60, 232, 204, 195, 189, 78, 113, 153, 189, 115, 32, 96, 191, 71, 239, 136, 62, 34, 28, 151, 62, 125, 220, 120, 62, 62, 118, 189, 189, 83, 121, 76, 189, 81, 103, 9, 191, 40, 53, 124, 190, 67, 12, 153, 62, 228, 251, 83, 191, 102, 58, 113, 61, 99, 122, 145, 190, 153, 236, 159, 190, 7, 67, 44, 63, 152, 67, 56, 62, 62, 54, 194, 61, 76, 185, 81, 191, 91, 89, 253, 188, 117, 126, 17, 62, 46, 221, 151, 190, 208, 204, 206, 61, 76, 77, 182, 189, 115, 206, 56, 191, 111, 46, 179, 62, 202, 113, 64, 190, 224, 192, 134, 61, 212, 213, 124, 190, 175, 100, 184, 61, 231, 234, 95, 189, 132, 82, 7, 190, 49, 99, 146, 190, 221, 79, 131, 61, 12, 152, 140, 190, 227, 237, 168, 62, 206, 182, 143, 190, 48, 8, 189, 62, 44, 246, 170, 62, 10, 7, 155, 62, 23, 179, 56, 190, 3, 232, 166, 190, 252, 16, 145, 62, 19, 9, 221, 61, 194, 115, 47, 191, 230, 153, 155, 62, 149, 85, 16, 62, 56, 61, 159, 189, 252, 36, 130, 61, 173, 10, 170, 61, 236, 239, 81, 62, 228, 218, 133, 191, 141, 100, 72, 60, 115, 123, 25, 190, 69, 102, 178, 191, 57, 131, 163, 189, 62, 179, 178, 62, 56, 109, 163, 189, 249, 139, 184, 62, 10, 218, 28, 190, 45, 17, 109, 62, 106, 84, 196, 188, 23, 102, 29, 62, 205, 12, 19, 62, 238, 61, 18, 62, 49, 222, 207, 62, 64, 184, 162, 189, 13, 179, 153, 62, 224, 28, 140, 62, 236, 104, 130, 62, 21, 253, 198, 189, 174, 148, 61, 190, 136, 9, 224, 62, 52, 151, 167, 61, 156, 151, 207, 60, 126, 189, 111, 190, 194, 41, 129, 62, 196, 232, 48, 189, 101, 166, 56, 62, 8, 230, 41, 63, 215, 128, 46, 190, 159, 151, 139, 62, 151, 233, 128, 191, 39, 146, 146, 62, 215, 108, 11, 190, 227, 153, 223, 61, 186, 138, 21, 63, 78, 34, 150, 61, 56, 45, 41, 61, 134, 2, 175, 189, 196, 53, 133, 60, 219, 172, 109, 60, 21, 24, 113, 62, 218, 60, 30, 190, 62, 222, 215, 61, 211, 164, 140, 189, 29, 227, 102, 191, 121, 54, 8, 63, 102, 122, 15, 191, 252, 203, 147, 190, 122, 193, 25, 62, 221, 25, 142, 62, 79, 6, 22, 191, 143, 184, 207, 190, 149, 94, 70, 63, 104, 32, 194, 190, 118, 39, 225, 61, 179, 177, 207, 62, 143, 224, 108, 189, 98, 68, 208, 190, 133, 5, 72, 189, 5, 153, 237, 62, 142, 85, 49, 62, 158, 253, 11, 62, 114, 133, 178, 190, 45, 49, 82, 61, 40, 106, 165, 190, 200, 102, 169, 62, 39, 246, 73, 190, 59, 131, 145, 62, 245, 164, 19, 190, 26, 222, 157, 60, 128, 122, 186, 190, 97, 109, 134, 62, 35, 224, 91, 189, 12, 104, 104, 61, 197, 111, 149, 189, 123, 48, 200, 188, 106, 96, 133, 189, 51, 72, 24, 190, 34, 23, 217, 61, 147, 154, 172, 61, 235, 72, 149, 189, 242, 74, 48, 190, 197, 79, 46, 190, 99, 155, 124, 190, 100, 1, 198, 61, 29, 20, 54, 189, 140, 15, 191, 62, 240, 66, 69, 62, 159, 134, 97, 190, 179, 178, 255, 189, 147, 183, 92, 62, 13, 219, 37, 190, 218, 245, 168, 62, 65, 60, 71, 190, 189, 157, 139, 62, 13, 26, 107, 190, 30, 89, 67, 190, 205, 15, 43, 62, 64, 249, 128, 190, 144, 11, 118, 189, 181, 221, 96, 191, 51, 212, 16, 188, 33, 203, 57, 191, 40, 199, 135, 61, 215, 173, 138, 191, 245, 77, 152, 62, 33, 106, 180, 189, 140, 206, 189, 62, 240, 126, 153, 55, 101, 162, 15, 190, 202, 97, 229, 190, 149, 155, 186, 189, 28, 200, 93, 190, 17, 59, 193, 189, 178, 116, 145, 62, 18, 94, 15, 62, 51, 234, 128, 190, 4, 224, 17, 190, 97, 108, 29, 190, 19, 220, 58, 62, 129, 159, 221, 189, 191, 8, 9, 63, 222, 0, 72, 62, 239, 29, 180, 61, 92, 181, 9, 62, 197, 158, 10, 191, 114, 123, 155, 62, 253, 91, 182, 189, 15, 83, 164, 190, 41, 190, 145, 62, 186, 201, 113, 190, 36, 212, 243, 189, 8, 126, 185, 61, 51, 92, 34, 190, 42, 91, 29, 190, 58, 248, 107, 59, 190, 190, 4, 190, 127, 121, 38, 190, 60, 97, 87, 59, 65, 112, 63, 190, 112, 212, 12, 62, 71, 167, 151, 188, 142, 56, 47, 188, 98, 222, 17, 190, 117, 22, 16, 190, 11, 32, 146, 189, 132, 3, 60, 61, 204, 116, 153, 61, 94, 14, 182, 189, 167, 6, 136, 61, 212, 87, 216, 189, 234, 226, 185, 60, 110, 68, 1, 190, 69, 28, 199, 189, 19, 157, 17, 62, 161, 75, 217, 61, 179, 170, 219, 61, 35, 130, 131, 61, 72, 95, 52, 190, 115, 180, 77, 61, 240, 81, 59, 189, 69, 229, 187, 188, 39, 186, 155, 61, 97, 187, 253, 184, 4, 63, 52, 59, 39, 246, 43, 61, 123, 180, 41, 60, 237, 132, 56, 190, 64, 107, 137, 189, 160, 62, 166, 61, 253, 167, 23, 188, 181, 7, 49, 190, 233, 55, 192, 188, 224, 54, 113, 190, 70, 25, 142, 61, 19, 5, 172, 61, 5, 115, 29, 62, 104, 124, 222, 61, 234, 122, 45, 190, 244, 19, 196, 186, 60, 138, 250, 189, 39, 224, 92, 189, 81, 222, 41, 189, 24, 78, 254, 189, 60, 88, 96, 188, 11, 15, 1, 61, 130, 161, 189, 188, 187, 11, 221, 60, 129, 189, 195, 61, 251, 67, 8, 190, 72, 64, 26, 188, 80, 78, 132, 189, 240, 39, 131, 61, 89, 246, 22, 190, 233, 201, 70, 189, 161, 186, 144, 60, 179, 144, 248, 189, 92, 125, 52, 62, 39, 170, 33, 62, 224, 207, 240, 61, 227, 35, 163, 61, 187, 158, 30, 62, 143, 124, 113, 190, 20, 87, 192, 188, 22, 95, 154, 189, 61, 120, 55, 190, 180, 211, 63, 190, 162, 224, 193, 61, 78, 71, 167, 190, 156, 141, 139, 60, 34, 224, 238, 187, 138, 146, 125, 188, 45, 223, 132, 61, 126, 153, 97, 58, 150, 9, 190, 59, 3, 4, 1, 63, 120, 181, 114, 191, 142, 192, 231, 62, 201, 229, 118, 62, 227, 196, 188, 190, 175, 178, 136, 189, 198, 98, 159, 62, 151, 212, 63, 61, 68, 7, 21, 191, 15, 152, 26, 62, 183, 250, 255, 61, 167, 86, 242, 190, 225, 43, 123, 190, 150, 50, 10, 62, 58, 120, 214, 190, 238, 228, 238, 187, 189, 2, 143, 190, 209, 71, 71, 62, 81, 192, 190, 189, 39, 67, 87, 187, 171, 155, 108, 62, 120, 174, 23, 191, 237, 173, 81, 190, 186, 17, 230, 187, 105, 121, 110, 191, 156, 20, 9, 191, 122, 1, 157, 189, 12, 92, 66, 61, 93, 28, 131, 190, 107, 46, 163, 189, 105, 100, 100, 188, 217, 212, 118, 62, 22, 226, 219, 61, 44, 164, 169, 190, 103, 74, 147, 62, 138, 94, 92, 62, 255, 240, 143, 62, 119, 132, 209, 61, 102, 97, 78, 190, 196, 197, 101, 61, 104, 182, 165, 190, 208, 162, 146, 190, 58, 34, 166, 189, 147, 80, 6, 62, 161, 180, 33, 62, 175, 236, 20, 191, 158, 11, 126, 190, 26, 17, 150, 190, 194, 84, 157, 190, 99, 62, 98, 189, 91, 136, 11, 62, 136, 218, 238, 190, 96, 218, 250, 62, 98, 128, 58, 62, 63, 163, 34, 191, 213, 136, 78, 189, 228, 143, 2, 191, 172, 177, 83, 191, 248, 133, 69, 191, 30, 4, 60, 62, 42, 23, 231, 61, 32, 239, 27, 63, 110, 165, 166, 189, 75, 25, 143, 62, 153, 76, 44, 63, 3, 73, 245, 191, 106, 188, 198, 62, 175, 27, 191, 61, 128, 96, 177, 190, 175, 31, 125, 62, 195, 230, 187, 190, 195, 198, 212, 62, 44, 38, 157, 191, 217, 215, 174, 62, 83, 49, 121, 61, 248, 91, 167, 191, 35, 146, 13, 191, 203, 27, 208, 190, 81, 210, 159, 190, 216, 79, 13, 191, 206, 138, 57, 190, 61, 111, 29, 191, 236, 209, 1, 60, 52, 2, 255, 60, 40, 54, 221, 61, 148, 118, 90, 61, 94, 42, 13, 191, 110, 187, 189, 189, 216, 109, 55, 61, 110, 136, 66, 191, 216, 213, 239, 190, 217, 69, 210, 60, 93, 254, 60, 62, 132, 73, 237, 61, 255, 2, 174, 189, 149, 104, 108, 62, 85, 159, 6, 63, 193, 136, 220, 191, 222, 139, 129, 62, 134, 1, 10, 62, 187, 3, 195, 189, 122, 5, 48, 62, 187, 112, 49, 189, 204, 160, 54, 62, 110, 215, 89, 191, 223, 43, 24, 190, 125, 135, 25, 62, 60, 2, 161, 191, 83, 49, 162, 186, 150, 78, 88, 62, 39, 228, 16, 191, 35, 105, 174, 61, 32, 120, 100, 190, 235, 162, 138, 62, 125, 217, 153, 62, 5, 172, 97, 190, 158, 206, 152, 190, 53, 236, 198, 191, 175, 48, 19, 63, 230, 104, 103, 61, 27, 250, 164, 62, 61, 127, 64, 62, 15, 51, 11, 62, 33, 239, 50, 191, 51, 209, 33, 191, 181, 103, 5, 62, 236, 242, 80, 61, 165, 141, 184, 190, 187, 249, 155, 190, 26, 5, 193, 61, 0, 37, 226, 188, 193, 124, 241, 189, 244, 185, 120, 62, 144, 25, 15, 190, 44, 153, 248, 62, 87, 177, 224, 189, 213, 240, 141, 190, 114, 254, 177, 61, 50, 250, 198, 61, 209, 245, 147, 189, 246, 48, 133, 61, 243, 228, 135, 190, 140, 113, 17, 190, 59, 241, 30, 190, 139, 125, 16, 190, 186, 25, 150, 62, 170, 158, 130, 189, 181, 134, 24, 191, 206, 1, 86, 191, 231, 12, 218, 190, 204, 54, 37, 189, 196, 242, 216, 190, 225, 15, 49, 62, 77, 87, 157, 190, 48, 52, 156, 189, 208, 78, 160, 190, 222, 27, 153, 190, 191, 232, 12, 191, 69, 227, 95, 190, 149, 169, 204, 60, 247, 91, 108, 191, 159, 241, 230, 188, 190, 186, 43, 188, 72, 136, 12, 191, 13, 201, 130, 189, 161, 106, 45, 190, 111, 179, 149, 62, 152, 41, 248, 189, 18, 151, 222, 189, 42, 98, 100, 61, 172, 150, 193, 190, 15, 216, 201, 61, 137, 87, 197, 62, 90, 230, 155, 61, 119, 65, 73, 190, 233, 134, 93, 190, 140, 244, 24, 190, 65, 117, 30, 189, 2, 78, 6, 62, 25, 90, 158, 188, 242, 64, 68, 189, 17, 98, 221, 61, 165, 115, 170, 188, 92, 141, 47, 190, 58, 115, 197, 189, 63, 7, 37, 189, 171, 145, 244, 188, 170, 10, 94, 188, 189, 79, 37, 61, 251, 0, 101, 189, 141, 241, 198, 189, 221, 27, 208, 59, 188, 200, 160, 189, 6, 117, 139, 61, 187, 144, 196, 61, 122, 70, 221, 60, 2, 209, 205, 188, 235, 35, 11, 190, 101, 210, 78, 190, 128, 64, 129, 189, 1, 211, 220, 189, 198, 206, 71, 61, 25, 32, 28, 190, 236, 52, 173, 189, 98, 33, 239, 61, 3, 255, 155, 61, 217, 222, 13, 190, 234, 172, 119, 62, 146, 153, 196, 61, 172, 93, 219, 61, 156, 45, 78, 62, 206, 209, 145, 62, 173, 99, 43, 62, 15, 40, 200, 61, 27, 141, 110, 189, 242, 244, 153, 61, 58, 180, 173, 61, 131, 185, 69, 62, 31, 22, 116, 190, 146, 107, 205, 189, 185, 163, 125, 189, 141, 125, 28, 189, 204, 82, 138, 62, 229, 121, 181, 62, 31, 124, 196, 190, 7, 144, 150, 62, 93, 242, 17, 61, 243, 126, 19, 62, 31, 222, 45, 62, 226, 221, 48, 62, 242, 191, 72, 62, 145, 28, 15, 62, 23, 17, 84, 62, 96, 41, 1, 61, 249, 219, 90, 189, 195, 175, 163, 62, 75, 109, 164, 62, 113, 44, 13, 190, 190, 56, 32, 61, 205, 116, 151, 189, 229, 205, 202, 60, 38, 84, 165, 190, 44, 81, 220, 61, 249, 179, 113, 61, 250, 181, 0, 62, 29, 121, 189, 189, 79, 238, 155, 61, 204, 197, 18, 62, 185, 36, 176, 61, 209, 80, 64, 61, 113, 215, 216, 61, 70, 116, 4, 190, 9, 206, 118, 189, 224, 241, 154, 61, 237, 36, 50, 62, 126, 211, 10, 62, 74, 132, 130, 190, 193, 93, 253, 59, 52, 43, 7, 189, 167, 100, 132, 62, 199, 27, 219, 61, 189, 100, 164, 189, 195, 204, 128, 189, 181, 91, 134, 61, 141, 137, 4, 62, 201, 166, 82, 190, 225, 242, 16, 62, 132, 104, 202, 60, 217, 153, 180, 62, 47, 54, 139, 61, 227, 26, 125, 190, 48, 173, 217, 61, 247, 106, 82, 190, 120, 165, 126, 62, 38, 89, 105, 62, 141, 45, 7, 188, 187, 149, 129, 190, 148, 139, 67, 190, 66, 38, 36, 63, 53, 212, 205, 61, 191, 149, 17, 189, 73, 36, 249, 62, 131, 134, 178, 62, 55, 41, 154, 190, 230, 21, 230, 190, 15, 126, 100, 61, 4, 235, 3, 62, 75, 141, 132, 190, 62, 175, 32, 190, 142, 40, 156, 62, 191, 241, 222, 188, 56, 241, 54, 62, 11, 142, 108, 62, 159, 253, 162, 190, 46, 109, 20, 62, 38, 110, 121, 190, 199, 218, 133, 62, 190, 250, 245, 61, 35, 24, 60, 188, 191, 217, 168, 62, 145, 206, 144, 189, 108, 74, 11, 63, 108, 164, 69, 190, 103, 153, 96, 62, 74, 237, 89, 62, 112, 106, 0, 63, 195, 157, 172, 188, 142, 192, 229, 189, 201, 9, 234, 190, 214, 250, 49, 190, 220, 76, 68, 62, 92, 231, 59, 62, 74, 26, 240, 61, 10, 219, 28, 62, 179, 180, 144, 62, 214, 204, 158, 189, 20, 199, 251, 190, 255, 95, 112, 189, 11, 237, 38, 62, 167, 198, 229, 60, 152, 85, 207, 189, 89, 44, 83, 60, 123, 215, 70, 190, 105, 162, 109, 190, 53, 216, 42, 190, 49, 96, 59, 62, 30, 95, 87, 62, 237, 52, 81, 190, 163, 194, 131, 60, 228, 215, 173, 187, 191, 188, 46, 191, 15, 146, 90, 187, 250, 19, 64, 191, 38, 174, 2, 191, 74, 245, 155, 189, 183, 138, 16, 191, 119, 42, 153, 61, 182, 144, 59, 191, 32, 222, 51, 62, 81, 23, 30, 61, 235, 241, 181, 62, 230, 40, 229, 189, 79, 182, 124, 190, 139, 122, 138, 189, 180, 175, 239, 61, 8, 89, 22, 190, 66, 32, 251, 189, 239, 42, 97, 62, 90, 146, 30, 62, 201, 215, 84, 61, 115, 48, 52, 190, 161, 0, 72, 61, 54, 192, 27, 63, 42, 134, 80, 191, 238, 215, 114, 62, 26, 220, 41, 187, 59, 18, 102, 190, 223, 32, 96, 62, 208, 5, 85, 190, 229, 9, 178, 62, 245, 101, 33, 191, 108, 96, 115, 190, 165, 50, 115, 62, 175, 105, 249, 190, 97, 201, 138, 190, 133, 18, 8, 191, 169, 161, 110, 190, 187, 237, 180, 190, 117, 51, 221, 190, 86, 234, 25, 191, 52, 69, 155, 61, 66, 30, 194, 188, 63, 44, 157, 60, 130, 233, 60, 62, 177, 1, 131, 188, 172, 126, 106, 61, 74, 148, 160, 190, 206, 135, 135, 190, 226, 34, 229, 189, 253, 203, 239, 61, 185, 238, 57, 187, 13, 10, 115, 62, 48, 27, 67, 60, 232, 3, 197, 189, 109, 7, 15, 61, 204, 134, 136, 190, 63, 161, 88, 62, 11, 58, 191, 61, 137, 44, 90, 58, 72, 149, 154, 190, 78, 124, 141, 188, 138, 95, 5, 190, 47, 119, 38, 191, 126, 4, 77, 191, 219, 229, 83, 62, 39, 150, 21, 191, 41, 212, 63, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 102, 11, 188, 78, 24, 36, 59, 19, 173, 13, 61, 90, 238, 183, 189, 66, 23, 109, 189, 201, 113, 67, 62, 87, 123, 11, 61, 217, 243, 92, 189, 138, 47, 188, 189, 28, 11, 158, 189, 246, 51, 106, 62, 236, 0, 2, 62, 75, 127, 125, 62, 21, 216, 148, 62, 151, 180, 138, 62, 117, 155, 8, 62, 171, 235, 168, 60, 183, 7, 46, 190, 40, 180, 144, 189, 48, 160, 232, 186, 16, 0, 90, 190, 177, 102, 206, 188, 166, 93, 140, 62, 14, 202, 100, 62, 80, 157, 122, 60, 37, 89, 254, 188, 21, 130, 52, 59, 255, 117, 89, 62, 155, 132, 39, 62, 80, 101, 119, 189, 164, 231, 46, 62, 90, 80, 243, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 97, 203, 62, 192, 215, 197, 63, 40, 142, 192, 190, 94, 202, 44, 190, 189, 254, 46, 190, 255, 93, 224, 62, 87, 235, 230, 189, 201, 68, 253, 60, 147, 119, 164, 189, 248, 30, 252, 190, 9, 31, 135, 63, 165, 154, 127, 190, 154, 49, 7, 191, 185, 142, 163, 62, 246, 218, 133, 63, 180, 3, 225, 57, 25, 170, 101, 190, 11, 237, 255, 61, 19, 135, 35, 189, 29, 46, 61, 190, 254, 104, 131, 190, 125, 77, 186, 191, 92, 177, 32, 191, 217, 46, 52, 63, 157, 63, 0, 191, 78, 213, 23, 59, 156, 169, 32, 62, 25, 71, 224, 60, 228, 169, 142, 62, 172, 72, 236, 190, 132, 234, 11, 191, 212, 181, 18, 191, 97, 133, 161, 190, 207, 228, 51, 61, 181, 204, 30, 190, 47, 112, 148, 188, 222, 121, 5, 190, 24, 160, 18, 190, 136, 0, 184, 189, 14, 181, 212, 60, 245, 8, 190, 61, 193, 1, 95, 190, 92, 183, 160, 62, 149, 249, 234, 61, 54, 102, 96, 190, 245, 60, 187, 189, 125, 198, 76, 62, 133, 198, 125, 190, 127, 224, 17, 63, 24, 33, 232, 189, 170, 38, 104, 61, 220, 0, 20, 191, 239, 73, 134, 62, 121, 200, 163, 62, 248, 50, 161, 190, 188, 236, 230, 60, 173, 108, 142, 62, 42, 51, 161, 61, 192, 183, 31, 190, 26, 52, 93, 190, 31, 183, 129, 61, 39, 23, 75, 62, 175, 216, 170, 189, 119, 217, 99, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 24, 29, 189, 147, 231, 208, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {174, 204, 43, 62, 19, 252, 195, 62, 180, 143, 228, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {128, 127, 163, 61, 60, 208, 254, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0080/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}