// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 46, 199, 190, 250, 148, 66, 63, 154, 149, 237, 190, 81, 173, 166, 189, 145, 134, 180, 63, 222, 204, 168, 62, 243, 47, 242, 190, 44, 85, 153, 191, 19, 225, 177, 190, 211, 153, 155, 191, 194, 113, 4, 190, 23, 101, 249, 59, 93, 215, 38, 62, 103, 186, 215, 190, 73, 91, 67, 63, 19, 57, 19, 63, 99, 237, 29, 191, 233, 165, 40, 63, 168, 134, 215, 190, 52, 25, 192, 63, 72, 90, 140, 62, 139, 139, 9, 63, 182, 147, 1, 191, 17, 180, 189, 190, 82, 32, 2, 189, 202, 86, 154, 190, 115, 218, 79, 62, 61, 123, 48, 190, 68, 160, 83, 191, 175, 38, 105, 190, 161, 224, 164, 62, 132, 4, 148, 63, 18, 190, 209, 62, 44, 217, 5, 191, 252, 65, 6, 191, 248, 250, 129, 62, 55, 85, 165, 62, 186, 151, 110, 191, 110, 241, 234, 62, 193, 41, 39, 63, 153, 2, 117, 189, 150, 60, 235, 62, 153, 226, 10, 191, 236, 209, 144, 62, 52, 49, 167, 62, 48, 123, 9, 190, 48, 138, 107, 63, 140, 173, 236, 190, 164, 190, 119, 190, 177, 165, 88, 63, 118, 30, 238, 188, 242, 47, 63, 191, 244, 168, 37, 191, 56, 215, 132, 190, 219, 167, 85, 58, 39, 96, 34, 190, 147, 244, 18, 189, 32, 7, 76, 190, 169, 22, 130, 191, 152, 132, 128, 59, 163, 248, 2, 63, 165, 46, 152, 62, 94, 41, 46, 63, 208, 172, 223, 190, 226, 235, 185, 191, 93, 100, 190, 190, 207, 192, 35, 63, 101, 51, 143, 63, 58, 255, 72, 62, 53, 105, 76, 63, 5, 117, 20, 191, 161, 67, 10, 62, 139, 180, 106, 190, 141, 26, 21, 63, 199, 3, 23, 191, 157, 220, 90, 61, 124, 230, 196, 191, 16, 222, 172, 190, 142, 226, 156, 187, 95, 178, 72, 63, 163, 157, 13, 63, 192, 18, 243, 62, 219, 220, 91, 63, 216, 27, 79, 62, 49, 165, 90, 63, 209, 131, 38, 191, 94, 58, 142, 190, 50, 241, 44, 191, 103, 108, 67, 63, 205, 86, 40, 62, 57, 201, 132, 63, 185, 211, 133, 191, 19, 113, 214, 190, 246, 139, 220, 62, 151, 122, 237, 61, 85, 82, 253, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 64, 242, 188, 166, 85, 101, 190, 142, 231, 198, 62, 107, 192, 178, 188, 199, 161, 9, 191, 242, 69, 227, 190, 197, 227, 22, 190, 4, 123, 58, 191, 7, 51, 84, 186, 67, 230, 122, 61, 19, 95, 10, 191, 9, 211, 14, 63, 41, 83, 231, 62, 30, 209, 159, 62, 224, 218, 74, 191, 140, 178, 148, 190, 4, 230, 38, 62, 183, 119, 1, 63, 116, 88, 9, 191, 165, 230, 155, 190, 64, 28, 85, 191, 152, 5, 8, 189, 192, 73, 232, 62, 238, 59, 72, 189, 136, 184, 44, 63, 161, 87, 209, 62, 19, 206, 134, 190, 198, 150, 1, 190, 47, 199, 24, 191, 88, 101, 0, 63, 51, 248, 62, 62, 10, 177, 164, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 164, 230, 189, 238, 69, 161, 61, 192, 28, 230, 61, 169, 80, 87, 189, 172, 144, 187, 61, 100, 117, 225, 189, 55, 252, 194, 189, 42, 119, 42, 188, 8, 106, 160, 189, 19, 70, 71, 190, 218, 5, 155, 186, 83, 163, 25, 190, 155, 199, 149, 61, 53, 111, 9, 190, 241, 108, 147, 189, 100, 110, 225, 188, 175, 120, 170, 61, 174, 242, 48, 190, 247, 202, 42, 189, 88, 94, 136, 189, 158, 44, 241, 189, 39, 214, 29, 189, 193, 14, 190, 61, 66, 79, 96, 61, 179, 131, 164, 61, 250, 210, 235, 189, 92, 226, 181, 189, 107, 237, 2, 61, 112, 224, 11, 62, 138, 196, 89, 190, 77, 50, 200, 189, 175, 86, 226, 189, 53, 58, 187, 190, 5, 25, 207, 60, 88, 81, 77, 61, 35, 123, 25, 190, 209, 26, 187, 190, 135, 181, 66, 190, 242, 45, 132, 190, 228, 66, 128, 189, 38, 22, 81, 190, 189, 74, 129, 188, 93, 106, 47, 61, 224, 118, 37, 61, 173, 7, 15, 190, 216, 35, 138, 62, 96, 98, 36, 191, 90, 119, 49, 62, 174, 167, 31, 62, 100, 16, 93, 189, 168, 181, 3, 190, 65, 25, 25, 190, 73, 194, 113, 190, 88, 242, 140, 190, 10, 177, 178, 62, 195, 53, 92, 61, 120, 17, 3, 62, 177, 138, 49, 190, 59, 212, 44, 190, 195, 35, 163, 62, 214, 156, 201, 190, 88, 76, 92, 62, 18, 35, 19, 189, 14, 146, 28, 62, 91, 199, 91, 190, 248, 171, 9, 190, 36, 87, 56, 190, 179, 239, 52, 190, 28, 217, 79, 61, 107, 20, 53, 62, 33, 24, 241, 190, 176, 37, 179, 189, 88, 133, 210, 189, 77, 32, 18, 61, 58, 21, 167, 60, 241, 136, 201, 189, 185, 102, 80, 60, 147, 6, 48, 62, 105, 96, 230, 189, 77, 210, 152, 62, 89, 52, 128, 60, 249, 164, 161, 61, 105, 62, 244, 189, 207, 149, 227, 190, 0, 111, 196, 61, 165, 208, 135, 190, 162, 248, 91, 188, 50, 255, 68, 190, 27, 25, 56, 62, 23, 101, 160, 190, 233, 142, 22, 190, 60, 244, 184, 185, 205, 247, 73, 191, 73, 6, 253, 188, 40, 213, 22, 190, 12, 86, 201, 189, 230, 232, 151, 61, 185, 160, 10, 192, 179, 8, 55, 191, 192, 14, 70, 62, 179, 217, 183, 190, 71, 245, 58, 191, 97, 206, 9, 190, 104, 244, 19, 189, 152, 41, 31, 191, 211, 23, 97, 190, 153, 4, 180, 191, 229, 172, 230, 188, 44, 72, 4, 190, 161, 84, 115, 62, 121, 24, 139, 190, 32, 109, 46, 189, 240, 33, 35, 61, 255, 13, 5, 191, 182, 190, 43, 62, 251, 17, 84, 191, 197, 170, 13, 190, 151, 239, 141, 190, 102, 50, 1, 61, 145, 59, 237, 186, 45, 170, 241, 60, 81, 34, 237, 190, 226, 196, 126, 191, 222, 224, 11, 190, 249, 96, 15, 62, 71, 103, 54, 191, 13, 103, 112, 62, 63, 36, 216, 190, 117, 56, 96, 60, 146, 180, 6, 191, 56, 245, 73, 190, 122, 132, 184, 189, 193, 48, 128, 61, 26, 244, 76, 190, 67, 119, 135, 190, 17, 10, 20, 190, 231, 39, 102, 62, 246, 100, 122, 190, 211, 79, 147, 191, 70, 40, 137, 62, 56, 220, 196, 62, 63, 42, 251, 189, 211, 160, 106, 190, 220, 224, 249, 189, 197, 214, 227, 189, 93, 250, 154, 190, 44, 225, 229, 189, 250, 143, 128, 62, 66, 42, 183, 190, 197, 63, 69, 190, 48, 195, 86, 189, 41, 109, 91, 62, 156, 105, 2, 62, 202, 49, 132, 62, 179, 200, 201, 58, 53, 186, 51, 191, 4, 170, 200, 190, 254, 120, 26, 191, 50, 45, 114, 62, 9, 37, 223, 61, 218, 124, 165, 62, 61, 200, 243, 191, 40, 31, 155, 189, 95, 103, 51, 191, 145, 115, 61, 191, 146, 213, 24, 191, 122, 216, 20, 190, 64, 239, 157, 62, 68, 197, 204, 190, 76, 101, 121, 61, 183, 103, 179, 190, 210, 55, 215, 190, 91, 250, 171, 187, 124, 11, 72, 62, 222, 0, 133, 190, 211, 60, 137, 61, 113, 201, 129, 190, 17, 115, 109, 190, 58, 14, 30, 190, 75, 255, 144, 190, 166, 95, 158, 189, 200, 61, 135, 188, 224, 138, 62, 189, 125, 30, 11, 63, 217, 18, 116, 188, 171, 84, 96, 62, 106, 194, 27, 191, 181, 147, 160, 190, 86, 191, 157, 62, 207, 82, 187, 191, 230, 139, 213, 62, 229, 71, 106, 190, 137, 54, 6, 62, 5, 45, 69, 191, 152, 246, 180, 189, 244, 225, 92, 62, 197, 211, 196, 61, 210, 143, 34, 190, 42, 152, 208, 61, 229, 85, 162, 62, 148, 117, 199, 61, 122, 90, 23, 190, 161, 69, 111, 191, 55, 27, 138, 62, 167, 141, 230, 61, 17, 107, 74, 189, 244, 184, 13, 190, 222, 239, 24, 61, 56, 221, 88, 190, 196, 15, 140, 189, 141, 244, 19, 189, 8, 99, 54, 62, 187, 199, 170, 190, 56, 103, 103, 190, 0, 93, 3, 190, 44, 128, 50, 63, 138, 93, 148, 189, 37, 86, 230, 61, 62, 108, 176, 189, 24, 194, 239, 190, 231, 120, 106, 62, 25, 139, 212, 190, 204, 74, 219, 62, 173, 68, 162, 60, 139, 36, 91, 190, 8, 223, 2, 191, 150, 66, 44, 61, 111, 169, 28, 190, 191, 59, 245, 61, 87, 165, 9, 62, 83, 245, 113, 190, 230, 133, 26, 190, 137, 113, 134, 189, 172, 109, 177, 60, 206, 143, 75, 191, 99, 184, 181, 189, 226, 214, 255, 59, 185, 45, 51, 62, 24, 255, 22, 62, 48, 216, 135, 61, 191, 24, 160, 61, 163, 13, 150, 189, 159, 69, 13, 62, 131, 208, 32, 62, 144, 188, 98, 62, 255, 2, 63, 190, 70, 97, 199, 61, 178, 137, 218, 62, 154, 99, 161, 62, 165, 216, 109, 190, 82, 190, 210, 189, 66, 151, 81, 190, 106, 177, 130, 190, 235, 232, 151, 190, 193, 195, 111, 62, 53, 10, 143, 61, 158, 22, 2, 190, 71, 243, 217, 61, 10, 130, 42, 190, 139, 43, 36, 62, 73, 198, 33, 61, 62, 38, 237, 189, 241, 75, 6, 190, 9, 231, 239, 189, 112, 70, 100, 190, 152, 74, 53, 190, 210, 223, 95, 60, 100, 106, 17, 189, 154, 1, 79, 190, 158, 206, 253, 187, 180, 252, 133, 61, 16, 244, 152, 61, 167, 252, 16, 62, 92, 20, 238, 189, 229, 90, 49, 190, 104, 30, 27, 190, 16, 107, 182, 188, 50, 254, 80, 189, 27, 216, 213, 188, 193, 73, 111, 190, 101, 90, 1, 189, 124, 242, 17, 62, 247, 63, 48, 188, 182, 92, 48, 189, 53, 99, 1, 62, 176, 44, 9, 190, 231, 178, 64, 190, 121, 223, 197, 61, 188, 50, 207, 190, 118, 214, 5, 192, 115, 3, 128, 61, 243, 192, 162, 62, 194, 158, 231, 190, 219, 246, 169, 190, 63, 193, 227, 190, 121, 253, 6, 190, 151, 173, 146, 190, 153, 151, 80, 190, 16, 53, 207, 189, 141, 51, 173, 61, 2, 91, 62, 61, 93, 141, 50, 191, 225, 123, 178, 190, 58, 47, 229, 61, 0, 228, 222, 61, 236, 108, 61, 62, 28, 107, 41, 190, 201, 244, 13, 190, 254, 163, 21, 190, 155, 95, 190, 188, 172, 167, 161, 60, 218, 59, 82, 191, 214, 138, 129, 62, 6, 226, 197, 61, 163, 225, 1, 191, 97, 169, 249, 62, 241, 107, 59, 191, 74, 183, 92, 188, 154, 75, 106, 190, 60, 140, 21, 191, 181, 168, 140, 189, 102, 12, 227, 60, 210, 182, 38, 190, 127, 89, 19, 190, 135, 14, 32, 190, 85, 210, 252, 189, 42, 123, 15, 190, 190, 246, 81, 61, 222, 26, 145, 189, 151, 247, 44, 189, 0, 8, 25, 190, 8, 72, 147, 189, 229, 39, 3, 62, 241, 97, 234, 189, 56, 163, 15, 190, 229, 184, 43, 189, 63, 201, 18, 60, 233, 102, 27, 189, 126, 126, 29, 62, 22, 5, 11, 62, 196, 6, 181, 189, 113, 150, 247, 60, 236, 164, 197, 189, 12, 32, 2, 62, 245, 214, 117, 189, 152, 180, 113, 189, 62, 232, 134, 189, 103, 144, 21, 190, 71, 194, 177, 189, 194, 132, 202, 188, 71, 178, 141, 189, 53, 30, 240, 185, 248, 158, 193, 187, 164, 122, 45, 62, 0, 100, 182, 62, 89, 184, 4, 191, 184, 177, 29, 62, 113, 119, 150, 189, 3, 242, 163, 189, 51, 180, 224, 62, 79, 210, 108, 62, 155, 135, 115, 62, 138, 88, 149, 61, 156, 193, 10, 61, 63, 20, 7, 62, 40, 93, 10, 60, 35, 140, 172, 62, 172, 131, 107, 188, 180, 172, 75, 191, 229, 196, 61, 62, 180, 180, 50, 61, 183, 45, 118, 61, 209, 203, 10, 190, 26, 129, 120, 59, 161, 113, 101, 190, 74, 201, 54, 190, 216, 73, 173, 190, 9, 170, 199, 62, 219, 145, 24, 61, 66, 218, 192, 188, 193, 192, 20, 63, 121, 33, 173, 190, 105, 107, 137, 62, 246, 23, 239, 61, 83, 79, 89, 190, 164, 61, 51, 60, 254, 78, 30, 61, 23, 203, 55, 62, 159, 42, 152, 61, 11, 8, 48, 62, 72, 72, 118, 62, 69, 92, 190, 61, 218, 56, 99, 189, 31, 190, 86, 62, 120, 245, 28, 190, 109, 255, 201, 61, 133, 15, 161, 187, 97, 217, 231, 189, 136, 200, 28, 62, 241, 250, 1, 190, 86, 103, 20, 61, 133, 16, 94, 189, 98, 88, 136, 61, 145, 199, 189, 61, 245, 245, 68, 60, 196, 192, 76, 61, 85, 41, 77, 61, 192, 91, 115, 190, 124, 17, 150, 62, 186, 114, 51, 189, 108, 58, 21, 187, 30, 73, 152, 190, 148, 230, 189, 190, 165, 12, 22, 62, 106, 33, 13, 62, 215, 145, 90, 61, 49, 31, 210, 62, 187, 2, 158, 61, 126, 4, 128, 190, 109, 121, 129, 191, 85, 207, 4, 62, 216, 8, 145, 61, 38, 18, 176, 190, 88, 186, 239, 189, 145, 156, 67, 188, 100, 66, 250, 189, 187, 231, 23, 62, 37, 159, 143, 190, 142, 136, 193, 189, 141, 101, 50, 62, 243, 50, 131, 62, 144, 105, 100, 61, 192, 222, 75, 190, 245, 153, 197, 189, 115, 75, 183, 61, 111, 176, 171, 190, 148, 84, 128, 61, 165, 47, 80, 190, 26, 2, 185, 62, 103, 150, 81, 58, 160, 141, 154, 61, 103, 9, 31, 191, 111, 139, 62, 62, 83, 109, 239, 62, 114, 167, 29, 191, 149, 90, 115, 190, 252, 47, 20, 62, 178, 194, 192, 61, 182, 23, 184, 61, 148, 227, 62, 188, 118, 75, 66, 62, 250, 116, 198, 62, 36, 79, 228, 187, 176, 71, 110, 190, 215, 86, 163, 61, 101, 203, 3, 187, 108, 191, 19, 62, 4, 19, 255, 189, 193, 183, 5, 191, 236, 6, 111, 62, 206, 45, 1, 61, 13, 200, 182, 60, 191, 78, 194, 189, 97, 45, 230, 61, 189, 158, 102, 188, 95, 246, 170, 61, 31, 252, 233, 60, 55, 1, 17, 62, 64, 99, 242, 189, 222, 241, 227, 187, 155, 129, 16, 190, 42, 102, 255, 61, 148, 20, 67, 62, 97, 166, 133, 62, 182, 50, 230, 61, 73, 51, 12, 191, 51, 244, 234, 186, 64, 26, 39, 62, 201, 143, 145, 61, 29, 149, 7, 62, 64, 169, 142, 190, 200, 103, 143, 61, 22, 220, 104, 61, 240, 192, 65, 190, 125, 180, 17, 62, 57, 243, 162, 61, 69, 16, 78, 61, 71, 74, 22, 189, 208, 120, 65, 189, 243, 117, 146, 61, 7, 172, 10, 189, 95, 101, 162, 188, 13, 83, 180, 59, 115, 130, 206, 189, 252, 58, 233, 188, 247, 229, 167, 61, 173, 13, 181, 62, 191, 134, 134, 60, 144, 207, 214, 60, 178, 231, 78, 190, 122, 41, 5, 190, 40, 179, 203, 188, 46, 185, 201, 61, 199, 17, 142, 190, 119, 53, 77, 62, 202, 21, 211, 189, 187, 61, 17, 62, 71, 129, 105, 189, 210, 200, 28, 191, 147, 120, 111, 62, 166, 102, 129, 186, 67, 72, 197, 61, 60, 220, 16, 190, 23, 22, 6, 192, 186, 204, 16, 58, 169, 159, 85, 62, 182, 135, 203, 190, 19, 138, 68, 62, 67, 201, 174, 189, 17, 232, 159, 59, 109, 96, 74, 62, 53, 20, 59, 191, 154, 145, 171, 190, 77, 82, 237, 61, 47, 18, 141, 61, 74, 58, 72, 62, 129, 249, 24, 191, 215, 50, 71, 62, 52, 169, 143, 62, 55, 13, 79, 61, 105, 12, 191, 61, 187, 43, 182, 190, 171, 168, 41, 190, 218, 43, 162, 190, 3, 164, 149, 191, 254, 242, 122, 62, 119, 175, 139, 58, 143, 76, 12, 190, 17, 140, 22, 191, 193, 249, 98, 190, 70, 67, 156, 189, 114, 108, 151, 62, 164, 29, 40, 190, 83, 164, 54, 191, 165, 211, 192, 189, 19, 45, 131, 61, 15, 126, 139, 189, 169, 143, 98, 61, 73, 155, 25, 62, 150, 81, 0, 189, 109, 23, 175, 189, 77, 74, 97, 189, 4, 184, 235, 61, 69, 166, 21, 62, 125, 16, 153, 61, 180, 208, 58, 189, 245, 183, 76, 189, 49, 209, 219, 60, 163, 222, 24, 190, 216, 213, 215, 61, 59, 30, 38, 189, 174, 15, 191, 60, 203, 78, 210, 189, 188, 88, 23, 62, 180, 94, 144, 186, 69, 100, 2, 190, 88, 207, 145, 189, 199, 246, 46, 190, 203, 130, 13, 190, 134, 213, 13, 190, 156, 156, 14, 190, 245, 233, 51, 190, 53, 221, 131, 189, 3, 229, 160, 61, 139, 190, 8, 190, 204, 235, 32, 189, 136, 14, 51, 63, 99, 33, 2, 191, 160, 252, 4, 190, 224, 149, 209, 62, 188, 115, 131, 190, 237, 102, 8, 190, 84, 114, 61, 190, 115, 144, 224, 188, 201, 212, 117, 190, 186, 226, 154, 191, 206, 201, 181, 190, 238, 195, 81, 190, 149, 182, 118, 190, 165, 200, 10, 191, 160, 176, 160, 61, 255, 224, 44, 191, 14, 135, 218, 60, 152, 135, 6, 61, 21, 162, 135, 61, 238, 225, 237, 187, 201, 1, 29, 189, 115, 161, 4, 192, 121, 250, 62, 191, 66, 94, 202, 190, 154, 20, 73, 190, 37, 228, 210, 191, 192, 156, 148, 190, 21, 244, 243, 190, 85, 44, 3, 190, 73, 21, 82, 62, 162, 118, 190, 190, 35, 53, 239, 190, 105, 98, 139, 62, 233, 190, 82, 189, 197, 213, 156, 190, 15, 44, 15, 62, 162, 127, 69, 62, 55, 81, 195, 190, 125, 19, 252, 187, 63, 189, 129, 61, 129, 14, 220, 62, 71, 128, 63, 190, 2, 159, 66, 191, 94, 88, 255, 62, 97, 43, 191, 62, 3, 56, 128, 189, 177, 242, 109, 62, 213, 209, 151, 190, 149, 76, 211, 190, 30, 195, 138, 190, 107, 129, 130, 189, 116, 228, 142, 62, 209, 4, 18, 191, 51, 5, 177, 190, 102, 18, 221, 189, 203, 209, 131, 62, 230, 50, 12, 59, 250, 239, 232, 61, 7, 237, 51, 60, 255, 6, 96, 191, 235, 196, 179, 189, 21, 226, 143, 190, 171, 19, 167, 62, 170, 240, 136, 189, 108, 220, 65, 190, 241, 147, 140, 191, 10, 123, 153, 61, 156, 12, 23, 62, 245, 72, 217, 190, 124, 229, 82, 62, 249, 206, 165, 191, 219, 142, 142, 190, 92, 89, 205, 189, 117, 119, 222, 188, 97, 118, 171, 62, 45, 25, 96, 189, 30, 68, 67, 190, 105, 152, 192, 62, 18, 235, 12, 191, 154, 136, 34, 62, 145, 150, 59, 61, 166, 196, 10, 61, 78, 60, 130, 60, 238, 209, 206, 59, 187, 157, 154, 61, 39, 135, 52, 190, 242, 237, 183, 62, 116, 181, 13, 190, 43, 231, 73, 62, 66, 215, 202, 188, 77, 67, 244, 189, 12, 104, 190, 62, 79, 173, 86, 191, 213, 93, 246, 61, 104, 190, 135, 190, 235, 168, 220, 61, 142, 105, 140, 190, 169, 210, 37, 61, 198, 33, 202, 60, 149, 69, 111, 190, 117, 102, 59, 62, 175, 131, 179, 61, 19, 232, 107, 188, 10, 151, 254, 57, 142, 119, 223, 188, 51, 12, 0, 189, 104, 4, 211, 189, 76, 43, 209, 62, 230, 37, 241, 188, 247, 105, 239, 189, 43, 162, 174, 61, 230, 50, 66, 62, 168, 161, 53, 61, 127, 66, 249, 61, 160, 94, 48, 60, 103, 191, 86, 188, 244, 18, 160, 189, 191, 118, 175, 61, 62, 18, 123, 61, 166, 243, 110, 190, 107, 69, 180, 187, 162, 74, 172, 189, 42, 159, 202, 187, 174, 197, 229, 60, 178, 60, 97, 190, 152, 146, 0, 62, 55, 233, 97, 62, 119, 185, 4, 190, 233, 76, 37, 62, 250, 167, 55, 190, 239, 88, 254, 190, 111, 20, 135, 191, 115, 225, 66, 189, 254, 255, 163, 59, 14, 91, 7, 191, 154, 221, 43, 190, 14, 254, 108, 188, 2, 223, 56, 190, 143, 31, 162, 190, 47, 136, 64, 190, 219, 126, 116, 62, 204, 45, 179, 62, 31, 86, 156, 189, 49, 98, 169, 61, 114, 83, 0, 63, 148, 76, 249, 189, 152, 175, 139, 61, 218, 76, 74, 190, 68, 131, 78, 190, 251, 91, 15, 190, 16, 115, 19, 63, 193, 63, 203, 61, 232, 65, 86, 62, 164, 177, 63, 191, 60, 115, 19, 190, 130, 89, 168, 62, 219, 165, 200, 191, 95, 202, 9, 62, 175, 123, 32, 61, 29, 82, 134, 61, 218, 202, 16, 63, 245, 157, 19, 62, 212, 84, 16, 191, 25, 218, 72, 62, 118, 219, 36, 188, 217, 94, 73, 189, 193, 133, 89, 62, 94, 145, 60, 62, 18, 81, 152, 62, 235, 8, 24, 191, 94, 140, 18, 190, 47, 11, 11, 62, 251, 166, 43, 187, 70, 191, 21, 189, 46, 49, 16, 190, 4, 155, 18, 191, 94, 214, 234, 61, 83, 133, 110, 191, 135, 69, 200, 61, 53, 26, 83, 61, 157, 141, 158, 190, 135, 58, 62, 191, 73, 128, 5, 190, 208, 114, 159, 62, 1, 132, 245, 189, 231, 121, 247, 61, 238, 101, 57, 62, 16, 9, 181, 190, 238, 163, 72, 62, 215, 185, 220, 188, 45, 179, 172, 62, 220, 182, 139, 189, 215, 33, 78, 63, 202, 71, 148, 62, 16, 105, 224, 190, 7, 10, 172, 62, 247, 202, 226, 61, 217, 36, 215, 190, 53, 70, 184, 61, 113, 235, 89, 62, 63, 124, 217, 61, 41, 115, 210, 191, 37, 218, 164, 190, 21, 240, 163, 62, 0, 189, 143, 62, 222, 199, 73, 190, 182, 76, 177, 62, 149, 146, 30, 191, 100, 44, 18, 63, 223, 52, 52, 191, 174, 187, 1, 190, 231, 170, 19, 63, 78, 0, 153, 190, 198, 141, 204, 191, 227, 199, 13, 189, 47, 188, 10, 190, 221, 150, 149, 190, 50, 71, 128, 191, 55, 90, 168, 61, 45, 93, 21, 191, 160, 166, 66, 190, 236, 138, 175, 62, 15, 32, 137, 62, 66, 201, 236, 189, 249, 232, 193, 61, 14, 185, 80, 188, 82, 13, 17, 62, 248, 237, 157, 189, 8, 142, 145, 61, 182, 241, 30, 190, 188, 251, 216, 61, 217, 36, 41, 190, 247, 52, 149, 189, 181, 108, 240, 189, 65, 88, 1, 62, 171, 25, 17, 190, 115, 251, 243, 187, 90, 168, 140, 60, 4, 67, 161, 61, 64, 250, 82, 61, 243, 219, 29, 190, 165, 152, 239, 189, 239, 55, 22, 190, 121, 107, 7, 62, 109, 97, 8, 190, 148, 165, 162, 189, 22, 215, 212, 189, 169, 131, 3, 190, 177, 136, 229, 189, 223, 255, 85, 61, 116, 168, 3, 190, 152, 46, 132, 59, 7, 149, 173, 189, 213, 151, 46, 189, 72, 141, 212, 189, 93, 8, 238, 61, 97, 249, 51, 190, 249, 9, 18, 61, 48, 63, 29, 189, 116, 45, 41, 190, 197, 122, 177, 189, 128, 182, 21, 62, 136, 89, 96, 61, 237, 92, 182, 189, 76, 47, 129, 60, 198, 120, 162, 61, 26, 1, 41, 62, 122, 228, 199, 189, 92, 234, 33, 190, 231, 33, 140, 189, 61, 55, 141, 189, 71, 6, 45, 61, 232, 132, 6, 190, 87, 248, 144, 61, 146, 247, 136, 61, 12, 200, 162, 61, 255, 108, 185, 189, 228, 199, 111, 188, 113, 126, 32, 190, 43, 108, 123, 189, 24, 10, 92, 188, 44, 196, 93, 189, 237, 138, 168, 189, 72, 192, 84, 189, 152, 229, 76, 189, 79, 222, 54, 190, 136, 219, 17, 61, 17, 184, 192, 189, 105, 204, 143, 190, 199, 230, 33, 62, 22, 179, 201, 60, 66, 118, 169, 62, 222, 181, 5, 191, 21, 85, 62, 191, 57, 55, 247, 61, 32, 7, 221, 61, 18, 117, 8, 191, 232, 243, 129, 190, 78, 158, 140, 62, 225, 13, 39, 190, 83, 35, 65, 189, 211, 134, 124, 190, 112, 65, 226, 190, 200, 236, 79, 190, 45, 171, 26, 62, 172, 123, 214, 60, 181, 67, 6, 190, 159, 125, 187, 61, 96, 200, 159, 190, 14, 124, 255, 61, 213, 242, 178, 61, 218, 76, 167, 60, 191, 94, 7, 62, 24, 195, 77, 62, 146, 175, 23, 190, 227, 45, 208, 189, 80, 125, 85, 62, 152, 227, 135, 62, 239, 68, 117, 189, 105, 243, 155, 189, 72, 136, 202, 190, 177, 16, 24, 192, 249, 139, 22, 62, 106, 237, 103, 62, 167, 106, 166, 190, 18, 51, 100, 190, 152, 134, 18, 191, 2, 129, 177, 189, 224, 198, 202, 189, 248, 95, 12, 61, 176, 232, 35, 190, 7, 6, 68, 189, 175, 196, 145, 61, 233, 74, 248, 190, 34, 34, 209, 190, 72, 193, 150, 61, 141, 19, 68, 62, 69, 151, 253, 188, 150, 182, 206, 189, 9, 220, 28, 190, 9, 206, 157, 190, 38, 80, 125, 190, 181, 99, 58, 61, 204, 224, 30, 191, 73, 135, 165, 62, 20, 69, 19, 62, 60, 98, 133, 190, 96, 177, 95, 62, 173, 205, 182, 191, 44, 0, 34, 62, 252, 111, 229, 189, 197, 55, 225, 190, 22, 251, 177, 190, 80, 101, 185, 60, 134, 140, 16, 191, 53, 81, 2, 191, 41, 134, 67, 189, 173, 4, 123, 62, 120, 27, 33, 190, 104, 228, 26, 190, 237, 135, 204, 188, 96, 201, 91, 189, 147, 39, 70, 62, 207, 189, 10, 61, 146, 154, 89, 188, 183, 234, 147, 189, 185, 177, 236, 60, 134, 223, 93, 62, 156, 155, 125, 190, 237, 113, 150, 190, 0, 180, 125, 61, 110, 31, 166, 189, 86, 90, 160, 61, 52, 243, 34, 190, 125, 98, 30, 62, 247, 224, 59, 190, 202, 69, 231, 188, 166, 218, 98, 190, 121, 100, 197, 189, 143, 7, 244, 61, 59, 48, 189, 190, 149, 173, 90, 190, 80, 59, 158, 61, 168, 169, 255, 61, 206, 191, 30, 191, 240, 151, 195, 191, 186, 89, 53, 62, 141, 145, 237, 61, 153, 77, 212, 190, 11, 170, 137, 190, 179, 44, 126, 190, 193, 196, 117, 62, 236, 199, 144, 62, 73, 155, 212, 190, 32, 58, 84, 190, 230, 240, 124, 62, 98, 209, 76, 62, 231, 104, 213, 188, 62, 104, 18, 191, 186, 9, 196, 189, 237, 203, 10, 189, 224, 159, 224, 189, 224, 162, 41, 60, 164, 71, 130, 61, 202, 24, 143, 189, 96, 170, 45, 190, 15, 74, 48, 61, 97, 250, 215, 62, 75, 90, 126, 190, 126, 68, 205, 189, 93, 144, 221, 190, 125, 134, 88, 190, 135, 152, 223, 62, 136, 134, 200, 61, 113, 241, 202, 59, 111, 85, 176, 190, 208, 23, 11, 189, 154, 163, 147, 61, 91, 192, 186, 61, 191, 103, 46, 190, 57, 212, 144, 188, 172, 209, 234, 189, 235, 57, 139, 189, 182, 180, 130, 60, 61, 172, 174, 189, 22, 45, 235, 187, 152, 194, 156, 189, 222, 170, 124, 189, 72, 30, 108, 188, 177, 173, 188, 60, 205, 150, 225, 189, 232, 138, 48, 190, 92, 231, 73, 190, 209, 7, 154, 188, 66, 84, 247, 189, 220, 238, 154, 188, 15, 138, 120, 60, 251, 34, 22, 189, 218, 111, 142, 189, 35, 196, 22, 62, 100, 121, 19, 61, 120, 60, 52, 190, 101, 46, 32, 61, 111, 173, 21, 61, 149, 200, 169, 62, 242, 190, 229, 61, 245, 73, 61, 60, 189, 61, 10, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 112, 0, 190, 39, 148, 161, 62, 68, 50, 21, 62, 226, 83, 73, 62, 146, 22, 179, 62, 113, 243, 37, 187, 142, 103, 117, 187, 105, 71, 161, 61, 141, 132, 137, 189, 127, 110, 76, 61, 69, 241, 148, 189, 62, 240, 69, 190, 45, 119, 205, 62, 99, 187, 106, 190, 242, 89, 149, 62, 167, 146, 182, 62, 46, 96, 129, 190, 96, 5, 31, 190, 12, 94, 174, 59, 226, 214, 164, 62, 108, 97, 168, 62, 112, 47, 32, 62, 66, 97, 40, 62, 44, 78, 142, 62, 155, 32, 121, 62, 18, 150, 32, 189, 12, 110, 32, 61, 44, 217, 93, 190, 238, 248, 168, 62, 222, 138, 237, 189, 60, 68, 15, 188, 152, 83, 127, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 235, 112, 61, 26, 213, 174, 190, 7, 126, 218, 189, 54, 133, 190, 62, 241, 47, 33, 63, 197, 50, 41, 63, 66, 178, 12, 63, 131, 34, 68, 189, 226, 228, 81, 61, 248, 149, 88, 191, 35, 90, 172, 187, 142, 94, 168, 190, 91, 103, 141, 60, 179, 113, 4, 191, 72, 66, 45, 62, 159, 81, 8, 188, 239, 139, 106, 191, 124, 179, 192, 189, 79, 123, 169, 63, 154, 101, 61, 63, 36, 224, 52, 191, 117, 27, 121, 187, 116, 158, 81, 191, 153, 152, 146, 62, 132, 190, 147, 63, 6, 199, 50, 62, 91, 176, 9, 62, 114, 80, 130, 190, 142, 156, 187, 191, 136, 153, 172, 189, 161, 190, 85, 191, 54, 190, 6, 190, 212, 197, 200, 61, 252, 61, 161, 187, 172, 237, 209, 60, 119, 65, 83, 191, 20, 198, 99, 190, 223, 134, 151, 189, 2, 23, 64, 62, 55, 197, 240, 190, 135, 239, 244, 60, 153, 43, 115, 62, 55, 135, 23, 62, 254, 23, 1, 62, 103, 216, 131, 190, 126, 18, 82, 62, 28, 25, 145, 189, 2, 126, 76, 190, 62, 229, 41, 62, 87, 159, 135, 61, 205, 231, 61, 62, 219, 78, 21, 62, 230, 161, 223, 189, 221, 93, 92, 190, 194, 211, 211, 189, 58, 82, 121, 190, 50, 232, 182, 62, 142, 232, 56, 55, 68, 0, 52, 190, 229, 63, 228, 61, 124, 120, 144, 61, 89, 237, 20, 189, 105, 161, 64, 62, 181, 210, 147, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 185, 137, 62, 220, 52, 90, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {41, 230, 95, 190, 102, 69, 187, 191, 111, 25, 138, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {114, 32, 220, 63, 64, 196, 150, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0028/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}