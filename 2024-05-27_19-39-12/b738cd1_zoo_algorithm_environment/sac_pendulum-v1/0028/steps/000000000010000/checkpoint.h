// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 173, 175, 190, 208, 220, 78, 63, 23, 136, 232, 190, 144, 124, 119, 188, 142, 252, 168, 63, 220, 123, 153, 62, 26, 91, 238, 190, 67, 64, 151, 191, 10, 74, 176, 190, 151, 108, 141, 191, 152, 219, 107, 190, 37, 249, 208, 60, 76, 192, 123, 62, 93, 45, 195, 190, 254, 166, 72, 63, 15, 102, 209, 62, 34, 151, 27, 191, 190, 16, 45, 63, 181, 152, 174, 190, 87, 124, 160, 63, 39, 208, 141, 62, 136, 18, 15, 63, 39, 58, 213, 190, 205, 247, 203, 190, 162, 58, 207, 60, 37, 65, 158, 190, 55, 247, 86, 62, 103, 207, 139, 189, 153, 245, 69, 191, 185, 32, 103, 190, 137, 208, 181, 62, 159, 194, 152, 63, 198, 231, 187, 62, 114, 230, 253, 190, 37, 213, 3, 191, 129, 164, 130, 62, 210, 8, 171, 62, 131, 239, 102, 191, 221, 178, 237, 62, 233, 175, 39, 63, 90, 136, 204, 189, 112, 96, 252, 62, 83, 151, 222, 190, 163, 93, 109, 62, 171, 57, 193, 62, 155, 89, 0, 190, 66, 178, 93, 63, 31, 135, 5, 191, 225, 3, 130, 190, 70, 34, 59, 63, 142, 49, 194, 188, 56, 243, 55, 191, 65, 90, 47, 191, 58, 63, 116, 190, 219, 167, 85, 58, 39, 96, 34, 190, 147, 244, 18, 189, 176, 122, 243, 189, 231, 98, 126, 191, 101, 156, 196, 60, 152, 79, 240, 62, 199, 102, 118, 62, 123, 89, 49, 63, 32, 37, 229, 190, 134, 182, 180, 191, 77, 176, 184, 190, 234, 202, 38, 63, 1, 181, 127, 63, 39, 241, 150, 62, 35, 119, 73, 63, 163, 7, 33, 191, 238, 132, 17, 62, 75, 181, 75, 190, 62, 243, 16, 63, 139, 91, 24, 191, 143, 11, 66, 61, 249, 36, 186, 191, 40, 92, 173, 190, 34, 118, 166, 61, 87, 113, 76, 63, 205, 117, 28, 63, 6, 234, 245, 62, 68, 47, 85, 63, 105, 160, 70, 62, 188, 11, 85, 63, 209, 55, 25, 191, 193, 158, 133, 190, 143, 185, 33, 191, 197, 204, 45, 63, 238, 125, 35, 62, 89, 44, 133, 63, 212, 72, 129, 191, 149, 54, 210, 190, 159, 160, 207, 62, 238, 18, 136, 61, 182, 204, 3, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 95, 41, 188, 226, 81, 71, 190, 179, 50, 186, 62, 18, 15, 152, 189, 114, 43, 22, 191, 112, 216, 1, 191, 21, 174, 36, 190, 137, 176, 39, 191, 57, 181, 53, 188, 106, 37, 219, 61, 108, 29, 245, 190, 213, 146, 13, 63, 2, 117, 221, 62, 250, 120, 159, 62, 181, 75, 67, 191, 46, 191, 153, 190, 202, 143, 25, 62, 178, 53, 236, 62, 116, 88, 9, 191, 20, 25, 162, 190, 76, 185, 70, 191, 189, 135, 222, 189, 206, 220, 226, 62, 228, 242, 162, 189, 114, 117, 46, 63, 217, 242, 187, 62, 70, 188, 60, 190, 61, 139, 215, 189, 140, 70, 26, 191, 77, 20, 255, 62, 219, 172, 71, 62, 227, 128, 199, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 164, 230, 189, 238, 69, 161, 61, 192, 28, 230, 61, 169, 80, 87, 189, 172, 144, 187, 61, 100, 117, 225, 189, 55, 252, 194, 189, 42, 119, 42, 188, 8, 106, 160, 189, 19, 70, 71, 190, 218, 5, 155, 186, 83, 163, 25, 190, 155, 199, 149, 61, 53, 111, 9, 190, 241, 108, 147, 189, 100, 110, 225, 188, 175, 120, 170, 61, 174, 242, 48, 190, 247, 202, 42, 189, 88, 94, 136, 189, 158, 44, 241, 189, 39, 214, 29, 189, 193, 14, 190, 61, 66, 79, 96, 61, 179, 131, 164, 61, 250, 210, 235, 189, 92, 226, 181, 189, 107, 237, 2, 61, 112, 224, 11, 62, 138, 196, 89, 190, 77, 50, 200, 189, 175, 86, 226, 189, 67, 77, 199, 190, 213, 48, 240, 188, 180, 103, 189, 61, 227, 10, 174, 189, 157, 203, 154, 190, 217, 244, 10, 190, 181, 90, 51, 190, 167, 250, 204, 188, 236, 149, 23, 190, 217, 135, 71, 61, 186, 165, 93, 189, 179, 31, 238, 61, 95, 181, 4, 190, 48, 208, 134, 62, 87, 127, 19, 191, 115, 93, 43, 62, 72, 86, 221, 61, 62, 117, 6, 189, 168, 181, 3, 190, 151, 151, 236, 189, 83, 182, 64, 190, 135, 114, 81, 190, 102, 125, 167, 62, 166, 243, 62, 61, 25, 234, 250, 61, 21, 212, 104, 189, 213, 0, 76, 190, 22, 244, 145, 62, 176, 196, 141, 190, 214, 113, 55, 62, 24, 89, 14, 189, 47, 12, 25, 62, 13, 41, 107, 190, 131, 194, 12, 190, 150, 194, 35, 190, 57, 32, 71, 189, 154, 153, 133, 61, 240, 248, 69, 62, 90, 173, 74, 190, 7, 63, 230, 189, 175, 69, 172, 189, 6, 69, 99, 61, 75, 244, 2, 190, 180, 139, 115, 189, 193, 156, 63, 61, 61, 6, 65, 62, 238, 251, 2, 190, 138, 38, 149, 62, 124, 64, 124, 186, 72, 40, 170, 61, 105, 62, 244, 189, 185, 104, 222, 190, 131, 221, 196, 61, 201, 117, 103, 190, 184, 122, 61, 188, 153, 157, 45, 190, 18, 40, 64, 62, 193, 89, 160, 189, 165, 79, 47, 190, 137, 50, 18, 189, 247, 140, 19, 191, 68, 31, 74, 59, 150, 214, 212, 189, 136, 139, 188, 189, 139, 97, 69, 60, 122, 253, 170, 191, 72, 72, 24, 191, 192, 14, 70, 62, 59, 220, 171, 190, 229, 47, 20, 191, 121, 224, 214, 60, 41, 193, 159, 189, 233, 158, 31, 191, 11, 153, 46, 190, 69, 123, 177, 191, 74, 254, 26, 189, 49, 132, 8, 61, 69, 228, 168, 62, 121, 24, 139, 190, 219, 4, 252, 189, 222, 184, 254, 189, 126, 57, 205, 190, 182, 190, 43, 62, 248, 179, 83, 191, 80, 225, 59, 190, 12, 197, 132, 190, 91, 96, 76, 61, 102, 164, 221, 61, 249, 27, 40, 189, 62, 63, 176, 190, 79, 167, 124, 191, 57, 103, 9, 190, 105, 175, 45, 62, 103, 207, 6, 190, 124, 252, 136, 62, 149, 187, 142, 190, 203, 218, 126, 60, 75, 50, 246, 188, 90, 130, 13, 190, 153, 49, 90, 189, 218, 219, 48, 61, 190, 96, 107, 190, 207, 136, 128, 190, 212, 83, 14, 190, 59, 124, 70, 62, 4, 119, 58, 190, 80, 45, 89, 191, 59, 111, 104, 62, 99, 142, 185, 62, 205, 122, 9, 190, 105, 193, 86, 190, 50, 161, 16, 190, 220, 80, 164, 189, 108, 127, 112, 190, 44, 225, 229, 189, 186, 76, 95, 62, 19, 47, 185, 190, 231, 74, 227, 189, 186, 207, 91, 189, 135, 10, 85, 62, 71, 89, 241, 61, 111, 28, 88, 62, 234, 249, 199, 60, 64, 77, 46, 191, 185, 210, 211, 190, 164, 39, 8, 191, 97, 87, 101, 62, 96, 121, 205, 61, 156, 222, 152, 62, 58, 104, 152, 191, 142, 239, 1, 190, 29, 6, 31, 191, 174, 0, 29, 191, 164, 22, 1, 191, 198, 165, 140, 190, 15, 250, 136, 62, 127, 131, 159, 190, 7, 81, 60, 60, 142, 145, 172, 190, 207, 52, 239, 190, 104, 118, 19, 60, 90, 253, 74, 62, 222, 0, 133, 190, 242, 88, 248, 60, 77, 197, 135, 190, 111, 108, 143, 190, 58, 14, 30, 190, 225, 251, 210, 190, 138, 51, 171, 60, 69, 23, 146, 189, 218, 45, 77, 189, 115, 254, 14, 63, 210, 92, 85, 189, 151, 0, 68, 62, 61, 154, 11, 191, 244, 249, 168, 190, 216, 119, 142, 62, 27, 219, 161, 191, 185, 236, 205, 62, 162, 62, 99, 190, 89, 134, 12, 62, 137, 255, 182, 190, 235, 63, 218, 189, 180, 214, 56, 62, 214, 145, 231, 61, 93, 120, 23, 190, 72, 204, 149, 61, 240, 1, 150, 62, 94, 4, 214, 61, 65, 11, 31, 190, 249, 13, 42, 191, 66, 181, 128, 62, 165, 73, 187, 61, 96, 203, 144, 189, 230, 224, 143, 189, 167, 252, 2, 61, 8, 85, 48, 190, 143, 204, 161, 189, 141, 244, 19, 189, 126, 185, 12, 62, 182, 85, 152, 190, 228, 101, 115, 190, 58, 50, 15, 190, 252, 5, 47, 63, 245, 68, 168, 189, 140, 156, 68, 61, 18, 184, 8, 189, 137, 24, 241, 190, 195, 213, 64, 62, 136, 16, 154, 190, 113, 205, 206, 62, 169, 185, 87, 60, 22, 117, 105, 190, 61, 227, 189, 190, 126, 181, 101, 61, 105, 242, 229, 188, 248, 93, 209, 61, 28, 192, 206, 61, 11, 254, 17, 189, 241, 38, 70, 190, 14, 117, 245, 189, 136, 210, 154, 60, 39, 113, 52, 191, 122, 51, 30, 190, 55, 123, 46, 60, 0, 235, 62, 62, 137, 4, 131, 61, 31, 57, 57, 61, 56, 105, 82, 188, 72, 153, 82, 189, 159, 69, 13, 62, 16, 119, 46, 61, 70, 69, 99, 62, 172, 61, 88, 190, 109, 66, 218, 61, 242, 53, 225, 62, 211, 227, 150, 62, 191, 81, 85, 190, 35, 11, 221, 189, 240, 78, 58, 190, 116, 161, 62, 190, 19, 31, 108, 190, 228, 80, 81, 62, 114, 245, 182, 61, 158, 22, 2, 190, 71, 243, 217, 61, 10, 130, 42, 190, 139, 43, 36, 62, 73, 198, 33, 61, 62, 38, 237, 189, 241, 75, 6, 190, 9, 231, 239, 189, 112, 70, 100, 190, 152, 74, 53, 190, 210, 223, 95, 60, 100, 106, 17, 189, 154, 1, 79, 190, 158, 206, 253, 187, 180, 252, 133, 61, 16, 244, 152, 61, 167, 252, 16, 62, 92, 20, 238, 189, 229, 90, 49, 190, 104, 30, 27, 190, 16, 107, 182, 188, 50, 254, 80, 189, 27, 216, 213, 188, 193, 73, 111, 190, 101, 90, 1, 189, 124, 242, 17, 62, 247, 63, 48, 188, 182, 92, 48, 189, 53, 99, 1, 62, 176, 44, 9, 190, 231, 178, 64, 190, 121, 223, 197, 61, 212, 250, 198, 190, 244, 6, 0, 192, 249, 88, 200, 61, 94, 216, 149, 62, 221, 211, 184, 190, 25, 38, 85, 190, 26, 18, 226, 190, 5, 120, 173, 189, 85, 42, 74, 190, 225, 8, 38, 190, 160, 125, 207, 189, 106, 145, 218, 61, 124, 138, 143, 61, 192, 76, 2, 191, 39, 75, 181, 190, 79, 219, 9, 62, 165, 128, 212, 61, 174, 61, 82, 62, 28, 107, 41, 190, 141, 108, 242, 189, 254, 163, 21, 190, 159, 211, 200, 60, 84, 125, 159, 188, 101, 61, 51, 191, 58, 183, 138, 62, 143, 202, 23, 62, 158, 86, 255, 190, 108, 212, 12, 63, 168, 134, 28, 191, 128, 5, 217, 189, 235, 19, 60, 190, 0, 131, 11, 191, 181, 168, 140, 189, 102, 12, 227, 60, 210, 182, 38, 190, 127, 89, 19, 190, 135, 14, 32, 190, 85, 210, 252, 189, 42, 123, 15, 190, 190, 246, 81, 61, 222, 26, 145, 189, 151, 247, 44, 189, 0, 8, 25, 190, 8, 72, 147, 189, 229, 39, 3, 62, 241, 97, 234, 189, 56, 163, 15, 190, 229, 184, 43, 189, 63, 201, 18, 60, 233, 102, 27, 189, 126, 126, 29, 62, 22, 5, 11, 62, 196, 6, 181, 189, 113, 150, 247, 60, 236, 164, 197, 189, 12, 32, 2, 62, 245, 214, 117, 189, 152, 180, 113, 189, 62, 232, 134, 189, 103, 144, 21, 190, 71, 194, 177, 189, 194, 132, 202, 188, 71, 178, 141, 189, 53, 30, 240, 185, 148, 190, 169, 57, 0, 222, 94, 62, 82, 9, 161, 62, 182, 48, 7, 191, 150, 190, 53, 62, 135, 210, 38, 189, 108, 45, 253, 188, 142, 209, 201, 62, 10, 21, 131, 62, 147, 253, 61, 62, 125, 43, 194, 61, 179, 155, 136, 61, 137, 27, 33, 62, 173, 113, 21, 61, 106, 104, 156, 62, 186, 24, 136, 187, 205, 127, 54, 191, 90, 133, 9, 62, 180, 180, 50, 61, 77, 165, 205, 61, 0, 133, 220, 189, 8, 221, 54, 189, 238, 45, 60, 190, 13, 152, 50, 190, 83, 213, 170, 190, 241, 132, 207, 62, 244, 57, 107, 61, 73, 241, 41, 187, 129, 95, 8, 63, 28, 57, 154, 190, 32, 131, 114, 62, 203, 16, 21, 62, 252, 124, 97, 190, 43, 212, 132, 60, 230, 93, 98, 61, 154, 40, 126, 62, 39, 177, 76, 61, 145, 128, 6, 62, 174, 231, 120, 62, 223, 242, 112, 61, 112, 172, 224, 189, 122, 38, 94, 62, 246, 55, 21, 190, 3, 200, 186, 60, 33, 209, 2, 188, 253, 143, 205, 189, 21, 93, 25, 62, 149, 26, 24, 190, 187, 39, 128, 189, 20, 127, 243, 188, 98, 88, 136, 61, 182, 225, 124, 188, 114, 73, 42, 187, 30, 35, 73, 61, 62, 193, 125, 61, 189, 28, 87, 190, 180, 131, 147, 62, 11, 187, 32, 189, 5, 57, 232, 188, 135, 89, 144, 190, 175, 214, 177, 190, 27, 49, 16, 62, 5, 113, 4, 62, 70, 136, 130, 61, 223, 151, 139, 62, 159, 254, 238, 61, 95, 56, 141, 190, 44, 237, 120, 191, 164, 72, 250, 61, 49, 6, 128, 61, 195, 38, 123, 190, 136, 124, 255, 189, 0, 64, 223, 188, 99, 143, 177, 189, 235, 202, 37, 62, 94, 226, 141, 190, 134, 247, 233, 189, 152, 89, 39, 62, 30, 166, 94, 62, 143, 41, 84, 189, 44, 31, 136, 190, 57, 10, 134, 190, 115, 75, 183, 61, 246, 192, 176, 190, 213, 122, 138, 61, 198, 206, 118, 190, 225, 57, 178, 62, 144, 167, 238, 188, 18, 85, 206, 60, 214, 20, 255, 190, 217, 118, 65, 62, 82, 49, 235, 62, 231, 168, 10, 191, 93, 75, 113, 190, 137, 141, 252, 61, 31, 38, 180, 61, 151, 58, 133, 61, 157, 188, 134, 61, 153, 22, 56, 62, 169, 69, 203, 62, 251, 230, 101, 188, 120, 246, 129, 190, 191, 91, 181, 61, 12, 26, 243, 188, 106, 140, 252, 61, 144, 229, 8, 190, 147, 140, 204, 190, 93, 50, 68, 62, 80, 166, 92, 60, 34, 85, 151, 60, 175, 65, 147, 189, 225, 231, 148, 61, 149, 187, 18, 189, 11, 133, 190, 61, 31, 252, 233, 60, 170, 75, 165, 61, 162, 36, 230, 189, 11, 50, 197, 188, 243, 182, 1, 190, 96, 106, 5, 62, 149, 39, 46, 62, 214, 85, 81, 62, 103, 50, 7, 62, 62, 37, 1, 191, 40, 251, 168, 188, 78, 52, 65, 62, 146, 117, 133, 61, 146, 210, 6, 62, 206, 146, 153, 190, 89, 249, 202, 61, 241, 137, 149, 61, 59, 23, 31, 190, 244, 253, 0, 62, 235, 242, 77, 61, 194, 61, 179, 61, 163, 124, 165, 189, 219, 102, 188, 189, 186, 174, 164, 61, 242, 250, 200, 187, 116, 136, 172, 189, 123, 20, 168, 60, 122, 128, 165, 189, 38, 104, 34, 189, 55, 230, 118, 61, 79, 141, 136, 62, 176, 99, 183, 60, 144, 207, 214, 60, 140, 86, 160, 190, 225, 36, 1, 190, 208, 53, 234, 188, 25, 106, 221, 61, 236, 164, 128, 190, 210, 47, 52, 62, 217, 242, 140, 189, 103, 77, 5, 62, 199, 87, 11, 189, 64, 222, 250, 190, 57, 156, 115, 62, 105, 64, 168, 188, 99, 157, 242, 61, 220, 70, 139, 190, 38, 46, 254, 191, 154, 66, 60, 60, 138, 227, 91, 62, 250, 227, 200, 190, 101, 126, 80, 62, 219, 29, 234, 189, 207, 184, 97, 188, 116, 47, 75, 62, 158, 241, 54, 191, 154, 145, 171, 190, 190, 75, 16, 62, 253, 120, 169, 61, 215, 109, 63, 62, 110, 21, 19, 191, 45, 4, 80, 189, 144, 193, 127, 62, 12, 62, 100, 61, 105, 12, 191, 61, 100, 164, 192, 190, 171, 168, 41, 190, 142, 45, 149, 190, 183, 143, 123, 191, 254, 242, 122, 62, 144, 136, 123, 189, 247, 187, 210, 189, 58, 32, 18, 191, 193, 249, 98, 190, 143, 90, 56, 189, 45, 13, 150, 62, 235, 106, 65, 190, 118, 21, 50, 191, 165, 211, 192, 189, 19, 45, 131, 61, 15, 126, 139, 189, 169, 143, 98, 61, 73, 155, 25, 62, 150, 81, 0, 189, 109, 23, 175, 189, 77, 74, 97, 189, 4, 184, 235, 61, 69, 166, 21, 62, 125, 16, 153, 61, 180, 208, 58, 189, 245, 183, 76, 189, 49, 209, 219, 60, 163, 222, 24, 190, 216, 213, 215, 61, 59, 30, 38, 189, 174, 15, 191, 60, 203, 78, 210, 189, 188, 88, 23, 62, 180, 94, 144, 186, 69, 100, 2, 190, 88, 207, 145, 189, 199, 246, 46, 190, 203, 130, 13, 190, 134, 213, 13, 190, 156, 156, 14, 190, 245, 233, 51, 190, 53, 221, 131, 189, 3, 229, 160, 61, 139, 190, 8, 190, 204, 235, 32, 189, 139, 241, 55, 63, 198, 201, 240, 190, 47, 180, 12, 190, 89, 84, 208, 62, 188, 115, 131, 190, 237, 102, 8, 190, 120, 108, 47, 190, 115, 144, 224, 188, 41, 56, 136, 190, 193, 213, 141, 191, 206, 201, 181, 190, 140, 232, 88, 190, 241, 64, 130, 190, 182, 200, 10, 191, 160, 176, 160, 61, 248, 104, 38, 191, 2, 59, 27, 61, 63, 230, 2, 61, 21, 162, 135, 61, 238, 225, 237, 187, 201, 1, 29, 189, 108, 77, 249, 191, 187, 218, 52, 191, 66, 94, 202, 190, 250, 55, 59, 190, 203, 145, 197, 191, 167, 63, 142, 190, 21, 244, 243, 190, 85, 44, 3, 190, 254, 219, 86, 62, 162, 118, 190, 190, 35, 53, 239, 190, 55, 132, 160, 62, 23, 220, 213, 60, 188, 206, 141, 190, 206, 18, 130, 61, 160, 54, 88, 62, 105, 211, 187, 190, 138, 92, 51, 189, 93, 211, 225, 61, 106, 136, 227, 62, 119, 18, 14, 190, 188, 72, 31, 191, 27, 5, 251, 62, 162, 170, 185, 62, 124, 217, 158, 189, 131, 35, 111, 62, 236, 154, 139, 190, 128, 251, 180, 190, 201, 248, 51, 190, 107, 129, 130, 189, 165, 71, 131, 62, 223, 44, 10, 191, 198, 226, 138, 190, 25, 102, 9, 190, 80, 181, 129, 62, 213, 120, 227, 188, 147, 42, 25, 61, 34, 77, 83, 61, 194, 117, 97, 191, 153, 99, 231, 189, 171, 166, 143, 190, 162, 250, 144, 62, 121, 30, 133, 189, 77, 214, 88, 190, 232, 215, 116, 191, 180, 249, 208, 61, 143, 115, 195, 61, 164, 51, 226, 190, 108, 154, 54, 62, 74, 226, 61, 191, 10, 1, 131, 190, 209, 144, 22, 190, 139, 179, 157, 60, 109, 169, 173, 62, 163, 158, 156, 189, 226, 221, 90, 190, 7, 54, 185, 62, 88, 199, 12, 191, 65, 176, 22, 62, 3, 8, 106, 60, 76, 47, 4, 61, 78, 60, 130, 60, 185, 206, 65, 187, 178, 40, 147, 61, 196, 206, 9, 190, 107, 150, 170, 62, 39, 210, 38, 190, 240, 234, 61, 62, 201, 42, 155, 61, 237, 194, 20, 190, 116, 56, 179, 62, 232, 233, 60, 191, 135, 113, 183, 61, 157, 89, 140, 190, 70, 229, 174, 61, 123, 117, 143, 190, 152, 84, 101, 61, 251, 77, 66, 61, 86, 93, 34, 190, 86, 243, 42, 62, 57, 237, 98, 61, 124, 233, 247, 58, 158, 55, 2, 189, 143, 81, 157, 189, 119, 197, 151, 188, 84, 241, 175, 189, 62, 75, 172, 62, 100, 254, 206, 188, 230, 228, 200, 189, 216, 121, 174, 61, 135, 63, 47, 62, 188, 248, 102, 189, 23, 215, 25, 62, 160, 94, 48, 60, 139, 147, 242, 189, 138, 215, 165, 189, 197, 23, 184, 61, 49, 154, 148, 61, 134, 102, 83, 190, 165, 65, 37, 188, 106, 16, 141, 189, 90, 157, 195, 188, 227, 187, 51, 61, 192, 59, 67, 190, 122, 175, 255, 61, 239, 220, 83, 62, 237, 32, 223, 189, 109, 89, 0, 62, 21, 198, 11, 190, 119, 196, 230, 190, 141, 194, 112, 191, 45, 69, 129, 189, 231, 56, 24, 187, 181, 138, 192, 190, 60, 47, 43, 190, 33, 11, 56, 189, 101, 218, 252, 189, 25, 185, 159, 190, 89, 87, 99, 190, 74, 89, 102, 62, 64, 25, 175, 62, 98, 234, 31, 190, 201, 49, 107, 61, 191, 12, 214, 62, 152, 14, 225, 189, 152, 175, 139, 61, 155, 110, 142, 190, 161, 143, 70, 190, 1, 205, 140, 189, 185, 232, 15, 63, 200, 254, 188, 61, 30, 11, 66, 62, 35, 24, 21, 191, 178, 93, 47, 190, 203, 222, 164, 62, 151, 61, 188, 191, 113, 4, 155, 61, 154, 237, 229, 60, 59, 74, 104, 61, 182, 248, 21, 63, 240, 171, 11, 62, 201, 134, 227, 190, 151, 128, 49, 62, 130, 1, 170, 188, 107, 57, 124, 189, 233, 242, 255, 61, 134, 4, 65, 62, 214, 120, 145, 62, 112, 27, 3, 191, 128, 252, 185, 189, 235, 237, 200, 61, 7, 176, 72, 60, 7, 22, 67, 188, 239, 24, 20, 190, 202, 245, 19, 191, 214, 27, 85, 61, 120, 116, 49, 191, 135, 69, 200, 61, 75, 13, 124, 188, 228, 237, 160, 190, 255, 27, 12, 191, 229, 126, 192, 189, 171, 119, 189, 62, 42, 204, 215, 189, 235, 191, 234, 60, 234, 13, 57, 62, 71, 35, 150, 190, 193, 43, 60, 62, 71, 156, 134, 189, 227, 218, 188, 62, 28, 131, 97, 189, 110, 132, 54, 63, 237, 230, 139, 62, 168, 43, 220, 190, 139, 137, 172, 62, 249, 72, 216, 61, 71, 242, 217, 190, 169, 94, 134, 61, 151, 46, 151, 62, 177, 194, 202, 61, 82, 58, 196, 191, 187, 208, 166, 190, 192, 125, 152, 62, 2, 77, 133, 62, 133, 236, 97, 190, 239, 21, 185, 62, 79, 215, 71, 191, 73, 146, 219, 62, 127, 152, 37, 191, 174, 187, 1, 190, 196, 191, 243, 62, 183, 6, 158, 190, 113, 75, 192, 191, 26, 43, 169, 189, 145, 26, 28, 190, 213, 91, 179, 190, 76, 221, 139, 191, 158, 86, 145, 61, 2, 148, 25, 191, 225, 73, 14, 189, 52, 100, 151, 62, 196, 98, 110, 62, 199, 209, 10, 190, 249, 232, 193, 61, 14, 185, 80, 188, 82, 13, 17, 62, 248, 237, 157, 189, 8, 142, 145, 61, 182, 241, 30, 190, 188, 251, 216, 61, 217, 36, 41, 190, 247, 52, 149, 189, 181, 108, 240, 189, 65, 88, 1, 62, 171, 25, 17, 190, 115, 251, 243, 187, 90, 168, 140, 60, 4, 67, 161, 61, 64, 250, 82, 61, 243, 219, 29, 190, 165, 152, 239, 189, 239, 55, 22, 190, 121, 107, 7, 62, 109, 97, 8, 190, 148, 165, 162, 189, 22, 215, 212, 189, 169, 131, 3, 190, 177, 136, 229, 189, 223, 255, 85, 61, 116, 168, 3, 190, 152, 46, 132, 59, 7, 149, 173, 189, 213, 151, 46, 189, 72, 141, 212, 189, 93, 8, 238, 61, 97, 249, 51, 190, 249, 9, 18, 61, 48, 63, 29, 189, 116, 45, 41, 190, 197, 122, 177, 189, 128, 182, 21, 62, 136, 89, 96, 61, 237, 92, 182, 189, 76, 47, 129, 60, 198, 120, 162, 61, 26, 1, 41, 62, 122, 228, 199, 189, 92, 234, 33, 190, 231, 33, 140, 189, 61, 55, 141, 189, 71, 6, 45, 61, 232, 132, 6, 190, 87, 248, 144, 61, 146, 247, 136, 61, 12, 200, 162, 61, 255, 108, 185, 189, 228, 199, 111, 188, 113, 126, 32, 190, 43, 108, 123, 189, 24, 10, 92, 188, 44, 196, 93, 189, 237, 138, 168, 189, 72, 192, 84, 189, 152, 229, 76, 189, 79, 222, 54, 190, 136, 219, 17, 61, 17, 184, 192, 189, 151, 150, 104, 190, 141, 158, 24, 62, 97, 80, 155, 60, 43, 228, 152, 62, 19, 108, 202, 190, 133, 104, 14, 191, 55, 226, 239, 61, 140, 159, 235, 61, 229, 40, 203, 190, 131, 229, 133, 190, 105, 226, 92, 62, 67, 31, 197, 189, 246, 210, 78, 61, 46, 169, 142, 190, 103, 240, 158, 190, 40, 101, 9, 190, 68, 40, 100, 62, 16, 206, 1, 61, 181, 67, 6, 190, 102, 236, 19, 62, 100, 104, 93, 190, 106, 209, 229, 61, 235, 50, 0, 62, 42, 57, 65, 59, 165, 166, 49, 62, 197, 251, 74, 62, 121, 34, 36, 190, 15, 173, 248, 189, 254, 87, 76, 62, 151, 49, 139, 62, 21, 45, 50, 189, 106, 113, 167, 189, 224, 19, 212, 190, 4, 226, 13, 192, 63, 163, 13, 62, 168, 85, 34, 62, 105, 42, 131, 190, 176, 206, 14, 190, 5, 25, 238, 190, 123, 46, 137, 189, 32, 53, 201, 189, 57, 225, 244, 60, 129, 24, 89, 190, 61, 78, 138, 189, 224, 195, 79, 61, 217, 198, 169, 190, 143, 112, 206, 190, 93, 6, 133, 61, 255, 177, 46, 62, 243, 100, 55, 189, 150, 182, 206, 189, 71, 3, 99, 190, 9, 206, 157, 190, 69, 135, 125, 190, 242, 133, 240, 188, 56, 47, 12, 191, 46, 27, 157, 62, 107, 201, 4, 62, 169, 49, 118, 190, 118, 65, 95, 62, 159, 155, 163, 191, 209, 252, 218, 61, 252, 124, 249, 189, 169, 89, 164, 190, 5, 147, 201, 190, 115, 35, 98, 61, 229, 16, 27, 190, 178, 53, 0, 191, 148, 122, 95, 189, 185, 207, 121, 62, 143, 88, 177, 189, 23, 83, 10, 190, 210, 60, 27, 189, 55, 229, 3, 61, 37, 243, 83, 62, 248, 143, 2, 61, 36, 183, 153, 187, 113, 228, 87, 189, 25, 254, 235, 188, 75, 183, 71, 62, 8, 9, 85, 190, 96, 15, 25, 190, 0, 180, 125, 61, 139, 175, 155, 189, 116, 59, 165, 61, 223, 65, 37, 190, 163, 16, 55, 62, 127, 171, 40, 190, 217, 121, 3, 187, 25, 128, 142, 189, 112, 113, 198, 189, 12, 136, 19, 62, 119, 135, 161, 190, 12, 206, 73, 190, 3, 161, 167, 61, 25, 182, 12, 62, 50, 136, 25, 191, 193, 126, 193, 191, 37, 58, 26, 62, 138, 90, 234, 61, 75, 9, 3, 191, 7, 11, 225, 190, 231, 73, 117, 190, 194, 181, 122, 189, 90, 183, 34, 62, 52, 151, 243, 190, 169, 96, 122, 189, 100, 141, 86, 62, 84, 237, 42, 62, 11, 212, 10, 189, 0, 39, 16, 191, 90, 48, 254, 189, 207, 211, 23, 61, 0, 230, 220, 189, 224, 162, 41, 60, 139, 78, 86, 61, 237, 86, 41, 190, 229, 14, 75, 190, 124, 208, 91, 61, 210, 175, 205, 62, 68, 1, 89, 190, 200, 16, 31, 190, 34, 149, 212, 190, 234, 56, 69, 190, 177, 160, 203, 62, 33, 15, 214, 61, 38, 218, 21, 186, 236, 205, 183, 190, 208, 23, 11, 189, 154, 163, 147, 61, 91, 192, 186, 61, 191, 103, 46, 190, 57, 212, 144, 188, 172, 209, 234, 189, 235, 57, 139, 189, 182, 180, 130, 60, 61, 172, 174, 189, 22, 45, 235, 187, 152, 194, 156, 189, 222, 170, 124, 189, 72, 30, 108, 188, 177, 173, 188, 60, 205, 150, 225, 189, 232, 138, 48, 190, 92, 231, 73, 190, 209, 7, 154, 188, 66, 84, 247, 189, 220, 238, 154, 188, 15, 138, 120, 60, 251, 34, 22, 189, 218, 111, 142, 189, 35, 196, 22, 62, 100, 121, 19, 61, 120, 60, 52, 190, 101, 46, 32, 61, 111, 173, 21, 61, 149, 200, 169, 62, 242, 190, 229, 61, 245, 73, 61, 60, 189, 61, 10, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 112, 0, 190, 106, 181, 156, 62, 170, 209, 58, 62, 217, 241, 106, 62, 3, 41, 172, 62, 79, 107, 204, 187, 216, 107, 192, 188, 91, 64, 140, 61, 141, 132, 137, 189, 74, 225, 99, 61, 69, 241, 148, 189, 96, 142, 44, 190, 96, 116, 201, 62, 49, 92, 121, 190, 238, 214, 144, 62, 45, 145, 176, 62, 28, 206, 127, 190, 96, 5, 31, 190, 151, 59, 25, 60, 147, 172, 144, 62, 127, 144, 156, 62, 74, 12, 23, 62, 12, 201, 22, 62, 204, 125, 151, 62, 117, 51, 40, 62, 18, 150, 32, 189, 12, 110, 32, 61, 3, 203, 57, 190, 209, 59, 146, 62, 48, 20, 181, 189, 206, 163, 230, 187, 152, 83, 127, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 235, 112, 61, 95, 55, 161, 190, 238, 183, 48, 189, 85, 54, 185, 62, 130, 192, 13, 63, 95, 70, 34, 63, 203, 114, 255, 62, 77, 86, 41, 189, 226, 228, 81, 61, 122, 78, 84, 191, 35, 90, 172, 187, 170, 68, 162, 190, 7, 115, 170, 60, 174, 97, 237, 190, 251, 127, 19, 62, 172, 202, 21, 189, 71, 170, 99, 191, 124, 179, 192, 189, 249, 27, 161, 63, 237, 49, 43, 63, 15, 6, 37, 191, 62, 160, 9, 60, 235, 195, 64, 191, 110, 17, 160, 62, 2, 122, 141, 63, 6, 199, 50, 62, 91, 176, 9, 62, 127, 195, 94, 190, 199, 150, 166, 191, 221, 236, 247, 189, 186, 26, 85, 191, 54, 190, 6, 190, 212, 197, 200, 61, 141, 144, 239, 188, 79, 106, 98, 189, 166, 1, 96, 191, 226, 12, 115, 190, 109, 58, 28, 190, 141, 194, 40, 62, 134, 200, 222, 190, 135, 239, 244, 60, 149, 43, 98, 62, 55, 135, 23, 62, 255, 7, 27, 62, 89, 21, 134, 190, 210, 46, 57, 62, 45, 133, 155, 189, 247, 163, 60, 190, 107, 210, 239, 61, 87, 159, 135, 61, 34, 107, 64, 62, 122, 229, 44, 62, 108, 61, 211, 189, 25, 163, 58, 190, 98, 70, 232, 189, 107, 175, 55, 190, 251, 25, 205, 62, 142, 232, 56, 55, 68, 0, 52, 190, 225, 149, 239, 61, 240, 225, 129, 61, 8, 73, 191, 188, 151, 219, 211, 189, 181, 210, 147, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {124, 230, 139, 62, 111, 29, 51, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {83, 173, 184, 63, 253, 147, 145, 62, 206, 128, 203, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {68, 23, 25, 64, 72, 3, 200, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0028/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}