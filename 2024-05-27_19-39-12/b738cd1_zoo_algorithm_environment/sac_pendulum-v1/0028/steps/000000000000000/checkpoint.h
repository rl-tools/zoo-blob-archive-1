// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 253, 185, 62, 165, 231, 243, 62, 29, 121, 107, 190, 62, 148, 49, 190, 243, 117, 32, 190, 190, 51, 93, 62, 63, 225, 232, 190, 113, 188, 223, 190, 20, 40, 1, 191, 35, 9, 19, 191, 173, 80, 110, 61, 126, 254, 35, 190, 52, 158, 163, 190, 200, 55, 225, 190, 144, 153, 1, 63, 255, 46, 246, 62, 181, 29, 248, 190, 232, 172, 14, 63, 81, 131, 129, 190, 8, 113, 69, 62, 116, 14, 9, 63, 63, 168, 67, 190, 221, 32, 238, 189, 10, 69, 234, 190, 254, 15, 18, 190, 14, 166, 53, 190, 194, 195, 177, 60, 206, 218, 0, 63, 122, 240, 141, 62, 126, 60, 224, 61, 244, 153, 228, 187, 180, 34, 7, 63, 97, 86, 205, 62, 84, 209, 231, 190, 141, 230, 87, 190, 62, 14, 57, 62, 230, 95, 56, 62, 38, 154, 160, 190, 252, 106, 209, 62, 236, 156, 11, 63, 29, 76, 192, 189, 185, 85, 194, 62, 51, 85, 10, 191, 59, 56, 29, 190, 162, 144, 151, 62, 11, 23, 27, 62, 173, 169, 11, 63, 75, 165, 146, 190, 23, 138, 78, 190, 238, 254, 128, 62, 73, 50, 27, 62, 218, 150, 213, 190, 79, 248, 193, 60, 25, 195, 212, 190, 219, 167, 85, 58, 39, 96, 34, 190, 147, 244, 18, 189, 167, 246, 96, 189, 57, 254, 245, 190, 17, 255, 65, 190, 150, 84, 32, 62, 230, 105, 60, 189, 10, 132, 9, 63, 62, 206, 143, 190, 4, 194, 48, 190, 54, 225, 8, 191, 112, 203, 158, 62, 5, 72, 155, 62, 11, 161, 226, 62, 217, 147, 227, 62, 109, 122, 211, 190, 116, 71, 30, 61, 229, 121, 227, 189, 144, 100, 183, 62, 157, 18, 6, 191, 196, 153, 164, 61, 67, 1, 74, 190, 154, 53, 194, 190, 131, 110, 184, 61, 166, 29, 136, 190, 49, 141, 7, 63, 132, 119, 80, 189, 233, 240, 114, 62, 242, 14, 109, 62, 15, 235, 195, 62, 82, 73, 224, 190, 251, 50, 191, 189, 84, 56, 195, 190, 3, 246, 133, 62, 130, 243, 166, 62, 136, 225, 8, 63, 218, 44, 244, 190, 153, 131, 15, 191, 72, 118, 200, 61, 189, 240, 177, 190, 129, 54, 7, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {13, 188, 19, 191, 2, 77, 107, 189, 50, 1, 108, 62, 3, 171, 237, 190, 30, 109, 45, 189, 1, 74, 232, 190, 233, 178, 55, 61, 121, 227, 0, 191, 221, 104, 3, 62, 135, 122, 53, 190, 233, 145, 198, 190, 83, 245, 232, 62, 128, 143, 241, 62, 57, 204, 233, 62, 205, 40, 231, 190, 151, 180, 156, 190, 53, 42, 5, 62, 111, 88, 140, 188, 116, 88, 9, 191, 54, 45, 122, 190, 20, 210, 17, 191, 192, 173, 189, 190, 131, 39, 15, 63, 19, 132, 189, 190, 105, 31, 5, 63, 160, 122, 193, 61, 85, 55, 71, 189, 54, 122, 144, 186, 217, 146, 246, 190, 244, 144, 29, 62, 41, 6, 36, 62, 197, 48, 165, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 246, 210, 189, 238, 69, 161, 61, 243, 83, 20, 62, 227, 38, 75, 189, 172, 144, 187, 61, 100, 117, 225, 189, 175, 86, 185, 189, 5, 3, 46, 187, 8, 106, 160, 189, 170, 187, 42, 190, 226, 84, 251, 59, 5, 14, 12, 190, 155, 199, 149, 61, 155, 151, 6, 190, 241, 108, 147, 189, 190, 153, 183, 59, 23, 63, 0, 62, 230, 48, 12, 190, 247, 202, 42, 189, 88, 94, 136, 189, 158, 44, 241, 189, 46, 191, 121, 188, 86, 151, 6, 62, 66, 79, 96, 61, 244, 31, 212, 61, 115, 13, 175, 189, 92, 226, 181, 189, 136, 236, 124, 61, 112, 224, 11, 62, 177, 26, 43, 190, 24, 178, 152, 189, 175, 86, 226, 189, 214, 249, 151, 189, 189, 188, 14, 62, 80, 202, 233, 61, 139, 125, 254, 189, 125, 138, 62, 189, 245, 19, 10, 190, 2, 142, 4, 188, 79, 123, 16, 62, 62, 117, 220, 61, 98, 22, 133, 61, 242, 148, 122, 61, 91, 137, 147, 61, 222, 253, 30, 190, 198, 84, 9, 61, 224, 163, 105, 189, 243, 100, 23, 62, 171, 25, 153, 61, 35, 100, 214, 189, 168, 181, 3, 190, 132, 196, 10, 190, 129, 56, 107, 188, 255, 76, 46, 190, 228, 254, 15, 62, 52, 170, 186, 189, 200, 188, 150, 61, 245, 146, 76, 189, 208, 97, 178, 189, 21, 83, 40, 62, 255, 69, 113, 61, 53, 32, 122, 61, 164, 71, 0, 189, 126, 137, 151, 61, 107, 108, 9, 189, 249, 213, 1, 61, 78, 15, 90, 189, 178, 50, 174, 61, 116, 176, 22, 62, 177, 240, 45, 62, 158, 245, 68, 189, 199, 59, 56, 61, 184, 232, 128, 61, 189, 69, 135, 61, 14, 13, 31, 189, 159, 48, 247, 60, 35, 141, 23, 62, 98, 222, 52, 62, 77, 140, 50, 190, 139, 194, 162, 61, 130, 135, 230, 188, 102, 18, 189, 61, 105, 62, 244, 189, 10, 246, 210, 189, 102, 165, 183, 61, 252, 24, 202, 189, 186, 159, 114, 187, 247, 42, 98, 59, 24, 121, 155, 60, 218, 31, 141, 61, 191, 98, 199, 189, 189, 82, 184, 188, 158, 107, 13, 62, 154, 7, 137, 61, 154, 44, 232, 189, 137, 215, 70, 189, 170, 223, 207, 61, 73, 155, 238, 60, 146, 250, 12, 190, 48, 219, 224, 61, 136, 194, 198, 61, 178, 191, 39, 190, 6, 69, 31, 190, 122, 171, 138, 61, 182, 181, 180, 189, 233, 94, 29, 62, 170, 232, 248, 189, 83, 233, 25, 62, 246, 66, 184, 60, 87, 127, 182, 61, 13, 53, 169, 60, 90, 44, 27, 189, 43, 187, 1, 61, 247, 124, 4, 190, 182, 190, 43, 62, 8, 178, 131, 188, 245, 72, 156, 189, 234, 117, 7, 62, 156, 197, 46, 190, 101, 202, 43, 190, 171, 211, 210, 188, 249, 115, 19, 190, 243, 144, 176, 189, 89, 192, 11, 190, 231, 171, 211, 61, 3, 25, 171, 61, 82, 219, 35, 62, 13, 140, 176, 189, 243, 61, 41, 190, 86, 42, 175, 61, 192, 177, 59, 189, 15, 251, 248, 189, 74, 135, 175, 189, 150, 251, 215, 189, 40, 101, 222, 189, 59, 30, 88, 189, 221, 72, 162, 189, 47, 27, 35, 61, 64, 135, 245, 187, 46, 166, 140, 189, 219, 116, 222, 61, 103, 160, 26, 190, 179, 107, 190, 189, 198, 157, 40, 60, 64, 13, 168, 61, 138, 13, 180, 189, 44, 225, 229, 189, 247, 25, 53, 61, 233, 213, 120, 189, 21, 39, 182, 60, 92, 81, 160, 59, 82, 239, 24, 190, 118, 253, 196, 61, 137, 133, 37, 62, 198, 182, 133, 60, 251, 201, 204, 188, 205, 31, 6, 190, 94, 243, 44, 190, 24, 235, 214, 60, 71, 121, 89, 61, 124, 171, 198, 61, 170, 1, 34, 62, 133, 135, 70, 189, 174, 245, 6, 189, 177, 167, 228, 189, 35, 134, 35, 190, 182, 181, 223, 189, 72, 195, 242, 61, 28, 1, 243, 188, 20, 8, 61, 189, 210, 19, 70, 61, 225, 181, 91, 189, 210, 10, 241, 60, 154, 245, 184, 189, 188, 74, 148, 189, 82, 154, 8, 189, 39, 140, 11, 190, 208, 136, 175, 189, 58, 14, 30, 190, 74, 79, 34, 190, 123, 184, 174, 60, 14, 22, 36, 189, 32, 166, 254, 189, 76, 207, 136, 61, 160, 18, 26, 190, 168, 170, 33, 62, 114, 85, 245, 60, 255, 179, 254, 189, 85, 33, 200, 188, 202, 34, 243, 189, 233, 187, 25, 62, 79, 58, 121, 189, 81, 241, 32, 190, 73, 45, 44, 190, 71, 228, 250, 186, 173, 55, 21, 59, 8, 74, 171, 61, 176, 107, 20, 189, 103, 55, 38, 62, 188, 240, 217, 61, 131, 29, 183, 189, 64, 255, 16, 190, 177, 205, 166, 189, 210, 30, 161, 61, 14, 81, 69, 189, 191, 138, 211, 187, 214, 142, 32, 61, 213, 81, 18, 62, 111, 21, 6, 190, 218, 162, 17, 62, 141, 244, 19, 189, 66, 107, 74, 189, 115, 90, 170, 189, 99, 19, 125, 189, 149, 120, 85, 189, 193, 2, 52, 62, 109, 52, 232, 189, 130, 202, 93, 61, 137, 16, 184, 60, 172, 60, 29, 61, 102, 174, 72, 189, 10, 122, 194, 188, 57, 106, 42, 62, 79, 195, 151, 61, 102, 171, 35, 190, 122, 105, 192, 188, 216, 171, 35, 62, 245, 253, 83, 61, 209, 181, 244, 61, 150, 71, 42, 61, 202, 212, 167, 61, 87, 11, 5, 190, 23, 158, 249, 189, 20, 41, 15, 188, 108, 39, 7, 190, 181, 15, 205, 189, 238, 223, 141, 61, 70, 92, 75, 61, 124, 49, 106, 61, 175, 134, 15, 58, 68, 47, 28, 60, 208, 88, 107, 61, 159, 69, 13, 62, 163, 237, 216, 61, 75, 63, 184, 61, 177, 139, 235, 189, 114, 179, 14, 190, 171, 16, 3, 62, 233, 13, 40, 62, 92, 91, 8, 190, 171, 245, 52, 189, 71, 20, 132, 189, 78, 17, 166, 61, 215, 79, 220, 189, 87, 183, 149, 61, 21, 147, 94, 61, 211, 223, 228, 189, 32, 29, 38, 62, 14, 8, 40, 190, 73, 206, 30, 62, 128, 82, 200, 61, 239, 54, 143, 189, 201, 137, 174, 189, 191, 104, 226, 189, 137, 113, 232, 189, 235, 69, 12, 190, 43, 138, 203, 60, 204, 123, 47, 61, 143, 138, 6, 190, 6, 166, 106, 61, 74, 163, 206, 61, 214, 181, 15, 62, 51, 44, 51, 62, 211, 193, 165, 189, 229, 90, 49, 190, 243, 249, 13, 190, 126, 79, 68, 57, 55, 1, 17, 189, 109, 72, 21, 61, 26, 126, 35, 190, 206, 62, 86, 61, 47, 23, 49, 62, 238, 145, 36, 61, 80, 103, 60, 188, 230, 0, 1, 62, 148, 114, 175, 189, 88, 45, 24, 190, 209, 67, 34, 62, 166, 94, 150, 189, 239, 8, 234, 189, 35, 108, 236, 189, 44, 1, 185, 61, 174, 191, 183, 61, 254, 182, 22, 61, 2, 135, 113, 61, 127, 53, 45, 61, 181, 26, 166, 61, 48, 158, 35, 190, 79, 165, 238, 61, 246, 95, 254, 61, 160, 138, 34, 62, 202, 75, 217, 189, 249, 87, 151, 61, 218, 79, 203, 188, 60, 70, 145, 61, 37, 216, 149, 60, 28, 107, 41, 190, 162, 162, 152, 60, 47, 114, 197, 189, 59, 183, 103, 188, 91, 188, 225, 189, 14, 52, 224, 61, 227, 214, 46, 61, 194, 49, 92, 61, 64, 18, 41, 190, 35, 151, 113, 61, 135, 7, 88, 189, 169, 59, 141, 189, 246, 157, 178, 189, 155, 52, 132, 59, 181, 168, 140, 189, 102, 12, 227, 60, 210, 182, 38, 190, 127, 89, 19, 190, 135, 14, 32, 190, 85, 210, 252, 189, 42, 123, 15, 190, 190, 246, 81, 61, 222, 26, 145, 189, 151, 247, 44, 189, 0, 8, 25, 190, 8, 72, 147, 189, 229, 39, 3, 62, 241, 97, 234, 189, 56, 163, 15, 190, 229, 184, 43, 189, 63, 201, 18, 60, 233, 102, 27, 189, 126, 126, 29, 62, 22, 5, 11, 62, 196, 6, 181, 189, 113, 150, 247, 60, 236, 164, 197, 189, 12, 32, 2, 62, 245, 214, 117, 189, 152, 180, 113, 189, 62, 232, 134, 189, 103, 144, 21, 190, 71, 194, 177, 189, 194, 132, 202, 188, 71, 178, 141, 189, 53, 30, 240, 185, 16, 116, 171, 187, 133, 70, 194, 61, 48, 151, 33, 62, 222, 58, 33, 190, 10, 26, 135, 61, 161, 131, 207, 188, 37, 159, 133, 189, 204, 61, 26, 62, 232, 48, 10, 62, 222, 80, 197, 61, 140, 214, 222, 59, 175, 155, 200, 61, 41, 85, 30, 62, 178, 214, 225, 61, 181, 223, 228, 60, 219, 144, 64, 61, 1, 148, 43, 189, 191, 206, 218, 189, 180, 180, 50, 61, 40, 11, 20, 60, 91, 23, 38, 190, 38, 72, 49, 190, 229, 207, 27, 59, 49, 60, 236, 59, 5, 240, 207, 189, 168, 57, 29, 62, 63, 139, 15, 189, 205, 124, 165, 60, 187, 138, 222, 61, 45, 184, 32, 190, 235, 137, 36, 189, 25, 32, 15, 62, 20, 70, 106, 189, 125, 207, 186, 60, 253, 235, 118, 60, 113, 99, 28, 62, 252, 34, 159, 60, 206, 176, 36, 62, 145, 40, 42, 62, 206, 114, 219, 61, 108, 139, 179, 189, 234, 6, 46, 62, 141, 215, 25, 189, 135, 163, 38, 190, 255, 171, 4, 61, 106, 7, 171, 189, 243, 59, 78, 61, 226, 32, 48, 190, 118, 201, 34, 190, 168, 141, 8, 189, 98, 88, 136, 61, 248, 2, 150, 189, 47, 254, 112, 187, 96, 163, 139, 61, 229, 0, 164, 61, 116, 239, 155, 189, 61, 21, 49, 62, 114, 207, 172, 189, 179, 51, 149, 189, 235, 78, 157, 189, 41, 217, 8, 190, 174, 241, 180, 60, 87, 158, 29, 57, 30, 231, 82, 61, 139, 225, 87, 61, 147, 41, 43, 62, 41, 20, 3, 189, 77, 142, 198, 189, 210, 26, 144, 61, 62, 36, 12, 189, 51, 13, 37, 190, 23, 198, 162, 189, 201, 213, 174, 189, 150, 231, 147, 189, 116, 233, 22, 189, 246, 126, 36, 190, 56, 32, 28, 190, 1, 9, 68, 61, 156, 193, 83, 61, 191, 39, 16, 190, 137, 112, 90, 189, 231, 170, 113, 189, 115, 75, 183, 61, 180, 103, 29, 190, 174, 199, 181, 189, 182, 30, 19, 190, 100, 116, 157, 61, 235, 53, 162, 189, 202, 102, 117, 189, 112, 188, 237, 188, 107, 149, 31, 62, 106, 40, 12, 62, 161, 31, 24, 190, 157, 105, 187, 188, 57, 206, 39, 62, 146, 111, 214, 60, 127, 12, 25, 190, 58, 126, 213, 187, 73, 206, 202, 61, 45, 166, 34, 62, 215, 64, 220, 189, 34, 209, 28, 190, 207, 57, 155, 60, 149, 116, 173, 189, 28, 131, 129, 189, 102, 10, 134, 189, 13, 92, 216, 189, 28, 0, 156, 188, 255, 184, 184, 189, 110, 34, 210, 61, 50, 95, 31, 190, 82, 59, 33, 62, 196, 32, 24, 189, 171, 132, 28, 62, 31, 252, 233, 60, 221, 77, 151, 189, 197, 61, 146, 187, 148, 123, 97, 189, 36, 158, 4, 61, 99, 82, 68, 61, 73, 27, 43, 62, 216, 193, 230, 61, 46, 217, 177, 61, 114, 147, 84, 61, 218, 50, 39, 61, 152, 195, 43, 62, 67, 213, 103, 189, 229, 147, 13, 62, 158, 233, 224, 189, 1, 41, 23, 62, 185, 169, 247, 61, 110, 10, 249, 189, 96, 185, 3, 62, 166, 94, 167, 60, 190, 186, 166, 61, 248, 206, 171, 60, 37, 202, 139, 187, 177, 154, 147, 61, 205, 194, 63, 61, 118, 102, 38, 190, 126, 129, 111, 61, 160, 178, 247, 189, 98, 201, 39, 190, 3, 105, 142, 189, 128, 206, 27, 62, 47, 189, 133, 60, 144, 207, 214, 60, 15, 199, 43, 190, 129, 73, 41, 190, 105, 149, 84, 61, 198, 19, 148, 61, 9, 79, 33, 61, 64, 210, 41, 61, 212, 32, 254, 188, 55, 191, 230, 61, 131, 64, 34, 59, 58, 158, 223, 189, 109, 69, 40, 62, 87, 14, 224, 189, 215, 240, 216, 61, 5, 219, 88, 61, 200, 26, 157, 189, 125, 255, 252, 61, 47, 133, 49, 62, 217, 77, 177, 60, 22, 146, 48, 189, 82, 37, 177, 189, 108, 108, 105, 61, 168, 149, 195, 60, 10, 2, 111, 188, 129, 14, 42, 190, 130, 238, 24, 62, 105, 214, 23, 190, 156, 204, 153, 61, 27, 109, 208, 188, 78, 147, 44, 190, 73, 3, 51, 62, 75, 237, 254, 61, 105, 12, 191, 61, 120, 146, 37, 190, 214, 237, 13, 190, 37, 195, 142, 61, 191, 132, 186, 189, 103, 50, 15, 190, 99, 227, 245, 61, 43, 252, 38, 62, 112, 182, 197, 187, 226, 179, 122, 61, 110, 125, 14, 190, 133, 150, 100, 61, 163, 20, 152, 188, 168, 218, 49, 62, 165, 211, 192, 189, 19, 45, 131, 61, 15, 126, 139, 189, 169, 143, 98, 61, 73, 155, 25, 62, 150, 81, 0, 189, 109, 23, 175, 189, 77, 74, 97, 189, 4, 184, 235, 61, 69, 166, 21, 62, 125, 16, 153, 61, 180, 208, 58, 189, 245, 183, 76, 189, 49, 209, 219, 60, 163, 222, 24, 190, 216, 213, 215, 61, 59, 30, 38, 189, 174, 15, 191, 60, 203, 78, 210, 189, 188, 88, 23, 62, 180, 94, 144, 186, 69, 100, 2, 190, 88, 207, 145, 189, 199, 246, 46, 190, 203, 130, 13, 190, 134, 213, 13, 190, 156, 156, 14, 190, 245, 233, 51, 190, 53, 221, 131, 189, 3, 229, 160, 61, 139, 190, 8, 190, 204, 235, 32, 189, 17, 214, 11, 190, 3, 14, 0, 62, 68, 230, 207, 189, 230, 175, 230, 61, 140, 17, 10, 190, 194, 198, 21, 62, 36, 60, 21, 61, 100, 232, 62, 187, 83, 199, 44, 190, 110, 137, 175, 60, 82, 124, 8, 190, 35, 32, 20, 189, 35, 179, 39, 189, 227, 112, 210, 189, 112, 138, 236, 61, 163, 225, 49, 62, 15, 206, 122, 189, 220, 238, 149, 61, 21, 162, 135, 61, 155, 155, 190, 61, 172, 118, 227, 61, 218, 115, 148, 189, 231, 193, 128, 61, 188, 59, 241, 189, 227, 215, 21, 190, 74, 40, 151, 189, 102, 157, 14, 62, 173, 117, 2, 190, 239, 142, 1, 190, 213, 172, 47, 62, 32, 87, 18, 62, 228, 210, 20, 190, 0, 53, 143, 61, 16, 213, 189, 60, 121, 219, 24, 190, 117, 215, 57, 189, 204, 41, 101, 61, 246, 248, 7, 190, 102, 106, 203, 189, 139, 103, 15, 62, 217, 211, 214, 61, 15, 98, 50, 62, 49, 86, 38, 61, 99, 134, 42, 62, 56, 95, 229, 61, 12, 56, 5, 61, 75, 8, 35, 61, 178, 29, 49, 61, 208, 123, 26, 190, 140, 171, 6, 62, 107, 129, 130, 189, 108, 156, 176, 189, 145, 88, 26, 190, 124, 84, 171, 189, 230, 170, 95, 61, 230, 36, 100, 189, 173, 165, 147, 61, 67, 24, 57, 61, 152, 237, 123, 61, 136, 169, 120, 189, 153, 13, 217, 60, 86, 100, 39, 190, 169, 139, 56, 61, 105, 232, 144, 189, 66, 78, 12, 62, 206, 214, 31, 62, 37, 197, 176, 61, 169, 254, 42, 61, 125, 106, 41, 190, 225, 84, 111, 61, 49, 7, 4, 190, 61, 60, 116, 189, 86, 9, 36, 62, 48, 255, 17, 61, 86, 177, 20, 62, 210, 154, 148, 189, 235, 205, 0, 190, 1, 83, 48, 62, 213, 253, 38, 190, 222, 31, 206, 189, 65, 36, 46, 190, 177, 246, 154, 189, 78, 60, 130, 60, 22, 12, 185, 189, 39, 122, 176, 189, 195, 231, 230, 189, 79, 209, 228, 61, 25, 17, 163, 61, 70, 145, 119, 60, 45, 115, 220, 61, 202, 60, 143, 186, 250, 181, 146, 60, 174, 117, 252, 61, 121, 150, 199, 186, 34, 9, 12, 190, 171, 26, 7, 61, 55, 231, 225, 188, 172, 32, 25, 61, 68, 246, 117, 61, 223, 124, 21, 190, 6, 163, 214, 61, 148, 108, 191, 60, 214, 107, 133, 189, 42, 243, 226, 60, 237, 230, 59, 188, 168, 135, 136, 189, 243, 239, 228, 188, 92, 186, 52, 62, 219, 191, 22, 188, 182, 11, 14, 190, 164, 252, 159, 189, 151, 217, 33, 62, 108, 70, 18, 190, 181, 53, 31, 62, 160, 94, 48, 60, 71, 18, 197, 189, 181, 65, 249, 189, 178, 146, 254, 61, 62, 17, 142, 60, 23, 190, 17, 62, 21, 142, 106, 189, 4, 108, 144, 189, 147, 111, 192, 189, 100, 120, 184, 61, 218, 73, 86, 189, 105, 136, 94, 59, 251, 8, 23, 62, 65, 176, 40, 190, 213, 75, 5, 190, 212, 11, 102, 188, 49, 82, 41, 190, 230, 51, 27, 190, 33, 65, 102, 187, 235, 122, 208, 187, 208, 6, 34, 190, 56, 95, 147, 61, 34, 127, 188, 189, 134, 19, 224, 189, 182, 36, 119, 189, 115, 233, 215, 189, 172, 30, 244, 61, 30, 217, 21, 62, 193, 69, 28, 62, 152, 103, 238, 189, 188, 231, 176, 61, 61, 157, 184, 61, 152, 175, 139, 61, 243, 43, 242, 61, 185, 249, 140, 61, 174, 227, 193, 61, 60, 110, 47, 62, 224, 199, 154, 60, 12, 204, 128, 61, 2, 116, 21, 190, 156, 62, 11, 189, 89, 44, 131, 188, 217, 18, 134, 189, 18, 57, 186, 188, 212, 186, 4, 62, 175, 106, 185, 189, 132, 233, 58, 61, 56, 208, 192, 61, 202, 23, 50, 190, 133, 196, 255, 61, 54, 74, 160, 189, 89, 187, 21, 62, 31, 77, 61, 60, 32, 213, 179, 61, 189, 74, 146, 61, 201, 125, 237, 189, 195, 149, 32, 62, 167, 170, 56, 189, 102, 16, 148, 189, 160, 30, 141, 61, 147, 184, 11, 190, 143, 193, 215, 189, 51, 140, 132, 188, 210, 100, 105, 189, 135, 69, 200, 61, 58, 78, 7, 190, 24, 156, 231, 189, 37, 101, 73, 188, 68, 178, 244, 189, 173, 192, 147, 61, 229, 64, 25, 190, 224, 144, 45, 62, 243, 28, 49, 62, 76, 132, 103, 61, 12, 177, 176, 188, 164, 191, 234, 189, 97, 110, 27, 61, 111, 19, 11, 189, 197, 226, 156, 189, 53, 214, 26, 62, 38, 88, 235, 59, 39, 253, 23, 62, 190, 61, 135, 189, 28, 213, 111, 189, 240, 91, 34, 190, 20, 15, 169, 189, 124, 215, 58, 189, 87, 119, 34, 190, 208, 117, 146, 189, 113, 47, 25, 62, 150, 180, 0, 62, 73, 207, 233, 188, 90, 228, 162, 61, 162, 105, 171, 187, 217, 19, 237, 61, 180, 50, 141, 188, 174, 187, 1, 190, 221, 83, 6, 62, 29, 190, 233, 188, 66, 173, 11, 190, 109, 27, 178, 189, 22, 179, 93, 189, 216, 69, 33, 186, 223, 161, 177, 189, 80, 205, 62, 189, 58, 186, 20, 190, 234, 74, 19, 190, 162, 99, 146, 61, 185, 127, 206, 188, 208, 24, 212, 189, 249, 232, 193, 61, 14, 185, 80, 188, 82, 13, 17, 62, 248, 237, 157, 189, 8, 142, 145, 61, 182, 241, 30, 190, 188, 251, 216, 61, 217, 36, 41, 190, 247, 52, 149, 189, 181, 108, 240, 189, 65, 88, 1, 62, 171, 25, 17, 190, 115, 251, 243, 187, 90, 168, 140, 60, 4, 67, 161, 61, 64, 250, 82, 61, 243, 219, 29, 190, 165, 152, 239, 189, 239, 55, 22, 190, 121, 107, 7, 62, 109, 97, 8, 190, 148, 165, 162, 189, 22, 215, 212, 189, 169, 131, 3, 190, 177, 136, 229, 189, 223, 255, 85, 61, 116, 168, 3, 190, 152, 46, 132, 59, 7, 149, 173, 189, 213, 151, 46, 189, 72, 141, 212, 189, 93, 8, 238, 61, 246, 143, 44, 190, 249, 9, 18, 61, 13, 247, 16, 189, 107, 197, 29, 190, 197, 122, 177, 189, 128, 182, 21, 62, 136, 89, 96, 61, 184, 78, 174, 189, 52, 138, 119, 60, 184, 255, 162, 61, 26, 1, 41, 62, 81, 235, 199, 189, 189, 154, 33, 190, 205, 197, 143, 189, 61, 55, 141, 189, 113, 109, 96, 61, 14, 145, 244, 189, 194, 180, 155, 61, 146, 247, 136, 61, 24, 124, 163, 61, 255, 108, 185, 189, 76, 59, 47, 188, 41, 55, 26, 190, 12, 30, 129, 189, 51, 155, 0, 188, 50, 212, 81, 189, 237, 138, 168, 189, 72, 192, 84, 189, 126, 120, 85, 189, 213, 152, 52, 190, 62, 89, 25, 61, 17, 184, 192, 189, 131, 245, 97, 61, 223, 199, 29, 62, 115, 47, 224, 189, 146, 85, 215, 61, 71, 30, 184, 61, 190, 188, 230, 189, 0, 190, 156, 61, 63, 239, 172, 61, 135, 186, 1, 61, 56, 229, 14, 190, 98, 90, 243, 61, 7, 245, 10, 190, 96, 237, 106, 61, 68, 190, 45, 190, 107, 220, 202, 61, 27, 14, 195, 189, 55, 125, 37, 62, 59, 158, 39, 190, 181, 67, 6, 190, 207, 144, 123, 59, 104, 84, 44, 62, 66, 168, 17, 61, 93, 225, 41, 62, 102, 197, 13, 62, 19, 30, 42, 62, 226, 30, 17, 62, 28, 47, 66, 188, 73, 90, 22, 190, 22, 104, 81, 61, 118, 26, 240, 61, 131, 88, 134, 61, 219, 43, 10, 62, 63, 71, 141, 189, 91, 226, 214, 189, 237, 217, 138, 61, 64, 144, 95, 188, 98, 86, 247, 61, 12, 152, 16, 61, 171, 61, 58, 61, 159, 57, 44, 62, 122, 103, 175, 61, 155, 242, 21, 62, 156, 179, 155, 60, 88, 130, 45, 190, 185, 117, 84, 61, 18, 149, 168, 189, 39, 139, 192, 188, 177, 115, 225, 189, 252, 96, 19, 189, 154, 235, 34, 190, 150, 182, 206, 189, 146, 109, 84, 189, 105, 41, 16, 190, 80, 253, 35, 190, 227, 94, 231, 60, 168, 64, 9, 190, 228, 2, 213, 61, 115, 197, 242, 61, 150, 110, 34, 61, 109, 54, 95, 61, 139, 210, 30, 190, 15, 204, 140, 188, 184, 10, 57, 188, 11, 111, 31, 61, 38, 17, 126, 189, 252, 14, 252, 61, 50, 206, 228, 189, 161, 118, 166, 60, 203, 30, 42, 188, 206, 83, 18, 62, 30, 57, 148, 187, 8, 115, 50, 188, 64, 119, 172, 61, 247, 47, 151, 61, 84, 80, 218, 61, 41, 188, 21, 62, 75, 80, 130, 61, 210, 100, 152, 189, 184, 107, 221, 189, 246, 63, 41, 62, 199, 18, 50, 61, 185, 138, 228, 189, 0, 180, 125, 61, 60, 68, 27, 62, 155, 180, 31, 188, 96, 187, 8, 190, 173, 190, 39, 62, 154, 155, 184, 61, 126, 154, 128, 60, 51, 244, 197, 61, 15, 239, 120, 189, 174, 99, 223, 188, 76, 244, 221, 189, 161, 15, 243, 60, 65, 67, 38, 62, 198, 8, 35, 62, 127, 249, 160, 61, 227, 144, 45, 62, 62, 160, 49, 62, 225, 37, 56, 188, 179, 165, 214, 189, 69, 102, 223, 189, 117, 48, 39, 190, 177, 35, 40, 190, 31, 179, 26, 62, 97, 191, 247, 189, 172, 177, 9, 62, 102, 158, 144, 61, 182, 215, 112, 189, 153, 174, 121, 189, 76, 35, 173, 61, 15, 59, 138, 189, 243, 104, 32, 62, 250, 101, 183, 189, 224, 162, 41, 60, 17, 95, 138, 61, 248, 90, 129, 189, 167, 88, 36, 62, 200, 79, 47, 62, 244, 219, 41, 190, 192, 113, 20, 190, 32, 217, 190, 189, 246, 156, 27, 61, 190, 173, 182, 59, 240, 50, 193, 59, 164, 191, 201, 61, 208, 56, 2, 189, 29, 75, 239, 189, 47, 68, 126, 188, 249, 75, 187, 61, 208, 74, 38, 62, 148, 82, 130, 189, 100, 162, 164, 58, 16, 41, 210, 189, 226, 38, 105, 189, 224, 189, 245, 60, 215, 132, 178, 59, 163, 95, 210, 187, 109, 200, 140, 189, 244, 101, 146, 61, 98, 184, 73, 61, 87, 76, 54, 61, 211, 211, 204, 189, 124, 144, 7, 190, 123, 183, 242, 189, 219, 166, 95, 61, 66, 84, 247, 189, 226, 107, 6, 61, 104, 222, 198, 60, 131, 171, 186, 59, 89, 246, 139, 189, 168, 200, 180, 61, 220, 68, 205, 61, 208, 67, 8, 190, 101, 210, 81, 61, 35, 191, 91, 61, 172, 109, 243, 61, 252, 83, 4, 62, 243, 38, 8, 61, 52, 81, 96, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 237, 183, 189, 198, 47, 229, 61, 147, 220, 23, 62, 47, 83, 202, 61, 183, 1, 170, 60, 217, 235, 115, 188, 221, 225, 48, 190, 203, 39, 245, 189, 65, 105, 98, 61, 207, 35, 76, 189, 69, 241, 148, 189, 250, 77, 165, 61, 45, 218, 246, 61, 207, 82, 219, 189, 225, 165, 253, 61, 204, 128, 50, 62, 144, 239, 36, 190, 96, 5, 31, 190, 47, 12, 10, 62, 171, 127, 46, 61, 236, 203, 36, 62, 140, 76, 40, 187, 61, 134, 181, 188, 199, 240, 129, 61, 115, 56, 254, 188, 18, 150, 32, 189, 95, 77, 47, 61, 38, 90, 230, 189, 115, 111, 1, 62, 105, 56, 1, 62, 169, 198, 25, 190, 117, 100, 11, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 10, 192, 61, 190, 46, 32, 190, 115, 169, 138, 189, 212, 37, 29, 62, 70, 71, 221, 61, 173, 26, 165, 61, 64, 40, 242, 61, 204, 245, 76, 189, 0, 146, 197, 61, 4, 52, 219, 188, 35, 90, 172, 187, 86, 28, 77, 188, 62, 123, 43, 189, 219, 68, 130, 189, 183, 73, 179, 61, 219, 151, 30, 190, 60, 234, 18, 190, 124, 179, 192, 189, 75, 182, 12, 61, 244, 168, 223, 60, 23, 169, 50, 189, 164, 169, 52, 190, 179, 53, 168, 60, 8, 101, 23, 61, 114, 168, 164, 60, 6, 199, 50, 62, 132, 65, 25, 62, 13, 184, 4, 190, 242, 27, 174, 189, 136, 254, 255, 189, 98, 33, 96, 188, 40, 157, 219, 189, 99, 222, 210, 61, 190, 66, 16, 190, 156, 57, 134, 188, 85, 54, 24, 61, 106, 127, 36, 190, 140, 43, 48, 62, 86, 188, 10, 62, 116, 83, 32, 190, 254, 59, 91, 61, 22, 186, 13, 62, 55, 135, 23, 62, 131, 40, 26, 62, 208, 242, 44, 190, 170, 208, 124, 61, 47, 30, 49, 61, 193, 53, 18, 190, 143, 96, 39, 62, 87, 159, 135, 61, 114, 173, 167, 59, 5, 236, 183, 61, 118, 222, 51, 61, 251, 16, 44, 190, 142, 138, 56, 61, 62, 113, 181, 189, 108, 16, 28, 62, 142, 232, 56, 55, 158, 75, 44, 190, 221, 193, 50, 62, 160, 191, 48, 62, 94, 116, 170, 61, 23, 44, 44, 190, 111, 16, 153, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 48, 10, 62, 251, 209, 19, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {180, 8, 119, 63, 170, 92, 177, 61, 7, 90, 139, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {234, 106, 7, 61, 211, 200, 86, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0028/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}