// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 134, 19, 190, 182, 151, 97, 63, 236, 239, 215, 190, 8, 86, 202, 189, 100, 113, 41, 190, 71, 159, 0, 63, 122, 150, 213, 190, 27, 190, 68, 191, 43, 210, 216, 190, 99, 205, 112, 191, 217, 0, 213, 189, 27, 4, 176, 189, 32, 240, 59, 190, 82, 115, 56, 191, 231, 59, 109, 63, 244, 83, 74, 62, 135, 191, 62, 191, 26, 125, 56, 63, 64, 208, 137, 190, 151, 110, 205, 62, 154, 254, 219, 62, 203, 183, 90, 62, 4, 142, 174, 190, 231, 225, 231, 190, 46, 239, 80, 61, 81, 90, 184, 190, 147, 245, 96, 62, 189, 40, 145, 61, 24, 30, 202, 62, 157, 215, 195, 190, 109, 123, 189, 59, 49, 142, 134, 63, 18, 43, 174, 62, 115, 118, 191, 190, 131, 53, 11, 191, 155, 169, 146, 62, 78, 56, 170, 62, 144, 135, 94, 191, 27, 104, 2, 63, 125, 217, 16, 63, 117, 108, 159, 190, 136, 174, 240, 62, 103, 178, 18, 191, 20, 249, 131, 190, 123, 30, 213, 62, 71, 121, 140, 190, 64, 27, 153, 63, 207, 25, 28, 191, 250, 178, 106, 190, 129, 140, 251, 62, 169, 12, 180, 189, 18, 215, 242, 190, 3, 255, 201, 190, 247, 243, 95, 190, 219, 167, 85, 58, 39, 96, 34, 190, 147, 244, 18, 189, 49, 38, 16, 190, 88, 32, 111, 191, 47, 155, 246, 60, 204, 76, 15, 62, 72, 235, 54, 62, 151, 102, 53, 63, 154, 45, 151, 190, 159, 55, 159, 190, 211, 14, 5, 191, 66, 79, 31, 63, 220, 114, 78, 63, 152, 113, 160, 62, 66, 71, 99, 63, 116, 98, 5, 191, 33, 224, 30, 62, 159, 77, 212, 189, 89, 188, 22, 63, 33, 41, 46, 191, 78, 78, 116, 61, 253, 40, 32, 191, 34, 142, 178, 190, 72, 218, 110, 189, 194, 103, 115, 190, 94, 128, 77, 63, 98, 174, 83, 62, 1, 148, 82, 63, 247, 116, 242, 61, 90, 186, 0, 63, 162, 172, 10, 191, 52, 37, 110, 190, 221, 230, 8, 191, 60, 127, 6, 63, 160, 116, 175, 61, 139, 38, 117, 63, 4, 48, 72, 191, 69, 142, 8, 191, 179, 233, 85, 62, 169, 166, 178, 190, 14, 95, 26, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 178, 214, 189, 95, 235, 176, 189, 226, 158, 142, 62, 151, 228, 154, 190, 33, 51, 64, 190, 141, 26, 68, 190, 136, 71, 160, 61, 8, 128, 9, 191, 189, 216, 187, 59, 216, 215, 55, 62, 147, 41, 217, 190, 163, 78, 249, 62, 159, 27, 237, 62, 41, 140, 189, 62, 55, 71, 14, 191, 129, 69, 151, 189, 204, 101, 51, 62, 140, 59, 2, 62, 116, 88, 9, 191, 96, 25, 85, 190, 75, 156, 25, 191, 27, 109, 87, 190, 37, 64, 227, 62, 175, 164, 130, 188, 67, 173, 15, 63, 148, 172, 136, 62, 167, 143, 128, 187, 1, 151, 1, 189, 70, 97, 9, 191, 114, 182, 248, 62, 170, 22, 87, 62, 242, 185, 46, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 164, 230, 189, 238, 69, 161, 61, 192, 28, 230, 61, 169, 80, 87, 189, 172, 144, 187, 61, 100, 117, 225, 189, 55, 252, 194, 189, 42, 119, 42, 188, 8, 106, 160, 189, 19, 70, 71, 190, 218, 5, 155, 186, 83, 163, 25, 190, 155, 199, 149, 61, 53, 111, 9, 190, 241, 108, 147, 189, 100, 110, 225, 188, 175, 120, 170, 61, 174, 242, 48, 190, 247, 202, 42, 189, 88, 94, 136, 189, 158, 44, 241, 189, 39, 214, 29, 189, 193, 14, 190, 61, 66, 79, 96, 61, 179, 131, 164, 61, 250, 210, 235, 189, 92, 226, 181, 189, 107, 237, 2, 61, 112, 224, 11, 62, 138, 196, 89, 190, 77, 50, 200, 189, 175, 86, 226, 189, 15, 231, 175, 190, 8, 221, 131, 189, 21, 201, 209, 61, 199, 227, 6, 190, 251, 118, 94, 190, 215, 36, 216, 189, 134, 176, 248, 189, 1, 34, 165, 61, 183, 22, 224, 189, 129, 46, 209, 61, 216, 152, 12, 60, 60, 226, 2, 60, 181, 1, 133, 190, 224, 160, 198, 61, 247, 87, 129, 190, 143, 131, 135, 62, 88, 21, 168, 61, 27, 37, 188, 189, 168, 181, 3, 190, 222, 135, 151, 190, 49, 190, 79, 189, 178, 50, 60, 190, 213, 174, 88, 62, 172, 244, 251, 189, 228, 99, 26, 62, 2, 144, 190, 188, 43, 39, 115, 190, 104, 245, 80, 62, 112, 227, 227, 189, 202, 135, 88, 58, 173, 108, 158, 189, 186, 152, 36, 61, 30, 170, 174, 190, 109, 78, 48, 187, 102, 226, 106, 189, 73, 194, 134, 61, 216, 131, 213, 61, 66, 45, 119, 62, 217, 214, 121, 189, 30, 195, 140, 189, 245, 122, 86, 189, 132, 156, 3, 62, 225, 104, 182, 187, 23, 134, 107, 61, 160, 55, 162, 61, 244, 177, 86, 62, 231, 11, 31, 190, 9, 229, 101, 62, 57, 49, 23, 189, 23, 237, 247, 61, 105, 62, 244, 189, 240, 141, 56, 190, 203, 161, 253, 61, 14, 234, 18, 190, 195, 16, 176, 59, 136, 248, 183, 190, 210, 51, 206, 61, 119, 219, 221, 61, 68, 64, 249, 189, 223, 71, 239, 187, 127, 18, 122, 190, 39, 146, 183, 61, 207, 150, 48, 190, 66, 206, 77, 189, 119, 243, 108, 61, 17, 72, 149, 60, 59, 152, 54, 190, 134, 38, 202, 61, 123, 230, 163, 61, 53, 128, 41, 190, 167, 134, 41, 190, 132, 33, 26, 61, 155, 56, 226, 189, 154, 158, 9, 62, 64, 132, 244, 189, 154, 145, 249, 61, 214, 84, 210, 186, 108, 122, 147, 61, 201, 140, 3, 60, 246, 173, 160, 189, 216, 216, 13, 60, 165, 128, 35, 190, 182, 190, 43, 62, 27, 63, 14, 189, 29, 23, 157, 189, 111, 144, 199, 61, 95, 26, 54, 190, 51, 164, 59, 190, 174, 186, 147, 189, 41, 79, 60, 190, 153, 137, 199, 189, 138, 130, 17, 190, 2, 98, 187, 61, 201, 122, 131, 61, 234, 101, 239, 61, 74, 165, 215, 189, 12, 122, 141, 189, 104, 178, 131, 62, 111, 250, 226, 188, 93, 179, 141, 189, 23, 245, 150, 61, 23, 237, 101, 190, 106, 0, 183, 189, 176, 41, 19, 189, 144, 146, 54, 62, 228, 46, 18, 190, 18, 155, 128, 190, 73, 198, 33, 62, 118, 76, 167, 62, 19, 214, 239, 189, 135, 222, 93, 189, 5, 209, 100, 190, 36, 43, 169, 189, 18, 8, 1, 190, 44, 225, 229, 189, 125, 65, 76, 61, 199, 195, 140, 190, 61, 98, 53, 61, 213, 110, 139, 60, 165, 249, 110, 62, 68, 200, 182, 61, 248, 252, 76, 62, 113, 136, 252, 61, 161, 234, 189, 190, 42, 74, 150, 190, 193, 43, 143, 190, 168, 250, 87, 62, 190, 75, 31, 62, 121, 180, 92, 62, 59, 131, 254, 189, 157, 56, 188, 58, 235, 150, 86, 190, 142, 86, 205, 190, 96, 23, 155, 190, 75, 106, 140, 190, 148, 169, 62, 62, 117, 57, 71, 60, 95, 217, 251, 60, 174, 194, 53, 61, 69, 245, 4, 190, 214, 29, 139, 61, 67, 101, 100, 189, 222, 0, 133, 190, 224, 235, 152, 189, 16, 186, 173, 190, 214, 66, 228, 189, 58, 14, 30, 190, 50, 52, 183, 189, 87, 97, 114, 189, 255, 104, 58, 60, 98, 167, 131, 190, 88, 86, 209, 62, 151, 176, 233, 189, 34, 252, 131, 62, 185, 194, 120, 190, 110, 125, 180, 190, 4, 225, 63, 62, 98, 16, 78, 191, 36, 246, 185, 62, 108, 20, 128, 190, 22, 219, 75, 188, 226, 9, 14, 190, 19, 245, 23, 189, 145, 116, 161, 61, 223, 235, 8, 62, 70, 131, 37, 190, 100, 225, 85, 62, 210, 2, 26, 62, 129, 201, 115, 61, 157, 3, 131, 190, 55, 45, 114, 190, 19, 248, 52, 62, 148, 34, 24, 61, 205, 212, 160, 189, 56, 197, 164, 61, 60, 16, 225, 189, 93, 35, 182, 189, 153, 223, 169, 61, 141, 244, 19, 189, 182, 57, 81, 59, 132, 175, 89, 190, 136, 210, 179, 189, 237, 228, 121, 189, 253, 21, 29, 63, 248, 44, 20, 190, 249, 109, 179, 57, 204, 233, 47, 61, 12, 198, 17, 190, 99, 71, 5, 190, 4, 7, 226, 187, 208, 93, 160, 62, 191, 217, 40, 61, 160, 168, 134, 190, 247, 57, 35, 190, 23, 240, 57, 62, 246, 92, 157, 61, 23, 176, 62, 188, 23, 67, 65, 188, 155, 211, 28, 61, 123, 186, 66, 190, 195, 92, 76, 190, 140, 45, 241, 61, 48, 225, 56, 190, 132, 106, 252, 189, 251, 180, 166, 188, 164, 196, 128, 61, 49, 156, 162, 189, 46, 15, 170, 60, 14, 156, 241, 188, 206, 109, 106, 61, 159, 69, 13, 62, 203, 136, 187, 188, 40, 229, 108, 61, 81, 86, 24, 190, 37, 183, 145, 60, 150, 48, 163, 62, 233, 63, 107, 62, 137, 115, 185, 189, 14, 132, 34, 190, 9, 39, 227, 187, 36, 33, 3, 190, 67, 196, 26, 190, 108, 215, 44, 62, 15, 2, 170, 59, 84, 193, 4, 190, 105, 161, 6, 62, 201, 58, 42, 190, 221, 210, 43, 62, 78, 254, 133, 61, 113, 82, 188, 189, 14, 233, 213, 189, 9, 231, 239, 189, 138, 6, 80, 190, 103, 77, 53, 190, 233, 122, 54, 61, 29, 145, 44, 188, 215, 23, 56, 190, 122, 242, 129, 60, 56, 153, 191, 61, 39, 128, 148, 61, 38, 187, 26, 62, 249, 236, 230, 189, 229, 90, 49, 190, 127, 237, 29, 190, 221, 34, 190, 59, 50, 254, 80, 189, 104, 206, 85, 187, 24, 76, 121, 190, 13, 3, 13, 189, 124, 242, 17, 62, 225, 67, 133, 60, 199, 158, 169, 188, 53, 99, 1, 62, 142, 49, 222, 189, 231, 178, 64, 190, 237, 139, 248, 61, 29, 203, 171, 190, 48, 213, 98, 191, 156, 70, 50, 61, 193, 127, 186, 62, 66, 28, 242, 190, 255, 194, 248, 186, 175, 96, 184, 189, 244, 251, 33, 189, 23, 243, 78, 190, 172, 203, 114, 190, 37, 239, 140, 189, 255, 5, 40, 62, 43, 196, 216, 189, 225, 195, 139, 190, 38, 209, 193, 190, 176, 101, 45, 62, 156, 91, 115, 62, 213, 169, 77, 62, 28, 107, 41, 190, 29, 249, 155, 190, 254, 163, 21, 190, 46, 196, 145, 189, 92, 245, 191, 190, 119, 156, 249, 60, 177, 60, 147, 62, 218, 99, 35, 61, 20, 88, 70, 191, 238, 170, 6, 190, 90, 186, 135, 190, 39, 12, 249, 60, 10, 143, 142, 190, 192, 84, 5, 191, 181, 168, 140, 189, 102, 12, 227, 60, 210, 182, 38, 190, 127, 89, 19, 190, 135, 14, 32, 190, 85, 210, 252, 189, 42, 123, 15, 190, 190, 246, 81, 61, 222, 26, 145, 189, 151, 247, 44, 189, 0, 8, 25, 190, 8, 72, 147, 189, 229, 39, 3, 62, 241, 97, 234, 189, 56, 163, 15, 190, 229, 184, 43, 189, 63, 201, 18, 60, 233, 102, 27, 189, 126, 126, 29, 62, 22, 5, 11, 62, 196, 6, 181, 189, 113, 150, 247, 60, 236, 164, 197, 189, 12, 32, 2, 62, 245, 214, 117, 189, 152, 180, 113, 189, 62, 232, 134, 189, 103, 144, 21, 190, 71, 194, 177, 189, 194, 132, 202, 188, 71, 178, 141, 189, 53, 30, 240, 185, 38, 21, 165, 186, 119, 52, 70, 62, 172, 211, 117, 62, 40, 54, 158, 190, 241, 204, 35, 62, 238, 233, 84, 189, 33, 133, 236, 188, 245, 34, 77, 62, 79, 221, 118, 62, 4, 183, 35, 61, 204, 167, 28, 60, 98, 249, 51, 62, 165, 122, 69, 62, 183, 112, 85, 61, 58, 73, 108, 62, 209, 12, 225, 188, 82, 135, 182, 190, 54, 73, 161, 61, 180, 180, 50, 61, 94, 109, 136, 62, 241, 96, 41, 190, 4, 14, 19, 190, 151, 7, 45, 190, 222, 138, 160, 190, 87, 115, 205, 190, 244, 188, 156, 62, 161, 3, 255, 60, 42, 1, 181, 189, 27, 196, 75, 62, 233, 223, 35, 190, 125, 245, 28, 61, 29, 159, 14, 62, 210, 111, 77, 190, 52, 204, 221, 60, 102, 31, 84, 61, 8, 203, 136, 62, 106, 230, 163, 60, 202, 236, 17, 62, 42, 76, 53, 62, 33, 236, 65, 61, 120, 157, 190, 189, 105, 233, 106, 62, 3, 138, 188, 189, 77, 199, 109, 189, 40, 239, 182, 60, 70, 209, 186, 189, 110, 5, 188, 61, 129, 186, 2, 190, 166, 248, 24, 190, 211, 18, 36, 188, 98, 88, 136, 61, 175, 151, 44, 190, 38, 237, 38, 189, 158, 179, 39, 61, 253, 48, 195, 61, 251, 117, 94, 189, 7, 246, 142, 62, 117, 25, 243, 188, 167, 114, 148, 189, 53, 159, 29, 190, 255, 172, 177, 190, 24, 29, 145, 61, 38, 210, 193, 61, 76, 202, 94, 61, 237, 210, 28, 62, 79, 27, 52, 62, 209, 19, 34, 190, 234, 124, 196, 190, 92, 174, 143, 61, 219, 161, 19, 189, 96, 50, 185, 189, 233, 164, 242, 189, 170, 251, 36, 190, 228, 240, 222, 61, 204, 21, 236, 61, 243, 204, 79, 190, 209, 5, 108, 190, 171, 138, 32, 61, 100, 133, 69, 62, 153, 81, 85, 189, 75, 45, 144, 61, 190, 33, 83, 190, 115, 75, 183, 61, 251, 220, 205, 190, 158, 63, 167, 187, 197, 129, 76, 190, 186, 75, 98, 62, 231, 190, 13, 191, 12, 36, 77, 61, 178, 187, 215, 189, 60, 225, 39, 62, 2, 108, 155, 62, 30, 193, 141, 190, 70, 3, 165, 61, 215, 250, 77, 62, 181, 81, 144, 60, 239, 177, 101, 61, 192, 26, 161, 61, 158, 90, 254, 61, 176, 202, 124, 62, 229, 148, 128, 188, 112, 140, 125, 190, 93, 10, 238, 60, 106, 72, 136, 189, 5, 160, 8, 62, 148, 247, 68, 190, 182, 5, 151, 190, 109, 253, 128, 61, 55, 251, 25, 60, 212, 55, 20, 61, 141, 166, 96, 189, 23, 148, 134, 60, 62, 147, 1, 190, 179, 127, 9, 62, 31, 252, 233, 60, 120, 15, 138, 189, 115, 177, 152, 189, 248, 91, 52, 189, 1, 212, 131, 189, 239, 119, 152, 62, 107, 71, 46, 62, 55, 86, 0, 62, 176, 135, 13, 62, 230, 110, 122, 190, 206, 40, 126, 189, 4, 4, 223, 61, 226, 160, 157, 61, 98, 138, 25, 62, 133, 148, 181, 190, 119, 248, 22, 62, 12, 121, 243, 61, 92, 225, 185, 189, 187, 187, 251, 61, 39, 3, 154, 61, 122, 126, 191, 61, 191, 193, 108, 189, 42, 226, 167, 189, 251, 174, 1, 62, 203, 171, 124, 61, 122, 131, 196, 189, 23, 109, 112, 60, 41, 113, 204, 189, 116, 227, 195, 189, 8, 178, 65, 61, 105, 63, 48, 62, 154, 110, 42, 61, 144, 207, 214, 60, 141, 94, 142, 190, 23, 205, 19, 190, 101, 250, 104, 60, 196, 167, 194, 61, 135, 138, 207, 190, 23, 252, 241, 61, 244, 87, 188, 186, 70, 213, 228, 61, 220, 145, 223, 58, 139, 175, 163, 190, 222, 224, 95, 62, 14, 202, 11, 190, 219, 11, 240, 61, 169, 250, 130, 190, 250, 66, 132, 191, 62, 88, 9, 62, 159, 34, 132, 62, 112, 81, 32, 191, 113, 219, 75, 189, 245, 9, 17, 189, 21, 24, 69, 59, 153, 28, 131, 190, 244, 249, 192, 190, 250, 108, 155, 190, 235, 31, 34, 62, 233, 22, 170, 190, 190, 3, 46, 190, 240, 59, 221, 190, 28, 157, 74, 190, 102, 21, 173, 62, 184, 83, 23, 62, 105, 12, 191, 61, 50, 42, 50, 190, 171, 168, 41, 190, 74, 29, 12, 188, 109, 76, 223, 190, 214, 241, 147, 62, 127, 66, 195, 61, 139, 134, 30, 62, 153, 101, 39, 191, 28, 29, 40, 190, 63, 243, 19, 189, 35, 171, 182, 62, 152, 2, 187, 189, 232, 57, 45, 191, 165, 211, 192, 189, 19, 45, 131, 61, 15, 126, 139, 189, 169, 143, 98, 61, 73, 155, 25, 62, 150, 81, 0, 189, 109, 23, 175, 189, 77, 74, 97, 189, 4, 184, 235, 61, 69, 166, 21, 62, 125, 16, 153, 61, 180, 208, 58, 189, 245, 183, 76, 189, 49, 209, 219, 60, 163, 222, 24, 190, 216, 213, 215, 61, 59, 30, 38, 189, 174, 15, 191, 60, 203, 78, 210, 189, 188, 88, 23, 62, 180, 94, 144, 186, 69, 100, 2, 190, 88, 207, 145, 189, 199, 246, 46, 190, 203, 130, 13, 190, 134, 213, 13, 190, 156, 156, 14, 190, 245, 233, 51, 190, 53, 221, 131, 189, 3, 229, 160, 61, 139, 190, 8, 190, 204, 235, 32, 189, 69, 227, 221, 187, 64, 116, 200, 61, 137, 4, 232, 189, 254, 204, 245, 62, 246, 38, 24, 190, 196, 125, 175, 189, 234, 11, 231, 61, 177, 203, 128, 188, 24, 173, 108, 190, 136, 119, 118, 191, 120, 117, 57, 190, 22, 132, 77, 59, 112, 162, 214, 189, 31, 209, 189, 190, 7, 237, 90, 62, 100, 22, 171, 191, 53, 238, 58, 61, 96, 222, 207, 61, 21, 162, 135, 61, 50, 205, 254, 60, 168, 152, 97, 188, 102, 215, 251, 190, 125, 16, 183, 60, 66, 94, 202, 190, 40, 5, 195, 190, 38, 111, 26, 191, 175, 4, 9, 62, 129, 83, 105, 190, 85, 44, 3, 190, 0, 19, 160, 62, 131, 44, 108, 189, 99, 62, 152, 190, 195, 192, 173, 62, 163, 95, 11, 62, 213, 243, 52, 190, 62, 187, 90, 189, 251, 219, 70, 62, 162, 110, 207, 190, 28, 119, 87, 60, 76, 102, 130, 62, 6, 96, 203, 62, 128, 127, 136, 189, 253, 168, 178, 190, 85, 44, 195, 62, 233, 25, 159, 62, 202, 127, 170, 189, 251, 70, 97, 62, 253, 149, 138, 190, 20, 33, 114, 190, 1, 9, 2, 61, 107, 129, 130, 189, 98, 91, 165, 188, 25, 28, 0, 191, 142, 69, 77, 189, 244, 96, 119, 189, 109, 150, 188, 62, 120, 231, 9, 60, 49, 239, 41, 61, 114, 107, 198, 61, 56, 47, 10, 191, 60, 14, 150, 60, 49, 134, 93, 190, 63, 149, 151, 62, 48, 228, 79, 189, 54, 247, 87, 190, 18, 204, 3, 191, 125, 15, 178, 61, 103, 57, 38, 62, 73, 240, 49, 191, 36, 92, 41, 189, 86, 98, 67, 190, 32, 56, 53, 190, 194, 146, 193, 190, 198, 221, 147, 61, 172, 197, 126, 62, 83, 209, 193, 189, 25, 155, 215, 190, 103, 230, 141, 62, 179, 155, 22, 191, 225, 165, 17, 62, 55, 131, 98, 61, 114, 175, 213, 59, 78, 60, 130, 60, 99, 142, 170, 190, 159, 35, 3, 190, 65, 147, 4, 190, 198, 116, 164, 62, 87, 161, 12, 190, 223, 145, 54, 62, 142, 96, 235, 61, 59, 218, 204, 190, 25, 114, 130, 62, 131, 168, 115, 190, 50, 68, 40, 62, 81, 192, 144, 190, 124, 12, 238, 189, 113, 136, 121, 190, 214, 251, 175, 61, 220, 1, 117, 61, 94, 97, 207, 189, 249, 90, 30, 62, 116, 244, 165, 61, 204, 82, 190, 188, 96, 53, 39, 189, 222, 49, 101, 189, 162, 248, 134, 60, 45, 140, 7, 189, 203, 86, 155, 62, 106, 152, 199, 59, 25, 172, 183, 189, 247, 202, 1, 61, 127, 83, 94, 62, 94, 42, 182, 189, 241, 174, 40, 62, 160, 94, 48, 60, 227, 194, 71, 190, 7, 60, 224, 189, 255, 144, 163, 61, 199, 99, 174, 61, 100, 138, 32, 190, 46, 193, 149, 56, 110, 239, 43, 189, 181, 151, 97, 189, 18, 28, 189, 61, 47, 208, 74, 190, 180, 109, 201, 61, 121, 22, 38, 62, 201, 81, 229, 189, 178, 89, 241, 59, 6, 23, 191, 189, 13, 112, 161, 190, 92, 62, 158, 190, 38, 139, 36, 189, 142, 37, 182, 188, 7, 182, 144, 190, 168, 209, 203, 188, 33, 70, 121, 189, 63, 0, 237, 60, 82, 111, 138, 190, 53, 131, 36, 190, 35, 225, 208, 61, 191, 98, 47, 62, 195, 229, 13, 62, 198, 102, 35, 60, 21, 248, 52, 62, 51, 24, 128, 189, 152, 175, 139, 61, 246, 99, 125, 61, 76, 136, 73, 190, 27, 203, 10, 188, 110, 123, 197, 62, 218, 101, 210, 189, 106, 251, 39, 62, 134, 73, 127, 190, 3, 19, 105, 190, 161, 96, 43, 62, 128, 0, 219, 190, 81, 150, 153, 189, 105, 220, 18, 62, 206, 225, 161, 189, 25, 92, 130, 62, 137, 170, 11, 62, 127, 19, 12, 190, 179, 241, 91, 62, 199, 248, 50, 186, 207, 9, 186, 188, 72, 199, 141, 61, 248, 95, 138, 61, 248, 188, 180, 62, 73, 53, 254, 190, 17, 141, 53, 189, 176, 237, 19, 62, 17, 235, 204, 61, 91, 54, 75, 61, 4, 113, 212, 189, 206, 36, 118, 191, 29, 71, 38, 187, 66, 97, 21, 190, 135, 69, 200, 61, 226, 83, 33, 188, 160, 133, 148, 190, 135, 231, 194, 189, 86, 168, 73, 188, 3, 102, 20, 63, 249, 51, 46, 190, 252, 184, 40, 62, 138, 225, 75, 62, 115, 186, 171, 189, 136, 18, 68, 188, 233, 72, 153, 189, 185, 195, 171, 62, 185, 36, 136, 188, 48, 94, 150, 61, 29, 126, 115, 62, 94, 171, 2, 190, 60, 139, 212, 62, 185, 97, 236, 61, 63, 73, 210, 190, 26, 82, 213, 60, 151, 46, 151, 62, 176, 224, 9, 62, 244, 51, 143, 191, 216, 237, 151, 190, 14, 199, 161, 62, 89, 106, 132, 62, 78, 45, 132, 190, 74, 215, 205, 62, 35, 163, 180, 191, 11, 55, 43, 62, 75, 150, 165, 189, 174, 187, 1, 190, 123, 216, 171, 62, 49, 124, 138, 190, 161, 108, 190, 190, 137, 201, 12, 190, 246, 213, 1, 190, 155, 231, 150, 190, 15, 246, 233, 190, 141, 58, 105, 61, 227, 198, 252, 190, 250, 134, 9, 189, 229, 59, 98, 62, 127, 105, 246, 60, 172, 5, 32, 190, 249, 232, 193, 61, 14, 185, 80, 188, 82, 13, 17, 62, 248, 237, 157, 189, 8, 142, 145, 61, 182, 241, 30, 190, 188, 251, 216, 61, 217, 36, 41, 190, 247, 52, 149, 189, 181, 108, 240, 189, 65, 88, 1, 62, 171, 25, 17, 190, 115, 251, 243, 187, 90, 168, 140, 60, 4, 67, 161, 61, 64, 250, 82, 61, 243, 219, 29, 190, 165, 152, 239, 189, 239, 55, 22, 190, 121, 107, 7, 62, 109, 97, 8, 190, 148, 165, 162, 189, 22, 215, 212, 189, 169, 131, 3, 190, 177, 136, 229, 189, 223, 255, 85, 61, 116, 168, 3, 190, 152, 46, 132, 59, 7, 149, 173, 189, 213, 151, 46, 189, 72, 141, 212, 189, 93, 8, 238, 61, 97, 249, 51, 190, 249, 9, 18, 61, 48, 63, 29, 189, 116, 45, 41, 190, 197, 122, 177, 189, 128, 182, 21, 62, 136, 89, 96, 61, 237, 92, 182, 189, 76, 47, 129, 60, 198, 120, 162, 61, 26, 1, 41, 62, 122, 228, 199, 189, 92, 234, 33, 190, 231, 33, 140, 189, 61, 55, 141, 189, 71, 6, 45, 61, 232, 132, 6, 190, 87, 248, 144, 61, 146, 247, 136, 61, 12, 200, 162, 61, 255, 108, 185, 189, 228, 199, 111, 188, 113, 126, 32, 190, 43, 108, 123, 189, 24, 10, 92, 188, 44, 196, 93, 189, 237, 138, 168, 189, 72, 192, 84, 189, 152, 229, 76, 189, 79, 222, 54, 190, 136, 219, 17, 61, 17, 184, 192, 189, 249, 89, 46, 190, 24, 248, 247, 188, 91, 12, 237, 188, 240, 85, 105, 62, 149, 32, 157, 189, 190, 204, 125, 189, 113, 48, 207, 60, 66, 102, 183, 61, 255, 128, 71, 190, 254, 238, 135, 190, 237, 81, 25, 62, 70, 49, 45, 190, 122, 143, 146, 189, 132, 225, 87, 190, 90, 153, 96, 189, 70, 151, 80, 189, 174, 90, 128, 62, 175, 202, 57, 189, 181, 67, 6, 190, 170, 129, 28, 61, 165, 246, 96, 62, 167, 100, 90, 61, 37, 70, 18, 62, 3, 142, 171, 189, 242, 83, 94, 62, 20, 175, 33, 62, 176, 194, 20, 190, 216, 148, 190, 189, 81, 249, 47, 62, 129, 82, 65, 62, 117, 181, 81, 189, 253, 164, 48, 61, 116, 185, 222, 190, 164, 250, 126, 191, 142, 55, 12, 62, 13, 51, 70, 62, 157, 147, 4, 191, 253, 80, 192, 188, 115, 216, 226, 189, 52, 240, 169, 188, 150, 232, 149, 190, 22, 11, 71, 61, 107, 60, 100, 189, 55, 69, 216, 189, 53, 67, 88, 190, 5, 83, 1, 190, 251, 227, 245, 190, 156, 225, 3, 61, 8, 163, 59, 62, 102, 155, 49, 189, 150, 182, 206, 189, 199, 52, 170, 190, 186, 114, 159, 190, 180, 235, 106, 190, 143, 244, 106, 61, 173, 102, 137, 190, 133, 253, 147, 62, 193, 26, 1, 62, 180, 37, 28, 191, 37, 165, 39, 62, 11, 226, 56, 191, 214, 184, 18, 62, 82, 66, 13, 190, 172, 162, 205, 190, 223, 21, 173, 190, 179, 158, 193, 61, 234, 225, 62, 190, 57, 199, 66, 190, 161, 82, 41, 189, 122, 75, 128, 62, 120, 34, 38, 60, 240, 6, 156, 189, 179, 208, 99, 189, 164, 193, 188, 61, 230, 164, 71, 62, 189, 86, 8, 62, 160, 215, 200, 187, 86, 29, 109, 189, 175, 227, 125, 189, 184, 80, 145, 62, 214, 115, 179, 59, 7, 61, 18, 190, 0, 180, 125, 61, 10, 121, 7, 60, 4, 91, 164, 61, 70, 206, 94, 190, 176, 159, 32, 62, 68, 157, 169, 190, 40, 247, 230, 60, 41, 221, 217, 61, 209, 102, 146, 189, 181, 199, 50, 61, 222, 76, 108, 190, 79, 228, 230, 60, 178, 80, 131, 61, 235, 37, 26, 62, 117, 158, 222, 190, 244, 18, 37, 191, 146, 172, 136, 62, 122, 53, 46, 62, 99, 145, 65, 191, 51, 97, 37, 190, 103, 249, 117, 190, 116, 208, 126, 190, 63, 10, 223, 189, 230, 219, 140, 190, 44, 6, 182, 60, 33, 42, 94, 62, 25, 145, 114, 190, 205, 121, 248, 189, 88, 240, 218, 190, 238, 21, 215, 189, 124, 109, 24, 62, 252, 133, 185, 60, 224, 162, 41, 60, 91, 118, 201, 61, 96, 170, 1, 190, 149, 22, 156, 61, 52, 24, 120, 188, 124, 98, 42, 190, 166, 159, 133, 189, 149, 239, 103, 189, 114, 112, 0, 191, 76, 249, 20, 190, 48, 115, 0, 190, 205, 245, 30, 62, 255, 237, 194, 189, 146, 21, 231, 190, 208, 23, 11, 189, 154, 163, 147, 61, 91, 192, 186, 61, 191, 103, 46, 190, 57, 212, 144, 188, 172, 209, 234, 189, 235, 57, 139, 189, 182, 180, 130, 60, 61, 172, 174, 189, 22, 45, 235, 187, 152, 194, 156, 189, 222, 170, 124, 189, 72, 30, 108, 188, 177, 173, 188, 60, 205, 150, 225, 189, 232, 138, 48, 190, 92, 231, 73, 190, 209, 7, 154, 188, 66, 84, 247, 189, 220, 238, 154, 188, 15, 138, 120, 60, 251, 34, 22, 189, 218, 111, 142, 189, 35, 196, 22, 62, 100, 121, 19, 61, 120, 60, 52, 190, 101, 46, 32, 61, 111, 173, 21, 61, 149, 200, 169, 62, 242, 190, 229, 61, 245, 73, 61, 60, 189, 61, 10, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 112, 0, 190, 50, 240, 46, 62, 135, 176, 85, 62, 151, 56, 103, 61, 10, 249, 105, 62, 128, 153, 45, 60, 161, 68, 89, 189, 147, 46, 66, 61, 114, 142, 63, 189, 63, 206, 13, 61, 69, 241, 148, 189, 103, 77, 142, 187, 103, 194, 171, 62, 240, 130, 24, 190, 11, 120, 68, 62, 210, 61, 142, 62, 167, 73, 44, 190, 96, 5, 31, 190, 20, 136, 21, 62, 141, 60, 71, 62, 154, 197, 140, 62, 142, 180, 5, 62, 94, 122, 132, 61, 43, 97, 181, 62, 165, 1, 131, 61, 18, 150, 32, 189, 12, 110, 32, 61, 170, 39, 43, 190, 98, 213, 129, 62, 18, 237, 224, 60, 216, 17, 73, 187, 152, 83, 127, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 235, 112, 61, 97, 47, 130, 190, 181, 247, 181, 189, 9, 5, 16, 62, 157, 249, 150, 62, 249, 21, 221, 62, 80, 43, 137, 62, 9, 35, 15, 189, 92, 221, 180, 61, 228, 50, 39, 191, 35, 90, 172, 187, 193, 241, 136, 190, 208, 167, 17, 55, 23, 76, 160, 190, 147, 128, 187, 61, 240, 123, 248, 189, 220, 179, 21, 191, 124, 179, 192, 189, 20, 122, 49, 63, 182, 123, 237, 62, 238, 218, 13, 191, 142, 164, 183, 189, 68, 36, 183, 190, 10, 133, 220, 62, 180, 107, 102, 63, 6, 199, 50, 62, 91, 176, 9, 62, 101, 199, 254, 189, 70, 201, 96, 191, 88, 94, 49, 190, 211, 94, 28, 191, 54, 190, 6, 190, 212, 197, 200, 61, 43, 24, 104, 190, 151, 118, 132, 189, 64, 46, 12, 60, 67, 202, 131, 190, 18, 196, 3, 62, 1, 74, 62, 62, 16, 54, 132, 190, 242, 183, 71, 61, 47, 75, 168, 62, 55, 135, 23, 62, 112, 97, 49, 62, 7, 43, 143, 190, 150, 181, 157, 61, 110, 186, 177, 189, 159, 237, 85, 190, 31, 215, 193, 61, 87, 159, 135, 61, 132, 223, 72, 189, 40, 250, 83, 61, 12, 156, 205, 189, 177, 108, 124, 190, 37, 184, 65, 190, 19, 25, 66, 190, 164, 211, 67, 62, 142, 232, 56, 55, 68, 0, 52, 190, 42, 61, 99, 62, 82, 59, 22, 62, 21, 166, 170, 60, 62, 90, 175, 190, 181, 210, 147, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 75, 94, 62, 158, 193, 184, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {114, 172, 62, 64, 73, 152, 223, 189, 125, 149, 29, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {21, 234, 125, 64, 104, 19, 134, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0028/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}