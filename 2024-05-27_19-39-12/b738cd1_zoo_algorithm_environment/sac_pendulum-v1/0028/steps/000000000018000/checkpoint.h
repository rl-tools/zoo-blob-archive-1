// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {210, 76, 246, 190, 64, 226, 59, 63, 36, 61, 241, 190, 94, 79, 135, 190, 210, 65, 186, 63, 146, 232, 166, 62, 155, 115, 32, 191, 240, 65, 142, 191, 201, 72, 181, 190, 30, 53, 162, 191, 0, 71, 9, 190, 179, 184, 76, 59, 33, 238, 27, 62, 216, 77, 188, 190, 239, 85, 73, 63, 247, 14, 31, 63, 196, 245, 44, 191, 227, 11, 43, 63, 246, 128, 5, 191, 201, 55, 195, 63, 235, 236, 161, 62, 140, 190, 241, 62, 144, 154, 18, 191, 60, 115, 175, 190, 95, 89, 217, 187, 254, 193, 121, 190, 209, 152, 105, 62, 83, 126, 41, 190, 130, 62, 74, 191, 201, 136, 135, 190, 237, 36, 137, 62, 158, 45, 150, 63, 243, 61, 217, 62, 131, 51, 10, 191, 10, 221, 19, 191, 177, 33, 120, 62, 230, 183, 182, 62, 255, 29, 109, 191, 85, 201, 212, 62, 44, 217, 34, 63, 144, 171, 74, 189, 54, 120, 232, 62, 118, 16, 25, 191, 211, 108, 212, 62, 28, 158, 184, 62, 81, 201, 229, 189, 188, 127, 118, 63, 118, 165, 215, 190, 23, 204, 159, 190, 61, 235, 95, 63, 7, 10, 189, 189, 93, 128, 88, 191, 216, 113, 23, 191, 137, 231, 133, 190, 219, 167, 85, 58, 39, 96, 34, 190, 147, 244, 18, 189, 228, 5, 145, 190, 91, 202, 133, 191, 136, 164, 167, 187, 137, 254, 5, 63, 31, 191, 176, 62, 163, 192, 41, 63, 161, 170, 221, 190, 129, 239, 175, 191, 91, 186, 226, 190, 242, 53, 34, 63, 173, 183, 133, 63, 43, 246, 105, 62, 174, 109, 77, 63, 84, 22, 28, 191, 108, 62, 16, 62, 15, 224, 131, 190, 62, 245, 14, 63, 252, 174, 21, 191, 3, 134, 133, 61, 221, 4, 191, 191, 69, 237, 187, 190, 229, 5, 193, 189, 39, 200, 50, 63, 188, 43, 11, 63, 83, 181, 242, 62, 145, 163, 84, 63, 111, 126, 78, 62, 25, 243, 85, 63, 179, 130, 34, 191, 142, 137, 148, 190, 15, 248, 51, 191, 48, 22, 75, 63, 136, 187, 57, 62, 223, 155, 134, 63, 99, 187, 138, 191, 112, 135, 183, 190, 94, 223, 192, 62, 179, 11, 244, 60, 148, 144, 2, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 110, 162, 189, 186, 62, 35, 190, 233, 2, 173, 62, 131, 216, 223, 61, 95, 18, 235, 190, 134, 161, 211, 190, 57, 152, 193, 189, 81, 236, 79, 191, 214, 13, 92, 188, 154, 120, 200, 60, 251, 96, 14, 191, 152, 86, 13, 63, 101, 222, 250, 62, 241, 151, 150, 62, 18, 84, 52, 191, 28, 65, 160, 190, 153, 51, 185, 61, 211, 139, 227, 62, 116, 88, 9, 191, 91, 165, 153, 190, 40, 76, 88, 191, 31, 186, 92, 189, 136, 113, 216, 62, 236, 255, 58, 189, 41, 79, 38, 63, 179, 130, 216, 62, 19, 62, 191, 190, 249, 103, 253, 189, 73, 27, 30, 191, 92, 125, 1, 63, 53, 41, 62, 62, 226, 168, 8, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 164, 230, 189, 238, 69, 161, 61, 192, 28, 230, 61, 169, 80, 87, 189, 172, 144, 187, 61, 100, 117, 225, 189, 55, 252, 194, 189, 42, 119, 42, 188, 8, 106, 160, 189, 19, 70, 71, 190, 218, 5, 155, 186, 83, 163, 25, 190, 155, 199, 149, 61, 53, 111, 9, 190, 241, 108, 147, 189, 100, 110, 225, 188, 175, 120, 170, 61, 174, 242, 48, 190, 247, 202, 42, 189, 88, 94, 136, 189, 158, 44, 241, 189, 39, 214, 29, 189, 193, 14, 190, 61, 66, 79, 96, 61, 179, 131, 164, 61, 250, 210, 235, 189, 92, 226, 181, 189, 107, 237, 2, 61, 112, 224, 11, 62, 138, 196, 89, 190, 77, 50, 200, 189, 175, 86, 226, 189, 71, 166, 192, 190, 67, 14, 217, 186, 252, 24, 177, 188, 188, 26, 162, 190, 221, 160, 195, 190, 114, 142, 169, 189, 209, 203, 179, 190, 212, 3, 132, 189, 246, 247, 97, 190, 200, 80, 135, 189, 225, 38, 94, 61, 193, 36, 14, 189, 189, 85, 237, 189, 145, 61, 132, 62, 29, 148, 92, 191, 205, 42, 38, 62, 247, 178, 226, 61, 112, 72, 38, 190, 168, 181, 3, 190, 26, 185, 39, 190, 59, 221, 179, 190, 113, 87, 148, 190, 241, 111, 169, 62, 199, 61, 156, 61, 52, 89, 180, 61, 209, 143, 190, 189, 226, 255, 136, 190, 220, 178, 146, 62, 65, 47, 170, 190, 58, 15, 245, 61, 219, 53, 89, 188, 30, 139, 25, 62, 3, 149, 63, 190, 62, 101, 147, 190, 199, 47, 22, 189, 34, 232, 204, 189, 66, 100, 20, 61, 2, 151, 28, 62, 135, 92, 82, 191, 95, 147, 244, 188, 207, 102, 244, 189, 8, 31, 54, 62, 195, 219, 149, 61, 21, 249, 238, 189, 252, 140, 209, 187, 130, 0, 48, 62, 210, 47, 231, 189, 55, 39, 159, 62, 138, 55, 165, 60, 85, 137, 53, 62, 105, 62, 244, 189, 14, 200, 220, 190, 107, 180, 169, 61, 254, 8, 187, 189, 241, 193, 144, 189, 238, 131, 80, 190, 102, 61, 75, 62, 224, 223, 179, 190, 88, 127, 22, 190, 153, 151, 47, 60, 242, 192, 111, 191, 105, 197, 77, 189, 65, 101, 52, 190, 31, 97, 234, 189, 204, 29, 85, 61, 249, 156, 44, 192, 87, 50, 69, 191, 192, 14, 70, 62, 179, 217, 183, 190, 71, 3, 154, 191, 22, 54, 44, 190, 148, 104, 129, 189, 68, 48, 31, 191, 106, 6, 111, 190, 175, 243, 188, 191, 107, 209, 60, 189, 189, 98, 132, 190, 141, 220, 77, 62, 121, 24, 139, 190, 198, 85, 173, 188, 15, 215, 254, 61, 171, 200, 28, 191, 182, 190, 43, 62, 251, 17, 84, 191, 197, 170, 13, 190, 26, 3, 157, 190, 24, 0, 145, 61, 170, 178, 131, 189, 43, 84, 225, 61, 111, 231, 18, 191, 226, 196, 126, 191, 70, 181, 152, 189, 73, 158, 230, 61, 167, 164, 150, 191, 56, 199, 112, 62, 142, 71, 8, 191, 169, 58, 148, 189, 112, 83, 53, 191, 161, 127, 10, 190, 55, 239, 137, 190, 133, 118, 100, 61, 42, 16, 92, 190, 176, 103, 170, 190, 46, 124, 206, 188, 115, 125, 102, 62, 253, 18, 17, 190, 253, 125, 157, 191, 111, 78, 137, 62, 104, 22, 194, 62, 49, 78, 224, 189, 119, 181, 133, 190, 196, 214, 54, 190, 140, 104, 11, 190, 44, 199, 168, 190, 44, 225, 229, 189, 29, 210, 119, 62, 242, 227, 186, 190, 33, 180, 240, 189, 83, 166, 6, 189, 50, 82, 101, 62, 36, 102, 14, 62, 194, 5, 149, 62, 173, 250, 215, 188, 204, 110, 42, 191, 13, 231, 193, 190, 135, 126, 45, 191, 146, 212, 133, 62, 177, 63, 207, 61, 37, 90, 154, 62, 51, 78, 24, 192, 152, 17, 116, 189, 83, 65, 51, 191, 215, 89, 58, 191, 78, 127, 61, 191, 165, 99, 107, 190, 94, 89, 180, 62, 66, 151, 92, 190, 203, 186, 154, 61, 189, 165, 229, 190, 69, 114, 190, 190, 2, 198, 163, 59, 68, 46, 103, 62, 222, 0, 133, 190, 126, 18, 136, 61, 68, 172, 130, 190, 64, 27, 114, 190, 58, 14, 30, 190, 130, 73, 248, 190, 208, 115, 138, 189, 254, 127, 131, 188, 144, 95, 109, 188, 90, 89, 16, 63, 229, 234, 170, 59, 21, 158, 57, 62, 84, 93, 24, 191, 83, 152, 133, 190, 115, 250, 145, 62, 181, 215, 203, 191, 202, 86, 218, 62, 169, 69, 102, 190, 20, 120, 228, 61, 86, 38, 115, 191, 83, 199, 5, 190, 23, 54, 3, 62, 61, 119, 182, 61, 163, 119, 64, 190, 172, 94, 12, 62, 212, 5, 184, 62, 95, 176, 198, 61, 70, 12, 73, 190, 235, 46, 130, 191, 168, 100, 129, 62, 41, 209, 220, 61, 39, 20, 4, 189, 195, 93, 40, 190, 81, 110, 30, 61, 138, 126, 89, 190, 78, 142, 0, 190, 141, 244, 19, 189, 147, 109, 154, 61, 138, 218, 175, 190, 162, 85, 151, 190, 64, 136, 222, 189, 109, 0, 52, 63, 159, 27, 107, 189, 223, 87, 48, 61, 116, 210, 225, 189, 252, 1, 222, 190, 176, 122, 65, 62, 232, 224, 253, 190, 54, 90, 217, 62, 66, 83, 98, 60, 54, 21, 70, 190, 18, 111, 5, 191, 83, 113, 126, 188, 60, 42, 133, 190, 151, 228, 27, 62, 204, 157, 118, 62, 88, 68, 138, 190, 81, 228, 16, 190, 24, 188, 222, 188, 240, 77, 121, 188, 91, 91, 71, 191, 141, 238, 167, 189, 55, 105, 94, 60, 173, 233, 47, 62, 97, 71, 8, 62, 116, 253, 237, 61, 180, 175, 36, 62, 12, 234, 16, 190, 159, 69, 13, 62, 221, 200, 141, 61, 234, 120, 134, 62, 10, 84, 87, 190, 79, 203, 250, 61, 191, 181, 235, 62, 230, 151, 178, 62, 185, 130, 35, 190, 87, 211, 206, 189, 187, 169, 78, 190, 9, 41, 232, 189, 254, 21, 193, 190, 38, 236, 153, 62, 217, 24, 198, 61, 158, 22, 2, 190, 71, 243, 217, 61, 10, 130, 42, 190, 139, 43, 36, 62, 73, 198, 33, 61, 62, 38, 237, 189, 241, 75, 6, 190, 9, 231, 239, 189, 112, 70, 100, 190, 152, 74, 53, 190, 210, 223, 95, 60, 100, 106, 17, 189, 154, 1, 79, 190, 158, 206, 253, 187, 180, 252, 133, 61, 16, 244, 152, 61, 167, 252, 16, 62, 92, 20, 238, 189, 229, 90, 49, 190, 104, 30, 27, 190, 16, 107, 182, 188, 50, 254, 80, 189, 27, 216, 213, 188, 193, 73, 111, 190, 101, 90, 1, 189, 124, 242, 17, 62, 247, 63, 48, 188, 182, 92, 48, 189, 53, 99, 1, 62, 176, 44, 9, 190, 231, 178, 64, 190, 121, 223, 197, 61, 117, 152, 198, 190, 122, 37, 10, 192, 200, 177, 129, 61, 116, 68, 150, 62, 205, 58, 11, 191, 164, 79, 213, 190, 152, 150, 1, 191, 103, 9, 98, 190, 139, 209, 126, 190, 140, 4, 107, 190, 16, 53, 207, 189, 254, 196, 99, 62, 123, 88, 24, 62, 52, 13, 61, 191, 225, 123, 178, 190, 2, 154, 5, 62, 235, 38, 41, 62, 88, 125, 78, 62, 28, 107, 41, 190, 168, 85, 45, 61, 254, 163, 21, 190, 216, 17, 88, 189, 166, 76, 11, 189, 21, 229, 61, 191, 89, 1, 137, 62, 142, 215, 173, 61, 163, 225, 1, 191, 199, 221, 205, 62, 237, 28, 114, 191, 183, 72, 8, 62, 104, 113, 136, 190, 134, 137, 24, 191, 181, 168, 140, 189, 102, 12, 227, 60, 210, 182, 38, 190, 127, 89, 19, 190, 135, 14, 32, 190, 85, 210, 252, 189, 42, 123, 15, 190, 190, 246, 81, 61, 222, 26, 145, 189, 151, 247, 44, 189, 0, 8, 25, 190, 8, 72, 147, 189, 229, 39, 3, 62, 241, 97, 234, 189, 56, 163, 15, 190, 229, 184, 43, 189, 63, 201, 18, 60, 233, 102, 27, 189, 126, 126, 29, 62, 22, 5, 11, 62, 196, 6, 181, 189, 113, 150, 247, 60, 236, 164, 197, 189, 12, 32, 2, 62, 245, 214, 117, 189, 152, 180, 113, 189, 62, 232, 134, 189, 103, 144, 21, 190, 71, 194, 177, 189, 194, 132, 202, 188, 71, 178, 141, 189, 53, 30, 240, 185, 76, 125, 163, 189, 212, 161, 164, 62, 125, 12, 221, 62, 121, 240, 195, 190, 34, 6, 53, 62, 206, 6, 141, 189, 226, 19, 189, 61, 110, 10, 210, 62, 148, 107, 128, 62, 198, 54, 162, 62, 162, 63, 71, 62, 9, 249, 130, 61, 212, 128, 250, 61, 56, 133, 3, 60, 120, 51, 224, 62, 196, 80, 29, 190, 233, 197, 133, 191, 190, 90, 144, 62, 180, 180, 50, 61, 108, 121, 6, 62, 76, 163, 219, 189, 50, 8, 199, 61, 78, 27, 72, 190, 23, 40, 108, 190, 61, 55, 194, 190, 114, 239, 199, 62, 22, 41, 193, 61, 243, 205, 136, 61, 108, 255, 250, 62, 171, 71, 124, 190, 63, 85, 98, 62, 40, 180, 7, 62, 137, 209, 98, 190, 21, 35, 143, 60, 151, 146, 161, 60, 6, 199, 193, 61, 204, 234, 130, 61, 206, 144, 95, 62, 38, 30, 130, 62, 243, 56, 211, 61, 183, 73, 82, 189, 27, 177, 91, 62, 190, 90, 56, 190, 161, 192, 211, 61, 137, 74, 219, 188, 2, 66, 19, 190, 188, 199, 161, 61, 7, 6, 204, 189, 222, 216, 4, 62, 10, 128, 182, 189, 98, 88, 136, 61, 242, 148, 138, 61, 48, 140, 182, 186, 193, 29, 92, 61, 169, 22, 155, 61, 129, 137, 90, 190, 134, 99, 164, 62, 185, 199, 163, 60, 161, 254, 15, 189, 4, 163, 154, 190, 143, 212, 130, 190, 188, 172, 242, 61, 110, 250, 84, 62, 211, 92, 17, 61, 252, 184, 200, 62, 227, 55, 225, 61, 60, 25, 167, 190, 148, 62, 121, 191, 223, 107, 27, 62, 225, 184, 230, 61, 200, 139, 166, 190, 133, 98, 42, 190, 98, 59, 56, 60, 142, 162, 43, 190, 200, 190, 78, 62, 215, 213, 136, 190, 67, 153, 101, 189, 195, 126, 62, 62, 24, 77, 157, 62, 191, 107, 229, 60, 71, 189, 129, 190, 73, 160, 77, 190, 115, 75, 183, 61, 234, 73, 174, 190, 163, 228, 151, 61, 196, 114, 136, 190, 242, 45, 181, 62, 182, 64, 34, 61, 162, 158, 5, 61, 25, 168, 9, 191, 107, 216, 91, 62, 69, 60, 227, 62, 129, 247, 9, 191, 238, 202, 97, 190, 115, 190, 46, 62, 51, 25, 236, 61, 226, 232, 191, 61, 83, 33, 181, 188, 9, 144, 9, 62, 52, 18, 191, 62, 164, 207, 130, 59, 68, 31, 105, 190, 39, 102, 247, 61, 129, 213, 205, 60, 20, 68, 36, 62, 214, 204, 56, 190, 51, 13, 26, 191, 118, 110, 118, 62, 56, 233, 12, 61, 226, 25, 20, 61, 80, 14, 193, 189, 52, 241, 10, 62, 128, 175, 7, 61, 24, 84, 25, 61, 31, 252, 233, 60, 95, 164, 147, 61, 251, 226, 222, 189, 214, 221, 166, 189, 76, 15, 249, 189, 121, 29, 12, 62, 127, 84, 96, 62, 173, 92, 77, 62, 239, 166, 204, 61, 45, 130, 7, 191, 80, 196, 198, 188, 46, 114, 41, 62, 80, 244, 135, 61, 77, 108, 14, 62, 46, 123, 147, 190, 154, 164, 154, 61, 89, 128, 96, 188, 30, 249, 155, 190, 21, 214, 6, 62, 5, 154, 8, 62, 129, 7, 117, 61, 34, 218, 126, 189, 192, 214, 47, 189, 73, 103, 10, 61, 76, 170, 119, 189, 14, 47, 223, 188, 236, 112, 198, 188, 106, 27, 4, 190, 116, 34, 233, 189, 78, 114, 217, 61, 236, 75, 223, 62, 126, 239, 115, 189, 144, 207, 214, 60, 205, 130, 136, 190, 88, 157, 19, 190, 122, 145, 116, 189, 25, 109, 234, 61, 48, 110, 137, 190, 228, 55, 88, 62, 91, 52, 96, 189, 65, 35, 220, 61, 39, 22, 140, 189, 198, 232, 0, 191, 135, 44, 73, 62, 215, 205, 29, 61, 53, 64, 162, 61, 174, 139, 41, 190, 138, 39, 8, 192, 120, 47, 25, 189, 182, 244, 36, 62, 182, 135, 203, 190, 19, 138, 68, 62, 117, 212, 6, 190, 17, 232, 159, 59, 158, 93, 74, 62, 119, 109, 62, 191, 154, 145, 171, 190, 216, 170, 169, 61, 201, 34, 141, 61, 74, 58, 72, 62, 129, 249, 24, 191, 170, 53, 58, 62, 114, 23, 121, 62, 127, 63, 34, 60, 105, 12, 191, 61, 187, 43, 182, 190, 171, 168, 41, 190, 120, 80, 172, 190, 241, 12, 152, 191, 254, 242, 122, 62, 117, 31, 218, 188, 34, 240, 31, 190, 17, 140, 22, 191, 193, 249, 98, 190, 70, 67, 156, 189, 74, 94, 129, 62, 164, 29, 40, 190, 83, 164, 54, 191, 165, 211, 192, 189, 19, 45, 131, 61, 15, 126, 139, 189, 169, 143, 98, 61, 73, 155, 25, 62, 150, 81, 0, 189, 109, 23, 175, 189, 77, 74, 97, 189, 4, 184, 235, 61, 69, 166, 21, 62, 125, 16, 153, 61, 180, 208, 58, 189, 245, 183, 76, 189, 49, 209, 219, 60, 163, 222, 24, 190, 216, 213, 215, 61, 59, 30, 38, 189, 174, 15, 191, 60, 203, 78, 210, 189, 188, 88, 23, 62, 180, 94, 144, 186, 69, 100, 2, 190, 88, 207, 145, 189, 199, 246, 46, 190, 203, 130, 13, 190, 134, 213, 13, 190, 156, 156, 14, 190, 245, 233, 51, 190, 53, 221, 131, 189, 3, 229, 160, 61, 139, 190, 8, 190, 204, 235, 32, 189, 233, 203, 101, 63, 238, 202, 9, 190, 162, 117, 190, 189, 28, 110, 241, 62, 78, 123, 133, 190, 237, 102, 8, 190, 230, 248, 12, 62, 175, 241, 141, 190, 146, 90, 129, 190, 126, 7, 163, 191, 111, 63, 50, 191, 179, 16, 118, 190, 62, 68, 133, 190, 238, 170, 33, 191, 20, 215, 30, 189, 127, 223, 237, 190, 104, 104, 129, 62, 217, 151, 31, 62, 21, 162, 135, 61, 238, 225, 237, 187, 201, 1, 29, 189, 176, 199, 7, 192, 234, 199, 225, 190, 66, 94, 202, 190, 181, 37, 13, 60, 130, 121, 223, 191, 222, 56, 47, 191, 75, 244, 27, 190, 116, 91, 184, 190, 94, 5, 225, 62, 218, 194, 0, 191, 161, 225, 241, 190, 123, 182, 12, 62, 207, 103, 249, 60, 194, 155, 90, 190, 127, 130, 20, 62, 181, 253, 98, 62, 18, 88, 191, 190, 172, 123, 222, 61, 214, 235, 108, 62, 116, 147, 235, 62, 80, 13, 54, 189, 81, 78, 61, 191, 94, 113, 8, 63, 121, 99, 199, 62, 125, 54, 0, 189, 65, 224, 155, 62, 166, 46, 208, 190, 158, 18, 252, 190, 44, 136, 149, 190, 107, 129, 130, 189, 215, 87, 161, 62, 0, 149, 10, 191, 235, 12, 115, 190, 184, 231, 191, 189, 80, 139, 137, 62, 44, 77, 184, 187, 224, 195, 241, 61, 242, 69, 28, 61, 11, 79, 87, 191, 227, 117, 230, 189, 79, 115, 113, 190, 31, 212, 170, 62, 62, 46, 53, 189, 142, 12, 51, 190, 118, 4, 162, 191, 117, 94, 99, 61, 71, 237, 34, 62, 77, 52, 209, 190, 80, 6, 123, 62, 240, 183, 209, 191, 218, 212, 174, 190, 44, 79, 183, 189, 253, 109, 120, 189, 124, 0, 192, 62, 62, 195, 11, 189, 18, 71, 48, 190, 31, 163, 185, 62, 75, 111, 242, 190, 35, 244, 43, 62, 140, 112, 54, 61, 39, 198, 209, 60, 78, 60, 130, 60, 208, 98, 161, 61, 231, 173, 175, 61, 102, 221, 62, 190, 187, 57, 173, 62, 148, 146, 254, 189, 135, 21, 57, 62, 77, 119, 213, 60, 126, 105, 198, 189, 217, 130, 171, 62, 220, 203, 74, 191, 130, 114, 8, 62, 189, 50, 128, 190, 236, 83, 236, 61, 223, 239, 144, 190, 155, 114, 69, 61, 88, 8, 78, 60, 171, 220, 162, 190, 108, 112, 48, 62, 36, 226, 22, 62, 251, 67, 77, 187, 213, 183, 26, 59, 174, 179, 180, 188, 41, 18, 149, 188, 10, 242, 0, 190, 94, 94, 213, 62, 223, 153, 88, 189, 208, 139, 30, 190, 9, 105, 235, 59, 151, 85, 91, 62, 20, 66, 5, 62, 35, 100, 187, 61, 160, 94, 48, 60, 64, 123, 192, 188, 146, 83, 194, 189, 204, 55, 207, 61, 90, 26, 155, 61, 152, 63, 92, 190, 221, 39, 127, 60, 93, 157, 254, 186, 194, 186, 34, 189, 104, 20, 92, 60, 189, 128, 191, 189, 61, 36, 197, 61, 17, 77, 148, 62, 245, 218, 25, 190, 70, 224, 45, 62, 40, 148, 103, 190, 97, 84, 5, 191, 185, 142, 155, 191, 234, 252, 12, 189, 18, 150, 32, 61, 162, 157, 31, 191, 111, 151, 58, 190, 113, 166, 150, 187, 145, 186, 87, 190, 163, 95, 147, 190, 51, 36, 73, 190, 78, 22, 130, 62, 85, 84, 175, 62, 121, 126, 176, 189, 19, 29, 176, 61, 66, 18, 244, 62, 134, 185, 53, 190, 152, 175, 139, 61, 217, 24, 65, 190, 67, 246, 73, 190, 9, 232, 11, 190, 169, 96, 15, 63, 74, 24, 247, 61, 246, 192, 62, 62, 186, 240, 50, 191, 139, 127, 9, 190, 14, 235, 155, 62, 139, 65, 192, 191, 29, 55, 172, 61, 111, 99, 104, 61, 91, 27, 143, 61, 63, 106, 2, 63, 137, 201, 139, 61, 241, 20, 9, 191, 135, 81, 94, 62, 186, 237, 205, 59, 179, 25, 4, 189, 107, 54, 38, 62, 164, 30, 19, 62, 203, 216, 165, 62, 50, 34, 2, 191, 151, 221, 87, 190, 217, 126, 45, 62, 116, 248, 82, 187, 168, 230, 231, 188, 51, 175, 22, 190, 223, 199, 24, 191, 119, 72, 211, 61, 121, 198, 130, 191, 135, 69, 200, 61, 173, 108, 143, 61, 182, 10, 153, 190, 197, 218, 72, 191, 162, 44, 3, 190, 183, 134, 157, 62, 69, 32, 222, 189, 42, 125, 232, 61, 87, 147, 43, 62, 18, 58, 179, 190, 225, 210, 19, 62, 30, 67, 149, 189, 27, 64, 172, 62, 170, 155, 129, 189, 10, 170, 107, 63, 33, 210, 103, 62, 134, 58, 144, 190, 243, 242, 172, 62, 50, 163, 202, 61, 240, 90, 218, 190, 105, 224, 22, 61, 202, 64, 139, 62, 104, 81, 188, 61, 7, 186, 196, 191, 166, 110, 204, 190, 121, 121, 162, 62, 182, 17, 146, 62, 208, 15, 75, 190, 215, 235, 143, 62, 97, 13, 7, 191, 74, 71, 38, 63, 44, 135, 253, 190, 174, 187, 1, 190, 239, 211, 34, 63, 151, 116, 155, 190, 44, 105, 185, 191, 211, 53, 129, 189, 100, 191, 227, 189, 131, 248, 84, 190, 131, 245, 121, 191, 18, 30, 70, 61, 157, 82, 37, 191, 234, 192, 51, 190, 10, 20, 175, 62, 220, 211, 42, 62, 125, 114, 230, 189, 249, 232, 193, 61, 14, 185, 80, 188, 82, 13, 17, 62, 248, 237, 157, 189, 8, 142, 145, 61, 182, 241, 30, 190, 188, 251, 216, 61, 217, 36, 41, 190, 247, 52, 149, 189, 181, 108, 240, 189, 65, 88, 1, 62, 171, 25, 17, 190, 115, 251, 243, 187, 90, 168, 140, 60, 4, 67, 161, 61, 64, 250, 82, 61, 243, 219, 29, 190, 165, 152, 239, 189, 239, 55, 22, 190, 121, 107, 7, 62, 109, 97, 8, 190, 148, 165, 162, 189, 22, 215, 212, 189, 169, 131, 3, 190, 177, 136, 229, 189, 223, 255, 85, 61, 116, 168, 3, 190, 152, 46, 132, 59, 7, 149, 173, 189, 213, 151, 46, 189, 72, 141, 212, 189, 93, 8, 238, 61, 97, 249, 51, 190, 249, 9, 18, 61, 48, 63, 29, 189, 116, 45, 41, 190, 197, 122, 177, 189, 128, 182, 21, 62, 136, 89, 96, 61, 237, 92, 182, 189, 76, 47, 129, 60, 198, 120, 162, 61, 26, 1, 41, 62, 122, 228, 199, 189, 92, 234, 33, 190, 231, 33, 140, 189, 61, 55, 141, 189, 71, 6, 45, 61, 232, 132, 6, 190, 87, 248, 144, 61, 146, 247, 136, 61, 12, 200, 162, 61, 255, 108, 185, 189, 228, 199, 111, 188, 113, 126, 32, 190, 43, 108, 123, 189, 24, 10, 92, 188, 44, 196, 93, 189, 237, 138, 168, 189, 72, 192, 84, 189, 152, 229, 76, 189, 79, 222, 54, 190, 136, 219, 17, 61, 17, 184, 192, 189, 130, 215, 198, 190, 213, 115, 138, 62, 131, 232, 254, 61, 234, 137, 187, 62, 97, 158, 85, 191, 57, 37, 118, 191, 229, 16, 76, 62, 229, 192, 114, 61, 101, 242, 217, 190, 0, 117, 6, 190, 10, 80, 191, 62, 65, 115, 64, 61, 208, 18, 47, 190, 17, 185, 167, 190, 216, 178, 53, 191, 221, 18, 178, 190, 255, 56, 110, 61, 59, 181, 197, 61, 181, 67, 6, 190, 221, 48, 227, 62, 236, 156, 55, 191, 193, 121, 122, 62, 184, 56, 69, 62, 199, 17, 247, 190, 235, 149, 152, 61, 225, 217, 152, 62, 40, 236, 44, 190, 208, 212, 73, 61, 223, 166, 233, 61, 119, 73, 166, 62, 176, 204, 186, 189, 141, 6, 153, 190, 239, 131, 198, 190, 125, 219, 30, 192, 219, 14, 23, 62, 248, 205, 85, 62, 83, 19, 216, 190, 133, 254, 164, 190, 163, 115, 56, 191, 142, 45, 38, 190, 235, 55, 139, 189, 189, 45, 15, 61, 41, 153, 25, 190, 172, 156, 179, 61, 17, 25, 240, 61, 178, 139, 16, 191, 34, 34, 209, 190, 80, 15, 155, 61, 27, 12, 79, 62, 138, 128, 0, 189, 150, 182, 206, 189, 98, 174, 110, 61, 9, 206, 157, 190, 39, 33, 128, 190, 141, 110, 79, 61, 209, 107, 26, 191, 227, 32, 169, 62, 30, 247, 49, 62, 60, 98, 133, 190, 112, 117, 91, 62, 152, 240, 184, 191, 175, 222, 82, 62, 142, 189, 196, 189, 182, 119, 197, 190, 174, 18, 119, 190, 64, 133, 4, 188, 111, 166, 27, 191, 238, 133, 22, 191, 217, 142, 19, 189, 18, 237, 124, 62, 103, 43, 88, 190, 198, 210, 27, 190, 42, 99, 100, 188, 189, 98, 135, 189, 184, 107, 71, 62, 167, 198, 11, 61, 133, 30, 165, 188, 147, 201, 166, 189, 226, 216, 205, 60, 69, 188, 213, 62, 56, 211, 96, 190, 71, 188, 161, 190, 0, 180, 125, 61, 253, 8, 148, 189, 144, 19, 182, 61, 99, 250, 34, 190, 219, 33, 23, 62, 190, 137, 64, 190, 141, 158, 62, 60, 206, 193, 148, 190, 77, 9, 177, 189, 123, 21, 236, 61, 170, 204, 203, 190, 223, 239, 112, 190, 188, 243, 122, 61, 197, 190, 244, 61, 113, 114, 32, 191, 216, 168, 197, 191, 108, 35, 204, 60, 12, 178, 161, 61, 152, 241, 197, 190, 206, 42, 194, 189, 86, 91, 114, 190, 208, 168, 81, 62, 222, 55, 99, 62, 134, 150, 20, 191, 31, 59, 127, 190, 102, 60, 24, 62, 147, 243, 126, 62, 57, 26, 153, 188, 62, 104, 18, 191, 84, 85, 87, 190, 244, 138, 120, 190, 51, 63, 64, 190, 224, 162, 41, 60, 82, 46, 210, 189, 9, 95, 37, 188, 0, 147, 143, 190, 69, 73, 86, 60, 109, 240, 231, 62, 245, 88, 175, 190, 239, 239, 210, 188, 8, 243, 223, 190, 116, 97, 133, 190, 79, 141, 5, 63, 134, 201, 147, 61, 169, 230, 130, 60, 189, 122, 159, 190, 208, 23, 11, 189, 154, 163, 147, 61, 91, 192, 186, 61, 191, 103, 46, 190, 57, 212, 144, 188, 172, 209, 234, 189, 235, 57, 139, 189, 182, 180, 130, 60, 61, 172, 174, 189, 22, 45, 235, 187, 152, 194, 156, 189, 222, 170, 124, 189, 72, 30, 108, 188, 177, 173, 188, 60, 205, 150, 225, 189, 232, 138, 48, 190, 92, 231, 73, 190, 209, 7, 154, 188, 66, 84, 247, 189, 220, 238, 154, 188, 15, 138, 120, 60, 251, 34, 22, 189, 218, 111, 142, 189, 35, 196, 22, 62, 100, 121, 19, 61, 120, 60, 52, 190, 101, 46, 32, 61, 111, 173, 21, 61, 149, 200, 169, 62, 242, 190, 229, 61, 245, 73, 61, 60, 189, 61, 10, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 112, 0, 190, 172, 151, 155, 62, 41, 58, 239, 61, 48, 105, 89, 62, 59, 221, 188, 62, 38, 73, 135, 60, 88, 118, 245, 58, 247, 97, 215, 61, 141, 132, 137, 189, 248, 180, 210, 61, 69, 241, 148, 189, 206, 67, 81, 190, 144, 9, 222, 62, 136, 154, 103, 190, 232, 140, 155, 62, 14, 235, 187, 62, 107, 107, 149, 190, 96, 5, 31, 190, 144, 208, 105, 62, 145, 6, 172, 62, 83, 228, 166, 62, 48, 163, 58, 62, 251, 159, 29, 62, 222, 168, 144, 62, 29, 75, 139, 62, 18, 150, 32, 189, 12, 110, 32, 61, 30, 142, 32, 190, 114, 105, 183, 62, 156, 191, 5, 190, 239, 226, 210, 188, 152, 83, 127, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 235, 112, 61, 123, 165, 155, 190, 12, 197, 61, 190, 96, 112, 231, 62, 127, 24, 30, 63, 199, 102, 43, 63, 139, 86, 5, 63, 241, 82, 226, 188, 226, 228, 81, 61, 201, 71, 130, 191, 35, 90, 172, 187, 216, 196, 196, 190, 158, 135, 73, 60, 151, 170, 233, 190, 19, 177, 10, 62, 147, 73, 193, 60, 125, 53, 102, 191, 124, 179, 192, 189, 184, 147, 199, 63, 112, 185, 55, 63, 1, 233, 38, 191, 71, 67, 37, 59, 138, 34, 70, 191, 159, 218, 82, 62, 170, 45, 146, 63, 6, 199, 50, 62, 91, 176, 9, 62, 62, 170, 27, 191, 94, 31, 196, 191, 26, 4, 158, 189, 15, 191, 81, 191, 54, 190, 6, 190, 212, 197, 200, 61, 83, 169, 20, 58, 86, 160, 253, 61, 143, 156, 100, 191, 182, 205, 160, 190, 77, 126, 170, 189, 196, 54, 169, 61, 15, 175, 15, 191, 135, 239, 244, 60, 93, 121, 165, 62, 55, 135, 23, 62, 45, 77, 38, 61, 90, 65, 161, 190, 132, 131, 54, 62, 189, 16, 210, 189, 121, 76, 112, 190, 147, 214, 54, 62, 87, 159, 135, 61, 42, 91, 14, 62, 39, 19, 2, 62, 81, 54, 245, 189, 208, 18, 153, 190, 162, 102, 19, 190, 197, 234, 174, 190, 2, 125, 173, 62, 142, 232, 56, 55, 68, 0, 52, 190, 18, 93, 77, 189, 110, 3, 16, 62, 208, 11, 196, 189, 18, 192, 60, 62, 181, 210, 147, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 155, 141, 62, 228, 84, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {96, 141, 81, 62, 18, 156, 147, 190, 176, 146, 13, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {150, 243, 142, 63, 208, 186, 141, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0028/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}