// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 254, 157, 62, 184, 242, 41, 63, 154, 204, 177, 190, 119, 209, 37, 190, 168, 222, 157, 190, 158, 36, 102, 62, 48, 164, 199, 190, 211, 218, 250, 190, 69, 219, 241, 190, 172, 120, 76, 191, 39, 184, 16, 190, 26, 49, 125, 189, 204, 38, 194, 190, 254, 56, 65, 191, 174, 124, 245, 62, 145, 2, 32, 63, 169, 224, 67, 191, 236, 126, 35, 63, 226, 106, 160, 190, 62, 138, 127, 62, 113, 158, 221, 62, 55, 68, 42, 61, 16, 103, 122, 190, 181, 154, 215, 190, 109, 191, 234, 189, 117, 183, 224, 190, 231, 15, 167, 61, 205, 103, 234, 61, 106, 87, 22, 63, 132, 252, 20, 60, 177, 149, 44, 190, 61, 206, 112, 63, 6, 133, 163, 62, 162, 195, 212, 190, 216, 79, 17, 191, 19, 4, 135, 62, 65, 168, 225, 61, 3, 215, 82, 191, 254, 14, 191, 62, 103, 194, 11, 63, 5, 92, 84, 190, 209, 4, 214, 62, 216, 104, 50, 191, 74, 65, 163, 190, 201, 7, 150, 62, 206, 215, 116, 190, 186, 194, 136, 63, 32, 54, 191, 190, 181, 73, 86, 190, 86, 166, 29, 63, 167, 213, 221, 188, 145, 43, 253, 190, 57, 214, 212, 190, 134, 28, 145, 190, 219, 167, 85, 58, 39, 96, 34, 190, 147, 244, 18, 189, 189, 41, 172, 190, 25, 150, 61, 191, 33, 245, 232, 59, 13, 45, 173, 62, 203, 65, 98, 189, 215, 213, 40, 63, 247, 255, 23, 190, 114, 79, 167, 190, 60, 196, 3, 191, 95, 3, 230, 62, 237, 196, 26, 63, 91, 111, 198, 62, 8, 56, 194, 62, 5, 4, 28, 191, 69, 47, 224, 188, 54, 163, 41, 190, 186, 130, 45, 63, 78, 191, 21, 191, 106, 249, 144, 61, 4, 53, 230, 190, 183, 136, 185, 190, 43, 146, 89, 190, 111, 2, 239, 190, 135, 86, 6, 63, 143, 154, 172, 60, 57, 232, 55, 63, 191, 165, 241, 61, 70, 174, 172, 62, 220, 86, 190, 190, 101, 34, 89, 190, 123, 230, 241, 190, 116, 108, 8, 63, 88, 197, 51, 62, 21, 206, 63, 63, 126, 15, 66, 191, 81, 175, 14, 191, 92, 192, 130, 62, 162, 203, 189, 190, 71, 219, 4, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {19, 65, 219, 190, 106, 116, 1, 189, 34, 48, 141, 62, 47, 172, 155, 190, 46, 201, 157, 186, 141, 210, 174, 190, 213, 91, 225, 61, 31, 12, 33, 191, 154, 55, 164, 61, 230, 230, 27, 62, 20, 212, 84, 190, 110, 214, 238, 62, 47, 9, 29, 63, 1, 136, 230, 62, 128, 241, 228, 190, 83, 160, 129, 189, 99, 183, 41, 62, 188, 74, 180, 61, 116, 88, 9, 191, 246, 43, 142, 189, 81, 107, 6, 191, 35, 154, 195, 190, 155, 239, 29, 63, 84, 59, 44, 190, 37, 2, 27, 63, 199, 107, 28, 62, 189, 3, 229, 61, 74, 238, 136, 61, 88, 81, 255, 190, 231, 192, 198, 62, 86, 0, 119, 62, 190, 220, 116, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 164, 230, 189, 238, 69, 161, 61, 192, 28, 230, 61, 169, 80, 87, 189, 172, 144, 187, 61, 100, 117, 225, 189, 55, 252, 194, 189, 42, 119, 42, 188, 8, 106, 160, 189, 19, 70, 71, 190, 218, 5, 155, 186, 83, 163, 25, 190, 155, 199, 149, 61, 53, 111, 9, 190, 241, 108, 147, 189, 100, 110, 225, 188, 175, 120, 170, 61, 174, 242, 48, 190, 247, 202, 42, 189, 88, 94, 136, 189, 158, 44, 241, 189, 39, 214, 29, 189, 193, 14, 190, 61, 66, 79, 96, 61, 179, 131, 164, 61, 250, 210, 235, 189, 92, 226, 181, 189, 107, 237, 2, 61, 112, 224, 11, 62, 138, 196, 89, 190, 77, 50, 200, 189, 175, 86, 226, 189, 93, 190, 129, 190, 157, 244, 232, 61, 14, 191, 210, 61, 182, 176, 241, 189, 82, 168, 163, 189, 128, 39, 120, 189, 55, 176, 117, 188, 130, 59, 198, 61, 166, 217, 191, 60, 144, 248, 10, 62, 119, 212, 129, 61, 99, 243, 165, 61, 23, 128, 45, 190, 79, 41, 214, 61, 146, 131, 12, 190, 153, 252, 149, 62, 211, 197, 34, 62, 26, 71, 193, 189, 168, 181, 3, 190, 105, 84, 82, 190, 155, 53, 32, 188, 53, 177, 37, 190, 92, 172, 85, 62, 43, 7, 38, 61, 23, 142, 48, 62, 38, 28, 23, 189, 150, 109, 180, 189, 48, 121, 86, 62, 241, 54, 19, 60, 235, 78, 197, 61, 176, 119, 132, 189, 103, 171, 196, 61, 254, 29, 134, 190, 58, 154, 21, 188, 71, 162, 180, 189, 148, 115, 148, 61, 143, 137, 200, 61, 206, 81, 129, 62, 187, 132, 133, 189, 234, 202, 22, 189, 4, 193, 84, 189, 158, 97, 0, 62, 162, 96, 39, 189, 2, 250, 174, 60, 193, 118, 233, 61, 243, 124, 120, 62, 176, 104, 138, 190, 166, 254, 108, 62, 107, 74, 107, 61, 203, 78, 179, 61, 105, 62, 244, 189, 173, 177, 62, 190, 58, 86, 202, 61, 219, 11, 234, 189, 19, 184, 104, 61, 226, 168, 199, 61, 12, 128, 235, 61, 84, 233, 112, 61, 238, 153, 222, 189, 16, 143, 234, 60, 27, 92, 27, 61, 162, 9, 205, 61, 156, 26, 69, 190, 99, 223, 31, 189, 102, 125, 196, 61, 252, 122, 175, 60, 108, 207, 32, 190, 143, 191, 211, 61, 230, 181, 177, 61, 91, 105, 41, 190, 61, 20, 35, 190, 244, 50, 123, 61, 80, 38, 222, 189, 119, 38, 35, 62, 64, 132, 244, 189, 205, 131, 6, 62, 91, 69, 136, 59, 128, 69, 151, 61, 6, 152, 64, 60, 126, 170, 47, 189, 242, 94, 2, 61, 28, 225, 15, 190, 182, 190, 43, 62, 252, 201, 6, 189, 29, 23, 157, 189, 185, 183, 252, 61, 241, 210, 52, 190, 177, 210, 57, 190, 156, 220, 31, 189, 88, 207, 35, 190, 147, 55, 186, 189, 164, 51, 10, 190, 206, 231, 204, 61, 145, 221, 164, 61, 175, 97, 17, 62, 214, 95, 208, 189, 181, 95, 143, 188, 15, 30, 143, 62, 56, 71, 31, 61, 12, 207, 214, 189, 145, 124, 187, 61, 253, 208, 58, 190, 122, 187, 192, 189, 210, 90, 7, 189, 167, 224, 95, 62, 48, 184, 7, 61, 119, 64, 45, 190, 157, 105, 63, 62, 147, 16, 167, 62, 189, 162, 219, 189, 154, 2, 49, 60, 179, 121, 155, 189, 198, 170, 175, 189, 110, 142, 23, 189, 44, 225, 229, 189, 186, 15, 247, 61, 76, 122, 89, 190, 217, 67, 125, 61, 102, 90, 92, 189, 57, 8, 2, 189, 28, 65, 214, 61, 184, 182, 109, 62, 134, 145, 253, 61, 69, 39, 139, 190, 228, 243, 148, 190, 58, 214, 127, 190, 87, 210, 20, 62, 37, 185, 48, 62, 51, 4, 155, 62, 191, 202, 68, 61, 103, 252, 61, 61, 152, 123, 238, 189, 52, 228, 97, 190, 251, 181, 106, 190, 131, 229, 135, 190, 194, 37, 71, 62, 44, 95, 25, 62, 201, 126, 224, 61, 43, 242, 71, 61, 153, 71, 24, 188, 162, 149, 55, 62, 195, 208, 156, 189, 102, 72, 43, 190, 44, 46, 101, 188, 134, 150, 118, 190, 76, 44, 48, 189, 58, 14, 30, 190, 42, 12, 56, 189, 87, 97, 114, 189, 167, 88, 48, 61, 121, 178, 27, 190, 76, 193, 134, 62, 31, 216, 179, 189, 66, 150, 143, 62, 156, 33, 200, 189, 77, 129, 100, 189, 140, 214, 188, 61, 112, 53, 4, 191, 26, 40, 173, 62, 127, 101, 202, 189, 247, 184, 20, 60, 136, 242, 21, 190, 208, 109, 101, 61, 163, 244, 55, 61, 64, 9, 243, 61, 52, 145, 24, 190, 186, 199, 70, 62, 112, 122, 33, 62, 97, 224, 66, 61, 165, 87, 72, 190, 195, 241, 171, 189, 96, 43, 46, 62, 59, 38, 250, 187, 25, 175, 173, 189, 87, 181, 0, 62, 204, 26, 222, 60, 56, 194, 23, 190, 244, 249, 60, 62, 141, 244, 19, 189, 82, 255, 3, 61, 71, 161, 12, 190, 248, 223, 42, 189, 136, 136, 182, 189, 238, 235, 178, 61, 112, 11, 8, 190, 100, 211, 159, 61, 195, 20, 155, 60, 78, 180, 117, 59, 0, 173, 132, 189, 170, 192, 136, 59, 21, 50, 116, 62, 211, 200, 57, 61, 6, 210, 82, 190, 16, 213, 209, 188, 211, 129, 59, 62, 90, 200, 202, 60, 128, 211, 224, 61, 55, 157, 122, 61, 193, 157, 34, 61, 190, 217, 36, 190, 164, 137, 142, 189, 233, 213, 213, 61, 199, 245, 59, 190, 252, 1, 178, 189, 118, 130, 179, 61, 200, 123, 177, 61, 215, 15, 174, 59, 82, 90, 139, 60, 18, 40, 112, 189, 173, 22, 132, 61, 159, 69, 13, 62, 235, 16, 229, 61, 124, 166, 154, 61, 214, 90, 231, 189, 130, 99, 20, 190, 215, 6, 135, 62, 184, 226, 62, 62, 192, 138, 210, 189, 102, 178, 58, 189, 200, 196, 252, 189, 253, 129, 214, 188, 63, 134, 57, 190, 180, 197, 236, 61, 62, 87, 161, 61, 84, 193, 4, 190, 50, 123, 11, 62, 201, 58, 42, 190, 221, 210, 43, 62, 18, 213, 140, 61, 207, 163, 181, 189, 157, 246, 209, 189, 9, 231, 239, 189, 119, 167, 74, 190, 103, 77, 53, 190, 243, 72, 65, 61, 121, 79, 6, 188, 196, 224, 53, 190, 225, 115, 148, 60, 129, 59, 197, 61, 39, 128, 148, 61, 215, 7, 27, 62, 249, 236, 230, 189, 229, 90, 49, 190, 127, 237, 29, 190, 138, 59, 19, 60, 50, 254, 80, 189, 125, 22, 222, 186, 24, 76, 121, 190, 13, 3, 13, 189, 124, 242, 17, 62, 111, 54, 160, 60, 25, 218, 158, 188, 53, 99, 1, 62, 13, 223, 218, 189, 231, 178, 64, 190, 225, 239, 252, 61, 214, 150, 156, 190, 57, 30, 178, 190, 109, 69, 16, 189, 147, 76, 124, 62, 205, 56, 213, 189, 255, 194, 248, 186, 156, 250, 106, 59, 79, 35, 235, 189, 98, 133, 22, 189, 149, 16, 80, 190, 110, 174, 165, 61, 167, 223, 253, 61, 215, 187, 188, 188, 233, 126, 120, 190, 51, 201, 191, 189, 22, 34, 171, 61, 254, 205, 114, 62, 171, 36, 250, 61, 28, 107, 41, 190, 157, 164, 49, 190, 102, 79, 21, 190, 159, 120, 245, 189, 202, 114, 14, 190, 205, 126, 69, 61, 185, 28, 108, 62, 173, 24, 206, 188, 211, 187, 204, 190, 149, 252, 250, 61, 196, 45, 244, 189, 217, 212, 7, 61, 95, 29, 146, 190, 170, 108, 31, 190, 181, 168, 140, 189, 102, 12, 227, 60, 210, 182, 38, 190, 127, 89, 19, 190, 135, 14, 32, 190, 85, 210, 252, 189, 42, 123, 15, 190, 190, 246, 81, 61, 222, 26, 145, 189, 151, 247, 44, 189, 0, 8, 25, 190, 8, 72, 147, 189, 229, 39, 3, 62, 241, 97, 234, 189, 56, 163, 15, 190, 229, 184, 43, 189, 63, 201, 18, 60, 233, 102, 27, 189, 126, 126, 29, 62, 22, 5, 11, 62, 196, 6, 181, 189, 113, 150, 247, 60, 236, 164, 197, 189, 12, 32, 2, 62, 245, 214, 117, 189, 152, 180, 113, 189, 62, 232, 134, 189, 103, 144, 21, 190, 71, 194, 177, 189, 194, 132, 202, 188, 71, 178, 141, 189, 53, 30, 240, 185, 71, 88, 97, 188, 15, 56, 177, 61, 72, 32, 16, 62, 219, 114, 58, 190, 222, 195, 117, 61, 69, 22, 90, 189, 157, 106, 169, 189, 144, 29, 16, 62, 65, 32, 0, 62, 153, 118, 93, 61, 4, 96, 169, 188, 253, 73, 176, 61, 255, 33, 17, 62, 185, 152, 163, 61, 229, 195, 45, 61, 128, 113, 224, 60, 212, 220, 190, 189, 197, 132, 130, 189, 180, 180, 50, 61, 92, 41, 180, 61, 19, 170, 52, 190, 30, 98, 66, 190, 245, 5, 34, 189, 107, 97, 216, 189, 134, 234, 62, 190, 134, 38, 48, 62, 188, 142, 45, 189, 146, 20, 21, 60, 239, 49, 177, 61, 115, 56, 63, 190, 255, 235, 168, 189, 207, 187, 237, 61, 84, 96, 12, 190, 248, 50, 202, 60, 173, 235, 49, 61, 111, 153, 38, 62, 35, 32, 88, 60, 156, 247, 53, 62, 63, 195, 32, 62, 139, 204, 159, 61, 83, 28, 131, 189, 63, 139, 115, 62, 153, 74, 62, 189, 47, 90, 232, 189, 234, 82, 76, 61, 210, 204, 45, 189, 186, 62, 48, 60, 10, 151, 209, 189, 35, 149, 14, 190, 244, 201, 40, 188, 98, 88, 136, 61, 61, 206, 172, 189, 55, 118, 225, 188, 208, 145, 163, 61, 77, 34, 222, 61, 88, 209, 100, 61, 117, 143, 119, 62, 209, 98, 83, 189, 233, 192, 133, 189, 182, 165, 170, 189, 218, 216, 133, 190, 98, 182, 192, 60, 145, 66, 235, 60, 83, 254, 149, 61, 139, 225, 87, 61, 147, 41, 43, 62, 41, 20, 3, 189, 77, 142, 198, 189, 210, 26, 144, 61, 62, 36, 12, 189, 51, 13, 37, 190, 23, 198, 162, 189, 201, 213, 174, 189, 150, 231, 147, 189, 116, 233, 22, 189, 246, 126, 36, 190, 56, 32, 28, 190, 1, 9, 68, 61, 156, 193, 83, 61, 191, 39, 16, 190, 137, 112, 90, 189, 231, 170, 113, 189, 115, 75, 183, 61, 180, 103, 29, 190, 174, 199, 181, 189, 182, 30, 19, 190, 100, 116, 157, 61, 235, 53, 162, 189, 202, 102, 117, 189, 112, 188, 237, 188, 107, 149, 31, 62, 106, 40, 12, 62, 161, 31, 24, 190, 157, 105, 187, 188, 57, 206, 39, 62, 146, 111, 214, 60, 253, 154, 111, 60, 207, 200, 142, 61, 214, 19, 47, 62, 37, 255, 72, 62, 234, 115, 248, 188, 84, 126, 125, 190, 180, 180, 177, 60, 16, 212, 53, 189, 76, 142, 9, 62, 122, 64, 76, 190, 68, 52, 45, 190, 26, 186, 111, 61, 13, 232, 213, 187, 71, 227, 29, 61, 219, 38, 14, 189, 11, 92, 19, 61, 20, 211, 83, 190, 69, 155, 74, 62, 31, 252, 233, 60, 173, 14, 31, 58, 212, 109, 44, 189, 192, 127, 84, 188, 222, 76, 158, 189, 110, 171, 86, 61, 118, 82, 255, 61, 142, 223, 40, 62, 234, 197, 247, 61, 62, 163, 193, 189, 85, 24, 208, 189, 11, 132, 162, 61, 57, 48, 17, 61, 251, 63, 25, 62, 210, 36, 143, 190, 171, 137, 6, 62, 116, 247, 207, 61, 174, 77, 253, 189, 163, 157, 215, 61, 42, 86, 191, 61, 249, 30, 163, 61, 84, 111, 4, 189, 177, 144, 161, 189, 128, 109, 18, 62, 59, 179, 78, 61, 46, 102, 21, 190, 194, 131, 92, 61, 241, 79, 67, 189, 3, 14, 112, 190, 216, 51, 136, 61, 141, 113, 114, 62, 170, 188, 143, 60, 144, 207, 214, 60, 48, 176, 111, 190, 89, 143, 35, 190, 132, 104, 54, 61, 204, 253, 16, 62, 76, 113, 34, 62, 190, 253, 1, 62, 57, 200, 247, 188, 171, 242, 243, 61, 124, 46, 71, 61, 158, 81, 65, 190, 244, 246, 80, 62, 104, 214, 28, 190, 237, 191, 7, 62, 66, 173, 147, 189, 106, 132, 159, 190, 31, 220, 192, 61, 2, 19, 73, 62, 109, 88, 251, 189, 113, 219, 75, 189, 127, 53, 5, 61, 205, 136, 21, 61, 88, 248, 208, 189, 173, 88, 92, 190, 98, 82, 146, 189, 123, 162, 82, 61, 54, 205, 138, 190, 106, 64, 13, 189, 19, 37, 103, 189, 178, 5, 8, 190, 61, 189, 188, 62, 31, 46, 209, 61, 105, 12, 191, 61, 245, 169, 53, 190, 207, 167, 33, 190, 17, 91, 48, 61, 224, 63, 136, 189, 190, 145, 126, 188, 90, 97, 209, 61, 32, 197, 6, 62, 248, 66, 46, 190, 139, 16, 34, 62, 69, 219, 2, 61, 251, 11, 156, 62, 239, 192, 113, 189, 18, 91, 21, 61, 165, 211, 192, 189, 19, 45, 131, 61, 15, 126, 139, 189, 169, 143, 98, 61, 73, 155, 25, 62, 150, 81, 0, 189, 109, 23, 175, 189, 77, 74, 97, 189, 4, 184, 235, 61, 69, 166, 21, 62, 125, 16, 153, 61, 180, 208, 58, 189, 245, 183, 76, 189, 49, 209, 219, 60, 163, 222, 24, 190, 216, 213, 215, 61, 59, 30, 38, 189, 174, 15, 191, 60, 203, 78, 210, 189, 188, 88, 23, 62, 180, 94, 144, 186, 69, 100, 2, 190, 88, 207, 145, 189, 199, 246, 46, 190, 203, 130, 13, 190, 134, 213, 13, 190, 156, 156, 14, 190, 245, 233, 51, 190, 53, 221, 131, 189, 3, 229, 160, 61, 139, 190, 8, 190, 204, 235, 32, 189, 203, 250, 15, 190, 1, 166, 28, 62, 196, 19, 23, 59, 54, 100, 177, 62, 22, 186, 201, 189, 251, 70, 135, 61, 221, 152, 140, 61, 228, 184, 142, 188, 200, 8, 236, 189, 134, 175, 152, 190, 47, 39, 26, 190, 136, 21, 159, 60, 34, 46, 4, 189, 48, 171, 51, 190, 33, 115, 87, 62, 109, 165, 240, 190, 188, 36, 168, 189, 180, 205, 47, 62, 21, 162, 135, 61, 173, 46, 124, 62, 226, 10, 152, 61, 45, 251, 29, 190, 246, 102, 221, 60, 57, 146, 147, 190, 62, 179, 163, 190, 122, 49, 74, 190, 251, 75, 35, 62, 89, 78, 84, 190, 85, 44, 3, 190, 177, 101, 101, 62, 125, 3, 244, 187, 158, 42, 55, 190, 199, 58, 129, 62, 202, 47, 20, 62, 209, 7, 181, 189, 91, 217, 79, 189, 153, 132, 72, 62, 112, 169, 186, 190, 96, 224, 184, 187, 120, 58, 55, 62, 180, 125, 214, 62, 243, 157, 19, 187, 242, 105, 92, 190, 180, 62, 201, 62, 101, 219, 148, 62, 157, 90, 142, 189, 37, 55, 139, 62, 21, 244, 45, 190, 157, 25, 179, 190, 62, 35, 25, 62, 107, 129, 130, 189, 136, 28, 23, 61, 43, 149, 210, 190, 118, 157, 139, 189, 233, 150, 204, 189, 75, 16, 119, 59, 111, 239, 94, 187, 63, 79, 170, 61, 250, 4, 171, 61, 119, 236, 195, 190, 40, 219, 204, 188, 226, 25, 80, 190, 165, 144, 50, 62, 73, 169, 11, 189, 110, 163, 199, 189, 201, 38, 57, 189, 34, 93, 172, 61, 229, 122, 235, 61, 126, 158, 175, 190, 96, 37, 32, 60, 150, 150, 160, 189, 244, 130, 247, 189, 245, 2, 48, 190, 148, 157, 234, 61, 18, 141, 136, 62, 27, 102, 194, 189, 147, 78, 167, 190, 76, 156, 54, 62, 29, 117, 145, 190, 1, 182, 58, 62, 134, 217, 195, 61, 61, 214, 24, 188, 78, 60, 130, 60, 39, 174, 139, 190, 40, 137, 11, 190, 172, 142, 158, 189, 184, 225, 120, 62, 125, 41, 1, 189, 104, 201, 82, 62, 173, 119, 3, 62, 131, 99, 204, 189, 174, 125, 79, 62, 104, 97, 92, 189, 69, 119, 73, 62, 34, 67, 98, 190, 90, 51, 27, 189, 167, 127, 43, 190, 233, 28, 143, 61, 31, 2, 29, 61, 255, 26, 42, 190, 155, 8, 10, 62, 241, 35, 219, 61, 204, 238, 42, 189, 137, 30, 159, 188, 135, 25, 71, 189, 120, 203, 16, 61, 147, 111, 220, 188, 103, 11, 119, 62, 52, 154, 41, 61, 63, 208, 251, 188, 65, 130, 221, 189, 15, 46, 121, 62, 135, 168, 40, 189, 60, 203, 16, 62, 160, 94, 48, 60, 36, 197, 17, 190, 173, 40, 234, 189, 124, 239, 217, 61, 194, 247, 0, 62, 109, 100, 129, 62, 56, 51, 217, 187, 194, 59, 156, 189, 67, 4, 72, 189, 155, 124, 21, 62, 124, 143, 181, 189, 116, 122, 141, 61, 201, 181, 249, 61, 136, 30, 192, 189, 141, 220, 14, 190, 97, 224, 207, 188, 87, 169, 55, 190, 139, 49, 34, 190, 200, 201, 128, 188, 92, 111, 160, 188, 10, 214, 49, 190, 96, 192, 120, 61, 123, 175, 229, 189, 65, 160, 28, 190, 27, 70, 152, 189, 206, 148, 1, 190, 104, 131, 206, 61, 139, 30, 251, 61, 177, 120, 20, 62, 16, 196, 23, 190, 147, 51, 122, 61, 176, 210, 154, 61, 152, 175, 139, 61, 241, 147, 215, 61, 145, 213, 112, 61, 197, 219, 169, 61, 109, 51, 18, 62, 124, 158, 20, 188, 153, 110, 253, 60, 55, 117, 36, 190, 60, 71, 65, 189, 230, 158, 30, 189, 245, 50, 156, 189, 23, 210, 51, 189, 235, 93, 232, 61, 108, 207, 216, 189, 183, 98, 130, 189, 32, 45, 28, 62, 103, 106, 219, 188, 172, 150, 11, 62, 254, 226, 40, 60, 164, 108, 49, 187, 207, 132, 118, 61, 138, 255, 151, 59, 92, 146, 190, 62, 50, 188, 198, 190, 154, 214, 71, 61, 234, 59, 39, 62, 71, 132, 140, 61, 90, 119, 197, 60, 22, 238, 42, 188, 114, 87, 20, 191, 169, 116, 117, 189, 153, 212, 221, 188, 135, 69, 200, 61, 255, 60, 153, 61, 41, 44, 119, 190, 95, 155, 68, 189, 124, 187, 16, 190, 77, 122, 100, 62, 243, 176, 74, 190, 137, 171, 132, 62, 59, 10, 68, 62, 89, 217, 159, 189, 77, 28, 161, 189, 65, 88, 139, 189, 142, 47, 110, 62, 82, 135, 49, 188, 197, 226, 156, 189, 33, 148, 99, 62, 137, 93, 118, 61, 137, 146, 179, 62, 224, 194, 187, 61, 32, 157, 198, 190, 76, 157, 98, 188, 145, 246, 135, 61, 232, 225, 250, 61, 63, 38, 28, 191, 166, 158, 32, 190, 192, 95, 149, 62, 95, 131, 99, 62, 17, 121, 109, 190, 194, 106, 205, 62, 80, 20, 87, 191, 247, 227, 137, 61, 80, 207, 142, 61, 174, 187, 1, 190, 109, 58, 188, 62, 238, 206, 77, 190, 26, 126, 141, 190, 17, 202, 35, 190, 192, 161, 161, 190, 237, 106, 65, 190, 223, 190, 23, 190, 37, 223, 197, 60, 223, 73, 166, 190, 252, 170, 12, 190, 157, 100, 60, 62, 232, 214, 193, 187, 221, 51, 20, 190, 249, 232, 193, 61, 14, 185, 80, 188, 82, 13, 17, 62, 248, 237, 157, 189, 8, 142, 145, 61, 182, 241, 30, 190, 188, 251, 216, 61, 217, 36, 41, 190, 247, 52, 149, 189, 181, 108, 240, 189, 65, 88, 1, 62, 171, 25, 17, 190, 115, 251, 243, 187, 90, 168, 140, 60, 4, 67, 161, 61, 64, 250, 82, 61, 243, 219, 29, 190, 165, 152, 239, 189, 239, 55, 22, 190, 121, 107, 7, 62, 109, 97, 8, 190, 148, 165, 162, 189, 22, 215, 212, 189, 169, 131, 3, 190, 177, 136, 229, 189, 223, 255, 85, 61, 116, 168, 3, 190, 152, 46, 132, 59, 7, 149, 173, 189, 213, 151, 46, 189, 72, 141, 212, 189, 93, 8, 238, 61, 97, 249, 51, 190, 249, 9, 18, 61, 48, 63, 29, 189, 116, 45, 41, 190, 197, 122, 177, 189, 128, 182, 21, 62, 136, 89, 96, 61, 237, 92, 182, 189, 76, 47, 129, 60, 198, 120, 162, 61, 26, 1, 41, 62, 122, 228, 199, 189, 92, 234, 33, 190, 231, 33, 140, 189, 61, 55, 141, 189, 71, 6, 45, 61, 232, 132, 6, 190, 87, 248, 144, 61, 146, 247, 136, 61, 12, 200, 162, 61, 255, 108, 185, 189, 228, 199, 111, 188, 113, 126, 32, 190, 43, 108, 123, 189, 24, 10, 92, 188, 44, 196, 93, 189, 237, 138, 168, 189, 72, 192, 84, 189, 152, 229, 76, 189, 79, 222, 54, 190, 136, 219, 17, 61, 17, 184, 192, 189, 210, 70, 182, 189, 229, 76, 154, 61, 30, 30, 187, 189, 34, 228, 35, 62, 57, 41, 39, 60, 59, 252, 81, 189, 38, 34, 102, 61, 112, 166, 196, 61, 187, 55, 3, 190, 1, 134, 123, 190, 96, 157, 19, 62, 126, 210, 76, 190, 229, 101, 9, 189, 55, 2, 59, 190, 244, 191, 143, 60, 252, 165, 232, 188, 98, 26, 134, 62, 185, 94, 5, 190, 181, 67, 6, 190, 8, 146, 53, 188, 215, 35, 93, 62, 139, 113, 116, 61, 252, 103, 50, 62, 20, 141, 228, 61, 22, 156, 106, 62, 142, 3, 30, 62, 114, 66, 137, 189, 145, 65, 161, 189, 186, 223, 83, 62, 20, 222, 37, 62, 202, 17, 40, 61, 21, 5, 190, 61, 233, 160, 202, 190, 172, 138, 192, 190, 76, 122, 160, 61, 25, 245, 216, 61, 250, 31, 198, 189, 184, 126, 181, 188, 80, 73, 112, 61, 135, 79, 200, 60, 185, 164, 19, 190, 223, 80, 244, 60, 126, 1, 175, 61, 214, 253, 19, 190, 250, 46, 20, 190, 64, 130, 90, 190, 147, 211, 17, 190, 220, 23, 173, 188, 150, 112, 61, 62, 197, 169, 211, 189, 150, 182, 206, 189, 96, 118, 129, 190, 82, 136, 93, 190, 64, 10, 77, 190, 209, 92, 40, 61, 78, 150, 50, 190, 141, 244, 103, 62, 118, 71, 170, 61, 123, 153, 33, 190, 7, 63, 59, 62, 204, 132, 52, 190, 60, 175, 44, 62, 151, 42, 6, 190, 241, 33, 239, 189, 221, 16, 121, 190, 53, 83, 180, 61, 217, 65, 100, 190, 69, 15, 188, 189, 176, 19, 66, 189, 107, 231, 128, 62, 125, 2, 41, 60, 100, 144, 147, 189, 58, 0, 137, 189, 197, 52, 198, 61, 139, 248, 12, 62, 202, 215, 224, 61, 180, 21, 187, 60, 207, 128, 4, 189, 133, 224, 35, 190, 236, 7, 142, 62, 85, 165, 1, 62, 247, 184, 54, 190, 0, 180, 125, 61, 90, 131, 118, 189, 30, 250, 78, 61, 29, 254, 83, 190, 225, 220, 97, 62, 1, 19, 194, 61, 113, 151, 143, 61, 112, 213, 145, 60, 187, 100, 124, 189, 245, 98, 112, 61, 58, 224, 224, 189, 228, 87, 146, 61, 195, 220, 18, 61, 178, 5, 32, 62, 99, 132, 215, 189, 252, 43, 84, 61, 20, 60, 106, 62, 245, 74, 112, 61, 38, 251, 112, 190, 241, 249, 37, 190, 102, 226, 93, 190, 224, 188, 68, 190, 251, 59, 248, 61, 232, 132, 248, 189, 36, 98, 189, 61, 123, 99, 206, 61, 97, 145, 25, 190, 175, 47, 187, 189, 187, 153, 42, 189, 36, 204, 247, 188, 240, 238, 27, 62, 177, 116, 4, 189, 224, 162, 41, 60, 141, 248, 168, 61, 8, 246, 249, 189, 25, 168, 65, 62, 147, 97, 17, 62, 6, 103, 87, 190, 212, 2, 132, 189, 118, 92, 81, 189, 201, 96, 91, 189, 94, 100, 25, 189, 248, 46, 244, 189, 195, 186, 171, 61, 135, 220, 24, 188, 71, 48, 49, 190, 98, 229, 45, 189, 13, 255, 143, 61, 122, 4, 241, 61, 57, 255, 216, 189, 103, 197, 144, 188, 89, 155, 232, 189, 235, 57, 139, 189, 159, 179, 86, 60, 208, 18, 121, 189, 9, 173, 71, 188, 152, 194, 156, 189, 169, 164, 78, 188, 180, 94, 167, 60, 25, 243, 250, 60, 205, 150, 225, 189, 91, 72, 22, 190, 46, 105, 3, 190, 123, 31, 50, 60, 66, 84, 247, 189, 201, 75, 118, 60, 15, 138, 120, 60, 236, 228, 192, 188, 255, 68, 164, 189, 85, 94, 199, 61, 70, 212, 111, 61, 64, 140, 39, 190, 134, 140, 30, 61, 48, 1, 60, 61, 209, 29, 87, 62, 48, 82, 241, 61, 165, 180, 13, 60, 131, 133, 22, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 112, 0, 190, 93, 47, 95, 62, 158, 52, 105, 62, 147, 230, 158, 61, 231, 200, 55, 62, 60, 70, 98, 61, 211, 174, 1, 190, 202, 228, 33, 189, 8, 230, 57, 189, 68, 203, 196, 60, 69, 241, 148, 189, 246, 252, 213, 60, 84, 202, 124, 62, 207, 82, 219, 189, 97, 48, 230, 61, 240, 174, 142, 62, 255, 195, 82, 190, 96, 5, 31, 190, 87, 188, 4, 62, 28, 51, 6, 62, 32, 71, 141, 62, 176, 164, 196, 61, 158, 19, 138, 189, 130, 63, 139, 62, 64, 158, 157, 60, 18, 150, 32, 189, 12, 110, 32, 61, 151, 103, 19, 190, 152, 156, 77, 62, 114, 90, 223, 61, 10, 160, 117, 189, 141, 21, 85, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 235, 112, 61, 204, 60, 128, 190, 163, 70, 31, 190, 133, 106, 20, 62, 64, 129, 135, 62, 169, 16, 179, 62, 216, 251, 102, 62, 213, 121, 21, 189, 153, 222, 180, 61, 235, 42, 144, 190, 35, 90, 172, 187, 58, 66, 210, 189, 189, 241, 41, 189, 219, 68, 130, 189, 16, 68, 209, 61, 128, 44, 70, 190, 119, 56, 83, 190, 124, 179, 192, 189, 19, 109, 75, 62, 217, 208, 183, 62, 233, 53, 191, 190, 123, 130, 244, 189, 17, 193, 208, 60, 29, 35, 147, 62, 45, 239, 16, 63, 6, 199, 50, 62, 91, 176, 9, 62, 248, 169, 39, 190, 31, 208, 248, 190, 227, 46, 83, 190, 70, 52, 245, 189, 119, 203, 179, 189, 212, 197, 200, 61, 120, 3, 85, 190, 200, 246, 97, 189, 195, 117, 26, 60, 187, 11, 140, 190, 19, 0, 72, 62, 86, 29, 6, 62, 217, 203, 92, 190, 14, 173, 71, 61, 33, 60, 170, 62, 55, 135, 23, 62, 209, 220, 203, 61, 201, 89, 86, 190, 170, 208, 124, 61, 45, 167, 38, 189, 94, 160, 57, 190, 199, 72, 0, 62, 87, 159, 135, 61, 20, 188, 152, 186, 115, 51, 97, 59, 70, 158, 228, 189, 130, 204, 98, 190, 212, 128, 211, 60, 76, 88, 87, 190, 195, 14, 94, 62, 142, 232, 56, 55, 68, 0, 52, 190, 100, 86, 65, 62, 127, 33, 41, 62, 7, 125, 21, 61, 26, 43, 131, 190, 235, 22, 112, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 55, 20, 62, 45, 33, 96, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {102, 217, 220, 190, 243, 225, 66, 191, 60, 241, 40, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {245, 1, 233, 63, 228, 231, 13, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0028/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}