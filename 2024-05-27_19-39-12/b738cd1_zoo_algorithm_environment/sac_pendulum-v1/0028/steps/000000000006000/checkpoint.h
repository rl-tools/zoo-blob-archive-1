// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {126, 207, 131, 190, 159, 174, 117, 63, 176, 28, 220, 190, 242, 8, 245, 189, 42, 204, 108, 63, 49, 190, 180, 62, 246, 161, 230, 190, 20, 135, 139, 191, 104, 58, 190, 190, 9, 79, 135, 191, 203, 228, 154, 189, 221, 252, 75, 61, 147, 217, 66, 60, 27, 26, 233, 190, 120, 6, 98, 63, 233, 14, 122, 62, 14, 140, 36, 191, 227, 219, 54, 63, 194, 71, 189, 190, 168, 26, 101, 63, 40, 232, 188, 62, 124, 91, 135, 62, 39, 70, 176, 190, 255, 9, 210, 190, 160, 185, 33, 61, 89, 112, 153, 190, 73, 124, 84, 62, 27, 190, 50, 61, 187, 180, 236, 190, 154, 196, 160, 190, 160, 72, 163, 62, 172, 5, 138, 63, 199, 95, 181, 62, 251, 138, 255, 190, 143, 82, 0, 191, 166, 116, 130, 62, 15, 118, 212, 62, 84, 69, 74, 191, 27, 216, 245, 62, 127, 229, 27, 63, 91, 66, 183, 189, 198, 9, 252, 62, 164, 166, 246, 190, 111, 1, 142, 61, 86, 78, 208, 62, 118, 142, 148, 189, 71, 27, 92, 63, 71, 152, 26, 191, 222, 217, 123, 190, 71, 134, 9, 63, 227, 200, 77, 189, 201, 9, 21, 191, 70, 164, 42, 191, 90, 209, 55, 190, 219, 167, 85, 58, 39, 96, 34, 190, 147, 244, 18, 189, 114, 174, 178, 189, 13, 180, 134, 191, 228, 212, 9, 61, 20, 181, 125, 62, 145, 212, 133, 62, 204, 134, 50, 63, 186, 241, 177, 190, 66, 23, 106, 191, 188, 108, 223, 190, 139, 248, 50, 63, 58, 125, 87, 63, 246, 195, 194, 62, 203, 174, 82, 63, 70, 238, 244, 190, 54, 60, 11, 62, 247, 85, 196, 189, 189, 221, 247, 62, 138, 10, 43, 191, 245, 29, 182, 61, 224, 161, 133, 191, 33, 14, 217, 190, 151, 17, 45, 189, 51, 204, 176, 62, 177, 30, 70, 63, 206, 154, 242, 62, 187, 100, 71, 63, 99, 237, 59, 62, 11, 136, 24, 63, 24, 75, 26, 191, 174, 132, 130, 190, 143, 188, 21, 191, 39, 88, 11, 63, 35, 59, 178, 61, 93, 174, 131, 63, 248, 95, 89, 191, 219, 15, 253, 190, 42, 205, 155, 62, 45, 122, 5, 188, 54, 229, 21, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 108, 77, 59, 160, 166, 238, 188, 180, 13, 143, 62, 177, 133, 76, 190, 224, 140, 199, 190, 19, 44, 138, 190, 134, 233, 15, 59, 194, 236, 29, 191, 77, 137, 142, 189, 89, 140, 243, 61, 124, 147, 231, 190, 74, 247, 8, 63, 52, 11, 230, 62, 70, 227, 178, 62, 95, 106, 32, 191, 97, 219, 160, 190, 234, 217, 52, 62, 148, 179, 105, 62, 116, 88, 9, 191, 112, 111, 135, 190, 70, 66, 53, 191, 222, 129, 114, 190, 195, 40, 198, 62, 132, 115, 12, 190, 43, 50, 17, 63, 107, 26, 112, 62, 113, 159, 132, 189, 166, 12, 13, 190, 217, 104, 23, 191, 253, 174, 0, 63, 54, 149, 111, 62, 101, 11, 106, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 164, 230, 189, 238, 69, 161, 61, 192, 28, 230, 61, 169, 80, 87, 189, 172, 144, 187, 61, 100, 117, 225, 189, 55, 252, 194, 189, 42, 119, 42, 188, 8, 106, 160, 189, 19, 70, 71, 190, 218, 5, 155, 186, 83, 163, 25, 190, 155, 199, 149, 61, 53, 111, 9, 190, 241, 108, 147, 189, 100, 110, 225, 188, 175, 120, 170, 61, 174, 242, 48, 190, 247, 202, 42, 189, 88, 94, 136, 189, 158, 44, 241, 189, 39, 214, 29, 189, 193, 14, 190, 61, 66, 79, 96, 61, 179, 131, 164, 61, 250, 210, 235, 189, 92, 226, 181, 189, 107, 237, 2, 61, 112, 224, 11, 62, 138, 196, 89, 190, 77, 50, 200, 189, 175, 86, 226, 189, 133, 157, 187, 190, 213, 186, 197, 59, 88, 238, 238, 61, 40, 65, 0, 190, 140, 171, 86, 190, 65, 120, 132, 189, 98, 112, 14, 190, 215, 137, 150, 61, 43, 71, 220, 189, 101, 164, 199, 61, 124, 44, 33, 61, 77, 231, 81, 60, 106, 66, 24, 190, 96, 3, 131, 62, 54, 116, 178, 190, 162, 67, 113, 62, 106, 26, 130, 61, 71, 224, 157, 189, 168, 181, 3, 190, 25, 170, 165, 190, 235, 78, 73, 189, 203, 194, 40, 190, 139, 22, 158, 62, 246, 223, 68, 60, 120, 181, 6, 62, 174, 189, 244, 187, 139, 223, 37, 190, 11, 252, 148, 62, 209, 130, 16, 190, 252, 39, 226, 60, 23, 116, 128, 189, 150, 105, 45, 62, 160, 68, 160, 190, 243, 129, 3, 189, 89, 214, 182, 189, 28, 149, 82, 60, 11, 118, 177, 61, 85, 136, 99, 62, 119, 125, 204, 189, 3, 230, 146, 189, 20, 153, 117, 189, 223, 220, 4, 62, 179, 163, 31, 189, 151, 105, 155, 60, 123, 80, 157, 61, 89, 217, 91, 62, 158, 18, 40, 190, 90, 182, 114, 62, 196, 212, 163, 188, 83, 171, 174, 61, 105, 62, 244, 189, 199, 56, 169, 190, 156, 198, 211, 61, 8, 120, 26, 190, 1, 19, 113, 60, 97, 69, 105, 190, 68, 73, 234, 61, 96, 184, 178, 61, 52, 27, 13, 190, 86, 114, 56, 60, 0, 96, 183, 190, 164, 212, 95, 61, 46, 159, 27, 190, 103, 51, 111, 189, 129, 46, 134, 61, 162, 69, 80, 190, 193, 42, 132, 190, 9, 21, 22, 62, 157, 249, 91, 190, 9, 252, 164, 190, 219, 182, 143, 188, 106, 215, 224, 60, 42, 228, 31, 190, 40, 144, 19, 62, 190, 203, 170, 190, 124, 126, 237, 61, 141, 139, 123, 59, 239, 24, 134, 62, 32, 19, 123, 190, 62, 221, 154, 189, 62, 173, 2, 61, 126, 215, 131, 190, 182, 190, 43, 62, 48, 68, 46, 190, 202, 144, 130, 190, 72, 141, 35, 189, 97, 96, 222, 185, 78, 193, 114, 61, 130, 255, 197, 188, 83, 85, 99, 190, 97, 16, 194, 190, 232, 221, 39, 190, 26, 219, 93, 62, 163, 171, 167, 61, 13, 152, 125, 62, 225, 33, 168, 190, 104, 72, 160, 188, 188, 8, 59, 62, 165, 6, 188, 189, 221, 179, 168, 189, 21, 181, 72, 61, 157, 17, 118, 190, 66, 119, 62, 190, 1, 21, 197, 189, 161, 139, 46, 62, 162, 238, 4, 190, 58, 22, 233, 190, 70, 213, 29, 62, 210, 3, 164, 62, 156, 94, 2, 190, 168, 188, 1, 190, 30, 253, 66, 190, 107, 121, 147, 189, 70, 10, 95, 190, 44, 225, 229, 189, 92, 24, 252, 61, 218, 136, 174, 190, 103, 127, 218, 188, 188, 157, 3, 189, 138, 28, 96, 62, 79, 92, 6, 62, 49, 195, 47, 62, 61, 175, 154, 61, 7, 109, 38, 191, 13, 116, 211, 190, 2, 79, 188, 190, 24, 169, 101, 62, 33, 19, 255, 61, 45, 16, 136, 62, 187, 186, 51, 190, 64, 51, 149, 189, 41, 201, 132, 190, 132, 156, 230, 190, 154, 100, 212, 190, 172, 165, 140, 190, 50, 145, 71, 62, 233, 219, 33, 190, 225, 161, 216, 60, 212, 175, 24, 61, 188, 203, 225, 190, 75, 106, 173, 188, 144, 156, 39, 62, 222, 0, 133, 190, 177, 126, 211, 188, 181, 197, 143, 190, 122, 15, 83, 190, 58, 14, 30, 190, 139, 102, 182, 190, 87, 97, 114, 189, 173, 111, 209, 188, 208, 234, 190, 189, 127, 159, 2, 63, 255, 112, 176, 189, 91, 169, 69, 62, 133, 40, 157, 190, 141, 25, 181, 190, 103, 241, 22, 62, 131, 182, 104, 191, 198, 3, 179, 62, 239, 193, 135, 190, 80, 132, 18, 62, 223, 172, 72, 190, 61, 156, 21, 190, 180, 237, 185, 60, 206, 179, 2, 62, 245, 63, 31, 190, 238, 191, 7, 62, 31, 212, 79, 62, 1, 48, 146, 61, 77, 158, 113, 190, 191, 136, 202, 190, 57, 133, 29, 62, 93, 54, 52, 61, 79, 107, 143, 189, 10, 178, 168, 60, 50, 34, 245, 58, 31, 80, 212, 189, 24, 142, 173, 189, 141, 244, 19, 189, 36, 118, 31, 61, 217, 138, 125, 190, 228, 17, 115, 190, 30, 7, 233, 189, 141, 14, 44, 63, 212, 237, 122, 189, 207, 138, 186, 189, 30, 252, 85, 60, 112, 113, 221, 190, 217, 93, 9, 189, 2, 101, 150, 189, 223, 90, 182, 62, 88, 213, 237, 60, 110, 165, 117, 190, 56, 137, 102, 190, 192, 150, 33, 62, 60, 214, 176, 61, 243, 202, 85, 61, 128, 155, 175, 61, 72, 46, 144, 189, 198, 161, 92, 190, 113, 129, 223, 189, 110, 15, 8, 62, 73, 56, 236, 190, 67, 89, 6, 190, 234, 0, 31, 61, 88, 0, 66, 62, 142, 190, 172, 189, 60, 254, 209, 60, 146, 232, 251, 187, 228, 144, 33, 61, 159, 69, 13, 62, 160, 16, 40, 188, 179, 227, 227, 61, 247, 220, 36, 190, 230, 53, 173, 61, 246, 82, 255, 62, 3, 212, 133, 62, 103, 49, 200, 189, 121, 80, 10, 190, 149, 98, 232, 189, 242, 79, 50, 190, 186, 93, 42, 190, 18, 174, 71, 62, 130, 178, 161, 61, 158, 22, 2, 190, 71, 243, 217, 61, 10, 130, 42, 190, 139, 43, 36, 62, 73, 198, 33, 61, 62, 38, 237, 189, 241, 75, 6, 190, 9, 231, 239, 189, 112, 70, 100, 190, 152, 74, 53, 190, 210, 223, 95, 60, 100, 106, 17, 189, 154, 1, 79, 190, 158, 206, 253, 187, 180, 252, 133, 61, 16, 244, 152, 61, 167, 252, 16, 62, 92, 20, 238, 189, 229, 90, 49, 190, 104, 30, 27, 190, 16, 107, 182, 188, 50, 254, 80, 189, 27, 216, 213, 188, 193, 73, 111, 190, 101, 90, 1, 189, 124, 242, 17, 62, 247, 63, 48, 188, 182, 92, 48, 189, 53, 99, 1, 62, 176, 44, 9, 190, 231, 178, 64, 190, 121, 223, 197, 61, 12, 35, 174, 190, 115, 200, 188, 191, 176, 14, 120, 61, 180, 185, 176, 62, 202, 106, 184, 190, 4, 240, 240, 61, 30, 238, 189, 190, 109, 81, 31, 189, 228, 162, 241, 189, 98, 123, 92, 190, 40, 255, 172, 189, 16, 231, 9, 62, 78, 156, 183, 61, 183, 60, 98, 190, 247, 171, 217, 190, 7, 7, 57, 62, 184, 18, 51, 62, 223, 57, 66, 62, 28, 107, 41, 190, 14, 138, 188, 190, 254, 163, 21, 190, 97, 188, 81, 189, 62, 245, 1, 191, 128, 93, 212, 60, 215, 38, 149, 62, 172, 57, 165, 61, 5, 206, 88, 191, 162, 86, 149, 60, 13, 107, 202, 190, 237, 89, 154, 189, 58, 170, 122, 190, 244, 13, 3, 191, 181, 168, 140, 189, 102, 12, 227, 60, 210, 182, 38, 190, 127, 89, 19, 190, 135, 14, 32, 190, 85, 210, 252, 189, 42, 123, 15, 190, 190, 246, 81, 61, 222, 26, 145, 189, 151, 247, 44, 189, 0, 8, 25, 190, 8, 72, 147, 189, 229, 39, 3, 62, 241, 97, 234, 189, 56, 163, 15, 190, 229, 184, 43, 189, 63, 201, 18, 60, 233, 102, 27, 189, 126, 126, 29, 62, 22, 5, 11, 62, 196, 6, 181, 189, 113, 150, 247, 60, 236, 164, 197, 189, 12, 32, 2, 62, 245, 214, 117, 189, 152, 180, 113, 189, 62, 232, 134, 189, 103, 144, 21, 190, 71, 194, 177, 189, 194, 132, 202, 188, 71, 178, 141, 189, 53, 30, 240, 185, 95, 57, 30, 189, 30, 89, 45, 62, 246, 126, 137, 62, 237, 245, 4, 191, 11, 74, 19, 62, 208, 84, 123, 189, 35, 191, 124, 189, 24, 7, 145, 62, 24, 80, 119, 62, 8, 187, 192, 61, 81, 225, 42, 60, 78, 228, 246, 61, 82, 117, 72, 62, 192, 236, 92, 61, 154, 229, 91, 62, 125, 231, 64, 189, 136, 217, 30, 191, 218, 94, 233, 61, 180, 180, 50, 61, 56, 26, 78, 62, 25, 34, 39, 190, 14, 48, 211, 189, 104, 233, 19, 190, 174, 207, 42, 190, 19, 159, 205, 190, 58, 202, 186, 62, 105, 34, 135, 60, 108, 33, 77, 61, 236, 67, 205, 62, 6, 199, 134, 190, 18, 51, 28, 62, 132, 170, 4, 62, 177, 127, 63, 190, 69, 197, 4, 61, 152, 228, 190, 60, 88, 238, 136, 62, 140, 0, 40, 61, 159, 52, 22, 62, 144, 116, 68, 62, 169, 67, 166, 60, 98, 91, 179, 189, 192, 68, 118, 62, 44, 172, 26, 190, 162, 208, 230, 188, 101, 62, 30, 60, 196, 228, 194, 189, 6, 10, 8, 62, 29, 251, 5, 190, 108, 40, 179, 189, 14, 150, 139, 189, 98, 88, 136, 61, 170, 251, 27, 190, 161, 220, 84, 189, 82, 90, 149, 60, 196, 6, 89, 61, 118, 184, 206, 189, 90, 46, 151, 62, 148, 181, 38, 189, 206, 229, 110, 189, 235, 121, 154, 190, 124, 31, 199, 190, 30, 170, 243, 61, 4, 187, 243, 61, 77, 12, 128, 61, 221, 109, 16, 62, 80, 177, 6, 62, 7, 156, 100, 190, 40, 1, 99, 191, 150, 226, 155, 61, 98, 184, 27, 60, 120, 194, 60, 190, 182, 98, 50, 190, 10, 90, 189, 189, 200, 243, 226, 60, 158, 12, 247, 61, 180, 183, 141, 190, 241, 50, 15, 190, 159, 237, 25, 62, 62, 234, 248, 61, 32, 216, 171, 189, 184, 107, 4, 190, 100, 178, 110, 190, 115, 75, 183, 61, 248, 100, 193, 190, 71, 107, 170, 60, 175, 81, 118, 190, 97, 158, 184, 62, 127, 8, 90, 189, 255, 32, 21, 60, 14, 240, 79, 190, 91, 200, 33, 62, 230, 179, 242, 62, 188, 217, 191, 190, 147, 225, 12, 190, 204, 35, 25, 62, 207, 54, 118, 61, 116, 139, 170, 61, 124, 109, 183, 61, 46, 109, 160, 61, 233, 222, 143, 62, 23, 122, 97, 188, 193, 160, 130, 190, 99, 239, 133, 61, 193, 174, 201, 189, 43, 31, 234, 61, 215, 178, 69, 190, 228, 98, 164, 190, 160, 224, 193, 61, 95, 96, 143, 188, 196, 95, 205, 60, 207, 241, 116, 189, 150, 58, 28, 61, 60, 47, 109, 187, 194, 156, 100, 61, 31, 252, 233, 60, 31, 246, 88, 188, 118, 114, 195, 189, 9, 108, 195, 189, 216, 244, 165, 189, 142, 231, 75, 62, 136, 69, 68, 62, 32, 244, 178, 61, 234, 209, 15, 62, 64, 167, 217, 190, 250, 149, 220, 189, 210, 59, 82, 62, 43, 55, 114, 61, 46, 157, 19, 62, 202, 103, 175, 190, 230, 191, 8, 62, 159, 26, 198, 61, 9, 73, 230, 189, 161, 31, 3, 62, 73, 168, 149, 61, 115, 186, 147, 61, 84, 197, 149, 189, 249, 103, 147, 189, 149, 201, 11, 62, 187, 70, 174, 60, 25, 21, 209, 189, 213, 236, 7, 61, 42, 177, 155, 189, 239, 112, 161, 189, 151, 211, 42, 61, 154, 255, 67, 62, 80, 112, 202, 59, 144, 207, 214, 60, 44, 12, 202, 190, 239, 68, 32, 190, 133, 189, 190, 59, 120, 223, 214, 61, 248, 207, 134, 190, 71, 249, 3, 62, 175, 210, 131, 185, 166, 19, 235, 61, 155, 105, 194, 188, 49, 94, 201, 190, 86, 81, 87, 62, 148, 138, 174, 189, 107, 78, 2, 62, 181, 175, 183, 190, 180, 17, 199, 191, 141, 130, 210, 61, 66, 86, 121, 62, 33, 209, 2, 191, 41, 221, 228, 61, 241, 32, 37, 190, 207, 184, 97, 188, 165, 129, 79, 190, 117, 102, 249, 190, 154, 145, 171, 190, 172, 90, 42, 62, 101, 192, 242, 189, 208, 187, 12, 190, 183, 34, 247, 190, 28, 191, 104, 190, 106, 155, 128, 62, 196, 185, 240, 61, 105, 12, 191, 61, 122, 230, 186, 190, 171, 168, 41, 190, 231, 160, 133, 189, 72, 144, 35, 191, 134, 131, 144, 62, 66, 52, 116, 60, 34, 49, 221, 61, 208, 125, 63, 191, 193, 249, 98, 190, 143, 90, 56, 189, 9, 28, 157, 62, 7, 99, 39, 190, 194, 52, 48, 191, 165, 211, 192, 189, 19, 45, 131, 61, 15, 126, 139, 189, 169, 143, 98, 61, 73, 155, 25, 62, 150, 81, 0, 189, 109, 23, 175, 189, 77, 74, 97, 189, 4, 184, 235, 61, 69, 166, 21, 62, 125, 16, 153, 61, 180, 208, 58, 189, 245, 183, 76, 189, 49, 209, 219, 60, 163, 222, 24, 190, 216, 213, 215, 61, 59, 30, 38, 189, 174, 15, 191, 60, 203, 78, 210, 189, 188, 88, 23, 62, 180, 94, 144, 186, 69, 100, 2, 190, 88, 207, 145, 189, 199, 246, 46, 190, 203, 130, 13, 190, 134, 213, 13, 190, 156, 156, 14, 190, 245, 233, 51, 190, 53, 221, 131, 189, 3, 229, 160, 61, 139, 190, 8, 190, 204, 235, 32, 189, 198, 61, 55, 63, 186, 95, 220, 189, 109, 105, 91, 190, 130, 4, 224, 62, 162, 160, 120, 190, 59, 244, 4, 190, 87, 27, 21, 61, 177, 203, 128, 188, 24, 144, 145, 190, 38, 114, 73, 191, 45, 219, 147, 190, 160, 25, 250, 189, 97, 190, 122, 190, 206, 231, 2, 191, 1, 152, 252, 61, 4, 96, 62, 191, 16, 244, 3, 62, 50, 180, 158, 60, 21, 162, 135, 61, 168, 232, 236, 187, 161, 1, 29, 189, 193, 243, 164, 191, 160, 62, 31, 190, 66, 94, 202, 190, 174, 78, 62, 190, 249, 37, 132, 191, 199, 143, 242, 188, 46, 42, 178, 190, 85, 44, 3, 190, 171, 24, 153, 62, 131, 44, 108, 189, 255, 189, 221, 190, 74, 241, 158, 62, 111, 55, 232, 61, 178, 214, 97, 190, 238, 166, 141, 188, 244, 154, 65, 62, 69, 0, 208, 190, 55, 183, 30, 188, 113, 250, 46, 62, 125, 15, 203, 62, 237, 74, 185, 189, 214, 21, 233, 190, 88, 56, 208, 62, 231, 232, 158, 62, 240, 175, 158, 189, 251, 230, 74, 62, 223, 242, 155, 190, 83, 81, 131, 190, 9, 41, 8, 189, 107, 129, 130, 189, 213, 86, 250, 61, 16, 76, 8, 191, 105, 114, 255, 189, 212, 43, 178, 189, 56, 212, 165, 62, 132, 32, 22, 187, 14, 173, 146, 187, 193, 187, 156, 61, 118, 44, 77, 191, 76, 130, 189, 189, 0, 216, 87, 190, 231, 131, 141, 62, 149, 18, 123, 189, 235, 72, 112, 190, 132, 8, 53, 191, 141, 106, 0, 62, 232, 208, 52, 62, 206, 98, 29, 191, 168, 64, 242, 61, 31, 223, 204, 190, 176, 8, 61, 190, 18, 188, 171, 190, 1, 234, 145, 61, 129, 196, 153, 62, 254, 201, 16, 190, 51, 254, 146, 190, 125, 249, 165, 62, 59, 216, 28, 191, 170, 72, 3, 62, 242, 6, 11, 188, 113, 86, 25, 61, 78, 60, 130, 60, 238, 78, 169, 190, 140, 187, 27, 189, 247, 58, 200, 189, 234, 17, 153, 62, 50, 83, 60, 190, 39, 131, 43, 62, 191, 137, 24, 62, 232, 64, 185, 190, 150, 198, 148, 62, 98, 229, 197, 190, 63, 96, 157, 61, 251, 134, 149, 190, 105, 61, 118, 60, 193, 226, 125, 190, 131, 107, 160, 61, 29, 121, 79, 61, 162, 13, 250, 189, 214, 193, 41, 62, 119, 132, 164, 61, 135, 255, 12, 189, 224, 250, 86, 189, 142, 189, 58, 189, 238, 213, 180, 60, 124, 158, 158, 189, 218, 10, 159, 62, 114, 49, 68, 60, 44, 108, 164, 189, 148, 4, 119, 61, 2, 74, 76, 62, 250, 34, 153, 189, 49, 16, 17, 62, 160, 94, 48, 60, 254, 83, 101, 190, 218, 23, 249, 189, 162, 110, 166, 61, 111, 99, 144, 61, 157, 55, 234, 189, 124, 191, 4, 186, 90, 66, 23, 189, 103, 69, 66, 189, 188, 142, 31, 61, 48, 229, 100, 190, 228, 163, 213, 61, 187, 247, 71, 62, 222, 53, 207, 189, 61, 229, 160, 61, 112, 131, 14, 189, 248, 148, 177, 190, 6, 2, 77, 191, 141, 41, 38, 189, 206, 163, 82, 60, 217, 232, 129, 190, 241, 190, 177, 59, 61, 199, 119, 189, 82, 206, 246, 60, 195, 167, 20, 190, 68, 2, 148, 190, 212, 139, 76, 62, 243, 243, 174, 62, 227, 5, 9, 190, 101, 254, 134, 61, 242, 166, 135, 62, 8, 156, 226, 189, 152, 175, 139, 61, 46, 20, 219, 190, 34, 231, 244, 189, 241, 140, 68, 61, 161, 17, 20, 63, 190, 84, 104, 61, 212, 252, 57, 62, 18, 147, 163, 190, 134, 173, 19, 190, 133, 219, 199, 62, 82, 70, 103, 191, 155, 216, 191, 189, 5, 56, 173, 61, 235, 5, 148, 61, 186, 102, 38, 63, 200, 241, 23, 62, 133, 89, 163, 190, 148, 18, 52, 62, 109, 186, 234, 59, 101, 86, 195, 188, 68, 42, 191, 61, 213, 203, 3, 62, 118, 0, 174, 62, 87, 183, 183, 190, 210, 27, 132, 189, 21, 180, 5, 62, 157, 6, 139, 61, 252, 35, 206, 60, 255, 173, 186, 189, 168, 239, 23, 191, 19, 127, 162, 61, 127, 47, 220, 190, 135, 69, 200, 61, 109, 156, 39, 188, 146, 124, 150, 190, 106, 73, 195, 190, 213, 50, 149, 189, 70, 230, 243, 62, 147, 90, 78, 189, 17, 160, 133, 61, 10, 91, 78, 62, 189, 80, 145, 190, 102, 15, 252, 61, 239, 221, 26, 189, 71, 10, 218, 62, 247, 97, 216, 188, 166, 176, 68, 63, 39, 195, 134, 62, 50, 157, 158, 190, 169, 170, 195, 62, 97, 53, 254, 61, 175, 248, 203, 190, 173, 208, 120, 61, 151, 46, 151, 62, 80, 123, 7, 62, 143, 24, 148, 191, 237, 63, 158, 190, 145, 179, 163, 62, 1, 59, 143, 62, 118, 138, 93, 190, 62, 165, 197, 62, 29, 187, 117, 191, 135, 170, 178, 62, 199, 113, 157, 190, 174, 187, 1, 190, 84, 250, 220, 62, 99, 1, 141, 190, 90, 146, 111, 191, 242, 152, 183, 189, 60, 196, 77, 189, 4, 174, 132, 190, 160, 101, 65, 191, 4, 78, 157, 61, 77, 127, 18, 191, 225, 73, 14, 189, 48, 133, 143, 62, 138, 63, 116, 62, 118, 119, 2, 190, 249, 232, 193, 61, 14, 185, 80, 188, 82, 13, 17, 62, 248, 237, 157, 189, 8, 142, 145, 61, 182, 241, 30, 190, 188, 251, 216, 61, 217, 36, 41, 190, 247, 52, 149, 189, 181, 108, 240, 189, 65, 88, 1, 62, 171, 25, 17, 190, 115, 251, 243, 187, 90, 168, 140, 60, 4, 67, 161, 61, 64, 250, 82, 61, 243, 219, 29, 190, 165, 152, 239, 189, 239, 55, 22, 190, 121, 107, 7, 62, 109, 97, 8, 190, 148, 165, 162, 189, 22, 215, 212, 189, 169, 131, 3, 190, 177, 136, 229, 189, 223, 255, 85, 61, 116, 168, 3, 190, 152, 46, 132, 59, 7, 149, 173, 189, 213, 151, 46, 189, 72, 141, 212, 189, 93, 8, 238, 61, 97, 249, 51, 190, 249, 9, 18, 61, 48, 63, 29, 189, 116, 45, 41, 190, 197, 122, 177, 189, 128, 182, 21, 62, 136, 89, 96, 61, 237, 92, 182, 189, 76, 47, 129, 60, 198, 120, 162, 61, 26, 1, 41, 62, 122, 228, 199, 189, 92, 234, 33, 190, 231, 33, 140, 189, 61, 55, 141, 189, 71, 6, 45, 61, 232, 132, 6, 190, 87, 248, 144, 61, 146, 247, 136, 61, 12, 200, 162, 61, 255, 108, 185, 189, 228, 199, 111, 188, 113, 126, 32, 190, 43, 108, 123, 189, 24, 10, 92, 188, 44, 196, 93, 189, 237, 138, 168, 189, 72, 192, 84, 189, 152, 229, 76, 189, 79, 222, 54, 190, 136, 219, 17, 61, 17, 184, 192, 189, 136, 144, 104, 190, 187, 229, 221, 188, 29, 28, 35, 60, 192, 107, 103, 62, 157, 19, 186, 189, 155, 142, 157, 189, 37, 94, 223, 59, 229, 114, 215, 61, 205, 155, 17, 190, 226, 219, 139, 190, 225, 124, 26, 62, 65, 47, 159, 189, 99, 161, 21, 62, 55, 133, 125, 190, 190, 156, 171, 189, 83, 89, 188, 189, 34, 203, 38, 62, 53, 145, 50, 188, 181, 67, 6, 190, 73, 62, 217, 61, 214, 224, 45, 62, 20, 179, 159, 61, 103, 194, 2, 62, 122, 25, 22, 61, 121, 131, 53, 62, 214, 41, 80, 62, 246, 137, 43, 190, 0, 49, 153, 189, 233, 247, 98, 62, 28, 33, 38, 62, 154, 45, 247, 188, 26, 23, 43, 187, 73, 218, 222, 190, 49, 21, 205, 191, 114, 82, 36, 62, 33, 132, 89, 62, 22, 46, 194, 190, 253, 251, 134, 61, 170, 148, 200, 190, 202, 108, 194, 188, 232, 8, 72, 190, 158, 150, 100, 61, 95, 100, 79, 190, 245, 94, 201, 189, 139, 208, 29, 187, 14, 200, 49, 190, 251, 181, 251, 190, 7, 77, 51, 61, 239, 203, 9, 62, 157, 216, 227, 188, 150, 182, 206, 189, 246, 200, 225, 190, 9, 206, 157, 190, 24, 242, 83, 190, 38, 254, 134, 189, 114, 181, 135, 190, 76, 51, 147, 62, 150, 111, 26, 62, 117, 82, 37, 191, 26, 170, 178, 61, 187, 231, 109, 191, 211, 177, 145, 61, 191, 245, 16, 190, 165, 5, 181, 190, 96, 47, 187, 190, 143, 63, 99, 61, 2, 30, 77, 190, 35, 38, 177, 190, 250, 174, 118, 189, 67, 77, 118, 62, 192, 32, 79, 189, 192, 176, 152, 189, 217, 81, 80, 189, 197, 71, 91, 61, 86, 47, 52, 62, 14, 181, 150, 61, 159, 183, 10, 58, 24, 67, 49, 189, 235, 17, 177, 189, 24, 149, 129, 62, 17, 254, 14, 190, 252, 154, 180, 189, 0, 180, 125, 61, 166, 11, 135, 189, 157, 241, 140, 61, 77, 205, 96, 190, 204, 41, 68, 62, 101, 152, 80, 190, 244, 131, 4, 188, 241, 252, 100, 61, 47, 55, 193, 189, 55, 247, 24, 62, 69, 97, 144, 190, 147, 68, 209, 189, 90, 9, 59, 61, 183, 189, 20, 62, 101, 248, 0, 191, 10, 171, 148, 191, 225, 162, 107, 62, 229, 187, 35, 62, 44, 65, 61, 191, 254, 133, 159, 190, 135, 226, 120, 190, 119, 243, 121, 190, 83, 136, 169, 189, 201, 242, 201, 190, 10, 4, 159, 60, 179, 152, 124, 62, 118, 225, 52, 61, 25, 21, 12, 190, 66, 169, 4, 191, 187, 189, 33, 190, 185, 197, 21, 62, 152, 122, 48, 188, 224, 162, 41, 60, 179, 18, 57, 61, 96, 170, 1, 190, 231, 114, 73, 189, 201, 85, 78, 189, 95, 193, 156, 62, 33, 238, 4, 190, 39, 110, 186, 189, 234, 233, 25, 191, 64, 24, 34, 190, 250, 54, 123, 62, 38, 180, 36, 62, 187, 228, 194, 188, 186, 36, 10, 191, 208, 23, 11, 189, 154, 163, 147, 61, 91, 192, 186, 61, 191, 103, 46, 190, 57, 212, 144, 188, 172, 209, 234, 189, 235, 57, 139, 189, 182, 180, 130, 60, 61, 172, 174, 189, 22, 45, 235, 187, 152, 194, 156, 189, 222, 170, 124, 189, 72, 30, 108, 188, 177, 173, 188, 60, 205, 150, 225, 189, 232, 138, 48, 190, 92, 231, 73, 190, 209, 7, 154, 188, 66, 84, 247, 189, 220, 238, 154, 188, 15, 138, 120, 60, 251, 34, 22, 189, 218, 111, 142, 189, 35, 196, 22, 62, 100, 121, 19, 61, 120, 60, 52, 190, 101, 46, 32, 61, 111, 173, 21, 61, 149, 200, 169, 62, 242, 190, 229, 61, 245, 73, 61, 60, 189, 61, 10, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 112, 0, 190, 153, 78, 101, 62, 51, 152, 88, 62, 102, 19, 84, 62, 245, 40, 149, 62, 183, 151, 63, 188, 173, 86, 32, 189, 106, 0, 244, 61, 141, 132, 137, 189, 193, 47, 187, 60, 69, 241, 148, 189, 121, 138, 131, 189, 118, 133, 199, 62, 209, 194, 54, 190, 5, 74, 134, 62, 78, 241, 164, 62, 26, 155, 93, 190, 96, 5, 31, 190, 86, 223, 185, 61, 251, 230, 134, 62, 156, 101, 133, 62, 171, 232, 38, 62, 130, 112, 201, 61, 131, 96, 174, 62, 87, 32, 19, 62, 18, 150, 32, 189, 12, 110, 32, 61, 169, 75, 56, 190, 81, 106, 111, 62, 71, 99, 5, 189, 128, 151, 12, 60, 152, 83, 127, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 235, 112, 61, 3, 128, 135, 190, 111, 159, 77, 189, 6, 146, 160, 62, 91, 152, 217, 62, 71, 99, 232, 62, 206, 164, 190, 62, 221, 5, 156, 188, 226, 228, 81, 61, 124, 206, 61, 191, 35, 90, 172, 187, 94, 103, 145, 190, 63, 86, 3, 61, 44, 130, 184, 190, 124, 34, 230, 61, 43, 100, 144, 189, 200, 33, 63, 191, 124, 179, 192, 189, 215, 30, 91, 63, 254, 191, 5, 63, 242, 128, 16, 191, 234, 228, 36, 189, 69, 9, 37, 191, 10, 189, 199, 62, 193, 88, 115, 63, 6, 199, 50, 62, 91, 176, 9, 62, 135, 33, 235, 189, 212, 107, 130, 191, 214, 194, 18, 190, 159, 22, 79, 191, 54, 190, 6, 190, 212, 197, 200, 61, 86, 160, 26, 190, 43, 11, 87, 189, 99, 184, 3, 190, 200, 195, 141, 190, 50, 47, 199, 61, 107, 72, 71, 62, 65, 124, 190, 190, 135, 239, 244, 60, 132, 220, 155, 62, 55, 135, 23, 62, 148, 4, 14, 62, 50, 190, 153, 190, 251, 68, 86, 62, 24, 128, 157, 189, 247, 118, 85, 190, 86, 205, 218, 61, 87, 159, 135, 61, 117, 140, 194, 61, 35, 161, 160, 61, 189, 247, 196, 189, 178, 151, 104, 190, 183, 105, 13, 190, 225, 34, 115, 190, 255, 41, 160, 62, 142, 232, 56, 55, 68, 0, 52, 190, 102, 220, 77, 62, 54, 121, 3, 62, 79, 5, 127, 60, 150, 27, 210, 189, 181, 210, 147, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {205, 214, 114, 62, 124, 101, 26, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {3, 199, 91, 63, 37, 19, 203, 191, 252, 218, 27, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {49, 9, 239, 63, 241, 238, 83, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0028/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}