// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 191, 89, 63, 56, 181, 203, 190, 79, 186, 205, 190, 122, 240, 180, 190, 25, 155, 59, 62, 238, 17, 128, 187, 160, 134, 206, 60, 134, 80, 64, 63, 132, 134, 11, 63, 137, 229, 23, 63, 20, 88, 71, 63, 227, 0, 168, 62, 188, 19, 97, 190, 65, 121, 166, 62, 160, 188, 7, 63, 130, 99, 89, 62, 173, 217, 153, 191, 133, 190, 118, 190, 208, 63, 34, 63, 214, 228, 175, 191, 199, 37, 129, 190, 46, 233, 93, 61, 134, 96, 175, 191, 65, 220, 25, 60, 40, 180, 15, 187, 207, 211, 82, 191, 149, 82, 89, 62, 254, 193, 14, 191, 148, 227, 154, 191, 126, 77, 135, 191, 88, 6, 209, 62, 4, 222, 36, 63, 232, 131, 169, 190, 26, 150, 27, 63, 182, 22, 218, 63, 99, 180, 152, 62, 88, 47, 198, 61, 49, 111, 99, 191, 57, 148, 207, 190, 61, 131, 58, 191, 96, 74, 169, 63, 83, 119, 130, 62, 23, 60, 222, 188, 127, 166, 185, 191, 152, 209, 157, 61, 2, 131, 36, 191, 144, 34, 113, 60, 237, 103, 218, 189, 123, 154, 241, 62, 178, 192, 235, 63, 177, 84, 5, 63, 90, 130, 158, 62, 226, 98, 103, 61, 34, 210, 215, 190, 141, 83, 88, 191, 213, 237, 5, 63, 99, 125, 30, 191, 176, 188, 16, 63, 112, 58, 118, 190, 132, 166, 159, 189, 156, 103, 233, 190, 89, 141, 168, 190, 65, 58, 78, 62, 191, 232, 25, 63, 55, 158, 30, 61, 95, 153, 44, 63, 77, 242, 187, 62, 204, 9, 77, 63, 131, 49, 137, 60, 197, 195, 97, 190, 121, 181, 213, 190, 156, 158, 120, 189, 232, 126, 136, 190, 204, 149, 180, 63, 87, 122, 147, 60, 69, 86, 101, 190, 238, 86, 156, 63, 241, 241, 204, 62, 237, 190, 149, 190, 28, 230, 103, 62, 114, 31, 250, 190, 96, 145, 40, 191, 136, 238, 50, 191, 160, 232, 49, 190, 172, 226, 21, 62, 249, 211, 70, 63, 192, 113, 230, 190, 163, 136, 133, 190, 141, 123, 190, 62, 102, 83, 133, 190, 59, 221, 104, 191, 147, 157, 160, 188, 14, 66, 89, 62, 187, 219, 248, 62, 166, 4, 73, 190, 113, 187, 87, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 6, 90, 191, 28, 14, 217, 62, 81, 250, 242, 189, 219, 65, 47, 191, 145, 254, 218, 190, 207, 185, 23, 61, 164, 61, 95, 190, 34, 110, 163, 189, 99, 21, 200, 62, 219, 7, 71, 188, 171, 89, 81, 62, 34, 73, 100, 61, 204, 143, 178, 62, 135, 250, 141, 61, 91, 227, 81, 62, 160, 22, 24, 63, 75, 211, 60, 62, 116, 228, 68, 62, 237, 40, 192, 190, 151, 243, 224, 190, 131, 247, 9, 191, 12, 224, 53, 62, 161, 148, 45, 63, 188, 7, 67, 62, 153, 9, 135, 190, 32, 123, 19, 61, 113, 139, 179, 190, 29, 132, 20, 63, 111, 244, 247, 189, 151, 12, 219, 62, 51, 35, 75, 191, 46, 70, 174, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {205, 129, 231, 190, 203, 78, 72, 62, 130, 52, 188, 191, 185, 56, 229, 188, 168, 19, 250, 190, 179, 210, 13, 190, 254, 8, 102, 190, 172, 152, 218, 190, 164, 243, 33, 63, 62, 240, 57, 62, 122, 87, 147, 189, 61, 136, 133, 63, 228, 74, 209, 61, 2, 231, 3, 62, 63, 95, 210, 62, 158, 183, 129, 62, 2, 139, 170, 191, 131, 134, 132, 190, 255, 192, 8, 190, 74, 59, 120, 191, 232, 243, 208, 62, 126, 36, 233, 190, 66, 5, 56, 61, 147, 251, 77, 188, 188, 79, 241, 61, 1, 179, 197, 61, 30, 11, 164, 62, 206, 168, 255, 61, 240, 195, 154, 190, 213, 99, 134, 62, 103, 166, 135, 189, 49, 242, 35, 190, 207, 132, 157, 189, 223, 142, 74, 190, 180, 22, 216, 189, 211, 20, 7, 62, 227, 12, 4, 61, 196, 61, 180, 60, 136, 157, 183, 188, 83, 123, 182, 189, 217, 11, 172, 189, 133, 82, 175, 61, 64, 52, 91, 190, 121, 134, 173, 61, 153, 11, 164, 61, 84, 138, 74, 190, 114, 255, 89, 61, 159, 33, 150, 189, 224, 60, 66, 59, 67, 252, 49, 190, 16, 163, 249, 61, 225, 19, 44, 62, 242, 55, 21, 62, 118, 53, 5, 190, 56, 107, 66, 190, 164, 95, 224, 189, 157, 227, 222, 188, 189, 43, 8, 62, 254, 49, 240, 59, 148, 241, 139, 188, 41, 228, 228, 189, 163, 7, 114, 189, 177, 69, 47, 60, 99, 146, 17, 62, 155, 247, 47, 191, 142, 238, 151, 186, 14, 145, 4, 61, 129, 94, 207, 62, 49, 130, 140, 190, 33, 86, 239, 190, 4, 96, 5, 191, 255, 153, 72, 190, 108, 41, 190, 186, 203, 106, 1, 61, 2, 223, 227, 61, 109, 45, 27, 63, 176, 213, 204, 61, 32, 73, 172, 190, 144, 141, 230, 189, 203, 232, 32, 190, 208, 17, 97, 62, 184, 119, 218, 189, 221, 185, 230, 189, 106, 57, 206, 190, 146, 147, 19, 62, 180, 26, 173, 62, 42, 124, 151, 62, 171, 117, 69, 190, 139, 253, 145, 62, 210, 159, 164, 60, 188, 114, 217, 62, 15, 59, 28, 191, 97, 117, 72, 190, 185, 202, 201, 62, 160, 181, 127, 190, 23, 31, 52, 62, 243, 223, 105, 60, 156, 136, 218, 60, 198, 4, 244, 60, 3, 219, 31, 191, 40, 243, 13, 62, 75, 56, 229, 187, 223, 239, 1, 62, 100, 222, 168, 62, 145, 103, 63, 62, 210, 108, 17, 61, 234, 42, 225, 58, 123, 19, 123, 191, 86, 33, 19, 62, 67, 143, 40, 191, 83, 218, 3, 62, 150, 25, 121, 62, 196, 84, 90, 191, 90, 97, 11, 61, 243, 147, 231, 61, 15, 111, 46, 63, 7, 7, 35, 62, 96, 233, 98, 61, 1, 185, 156, 60, 38, 66, 115, 60, 6, 127, 124, 190, 182, 166, 232, 190, 220, 172, 222, 189, 50, 211, 223, 61, 194, 173, 28, 61, 125, 230, 212, 188, 143, 30, 158, 189, 158, 230, 244, 189, 220, 232, 98, 62, 161, 108, 218, 189, 173, 71, 149, 62, 223, 229, 95, 190, 88, 216, 119, 62, 38, 19, 103, 61, 241, 16, 66, 62, 200, 212, 50, 62, 86, 4, 40, 190, 204, 126, 216, 190, 35, 252, 4, 62, 106, 181, 236, 190, 126, 159, 14, 62, 111, 183, 131, 62, 13, 26, 190, 190, 106, 32, 131, 60, 182, 207, 3, 62, 97, 32, 151, 62, 4, 123, 114, 191, 211, 106, 131, 190, 148, 58, 241, 190, 169, 76, 16, 190, 78, 189, 219, 62, 21, 51, 41, 189, 154, 23, 7, 189, 230, 120, 228, 61, 51, 152, 181, 190, 210, 60, 156, 190, 62, 144, 246, 62, 117, 42, 135, 61, 217, 213, 189, 61, 190, 175, 23, 62, 139, 27, 126, 61, 250, 89, 9, 191, 91, 28, 11, 61, 253, 34, 210, 62, 175, 96, 94, 61, 20, 57, 70, 190, 111, 244, 70, 190, 185, 168, 33, 190, 135, 134, 203, 189, 101, 30, 128, 61, 1, 84, 151, 189, 58, 33, 154, 62, 79, 33, 79, 190, 161, 188, 112, 190, 63, 13, 106, 189, 251, 74, 56, 191, 136, 234, 3, 62, 178, 102, 1, 190, 165, 120, 11, 190, 3, 168, 62, 190, 25, 98, 226, 61, 99, 135, 98, 62, 121, 202, 147, 187, 71, 123, 19, 190, 30, 101, 43, 190, 158, 129, 167, 188, 129, 102, 174, 61, 15, 155, 82, 191, 20, 245, 105, 190, 171, 177, 179, 58, 200, 216, 137, 189, 247, 19, 194, 62, 163, 85, 152, 188, 162, 129, 27, 187, 118, 210, 173, 61, 88, 115, 251, 61, 135, 198, 26, 190, 37, 61, 174, 189, 119, 74, 8, 62, 149, 113, 4, 190, 30, 61, 51, 190, 253, 75, 59, 190, 147, 147, 239, 61, 55, 220, 28, 190, 150, 146, 149, 61, 212, 177, 31, 189, 250, 18, 131, 189, 55, 22, 133, 187, 182, 118, 50, 190, 89, 251, 16, 62, 31, 247, 133, 189, 196, 1, 25, 190, 55, 27, 101, 189, 42, 105, 58, 187, 181, 2, 70, 190, 177, 88, 15, 61, 228, 47, 26, 190, 167, 250, 244, 188, 16, 249, 35, 187, 57, 184, 188, 61, 250, 254, 172, 61, 209, 102, 210, 189, 82, 47, 204, 61, 142, 19, 33, 62, 37, 98, 218, 189, 8, 138, 234, 187, 152, 218, 112, 189, 136, 85, 80, 191, 109, 175, 235, 59, 52, 174, 86, 190, 210, 106, 26, 62, 200, 8, 128, 62, 123, 211, 136, 62, 126, 209, 74, 190, 236, 161, 237, 61, 183, 250, 146, 191, 72, 6, 80, 62, 136, 12, 48, 190, 72, 105, 128, 62, 194, 194, 57, 62, 13, 240, 97, 190, 226, 118, 20, 62, 234, 124, 145, 189, 231, 248, 50, 61, 95, 108, 145, 62, 4, 249, 155, 61, 37, 78, 40, 61, 35, 199, 96, 61, 160, 224, 139, 60, 170, 2, 75, 190, 56, 94, 199, 189, 119, 85, 92, 62, 17, 161, 208, 61, 240, 196, 52, 62, 169, 58, 28, 63, 111, 200, 144, 61, 139, 65, 139, 191, 40, 58, 50, 189, 102, 105, 39, 189, 84, 220, 89, 62, 199, 252, 197, 61, 30, 246, 6, 191, 198, 2, 88, 189, 150, 150, 210, 189, 55, 224, 36, 62, 236, 6, 39, 191, 172, 212, 146, 62, 24, 188, 152, 62, 102, 59, 224, 61, 131, 146, 23, 62, 146, 121, 45, 190, 42, 184, 49, 190, 246, 93, 249, 60, 166, 54, 153, 190, 201, 43, 253, 190, 194, 245, 198, 62, 245, 240, 165, 60, 138, 184, 148, 61, 37, 124, 157, 62, 202, 208, 118, 62, 97, 20, 30, 61, 50, 136, 19, 62, 67, 171, 40, 190, 240, 225, 168, 190, 235, 182, 53, 191, 187, 108, 163, 190, 167, 97, 203, 189, 88, 2, 20, 62, 144, 154, 14, 63, 192, 130, 0, 62, 150, 58, 65, 62, 150, 141, 3, 191, 136, 213, 34, 62, 228, 170, 53, 63, 225, 65, 192, 62, 34, 144, 236, 62, 114, 218, 141, 62, 35, 59, 157, 191, 220, 190, 11, 191, 163, 152, 99, 191, 31, 241, 168, 190, 50, 162, 222, 62, 187, 145, 62, 190, 201, 12, 31, 62, 19, 126, 163, 61, 228, 68, 253, 61, 254, 11, 206, 190, 158, 176, 17, 190, 228, 213, 155, 190, 187, 101, 160, 190, 123, 67, 134, 62, 99, 115, 244, 61, 84, 86, 102, 63, 156, 18, 246, 61, 142, 104, 37, 191, 242, 145, 165, 186, 217, 96, 86, 190, 70, 19, 12, 191, 113, 194, 101, 62, 155, 66, 33, 190, 46, 26, 216, 189, 167, 41, 80, 62, 170, 209, 138, 61, 221, 102, 84, 61, 127, 155, 228, 189, 21, 143, 15, 190, 85, 15, 128, 60, 136, 213, 25, 62, 249, 23, 148, 188, 160, 86, 123, 190, 120, 183, 220, 61, 177, 235, 91, 189, 51, 225, 229, 189, 216, 217, 143, 189, 211, 4, 204, 62, 116, 85, 90, 61, 69, 42, 20, 62, 109, 4, 139, 60, 145, 87, 80, 189, 240, 163, 134, 190, 209, 223, 172, 189, 119, 133, 172, 61, 59, 30, 164, 62, 56, 63, 94, 189, 194, 110, 220, 62, 19, 225, 157, 188, 214, 118, 137, 189, 75, 49, 81, 190, 79, 195, 103, 61, 100, 61, 127, 62, 224, 56, 90, 190, 242, 48, 135, 60, 11, 147, 63, 189, 172, 52, 156, 61, 162, 84, 67, 61, 108, 223, 28, 190, 155, 117, 189, 61, 114, 64, 119, 60, 146, 84, 80, 190, 55, 35, 9, 191, 113, 87, 55, 189, 179, 112, 43, 191, 42, 160, 178, 190, 151, 12, 10, 59, 7, 121, 212, 191, 83, 8, 148, 62, 59, 155, 42, 191, 225, 48, 117, 62, 152, 102, 74, 62, 228, 218, 241, 62, 35, 43, 85, 191, 34, 189, 143, 61, 140, 239, 179, 190, 215, 18, 226, 61, 162, 252, 66, 62, 200, 151, 44, 190, 175, 5, 41, 62, 120, 51, 140, 62, 247, 248, 4, 191, 197, 24, 114, 189, 55, 190, 49, 190, 80, 110, 23, 62, 23, 75, 231, 61, 74, 108, 74, 186, 118, 45, 225, 190, 250, 145, 95, 189, 164, 29, 207, 190, 196, 150, 231, 189, 107, 159, 191, 190, 245, 135, 146, 190, 109, 16, 100, 190, 219, 210, 64, 191, 74, 123, 200, 61, 104, 205, 20, 62, 152, 122, 66, 62, 85, 141, 44, 63, 241, 5, 196, 59, 60, 99, 137, 61, 154, 151, 156, 62, 136, 33, 249, 61, 99, 111, 144, 190, 107, 108, 155, 190, 241, 105, 245, 189, 0, 237, 24, 191, 239, 35, 58, 63, 38, 138, 155, 62, 143, 219, 3, 189, 48, 109, 190, 60, 161, 140, 85, 61, 58, 89, 187, 190, 30, 139, 160, 62, 18, 207, 31, 190, 177, 154, 214, 190, 160, 97, 18, 62, 193, 57, 84, 62, 159, 193, 66, 62, 83, 241, 186, 189, 101, 148, 181, 61, 183, 79, 31, 61, 202, 6, 110, 190, 83, 94, 191, 190, 107, 246, 188, 190, 65, 152, 156, 190, 173, 144, 241, 190, 60, 250, 176, 191, 247, 19, 243, 61, 98, 147, 145, 62, 59, 103, 210, 189, 237, 225, 204, 61, 56, 108, 140, 62, 171, 147, 79, 191, 24, 180, 188, 189, 227, 34, 171, 62, 159, 4, 232, 189, 7, 172, 157, 190, 245, 67, 149, 63, 85, 176, 47, 191, 231, 180, 35, 191, 135, 223, 19, 63, 136, 222, 241, 189, 121, 33, 177, 61, 211, 105, 180, 190, 220, 3, 208, 61, 71, 182, 74, 190, 134, 128, 61, 62, 12, 174, 51, 62, 221, 141, 215, 189, 87, 43, 133, 191, 184, 210, 79, 63, 80, 89, 2, 190, 227, 190, 25, 62, 195, 196, 68, 191, 240, 175, 142, 61, 221, 164, 198, 62, 122, 211, 101, 62, 195, 253, 199, 62, 46, 132, 151, 62, 103, 196, 121, 191, 50, 161, 2, 189, 126, 71, 107, 191, 27, 15, 82, 190, 1, 182, 44, 62, 17, 157, 22, 187, 37, 13, 2, 190, 156, 54, 225, 190, 241, 67, 151, 61, 199, 255, 4, 60, 135, 46, 54, 190, 209, 45, 210, 61, 28, 193, 80, 190, 232, 254, 174, 61, 230, 85, 185, 61, 96, 163, 17, 190, 23, 122, 33, 189, 117, 73, 67, 191, 70, 232, 144, 60, 227, 128, 76, 62, 37, 198, 133, 190, 168, 2, 5, 63, 120, 97, 163, 61, 220, 214, 176, 190, 22, 212, 245, 61, 158, 159, 245, 190, 211, 20, 178, 190, 18, 24, 12, 191, 130, 143, 189, 189, 38, 153, 77, 190, 115, 124, 151, 190, 187, 46, 136, 62, 133, 139, 34, 60, 5, 184, 89, 61, 213, 147, 10, 63, 103, 121, 191, 189, 130, 53, 161, 61, 25, 2, 217, 61, 188, 69, 70, 62, 98, 124, 91, 61, 190, 134, 166, 190, 141, 88, 95, 189, 253, 190, 46, 191, 143, 121, 43, 63, 55, 7, 99, 62, 192, 230, 152, 61, 148, 13, 160, 188, 127, 170, 74, 62, 86, 96, 85, 189, 130, 82, 106, 189, 251, 14, 60, 62, 171, 130, 121, 190, 3, 211, 4, 62, 124, 202, 20, 62, 182, 89, 144, 190, 116, 218, 41, 190, 63, 121, 93, 61, 190, 201, 56, 191, 210, 79, 70, 191, 18, 237, 4, 191, 209, 69, 66, 190, 43, 147, 231, 61, 101, 179, 229, 61, 38, 143, 239, 61, 181, 145, 238, 59, 182, 117, 133, 62, 98, 2, 66, 189, 39, 149, 130, 62, 243, 191, 82, 190, 27, 118, 120, 62, 125, 233, 187, 61, 62, 201, 80, 190, 69, 41, 17, 62, 109, 232, 189, 59, 152, 7, 159, 190, 218, 255, 87, 190, 114, 111, 219, 62, 39, 240, 175, 62, 84, 165, 75, 62, 152, 55, 81, 61, 61, 207, 201, 190, 20, 198, 15, 62, 7, 20, 65, 62, 210, 57, 19, 190, 154, 216, 141, 60, 209, 254, 10, 191, 252, 177, 9, 63, 208, 232, 247, 189, 77, 15, 151, 62, 203, 81, 55, 62, 75, 143, 149, 190, 217, 23, 187, 189, 145, 202, 158, 60, 179, 31, 155, 60, 197, 86, 65, 61, 210, 81, 121, 189, 108, 0, 97, 190, 238, 96, 162, 62, 230, 205, 191, 190, 90, 51, 227, 61, 80, 151, 6, 188, 249, 35, 190, 61, 71, 210, 147, 62, 53, 97, 144, 61, 0, 231, 155, 61, 188, 68, 15, 190, 53, 10, 45, 189, 45, 1, 175, 189, 199, 54, 35, 62, 101, 53, 198, 62, 212, 234, 1, 62, 209, 252, 7, 62, 18, 141, 180, 189, 245, 194, 181, 189, 211, 2, 88, 189, 140, 187, 196, 61, 106, 44, 83, 62, 174, 87, 171, 61, 80, 132, 155, 60, 43, 87, 165, 62, 34, 178, 36, 191, 4, 163, 14, 62, 252, 246, 227, 62, 18, 241, 22, 189, 40, 204, 128, 62, 51, 22, 183, 62, 6, 105, 180, 62, 133, 166, 22, 190, 100, 133, 238, 62, 96, 226, 9, 191, 156, 154, 88, 62, 106, 57, 6, 62, 218, 62, 140, 190, 48, 69, 159, 62, 125, 96, 30, 191, 207, 204, 60, 187, 122, 7, 45, 189, 100, 217, 158, 190, 225, 244, 155, 189, 162, 55, 243, 189, 15, 187, 203, 61, 45, 63, 154, 190, 95, 136, 14, 62, 158, 36, 203, 189, 100, 124, 220, 61, 84, 218, 132, 61, 240, 118, 77, 190, 57, 93, 181, 188, 145, 110, 217, 190, 243, 219, 142, 189, 204, 126, 54, 62, 150, 217, 205, 188, 44, 148, 174, 190, 31, 110, 154, 190, 31, 222, 7, 60, 1, 176, 75, 190, 175, 35, 53, 60, 195, 8, 119, 62, 82, 120, 30, 61, 125, 118, 129, 62, 99, 69, 203, 59, 81, 105, 61, 60, 164, 140, 243, 188, 177, 32, 160, 62, 91, 166, 205, 188, 184, 86, 169, 62, 110, 1, 95, 190, 197, 126, 140, 190, 1, 109, 71, 190, 15, 116, 133, 190, 155, 161, 21, 190, 39, 137, 53, 190, 7, 45, 20, 190, 137, 3, 222, 189, 60, 153, 179, 61, 31, 38, 90, 62, 166, 110, 73, 189, 8, 235, 102, 188, 146, 2, 47, 190, 152, 193, 182, 190, 80, 81, 86, 190, 64, 139, 48, 190, 162, 144, 37, 190, 151, 183, 148, 190, 111, 168, 48, 190, 0, 240, 207, 188, 13, 146, 200, 61, 173, 90, 71, 189, 229, 88, 46, 191, 111, 94, 110, 190, 165, 42, 83, 191, 242, 186, 173, 61, 240, 227, 175, 190, 179, 220, 118, 62, 170, 137, 202, 62, 186, 157, 138, 188, 199, 170, 87, 190, 174, 98, 244, 190, 85, 239, 165, 189, 17, 183, 158, 61, 122, 86, 181, 189, 191, 213, 253, 61, 208, 19, 42, 190, 34, 58, 154, 189, 6, 177, 44, 62, 60, 55, 87, 62, 232, 14, 196, 190, 95, 128, 230, 190, 171, 42, 220, 188, 203, 211, 15, 191, 163, 159, 67, 191, 57, 193, 145, 60, 171, 227, 25, 61, 28, 220, 11, 190, 7, 78, 177, 62, 125, 240, 58, 190, 230, 219, 215, 189, 11, 114, 109, 61, 231, 103, 181, 62, 150, 45, 68, 190, 233, 237, 225, 190, 82, 111, 249, 190, 22, 198, 76, 60, 44, 184, 171, 61, 31, 55, 79, 189, 127, 241, 149, 62, 73, 70, 3, 63, 15, 234, 218, 60, 36, 62, 195, 190, 110, 180, 193, 189, 53, 203, 4, 191, 146, 57, 142, 61, 111, 206, 90, 189, 32, 158, 147, 188, 135, 11, 245, 189, 168, 15, 16, 61, 207, 146, 93, 62, 112, 52, 62, 62, 158, 253, 9, 190, 33, 189, 73, 62, 235, 91, 13, 59, 191, 213, 128, 62, 232, 197, 95, 191, 12, 103, 33, 61, 102, 71, 73, 62, 177, 76, 217, 189, 146, 159, 216, 62, 61, 30, 58, 190, 113, 210, 31, 61, 163, 69, 250, 60, 202, 98, 54, 189, 131, 82, 140, 61, 198, 56, 224, 61, 62, 45, 14, 62, 167, 45, 223, 61, 213, 133, 5, 62, 225, 167, 154, 191, 56, 207, 88, 190, 48, 202, 161, 190, 251, 90, 26, 190, 48, 76, 120, 62, 60, 122, 128, 61, 138, 7, 240, 189, 57, 71, 198, 189, 244, 144, 2, 190, 204, 247, 106, 190, 96, 192, 219, 60, 230, 64, 154, 190, 28, 119, 1, 62, 58, 5, 121, 61, 244, 90, 78, 61, 235, 85, 188, 61, 53, 3, 180, 58, 38, 96, 155, 190, 5, 244, 240, 188, 38, 246, 55, 191, 223, 183, 225, 190, 4, 174, 95, 62, 140, 17, 29, 61, 113, 184, 100, 189, 202, 186, 47, 190, 32, 103, 162, 61, 204, 91, 11, 190, 162, 151, 15, 190, 117, 15, 161, 189, 31, 74, 42, 190, 207, 171, 12, 190, 227, 81, 19, 190, 8, 137, 209, 61, 29, 179, 252, 189, 138, 103, 28, 62, 244, 8, 156, 189, 53, 118, 127, 61, 143, 255, 58, 61, 242, 240, 7, 61, 138, 15, 214, 189, 122, 86, 110, 189, 35, 176, 19, 189, 176, 237, 93, 188, 177, 231, 246, 60, 162, 202, 47, 61, 28, 13, 31, 190, 127, 90, 6, 190, 78, 34, 216, 189, 120, 170, 129, 61, 40, 68, 209, 61, 140, 203, 18, 62, 47, 128, 216, 189, 7, 218, 238, 189, 246, 209, 63, 189, 218, 199, 45, 62, 116, 180, 66, 190, 251, 238, 5, 190, 110, 99, 155, 61, 67, 97, 134, 189, 231, 103, 124, 189, 101, 145, 32, 190, 126, 42, 127, 61, 117, 123, 251, 189, 193, 72, 235, 189, 159, 49, 72, 60, 127, 219, 236, 58, 77, 107, 104, 61, 255, 3, 7, 62, 76, 165, 169, 189, 172, 153, 146, 60, 90, 114, 22, 190, 100, 76, 14, 190, 117, 199, 121, 58, 186, 4, 168, 61, 234, 182, 197, 189, 74, 241, 196, 189, 83, 197, 255, 189, 206, 37, 47, 61, 227, 156, 219, 189, 134, 67, 200, 189, 106, 138, 50, 62, 221, 45, 16, 62, 186, 20, 202, 189, 48, 181, 184, 188, 181, 68, 42, 190, 172, 29, 19, 190, 62, 9, 19, 62, 178, 144, 82, 188, 248, 40, 160, 60, 140, 104, 14, 62, 166, 223, 159, 60, 174, 120, 194, 189, 14, 103, 8, 59, 199, 37, 170, 188, 50, 40, 253, 189, 18, 128, 131, 189, 49, 1, 241, 189, 177, 78, 25, 189, 9, 251, 184, 189, 251, 237, 218, 61, 28, 96, 211, 189, 133, 181, 3, 190, 120, 205, 1, 190, 179, 234, 81, 61, 201, 196, 183, 61, 40, 218, 28, 190, 39, 61, 23, 62, 10, 168, 229, 186, 178, 128, 211, 189, 166, 138, 230, 189, 140, 172, 174, 189, 139, 95, 40, 190, 247, 123, 26, 190, 21, 173, 249, 61, 78, 228, 10, 62, 253, 190, 140, 189, 19, 43, 167, 60, 2, 223, 176, 60, 99, 136, 4, 62, 244, 28, 63, 190, 101, 70, 188, 189, 75, 12, 227, 189, 168, 118, 114, 60, 75, 183, 236, 189, 234, 132, 145, 188, 158, 172, 241, 59, 177, 229, 252, 60, 39, 148, 140, 61, 194, 106, 12, 62, 211, 255, 21, 190, 108, 108, 240, 189, 217, 219, 102, 59, 251, 184, 125, 189, 74, 239, 241, 188, 185, 57, 225, 189, 178, 96, 233, 60, 97, 102, 65, 61, 39, 173, 246, 189, 99, 10, 166, 61, 180, 153, 228, 189, 168, 25, 193, 59, 0, 162, 122, 61, 17, 0, 50, 190, 61, 254, 51, 189, 75, 206, 192, 189, 194, 104, 184, 59, 61, 57, 238, 189, 247, 165, 178, 189, 5, 217, 85, 190, 251, 221, 225, 188, 134, 190, 218, 61, 209, 113, 251, 190, 110, 203, 23, 62, 236, 14, 185, 189, 238, 0, 157, 189, 164, 23, 227, 190, 102, 17, 124, 190, 16, 192, 195, 190, 220, 123, 172, 190, 18, 41, 3, 189, 224, 187, 116, 61, 149, 142, 163, 62, 160, 204, 12, 63, 198, 67, 155, 188, 144, 146, 64, 62, 65, 233, 11, 62, 95, 241, 30, 62, 67, 181, 157, 58, 0, 246, 29, 190, 85, 208, 120, 60, 87, 61, 51, 191, 170, 92, 114, 62, 101, 159, 108, 62, 136, 9, 74, 62, 231, 121, 205, 189, 173, 111, 0, 62, 64, 60, 241, 61, 187, 255, 159, 62, 127, 85, 187, 61, 74, 113, 172, 190, 3, 202, 254, 61, 5, 11, 187, 190, 171, 200, 29, 189, 238, 28, 29, 189, 152, 51, 30, 190, 78, 163, 201, 59, 183, 142, 212, 184, 25, 53, 41, 188, 216, 16, 33, 190, 171, 116, 139, 189, 146, 0, 58, 59, 184, 149, 53, 189, 85, 90, 27, 190, 139, 60, 236, 59, 2, 206, 246, 189, 47, 45, 161, 60, 158, 71, 154, 61, 110, 180, 159, 189, 29, 56, 28, 62, 79, 227, 167, 189, 140, 171, 33, 190, 252, 71, 178, 189, 43, 41, 140, 189, 223, 193, 16, 190, 176, 246, 240, 60, 34, 148, 100, 189, 198, 207, 49, 190, 235, 96, 6, 190, 117, 72, 8, 190, 142, 1, 110, 189, 87, 97, 182, 189, 176, 83, 245, 189, 30, 124, 28, 190, 79, 29, 20, 62, 2, 238, 133, 60, 148, 97, 40, 191, 244, 13, 151, 60, 62, 198, 188, 189, 33, 35, 216, 189, 144, 184, 191, 190, 29, 32, 18, 191, 242, 228, 27, 191, 14, 115, 60, 189, 241, 128, 235, 189, 227, 167, 147, 189, 45, 30, 58, 60, 246, 139, 146, 62, 185, 127, 70, 61, 80, 74, 161, 61, 57, 97, 226, 190, 78, 79, 142, 61, 28, 61, 11, 190, 222, 83, 226, 189, 132, 129, 30, 62, 191, 129, 142, 190, 8, 139, 30, 190, 177, 178, 184, 61, 102, 235, 225, 62, 154, 129, 248, 188, 165, 199, 136, 62, 181, 164, 21, 190, 173, 217, 235, 188, 229, 99, 6, 190, 157, 104, 222, 61, 190, 244, 236, 61, 52, 23, 174, 188, 232, 48, 222, 189, 114, 57, 134, 190, 244, 118, 95, 60, 49, 68, 20, 189, 178, 28, 187, 62, 236, 166, 61, 190, 78, 132, 189, 190, 56, 8, 219, 190, 54, 35, 183, 190, 148, 182, 18, 189, 232, 172, 23, 62, 158, 48, 132, 62, 177, 58, 194, 62, 15, 49, 126, 62, 86, 140, 198, 61, 30, 245, 38, 60, 170, 100, 230, 188, 173, 13, 78, 62, 16, 197, 209, 189, 185, 173, 127, 189, 4, 6, 44, 191, 107, 161, 188, 188, 45, 70, 186, 62, 117, 214, 22, 60, 155, 127, 207, 61, 202, 137, 16, 62, 93, 255, 62, 189, 177, 28, 191, 62, 249, 72, 64, 190, 61, 37, 208, 190, 193, 131, 142, 62, 159, 230, 176, 190, 167, 102, 38, 61, 226, 151, 85, 190, 173, 234, 117, 189, 154, 236, 32, 62, 181, 54, 55, 61, 92, 35, 158, 62, 143, 159, 42, 191, 145, 54, 20, 191, 224, 140, 2, 189, 119, 238, 62, 62, 211, 116, 155, 190, 253, 128, 221, 190, 213, 10, 61, 61, 62, 242, 250, 190, 123, 66, 164, 60, 145, 37, 92, 62, 75, 103, 182, 189, 178, 238, 148, 190, 172, 114, 193, 190, 130, 80, 67, 190, 123, 61, 40, 61, 100, 143, 130, 62, 21, 194, 166, 187, 171, 210, 116, 190, 195, 125, 157, 61, 3, 58, 255, 190, 52, 159, 99, 60, 22, 249, 218, 190, 26, 13, 91, 61, 208, 167, 162, 190, 197, 167, 78, 190, 53, 84, 195, 62, 78, 131, 157, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 217, 171, 62, 160, 23, 49, 190, 89, 181, 89, 60, 120, 162, 45, 62, 224, 220, 134, 62, 158, 148, 3, 190, 214, 194, 200, 189, 244, 239, 116, 62, 118, 109, 126, 62, 197, 77, 141, 62, 55, 224, 151, 62, 201, 53, 129, 61, 23, 42, 75, 62, 109, 217, 19, 61, 150, 183, 93, 61, 204, 18, 27, 61, 11, 99, 183, 62, 88, 229, 172, 62, 152, 142, 167, 190, 151, 244, 151, 61, 42, 251, 121, 187, 242, 72, 218, 60, 176, 196, 67, 62, 206, 69, 204, 188, 125, 221, 44, 59, 229, 200, 32, 189, 188, 61, 89, 190, 27, 9, 22, 188, 28, 1, 10, 189, 225, 121, 131, 62, 196, 165, 13, 189, 210, 63, 88, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 228, 103, 191, 29, 55, 207, 61, 92, 3, 23, 191, 99, 72, 180, 62, 36, 237, 27, 63, 232, 103, 228, 190, 214, 81, 227, 188, 211, 218, 164, 62, 249, 59, 217, 189, 246, 173, 198, 63, 195, 203, 97, 60, 213, 72, 44, 63, 12, 134, 237, 190, 243, 9, 50, 63, 252, 83, 133, 63, 196, 249, 137, 190, 233, 52, 26, 61, 169, 97, 56, 62, 113, 237, 40, 191, 156, 165, 243, 59, 119, 128, 147, 61, 244, 212, 190, 190, 48, 107, 188, 61, 104, 113, 253, 61, 195, 141, 12, 62, 146, 1, 143, 60, 234, 124, 159, 60, 2, 30, 90, 190, 93, 126, 156, 61, 200, 36, 23, 191, 118, 166, 35, 190, 216, 26, 188, 190, 214, 228, 255, 62, 248, 3, 20, 60, 216, 160, 182, 189, 127, 227, 38, 62, 100, 103, 20, 190, 131, 61, 46, 62, 242, 82, 219, 185, 81, 15, 212, 190, 23, 171, 141, 190, 255, 102, 111, 63, 173, 178, 190, 190, 118, 228, 173, 61, 176, 9, 150, 62, 147, 177, 26, 190, 30, 82, 43, 63, 80, 132, 138, 62, 5, 231, 28, 191, 127, 235, 213, 190, 59, 25, 20, 62, 209, 253, 138, 190, 142, 98, 16, 63, 135, 12, 141, 190, 147, 130, 138, 190, 217, 148, 243, 189, 69, 53, 246, 189, 42, 170, 121, 189, 131, 15, 207, 61, 87, 236, 64, 60, 78, 18, 165, 188, 131, 67, 207, 62, 107, 82, 153, 189, 121, 184, 60, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 17, 88, 188, 213, 71, 193, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {97, 251, 231, 189, 181, 65, 229, 190, 203, 133, 200, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {120, 232, 122, 190, 101, 249, 170, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0010/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}