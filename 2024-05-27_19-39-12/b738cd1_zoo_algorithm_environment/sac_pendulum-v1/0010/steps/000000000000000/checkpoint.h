// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 18, 123, 189, 141, 178, 94, 190, 106, 116, 6, 191, 205, 66, 216, 189, 109, 115, 165, 60, 81, 168, 25, 189, 76, 27, 129, 190, 66, 105, 166, 190, 56, 138, 124, 62, 251, 138, 13, 190, 3, 74, 208, 61, 2, 38, 193, 62, 56, 138, 245, 190, 37, 249, 166, 190, 10, 23, 139, 62, 251, 225, 128, 61, 101, 19, 201, 188, 131, 201, 156, 190, 13, 32, 175, 62, 92, 94, 16, 191, 174, 111, 181, 190, 221, 247, 123, 62, 107, 205, 15, 191, 240, 242, 8, 190, 74, 36, 209, 60, 162, 80, 238, 190, 69, 191, 2, 62, 158, 57, 84, 190, 39, 81, 237, 62, 50, 68, 14, 191, 129, 31, 182, 62, 215, 205, 4, 63, 157, 244, 123, 190, 195, 23, 177, 62, 201, 108, 4, 63, 106, 7, 137, 62, 52, 172, 177, 62, 96, 32, 162, 189, 1, 209, 144, 190, 234, 182, 12, 191, 104, 150, 5, 63, 39, 8, 196, 62, 170, 61, 221, 62, 172, 107, 19, 191, 174, 134, 68, 62, 17, 79, 107, 61, 247, 230, 83, 62, 91, 31, 49, 60, 96, 175, 156, 189, 56, 203, 252, 62, 143, 58, 19, 63, 207, 1, 184, 62, 95, 38, 19, 60, 165, 63, 162, 190, 197, 110, 4, 191, 151, 116, 193, 62, 241, 55, 231, 190, 31, 218, 112, 61, 177, 215, 17, 190, 113, 63, 3, 189, 164, 12, 15, 190, 77, 105, 192, 190, 232, 166, 172, 61, 229, 63, 251, 62, 46, 99, 237, 190, 82, 192, 13, 63, 39, 42, 162, 62, 173, 13, 154, 61, 233, 65, 26, 190, 30, 165, 44, 62, 62, 57, 42, 59, 198, 160, 101, 190, 191, 227, 143, 190, 174, 182, 8, 63, 153, 250, 163, 61, 98, 164, 208, 190, 28, 103, 201, 190, 175, 115, 8, 63, 132, 110, 122, 190, 209, 1, 193, 62, 159, 74, 33, 190, 173, 37, 158, 188, 55, 171, 41, 60, 176, 231, 158, 190, 247, 62, 176, 62, 240, 184, 220, 62, 23, 115, 140, 190, 238, 222, 60, 190, 127, 231, 213, 62, 102, 108, 154, 189, 51, 192, 13, 191, 77, 12, 10, 191, 77, 84, 135, 61, 208, 25, 182, 62, 246, 136, 88, 190, 178, 96, 36, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 198, 19, 191, 36, 24, 213, 62, 198, 50, 3, 189, 244, 119, 212, 190, 164, 195, 10, 190, 177, 97, 218, 61, 176, 55, 99, 190, 203, 181, 179, 61, 113, 201, 228, 62, 105, 176, 7, 63, 115, 139, 128, 62, 240, 11, 197, 190, 210, 190, 19, 63, 70, 151, 8, 62, 191, 92, 47, 190, 27, 95, 5, 63, 188, 187, 208, 62, 109, 102, 176, 189, 111, 164, 5, 191, 184, 112, 48, 190, 240, 240, 232, 190, 109, 225, 111, 61, 245, 9, 18, 63, 87, 134, 213, 62, 19, 141, 27, 61, 18, 153, 242, 62, 254, 190, 97, 62, 104, 9, 224, 62, 165, 59, 236, 190, 175, 51, 152, 62, 153, 137, 19, 191, 146, 163, 113, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 179, 35, 187, 116, 3, 186, 61, 170, 7, 237, 189, 129, 143, 94, 61, 15, 150, 240, 186, 58, 100, 185, 189, 112, 44, 170, 189, 102, 2, 132, 186, 185, 236, 49, 61, 240, 48, 109, 188, 206, 217, 143, 189, 233, 5, 76, 187, 110, 13, 92, 59, 220, 112, 10, 190, 50, 199, 59, 61, 246, 16, 229, 61, 7, 69, 165, 186, 67, 212, 173, 60, 70, 43, 207, 189, 178, 244, 197, 61, 183, 245, 54, 189, 232, 62, 15, 190, 68, 171, 208, 60, 82, 153, 36, 189, 54, 40, 219, 189, 188, 21, 136, 59, 31, 196, 24, 62, 194, 190, 25, 189, 243, 112, 243, 189, 52, 184, 244, 61, 251, 178, 241, 61, 75, 212, 163, 61, 207, 132, 157, 189, 179, 85, 191, 189, 219, 8, 136, 189, 229, 122, 23, 62, 227, 163, 138, 61, 196, 61, 180, 60, 154, 226, 224, 188, 191, 190, 155, 59, 51, 224, 164, 188, 133, 82, 175, 61, 192, 251, 47, 190, 114, 197, 205, 61, 215, 248, 203, 61, 21, 61, 46, 190, 237, 94, 205, 61, 76, 215, 159, 187, 217, 20, 38, 61, 67, 252, 49, 190, 16, 163, 249, 61, 225, 19, 44, 62, 150, 59, 16, 62, 31, 42, 182, 189, 5, 81, 240, 189, 80, 139, 63, 189, 128, 211, 13, 188, 161, 88, 52, 62, 8, 5, 182, 61, 195, 234, 48, 188, 41, 228, 228, 189, 40, 192, 189, 60, 110, 22, 23, 61, 133, 140, 50, 62, 71, 91, 22, 190, 162, 127, 74, 188, 82, 149, 38, 62, 53, 218, 240, 61, 82, 18, 27, 190, 78, 51, 228, 60, 31, 100, 162, 61, 198, 211, 1, 62, 91, 25, 5, 186, 110, 255, 68, 189, 10, 233, 229, 189, 147, 11, 21, 62, 161, 240, 101, 61, 222, 35, 3, 190, 225, 78, 157, 60, 222, 20, 98, 189, 242, 245, 77, 61, 132, 126, 246, 61, 188, 41, 43, 190, 227, 72, 179, 60, 193, 179, 6, 62, 228, 245, 222, 61, 155, 222, 196, 61, 64, 0, 247, 189, 116, 248, 209, 189, 242, 94, 178, 61, 93, 5, 199, 61, 129, 16, 18, 190, 135, 56, 157, 61, 229, 184, 251, 61, 214, 33, 48, 189, 93, 59, 97, 189, 3, 197, 220, 189, 222, 250, 22, 190, 190, 33, 15, 60, 151, 33, 210, 61, 87, 5, 47, 62, 53, 105, 52, 60, 16, 77, 36, 62, 2, 168, 10, 62, 204, 6, 59, 189, 188, 20, 19, 62, 194, 18, 28, 188, 83, 133, 105, 61, 98, 80, 142, 61, 28, 0, 244, 61, 97, 77, 1, 190, 43, 24, 7, 62, 148, 245, 46, 190, 238, 243, 122, 189, 96, 128, 49, 62, 29, 82, 137, 61, 2, 159, 29, 62, 205, 162, 202, 61, 78, 166, 50, 190, 207, 132, 49, 190, 75, 59, 31, 59, 121, 197, 52, 190, 39, 204, 125, 59, 157, 132, 9, 61, 23, 79, 44, 59, 59, 22, 160, 187, 40, 80, 175, 189, 117, 198, 216, 189, 140, 25, 11, 190, 66, 134, 38, 190, 158, 126, 16, 62, 14, 242, 10, 189, 181, 248, 25, 62, 12, 201, 85, 189, 98, 166, 90, 189, 156, 204, 13, 62, 209, 109, 161, 189, 254, 4, 24, 188, 63, 7, 223, 188, 240, 56, 153, 189, 236, 7, 39, 62, 149, 226, 36, 61, 172, 252, 7, 190, 13, 218, 131, 60, 132, 108, 49, 61, 118, 246, 84, 61, 120, 120, 15, 190, 189, 162, 4, 190, 12, 244, 7, 190, 45, 44, 13, 190, 169, 131, 228, 61, 140, 169, 133, 61, 143, 222, 46, 190, 255, 42, 186, 57, 205, 98, 46, 189, 249, 231, 32, 61, 217, 90, 33, 62, 171, 129, 12, 190, 118, 48, 170, 61, 182, 250, 4, 62, 176, 142, 201, 60, 116, 75, 10, 190, 52, 123, 250, 188, 166, 118, 46, 62, 76, 7, 98, 61, 199, 144, 175, 61, 175, 199, 101, 61, 113, 153, 157, 189, 106, 229, 67, 189, 2, 86, 41, 62, 108, 1, 47, 61, 101, 208, 232, 60, 30, 22, 135, 186, 239, 235, 23, 59, 46, 127, 143, 61, 148, 191, 150, 189, 115, 202, 33, 189, 103, 17, 208, 61, 60, 87, 19, 190, 251, 17, 58, 188, 29, 242, 54, 61, 44, 160, 168, 61, 89, 223, 212, 60, 213, 179, 201, 61, 251, 195, 105, 189, 218, 82, 89, 188, 250, 112, 33, 62, 197, 177, 7, 190, 113, 84, 6, 190, 40, 142, 10, 188, 23, 113, 131, 187, 248, 97, 227, 61, 3, 198, 49, 188, 120, 8, 144, 61, 82, 74, 173, 61, 88, 115, 251, 61, 135, 198, 26, 190, 128, 5, 128, 189, 174, 111, 22, 62, 165, 251, 191, 189, 140, 84, 169, 189, 35, 223, 26, 190, 118, 168, 2, 62, 61, 180, 28, 190, 126, 66, 212, 61, 207, 214, 31, 189, 203, 208, 177, 188, 148, 0, 94, 61, 68, 179, 47, 190, 48, 29, 27, 62, 99, 254, 27, 189, 25, 133, 28, 190, 55, 27, 101, 189, 108, 66, 87, 60, 101, 145, 29, 190, 86, 143, 136, 61, 116, 251, 162, 189, 84, 60, 231, 188, 123, 167, 106, 61, 209, 136, 254, 61, 105, 127, 95, 61, 80, 177, 58, 189, 82, 47, 204, 61, 142, 27, 38, 62, 113, 252, 8, 190, 169, 245, 242, 189, 148, 29, 47, 190, 178, 172, 26, 190, 152, 77, 50, 190, 96, 37, 18, 190, 197, 171, 28, 62, 36, 145, 119, 61, 212, 255, 154, 61, 206, 152, 156, 189, 255, 109, 66, 61, 73, 55, 48, 190, 101, 183, 48, 62, 50, 37, 186, 189, 158, 57, 194, 61, 184, 43, 200, 61, 153, 38, 207, 61, 123, 105, 219, 61, 254, 53, 7, 189, 17, 102, 167, 189, 222, 76, 19, 62, 20, 205, 92, 61, 45, 0, 26, 190, 205, 64, 150, 189, 56, 166, 10, 62, 18, 20, 36, 190, 155, 71, 137, 188, 98, 62, 9, 62, 221, 204, 212, 61, 82, 246, 29, 62, 158, 131, 35, 61, 44, 120, 207, 189, 151, 195, 27, 190, 46, 10, 195, 188, 136, 45, 147, 61, 230, 104, 170, 61, 50, 81, 47, 62, 14, 50, 154, 189, 61, 88, 54, 189, 136, 192, 185, 189, 98, 45, 15, 62, 147, 81, 181, 189, 241, 11, 219, 61, 56, 247, 25, 62, 215, 231, 22, 190, 109, 15, 44, 62, 74, 18, 20, 190, 217, 119, 136, 60, 27, 73, 255, 188, 37, 203, 15, 190, 109, 177, 1, 190, 159, 241, 166, 61, 189, 232, 72, 60, 86, 224, 209, 188, 77, 127, 28, 61, 185, 142, 200, 61, 29, 113, 190, 61, 134, 11, 39, 62, 175, 136, 168, 189, 132, 3, 164, 60, 10, 201, 176, 189, 124, 153, 42, 190, 144, 52, 159, 61, 250, 239, 20, 62, 33, 100, 0, 190, 186, 148, 238, 189, 210, 34, 92, 61, 207, 52, 81, 189, 190, 157, 38, 187, 13, 250, 78, 61, 141, 124, 63, 61, 37, 200, 0, 62, 218, 211, 40, 62, 54, 107, 46, 190, 61, 39, 237, 188, 6, 58, 128, 189, 37, 55, 251, 189, 102, 216, 36, 189, 253, 189, 106, 189, 16, 123, 6, 190, 97, 103, 30, 188, 1, 110, 16, 62, 7, 45, 29, 189, 218, 187, 92, 189, 0, 210, 149, 61, 104, 77, 27, 190, 32, 247, 3, 62, 86, 234, 184, 61, 44, 8, 133, 61, 234, 40, 38, 189, 230, 132, 23, 190, 149, 194, 3, 187, 176, 74, 26, 62, 89, 97, 203, 189, 95, 246, 156, 61, 232, 208, 252, 61, 7, 217, 114, 61, 7, 147, 32, 62, 82, 130, 8, 62, 61, 230, 137, 61, 137, 232, 64, 189, 253, 177, 79, 61, 47, 74, 42, 62, 84, 192, 16, 62, 193, 241, 129, 189, 33, 165, 157, 189, 148, 15, 141, 189, 206, 180, 180, 189, 3, 247, 46, 190, 7, 207, 28, 190, 17, 191, 29, 62, 2, 156, 6, 61, 170, 188, 181, 61, 138, 142, 19, 62, 133, 75, 178, 60, 154, 135, 6, 190, 107, 121, 218, 189, 191, 185, 74, 189, 193, 190, 149, 61, 250, 254, 123, 189, 23, 251, 10, 62, 221, 92, 183, 188, 207, 160, 81, 188, 21, 102, 163, 189, 140, 65, 182, 61, 213, 44, 37, 62, 207, 58, 102, 188, 71, 40, 54, 185, 57, 240, 29, 189, 118, 95, 27, 186, 23, 49, 126, 189, 132, 192, 16, 189, 221, 55, 82, 60, 196, 149, 178, 188, 28, 118, 225, 189, 59, 139, 232, 189, 19, 181, 204, 61, 227, 214, 21, 190, 166, 123, 29, 188, 137, 127, 204, 60, 173, 112, 229, 189, 215, 120, 235, 61, 112, 250, 227, 189, 138, 84, 186, 61, 86, 42, 11, 60, 138, 230, 157, 189, 151, 229, 53, 189, 16, 171, 171, 188, 32, 0, 124, 189, 121, 8, 240, 61, 167, 94, 33, 190, 253, 28, 219, 189, 188, 255, 39, 60, 136, 130, 31, 62, 113, 202, 89, 188, 29, 66, 3, 61, 73, 152, 1, 62, 148, 185, 152, 61, 32, 153, 71, 187, 164, 131, 158, 61, 76, 72, 180, 61, 182, 119, 0, 190, 98, 57, 45, 61, 90, 181, 18, 62, 95, 151, 234, 189, 51, 174, 174, 189, 138, 114, 11, 62, 80, 164, 17, 190, 55, 20, 108, 189, 17, 43, 36, 61, 64, 129, 220, 61, 184, 43, 198, 61, 167, 91, 71, 189, 231, 198, 209, 61, 41, 236, 188, 61, 12, 9, 141, 61, 160, 85, 248, 189, 9, 181, 175, 189, 30, 103, 33, 190, 177, 192, 107, 61, 139, 24, 16, 61, 49, 182, 252, 61, 94, 35, 97, 189, 209, 98, 3, 61, 163, 175, 102, 189, 156, 91, 215, 189, 208, 38, 143, 61, 153, 138, 159, 189, 151, 192, 153, 189, 252, 15, 106, 61, 238, 213, 46, 62, 13, 83, 29, 62, 24, 184, 235, 188, 33, 194, 81, 61, 1, 221, 21, 62, 14, 237, 70, 61, 86, 253, 219, 189, 245, 82, 226, 189, 110, 13, 250, 189, 128, 107, 45, 189, 42, 77, 233, 61, 91, 140, 218, 61, 51, 13, 79, 189, 115, 107, 208, 55, 214, 61, 131, 61, 177, 236, 236, 61, 216, 235, 16, 62, 94, 59, 209, 189, 64, 148, 13, 62, 228, 61, 32, 190, 197, 58, 178, 60, 27, 53, 180, 61, 239, 230, 9, 189, 52, 41, 40, 190, 249, 179, 26, 62, 199, 110, 136, 189, 81, 60, 128, 61, 193, 20, 33, 190, 21, 65, 14, 61, 48, 29, 20, 188, 209, 54, 184, 61, 158, 106, 7, 189, 16, 142, 10, 62, 17, 106, 112, 61, 215, 114, 233, 61, 134, 206, 204, 189, 74, 218, 25, 61, 250, 136, 22, 190, 124, 90, 233, 189, 41, 183, 49, 62, 155, 63, 51, 61, 36, 211, 233, 61, 224, 178, 34, 62, 197, 24, 232, 185, 53, 134, 128, 188, 22, 4, 135, 61, 105, 101, 180, 188, 128, 164, 129, 61, 73, 191, 153, 61, 206, 69, 202, 189, 186, 71, 215, 188, 87, 225, 180, 189, 38, 99, 45, 62, 177, 90, 142, 61, 78, 71, 196, 61, 78, 14, 171, 188, 175, 106, 9, 62, 154, 250, 236, 61, 191, 183, 244, 189, 241, 22, 212, 189, 84, 247, 169, 60, 235, 23, 215, 61, 160, 240, 242, 189, 240, 10, 28, 188, 205, 190, 180, 61, 46, 23, 13, 62, 159, 86, 189, 61, 176, 20, 92, 189, 160, 189, 155, 189, 126, 22, 45, 59, 231, 67, 34, 190, 57, 141, 53, 61, 150, 24, 153, 60, 154, 120, 17, 62, 154, 118, 171, 61, 41, 138, 175, 188, 131, 138, 2, 62, 62, 245, 68, 61, 107, 197, 80, 189, 189, 23, 119, 60, 11, 135, 209, 188, 54, 149, 63, 61, 183, 116, 43, 62, 172, 111, 40, 190, 177, 71, 254, 189, 25, 64, 180, 189, 59, 164, 14, 61, 200, 247, 41, 62, 156, 104, 37, 62, 44, 47, 144, 189, 63, 4, 182, 61, 201, 17, 20, 189, 156, 119, 40, 190, 121, 187, 151, 61, 130, 137, 139, 188, 253, 142, 202, 61, 227, 211, 209, 189, 254, 153, 30, 190, 252, 149, 183, 189, 99, 94, 234, 189, 155, 96, 215, 188, 167, 171, 134, 61, 108, 93, 232, 188, 174, 149, 13, 190, 94, 141, 132, 61, 149, 113, 180, 189, 35, 137, 12, 190, 64, 121, 44, 189, 202, 139, 220, 61, 26, 244, 165, 61, 235, 124, 138, 60, 215, 31, 5, 190, 79, 238, 178, 188, 193, 202, 230, 189, 214, 229, 155, 188, 106, 129, 246, 61, 58, 63, 152, 189, 44, 71, 20, 61, 125, 103, 37, 189, 141, 229, 253, 61, 135, 214, 253, 61, 108, 38, 140, 187, 133, 81, 231, 189, 120, 232, 197, 189, 18, 23, 170, 61, 49, 48, 190, 60, 213, 243, 0, 190, 227, 157, 12, 190, 15, 231, 42, 61, 171, 85, 39, 62, 73, 72, 18, 189, 198, 144, 199, 61, 128, 205, 171, 61, 13, 207, 131, 189, 229, 238, 50, 190, 80, 80, 250, 61, 218, 84, 133, 61, 150, 67, 107, 189, 73, 10, 27, 190, 55, 243, 39, 190, 127, 238, 157, 61, 136, 171, 92, 189, 195, 77, 155, 188, 188, 238, 153, 189, 101, 199, 0, 188, 172, 82, 0, 62, 161, 155, 108, 61, 109, 241, 16, 60, 21, 186, 36, 190, 70, 204, 91, 189, 173, 82, 196, 60, 115, 187, 175, 61, 97, 199, 28, 60, 2, 151, 37, 189, 39, 84, 142, 61, 110, 112, 232, 189, 155, 15, 208, 189, 193, 161, 27, 190, 212, 107, 199, 60, 214, 230, 160, 61, 102, 172, 153, 189, 131, 164, 49, 187, 79, 42, 84, 189, 220, 104, 252, 189, 41, 198, 113, 61, 144, 238, 197, 187, 187, 123, 81, 189, 203, 6, 161, 189, 117, 12, 228, 61, 141, 49, 8, 62, 210, 104, 37, 190, 115, 9, 105, 61, 165, 164, 23, 190, 24, 167, 171, 61, 76, 216, 242, 61, 64, 194, 129, 189, 35, 130, 1, 61, 131, 73, 140, 60, 157, 57, 209, 60, 188, 173, 35, 61, 214, 145, 8, 190, 247, 184, 166, 186, 5, 23, 41, 190, 40, 87, 218, 61, 129, 247, 62, 60, 39, 58, 233, 60, 138, 232, 14, 62, 167, 88, 192, 61, 47, 93, 241, 189, 111, 215, 33, 190, 212, 56, 148, 189, 247, 143, 42, 190, 80, 43, 155, 188, 185, 82, 28, 190, 149, 71, 217, 60, 222, 173, 85, 189, 44, 68, 235, 60, 233, 127, 164, 61, 66, 61, 218, 61, 19, 254, 227, 189, 1, 194, 208, 188, 198, 89, 17, 190, 189, 33, 0, 62, 200, 58, 210, 61, 232, 50, 168, 189, 222, 162, 112, 189, 94, 232, 161, 61, 36, 87, 72, 61, 109, 182, 33, 61, 180, 47, 141, 189, 148, 99, 106, 189, 102, 116, 197, 189, 209, 87, 174, 189, 40, 185, 157, 61, 2, 7, 120, 59, 121, 249, 1, 189, 48, 13, 38, 190, 189, 44, 0, 62, 47, 208, 205, 61, 206, 233, 184, 61, 128, 110, 67, 61, 79, 76, 77, 61, 65, 17, 254, 189, 23, 220, 226, 189, 73, 215, 159, 61, 219, 159, 111, 61, 164, 29, 243, 189, 252, 249, 28, 189, 97, 249, 105, 61, 45, 6, 38, 62, 246, 123, 7, 62, 20, 153, 11, 190, 117, 170, 21, 62, 132, 209, 42, 188, 19, 32, 9, 62, 151, 22, 147, 189, 21, 211, 95, 189, 59, 64, 243, 61, 182, 239, 176, 61, 254, 93, 0, 188, 224, 54, 35, 190, 126, 159, 186, 60, 82, 240, 128, 188, 236, 166, 158, 189, 236, 251, 27, 62, 174, 117, 204, 61, 128, 192, 105, 189, 145, 98, 46, 61, 4, 248, 47, 189, 52, 212, 187, 189, 59, 148, 136, 61, 2, 134, 158, 61, 203, 59, 22, 190, 5, 197, 235, 189, 199, 192, 19, 62, 231, 80, 119, 61, 58, 90, 218, 61, 97, 94, 225, 61, 253, 16, 36, 62, 93, 208, 48, 62, 3, 117, 196, 61, 181, 125, 245, 60, 218, 9, 31, 190, 82, 2, 227, 188, 166, 98, 225, 189, 212, 145, 32, 62, 16, 221, 103, 61, 92, 141, 86, 188, 22, 104, 48, 62, 243, 248, 2, 62, 250, 98, 107, 61, 134, 132, 87, 189, 141, 134, 185, 189, 115, 189, 251, 189, 13, 215, 210, 189, 73, 128, 183, 60, 8, 245, 104, 189, 207, 213, 249, 61, 205, 13, 221, 60, 125, 22, 178, 189, 166, 55, 213, 61, 182, 48, 43, 61, 121, 91, 144, 189, 210, 238, 169, 61, 210, 195, 22, 62, 175, 219, 29, 187, 206, 108, 51, 62, 159, 24, 48, 62, 82, 236, 140, 188, 203, 165, 171, 61, 18, 119, 223, 61, 153, 132, 174, 187, 82, 115, 128, 189, 250, 215, 37, 62, 20, 173, 174, 186, 207, 159, 254, 189, 101, 218, 172, 189, 133, 216, 143, 189, 236, 158, 28, 61, 219, 213, 209, 189, 113, 219, 10, 62, 230, 208, 142, 61, 83, 209, 104, 187, 94, 107, 49, 61, 247, 58, 9, 61, 11, 61, 240, 189, 39, 132, 232, 189, 103, 66, 219, 188, 71, 162, 246, 189, 70, 195, 166, 61, 144, 155, 114, 189, 80, 82, 248, 61, 156, 196, 166, 188, 108, 116, 189, 61, 152, 213, 34, 190, 65, 64, 213, 189, 180, 237, 18, 61, 164, 86, 162, 61, 63, 232, 69, 61, 146, 32, 57, 189, 223, 179, 34, 62, 61, 106, 129, 61, 113, 184, 100, 189, 89, 169, 47, 190, 100, 131, 164, 61, 244, 192, 10, 190, 179, 193, 14, 190, 117, 15, 161, 189, 31, 74, 42, 190, 207, 171, 12, 190, 66, 8, 19, 190, 8, 137, 209, 61, 29, 179, 252, 189, 12, 68, 29, 62, 244, 8, 156, 189, 198, 110, 128, 61, 34, 128, 59, 61, 242, 240, 7, 61, 141, 80, 212, 189, 122, 86, 110, 189, 35, 176, 19, 189, 176, 237, 93, 188, 24, 212, 247, 60, 205, 165, 52, 61, 199, 195, 30, 190, 105, 69, 6, 190, 78, 34, 216, 189, 180, 171, 131, 61, 40, 68, 209, 61, 140, 203, 18, 62, 47, 128, 216, 189, 7, 218, 238, 189, 165, 185, 62, 189, 186, 18, 46, 62, 72, 20, 39, 190, 187, 135, 0, 190, 110, 99, 155, 61, 67, 97, 134, 189, 231, 103, 124, 189, 125, 25, 7, 190, 255, 114, 176, 61, 48, 231, 238, 189, 84, 46, 235, 189, 188, 27, 206, 60, 62, 206, 26, 60, 77, 107, 104, 61, 41, 177, 20, 62, 16, 251, 171, 189, 24, 70, 147, 60, 90, 91, 11, 190, 100, 76, 14, 190, 6, 48, 146, 60, 13, 43, 226, 61, 234, 182, 197, 189, 74, 241, 196, 189, 83, 197, 255, 189, 88, 112, 86, 61, 7, 219, 191, 189, 48, 57, 200, 189, 106, 138, 50, 62, 26, 175, 28, 62, 156, 195, 162, 189, 50, 221, 189, 187, 119, 127, 31, 190, 172, 29, 19, 190, 62, 9, 19, 62, 178, 144, 82, 188, 248, 40, 160, 60, 140, 104, 14, 62, 166, 223, 159, 60, 174, 120, 194, 189, 14, 103, 8, 59, 199, 37, 170, 188, 50, 40, 253, 189, 18, 128, 131, 189, 49, 1, 241, 189, 177, 78, 25, 189, 9, 251, 184, 189, 251, 237, 218, 61, 28, 96, 211, 189, 133, 181, 3, 190, 120, 205, 1, 190, 179, 234, 81, 61, 201, 196, 183, 61, 40, 218, 28, 190, 39, 61, 23, 62, 10, 168, 229, 186, 178, 128, 211, 189, 166, 138, 230, 189, 140, 172, 174, 189, 139, 95, 40, 190, 247, 123, 26, 190, 21, 173, 249, 61, 78, 228, 10, 62, 253, 190, 140, 189, 19, 43, 167, 60, 2, 223, 176, 60, 99, 136, 4, 62, 209, 83, 37, 190, 30, 234, 49, 188, 148, 85, 152, 189, 242, 90, 220, 60, 2, 33, 217, 189, 65, 142, 254, 60, 69, 232, 106, 61, 141, 136, 208, 61, 132, 49, 15, 62, 2, 185, 52, 62, 80, 96, 196, 189, 104, 188, 150, 189, 179, 43, 126, 61, 18, 241, 80, 189, 141, 59, 185, 60, 221, 141, 36, 189, 72, 234, 156, 61, 223, 230, 183, 61, 73, 170, 247, 189, 16, 210, 211, 61, 156, 36, 220, 189, 240, 32, 55, 61, 15, 196, 0, 62, 223, 200, 198, 189, 41, 1, 34, 189, 250, 170, 139, 189, 201, 164, 243, 60, 254, 129, 102, 189, 165, 83, 165, 189, 241, 219, 52, 190, 233, 72, 183, 188, 18, 182, 22, 62, 73, 236, 131, 189, 44, 9, 82, 189, 102, 66, 4, 62, 223, 66, 8, 189, 167, 87, 24, 190, 243, 108, 162, 189, 143, 165, 102, 189, 130, 16, 103, 61, 0, 20, 225, 189, 14, 19, 26, 190, 179, 138, 5, 62, 140, 133, 31, 62, 199, 119, 49, 190, 199, 215, 5, 62, 153, 212, 22, 62, 39, 23, 79, 60, 35, 87, 70, 189, 132, 44, 17, 61, 45, 182, 75, 189, 158, 203, 171, 189, 230, 146, 255, 61, 229, 102, 202, 61, 122, 225, 215, 60, 86, 17, 192, 189, 108, 152, 145, 189, 252, 226, 51, 62, 208, 146, 236, 188, 5, 159, 135, 61, 142, 138, 163, 187, 138, 147, 183, 189, 172, 195, 19, 189, 115, 136, 219, 60, 238, 28, 29, 189, 89, 28, 25, 190, 150, 69, 27, 61, 120, 88, 157, 60, 109, 134, 175, 60, 216, 16, 33, 190, 171, 116, 139, 189, 146, 0, 58, 59, 173, 59, 233, 188, 85, 90, 27, 190, 139, 60, 236, 59, 62, 136, 206, 189, 47, 45, 161, 60, 123, 180, 210, 61, 111, 25, 143, 189, 195, 252, 28, 62, 30, 182, 77, 189, 140, 171, 33, 190, 252, 71, 178, 189, 43, 41, 140, 189, 43, 150, 1, 190, 83, 141, 122, 61, 28, 205, 77, 189, 249, 230, 48, 190, 235, 96, 6, 190, 85, 136, 207, 189, 142, 1, 110, 189, 87, 97, 182, 189, 176, 83, 245, 189, 30, 124, 28, 190, 250, 99, 42, 62, 137, 210, 220, 60, 232, 45, 118, 189, 119, 86, 30, 189, 22, 98, 3, 62, 43, 152, 165, 61, 192, 207, 207, 189, 117, 104, 2, 62, 81, 219, 99, 188, 36, 187, 38, 189, 148, 209, 137, 188, 23, 48, 182, 61, 238, 239, 55, 189, 34, 127, 188, 61, 229, 52, 224, 61, 225, 240, 141, 61, 218, 203, 233, 189, 87, 93, 153, 61, 185, 18, 104, 189, 134, 55, 15, 190, 35, 230, 20, 62, 124, 204, 5, 62, 245, 137, 5, 62, 212, 219, 220, 61, 243, 251, 47, 62, 127, 168, 179, 189, 162, 74, 97, 189, 33, 229, 224, 61, 164, 33, 127, 61, 5, 57, 242, 58, 194, 80, 90, 189, 130, 211, 197, 61, 170, 42, 69, 189, 189, 231, 200, 189, 223, 94, 27, 62, 178, 250, 142, 189, 10, 184, 159, 61, 96, 243, 240, 61, 178, 197, 84, 189, 218, 61, 14, 190, 188, 180, 226, 189, 177, 133, 152, 189, 94, 58, 207, 189, 148, 2, 10, 189, 142, 84, 204, 61, 4, 216, 111, 189, 83, 240, 23, 62, 152, 17, 48, 62, 249, 241, 233, 189, 244, 69, 177, 189, 147, 168, 146, 61, 59, 46, 130, 61, 170, 171, 216, 189, 55, 50, 197, 189, 33, 232, 173, 189, 117, 132, 249, 61, 61, 143, 216, 189, 36, 178, 220, 61, 86, 124, 212, 189, 188, 183, 66, 189, 183, 213, 80, 61, 6, 98, 220, 189, 205, 0, 32, 190, 174, 252, 74, 61, 214, 35, 121, 189, 98, 57, 42, 190, 2, 146, 97, 61, 117, 48, 215, 188, 171, 14, 201, 61, 246, 188, 70, 189, 225, 67, 47, 62, 86, 235, 6, 62, 24, 47, 12, 62, 101, 121, 151, 189, 59, 154, 105, 60, 226, 203, 154, 189, 6, 154, 213, 188, 4, 147, 49, 62, 13, 166, 27, 190, 224, 89, 209, 61, 67, 238, 7, 62, 111, 182, 246, 61, 188, 231, 17, 190, 184, 21, 13, 190, 168, 90, 12, 62, 41, 48, 224, 189, 216, 170, 168, 61, 242, 37, 107, 60, 186, 151, 196, 61, 40, 114, 168, 61, 156, 229, 15, 189, 35, 192, 99, 188, 162, 170, 139, 61, 103, 84, 38, 189, 11, 24, 13, 190, 8, 162, 67, 188, 124, 192, 9, 62, 149, 152, 36, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 88, 49, 62, 152, 183, 187, 189, 251, 121, 134, 189, 94, 112, 107, 58, 230, 221, 215, 61, 218, 29, 238, 61, 195, 32, 237, 188, 247, 168, 181, 61, 163, 183, 217, 61, 149, 47, 94, 61, 185, 47, 193, 61, 232, 250, 186, 189, 152, 52, 6, 62, 188, 235, 50, 190, 206, 37, 146, 61, 82, 152, 50, 189, 189, 134, 149, 61, 111, 3, 154, 61, 153, 115, 81, 61, 246, 187, 6, 188, 180, 41, 73, 60, 38, 177, 117, 61, 82, 144, 157, 61, 249, 86, 202, 188, 78, 162, 78, 60, 229, 200, 32, 189, 114, 171, 17, 190, 50, 3, 53, 190, 151, 119, 206, 188, 41, 227, 20, 62, 163, 127, 241, 189, 24, 142, 255, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 214, 176, 189, 141, 17, 203, 61, 122, 159, 35, 190, 243, 142, 10, 61, 40, 220, 235, 60, 19, 254, 236, 189, 215, 149, 7, 60, 121, 219, 14, 62, 190, 188, 21, 189, 201, 5, 129, 61, 70, 237, 128, 189, 83, 242, 16, 62, 220, 234, 36, 189, 239, 35, 134, 57, 99, 226, 107, 61, 131, 15, 7, 190, 233, 108, 153, 60, 83, 134, 226, 61, 102, 251, 91, 58, 195, 83, 29, 189, 74, 250, 3, 61, 127, 245, 211, 189, 76, 198, 3, 61, 43, 109, 253, 61, 189, 157, 29, 62, 146, 1, 143, 60, 173, 230, 88, 189, 54, 134, 225, 189, 26, 172, 158, 61, 208, 234, 93, 60, 21, 16, 43, 189, 102, 28, 233, 189, 117, 221, 11, 62, 14, 16, 153, 187, 35, 201, 150, 188, 12, 148, 249, 58, 165, 192, 46, 190, 56, 54, 26, 62, 63, 0, 44, 59, 32, 144, 171, 189, 125, 34, 183, 189, 175, 8, 87, 61, 1, 201, 1, 190, 33, 114, 131, 188, 122, 106, 168, 61, 6, 210, 147, 61, 227, 253, 88, 61, 108, 205, 3, 62, 43, 148, 222, 189, 73, 14, 21, 190, 46, 168, 253, 61, 62, 243, 154, 189, 211, 105, 1, 62, 82, 128, 155, 189, 23, 71, 29, 190, 170, 153, 243, 189, 140, 16, 0, 190, 42, 170, 121, 189, 57, 92, 31, 62, 246, 73, 172, 59, 207, 196, 162, 188, 17, 167, 41, 62, 9, 157, 130, 189, 86, 230, 182, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 200, 194, 189, 184, 87, 46, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {69, 177, 27, 63, 16, 41, 152, 191, 218, 33, 144, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {202, 116, 2, 190, 202, 72, 16, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0010/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}