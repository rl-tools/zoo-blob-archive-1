// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 39, 67, 63, 39, 11, 225, 190, 120, 12, 220, 190, 99, 35, 76, 190, 236, 252, 105, 61, 131, 9, 119, 187, 19, 132, 179, 60, 48, 164, 38, 63, 200, 96, 36, 63, 41, 131, 211, 60, 97, 72, 36, 63, 226, 249, 205, 62, 237, 255, 173, 190, 93, 71, 186, 62, 130, 126, 21, 63, 96, 98, 212, 62, 16, 61, 84, 191, 210, 59, 71, 190, 51, 31, 53, 63, 143, 137, 138, 191, 14, 98, 192, 190, 45, 168, 195, 62, 25, 34, 136, 191, 212, 250, 66, 60, 185, 76, 152, 60, 106, 103, 61, 191, 215, 68, 93, 62, 224, 102, 80, 190, 77, 29, 233, 190, 55, 83, 142, 191, 171, 210, 221, 62, 224, 92, 24, 63, 237, 246, 203, 190, 225, 225, 27, 63, 76, 71, 170, 63, 63, 194, 206, 62, 44, 205, 196, 62, 175, 144, 61, 191, 39, 93, 210, 190, 214, 145, 38, 191, 44, 40, 131, 63, 79, 39, 141, 62, 141, 16, 143, 189, 171, 198, 171, 191, 253, 112, 5, 62, 123, 44, 148, 190, 58, 132, 184, 189, 131, 9, 197, 189, 109, 112, 150, 62, 119, 195, 156, 63, 55, 37, 8, 63, 132, 16, 193, 62, 15, 58, 141, 189, 43, 184, 241, 190, 250, 146, 220, 190, 189, 149, 204, 62, 96, 102, 225, 190, 229, 240, 5, 63, 23, 87, 1, 190, 229, 30, 234, 189, 58, 45, 5, 191, 247, 70, 17, 191, 223, 77, 10, 62, 4, 213, 18, 63, 52, 167, 5, 189, 206, 65, 43, 63, 69, 5, 207, 62, 118, 92, 202, 62, 121, 40, 10, 61, 73, 152, 132, 61, 51, 134, 143, 190, 234, 57, 52, 188, 157, 75, 137, 190, 211, 136, 95, 63, 187, 163, 224, 189, 93, 177, 56, 190, 85, 84, 27, 63, 107, 203, 26, 63, 139, 40, 4, 190, 168, 207, 184, 62, 170, 65, 4, 191, 39, 184, 192, 190, 245, 175, 234, 190, 212, 138, 12, 190, 233, 199, 251, 61, 164, 158, 64, 63, 26, 183, 218, 190, 214, 200, 19, 190, 78, 144, 30, 63, 99, 58, 161, 190, 135, 190, 1, 191, 165, 82, 37, 190, 130, 152, 194, 62, 44, 15, 184, 62, 240, 2, 179, 190, 242, 225, 44, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 144, 48, 191, 230, 29, 239, 62, 4, 93, 163, 58, 147, 241, 173, 190, 75, 134, 187, 190, 204, 0, 29, 190, 109, 222, 98, 190, 84, 241, 101, 188, 196, 68, 208, 62, 100, 180, 77, 62, 74, 206, 177, 62, 84, 67, 155, 189, 28, 98, 33, 63, 241, 19, 134, 62, 121, 62, 161, 62, 114, 25, 22, 63, 142, 183, 170, 62, 191, 96, 122, 62, 216, 59, 21, 191, 116, 157, 150, 190, 146, 209, 165, 190, 130, 88, 142, 62, 212, 69, 51, 63, 61, 135, 226, 62, 18, 197, 129, 189, 111, 145, 97, 62, 83, 136, 42, 190, 23, 181, 7, 63, 50, 39, 17, 190, 188, 134, 158, 62, 168, 154, 58, 191, 192, 201, 8, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 110, 183, 190, 62, 169, 123, 62, 173, 240, 196, 191, 185, 56, 229, 188, 91, 70, 39, 191, 213, 226, 137, 190, 105, 100, 222, 190, 218, 128, 9, 191, 196, 20, 185, 62, 103, 60, 70, 62, 141, 87, 227, 189, 166, 28, 223, 62, 190, 70, 78, 61, 60, 116, 201, 190, 136, 253, 144, 62, 193, 244, 145, 62, 14, 19, 2, 191, 254, 252, 164, 190, 246, 9, 82, 189, 128, 237, 0, 191, 225, 85, 15, 63, 142, 1, 247, 58, 132, 84, 26, 189, 96, 231, 153, 61, 74, 28, 31, 61, 246, 181, 218, 189, 199, 176, 180, 62, 201, 211, 78, 62, 200, 31, 166, 190, 193, 160, 147, 62, 205, 171, 204, 189, 26, 14, 108, 60, 207, 132, 157, 189, 223, 142, 74, 190, 180, 22, 216, 189, 211, 20, 7, 62, 227, 12, 4, 61, 196, 61, 180, 60, 136, 157, 183, 188, 83, 123, 182, 189, 217, 11, 172, 189, 133, 82, 175, 61, 64, 52, 91, 190, 121, 134, 173, 61, 153, 11, 164, 61, 84, 138, 74, 190, 114, 255, 89, 61, 159, 33, 150, 189, 224, 60, 66, 59, 67, 252, 49, 190, 16, 163, 249, 61, 225, 19, 44, 62, 242, 55, 21, 62, 118, 53, 5, 190, 56, 107, 66, 190, 164, 95, 224, 189, 157, 227, 222, 188, 189, 43, 8, 62, 254, 49, 240, 59, 148, 241, 139, 188, 41, 228, 228, 189, 163, 7, 114, 189, 177, 69, 47, 60, 99, 146, 17, 62, 55, 236, 234, 190, 143, 225, 46, 61, 164, 111, 112, 188, 36, 198, 75, 62, 250, 20, 179, 190, 101, 252, 120, 190, 13, 178, 188, 190, 27, 211, 129, 190, 210, 90, 124, 187, 108, 47, 141, 61, 115, 248, 131, 61, 95, 120, 2, 63, 153, 61, 22, 62, 254, 217, 78, 190, 202, 74, 32, 61, 178, 68, 254, 59, 69, 20, 45, 62, 134, 99, 47, 190, 33, 185, 24, 190, 153, 186, 221, 190, 248, 198, 12, 62, 187, 178, 140, 62, 123, 143, 84, 62, 16, 218, 40, 190, 228, 68, 148, 61, 47, 23, 244, 60, 174, 98, 204, 62, 105, 32, 108, 190, 143, 87, 72, 190, 1, 191, 188, 62, 106, 53, 197, 190, 66, 129, 2, 61, 125, 105, 239, 60, 150, 215, 26, 190, 112, 169, 128, 62, 201, 192, 232, 60, 159, 187, 202, 62, 49, 25, 27, 62, 144, 169, 188, 62, 106, 151, 205, 62, 64, 153, 17, 62, 48, 135, 184, 61, 251, 169, 167, 189, 251, 68, 254, 190, 100, 156, 7, 62, 245, 194, 49, 187, 19, 158, 147, 187, 61, 106, 204, 61, 55, 18, 196, 190, 8, 144, 146, 61, 5, 70, 243, 61, 250, 138, 188, 62, 122, 167, 7, 188, 250, 163, 41, 60, 222, 144, 188, 189, 81, 184, 5, 190, 201, 82, 5, 190, 15, 213, 1, 190, 37, 63, 230, 189, 131, 112, 36, 59, 81, 156, 17, 61, 158, 89, 193, 189, 226, 192, 41, 62, 134, 83, 55, 190, 134, 231, 7, 61, 210, 168, 9, 190, 178, 24, 145, 62, 116, 194, 34, 190, 101, 137, 129, 62, 191, 169, 244, 61, 118, 87, 103, 62, 218, 40, 162, 62, 74, 168, 156, 189, 65, 112, 100, 190, 212, 25, 30, 189, 62, 190, 2, 191, 205, 101, 28, 62, 143, 166, 36, 62, 1, 117, 156, 190, 216, 105, 186, 187, 112, 240, 217, 61, 99, 125, 127, 62, 180, 113, 108, 190, 10, 47, 120, 190, 186, 141, 197, 190, 121, 76, 54, 190, 56, 202, 157, 62, 157, 240, 205, 61, 42, 38, 255, 189, 120, 40, 190, 61, 246, 188, 120, 190, 61, 22, 78, 189, 101, 220, 39, 62, 195, 149, 31, 190, 194, 111, 69, 62, 155, 239, 52, 62, 196, 158, 16, 62, 16, 77, 106, 190, 208, 23, 137, 189, 190, 229, 79, 62, 91, 181, 23, 189, 126, 28, 156, 61, 55, 209, 127, 61, 52, 59, 140, 190, 67, 193, 115, 190, 137, 180, 192, 61, 159, 82, 210, 61, 39, 212, 166, 62, 166, 33, 158, 188, 9, 248, 195, 61, 178, 241, 156, 189, 67, 143, 68, 190, 100, 176, 14, 62, 22, 15, 6, 62, 93, 190, 62, 190, 232, 226, 71, 189, 201, 177, 130, 188, 58, 114, 197, 61, 41, 142, 210, 61, 60, 109, 141, 189, 17, 122, 211, 61, 6, 217, 30, 188, 124, 73, 218, 61, 156, 14, 174, 190, 164, 119, 76, 189, 209, 4, 30, 60, 255, 78, 60, 190, 231, 203, 143, 61, 163, 85, 152, 188, 162, 129, 27, 187, 118, 210, 173, 61, 88, 115, 251, 61, 135, 198, 26, 190, 37, 61, 174, 189, 119, 74, 8, 62, 149, 113, 4, 190, 30, 61, 51, 190, 253, 75, 59, 190, 147, 147, 239, 61, 55, 220, 28, 190, 150, 146, 149, 61, 212, 177, 31, 189, 250, 18, 131, 189, 55, 22, 133, 187, 182, 118, 50, 190, 89, 251, 16, 62, 31, 247, 133, 189, 196, 1, 25, 190, 55, 27, 101, 189, 42, 105, 58, 187, 181, 2, 70, 190, 177, 88, 15, 61, 228, 47, 26, 190, 167, 250, 244, 188, 16, 249, 35, 187, 57, 184, 188, 61, 250, 254, 172, 61, 209, 102, 210, 189, 82, 47, 204, 61, 142, 19, 33, 62, 216, 81, 240, 189, 191, 192, 169, 60, 184, 77, 81, 59, 60, 107, 207, 190, 233, 165, 250, 188, 89, 14, 181, 189, 180, 202, 147, 62, 127, 144, 133, 62, 200, 54, 106, 62, 12, 62, 245, 189, 121, 190, 9, 62, 54, 84, 65, 191, 24, 214, 130, 62, 57, 76, 176, 189, 18, 217, 245, 61, 51, 4, 69, 62, 245, 163, 128, 61, 55, 214, 132, 62, 139, 109, 180, 188, 64, 97, 24, 188, 39, 129, 88, 189, 160, 14, 53, 60, 174, 89, 182, 61, 236, 154, 67, 61, 236, 23, 69, 62, 233, 124, 8, 190, 87, 115, 103, 189, 42, 22, 48, 62, 45, 239, 18, 62, 67, 227, 84, 62, 19, 36, 185, 62, 194, 59, 229, 188, 49, 81, 42, 191, 169, 42, 190, 61, 127, 36, 146, 189, 134, 199, 68, 61, 196, 93, 90, 61, 142, 69, 198, 190, 213, 63, 86, 189, 47, 26, 160, 189, 85, 14, 77, 62, 132, 81, 111, 190, 76, 154, 207, 62, 239, 129, 146, 62, 2, 166, 26, 62, 64, 54, 31, 62, 33, 57, 227, 189, 212, 20, 5, 62, 112, 130, 255, 60, 245, 160, 97, 190, 171, 169, 207, 190, 118, 56, 129, 62, 238, 235, 140, 60, 143, 224, 142, 61, 35, 126, 157, 62, 180, 55, 96, 62, 103, 178, 139, 61, 132, 226, 235, 61, 44, 113, 61, 189, 99, 52, 66, 189, 140, 181, 184, 190, 135, 41, 189, 189, 55, 108, 250, 189, 198, 198, 189, 61, 104, 178, 55, 62, 132, 75, 48, 61, 82, 148, 82, 62, 52, 105, 146, 190, 106, 45, 49, 62, 29, 250, 202, 62, 118, 16, 224, 62, 30, 200, 207, 62, 122, 47, 161, 62, 195, 196, 83, 191, 192, 85, 4, 191, 229, 54, 70, 191, 25, 26, 196, 190, 116, 36, 138, 62, 249, 128, 132, 190, 140, 127, 205, 188, 92, 222, 62, 61, 220, 25, 169, 62, 115, 48, 196, 189, 146, 112, 223, 189, 201, 35, 178, 190, 75, 23, 175, 190, 32, 209, 132, 62, 81, 87, 44, 62, 181, 143, 220, 62, 167, 55, 232, 61, 71, 161, 16, 191, 147, 205, 85, 189, 139, 115, 169, 189, 109, 29, 146, 190, 167, 120, 129, 62, 174, 79, 73, 61, 82, 162, 19, 190, 243, 57, 136, 62, 37, 227, 175, 61, 51, 246, 80, 61, 214, 248, 183, 189, 148, 138, 255, 189, 100, 252, 193, 58, 4, 170, 83, 188, 45, 129, 98, 189, 196, 169, 208, 189, 166, 96, 200, 61, 197, 207, 195, 189, 151, 243, 4, 190, 90, 67, 244, 189, 224, 177, 50, 62, 110, 33, 10, 62, 16, 150, 38, 62, 84, 186, 130, 61, 147, 169, 141, 61, 246, 124, 130, 190, 92, 176, 182, 189, 112, 235, 149, 61, 191, 157, 131, 62, 185, 190, 32, 189, 205, 200, 147, 62, 17, 77, 3, 189, 25, 5, 127, 61, 19, 1, 222, 189, 87, 225, 157, 188, 139, 40, 146, 62, 2, 233, 18, 190, 244, 192, 8, 61, 159, 204, 67, 189, 58, 12, 200, 61, 125, 71, 79, 60, 126, 112, 32, 190, 83, 166, 185, 61, 169, 100, 160, 61, 14, 168, 60, 190, 249, 183, 20, 190, 49, 31, 169, 61, 58, 10, 145, 191, 202, 143, 24, 191, 203, 58, 33, 190, 166, 190, 160, 191, 67, 102, 124, 62, 30, 156, 237, 190, 32, 27, 63, 62, 188, 135, 164, 61, 192, 153, 179, 190, 87, 57, 179, 189, 16, 171, 171, 188, 144, 236, 121, 190, 235, 141, 94, 61, 128, 124, 224, 188, 106, 225, 111, 61, 101, 34, 0, 62, 207, 94, 117, 62, 255, 169, 196, 190, 102, 176, 73, 62, 173, 2, 147, 190, 247, 140, 247, 61, 88, 127, 56, 62, 152, 126, 214, 61, 192, 59, 101, 190, 188, 220, 149, 188, 85, 80, 14, 191, 124, 61, 244, 61, 216, 34, 9, 191, 183, 21, 147, 190, 54, 221, 119, 190, 145, 151, 45, 191, 80, 154, 96, 61, 116, 11, 51, 62, 30, 249, 94, 62, 14, 228, 17, 63, 233, 73, 23, 61, 111, 249, 64, 190, 176, 68, 223, 62, 230, 136, 77, 62, 120, 154, 115, 190, 151, 116, 177, 190, 112, 25, 41, 190, 10, 116, 249, 190, 233, 200, 54, 63, 92, 73, 137, 62, 78, 153, 26, 189, 155, 79, 223, 61, 62, 21, 175, 60, 62, 20, 149, 190, 130, 42, 149, 62, 34, 23, 146, 61, 78, 90, 177, 190, 134, 246, 114, 62, 154, 42, 118, 189, 212, 72, 120, 62, 110, 33, 58, 190, 190, 67, 67, 62, 217, 172, 222, 61, 49, 0, 68, 190, 104, 97, 133, 190, 212, 134, 213, 190, 251, 211, 181, 190, 200, 98, 103, 190, 219, 54, 178, 190, 3, 122, 34, 62, 220, 61, 69, 62, 116, 52, 70, 190, 233, 134, 109, 61, 98, 66, 248, 62, 129, 89, 212, 189, 106, 4, 34, 188, 113, 106, 98, 62, 187, 53, 38, 190, 184, 122, 17, 190, 251, 22, 56, 63, 98, 33, 153, 190, 255, 172, 194, 190, 201, 133, 214, 62, 39, 43, 207, 189, 184, 40, 136, 62, 64, 29, 136, 190, 144, 229, 62, 62, 221, 140, 19, 189, 134, 90, 69, 62, 44, 35, 38, 62, 41, 94, 149, 61, 235, 45, 100, 190, 185, 135, 225, 62, 157, 156, 251, 189, 228, 242, 132, 62, 233, 241, 148, 190, 100, 134, 6, 62, 58, 246, 226, 62, 139, 220, 222, 62, 68, 230, 190, 62, 161, 107, 141, 62, 76, 182, 99, 190, 87, 43, 131, 190, 121, 108, 187, 190, 104, 159, 227, 189, 4, 54, 53, 62, 206, 147, 121, 189, 234, 83, 52, 190, 56, 107, 43, 189, 163, 106, 133, 61, 239, 223, 183, 61, 158, 100, 120, 190, 67, 195, 252, 189, 171, 125, 73, 190, 77, 5, 8, 62, 198, 17, 211, 61, 113, 11, 217, 189, 26, 78, 197, 61, 54, 240, 144, 190, 94, 116, 2, 61, 193, 104, 181, 189, 123, 67, 54, 190, 35, 170, 227, 62, 51, 86, 19, 62, 47, 79, 56, 188, 189, 101, 175, 60, 43, 158, 233, 190, 236, 55, 154, 61, 158, 139, 213, 190, 155, 116, 185, 189, 116, 104, 82, 190, 140, 47, 140, 190, 96, 212, 68, 62, 78, 28, 0, 62, 238, 60, 241, 61, 192, 84, 11, 63, 202, 184, 41, 189, 214, 89, 50, 190, 210, 26, 60, 62, 56, 184, 39, 62, 23, 77, 186, 61, 2, 226, 155, 190, 83, 0, 222, 188, 167, 133, 13, 191, 161, 183, 10, 63, 218, 122, 121, 62, 66, 177, 107, 61, 176, 146, 95, 189, 118, 222, 37, 62, 5, 13, 215, 189, 208, 220, 85, 188, 26, 223, 83, 62, 129, 174, 105, 189, 202, 2, 119, 62, 249, 202, 190, 190, 63, 147, 67, 190, 51, 208, 132, 190, 149, 237, 134, 61, 151, 178, 235, 190, 191, 234, 152, 190, 26, 143, 189, 190, 187, 5, 147, 190, 167, 104, 155, 188, 29, 90, 241, 189, 93, 44, 143, 188, 51, 92, 58, 60, 164, 120, 102, 62, 37, 197, 147, 60, 255, 210, 15, 62, 92, 197, 146, 190, 92, 12, 151, 188, 253, 169, 54, 61, 167, 66, 29, 189, 80, 99, 214, 61, 168, 17, 100, 61, 6, 72, 84, 190, 238, 121, 10, 190, 190, 84, 206, 62, 217, 66, 171, 62, 163, 52, 16, 62, 116, 225, 197, 187, 1, 36, 157, 190, 222, 47, 40, 62, 49, 204, 13, 62, 128, 98, 124, 190, 252, 8, 246, 188, 215, 118, 229, 190, 241, 118, 220, 62, 54, 42, 83, 190, 141, 183, 146, 62, 145, 227, 88, 62, 122, 44, 50, 190, 157, 102, 74, 189, 44, 87, 187, 61, 154, 93, 204, 61, 178, 206, 153, 61, 55, 196, 124, 188, 8, 47, 50, 190, 17, 40, 136, 62, 213, 37, 188, 190, 65, 246, 234, 61, 148, 136, 79, 188, 243, 79, 158, 188, 140, 254, 127, 62, 4, 114, 181, 61, 80, 239, 225, 61, 115, 217, 204, 189, 147, 134, 132, 189, 30, 236, 243, 189, 174, 19, 1, 62, 102, 12, 168, 62, 110, 173, 252, 61, 138, 10, 5, 62, 109, 33, 145, 189, 204, 70, 128, 189, 130, 143, 134, 189, 86, 63, 49, 59, 142, 16, 36, 62, 219, 141, 48, 62, 156, 3, 50, 61, 140, 49, 156, 189, 16, 103, 181, 190, 24, 252, 37, 61, 113, 171, 214, 60, 80, 26, 24, 190, 228, 216, 100, 61, 181, 53, 19, 62, 162, 137, 57, 62, 179, 247, 53, 190, 9, 224, 208, 61, 206, 83, 73, 190, 213, 18, 87, 62, 83, 195, 138, 188, 202, 93, 76, 190, 196, 134, 128, 62, 62, 7, 148, 190, 244, 206, 130, 188, 86, 21, 11, 189, 216, 142, 8, 190, 122, 201, 232, 189, 42, 241, 67, 190, 123, 74, 74, 62, 112, 70, 89, 60, 52, 0, 71, 61, 165, 189, 218, 189, 155, 251, 233, 60, 217, 13, 29, 190, 10, 63, 7, 190, 250, 103, 18, 60, 175, 226, 175, 190, 248, 91, 113, 190, 69, 71, 41, 62, 77, 187, 241, 189, 87, 230, 33, 61, 206, 63, 225, 189, 100, 31, 135, 61, 48, 141, 74, 188, 159, 10, 155, 190, 111, 144, 43, 190, 222, 201, 166, 190, 31, 66, 77, 62, 240, 128, 248, 61, 241, 254, 217, 61, 175, 95, 234, 61, 183, 175, 58, 62, 133, 240, 36, 59, 105, 239, 191, 61, 244, 23, 254, 60, 142, 230, 167, 59, 209, 166, 59, 190, 106, 17, 4, 189, 109, 141, 88, 190, 131, 53, 87, 59, 191, 48, 47, 61, 16, 64, 81, 189, 44, 16, 14, 62, 225, 114, 61, 62, 32, 200, 76, 61, 42, 150, 27, 62, 208, 202, 116, 56, 107, 181, 122, 190, 234, 122, 173, 60, 31, 214, 230, 189, 240, 53, 49, 189, 171, 212, 106, 190, 187, 109, 53, 190, 65, 187, 139, 60, 116, 78, 42, 62, 4, 57, 17, 61, 73, 187, 201, 190, 236, 88, 49, 189, 130, 213, 182, 190, 164, 15, 31, 61, 55, 67, 247, 189, 139, 228, 41, 62, 118, 125, 149, 62, 218, 44, 194, 61, 167, 65, 160, 189, 82, 12, 54, 190, 231, 152, 22, 190, 36, 253, 155, 60, 78, 255, 148, 189, 228, 240, 84, 61, 108, 170, 150, 189, 188, 176, 122, 189, 227, 115, 172, 61, 38, 30, 1, 62, 141, 211, 4, 190, 72, 108, 193, 188, 50, 178, 213, 60, 120, 132, 149, 190, 136, 33, 141, 190, 80, 186, 87, 62, 213, 130, 22, 61, 73, 245, 93, 189, 183, 34, 81, 62, 142, 171, 156, 188, 19, 71, 175, 61, 226, 130, 87, 58, 86, 136, 240, 61, 65, 103, 150, 190, 172, 121, 89, 190, 214, 116, 170, 190, 72, 210, 158, 189, 178, 187, 130, 61, 251, 66, 86, 189, 98, 175, 109, 62, 171, 95, 223, 62, 191, 90, 66, 61, 75, 33, 18, 190, 118, 4, 5, 185, 101, 77, 74, 190, 148, 72, 61, 61, 218, 161, 16, 190, 22, 72, 95, 189, 124, 31, 71, 190, 159, 206, 50, 59, 115, 79, 14, 62, 57, 218, 234, 61, 26, 249, 160, 189, 254, 180, 41, 61, 155, 168, 34, 61, 17, 146, 50, 62, 26, 98, 94, 190, 53, 38, 89, 59, 94, 129, 80, 62, 144, 212, 149, 190, 199, 186, 130, 62, 74, 6, 114, 59, 229, 4, 237, 61, 250, 20, 127, 61, 172, 146, 98, 61, 39, 16, 244, 61, 157, 165, 134, 189, 175, 106, 63, 61, 151, 137, 144, 61, 15, 11, 18, 62, 123, 21, 85, 191, 63, 91, 25, 190, 28, 25, 119, 190, 169, 176, 71, 190, 17, 130, 83, 62, 70, 33, 157, 189, 8, 14, 129, 189, 230, 42, 15, 189, 135, 130, 39, 58, 232, 62, 151, 190, 96, 104, 254, 61, 174, 241, 123, 190, 229, 81, 215, 61, 206, 161, 149, 61, 95, 21, 3, 62, 4, 255, 131, 189, 10, 63, 162, 60, 65, 88, 156, 190, 118, 16, 184, 187, 161, 71, 217, 190, 219, 35, 61, 190, 250, 144, 164, 62, 253, 124, 178, 61, 113, 184, 100, 189, 202, 186, 47, 190, 32, 103, 162, 61, 204, 91, 11, 190, 162, 151, 15, 190, 117, 15, 161, 189, 31, 74, 42, 190, 207, 171, 12, 190, 227, 81, 19, 190, 8, 137, 209, 61, 29, 179, 252, 189, 138, 103, 28, 62, 244, 8, 156, 189, 53, 118, 127, 61, 143, 255, 58, 61, 242, 240, 7, 61, 138, 15, 214, 189, 122, 86, 110, 189, 35, 176, 19, 189, 176, 237, 93, 188, 177, 231, 246, 60, 162, 202, 47, 61, 28, 13, 31, 190, 127, 90, 6, 190, 78, 34, 216, 189, 120, 170, 129, 61, 40, 68, 209, 61, 140, 203, 18, 62, 47, 128, 216, 189, 7, 218, 238, 189, 246, 209, 63, 189, 218, 199, 45, 62, 116, 180, 66, 190, 251, 238, 5, 190, 110, 99, 155, 61, 67, 97, 134, 189, 231, 103, 124, 189, 101, 145, 32, 190, 126, 42, 127, 61, 117, 123, 251, 189, 193, 72, 235, 189, 159, 49, 72, 60, 127, 219, 236, 58, 77, 107, 104, 61, 255, 3, 7, 62, 76, 165, 169, 189, 172, 153, 146, 60, 90, 114, 22, 190, 100, 76, 14, 190, 117, 199, 121, 58, 186, 4, 168, 61, 234, 182, 197, 189, 74, 241, 196, 189, 83, 197, 255, 189, 206, 37, 47, 61, 227, 156, 219, 189, 134, 67, 200, 189, 106, 138, 50, 62, 221, 45, 16, 62, 186, 20, 202, 189, 48, 181, 184, 188, 181, 68, 42, 190, 172, 29, 19, 190, 62, 9, 19, 62, 178, 144, 82, 188, 248, 40, 160, 60, 140, 104, 14, 62, 166, 223, 159, 60, 174, 120, 194, 189, 14, 103, 8, 59, 199, 37, 170, 188, 50, 40, 253, 189, 18, 128, 131, 189, 49, 1, 241, 189, 177, 78, 25, 189, 9, 251, 184, 189, 251, 237, 218, 61, 28, 96, 211, 189, 133, 181, 3, 190, 120, 205, 1, 190, 179, 234, 81, 61, 201, 196, 183, 61, 40, 218, 28, 190, 39, 61, 23, 62, 10, 168, 229, 186, 178, 128, 211, 189, 166, 138, 230, 189, 140, 172, 174, 189, 139, 95, 40, 190, 247, 123, 26, 190, 21, 173, 249, 61, 78, 228, 10, 62, 253, 190, 140, 189, 19, 43, 167, 60, 2, 223, 176, 60, 99, 136, 4, 62, 182, 211, 52, 190, 34, 93, 120, 189, 195, 92, 185, 189, 42, 6, 131, 60, 36, 77, 236, 189, 249, 160, 139, 187, 219, 121, 159, 60, 75, 75, 76, 61, 195, 137, 195, 61, 249, 31, 20, 62, 98, 163, 250, 189, 171, 182, 178, 189, 199, 69, 150, 60, 251, 184, 125, 189, 243, 106, 88, 188, 44, 99, 173, 189, 56, 29, 116, 61, 142, 246, 118, 61, 7, 89, 9, 190, 84, 37, 189, 61, 180, 153, 228, 189, 183, 156, 201, 60, 182, 190, 174, 61, 48, 34, 20, 190, 61, 254, 51, 189, 64, 174, 178, 189, 61, 119, 116, 60, 6, 4, 208, 189, 132, 139, 194, 189, 79, 121, 69, 190, 251, 221, 225, 188, 6, 102, 2, 62, 10, 202, 162, 190, 211, 40, 130, 61, 246, 238, 5, 190, 120, 26, 212, 60, 229, 180, 219, 190, 56, 82, 86, 190, 11, 91, 204, 190, 142, 146, 128, 190, 178, 194, 197, 189, 149, 70, 229, 61, 244, 240, 177, 62, 125, 51, 12, 63, 118, 196, 23, 61, 251, 96, 94, 60, 143, 66, 174, 62, 88, 233, 34, 62, 68, 197, 215, 186, 21, 27, 51, 190, 185, 149, 97, 188, 237, 37, 26, 191, 56, 148, 65, 62, 127, 233, 82, 62, 98, 236, 27, 62, 74, 247, 16, 189, 191, 170, 120, 61, 237, 46, 151, 61, 75, 219, 160, 62, 162, 63, 58, 62, 91, 75, 140, 190, 139, 245, 45, 62, 192, 112, 3, 191, 6, 244, 200, 188, 238, 28, 29, 189, 89, 28, 25, 190, 150, 69, 27, 61, 120, 88, 157, 60, 109, 134, 175, 60, 216, 16, 33, 190, 171, 116, 139, 189, 146, 0, 58, 59, 173, 59, 233, 188, 85, 90, 27, 190, 139, 60, 236, 59, 62, 136, 206, 189, 47, 45, 161, 60, 123, 180, 210, 61, 111, 25, 143, 189, 195, 252, 28, 62, 30, 182, 77, 189, 140, 171, 33, 190, 252, 71, 178, 189, 43, 41, 140, 189, 43, 150, 1, 190, 83, 141, 122, 61, 28, 205, 77, 189, 249, 230, 48, 190, 235, 96, 6, 190, 85, 136, 207, 189, 142, 1, 110, 189, 87, 97, 182, 189, 176, 83, 245, 189, 30, 124, 28, 190, 250, 99, 42, 62, 137, 210, 220, 60, 255, 79, 107, 190, 180, 136, 22, 190, 96, 151, 95, 188, 145, 27, 6, 188, 235, 153, 151, 190, 169, 205, 156, 189, 253, 165, 89, 190, 179, 212, 35, 190, 115, 97, 89, 190, 125, 195, 65, 188, 240, 207, 208, 188, 34, 255, 140, 62, 80, 86, 147, 61, 85, 210, 182, 188, 81, 80, 192, 190, 154, 114, 74, 189, 170, 75, 64, 189, 18, 145, 0, 190, 25, 28, 232, 61, 241, 48, 91, 60, 224, 208, 21, 190, 84, 205, 7, 61, 226, 172, 144, 62, 84, 223, 209, 189, 119, 171, 182, 188, 99, 64, 170, 188, 97, 82, 14, 189, 238, 45, 23, 190, 70, 32, 255, 61, 102, 6, 175, 61, 97, 231, 157, 190, 47, 232, 45, 190, 74, 225, 56, 190, 62, 152, 152, 60, 22, 229, 216, 189, 73, 23, 61, 62, 234, 214, 139, 190, 197, 74, 162, 190, 86, 117, 225, 190, 66, 32, 181, 190, 176, 131, 97, 189, 60, 238, 239, 61, 231, 236, 135, 62, 177, 60, 157, 62, 14, 120, 138, 62, 5, 109, 131, 61, 200, 166, 19, 62, 120, 72, 9, 61, 40, 85, 37, 62, 32, 124, 37, 190, 222, 136, 24, 190, 217, 76, 23, 191, 224, 73, 154, 189, 204, 184, 172, 62, 142, 52, 219, 59, 217, 4, 11, 62, 67, 133, 70, 61, 204, 122, 220, 189, 116, 40, 160, 62, 200, 13, 204, 189, 54, 225, 203, 190, 57, 249, 140, 62, 75, 36, 238, 190, 236, 66, 59, 189, 54, 74, 104, 190, 98, 94, 136, 61, 201, 70, 27, 62, 36, 121, 34, 189, 255, 121, 134, 62, 44, 231, 19, 62, 54, 203, 149, 60, 139, 126, 25, 61, 41, 194, 71, 62, 60, 172, 7, 190, 5, 119, 9, 191, 231, 224, 63, 62, 69, 36, 215, 189, 179, 22, 254, 61, 184, 210, 175, 62, 246, 118, 128, 62, 255, 50, 60, 190, 213, 121, 202, 190, 122, 215, 72, 190, 150, 204, 1, 190, 205, 223, 143, 62, 200, 59, 239, 56, 6, 253, 164, 189, 128, 229, 24, 62, 123, 102, 40, 190, 30, 31, 45, 61, 93, 248, 210, 190, 124, 212, 140, 62, 119, 186, 162, 190, 78, 83, 30, 191, 164, 205, 154, 62, 176, 228, 148, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {134, 73, 145, 62, 160, 23, 49, 190, 90, 150, 54, 60, 53, 243, 48, 61, 237, 129, 72, 62, 241, 176, 31, 61, 214, 194, 200, 189, 242, 235, 138, 62, 235, 34, 147, 62, 159, 125, 90, 62, 22, 63, 127, 62, 196, 106, 107, 188, 18, 213, 75, 62, 217, 252, 229, 188, 140, 73, 106, 61, 15, 1, 141, 188, 79, 25, 138, 62, 81, 249, 153, 62, 250, 191, 164, 189, 2, 121, 203, 61, 125, 141, 57, 189, 201, 38, 48, 61, 101, 86, 78, 62, 206, 69, 204, 188, 125, 221, 44, 59, 229, 200, 32, 189, 105, 175, 60, 190, 217, 122, 145, 189, 151, 119, 206, 188, 192, 0, 192, 61, 11, 251, 172, 188, 55, 31, 154, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 227, 109, 191, 29, 55, 207, 61, 27, 17, 226, 190, 225, 241, 253, 61, 255, 140, 8, 63, 237, 230, 76, 190, 214, 81, 227, 188, 49, 74, 160, 62, 228, 96, 206, 189, 209, 170, 154, 63, 82, 162, 64, 61, 137, 88, 24, 63, 162, 180, 56, 191, 175, 254, 0, 63, 110, 183, 182, 62, 203, 2, 4, 191, 110, 155, 226, 60, 170, 194, 111, 62, 125, 70, 239, 60, 145, 84, 62, 189, 43, 98, 58, 61, 238, 2, 53, 190, 160, 230, 135, 62, 104, 113, 253, 61, 195, 141, 12, 62, 146, 1, 143, 60, 9, 44, 60, 189, 122, 12, 199, 190, 26, 172, 158, 61, 192, 207, 118, 190, 141, 204, 172, 190, 126, 0, 183, 190, 136, 144, 157, 62, 248, 3, 20, 60, 177, 113, 6, 189, 145, 167, 11, 62, 95, 68, 28, 190, 21, 141, 134, 62, 242, 82, 219, 185, 36, 156, 6, 190, 56, 38, 100, 190, 143, 171, 162, 62, 55, 100, 108, 190, 54, 5, 210, 60, 42, 249, 33, 61, 29, 167, 22, 62, 20, 233, 133, 62, 175, 243, 224, 61, 127, 64, 245, 190, 178, 139, 155, 190, 93, 152, 220, 62, 134, 48, 78, 189, 123, 142, 81, 62, 189, 152, 223, 189, 103, 33, 129, 190, 217, 148, 243, 189, 69, 53, 246, 189, 42, 170, 121, 189, 122, 241, 6, 62, 27, 203, 200, 60, 207, 196, 162, 188, 70, 181, 153, 62, 1, 6, 172, 189, 93, 119, 146, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 45, 202, 188, 22, 50, 29, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {89, 155, 213, 61, 180, 173, 99, 191, 177, 73, 1, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {81, 216, 177, 63, 194, 184, 54, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0010/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}