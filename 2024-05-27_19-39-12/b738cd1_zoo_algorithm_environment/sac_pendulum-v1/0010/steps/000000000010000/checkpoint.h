// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 254, 91, 63, 42, 72, 187, 190, 166, 148, 184, 190, 112, 58, 141, 190, 194, 86, 158, 61, 175, 108, 83, 188, 206, 120, 75, 61, 7, 241, 70, 63, 35, 67, 18, 63, 178, 56, 216, 62, 245, 30, 57, 63, 114, 222, 182, 62, 157, 143, 88, 190, 76, 205, 225, 62, 87, 105, 8, 63, 15, 44, 151, 62, 192, 23, 138, 191, 154, 23, 113, 190, 229, 145, 43, 63, 212, 226, 156, 191, 220, 83, 168, 190, 214, 183, 108, 62, 238, 175, 162, 191, 107, 12, 131, 60, 187, 190, 52, 189, 197, 34, 65, 191, 189, 45, 68, 62, 17, 35, 54, 190, 134, 83, 83, 191, 208, 46, 140, 191, 113, 61, 247, 62, 238, 80, 243, 62, 240, 213, 182, 190, 44, 226, 30, 63, 227, 164, 204, 63, 218, 253, 175, 62, 33, 38, 142, 62, 104, 205, 117, 191, 152, 182, 193, 190, 221, 14, 27, 191, 72, 157, 157, 63, 254, 187, 145, 62, 45, 247, 3, 189, 77, 192, 187, 191, 129, 46, 132, 61, 119, 173, 180, 190, 209, 73, 255, 189, 12, 91, 199, 189, 245, 35, 125, 62, 164, 211, 227, 63, 20, 145, 252, 62, 125, 89, 167, 62, 251, 80, 57, 61, 208, 177, 233, 190, 3, 231, 226, 190, 241, 230, 234, 62, 26, 126, 208, 190, 72, 60, 17, 63, 173, 222, 44, 190, 245, 196, 20, 190, 9, 102, 10, 191, 62, 140, 127, 190, 226, 135, 97, 62, 93, 135, 22, 63, 15, 180, 108, 61, 56, 20, 45, 63, 55, 68, 198, 62, 79, 62, 28, 63, 62, 229, 15, 61, 103, 193, 192, 189, 182, 124, 154, 190, 9, 53, 43, 189, 51, 122, 69, 190, 20, 25, 158, 63, 232, 55, 90, 185, 37, 232, 84, 190, 8, 24, 129, 63, 59, 180, 249, 62, 241, 204, 142, 188, 150, 144, 82, 62, 188, 88, 5, 191, 78, 90, 11, 191, 26, 134, 18, 191, 69, 125, 7, 190, 83, 115, 224, 59, 73, 67, 95, 63, 3, 193, 203, 190, 222, 55, 126, 190, 42, 168, 200, 62, 164, 37, 148, 190, 227, 253, 18, 191, 34, 62, 58, 190, 116, 85, 168, 62, 249, 132, 194, 62, 48, 112, 156, 190, 238, 116, 115, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 205, 78, 191, 232, 90, 204, 62, 99, 151, 91, 189, 130, 122, 249, 190, 201, 129, 229, 190, 219, 32, 165, 60, 25, 109, 83, 190, 75, 242, 13, 61, 142, 36, 173, 62, 17, 6, 248, 60, 181, 202, 146, 62, 212, 16, 223, 188, 217, 108, 18, 63, 143, 6, 39, 62, 198, 168, 142, 62, 239, 252, 22, 63, 125, 117, 112, 62, 122, 248, 107, 62, 233, 148, 67, 191, 219, 159, 201, 190, 43, 156, 200, 190, 205, 75, 133, 62, 89, 230, 55, 63, 138, 75, 165, 62, 66, 148, 210, 189, 30, 7, 43, 62, 67, 176, 78, 190, 56, 125, 17, 63, 226, 130, 124, 190, 87, 24, 197, 62, 235, 76, 57, 191, 221, 245, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 180, 239, 190, 222, 6, 100, 62, 120, 43, 205, 191, 185, 56, 229, 188, 16, 4, 37, 191, 34, 111, 32, 190, 141, 40, 171, 190, 246, 59, 27, 191, 238, 81, 182, 62, 11, 172, 88, 62, 160, 138, 234, 189, 153, 139, 97, 63, 166, 214, 193, 61, 85, 172, 208, 190, 227, 170, 147, 62, 118, 43, 143, 62, 211, 119, 128, 191, 162, 11, 148, 190, 19, 209, 164, 189, 7, 48, 106, 191, 109, 110, 236, 62, 154, 109, 65, 190, 70, 182, 255, 188, 58, 245, 199, 61, 75, 27, 129, 189, 147, 118, 236, 189, 70, 163, 176, 62, 215, 153, 89, 62, 186, 228, 182, 190, 200, 209, 132, 62, 157, 146, 43, 190, 26, 7, 90, 189, 207, 132, 157, 189, 223, 142, 74, 190, 180, 22, 216, 189, 211, 20, 7, 62, 227, 12, 4, 61, 196, 61, 180, 60, 136, 157, 183, 188, 83, 123, 182, 189, 217, 11, 172, 189, 133, 82, 175, 61, 64, 52, 91, 190, 121, 134, 173, 61, 153, 11, 164, 61, 84, 138, 74, 190, 114, 255, 89, 61, 159, 33, 150, 189, 224, 60, 66, 59, 67, 252, 49, 190, 16, 163, 249, 61, 225, 19, 44, 62, 242, 55, 21, 62, 118, 53, 5, 190, 56, 107, 66, 190, 164, 95, 224, 189, 157, 227, 222, 188, 189, 43, 8, 62, 254, 49, 240, 59, 148, 241, 139, 188, 41, 228, 228, 189, 163, 7, 114, 189, 177, 69, 47, 60, 99, 146, 17, 62, 244, 188, 24, 191, 60, 236, 14, 59, 170, 236, 44, 60, 186, 194, 122, 62, 214, 138, 157, 190, 67, 50, 190, 190, 109, 28, 239, 190, 70, 7, 41, 190, 155, 187, 124, 60, 101, 121, 17, 61, 34, 69, 207, 61, 211, 20, 25, 63, 134, 76, 2, 62, 132, 115, 152, 190, 113, 16, 128, 58, 240, 163, 194, 189, 74, 245, 81, 62, 87, 227, 18, 190, 65, 32, 17, 190, 180, 111, 242, 190, 230, 235, 229, 61, 158, 25, 164, 62, 184, 255, 132, 62, 226, 52, 46, 190, 160, 205, 38, 62, 249, 66, 139, 60, 48, 82, 200, 62, 41, 71, 234, 190, 31, 165, 26, 190, 28, 80, 206, 62, 32, 195, 144, 190, 2, 182, 30, 62, 219, 225, 7, 62, 0, 102, 191, 189, 84, 84, 9, 62, 94, 234, 129, 190, 194, 89, 133, 62, 53, 221, 47, 61, 182, 167, 111, 62, 122, 68, 214, 62, 12, 93, 108, 62, 165, 9, 57, 61, 1, 167, 181, 188, 196, 200, 91, 191, 182, 1, 19, 62, 58, 78, 156, 190, 237, 252, 22, 62, 240, 109, 9, 62, 105, 102, 45, 191, 72, 229, 98, 61, 107, 20, 112, 61, 208, 9, 54, 63, 107, 3, 140, 62, 34, 95, 218, 187, 36, 26, 247, 187, 108, 213, 143, 189, 139, 101, 17, 190, 251, 218, 134, 190, 134, 59, 10, 190, 206, 134, 25, 60, 115, 197, 151, 61, 123, 163, 149, 189, 184, 200, 137, 61, 137, 227, 62, 190, 3, 121, 232, 61, 199, 205, 244, 189, 246, 80, 146, 62, 24, 107, 20, 190, 186, 207, 125, 62, 110, 44, 207, 61, 184, 84, 97, 62, 93, 68, 55, 62, 131, 136, 50, 190, 98, 0, 131, 190, 154, 130, 138, 61, 136, 117, 0, 191, 19, 240, 19, 62, 25, 114, 112, 62, 100, 238, 223, 190, 25, 161, 11, 60, 166, 122, 7, 62, 120, 146, 152, 62, 231, 181, 14, 191, 40, 109, 59, 190, 197, 188, 214, 190, 208, 117, 33, 190, 76, 92, 199, 62, 176, 70, 129, 61, 218, 144, 31, 188, 56, 203, 230, 61, 188, 127, 100, 190, 40, 74, 52, 190, 238, 7, 60, 62, 137, 54, 3, 189, 168, 218, 27, 62, 22, 224, 234, 61, 159, 143, 11, 62, 7, 72, 171, 190, 167, 197, 108, 187, 64, 241, 130, 62, 10, 206, 202, 60, 67, 184, 149, 187, 41, 235, 133, 188, 97, 90, 63, 190, 9, 228, 12, 190, 210, 239, 193, 61, 174, 22, 129, 61, 181, 139, 168, 62, 181, 94, 154, 189, 43, 20, 18, 189, 234, 123, 152, 188, 13, 112, 170, 190, 82, 153, 19, 62, 232, 99, 209, 61, 227, 88, 35, 190, 239, 224, 205, 189, 50, 110, 104, 61, 43, 218, 60, 62, 126, 238, 83, 61, 189, 70, 179, 189, 45, 128, 175, 59, 246, 210, 31, 60, 37, 69, 228, 61, 158, 188, 254, 190, 172, 22, 55, 189, 119, 159, 136, 188, 128, 239, 145, 189, 78, 61, 137, 62, 163, 85, 152, 188, 162, 129, 27, 187, 118, 210, 173, 61, 88, 115, 251, 61, 135, 198, 26, 190, 37, 61, 174, 189, 119, 74, 8, 62, 149, 113, 4, 190, 30, 61, 51, 190, 253, 75, 59, 190, 147, 147, 239, 61, 55, 220, 28, 190, 150, 146, 149, 61, 212, 177, 31, 189, 250, 18, 131, 189, 55, 22, 133, 187, 182, 118, 50, 190, 89, 251, 16, 62, 31, 247, 133, 189, 196, 1, 25, 190, 55, 27, 101, 189, 42, 105, 58, 187, 181, 2, 70, 190, 177, 88, 15, 61, 228, 47, 26, 190, 167, 250, 244, 188, 16, 249, 35, 187, 57, 184, 188, 61, 250, 254, 172, 61, 209, 102, 210, 189, 82, 47, 204, 61, 142, 19, 33, 62, 38, 213, 141, 189, 13, 161, 224, 187, 121, 208, 170, 189, 60, 58, 23, 191, 216, 61, 239, 188, 31, 231, 24, 190, 164, 245, 97, 62, 232, 87, 152, 62, 200, 250, 142, 62, 109, 171, 61, 190, 208, 124, 22, 62, 38, 139, 132, 191, 177, 42, 108, 62, 65, 241, 102, 190, 160, 83, 89, 62, 71, 215, 37, 62, 85, 187, 196, 189, 187, 128, 94, 62, 48, 53, 139, 189, 139, 14, 246, 61, 190, 141, 59, 62, 123, 60, 37, 61, 197, 54, 163, 61, 165, 84, 31, 61, 155, 116, 61, 62, 180, 188, 89, 190, 83, 126, 194, 189, 235, 225, 5, 62, 113, 190, 1, 62, 217, 186, 56, 62, 248, 1, 244, 62, 65, 83, 4, 60, 101, 29, 122, 191, 247, 230, 124, 61, 203, 208, 75, 189, 74, 37, 135, 61, 106, 189, 168, 61, 41, 11, 22, 191, 226, 101, 21, 190, 177, 73, 252, 189, 203, 175, 75, 62, 119, 79, 11, 191, 110, 159, 158, 62, 218, 239, 150, 62, 178, 100, 251, 60, 91, 140, 59, 62, 161, 76, 235, 189, 17, 150, 67, 61, 45, 117, 218, 60, 204, 155, 162, 190, 63, 132, 239, 190, 121, 83, 125, 62, 73, 158, 10, 60, 238, 153, 153, 61, 127, 176, 141, 62, 85, 130, 56, 62, 227, 171, 94, 61, 79, 38, 13, 62, 58, 139, 15, 190, 215, 97, 7, 190, 204, 243, 218, 190, 4, 100, 50, 190, 208, 249, 253, 189, 174, 212, 30, 62, 105, 68, 51, 62, 124, 195, 143, 61, 110, 99, 71, 62, 251, 250, 172, 190, 24, 68, 54, 62, 148, 131, 29, 63, 226, 67, 181, 62, 132, 106, 227, 62, 153, 69, 138, 62, 112, 194, 95, 191, 105, 60, 8, 191, 231, 186, 97, 191, 119, 235, 177, 190, 249, 252, 174, 62, 15, 155, 131, 190, 172, 78, 132, 186, 203, 93, 169, 61, 92, 243, 125, 62, 48, 137, 158, 61, 136, 202, 228, 189, 195, 28, 152, 190, 182, 12, 173, 190, 228, 129, 118, 62, 182, 54, 4, 62, 185, 181, 62, 63, 238, 161, 225, 61, 243, 226, 204, 190, 16, 150, 99, 189, 51, 232, 141, 190, 144, 132, 206, 190, 116, 199, 114, 62, 78, 83, 252, 189, 229, 18, 241, 189, 132, 53, 136, 62, 198, 182, 183, 61, 37, 112, 94, 61, 207, 254, 175, 189, 19, 155, 38, 190, 81, 139, 19, 189, 146, 12, 81, 61, 109, 69, 189, 59, 107, 241, 6, 190, 127, 227, 207, 61, 84, 197, 182, 189, 26, 253, 34, 190, 112, 197, 223, 189, 157, 87, 151, 62, 8, 126, 5, 62, 150, 151, 46, 62, 34, 86, 38, 61, 107, 37, 173, 61, 224, 184, 117, 190, 255, 39, 84, 189, 79, 24, 223, 61, 209, 130, 144, 62, 54, 161, 50, 189, 71, 61, 194, 62, 245, 140, 209, 188, 206, 28, 138, 61, 242, 254, 251, 189, 92, 195, 173, 59, 163, 242, 136, 62, 101, 54, 64, 190, 98, 159, 50, 61, 159, 204, 67, 189, 158, 253, 159, 61, 13, 232, 146, 61, 200, 38, 153, 189, 192, 217, 3, 62, 154, 253, 156, 61, 14, 168, 60, 190, 130, 182, 223, 190, 41, 153, 163, 58, 245, 35, 38, 191, 60, 172, 20, 191, 146, 41, 72, 189, 1, 135, 201, 191, 135, 100, 147, 62, 14, 166, 33, 191, 9, 223, 41, 62, 15, 189, 54, 62, 240, 115, 159, 190, 54, 230, 147, 190, 12, 100, 171, 188, 143, 3, 166, 190, 248, 6, 14, 62, 163, 120, 233, 61, 141, 43, 85, 189, 58, 205, 2, 62, 246, 44, 144, 62, 55, 121, 237, 190, 126, 148, 181, 61, 122, 183, 22, 191, 37, 93, 8, 62, 109, 105, 45, 62, 178, 149, 166, 61, 71, 145, 175, 190, 231, 90, 45, 189, 21, 162, 8, 191, 232, 215, 41, 190, 96, 129, 221, 190, 186, 220, 142, 190, 161, 66, 108, 190, 237, 209, 59, 191, 186, 252, 44, 61, 38, 142, 60, 62, 24, 206, 85, 62, 225, 109, 43, 63, 76, 39, 59, 61, 115, 160, 149, 190, 244, 49, 199, 62, 180, 221, 57, 62, 136, 208, 144, 190, 129, 176, 163, 190, 118, 223, 39, 190, 42, 148, 31, 191, 159, 209, 53, 63, 129, 245, 141, 62, 247, 65, 41, 189, 148, 30, 235, 61, 165, 107, 187, 189, 66, 109, 179, 190, 189, 40, 146, 62, 241, 219, 121, 61, 100, 238, 190, 190, 140, 55, 77, 62, 60, 234, 153, 61, 95, 173, 95, 62, 155, 236, 19, 190, 54, 236, 44, 62, 14, 171, 50, 62, 174, 6, 146, 189, 17, 38, 117, 190, 126, 129, 195, 190, 61, 89, 159, 190, 117, 205, 70, 189, 1, 98, 4, 191, 77, 245, 36, 62, 211, 243, 69, 62, 47, 92, 105, 190, 109, 156, 119, 61, 111, 92, 251, 62, 5, 80, 50, 189, 220, 56, 254, 188, 254, 226, 135, 62, 92, 8, 45, 190, 85, 250, 88, 190, 150, 44, 121, 63, 33, 200, 33, 191, 64, 139, 182, 190, 61, 154, 241, 62, 130, 167, 211, 189, 135, 40, 145, 62, 103, 209, 98, 190, 58, 83, 45, 62, 165, 200, 181, 189, 118, 86, 36, 62, 204, 203, 29, 62, 43, 182, 212, 185, 228, 128, 184, 190, 247, 219, 3, 63, 112, 21, 221, 189, 224, 168, 21, 62, 210, 76, 0, 191, 48, 145, 65, 61, 226, 246, 244, 62, 247, 160, 171, 62, 177, 201, 209, 62, 174, 79, 150, 62, 225, 186, 248, 190, 89, 13, 51, 190, 125, 243, 43, 191, 30, 40, 195, 189, 14, 74, 77, 61, 12, 116, 105, 188, 184, 85, 27, 190, 15, 12, 119, 190, 50, 13, 229, 60, 199, 255, 4, 60, 54, 28, 12, 190, 84, 161, 61, 61, 244, 47, 114, 190, 240, 188, 7, 62, 98, 21, 245, 61, 123, 188, 227, 189, 239, 35, 176, 188, 65, 42, 16, 191, 144, 137, 128, 61, 224, 200, 128, 189, 46, 117, 188, 190, 164, 156, 218, 62, 227, 92, 64, 61, 121, 253, 27, 190, 187, 30, 194, 61, 155, 220, 253, 190, 29, 17, 140, 190, 185, 27, 241, 190, 41, 253, 188, 189, 218, 54, 82, 190, 143, 11, 159, 190, 212, 171, 78, 62, 89, 12, 204, 61, 90, 145, 226, 61, 246, 63, 22, 63, 230, 213, 41, 189, 146, 219, 141, 189, 99, 55, 23, 62, 239, 99, 96, 62, 34, 80, 135, 61, 230, 44, 150, 190, 31, 8, 128, 189, 68, 107, 44, 191, 11, 119, 35, 63, 233, 103, 101, 62, 230, 228, 166, 61, 174, 66, 9, 188, 223, 97, 224, 61, 225, 18, 133, 189, 191, 152, 63, 189, 29, 48, 134, 62, 198, 199, 199, 189, 217, 195, 112, 62, 239, 57, 30, 190, 112, 206, 84, 190, 74, 191, 141, 190, 97, 227, 197, 61, 114, 248, 2, 191, 230, 186, 233, 190, 72, 187, 142, 190, 158, 193, 149, 190, 233, 43, 157, 188, 144, 40, 37, 189, 149, 193, 198, 61, 243, 88, 1, 61, 249, 220, 68, 62, 67, 91, 129, 189, 98, 116, 13, 62, 230, 138, 132, 190, 134, 160, 221, 61, 247, 208, 177, 61, 169, 226, 188, 189, 170, 135, 193, 61, 143, 157, 237, 61, 9, 229, 186, 190, 41, 42, 70, 189, 230, 210, 235, 62, 151, 71, 131, 62, 107, 88, 36, 62, 65, 17, 0, 61, 210, 0, 160, 190, 187, 3, 73, 62, 170, 135, 78, 62, 62, 221, 112, 190, 151, 91, 201, 188, 223, 240, 205, 190, 193, 26, 7, 63, 192, 173, 47, 190, 122, 238, 150, 62, 4, 4, 78, 62, 123, 81, 61, 190, 229, 18, 126, 189, 186, 208, 66, 61, 119, 135, 72, 61, 122, 116, 131, 61, 239, 161, 3, 187, 55, 123, 90, 190, 78, 237, 146, 62, 78, 164, 200, 190, 77, 228, 199, 61, 73, 91, 151, 188, 107, 252, 73, 61, 214, 173, 132, 62, 124, 28, 194, 61, 228, 124, 173, 61, 233, 180, 225, 189, 149, 217, 155, 59, 179, 239, 130, 189, 231, 74, 40, 62, 244, 81, 189, 62, 209, 76, 234, 61, 35, 55, 51, 62, 185, 107, 158, 189, 49, 234, 153, 189, 2, 67, 175, 189, 103, 135, 205, 59, 185, 122, 22, 62, 108, 207, 251, 61, 115, 229, 191, 60, 96, 6, 210, 60, 12, 48, 250, 190, 247, 181, 170, 61, 176, 198, 13, 62, 87, 190, 207, 189, 230, 88, 178, 61, 10, 96, 91, 62, 167, 248, 101, 62, 253, 98, 11, 190, 205, 176, 66, 62, 252, 211, 160, 190, 98, 56, 110, 62, 157, 66, 0, 188, 225, 233, 114, 190, 243, 121, 143, 62, 10, 233, 247, 190, 80, 7, 177, 188, 166, 107, 204, 189, 60, 154, 254, 189, 175, 158, 42, 190, 150, 31, 8, 190, 26, 185, 90, 62, 103, 213, 139, 189, 153, 75, 155, 60, 124, 92, 110, 190, 144, 230, 84, 61, 215, 242, 66, 189, 19, 181, 141, 190, 253, 244, 151, 189, 74, 44, 7, 191, 164, 37, 201, 189, 239, 134, 121, 62, 230, 41, 19, 190, 15, 190, 187, 60, 239, 84, 211, 189, 140, 85, 144, 61, 180, 43, 57, 187, 7, 36, 98, 190, 186, 9, 197, 189, 200, 43, 43, 190, 2, 121, 135, 62, 110, 129, 35, 62, 99, 30, 101, 61, 25, 190, 6, 62, 252, 73, 64, 62, 204, 164, 245, 59, 95, 235, 117, 62, 61, 164, 223, 60, 13, 202, 71, 188, 82, 123, 57, 190, 226, 144, 64, 188, 39, 206, 207, 190, 36, 203, 76, 189, 226, 97, 167, 60, 252, 63, 3, 190, 31, 13, 32, 62, 122, 149, 90, 62, 45, 59, 97, 61, 121, 227, 53, 62, 135, 5, 73, 61, 140, 211, 113, 190, 140, 77, 30, 60, 16, 119, 12, 190, 200, 198, 11, 188, 33, 121, 197, 190, 161, 178, 69, 190, 57, 76, 239, 60, 143, 47, 67, 62, 210, 198, 194, 60, 233, 171, 0, 191, 186, 148, 212, 189, 7, 63, 21, 191, 173, 81, 83, 61, 191, 101, 116, 190, 223, 45, 117, 62, 19, 89, 187, 62, 80, 151, 235, 61, 200, 191, 12, 190, 149, 213, 154, 190, 132, 234, 29, 190, 37, 25, 110, 61, 107, 165, 54, 189, 77, 218, 202, 188, 193, 154, 188, 189, 149, 222, 46, 189, 0, 251, 17, 62, 140, 161, 72, 62, 193, 141, 227, 189, 119, 188, 145, 190, 52, 13, 246, 60, 28, 196, 198, 190, 79, 235, 234, 190, 64, 188, 204, 61, 252, 109, 180, 188, 20, 171, 126, 189, 159, 55, 116, 62, 209, 147, 85, 190, 160, 168, 27, 61, 113, 51, 223, 60, 40, 60, 46, 62, 163, 90, 123, 190, 188, 208, 193, 190, 185, 28, 239, 190, 140, 225, 51, 60, 42, 105, 165, 61, 123, 168, 192, 189, 96, 151, 130, 62, 21, 249, 3, 63, 68, 148, 33, 60, 172, 239, 97, 190, 42, 114, 138, 188, 2, 205, 160, 190, 144, 122, 169, 61, 167, 68, 6, 190, 165, 211, 89, 189, 201, 242, 124, 190, 180, 208, 236, 188, 68, 250, 57, 62, 248, 245, 29, 62, 2, 13, 198, 189, 95, 80, 45, 62, 90, 231, 224, 60, 39, 105, 48, 62, 57, 23, 5, 191, 243, 213, 91, 61, 96, 77, 119, 62, 4, 116, 55, 190, 154, 253, 194, 62, 193, 80, 219, 188, 41, 59, 132, 61, 112, 146, 100, 61, 127, 186, 31, 61, 151, 9, 210, 61, 205, 162, 22, 188, 76, 45, 106, 60, 33, 8, 252, 60, 54, 61, 205, 61, 33, 184, 79, 191, 44, 115, 54, 190, 176, 231, 134, 190, 160, 79, 111, 190, 209, 206, 68, 62, 180, 222, 143, 189, 30, 184, 199, 189, 157, 212, 238, 188, 225, 20, 51, 189, 69, 73, 151, 190, 29, 241, 138, 61, 45, 163, 130, 190, 122, 51, 198, 61, 71, 44, 56, 61, 148, 21, 147, 61, 144, 74, 105, 188, 186, 233, 19, 60, 38, 96, 155, 190, 5, 254, 41, 189, 198, 195, 226, 190, 123, 15, 152, 190, 48, 44, 137, 62, 27, 250, 7, 60, 113, 184, 100, 189, 202, 186, 47, 190, 32, 103, 162, 61, 204, 91, 11, 190, 162, 151, 15, 190, 117, 15, 161, 189, 31, 74, 42, 190, 207, 171, 12, 190, 227, 81, 19, 190, 8, 137, 209, 61, 29, 179, 252, 189, 138, 103, 28, 62, 244, 8, 156, 189, 53, 118, 127, 61, 143, 255, 58, 61, 242, 240, 7, 61, 138, 15, 214, 189, 122, 86, 110, 189, 35, 176, 19, 189, 176, 237, 93, 188, 177, 231, 246, 60, 162, 202, 47, 61, 28, 13, 31, 190, 127, 90, 6, 190, 78, 34, 216, 189, 120, 170, 129, 61, 40, 68, 209, 61, 140, 203, 18, 62, 47, 128, 216, 189, 7, 218, 238, 189, 246, 209, 63, 189, 218, 199, 45, 62, 116, 180, 66, 190, 251, 238, 5, 190, 110, 99, 155, 61, 67, 97, 134, 189, 231, 103, 124, 189, 101, 145, 32, 190, 126, 42, 127, 61, 117, 123, 251, 189, 193, 72, 235, 189, 159, 49, 72, 60, 127, 219, 236, 58, 77, 107, 104, 61, 255, 3, 7, 62, 76, 165, 169, 189, 172, 153, 146, 60, 90, 114, 22, 190, 100, 76, 14, 190, 117, 199, 121, 58, 186, 4, 168, 61, 234, 182, 197, 189, 74, 241, 196, 189, 83, 197, 255, 189, 206, 37, 47, 61, 227, 156, 219, 189, 134, 67, 200, 189, 106, 138, 50, 62, 221, 45, 16, 62, 186, 20, 202, 189, 48, 181, 184, 188, 181, 68, 42, 190, 172, 29, 19, 190, 62, 9, 19, 62, 178, 144, 82, 188, 248, 40, 160, 60, 140, 104, 14, 62, 166, 223, 159, 60, 174, 120, 194, 189, 14, 103, 8, 59, 199, 37, 170, 188, 50, 40, 253, 189, 18, 128, 131, 189, 49, 1, 241, 189, 177, 78, 25, 189, 9, 251, 184, 189, 251, 237, 218, 61, 28, 96, 211, 189, 133, 181, 3, 190, 120, 205, 1, 190, 179, 234, 81, 61, 201, 196, 183, 61, 40, 218, 28, 190, 39, 61, 23, 62, 10, 168, 229, 186, 178, 128, 211, 189, 166, 138, 230, 189, 140, 172, 174, 189, 139, 95, 40, 190, 247, 123, 26, 190, 21, 173, 249, 61, 78, 228, 10, 62, 253, 190, 140, 189, 19, 43, 167, 60, 2, 223, 176, 60, 99, 136, 4, 62, 244, 28, 63, 190, 101, 70, 188, 189, 75, 12, 227, 189, 168, 118, 114, 60, 75, 183, 236, 189, 234, 132, 145, 188, 158, 172, 241, 59, 177, 229, 252, 60, 39, 148, 140, 61, 194, 106, 12, 62, 211, 255, 21, 190, 108, 108, 240, 189, 217, 219, 102, 59, 251, 184, 125, 189, 74, 239, 241, 188, 185, 57, 225, 189, 178, 96, 233, 60, 97, 102, 65, 61, 39, 173, 246, 189, 99, 10, 166, 61, 180, 153, 228, 189, 168, 25, 193, 59, 0, 162, 122, 61, 17, 0, 50, 190, 61, 254, 51, 189, 75, 206, 192, 189, 194, 104, 184, 59, 61, 57, 238, 189, 247, 165, 178, 189, 5, 217, 85, 190, 251, 221, 225, 188, 134, 190, 218, 61, 32, 131, 225, 190, 42, 214, 16, 62, 201, 201, 249, 189, 200, 117, 86, 189, 191, 231, 214, 190, 226, 157, 119, 190, 186, 197, 207, 190, 134, 65, 166, 190, 167, 121, 232, 189, 248, 161, 213, 61, 76, 185, 171, 62, 130, 10, 19, 63, 87, 153, 185, 60, 60, 222, 246, 61, 158, 117, 108, 62, 152, 238, 81, 62, 158, 253, 153, 59, 134, 253, 38, 190, 7, 32, 247, 187, 111, 120, 59, 191, 33, 95, 102, 62, 81, 106, 54, 62, 59, 57, 37, 62, 157, 72, 208, 187, 93, 86, 53, 61, 8, 247, 237, 61, 241, 92, 153, 62, 144, 216, 108, 62, 39, 54, 152, 190, 187, 71, 47, 62, 159, 190, 227, 190, 49, 153, 142, 189, 238, 28, 29, 189, 152, 51, 30, 190, 78, 163, 201, 59, 183, 142, 212, 184, 25, 53, 41, 188, 216, 16, 33, 190, 171, 116, 139, 189, 146, 0, 58, 59, 184, 149, 53, 189, 85, 90, 27, 190, 139, 60, 236, 59, 2, 206, 246, 189, 47, 45, 161, 60, 158, 71, 154, 61, 110, 180, 159, 189, 29, 56, 28, 62, 79, 227, 167, 189, 140, 171, 33, 190, 252, 71, 178, 189, 43, 41, 140, 189, 223, 193, 16, 190, 176, 246, 240, 60, 34, 148, 100, 189, 198, 207, 49, 190, 235, 96, 6, 190, 117, 72, 8, 190, 142, 1, 110, 189, 87, 97, 182, 189, 176, 83, 245, 189, 30, 124, 28, 190, 79, 29, 20, 62, 2, 238, 133, 60, 205, 36, 12, 191, 43, 20, 189, 188, 41, 228, 252, 189, 212, 52, 78, 190, 121, 71, 191, 190, 12, 137, 9, 191, 219, 102, 25, 191, 162, 24, 31, 190, 101, 102, 122, 190, 124, 209, 85, 189, 211, 136, 146, 60, 154, 136, 159, 62, 3, 71, 109, 61, 152, 40, 90, 189, 21, 101, 253, 190, 202, 228, 192, 60, 155, 92, 197, 189, 128, 170, 222, 189, 147, 66, 244, 61, 217, 94, 152, 190, 139, 90, 56, 190, 63, 236, 18, 189, 35, 119, 198, 62, 3, 116, 3, 189, 219, 124, 175, 61, 93, 250, 22, 190, 28, 116, 99, 189, 230, 68, 3, 190, 69, 227, 47, 62, 150, 108, 25, 62, 13, 197, 162, 190, 210, 186, 97, 190, 35, 171, 131, 190, 230, 150, 30, 61, 152, 71, 130, 189, 121, 173, 101, 62, 43, 100, 98, 190, 234, 132, 176, 190, 5, 41, 226, 190, 135, 166, 170, 190, 189, 81, 11, 189, 45, 177, 21, 62, 254, 210, 127, 62, 56, 134, 189, 62, 227, 240, 133, 62, 27, 204, 185, 61, 127, 226, 0, 62, 67, 189, 20, 61, 193, 135, 59, 62, 124, 147, 18, 190, 11, 214, 217, 189, 23, 74, 62, 191, 74, 46, 108, 189, 160, 130, 175, 62, 205, 90, 149, 188, 175, 17, 23, 62, 70, 175, 88, 61, 142, 54, 138, 189, 183, 21, 172, 62, 50, 245, 147, 189, 148, 38, 199, 190, 229, 111, 151, 62, 125, 230, 197, 190, 11, 254, 154, 60, 226, 151, 85, 190, 76, 95, 6, 61, 115, 209, 17, 62, 29, 234, 183, 188, 63, 185, 138, 62, 12, 64, 186, 190, 97, 134, 11, 190, 243, 231, 208, 189, 46, 142, 0, 62, 105, 40, 150, 190, 242, 60, 227, 190, 11, 23, 64, 62, 28, 68, 211, 190, 100, 37, 15, 62, 47, 152, 71, 62, 187, 43, 25, 62, 45, 0, 108, 190, 172, 114, 193, 190, 78, 156, 76, 190, 123, 61, 40, 61, 151, 28, 100, 62, 67, 175, 22, 189, 99, 251, 222, 189, 64, 48, 132, 61, 4, 237, 103, 190, 93, 138, 57, 61, 22, 249, 218, 190, 117, 33, 26, 62, 208, 167, 162, 190, 34, 126, 215, 190, 21, 190, 174, 62, 203, 111, 14, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 190, 149, 62, 160, 23, 49, 190, 45, 48, 13, 60, 95, 80, 1, 62, 142, 11, 114, 62, 134, 255, 166, 188, 214, 194, 200, 189, 58, 57, 136, 62, 93, 53, 124, 62, 15, 41, 96, 62, 16, 89, 138, 62, 149, 172, 193, 60, 76, 54, 67, 62, 3, 83, 159, 188, 35, 128, 157, 61, 129, 154, 213, 60, 228, 139, 138, 62, 55, 92, 169, 62, 162, 119, 46, 190, 219, 175, 132, 61, 110, 145, 244, 187, 147, 224, 25, 61, 192, 79, 39, 62, 206, 69, 204, 188, 125, 221, 44, 59, 229, 200, 32, 189, 188, 61, 89, 190, 133, 226, 48, 189, 28, 1, 10, 189, 187, 94, 72, 62, 247, 242, 3, 189, 224, 39, 25, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 102, 136, 191, 29, 55, 207, 61, 240, 76, 22, 191, 211, 156, 144, 62, 151, 48, 26, 63, 70, 169, 75, 190, 214, 81, 227, 188, 164, 150, 202, 62, 186, 228, 211, 189, 223, 141, 171, 63, 249, 198, 105, 61, 66, 230, 48, 63, 253, 12, 70, 191, 195, 81, 5, 63, 236, 81, 28, 63, 3, 241, 0, 191, 88, 115, 64, 61, 192, 143, 123, 62, 193, 99, 163, 190, 117, 249, 172, 188, 74, 189, 218, 61, 119, 102, 177, 190, 32, 150, 55, 62, 104, 113, 253, 61, 195, 141, 12, 62, 146, 1, 143, 60, 234, 124, 159, 60, 196, 2, 195, 190, 93, 126, 156, 61, 240, 123, 53, 191, 242, 62, 156, 190, 171, 171, 161, 190, 195, 124, 137, 62, 248, 3, 20, 60, 194, 90, 37, 189, 176, 244, 60, 62, 223, 147, 180, 59, 250, 43, 114, 62, 242, 82, 219, 185, 211, 125, 63, 190, 102, 146, 139, 190, 154, 175, 15, 63, 157, 78, 141, 190, 76, 140, 176, 61, 10, 83, 54, 62, 169, 242, 34, 62, 204, 162, 204, 62, 73, 71, 48, 62, 19, 66, 247, 190, 196, 188, 147, 190, 202, 241, 185, 62, 234, 246, 205, 189, 18, 184, 179, 62, 93, 117, 49, 190, 100, 248, 125, 190, 217, 148, 243, 189, 69, 53, 246, 189, 42, 170, 121, 189, 131, 15, 207, 61, 255, 20, 133, 60, 78, 18, 165, 188, 175, 226, 199, 62, 43, 165, 176, 189, 51, 226, 208, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 44, 155, 59, 103, 219, 68, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {187, 156, 163, 191, 5, 219, 173, 191, 229, 26, 128, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {111, 121, 102, 191, 210, 141, 185, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0010/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}