// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 227, 80, 63, 50, 152, 188, 190, 218, 15, 199, 190, 158, 43, 107, 190, 82, 141, 58, 61, 19, 200, 181, 187, 144, 220, 155, 61, 88, 6, 65, 63, 172, 17, 21, 63, 33, 115, 138, 62, 87, 228, 49, 63, 217, 251, 195, 62, 111, 127, 81, 190, 206, 22, 225, 62, 206, 247, 14, 63, 65, 12, 192, 62, 131, 14, 123, 191, 97, 70, 75, 190, 87, 73, 51, 63, 218, 58, 148, 191, 33, 42, 176, 190, 192, 203, 149, 62, 156, 57, 154, 191, 110, 1, 85, 59, 188, 19, 213, 188, 210, 204, 73, 191, 167, 97, 58, 62, 147, 35, 0, 190, 168, 93, 55, 191, 154, 153, 141, 191, 34, 69, 250, 62, 226, 49, 239, 62, 103, 108, 187, 190, 223, 171, 35, 63, 138, 205, 193, 63, 133, 16, 189, 62, 212, 153, 170, 62, 30, 198, 82, 191, 157, 126, 209, 190, 67, 153, 49, 191, 82, 95, 143, 63, 166, 80, 145, 62, 212, 50, 16, 189, 193, 21, 181, 191, 151, 170, 202, 61, 30, 186, 161, 190, 220, 132, 6, 190, 174, 189, 203, 189, 88, 183, 106, 62, 127, 221, 197, 63, 245, 110, 1, 63, 118, 55, 169, 62, 163, 30, 29, 187, 237, 213, 236, 190, 238, 149, 191, 190, 131, 27, 210, 62, 179, 48, 217, 190, 21, 199, 17, 63, 115, 153, 21, 190, 129, 49, 16, 190, 133, 169, 10, 191, 2, 180, 186, 190, 249, 205, 70, 62, 150, 149, 21, 63, 232, 64, 132, 61, 66, 96, 43, 63, 160, 128, 205, 62, 211, 30, 5, 63, 191, 120, 53, 61, 126, 229, 56, 189, 61, 213, 148, 190, 51, 206, 10, 189, 42, 92, 105, 190, 195, 77, 140, 63, 210, 170, 207, 189, 214, 147, 118, 190, 130, 88, 85, 63, 64, 156, 9, 63, 101, 165, 46, 189, 70, 48, 146, 62, 124, 84, 4, 191, 73, 229, 2, 191, 226, 109, 6, 191, 185, 242, 5, 190, 135, 239, 138, 61, 64, 199, 81, 63, 24, 41, 209, 190, 208, 49, 67, 190, 222, 101, 241, 62, 26, 36, 155, 190, 9, 254, 9, 191, 43, 187, 3, 190, 194, 210, 173, 62, 62, 133, 175, 62, 246, 5, 153, 190, 82, 217, 94, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 76, 70, 191, 42, 108, 220, 62, 40, 23, 33, 189, 132, 39, 199, 190, 104, 34, 213, 190, 78, 12, 171, 188, 107, 244, 69, 190, 219, 7, 208, 60, 163, 33, 189, 62, 186, 143, 155, 61, 170, 141, 161, 62, 24, 197, 56, 189, 75, 18, 25, 63, 95, 0, 49, 62, 8, 157, 157, 62, 170, 97, 17, 63, 246, 4, 153, 62, 80, 107, 119, 62, 56, 173, 38, 191, 79, 163, 179, 190, 80, 90, 184, 190, 2, 230, 141, 62, 199, 119, 55, 63, 75, 150, 196, 62, 37, 186, 221, 189, 196, 121, 66, 62, 224, 31, 95, 190, 29, 162, 9, 63, 248, 38, 57, 190, 61, 203, 170, 62, 243, 32, 62, 191, 110, 51, 4, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {223, 196, 215, 190, 122, 77, 105, 62, 154, 200, 194, 191, 185, 56, 229, 188, 112, 241, 16, 191, 203, 106, 87, 190, 217, 239, 206, 190, 133, 132, 22, 191, 209, 128, 188, 62, 178, 48, 86, 62, 30, 212, 230, 189, 55, 202, 55, 63, 239, 1, 143, 61, 76, 19, 225, 190, 93, 127, 154, 62, 122, 178, 142, 62, 251, 57, 55, 191, 91, 46, 153, 190, 22, 222, 70, 189, 165, 111, 76, 191, 126, 57, 10, 63, 7, 76, 204, 189, 244, 14, 137, 189, 207, 232, 158, 61, 32, 85, 127, 188, 252, 146, 221, 189, 73, 174, 182, 62, 208, 55, 86, 62, 191, 36, 170, 190, 136, 195, 136, 62, 199, 227, 29, 60, 116, 243, 212, 189, 207, 132, 157, 189, 223, 142, 74, 190, 180, 22, 216, 189, 211, 20, 7, 62, 227, 12, 4, 61, 196, 61, 180, 60, 136, 157, 183, 188, 83, 123, 182, 189, 217, 11, 172, 189, 133, 82, 175, 61, 64, 52, 91, 190, 121, 134, 173, 61, 153, 11, 164, 61, 84, 138, 74, 190, 114, 255, 89, 61, 159, 33, 150, 189, 224, 60, 66, 59, 67, 252, 49, 190, 16, 163, 249, 61, 225, 19, 44, 62, 242, 55, 21, 62, 118, 53, 5, 190, 56, 107, 66, 190, 164, 95, 224, 189, 157, 227, 222, 188, 189, 43, 8, 62, 254, 49, 240, 59, 148, 241, 139, 188, 41, 228, 228, 189, 163, 7, 114, 189, 177, 69, 47, 60, 99, 146, 17, 62, 31, 47, 9, 191, 143, 1, 218, 187, 120, 88, 19, 188, 232, 9, 88, 62, 29, 202, 171, 190, 15, 33, 161, 190, 166, 84, 216, 190, 81, 124, 59, 190, 108, 172, 53, 60, 34, 127, 203, 60, 56, 133, 174, 61, 162, 45, 20, 63, 23, 102, 3, 62, 107, 199, 135, 190, 21, 121, 175, 60, 223, 186, 169, 189, 226, 26, 73, 62, 139, 33, 41, 190, 228, 160, 41, 190, 40, 66, 236, 190, 214, 48, 217, 61, 39, 99, 154, 62, 49, 2, 120, 62, 102, 15, 56, 190, 78, 62, 252, 61, 60, 136, 140, 60, 25, 153, 193, 62, 165, 104, 212, 190, 65, 23, 54, 190, 53, 132, 190, 62, 220, 249, 166, 190, 33, 59, 238, 61, 244, 20, 139, 61, 91, 160, 15, 190, 10, 102, 33, 62, 151, 99, 5, 190, 110, 150, 151, 62, 122, 232, 162, 61, 16, 147, 146, 62, 202, 162, 210, 62, 111, 17, 68, 62, 220, 44, 114, 61, 245, 213, 85, 189, 138, 207, 60, 191, 156, 46, 6, 62, 135, 206, 65, 190, 64, 119, 173, 61, 152, 187, 202, 61, 55, 241, 17, 191, 111, 94, 105, 61, 101, 162, 147, 61, 251, 60, 17, 63, 183, 242, 42, 62, 93, 164, 195, 188, 143, 110, 76, 189, 14, 180, 220, 189, 195, 95, 15, 190, 36, 145, 88, 190, 97, 135, 4, 190, 175, 87, 115, 188, 245, 208, 132, 61, 148, 157, 174, 189, 208, 5, 134, 61, 184, 4, 68, 190, 251, 243, 55, 61, 235, 190, 248, 189, 121, 125, 146, 62, 19, 123, 29, 190, 18, 110, 130, 62, 211, 206, 182, 61, 219, 44, 75, 62, 39, 167, 98, 62, 77, 120, 20, 190, 194, 26, 117, 190, 51, 94, 138, 60, 16, 12, 7, 191, 170, 199, 13, 62, 98, 58, 82, 62, 244, 125, 207, 190, 72, 46, 117, 59, 185, 205, 240, 61, 55, 76, 135, 62, 23, 158, 179, 190, 133, 88, 89, 190, 14, 162, 209, 190, 142, 0, 42, 190, 132, 169, 179, 62, 27, 163, 160, 61, 251, 207, 201, 188, 80, 43, 203, 61, 161, 162, 107, 190, 253, 24, 210, 189, 88, 180, 61, 62, 166, 143, 139, 189, 170, 248, 51, 62, 195, 62, 4, 62, 166, 160, 220, 61, 123, 69, 137, 190, 221, 85, 124, 188, 171, 197, 106, 62, 73, 202, 24, 60, 128, 188, 42, 60, 158, 191, 181, 187, 237, 30, 94, 190, 87, 72, 40, 190, 251, 19, 166, 61, 114, 189, 134, 61, 179, 246, 173, 62, 70, 83, 148, 189, 103, 146, 88, 61, 157, 200, 107, 188, 85, 108, 134, 190, 81, 125, 36, 62, 207, 136, 195, 61, 60, 217, 73, 190, 124, 217, 1, 190, 112, 183, 89, 61, 151, 100, 27, 62, 91, 143, 129, 61, 92, 112, 179, 189, 230, 204, 180, 61, 192, 42, 246, 60, 154, 23, 207, 61, 135, 231, 206, 190, 205, 175, 48, 189, 36, 7, 78, 59, 19, 26, 204, 189, 180, 48, 84, 62, 163, 85, 152, 188, 162, 129, 27, 187, 118, 210, 173, 61, 88, 115, 251, 61, 135, 198, 26, 190, 37, 61, 174, 189, 119, 74, 8, 62, 149, 113, 4, 190, 30, 61, 51, 190, 253, 75, 59, 190, 147, 147, 239, 61, 55, 220, 28, 190, 150, 146, 149, 61, 212, 177, 31, 189, 250, 18, 131, 189, 55, 22, 133, 187, 182, 118, 50, 190, 89, 251, 16, 62, 31, 247, 133, 189, 196, 1, 25, 190, 55, 27, 101, 189, 42, 105, 58, 187, 181, 2, 70, 190, 177, 88, 15, 61, 228, 47, 26, 190, 167, 250, 244, 188, 16, 249, 35, 187, 57, 184, 188, 61, 250, 254, 172, 61, 209, 102, 210, 189, 82, 47, 204, 61, 142, 19, 33, 62, 222, 218, 211, 189, 30, 232, 2, 60, 231, 110, 90, 189, 238, 17, 0, 191, 149, 149, 53, 189, 185, 5, 8, 190, 141, 47, 122, 62, 75, 13, 149, 62, 69, 82, 136, 62, 112, 171, 41, 190, 224, 109, 12, 62, 134, 155, 113, 191, 188, 236, 113, 62, 70, 193, 43, 190, 76, 230, 54, 62, 48, 228, 49, 62, 6, 92, 204, 188, 245, 86, 104, 62, 128, 172, 107, 189, 221, 52, 155, 61, 96, 178, 146, 61, 157, 120, 35, 61, 189, 24, 192, 61, 35, 48, 68, 61, 216, 224, 65, 62, 68, 124, 60, 190, 145, 255, 177, 189, 30, 151, 20, 62, 108, 202, 2, 62, 56, 144, 71, 62, 38, 250, 203, 62, 37, 31, 82, 60, 22, 116, 85, 191, 179, 26, 152, 61, 79, 72, 168, 189, 125, 158, 35, 61, 66, 24, 75, 61, 153, 144, 0, 191, 222, 183, 201, 189, 154, 112, 225, 189, 44, 19, 68, 62, 9, 255, 213, 190, 174, 59, 193, 62, 43, 244, 155, 62, 101, 40, 186, 61, 223, 207, 30, 62, 96, 43, 253, 189, 118, 236, 185, 61, 65, 116, 217, 60, 49, 237, 129, 190, 247, 128, 221, 190, 127, 122, 139, 62, 16, 30, 59, 188, 60, 160, 138, 61, 103, 80, 156, 62, 72, 11, 72, 62, 46, 37, 115, 61, 46, 140, 222, 61, 197, 246, 213, 189, 157, 83, 225, 189, 83, 7, 207, 190, 168, 55, 7, 190, 198, 213, 20, 190, 35, 112, 246, 61, 148, 126, 77, 62, 154, 228, 168, 61, 43, 40, 71, 62, 179, 191, 160, 190, 5, 166, 53, 62, 56, 2, 14, 63, 151, 169, 212, 62, 245, 144, 228, 62, 217, 173, 153, 62, 86, 22, 76, 191, 57, 100, 4, 191, 185, 217, 100, 191, 12, 129, 183, 190, 19, 189, 167, 62, 55, 249, 117, 190, 196, 34, 171, 60, 228, 104, 88, 61, 30, 107, 150, 62, 162, 45, 53, 62, 100, 184, 246, 189, 224, 89, 152, 190, 41, 6, 175, 190, 41, 136, 119, 62, 157, 51, 42, 62, 116, 240, 39, 63, 13, 171, 231, 61, 183, 110, 205, 190, 235, 105, 203, 188, 150, 46, 31, 190, 37, 133, 126, 190, 174, 247, 125, 62, 70, 60, 86, 189, 57, 177, 20, 190, 131, 186, 136, 62, 54, 252, 164, 61, 166, 215, 86, 61, 251, 211, 188, 189, 47, 196, 26, 190, 159, 117, 196, 188, 1, 233, 232, 60, 45, 215, 105, 188, 61, 188, 24, 190, 188, 242, 193, 61, 3, 96, 187, 189, 252, 168, 30, 190, 197, 92, 233, 189, 5, 134, 122, 62, 247, 35, 2, 62, 125, 238, 49, 62, 187, 191, 16, 61, 137, 134, 139, 61, 50, 122, 105, 190, 66, 140, 137, 189, 254, 88, 229, 61, 252, 53, 150, 62, 250, 64, 22, 189, 60, 12, 170, 62, 164, 57, 14, 189, 113, 58, 33, 61, 241, 34, 9, 190, 220, 89, 22, 189, 254, 172, 133, 62, 236, 247, 53, 190, 54, 50, 98, 61, 159, 204, 67, 189, 241, 46, 183, 61, 83, 68, 69, 61, 33, 15, 216, 189, 180, 109, 246, 61, 204, 71, 157, 61, 14, 168, 60, 190, 235, 237, 203, 190, 37, 84, 196, 59, 51, 133, 88, 191, 59, 215, 47, 191, 48, 113, 205, 189, 29, 70, 181, 191, 134, 94, 147, 62, 45, 104, 27, 191, 169, 225, 47, 62, 108, 198, 13, 62, 32, 19, 11, 191, 50, 54, 225, 189, 12, 100, 171, 188, 91, 195, 149, 190, 194, 7, 190, 61, 0, 202, 244, 60, 66, 17, 139, 188, 129, 17, 11, 62, 115, 139, 136, 62, 120, 14, 234, 190, 52, 55, 18, 62, 71, 111, 12, 191, 130, 114, 24, 62, 1, 190, 68, 62, 103, 4, 114, 61, 0, 78, 151, 190, 70, 243, 49, 189, 27, 111, 22, 191, 86, 2, 22, 190, 12, 6, 3, 191, 90, 64, 140, 190, 93, 218, 117, 190, 31, 52, 55, 191, 54, 178, 60, 61, 188, 186, 51, 62, 53, 108, 80, 62, 49, 89, 37, 63, 235, 99, 23, 61, 51, 64, 129, 190, 25, 40, 212, 62, 210, 16, 57, 62, 236, 68, 131, 190, 192, 97, 172, 190, 70, 195, 33, 190, 61, 202, 24, 191, 117, 205, 56, 63, 131, 119, 134, 62, 169, 166, 95, 189, 158, 151, 212, 61, 145, 150, 73, 189, 124, 51, 167, 190, 33, 234, 145, 62, 106, 53, 120, 61, 190, 134, 186, 190, 162, 64, 80, 62, 199, 58, 34, 61, 107, 102, 85, 62, 60, 137, 14, 190, 12, 195, 60, 62, 5, 37, 25, 62, 8, 24, 3, 190, 252, 238, 119, 190, 226, 34, 201, 190, 142, 140, 157, 190, 213, 58, 28, 190, 117, 68, 244, 190, 224, 226, 40, 62, 91, 174, 69, 62, 45, 111, 127, 190, 117, 171, 142, 61, 183, 53, 251, 62, 143, 196, 54, 190, 89, 25, 121, 188, 98, 174, 111, 62, 245, 237, 37, 190, 70, 3, 63, 190, 7, 235, 112, 63, 32, 129, 6, 191, 205, 200, 183, 190, 106, 34, 234, 62, 111, 225, 163, 189, 205, 22, 131, 62, 27, 23, 120, 190, 114, 201, 51, 62, 129, 118, 104, 189, 221, 163, 46, 62, 242, 66, 36, 62, 161, 27, 191, 60, 91, 57, 148, 190, 39, 48, 242, 62, 91, 140, 17, 190, 11, 189, 39, 62, 71, 72, 206, 190, 96, 133, 112, 61, 71, 200, 240, 62, 16, 253, 202, 62, 197, 12, 191, 62, 108, 42, 130, 62, 114, 93, 185, 190, 35, 162, 93, 190, 244, 66, 10, 191, 13, 144, 215, 189, 122, 126, 206, 61, 7, 80, 132, 189, 91, 224, 63, 190, 75, 95, 44, 190, 235, 76, 71, 61, 192, 154, 13, 60, 109, 224, 52, 190, 113, 218, 56, 189, 29, 82, 131, 190, 191, 249, 250, 61, 79, 159, 191, 61, 125, 236, 230, 189, 208, 202, 139, 59, 239, 226, 217, 190, 159, 9, 149, 60, 92, 168, 111, 189, 162, 21, 111, 190, 247, 35, 203, 62, 163, 38, 78, 61, 33, 129, 179, 189, 229, 253, 93, 61, 239, 174, 244, 190, 11, 68, 197, 189, 184, 136, 226, 190, 243, 224, 169, 189, 148, 43, 84, 190, 239, 134, 157, 190, 200, 255, 62, 62, 180, 118, 245, 61, 103, 32, 240, 61, 64, 67, 29, 63, 254, 45, 40, 189, 38, 77, 233, 189, 192, 183, 35, 62, 66, 131, 65, 62, 72, 91, 213, 61, 11, 48, 149, 190, 253, 214, 205, 188, 165, 41, 38, 191, 195, 136, 17, 63, 63, 12, 95, 62, 3, 31, 131, 61, 173, 67, 40, 189, 236, 169, 24, 62, 72, 194, 152, 189, 233, 32, 176, 188, 208, 216, 105, 62, 182, 51, 132, 189, 10, 204, 115, 62, 122, 4, 138, 190, 15, 76, 109, 190, 179, 142, 134, 190, 146, 196, 183, 61, 83, 150, 11, 191, 164, 34, 222, 190, 1, 87, 168, 190, 15, 53, 147, 190, 157, 217, 51, 188, 25, 236, 163, 189, 40, 101, 54, 61, 8, 107, 142, 60, 1, 88, 91, 62, 160, 124, 133, 186, 243, 124, 19, 62, 68, 65, 132, 190, 254, 76, 68, 61, 24, 104, 151, 61, 161, 120, 63, 189, 248, 69, 211, 61, 114, 64, 216, 61, 127, 28, 150, 190, 193, 82, 203, 189, 55, 183, 232, 62, 76, 232, 156, 62, 43, 154, 28, 62, 127, 97, 148, 60, 5, 15, 176, 190, 61, 223, 55, 62, 17, 82, 50, 62, 228, 25, 129, 190, 94, 142, 218, 188, 29, 208, 222, 190, 169, 242, 254, 62, 161, 149, 71, 190, 236, 207, 153, 62, 25, 122, 88, 62, 24, 61, 44, 190, 32, 174, 77, 189, 59, 240, 123, 61, 170, 221, 142, 61, 200, 194, 143, 61, 191, 22, 69, 59, 247, 218, 83, 190, 82, 170, 137, 62, 97, 165, 200, 190, 251, 219, 209, 61, 215, 230, 221, 187, 234, 113, 187, 60, 15, 193, 132, 62, 71, 110, 200, 61, 140, 186, 173, 61, 15, 190, 223, 189, 175, 145, 108, 188, 126, 211, 155, 189, 240, 45, 43, 62, 218, 211, 184, 62, 177, 117, 3, 62, 122, 6, 14, 62, 148, 142, 143, 189, 8, 252, 167, 189, 78, 58, 147, 189, 224, 50, 106, 188, 115, 184, 23, 62, 225, 16, 19, 62, 206, 178, 74, 61, 116, 229, 6, 189, 175, 167, 209, 190, 18, 248, 132, 61, 124, 173, 128, 61, 87, 225, 244, 189, 153, 86, 26, 61, 34, 161, 47, 62, 230, 77, 39, 62, 114, 70, 38, 190, 76, 67, 205, 61, 113, 48, 109, 190, 225, 53, 92, 62, 237, 43, 126, 188, 56, 23, 81, 190, 237, 244, 125, 62, 108, 31, 204, 190, 141, 103, 152, 188, 158, 149, 145, 189, 216, 142, 8, 190, 56, 1, 228, 189, 132, 212, 235, 189, 124, 244, 95, 62, 224, 216, 139, 188, 235, 17, 231, 60, 195, 100, 129, 190, 8, 16, 57, 61, 192, 87, 9, 190, 41, 122, 117, 190, 27, 216, 131, 60, 49, 8, 227, 190, 135, 37, 240, 189, 249, 254, 91, 62, 63, 26, 244, 189, 12, 231, 2, 61, 212, 124, 255, 189, 186, 51, 98, 61, 39, 81, 191, 188, 51, 18, 107, 190, 156, 53, 224, 189, 73, 156, 112, 190, 99, 212, 106, 62, 79, 115, 16, 62, 79, 149, 204, 61, 209, 251, 15, 62, 235, 1, 76, 62, 20, 207, 223, 187, 150, 150, 44, 62, 216, 85, 10, 61, 251, 158, 56, 57, 170, 105, 42, 190, 157, 190, 0, 188, 254, 131, 154, 190, 253, 5, 92, 189, 46, 166, 9, 61, 254, 53, 146, 189, 2, 16, 25, 62, 167, 243, 76, 62, 150, 226, 23, 61, 115, 63, 42, 62, 110, 241, 140, 60, 59, 1, 120, 190, 93, 96, 152, 60, 73, 52, 17, 190, 101, 31, 178, 188, 214, 227, 177, 190, 9, 29, 76, 190, 254, 210, 222, 60, 101, 176, 53, 62, 91, 238, 25, 61, 169, 183, 250, 190, 226, 185, 188, 189, 9, 106, 11, 191, 211, 97, 219, 60, 7, 140, 17, 190, 46, 180, 100, 62, 82, 223, 174, 62, 59, 75, 1, 62, 202, 100, 234, 189, 21, 20, 145, 190, 115, 35, 60, 190, 229, 146, 53, 61, 220, 22, 36, 189, 232, 177, 17, 189, 243, 13, 137, 189, 14, 129, 129, 188, 197, 197, 231, 61, 126, 75, 45, 62, 84, 64, 233, 189, 212, 123, 94, 190, 180, 162, 216, 60, 190, 89, 167, 190, 50, 79, 209, 190, 157, 95, 36, 62, 121, 74, 127, 188, 221, 14, 157, 188, 189, 203, 85, 62, 163, 62, 21, 190, 19, 37, 141, 61, 254, 154, 245, 59, 131, 116, 9, 62, 156, 155, 140, 190, 66, 10, 161, 190, 236, 13, 214, 190, 2, 244, 116, 188, 249, 178, 154, 61, 184, 171, 179, 189, 135, 244, 126, 62, 51, 228, 255, 62, 190, 116, 163, 60, 161, 204, 48, 190, 244, 138, 170, 187, 226, 83, 132, 190, 140, 104, 163, 61, 61, 23, 16, 190, 180, 241, 109, 189, 64, 99, 120, 190, 76, 54, 248, 188, 172, 112, 38, 62, 16, 49, 19, 62, 145, 102, 187, 189, 113, 107, 10, 62, 85, 65, 5, 61, 20, 252, 44, 62, 208, 147, 199, 190, 251, 198, 8, 61, 225, 246, 111, 62, 213, 240, 100, 190, 210, 18, 173, 62, 4, 131, 218, 188, 243, 253, 145, 61, 56, 211, 135, 61, 231, 119, 115, 61, 100, 46, 236, 61, 232, 246, 19, 189, 169, 125, 174, 186, 66, 16, 75, 61, 219, 156, 241, 61, 97, 163, 80, 191, 244, 218, 47, 190, 27, 140, 125, 190, 202, 231, 107, 190, 78, 163, 67, 62, 175, 211, 149, 189, 103, 120, 215, 189, 24, 211, 203, 188, 33, 113, 20, 189, 69, 73, 151, 190, 121, 217, 141, 61, 121, 192, 126, 190, 149, 163, 218, 61, 144, 107, 74, 61, 127, 42, 179, 61, 191, 76, 176, 188, 186, 5, 134, 60, 229, 43, 155, 190, 247, 47, 58, 189, 152, 114, 199, 190, 113, 154, 122, 190, 19, 106, 149, 62, 57, 107, 41, 61, 113, 184, 100, 189, 202, 186, 47, 190, 32, 103, 162, 61, 204, 91, 11, 190, 162, 151, 15, 190, 117, 15, 161, 189, 31, 74, 42, 190, 207, 171, 12, 190, 227, 81, 19, 190, 8, 137, 209, 61, 29, 179, 252, 189, 138, 103, 28, 62, 244, 8, 156, 189, 53, 118, 127, 61, 143, 255, 58, 61, 242, 240, 7, 61, 138, 15, 214, 189, 122, 86, 110, 189, 35, 176, 19, 189, 176, 237, 93, 188, 177, 231, 246, 60, 162, 202, 47, 61, 28, 13, 31, 190, 127, 90, 6, 190, 78, 34, 216, 189, 120, 170, 129, 61, 40, 68, 209, 61, 140, 203, 18, 62, 47, 128, 216, 189, 7, 218, 238, 189, 246, 209, 63, 189, 218, 199, 45, 62, 116, 180, 66, 190, 251, 238, 5, 190, 110, 99, 155, 61, 67, 97, 134, 189, 231, 103, 124, 189, 101, 145, 32, 190, 126, 42, 127, 61, 117, 123, 251, 189, 193, 72, 235, 189, 159, 49, 72, 60, 127, 219, 236, 58, 77, 107, 104, 61, 255, 3, 7, 62, 76, 165, 169, 189, 172, 153, 146, 60, 90, 114, 22, 190, 100, 76, 14, 190, 117, 199, 121, 58, 186, 4, 168, 61, 234, 182, 197, 189, 74, 241, 196, 189, 83, 197, 255, 189, 206, 37, 47, 61, 227, 156, 219, 189, 134, 67, 200, 189, 106, 138, 50, 62, 221, 45, 16, 62, 186, 20, 202, 189, 48, 181, 184, 188, 181, 68, 42, 190, 172, 29, 19, 190, 62, 9, 19, 62, 178, 144, 82, 188, 248, 40, 160, 60, 140, 104, 14, 62, 166, 223, 159, 60, 174, 120, 194, 189, 14, 103, 8, 59, 199, 37, 170, 188, 50, 40, 253, 189, 18, 128, 131, 189, 49, 1, 241, 189, 177, 78, 25, 189, 9, 251, 184, 189, 251, 237, 218, 61, 28, 96, 211, 189, 133, 181, 3, 190, 120, 205, 1, 190, 179, 234, 81, 61, 201, 196, 183, 61, 40, 218, 28, 190, 39, 61, 23, 62, 10, 168, 229, 186, 178, 128, 211, 189, 166, 138, 230, 189, 140, 172, 174, 189, 139, 95, 40, 190, 247, 123, 26, 190, 21, 173, 249, 61, 78, 228, 10, 62, 253, 190, 140, 189, 19, 43, 167, 60, 2, 223, 176, 60, 99, 136, 4, 62, 182, 211, 52, 190, 34, 93, 120, 189, 195, 92, 185, 189, 42, 6, 131, 60, 36, 77, 236, 189, 249, 160, 139, 187, 219, 121, 159, 60, 75, 75, 76, 61, 195, 137, 195, 61, 249, 31, 20, 62, 98, 163, 250, 189, 171, 182, 178, 189, 199, 69, 150, 60, 251, 184, 125, 189, 243, 106, 88, 188, 44, 99, 173, 189, 56, 29, 116, 61, 142, 246, 118, 61, 7, 89, 9, 190, 84, 37, 189, 61, 180, 153, 228, 189, 183, 156, 201, 60, 182, 190, 174, 61, 48, 34, 20, 190, 61, 254, 51, 189, 64, 174, 178, 189, 61, 119, 116, 60, 6, 4, 208, 189, 132, 139, 194, 189, 79, 121, 69, 190, 251, 221, 225, 188, 6, 102, 2, 62, 17, 81, 196, 190, 36, 213, 200, 61, 221, 77, 11, 190, 187, 148, 74, 188, 102, 4, 218, 190, 41, 140, 117, 190, 128, 131, 211, 190, 238, 241, 161, 190, 189, 5, 254, 189, 140, 125, 223, 61, 26, 250, 178, 62, 72, 243, 21, 63, 185, 136, 189, 60, 173, 110, 145, 61, 47, 83, 134, 62, 129, 39, 54, 62, 71, 86, 31, 60, 190, 97, 37, 190, 236, 116, 72, 58, 251, 195, 50, 191, 197, 86, 81, 62, 145, 233, 45, 62, 91, 44, 26, 62, 121, 41, 27, 189, 66, 234, 139, 61, 11, 146, 188, 61, 126, 250, 160, 62, 11, 230, 65, 62, 28, 215, 139, 190, 83, 44, 49, 62, 131, 187, 236, 190, 154, 245, 168, 189, 238, 28, 29, 189, 89, 28, 25, 190, 150, 69, 27, 61, 120, 88, 157, 60, 109, 134, 175, 60, 216, 16, 33, 190, 171, 116, 139, 189, 146, 0, 58, 59, 173, 59, 233, 188, 85, 90, 27, 190, 139, 60, 236, 59, 62, 136, 206, 189, 47, 45, 161, 60, 123, 180, 210, 61, 111, 25, 143, 189, 195, 252, 28, 62, 30, 182, 77, 189, 140, 171, 33, 190, 252, 71, 178, 189, 43, 41, 140, 189, 43, 150, 1, 190, 83, 141, 122, 61, 28, 205, 77, 189, 249, 230, 48, 190, 235, 96, 6, 190, 85, 136, 207, 189, 142, 1, 110, 189, 87, 97, 182, 189, 176, 83, 245, 189, 30, 124, 28, 190, 250, 99, 42, 62, 137, 210, 220, 60, 216, 135, 215, 190, 39, 45, 197, 189, 214, 106, 242, 189, 18, 228, 2, 190, 74, 105, 197, 190, 203, 95, 154, 190, 8, 253, 216, 190, 138, 12, 210, 189, 190, 21, 86, 190, 159, 240, 243, 188, 181, 93, 15, 61, 6, 213, 179, 62, 240, 114, 168, 61, 79, 120, 144, 189, 43, 136, 203, 190, 234, 252, 146, 188, 241, 68, 120, 189, 14, 250, 186, 189, 224, 201, 245, 61, 218, 27, 38, 190, 224, 208, 21, 190, 117, 112, 9, 189, 245, 181, 188, 62, 26, 106, 147, 189, 6, 50, 122, 61, 214, 175, 240, 189, 243, 26, 3, 189, 216, 20, 60, 190, 179, 54, 57, 62, 62, 161, 16, 62, 123, 153, 163, 190, 246, 207, 82, 190, 61, 65, 102, 190, 30, 12, 181, 60, 43, 6, 176, 189, 142, 80, 73, 62, 197, 254, 122, 190, 210, 76, 175, 190, 242, 187, 231, 190, 232, 237, 171, 190, 20, 17, 14, 189, 140, 194, 5, 62, 126, 198, 133, 62, 87, 106, 182, 62, 125, 136, 131, 62, 165, 198, 143, 61, 54, 172, 26, 62, 166, 3, 233, 60, 61, 6, 54, 62, 70, 227, 25, 190, 243, 137, 230, 189, 4, 166, 53, 191, 1, 162, 116, 189, 173, 125, 174, 62, 180, 145, 97, 188, 238, 223, 4, 62, 183, 181, 137, 61, 39, 136, 175, 189, 174, 34, 170, 62, 54, 254, 202, 189, 221, 46, 195, 190, 100, 223, 146, 62, 202, 147, 210, 190, 141, 150, 108, 186, 226, 151, 85, 190, 168, 214, 42, 61, 160, 224, 18, 62, 159, 108, 28, 189, 42, 54, 134, 62, 25, 249, 1, 190, 108, 71, 2, 189, 240, 1, 51, 189, 5, 76, 21, 62, 242, 37, 129, 190, 151, 214, 250, 190, 85, 248, 73, 62, 54, 151, 138, 190, 147, 125, 8, 62, 116, 15, 126, 62, 42, 42, 68, 62, 117, 254, 84, 190, 114, 150, 189, 190, 78, 156, 76, 190, 197, 44, 42, 61, 202, 145, 104, 62, 96, 140, 214, 188, 94, 252, 184, 189, 166, 19, 181, 61, 167, 52, 67, 190, 165, 193, 47, 61, 22, 249, 218, 190, 77, 74, 66, 62, 208, 167, 162, 190, 99, 153, 18, 191, 163, 244, 162, 62, 125, 37, 109, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 173, 138, 62, 160, 23, 49, 190, 226, 167, 161, 58, 60, 137, 148, 61, 210, 219, 90, 62, 39, 249, 82, 58, 214, 194, 200, 189, 122, 43, 140, 62, 118, 116, 139, 62, 226, 148, 108, 62, 162, 109, 139, 62, 57, 112, 131, 188, 66, 111, 58, 62, 93, 4, 126, 188, 213, 222, 63, 61, 40, 234, 125, 186, 87, 130, 143, 62, 115, 42, 167, 62, 232, 144, 249, 189, 223, 220, 191, 61, 33, 110, 5, 189, 141, 136, 49, 61, 113, 147, 42, 62, 206, 69, 204, 188, 125, 221, 44, 59, 229, 200, 32, 189, 105, 175, 60, 190, 57, 191, 131, 189, 151, 119, 206, 188, 36, 1, 33, 62, 19, 169, 7, 189, 25, 60, 241, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 122, 128, 191, 29, 55, 207, 61, 104, 90, 9, 191, 237, 108, 67, 62, 250, 219, 16, 63, 58, 99, 56, 190, 214, 81, 227, 188, 154, 32, 181, 62, 186, 159, 183, 189, 168, 153, 170, 63, 135, 179, 106, 61, 176, 43, 44, 63, 207, 99, 65, 191, 67, 223, 3, 63, 208, 88, 227, 62, 23, 172, 8, 191, 146, 110, 49, 61, 30, 58, 124, 62, 132, 244, 31, 190, 37, 240, 176, 188, 239, 68, 211, 61, 143, 32, 148, 190, 79, 164, 99, 62, 104, 113, 253, 61, 195, 141, 12, 62, 146, 1, 143, 60, 9, 44, 60, 189, 198, 123, 204, 190, 26, 172, 158, 61, 236, 204, 5, 191, 80, 214, 165, 190, 86, 165, 162, 190, 144, 61, 157, 62, 248, 3, 20, 60, 40, 214, 9, 189, 80, 66, 42, 62, 19, 72, 147, 189, 9, 49, 122, 62, 242, 82, 219, 185, 30, 172, 41, 190, 48, 57, 139, 190, 179, 70, 240, 62, 92, 180, 139, 190, 220, 195, 165, 61, 178, 61, 138, 61, 58, 161, 60, 62, 204, 221, 162, 62, 105, 161, 235, 61, 184, 236, 0, 191, 231, 45, 158, 190, 42, 214, 210, 62, 194, 35, 157, 189, 222, 101, 149, 62, 141, 211, 23, 190, 70, 32, 109, 190, 217, 148, 243, 189, 69, 53, 246, 189, 42, 170, 121, 189, 122, 241, 6, 62, 116, 26, 166, 59, 207, 196, 162, 188, 165, 171, 205, 62, 118, 227, 214, 189, 123, 33, 85, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 111, 147, 187, 175, 1, 63, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {172, 63, 41, 61, 103, 13, 221, 190, 110, 210, 131, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {54, 166, 205, 62, 125, 193, 161, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0010/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}