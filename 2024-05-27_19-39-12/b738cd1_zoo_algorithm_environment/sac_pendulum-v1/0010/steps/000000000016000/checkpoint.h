// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 164, 82, 63, 23, 104, 210, 190, 148, 195, 188, 190, 143, 176, 173, 190, 24, 101, 35, 62, 207, 136, 252, 59, 212, 193, 21, 188, 53, 82, 66, 63, 173, 211, 18, 63, 56, 13, 14, 63, 217, 39, 66, 63, 95, 45, 178, 62, 251, 116, 85, 190, 224, 152, 204, 62, 42, 54, 6, 63, 213, 97, 124, 62, 66, 247, 150, 191, 239, 123, 124, 190, 88, 150, 40, 63, 114, 226, 166, 191, 13, 45, 164, 190, 27, 222, 254, 61, 192, 111, 169, 191, 195, 118, 148, 60, 170, 66, 188, 189, 222, 65, 91, 191, 145, 31, 99, 62, 162, 188, 9, 191, 60, 181, 149, 191, 111, 172, 130, 191, 227, 16, 230, 62, 164, 124, 34, 63, 13, 101, 163, 190, 13, 217, 25, 63, 4, 233, 212, 63, 125, 254, 174, 62, 186, 61, 241, 61, 101, 180, 91, 191, 228, 185, 220, 190, 242, 217, 44, 191, 154, 213, 163, 63, 231, 47, 149, 62, 170, 66, 245, 188, 152, 23, 193, 191, 201, 186, 33, 61, 173, 235, 13, 191, 145, 121, 76, 189, 72, 130, 192, 189, 7, 40, 193, 62, 77, 83, 234, 63, 161, 126, 8, 63, 107, 7, 164, 62, 142, 51, 39, 61, 120, 174, 225, 190, 145, 213, 111, 191, 125, 240, 202, 62, 123, 53, 252, 190, 239, 108, 19, 63, 241, 60, 113, 190, 126, 157, 30, 190, 154, 82, 6, 191, 1, 79, 181, 190, 186, 199, 89, 62, 154, 113, 23, 63, 36, 195, 109, 61, 120, 116, 42, 63, 36, 145, 212, 62, 125, 25, 66, 63, 182, 124, 50, 61, 174, 209, 78, 190, 243, 242, 192, 190, 164, 171, 96, 189, 28, 223, 44, 190, 169, 144, 172, 63, 105, 107, 42, 61, 238, 249, 113, 190, 158, 198, 149, 63, 62, 14, 231, 62, 169, 224, 26, 190, 167, 131, 60, 62, 104, 108, 252, 190, 5, 220, 38, 191, 217, 9, 45, 191, 33, 73, 6, 190, 136, 123, 217, 61, 223, 44, 74, 63, 68, 203, 226, 190, 81, 178, 142, 190, 233, 10, 200, 62, 114, 99, 132, 190, 51, 94, 81, 191, 73, 41, 152, 189, 154, 74, 128, 62, 110, 79, 243, 62, 185, 186, 135, 190, 219, 134, 106, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 22, 97, 191, 186, 18, 224, 62, 43, 69, 28, 190, 219, 140, 39, 191, 242, 53, 229, 190, 235, 176, 85, 61, 161, 88, 90, 190, 147, 174, 36, 189, 252, 69, 170, 62, 114, 83, 66, 61, 191, 128, 136, 62, 9, 254, 6, 61, 67, 117, 205, 62, 133, 249, 198, 61, 207, 58, 100, 62, 176, 40, 33, 63, 165, 150, 79, 62, 255, 157, 72, 62, 162, 218, 5, 191, 51, 19, 208, 190, 170, 243, 230, 190, 114, 205, 64, 62, 98, 11, 63, 63, 184, 214, 82, 62, 8, 157, 10, 190, 184, 244, 169, 61, 83, 91, 118, 190, 167, 214, 23, 63, 153, 112, 10, 190, 165, 221, 222, 62, 254, 5, 66, 191, 189, 86, 165, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 27, 10, 191, 158, 169, 116, 62, 36, 7, 192, 191, 185, 56, 229, 188, 30, 30, 243, 190, 18, 126, 0, 190, 91, 136, 153, 190, 57, 216, 214, 190, 22, 212, 57, 63, 227, 240, 49, 62, 73, 247, 232, 189, 159, 96, 123, 63, 49, 60, 201, 61, 108, 16, 113, 190, 118, 139, 235, 62, 70, 62, 147, 62, 7, 131, 163, 191, 137, 229, 150, 190, 123, 134, 6, 190, 33, 2, 128, 191, 16, 247, 25, 63, 136, 130, 189, 190, 168, 89, 4, 59, 24, 45, 241, 61, 42, 113, 18, 60, 196, 145, 122, 188, 48, 237, 150, 62, 8, 102, 103, 62, 226, 253, 179, 190, 94, 84, 119, 62, 87, 225, 97, 189, 13, 171, 253, 189, 207, 132, 157, 189, 223, 142, 74, 190, 180, 22, 216, 189, 211, 20, 7, 62, 227, 12, 4, 61, 196, 61, 180, 60, 136, 157, 183, 188, 83, 123, 182, 189, 217, 11, 172, 189, 133, 82, 175, 61, 64, 52, 91, 190, 121, 134, 173, 61, 153, 11, 164, 61, 84, 138, 74, 190, 114, 255, 89, 61, 159, 33, 150, 189, 224, 60, 66, 59, 67, 252, 49, 190, 16, 163, 249, 61, 225, 19, 44, 62, 242, 55, 21, 62, 118, 53, 5, 190, 56, 107, 66, 190, 164, 95, 224, 189, 157, 227, 222, 188, 189, 43, 8, 62, 254, 49, 240, 59, 148, 241, 139, 188, 41, 228, 228, 189, 163, 7, 114, 189, 177, 69, 47, 60, 99, 146, 17, 62, 210, 182, 45, 191, 39, 229, 190, 186, 12, 27, 156, 60, 77, 255, 180, 62, 146, 46, 141, 190, 220, 72, 247, 190, 20, 107, 10, 191, 176, 9, 60, 190, 140, 195, 89, 187, 247, 61, 151, 60, 162, 173, 246, 61, 189, 139, 28, 63, 199, 200, 191, 61, 192, 228, 166, 190, 240, 51, 184, 189, 168, 229, 5, 190, 68, 244, 89, 62, 15, 77, 245, 189, 26, 146, 4, 190, 240, 202, 231, 190, 200, 91, 7, 62, 237, 145, 164, 62, 86, 192, 145, 62, 93, 162, 71, 190, 252, 228, 137, 62, 42, 155, 144, 60, 53, 162, 202, 62, 238, 84, 10, 191, 83, 65, 37, 190, 36, 24, 220, 62, 237, 156, 120, 190, 109, 226, 48, 62, 59, 3, 195, 61, 217, 115, 163, 189, 96, 201, 191, 61, 13, 177, 7, 191, 74, 26, 56, 62, 30, 157, 172, 188, 61, 1, 41, 62, 101, 157, 175, 62, 103, 219, 65, 62, 125, 204, 211, 60, 80, 43, 204, 188, 29, 206, 110, 191, 44, 249, 253, 61, 75, 56, 14, 191, 107, 38, 231, 61, 222, 62, 6, 62, 63, 176, 70, 191, 41, 226, 160, 60, 196, 233, 169, 61, 252, 8, 49, 63, 113, 138, 122, 62, 166, 172, 165, 61, 103, 4, 175, 60, 246, 53, 139, 189, 154, 56, 131, 190, 244, 128, 183, 190, 163, 110, 239, 189, 8, 81, 122, 188, 210, 24, 88, 61, 20, 218, 145, 189, 171, 106, 81, 60, 3, 156, 198, 189, 217, 51, 252, 61, 14, 62, 181, 189, 118, 172, 153, 62, 44, 254, 64, 190, 145, 253, 112, 62, 1, 170, 160, 61, 234, 1, 87, 62, 64, 228, 17, 62, 68, 32, 42, 190, 32, 146, 181, 190, 81, 125, 216, 61, 66, 179, 240, 190, 132, 25, 20, 62, 45, 253, 134, 62, 169, 91, 206, 190, 176, 165, 241, 60, 81, 83, 17, 62, 89, 99, 152, 62, 70, 135, 72, 191, 218, 252, 91, 190, 161, 186, 232, 190, 6, 109, 0, 190, 239, 109, 221, 62, 242, 21, 13, 60, 235, 139, 255, 188, 198, 135, 251, 61, 62, 97, 135, 190, 22, 184, 159, 190, 175, 188, 184, 62, 63, 183, 168, 187, 22, 104, 215, 61, 255, 33, 13, 62, 139, 27, 126, 61, 178, 185, 8, 191, 194, 184, 177, 60, 114, 230, 183, 62, 44, 143, 136, 61, 34, 90, 6, 190, 110, 137, 6, 190, 91, 20, 15, 190, 143, 221, 167, 189, 101, 30, 128, 61, 166, 205, 64, 188, 244, 144, 139, 62, 170, 200, 49, 190, 1, 92, 101, 190, 188, 210, 249, 188, 0, 235, 31, 191, 34, 86, 222, 61, 63, 72, 154, 60, 165, 120, 11, 190, 15, 109, 40, 190, 162, 232, 220, 61, 60, 217, 108, 62, 45, 150, 135, 188, 80, 154, 249, 189, 1, 103, 66, 190, 17, 161, 11, 189, 129, 102, 174, 61, 126, 134, 64, 191, 251, 251, 55, 190, 109, 21, 250, 189, 16, 198, 44, 189, 75, 93, 198, 62, 163, 85, 152, 188, 162, 129, 27, 187, 118, 210, 173, 61, 88, 115, 251, 61, 135, 198, 26, 190, 37, 61, 174, 189, 119, 74, 8, 62, 149, 113, 4, 190, 30, 61, 51, 190, 253, 75, 59, 190, 147, 147, 239, 61, 55, 220, 28, 190, 150, 146, 149, 61, 212, 177, 31, 189, 250, 18, 131, 189, 55, 22, 133, 187, 182, 118, 50, 190, 89, 251, 16, 62, 31, 247, 133, 189, 196, 1, 25, 190, 55, 27, 101, 189, 42, 105, 58, 187, 181, 2, 70, 190, 177, 88, 15, 61, 228, 47, 26, 190, 167, 250, 244, 188, 16, 249, 35, 187, 57, 184, 188, 61, 250, 254, 172, 61, 209, 102, 210, 189, 82, 47, 204, 61, 142, 19, 33, 62, 13, 218, 83, 189, 249, 161, 39, 188, 242, 254, 163, 189, 246, 18, 80, 191, 177, 252, 7, 189, 157, 66, 89, 190, 214, 8, 43, 62, 24, 217, 100, 62, 13, 137, 109, 62, 18, 32, 84, 190, 205, 42, 18, 62, 51, 96, 142, 191, 147, 36, 81, 62, 107, 178, 64, 190, 230, 33, 72, 62, 133, 49, 15, 62, 255, 221, 57, 190, 62, 155, 60, 62, 109, 155, 174, 189, 72, 208, 184, 61, 53, 38, 129, 62, 171, 113, 131, 61, 19, 122, 148, 61, 207, 105, 147, 187, 251, 162, 194, 61, 194, 114, 97, 190, 128, 91, 180, 189, 120, 254, 187, 61, 5, 213, 19, 62, 170, 78, 56, 62, 73, 243, 16, 63, 118, 170, 74, 61, 14, 32, 152, 191, 152, 172, 241, 188, 58, 124, 89, 189, 155, 59, 23, 62, 115, 152, 189, 61, 6, 183, 13, 191, 85, 36, 168, 189, 12, 63, 187, 189, 240, 105, 60, 62, 5, 225, 33, 191, 109, 205, 137, 62, 3, 55, 144, 62, 56, 67, 139, 61, 205, 248, 54, 62, 201, 61, 9, 190, 249, 108, 188, 189, 162, 162, 104, 60, 139, 230, 176, 190, 2, 217, 242, 190, 10, 174, 164, 62, 43, 109, 213, 187, 47, 77, 155, 61, 193, 215, 145, 62, 0, 88, 72, 62, 128, 157, 180, 61, 212, 48, 15, 62, 6, 139, 59, 190, 163, 67, 121, 190, 47, 177, 59, 191, 123, 56, 163, 190, 180, 37, 208, 189, 187, 224, 50, 62, 41, 30, 200, 62, 63, 253, 235, 61, 165, 126, 72, 62, 184, 72, 248, 190, 103, 7, 38, 62, 51, 2, 54, 63, 241, 175, 201, 62, 50, 26, 224, 62, 79, 82, 135, 62, 248, 93, 146, 191, 211, 66, 27, 191, 96, 58, 101, 191, 75, 83, 156, 190, 116, 28, 211, 62, 136, 252, 100, 190, 201, 180, 145, 61, 39, 213, 165, 61, 36, 171, 26, 62, 152, 195, 158, 190, 214, 174, 237, 189, 35, 71, 149, 190, 197, 28, 166, 190, 199, 143, 134, 62, 207, 174, 244, 61, 220, 0, 83, 63, 59, 187, 244, 61, 248, 234, 6, 191, 76, 90, 82, 189, 86, 124, 215, 190, 211, 56, 30, 191, 156, 102, 112, 62, 218, 35, 55, 190, 25, 3, 254, 189, 205, 56, 118, 62, 235, 168, 166, 61, 254, 229, 225, 60, 112, 136, 210, 189, 74, 123, 13, 190, 197, 19, 27, 60, 16, 2, 239, 61, 21, 82, 160, 60, 203, 205, 35, 190, 162, 61, 219, 61, 55, 82, 134, 189, 220, 90, 243, 189, 205, 24, 156, 189, 254, 36, 199, 62, 222, 139, 192, 61, 172, 209, 32, 62, 209, 134, 245, 60, 198, 20, 93, 61, 31, 130, 129, 190, 73, 151, 176, 189, 37, 129, 255, 61, 0, 196, 167, 62, 125, 247, 124, 189, 95, 228, 239, 62, 18, 28, 178, 188, 244, 157, 84, 61, 231, 155, 66, 190, 164, 50, 68, 61, 112, 3, 118, 62, 66, 227, 73, 190, 236, 223, 140, 61, 159, 204, 67, 189, 4, 147, 192, 61, 88, 239, 183, 61, 124, 43, 200, 189, 132, 95, 9, 62, 131, 27, 28, 60, 226, 154, 109, 190, 35, 110, 3, 191, 89, 186, 245, 186, 213, 85, 46, 191, 147, 89, 247, 190, 75, 88, 229, 59, 106, 214, 210, 191, 85, 132, 157, 62, 208, 167, 32, 191, 145, 240, 115, 62, 43, 23, 96, 62, 76, 24, 140, 62, 243, 98, 74, 191, 214, 48, 1, 58, 152, 99, 169, 190, 120, 73, 35, 62, 162, 167, 62, 62, 98, 176, 1, 190, 227, 234, 247, 61, 98, 33, 155, 62, 42, 135, 0, 191, 229, 26, 224, 60, 86, 237, 240, 190, 122, 81, 43, 60, 205, 158, 16, 62, 42, 191, 45, 61, 180, 84, 202, 190, 29, 191, 20, 189, 195, 252, 24, 191, 228, 13, 156, 190, 115, 236, 196, 190, 249, 111, 149, 190, 78, 231, 121, 190, 45, 23, 68, 191, 248, 254, 133, 61, 131, 104, 53, 62, 250, 71, 82, 62, 5, 70, 45, 63, 29, 160, 236, 60, 83, 91, 122, 190, 249, 245, 158, 62, 142, 188, 69, 62, 23, 50, 158, 190, 163, 87, 155, 190, 158, 3, 25, 190, 249, 212, 33, 191, 217, 40, 84, 63, 146, 104, 130, 62, 119, 103, 66, 189, 178, 86, 226, 61, 168, 40, 108, 189, 249, 220, 204, 190, 94, 85, 147, 62, 108, 15, 144, 61, 247, 2, 198, 190, 178, 150, 64, 62, 215, 189, 89, 62, 100, 52, 6, 62, 97, 240, 201, 189, 215, 252, 206, 61, 107, 143, 6, 62, 246, 15, 245, 189, 206, 242, 142, 190, 128, 38, 211, 190, 60, 124, 151, 190, 83, 126, 216, 190, 65, 103, 111, 191, 108, 240, 1, 62, 244, 218, 107, 62, 111, 224, 43, 190, 104, 208, 132, 61, 28, 78, 200, 62, 186, 241, 221, 190, 234, 177, 181, 189, 106, 164, 150, 62, 173, 100, 32, 190, 55, 22, 149, 190, 117, 93, 146, 63, 53, 235, 41, 191, 204, 230, 233, 190, 1, 190, 6, 63, 10, 100, 51, 190, 35, 110, 45, 62, 174, 31, 145, 190, 171, 140, 2, 62, 100, 242, 71, 190, 102, 193, 25, 62, 183, 175, 15, 62, 52, 139, 228, 187, 215, 96, 59, 191, 52, 119, 18, 63, 2, 162, 39, 190, 107, 188, 246, 61, 104, 188, 70, 191, 39, 107, 45, 60, 77, 238, 220, 62, 58, 217, 153, 62, 6, 31, 199, 62, 32, 186, 147, 62, 32, 155, 109, 191, 217, 20, 230, 189, 135, 58, 76, 191, 7, 55, 246, 189, 207, 208, 47, 61, 118, 158, 130, 188, 89, 62, 112, 190, 73, 23, 198, 190, 78, 173, 182, 60, 199, 255, 4, 60, 98, 80, 207, 189, 96, 165, 157, 61, 230, 147, 78, 190, 170, 77, 39, 62, 204, 2, 144, 61, 63, 244, 4, 190, 184, 216, 140, 189, 78, 218, 69, 191, 25, 224, 119, 189, 220, 122, 10, 59, 227, 4, 244, 190, 100, 47, 230, 62, 176, 137, 156, 61, 23, 71, 128, 190, 166, 181, 30, 62, 42, 85, 12, 191, 192, 211, 183, 190, 34, 159, 10, 191, 179, 133, 208, 189, 5, 41, 101, 190, 51, 150, 156, 190, 7, 118, 115, 62, 198, 193, 155, 61, 46, 187, 175, 61, 43, 76, 16, 63, 208, 59, 138, 189, 122, 83, 37, 61, 116, 82, 226, 61, 242, 126, 141, 62, 94, 240, 71, 61, 213, 166, 157, 190, 200, 73, 124, 189, 109, 138, 53, 191, 38, 196, 59, 63, 179, 125, 62, 62, 98, 244, 149, 61, 236, 200, 16, 61, 32, 50, 39, 62, 226, 176, 63, 189, 255, 38, 132, 189, 198, 223, 178, 62, 193, 100, 19, 190, 100, 4, 99, 62, 84, 56, 71, 61, 253, 218, 160, 190, 203, 64, 133, 190, 238, 177, 65, 61, 243, 186, 41, 191, 204, 151, 67, 191, 21, 11, 240, 190, 154, 8, 108, 190, 0, 164, 141, 61, 213, 233, 190, 61, 163, 212, 45, 62, 224, 206, 12, 187, 73, 238, 86, 62, 54, 168, 156, 189, 192, 149, 74, 62, 178, 9, 147, 190, 242, 168, 120, 62, 57, 193, 134, 61, 244, 48, 75, 190, 197, 52, 195, 61, 187, 38, 138, 59, 9, 220, 164, 190, 193, 191, 80, 190, 214, 95, 245, 62, 167, 48, 167, 62, 191, 18, 44, 62, 97, 42, 220, 61, 43, 216, 224, 190, 155, 34, 32, 62, 134, 7, 40, 62, 144, 88, 97, 190, 68, 21, 84, 189, 105, 13, 4, 191, 43, 77, 29, 63, 179, 215, 13, 190, 241, 189, 147, 62, 144, 16, 75, 62, 209, 188, 138, 190, 192, 194, 169, 189, 34, 46, 224, 60, 16, 94, 34, 61, 38, 203, 214, 60, 35, 86, 67, 189, 227, 236, 95, 190, 18, 121, 155, 62, 83, 63, 195, 190, 88, 189, 208, 61, 249, 29, 7, 59, 212, 84, 143, 61, 174, 139, 123, 62, 66, 131, 173, 61, 105, 234, 164, 61, 142, 48, 5, 190, 4, 123, 25, 187, 104, 4, 169, 189, 74, 126, 62, 62, 255, 190, 203, 62, 156, 231, 154, 61, 36, 186, 45, 62, 30, 147, 159, 189, 113, 103, 109, 189, 22, 68, 16, 190, 60, 79, 67, 61, 122, 164, 26, 62, 31, 1, 197, 61, 111, 212, 21, 61, 213, 63, 84, 62, 210, 91, 30, 191, 139, 13, 237, 61, 119, 207, 205, 62, 21, 48, 79, 189, 95, 88, 109, 62, 220, 110, 173, 62, 56, 200, 175, 62, 227, 179, 9, 190, 51, 112, 169, 62, 114, 75, 202, 190, 47, 182, 136, 62, 231, 173, 186, 61, 110, 240, 138, 190, 8, 119, 167, 62, 201, 141, 19, 191, 196, 174, 88, 60, 140, 143, 9, 189, 26, 59, 18, 191, 191, 119, 39, 189, 22, 88, 37, 190, 17, 17, 1, 62, 25, 162, 103, 190, 253, 98, 179, 61, 136, 93, 140, 189, 132, 187, 173, 61, 89, 161, 221, 189, 215, 43, 91, 190, 147, 23, 130, 190, 146, 242, 255, 190, 90, 206, 217, 189, 32, 57, 81, 62, 84, 8, 243, 189, 114, 49, 232, 189, 228, 76, 68, 190, 57, 135, 229, 60, 198, 22, 149, 189, 245, 167, 174, 188, 38, 241, 48, 62, 33, 172, 140, 61, 164, 107, 175, 62, 21, 112, 158, 61, 145, 9, 32, 61, 25, 120, 160, 61, 200, 60, 151, 62, 191, 234, 183, 187, 210, 226, 196, 62, 247, 25, 147, 189, 38, 96, 223, 189, 82, 10, 64, 190, 25, 76, 40, 190, 167, 123, 83, 190, 249, 107, 246, 189, 40, 58, 5, 189, 139, 84, 140, 189, 119, 105, 62, 62, 209, 41, 90, 62, 59, 38, 114, 188, 201, 43, 70, 61, 52, 26, 170, 188, 166, 45, 172, 190, 141, 235, 223, 189, 160, 115, 13, 190, 125, 107, 78, 189, 129, 192, 155, 190, 176, 78, 70, 190, 220, 102, 226, 60, 180, 27, 53, 62, 240, 33, 3, 60, 172, 88, 38, 191, 158, 5, 89, 190, 33, 122, 67, 191, 91, 154, 127, 61, 39, 190, 229, 190, 255, 124, 128, 62, 144, 23, 201, 62, 95, 189, 137, 60, 216, 145, 79, 190, 112, 86, 241, 190, 62, 53, 18, 190, 7, 255, 172, 61, 148, 248, 96, 189, 176, 117, 41, 62, 164, 125, 10, 190, 58, 103, 41, 189, 237, 217, 50, 62, 213, 89, 81, 62, 216, 66, 103, 190, 81, 232, 234, 190, 32, 11, 235, 59, 12, 12, 25, 191, 190, 78, 56, 191, 124, 221, 199, 60, 149, 203, 20, 61, 110, 26, 233, 189, 28, 25, 148, 62, 79, 6, 99, 190, 59, 200, 131, 189, 119, 68, 31, 61, 65, 170, 148, 62, 186, 181, 78, 190, 167, 45, 236, 190, 8, 239, 1, 191, 162, 170, 186, 60, 248, 79, 167, 61, 188, 187, 141, 189, 155, 27, 155, 62, 72, 76, 5, 63, 68, 234, 124, 60, 64, 229, 171, 190, 184, 41, 150, 189, 203, 27, 223, 190, 1, 3, 135, 61, 95, 124, 139, 189, 223, 63, 218, 188, 12, 55, 47, 190, 211, 109, 15, 60, 34, 140, 75, 62, 217, 124, 56, 62, 162, 221, 1, 190, 69, 27, 102, 62, 217, 115, 96, 59, 157, 238, 97, 62, 26, 32, 63, 191, 248, 245, 147, 61, 233, 90, 127, 62, 30, 18, 233, 189, 67, 155, 215, 62, 221, 121, 118, 190, 27, 211, 198, 61, 46, 120, 49, 61, 223, 164, 91, 189, 52, 50, 152, 61, 6, 34, 243, 61, 187, 237, 24, 62, 175, 63, 204, 61, 118, 211, 6, 62, 192, 114, 135, 191, 52, 197, 78, 190, 7, 66, 151, 190, 202, 25, 22, 190, 143, 247, 130, 62, 10, 97, 24, 61, 157, 125, 66, 189, 84, 114, 102, 189, 51, 195, 206, 189, 53, 8, 84, 190, 249, 210, 125, 61, 132, 21, 149, 190, 36, 34, 4, 62, 230, 225, 166, 61, 149, 53, 203, 61, 56, 112, 150, 61, 220, 141, 88, 60, 38, 96, 155, 190, 243, 18, 15, 188, 132, 3, 44, 191, 108, 81, 220, 190, 71, 85, 113, 62, 19, 6, 7, 61, 113, 184, 100, 189, 202, 186, 47, 190, 32, 103, 162, 61, 204, 91, 11, 190, 162, 151, 15, 190, 117, 15, 161, 189, 31, 74, 42, 190, 207, 171, 12, 190, 227, 81, 19, 190, 8, 137, 209, 61, 29, 179, 252, 189, 138, 103, 28, 62, 244, 8, 156, 189, 53, 118, 127, 61, 143, 255, 58, 61, 242, 240, 7, 61, 138, 15, 214, 189, 122, 86, 110, 189, 35, 176, 19, 189, 176, 237, 93, 188, 177, 231, 246, 60, 162, 202, 47, 61, 28, 13, 31, 190, 127, 90, 6, 190, 78, 34, 216, 189, 120, 170, 129, 61, 40, 68, 209, 61, 140, 203, 18, 62, 47, 128, 216, 189, 7, 218, 238, 189, 246, 209, 63, 189, 218, 199, 45, 62, 116, 180, 66, 190, 251, 238, 5, 190, 110, 99, 155, 61, 67, 97, 134, 189, 231, 103, 124, 189, 101, 145, 32, 190, 126, 42, 127, 61, 117, 123, 251, 189, 193, 72, 235, 189, 159, 49, 72, 60, 127, 219, 236, 58, 77, 107, 104, 61, 255, 3, 7, 62, 76, 165, 169, 189, 172, 153, 146, 60, 90, 114, 22, 190, 100, 76, 14, 190, 117, 199, 121, 58, 186, 4, 168, 61, 234, 182, 197, 189, 74, 241, 196, 189, 83, 197, 255, 189, 206, 37, 47, 61, 227, 156, 219, 189, 134, 67, 200, 189, 106, 138, 50, 62, 221, 45, 16, 62, 186, 20, 202, 189, 48, 181, 184, 188, 181, 68, 42, 190, 172, 29, 19, 190, 62, 9, 19, 62, 178, 144, 82, 188, 248, 40, 160, 60, 140, 104, 14, 62, 166, 223, 159, 60, 174, 120, 194, 189, 14, 103, 8, 59, 199, 37, 170, 188, 50, 40, 253, 189, 18, 128, 131, 189, 49, 1, 241, 189, 177, 78, 25, 189, 9, 251, 184, 189, 251, 237, 218, 61, 28, 96, 211, 189, 133, 181, 3, 190, 120, 205, 1, 190, 179, 234, 81, 61, 201, 196, 183, 61, 40, 218, 28, 190, 39, 61, 23, 62, 10, 168, 229, 186, 178, 128, 211, 189, 166, 138, 230, 189, 140, 172, 174, 189, 139, 95, 40, 190, 247, 123, 26, 190, 21, 173, 249, 61, 78, 228, 10, 62, 253, 190, 140, 189, 19, 43, 167, 60, 2, 223, 176, 60, 99, 136, 4, 62, 244, 28, 63, 190, 101, 70, 188, 189, 75, 12, 227, 189, 168, 118, 114, 60, 75, 183, 236, 189, 234, 132, 145, 188, 158, 172, 241, 59, 177, 229, 252, 60, 39, 148, 140, 61, 194, 106, 12, 62, 211, 255, 21, 190, 108, 108, 240, 189, 217, 219, 102, 59, 251, 184, 125, 189, 74, 239, 241, 188, 185, 57, 225, 189, 178, 96, 233, 60, 97, 102, 65, 61, 39, 173, 246, 189, 99, 10, 166, 61, 180, 153, 228, 189, 168, 25, 193, 59, 0, 162, 122, 61, 17, 0, 50, 190, 61, 254, 51, 189, 75, 206, 192, 189, 194, 104, 184, 59, 61, 57, 238, 189, 247, 165, 178, 189, 5, 217, 85, 190, 251, 221, 225, 188, 134, 190, 218, 61, 227, 250, 1, 191, 84, 98, 55, 62, 29, 142, 7, 190, 136, 189, 209, 189, 243, 101, 228, 190, 22, 168, 129, 190, 137, 229, 209, 190, 122, 246, 167, 190, 133, 196, 78, 189, 239, 115, 167, 61, 234, 101, 169, 62, 142, 117, 14, 63, 142, 55, 76, 185, 142, 27, 40, 62, 84, 19, 31, 62, 217, 127, 101, 62, 27, 221, 77, 188, 47, 44, 34, 190, 98, 43, 31, 60, 146, 179, 61, 191, 3, 241, 131, 62, 51, 158, 65, 62, 228, 167, 57, 62, 83, 41, 25, 60, 132, 222, 204, 61, 193, 93, 233, 61, 11, 153, 150, 62, 133, 127, 133, 62, 108, 51, 161, 190, 250, 82, 44, 62, 212, 242, 188, 190, 227, 96, 162, 189, 238, 28, 29, 189, 152, 51, 30, 190, 78, 163, 201, 59, 183, 142, 212, 184, 25, 53, 41, 188, 216, 16, 33, 190, 171, 116, 139, 189, 146, 0, 58, 59, 184, 149, 53, 189, 85, 90, 27, 190, 139, 60, 236, 59, 2, 206, 246, 189, 47, 45, 161, 60, 158, 71, 154, 61, 110, 180, 159, 189, 29, 56, 28, 62, 79, 227, 167, 189, 140, 171, 33, 190, 252, 71, 178, 189, 43, 41, 140, 189, 223, 193, 16, 190, 176, 246, 240, 60, 34, 148, 100, 189, 198, 207, 49, 190, 235, 96, 6, 190, 117, 72, 8, 190, 142, 1, 110, 189, 87, 97, 182, 189, 176, 83, 245, 189, 30, 124, 28, 190, 79, 29, 20, 62, 2, 238, 133, 60, 209, 190, 38, 191, 1, 183, 14, 61, 183, 174, 72, 190, 109, 202, 134, 190, 169, 158, 252, 190, 37, 98, 19, 191, 39, 149, 30, 191, 11, 220, 54, 189, 7, 87, 10, 190, 81, 249, 185, 189, 198, 154, 23, 61, 41, 123, 165, 62, 11, 71, 116, 61, 251, 54, 95, 188, 23, 2, 231, 190, 117, 239, 149, 61, 136, 154, 218, 189, 65, 85, 198, 189, 66, 141, 2, 62, 234, 125, 149, 190, 179, 69, 21, 190, 19, 66, 128, 61, 207, 19, 233, 62, 81, 121, 178, 60, 22, 64, 67, 62, 132, 243, 69, 190, 48, 182, 137, 189, 0, 127, 220, 189, 229, 240, 16, 62, 81, 148, 32, 62, 34, 20, 84, 190, 59, 77, 8, 190, 25, 152, 144, 190, 71, 52, 66, 60, 238, 133, 88, 189, 71, 217, 164, 62, 145, 216, 66, 190, 40, 62, 197, 190, 122, 201, 231, 190, 145, 184, 179, 190, 26, 191, 36, 189, 88, 147, 22, 62, 85, 73, 135, 62, 146, 1, 198, 62, 6, 92, 122, 62, 122, 9, 172, 61, 109, 117, 249, 60, 18, 130, 207, 187, 113, 10, 71, 62, 132, 19, 235, 189, 69, 76, 153, 189, 234, 20, 56, 191, 38, 204, 29, 189, 81, 47, 177, 62, 216, 139, 1, 187, 230, 251, 231, 61, 1, 238, 245, 61, 128, 185, 105, 189, 39, 32, 180, 62, 125, 163, 2, 190, 133, 121, 199, 190, 17, 80, 156, 62, 155, 93, 177, 190, 224, 81, 16, 61, 226, 151, 85, 190, 167, 190, 94, 189, 90, 1, 25, 62, 88, 64, 90, 61, 193, 163, 148, 62, 179, 95, 20, 191, 249, 177, 199, 190, 63, 118, 129, 189, 240, 34, 25, 62, 211, 116, 155, 190, 253, 128, 221, 190, 44, 55, 14, 62, 22, 56, 4, 191, 35, 108, 144, 61, 20, 222, 60, 62, 75, 218, 139, 189, 17, 243, 133, 190, 172, 114, 193, 190, 55, 142, 67, 190, 123, 61, 40, 61, 106, 227, 102, 62, 220, 170, 172, 188, 119, 45, 31, 190, 56, 252, 89, 61, 132, 82, 159, 190, 15, 150, 228, 60, 22, 249, 218, 190, 39, 197, 34, 61, 208, 167, 162, 190, 192, 185, 129, 190, 50, 30, 187, 62, 14, 241, 48, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 253, 182, 62, 160, 23, 49, 190, 239, 200, 251, 59, 171, 86, 16, 62, 119, 138, 136, 62, 55, 209, 205, 189, 214, 194, 200, 189, 42, 105, 126, 62, 25, 29, 112, 62, 77, 252, 131, 62, 110, 174, 154, 62, 34, 41, 159, 61, 241, 39, 65, 62, 49, 191, 18, 188, 102, 27, 180, 61, 64, 29, 25, 61, 227, 140, 172, 62, 148, 68, 174, 62, 144, 105, 137, 190, 90, 40, 8, 62, 24, 144, 225, 187, 23, 59, 223, 60, 17, 243, 83, 62, 206, 69, 204, 188, 125, 221, 44, 59, 229, 200, 32, 189, 188, 61, 89, 190, 163, 247, 138, 188, 28, 1, 10, 189, 148, 89, 136, 62, 154, 169, 37, 189, 75, 204, 82, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 57, 141, 191, 29, 55, 207, 61, 3, 10, 34, 191, 72, 3, 139, 62, 123, 125, 31, 63, 65, 140, 193, 190, 214, 81, 227, 188, 202, 50, 172, 62, 200, 149, 210, 189, 109, 46, 205, 63, 72, 177, 17, 61, 110, 116, 53, 63, 194, 58, 30, 191, 99, 38, 22, 63, 110, 235, 112, 63, 121, 165, 233, 190, 64, 227, 64, 61, 193, 0, 87, 62, 249, 20, 22, 191, 8, 234, 3, 189, 58, 142, 143, 61, 101, 238, 215, 190, 218, 41, 35, 62, 104, 113, 253, 61, 195, 141, 12, 62, 146, 1, 143, 60, 234, 124, 159, 60, 81, 16, 161, 190, 93, 126, 156, 61, 219, 247, 69, 191, 60, 37, 122, 190, 90, 85, 164, 190, 104, 54, 224, 62, 248, 3, 20, 60, 103, 78, 49, 189, 143, 171, 40, 62, 216, 176, 42, 189, 130, 164, 141, 62, 242, 82, 219, 185, 4, 84, 173, 190, 227, 173, 147, 190, 240, 137, 73, 63, 0, 59, 174, 190, 246, 232, 86, 61, 237, 142, 128, 62, 119, 69, 75, 61, 117, 75, 3, 63, 12, 13, 128, 62, 154, 225, 22, 191, 186, 104, 188, 190, 34, 238, 105, 62, 0, 215, 68, 190, 57, 22, 23, 63, 28, 103, 70, 190, 138, 35, 150, 190, 217, 148, 243, 189, 69, 53, 246, 189, 42, 170, 121, 189, 131, 15, 207, 61, 12, 129, 34, 61, 78, 18, 165, 188, 182, 70, 3, 63, 165, 204, 67, 189, 247, 216, 32, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 68, 1, 188, 37, 172, 152, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {229, 225, 243, 62, 178, 33, 212, 190, 50, 6, 213, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {255, 158, 80, 63, 104, 195, 9, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0010/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}