// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 219, 94, 63, 223, 220, 210, 190, 73, 222, 190, 190, 16, 155, 170, 190, 191, 72, 30, 62, 28, 187, 133, 59, 171, 148, 125, 188, 51, 233, 61, 63, 190, 172, 25, 63, 99, 177, 3, 63, 76, 47, 59, 63, 111, 64, 183, 62, 82, 118, 127, 190, 155, 72, 227, 62, 64, 166, 5, 63, 49, 80, 128, 62, 196, 25, 149, 191, 220, 185, 126, 190, 78, 122, 42, 63, 116, 66, 164, 191, 253, 115, 166, 190, 66, 167, 49, 62, 31, 254, 164, 191, 181, 89, 6, 187, 145, 40, 156, 189, 159, 95, 74, 191, 11, 61, 86, 62, 156, 43, 227, 190, 104, 78, 143, 191, 191, 86, 134, 191, 156, 17, 225, 62, 141, 16, 34, 63, 207, 199, 174, 190, 182, 222, 24, 63, 243, 91, 212, 63, 26, 200, 176, 62, 210, 249, 54, 62, 191, 109, 105, 191, 186, 254, 210, 190, 115, 73, 34, 191, 253, 159, 164, 63, 114, 65, 148, 62, 134, 184, 146, 189, 251, 244, 192, 191, 42, 23, 51, 61, 90, 131, 255, 190, 92, 238, 101, 189, 111, 71, 199, 189, 213, 101, 148, 62, 102, 132, 232, 63, 179, 246, 14, 63, 24, 4, 164, 62, 92, 31, 114, 61, 39, 32, 234, 190, 47, 171, 108, 191, 176, 31, 5, 63, 106, 220, 224, 190, 118, 176, 20, 63, 103, 183, 105, 190, 152, 157, 39, 190, 177, 146, 2, 191, 186, 65, 154, 190, 169, 230, 102, 62, 48, 120, 19, 63, 192, 134, 79, 61, 122, 121, 45, 63, 205, 124, 229, 62, 229, 204, 60, 63, 223, 241, 56, 61, 226, 87, 45, 190, 102, 212, 185, 190, 105, 202, 94, 189, 123, 214, 174, 189, 12, 217, 168, 63, 91, 223, 61, 61, 144, 39, 99, 190, 35, 132, 145, 63, 20, 248, 240, 62, 185, 31, 19, 190, 16, 61, 56, 62, 249, 176, 0, 191, 135, 7, 28, 191, 144, 8, 37, 191, 165, 178, 19, 190, 11, 15, 8, 62, 83, 39, 79, 63, 162, 39, 218, 190, 93, 179, 149, 190, 202, 34, 194, 62, 5, 71, 135, 190, 81, 212, 75, 191, 47, 254, 188, 189, 206, 92, 117, 62, 9, 43, 208, 62, 103, 139, 154, 190, 5, 204, 120, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 120, 84, 191, 8, 145, 209, 62, 112, 45, 244, 189, 245, 162, 33, 191, 183, 121, 228, 190, 127, 100, 41, 61, 91, 244, 85, 190, 66, 148, 107, 59, 137, 108, 165, 62, 25, 239, 137, 61, 66, 2, 141, 62, 126, 58, 136, 60, 124, 70, 226, 62, 138, 52, 217, 61, 18, 14, 83, 62, 212, 247, 29, 63, 148, 36, 38, 62, 60, 138, 67, 62, 195, 81, 4, 191, 147, 175, 202, 190, 30, 41, 225, 190, 190, 21, 71, 62, 115, 8, 67, 63, 248, 106, 108, 62, 64, 130, 197, 189, 48, 42, 237, 61, 231, 98, 84, 190, 242, 230, 24, 63, 15, 102, 13, 190, 212, 114, 213, 62, 221, 109, 70, 191, 12, 240, 166, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 142, 12, 191, 92, 154, 97, 62, 147, 64, 211, 191, 185, 56, 229, 188, 246, 214, 52, 191, 230, 23, 16, 190, 20, 95, 162, 190, 129, 49, 254, 190, 246, 58, 33, 63, 166, 65, 54, 62, 168, 0, 2, 190, 42, 15, 129, 63, 210, 163, 183, 61, 207, 86, 157, 190, 87, 59, 197, 62, 43, 232, 139, 62, 220, 224, 153, 191, 25, 72, 156, 190, 183, 237, 235, 189, 142, 183, 131, 191, 151, 158, 213, 62, 12, 72, 146, 190, 157, 79, 41, 188, 136, 151, 210, 61, 119, 230, 13, 189, 249, 59, 239, 189, 232, 207, 155, 62, 230, 107, 87, 62, 54, 35, 185, 190, 122, 134, 116, 62, 118, 195, 136, 190, 171, 214, 235, 59, 207, 132, 157, 189, 223, 142, 74, 190, 180, 22, 216, 189, 211, 20, 7, 62, 227, 12, 4, 61, 196, 61, 180, 60, 136, 157, 183, 188, 83, 123, 182, 189, 217, 11, 172, 189, 133, 82, 175, 61, 64, 52, 91, 190, 121, 134, 173, 61, 153, 11, 164, 61, 84, 138, 74, 190, 114, 255, 89, 61, 159, 33, 150, 189, 224, 60, 66, 59, 67, 252, 49, 190, 16, 163, 249, 61, 225, 19, 44, 62, 242, 55, 21, 62, 118, 53, 5, 190, 56, 107, 66, 190, 164, 95, 224, 189, 157, 227, 222, 188, 189, 43, 8, 62, 254, 49, 240, 59, 148, 241, 139, 188, 41, 228, 228, 189, 163, 7, 114, 189, 177, 69, 47, 60, 99, 146, 17, 62, 73, 251, 46, 191, 223, 102, 211, 59, 149, 204, 74, 60, 107, 119, 161, 62, 204, 218, 142, 190, 140, 9, 249, 190, 93, 214, 11, 191, 19, 193, 53, 190, 0, 220, 75, 59, 189, 189, 143, 60, 44, 206, 229, 61, 57, 17, 29, 63, 185, 110, 177, 61, 130, 41, 165, 190, 119, 119, 137, 189, 73, 30, 249, 189, 191, 236, 89, 62, 54, 26, 11, 190, 125, 233, 22, 190, 12, 75, 245, 190, 95, 222, 14, 62, 192, 221, 164, 62, 39, 170, 140, 62, 147, 202, 68, 190, 185, 103, 101, 62, 242, 112, 100, 60, 61, 33, 197, 62, 184, 67, 3, 191, 211, 197, 24, 190, 252, 100, 215, 62, 43, 227, 115, 190, 42, 152, 52, 62, 154, 230, 22, 62, 119, 81, 136, 189, 22, 71, 192, 61, 144, 109, 242, 190, 13, 123, 50, 62, 29, 135, 76, 187, 239, 18, 70, 62, 69, 243, 180, 62, 166, 117, 64, 62, 124, 200, 240, 60, 197, 205, 37, 60, 166, 112, 106, 191, 115, 149, 23, 62, 219, 175, 251, 190, 179, 251, 232, 61, 106, 160, 17, 62, 6, 60, 69, 191, 207, 112, 99, 61, 183, 207, 152, 61, 0, 236, 63, 63, 32, 245, 118, 62, 44, 73, 98, 61, 244, 80, 62, 61, 57, 219, 157, 189, 52, 29, 74, 190, 212, 117, 180, 190, 166, 8, 236, 189, 238, 238, 198, 188, 198, 148, 159, 61, 160, 225, 77, 189, 38, 21, 40, 60, 83, 204, 5, 190, 13, 178, 243, 61, 181, 128, 227, 189, 17, 247, 158, 62, 32, 147, 35, 190, 23, 230, 120, 62, 16, 179, 202, 61, 154, 206, 103, 62, 167, 70, 17, 62, 181, 166, 44, 190, 7, 98, 190, 190, 230, 10, 192, 61, 18, 141, 242, 190, 234, 132, 24, 62, 51, 236, 134, 62, 116, 6, 216, 190, 48, 54, 240, 59, 191, 167, 19, 62, 25, 233, 152, 62, 28, 24, 63, 191, 240, 52, 69, 190, 232, 99, 230, 190, 130, 41, 254, 189, 31, 197, 219, 62, 44, 248, 6, 61, 169, 224, 235, 188, 188, 121, 5, 62, 228, 242, 145, 190, 4, 203, 157, 190, 46, 167, 124, 62, 118, 69, 22, 189, 153, 30, 229, 61, 216, 143, 7, 62, 183, 159, 105, 61, 96, 240, 252, 190, 151, 19, 70, 60, 109, 157, 170, 62, 214, 224, 128, 61, 13, 165, 199, 189, 11, 253, 188, 189, 107, 132, 27, 190, 171, 203, 182, 189, 202, 85, 128, 61, 178, 154, 220, 60, 128, 248, 145, 62, 150, 94, 9, 190, 213, 30, 71, 190, 7, 47, 229, 188, 66, 188, 8, 191, 68, 41, 230, 61, 156, 77, 136, 61, 165, 120, 11, 190, 36, 183, 243, 189, 168, 111, 218, 61, 103, 146, 103, 62, 137, 191, 141, 59, 81, 3, 229, 189, 95, 104, 49, 190, 182, 98, 231, 188, 90, 126, 174, 61, 65, 127, 53, 191, 253, 41, 37, 190, 203, 62, 246, 189, 99, 4, 3, 189, 213, 72, 186, 62, 163, 85, 152, 188, 162, 129, 27, 187, 118, 210, 173, 61, 88, 115, 251, 61, 135, 198, 26, 190, 37, 61, 174, 189, 119, 74, 8, 62, 149, 113, 4, 190, 30, 61, 51, 190, 253, 75, 59, 190, 147, 147, 239, 61, 55, 220, 28, 190, 150, 146, 149, 61, 212, 177, 31, 189, 250, 18, 131, 189, 55, 22, 133, 187, 182, 118, 50, 190, 89, 251, 16, 62, 31, 247, 133, 189, 196, 1, 25, 190, 55, 27, 101, 189, 42, 105, 58, 187, 181, 2, 70, 190, 177, 88, 15, 61, 228, 47, 26, 190, 167, 250, 244, 188, 16, 249, 35, 187, 57, 184, 188, 61, 250, 254, 172, 61, 209, 102, 210, 189, 82, 47, 204, 61, 142, 19, 33, 62, 253, 43, 43, 189, 59, 12, 5, 188, 162, 24, 164, 189, 10, 181, 67, 191, 150, 77, 33, 189, 112, 208, 61, 190, 136, 174, 66, 62, 231, 0, 120, 62, 166, 1, 121, 62, 90, 149, 78, 190, 66, 89, 28, 62, 96, 17, 142, 191, 66, 230, 97, 62, 115, 216, 99, 190, 170, 180, 78, 62, 127, 22, 25, 62, 120, 251, 48, 190, 226, 18, 80, 62, 111, 19, 155, 189, 123, 6, 245, 61, 81, 230, 114, 62, 77, 253, 124, 61, 6, 71, 169, 61, 117, 21, 84, 60, 31, 48, 0, 62, 93, 59, 105, 190, 74, 72, 181, 189, 175, 116, 204, 61, 119, 158, 10, 62, 118, 119, 59, 62, 167, 253, 8, 63, 251, 19, 11, 61, 226, 10, 170, 191, 189, 13, 209, 187, 33, 165, 88, 189, 21, 218, 212, 61, 75, 249, 192, 61, 179, 146, 37, 191, 82, 6, 53, 190, 133, 164, 195, 189, 71, 141, 68, 62, 169, 203, 31, 191, 45, 12, 119, 62, 90, 145, 141, 62, 181, 128, 13, 188, 86, 211, 49, 62, 200, 81, 249, 189, 250, 188, 153, 189, 240, 246, 203, 60, 155, 240, 206, 190, 51, 57, 217, 190, 135, 60, 98, 62, 79, 133, 7, 60, 181, 124, 161, 61, 102, 222, 128, 62, 102, 57, 32, 62, 186, 232, 169, 61, 67, 26, 12, 62, 144, 115, 47, 190, 123, 179, 112, 190, 122, 196, 1, 191, 187, 207, 156, 190, 0, 213, 206, 189, 100, 218, 68, 62, 182, 32, 152, 62, 78, 217, 205, 61, 153, 62, 71, 62, 169, 164, 227, 190, 19, 224, 34, 62, 118, 37, 50, 63, 231, 127, 194, 62, 33, 94, 218, 62, 19, 4, 132, 62, 21, 154, 143, 191, 196, 116, 32, 191, 96, 81, 96, 191, 17, 203, 154, 190, 144, 47, 202, 62, 123, 107, 121, 190, 45, 214, 16, 61, 232, 96, 177, 61, 61, 50, 9, 62, 33, 62, 189, 190, 57, 122, 2, 190, 29, 11, 155, 190, 61, 119, 168, 190, 254, 96, 137, 62, 180, 28, 239, 61, 10, 146, 77, 63, 177, 3, 231, 61, 65, 215, 14, 191, 248, 3, 142, 189, 20, 225, 252, 190, 174, 171, 29, 191, 234, 66, 103, 62, 232, 67, 55, 190, 5, 107, 19, 190, 101, 74, 124, 62, 88, 200, 173, 61, 101, 90, 105, 60, 185, 107, 211, 189, 194, 139, 32, 190, 134, 223, 223, 188, 58, 202, 224, 61, 202, 23, 180, 60, 133, 50, 12, 190, 92, 165, 185, 61, 79, 230, 157, 189, 91, 9, 20, 190, 210, 109, 199, 189, 233, 41, 194, 62, 142, 150, 218, 61, 97, 171, 42, 62, 182, 80, 138, 60, 76, 164, 173, 61, 206, 92, 150, 190, 254, 180, 161, 189, 129, 80, 244, 61, 236, 134, 154, 62, 181, 75, 98, 189, 146, 176, 235, 62, 48, 163, 222, 188, 245, 235, 132, 61, 13, 243, 37, 190, 145, 211, 56, 61, 184, 162, 121, 62, 34, 1, 82, 190, 76, 12, 144, 61, 159, 204, 67, 189, 239, 255, 183, 61, 126, 223, 200, 61, 223, 117, 143, 189, 22, 13, 17, 62, 51, 180, 164, 59, 212, 215, 114, 190, 7, 149, 0, 191, 168, 116, 16, 59, 163, 47, 42, 191, 115, 134, 1, 191, 219, 179, 133, 60, 105, 237, 209, 191, 108, 171, 158, 62, 183, 120, 33, 191, 40, 179, 81, 62, 53, 62, 103, 62, 252, 126, 24, 61, 171, 183, 83, 191, 233, 153, 11, 188, 224, 64, 169, 190, 230, 4, 44, 62, 10, 253, 67, 62, 158, 178, 228, 189, 144, 64, 4, 62, 137, 63, 158, 62, 22, 147, 17, 191, 19, 90, 255, 60, 9, 103, 22, 191, 158, 253, 63, 58, 252, 35, 20, 62, 120, 36, 101, 61, 44, 200, 199, 190, 238, 119, 223, 188, 180, 215, 27, 191, 205, 211, 110, 190, 231, 45, 187, 190, 74, 14, 144, 190, 45, 122, 112, 190, 143, 18, 64, 191, 130, 112, 136, 61, 188, 65, 69, 62, 95, 247, 86, 62, 37, 22, 51, 63, 114, 60, 44, 61, 190, 128, 109, 190, 191, 141, 173, 62, 195, 119, 76, 62, 116, 110, 145, 190, 134, 167, 155, 190, 147, 71, 30, 190, 8, 107, 36, 191, 0, 143, 69, 63, 206, 146, 134, 62, 82, 55, 47, 189, 118, 96, 253, 61, 79, 100, 180, 189, 171, 219, 187, 190, 118, 81, 148, 62, 85, 89, 190, 61, 124, 92, 191, 190, 235, 131, 72, 62, 88, 250, 35, 62, 30, 56, 34, 62, 15, 145, 233, 189, 80, 172, 250, 61, 141, 197, 54, 62, 13, 118, 114, 189, 192, 117, 114, 190, 238, 222, 214, 190, 47, 169, 170, 190, 160, 58, 133, 190, 117, 221, 42, 191, 159, 51, 15, 62, 212, 30, 92, 62, 246, 195, 73, 190, 147, 244, 113, 61, 80, 176, 221, 62, 151, 81, 68, 190, 90, 2, 154, 189, 37, 142, 151, 62, 185, 14, 42, 190, 98, 50, 136, 190, 114, 63, 139, 63, 8, 156, 49, 191, 241, 49, 194, 190, 228, 77, 2, 63, 74, 113, 23, 190, 17, 55, 112, 62, 87, 67, 116, 190, 50, 18, 21, 62, 196, 89, 51, 190, 25, 18, 23, 62, 116, 30, 15, 62, 60, 75, 59, 189, 87, 101, 3, 191, 178, 9, 22, 63, 218, 137, 232, 189, 206, 31, 216, 61, 0, 215, 59, 191, 12, 108, 83, 188, 14, 166, 225, 62, 106, 42, 161, 62, 34, 112, 189, 62, 21, 23, 141, 62, 240, 87, 108, 191, 170, 63, 188, 189, 142, 29, 60, 191, 243, 55, 200, 189, 138, 197, 148, 61, 70, 68, 32, 189, 120, 94, 63, 190, 66, 200, 180, 190, 132, 252, 48, 61, 199, 255, 4, 60, 19, 49, 166, 189, 102, 169, 104, 61, 255, 177, 88, 190, 214, 113, 71, 62, 203, 163, 153, 61, 63, 244, 4, 190, 20, 135, 160, 189, 255, 27, 70, 191, 101, 119, 121, 189, 31, 71, 179, 187, 229, 163, 209, 190, 157, 120, 220, 62, 65, 152, 81, 61, 117, 102, 127, 190, 38, 62, 23, 62, 172, 223, 21, 191, 75, 198, 193, 190, 213, 35, 12, 191, 146, 221, 220, 189, 157, 97, 101, 190, 222, 133, 157, 190, 39, 179, 104, 62, 237, 85, 164, 61, 81, 63, 194, 61, 178, 11, 19, 63, 0, 184, 118, 189, 27, 157, 184, 59, 239, 75, 244, 61, 227, 124, 135, 62, 57, 74, 72, 61, 196, 59, 156, 190, 132, 172, 162, 189, 223, 182, 54, 191, 7, 47, 47, 63, 141, 63, 63, 62, 111, 28, 159, 61, 145, 59, 108, 60, 27, 18, 5, 62, 106, 37, 157, 189, 62, 29, 143, 189, 232, 108, 170, 62, 155, 149, 251, 189, 156, 108, 106, 62, 187, 34, 63, 189, 222, 105, 147, 190, 146, 251, 141, 190, 157, 37, 135, 61, 113, 216, 19, 191, 100, 235, 41, 191, 1, 171, 195, 190, 51, 89, 130, 190, 165, 207, 194, 60, 171, 44, 157, 61, 250, 253, 42, 62, 124, 68, 3, 61, 18, 221, 59, 62, 37, 225, 173, 189, 13, 231, 46, 62, 148, 27, 168, 190, 71, 162, 109, 62, 26, 157, 165, 61, 170, 243, 30, 190, 193, 110, 163, 61, 108, 30, 128, 61, 204, 120, 195, 190, 52, 75, 14, 190, 65, 214, 247, 62, 144, 61, 147, 62, 201, 205, 59, 62, 58, 240, 190, 61, 68, 100, 199, 190, 203, 205, 61, 62, 21, 81, 78, 62, 81, 226, 90, 190, 59, 65, 67, 189, 253, 77, 0, 191, 71, 47, 31, 63, 98, 53, 10, 190, 147, 228, 148, 62, 122, 173, 77, 62, 97, 0, 129, 190, 136, 23, 173, 189, 71, 241, 39, 61, 54, 124, 54, 61, 189, 215, 19, 61, 193, 101, 41, 189, 17, 166, 84, 190, 163, 171, 155, 62, 89, 151, 198, 190, 197, 115, 217, 61, 91, 243, 3, 188, 164, 111, 137, 61, 188, 149, 130, 62, 241, 33, 180, 61, 20, 88, 182, 61, 35, 21, 232, 189, 57, 248, 122, 59, 217, 133, 177, 189, 235, 43, 55, 62, 163, 167, 201, 62, 80, 97, 188, 61, 55, 55, 72, 62, 89, 250, 161, 189, 225, 174, 86, 189, 48, 137, 0, 190, 75, 199, 34, 61, 242, 249, 30, 62, 139, 164, 183, 61, 229, 197, 212, 60, 195, 56, 48, 62, 40, 87, 21, 191, 39, 121, 229, 61, 220, 145, 177, 62, 163, 70, 74, 189, 219, 82, 83, 62, 248, 204, 162, 62, 232, 54, 171, 62, 242, 153, 233, 189, 8, 165, 148, 62, 176, 63, 169, 190, 44, 195, 131, 62, 2, 112, 152, 61, 39, 134, 139, 190, 45, 65, 173, 62, 203, 228, 8, 191, 134, 95, 205, 59, 242, 158, 211, 188, 211, 161, 255, 190, 227, 68, 48, 189, 78, 30, 9, 190, 65, 18, 34, 62, 1, 155, 63, 190, 126, 252, 164, 61, 200, 90, 247, 189, 136, 15, 164, 61, 138, 249, 169, 189, 251, 88, 85, 190, 56, 129, 104, 190, 150, 239, 0, 191, 38, 116, 171, 189, 141, 237, 106, 62, 253, 220, 239, 189, 225, 15, 73, 189, 89, 32, 18, 190, 201, 56, 129, 61, 174, 182, 219, 188, 223, 90, 186, 189, 216, 164, 109, 61, 79, 132, 45, 61, 63, 175, 179, 62, 224, 209, 48, 62, 171, 210, 100, 60, 242, 69, 155, 61, 101, 187, 131, 62, 138, 221, 73, 188, 182, 225, 196, 62, 5, 14, 55, 188, 215, 69, 130, 189, 142, 204, 75, 190, 16, 254, 79, 189, 160, 64, 187, 190, 157, 244, 184, 189, 162, 23, 184, 58, 209, 242, 21, 190, 44, 245, 92, 62, 109, 102, 114, 62, 152, 211, 135, 60, 21, 76, 28, 62, 160, 239, 98, 61, 24, 47, 127, 190, 221, 200, 74, 189, 220, 212, 12, 190, 57, 58, 112, 60, 35, 102, 131, 190, 86, 88, 82, 190, 235, 80, 73, 61, 245, 120, 97, 62, 170, 146, 227, 60, 140, 194, 9, 191, 12, 220, 253, 189, 112, 194, 45, 191, 146, 253, 150, 61, 211, 87, 211, 190, 42, 205, 129, 62, 28, 67, 195, 62, 28, 206, 175, 61, 41, 227, 52, 190, 84, 155, 205, 190, 161, 141, 19, 190, 59, 216, 139, 61, 85, 196, 189, 188, 148, 156, 189, 60, 116, 171, 147, 189, 241, 255, 85, 189, 110, 50, 54, 62, 134, 235, 88, 62, 244, 14, 6, 190, 131, 12, 211, 190, 64, 171, 1, 61, 97, 55, 14, 191, 65, 220, 19, 191, 170, 213, 108, 189, 164, 33, 134, 60, 97, 25, 237, 189, 162, 204, 136, 62, 67, 203, 118, 190, 229, 121, 27, 189, 26, 66, 6, 61, 183, 213, 124, 62, 34, 136, 83, 190, 127, 131, 243, 190, 18, 68, 6, 191, 121, 57, 199, 60, 22, 231, 175, 61, 1, 128, 160, 189, 184, 232, 147, 62, 171, 89, 6, 63, 28, 158, 136, 187, 128, 65, 162, 190, 5, 34, 97, 189, 79, 236, 209, 190, 123, 189, 147, 61, 71, 85, 192, 189, 159, 16, 71, 189, 140, 216, 86, 190, 111, 99, 98, 60, 116, 239, 73, 62, 68, 252, 43, 62, 75, 81, 0, 190, 221, 75, 67, 62, 182, 240, 169, 59, 52, 46, 78, 62, 172, 74, 51, 191, 199, 142, 171, 61, 42, 172, 120, 62, 11, 46, 232, 189, 255, 227, 216, 62, 91, 108, 35, 190, 219, 169, 198, 61, 38, 22, 66, 61, 155, 31, 19, 189, 4, 227, 153, 61, 101, 163, 206, 61, 3, 21, 7, 62, 135, 164, 155, 61, 122, 243, 235, 61, 180, 37, 103, 191, 102, 53, 69, 190, 221, 165, 144, 190, 208, 234, 30, 190, 53, 105, 119, 62, 241, 233, 242, 58, 80, 217, 57, 189, 117, 198, 42, 189, 122, 8, 172, 189, 74, 130, 168, 190, 158, 143, 150, 61, 151, 10, 149, 190, 184, 182, 235, 61, 39, 141, 162, 61, 221, 71, 195, 61, 102, 104, 128, 61, 197, 40, 38, 60, 38, 96, 155, 190, 213, 39, 77, 188, 200, 178, 10, 191, 246, 27, 195, 190, 60, 80, 109, 62, 136, 192, 132, 60, 113, 184, 100, 189, 202, 186, 47, 190, 32, 103, 162, 61, 204, 91, 11, 190, 162, 151, 15, 190, 117, 15, 161, 189, 31, 74, 42, 190, 207, 171, 12, 190, 227, 81, 19, 190, 8, 137, 209, 61, 29, 179, 252, 189, 138, 103, 28, 62, 244, 8, 156, 189, 53, 118, 127, 61, 143, 255, 58, 61, 242, 240, 7, 61, 138, 15, 214, 189, 122, 86, 110, 189, 35, 176, 19, 189, 176, 237, 93, 188, 177, 231, 246, 60, 162, 202, 47, 61, 28, 13, 31, 190, 127, 90, 6, 190, 78, 34, 216, 189, 120, 170, 129, 61, 40, 68, 209, 61, 140, 203, 18, 62, 47, 128, 216, 189, 7, 218, 238, 189, 246, 209, 63, 189, 218, 199, 45, 62, 116, 180, 66, 190, 251, 238, 5, 190, 110, 99, 155, 61, 67, 97, 134, 189, 231, 103, 124, 189, 101, 145, 32, 190, 126, 42, 127, 61, 117, 123, 251, 189, 193, 72, 235, 189, 159, 49, 72, 60, 127, 219, 236, 58, 77, 107, 104, 61, 255, 3, 7, 62, 76, 165, 169, 189, 172, 153, 146, 60, 90, 114, 22, 190, 100, 76, 14, 190, 117, 199, 121, 58, 186, 4, 168, 61, 234, 182, 197, 189, 74, 241, 196, 189, 83, 197, 255, 189, 206, 37, 47, 61, 227, 156, 219, 189, 134, 67, 200, 189, 106, 138, 50, 62, 221, 45, 16, 62, 186, 20, 202, 189, 48, 181, 184, 188, 181, 68, 42, 190, 172, 29, 19, 190, 62, 9, 19, 62, 178, 144, 82, 188, 248, 40, 160, 60, 140, 104, 14, 62, 166, 223, 159, 60, 174, 120, 194, 189, 14, 103, 8, 59, 199, 37, 170, 188, 50, 40, 253, 189, 18, 128, 131, 189, 49, 1, 241, 189, 177, 78, 25, 189, 9, 251, 184, 189, 251, 237, 218, 61, 28, 96, 211, 189, 133, 181, 3, 190, 120, 205, 1, 190, 179, 234, 81, 61, 201, 196, 183, 61, 40, 218, 28, 190, 39, 61, 23, 62, 10, 168, 229, 186, 178, 128, 211, 189, 166, 138, 230, 189, 140, 172, 174, 189, 139, 95, 40, 190, 247, 123, 26, 190, 21, 173, 249, 61, 78, 228, 10, 62, 253, 190, 140, 189, 19, 43, 167, 60, 2, 223, 176, 60, 99, 136, 4, 62, 244, 28, 63, 190, 101, 70, 188, 189, 75, 12, 227, 189, 168, 118, 114, 60, 75, 183, 236, 189, 234, 132, 145, 188, 158, 172, 241, 59, 177, 229, 252, 60, 39, 148, 140, 61, 194, 106, 12, 62, 211, 255, 21, 190, 108, 108, 240, 189, 217, 219, 102, 59, 251, 184, 125, 189, 74, 239, 241, 188, 185, 57, 225, 189, 178, 96, 233, 60, 97, 102, 65, 61, 39, 173, 246, 189, 99, 10, 166, 61, 180, 153, 228, 189, 168, 25, 193, 59, 0, 162, 122, 61, 17, 0, 50, 190, 61, 254, 51, 189, 75, 206, 192, 189, 194, 104, 184, 59, 61, 57, 238, 189, 247, 165, 178, 189, 5, 217, 85, 190, 251, 221, 225, 188, 134, 190, 218, 61, 195, 252, 0, 191, 110, 93, 54, 62, 10, 95, 30, 190, 183, 163, 238, 189, 22, 246, 230, 190, 186, 184, 129, 190, 187, 124, 210, 190, 189, 83, 171, 190, 115, 50, 154, 189, 18, 15, 205, 61, 41, 34, 169, 62, 181, 227, 15, 63, 30, 0, 39, 60, 32, 184, 28, 62, 253, 69, 40, 62, 237, 29, 109, 62, 147, 0, 97, 188, 102, 135, 36, 190, 145, 170, 217, 59, 39, 243, 65, 191, 201, 167, 127, 62, 206, 25, 48, 62, 144, 139, 46, 62, 252, 122, 91, 60, 158, 231, 127, 61, 127, 194, 211, 61, 187, 173, 151, 62, 136, 42, 143, 62, 2, 158, 154, 190, 212, 39, 50, 62, 73, 112, 196, 190, 13, 85, 179, 189, 238, 28, 29, 189, 152, 51, 30, 190, 78, 163, 201, 59, 183, 142, 212, 184, 25, 53, 41, 188, 216, 16, 33, 190, 171, 116, 139, 189, 146, 0, 58, 59, 184, 149, 53, 189, 85, 90, 27, 190, 139, 60, 236, 59, 2, 206, 246, 189, 47, 45, 161, 60, 158, 71, 154, 61, 110, 180, 159, 189, 29, 56, 28, 62, 79, 227, 167, 189, 140, 171, 33, 190, 252, 71, 178, 189, 43, 41, 140, 189, 223, 193, 16, 190, 176, 246, 240, 60, 34, 148, 100, 189, 198, 207, 49, 190, 235, 96, 6, 190, 117, 72, 8, 190, 142, 1, 110, 189, 87, 97, 182, 189, 176, 83, 245, 189, 30, 124, 28, 190, 79, 29, 20, 62, 2, 238, 133, 60, 248, 17, 37, 191, 129, 229, 41, 61, 55, 81, 95, 190, 4, 129, 158, 190, 240, 3, 1, 191, 47, 134, 16, 191, 31, 160, 27, 191, 68, 125, 188, 188, 40, 50, 236, 189, 55, 36, 174, 189, 103, 64, 32, 61, 94, 112, 174, 62, 231, 127, 143, 61, 31, 144, 223, 188, 135, 157, 211, 190, 142, 227, 152, 61, 53, 164, 195, 189, 93, 144, 205, 189, 82, 63, 229, 61, 1, 189, 152, 190, 210, 122, 97, 190, 129, 244, 154, 61, 73, 72, 236, 62, 128, 190, 242, 60, 81, 50, 14, 62, 114, 61, 93, 190, 230, 160, 148, 189, 130, 11, 191, 189, 103, 46, 33, 62, 170, 33, 33, 62, 180, 116, 171, 190, 45, 7, 187, 189, 4, 81, 145, 190, 89, 182, 232, 60, 232, 71, 123, 189, 202, 167, 146, 62, 135, 219, 71, 190, 10, 227, 196, 190, 104, 38, 235, 190, 52, 169, 177, 190, 0, 220, 34, 189, 42, 224, 36, 62, 247, 45, 132, 62, 239, 39, 198, 62, 83, 105, 123, 62, 133, 89, 172, 61, 99, 235, 90, 61, 62, 162, 133, 60, 206, 74, 69, 62, 90, 52, 253, 189, 64, 254, 158, 189, 118, 158, 63, 191, 29, 27, 8, 189, 218, 142, 174, 62, 190, 143, 124, 188, 16, 52, 6, 62, 214, 163, 167, 61, 238, 152, 127, 189, 95, 88, 180, 62, 3, 53, 178, 189, 187, 68, 193, 190, 155, 184, 157, 62, 127, 37, 176, 190, 175, 44, 6, 61, 226, 151, 85, 190, 246, 65, 210, 188, 35, 87, 37, 62, 218, 105, 53, 61, 91, 96, 153, 62, 82, 83, 17, 191, 64, 112, 172, 190, 151, 71, 125, 189, 3, 57, 29, 62, 211, 116, 155, 190, 253, 128, 221, 190, 123, 137, 36, 62, 82, 242, 13, 191, 51, 118, 198, 61, 30, 244, 71, 62, 195, 152, 88, 188, 235, 175, 120, 190, 172, 114, 193, 190, 58, 215, 69, 190, 123, 61, 40, 61, 138, 21, 114, 62, 32, 123, 64, 188, 147, 83, 5, 190, 162, 95, 120, 61, 223, 233, 138, 190, 120, 14, 61, 61, 22, 249, 218, 190, 154, 32, 118, 61, 208, 167, 162, 190, 66, 120, 150, 190, 166, 207, 190, 62, 202, 118, 34, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 211, 168, 62, 160, 23, 49, 190, 210, 71, 167, 59, 251, 9, 35, 62, 69, 231, 134, 62, 143, 124, 153, 189, 214, 194, 200, 189, 67, 187, 133, 62, 181, 107, 84, 62, 54, 5, 126, 62, 97, 105, 144, 62, 221, 229, 148, 61, 40, 162, 70, 62, 152, 37, 165, 188, 217, 73, 219, 61, 58, 4, 28, 61, 163, 238, 156, 62, 224, 186, 173, 62, 185, 102, 106, 190, 58, 43, 157, 61, 45, 43, 189, 59, 26, 252, 192, 60, 193, 144, 77, 62, 206, 69, 204, 188, 125, 221, 44, 59, 229, 200, 32, 189, 188, 61, 89, 190, 233, 192, 214, 188, 28, 1, 10, 189, 121, 183, 140, 62, 101, 78, 52, 189, 195, 158, 59, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 42, 142, 191, 29, 55, 207, 61, 232, 143, 36, 191, 217, 171, 153, 62, 240, 226, 35, 63, 139, 92, 163, 190, 214, 81, 227, 188, 41, 16, 201, 62, 74, 60, 234, 189, 57, 31, 198, 63, 119, 116, 66, 61, 237, 125, 57, 63, 35, 198, 52, 191, 26, 101, 12, 63, 255, 217, 88, 63, 81, 161, 6, 191, 84, 120, 99, 61, 200, 43, 110, 62, 44, 137, 4, 191, 13, 107, 192, 188, 124, 37, 124, 61, 214, 1, 222, 190, 105, 18, 26, 62, 104, 113, 253, 61, 195, 141, 12, 62, 146, 1, 143, 60, 234, 124, 159, 60, 243, 210, 180, 190, 93, 126, 156, 61, 62, 110, 84, 191, 179, 73, 139, 190, 71, 65, 170, 190, 237, 115, 165, 62, 248, 3, 20, 60, 32, 191, 115, 189, 11, 234, 22, 62, 70, 194, 198, 60, 225, 144, 144, 62, 242, 82, 219, 185, 52, 215, 134, 190, 197, 228, 141, 190, 172, 27, 51, 63, 165, 184, 159, 190, 5, 204, 153, 61, 105, 43, 91, 62, 157, 61, 134, 61, 52, 238, 216, 62, 85, 184, 73, 62, 176, 56, 12, 191, 233, 88, 161, 190, 115, 156, 122, 62, 180, 68, 44, 190, 223, 89, 251, 62, 111, 253, 83, 190, 67, 125, 147, 190, 217, 148, 243, 189, 69, 53, 246, 189, 42, 170, 121, 189, 131, 15, 207, 61, 235, 161, 106, 60, 78, 18, 165, 188, 147, 116, 228, 62, 86, 74, 157, 189, 226, 135, 32, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 188, 135, 59, 39, 93, 122, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {121, 234, 106, 62, 99, 70, 148, 63, 7, 138, 144, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {62, 8, 13, 192, 6, 127, 103, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0010/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}