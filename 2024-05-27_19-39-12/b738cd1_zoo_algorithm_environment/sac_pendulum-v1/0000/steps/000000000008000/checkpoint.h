// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 182, 200, 190, 181, 46, 146, 62, 175, 247, 120, 188, 28, 95, 211, 190, 128, 126, 173, 190, 115, 193, 46, 63, 220, 168, 27, 63, 36, 129, 17, 191, 177, 186, 197, 189, 120, 111, 181, 190, 224, 5, 141, 191, 133, 117, 147, 189, 26, 215, 64, 190, 208, 162, 67, 191, 184, 252, 60, 191, 38, 138, 120, 62, 225, 106, 240, 62, 32, 108, 30, 63, 79, 21, 119, 62, 159, 245, 134, 190, 82, 39, 1, 63, 167, 127, 34, 63, 244, 110, 89, 63, 107, 114, 130, 62, 25, 203, 185, 190, 5, 79, 34, 62, 1, 151, 49, 191, 164, 42, 50, 62, 34, 31, 93, 63, 172, 16, 233, 190, 166, 123, 64, 63, 112, 15, 116, 63, 127, 234, 152, 62, 205, 146, 28, 191, 245, 121, 126, 63, 80, 128, 239, 62, 22, 153, 187, 62, 163, 112, 35, 63, 165, 0, 77, 61, 241, 164, 16, 63, 114, 111, 27, 191, 230, 0, 163, 190, 102, 75, 61, 62, 211, 1, 49, 63, 175, 23, 16, 191, 244, 101, 216, 189, 131, 8, 156, 189, 227, 25, 172, 188, 144, 75, 184, 62, 14, 208, 91, 191, 138, 58, 236, 190, 166, 24, 27, 191, 57, 49, 161, 62, 66, 12, 96, 190, 174, 8, 59, 63, 19, 35, 234, 189, 58, 71, 192, 189, 209, 232, 227, 190, 85, 179, 197, 62, 136, 194, 145, 61, 121, 131, 168, 190, 254, 84, 14, 62, 87, 137, 186, 62, 117, 246, 160, 62, 69, 16, 3, 63, 30, 101, 26, 61, 175, 35, 9, 63, 13, 15, 149, 190, 164, 95, 229, 60, 41, 108, 137, 62, 180, 182, 0, 63, 30, 199, 227, 62, 241, 219, 4, 63, 98, 20, 83, 191, 103, 151, 113, 190, 117, 105, 205, 62, 155, 43, 61, 191, 14, 61, 182, 190, 250, 101, 93, 190, 134, 42, 154, 62, 8, 174, 22, 191, 54, 79, 247, 62, 126, 67, 84, 63, 156, 226, 57, 62, 24, 218, 133, 62, 59, 47, 234, 190, 69, 163, 2, 63, 37, 65, 89, 190, 109, 251, 5, 62, 32, 49, 231, 190, 107, 35, 170, 190, 22, 150, 7, 191, 218, 168, 130, 56, 85, 214, 0, 63, 245, 201, 195, 62, 98, 127, 136, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 120, 27, 191, 21, 236, 131, 190, 98, 198, 171, 62, 82, 5, 188, 62, 19, 42, 150, 190, 66, 167, 80, 61, 219, 11, 152, 62, 211, 153, 139, 190, 45, 94, 13, 191, 192, 161, 76, 62, 108, 104, 189, 189, 232, 208, 221, 60, 122, 72, 30, 190, 42, 11, 46, 191, 155, 158, 18, 62, 141, 1, 199, 62, 36, 6, 137, 62, 252, 66, 100, 62, 82, 143, 70, 190, 184, 61, 0, 63, 0, 68, 137, 62, 77, 107, 37, 63, 142, 138, 58, 63, 211, 209, 176, 190, 125, 252, 40, 190, 153, 143, 186, 189, 249, 193, 163, 190, 132, 53, 169, 189, 118, 36, 144, 62, 84, 49, 189, 190, 52, 144, 32, 191, 152, 110, 47, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 32, 81, 189, 39, 84, 145, 62, 30, 66, 103, 62, 145, 154, 131, 61, 159, 133, 12, 190, 136, 8, 128, 190, 237, 194, 16, 62, 198, 231, 218, 190, 162, 132, 252, 190, 61, 234, 140, 190, 124, 206, 38, 189, 110, 172, 100, 62, 158, 147, 167, 190, 64, 249, 173, 61, 12, 102, 181, 187, 83, 166, 114, 62, 143, 142, 129, 189, 148, 71, 35, 187, 30, 159, 114, 62, 221, 15, 36, 189, 97, 129, 67, 62, 151, 176, 8, 62, 66, 176, 98, 62, 86, 228, 167, 190, 41, 131, 36, 62, 132, 115, 190, 61, 43, 178, 210, 61, 47, 26, 186, 190, 174, 121, 40, 190, 41, 222, 50, 62, 122, 227, 205, 62, 100, 254, 75, 190, 74, 74, 32, 189, 143, 217, 0, 190, 181, 113, 75, 190, 223, 138, 152, 61, 56, 129, 160, 189, 218, 89, 2, 190, 228, 72, 243, 61, 94, 38, 55, 189, 198, 5, 22, 190, 16, 192, 248, 61, 187, 170, 40, 190, 79, 65, 6, 190, 3, 164, 31, 190, 211, 37, 187, 189, 79, 204, 233, 189, 7, 6, 59, 190, 204, 17, 38, 61, 30, 51, 146, 189, 53, 168, 118, 189, 18, 56, 3, 189, 36, 28, 148, 61, 124, 136, 16, 62, 87, 233, 155, 59, 112, 198, 235, 189, 246, 228, 189, 60, 215, 127, 179, 61, 216, 85, 222, 189, 245, 128, 225, 61, 195, 30, 195, 188, 54, 244, 168, 188, 180, 34, 176, 188, 168, 230, 207, 61, 31, 255, 252, 188, 120, 101, 181, 61, 84, 5, 158, 62, 135, 161, 3, 189, 202, 135, 182, 61, 81, 112, 123, 60, 108, 140, 219, 60, 103, 194, 143, 189, 142, 82, 17, 62, 91, 106, 58, 62, 28, 170, 28, 190, 246, 54, 4, 189, 245, 110, 64, 190, 201, 49, 155, 190, 194, 95, 201, 189, 46, 32, 38, 61, 148, 229, 28, 62, 54, 80, 179, 188, 60, 243, 38, 62, 117, 97, 197, 61, 126, 150, 88, 61, 61, 234, 92, 62, 248, 155, 16, 62, 60, 121, 140, 188, 107, 36, 153, 190, 57, 136, 211, 61, 177, 87, 142, 189, 131, 127, 48, 190, 57, 123, 11, 190, 83, 114, 35, 61, 133, 11, 200, 60, 115, 224, 15, 189, 100, 7, 246, 189, 90, 130, 106, 62, 249, 23, 182, 62, 212, 42, 73, 62, 157, 45, 50, 190, 61, 107, 128, 190, 59, 58, 193, 61, 41, 150, 50, 190, 167, 68, 200, 190, 101, 153, 114, 189, 164, 145, 100, 190, 195, 227, 19, 60, 16, 11, 58, 190, 32, 202, 213, 189, 229, 220, 32, 62, 112, 14, 22, 62, 250, 80, 180, 189, 224, 111, 29, 190, 139, 109, 220, 62, 65, 81, 72, 190, 217, 219, 44, 61, 111, 193, 94, 62, 183, 6, 79, 189, 95, 72, 189, 190, 106, 234, 131, 62, 237, 32, 41, 62, 50, 179, 9, 189, 137, 45, 134, 190, 195, 238, 33, 189, 29, 104, 168, 60, 50, 240, 229, 61, 252, 224, 106, 62, 252, 20, 217, 61, 10, 3, 130, 190, 153, 119, 61, 59, 187, 113, 94, 62, 110, 110, 225, 61, 174, 245, 121, 62, 156, 72, 179, 188, 203, 227, 133, 61, 118, 232, 148, 60, 65, 195, 91, 62, 145, 77, 248, 62, 1, 147, 208, 190, 174, 149, 88, 61, 101, 100, 109, 189, 167, 225, 137, 190, 13, 134, 221, 61, 165, 160, 26, 62, 215, 21, 95, 189, 96, 63, 46, 61, 57, 129, 103, 190, 227, 150, 30, 190, 106, 188, 86, 61, 235, 87, 145, 62, 29, 19, 233, 61, 7, 91, 11, 190, 161, 116, 100, 190, 71, 117, 45, 190, 108, 100, 127, 62, 50, 114, 174, 62, 121, 45, 59, 61, 232, 233, 60, 190, 91, 84, 119, 188, 104, 78, 122, 189, 213, 157, 56, 190, 57, 84, 32, 190, 88, 73, 25, 188, 171, 125, 117, 60, 14, 29, 173, 61, 5, 199, 36, 61, 150, 89, 165, 61, 137, 212, 234, 187, 122, 13, 199, 188, 119, 12, 43, 190, 119, 118, 105, 60, 88, 49, 3, 190, 41, 241, 207, 189, 35, 226, 56, 60, 16, 208, 59, 190, 106, 126, 40, 61, 213, 89, 81, 189, 145, 248, 167, 187, 10, 33, 225, 59, 203, 30, 196, 189, 126, 214, 125, 61, 184, 58, 45, 190, 148, 249, 16, 190, 218, 169, 95, 189, 219, 160, 165, 61, 124, 136, 110, 61, 178, 0, 41, 60, 255, 61, 145, 61, 36, 215, 225, 189, 240, 139, 46, 190, 208, 114, 6, 189, 246, 146, 190, 59, 209, 168, 43, 188, 120, 89, 16, 190, 23, 130, 59, 61, 177, 192, 176, 190, 85, 129, 107, 191, 39, 110, 243, 189, 243, 58, 23, 191, 240, 236, 192, 190, 242, 2, 154, 190, 153, 41, 101, 191, 239, 68, 134, 188, 4, 50, 36, 191, 157, 144, 254, 61, 214, 228, 33, 62, 169, 188, 10, 60, 131, 48, 153, 190, 45, 178, 105, 62, 201, 244, 8, 62, 246, 230, 22, 62, 247, 28, 167, 61, 209, 209, 29, 62, 151, 33, 198, 190, 25, 99, 126, 190, 160, 205, 212, 61, 31, 254, 0, 190, 174, 63, 239, 61, 159, 177, 27, 62, 122, 183, 136, 191, 244, 234, 2, 62, 85, 190, 47, 62, 187, 232, 87, 190, 176, 173, 241, 61, 21, 135, 20, 191, 253, 101, 120, 190, 29, 89, 145, 189, 252, 129, 86, 62, 97, 127, 54, 62, 96, 220, 211, 190, 236, 144, 173, 62, 96, 184, 145, 62, 249, 69, 13, 63, 236, 15, 132, 62, 197, 122, 30, 191, 85, 166, 233, 62, 104, 61, 33, 191, 128, 208, 171, 190, 58, 107, 3, 62, 17, 225, 13, 62, 176, 68, 185, 61, 148, 236, 138, 187, 69, 25, 65, 62, 176, 147, 93, 188, 19, 59, 220, 61, 254, 169, 14, 190, 24, 214, 245, 61, 44, 212, 129, 191, 162, 115, 243, 190, 41, 229, 144, 190, 49, 205, 185, 61, 44, 53, 138, 188, 215, 254, 58, 189, 26, 40, 166, 190, 183, 219, 16, 189, 48, 185, 50, 190, 231, 145, 245, 60, 154, 19, 214, 59, 48, 209, 28, 190, 199, 1, 127, 60, 156, 175, 31, 189, 152, 195, 205, 189, 109, 108, 37, 189, 5, 183, 55, 61, 117, 85, 102, 61, 82, 144, 151, 61, 63, 243, 95, 60, 122, 22, 159, 189, 98, 194, 228, 61, 158, 126, 57, 189, 129, 192, 134, 61, 206, 115, 137, 189, 154, 162, 49, 190, 210, 112, 15, 190, 225, 211, 242, 59, 58, 194, 199, 61, 220, 62, 202, 189, 155, 1, 33, 190, 96, 114, 27, 190, 234, 252, 245, 189, 177, 5, 162, 61, 193, 248, 146, 189, 1, 179, 34, 190, 59, 146, 0, 188, 15, 37, 120, 188, 62, 146, 231, 59, 150, 251, 154, 188, 195, 127, 63, 189, 147, 232, 207, 61, 23, 3, 159, 60, 199, 144, 208, 188, 35, 112, 43, 61, 25, 124, 116, 189, 38, 172, 63, 190, 61, 69, 48, 62, 94, 48, 230, 59, 77, 226, 48, 190, 155, 244, 0, 62, 190, 168, 42, 190, 130, 150, 12, 189, 141, 66, 195, 188, 46, 17, 77, 60, 72, 216, 111, 61, 74, 137, 24, 61, 26, 211, 87, 188, 169, 64, 26, 190, 162, 179, 15, 190, 51, 189, 255, 61, 238, 217, 244, 189, 245, 175, 173, 189, 120, 69, 37, 61, 223, 157, 146, 58, 132, 99, 32, 190, 192, 226, 184, 59, 57, 96, 36, 62, 72, 121, 83, 189, 163, 168, 217, 61, 192, 124, 245, 61, 87, 233, 166, 189, 133, 164, 68, 189, 0, 135, 115, 62, 103, 73, 131, 62, 212, 144, 239, 189, 40, 4, 198, 189, 237, 217, 192, 61, 72, 171, 165, 61, 240, 123, 220, 60, 126, 23, 199, 60, 85, 208, 31, 62, 214, 251, 140, 188, 120, 18, 200, 189, 159, 103, 96, 62, 150, 83, 65, 191, 200, 70, 145, 187, 89, 170, 156, 61, 140, 80, 217, 189, 236, 170, 41, 190, 196, 29, 29, 190, 147, 108, 84, 62, 95, 99, 79, 62, 54, 113, 0, 62, 200, 85, 98, 62, 112, 77, 97, 190, 34, 200, 28, 191, 47, 126, 84, 190, 157, 20, 89, 62, 191, 93, 192, 62, 192, 27, 4, 61, 7, 24, 166, 59, 113, 30, 81, 62, 158, 124, 137, 62, 30, 129, 119, 61, 127, 239, 106, 62, 242, 172, 157, 62, 247, 49, 118, 189, 102, 82, 192, 190, 234, 237, 121, 190, 125, 249, 114, 62, 103, 248, 200, 190, 19, 203, 167, 190, 21, 249, 168, 190, 81, 44, 162, 190, 243, 85, 8, 187, 67, 96, 247, 190, 65, 127, 111, 61, 34, 191, 125, 62, 225, 60, 147, 189, 91, 200, 134, 190, 72, 106, 248, 61, 18, 22, 19, 62, 74, 75, 10, 62, 214, 11, 98, 61, 198, 183, 85, 62, 5, 173, 119, 62, 198, 179, 185, 190, 233, 163, 139, 62, 158, 130, 97, 62, 249, 61, 62, 62, 30, 217, 186, 190, 135, 67, 25, 190, 230, 103, 198, 61, 94, 138, 243, 62, 223, 185, 8, 189, 239, 205, 51, 62, 70, 211, 104, 62, 121, 204, 222, 61, 129, 179, 176, 189, 201, 126, 132, 60, 14, 92, 132, 190, 68, 6, 24, 62, 15, 182, 181, 190, 134, 143, 125, 61, 145, 97, 186, 61, 199, 162, 137, 190, 230, 192, 35, 61, 192, 46, 219, 190, 77, 216, 35, 62, 153, 13, 188, 188, 10, 197, 149, 60, 131, 244, 41, 190, 4, 129, 223, 61, 40, 48, 105, 62, 7, 207, 70, 60, 150, 2, 129, 61, 80, 94, 89, 62, 28, 214, 184, 61, 124, 225, 99, 60, 235, 78, 217, 62, 142, 220, 77, 62, 155, 94, 22, 62, 214, 238, 177, 189, 95, 226, 22, 189, 237, 207, 151, 61, 91, 241, 88, 61, 6, 193, 20, 62, 40, 218, 21, 189, 90, 33, 192, 189, 219, 104, 26, 190, 2, 75, 18, 189, 95, 169, 49, 189, 28, 234, 158, 189, 226, 106, 17, 190, 121, 56, 206, 189, 153, 8, 157, 61, 254, 85, 142, 188, 90, 122, 116, 61, 153, 255, 239, 61, 62, 1, 191, 189, 213, 196, 111, 61, 168, 92, 231, 189, 173, 204, 108, 189, 117, 191, 46, 190, 225, 123, 44, 189, 202, 108, 193, 189, 229, 81, 178, 61, 198, 199, 56, 188, 18, 55, 58, 190, 140, 3, 185, 189, 162, 191, 92, 61, 234, 137, 252, 188, 170, 197, 2, 190, 83, 235, 12, 62, 34, 187, 9, 190, 22, 62, 213, 61, 117, 195, 12, 62, 234, 27, 238, 189, 177, 73, 178, 60, 11, 219, 92, 189, 242, 158, 173, 189, 20, 101, 243, 186, 204, 172, 192, 61, 212, 190, 226, 61, 244, 66, 147, 61, 141, 26, 147, 189, 209, 236, 201, 61, 50, 125, 33, 61, 55, 147, 43, 190, 87, 93, 46, 190, 52, 187, 13, 190, 46, 96, 193, 61, 137, 17, 37, 190, 181, 207, 126, 59, 50, 28, 12, 62, 75, 217, 224, 189, 96, 92, 249, 189, 241, 204, 20, 190, 170, 206, 69, 61, 26, 27, 111, 61, 0, 154, 86, 188, 39, 123, 190, 189, 92, 121, 136, 61, 207, 136, 68, 189, 166, 190, 228, 189, 119, 197, 192, 189, 152, 109, 252, 188, 128, 30, 155, 188, 139, 104, 254, 61, 204, 171, 40, 62, 136, 176, 160, 188, 174, 97, 195, 57, 163, 110, 249, 189, 153, 181, 41, 62, 81, 198, 190, 189, 94, 215, 111, 188, 1, 195, 140, 190, 24, 154, 170, 189, 62, 136, 139, 190, 172, 106, 133, 190, 113, 161, 74, 190, 206, 218, 68, 189, 221, 47, 119, 62, 21, 203, 99, 190, 236, 39, 161, 62, 255, 25, 99, 61, 66, 128, 23, 190, 237, 223, 178, 61, 173, 229, 133, 61, 13, 95, 171, 62, 125, 106, 54, 62, 173, 15, 221, 61, 233, 209, 237, 61, 95, 195, 241, 60, 87, 167, 59, 188, 94, 203, 205, 61, 73, 18, 111, 62, 33, 121, 104, 62, 124, 255, 212, 190, 60, 247, 203, 190, 34, 177, 16, 189, 10, 108, 236, 60, 254, 159, 21, 62, 153, 84, 17, 190, 33, 118, 228, 189, 99, 254, 131, 62, 167, 216, 97, 62, 134, 79, 67, 190, 11, 113, 130, 190, 31, 112, 26, 188, 43, 95, 157, 190, 87, 148, 0, 191, 29, 66, 31, 190, 17, 204, 154, 189, 136, 86, 254, 190, 51, 251, 32, 190, 125, 163, 0, 189, 128, 168, 162, 190, 102, 59, 184, 61, 238, 148, 10, 62, 210, 79, 29, 190, 95, 37, 135, 190, 33, 234, 21, 189, 236, 231, 150, 189, 10, 100, 207, 189, 81, 235, 172, 60, 125, 44, 168, 190, 37, 147, 164, 62, 109, 153, 240, 61, 220, 49, 207, 190, 100, 120, 4, 190, 129, 243, 67, 61, 254, 65, 72, 190, 67, 13, 79, 61, 13, 118, 182, 190, 13, 174, 87, 187, 15, 80, 253, 61, 9, 2, 153, 62, 206, 71, 172, 62, 210, 5, 26, 191, 189, 245, 95, 190, 54, 142, 156, 62, 227, 140, 237, 190, 179, 84, 141, 191, 178, 218, 0, 191, 233, 52, 148, 190, 145, 212, 53, 62, 28, 104, 30, 191, 129, 8, 197, 188, 88, 95, 153, 61, 147, 145, 103, 61, 12, 186, 137, 190, 61, 113, 46, 62, 50, 43, 121, 62, 91, 75, 157, 189, 24, 217, 173, 61, 92, 68, 190, 61, 34, 239, 62, 186, 109, 155, 194, 190, 243, 230, 179, 61, 249, 179, 223, 188, 117, 54, 242, 189, 10, 153, 157, 190, 136, 214, 37, 190, 65, 113, 10, 62, 253, 191, 221, 62, 116, 132, 68, 190, 72, 77, 154, 187, 45, 191, 144, 61, 189, 173, 83, 62, 219, 227, 226, 61, 12, 226, 228, 190, 190, 144, 34, 188, 151, 231, 213, 61, 3, 4, 200, 190, 14, 144, 5, 191, 196, 244, 171, 190, 144, 93, 157, 190, 159, 227, 179, 61, 129, 198, 90, 191, 136, 225, 234, 60, 31, 104, 30, 62, 160, 235, 134, 188, 225, 220, 11, 191, 204, 233, 90, 62, 93, 246, 102, 62, 94, 252, 35, 62, 43, 197, 9, 62, 198, 204, 82, 189, 195, 241, 21, 190, 43, 73, 40, 190, 183, 119, 88, 61, 249, 142, 226, 190, 107, 217, 67, 62, 242, 65, 16, 191, 143, 193, 27, 62, 184, 51, 16, 61, 67, 207, 64, 190, 118, 123, 41, 190, 162, 13, 113, 187, 125, 70, 61, 190, 23, 179, 173, 62, 2, 51, 231, 61, 81, 80, 154, 59, 156, 42, 18, 190, 143, 198, 198, 61, 158, 5, 143, 190, 54, 215, 75, 61, 2, 174, 63, 62, 101, 34, 118, 189, 51, 140, 176, 61, 74, 127, 179, 188, 225, 169, 83, 190, 98, 22, 226, 189, 164, 73, 70, 62, 154, 217, 244, 61, 207, 6, 75, 59, 147, 213, 52, 61, 172, 67, 75, 62, 229, 124, 23, 62, 40, 58, 53, 62, 20, 184, 56, 62, 203, 33, 81, 61, 4, 34, 96, 190, 49, 120, 217, 189, 28, 116, 49, 190, 63, 140, 64, 190, 210, 96, 57, 61, 28, 86, 114, 61, 111, 64, 29, 62, 228, 249, 137, 61, 46, 111, 138, 61, 207, 250, 48, 189, 150, 159, 129, 190, 29, 22, 92, 62, 250, 70, 66, 62, 143, 8, 145, 61, 54, 97, 255, 61, 10, 141, 17, 62, 102, 3, 98, 190, 4, 240, 22, 190, 234, 159, 92, 190, 183, 253, 192, 61, 188, 72, 148, 61, 168, 126, 181, 62, 205, 104, 14, 60, 125, 75, 222, 61, 173, 253, 29, 62, 82, 33, 128, 189, 190, 176, 236, 62, 54, 214, 2, 190, 18, 169, 5, 62, 252, 51, 118, 190, 54, 204, 170, 60, 93, 225, 211, 61, 186, 51, 237, 62, 64, 187, 30, 62, 252, 15, 1, 60, 249, 31, 140, 61, 36, 162, 225, 188, 149, 214, 79, 62, 210, 39, 27, 61, 225, 76, 111, 62, 186, 55, 121, 189, 209, 229, 10, 191, 96, 16, 93, 62, 117, 16, 214, 189, 97, 179, 202, 189, 126, 188, 40, 190, 201, 231, 41, 190, 255, 104, 26, 57, 94, 166, 40, 62, 219, 247, 77, 62, 249, 33, 53, 62, 239, 170, 65, 190, 155, 6, 19, 62, 151, 47, 185, 189, 233, 53, 170, 189, 248, 215, 115, 61, 184, 29, 199, 61, 54, 205, 18, 62, 100, 118, 176, 62, 207, 119, 143, 190, 40, 168, 9, 191, 51, 18, 34, 62, 162, 175, 157, 62, 168, 18, 27, 191, 3, 234, 183, 189, 120, 237, 101, 62, 10, 7, 107, 61, 142, 13, 105, 188, 32, 40, 134, 187, 223, 65, 160, 59, 51, 172, 59, 62, 223, 35, 30, 62, 151, 178, 26, 190, 151, 32, 25, 189, 19, 59, 35, 189, 51, 247, 113, 189, 50, 5, 204, 188, 16, 168, 108, 61, 0, 198, 231, 61, 107, 27, 180, 189, 183, 149, 36, 190, 88, 7, 34, 190, 79, 78, 46, 190, 184, 228, 12, 62, 210, 186, 66, 189, 24, 118, 237, 189, 133, 70, 20, 62, 8, 185, 182, 61, 3, 126, 2, 190, 185, 152, 60, 190, 157, 195, 215, 189, 167, 85, 173, 189, 156, 193, 22, 188, 99, 231, 94, 189, 138, 146, 147, 186, 12, 255, 50, 189, 181, 162, 88, 189, 207, 127, 116, 189, 65, 96, 76, 60, 181, 110, 46, 189, 61, 22, 34, 190, 126, 141, 11, 61, 251, 55, 51, 62, 198, 100, 54, 61, 140, 231, 252, 61, 77, 139, 227, 189, 22, 152, 42, 62, 204, 117, 165, 189, 21, 224, 205, 189, 108, 108, 61, 191, 189, 209, 151, 190, 123, 211, 196, 190, 232, 54, 18, 62, 131, 25, 85, 62, 190, 95, 204, 190, 41, 54, 186, 189, 87, 222, 174, 190, 141, 151, 205, 61, 119, 113, 13, 62, 212, 155, 87, 189, 212, 205, 150, 188, 232, 94, 28, 62, 127, 169, 223, 62, 82, 232, 177, 60, 254, 233, 150, 190, 245, 197, 153, 187, 18, 53, 64, 190, 128, 157, 130, 188, 56, 85, 7, 62, 106, 156, 210, 61, 58, 166, 51, 60, 167, 70, 230, 190, 51, 240, 15, 191, 9, 83, 35, 62, 159, 38, 22, 190, 157, 239, 75, 62, 55, 6, 115, 188, 75, 73, 70, 189, 137, 73, 1, 190, 39, 37, 173, 61, 215, 90, 112, 61, 24, 229, 55, 190, 193, 155, 202, 61, 10, 71, 139, 60, 207, 7, 153, 189, 73, 149, 139, 189, 207, 0, 124, 189, 178, 190, 219, 187, 216, 88, 202, 61, 141, 170, 247, 61, 230, 32, 194, 189, 145, 130, 198, 188, 236, 125, 11, 189, 43, 57, 61, 190, 73, 15, 23, 190, 73, 102, 234, 189, 232, 68, 167, 60, 235, 123, 220, 61, 117, 232, 26, 189, 37, 10, 234, 61, 202, 196, 152, 189, 152, 165, 231, 189, 42, 83, 78, 189, 133, 193, 23, 62, 71, 126, 136, 60, 81, 166, 61, 189, 113, 223, 151, 188, 59, 30, 57, 61, 202, 200, 69, 189, 121, 144, 138, 190, 41, 16, 111, 62, 133, 235, 67, 61, 110, 215, 201, 61, 148, 209, 250, 61, 82, 205, 34, 190, 90, 131, 96, 190, 60, 163, 179, 61, 184, 95, 80, 62, 167, 200, 188, 61, 118, 218, 244, 189, 105, 145, 11, 62, 126, 132, 175, 190, 217, 146, 42, 61, 162, 74, 149, 189, 150, 221, 82, 62, 7, 51, 46, 61, 34, 255, 196, 59, 62, 85, 220, 59, 227, 78, 64, 189, 90, 138, 114, 62, 161, 148, 129, 62, 227, 186, 201, 187, 55, 121, 232, 189, 38, 183, 196, 187, 178, 205, 25, 190, 150, 112, 194, 188, 249, 252, 17, 62, 35, 106, 219, 189, 247, 141, 20, 62, 165, 88, 45, 190, 12, 132, 158, 189, 27, 98, 36, 190, 187, 197, 74, 190, 199, 242, 68, 190, 248, 133, 8, 62, 205, 189, 139, 62, 139, 201, 69, 190, 184, 163, 75, 62, 217, 166, 16, 62, 56, 79, 157, 62, 200, 82, 178, 62, 120, 84, 186, 190, 64, 51, 80, 62, 105, 59, 136, 190, 193, 36, 216, 189, 23, 200, 8, 190, 121, 174, 96, 190, 248, 124, 81, 62, 161, 44, 31, 190, 90, 66, 147, 189, 141, 70, 100, 189, 2, 48, 204, 61, 206, 205, 49, 61, 236, 119, 41, 62, 19, 165, 49, 191, 164, 68, 205, 190, 252, 86, 221, 60, 221, 69, 110, 62, 236, 61, 90, 61, 79, 73, 133, 190, 173, 147, 38, 190, 97, 161, 52, 60, 199, 148, 181, 60, 169, 78, 151, 191, 130, 244, 7, 190, 215, 56, 245, 62, 68, 22, 177, 61, 96, 94, 221, 61, 195, 242, 16, 191, 38, 40, 19, 62, 49, 106, 54, 62, 164, 188, 14, 189, 2, 41, 21, 62, 232, 76, 162, 191, 245, 67, 183, 61, 32, 116, 186, 189, 15, 25, 33, 188, 1, 209, 197, 61, 231, 35, 95, 189, 12, 247, 61, 62, 179, 166, 50, 190, 83, 34, 144, 61, 169, 133, 126, 190, 208, 155, 238, 189, 68, 128, 226, 61, 10, 66, 128, 62, 251, 38, 204, 190, 237, 42, 111, 190, 69, 230, 220, 60, 19, 105, 102, 62, 65, 122, 168, 62, 196, 145, 169, 189, 222, 223, 21, 190, 194, 183, 25, 189, 20, 42, 212, 189, 105, 106, 235, 188, 124, 87, 151, 62, 217, 207, 158, 190, 85, 73, 17, 187, 204, 237, 155, 189, 96, 220, 93, 62, 117, 254, 248, 190, 25, 116, 169, 190, 234, 170, 219, 60, 72, 84, 214, 189, 220, 201, 111, 62, 127, 124, 198, 190, 139, 58, 108, 62, 142, 180, 76, 188, 17, 17, 13, 62, 11, 109, 133, 188, 226, 130, 214, 189, 66, 99, 111, 62, 224, 231, 62, 60, 206, 187, 83, 62, 184, 197, 212, 61, 91, 113, 142, 189, 60, 66, 12, 187, 93, 176, 195, 62, 188, 80, 72, 188, 101, 166, 84, 62, 46, 94, 156, 190, 147, 190, 101, 190, 88, 21, 164, 189, 235, 6, 238, 61, 19, 58, 160, 62, 252, 109, 52, 61, 21, 34, 123, 62, 88, 241, 29, 62, 149, 71, 84, 190, 114, 160, 95, 190, 8, 124, 154, 190, 132, 133, 11, 62, 159, 199, 174, 190, 88, 163, 128, 190, 232, 127, 51, 189, 9, 2, 41, 190, 22, 46, 130, 62, 13, 200, 251, 190, 56, 29, 189, 62, 224, 146, 80, 62, 110, 225, 211, 61, 127, 189, 51, 61, 140, 77, 136, 189, 47, 131, 106, 62, 84, 189, 32, 189, 87, 201, 74, 62, 228, 75, 200, 60, 197, 180, 119, 62, 183, 190, 145, 189, 65, 180, 132, 62, 172, 35, 169, 60, 19, 127, 140, 61, 41, 60, 12, 190, 100, 223, 131, 190, 206, 174, 5, 61, 165, 99, 84, 61, 164, 63, 171, 62, 217, 193, 169, 189, 48, 100, 37, 62, 65, 186, 214, 62, 60, 173, 223, 189, 252, 175, 167, 190, 62, 231, 143, 190, 38, 89, 66, 62, 60, 71, 26, 191, 177, 206, 68, 190, 115, 7, 177, 189, 66, 10, 88, 190, 205, 170, 82, 62, 151, 55, 3, 191, 50, 31, 190, 62, 234, 216, 95, 61, 180, 121, 234, 189, 140, 234, 35, 61, 112, 60, 82, 61, 55, 238, 98, 62, 22, 165, 215, 61, 161, 24, 86, 60, 22, 77, 167, 62, 213, 169, 58, 62, 30, 198, 123, 190, 83, 165, 222, 62, 29, 184, 67, 61, 217, 86, 16, 61, 252, 250, 219, 190, 247, 206, 56, 188, 182, 160, 241, 61, 64, 64, 142, 62, 237, 14, 155, 62, 36, 169, 254, 61, 195, 21, 34, 191, 82, 149, 124, 190, 42, 141, 223, 62, 149, 218, 127, 62, 29, 35, 137, 189, 251, 122, 9, 191, 230, 216, 255, 61, 137, 156, 217, 62, 217, 90, 158, 62, 105, 0, 115, 61, 35, 199, 64, 191, 119, 109, 175, 62, 26, 103, 82, 190, 33, 129, 192, 190, 139, 151, 254, 60, 102, 128, 80, 62, 140, 177, 51, 62, 239, 165, 35, 190, 48, 85, 40, 189, 164, 99, 218, 190, 246, 109, 15, 190, 73, 233, 159, 189, 217, 143, 45, 61, 26, 202, 246, 190, 114, 171, 57, 190, 89, 57, 92, 190, 220, 186, 182, 189, 71, 203, 249, 61, 204, 71, 181, 190, 192, 82, 64, 190, 100, 201, 82, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 130, 37, 61, 17, 108, 105, 189, 28, 187, 71, 62, 199, 0, 28, 62, 74, 222, 44, 62, 6, 99, 19, 190, 97, 51, 46, 189, 234, 153, 129, 61, 129, 33, 184, 188, 166, 86, 36, 190, 152, 232, 144, 61, 140, 85, 41, 62, 107, 118, 62, 60, 245, 21, 32, 189, 42, 178, 52, 190, 221, 129, 102, 190, 11, 41, 0, 62, 0, 15, 49, 62, 175, 184, 181, 61, 241, 55, 197, 62, 217, 169, 53, 190, 180, 63, 143, 62, 207, 190, 145, 189, 75, 54, 98, 60, 106, 145, 50, 190, 227, 27, 143, 62, 245, 127, 82, 62, 23, 141, 224, 61, 84, 208, 40, 62, 251, 55, 249, 61, 130, 98, 62, 189, 47, 184, 234, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 151, 211, 62, 140, 67, 220, 189, 235, 49, 220, 188, 162, 220, 186, 62, 242, 159, 171, 190, 202, 214, 195, 189, 206, 49, 91, 63, 159, 146, 81, 191, 79, 63, 0, 62, 148, 153, 203, 189, 135, 85, 189, 190, 99, 128, 30, 63, 81, 7, 33, 62, 110, 131, 32, 190, 158, 156, 32, 190, 209, 218, 33, 62, 33, 90, 246, 190, 239, 195, 76, 63, 246, 77, 13, 63, 137, 245, 220, 189, 34, 10, 156, 61, 28, 243, 179, 60, 199, 75, 9, 190, 41, 130, 136, 62, 148, 49, 181, 61, 91, 26, 188, 189, 184, 196, 221, 190, 55, 23, 51, 191, 211, 248, 161, 62, 42, 231, 152, 62, 30, 215, 250, 62, 209, 143, 46, 191, 239, 33, 32, 61, 54, 101, 159, 189, 121, 119, 43, 190, 1, 160, 160, 190, 183, 246, 82, 190, 34, 130, 173, 187, 162, 75, 179, 62, 235, 27, 217, 62, 40, 227, 44, 190, 21, 91, 161, 59, 55, 40, 85, 190, 89, 202, 153, 62, 187, 87, 174, 61, 144, 214, 46, 61, 209, 249, 30, 189, 183, 132, 154, 62, 58, 61, 215, 62, 208, 233, 94, 62, 122, 249, 39, 190, 22, 234, 155, 190, 215, 113, 148, 62, 148, 6, 216, 190, 62, 226, 46, 61, 13, 46, 180, 187, 21, 129, 49, 189, 91, 220, 120, 190, 67, 89, 250, 62, 93, 173, 28, 187, 149, 202, 211, 61, 218, 26, 159, 60, 94, 158, 61, 60, 29, 174, 121, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 102, 64, 190, 1, 34, 140, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {121, 197, 150, 62, 127, 59, 112, 63, 48, 76, 174, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {141, 134, 25, 192, 54, 118, 32, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0000/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}