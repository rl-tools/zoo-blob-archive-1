// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 182, 200, 190, 181, 46, 146, 62, 175, 247, 120, 188, 195, 96, 18, 191, 152, 144, 177, 190, 46, 4, 34, 63, 44, 50, 26, 63, 25, 194, 36, 191, 234, 201, 199, 189, 141, 215, 193, 190, 89, 40, 177, 191, 13, 140, 245, 189, 69, 221, 74, 190, 230, 126, 65, 191, 234, 175, 53, 191, 201, 239, 136, 62, 153, 208, 207, 62, 167, 195, 27, 63, 85, 2, 78, 62, 62, 32, 130, 190, 195, 76, 254, 62, 163, 6, 38, 63, 234, 85, 72, 63, 27, 160, 129, 62, 165, 182, 203, 190, 233, 86, 66, 62, 98, 74, 47, 191, 224, 92, 51, 62, 229, 199, 114, 63, 99, 73, 221, 190, 133, 90, 59, 63, 175, 216, 128, 63, 207, 194, 139, 62, 168, 131, 31, 191, 146, 250, 178, 63, 216, 250, 174, 62, 169, 232, 197, 62, 44, 188, 27, 63, 51, 116, 130, 61, 229, 26, 52, 63, 38, 37, 31, 191, 198, 231, 157, 190, 77, 150, 80, 62, 27, 102, 43, 63, 77, 140, 14, 191, 52, 180, 135, 190, 137, 173, 26, 60, 145, 201, 121, 59, 160, 169, 173, 62, 176, 67, 126, 191, 236, 189, 222, 190, 156, 63, 41, 191, 10, 167, 174, 62, 177, 91, 59, 190, 148, 127, 59, 63, 235, 99, 74, 189, 186, 24, 0, 190, 171, 154, 244, 190, 103, 216, 31, 63, 24, 239, 51, 61, 252, 120, 232, 190, 108, 252, 13, 62, 85, 207, 163, 62, 158, 149, 164, 62, 175, 19, 253, 62, 201, 68, 85, 60, 242, 60, 11, 63, 83, 244, 250, 190, 68, 248, 37, 61, 233, 148, 168, 62, 66, 67, 31, 63, 2, 211, 207, 62, 213, 136, 12, 63, 184, 101, 105, 191, 186, 205, 94, 190, 48, 171, 190, 62, 42, 74, 80, 191, 150, 114, 186, 190, 43, 77, 166, 189, 157, 128, 117, 62, 0, 134, 22, 191, 244, 243, 245, 62, 223, 32, 80, 63, 24, 93, 70, 62, 193, 223, 129, 62, 230, 121, 4, 191, 173, 129, 3, 63, 137, 38, 60, 190, 149, 192, 129, 61, 247, 240, 219, 190, 107, 35, 170, 190, 22, 150, 7, 191, 218, 168, 130, 56, 55, 8, 16, 63, 124, 75, 211, 62, 34, 115, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 120, 27, 191, 161, 199, 20, 190, 178, 9, 163, 62, 169, 25, 221, 62, 142, 172, 182, 190, 129, 16, 115, 61, 215, 248, 162, 62, 213, 79, 175, 190, 42, 35, 254, 190, 26, 14, 52, 62, 32, 6, 17, 190, 18, 211, 149, 186, 175, 244, 14, 190, 60, 61, 66, 191, 194, 154, 2, 62, 164, 194, 182, 62, 218, 2, 82, 62, 72, 36, 134, 62, 217, 230, 113, 190, 12, 173, 5, 63, 100, 149, 144, 62, 33, 5, 38, 63, 122, 47, 41, 63, 176, 250, 231, 190, 31, 120, 40, 190, 96, 224, 205, 189, 229, 7, 201, 190, 96, 224, 214, 189, 36, 94, 140, 62, 72, 38, 241, 190, 52, 144, 32, 191, 56, 78, 60, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 32, 81, 189, 36, 179, 135, 62, 167, 30, 104, 62, 170, 136, 38, 61, 16, 85, 224, 189, 140, 202, 103, 190, 141, 107, 231, 61, 107, 219, 213, 190, 57, 2, 31, 191, 67, 69, 152, 190, 53, 125, 115, 188, 145, 218, 174, 62, 134, 17, 130, 190, 189, 73, 33, 62, 71, 156, 61, 189, 54, 228, 134, 62, 120, 110, 148, 189, 199, 126, 103, 189, 68, 174, 101, 62, 53, 69, 7, 62, 197, 51, 97, 62, 234, 15, 23, 62, 3, 212, 83, 62, 168, 118, 169, 190, 65, 167, 32, 62, 179, 217, 141, 61, 159, 22, 174, 58, 31, 175, 161, 190, 89, 50, 71, 190, 70, 18, 229, 61, 122, 227, 205, 62, 119, 202, 173, 190, 74, 74, 32, 189, 198, 133, 9, 190, 244, 18, 96, 190, 100, 115, 100, 61, 207, 193, 207, 189, 176, 179, 13, 190, 147, 81, 213, 61, 236, 66, 55, 189, 160, 87, 22, 190, 233, 98, 248, 61, 236, 0, 41, 190, 79, 65, 6, 190, 164, 164, 31, 190, 181, 249, 183, 189, 118, 194, 234, 189, 248, 206, 71, 190, 83, 136, 188, 60, 142, 211, 161, 189, 226, 255, 119, 189, 89, 84, 15, 189, 67, 203, 134, 61, 89, 124, 11, 62, 192, 87, 89, 188, 112, 198, 235, 189, 36, 193, 249, 59, 27, 67, 147, 61, 216, 85, 222, 189, 225, 60, 225, 61, 21, 88, 59, 189, 54, 244, 168, 188, 180, 34, 176, 188, 168, 230, 207, 61, 31, 255, 252, 188, 77, 27, 207, 61, 176, 166, 155, 62, 118, 106, 173, 188, 47, 237, 89, 61, 122, 155, 135, 59, 216, 50, 227, 60, 130, 52, 214, 189, 201, 225, 220, 61, 3, 124, 37, 62, 230, 81, 33, 190, 230, 16, 40, 189, 212, 241, 108, 190, 250, 106, 164, 190, 79, 157, 225, 189, 144, 98, 125, 187, 157, 17, 6, 62, 168, 238, 32, 189, 47, 244, 236, 61, 198, 224, 103, 61, 78, 54, 137, 61, 230, 236, 81, 62, 142, 250, 4, 62, 23, 94, 220, 60, 213, 246, 159, 190, 180, 44, 194, 61, 240, 3, 189, 189, 120, 19, 77, 190, 145, 62, 11, 190, 132, 139, 63, 60, 133, 11, 200, 60, 248, 18, 252, 60, 100, 7, 246, 189, 228, 20, 134, 62, 249, 132, 187, 62, 221, 188, 86, 62, 228, 139, 131, 190, 91, 142, 118, 190, 8, 106, 198, 61, 217, 107, 91, 190, 64, 230, 249, 190, 208, 126, 251, 188, 59, 25, 107, 190, 185, 109, 223, 189, 55, 31, 33, 190, 44, 144, 104, 190, 165, 216, 42, 62, 137, 128, 2, 62, 114, 199, 203, 189, 12, 151, 114, 190, 216, 57, 212, 62, 150, 180, 143, 190, 199, 14, 59, 61, 76, 213, 92, 62, 88, 28, 26, 189, 72, 108, 179, 190, 224, 71, 124, 62, 243, 185, 16, 62, 35, 76, 170, 189, 234, 68, 143, 190, 251, 190, 47, 188, 115, 80, 178, 189, 50, 240, 229, 61, 205, 126, 115, 62, 252, 20, 217, 61, 121, 153, 66, 190, 196, 235, 214, 60, 125, 117, 182, 62, 1, 88, 26, 62, 69, 210, 142, 62, 78, 164, 74, 61, 119, 168, 119, 61, 194, 201, 44, 61, 230, 129, 43, 62, 229, 3, 245, 62, 47, 21, 235, 190, 166, 124, 26, 189, 165, 237, 163, 61, 11, 154, 147, 190, 203, 19, 201, 61, 78, 25, 54, 62, 248, 56, 109, 189, 148, 41, 42, 61, 93, 175, 189, 190, 133, 79, 216, 189, 149, 253, 220, 60, 208, 50, 154, 62, 167, 188, 53, 62, 240, 188, 151, 189, 30, 139, 38, 190, 217, 222, 27, 190, 218, 118, 97, 62, 231, 12, 207, 62, 194, 38, 158, 61, 232, 233, 60, 190, 106, 59, 144, 59, 104, 78, 122, 189, 213, 157, 56, 190, 57, 84, 32, 190, 88, 73, 25, 188, 171, 125, 117, 60, 14, 29, 173, 61, 5, 199, 36, 61, 150, 89, 165, 61, 137, 212, 234, 187, 122, 13, 199, 188, 119, 12, 43, 190, 119, 118, 105, 60, 88, 49, 3, 190, 41, 241, 207, 189, 35, 226, 56, 60, 16, 208, 59, 190, 106, 126, 40, 61, 213, 89, 81, 189, 145, 248, 167, 187, 10, 33, 225, 59, 203, 30, 196, 189, 126, 214, 125, 61, 184, 58, 45, 190, 148, 249, 16, 190, 218, 169, 95, 189, 219, 160, 165, 61, 124, 136, 110, 61, 178, 0, 41, 60, 255, 61, 145, 61, 36, 215, 225, 189, 240, 139, 46, 190, 208, 114, 6, 189, 246, 146, 190, 59, 199, 214, 7, 190, 182, 120, 25, 190, 104, 15, 36, 62, 67, 245, 195, 190, 146, 21, 96, 191, 89, 42, 184, 190, 243, 58, 23, 191, 0, 207, 214, 190, 250, 186, 208, 190, 147, 105, 107, 191, 33, 44, 112, 189, 50, 137, 50, 191, 157, 144, 254, 61, 187, 26, 33, 61, 22, 198, 113, 61, 201, 206, 206, 190, 221, 104, 133, 62, 201, 244, 8, 62, 21, 223, 45, 62, 248, 14, 7, 62, 247, 156, 200, 61, 76, 120, 193, 190, 25, 99, 126, 190, 160, 205, 212, 61, 253, 50, 254, 189, 64, 134, 243, 59, 122, 34, 45, 61, 74, 68, 162, 191, 227, 90, 159, 61, 85, 190, 47, 62, 187, 232, 87, 190, 176, 173, 241, 61, 253, 195, 60, 191, 194, 64, 108, 190, 117, 60, 182, 190, 251, 65, 5, 62, 230, 185, 131, 188, 144, 22, 233, 190, 200, 115, 118, 62, 237, 190, 119, 62, 188, 208, 18, 63, 126, 17, 82, 62, 253, 171, 235, 190, 58, 172, 0, 63, 65, 236, 93, 191, 245, 172, 163, 190, 222, 241, 18, 62, 134, 207, 158, 61, 102, 84, 216, 61, 216, 161, 150, 60, 3, 186, 164, 62, 168, 87, 20, 62, 240, 44, 64, 62, 208, 204, 244, 189, 103, 187, 117, 190, 15, 164, 157, 191, 24, 142, 12, 191, 53, 74, 155, 190, 142, 106, 145, 61, 84, 247, 152, 189, 51, 88, 169, 189, 26, 40, 166, 190, 22, 182, 211, 188, 48, 185, 50, 190, 231, 145, 245, 60, 154, 19, 214, 59, 48, 209, 28, 190, 199, 1, 127, 60, 156, 175, 31, 189, 152, 195, 205, 189, 109, 108, 37, 189, 5, 183, 55, 61, 117, 85, 102, 61, 82, 144, 151, 61, 63, 243, 95, 60, 122, 22, 159, 189, 98, 194, 228, 61, 158, 126, 57, 189, 129, 192, 134, 61, 206, 115, 137, 189, 154, 162, 49, 190, 210, 112, 15, 190, 225, 211, 242, 59, 58, 194, 199, 61, 220, 62, 202, 189, 155, 1, 33, 190, 96, 114, 27, 190, 234, 252, 245, 189, 177, 5, 162, 61, 193, 248, 146, 189, 1, 179, 34, 190, 59, 146, 0, 188, 15, 37, 120, 188, 62, 146, 231, 59, 150, 251, 154, 188, 195, 127, 63, 189, 147, 232, 207, 61, 23, 3, 159, 60, 199, 144, 208, 188, 35, 112, 43, 61, 25, 124, 116, 189, 38, 172, 63, 190, 61, 69, 48, 62, 94, 48, 230, 59, 77, 226, 48, 190, 155, 244, 0, 62, 190, 168, 42, 190, 130, 150, 12, 189, 141, 66, 195, 188, 46, 17, 77, 60, 72, 216, 111, 61, 74, 137, 24, 61, 26, 211, 87, 188, 169, 64, 26, 190, 162, 179, 15, 190, 51, 189, 255, 61, 238, 217, 244, 189, 245, 175, 173, 189, 120, 69, 37, 61, 223, 157, 146, 58, 132, 99, 32, 190, 192, 226, 184, 59, 57, 96, 36, 62, 72, 121, 83, 189, 163, 168, 217, 61, 192, 124, 245, 61, 87, 233, 166, 189, 133, 164, 68, 189, 129, 100, 79, 62, 5, 172, 132, 62, 38, 220, 130, 188, 203, 199, 22, 190, 132, 72, 246, 60, 117, 253, 198, 61, 5, 123, 132, 188, 100, 165, 47, 60, 214, 74, 40, 62, 16, 227, 112, 189, 231, 88, 138, 190, 169, 80, 29, 62, 25, 246, 130, 191, 17, 231, 187, 59, 163, 176, 158, 61, 157, 133, 12, 190, 166, 52, 10, 190, 13, 249, 27, 190, 102, 186, 13, 62, 218, 84, 22, 62, 84, 78, 5, 62, 31, 78, 119, 62, 142, 94, 144, 190, 215, 193, 50, 191, 163, 131, 126, 190, 217, 8, 86, 62, 13, 51, 159, 62, 16, 198, 81, 61, 117, 23, 199, 187, 113, 30, 81, 62, 193, 243, 150, 62, 30, 129, 119, 61, 166, 86, 102, 62, 241, 218, 171, 62, 232, 48, 68, 60, 216, 217, 181, 190, 131, 15, 122, 190, 172, 131, 107, 62, 171, 211, 209, 190, 105, 163, 205, 190, 139, 212, 145, 190, 52, 144, 160, 190, 119, 97, 134, 190, 238, 7, 216, 190, 35, 0, 33, 62, 163, 131, 140, 62, 172, 1, 164, 189, 14, 81, 116, 190, 35, 197, 6, 189, 199, 153, 31, 62, 62, 87, 47, 60, 165, 9, 57, 60, 220, 204, 90, 62, 49, 190, 137, 62, 84, 110, 213, 190, 87, 104, 149, 62, 234, 240, 110, 62, 55, 50, 41, 62, 248, 176, 185, 190, 70, 52, 7, 190, 210, 37, 63, 60, 94, 138, 243, 62, 169, 216, 253, 188, 239, 205, 51, 62, 192, 37, 88, 62, 160, 136, 241, 61, 146, 82, 11, 190, 243, 1, 142, 60, 207, 14, 130, 190, 97, 17, 11, 62, 236, 189, 183, 190, 81, 159, 123, 61, 98, 101, 210, 61, 13, 23, 133, 190, 137, 189, 200, 189, 230, 53, 202, 190, 240, 46, 64, 62, 87, 5, 205, 188, 169, 212, 126, 60, 251, 198, 44, 190, 150, 192, 166, 61, 215, 252, 130, 62, 146, 193, 176, 188, 112, 25, 192, 60, 216, 21, 91, 62, 165, 33, 212, 61, 237, 62, 255, 188, 58, 111, 209, 62, 69, 197, 47, 62, 89, 184, 16, 62, 34, 232, 158, 189, 152, 134, 10, 189, 59, 97, 140, 61, 91, 241, 88, 61, 148, 15, 37, 62, 40, 218, 21, 189, 90, 33, 192, 189, 219, 104, 26, 190, 2, 75, 18, 189, 95, 169, 49, 189, 28, 234, 158, 189, 226, 106, 17, 190, 121, 56, 206, 189, 153, 8, 157, 61, 254, 85, 142, 188, 90, 122, 116, 61, 153, 255, 239, 61, 62, 1, 191, 189, 213, 196, 111, 61, 168, 92, 231, 189, 173, 204, 108, 189, 117, 191, 46, 190, 225, 123, 44, 189, 202, 108, 193, 189, 229, 81, 178, 61, 198, 199, 56, 188, 18, 55, 58, 190, 140, 3, 185, 189, 162, 191, 92, 61, 234, 137, 252, 188, 170, 197, 2, 190, 83, 235, 12, 62, 34, 187, 9, 190, 22, 62, 213, 61, 117, 195, 12, 62, 234, 27, 238, 189, 177, 73, 178, 60, 11, 219, 92, 189, 242, 158, 173, 189, 20, 101, 243, 186, 204, 172, 192, 61, 212, 190, 226, 61, 244, 66, 147, 61, 141, 26, 147, 189, 209, 236, 201, 61, 50, 125, 33, 61, 55, 147, 43, 190, 87, 93, 46, 190, 52, 187, 13, 190, 46, 96, 193, 61, 137, 17, 37, 190, 181, 207, 126, 59, 50, 28, 12, 62, 75, 217, 224, 189, 96, 92, 249, 189, 241, 204, 20, 190, 170, 206, 69, 61, 26, 27, 111, 61, 0, 154, 86, 188, 39, 123, 190, 189, 92, 121, 136, 61, 207, 136, 68, 189, 166, 190, 228, 189, 119, 197, 192, 189, 152, 109, 252, 188, 128, 30, 155, 188, 139, 104, 254, 61, 204, 171, 40, 62, 136, 176, 160, 188, 174, 97, 195, 57, 46, 130, 253, 189, 156, 74, 76, 62, 153, 216, 203, 190, 188, 174, 29, 189, 99, 113, 130, 190, 82, 114, 179, 61, 147, 223, 228, 190, 189, 238, 134, 190, 121, 142, 56, 190, 148, 53, 23, 190, 49, 7, 58, 62, 241, 79, 178, 190, 74, 7, 213, 62, 203, 187, 130, 61, 103, 176, 110, 190, 217, 7, 155, 61, 70, 217, 206, 60, 148, 230, 6, 63, 145, 94, 166, 61, 180, 208, 176, 61, 207, 29, 23, 62, 94, 254, 150, 61, 202, 25, 19, 188, 205, 230, 251, 61, 23, 238, 105, 62, 41, 200, 103, 62, 109, 30, 19, 191, 248, 24, 92, 190, 108, 108, 40, 189, 10, 108, 236, 60, 7, 53, 124, 62, 153, 84, 17, 190, 6, 28, 106, 188, 129, 141, 110, 62, 107, 112, 124, 62, 59, 207, 154, 190, 116, 37, 138, 190, 34, 212, 30, 60, 168, 208, 184, 190, 170, 213, 24, 191, 106, 118, 64, 190, 163, 250, 19, 190, 129, 204, 241, 190, 115, 126, 91, 190, 166, 79, 188, 189, 107, 68, 176, 190, 88, 59, 215, 61, 208, 232, 181, 61, 189, 121, 6, 189, 176, 255, 141, 190, 108, 29, 119, 61, 198, 86, 85, 61, 182, 156, 241, 189, 78, 60, 191, 59, 28, 51, 13, 191, 227, 104, 140, 62, 126, 225, 107, 61, 216, 131, 1, 191, 44, 143, 65, 190, 91, 124, 124, 61, 169, 48, 146, 190, 67, 13, 79, 61, 43, 142, 162, 190, 13, 174, 87, 187, 176, 188, 249, 61, 97, 58, 183, 62, 28, 169, 248, 62, 115, 164, 15, 191, 196, 74, 103, 190, 162, 163, 157, 62, 108, 16, 63, 191, 94, 237, 141, 191, 143, 248, 230, 190, 161, 41, 212, 190, 208, 235, 230, 61, 101, 74, 51, 191, 8, 105, 208, 189, 159, 33, 138, 61, 58, 169, 18, 62, 97, 128, 158, 190, 64, 6, 122, 62, 123, 18, 16, 62, 116, 99, 13, 189, 235, 47, 203, 61, 123, 163, 176, 61, 214, 60, 2, 61, 147, 127, 209, 190, 31, 7, 24, 62, 224, 240, 38, 188, 229, 181, 128, 190, 229, 154, 1, 191, 235, 247, 21, 190, 63, 19, 145, 61, 253, 191, 221, 62, 182, 78, 55, 190, 72, 77, 154, 187, 29, 34, 33, 61, 28, 186, 137, 62, 171, 98, 81, 61, 129, 184, 33, 191, 4, 85, 203, 59, 223, 196, 153, 61, 32, 86, 254, 190, 87, 6, 65, 191, 104, 241, 47, 191, 81, 213, 145, 190, 216, 111, 99, 62, 155, 53, 154, 190, 136, 225, 234, 60, 72, 172, 136, 190, 85, 252, 153, 61, 238, 108, 122, 191, 234, 98, 145, 62, 86, 108, 44, 62, 157, 240, 186, 62, 138, 130, 45, 62, 130, 17, 23, 62, 75, 155, 72, 190, 204, 44, 50, 190, 21, 34, 102, 62, 151, 93, 100, 191, 52, 133, 58, 189, 211, 154, 237, 190, 31, 134, 219, 61, 120, 248, 70, 189, 67, 207, 64, 190, 118, 123, 41, 190, 162, 13, 113, 187, 165, 58, 76, 190, 225, 92, 181, 62, 53, 2, 49, 62, 1, 49, 125, 188, 99, 145, 28, 190, 53, 21, 231, 61, 17, 4, 132, 190, 68, 191, 0, 61, 73, 252, 55, 62, 190, 131, 14, 189, 11, 186, 111, 61, 237, 254, 142, 188, 218, 238, 103, 190, 175, 94, 224, 189, 219, 0, 41, 62, 23, 64, 239, 61, 80, 173, 175, 187, 230, 175, 199, 60, 161, 87, 27, 62, 0, 76, 19, 62, 6, 130, 71, 62, 165, 9, 79, 62, 164, 32, 175, 61, 160, 144, 87, 190, 45, 95, 187, 189, 126, 21, 58, 190, 134, 138, 54, 190, 131, 105, 98, 61, 214, 55, 64, 61, 111, 64, 29, 62, 159, 39, 213, 61, 46, 111, 138, 61, 45, 129, 173, 188, 25, 202, 129, 190, 71, 37, 136, 62, 60, 179, 72, 62, 235, 236, 77, 61, 12, 223, 212, 61, 148, 210, 90, 61, 158, 234, 105, 190, 215, 13, 11, 190, 243, 206, 164, 190, 0, 29, 251, 61, 114, 1, 165, 60, 246, 137, 182, 62, 208, 161, 166, 60, 58, 106, 38, 62, 200, 155, 62, 62, 218, 143, 137, 189, 8, 151, 19, 63, 117, 102, 184, 189, 19, 115, 26, 62, 205, 36, 137, 190, 170, 183, 196, 60, 122, 195, 168, 61, 190, 181, 253, 62, 192, 32, 63, 62, 212, 203, 132, 59, 16, 166, 234, 187, 123, 41, 68, 189, 38, 173, 69, 62, 210, 39, 27, 61, 49, 141, 88, 62, 186, 55, 121, 189, 146, 249, 5, 191, 4, 211, 46, 62, 165, 23, 168, 189, 200, 137, 239, 189, 145, 154, 201, 190, 38, 180, 174, 190, 213, 67, 176, 189, 45, 17, 28, 62, 144, 67, 109, 62, 140, 119, 19, 62, 53, 59, 90, 190, 181, 200, 50, 62, 165, 77, 169, 189, 240, 228, 91, 189, 68, 194, 54, 61, 72, 45, 208, 61, 53, 138, 18, 62, 212, 240, 163, 62, 204, 184, 133, 190, 6, 239, 230, 190, 247, 165, 20, 62, 105, 175, 132, 62, 13, 32, 32, 191, 177, 5, 240, 189, 46, 29, 97, 62, 4, 22, 95, 61, 58, 86, 13, 189, 41, 249, 41, 190, 252, 118, 15, 188, 51, 172, 59, 62, 11, 104, 157, 62, 151, 178, 26, 190, 151, 32, 25, 189, 19, 59, 35, 189, 51, 247, 113, 189, 50, 5, 204, 188, 16, 168, 108, 61, 0, 198, 231, 61, 107, 27, 180, 189, 183, 149, 36, 190, 88, 7, 34, 190, 79, 78, 46, 190, 184, 228, 12, 62, 210, 186, 66, 189, 24, 118, 237, 189, 133, 70, 20, 62, 8, 185, 182, 61, 3, 126, 2, 190, 185, 152, 60, 190, 157, 195, 215, 189, 167, 85, 173, 189, 156, 193, 22, 188, 99, 231, 94, 189, 138, 146, 147, 186, 12, 255, 50, 189, 181, 162, 88, 189, 207, 127, 116, 189, 65, 96, 76, 60, 181, 110, 46, 189, 61, 22, 34, 190, 126, 141, 11, 61, 251, 55, 51, 62, 198, 100, 54, 61, 140, 231, 252, 61, 77, 139, 227, 189, 11, 78, 153, 61, 183, 228, 161, 190, 148, 5, 218, 189, 40, 32, 62, 191, 6, 70, 142, 190, 92, 9, 250, 190, 239, 237, 26, 62, 123, 92, 87, 62, 107, 82, 237, 190, 182, 111, 180, 190, 24, 38, 212, 190, 231, 76, 1, 62, 199, 95, 7, 62, 23, 12, 176, 189, 151, 86, 62, 189, 162, 39, 24, 62, 235, 149, 246, 62, 43, 249, 205, 188, 118, 112, 27, 191, 168, 197, 25, 189, 226, 42, 136, 190, 128, 157, 130, 188, 233, 139, 141, 61, 58, 73, 109, 61, 127, 158, 21, 60, 28, 160, 9, 191, 165, 103, 23, 191, 152, 172, 36, 62, 159, 38, 22, 190, 153, 107, 109, 62, 55, 6, 115, 188, 75, 73, 70, 189, 137, 73, 1, 190, 39, 37, 173, 61, 215, 90, 112, 61, 24, 229, 55, 190, 193, 155, 202, 61, 10, 71, 139, 60, 207, 7, 153, 189, 73, 149, 139, 189, 207, 0, 124, 189, 178, 190, 219, 187, 216, 88, 202, 61, 141, 170, 247, 61, 230, 32, 194, 189, 145, 130, 198, 188, 236, 125, 11, 189, 43, 57, 61, 190, 73, 15, 23, 190, 73, 102, 234, 189, 232, 68, 167, 60, 235, 123, 220, 61, 117, 232, 26, 189, 37, 10, 234, 61, 202, 196, 152, 189, 152, 165, 231, 189, 42, 83, 78, 189, 133, 193, 23, 62, 71, 126, 136, 60, 81, 166, 61, 189, 113, 223, 151, 188, 59, 30, 57, 61, 202, 200, 69, 189, 247, 255, 177, 190, 232, 184, 112, 62, 76, 52, 158, 61, 173, 61, 154, 61, 241, 106, 202, 61, 188, 19, 56, 190, 106, 144, 66, 190, 177, 218, 135, 61, 22, 130, 67, 62, 219, 164, 1, 62, 232, 91, 19, 189, 146, 216, 42, 62, 15, 182, 187, 190, 145, 77, 27, 61, 9, 116, 181, 189, 70, 68, 75, 62, 119, 53, 251, 60, 250, 130, 148, 188, 126, 201, 240, 60, 90, 128, 17, 189, 108, 198, 135, 62, 46, 1, 128, 62, 236, 181, 34, 61, 90, 113, 224, 189, 184, 48, 144, 59, 33, 177, 37, 190, 245, 142, 116, 60, 139, 84, 208, 61, 97, 112, 250, 189, 247, 141, 20, 62, 138, 251, 12, 190, 12, 132, 158, 189, 35, 142, 207, 189, 82, 143, 68, 190, 246, 32, 182, 190, 132, 238, 154, 61, 189, 196, 143, 62, 78, 253, 239, 189, 141, 149, 17, 62, 110, 160, 1, 62, 35, 68, 167, 62, 196, 90, 154, 62, 138, 74, 5, 191, 116, 227, 18, 62, 173, 78, 253, 190, 152, 85, 184, 189, 150, 59, 230, 189, 244, 215, 143, 190, 90, 77, 132, 62, 205, 157, 19, 190, 47, 167, 47, 189, 146, 248, 50, 188, 197, 39, 0, 62, 40, 46, 143, 61, 177, 188, 245, 61, 88, 140, 86, 191, 91, 116, 241, 190, 110, 54, 216, 60, 95, 230, 45, 62, 75, 232, 10, 62, 52, 145, 139, 190, 173, 147, 38, 190, 194, 193, 196, 60, 199, 148, 181, 60, 129, 5, 149, 191, 82, 240, 23, 190, 241, 237, 24, 63, 141, 221, 175, 61, 150, 222, 54, 62, 109, 116, 36, 191, 110, 242, 41, 62, 53, 12, 47, 62, 244, 217, 23, 189, 161, 92, 43, 62, 190, 235, 180, 191, 84, 147, 98, 62, 178, 237, 39, 190, 10, 33, 136, 187, 166, 99, 182, 61, 219, 23, 110, 189, 229, 131, 63, 62, 231, 190, 146, 190, 26, 189, 141, 61, 44, 132, 222, 189, 180, 83, 203, 189, 96, 89, 197, 61, 99, 43, 47, 63, 115, 174, 238, 190, 180, 197, 110, 190, 209, 196, 252, 60, 2, 90, 151, 62, 140, 109, 95, 62, 27, 83, 169, 189, 222, 223, 21, 190, 226, 174, 124, 189, 20, 42, 212, 189, 230, 92, 85, 188, 229, 194, 148, 62, 102, 47, 13, 191, 64, 252, 37, 61, 122, 104, 141, 188, 77, 197, 72, 62, 199, 149, 233, 190, 176, 166, 152, 190, 165, 106, 45, 61, 139, 92, 134, 189, 178, 241, 191, 62, 48, 117, 176, 190, 217, 141, 212, 62, 184, 251, 129, 186, 245, 99, 3, 62, 168, 1, 197, 186, 164, 75, 241, 189, 191, 221, 132, 62, 203, 252, 183, 61, 63, 46, 139, 62, 176, 179, 227, 61, 184, 141, 187, 189, 234, 29, 42, 61, 120, 173, 201, 62, 219, 59, 67, 186, 89, 83, 110, 62, 197, 227, 129, 190, 51, 235, 127, 190, 195, 62, 74, 189, 235, 6, 238, 61, 49, 192, 201, 62, 252, 109, 52, 61, 1, 12, 131, 62, 77, 130, 28, 62, 55, 58, 208, 190, 201, 112, 76, 190, 85, 69, 130, 190, 135, 58, 4, 62, 43, 141, 165, 190, 48, 126, 101, 190, 140, 74, 84, 188, 142, 149, 1, 190, 164, 101, 181, 62, 130, 125, 224, 190, 66, 225, 251, 62, 20, 217, 101, 62, 73, 37, 219, 61, 23, 59, 38, 61, 144, 157, 146, 189, 137, 86, 128, 62, 27, 21, 91, 61, 157, 221, 131, 62, 62, 30, 68, 61, 254, 44, 110, 62, 111, 113, 46, 189, 203, 166, 128, 62, 118, 109, 225, 59, 122, 177, 192, 61, 19, 117, 177, 189, 197, 177, 134, 190, 253, 193, 109, 61, 165, 99, 84, 61, 131, 211, 221, 62, 217, 193, 169, 189, 61, 30, 50, 62, 154, 24, 219, 62, 102, 132, 72, 190, 107, 28, 159, 190, 32, 2, 136, 190, 73, 222, 64, 62, 134, 240, 31, 191, 193, 177, 54, 190, 94, 244, 142, 189, 121, 216, 89, 190, 123, 117, 35, 61, 17, 44, 252, 190, 178, 204, 232, 62, 51, 147, 120, 61, 215, 56, 34, 190, 138, 181, 41, 61, 44, 188, 150, 187, 133, 184, 118, 62, 81, 82, 211, 187, 108, 76, 199, 59, 114, 48, 162, 62, 26, 215, 67, 62, 20, 150, 135, 190, 70, 166, 217, 62, 90, 9, 23, 61, 58, 9, 69, 61, 185, 198, 226, 190, 101, 57, 236, 59, 81, 18, 9, 62, 64, 64, 142, 62, 66, 129, 197, 62, 36, 169, 254, 61, 107, 243, 1, 191, 179, 61, 144, 190, 165, 99, 3, 63, 232, 54, 132, 62, 29, 35, 137, 189, 79, 153, 53, 191, 165, 29, 233, 61, 71, 190, 215, 62, 19, 233, 145, 62, 66, 185, 8, 61, 77, 125, 60, 191, 215, 60, 215, 62, 93, 88, 128, 190, 160, 11, 199, 190, 43, 216, 182, 60, 111, 184, 81, 62, 100, 111, 52, 62, 7, 138, 226, 190, 187, 183, 200, 189, 111, 198, 150, 190, 193, 217, 65, 190, 125, 81, 12, 190, 217, 143, 45, 61, 166, 236, 253, 190, 198, 223, 42, 190, 159, 203, 93, 190, 119, 172, 6, 190, 132, 240, 2, 189, 22, 255, 178, 190, 192, 82, 64, 190, 201, 224, 130, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 248, 109, 61, 143, 161, 168, 189, 133, 232, 49, 62, 160, 226, 33, 62, 117, 251, 31, 62, 6, 99, 19, 190, 233, 217, 94, 188, 198, 114, 249, 61, 129, 33, 184, 188, 166, 86, 36, 190, 185, 91, 160, 61, 4, 52, 56, 62, 250, 166, 140, 60, 245, 21, 32, 189, 42, 178, 52, 190, 250, 166, 137, 190, 235, 119, 239, 61, 209, 91, 113, 62, 244, 58, 52, 62, 26, 255, 199, 62, 108, 53, 35, 190, 29, 5, 137, 62, 207, 190, 145, 189, 244, 210, 82, 189, 106, 145, 50, 190, 170, 199, 146, 62, 250, 183, 109, 62, 19, 242, 250, 61, 192, 152, 33, 62, 31, 151, 5, 62, 44, 211, 101, 189, 135, 214, 196, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 3, 176, 62, 33, 198, 184, 189, 46, 253, 113, 188, 164, 125, 186, 62, 242, 250, 175, 190, 202, 214, 195, 189, 55, 167, 130, 63, 242, 2, 138, 191, 79, 63, 0, 62, 148, 153, 203, 189, 62, 202, 204, 190, 41, 48, 24, 63, 9, 19, 238, 61, 110, 131, 32, 190, 158, 156, 32, 190, 151, 190, 166, 62, 121, 164, 250, 190, 40, 49, 129, 63, 149, 131, 56, 63, 55, 156, 182, 189, 153, 247, 134, 60, 1, 118, 5, 61, 199, 75, 9, 190, 223, 202, 146, 62, 148, 49, 181, 61, 38, 63, 163, 189, 8, 213, 27, 191, 163, 248, 68, 191, 81, 9, 182, 62, 70, 217, 152, 62, 18, 234, 236, 62, 159, 211, 45, 191, 248, 112, 103, 61, 157, 233, 91, 189, 108, 180, 18, 190, 9, 7, 170, 190, 65, 158, 108, 190, 34, 130, 173, 187, 71, 202, 237, 62, 152, 38, 176, 62, 40, 227, 44, 190, 21, 91, 161, 59, 135, 121, 137, 190, 23, 110, 154, 62, 243, 55, 48, 61, 144, 214, 46, 61, 209, 249, 30, 189, 34, 146, 21, 63, 86, 223, 243, 62, 7, 36, 171, 62, 157, 218, 1, 190, 180, 225, 162, 190, 127, 218, 170, 62, 227, 255, 218, 190, 62, 226, 46, 61, 47, 73, 13, 188, 21, 129, 49, 189, 167, 172, 135, 190, 125, 255, 2, 63, 200, 137, 25, 62, 209, 150, 184, 61, 13, 214, 27, 189, 93, 225, 219, 59, 108, 253, 208, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 164, 52, 190, 196, 134, 168, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {192, 213, 228, 187, 154, 86, 66, 63, 159, 198, 169, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {175, 193, 168, 191, 194, 25, 192, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0000/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}