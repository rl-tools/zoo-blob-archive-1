// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 184, 200, 190, 249, 47, 146, 62, 227, 56, 121, 188, 202, 158, 172, 190, 159, 188, 79, 191, 28, 150, 155, 62, 145, 68, 230, 62, 206, 88, 188, 190, 5, 138, 209, 189, 92, 182, 213, 190, 185, 126, 29, 191, 35, 62, 24, 61, 230, 196, 19, 191, 188, 178, 98, 189, 41, 48, 7, 191, 199, 107, 233, 62, 209, 227, 135, 62, 96, 14, 1, 63, 202, 194, 155, 61, 188, 150, 52, 191, 48, 164, 134, 62, 51, 56, 213, 62, 141, 44, 16, 63, 136, 166, 167, 62, 41, 244, 253, 190, 72, 99, 63, 63, 250, 60, 167, 190, 114, 161, 172, 61, 204, 52, 99, 63, 203, 120, 121, 190, 191, 110, 44, 63, 0, 20, 13, 63, 47, 185, 171, 62, 94, 105, 238, 190, 10, 32, 59, 189, 25, 89, 220, 62, 200, 247, 27, 62, 102, 96, 231, 62, 237, 199, 171, 60, 146, 202, 33, 61, 96, 232, 161, 190, 47, 247, 205, 190, 121, 208, 0, 63, 76, 201, 224, 62, 195, 171, 0, 191, 50, 206, 146, 60, 87, 151, 32, 190, 101, 141, 52, 190, 197, 144, 146, 61, 31, 59, 193, 190, 65, 167, 218, 190, 158, 71, 32, 191, 231, 149, 214, 61, 220, 234, 0, 190, 40, 209, 13, 63, 248, 19, 7, 189, 45, 39, 167, 188, 151, 139, 196, 190, 145, 24, 11, 63, 109, 5, 62, 62, 3, 89, 132, 190, 114, 195, 6, 191, 48, 185, 111, 62, 24, 33, 162, 62, 255, 80, 136, 62, 115, 91, 58, 62, 174, 107, 4, 63, 80, 114, 171, 190, 199, 224, 125, 189, 172, 174, 20, 62, 177, 55, 135, 62, 55, 252, 209, 62, 90, 248, 171, 62, 199, 80, 232, 190, 247, 208, 57, 190, 128, 195, 106, 62, 25, 114, 187, 190, 148, 83, 198, 190, 5, 117, 137, 62, 17, 223, 131, 62, 152, 70, 3, 191, 19, 125, 105, 62, 88, 83, 61, 63, 217, 49, 98, 62, 148, 104, 190, 62, 248, 34, 214, 189, 128, 250, 176, 62, 151, 158, 9, 190, 162, 154, 166, 61, 13, 92, 207, 190, 141, 246, 252, 190, 45, 25, 46, 191, 176, 242, 144, 189, 118, 231, 119, 62, 34, 121, 27, 63, 65, 243, 137, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 119, 27, 191, 10, 107, 55, 61, 64, 136, 217, 62, 218, 97, 223, 62, 11, 100, 1, 62, 32, 57, 177, 189, 163, 88, 214, 62, 45, 162, 163, 189, 145, 79, 92, 190, 24, 158, 182, 62, 196, 47, 36, 189, 150, 140, 161, 61, 17, 127, 8, 190, 205, 90, 220, 190, 250, 120, 13, 190, 147, 180, 16, 63, 123, 114, 17, 63, 229, 150, 200, 62, 80, 21, 125, 190, 72, 223, 20, 63, 167, 126, 161, 62, 3, 32, 18, 63, 114, 2, 64, 63, 210, 196, 163, 190, 4, 201, 198, 58, 26, 172, 11, 190, 117, 229, 11, 191, 185, 158, 235, 61, 245, 35, 59, 61, 220, 98, 29, 191, 165, 165, 212, 190, 187, 180, 3, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 32, 81, 189, 51, 122, 121, 62, 155, 131, 88, 62, 156, 48, 127, 61, 98, 93, 82, 61, 9, 215, 89, 190, 97, 153, 31, 62, 39, 18, 146, 190, 62, 185, 148, 190, 129, 129, 253, 189, 94, 216, 131, 61, 69, 57, 19, 61, 147, 59, 43, 61, 20, 46, 154, 60, 149, 193, 18, 190, 206, 26, 130, 62, 22, 231, 26, 61, 25, 114, 123, 189, 186, 122, 22, 62, 123, 79, 95, 190, 22, 35, 31, 62, 58, 62, 35, 61, 42, 82, 145, 62, 119, 121, 140, 190, 103, 242, 90, 61, 180, 89, 202, 188, 77, 15, 86, 187, 6, 23, 192, 190, 136, 133, 3, 189, 220, 230, 84, 186, 43, 78, 179, 62, 192, 33, 76, 190, 74, 74, 32, 189, 14, 231, 255, 189, 203, 96, 63, 190, 185, 174, 182, 61, 62, 64, 155, 189, 166, 35, 2, 190, 217, 186, 2, 62, 94, 38, 55, 189, 198, 5, 22, 190, 16, 192, 248, 61, 187, 170, 40, 190, 209, 65, 6, 190, 3, 164, 31, 190, 1, 170, 185, 189, 79, 204, 233, 189, 193, 37, 53, 190, 194, 244, 88, 61, 87, 51, 146, 189, 227, 228, 110, 189, 202, 97, 0, 189, 49, 19, 151, 61, 201, 244, 18, 62, 221, 16, 143, 60, 112, 198, 235, 189, 103, 60, 251, 60, 228, 205, 192, 61, 216, 85, 222, 189, 245, 128, 225, 61, 211, 174, 76, 188, 54, 244, 168, 188, 104, 37, 176, 188, 168, 230, 207, 61, 118, 254, 252, 188, 25, 85, 14, 62, 194, 3, 0, 62, 219, 99, 90, 60, 133, 141, 224, 61, 67, 109, 114, 61, 158, 134, 197, 61, 100, 123, 26, 62, 72, 152, 55, 62, 224, 19, 72, 62, 99, 68, 141, 189, 195, 251, 241, 188, 19, 153, 85, 61, 101, 221, 32, 190, 172, 139, 112, 189, 188, 239, 18, 61, 158, 56, 0, 62, 166, 55, 159, 185, 121, 20, 140, 188, 177, 225, 3, 62, 78, 27, 159, 61, 84, 151, 35, 62, 27, 253, 214, 61, 181, 24, 87, 61, 219, 57, 80, 190, 33, 183, 233, 61, 222, 183, 197, 188, 99, 118, 217, 188, 252, 111, 250, 189, 240, 146, 133, 61, 236, 1, 144, 60, 253, 58, 157, 59, 30, 8, 246, 189, 217, 35, 131, 62, 81, 234, 134, 62, 242, 246, 110, 62, 222, 203, 119, 60, 76, 173, 48, 190, 217, 193, 13, 62, 25, 45, 172, 61, 140, 105, 42, 190, 57, 191, 205, 189, 90, 49, 213, 189, 36, 72, 38, 61, 176, 146, 67, 62, 136, 31, 115, 61, 189, 175, 229, 60, 146, 119, 17, 62, 221, 164, 95, 188, 182, 248, 160, 189, 167, 147, 43, 62, 230, 243, 47, 190, 29, 108, 3, 62, 119, 122, 239, 61, 192, 62, 174, 189, 72, 156, 104, 190, 243, 46, 91, 62, 42, 220, 20, 62, 102, 70, 191, 188, 180, 209, 138, 189, 194, 126, 84, 61, 101, 202, 244, 61, 48, 225, 14, 62, 2, 12, 0, 62, 179, 21, 217, 61, 254, 27, 26, 190, 184, 25, 2, 190, 56, 11, 211, 61, 219, 42, 99, 61, 33, 246, 106, 188, 145, 206, 235, 189, 151, 33, 72, 189, 10, 243, 7, 61, 168, 120, 163, 62, 184, 233, 144, 62, 65, 185, 137, 188, 73, 157, 54, 61, 7, 142, 144, 60, 81, 133, 252, 189, 164, 173, 217, 61, 90, 185, 174, 61, 42, 218, 28, 60, 135, 59, 54, 190, 44, 191, 235, 60, 103, 89, 12, 190, 158, 103, 32, 61, 13, 244, 48, 62, 159, 238, 156, 189, 128, 239, 65, 60, 225, 194, 58, 190, 160, 254, 190, 189, 25, 90, 40, 62, 154, 64, 133, 60, 22, 131, 167, 61, 101, 150, 111, 190, 210, 192, 233, 61, 104, 78, 122, 189, 213, 157, 56, 190, 91, 212, 17, 190, 146, 107, 55, 187, 155, 8, 19, 61, 14, 29, 173, 61, 5, 199, 36, 61, 150, 89, 165, 61, 39, 26, 1, 61, 217, 31, 57, 60, 119, 12, 43, 190, 119, 118, 105, 60, 88, 49, 3, 190, 111, 128, 185, 189, 150, 75, 6, 61, 105, 51, 51, 190, 39, 200, 97, 61, 119, 254, 228, 188, 145, 248, 167, 187, 126, 86, 90, 60, 203, 30, 196, 189, 138, 29, 130, 61, 105, 134, 43, 190, 148, 249, 16, 190, 141, 65, 46, 189, 135, 88, 193, 61, 5, 191, 163, 61, 178, 0, 41, 60, 255, 61, 145, 61, 131, 29, 186, 189, 3, 68, 43, 190, 135, 80, 144, 188, 112, 140, 190, 59, 52, 27, 2, 62, 232, 169, 242, 188, 176, 82, 47, 188, 71, 167, 39, 189, 159, 126, 24, 190, 163, 110, 212, 61, 66, 236, 132, 189, 232, 81, 157, 189, 69, 226, 24, 190, 85, 127, 135, 190, 222, 166, 32, 189, 175, 205, 169, 189, 145, 16, 241, 61, 39, 46, 160, 61, 148, 56, 71, 59, 86, 81, 176, 61, 192, 106, 204, 61, 65, 87, 49, 61, 136, 187, 181, 188, 144, 189, 85, 62, 82, 108, 134, 60, 153, 30, 42, 188, 77, 8, 30, 189, 153, 224, 207, 61, 254, 70, 111, 59, 220, 28, 147, 61, 155, 141, 162, 62, 16, 206, 120, 190, 253, 237, 196, 61, 84, 137, 32, 62, 39, 26, 180, 60, 227, 174, 241, 61, 4, 89, 186, 190, 131, 105, 66, 190, 27, 198, 70, 60, 128, 65, 68, 62, 15, 79, 61, 62, 201, 59, 129, 190, 119, 230, 141, 62, 2, 119, 74, 62, 214, 80, 223, 62, 102, 96, 83, 62, 202, 115, 190, 189, 188, 80, 91, 62, 194, 36, 168, 190, 40, 234, 157, 190, 69, 148, 41, 62, 241, 187, 52, 62, 75, 148, 203, 61, 22, 113, 132, 61, 243, 91, 41, 62, 73, 55, 148, 61, 10, 249, 181, 61, 183, 31, 210, 189, 102, 215, 246, 61, 10, 19, 200, 190, 85, 96, 135, 190, 234, 72, 145, 190, 84, 155, 210, 188, 88, 44, 194, 189, 26, 74, 241, 186, 28, 28, 117, 190, 133, 112, 49, 190, 48, 185, 50, 190, 231, 145, 245, 60, 154, 19, 214, 59, 48, 209, 28, 190, 199, 1, 127, 60, 156, 175, 31, 189, 152, 195, 205, 189, 109, 108, 37, 189, 5, 183, 55, 61, 117, 85, 102, 61, 82, 144, 151, 61, 63, 243, 95, 60, 122, 22, 159, 189, 98, 194, 228, 61, 158, 126, 57, 189, 129, 192, 134, 61, 206, 115, 137, 189, 154, 162, 49, 190, 210, 112, 15, 190, 225, 211, 242, 59, 58, 194, 199, 61, 220, 62, 202, 189, 155, 1, 33, 190, 96, 114, 27, 190, 234, 252, 245, 189, 177, 5, 162, 61, 193, 248, 146, 189, 1, 179, 34, 190, 59, 146, 0, 188, 15, 37, 120, 188, 62, 146, 231, 59, 150, 251, 154, 188, 195, 127, 63, 189, 147, 232, 207, 61, 23, 3, 159, 60, 199, 144, 208, 188, 35, 112, 43, 61, 25, 124, 116, 189, 38, 172, 63, 190, 61, 69, 48, 62, 94, 48, 230, 59, 77, 226, 48, 190, 155, 244, 0, 62, 190, 168, 42, 190, 130, 150, 12, 189, 141, 66, 195, 188, 46, 17, 77, 60, 72, 216, 111, 61, 74, 137, 24, 61, 26, 211, 87, 188, 169, 64, 26, 190, 162, 179, 15, 190, 51, 189, 255, 61, 238, 217, 244, 189, 245, 175, 173, 189, 120, 69, 37, 61, 223, 157, 146, 58, 132, 99, 32, 190, 192, 226, 184, 59, 57, 96, 36, 62, 72, 121, 83, 189, 163, 168, 217, 61, 192, 124, 245, 61, 87, 233, 166, 189, 133, 164, 68, 189, 189, 248, 20, 62, 239, 16, 37, 62, 239, 56, 8, 190, 241, 216, 129, 60, 49, 103, 52, 62, 111, 142, 130, 59, 50, 98, 236, 61, 63, 3, 136, 60, 71, 125, 255, 61, 136, 109, 123, 61, 107, 59, 252, 189, 64, 201, 132, 62, 87, 25, 161, 190, 132, 9, 177, 189, 7, 5, 236, 60, 64, 212, 179, 189, 57, 124, 45, 190, 0, 249, 49, 188, 241, 167, 198, 61, 137, 122, 217, 61, 12, 114, 96, 61, 60, 111, 63, 62, 72, 112, 24, 190, 208, 87, 176, 190, 38, 36, 192, 189, 105, 96, 191, 61, 177, 134, 209, 62, 174, 0, 8, 61, 247, 70, 251, 189, 7, 164, 141, 61, 57, 20, 24, 62, 30, 129, 119, 61, 48, 162, 92, 62, 187, 242, 40, 62, 252, 139, 91, 189, 223, 89, 199, 189, 20, 130, 81, 190, 58, 218, 63, 62, 55, 129, 26, 190, 27, 9, 88, 189, 113, 203, 97, 190, 157, 236, 60, 190, 57, 109, 9, 61, 155, 141, 46, 189, 24, 165, 170, 188, 71, 174, 230, 61, 181, 88, 230, 189, 189, 141, 21, 190, 153, 107, 187, 61, 113, 137, 176, 189, 219, 148, 9, 62, 191, 7, 191, 61, 22, 253, 205, 61, 233, 178, 67, 62, 246, 124, 113, 190, 180, 139, 31, 62, 178, 151, 28, 62, 61, 84, 83, 61, 215, 220, 48, 190, 207, 22, 183, 189, 35, 125, 133, 61, 161, 186, 197, 62, 183, 30, 32, 190, 160, 205, 51, 62, 36, 124, 61, 62, 34, 52, 156, 60, 190, 190, 186, 61, 133, 196, 160, 61, 210, 143, 124, 190, 96, 123, 230, 61, 172, 40, 83, 190, 176, 51, 171, 61, 117, 181, 67, 61, 110, 247, 37, 190, 34, 2, 90, 189, 121, 254, 84, 190, 43, 85, 145, 61, 161, 17, 190, 189, 132, 24, 88, 60, 176, 133, 253, 189, 251, 105, 12, 62, 211, 72, 6, 189, 250, 27, 96, 189, 50, 139, 152, 61, 179, 135, 0, 62, 23, 183, 139, 61, 245, 138, 149, 61, 106, 60, 93, 62, 244, 61, 51, 62, 107, 27, 234, 61, 26, 43, 149, 187, 31, 55, 81, 61, 2, 245, 149, 61, 103, 88, 13, 62, 12, 49, 9, 61, 40, 218, 21, 189, 90, 33, 192, 189, 104, 240, 22, 190, 44, 67, 17, 189, 126, 122, 141, 188, 28, 234, 158, 189, 226, 106, 17, 190, 121, 56, 206, 189, 127, 6, 204, 61, 17, 231, 114, 59, 90, 122, 116, 61, 153, 255, 239, 61, 62, 1, 191, 189, 55, 228, 140, 61, 192, 108, 183, 189, 178, 58, 76, 189, 135, 238, 29, 190, 105, 118, 245, 188, 202, 108, 193, 189, 125, 108, 183, 61, 198, 199, 56, 188, 18, 55, 58, 190, 69, 160, 181, 189, 162, 191, 92, 61, 94, 109, 235, 188, 159, 15, 239, 189, 156, 165, 33, 62, 34, 187, 9, 190, 22, 62, 213, 61, 24, 86, 27, 62, 234, 27, 238, 189, 141, 235, 0, 61, 11, 219, 92, 189, 17, 230, 166, 189, 70, 109, 63, 59, 166, 79, 219, 61, 61, 22, 242, 61, 244, 66, 147, 61, 121, 22, 140, 189, 209, 236, 201, 61, 73, 208, 62, 61, 175, 154, 36, 190, 87, 93, 46, 190, 243, 227, 5, 190, 46, 96, 193, 61, 145, 171, 30, 190, 215, 161, 223, 59, 107, 94, 27, 62, 77, 94, 202, 189, 13, 196, 224, 189, 241, 204, 20, 190, 210, 151, 127, 61, 102, 216, 132, 61, 34, 38, 37, 188, 163, 125, 172, 189, 92, 121, 136, 61, 1, 37, 48, 189, 171, 193, 216, 189, 223, 156, 193, 189, 152, 109, 252, 188, 128, 30, 155, 188, 138, 195, 2, 62, 90, 199, 44, 62, 136, 176, 160, 188, 26, 198, 194, 57, 146, 129, 161, 189, 71, 145, 36, 62, 22, 93, 153, 61, 28, 40, 212, 61, 223, 249, 140, 189, 130, 48, 239, 59, 94, 249, 192, 187, 199, 44, 204, 189, 106, 189, 19, 190, 244, 248, 43, 62, 239, 179, 76, 62, 22, 103, 8, 62, 168, 186, 72, 62, 19, 192, 121, 188, 97, 105, 234, 189, 14, 7, 72, 62, 202, 75, 187, 60, 64, 3, 232, 59, 120, 106, 232, 61, 165, 57, 246, 61, 54, 246, 3, 62, 59, 129, 133, 61, 146, 146, 204, 60, 22, 100, 26, 184, 88, 39, 95, 62, 133, 40, 44, 62, 99, 179, 238, 189, 225, 159, 55, 190, 64, 88, 116, 188, 133, 218, 143, 61, 25, 198, 214, 189, 153, 84, 17, 190, 58, 92, 196, 187, 132, 49, 146, 61, 0, 205, 96, 189, 88, 69, 5, 61, 76, 241, 123, 61, 78, 249, 6, 61, 251, 50, 65, 190, 144, 206, 254, 189, 227, 207, 59, 61, 178, 134, 156, 189, 36, 240, 51, 190, 51, 18, 5, 190, 134, 201, 251, 61, 185, 104, 254, 189, 41, 45, 161, 189, 74, 24, 145, 187, 167, 39, 29, 190, 192, 154, 49, 190, 117, 184, 52, 61, 204, 135, 114, 61, 151, 26, 76, 61, 142, 100, 68, 190, 87, 248, 39, 60, 89, 251, 214, 61, 205, 154, 246, 61, 242, 42, 64, 189, 90, 135, 146, 188, 238, 208, 189, 61, 77, 139, 2, 62, 82, 194, 11, 188, 12, 115, 142, 61, 13, 174, 87, 187, 246, 70, 164, 61, 7, 33, 171, 62, 87, 125, 145, 62, 233, 71, 60, 190, 147, 142, 18, 190, 58, 75, 165, 62, 156, 130, 34, 190, 142, 219, 22, 191, 90, 197, 48, 190, 36, 203, 154, 189, 118, 113, 205, 61, 56, 49, 232, 188, 90, 141, 137, 187, 155, 56, 166, 60, 204, 70, 191, 61, 41, 29, 236, 188, 149, 239, 244, 61, 184, 188, 82, 62, 58, 172, 52, 190, 53, 132, 106, 61, 190, 243, 219, 61, 150, 205, 193, 61, 250, 248, 156, 190, 95, 209, 158, 61, 207, 95, 70, 189, 60, 179, 91, 190, 98, 213, 133, 189, 201, 191, 59, 189, 39, 113, 167, 189, 149, 145, 224, 62, 41, 70, 174, 189, 72, 77, 154, 187, 236, 201, 73, 61, 211, 166, 133, 61, 134, 147, 46, 189, 254, 15, 201, 189, 211, 211, 250, 187, 34, 223, 162, 61, 206, 61, 10, 60, 212, 35, 40, 190, 9, 54, 194, 189, 209, 115, 139, 189, 29, 231, 153, 61, 35, 74, 81, 188, 229, 205, 235, 60, 142, 36, 93, 190, 184, 221, 219, 189, 41, 101, 141, 189, 41, 212, 214, 61, 84, 134, 205, 61, 20, 62, 155, 61, 163, 105, 231, 61, 72, 112, 26, 61, 6, 109, 11, 190, 26, 93, 15, 190, 124, 179, 1, 61, 248, 128, 76, 190, 89, 28, 41, 189, 186, 15, 82, 190, 112, 146, 24, 62, 92, 81, 10, 190, 202, 131, 70, 190, 127, 206, 168, 189, 123, 2, 113, 187, 22, 242, 20, 190, 39, 135, 197, 61, 102, 68, 214, 61, 150, 254, 192, 188, 177, 78, 12, 190, 113, 168, 3, 62, 232, 228, 25, 190, 45, 80, 91, 61, 196, 99, 49, 62, 136, 241, 75, 189, 45, 237, 122, 61, 191, 31, 34, 62, 45, 12, 211, 189, 16, 225, 197, 189, 168, 122, 248, 61, 96, 123, 1, 61, 116, 206, 188, 188, 181, 234, 69, 190, 208, 233, 54, 62, 152, 240, 7, 62, 82, 164, 135, 61, 169, 189, 146, 61, 107, 213, 168, 61, 155, 51, 34, 190, 6, 103, 18, 190, 17, 86, 36, 190, 230, 4, 253, 189, 211, 163, 226, 60, 118, 57, 93, 61, 154, 0, 14, 62, 4, 86, 211, 61, 231, 110, 138, 61, 20, 234, 80, 189, 80, 121, 110, 190, 221, 202, 153, 61, 205, 0, 1, 62, 185, 198, 8, 62, 3, 107, 247, 61, 81, 216, 183, 61, 230, 199, 49, 190, 124, 24, 131, 189, 31, 24, 71, 190, 130, 139, 1, 62, 167, 83, 95, 60, 105, 219, 21, 62, 45, 240, 93, 189, 165, 226, 224, 61, 226, 146, 188, 60, 223, 149, 161, 189, 91, 238, 23, 62, 60, 149, 117, 188, 196, 125, 21, 62, 9, 66, 165, 189, 205, 251, 7, 187, 66, 218, 190, 61, 184, 80, 27, 62, 143, 24, 30, 189, 120, 121, 167, 189, 218, 112, 198, 61, 111, 41, 236, 60, 9, 12, 14, 62, 168, 183, 244, 189, 146, 159, 243, 61, 143, 55, 121, 189, 31, 216, 6, 190, 214, 90, 217, 188, 59, 68, 1, 61, 154, 126, 245, 189, 18, 37, 62, 61, 64, 250, 168, 61, 184, 10, 130, 61, 46, 75, 51, 62, 219, 193, 16, 62, 120, 192, 227, 60, 131, 190, 223, 61, 165, 91, 18, 62, 49, 193, 167, 60, 244, 155, 248, 189, 197, 189, 146, 58, 158, 77, 80, 188, 85, 110, 250, 61, 101, 145, 91, 190, 203, 18, 50, 190, 235, 49, 209, 189, 106, 7, 13, 61, 37, 15, 12, 62, 115, 230, 1, 190, 243, 15, 65, 189, 142, 22, 59, 62, 1, 102, 99, 61, 3, 2, 167, 60, 224, 243, 42, 62, 83, 129, 49, 188, 246, 77, 82, 62, 249, 54, 186, 61, 151, 178, 26, 190, 151, 32, 25, 189, 19, 59, 35, 189, 51, 247, 113, 189, 50, 5, 204, 188, 16, 168, 108, 61, 0, 198, 231, 61, 107, 27, 180, 189, 183, 149, 36, 190, 88, 7, 34, 190, 79, 78, 46, 190, 184, 228, 12, 62, 210, 186, 66, 189, 24, 118, 237, 189, 133, 70, 20, 62, 8, 185, 182, 61, 3, 126, 2, 190, 185, 152, 60, 190, 157, 195, 215, 189, 167, 85, 173, 189, 156, 193, 22, 188, 99, 231, 94, 189, 138, 146, 147, 186, 12, 255, 50, 189, 181, 162, 88, 189, 207, 127, 116, 189, 65, 96, 76, 60, 181, 110, 46, 189, 61, 22, 34, 190, 126, 141, 11, 61, 251, 55, 51, 62, 198, 100, 54, 61, 140, 231, 252, 61, 199, 92, 231, 61, 111, 110, 212, 61, 56, 27, 54, 189, 121, 138, 49, 190, 255, 68, 234, 187, 157, 96, 73, 61, 210, 37, 84, 61, 164, 213, 81, 61, 57, 134, 216, 61, 137, 152, 49, 189, 1, 29, 78, 189, 58, 5, 32, 189, 16, 243, 111, 189, 85, 44, 140, 61, 148, 143, 0, 190, 166, 243, 150, 189, 65, 162, 113, 61, 59, 75, 0, 62, 31, 44, 134, 189, 142, 213, 0, 190, 171, 18, 20, 61, 6, 255, 50, 190, 72, 91, 24, 62, 144, 242, 42, 189, 95, 133, 191, 59, 160, 64, 97, 189, 30, 201, 170, 189, 18, 85, 151, 189, 73, 150, 241, 61, 47, 252, 7, 190, 34, 243, 66, 61, 55, 6, 115, 188, 133, 150, 46, 189, 4, 222, 0, 190, 255, 160, 192, 61, 215, 90, 112, 61, 169, 189, 53, 190, 24, 142, 215, 61, 181, 148, 37, 60, 207, 7, 153, 189, 73, 149, 139, 189, 252, 136, 141, 189, 97, 72, 100, 187, 153, 58, 171, 61, 141, 170, 247, 61, 230, 32, 194, 189, 215, 181, 161, 188, 236, 125, 11, 189, 116, 118, 58, 190, 116, 108, 26, 190, 186, 154, 232, 189, 133, 176, 208, 60, 1, 102, 217, 61, 128, 19, 214, 188, 192, 235, 236, 61, 202, 196, 152, 189, 152, 165, 231, 189, 42, 83, 78, 189, 151, 122, 17, 62, 192, 65, 183, 60, 81, 166, 61, 189, 113, 223, 151, 188, 59, 30, 57, 61, 253, 199, 69, 189, 115, 107, 74, 190, 200, 6, 16, 61, 68, 13, 119, 61, 225, 23, 193, 61, 63, 98, 14, 62, 167, 197, 7, 190, 44, 255, 9, 190, 105, 71, 225, 61, 40, 157, 115, 62, 136, 131, 111, 61, 5, 26, 93, 60, 73, 227, 131, 62, 192, 150, 75, 190, 254, 48, 229, 61, 114, 125, 192, 189, 252, 97, 34, 62, 113, 37, 46, 61, 124, 200, 64, 190, 207, 84, 211, 61, 103, 21, 201, 60, 30, 42, 57, 62, 218, 226, 18, 62, 42, 141, 27, 61, 240, 134, 145, 60, 18, 64, 133, 60, 29, 78, 199, 189, 98, 91, 205, 60, 60, 226, 214, 61, 253, 84, 166, 189, 135, 165, 206, 61, 152, 229, 164, 189, 34, 131, 158, 189, 123, 1, 217, 60, 108, 187, 58, 190, 235, 134, 186, 189, 35, 14, 7, 62, 29, 51, 95, 62, 247, 210, 52, 190, 1, 211, 235, 61, 35, 68, 225, 61, 160, 91, 166, 62, 19, 212, 141, 62, 100, 42, 101, 60, 116, 106, 46, 61, 220, 71, 94, 61, 37, 110, 13, 189, 224, 237, 251, 189, 9, 15, 218, 189, 116, 213, 48, 62, 23, 180, 223, 189, 201, 126, 224, 188, 64, 105, 56, 61, 93, 164, 202, 61, 132, 251, 236, 60, 86, 247, 25, 62, 159, 29, 29, 190, 14, 136, 1, 190, 143, 55, 30, 61, 127, 201, 45, 62, 221, 16, 158, 189, 219, 82, 128, 190, 205, 103, 90, 190, 120, 176, 119, 187, 83, 152, 181, 60, 2, 123, 19, 191, 18, 16, 113, 189, 114, 7, 33, 62, 246, 126, 194, 59, 45, 144, 196, 60, 173, 206, 152, 190, 146, 31, 235, 188, 160, 189, 41, 62, 162, 46, 27, 61, 20, 89, 159, 188, 103, 68, 130, 190, 202, 245, 171, 189, 32, 146, 213, 61, 237, 145, 16, 62, 132, 210, 192, 61, 33, 92, 3, 190, 0, 109, 42, 62, 65, 185, 160, 187, 226, 123, 68, 62, 168, 160, 147, 61, 176, 117, 197, 188, 236, 7, 154, 61, 210, 225, 16, 190, 174, 60, 71, 189, 0, 97, 218, 189, 190, 64, 224, 61, 68, 192, 146, 61, 57, 96, 154, 61, 148, 213, 62, 189, 197, 238, 92, 190, 206, 46, 225, 61, 208, 42, 212, 189, 229, 11, 163, 189, 157, 192, 70, 62, 186, 10, 123, 189, 29, 120, 30, 62, 2, 103, 168, 189, 89, 68, 73, 62, 136, 108, 162, 190, 148, 24, 81, 190, 144, 107, 152, 60, 15, 124, 55, 188, 81, 135, 219, 61, 46, 115, 75, 189, 193, 104, 155, 61, 195, 251, 195, 189, 148, 14, 39, 62, 138, 15, 171, 61, 250, 101, 107, 189, 43, 3, 102, 188, 248, 252, 111, 189, 179, 247, 66, 62, 182, 115, 8, 60, 217, 65, 153, 189, 103, 142, 199, 60, 21, 14, 61, 62, 63, 173, 53, 189, 131, 85, 44, 62, 171, 208, 7, 190, 228, 215, 30, 190, 7, 38, 139, 189, 60, 77, 39, 62, 47, 252, 231, 61, 179, 108, 52, 61, 195, 234, 89, 62, 82, 61, 241, 60, 175, 14, 138, 60, 245, 110, 151, 189, 211, 178, 156, 190, 23, 21, 233, 61, 232, 110, 38, 190, 173, 61, 208, 189, 64, 147, 58, 60, 132, 15, 126, 189, 162, 97, 208, 61, 92, 116, 235, 189, 84, 159, 12, 62, 168, 222, 27, 62, 233, 165, 250, 61, 195, 32, 25, 62, 192, 241, 29, 189, 175, 100, 133, 189, 121, 237, 225, 189, 27, 141, 34, 62, 109, 128, 161, 189, 142, 87, 100, 62, 20, 28, 200, 188, 238, 5, 216, 187, 134, 225, 101, 189, 132, 128, 157, 60, 135, 182, 77, 61, 130, 179, 47, 190, 233, 247, 172, 60, 141, 1, 74, 61, 204, 6, 41, 62, 182, 194, 169, 189, 156, 4, 20, 62, 96, 114, 154, 62, 49, 200, 84, 61, 206, 203, 23, 190, 62, 198, 123, 190, 33, 193, 71, 62, 161, 93, 192, 190, 157, 127, 230, 60, 157, 151, 14, 189, 184, 115, 163, 189, 146, 3, 3, 62, 234, 131, 214, 189, 41, 227, 72, 62, 212, 102, 97, 189, 30, 215, 194, 189, 152, 68, 18, 62, 20, 152, 159, 61, 19, 222, 119, 188, 220, 25, 141, 61, 61, 23, 17, 60, 95, 122, 127, 62, 169, 197, 49, 62, 13, 88, 57, 190, 199, 77, 97, 62, 2, 215, 15, 189, 194, 18, 246, 188, 170, 174, 107, 190, 206, 115, 138, 61, 143, 225, 253, 61, 238, 80, 110, 62, 4, 237, 163, 61, 161, 169, 254, 61, 10, 94, 126, 190, 221, 22, 133, 190, 192, 144, 4, 62, 127, 136, 130, 61, 10, 42, 31, 189, 201, 206, 139, 190, 148, 86, 57, 61, 126, 221, 162, 62, 79, 45, 136, 62, 170, 234, 213, 60, 28, 138, 59, 61, 88, 65, 47, 62, 226, 143, 98, 189, 36, 245, 54, 190, 244, 152, 168, 188, 33, 194, 170, 60, 212, 191, 21, 62, 205, 26, 29, 61, 50, 69, 179, 61, 89, 172, 48, 190, 67, 177, 81, 61, 171, 58, 6, 190, 9, 129, 107, 61, 231, 37, 183, 189, 217, 221, 128, 189, 241, 164, 8, 190, 141, 6, 217, 189, 129, 209, 47, 189, 51, 181, 98, 190, 175, 193, 123, 190, 84, 34, 106, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 242, 195, 59, 173, 144, 58, 189, 78, 236, 39, 62, 14, 183, 246, 61, 172, 139, 40, 62, 75, 93, 6, 190, 220, 121, 136, 189, 49, 153, 170, 61, 129, 33, 184, 188, 166, 86, 36, 190, 20, 125, 126, 60, 186, 42, 216, 61, 114, 41, 242, 187, 243, 111, 3, 189, 91, 68, 38, 190, 226, 47, 62, 190, 39, 63, 93, 189, 140, 178, 47, 62, 85, 4, 249, 59, 19, 150, 146, 62, 59, 212, 237, 189, 230, 168, 85, 62, 207, 190, 145, 189, 2, 217, 12, 189, 47, 171, 45, 190, 170, 18, 122, 62, 67, 37, 101, 62, 80, 248, 177, 61, 25, 196, 40, 62, 38, 52, 230, 61, 247, 196, 82, 189, 121, 52, 192, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {3, 123, 190, 62, 162, 164, 220, 189, 227, 182, 16, 189, 21, 215, 142, 62, 24, 79, 43, 190, 20, 201, 199, 189, 116, 107, 234, 61, 175, 38, 206, 190, 79, 63, 0, 62, 148, 153, 203, 189, 161, 235, 151, 190, 254, 39, 128, 62, 248, 226, 39, 62, 232, 186, 32, 190, 93, 153, 30, 190, 235, 180, 25, 62, 206, 32, 225, 189, 87, 252, 243, 62, 109, 115, 42, 61, 142, 81, 103, 189, 78, 203, 136, 61, 85, 41, 130, 188, 199, 75, 9, 190, 24, 21, 48, 62, 8, 44, 193, 61, 42, 218, 184, 189, 152, 152, 135, 190, 10, 244, 88, 190, 55, 180, 64, 62, 18, 26, 39, 62, 89, 119, 94, 62, 56, 228, 66, 190, 45, 250, 100, 61, 234, 67, 162, 189, 211, 222, 245, 189, 48, 179, 55, 190, 138, 69, 56, 190, 23, 70, 223, 187, 149, 219, 103, 188, 140, 123, 76, 62, 40, 227, 44, 190, 21, 91, 161, 59, 218, 77, 62, 190, 89, 176, 37, 61, 12, 45, 190, 61, 109, 74, 46, 61, 2, 65, 94, 189, 178, 154, 55, 61, 88, 141, 90, 61, 174, 195, 19, 60, 207, 211, 83, 190, 35, 25, 126, 190, 249, 53, 38, 62, 251, 169, 26, 190, 62, 226, 46, 61, 10, 184, 174, 60, 32, 53, 58, 189, 101, 58, 38, 190, 190, 90, 134, 58, 197, 109, 207, 189, 237, 126, 4, 61, 28, 40, 181, 60, 210, 89, 0, 189, 29, 203, 30, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 0, 12, 190, 63, 119, 52, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {236, 209, 130, 190, 229, 251, 206, 62, 116, 211, 92, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {225, 82, 85, 191, 47, 134, 38, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0000/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}